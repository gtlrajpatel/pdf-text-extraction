				 *** Text Processing using Spacy *** 


============================ Sentence 1 =============================

AI-25 Applications of Machine learning Machine learning is a buzzword for today's technology, and it is growing very rapidly day by day. 


>> Tokens are: 
[AI-25, Applications, Machine, learning, Machine, learning, buzzword, today, technology, ,, growing, rapidly, day, day, .] 

>> PoS Tags are: 
[('AI-25', 'PROPN'), ('Applications', 'PROPN'), ('Machine', 'NOUN'), ('learning', 'VERB'), ('Machine', 'NOUN'), ('learning', 'NOUN'), ('buzzword', 'NOUN'), ('today', 'NOUN'), ('technology', 'NOUN'), (',', 'PUNCT'), ('growing', 'VERB'), ('rapidly', 'ADV'), ('day', 'NOUN'), ('day', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('AI-25', 'compound'), ('Applications', 'nsubj'), ('Machine', 'pobj'), ('learning', 'acl'), ('Machine', 'compound'), ('learning', 'dobj'), ('buzzword', 'attr'), ('today', 'poss'), ('technology', 'pobj'), (',', 'punct'), ('growing', 'conj'), ('rapidly', 'advmod'), ('day', 'npadvmod'), ('day', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[AI-25, Applications], [Applications, Machine], [Machine, learning], [learning, Machine], [Machine, learning], [learning, buzzword], [buzzword, today], [today, technology], [technology, ,], [,, growing], [growing, rapidly], [rapidly, day], [day, day], [day, .]]

>> Trigrams: 
[[AI-25, Applications, Machine], [Applications, Machine, learning], [Machine, learning, Machine], [learning, Machine, learning], [Machine, learning, buzzword], [learning, buzzword, today], [buzzword, today, technology], [today, technology, ,], [technology, ,, growing], [,, growing, rapidly], [growing, rapidly, day], [rapidly, day, day], [day, day, .]]

>> Noun Phrases are: 
[AI-25 Applications, Machine, Machine learning, a buzzword, today's technology, it, day]

>> Named Entities are: 
[('today', 'DATE')]


============================ Sentence 2 =============================

We are using machine learning in our daily life even without knowing it such as Google Maps, Google assistant, Alexa, etc. 


>> Tokens are: 
[machine, learning, daily, life, knowing, Google, Maps, ,, Google, assistant, ,, Alexa, ,, etc, .] 

>> PoS Tags are: 
[('machine', 'NOUN'), ('learning', 'VERB'), ('daily', 'ADJ'), ('life', 'NOUN'), ('knowing', 'VERB'), ('Google', 'PROPN'), ('Maps', 'PROPN'), (',', 'PUNCT'), ('Google', 'PROPN'), ('assistant', 'NOUN'), (',', 'PUNCT'), ('Alexa', 'PROPN'), (',', 'PUNCT'), ('etc', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('machine', 'compound'), ('learning', 'dobj'), ('daily', 'amod'), ('life', 'pobj'), ('knowing', 'pcomp'), ('Google', 'compound'), ('Maps', 'pobj'), (',', 'punct'), ('Google', 'compound'), ('assistant', 'conj'), (',', 'punct'), ('Alexa', 'conj'), (',', 'punct'), ('etc', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[machine, learning], [learning, daily], [daily, life], [life, knowing], [knowing, Google], [Google, Maps], [Maps, ,], [,, Google], [Google, assistant], [assistant, ,], [,, Alexa], [Alexa, ,], [,, etc], [etc, .]]

>> Trigrams: 
[[machine, learning, daily], [learning, daily, life], [daily, life, knowing], [life, knowing, Google], [knowing, Google, Maps], [Google, Maps, ,], [Maps, ,, Google], [,, Google, assistant], [Google, assistant, ,], [assistant, ,, Alexa], [,, Alexa, ,], [Alexa, ,, etc], [,, etc, .]]

>> Noun Phrases are: 
[We, our daily life, it, Google Maps, Google assistant, Alexa]

>> Named Entities are: 
[('Google', 'ORG'), ('Alexa', 'ORG')]


============================ Sentence 3 =============================

Below are some most trending real-world applications of Machine Learning:  1. 


>> Tokens are: 
[trending, real, -, world, applications, Machine, Learning, :,  , 1, .] 

>> PoS Tags are: 
[('trending', 'VERB'), ('real', 'ADJ'), ('-', 'PUNCT'), ('world', 'NOUN'), ('applications', 'NOUN'), ('Machine', 'PROPN'), ('Learning', 'PROPN'), (':', 'PUNCT'), (' ', 'SPACE'), ('1', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('trending', 'acomp'), ('real', 'amod'), ('-', 'punct'), ('world', 'compound'), ('applications', 'dobj'), ('Machine', 'compound'), ('Learning', 'pobj'), (':', 'punct'), (' ', 'appos'), ('1', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[trending, real], [real, -], [-, world], [world, applications], [applications, Machine], [Machine, Learning], [Learning, :], [:,  ], [ , 1], [1, .]]

>> Trigrams: 
[[trending, real, -], [real, -, world], [-, world, applications], [world, applications, Machine], [applications, Machine, Learning], [Machine, Learning, :], [Learning, :,  ], [:,  , 1], [ , 1, .]]

>> Noun Phrases are: 
[real-world applications, Machine Learning]

>> Named Entities are: 
[('Machine Learning', 'WORK_OF_ART'), ('1', 'CARDINAL')]


============================ Sentence 4 =============================

Image Recognition: Image recognition is one of the most common applications of machine learning. 


>> Tokens are: 
[Image, Recognition, :, Image, recognition, common, applications, machine, learning, .] 

>> PoS Tags are: 
[('Image', 'NOUN'), ('Recognition', 'NOUN'), (':', 'PUNCT'), ('Image', 'NOUN'), ('recognition', 'NOUN'), ('common', 'ADJ'), ('applications', 'NOUN'), ('machine', 'NOUN'), ('learning', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Image', 'compound'), ('Recognition', 'dep'), (':', 'punct'), ('Image', 'compound'), ('recognition', 'nsubj'), ('common', 'amod'), ('applications', 'pobj'), ('machine', 'compound'), ('learning', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Image, Recognition], [Recognition, :], [:, Image], [Image, recognition], [recognition, common], [common, applications], [applications, machine], [machine, learning], [learning, .]]

>> Trigrams: 
[[Image, Recognition, :], [Recognition, :, Image], [:, Image, recognition], [Image, recognition, common], [recognition, common, applications], [common, applications, machine], [applications, machine, learning], [machine, learning, .]]

>> Noun Phrases are: 
[Image recognition, the most common applications, machine learning]

>> Named Entities are: 
[]


============================ Sentence 5 =============================

It is used to identify objects, persons, places, digital images, etc. 


>> Tokens are: 
[identify, objects, ,, persons, ,, places, ,, digital, images, ,, etc, .] 

>> PoS Tags are: 
[('identify', 'VERB'), ('objects', 'NOUN'), (',', 'PUNCT'), ('persons', 'NOUN'), (',', 'PUNCT'), ('places', 'NOUN'), (',', 'PUNCT'), ('digital', 'ADJ'), ('images', 'NOUN'), (',', 'PUNCT'), ('etc', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('identify', 'xcomp'), ('objects', 'dobj'), (',', 'punct'), ('persons', 'conj'), (',', 'punct'), ('places', 'conj'), (',', 'punct'), ('digital', 'amod'), ('images', 'conj'), (',', 'punct'), ('etc', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[identify, objects], [objects, ,], [,, persons], [persons, ,], [,, places], [places, ,], [,, digital], [digital, images], [images, ,], [,, etc], [etc, .]]

>> Trigrams: 
[[identify, objects, ,], [objects, ,, persons], [,, persons, ,], [persons, ,, places], [,, places, ,], [places, ,, digital], [,, digital, images], [digital, images, ,], [images, ,, etc], [,, etc, .]]

>> Noun Phrases are: 
[It, objects, persons, places, digital images]

>> Named Entities are: 
[]


============================ Sentence 6 =============================

The popular use case of image recognition and face detection is, Automatic friend tagging suggestion: Facebook provides us a feature of auto friend tagging suggestion. 


>> Tokens are: 
[popular, use, case, image, recognition, face, detection, ,, Automatic, friend, tagging, suggestion, :, Facebook, provides, feature, auto, friend, tagging, suggestion, .] 

>> PoS Tags are: 
[('popular', 'ADJ'), ('use', 'NOUN'), ('case', 'NOUN'), ('image', 'NOUN'), ('recognition', 'NOUN'), ('face', 'NOUN'), ('detection', 'NOUN'), (',', 'PUNCT'), ('Automatic', 'ADJ'), ('friend', 'NOUN'), ('tagging', 'NOUN'), ('suggestion', 'NOUN'), (':', 'PUNCT'), ('Facebook', 'PROPN'), ('provides', 'VERB'), ('feature', 'NOUN'), ('auto', 'NOUN'), ('friend', 'NOUN'), ('tagging', 'NOUN'), ('suggestion', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('popular', 'amod'), ('use', 'compound'), ('case', 'nsubj'), ('image', 'compound'), ('recognition', 'pobj'), ('face', 'compound'), ('detection', 'conj'), (',', 'punct'), ('Automatic', 'amod'), ('friend', 'compound'), ('tagging', 'compound'), ('suggestion', 'attr'), (':', 'punct'), ('Facebook', 'nsubj'), ('provides', 'acl'), ('feature', 'dobj'), ('auto', 'compound'), ('friend', 'compound'), ('tagging', 'compound'), ('suggestion', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[popular, use], [use, case], [case, image], [image, recognition], [recognition, face], [face, detection], [detection, ,], [,, Automatic], [Automatic, friend], [friend, tagging], [tagging, suggestion], [suggestion, :], [:, Facebook], [Facebook, provides], [provides, feature], [feature, auto], [auto, friend], [friend, tagging], [tagging, suggestion], [suggestion, .]]

>> Trigrams: 
[[popular, use, case], [use, case, image], [case, image, recognition], [image, recognition, face], [recognition, face, detection], [face, detection, ,], [detection, ,, Automatic], [,, Automatic, friend], [Automatic, friend, tagging], [friend, tagging, suggestion], [tagging, suggestion, :], [suggestion, :, Facebook], [:, Facebook, provides], [Facebook, provides, feature], [provides, feature, auto], [feature, auto, friend], [auto, friend, tagging], [friend, tagging, suggestion], [tagging, suggestion, .]]

>> Noun Phrases are: 
[The popular use case, image recognition, face detection, , Automatic friend tagging suggestion, Facebook, us, a feature, auto friend tagging suggestion]

>> Named Entities are: 
[('Automatic', 'GPE')]


============================ Sentence 7 =============================

Whenever we upload a photo with our Facebook friends, then we automatically get a tagging suggestion with name, and the technology behind this is machine learning's face detection and recognition algorithm. 


>> Tokens are: 
[upload, photo, Facebook, friends, ,, automatically, tagging, suggestion, ,, technology, machine, learning, face, detection, recognition, algorithm, .] 

>> PoS Tags are: 
[('upload', 'VERB'), ('photo', 'NOUN'), ('Facebook', 'PROPN'), ('friends', 'NOUN'), (',', 'PUNCT'), ('automatically', 'ADV'), ('tagging', 'ADJ'), ('suggestion', 'NOUN'), (',', 'PUNCT'), ('technology', 'NOUN'), ('machine', 'NOUN'), ('learning', 'NOUN'), ('face', 'NOUN'), ('detection', 'NOUN'), ('recognition', 'NOUN'), ('algorithm', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('upload', 'advcl'), ('photo', 'dobj'), ('Facebook', 'compound'), ('friends', 'pobj'), (',', 'punct'), ('automatically', 'advmod'), ('tagging', 'amod'), ('suggestion', 'dobj'), (',', 'punct'), ('technology', 'nsubj'), ('machine', 'compound'), ('learning', 'poss'), ('face', 'compound'), ('detection', 'attr'), ('recognition', 'compound'), ('algorithm', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[upload, photo], [photo, Facebook], [Facebook, friends], [friends, ,], [,, automatically], [automatically, tagging], [tagging, suggestion], [suggestion, ,], [,, technology], [technology, machine], [machine, learning], [learning, face], [face, detection], [detection, recognition], [recognition, algorithm], [algorithm, .]]

>> Trigrams: 
[[upload, photo, Facebook], [photo, Facebook, friends], [Facebook, friends, ,], [friends, ,, automatically], [,, automatically, tagging], [automatically, tagging, suggestion], [tagging, suggestion, ,], [suggestion, ,, technology], [,, technology, machine], [technology, machine, learning], [machine, learning, face], [learning, face, detection], [face, detection, recognition], [detection, recognition, algorithm], [recognition, algorithm, .]]

>> Noun Phrases are: 
[we, a photo, our Facebook friends, we, a tagging suggestion, name, the technology, machine learning's face detection, recognition algorithm]

>> Named Entities are: 
[]


============================ Sentence 8 =============================

It is based on the Facebook project named "Deep Face," which is responsible for face recognition and person identification in the picture. 


>> Tokens are: 
[based, Facebook, project, named, ", Deep, Face, ,, ", responsible, face, recognition, person, identification, picture, .] 

>> PoS Tags are: 
[('based', 'VERB'), ('Facebook', 'PROPN'), ('project', 'NOUN'), ('named', 'VERB'), ('"', 'PUNCT'), ('Deep', 'PROPN'), ('Face', 'NOUN'), (',', 'PUNCT'), ('"', 'PUNCT'), ('responsible', 'ADJ'), ('face', 'NOUN'), ('recognition', 'NOUN'), ('person', 'NOUN'), ('identification', 'NOUN'), ('picture', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('based', 'ROOT'), ('Facebook', 'compound'), ('project', 'pobj'), ('named', 'acl'), ('"', 'punct'), ('Deep', 'compound'), ('Face', 'oprd'), (',', 'punct'), ('"', 'punct'), ('responsible', 'acomp'), ('face', 'compound'), ('recognition', 'pobj'), ('person', 'conj'), ('identification', 'conj'), ('picture', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[based, Facebook], [Facebook, project], [project, named], [named, "], [", Deep], [Deep, Face], [Face, ,], [,, "], [", responsible], [responsible, face], [face, recognition], [recognition, person], [person, identification], [identification, picture], [picture, .]]

>> Trigrams: 
[[based, Facebook, project], [Facebook, project, named], [project, named, "], [named, ", Deep], [", Deep, Face], [Deep, Face, ,], [Face, ,, "], [,, ", responsible], [", responsible, face], [responsible, face, recognition], [face, recognition, person], [recognition, person, identification], [person, identification, picture], [identification, picture, .]]

>> Noun Phrases are: 
[It, the Facebook project, "Deep Face, face recognition, person, identification, the picture]

>> Named Entities are: 
[('Facebook', 'PRODUCT'), ('Deep Face', 'WORK_OF_ART')]


============================ Sentence 9 =============================

2. 


>> Tokens are: 
[2, .] 

>> PoS Tags are: 
[('2', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('2', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[2, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('2', 'CARDINAL')]


============================ Sentence 10 =============================

Speech Recognition While using Google, we get an option of "Search by voice," it comes under speech recognition, and it's a popular application of machine learning. 


>> Tokens are: 
[Speech, Recognition, Google, ,, option, ", Search, voice, ,, ", comes, speech, recognition, ,, popular, application, machine, learning, .] 

>> PoS Tags are: 
[('Speech', 'PROPN'), ('Recognition', 'PROPN'), ('Google', 'PROPN'), (',', 'PUNCT'), ('option', 'NOUN'), ('"', 'PUNCT'), ('Search', 'NOUN'), ('voice', 'NOUN'), (',', 'PUNCT'), ('"', 'PUNCT'), ('comes', 'VERB'), ('speech', 'NOUN'), ('recognition', 'NOUN'), (',', 'PUNCT'), ('popular', 'ADJ'), ('application', 'NOUN'), ('machine', 'NOUN'), ('learning', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Speech', 'compound'), ('Recognition', 'npadvmod'), ('Google', 'dobj'), (',', 'punct'), ('option', 'dobj'), ('"', 'punct'), ('Search', 'pobj'), ('voice', 'pobj'), (',', 'punct'), ('"', 'punct'), ('comes', 'ROOT'), ('speech', 'compound'), ('recognition', 'pobj'), (',', 'punct'), ('popular', 'amod'), ('application', 'attr'), ('machine', 'compound'), ('learning', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Speech, Recognition], [Recognition, Google], [Google, ,], [,, option], [option, "], [", Search], [Search, voice], [voice, ,], [,, "], [", comes], [comes, speech], [speech, recognition], [recognition, ,], [,, popular], [popular, application], [application, machine], [machine, learning], [learning, .]]

>> Trigrams: 
[[Speech, Recognition, Google], [Recognition, Google, ,], [Google, ,, option], [,, option, "], [option, ", Search], [", Search, voice], [Search, voice, ,], [voice, ,, "], [,, ", comes], [", comes, speech], [comes, speech, recognition], [speech, recognition, ,], [recognition, ,, popular], [,, popular, application], [popular, application, machine], [application, machine, learning], [machine, learning, .]]

>> Noun Phrases are: 
[Google, we, an option, "Search, voice, it, speech recognition, it, a popular application, machine learning]

>> Named Entities are: 
[('Speech Recognition While', 'PERSON')]


============================ Sentence 11 =============================

Speech recognition is a process of converting voice instructions into text, and it is also known as "Speech to text", or "Computer speech recognition. 


>> Tokens are: 
[Speech, recognition, process, converting, voice, instructions, text, ,, known, ", Speech, text, ", ,, ", Computer, speech, recognition, .] 

>> PoS Tags are: 
[('Speech', 'NOUN'), ('recognition', 'NOUN'), ('process', 'NOUN'), ('converting', 'VERB'), ('voice', 'NOUN'), ('instructions', 'NOUN'), ('text', 'NOUN'), (',', 'PUNCT'), ('known', 'VERB'), ('"', 'PUNCT'), ('Speech', 'NOUN'), ('text', 'NOUN'), ('"', 'PUNCT'), (',', 'PUNCT'), ('"', 'PUNCT'), ('Computer', 'NOUN'), ('speech', 'NOUN'), ('recognition', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Speech', 'compound'), ('recognition', 'nsubj'), ('process', 'attr'), ('converting', 'pcomp'), ('voice', 'compound'), ('instructions', 'dobj'), ('text', 'pobj'), (',', 'punct'), ('known', 'conj'), ('"', 'punct'), ('Speech', 'pobj'), ('text', 'pobj'), ('"', 'punct'), (',', 'punct'), ('"', 'punct'), ('Computer', 'compound'), ('speech', 'compound'), ('recognition', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[Speech, recognition], [recognition, process], [process, converting], [converting, voice], [voice, instructions], [instructions, text], [text, ,], [,, known], [known, "], [", Speech], [Speech, text], [text, "], [", ,], [,, "], [", Computer], [Computer, speech], [speech, recognition], [recognition, .]]

>> Trigrams: 
[[Speech, recognition, process], [recognition, process, converting], [process, converting, voice], [converting, voice, instructions], [voice, instructions, text], [instructions, text, ,], [text, ,, known], [,, known, "], [known, ", Speech], [", Speech, text], [Speech, text, "], [text, ", ,], [", ,, "], [,, ", Computer], [", Computer, speech], [Computer, speech, recognition], [speech, recognition, .]]

>> Noun Phrases are: 
[Speech recognition, a process, voice instructions, text, it, Speech, text, "Computer speech recognition]

>> Named Entities are: 
[]


============================ Sentence 12 =============================

" At present, machine learning algorithms are widely used by various applications of speech recognition. 


>> Tokens are: 
[", present, ,, machine, learning, algorithms, widely, applications, speech, recognition, .] 

>> PoS Tags are: 
[('"', 'PUNCT'), ('present', 'NOUN'), (',', 'PUNCT'), ('machine', 'NOUN'), ('learning', 'NOUN'), ('algorithms', 'NOUN'), ('widely', 'ADV'), ('applications', 'NOUN'), ('speech', 'NOUN'), ('recognition', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('"', 'punct'), ('present', 'amod'), (',', 'punct'), ('machine', 'compound'), ('learning', 'amod'), ('algorithms', 'nsubjpass'), ('widely', 'advmod'), ('applications', 'pobj'), ('speech', 'compound'), ('recognition', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[", present], [present, ,], [,, machine], [machine, learning], [learning, algorithms], [algorithms, widely], [widely, applications], [applications, speech], [speech, recognition], [recognition, .]]

>> Trigrams: 
[[", present, ,], [present, ,, machine], [,, machine, learning], [machine, learning, algorithms], [learning, algorithms, widely], [algorithms, widely, applications], [widely, applications, speech], [applications, speech, recognition], [speech, recognition, .]]

>> Noun Phrases are: 
[machine learning algorithms, various applications, speech recognition]

>> Named Entities are: 
[]


============================ Sentence 13 =============================

Google assistant, Siri, Cortana, and Alexa are using speech recognition technology to follow the voice instructions. 


>> Tokens are: 
[Google, assistant, ,, Siri, ,, Cortana, ,, Alexa, speech, recognition, technology, follow, voice, instructions, .] 

>> PoS Tags are: 
[('Google', 'PROPN'), ('assistant', 'NOUN'), (',', 'PUNCT'), ('Siri', 'PROPN'), (',', 'PUNCT'), ('Cortana', 'PROPN'), (',', 'PUNCT'), ('Alexa', 'PROPN'), ('speech', 'NOUN'), ('recognition', 'NOUN'), ('technology', 'NOUN'), ('follow', 'VERB'), ('voice', 'NOUN'), ('instructions', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Google', 'compound'), ('assistant', 'nsubj'), (',', 'punct'), ('Siri', 'appos'), (',', 'punct'), ('Cortana', 'conj'), (',', 'punct'), ('Alexa', 'conj'), ('speech', 'compound'), ('recognition', 'compound'), ('technology', 'dobj'), ('follow', 'xcomp'), ('voice', 'compound'), ('instructions', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Google, assistant], [assistant, ,], [,, Siri], [Siri, ,], [,, Cortana], [Cortana, ,], [,, Alexa], [Alexa, speech], [speech, recognition], [recognition, technology], [technology, follow], [follow, voice], [voice, instructions], [instructions, .]]

>> Trigrams: 
[[Google, assistant, ,], [assistant, ,, Siri], [,, Siri, ,], [Siri, ,, Cortana], [,, Cortana, ,], [Cortana, ,, Alexa], [,, Alexa, speech], [Alexa, speech, recognition], [speech, recognition, technology], [recognition, technology, follow], [technology, follow, voice], [follow, voice, instructions], [voice, instructions, .]]

>> Noun Phrases are: 
[Google assistant, Siri, Cortana, Alexa, speech recognition technology, the voice instructions]

>> Named Entities are: 
[('Siri', 'PERSON'), ('Cortana', 'ORG'), ('Alexa', 'ORG')]


============================ Sentence 14 =============================

C++ vs Java 3. 


>> Tokens are: 
[C++, vs, Java, 3, .] 

>> PoS Tags are: 
[('C++', 'PROPN'), ('vs', 'ADP'), ('Java', 'PROPN'), ('3', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('C++', 'ROOT'), ('vs', 'prep'), ('Java', 'pobj'), ('3', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[C++, vs], [vs, Java], [Java, 3], [3, .]]

>> Trigrams: 
[[C++, vs, Java], [vs, Java, 3], [Java, 3, .]]

>> Noun Phrases are: 
[C++, Java]

>> Named Entities are: 
[('3', 'CARDINAL')]


============================ Sentence 15 =============================

Traffic prediction: If we want to visit a new place, we take help of Google Maps, which shows us the correct path with the shortest route and predicts the traffic conditions. 


>> Tokens are: 
[Traffic, prediction, :, want, visit, new, place, ,, help, Google, Maps, ,, shows, correct, path, shortest, route, predicts, traffic, conditions, .] 

>> PoS Tags are: 
[('Traffic', 'NOUN'), ('prediction', 'NOUN'), (':', 'PUNCT'), ('want', 'VERB'), ('visit', 'VERB'), ('new', 'ADJ'), ('place', 'NOUN'), (',', 'PUNCT'), ('help', 'NOUN'), ('Google', 'PROPN'), ('Maps', 'PROPN'), (',', 'PUNCT'), ('shows', 'VERB'), ('correct', 'ADJ'), ('path', 'NOUN'), ('shortest', 'ADJ'), ('route', 'NOUN'), ('predicts', 'VERB'), ('traffic', 'NOUN'), ('conditions', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Traffic', 'compound'), ('prediction', 'dep'), (':', 'punct'), ('want', 'advcl'), ('visit', 'xcomp'), ('new', 'amod'), ('place', 'dobj'), (',', 'punct'), ('help', 'dobj'), ('Google', 'compound'), ('Maps', 'pobj'), (',', 'punct'), ('shows', 'relcl'), ('correct', 'amod'), ('path', 'dobj'), ('shortest', 'amod'), ('route', 'pobj'), ('predicts', 'conj'), ('traffic', 'compound'), ('conditions', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Traffic, prediction], [prediction, :], [:, want], [want, visit], [visit, new], [new, place], [place, ,], [,, help], [help, Google], [Google, Maps], [Maps, ,], [,, shows], [shows, correct], [correct, path], [path, shortest], [shortest, route], [route, predicts], [predicts, traffic], [traffic, conditions], [conditions, .]]

>> Trigrams: 
[[Traffic, prediction, :], [prediction, :, want], [:, want, visit], [want, visit, new], [visit, new, place], [new, place, ,], [place, ,, help], [,, help, Google], [help, Google, Maps], [Google, Maps, ,], [Maps, ,, shows], [,, shows, correct], [shows, correct, path], [correct, path, shortest], [path, shortest, route], [shortest, route, predicts], [route, predicts, traffic], [predicts, traffic, conditions], [traffic, conditions, .]]

>> Noun Phrases are: 
[we, a new place, we, help, Google Maps, us, the correct path, the shortest route, the traffic conditions]

>> Named Entities are: 
[]


============================ Sentence 16 =============================

It predicts the traffic conditions such as whether traffic is cleared, slow-moving, or heavily congested with the help of two ways: · Real Time location of the vehicle form Google Map app and sensors · Average time has taken on past days at the same time. 


>> Tokens are: 
[predicts, traffic, conditions, traffic, cleared, ,, slow, -, moving, ,, heavily, congested, help, ways, :, ·, Real, Time, location, vehicle, form, Google, Map, app, sensors, ·, Average, time, taken, past, days, time, .] 

>> PoS Tags are: 
[('predicts', 'VERB'), ('traffic', 'NOUN'), ('conditions', 'NOUN'), ('traffic', 'NOUN'), ('cleared', 'VERB'), (',', 'PUNCT'), ('slow', 'ADV'), ('-', 'PUNCT'), ('moving', 'VERB'), (',', 'PUNCT'), ('heavily', 'ADV'), ('congested', 'VERB'), ('help', 'NOUN'), ('ways', 'NOUN'), (':', 'PUNCT'), ('·', 'PUNCT'), ('Real', 'PROPN'), ('Time', 'PROPN'), ('location', 'NOUN'), ('vehicle', 'NOUN'), ('form', 'NOUN'), ('Google', 'PROPN'), ('Map', 'PROPN'), ('app', 'NOUN'), ('sensors', 'NOUN'), ('·', 'PUNCT'), ('Average', 'ADJ'), ('time', 'NOUN'), ('taken', 'VERB'), ('past', 'ADJ'), ('days', 'NOUN'), ('time', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('predicts', 'ROOT'), ('traffic', 'compound'), ('conditions', 'dobj'), ('traffic', 'nsubjpass'), ('cleared', 'pcomp'), (',', 'punct'), ('slow', 'advmod'), ('-', 'punct'), ('moving', 'conj'), (',', 'punct'), ('heavily', 'advmod'), ('congested', 'conj'), ('help', 'pobj'), ('ways', 'pobj'), (':', 'punct'), ('·', 'punct'), ('Real', 'compound'), ('Time', 'compound'), ('location', 'nsubj'), ('vehicle', 'compound'), ('form', 'pobj'), ('Google', 'compound'), ('Map', 'nsubj'), ('app', 'ccomp'), ('sensors', 'conj'), ('·', 'punct'), ('Average', 'amod'), ('time', 'nsubj'), ('taken', 'ccomp'), ('past', 'amod'), ('days', 'pobj'), ('time', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[predicts, traffic], [traffic, conditions], [conditions, traffic], [traffic, cleared], [cleared, ,], [,, slow], [slow, -], [-, moving], [moving, ,], [,, heavily], [heavily, congested], [congested, help], [help, ways], [ways, :], [:, ·], [·, Real], [Real, Time], [Time, location], [location, vehicle], [vehicle, form], [form, Google], [Google, Map], [Map, app], [app, sensors], [sensors, ·], [·, Average], [Average, time], [time, taken], [taken, past], [past, days], [days, time], [time, .]]

>> Trigrams: 
[[predicts, traffic, conditions], [traffic, conditions, traffic], [conditions, traffic, cleared], [traffic, cleared, ,], [cleared, ,, slow], [,, slow, -], [slow, -, moving], [-, moving, ,], [moving, ,, heavily], [,, heavily, congested], [heavily, congested, help], [congested, help, ways], [help, ways, :], [ways, :, ·], [:, ·, Real], [·, Real, Time], [Real, Time, location], [Time, location, vehicle], [location, vehicle, form], [vehicle, form, Google], [form, Google, Map], [Google, Map, app], [Map, app, sensors], [app, sensors, ·], [sensors, ·, Average], [·, Average, time], [Average, time, taken], [time, taken, past], [taken, past, days], [past, days, time], [days, time, .]]

>> Noun Phrases are: 
[It, the traffic conditions, traffic, the help, two ways, Real Time location, the vehicle form, Google Map, Average time, past days, the same time]

>> Named Entities are: 
[('two', 'CARDINAL'), ('Real Time', 'PERSON'), ('on past days', 'DATE')]


============================ Sentence 17 =============================

Everyone who is using Google Map is helping this app to make it better. 


>> Tokens are: 
[Google, Map, helping, app, better, .] 

>> PoS Tags are: 
[('Google', 'PROPN'), ('Map', 'PROPN'), ('helping', 'VERB'), ('app', 'NOUN'), ('better', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Google', 'compound'), ('Map', 'dobj'), ('helping', 'ROOT'), ('app', 'dobj'), ('better', 'ccomp'), ('.', 'punct')]

>> Bigrams: 
[[Google, Map], [Map, helping], [helping, app], [app, better], [better, .]]

>> Trigrams: 
[[Google, Map, helping], [Map, helping, app], [helping, app, better], [app, better, .]]

>> Noun Phrases are: 
[Everyone, who, Google Map, this app, it]

>> Named Entities are: 
[]


============================ Sentence 18 =============================

It takes information from the user and sends back to its database to improve the performance. 


>> Tokens are: 
[takes, information, user, sends, database, improve, performance, .] 

>> PoS Tags are: 
[('takes', 'VERB'), ('information', 'NOUN'), ('user', 'NOUN'), ('sends', 'VERB'), ('database', 'NOUN'), ('improve', 'VERB'), ('performance', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('takes', 'ROOT'), ('information', 'dobj'), ('user', 'pobj'), ('sends', 'conj'), ('database', 'pobj'), ('improve', 'acl'), ('performance', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[takes, information], [information, user], [user, sends], [sends, database], [database, improve], [improve, performance], [performance, .]]

>> Trigrams: 
[[takes, information, user], [information, user, sends], [user, sends, database], [sends, database, improve], [database, improve, performance], [improve, performance, .]]

>> Noun Phrases are: 
[It, information, the user, its database, the performance]

>> Named Entities are: 
[]


============================ Sentence 19 =============================

4. 


>> Tokens are: 
[4, .] 

>> PoS Tags are: 
[('4', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('4', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[4, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('4', 'CARDINAL')]


============================ Sentence 20 =============================

Product recommendations: Machine learning is widely used by various e-commerce and entertainment companies such as Amazon, Netflix, etc., for product recommendation to the user. 


>> Tokens are: 
[Product, recommendations, :, Machine, learning, widely, e, -, commerce, entertainment, companies, Amazon, ,, Netflix, ,, etc, ., ,, product, recommendation, user, .] 

>> PoS Tags are: 
[('Product', 'NOUN'), ('recommendations', 'NOUN'), (':', 'PUNCT'), ('Machine', 'NOUN'), ('learning', 'NOUN'), ('widely', 'ADV'), ('e', 'NOUN'), ('-', 'NOUN'), ('commerce', 'NOUN'), ('entertainment', 'NOUN'), ('companies', 'NOUN'), ('Amazon', 'PROPN'), (',', 'PUNCT'), ('Netflix', 'PROPN'), (',', 'PUNCT'), ('etc', 'X'), ('.', 'X'), (',', 'PUNCT'), ('product', 'NOUN'), ('recommendation', 'NOUN'), ('user', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Product', 'compound'), ('recommendations', 'ROOT'), (':', 'punct'), ('Machine', 'compound'), ('learning', 'nsubjpass'), ('widely', 'advmod'), ('e', 'pobj'), ('-', 'pobj'), ('commerce', 'nmod'), ('entertainment', 'conj'), ('companies', 'pobj'), ('Amazon', 'pobj'), (',', 'punct'), ('Netflix', 'conj'), (',', 'punct'), ('etc', 'conj'), ('.', 'conj'), (',', 'punct'), ('product', 'compound'), ('recommendation', 'pobj'), ('user', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Product, recommendations], [recommendations, :], [:, Machine], [Machine, learning], [learning, widely], [widely, e], [e, -], [-, commerce], [commerce, entertainment], [entertainment, companies], [companies, Amazon], [Amazon, ,], [,, Netflix], [Netflix, ,], [,, etc], [etc, .], [., ,], [,, product], [product, recommendation], [recommendation, user], [user, .]]

>> Trigrams: 
[[Product, recommendations, :], [recommendations, :, Machine], [:, Machine, learning], [Machine, learning, widely], [learning, widely, e], [widely, e, -], [e, -, commerce], [-, commerce, entertainment], [commerce, entertainment, companies], [entertainment, companies, Amazon], [companies, Amazon, ,], [Amazon, ,, Netflix], [,, Netflix, ,], [Netflix, ,, etc], [,, etc, .], [etc, ., ,], [., ,, product], [,, product, recommendation], [product, recommendation, user], [recommendation, user, .]]

>> Noun Phrases are: 
[Product recommendations, Machine learning, various e, -, commerce and entertainment companies, Amazon, Netflix, product recommendation, the user]

>> Named Entities are: 
[('Amazon', 'ORG'), ('Netflix', 'GPE')]


============================ Sentence 21 =============================

Whenever we search for some product on Amazon, then we started getting an advertisement for the same product while internet surfing on the same browser and this is because of machine learning. 


>> Tokens are: 
[search, product, Amazon, ,, started, getting, advertisement, product, internet, surfing, browser, machine, learning, .] 

>> PoS Tags are: 
[('search', 'VERB'), ('product', 'NOUN'), ('Amazon', 'PROPN'), (',', 'PUNCT'), ('started', 'VERB'), ('getting', 'VERB'), ('advertisement', 'NOUN'), ('product', 'NOUN'), ('internet', 'NOUN'), ('surfing', 'NOUN'), ('browser', 'NOUN'), ('machine', 'NOUN'), ('learning', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('search', 'advcl'), ('product', 'pobj'), ('Amazon', 'pobj'), (',', 'punct'), ('started', 'ROOT'), ('getting', 'xcomp'), ('advertisement', 'dobj'), ('product', 'pobj'), ('internet', 'compound'), ('surfing', 'advcl'), ('browser', 'pobj'), ('machine', 'compound'), ('learning', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[search, product], [product, Amazon], [Amazon, ,], [,, started], [started, getting], [getting, advertisement], [advertisement, product], [product, internet], [internet, surfing], [surfing, browser], [browser, machine], [machine, learning], [learning, .]]

>> Trigrams: 
[[search, product, Amazon], [product, Amazon, ,], [Amazon, ,, started], [,, started, getting], [started, getting, advertisement], [getting, advertisement, product], [advertisement, product, internet], [product, internet, surfing], [internet, surfing, browser], [surfing, browser, machine], [browser, machine, learning], [machine, learning, .]]

>> Noun Phrases are: 
[we, some product, Amazon, we, an advertisement, the same product, the same browser, machine learning]

>> Named Entities are: 
[('Amazon', 'ORG')]


============================ Sentence 22 =============================

Google understands the user interest using various machine learning algorithms and suggests the product as per customer interest. 


>> Tokens are: 
[Google, understands, user, interest, machine, learning, algorithms, suggests, product, customer, interest, .] 

>> PoS Tags are: 
[('Google', 'PROPN'), ('understands', 'VERB'), ('user', 'NOUN'), ('interest', 'NOUN'), ('machine', 'NOUN'), ('learning', 'VERB'), ('algorithms', 'NOUN'), ('suggests', 'VERB'), ('product', 'NOUN'), ('customer', 'NOUN'), ('interest', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Google', 'nsubj'), ('understands', 'ROOT'), ('user', 'compound'), ('interest', 'nsubj'), ('machine', 'dobj'), ('learning', 'acl'), ('algorithms', 'dobj'), ('suggests', 'conj'), ('product', 'dobj'), ('customer', 'compound'), ('interest', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Google, understands], [understands, user], [user, interest], [interest, machine], [machine, learning], [learning, algorithms], [algorithms, suggests], [suggests, product], [product, customer], [customer, interest], [interest, .]]

>> Trigrams: 
[[Google, understands, user], [understands, user, interest], [user, interest, machine], [interest, machine, learning], [machine, learning, algorithms], [learning, algorithms, suggests], [algorithms, suggests, product], [suggests, product, customer], [product, customer, interest], [customer, interest, .]]

>> Noun Phrases are: 
[Google, the user interest, various machine, algorithms, the product, customer interest]

>> Named Entities are: 
[]


============================ Sentence 23 =============================

As similar, when we use Netflix, we find some recommendations for entertainment series, movies, etc., and this is also done with the help of machine learning. 


>> Tokens are: 
[similar, ,, use, Netflix, ,, find, recommendations, entertainment, series, ,, movies, ,, etc, ., ,, help, machine, learning, .] 

>> PoS Tags are: 
[('similar', 'ADJ'), (',', 'PUNCT'), ('use', 'VERB'), ('Netflix', 'PROPN'), (',', 'PUNCT'), ('find', 'VERB'), ('recommendations', 'NOUN'), ('entertainment', 'NOUN'), ('series', 'NOUN'), (',', 'PUNCT'), ('movies', 'NOUN'), (',', 'PUNCT'), ('etc', 'X'), ('.', 'X'), (',', 'PUNCT'), ('help', 'NOUN'), ('machine', 'NOUN'), ('learning', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('similar', 'amod'), (',', 'punct'), ('use', 'advcl'), ('Netflix', 'dobj'), (',', 'punct'), ('find', 'ROOT'), ('recommendations', 'dobj'), ('entertainment', 'compound'), ('series', 'pobj'), (',', 'punct'), ('movies', 'conj'), (',', 'punct'), ('etc', 'conj'), ('.', 'conj'), (',', 'punct'), ('help', 'pobj'), ('machine', 'compound'), ('learning', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[similar, ,], [,, use], [use, Netflix], [Netflix, ,], [,, find], [find, recommendations], [recommendations, entertainment], [entertainment, series], [series, ,], [,, movies], [movies, ,], [,, etc], [etc, .], [., ,], [,, help], [help, machine], [machine, learning], [learning, .]]

>> Trigrams: 
[[similar, ,, use], [,, use, Netflix], [use, Netflix, ,], [Netflix, ,, find], [,, find, recommendations], [find, recommendations, entertainment], [recommendations, entertainment, series], [entertainment, series, ,], [series, ,, movies], [,, movies, ,], [movies, ,, etc], [,, etc, .], [etc, ., ,], [., ,, help], [,, help, machine], [help, machine, learning], [machine, learning, .]]

>> Noun Phrases are: 
[we, Netflix, we, some recommendations, entertainment series, movies, the help, machine learning]

>> Named Entities are: 
[('Netflix', 'GPE')]


============================ Sentence 24 =============================

5. 


>> Tokens are: 
[5, .] 

>> PoS Tags are: 
[('5', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('5', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[5, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('5', 'CARDINAL')]


============================ Sentence 25 =============================

Self-driving cars: One of the most exciting applications of machine learning is self-driving cars. 


>> Tokens are: 
[Self, -, driving, cars, :, exciting, applications, machine, learning, self, -, driving, cars, .] 

>> PoS Tags are: 
[('Self', 'NOUN'), ('-', 'PUNCT'), ('driving', 'VERB'), ('cars', 'NOUN'), (':', 'PUNCT'), ('exciting', 'ADJ'), ('applications', 'NOUN'), ('machine', 'NOUN'), ('learning', 'NOUN'), ('self', 'NOUN'), ('-', 'PUNCT'), ('driving', 'VERB'), ('cars', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Self', 'npadvmod'), ('-', 'punct'), ('driving', 'amod'), ('cars', 'dep'), (':', 'punct'), ('exciting', 'amod'), ('applications', 'pobj'), ('machine', 'compound'), ('learning', 'pobj'), ('self', 'npadvmod'), ('-', 'punct'), ('driving', 'amod'), ('cars', 'attr'), ('.', 'punct')]

>> Bigrams: 
[[Self, -], [-, driving], [driving, cars], [cars, :], [:, exciting], [exciting, applications], [applications, machine], [machine, learning], [learning, self], [self, -], [-, driving], [driving, cars], [cars, .]]

>> Trigrams: 
[[Self, -, driving], [-, driving, cars], [driving, cars, :], [cars, :, exciting], [:, exciting, applications], [exciting, applications, machine], [applications, machine, learning], [machine, learning, self], [learning, self, -], [self, -, driving], [-, driving, cars], [driving, cars, .]]

>> Noun Phrases are: 
[the most exciting applications, machine learning, self-driving cars]

>> Named Entities are: 
[('One', 'CARDINAL')]


============================ Sentence 26 =============================

Machine learning plays a significant role in self-driving cars. 


>> Tokens are: 
[Machine, learning, plays, significant, role, self, -, driving, cars, .] 

>> PoS Tags are: 
[('Machine', 'NOUN'), ('learning', 'NOUN'), ('plays', 'VERB'), ('significant', 'ADJ'), ('role', 'NOUN'), ('self', 'NOUN'), ('-', 'PUNCT'), ('driving', 'VERB'), ('cars', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Machine', 'compound'), ('learning', 'nsubj'), ('plays', 'ROOT'), ('significant', 'amod'), ('role', 'dobj'), ('self', 'npadvmod'), ('-', 'punct'), ('driving', 'amod'), ('cars', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Machine, learning], [learning, plays], [plays, significant], [significant, role], [role, self], [self, -], [-, driving], [driving, cars], [cars, .]]

>> Trigrams: 
[[Machine, learning, plays], [learning, plays, significant], [plays, significant, role], [significant, role, self], [role, self, -], [self, -, driving], [-, driving, cars], [driving, cars, .]]

>> Noun Phrases are: 
[Machine learning, a significant role, self-driving cars]

>> Named Entities are: 
[]


============================ Sentence 27 =============================

Tesla, the most popular car manufacturing company is working on self-driving car. 


>> Tokens are: 
[Tesla, ,, popular, car, manufacturing, company, working, self, -, driving, car, .] 

>> PoS Tags are: 
[('Tesla', 'PROPN'), (',', 'PUNCT'), ('popular', 'ADJ'), ('car', 'NOUN'), ('manufacturing', 'NOUN'), ('company', 'NOUN'), ('working', 'VERB'), ('self', 'NOUN'), ('-', 'PUNCT'), ('driving', 'VERB'), ('car', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Tesla', 'npadvmod'), (',', 'punct'), ('popular', 'amod'), ('car', 'compound'), ('manufacturing', 'compound'), ('company', 'nsubj'), ('working', 'ROOT'), ('self', 'npadvmod'), ('-', 'punct'), ('driving', 'amod'), ('car', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Tesla, ,], [,, popular], [popular, car], [car, manufacturing], [manufacturing, company], [company, working], [working, self], [self, -], [-, driving], [driving, car], [car, .]]

>> Trigrams: 
[[Tesla, ,, popular], [,, popular, car], [popular, car, manufacturing], [car, manufacturing, company], [manufacturing, company, working], [company, working, self], [working, self, -], [self, -, driving], [-, driving, car], [driving, car, .]]

>> Noun Phrases are: 
[the most popular car manufacturing company, self-driving car]

>> Named Entities are: 
[]


============================ Sentence 28 =============================

It is using unsupervised learning method to train the car models to detect people and objects while driving. 


>> Tokens are: 
[unsupervised, learning, method, train, car, models, detect, people, objects, driving, .] 

>> PoS Tags are: 
[('unsupervised', 'ADJ'), ('learning', 'NOUN'), ('method', 'NOUN'), ('train', 'VERB'), ('car', 'NOUN'), ('models', 'NOUN'), ('detect', 'VERB'), ('people', 'NOUN'), ('objects', 'NOUN'), ('driving', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('unsupervised', 'amod'), ('learning', 'compound'), ('method', 'dobj'), ('train', 'xcomp'), ('car', 'compound'), ('models', 'dobj'), ('detect', 'advcl'), ('people', 'dobj'), ('objects', 'conj'), ('driving', 'advcl'), ('.', 'punct')]

>> Bigrams: 
[[unsupervised, learning], [learning, method], [method, train], [train, car], [car, models], [models, detect], [detect, people], [people, objects], [objects, driving], [driving, .]]

>> Trigrams: 
[[unsupervised, learning, method], [learning, method, train], [method, train, car], [train, car, models], [car, models, detect], [models, detect, people], [detect, people, objects], [people, objects, driving], [objects, driving, .]]

>> Noun Phrases are: 
[It, unsupervised learning method, the car models, people]

>> Named Entities are: 
[]


============================ Sentence 29 =============================

6. 


>> Tokens are: 
[6, .] 

>> PoS Tags are: 
[('6', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('6', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[6, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('6', 'CARDINAL')]


============================ Sentence 30 =============================

Email Spam and Malware Filtering: Whenever we receive a new email, it is filtered automatically as important, normal, and spam. 


>> Tokens are: 
[Email, Spam, Malware, Filtering, :, receive, new, email, ,, filtered, automatically, important, ,, normal, ,, spam, .] 

>> PoS Tags are: 
[('Email', 'PROPN'), ('Spam', 'PROPN'), ('Malware', 'PROPN'), ('Filtering', 'PROPN'), (':', 'PUNCT'), ('receive', 'VERB'), ('new', 'ADJ'), ('email', 'NOUN'), (',', 'PUNCT'), ('filtered', 'VERB'), ('automatically', 'ADV'), ('important', 'ADJ'), (',', 'PUNCT'), ('normal', 'ADJ'), (',', 'PUNCT'), ('spam', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Email', 'compound'), ('Spam', 'nsubjpass'), ('Malware', 'compound'), ('Filtering', 'conj'), (':', 'punct'), ('receive', 'advcl'), ('new', 'amod'), ('email', 'dobj'), (',', 'punct'), ('filtered', 'ROOT'), ('automatically', 'advmod'), ('important', 'amod'), (',', 'punct'), ('normal', 'conj'), (',', 'punct'), ('spam', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[Email, Spam], [Spam, Malware], [Malware, Filtering], [Filtering, :], [:, receive], [receive, new], [new, email], [email, ,], [,, filtered], [filtered, automatically], [automatically, important], [important, ,], [,, normal], [normal, ,], [,, spam], [spam, .]]

>> Trigrams: 
[[Email, Spam, Malware], [Spam, Malware, Filtering], [Malware, Filtering, :], [Filtering, :, receive], [:, receive, new], [receive, new, email], [new, email, ,], [email, ,, filtered], [,, filtered, automatically], [filtered, automatically, important], [automatically, important, ,], [important, ,, normal], [,, normal, ,], [normal, ,, spam], [,, spam, .]]

>> Noun Phrases are: 
[Email Spam, Malware Filtering, we, a new email, it]

>> Named Entities are: 
[('Email Spam', 'PERSON'), ('Malware Filtering', 'PERSON')]


============================ Sentence 31 =============================

We always receive an important mail in our inbox with the important symbol and spam emails in our spam box, and the technology behind this is Machine learning. 


>> Tokens are: 
[receive, important, mail, inbox, important, symbol, spam, emails, spam, box, ,, technology, Machine, learning, .] 

>> PoS Tags are: 
[('receive', 'VERB'), ('important', 'ADJ'), ('mail', 'NOUN'), ('inbox', 'NOUN'), ('important', 'ADJ'), ('symbol', 'NOUN'), ('spam', 'NOUN'), ('emails', 'NOUN'), ('spam', 'NOUN'), ('box', 'NOUN'), (',', 'PUNCT'), ('technology', 'NOUN'), ('Machine', 'NOUN'), ('learning', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('receive', 'ROOT'), ('important', 'amod'), ('mail', 'dobj'), ('inbox', 'pobj'), ('important', 'amod'), ('symbol', 'pobj'), ('spam', 'compound'), ('emails', 'conj'), ('spam', 'compound'), ('box', 'pobj'), (',', 'punct'), ('technology', 'nsubj'), ('Machine', 'compound'), ('learning', 'attr'), ('.', 'punct')]

>> Bigrams: 
[[receive, important], [important, mail], [mail, inbox], [inbox, important], [important, symbol], [symbol, spam], [spam, emails], [emails, spam], [spam, box], [box, ,], [,, technology], [technology, Machine], [Machine, learning], [learning, .]]

>> Trigrams: 
[[receive, important, mail], [important, mail, inbox], [mail, inbox, important], [inbox, important, symbol], [important, symbol, spam], [symbol, spam, emails], [spam, emails, spam], [emails, spam, box], [spam, box, ,], [box, ,, technology], [,, technology, Machine], [technology, Machine, learning], [Machine, learning, .]]

>> Noun Phrases are: 
[We, an important mail, our inbox, the important symbol, spam emails, our spam box, the technology, Machine learning]

>> Named Entities are: 
[('Machine', 'PERSON')]


============================ Sentence 32 =============================

Below are some spam filters used by Gmail: · Content Filter · Header filter · General blacklists filter · Rules-based filters · Permission filters Some machine learning algorithms such as Multi-Layer Perceptron, Decision tree, and Naïve Bayes classifier are used for email spam filtering and malware detection. 


>> Tokens are: 
[spam, filters, Gmail, :, ·, Content, Filter, ·, Header, filter, ·, General, blacklists, filter, ·, Rules, -, based, filters, ·, Permission, filters, machine, learning, algorithms, Multi, -, Layer, Perceptron, ,, Decision, tree, ,, Naïve, Bayes, classifier, email, spam, filtering, malware, detection, .] 

>> PoS Tags are: 
[('spam', 'NOUN'), ('filters', 'NOUN'), ('Gmail', 'PROPN'), (':', 'PUNCT'), ('·', 'PUNCT'), ('Content', 'PROPN'), ('Filter', 'PROPN'), ('·', 'PUNCT'), ('Header', 'PROPN'), ('filter', 'NOUN'), ('·', 'PUNCT'), ('General', 'PROPN'), ('blacklists', 'VERB'), ('filter', 'NOUN'), ('·', 'PUNCT'), ('Rules', 'NOUN'), ('-', 'PUNCT'), ('based', 'VERB'), ('filters', 'NOUN'), ('·', 'PUNCT'), ('Permission', 'NOUN'), ('filters', 'VERB'), ('machine', 'NOUN'), ('learning', 'VERB'), ('algorithms', 'NOUN'), ('Multi', 'PROPN'), ('-', 'PROPN'), ('Layer', 'PROPN'), ('Perceptron', 'PROPN'), (',', 'PUNCT'), ('Decision', 'NOUN'), ('tree', 'NOUN'), (',', 'PUNCT'), ('Naïve', 'PROPN'), ('Bayes', 'PROPN'), ('classifier', 'NOUN'), ('email', 'NOUN'), ('spam', 'NOUN'), ('filtering', 'NOUN'), ('malware', 'NOUN'), ('detection', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('spam', 'compound'), ('filters', 'nsubj'), ('Gmail', 'pobj'), (':', 'punct'), ('·', 'punct'), ('Content', 'nmod'), ('Filter', 'npadvmod'), ('·', 'punct'), ('Header', 'compound'), ('filter', 'appos'), ('·', 'punct'), ('General', 'nsubj'), ('blacklists', 'ROOT'), ('filter', 'dobj'), ('·', 'punct'), ('Rules', 'npadvmod'), ('-', 'punct'), ('based', 'amod'), ('filters', 'nmod'), ('·', 'punct'), ('Permission', 'nsubj'), ('filters', 'ccomp'), ('machine', 'dobj'), ('learning', 'acl'), ('algorithms', 'dobj'), ('Multi', 'nmod'), ('-', 'punct'), ('Layer', 'nmod'), ('Perceptron', 'pobj'), (',', 'punct'), ('Decision', 'compound'), ('tree', 'conj'), (',', 'punct'), ('Naïve', 'compound'), ('Bayes', 'compound'), ('classifier', 'conj'), ('email', 'nmod'), ('spam', 'nmod'), ('filtering', 'nmod'), ('malware', 'conj'), ('detection', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[spam, filters], [filters, Gmail], [Gmail, :], [:, ·], [·, Content], [Content, Filter], [Filter, ·], [·, Header], [Header, filter], [filter, ·], [·, General], [General, blacklists], [blacklists, filter], [filter, ·], [·, Rules], [Rules, -], [-, based], [based, filters], [filters, ·], [·, Permission], [Permission, filters], [filters, machine], [machine, learning], [learning, algorithms], [algorithms, Multi], [Multi, -], [-, Layer], [Layer, Perceptron], [Perceptron, ,], [,, Decision], [Decision, tree], [tree, ,], [,, Naïve], [Naïve, Bayes], [Bayes, classifier], [classifier, email], [email, spam], [spam, filtering], [filtering, malware], [malware, detection], [detection, .]]

>> Trigrams: 
[[spam, filters, Gmail], [filters, Gmail, :], [Gmail, :, ·], [:, ·, Content], [·, Content, Filter], [Content, Filter, ·], [Filter, ·, Header], [·, Header, filter], [Header, filter, ·], [filter, ·, General], [·, General, blacklists], [General, blacklists, filter], [blacklists, filter, ·], [filter, ·, Rules], [·, Rules, -], [Rules, -, based], [-, based, filters], [based, filters, ·], [filters, ·, Permission], [·, Permission, filters], [Permission, filters, machine], [filters, machine, learning], [machine, learning, algorithms], [learning, algorithms, Multi], [algorithms, Multi, -], [Multi, -, Layer], [-, Layer, Perceptron], [Layer, Perceptron, ,], [Perceptron, ,, Decision], [,, Decision, tree], [Decision, tree, ,], [tree, ,, Naïve], [,, Naïve, Bayes], [Naïve, Bayes, classifier], [Bayes, classifier, email], [classifier, email, spam], [email, spam, filtering], [spam, filtering, malware], [filtering, malware, detection], [malware, detection, .]]

>> Noun Phrases are: 
[some spam filters, Gmail, · Header filter, General, filter, Rules-based filters · Permission, Some machine, algorithms, Multi-Layer Perceptron, Decision tree, Naïve Bayes classifier, email spam filtering and malware detection]

>> Named Entities are: 
[('Gmail', 'PERSON'), ('Content Filter', 'PERSON'), ('Header', 'PERSON'), ('Naïve Bayes', 'PERSON')]


============================ Sentence 33 =============================

7. 


>> Tokens are: 
[7, .] 

>> PoS Tags are: 
[('7', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('7', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[7, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('7', 'CARDINAL')]


============================ Sentence 34 =============================

Virtual Personal Assistant: 


>> Tokens are: 
[Virtual, Personal, Assistant, :] 

>> PoS Tags are: 
[('Virtual', 'PROPN'), ('Personal', 'PROPN'), ('Assistant', 'PROPN'), (':', 'PUNCT')] 

>> Dependency Tags are: 
[('Virtual', 'amod'), ('Personal', 'compound'), ('Assistant', 'ROOT'), (':', 'punct')]

>> Bigrams: 
[[Virtual, Personal], [Personal, Assistant], [Assistant, :]]

>> Trigrams: 
[[Virtual, Personal, Assistant], [Personal, Assistant, :]]

>> Noun Phrases are: 
[Virtual Personal Assistant]

>> Named Entities are: 
[]


============================ Sentence 35 =============================

We have various virtual personal assistants such as Google assistant, Alexa, Cortana, Siri. 


>> Tokens are: 
[virtual, personal, assistants, Google, assistant, ,, Alexa, ,, Cortana, ,, Siri, .] 

>> PoS Tags are: 
[('virtual', 'ADJ'), ('personal', 'ADJ'), ('assistants', 'NOUN'), ('Google', 'PROPN'), ('assistant', 'NOUN'), (',', 'PUNCT'), ('Alexa', 'PROPN'), (',', 'PUNCT'), ('Cortana', 'PROPN'), (',', 'PUNCT'), ('Siri', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('virtual', 'amod'), ('personal', 'amod'), ('assistants', 'dobj'), ('Google', 'compound'), ('assistant', 'pobj'), (',', 'punct'), ('Alexa', 'conj'), (',', 'punct'), ('Cortana', 'conj'), (',', 'punct'), ('Siri', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[virtual, personal], [personal, assistants], [assistants, Google], [Google, assistant], [assistant, ,], [,, Alexa], [Alexa, ,], [,, Cortana], [Cortana, ,], [,, Siri], [Siri, .]]

>> Trigrams: 
[[virtual, personal, assistants], [personal, assistants, Google], [assistants, Google, assistant], [Google, assistant, ,], [assistant, ,, Alexa], [,, Alexa, ,], [Alexa, ,, Cortana], [,, Cortana, ,], [Cortana, ,, Siri], [,, Siri, .]]

>> Noun Phrases are: 
[We, various virtual personal assistants, Google assistant, Alexa, Cortana, Siri]

>> Named Entities are: 
[('Google', 'ORG'), ('Alexa', 'ORG'), ('Cortana', 'PERSON'), ('Siri', 'PERSON')]


============================ Sentence 36 =============================

As the name suggests, they help us in finding the information using our voice instruction. 


>> Tokens are: 
[suggests, ,, help, finding, information, voice, instruction, .] 

>> PoS Tags are: 
[('suggests', 'VERB'), (',', 'PUNCT'), ('help', 'VERB'), ('finding', 'VERB'), ('information', 'NOUN'), ('voice', 'NOUN'), ('instruction', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('suggests', 'advcl'), (',', 'punct'), ('help', 'ROOT'), ('finding', 'pcomp'), ('information', 'dobj'), ('voice', 'compound'), ('instruction', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[suggests, ,], [,, help], [help, finding], [finding, information], [information, voice], [voice, instruction], [instruction, .]]

>> Trigrams: 
[[suggests, ,, help], [,, help, finding], [help, finding, information], [finding, information, voice], [information, voice, instruction], [voice, instruction, .]]

>> Noun Phrases are: 
[the name, they, us, the information, our voice instruction]

>> Named Entities are: 
[]


============================ Sentence 37 =============================

These assistants can help us in various ways just by our voice instructions such as Play music, call someone, Open an email, Scheduling an appointment, etc. 


>> Tokens are: 
[assistants, help, ways, voice, instructions, Play, music, ,, ,, Open, email, ,, Scheduling, appointment, ,, etc, .] 

>> PoS Tags are: 
[('assistants', 'NOUN'), ('help', 'VERB'), ('ways', 'NOUN'), ('voice', 'NOUN'), ('instructions', 'NOUN'), ('Play', 'NOUN'), ('music', 'NOUN'), (',', 'PUNCT'), (',', 'PUNCT'), ('Open', 'VERB'), ('email', 'NOUN'), (',', 'PUNCT'), ('Scheduling', 'VERB'), ('appointment', 'NOUN'), (',', 'PUNCT'), ('etc', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('assistants', 'nsubj'), ('help', 'ROOT'), ('ways', 'pobj'), ('voice', 'compound'), ('instructions', 'pobj'), ('Play', 'compound'), ('music', 'pobj'), (',', 'punct'), (',', 'punct'), ('Open', 'conj'), ('email', 'dobj'), (',', 'punct'), ('Scheduling', 'advcl'), ('appointment', 'dobj'), (',', 'punct'), ('etc', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[assistants, help], [help, ways], [ways, voice], [voice, instructions], [instructions, Play], [Play, music], [music, ,], [,, ,], [,, Open], [Open, email], [email, ,], [,, Scheduling], [Scheduling, appointment], [appointment, ,], [,, etc], [etc, .]]

>> Trigrams: 
[[assistants, help, ways], [help, ways, voice], [ways, voice, instructions], [voice, instructions, Play], [instructions, Play, music], [Play, music, ,], [music, ,, ,], [,, ,, Open], [,, Open, email], [Open, email, ,], [email, ,, Scheduling], [,, Scheduling, appointment], [Scheduling, appointment, ,], [appointment, ,, etc], [,, etc, .]]

>> Noun Phrases are: 
[These assistants, us, various ways, our voice instructions, Play music, someone, an email, an appointment]

>> Named Entities are: 
[]


============================ Sentence 38 =============================

These virtual assistants use machine learning algorithms as an important part. 


>> Tokens are: 
[virtual, assistants, use, machine, learning, algorithms, important, .] 

>> PoS Tags are: 
[('virtual', 'ADJ'), ('assistants', 'NOUN'), ('use', 'VERB'), ('machine', 'NOUN'), ('learning', 'VERB'), ('algorithms', 'NOUN'), ('important', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('virtual', 'amod'), ('assistants', 'nsubj'), ('use', 'ROOT'), ('machine', 'dobj'), ('learning', 'xcomp'), ('algorithms', 'dobj'), ('important', 'amod'), ('.', 'punct')]

>> Bigrams: 
[[virtual, assistants], [assistants, use], [use, machine], [machine, learning], [learning, algorithms], [algorithms, important], [important, .]]

>> Trigrams: 
[[virtual, assistants, use], [assistants, use, machine], [use, machine, learning], [machine, learning, algorithms], [learning, algorithms, important], [algorithms, important, .]]

>> Noun Phrases are: 
[These virtual assistants, machine, algorithms, an important part]

>> Named Entities are: 
[]


============================ Sentence 39 =============================

These assistant record our voice instructions, send it over the server on a cloud, and decode it using ML algorithms and act accordingly. 


>> Tokens are: 
[assistant, record, voice, instructions, ,, send, server, cloud, ,, decode, ML, algorithms, act, accordingly, .] 

>> PoS Tags are: 
[('assistant', 'ADJ'), ('record', 'NOUN'), ('voice', 'NOUN'), ('instructions', 'NOUN'), (',', 'PUNCT'), ('send', 'VERB'), ('server', 'NOUN'), ('cloud', 'NOUN'), (',', 'PUNCT'), ('decode', 'VERB'), ('ML', 'PROPN'), ('algorithms', 'NOUN'), ('act', 'VERB'), ('accordingly', 'ADV'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('assistant', 'amod'), ('record', 'ROOT'), ('voice', 'compound'), ('instructions', 'dobj'), (',', 'punct'), ('send', 'conj'), ('server', 'pobj'), ('cloud', 'pobj'), (',', 'punct'), ('decode', 'conj'), ('ML', 'compound'), ('algorithms', 'dobj'), ('act', 'conj'), ('accordingly', 'advmod'), ('.', 'punct')]

>> Bigrams: 
[[assistant, record], [record, voice], [voice, instructions], [instructions, ,], [,, send], [send, server], [server, cloud], [cloud, ,], [,, decode], [decode, ML], [ML, algorithms], [algorithms, act], [act, accordingly], [accordingly, .]]

>> Trigrams: 
[[assistant, record, voice], [record, voice, instructions], [voice, instructions, ,], [instructions, ,, send], [,, send, server], [send, server, cloud], [server, cloud, ,], [cloud, ,, decode], [,, decode, ML], [decode, ML, algorithms], [ML, algorithms, act], [algorithms, act, accordingly], [act, accordingly, .]]

>> Noun Phrases are: 
[These assistant record, our voice instructions, it, the server, a cloud, it, ML algorithms]

>> Named Entities are: 
[('ML', 'ORG')]


============================ Sentence 40 =============================

8. 


>> Tokens are: 
[8, .] 

>> PoS Tags are: 
[('8', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('8', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[8, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('8', 'CARDINAL')]


============================ Sentence 41 =============================

Online Fraud Detection: Machine learning is making our online transaction safe and secure by detecting fraud transaction. 


>> Tokens are: 
[Online, Fraud, Detection, :, Machine, learning, making, online, transaction, safe, secure, detecting, fraud, transaction, .] 

>> PoS Tags are: 
[('Online', 'PROPN'), ('Fraud', 'PROPN'), ('Detection', 'PROPN'), (':', 'PUNCT'), ('Machine', 'NOUN'), ('learning', 'NOUN'), ('making', 'VERB'), ('online', 'ADJ'), ('transaction', 'NOUN'), ('safe', 'ADJ'), ('secure', 'ADJ'), ('detecting', 'VERB'), ('fraud', 'NOUN'), ('transaction', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Online', 'compound'), ('Fraud', 'compound'), ('Detection', 'ROOT'), (':', 'punct'), ('Machine', 'compound'), ('learning', 'nsubj'), ('making', 'acl'), ('online', 'amod'), ('transaction', 'nsubj'), ('safe', 'ccomp'), ('secure', 'conj'), ('detecting', 'pcomp'), ('fraud', 'compound'), ('transaction', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Online, Fraud], [Fraud, Detection], [Detection, :], [:, Machine], [Machine, learning], [learning, making], [making, online], [online, transaction], [transaction, safe], [safe, secure], [secure, detecting], [detecting, fraud], [fraud, transaction], [transaction, .]]

>> Trigrams: 
[[Online, Fraud, Detection], [Fraud, Detection, :], [Detection, :, Machine], [:, Machine, learning], [Machine, learning, making], [learning, making, online], [making, online, transaction], [online, transaction, safe], [transaction, safe, secure], [safe, secure, detecting], [secure, detecting, fraud], [detecting, fraud, transaction], [fraud, transaction, .]]

>> Noun Phrases are: 
[Online Fraud Detection, Machine learning, our online transaction, fraud transaction]

>> Named Entities are: 
[]


============================ Sentence 42 =============================

Whenever we perform some online transaction, there may be various ways that a fraudulent transaction can take place such as fake accounts, fake ids, and steal money in the middle of a transaction. 


>> Tokens are: 
[perform, online, transaction, ,, ways, fraudulent, transaction, place, fake, accounts, ,, fake, ids, ,, steal, money, middle, transaction, .] 

>> PoS Tags are: 
[('perform', 'VERB'), ('online', 'ADJ'), ('transaction', 'NOUN'), (',', 'PUNCT'), ('ways', 'NOUN'), ('fraudulent', 'ADJ'), ('transaction', 'NOUN'), ('place', 'NOUN'), ('fake', 'ADJ'), ('accounts', 'NOUN'), (',', 'PUNCT'), ('fake', 'ADJ'), ('ids', 'NOUN'), (',', 'PUNCT'), ('steal', 'VERB'), ('money', 'NOUN'), ('middle', 'NOUN'), ('transaction', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('perform', 'advcl'), ('online', 'amod'), ('transaction', 'dobj'), (',', 'punct'), ('ways', 'attr'), ('fraudulent', 'amod'), ('transaction', 'nsubj'), ('place', 'dobj'), ('fake', 'amod'), ('accounts', 'pobj'), (',', 'punct'), ('fake', 'amod'), ('ids', 'conj'), (',', 'punct'), ('steal', 'conj'), ('money', 'dobj'), ('middle', 'pobj'), ('transaction', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[perform, online], [online, transaction], [transaction, ,], [,, ways], [ways, fraudulent], [fraudulent, transaction], [transaction, place], [place, fake], [fake, accounts], [accounts, ,], [,, fake], [fake, ids], [ids, ,], [,, steal], [steal, money], [money, middle], [middle, transaction], [transaction, .]]

>> Trigrams: 
[[perform, online, transaction], [online, transaction, ,], [transaction, ,, ways], [,, ways, fraudulent], [ways, fraudulent, transaction], [fraudulent, transaction, place], [transaction, place, fake], [place, fake, accounts], [fake, accounts, ,], [accounts, ,, fake], [,, fake, ids], [fake, ids, ,], [ids, ,, steal], [,, steal, money], [steal, money, middle], [money, middle, transaction], [middle, transaction, .]]

>> Noun Phrases are: 
[we, some online transaction, various ways, a fraudulent transaction, place, fake accounts, fake ids, money, the middle, a transaction]

>> Named Entities are: 
[]


============================ Sentence 43 =============================

So to detect this, Feed Forward Neural network helps us by checking whether it is a genuine transaction or a fraud transaction. 


>> Tokens are: 
[detect, ,, Feed, Forward, Neural, network, helps, checking, genuine, transaction, fraud, transaction, .] 

>> PoS Tags are: 
[('detect', 'VERB'), (',', 'PUNCT'), ('Feed', 'PROPN'), ('Forward', 'PROPN'), ('Neural', 'PROPN'), ('network', 'NOUN'), ('helps', 'VERB'), ('checking', 'VERB'), ('genuine', 'ADJ'), ('transaction', 'NOUN'), ('fraud', 'NOUN'), ('transaction', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('detect', 'advcl'), (',', 'punct'), ('Feed', 'compound'), ('Forward', 'compound'), ('Neural', 'compound'), ('network', 'nsubj'), ('helps', 'ROOT'), ('checking', 'pcomp'), ('genuine', 'amod'), ('transaction', 'attr'), ('fraud', 'compound'), ('transaction', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[detect, ,], [,, Feed], [Feed, Forward], [Forward, Neural], [Neural, network], [network, helps], [helps, checking], [checking, genuine], [genuine, transaction], [transaction, fraud], [fraud, transaction], [transaction, .]]

>> Trigrams: 
[[detect, ,, Feed], [,, Feed, Forward], [Feed, Forward, Neural], [Forward, Neural, network], [Neural, network, helps], [network, helps, checking], [helps, checking, genuine], [checking, genuine, transaction], [genuine, transaction, fraud], [transaction, fraud, transaction], [fraud, transaction, .]]

>> Noun Phrases are: 
[Feed Forward Neural network, us, it, a genuine transaction, a fraud transaction]

>> Named Entities are: 
[]


============================ Sentence 44 =============================

For each genuine transaction, the output is converted into some hash values, and these values become the input for the next round. 


>> Tokens are: 
[genuine, transaction, ,, output, converted, hash, values, ,, values, input, round, .] 

>> PoS Tags are: 
[('genuine', 'ADJ'), ('transaction', 'NOUN'), (',', 'PUNCT'), ('output', 'NOUN'), ('converted', 'VERB'), ('hash', 'NOUN'), ('values', 'NOUN'), (',', 'PUNCT'), ('values', 'NOUN'), ('input', 'NOUN'), ('round', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('genuine', 'amod'), ('transaction', 'pobj'), (',', 'punct'), ('output', 'nsubjpass'), ('converted', 'ROOT'), ('hash', 'compound'), ('values', 'pobj'), (',', 'punct'), ('values', 'nsubj'), ('input', 'attr'), ('round', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[genuine, transaction], [transaction, ,], [,, output], [output, converted], [converted, hash], [hash, values], [values, ,], [,, values], [values, input], [input, round], [round, .]]

>> Trigrams: 
[[genuine, transaction, ,], [transaction, ,, output], [,, output, converted], [output, converted, hash], [converted, hash, values], [hash, values, ,], [values, ,, values], [,, values, input], [values, input, round], [input, round, .]]

>> Noun Phrases are: 
[each genuine transaction, the output, some hash values, these values, the input, the next round]

>> Named Entities are: 
[]


============================ Sentence 45 =============================

For each genuine transaction, there is a specific pattern which gets change for the fraud transaction hence, it detects it and makes our online transactions more secure. 


>> Tokens are: 
[genuine, transaction, ,, specific, pattern, gets, change, fraud, transaction, ,, detects, makes, online, transactions, secure, .] 

>> PoS Tags are: 
[('genuine', 'ADJ'), ('transaction', 'NOUN'), (',', 'PUNCT'), ('specific', 'ADJ'), ('pattern', 'NOUN'), ('gets', 'VERB'), ('change', 'NOUN'), ('fraud', 'NOUN'), ('transaction', 'NOUN'), (',', 'PUNCT'), ('detects', 'VERB'), ('makes', 'VERB'), ('online', 'ADJ'), ('transactions', 'NOUN'), ('secure', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('genuine', 'amod'), ('transaction', 'pobj'), (',', 'punct'), ('specific', 'amod'), ('pattern', 'attr'), ('gets', 'relcl'), ('change', 'dobj'), ('fraud', 'compound'), ('transaction', 'pobj'), (',', 'punct'), ('detects', 'ROOT'), ('makes', 'conj'), ('online', 'amod'), ('transactions', 'nsubj'), ('secure', 'ccomp'), ('.', 'punct')]

>> Bigrams: 
[[genuine, transaction], [transaction, ,], [,, specific], [specific, pattern], [pattern, gets], [gets, change], [change, fraud], [fraud, transaction], [transaction, ,], [,, detects], [detects, makes], [makes, online], [online, transactions], [transactions, secure], [secure, .]]

>> Trigrams: 
[[genuine, transaction, ,], [transaction, ,, specific], [,, specific, pattern], [specific, pattern, gets], [pattern, gets, change], [gets, change, fraud], [change, fraud, transaction], [fraud, transaction, ,], [transaction, ,, detects], [,, detects, makes], [detects, makes, online], [makes, online, transactions], [online, transactions, secure], [transactions, secure, .]]

>> Noun Phrases are: 
[each genuine transaction, a specific pattern, change, the fraud transaction, it, it, our online transactions]

>> Named Entities are: 
[]


============================ Sentence 46 =============================

9. 


>> Tokens are: 
[9, .] 

>> PoS Tags are: 
[('9', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('9', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[9, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('9', 'CARDINAL')]


============================ Sentence 47 =============================

Stock Market trading: Machine learning is widely used in stock market trading. 


>> Tokens are: 
[Stock, Market, trading, :, Machine, learning, widely, stock, market, trading, .] 

>> PoS Tags are: 
[('Stock', 'PROPN'), ('Market', 'PROPN'), ('trading', 'NOUN'), (':', 'PUNCT'), ('Machine', 'NOUN'), ('learning', 'NOUN'), ('widely', 'ADV'), ('stock', 'NOUN'), ('market', 'NOUN'), ('trading', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Stock', 'compound'), ('Market', 'compound'), ('trading', 'dep'), (':', 'punct'), ('Machine', 'compound'), ('learning', 'nsubjpass'), ('widely', 'advmod'), ('stock', 'compound'), ('market', 'compound'), ('trading', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Stock, Market], [Market, trading], [trading, :], [:, Machine], [Machine, learning], [learning, widely], [widely, stock], [stock, market], [market, trading], [trading, .]]

>> Trigrams: 
[[Stock, Market, trading], [Market, trading, :], [trading, :, Machine], [:, Machine, learning], [Machine, learning, widely], [learning, widely, stock], [widely, stock, market], [stock, market, trading], [market, trading, .]]

>> Noun Phrases are: 
[Machine learning, stock market trading]

>> Named Entities are: 
[]


============================ Sentence 48 =============================

In the stock market, there is always a risk of up and downs in shares, so for this machine learning's long short term memory neural network is used for the prediction of stock market trends. 


>> Tokens are: 
[stock, market, ,, risk, downs, shares, ,, machine, learning, long, short, term, memory, neural, network, prediction, stock, market, trends, .] 

>> PoS Tags are: 
[('stock', 'NOUN'), ('market', 'NOUN'), (',', 'PUNCT'), ('risk', 'NOUN'), ('downs', 'NOUN'), ('shares', 'NOUN'), (',', 'PUNCT'), ('machine', 'NOUN'), ('learning', 'NOUN'), ('long', 'ADJ'), ('short', 'ADJ'), ('term', 'NOUN'), ('memory', 'NOUN'), ('neural', 'ADJ'), ('network', 'NOUN'), ('prediction', 'NOUN'), ('stock', 'NOUN'), ('market', 'NOUN'), ('trends', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('stock', 'compound'), ('market', 'pobj'), (',', 'punct'), ('risk', 'attr'), ('downs', 'conj'), ('shares', 'pobj'), (',', 'punct'), ('machine', 'compound'), ('learning', 'poss'), ('long', 'amod'), ('short', 'amod'), ('term', 'compound'), ('memory', 'nmod'), ('neural', 'amod'), ('network', 'nsubjpass'), ('prediction', 'pobj'), ('stock', 'compound'), ('market', 'compound'), ('trends', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[stock, market], [market, ,], [,, risk], [risk, downs], [downs, shares], [shares, ,], [,, machine], [machine, learning], [learning, long], [long, short], [short, term], [term, memory], [memory, neural], [neural, network], [network, prediction], [prediction, stock], [stock, market], [market, trends], [trends, .]]

>> Trigrams: 
[[stock, market, ,], [market, ,, risk], [,, risk, downs], [risk, downs, shares], [downs, shares, ,], [shares, ,, machine], [,, machine, learning], [machine, learning, long], [learning, long, short], [long, short, term], [short, term, memory], [term, memory, neural], [memory, neural, network], [neural, network, prediction], [network, prediction, stock], [prediction, stock, market], [stock, market, trends], [market, trends, .]]

>> Noun Phrases are: 
[the stock market, a risk, downs, shares, this machine learning's long short term memory neural network, the prediction, stock market trends]

>> Named Entities are: 
[]


============================ Sentence 49 =============================

10. 


>> Tokens are: 
[10, .] 

>> PoS Tags are: 
[('10', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('10', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[10, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('10', 'CARDINAL')]


============================ Sentence 50 =============================

Medical Diagnosis: In medical science, machine learning is used for diseases diagnoses. 


>> Tokens are: 
[Medical, Diagnosis, :, medical, science, ,, machine, learning, diseases, diagnoses, .] 

>> PoS Tags are: 
[('Medical', 'PROPN'), ('Diagnosis', 'NOUN'), (':', 'PUNCT'), ('medical', 'ADJ'), ('science', 'NOUN'), (',', 'PUNCT'), ('machine', 'NOUN'), ('learning', 'NOUN'), ('diseases', 'NOUN'), ('diagnoses', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Medical', 'compound'), ('Diagnosis', 'dep'), (':', 'punct'), ('medical', 'amod'), ('science', 'pobj'), (',', 'punct'), ('machine', 'compound'), ('learning', 'nsubjpass'), ('diseases', 'pobj'), ('diagnoses', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[Medical, Diagnosis], [Diagnosis, :], [:, medical], [medical, science], [science, ,], [,, machine], [machine, learning], [learning, diseases], [diseases, diagnoses], [diagnoses, .]]

>> Trigrams: 
[[Medical, Diagnosis, :], [Diagnosis, :, medical], [:, medical, science], [medical, science, ,], [science, ,, machine], [,, machine, learning], [machine, learning, diseases], [learning, diseases, diagnoses], [diseases, diagnoses, .]]

>> Noun Phrases are: 
[medical science, machine learning, diseases]

>> Named Entities are: 
[]


============================ Sentence 51 =============================

With this, medical technology is growing very fast and able to build 3D models that can predict the exact position of lesions in the brain. 


>> Tokens are: 
[,, medical, technology, growing, fast, able, build, 3D, models, predict, exact, position, lesions, brain, .] 

>> PoS Tags are: 
[(',', 'PUNCT'), ('medical', 'ADJ'), ('technology', 'NOUN'), ('growing', 'VERB'), ('fast', 'ADV'), ('able', 'ADJ'), ('build', 'VERB'), ('3D', 'ADJ'), ('models', 'NOUN'), ('predict', 'VERB'), ('exact', 'ADJ'), ('position', 'NOUN'), ('lesions', 'NOUN'), ('brain', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(',', 'punct'), ('medical', 'amod'), ('technology', 'nsubj'), ('growing', 'ROOT'), ('fast', 'advmod'), ('able', 'conj'), ('build', 'xcomp'), ('3D', 'compound'), ('models', 'dobj'), ('predict', 'relcl'), ('exact', 'amod'), ('position', 'dobj'), ('lesions', 'pobj'), ('brain', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[,, medical], [medical, technology], [technology, growing], [growing, fast], [fast, able], [able, build], [build, 3D], [3D, models], [models, predict], [predict, exact], [exact, position], [position, lesions], [lesions, brain], [brain, .]]

>> Trigrams: 
[[,, medical, technology], [medical, technology, growing], [technology, growing, fast], [growing, fast, able], [fast, able, build], [able, build, 3D], [build, 3D, models], [3D, models, predict], [models, predict, exact], [predict, exact, position], [exact, position, lesions], [position, lesions, brain], [lesions, brain, .]]

>> Noun Phrases are: 
[medical technology, 3D models, the exact position, lesions, the brain]

>> Named Entities are: 
[('3D', 'ORG')]


============================ Sentence 52 =============================

It helps in finding brain tumors and other brain-related diseases easily. 


>> Tokens are: 
[helps, finding, brain, tumors, brain, -, related, diseases, easily, .] 

>> PoS Tags are: 
[('helps', 'VERB'), ('finding', 'VERB'), ('brain', 'NOUN'), ('tumors', 'NOUN'), ('brain', 'NOUN'), ('-', 'PUNCT'), ('related', 'VERB'), ('diseases', 'NOUN'), ('easily', 'ADV'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('helps', 'ROOT'), ('finding', 'pcomp'), ('brain', 'compound'), ('tumors', 'dobj'), ('brain', 'npadvmod'), ('-', 'punct'), ('related', 'amod'), ('diseases', 'conj'), ('easily', 'advmod'), ('.', 'punct')]

>> Bigrams: 
[[helps, finding], [finding, brain], [brain, tumors], [tumors, brain], [brain, -], [-, related], [related, diseases], [diseases, easily], [easily, .]]

>> Trigrams: 
[[helps, finding, brain], [finding, brain, tumors], [brain, tumors, brain], [tumors, brain, -], [brain, -, related], [-, related, diseases], [related, diseases, easily], [diseases, easily, .]]

>> Noun Phrases are: 
[It, brain tumors, other brain-related diseases]

>> Named Entities are: 
[]


============================ Sentence 53 =============================

11. 


>> Tokens are: 
[11, .] 

>> PoS Tags are: 
[('11', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('11', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[11, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('11', 'CARDINAL')]


============================ Sentence 54 =============================

Automatic Language Translation: Nowadays, if we visit a new place and we are not aware of the language then it is not a problem at all, as for this also machine learning helps us by converting the text into our known languages. 


>> Tokens are: 
[Automatic, Language, Translation, :, Nowadays, ,, visit, new, place, aware, language, problem, ,, machine, learning, helps, converting, text, known, languages, .] 

>> PoS Tags are: 
[('Automatic', 'ADJ'), ('Language', 'PROPN'), ('Translation', 'NOUN'), (':', 'PUNCT'), ('Nowadays', 'ADV'), (',', 'PUNCT'), ('visit', 'VERB'), ('new', 'ADJ'), ('place', 'NOUN'), ('aware', 'ADJ'), ('language', 'NOUN'), ('problem', 'NOUN'), (',', 'PUNCT'), ('machine', 'NOUN'), ('learning', 'NOUN'), ('helps', 'VERB'), ('converting', 'VERB'), ('text', 'NOUN'), ('known', 'VERB'), ('languages', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Automatic', 'amod'), ('Language', 'compound'), ('Translation', 'ROOT'), (':', 'punct'), ('Nowadays', 'advmod'), (',', 'punct'), ('visit', 'advcl'), ('new', 'amod'), ('place', 'dobj'), ('aware', 'acomp'), ('language', 'pobj'), ('problem', 'attr'), (',', 'punct'), ('machine', 'compound'), ('learning', 'nsubj'), ('helps', 'advcl'), ('converting', 'pcomp'), ('text', 'dobj'), ('known', 'amod'), ('languages', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Automatic, Language], [Language, Translation], [Translation, :], [:, Nowadays], [Nowadays, ,], [,, visit], [visit, new], [new, place], [place, aware], [aware, language], [language, problem], [problem, ,], [,, machine], [machine, learning], [learning, helps], [helps, converting], [converting, text], [text, known], [known, languages], [languages, .]]

>> Trigrams: 
[[Automatic, Language, Translation], [Language, Translation, :], [Translation, :, Nowadays], [:, Nowadays, ,], [Nowadays, ,, visit], [,, visit, new], [visit, new, place], [new, place, aware], [place, aware, language], [aware, language, problem], [language, problem, ,], [problem, ,, machine], [,, machine, learning], [machine, learning, helps], [learning, helps, converting], [helps, converting, text], [converting, text, known], [text, known, languages], [known, languages, .]]

>> Noun Phrases are: 
[Automatic Language Translation, we, a new place, we, the language, it, a problem, this also machine learning, us, the text, our known languages]

>> Named Entities are: 
[]


============================ Sentence 55 =============================

Google's GNMT (Google Neural Machine Translation) provide this feature, which is a Neural Machine Learning that translates the text into our familiar language, and it called as automatic translation. 


>> Tokens are: 
[Google, GNMT, (, Google, Neural, Machine, Translation, ), provide, feature, ,, Neural, Machine, Learning, translates, text, familiar, language, ,, called, automatic, translation, .] 

>> PoS Tags are: 
[('Google', 'PROPN'), ('GNMT', 'NOUN'), ('(', 'PUNCT'), ('Google', 'PROPN'), ('Neural', 'PROPN'), ('Machine', 'PROPN'), ('Translation', 'PROPN'), (')', 'PUNCT'), ('provide', 'VERB'), ('feature', 'NOUN'), (',', 'PUNCT'), ('Neural', 'PROPN'), ('Machine', 'PROPN'), ('Learning', 'PROPN'), ('translates', 'VERB'), ('text', 'NOUN'), ('familiar', 'ADJ'), ('language', 'NOUN'), (',', 'PUNCT'), ('called', 'VERB'), ('automatic', 'ADJ'), ('translation', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Google', 'poss'), ('GNMT', 'nsubj'), ('(', 'punct'), ('Google', 'compound'), ('Neural', 'compound'), ('Machine', 'compound'), ('Translation', 'appos'), (')', 'punct'), ('provide', 'ROOT'), ('feature', 'dobj'), (',', 'punct'), ('Neural', 'compound'), ('Machine', 'compound'), ('Learning', 'attr'), ('translates', 'relcl'), ('text', 'dobj'), ('familiar', 'amod'), ('language', 'pobj'), (',', 'punct'), ('called', 'conj'), ('automatic', 'amod'), ('translation', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Google, GNMT], [GNMT, (], [(, Google], [Google, Neural], [Neural, Machine], [Machine, Translation], [Translation, )], [), provide], [provide, feature], [feature, ,], [,, Neural], [Neural, Machine], [Machine, Learning], [Learning, translates], [translates, text], [text, familiar], [familiar, language], [language, ,], [,, called], [called, automatic], [automatic, translation], [translation, .]]

>> Trigrams: 
[[Google, GNMT, (], [GNMT, (, Google], [(, Google, Neural], [Google, Neural, Machine], [Neural, Machine, Translation], [Machine, Translation, )], [Translation, ), provide], [), provide, feature], [provide, feature, ,], [feature, ,, Neural], [,, Neural, Machine], [Neural, Machine, Learning], [Machine, Learning, translates], [Learning, translates, text], [translates, text, familiar], [text, familiar, language], [familiar, language, ,], [language, ,, called], [,, called, automatic], [called, automatic, translation], [automatic, translation, .]]

>> Noun Phrases are: 
[Google's GNMT, Google Neural Machine Translation, this feature, a Neural Machine Learning, the text, our familiar language, it, automatic translation]

>> Named Entities are: 
[("Google's", 'ORG')]


============================ Sentence 56 =============================

The technology behind the automatic translation is a sequence to sequence learning algorithm, which is used with image recognition and translates the text from one language to another language. 


>> Tokens are: 
[technology, automatic, translation, sequence, sequence, learning, algorithm, ,, image, recognition, translates, text, language, language, .] 

>> PoS Tags are: 
[('technology', 'NOUN'), ('automatic', 'ADJ'), ('translation', 'NOUN'), ('sequence', 'NOUN'), ('sequence', 'NOUN'), ('learning', 'VERB'), ('algorithm', 'NOUN'), (',', 'PUNCT'), ('image', 'NOUN'), ('recognition', 'NOUN'), ('translates', 'VERB'), ('text', 'NOUN'), ('language', 'NOUN'), ('language', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('technology', 'nsubj'), ('automatic', 'amod'), ('translation', 'pobj'), ('sequence', 'attr'), ('sequence', 'pobj'), ('learning', 'acl'), ('algorithm', 'advmod'), (',', 'punct'), ('image', 'compound'), ('recognition', 'pobj'), ('translates', 'conj'), ('text', 'dobj'), ('language', 'pobj'), ('language', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[technology, automatic], [automatic, translation], [translation, sequence], [sequence, sequence], [sequence, learning], [learning, algorithm], [algorithm, ,], [,, image], [image, recognition], [recognition, translates], [translates, text], [text, language], [language, language], [language, .]]

>> Trigrams: 
[[technology, automatic, translation], [automatic, translation, sequence], [translation, sequence, sequence], [sequence, sequence, learning], [sequence, learning, algorithm], [learning, algorithm, ,], [algorithm, ,, image], [,, image, recognition], [image, recognition, translates], [recognition, translates, text], [translates, text, language], [text, language, language], [language, language, .]]

>> Noun Phrases are: 
[The technology, the automatic translation, a sequence, sequence, image recognition, the text, one language, another language]

>> Named Entities are: 
[]
