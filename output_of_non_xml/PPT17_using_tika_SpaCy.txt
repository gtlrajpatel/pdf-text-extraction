				 *** Text Processing using Spacy *** 


============================ Sentence 1 =============================

OOPC++ UNIT-1   Prof. Rupesh G. Vaishnav rupesh.vaishnav@darshan.ac.in 94280-37452 Information & Network Security (2170709) 


>> Tokens are: 
[OOPC++, UNIT-1,   , Prof., Rupesh, G., Vaishnav, rupesh.vaishnav@darshan.ac.in, 94280, -, 37452, Information, &, Network, Security, (, 2170709, )] 

>> PoS Tags are: 
[('OOPC++', 'INTJ'), ('UNIT-1', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Rupesh', 'PROPN'), ('G.', 'PROPN'), ('Vaishnav', 'PROPN'), ('rupesh.vaishnav@darshan.ac.in', 'NUM'), ('94280', 'NUM'), ('-', 'SYM'), ('37452', 'NUM'), ('Information', 'PROPN'), ('&', 'CCONJ'), ('Network', 'PROPN'), ('Security', 'PROPN'), ('(', 'PUNCT'), ('2170709', 'NUM'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('OOPC++', 'intj'), ('UNIT-1', 'ROOT'), ('  ', 'nummod'), ('Prof.', 'compound'), ('Rupesh', 'compound'), ('G.', 'compound'), ('Vaishnav', 'dobj'), ('rupesh.vaishnav@darshan.ac.in', 'appos'), ('94280', 'nummod'), ('-', 'punct'), ('37452', 'nummod'), ('Information', 'nmod'), ('&', 'cc'), ('Network', 'conj'), ('Security', 'appos'), ('(', 'punct'), ('2170709', 'appos'), (')', 'punct')]

>> Bigrams: 
[[OOPC++, UNIT-1], [UNIT-1,   ], [  , Prof.], [Prof., Rupesh], [Rupesh, G.], [G., Vaishnav], [Vaishnav, rupesh.vaishnav@darshan.ac.in], [rupesh.vaishnav@darshan.ac.in, 94280], [94280, -], [-, 37452], [37452, Information], [Information, &], [&, Network], [Network, Security], [Security, (], [(, 2170709], [2170709, )]]

>> Trigrams: 
[[OOPC++, UNIT-1,   ], [UNIT-1,   , Prof.], [  , Prof., Rupesh], [Prof., Rupesh, G.], [Rupesh, G., Vaishnav], [G., Vaishnav, rupesh.vaishnav@darshan.ac.in], [Vaishnav, rupesh.vaishnav@darshan.ac.in, 94280], [rupesh.vaishnav@darshan.ac.in, 94280, -], [94280, -, 37452], [-, 37452, Information], [37452, Information, &], [Information, &, Network], [&, Network, Security], [Network, Security, (], [Security, (, 2170709], [(, 2170709, )]]

>> Noun Phrases are: 
[OOPC++ UNIT-1,   Prof. Rupesh G. Vaishnav, 94280-37452 Information & Network Security]

>> Named Entities are: 
[('Rupesh G. Vaishnav', 'PERSON'), ('94280-37452', 'DATE'), ('Information & Network Security', 'ORG')]


============================ Sentence 2 =============================

	 Darshan Institute of Engineering & Technology UNIT-5 Cryptographic Hash Functions      1   


>> Tokens are: 
[	 , Darshan, Institute, Engineering, &, Technology, UNIT-5, Cryptographic, Hash, Functions,      , 1,  ] 

>> PoS Tags are: 
[('\t ', 'SPACE'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('Engineering', 'PROPN'), ('&', 'CCONJ'), ('Technology', 'PROPN'), ('UNIT-5', 'PROPN'), ('Cryptographic', 'PROPN'), ('Hash', 'PROPN'), ('Functions', 'PROPN'), ('     ', 'SPACE'), ('1', 'NUM'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('\t ', 'amod'), ('Darshan', 'compound'), ('Institute', 'appos'), ('Engineering', 'pobj'), ('&', 'cc'), ('Technology', 'conj'), ('UNIT-5', 'conj'), ('Cryptographic', 'amod'), ('Hash', 'compound'), ('Functions', 'nmod'), ('     ', 'dobj'), ('1', 'nummod'), (' ', 'ROOT')]

>> Bigrams: 
[[	 , Darshan], [Darshan, Institute], [Institute, Engineering], [Engineering, &], [&, Technology], [Technology, UNIT-5], [UNIT-5, Cryptographic], [Cryptographic, Hash], [Hash, Functions], [Functions,      ], [     , 1], [1,  ]]

>> Trigrams: 
[[	 , Darshan, Institute], [Darshan, Institute, Engineering], [Institute, Engineering, &], [Engineering, &, Technology], [&, Technology, UNIT-5], [Technology, UNIT-5, Cryptographic], [UNIT-5, Cryptographic, Hash], [Cryptographic, Hash, Functions], [Hash, Functions,      ], [Functions,      , 1], [     , 1,  ]]

>> Noun Phrases are: 
[Darshan Institute, Engineering, Technology]

>> Named Entities are: 
[('Darshan Institute of Engineering & Technology', 'ORG')]


============================ Sentence 3 =============================

Outline Cryptographic Hash Functions   


>> Tokens are: 
[Outline, Cryptographic, Hash, Functions,  ] 

>> PoS Tags are: 
[('Outline', 'PROPN'), ('Cryptographic', 'PROPN'), ('Hash', 'PROPN'), ('Functions', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Outline', 'compound'), ('Cryptographic', 'compound'), ('Hash', 'compound'), ('Functions', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[Outline, Cryptographic], [Cryptographic, Hash], [Hash, Functions], [Functions,  ]]

>> Trigrams: 
[[Outline, Cryptographic, Hash], [Cryptographic, Hash, Functions], [Hash, Functions,  ]]

>> Noun Phrases are: 
[Outline Cryptographic Hash Functions]

>> Named Entities are: 
[]


============================ Sentence 4 =============================

Applications Simple hash functions Requirements and security Hash functions based on Cipher Block Chaining Secure Hash Algorithm (SHA)   Unit-5   


>> Tokens are: 
[Applications, Simple, hash, functions, Requirements, security, Hash, functions, based, Cipher, Block, Chaining, Secure, Hash, Algorithm, (, SHA, ),   , Unit-5,  ] 

>> PoS Tags are: 
[('Applications', 'PROPN'), ('Simple', 'ADJ'), ('hash', 'NOUN'), ('functions', 'NOUN'), ('Requirements', 'PROPN'), ('security', 'NOUN'), ('Hash', 'PROPN'), ('functions', 'NOUN'), ('based', 'VERB'), ('Cipher', 'PROPN'), ('Block', 'PROPN'), ('Chaining', 'PROPN'), ('Secure', 'NOUN'), ('Hash', 'NOUN'), ('Algorithm', 'PROPN'), ('(', 'PUNCT'), ('SHA', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('Unit-5', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Applications', 'nmod'), ('Simple', 'amod'), ('hash', 'compound'), ('functions', 'nmod'), ('Requirements', 'dobj'), ('security', 'compound'), ('Hash', 'compound'), ('functions', 'conj'), ('based', 'acl'), ('Cipher', 'compound'), ('Block', 'compound'), ('Chaining', 'compound'), ('Secure', 'pcomp'), ('Hash', 'dobj'), ('Algorithm', 'conj'), ('(', 'punct'), ('SHA', 'appos'), (')', 'punct'), ('  ', 'nsubj'), ('Unit-5', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[Applications, Simple], [Simple, hash], [hash, functions], [functions, Requirements], [Requirements, security], [security, Hash], [Hash, functions], [functions, based], [based, Cipher], [Cipher, Block], [Block, Chaining], [Chaining, Secure], [Secure, Hash], [Hash, Algorithm], [Algorithm, (], [(, SHA], [SHA, )], [),   ], [  , Unit-5], [Unit-5,  ]]

>> Trigrams: 
[[Applications, Simple, hash], [Simple, hash, functions], [hash, functions, Requirements], [functions, Requirements, security], [Requirements, security, Hash], [security, Hash, functions], [Hash, functions, based], [functions, based, Cipher], [based, Cipher, Block], [Cipher, Block, Chaining], [Block, Chaining, Secure], [Chaining, Secure, Hash], [Secure, Hash, Algorithm], [Hash, Algorithm, (], [Algorithm, (, SHA], [(, SHA, )], [SHA, ),   ], [),   , Unit-5], [  , Unit-5,  ]]

>> Noun Phrases are: 
[Requirements, security Hash functions, Cipher Block Chaining Secure, Hash, (SHA]

>> Named Entities are: 
[('Requirements', 'ORG'), ('Cipher Block Chaining', 'ORG'), ('SHA', 'ORG')]


============================ Sentence 5 =============================

Cryptographic Hash Functions                                 Darshan Institute of Engineering & Technology   ‹#›  X.800 and RFC 2828 International Telecommunication Union (ITU) 2   


>> Tokens are: 
[Cryptographic, Hash, Functions,                                 , Darshan, Institute, Engineering, &, Technology,   , ‹#›,  , X.800, RFC, 2828, International, Telecommunication, Union, (, ITU, ), 2,  ] 

>> PoS Tags are: 
[('Cryptographic', 'PROPN'), ('Hash', 'PROPN'), ('Functions', 'PROPN'), ('                                ', 'SPACE'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('Engineering', 'PROPN'), ('&', 'CCONJ'), ('Technology', 'PROPN'), ('  ', 'SPACE'), ('‹#›', 'VERB'), (' ', 'SPACE'), ('X.800', 'PROPN'), ('RFC', 'PROPN'), ('2828', 'NUM'), ('International', 'PROPN'), ('Telecommunication', 'PROPN'), ('Union', 'PROPN'), ('(', 'PUNCT'), ('ITU', 'PROPN'), (')', 'PUNCT'), ('2', 'NUM'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Cryptographic', 'compound'), ('Hash', 'compound'), ('Functions', 'compound'), ('                                ', 'ROOT'), ('Darshan', 'compound'), ('Institute', 'appos'), ('Engineering', 'pobj'), ('&', 'cc'), ('Technology', 'conj'), ('  ', 'conj'), ('‹#›', 'punct'), (' ', 'punct'), ('X.800', 'appos'), ('RFC', 'conj'), ('2828', 'nummod'), ('International', 'compound'), ('Telecommunication', 'compound'), ('Union', 'appos'), ('(', 'punct'), ('ITU', 'appos'), (')', 'punct'), ('2', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[Cryptographic, Hash], [Hash, Functions], [Functions,                                 ], [                                , Darshan], [Darshan, Institute], [Institute, Engineering], [Engineering, &], [&, Technology], [Technology,   ], [  , ‹#›], [‹#›,  ], [ , X.800], [X.800, RFC], [RFC, 2828], [2828, International], [International, Telecommunication], [Telecommunication, Union], [Union, (], [(, ITU], [ITU, )], [), 2], [2,  ]]

>> Trigrams: 
[[Cryptographic, Hash, Functions], [Hash, Functions,                                 ], [Functions,                                 , Darshan], [                                , Darshan, Institute], [Darshan, Institute, Engineering], [Institute, Engineering, &], [Engineering, &, Technology], [&, Technology,   ], [Technology,   , ‹#›], [  , ‹#›,  ], [‹#›,  , X.800], [ , X.800, RFC], [X.800, RFC, 2828], [RFC, 2828, International], [2828, International, Telecommunication], [International, Telecommunication, Union], [Telecommunication, Union, (], [Union, (, ITU], [(, ITU, )], [ITU, ), 2], [), 2,  ]]

>> Noun Phrases are: 
[Darshan Institute, Engineering, Technology, X.800, RFC, International Telecommunication Union, (ITU]

>> Named Entities are: 
[('Functions', 'PERSON'), ('Darshan Institute of Engineering & Technology', 'ORG'), ('X.800', 'CARDINAL'), ('RFC 2828 International Telecommunication Union', 'ORG'), ('ITU', 'ORG'), ('2', 'CARDINAL')]


============================ Sentence 6 =============================

Hash Function A hash function H accepts a variable-length block of data M as input and produces a fixed-size hash value h = H(M). 


>> Tokens are: 
[Hash, Function, hash, function, H, accepts, variable, -, length, block, data, M, input, produces, fixed, -, size, hash, value, h, =, H(M, ), .] 

>> PoS Tags are: 
[('Hash', 'PROPN'), ('Function', 'PROPN'), ('hash', 'NOUN'), ('function', 'NOUN'), ('H', 'NOUN'), ('accepts', 'VERB'), ('variable', 'ADJ'), ('-', 'PUNCT'), ('length', 'NOUN'), ('block', 'NOUN'), ('data', 'NOUN'), ('M', 'PROPN'), ('input', 'NOUN'), ('produces', 'VERB'), ('fixed', 'VERB'), ('-', 'PUNCT'), ('size', 'NOUN'), ('hash', 'NOUN'), ('value', 'NOUN'), ('h', 'NOUN'), ('=', 'PUNCT'), ('H(M', 'PROPN'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Hash', 'compound'), ('Function', 'compound'), ('hash', 'compound'), ('function', 'compound'), ('H', 'nsubj'), ('accepts', 'ROOT'), ('variable', 'amod'), ('-', 'punct'), ('length', 'compound'), ('block', 'dobj'), ('data', 'compound'), ('M', 'pobj'), ('input', 'pobj'), ('produces', 'conj'), ('fixed', 'amod'), ('-', 'punct'), ('size', 'compound'), ('hash', 'compound'), ('value', 'dobj'), ('h', 'punct'), ('=', 'dobj'), ('H(M', 'dobj'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Hash, Function], [Function, hash], [hash, function], [function, H], [H, accepts], [accepts, variable], [variable, -], [-, length], [length, block], [block, data], [data, M], [M, input], [input, produces], [produces, fixed], [fixed, -], [-, size], [size, hash], [hash, value], [value, h], [h, =], [=, H(M], [H(M, )], [), .]]

>> Trigrams: 
[[Hash, Function, hash], [Function, hash, function], [hash, function, H], [function, H, accepts], [H, accepts, variable], [accepts, variable, -], [variable, -, length], [-, length, block], [length, block, data], [block, data, M], [data, M, input], [M, input, produces], [input, produces, fixed], [produces, fixed, -], [fixed, -, size], [-, size, hash], [size, hash, value], [hash, value, h], [value, h, =], [h, =, H(M], [=, H(M, )], [H(M, ), .]]

>> Noun Phrases are: 
[Hash Function A hash function H, a variable-length block, data M, input, a fixed-size hash value, H(M]

>> Named Entities are: 
[]


============================ Sentence 7 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 8 =============================

A “good” hash function has the property that the results of applying a change to any bit or bits in M results, with high probability, in a change to the hash code. 


>> Tokens are: 
[“, good, ”, hash, function, property, results, applying, change, bit, bits, M, results, ,, high, probability, ,, change, hash, code, .] 

>> PoS Tags are: 
[('“', 'PUNCT'), ('good', 'ADJ'), ('”', 'PUNCT'), ('hash', 'NOUN'), ('function', 'NOUN'), ('property', 'NOUN'), ('results', 'NOUN'), ('applying', 'VERB'), ('change', 'NOUN'), ('bit', 'NOUN'), ('bits', 'VERB'), ('M', 'PROPN'), ('results', 'NOUN'), (',', 'PUNCT'), ('high', 'ADJ'), ('probability', 'NOUN'), (',', 'PUNCT'), ('change', 'NOUN'), ('hash', 'NOUN'), ('code', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('“', 'punct'), ('good', 'amod'), ('”', 'punct'), ('hash', 'compound'), ('function', 'nsubj'), ('property', 'dobj'), ('results', 'relcl'), ('applying', 'pcomp'), ('change', 'dobj'), ('bit', 'pobj'), ('bits', 'conj'), ('M', 'compound'), ('results', 'pobj'), (',', 'punct'), ('high', 'amod'), ('probability', 'pobj'), (',', 'punct'), ('change', 'pobj'), ('hash', 'compound'), ('code', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[“, good], [good, ”], [”, hash], [hash, function], [function, property], [property, results], [results, applying], [applying, change], [change, bit], [bit, bits], [bits, M], [M, results], [results, ,], [,, high], [high, probability], [probability, ,], [,, change], [change, hash], [hash, code], [code, .]]

>> Trigrams: 
[[“, good, ”], [good, ”, hash], [”, hash, function], [hash, function, property], [function, property, results], [property, results, applying], [results, applying, change], [applying, change, bit], [change, bit, bits], [bit, bits, M], [bits, M, results], [M, results, ,], [results, ,, high], [,, high, probability], [high, probability, ,], [probability, ,, change], [,, change, hash], [change, hash, code], [hash, code, .]]

>> Noun Phrases are: 
[A “good” hash function, the property, a change, any bit, M results, high probability, a change, the hash code]

>> Named Entities are: 
[]


============================ Sentence 9 =============================

  Unit-5   


>> Tokens are: 
[  , Unit-5,  ] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('Unit-5', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'nsubj'), ('Unit-5', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[  , Unit-5], [Unit-5,  ]]

>> Trigrams: 
[[  , Unit-5,  ]]

>> Noun Phrases are: 
[  Unit-5]

>> Named Entities are: 
[]


============================ Sentence 10 =============================

Cryptographic Hash Functions                                 Darshan Institute of Engineering & Technology   ‹#›   


>> Tokens are: 
[Cryptographic, Hash, Functions,                                 , Darshan, Institute, Engineering, &, Technology,   , ‹#›,  ] 

>> PoS Tags are: 
[('Cryptographic', 'PROPN'), ('Hash', 'PROPN'), ('Functions', 'PROPN'), ('                                ', 'SPACE'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('Engineering', 'PROPN'), ('&', 'CCONJ'), ('Technology', 'PROPN'), ('  ', 'SPACE'), ('‹#›', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Cryptographic', 'compound'), ('Hash', 'compound'), ('Functions', 'compound'), ('                                ', 'ROOT'), ('Darshan', 'compound'), ('Institute', 'appos'), ('Engineering', 'pobj'), ('&', 'cc'), ('Technology', 'conj'), ('  ', 'conj'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[Cryptographic, Hash], [Hash, Functions], [Functions,                                 ], [                                , Darshan], [Darshan, Institute], [Institute, Engineering], [Engineering, &], [&, Technology], [Technology,   ], [  , ‹#›], [‹#›,  ]]

>> Trigrams: 
[[Cryptographic, Hash, Functions], [Hash, Functions,                                 ], [Functions,                                 , Darshan], [                                , Darshan, Institute], [Darshan, Institute, Engineering], [Institute, Engineering, &], [Engineering, &, Technology], [&, Technology,   ], [Technology,   , ‹#›], [  , ‹#›,  ]]

>> Noun Phrases are: 
[Darshan Institute, Engineering, Technology]

>> Named Entities are: 
[('Functions', 'PERSON'), ('Darshan Institute of Engineering & Technology', 'ORG')]


============================ Sentence 11 =============================

Applications of Cryptographic Hash Functions Message authentication Digital Signature 


>> Tokens are: 
[Applications, Cryptographic, Hash, Functions, Message, authentication, Digital, Signature] 

>> PoS Tags are: 
[('Applications', 'PROPN'), ('Cryptographic', 'PROPN'), ('Hash', 'PROPN'), ('Functions', 'PROPN'), ('Message', 'NOUN'), ('authentication', 'NOUN'), ('Digital', 'PROPN'), ('Signature', 'NOUN')] 

>> Dependency Tags are: 
[('Applications', 'ROOT'), ('Cryptographic', 'compound'), ('Hash', 'compound'), ('Functions', 'compound'), ('Message', 'compound'), ('authentication', 'pobj'), ('Digital', 'compound'), ('Signature', 'appos')]

>> Bigrams: 
[[Applications, Cryptographic], [Cryptographic, Hash], [Hash, Functions], [Functions, Message], [Message, authentication], [authentication, Digital], [Digital, Signature]]

>> Trigrams: 
[[Applications, Cryptographic, Hash], [Cryptographic, Hash, Functions], [Hash, Functions, Message], [Functions, Message, authentication], [Message, authentication, Digital], [authentication, Digital, Signature]]

>> Noun Phrases are: 
[Applications, Cryptographic Hash Functions Message authentication, Digital Signature]

>> Named Entities are: 
[('Digital', 'ORG')]


============================ Sentence 12 =============================

One-way password file   Unit-5   


>> Tokens are: 
[-, way, password, file,   , Unit-5,  ] 

>> PoS Tags are: 
[('-', 'PUNCT'), ('way', 'NOUN'), ('password', 'NOUN'), ('file', 'NOUN'), ('  ', 'SPACE'), ('Unit-5', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('-', 'punct'), ('way', 'compound'), ('password', 'compound'), ('file', 'nsubj'), ('  ', 'dobj'), ('Unit-5', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[-, way], [way, password], [password, file], [file,   ], [  , Unit-5], [Unit-5,  ]]

>> Trigrams: 
[[-, way, password], [way, password, file], [password, file,   ], [file,   , Unit-5], [  , Unit-5,  ]]

>> Noun Phrases are: 
[One-way password file]

>> Named Entities are: 
[('One', 'CARDINAL'), ('Unit-5', 'NORP')]


============================ Sentence 13 =============================

Cryptographic Hash Functions                                 Darshan Institute of Engineering & Technology   ‹#›  1. 


>> Tokens are: 
[Cryptographic, Hash, Functions,                                 , Darshan, Institute, Engineering, &, Technology,   , ‹#›,  , 1, .] 

>> PoS Tags are: 
[('Cryptographic', 'PROPN'), ('Hash', 'PROPN'), ('Functions', 'PROPN'), ('                                ', 'SPACE'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('Engineering', 'PROPN'), ('&', 'CCONJ'), ('Technology', 'PROPN'), ('  ', 'SPACE'), ('‹#›', 'VERB'), (' ', 'SPACE'), ('1', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Cryptographic', 'compound'), ('Hash', 'compound'), ('Functions', 'compound'), ('                                ', 'nsubj'), ('Darshan', 'compound'), ('Institute', 'appos'), ('Engineering', 'pobj'), ('&', 'cc'), ('Technology', 'conj'), ('  ', 'conj'), ('‹#›', 'ROOT'), (' ', 'dobj'), ('1', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[Cryptographic, Hash], [Hash, Functions], [Functions,                                 ], [                                , Darshan], [Darshan, Institute], [Institute, Engineering], [Engineering, &], [&, Technology], [Technology,   ], [  , ‹#›], [‹#›,  ], [ , 1], [1, .]]

>> Trigrams: 
[[Cryptographic, Hash, Functions], [Hash, Functions,                                 ], [Functions,                                 , Darshan], [                                , Darshan, Institute], [Darshan, Institute, Engineering], [Institute, Engineering, &], [Engineering, &, Technology], [&, Technology,   ], [Technology,   , ‹#›], [  , ‹#›,  ], [‹#›,  , 1], [ , 1, .]]

>> Noun Phrases are: 
[Darshan Institute, Engineering, Technology]

>> Named Entities are: 
[('Functions', 'PERSON'), ('Darshan Institute of Engineering & Technology', 'ORG'), ('1', 'CARDINAL')]


============================ Sentence 14 =============================

Message Authentication Message authentication is a mechanism or service used to verify the integrity of a message. 


>> Tokens are: 
[Message, Authentication, Message, authentication, mechanism, service, verify, integrity, message, .] 

>> PoS Tags are: 
[('Message', 'NOUN'), ('Authentication', 'PROPN'), ('Message', 'NOUN'), ('authentication', 'NOUN'), ('mechanism', 'NOUN'), ('service', 'NOUN'), ('verify', 'VERB'), ('integrity', 'NOUN'), ('message', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Message', 'compound'), ('Authentication', 'compound'), ('Message', 'compound'), ('authentication', 'nsubj'), ('mechanism', 'attr'), ('service', 'conj'), ('verify', 'xcomp'), ('integrity', 'dobj'), ('message', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Message, Authentication], [Authentication, Message], [Message, authentication], [authentication, mechanism], [mechanism, service], [service, verify], [verify, integrity], [integrity, message], [message, .]]

>> Trigrams: 
[[Message, Authentication, Message], [Authentication, Message, authentication], [Message, authentication, mechanism], [authentication, mechanism, service], [mechanism, service, verify], [service, verify, integrity], [verify, integrity, message], [integrity, message, .]]

>> Noun Phrases are: 
[Message Authentication Message authentication, a mechanism, service, the integrity, a message]

>> Named Entities are: 
[]


============================ Sentence 15 =============================

  Message authentication assures that data received are exactly as sent (i.e.--, contain no modification, insertion, deletion, or replay). 


>> Tokens are: 
[  , Message, authentication, assures, data, received, exactly, sent, (, i.e.--, ,, contain, modification, ,, insertion, ,, deletion, ,, replay, ), .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('Message', 'NOUN'), ('authentication', 'NOUN'), ('assures', 'VERB'), ('data', 'NOUN'), ('received', 'VERB'), ('exactly', 'ADV'), ('sent', 'VERB'), ('(', 'PUNCT'), ('i.e.--', 'X'), (',', 'PUNCT'), ('contain', 'VERB'), ('modification', 'NOUN'), (',', 'PUNCT'), ('insertion', 'NOUN'), (',', 'PUNCT'), ('deletion', 'NOUN'), (',', 'PUNCT'), ('replay', 'NOUN'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'nummod'), ('Message', 'compound'), ('authentication', 'nsubj'), ('assures', 'ROOT'), ('data', 'nsubj'), ('received', 'acl'), ('exactly', 'advmod'), ('sent', 'acomp'), ('(', 'punct'), ('i.e.--', 'dep'), (',', 'punct'), ('contain', 'conj'), ('modification', 'dobj'), (',', 'punct'), ('insertion', 'conj'), (',', 'punct'), ('deletion', 'conj'), (',', 'punct'), ('replay', 'conj'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[  , Message], [Message, authentication], [authentication, assures], [assures, data], [data, received], [received, exactly], [exactly, sent], [sent, (], [(, i.e.--], [i.e.--, ,], [,, contain], [contain, modification], [modification, ,], [,, insertion], [insertion, ,], [,, deletion], [deletion, ,], [,, replay], [replay, )], [), .]]

>> Trigrams: 
[[  , Message, authentication], [Message, authentication, assures], [authentication, assures, data], [assures, data, received], [data, received, exactly], [received, exactly, sent], [exactly, sent, (], [sent, (, i.e.--], [(, i.e.--, ,], [i.e.--, ,, contain], [,, contain, modification], [contain, modification, ,], [modification, ,, insertion], [,, insertion, ,], [insertion, ,, deletion], [,, deletion, ,], [deletion, ,, replay], [,, replay, )], [replay, ), .]]

>> Noun Phrases are: 
[  Message authentication, data, no modification, insertion, deletion, replay]

>> Named Entities are: 
[]


============================ Sentence 16 =============================

  When a hash function is used to provide message authentication, the hash function value is often referred to as a message digest. 


>> Tokens are: 
[  , hash, function, provide, message, authentication, ,, hash, function, value, referred, message, digest, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('hash', 'NOUN'), ('function', 'NOUN'), ('provide', 'VERB'), ('message', 'NOUN'), ('authentication', 'NOUN'), (',', 'PUNCT'), ('hash', 'NOUN'), ('function', 'NOUN'), ('value', 'NOUN'), ('referred', 'VERB'), ('message', 'NOUN'), ('digest', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'nsubjpass'), ('hash', 'compound'), ('function', 'nsubjpass'), ('provide', 'xcomp'), ('message', 'compound'), ('authentication', 'dobj'), (',', 'punct'), ('hash', 'compound'), ('function', 'compound'), ('value', 'nsubjpass'), ('referred', 'ROOT'), ('message', 'compound'), ('digest', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[  , hash], [hash, function], [function, provide], [provide, message], [message, authentication], [authentication, ,], [,, hash], [hash, function], [function, value], [value, referred], [referred, message], [message, digest], [digest, .]]

>> Trigrams: 
[[  , hash, function], [hash, function, provide], [function, provide, message], [provide, message, authentication], [message, authentication, ,], [authentication, ,, hash], [,, hash, function], [hash, function, value], [function, value, referred], [value, referred, message], [referred, message, digest], [message, digest, .]]

>> Noun Phrases are: 
[a hash function, message authentication, the hash function value, a message digest]

>> Named Entities are: 
[]


============================ Sentence 17 =============================

 Unit-5   


>> Tokens are: 
[ , Unit-5,  ] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('Unit-5', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'nsubj'), ('Unit-5', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[ , Unit-5], [Unit-5,  ]]

>> Trigrams: 
[[ , Unit-5,  ]]

>> Noun Phrases are: 
[ Unit-5]

>> Named Entities are: 
[('Unit-5', 'PRODUCT')]


============================ Sentence 18 =============================

Cryptographic Hash Functions                                 Darshan Institute of Engineering & Technology   ‹#›   


>> Tokens are: 
[Cryptographic, Hash, Functions,                                 , Darshan, Institute, Engineering, &, Technology,   , ‹#›,  ] 

>> PoS Tags are: 
[('Cryptographic', 'PROPN'), ('Hash', 'PROPN'), ('Functions', 'PROPN'), ('                                ', 'SPACE'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('Engineering', 'PROPN'), ('&', 'CCONJ'), ('Technology', 'PROPN'), ('  ', 'SPACE'), ('‹#›', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Cryptographic', 'compound'), ('Hash', 'compound'), ('Functions', 'compound'), ('                                ', 'nsubj'), ('Darshan', 'compound'), ('Institute', 'appos'), ('Engineering', 'pobj'), ('&', 'cc'), ('Technology', 'conj'), ('  ', 'conj'), ('‹#›', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[Cryptographic, Hash], [Hash, Functions], [Functions,                                 ], [                                , Darshan], [Darshan, Institute], [Institute, Engineering], [Engineering, &], [&, Technology], [Technology,   ], [  , ‹#›], [‹#›,  ]]

>> Trigrams: 
[[Cryptographic, Hash, Functions], [Hash, Functions,                                 ], [Functions,                                 , Darshan], [                                , Darshan, Institute], [Darshan, Institute, Engineering], [Institute, Engineering, &], [Engineering, &, Technology], [&, Technology,   ], [Technology,   , ‹#›], [  , ‹#›,  ]]

>> Noun Phrases are: 
[Darshan Institute, Engineering, Technology]

>> Named Entities are: 
[('Functions', 'PERSON'), ('Darshan Institute of Engineering & Technology', 'ORG')]


============================ Sentence 19 =============================

Message authentication method - 1 Only A and B share the secret key, the message must have come from A and has not been altered. 


>> Tokens are: 
[Message, authentication, method, -, 1, B, share, secret, key, ,, message, come, altered, .] 

>> PoS Tags are: 
[('Message', 'NOUN'), ('authentication', 'NOUN'), ('method', 'NOUN'), ('-', 'PUNCT'), ('1', 'NUM'), ('B', 'NOUN'), ('share', 'VERB'), ('secret', 'ADJ'), ('key', 'NOUN'), (',', 'PUNCT'), ('message', 'NOUN'), ('come', 'VERB'), ('altered', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Message', 'compound'), ('authentication', 'compound'), ('method', 'dep'), ('-', 'punct'), ('1', 'appos'), ('B', 'conj'), ('share', 'advcl'), ('secret', 'amod'), ('key', 'dobj'), (',', 'punct'), ('message', 'nsubj'), ('come', 'ROOT'), ('altered', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[Message, authentication], [authentication, method], [method, -], [-, 1], [1, B], [B, share], [share, secret], [secret, key], [key, ,], [,, message], [message, come], [come, altered], [altered, .]]

>> Trigrams: 
[[Message, authentication, method], [authentication, method, -], [method, -, 1], [-, 1, B], [1, B, share], [B, share, secret], [share, secret, key], [secret, key, ,], [key, ,, message], [,, message, come], [message, come, altered], [come, altered, .]]

>> Noun Phrases are: 
[the secret key, the message, A]

>> Named Entities are: 
[]


============================ Sentence 20 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 21 =============================

The hash code provides the structure required to achieve authentication. 


>> Tokens are: 
[hash, code, provides, structure, required, achieve, authentication, .] 

>> PoS Tags are: 
[('hash', 'NOUN'), ('code', 'NOUN'), ('provides', 'VERB'), ('structure', 'NOUN'), ('required', 'VERB'), ('achieve', 'VERB'), ('authentication', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('hash', 'compound'), ('code', 'nsubj'), ('provides', 'ROOT'), ('structure', 'dobj'), ('required', 'acl'), ('achieve', 'xcomp'), ('authentication', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[hash, code], [code, provides], [provides, structure], [structure, required], [required, achieve], [achieve, authentication], [authentication, .]]

>> Trigrams: 
[[hash, code, provides], [code, provides, structure], [provides, structure, required], [structure, required, achieve], [required, achieve, authentication], [achieve, authentication, .]]

>> Noun Phrases are: 
[The hash code, the structure, authentication]

>> Named Entities are: 
[]


============================ Sentence 22 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 23 =============================

Because encryption is applied to the entire message plus hash code, confidentiality is also provided. 


>> Tokens are: 
[encryption, applied, entire, message, plus, hash, code, ,, confidentiality, provided, .] 

>> PoS Tags are: 
[('encryption', 'NOUN'), ('applied', 'VERB'), ('entire', 'ADJ'), ('message', 'NOUN'), ('plus', 'CCONJ'), ('hash', 'NOUN'), ('code', 'NOUN'), (',', 'PUNCT'), ('confidentiality', 'NOUN'), ('provided', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('encryption', 'nsubjpass'), ('applied', 'advcl'), ('entire', 'amod'), ('message', 'pobj'), ('plus', 'cc'), ('hash', 'compound'), ('code', 'conj'), (',', 'punct'), ('confidentiality', 'nsubjpass'), ('provided', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[encryption, applied], [applied, entire], [entire, message], [message, plus], [plus, hash], [hash, code], [code, ,], [,, confidentiality], [confidentiality, provided], [provided, .]]

>> Trigrams: 
[[encryption, applied, entire], [applied, entire, message], [entire, message, plus], [message, plus, hash], [plus, hash, code], [hash, code, ,], [code, ,, confidentiality], [,, confidentiality, provided], [confidentiality, provided, .]]

>> Noun Phrases are: 
[encryption, the entire message, hash code, confidentiality]

>> Named Entities are: 
[]


============================ Sentence 24 =============================

 E D ll H H M M    K K H(M) Compare   


>> Tokens are: 
[ , E, D, ll, H, H, M, M,    , K, K, H(M, ), Compare,  ] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('E', 'NOUN'), ('D', 'NOUN'), ('ll', 'AUX'), ('H', 'NOUN'), ('H', 'NOUN'), ('M', 'NOUN'), ('M', 'PROPN'), ('   ', 'SPACE'), ('K', 'PROPN'), ('K', 'PROPN'), ('H(M', 'PROPN'), (')', 'PUNCT'), ('Compare', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'compound'), ('E', 'compound'), ('D', 'nsubj'), ('ll', 'aux'), ('H', 'compound'), ('H', 'compound'), ('M', 'compound'), ('M', 'compound'), ('   ', 'compound'), ('K', 'compound'), ('K', 'dobj'), ('H(M', 'appos'), (')', 'punct'), ('Compare', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[ , E], [E, D], [D, ll], [ll, H], [H, H], [H, M], [M, M], [M,    ], [   , K], [K, K], [K, H(M], [H(M, )], [), Compare], [Compare,  ]]

>> Trigrams: 
[[ , E, D], [E, D, ll], [D, ll, H], [ll, H, H], [H, H, M], [H, M, M], [M, M,    ], [M,    , K], [   , K, K], [K, K, H(M], [K, H(M, )], [H(M, ), Compare], [), Compare,  ]]

>> Noun Phrases are: 
[ E D, H H M M    K K, H(M]

>> Named Entities are: 
[]


============================ Sentence 25 =============================

E 


>> Tokens are: 
[E] 

>> PoS Tags are: 
[('E', 'NOUN')] 

>> Dependency Tags are: 
[('E', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[E]

>> Named Entities are: 
[]


============================ Sentence 26 =============================

(K, [ M || H(M)]) 


>> Tokens are: 
[(, K, ,, [, M, ||, H(M, ), ], )] 

>> PoS Tags are: 
[('(', 'PUNCT'), ('K', 'NOUN'), (',', 'PUNCT'), ('[', 'PUNCT'), ('M', 'NOUN'), ('||', 'NOUN'), ('H(M', 'PROPN'), (')', 'PUNCT'), (']', 'PUNCT'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('(', 'punct'), ('K', 'ROOT'), (',', 'punct'), ('[', 'punct'), ('M', 'compound'), ('||', 'appos'), ('H(M', 'appos'), (')', 'punct'), (']', 'punct'), (')', 'punct')]

>> Bigrams: 
[[(, K], [K, ,], [,, [], [[, M], [M, ||], [||, H(M], [H(M, )], [), ]], [], )]]

>> Trigrams: 
[[(, K, ,], [K, ,, [], [,, [, M], [[, M, ||], [M, ||, H(M], [||, H(M, )], [H(M, ), ]], [), ], )]]

>> Noun Phrases are: 
[(K, M ||, H(M]

>> Named Entities are: 
[]


============================ Sentence 27 =============================

Source A Destination B  Unit-5   


>> Tokens are: 
[Source, Destination, B,  , Unit-5,  ] 

>> PoS Tags are: 
[('Source', 'NOUN'), ('Destination', 'PROPN'), ('B', 'PROPN'), (' ', 'SPACE'), ('Unit-5', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Source', 'nmod'), ('Destination', 'nmod'), ('B', 'compound'), (' ', 'dobj'), ('Unit-5', 'amod'), (' ', 'ROOT')]

>> Bigrams: 
[[Source, Destination], [Destination, B], [B,  ], [ , Unit-5], [Unit-5,  ]]

>> Trigrams: 
[[Source, Destination, B], [Destination, B,  ], [B,  , Unit-5], [ , Unit-5,  ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 28 =============================

Cryptographic Hash Functions                                 Darshan Institute of Engineering & Technology   ‹#›   


>> Tokens are: 
[Cryptographic, Hash, Functions,                                 , Darshan, Institute, Engineering, &, Technology,   , ‹#›,  ] 

>> PoS Tags are: 
[('Cryptographic', 'PROPN'), ('Hash', 'PROPN'), ('Functions', 'PROPN'), ('                                ', 'SPACE'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('Engineering', 'PROPN'), ('&', 'CCONJ'), ('Technology', 'PROPN'), ('  ', 'SPACE'), ('‹#›', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Cryptographic', 'compound'), ('Hash', 'compound'), ('Functions', 'compound'), ('                                ', 'nsubj'), ('Darshan', 'compound'), ('Institute', 'appos'), ('Engineering', 'pobj'), ('&', 'cc'), ('Technology', 'conj'), ('  ', 'conj'), ('‹#›', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[Cryptographic, Hash], [Hash, Functions], [Functions,                                 ], [                                , Darshan], [Darshan, Institute], [Institute, Engineering], [Engineering, &], [&, Technology], [Technology,   ], [  , ‹#›], [‹#›,  ]]

>> Trigrams: 
[[Cryptographic, Hash, Functions], [Hash, Functions,                                 ], [Functions,                                 , Darshan], [                                , Darshan, Institute], [Darshan, Institute, Engineering], [Institute, Engineering, &], [Engineering, &, Technology], [&, Technology,   ], [Technology,   , ‹#›], [  , ‹#›,  ]]

>> Noun Phrases are: 
[Darshan Institute, Engineering, Technology]

>> Named Entities are: 
[('Functions', 'PERSON'), ('Darshan Institute of Engineering & Technology', 'ORG')]


============================ Sentence 29 =============================

Message authentication method - 2 Only the hash code is encrypted, using symmetric encryption. 


>> Tokens are: 
[Message, authentication, method, -, 2, hash, code, encrypted, ,, symmetric, encryption, .] 

>> PoS Tags are: 
[('Message', 'NOUN'), ('authentication', 'NOUN'), ('method', 'NOUN'), ('-', 'PUNCT'), ('2', 'NUM'), ('hash', 'NOUN'), ('code', 'NOUN'), ('encrypted', 'VERB'), (',', 'PUNCT'), ('symmetric', 'ADJ'), ('encryption', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Message', 'compound'), ('authentication', 'compound'), ('method', 'nsubjpass'), ('-', 'punct'), ('2', 'appos'), ('hash', 'compound'), ('code', 'nsubjpass'), ('encrypted', 'ROOT'), (',', 'punct'), ('symmetric', 'amod'), ('encryption', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Message, authentication], [authentication, method], [method, -], [-, 2], [2, hash], [hash, code], [code, encrypted], [encrypted, ,], [,, symmetric], [symmetric, encryption], [encryption, .]]

>> Trigrams: 
[[Message, authentication, method], [authentication, method, -], [method, -, 2], [-, 2, hash], [2, hash, code], [hash, code, encrypted], [code, encrypted, ,], [encrypted, ,, symmetric], [,, symmetric, encryption], [symmetric, encryption, .]]

>> Noun Phrases are: 
[Message authentication method, Only the hash code, symmetric encryption]

>> Named Entities are: 
[]


============================ Sentence 30 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 31 =============================

This reduces the processing burden for those applications that do not require confidentiality. 


>> Tokens are: 
[reduces, processing, burden, applications, require, confidentiality, .] 

>> PoS Tags are: 
[('reduces', 'VERB'), ('processing', 'NOUN'), ('burden', 'NOUN'), ('applications', 'NOUN'), ('require', 'VERB'), ('confidentiality', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('reduces', 'ROOT'), ('processing', 'compound'), ('burden', 'dobj'), ('applications', 'pobj'), ('require', 'relcl'), ('confidentiality', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[reduces, processing], [processing, burden], [burden, applications], [applications, require], [require, confidentiality], [confidentiality, .]]

>> Trigrams: 
[[reduces, processing, burden], [processing, burden, applications], [burden, applications, require], [applications, require, confidentiality], [require, confidentiality, .]]

>> Noun Phrases are: 
[the processing burden, those applications, confidentiality]

>> Named Entities are: 
[]


============================ Sentence 32 =============================

H M    


>> Tokens are: 
[H, M,   ] 

>> PoS Tags are: 
[('H', 'NOUN'), ('M', 'PROPN'), ('  ', 'SPACE')] 

>> Dependency Tags are: 
[('H', 'compound'), ('M', 'ROOT'), ('  ', 'punct')]

>> Bigrams: 
[[H, M], [M,   ]]

>> Trigrams: 
[[H, M,   ]]

>> Noun Phrases are: 
[H M]

>> Named Entities are: 
[]


============================ Sentence 33 =============================

Source A Destination B E K ll M  E(K, H(M)) 


>> Tokens are: 
[Source, Destination, B, E, K, ll, M,  , E(K, ,, H(M, ), )] 

>> PoS Tags are: 
[('Source', 'PROPN'), ('Destination', 'PROPN'), ('B', 'PROPN'), ('E', 'PROPN'), ('K', 'NOUN'), ('ll', 'AUX'), ('M', 'PROPN'), (' ', 'SPACE'), ('E(K', 'NOUN'), (',', 'PUNCT'), ('H(M', 'PROPN'), (')', 'PUNCT'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('Source', 'nmod'), ('Destination', 'compound'), ('B', 'compound'), ('E', 'compound'), ('K', 'nsubj'), ('ll', 'ROOT'), ('M', 'nmod'), (' ', 'compound'), ('E(K', 'attr'), (',', 'punct'), ('H(M', 'appos'), (')', 'punct'), (')', 'punct')]

>> Bigrams: 
[[Source, Destination], [Destination, B], [B, E], [E, K], [K, ll], [ll, M], [M,  ], [ , E(K], [E(K, ,], [,, H(M], [H(M, )], [), )]]

>> Trigrams: 
[[Source, Destination, B], [Destination, B, E], [B, E, K], [E, K, ll], [K, ll, M], [ll, M,  ], [M,  , E(K], [ , E(K, ,], [E(K, ,, H(M], [,, H(M, )], [H(M, ), )]]

>> Noun Phrases are: 
[Source A Destination B E K, M  E(K, H(M]

>> Named Entities are: 
[]


============================ Sentence 34 =============================

H D K   


>> Tokens are: 
[H, D, K,  ] 

>> PoS Tags are: 
[('H', 'NOUN'), ('D', 'PROPN'), ('K', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('H', 'compound'), ('D', 'compound'), ('K', 'ROOT'), (' ', 'appos')]

>> Bigrams: 
[[H, D], [D, K], [K,  ]]

>> Trigrams: 
[[H, D, K], [D, K,  ]]

>> Noun Phrases are: 
[H D K]

>> Named Entities are: 
[]


============================ Sentence 35 =============================

Compare    Unit-5   


>> Tokens are: 
[Compare,    , Unit-5,  ] 

>> PoS Tags are: 
[('Compare', 'VERB'), ('   ', 'SPACE'), ('Unit-5', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Compare', 'ROOT'), ('   ', 'dobj'), ('Unit-5', 'dobj'), (' ', 'punct')]

>> Bigrams: 
[[Compare,    ], [   , Unit-5], [Unit-5,  ]]

>> Trigrams: 
[[Compare,    , Unit-5], [   , Unit-5,  ]]

>> Noun Phrases are: 
[Unit-5]

>> Named Entities are: 
[]


============================ Sentence 36 =============================

Cryptographic Hash Functions                                 Darshan Institute of Engineering & Technology   ‹#›   


>> Tokens are: 
[Cryptographic, Hash, Functions,                                 , Darshan, Institute, Engineering, &, Technology,   , ‹#›,  ] 

>> PoS Tags are: 
[('Cryptographic', 'PROPN'), ('Hash', 'PROPN'), ('Functions', 'PROPN'), ('                                ', 'SPACE'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('Engineering', 'PROPN'), ('&', 'CCONJ'), ('Technology', 'PROPN'), ('  ', 'SPACE'), ('‹#›', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Cryptographic', 'compound'), ('Hash', 'compound'), ('Functions', 'compound'), ('                                ', 'nsubj'), ('Darshan', 'compound'), ('Institute', 'appos'), ('Engineering', 'pobj'), ('&', 'cc'), ('Technology', 'conj'), ('  ', 'conj'), ('‹#›', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[Cryptographic, Hash], [Hash, Functions], [Functions,                                 ], [                                , Darshan], [Darshan, Institute], [Institute, Engineering], [Engineering, &], [&, Technology], [Technology,   ], [  , ‹#›], [‹#›,  ]]

>> Trigrams: 
[[Cryptographic, Hash, Functions], [Hash, Functions,                                 ], [Functions,                                 , Darshan], [                                , Darshan, Institute], [Darshan, Institute, Engineering], [Institute, Engineering, &], [Engineering, &, Technology], [&, Technology,   ], [Technology,   , ‹#›], [  , ‹#›,  ]]

>> Noun Phrases are: 
[Darshan Institute, Engineering, Technology]

>> Named Entities are: 
[('Functions', 'PERSON'), ('Darshan Institute of Engineering & Technology', 'ORG')]


============================ Sentence 37 =============================

Message authentication method - 3 


>> Tokens are: 
[Message, authentication, method, -, 3] 

>> PoS Tags are: 
[('Message', 'NOUN'), ('authentication', 'NOUN'), ('method', 'NOUN'), ('-', 'PUNCT'), ('3', 'NUM')] 

>> Dependency Tags are: 
[('Message', 'compound'), ('authentication', 'compound'), ('method', 'ROOT'), ('-', 'punct'), ('3', 'appos')]

>> Bigrams: 
[[Message, authentication], [authentication, method], [method, -], [-, 3]]

>> Trigrams: 
[[Message, authentication, method], [authentication, method, -], [method, -, 3]]

>> Noun Phrases are: 
[Message authentication method]

>> Named Entities are: 
[]


============================ Sentence 38 =============================

It is possible to use a hash function but no encryption for message authentication. 


>> Tokens are: 
[possible, use, hash, function, encryption, message, authentication, .] 

>> PoS Tags are: 
[('possible', 'ADJ'), ('use', 'VERB'), ('hash', 'NOUN'), ('function', 'NOUN'), ('encryption', 'NOUN'), ('message', 'NOUN'), ('authentication', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('possible', 'acomp'), ('use', 'xcomp'), ('hash', 'compound'), ('function', 'dobj'), ('encryption', 'conj'), ('message', 'compound'), ('authentication', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[possible, use], [use, hash], [hash, function], [function, encryption], [encryption, message], [message, authentication], [authentication, .]]

>> Trigrams: 
[[possible, use, hash], [use, hash, function], [hash, function, encryption], [function, encryption, message], [encryption, message, authentication], [message, authentication, .]]

>> Noun Phrases are: 
[It, a hash function, no encryption, message authentication]

>> Named Entities are: 
[]


============================ Sentence 39 =============================

A and B share a common secret value S. A computes the hash value over the concatenation of M  and S  and appends the resulting hash value to M.   


>> Tokens are: 
[B, share, common, secret, value, S., computes, hash, value, concatenation, M,  , S,  , appends, resulting, hash, value, M.,  ] 

>> PoS Tags are: 
[('B', 'NOUN'), ('share', 'VERB'), ('common', 'ADJ'), ('secret', 'ADJ'), ('value', 'NOUN'), ('S.', 'PROPN'), ('computes', 'VERB'), ('hash', 'NOUN'), ('value', 'NOUN'), ('concatenation', 'NOUN'), ('M', 'PROPN'), (' ', 'SPACE'), ('S', 'PROPN'), (' ', 'SPACE'), ('appends', 'VERB'), ('resulting', 'VERB'), ('hash', 'NOUN'), ('value', 'NOUN'), ('M.', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('B', 'conj'), ('share', 'ROOT'), ('common', 'amod'), ('secret', 'amod'), ('value', 'dobj'), ('S.', 'compound'), ('computes', 'dative'), ('hash', 'compound'), ('value', 'dobj'), ('concatenation', 'pobj'), ('M', 'compound'), (' ', 'pobj'), ('S', 'compound'), (' ', 'conj'), ('appends', 'conj'), ('resulting', 'amod'), ('hash', 'compound'), ('value', 'dobj'), ('M.', 'compound'), (' ', 'pobj')]

>> Bigrams: 
[[B, share], [share, common], [common, secret], [secret, value], [value, S.], [S., computes], [computes, hash], [hash, value], [value, concatenation], [concatenation, M], [M,  ], [ , S], [S,  ], [ , appends], [appends, resulting], [resulting, hash], [hash, value], [value, M.], [M.,  ]]

>> Trigrams: 
[[B, share, common], [share, common, secret], [common, secret, value], [secret, value, S.], [value, S., computes], [S., computes, hash], [computes, hash, value], [hash, value, concatenation], [value, concatenation, M], [concatenation, M,  ], [M,  , S], [ , S,  ], [S,  , appends], [ , appends, resulting], [appends, resulting, hash], [resulting, hash, value], [hash, value, M.], [value, M.,  ]]

>> Noun Phrases are: 
[B, a common secret value, S. A, the hash value, the concatenation, the resulting hash value]

>> Named Entities are: 
[]


============================ Sentence 40 =============================

Because B possesses S, it can recompute the hash value to verify. 


>> Tokens are: 
[B, possesses, S, ,, recompute, hash, value, verify, .] 

>> PoS Tags are: 
[('B', 'NOUN'), ('possesses', 'VERB'), ('S', 'PROPN'), (',', 'PUNCT'), ('recompute', 'VERB'), ('hash', 'NOUN'), ('value', 'NOUN'), ('verify', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('B', 'nsubj'), ('possesses', 'advcl'), ('S', 'dobj'), (',', 'punct'), ('recompute', 'ROOT'), ('hash', 'compound'), ('value', 'dobj'), ('verify', 'relcl'), ('.', 'punct')]

>> Bigrams: 
[[B, possesses], [possesses, S], [S, ,], [,, recompute], [recompute, hash], [hash, value], [value, verify], [verify, .]]

>> Trigrams: 
[[B, possesses, S], [possesses, S, ,], [S, ,, recompute], [,, recompute, hash], [recompute, hash, value], [hash, value, verify], [value, verify, .]]

>> Noun Phrases are: 
[B, S, it, the hash value]

>> Named Entities are: 
[]


============================ Sentence 41 =============================

An opponent cannot modify an intercepted message. 


>> Tokens are: 
[opponent, modify, intercepted, message, .] 

>> PoS Tags are: 
[('opponent', 'NOUN'), ('modify', 'VERB'), ('intercepted', 'VERB'), ('message', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('opponent', 'nsubj'), ('modify', 'ROOT'), ('intercepted', 'amod'), ('message', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[opponent, modify], [modify, intercepted], [intercepted, message], [message, .]]

>> Trigrams: 
[[opponent, modify, intercepted], [modify, intercepted, message], [intercepted, message, .]]

>> Noun Phrases are: 
[An opponent, an intercepted message]

>> Named Entities are: 
[]


============================ Sentence 42 =============================

M    


>> Tokens are: 
[M,   ] 

>> PoS Tags are: 
[('M', 'NOUN'), ('  ', 'SPACE')] 

>> Dependency Tags are: 
[('M', 'compound'), ('  ', 'ROOT')]

>> Bigrams: 
[[M,   ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 43 =============================

Source A Destination B H ll M   


>> Tokens are: 
[Source, Destination, B, H, ll, M,  ] 

>> PoS Tags are: 
[('Source', 'NOUN'), ('Destination', 'PROPN'), ('B', 'PROPN'), ('H', 'NOUN'), ('ll', 'AUX'), ('M', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Source', 'nmod'), ('Destination', 'compound'), ('B', 'compound'), ('H', 'nsubj'), ('ll', 'ROOT'), ('M', 'attr'), (' ', 'appos')]

>> Bigrams: 
[[Source, Destination], [Destination, B], [B, H], [H, ll], [ll, M], [M,  ]]

>> Trigrams: 
[[Source, Destination, B], [Destination, B, H], [B, H, ll], [H, ll, M], [ll, M,  ]]

>> Noun Phrases are: 
[Source A Destination B H, M]

>> Named Entities are: 
[]


============================ Sentence 44 =============================

H(M || 


>> Tokens are: 
[H(M, ||] 

>> PoS Tags are: 
[('H(M', 'PROPN'), ('||', 'NOUN')] 

>> Dependency Tags are: 
[('H(M', 'ROOT'), ('||', 'punct')]

>> Bigrams: 
[[H(M, ||]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[H(M]

>> Named Entities are: 
[]


============================ Sentence 45 =============================

S) 


>> Tokens are: 
[S, )] 

>> PoS Tags are: 
[('S', 'NOUN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('S', 'ROOT'), (')', 'punct')]

>> Bigrams: 
[[S, )]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[S]

>> Named Entities are: 
[]


============================ Sentence 46 =============================

H Compare   ll S ll S  Unit-5   


>> Tokens are: 
[H, Compare,   , ll, S, ll, S,  , Unit-5,  ] 

>> PoS Tags are: 
[('H', 'NOUN'), ('Compare', 'NOUN'), ('  ', 'SPACE'), ('ll', 'AUX'), ('S', 'NOUN'), ('ll', 'AUX'), ('S', 'PROPN'), (' ', 'SPACE'), ('Unit-5', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('H', 'compound'), ('Compare', 'ROOT'), ('  ', 'dobj'), ('ll', 'prep'), ('S', 'conj'), ('ll', 'dep'), ('S', 'conj'), (' ', 'dobj'), ('Unit-5', 'advcl'), (' ', 'punct')]

>> Bigrams: 
[[H, Compare], [Compare,   ], [  , ll], [ll, S], [S, ll], [ll, S], [S,  ], [ , Unit-5], [Unit-5,  ]]

>> Trigrams: 
[[H, Compare,   ], [Compare,   , ll], [  , ll, S], [ll, S, ll], [S, ll, S], [ll, S,  ], [S,  , Unit-5], [ , Unit-5,  ]]

>> Noun Phrases are: 
[H Compare, S, S]

>> Named Entities are: 
[('Unit-5', 'PRODUCT')]


============================ Sentence 47 =============================

Cryptographic Hash Functions                                 Darshan Institute of Engineering & Technology   ‹#›   


>> Tokens are: 
[Cryptographic, Hash, Functions,                                 , Darshan, Institute, Engineering, &, Technology,   , ‹#›,  ] 

>> PoS Tags are: 
[('Cryptographic', 'PROPN'), ('Hash', 'PROPN'), ('Functions', 'PROPN'), ('                                ', 'SPACE'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('Engineering', 'PROPN'), ('&', 'CCONJ'), ('Technology', 'PROPN'), ('  ', 'SPACE'), ('‹#›', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Cryptographic', 'compound'), ('Hash', 'compound'), ('Functions', 'compound'), ('                                ', 'nsubj'), ('Darshan', 'compound'), ('Institute', 'appos'), ('Engineering', 'pobj'), ('&', 'cc'), ('Technology', 'conj'), ('  ', 'conj'), ('‹#›', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[Cryptographic, Hash], [Hash, Functions], [Functions,                                 ], [                                , Darshan], [Darshan, Institute], [Institute, Engineering], [Engineering, &], [&, Technology], [Technology,   ], [  , ‹#›], [‹#›,  ]]

>> Trigrams: 
[[Cryptographic, Hash, Functions], [Hash, Functions,                                 ], [Functions,                                 , Darshan], [                                , Darshan, Institute], [Darshan, Institute, Engineering], [Institute, Engineering, &], [Engineering, &, Technology], [&, Technology,   ], [Technology,   , ‹#›], [  , ‹#›,  ]]

>> Noun Phrases are: 
[Darshan Institute, Engineering, Technology]

>> Named Entities are: 
[('Functions', 'PERSON'), ('Darshan Institute of Engineering & Technology', 'ORG')]


============================ Sentence 48 =============================

Message authentication method - 4 Confidentiality can be added to the approach of method (3) by encrypting the entire message plus the hash code. 


>> Tokens are: 
[Message, authentication, method, -, 4, Confidentiality, added, approach, method, (, 3, ), encrypting, entire, message, plus, hash, code, .] 

>> PoS Tags are: 
[('Message', 'NOUN'), ('authentication', 'NOUN'), ('method', 'NOUN'), ('-', 'PUNCT'), ('4', 'NUM'), ('Confidentiality', 'PROPN'), ('added', 'VERB'), ('approach', 'NOUN'), ('method', 'NOUN'), ('(', 'PUNCT'), ('3', 'NUM'), (')', 'PUNCT'), ('encrypting', 'VERB'), ('entire', 'ADJ'), ('message', 'NOUN'), ('plus', 'CCONJ'), ('hash', 'NOUN'), ('code', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Message', 'compound'), ('authentication', 'compound'), ('method', 'nmod'), ('-', 'punct'), ('4', 'prep'), ('Confidentiality', 'nsubjpass'), ('added', 'ROOT'), ('approach', 'pobj'), ('method', 'pobj'), ('(', 'punct'), ('3', 'appos'), (')', 'punct'), ('encrypting', 'pcomp'), ('entire', 'amod'), ('message', 'dobj'), ('plus', 'cc'), ('hash', 'compound'), ('code', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[Message, authentication], [authentication, method], [method, -], [-, 4], [4, Confidentiality], [Confidentiality, added], [added, approach], [approach, method], [method, (], [(, 3], [3, )], [), encrypting], [encrypting, entire], [entire, message], [message, plus], [plus, hash], [hash, code], [code, .]]

>> Trigrams: 
[[Message, authentication, method], [authentication, method, -], [method, -, 4], [-, 4, Confidentiality], [4, Confidentiality, added], [Confidentiality, added, approach], [added, approach, method], [approach, method, (], [method, (, 3], [(, 3, )], [3, ), encrypting], [), encrypting, entire], [encrypting, entire, message], [entire, message, plus], [message, plus, hash], [plus, hash, code], [hash, code, .]]

>> Noun Phrases are: 
[Message authentication method - 4 Confidentiality, the approach, method, the entire message, the hash code]

>> Named Entities are: 
[('3', 'CARDINAL')]


============================ Sentence 49 =============================

M    


>> Tokens are: 
[M,   ] 

>> PoS Tags are: 
[('M', 'NOUN'), ('  ', 'SPACE')] 

>> Dependency Tags are: 
[('M', 'compound'), ('  ', 'ROOT')]

>> Bigrams: 
[[M,   ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 50 =============================

Source A Destination B H ll M   


>> Tokens are: 
[Source, Destination, B, H, ll, M,  ] 

>> PoS Tags are: 
[('Source', 'NOUN'), ('Destination', 'PROPN'), ('B', 'PROPN'), ('H', 'NOUN'), ('ll', 'AUX'), ('M', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Source', 'nmod'), ('Destination', 'compound'), ('B', 'compound'), ('H', 'nsubj'), ('ll', 'ROOT'), ('M', 'attr'), (' ', 'appos')]

>> Bigrams: 
[[Source, Destination], [Destination, B], [B, H], [H, ll], [ll, M], [M,  ]]

>> Trigrams: 
[[Source, Destination, B], [Destination, B, H], [B, H, ll], [H, ll, M], [ll, M,  ]]

>> Noun Phrases are: 
[Source A Destination B H, M]

>> Named Entities are: 
[]


============================ Sentence 51 =============================

H(M || 


>> Tokens are: 
[H(M, ||] 

>> PoS Tags are: 
[('H(M', 'PROPN'), ('||', 'NOUN')] 

>> Dependency Tags are: 
[('H(M', 'ROOT'), ('||', 'punct')]

>> Bigrams: 
[[H(M, ||]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[H(M]

>> Named Entities are: 
[]


============================ Sentence 52 =============================

S) 


>> Tokens are: 
[S, )] 

>> PoS Tags are: 
[('S', 'NOUN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('S', 'ROOT'), (')', 'punct')]

>> Bigrams: 
[[S, )]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[S]

>> Named Entities are: 
[]


============================ Sentence 53 =============================

H Compare   ll S ll S 


>> Tokens are: 
[H, Compare,   , ll, S, ll, S] 

>> PoS Tags are: 
[('H', 'NOUN'), ('Compare', 'NOUN'), ('  ', 'SPACE'), ('ll', 'AUX'), ('S', 'NOUN'), ('ll', 'VERB'), ('S', 'PROPN')] 

>> Dependency Tags are: 
[('H', 'compound'), ('Compare', 'ROOT'), ('  ', 'dobj'), ('ll', 'prep'), ('S', 'conj'), ('ll', 'dep'), ('S', 'punct')]

>> Bigrams: 
[[H, Compare], [Compare,   ], [  , ll], [ll, S], [S, ll], [ll, S]]

>> Trigrams: 
[[H, Compare,   ], [Compare,   , ll], [  , ll, S], [ll, S, ll], [S, ll, S]]

>> Noun Phrases are: 
[H Compare, S]

>> Named Entities are: 
[]


============================ Sentence 54 =============================

E K  D K E (K, [ M || H(M || S)])  Unit-5   


>> Tokens are: 
[E, K,  , D, K, E, (, K, ,, [, M, ||, H(M, ||, S, ), ], ),  , Unit-5,  ] 

>> PoS Tags are: 
[('E', 'NOUN'), ('K', 'PROPN'), (' ', 'SPACE'), ('D', 'PROPN'), ('K', 'PROPN'), ('E', 'PROPN'), ('(', 'PUNCT'), ('K', 'NOUN'), (',', 'PUNCT'), ('[', 'PUNCT'), ('M', 'NOUN'), ('||', 'NOUN'), ('H(M', 'PROPN'), ('||', 'NOUN'), ('S', 'PROPN'), (')', 'PUNCT'), (']', 'PUNCT'), (')', 'PUNCT'), (' ', 'SPACE'), ('Unit-5', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('E', 'compound'), ('K', 'nmod'), (' ', 'amod'), ('D', 'compound'), ('K', 'compound'), ('E', 'nmod'), ('(', 'punct'), ('K', 'appos'), (',', 'punct'), ('[', 'punct'), ('M', 'compound'), ('||', 'appos'), ('H(M', 'appos'), ('||', 'punct'), ('S', 'appos'), (')', 'punct'), (']', 'punct'), (')', 'punct'), (' ', 'nsubj'), ('Unit-5', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[E, K], [K,  ], [ , D], [D, K], [K, E], [E, (], [(, K], [K, ,], [,, [], [[, M], [M, ||], [||, H(M], [H(M, ||], [||, S], [S, )], [), ]], [], )], [),  ], [ , Unit-5], [Unit-5,  ]]

>> Trigrams: 
[[E, K,  ], [K,  , D], [ , D, K], [D, K, E], [K, E, (], [E, (, K], [(, K, ,], [K, ,, [], [,, [, M], [[, M, ||], [M, ||, H(M], [||, H(M, ||], [H(M, ||, S], [||, S, )], [S, ), ]], [), ], )], [], ),  ], [),  , Unit-5], [ , Unit-5,  ]]

>> Noun Phrases are: 
[(K, M ||, H(M, S]

>> Named Entities are: 
[]


============================ Sentence 55 =============================

Cryptographic Hash Functions                                 Darshan Institute of Engineering & Technology   ‹#›   9  MAC 


>> Tokens are: 
[Cryptographic, Hash, Functions,                                 , Darshan, Institute, Engineering, &, Technology,   , ‹#›,   , 9,  , MAC] 

>> PoS Tags are: 
[('Cryptographic', 'PROPN'), ('Hash', 'PROPN'), ('Functions', 'PROPN'), ('                                ', 'SPACE'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('Engineering', 'PROPN'), ('&', 'CCONJ'), ('Technology', 'PROPN'), ('  ', 'SPACE'), ('‹#›', 'VERB'), ('  ', 'SPACE'), ('9', 'NUM'), (' ', 'SPACE'), ('MAC', 'PROPN')] 

>> Dependency Tags are: 
[('Cryptographic', 'compound'), ('Hash', 'compound'), ('Functions', 'compound'), ('                                ', 'nmod'), ('Darshan', 'compound'), ('Institute', 'appos'), ('Engineering', 'pobj'), ('&', 'cc'), ('Technology', 'conj'), ('  ', 'nsubj'), ('‹#›', 'ROOT'), ('  ', 'nmod'), ('9', 'nummod'), (' ', 'compound'), ('MAC', 'punct')]

>> Bigrams: 
[[Cryptographic, Hash], [Hash, Functions], [Functions,                                 ], [                                , Darshan], [Darshan, Institute], [Institute, Engineering], [Engineering, &], [&, Technology], [Technology,   ], [  , ‹#›], [‹#›,   ], [  , 9], [9,  ], [ , MAC]]

>> Trigrams: 
[[Cryptographic, Hash, Functions], [Hash, Functions,                                 ], [Functions,                                 , Darshan], [                                , Darshan, Institute], [Darshan, Institute, Engineering], [Institute, Engineering, &], [Engineering, &, Technology], [&, Technology,   ], [Technology,   , ‹#›], [  , ‹#›,   ], [‹#›,   , 9], [  , 9,  ], [9,  , MAC]]

>> Noun Phrases are: 
[Darshan Institute, Engineering, Technology]

>> Named Entities are: 
[('Functions', 'PERSON'), ('Darshan Institute of Engineering & Technology', 'ORG'), ('9', 'CARDINAL'), ('MAC', 'ORG')]


============================ Sentence 56 =============================

(Message Authentication Code) 


>> Tokens are: 
[(, Message, Authentication, Code, )] 

>> PoS Tags are: 
[('(', 'PUNCT'), ('Message', 'PROPN'), ('Authentication', 'PROPN'), ('Code', 'PROPN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('(', 'punct'), ('Message', 'compound'), ('Authentication', 'compound'), ('Code', 'ROOT'), (')', 'punct')]

>> Bigrams: 
[[(, Message], [Message, Authentication], [Authentication, Code], [Code, )]]

>> Trigrams: 
[[(, Message, Authentication], [Message, Authentication, Code], [Authentication, Code, )]]

>> Noun Phrases are: 
[(Message Authentication Code]

>> Named Entities are: 
[]


============================ Sentence 57 =============================

More commonly, message authentication is achieved using a MAC also known as keyed hash function. 


>> Tokens are: 
[commonly, ,, message, authentication, achieved, MAC, known, keyed, hash, function, .] 

>> PoS Tags are: 
[('commonly', 'ADV'), (',', 'PUNCT'), ('message', 'NOUN'), ('authentication', 'NOUN'), ('achieved', 'VERB'), ('MAC', 'PROPN'), ('known', 'VERB'), ('keyed', 'ADJ'), ('hash', 'NOUN'), ('function', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('commonly', 'advmod'), (',', 'punct'), ('message', 'compound'), ('authentication', 'nsubjpass'), ('achieved', 'ROOT'), ('MAC', 'dobj'), ('known', 'acl'), ('keyed', 'amod'), ('hash', 'compound'), ('function', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[commonly, ,], [,, message], [message, authentication], [authentication, achieved], [achieved, MAC], [MAC, known], [known, keyed], [keyed, hash], [hash, function], [function, .]]

>> Trigrams: 
[[commonly, ,, message], [,, message, authentication], [message, authentication, achieved], [authentication, achieved, MAC], [achieved, MAC, known], [MAC, known, keyed], [known, keyed, hash], [keyed, hash, function], [hash, function, .]]

>> Noun Phrases are: 
[message authentication, a MAC, keyed hash function]

>> Named Entities are: 
[('MAC', 'ORG')]


============================ Sentence 58 =============================

MACs are used between two parties that share a secret key to authenticate information exchanged between those parties. 


>> Tokens are: 
[MACs, parties, share, secret, key, authenticate, information, exchanged, parties, .] 

>> PoS Tags are: 
[('MACs', 'NOUN'), ('parties', 'NOUN'), ('share', 'VERB'), ('secret', 'ADJ'), ('key', 'NOUN'), ('authenticate', 'VERB'), ('information', 'NOUN'), ('exchanged', 'VERB'), ('parties', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('MACs', 'nsubjpass'), ('parties', 'pobj'), ('share', 'relcl'), ('secret', 'amod'), ('key', 'dobj'), ('authenticate', 'advcl'), ('information', 'dobj'), ('exchanged', 'acl'), ('parties', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[MACs, parties], [parties, share], [share, secret], [secret, key], [key, authenticate], [authenticate, information], [information, exchanged], [exchanged, parties], [parties, .]]

>> Trigrams: 
[[MACs, parties, share], [parties, share, secret], [share, secret, key], [secret, key, authenticate], [key, authenticate, information], [authenticate, information, exchanged], [information, exchanged, parties], [exchanged, parties, .]]

>> Noun Phrases are: 
[MACs, two parties, a secret key, information, those parties]

>> Named Entities are: 
[('two', 'CARDINAL')]


============================ Sentence 59 =============================

A MAC function takes as input a secret key and a data block and produces a hash value, referred to as the MAC. 


>> Tokens are: 
[MAC, function, takes, input, secret, key, data, block, produces, hash, value, ,, referred, MAC, .] 

>> PoS Tags are: 
[('MAC', 'PROPN'), ('function', 'NOUN'), ('takes', 'VERB'), ('input', 'NOUN'), ('secret', 'ADJ'), ('key', 'NOUN'), ('data', 'NOUN'), ('block', 'NOUN'), ('produces', 'VERB'), ('hash', 'NOUN'), ('value', 'NOUN'), (',', 'PUNCT'), ('referred', 'VERB'), ('MAC', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('MAC', 'compound'), ('function', 'nsubj'), ('takes', 'ROOT'), ('input', 'dobj'), ('secret', 'amod'), ('key', 'dobj'), ('data', 'compound'), ('block', 'conj'), ('produces', 'conj'), ('hash', 'compound'), ('value', 'dobj'), (',', 'punct'), ('referred', 'conj'), ('MAC', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[MAC, function], [function, takes], [takes, input], [input, secret], [secret, key], [key, data], [data, block], [block, produces], [produces, hash], [hash, value], [value, ,], [,, referred], [referred, MAC], [MAC, .]]

>> Trigrams: 
[[MAC, function, takes], [function, takes, input], [takes, input, secret], [input, secret, key], [secret, key, data], [key, data, block], [data, block, produces], [block, produces, hash], [produces, hash, value], [hash, value, ,], [value, ,, referred], [,, referred, MAC], [referred, MAC, .]]

>> Noun Phrases are: 
[A MAC function, as input, a secret key, a data block, a hash value, the MAC]

>> Named Entities are: 
[('MAC', 'ORG'), ('MAC', 'ORG')]


============================ Sentence 60 =============================

The combination of hashing and encryption results in an overall function that is, in fact, a MAC (Method -2 in previous slide). 


>> Tokens are: 
[combination, hashing, encryption, results, overall, function, ,, fact, ,, MAC, (, Method, -2, previous, slide, ), .] 

>> PoS Tags are: 
[('combination', 'NOUN'), ('hashing', 'NOUN'), ('encryption', 'NOUN'), ('results', 'NOUN'), ('overall', 'ADJ'), ('function', 'NOUN'), (',', 'PUNCT'), ('fact', 'NOUN'), (',', 'PUNCT'), ('MAC', 'PROPN'), ('(', 'PUNCT'), ('Method', 'PROPN'), ('-2', 'NOUN'), ('previous', 'ADJ'), ('slide', 'NOUN'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('combination', 'ROOT'), ('hashing', 'pobj'), ('encryption', 'compound'), ('results', 'conj'), ('overall', 'amod'), ('function', 'pobj'), (',', 'punct'), ('fact', 'pobj'), (',', 'punct'), ('MAC', 'appos'), ('(', 'punct'), ('Method', 'compound'), ('-2', 'parataxis'), ('previous', 'amod'), ('slide', 'pobj'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[combination, hashing], [hashing, encryption], [encryption, results], [results, overall], [overall, function], [function, ,], [,, fact], [fact, ,], [,, MAC], [MAC, (], [(, Method], [Method, -2], [-2, previous], [previous, slide], [slide, )], [), .]]

>> Trigrams: 
[[combination, hashing, encryption], [hashing, encryption, results], [encryption, results, overall], [results, overall, function], [overall, function, ,], [function, ,, fact], [,, fact, ,], [fact, ,, MAC], [,, MAC, (], [MAC, (, Method], [(, Method, -2], [Method, -2, previous], [-2, previous, slide], [previous, slide, )], [slide, ), .]]

>> Noun Phrases are: 
[The combination, hashing, encryption results, an overall function, fact, a MAC, previous slide]

>> Named Entities are: 
[('MAC', 'ORG'), ('Method', 'GPE')]


============================ Sentence 61 =============================

   Unit-5   


>> Tokens are: 
[   , Unit-5,  ] 

>> PoS Tags are: 
[('   ', 'SPACE'), ('Unit-5', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('   ', 'nummod'), ('Unit-5', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[   , Unit-5], [Unit-5,  ]]

>> Trigrams: 
[[   , Unit-5,  ]]

>> Noun Phrases are: 
[   Unit-5]

>> Named Entities are: 
[]


============================ Sentence 62 =============================

Cryptographic Hash Functions                                 Darshan Institute of Engineering & Technology   ‹#›   


>> Tokens are: 
[Cryptographic, Hash, Functions,                                 , Darshan, Institute, Engineering, &, Technology,   , ‹#›,  ] 

>> PoS Tags are: 
[('Cryptographic', 'PROPN'), ('Hash', 'PROPN'), ('Functions', 'PROPN'), ('                                ', 'SPACE'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('Engineering', 'PROPN'), ('&', 'CCONJ'), ('Technology', 'PROPN'), ('  ', 'SPACE'), ('‹#›', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Cryptographic', 'compound'), ('Hash', 'compound'), ('Functions', 'compound'), ('                                ', 'nsubj'), ('Darshan', 'compound'), ('Institute', 'appos'), ('Engineering', 'pobj'), ('&', 'cc'), ('Technology', 'conj'), ('  ', 'conj'), ('‹#›', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[Cryptographic, Hash], [Hash, Functions], [Functions,                                 ], [                                , Darshan], [Darshan, Institute], [Institute, Engineering], [Engineering, &], [&, Technology], [Technology,   ], [  , ‹#›], [‹#›,  ]]

>> Trigrams: 
[[Cryptographic, Hash, Functions], [Hash, Functions,                                 ], [Functions,                                 , Darshan], [                                , Darshan, Institute], [Darshan, Institute, Engineering], [Institute, Engineering, &], [Engineering, &, Technology], [&, Technology,   ], [Technology,   , ‹#›], [  , ‹#›,  ]]

>> Noun Phrases are: 
[Darshan Institute, Engineering, Technology]

>> Named Entities are: 
[('Functions', 'PERSON'), ('Darshan Institute of Engineering & Technology', 'ORG')]


============================ Sentence 63 =============================

Digital Signature 


>> Tokens are: 
[Digital, Signature] 

>> PoS Tags are: 
[('Digital', 'PROPN'), ('Signature', 'PROPN')] 

>> Dependency Tags are: 
[('Digital', 'compound'), ('Signature', 'ROOT')]

>> Bigrams: 
[[Digital, Signature]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Digital Signature]

>> Named Entities are: 
[('Digital', 'ORG')]


============================ Sentence 64 =============================

A digital signature is a mathematical technique used to validate the authenticity and integrity of a message, software or digital document. 


>> Tokens are: 
[digital, signature, mathematical, technique, validate, authenticity, integrity, message, ,, software, digital, document, .] 

>> PoS Tags are: 
[('digital', 'ADJ'), ('signature', 'NOUN'), ('mathematical', 'ADJ'), ('technique', 'NOUN'), ('validate', 'VERB'), ('authenticity', 'NOUN'), ('integrity', 'NOUN'), ('message', 'NOUN'), (',', 'PUNCT'), ('software', 'NOUN'), ('digital', 'ADJ'), ('document', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('digital', 'amod'), ('signature', 'nsubj'), ('mathematical', 'amod'), ('technique', 'attr'), ('validate', 'xcomp'), ('authenticity', 'dobj'), ('integrity', 'conj'), ('message', 'pobj'), (',', 'punct'), ('software', 'conj'), ('digital', 'amod'), ('document', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[digital, signature], [signature, mathematical], [mathematical, technique], [technique, validate], [validate, authenticity], [authenticity, integrity], [integrity, message], [message, ,], [,, software], [software, digital], [digital, document], [document, .]]

>> Trigrams: 
[[digital, signature, mathematical], [signature, mathematical, technique], [mathematical, technique, validate], [technique, validate, authenticity], [validate, authenticity, integrity], [authenticity, integrity, message], [integrity, message, ,], [message, ,, software], [,, software, digital], [software, digital, document], [digital, document, .]]

>> Noun Phrases are: 
[A digital signature, a mathematical technique, the authenticity, integrity, a message, software, digital document]

>> Named Entities are: 
[]


============================ Sentence 65 =============================

The operation of the digital signature is similar to that of the MAC. 


>> Tokens are: 
[operation, digital, signature, similar, MAC, .] 

>> PoS Tags are: 
[('operation', 'NOUN'), ('digital', 'ADJ'), ('signature', 'NOUN'), ('similar', 'ADJ'), ('MAC', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('operation', 'nsubj'), ('digital', 'amod'), ('signature', 'pobj'), ('similar', 'acomp'), ('MAC', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[operation, digital], [digital, signature], [signature, similar], [similar, MAC], [MAC, .]]

>> Trigrams: 
[[operation, digital, signature], [digital, signature, similar], [signature, similar, MAC], [similar, MAC, .]]

>> Noun Phrases are: 
[The operation, the digital signature, the MAC]

>> Named Entities are: 
[('MAC', 'ORG')]


============================ Sentence 66 =============================

In the case of the digital signature, the hash value of a message is encrypted with a user’s private key. 


>> Tokens are: 
[case, digital, signature, ,, hash, value, message, encrypted, user, private, key, .] 

>> PoS Tags are: 
[('case', 'NOUN'), ('digital', 'ADJ'), ('signature', 'NOUN'), (',', 'PUNCT'), ('hash', 'NOUN'), ('value', 'NOUN'), ('message', 'NOUN'), ('encrypted', 'VERB'), ('user', 'NOUN'), ('private', 'ADJ'), ('key', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('case', 'pobj'), ('digital', 'amod'), ('signature', 'pobj'), (',', 'punct'), ('hash', 'compound'), ('value', 'nsubjpass'), ('message', 'pobj'), ('encrypted', 'ROOT'), ('user', 'poss'), ('private', 'amod'), ('key', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[case, digital], [digital, signature], [signature, ,], [,, hash], [hash, value], [value, message], [message, encrypted], [encrypted, user], [user, private], [private, key], [key, .]]

>> Trigrams: 
[[case, digital, signature], [digital, signature, ,], [signature, ,, hash], [,, hash, value], [hash, value, message], [value, message, encrypted], [message, encrypted, user], [encrypted, user, private], [user, private, key], [private, key, .]]

>> Noun Phrases are: 
[the case, the digital signature, the hash value, a message, a user’s private key]

>> Named Entities are: 
[]


============================ Sentence 67 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 68 =============================

Anyone who knows the user’s public key can verify the integrity of the message that is associated with the digital signature. 


>> Tokens are: 
[knows, user, public, key, verify, integrity, message, associated, digital, signature, .] 

>> PoS Tags are: 
[('knows', 'VERB'), ('user', 'NOUN'), ('public', 'ADJ'), ('key', 'NOUN'), ('verify', 'VERB'), ('integrity', 'NOUN'), ('message', 'NOUN'), ('associated', 'VERB'), ('digital', 'ADJ'), ('signature', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('knows', 'relcl'), ('user', 'poss'), ('public', 'amod'), ('key', 'dobj'), ('verify', 'ROOT'), ('integrity', 'dobj'), ('message', 'pobj'), ('associated', 'relcl'), ('digital', 'amod'), ('signature', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[knows, user], [user, public], [public, key], [key, verify], [verify, integrity], [integrity, message], [message, associated], [associated, digital], [digital, signature], [signature, .]]

>> Trigrams: 
[[knows, user, public], [user, public, key], [public, key, verify], [key, verify, integrity], [verify, integrity, message], [integrity, message, associated], [message, associated, digital], [associated, digital, signature], [digital, signature, .]]

>> Noun Phrases are: 
[Anyone, who, the user’s public key, the integrity, the message, the digital signature]

>> Named Entities are: 
[]


============================ Sentence 69 =============================

  Unit-5   


>> Tokens are: 
[  , Unit-5,  ] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('Unit-5', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'nsubj'), ('Unit-5', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[  , Unit-5], [Unit-5,  ]]

>> Trigrams: 
[[  , Unit-5,  ]]

>> Noun Phrases are: 
[  Unit-5]

>> Named Entities are: 
[]


============================ Sentence 70 =============================

Cryptographic Hash Functions                                 Darshan Institute of Engineering & Technology   ‹#›   


>> Tokens are: 
[Cryptographic, Hash, Functions,                                 , Darshan, Institute, Engineering, &, Technology,   , ‹#›,  ] 

>> PoS Tags are: 
[('Cryptographic', 'PROPN'), ('Hash', 'PROPN'), ('Functions', 'PROPN'), ('                                ', 'SPACE'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('Engineering', 'PROPN'), ('&', 'CCONJ'), ('Technology', 'PROPN'), ('  ', 'SPACE'), ('‹#›', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Cryptographic', 'compound'), ('Hash', 'compound'), ('Functions', 'compound'), ('                                ', 'ROOT'), ('Darshan', 'compound'), ('Institute', 'appos'), ('Engineering', 'pobj'), ('&', 'cc'), ('Technology', 'conj'), ('  ', 'conj'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[Cryptographic, Hash], [Hash, Functions], [Functions,                                 ], [                                , Darshan], [Darshan, Institute], [Institute, Engineering], [Engineering, &], [&, Technology], [Technology,   ], [  , ‹#›], [‹#›,  ]]

>> Trigrams: 
[[Cryptographic, Hash, Functions], [Hash, Functions,                                 ], [Functions,                                 , Darshan], [                                , Darshan, Institute], [Darshan, Institute, Engineering], [Institute, Engineering, &], [Engineering, &, Technology], [&, Technology,   ], [Technology,   , ‹#›], [  , ‹#›,  ]]

>> Noun Phrases are: 
[Darshan Institute, Engineering, Technology]

>> Named Entities are: 
[('Functions', 'PERSON'), ('Darshan Institute of Engineering & Technology', 'ORG')]


============================ Sentence 71 =============================

Digital Signature method - 1 The hash code is encrypted, using public-key encryption with the sender’s private key.   


>> Tokens are: 
[Digital, Signature, method, -, 1, hash, code, encrypted, ,, public, -, key, encryption, sender, private, key, .,  ] 

>> PoS Tags are: 
[('Digital', 'PROPN'), ('Signature', 'PROPN'), ('method', 'NOUN'), ('-', 'PUNCT'), ('1', 'NUM'), ('hash', 'NOUN'), ('code', 'NOUN'), ('encrypted', 'VERB'), (',', 'PUNCT'), ('public', 'ADJ'), ('-', 'PUNCT'), ('key', 'ADJ'), ('encryption', 'NOUN'), ('sender', 'NOUN'), ('private', 'ADJ'), ('key', 'NOUN'), ('.', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Digital', 'compound'), ('Signature', 'compound'), ('method', 'nsubjpass'), ('-', 'punct'), ('1', 'appos'), ('hash', 'compound'), ('code', 'nsubjpass'), ('encrypted', 'ROOT'), (',', 'punct'), ('public', 'amod'), ('-', 'punct'), ('key', 'amod'), ('encryption', 'dobj'), ('sender', 'poss'), ('private', 'amod'), ('key', 'pobj'), ('.', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[Digital, Signature], [Signature, method], [method, -], [-, 1], [1, hash], [hash, code], [code, encrypted], [encrypted, ,], [,, public], [public, -], [-, key], [key, encryption], [encryption, sender], [sender, private], [private, key], [key, .], [.,  ]]

>> Trigrams: 
[[Digital, Signature, method], [Signature, method, -], [method, -, 1], [-, 1, hash], [1, hash, code], [hash, code, encrypted], [code, encrypted, ,], [encrypted, ,, public], [,, public, -], [public, -, key], [-, key, encryption], [key, encryption, sender], [encryption, sender, private], [sender, private, key], [private, key, .], [key, .,  ]]

>> Noun Phrases are: 
[Digital Signature method, The hash code, public-key encryption, the sender’s private key]

>> Named Entities are: 
[('Digital', 'ORG')]


============================ Sentence 72 =============================

This provides authentication. 


>> Tokens are: 
[provides, authentication, .] 

>> PoS Tags are: 
[('provides', 'VERB'), ('authentication', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('provides', 'ROOT'), ('authentication', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[provides, authentication], [authentication, .]]

>> Trigrams: 
[[provides, authentication, .]]

>> Noun Phrases are: 
[authentication]

>> Named Entities are: 
[]


============================ Sentence 73 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 74 =============================

It also provides a digital signature, because only the sender could have produced the encrypted hash code. 


>> Tokens are: 
[provides, digital, signature, ,, sender, produced, encrypted, hash, code, .] 

>> PoS Tags are: 
[('provides', 'VERB'), ('digital', 'ADJ'), ('signature', 'NOUN'), (',', 'PUNCT'), ('sender', 'NOUN'), ('produced', 'VERB'), ('encrypted', 'ADJ'), ('hash', 'NOUN'), ('code', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('provides', 'ROOT'), ('digital', 'amod'), ('signature', 'dobj'), (',', 'punct'), ('sender', 'nsubj'), ('produced', 'advcl'), ('encrypted', 'amod'), ('hash', 'compound'), ('code', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[provides, digital], [digital, signature], [signature, ,], [,, sender], [sender, produced], [produced, encrypted], [encrypted, hash], [hash, code], [code, .]]

>> Trigrams: 
[[provides, digital, signature], [digital, signature, ,], [signature, ,, sender], [,, sender, produced], [sender, produced, encrypted], [produced, encrypted, hash], [encrypted, hash, code], [hash, code, .]]

>> Noun Phrases are: 
[It, a digital signature, only the sender, the encrypted hash code]

>> Named Entities are: 
[]


============================ Sentence 75 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 76 =============================

H M    


>> Tokens are: 
[H, M,   ] 

>> PoS Tags are: 
[('H', 'NOUN'), ('M', 'PROPN'), ('  ', 'SPACE')] 

>> Dependency Tags are: 
[('H', 'compound'), ('M', 'compound'), ('  ', 'ROOT')]

>> Bigrams: 
[[H, M], [M,   ]]

>> Trigrams: 
[[H, M,   ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 77 =============================

Source A Destination B E PRa ll M  E(PRa, H(M)) 


>> Tokens are: 
[Source, Destination, B, E, PRa, ll, M,  , E(PRa, ,, H(M, ), )] 

>> PoS Tags are: 
[('Source', 'NOUN'), ('Destination', 'PROPN'), ('B', 'PROPN'), ('E', 'PROPN'), ('PRa', 'PROPN'), ('ll', 'AUX'), ('M', 'PROPN'), (' ', 'SPACE'), ('E(PRa', 'PROPN'), (',', 'PUNCT'), ('H(M', 'PROPN'), (')', 'PUNCT'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('Source', 'nmod'), ('Destination', 'compound'), ('B', 'compound'), ('E', 'compound'), ('PRa', 'nsubj'), ('ll', 'ROOT'), ('M', 'compound'), (' ', 'compound'), ('E(PRa', 'attr'), (',', 'punct'), ('H(M', 'appos'), (')', 'punct'), (')', 'punct')]

>> Bigrams: 
[[Source, Destination], [Destination, B], [B, E], [E, PRa], [PRa, ll], [ll, M], [M,  ], [ , E(PRa], [E(PRa, ,], [,, H(M], [H(M, )], [), )]]

>> Trigrams: 
[[Source, Destination, B], [Destination, B, E], [B, E, PRa], [E, PRa, ll], [PRa, ll, M], [ll, M,  ], [M,  , E(PRa], [ , E(PRa, ,], [E(PRa, ,, H(M], [,, H(M, )], [H(M, ), )]]

>> Noun Phrases are: 
[Source A Destination B E PRa, M  E(PRa, H(M]

>> Named Entities are: 
[('E(PRa', 'GPE')]


============================ Sentence 78 =============================

H D PUa   


>> Tokens are: 
[H, D, PUa,  ] 

>> PoS Tags are: 
[('H', 'NOUN'), ('D', 'PROPN'), ('PUa', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('H', 'compound'), ('D', 'compound'), ('PUa', 'ROOT'), (' ', 'dobj')]

>> Bigrams: 
[[H, D], [D, PUa], [PUa,  ]]

>> Trigrams: 
[[H, D, PUa], [D, PUa,  ]]

>> Noun Phrases are: 
[H D PUa]

>> Named Entities are: 
[]


============================ Sentence 79 =============================

Compare    Unit-5   


>> Tokens are: 
[Compare,    , Unit-5,  ] 

>> PoS Tags are: 
[('Compare', 'VERB'), ('   ', 'SPACE'), ('Unit-5', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Compare', 'ROOT'), ('   ', 'dobj'), ('Unit-5', 'dobj'), (' ', 'punct')]

>> Bigrams: 
[[Compare,    ], [   , Unit-5], [Unit-5,  ]]

>> Trigrams: 
[[Compare,    , Unit-5], [   , Unit-5,  ]]

>> Noun Phrases are: 
[Unit-5]

>> Named Entities are: 
[]


============================ Sentence 80 =============================

Cryptographic Hash Functions                                 Darshan Institute of Engineering & Technology   ‹#›   


>> Tokens are: 
[Cryptographic, Hash, Functions,                                 , Darshan, Institute, Engineering, &, Technology,   , ‹#›,  ] 

>> PoS Tags are: 
[('Cryptographic', 'PROPN'), ('Hash', 'PROPN'), ('Functions', 'PROPN'), ('                                ', 'SPACE'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('Engineering', 'PROPN'), ('&', 'CCONJ'), ('Technology', 'PROPN'), ('  ', 'SPACE'), ('‹#›', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Cryptographic', 'compound'), ('Hash', 'compound'), ('Functions', 'compound'), ('                                ', 'ROOT'), ('Darshan', 'compound'), ('Institute', 'appos'), ('Engineering', 'pobj'), ('&', 'cc'), ('Technology', 'conj'), ('  ', 'conj'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[Cryptographic, Hash], [Hash, Functions], [Functions,                                 ], [                                , Darshan], [Darshan, Institute], [Institute, Engineering], [Engineering, &], [&, Technology], [Technology,   ], [  , ‹#›], [‹#›,  ]]

>> Trigrams: 
[[Cryptographic, Hash, Functions], [Hash, Functions,                                 ], [Functions,                                 , Darshan], [                                , Darshan, Institute], [Darshan, Institute, Engineering], [Institute, Engineering, &], [Engineering, &, Technology], [&, Technology,   ], [Technology,   , ‹#›], [  , ‹#›,  ]]

>> Noun Phrases are: 
[Darshan Institute, Engineering, Technology]

>> Named Entities are: 
[('Functions', 'PERSON'), ('Darshan Institute of Engineering & Technology', 'ORG')]


============================ Sentence 81 =============================

Digital Signature method - 2 If confidentiality as well as a digital signature is desired, then the message plus the private-key-encrypted hash code can be encrypted using a symmetric  secret key. 


>> Tokens are: 
[Digital, Signature, method, -, 2, confidentiality, digital, signature, desired, ,, message, plus, private, -, key, -, encrypted, hash, code, encrypted, symmetric,  , secret, key, .] 

>> PoS Tags are: 
[('Digital', 'PROPN'), ('Signature', 'PROPN'), ('method', 'NOUN'), ('-', 'PUNCT'), ('2', 'NUM'), ('confidentiality', 'NOUN'), ('digital', 'ADJ'), ('signature', 'NOUN'), ('desired', 'VERB'), (',', 'PUNCT'), ('message', 'NOUN'), ('plus', 'CCONJ'), ('private', 'ADJ'), ('-', 'PUNCT'), ('key', 'ADV'), ('-', 'PUNCT'), ('encrypted', 'ADJ'), ('hash', 'NOUN'), ('code', 'NOUN'), ('encrypted', 'VERB'), ('symmetric', 'ADJ'), (' ', 'SPACE'), ('secret', 'ADJ'), ('key', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Digital', 'compound'), ('Signature', 'compound'), ('method', 'nsubjpass'), ('-', 'punct'), ('2', 'appos'), ('confidentiality', 'pobj'), ('digital', 'amod'), ('signature', 'nsubjpass'), ('desired', 'advcl'), (',', 'punct'), ('message', 'nsubjpass'), ('plus', 'cc'), ('private', 'amod'), ('-', 'punct'), ('key', 'advmod'), ('-', 'punct'), ('encrypted', 'amod'), ('hash', 'compound'), ('code', 'conj'), ('encrypted', 'ROOT'), ('symmetric', 'amod'), (' ', 'nmod'), ('secret', 'amod'), ('key', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Digital, Signature], [Signature, method], [method, -], [-, 2], [2, confidentiality], [confidentiality, digital], [digital, signature], [signature, desired], [desired, ,], [,, message], [message, plus], [plus, private], [private, -], [-, key], [key, -], [-, encrypted], [encrypted, hash], [hash, code], [code, encrypted], [encrypted, symmetric], [symmetric,  ], [ , secret], [secret, key], [key, .]]

>> Trigrams: 
[[Digital, Signature, method], [Signature, method, -], [method, -, 2], [-, 2, confidentiality], [2, confidentiality, digital], [confidentiality, digital, signature], [digital, signature, desired], [signature, desired, ,], [desired, ,, message], [,, message, plus], [message, plus, private], [plus, private, -], [private, -, key], [-, key, -], [key, -, encrypted], [-, encrypted, hash], [encrypted, hash, code], [hash, code, encrypted], [code, encrypted, symmetric], [encrypted, symmetric,  ], [symmetric,  , secret], [ , secret, key], [secret, key, .]]

>> Noun Phrases are: 
[Digital Signature method, confidentiality, a digital signature, the message, the private-key-encrypted hash code, a symmetric  secret key]

>> Named Entities are: 
[('Digital', 'ORG')]


============================ Sentence 82 =============================

M    


>> Tokens are: 
[M,   ] 

>> PoS Tags are: 
[('M', 'NOUN'), ('  ', 'SPACE')] 

>> Dependency Tags are: 
[('M', 'compound'), ('  ', 'ROOT')]

>> Bigrams: 
[[M,   ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 83 =============================

Source A Destination B E ll M  E(Pra, H(M)) 


>> Tokens are: 
[Source, Destination, B, E, ll, M,  , E(Pra, ,, H(M, ), )] 

>> PoS Tags are: 
[('Source', 'NOUN'), ('Destination', 'PROPN'), ('B', 'PROPN'), ('E', 'NOUN'), ('ll', 'NOUN'), ('M', 'PROPN'), (' ', 'SPACE'), ('E(Pra', 'PROPN'), (',', 'PUNCT'), ('H(M', 'PROPN'), (')', 'PUNCT'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('Source', 'compound'), ('Destination', 'compound'), ('B', 'compound'), ('E', 'ROOT'), ('ll', 'nmod'), ('M', 'compound'), (' ', 'compound'), ('E(Pra', 'appos'), (',', 'punct'), ('H(M', 'appos'), (')', 'punct'), (')', 'punct')]

>> Bigrams: 
[[Source, Destination], [Destination, B], [B, E], [E, ll], [ll, M], [M,  ], [ , E(Pra], [E(Pra, ,], [,, H(M], [H(M, )], [), )]]

>> Trigrams: 
[[Source, Destination, B], [Destination, B, E], [B, E, ll], [E, ll, M], [ll, M,  ], [M,  , E(Pra], [ , E(Pra, ,], [E(Pra, ,, H(M], [,, H(M, )], [H(M, ), )]]

>> Noun Phrases are: 
[Source A Destination B E, ll M  E(Pra, H(M]

>> Named Entities are: 
[]


============================ Sentence 84 =============================

H Compare   


>> Tokens are: 
[H, Compare,  ] 

>> PoS Tags are: 
[('H', 'NOUN'), ('Compare', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('H', 'nsubj'), ('Compare', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[H, Compare], [Compare,  ]]

>> Trigrams: 
[[H, Compare,  ]]

>> Noun Phrases are: 
[H]

>> Named Entities are: 
[('H Compare  ', 'ORG')]


============================ Sentence 85 =============================

E K  D K E (K, [ M || E(Pra, H(M)]) 


>> Tokens are: 
[E, K,  , D, K, E, (, K, ,, [, M, ||, E(Pra, ,, H(M, ), ], )] 

>> PoS Tags are: 
[('E', 'NOUN'), ('K', 'PROPN'), (' ', 'SPACE'), ('D', 'PROPN'), ('K', 'PROPN'), ('E', 'PROPN'), ('(', 'PUNCT'), ('K', 'NOUN'), (',', 'PUNCT'), ('[', 'PUNCT'), ('M', 'PROPN'), ('||', 'PROPN'), ('E(Pra', 'PROPN'), (',', 'PUNCT'), ('H(M', 'PROPN'), (')', 'PUNCT'), (']', 'PUNCT'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('E', 'nmod'), ('K', 'nmod'), (' ', 'compound'), ('D', 'compound'), ('K', 'compound'), ('E', 'ROOT'), ('(', 'punct'), ('K', 'appos'), (',', 'punct'), ('[', 'punct'), ('M', 'compound'), ('||', 'compound'), ('E(Pra', 'appos'), (',', 'punct'), ('H(M', 'npadvmod'), (')', 'punct'), (']', 'punct'), (')', 'punct')]

>> Bigrams: 
[[E, K], [K,  ], [ , D], [D, K], [K, E], [E, (], [(, K], [K, ,], [,, [], [[, M], [M, ||], [||, E(Pra], [E(Pra, ,], [,, H(M], [H(M, )], [), ]], [], )]]

>> Trigrams: 
[[E, K,  ], [K,  , D], [ , D, K], [D, K, E], [K, E, (], [E, (, K], [(, K, ,], [K, ,, [], [,, [, M], [[, M, ||], [M, ||, E(Pra], [||, E(Pra, ,], [E(Pra, ,, H(M], [,, H(M, )], [H(M, ), ]], [), ], )]]

>> Noun Phrases are: 
[E K  D K E, (K, M || E(Pra]

>> Named Entities are: 
[]


============================ Sentence 86 =============================

H PRa D PUa    Unit-5   


>> Tokens are: 
[H, PRa, D, PUa,    , Unit-5,  ] 

>> PoS Tags are: 
[('H', 'NOUN'), ('PRa', 'PROPN'), ('D', 'PROPN'), ('PUa', 'NOUN'), ('   ', 'SPACE'), ('Unit-5', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('H', 'compound'), ('PRa', 'nmod'), ('D', 'compound'), ('PUa', 'ROOT'), ('   ', 'compound'), ('Unit-5', 'dobj'), (' ', 'punct')]

>> Bigrams: 
[[H, PRa], [PRa, D], [D, PUa], [PUa,    ], [   , Unit-5], [Unit-5,  ]]

>> Trigrams: 
[[H, PRa, D], [PRa, D, PUa], [D, PUa,    ], [PUa,    , Unit-5], [   , Unit-5,  ]]

>> Noun Phrases are: 
[H PRa D PUa,    Unit-5]

>> Named Entities are: 
[]


============================ Sentence 87 =============================

Cryptographic Hash Functions                                 Darshan Institute of Engineering & Technology   ‹#›   13   


>> Tokens are: 
[Cryptographic, Hash, Functions,                                 , Darshan, Institute, Engineering, &, Technology,   , ‹#›,   , 13,  ] 

>> PoS Tags are: 
[('Cryptographic', 'PROPN'), ('Hash', 'PROPN'), ('Functions', 'PROPN'), ('                                ', 'SPACE'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('Engineering', 'PROPN'), ('&', 'CCONJ'), ('Technology', 'PROPN'), ('  ', 'SPACE'), ('‹#›', 'VERB'), ('  ', 'SPACE'), ('13', 'NUM'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Cryptographic', 'compound'), ('Hash', 'compound'), ('Functions', 'compound'), ('                                ', 'nmod'), ('Darshan', 'compound'), ('Institute', 'appos'), ('Engineering', 'pobj'), ('&', 'cc'), ('Technology', 'conj'), ('  ', 'nsubj'), ('‹#›', 'ROOT'), ('  ', 'dobj'), ('13', 'nummod'), (' ', 'appos')]

>> Bigrams: 
[[Cryptographic, Hash], [Hash, Functions], [Functions,                                 ], [                                , Darshan], [Darshan, Institute], [Institute, Engineering], [Engineering, &], [&, Technology], [Technology,   ], [  , ‹#›], [‹#›,   ], [  , 13], [13,  ]]

>> Trigrams: 
[[Cryptographic, Hash, Functions], [Hash, Functions,                                 ], [Functions,                                 , Darshan], [                                , Darshan, Institute], [Darshan, Institute, Engineering], [Institute, Engineering, &], [Engineering, &, Technology], [&, Technology,   ], [Technology,   , ‹#›], [  , ‹#›,   ], [‹#›,   , 13], [  , 13,  ]]

>> Noun Phrases are: 
[Darshan Institute, Engineering, Technology]

>> Named Entities are: 
[('Functions', 'PERSON'), ('Darshan Institute of Engineering & Technology', 'ORG'), ('13', 'CARDINAL')]


============================ Sentence 88 =============================

Security Requirements  Disclosure Traffic analysis Masquerade Content modification Sequence modification Timing modification Source repudiation Destination repudiation   Unit-5   


>> Tokens are: 
[Security, Requirements,  , Disclosure, Traffic, analysis, Masquerade, Content, modification, Sequence, modification, Timing, modification, Source, repudiation, Destination, repudiation,   , Unit-5,  ] 

>> PoS Tags are: 
[('Security', 'PROPN'), ('Requirements', 'PROPN'), (' ', 'SPACE'), ('Disclosure', 'PROPN'), ('Traffic', 'PROPN'), ('analysis', 'NOUN'), ('Masquerade', 'PROPN'), ('Content', 'PROPN'), ('modification', 'NOUN'), ('Sequence', 'NOUN'), ('modification', 'NOUN'), ('Timing', 'NOUN'), ('modification', 'NOUN'), ('Source', 'NOUN'), ('repudiation', 'NOUN'), ('Destination', 'NOUN'), ('repudiation', 'NOUN'), ('  ', 'SPACE'), ('Unit-5', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Security', 'compound'), ('Requirements', 'poss'), (' ', 'case'), ('Disclosure', 'compound'), ('Traffic', 'compound'), ('analysis', 'compound'), ('Masquerade', 'compound'), ('Content', 'compound'), ('modification', 'compound'), ('Sequence', 'compound'), ('modification', 'compound'), ('Timing', 'compound'), ('modification', 'compound'), ('Source', 'compound'), ('repudiation', 'compound'), ('Destination', 'compound'), ('repudiation', 'nsubj'), ('  ', 'appos'), ('Unit-5', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[Security, Requirements], [Requirements,  ], [ , Disclosure], [Disclosure, Traffic], [Traffic, analysis], [analysis, Masquerade], [Masquerade, Content], [Content, modification], [modification, Sequence], [Sequence, modification], [modification, Timing], [Timing, modification], [modification, Source], [Source, repudiation], [repudiation, Destination], [Destination, repudiation], [repudiation,   ], [  , Unit-5], [Unit-5,  ]]

>> Trigrams: 
[[Security, Requirements,  ], [Requirements,  , Disclosure], [ , Disclosure, Traffic], [Disclosure, Traffic, analysis], [Traffic, analysis, Masquerade], [analysis, Masquerade, Content], [Masquerade, Content, modification], [Content, modification, Sequence], [modification, Sequence, modification], [Sequence, modification, Timing], [modification, Timing, modification], [Timing, modification, Source], [modification, Source, repudiation], [Source, repudiation, Destination], [repudiation, Destination, repudiation], [Destination, repudiation,   ], [repudiation,   , Unit-5], [  , Unit-5,  ]]

>> Noun Phrases are: 
[Security Requirements  Disclosure Traffic analysis Masquerade Content modification Sequence modification Timing modification Source repudiation Destination repudiation]

>> Named Entities are: 
[('Disclosure Traffic', 'ORG'), ('Masquerade Content', 'ORG'), ('Sequence', 'ORG')]


============================ Sentence 89 =============================

Cryptographic Hash Functions                                 Darshan Institute of Engineering & Technology   ‹#›   


>> Tokens are: 
[Cryptographic, Hash, Functions,                                 , Darshan, Institute, Engineering, &, Technology,   , ‹#›,  ] 

>> PoS Tags are: 
[('Cryptographic', 'PROPN'), ('Hash', 'PROPN'), ('Functions', 'PROPN'), ('                                ', 'SPACE'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('Engineering', 'PROPN'), ('&', 'CCONJ'), ('Technology', 'PROPN'), ('  ', 'SPACE'), ('‹#›', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Cryptographic', 'compound'), ('Hash', 'compound'), ('Functions', 'compound'), ('                                ', 'ROOT'), ('Darshan', 'compound'), ('Institute', 'appos'), ('Engineering', 'pobj'), ('&', 'cc'), ('Technology', 'conj'), ('  ', 'conj'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[Cryptographic, Hash], [Hash, Functions], [Functions,                                 ], [                                , Darshan], [Darshan, Institute], [Institute, Engineering], [Engineering, &], [&, Technology], [Technology,   ], [  , ‹#›], [‹#›,  ]]

>> Trigrams: 
[[Cryptographic, Hash, Functions], [Hash, Functions,                                 ], [Functions,                                 , Darshan], [                                , Darshan, Institute], [Darshan, Institute, Engineering], [Institute, Engineering, &], [Engineering, &, Technology], [&, Technology,   ], [Technology,   , ‹#›], [  , ‹#›,  ]]

>> Noun Phrases are: 
[Darshan Institute, Engineering, Technology]

>> Named Entities are: 
[('Functions', 'PERSON'), ('Darshan Institute of Engineering & Technology', 'ORG')]


============================ Sentence 90 =============================

Requirements for hash functions Can be applied to any sized message M. Produces fixed-length output h. 


>> Tokens are: 
[Requirements, hash, functions, applied, sized, message, M., Produces, fixed, -, length, output, h.] 

>> PoS Tags are: 
[('Requirements', 'PROPN'), ('hash', 'NOUN'), ('functions', 'NOUN'), ('applied', 'VERB'), ('sized', 'ADJ'), ('message', 'NOUN'), ('M.', 'PROPN'), ('Produces', 'VERB'), ('fixed', 'VERB'), ('-', 'PUNCT'), ('length', 'NOUN'), ('output', 'NOUN'), ('h.', 'NOUN')] 

>> Dependency Tags are: 
[('Requirements', 'nsubjpass'), ('hash', 'compound'), ('functions', 'pobj'), ('applied', 'ROOT'), ('sized', 'amod'), ('message', 'pobj'), ('M.', 'nsubj'), ('Produces', 'appos'), ('fixed', 'amod'), ('-', 'punct'), ('length', 'compound'), ('output', 'dobj'), ('h.', 'punct')]

>> Bigrams: 
[[Requirements, hash], [hash, functions], [functions, applied], [applied, sized], [sized, message], [message, M.], [M., Produces], [Produces, fixed], [fixed, -], [-, length], [length, output], [output, h.]]

>> Trigrams: 
[[Requirements, hash, functions], [hash, functions, applied], [functions, applied, sized], [applied, sized, message], [sized, message, M.], [message, M., Produces], [M., Produces, fixed], [Produces, fixed, -], [fixed, -, length], [-, length, output], [length, output, h.]]

>> Noun Phrases are: 
[Requirements, hash functions, any sized message, M., fixed-length output]

>> Named Entities are: 
[]


============================ Sentence 91 =============================

It is easy to compute h=H(M) for any message M. Given hash value h is infeasible to find y such that (H(y 


>> Tokens are: 
[easy, compute, h, =, H(M, ), message, M., Given, hash, value, h, infeasible, find, y, (, H(y] 

>> PoS Tags are: 
[('easy', 'ADJ'), ('compute', 'VERB'), ('h', 'NOUN'), ('=', 'SYM'), ('H(M', 'PROPN'), (')', 'PUNCT'), ('message', 'NOUN'), ('M.', 'PROPN'), ('Given', 'VERB'), ('hash', 'NOUN'), ('value', 'NOUN'), ('h', 'NOUN'), ('infeasible', 'ADJ'), ('find', 'VERB'), ('y', 'DET'), ('(', 'PUNCT'), ('H(y', 'X')] 

>> Dependency Tags are: 
[('easy', 'acomp'), ('compute', 'xcomp'), ('h', 'npadvmod'), ('=', 'dep'), ('H(M', 'npadvmod'), (')', 'punct'), ('message', 'pobj'), ('M.', 'nsubj'), ('Given', 'acl'), ('hash', 'compound'), ('value', 'dobj'), ('h', 'dep'), ('infeasible', 'acomp'), ('find', 'xcomp'), ('y', 'dobj'), ('(', 'punct'), ('H(y', 'ccomp')]

>> Bigrams: 
[[easy, compute], [compute, h], [h, =], [=, H(M], [H(M, )], [), message], [message, M.], [M., Given], [Given, hash], [hash, value], [value, h], [h, infeasible], [infeasible, find], [find, y], [y, (], [(, H(y]]

>> Trigrams: 
[[easy, compute, h], [compute, h, =], [h, =, H(M], [=, H(M, )], [H(M, ), message], [), message, M.], [message, M., Given], [M., Given, hash], [Given, hash, value], [hash, value, h], [value, h, infeasible], [h, infeasible, find], [infeasible, find, y], [find, y, (], [y, (, H(y]]

>> Noun Phrases are: 
[It, any message, M., hash value]

>> Named Entities are: 
[]


============================ Sentence 92 =============================

) = h) 


>> Tokens are: 
[), =, h, )] 

>> PoS Tags are: 
[(')', 'PUNCT'), ('=', 'PUNCT'), ('h', 'NOUN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[(')', 'punct'), ('=', 'punct'), ('h', 'ROOT'), (')', 'punct')]

>> Bigrams: 
[[), =], [=, h], [h, )]]

>> Trigrams: 
[[), =, h], [=, h, )]]

>> Noun Phrases are: 
[) = h]

>> Named Entities are: 
[]


============================ Sentence 93 =============================

One-way property For given block x, it is computational infeasible to find         y ≠ x with H(y) = H(x) Weak collision resistance 


>> Tokens are: 
[-, way, property, given, block, x, ,, computational, infeasible, find,         , y, ≠, x, H(y, ), =, H(x, ), Weak, collision, resistance] 

>> PoS Tags are: 
[('-', 'PUNCT'), ('way', 'NOUN'), ('property', 'NOUN'), ('given', 'VERB'), ('block', 'NOUN'), ('x', 'SYM'), (',', 'PUNCT'), ('computational', 'ADJ'), ('infeasible', 'ADJ'), ('find', 'VERB'), ('        ', 'SPACE'), ('y', 'DET'), ('≠', 'PROPN'), ('x', 'SYM'), ('H(y', 'X'), (')', 'PUNCT'), ('=', 'SYM'), ('H(x', 'X'), (')', 'PUNCT'), ('Weak', 'ADJ'), ('collision', 'NOUN'), ('resistance', 'NOUN')] 

>> Dependency Tags are: 
[('-', 'punct'), ('way', 'compound'), ('property', 'dep'), ('given', 'prep'), ('block', 'dobj'), ('x', 'punct'), (',', 'punct'), ('computational', 'amod'), ('infeasible', 'acomp'), ('find', 'xcomp'), ('        ', 'compound'), ('y', 'det'), ('≠', 'dobj'), ('x', 'punct'), ('H(y', 'pobj'), (')', 'punct'), ('=', 'compound'), ('H(x', 'punct'), (')', 'punct'), ('Weak', 'amod'), ('collision', 'compound'), ('resistance', 'attr')]

>> Bigrams: 
[[-, way], [way, property], [property, given], [given, block], [block, x], [x, ,], [,, computational], [computational, infeasible], [infeasible, find], [find,         ], [        , y], [y, ≠], [≠, x], [x, H(y], [H(y, )], [), =], [=, H(x], [H(x, )], [), Weak], [Weak, collision], [collision, resistance]]

>> Trigrams: 
[[-, way, property], [way, property, given], [property, given, block], [given, block, x], [block, x, ,], [x, ,, computational], [,, computational, infeasible], [computational, infeasible, find], [infeasible, find,         ], [find,         , y], [        , y, ≠], [y, ≠, x], [≠, x, H(y], [x, H(y, )], [H(y, ), =], [), =, H(x], [=, H(x, )], [H(x, ), Weak], [), Weak, collision], [Weak, collision, resistance]]

>> Noun Phrases are: 
[block, it,         y ≠, Weak collision resistance]

>> Named Entities are: 
[('One', 'CARDINAL')]


============================ Sentence 94 =============================

It is computationally infeasible to find messages m1  and m2 with H(m1) = 


>> Tokens are: 
[computationally, infeasible, find, messages, m1,  , m2, H(m1, ), =] 

>> PoS Tags are: 
[('computationally', 'ADV'), ('infeasible', 'ADJ'), ('find', 'VERB'), ('messages', 'NOUN'), ('m1', 'PROPN'), (' ', 'SPACE'), ('m2', 'PROPN'), ('H(m1', 'PROPN'), (')', 'PUNCT'), ('=', 'PUNCT')] 

>> Dependency Tags are: 
[('computationally', 'advmod'), ('infeasible', 'acomp'), ('find', 'xcomp'), ('messages', 'dobj'), ('m1', 'compound'), (' ', 'appos'), ('m2', 'conj'), ('H(m1', 'pobj'), (')', 'punct'), ('=', 'punct')]

>> Bigrams: 
[[computationally, infeasible], [infeasible, find], [find, messages], [messages, m1], [m1,  ], [ , m2], [m2, H(m1], [H(m1, )], [), =]]

>> Trigrams: 
[[computationally, infeasible, find], [infeasible, find, messages], [find, messages, m1], [messages, m1,  ], [m1,  , m2], [ , m2, H(m1], [m2, H(m1, )], [H(m1, ), =]]

>> Noun Phrases are: 
[It, messages, m2, H(m1]

>> Named Entities are: 
[('m1  and m2', 'TIME')]


============================ Sentence 95 =============================

H(m2)   


>> Tokens are: 
[H(m2, ),  ] 

>> PoS Tags are: 
[('H(m2', 'NOUN'), (')', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('H(m2', 'ROOT'), (')', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[H(m2, )], [),  ]]

>> Trigrams: 
[[H(m2, ),  ]]

>> Noun Phrases are: 
[H(m2]

>> Named Entities are: 
[]


============================ Sentence 96 =============================

Strong collision resistance   Unit-5   


>> Tokens are: 
[Strong, collision, resistance,   , Unit-5,  ] 

>> PoS Tags are: 
[('Strong', 'ADJ'), ('collision', 'NOUN'), ('resistance', 'NOUN'), ('  ', 'SPACE'), ('Unit-5', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Strong', 'amod'), ('collision', 'compound'), ('resistance', 'nsubj'), ('  ', 'dep'), ('Unit-5', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[Strong, collision], [collision, resistance], [resistance,   ], [  , Unit-5], [Unit-5,  ]]

>> Trigrams: 
[[Strong, collision, resistance], [collision, resistance,   ], [resistance,   , Unit-5], [  , Unit-5,  ]]

>> Noun Phrases are: 
[Strong collision resistance]

>> Named Entities are: 
[]


============================ Sentence 97 =============================

Cryptographic Hash Functions                                 Darshan Institute of Engineering & Technology   ‹#›   


>> Tokens are: 
[Cryptographic, Hash, Functions,                                 , Darshan, Institute, Engineering, &, Technology,   , ‹#›,  ] 

>> PoS Tags are: 
[('Cryptographic', 'PROPN'), ('Hash', 'PROPN'), ('Functions', 'PROPN'), ('                                ', 'SPACE'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('Engineering', 'PROPN'), ('&', 'CCONJ'), ('Technology', 'PROPN'), ('  ', 'SPACE'), ('‹#›', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Cryptographic', 'compound'), ('Hash', 'compound'), ('Functions', 'compound'), ('                                ', 'nsubj'), ('Darshan', 'compound'), ('Institute', 'appos'), ('Engineering', 'pobj'), ('&', 'cc'), ('Technology', 'conj'), ('  ', 'conj'), ('‹#›', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[Cryptographic, Hash], [Hash, Functions], [Functions,                                 ], [                                , Darshan], [Darshan, Institute], [Institute, Engineering], [Engineering, &], [&, Technology], [Technology,   ], [  , ‹#›], [‹#›,  ]]

>> Trigrams: 
[[Cryptographic, Hash, Functions], [Hash, Functions,                                 ], [Functions,                                 , Darshan], [                                , Darshan, Institute], [Darshan, Institute, Engineering], [Institute, Engineering, &], [Engineering, &, Technology], [&, Technology,   ], [Technology,   , ‹#›], [  , ‹#›,  ]]

>> Noun Phrases are: 
[Darshan Institute, Engineering, Technology]

>> Named Entities are: 
[('Functions', 'PERSON'), ('Darshan Institute of Engineering & Technology', 'ORG')]


============================ Sentence 98 =============================

Simple Hash Function 


>> Tokens are: 
[Simple, Hash, Function] 

>> PoS Tags are: 
[('Simple', 'ADJ'), ('Hash', 'PROPN'), ('Function', 'PROPN')] 

>> Dependency Tags are: 
[('Simple', 'compound'), ('Hash', 'compound'), ('Function', 'ROOT')]

>> Bigrams: 
[[Simple, Hash], [Hash, Function]]

>> Trigrams: 
[[Simple, Hash, Function]]

>> Noun Phrases are: 
[Simple Hash Function]

>> Named Entities are: 
[]


============================ Sentence 99 =============================

The input (message, file, etc.) is viewed as a sequence of n-bit blocks. 


>> Tokens are: 
[input, (, message, ,, file, ,, etc, ., ), viewed, sequence, n, -, bit, blocks, .] 

>> PoS Tags are: 
[('input', 'NOUN'), ('(', 'PUNCT'), ('message', 'NOUN'), (',', 'PUNCT'), ('file', 'NOUN'), (',', 'PUNCT'), ('etc', 'X'), ('.', 'X'), (')', 'PUNCT'), ('viewed', 'VERB'), ('sequence', 'NOUN'), ('n', 'CCONJ'), ('-', 'PUNCT'), ('bit', 'NOUN'), ('blocks', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('input', 'nsubjpass'), ('(', 'punct'), ('message', 'appos'), (',', 'punct'), ('file', 'conj'), (',', 'punct'), ('etc', 'conj'), ('.', 'conj'), (')', 'punct'), ('viewed', 'ROOT'), ('sequence', 'pobj'), ('n', 'nummod'), ('-', 'punct'), ('bit', 'compound'), ('blocks', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[input, (], [(, message], [message, ,], [,, file], [file, ,], [,, etc], [etc, .], [., )], [), viewed], [viewed, sequence], [sequence, n], [n, -], [-, bit], [bit, blocks], [blocks, .]]

>> Trigrams: 
[[input, (, message], [(, message, ,], [message, ,, file], [,, file, ,], [file, ,, etc], [,, etc, .], [etc, ., )], [., ), viewed], [), viewed, sequence], [viewed, sequence, n], [sequence, n, -], [n, -, bit], [-, bit, blocks], [bit, blocks, .]]

>> Noun Phrases are: 
[The input, message, file, a sequence, n-bit blocks]

>> Named Entities are: 
[]


============================ Sentence 100 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 101 =============================

The input is processed one block at a time in an iterative fashion to produce an n-bit hash function. 


>> Tokens are: 
[input, processed, block, time, iterative, fashion, produce, n, -, bit, hash, function, .] 

>> PoS Tags are: 
[('input', 'NOUN'), ('processed', 'VERB'), ('block', 'NOUN'), ('time', 'NOUN'), ('iterative', 'ADJ'), ('fashion', 'NOUN'), ('produce', 'VERB'), ('n', 'CCONJ'), ('-', 'PUNCT'), ('bit', 'NOUN'), ('hash', 'NOUN'), ('function', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('input', 'nsubjpass'), ('processed', 'ROOT'), ('block', 'dobj'), ('time', 'pobj'), ('iterative', 'amod'), ('fashion', 'pobj'), ('produce', 'advcl'), ('n', 'nummod'), ('-', 'punct'), ('bit', 'compound'), ('hash', 'compound'), ('function', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[input, processed], [processed, block], [block, time], [time, iterative], [iterative, fashion], [fashion, produce], [produce, n], [n, -], [-, bit], [bit, hash], [hash, function], [function, .]]

>> Trigrams: 
[[input, processed, block], [processed, block, time], [block, time, iterative], [time, iterative, fashion], [iterative, fashion, produce], [fashion, produce, n], [produce, n, -], [n, -, bit], [-, bit, hash], [bit, hash, function], [hash, function, .]]

>> Noun Phrases are: 
[The input, one block, a time, an iterative fashion, an n-bit hash function]

>> Named Entities are: 
[('one', 'CARDINAL')]


============================ Sentence 102 =============================

One of the simplest hash functions is the bit-by-bit exclusive-OR (XOR) of every block. 


>> Tokens are: 
[simplest, hash, functions, bit, -, -, bit, exclusive, -, (, XOR, ), block, .] 

>> PoS Tags are: 
[('simplest', 'ADJ'), ('hash', 'NOUN'), ('functions', 'NOUN'), ('bit', 'NOUN'), ('-', 'PUNCT'), ('-', 'PUNCT'), ('bit', 'NOUN'), ('exclusive', 'ADJ'), ('-', 'PUNCT'), ('(', 'PUNCT'), ('XOR', 'PROPN'), (')', 'PUNCT'), ('block', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('simplest', 'amod'), ('hash', 'compound'), ('functions', 'pobj'), ('bit', 'npadvmod'), ('-', 'punct'), ('-', 'punct'), ('bit', 'pobj'), ('exclusive', 'acomp'), ('-', 'punct'), ('(', 'punct'), ('XOR', 'parataxis'), (')', 'punct'), ('block', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[simplest, hash], [hash, functions], [functions, bit], [bit, -], [-, -], [-, bit], [bit, exclusive], [exclusive, -], [-, (], [(, XOR], [XOR, )], [), block], [block, .]]

>> Trigrams: 
[[simplest, hash, functions], [hash, functions, bit], [functions, bit, -], [bit, -, -], [-, -, bit], [-, bit, exclusive], [bit, exclusive, -], [exclusive, -, (], [-, (, XOR], [(, XOR, )], [XOR, ), block], [), block, .]]

>> Noun Phrases are: 
[the simplest hash functions, bit, every block]

>> Named Entities are: 
[('One', 'CARDINAL')]


============================ Sentence 103 =============================

  		 


>> Tokens are: 
[  		] 

>> PoS Tags are: 
[('  \t\t', 'SPACE')] 

>> Dependency Tags are: 
[('  \t\t', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 104 =============================

Where,  		           = ith bit of the hash code 1 ≤ i ≤ n 		          m = number of n-bit blocks in the input 		          = ith bit in jth block   		  Unit-5   


>> Tokens are: 
[,,  		           , =, ith, bit, hash, code, 1, ≤, ≤, n, 		          , m, =, number, n, -, bit, blocks, input, 		          , =, ith, bit, jth, block,   		  , Unit-5,  ] 

>> PoS Tags are: 
[(',', 'PUNCT'), (' \t\t           ', 'SPACE'), ('=', 'SYM'), ('ith', 'NOUN'), ('bit', 'NOUN'), ('hash', 'NOUN'), ('code', 'NOUN'), ('1', 'NUM'), ('≤', 'NOUN'), ('≤', 'NOUN'), ('n', 'CCONJ'), ('\t\t          ', 'SPACE'), ('m', 'VERB'), ('=', 'PUNCT'), ('number', 'NOUN'), ('n', 'CCONJ'), ('-', 'PUNCT'), ('bit', 'NOUN'), ('blocks', 'NOUN'), ('input', 'NOUN'), ('\t\t          ', 'SPACE'), ('=', 'SYM'), ('ith', 'NOUN'), ('bit', 'NOUN'), ('jth', 'NOUN'), ('block', 'VERB'), ('  \t\t  ', 'SPACE'), ('Unit-5', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[(',', 'punct'), (' \t\t           ', 'nsubj'), ('=', 'punct'), ('ith', 'compound'), ('bit', 'dep'), ('hash', 'compound'), ('code', 'pobj'), ('1', 'nummod'), ('≤', 'appos'), ('≤', 'nsubj'), ('n', 'cc'), ('\t\t          ', 'conj'), ('m', 'appos'), ('=', 'appos'), ('number', 'appos'), ('n', 'compound'), ('-', 'punct'), ('bit', 'compound'), ('blocks', 'pobj'), ('input', 'pobj'), ('\t\t          ', 'punct'), ('=', 'punct'), ('ith', 'compound'), ('bit', 'npadvmod'), ('jth', 'pobj'), ('block', 'ROOT'), ('  \t\t  ', 'compound'), ('Unit-5', 'dobj'), (' ', 'punct')]

>> Bigrams: 
[[,,  		           ], [ 		           , =], [=, ith], [ith, bit], [bit, hash], [hash, code], [code, 1], [1, ≤], [≤, ≤], [≤, n], [n, 		          ], [		          , m], [m, =], [=, number], [number, n], [n, -], [-, bit], [bit, blocks], [blocks, input], [input, 		          ], [		          , =], [=, ith], [ith, bit], [bit, jth], [jth, block], [block,   		  ], [  		  , Unit-5], [Unit-5,  ]]

>> Trigrams: 
[[,,  		           , =], [ 		           , =, ith], [=, ith, bit], [ith, bit, hash], [bit, hash, code], [hash, code, 1], [code, 1, ≤], [1, ≤, ≤], [≤, ≤, n], [≤, n, 		          ], [n, 		          , m], [		          , m, =], [m, =, number], [=, number, n], [number, n, -], [n, -, bit], [-, bit, blocks], [bit, blocks, input], [blocks, input, 		          ], [input, 		          , =], [		          , =, ith], [=, ith, bit], [ith, bit, jth], [bit, jth, block], [jth, block,   		  ], [block,   		  , Unit-5], [  		  , Unit-5,  ]]

>> Noun Phrases are: 
[the hash code, ≤, number, n-bit blocks, the input, jth,   		  Unit-5]

>> Named Entities are: 
[('1 ≤', 'QUANTITY')]


============================ Sentence 105 =============================

Cryptographic Hash Functions                                 Darshan Institute of Engineering & Technology   ‹#›  SHA -  Secure Hash Algorithm 		SHA - 1	SHA - 224	SHA - 256	SHA - 384	SHA - 512  	Message Digest Size	160	224	256	384	512  	Message Size	< 264	< 264	< 264	< 2128 


>> Tokens are: 
[Cryptographic, Hash, Functions,                                 , Darshan, Institute, Engineering, &, Technology,   , ‹#›,  , SHA, -,  , Secure, Hash, Algorithm, 		, SHA, -, 1, 	, SHA, -, 224, 	, SHA, -, 256, 	, SHA, -, 384, 	, SHA, -, 512,  	, Message, Digest, Size, 	, 160, 	, 224, 	, 256, 	, 384, 	, 512,  	, Message, Size, 	, <, 264, 	, <, 264, 	, <, 264, 	, <, 2128] 

>> PoS Tags are: 
[('Cryptographic', 'PROPN'), ('Hash', 'PROPN'), ('Functions', 'PROPN'), ('                                ', 'SPACE'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('Engineering', 'PROPN'), ('&', 'CCONJ'), ('Technology', 'PROPN'), ('  ', 'SPACE'), ('‹#›', 'VERB'), (' ', 'SPACE'), ('SHA', 'PROPN'), ('-', 'PUNCT'), (' ', 'SPACE'), ('Secure', 'VERB'), ('Hash', 'NOUN'), ('Algorithm', 'PROPN'), ('\t\t', 'SPACE'), ('SHA', 'PROPN'), ('-', 'PUNCT'), ('1', 'PROPN'), ('\t', 'SPACE'), ('SHA', 'PROPN'), ('-', 'PUNCT'), ('224', 'NUM'), ('\t', 'SPACE'), ('SHA', 'PROPN'), ('-', 'PUNCT'), ('256', 'NUM'), ('\t', 'SPACE'), ('SHA', 'PROPN'), ('-', 'PUNCT'), ('384', 'NUM'), ('\t', 'SPACE'), ('SHA', 'PROPN'), ('-', 'PUNCT'), ('512', 'NUM'), (' \t', 'SPACE'), ('Message', 'PROPN'), ('Digest', 'PROPN'), ('Size', 'PROPN'), ('\t', 'SPACE'), ('160', 'NUM'), ('\t', 'SPACE'), ('224', 'NUM'), ('\t', 'SPACE'), ('256', 'NUM'), ('\t', 'SPACE'), ('384', 'NUM'), ('\t', 'SPACE'), ('512', 'NUM'), (' \t', 'SPACE'), ('Message', 'PROPN'), ('Size', 'PROPN'), ('\t', 'SPACE'), ('<', 'SYM'), ('264', 'NUM'), ('\t', 'SPACE'), ('<', 'X'), ('264', 'NUM'), ('\t', 'SPACE'), ('<', 'X'), ('264', 'NUM'), ('\t', 'SPACE'), ('<', 'X'), ('2128', 'NUM')] 

>> Dependency Tags are: 
[('Cryptographic', 'compound'), ('Hash', 'compound'), ('Functions', 'compound'), ('                                ', 'nsubj'), ('Darshan', 'compound'), ('Institute', 'appos'), ('Engineering', 'pobj'), ('&', 'cc'), ('Technology', 'conj'), ('  ', 'conj'), ('‹#›', 'dep'), (' ', 'punct'), ('SHA', 'compound'), ('-', 'punct'), (' ', 'nsubj'), ('Secure', 'ROOT'), ('Hash', 'compound'), ('Algorithm', 'dobj'), ('\t\t', 'prep'), ('SHA', 'compound'), ('-', 'punct'), ('1', 'dobj'), ('\t', 'amod'), ('SHA', 'appos'), ('-', 'punct'), ('224', 'nummod'), ('\t', 'compound'), ('SHA', 'compound'), ('-', 'punct'), ('256', 'compound'), ('\t', 'compound'), ('SHA', 'compound'), ('-', 'punct'), ('384', 'nummod'), ('\t', 'compound'), ('SHA', 'compound'), ('-', 'punct'), ('512', 'nummod'), (' \t', 'compound'), ('Message', 'compound'), ('Digest', 'compound'), ('Size', 'compound'), ('\t', 'appos'), ('160', 'nummod'), ('\t', 'dobj'), ('224', 'dobj'), ('\t', 'dobj'), ('256', 'nummod'), ('\t', 'conj'), ('384', 'nummod'), ('\t', 'nmod'), ('512', 'nummod'), (' \t', 'compound'), ('Message', 'compound'), ('Size', 'nmod'), ('\t', 'conj'), ('<', 'dep'), ('264', 'nummod'), ('\t', 'dobj'), ('<', 'dobj'), ('264', 'punct'), ('\t', 'dobj'), ('<', 'dobj'), ('264', 'dobj'), ('\t', 'dobj'), ('<', 'punct'), ('2128', 'npadvmod')]

>> Bigrams: 
[[Cryptographic, Hash], [Hash, Functions], [Functions,                                 ], [                                , Darshan], [Darshan, Institute], [Institute, Engineering], [Engineering, &], [&, Technology], [Technology,   ], [  , ‹#›], [‹#›,  ], [ , SHA], [SHA, -], [-,  ], [ , Secure], [Secure, Hash], [Hash, Algorithm], [Algorithm, 		], [		, SHA], [SHA, -], [-, 1], [1, 	], [	, SHA], [SHA, -], [-, 224], [224, 	], [	, SHA], [SHA, -], [-, 256], [256, 	], [	, SHA], [SHA, -], [-, 384], [384, 	], [	, SHA], [SHA, -], [-, 512], [512,  	], [ 	, Message], [Message, Digest], [Digest, Size], [Size, 	], [	, 160], [160, 	], [	, 224], [224, 	], [	, 256], [256, 	], [	, 384], [384, 	], [	, 512], [512,  	], [ 	, Message], [Message, Size], [Size, 	], [	, <], [<, 264], [264, 	], [	, <], [<, 264], [264, 	], [	, <], [<, 264], [264, 	], [	, <], [<, 2128]]

>> Trigrams: 
[[Cryptographic, Hash, Functions], [Hash, Functions,                                 ], [Functions,                                 , Darshan], [                                , Darshan, Institute], [Darshan, Institute, Engineering], [Institute, Engineering, &], [Engineering, &, Technology], [&, Technology,   ], [Technology,   , ‹#›], [  , ‹#›,  ], [‹#›,  , SHA], [ , SHA, -], [SHA, -,  ], [-,  , Secure], [ , Secure, Hash], [Secure, Hash, Algorithm], [Hash, Algorithm, 		], [Algorithm, 		, SHA], [		, SHA, -], [SHA, -, 1], [-, 1, 	], [1, 	, SHA], [	, SHA, -], [SHA, -, 224], [-, 224, 	], [224, 	, SHA], [	, SHA, -], [SHA, -, 256], [-, 256, 	], [256, 	, SHA], [	, SHA, -], [SHA, -, 384], [-, 384, 	], [384, 	, SHA], [	, SHA, -], [SHA, -, 512], [-, 512,  	], [512,  	, Message], [ 	, Message, Digest], [Message, Digest, Size], [Digest, Size, 	], [Size, 	, 160], [	, 160, 	], [160, 	, 224], [	, 224, 	], [224, 	, 256], [	, 256, 	], [256, 	, 384], [	, 384, 	], [384, 	, 512], [	, 512,  	], [512,  	, Message], [ 	, Message, Size], [Message, Size, 	], [Size, 	, <], [	, <, 264], [<, 264, 	], [264, 	, <], [	, <, 264], [<, 264, 	], [264, 	, <], [	, <, 264], [<, 264, 	], [264, 	, <], [	, <, 2128]]

>> Noun Phrases are: 
[Darshan Institute, Engineering, Technology, Hash Algorithm, SHA - 1, 	SHA]

>> Named Entities are: 
[('Functions', 'PERSON'), ('Darshan Institute of Engineering & Technology', 'ORG'), ('160', 'CARDINAL'), ('224', 'CARDINAL'), ('256', 'CARDINAL'), ('384', 'CARDINAL'), ('512', 'CARDINAL'), ('264', 'CARDINAL'), ('264', 'CARDINAL')]


============================ Sentence 106 =============================

	< 2128  	Block Size	512	512	512	1024	1024  	Word Size	32	32	32	64	64  	Number of Steps	80	64	64	80	80   Unit-5   


>> Tokens are: 
[	, <, 2128,  	, Block, Size, 	, 512, 	, 512, 	, 512, 	, 1024, 	, 1024,  	, Word, Size, 	, 32, 	, 32, 	, 32, 	, 64, 	, 64,  	, Number, Steps, 	, 80, 	, 64, 	, 64, 	, 80, 	, 80,   , Unit-5,  ] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('<', 'X'), ('2128', 'NUM'), (' \t', 'SPACE'), ('Block', 'PROPN'), ('Size', 'PROPN'), ('\t', 'SPACE'), ('512', 'NUM'), ('\t', 'SPACE'), ('512', 'NUM'), ('\t', 'SPACE'), ('512', 'NUM'), ('\t', 'SPACE'), ('1024', 'NUM'), ('\t', 'SPACE'), ('1024', 'NUM'), (' \t', 'SPACE'), ('Word', 'PROPN'), ('Size', 'PROPN'), ('\t', 'SPACE'), ('32', 'NUM'), ('\t', 'SPACE'), ('32', 'NUM'), ('\t', 'SPACE'), ('32', 'NUM'), ('\t', 'SPACE'), ('64', 'NUM'), ('\t', 'SPACE'), ('64', 'NUM'), (' \t', 'SPACE'), ('Number', 'PROPN'), ('Steps', 'PROPN'), ('\t', 'SPACE'), ('80', 'NUM'), ('\t', 'SPACE'), ('64', 'NUM'), ('\t', 'SPACE'), ('64', 'NUM'), ('\t', 'SPACE'), ('80', 'NUM'), ('\t', 'SPACE'), ('80', 'NUM'), ('  ', 'SPACE'), ('Unit-5', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('\t', 'nsubj'), ('<', 'nmod'), ('2128', 'nummod'), (' \t', 'nummod'), ('Block', 'compound'), ('Size', 'compound'), ('\t', 'nmod'), ('512', 'nummod'), ('\t', 'nmod'), ('512', 'nummod'), ('\t', 'nmod'), ('512', 'nummod'), ('\t', 'nmod'), ('1024', 'nummod'), ('\t', 'nmod'), ('1024', 'nummod'), (' \t', 'compound'), ('Word', 'compound'), ('Size', 'compound'), ('\t', 'appos'), ('32', 'nummod'), ('\t', 'conj'), ('32', 'nummod'), ('\t', 'conj'), ('32', 'nummod'), ('\t', 'nmod'), ('64', 'nummod'), ('\t', 'nmod'), ('64', 'nummod'), (' \t', 'compound'), ('Number', 'appos'), ('Steps', 'compound'), ('\t', 'pobj'), ('80', 'nummod'), ('\t', 'nmod'), ('64', 'nummod'), ('\t', 'nsubj'), ('64', 'nummod'), ('\t', 'conj'), ('80', 'nummod'), ('\t', 'appos'), ('80', 'nummod'), ('  ', 'appos'), ('Unit-5', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[	, <], [<, 2128], [2128,  	], [ 	, Block], [Block, Size], [Size, 	], [	, 512], [512, 	], [	, 512], [512, 	], [	, 512], [512, 	], [	, 1024], [1024, 	], [	, 1024], [1024,  	], [ 	, Word], [Word, Size], [Size, 	], [	, 32], [32, 	], [	, 32], [32, 	], [	, 32], [32, 	], [	, 64], [64, 	], [	, 64], [64,  	], [ 	, Number], [Number, Steps], [Steps, 	], [	, 80], [80, 	], [	, 64], [64, 	], [	, 64], [64, 	], [	, 80], [80, 	], [	, 80], [80,   ], [  , Unit-5], [Unit-5,  ]]

>> Trigrams: 
[[	, <, 2128], [<, 2128,  	], [2128,  	, Block], [ 	, Block, Size], [Block, Size, 	], [Size, 	, 512], [	, 512, 	], [512, 	, 512], [	, 512, 	], [512, 	, 512], [	, 512, 	], [512, 	, 1024], [	, 1024, 	], [1024, 	, 1024], [	, 1024,  	], [1024,  	, Word], [ 	, Word, Size], [Word, Size, 	], [Size, 	, 32], [	, 32, 	], [32, 	, 32], [	, 32, 	], [32, 	, 32], [	, 32, 	], [32, 	, 64], [	, 64, 	], [64, 	, 64], [	, 64,  	], [64,  	, Number], [ 	, Number, Steps], [Number, Steps, 	], [Steps, 	, 80], [	, 80, 	], [80, 	, 64], [	, 64, 	], [64, 	, 64], [	, 64, 	], [64, 	, 80], [	, 80, 	], [80, 	, 80], [	, 80,   ], [80,   , Unit-5], [  , Unit-5,  ]]

>> Noun Phrases are: 
[< 2128  	Block Size	512	512	512	1024	1024  	Word Size	32	32	32	64	64  	Number]

>> Named Entities are: 
[('512', 'CARDINAL'), ('512', 'CARDINAL'), ('512', 'CARDINAL'), ('1024', 'DATE'), ('1024', 'DATE'), ('32', 'CARDINAL'), ('32', 'DATE'), ('32', 'DATE'), ('64', 'DATE'), ('64', 'DATE'), ('80', 'CARDINAL')]


============================ Sentence 107 =============================

Cryptographic Hash Functions                                 Darshan Institute of Engineering & Technology   ‹#›  SHA - 512 


>> Tokens are: 
[Cryptographic, Hash, Functions,                                 , Darshan, Institute, Engineering, &, Technology,   , ‹#›,  , SHA, -, 512] 

>> PoS Tags are: 
[('Cryptographic', 'PROPN'), ('Hash', 'PROPN'), ('Functions', 'PROPN'), ('                                ', 'SPACE'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('Engineering', 'PROPN'), ('&', 'CCONJ'), ('Technology', 'PROPN'), ('  ', 'SPACE'), ('‹#›', 'VERB'), (' ', 'SPACE'), ('SHA', 'PROPN'), ('-', 'PUNCT'), ('512', 'NUM')] 

>> Dependency Tags are: 
[('Cryptographic', 'compound'), ('Hash', 'compound'), ('Functions', 'compound'), ('                                ', 'nsubj'), ('Darshan', 'compound'), ('Institute', 'appos'), ('Engineering', 'pobj'), ('&', 'cc'), ('Technology', 'conj'), ('  ', 'conj'), ('‹#›', 'dep'), (' ', 'punct'), ('SHA', 'compound'), ('-', 'punct'), ('512', 'ROOT')]

>> Bigrams: 
[[Cryptographic, Hash], [Hash, Functions], [Functions,                                 ], [                                , Darshan], [Darshan, Institute], [Institute, Engineering], [Engineering, &], [&, Technology], [Technology,   ], [  , ‹#›], [‹#›,  ], [ , SHA], [SHA, -], [-, 512]]

>> Trigrams: 
[[Cryptographic, Hash, Functions], [Hash, Functions,                                 ], [Functions,                                 , Darshan], [                                , Darshan, Institute], [Darshan, Institute, Engineering], [Institute, Engineering, &], [Engineering, &, Technology], [&, Technology,   ], [Technology,   , ‹#›], [  , ‹#›,  ], [‹#›,  , SHA], [ , SHA, -], [SHA, -, 512]]

>> Noun Phrases are: 
[Darshan Institute, Engineering, Technology]

>> Named Entities are: 
[('Functions', 'PERSON'), ('Darshan Institute of Engineering & Technology', 'ORG')]


============================ Sentence 108 =============================

The algorithm takes as input a message with a maximum length of less than 2128 bits and produces as output a 512-bit message digest. 


>> Tokens are: 
[algorithm, takes, input, message, maximum, length, 2128, bits, produces, output, 512, -, bit, message, digest, .] 

>> PoS Tags are: 
[('algorithm', 'NOUN'), ('takes', 'VERB'), ('input', 'NOUN'), ('message', 'NOUN'), ('maximum', 'ADJ'), ('length', 'NOUN'), ('2128', 'NUM'), ('bits', 'NOUN'), ('produces', 'VERB'), ('output', 'NOUN'), ('512', 'NUM'), ('-', 'PUNCT'), ('bit', 'NOUN'), ('message', 'NOUN'), ('digest', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('algorithm', 'nsubj'), ('takes', 'ROOT'), ('input', 'advcl'), ('message', 'dobj'), ('maximum', 'amod'), ('length', 'pobj'), ('2128', 'nummod'), ('bits', 'pobj'), ('produces', 'conj'), ('output', 'pobj'), ('512', 'nummod'), ('-', 'punct'), ('bit', 'compound'), ('message', 'compound'), ('digest', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[algorithm, takes], [takes, input], [input, message], [message, maximum], [maximum, length], [length, 2128], [2128, bits], [bits, produces], [produces, output], [output, 512], [512, -], [-, bit], [bit, message], [message, digest], [digest, .]]

>> Trigrams: 
[[algorithm, takes, input], [takes, input, message], [input, message, maximum], [message, maximum, length], [maximum, length, 2128], [length, 2128, bits], [2128, bits, produces], [bits, produces, output], [produces, output, 512], [output, 512, -], [512, -, bit], [-, bit, message], [bit, message, digest], [message, digest, .]]

>> Noun Phrases are: 
[The algorithm, a message, a maximum length, less than 2128 bits, output, a 512-bit message digest]

>> Named Entities are: 
[('less than 2128', 'CARDINAL'), ('512', 'CARDINAL')]


============================ Sentence 109 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 110 =============================

The input is processed in 1024-bit blocks. 


>> Tokens are: 
[input, processed, 1024, -, bit, blocks, .] 

>> PoS Tags are: 
[('input', 'NOUN'), ('processed', 'VERB'), ('1024', 'NUM'), ('-', 'PUNCT'), ('bit', 'NOUN'), ('blocks', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('input', 'nsubjpass'), ('processed', 'ROOT'), ('1024', 'nummod'), ('-', 'punct'), ('bit', 'compound'), ('blocks', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[input, processed], [processed, 1024], [1024, -], [-, bit], [bit, blocks], [blocks, .]]

>> Trigrams: 
[[input, processed, 1024], [processed, 1024, -], [1024, -, bit], [-, bit, blocks], [bit, blocks, .]]

>> Noun Phrases are: 
[The input, 1024-bit blocks]

>> Named Entities are: 
[('1024', 'DATE')]


============================ Sentence 111 =============================

 Unit-5   


>> Tokens are: 
[ , Unit-5,  ] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('Unit-5', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'nsubj'), ('Unit-5', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[ , Unit-5], [Unit-5,  ]]

>> Trigrams: 
[[ , Unit-5,  ]]

>> Noun Phrases are: 
[ Unit-5]

>> Named Entities are: 
[('Unit-5', 'PRODUCT')]


============================ Sentence 112 =============================

Cryptographic Hash Functions                                 Darshan Institute of Engineering & Technology   ‹#›   Message Digest Generation using SHA -512    Message (L bit) 10000…0 


>> Tokens are: 
[Cryptographic, Hash, Functions,                                 , Darshan, Institute, Engineering, &, Technology,   , ‹#›,   , Message, Digest, Generation, SHA, -512,    , Message, (, L, bit, ), 10000, …, 0] 

>> PoS Tags are: 
[('Cryptographic', 'PROPN'), ('Hash', 'PROPN'), ('Functions', 'PROPN'), ('                                ', 'SPACE'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('Engineering', 'PROPN'), ('&', 'CCONJ'), ('Technology', 'PROPN'), ('  ', 'SPACE'), ('‹#›', 'VERB'), ('  ', 'SPACE'), ('Message', 'PROPN'), ('Digest', 'PROPN'), ('Generation', 'PROPN'), ('SHA', 'PROPN'), ('-512', 'PROPN'), ('   ', 'SPACE'), ('Message', 'NOUN'), ('(', 'PUNCT'), ('L', 'NOUN'), ('bit', 'NOUN'), (')', 'PUNCT'), ('10000', 'NUM'), ('…', 'PUNCT'), ('0', 'PUNCT')] 

>> Dependency Tags are: 
[('Cryptographic', 'compound'), ('Hash', 'compound'), ('Functions', 'compound'), ('                                ', 'nmod'), ('Darshan', 'compound'), ('Institute', 'appos'), ('Engineering', 'pobj'), ('&', 'cc'), ('Technology', 'conj'), ('  ', 'nsubj'), ('‹#›', 'ccomp'), ('  ', 'dobj'), ('Message', 'compound'), ('Digest', 'compound'), ('Generation', 'nsubj'), ('SHA', 'compound'), ('-512', 'punct'), ('   ', 'nummod'), ('Message', 'dobj'), ('(', 'punct'), ('L', 'compound'), ('bit', 'appos'), (')', 'punct'), ('10000', 'appos'), ('…', 'punct'), ('0', 'punct')]

>> Bigrams: 
[[Cryptographic, Hash], [Hash, Functions], [Functions,                                 ], [                                , Darshan], [Darshan, Institute], [Institute, Engineering], [Engineering, &], [&, Technology], [Technology,   ], [  , ‹#›], [‹#›,   ], [  , Message], [Message, Digest], [Digest, Generation], [Generation, SHA], [SHA, -512], [-512,    ], [   , Message], [Message, (], [(, L], [L, bit], [bit, )], [), 10000], [10000, …], […, 0]]

>> Trigrams: 
[[Cryptographic, Hash, Functions], [Hash, Functions,                                 ], [Functions,                                 , Darshan], [                                , Darshan, Institute], [Darshan, Institute, Engineering], [Institute, Engineering, &], [Engineering, &, Technology], [&, Technology,   ], [Technology,   , ‹#›], [  , ‹#›,   ], [‹#›,   , Message], [  , Message, Digest], [Message, Digest, Generation], [Digest, Generation, SHA], [Generation, SHA, -512], [SHA, -512,    ], [-512,    , Message], [   , Message, (], [Message, (, L], [(, L, bit], [L, bit, )], [bit, ), 10000], [), 10000, …], [10000, …, 0]]

>> Noun Phrases are: 
[Darshan Institute, Engineering, Technology, SHA -512    Message, L bit]

>> Named Entities are: 
[('Functions', 'PERSON'), ('Darshan Institute of Engineering & Technology', 'ORG'), ('SHA', 'ORG'), ('10000', 'DATE'), ('0', 'CARDINAL')]


============================ Sentence 113 =============================

L M1 (1024 bits) M2 (1024 bits) MN (1024 bits) F + H1 (512 bits) IV=H0 F + H2 (512 bits) F + HN (512 bits)        Message Digest Generation using SHA -512   Unit-5   


>> Tokens are: 
[L, M1, (, 1024, bits, ), M2, (, 1024, bits, ), MN, (, 1024, bits, ), F, +, H1, (, 512, bits, ), IV, =, H0, F, +, H2, (, 512, bits, ), F, +, HN, (, 512, bits, ),        , Message, Digest, Generation, SHA, -512,   , Unit-5,  ] 

>> PoS Tags are: 
[('L', 'PROPN'), ('M1', 'PROPN'), ('(', 'PUNCT'), ('1024', 'NUM'), ('bits', 'VERB'), (')', 'PUNCT'), ('M2', 'PROPN'), ('(', 'PUNCT'), ('1024', 'NUM'), ('bits', 'VERB'), (')', 'PUNCT'), ('MN', 'PROPN'), ('(', 'PUNCT'), ('1024', 'NUM'), ('bits', 'VERB'), (')', 'PUNCT'), ('F', 'PROPN'), ('+', 'SYM'), ('H1', 'PROPN'), ('(', 'PUNCT'), ('512', 'NUM'), ('bits', 'NOUN'), (')', 'PUNCT'), ('IV', 'NOUN'), ('=', 'SYM'), ('H0', 'PROPN'), ('F', 'PROPN'), ('+', 'PROPN'), ('H2', 'PROPN'), ('(', 'PUNCT'), ('512', 'NUM'), ('bits', 'NOUN'), (')', 'PUNCT'), ('F', 'PROPN'), ('+', 'ADV'), ('HN', 'PROPN'), ('(', 'PUNCT'), ('512', 'NUM'), ('bits', 'NOUN'), (')', 'PUNCT'), ('       ', 'SPACE'), ('Message', 'PROPN'), ('Digest', 'PROPN'), ('Generation', 'PROPN'), ('SHA', 'PROPN'), ('-512', 'PROPN'), ('  ', 'SPACE'), ('Unit-5', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('L', 'compound'), ('M1', 'nsubj'), ('(', 'punct'), ('1024', 'nummod'), ('bits', 'parataxis'), (')', 'punct'), ('M2', 'appos'), ('(', 'punct'), ('1024', 'nummod'), ('bits', 'appos'), (')', 'punct'), ('MN', 'appos'), ('(', 'punct'), ('1024', 'nsubj'), ('bits', 'parataxis'), (')', 'punct'), ('F', 'nmod'), ('+', 'punct'), ('H1', 'appos'), ('(', 'punct'), ('512', 'nummod'), ('bits', 'appos'), (')', 'punct'), ('IV', 'nmod'), ('=', 'punct'), ('H0', 'compound'), ('F', 'nmod'), ('+', 'compound'), ('H2', 'appos'), ('(', 'punct'), ('512', 'nummod'), ('bits', 'appos'), (')', 'punct'), ('F', 'appos'), ('+', 'cc'), ('HN', 'conj'), ('(', 'punct'), ('512', 'nummod'), ('bits', 'parataxis'), (')', 'punct'), ('       ', 'compound'), ('Message', 'compound'), ('Digest', 'compound'), ('Generation', 'nsubj'), ('SHA', 'dobj'), ('-512', 'dobj'), ('  ', 'dobj'), ('Unit-5', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[L, M1], [M1, (], [(, 1024], [1024, bits], [bits, )], [), M2], [M2, (], [(, 1024], [1024, bits], [bits, )], [), MN], [MN, (], [(, 1024], [1024, bits], [bits, )], [), F], [F, +], [+, H1], [H1, (], [(, 512], [512, bits], [bits, )], [), IV], [IV, =], [=, H0], [H0, F], [F, +], [+, H2], [H2, (], [(, 512], [512, bits], [bits, )], [), F], [F, +], [+, HN], [HN, (], [(, 512], [512, bits], [bits, )], [),        ], [       , Message], [Message, Digest], [Digest, Generation], [Generation, SHA], [SHA, -512], [-512,   ], [  , Unit-5], [Unit-5,  ]]

>> Trigrams: 
[[L, M1, (], [M1, (, 1024], [(, 1024, bits], [1024, bits, )], [bits, ), M2], [), M2, (], [M2, (, 1024], [(, 1024, bits], [1024, bits, )], [bits, ), MN], [), MN, (], [MN, (, 1024], [(, 1024, bits], [1024, bits, )], [bits, ), F], [), F, +], [F, +, H1], [+, H1, (], [H1, (, 512], [(, 512, bits], [512, bits, )], [bits, ), IV], [), IV, =], [IV, =, H0], [=, H0, F], [H0, F, +], [F, +, H2], [+, H2, (], [H2, (, 512], [(, 512, bits], [512, bits, )], [bits, ), F], [), F, +], [F, +, HN], [+, HN, (], [HN, (, 512], [(, 512, bits], [512, bits, )], [bits, ),        ], [),        , Message], [       , Message, Digest], [Message, Digest, Generation], [Digest, Generation, SHA], [Generation, SHA, -512], [SHA, -512,   ], [-512,   , Unit-5], [  , Unit-5,  ]]

>> Noun Phrases are: 
[L M1, M2, MN, F + H1, 512 bits, IV=H0 F + H2, 512 bits, F, HN,        Message Digest Generation, SHA, -512]

>> Named Entities are: 
[('1024', 'DATE'), ('M2', 'CARDINAL'), ('1024', 'DATE'), ('MN', 'ORG'), ('1024', 'DATE'), ('F + H1', 'PRODUCT'), ('512', 'CARDINAL'), ('H0 F + H2', 'PRODUCT'), ('512', 'CARDINAL'), ('512', 'CARDINAL'), ('SHA', 'ORG')]


============================ Sentence 114 =============================

Cryptographic Hash Functions                                 Darshan Institute of Engineering & Technology   ‹#›   


>> Tokens are: 
[Cryptographic, Hash, Functions,                                 , Darshan, Institute, Engineering, &, Technology,   , ‹#›,  ] 

>> PoS Tags are: 
[('Cryptographic', 'PROPN'), ('Hash', 'PROPN'), ('Functions', 'PROPN'), ('                                ', 'SPACE'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('Engineering', 'PROPN'), ('&', 'CCONJ'), ('Technology', 'PROPN'), ('  ', 'SPACE'), ('‹#›', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Cryptographic', 'compound'), ('Hash', 'compound'), ('Functions', 'compound'), ('                                ', 'nsubj'), ('Darshan', 'compound'), ('Institute', 'appos'), ('Engineering', 'pobj'), ('&', 'cc'), ('Technology', 'conj'), ('  ', 'conj'), ('‹#›', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[Cryptographic, Hash], [Hash, Functions], [Functions,                                 ], [                                , Darshan], [Darshan, Institute], [Institute, Engineering], [Engineering, &], [&, Technology], [Technology,   ], [  , ‹#›], [‹#›,  ]]

>> Trigrams: 
[[Cryptographic, Hash, Functions], [Hash, Functions,                                 ], [Functions,                                 , Darshan], [                                , Darshan, Institute], [Darshan, Institute, Engineering], [Institute, Engineering, &], [Engineering, &, Technology], [&, Technology,   ], [Technology,   , ‹#›], [  , ‹#›,  ]]

>> Noun Phrases are: 
[Darshan Institute, Engineering, Technology]

>> Named Entities are: 
[('Functions', 'PERSON'), ('Darshan Institute of Engineering & Technology', 'ORG')]


============================ Sentence 115 =============================

Step -1 Append Padding Bits The message is padded so that its length is congruent to 896 modulo 1024 [length ≡ 896(mod 1024)] . 


>> Tokens are: 
[Step, -1, Append, Padding, Bits, message, padded, length, congruent, 896, modulo, 1024, [, length, ≡, 896(mod, 1024, ), ], .] 

>> PoS Tags are: 
[('Step', 'NOUN'), ('-1', 'NOUN'), ('Append', 'NOUN'), ('Padding', 'NOUN'), ('Bits', 'VERB'), ('message', 'NOUN'), ('padded', 'VERB'), ('length', 'NOUN'), ('congruent', 'NOUN'), ('896', 'NUM'), ('modulo', 'NOUN'), ('1024', 'NUM'), ('[', 'PUNCT'), ('length', 'NOUN'), ('≡', 'ADJ'), ('896(mod', 'NUM'), ('1024', 'NUM'), (')', 'PUNCT'), (']', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Step', 'compound'), ('-1', 'compound'), ('Append', 'compound'), ('Padding', 'compound'), ('Bits', 'ccomp'), ('message', 'nsubjpass'), ('padded', 'ccomp'), ('length', 'nsubj'), ('congruent', 'attr'), ('896', 'nummod'), ('modulo', 'pobj'), ('1024', 'nummod'), ('[', 'punct'), ('length', 'ROOT'), ('≡', 'advmod'), ('896(mod', 'npadvmod'), ('1024', 'nummod'), (')', 'punct'), (']', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Step, -1], [-1, Append], [Append, Padding], [Padding, Bits], [Bits, message], [message, padded], [padded, length], [length, congruent], [congruent, 896], [896, modulo], [modulo, 1024], [1024, [], [[, length], [length, ≡], [≡, 896(mod], [896(mod, 1024], [1024, )], [), ]], [], .]]

>> Trigrams: 
[[Step, -1, Append], [-1, Append, Padding], [Append, Padding, Bits], [Padding, Bits, message], [Bits, message, padded], [message, padded, length], [padded, length, congruent], [length, congruent, 896], [congruent, 896, modulo], [896, modulo, 1024], [modulo, 1024, [], [1024, [, length], [[, length, ≡], [length, ≡, 896(mod], [≡, 896(mod, 1024], [896(mod, 1024, )], [1024, ), ]], [), ], .]]

>> Noun Phrases are: 
[The message, its length, congruent, 896 modulo]

>> Named Entities are: 
[('Step -1 Append Padding Bits', 'ORG'), ('896', 'CARDINAL'), ('1024', 'DATE'), ('896(mod', 'CARDINAL'), ('1024', 'DATE')]


============================ Sentence 116 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 117 =============================

Padding is always added, even if the message is already of the desired length.   


>> Tokens are: 
[Padding, added, ,, message, desired, length, .,  ] 

>> PoS Tags are: 
[('Padding', 'PROPN'), ('added', 'VERB'), (',', 'PUNCT'), ('message', 'NOUN'), ('desired', 'VERB'), ('length', 'NOUN'), ('.', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Padding', 'nsubjpass'), ('added', 'ROOT'), (',', 'punct'), ('message', 'nsubj'), ('desired', 'amod'), ('length', 'pobj'), ('.', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[Padding, added], [added, ,], [,, message], [message, desired], [desired, length], [length, .], [.,  ]]

>> Trigrams: 
[[Padding, added, ,], [added, ,, message], [,, message, desired], [message, desired, length], [desired, length, .], [length, .,  ]]

>> Noun Phrases are: 
[Padding, the message, the desired length]

>> Named Entities are: 
[]


============================ Sentence 118 =============================

Thus, the number of padding bits is in the range of 1 to 1024. 


>> Tokens are: 
[,, number, padding, bits, range, 1, 1024, .] 

>> PoS Tags are: 
[(',', 'PUNCT'), ('number', 'NOUN'), ('padding', 'NOUN'), ('bits', 'NOUN'), ('range', 'NOUN'), ('1', 'NUM'), ('1024', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(',', 'punct'), ('number', 'nsubj'), ('padding', 'compound'), ('bits', 'pobj'), ('range', 'pobj'), ('1', 'pobj'), ('1024', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[,, number], [number, padding], [padding, bits], [bits, range], [range, 1], [1, 1024], [1024, .]]

>> Trigrams: 
[[,, number, padding], [number, padding, bits], [padding, bits, range], [bits, range, 1], [range, 1, 1024], [1, 1024, .]]

>> Noun Phrases are: 
[the number, padding bits, the range]

>> Named Entities are: 
[('1 to 1024', 'DATE')]


============================ Sentence 119 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 120 =============================

The padding consists of a single 1 bit followed by the necessary number of 0 bits. 


>> Tokens are: 
[padding, consists, single, 1, bit, followed, necessary, number, 0, bits, .] 

>> PoS Tags are: 
[('padding', 'NOUN'), ('consists', 'VERB'), ('single', 'ADJ'), ('1', 'NUM'), ('bit', 'NOUN'), ('followed', 'VERB'), ('necessary', 'ADJ'), ('number', 'NOUN'), ('0', 'NUM'), ('bits', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('padding', 'nsubj'), ('consists', 'ROOT'), ('single', 'amod'), ('1', 'nummod'), ('bit', 'pobj'), ('followed', 'acl'), ('necessary', 'amod'), ('number', 'pobj'), ('0', 'nummod'), ('bits', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[padding, consists], [consists, single], [single, 1], [1, bit], [bit, followed], [followed, necessary], [necessary, number], [number, 0], [0, bits], [bits, .]]

>> Trigrams: 
[[padding, consists, single], [consists, single, 1], [single, 1, bit], [1, bit, followed], [bit, followed, necessary], [followed, necessary, number], [necessary, number, 0], [number, 0, bits], [0, bits, .]]

>> Noun Phrases are: 
[The padding, a single 1 bit, the necessary number, 0 bits]

>> Named Entities are: 
[('0', 'CARDINAL')]


============================ Sentence 121 =============================

 Unit-5   


>> Tokens are: 
[ , Unit-5,  ] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('Unit-5', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'nsubj'), ('Unit-5', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[ , Unit-5], [Unit-5,  ]]

>> Trigrams: 
[[ , Unit-5,  ]]

>> Noun Phrases are: 
[ Unit-5]

>> Named Entities are: 
[('Unit-5', 'PRODUCT')]


============================ Sentence 122 =============================

Cryptographic Hash Functions                                 Darshan Institute of Engineering & Technology   ‹#›   


>> Tokens are: 
[Cryptographic, Hash, Functions,                                 , Darshan, Institute, Engineering, &, Technology,   , ‹#›,  ] 

>> PoS Tags are: 
[('Cryptographic', 'PROPN'), ('Hash', 'PROPN'), ('Functions', 'PROPN'), ('                                ', 'SPACE'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('Engineering', 'PROPN'), ('&', 'CCONJ'), ('Technology', 'PROPN'), ('  ', 'SPACE'), ('‹#›', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Cryptographic', 'compound'), ('Hash', 'compound'), ('Functions', 'compound'), ('                                ', 'nsubj'), ('Darshan', 'compound'), ('Institute', 'appos'), ('Engineering', 'pobj'), ('&', 'cc'), ('Technology', 'conj'), ('  ', 'conj'), ('‹#›', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[Cryptographic, Hash], [Hash, Functions], [Functions,                                 ], [                                , Darshan], [Darshan, Institute], [Institute, Engineering], [Engineering, &], [&, Technology], [Technology,   ], [  , ‹#›], [‹#›,  ]]

>> Trigrams: 
[[Cryptographic, Hash, Functions], [Hash, Functions,                                 ], [Functions,                                 , Darshan], [                                , Darshan, Institute], [Darshan, Institute, Engineering], [Institute, Engineering, &], [Engineering, &, Technology], [&, Technology,   ], [Technology,   , ‹#›], [  , ‹#›,  ]]

>> Noun Phrases are: 
[Darshan Institute, Engineering, Technology]

>> Named Entities are: 
[('Functions', 'PERSON'), ('Darshan Institute of Engineering & Technology', 'ORG')]


============================ Sentence 123 =============================

Step -2 Append Length A block of 128 bits is appended to the message. 


>> Tokens are: 
[Step, -2, Append, Length, block, 128, bits, appended, message, .] 

>> PoS Tags are: 
[('Step', 'NOUN'), ('-2', 'NOUN'), ('Append', 'NOUN'), ('Length', 'PROPN'), ('block', 'NOUN'), ('128', 'NUM'), ('bits', 'NOUN'), ('appended', 'VERB'), ('message', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Step', 'compound'), ('-2', 'compound'), ('Append', 'compound'), ('Length', 'compound'), ('block', 'nsubjpass'), ('128', 'nummod'), ('bits', 'pobj'), ('appended', 'ROOT'), ('message', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Step, -2], [-2, Append], [Append, Length], [Length, block], [block, 128], [128, bits], [bits, appended], [appended, message], [message, .]]

>> Trigrams: 
[[Step, -2, Append], [-2, Append, Length], [Append, Length, block], [Length, block, 128], [block, 128, bits], [128, bits, appended], [bits, appended, message], [appended, message, .]]

>> Noun Phrases are: 
[Step -2 Append Length A block, 128 bits, the message]

>> Named Entities are: 
[('128', 'CARDINAL')]


============================ Sentence 124 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 125 =============================

This block is treated as an unsigned 128-bit integer (most significant byte first) and contains the length of the original message (before the padding). 


>> Tokens are: 
[block, treated, unsigned, 128, -, bit, integer, (, significant, byte, ), contains, length, original, message, (, padding, ), .] 

>> PoS Tags are: 
[('block', 'NOUN'), ('treated', 'VERB'), ('unsigned', 'ADJ'), ('128', 'NUM'), ('-', 'PUNCT'), ('bit', 'NOUN'), ('integer', 'NOUN'), ('(', 'PUNCT'), ('significant', 'ADJ'), ('byte', 'NOUN'), (')', 'PUNCT'), ('contains', 'VERB'), ('length', 'NOUN'), ('original', 'ADJ'), ('message', 'NOUN'), ('(', 'PUNCT'), ('padding', 'NOUN'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('block', 'nsubjpass'), ('treated', 'ROOT'), ('unsigned', 'amod'), ('128', 'nummod'), ('-', 'punct'), ('bit', 'compound'), ('integer', 'pobj'), ('(', 'punct'), ('significant', 'amod'), ('byte', 'appos'), (')', 'punct'), ('contains', 'conj'), ('length', 'dobj'), ('original', 'amod'), ('message', 'pobj'), ('(', 'punct'), ('padding', 'pobj'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[block, treated], [treated, unsigned], [unsigned, 128], [128, -], [-, bit], [bit, integer], [integer, (], [(, significant], [significant, byte], [byte, )], [), contains], [contains, length], [length, original], [original, message], [message, (], [(, padding], [padding, )], [), .]]

>> Trigrams: 
[[block, treated, unsigned], [treated, unsigned, 128], [unsigned, 128, -], [128, -, bit], [-, bit, integer], [bit, integer, (], [integer, (, significant], [(, significant, byte], [significant, byte, )], [byte, ), contains], [), contains, length], [contains, length, original], [length, original, message], [original, message, (], [message, (, padding], [(, padding, )], [padding, ), .]]

>> Noun Phrases are: 
[This block, an unsigned 128-bit integer, most significant byte, the length, the original message, the padding]

>> Named Entities are: 
[('128-bit', 'QUANTITY')]


============================ Sentence 126 =============================

 Unit-5   


>> Tokens are: 
[ , Unit-5,  ] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('Unit-5', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'nsubj'), ('Unit-5', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[ , Unit-5], [Unit-5,  ]]

>> Trigrams: 
[[ , Unit-5,  ]]

>> Noun Phrases are: 
[ Unit-5]

>> Named Entities are: 
[]


============================ Sentence 127 =============================

Cryptographic Hash Functions                                 Darshan Institute of Engineering & Technology   ‹#›   


>> Tokens are: 
[Cryptographic, Hash, Functions,                                 , Darshan, Institute, Engineering, &, Technology,   , ‹#›,  ] 

>> PoS Tags are: 
[('Cryptographic', 'PROPN'), ('Hash', 'PROPN'), ('Functions', 'PROPN'), ('                                ', 'SPACE'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('Engineering', 'PROPN'), ('&', 'CCONJ'), ('Technology', 'PROPN'), ('  ', 'SPACE'), ('‹#›', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Cryptographic', 'compound'), ('Hash', 'compound'), ('Functions', 'compound'), ('                                ', 'nsubj'), ('Darshan', 'compound'), ('Institute', 'appos'), ('Engineering', 'pobj'), ('&', 'cc'), ('Technology', 'conj'), ('  ', 'conj'), ('‹#›', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[Cryptographic, Hash], [Hash, Functions], [Functions,                                 ], [                                , Darshan], [Darshan, Institute], [Institute, Engineering], [Engineering, &], [&, Technology], [Technology,   ], [  , ‹#›], [‹#›,  ]]

>> Trigrams: 
[[Cryptographic, Hash, Functions], [Hash, Functions,                                 ], [Functions,                                 , Darshan], [                                , Darshan, Institute], [Darshan, Institute, Engineering], [Institute, Engineering, &], [Engineering, &, Technology], [&, Technology,   ], [Technology,   , ‹#›], [  , ‹#›,  ]]

>> Noun Phrases are: 
[Darshan Institute, Engineering, Technology]

>> Named Entities are: 
[('Functions', 'PERSON'), ('Darshan Institute of Engineering & Technology', 'ORG')]


============================ Sentence 128 =============================

Step -3 Initialize hash buffer The outcome of the first two steps produces a message that is an integer multiple of 1024 bits in length. 


>> Tokens are: 
[Step, -3, Initialize, hash, buffer, outcome, steps, produces, message, integer, multiple, 1024, bits, length, .] 

>> PoS Tags are: 
[('Step', 'PROPN'), ('-3', 'PUNCT'), ('Initialize', 'PROPN'), ('hash', 'NOUN'), ('buffer', 'VERB'), ('outcome', 'NOUN'), ('steps', 'NOUN'), ('produces', 'VERB'), ('message', 'NOUN'), ('integer', 'NOUN'), ('multiple', 'NOUN'), ('1024', 'NUM'), ('bits', 'NOUN'), ('length', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Step', 'compound'), ('-3', 'punct'), ('Initialize', 'compound'), ('hash', 'nsubj'), ('buffer', 'ROOT'), ('outcome', 'dobj'), ('steps', 'pobj'), ('produces', 'conj'), ('message', 'dobj'), ('integer', 'compound'), ('multiple', 'attr'), ('1024', 'pobj'), ('bits', 'relcl'), ('length', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Step, -3], [-3, Initialize], [Initialize, hash], [hash, buffer], [buffer, outcome], [outcome, steps], [steps, produces], [produces, message], [message, integer], [integer, multiple], [multiple, 1024], [1024, bits], [bits, length], [length, .]]

>> Trigrams: 
[[Step, -3, Initialize], [-3, Initialize, hash], [Initialize, hash, buffer], [hash, buffer, outcome], [buffer, outcome, steps], [outcome, steps, produces], [steps, produces, message], [produces, message, integer], [message, integer, multiple], [integer, multiple, 1024], [multiple, 1024, bits], [1024, bits, length], [bits, length, .]]

>> Noun Phrases are: 
[Step -3 Initialize hash, The outcome, the first two steps, a message, an integer multiple, length]

>> Named Entities are: 
[('first', 'ORDINAL'), ('two', 'CARDINAL'), ('1024', 'DATE')]


============================ Sentence 129 =============================

the expanded message is represented as the sequence of 1024-bit blocks M1 , M2, … , MN, so that the total length of expanded message is N X 1024 bits. 


>> Tokens are: 
[expanded, message, represented, sequence, 1024, -, bit, blocks, M1, ,, M2, ,, …, ,, MN, ,, total, length, expanded, message, N, X, 1024, bits, .] 

>> PoS Tags are: 
[('expanded', 'VERB'), ('message', 'NOUN'), ('represented', 'VERB'), ('sequence', 'NOUN'), ('1024', 'NUM'), ('-', 'PUNCT'), ('bit', 'NOUN'), ('blocks', 'NOUN'), ('M1', 'PROPN'), (',', 'PUNCT'), ('M2', 'PROPN'), (',', 'PUNCT'), ('…', 'PUNCT'), (',', 'PUNCT'), ('MN', 'PROPN'), (',', 'PUNCT'), ('total', 'ADJ'), ('length', 'NOUN'), ('expanded', 'VERB'), ('message', 'NOUN'), ('N', 'PROPN'), ('X', 'NOUN'), ('1024', 'NUM'), ('bits', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('expanded', 'amod'), ('message', 'nsubjpass'), ('represented', 'ROOT'), ('sequence', 'pobj'), ('1024', 'nummod'), ('-', 'punct'), ('bit', 'compound'), ('blocks', 'pobj'), ('M1', 'appos'), (',', 'punct'), ('M2', 'appos'), (',', 'punct'), ('…', 'punct'), (',', 'punct'), ('MN', 'appos'), (',', 'punct'), ('total', 'amod'), ('length', 'nsubj'), ('expanded', 'amod'), ('message', 'pobj'), ('N', 'compound'), ('X', 'nmod'), ('1024', 'nummod'), ('bits', 'attr'), ('.', 'punct')]

>> Bigrams: 
[[expanded, message], [message, represented], [represented, sequence], [sequence, 1024], [1024, -], [-, bit], [bit, blocks], [blocks, M1], [M1, ,], [,, M2], [M2, ,], [,, …], […, ,], [,, MN], [MN, ,], [,, total], [total, length], [length, expanded], [expanded, message], [message, N], [N, X], [X, 1024], [1024, bits], [bits, .]]

>> Trigrams: 
[[expanded, message, represented], [message, represented, sequence], [represented, sequence, 1024], [sequence, 1024, -], [1024, -, bit], [-, bit, blocks], [bit, blocks, M1], [blocks, M1, ,], [M1, ,, M2], [,, M2, ,], [M2, ,, …], [,, …, ,], […, ,, MN], [,, MN, ,], [MN, ,, total], [,, total, length], [total, length, expanded], [length, expanded, message], [expanded, message, N], [message, N, X], [N, X, 1024], [X, 1024, bits], [1024, bits, .]]

>> Noun Phrases are: 
[the expanded message, the sequence, 1024-bit blocks, M1, M2, MN, the total length, expanded message, N X 1024 bits]

>> Named Entities are: 
[('1024', 'DATE'), ('M2', 'CARDINAL'), ('MN', 'ORG')]


============================ Sentence 130 =============================

A 512-bit buffer is used to hold intermediate and final results of the hash function. 


>> Tokens are: 
[512, -, bit, buffer, hold, intermediate, final, results, hash, function, .] 

>> PoS Tags are: 
[('512', 'NUM'), ('-', 'PUNCT'), ('bit', 'NOUN'), ('buffer', 'NOUN'), ('hold', 'VERB'), ('intermediate', 'ADJ'), ('final', 'ADJ'), ('results', 'NOUN'), ('hash', 'NOUN'), ('function', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('512', 'nummod'), ('-', 'punct'), ('bit', 'compound'), ('buffer', 'nsubjpass'), ('hold', 'xcomp'), ('intermediate', 'amod'), ('final', 'conj'), ('results', 'dobj'), ('hash', 'compound'), ('function', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[512, -], [-, bit], [bit, buffer], [buffer, hold], [hold, intermediate], [intermediate, final], [final, results], [results, hash], [hash, function], [function, .]]

>> Trigrams: 
[[512, -, bit], [-, bit, buffer], [bit, buffer, hold], [buffer, hold, intermediate], [hold, intermediate, final], [intermediate, final, results], [final, results, hash], [results, hash, function], [hash, function, .]]

>> Noun Phrases are: 
[A 512-bit buffer, intermediate and final results, the hash function]

>> Named Entities are: 
[('512', 'CARDINAL')]


============================ Sentence 131 =============================

The buffer can be represented as eight 64-bit registers (a, b, c, d, e, f, g, h). 


>> Tokens are: 
[buffer, represented, 64, -, bit, registers, (, ,, b, ,, c, ,, d, ,, e, ,, f, ,, g, ,, h, ), .] 

>> PoS Tags are: 
[('buffer', 'NOUN'), ('represented', 'VERB'), ('64', 'NUM'), ('-', 'PUNCT'), ('bit', 'NOUN'), ('registers', 'NOUN'), ('(', 'PUNCT'), (',', 'PUNCT'), ('b', 'NOUN'), (',', 'PUNCT'), ('c', 'NOUN'), (',', 'PUNCT'), ('d', 'NOUN'), (',', 'PUNCT'), ('e', 'PROPN'), (',', 'PUNCT'), ('f', 'X'), (',', 'PUNCT'), ('g', 'NOUN'), (',', 'PUNCT'), ('h', 'NOUN'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('buffer', 'nsubjpass'), ('represented', 'ROOT'), ('64', 'nummod'), ('-', 'punct'), ('bit', 'compound'), ('registers', 'pobj'), ('(', 'punct'), (',', 'punct'), ('b', 'appos'), (',', 'punct'), ('c', 'punct'), (',', 'punct'), ('d', 'conj'), (',', 'punct'), ('e', 'appos'), (',', 'punct'), ('f', 'npadvmod'), (',', 'punct'), ('g', 'nmod'), (',', 'punct'), ('h', 'npadvmod'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[buffer, represented], [represented, 64], [64, -], [-, bit], [bit, registers], [registers, (], [(, ,], [,, b], [b, ,], [,, c], [c, ,], [,, d], [d, ,], [,, e], [e, ,], [,, f], [f, ,], [,, g], [g, ,], [,, h], [h, )], [), .]]

>> Trigrams: 
[[buffer, represented, 64], [represented, 64, -], [64, -, bit], [-, bit, registers], [bit, registers, (], [registers, (, ,], [(, ,, b], [,, b, ,], [b, ,, c], [,, c, ,], [c, ,, d], [,, d, ,], [d, ,, e], [,, e, ,], [e, ,, f], [,, f, ,], [f, ,, g], [,, g, ,], [g, ,, h], [,, h, )], [h, ), .]]

>> Noun Phrases are: 
[The buffer, eight 64-bit registers, a, b, e]

>> Named Entities are: 
[]


============================ Sentence 132 =============================

  Unit-5   


>> Tokens are: 
[  , Unit-5,  ] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('Unit-5', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'nsubj'), ('Unit-5', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[  , Unit-5], [Unit-5,  ]]

>> Trigrams: 
[[  , Unit-5,  ]]

>> Noun Phrases are: 
[  Unit-5]

>> Named Entities are: 
[]


============================ Sentence 133 =============================

Cryptographic Hash Functions                                 Darshan Institute of Engineering & Technology   ‹#›   


>> Tokens are: 
[Cryptographic, Hash, Functions,                                 , Darshan, Institute, Engineering, &, Technology,   , ‹#›,  ] 

>> PoS Tags are: 
[('Cryptographic', 'PROPN'), ('Hash', 'PROPN'), ('Functions', 'PROPN'), ('                                ', 'SPACE'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('Engineering', 'PROPN'), ('&', 'CCONJ'), ('Technology', 'PROPN'), ('  ', 'SPACE'), ('‹#›', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Cryptographic', 'compound'), ('Hash', 'compound'), ('Functions', 'compound'), ('                                ', 'nsubj'), ('Darshan', 'compound'), ('Institute', 'appos'), ('Engineering', 'pobj'), ('&', 'cc'), ('Technology', 'conj'), ('  ', 'conj'), ('‹#›', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[Cryptographic, Hash], [Hash, Functions], [Functions,                                 ], [                                , Darshan], [Darshan, Institute], [Institute, Engineering], [Engineering, &], [&, Technology], [Technology,   ], [  , ‹#›], [‹#›,  ]]

>> Trigrams: 
[[Cryptographic, Hash, Functions], [Hash, Functions,                                 ], [Functions,                                 , Darshan], [                                , Darshan, Institute], [Darshan, Institute, Engineering], [Institute, Engineering, &], [Engineering, &, Technology], [&, Technology,   ], [Technology,   , ‹#›], [  , ‹#›,  ]]

>> Noun Phrases are: 
[Darshan Institute, Engineering, Technology]

>> Named Entities are: 
[('Functions', 'PERSON'), ('Darshan Institute of Engineering & Technology', 'ORG')]


============================ Sentence 134 =============================

Step -4 Process message in 1024-bit (128-word) blocks The heart of the algorithm is a module that consists of 80 rounds; this module is labelled F  Unit-5   


>> Tokens are: 
[Step, -4, Process, message, 1024, -, bit, (, 128, -, word, ), blocks, heart, algorithm, module, consists, 80, rounds, ;, module, labelled, F,  , Unit-5,  ] 

>> PoS Tags are: 
[('Step', 'PROPN'), ('-4', 'NOUN'), ('Process', 'NOUN'), ('message', 'NOUN'), ('1024', 'NUM'), ('-', 'PUNCT'), ('bit', 'NOUN'), ('(', 'PUNCT'), ('128', 'NUM'), ('-', 'PUNCT'), ('word', 'NOUN'), (')', 'PUNCT'), ('blocks', 'VERB'), ('heart', 'NOUN'), ('algorithm', 'NOUN'), ('module', 'NOUN'), ('consists', 'VERB'), ('80', 'NUM'), ('rounds', 'NOUN'), (';', 'PUNCT'), ('module', 'NOUN'), ('labelled', 'VERB'), ('F', 'PROPN'), (' ', 'SPACE'), ('Unit-5', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Step', 'compound'), ('-4', 'punct'), ('Process', 'compound'), ('message', 'nsubj'), ('1024', 'nummod'), ('-', 'punct'), ('bit', 'pobj'), ('(', 'punct'), ('128', 'nummod'), ('-', 'punct'), ('word', 'appos'), (')', 'punct'), ('blocks', 'ccomp'), ('heart', 'nsubj'), ('algorithm', 'pobj'), ('module', 'attr'), ('consists', 'relcl'), ('80', 'nummod'), ('rounds', 'pobj'), (';', 'punct'), ('module', 'nsubjpass'), ('labelled', 'ROOT'), ('F', 'compound'), (' ', 'nsubj'), ('Unit-5', 'ccomp'), (' ', 'punct')]

>> Bigrams: 
[[Step, -4], [-4, Process], [Process, message], [message, 1024], [1024, -], [-, bit], [bit, (], [(, 128], [128, -], [-, word], [word, )], [), blocks], [blocks, heart], [heart, algorithm], [algorithm, module], [module, consists], [consists, 80], [80, rounds], [rounds, ;], [;, module], [module, labelled], [labelled, F], [F,  ], [ , Unit-5], [Unit-5,  ]]

>> Trigrams: 
[[Step, -4, Process], [-4, Process, message], [Process, message, 1024], [message, 1024, -], [1024, -, bit], [-, bit, (], [bit, (, 128], [(, 128, -], [128, -, word], [-, word, )], [word, ), blocks], [), blocks, heart], [blocks, heart, algorithm], [heart, algorithm, module], [algorithm, module, consists], [module, consists, 80], [consists, 80, rounds], [80, rounds, ;], [rounds, ;, module], [;, module, labelled], [module, labelled, F], [labelled, F,  ], [F,  , Unit-5], [ , Unit-5,  ]]

>> Noun Phrases are: 
[Step -4 Process message, 1024-bit, (128-word, The heart, the algorithm, a module, 80 rounds, this module]

>> Named Entities are: 
[('1024', 'DATE'), ('128', 'CARDINAL'), ('80', 'CARDINAL'), ('F  ', 'PRODUCT')]


============================ Sentence 135 =============================

Cryptographic Hash Functions                                 Darshan Institute of Engineering & Technology   ‹#›   SHA-512 Processing of a Single 1024-Bit Block   SHA-512 Processing of a Single 1024-Bit Block Message schedule Mi Hi-1 a b c d e f g e 64 Round 0 K0 a b c d e f g e 64 Round 79 K79    W0 W79 + + + + + + + +  Hi  Unit-5   


>> Tokens are: 
[Cryptographic, Hash, Functions,                                 , Darshan, Institute, Engineering, &, Technology,   , ‹#›,   , SHA-512, Processing, Single, 1024, -, Bit, Block,   , SHA-512, Processing, Single, 1024, -, Bit, Block, Message, schedule, Mi, Hi-1, b, c, d, e, f, g, e, 64, Round, 0, K0, b, c, d, e, f, g, e, 64, Round, 79, K79,    , W0, W79, +, +, +, +, +, +, +, +,  , Hi,  , Unit-5,  ] 

>> PoS Tags are: 
[('Cryptographic', 'PROPN'), ('Hash', 'PROPN'), ('Functions', 'PROPN'), ('                                ', 'SPACE'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('Engineering', 'PROPN'), ('&', 'CCONJ'), ('Technology', 'PROPN'), ('  ', 'SPACE'), ('‹#›', 'VERB'), ('  ', 'SPACE'), ('SHA-512', 'PROPN'), ('Processing', 'NOUN'), ('Single', 'ADJ'), ('1024', 'NUM'), ('-', 'PUNCT'), ('Bit', 'PROPN'), ('Block', 'PROPN'), ('  ', 'SPACE'), ('SHA-512', 'PROPN'), ('Processing', 'PROPN'), ('Single', 'ADJ'), ('1024', 'NUM'), ('-', 'PUNCT'), ('Bit', 'PROPN'), ('Block', 'PROPN'), ('Message', 'PROPN'), ('schedule', 'NOUN'), ('Mi', 'PROPN'), ('Hi-1', 'PROPN'), ('b', 'NOUN'), ('c', 'NOUN'), ('d', 'X'), ('e', 'X'), ('f', 'X'), ('g', 'PROPN'), ('e', 'PROPN'), ('64', 'NUM'), ('Round', 'PROPN'), ('0', 'NUM'), ('K0', 'PROPN'), ('b', 'NOUN'), ('c', 'NOUN'), ('d', 'X'), ('e', 'X'), ('f', 'X'), ('g', 'PROPN'), ('e', 'PROPN'), ('64', 'NUM'), ('Round', 'PROPN'), ('79', 'NUM'), ('K79', 'PROPN'), ('   ', 'SPACE'), ('W0', 'PROPN'), ('W79', 'NOUN'), ('+', 'SYM'), ('+', 'CCONJ'), ('+', 'SYM'), ('+', 'SYM'), ('+', 'SYM'), ('+', 'SYM'), ('+', 'SYM'), ('+', 'SYM'), (' ', 'SPACE'), ('Hi', 'INTJ'), (' ', 'SPACE'), ('Unit-5', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Cryptographic', 'compound'), ('Hash', 'compound'), ('Functions', 'compound'), ('                                ', 'nmod'), ('Darshan', 'compound'), ('Institute', 'appos'), ('Engineering', 'pobj'), ('&', 'cc'), ('Technology', 'conj'), ('  ', 'nsubj'), ('‹#›', 'ROOT'), ('  ', 'npadvmod'), ('SHA-512', 'compound'), ('Processing', 'ccomp'), ('Single', 'amod'), ('1024', 'nummod'), ('-', 'punct'), ('Bit', 'compound'), ('Block', 'pobj'), ('  ', 'poss'), ('SHA-512', 'compound'), ('Processing', 'ccomp'), ('Single', 'amod'), ('1024', 'nummod'), ('-', 'punct'), ('Bit', 'compound'), ('Block', 'compound'), ('Message', 'compound'), ('schedule', 'pobj'), ('Mi', 'compound'), ('Hi-1', 'appos'), ('b', 'appos'), ('c', 'prep'), ('d', 'appos'), ('e', 'nmod'), ('f', 'nmod'), ('g', 'nmod'), ('e', 'dep'), ('64', 'nummod'), ('Round', 'nmod'), ('0', 'nummod'), ('K0', 'appos'), ('b', 'npadvmod'), ('c', 'prep'), ('d', 'pobj'), ('e', 'quantmod'), ('f', 'nmod'), ('g', 'nmod'), ('e', 'quantmod'), ('64', 'nummod'), ('Round', 'advmod'), ('79', 'nummod'), ('K79', 'compound'), ('   ', 'pobj'), ('W0', 'compound'), ('W79', 'dobj'), ('+', 'cc'), ('+', 'cc'), ('+', 'cc'), ('+', 'prep'), ('+', 'prep'), ('+', 'prep'), ('+', 'nmod'), ('+', 'conj'), (' ', 'appos'), ('Hi', 'intj'), (' ', 'pobj'), ('Unit-5', 'compound'), (' ', 'punct')]

>> Bigrams: 
[[Cryptographic, Hash], [Hash, Functions], [Functions,                                 ], [                                , Darshan], [Darshan, Institute], [Institute, Engineering], [Engineering, &], [&, Technology], [Technology,   ], [  , ‹#›], [‹#›,   ], [  , SHA-512], [SHA-512, Processing], [Processing, Single], [Single, 1024], [1024, -], [-, Bit], [Bit, Block], [Block,   ], [  , SHA-512], [SHA-512, Processing], [Processing, Single], [Single, 1024], [1024, -], [-, Bit], [Bit, Block], [Block, Message], [Message, schedule], [schedule, Mi], [Mi, Hi-1], [Hi-1, b], [b, c], [c, d], [d, e], [e, f], [f, g], [g, e], [e, 64], [64, Round], [Round, 0], [0, K0], [K0, b], [b, c], [c, d], [d, e], [e, f], [f, g], [g, e], [e, 64], [64, Round], [Round, 79], [79, K79], [K79,    ], [   , W0], [W0, W79], [W79, +], [+, +], [+, +], [+, +], [+, +], [+, +], [+, +], [+, +], [+,  ], [ , Hi], [Hi,  ], [ , Unit-5], [Unit-5,  ]]

>> Trigrams: 
[[Cryptographic, Hash, Functions], [Hash, Functions,                                 ], [Functions,                                 , Darshan], [                                , Darshan, Institute], [Darshan, Institute, Engineering], [Institute, Engineering, &], [Engineering, &, Technology], [&, Technology,   ], [Technology,   , ‹#›], [  , ‹#›,   ], [‹#›,   , SHA-512], [  , SHA-512, Processing], [SHA-512, Processing, Single], [Processing, Single, 1024], [Single, 1024, -], [1024, -, Bit], [-, Bit, Block], [Bit, Block,   ], [Block,   , SHA-512], [  , SHA-512, Processing], [SHA-512, Processing, Single], [Processing, Single, 1024], [Single, 1024, -], [1024, -, Bit], [-, Bit, Block], [Bit, Block, Message], [Block, Message, schedule], [Message, schedule, Mi], [schedule, Mi, Hi-1], [Mi, Hi-1, b], [Hi-1, b, c], [b, c, d], [c, d, e], [d, e, f], [e, f, g], [f, g, e], [g, e, 64], [e, 64, Round], [64, Round, 0], [Round, 0, K0], [0, K0, b], [K0, b, c], [b, c, d], [c, d, e], [d, e, f], [e, f, g], [f, g, e], [g, e, 64], [e, 64, Round], [64, Round, 79], [Round, 79, K79], [79, K79,    ], [K79,    , W0], [   , W0, W79], [W0, W79, +], [W79, +, +], [+, +, +], [+, +, +], [+, +, +], [+, +, +], [+, +, +], [+, +, +], [+, +,  ], [+,  , Hi], [ , Hi,  ], [Hi,  , Unit-5], [ , Unit-5,  ]]

>> Noun Phrases are: 
[Darshan Institute, Engineering, Technology, a Single 1024-Bit Block, a Single 1024-Bit Block Message schedule, Mi Hi-1, a b, e f g e 64 Round 0 K0, e f g e 64 Round 79 K79    W0 W79]

>> Named Entities are: 
[('Functions', 'PERSON'), ('Darshan Institute of Engineering & Technology', 'ORG'), ('Mi', 'PERSON'), ('64', 'CARDINAL'), ('Round 0 K0', 'ORG'), ('64', 'CARDINAL'), ('79', 'CARDINAL'), ('K79', 'ORG')]


============================ Sentence 136 =============================

Cryptographic Hash Functions                                 Darshan Institute of Engineering & Technology   ‹#›   


>> Tokens are: 
[Cryptographic, Hash, Functions,                                 , Darshan, Institute, Engineering, &, Technology,   , ‹#›,  ] 

>> PoS Tags are: 
[('Cryptographic', 'PROPN'), ('Hash', 'PROPN'), ('Functions', 'PROPN'), ('                                ', 'SPACE'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('Engineering', 'PROPN'), ('&', 'CCONJ'), ('Technology', 'PROPN'), ('  ', 'SPACE'), ('‹#›', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Cryptographic', 'compound'), ('Hash', 'compound'), ('Functions', 'compound'), ('                                ', 'ROOT'), ('Darshan', 'compound'), ('Institute', 'appos'), ('Engineering', 'pobj'), ('&', 'cc'), ('Technology', 'conj'), ('  ', 'conj'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[Cryptographic, Hash], [Hash, Functions], [Functions,                                 ], [                                , Darshan], [Darshan, Institute], [Institute, Engineering], [Engineering, &], [&, Technology], [Technology,   ], [  , ‹#›], [‹#›,  ]]

>> Trigrams: 
[[Cryptographic, Hash, Functions], [Hash, Functions,                                 ], [Functions,                                 , Darshan], [                                , Darshan, Institute], [Darshan, Institute, Engineering], [Institute, Engineering, &], [Engineering, &, Technology], [&, Technology,   ], [Technology,   , ‹#›], [  , ‹#›,  ]]

>> Noun Phrases are: 
[Darshan Institute, Engineering, Technology]

>> Named Entities are: 
[('Functions', 'PERSON'), ('Darshan Institute of Engineering & Technology', 'ORG'), ('‹#›', 'DATE')]


============================ Sentence 137 =============================

SHA-512 Processing of a Single 1024-Bit Block Each round takes as input the 512-bit buffer value, abcdefgh, and updates the contents of the buffer. 


>> Tokens are: 
[SHA-512, Processing, Single, 1024, -, Bit, Block, round, takes, input, 512, -, bit, buffer, value, ,, abcdefgh, ,, updates, contents, buffer, .] 

>> PoS Tags are: 
[('SHA-512', 'PROPN'), ('Processing', 'PROPN'), ('Single', 'ADJ'), ('1024', 'NUM'), ('-', 'PUNCT'), ('Bit', 'PROPN'), ('Block', 'PROPN'), ('round', 'NOUN'), ('takes', 'VERB'), ('input', 'NOUN'), ('512', 'NUM'), ('-', 'PUNCT'), ('bit', 'NOUN'), ('buffer', 'NOUN'), ('value', 'NOUN'), (',', 'PUNCT'), ('abcdefgh', 'NOUN'), (',', 'PUNCT'), ('updates', 'VERB'), ('contents', 'NOUN'), ('buffer', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('SHA-512', 'compound'), ('Processing', 'nsubj'), ('Single', 'amod'), ('1024', 'nummod'), ('-', 'punct'), ('Bit', 'compound'), ('Block', 'pobj'), ('round', 'nsubj'), ('takes', 'ROOT'), ('input', 'pobj'), ('512', 'nummod'), ('-', 'punct'), ('bit', 'compound'), ('buffer', 'compound'), ('value', 'dobj'), (',', 'punct'), ('abcdefgh', 'conj'), (',', 'punct'), ('updates', 'conj'), ('contents', 'dobj'), ('buffer', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[SHA-512, Processing], [Processing, Single], [Single, 1024], [1024, -], [-, Bit], [Bit, Block], [Block, round], [round, takes], [takes, input], [input, 512], [512, -], [-, bit], [bit, buffer], [buffer, value], [value, ,], [,, abcdefgh], [abcdefgh, ,], [,, updates], [updates, contents], [contents, buffer], [buffer, .]]

>> Trigrams: 
[[SHA-512, Processing, Single], [Processing, Single, 1024], [Single, 1024, -], [1024, -, Bit], [-, Bit, Block], [Bit, Block, round], [Block, round, takes], [round, takes, input], [takes, input, 512], [input, 512, -], [512, -, bit], [-, bit, buffer], [bit, buffer, value], [buffer, value, ,], [value, ,, abcdefgh], [,, abcdefgh, ,], [abcdefgh, ,, updates], [,, updates, contents], [updates, contents, buffer], [contents, buffer, .]]

>> Noun Phrases are: 
[SHA-512 Processing, a Single 1024-Bit Block, Each round, input, the 512-bit buffer value, abcdefgh, the contents, the buffer]

>> Named Entities are: 
[('512', 'CARDINAL')]


============================ Sentence 138 =============================

At input to the first round, the buffer has the value of the intermediate hash value, Hi-1. 


>> Tokens are: 
[input, round, ,, buffer, value, intermediate, hash, value, ,, Hi-1, .] 

>> PoS Tags are: 
[('input', 'NOUN'), ('round', 'NOUN'), (',', 'PUNCT'), ('buffer', 'NOUN'), ('value', 'NOUN'), ('intermediate', 'ADJ'), ('hash', 'NOUN'), ('value', 'NOUN'), (',', 'PUNCT'), ('Hi-1', 'ADV'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('input', 'pobj'), ('round', 'pobj'), (',', 'punct'), ('buffer', 'nsubj'), ('value', 'dobj'), ('intermediate', 'amod'), ('hash', 'compound'), ('value', 'pobj'), (',', 'punct'), ('Hi-1', 'npadvmod'), ('.', 'punct')]

>> Bigrams: 
[[input, round], [round, ,], [,, buffer], [buffer, value], [value, intermediate], [intermediate, hash], [hash, value], [value, ,], [,, Hi-1], [Hi-1, .]]

>> Trigrams: 
[[input, round, ,], [round, ,, buffer], [,, buffer, value], [buffer, value, intermediate], [value, intermediate, hash], [intermediate, hash, value], [hash, value, ,], [value, ,, Hi-1], [,, Hi-1, .]]

>> Noun Phrases are: 
[input, the first round, the buffer, the value, the intermediate hash value]

>> Named Entities are: 
[('first', 'ORDINAL')]


============================ Sentence 139 =============================

Each round t makes use of a 64-bit value Wt, derived from the current 1024-bit block being processed. 


>> Tokens are: 
[round, t, makes, use, 64, -, bit, value, Wt, ,, derived, current, 1024, -, bit, block, processed, .] 

>> PoS Tags are: 
[('round', 'NOUN'), ('t', 'NOUN'), ('makes', 'VERB'), ('use', 'NOUN'), ('64', 'NUM'), ('-', 'PUNCT'), ('bit', 'NOUN'), ('value', 'NOUN'), ('Wt', 'PROPN'), (',', 'PUNCT'), ('derived', 'VERB'), ('current', 'ADJ'), ('1024', 'NUM'), ('-', 'PUNCT'), ('bit', 'NOUN'), ('block', 'NOUN'), ('processed', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('round', 'amod'), ('t', 'nsubj'), ('makes', 'ROOT'), ('use', 'dobj'), ('64', 'nummod'), ('-', 'punct'), ('bit', 'compound'), ('value', 'pobj'), ('Wt', 'appos'), (',', 'punct'), ('derived', 'acl'), ('current', 'amod'), ('1024', 'nummod'), ('-', 'punct'), ('bit', 'compound'), ('block', 'pobj'), ('processed', 'acl'), ('.', 'punct')]

>> Bigrams: 
[[round, t], [t, makes], [makes, use], [use, 64], [64, -], [-, bit], [bit, value], [value, Wt], [Wt, ,], [,, derived], [derived, current], [current, 1024], [1024, -], [-, bit], [bit, block], [block, processed], [processed, .]]

>> Trigrams: 
[[round, t, makes], [t, makes, use], [makes, use, 64], [use, 64, -], [64, -, bit], [-, bit, value], [bit, value, Wt], [value, Wt, ,], [Wt, ,, derived], [,, derived, current], [derived, current, 1024], [current, 1024, -], [1024, -, bit], [-, bit, block], [bit, block, processed], [block, processed, .]]

>> Noun Phrases are: 
[Each round t, use, a 64-bit value, Wt, the current 1024-bit block]

>> Named Entities are: 
[('64', 'CARDINAL'), ('Wt', 'PERSON'), ('1024', 'DATE')]


============================ Sentence 140 =============================

The output of the eightieth round is added to the input to the first round (Hi-1) to produce Hi. 


>> Tokens are: 
[output, eightieth, round, added, input, round, (, Hi-1, ), produce, Hi, .] 

>> PoS Tags are: 
[('output', 'NOUN'), ('eightieth', 'ADJ'), ('round', 'NOUN'), ('added', 'VERB'), ('input', 'NOUN'), ('round', 'NOUN'), ('(', 'PUNCT'), ('Hi-1', 'NOUN'), (')', 'PUNCT'), ('produce', 'VERB'), ('Hi', 'INTJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('output', 'nsubjpass'), ('eightieth', 'amod'), ('round', 'pobj'), ('added', 'ROOT'), ('input', 'pobj'), ('round', 'pobj'), ('(', 'punct'), ('Hi-1', 'appos'), (')', 'punct'), ('produce', 'advcl'), ('Hi', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[output, eightieth], [eightieth, round], [round, added], [added, input], [input, round], [round, (], [(, Hi-1], [Hi-1, )], [), produce], [produce, Hi], [Hi, .]]

>> Trigrams: 
[[output, eightieth, round], [eightieth, round, added], [round, added, input], [added, input, round], [input, round, (], [round, (, Hi-1], [(, Hi-1, )], [Hi-1, ), produce], [), produce, Hi], [produce, Hi, .]]

>> Noun Phrases are: 
[The output, the eightieth round, the input, the first round, (Hi-1]

>> Named Entities are: 
[('eightieth', 'ORDINAL'), ('first', 'ORDINAL')]


============================ Sentence 141 =============================

 Unit-5   


>> Tokens are: 
[ , Unit-5,  ] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('Unit-5', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'nsubj'), ('Unit-5', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[ , Unit-5], [Unit-5,  ]]

>> Trigrams: 
[[ , Unit-5,  ]]

>> Noun Phrases are: 
[ Unit-5]

>> Named Entities are: 
[]


============================ Sentence 142 =============================

Cryptographic Hash Functions                                 Darshan Institute of Engineering & Technology   ‹#›   


>> Tokens are: 
[Cryptographic, Hash, Functions,                                 , Darshan, Institute, Engineering, &, Technology,   , ‹#›,  ] 

>> PoS Tags are: 
[('Cryptographic', 'PROPN'), ('Hash', 'PROPN'), ('Functions', 'PROPN'), ('                                ', 'SPACE'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('Engineering', 'PROPN'), ('&', 'CCONJ'), ('Technology', 'PROPN'), ('  ', 'SPACE'), ('‹#›', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Cryptographic', 'compound'), ('Hash', 'compound'), ('Functions', 'compound'), ('                                ', 'nsubj'), ('Darshan', 'compound'), ('Institute', 'appos'), ('Engineering', 'pobj'), ('&', 'cc'), ('Technology', 'conj'), ('  ', 'conj'), ('‹#›', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[Cryptographic, Hash], [Hash, Functions], [Functions,                                 ], [                                , Darshan], [Darshan, Institute], [Institute, Engineering], [Engineering, &], [&, Technology], [Technology,   ], [  , ‹#›], [‹#›,  ]]

>> Trigrams: 
[[Cryptographic, Hash, Functions], [Hash, Functions,                                 ], [Functions,                                 , Darshan], [                                , Darshan, Institute], [Darshan, Institute, Engineering], [Institute, Engineering, &], [Engineering, &, Technology], [&, Technology,   ], [Technology,   , ‹#›], [  , ‹#›,  ]]

>> Noun Phrases are: 
[Darshan Institute, Engineering, Technology]

>> Named Entities are: 
[('Functions', 'PERSON'), ('Darshan Institute of Engineering & Technology', 'ORG')]


============================ Sentence 143 =============================

Step – 5 Output   


>> Tokens are: 
[Step, –, 5, Output,  ] 

>> PoS Tags are: 
[('Step', 'NOUN'), ('–', 'PUNCT'), ('5', 'NUM'), ('Output', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Step', 'ROOT'), ('–', 'punct'), ('5', 'nummod'), ('Output', 'appos'), (' ', 'punct')]

>> Bigrams: 
[[Step, –], [–, 5], [5, Output], [Output,  ]]

>> Trigrams: 
[[Step, –, 5], [–, 5, Output], [5, Output,  ]]

>> Noun Phrases are: 
[Step, 5 Output]

>> Named Entities are: 
[]


============================ Sentence 144 =============================

After all N 1024-bit blocks have been processed, the output from the Nth stage is the 512-bit message digest  Unit-5   


>> Tokens are: 
[N, 1024, -, bit, blocks, processed, ,, output, Nth, stage, 512, -, bit, message, digest,  , Unit-5,  ] 

>> PoS Tags are: 
[('N', 'NUM'), ('1024', 'NUM'), ('-', 'PUNCT'), ('bit', 'NOUN'), ('blocks', 'NOUN'), ('processed', 'VERB'), (',', 'PUNCT'), ('output', 'NOUN'), ('Nth', 'PROPN'), ('stage', 'NOUN'), ('512', 'NUM'), ('-', 'PUNCT'), ('bit', 'NOUN'), ('message', 'NOUN'), ('digest', 'NOUN'), (' ', 'SPACE'), ('Unit-5', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('N', 'nmod'), ('1024', 'nummod'), ('-', 'punct'), ('bit', 'compound'), ('blocks', 'nsubjpass'), ('processed', 'advcl'), (',', 'punct'), ('output', 'nsubj'), ('Nth', 'compound'), ('stage', 'pobj'), ('512', 'nummod'), ('-', 'punct'), ('bit', 'compound'), ('message', 'compound'), ('digest', 'attr'), (' ', 'nsubj'), ('Unit-5', 'appos'), (' ', 'punct')]

>> Bigrams: 
[[N, 1024], [1024, -], [-, bit], [bit, blocks], [blocks, processed], [processed, ,], [,, output], [output, Nth], [Nth, stage], [stage, 512], [512, -], [-, bit], [bit, message], [message, digest], [digest,  ], [ , Unit-5], [Unit-5,  ]]

>> Trigrams: 
[[N, 1024, -], [1024, -, bit], [-, bit, blocks], [bit, blocks, processed], [blocks, processed, ,], [processed, ,, output], [,, output, Nth], [output, Nth, stage], [Nth, stage, 512], [stage, 512, -], [512, -, bit], [-, bit, message], [bit, message, digest], [message, digest,  ], [digest,  , Unit-5], [ , Unit-5,  ]]

>> Noun Phrases are: 
[all N 1024-bit blocks, the output, the Nth stage, the 512-bit message digest,  Unit-5]

>> Named Entities are: 
[('Nth', 'ORG'), ('512', 'CARDINAL'), ('Unit-5', 'PRODUCT')]


============================ Sentence 145 =============================

Cryptographic Hash Functions                                 Darshan Institute of Engineering & Technology   ‹#›   SHA-512 Round Function   SHA-512 Round Function – Cont… a b c d e f g h b c d e f g h a Ʃ + + Maj + Ʃ Ch + + + Wt + Kt  Unit-5   


>> Tokens are: 
[Cryptographic, Hash, Functions,                                 , Darshan, Institute, Engineering, &, Technology,   , ‹#›,   , SHA-512, Round, Function,   , SHA-512, Round, Function, –, Cont, …, b, c, d, e, f, g, h, b, c, d, e, f, g, h, Ʃ, +, +, Maj, +, Ʃ, Ch, +, +, +, Wt, +, Kt,  , Unit-5,  ] 

>> PoS Tags are: 
[('Cryptographic', 'PROPN'), ('Hash', 'PROPN'), ('Functions', 'PROPN'), ('                                ', 'SPACE'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('Engineering', 'PROPN'), ('&', 'CCONJ'), ('Technology', 'PROPN'), ('  ', 'SPACE'), ('‹#›', 'VERB'), ('  ', 'SPACE'), ('SHA-512', 'PROPN'), ('Round', 'PROPN'), ('Function', 'PROPN'), ('  ', 'SPACE'), ('SHA-512', 'PROPN'), ('Round', 'PROPN'), ('Function', 'PROPN'), ('–', 'PUNCT'), ('Cont', 'PROPN'), ('…', 'PUNCT'), ('b', 'X'), ('c', 'NOUN'), ('d', 'X'), ('e', 'X'), ('f', 'X'), ('g', 'X'), ('h', 'NOUN'), ('b', 'NOUN'), ('c', 'NOUN'), ('d', 'X'), ('e', 'X'), ('f', 'X'), ('g', 'X'), ('h', 'NOUN'), ('Ʃ', 'NOUN'), ('+', 'SYM'), ('+', 'SYM'), ('Maj', 'PROPN'), ('+', 'PROPN'), ('Ʃ', 'NOUN'), ('Ch', 'NOUN'), ('+', 'PROPN'), ('+', 'PROPN'), ('+', 'PUNCT'), ('Wt', 'PROPN'), ('+', 'PROPN'), ('Kt', 'PROPN'), (' ', 'SPACE'), ('Unit-5', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Cryptographic', 'compound'), ('Hash', 'compound'), ('Functions', 'compound'), ('                                ', 'nmod'), ('Darshan', 'compound'), ('Institute', 'appos'), ('Engineering', 'pobj'), ('&', 'cc'), ('Technology', 'conj'), ('  ', 'nsubj'), ('‹#›', 'ROOT'), ('  ', 'compound'), ('SHA-512', 'compound'), ('Round', 'compound'), ('Function', 'dobj'), ('  ', 'compound'), ('SHA-512', 'compound'), ('Round', 'compound'), ('Function', 'dep'), ('–', 'punct'), ('Cont', 'appos'), ('…', 'punct'), ('b', 'prep'), ('c', 'prep'), ('d', 'appos'), ('e', 'appos'), ('f', 'appos'), ('g', 'pobj'), ('h', 'pobj'), ('b', 'amod'), ('c', 'prep'), ('d', 'pobj'), ('e', 'pobj'), ('f', 'pobj'), ('g', 'pobj'), ('h', 'dative'), ('Ʃ', 'pobj'), ('+', 'prep'), ('+', 'pobj'), ('Maj', 'pobj'), ('+', 'pobj'), ('Ʃ', 'compound'), ('Ch', 'pobj'), ('+', 'amod'), ('+', 'advmod'), ('+', 'pobj'), ('Wt', 'appos'), ('+', 'appos'), ('Kt', 'nmod'), (' ', 'nsubj'), ('Unit-5', 'ccomp'), (' ', 'dobj')]

>> Bigrams: 
[[Cryptographic, Hash], [Hash, Functions], [Functions,                                 ], [                                , Darshan], [Darshan, Institute], [Institute, Engineering], [Engineering, &], [&, Technology], [Technology,   ], [  , ‹#›], [‹#›,   ], [  , SHA-512], [SHA-512, Round], [Round, Function], [Function,   ], [  , SHA-512], [SHA-512, Round], [Round, Function], [Function, –], [–, Cont], [Cont, …], […, b], [b, c], [c, d], [d, e], [e, f], [f, g], [g, h], [h, b], [b, c], [c, d], [d, e], [e, f], [f, g], [g, h], [h, Ʃ], [Ʃ, +], [+, +], [+, Maj], [Maj, +], [+, Ʃ], [Ʃ, Ch], [Ch, +], [+, +], [+, +], [+, Wt], [Wt, +], [+, Kt], [Kt,  ], [ , Unit-5], [Unit-5,  ]]

>> Trigrams: 
[[Cryptographic, Hash, Functions], [Hash, Functions,                                 ], [Functions,                                 , Darshan], [                                , Darshan, Institute], [Darshan, Institute, Engineering], [Institute, Engineering, &], [Engineering, &, Technology], [&, Technology,   ], [Technology,   , ‹#›], [  , ‹#›,   ], [‹#›,   , SHA-512], [  , SHA-512, Round], [SHA-512, Round, Function], [Round, Function,   ], [Function,   , SHA-512], [  , SHA-512, Round], [SHA-512, Round, Function], [Round, Function, –], [Function, –, Cont], [–, Cont, …], [Cont, …, b], […, b, c], [b, c, d], [c, d, e], [d, e, f], [e, f, g], [f, g, h], [g, h, b], [h, b, c], [b, c, d], [c, d, e], [d, e, f], [e, f, g], [f, g, h], [g, h, Ʃ], [h, Ʃ, +], [Ʃ, +, +], [+, +, Maj], [+, Maj, +], [Maj, +, Ʃ], [+, Ʃ, Ch], [Ʃ, Ch, +], [Ch, +, +], [+, +, +], [+, +, Wt], [+, Wt, +], [Wt, +, Kt], [+, Kt,  ], [Kt,  , Unit-5], [ , Unit-5,  ]]

>> Noun Phrases are: 
[Darshan Institute, Engineering, Technology,   SHA-512 Round Function, Cont, h, h, a Ʃ, Maj, +, Ʃ Ch, Wt, +]

>> Named Entities are: 
[('Functions', 'PERSON'), ('Darshan Institute of Engineering & Technology', 'ORG'), ('Round Function', 'PRODUCT'), ('Round Function', 'WORK_OF_ART')]


============================ Sentence 146 =============================

Cryptographic Hash Functions                                 Darshan Institute of Engineering & Technology   ‹#›               SHA-512 Round Function Elements Maj(a,b,c) = 


>> Tokens are: 
[Cryptographic, Hash, Functions,                                 , Darshan, Institute, Engineering, &, Technology,   , ‹#›,               , SHA-512, Round, Function, Elements, Maj(a, ,, b, ,, c, ), =] 

>> PoS Tags are: 
[('Cryptographic', 'PROPN'), ('Hash', 'PROPN'), ('Functions', 'PROPN'), ('                                ', 'SPACE'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('Engineering', 'PROPN'), ('&', 'CCONJ'), ('Technology', 'PROPN'), ('  ', 'SPACE'), ('‹#›', 'VERB'), ('              ', 'SPACE'), ('SHA-512', 'PROPN'), ('Round', 'PROPN'), ('Function', 'PROPN'), ('Elements', 'PROPN'), ('Maj(a', 'PROPN'), (',', 'PUNCT'), ('b', 'X'), (',', 'PUNCT'), ('c', 'NOUN'), (')', 'PUNCT'), ('=', 'PUNCT')] 

>> Dependency Tags are: 
[('Cryptographic', 'compound'), ('Hash', 'compound'), ('Functions', 'compound'), ('                                ', 'nmod'), ('Darshan', 'compound'), ('Institute', 'appos'), ('Engineering', 'pobj'), ('&', 'cc'), ('Technology', 'conj'), ('  ', 'nsubj'), ('‹#›', 'ROOT'), ('              ', 'compound'), ('SHA-512', 'compound'), ('Round', 'compound'), ('Function', 'compound'), ('Elements', 'compound'), ('Maj(a', 'dobj'), (',', 'punct'), ('b', 'appos'), (',', 'punct'), ('c', 'appos'), (')', 'punct'), ('=', 'punct')]

>> Bigrams: 
[[Cryptographic, Hash], [Hash, Functions], [Functions,                                 ], [                                , Darshan], [Darshan, Institute], [Institute, Engineering], [Engineering, &], [&, Technology], [Technology,   ], [  , ‹#›], [‹#›,               ], [              , SHA-512], [SHA-512, Round], [Round, Function], [Function, Elements], [Elements, Maj(a], [Maj(a, ,], [,, b], [b, ,], [,, c], [c, )], [), =]]

>> Trigrams: 
[[Cryptographic, Hash, Functions], [Hash, Functions,                                 ], [Functions,                                 , Darshan], [                                , Darshan, Institute], [Darshan, Institute, Engineering], [Institute, Engineering, &], [Engineering, &, Technology], [&, Technology,   ], [Technology,   , ‹#›], [  , ‹#›,               ], [‹#›,               , SHA-512], [              , SHA-512, Round], [SHA-512, Round, Function], [Round, Function, Elements], [Function, Elements, Maj(a], [Elements, Maj(a, ,], [Maj(a, ,, b], [,, b, ,], [b, ,, c], [,, c, )], [c, ), =]]

>> Noun Phrases are: 
[Darshan Institute, Engineering, Technology,               SHA-512 Round Function Elements Maj(a, c]

>> Named Entities are: 
[('Functions', 'PERSON'), ('Darshan Institute of Engineering & Technology', 'ORG'), ('Round Function Elements Maj(a', 'ORG')]


============================ Sentence 147 =============================

(a AND b) XOR (a AND c) XOR (b AND c) Majority of arguments are true ∑(a) = ROTR(a,28) 


>> Tokens are: 
[(, b, ), XOR, (, c, ), XOR, (, b, c, ), Majority, arguments, true, ∑(a, ), =, ROTR(a,28, )] 

>> PoS Tags are: 
[('(', 'PUNCT'), ('b', 'X'), (')', 'PUNCT'), ('XOR', 'PROPN'), ('(', 'PUNCT'), ('c', 'NOUN'), (')', 'PUNCT'), ('XOR', 'PROPN'), ('(', 'PUNCT'), ('b', 'NOUN'), ('c', 'X'), (')', 'PUNCT'), ('Majority', 'NOUN'), ('arguments', 'NOUN'), ('true', 'ADJ'), ('∑(a', 'NOUN'), (')', 'PUNCT'), ('=', 'SYM'), ('ROTR(a,28', 'PROPN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('(', 'punct'), ('b', 'conj'), (')', 'punct'), ('XOR', 'nsubj'), ('(', 'punct'), ('c', 'conj'), (')', 'punct'), ('XOR', 'appos'), ('(', 'punct'), ('b', 'appos'), ('c', 'conj'), (')', 'punct'), ('Majority', 'nsubj'), ('arguments', 'pobj'), ('true', 'amod'), ('∑(a', 'attr'), (')', 'punct'), ('=', 'punct'), ('ROTR(a,28', 'dep'), (')', 'punct')]

>> Bigrams: 
[[(, b], [b, )], [), XOR], [XOR, (], [(, c], [c, )], [), XOR], [XOR, (], [(, b], [b, c], [c, )], [), Majority], [Majority, arguments], [arguments, true], [true, ∑(a], [∑(a, )], [), =], [=, ROTR(a,28], [ROTR(a,28, )]]

>> Trigrams: 
[[(, b, )], [b, ), XOR], [), XOR, (], [XOR, (, c], [(, c, )], [c, ), XOR], [), XOR, (], [XOR, (, b], [(, b, c], [b, c, )], [c, ), Majority], [), Majority, arguments], [Majority, arguments, true], [arguments, true, ∑(a], [true, ∑(a, )], [∑(a, ), =], [), =, ROTR(a,28], [=, ROTR(a,28, )]]

>> Noun Phrases are: 
[(a AND b) XOR, c, XOR, b, Majority, arguments, true ∑(a]

>> Named Entities are: 
[]


============================ Sentence 148 =============================

XOR ROTR(a,34) 


>> Tokens are: 
[XOR, ROTR(a,34, )] 

>> PoS Tags are: 
[('XOR', 'PROPN'), ('ROTR(a,34', 'PROPN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('XOR', 'compound'), ('ROTR(a,34', 'ROOT'), (')', 'punct')]

>> Bigrams: 
[[XOR, ROTR(a,34], [ROTR(a,34, )]]

>> Trigrams: 
[[XOR, ROTR(a,34, )]]

>> Noun Phrases are: 
[XOR ROTR(a,34]

>> Named Entities are: 
[('XOR ROTR(a,34', 'PERSON')]


============================ Sentence 149 =============================

XOR ROTR(a,39) 


>> Tokens are: 
[XOR, ROTR(a,39, )] 

>> PoS Tags are: 
[('XOR', 'PROPN'), ('ROTR(a,39', 'PROPN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('XOR', 'compound'), ('ROTR(a,39', 'ROOT'), (')', 'punct')]

>> Bigrams: 
[[XOR, ROTR(a,39], [ROTR(a,39, )]]

>> Trigrams: 
[[XOR, ROTR(a,39, )]]

>> Noun Phrases are: 
[XOR ROTR(a,39]

>> Named Entities are: 
[]


============================ Sentence 150 =============================

∑(e) = ROTR(e,14) 


>> Tokens are: 
[∑(e, ), =, ROTR(e,14, )] 

>> PoS Tags are: 
[('∑(e', 'X'), (')', 'PUNCT'), ('=', 'PUNCT'), ('ROTR(e,14', 'PROPN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('∑(e', 'ROOT'), (')', 'punct'), ('=', 'punct'), ('ROTR(e,14', 'appos'), (')', 'punct')]

>> Bigrams: 
[[∑(e, )], [), =], [=, ROTR(e,14], [ROTR(e,14, )]]

>> Trigrams: 
[[∑(e, ), =], [), =, ROTR(e,14], [=, ROTR(e,14, )]]

>> Noun Phrases are: 
[= ROTR(e,14]

>> Named Entities are: 
[]


============================ Sentence 151 =============================

XOR ROTR(e,18) 


>> Tokens are: 
[XOR, ROTR(e,18, )] 

>> PoS Tags are: 
[('XOR', 'PROPN'), ('ROTR(e,18', 'PROPN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('XOR', 'compound'), ('ROTR(e,18', 'ROOT'), (')', 'punct')]

>> Bigrams: 
[[XOR, ROTR(e,18], [ROTR(e,18, )]]

>> Trigrams: 
[[XOR, ROTR(e,18, )]]

>> Noun Phrases are: 
[XOR ROTR(e,18]

>> Named Entities are: 
[]


============================ Sentence 152 =============================

XOR ROTR(e,41) 


>> Tokens are: 
[XOR, ROTR(e,41, )] 

>> PoS Tags are: 
[('XOR', 'PROPN'), ('ROTR(e,41', 'PROPN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('XOR', 'compound'), ('ROTR(e,41', 'ROOT'), (')', 'punct')]

>> Bigrams: 
[[XOR, ROTR(e,41], [ROTR(e,41, )]]

>> Trigrams: 
[[XOR, ROTR(e,41, )]]

>> Noun Phrases are: 
[XOR ROTR(e,41]

>> Named Entities are: 
[('XOR ROTR(e,41', 'PERSON')]


============================ Sentence 153 =============================

+ = addition modulo 264 Kt  = a 64-bit additive constant   


>> Tokens are: 
[+, =, addition, modulo, 264, Kt,  , =, 64, -, bit, additive, constant,  ] 

>> PoS Tags are: 
[('+', 'SYM'), ('=', 'PUNCT'), ('addition', 'NOUN'), ('modulo', 'NOUN'), ('264', 'NUM'), ('Kt', 'PROPN'), (' ', 'SPACE'), ('=', 'PUNCT'), ('64', 'NUM'), ('-', 'PUNCT'), ('bit', 'NOUN'), ('additive', 'ADJ'), ('constant', 'ADJ'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('+', 'punct'), ('=', 'punct'), ('addition', 'compound'), ('modulo', 'ROOT'), ('264', 'appos'), ('Kt', 'appos'), (' ', 'appos'), ('=', 'punct'), ('64', 'nummod'), ('-', 'punct'), ('bit', 'npadvmod'), ('additive', 'amod'), ('constant', 'amod'), (' ', 'appos')]

>> Bigrams: 
[[+, =], [=, addition], [addition, modulo], [modulo, 264], [264, Kt], [Kt,  ], [ , =], [=, 64], [64, -], [-, bit], [bit, additive], [additive, constant], [constant,  ]]

>> Trigrams: 
[[+, =, addition], [=, addition, modulo], [addition, modulo, 264], [modulo, 264, Kt], [264, Kt,  ], [Kt,  , =], [ , =, 64], [=, 64, -], [64, -, bit], [-, bit, additive], [bit, additive, constant], [additive, constant,  ]]

>> Noun Phrases are: 
[+ = addition modulo, Kt]

>> Named Entities are: 
[('264 Kt', 'PRODUCT'), ('64', 'CARDINAL')]


============================ Sentence 154 =============================

Wt = a 64-bit word derived from the current 512-bit input block. 


>> Tokens are: 
[Wt, =, 64, -, bit, word, derived, current, 512, -, bit, input, block, .] 

>> PoS Tags are: 
[('Wt', 'PROPN'), ('=', 'PUNCT'), ('64', 'NUM'), ('-', 'PUNCT'), ('bit', 'NOUN'), ('word', 'NOUN'), ('derived', 'VERB'), ('current', 'ADJ'), ('512', 'NUM'), ('-', 'PUNCT'), ('bit', 'NOUN'), ('input', 'NOUN'), ('block', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Wt', 'ROOT'), ('=', 'punct'), ('64', 'nummod'), ('-', 'punct'), ('bit', 'compound'), ('word', 'appos'), ('derived', 'acl'), ('current', 'amod'), ('512', 'nummod'), ('-', 'punct'), ('bit', 'compound'), ('input', 'compound'), ('block', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Wt, =], [=, 64], [64, -], [-, bit], [bit, word], [word, derived], [derived, current], [current, 512], [512, -], [-, bit], [bit, input], [input, block], [block, .]]

>> Trigrams: 
[[Wt, =, 64], [=, 64, -], [64, -, bit], [-, bit, word], [bit, word, derived], [word, derived, current], [derived, current, 512], [current, 512, -], [512, -, bit], [-, bit, input], [bit, input, block], [input, block, .]]

>> Noun Phrases are: 
[Wt, a 64-bit word, the current 512-bit input block]

>> Named Entities are: 
[('64', 'CARDINAL'), ('512-bit', 'QUANTITY')]


============================ Sentence 155 =============================

  Unit-5   


>> Tokens are: 
[  , Unit-5,  ] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('Unit-5', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'nsubj'), ('Unit-5', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[  , Unit-5], [Unit-5,  ]]

>> Trigrams: 
[[  , Unit-5,  ]]

>> Noun Phrases are: 
[  Unit-5]

>> Named Entities are: 
[]


============================ Sentence 156 =============================

Cryptographic Hash Functions                                 Darshan Institute of Engineering & Technology   ‹#› 


>> Tokens are: 
[Cryptographic, Hash, Functions,                                 , Darshan, Institute, Engineering, &, Technology,   , ‹#›] 

>> PoS Tags are: 
[('Cryptographic', 'PROPN'), ('Hash', 'PROPN'), ('Functions', 'PROPN'), ('                                ', 'SPACE'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('Engineering', 'PROPN'), ('&', 'CCONJ'), ('Technology', 'PROPN'), ('  ', 'SPACE'), ('‹#›', 'VERB')] 

>> Dependency Tags are: 
[('Cryptographic', 'compound'), ('Hash', 'compound'), ('Functions', 'compound'), ('                                ', 'ROOT'), ('Darshan', 'compound'), ('Institute', 'appos'), ('Engineering', 'pobj'), ('&', 'cc'), ('Technology', 'conj'), ('  ', 'conj'), ('‹#›', 'punct')]

>> Bigrams: 
[[Cryptographic, Hash], [Hash, Functions], [Functions,                                 ], [                                , Darshan], [Darshan, Institute], [Institute, Engineering], [Engineering, &], [&, Technology], [Technology,   ], [  , ‹#›]]

>> Trigrams: 
[[Cryptographic, Hash, Functions], [Hash, Functions,                                 ], [Functions,                                 , Darshan], [                                , Darshan, Institute], [Darshan, Institute, Engineering], [Institute, Engineering, &], [Engineering, &, Technology], [&, Technology,   ], [Technology,   , ‹#›]]

>> Noun Phrases are: 
[Darshan Institute, Engineering, Technology]

>> Named Entities are: 
[('Functions', 'PERSON'), ('Darshan Institute of Engineering & Technology', 'ORG')]
