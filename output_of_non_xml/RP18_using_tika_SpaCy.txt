				 *** Text Processing using Spacy *** 


============================ Sentence 1 =============================

1Facebook AI Research, 770 Broadway, New York, New York 10003 USA. 


>> Tokens are: 
[1Facebook, AI, Research, ,, 770, Broadway, ,, New, York, ,, New, York, 10003, USA, .] 

>> PoS Tags are: 
[('1Facebook', 'PROPN'), ('AI', 'PROPN'), ('Research', 'PROPN'), (',', 'PUNCT'), ('770', 'NUM'), ('Broadway', 'PROPN'), (',', 'PUNCT'), ('New', 'PROPN'), ('York', 'PROPN'), (',', 'PUNCT'), ('New', 'PROPN'), ('York', 'PROPN'), ('10003', 'NUM'), ('USA', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('1Facebook', 'compound'), ('AI', 'compound'), ('Research', 'ROOT'), (',', 'punct'), ('770', 'nummod'), ('Broadway', 'appos'), (',', 'punct'), ('New', 'compound'), ('York', 'conj'), (',', 'punct'), ('New', 'compound'), ('York', 'npadvmod'), ('10003', 'nummod'), ('USA', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[1Facebook, AI], [AI, Research], [Research, ,], [,, 770], [770, Broadway], [Broadway, ,], [,, New], [New, York], [York, ,], [,, New], [New, York], [York, 10003], [10003, USA], [USA, .]]

>> Trigrams: 
[[1Facebook, AI, Research], [AI, Research, ,], [Research, ,, 770], [,, 770, Broadway], [770, Broadway, ,], [Broadway, ,, New], [,, New, York], [New, York, ,], [York, ,, New], [,, New, York], [New, York, 10003], [York, 10003, USA], [10003, USA, .]]

>> Noun Phrases are: 
[1Facebook AI Research, 770 Broadway, New York, 10003 USA]

>> Named Entities are: 
[('AI Research', 'ORG'), ('770', 'CARDINAL'), ('Broadway', 'FAC'), ('New York', 'GPE'), ('New York', 'GPE'), ('10003', 'DATE'), ('USA', 'GPE')]


============================ Sentence 2 =============================

2New York University, 715 Broadway, New York, New York 10003, USA. 


>> Tokens are: 
[2New, York, University, ,, 715, Broadway, ,, New, York, ,, New, York, 10003, ,, USA, .] 

>> PoS Tags are: 
[('2New', 'NUM'), ('York', 'PROPN'), ('University', 'PROPN'), (',', 'PUNCT'), ('715', 'NUM'), ('Broadway', 'PROPN'), (',', 'PUNCT'), ('New', 'PROPN'), ('York', 'PROPN'), (',', 'PUNCT'), ('New', 'PROPN'), ('York', 'PROPN'), ('10003', 'NUM'), (',', 'PUNCT'), ('USA', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('2New', 'compound'), ('York', 'compound'), ('University', 'ROOT'), (',', 'punct'), ('715', 'nummod'), ('Broadway', 'appos'), (',', 'punct'), ('New', 'compound'), ('York', 'conj'), (',', 'punct'), ('New', 'compound'), ('York', 'conj'), ('10003', 'nummod'), (',', 'punct'), ('USA', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[2New, York], [York, University], [University, ,], [,, 715], [715, Broadway], [Broadway, ,], [,, New], [New, York], [York, ,], [,, New], [New, York], [York, 10003], [10003, ,], [,, USA], [USA, .]]

>> Trigrams: 
[[2New, York, University], [York, University, ,], [University, ,, 715], [,, 715, Broadway], [715, Broadway, ,], [Broadway, ,, New], [,, New, York], [New, York, ,], [York, ,, New], [,, New, York], [New, York, 10003], [York, 10003, ,], [10003, ,, USA], [,, USA, .]]

>> Noun Phrases are: 
[2New York University, 715 Broadway, New York, New York, USA]

>> Named Entities are: 
[('2New York University', 'ORG'), ('715', 'CARDINAL'), ('Broadway', 'FAC'), ('New York', 'GPE'), ('New York', 'GPE'), ('10003', 'DATE'), ('USA', 'GPE')]


============================ Sentence 3 =============================

3Department of Computer Science and Operations   


>> Tokens are: 
[3Department, Computer, Science, Operations,  ] 

>> PoS Tags are: 
[('3Department', 'ADJ'), ('Computer', 'PROPN'), ('Science', 'PROPN'), ('Operations', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('3Department', 'ROOT'), ('Computer', 'compound'), ('Science', 'pobj'), ('Operations', 'conj'), (' ', 'advmod')]

>> Bigrams: 
[[3Department, Computer], [Computer, Science], [Science, Operations], [Operations,  ]]

>> Trigrams: 
[[3Department, Computer, Science], [Computer, Science, Operations], [Science, Operations,  ]]

>> Noun Phrases are: 
[Computer Science, Operations]

>> Named Entities are: 
[('3Department', 'CARDINAL'), ('Computer Science and Operations  ', 'ORG')]


============================ Sentence 4 =============================

Research Université de Montréal, Pavillon André-Aisenstadt, PO Box 6128   


>> Tokens are: 
[Research, Université, de, Montréal, ,, Pavillon, André, -, Aisenstadt, ,, PO, Box, 6128,  ] 

>> PoS Tags are: 
[('Research', 'PROPN'), ('Université', 'PROPN'), ('de', 'X'), ('Montréal', 'PROPN'), (',', 'PUNCT'), ('Pavillon', 'PROPN'), ('André', 'PROPN'), ('-', 'PUNCT'), ('Aisenstadt', 'PROPN'), (',', 'PUNCT'), ('PO', 'NOUN'), ('Box', 'PROPN'), ('6128', 'NUM'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Research', 'compound'), ('Université', 'compound'), ('de', 'nmod'), ('Montréal', 'ROOT'), (',', 'punct'), ('Pavillon', 'compound'), ('André', 'compound'), ('-', 'punct'), ('Aisenstadt', 'appos'), (',', 'punct'), ('PO', 'compound'), ('Box', 'conj'), ('6128', 'nummod'), (' ', 'punct')]

>> Bigrams: 
[[Research, Université], [Université, de], [de, Montréal], [Montréal, ,], [,, Pavillon], [Pavillon, André], [André, -], [-, Aisenstadt], [Aisenstadt, ,], [,, PO], [PO, Box], [Box, 6128], [6128,  ]]

>> Trigrams: 
[[Research, Université, de], [Université, de, Montréal], [de, Montréal, ,], [Montréal, ,, Pavillon], [,, Pavillon, André], [Pavillon, André, -], [André, -, Aisenstadt], [-, Aisenstadt, ,], [Aisenstadt, ,, PO], [,, PO, Box], [PO, Box, 6128], [Box, 6128,  ]]

>> Noun Phrases are: 
[Research Université de Montréal, Pavillon André-Aisenstadt, PO Box]

>> Named Entities are: 
[('Pavillon André-Aisenstadt', 'PERSON')]


============================ Sentence 5 =============================

Centre-Ville STN Montréal, Quebec H3C 3J7, Canada. 


>> Tokens are: 
[Centre, -, Ville, STN, Montréal, ,, Quebec, H3C, 3J7, ,, Canada, .] 

>> PoS Tags are: 
[('Centre', 'PROPN'), ('-', 'PUNCT'), ('Ville', 'PROPN'), ('STN', 'PROPN'), ('Montréal', 'PROPN'), (',', 'PUNCT'), ('Quebec', 'PROPN'), ('H3C', 'PROPN'), ('3J7', 'NUM'), (',', 'PUNCT'), ('Canada', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Centre', 'compound'), ('-', 'punct'), ('Ville', 'compound'), ('STN', 'compound'), ('Montréal', 'ROOT'), (',', 'punct'), ('Quebec', 'compound'), ('H3C', 'appos'), ('3J7', 'appos'), (',', 'punct'), ('Canada', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[Centre, -], [-, Ville], [Ville, STN], [STN, Montréal], [Montréal, ,], [,, Quebec], [Quebec, H3C], [H3C, 3J7], [3J7, ,], [,, Canada], [Canada, .]]

>> Trigrams: 
[[Centre, -, Ville], [-, Ville, STN], [Ville, STN, Montréal], [STN, Montréal, ,], [Montréal, ,, Quebec], [,, Quebec, H3C], [Quebec, H3C, 3J7], [H3C, 3J7, ,], [3J7, ,, Canada], [,, Canada, .]]

>> Noun Phrases are: 
[Centre-Ville STN Montréal, Quebec H3C, Canada]

>> Named Entities are: 
[('Centre', 'GPE'), ('Montréal', 'GPE'), ('Quebec', 'GPE'), ('Canada', 'GPE')]


============================ Sentence 6 =============================

4Google, 1600 Amphitheatre Parkway, Mountain View, California  94043, USA. 


>> Tokens are: 
[4Google, ,, 1600, Amphitheatre, Parkway, ,, Mountain, View, ,, California,  , 94043, ,, USA, .] 

>> PoS Tags are: 
[('4Google', 'PROPN'), (',', 'PUNCT'), ('1600', 'NUM'), ('Amphitheatre', 'PROPN'), ('Parkway', 'PROPN'), (',', 'PUNCT'), ('Mountain', 'PROPN'), ('View', 'PROPN'), (',', 'PUNCT'), ('California', 'PROPN'), (' ', 'SPACE'), ('94043', 'NUM'), (',', 'PUNCT'), ('USA', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('4Google', 'ROOT'), (',', 'punct'), ('1600', 'npadvmod'), ('Amphitheatre', 'compound'), ('Parkway', 'appos'), (',', 'punct'), ('Mountain', 'compound'), ('View', 'conj'), (',', 'punct'), ('California', 'npadvmod'), (' ', 'appos'), ('94043', 'appos'), (',', 'punct'), ('USA', 'npadvmod'), ('.', 'punct')]

>> Bigrams: 
[[4Google, ,], [,, 1600], [1600, Amphitheatre], [Amphitheatre, Parkway], [Parkway, ,], [,, Mountain], [Mountain, View], [View, ,], [,, California], [California,  ], [ , 94043], [94043, ,], [,, USA], [USA, .]]

>> Trigrams: 
[[4Google, ,, 1600], [,, 1600, Amphitheatre], [1600, Amphitheatre, Parkway], [Amphitheatre, Parkway, ,], [Parkway, ,, Mountain], [,, Mountain, View], [Mountain, View, ,], [View, ,, California], [,, California,  ], [California,  , 94043], [ , 94043, ,], [94043, ,, USA], [,, USA, .]]

>> Noun Phrases are: 
[4Google, Amphitheatre Parkway, Mountain View]

>> Named Entities are: 
[('4Google', 'CARDINAL'), ('1600', 'DATE'), ('Amphitheatre Parkway', 'FAC'), ('Mountain View', 'GPE'), ('California', 'GPE'), ('94043', 'DATE'), ('USA', 'GPE')]


============================ Sentence 7 =============================

5Department of Computer Science, University of Toronto, 6 King’s College Road, Toronto, Ontario M5S 3G4, Canada. 


>> Tokens are: 
[5Department, Computer, Science, ,, University, Toronto, ,, 6, King, College, Road, ,, Toronto, ,, Ontario, M5S, 3G4, ,, Canada, .] 

>> PoS Tags are: 
[('5Department', 'NOUN'), ('Computer', 'PROPN'), ('Science', 'PROPN'), (',', 'PUNCT'), ('University', 'PROPN'), ('Toronto', 'PROPN'), (',', 'PUNCT'), ('6', 'NUM'), ('King', 'PROPN'), ('College', 'PROPN'), ('Road', 'PROPN'), (',', 'PUNCT'), ('Toronto', 'PROPN'), (',', 'PUNCT'), ('Ontario', 'PROPN'), ('M5S', 'PROPN'), ('3G4', 'NUM'), (',', 'PUNCT'), ('Canada', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('5Department', 'ROOT'), ('Computer', 'compound'), ('Science', 'pobj'), (',', 'punct'), ('University', 'appos'), ('Toronto', 'pobj'), (',', 'punct'), ('6', 'nummod'), ('King', 'poss'), ('College', 'compound'), ('Road', 'conj'), (',', 'punct'), ('Toronto', 'conj'), (',', 'punct'), ('Ontario', 'compound'), ('M5S', 'conj'), ('3G4', 'appos'), (',', 'punct'), ('Canada', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[5Department, Computer], [Computer, Science], [Science, ,], [,, University], [University, Toronto], [Toronto, ,], [,, 6], [6, King], [King, College], [College, Road], [Road, ,], [,, Toronto], [Toronto, ,], [,, Ontario], [Ontario, M5S], [M5S, 3G4], [3G4, ,], [,, Canada], [Canada, .]]

>> Trigrams: 
[[5Department, Computer, Science], [Computer, Science, ,], [Science, ,, University], [,, University, Toronto], [University, Toronto, ,], [Toronto, ,, 6], [,, 6, King], [6, King, College], [King, College, Road], [College, Road, ,], [Road, ,, Toronto], [,, Toronto, ,], [Toronto, ,, Ontario], [,, Ontario, M5S], [Ontario, M5S, 3G4], [M5S, 3G4, ,], [3G4, ,, Canada], [,, Canada, .]]

>> Noun Phrases are: 
[5Department, Computer Science, University, Toronto, 6 King’s College Road, Toronto, Ontario M5S, Canada]

>> Named Entities are: 
[('5Department', 'CARDINAL'), ('Computer Science', 'ORG'), ('University of Toronto', 'ORG'), ('6 King’s College Road', 'ORG'), ('Toronto', 'GPE'), ('Ontario', 'GPE'), ('Canada', 'GPE')]


============================ Sentence 8 =============================

 Machine-learning technology powers many aspects of modern society: from web searches to content filtering on social net-works to recommendations on e-commerce websites, and  it is increasingly present in consumer products such as cameras and  smartphones. 


>> Tokens are: 
[ , Machine, -, learning, technology, powers, aspects, modern, society, :, web, searches, content, filtering, social, net, -, works, recommendations, e, -, commerce, websites, ,,  , increasingly, present, consumer, products, cameras,  , smartphones, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('Machine', 'NOUN'), ('-', 'PUNCT'), ('learning', 'VERB'), ('technology', 'NOUN'), ('powers', 'VERB'), ('aspects', 'NOUN'), ('modern', 'ADJ'), ('society', 'NOUN'), (':', 'PUNCT'), ('web', 'NOUN'), ('searches', 'NOUN'), ('content', 'NOUN'), ('filtering', 'VERB'), ('social', 'ADJ'), ('net', 'NOUN'), ('-', 'PUNCT'), ('works', 'NOUN'), ('recommendations', 'NOUN'), ('e', 'NOUN'), ('-', 'NOUN'), ('commerce', 'NOUN'), ('websites', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('increasingly', 'ADV'), ('present', 'ADJ'), ('consumer', 'NOUN'), ('products', 'NOUN'), ('cameras', 'NOUN'), (' ', 'SPACE'), ('smartphones', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'nmod'), ('Machine', 'npadvmod'), ('-', 'punct'), ('learning', 'amod'), ('technology', 'nsubj'), ('powers', 'ROOT'), ('aspects', 'dobj'), ('modern', 'amod'), ('society', 'pobj'), (':', 'punct'), ('web', 'compound'), ('searches', 'pobj'), ('content', 'advcl'), ('filtering', 'xcomp'), ('social', 'amod'), ('net', 'compound'), ('-', 'punct'), ('works', 'pobj'), ('recommendations', 'pobj'), ('e', 'compound'), ('-', 'compound'), ('commerce', 'compound'), ('websites', 'pobj'), (',', 'punct'), (' ', 'conj'), ('increasingly', 'advmod'), ('present', 'acomp'), ('consumer', 'compound'), ('products', 'pobj'), ('cameras', 'pobj'), (' ', 'compound'), ('smartphones', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[ , Machine], [Machine, -], [-, learning], [learning, technology], [technology, powers], [powers, aspects], [aspects, modern], [modern, society], [society, :], [:, web], [web, searches], [searches, content], [content, filtering], [filtering, social], [social, net], [net, -], [-, works], [works, recommendations], [recommendations, e], [e, -], [-, commerce], [commerce, websites], [websites, ,], [,,  ], [ , increasingly], [increasingly, present], [present, consumer], [consumer, products], [products, cameras], [cameras,  ], [ , smartphones], [smartphones, .]]

>> Trigrams: 
[[ , Machine, -], [Machine, -, learning], [-, learning, technology], [learning, technology, powers], [technology, powers, aspects], [powers, aspects, modern], [aspects, modern, society], [modern, society, :], [society, :, web], [:, web, searches], [web, searches, content], [searches, content, filtering], [content, filtering, social], [filtering, social, net], [social, net, -], [net, -, works], [-, works, recommendations], [works, recommendations, e], [recommendations, e, -], [e, -, commerce], [-, commerce, websites], [commerce, websites, ,], [websites, ,,  ], [,,  , increasingly], [ , increasingly, present], [increasingly, present, consumer], [present, consumer, products], [consumer, products, cameras], [products, cameras,  ], [cameras,  , smartphones], [ , smartphones, .]]

>> Noun Phrases are: 
[ Machine-learning technology, many aspects, modern society, web searches, social net-works, recommendations, e-commerce websites, it, consumer products, cameras,  smartphones]

>> Named Entities are: 
[]


============================ Sentence 9 =============================

Machine-learning systems are used to identify objects  in images, transcribe speech into text, match news items, posts or  products with users’ interests, and select relevant results of search.   


>> Tokens are: 
[Machine, -, learning, systems, identify, objects,  , images, ,, transcribe, speech, text, ,, match, news, items, ,, posts,  , products, users, ’, interests, ,, select, relevant, results, search, .,  ] 

>> PoS Tags are: 
[('Machine', 'NOUN'), ('-', 'PUNCT'), ('learning', 'VERB'), ('systems', 'NOUN'), ('identify', 'VERB'), ('objects', 'NOUN'), (' ', 'SPACE'), ('images', 'NOUN'), (',', 'PUNCT'), ('transcribe', 'NOUN'), ('speech', 'NOUN'), ('text', 'NOUN'), (',', 'PUNCT'), ('match', 'NOUN'), ('news', 'NOUN'), ('items', 'NOUN'), (',', 'PUNCT'), ('posts', 'NOUN'), (' ', 'SPACE'), ('products', 'NOUN'), ('users', 'NOUN'), ('’', 'PART'), ('interests', 'NOUN'), (',', 'PUNCT'), ('select', 'VERB'), ('relevant', 'ADJ'), ('results', 'NOUN'), ('search', 'NOUN'), ('.', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Machine', 'compound'), ('-', 'punct'), ('learning', 'compound'), ('systems', 'nsubjpass'), ('identify', 'xcomp'), ('objects', 'dobj'), (' ', 'dobj'), ('images', 'pobj'), (',', 'punct'), ('transcribe', 'xcomp'), ('speech', 'dobj'), ('text', 'pobj'), (',', 'punct'), ('match', 'conj'), ('news', 'compound'), ('items', 'dobj'), (',', 'punct'), ('posts', 'conj'), (' ', 'compound'), ('products', 'conj'), ('users', 'poss'), ('’', 'case'), ('interests', 'pobj'), (',', 'punct'), ('select', 'conj'), ('relevant', 'amod'), ('results', 'dobj'), ('search', 'pobj'), ('.', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[Machine, -], [-, learning], [learning, systems], [systems, identify], [identify, objects], [objects,  ], [ , images], [images, ,], [,, transcribe], [transcribe, speech], [speech, text], [text, ,], [,, match], [match, news], [news, items], [items, ,], [,, posts], [posts,  ], [ , products], [products, users], [users, ’], [’, interests], [interests, ,], [,, select], [select, relevant], [relevant, results], [results, search], [search, .], [.,  ]]

>> Trigrams: 
[[Machine, -, learning], [-, learning, systems], [learning, systems, identify], [systems, identify, objects], [identify, objects,  ], [objects,  , images], [ , images, ,], [images, ,, transcribe], [,, transcribe, speech], [transcribe, speech, text], [speech, text, ,], [text, ,, match], [,, match, news], [match, news, items], [news, items, ,], [items, ,, posts], [,, posts,  ], [posts,  , products], [ , products, users], [products, users, ’], [users, ’, interests], [’, interests, ,], [interests, ,, select], [,, select, relevant], [select, relevant, results], [relevant, results, search], [results, search, .], [search, .,  ]]

>> Noun Phrases are: 
[Machine-learning systems, objects, images, speech, text, news items, posts,  products, users’ interests, relevant results, search]

>> Named Entities are: 
[]


============================ Sentence 10 =============================

Increasingly, these applications make use of a class of techniques called  deep learning. 


>> Tokens are: 
[Increasingly, ,, applications, use, class, techniques, called,  , deep, learning, .] 

>> PoS Tags are: 
[('Increasingly', 'ADV'), (',', 'PUNCT'), ('applications', 'NOUN'), ('use', 'NOUN'), ('class', 'NOUN'), ('techniques', 'NOUN'), ('called', 'VERB'), (' ', 'SPACE'), ('deep', 'ADJ'), ('learning', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Increasingly', 'advmod'), (',', 'punct'), ('applications', 'nsubj'), ('use', 'dobj'), ('class', 'pobj'), ('techniques', 'pobj'), ('called', 'acl'), (' ', 'oprd'), ('deep', 'amod'), ('learning', 'oprd'), ('.', 'punct')]

>> Bigrams: 
[[Increasingly, ,], [,, applications], [applications, use], [use, class], [class, techniques], [techniques, called], [called,  ], [ , deep], [deep, learning], [learning, .]]

>> Trigrams: 
[[Increasingly, ,, applications], [,, applications, use], [applications, use, class], [use, class, techniques], [class, techniques, called], [techniques, called,  ], [called,  , deep], [ , deep, learning], [deep, learning, .]]

>> Noun Phrases are: 
[these applications, use, a class, techniques, deep learning]

>> Named Entities are: 
[]


============================ Sentence 11 =============================

  Conventional machine-learning techniques were limited in their  ability to process natural data in their raw form. 


>> Tokens are: 
[  , Conventional, machine, -, learning, techniques, limited,  , ability, process, natural, data, raw, form, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('Conventional', 'ADJ'), ('machine', 'NOUN'), ('-', 'PUNCT'), ('learning', 'VERB'), ('techniques', 'NOUN'), ('limited', 'VERB'), (' ', 'SPACE'), ('ability', 'NOUN'), ('process', 'VERB'), ('natural', 'ADJ'), ('data', 'NOUN'), ('raw', 'ADJ'), ('form', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'nmod'), ('Conventional', 'amod'), ('machine', 'npadvmod'), ('-', 'punct'), ('learning', 'amod'), ('techniques', 'nsubjpass'), ('limited', 'ROOT'), (' ', 'compound'), ('ability', 'pobj'), ('process', 'acl'), ('natural', 'amod'), ('data', 'dobj'), ('raw', 'amod'), ('form', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[  , Conventional], [Conventional, machine], [machine, -], [-, learning], [learning, techniques], [techniques, limited], [limited,  ], [ , ability], [ability, process], [process, natural], [natural, data], [data, raw], [raw, form], [form, .]]

>> Trigrams: 
[[  , Conventional, machine], [Conventional, machine, -], [machine, -, learning], [-, learning, techniques], [learning, techniques, limited], [techniques, limited,  ], [limited,  , ability], [ , ability, process], [ability, process, natural], [process, natural, data], [natural, data, raw], [data, raw, form], [raw, form, .]]

>> Noun Phrases are: 
[  Conventional machine-learning techniques, their  ability, natural data, their raw form]

>> Named Entities are: 
[]


============================ Sentence 12 =============================

For decades, con- structing a pattern-recognition or machine-learning system required  careful engineering and considerable domain expertise to design a fea- ture extractor that transformed the raw data (such as the pixel values  of an image) into a suitable internal representation or feature vector  from which the learning subsystem, often a classifier, could detect or  classify patterns in the input. 


>> Tokens are: 
[decades, ,, con-, structing, pattern, -, recognition, machine, -, learning, system, required,  , careful, engineering, considerable, domain, expertise, design, fea-, ture, extractor, transformed, raw, data, (, pixel, values,  , image, ), suitable, internal, representation, feature, vector,  , learning, subsystem, ,, classifier, ,, detect,  , classify, patterns, input, .] 

>> PoS Tags are: 
[('decades', 'NOUN'), (',', 'PUNCT'), ('con-', 'NOUN'), ('structing', 'VERB'), ('pattern', 'NOUN'), ('-', 'PUNCT'), ('recognition', 'NOUN'), ('machine', 'NOUN'), ('-', 'PUNCT'), ('learning', 'VERB'), ('system', 'NOUN'), ('required', 'VERB'), (' ', 'SPACE'), ('careful', 'ADJ'), ('engineering', 'NOUN'), ('considerable', 'ADJ'), ('domain', 'NOUN'), ('expertise', 'NOUN'), ('design', 'VERB'), ('fea-', 'ADJ'), ('ture', 'NOUN'), ('extractor', 'NOUN'), ('transformed', 'VERB'), ('raw', 'ADJ'), ('data', 'NOUN'), ('(', 'PUNCT'), ('pixel', 'ADJ'), ('values', 'VERB'), (' ', 'SPACE'), ('image', 'NOUN'), (')', 'PUNCT'), ('suitable', 'ADJ'), ('internal', 'ADJ'), ('representation', 'NOUN'), ('feature', 'NOUN'), ('vector', 'NOUN'), (' ', 'SPACE'), ('learning', 'NOUN'), ('subsystem', 'NOUN'), (',', 'PUNCT'), ('classifier', 'NOUN'), (',', 'PUNCT'), ('detect', 'VERB'), (' ', 'SPACE'), ('classify', 'VERB'), ('patterns', 'NOUN'), ('input', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('decades', 'pobj'), (',', 'punct'), ('con-', 'nsubj'), ('structing', 'acl'), ('pattern', 'nmod'), ('-', 'punct'), ('recognition', 'nmod'), ('machine', 'npadvmod'), ('-', 'punct'), ('learning', 'conj'), ('system', 'dobj'), ('required', 'ROOT'), (' ', 'dobj'), ('careful', 'amod'), ('engineering', 'pobj'), ('considerable', 'amod'), ('domain', 'compound'), ('expertise', 'conj'), ('design', 'advcl'), ('fea-', 'compound'), ('ture', 'compound'), ('extractor', 'dobj'), ('transformed', 'relcl'), ('raw', 'amod'), ('data', 'dobj'), ('(', 'punct'), ('pixel', 'amod'), ('values', 'pobj'), (' ', 'dobj'), ('image', 'pobj'), (')', 'punct'), ('suitable', 'amod'), ('internal', 'amod'), ('representation', 'pobj'), ('feature', 'compound'), ('vector', 'conj'), (' ', 'appos'), ('learning', 'compound'), ('subsystem', 'nsubj'), (',', 'punct'), ('classifier', 'appos'), (',', 'punct'), ('detect', 'relcl'), (' ', 'nsubj'), ('classify', 'conj'), ('patterns', 'dobj'), ('input', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[decades, ,], [,, con-], [con-, structing], [structing, pattern], [pattern, -], [-, recognition], [recognition, machine], [machine, -], [-, learning], [learning, system], [system, required], [required,  ], [ , careful], [careful, engineering], [engineering, considerable], [considerable, domain], [domain, expertise], [expertise, design], [design, fea-], [fea-, ture], [ture, extractor], [extractor, transformed], [transformed, raw], [raw, data], [data, (], [(, pixel], [pixel, values], [values,  ], [ , image], [image, )], [), suitable], [suitable, internal], [internal, representation], [representation, feature], [feature, vector], [vector,  ], [ , learning], [learning, subsystem], [subsystem, ,], [,, classifier], [classifier, ,], [,, detect], [detect,  ], [ , classify], [classify, patterns], [patterns, input], [input, .]]

>> Trigrams: 
[[decades, ,, con-], [,, con-, structing], [con-, structing, pattern], [structing, pattern, -], [pattern, -, recognition], [-, recognition, machine], [recognition, machine, -], [machine, -, learning], [-, learning, system], [learning, system, required], [system, required,  ], [required,  , careful], [ , careful, engineering], [careful, engineering, considerable], [engineering, considerable, domain], [considerable, domain, expertise], [domain, expertise, design], [expertise, design, fea-], [design, fea-, ture], [fea-, ture, extractor], [ture, extractor, transformed], [extractor, transformed, raw], [transformed, raw, data], [raw, data, (], [data, (, pixel], [(, pixel, values], [pixel, values,  ], [values,  , image], [ , image, )], [image, ), suitable], [), suitable, internal], [suitable, internal, representation], [internal, representation, feature], [representation, feature, vector], [feature, vector,  ], [vector,  , learning], [ , learning, subsystem], [learning, subsystem, ,], [subsystem, ,, classifier], [,, classifier, ,], [classifier, ,, detect], [,, detect,  ], [detect,  , classify], [ , classify, patterns], [classify, patterns, input], [patterns, input, .]]

>> Noun Phrases are: 
[decades, con-, a pattern-recognition or machine-learning system, careful engineering, considerable domain expertise, a fea- ture extractor, the raw data, an image, a suitable internal representation, feature vector, the learning subsystem, often a classifier, patterns, the input]

>> Named Entities are: 
[('decades', 'DATE')]


============================ Sentence 13 =============================

  Representation learning is a set of methods that allows a machine to  be fed with raw data and to automatically discover the representations  needed for detection or classification. 


>> Tokens are: 
[  , Representation, learning, set, methods, allows, machine,  , fed, raw, data, automatically, discover, representations,  , needed, detection, classification, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('Representation', 'PROPN'), ('learning', 'NOUN'), ('set', 'NOUN'), ('methods', 'NOUN'), ('allows', 'VERB'), ('machine', 'NOUN'), (' ', 'SPACE'), ('fed', 'VERB'), ('raw', 'ADJ'), ('data', 'NOUN'), ('automatically', 'ADV'), ('discover', 'VERB'), ('representations', 'NOUN'), (' ', 'SPACE'), ('needed', 'VERB'), ('detection', 'NOUN'), ('classification', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'nummod'), ('Representation', 'compound'), ('learning', 'nsubj'), ('set', 'attr'), ('methods', 'pobj'), ('allows', 'relcl'), ('machine', 'dobj'), (' ', 'pobj'), ('fed', 'acl'), ('raw', 'amod'), ('data', 'pobj'), ('automatically', 'advmod'), ('discover', 'conj'), ('representations', 'dobj'), (' ', 'nsubj'), ('needed', 'relcl'), ('detection', 'pobj'), ('classification', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[  , Representation], [Representation, learning], [learning, set], [set, methods], [methods, allows], [allows, machine], [machine,  ], [ , fed], [fed, raw], [raw, data], [data, automatically], [automatically, discover], [discover, representations], [representations,  ], [ , needed], [needed, detection], [detection, classification], [classification, .]]

>> Trigrams: 
[[  , Representation, learning], [Representation, learning, set], [learning, set, methods], [set, methods, allows], [methods, allows, machine], [allows, machine,  ], [machine,  , fed], [ , fed, raw], [fed, raw, data], [raw, data, automatically], [data, automatically, discover], [automatically, discover, representations], [discover, representations,  ], [representations,  , needed], [ , needed, detection], [needed, detection, classification], [detection, classification, .]]

>> Noun Phrases are: 
[  Representation learning, a set, methods, a machine, raw data, the representations, detection, classification]

>> Named Entities are: 
[]


============================ Sentence 14 =============================

Deep-learning methods are  representation-learning methods with multiple levels of representa- tion, obtained by composing simple but non-linear modules that each  transform the representation at one level (starting with the raw input)  into a representation at a higher, slightly more abstract level. 


>> Tokens are: 
[Deep, -, learning, methods,  , representation, -, learning, methods, multiple, levels, representa-, tion, ,, obtained, composing, simple, non, -, linear, modules,  , transform, representation, level, (, starting, raw, input, ),  , representation, higher, ,, slightly, abstract, level, .] 

>> PoS Tags are: 
[('Deep', 'ADJ'), ('-', 'PUNCT'), ('learning', 'VERB'), ('methods', 'NOUN'), (' ', 'SPACE'), ('representation', 'NOUN'), ('-', 'PUNCT'), ('learning', 'VERB'), ('methods', 'NOUN'), ('multiple', 'ADJ'), ('levels', 'NOUN'), ('representa-', 'ADJ'), ('tion', 'NOUN'), (',', 'PUNCT'), ('obtained', 'VERB'), ('composing', 'VERB'), ('simple', 'ADJ'), ('non', 'ADJ'), ('-', 'ADJ'), ('linear', 'ADJ'), ('modules', 'NOUN'), (' ', 'SPACE'), ('transform', 'VERB'), ('representation', 'NOUN'), ('level', 'NOUN'), ('(', 'PUNCT'), ('starting', 'VERB'), ('raw', 'ADJ'), ('input', 'NOUN'), (')', 'PUNCT'), (' ', 'SPACE'), ('representation', 'NOUN'), ('higher', 'ADJ'), (',', 'PUNCT'), ('slightly', 'ADV'), ('abstract', 'ADJ'), ('level', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Deep', 'amod'), ('-', 'punct'), ('learning', 'amod'), ('methods', 'nsubj'), (' ', 'nmod'), ('representation', 'npadvmod'), ('-', 'punct'), ('learning', 'amod'), ('methods', 'attr'), ('multiple', 'amod'), ('levels', 'pobj'), ('representa-', 'amod'), ('tion', 'pobj'), (',', 'punct'), ('obtained', 'acl'), ('composing', 'pcomp'), ('simple', 'amod'), ('non', 'conj'), ('-', 'amod'), ('linear', 'amod'), ('modules', 'dobj'), (' ', 'nsubj'), ('transform', 'acl'), ('representation', 'dobj'), ('level', 'pobj'), ('(', 'punct'), ('starting', 'advcl'), ('raw', 'amod'), ('input', 'pobj'), (')', 'punct'), (' ', 'dobj'), ('representation', 'pobj'), ('higher', 'amod'), (',', 'punct'), ('slightly', 'advmod'), ('abstract', 'amod'), ('level', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Deep, -], [-, learning], [learning, methods], [methods,  ], [ , representation], [representation, -], [-, learning], [learning, methods], [methods, multiple], [multiple, levels], [levels, representa-], [representa-, tion], [tion, ,], [,, obtained], [obtained, composing], [composing, simple], [simple, non], [non, -], [-, linear], [linear, modules], [modules,  ], [ , transform], [transform, representation], [representation, level], [level, (], [(, starting], [starting, raw], [raw, input], [input, )], [),  ], [ , representation], [representation, higher], [higher, ,], [,, slightly], [slightly, abstract], [abstract, level], [level, .]]

>> Trigrams: 
[[Deep, -, learning], [-, learning, methods], [learning, methods,  ], [methods,  , representation], [ , representation, -], [representation, -, learning], [-, learning, methods], [learning, methods, multiple], [methods, multiple, levels], [multiple, levels, representa-], [levels, representa-, tion], [representa-, tion, ,], [tion, ,, obtained], [,, obtained, composing], [obtained, composing, simple], [composing, simple, non], [simple, non, -], [non, -, linear], [-, linear, modules], [linear, modules,  ], [modules,  , transform], [ , transform, representation], [transform, representation, level], [representation, level, (], [level, (, starting], [(, starting, raw], [starting, raw, input], [raw, input, )], [input, ),  ], [),  , representation], [ , representation, higher], [representation, higher, ,], [higher, ,, slightly], [,, slightly, abstract], [slightly, abstract, level], [abstract, level, .]]

>> Noun Phrases are: 
[Deep-learning methods,  representation-learning methods, multiple levels, representa- tion, simple but non-linear modules, the representation, one level, the raw input, a representation, a higher, slightly more abstract level]

>> Named Entities are: 
[('one', 'CARDINAL')]


============================ Sentence 15 =============================

With the  composition of enough such transformations, very complex functions  can be learned. 


>> Tokens are: 
[ , composition, transformations, ,, complex, functions,  , learned, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('composition', 'NOUN'), ('transformations', 'NOUN'), (',', 'PUNCT'), ('complex', 'ADJ'), ('functions', 'NOUN'), (' ', 'SPACE'), ('learned', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'compound'), ('composition', 'pobj'), ('transformations', 'pobj'), (',', 'punct'), ('complex', 'amod'), ('functions', 'appos'), (' ', 'nsubjpass'), ('learned', 'relcl'), ('.', 'punct')]

>> Bigrams: 
[[ , composition], [composition, transformations], [transformations, ,], [,, complex], [complex, functions], [functions,  ], [ , learned], [learned, .]]

>> Trigrams: 
[[ , composition, transformations], [composition, transformations, ,], [transformations, ,, complex], [,, complex, functions], [complex, functions,  ], [functions,  , learned], [ , learned, .]]

>> Noun Phrases are: 
[the  composition, enough such transformations, very complex functions]

>> Named Entities are: 
[]


============================ Sentence 16 =============================

For classification tasks, higher layers of representation  amplify aspects of the input that are important for discrimination and  suppress irrelevant variations. 


>> Tokens are: 
[classification, tasks, ,, higher, layers, representation,  , amplify, aspects, input, important, discrimination,  , suppress, irrelevant, variations, .] 

>> PoS Tags are: 
[('classification', 'NOUN'), ('tasks', 'NOUN'), (',', 'PUNCT'), ('higher', 'ADJ'), ('layers', 'NOUN'), ('representation', 'NOUN'), (' ', 'SPACE'), ('amplify', 'ADJ'), ('aspects', 'NOUN'), ('input', 'NOUN'), ('important', 'ADJ'), ('discrimination', 'NOUN'), (' ', 'SPACE'), ('suppress', 'NOUN'), ('irrelevant', 'ADJ'), ('variations', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('classification', 'compound'), ('tasks', 'pobj'), (',', 'punct'), ('higher', 'amod'), ('layers', 'pobj'), ('representation', 'pobj'), (' ', 'nmod'), ('amplify', 'amod'), ('aspects', 'conj'), ('input', 'pobj'), ('important', 'acomp'), ('discrimination', 'pobj'), (' ', 'conj'), ('suppress', 'pobj'), ('irrelevant', 'amod'), ('variations', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[classification, tasks], [tasks, ,], [,, higher], [higher, layers], [layers, representation], [representation,  ], [ , amplify], [amplify, aspects], [aspects, input], [input, important], [important, discrimination], [discrimination,  ], [ , suppress], [suppress, irrelevant], [irrelevant, variations], [variations, .]]

>> Trigrams: 
[[classification, tasks, ,], [tasks, ,, higher], [,, higher, layers], [higher, layers, representation], [layers, representation,  ], [representation,  , amplify], [ , amplify, aspects], [amplify, aspects, input], [aspects, input, important], [input, important, discrimination], [important, discrimination,  ], [discrimination,  , suppress], [ , suppress, irrelevant], [suppress, irrelevant, variations], [irrelevant, variations, .]]

>> Noun Phrases are: 
[classification tasks, higher layers, representation,  amplify aspects, the input, discrimination, suppress, irrelevant variations]

>> Named Entities are: 
[]


============================ Sentence 17 =============================

An image, for example, comes in the  form of an array of pixel values, and the learned features in the first  layer of representation typically represent the presence or absence of  edges at particular orientations and locations in the image. 


>> Tokens are: 
[image, ,, example, ,, comes,  , form, array, pixel, values, ,, learned, features,  , layer, representation, typically, represent, presence, absence,  , edges, particular, orientations, locations, image, .] 

>> PoS Tags are: 
[('image', 'NOUN'), (',', 'PUNCT'), ('example', 'NOUN'), (',', 'PUNCT'), ('comes', 'VERB'), (' ', 'SPACE'), ('form', 'NOUN'), ('array', 'NOUN'), ('pixel', 'ADJ'), ('values', 'NOUN'), (',', 'PUNCT'), ('learned', 'VERB'), ('features', 'VERB'), (' ', 'SPACE'), ('layer', 'NOUN'), ('representation', 'NOUN'), ('typically', 'ADV'), ('represent', 'VERB'), ('presence', 'NOUN'), ('absence', 'NOUN'), (' ', 'SPACE'), ('edges', 'NOUN'), ('particular', 'ADJ'), ('orientations', 'NOUN'), ('locations', 'NOUN'), ('image', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('image', 'nsubj'), (',', 'punct'), ('example', 'pobj'), (',', 'punct'), ('comes', 'ROOT'), (' ', 'compound'), ('form', 'pobj'), ('array', 'pobj'), ('pixel', 'amod'), ('values', 'pobj'), (',', 'punct'), ('learned', 'nsubj'), ('features', 'conj'), (' ', 'compound'), ('layer', 'pobj'), ('representation', 'pobj'), ('typically', 'advmod'), ('represent', 'conj'), ('presence', 'dobj'), ('absence', 'conj'), (' ', 'pobj'), ('edges', 'dobj'), ('particular', 'amod'), ('orientations', 'pobj'), ('locations', 'conj'), ('image', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[image, ,], [,, example], [example, ,], [,, comes], [comes,  ], [ , form], [form, array], [array, pixel], [pixel, values], [values, ,], [,, learned], [learned, features], [features,  ], [ , layer], [layer, representation], [representation, typically], [typically, represent], [represent, presence], [presence, absence], [absence,  ], [ , edges], [edges, particular], [particular, orientations], [orientations, locations], [locations, image], [image, .]]

>> Trigrams: 
[[image, ,, example], [,, example, ,], [example, ,, comes], [,, comes,  ], [comes,  , form], [ , form, array], [form, array, pixel], [array, pixel, values], [pixel, values, ,], [values, ,, learned], [,, learned, features], [learned, features,  ], [features,  , layer], [ , layer, representation], [layer, representation, typically], [representation, typically, represent], [typically, represent, presence], [represent, presence, absence], [presence, absence,  ], [absence,  , edges], [ , edges, particular], [edges, particular, orientations], [particular, orientations, locations], [orientations, locations, image], [locations, image, .]]

>> Noun Phrases are: 
[An image, example, the  form, an array, pixel values, the first  layer, representation, the presence, absence, edges, particular orientations, locations, the image]

>> Named Entities are: 
[('first', 'ORDINAL')]


============================ Sentence 18 =============================

The second  layer typically detects motifs by spotting particular arrangements of  edges, regardless of small variations in the edge positions. 


>> Tokens are: 
[second,  , layer, typically, detects, motifs, spotting, particular, arrangements,  , edges, ,, regardless, small, variations, edge, positions, .] 

>> PoS Tags are: 
[('second', 'ADJ'), (' ', 'SPACE'), ('layer', 'NOUN'), ('typically', 'ADV'), ('detects', 'VERB'), ('motifs', 'NOUN'), ('spotting', 'VERB'), ('particular', 'ADJ'), ('arrangements', 'NOUN'), (' ', 'SPACE'), ('edges', 'NOUN'), (',', 'PUNCT'), ('regardless', 'ADV'), ('small', 'ADJ'), ('variations', 'NOUN'), ('edge', 'NOUN'), ('positions', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('second', 'amod'), (' ', 'compound'), ('layer', 'nsubj'), ('typically', 'advmod'), ('detects', 'ROOT'), ('motifs', 'dobj'), ('spotting', 'pcomp'), ('particular', 'amod'), ('arrangements', 'dobj'), (' ', 'compound'), ('edges', 'pobj'), (',', 'punct'), ('regardless', 'advmod'), ('small', 'amod'), ('variations', 'pobj'), ('edge', 'compound'), ('positions', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[second,  ], [ , layer], [layer, typically], [typically, detects], [detects, motifs], [motifs, spotting], [spotting, particular], [particular, arrangements], [arrangements,  ], [ , edges], [edges, ,], [,, regardless], [regardless, small], [small, variations], [variations, edge], [edge, positions], [positions, .]]

>> Trigrams: 
[[second,  , layer], [ , layer, typically], [layer, typically, detects], [typically, detects, motifs], [detects, motifs, spotting], [motifs, spotting, particular], [spotting, particular, arrangements], [particular, arrangements,  ], [arrangements,  , edges], [ , edges, ,], [edges, ,, regardless], [,, regardless, small], [regardless, small, variations], [small, variations, edge], [variations, edge, positions], [edge, positions, .]]

>> Noun Phrases are: 
[The second  layer, motifs, particular arrangements,  edges, small variations, the edge positions]

>> Named Entities are: 
[('second', 'ORDINAL')]


============================ Sentence 19 =============================

The third  layer may assemble motifs into larger combinations that correspond  to parts of familiar objects, and subsequent layers would detect objects  as combinations of these parts. 


>> Tokens are: 
[ , layer, assemble, motifs, larger, combinations, correspond,  , parts, familiar, objects, ,, subsequent, layers, detect, objects,  , combinations, parts, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('layer', 'NOUN'), ('assemble', 'VERB'), ('motifs', 'NOUN'), ('larger', 'ADJ'), ('combinations', 'NOUN'), ('correspond', 'VERB'), (' ', 'SPACE'), ('parts', 'NOUN'), ('familiar', 'ADJ'), ('objects', 'NOUN'), (',', 'PUNCT'), ('subsequent', 'ADJ'), ('layers', 'NOUN'), ('detect', 'VERB'), ('objects', 'NOUN'), (' ', 'SPACE'), ('combinations', 'NOUN'), ('parts', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'compound'), ('layer', 'nsubj'), ('assemble', 'ROOT'), ('motifs', 'dobj'), ('larger', 'amod'), ('combinations', 'pobj'), ('correspond', 'relcl'), (' ', 'dobj'), ('parts', 'pobj'), ('familiar', 'amod'), ('objects', 'pobj'), (',', 'punct'), ('subsequent', 'amod'), ('layers', 'nsubj'), ('detect', 'conj'), ('objects', 'dobj'), (' ', 'dobj'), ('combinations', 'pobj'), ('parts', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[ , layer], [layer, assemble], [assemble, motifs], [motifs, larger], [larger, combinations], [combinations, correspond], [correspond,  ], [ , parts], [parts, familiar], [familiar, objects], [objects, ,], [,, subsequent], [subsequent, layers], [layers, detect], [detect, objects], [objects,  ], [ , combinations], [combinations, parts], [parts, .]]

>> Trigrams: 
[[ , layer, assemble], [layer, assemble, motifs], [assemble, motifs, larger], [motifs, larger, combinations], [larger, combinations, correspond], [combinations, correspond,  ], [correspond,  , parts], [ , parts, familiar], [parts, familiar, objects], [familiar, objects, ,], [objects, ,, subsequent], [,, subsequent, layers], [subsequent, layers, detect], [layers, detect, objects], [detect, objects,  ], [objects,  , combinations], [ , combinations, parts], [combinations, parts, .]]

>> Noun Phrases are: 
[The third  layer, motifs, larger combinations, parts, familiar objects, subsequent layers, objects, combinations, these parts]

>> Named Entities are: 
[('third', 'ORDINAL')]


============================ Sentence 20 =============================

The key aspect of deep learning is that  these layers of features are not designed by human engineers: they  are learned from data using a general-purpose learning procedure. 


>> Tokens are: 
[key, aspect, deep, learning,  , layers, features, designed, human, engineers, :,  , learned, data, general, -, purpose, learning, procedure, .] 

>> PoS Tags are: 
[('key', 'ADJ'), ('aspect', 'NOUN'), ('deep', 'ADJ'), ('learning', 'NOUN'), (' ', 'SPACE'), ('layers', 'NOUN'), ('features', 'NOUN'), ('designed', 'VERB'), ('human', 'ADJ'), ('engineers', 'NOUN'), (':', 'PUNCT'), (' ', 'SPACE'), ('learned', 'VERB'), ('data', 'NOUN'), ('general', 'ADJ'), ('-', 'PUNCT'), ('purpose', 'NOUN'), ('learning', 'NOUN'), ('procedure', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('key', 'amod'), ('aspect', 'nsubj'), ('deep', 'amod'), ('learning', 'pobj'), (' ', 'nsubjpass'), ('layers', 'nsubjpass'), ('features', 'pobj'), ('designed', 'ccomp'), ('human', 'amod'), ('engineers', 'pobj'), (':', 'punct'), (' ', 'nsubjpass'), ('learned', 'ROOT'), ('data', 'pobj'), ('general', 'amod'), ('-', 'punct'), ('purpose', 'compound'), ('learning', 'compound'), ('procedure', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[key, aspect], [aspect, deep], [deep, learning], [learning,  ], [ , layers], [layers, features], [features, designed], [designed, human], [human, engineers], [engineers, :], [:,  ], [ , learned], [learned, data], [data, general], [general, -], [-, purpose], [purpose, learning], [learning, procedure], [procedure, .]]

>> Trigrams: 
[[key, aspect, deep], [aspect, deep, learning], [deep, learning,  ], [learning,  , layers], [ , layers, features], [layers, features, designed], [features, designed, human], [designed, human, engineers], [human, engineers, :], [engineers, :,  ], [:,  , learned], [ , learned, data], [learned, data, general], [data, general, -], [general, -, purpose], [-, purpose, learning], [purpose, learning, procedure], [learning, procedure, .]]

>> Noun Phrases are: 
[The key aspect, deep learning, these layers, features, human engineers, they, data, a general-purpose learning procedure]

>> Named Entities are: 
[]


============================ Sentence 21 =============================

  Deep learning is making major advances in solving problems that  have resisted the best attempts of the artificial intelligence commu- nity for many years. 


>> Tokens are: 
[  , Deep, learning, making, major, advances, solving, problems,  , resisted, best, attempts, artificial, intelligence, commu-, nity, years, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('Deep', 'PROPN'), ('learning', 'NOUN'), ('making', 'VERB'), ('major', 'ADJ'), ('advances', 'NOUN'), ('solving', 'VERB'), ('problems', 'NOUN'), (' ', 'SPACE'), ('resisted', 'VERB'), ('best', 'ADJ'), ('attempts', 'NOUN'), ('artificial', 'ADJ'), ('intelligence', 'NOUN'), ('commu-', 'NOUN'), ('nity', 'NOUN'), ('years', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'nummod'), ('Deep', 'amod'), ('learning', 'nsubj'), ('making', 'ROOT'), ('major', 'amod'), ('advances', 'dobj'), ('solving', 'pcomp'), ('problems', 'dobj'), (' ', 'nsubj'), ('resisted', 'acl'), ('best', 'amod'), ('attempts', 'dobj'), ('artificial', 'amod'), ('intelligence', 'pobj'), ('commu-', 'compound'), ('nity', 'pobj'), ('years', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[  , Deep], [Deep, learning], [learning, making], [making, major], [major, advances], [advances, solving], [solving, problems], [problems,  ], [ , resisted], [resisted, best], [best, attempts], [attempts, artificial], [artificial, intelligence], [intelligence, commu-], [commu-, nity], [nity, years], [years, .]]

>> Trigrams: 
[[  , Deep, learning], [Deep, learning, making], [learning, making, major], [making, major, advances], [major, advances, solving], [advances, solving, problems], [solving, problems,  ], [problems,  , resisted], [ , resisted, best], [resisted, best, attempts], [best, attempts, artificial], [attempts, artificial, intelligence], [artificial, intelligence, commu-], [intelligence, commu-, nity], [commu-, nity, years], [nity, years, .]]

>> Noun Phrases are: 
[  Deep learning, major advances, problems, the best attempts, the artificial intelligence, commu- nity, many years]

>> Named Entities are: 
[('many years', 'DATE')]


============================ Sentence 22 =============================

It has turned out to be very good at discovering   intricate structures in high-dimensional data and is therefore applica- ble to many domains of science, business and government. 


>> Tokens are: 
[turned, good, discovering,   , intricate, structures, high, -, dimensional, data, applica-, ble, domains, science, ,, business, government, .] 

>> PoS Tags are: 
[('turned', 'VERB'), ('good', 'ADJ'), ('discovering', 'VERB'), ('  ', 'SPACE'), ('intricate', 'ADJ'), ('structures', 'NOUN'), ('high', 'ADV'), ('-', 'PUNCT'), ('dimensional', 'ADJ'), ('data', 'NOUN'), ('applica-', 'VERB'), ('ble', 'ADJ'), ('domains', 'NOUN'), ('science', 'NOUN'), (',', 'PUNCT'), ('business', 'NOUN'), ('government', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('turned', 'ROOT'), ('good', 'acomp'), ('discovering', 'pcomp'), ('  ', 'nmod'), ('intricate', 'amod'), ('structures', 'dobj'), ('high', 'advmod'), ('-', 'punct'), ('dimensional', 'amod'), ('data', 'pobj'), ('applica-', 'attr'), ('ble', 'acomp'), ('domains', 'pobj'), ('science', 'pobj'), (',', 'punct'), ('business', 'conj'), ('government', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[turned, good], [good, discovering], [discovering,   ], [  , intricate], [intricate, structures], [structures, high], [high, -], [-, dimensional], [dimensional, data], [data, applica-], [applica-, ble], [ble, domains], [domains, science], [science, ,], [,, business], [business, government], [government, .]]

>> Trigrams: 
[[turned, good, discovering], [good, discovering,   ], [discovering,   , intricate], [  , intricate, structures], [intricate, structures, high], [structures, high, -], [high, -, dimensional], [-, dimensional, data], [dimensional, data, applica-], [data, applica-, ble], [applica-, ble, domains], [ble, domains, science], [domains, science, ,], [science, ,, business], [,, business, government], [business, government, .]]

>> Noun Phrases are: 
[It,   intricate structures, high-dimensional data, many domains, science, business, government]

>> Named Entities are: 
[]


============================ Sentence 23 =============================

In addition  to beating records in image recognition1–4 and speech recognition5–7, it  has beaten other machine-learning techniques at predicting the activ- ity of potential drug molecules8, analysing particle accelerator data9,10,  reconstructing brain circuits11, and predicting the effects of mutations  in non-coding DNA on gene expression and disease12,13. 


>> Tokens are: 
[addition,  , beating, records, image, recognition1–4, speech, recognition5–7, ,,  , beaten, machine, -, learning, techniques, predicting, activ-, ity, potential, drug, molecules8, ,, analysing, particle, accelerator, data9,10, ,,  , reconstructing, brain, circuits11, ,, predicting, effects, mutations,  , non, -, coding, DNA, gene, expression, disease12,13, .] 

>> PoS Tags are: 
[('addition', 'NOUN'), (' ', 'SPACE'), ('beating', 'VERB'), ('records', 'NOUN'), ('image', 'NOUN'), ('recognition1–4', 'NOUN'), ('speech', 'NOUN'), ('recognition5–7', 'PROPN'), (',', 'PUNCT'), (' ', 'SPACE'), ('beaten', 'VERB'), ('machine', 'NOUN'), ('-', 'PUNCT'), ('learning', 'VERB'), ('techniques', 'NOUN'), ('predicting', 'VERB'), ('activ-', 'ADJ'), ('ity', 'NOUN'), ('potential', 'ADJ'), ('drug', 'NOUN'), ('molecules8', 'NOUN'), (',', 'PUNCT'), ('analysing', 'VERB'), ('particle', 'NOUN'), ('accelerator', 'NOUN'), ('data9,10', 'VERB'), (',', 'PUNCT'), (' ', 'SPACE'), ('reconstructing', 'VERB'), ('brain', 'NOUN'), ('circuits11', 'NOUN'), (',', 'PUNCT'), ('predicting', 'VERB'), ('effects', 'NOUN'), ('mutations', 'NOUN'), (' ', 'SPACE'), ('non', 'ADJ'), ('-', 'ADJ'), ('coding', 'VERB'), ('DNA', 'NOUN'), ('gene', 'NOUN'), ('expression', 'NOUN'), ('disease12,13', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('addition', 'pobj'), (' ', 'pobj'), ('beating', 'pcomp'), ('records', 'dobj'), ('image', 'compound'), ('recognition1–4', 'pobj'), ('speech', 'compound'), ('recognition5–7', 'conj'), (',', 'punct'), (' ', 'nsubj'), ('beaten', 'ROOT'), ('machine', 'npadvmod'), ('-', 'punct'), ('learning', 'amod'), ('techniques', 'dobj'), ('predicting', 'pcomp'), ('activ-', 'amod'), ('ity', 'dobj'), ('potential', 'amod'), ('drug', 'compound'), ('molecules8', 'pobj'), (',', 'punct'), ('analysing', 'advcl'), ('particle', 'compound'), ('accelerator', 'nsubj'), ('data9,10', 'dobj'), (',', 'punct'), (' ', 'nsubj'), ('reconstructing', 'advcl'), ('brain', 'compound'), ('circuits11', 'dobj'), (',', 'punct'), ('predicting', 'conj'), ('effects', 'dobj'), ('mutations', 'pobj'), (' ', 'dobj'), ('non', 'amod'), ('-', 'amod'), ('coding', 'amod'), ('DNA', 'pobj'), ('gene', 'compound'), ('expression', 'pobj'), ('disease12,13', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[addition,  ], [ , beating], [beating, records], [records, image], [image, recognition1–4], [recognition1–4, speech], [speech, recognition5–7], [recognition5–7, ,], [,,  ], [ , beaten], [beaten, machine], [machine, -], [-, learning], [learning, techniques], [techniques, predicting], [predicting, activ-], [activ-, ity], [ity, potential], [potential, drug], [drug, molecules8], [molecules8, ,], [,, analysing], [analysing, particle], [particle, accelerator], [accelerator, data9,10], [data9,10, ,], [,,  ], [ , reconstructing], [reconstructing, brain], [brain, circuits11], [circuits11, ,], [,, predicting], [predicting, effects], [effects, mutations], [mutations,  ], [ , non], [non, -], [-, coding], [coding, DNA], [DNA, gene], [gene, expression], [expression, disease12,13], [disease12,13, .]]

>> Trigrams: 
[[addition,  , beating], [ , beating, records], [beating, records, image], [records, image, recognition1–4], [image, recognition1–4, speech], [recognition1–4, speech, recognition5–7], [speech, recognition5–7, ,], [recognition5–7, ,,  ], [,,  , beaten], [ , beaten, machine], [beaten, machine, -], [machine, -, learning], [-, learning, techniques], [learning, techniques, predicting], [techniques, predicting, activ-], [predicting, activ-, ity], [activ-, ity, potential], [ity, potential, drug], [potential, drug, molecules8], [drug, molecules8, ,], [molecules8, ,, analysing], [,, analysing, particle], [analysing, particle, accelerator], [particle, accelerator, data9,10], [accelerator, data9,10, ,], [data9,10, ,,  ], [,,  , reconstructing], [ , reconstructing, brain], [reconstructing, brain, circuits11], [brain, circuits11, ,], [circuits11, ,, predicting], [,, predicting, effects], [predicting, effects, mutations], [effects, mutations,  ], [mutations,  , non], [ , non, -], [non, -, coding], [-, coding, DNA], [coding, DNA, gene], [DNA, gene, expression], [gene, expression, disease12,13], [expression, disease12,13, .]]

>> Noun Phrases are: 
[addition, records, image recognition1–4, speech recognition5–7, it, other machine-learning techniques, the activ- ity, potential drug molecules8, particle accelerator, brain circuits11, the effects, mutations, non-coding DNA, gene expression, disease12,13]

>> Named Entities are: 
[]


============================ Sentence 24 =============================

Perhaps more  surprisingly, deep learning has produced extremely promising results  for various tasks in natural language understanding14, particularly  topic classification, sentiment analysis, question answering15 and lan- guage translation16,17. 


>> Tokens are: 
[ , surprisingly, ,, deep, learning, produced, extremely, promising, results,  , tasks, natural, language, understanding14, ,, particularly,  , topic, classification, ,, sentiment, analysis, ,, question, answering15, lan-, guage, translation16,17, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('surprisingly', 'ADV'), (',', 'PUNCT'), ('deep', 'ADJ'), ('learning', 'NOUN'), ('produced', 'VERB'), ('extremely', 'ADV'), ('promising', 'ADJ'), ('results', 'NOUN'), (' ', 'SPACE'), ('tasks', 'NOUN'), ('natural', 'ADJ'), ('language', 'NOUN'), ('understanding14', 'NOUN'), (',', 'PUNCT'), ('particularly', 'ADV'), (' ', 'SPACE'), ('topic', 'NOUN'), ('classification', 'NOUN'), (',', 'PUNCT'), ('sentiment', 'NOUN'), ('analysis', 'NOUN'), (',', 'PUNCT'), ('question', 'NOUN'), ('answering15', 'NOUN'), ('lan-', 'ADJ'), ('guage', 'NOUN'), ('translation16,17', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'nsubj'), ('surprisingly', 'advmod'), (',', 'punct'), ('deep', 'amod'), ('learning', 'nsubj'), ('produced', 'ROOT'), ('extremely', 'advmod'), ('promising', 'amod'), ('results', 'dobj'), (' ', 'dobj'), ('tasks', 'pobj'), ('natural', 'amod'), ('language', 'compound'), ('understanding14', 'pobj'), (',', 'punct'), ('particularly', 'advmod'), (' ', 'nmod'), ('topic', 'compound'), ('classification', 'appos'), (',', 'punct'), ('sentiment', 'compound'), ('analysis', 'conj'), (',', 'punct'), ('question', 'compound'), ('answering15', 'conj'), ('lan-', 'nmod'), ('guage', 'compound'), ('translation16,17', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[ , surprisingly], [surprisingly, ,], [,, deep], [deep, learning], [learning, produced], [produced, extremely], [extremely, promising], [promising, results], [results,  ], [ , tasks], [tasks, natural], [natural, language], [language, understanding14], [understanding14, ,], [,, particularly], [particularly,  ], [ , topic], [topic, classification], [classification, ,], [,, sentiment], [sentiment, analysis], [analysis, ,], [,, question], [question, answering15], [answering15, lan-], [lan-, guage], [guage, translation16,17], [translation16,17, .]]

>> Trigrams: 
[[ , surprisingly, ,], [surprisingly, ,, deep], [,, deep, learning], [deep, learning, produced], [learning, produced, extremely], [produced, extremely, promising], [extremely, promising, results], [promising, results,  ], [results,  , tasks], [ , tasks, natural], [tasks, natural, language], [natural, language, understanding14], [language, understanding14, ,], [understanding14, ,, particularly], [,, particularly,  ], [particularly,  , topic], [ , topic, classification], [topic, classification, ,], [classification, ,, sentiment], [,, sentiment, analysis], [sentiment, analysis, ,], [analysis, ,, question], [,, question, answering15], [question, answering15, lan-], [answering15, lan-, guage], [lan-, guage, translation16,17], [guage, translation16,17, .]]

>> Noun Phrases are: 
[deep learning, extremely promising results, various tasks, natural language understanding14, particularly  topic classification, sentiment analysis, question answering15, lan- guage translation16,17]

>> Named Entities are: 
[('understanding14', 'GPE'), ('answering15', 'PERSON')]


============================ Sentence 25 =============================

  We think that deep learning will have many more successes in the  near future because it requires very little engineering by hand, so it  can easily take advantage of increases in the amount of available com- putation and data. 


>> Tokens are: 
[  , think, deep, learning, successes,  , near, future, requires, little, engineering, hand, ,,  , easily, advantage, increases, available, com-, putation, data, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('think', 'VERB'), ('deep', 'ADJ'), ('learning', 'NOUN'), ('successes', 'NOUN'), (' ', 'SPACE'), ('near', 'SCONJ'), ('future', 'NOUN'), ('requires', 'VERB'), ('little', 'ADJ'), ('engineering', 'NOUN'), ('hand', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('easily', 'ADV'), ('advantage', 'NOUN'), ('increases', 'NOUN'), ('available', 'ADJ'), ('com-', 'NOUN'), ('putation', 'NOUN'), ('data', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'npadvmod'), ('think', 'ccomp'), ('deep', 'amod'), ('learning', 'nsubj'), ('successes', 'dobj'), (' ', 'pobj'), ('near', 'prep'), ('future', 'pobj'), ('requires', 'advcl'), ('little', 'amod'), ('engineering', 'dobj'), ('hand', 'pobj'), (',', 'punct'), (' ', 'nsubj'), ('easily', 'advmod'), ('advantage', 'dobj'), ('increases', 'pobj'), ('available', 'amod'), ('com-', 'compound'), ('putation', 'pobj'), ('data', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[  , think], [think, deep], [deep, learning], [learning, successes], [successes,  ], [ , near], [near, future], [future, requires], [requires, little], [little, engineering], [engineering, hand], [hand, ,], [,,  ], [ , easily], [easily, advantage], [advantage, increases], [increases, available], [available, com-], [com-, putation], [putation, data], [data, .]]

>> Trigrams: 
[[  , think, deep], [think, deep, learning], [deep, learning, successes], [learning, successes,  ], [successes,  , near], [ , near, future], [near, future, requires], [future, requires, little], [requires, little, engineering], [little, engineering, hand], [engineering, hand, ,], [hand, ,,  ], [,,  , easily], [ , easily, advantage], [easily, advantage, increases], [advantage, increases, available], [increases, available, com-], [available, com-, putation], [com-, putation, data], [putation, data, .]]

>> Noun Phrases are: 
[We, deep learning, many more successes, future, it, very little engineering, hand, it, advantage, increases, the amount, available com- putation, data]

>> Named Entities are: 
[]


============================ Sentence 26 =============================

New learning algorithms and architectures that are  currently being developed for deep neural networks will only acceler- ate this progress. 


>> Tokens are: 
[New, learning, algorithms, architectures,  , currently, developed, deep, neural, networks, acceler-, ate, progress, .] 

>> PoS Tags are: 
[('New', 'ADJ'), ('learning', 'VERB'), ('algorithms', 'NOUN'), ('architectures', 'NOUN'), (' ', 'SPACE'), ('currently', 'ADV'), ('developed', 'VERB'), ('deep', 'ADJ'), ('neural', 'ADJ'), ('networks', 'NOUN'), ('acceler-', 'ADV'), ('ate', 'VERB'), ('progress', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('New', 'amod'), ('learning', 'csubj'), ('algorithms', 'dobj'), ('architectures', 'conj'), (' ', 'nsubjpass'), ('currently', 'advmod'), ('developed', 'relcl'), ('deep', 'amod'), ('neural', 'amod'), ('networks', 'pobj'), ('acceler-', 'advmod'), ('ate', 'ROOT'), ('progress', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[New, learning], [learning, algorithms], [algorithms, architectures], [architectures,  ], [ , currently], [currently, developed], [developed, deep], [deep, neural], [neural, networks], [networks, acceler-], [acceler-, ate], [ate, progress], [progress, .]]

>> Trigrams: 
[[New, learning, algorithms], [learning, algorithms, architectures], [algorithms, architectures,  ], [architectures,  , currently], [ , currently, developed], [currently, developed, deep], [developed, deep, neural], [deep, neural, networks], [neural, networks, acceler-], [networks, acceler-, ate], [acceler-, ate, progress], [ate, progress, .]]

>> Noun Phrases are: 
[algorithms, architectures, deep neural networks, this progress]

>> Named Entities are: 
[]


============================ Sentence 27 =============================

  Supervised learning   


>> Tokens are: 
[  , Supervised, learning,  ] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('Supervised', 'ADJ'), ('learning', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'dep'), ('Supervised', 'amod'), ('learning', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[  , Supervised], [Supervised, learning], [learning,  ]]

>> Trigrams: 
[[  , Supervised, learning], [Supervised, learning,  ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 28 =============================

The most common form of machine learning, deep or not, is super- vised learning. 


>> Tokens are: 
[common, form, machine, learning, ,, deep, ,, super-, vised, learning, .] 

>> PoS Tags are: 
[('common', 'ADJ'), ('form', 'NOUN'), ('machine', 'NOUN'), ('learning', 'NOUN'), (',', 'PUNCT'), ('deep', 'ADJ'), (',', 'PUNCT'), ('super-', 'X'), ('vised', 'VERB'), ('learning', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('common', 'amod'), ('form', 'nsubj'), ('machine', 'compound'), ('learning', 'pobj'), (',', 'punct'), ('deep', 'advmod'), (',', 'punct'), ('super-', 'dep'), ('vised', 'amod'), ('learning', 'attr'), ('.', 'punct')]

>> Bigrams: 
[[common, form], [form, machine], [machine, learning], [learning, ,], [,, deep], [deep, ,], [,, super-], [super-, vised], [vised, learning], [learning, .]]

>> Trigrams: 
[[common, form, machine], [form, machine, learning], [machine, learning, ,], [learning, ,, deep], [,, deep, ,], [deep, ,, super-], [,, super-, vised], [super-, vised, learning], [vised, learning, .]]

>> Noun Phrases are: 
[The most common form, machine learning, super- vised learning]

>> Named Entities are: 
[]


============================ Sentence 29 =============================

Imagine that we want to build a system that can classify  images as containing, say, a house, a car, a person or a pet. 


>> Tokens are: 
[Imagine, want, build, system, classify,  , images, containing, ,, ,, house, ,, car, ,, person, pet, .] 

>> PoS Tags are: 
[('Imagine', 'VERB'), ('want', 'VERB'), ('build', 'VERB'), ('system', 'NOUN'), ('classify', 'VERB'), (' ', 'SPACE'), ('images', 'NOUN'), ('containing', 'VERB'), (',', 'PUNCT'), (',', 'PUNCT'), ('house', 'NOUN'), (',', 'PUNCT'), ('car', 'NOUN'), (',', 'PUNCT'), ('person', 'NOUN'), ('pet', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Imagine', 'ROOT'), ('want', 'ccomp'), ('build', 'xcomp'), ('system', 'dobj'), ('classify', 'relcl'), (' ', 'compound'), ('images', 'dobj'), ('containing', 'pcomp'), (',', 'punct'), (',', 'punct'), ('house', 'dobj'), (',', 'punct'), ('car', 'conj'), (',', 'punct'), ('person', 'conj'), ('pet', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[Imagine, want], [want, build], [build, system], [system, classify], [classify,  ], [ , images], [images, containing], [containing, ,], [,, ,], [,, house], [house, ,], [,, car], [car, ,], [,, person], [person, pet], [pet, .]]

>> Trigrams: 
[[Imagine, want, build], [want, build, system], [build, system, classify], [system, classify,  ], [classify,  , images], [ , images, containing], [images, containing, ,], [containing, ,, ,], [,, ,, house], [,, house, ,], [house, ,, car], [,, car, ,], [car, ,, person], [,, person, pet], [person, pet, .]]

>> Noun Phrases are: 
[we, a system,  images, a house, a car, a person, a pet]

>> Named Entities are: 
[]


============================ Sentence 30 =============================

We first  collect a large data set of images of houses, cars, people and pets, each  labelled with its category. 


>> Tokens are: 
[ , collect, large, data, set, images, houses, ,, cars, ,, people, pets, ,,  , labelled, category, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('collect', 'VERB'), ('large', 'ADJ'), ('data', 'NOUN'), ('set', 'NOUN'), ('images', 'NOUN'), ('houses', 'NOUN'), (',', 'PUNCT'), ('cars', 'NOUN'), (',', 'PUNCT'), ('people', 'NOUN'), ('pets', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('labelled', 'VERB'), ('category', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'nsubj'), ('collect', 'ccomp'), ('large', 'amod'), ('data', 'compound'), ('set', 'dobj'), ('images', 'pobj'), ('houses', 'pobj'), (',', 'punct'), ('cars', 'conj'), (',', 'punct'), ('people', 'conj'), ('pets', 'conj'), (',', 'punct'), (' ', 'nsubj'), ('labelled', 'ROOT'), ('category', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[ , collect], [collect, large], [large, data], [data, set], [set, images], [images, houses], [houses, ,], [,, cars], [cars, ,], [,, people], [people, pets], [pets, ,], [,,  ], [ , labelled], [labelled, category], [category, .]]

>> Trigrams: 
[[ , collect, large], [collect, large, data], [large, data, set], [data, set, images], [set, images, houses], [images, houses, ,], [houses, ,, cars], [,, cars, ,], [cars, ,, people], [,, people, pets], [people, pets, ,], [pets, ,,  ], [,,  , labelled], [ , labelled, category], [labelled, category, .]]

>> Noun Phrases are: 
[We, a large data set, images, houses, cars, people, pets, its category]

>> Named Entities are: 
[('first', 'ORDINAL')]


============================ Sentence 31 =============================

During training, the machine is shown an  image and produces an output in the form of a vector of scores, one  for each category. 


>> Tokens are: 
[training, ,, machine, shown,  , image, produces, output, form, vector, scores, ,,  , category, .] 

>> PoS Tags are: 
[('training', 'NOUN'), (',', 'PUNCT'), ('machine', 'NOUN'), ('shown', 'VERB'), (' ', 'SPACE'), ('image', 'NOUN'), ('produces', 'VERB'), ('output', 'NOUN'), ('form', 'NOUN'), ('vector', 'NOUN'), ('scores', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('category', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('training', 'pobj'), (',', 'punct'), ('machine', 'nsubjpass'), ('shown', 'ROOT'), (' ', 'compound'), ('image', 'dobj'), ('produces', 'conj'), ('output', 'dobj'), ('form', 'pobj'), ('vector', 'pobj'), ('scores', 'pobj'), (',', 'punct'), (' ', 'appos'), ('category', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[training, ,], [,, machine], [machine, shown], [shown,  ], [ , image], [image, produces], [produces, output], [output, form], [form, vector], [vector, scores], [scores, ,], [,,  ], [ , category], [category, .]]

>> Trigrams: 
[[training, ,, machine], [,, machine, shown], [machine, shown,  ], [shown,  , image], [ , image, produces], [image, produces, output], [produces, output, form], [output, form, vector], [form, vector, scores], [vector, scores, ,], [scores, ,,  ], [,,  , category], [ , category, .]]

>> Noun Phrases are: 
[training, the machine, an  image, an output, the form, a vector, scores, each category]

>> Named Entities are: 
[]


============================ Sentence 32 =============================

We want the desired category to have the highest  score of all categories, but this is unlikely to happen before training. 


>> Tokens are: 
[want, desired, category, highest,  , score, categories, ,, unlikely, happen, training, .] 

>> PoS Tags are: 
[('want', 'VERB'), ('desired', 'VERB'), ('category', 'NOUN'), ('highest', 'ADJ'), (' ', 'SPACE'), ('score', 'NOUN'), ('categories', 'NOUN'), (',', 'PUNCT'), ('unlikely', 'ADJ'), ('happen', 'VERB'), ('training', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('want', 'ROOT'), ('desired', 'amod'), ('category', 'nsubj'), ('highest', 'amod'), (' ', 'nummod'), ('score', 'dobj'), ('categories', 'pobj'), (',', 'punct'), ('unlikely', 'acomp'), ('happen', 'xcomp'), ('training', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[want, desired], [desired, category], [category, highest], [highest,  ], [ , score], [score, categories], [categories, ,], [,, unlikely], [unlikely, happen], [happen, training], [training, .]]

>> Trigrams: 
[[want, desired, category], [desired, category, highest], [category, highest,  ], [highest,  , score], [ , score, categories], [score, categories, ,], [categories, ,, unlikely], [,, unlikely, happen], [unlikely, happen, training], [happen, training, .]]

>> Noun Phrases are: 
[We, the desired category, the highest  score, all categories, training]

>> Named Entities are: 
[]


============================ Sentence 33 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 34 =============================

We compute an objective function that measures the error (or dis- tance) between the output scores and the desired pattern of scores. 


>> Tokens are: 
[compute, objective, function, measures, error, (, dis-, tance, ), output, scores, desired, pattern, scores, .] 

>> PoS Tags are: 
[('compute', 'VERB'), ('objective', 'ADJ'), ('function', 'NOUN'), ('measures', 'VERB'), ('error', 'NOUN'), ('(', 'PUNCT'), ('dis-', 'ADP'), ('tance', 'NOUN'), (')', 'PUNCT'), ('output', 'NOUN'), ('scores', 'NOUN'), ('desired', 'VERB'), ('pattern', 'NOUN'), ('scores', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('compute', 'ROOT'), ('objective', 'amod'), ('function', 'dobj'), ('measures', 'relcl'), ('error', 'dobj'), ('(', 'punct'), ('dis-', 'compound'), ('tance', 'conj'), (')', 'punct'), ('output', 'compound'), ('scores', 'pobj'), ('desired', 'amod'), ('pattern', 'conj'), ('scores', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[compute, objective], [objective, function], [function, measures], [measures, error], [error, (], [(, dis-], [dis-, tance], [tance, )], [), output], [output, scores], [scores, desired], [desired, pattern], [pattern, scores], [scores, .]]

>> Trigrams: 
[[compute, objective, function], [objective, function, measures], [function, measures, error], [measures, error, (], [error, (, dis-], [(, dis-, tance], [dis-, tance, )], [tance, ), output], [), output, scores], [output, scores, desired], [scores, desired, pattern], [desired, pattern, scores], [pattern, scores, .]]

>> Noun Phrases are: 
[We, an objective function, the error, dis- tance, the output scores, the desired pattern, scores]

>> Named Entities are: 
[]


============================ Sentence 35 =============================

The  machine then modifies its internal adjustable parameters to reduce  this error. 


>> Tokens are: 
[ , machine, modifies, internal, adjustable, parameters, reduce,  , error, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('machine', 'NOUN'), ('modifies', 'VERB'), ('internal', 'ADJ'), ('adjustable', 'ADJ'), ('parameters', 'NOUN'), ('reduce', 'VERB'), (' ', 'SPACE'), ('error', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'compound'), ('machine', 'nsubj'), ('modifies', 'ROOT'), ('internal', 'amod'), ('adjustable', 'amod'), ('parameters', 'dobj'), ('reduce', 'advcl'), (' ', 'dobj'), ('error', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[ , machine], [machine, modifies], [modifies, internal], [internal, adjustable], [adjustable, parameters], [parameters, reduce], [reduce,  ], [ , error], [error, .]]

>> Trigrams: 
[[ , machine, modifies], [machine, modifies, internal], [modifies, internal, adjustable], [internal, adjustable, parameters], [adjustable, parameters, reduce], [parameters, reduce,  ], [reduce,  , error], [ , error, .]]

>> Noun Phrases are: 
[The  machine, its internal adjustable parameters, this error]

>> Named Entities are: 
[]


============================ Sentence 36 =============================

These adjustable parameters, often called weights, are real  numbers that can be seen as ‘knobs’ that define the input–output func- tion of the machine. 


>> Tokens are: 
[adjustable, parameters, ,, called, weights, ,, real,  , numbers, seen, ‘, knobs, ’, define, input, –, output, func-, tion, machine, .] 

>> PoS Tags are: 
[('adjustable', 'ADJ'), ('parameters', 'NOUN'), (',', 'PUNCT'), ('called', 'VERB'), ('weights', 'NOUN'), (',', 'PUNCT'), ('real', 'ADJ'), (' ', 'SPACE'), ('numbers', 'NOUN'), ('seen', 'VERB'), ('‘', 'PUNCT'), ('knobs', 'NOUN'), ('’', 'PUNCT'), ('define', 'VERB'), ('input', 'NOUN'), ('–', 'PUNCT'), ('output', 'NOUN'), ('func-', 'NOUN'), ('tion', 'NOUN'), ('machine', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('adjustable', 'amod'), ('parameters', 'nsubj'), (',', 'punct'), ('called', 'acl'), ('weights', 'oprd'), (',', 'punct'), ('real', 'amod'), (' ', 'compound'), ('numbers', 'attr'), ('seen', 'relcl'), ('‘', 'punct'), ('knobs', 'pobj'), ('’', 'punct'), ('define', 'relcl'), ('input', 'dobj'), ('–', 'punct'), ('output', 'compound'), ('func-', 'amod'), ('tion', 'appos'), ('machine', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[adjustable, parameters], [parameters, ,], [,, called], [called, weights], [weights, ,], [,, real], [real,  ], [ , numbers], [numbers, seen], [seen, ‘], [‘, knobs], [knobs, ’], [’, define], [define, input], [input, –], [–, output], [output, func-], [func-, tion], [tion, machine], [machine, .]]

>> Trigrams: 
[[adjustable, parameters, ,], [parameters, ,, called], [,, called, weights], [called, weights, ,], [weights, ,, real], [,, real,  ], [real,  , numbers], [ , numbers, seen], [numbers, seen, ‘], [seen, ‘, knobs], [‘, knobs, ’], [knobs, ’, define], [’, define, input], [define, input, –], [input, –, output], [–, output, func-], [output, func-, tion], [func-, tion, machine], [tion, machine, .]]

>> Noun Phrases are: 
[These adjustable parameters, weights, real  numbers, ‘knobs, the input, output func- tion, the machine]

>> Named Entities are: 
[]


============================ Sentence 37 =============================

In a typical deep-learning system, there may be  hundreds of millions of these adjustable weights, and hundreds of  millions of labelled examples with which to train the machine. 


>> Tokens are: 
[typical, deep, -, learning, system, ,,  , hundreds, millions, adjustable, weights, ,, hundreds,  , millions, labelled, examples, train, machine, .] 

>> PoS Tags are: 
[('typical', 'ADJ'), ('deep', 'ADJ'), ('-', 'PUNCT'), ('learning', 'VERB'), ('system', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('hundreds', 'NOUN'), ('millions', 'NOUN'), ('adjustable', 'ADJ'), ('weights', 'NOUN'), (',', 'PUNCT'), ('hundreds', 'NOUN'), (' ', 'SPACE'), ('millions', 'NOUN'), ('labelled', 'VERB'), ('examples', 'NOUN'), ('train', 'VERB'), ('machine', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('typical', 'amod'), ('deep', 'amod'), ('-', 'punct'), ('learning', 'amod'), ('system', 'pobj'), (',', 'punct'), (' ', 'quantmod'), ('hundreds', 'quantmod'), ('millions', 'attr'), ('adjustable', 'amod'), ('weights', 'pobj'), (',', 'punct'), ('hundreds', 'conj'), (' ', 'pobj'), ('millions', 'appos'), ('labelled', 'amod'), ('examples', 'pobj'), ('train', 'relcl'), ('machine', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[typical, deep], [deep, -], [-, learning], [learning, system], [system, ,], [,,  ], [ , hundreds], [hundreds, millions], [millions, adjustable], [adjustable, weights], [weights, ,], [,, hundreds], [hundreds,  ], [ , millions], [millions, labelled], [labelled, examples], [examples, train], [train, machine], [machine, .]]

>> Trigrams: 
[[typical, deep, -], [deep, -, learning], [-, learning, system], [learning, system, ,], [system, ,,  ], [,,  , hundreds], [ , hundreds, millions], [hundreds, millions, adjustable], [millions, adjustable, weights], [adjustable, weights, ,], [weights, ,, hundreds], [,, hundreds,  ], [hundreds,  , millions], [ , millions, labelled], [millions, labelled, examples], [labelled, examples, train], [examples, train, machine], [train, machine, .]]

>> Noun Phrases are: 
[a typical deep-learning system,  hundreds of millions, these adjustable weights, hundreds, millions, labelled examples, the machine]

>> Named Entities are: 
[('hundreds of millions', 'CARDINAL'), ('hundreds', 'CARDINAL'), ('millions', 'CARDINAL')]


============================ Sentence 38 =============================

  To properly adjust the weight vector, the learning algorithm com- putes a gradient vector that, for each weight, indicates by what amount  the error would increase or decrease if the weight were increased by a  tiny amount. 


>> Tokens are: 
[  , properly, adjust, weight, vector, ,, learning, algorithm, com-, putes, gradient, vector, ,, weight, ,, indicates,  , error, increase, decrease, weight, increased,  , tiny, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('properly', 'ADV'), ('adjust', 'VERB'), ('weight', 'NOUN'), ('vector', 'NOUN'), (',', 'PUNCT'), ('learning', 'VERB'), ('algorithm', 'NOUN'), ('com-', 'NOUN'), ('putes', 'VERB'), ('gradient', 'ADJ'), ('vector', 'NOUN'), (',', 'PUNCT'), ('weight', 'NOUN'), (',', 'PUNCT'), ('indicates', 'VERB'), (' ', 'SPACE'), ('error', 'NOUN'), ('increase', 'VERB'), ('decrease', 'VERB'), ('weight', 'NOUN'), ('increased', 'VERB'), (' ', 'SPACE'), ('tiny', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'dep'), ('properly', 'advmod'), ('adjust', 'advcl'), ('weight', 'compound'), ('vector', 'dobj'), (',', 'punct'), ('learning', 'amod'), ('algorithm', 'compound'), ('com-', 'nsubj'), ('putes', 'ROOT'), ('gradient', 'amod'), ('vector', 'dobj'), (',', 'punct'), ('weight', 'pobj'), (',', 'punct'), ('indicates', 'relcl'), (' ', 'dobj'), ('error', 'nsubj'), ('increase', 'ccomp'), ('decrease', 'conj'), ('weight', 'nsubjpass'), ('increased', 'advcl'), (' ', 'nmod'), ('tiny', 'amod'), ('.', 'punct')]

>> Bigrams: 
[[  , properly], [properly, adjust], [adjust, weight], [weight, vector], [vector, ,], [,, learning], [learning, algorithm], [algorithm, com-], [com-, putes], [putes, gradient], [gradient, vector], [vector, ,], [,, weight], [weight, ,], [,, indicates], [indicates,  ], [ , error], [error, increase], [increase, decrease], [decrease, weight], [weight, increased], [increased,  ], [ , tiny], [tiny, .]]

>> Trigrams: 
[[  , properly, adjust], [properly, adjust, weight], [adjust, weight, vector], [weight, vector, ,], [vector, ,, learning], [,, learning, algorithm], [learning, algorithm, com-], [algorithm, com-, putes], [com-, putes, gradient], [putes, gradient, vector], [gradient, vector, ,], [vector, ,, weight], [,, weight, ,], [weight, ,, indicates], [,, indicates,  ], [indicates,  , error], [ , error, increase], [error, increase, decrease], [increase, decrease, weight], [decrease, weight, increased], [weight, increased,  ], [increased,  , tiny], [ , tiny, .]]

>> Noun Phrases are: 
[the weight vector, the learning algorithm com-, a gradient vector, each weight, what amount, the error, the weight, a  tiny amount]

>> Named Entities are: 
[]


============================ Sentence 39 =============================

The weight vector is then adjusted in the opposite direc- tion to the gradient vector. 


>> Tokens are: 
[weight, vector, adjusted, opposite, direc-, tion, gradient, vector, .] 

>> PoS Tags are: 
[('weight', 'NOUN'), ('vector', 'NOUN'), ('adjusted', 'VERB'), ('opposite', 'ADJ'), ('direc-', 'ADJ'), ('tion', 'NOUN'), ('gradient', 'ADJ'), ('vector', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('weight', 'compound'), ('vector', 'nsubjpass'), ('adjusted', 'ROOT'), ('opposite', 'amod'), ('direc-', 'amod'), ('tion', 'pobj'), ('gradient', 'amod'), ('vector', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[weight, vector], [vector, adjusted], [adjusted, opposite], [opposite, direc-], [direc-, tion], [tion, gradient], [gradient, vector], [vector, .]]

>> Trigrams: 
[[weight, vector, adjusted], [vector, adjusted, opposite], [adjusted, opposite, direc-], [opposite, direc-, tion], [direc-, tion, gradient], [tion, gradient, vector], [gradient, vector, .]]

>> Noun Phrases are: 
[The weight vector, the opposite direc- tion, the gradient vector]

>> Named Entities are: 
[]


============================ Sentence 40 =============================

  The objective function, averaged over all the training examples, can   Deep learning allows computational models that are composed of multiple processing layers to learn representations of  data with multiple levels of abstraction. 


>> Tokens are: 
[  , objective, function, ,, averaged, training, examples, ,,   , Deep, learning, allows, computational, models, composed, multiple, processing, layers, learn, representations,  , data, multiple, levels, abstraction, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('objective', 'ADJ'), ('function', 'NOUN'), (',', 'PUNCT'), ('averaged', 'VERB'), ('training', 'NOUN'), ('examples', 'NOUN'), (',', 'PUNCT'), ('  ', 'SPACE'), ('Deep', 'PROPN'), ('learning', 'NOUN'), ('allows', 'VERB'), ('computational', 'ADJ'), ('models', 'NOUN'), ('composed', 'VERB'), ('multiple', 'ADJ'), ('processing', 'NOUN'), ('layers', 'NOUN'), ('learn', 'VERB'), ('representations', 'NOUN'), (' ', 'SPACE'), ('data', 'NOUN'), ('multiple', 'ADJ'), ('levels', 'NOUN'), ('abstraction', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'nmod'), ('objective', 'amod'), ('function', 'nsubj'), (',', 'punct'), ('averaged', 'acl'), ('training', 'compound'), ('examples', 'pobj'), (',', 'punct'), ('  ', 'nmod'), ('Deep', 'compound'), ('learning', 'nsubj'), ('allows', 'ROOT'), ('computational', 'amod'), ('models', 'dobj'), ('composed', 'relcl'), ('multiple', 'amod'), ('processing', 'compound'), ('layers', 'pobj'), ('learn', 'advcl'), ('representations', 'dobj'), (' ', 'compound'), ('data', 'pobj'), ('multiple', 'amod'), ('levels', 'pobj'), ('abstraction', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[  , objective], [objective, function], [function, ,], [,, averaged], [averaged, training], [training, examples], [examples, ,], [,,   ], [  , Deep], [Deep, learning], [learning, allows], [allows, computational], [computational, models], [models, composed], [composed, multiple], [multiple, processing], [processing, layers], [layers, learn], [learn, representations], [representations,  ], [ , data], [data, multiple], [multiple, levels], [levels, abstraction], [abstraction, .]]

>> Trigrams: 
[[  , objective, function], [objective, function, ,], [function, ,, averaged], [,, averaged, training], [averaged, training, examples], [training, examples, ,], [examples, ,,   ], [,,   , Deep], [  , Deep, learning], [Deep, learning, allows], [learning, allows, computational], [allows, computational, models], [computational, models, composed], [models, composed, multiple], [composed, multiple, processing], [multiple, processing, layers], [processing, layers, learn], [layers, learn, representations], [learn, representations,  ], [representations,  , data], [ , data, multiple], [data, multiple, levels], [multiple, levels, abstraction], [levels, abstraction, .]]

>> Noun Phrases are: 
[  The objective function, all the training examples,   Deep learning, computational models, multiple processing layers, representations,  data, multiple levels, abstraction]

>> Named Entities are: 
[]


============================ Sentence 41 =============================

These methods have dramatically improved the state-of-the-art in speech rec- ognition, visual object recognition, object detection and many other domains such as drug discovery and genomics. 


>> Tokens are: 
[methods, dramatically, improved, state, -, -, -, art, speech, rec-, ognition, ,, visual, object, recognition, ,, object, detection, domains, drug, discovery, genomics, .] 

>> PoS Tags are: 
[('methods', 'NOUN'), ('dramatically', 'ADV'), ('improved', 'VERB'), ('state', 'NOUN'), ('-', 'PUNCT'), ('-', 'PUNCT'), ('-', 'PUNCT'), ('art', 'NOUN'), ('speech', 'NOUN'), ('rec-', 'DET'), ('ognition', 'NOUN'), (',', 'PUNCT'), ('visual', 'ADJ'), ('object', 'NOUN'), ('recognition', 'NOUN'), (',', 'PUNCT'), ('object', 'NOUN'), ('detection', 'NOUN'), ('domains', 'NOUN'), ('drug', 'NOUN'), ('discovery', 'NOUN'), ('genomics', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('methods', 'nsubj'), ('dramatically', 'advmod'), ('improved', 'ROOT'), ('state', 'dobj'), ('-', 'punct'), ('-', 'punct'), ('-', 'punct'), ('art', 'pobj'), ('speech', 'pobj'), ('rec-', 'det'), ('ognition', 'dobj'), (',', 'punct'), ('visual', 'amod'), ('object', 'compound'), ('recognition', 'conj'), (',', 'punct'), ('object', 'compound'), ('detection', 'conj'), ('domains', 'conj'), ('drug', 'compound'), ('discovery', 'pobj'), ('genomics', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[methods, dramatically], [dramatically, improved], [improved, state], [state, -], [-, -], [-, -], [-, art], [art, speech], [speech, rec-], [rec-, ognition], [ognition, ,], [,, visual], [visual, object], [object, recognition], [recognition, ,], [,, object], [object, detection], [detection, domains], [domains, drug], [drug, discovery], [discovery, genomics], [genomics, .]]

>> Trigrams: 
[[methods, dramatically, improved], [dramatically, improved, state], [improved, state, -], [state, -, -], [-, -, -], [-, -, art], [-, art, speech], [art, speech, rec-], [speech, rec-, ognition], [rec-, ognition, ,], [ognition, ,, visual], [,, visual, object], [visual, object, recognition], [object, recognition, ,], [recognition, ,, object], [,, object, detection], [object, detection, domains], [detection, domains, drug], [domains, drug, discovery], [drug, discovery, genomics], [discovery, genomics, .]]

>> Noun Phrases are: 
[These methods, the state, the-art, speech, rec- ognition, visual object recognition, object detection, many other domains, drug discovery, genomics]

>> Named Entities are: 
[]


============================ Sentence 42 =============================

Deep  learning discovers intricate structure in large data sets by using the backpropagation algorithm to indicate how a machine  should change its internal parameters that are used to compute the representation in each layer from the representation in  the previous layer. 


>> Tokens are: 
[Deep,  , learning, discovers, intricate, structure, large, data, sets, backpropagation, algorithm, indicate, machine,  , change, internal, parameters, compute, representation, layer, representation,  , previous, layer, .] 

>> PoS Tags are: 
[('Deep', 'ADJ'), (' ', 'SPACE'), ('learning', 'NOUN'), ('discovers', 'VERB'), ('intricate', 'ADJ'), ('structure', 'NOUN'), ('large', 'ADJ'), ('data', 'NOUN'), ('sets', 'NOUN'), ('backpropagation', 'NOUN'), ('algorithm', 'NOUN'), ('indicate', 'VERB'), ('machine', 'NOUN'), (' ', 'SPACE'), ('change', 'VERB'), ('internal', 'ADJ'), ('parameters', 'NOUN'), ('compute', 'VERB'), ('representation', 'NOUN'), ('layer', 'NOUN'), ('representation', 'NOUN'), (' ', 'SPACE'), ('previous', 'ADJ'), ('layer', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Deep', 'amod'), (' ', 'compound'), ('learning', 'nsubj'), ('discovers', 'ROOT'), ('intricate', 'amod'), ('structure', 'dobj'), ('large', 'amod'), ('data', 'compound'), ('sets', 'pobj'), ('backpropagation', 'compound'), ('algorithm', 'dobj'), ('indicate', 'xcomp'), ('machine', 'dobj'), (' ', 'nsubj'), ('change', 'relcl'), ('internal', 'amod'), ('parameters', 'dobj'), ('compute', 'xcomp'), ('representation', 'dobj'), ('layer', 'pobj'), ('representation', 'pobj'), (' ', 'pobj'), ('previous', 'amod'), ('layer', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[Deep,  ], [ , learning], [learning, discovers], [discovers, intricate], [intricate, structure], [structure, large], [large, data], [data, sets], [sets, backpropagation], [backpropagation, algorithm], [algorithm, indicate], [indicate, machine], [machine,  ], [ , change], [change, internal], [internal, parameters], [parameters, compute], [compute, representation], [representation, layer], [layer, representation], [representation,  ], [ , previous], [previous, layer], [layer, .]]

>> Trigrams: 
[[Deep,  , learning], [ , learning, discovers], [learning, discovers, intricate], [discovers, intricate, structure], [intricate, structure, large], [structure, large, data], [large, data, sets], [data, sets, backpropagation], [sets, backpropagation, algorithm], [backpropagation, algorithm, indicate], [algorithm, indicate, machine], [indicate, machine,  ], [machine,  , change], [ , change, internal], [change, internal, parameters], [internal, parameters, compute], [parameters, compute, representation], [compute, representation, layer], [representation, layer, representation], [layer, representation,  ], [representation,  , previous], [ , previous, layer], [previous, layer, .]]

>> Noun Phrases are: 
[Deep  learning, intricate structure, large data sets, the backpropagation algorithm, how a machine, its internal parameters, the representation, each layer, the representation, the previous layer]

>> Named Entities are: 
[]


============================ Sentence 43 =============================

Deep convolutional nets have brought about breakthroughs in processing images, video, speech and  audio, whereas recurrent nets have shone light on sequential data such as text and speech. 


>> Tokens are: 
[Deep, convolutional, nets, brought, breakthroughs, processing, images, ,, video, ,, speech,  , audio, ,, recurrent, nets, shone, light, sequential, data, text, speech, .] 

>> PoS Tags are: 
[('Deep', 'ADJ'), ('convolutional', 'ADJ'), ('nets', 'NOUN'), ('brought', 'VERB'), ('breakthroughs', 'NOUN'), ('processing', 'NOUN'), ('images', 'NOUN'), (',', 'PUNCT'), ('video', 'NOUN'), (',', 'PUNCT'), ('speech', 'NOUN'), (' ', 'SPACE'), ('audio', 'NOUN'), (',', 'PUNCT'), ('recurrent', 'ADJ'), ('nets', 'NOUN'), ('shone', 'VERB'), ('light', 'NOUN'), ('sequential', 'ADJ'), ('data', 'NOUN'), ('text', 'NOUN'), ('speech', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Deep', 'amod'), ('convolutional', 'amod'), ('nets', 'nsubj'), ('brought', 'ROOT'), ('breakthroughs', 'dobj'), ('processing', 'compound'), ('images', 'pobj'), (',', 'punct'), ('video', 'conj'), (',', 'punct'), ('speech', 'conj'), (' ', 'conj'), ('audio', 'conj'), (',', 'punct'), ('recurrent', 'amod'), ('nets', 'nsubj'), ('shone', 'advcl'), ('light', 'dobj'), ('sequential', 'amod'), ('data', 'pobj'), ('text', 'pobj'), ('speech', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[Deep, convolutional], [convolutional, nets], [nets, brought], [brought, breakthroughs], [breakthroughs, processing], [processing, images], [images, ,], [,, video], [video, ,], [,, speech], [speech,  ], [ , audio], [audio, ,], [,, recurrent], [recurrent, nets], [nets, shone], [shone, light], [light, sequential], [sequential, data], [data, text], [text, speech], [speech, .]]

>> Trigrams: 
[[Deep, convolutional, nets], [convolutional, nets, brought], [nets, brought, breakthroughs], [brought, breakthroughs, processing], [breakthroughs, processing, images], [processing, images, ,], [images, ,, video], [,, video, ,], [video, ,, speech], [,, speech,  ], [speech,  , audio], [ , audio, ,], [audio, ,, recurrent], [,, recurrent, nets], [recurrent, nets, shone], [nets, shone, light], [shone, light, sequential], [light, sequential, data], [sequential, data, text], [data, text, speech], [text, speech, .]]

>> Noun Phrases are: 
[Deep convolutional nets, breakthroughs, processing images, video, speech, audio, recurrent nets, light, sequential data, text, speech]

>> Named Entities are: 
[]


============================ Sentence 44 =============================

  Deep learning Yann LeCun1,2, Yoshua Bengio3 & Geoffrey Hinton4,5  4 3 6  |   


>> Tokens are: 
[  , Deep, learning, Yann, LeCun1,2, ,, Yoshua, Bengio3, &, Geoffrey, Hinton4,5,  , 4, 3, 6,  , |,  ] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('Deep', 'PROPN'), ('learning', 'VERB'), ('Yann', 'PROPN'), ('LeCun1,2', 'PROPN'), (',', 'PUNCT'), ('Yoshua', 'PROPN'), ('Bengio3', 'PROPN'), ('&', 'CCONJ'), ('Geoffrey', 'PROPN'), ('Hinton4,5', 'X'), (' ', 'SPACE'), ('4', 'NUM'), ('3', 'NUM'), ('6', 'NUM'), (' ', 'SPACE'), ('|', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'dep'), ('Deep', 'advmod'), ('learning', 'ROOT'), ('Yann', 'compound'), ('LeCun1,2', 'dobj'), (',', 'punct'), ('Yoshua', 'compound'), ('Bengio3', 'conj'), ('&', 'cc'), ('Geoffrey', 'conj'), ('Hinton4,5', 'punct'), (' ', 'appos'), ('4', 'compound'), ('3', 'compound'), ('6', 'nummod'), (' ', 'dobj'), ('|', 'npadvmod'), (' ', 'punct')]

>> Bigrams: 
[[  , Deep], [Deep, learning], [learning, Yann], [Yann, LeCun1,2], [LeCun1,2, ,], [,, Yoshua], [Yoshua, Bengio3], [Bengio3, &], [&, Geoffrey], [Geoffrey, Hinton4,5], [Hinton4,5,  ], [ , 4], [4, 3], [3, 6], [6,  ], [ , |], [|,  ]]

>> Trigrams: 
[[  , Deep, learning], [Deep, learning, Yann], [learning, Yann, LeCun1,2], [Yann, LeCun1,2, ,], [LeCun1,2, ,, Yoshua], [,, Yoshua, Bengio3], [Yoshua, Bengio3, &], [Bengio3, &, Geoffrey], [&, Geoffrey, Hinton4,5], [Geoffrey, Hinton4,5,  ], [Hinton4,5,  , 4], [ , 4, 3], [4, 3, 6], [3, 6,  ], [6,  , |], [ , |,  ]]

>> Noun Phrases are: 
[Yann LeCun1,2, Yoshua Bengio3, Geoffrey]

>> Named Entities are: 
[('Yoshua Bengio3 & Geoffrey Hinton4,5', 'ORG'), ('4 3 6', 'CARDINAL')]


============================ Sentence 45 =============================

N A T U R E  |  V O L  5 2 1  |  2 8  M A Y  2 0 1 5  REVIEW doi:10.1038/nature14539  © 2015 Macmillan Publishers Limited. 


>> Tokens are: 
[N, T, U, R, E,  , |,  , V, O, L,  , 5, 2, 1,  , |,  , 2, 8,  , M, Y,  , 2, 0, 1, 5,  , REVIEW, doi:10.1038, /, nature14539,  , ©, 2015, Macmillan, Publishers, Limited, .] 

>> PoS Tags are: 
[('N', 'PROPN'), ('T', 'NOUN'), ('U', 'NOUN'), ('R', 'NOUN'), ('E', 'NOUN'), (' ', 'SPACE'), ('|', 'NOUN'), (' ', 'SPACE'), ('V', 'NOUN'), ('O', 'NOUN'), ('L', 'NOUN'), (' ', 'SPACE'), ('5', 'NUM'), ('2', 'NUM'), ('1', 'NUM'), (' ', 'SPACE'), ('|', 'NOUN'), (' ', 'SPACE'), ('2', 'NUM'), ('8', 'NUM'), (' ', 'SPACE'), ('M', 'PROPN'), ('Y', 'PROPN'), (' ', 'SPACE'), ('2', 'NUM'), ('0', 'NUM'), ('1', 'NUM'), ('5', 'NUM'), (' ', 'SPACE'), ('REVIEW', 'PROPN'), ('doi:10.1038', 'NOUN'), ('/', 'PUNCT'), ('nature14539', 'PROPN'), (' ', 'SPACE'), ('©', 'ADJ'), ('2015', 'NUM'), ('Macmillan', 'PROPN'), ('Publishers', 'PROPN'), ('Limited', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('N', 'compound'), ('T', 'compound'), ('U', 'compound'), ('R', 'compound'), ('E', 'ROOT'), (' ', 'appos'), ('|', 'npadvmod'), (' ', 'punct'), ('V', 'compound'), ('O', 'appos'), ('L', 'appos'), (' ', 'appos'), ('5', 'compound'), ('2', 'compound'), ('1', 'nummod'), (' ', 'punct'), ('|', 'npadvmod'), (' ', 'appos'), ('2', 'compound'), ('8', 'nummod'), (' ', 'compound'), ('M', 'compound'), ('Y', 'nmod'), (' ', 'appos'), ('2', 'nummod'), ('0', 'quantmod'), ('1', 'compound'), ('5', 'nummod'), (' ', 'compound'), ('REVIEW', 'compound'), ('doi:10.1038', 'appos'), ('/', 'punct'), ('nature14539', 'appos'), (' ', 'appos'), ('©', 'amod'), ('2015', 'compound'), ('Macmillan', 'compound'), ('Publishers', 'compound'), ('Limited', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[N, T], [T, U], [U, R], [R, E], [E,  ], [ , |], [|,  ], [ , V], [V, O], [O, L], [L,  ], [ , 5], [5, 2], [2, 1], [1,  ], [ , |], [|,  ], [ , 2], [2, 8], [8,  ], [ , M], [M, Y], [Y,  ], [ , 2], [2, 0], [0, 1], [1, 5], [5,  ], [ , REVIEW], [REVIEW, doi:10.1038], [doi:10.1038, /], [/, nature14539], [nature14539,  ], [ , ©], [©, 2015], [2015, Macmillan], [Macmillan, Publishers], [Publishers, Limited], [Limited, .]]

>> Trigrams: 
[[N, T, U], [T, U, R], [U, R, E], [R, E,  ], [E,  , |], [ , |,  ], [|,  , V], [ , V, O], [V, O, L], [O, L,  ], [L,  , 5], [ , 5, 2], [5, 2, 1], [2, 1,  ], [1,  , |], [ , |,  ], [|,  , 2], [ , 2, 8], [2, 8,  ], [8,  , M], [ , M, Y], [M, Y,  ], [Y,  , 2], [ , 2, 0], [2, 0, 1], [0, 1, 5], [1, 5,  ], [5,  , REVIEW], [ , REVIEW, doi:10.1038], [REVIEW, doi:10.1038, /], [doi:10.1038, /, nature14539], [/, nature14539,  ], [nature14539,  , ©], [ , ©, 2015], [©, 2015, Macmillan], [2015, Macmillan, Publishers], [Macmillan, Publishers, Limited], [Publishers, Limited, .]]

>> Noun Phrases are: 
[N A T U R E, V O, L, 2 0 1 5  REVIEW doi:10.1038, nature14539, © 2015 Macmillan Publishers Limited]

>> Named Entities are: 
[('2', 'CARDINAL'), ('2015', 'DATE'), ('Macmillan Publishers Limited', 'ORG')]


============================ Sentence 46 =============================

All rights reserved    be seen as a kind of hilly landscape in the high-dimensional space of  weight values. 


>> Tokens are: 
[rights, reserved,    , seen, kind, hilly, landscape, high, -, dimensional, space,  , weight, values, .] 

>> PoS Tags are: 
[('rights', 'NOUN'), ('reserved', 'VERB'), ('   ', 'SPACE'), ('seen', 'VERB'), ('kind', 'NOUN'), ('hilly', 'ADJ'), ('landscape', 'NOUN'), ('high', 'ADJ'), ('-', 'PUNCT'), ('dimensional', 'ADJ'), ('space', 'NOUN'), (' ', 'SPACE'), ('weight', 'NOUN'), ('values', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('rights', 'nsubj'), ('reserved', 'ROOT'), ('   ', 'nsubjpass'), ('seen', 'conj'), ('kind', 'pobj'), ('hilly', 'amod'), ('landscape', 'pobj'), ('high', 'advmod'), ('-', 'punct'), ('dimensional', 'amod'), ('space', 'pobj'), (' ', 'compound'), ('weight', 'compound'), ('values', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[rights, reserved], [reserved,    ], [   , seen], [seen, kind], [kind, hilly], [hilly, landscape], [landscape, high], [high, -], [-, dimensional], [dimensional, space], [space,  ], [ , weight], [weight, values], [values, .]]

>> Trigrams: 
[[rights, reserved,    ], [reserved,    , seen], [   , seen, kind], [seen, kind, hilly], [kind, hilly, landscape], [hilly, landscape, high], [landscape, high, -], [high, -, dimensional], [-, dimensional, space], [dimensional, space,  ], [space,  , weight], [ , weight, values], [weight, values, .]]

>> Noun Phrases are: 
[All rights, a kind, hilly landscape, the high-dimensional space,  weight values]

>> Named Entities are: 
[]


============================ Sentence 47 =============================

The negative gradient vector indicates the direction  of steepest descent in this landscape, taking it closer to a minimum,  where the output error is low on average. 


>> Tokens are: 
[negative, gradient, vector, indicates, direction,  , steepest, descent, landscape, ,, taking, closer, minimum, ,,  , output, error, low, average, .] 

>> PoS Tags are: 
[('negative', 'ADJ'), ('gradient', 'NOUN'), ('vector', 'NOUN'), ('indicates', 'VERB'), ('direction', 'NOUN'), (' ', 'SPACE'), ('steepest', 'ADJ'), ('descent', 'NOUN'), ('landscape', 'NOUN'), (',', 'PUNCT'), ('taking', 'VERB'), ('closer', 'ADV'), ('minimum', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('output', 'NOUN'), ('error', 'NOUN'), ('low', 'ADJ'), ('average', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('negative', 'amod'), ('gradient', 'compound'), ('vector', 'nsubj'), ('indicates', 'ROOT'), ('direction', 'dobj'), (' ', 'appos'), ('steepest', 'amod'), ('descent', 'pobj'), ('landscape', 'pobj'), (',', 'punct'), ('taking', 'advcl'), ('closer', 'advmod'), ('minimum', 'pobj'), (',', 'punct'), (' ', 'dobj'), ('output', 'compound'), ('error', 'nsubj'), ('low', 'acomp'), ('average', 'amod'), ('.', 'punct')]

>> Bigrams: 
[[negative, gradient], [gradient, vector], [vector, indicates], [indicates, direction], [direction,  ], [ , steepest], [steepest, descent], [descent, landscape], [landscape, ,], [,, taking], [taking, closer], [closer, minimum], [minimum, ,], [,,  ], [ , output], [output, error], [error, low], [low, average], [average, .]]

>> Trigrams: 
[[negative, gradient, vector], [gradient, vector, indicates], [vector, indicates, direction], [indicates, direction,  ], [direction,  , steepest], [ , steepest, descent], [steepest, descent, landscape], [descent, landscape, ,], [landscape, ,, taking], [,, taking, closer], [taking, closer, minimum], [closer, minimum, ,], [minimum, ,,  ], [,,  , output], [ , output, error], [output, error, low], [error, low, average], [low, average, .]]

>> Noun Phrases are: 
[The negative gradient vector, the direction, steepest descent, this landscape, it, a minimum, the output error]

>> Named Entities are: 
[]


============================ Sentence 48 =============================

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 49 =============================

In practice, most practitioners use a procedure called stochastic  gradient descent (SGD). 


>> Tokens are: 
[practice, ,, practitioners, use, procedure, called, stochastic,  , gradient, descent, (, SGD, ), .] 

>> PoS Tags are: 
[('practice', 'NOUN'), (',', 'PUNCT'), ('practitioners', 'NOUN'), ('use', 'VERB'), ('procedure', 'NOUN'), ('called', 'VERB'), ('stochastic', 'ADJ'), (' ', 'SPACE'), ('gradient', 'ADJ'), ('descent', 'NOUN'), ('(', 'PUNCT'), ('SGD', 'PROPN'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('practice', 'pobj'), (',', 'punct'), ('practitioners', 'nsubj'), ('use', 'ROOT'), ('procedure', 'dobj'), ('called', 'acl'), ('stochastic', 'amod'), (' ', 'nmod'), ('gradient', 'amod'), ('descent', 'oprd'), ('(', 'punct'), ('SGD', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[practice, ,], [,, practitioners], [practitioners, use], [use, procedure], [procedure, called], [called, stochastic], [stochastic,  ], [ , gradient], [gradient, descent], [descent, (], [(, SGD], [SGD, )], [), .]]

>> Trigrams: 
[[practice, ,, practitioners], [,, practitioners, use], [practitioners, use, procedure], [use, procedure, called], [procedure, called, stochastic], [called, stochastic,  ], [stochastic,  , gradient], [ , gradient, descent], [gradient, descent, (], [descent, (, SGD], [(, SGD, )], [SGD, ), .]]

>> Noun Phrases are: 
[practice, most practitioners, a procedure, stochastic  gradient descent, (SGD]

>> Named Entities are: 
[]


============================ Sentence 50 =============================

This consists of showing the input vector  for a few examples, computing the outputs and the errors, computing  the average gradient for those examples, and adjusting the weights  accordingly. 


>> Tokens are: 
[consists, showing, input, vector,  , examples, ,, computing, outputs, errors, ,, computing,  , average, gradient, examples, ,, adjusting, weights,  , accordingly, .] 

>> PoS Tags are: 
[('consists', 'VERB'), ('showing', 'VERB'), ('input', 'NOUN'), ('vector', 'NOUN'), (' ', 'SPACE'), ('examples', 'NOUN'), (',', 'PUNCT'), ('computing', 'VERB'), ('outputs', 'NOUN'), ('errors', 'NOUN'), (',', 'PUNCT'), ('computing', 'VERB'), (' ', 'SPACE'), ('average', 'ADJ'), ('gradient', 'NOUN'), ('examples', 'NOUN'), (',', 'PUNCT'), ('adjusting', 'VERB'), ('weights', 'NOUN'), (' ', 'SPACE'), ('accordingly', 'ADV'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('consists', 'ROOT'), ('showing', 'pcomp'), ('input', 'compound'), ('vector', 'compound'), (' ', 'dobj'), ('examples', 'pobj'), (',', 'punct'), ('computing', 'conj'), ('outputs', 'dobj'), ('errors', 'conj'), (',', 'punct'), ('computing', 'conj'), (' ', 'dobj'), ('average', 'amod'), ('gradient', 'dobj'), ('examples', 'pobj'), (',', 'punct'), ('adjusting', 'conj'), ('weights', 'dobj'), (' ', 'dobj'), ('accordingly', 'advmod'), ('.', 'punct')]

>> Bigrams: 
[[consists, showing], [showing, input], [input, vector], [vector,  ], [ , examples], [examples, ,], [,, computing], [computing, outputs], [outputs, errors], [errors, ,], [,, computing], [computing,  ], [ , average], [average, gradient], [gradient, examples], [examples, ,], [,, adjusting], [adjusting, weights], [weights,  ], [ , accordingly], [accordingly, .]]

>> Trigrams: 
[[consists, showing, input], [showing, input, vector], [input, vector,  ], [vector,  , examples], [ , examples, ,], [examples, ,, computing], [,, computing, outputs], [computing, outputs, errors], [outputs, errors, ,], [errors, ,, computing], [,, computing,  ], [computing,  , average], [ , average, gradient], [average, gradient, examples], [gradient, examples, ,], [examples, ,, adjusting], [,, adjusting, weights], [adjusting, weights,  ], [weights,  , accordingly], [ , accordingly, .]]

>> Noun Phrases are: 
[a few examples, the outputs, the errors, the average gradient, those examples, the weights]

>> Named Entities are: 
[]


============================ Sentence 51 =============================

The process is repeated for many small sets of examples  from the training set until the average of the objective function stops  decreasing. 


>> Tokens are: 
[process, repeated, small, sets, examples,  , training, set, average, objective, function, stops,  , decreasing, .] 

>> PoS Tags are: 
[('process', 'NOUN'), ('repeated', 'VERB'), ('small', 'ADJ'), ('sets', 'NOUN'), ('examples', 'NOUN'), (' ', 'SPACE'), ('training', 'NOUN'), ('set', 'VERB'), ('average', 'NOUN'), ('objective', 'ADJ'), ('function', 'NOUN'), ('stops', 'VERB'), (' ', 'SPACE'), ('decreasing', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('process', 'nsubjpass'), ('repeated', 'ROOT'), ('small', 'amod'), ('sets', 'pobj'), ('examples', 'pobj'), (' ', 'advcl'), ('training', 'compound'), ('set', 'pobj'), ('average', 'nsubj'), ('objective', 'amod'), ('function', 'pobj'), ('stops', 'advcl'), (' ', 'nsubj'), ('decreasing', 'advcl'), ('.', 'punct')]

>> Bigrams: 
[[process, repeated], [repeated, small], [small, sets], [sets, examples], [examples,  ], [ , training], [training, set], [set, average], [average, objective], [objective, function], [function, stops], [stops,  ], [ , decreasing], [decreasing, .]]

>> Trigrams: 
[[process, repeated, small], [repeated, small, sets], [small, sets, examples], [sets, examples,  ], [examples,  , training], [ , training, set], [training, set, average], [set, average, objective], [average, objective, function], [objective, function, stops], [function, stops,  ], [stops,  , decreasing], [ , decreasing, .]]

>> Noun Phrases are: 
[The process, many small sets, examples, the average, the objective function]

>> Named Entities are: 
[]


============================ Sentence 52 =============================

It is called stochastic because each small set of examples  gives a noisy estimate of the average gradient over all examples. 


>> Tokens are: 
[called, stochastic, small, set, examples,  , gives, noisy, estimate, average, gradient, examples, .] 

>> PoS Tags are: 
[('called', 'VERB'), ('stochastic', 'NOUN'), ('small', 'ADJ'), ('set', 'NOUN'), ('examples', 'NOUN'), (' ', 'SPACE'), ('gives', 'VERB'), ('noisy', 'ADJ'), ('estimate', 'NOUN'), ('average', 'ADJ'), ('gradient', 'NOUN'), ('examples', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('called', 'ROOT'), ('stochastic', 'oprd'), ('small', 'amod'), ('set', 'nsubj'), ('examples', 'pobj'), (' ', 'nsubj'), ('gives', 'advcl'), ('noisy', 'amod'), ('estimate', 'dobj'), ('average', 'amod'), ('gradient', 'pobj'), ('examples', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[called, stochastic], [stochastic, small], [small, set], [set, examples], [examples,  ], [ , gives], [gives, noisy], [noisy, estimate], [estimate, average], [average, gradient], [gradient, examples], [examples, .]]

>> Trigrams: 
[[called, stochastic, small], [stochastic, small, set], [small, set, examples], [set, examples,  ], [examples,  , gives], [ , gives, noisy], [gives, noisy, estimate], [noisy, estimate, average], [estimate, average, gradient], [average, gradient, examples], [gradient, examples, .]]

>> Noun Phrases are: 
[It, stochastic, each small set, examples, a noisy estimate, the average gradient, all examples]

>> Named Entities are: 
[]


============================ Sentence 53 =============================

This  simple procedure usually finds a good set of weights surprisingly  quickly when compared with far more elaborate optimization tech- niques18. 


>> Tokens are: 
[ , simple, procedure, usually, finds, good, set, weights, surprisingly,  , quickly, compared, far, elaborate, optimization, tech-, niques18, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('simple', 'ADJ'), ('procedure', 'NOUN'), ('usually', 'ADV'), ('finds', 'VERB'), ('good', 'ADJ'), ('set', 'NOUN'), ('weights', 'NOUN'), ('surprisingly', 'ADV'), (' ', 'SPACE'), ('quickly', 'ADV'), ('compared', 'VERB'), ('far', 'ADV'), ('elaborate', 'ADJ'), ('optimization', 'NOUN'), ('tech-', 'NOUN'), ('niques18', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'nmod'), ('simple', 'amod'), ('procedure', 'nsubj'), ('usually', 'advmod'), ('finds', 'ROOT'), ('good', 'amod'), ('set', 'dobj'), ('weights', 'pobj'), ('surprisingly', 'advmod'), (' ', 'dobj'), ('quickly', 'advmod'), ('compared', 'advcl'), ('far', 'advmod'), ('elaborate', 'amod'), ('optimization', 'compound'), ('tech-', 'compound'), ('niques18', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[ , simple], [simple, procedure], [procedure, usually], [usually, finds], [finds, good], [good, set], [set, weights], [weights, surprisingly], [surprisingly,  ], [ , quickly], [quickly, compared], [compared, far], [far, elaborate], [elaborate, optimization], [optimization, tech-], [tech-, niques18], [niques18, .]]

>> Trigrams: 
[[ , simple, procedure], [simple, procedure, usually], [procedure, usually, finds], [usually, finds, good], [finds, good, set], [good, set, weights], [set, weights, surprisingly], [weights, surprisingly,  ], [surprisingly,  , quickly], [ , quickly, compared], [quickly, compared, far], [compared, far, elaborate], [far, elaborate, optimization], [elaborate, optimization, tech-], [optimization, tech-, niques18], [tech-, niques18, .]]

>> Noun Phrases are: 
[This  simple procedure, a good set, weights, far more elaborate optimization tech- niques18]

>> Named Entities are: 
[]


============================ Sentence 54 =============================

After training, the performance of the system is measured  on a different set of examples called a test set. 


>> Tokens are: 
[training, ,, performance, system, measured,  , different, set, examples, called, test, set, .] 

>> PoS Tags are: 
[('training', 'NOUN'), (',', 'PUNCT'), ('performance', 'NOUN'), ('system', 'NOUN'), ('measured', 'VERB'), (' ', 'SPACE'), ('different', 'ADJ'), ('set', 'NOUN'), ('examples', 'NOUN'), ('called', 'VERB'), ('test', 'NOUN'), ('set', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('training', 'pobj'), (',', 'punct'), ('performance', 'nsubjpass'), ('system', 'pobj'), ('measured', 'ROOT'), (' ', 'dobj'), ('different', 'amod'), ('set', 'pobj'), ('examples', 'pobj'), ('called', 'acl'), ('test', 'compound'), ('set', 'oprd'), ('.', 'punct')]

>> Bigrams: 
[[training, ,], [,, performance], [performance, system], [system, measured], [measured,  ], [ , different], [different, set], [set, examples], [examples, called], [called, test], [test, set], [set, .]]

>> Trigrams: 
[[training, ,, performance], [,, performance, system], [performance, system, measured], [system, measured,  ], [measured,  , different], [ , different, set], [different, set, examples], [set, examples, called], [examples, called, test], [called, test, set], [test, set, .]]

>> Noun Phrases are: 
[training, the performance, the system, a different set, examples, a test set]

>> Named Entities are: 
[]


============================ Sentence 55 =============================

This serves to test the  generalization ability of the machine — its ability to produce sensible  answers on new inputs that it has never seen during training. 


>> Tokens are: 
[serves, test,  , generalization, ability, machine, —, ability, produce, sensible,  , answers, new, inputs, seen, training, .] 

>> PoS Tags are: 
[('serves', 'VERB'), ('test', 'VERB'), (' ', 'SPACE'), ('generalization', 'NOUN'), ('ability', 'NOUN'), ('machine', 'NOUN'), ('—', 'PUNCT'), ('ability', 'NOUN'), ('produce', 'VERB'), ('sensible', 'NOUN'), (' ', 'SPACE'), ('answers', 'NOUN'), ('new', 'ADJ'), ('inputs', 'NOUN'), ('seen', 'VERB'), ('training', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('serves', 'ROOT'), ('test', 'xcomp'), (' ', 'compound'), ('generalization', 'compound'), ('ability', 'dobj'), ('machine', 'pobj'), ('—', 'punct'), ('ability', 'appos'), ('produce', 'acl'), ('sensible', 'amod'), (' ', 'compound'), ('answers', 'dobj'), ('new', 'amod'), ('inputs', 'pobj'), ('seen', 'relcl'), ('training', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[serves, test], [test,  ], [ , generalization], [generalization, ability], [ability, machine], [machine, —], [—, ability], [ability, produce], [produce, sensible], [sensible,  ], [ , answers], [answers, new], [new, inputs], [inputs, seen], [seen, training], [training, .]]

>> Trigrams: 
[[serves, test,  ], [test,  , generalization], [ , generalization, ability], [generalization, ability, machine], [ability, machine, —], [machine, —, ability], [—, ability, produce], [ability, produce, sensible], [produce, sensible,  ], [sensible,  , answers], [ , answers, new], [answers, new, inputs], [new, inputs, seen], [inputs, seen, training], [seen, training, .]]

>> Noun Phrases are: 
[the  generalization ability, the machine, its ability, sensible  answers, new inputs, it, training]

>> Named Entities are: 
[]


============================ Sentence 56 =============================

  Many of the current practical applications of machine learning use  linear classifiers on top of hand-engineered features. 


>> Tokens are: 
[  , current, practical, applications, machine, learning, use,  , linear, classifiers, hand, -, engineered, features, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('current', 'ADJ'), ('practical', 'ADJ'), ('applications', 'NOUN'), ('machine', 'NOUN'), ('learning', 'NOUN'), ('use', 'VERB'), (' ', 'SPACE'), ('linear', 'ADJ'), ('classifiers', 'NOUN'), ('hand', 'NOUN'), ('-', 'PUNCT'), ('engineered', 'VERB'), ('features', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'nsubj'), ('current', 'amod'), ('practical', 'amod'), ('applications', 'pobj'), ('machine', 'compound'), ('learning', 'pobj'), ('use', 'ROOT'), (' ', 'dobj'), ('linear', 'amod'), ('classifiers', 'dobj'), ('hand', 'npadvmod'), ('-', 'punct'), ('engineered', 'amod'), ('features', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[  , current], [current, practical], [practical, applications], [applications, machine], [machine, learning], [learning, use], [use,  ], [ , linear], [linear, classifiers], [classifiers, hand], [hand, -], [-, engineered], [engineered, features], [features, .]]

>> Trigrams: 
[[  , current, practical], [current, practical, applications], [practical, applications, machine], [applications, machine, learning], [machine, learning, use], [learning, use,  ], [use,  , linear], [ , linear, classifiers], [linear, classifiers, hand], [classifiers, hand, -], [hand, -, engineered], [-, engineered, features], [engineered, features, .]]

>> Noun Phrases are: 
[the current practical applications, machine learning, linear classifiers, top, hand-engineered features]

>> Named Entities are: 
[]


============================ Sentence 57 =============================

A two-class linear  classifier computes a weighted sum of the feature vector components. 


>> Tokens are: 
[-, class, linear,  , classifier, computes, weighted, sum, feature, vector, components, .] 

>> PoS Tags are: 
[('-', 'PUNCT'), ('class', 'NOUN'), ('linear', 'NOUN'), (' ', 'SPACE'), ('classifier', 'NOUN'), ('computes', 'NOUN'), ('weighted', 'ADJ'), ('sum', 'NOUN'), ('feature', 'NOUN'), ('vector', 'NOUN'), ('components', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('-', 'punct'), ('class', 'compound'), ('linear', 'amod'), (' ', 'amod'), ('classifier', 'amod'), ('computes', 'ROOT'), ('weighted', 'amod'), ('sum', 'dobj'), ('feature', 'compound'), ('vector', 'compound'), ('components', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[-, class], [class, linear], [linear,  ], [ , classifier], [classifier, computes], [computes, weighted], [weighted, sum], [sum, feature], [feature, vector], [vector, components], [components, .]]

>> Trigrams: 
[[-, class, linear], [class, linear,  ], [linear,  , classifier], [ , classifier, computes], [classifier, computes, weighted], [computes, weighted, sum], [weighted, sum, feature], [sum, feature, vector], [feature, vector, components], [vector, components, .]]

>> Noun Phrases are: 
[A two-class linear  classifier computes, a weighted sum, the feature vector components]

>> Named Entities are: 
[('two', 'CARDINAL')]


============================ Sentence 58 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 59 =============================

If the weighted sum is above a threshold, the input is classified as  belonging to a particular category. 


>> Tokens are: 
[weighted, sum, threshold, ,, input, classified,  , belonging, particular, category, .] 

>> PoS Tags are: 
[('weighted', 'ADJ'), ('sum', 'NOUN'), ('threshold', 'NOUN'), (',', 'PUNCT'), ('input', 'NOUN'), ('classified', 'VERB'), (' ', 'SPACE'), ('belonging', 'VERB'), ('particular', 'ADJ'), ('category', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('weighted', 'amod'), ('sum', 'nsubj'), ('threshold', 'pobj'), (',', 'punct'), ('input', 'nsubjpass'), ('classified', 'ROOT'), (' ', 'nsubj'), ('belonging', 'pcomp'), ('particular', 'amod'), ('category', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[weighted, sum], [sum, threshold], [threshold, ,], [,, input], [input, classified], [classified,  ], [ , belonging], [belonging, particular], [particular, category], [category, .]]

>> Trigrams: 
[[weighted, sum, threshold], [sum, threshold, ,], [threshold, ,, input], [,, input, classified], [input, classified,  ], [classified,  , belonging], [ , belonging, particular], [belonging, particular, category], [particular, category, .]]

>> Noun Phrases are: 
[the weighted sum, a threshold, the input, a particular category]

>> Named Entities are: 
[]


============================ Sentence 60 =============================

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 61 =============================

Since the 1960s we have known that linear classifiers can only carve  their input space into very simple regions, namely half-spaces sepa- rated by a hyperplane19. 


>> Tokens are: 
[1960s, known, linear, classifiers, carve,  , input, space, simple, regions, ,, half, -, spaces, sepa-, rated, hyperplane19, .] 

>> PoS Tags are: 
[('1960s', 'NOUN'), ('known', 'VERB'), ('linear', 'ADJ'), ('classifiers', 'NOUN'), ('carve', 'VERB'), (' ', 'SPACE'), ('input', 'NOUN'), ('space', 'NOUN'), ('simple', 'ADJ'), ('regions', 'NOUN'), (',', 'PUNCT'), ('half', 'ADJ'), ('-', 'PUNCT'), ('spaces', 'NOUN'), ('sepa-', 'PROPN'), ('rated', 'VERB'), ('hyperplane19', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('1960s', 'pobj'), ('known', 'ROOT'), ('linear', 'amod'), ('classifiers', 'nsubj'), ('carve', 'ccomp'), (' ', 'dative'), ('input', 'compound'), ('space', 'dobj'), ('simple', 'amod'), ('regions', 'pobj'), (',', 'punct'), ('half', 'amod'), ('-', 'punct'), ('spaces', 'appos'), ('sepa-', 'appos'), ('rated', 'acl'), ('hyperplane19', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[1960s, known], [known, linear], [linear, classifiers], [classifiers, carve], [carve,  ], [ , input], [input, space], [space, simple], [simple, regions], [regions, ,], [,, half], [half, -], [-, spaces], [spaces, sepa-], [sepa-, rated], [rated, hyperplane19], [hyperplane19, .]]

>> Trigrams: 
[[1960s, known, linear], [known, linear, classifiers], [linear, classifiers, carve], [classifiers, carve,  ], [carve,  , input], [ , input, space], [input, space, simple], [space, simple, regions], [simple, regions, ,], [regions, ,, half], [,, half, -], [half, -, spaces], [-, spaces, sepa-], [spaces, sepa-, rated], [sepa-, rated, hyperplane19], [rated, hyperplane19, .]]

>> Noun Phrases are: 
[the 1960s, we, linear classifiers, their input space, very simple regions, namely half-spaces, sepa-, a hyperplane19]

>> Named Entities are: 
[('the 1960s', 'DATE'), ('half', 'CARDINAL')]


============================ Sentence 62 =============================

But problems such as image and speech recog- nition require the input–output function to be insensitive to irrelevant  variations of the input, such as variations in position, orientation or  illumination of an object, or variations in the pitch or accent of speech,  while being very sensitive to particular minute variations (for example,  the difference between a white wolf and a breed of wolf-like white  dog called a Samoyed). 


>> Tokens are: 
[problems, image, speech, recog-, nition, require, input, –, output, function, insensitive, irrelevant,  , variations, input, ,, variations, position, ,, orientation,  , illumination, object, ,, variations, pitch, accent, speech, ,,  , sensitive, particular, minute, variations, (, example, ,,  , difference, white, wolf, breed, wolf, -, like, white,  , dog, called, Samoyed, ), .] 

>> PoS Tags are: 
[('problems', 'NOUN'), ('image', 'NOUN'), ('speech', 'NOUN'), ('recog-', 'NOUN'), ('nition', 'NOUN'), ('require', 'VERB'), ('input', 'NOUN'), ('–', 'PUNCT'), ('output', 'NOUN'), ('function', 'NOUN'), ('insensitive', 'ADJ'), ('irrelevant', 'ADJ'), (' ', 'SPACE'), ('variations', 'NOUN'), ('input', 'NOUN'), (',', 'PUNCT'), ('variations', 'NOUN'), ('position', 'NOUN'), (',', 'PUNCT'), ('orientation', 'NOUN'), (' ', 'SPACE'), ('illumination', 'NOUN'), ('object', 'NOUN'), (',', 'PUNCT'), ('variations', 'NOUN'), ('pitch', 'NOUN'), ('accent', 'NOUN'), ('speech', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('sensitive', 'ADJ'), ('particular', 'ADJ'), ('minute', 'NOUN'), ('variations', 'NOUN'), ('(', 'PUNCT'), ('example', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('difference', 'NOUN'), ('white', 'ADJ'), ('wolf', 'NOUN'), ('breed', 'NOUN'), ('wolf', 'NOUN'), ('-', 'PUNCT'), ('like', 'ADJ'), ('white', 'ADJ'), (' ', 'SPACE'), ('dog', 'NOUN'), ('called', 'VERB'), ('Samoyed', 'PROPN'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('problems', 'nsubj'), ('image', 'pobj'), ('speech', 'compound'), ('recog-', 'conj'), ('nition', 'conj'), ('require', 'ROOT'), ('input', 'dobj'), ('–', 'punct'), ('output', 'compound'), ('function', 'appos'), ('insensitive', 'acomp'), ('irrelevant', 'amod'), (' ', 'compound'), ('variations', 'pobj'), ('input', 'pobj'), (',', 'punct'), ('variations', 'pobj'), ('position', 'pobj'), (',', 'punct'), ('orientation', 'conj'), (' ', 'conj'), ('illumination', 'conj'), ('object', 'pobj'), (',', 'punct'), ('variations', 'conj'), ('pitch', 'pobj'), ('accent', 'conj'), ('speech', 'pobj'), (',', 'punct'), (' ', 'dobj'), ('sensitive', 'acomp'), ('particular', 'amod'), ('minute', 'compound'), ('variations', 'pobj'), ('(', 'punct'), ('example', 'pobj'), (',', 'punct'), (' ', 'nmod'), ('difference', 'nsubj'), ('white', 'amod'), ('wolf', 'pobj'), ('breed', 'conj'), ('wolf', 'npadvmod'), ('-', 'punct'), ('like', 'amod'), ('white', 'amod'), (' ', 'compound'), ('dog', 'pobj'), ('called', 'parataxis'), ('Samoyed', 'oprd'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[problems, image], [image, speech], [speech, recog-], [recog-, nition], [nition, require], [require, input], [input, –], [–, output], [output, function], [function, insensitive], [insensitive, irrelevant], [irrelevant,  ], [ , variations], [variations, input], [input, ,], [,, variations], [variations, position], [position, ,], [,, orientation], [orientation,  ], [ , illumination], [illumination, object], [object, ,], [,, variations], [variations, pitch], [pitch, accent], [accent, speech], [speech, ,], [,,  ], [ , sensitive], [sensitive, particular], [particular, minute], [minute, variations], [variations, (], [(, example], [example, ,], [,,  ], [ , difference], [difference, white], [white, wolf], [wolf, breed], [breed, wolf], [wolf, -], [-, like], [like, white], [white,  ], [ , dog], [dog, called], [called, Samoyed], [Samoyed, )], [), .]]

>> Trigrams: 
[[problems, image, speech], [image, speech, recog-], [speech, recog-, nition], [recog-, nition, require], [nition, require, input], [require, input, –], [input, –, output], [–, output, function], [output, function, insensitive], [function, insensitive, irrelevant], [insensitive, irrelevant,  ], [irrelevant,  , variations], [ , variations, input], [variations, input, ,], [input, ,, variations], [,, variations, position], [variations, position, ,], [position, ,, orientation], [,, orientation,  ], [orientation,  , illumination], [ , illumination, object], [illumination, object, ,], [object, ,, variations], [,, variations, pitch], [variations, pitch, accent], [pitch, accent, speech], [accent, speech, ,], [speech, ,,  ], [,,  , sensitive], [ , sensitive, particular], [sensitive, particular, minute], [particular, minute, variations], [minute, variations, (], [variations, (, example], [(, example, ,], [example, ,,  ], [,,  , difference], [ , difference, white], [difference, white, wolf], [white, wolf, breed], [wolf, breed, wolf], [breed, wolf, -], [wolf, -, like], [-, like, white], [like, white,  ], [white,  , dog], [ , dog, called], [dog, called, Samoyed], [called, Samoyed, )], [Samoyed, ), .]]

>> Noun Phrases are: 
[problems, image, speech recog-, nition, the input, output function, irrelevant  variations, the input, variations, position, orientation, illumination, an object, variations, the pitch, accent, speech, particular minute variations, example,  the difference, a white wolf, a breed, wolf-like white  dog, a Samoyed]

>> Named Entities are: 
[]


============================ Sentence 63 =============================

At the pixel level, images of two Samoyeds in  different poses and in different environments may be very different  from each other, whereas two images of a Samoyed and a wolf in the  same position and on similar backgrounds may be very similar to each  other. 


>> Tokens are: 
[pixel, level, ,, images, Samoyeds,  , different, poses, different, environments, different,  , ,, images, Samoyed, wolf,  , position, similar, backgrounds, similar,  , .] 

>> PoS Tags are: 
[('pixel', 'ADJ'), ('level', 'NOUN'), (',', 'PUNCT'), ('images', 'NOUN'), ('Samoyeds', 'PROPN'), (' ', 'SPACE'), ('different', 'ADJ'), ('poses', 'NOUN'), ('different', 'ADJ'), ('environments', 'NOUN'), ('different', 'ADJ'), (' ', 'SPACE'), (',', 'PUNCT'), ('images', 'NOUN'), ('Samoyed', 'PROPN'), ('wolf', 'NOUN'), (' ', 'SPACE'), ('position', 'NOUN'), ('similar', 'ADJ'), ('backgrounds', 'NOUN'), ('similar', 'ADJ'), (' ', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('pixel', 'amod'), ('level', 'pobj'), (',', 'punct'), ('images', 'nsubj'), ('Samoyeds', 'pobj'), (' ', 'pobj'), ('different', 'amod'), ('poses', 'appos'), ('different', 'amod'), ('environments', 'pobj'), ('different', 'amod'), (' ', 'attr'), (',', 'punct'), ('images', 'nsubj'), ('Samoyed', 'pobj'), ('wolf', 'conj'), (' ', 'nmod'), ('position', 'pobj'), ('similar', 'amod'), ('backgrounds', 'pobj'), ('similar', 'acomp'), (' ', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[pixel, level], [level, ,], [,, images], [images, Samoyeds], [Samoyeds,  ], [ , different], [different, poses], [poses, different], [different, environments], [environments, different], [different,  ], [ , ,], [,, images], [images, Samoyed], [Samoyed, wolf], [wolf,  ], [ , position], [position, similar], [similar, backgrounds], [backgrounds, similar], [similar,  ], [ , .]]

>> Trigrams: 
[[pixel, level, ,], [level, ,, images], [,, images, Samoyeds], [images, Samoyeds,  ], [Samoyeds,  , different], [ , different, poses], [different, poses, different], [poses, different, environments], [different, environments, different], [environments, different,  ], [different,  , ,], [ , ,, images], [,, images, Samoyed], [images, Samoyed, wolf], [Samoyed, wolf,  ], [wolf,  , position], [ , position, similar], [position, similar, backgrounds], [similar, backgrounds, similar], [backgrounds, similar,  ], [similar,  , .]]

>> Noun Phrases are: 
[the pixel level, images, two Samoyeds, different poses, different environments, two images, a Samoyed, a wolf, the  same position, similar backgrounds]

>> Named Entities are: 
[('two', 'CARDINAL'), ('two', 'CARDINAL'), ('Samoyed', 'GPE')]


============================ Sentence 64 =============================

A linear classifier, or any other ‘shallow’ classifier operating on   Figure 1 | Multilayer neural networks and backpropagation. 


>> Tokens are: 
[linear, classifier, ,, ‘, shallow, ’, classifier, operating,   , Figure, 1, |, Multilayer, neural, networks, backpropagation, .] 

>> PoS Tags are: 
[('linear', 'ADJ'), ('classifier', 'NOUN'), (',', 'PUNCT'), ('‘', 'PUNCT'), ('shallow', 'ADJ'), ('’', 'PUNCT'), ('classifier', 'NOUN'), ('operating', 'VERB'), ('  ', 'SPACE'), ('Figure', 'NOUN'), ('1', 'NUM'), ('|', 'NOUN'), ('Multilayer', 'PROPN'), ('neural', 'ADJ'), ('networks', 'NOUN'), ('backpropagation', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('linear', 'amod'), ('classifier', 'ROOT'), (',', 'punct'), ('‘', 'punct'), ('shallow', 'amod'), ('’', 'punct'), ('classifier', 'conj'), ('operating', 'acl'), ('  ', 'nmod'), ('Figure', 'nmod'), ('1', 'nummod'), ('|', 'pobj'), ('Multilayer', 'nmod'), ('neural', 'amod'), ('networks', 'conj'), ('backpropagation', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[linear, classifier], [classifier, ,], [,, ‘], [‘, shallow], [shallow, ’], [’, classifier], [classifier, operating], [operating,   ], [  , Figure], [Figure, 1], [1, |], [|, Multilayer], [Multilayer, neural], [neural, networks], [networks, backpropagation], [backpropagation, .]]

>> Trigrams: 
[[linear, classifier, ,], [classifier, ,, ‘], [,, ‘, shallow], [‘, shallow, ’], [shallow, ’, classifier], [’, classifier, operating], [classifier, operating,   ], [operating,   , Figure], [  , Figure, 1], [Figure, 1, |], [1, |, Multilayer], [|, Multilayer, neural], [Multilayer, neural, networks], [neural, networks, backpropagation], [networks, backpropagation, .]]

>> Noun Phrases are: 
[A linear classifier, any other ‘shallow’ classifier,   Figure 1 |, Multilayer neural networks, backpropagation]

>> Named Entities are: 
[('1', 'CARDINAL'), ('Multilayer', 'ORG')]


============================ Sentence 65 =============================

a, A multi- layer neural network (shown by the connected dots) can distort the input  space to make the classes of data (examples of which are on the red and  blue lines) linearly separable. 


>> Tokens are: 
[,, multi-, layer, neural, network, (, shown, connected, dots, ), distort, input,  , space, classes, data, (, examples, red,  , blue, lines, ), linearly, separable, .] 

>> PoS Tags are: 
[(',', 'PUNCT'), ('multi-', 'ADJ'), ('layer', 'NOUN'), ('neural', 'ADJ'), ('network', 'NOUN'), ('(', 'PUNCT'), ('shown', 'VERB'), ('connected', 'ADJ'), ('dots', 'NOUN'), (')', 'PUNCT'), ('distort', 'VERB'), ('input', 'NOUN'), (' ', 'SPACE'), ('space', 'NOUN'), ('classes', 'NOUN'), ('data', 'NOUN'), ('(', 'PUNCT'), ('examples', 'NOUN'), ('red', 'ADJ'), (' ', 'SPACE'), ('blue', 'ADJ'), ('lines', 'NOUN'), (')', 'PUNCT'), ('linearly', 'ADV'), ('separable', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(',', 'punct'), ('multi-', 'amod'), ('layer', 'nmod'), ('neural', 'amod'), ('network', 'nsubj'), ('(', 'punct'), ('shown', 'acl'), ('connected', 'amod'), ('dots', 'pobj'), (')', 'punct'), ('distort', 'ROOT'), ('input', 'compound'), (' ', 'compound'), ('space', 'dobj'), ('classes', 'dobj'), ('data', 'pobj'), ('(', 'punct'), ('examples', 'nsubj'), ('red', 'amod'), (' ', 'conj'), ('blue', 'amod'), ('lines', 'pobj'), (')', 'punct'), ('linearly', 'advmod'), ('separable', 'acomp'), ('.', 'punct')]

>> Bigrams: 
[[,, multi-], [multi-, layer], [layer, neural], [neural, network], [network, (], [(, shown], [shown, connected], [connected, dots], [dots, )], [), distort], [distort, input], [input,  ], [ , space], [space, classes], [classes, data], [data, (], [(, examples], [examples, red], [red,  ], [ , blue], [blue, lines], [lines, )], [), linearly], [linearly, separable], [separable, .]]

>> Trigrams: 
[[,, multi-, layer], [multi-, layer, neural], [layer, neural, network], [neural, network, (], [network, (, shown], [(, shown, connected], [shown, connected, dots], [connected, dots, )], [dots, ), distort], [), distort, input], [distort, input,  ], [input,  , space], [ , space, classes], [space, classes, data], [classes, data, (], [data, (, examples], [(, examples, red], [examples, red,  ], [red,  , blue], [ , blue, lines], [blue, lines, )], [lines, ), linearly], [), linearly, separable], [linearly, separable, .]]

>> Noun Phrases are: 
[a, A multi- layer neural network, the connected dots, the input  space, the classes, data, examples, the red and  blue lines]

>> Named Entities are: 
[]


============================ Sentence 66 =============================

Note how a regular grid (shown on the left)  in input space is also transformed (shown in the middle panel) by hidden  units. 


>> Tokens are: 
[Note, regular, grid, (, shown, left, ),  , input, space, transformed, (, shown, middle, panel, ), hidden,  , units, .] 

>> PoS Tags are: 
[('Note', 'VERB'), ('regular', 'ADJ'), ('grid', 'NOUN'), ('(', 'PUNCT'), ('shown', 'VERB'), ('left', 'NOUN'), (')', 'PUNCT'), (' ', 'SPACE'), ('input', 'NOUN'), ('space', 'NOUN'), ('transformed', 'VERB'), ('(', 'PUNCT'), ('shown', 'VERB'), ('middle', 'ADJ'), ('panel', 'NOUN'), (')', 'PUNCT'), ('hidden', 'VERB'), (' ', 'SPACE'), ('units', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Note', 'ROOT'), ('regular', 'amod'), ('grid', 'nsubjpass'), ('(', 'punct'), ('shown', 'acl'), ('left', 'pobj'), (')', 'punct'), (' ', 'appos'), ('input', 'compound'), ('space', 'pobj'), ('transformed', 'ccomp'), ('(', 'punct'), ('shown', 'dep'), ('middle', 'amod'), ('panel', 'pobj'), (')', 'punct'), ('hidden', 'amod'), (' ', 'compound'), ('units', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Note, regular], [regular, grid], [grid, (], [(, shown], [shown, left], [left, )], [),  ], [ , input], [input, space], [space, transformed], [transformed, (], [(, shown], [shown, middle], [middle, panel], [panel, )], [), hidden], [hidden,  ], [ , units], [units, .]]

>> Trigrams: 
[[Note, regular, grid], [regular, grid, (], [grid, (, shown], [(, shown, left], [shown, left, )], [left, ),  ], [),  , input], [ , input, space], [input, space, transformed], [space, transformed, (], [transformed, (, shown], [(, shown, middle], [shown, middle, panel], [middle, panel, )], [panel, ), hidden], [), hidden,  ], [hidden,  , units], [ , units, .]]

>> Noun Phrases are: 
[a regular grid, the left, input space, the middle panel, hidden  units]

>> Named Entities are: 
[]


============================ Sentence 67 =============================

This is an illustrative example with only two input units, two hidden  units and one output unit, but the networks used for object recognition  or natural language processing contain tens or hundreds of thousands of  units. 


>> Tokens are: 
[illustrative, example, input, units, ,, hidden,  , units, output, unit, ,, networks, object, recognition,  , natural, language, processing, contain, tens, hundreds, thousands,  , units, .] 

>> PoS Tags are: 
[('illustrative', 'ADJ'), ('example', 'NOUN'), ('input', 'NOUN'), ('units', 'NOUN'), (',', 'PUNCT'), ('hidden', 'VERB'), (' ', 'SPACE'), ('units', 'NOUN'), ('output', 'NOUN'), ('unit', 'NOUN'), (',', 'PUNCT'), ('networks', 'NOUN'), ('object', 'NOUN'), ('recognition', 'NOUN'), (' ', 'SPACE'), ('natural', 'ADJ'), ('language', 'NOUN'), ('processing', 'NOUN'), ('contain', 'VERB'), ('tens', 'NOUN'), ('hundreds', 'NOUN'), ('thousands', 'NOUN'), (' ', 'SPACE'), ('units', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('illustrative', 'amod'), ('example', 'attr'), ('input', 'compound'), ('units', 'pobj'), (',', 'punct'), ('hidden', 'amod'), (' ', 'amod'), ('units', 'conj'), ('output', 'compound'), ('unit', 'conj'), (',', 'punct'), ('networks', 'nsubj'), ('object', 'compound'), ('recognition', 'pobj'), (' ', 'appos'), ('natural', 'amod'), ('language', 'compound'), ('processing', 'conj'), ('contain', 'conj'), ('tens', 'dobj'), ('hundreds', 'quantmod'), ('thousands', 'conj'), (' ', 'compound'), ('units', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[illustrative, example], [example, input], [input, units], [units, ,], [,, hidden], [hidden,  ], [ , units], [units, output], [output, unit], [unit, ,], [,, networks], [networks, object], [object, recognition], [recognition,  ], [ , natural], [natural, language], [language, processing], [processing, contain], [contain, tens], [tens, hundreds], [hundreds, thousands], [thousands,  ], [ , units], [units, .]]

>> Trigrams: 
[[illustrative, example, input], [example, input, units], [input, units, ,], [units, ,, hidden], [,, hidden,  ], [hidden,  , units], [ , units, output], [units, output, unit], [output, unit, ,], [unit, ,, networks], [,, networks, object], [networks, object, recognition], [object, recognition,  ], [recognition,  , natural], [ , natural, language], [natural, language, processing], [language, processing, contain], [processing, contain, tens], [contain, tens, hundreds], [tens, hundreds, thousands], [hundreds, thousands,  ], [thousands,  , units], [ , units, .]]

>> Noun Phrases are: 
[an illustrative example, only two input units, two hidden  units, one output unit, the networks, object recognition, natural language processing, tens, hundreds of thousands,  units]

>> Named Entities are: 
[('only two', 'CARDINAL'), ('two', 'CARDINAL'), ('tens or hundreds of thousands', 'CARDINAL')]


============================ Sentence 68 =============================

Reproduced with permission from C. Olah (http://colah.github.io/). 


>> Tokens are: 
[Reproduced, permission, C., Olah, (, http://colah.github.io/, ), .] 

>> PoS Tags are: 
[('Reproduced', 'VERB'), ('permission', 'NOUN'), ('C.', 'PROPN'), ('Olah', 'PROPN'), ('(', 'PUNCT'), ('http://colah.github.io/', 'PROPN'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Reproduced', 'ROOT'), ('permission', 'pobj'), ('C.', 'compound'), ('Olah', 'pobj'), ('(', 'punct'), ('http://colah.github.io/', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Reproduced, permission], [permission, C.], [C., Olah], [Olah, (], [(, http://colah.github.io/], [http://colah.github.io/, )], [), .]]

>> Trigrams: 
[[Reproduced, permission, C.], [permission, C., Olah], [C., Olah, (], [Olah, (, http://colah.github.io/], [(, http://colah.github.io/, )], [http://colah.github.io/, ), .]]

>> Noun Phrases are: 
[permission, C. Olah, http://colah.github.io/]

>> Named Entities are: 
[('C. Olah', 'PERSON')]


============================ Sentence 69 =============================

 b, The chain rule of derivatives tells us how two small effects (that of a small  change of x on y, and that of y on z) are composed. 


>> Tokens are: 
[ , b, ,, chain, rule, derivatives, tells, small, effects, (, small,  , change, x, y, ,, y, z, ), composed, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('b', 'NOUN'), (',', 'PUNCT'), ('chain', 'NOUN'), ('rule', 'NOUN'), ('derivatives', 'NOUN'), ('tells', 'VERB'), ('small', 'ADJ'), ('effects', 'NOUN'), ('(', 'PUNCT'), ('small', 'ADJ'), (' ', 'SPACE'), ('change', 'NOUN'), ('x', 'SYM'), ('y', 'PROPN'), (',', 'PUNCT'), ('y', 'DET'), ('z', 'NOUN'), (')', 'PUNCT'), ('composed', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'compound'), ('b', 'advcl'), (',', 'punct'), ('chain', 'compound'), ('rule', 'nsubj'), ('derivatives', 'pobj'), ('tells', 'ROOT'), ('small', 'amod'), ('effects', 'nsubjpass'), ('(', 'punct'), ('small', 'amod'), (' ', 'compound'), ('change', 'pobj'), ('x', 'punct'), ('y', 'pobj'), (',', 'punct'), ('y', 'pobj'), ('z', 'pobj'), (')', 'punct'), ('composed', 'ccomp'), ('.', 'punct')]

>> Bigrams: 
[[ , b], [b, ,], [,, chain], [chain, rule], [rule, derivatives], [derivatives, tells], [tells, small], [small, effects], [effects, (], [(, small], [small,  ], [ , change], [change, x], [x, y], [y, ,], [,, y], [y, z], [z, )], [), composed], [composed, .]]

>> Trigrams: 
[[ , b, ,], [b, ,, chain], [,, chain, rule], [chain, rule, derivatives], [rule, derivatives, tells], [derivatives, tells, small], [tells, small, effects], [small, effects, (], [effects, (, small], [(, small,  ], [small,  , change], [ , change, x], [change, x, y], [x, y, ,], [y, ,, y], [,, y, z], [y, z, )], [z, ), composed], [), composed, .]]

>> Noun Phrases are: 
[The chain rule, derivatives, us, two small effects, a small  change, y, z]

>> Named Entities are: 
[('two', 'CARDINAL')]


============================ Sentence 70 =============================

A small change Δx in  x gets transformed first into a small change Δy in y by getting multiplied  by ∂y/∂x (that is, the definition of partial derivative). 


>> Tokens are: 
[small, change, Δx,  , x, gets, transformed, small, change, Δy, y, getting, multiplied,  , ∂y/∂x, (, ,, definition, partial, derivative, ), .] 

>> PoS Tags are: 
[('small', 'ADJ'), ('change', 'NOUN'), ('Δx', 'PROPN'), (' ', 'SPACE'), ('x', 'SYM'), ('gets', 'AUX'), ('transformed', 'VERB'), ('small', 'ADJ'), ('change', 'NOUN'), ('Δy', 'PROPN'), ('y', 'PROPN'), ('getting', 'AUX'), ('multiplied', 'VERB'), (' ', 'SPACE'), ('∂y/∂x', 'PROPN'), ('(', 'PUNCT'), (',', 'PUNCT'), ('definition', 'NOUN'), ('partial', 'ADJ'), ('derivative', 'NOUN'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('small', 'amod'), ('change', 'compound'), ('Δx', 'nsubjpass'), (' ', 'pobj'), ('x', 'punct'), ('gets', 'auxpass'), ('transformed', 'ROOT'), ('small', 'amod'), ('change', 'pobj'), ('Δy', 'appos'), ('y', 'pobj'), ('getting', 'auxpass'), ('multiplied', 'pcomp'), (' ', 'dobj'), ('∂y/∂x', 'pobj'), ('(', 'punct'), (',', 'punct'), ('definition', 'parataxis'), ('partial', 'amod'), ('derivative', 'pobj'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[small, change], [change, Δx], [Δx,  ], [ , x], [x, gets], [gets, transformed], [transformed, small], [small, change], [change, Δy], [Δy, y], [y, getting], [getting, multiplied], [multiplied,  ], [ , ∂y/∂x], [∂y/∂x, (], [(, ,], [,, definition], [definition, partial], [partial, derivative], [derivative, )], [), .]]

>> Trigrams: 
[[small, change, Δx], [change, Δx,  ], [Δx,  , x], [ , x, gets], [x, gets, transformed], [gets, transformed, small], [transformed, small, change], [small, change, Δy], [change, Δy, y], [Δy, y, getting], [y, getting, multiplied], [getting, multiplied,  ], [multiplied,  , ∂y/∂x], [ , ∂y/∂x, (], [∂y/∂x, (, ,], [(, ,, definition], [,, definition, partial], [definition, partial, derivative], [partial, derivative, )], [derivative, ), .]]

>> Noun Phrases are: 
[A small change Δx, a small change, Δy, y, ∂y/∂x, partial derivative]

>> Named Entities are: 
[('Δx', 'PERSON'), ('first', 'ORDINAL'), ('Δy', 'PERSON')]


============================ Sentence 71 =============================

Similarly, the change  Δy creates a change Δz in z. Substituting one equation into the other  gives the chain rule of derivatives — how Δx gets turned into Δz through  multiplication by the product of ∂y/∂x and ∂z/∂x. 


>> Tokens are: 
[Similarly, ,, change,  , Δy, creates, change, Δz, z., Substituting, equation,  , gives, chain, rule, derivatives, —, Δx, gets, turned, Δz,  , multiplication, product, ∂y/∂x, ∂z/∂x, .] 

>> PoS Tags are: 
[('Similarly', 'ADV'), (',', 'PUNCT'), ('change', 'NOUN'), (' ', 'SPACE'), ('Δy', 'PROPN'), ('creates', 'VERB'), ('change', 'NOUN'), ('Δz', 'VERB'), ('z.', 'PROPN'), ('Substituting', 'VERB'), ('equation', 'NOUN'), (' ', 'SPACE'), ('gives', 'VERB'), ('chain', 'NOUN'), ('rule', 'NOUN'), ('derivatives', 'NOUN'), ('—', 'PUNCT'), ('Δx', 'PROPN'), ('gets', 'AUX'), ('turned', 'VERB'), ('Δz', 'ADJ'), (' ', 'SPACE'), ('multiplication', 'NOUN'), ('product', 'NOUN'), ('∂y/∂x', 'PROPN'), ('∂z/∂x', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Similarly', 'advmod'), (',', 'punct'), ('change', 'nsubj'), (' ', 'compound'), ('Δy', 'appos'), ('creates', 'ROOT'), ('change', 'dobj'), ('Δz', 'acl'), ('z.', 'pobj'), ('Substituting', 'advcl'), ('equation', 'dobj'), (' ', 'pobj'), ('gives', 'conj'), ('chain', 'compound'), ('rule', 'dobj'), ('derivatives', 'pobj'), ('—', 'punct'), ('Δx', 'nsubjpass'), ('gets', 'auxpass'), ('turned', 'conj'), ('Δz', 'pobj'), (' ', 'pobj'), ('multiplication', 'pobj'), ('product', 'pobj'), ('∂y/∂x', 'pobj'), ('∂z/∂x', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[Similarly, ,], [,, change], [change,  ], [ , Δy], [Δy, creates], [creates, change], [change, Δz], [Δz, z.], [z., Substituting], [Substituting, equation], [equation,  ], [ , gives], [gives, chain], [chain, rule], [rule, derivatives], [derivatives, —], [—, Δx], [Δx, gets], [gets, turned], [turned, Δz], [Δz,  ], [ , multiplication], [multiplication, product], [product, ∂y/∂x], [∂y/∂x, ∂z/∂x], [∂z/∂x, .]]

>> Trigrams: 
[[Similarly, ,, change], [,, change,  ], [change,  , Δy], [ , Δy, creates], [Δy, creates, change], [creates, change, Δz], [change, Δz, z.], [Δz, z., Substituting], [z., Substituting, equation], [Substituting, equation,  ], [equation,  , gives], [ , gives, chain], [gives, chain, rule], [chain, rule, derivatives], [rule, derivatives, —], [derivatives, —, Δx], [—, Δx, gets], [Δx, gets, turned], [gets, turned, Δz], [turned, Δz,  ], [Δz,  , multiplication], [ , multiplication, product], [multiplication, product, ∂y/∂x], [product, ∂y/∂x, ∂z/∂x], [∂y/∂x, ∂z/∂x, .]]

>> Noun Phrases are: 
[the change,  Δy, a change, z., one equation, the chain rule, derivatives, Δx, multiplication, the product, ∂y/∂x, ∂z/∂x]

>> Named Entities are: 
[('one', 'CARDINAL'), ('Δx', 'PERSON'), ('∂y/∂x', 'NORP')]


============================ Sentence 72 =============================

It also works when x,  y and z are vectors (and the derivatives are Jacobian matrices). 


>> Tokens are: 
[works, x, ,,  , y, z, vectors, (, derivatives, Jacobian, matrices, ), .] 

>> PoS Tags are: 
[('works', 'VERB'), ('x', 'X'), (',', 'PUNCT'), (' ', 'SPACE'), ('y', 'PROPN'), ('z', 'NOUN'), ('vectors', 'NOUN'), ('(', 'PUNCT'), ('derivatives', 'NOUN'), ('Jacobian', 'ADJ'), ('matrices', 'NOUN'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('works', 'ROOT'), ('x', 'punct'), (',', 'punct'), (' ', 'compound'), ('y', 'nsubj'), ('z', 'conj'), ('vectors', 'attr'), ('(', 'punct'), ('derivatives', 'nsubj'), ('Jacobian', 'amod'), ('matrices', 'attr'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[works, x], [x, ,], [,,  ], [ , y], [y, z], [z, vectors], [vectors, (], [(, derivatives], [derivatives, Jacobian], [Jacobian, matrices], [matrices, )], [), .]]

>> Trigrams: 
[[works, x, ,], [x, ,,  ], [,,  , y], [ , y, z], [y, z, vectors], [z, vectors, (], [vectors, (, derivatives], [(, derivatives, Jacobian], [derivatives, Jacobian, matrices], [Jacobian, matrices, )], [matrices, ), .]]

>> Noun Phrases are: 
[It,  y, z, vectors, the derivatives, Jacobian matrices]

>> Named Entities are: 
[('Jacobian', 'NORP')]


============================ Sentence 73 =============================

c, The  equations used for computing the forward pass in a neural net with two  hidden layers and one output layer, each constituting a module through   which one can backpropagate gradients. 


>> Tokens are: 
[c, ,,  , equations, computing, forward, pass, neural, net,  , hidden, layers, output, layer, ,, constituting, module,   , backpropagate, gradients, .] 

>> PoS Tags are: 
[('c', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('equations', 'NOUN'), ('computing', 'VERB'), ('forward', 'ADJ'), ('pass', 'NOUN'), ('neural', 'ADJ'), ('net', 'NOUN'), (' ', 'SPACE'), ('hidden', 'VERB'), ('layers', 'NOUN'), ('output', 'NOUN'), ('layer', 'NOUN'), (',', 'PUNCT'), ('constituting', 'VERB'), ('module', 'NOUN'), ('  ', 'SPACE'), ('backpropagate', 'VERB'), ('gradients', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('c', 'meta'), (',', 'punct'), (' ', 'compound'), ('equations', 'nsubj'), ('computing', 'pcomp'), ('forward', 'amod'), ('pass', 'dobj'), ('neural', 'amod'), ('net', 'pobj'), (' ', 'nmod'), ('hidden', 'amod'), ('layers', 'pobj'), ('output', 'compound'), ('layer', 'conj'), (',', 'punct'), ('constituting', 'ROOT'), ('module', 'dobj'), ('  ', 'pobj'), ('backpropagate', 'relcl'), ('gradients', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[c, ,], [,,  ], [ , equations], [equations, computing], [computing, forward], [forward, pass], [pass, neural], [neural, net], [net,  ], [ , hidden], [hidden, layers], [layers, output], [output, layer], [layer, ,], [,, constituting], [constituting, module], [module,   ], [  , backpropagate], [backpropagate, gradients], [gradients, .]]

>> Trigrams: 
[[c, ,,  ], [,,  , equations], [ , equations, computing], [equations, computing, forward], [computing, forward, pass], [forward, pass, neural], [pass, neural, net], [neural, net,  ], [net,  , hidden], [ , hidden, layers], [hidden, layers, output], [layers, output, layer], [output, layer, ,], [layer, ,, constituting], [,, constituting, module], [constituting, module,   ], [module,   , backpropagate], [  , backpropagate, gradients], [backpropagate, gradients, .]]

>> Noun Phrases are: 
[The  equations, the forward pass, a neural net, two  hidden layers, one output layer, a module, one, gradients]

>> Named Entities are: 
[('two', 'CARDINAL')]


============================ Sentence 74 =============================

At each layer, we first compute   


>> Tokens are: 
[layer, ,, compute,  ] 

>> PoS Tags are: 
[('layer', 'NOUN'), (',', 'PUNCT'), ('compute', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('layer', 'pobj'), (',', 'punct'), ('compute', 'ROOT'), (' ', 'dobj')]

>> Bigrams: 
[[layer, ,], [,, compute], [compute,  ]]

>> Trigrams: 
[[layer, ,, compute], [,, compute,  ]]

>> Noun Phrases are: 
[each layer, we]

>> Named Entities are: 
[('first', 'ORDINAL')]


============================ Sentence 75 =============================

the total input z to each unit, which is a weighted sum of the outputs of  the units in the layer below. 


>> Tokens are: 
[total, input, z, unit, ,, weighted, sum, outputs,  , units, layer, .] 

>> PoS Tags are: 
[('total', 'ADJ'), ('input', 'NOUN'), ('z', 'ADP'), ('unit', 'NOUN'), (',', 'PUNCT'), ('weighted', 'ADJ'), ('sum', 'NOUN'), ('outputs', 'NOUN'), (' ', 'SPACE'), ('units', 'NOUN'), ('layer', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('total', 'amod'), ('input', 'ROOT'), ('z', 'prep'), ('unit', 'pobj'), (',', 'punct'), ('weighted', 'amod'), ('sum', 'attr'), ('outputs', 'pobj'), (' ', 'pobj'), ('units', 'appos'), ('layer', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[total, input], [input, z], [z, unit], [unit, ,], [,, weighted], [weighted, sum], [sum, outputs], [outputs,  ], [ , units], [units, layer], [layer, .]]

>> Trigrams: 
[[total, input, z], [input, z, unit], [z, unit, ,], [unit, ,, weighted], [,, weighted, sum], [weighted, sum, outputs], [sum, outputs,  ], [outputs,  , units], [ , units, layer], [units, layer, .]]

>> Noun Phrases are: 
[the total input, each unit, a weighted sum, the outputs, the units, the layer]

>> Named Entities are: 
[]


============================ Sentence 76 =============================

Then a non-linear function f(.) is applied to  z to get the output of the unit. 


>> Tokens are: 
[non, -, linear, function, f, (, ., ), applied,  , z, output, unit, .] 

>> PoS Tags are: 
[('non', 'ADJ'), ('-', 'ADJ'), ('linear', 'ADJ'), ('function', 'NOUN'), ('f', 'X'), ('(', 'PUNCT'), ('.', 'PUNCT'), (')', 'PUNCT'), ('applied', 'VERB'), (' ', 'SPACE'), ('z', 'PROPN'), ('output', 'NOUN'), ('unit', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('non', 'amod'), ('-', 'amod'), ('linear', 'amod'), ('function', 'nsubjpass'), ('f', 'punct'), ('(', 'punct'), ('.', 'punct'), (')', 'punct'), ('applied', 'ROOT'), (' ', 'pobj'), ('z', 'mark'), ('output', 'dobj'), ('unit', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[non, -], [-, linear], [linear, function], [function, f], [f, (], [(, .], [., )], [), applied], [applied,  ], [ , z], [z, output], [output, unit], [unit, .]]

>> Trigrams: 
[[non, -, linear], [-, linear, function], [linear, function, f], [function, f, (], [f, (, .], [(, ., )], [., ), applied], [), applied,  ], [applied,  , z], [ , z, output], [z, output, unit], [output, unit, .]]

>> Noun Phrases are: 
[Then a non-linear function, the output, the unit]

>> Named Entities are: 
[]


============================ Sentence 77 =============================

For simplicity, we have omitted bias terms. 


>> Tokens are: 
[simplicity, ,, omitted, bias, terms, .] 

>> PoS Tags are: 
[('simplicity', 'NOUN'), (',', 'PUNCT'), ('omitted', 'VERB'), ('bias', 'NOUN'), ('terms', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('simplicity', 'pobj'), (',', 'punct'), ('omitted', 'ROOT'), ('bias', 'compound'), ('terms', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[simplicity, ,], [,, omitted], [omitted, bias], [bias, terms], [terms, .]]

>> Trigrams: 
[[simplicity, ,, omitted], [,, omitted, bias], [omitted, bias, terms], [bias, terms, .]]

>> Noun Phrases are: 
[simplicity, we, bias terms]

>> Named Entities are: 
[]


============================ Sentence 78 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 79 =============================

The non-linear functions used in neural networks include the rectified  linear unit (ReLU) f(z) = max(0,z), commonly used in recent years, as  well as the more conventional sigmoids, such as the hyberbolic tangent,  f(z) = 


>> Tokens are: 
[non, -, linear, functions, neural, networks, include, rectified,  , linear, unit, (, ReLU, ), f(z, ), =, max(0,z, ), ,, commonly, recent, years, ,,  , conventional, sigmoids, ,, hyberbolic, tangent, ,,  , f(z, ), =] 

>> PoS Tags are: 
[('non', 'ADJ'), ('-', 'ADJ'), ('linear', 'ADJ'), ('functions', 'NOUN'), ('neural', 'ADJ'), ('networks', 'NOUN'), ('include', 'VERB'), ('rectified', 'ADJ'), (' ', 'SPACE'), ('linear', 'ADJ'), ('unit', 'NOUN'), ('(', 'PUNCT'), ('ReLU', 'PROPN'), (')', 'PUNCT'), ('f(z', 'PROPN'), (')', 'PUNCT'), ('=', 'SYM'), ('max(0,z', 'PROPN'), (')', 'PUNCT'), (',', 'PUNCT'), ('commonly', 'ADV'), ('recent', 'ADJ'), ('years', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('conventional', 'ADJ'), ('sigmoids', 'NOUN'), (',', 'PUNCT'), ('hyberbolic', 'ADJ'), ('tangent', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('f(z', 'PROPN'), (')', 'PUNCT'), ('=', 'PUNCT')] 

>> Dependency Tags are: 
[('non', 'amod'), ('-', 'amod'), ('linear', 'amod'), ('functions', 'nsubj'), ('neural', 'amod'), ('networks', 'pobj'), ('include', 'ROOT'), ('rectified', 'amod'), (' ', 'nmod'), ('linear', 'amod'), ('unit', 'dobj'), ('(', 'punct'), ('ReLU', 'appos'), (')', 'punct'), ('f(z', 'appos'), (')', 'punct'), ('=', 'punct'), ('max(0,z', 'appos'), (')', 'punct'), (',', 'punct'), ('commonly', 'advmod'), ('recent', 'amod'), ('years', 'pobj'), (',', 'punct'), (' ', 'pobj'), ('conventional', 'amod'), ('sigmoids', 'pobj'), (',', 'punct'), ('hyberbolic', 'amod'), ('tangent', 'pobj'), (',', 'punct'), (' ', 'compound'), ('f(z', 'appos'), (')', 'punct'), ('=', 'punct')]

>> Bigrams: 
[[non, -], [-, linear], [linear, functions], [functions, neural], [neural, networks], [networks, include], [include, rectified], [rectified,  ], [ , linear], [linear, unit], [unit, (], [(, ReLU], [ReLU, )], [), f(z], [f(z, )], [), =], [=, max(0,z], [max(0,z, )], [), ,], [,, commonly], [commonly, recent], [recent, years], [years, ,], [,,  ], [ , conventional], [conventional, sigmoids], [sigmoids, ,], [,, hyberbolic], [hyberbolic, tangent], [tangent, ,], [,,  ], [ , f(z], [f(z, )], [), =]]

>> Trigrams: 
[[non, -, linear], [-, linear, functions], [linear, functions, neural], [functions, neural, networks], [neural, networks, include], [networks, include, rectified], [include, rectified,  ], [rectified,  , linear], [ , linear, unit], [linear, unit, (], [unit, (, ReLU], [(, ReLU, )], [ReLU, ), f(z], [), f(z, )], [f(z, ), =], [), =, max(0,z], [=, max(0,z, )], [max(0,z, ), ,], [), ,, commonly], [,, commonly, recent], [commonly, recent, years], [recent, years, ,], [years, ,,  ], [,,  , conventional], [ , conventional, sigmoids], [conventional, sigmoids, ,], [sigmoids, ,, hyberbolic], [,, hyberbolic, tangent], [hyberbolic, tangent, ,], [tangent, ,,  ], [,,  , f(z], [ , f(z, )], [f(z, ), =]]

>> Noun Phrases are: 
[The non-linear functions, neural networks, the rectified  linear unit, ReLU, f(z, = max(0,z, recent years, the more conventional sigmoids, the hyberbolic tangent,  f(z]

>> Named Entities are: 
[('ReLU', 'ORG'), ('recent years', 'DATE')]


============================ Sentence 80 =============================

(exp(z) − exp(−z))/(exp(z) + exp(−z)) and logistic function logistic,  f(z) = 


>> Tokens are: 
[(, exp(z, ), −, exp(−z))/(exp(z, ), +, exp(−z, ), ), logistic, function, logistic, ,,  , f(z, ), =] 

>> PoS Tags are: 
[('(', 'PUNCT'), ('exp(z', 'X'), (')', 'PUNCT'), ('−', 'NOUN'), ('exp(−z))/(exp(z', 'ADV'), (')', 'PUNCT'), ('+', 'SYM'), ('exp(−z', 'NUM'), (')', 'PUNCT'), (')', 'PUNCT'), ('logistic', 'ADJ'), ('function', 'NOUN'), ('logistic', 'ADJ'), (',', 'PUNCT'), (' ', 'SPACE'), ('f(z', 'PROPN'), (')', 'PUNCT'), ('=', 'PUNCT')] 

>> Dependency Tags are: 
[('(', 'punct'), ('exp(z', 'dep'), (')', 'punct'), ('−', 'ROOT'), ('exp(−z))/(exp(z', 'prep'), (')', 'punct'), ('+', 'cc'), ('exp(−z', 'appos'), (')', 'punct'), (')', 'punct'), ('logistic', 'amod'), ('function', 'compound'), ('logistic', 'conj'), (',', 'punct'), (' ', 'compound'), ('f(z', 'npadvmod'), (')', 'punct'), ('=', 'punct')]

>> Bigrams: 
[[(, exp(z], [exp(z, )], [), −], [−, exp(−z))/(exp(z], [exp(−z))/(exp(z, )], [), +], [+, exp(−z], [exp(−z, )], [), )], [), logistic], [logistic, function], [function, logistic], [logistic, ,], [,,  ], [ , f(z], [f(z, )], [), =]]

>> Trigrams: 
[[(, exp(z, )], [exp(z, ), −], [), −, exp(−z))/(exp(z], [−, exp(−z))/(exp(z, )], [exp(−z))/(exp(z, ), +], [), +, exp(−z], [+, exp(−z, )], [exp(−z, ), )], [), ), logistic], [), logistic, function], [logistic, function, logistic], [function, logistic, ,], [logistic, ,,  ], [,,  , f(z], [ , f(z, )], [f(z, ), =]]

>> Noun Phrases are: 
[(exp(z) −]

>> Named Entities are: 
[('exp(−z', 'ORG')]


============================ Sentence 81 =============================

1/(1 + exp(−z)). 


>> Tokens are: 
[1/(1, +, exp(−z, ), ), .] 

>> PoS Tags are: 
[('1/(1', 'NUM'), ('+', 'ADP'), ('exp(−z', 'NUM'), (')', 'PUNCT'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('1/(1', 'ROOT'), ('+', 'prep'), ('exp(−z', 'appos'), (')', 'punct'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[1/(1, +], [+, exp(−z], [exp(−z, )], [), )], [), .]]

>> Trigrams: 
[[1/(1, +, exp(−z], [+, exp(−z, )], [exp(−z, ), )], [), ), .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('exp(−z', 'ORG')]


============================ Sentence 82 =============================

d, The equations used for computing the backward  pass. 


>> Tokens are: 
[d, ,, equations, computing, backward,  , pass, .] 

>> PoS Tags are: 
[('d', 'X'), (',', 'PUNCT'), ('equations', 'NOUN'), ('computing', 'VERB'), ('backward', 'ADJ'), (' ', 'SPACE'), ('pass', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('d', 'ROOT'), (',', 'punct'), ('equations', 'pobj'), ('computing', 'pcomp'), ('backward', 'amod'), (' ', 'compound'), ('pass', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[d, ,], [,, equations], [equations, computing], [computing, backward], [backward,  ], [ , pass], [pass, .]]

>> Trigrams: 
[[d, ,, equations], [,, equations, computing], [equations, computing, backward], [computing, backward,  ], [backward,  , pass], [ , pass, .]]

>> Noun Phrases are: 
[The equations, the backward  pass]

>> Named Entities are: 
[]


============================ Sentence 83 =============================

At each hidden layer we compute the error derivative with respect to  the output of each unit, which is a weighted sum of the error derivatives  with respect to the total inputs to the units in the layer above. 


>> Tokens are: 
[hidden, layer, compute, error, derivative, respect,  , output, unit, ,, weighted, sum, error, derivatives,  , respect, total, inputs, units, layer, .] 

>> PoS Tags are: 
[('hidden', 'ADJ'), ('layer', 'NOUN'), ('compute', 'VERB'), ('error', 'NOUN'), ('derivative', 'NOUN'), ('respect', 'NOUN'), (' ', 'SPACE'), ('output', 'NOUN'), ('unit', 'NOUN'), (',', 'PUNCT'), ('weighted', 'ADJ'), ('sum', 'NOUN'), ('error', 'NOUN'), ('derivatives', 'NOUN'), (' ', 'SPACE'), ('respect', 'NOUN'), ('total', 'ADJ'), ('inputs', 'NOUN'), ('units', 'NOUN'), ('layer', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('hidden', 'amod'), ('layer', 'pobj'), ('compute', 'ROOT'), ('error', 'compound'), ('derivative', 'dobj'), ('respect', 'pobj'), (' ', 'pobj'), ('output', 'pobj'), ('unit', 'pobj'), (',', 'punct'), ('weighted', 'amod'), ('sum', 'attr'), ('error', 'compound'), ('derivatives', 'pobj'), (' ', 'attr'), ('respect', 'pobj'), ('total', 'amod'), ('inputs', 'pobj'), ('units', 'pobj'), ('layer', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[hidden, layer], [layer, compute], [compute, error], [error, derivative], [derivative, respect], [respect,  ], [ , output], [output, unit], [unit, ,], [,, weighted], [weighted, sum], [sum, error], [error, derivatives], [derivatives,  ], [ , respect], [respect, total], [total, inputs], [inputs, units], [units, layer], [layer, .]]

>> Trigrams: 
[[hidden, layer, compute], [layer, compute, error], [compute, error, derivative], [error, derivative, respect], [derivative, respect,  ], [respect,  , output], [ , output, unit], [output, unit, ,], [unit, ,, weighted], [,, weighted, sum], [weighted, sum, error], [sum, error, derivatives], [error, derivatives,  ], [derivatives,  , respect], [ , respect, total], [respect, total, inputs], [total, inputs, units], [inputs, units, layer], [units, layer, .]]

>> Noun Phrases are: 
[each hidden layer, we, the error derivative, respect, the output, each unit, a weighted sum, the error derivatives, respect, the total inputs, the units, the layer]

>> Named Entities are: 
[]


============================ Sentence 84 =============================

We then  convert the error derivative with respect to the output into the error  derivative with respect to the input by multiplying it by the gradient of f(z). 


>> Tokens are: 
[ , convert, error, derivative, respect, output, error,  , derivative, respect, input, multiplying, gradient, f(z, ), .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('convert', 'VERB'), ('error', 'NOUN'), ('derivative', 'NOUN'), ('respect', 'NOUN'), ('output', 'NOUN'), ('error', 'NOUN'), (' ', 'SPACE'), ('derivative', 'ADJ'), ('respect', 'NOUN'), ('input', 'NOUN'), ('multiplying', 'VERB'), ('gradient', 'NOUN'), ('f(z', 'PROPN'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'nsubj'), ('convert', 'ROOT'), ('error', 'dobj'), ('derivative', 'dobj'), ('respect', 'pobj'), ('output', 'pobj'), ('error', 'pobj'), (' ', 'dobj'), ('derivative', 'dobj'), ('respect', 'pobj'), ('input', 'pobj'), ('multiplying', 'pcomp'), ('gradient', 'pobj'), ('f(z', 'pobj'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[ , convert], [convert, error], [error, derivative], [derivative, respect], [respect, output], [output, error], [error,  ], [ , derivative], [derivative, respect], [respect, input], [input, multiplying], [multiplying, gradient], [gradient, f(z], [f(z, )], [), .]]

>> Trigrams: 
[[ , convert, error], [convert, error, derivative], [error, derivative, respect], [derivative, respect, output], [respect, output, error], [output, error,  ], [error,  , derivative], [ , derivative, respect], [derivative, respect, input], [respect, input, multiplying], [input, multiplying, gradient], [multiplying, gradient, f(z], [gradient, f(z, )], [f(z, ), .]]

>> Noun Phrases are: 
[We, the error, derivative, respect, the output, the error, respect, the input, it, the gradient, f(z]

>> Named Entities are: 
[]


============================ Sentence 85 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 86 =============================

At the output layer, the error derivative with respect to the output of a unit  is computed by differentiating the cost function. 


>> Tokens are: 
[output, layer, ,, error, derivative, respect, output, unit,  , computed, differentiating, cost, function, .] 

>> PoS Tags are: 
[('output', 'NOUN'), ('layer', 'NOUN'), (',', 'PUNCT'), ('error', 'NOUN'), ('derivative', 'NOUN'), ('respect', 'NOUN'), ('output', 'NOUN'), ('unit', 'NOUN'), (' ', 'SPACE'), ('computed', 'VERB'), ('differentiating', 'VERB'), ('cost', 'NOUN'), ('function', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('output', 'compound'), ('layer', 'pobj'), (',', 'punct'), ('error', 'compound'), ('derivative', 'nsubjpass'), ('respect', 'pobj'), ('output', 'pobj'), ('unit', 'pobj'), (' ', 'nsubjpass'), ('computed', 'ROOT'), ('differentiating', 'pcomp'), ('cost', 'compound'), ('function', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[output, layer], [layer, ,], [,, error], [error, derivative], [derivative, respect], [respect, output], [output, unit], [unit,  ], [ , computed], [computed, differentiating], [differentiating, cost], [cost, function], [function, .]]

>> Trigrams: 
[[output, layer, ,], [layer, ,, error], [,, error, derivative], [error, derivative, respect], [derivative, respect, output], [respect, output, unit], [output, unit,  ], [unit,  , computed], [ , computed, differentiating], [computed, differentiating, cost], [differentiating, cost, function], [cost, function, .]]

>> Noun Phrases are: 
[the output layer, respect, the output, a unit, the cost function]

>> Named Entities are: 
[]


============================ Sentence 87 =============================

This gives yl − tl if the cost  function for unit l is 0.5(yl − tl)  2, where tl is the target value. 


>> Tokens are: 
[gives, yl, −, tl, cost,  , function, unit, l, 0.5(yl, −, tl, ),  , 2, ,, tl, target, value, .] 

>> PoS Tags are: 
[('gives', 'VERB'), ('yl', 'NOUN'), ('−', 'NOUN'), ('tl', 'PROPN'), ('cost', 'NOUN'), (' ', 'SPACE'), ('function', 'NOUN'), ('unit', 'NOUN'), ('l', 'NOUN'), ('0.5(yl', 'NUM'), ('−', 'NOUN'), ('tl', 'PROPN'), (')', 'PUNCT'), (' ', 'SPACE'), ('2', 'NUM'), (',', 'PUNCT'), ('tl', 'ADV'), ('target', 'NOUN'), ('value', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('gives', 'ROOT'), ('yl', 'dative'), ('−', 'compound'), ('tl', 'dobj'), ('cost', 'nmod'), (' ', 'prep'), ('function', 'nsubj'), ('unit', 'compound'), ('l', 'pobj'), ('0.5(yl', 'compound'), ('−', 'compound'), ('tl', 'attr'), (')', 'punct'), (' ', 'attr'), ('2', 'nummod'), (',', 'punct'), ('tl', 'nsubj'), ('target', 'compound'), ('value', 'attr'), ('.', 'punct')]

>> Bigrams: 
[[gives, yl], [yl, −], [−, tl], [tl, cost], [cost,  ], [ , function], [function, unit], [unit, l], [l, 0.5(yl], [0.5(yl, −], [−, tl], [tl, )], [),  ], [ , 2], [2, ,], [,, tl], [tl, target], [target, value], [value, .]]

>> Trigrams: 
[[gives, yl, −], [yl, −, tl], [−, tl, cost], [tl, cost,  ], [cost,  , function], [ , function, unit], [function, unit, l], [unit, l, 0.5(yl], [l, 0.5(yl, −], [0.5(yl, −, tl], [−, tl, )], [tl, ),  ], [),  , 2], [ , 2, ,], [2, ,, tl], [,, tl, target], [tl, target, value], [target, value, .]]

>> Noun Phrases are: 
[yl, − tl, the cost  function, unit l, 0.5(yl − tl, the target value]

>> Named Entities are: 
[('2', 'CARDINAL')]


============================ Sentence 88 =============================

Once the ∂E/∂zk  is known, the error-derivative for the weight wjk on the connection from  unit j in the layer below is just yj ∂E/∂zk. 


>> Tokens are: 
[∂E/∂zk,  , known, ,, error, -, derivative, weight, wjk, connection,  , unit, j, layer, yj, ∂E/∂zk, .] 

>> PoS Tags are: 
[('∂E/∂zk', 'PROPN'), (' ', 'SPACE'), ('known', 'VERB'), (',', 'PUNCT'), ('error', 'NOUN'), ('-', 'PUNCT'), ('derivative', 'NOUN'), ('weight', 'NOUN'), ('wjk', 'NOUN'), ('connection', 'NOUN'), (' ', 'SPACE'), ('unit', 'NOUN'), ('j', 'NOUN'), ('layer', 'NOUN'), ('yj', 'ADP'), ('∂E/∂zk', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('∂E/∂zk', 'nsubjpass'), (' ', 'nsubjpass'), ('known', 'advcl'), (',', 'punct'), ('error', 'compound'), ('-', 'punct'), ('derivative', 'nsubj'), ('weight', 'compound'), ('wjk', 'pobj'), ('connection', 'pobj'), (' ', 'compound'), ('unit', 'compound'), ('j', 'pobj'), ('layer', 'pobj'), ('yj', 'prep'), ('∂E/∂zk', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[∂E/∂zk,  ], [ , known], [known, ,], [,, error], [error, -], [-, derivative], [derivative, weight], [weight, wjk], [wjk, connection], [connection,  ], [ , unit], [unit, j], [j, layer], [layer, yj], [yj, ∂E/∂zk], [∂E/∂zk, .]]

>> Trigrams: 
[[∂E/∂zk,  , known], [ , known, ,], [known, ,, error], [,, error, -], [error, -, derivative], [-, derivative, weight], [derivative, weight, wjk], [weight, wjk, connection], [wjk, connection,  ], [connection,  , unit], [ , unit, j], [unit, j, layer], [j, layer, yj], [layer, yj, ∂E/∂zk], [yj, ∂E/∂zk, .]]

>> Noun Phrases are: 
[the ∂E/∂zk, the error-derivative, the weight wjk, the connection,  unit j, the layer, ∂E/∂zk]

>> Named Entities are: 
[]


============================ Sentence 89 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 90 =============================

Input (2)   


>> Tokens are: 
[Input, (, 2, ),  ] 

>> PoS Tags are: 
[('Input', 'NOUN'), ('(', 'PUNCT'), ('2', 'NUM'), (')', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Input', 'ROOT'), ('(', 'punct'), ('2', 'appos'), (')', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[Input, (], [(, 2], [2, )], [),  ]]

>> Trigrams: 
[[Input, (, 2], [(, 2, )], [2, ),  ]]

>> Noun Phrases are: 
[Input]

>> Named Entities are: 
[('2', 'CARDINAL')]


============================ Sentence 91 =============================

Output (1 sigmoid)  Hidden (2 sigmoid)  a b  dc  y y  x y x  =y z     x y      


>> Tokens are: 
[Output, (, 1, sigmoid, ),  , Hidden, (, 2, sigmoid, ),  , b,  , dc,  , y, y,  , x, y, x,  , =y, z,  , , ,  , x, y,  , , ,  ] 

>> PoS Tags are: 
[('Output', 'NOUN'), ('(', 'PUNCT'), ('1', 'NUM'), ('sigmoid', 'PROPN'), (')', 'PUNCT'), (' ', 'SPACE'), ('Hidden', 'PROPN'), ('(', 'PUNCT'), ('2', 'NUM'), ('sigmoid', 'PROPN'), (')', 'PUNCT'), (' ', 'SPACE'), ('b', 'NOUN'), (' ', 'SPACE'), ('dc', 'NOUN'), (' ', 'SPACE'), ('y', 'PROPN'), ('y', 'X'), (' ', 'SPACE'), ('x', 'SYM'), ('y', 'PROPN'), ('x\uf0b6', 'PROPN'), (' ', 'SPACE'), ('\uf0b6=y', 'VERB'), ('z', 'NOUN'), (' ', 'SPACE'), ('\uf0b6', 'ADJ'), ('\uf0b6', 'ADJ'), (' ', 'SPACE'), ('x', 'SYM'), ('y', 'X'), (' ', 'SPACE'), ('\uf0b6', 'ADJ'), ('\uf0b6', 'ADJ'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Output', 'nsubj'), ('(', 'punct'), ('1', 'nummod'), ('sigmoid', 'appos'), (')', 'punct'), (' ', 'appos'), ('Hidden', 'appos'), ('(', 'punct'), ('2', 'nummod'), ('sigmoid', 'parataxis'), (')', 'punct'), (' ', 'appos'), ('b', 'appos'), (' ', 'appos'), ('dc', 'appos'), (' ', 'appos'), ('y', 'nmod'), ('y', 'nmod'), (' ', 'appos'), ('x', 'punct'), ('y', 'nmod'), ('x\uf0b6', 'compound'), (' ', 'nsubj'), ('\uf0b6=y', 'relcl'), ('z', 'dobj'), (' ', 'appos'), ('\uf0b6', 'amod'), ('\uf0b6', 'amod'), (' ', 'dobj'), ('x', 'punct'), ('y', 'appos'), (' ', 'nmod'), ('\uf0b6', 'amod'), ('\uf0b6', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[Output, (], [(, 1], [1, sigmoid], [sigmoid, )], [),  ], [ , Hidden], [Hidden, (], [(, 2], [2, sigmoid], [sigmoid, )], [),  ], [ , b], [b,  ], [ , dc], [dc,  ], [ , y], [y, y], [y,  ], [ , x], [x, y], [y, x], [x,  ], [ , =y], [=y, z], [z,  ], [ , ], [, ], [,  ], [ , x], [x, y], [y,  ], [ , ], [, ], [,  ]]

>> Trigrams: 
[[Output, (, 1], [(, 1, sigmoid], [1, sigmoid, )], [sigmoid, ),  ], [),  , Hidden], [ , Hidden, (], [Hidden, (, 2], [(, 2, sigmoid], [2, sigmoid, )], [sigmoid, ),  ], [),  , b], [ , b,  ], [b,  , dc], [ , dc,  ], [dc,  , y], [ , y, y], [y, y,  ], [y,  , x], [ , x, y], [x, y, x], [y, x,  ], [x,  , =y], [ , =y, z], [=y, z,  ], [z,  , ], [ , , ], [, ,  ], [,  , x], [ , x, y], [x, y,  ], [y,  , ], [ , , ], [, ,  ]]

>> Noun Phrases are: 
[Output, (1 sigmoid, Hidden, a b, dc, z]

>> Named Entities are: 
[('x\uf0b6', 'PERSON'), ('\uf0b6 \uf0b6', 'PRODUCT'), ('\uf0b6 \uf0b6', 'PRODUCT')]


============================ Sentence 92 =============================

z y zz y   


>> Tokens are: 
[z, y, zz, y,  ] 

>> PoS Tags are: 
[('z', 'PROPN'), ('y', 'X'), ('zz', 'PROPN'), ('y\uf0b6', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('z', 'meta'), ('y', 'compound'), ('zz', 'ROOT'), ('y\uf0b6', 'appos'), (' ', 'punct')]

>> Bigrams: 
[[z, y], [y, zz], [zz, y], [y,  ]]

>> Trigrams: 
[[z, y, zz], [y, zz, y], [zz, y,  ]]

>> Noun Phrases are: 
[z y zz, y]

>> Named Entities are: 
[]


============================ Sentence 93 =============================

=Δ Δ  Δ Δ  Δ Δz y z  x y x    =  x z  y z  xx y         =  Compare outputs with correct  answer to get error derivatives   


>> Tokens are: 
[=Δ, Δ,  , Δ, Δ,  , Δ, Δz, y, z,  , x, y, x,  , , , =,  , x, z,  , y, z,  , xx, y,  , , ,  , , ,  , , =,  , Compare, outputs, correct,  , answer, error, derivatives,  ] 

>> PoS Tags are: 
[('\uf0b6=Δ', 'PROPN'), ('Δ', 'PROPN'), (' ', 'SPACE'), ('Δ', 'PROPN'), ('Δ', 'PROPN'), (' ', 'SPACE'), ('Δ', 'PROPN'), ('Δz', 'VERB'), ('y', 'PROPN'), ('z', 'DET'), (' ', 'SPACE'), ('x', 'SYM'), ('y', 'PROPN'), ('x\uf0b6', 'PROPN'), (' ', 'SPACE'), ('\uf0b6', 'ADJ'), ('\uf0b6', 'ADJ'), ('\uf0b6=', 'PROPN'), (' ', 'SPACE'), ('x', 'SYM'), ('z', 'X'), (' ', 'SPACE'), ('y', 'PROPN'), ('z', 'PROPN'), (' ', 'SPACE'), ('xx', 'NUM'), ('y', 'PROPN'), (' ', 'SPACE'), ('\uf0b6', 'ADJ'), ('\uf0b6', 'X'), (' ', 'SPACE'), ('\uf0b6', 'ADJ'), ('\uf0b6', 'X'), (' ', 'SPACE'), ('\uf0b6', 'ADJ'), ('\uf0b6=', 'PROPN'), (' ', 'SPACE'), ('Compare', 'PROPN'), ('outputs', 'NOUN'), ('correct', 'ADJ'), (' ', 'SPACE'), ('answer', 'NOUN'), ('error', 'NOUN'), ('derivatives', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('\uf0b6=Δ', 'compound'), ('Δ', 'nsubj'), (' ', 'compound'), ('Δ', 'compound'), ('Δ', 'appos'), (' ', 'compound'), ('Δ', 'nsubj'), ('Δz', 'ROOT'), ('y', 'prep'), ('z', 'det'), (' ', 'nmod'), ('x', 'punct'), ('y', 'nmod'), ('x\uf0b6', 'nmod'), (' ', 'nsubj'), ('\uf0b6', 'amod'), ('\uf0b6', 'amod'), ('\uf0b6=', 'compound'), (' ', 'dobj'), ('x', 'punct'), ('z', 'npadvmod'), (' ', 'dep'), ('y', 'compound'), ('z', 'npadvmod'), (' ', 'dobj'), ('xx', 'prep'), ('y', 'nmod'), (' ', 'nmod'), ('\uf0b6', 'amod'), ('\uf0b6', 'nmod'), (' ', 'appos'), ('\uf0b6', 'amod'), ('\uf0b6', 'nmod'), (' ', 'pobj'), ('\uf0b6', 'advcl'), ('\uf0b6=', 'nmod'), (' ', 'nummod'), ('Compare', 'compound'), ('outputs', 'dobj'), ('correct', 'amod'), (' ', 'compound'), ('answer', 'pobj'), ('error', 'compound'), ('derivatives', 'dobj'), (' ', 'advcl')]

>> Bigrams: 
[[=Δ, Δ], [Δ,  ], [ , Δ], [Δ, Δ], [Δ,  ], [ , Δ], [Δ, Δz], [Δz, y], [y, z], [z,  ], [ , x], [x, y], [y, x], [x,  ], [ , ], [, ], [, =], [=,  ], [ , x], [x, z], [z,  ], [ , y], [y, z], [z,  ], [ , xx], [xx, y], [y,  ], [ , ], [, ], [,  ], [ , ], [, ], [,  ], [ , ], [, =], [=,  ], [ , Compare], [Compare, outputs], [outputs, correct], [correct,  ], [ , answer], [answer, error], [error, derivatives], [derivatives,  ]]

>> Trigrams: 
[[=Δ, Δ,  ], [Δ,  , Δ], [ , Δ, Δ], [Δ, Δ,  ], [Δ,  , Δ], [ , Δ, Δz], [Δ, Δz, y], [Δz, y, z], [y, z,  ], [z,  , x], [ , x, y], [x, y, x], [y, x,  ], [x,  , ], [ , , ], [, , =], [, =,  ], [=,  , x], [ , x, z], [x, z,  ], [z,  , y], [ , y, z], [y, z,  ], [z,  , xx], [ , xx, y], [xx, y,  ], [y,  , ], [ , , ], [, ,  ], [,  , ], [ , , ], [, ,  ], [,  , ], [ , , =], [, =,  ], [=,  , Compare], [ , Compare, outputs], [Compare, outputs, correct], [outputs, correct,  ], [correct,  , answer], [ , answer, error], [answer, error, derivatives], [error, derivatives,  ]]

>> Noun Phrases are: 
[=Δ Δ,  Δ Δ,  Δ, =  Compare outputs, correct  answer, error derivatives]

>> Named Entities are: 
[('x\uf0b6', 'PERSON'), ('\uf0b6 \uf0b6', 'PRODUCT'), ('\uf0b6', 'PRODUCT'), ('\uf0b6 \uf0b6=  ', 'PRODUCT')]


============================ Sentence 94 =============================

j  k   


>> Tokens are: 
[j,  , k,  ] 

>> PoS Tags are: 
[('j', 'PROPN'), (' ', 'SPACE'), ('k', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('j', 'det'), (' ', 'ROOT'), ('k', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[j,  ], [ , k], [k,  ]]

>> Trigrams: 
[[j,  , k], [ , k,  ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 95 =============================

E yl  =yl tl   


>> Tokens are: 
[E, yl,  , =, yl, tl,  ] 

>> PoS Tags are: 
[('E', 'NOUN'), ('yl', 'NOUN'), (' ', 'SPACE'), ('=', 'PUNCT'), ('yl', 'X'), ('tl', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('E', 'ROOT'), ('yl', 'dobj'), (' ', 'appos'), ('=', 'punct'), ('yl', 'intj'), ('tl', 'dep'), (' ', 'appos')]

>> Bigrams: 
[[E, yl], [yl,  ], [ , =], [=, yl], [yl, tl], [tl,  ]]

>> Trigrams: 
[[E, yl,  ], [yl,  , =], [ , =, yl], [=, yl, tl], [yl, tl,  ]]

>> Noun Phrases are: 
[E, yl]

>> Named Entities are: 
[]


============================ Sentence 96 =============================

E zl  = E yl   


>> Tokens are: 
[E, zl,  , =, E, yl,  ] 

>> PoS Tags are: 
[('E', 'NOUN'), ('zl', 'PROPN'), (' ', 'SPACE'), ('=', 'PUNCT'), ('E', 'NOUN'), ('yl', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('E', 'nmod'), ('zl', 'appos'), (' ', 'appos'), ('=', 'punct'), ('E', 'ROOT'), ('yl', 'prep'), (' ', 'appos')]

>> Bigrams: 
[[E, zl], [zl,  ], [ , =], [=, E], [E, yl], [yl,  ]]

>> Trigrams: 
[[E, zl,  ], [zl,  , =], [ , =, E], [=, E, yl], [E, yl,  ]]

>> Noun Phrases are: 
[zl]

>> Named Entities are: 
[]


============================ Sentence 97 =============================

yl 


>> Tokens are: 
[yl] 

>> PoS Tags are: 
[('yl', 'X')] 

>> Dependency Tags are: 
[('yl', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 98 =============================

zl   


>> Tokens are: 
[zl,  ] 

>> PoS Tags are: 
[('zl', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('zl', 'ROOT'), (' ', 'pobj')]

>> Bigrams: 
[[zl,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 99 =============================

l  E yj  = wjk E 


>> Tokens are: 
[l,  , E, yj,  , =, wjk, E] 

>> PoS Tags are: 
[('l', 'AUX'), (' ', 'SPACE'), ('E', 'NOUN'), ('yj', 'ADP'), (' ', 'SPACE'), ('=', 'PUNCT'), ('wjk', 'NOUN'), ('E', 'NOUN')] 

>> Dependency Tags are: 
[('l', 'nmod'), (' ', 'compound'), ('E', 'ROOT'), ('yj', 'prep'), (' ', 'pobj'), ('=', 'punct'), ('wjk', 'appos'), ('E', 'appos')]

>> Bigrams: 
[[l,  ], [ , E], [E, yj], [yj,  ], [ , =], [=, wjk], [wjk, E]]

>> Trigrams: 
[[l,  , E], [ , E, yj], [E, yj,  ], [yj,  , =], [ , =, wjk], [=, wjk, E]]

>> Noun Phrases are: 
[l  E, wjk, E]

>> Named Entities are: 
[]


============================ Sentence 100 =============================

zk   


>> Tokens are: 
[zk,  ] 

>> PoS Tags are: 
[('zk', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('zk', 'ROOT'), (' ', 'advmod')]

>> Bigrams: 
[[zk,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[zk]

>> Named Entities are: 
[]


============================ Sentence 101 =============================

E zj  = E yj  yj zj   


>> Tokens are: 
[E, zj,  , =, E, yj,  , yj, zj,  ] 

>> PoS Tags are: 
[('E', 'NOUN'), ('zj', 'X'), (' ', 'SPACE'), ('=', 'PUNCT'), ('E', 'NOUN'), ('yj', 'X'), (' ', 'SPACE'), ('yj', 'X'), ('zj', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('E', 'nmod'), ('zj', 'nmod'), (' ', 'appos'), ('=', 'punct'), ('E', 'nsubj'), ('yj', 'prep'), (' ', 'pobj'), ('yj', 'dep'), ('zj', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[E, zj], [zj,  ], [ , =], [=, E], [E, yj], [yj,  ], [ , yj], [yj, zj], [zj,  ]]

>> Trigrams: 
[[E, zj,  ], [zj,  , =], [ , =, E], [=, E, yj], [E, yj,  ], [yj,  , yj], [ , yj, zj], [yj, zj,  ]]

>> Noun Phrases are: 
[E zj  = E]

>> Named Entities are: 
[]


============================ Sentence 102 =============================

E yk  = wkl E zl   


>> Tokens are: 
[E, yk,  , =, wkl, E, zl,  ] 

>> PoS Tags are: 
[('E', 'NOUN'), ('yk', 'PROPN'), (' ', 'SPACE'), ('=', 'PUNCT'), ('wkl', 'VERB'), ('E', 'NOUN'), ('zl', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('E', 'nsubj'), ('yk', 'dobj'), (' ', 'appos'), ('=', 'punct'), ('wkl', 'ROOT'), ('E', 'nsubj'), ('zl', 'prep'), (' ', 'punct')]

>> Bigrams: 
[[E, yk], [yk,  ], [ , =], [=, wkl], [wkl, E], [E, zl], [zl,  ]]

>> Trigrams: 
[[E, yk,  ], [yk,  , =], [ , =, wkl], [=, wkl, E], [wkl, E, zl], [E, zl,  ]]

>> Noun Phrases are: 
[E, yk, E]

>> Named Entities are: 
[]


============================ Sentence 103 =============================

E zk  = E yk   


>> Tokens are: 
[E, zk,  , =, E, yk,  ] 

>> PoS Tags are: 
[('E', 'NOUN'), ('zk', 'PROPN'), (' ', 'SPACE'), ('=', 'PUNCT'), ('E', 'NOUN'), ('yk', 'ADJ'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('E', 'nmod'), ('zk', 'appos'), (' ', 'nmod'), ('=', 'punct'), ('E', 'ROOT'), ('yk', 'amod'), (' ', 'advmod')]

>> Bigrams: 
[[E, zk], [zk,  ], [ , =], [=, E], [E, yk], [yk,  ]]

>> Trigrams: 
[[E, zk,  ], [zk,  , =], [ , =, E], [=, E, yk], [E, yk,  ]]

>> Noun Phrases are: 
[zk]

>> Named Entities are: 
[]


============================ Sentence 104 =============================

yk zk  wkl  wjk  wij  i   


>> Tokens are: 
[yk, zk,  , wkl,  , wjk,  , wij,  ,  ] 

>> PoS Tags are: 
[('yk', 'NOUN'), ('zk', 'PROPN'), (' ', 'SPACE'), ('wkl', 'VERB'), (' ', 'SPACE'), ('wjk', 'X'), (' ', 'SPACE'), ('wij', 'VERB'), (' ', 'SPACE'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('yk', 'dep'), ('zk', 'nmod'), (' ', 'nsubj'), ('wkl', 'ROOT'), (' ', 'dobj'), ('wjk', 'compound'), (' ', 'nsubj'), ('wij', 'relcl'), (' ', 'conj'), (' ', 'conj')]

>> Bigrams: 
[[yk, zk], [zk,  ], [ , wkl], [wkl,  ], [ , wjk], [wjk,  ], [ , wij], [wij,  ], [ ,  ]]

>> Trigrams: 
[[yk, zk,  ], [zk,  , wkl], [ , wkl,  ], [wkl,  , wjk], [ , wjk,  ], [wjk,  , wij], [ , wij,  ], [wij,  ,  ]]

>> Noun Phrases are: 
[i]

>> Named Entities are: 
[]


============================ Sentence 105 =============================

j  k  yl = 


>> Tokens are: 
[j,  , k,  , yl, =] 

>> PoS Tags are: 
[('j', 'PROPN'), (' ', 'SPACE'), ('k', 'X'), (' ', 'SPACE'), ('yl', 'NOUN'), ('=', 'PUNCT')] 

>> Dependency Tags are: 
[('j', 'compound'), (' ', 'ROOT'), ('k', 'punct'), (' ', 'appos'), ('yl', 'npadvmod'), ('=', 'punct')]

>> Bigrams: 
[[j,  ], [ , k], [k,  ], [ , yl], [yl, =]]

>> Trigrams: 
[[j,  , k], [ , k,  ], [k,  , yl], [ , yl, =]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 106 =============================

f (zl )   


>> Tokens are: 
[f, (, zl, ),  ] 

>> PoS Tags are: 
[('f', 'X'), ('(', 'PUNCT'), ('zl', 'INTJ'), (')', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('f', 'dep'), ('(', 'punct'), ('zl', 'ROOT'), (')', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[f, (], [(, zl], [zl, )], [),  ]]

>> Trigrams: 
[[f, (, zl], [(, zl, )], [zl, ),  ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 107 =============================

zl = wkl yk 


>> Tokens are: 
[zl, =, wkl, yk] 

>> PoS Tags are: 
[('zl', 'CCONJ'), ('=', 'PROPN'), ('wkl', 'VERB'), ('yk', 'X')] 

>> Dependency Tags are: 
[('zl', 'compound'), ('=', 'nsubj'), ('wkl', 'ROOT'), ('yk', 'nsubj')]

>> Bigrams: 
[[zl, =], [=, wkl], [wkl, yk]]

>> Trigrams: 
[[zl, =, wkl], [=, wkl, yk]]

>> Noun Phrases are: 
[zl =]

>> Named Entities are: 
[]


============================ Sentence 108 =============================

l  yj = 


>> Tokens are: 
[l,  , yj, =] 

>> PoS Tags are: 
[('l', 'X'), (' ', 'SPACE'), ('yj', 'X'), ('=', 'PUNCT')] 

>> Dependency Tags are: 
[('l', 'compound'), (' ', 'nsubj'), ('yj', 'ROOT'), ('=', 'punct')]

>> Bigrams: 
[[l,  ], [ , yj], [yj, =]]

>> Trigrams: 
[[l,  , yj], [ , yj, =]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 109 =============================

f (zj )  zj = wij xi  yk = f (zk ) 


>> Tokens are: 
[f, (, zj, ),  , zj, =, wij, xi,  , yk, =, f, (, zk, )] 

>> PoS Tags are: 
[('f', 'X'), ('(', 'PUNCT'), ('zj', 'X'), (')', 'PUNCT'), (' ', 'SPACE'), ('zj', 'X'), ('=', 'PROPN'), ('wij', 'X'), ('xi', 'ADP'), (' ', 'SPACE'), ('yk', 'PROPN'), ('=', 'PUNCT'), ('f', 'X'), ('(', 'PUNCT'), ('zk', 'X'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('f', 'nmod'), ('(', 'punct'), ('zj', 'nmod'), (')', 'punct'), (' ', 'nmod'), ('zj', 'nmod'), ('=', 'compound'), ('wij', 'ROOT'), ('xi', 'prep'), (' ', 'pobj'), ('yk', 'appos'), ('=', 'punct'), ('f', 'punct'), ('(', 'punct'), ('zk', 'parataxis'), (')', 'punct')]

>> Bigrams: 
[[f, (], [(, zj], [zj, )], [),  ], [ , zj], [zj, =], [=, wij], [wij, xi], [xi,  ], [ , yk], [yk, =], [=, f], [f, (], [(, zk], [zk, )]]

>> Trigrams: 
[[f, (, zj], [(, zj, )], [zj, ),  ], [),  , zj], [ , zj, =], [zj, =, wij], [=, wij, xi], [wij, xi,  ], [xi,  , yk], [ , yk, =], [yk, =, f], [=, f, (], [f, (, zk], [(, zk, )]]

>> Noun Phrases are: 
[yk]

>> Named Entities are: 
[]


============================ Sentence 110 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 111 =============================

zk = wjk yj   


>> Tokens are: 
[zk, =, wjk, yj,  ] 

>> PoS Tags are: 
[('zk', 'PROPN'), ('=', 'X'), ('wjk', 'X'), ('yj', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('zk', 'dep'), ('=', 'punct'), ('wjk', 'advmod'), ('yj', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[zk, =], [=, wjk], [wjk, yj], [yj,  ]]

>> Trigrams: 
[[zk, =, wjk], [=, wjk, yj], [wjk, yj,  ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 112 =============================

Output units    


>> Tokens are: 
[Output, units,   ] 

>> PoS Tags are: 
[('Output', 'NOUN'), ('units', 'NOUN'), ('  ', 'SPACE')] 

>> Dependency Tags are: 
[('Output', 'compound'), ('units', 'nsubj'), ('  ', 'ROOT')]

>> Bigrams: 
[[Output, units], [units,   ]]

>> Trigrams: 
[[Output, units,   ]]

>> Noun Phrases are: 
[Output units]

>> Named Entities are: 
[]


============================ Sentence 113 =============================

Input units   Hidden units H2   Hidden units H1   wkl  wjk  wij  k  H2  k  H2   


>> Tokens are: 
[Input, units,   , Hidden, units, H2,   , Hidden, units, H1,   , wkl,  , wjk,  , wij,  , k, , H2,  , k, , H2,  ] 

>> PoS Tags are: 
[('Input', 'PROPN'), ('units', 'NOUN'), ('  ', 'SPACE'), ('Hidden', 'PROPN'), ('units', 'NOUN'), ('H2', 'VERB'), ('  ', 'SPACE'), ('Hidden', 'PROPN'), ('units', 'NOUN'), ('H1', 'PROPN'), ('  ', 'SPACE'), ('wkl', 'VERB'), (' ', 'SPACE'), ('wjk', 'X'), (' ', 'SPACE'), ('wij', 'VERB'), (' ', 'SPACE'), ('k', 'PROPN'), ('\uf065', 'PROPN'), ('H2', 'PROPN'), (' ', 'SPACE'), ('k', 'PROPN'), ('\uf065', 'PROPN'), ('H2', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Input', 'compound'), ('units', 'nsubj'), ('  ', 'poss'), ('Hidden', 'amod'), ('units', 'nsubj'), ('H2', 'ROOT'), ('  ', 'poss'), ('Hidden', 'amod'), ('units', 'dobj'), ('H1', 'dep'), ('  ', 'dobj'), ('wkl', 'dep'), (' ', 'nsubj'), ('wjk', 'compound'), (' ', 'nsubj'), ('wij', 'relcl'), (' ', 'dep'), ('k', 'nmod'), ('\uf065', 'compound'), ('H2', 'npadvmod'), (' ', 'npadvmod'), ('k', 'npadvmod'), ('\uf065', 'compound'), ('H2', 'npadvmod'), (' ', 'nummod')]

>> Bigrams: 
[[Input, units], [units,   ], [  , Hidden], [Hidden, units], [units, H2], [H2,   ], [  , Hidden], [Hidden, units], [units, H1], [H1,   ], [  , wkl], [wkl,  ], [ , wjk], [wjk,  ], [ , wij], [wij,  ], [ , k], [k, ], [, H2], [H2,  ], [ , k], [k, ], [, H2], [H2,  ]]

>> Trigrams: 
[[Input, units,   ], [units,   , Hidden], [  , Hidden, units], [Hidden, units, H2], [units, H2,   ], [H2,   , Hidden], [  , Hidden, units], [Hidden, units, H1], [units, H1,   ], [H1,   , wkl], [  , wkl,  ], [wkl,  , wjk], [ , wjk,  ], [wjk,  , wij], [ , wij,  ], [wij,  , k], [ , k, ], [k, , H2], [, H2,  ], [H2,  , k], [ , k, ], [k, , H2], [, H2,  ]]

>> Noun Phrases are: 
[Input units,   Hidden units,   Hidden units]

>> Named Entities are: 
[]


============================ Sentence 114 =============================

I  out   


>> Tokens are: 
[,  ] 

>> PoS Tags are: 
[('\uf065', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('\uf065', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[I]

>> Named Entities are: 
[]


============================ Sentence 115 =============================

j  H1   


>> Tokens are: 
[j, , H1,  ] 

>> PoS Tags are: 
[('j', 'PROPN'), ('\uf065', 'PROPN'), ('H1', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('j', 'det'), ('\uf065', 'compound'), ('H1', 'ROOT'), (' ', 'nummod')]

>> Bigrams: 
[[j, ], [, H1], [H1,  ]]

>> Trigrams: 
[[j, , H1], [, H1,  ]]

>> Noun Phrases are: 
[j  H1]

>> Named Entities are: 
[('j \uf065 H1  ', 'PRODUCT')]


============================ Sentence 116 =============================

i  


>> Tokens are: 
[] 

>> PoS Tags are: 
[('\uf065', 'PROPN')] 

>> Dependency Tags are: 
[('\uf065', 'appos')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[i, ]

>> Named Entities are: 
[]


============================ Sentence 117 =============================

Input   


>> Tokens are: 
[Input,  ] 

>> PoS Tags are: 
[('Input', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Input', 'ROOT'), (' ', 'appos')]

>> Bigrams: 
[[Input,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Input]

>> Named Entities are: 
[]


============================ Sentence 118 =============================

i  2 8  M A Y  2 0 1 5  |  V O L  5 2 1  |   


>> Tokens are: 
[ , 2, 8,  , M, Y,  , 2, 0, 1, 5,  , |,  , V, O, L,  , 5, 2, 1,  , |,  ] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('2', 'NUM'), ('8', 'NUM'), (' ', 'SPACE'), ('M', 'PROPN'), ('Y', 'PROPN'), (' ', 'SPACE'), ('2', 'NUM'), ('0', 'NUM'), ('1', 'NUM'), ('5', 'NUM'), (' ', 'SPACE'), ('|', 'NOUN'), (' ', 'SPACE'), ('V', 'NOUN'), ('O', 'NOUN'), ('L', 'NOUN'), (' ', 'SPACE'), ('5', 'NUM'), ('2', 'NUM'), ('1', 'NUM'), (' ', 'SPACE'), ('|', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'nmod'), ('2', 'compound'), ('8', 'appos'), (' ', 'compound'), ('M', 'compound'), ('Y', 'nmod'), (' ', 'appos'), ('2', 'compound'), ('0', 'quantmod'), ('1', 'compound'), ('5', 'nummod'), (' ', 'punct'), ('|', 'appos'), (' ', 'punct'), ('V', 'compound'), ('O', 'compound'), ('L', 'appos'), (' ', 'ROOT'), ('5', 'compound'), ('2', 'compound'), ('1', 'nummod'), (' ', 'punct'), ('|', 'npadvmod'), (' ', 'punct')]

>> Bigrams: 
[[ , 2], [2, 8], [8,  ], [ , M], [M, Y], [Y,  ], [ , 2], [2, 0], [0, 1], [1, 5], [5,  ], [ , |], [|,  ], [ , V], [V, O], [O, L], [L,  ], [ , 5], [5, 2], [2, 1], [1,  ], [ , |], [|,  ]]

>> Trigrams: 
[[ , 2, 8], [2, 8,  ], [8,  , M], [ , M, Y], [M, Y,  ], [Y,  , 2], [ , 2, 0], [2, 0, 1], [0, 1, 5], [1, 5,  ], [5,  , |], [ , |,  ], [|,  , V], [ , V, O], [V, O, L], [O, L,  ], [L,  , 5], [ , 5, 2], [5, 2, 1], [2, 1,  ], [1,  , |], [ , |,  ]]

>> Noun Phrases are: 
[i, |, V O L]

>> Named Entities are: 
[('2', 'CARDINAL')]


============================ Sentence 119 =============================

N A T U R E  |  4 3 7  REVIEW INSIGHT   


>> Tokens are: 
[N, T, U, R, E,  , |,  , 4, 3, 7,  , REVIEW, INSIGHT,  ] 

>> PoS Tags are: 
[('N', 'PROPN'), ('T', 'NOUN'), ('U', 'NOUN'), ('R', 'NOUN'), ('E', 'NOUN'), (' ', 'SPACE'), ('|', 'NOUN'), (' ', 'SPACE'), ('4', 'NUM'), ('3', 'NUM'), ('7', 'NUM'), (' ', 'SPACE'), ('REVIEW', 'PROPN'), ('INSIGHT', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('N', 'compound'), ('T', 'compound'), ('U', 'compound'), ('R', 'compound'), ('E', 'ROOT'), (' ', 'appos'), ('|', 'npadvmod'), (' ', 'appos'), ('4', 'nummod'), ('3', 'compound'), ('7', 'nummod'), (' ', 'compound'), ('REVIEW', 'compound'), ('INSIGHT', 'appos'), (' ', 'appos')]

>> Bigrams: 
[[N, T], [T, U], [U, R], [R, E], [E,  ], [ , |], [|,  ], [ , 4], [4, 3], [3, 7], [7,  ], [ , REVIEW], [REVIEW, INSIGHT], [INSIGHT,  ]]

>> Trigrams: 
[[N, T, U], [T, U, R], [U, R, E], [R, E,  ], [E,  , |], [ , |,  ], [|,  , 4], [ , 4, 3], [4, 3, 7], [3, 7,  ], [7,  , REVIEW], [ , REVIEW, INSIGHT], [REVIEW, INSIGHT,  ]]

>> Noun Phrases are: 
[N A T U R E, 4 3 7  REVIEW INSIGHT]

>> Named Entities are: 
[]


============================ Sentence 120 =============================

© 2015 Macmillan Publishers Limited. 


>> Tokens are: 
[©, 2015, Macmillan, Publishers, Limited, .] 

>> PoS Tags are: 
[('©', 'ADJ'), ('2015', 'NUM'), ('Macmillan', 'PROPN'), ('Publishers', 'PROPN'), ('Limited', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('©', 'nmod'), ('2015', 'nummod'), ('Macmillan', 'compound'), ('Publishers', 'compound'), ('Limited', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[©, 2015], [2015, Macmillan], [Macmillan, Publishers], [Publishers, Limited], [Limited, .]]

>> Trigrams: 
[[©, 2015, Macmillan], [2015, Macmillan, Publishers], [Macmillan, Publishers, Limited], [Publishers, Limited, .]]

>> Noun Phrases are: 
[© 2015 Macmillan Publishers Limited]

>> Named Entities are: 
[('2015', 'DATE'), ('Macmillan Publishers Limited', 'ORG')]


============================ Sentence 121 =============================

All rights reserved    raw pixels could not possibly distinguish the latter two, while putting  the former two in the same category. 


>> Tokens are: 
[rights, reserved,    , raw, pixels, possibly, distinguish, ,, putting,  , category, .] 

>> PoS Tags are: 
[('rights', 'NOUN'), ('reserved', 'VERB'), ('   ', 'SPACE'), ('raw', 'ADJ'), ('pixels', 'NOUN'), ('possibly', 'ADV'), ('distinguish', 'VERB'), (',', 'PUNCT'), ('putting', 'VERB'), (' ', 'SPACE'), ('category', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('rights', 'nsubj'), ('reserved', 'ROOT'), ('   ', 'nummod'), ('raw', 'amod'), ('pixels', 'nsubj'), ('possibly', 'advmod'), ('distinguish', 'conj'), (',', 'punct'), ('putting', 'advcl'), (' ', 'dobj'), ('category', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[rights, reserved], [reserved,    ], [   , raw], [raw, pixels], [pixels, possibly], [possibly, distinguish], [distinguish, ,], [,, putting], [putting,  ], [ , category], [category, .]]

>> Trigrams: 
[[rights, reserved,    ], [reserved,    , raw], [   , raw, pixels], [raw, pixels, possibly], [pixels, possibly, distinguish], [possibly, distinguish, ,], [distinguish, ,, putting], [,, putting,  ], [putting,  , category], [ , category, .]]

>> Noun Phrases are: 
[All rights,    raw pixels, the same category]

>> Named Entities are: 
[('two', 'CARDINAL'), ('two', 'CARDINAL')]


============================ Sentence 122 =============================

This is why shallow classifiers  require a good feature extractor that solves the selectivity–invariance  dilemma — one that produces representations that are selective to  the aspects of the image that are important for discrimination, but  that are invariant to irrelevant aspects such as the pose of the animal.   


>> Tokens are: 
[shallow, classifiers,  , require, good, feature, extractor, solves, selectivity, –, invariance,  , dilemma, —, produces, representations, selective,  , aspects, image, important, discrimination, ,,  , invariant, irrelevant, aspects, pose, animal, .,  ] 

>> PoS Tags are: 
[('shallow', 'ADJ'), ('classifiers', 'NOUN'), (' ', 'SPACE'), ('require', 'VERB'), ('good', 'ADJ'), ('feature', 'NOUN'), ('extractor', 'NOUN'), ('solves', 'VERB'), ('selectivity', 'NOUN'), ('–', 'PUNCT'), ('invariance', 'NOUN'), (' ', 'SPACE'), ('dilemma', 'NOUN'), ('—', 'PUNCT'), ('produces', 'VERB'), ('representations', 'NOUN'), ('selective', 'ADJ'), (' ', 'SPACE'), ('aspects', 'NOUN'), ('image', 'NOUN'), ('important', 'ADJ'), ('discrimination', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('invariant', 'ADJ'), ('irrelevant', 'ADJ'), ('aspects', 'NOUN'), ('pose', 'NOUN'), ('animal', 'NOUN'), ('.', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('shallow', 'amod'), ('classifiers', 'compound'), (' ', 'nsubj'), ('require', 'advcl'), ('good', 'amod'), ('feature', 'compound'), ('extractor', 'dobj'), ('solves', 'relcl'), ('selectivity', 'dobj'), ('–', 'punct'), ('invariance', 'compound'), (' ', 'compound'), ('dilemma', 'appos'), ('—', 'punct'), ('produces', 'relcl'), ('representations', 'dobj'), ('selective', 'acomp'), (' ', 'pobj'), ('aspects', 'attr'), ('image', 'pobj'), ('important', 'acomp'), ('discrimination', 'pobj'), (',', 'punct'), (' ', 'appos'), ('invariant', 'acomp'), ('irrelevant', 'amod'), ('aspects', 'pobj'), ('pose', 'pobj'), ('animal', 'pobj'), ('.', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[shallow, classifiers], [classifiers,  ], [ , require], [require, good], [good, feature], [feature, extractor], [extractor, solves], [solves, selectivity], [selectivity, –], [–, invariance], [invariance,  ], [ , dilemma], [dilemma, —], [—, produces], [produces, representations], [representations, selective], [selective,  ], [ , aspects], [aspects, image], [image, important], [important, discrimination], [discrimination, ,], [,,  ], [ , invariant], [invariant, irrelevant], [irrelevant, aspects], [aspects, pose], [pose, animal], [animal, .], [.,  ]]

>> Trigrams: 
[[shallow, classifiers,  ], [classifiers,  , require], [ , require, good], [require, good, feature], [good, feature, extractor], [feature, extractor, solves], [extractor, solves, selectivity], [solves, selectivity, –], [selectivity, –, invariance], [–, invariance,  ], [invariance,  , dilemma], [ , dilemma, —], [dilemma, —, produces], [—, produces, representations], [produces, representations, selective], [representations, selective,  ], [selective,  , aspects], [ , aspects, image], [aspects, image, important], [image, important, discrimination], [important, discrimination, ,], [discrimination, ,,  ], [,,  , invariant], [ , invariant, irrelevant], [invariant, irrelevant, aspects], [irrelevant, aspects, pose], [aspects, pose, animal], [pose, animal, .], [animal, .,  ]]

>> Noun Phrases are: 
[a good feature extractor, the selectivity, invariance  dilemma, one, representations, the aspects, the image, discrimination, irrelevant aspects, the pose, the animal]

>> Named Entities are: 
[]


============================ Sentence 123 =============================

To make classifiers more powerful, one can use generic non-linear  features, as with kernel methods20, but generic features such as those  arising with the Gaussian kernel do not allow the learner to general- ize well far from the training examples21. 


>> Tokens are: 
[classifiers, powerful, ,, use, generic, non, -, linear,  , features, ,, kernel, methods20, ,, generic, features,  , arising, Gaussian, kernel, allow, learner, general-, ize, far, training, examples21, .] 

>> PoS Tags are: 
[('classifiers', 'NOUN'), ('powerful', 'ADJ'), (',', 'PUNCT'), ('use', 'VERB'), ('generic', 'ADJ'), ('non', 'ADJ'), ('-', 'ADJ'), ('linear', 'ADJ'), (' ', 'SPACE'), ('features', 'NOUN'), (',', 'PUNCT'), ('kernel', 'NOUN'), ('methods20', 'NOUN'), (',', 'PUNCT'), ('generic', 'ADJ'), ('features', 'NOUN'), (' ', 'SPACE'), ('arising', 'VERB'), ('Gaussian', 'ADJ'), ('kernel', 'NOUN'), ('allow', 'VERB'), ('learner', 'NOUN'), ('general-', 'ADJ'), ('ize', 'NOUN'), ('far', 'ADV'), ('training', 'NOUN'), ('examples21', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('classifiers', 'nsubj'), ('powerful', 'ccomp'), (',', 'punct'), ('use', 'ROOT'), ('generic', 'amod'), ('non', 'amod'), ('-', 'amod'), ('linear', 'amod'), (' ', 'compound'), ('features', 'dobj'), (',', 'punct'), ('kernel', 'compound'), ('methods20', 'pobj'), (',', 'punct'), ('generic', 'amod'), ('features', 'nsubj'), (' ', 'pobj'), ('arising', 'acl'), ('Gaussian', 'amod'), ('kernel', 'pobj'), ('allow', 'conj'), ('learner', 'dobj'), ('general-', 'amod'), ('ize', 'pobj'), ('far', 'advmod'), ('training', 'compound'), ('examples21', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[classifiers, powerful], [powerful, ,], [,, use], [use, generic], [generic, non], [non, -], [-, linear], [linear,  ], [ , features], [features, ,], [,, kernel], [kernel, methods20], [methods20, ,], [,, generic], [generic, features], [features,  ], [ , arising], [arising, Gaussian], [Gaussian, kernel], [kernel, allow], [allow, learner], [learner, general-], [general-, ize], [ize, far], [far, training], [training, examples21], [examples21, .]]

>> Trigrams: 
[[classifiers, powerful, ,], [powerful, ,, use], [,, use, generic], [use, generic, non], [generic, non, -], [non, -, linear], [-, linear,  ], [linear,  , features], [ , features, ,], [features, ,, kernel], [,, kernel, methods20], [kernel, methods20, ,], [methods20, ,, generic], [,, generic, features], [generic, features,  ], [features,  , arising], [ , arising, Gaussian], [arising, Gaussian, kernel], [Gaussian, kernel, allow], [kernel, allow, learner], [allow, learner, general-], [learner, general-, ize], [general-, ize, far], [ize, far, training], [far, training, examples21], [training, examples21, .]]

>> Noun Phrases are: 
[classifiers, one, generic non-linear  features, kernel methods20, generic features, the Gaussian kernel, the learner, general- ize, the training examples21]

>> Named Entities are: 
[('Gaussian', 'NORP')]


============================ Sentence 124 =============================

The conventional option is  to hand design good feature extractors, which requires a consider- able amount of engineering skill and domain expertise. 


>> Tokens are: 
[conventional, option,  , hand, design, good, feature, extractors, ,, requires, consider-, able, engineering, skill, domain, expertise, .] 

>> PoS Tags are: 
[('conventional', 'ADJ'), ('option', 'NOUN'), (' ', 'SPACE'), ('hand', 'VERB'), ('design', 'NOUN'), ('good', 'ADJ'), ('feature', 'NOUN'), ('extractors', 'NOUN'), (',', 'PUNCT'), ('requires', 'VERB'), ('consider-', 'ADJ'), ('able', 'ADJ'), ('engineering', 'NOUN'), ('skill', 'NOUN'), ('domain', 'NOUN'), ('expertise', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('conventional', 'amod'), ('option', 'nsubj'), (' ', 'attr'), ('hand', 'relcl'), ('design', 'nmod'), ('good', 'amod'), ('feature', 'compound'), ('extractors', 'dobj'), (',', 'punct'), ('requires', 'relcl'), ('consider-', 'amod'), ('able', 'amod'), ('engineering', 'compound'), ('skill', 'pobj'), ('domain', 'compound'), ('expertise', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[conventional, option], [option,  ], [ , hand], [hand, design], [design, good], [good, feature], [feature, extractors], [extractors, ,], [,, requires], [requires, consider-], [consider-, able], [able, engineering], [engineering, skill], [skill, domain], [domain, expertise], [expertise, .]]

>> Trigrams: 
[[conventional, option,  ], [option,  , hand], [ , hand, design], [hand, design, good], [design, good, feature], [good, feature, extractors], [feature, extractors, ,], [extractors, ,, requires], [,, requires, consider-], [requires, consider-, able], [consider-, able, engineering], [able, engineering, skill], [engineering, skill, domain], [skill, domain, expertise], [domain, expertise, .]]

>> Noun Phrases are: 
[The conventional option, design good feature extractors, a consider- able amount, engineering skill, domain expertise]

>> Named Entities are: 
[]


============================ Sentence 125 =============================

But this can  all be avoided if good features can be learned automatically using a  general-purpose learning procedure. 


>> Tokens are: 
[ , avoided, good, features, learned, automatically,  , general, -, purpose, learning, procedure, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('avoided', 'VERB'), ('good', 'ADJ'), ('features', 'NOUN'), ('learned', 'VERB'), ('automatically', 'ADV'), (' ', 'SPACE'), ('general', 'ADJ'), ('-', 'PUNCT'), ('purpose', 'NOUN'), ('learning', 'NOUN'), ('procedure', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'dep'), ('avoided', 'ROOT'), ('good', 'amod'), ('features', 'nsubjpass'), ('learned', 'advcl'), ('automatically', 'advmod'), (' ', 'nmod'), ('general', 'amod'), ('-', 'punct'), ('purpose', 'compound'), ('learning', 'compound'), ('procedure', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[ , avoided], [avoided, good], [good, features], [features, learned], [learned, automatically], [automatically,  ], [ , general], [general, -], [-, purpose], [purpose, learning], [learning, procedure], [procedure, .]]

>> Trigrams: 
[[ , avoided, good], [avoided, good, features], [good, features, learned], [features, learned, automatically], [learned, automatically,  ], [automatically,  , general], [ , general, -], [general, -, purpose], [-, purpose, learning], [purpose, learning, procedure], [learning, procedure, .]]

>> Noun Phrases are: 
[good features, a  general-purpose learning procedure]

>> Named Entities are: 
[]


============================ Sentence 126 =============================

This is the key advantage of  deep learning. 


>> Tokens are: 
[key, advantage,  , deep, learning, .] 

>> PoS Tags are: 
[('key', 'ADJ'), ('advantage', 'NOUN'), (' ', 'SPACE'), ('deep', 'ADJ'), ('learning', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('key', 'amod'), ('advantage', 'attr'), (' ', 'nmod'), ('deep', 'amod'), ('learning', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[key, advantage], [advantage,  ], [ , deep], [deep, learning], [learning, .]]

>> Trigrams: 
[[key, advantage,  ], [advantage,  , deep], [ , deep, learning], [deep, learning, .]]

>> Noun Phrases are: 
[the key advantage,  deep learning]

>> Named Entities are: 
[]


============================ Sentence 127 =============================

  A deep-learning architecture is a multilayer stack of simple mod- ules, all (or most) of which are subject to learning, and many of which  compute non-linear input–output mappings. 


>> Tokens are: 
[  , deep, -, learning, architecture, multilayer, stack, simple, mod-, ules, ,, (, ), subject, learning, ,,  , compute, non, -, linear, input, –, output, mappings, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('deep', 'ADV'), ('-', 'PUNCT'), ('learning', 'VERB'), ('architecture', 'NOUN'), ('multilayer', 'ADJ'), ('stack', 'NOUN'), ('simple', 'ADJ'), ('mod-', 'ADJ'), ('ules', 'NOUN'), (',', 'PUNCT'), ('(', 'PUNCT'), (')', 'PUNCT'), ('subject', 'ADJ'), ('learning', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('compute', 'VERB'), ('non', 'ADJ'), ('-', 'ADJ'), ('linear', 'ADJ'), ('input', 'NOUN'), ('–', 'PUNCT'), ('output', 'NOUN'), ('mappings', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'nmod'), ('deep', 'advmod'), ('-', 'punct'), ('learning', 'amod'), ('architecture', 'nsubj'), ('multilayer', 'amod'), ('stack', 'attr'), ('simple', 'amod'), ('mod-', 'amod'), ('ules', 'pobj'), (',', 'punct'), ('(', 'punct'), (')', 'punct'), ('subject', 'acomp'), ('learning', 'pobj'), (',', 'punct'), (' ', 'nsubj'), ('compute', 'relcl'), ('non', 'amod'), ('-', 'amod'), ('linear', 'amod'), ('input', 'dobj'), ('–', 'punct'), ('output', 'compound'), ('mappings', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[  , deep], [deep, -], [-, learning], [learning, architecture], [architecture, multilayer], [multilayer, stack], [stack, simple], [simple, mod-], [mod-, ules], [ules, ,], [,, (], [(, )], [), subject], [subject, learning], [learning, ,], [,,  ], [ , compute], [compute, non], [non, -], [-, linear], [linear, input], [input, –], [–, output], [output, mappings], [mappings, .]]

>> Trigrams: 
[[  , deep, -], [deep, -, learning], [-, learning, architecture], [learning, architecture, multilayer], [architecture, multilayer, stack], [multilayer, stack, simple], [stack, simple, mod-], [simple, mod-, ules], [mod-, ules, ,], [ules, ,, (], [,, (, )], [(, ), subject], [), subject, learning], [subject, learning, ,], [learning, ,,  ], [,,  , compute], [ , compute, non], [compute, non, -], [non, -, linear], [-, linear, input], [linear, input, –], [input, –, output], [–, output, mappings], [output, mappings, .]]

>> Noun Phrases are: 
[  A deep-learning architecture, a multilayer stack, simple mod- ules, learning, non-linear input]

>> Named Entities are: 
[]


============================ Sentence 128 =============================

Each module in the  stack transforms its input to increase both the selectivity and the  invariance of the representation. 


>> Tokens are: 
[module,  , stack, transforms, input, increase, selectivity,  , invariance, representation, .] 

>> PoS Tags are: 
[('module', 'NOUN'), (' ', 'SPACE'), ('stack', 'NOUN'), ('transforms', 'VERB'), ('input', 'NOUN'), ('increase', 'VERB'), ('selectivity', 'NOUN'), (' ', 'SPACE'), ('invariance', 'NOUN'), ('representation', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('module', 'nsubj'), (' ', 'compound'), ('stack', 'pobj'), ('transforms', 'ROOT'), ('input', 'dobj'), ('increase', 'advcl'), ('selectivity', 'dobj'), (' ', 'compound'), ('invariance', 'conj'), ('representation', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[module,  ], [ , stack], [stack, transforms], [transforms, input], [input, increase], [increase, selectivity], [selectivity,  ], [ , invariance], [invariance, representation], [representation, .]]

>> Trigrams: 
[[module,  , stack], [ , stack, transforms], [stack, transforms, input], [transforms, input, increase], [input, increase, selectivity], [increase, selectivity,  ], [selectivity,  , invariance], [ , invariance, representation], [invariance, representation, .]]

>> Noun Phrases are: 
[Each module, the  stack, its input, both the selectivity, the  invariance, the representation]

>> Named Entities are: 
[]


============================ Sentence 129 =============================

With multiple non-linear layers, say  a depth of 5 to 20, a system can implement extremely intricate func- tions of its inputs that are simultaneously sensitive to minute details  — distinguishing Samoyeds from white wolves — and insensitive to  large irrelevant variations such as the background, pose, lighting and  surrounding objects. 


>> Tokens are: 
[multiple, non, -, linear, layers, ,,  , depth, 5, 20, ,, system, implement, extremely, intricate, func-, tions, inputs, simultaneously, sensitive, minute, details,  , —, distinguishing, Samoyeds, white, wolves, —, insensitive,  , large, irrelevant, variations, background, ,, pose, ,, lighting,  , surrounding, objects, .] 

>> PoS Tags are: 
[('multiple', 'ADJ'), ('non', 'ADJ'), ('-', 'ADJ'), ('linear', 'ADJ'), ('layers', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('depth', 'NOUN'), ('5', 'NUM'), ('20', 'NUM'), (',', 'PUNCT'), ('system', 'NOUN'), ('implement', 'VERB'), ('extremely', 'ADV'), ('intricate', 'ADJ'), ('func-', 'ADJ'), ('tions', 'NOUN'), ('inputs', 'NOUN'), ('simultaneously', 'ADV'), ('sensitive', 'ADJ'), ('minute', 'VERB'), ('details', 'NOUN'), (' ', 'SPACE'), ('—', 'PUNCT'), ('distinguishing', 'VERB'), ('Samoyeds', 'NOUN'), ('white', 'ADJ'), ('wolves', 'NOUN'), ('—', 'PUNCT'), ('insensitive', 'ADJ'), (' ', 'SPACE'), ('large', 'ADJ'), ('irrelevant', 'ADJ'), ('variations', 'NOUN'), ('background', 'NOUN'), (',', 'PUNCT'), ('pose', 'VERB'), (',', 'PUNCT'), ('lighting', 'NOUN'), (' ', 'SPACE'), ('surrounding', 'VERB'), ('objects', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('multiple', 'amod'), ('non', 'amod'), ('-', 'amod'), ('linear', 'amod'), ('layers', 'pobj'), (',', 'punct'), (' ', 'nsubj'), ('depth', 'dobj'), ('5', 'quantmod'), ('20', 'pobj'), (',', 'punct'), ('system', 'nsubj'), ('implement', 'ROOT'), ('extremely', 'advmod'), ('intricate', 'amod'), ('func-', 'amod'), ('tions', 'dobj'), ('inputs', 'pobj'), ('simultaneously', 'advmod'), ('sensitive', 'acomp'), ('minute', 'compound'), ('details', 'dobj'), (' ', 'pobj'), ('—', 'punct'), ('distinguishing', 'advcl'), ('Samoyeds', 'dobj'), ('white', 'amod'), ('wolves', 'pobj'), ('—', 'punct'), ('insensitive', 'conj'), (' ', 'pobj'), ('large', 'amod'), ('irrelevant', 'amod'), ('variations', 'dobj'), ('background', 'pobj'), (',', 'punct'), ('pose', 'conj'), (',', 'punct'), ('lighting', 'conj'), (' ', 'nmod'), ('surrounding', 'amod'), ('objects', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[multiple, non], [non, -], [-, linear], [linear, layers], [layers, ,], [,,  ], [ , depth], [depth, 5], [5, 20], [20, ,], [,, system], [system, implement], [implement, extremely], [extremely, intricate], [intricate, func-], [func-, tions], [tions, inputs], [inputs, simultaneously], [simultaneously, sensitive], [sensitive, minute], [minute, details], [details,  ], [ , —], [—, distinguishing], [distinguishing, Samoyeds], [Samoyeds, white], [white, wolves], [wolves, —], [—, insensitive], [insensitive,  ], [ , large], [large, irrelevant], [irrelevant, variations], [variations, background], [background, ,], [,, pose], [pose, ,], [,, lighting], [lighting,  ], [ , surrounding], [surrounding, objects], [objects, .]]

>> Trigrams: 
[[multiple, non, -], [non, -, linear], [-, linear, layers], [linear, layers, ,], [layers, ,,  ], [,,  , depth], [ , depth, 5], [depth, 5, 20], [5, 20, ,], [20, ,, system], [,, system, implement], [system, implement, extremely], [implement, extremely, intricate], [extremely, intricate, func-], [intricate, func-, tions], [func-, tions, inputs], [tions, inputs, simultaneously], [inputs, simultaneously, sensitive], [simultaneously, sensitive, minute], [sensitive, minute, details], [minute, details,  ], [details,  , —], [ , —, distinguishing], [—, distinguishing, Samoyeds], [distinguishing, Samoyeds, white], [Samoyeds, white, wolves], [white, wolves, —], [wolves, —, insensitive], [—, insensitive,  ], [insensitive,  , large], [ , large, irrelevant], [large, irrelevant, variations], [irrelevant, variations, background], [variations, background, ,], [background, ,, pose], [,, pose, ,], [pose, ,, lighting], [,, lighting,  ], [lighting,  , surrounding], [ , surrounding, objects], [surrounding, objects, .]]

>> Noun Phrases are: 
[multiple non-linear layers, a depth, a system, extremely intricate func- tions, its inputs, details, Samoyeds, white wolves, large irrelevant variations, the background, lighting,  surrounding objects]

>> Named Entities are: 
[('5 to 20', 'CARDINAL')]


============================ Sentence 130 =============================

  Backpropagation to train multilayer architectures  From the earliest days of pattern recognition22,23, the aim of research- ers has been to replace hand-engineered features with trainable  multilayer networks, but despite its simplicity, the solution was not  widely understood until the mid 1980s. 


>> Tokens are: 
[  , Backpropagation, train, multilayer, architectures,  , earliest, days, pattern, recognition22,23, ,, aim, research-, ers, replace, hand, -, engineered, features, trainable,  , multilayer, networks, ,, despite, simplicity, ,, solution,  , widely, understood, mid, 1980s, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('Backpropagation', 'PROPN'), ('train', 'VERB'), ('multilayer', 'NOUN'), ('architectures', 'NOUN'), (' ', 'SPACE'), ('earliest', 'ADJ'), ('days', 'NOUN'), ('pattern', 'NOUN'), ('recognition22,23', 'NOUN'), (',', 'PUNCT'), ('aim', 'NOUN'), ('research-', 'NOUN'), ('ers', 'NOUN'), ('replace', 'VERB'), ('hand', 'NOUN'), ('-', 'PUNCT'), ('engineered', 'VERB'), ('features', 'NOUN'), ('trainable', 'ADJ'), (' ', 'SPACE'), ('multilayer', 'ADJ'), ('networks', 'NOUN'), (',', 'PUNCT'), ('despite', 'SCONJ'), ('simplicity', 'NOUN'), (',', 'PUNCT'), ('solution', 'NOUN'), (' ', 'SPACE'), ('widely', 'ADV'), ('understood', 'VERB'), ('mid', 'ADJ'), ('1980s', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'compound'), ('Backpropagation', 'nsubj'), ('train', 'advcl'), ('multilayer', 'compound'), ('architectures', 'dobj'), (' ', 'dobj'), ('earliest', 'amod'), ('days', 'pobj'), ('pattern', 'compound'), ('recognition22,23', 'pobj'), (',', 'punct'), ('aim', 'nsubj'), ('research-', 'compound'), ('ers', 'pobj'), ('replace', 'xcomp'), ('hand', 'npadvmod'), ('-', 'punct'), ('engineered', 'amod'), ('features', 'dobj'), ('trainable', 'amod'), (' ', 'nmod'), ('multilayer', 'compound'), ('networks', 'pobj'), (',', 'punct'), ('despite', 'prep'), ('simplicity', 'pobj'), (',', 'punct'), ('solution', 'nsubj'), (' ', 'nsubj'), ('widely', 'advmod'), ('understood', 'conj'), ('mid', 'amod'), ('1980s', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[  , Backpropagation], [Backpropagation, train], [train, multilayer], [multilayer, architectures], [architectures,  ], [ , earliest], [earliest, days], [days, pattern], [pattern, recognition22,23], [recognition22,23, ,], [,, aim], [aim, research-], [research-, ers], [ers, replace], [replace, hand], [hand, -], [-, engineered], [engineered, features], [features, trainable], [trainable,  ], [ , multilayer], [multilayer, networks], [networks, ,], [,, despite], [despite, simplicity], [simplicity, ,], [,, solution], [solution,  ], [ , widely], [widely, understood], [understood, mid], [mid, 1980s], [1980s, .]]

>> Trigrams: 
[[  , Backpropagation, train], [Backpropagation, train, multilayer], [train, multilayer, architectures], [multilayer, architectures,  ], [architectures,  , earliest], [ , earliest, days], [earliest, days, pattern], [days, pattern, recognition22,23], [pattern, recognition22,23, ,], [recognition22,23, ,, aim], [,, aim, research-], [aim, research-, ers], [research-, ers, replace], [ers, replace, hand], [replace, hand, -], [hand, -, engineered], [-, engineered, features], [engineered, features, trainable], [features, trainable,  ], [trainable,  , multilayer], [ , multilayer, networks], [multilayer, networks, ,], [networks, ,, despite], [,, despite, simplicity], [despite, simplicity, ,], [simplicity, ,, solution], [,, solution,  ], [solution,  , widely], [ , widely, understood], [widely, understood, mid], [understood, mid, 1980s], [mid, 1980s, .]]

>> Noun Phrases are: 
[  Backpropagation, multilayer architectures, the earliest days, pattern recognition22,23, the aim, research- ers, hand-engineered features, trainable  multilayer networks, its simplicity, the solution, the mid 1980s]

>> Named Entities are: 
[('the mid 1980s', 'DATE')]


============================ Sentence 131 =============================

As it turns out, multilayer  architectures can be trained by simple stochastic gradient descent. 


>> Tokens are: 
[turns, ,, multilayer,  , architectures, trained, simple, stochastic, gradient, descent, .] 

>> PoS Tags are: 
[('turns', 'VERB'), (',', 'PUNCT'), ('multilayer', 'NOUN'), (' ', 'SPACE'), ('architectures', 'NOUN'), ('trained', 'VERB'), ('simple', 'ADJ'), ('stochastic', 'ADJ'), ('gradient', 'NOUN'), ('descent', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('turns', 'advcl'), (',', 'punct'), ('multilayer', 'nmod'), (' ', 'nummod'), ('architectures', 'nsubjpass'), ('trained', 'ROOT'), ('simple', 'amod'), ('stochastic', 'amod'), ('gradient', 'compound'), ('descent', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[turns, ,], [,, multilayer], [multilayer,  ], [ , architectures], [architectures, trained], [trained, simple], [simple, stochastic], [stochastic, gradient], [gradient, descent], [descent, .]]

>> Trigrams: 
[[turns, ,, multilayer], [,, multilayer,  ], [multilayer,  , architectures], [ , architectures, trained], [architectures, trained, simple], [trained, simple, stochastic], [simple, stochastic, gradient], [stochastic, gradient, descent], [gradient, descent, .]]

>> Noun Phrases are: 
[it, multilayer  architectures, simple stochastic gradient descent]

>> Named Entities are: 
[]


============================ Sentence 132 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 133 =============================

As long as the modules are relatively smooth functions of their inputs  and of their internal weights, one can compute gradients using the  backpropagation procedure. 


>> Tokens are: 
[long, modules, relatively, smooth, functions, inputs,  , internal, weights, ,, compute, gradients,  , backpropagation, procedure, .] 

>> PoS Tags are: 
[('long', 'ADV'), ('modules', 'NOUN'), ('relatively', 'ADV'), ('smooth', 'ADJ'), ('functions', 'NOUN'), ('inputs', 'NOUN'), (' ', 'SPACE'), ('internal', 'ADJ'), ('weights', 'NOUN'), (',', 'PUNCT'), ('compute', 'VERB'), ('gradients', 'NOUN'), (' ', 'SPACE'), ('backpropagation', 'NOUN'), ('procedure', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('long', 'advmod'), ('modules', 'nsubj'), ('relatively', 'advmod'), ('smooth', 'amod'), ('functions', 'attr'), ('inputs', 'pobj'), (' ', 'appos'), ('internal', 'amod'), ('weights', 'pobj'), (',', 'punct'), ('compute', 'ROOT'), ('gradients', 'dobj'), (' ', 'compound'), ('backpropagation', 'compound'), ('procedure', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[long, modules], [modules, relatively], [relatively, smooth], [smooth, functions], [functions, inputs], [inputs,  ], [ , internal], [internal, weights], [weights, ,], [,, compute], [compute, gradients], [gradients,  ], [ , backpropagation], [backpropagation, procedure], [procedure, .]]

>> Trigrams: 
[[long, modules, relatively], [modules, relatively, smooth], [relatively, smooth, functions], [smooth, functions, inputs], [functions, inputs,  ], [inputs,  , internal], [ , internal, weights], [internal, weights, ,], [weights, ,, compute], [,, compute, gradients], [compute, gradients,  ], [gradients,  , backpropagation], [ , backpropagation, procedure], [backpropagation, procedure, .]]

>> Noun Phrases are: 
[the modules, relatively smooth functions, their inputs, their internal weights, one, gradients, the  backpropagation procedure]

>> Named Entities are: 
[]


============================ Sentence 134 =============================

The idea that this could be done, and  that it worked, was discovered independently by several different  groups during the 1970s and 1980s24–27. 


>> Tokens are: 
[idea, ,,  , worked, ,, discovered, independently, different,  , groups, 1970s, 1980s24–27, .] 

>> PoS Tags are: 
[('idea', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('worked', 'VERB'), (',', 'PUNCT'), ('discovered', 'VERB'), ('independently', 'ADV'), ('different', 'ADJ'), (' ', 'SPACE'), ('groups', 'NOUN'), ('1970s', 'NOUN'), ('1980s24–27', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('idea', 'nsubjpass'), (',', 'punct'), (' ', 'conj'), ('worked', 'acl'), (',', 'punct'), ('discovered', 'ROOT'), ('independently', 'advmod'), ('different', 'amod'), (' ', 'compound'), ('groups', 'pobj'), ('1970s', 'pobj'), ('1980s24–27', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[idea, ,], [,,  ], [ , worked], [worked, ,], [,, discovered], [discovered, independently], [independently, different], [different,  ], [ , groups], [groups, 1970s], [1970s, 1980s24–27], [1980s24–27, .]]

>> Trigrams: 
[[idea, ,,  ], [,,  , worked], [ , worked, ,], [worked, ,, discovered], [,, discovered, independently], [discovered, independently, different], [independently, different,  ], [different,  , groups], [ , groups, 1970s], [groups, 1970s, 1980s24–27], [1970s, 1980s24–27, .]]

>> Noun Phrases are: 
[The idea, it, several different  groups, the 1970s]

>> Named Entities are: 
[('the 1970s', 'DATE'), ('1980s24–27', 'DATE')]


============================ Sentence 135 =============================

    


>> Tokens are: 
[   ] 

>> PoS Tags are: 
[('   ', 'SPACE')] 

>> Dependency Tags are: 
[('   ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 136 =============================

The backpropagation procedure to compute the gradient of an  objective function with respect to the weights of a multilayer stack  of modules is nothing more than a practical application of the chain   rule for derivatives. 


>> Tokens are: 
[backpropagation, procedure, compute, gradient,  , objective, function, respect, weights, multilayer, stack,  , modules, practical, application, chain,   , rule, derivatives, .] 

>> PoS Tags are: 
[('backpropagation', 'NOUN'), ('procedure', 'NOUN'), ('compute', 'VERB'), ('gradient', 'NOUN'), (' ', 'SPACE'), ('objective', 'ADJ'), ('function', 'NOUN'), ('respect', 'NOUN'), ('weights', 'NOUN'), ('multilayer', 'ADJ'), ('stack', 'NOUN'), (' ', 'SPACE'), ('modules', 'NOUN'), ('practical', 'ADJ'), ('application', 'NOUN'), ('chain', 'NOUN'), ('  ', 'SPACE'), ('rule', 'NOUN'), ('derivatives', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('backpropagation', 'compound'), ('procedure', 'nsubj'), ('compute', 'relcl'), ('gradient', 'dobj'), (' ', 'nmod'), ('objective', 'amod'), ('function', 'pobj'), ('respect', 'pobj'), ('weights', 'pobj'), ('multilayer', 'amod'), ('stack', 'pobj'), (' ', 'appos'), ('modules', 'pobj'), ('practical', 'amod'), ('application', 'pobj'), ('chain', 'pobj'), ('  ', 'nsubj'), ('rule', 'attr'), ('derivatives', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[backpropagation, procedure], [procedure, compute], [compute, gradient], [gradient,  ], [ , objective], [objective, function], [function, respect], [respect, weights], [weights, multilayer], [multilayer, stack], [stack,  ], [ , modules], [modules, practical], [practical, application], [application, chain], [chain,   ], [  , rule], [rule, derivatives], [derivatives, .]]

>> Trigrams: 
[[backpropagation, procedure, compute], [procedure, compute, gradient], [compute, gradient,  ], [gradient,  , objective], [ , objective, function], [objective, function, respect], [function, respect, weights], [respect, weights, multilayer], [weights, multilayer, stack], [multilayer, stack,  ], [stack,  , modules], [ , modules, practical], [modules, practical, application], [practical, application, chain], [application, chain,   ], [chain,   , rule], [  , rule, derivatives], [rule, derivatives, .]]

>> Noun Phrases are: 
[The backpropagation procedure, the gradient, an  objective function, respect, the weights, a multilayer stack, modules, nothing, a practical application, the chain,   rule, derivatives]

>> Named Entities are: 
[]


============================ Sentence 137 =============================

The key insight is that the derivative (or gradi- ent) of the objective with respect to the input of a module can be  computed by working backwards from the gradient with respect to  the output of that module (or the input of the subsequent module)   


>> Tokens are: 
[key, insight, derivative, (, gradi-, ent, ), objective, respect, input, module,  , computed, working, backwards, gradient, respect,  , output, module, (, input, subsequent, module, ),  ] 

>> PoS Tags are: 
[('key', 'ADJ'), ('insight', 'NOUN'), ('derivative', 'NOUN'), ('(', 'PUNCT'), ('gradi-', 'ADJ'), ('ent', 'NOUN'), (')', 'PUNCT'), ('objective', 'NOUN'), ('respect', 'NOUN'), ('input', 'NOUN'), ('module', 'NOUN'), (' ', 'SPACE'), ('computed', 'VERB'), ('working', 'VERB'), ('backwards', 'ADV'), ('gradient', 'NOUN'), ('respect', 'NOUN'), (' ', 'SPACE'), ('output', 'NOUN'), ('module', 'NOUN'), ('(', 'PUNCT'), ('input', 'NOUN'), ('subsequent', 'ADJ'), ('module', 'NOUN'), (')', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('key', 'amod'), ('insight', 'nsubj'), ('derivative', 'nsubjpass'), ('(', 'punct'), ('gradi-', 'compound'), ('ent', 'conj'), (')', 'punct'), ('objective', 'pobj'), ('respect', 'pobj'), ('input', 'pobj'), ('module', 'pobj'), (' ', 'nsubjpass'), ('computed', 'ccomp'), ('working', 'pcomp'), ('backwards', 'advmod'), ('gradient', 'pobj'), ('respect', 'pobj'), (' ', 'pobj'), ('output', 'dobj'), ('module', 'pobj'), ('(', 'punct'), ('input', 'conj'), ('subsequent', 'amod'), ('module', 'pobj'), (')', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[key, insight], [insight, derivative], [derivative, (], [(, gradi-], [gradi-, ent], [ent, )], [), objective], [objective, respect], [respect, input], [input, module], [module,  ], [ , computed], [computed, working], [working, backwards], [backwards, gradient], [gradient, respect], [respect,  ], [ , output], [output, module], [module, (], [(, input], [input, subsequent], [subsequent, module], [module, )], [),  ]]

>> Trigrams: 
[[key, insight, derivative], [insight, derivative, (], [derivative, (, gradi-], [(, gradi-, ent], [gradi-, ent, )], [ent, ), objective], [), objective, respect], [objective, respect, input], [respect, input, module], [input, module,  ], [module,  , computed], [ , computed, working], [computed, working, backwards], [working, backwards, gradient], [backwards, gradient, respect], [gradient, respect,  ], [respect,  , output], [ , output, module], [output, module, (], [module, (, input], [(, input, subsequent], [input, subsequent, module], [subsequent, module, )], [module, ),  ]]

>> Noun Phrases are: 
[The key insight, the derivative, gradi- ent, the objective, respect, the input, a module, the gradient, respect, the output, that module, the input, the subsequent module]

>> Named Entities are: 
[]


============================ Sentence 138 =============================

(Fig. 


>> Tokens are: 
[(, Fig, .] 

>> PoS Tags are: 
[('(', 'PUNCT'), ('Fig', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('(', 'punct'), ('Fig', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[(, Fig], [Fig, .]]

>> Trigrams: 
[[(, Fig, .]]

>> Noun Phrases are: 
[(Fig]

>> Named Entities are: 
[('Fig', 'PERSON')]


============================ Sentence 139 =============================

 1). 


>> Tokens are: 
[ , 1, ), .] 

>> PoS Tags are: 
[('\xa0', 'SPACE'), ('1', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\xa0', 'ROOT'), ('1', 'nummod'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[ , 1], [1, )], [), .]]

>> Trigrams: 
[[ , 1, )], [1, ), .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 140 =============================

The backpropagation equation can be applied repeatedly to  propagate gradients through all modules, starting from the output  at the top (where the network produces its prediction) all the way to  the bottom (where the external input is fed). 


>> Tokens are: 
[backpropagation, equation, applied, repeatedly,  , propagate, gradients, modules, ,, starting, output,  , (, network, produces, prediction, ), way,  , (, external, input, fed, ), .] 

>> PoS Tags are: 
[('backpropagation', 'NOUN'), ('equation', 'NOUN'), ('applied', 'VERB'), ('repeatedly', 'ADV'), (' ', 'SPACE'), ('propagate', 'ADJ'), ('gradients', 'NOUN'), ('modules', 'NOUN'), (',', 'PUNCT'), ('starting', 'VERB'), ('output', 'NOUN'), (' ', 'SPACE'), ('(', 'PUNCT'), ('network', 'NOUN'), ('produces', 'VERB'), ('prediction', 'NOUN'), (')', 'PUNCT'), ('way', 'NOUN'), (' ', 'SPACE'), ('(', 'PUNCT'), ('external', 'ADJ'), ('input', 'NOUN'), ('fed', 'VERB'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('backpropagation', 'compound'), ('equation', 'nsubjpass'), ('applied', 'ROOT'), ('repeatedly', 'advmod'), (' ', 'pobj'), ('propagate', 'amod'), ('gradients', 'dobj'), ('modules', 'pobj'), (',', 'punct'), ('starting', 'advcl'), ('output', 'pobj'), (' ', 'appos'), ('(', 'punct'), ('network', 'nsubj'), ('produces', 'relcl'), ('prediction', 'dobj'), (')', 'punct'), ('way', 'npadvmod'), (' ', 'pobj'), ('(', 'punct'), ('external', 'amod'), ('input', 'nsubjpass'), ('fed', 'relcl'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[backpropagation, equation], [equation, applied], [applied, repeatedly], [repeatedly,  ], [ , propagate], [propagate, gradients], [gradients, modules], [modules, ,], [,, starting], [starting, output], [output,  ], [ , (], [(, network], [network, produces], [produces, prediction], [prediction, )], [), way], [way,  ], [ , (], [(, external], [external, input], [input, fed], [fed, )], [), .]]

>> Trigrams: 
[[backpropagation, equation, applied], [equation, applied, repeatedly], [applied, repeatedly,  ], [repeatedly,  , propagate], [ , propagate, gradients], [propagate, gradients, modules], [gradients, modules, ,], [modules, ,, starting], [,, starting, output], [starting, output,  ], [output,  , (], [ , (, network], [(, network, produces], [network, produces, prediction], [produces, prediction, )], [prediction, ), way], [), way,  ], [way,  , (], [ , (, external], [(, external, input], [external, input, fed], [input, fed, )], [fed, ), .]]

>> Noun Phrases are: 
[The backpropagation equation, propagate gradients, all modules, the output, the top, the network, its prediction, the bottom, the external input]

>> Named Entities are: 
[]


============================ Sentence 141 =============================

Once these gradients  have been computed, it is straightforward to compute the gradients  with respect to the weights of each module. 


>> Tokens are: 
[gradients,  , computed, ,, straightforward, compute, gradients,  , respect, weights, module, .] 

>> PoS Tags are: 
[('gradients', 'NOUN'), (' ', 'SPACE'), ('computed', 'VERB'), (',', 'PUNCT'), ('straightforward', 'ADJ'), ('compute', 'VERB'), ('gradients', 'NOUN'), (' ', 'SPACE'), ('respect', 'NOUN'), ('weights', 'NOUN'), ('module', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('gradients', 'nsubjpass'), (' ', 'nsubjpass'), ('computed', 'advcl'), (',', 'punct'), ('straightforward', 'acomp'), ('compute', 'xcomp'), ('gradients', 'dobj'), (' ', 'appos'), ('respect', 'pobj'), ('weights', 'pobj'), ('module', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[gradients,  ], [ , computed], [computed, ,], [,, straightforward], [straightforward, compute], [compute, gradients], [gradients,  ], [ , respect], [respect, weights], [weights, module], [module, .]]

>> Trigrams: 
[[gradients,  , computed], [ , computed, ,], [computed, ,, straightforward], [,, straightforward, compute], [straightforward, compute, gradients], [compute, gradients,  ], [gradients,  , respect], [ , respect, weights], [respect, weights, module], [weights, module, .]]

>> Noun Phrases are: 
[these gradients, it, the gradients, respect, the weights, each module]

>> Named Entities are: 
[]


============================ Sentence 142 =============================

  Many applications of deep learning use feedforward neural net- work architectures (Fig. 1), which learn to map a fixed-size input  (for example, an image) to a fixed-size output (for example, a prob- ability for each of several categories). 


>> Tokens are: 
[  , applications, deep, learning, use, feedforward, neural, net-, work, architectures, (, Fig, ., 1, ), ,, learn, map, fixed, -, size, input,  , (, example, ,, image, ), fixed, -, size, output, (, example, ,, prob-, ability, categories, ), .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('applications', 'NOUN'), ('deep', 'ADJ'), ('learning', 'NOUN'), ('use', 'NOUN'), ('feedforward', 'NOUN'), ('neural', 'ADJ'), ('net-', 'ADJ'), ('work', 'NOUN'), ('architectures', 'NOUN'), ('(', 'PUNCT'), ('Fig', 'PROPN'), ('.', 'PUNCT'), ('1', 'NUM'), (')', 'PUNCT'), (',', 'PUNCT'), ('learn', 'VERB'), ('map', 'VERB'), ('fixed', 'VERB'), ('-', 'PUNCT'), ('size', 'NOUN'), ('input', 'NOUN'), (' ', 'SPACE'), ('(', 'PUNCT'), ('example', 'NOUN'), (',', 'PUNCT'), ('image', 'NOUN'), (')', 'PUNCT'), ('fixed', 'VERB'), ('-', 'PUNCT'), ('size', 'NOUN'), ('output', 'NOUN'), ('(', 'PUNCT'), ('example', 'NOUN'), (',', 'PUNCT'), ('prob-', 'NOUN'), ('ability', 'NOUN'), ('categories', 'NOUN'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'nmod'), ('applications', 'nsubj'), ('deep', 'amod'), ('learning', 'pobj'), ('use', 'ROOT'), ('feedforward', 'amod'), ('neural', 'amod'), ('net-', 'amod'), ('work', 'compound'), ('architectures', 'dobj'), ('(', 'punct'), ('Fig', 'appos'), ('.', 'punct'), ('1', 'nummod'), (')', 'punct'), (',', 'punct'), ('learn', 'advcl'), ('map', 'xcomp'), ('fixed', 'amod'), ('-', 'punct'), ('size', 'compound'), ('input', 'dobj'), (' ', 'appos'), ('(', 'punct'), ('example', 'pobj'), (',', 'punct'), ('image', 'pobj'), (')', 'punct'), ('fixed', 'amod'), ('-', 'punct'), ('size', 'compound'), ('output', 'pobj'), ('(', 'punct'), ('example', 'pobj'), (',', 'punct'), ('prob-', 'amod'), ('ability', 'appos'), ('categories', 'pobj'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[  , applications], [applications, deep], [deep, learning], [learning, use], [use, feedforward], [feedforward, neural], [neural, net-], [net-, work], [work, architectures], [architectures, (], [(, Fig], [Fig, .], [., 1], [1, )], [), ,], [,, learn], [learn, map], [map, fixed], [fixed, -], [-, size], [size, input], [input,  ], [ , (], [(, example], [example, ,], [,, image], [image, )], [), fixed], [fixed, -], [-, size], [size, output], [output, (], [(, example], [example, ,], [,, prob-], [prob-, ability], [ability, categories], [categories, )], [), .]]

>> Trigrams: 
[[  , applications, deep], [applications, deep, learning], [deep, learning, use], [learning, use, feedforward], [use, feedforward, neural], [feedforward, neural, net-], [neural, net-, work], [net-, work, architectures], [work, architectures, (], [architectures, (, Fig], [(, Fig, .], [Fig, ., 1], [., 1, )], [1, ), ,], [), ,, learn], [,, learn, map], [learn, map, fixed], [map, fixed, -], [fixed, -, size], [-, size, input], [size, input,  ], [input,  , (], [ , (, example], [(, example, ,], [example, ,, image], [,, image, )], [image, ), fixed], [), fixed, -], [fixed, -, size], [-, size, output], [size, output, (], [output, (, example], [(, example, ,], [example, ,, prob-], [,, prob-, ability], [prob-, ability, categories], [ability, categories, )], [categories, ), .]]

>> Noun Phrases are: 
[  Many applications, deep learning, feedforward neural net- work architectures, Fig, a fixed-size input, example, an image, a fixed-size output, example, a prob- ability, several categories]

>> Named Entities are: 
[('Fig', 'ORG'), ('1', 'CARDINAL')]


============================ Sentence 143 =============================

To go from one layer to the  next, a set of units compute a weighted sum of their inputs from the  previous layer and pass the result through a non-linear function. 


>> Tokens are: 
[layer,  , ,, set, units, compute, weighted, sum, inputs,  , previous, layer, pass, result, non, -, linear, function, .] 

>> PoS Tags are: 
[('layer', 'NOUN'), (' ', 'SPACE'), (',', 'PUNCT'), ('set', 'NOUN'), ('units', 'NOUN'), ('compute', 'VERB'), ('weighted', 'ADJ'), ('sum', 'NOUN'), ('inputs', 'NOUN'), (' ', 'SPACE'), ('previous', 'ADJ'), ('layer', 'NOUN'), ('pass', 'VERB'), ('result', 'NOUN'), ('non', 'ADJ'), ('-', 'ADJ'), ('linear', 'ADJ'), ('function', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('layer', 'pobj'), (' ', 'pobj'), (',', 'punct'), ('set', 'nsubj'), ('units', 'pobj'), ('compute', 'ROOT'), ('weighted', 'amod'), ('sum', 'dobj'), ('inputs', 'pobj'), (' ', 'nmod'), ('previous', 'amod'), ('layer', 'pobj'), ('pass', 'conj'), ('result', 'dobj'), ('non', 'amod'), ('-', 'amod'), ('linear', 'amod'), ('function', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[layer,  ], [ , ,], [,, set], [set, units], [units, compute], [compute, weighted], [weighted, sum], [sum, inputs], [inputs,  ], [ , previous], [previous, layer], [layer, pass], [pass, result], [result, non], [non, -], [-, linear], [linear, function], [function, .]]

>> Trigrams: 
[[layer,  , ,], [ , ,, set], [,, set, units], [set, units, compute], [units, compute, weighted], [compute, weighted, sum], [weighted, sum, inputs], [sum, inputs,  ], [inputs,  , previous], [ , previous, layer], [previous, layer, pass], [layer, pass, result], [pass, result, non], [result, non, -], [non, -, linear], [-, linear, function], [linear, function, .]]

>> Noun Phrases are: 
[one layer, a set, units, a weighted sum, their inputs, the  previous layer, the result, a non-linear function]

>> Named Entities are: 
[]


============================ Sentence 144 =============================

At  present, the most popular non-linear function is the rectified linear  unit (ReLU), which is simply the half-wave rectifier f(z) = max(z, 0). 


>> Tokens are: 
[ , present, ,, popular, non, -, linear, function, rectified, linear,  , unit, (, ReLU, ), ,, simply, half, -, wave, rectifier, f(z, ), =, max(z, ,, 0, ), .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('present', 'ADJ'), (',', 'PUNCT'), ('popular', 'ADJ'), ('non', 'ADJ'), ('-', 'ADJ'), ('linear', 'ADJ'), ('function', 'NOUN'), ('rectified', 'ADJ'), ('linear', 'ADJ'), (' ', 'SPACE'), ('unit', 'NOUN'), ('(', 'PUNCT'), ('ReLU', 'PROPN'), (')', 'PUNCT'), (',', 'PUNCT'), ('simply', 'ADV'), ('half', 'ADJ'), ('-', 'PUNCT'), ('wave', 'NOUN'), ('rectifier', 'ADJ'), ('f(z', 'PROPN'), (')', 'PUNCT'), ('=', 'PUNCT'), ('max(z', 'PROPN'), (',', 'PUNCT'), ('0', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'pobj'), ('present', 'amod'), (',', 'punct'), ('popular', 'amod'), ('non', 'amod'), ('-', 'amod'), ('linear', 'amod'), ('function', 'nsubj'), ('rectified', 'amod'), ('linear', 'amod'), (' ', 'compound'), ('unit', 'attr'), ('(', 'punct'), ('ReLU', 'appos'), (')', 'punct'), (',', 'punct'), ('simply', 'advmod'), ('half', 'amod'), ('-', 'punct'), ('wave', 'nmod'), ('rectifier', 'amod'), ('f(z', 'attr'), (')', 'punct'), ('=', 'appos'), ('max(z', 'appos'), (',', 'punct'), ('0', 'npadvmod'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[ , present], [present, ,], [,, popular], [popular, non], [non, -], [-, linear], [linear, function], [function, rectified], [rectified, linear], [linear,  ], [ , unit], [unit, (], [(, ReLU], [ReLU, )], [), ,], [,, simply], [simply, half], [half, -], [-, wave], [wave, rectifier], [rectifier, f(z], [f(z, )], [), =], [=, max(z], [max(z, ,], [,, 0], [0, )], [), .]]

>> Trigrams: 
[[ , present, ,], [present, ,, popular], [,, popular, non], [popular, non, -], [non, -, linear], [-, linear, function], [linear, function, rectified], [function, rectified, linear], [rectified, linear,  ], [linear,  , unit], [ , unit, (], [unit, (, ReLU], [(, ReLU, )], [ReLU, ), ,], [), ,, simply], [,, simply, half], [simply, half, -], [half, -, wave], [-, wave, rectifier], [wave, rectifier, f(z], [rectifier, f(z, )], [f(z, ), =], [), =, max(z], [=, max(z, ,], [max(z, ,, 0], [,, 0, )], [0, ), .]]

>> Noun Phrases are: 
[the most popular non-linear function, the rectified linear  unit, ReLU, the half-wave rectifier f(z, max(z]

>> Named Entities are: 
[('ReLU', 'ORG'), ('half', 'CARDINAL'), ('max(z', 'GPE')]


============================ Sentence 145 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 146 =============================

In past decades, neural nets used smoother non-linearities, such as  tanh(z) or 1/(1 + exp(−z)), but the ReLU typically learns much faster  in networks with many layers, allowing training of a deep supervised  network without unsupervised pre-training28. 


>> Tokens are: 
[past, decades, ,, neural, nets, smoother, non, -, linearities, ,,  , tanh(z, ), 1/(1, +, exp(−z, ), ), ,, ReLU, typically, learns, faster,  , networks, layers, ,, allowing, training, deep, supervised,  , network, unsupervised, pre, -, training28, .] 

>> PoS Tags are: 
[('past', 'ADJ'), ('decades', 'NOUN'), (',', 'PUNCT'), ('neural', 'ADJ'), ('nets', 'NOUN'), ('smoother', 'ADJ'), ('non', 'ADJ'), ('-', 'NOUN'), ('linearities', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('tanh(z', 'INTJ'), (')', 'PUNCT'), ('1/(1', 'NUM'), ('+', 'SYM'), ('exp(−z', 'NUM'), (')', 'PUNCT'), (')', 'PUNCT'), (',', 'PUNCT'), ('ReLU', 'PROPN'), ('typically', 'ADV'), ('learns', 'VERB'), ('faster', 'ADJ'), (' ', 'SPACE'), ('networks', 'NOUN'), ('layers', 'NOUN'), (',', 'PUNCT'), ('allowing', 'VERB'), ('training', 'NOUN'), ('deep', 'ADJ'), ('supervised', 'ADJ'), (' ', 'SPACE'), ('network', 'NOUN'), ('unsupervised', 'ADJ'), ('pre', 'ADJ'), ('-', 'NOUN'), ('training28', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('past', 'amod'), ('decades', 'pobj'), (',', 'punct'), ('neural', 'amod'), ('nets', 'nsubj'), ('smoother', 'amod'), ('non', 'dobj'), ('-', 'dobj'), ('linearities', 'dobj'), (',', 'punct'), (' ', 'pobj'), ('tanh(z', 'appos'), (')', 'punct'), ('1/(1', 'conj'), ('+', 'prep'), ('exp(−z', 'dobj'), (')', 'punct'), (')', 'punct'), (',', 'punct'), ('ReLU', 'nsubj'), ('typically', 'advmod'), ('learns', 'conj'), ('faster', 'amod'), (' ', 'dobj'), ('networks', 'pobj'), ('layers', 'pobj'), (',', 'punct'), ('allowing', 'advcl'), ('training', 'dobj'), ('deep', 'advmod'), ('supervised', 'amod'), (' ', 'compound'), ('network', 'pobj'), ('unsupervised', 'amod'), ('pre', 'pobj'), ('-', 'pobj'), ('training28', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[past, decades], [decades, ,], [,, neural], [neural, nets], [nets, smoother], [smoother, non], [non, -], [-, linearities], [linearities, ,], [,,  ], [ , tanh(z], [tanh(z, )], [), 1/(1], [1/(1, +], [+, exp(−z], [exp(−z, )], [), )], [), ,], [,, ReLU], [ReLU, typically], [typically, learns], [learns, faster], [faster,  ], [ , networks], [networks, layers], [layers, ,], [,, allowing], [allowing, training], [training, deep], [deep, supervised], [supervised,  ], [ , network], [network, unsupervised], [unsupervised, pre], [pre, -], [-, training28], [training28, .]]

>> Trigrams: 
[[past, decades, ,], [decades, ,, neural], [,, neural, nets], [neural, nets, smoother], [nets, smoother, non], [smoother, non, -], [non, -, linearities], [-, linearities, ,], [linearities, ,,  ], [,,  , tanh(z], [ , tanh(z, )], [tanh(z, ), 1/(1], [), 1/(1, +], [1/(1, +, exp(−z], [+, exp(−z, )], [exp(−z, ), )], [), ), ,], [), ,, ReLU], [,, ReLU, typically], [ReLU, typically, learns], [typically, learns, faster], [learns, faster,  ], [faster,  , networks], [ , networks, layers], [networks, layers, ,], [layers, ,, allowing], [,, allowing, training], [allowing, training, deep], [training, deep, supervised], [deep, supervised,  ], [supervised,  , network], [ , network, unsupervised], [network, unsupervised, pre], [unsupervised, pre, -], [pre, -, training28], [-, training28, .]]

>> Noun Phrases are: 
[past decades, neural nets, -, linearities, the ReLU, networks, many layers, training, a deep supervised  network, -]

>> Named Entities are: 
[('past decades', 'DATE'), ('1/(1', 'CARDINAL'), ('ReLU', 'LOC')]


============================ Sentence 147 =============================

Units that are not in  the input or output layer are conventionally called hidden units. 


>> Tokens are: 
[Units,  , input, output, layer, conventionally, called, hidden, units, .] 

>> PoS Tags are: 
[('Units', 'NOUN'), (' ', 'SPACE'), ('input', 'NOUN'), ('output', 'NOUN'), ('layer', 'NOUN'), ('conventionally', 'ADV'), ('called', 'VERB'), ('hidden', 'VERB'), ('units', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Units', 'nsubjpass'), (' ', 'pobj'), ('input', 'attr'), ('output', 'compound'), ('layer', 'conj'), ('conventionally', 'advmod'), ('called', 'ROOT'), ('hidden', 'amod'), ('units', 'oprd'), ('.', 'punct')]

>> Bigrams: 
[[Units,  ], [ , input], [input, output], [output, layer], [layer, conventionally], [conventionally, called], [called, hidden], [hidden, units], [units, .]]

>> Trigrams: 
[[Units,  , input], [ , input, output], [input, output, layer], [output, layer, conventionally], [layer, conventionally, called], [conventionally, called, hidden], [called, hidden, units], [hidden, units, .]]

>> Noun Phrases are: 
[Units, the input, output layer, hidden units]

>> Named Entities are: 
[]


============================ Sentence 148 =============================

The  hidden layers can be seen as distorting the input in a non-linear way  so that categories become linearly separable by the last layer (Fig. 


>> Tokens are: 
[ , hidden, layers, seen, distorting, input, non, -, linear, way,  , categories, linearly, separable, layer, (, Fig, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('hidden', 'VERB'), ('layers', 'NOUN'), ('seen', 'VERB'), ('distorting', 'VERB'), ('input', 'NOUN'), ('non', 'ADJ'), ('-', 'ADJ'), ('linear', 'ADJ'), ('way', 'NOUN'), (' ', 'SPACE'), ('categories', 'NOUN'), ('linearly', 'ADV'), ('separable', 'ADJ'), ('layer', 'NOUN'), ('(', 'PUNCT'), ('Fig', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'nmod'), ('hidden', 'amod'), ('layers', 'nsubjpass'), ('seen', 'ROOT'), ('distorting', 'pcomp'), ('input', 'dobj'), ('non', 'amod'), ('-', 'amod'), ('linear', 'amod'), ('way', 'pobj'), (' ', 'punct'), ('categories', 'nsubj'), ('linearly', 'advmod'), ('separable', 'acomp'), ('layer', 'pobj'), ('(', 'punct'), ('Fig', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[ , hidden], [hidden, layers], [layers, seen], [seen, distorting], [distorting, input], [input, non], [non, -], [-, linear], [linear, way], [way,  ], [ , categories], [categories, linearly], [linearly, separable], [separable, layer], [layer, (], [(, Fig], [Fig, .]]

>> Trigrams: 
[[ , hidden, layers], [hidden, layers, seen], [layers, seen, distorting], [seen, distorting, input], [distorting, input, non], [input, non, -], [non, -, linear], [-, linear, way], [linear, way,  ], [way,  , categories], [ , categories, linearly], [categories, linearly, separable], [linearly, separable, layer], [separable, layer, (], [layer, (, Fig], [(, Fig, .]]

>> Noun Phrases are: 
[The  hidden layers, the input, a non-linear way, categories, the last layer, Fig]

>> Named Entities are: 
[('Fig', 'PERSON')]


============================ Sentence 149 =============================

 1). 


>> Tokens are: 
[ , 1, ), .] 

>> PoS Tags are: 
[('\xa0', 'SPACE'), ('1', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\xa0', 'ROOT'), ('1', 'nummod'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[ , 1], [1, )], [), .]]

>> Trigrams: 
[[ , 1, )], [1, ), .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 150 =============================

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 151 =============================

In the late 1990s, neural nets and backpropagation were largely  forsaken by the machine-learning community and ignored by the  computer-vision and speech-recognition communities. 


>> Tokens are: 
[late, 1990s, ,, neural, nets, backpropagation, largely,  , forsaken, machine, -, learning, community, ignored,  , computer, -, vision, speech, -, recognition, communities, .] 

>> PoS Tags are: 
[('late', 'ADJ'), ('1990s', 'NOUN'), (',', 'PUNCT'), ('neural', 'ADJ'), ('nets', 'NOUN'), ('backpropagation', 'NOUN'), ('largely', 'ADV'), (' ', 'SPACE'), ('forsaken', 'VERB'), ('machine', 'NOUN'), ('-', 'PUNCT'), ('learning', 'VERB'), ('community', 'NOUN'), ('ignored', 'VERB'), (' ', 'SPACE'), ('computer', 'NOUN'), ('-', 'PUNCT'), ('vision', 'NOUN'), ('speech', 'NOUN'), ('-', 'PUNCT'), ('recognition', 'NOUN'), ('communities', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('late', 'amod'), ('1990s', 'pobj'), (',', 'punct'), ('neural', 'amod'), ('nets', 'nsubj'), ('backpropagation', 'conj'), ('largely', 'advmod'), (' ', 'attr'), ('forsaken', 'acl'), ('machine', 'npadvmod'), ('-', 'punct'), ('learning', 'amod'), ('community', 'pobj'), ('ignored', 'conj'), (' ', 'nmod'), ('computer', 'nmod'), ('-', 'punct'), ('vision', 'nmod'), ('speech', 'compound'), ('-', 'punct'), ('recognition', 'conj'), ('communities', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[late, 1990s], [1990s, ,], [,, neural], [neural, nets], [nets, backpropagation], [backpropagation, largely], [largely,  ], [ , forsaken], [forsaken, machine], [machine, -], [-, learning], [learning, community], [community, ignored], [ignored,  ], [ , computer], [computer, -], [-, vision], [vision, speech], [speech, -], [-, recognition], [recognition, communities], [communities, .]]

>> Trigrams: 
[[late, 1990s, ,], [1990s, ,, neural], [,, neural, nets], [neural, nets, backpropagation], [nets, backpropagation, largely], [backpropagation, largely,  ], [largely,  , forsaken], [ , forsaken, machine], [forsaken, machine, -], [machine, -, learning], [-, learning, community], [learning, community, ignored], [community, ignored,  ], [ignored,  , computer], [ , computer, -], [computer, -, vision], [-, vision, speech], [vision, speech, -], [speech, -, recognition], [-, recognition, communities], [recognition, communities, .]]

>> Noun Phrases are: 
[the late 1990s, neural nets, backpropagation, the machine-learning community, the  computer-vision and speech-recognition communities]

>> Named Entities are: 
[('the late 1990s', 'DATE')]


============================ Sentence 152 =============================

It was widely  thought that learning useful, multistage, feature extractors with lit- tle prior knowledge was infeasible. 


>> Tokens are: 
[widely,  , thought, learning, useful, ,, multistage, ,, feature, extractors, lit-, tle, prior, knowledge, infeasible, .] 

>> PoS Tags are: 
[('widely', 'ADV'), (' ', 'SPACE'), ('thought', 'VERB'), ('learning', 'VERB'), ('useful', 'ADJ'), (',', 'PUNCT'), ('multistage', 'NOUN'), (',', 'PUNCT'), ('feature', 'NOUN'), ('extractors', 'NOUN'), ('lit-', 'DET'), ('tle', 'NOUN'), ('prior', 'ADJ'), ('knowledge', 'NOUN'), ('infeasible', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('widely', 'advmod'), (' ', 'nsubj'), ('thought', 'ccomp'), ('learning', 'csubj'), ('useful', 'acomp'), (',', 'punct'), ('multistage', 'dobj'), (',', 'punct'), ('feature', 'compound'), ('extractors', 'conj'), ('lit-', 'det'), ('tle', 'nmod'), ('prior', 'amod'), ('knowledge', 'pobj'), ('infeasible', 'acomp'), ('.', 'punct')]

>> Bigrams: 
[[widely,  ], [ , thought], [thought, learning], [learning, useful], [useful, ,], [,, multistage], [multistage, ,], [,, feature], [feature, extractors], [extractors, lit-], [lit-, tle], [tle, prior], [prior, knowledge], [knowledge, infeasible], [infeasible, .]]

>> Trigrams: 
[[widely,  , thought], [ , thought, learning], [thought, learning, useful], [learning, useful, ,], [useful, ,, multistage], [,, multistage, ,], [multistage, ,, feature], [,, feature, extractors], [feature, extractors, lit-], [extractors, lit-, tle], [lit-, tle, prior], [tle, prior, knowledge], [prior, knowledge, infeasible], [knowledge, infeasible, .]]

>> Noun Phrases are: 
[It, multistage, feature extractors, lit- tle prior knowledge]

>> Named Entities are: 
[]


============================ Sentence 153 =============================

In particular, it was commonly  thought that simple gradient descent would get trapped in poor local  minima — weight configurations for which no small change would  reduce the average error. 


>> Tokens are: 
[particular, ,, commonly,  , thought, simple, gradient, descent, trapped, poor, local,  , minima, —, weight, configurations, small, change,  , reduce, average, error, .] 

>> PoS Tags are: 
[('particular', 'ADJ'), (',', 'PUNCT'), ('commonly', 'ADV'), (' ', 'SPACE'), ('thought', 'VERB'), ('simple', 'ADJ'), ('gradient', 'ADJ'), ('descent', 'NOUN'), ('trapped', 'VERB'), ('poor', 'ADJ'), ('local', 'ADJ'), (' ', 'SPACE'), ('minima', 'NOUN'), ('—', 'PUNCT'), ('weight', 'NOUN'), ('configurations', 'NOUN'), ('small', 'ADJ'), ('change', 'NOUN'), (' ', 'SPACE'), ('reduce', 'VERB'), ('average', 'ADJ'), ('error', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('particular', 'amod'), (',', 'punct'), ('commonly', 'advmod'), (' ', 'nsubj'), ('thought', 'ROOT'), ('simple', 'amod'), ('gradient', 'amod'), ('descent', 'nsubj'), ('trapped', 'ccomp'), ('poor', 'amod'), ('local', 'amod'), (' ', 'compound'), ('minima', 'pobj'), ('—', 'punct'), ('weight', 'compound'), ('configurations', 'appos'), ('small', 'amod'), ('change', 'nsubj'), (' ', 'nsubj'), ('reduce', 'relcl'), ('average', 'amod'), ('error', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[particular, ,], [,, commonly], [commonly,  ], [ , thought], [thought, simple], [simple, gradient], [gradient, descent], [descent, trapped], [trapped, poor], [poor, local], [local,  ], [ , minima], [minima, —], [—, weight], [weight, configurations], [configurations, small], [small, change], [change,  ], [ , reduce], [reduce, average], [average, error], [error, .]]

>> Trigrams: 
[[particular, ,, commonly], [,, commonly,  ], [commonly,  , thought], [ , thought, simple], [thought, simple, gradient], [simple, gradient, descent], [gradient, descent, trapped], [descent, trapped, poor], [trapped, poor, local], [poor, local,  ], [local,  , minima], [ , minima, —], [minima, —, weight], [—, weight, configurations], [weight, configurations, small], [configurations, small, change], [small, change,  ], [change,  , reduce], [ , reduce, average], [reduce, average, error], [average, error, .]]

>> Noun Phrases are: 
[it, simple gradient descent, poor local  minima, weight configurations, no small change, the average error]

>> Named Entities are: 
[]


============================ Sentence 154 =============================

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 155 =============================

In practice, poor local minima are rarely a problem with large net- works. 


>> Tokens are: 
[practice, ,, poor, local, minima, rarely, problem, large, net-, works, .] 

>> PoS Tags are: 
[('practice', 'NOUN'), (',', 'PUNCT'), ('poor', 'ADJ'), ('local', 'ADJ'), ('minima', 'NOUN'), ('rarely', 'ADV'), ('problem', 'NOUN'), ('large', 'ADJ'), ('net-', 'NOUN'), ('works', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('practice', 'pobj'), (',', 'punct'), ('poor', 'amod'), ('local', 'amod'), ('minima', 'nsubj'), ('rarely', 'advmod'), ('problem', 'attr'), ('large', 'amod'), ('net-', 'compound'), ('works', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[practice, ,], [,, poor], [poor, local], [local, minima], [minima, rarely], [rarely, problem], [problem, large], [large, net-], [net-, works], [works, .]]

>> Trigrams: 
[[practice, ,, poor], [,, poor, local], [poor, local, minima], [local, minima, rarely], [minima, rarely, problem], [rarely, problem, large], [problem, large, net-], [large, net-, works], [net-, works, .]]

>> Noun Phrases are: 
[practice, poor local minima, a problem, large net- works]

>> Named Entities are: 
[]


============================ Sentence 156 =============================

Regardless of the initial conditions, the system nearly always  reaches solutions of very similar quality. 


>> Tokens are: 
[Regardless, initial, conditions, ,, system, nearly,  , reaches, solutions, similar, quality, .] 

>> PoS Tags are: 
[('Regardless', 'ADV'), ('initial', 'ADJ'), ('conditions', 'NOUN'), (',', 'PUNCT'), ('system', 'NOUN'), ('nearly', 'ADV'), (' ', 'SPACE'), ('reaches', 'VERB'), ('solutions', 'NOUN'), ('similar', 'ADJ'), ('quality', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Regardless', 'advmod'), ('initial', 'amod'), ('conditions', 'pobj'), (',', 'punct'), ('system', 'nsubj'), ('nearly', 'advmod'), (' ', 'nsubj'), ('reaches', 'ROOT'), ('solutions', 'dobj'), ('similar', 'amod'), ('quality', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Regardless, initial], [initial, conditions], [conditions, ,], [,, system], [system, nearly], [nearly,  ], [ , reaches], [reaches, solutions], [solutions, similar], [similar, quality], [quality, .]]

>> Trigrams: 
[[Regardless, initial, conditions], [initial, conditions, ,], [conditions, ,, system], [,, system, nearly], [system, nearly,  ], [nearly,  , reaches], [ , reaches, solutions], [reaches, solutions, similar], [solutions, similar, quality], [similar, quality, .]]

>> Noun Phrases are: 
[the initial conditions, the system, solutions, very similar quality]

>> Named Entities are: 
[]


============================ Sentence 157 =============================

Recent theoretical and  empirical results strongly suggest that local minima are not a serious  issue in general. 


>> Tokens are: 
[Recent, theoretical,  , empirical, results, strongly, suggest, local, minima,  , issue, general, .] 

>> PoS Tags are: 
[('Recent', 'ADJ'), ('theoretical', 'ADJ'), (' ', 'SPACE'), ('empirical', 'ADJ'), ('results', 'NOUN'), ('strongly', 'ADV'), ('suggest', 'VERB'), ('local', 'ADJ'), ('minima', 'NOUN'), (' ', 'SPACE'), ('issue', 'NOUN'), ('general', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Recent', 'amod'), ('theoretical', 'amod'), (' ', 'conj'), ('empirical', 'amod'), ('results', 'nsubj'), ('strongly', 'advmod'), ('suggest', 'ROOT'), ('local', 'amod'), ('minima', 'nsubj'), (' ', 'compound'), ('issue', 'attr'), ('general', 'amod'), ('.', 'punct')]

>> Bigrams: 
[[Recent, theoretical], [theoretical,  ], [ , empirical], [empirical, results], [results, strongly], [strongly, suggest], [suggest, local], [local, minima], [minima,  ], [ , issue], [issue, general], [general, .]]

>> Trigrams: 
[[Recent, theoretical,  ], [theoretical,  , empirical], [ , empirical, results], [empirical, results, strongly], [results, strongly, suggest], [strongly, suggest, local], [suggest, local, minima], [local, minima,  ], [minima,  , issue], [ , issue, general], [issue, general, .]]

>> Noun Phrases are: 
[Recent theoretical and  empirical results, local minima, a serious  issue]

>> Named Entities are: 
[]


============================ Sentence 158 =============================

Instead, the landscape is packed with a combinato- rially large number of saddle points where the gradient is zero, and  the surface curves up in most dimensions and curves down in the   Figure 2 | Inside a convolutional network. 


>> Tokens are: 
[Instead, ,, landscape, packed, combinato-, rially, large, number, saddle, points, gradient, zero, ,,  , surface, curves, dimensions, curves,   , Figure, 2, |, Inside, convolutional, network, .] 

>> PoS Tags are: 
[('Instead', 'ADV'), (',', 'PUNCT'), ('landscape', 'NOUN'), ('packed', 'VERB'), ('combinato-', 'NOUN'), ('rially', 'ADV'), ('large', 'ADJ'), ('number', 'NOUN'), ('saddle', 'NOUN'), ('points', 'NOUN'), ('gradient', 'NOUN'), ('zero', 'NUM'), (',', 'PUNCT'), (' ', 'SPACE'), ('surface', 'NOUN'), ('curves', 'VERB'), ('dimensions', 'NOUN'), ('curves', 'VERB'), ('  ', 'SPACE'), ('Figure', 'NOUN'), ('2', 'NUM'), ('|', 'NOUN'), ('Inside', 'ADP'), ('convolutional', 'ADJ'), ('network', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Instead', 'advmod'), (',', 'punct'), ('landscape', 'nsubjpass'), ('packed', 'ROOT'), ('combinato-', 'nmod'), ('rially', 'advmod'), ('large', 'amod'), ('number', 'pobj'), ('saddle', 'compound'), ('points', 'pobj'), ('gradient', 'nsubj'), ('zero', 'attr'), (',', 'punct'), (' ', 'nsubj'), ('surface', 'nsubj'), ('curves', 'conj'), ('dimensions', 'pobj'), ('curves', 'conj'), ('  ', 'compound'), ('Figure', 'pobj'), ('2', 'nummod'), ('|', 'npadvmod'), ('Inside', 'prep'), ('convolutional', 'amod'), ('network', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Instead, ,], [,, landscape], [landscape, packed], [packed, combinato-], [combinato-, rially], [rially, large], [large, number], [number, saddle], [saddle, points], [points, gradient], [gradient, zero], [zero, ,], [,,  ], [ , surface], [surface, curves], [curves, dimensions], [dimensions, curves], [curves,   ], [  , Figure], [Figure, 2], [2, |], [|, Inside], [Inside, convolutional], [convolutional, network], [network, .]]

>> Trigrams: 
[[Instead, ,, landscape], [,, landscape, packed], [landscape, packed, combinato-], [packed, combinato-, rially], [combinato-, rially, large], [rially, large, number], [large, number, saddle], [number, saddle, points], [saddle, points, gradient], [points, gradient, zero], [gradient, zero, ,], [zero, ,,  ], [,,  , surface], [ , surface, curves], [surface, curves, dimensions], [curves, dimensions, curves], [dimensions, curves,   ], [curves,   , Figure], [  , Figure, 2], [Figure, 2, |], [2, |, Inside], [|, Inside, convolutional], [Inside, convolutional, network], [convolutional, network, .]]

>> Noun Phrases are: 
[the landscape, a combinato- rially large number, saddle points, the gradient, the surface, most dimensions, the   Figure, a convolutional network]

>> Named Entities are: 
[('zero', 'CARDINAL'), ('2', 'CARDINAL')]


============================ Sentence 159 =============================

The outputs (not the filters)  of each layer (horizontally) of a typical convolutional network architecture  applied to the image of a Samoyed dog (bottom left; and RGB (red, green,  blue) inputs, bottom right). 


>> Tokens are: 
[outputs, (, filters, ),  , layer, (, horizontally, ), typical, convolutional, network, architecture,  , applied, image, Samoyed, dog, (, left, ;, RGB, (, red, ,, green, ,,  , blue, ), inputs, ,, right, ), .] 

>> PoS Tags are: 
[('outputs', 'NOUN'), ('(', 'PUNCT'), ('filters', 'NOUN'), (')', 'PUNCT'), (' ', 'SPACE'), ('layer', 'NOUN'), ('(', 'PUNCT'), ('horizontally', 'ADV'), (')', 'PUNCT'), ('typical', 'ADJ'), ('convolutional', 'ADJ'), ('network', 'NOUN'), ('architecture', 'NOUN'), (' ', 'SPACE'), ('applied', 'VERB'), ('image', 'NOUN'), ('Samoyed', 'ADJ'), ('dog', 'NOUN'), ('(', 'PUNCT'), ('left', 'ADJ'), (';', 'PUNCT'), ('RGB', 'PROPN'), ('(', 'PUNCT'), ('red', 'ADJ'), (',', 'PUNCT'), ('green', 'ADJ'), (',', 'PUNCT'), (' ', 'SPACE'), ('blue', 'ADJ'), (')', 'PUNCT'), ('inputs', 'NOUN'), (',', 'PUNCT'), ('right', 'ADV'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('outputs', 'ROOT'), ('(', 'punct'), ('filters', 'appos'), (')', 'punct'), (' ', 'appos'), ('layer', 'pobj'), ('(', 'punct'), ('horizontally', 'advmod'), (')', 'punct'), ('typical', 'amod'), ('convolutional', 'amod'), ('network', 'compound'), ('architecture', 'pobj'), (' ', 'nsubj'), ('applied', 'relcl'), ('image', 'pobj'), ('Samoyed', 'amod'), ('dog', 'pobj'), ('(', 'punct'), ('left', 'parataxis'), (';', 'punct'), ('RGB', 'conj'), ('(', 'punct'), ('red', 'amod'), (',', 'punct'), ('green', 'conj'), (',', 'punct'), (' ', 'conj'), ('blue', 'nmod'), (')', 'punct'), ('inputs', 'conj'), (',', 'punct'), ('right', 'advmod'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[outputs, (], [(, filters], [filters, )], [),  ], [ , layer], [layer, (], [(, horizontally], [horizontally, )], [), typical], [typical, convolutional], [convolutional, network], [network, architecture], [architecture,  ], [ , applied], [applied, image], [image, Samoyed], [Samoyed, dog], [dog, (], [(, left], [left, ;], [;, RGB], [RGB, (], [(, red], [red, ,], [,, green], [green, ,], [,,  ], [ , blue], [blue, )], [), inputs], [inputs, ,], [,, right], [right, )], [), .]]

>> Trigrams: 
[[outputs, (, filters], [(, filters, )], [filters, ),  ], [),  , layer], [ , layer, (], [layer, (, horizontally], [(, horizontally, )], [horizontally, ), typical], [), typical, convolutional], [typical, convolutional, network], [convolutional, network, architecture], [network, architecture,  ], [architecture,  , applied], [ , applied, image], [applied, image, Samoyed], [image, Samoyed, dog], [Samoyed, dog, (], [dog, (, left], [(, left, ;], [left, ;, RGB], [;, RGB, (], [RGB, (, red], [(, red, ,], [red, ,, green], [,, green, ,], [green, ,,  ], [,,  , blue], [ , blue, )], [blue, ), inputs], [), inputs, ,], [inputs, ,, right], [,, right, )], [right, ), .]]

>> Noun Phrases are: 
[The outputs, not the filters, each layer, a typical convolutional network architecture, the image, a Samoyed dog, bottom, RGB]

>> Named Entities are: 
[('RGB', 'ORG')]


============================ Sentence 160 =============================

Each rectangular image is a feature map   corresponding to the output for one of the learned features, detected at each  of the image positions. 


>> Tokens are: 
[rectangular, image, feature, map,   , corresponding, output, learned, features, ,, detected,  , image, positions, .] 

>> PoS Tags are: 
[('rectangular', 'ADJ'), ('image', 'NOUN'), ('feature', 'NOUN'), ('map', 'NOUN'), ('  ', 'SPACE'), ('corresponding', 'VERB'), ('output', 'NOUN'), ('learned', 'VERB'), ('features', 'NOUN'), (',', 'PUNCT'), ('detected', 'VERB'), (' ', 'SPACE'), ('image', 'NOUN'), ('positions', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('rectangular', 'amod'), ('image', 'nsubj'), ('feature', 'compound'), ('map', 'attr'), ('  ', 'appos'), ('corresponding', 'acl'), ('output', 'pobj'), ('learned', 'amod'), ('features', 'pobj'), (',', 'punct'), ('detected', 'acl'), (' ', 'pobj'), ('image', 'compound'), ('positions', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[rectangular, image], [image, feature], [feature, map], [map,   ], [  , corresponding], [corresponding, output], [output, learned], [learned, features], [features, ,], [,, detected], [detected,  ], [ , image], [image, positions], [positions, .]]

>> Trigrams: 
[[rectangular, image, feature], [image, feature, map], [feature, map,   ], [map,   , corresponding], [  , corresponding, output], [corresponding, output, learned], [output, learned, features], [learned, features, ,], [features, ,, detected], [,, detected,  ], [detected,  , image], [ , image, positions], [image, positions, .]]

>> Noun Phrases are: 
[Each rectangular image, a feature map, the output, the learned features, the image positions]

>> Named Entities are: 
[]


============================ Sentence 161 =============================

Information flows bottom up, with lower-level features  acting as oriented edge detectors, and a score is computed for each image class  in output. 


>> Tokens are: 
[Information, flows, ,, lower, -, level, features,  , acting, oriented, edge, detectors, ,, score, computed, image, class,  , output, .] 

>> PoS Tags are: 
[('Information', 'NOUN'), ('flows', 'VERB'), (',', 'PUNCT'), ('lower', 'ADJ'), ('-', 'PUNCT'), ('level', 'NOUN'), ('features', 'NOUN'), (' ', 'SPACE'), ('acting', 'VERB'), ('oriented', 'VERB'), ('edge', 'NOUN'), ('detectors', 'NOUN'), (',', 'PUNCT'), ('score', 'NOUN'), ('computed', 'VERB'), ('image', 'NOUN'), ('class', 'NOUN'), (' ', 'SPACE'), ('output', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Information', 'nsubj'), ('flows', 'ROOT'), (',', 'punct'), ('lower', 'amod'), ('-', 'punct'), ('level', 'compound'), ('features', 'pobj'), (' ', 'punct'), ('acting', 'acl'), ('oriented', 'amod'), ('edge', 'compound'), ('detectors', 'pobj'), (',', 'punct'), ('score', 'nsubjpass'), ('computed', 'conj'), ('image', 'compound'), ('class', 'pobj'), (' ', 'appos'), ('output', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Information, flows], [flows, ,], [,, lower], [lower, -], [-, level], [level, features], [features,  ], [ , acting], [acting, oriented], [oriented, edge], [edge, detectors], [detectors, ,], [,, score], [score, computed], [computed, image], [image, class], [class,  ], [ , output], [output, .]]

>> Trigrams: 
[[Information, flows, ,], [flows, ,, lower], [,, lower, -], [lower, -, level], [-, level, features], [level, features,  ], [features,  , acting], [ , acting, oriented], [acting, oriented, edge], [oriented, edge, detectors], [edge, detectors, ,], [detectors, ,, score], [,, score, computed], [score, computed, image], [computed, image, class], [image, class,  ], [class,  , output], [ , output, .]]

>> Noun Phrases are: 
[Information, lower-level features, oriented edge detectors, a score, each image class, output]

>> Named Entities are: 
[]


============================ Sentence 162 =============================

ReLU, rectified linear unit. 


>> Tokens are: 
[ReLU, ,, rectified, linear, unit, .] 

>> PoS Tags are: 
[('ReLU', 'NOUN'), (',', 'PUNCT'), ('rectified', 'VERB'), ('linear', 'ADJ'), ('unit', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('ReLU', 'ROOT'), (',', 'punct'), ('rectified', 'amod'), ('linear', 'amod'), ('unit', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[ReLU, ,], [,, rectified], [rectified, linear], [linear, unit], [unit, .]]

>> Trigrams: 
[[ReLU, ,, rectified], [,, rectified, linear], [rectified, linear, unit], [linear, unit, .]]

>> Noun Phrases are: 
[ReLU, rectified linear unit]

>> Named Entities are: 
[('ReLU', 'ORG')]


============================ Sentence 163 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 164 =============================

Red Green Blue  Samoyed (16); Papillon (5.7); Pomeranian (2.7); Arctic fox (1.0); Eskimo dog (0.6); white wolf (0.4); Siberian husky (0.4)   


>> Tokens are: 
[Red, Green, Blue,  , Samoyed, (, 16, ), ;, Papillon, (, 5.7, ), ;, Pomeranian, (, 2.7, ), ;, Arctic, fox, (, 1.0, ), ;, Eskimo, dog, (, 0.6, ), ;, white, wolf, (, 0.4, ), ;, Siberian, husky, (, 0.4, ),  ] 

>> PoS Tags are: 
[('Red', 'PROPN'), ('Green', 'PROPN'), ('Blue', 'PROPN'), (' ', 'SPACE'), ('Samoyed', 'PROPN'), ('(', 'PUNCT'), ('16', 'NUM'), (')', 'PUNCT'), (';', 'PUNCT'), ('Papillon', 'PROPN'), ('(', 'PUNCT'), ('5.7', 'NUM'), (')', 'PUNCT'), (';', 'PUNCT'), ('Pomeranian', 'PROPN'), ('(', 'PUNCT'), ('2.7', 'NUM'), (')', 'PUNCT'), (';', 'PUNCT'), ('Arctic', 'PROPN'), ('fox', 'NOUN'), ('(', 'PUNCT'), ('1.0', 'NUM'), (')', 'PUNCT'), (';', 'PUNCT'), ('Eskimo', 'PROPN'), ('dog', 'NOUN'), ('(', 'PUNCT'), ('0.6', 'NUM'), (')', 'PUNCT'), (';', 'PUNCT'), ('white', 'ADJ'), ('wolf', 'NOUN'), ('(', 'PUNCT'), ('0.4', 'NUM'), (')', 'PUNCT'), (';', 'PUNCT'), ('Siberian', 'ADJ'), ('husky', 'NOUN'), ('(', 'PUNCT'), ('0.4', 'NUM'), (')', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Red', 'compound'), ('Green', 'compound'), ('Blue', 'ROOT'), (' ', 'nummod'), ('Samoyed', 'appos'), ('(', 'punct'), ('16', 'appos'), (')', 'punct'), (';', 'punct'), ('Papillon', 'appos'), ('(', 'punct'), ('5.7', 'appos'), (')', 'punct'), (';', 'punct'), ('Pomeranian', 'appos'), ('(', 'punct'), ('2.7', 'appos'), (')', 'punct'), (';', 'punct'), ('Arctic', 'compound'), ('fox', 'conj'), ('(', 'punct'), ('1.0', 'appos'), (')', 'punct'), (';', 'punct'), ('Eskimo', 'compound'), ('dog', 'conj'), ('(', 'punct'), ('0.6', 'appos'), (')', 'punct'), (';', 'punct'), ('white', 'amod'), ('wolf', 'appos'), ('(', 'punct'), ('0.4', 'appos'), (')', 'punct'), (';', 'punct'), ('Siberian', 'amod'), ('husky', 'appos'), ('(', 'punct'), ('0.4', 'appos'), (')', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[Red, Green], [Green, Blue], [Blue,  ], [ , Samoyed], [Samoyed, (], [(, 16], [16, )], [), ;], [;, Papillon], [Papillon, (], [(, 5.7], [5.7, )], [), ;], [;, Pomeranian], [Pomeranian, (], [(, 2.7], [2.7, )], [), ;], [;, Arctic], [Arctic, fox], [fox, (], [(, 1.0], [1.0, )], [), ;], [;, Eskimo], [Eskimo, dog], [dog, (], [(, 0.6], [0.6, )], [), ;], [;, white], [white, wolf], [wolf, (], [(, 0.4], [0.4, )], [), ;], [;, Siberian], [Siberian, husky], [husky, (], [(, 0.4], [0.4, )], [),  ]]

>> Trigrams: 
[[Red, Green, Blue], [Green, Blue,  ], [Blue,  , Samoyed], [ , Samoyed, (], [Samoyed, (, 16], [(, 16, )], [16, ), ;], [), ;, Papillon], [;, Papillon, (], [Papillon, (, 5.7], [(, 5.7, )], [5.7, ), ;], [), ;, Pomeranian], [;, Pomeranian, (], [Pomeranian, (, 2.7], [(, 2.7, )], [2.7, ), ;], [), ;, Arctic], [;, Arctic, fox], [Arctic, fox, (], [fox, (, 1.0], [(, 1.0, )], [1.0, ), ;], [), ;, Eskimo], [;, Eskimo, dog], [Eskimo, dog, (], [dog, (, 0.6], [(, 0.6, )], [0.6, ), ;], [), ;, white], [;, white, wolf], [white, wolf, (], [wolf, (, 0.4], [(, 0.4, )], [0.4, ), ;], [), ;, Siberian], [;, Siberian, husky], [Siberian, husky, (], [husky, (, 0.4], [(, 0.4, )], [0.4, ),  ]]

>> Noun Phrases are: 
[Red Green Blue, Samoyed, Papillon, Pomeranian, Arctic fox, Eskimo dog, white wolf, Siberian husky]

>> Named Entities are: 
[('Red Green Blue', 'ORG'), ('Samoyed', 'GPE'), ('16', 'CARDINAL'), ('5.7', 'CARDINAL'), ('Pomeranian', 'NORP'), ('2.7', 'CARDINAL'), ('1.0', 'CARDINAL'), ('0.6', 'CARDINAL'), ('0.4', 'CARDINAL'), ('Siberian', 'NORP'), ('0.4', 'CARDINAL')]


============================ Sentence 165 =============================

Convolutions and ReLU   


>> Tokens are: 
[Convolutions, ReLU,  ] 

>> PoS Tags are: 
[('Convolutions', 'NOUN'), ('ReLU', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Convolutions', 'ROOT'), ('ReLU', 'conj'), (' ', 'punct')]

>> Bigrams: 
[[Convolutions, ReLU], [ReLU,  ]]

>> Trigrams: 
[[Convolutions, ReLU,  ]]

>> Noun Phrases are: 
[Convolutions, ReLU]

>> Named Entities are: 
[('Convolutions and ReLU', 'ORG')]


============================ Sentence 166 =============================

Max pooling   


>> Tokens are: 
[Max, pooling,  ] 

>> PoS Tags are: 
[('Max', 'PROPN'), ('pooling', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Max', 'nsubj'), ('pooling', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[Max, pooling], [pooling,  ]]

>> Trigrams: 
[[Max, pooling,  ]]

>> Noun Phrases are: 
[Max]

>> Named Entities are: 
[('Max', 'PERSON')]


============================ Sentence 167 =============================

Max pooling  Convolutions and ReLU  Convolutions and ReLU  4 3 8  |   


>> Tokens are: 
[Max, pooling,  , Convolutions, ReLU,  , Convolutions, ReLU,  , 4, 3, 8,  , |,  ] 

>> PoS Tags are: 
[('Max', 'PROPN'), ('pooling', 'VERB'), (' ', 'SPACE'), ('Convolutions', 'PROPN'), ('ReLU', 'PROPN'), (' ', 'SPACE'), ('Convolutions', 'PROPN'), ('ReLU', 'PROPN'), (' ', 'SPACE'), ('4', 'NUM'), ('3', 'NUM'), ('8', 'NUM'), (' ', 'SPACE'), ('|', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Max', 'nsubj'), ('pooling', 'ROOT'), (' ', 'compound'), ('Convolutions', 'dobj'), ('ReLU', 'conj'), (' ', 'punct'), ('Convolutions', 'dobj'), ('ReLU', 'conj'), (' ', 'conj'), ('4', 'npadvmod'), ('3', 'compound'), ('8', 'nummod'), (' ', 'punct'), ('|', 'npadvmod'), (' ', 'punct')]

>> Bigrams: 
[[Max, pooling], [pooling,  ], [ , Convolutions], [Convolutions, ReLU], [ReLU,  ], [ , Convolutions], [Convolutions, ReLU], [ReLU,  ], [ , 4], [4, 3], [3, 8], [8,  ], [ , |], [|,  ]]

>> Trigrams: 
[[Max, pooling,  ], [pooling,  , Convolutions], [ , Convolutions, ReLU], [Convolutions, ReLU,  ], [ReLU,  , Convolutions], [ , Convolutions, ReLU], [Convolutions, ReLU,  ], [ReLU,  , 4], [ , 4, 3], [4, 3, 8], [3, 8,  ], [8,  , |], [ , |,  ]]

>> Noun Phrases are: 
[Max,  Convolutions, ReLU, Convolutions, ReLU]

>> Named Entities are: 
[('Max', 'PERSON'), ('Convolutions and ReLU  Convolutions and ReLU', 'ORG')]


============================ Sentence 168 =============================

N A 


>> Tokens are: 
[N] 

>> PoS Tags are: 
[('N', 'PROPN')] 

>> Dependency Tags are: 
[('N', 'compound')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 169 =============================

T U R E  |  V O L  5 2 1  |  2 8  M A Y  2 0 1 5  REVIEWINSIGHT  © 2015 Macmillan Publishers Limited. 


>> Tokens are: 
[T, U, R, E,  , |,  , V, O, L,  , 5, 2, 1,  , |,  , 2, 8,  , M, Y,  , 2, 0, 1, 5,  , REVIEWINSIGHT,  , ©, 2015, Macmillan, Publishers, Limited, .] 

>> PoS Tags are: 
[('T', 'NOUN'), ('U', 'NOUN'), ('R', 'NOUN'), ('E', 'NOUN'), (' ', 'SPACE'), ('|', 'NOUN'), (' ', 'SPACE'), ('V', 'NOUN'), ('O', 'NOUN'), ('L', 'NOUN'), (' ', 'SPACE'), ('5', 'NUM'), ('2', 'NUM'), ('1', 'NUM'), (' ', 'SPACE'), ('|', 'NOUN'), (' ', 'SPACE'), ('2', 'NUM'), ('8', 'NUM'), (' ', 'SPACE'), ('M', 'PROPN'), ('Y', 'PROPN'), (' ', 'SPACE'), ('2', 'NUM'), ('0', 'NUM'), ('1', 'NUM'), ('5', 'NUM'), (' ', 'SPACE'), ('REVIEWINSIGHT', 'X'), (' ', 'SPACE'), ('©', 'ADJ'), ('2015', 'NUM'), ('Macmillan', 'PROPN'), ('Publishers', 'PROPN'), ('Limited', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('T', 'compound'), ('U', 'compound'), ('R', 'compound'), ('E', 'nsubj'), (' ', 'appos'), ('|', 'npadvmod'), (' ', 'punct'), ('V', 'compound'), ('O', 'appos'), ('L', 'appos'), (' ', 'appos'), ('5', 'compound'), ('2', 'compound'), ('1', 'nummod'), (' ', 'punct'), ('|', 'npadvmod'), (' ', 'appos'), ('2', 'compound'), ('8', 'nummod'), (' ', 'compound'), ('M', 'compound'), ('Y', 'nmod'), (' ', 'appos'), ('2', 'nummod'), ('0', 'quantmod'), ('1', 'compound'), ('5', 'nummod'), (' ', 'appos'), ('REVIEWINSIGHT', 'ROOT'), (' ', 'compound'), ('©', 'amod'), ('2015', 'nummod'), ('Macmillan', 'compound'), ('Publishers', 'compound'), ('Limited', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[T, U], [U, R], [R, E], [E,  ], [ , |], [|,  ], [ , V], [V, O], [O, L], [L,  ], [ , 5], [5, 2], [2, 1], [1,  ], [ , |], [|,  ], [ , 2], [2, 8], [8,  ], [ , M], [M, Y], [Y,  ], [ , 2], [2, 0], [0, 1], [1, 5], [5,  ], [ , REVIEWINSIGHT], [REVIEWINSIGHT,  ], [ , ©], [©, 2015], [2015, Macmillan], [Macmillan, Publishers], [Publishers, Limited], [Limited, .]]

>> Trigrams: 
[[T, U, R], [U, R, E], [R, E,  ], [E,  , |], [ , |,  ], [|,  , V], [ , V, O], [V, O, L], [O, L,  ], [L,  , 5], [ , 5, 2], [5, 2, 1], [2, 1,  ], [1,  , |], [ , |,  ], [|,  , 2], [ , 2, 8], [2, 8,  ], [8,  , M], [ , M, Y], [M, Y,  ], [Y,  , 2], [ , 2, 0], [2, 0, 1], [0, 1, 5], [1, 5,  ], [5,  , REVIEWINSIGHT], [ , REVIEWINSIGHT,  ], [REVIEWINSIGHT,  , ©], [ , ©, 2015], [©, 2015, Macmillan], [2015, Macmillan, Publishers], [Macmillan, Publishers, Limited], [Publishers, Limited, .]]

>> Noun Phrases are: 
[T U R E, V O, L,  © 2015 Macmillan Publishers Limited]

>> Named Entities are: 
[('2', 'CARDINAL'), ('2015', 'DATE'), ('Macmillan Publishers Limited', 'ORG')]


============================ Sentence 170 =============================

All rights reserved    remainder29,30. 


>> Tokens are: 
[rights, reserved,    , remainder29,30, .] 

>> PoS Tags are: 
[('rights', 'NOUN'), ('reserved', 'VERB'), ('   ', 'SPACE'), ('remainder29,30', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('rights', 'nsubj'), ('reserved', 'ROOT'), ('   ', 'nummod'), ('remainder29,30', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[rights, reserved], [reserved,    ], [   , remainder29,30], [remainder29,30, .]]

>> Trigrams: 
[[rights, reserved,    ], [reserved,    , remainder29,30], [   , remainder29,30, .]]

>> Noun Phrases are: 
[All rights,    remainder29,30]

>> Named Entities are: 
[]


============================ Sentence 171 =============================

The analysis seems to show that saddle points with  only a few downward curving directions are present in very large  numbers, but almost all of them have very similar values of the objec- tive function. 


>> Tokens are: 
[analysis, saddle, points,  , downward, curving, directions, present, large,  , numbers, ,, similar, values, objec-, tive, function, .] 

>> PoS Tags are: 
[('analysis', 'NOUN'), ('saddle', 'NOUN'), ('points', 'NOUN'), (' ', 'SPACE'), ('downward', 'ADJ'), ('curving', 'VERB'), ('directions', 'NOUN'), ('present', 'ADJ'), ('large', 'ADJ'), (' ', 'SPACE'), ('numbers', 'NOUN'), (',', 'PUNCT'), ('similar', 'ADJ'), ('values', 'NOUN'), ('objec-', 'ADJ'), ('tive', 'NOUN'), ('function', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('analysis', 'nsubj'), ('saddle', 'compound'), ('points', 'dobj'), (' ', 'pobj'), ('downward', 'amod'), ('curving', 'amod'), ('directions', 'nsubj'), ('present', 'acomp'), ('large', 'amod'), (' ', 'compound'), ('numbers', 'pobj'), (',', 'punct'), ('similar', 'amod'), ('values', 'dobj'), ('objec-', 'amod'), ('tive', 'compound'), ('function', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[analysis, saddle], [saddle, points], [points,  ], [ , downward], [downward, curving], [curving, directions], [directions, present], [present, large], [large,  ], [ , numbers], [numbers, ,], [,, similar], [similar, values], [values, objec-], [objec-, tive], [tive, function], [function, .]]

>> Trigrams: 
[[analysis, saddle, points], [saddle, points,  ], [points,  , downward], [ , downward, curving], [downward, curving, directions], [curving, directions, present], [directions, present, large], [present, large,  ], [large,  , numbers], [ , numbers, ,], [numbers, ,, similar], [,, similar, values], [similar, values, objec-], [values, objec-, tive], [objec-, tive, function], [tive, function, .]]

>> Noun Phrases are: 
[The analysis, that saddle points, only a few downward curving directions, very large  numbers, them, very similar values, the objec- tive function]

>> Named Entities are: 
[]


============================ Sentence 172 =============================

Hence, it does not much matter which of these saddle  points the algorithm gets stuck at. 


>> Tokens are: 
[,, matter, saddle,  , points, algorithm, gets, stuck, .] 

>> PoS Tags are: 
[(',', 'PUNCT'), ('matter', 'VERB'), ('saddle', 'NOUN'), (' ', 'SPACE'), ('points', 'NOUN'), ('algorithm', 'NOUN'), ('gets', 'AUX'), ('stuck', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(',', 'punct'), ('matter', 'ROOT'), ('saddle', 'pobj'), (' ', 'punct'), ('points', 'ccomp'), ('algorithm', 'nsubjpass'), ('gets', 'auxpass'), ('stuck', 'ccomp'), ('.', 'punct')]

>> Bigrams: 
[[,, matter], [matter, saddle], [saddle,  ], [ , points], [points, algorithm], [algorithm, gets], [gets, stuck], [stuck, .]]

>> Trigrams: 
[[,, matter, saddle], [matter, saddle,  ], [saddle,  , points], [ , points, algorithm], [points, algorithm, gets], [algorithm, gets, stuck], [gets, stuck, .]]

>> Noun Phrases are: 
[it, these saddle, the algorithm]

>> Named Entities are: 
[]


============================ Sentence 173 =============================

  Interest in deep feedforward networks was revived around 2006  (refs 31–34) by a group of researchers brought together by the Cana- dian Institute for Advanced Research (CIFAR). 


>> Tokens are: 
[  , Interest, deep, feedforward, networks, revived, 2006,  , (, refs,  , 31–34, ), group, researchers, brought, Cana-, dian, Institute, Advanced, Research, (, CIFAR, ), .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('Interest', 'NOUN'), ('deep', 'ADJ'), ('feedforward', 'NOUN'), ('networks', 'NOUN'), ('revived', 'VERB'), ('2006', 'NUM'), (' ', 'SPACE'), ('(', 'PUNCT'), ('refs', 'VERB'), ('\xa0', 'SPACE'), ('31–34', 'NUM'), (')', 'PUNCT'), ('group', 'NOUN'), ('researchers', 'NOUN'), ('brought', 'VERB'), ('Cana-', 'ADJ'), ('dian', 'ADJ'), ('Institute', 'PROPN'), ('Advanced', 'PROPN'), ('Research', 'PROPN'), ('(', 'PUNCT'), ('CIFAR', 'PROPN'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'compound'), ('Interest', 'nsubjpass'), ('deep', 'amod'), ('feedforward', 'compound'), ('networks', 'pobj'), ('revived', 'ccomp'), ('2006', 'pobj'), (' ', 'npadvmod'), ('(', 'punct'), ('refs', 'ROOT'), ('\xa0', 'compound'), ('31–34', 'dobj'), (')', 'punct'), ('group', 'pobj'), ('researchers', 'pobj'), ('brought', 'acl'), ('Cana-', 'amod'), ('dian', 'compound'), ('Institute', 'pobj'), ('Advanced', 'compound'), ('Research', 'pobj'), ('(', 'punct'), ('CIFAR', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[  , Interest], [Interest, deep], [deep, feedforward], [feedforward, networks], [networks, revived], [revived, 2006], [2006,  ], [ , (], [(, refs], [refs,  ], [ , 31–34], [31–34, )], [), group], [group, researchers], [researchers, brought], [brought, Cana-], [Cana-, dian], [dian, Institute], [Institute, Advanced], [Advanced, Research], [Research, (], [(, CIFAR], [CIFAR, )], [), .]]

>> Trigrams: 
[[  , Interest, deep], [Interest, deep, feedforward], [deep, feedforward, networks], [feedforward, networks, revived], [networks, revived, 2006], [revived, 2006,  ], [2006,  , (], [ , (, refs], [(, refs,  ], [refs,  , 31–34], [ , 31–34, )], [31–34, ), group], [), group, researchers], [group, researchers, brought], [researchers, brought, Cana-], [brought, Cana-, dian], [Cana-, dian, Institute], [dian, Institute, Advanced], [Institute, Advanced, Research], [Advanced, Research, (], [Research, (, CIFAR], [(, CIFAR, )], [CIFAR, ), .]]

>> Noun Phrases are: 
[  Interest, deep feedforward networks, a group, researchers, the Cana- dian Institute, Advanced Research, (CIFAR]

>> Named Entities are: 
[('2006', 'DATE'), ('Institute for Advanced Research', 'ORG')]


============================ Sentence 174 =============================

The researchers intro- duced unsupervised learning procedures that could create layers of  feature detectors without requiring labelled data. 


>> Tokens are: 
[researchers, intro-, duced, unsupervised, learning, procedures, create, layers,  , feature, detectors, requiring, labelled, data, .] 

>> PoS Tags are: 
[('researchers', 'NOUN'), ('intro-', 'PROPN'), ('duced', 'VERB'), ('unsupervised', 'ADJ'), ('learning', 'NOUN'), ('procedures', 'NOUN'), ('create', 'VERB'), ('layers', 'NOUN'), (' ', 'SPACE'), ('feature', 'NOUN'), ('detectors', 'NOUN'), ('requiring', 'VERB'), ('labelled', 'VERB'), ('data', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('researchers', 'nsubj'), ('intro-', 'appos'), ('duced', 'ROOT'), ('unsupervised', 'amod'), ('learning', 'compound'), ('procedures', 'dobj'), ('create', 'relcl'), ('layers', 'dobj'), (' ', 'pobj'), ('feature', 'compound'), ('detectors', 'pobj'), ('requiring', 'pcomp'), ('labelled', 'amod'), ('data', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[researchers, intro-], [intro-, duced], [duced, unsupervised], [unsupervised, learning], [learning, procedures], [procedures, create], [create, layers], [layers,  ], [ , feature], [feature, detectors], [detectors, requiring], [requiring, labelled], [labelled, data], [data, .]]

>> Trigrams: 
[[researchers, intro-, duced], [intro-, duced, unsupervised], [duced, unsupervised, learning], [unsupervised, learning, procedures], [learning, procedures, create], [procedures, create, layers], [create, layers,  ], [layers,  , feature], [ , feature, detectors], [feature, detectors, requiring], [detectors, requiring, labelled], [requiring, labelled, data], [labelled, data, .]]

>> Noun Phrases are: 
[The researchers, intro-, unsupervised learning procedures, layers, feature detectors, labelled data]

>> Named Entities are: 
[]


============================ Sentence 175 =============================

The objective in  learning each layer of feature detectors was to be able to reconstruct  or model the activities of feature detectors (or raw inputs) in the layer  below. 


>> Tokens are: 
[objective,  , learning, layer, feature, detectors, able, reconstruct,  , model, activities, feature, detectors, (, raw, inputs, ), layer,  , .] 

>> PoS Tags are: 
[('objective', 'NOUN'), (' ', 'SPACE'), ('learning', 'VERB'), ('layer', 'NOUN'), ('feature', 'NOUN'), ('detectors', 'NOUN'), ('able', 'ADJ'), ('reconstruct', 'VERB'), (' ', 'SPACE'), ('model', 'VERB'), ('activities', 'NOUN'), ('feature', 'NOUN'), ('detectors', 'NOUN'), ('(', 'PUNCT'), ('raw', 'ADJ'), ('inputs', 'NOUN'), (')', 'PUNCT'), ('layer', 'NOUN'), (' ', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('objective', 'nsubj'), (' ', 'pobj'), ('learning', 'acl'), ('layer', 'dobj'), ('feature', 'compound'), ('detectors', 'pobj'), ('able', 'acomp'), ('reconstruct', 'xcomp'), (' ', 'dobj'), ('model', 'conj'), ('activities', 'dobj'), ('feature', 'compound'), ('detectors', 'pobj'), ('(', 'punct'), ('raw', 'amod'), ('inputs', 'conj'), (')', 'punct'), ('layer', 'pobj'), (' ', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[objective,  ], [ , learning], [learning, layer], [layer, feature], [feature, detectors], [detectors, able], [able, reconstruct], [reconstruct,  ], [ , model], [model, activities], [activities, feature], [feature, detectors], [detectors, (], [(, raw], [raw, inputs], [inputs, )], [), layer], [layer,  ], [ , .]]

>> Trigrams: 
[[objective,  , learning], [ , learning, layer], [learning, layer, feature], [layer, feature, detectors], [feature, detectors, able], [detectors, able, reconstruct], [able, reconstruct,  ], [reconstruct,  , model], [ , model, activities], [model, activities, feature], [activities, feature, detectors], [feature, detectors, (], [detectors, (, raw], [(, raw, inputs], [raw, inputs, )], [inputs, ), layer], [), layer,  ], [layer,  , .]]

>> Noun Phrases are: 
[The objective, each layer, feature detectors, the activities, feature detectors, raw inputs, the layer]

>> Named Entities are: 
[]


============================ Sentence 176 =============================

By ‘pre-training’ several layers of progressively more complex  feature detectors using this reconstruction objective, the weights of a  deep network could be initialized to sensible values. 


>> Tokens are: 
[‘, pre, -, training, ’, layers, progressively, complex,  , feature, detectors, reconstruction, objective, ,, weights,  , deep, network, initialized, sensible, values, .] 

>> PoS Tags are: 
[('‘', 'PUNCT'), ('pre', 'ADJ'), ('-', 'ADJ'), ('training', 'ADJ'), ('’', 'PUNCT'), ('layers', 'NOUN'), ('progressively', 'ADV'), ('complex', 'ADJ'), (' ', 'SPACE'), ('feature', 'NOUN'), ('detectors', 'NOUN'), ('reconstruction', 'NOUN'), ('objective', 'NOUN'), (',', 'PUNCT'), ('weights', 'NOUN'), (' ', 'SPACE'), ('deep', 'ADJ'), ('network', 'NOUN'), ('initialized', 'VERB'), ('sensible', 'VERB'), ('values', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('‘', 'punct'), ('pre', 'amod'), ('-', 'amod'), ('training', 'amod'), ('’', 'punct'), ('layers', 'pobj'), ('progressively', 'advmod'), ('complex', 'amod'), (' ', 'compound'), ('feature', 'compound'), ('detectors', 'pobj'), ('reconstruction', 'compound'), ('objective', 'dobj'), (',', 'punct'), ('weights', 'nsubjpass'), (' ', 'nmod'), ('deep', 'amod'), ('network', 'pobj'), ('initialized', 'ROOT'), ('sensible', 'xcomp'), ('values', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[‘, pre], [pre, -], [-, training], [training, ’], [’, layers], [layers, progressively], [progressively, complex], [complex,  ], [ , feature], [feature, detectors], [detectors, reconstruction], [reconstruction, objective], [objective, ,], [,, weights], [weights,  ], [ , deep], [deep, network], [network, initialized], [initialized, sensible], [sensible, values], [values, .]]

>> Trigrams: 
[[‘, pre, -], [pre, -, training], [-, training, ’], [training, ’, layers], [’, layers, progressively], [layers, progressively, complex], [progressively, complex,  ], [complex,  , feature], [ , feature, detectors], [feature, detectors, reconstruction], [detectors, reconstruction, objective], [reconstruction, objective, ,], [objective, ,, weights], [,, weights,  ], [weights,  , deep], [ , deep, network], [deep, network, initialized], [network, initialized, sensible], [initialized, sensible, values], [sensible, values, .]]

>> Noun Phrases are: 
[‘pre-training’ several layers, progressively more complex  feature detectors, this reconstruction objective, the weights, a  deep network, values]

>> Named Entities are: 
[]


============================ Sentence 177 =============================

A final layer of  output units could then be added to the top of the network and the  whole deep system could be fine-tuned using standard backpropaga- 


>> Tokens are: 
[final, layer,  , output, units, added, network,  , deep, system, fine, -, tuned, standard, backpropaga-] 

>> PoS Tags are: 
[('final', 'ADJ'), ('layer', 'NOUN'), (' ', 'SPACE'), ('output', 'NOUN'), ('units', 'NOUN'), ('added', 'VERB'), ('network', 'NOUN'), (' ', 'SPACE'), ('deep', 'ADJ'), ('system', 'NOUN'), ('fine', 'ADV'), ('-', 'PUNCT'), ('tuned', 'VERB'), ('standard', 'ADJ'), ('backpropaga-', 'NOUN')] 

>> Dependency Tags are: 
[('final', 'amod'), ('layer', 'nsubjpass'), (' ', 'pobj'), ('output', 'compound'), ('units', 'pobj'), ('added', 'ROOT'), ('network', 'pobj'), (' ', 'nmod'), ('deep', 'amod'), ('system', 'conj'), ('fine', 'advmod'), ('-', 'punct'), ('tuned', 'acomp'), ('standard', 'amod'), ('backpropaga-', 'dobj')]

>> Bigrams: 
[[final, layer], [layer,  ], [ , output], [output, units], [units, added], [added, network], [network,  ], [ , deep], [deep, system], [system, fine], [fine, -], [-, tuned], [tuned, standard], [standard, backpropaga-]]

>> Trigrams: 
[[final, layer,  ], [layer,  , output], [ , output, units], [output, units, added], [units, added, network], [added, network,  ], [network,  , deep], [ , deep, system], [deep, system, fine], [system, fine, -], [fine, -, tuned], [-, tuned, standard], [tuned, standard, backpropaga-]]

>> Noun Phrases are: 
[A final layer, output units, the top, the network, the  whole deep system, standard backpropaga-]

>> Named Entities are: 
[]


============================ Sentence 178 =============================

tion33–35. 


>> Tokens are: 
[tion33–35, .] 

>> PoS Tags are: 
[('tion33–35', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('tion33–35', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[tion33–35, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[tion33–35]

>> Named Entities are: 
[]


============================ Sentence 179 =============================

This worked remarkably well for recognizing handwritten  digits or for detecting pedestrians, especially when the amount of  labelled data was very limited36. 


>> Tokens are: 
[worked, remarkably, recognizing, handwritten,  , digits, detecting, pedestrians, ,, especially,  , labelled, data, limited36, .] 

>> PoS Tags are: 
[('worked', 'VERB'), ('remarkably', 'ADV'), ('recognizing', 'VERB'), ('handwritten', 'ADJ'), (' ', 'SPACE'), ('digits', 'NOUN'), ('detecting', 'VERB'), ('pedestrians', 'NOUN'), (',', 'PUNCT'), ('especially', 'ADV'), (' ', 'SPACE'), ('labelled', 'VERB'), ('data', 'NOUN'), ('limited36', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('worked', 'ROOT'), ('remarkably', 'advmod'), ('recognizing', 'pcomp'), ('handwritten', 'amod'), (' ', 'compound'), ('digits', 'dobj'), ('detecting', 'pcomp'), ('pedestrians', 'dobj'), (',', 'punct'), ('especially', 'advmod'), (' ', 'pobj'), ('labelled', 'amod'), ('data', 'nsubj'), ('limited36', 'acomp'), ('.', 'punct')]

>> Bigrams: 
[[worked, remarkably], [remarkably, recognizing], [recognizing, handwritten], [handwritten,  ], [ , digits], [digits, detecting], [detecting, pedestrians], [pedestrians, ,], [,, especially], [especially,  ], [ , labelled], [labelled, data], [data, limited36], [limited36, .]]

>> Trigrams: 
[[worked, remarkably, recognizing], [remarkably, recognizing, handwritten], [recognizing, handwritten,  ], [handwritten,  , digits], [ , digits, detecting], [digits, detecting, pedestrians], [detecting, pedestrians, ,], [pedestrians, ,, especially], [,, especially,  ], [especially,  , labelled], [ , labelled, data], [labelled, data, limited36], [data, limited36, .]]

>> Noun Phrases are: 
[handwritten  digits, pedestrians, the amount]

>> Named Entities are: 
[]


============================ Sentence 180 =============================

  The first major application of this pre-training approach was in  speech recognition, and it was made possible by the advent of fast  graphics processing units (GPUs) that were convenient to program37  and allowed researchers to train networks 10 or 20 times faster. 


>> Tokens are: 
[  , major, application, pre, -, training, approach,  , speech, recognition, ,, possible, advent, fast,  , graphics, processing, units, (, GPUs, ), convenient, program37,  , allowed, researchers, train, networks, 10, 20, times, faster, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('major', 'ADJ'), ('application', 'NOUN'), ('pre', 'ADJ'), ('-', 'ADJ'), ('training', 'ADJ'), ('approach', 'NOUN'), (' ', 'SPACE'), ('speech', 'NOUN'), ('recognition', 'NOUN'), (',', 'PUNCT'), ('possible', 'ADJ'), ('advent', 'NOUN'), ('fast', 'ADJ'), (' ', 'SPACE'), ('graphics', 'NOUN'), ('processing', 'NOUN'), ('units', 'NOUN'), ('(', 'PUNCT'), ('GPUs', 'NOUN'), (')', 'PUNCT'), ('convenient', 'ADJ'), ('program37', 'VERB'), (' ', 'SPACE'), ('allowed', 'VERB'), ('researchers', 'NOUN'), ('train', 'VERB'), ('networks', 'NOUN'), ('10', 'NUM'), ('20', 'NUM'), ('times', 'NOUN'), ('faster', 'ADV'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'dep'), ('major', 'amod'), ('application', 'nsubj'), ('pre', 'amod'), ('-', 'amod'), ('training', 'amod'), ('approach', 'pobj'), (' ', 'nummod'), ('speech', 'compound'), ('recognition', 'pobj'), (',', 'punct'), ('possible', 'oprd'), ('advent', 'pobj'), ('fast', 'amod'), (' ', 'compound'), ('graphics', 'compound'), ('processing', 'compound'), ('units', 'pobj'), ('(', 'punct'), ('GPUs', 'appos'), (')', 'punct'), ('convenient', 'acomp'), ('program37', 'xcomp'), (' ', 'dobj'), ('allowed', 'conj'), ('researchers', 'nsubj'), ('train', 'ccomp'), ('networks', 'dobj'), ('10', 'nummod'), ('20', 'conj'), ('times', 'npadvmod'), ('faster', 'advmod'), ('.', 'punct')]

>> Bigrams: 
[[  , major], [major, application], [application, pre], [pre, -], [-, training], [training, approach], [approach,  ], [ , speech], [speech, recognition], [recognition, ,], [,, possible], [possible, advent], [advent, fast], [fast,  ], [ , graphics], [graphics, processing], [processing, units], [units, (], [(, GPUs], [GPUs, )], [), convenient], [convenient, program37], [program37,  ], [ , allowed], [allowed, researchers], [researchers, train], [train, networks], [networks, 10], [10, 20], [20, times], [times, faster], [faster, .]]

>> Trigrams: 
[[  , major, application], [major, application, pre], [application, pre, -], [pre, -, training], [-, training, approach], [training, approach,  ], [approach,  , speech], [ , speech, recognition], [speech, recognition, ,], [recognition, ,, possible], [,, possible, advent], [possible, advent, fast], [advent, fast,  ], [fast,  , graphics], [ , graphics, processing], [graphics, processing, units], [processing, units, (], [units, (, GPUs], [(, GPUs, )], [GPUs, ), convenient], [), convenient, program37], [convenient, program37,  ], [program37,  , allowed], [ , allowed, researchers], [allowed, researchers, train], [researchers, train, networks], [train, networks, 10], [networks, 10, 20], [10, 20, times], [20, times, faster], [times, faster, .]]

>> Noun Phrases are: 
[  The first major application, this pre-training approach,  speech recognition, it, the advent, fast  graphics processing units, GPUs, researchers, networks]

>> Named Entities are: 
[('first', 'ORDINAL'), ('10', 'CARDINAL'), ('20', 'CARDINAL')]


============================ Sentence 181 =============================

In  2009, the approach was used to map short temporal windows of coef- ficients extracted from a sound wave to a set of probabilities for the  various fragments of speech that might be represented by the frame  in the centre of the window. 


>> Tokens are: 
[ , 2009, ,, approach, map, short, temporal, windows, coef-, ficients, extracted, sound, wave, set, probabilities,  , fragments, speech, represented, frame,  , centre, window, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('2009', 'NUM'), (',', 'PUNCT'), ('approach', 'NOUN'), ('map', 'VERB'), ('short', 'ADJ'), ('temporal', 'ADJ'), ('windows', 'NOUN'), ('coef-', 'ADJ'), ('ficients', 'NOUN'), ('extracted', 'VERB'), ('sound', 'ADJ'), ('wave', 'NOUN'), ('set', 'NOUN'), ('probabilities', 'NOUN'), (' ', 'SPACE'), ('fragments', 'NOUN'), ('speech', 'NOUN'), ('represented', 'VERB'), ('frame', 'NOUN'), (' ', 'SPACE'), ('centre', 'NOUN'), ('window', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'pobj'), ('2009', 'nummod'), (',', 'punct'), ('approach', 'nsubjpass'), ('map', 'xcomp'), ('short', 'amod'), ('temporal', 'amod'), ('windows', 'dobj'), ('coef-', 'amod'), ('ficients', 'pobj'), ('extracted', 'acl'), ('sound', 'compound'), ('wave', 'pobj'), ('set', 'pobj'), ('probabilities', 'pobj'), (' ', 'amod'), ('fragments', 'pobj'), ('speech', 'pobj'), ('represented', 'relcl'), ('frame', 'pobj'), (' ', 'appos'), ('centre', 'pobj'), ('window', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[ , 2009], [2009, ,], [,, approach], [approach, map], [map, short], [short, temporal], [temporal, windows], [windows, coef-], [coef-, ficients], [ficients, extracted], [extracted, sound], [sound, wave], [wave, set], [set, probabilities], [probabilities,  ], [ , fragments], [fragments, speech], [speech, represented], [represented, frame], [frame,  ], [ , centre], [centre, window], [window, .]]

>> Trigrams: 
[[ , 2009, ,], [2009, ,, approach], [,, approach, map], [approach, map, short], [map, short, temporal], [short, temporal, windows], [temporal, windows, coef-], [windows, coef-, ficients], [coef-, ficients, extracted], [ficients, extracted, sound], [extracted, sound, wave], [sound, wave, set], [wave, set, probabilities], [set, probabilities,  ], [probabilities,  , fragments], [ , fragments, speech], [fragments, speech, represented], [speech, represented, frame], [represented, frame,  ], [frame,  , centre], [ , centre, window], [centre, window, .]]

>> Noun Phrases are: 
[the approach, short temporal windows, coef- ficients, a sound wave, a set, probabilities, the  various fragments, speech, the frame, the centre, the window]

>> Named Entities are: 
[('2009', 'DATE')]


============================ Sentence 182 =============================

It achieved record-breaking results on a  standard speech recognition benchmark that used a small vocabu- lary38 and was quickly developed to give record-breaking results on  a large vocabulary task39. 


>> Tokens are: 
[achieved, record, -, breaking, results,  , standard, speech, recognition, benchmark, small, vocabu-, lary38, quickly, developed, record, -, breaking, results,  , large, vocabulary, task39, .] 

>> PoS Tags are: 
[('achieved', 'VERB'), ('record', 'NOUN'), ('-', 'PUNCT'), ('breaking', 'VERB'), ('results', 'NOUN'), (' ', 'SPACE'), ('standard', 'ADJ'), ('speech', 'NOUN'), ('recognition', 'NOUN'), ('benchmark', 'NOUN'), ('small', 'ADJ'), ('vocabu-', 'ADJ'), ('lary38', 'NOUN'), ('quickly', 'ADV'), ('developed', 'VERB'), ('record', 'NOUN'), ('-', 'PUNCT'), ('breaking', 'VERB'), ('results', 'NOUN'), (' ', 'SPACE'), ('large', 'ADJ'), ('vocabulary', 'ADJ'), ('task39', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('achieved', 'ROOT'), ('record', 'npadvmod'), ('-', 'punct'), ('breaking', 'amod'), ('results', 'dobj'), (' ', 'nmod'), ('standard', 'amod'), ('speech', 'compound'), ('recognition', 'compound'), ('benchmark', 'pobj'), ('small', 'amod'), ('vocabu-', 'amod'), ('lary38', 'dobj'), ('quickly', 'advmod'), ('developed', 'conj'), ('record', 'npadvmod'), ('-', 'punct'), ('breaking', 'amod'), ('results', 'dobj'), (' ', 'pobj'), ('large', 'amod'), ('vocabulary', 'amod'), ('task39', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[achieved, record], [record, -], [-, breaking], [breaking, results], [results,  ], [ , standard], [standard, speech], [speech, recognition], [recognition, benchmark], [benchmark, small], [small, vocabu-], [vocabu-, lary38], [lary38, quickly], [quickly, developed], [developed, record], [record, -], [-, breaking], [breaking, results], [results,  ], [ , large], [large, vocabulary], [vocabulary, task39], [task39, .]]

>> Trigrams: 
[[achieved, record, -], [record, -, breaking], [-, breaking, results], [breaking, results,  ], [results,  , standard], [ , standard, speech], [standard, speech, recognition], [speech, recognition, benchmark], [recognition, benchmark, small], [benchmark, small, vocabu-], [small, vocabu-, lary38], [vocabu-, lary38, quickly], [lary38, quickly, developed], [quickly, developed, record], [developed, record, -], [record, -, breaking], [-, breaking, results], [breaking, results,  ], [results,  , large], [ , large, vocabulary], [large, vocabulary, task39], [vocabulary, task39, .]]

>> Noun Phrases are: 
[It, record-breaking results, a  standard speech recognition benchmark, a small vocabu- lary38, record-breaking results, a large vocabulary task39]

>> Named Entities are: 
[('lary38', 'PERSON')]


============================ Sentence 183 =============================

By 2012, versions of the deep net from 2009  were being developed by many of the major speech groups6 and were  already being deployed in Android phones. 


>> Tokens are: 
[2012, ,, versions, deep, net, 2009,  , developed, major, speech, groups6,  , deployed, Android, phones, .] 

>> PoS Tags are: 
[('2012', 'NUM'), (',', 'PUNCT'), ('versions', 'NOUN'), ('deep', 'ADJ'), ('net', 'NOUN'), ('2009', 'NUM'), (' ', 'SPACE'), ('developed', 'VERB'), ('major', 'ADJ'), ('speech', 'NOUN'), ('groups6', 'NOUN'), (' ', 'SPACE'), ('deployed', 'VERB'), ('Android', 'PROPN'), ('phones', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('2012', 'pobj'), (',', 'punct'), ('versions', 'nsubjpass'), ('deep', 'amod'), ('net', 'pobj'), ('2009', 'pobj'), (' ', 'nsubjpass'), ('developed', 'ROOT'), ('major', 'amod'), ('speech', 'compound'), ('groups6', 'pobj'), (' ', 'nsubjpass'), ('deployed', 'conj'), ('Android', 'compound'), ('phones', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[2012, ,], [,, versions], [versions, deep], [deep, net], [net, 2009], [2009,  ], [ , developed], [developed, major], [major, speech], [speech, groups6], [groups6,  ], [ , deployed], [deployed, Android], [Android, phones], [phones, .]]

>> Trigrams: 
[[2012, ,, versions], [,, versions, deep], [versions, deep, net], [deep, net, 2009], [net, 2009,  ], [2009,  , developed], [ , developed, major], [developed, major, speech], [major, speech, groups6], [speech, groups6,  ], [groups6,  , deployed], [ , deployed, Android], [deployed, Android, phones], [Android, phones, .]]

>> Noun Phrases are: 
[versions, the deep net, the major speech groups6, Android phones]

>> Named Entities are: 
[('2012', 'DATE'), ('2009', 'DATE'), ('Android', 'ORG')]


============================ Sentence 184 =============================

For smaller data sets,  unsupervised pre-training helps to prevent overfitting40, leading to  significantly better generalization when the number of labelled exam- ples is small, or in a transfer setting where we have lots of examples  for some ‘source’ tasks but very few for some ‘target’ tasks. 


>> Tokens are: 
[smaller, data, sets, ,,  , unsupervised, pre, -, training, helps, prevent, overfitting40, ,, leading,  , significantly, better, generalization, number, labelled, exam-, ples, small, ,, transfer, setting, lots, examples,  , ‘, source, ’, tasks, ‘, target, ’, tasks, .] 

>> PoS Tags are: 
[('smaller', 'ADJ'), ('data', 'NOUN'), ('sets', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('unsupervised', 'ADJ'), ('pre', 'ADJ'), ('-', 'ADJ'), ('training', 'NOUN'), ('helps', 'NOUN'), ('prevent', 'VERB'), ('overfitting40', 'NOUN'), (',', 'PUNCT'), ('leading', 'VERB'), (' ', 'SPACE'), ('significantly', 'ADV'), ('better', 'ADJ'), ('generalization', 'NOUN'), ('number', 'NOUN'), ('labelled', 'VERB'), ('exam-', 'NOUN'), ('ples', 'NOUN'), ('small', 'ADJ'), (',', 'PUNCT'), ('transfer', 'NOUN'), ('setting', 'VERB'), ('lots', 'NOUN'), ('examples', 'NOUN'), (' ', 'SPACE'), ('‘', 'PUNCT'), ('source', 'NOUN'), ('’', 'PUNCT'), ('tasks', 'NOUN'), ('‘', 'PUNCT'), ('target', 'NOUN'), ('’', 'PUNCT'), ('tasks', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('smaller', 'amod'), ('data', 'compound'), ('sets', 'pobj'), (',', 'punct'), (' ', 'nsubj'), ('unsupervised', 'amod'), ('pre', 'amod'), ('-', 'amod'), ('training', 'amod'), ('helps', 'ROOT'), ('prevent', 'xcomp'), ('overfitting40', 'dobj'), (',', 'punct'), ('leading', 'advcl'), (' ', 'pobj'), ('significantly', 'advmod'), ('better', 'amod'), ('generalization', 'dobj'), ('number', 'nsubj'), ('labelled', 'amod'), ('exam-', 'compound'), ('ples', 'pobj'), ('small', 'acomp'), (',', 'punct'), ('transfer', 'pobj'), ('setting', 'acl'), ('lots', 'dobj'), ('examples', 'pobj'), (' ', 'pobj'), ('‘', 'punct'), ('source', 'nmod'), ('’', 'punct'), ('tasks', 'pobj'), ('‘', 'punct'), ('target', 'nmod'), ('’', 'punct'), ('tasks', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[smaller, data], [data, sets], [sets, ,], [,,  ], [ , unsupervised], [unsupervised, pre], [pre, -], [-, training], [training, helps], [helps, prevent], [prevent, overfitting40], [overfitting40, ,], [,, leading], [leading,  ], [ , significantly], [significantly, better], [better, generalization], [generalization, number], [number, labelled], [labelled, exam-], [exam-, ples], [ples, small], [small, ,], [,, transfer], [transfer, setting], [setting, lots], [lots, examples], [examples,  ], [ , ‘], [‘, source], [source, ’], [’, tasks], [tasks, ‘], [‘, target], [target, ’], [’, tasks], [tasks, .]]

>> Trigrams: 
[[smaller, data, sets], [data, sets, ,], [sets, ,,  ], [,,  , unsupervised], [ , unsupervised, pre], [unsupervised, pre, -], [pre, -, training], [-, training, helps], [training, helps, prevent], [helps, prevent, overfitting40], [prevent, overfitting40, ,], [overfitting40, ,, leading], [,, leading,  ], [leading,  , significantly], [ , significantly, better], [significantly, better, generalization], [better, generalization, number], [generalization, number, labelled], [number, labelled, exam-], [labelled, exam-, ples], [exam-, ples, small], [ples, small, ,], [small, ,, transfer], [,, transfer, setting], [transfer, setting, lots], [setting, lots, examples], [lots, examples,  ], [examples,  , ‘], [ , ‘, source], [‘, source, ’], [source, ’, tasks], [’, tasks, ‘], [tasks, ‘, target], [‘, target, ’], [target, ’, tasks], [’, tasks, .]]

>> Noun Phrases are: 
[smaller data sets, overfitting40, significantly better generalization, the number, labelled exam- ples, a transfer, we, lots, examples, some ‘source’ tasks, some ‘target’ tasks]

>> Named Entities are: 
[]


============================ Sentence 185 =============================

Once deep  learning had been rehabilitated, it turned out that the pre-training  stage was only needed for small data sets. 


>> Tokens are: 
[deep,  , learning, rehabilitated, ,, turned, pre, -, training,  , stage, needed, small, data, sets, .] 

>> PoS Tags are: 
[('deep', 'ADJ'), (' ', 'SPACE'), ('learning', 'NOUN'), ('rehabilitated', 'VERB'), (',', 'PUNCT'), ('turned', 'VERB'), ('pre', 'ADJ'), ('-', 'ADJ'), ('training', 'ADJ'), (' ', 'SPACE'), ('stage', 'NOUN'), ('needed', 'VERB'), ('small', 'ADJ'), ('data', 'NOUN'), ('sets', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('deep', 'amod'), (' ', 'compound'), ('learning', 'nsubjpass'), ('rehabilitated', 'advcl'), (',', 'punct'), ('turned', 'ROOT'), ('pre', 'amod'), ('-', 'amod'), ('training', 'amod'), (' ', 'compound'), ('stage', 'nsubjpass'), ('needed', 'ccomp'), ('small', 'amod'), ('data', 'compound'), ('sets', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[deep,  ], [ , learning], [learning, rehabilitated], [rehabilitated, ,], [,, turned], [turned, pre], [pre, -], [-, training], [training,  ], [ , stage], [stage, needed], [needed, small], [small, data], [data, sets], [sets, .]]

>> Trigrams: 
[[deep,  , learning], [ , learning, rehabilitated], [learning, rehabilitated, ,], [rehabilitated, ,, turned], [,, turned, pre], [turned, pre, -], [pre, -, training], [-, training,  ], [training,  , stage], [ , stage, needed], [stage, needed, small], [needed, small, data], [small, data, sets], [data, sets, .]]

>> Noun Phrases are: 
[Once deep  learning, it, the pre-training  stage, small data sets]

>> Named Entities are: 
[]


============================ Sentence 186 =============================

  There was, however, one particular type of deep, feedforward net- work that was much easier to train and generalized much better than  networks with full connectivity between adjacent layers. 


>> Tokens are: 
[  , ,, ,, particular, type, deep, ,, feedforward, net-, work, easier, train, generalized, better,  , networks, connectivity, adjacent, layers, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), (',', 'PUNCT'), (',', 'PUNCT'), ('particular', 'ADJ'), ('type', 'NOUN'), ('deep', 'ADJ'), (',', 'PUNCT'), ('feedforward', 'NOUN'), ('net-', 'NOUN'), ('work', 'NOUN'), ('easier', 'ADJ'), ('train', 'VERB'), ('generalized', 'VERB'), ('better', 'ADJ'), (' ', 'SPACE'), ('networks', 'NOUN'), ('connectivity', 'NOUN'), ('adjacent', 'ADJ'), ('layers', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'dep'), (',', 'punct'), (',', 'punct'), ('particular', 'amod'), ('type', 'attr'), ('deep', 'amod'), (',', 'punct'), ('feedforward', 'compound'), ('net-', 'compound'), ('work', 'pobj'), ('easier', 'acomp'), ('train', 'xcomp'), ('generalized', 'conj'), ('better', 'advmod'), (' ', 'compound'), ('networks', 'pobj'), ('connectivity', 'pobj'), ('adjacent', 'amod'), ('layers', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[  , ,], [,, ,], [,, particular], [particular, type], [type, deep], [deep, ,], [,, feedforward], [feedforward, net-], [net-, work], [work, easier], [easier, train], [train, generalized], [generalized, better], [better,  ], [ , networks], [networks, connectivity], [connectivity, adjacent], [adjacent, layers], [layers, .]]

>> Trigrams: 
[[  , ,, ,], [,, ,, particular], [,, particular, type], [particular, type, deep], [type, deep, ,], [deep, ,, feedforward], [,, feedforward, net-], [feedforward, net-, work], [net-, work, easier], [work, easier, train], [easier, train, generalized], [train, generalized, better], [generalized, better,  ], [better,  , networks], [ , networks, connectivity], [networks, connectivity, adjacent], [connectivity, adjacent, layers], [adjacent, layers, .]]

>> Noun Phrases are: 
[one particular type, deep, feedforward net- work,  networks, full connectivity, adjacent layers]

>> Named Entities are: 
[('one', 'CARDINAL')]


============================ Sentence 187 =============================

This was  the convolutional neural network (ConvNet)41,42. 


>> Tokens are: 
[ , convolutional, neural, network, (, ConvNet)41,42, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('convolutional', 'ADJ'), ('neural', 'ADJ'), ('network', 'NOUN'), ('(', 'PUNCT'), ('ConvNet)41,42', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'attr'), ('convolutional', 'amod'), ('neural', 'amod'), ('network', 'attr'), ('(', 'punct'), ('ConvNet)41,42', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[ , convolutional], [convolutional, neural], [neural, network], [network, (], [(, ConvNet)41,42], [ConvNet)41,42, .]]

>> Trigrams: 
[[ , convolutional, neural], [convolutional, neural, network], [neural, network, (], [network, (, ConvNet)41,42], [(, ConvNet)41,42, .]]

>> Noun Phrases are: 
[the convolutional neural network, ConvNet)41,42]

>> Named Entities are: 
[('ConvNet)41,42', 'PERSON')]


============================ Sentence 188 =============================

It achieved many  practical successes during the period when neural networks were out  of favour and it has recently been widely adopted by the computer- vision community. 


>> Tokens are: 
[achieved,  , practical, successes, period, neural, networks,  , favour, recently, widely, adopted, computer-, vision, community, .] 

>> PoS Tags are: 
[('achieved', 'VERB'), (' ', 'SPACE'), ('practical', 'ADJ'), ('successes', 'NOUN'), ('period', 'NOUN'), ('neural', 'ADJ'), ('networks', 'NOUN'), (' ', 'SPACE'), ('favour', 'NOUN'), ('recently', 'ADV'), ('widely', 'ADV'), ('adopted', 'VERB'), ('computer-', 'NOUN'), ('vision', 'NOUN'), ('community', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('achieved', 'ROOT'), (' ', 'nmod'), ('practical', 'amod'), ('successes', 'dobj'), ('period', 'pobj'), ('neural', 'amod'), ('networks', 'nsubj'), (' ', 'pobj'), ('favour', 'pobj'), ('recently', 'advmod'), ('widely', 'advmod'), ('adopted', 'conj'), ('computer-', 'compound'), ('vision', 'compound'), ('community', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[achieved,  ], [ , practical], [practical, successes], [successes, period], [period, neural], [neural, networks], [networks,  ], [ , favour], [favour, recently], [recently, widely], [widely, adopted], [adopted, computer-], [computer-, vision], [vision, community], [community, .]]

>> Trigrams: 
[[achieved,  , practical], [ , practical, successes], [practical, successes, period], [successes, period, neural], [period, neural, networks], [neural, networks,  ], [networks,  , favour], [ , favour, recently], [favour, recently, widely], [recently, widely, adopted], [widely, adopted, computer-], [adopted, computer-, vision], [computer-, vision, community], [vision, community, .]]

>> Noun Phrases are: 
[It, many  practical successes, the period, neural networks, favour, it, the computer- vision community]

>> Named Entities are: 
[]


============================ Sentence 189 =============================

  Convolutional neural networks  ConvNets are designed to process data that come in the form of  multiple arrays, for example a colour image composed of three 2D  arrays containing pixel intensities in the three colour channels. 


>> Tokens are: 
[  , Convolutional, neural, networks,  , ConvNets, designed, process, data, come, form,  , multiple, arrays, ,, example, colour, image, composed, 2D,  , arrays, containing, pixel, intensities, colour, channels, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('Convolutional', 'ADJ'), ('neural', 'ADJ'), ('networks', 'NOUN'), (' ', 'SPACE'), ('ConvNets', 'PROPN'), ('designed', 'VERB'), ('process', 'VERB'), ('data', 'NOUN'), ('come', 'VERB'), ('form', 'NOUN'), (' ', 'SPACE'), ('multiple', 'ADJ'), ('arrays', 'NOUN'), (',', 'PUNCT'), ('example', 'NOUN'), ('colour', 'NOUN'), ('image', 'NOUN'), ('composed', 'VERB'), ('2D', 'NOUN'), (' ', 'SPACE'), ('arrays', 'NOUN'), ('containing', 'VERB'), ('pixel', 'ADJ'), ('intensities', 'NOUN'), ('colour', 'NOUN'), ('channels', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'nmod'), ('Convolutional', 'amod'), ('neural', 'amod'), ('networks', 'nsubjpass'), (' ', 'appos'), ('ConvNets', 'nsubjpass'), ('designed', 'ROOT'), ('process', 'xcomp'), ('data', 'dobj'), ('come', 'relcl'), ('form', 'pobj'), (' ', 'nmod'), ('multiple', 'amod'), ('arrays', 'pobj'), (',', 'punct'), ('example', 'pobj'), ('colour', 'compound'), ('image', 'parataxis'), ('composed', 'acl'), ('2D', 'pobj'), (' ', 'punct'), ('arrays', 'advmod'), ('containing', 'advcl'), ('pixel', 'amod'), ('intensities', 'dobj'), ('colour', 'compound'), ('channels', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[  , Convolutional], [Convolutional, neural], [neural, networks], [networks,  ], [ , ConvNets], [ConvNets, designed], [designed, process], [process, data], [data, come], [come, form], [form,  ], [ , multiple], [multiple, arrays], [arrays, ,], [,, example], [example, colour], [colour, image], [image, composed], [composed, 2D], [2D,  ], [ , arrays], [arrays, containing], [containing, pixel], [pixel, intensities], [intensities, colour], [colour, channels], [channels, .]]

>> Trigrams: 
[[  , Convolutional, neural], [Convolutional, neural, networks], [neural, networks,  ], [networks,  , ConvNets], [ , ConvNets, designed], [ConvNets, designed, process], [designed, process, data], [process, data, come], [data, come, form], [come, form,  ], [form,  , multiple], [ , multiple, arrays], [multiple, arrays, ,], [arrays, ,, example], [,, example, colour], [example, colour, image], [colour, image, composed], [image, composed, 2D], [composed, 2D,  ], [2D,  , arrays], [ , arrays, containing], [arrays, containing, pixel], [containing, pixel, intensities], [pixel, intensities, colour], [intensities, colour, channels], [colour, channels, .]]

>> Noun Phrases are: 
[  Convolutional neural networks, ConvNets, data, the form,  multiple arrays, example, three 2D, pixel intensities, the three colour channels]

>> Named Entities are: 
[('three', 'CARDINAL'), ('three', 'CARDINAL')]


============================ Sentence 190 =============================

Many  data modalities are in the form of multiple arrays: 1D for signals and  sequences, including language; 2D for images or audio spectrograms;  and 3D for video or volumetric images. 


>> Tokens are: 
[ , data, modalities, form, multiple, arrays, :, 1D, signals,  , sequences, ,, including, language, ;, 2D, images, audio, spectrograms, ;,  , 3D, video, volumetric, images, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('data', 'NOUN'), ('modalities', 'NOUN'), ('form', 'NOUN'), ('multiple', 'ADJ'), ('arrays', 'NOUN'), (':', 'PUNCT'), ('1D', 'NOUN'), ('signals', 'NOUN'), (' ', 'SPACE'), ('sequences', 'NOUN'), (',', 'PUNCT'), ('including', 'VERB'), ('language', 'NOUN'), (';', 'PUNCT'), ('2D', 'NOUN'), ('images', 'NOUN'), ('audio', 'NOUN'), ('spectrograms', 'NOUN'), (';', 'PUNCT'), (' ', 'SPACE'), ('3D', 'NOUN'), ('video', 'NOUN'), ('volumetric', 'ADJ'), ('images', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'compound'), ('data', 'compound'), ('modalities', 'nsubj'), ('form', 'pobj'), ('multiple', 'amod'), ('arrays', 'pobj'), (':', 'punct'), ('1D', 'attr'), ('signals', 'pobj'), (' ', 'compound'), ('sequences', 'conj'), (',', 'punct'), ('including', 'prep'), ('language', 'pobj'), (';', 'punct'), ('2D', 'conj'), ('images', 'pobj'), ('audio', 'compound'), ('spectrograms', 'conj'), (';', 'punct'), (' ', 'conj'), ('3D', 'conj'), ('video', 'nmod'), ('volumetric', 'conj'), ('images', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[ , data], [data, modalities], [modalities, form], [form, multiple], [multiple, arrays], [arrays, :], [:, 1D], [1D, signals], [signals,  ], [ , sequences], [sequences, ,], [,, including], [including, language], [language, ;], [;, 2D], [2D, images], [images, audio], [audio, spectrograms], [spectrograms, ;], [;,  ], [ , 3D], [3D, video], [video, volumetric], [volumetric, images], [images, .]]

>> Trigrams: 
[[ , data, modalities], [data, modalities, form], [modalities, form, multiple], [form, multiple, arrays], [multiple, arrays, :], [arrays, :, 1D], [:, 1D, signals], [1D, signals,  ], [signals,  , sequences], [ , sequences, ,], [sequences, ,, including], [,, including, language], [including, language, ;], [language, ;, 2D], [;, 2D, images], [2D, images, audio], [images, audio, spectrograms], [audio, spectrograms, ;], [spectrograms, ;,  ], [;,  , 3D], [ , 3D, video], [3D, video, volumetric], [video, volumetric, images], [volumetric, images, .]]

>> Noun Phrases are: 
[Many  data modalities, the form, multiple arrays, 1D, signals,  sequences, language, 2D, images, audio spectrograms, 3D, video or volumetric images]

>> Named Entities are: 
[('2D', 'CARDINAL')]


============================ Sentence 191 =============================

There are four key ideas  behind ConvNets that take advantage of the properties of natural  signals: local connections, shared weights, pooling and the use of  many layers. 


>> Tokens are: 
[key, ideas,  , ConvNets, advantage, properties, natural,  , signals, :, local, connections, ,, shared, weights, ,, pooling, use,  , layers, .] 

>> PoS Tags are: 
[('key', 'ADJ'), ('ideas', 'NOUN'), (' ', 'SPACE'), ('ConvNets', 'PROPN'), ('advantage', 'NOUN'), ('properties', 'NOUN'), ('natural', 'ADJ'), (' ', 'SPACE'), ('signals', 'NOUN'), (':', 'PUNCT'), ('local', 'ADJ'), ('connections', 'NOUN'), (',', 'PUNCT'), ('shared', 'VERB'), ('weights', 'NOUN'), (',', 'PUNCT'), ('pooling', 'VERB'), ('use', 'NOUN'), (' ', 'SPACE'), ('layers', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('key', 'amod'), ('ideas', 'attr'), (' ', 'appos'), ('ConvNets', 'pobj'), ('advantage', 'dobj'), ('properties', 'pobj'), ('natural', 'amod'), (' ', 'compound'), ('signals', 'pobj'), (':', 'punct'), ('local', 'amod'), ('connections', 'appos'), (',', 'punct'), ('shared', 'amod'), ('weights', 'conj'), (',', 'punct'), ('pooling', 'conj'), ('use', 'conj'), (' ', 'pobj'), ('layers', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[key, ideas], [ideas,  ], [ , ConvNets], [ConvNets, advantage], [advantage, properties], [properties, natural], [natural,  ], [ , signals], [signals, :], [:, local], [local, connections], [connections, ,], [,, shared], [shared, weights], [weights, ,], [,, pooling], [pooling, use], [use,  ], [ , layers], [layers, .]]

>> Trigrams: 
[[key, ideas,  ], [ideas,  , ConvNets], [ , ConvNets, advantage], [ConvNets, advantage, properties], [advantage, properties, natural], [properties, natural,  ], [natural,  , signals], [ , signals, :], [signals, :, local], [:, local, connections], [local, connections, ,], [connections, ,, shared], [,, shared, weights], [shared, weights, ,], [weights, ,, pooling], [,, pooling, use], [pooling, use,  ], [use,  , layers], [ , layers, .]]

>> Noun Phrases are: 
[four key ideas, ConvNets, advantage, the properties, natural  signals, local connections, shared weights, the use, many layers]

>> Named Entities are: 
[('four', 'CARDINAL')]


============================ Sentence 192 =============================

  The architecture of a typical ConvNet (Fig. 2) is structured as a  series of stages. 


>> Tokens are: 
[  , architecture, typical, ConvNet, (, Fig, ., 2, ), structured,  , series, stages, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('architecture', 'NOUN'), ('typical', 'ADJ'), ('ConvNet', 'PROPN'), ('(', 'PUNCT'), ('Fig', 'PROPN'), ('.', 'PUNCT'), ('2', 'NUM'), (')', 'PUNCT'), ('structured', 'VERB'), (' ', 'SPACE'), ('series', 'NOUN'), ('stages', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'nmod'), ('architecture', 'nsubjpass'), ('typical', 'amod'), ('ConvNet', 'pobj'), ('(', 'punct'), ('Fig', 'appos'), ('.', 'punct'), ('2', 'nummod'), (')', 'punct'), ('structured', 'ROOT'), (' ', 'compound'), ('series', 'pobj'), ('stages', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[  , architecture], [architecture, typical], [typical, ConvNet], [ConvNet, (], [(, Fig], [Fig, .], [., 2], [2, )], [), structured], [structured,  ], [ , series], [series, stages], [stages, .]]

>> Trigrams: 
[[  , architecture, typical], [architecture, typical, ConvNet], [typical, ConvNet, (], [ConvNet, (, Fig], [(, Fig, .], [Fig, ., 2], [., 2, )], [2, ), structured], [), structured,  ], [structured,  , series], [ , series, stages], [series, stages, .]]

>> Noun Phrases are: 
[  The architecture, a typical ConvNet, Fig, a  series, stages]

>> Named Entities are: 
[('ConvNet', 'ORG'), ('2', 'CARDINAL')]


============================ Sentence 193 =============================

The first few stages are composed of two types of  layers: convolutional layers and pooling layers. 


>> Tokens are: 
[stages, composed, types,  , layers, :, convolutional, layers, pooling, layers, .] 

>> PoS Tags are: 
[('stages', 'NOUN'), ('composed', 'VERB'), ('types', 'NOUN'), (' ', 'SPACE'), ('layers', 'NOUN'), (':', 'PUNCT'), ('convolutional', 'ADJ'), ('layers', 'NOUN'), ('pooling', 'VERB'), ('layers', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('stages', 'nsubjpass'), ('composed', 'ROOT'), ('types', 'pobj'), (' ', 'compound'), ('layers', 'pobj'), (':', 'punct'), ('convolutional', 'amod'), ('layers', 'appos'), ('pooling', 'conj'), ('layers', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[stages, composed], [composed, types], [types,  ], [ , layers], [layers, :], [:, convolutional], [convolutional, layers], [layers, pooling], [pooling, layers], [layers, .]]

>> Trigrams: 
[[stages, composed, types], [composed, types,  ], [types,  , layers], [ , layers, :], [layers, :, convolutional], [:, convolutional, layers], [convolutional, layers, pooling], [layers, pooling, layers], [pooling, layers, .]]

>> Noun Phrases are: 
[The first few stages, two types,  layers, convolutional layers, layers]

>> Named Entities are: 
[('first', 'ORDINAL'), ('two', 'CARDINAL')]


============================ Sentence 194 =============================

Units in a convolu- tional layer are organized in feature maps, within which each unit  is connected to local patches in the feature maps of the previous  layer through a set of weights called a filter bank. 


>> Tokens are: 
[Units, convolu-, tional, layer, organized, feature, maps, ,, unit,  , connected, local, patches, feature, maps, previous,  , layer, set, weights, called, filter, bank, .] 

>> PoS Tags are: 
[('Units', 'NOUN'), ('convolu-', 'ADJ'), ('tional', 'ADJ'), ('layer', 'NOUN'), ('organized', 'VERB'), ('feature', 'NOUN'), ('maps', 'NOUN'), (',', 'PUNCT'), ('unit', 'NOUN'), (' ', 'SPACE'), ('connected', 'VERB'), ('local', 'ADJ'), ('patches', 'NOUN'), ('feature', 'NOUN'), ('maps', 'NOUN'), ('previous', 'ADJ'), (' ', 'SPACE'), ('layer', 'NOUN'), ('set', 'NOUN'), ('weights', 'NOUN'), ('called', 'VERB'), ('filter', 'NOUN'), ('bank', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Units', 'nsubjpass'), ('convolu-', 'amod'), ('tional', 'amod'), ('layer', 'pobj'), ('organized', 'ROOT'), ('feature', 'compound'), ('maps', 'pobj'), (',', 'punct'), ('unit', 'nsubjpass'), (' ', 'nsubjpass'), ('connected', 'relcl'), ('local', 'amod'), ('patches', 'pobj'), ('feature', 'compound'), ('maps', 'pobj'), ('previous', 'amod'), (' ', 'compound'), ('layer', 'pobj'), ('set', 'pobj'), ('weights', 'pobj'), ('called', 'acl'), ('filter', 'compound'), ('bank', 'oprd'), ('.', 'punct')]

>> Bigrams: 
[[Units, convolu-], [convolu-, tional], [tional, layer], [layer, organized], [organized, feature], [feature, maps], [maps, ,], [,, unit], [unit,  ], [ , connected], [connected, local], [local, patches], [patches, feature], [feature, maps], [maps, previous], [previous,  ], [ , layer], [layer, set], [set, weights], [weights, called], [called, filter], [filter, bank], [bank, .]]

>> Trigrams: 
[[Units, convolu-, tional], [convolu-, tional, layer], [tional, layer, organized], [layer, organized, feature], [organized, feature, maps], [feature, maps, ,], [maps, ,, unit], [,, unit,  ], [unit,  , connected], [ , connected, local], [connected, local, patches], [local, patches, feature], [patches, feature, maps], [feature, maps, previous], [maps, previous,  ], [previous,  , layer], [ , layer, set], [layer, set, weights], [set, weights, called], [weights, called, filter], [called, filter, bank], [filter, bank, .]]

>> Noun Phrases are: 
[Units, a convolu- tional layer, feature maps, each unit, local patches, the feature maps, the previous  layer, a set, weights, a filter bank]

>> Named Entities are: 
[]


============================ Sentence 195 =============================

The result of this  local weighted sum is then passed through a non-linearity such as a  ReLU. 


>> Tokens are: 
[result,  , local, weighted, sum, passed, non, -, linearity,  , ReLU, .] 

>> PoS Tags are: 
[('result', 'NOUN'), (' ', 'SPACE'), ('local', 'ADJ'), ('weighted', 'ADJ'), ('sum', 'NOUN'), ('passed', 'VERB'), ('non', 'ADJ'), ('-', 'ADJ'), ('linearity', 'NOUN'), (' ', 'SPACE'), ('ReLU', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('result', 'nsubjpass'), (' ', 'nmod'), ('local', 'amod'), ('weighted', 'amod'), ('sum', 'pobj'), ('passed', 'ROOT'), ('non', 'amod'), ('-', 'amod'), ('linearity', 'pobj'), (' ', 'compound'), ('ReLU', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[result,  ], [ , local], [local, weighted], [weighted, sum], [sum, passed], [passed, non], [non, -], [-, linearity], [linearity,  ], [ , ReLU], [ReLU, .]]

>> Trigrams: 
[[result,  , local], [ , local, weighted], [local, weighted, sum], [weighted, sum, passed], [sum, passed, non], [passed, non, -], [non, -, linearity], [-, linearity,  ], [linearity,  , ReLU], [ , ReLU, .]]

>> Noun Phrases are: 
[The result, this  local weighted sum, a non-linearity, a  ReLU]

>> Named Entities are: 
[('ReLU', 'PRODUCT')]


============================ Sentence 196 =============================

All units in a feature map share the same filter bank. 


>> Tokens are: 
[units, feature, map, share, filter, bank, .] 

>> PoS Tags are: 
[('units', 'NOUN'), ('feature', 'NOUN'), ('map', 'NOUN'), ('share', 'VERB'), ('filter', 'NOUN'), ('bank', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('units', 'nsubj'), ('feature', 'compound'), ('map', 'pobj'), ('share', 'ROOT'), ('filter', 'compound'), ('bank', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[units, feature], [feature, map], [map, share], [share, filter], [filter, bank], [bank, .]]

>> Trigrams: 
[[units, feature, map], [feature, map, share], [map, share, filter], [share, filter, bank], [filter, bank, .]]

>> Noun Phrases are: 
[All units, a feature map, the same filter bank]

>> Named Entities are: 
[]


============================ Sentence 197 =============================

Differ- ent feature maps in a layer use different filter banks. 


>> Tokens are: 
[Differ-, ent, feature, maps, layer, use, different, filter, banks, .] 

>> PoS Tags are: 
[('Differ-', 'ADJ'), ('ent', 'NOUN'), ('feature', 'NOUN'), ('maps', 'NOUN'), ('layer', 'NOUN'), ('use', 'VERB'), ('different', 'ADJ'), ('filter', 'NOUN'), ('banks', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Differ-', 'advmod'), ('ent', 'amod'), ('feature', 'compound'), ('maps', 'nsubj'), ('layer', 'pobj'), ('use', 'ROOT'), ('different', 'amod'), ('filter', 'compound'), ('banks', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Differ-, ent], [ent, feature], [feature, maps], [maps, layer], [layer, use], [use, different], [different, filter], [filter, banks], [banks, .]]

>> Trigrams: 
[[Differ-, ent, feature], [ent, feature, maps], [feature, maps, layer], [maps, layer, use], [layer, use, different], [use, different, filter], [different, filter, banks], [filter, banks, .]]

>> Noun Phrases are: 
[ent feature maps, a layer, different filter banks]

>> Named Entities are: 
[]


============================ Sentence 198 =============================

The reason for   this architecture is twofold. 


>> Tokens are: 
[reason,   , architecture, twofold, .] 

>> PoS Tags are: 
[('reason', 'NOUN'), ('  ', 'SPACE'), ('architecture', 'NOUN'), ('twofold', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('reason', 'nsubj'), ('  ', 'pobj'), ('architecture', 'nsubj'), ('twofold', 'acomp'), ('.', 'punct')]

>> Bigrams: 
[[reason,   ], [  , architecture], [architecture, twofold], [twofold, .]]

>> Trigrams: 
[[reason,   , architecture], [  , architecture, twofold], [architecture, twofold, .]]

>> Noun Phrases are: 
[The reason, this architecture]

>> Named Entities are: 
[]


============================ Sentence 199 =============================

First, in array data such as images, local  groups of values are often highly correlated, forming distinctive local  motifs that are easily detected. 


>> Tokens are: 
[,, array, data, images, ,, local,  , groups, values, highly, correlated, ,, forming, distinctive, local,  , motifs, easily, detected, .] 

>> PoS Tags are: 
[(',', 'PUNCT'), ('array', 'NOUN'), ('data', 'NOUN'), ('images', 'NOUN'), (',', 'PUNCT'), ('local', 'ADJ'), (' ', 'SPACE'), ('groups', 'NOUN'), ('values', 'NOUN'), ('highly', 'ADV'), ('correlated', 'ADJ'), (',', 'PUNCT'), ('forming', 'VERB'), ('distinctive', 'ADJ'), ('local', 'ADJ'), (' ', 'SPACE'), ('motifs', 'NOUN'), ('easily', 'ADV'), ('detected', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(',', 'punct'), ('array', 'compound'), ('data', 'pobj'), ('images', 'pobj'), (',', 'punct'), ('local', 'amod'), (' ', 'compound'), ('groups', 'nsubj'), ('values', 'pobj'), ('highly', 'advmod'), ('correlated', 'acomp'), (',', 'punct'), ('forming', 'advcl'), ('distinctive', 'amod'), ('local', 'amod'), (' ', 'compound'), ('motifs', 'dobj'), ('easily', 'advmod'), ('detected', 'relcl'), ('.', 'punct')]

>> Bigrams: 
[[,, array], [array, data], [data, images], [images, ,], [,, local], [local,  ], [ , groups], [groups, values], [values, highly], [highly, correlated], [correlated, ,], [,, forming], [forming, distinctive], [distinctive, local], [local,  ], [ , motifs], [motifs, easily], [easily, detected], [detected, .]]

>> Trigrams: 
[[,, array, data], [array, data, images], [data, images, ,], [images, ,, local], [,, local,  ], [local,  , groups], [ , groups, values], [groups, values, highly], [values, highly, correlated], [highly, correlated, ,], [correlated, ,, forming], [,, forming, distinctive], [forming, distinctive, local], [distinctive, local,  ], [local,  , motifs], [ , motifs, easily], [motifs, easily, detected], [easily, detected, .]]

>> Noun Phrases are: 
[array data, images, local  groups, values, distinctive local  motifs]

>> Named Entities are: 
[('First', 'ORDINAL')]


============================ Sentence 200 =============================

Second, the local statistics of images  and other signals are invariant to location. 


>> Tokens are: 
[Second, ,, local, statistics, images,  , signals, invariant, location, .] 

>> PoS Tags are: 
[('Second', 'ADV'), (',', 'PUNCT'), ('local', 'ADJ'), ('statistics', 'NOUN'), ('images', 'NOUN'), (' ', 'SPACE'), ('signals', 'NOUN'), ('invariant', 'ADJ'), ('location', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Second', 'advmod'), (',', 'punct'), ('local', 'amod'), ('statistics', 'nsubj'), ('images', 'pobj'), (' ', 'appos'), ('signals', 'conj'), ('invariant', 'acomp'), ('location', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Second, ,], [,, local], [local, statistics], [statistics, images], [images,  ], [ , signals], [signals, invariant], [invariant, location], [location, .]]

>> Trigrams: 
[[Second, ,, local], [,, local, statistics], [local, statistics, images], [statistics, images,  ], [images,  , signals], [ , signals, invariant], [signals, invariant, location], [invariant, location, .]]

>> Noun Phrases are: 
[the local statistics, images, other signals, location]

>> Named Entities are: 
[('Second', 'ORDINAL')]


============================ Sentence 201 =============================

In other words, if a motif  can appear in one part of the image, it could appear anywhere, hence  the idea of units at different locations sharing the same weights and  detecting the same pattern in different parts of the array. 


>> Tokens are: 
[words, ,, motif,  , appear, image, ,, appear, ,,  , idea, units, different, locations, sharing, weights,  , detecting, pattern, different, parts, array, .] 

>> PoS Tags are: 
[('words', 'NOUN'), (',', 'PUNCT'), ('motif', 'NOUN'), (' ', 'SPACE'), ('appear', 'VERB'), ('image', 'NOUN'), (',', 'PUNCT'), ('appear', 'VERB'), (',', 'PUNCT'), (' ', 'SPACE'), ('idea', 'NOUN'), ('units', 'NOUN'), ('different', 'ADJ'), ('locations', 'NOUN'), ('sharing', 'VERB'), ('weights', 'NOUN'), (' ', 'SPACE'), ('detecting', 'VERB'), ('pattern', 'NOUN'), ('different', 'ADJ'), ('parts', 'NOUN'), ('array', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('words', 'pobj'), (',', 'punct'), ('motif', 'pobj'), (' ', 'nsubj'), ('appear', 'relcl'), ('image', 'pobj'), (',', 'punct'), ('appear', 'advcl'), (',', 'punct'), (' ', 'ROOT'), ('idea', 'dobj'), ('units', 'pobj'), ('different', 'amod'), ('locations', 'pobj'), ('sharing', 'acl'), ('weights', 'dobj'), (' ', 'nsubj'), ('detecting', 'acl'), ('pattern', 'dobj'), ('different', 'amod'), ('parts', 'pobj'), ('array', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[words, ,], [,, motif], [motif,  ], [ , appear], [appear, image], [image, ,], [,, appear], [appear, ,], [,,  ], [ , idea], [idea, units], [units, different], [different, locations], [locations, sharing], [sharing, weights], [weights,  ], [ , detecting], [detecting, pattern], [pattern, different], [different, parts], [parts, array], [array, .]]

>> Trigrams: 
[[words, ,, motif], [,, motif,  ], [motif,  , appear], [ , appear, image], [appear, image, ,], [image, ,, appear], [,, appear, ,], [appear, ,,  ], [,,  , idea], [ , idea, units], [idea, units, different], [units, different, locations], [different, locations, sharing], [locations, sharing, weights], [sharing, weights,  ], [weights,  , detecting], [ , detecting, pattern], [detecting, pattern, different], [pattern, different, parts], [different, parts, array], [parts, array, .]]

>> Noun Phrases are: 
[other words, a motif, one part, the image, it, the idea, units, different locations, the same weights, the same pattern, different parts, the array]

>> Named Entities are: 
[('one', 'CARDINAL')]


============================ Sentence 202 =============================

Mathemati- cally, the filtering operation performed by a feature map is a discrete  convolution, hence the name. 


>> Tokens are: 
[Mathemati-, cally, ,, filtering, operation, performed, feature, map, discrete,  , convolution, ,, .] 

>> PoS Tags are: 
[('Mathemati-', 'PROPN'), ('cally', 'ADV'), (',', 'PUNCT'), ('filtering', 'VERB'), ('operation', 'NOUN'), ('performed', 'VERB'), ('feature', 'NOUN'), ('map', 'NOUN'), ('discrete', 'ADJ'), (' ', 'SPACE'), ('convolution', 'NOUN'), (',', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Mathemati-', 'npadvmod'), ('cally', 'advmod'), (',', 'punct'), ('filtering', 'amod'), ('operation', 'nsubj'), ('performed', 'acl'), ('feature', 'compound'), ('map', 'pobj'), ('discrete', 'amod'), (' ', 'compound'), ('convolution', 'attr'), (',', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Mathemati-, cally], [cally, ,], [,, filtering], [filtering, operation], [operation, performed], [performed, feature], [feature, map], [map, discrete], [discrete,  ], [ , convolution], [convolution, ,], [,, .]]

>> Trigrams: 
[[Mathemati-, cally, ,], [cally, ,, filtering], [,, filtering, operation], [filtering, operation, performed], [operation, performed, feature], [performed, feature, map], [feature, map, discrete], [map, discrete,  ], [discrete,  , convolution], [ , convolution, ,], [convolution, ,, .]]

>> Noun Phrases are: 
[the filtering operation, a feature map, a discrete  convolution, hence the name]

>> Named Entities are: 
[]


============================ Sentence 203 =============================

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 204 =============================

Although the role of the convolutional layer is to detect local con- junctions of features from the previous layer, the role of the pooling  layer is to merge semantically similar features into one. 


>> Tokens are: 
[role, convolutional, layer, detect, local, con-, junctions, features, previous, layer, ,, role, pooling,  , layer, merge, semantically, similar, features, .] 

>> PoS Tags are: 
[('role', 'NOUN'), ('convolutional', 'ADJ'), ('layer', 'NOUN'), ('detect', 'VERB'), ('local', 'ADJ'), ('con-', 'ADJ'), ('junctions', 'NOUN'), ('features', 'NOUN'), ('previous', 'ADJ'), ('layer', 'NOUN'), (',', 'PUNCT'), ('role', 'NOUN'), ('pooling', 'VERB'), (' ', 'SPACE'), ('layer', 'NOUN'), ('merge', 'VERB'), ('semantically', 'ADV'), ('similar', 'ADJ'), ('features', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('role', 'nsubj'), ('convolutional', 'amod'), ('layer', 'pobj'), ('detect', 'xcomp'), ('local', 'amod'), ('con-', 'amod'), ('junctions', 'dobj'), ('features', 'pobj'), ('previous', 'amod'), ('layer', 'pobj'), (',', 'punct'), ('role', 'dobj'), ('pooling', 'amod'), (' ', 'compound'), ('layer', 'pobj'), ('merge', 'xcomp'), ('semantically', 'advmod'), ('similar', 'amod'), ('features', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[role, convolutional], [convolutional, layer], [layer, detect], [detect, local], [local, con-], [con-, junctions], [junctions, features], [features, previous], [previous, layer], [layer, ,], [,, role], [role, pooling], [pooling,  ], [ , layer], [layer, merge], [merge, semantically], [semantically, similar], [similar, features], [features, .]]

>> Trigrams: 
[[role, convolutional, layer], [convolutional, layer, detect], [layer, detect, local], [detect, local, con-], [local, con-, junctions], [con-, junctions, features], [junctions, features, previous], [features, previous, layer], [previous, layer, ,], [layer, ,, role], [,, role, pooling], [role, pooling,  ], [pooling,  , layer], [ , layer, merge], [layer, merge, semantically], [merge, semantically, similar], [semantically, similar, features], [similar, features, .]]

>> Noun Phrases are: 
[the role, the convolutional layer, local con- junctions, features, the previous layer, the role, the pooling  layer, semantically similar features]

>> Named Entities are: 
[]


============================ Sentence 205 =============================

Because the  relative positions of the features forming a motif can vary somewhat,  reliably detecting the motif can be done by coarse-graining the posi- tion of each feature. 


>> Tokens are: 
[ , relative, positions, features, forming, motif, vary, somewhat, ,,  , reliably, detecting, motif, coarse, -, graining, posi-, tion, feature, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('relative', 'ADJ'), ('positions', 'NOUN'), ('features', 'NOUN'), ('forming', 'VERB'), ('motif', 'NOUN'), ('vary', 'VERB'), ('somewhat', 'ADV'), (',', 'PUNCT'), (' ', 'SPACE'), ('reliably', 'ADV'), ('detecting', 'VERB'), ('motif', 'NOUN'), ('coarse', 'ADV'), ('-', 'PUNCT'), ('graining', 'VERB'), ('posi-', 'ADJ'), ('tion', 'NOUN'), ('feature', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'nmod'), ('relative', 'amod'), ('positions', 'nsubj'), ('features', 'pobj'), ('forming', 'acl'), ('motif', 'dobj'), ('vary', 'advcl'), ('somewhat', 'advmod'), (',', 'punct'), (' ', 'nsubj'), ('reliably', 'advmod'), ('detecting', 'csubjpass'), ('motif', 'dobj'), ('coarse', 'advmod'), ('-', 'punct'), ('graining', 'advcl'), ('posi-', 'amod'), ('tion', 'dobj'), ('feature', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[ , relative], [relative, positions], [positions, features], [features, forming], [forming, motif], [motif, vary], [vary, somewhat], [somewhat, ,], [,,  ], [ , reliably], [reliably, detecting], [detecting, motif], [motif, coarse], [coarse, -], [-, graining], [graining, posi-], [posi-, tion], [tion, feature], [feature, .]]

>> Trigrams: 
[[ , relative, positions], [relative, positions, features], [positions, features, forming], [features, forming, motif], [forming, motif, vary], [motif, vary, somewhat], [vary, somewhat, ,], [somewhat, ,,  ], [,,  , reliably], [ , reliably, detecting], [reliably, detecting, motif], [detecting, motif, coarse], [motif, coarse, -], [coarse, -, graining], [-, graining, posi-], [graining, posi-, tion], [posi-, tion, feature], [tion, feature, .]]

>> Noun Phrases are: 
[the  relative positions, the features, a motif, the motif, the posi- tion, each feature]

>> Named Entities are: 
[]


============================ Sentence 206 =============================

A typical pooling unit computes the maximum  of a local patch of units in one feature map (or in a few feature maps). 


>> Tokens are: 
[typical, pooling, unit, computes, maximum,  , local, patch, units, feature, map, (, feature, maps, ), .] 

>> PoS Tags are: 
[('typical', 'ADJ'), ('pooling', 'VERB'), ('unit', 'NOUN'), ('computes', 'VERB'), ('maximum', 'ADJ'), (' ', 'SPACE'), ('local', 'ADJ'), ('patch', 'NOUN'), ('units', 'NOUN'), ('feature', 'NOUN'), ('map', 'NOUN'), ('(', 'PUNCT'), ('feature', 'NOUN'), ('maps', 'NOUN'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('typical', 'amod'), ('pooling', 'amod'), ('unit', 'nsubj'), ('computes', 'ROOT'), ('maximum', 'amod'), (' ', 'dobj'), ('local', 'amod'), ('patch', 'pobj'), ('units', 'pobj'), ('feature', 'compound'), ('map', 'pobj'), ('(', 'punct'), ('feature', 'compound'), ('maps', 'pobj'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[typical, pooling], [pooling, unit], [unit, computes], [computes, maximum], [maximum,  ], [ , local], [local, patch], [patch, units], [units, feature], [feature, map], [map, (], [(, feature], [feature, maps], [maps, )], [), .]]

>> Trigrams: 
[[typical, pooling, unit], [pooling, unit, computes], [unit, computes, maximum], [computes, maximum,  ], [maximum,  , local], [ , local, patch], [local, patch, units], [patch, units, feature], [units, feature, map], [feature, map, (], [map, (, feature], [(, feature, maps], [feature, maps, )], [maps, ), .]]

>> Noun Phrases are: 
[A typical pooling unit, a local patch, units, one feature map, a few feature maps]

>> Named Entities are: 
[]


============================ Sentence 207 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 208 =============================

Neighbouring pooling units take input from patches that are shifted  by more than one row or column, thereby reducing the dimension of  the representation and creating an invariance to small shifts and dis- tortions. 


>> Tokens are: 
[Neighbouring, pooling, units, input, patches, shifted,  , row, column, ,, reducing, dimension,  , representation, creating, invariance, small, shifts, dis-, tortions, .] 

>> PoS Tags are: 
[('Neighbouring', 'VERB'), ('pooling', 'VERB'), ('units', 'NOUN'), ('input', 'NOUN'), ('patches', 'NOUN'), ('shifted', 'VERB'), (' ', 'SPACE'), ('row', 'NOUN'), ('column', 'NOUN'), (',', 'PUNCT'), ('reducing', 'VERB'), ('dimension', 'NOUN'), (' ', 'SPACE'), ('representation', 'NOUN'), ('creating', 'VERB'), ('invariance', 'NOUN'), ('small', 'ADJ'), ('shifts', 'NOUN'), ('dis-', 'ADP'), ('tortions', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Neighbouring', 'compound'), ('pooling', 'amod'), ('units', 'nsubj'), ('input', 'dobj'), ('patches', 'pobj'), ('shifted', 'relcl'), (' ', 'dobj'), ('row', 'pobj'), ('column', 'conj'), (',', 'punct'), ('reducing', 'advcl'), ('dimension', 'dobj'), (' ', 'pobj'), ('representation', 'dobj'), ('creating', 'conj'), ('invariance', 'dobj'), ('small', 'amod'), ('shifts', 'pobj'), ('dis-', 'conj'), ('tortions', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Neighbouring, pooling], [pooling, units], [units, input], [input, patches], [patches, shifted], [shifted,  ], [ , row], [row, column], [column, ,], [,, reducing], [reducing, dimension], [dimension,  ], [ , representation], [representation, creating], [creating, invariance], [invariance, small], [small, shifts], [shifts, dis-], [dis-, tortions], [tortions, .]]

>> Trigrams: 
[[Neighbouring, pooling, units], [pooling, units, input], [units, input, patches], [input, patches, shifted], [patches, shifted,  ], [shifted,  , row], [ , row, column], [row, column, ,], [column, ,, reducing], [,, reducing, dimension], [reducing, dimension,  ], [dimension,  , representation], [ , representation, creating], [representation, creating, invariance], [creating, invariance, small], [invariance, small, shifts], [small, shifts, dis-], [shifts, dis-, tortions], [dis-, tortions, .]]

>> Noun Phrases are: 
[Neighbouring pooling units, input, patches, more than one row, column, the dimension, the representation, an invariance, small shifts, tortions]

>> Named Entities are: 
[]


============================ Sentence 209 =============================

Two or three stages of convolution, non-linearity and pool- ing are stacked, followed by more convolutional and fully-connected  layers. 


>> Tokens are: 
[stages, convolution, ,, non, -, linearity, pool-, ing, stacked, ,, followed, convolutional, fully, -, connected,  , layers, .] 

>> PoS Tags are: 
[('stages', 'NOUN'), ('convolution', 'NOUN'), (',', 'PUNCT'), ('non', 'ADJ'), ('-', 'ADJ'), ('linearity', 'NOUN'), ('pool-', 'NOUN'), ('ing', 'NOUN'), ('stacked', 'VERB'), (',', 'PUNCT'), ('followed', 'VERB'), ('convolutional', 'ADJ'), ('fully', 'ADV'), ('-', 'PUNCT'), ('connected', 'VERB'), (' ', 'SPACE'), ('layers', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('stages', 'nsubjpass'), ('convolution', 'pobj'), (',', 'punct'), ('non', 'conj'), ('-', 'conj'), ('linearity', 'conj'), ('pool-', 'conj'), ('ing', 'nsubjpass'), ('stacked', 'ROOT'), (',', 'punct'), ('followed', 'advcl'), ('convolutional', 'pobj'), ('fully', 'advmod'), ('-', 'punct'), ('connected', 'amod'), (' ', 'compound'), ('layers', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[stages, convolution], [convolution, ,], [,, non], [non, -], [-, linearity], [linearity, pool-], [pool-, ing], [ing, stacked], [stacked, ,], [,, followed], [followed, convolutional], [convolutional, fully], [fully, -], [-, connected], [connected,  ], [ , layers], [layers, .]]

>> Trigrams: 
[[stages, convolution, ,], [convolution, ,, non], [,, non, -], [non, -, linearity], [-, linearity, pool-], [linearity, pool-, ing], [pool-, ing, stacked], [ing, stacked, ,], [stacked, ,, followed], [,, followed, convolutional], [followed, convolutional, fully], [convolutional, fully, -], [fully, -, connected], [-, connected,  ], [connected,  , layers], [ , layers, .]]

>> Noun Phrases are: 
[Two or three stages, convolution, linearity, pool-, ing, fully-connected  layers]

>> Named Entities are: 
[('Two', 'CARDINAL'), ('three', 'CARDINAL')]


============================ Sentence 210 =============================

Backpropagating gradients through a ConvNet is as simple as  through a regular deep network, allowing all the weights in all the  filter banks to be trained. 


>> Tokens are: 
[Backpropagating, gradients, ConvNet, simple,  , regular, deep, network, ,, allowing, weights,  , filter, banks, trained, .] 

>> PoS Tags are: 
[('Backpropagating', 'VERB'), ('gradients', 'NOUN'), ('ConvNet', 'PROPN'), ('simple', 'ADJ'), (' ', 'SPACE'), ('regular', 'ADJ'), ('deep', 'ADJ'), ('network', 'NOUN'), (',', 'PUNCT'), ('allowing', 'VERB'), ('weights', 'NOUN'), (' ', 'SPACE'), ('filter', 'NOUN'), ('banks', 'NOUN'), ('trained', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Backpropagating', 'compound'), ('gradients', 'nsubj'), ('ConvNet', 'pobj'), ('simple', 'acomp'), (' ', 'pobj'), ('regular', 'amod'), ('deep', 'amod'), ('network', 'pobj'), (',', 'punct'), ('allowing', 'advcl'), ('weights', 'nsubjpass'), (' ', 'compound'), ('filter', 'compound'), ('banks', 'pobj'), ('trained', 'ccomp'), ('.', 'punct')]

>> Bigrams: 
[[Backpropagating, gradients], [gradients, ConvNet], [ConvNet, simple], [simple,  ], [ , regular], [regular, deep], [deep, network], [network, ,], [,, allowing], [allowing, weights], [weights,  ], [ , filter], [filter, banks], [banks, trained], [trained, .]]

>> Trigrams: 
[[Backpropagating, gradients, ConvNet], [gradients, ConvNet, simple], [ConvNet, simple,  ], [simple,  , regular], [ , regular, deep], [regular, deep, network], [deep, network, ,], [network, ,, allowing], [,, allowing, weights], [allowing, weights,  ], [weights,  , filter], [ , filter, banks], [filter, banks, trained], [banks, trained, .]]

>> Noun Phrases are: 
[Backpropagating gradients, a ConvNet, a regular deep network, all the weights, all the  filter banks]

>> Named Entities are: 
[('ConvNet', 'ORG')]


============================ Sentence 211 =============================

  Deep neural networks exploit the property that many natural sig- nals are compositional hierarchies, in which higher-level features  are obtained by composing lower-level ones. 


>> Tokens are: 
[  , Deep, neural, networks, exploit, property, natural, sig-, nals, compositional, hierarchies, ,, higher, -, level, features,  , obtained, composing, lower, -, level, ones, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('Deep', 'ADJ'), ('neural', 'ADJ'), ('networks', 'NOUN'), ('exploit', 'VERB'), ('property', 'NOUN'), ('natural', 'ADJ'), ('sig-', 'NOUN'), ('nals', 'NOUN'), ('compositional', 'ADJ'), ('hierarchies', 'NOUN'), (',', 'PUNCT'), ('higher', 'ADJ'), ('-', 'PUNCT'), ('level', 'NOUN'), ('features', 'NOUN'), (' ', 'SPACE'), ('obtained', 'VERB'), ('composing', 'VERB'), ('lower', 'ADJ'), ('-', 'PUNCT'), ('level', 'NOUN'), ('ones', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'nummod'), ('Deep', 'amod'), ('neural', 'amod'), ('networks', 'nsubj'), ('exploit', 'ROOT'), ('property', 'dobj'), ('natural', 'amod'), ('sig-', 'compound'), ('nals', 'nsubj'), ('compositional', 'amod'), ('hierarchies', 'attr'), (',', 'punct'), ('higher', 'amod'), ('-', 'punct'), ('level', 'compound'), ('features', 'nsubjpass'), (' ', 'nsubjpass'), ('obtained', 'conj'), ('composing', 'pcomp'), ('lower', 'amod'), ('-', 'punct'), ('level', 'compound'), ('ones', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[  , Deep], [Deep, neural], [neural, networks], [networks, exploit], [exploit, property], [property, natural], [natural, sig-], [sig-, nals], [nals, compositional], [compositional, hierarchies], [hierarchies, ,], [,, higher], [higher, -], [-, level], [level, features], [features,  ], [ , obtained], [obtained, composing], [composing, lower], [lower, -], [-, level], [level, ones], [ones, .]]

>> Trigrams: 
[[  , Deep, neural], [Deep, neural, networks], [neural, networks, exploit], [networks, exploit, property], [exploit, property, natural], [property, natural, sig-], [natural, sig-, nals], [sig-, nals, compositional], [nals, compositional, hierarchies], [compositional, hierarchies, ,], [hierarchies, ,, higher], [,, higher, -], [higher, -, level], [-, level, features], [level, features,  ], [features,  , obtained], [ , obtained, composing], [obtained, composing, lower], [composing, lower, -], [lower, -, level], [-, level, ones], [level, ones, .]]

>> Noun Phrases are: 
[  Deep neural networks, the property, many natural sig- nals, compositional hierarchies, in which higher-level features, lower-level ones]

>> Named Entities are: 
[]


============================ Sentence 212 =============================

In images, local combi- nations of edges form motifs, motifs assemble into parts, and parts  form objects. 


>> Tokens are: 
[images, ,, local, combi-, nations, edges, form, motifs, ,, motifs, assemble, parts, ,, parts,  , form, objects, .] 

>> PoS Tags are: 
[('images', 'NOUN'), (',', 'PUNCT'), ('local', 'ADJ'), ('combi-', 'ADJ'), ('nations', 'NOUN'), ('edges', 'NOUN'), ('form', 'VERB'), ('motifs', 'NOUN'), (',', 'PUNCT'), ('motifs', 'NOUN'), ('assemble', 'ADJ'), ('parts', 'NOUN'), (',', 'PUNCT'), ('parts', 'NOUN'), (' ', 'SPACE'), ('form', 'NOUN'), ('objects', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('images', 'pobj'), (',', 'punct'), ('local', 'amod'), ('combi-', 'amod'), ('nations', 'nsubj'), ('edges', 'pobj'), ('form', 'parataxis'), ('motifs', 'dobj'), (',', 'punct'), ('motifs', 'ROOT'), ('assemble', 'amod'), ('parts', 'pobj'), (',', 'punct'), ('parts', 'nmod'), (' ', 'nummod'), ('form', 'compound'), ('objects', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[images, ,], [,, local], [local, combi-], [combi-, nations], [nations, edges], [edges, form], [form, motifs], [motifs, ,], [,, motifs], [motifs, assemble], [assemble, parts], [parts, ,], [,, parts], [parts,  ], [ , form], [form, objects], [objects, .]]

>> Trigrams: 
[[images, ,, local], [,, local, combi-], [local, combi-, nations], [combi-, nations, edges], [nations, edges, form], [edges, form, motifs], [form, motifs, ,], [motifs, ,, motifs], [,, motifs, assemble], [motifs, assemble, parts], [assemble, parts, ,], [parts, ,, parts], [,, parts,  ], [parts,  , form], [ , form, objects], [form, objects, .]]

>> Noun Phrases are: 
[images, local combi- nations, edges, motifs, parts, parts  form objects]

>> Named Entities are: 
[]


============================ Sentence 213 =============================

Similar hierarchies exist in speech and text from sounds  to phones, phonemes, syllables, words and sentences. 


>> Tokens are: 
[Similar, hierarchies, exist, speech, text, sounds,  , phones, ,, phonemes, ,, syllables, ,, words, sentences, .] 

>> PoS Tags are: 
[('Similar', 'ADJ'), ('hierarchies', 'NOUN'), ('exist', 'VERB'), ('speech', 'NOUN'), ('text', 'NOUN'), ('sounds', 'NOUN'), (' ', 'SPACE'), ('phones', 'NOUN'), (',', 'PUNCT'), ('phonemes', 'NOUN'), (',', 'PUNCT'), ('syllables', 'NOUN'), (',', 'PUNCT'), ('words', 'NOUN'), ('sentences', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Similar', 'amod'), ('hierarchies', 'nsubj'), ('exist', 'ROOT'), ('speech', 'pobj'), ('text', 'conj'), ('sounds', 'pobj'), (' ', 'pobj'), ('phones', 'pobj'), (',', 'punct'), ('phonemes', 'conj'), (',', 'punct'), ('syllables', 'conj'), (',', 'punct'), ('words', 'conj'), ('sentences', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[Similar, hierarchies], [hierarchies, exist], [exist, speech], [speech, text], [text, sounds], [sounds,  ], [ , phones], [phones, ,], [,, phonemes], [phonemes, ,], [,, syllables], [syllables, ,], [,, words], [words, sentences], [sentences, .]]

>> Trigrams: 
[[Similar, hierarchies, exist], [hierarchies, exist, speech], [exist, speech, text], [speech, text, sounds], [text, sounds,  ], [sounds,  , phones], [ , phones, ,], [phones, ,, phonemes], [,, phonemes, ,], [phonemes, ,, syllables], [,, syllables, ,], [syllables, ,, words], [,, words, sentences], [words, sentences, .]]

>> Noun Phrases are: 
[Similar hierarchies, speech, text, sounds, phones, phonemes, syllables, words, sentences]

>> Named Entities are: 
[]


============================ Sentence 214 =============================

The pooling  allows representations to vary very little when elements in the previ- ous layer vary in position and appearance. 


>> Tokens are: 
[pooling,  , allows, representations, vary, little, elements, previ-, ous, layer, vary, position, appearance, .] 

>> PoS Tags are: 
[('pooling', 'VERB'), (' ', 'SPACE'), ('allows', 'VERB'), ('representations', 'NOUN'), ('vary', 'VERB'), ('little', 'ADJ'), ('elements', 'NOUN'), ('previ-', 'NOUN'), ('ous', 'ADJ'), ('layer', 'NOUN'), ('vary', 'VERB'), ('position', 'NOUN'), ('appearance', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('pooling', 'amod'), (' ', 'nsubj'), ('allows', 'ROOT'), ('representations', 'nsubj'), ('vary', 'ccomp'), ('little', 'advmod'), ('elements', 'nsubj'), ('previ-', 'pobj'), ('ous', 'amod'), ('layer', 'appos'), ('vary', 'advcl'), ('position', 'pobj'), ('appearance', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[pooling,  ], [ , allows], [allows, representations], [representations, vary], [vary, little], [little, elements], [elements, previ-], [previ-, ous], [ous, layer], [layer, vary], [vary, position], [position, appearance], [appearance, .]]

>> Trigrams: 
[[pooling,  , allows], [ , allows, representations], [allows, representations, vary], [representations, vary, little], [vary, little, elements], [little, elements, previ-], [elements, previ-, ous], [previ-, ous, layer], [ous, layer, vary], [layer, vary, position], [vary, position, appearance], [position, appearance, .]]

>> Noun Phrases are: 
[representations, elements, the previ-, ous layer, position, appearance]

>> Named Entities are: 
[]


============================ Sentence 215 =============================

  The convolutional and pooling layers in ConvNets are directly  inspired by the classic notions of simple cells and complex cells in  visual neuroscience43, and the overall architecture is reminiscent of  the LGN–V1–V2–V4–IT hierarchy in the visual cortex ventral path- way44. 


>> Tokens are: 
[  , convolutional, pooling, layers, ConvNets, directly,  , inspired, classic, notions, simple, cells, complex, cells,  , visual, neuroscience43, ,, overall, architecture, reminiscent,  , LGN, –, V1, –, V2, –, V4, –, hierarchy, visual, cortex, ventral, path-, way44, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('convolutional', 'NOUN'), ('pooling', 'VERB'), ('layers', 'NOUN'), ('ConvNets', 'PROPN'), ('directly', 'ADV'), (' ', 'SPACE'), ('inspired', 'VERB'), ('classic', 'ADJ'), ('notions', 'NOUN'), ('simple', 'ADJ'), ('cells', 'NOUN'), ('complex', 'ADJ'), ('cells', 'NOUN'), (' ', 'SPACE'), ('visual', 'ADJ'), ('neuroscience43', 'NOUN'), (',', 'PUNCT'), ('overall', 'ADJ'), ('architecture', 'NOUN'), ('reminiscent', 'ADJ'), (' ', 'SPACE'), ('LGN', 'PROPN'), ('–', 'PUNCT'), ('V1', 'PROPN'), ('–', 'PUNCT'), ('V2', 'PROPN'), ('–', 'PUNCT'), ('V4', 'NOUN'), ('–', 'PUNCT'), ('hierarchy', 'NOUN'), ('visual', 'ADJ'), ('cortex', 'NOUN'), ('ventral', 'ADJ'), ('path-', 'NOUN'), ('way44', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'nsubj'), ('convolutional', 'appos'), ('pooling', 'conj'), ('layers', 'dobj'), ('ConvNets', 'pobj'), ('directly', 'advmod'), (' ', 'attr'), ('inspired', 'acl'), ('classic', 'amod'), ('notions', 'pobj'), ('simple', 'amod'), ('cells', 'pobj'), ('complex', 'amod'), ('cells', 'conj'), (' ', 'nmod'), ('visual', 'amod'), ('neuroscience43', 'pobj'), (',', 'punct'), ('overall', 'amod'), ('architecture', 'nsubj'), ('reminiscent', 'acomp'), (' ', 'pobj'), ('LGN', 'appos'), ('–', 'punct'), ('V1', 'appos'), ('–', 'punct'), ('V2', 'appos'), ('–', 'punct'), ('V4', 'appos'), ('–', 'punct'), ('hierarchy', 'acomp'), ('visual', 'amod'), ('cortex', 'nmod'), ('ventral', 'amod'), ('path-', 'compound'), ('way44', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[  , convolutional], [convolutional, pooling], [pooling, layers], [layers, ConvNets], [ConvNets, directly], [directly,  ], [ , inspired], [inspired, classic], [classic, notions], [notions, simple], [simple, cells], [cells, complex], [complex, cells], [cells,  ], [ , visual], [visual, neuroscience43], [neuroscience43, ,], [,, overall], [overall, architecture], [architecture, reminiscent], [reminiscent,  ], [ , LGN], [LGN, –], [–, V1], [V1, –], [–, V2], [V2, –], [–, V4], [V4, –], [–, hierarchy], [hierarchy, visual], [visual, cortex], [cortex, ventral], [ventral, path-], [path-, way44], [way44, .]]

>> Trigrams: 
[[  , convolutional, pooling], [convolutional, pooling, layers], [pooling, layers, ConvNets], [layers, ConvNets, directly], [ConvNets, directly,  ], [directly,  , inspired], [ , inspired, classic], [inspired, classic, notions], [classic, notions, simple], [notions, simple, cells], [simple, cells, complex], [cells, complex, cells], [complex, cells,  ], [cells,  , visual], [ , visual, neuroscience43], [visual, neuroscience43, ,], [neuroscience43, ,, overall], [,, overall, architecture], [overall, architecture, reminiscent], [architecture, reminiscent,  ], [reminiscent,  , LGN], [ , LGN, –], [LGN, –, V1], [–, V1, –], [V1, –, V2], [–, V2, –], [V2, –, V4], [–, V4, –], [V4, –, hierarchy], [–, hierarchy, visual], [hierarchy, visual, cortex], [visual, cortex, ventral], [cortex, ventral, path-], [ventral, path-, way44], [path-, way44, .]]

>> Noun Phrases are: 
[The convolutional, layers, ConvNets, the classic notions, simple cells, complex cells,  visual neuroscience43, the overall architecture, the LGN, V1, V2, V4, IT, the visual cortex ventral path- way44]

>> Named Entities are: 
[('ConvNets', 'ORG'), ('LGN', 'ORG')]


============================ Sentence 216 =============================

When ConvNet models and monkeys are shown the same pic- ture, the activations of high-level units in the ConvNet explains half  of the variance of random sets of 160 neurons in the monkey’s infer- otemporal cortex45. 


>> Tokens are: 
[ConvNet, models, monkeys, shown, pic-, ture, ,, activations, high, -, level, units, ConvNet, explains, half,  , variance, random, sets, 160,  , neurons, monkey, infer-, otemporal, cortex45, .] 

>> PoS Tags are: 
[('ConvNet', 'PROPN'), ('models', 'NOUN'), ('monkeys', 'NOUN'), ('shown', 'VERB'), ('pic-', 'ADJ'), ('ture', 'NOUN'), (',', 'PUNCT'), ('activations', 'NOUN'), ('high', 'ADJ'), ('-', 'PUNCT'), ('level', 'NOUN'), ('units', 'NOUN'), ('ConvNet', 'PROPN'), ('explains', 'VERB'), ('half', 'DET'), (' ', 'SPACE'), ('variance', 'NOUN'), ('random', 'ADJ'), ('sets', 'NOUN'), ('160', 'NUM'), ('\xa0', 'SPACE'), ('neurons', 'NOUN'), ('monkey', 'NOUN'), ('infer-', 'ADJ'), ('otemporal', 'ADJ'), ('cortex45', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('ConvNet', 'compound'), ('models', 'nsubjpass'), ('monkeys', 'conj'), ('shown', 'advcl'), ('pic-', 'compound'), ('ture', 'dobj'), (',', 'punct'), ('activations', 'nsubj'), ('high', 'amod'), ('-', 'punct'), ('level', 'compound'), ('units', 'pobj'), ('ConvNet', 'pobj'), ('explains', 'ROOT'), ('half', 'amod'), (' ', 'dobj'), ('variance', 'pobj'), ('random', 'amod'), ('sets', 'pobj'), ('160', 'nummod'), ('\xa0', 'compound'), ('neurons', 'pobj'), ('monkey', 'poss'), ('infer-', 'nmod'), ('otemporal', 'amod'), ('cortex45', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[ConvNet, models], [models, monkeys], [monkeys, shown], [shown, pic-], [pic-, ture], [ture, ,], [,, activations], [activations, high], [high, -], [-, level], [level, units], [units, ConvNet], [ConvNet, explains], [explains, half], [half,  ], [ , variance], [variance, random], [random, sets], [sets, 160], [160,  ], [ , neurons], [neurons, monkey], [monkey, infer-], [infer-, otemporal], [otemporal, cortex45], [cortex45, .]]

>> Trigrams: 
[[ConvNet, models, monkeys], [models, monkeys, shown], [monkeys, shown, pic-], [shown, pic-, ture], [pic-, ture, ,], [ture, ,, activations], [,, activations, high], [activations, high, -], [high, -, level], [-, level, units], [level, units, ConvNet], [units, ConvNet, explains], [ConvNet, explains, half], [explains, half,  ], [half,  , variance], [ , variance, random], [variance, random, sets], [random, sets, 160], [sets, 160,  ], [160,  , neurons], [ , neurons, monkey], [neurons, monkey, infer-], [monkey, infer-, otemporal], [infer-, otemporal, cortex45], [otemporal, cortex45, .]]

>> Noun Phrases are: 
[ConvNet models, monkeys, the same pic- ture, the activations, high-level units, the ConvNet, the variance, random sets, 160 neurons, the monkey’s infer- otemporal cortex45]

>> Named Entities are: 
[('ConvNet', 'ORG'), ('half', 'CARDINAL'), ('160', 'CARDINAL')]


============================ Sentence 217 =============================

ConvNets have their roots in the neocognitron46,  the architecture of which was somewhat similar, but did not have an  end-to-end supervised-learning algorithm such as backpropagation. 


>> Tokens are: 
[ConvNets, roots, neocognitron46, ,,  , architecture, somewhat, similar, ,,  , end, -, -, end, supervised, -, learning, algorithm, backpropagation, .] 

>> PoS Tags are: 
[('ConvNets', 'NOUN'), ('roots', 'NOUN'), ('neocognitron46', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('architecture', 'NOUN'), ('somewhat', 'ADV'), ('similar', 'ADJ'), (',', 'PUNCT'), (' ', 'SPACE'), ('end', 'NOUN'), ('-', 'PUNCT'), ('-', 'PUNCT'), ('end', 'NOUN'), ('supervised', 'VERB'), ('-', 'PUNCT'), ('learning', 'VERB'), ('algorithm', 'NOUN'), ('backpropagation', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('ConvNets', 'nsubj'), ('roots', 'dobj'), ('neocognitron46', 'pobj'), (',', 'punct'), (' ', 'nsubj'), ('architecture', 'nsubj'), ('somewhat', 'advmod'), ('similar', 'acomp'), (',', 'punct'), (' ', 'nmod'), ('end', 'npadvmod'), ('-', 'punct'), ('-', 'punct'), ('end', 'pobj'), ('supervised', 'amod'), ('-', 'punct'), ('learning', 'amod'), ('algorithm', 'dobj'), ('backpropagation', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[ConvNets, roots], [roots, neocognitron46], [neocognitron46, ,], [,,  ], [ , architecture], [architecture, somewhat], [somewhat, similar], [similar, ,], [,,  ], [ , end], [end, -], [-, -], [-, end], [end, supervised], [supervised, -], [-, learning], [learning, algorithm], [algorithm, backpropagation], [backpropagation, .]]

>> Trigrams: 
[[ConvNets, roots, neocognitron46], [roots, neocognitron46, ,], [neocognitron46, ,,  ], [,,  , architecture], [ , architecture, somewhat], [architecture, somewhat, similar], [somewhat, similar, ,], [similar, ,,  ], [,,  , end], [ , end, -], [end, -, -], [-, -, end], [-, end, supervised], [end, supervised, -], [supervised, -, learning], [-, learning, algorithm], [learning, algorithm, backpropagation], [algorithm, backpropagation, .]]

>> Noun Phrases are: 
[ConvNets, their roots, the neocognitron46, the architecture, end, backpropagation]

>> Named Entities are: 
[]


============================ Sentence 218 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 219 =============================

A primitive 1D ConvNet called a time-delay neural net was used for  the recognition of phonemes and simple words47,48. 


>> Tokens are: 
[primitive, 1D, ConvNet, called, time, -, delay, neural, net,  , recognition, phonemes, simple, words47,48, .] 

>> PoS Tags are: 
[('primitive', 'ADJ'), ('1D', 'NOUN'), ('ConvNet', 'PROPN'), ('called', 'VERB'), ('time', 'NOUN'), ('-', 'PUNCT'), ('delay', 'NOUN'), ('neural', 'ADJ'), ('net', 'NOUN'), (' ', 'SPACE'), ('recognition', 'NOUN'), ('phonemes', 'NOUN'), ('simple', 'ADJ'), ('words47,48', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('primitive', 'amod'), ('1D', 'compound'), ('ConvNet', 'nsubj'), ('called', 'ROOT'), ('time', 'compound'), ('-', 'punct'), ('delay', 'nmod'), ('neural', 'amod'), ('net', 'nsubjpass'), (' ', 'pobj'), ('recognition', 'dobj'), ('phonemes', 'pobj'), ('simple', 'amod'), ('words47,48', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[primitive, 1D], [1D, ConvNet], [ConvNet, called], [called, time], [time, -], [-, delay], [delay, neural], [neural, net], [net,  ], [ , recognition], [recognition, phonemes], [phonemes, simple], [simple, words47,48], [words47,48, .]]

>> Trigrams: 
[[primitive, 1D, ConvNet], [1D, ConvNet, called], [ConvNet, called, time], [called, time, -], [time, -, delay], [-, delay, neural], [delay, neural, net], [neural, net,  ], [net,  , recognition], [ , recognition, phonemes], [recognition, phonemes, simple], [phonemes, simple, words47,48], [simple, words47,48, .]]

>> Noun Phrases are: 
[A primitive 1D ConvNet, a time-delay neural net, the recognition, phonemes, simple words47,48]

>> Named Entities are: 
[('ConvNet', 'ORG')]


============================ Sentence 220 =============================

  There have been numerous applications of convolutional net- works going back to the early 1990s, starting with time-delay neu- ral networks for speech recognition47 and document reading42. 


>> Tokens are: 
[  , numerous, applications, convolutional, net-, works, going, early, 1990s, ,, starting, time, -, delay, neu-, ral, networks, speech, recognition47, document, reading42, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('numerous', 'ADJ'), ('applications', 'NOUN'), ('convolutional', 'ADJ'), ('net-', 'NOUN'), ('works', 'NOUN'), ('going', 'VERB'), ('early', 'ADJ'), ('1990s', 'NOUN'), (',', 'PUNCT'), ('starting', 'VERB'), ('time', 'NOUN'), ('-', 'PUNCT'), ('delay', 'NOUN'), ('neu-', 'ADJ'), ('ral', 'ADJ'), ('networks', 'NOUN'), ('speech', 'NOUN'), ('recognition47', 'NOUN'), ('document', 'NOUN'), ('reading42', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'nsubj'), ('numerous', 'amod'), ('applications', 'attr'), ('convolutional', 'amod'), ('net-', 'compound'), ('works', 'pobj'), ('going', 'acl'), ('early', 'amod'), ('1990s', 'pobj'), (',', 'punct'), ('starting', 'advcl'), ('time', 'npadvmod'), ('-', 'punct'), ('delay', 'nmod'), ('neu-', 'amod'), ('ral', 'amod'), ('networks', 'pobj'), ('speech', 'compound'), ('recognition47', 'pobj'), ('document', 'compound'), ('reading42', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[  , numerous], [numerous, applications], [applications, convolutional], [convolutional, net-], [net-, works], [works, going], [going, early], [early, 1990s], [1990s, ,], [,, starting], [starting, time], [time, -], [-, delay], [delay, neu-], [neu-, ral], [ral, networks], [networks, speech], [speech, recognition47], [recognition47, document], [document, reading42], [reading42, .]]

>> Trigrams: 
[[  , numerous, applications], [numerous, applications, convolutional], [applications, convolutional, net-], [convolutional, net-, works], [net-, works, going], [works, going, early], [going, early, 1990s], [early, 1990s, ,], [1990s, ,, starting], [,, starting, time], [starting, time, -], [time, -, delay], [-, delay, neu-], [delay, neu-, ral], [neu-, ral, networks], [ral, networks, speech], [networks, speech, recognition47], [speech, recognition47, document], [recognition47, document, reading42], [document, reading42, .]]

>> Noun Phrases are: 
[numerous applications, convolutional net- works, the early 1990s, time-delay neu- ral networks, speech recognition47, document reading42]

>> Named Entities are: 
[('the early 1990s', 'DATE')]


============================ Sentence 221 =============================

The  document reading system used a ConvNet trained jointly with a  probabilistic model that implemented language constraints. 


>> Tokens are: 
[ , document, reading, system, ConvNet, trained, jointly,  , probabilistic, model, implemented, language, constraints, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('document', 'NOUN'), ('reading', 'NOUN'), ('system', 'NOUN'), ('ConvNet', 'PROPN'), ('trained', 'VERB'), ('jointly', 'ADV'), (' ', 'SPACE'), ('probabilistic', 'ADJ'), ('model', 'NOUN'), ('implemented', 'VERB'), ('language', 'NOUN'), ('constraints', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'compound'), ('document', 'compound'), ('reading', 'compound'), ('system', 'nsubj'), ('ConvNet', 'dobj'), ('trained', 'acl'), ('jointly', 'advmod'), (' ', 'nmod'), ('probabilistic', 'amod'), ('model', 'pobj'), ('implemented', 'relcl'), ('language', 'compound'), ('constraints', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[ , document], [document, reading], [reading, system], [system, ConvNet], [ConvNet, trained], [trained, jointly], [jointly,  ], [ , probabilistic], [probabilistic, model], [model, implemented], [implemented, language], [language, constraints], [constraints, .]]

>> Trigrams: 
[[ , document, reading], [document, reading, system], [reading, system, ConvNet], [system, ConvNet, trained], [ConvNet, trained, jointly], [trained, jointly,  ], [jointly,  , probabilistic], [ , probabilistic, model], [probabilistic, model, implemented], [model, implemented, language], [implemented, language, constraints], [language, constraints, .]]

>> Noun Phrases are: 
[The  document reading system, a ConvNet, a  probabilistic model, language constraints]

>> Named Entities are: 
[('ConvNet', 'ORG')]


============================ Sentence 222 =============================

By the  late 1990s this system was reading over 10% of all the cheques in the  United States. 


>> Tokens are: 
[ , late, 1990s, system, reading, 10, %, cheques,  , United, States, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('late', 'ADJ'), ('1990s', 'NOUN'), ('system', 'NOUN'), ('reading', 'VERB'), ('10', 'NUM'), ('%', 'NOUN'), ('cheques', 'NOUN'), (' ', 'SPACE'), ('United', 'PROPN'), ('States', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'pobj'), ('late', 'amod'), ('1990s', 'pobj'), ('system', 'nsubj'), ('reading', 'ROOT'), ('10', 'nummod'), ('%', 'dobj'), ('cheques', 'pobj'), (' ', 'compound'), ('United', 'compound'), ('States', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[ , late], [late, 1990s], [1990s, system], [system, reading], [reading, 10], [10, %], [%, cheques], [cheques,  ], [ , United], [United, States], [States, .]]

>> Trigrams: 
[[ , late, 1990s], [late, 1990s, system], [1990s, system, reading], [system, reading, 10], [reading, 10, %], [10, %, cheques], [%, cheques,  ], [cheques,  , United], [ , United, States], [United, States, .]]

>> Noun Phrases are: 
[late 1990s, this system, over 10%, all the cheques, the  United States]

>> Named Entities are: 
[('late 1990s', 'DATE'), ('over 10%', 'PERCENT')]


============================ Sentence 223 =============================

A number of ConvNet-based optical character recog- nition and handwriting recognition systems were later deployed by   


>> Tokens are: 
[number, ConvNet, -, based, optical, character, recog-, nition, handwriting, recognition, systems, later, deployed,  ] 

>> PoS Tags are: 
[('number', 'NOUN'), ('ConvNet', 'PROPN'), ('-', 'PUNCT'), ('based', 'VERB'), ('optical', 'ADJ'), ('character', 'NOUN'), ('recog-', 'NOUN'), ('nition', 'NOUN'), ('handwriting', 'NOUN'), ('recognition', 'NOUN'), ('systems', 'NOUN'), ('later', 'ADV'), ('deployed', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('number', 'nsubjpass'), ('ConvNet', 'npadvmod'), ('-', 'punct'), ('based', 'amod'), ('optical', 'amod'), ('character', 'compound'), ('recog-', 'nmod'), ('nition', 'nmod'), ('handwriting', 'compound'), ('recognition', 'conj'), ('systems', 'pobj'), ('later', 'advmod'), ('deployed', 'ROOT'), (' ', 'pobj')]

>> Bigrams: 
[[number, ConvNet], [ConvNet, -], [-, based], [based, optical], [optical, character], [character, recog-], [recog-, nition], [nition, handwriting], [handwriting, recognition], [recognition, systems], [systems, later], [later, deployed], [deployed,  ]]

>> Trigrams: 
[[number, ConvNet, -], [ConvNet, -, based], [-, based, optical], [based, optical, character], [optical, character, recog-], [character, recog-, nition], [recog-, nition, handwriting], [nition, handwriting, recognition], [handwriting, recognition, systems], [recognition, systems, later], [systems, later, deployed], [later, deployed,  ]]

>> Noun Phrases are: 
[A number, ConvNet-based optical character recog- nition and handwriting recognition systems]

>> Named Entities are: 
[('ConvNet', 'GPE')]


============================ Sentence 224 =============================

Microsoft49. 


>> Tokens are: 
[Microsoft49, .] 

>> PoS Tags are: 
[('Microsoft49', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Microsoft49', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Microsoft49, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Microsoft49]

>> Named Entities are: 
[]


============================ Sentence 225 =============================

ConvNets were also experimented with in the early 1990s  for object detection in natural images, including faces and hands50,51,  and for face recognition52. 


>> Tokens are: 
[ConvNets, experimented, early, 1990s,  , object, detection, natural, images, ,, including, faces, hands50,51, ,,  , face, recognition52, .] 

>> PoS Tags are: 
[('ConvNets', 'PROPN'), ('experimented', 'VERB'), ('early', 'ADJ'), ('1990s', 'NOUN'), (' ', 'SPACE'), ('object', 'NOUN'), ('detection', 'NOUN'), ('natural', 'ADJ'), ('images', 'NOUN'), (',', 'PUNCT'), ('including', 'VERB'), ('faces', 'NOUN'), ('hands50,51', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('face', 'NOUN'), ('recognition52', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('ConvNets', 'nsubjpass'), ('experimented', 'ROOT'), ('early', 'amod'), ('1990s', 'pobj'), (' ', 'dobj'), ('object', 'compound'), ('detection', 'pobj'), ('natural', 'amod'), ('images', 'pobj'), (',', 'punct'), ('including', 'prep'), ('faces', 'pobj'), ('hands50,51', 'conj'), (',', 'punct'), (' ', 'conj'), ('face', 'compound'), ('recognition52', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[ConvNets, experimented], [experimented, early], [early, 1990s], [1990s,  ], [ , object], [object, detection], [detection, natural], [natural, images], [images, ,], [,, including], [including, faces], [faces, hands50,51], [hands50,51, ,], [,,  ], [ , face], [face, recognition52], [recognition52, .]]

>> Trigrams: 
[[ConvNets, experimented, early], [experimented, early, 1990s], [early, 1990s,  ], [1990s,  , object], [ , object, detection], [object, detection, natural], [detection, natural, images], [natural, images, ,], [images, ,, including], [,, including, faces], [including, faces, hands50,51], [faces, hands50,51, ,], [hands50,51, ,,  ], [,,  , face], [ , face, recognition52], [face, recognition52, .]]

>> Noun Phrases are: 
[ConvNets, the early 1990s, object detection, natural images, faces, hands50,51, face recognition52]

>> Named Entities are: 
[('the early 1990s', 'DATE')]


============================ Sentence 226 =============================

  Image understanding with deep convolutional networks   


>> Tokens are: 
[  , Image, understanding, deep, convolutional, networks,  ] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('Image', 'NOUN'), ('understanding', 'NOUN'), ('deep', 'ADJ'), ('convolutional', 'ADJ'), ('networks', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'nummod'), ('Image', 'compound'), ('understanding', 'nsubj'), ('deep', 'amod'), ('convolutional', 'amod'), ('networks', 'pobj'), (' ', 'ROOT')]

>> Bigrams: 
[[  , Image], [Image, understanding], [understanding, deep], [deep, convolutional], [convolutional, networks], [networks,  ]]

>> Trigrams: 
[[  , Image, understanding], [Image, understanding, deep], [understanding, deep, convolutional], [deep, convolutional, networks], [convolutional, networks,  ]]

>> Noun Phrases are: 
[  Image understanding, deep convolutional networks]

>> Named Entities are: 
[]


============================ Sentence 227 =============================

Since the early 2000s, ConvNets have been applied with great success to  the detection, segmentation and recognition of objects and regions in  images. 


>> Tokens are: 
[early, 2000s, ,, ConvNets, applied, great, success,  , detection, ,, segmentation, recognition, objects, regions,  , images, .] 

>> PoS Tags are: 
[('early', 'ADJ'), ('2000s', 'NOUN'), (',', 'PUNCT'), ('ConvNets', 'PROPN'), ('applied', 'VERB'), ('great', 'ADJ'), ('success', 'NOUN'), (' ', 'SPACE'), ('detection', 'NOUN'), (',', 'PUNCT'), ('segmentation', 'NOUN'), ('recognition', 'NOUN'), ('objects', 'NOUN'), ('regions', 'NOUN'), (' ', 'SPACE'), ('images', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('early', 'amod'), ('2000s', 'pobj'), (',', 'punct'), ('ConvNets', 'nsubjpass'), ('applied', 'ROOT'), ('great', 'amod'), ('success', 'pobj'), (' ', 'pobj'), ('detection', 'dobj'), (',', 'punct'), ('segmentation', 'conj'), ('recognition', 'conj'), ('objects', 'pobj'), ('regions', 'conj'), (' ', 'compound'), ('images', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[early, 2000s], [2000s, ,], [,, ConvNets], [ConvNets, applied], [applied, great], [great, success], [success,  ], [ , detection], [detection, ,], [,, segmentation], [segmentation, recognition], [recognition, objects], [objects, regions], [regions,  ], [ , images], [images, .]]

>> Trigrams: 
[[early, 2000s, ,], [2000s, ,, ConvNets], [,, ConvNets, applied], [ConvNets, applied, great], [applied, great, success], [great, success,  ], [success,  , detection], [ , detection, ,], [detection, ,, segmentation], [,, segmentation, recognition], [segmentation, recognition, objects], [recognition, objects, regions], [objects, regions,  ], [regions,  , images], [ , images, .]]

>> Noun Phrases are: 
[the early 2000s, ConvNets, great success, the detection, segmentation, recognition, objects, regions,  images]

>> Named Entities are: 
[('the early 2000s', 'DATE'), ('ConvNets', 'ORG')]


============================ Sentence 228 =============================

These were all tasks in which labelled data was relatively abun- dant, such as traffic sign recognition53, the segmentation of biological  images54 particularly for connectomics55, and the detection of faces,  text, pedestrians and human bodies in natural images36,50,51,56–58. 


>> Tokens are: 
[tasks, labelled, data, relatively, abun-, dant, ,, traffic, sign, recognition53, ,, segmentation, biological,  , images54, particularly, connectomics55, ,, detection, faces, ,,  , text, ,, pedestrians, human, bodies, natural, images36,50,51,56–58, .] 

>> PoS Tags are: 
[('tasks', 'NOUN'), ('labelled', 'VERB'), ('data', 'NOUN'), ('relatively', 'ADV'), ('abun-', 'ADJ'), ('dant', 'ADJ'), (',', 'PUNCT'), ('traffic', 'NOUN'), ('sign', 'NOUN'), ('recognition53', 'NOUN'), (',', 'PUNCT'), ('segmentation', 'NOUN'), ('biological', 'ADJ'), (' ', 'SPACE'), ('images54', 'NOUN'), ('particularly', 'ADV'), ('connectomics55', 'NOUN'), (',', 'PUNCT'), ('detection', 'NOUN'), ('faces', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('text', 'NOUN'), (',', 'PUNCT'), ('pedestrians', 'NOUN'), ('human', 'ADJ'), ('bodies', 'NOUN'), ('natural', 'ADJ'), ('images36,50,51,56–58', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('tasks', 'attr'), ('labelled', 'amod'), ('data', 'nsubj'), ('relatively', 'advmod'), ('abun-', 'amod'), ('dant', 'acomp'), (',', 'punct'), ('traffic', 'compound'), ('sign', 'compound'), ('recognition53', 'pobj'), (',', 'punct'), ('segmentation', 'conj'), ('biological', 'amod'), (' ', 'compound'), ('images54', 'pobj'), ('particularly', 'advmod'), ('connectomics55', 'pobj'), (',', 'punct'), ('detection', 'conj'), ('faces', 'pobj'), (',', 'punct'), (' ', 'compound'), ('text', 'conj'), (',', 'punct'), ('pedestrians', 'conj'), ('human', 'amod'), ('bodies', 'conj'), ('natural', 'amod'), ('images36,50,51,56–58', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[tasks, labelled], [labelled, data], [data, relatively], [relatively, abun-], [abun-, dant], [dant, ,], [,, traffic], [traffic, sign], [sign, recognition53], [recognition53, ,], [,, segmentation], [segmentation, biological], [biological,  ], [ , images54], [images54, particularly], [particularly, connectomics55], [connectomics55, ,], [,, detection], [detection, faces], [faces, ,], [,,  ], [ , text], [text, ,], [,, pedestrians], [pedestrians, human], [human, bodies], [bodies, natural], [natural, images36,50,51,56–58], [images36,50,51,56–58, .]]

>> Trigrams: 
[[tasks, labelled, data], [labelled, data, relatively], [data, relatively, abun-], [relatively, abun-, dant], [abun-, dant, ,], [dant, ,, traffic], [,, traffic, sign], [traffic, sign, recognition53], [sign, recognition53, ,], [recognition53, ,, segmentation], [,, segmentation, biological], [segmentation, biological,  ], [biological,  , images54], [ , images54, particularly], [images54, particularly, connectomics55], [particularly, connectomics55, ,], [connectomics55, ,, detection], [,, detection, faces], [detection, faces, ,], [faces, ,,  ], [,,  , text], [ , text, ,], [text, ,, pedestrians], [,, pedestrians, human], [pedestrians, human, bodies], [human, bodies, natural], [bodies, natural, images36,50,51,56–58], [natural, images36,50,51,56–58, .]]

>> Noun Phrases are: 
[tasks, labelled data, traffic sign recognition53, the segmentation, biological  images54, connectomics55, the detection, faces,  text, pedestrians, human bodies, natural images36,50,51,56–58]

>> Named Entities are: 
[('connectomics55', 'PERSON')]


============================ Sentence 229 =============================

A major  recent practical success of ConvNets is face recognition59. 


>> Tokens are: 
[major,  , recent, practical, success, ConvNets, face, recognition59, .] 

>> PoS Tags are: 
[('major', 'ADJ'), (' ', 'SPACE'), ('recent', 'ADJ'), ('practical', 'ADJ'), ('success', 'NOUN'), ('ConvNets', 'PROPN'), ('face', 'NOUN'), ('recognition59', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('major', 'amod'), (' ', 'nmod'), ('recent', 'amod'), ('practical', 'amod'), ('success', 'nsubj'), ('ConvNets', 'pobj'), ('face', 'compound'), ('recognition59', 'attr'), ('.', 'punct')]

>> Bigrams: 
[[major,  ], [ , recent], [recent, practical], [practical, success], [success, ConvNets], [ConvNets, face], [face, recognition59], [recognition59, .]]

>> Trigrams: 
[[major,  , recent], [ , recent, practical], [recent, practical, success], [practical, success, ConvNets], [success, ConvNets, face], [ConvNets, face, recognition59], [face, recognition59, .]]

>> Noun Phrases are: 
[A major  recent practical success, ConvNets, face recognition59]

>> Named Entities are: 
[('ConvNets', 'ORG')]


============================ Sentence 230 =============================

  Importantly, images can be labelled at the pixel level, which will have  applications in technology, including autonomous mobile robots and 


>> Tokens are: 
[  , Importantly, ,, images, labelled, pixel, level, ,,  , applications, technology, ,, including, autonomous, mobile, robots] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('Importantly', 'ADV'), (',', 'PUNCT'), ('images', 'NOUN'), ('labelled', 'VERB'), ('pixel', 'ADJ'), ('level', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('applications', 'NOUN'), ('technology', 'NOUN'), (',', 'PUNCT'), ('including', 'VERB'), ('autonomous', 'ADJ'), ('mobile', 'ADJ'), ('robots', 'NOUN')] 

>> Dependency Tags are: 
[('  ', 'dep'), ('Importantly', 'advmod'), (',', 'punct'), ('images', 'nsubjpass'), ('labelled', 'ROOT'), ('pixel', 'amod'), ('level', 'pobj'), (',', 'punct'), (' ', 'compound'), ('applications', 'dobj'), ('technology', 'pobj'), (',', 'punct'), ('including', 'prep'), ('autonomous', 'amod'), ('mobile', 'amod'), ('robots', 'pobj')]

>> Bigrams: 
[[  , Importantly], [Importantly, ,], [,, images], [images, labelled], [labelled, pixel], [pixel, level], [level, ,], [,,  ], [ , applications], [applications, technology], [technology, ,], [,, including], [including, autonomous], [autonomous, mobile], [mobile, robots]]

>> Trigrams: 
[[  , Importantly, ,], [Importantly, ,, images], [,, images, labelled], [images, labelled, pixel], [labelled, pixel, level], [pixel, level, ,], [level, ,,  ], [,,  , applications], [ , applications, technology], [applications, technology, ,], [technology, ,, including], [,, including, autonomous], [including, autonomous, mobile], [autonomous, mobile, robots]]

>> Noun Phrases are: 
[images, the pixel level,  applications, technology, autonomous mobile robots]

>> Named Entities are: 
[]


============================ Sentence 231 =============================

  2 8   


>> Tokens are: 
[  , 2, 8,  ] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('2', 'NUM'), ('8', 'NUM'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'quantmod'), ('2', 'compound'), ('8', 'nummod'), (' ', 'ROOT')]

>> Bigrams: 
[[  , 2], [2, 8], [8,  ]]

>> Trigrams: 
[[  , 2, 8], [2, 8,  ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 232 =============================

M A Y  2 0 1 5  |  V O L  5 2 1  |   


>> Tokens are: 
[M, Y,  , 2, 0, 1, 5,  , |,  , V, O, L,  , 5, 2, 1,  , |,  ] 

>> PoS Tags are: 
[('M', 'PROPN'), ('Y', 'PROPN'), (' ', 'SPACE'), ('2', 'NUM'), ('0', 'NUM'), ('1', 'NUM'), ('5', 'NUM'), (' ', 'SPACE'), ('|', 'NOUN'), (' ', 'SPACE'), ('V', 'NOUN'), ('O', 'NOUN'), ('L', 'NOUN'), (' ', 'SPACE'), ('5', 'NUM'), ('2', 'NUM'), ('1', 'NUM'), (' ', 'SPACE'), ('|', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('M', 'compound'), ('Y', 'nmod'), (' ', 'nsubj'), ('2', 'quantmod'), ('0', 'quantmod'), ('1', 'compound'), ('5', 'nummod'), (' ', 'punct'), ('|', 'punct'), (' ', 'punct'), ('V', 'compound'), ('O', 'compound'), ('L', 'appos'), (' ', 'ROOT'), ('5', 'compound'), ('2', 'compound'), ('1', 'nummod'), (' ', 'punct'), ('|', 'npadvmod'), (' ', 'punct')]

>> Bigrams: 
[[M, Y], [Y,  ], [ , 2], [2, 0], [0, 1], [1, 5], [5,  ], [ , |], [|,  ], [ , V], [V, O], [O, L], [L,  ], [ , 5], [5, 2], [2, 1], [1,  ], [ , |], [|,  ]]

>> Trigrams: 
[[M, Y,  ], [Y,  , 2], [ , 2, 0], [2, 0, 1], [0, 1, 5], [1, 5,  ], [5,  , |], [ , |,  ], [|,  , V], [ , V, O], [V, O, L], [O, L,  ], [L,  , 5], [ , 5, 2], [5, 2, 1], [2, 1,  ], [1,  , |], [ , |,  ]]

>> Noun Phrases are: 
[V O L]

>> Named Entities are: 
[('2', 'CARDINAL')]


============================ Sentence 233 =============================

N A 


>> Tokens are: 
[N] 

>> PoS Tags are: 
[('N', 'PROPN')] 

>> Dependency Tags are: 
[('N', 'compound')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 234 =============================

T U R E  |  4 3 9  REVIEW INSIGHT  © 2015 Macmillan Publishers Limited. 


>> Tokens are: 
[T, U, R, E,  , |,  , 4, 3, 9,  , REVIEW, INSIGHT,  , ©, 2015, Macmillan, Publishers, Limited, .] 

>> PoS Tags are: 
[('T', 'NOUN'), ('U', 'NOUN'), ('R', 'NOUN'), ('E', 'NOUN'), (' ', 'SPACE'), ('|', 'NOUN'), (' ', 'SPACE'), ('4', 'NUM'), ('3', 'NUM'), ('9', 'NUM'), (' ', 'SPACE'), ('REVIEW', 'PROPN'), ('INSIGHT', 'PROPN'), (' ', 'SPACE'), ('©', 'ADJ'), ('2015', 'NUM'), ('Macmillan', 'PROPN'), ('Publishers', 'PROPN'), ('Limited', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('T', 'compound'), ('U', 'compound'), ('R', 'compound'), ('E', 'dep'), (' ', 'appos'), ('|', 'npadvmod'), (' ', 'nsubj'), ('4', 'nummod'), ('3', 'compound'), ('9', 'nummod'), (' ', 'compound'), ('REVIEW', 'compound'), ('INSIGHT', 'appos'), (' ', 'nmod'), ('©', 'nmod'), ('2015', 'nummod'), ('Macmillan', 'compound'), ('Publishers', 'compound'), ('Limited', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[T, U], [U, R], [R, E], [E,  ], [ , |], [|,  ], [ , 4], [4, 3], [3, 9], [9,  ], [ , REVIEW], [REVIEW, INSIGHT], [INSIGHT,  ], [ , ©], [©, 2015], [2015, Macmillan], [Macmillan, Publishers], [Publishers, Limited], [Limited, .]]

>> Trigrams: 
[[T, U, R], [U, R, E], [R, E,  ], [E,  , |], [ , |,  ], [|,  , 4], [ , 4, 3], [4, 3, 9], [3, 9,  ], [9,  , REVIEW], [ , REVIEW, INSIGHT], [REVIEW, INSIGHT,  ], [INSIGHT,  , ©], [ , ©, 2015], [©, 2015, Macmillan], [2015, Macmillan, Publishers], [Macmillan, Publishers, Limited], [Publishers, Limited, .]]

>> Noun Phrases are: 
[4 3 9  REVIEW INSIGHT]

>> Named Entities are: 
[('2015', 'DATE'), ('Macmillan Publishers Limited', 'ORG')]


============================ Sentence 235 =============================

All rights reserved    self-driving cars60,61. 


>> Tokens are: 
[rights, reserved,    , self, -, driving, cars60,61, .] 

>> PoS Tags are: 
[('rights', 'NOUN'), ('reserved', 'VERB'), ('   ', 'SPACE'), ('self', 'NOUN'), ('-', 'PUNCT'), ('driving', 'VERB'), ('cars60,61', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('rights', 'nsubj'), ('reserved', 'ROOT'), ('   ', 'nummod'), ('self', 'npadvmod'), ('-', 'punct'), ('driving', 'amod'), ('cars60,61', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[rights, reserved], [reserved,    ], [   , self], [self, -], [-, driving], [driving, cars60,61], [cars60,61, .]]

>> Trigrams: 
[[rights, reserved,    ], [reserved,    , self], [   , self, -], [self, -, driving], [-, driving, cars60,61], [driving, cars60,61, .]]

>> Noun Phrases are: 
[All rights,    self-driving cars60,61]

>> Named Entities are: 
[]


============================ Sentence 236 =============================

Companies such as Mobileye and NVIDIA are  using such ConvNet-based methods in their upcoming vision sys- tems for cars. 


>> Tokens are: 
[Companies, Mobileye, NVIDIA,  , ConvNet, -, based, methods, upcoming, vision, sys-, tems, cars, .] 

>> PoS Tags are: 
[('Companies', 'NOUN'), ('Mobileye', 'PROPN'), ('NVIDIA', 'PROPN'), (' ', 'SPACE'), ('ConvNet', 'PROPN'), ('-', 'PUNCT'), ('based', 'VERB'), ('methods', 'NOUN'), ('upcoming', 'ADJ'), ('vision', 'NOUN'), ('sys-', 'NOUN'), ('tems', 'VERB'), ('cars', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Companies', 'nsubj'), ('Mobileye', 'pobj'), ('NVIDIA', 'conj'), (' ', 'attr'), ('ConvNet', 'npadvmod'), ('-', 'punct'), ('based', 'amod'), ('methods', 'dobj'), ('upcoming', 'amod'), ('vision', 'compound'), ('sys-', 'pobj'), ('tems', 'advcl'), ('cars', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Companies, Mobileye], [Mobileye, NVIDIA], [NVIDIA,  ], [ , ConvNet], [ConvNet, -], [-, based], [based, methods], [methods, upcoming], [upcoming, vision], [vision, sys-], [sys-, tems], [tems, cars], [cars, .]]

>> Trigrams: 
[[Companies, Mobileye, NVIDIA], [Mobileye, NVIDIA,  ], [NVIDIA,  , ConvNet], [ , ConvNet, -], [ConvNet, -, based], [-, based, methods], [based, methods, upcoming], [methods, upcoming, vision], [upcoming, vision, sys-], [vision, sys-, tems], [sys-, tems, cars], [tems, cars, .]]

>> Noun Phrases are: 
[Companies, Mobileye, NVIDIA, such ConvNet-based methods, their upcoming vision sys-, cars]

>> Named Entities are: 
[('Mobileye', 'ORG'), ('ConvNet', 'ORG')]


============================ Sentence 237 =============================

Other applications gaining importance involve natural  language understanding14 and speech recognition7. 


>> Tokens are: 
[applications, gaining, importance, involve, natural,  , language, understanding14, speech, recognition7, .] 

>> PoS Tags are: 
[('applications', 'NOUN'), ('gaining', 'VERB'), ('importance', 'NOUN'), ('involve', 'VERB'), ('natural', 'ADJ'), (' ', 'SPACE'), ('language', 'NOUN'), ('understanding14', 'NOUN'), ('speech', 'NOUN'), ('recognition7', 'ADV'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('applications', 'nsubj'), ('gaining', 'acl'), ('importance', 'dobj'), ('involve', 'ROOT'), ('natural', 'amod'), (' ', 'compound'), ('language', 'compound'), ('understanding14', 'dobj'), ('speech', 'compound'), ('recognition7', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[applications, gaining], [gaining, importance], [importance, involve], [involve, natural], [natural,  ], [ , language], [language, understanding14], [understanding14, speech], [speech, recognition7], [recognition7, .]]

>> Trigrams: 
[[applications, gaining, importance], [gaining, importance, involve], [importance, involve, natural], [involve, natural,  ], [natural,  , language], [ , language, understanding14], [language, understanding14, speech], [understanding14, speech, recognition7], [speech, recognition7, .]]

>> Noun Phrases are: 
[Other applications, importance, natural  language understanding14]

>> Named Entities are: 
[]


============================ Sentence 238 =============================

  Despite these successes, ConvNets were largely forsaken by the  mainstream computer-vision and machine-learning communities  until the ImageNet competition in 2012. 


>> Tokens are: 
[  , Despite, successes, ,, ConvNets, largely, forsaken,  , mainstream, computer, -, vision, machine, -, learning, communities,  , ImageNet, competition, 2012, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('Despite', 'SCONJ'), ('successes', 'NOUN'), (',', 'PUNCT'), ('ConvNets', 'PROPN'), ('largely', 'ADV'), ('forsaken', 'VERB'), (' ', 'SPACE'), ('mainstream', 'NOUN'), ('computer', 'NOUN'), ('-', 'PUNCT'), ('vision', 'NOUN'), ('machine', 'NOUN'), ('-', 'PUNCT'), ('learning', 'VERB'), ('communities', 'NOUN'), (' ', 'SPACE'), ('ImageNet', 'PROPN'), ('competition', 'NOUN'), ('2012', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'dep'), ('Despite', 'prep'), ('successes', 'pobj'), (',', 'punct'), ('ConvNets', 'nsubjpass'), ('largely', 'advmod'), ('forsaken', 'ROOT'), (' ', 'nmod'), ('mainstream', 'amod'), ('computer', 'nmod'), ('-', 'punct'), ('vision', 'nmod'), ('machine', 'npadvmod'), ('-', 'punct'), ('learning', 'conj'), ('communities', 'pobj'), (' ', 'appos'), ('ImageNet', 'compound'), ('competition', 'pobj'), ('2012', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[  , Despite], [Despite, successes], [successes, ,], [,, ConvNets], [ConvNets, largely], [largely, forsaken], [forsaken,  ], [ , mainstream], [mainstream, computer], [computer, -], [-, vision], [vision, machine], [machine, -], [-, learning], [learning, communities], [communities,  ], [ , ImageNet], [ImageNet, competition], [competition, 2012], [2012, .]]

>> Trigrams: 
[[  , Despite, successes], [Despite, successes, ,], [successes, ,, ConvNets], [,, ConvNets, largely], [ConvNets, largely, forsaken], [largely, forsaken,  ], [forsaken,  , mainstream], [ , mainstream, computer], [mainstream, computer, -], [computer, -, vision], [-, vision, machine], [vision, machine, -], [machine, -, learning], [-, learning, communities], [learning, communities,  ], [communities,  , ImageNet], [ , ImageNet, competition], [ImageNet, competition, 2012], [competition, 2012, .]]

>> Noun Phrases are: 
[these successes, ConvNets, the  mainstream computer-vision and machine-learning communities, the ImageNet competition]

>> Named Entities are: 
[('ConvNets', 'ORG'), ('ImageNet', 'ORG'), ('2012', 'DATE')]


============================ Sentence 239 =============================

When deep convolutional  networks were applied to a data set of about a million images from  the web that contained 1,000 different classes, they achieved spec- tacular results, almost halving the error rates of the best compet- ing approaches1. 


>> Tokens are: 
[deep, convolutional,  , networks, applied, data, set, million, images,  , web, contained, 1,000, different, classes, ,, achieved, spec-, tacular, results, ,, halving, error, rates, best, compet-, ing, approaches1, .] 

>> PoS Tags are: 
[('deep', 'ADJ'), ('convolutional', 'ADJ'), (' ', 'SPACE'), ('networks', 'NOUN'), ('applied', 'VERB'), ('data', 'NOUN'), ('set', 'VERB'), ('million', 'NUM'), ('images', 'NOUN'), (' ', 'SPACE'), ('web', 'NOUN'), ('contained', 'VERB'), ('1,000', 'NUM'), ('different', 'ADJ'), ('classes', 'NOUN'), (',', 'PUNCT'), ('achieved', 'VERB'), ('spec-', 'NUM'), ('tacular', 'ADJ'), ('results', 'NOUN'), (',', 'PUNCT'), ('halving', 'VERB'), ('error', 'NOUN'), ('rates', 'NOUN'), ('best', 'ADJ'), ('compet-', 'NOUN'), ('ing', 'NOUN'), ('approaches1', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('deep', 'amod'), ('convolutional', 'amod'), (' ', 'compound'), ('networks', 'nsubjpass'), ('applied', 'advcl'), ('data', 'pobj'), ('set', 'acl'), ('million', 'nummod'), ('images', 'pobj'), (' ', 'pobj'), ('web', 'appos'), ('contained', 'relcl'), ('1,000', 'nummod'), ('different', 'amod'), ('classes', 'dobj'), (',', 'punct'), ('achieved', 'ROOT'), ('spec-', 'xcomp'), ('tacular', 'amod'), ('results', 'dobj'), (',', 'punct'), ('halving', 'advcl'), ('error', 'compound'), ('rates', 'dobj'), ('best', 'amod'), ('compet-', 'pobj'), ('ing', 'compound'), ('approaches1', 'npadvmod'), ('.', 'punct')]

>> Bigrams: 
[[deep, convolutional], [convolutional,  ], [ , networks], [networks, applied], [applied, data], [data, set], [set, million], [million, images], [images,  ], [ , web], [web, contained], [contained, 1,000], [1,000, different], [different, classes], [classes, ,], [,, achieved], [achieved, spec-], [spec-, tacular], [tacular, results], [results, ,], [,, halving], [halving, error], [error, rates], [rates, best], [best, compet-], [compet-, ing], [ing, approaches1], [approaches1, .]]

>> Trigrams: 
[[deep, convolutional,  ], [convolutional,  , networks], [ , networks, applied], [networks, applied, data], [applied, data, set], [data, set, million], [set, million, images], [million, images,  ], [images,  , web], [ , web, contained], [web, contained, 1,000], [contained, 1,000, different], [1,000, different, classes], [different, classes, ,], [classes, ,, achieved], [,, achieved, spec-], [achieved, spec-, tacular], [spec-, tacular, results], [tacular, results, ,], [results, ,, halving], [,, halving, error], [halving, error, rates], [error, rates, best], [rates, best, compet-], [best, compet-, ing], [compet-, ing, approaches1], [ing, approaches1, .]]

>> Noun Phrases are: 
[deep convolutional  networks, a data, about a million images, the web, 1,000 different classes, they, tacular results, the error rates, the best compet-]

>> Named Entities are: 
[('about a million', 'CARDINAL'), ('1,000', 'CARDINAL')]


============================ Sentence 240 =============================

This success came from the efficient use of GPUs,  ReLUs, a new regularization technique called dropout62, and tech- niques to generate more training examples by deforming the existing  ones. 


>> Tokens are: 
[success, came, efficient, use, GPUs, ,,  , ReLUs, ,, new, regularization, technique, called, dropout62, ,, tech-, niques, generate, training, examples, deforming, existing,  , ones, .] 

>> PoS Tags are: 
[('success', 'NOUN'), ('came', 'VERB'), ('efficient', 'ADJ'), ('use', 'NOUN'), ('GPUs', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('ReLUs', 'PROPN'), (',', 'PUNCT'), ('new', 'ADJ'), ('regularization', 'NOUN'), ('technique', 'NOUN'), ('called', 'VERB'), ('dropout62', 'NOUN'), (',', 'PUNCT'), ('tech-', 'NOUN'), ('niques', 'VERB'), ('generate', 'VERB'), ('training', 'NOUN'), ('examples', 'NOUN'), ('deforming', 'VERB'), ('existing', 'VERB'), (' ', 'SPACE'), ('ones', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('success', 'nsubj'), ('came', 'ROOT'), ('efficient', 'amod'), ('use', 'pobj'), ('GPUs', 'pobj'), (',', 'punct'), (' ', 'compound'), ('ReLUs', 'appos'), (',', 'punct'), ('new', 'amod'), ('regularization', 'compound'), ('technique', 'dobj'), ('called', 'acl'), ('dropout62', 'oprd'), (',', 'punct'), ('tech-', 'nsubj'), ('niques', 'conj'), ('generate', 'xcomp'), ('training', 'compound'), ('examples', 'dobj'), ('deforming', 'pcomp'), ('existing', 'amod'), (' ', 'amod'), ('ones', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[success, came], [came, efficient], [efficient, use], [use, GPUs], [GPUs, ,], [,,  ], [ , ReLUs], [ReLUs, ,], [,, new], [new, regularization], [regularization, technique], [technique, called], [called, dropout62], [dropout62, ,], [,, tech-], [tech-, niques], [niques, generate], [generate, training], [training, examples], [examples, deforming], [deforming, existing], [existing,  ], [ , ones], [ones, .]]

>> Trigrams: 
[[success, came, efficient], [came, efficient, use], [efficient, use, GPUs], [use, GPUs, ,], [GPUs, ,,  ], [,,  , ReLUs], [ , ReLUs, ,], [ReLUs, ,, new], [,, new, regularization], [new, regularization, technique], [regularization, technique, called], [technique, called, dropout62], [called, dropout62, ,], [dropout62, ,, tech-], [,, tech-, niques], [tech-, niques, generate], [niques, generate, training], [generate, training, examples], [training, examples, deforming], [examples, deforming, existing], [deforming, existing,  ], [existing,  , ones], [ , ones, .]]

>> Noun Phrases are: 
[This success, the efficient use, GPUs,  ReLUs, a new regularization technique, dropout62, tech-, more training examples, the existing  ones]

>> Named Entities are: 
[]


============================ Sentence 241 =============================

This success has brought about a revolution in computer vision;  ConvNets are now the dominant approach for almost all recognition  and detection tasks4,58,59,63–65 and approach human performance on  some tasks. 


>> Tokens are: 
[success, brought, revolution, computer, vision, ;,  , ConvNets, dominant, approach, recognition,  , detection, tasks4,58,59,63–65, approach, human, performance,  , tasks, .] 

>> PoS Tags are: 
[('success', 'NOUN'), ('brought', 'VERB'), ('revolution', 'NOUN'), ('computer', 'NOUN'), ('vision', 'NOUN'), (';', 'PUNCT'), (' ', 'SPACE'), ('ConvNets', 'PROPN'), ('dominant', 'ADJ'), ('approach', 'NOUN'), ('recognition', 'NOUN'), (' ', 'SPACE'), ('detection', 'NOUN'), ('tasks4,58,59,63–65', 'NOUN'), ('approach', 'VERB'), ('human', 'ADJ'), ('performance', 'NOUN'), (' ', 'SPACE'), ('tasks', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('success', 'nsubj'), ('brought', 'ccomp'), ('revolution', 'dobj'), ('computer', 'compound'), ('vision', 'pobj'), (';', 'punct'), (' ', 'compound'), ('ConvNets', 'nsubj'), ('dominant', 'amod'), ('approach', 'attr'), ('recognition', 'compound'), (' ', 'pobj'), ('detection', 'compound'), ('tasks4,58,59,63–65', 'conj'), ('approach', 'conj'), ('human', 'amod'), ('performance', 'dobj'), (' ', 'pobj'), ('tasks', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[success, brought], [brought, revolution], [revolution, computer], [computer, vision], [vision, ;], [;,  ], [ , ConvNets], [ConvNets, dominant], [dominant, approach], [approach, recognition], [recognition,  ], [ , detection], [detection, tasks4,58,59,63–65], [tasks4,58,59,63–65, approach], [approach, human], [human, performance], [performance,  ], [ , tasks], [tasks, .]]

>> Trigrams: 
[[success, brought, revolution], [brought, revolution, computer], [revolution, computer, vision], [computer, vision, ;], [vision, ;,  ], [;,  , ConvNets], [ , ConvNets, dominant], [ConvNets, dominant, approach], [dominant, approach, recognition], [approach, recognition,  ], [recognition,  , detection], [ , detection, tasks4,58,59,63–65], [detection, tasks4,58,59,63–65, approach], [tasks4,58,59,63–65, approach, human], [approach, human, performance], [human, performance,  ], [performance,  , tasks], [ , tasks, .]]

>> Noun Phrases are: 
[This success, a revolution, computer vision,  ConvNets, the dominant approach, detection tasks4,58,59,63–65, human performance, some tasks]

>> Named Entities are: 
[]


============================ Sentence 242 =============================

A recent stunning demonstration combines ConvNets  and recurrent net modules for the generation of image captions   


>> Tokens are: 
[recent, stunning, demonstration, combines, ConvNets,  , recurrent, net, modules, generation, image, captions,  ] 

>> PoS Tags are: 
[('recent', 'ADJ'), ('stunning', 'ADJ'), ('demonstration', 'NOUN'), ('combines', 'VERB'), ('ConvNets', 'PROPN'), (' ', 'SPACE'), ('recurrent', 'VERB'), ('net', 'ADJ'), ('modules', 'NOUN'), ('generation', 'NOUN'), ('image', 'NOUN'), ('captions', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('recent', 'amod'), ('stunning', 'amod'), ('demonstration', 'nsubj'), ('combines', 'ROOT'), ('ConvNets', 'compound'), (' ', 'dobj'), ('recurrent', 'amod'), ('net', 'amod'), ('modules', 'conj'), ('generation', 'pobj'), ('image', 'compound'), ('captions', 'pobj'), (' ', 'punct')]

>> Bigrams: 
[[recent, stunning], [stunning, demonstration], [demonstration, combines], [combines, ConvNets], [ConvNets,  ], [ , recurrent], [recurrent, net], [net, modules], [modules, generation], [generation, image], [image, captions], [captions,  ]]

>> Trigrams: 
[[recent, stunning, demonstration], [stunning, demonstration, combines], [demonstration, combines, ConvNets], [combines, ConvNets,  ], [ConvNets,  , recurrent], [ , recurrent, net], [recurrent, net, modules], [net, modules, generation], [modules, generation, image], [generation, image, captions], [image, captions,  ]]

>> Noun Phrases are: 
[A recent stunning demonstration, recurrent net modules, the generation, image captions]

>> Named Entities are: 
[]


============================ Sentence 243 =============================

(Fig. 


>> Tokens are: 
[(, Fig, .] 

>> PoS Tags are: 
[('(', 'PUNCT'), ('Fig', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('(', 'punct'), ('Fig', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[(, Fig], [Fig, .]]

>> Trigrams: 
[[(, Fig, .]]

>> Noun Phrases are: 
[(Fig]

>> Named Entities are: 
[('Fig', 'PERSON')]


============================ Sentence 244 =============================

 3). 


>> Tokens are: 
[ , 3, ), .] 

>> PoS Tags are: 
[('\xa0', 'SPACE'), ('3', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\xa0', 'ROOT'), ('3', 'nummod'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[ , 3], [3, )], [), .]]

>> Trigrams: 
[[ , 3, )], [3, ), .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 245 =============================

  Recent ConvNet architectures have 10 to 20 layers of ReLUs, hun- dreds of millions of weights, and billions of connections between  units. 


>> Tokens are: 
[  , Recent, ConvNet, architectures, 10, 20, layers, ReLUs, ,, hun-, dreds, millions, weights, ,, billions, connections,  , units, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('Recent', 'PROPN'), ('ConvNet', 'PROPN'), ('architectures', 'NOUN'), ('10', 'NUM'), ('20', 'NUM'), ('layers', 'NOUN'), ('ReLUs', 'NOUN'), (',', 'PUNCT'), ('hun-', 'ADJ'), ('dreds', 'NOUN'), ('millions', 'NOUN'), ('weights', 'NOUN'), (',', 'PUNCT'), ('billions', 'NOUN'), ('connections', 'NOUN'), (' ', 'SPACE'), ('units', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'nummod'), ('Recent', 'amod'), ('ConvNet', 'compound'), ('architectures', 'nsubj'), ('10', 'quantmod'), ('20', 'nummod'), ('layers', 'dobj'), ('ReLUs', 'pobj'), (',', 'punct'), ('hun-', 'amod'), ('dreds', 'conj'), ('millions', 'pobj'), ('weights', 'pobj'), (',', 'punct'), ('billions', 'conj'), ('connections', 'pobj'), (' ', 'compound'), ('units', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[  , Recent], [Recent, ConvNet], [ConvNet, architectures], [architectures, 10], [10, 20], [20, layers], [layers, ReLUs], [ReLUs, ,], [,, hun-], [hun-, dreds], [dreds, millions], [millions, weights], [weights, ,], [,, billions], [billions, connections], [connections,  ], [ , units], [units, .]]

>> Trigrams: 
[[  , Recent, ConvNet], [Recent, ConvNet, architectures], [ConvNet, architectures, 10], [architectures, 10, 20], [10, 20, layers], [20, layers, ReLUs], [layers, ReLUs, ,], [ReLUs, ,, hun-], [,, hun-, dreds], [hun-, dreds, millions], [dreds, millions, weights], [millions, weights, ,], [weights, ,, billions], [,, billions, connections], [billions, connections,  ], [connections,  , units], [ , units, .]]

>> Noun Phrases are: 
[  Recent ConvNet architectures, 10 to 20 layers, ReLUs, hun- dreds, millions, weights, billions, connections,  units]

>> Named Entities are: 
[('Recent ConvNet', 'ORG'), ('10 to 20', 'CARDINAL'), ('millions', 'CARDINAL'), ('billions', 'CARDINAL')]


============================ Sentence 246 =============================

Whereas training such large networks could have taken weeks  only two years ago, progress in hardware, software and algorithm  parallelization have reduced training times to a few hours. 


>> Tokens are: 
[training, large, networks, taken, weeks,  , years, ago, ,, progress, hardware, ,, software, algorithm,  , parallelization, reduced, training, times, hours, .] 

>> PoS Tags are: 
[('training', 'VERB'), ('large', 'ADJ'), ('networks', 'NOUN'), ('taken', 'VERB'), ('weeks', 'NOUN'), (' ', 'SPACE'), ('years', 'NOUN'), ('ago', 'ADV'), (',', 'PUNCT'), ('progress', 'VERB'), ('hardware', 'NOUN'), (',', 'PUNCT'), ('software', 'NOUN'), ('algorithm', 'NOUN'), (' ', 'SPACE'), ('parallelization', 'NOUN'), ('reduced', 'VERB'), ('training', 'NOUN'), ('times', 'NOUN'), ('hours', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('training', 'csubj'), ('large', 'amod'), ('networks', 'dobj'), ('taken', 'ROOT'), ('weeks', 'dobj'), (' ', 'dobj'), ('years', 'npadvmod'), ('ago', 'advmod'), (',', 'punct'), ('progress', 'dep'), ('hardware', 'pobj'), (',', 'punct'), ('software', 'conj'), ('algorithm', 'conj'), (' ', 'compound'), ('parallelization', 'nsubj'), ('reduced', 'conj'), ('training', 'compound'), ('times', 'dobj'), ('hours', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[training, large], [large, networks], [networks, taken], [taken, weeks], [weeks,  ], [ , years], [years, ago], [ago, ,], [,, progress], [progress, hardware], [hardware, ,], [,, software], [software, algorithm], [algorithm,  ], [ , parallelization], [parallelization, reduced], [reduced, training], [training, times], [times, hours], [hours, .]]

>> Trigrams: 
[[training, large, networks], [large, networks, taken], [networks, taken, weeks], [taken, weeks,  ], [weeks,  , years], [ , years, ago], [years, ago, ,], [ago, ,, progress], [,, progress, hardware], [progress, hardware, ,], [hardware, ,, software], [,, software, algorithm], [software, algorithm,  ], [algorithm,  , parallelization], [ , parallelization, reduced], [parallelization, reduced, training], [reduced, training, times], [training, times, hours], [times, hours, .]]

>> Noun Phrases are: 
[such large networks, weeks, hardware, software, algorithm,  parallelization, training times, a few hours]

>> Named Entities are: 
[('weeks', 'DATE'), ('only two years ago', 'DATE'), ('a few hours', 'TIME')]


============================ Sentence 247 =============================

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 248 =============================

The performance of ConvNet-based vision systems has caused  most major technology companies, including Google, Facebook,   Microsoft, IBM, Yahoo!, Twitter and Adobe, as well as a quickly  growing number of start-ups to initiate research and development  projects and to deploy ConvNet-based image understanding products  and services. 


>> Tokens are: 
[performance, ConvNet, -, based, vision, systems, caused,  , major, technology, companies, ,, including, Google, ,, Facebook, ,,   , Microsoft, ,, IBM, ,, Yahoo, !, ,, Twitter, Adobe, ,, quickly,  , growing, number, start, -, ups, initiate, research, development,  , projects, deploy, ConvNet, -, based, image, understanding, products,  , services, .] 

>> PoS Tags are: 
[('performance', 'NOUN'), ('ConvNet', 'PROPN'), ('-', 'PUNCT'), ('based', 'VERB'), ('vision', 'NOUN'), ('systems', 'NOUN'), ('caused', 'VERB'), (' ', 'SPACE'), ('major', 'ADJ'), ('technology', 'NOUN'), ('companies', 'NOUN'), (',', 'PUNCT'), ('including', 'VERB'), ('Google', 'PROPN'), (',', 'PUNCT'), ('Facebook', 'PROPN'), (',', 'PUNCT'), ('  ', 'SPACE'), ('Microsoft', 'PROPN'), (',', 'PUNCT'), ('IBM', 'PROPN'), (',', 'PUNCT'), ('Yahoo', 'PROPN'), ('!', 'PROPN'), (',', 'PUNCT'), ('Twitter', 'PROPN'), ('Adobe', 'PROPN'), (',', 'PUNCT'), ('quickly', 'ADV'), (' ', 'SPACE'), ('growing', 'VERB'), ('number', 'NOUN'), ('start', 'NOUN'), ('-', 'PUNCT'), ('ups', 'NOUN'), ('initiate', 'VERB'), ('research', 'NOUN'), ('development', 'NOUN'), (' ', 'SPACE'), ('projects', 'NOUN'), ('deploy', 'VERB'), ('ConvNet', 'PROPN'), ('-', 'PUNCT'), ('based', 'VERB'), ('image', 'NOUN'), ('understanding', 'NOUN'), ('products', 'NOUN'), (' ', 'SPACE'), ('services', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('performance', 'nsubj'), ('ConvNet', 'npadvmod'), ('-', 'punct'), ('based', 'amod'), ('vision', 'compound'), ('systems', 'pobj'), ('caused', 'ROOT'), (' ', 'nmod'), ('major', 'amod'), ('technology', 'compound'), ('companies', 'dobj'), (',', 'punct'), ('including', 'prep'), ('Google', 'pobj'), (',', 'punct'), ('Facebook', 'conj'), (',', 'punct'), ('  ', 'compound'), ('Microsoft', 'npadvmod'), (',', 'punct'), ('IBM', 'conj'), (',', 'punct'), ('Yahoo', 'conj'), ('!', 'punct'), (',', 'punct'), ('Twitter', 'appos'), ('Adobe', 'conj'), (',', 'punct'), ('quickly', 'advmod'), (' ', 'nmod'), ('growing', 'amod'), ('number', 'conj'), ('start', 'compound'), ('-', 'punct'), ('ups', 'pobj'), ('initiate', 'advcl'), ('research', 'dobj'), ('development', 'conj'), (' ', 'conj'), ('projects', 'dobj'), ('deploy', 'conj'), ('ConvNet', 'npadvmod'), ('-', 'punct'), ('based', 'amod'), ('image', 'compound'), ('understanding', 'compound'), ('products', 'compound'), (' ', 'dobj'), ('services', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[performance, ConvNet], [ConvNet, -], [-, based], [based, vision], [vision, systems], [systems, caused], [caused,  ], [ , major], [major, technology], [technology, companies], [companies, ,], [,, including], [including, Google], [Google, ,], [,, Facebook], [Facebook, ,], [,,   ], [  , Microsoft], [Microsoft, ,], [,, IBM], [IBM, ,], [,, Yahoo], [Yahoo, !], [!, ,], [,, Twitter], [Twitter, Adobe], [Adobe, ,], [,, quickly], [quickly,  ], [ , growing], [growing, number], [number, start], [start, -], [-, ups], [ups, initiate], [initiate, research], [research, development], [development,  ], [ , projects], [projects, deploy], [deploy, ConvNet], [ConvNet, -], [-, based], [based, image], [image, understanding], [understanding, products], [products,  ], [ , services], [services, .]]

>> Trigrams: 
[[performance, ConvNet, -], [ConvNet, -, based], [-, based, vision], [based, vision, systems], [vision, systems, caused], [systems, caused,  ], [caused,  , major], [ , major, technology], [major, technology, companies], [technology, companies, ,], [companies, ,, including], [,, including, Google], [including, Google, ,], [Google, ,, Facebook], [,, Facebook, ,], [Facebook, ,,   ], [,,   , Microsoft], [  , Microsoft, ,], [Microsoft, ,, IBM], [,, IBM, ,], [IBM, ,, Yahoo], [,, Yahoo, !], [Yahoo, !, ,], [!, ,, Twitter], [,, Twitter, Adobe], [Twitter, Adobe, ,], [Adobe, ,, quickly], [,, quickly,  ], [quickly,  , growing], [ , growing, number], [growing, number, start], [number, start, -], [start, -, ups], [-, ups, initiate], [ups, initiate, research], [initiate, research, development], [research, development,  ], [development,  , projects], [ , projects, deploy], [projects, deploy, ConvNet], [deploy, ConvNet, -], [ConvNet, -, based], [-, based, image], [based, image, understanding], [image, understanding, products], [understanding, products,  ], [products,  , services], [ , services, .]]

>> Noun Phrases are: 
[The performance, ConvNet-based vision systems,  most major technology companies, Google, Facebook, Twitter, Adobe, start-ups, research, development, projects, services]

>> Named Entities are: 
[('ConvNet', 'ORG'), ('Google', 'ORG'), ('Microsoft', 'ORG'), ('IBM', 'ORG'), ('Twitter', 'PERSON'), ('Adobe', 'ORG'), ('ConvNet', 'ORG')]


============================ Sentence 249 =============================

  ConvNets are easily amenable to efficient hardware implemen- tations in chips or field-programmable gate arrays66,67. 


>> Tokens are: 
[  , ConvNets, easily, amenable, efficient, hardware, implemen-, tations, chips, field, -, programmable, gate, arrays66,67, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('ConvNets', 'PROPN'), ('easily', 'ADV'), ('amenable', 'ADJ'), ('efficient', 'ADJ'), ('hardware', 'NOUN'), ('implemen-', 'NOUN'), ('tations', 'NOUN'), ('chips', 'NOUN'), ('field', 'NOUN'), ('-', 'PUNCT'), ('programmable', 'ADJ'), ('gate', 'NOUN'), ('arrays66,67', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'compound'), ('ConvNets', 'nsubj'), ('easily', 'advmod'), ('amenable', 'acomp'), ('efficient', 'amod'), ('hardware', 'compound'), ('implemen-', 'compound'), ('tations', 'pobj'), ('chips', 'pobj'), ('field', 'npadvmod'), ('-', 'punct'), ('programmable', 'amod'), ('gate', 'compound'), ('arrays66,67', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[  , ConvNets], [ConvNets, easily], [easily, amenable], [amenable, efficient], [efficient, hardware], [hardware, implemen-], [implemen-, tations], [tations, chips], [chips, field], [field, -], [-, programmable], [programmable, gate], [gate, arrays66,67], [arrays66,67, .]]

>> Trigrams: 
[[  , ConvNets, easily], [ConvNets, easily, amenable], [easily, amenable, efficient], [amenable, efficient, hardware], [efficient, hardware, implemen-], [hardware, implemen-, tations], [implemen-, tations, chips], [tations, chips, field], [chips, field, -], [field, -, programmable], [-, programmable, gate], [programmable, gate, arrays66,67], [gate, arrays66,67, .]]

>> Noun Phrases are: 
[  ConvNets, efficient hardware implemen- tations, chips, field-programmable gate arrays66,67]

>> Named Entities are: 
[]


============================ Sentence 250 =============================

A number  of companies such as NVIDIA, Mobileye, Intel, Qualcomm and  Samsung are developing ConvNet chips to enable real-time vision  applications in smartphones, cameras, robots and self-driving cars. 


>> Tokens are: 
[number,  , companies, NVIDIA, ,, Mobileye, ,, Intel, ,, Qualcomm,  , Samsung, developing, ConvNet, chips, enable, real, -, time, vision,  , applications, smartphones, ,, cameras, ,, robots, self, -, driving, cars, .] 

>> PoS Tags are: 
[('number', 'NOUN'), (' ', 'SPACE'), ('companies', 'NOUN'), ('NVIDIA', 'PROPN'), (',', 'PUNCT'), ('Mobileye', 'PROPN'), (',', 'PUNCT'), ('Intel', 'PROPN'), (',', 'PUNCT'), ('Qualcomm', 'PROPN'), (' ', 'SPACE'), ('Samsung', 'PROPN'), ('developing', 'VERB'), ('ConvNet', 'PROPN'), ('chips', 'NOUN'), ('enable', 'VERB'), ('real', 'ADJ'), ('-', 'PUNCT'), ('time', 'NOUN'), ('vision', 'NOUN'), (' ', 'SPACE'), ('applications', 'NOUN'), ('smartphones', 'NOUN'), (',', 'PUNCT'), ('cameras', 'NOUN'), (',', 'PUNCT'), ('robots', 'NOUN'), ('self', 'NOUN'), ('-', 'PUNCT'), ('driving', 'VERB'), ('cars', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('number', 'nsubj'), (' ', 'appos'), ('companies', 'pobj'), ('NVIDIA', 'pobj'), (',', 'punct'), ('Mobileye', 'conj'), (',', 'punct'), ('Intel', 'conj'), (',', 'punct'), ('Qualcomm', 'conj'), (' ', 'compound'), ('Samsung', 'conj'), ('developing', 'ROOT'), ('ConvNet', 'compound'), ('chips', 'dobj'), ('enable', 'xcomp'), ('real', 'amod'), ('-', 'punct'), ('time', 'compound'), ('vision', 'compound'), (' ', 'compound'), ('applications', 'dobj'), ('smartphones', 'pobj'), (',', 'punct'), ('cameras', 'conj'), (',', 'punct'), ('robots', 'conj'), ('self', 'npadvmod'), ('-', 'punct'), ('driving', 'amod'), ('cars', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[number,  ], [ , companies], [companies, NVIDIA], [NVIDIA, ,], [,, Mobileye], [Mobileye, ,], [,, Intel], [Intel, ,], [,, Qualcomm], [Qualcomm,  ], [ , Samsung], [Samsung, developing], [developing, ConvNet], [ConvNet, chips], [chips, enable], [enable, real], [real, -], [-, time], [time, vision], [vision,  ], [ , applications], [applications, smartphones], [smartphones, ,], [,, cameras], [cameras, ,], [,, robots], [robots, self], [self, -], [-, driving], [driving, cars], [cars, .]]

>> Trigrams: 
[[number,  , companies], [ , companies, NVIDIA], [companies, NVIDIA, ,], [NVIDIA, ,, Mobileye], [,, Mobileye, ,], [Mobileye, ,, Intel], [,, Intel, ,], [Intel, ,, Qualcomm], [,, Qualcomm,  ], [Qualcomm,  , Samsung], [ , Samsung, developing], [Samsung, developing, ConvNet], [developing, ConvNet, chips], [ConvNet, chips, enable], [chips, enable, real], [enable, real, -], [real, -, time], [-, time, vision], [time, vision,  ], [vision,  , applications], [ , applications, smartphones], [applications, smartphones, ,], [smartphones, ,, cameras], [,, cameras, ,], [cameras, ,, robots], [,, robots, self], [robots, self, -], [self, -, driving], [-, driving, cars], [driving, cars, .]]

>> Noun Phrases are: 
[A number, companies, NVIDIA, Mobileye, Intel, Qualcomm,  Samsung, ConvNet chips, real-time vision  applications, smartphones, cameras, robots, self-driving cars]

>> Named Entities are: 
[('NVIDIA', 'ORG'), ('Mobileye', 'ORG'), ('Intel', 'ORG'), ('Qualcomm', 'ORG'), ('Samsung', 'ORG'), ('ConvNet', 'ORG')]


============================ Sentence 251 =============================

  Distributed representations and language processing   


>> Tokens are: 
[  , Distributed, representations, language, processing,  ] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('Distributed', 'VERB'), ('representations', 'NOUN'), ('language', 'NOUN'), ('processing', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'nsubj'), ('Distributed', 'ROOT'), ('representations', 'dobj'), ('language', 'compound'), ('processing', 'conj'), (' ', 'punct')]

>> Bigrams: 
[[  , Distributed], [Distributed, representations], [representations, language], [language, processing], [processing,  ]]

>> Trigrams: 
[[  , Distributed, representations], [Distributed, representations, language], [representations, language, processing], [language, processing,  ]]

>> Noun Phrases are: 
[representations, language processing]

>> Named Entities are: 
[]


============================ Sentence 252 =============================

Deep-learning theory shows that deep nets have two different expo- nential advantages over classic learning algorithms that do not use  distributed representations21. 


>> Tokens are: 
[Deep, -, learning, theory, shows, deep, nets, different, expo-, nential, advantages, classic, learning, algorithms, use,  , distributed, representations21, .] 

>> PoS Tags are: 
[('Deep', 'ADJ'), ('-', 'PUNCT'), ('learning', 'VERB'), ('theory', 'NOUN'), ('shows', 'VERB'), ('deep', 'ADJ'), ('nets', 'NOUN'), ('different', 'ADJ'), ('expo-', 'ADJ'), ('nential', 'ADJ'), ('advantages', 'NOUN'), ('classic', 'ADJ'), ('learning', 'VERB'), ('algorithms', 'NOUN'), ('use', 'VERB'), (' ', 'SPACE'), ('distributed', 'VERB'), ('representations21', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Deep', 'amod'), ('-', 'punct'), ('learning', 'amod'), ('theory', 'nsubj'), ('shows', 'ROOT'), ('deep', 'amod'), ('nets', 'nsubj'), ('different', 'amod'), ('expo-', 'nmod'), ('nential', 'amod'), ('advantages', 'dobj'), ('classic', 'amod'), ('learning', 'pcomp'), ('algorithms', 'dobj'), ('use', 'relcl'), (' ', 'dobj'), ('distributed', 'amod'), ('representations21', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Deep, -], [-, learning], [learning, theory], [theory, shows], [shows, deep], [deep, nets], [nets, different], [different, expo-], [expo-, nential], [nential, advantages], [advantages, classic], [classic, learning], [learning, algorithms], [algorithms, use], [use,  ], [ , distributed], [distributed, representations21], [representations21, .]]

>> Trigrams: 
[[Deep, -, learning], [-, learning, theory], [learning, theory, shows], [theory, shows, deep], [shows, deep, nets], [deep, nets, different], [nets, different, expo-], [different, expo-, nential], [expo-, nential, advantages], [nential, advantages, classic], [advantages, classic, learning], [classic, learning, algorithms], [learning, algorithms, use], [algorithms, use,  ], [use,  , distributed], [ , distributed, representations21], [distributed, representations21, .]]

>> Noun Phrases are: 
[Deep-learning theory, deep nets, two different expo- nential advantages, algorithms, distributed representations21]

>> Named Entities are: 
[('two', 'CARDINAL')]


============================ Sentence 253 =============================

Both of these advantages arise from the  power of composition and depend on the underlying data-generating  distribution having an appropriate componential structure40. 


>> Tokens are: 
[advantages, arise,  , power, composition, depend, underlying, data, -, generating,  , distribution, having, appropriate, componential, structure40, .] 

>> PoS Tags are: 
[('advantages', 'NOUN'), ('arise', 'VERB'), (' ', 'SPACE'), ('power', 'NOUN'), ('composition', 'NOUN'), ('depend', 'VERB'), ('underlying', 'VERB'), ('data', 'NOUN'), ('-', 'PUNCT'), ('generating', 'VERB'), (' ', 'SPACE'), ('distribution', 'NOUN'), ('having', 'VERB'), ('appropriate', 'ADJ'), ('componential', 'ADJ'), ('structure40', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('advantages', 'pobj'), ('arise', 'ROOT'), (' ', 'compound'), ('power', 'pobj'), ('composition', 'pobj'), ('depend', 'conj'), ('underlying', 'amod'), ('data', 'npadvmod'), ('-', 'punct'), ('generating', 'amod'), (' ', 'compound'), ('distribution', 'pobj'), ('having', 'acl'), ('appropriate', 'amod'), ('componential', 'amod'), ('structure40', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[advantages, arise], [arise,  ], [ , power], [power, composition], [composition, depend], [depend, underlying], [underlying, data], [data, -], [-, generating], [generating,  ], [ , distribution], [distribution, having], [having, appropriate], [appropriate, componential], [componential, structure40], [structure40, .]]

>> Trigrams: 
[[advantages, arise,  ], [arise,  , power], [ , power, composition], [power, composition, depend], [composition, depend, underlying], [depend, underlying, data], [underlying, data, -], [data, -, generating], [-, generating,  ], [generating,  , distribution], [ , distribution, having], [distribution, having, appropriate], [having, appropriate, componential], [appropriate, componential, structure40], [componential, structure40, .]]

>> Noun Phrases are: 
[these advantages, the  power, composition, the underlying data-generating  distribution, an appropriate componential structure40]

>> Named Entities are: 
[]


============================ Sentence 254 =============================

First,  learning distributed representations enable generalization to new  combinations of the values of learned features beyond those seen  during training (for example, 2n combinations are possible with n  binary features)68,69. 


>> Tokens are: 
[,,  , learning, distributed, representations, enable, generalization, new,  , combinations, values, learned, features, seen,  , training, (, example, ,, 2n, combinations, possible, n,  , binary, features)68,69, .] 

>> PoS Tags are: 
[(',', 'PUNCT'), (' ', 'SPACE'), ('learning', 'VERB'), ('distributed', 'VERB'), ('representations', 'NOUN'), ('enable', 'VERB'), ('generalization', 'NOUN'), ('new', 'ADJ'), (' ', 'SPACE'), ('combinations', 'NOUN'), ('values', 'NOUN'), ('learned', 'VERB'), ('features', 'NOUN'), ('seen', 'VERB'), (' ', 'SPACE'), ('training', 'NOUN'), ('(', 'PUNCT'), ('example', 'NOUN'), (',', 'PUNCT'), ('2n', 'NUM'), ('combinations', 'NOUN'), ('possible', 'ADJ'), ('n', 'CCONJ'), (' ', 'SPACE'), ('binary', 'ADJ'), ('features)68,69', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(',', 'punct'), (' ', 'nsubj'), ('learning', 'acl'), ('distributed', 'amod'), ('representations', 'dobj'), ('enable', 'ROOT'), ('generalization', 'dobj'), ('new', 'amod'), (' ', 'compound'), ('combinations', 'pobj'), ('values', 'pobj'), ('learned', 'amod'), ('features', 'pobj'), ('seen', 'acl'), (' ', 'dobj'), ('training', 'pobj'), ('(', 'punct'), ('example', 'pobj'), (',', 'punct'), ('2n', 'compound'), ('combinations', 'nsubj'), ('possible', 'acomp'), ('n', 'pobj'), (' ', 'nmod'), ('binary', 'amod'), ('features)68,69', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[,,  ], [ , learning], [learning, distributed], [distributed, representations], [representations, enable], [enable, generalization], [generalization, new], [new,  ], [ , combinations], [combinations, values], [values, learned], [learned, features], [features, seen], [seen,  ], [ , training], [training, (], [(, example], [example, ,], [,, 2n], [2n, combinations], [combinations, possible], [possible, n], [n,  ], [ , binary], [binary, features)68,69], [features)68,69, .]]

>> Trigrams: 
[[,,  , learning], [ , learning, distributed], [learning, distributed, representations], [distributed, representations, enable], [representations, enable, generalization], [enable, generalization, new], [generalization, new,  ], [new,  , combinations], [ , combinations, values], [combinations, values, learned], [values, learned, features], [learned, features, seen], [features, seen,  ], [seen,  , training], [ , training, (], [training, (, example], [(, example, ,], [example, ,, 2n], [,, 2n, combinations], [2n, combinations, possible], [combinations, possible, n], [possible, n,  ], [n,  , binary], [ , binary, features)68,69], [binary, features)68,69, .]]

>> Noun Phrases are: 
[distributed representations, generalization, new  combinations, the values, learned features, training, example, 2n combinations,  binary features)68,69]

>> Named Entities are: 
[('First', 'ORDINAL'), ('2n', 'CARDINAL')]


============================ Sentence 255 =============================

Second, composing layers of representation in  a deep net brings the potential for another exponential advantage70  (exponential in the depth). 


>> Tokens are: 
[Second, ,, composing, layers, representation,  , deep, net, brings, potential, exponential, advantage70,  , (, exponential, depth, ), .] 

>> PoS Tags are: 
[('Second', 'ADV'), (',', 'PUNCT'), ('composing', 'VERB'), ('layers', 'NOUN'), ('representation', 'NOUN'), (' ', 'SPACE'), ('deep', 'ADJ'), ('net', 'NOUN'), ('brings', 'VERB'), ('potential', 'NOUN'), ('exponential', 'ADJ'), ('advantage70', 'NOUN'), (' ', 'SPACE'), ('(', 'PUNCT'), ('exponential', 'ADJ'), ('depth', 'NOUN'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Second', 'amod'), (',', 'punct'), ('composing', 'amod'), ('layers', 'nsubj'), ('representation', 'pobj'), (' ', 'pobj'), ('deep', 'amod'), ('net', 'nsubj'), ('brings', 'ROOT'), ('potential', 'dobj'), ('exponential', 'amod'), ('advantage70', 'pobj'), (' ', 'appos'), ('(', 'punct'), ('exponential', 'appos'), ('depth', 'pobj'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Second, ,], [,, composing], [composing, layers], [layers, representation], [representation,  ], [ , deep], [deep, net], [net, brings], [brings, potential], [potential, exponential], [exponential, advantage70], [advantage70,  ], [ , (], [(, exponential], [exponential, depth], [depth, )], [), .]]

>> Trigrams: 
[[Second, ,, composing], [,, composing, layers], [composing, layers, representation], [layers, representation,  ], [representation,  , deep], [ , deep, net], [deep, net, brings], [net, brings, potential], [brings, potential, exponential], [potential, exponential, advantage70], [exponential, advantage70,  ], [advantage70,  , (], [ , (, exponential], [(, exponential, depth], [exponential, depth, )], [depth, ), .]]

>> Noun Phrases are: 
[Second, composing layers, representation, a deep net, the potential, another exponential advantage70, the depth]

>> Named Entities are: 
[('Second', 'ORDINAL')]


============================ Sentence 256 =============================

  The hidden layers of a multilayer neural network learn to repre- sent the network’s inputs in a way that makes it easy to predict the  target outputs. 


>> Tokens are: 
[  , hidden, layers, multilayer, neural, network, learn, repre-, sent, network, inputs, way, makes, easy, predict,  , target, outputs, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('hidden', 'ADJ'), ('layers', 'NOUN'), ('multilayer', 'ADJ'), ('neural', 'ADJ'), ('network', 'NOUN'), ('learn', 'VERB'), ('repre-', 'NOUN'), ('sent', 'VERB'), ('network', 'NOUN'), ('inputs', 'NOUN'), ('way', 'NOUN'), ('makes', 'VERB'), ('easy', 'ADJ'), ('predict', 'VERB'), (' ', 'SPACE'), ('target', 'NOUN'), ('outputs', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'nmod'), ('hidden', 'amod'), ('layers', 'nsubj'), ('multilayer', 'amod'), ('neural', 'amod'), ('network', 'pobj'), ('learn', 'ROOT'), ('repre-', 'nsubj'), ('sent', 'xcomp'), ('network', 'poss'), ('inputs', 'dobj'), ('way', 'pobj'), ('makes', 'relcl'), ('easy', 'ccomp'), ('predict', 'advcl'), (' ', 'compound'), ('target', 'compound'), ('outputs', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[  , hidden], [hidden, layers], [layers, multilayer], [multilayer, neural], [neural, network], [network, learn], [learn, repre-], [repre-, sent], [sent, network], [network, inputs], [inputs, way], [way, makes], [makes, easy], [easy, predict], [predict,  ], [ , target], [target, outputs], [outputs, .]]

>> Trigrams: 
[[  , hidden, layers], [hidden, layers, multilayer], [layers, multilayer, neural], [multilayer, neural, network], [neural, network, learn], [network, learn, repre-], [learn, repre-, sent], [repre-, sent, network], [sent, network, inputs], [network, inputs, way], [inputs, way, makes], [way, makes, easy], [makes, easy, predict], [easy, predict,  ], [predict,  , target], [ , target, outputs], [target, outputs, .]]

>> Noun Phrases are: 
[  The hidden layers, a multilayer neural network, repre-, the network’s inputs, a way, it, the  target outputs]

>> Named Entities are: 
[]


============================ Sentence 257 =============================

This is nicely demonstrated by training a multilayer  neural network to predict the next word in a sequence from a local   Figure 3 | From image to text. 


>> Tokens are: 
[nicely, demonstrated, training, multilayer,  , neural, network, predict, word, sequence, local,   , Figure, 3, |, image, text, .] 

>> PoS Tags are: 
[('nicely', 'ADV'), ('demonstrated', 'VERB'), ('training', 'VERB'), ('multilayer', 'NOUN'), (' ', 'SPACE'), ('neural', 'ADJ'), ('network', 'NOUN'), ('predict', 'VERB'), ('word', 'NOUN'), ('sequence', 'NOUN'), ('local', 'ADJ'), ('  ', 'SPACE'), ('Figure', 'NOUN'), ('3', 'NUM'), ('|', 'NOUN'), ('image', 'NOUN'), ('text', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('nicely', 'advmod'), ('demonstrated', 'ROOT'), ('training', 'pcomp'), ('multilayer', 'nmod'), (' ', 'nummod'), ('neural', 'amod'), ('network', 'dobj'), ('predict', 'xcomp'), ('word', 'dobj'), ('sequence', 'pobj'), ('local', 'amod'), ('  ', 'compound'), ('Figure', 'pobj'), ('3', 'nummod'), ('|', 'npadvmod'), ('image', 'pobj'), ('text', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[nicely, demonstrated], [demonstrated, training], [training, multilayer], [multilayer,  ], [ , neural], [neural, network], [network, predict], [predict, word], [word, sequence], [sequence, local], [local,   ], [  , Figure], [Figure, 3], [3, |], [|, image], [image, text], [text, .]]

>> Trigrams: 
[[nicely, demonstrated, training], [demonstrated, training, multilayer], [training, multilayer,  ], [multilayer,  , neural], [ , neural, network], [neural, network, predict], [network, predict, word], [predict, word, sequence], [word, sequence, local], [sequence, local,   ], [local,   , Figure], [  , Figure, 3], [Figure, 3, |], [3, |, image], [|, image, text], [image, text, .]]

>> Noun Phrases are: 
[a multilayer  neural network, the next word, a sequence, a local   Figure, image, text]

>> Named Entities are: 
[('3', 'CARDINAL')]


============================ Sentence 258 =============================

Captions generated by a recurrent neural  network (RNN) taking, as extra input, the representation extracted by a deep  convolution neural network (CNN) from a test image, with the RNN trained to  ‘translate’ high-level representations of images into captions (top). 


>> Tokens are: 
[Captions, generated, recurrent, neural,  , network, (, RNN, ), taking, ,, extra, input, ,, representation, extracted, deep,  , convolution, neural, network, (, CNN, ), test, image, ,, RNN, trained,  , ‘, translate, ’, high, -, level, representations, images, captions, (, ), .] 

>> PoS Tags are: 
[('Captions', 'NOUN'), ('generated', 'VERB'), ('recurrent', 'ADJ'), ('neural', 'ADJ'), (' ', 'SPACE'), ('network', 'NOUN'), ('(', 'PUNCT'), ('RNN', 'PROPN'), (')', 'PUNCT'), ('taking', 'NOUN'), (',', 'PUNCT'), ('extra', 'ADJ'), ('input', 'NOUN'), (',', 'PUNCT'), ('representation', 'NOUN'), ('extracted', 'VERB'), ('deep', 'ADJ'), (' ', 'SPACE'), ('convolution', 'NOUN'), ('neural', 'ADJ'), ('network', 'NOUN'), ('(', 'PUNCT'), ('CNN', 'PROPN'), (')', 'PUNCT'), ('test', 'NOUN'), ('image', 'NOUN'), (',', 'PUNCT'), ('RNN', 'PROPN'), ('trained', 'VERB'), (' ', 'SPACE'), ('‘', 'PUNCT'), ('translate', 'VERB'), ('’', 'PUNCT'), ('high', 'ADJ'), ('-', 'PUNCT'), ('level', 'NOUN'), ('representations', 'NOUN'), ('images', 'NOUN'), ('captions', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Captions', 'ROOT'), ('generated', 'acl'), ('recurrent', 'amod'), ('neural', 'amod'), (' ', 'compound'), ('network', 'pobj'), ('(', 'punct'), ('RNN', 'appos'), (')', 'punct'), ('taking', 'appos'), (',', 'punct'), ('extra', 'amod'), ('input', 'pobj'), (',', 'punct'), ('representation', 'appos'), ('extracted', 'acl'), ('deep', 'amod'), (' ', 'nmod'), ('convolution', 'nmod'), ('neural', 'amod'), ('network', 'pobj'), ('(', 'punct'), ('CNN', 'appos'), (')', 'punct'), ('test', 'compound'), ('image', 'pobj'), (',', 'punct'), ('RNN', 'nsubj'), ('trained', 'pcomp'), (' ', 'pobj'), ('‘', 'punct'), ('translate', 'amod'), ('’', 'punct'), ('high', 'amod'), ('-', 'punct'), ('level', 'compound'), ('representations', 'pobj'), ('images', 'pobj'), ('captions', 'pobj'), ('(', 'punct'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Captions, generated], [generated, recurrent], [recurrent, neural], [neural,  ], [ , network], [network, (], [(, RNN], [RNN, )], [), taking], [taking, ,], [,, extra], [extra, input], [input, ,], [,, representation], [representation, extracted], [extracted, deep], [deep,  ], [ , convolution], [convolution, neural], [neural, network], [network, (], [(, CNN], [CNN, )], [), test], [test, image], [image, ,], [,, RNN], [RNN, trained], [trained,  ], [ , ‘], [‘, translate], [translate, ’], [’, high], [high, -], [-, level], [level, representations], [representations, images], [images, captions], [captions, (], [(, )], [), .]]

>> Trigrams: 
[[Captions, generated, recurrent], [generated, recurrent, neural], [recurrent, neural,  ], [neural,  , network], [ , network, (], [network, (, RNN], [(, RNN, )], [RNN, ), taking], [), taking, ,], [taking, ,, extra], [,, extra, input], [extra, input, ,], [input, ,, representation], [,, representation, extracted], [representation, extracted, deep], [extracted, deep,  ], [deep,  , convolution], [ , convolution, neural], [convolution, neural, network], [neural, network, (], [network, (, CNN], [(, CNN, )], [CNN, ), test], [), test, image], [test, image, ,], [image, ,, RNN], [,, RNN, trained], [RNN, trained,  ], [trained,  , ‘], [ , ‘, translate], [‘, translate, ’], [translate, ’, high], [’, high, -], [high, -, level], [-, level, representations], [level, representations, images], [representations, images, captions], [images, captions, (], [captions, (, )], [(, ), .]]

>> Noun Phrases are: 
[Captions, a recurrent neural  network, RNN, taking, extra input, , the representation, a deep  convolution neural network, (CNN, a test image, the RNN, ‘translate’ high-level representations, images, captions, (top]

>> Named Entities are: 
[('RNN', 'ORG'), ('CNN', 'ORG'), ('RNN', 'ORG')]


============================ Sentence 259 =============================

Reproduced   with permission from ref. 


>> Tokens are: 
[Reproduced,   , permission, ref, .] 

>> PoS Tags are: 
[('Reproduced', 'VERB'), ('  ', 'SPACE'), ('permission', 'NOUN'), ('ref', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Reproduced', 'ROOT'), ('  ', 'dobj'), ('permission', 'pobj'), ('ref', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Reproduced,   ], [  , permission], [permission, ref], [ref, .]]

>> Trigrams: 
[[Reproduced,   , permission], [  , permission, ref], [permission, ref, .]]

>> Noun Phrases are: 
[permission, ref]

>> Named Entities are: 
[]


============================ Sentence 260 =============================

102. 


>> Tokens are: 
[102, .] 

>> PoS Tags are: 
[('102', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('102', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[102, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('102', 'CARDINAL')]


============================ Sentence 261 =============================

When the RNN is given the ability to focus its  attention on a different location in the input image (middle and bottom; the  lighter patches were given more attention) as it generates each word (bold), we  found86 that it exploits this to achieve better ‘translation’ of images into captions. 


>> Tokens are: 
[RNN, given, ability, focus,  , attention, different, location, input, image, (, middle, ;,  , lighter, patches, given, attention, ), generates, word, (, bold, ), ,,  , found86, exploits, achieve, better, ‘, translation, ’, images, captions, .] 

>> PoS Tags are: 
[('RNN', 'PROPN'), ('given', 'VERB'), ('ability', 'NOUN'), ('focus', 'VERB'), (' ', 'SPACE'), ('attention', 'NOUN'), ('different', 'ADJ'), ('location', 'NOUN'), ('input', 'NOUN'), ('image', 'NOUN'), ('(', 'PUNCT'), ('middle', 'NOUN'), (';', 'PUNCT'), (' ', 'SPACE'), ('lighter', 'ADJ'), ('patches', 'NOUN'), ('given', 'VERB'), ('attention', 'NOUN'), (')', 'PUNCT'), ('generates', 'VERB'), ('word', 'NOUN'), ('(', 'PUNCT'), ('bold', 'ADJ'), (')', 'PUNCT'), (',', 'PUNCT'), (' ', 'SPACE'), ('found86', 'VERB'), ('exploits', 'VERB'), ('achieve', 'VERB'), ('better', 'ADJ'), ('‘', 'PUNCT'), ('translation', 'NOUN'), ('’', 'PUNCT'), ('images', 'NOUN'), ('captions', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('RNN', 'nsubjpass'), ('given', 'advcl'), ('ability', 'dobj'), ('focus', 'acl'), (' ', 'compound'), ('attention', 'dobj'), ('different', 'amod'), ('location', 'pobj'), ('input', 'compound'), ('image', 'pobj'), ('(', 'punct'), ('middle', 'appos'), (';', 'punct'), (' ', 'nmod'), ('lighter', 'amod'), ('patches', 'nsubjpass'), ('given', 'ROOT'), ('attention', 'dobj'), (')', 'punct'), ('generates', 'advcl'), ('word', 'dobj'), ('(', 'punct'), ('bold', 'amod'), (')', 'punct'), (',', 'punct'), (' ', 'appos'), ('found86', 'conj'), ('exploits', 'ccomp'), ('achieve', 'xcomp'), ('better', 'amod'), ('‘', 'punct'), ('translation', 'dobj'), ('’', 'punct'), ('images', 'pobj'), ('captions', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[RNN, given], [given, ability], [ability, focus], [focus,  ], [ , attention], [attention, different], [different, location], [location, input], [input, image], [image, (], [(, middle], [middle, ;], [;,  ], [ , lighter], [lighter, patches], [patches, given], [given, attention], [attention, )], [), generates], [generates, word], [word, (], [(, bold], [bold, )], [), ,], [,,  ], [ , found86], [found86, exploits], [exploits, achieve], [achieve, better], [better, ‘], [‘, translation], [translation, ’], [’, images], [images, captions], [captions, .]]

>> Trigrams: 
[[RNN, given, ability], [given, ability, focus], [ability, focus,  ], [focus,  , attention], [ , attention, different], [attention, different, location], [different, location, input], [location, input, image], [input, image, (], [image, (, middle], [(, middle, ;], [middle, ;,  ], [;,  , lighter], [ , lighter, patches], [lighter, patches, given], [patches, given, attention], [given, attention, )], [attention, ), generates], [), generates, word], [generates, word, (], [word, (, bold], [(, bold, )], [bold, ), ,], [), ,,  ], [,,  , found86], [ , found86, exploits], [found86, exploits, achieve], [exploits, achieve, better], [achieve, better, ‘], [better, ‘, translation], [‘, translation, ’], [translation, ’, images], [’, images, captions], [images, captions, .]]

>> Noun Phrases are: 
[the RNN, the ability, its  attention, a different location, the input image, middle, bottom, the  lighter patches, more attention, it, each word, we, it, better ‘translation, images, captions]

>> Named Entities are: 
[('RNN', 'ORG')]


============================ Sentence 262 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 263 =============================

Vision Deep CNN   


>> Tokens are: 
[Vision, Deep, CNN,  ] 

>> PoS Tags are: 
[('Vision', 'PROPN'), ('Deep', 'PROPN'), ('CNN', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Vision', 'compound'), ('Deep', 'compound'), ('CNN', 'ROOT'), (' ', 'advmod')]

>> Bigrams: 
[[Vision, Deep], [Deep, CNN], [CNN,  ]]

>> Trigrams: 
[[Vision, Deep, CNN], [Deep, CNN,  ]]

>> Noun Phrases are: 
[Vision Deep CNN]

>> Named Entities are: 
[('CNN', 'ORG')]


============================ Sentence 264 =============================

Language Generating RNN   


>> Tokens are: 
[Language, Generating, RNN,  ] 

>> PoS Tags are: 
[('Language', 'PROPN'), ('Generating', 'PROPN'), ('RNN', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Language', 'compound'), ('Generating', 'compound'), ('RNN', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[Language, Generating], [Generating, RNN], [RNN,  ]]

>> Trigrams: 
[[Language, Generating, RNN], [Generating, RNN,  ]]

>> Noun Phrases are: 
[Language Generating RNN]

>> Named Entities are: 
[('Language Generating', 'PERSON'), ('RNN', 'ORG')]


============================ Sentence 265 =============================

A group of people  shopping at an outdoor   market. 


>> Tokens are: 
[group, people,  , shopping, outdoor,   , market, .] 

>> PoS Tags are: 
[('group', 'NOUN'), ('people', 'NOUN'), (' ', 'SPACE'), ('shopping', 'VERB'), ('outdoor', 'ADJ'), ('  ', 'SPACE'), ('market', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('group', 'ROOT'), ('people', 'pobj'), (' ', 'nummod'), ('shopping', 'acl'), ('outdoor', 'amod'), ('  ', 'nummod'), ('market', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[group, people], [people,  ], [ , shopping], [shopping, outdoor], [outdoor,   ], [  , market], [market, .]]

>> Trigrams: 
[[group, people,  ], [people,  , shopping], [ , shopping, outdoor], [shopping, outdoor,   ], [outdoor,   , market], [  , market, .]]

>> Noun Phrases are: 
[A group, people, an outdoor   market]

>> Named Entities are: 
[]


============================ Sentence 266 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 267 =============================

There are many  vegetables at the   fruit stand. 


>> Tokens are: 
[ , vegetables,   , fruit, stand, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('vegetables', 'NOUN'), ('  ', 'SPACE'), ('fruit', 'NOUN'), ('stand', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'compound'), ('vegetables', 'attr'), ('  ', 'nummod'), ('fruit', 'compound'), ('stand', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[ , vegetables], [vegetables,   ], [  , fruit], [fruit, stand], [stand, .]]

>> Trigrams: 
[[ , vegetables,   ], [vegetables,   , fruit], [  , fruit, stand], [fruit, stand, .]]

>> Noun Phrases are: 
[many  vegetables, the   fruit stand]

>> Named Entities are: 
[]


============================ Sentence 268 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 269 =============================

A woman is throwing a frisbee in a park. 


>> Tokens are: 
[woman, throwing, frisbee, park, .] 

>> PoS Tags are: 
[('woman', 'NOUN'), ('throwing', 'VERB'), ('frisbee', 'NOUN'), ('park', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('woman', 'nsubj'), ('throwing', 'ROOT'), ('frisbee', 'dobj'), ('park', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[woman, throwing], [throwing, frisbee], [frisbee, park], [park, .]]

>> Trigrams: 
[[woman, throwing, frisbee], [throwing, frisbee, park], [frisbee, park, .]]

>> Noun Phrases are: 
[A woman, a frisbee, a park]

>> Named Entities are: 
[]


============================ Sentence 270 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 271 =============================

A little girl sitting on a bed with a teddy bear. 


>> Tokens are: 
[little, girl, sitting, bed, teddy, bear, .] 

>> PoS Tags are: 
[('little', 'ADJ'), ('girl', 'NOUN'), ('sitting', 'VERB'), ('bed', 'NOUN'), ('teddy', 'NOUN'), ('bear', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('little', 'amod'), ('girl', 'ROOT'), ('sitting', 'acl'), ('bed', 'pobj'), ('teddy', 'compound'), ('bear', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[little, girl], [girl, sitting], [sitting, bed], [bed, teddy], [teddy, bear], [bear, .]]

>> Trigrams: 
[[little, girl, sitting], [girl, sitting, bed], [sitting, bed, teddy], [bed, teddy, bear], [teddy, bear, .]]

>> Noun Phrases are: 
[A little girl, a bed, a teddy bear]

>> Named Entities are: 
[]


============================ Sentence 272 =============================

A group of people sitting on a boat in the water. 


>> Tokens are: 
[group, people, sitting, boat, water, .] 

>> PoS Tags are: 
[('group', 'NOUN'), ('people', 'NOUN'), ('sitting', 'VERB'), ('boat', 'NOUN'), ('water', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('group', 'ROOT'), ('people', 'pobj'), ('sitting', 'acl'), ('boat', 'pobj'), ('water', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[group, people], [people, sitting], [sitting, boat], [boat, water], [water, .]]

>> Trigrams: 
[[group, people, sitting], [people, sitting, boat], [sitting, boat, water], [boat, water, .]]

>> Noun Phrases are: 
[A group, people, a boat, the water]

>> Named Entities are: 
[]


============================ Sentence 273 =============================

A gira�e standing in a forest with trees in the background. 


>> Tokens are: 
[gira, �, e, standing, forest, trees, background, .] 

>> PoS Tags are: 
[('gira', 'NOUN'), ('�', 'PROPN'), ('e', 'NOUN'), ('standing', 'VERB'), ('forest', 'NOUN'), ('trees', 'NOUN'), ('background', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('gira', 'compound'), ('�', 'compound'), ('e', 'ROOT'), ('standing', 'acl'), ('forest', 'pobj'), ('trees', 'pobj'), ('background', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[gira, �], [�, e], [e, standing], [standing, forest], [forest, trees], [trees, background], [background, .]]

>> Trigrams: 
[[gira, �, e], [�, e, standing], [e, standing, forest], [standing, forest, trees], [forest, trees, background], [trees, background, .]]

>> Noun Phrases are: 
[A gira�e, a forest, trees, the background]

>> Named Entities are: 
[]


============================ Sentence 274 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 275 =============================

A dog is standing on a hardwood �oor. 


>> Tokens are: 
[dog, standing, hardwood, �, oor, .] 

>> PoS Tags are: 
[('dog', 'NOUN'), ('standing', 'VERB'), ('hardwood', 'ADJ'), ('�', 'PROPN'), ('oor', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('dog', 'nsubj'), ('standing', 'ROOT'), ('hardwood', 'amod'), ('�', 'compound'), ('oor', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[dog, standing], [standing, hardwood], [hardwood, �], [�, oor], [oor, .]]

>> Trigrams: 
[[dog, standing, hardwood], [standing, hardwood, �], [hardwood, �, oor], [�, oor, .]]

>> Noun Phrases are: 
[A dog]

>> Named Entities are: 
[]


============================ Sentence 276 =============================

A stop sign is on a road with a mountain in the background   


>> Tokens are: 
[stop, sign, road, mountain, background,  ] 

>> PoS Tags are: 
[('stop', 'NOUN'), ('sign', 'NOUN'), ('road', 'NOUN'), ('mountain', 'NOUN'), ('background', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('stop', 'compound'), ('sign', 'nsubj'), ('road', 'pobj'), ('mountain', 'pobj'), ('background', 'pobj'), (' ', 'dep')]

>> Bigrams: 
[[stop, sign], [sign, road], [road, mountain], [mountain, background], [background,  ]]

>> Trigrams: 
[[stop, sign, road], [sign, road, mountain], [road, mountain, background], [mountain, background,  ]]

>> Noun Phrases are: 
[A stop sign, a road, a mountain, the background]

>> Named Entities are: 
[]


============================ Sentence 277 =============================

4 4 0  |   


>> Tokens are: 
[4, 4, 0,  , |,  ] 

>> PoS Tags are: 
[('4', 'NUM'), ('4', 'NUM'), ('0', 'NUM'), (' ', 'SPACE'), ('|', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('4', 'compound'), ('4', 'ROOT'), ('0', 'npadvmod'), (' ', 'appos'), ('|', 'npadvmod'), (' ', 'punct')]

>> Bigrams: 
[[4, 4], [4, 0], [0,  ], [ , |], [|,  ]]

>> Trigrams: 
[[4, 4, 0], [4, 0,  ], [0,  , |], [ , |,  ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('4 4', 'CARDINAL')]


============================ Sentence 278 =============================

N A 


>> Tokens are: 
[N] 

>> PoS Tags are: 
[('N', 'PROPN')] 

>> Dependency Tags are: 
[('N', 'compound')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 279 =============================

T U R E  |  V O L  5 2 1  |  2 8  M A Y  2 0 1 5  REVIEWINSIGHT  © 2015 Macmillan Publishers Limited. 


>> Tokens are: 
[T, U, R, E,  , |,  , V, O, L,  , 5, 2, 1,  , |,  , 2, 8,  , M, Y,  , 2, 0, 1, 5,  , REVIEWINSIGHT,  , ©, 2015, Macmillan, Publishers, Limited, .] 

>> PoS Tags are: 
[('T', 'NOUN'), ('U', 'NOUN'), ('R', 'NOUN'), ('E', 'NOUN'), (' ', 'SPACE'), ('|', 'NOUN'), (' ', 'SPACE'), ('V', 'NOUN'), ('O', 'NOUN'), ('L', 'NOUN'), (' ', 'SPACE'), ('5', 'NUM'), ('2', 'NUM'), ('1', 'NUM'), (' ', 'SPACE'), ('|', 'NOUN'), (' ', 'SPACE'), ('2', 'NUM'), ('8', 'NUM'), (' ', 'SPACE'), ('M', 'PROPN'), ('Y', 'PROPN'), (' ', 'SPACE'), ('2', 'NUM'), ('0', 'NUM'), ('1', 'NUM'), ('5', 'NUM'), (' ', 'SPACE'), ('REVIEWINSIGHT', 'X'), (' ', 'SPACE'), ('©', 'ADJ'), ('2015', 'NUM'), ('Macmillan', 'PROPN'), ('Publishers', 'PROPN'), ('Limited', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('T', 'compound'), ('U', 'compound'), ('R', 'compound'), ('E', 'nsubj'), (' ', 'appos'), ('|', 'npadvmod'), (' ', 'punct'), ('V', 'compound'), ('O', 'appos'), ('L', 'appos'), (' ', 'appos'), ('5', 'compound'), ('2', 'compound'), ('1', 'nummod'), (' ', 'punct'), ('|', 'npadvmod'), (' ', 'appos'), ('2', 'compound'), ('8', 'nummod'), (' ', 'compound'), ('M', 'compound'), ('Y', 'nmod'), (' ', 'appos'), ('2', 'nummod'), ('0', 'quantmod'), ('1', 'compound'), ('5', 'nummod'), (' ', 'appos'), ('REVIEWINSIGHT', 'ROOT'), (' ', 'compound'), ('©', 'amod'), ('2015', 'nummod'), ('Macmillan', 'compound'), ('Publishers', 'compound'), ('Limited', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[T, U], [U, R], [R, E], [E,  ], [ , |], [|,  ], [ , V], [V, O], [O, L], [L,  ], [ , 5], [5, 2], [2, 1], [1,  ], [ , |], [|,  ], [ , 2], [2, 8], [8,  ], [ , M], [M, Y], [Y,  ], [ , 2], [2, 0], [0, 1], [1, 5], [5,  ], [ , REVIEWINSIGHT], [REVIEWINSIGHT,  ], [ , ©], [©, 2015], [2015, Macmillan], [Macmillan, Publishers], [Publishers, Limited], [Limited, .]]

>> Trigrams: 
[[T, U, R], [U, R, E], [R, E,  ], [E,  , |], [ , |,  ], [|,  , V], [ , V, O], [V, O, L], [O, L,  ], [L,  , 5], [ , 5, 2], [5, 2, 1], [2, 1,  ], [1,  , |], [ , |,  ], [|,  , 2], [ , 2, 8], [2, 8,  ], [8,  , M], [ , M, Y], [M, Y,  ], [Y,  , 2], [ , 2, 0], [2, 0, 1], [0, 1, 5], [1, 5,  ], [5,  , REVIEWINSIGHT], [ , REVIEWINSIGHT,  ], [REVIEWINSIGHT,  , ©], [ , ©, 2015], [©, 2015, Macmillan], [2015, Macmillan, Publishers], [Macmillan, Publishers, Limited], [Publishers, Limited, .]]

>> Noun Phrases are: 
[T U R E, V O, L,  © 2015 Macmillan Publishers Limited]

>> Named Entities are: 
[('2', 'CARDINAL'), ('2015', 'DATE'), ('Macmillan Publishers Limited', 'ORG')]


============================ Sentence 280 =============================

All rights reserved    context of earlier words71. 


>> Tokens are: 
[rights, reserved,    , context, earlier, words71, .] 

>> PoS Tags are: 
[('rights', 'NOUN'), ('reserved', 'VERB'), ('   ', 'SPACE'), ('context', 'NOUN'), ('earlier', 'ADJ'), ('words71', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('rights', 'nsubj'), ('reserved', 'ROOT'), ('   ', 'nummod'), ('context', 'dobj'), ('earlier', 'amod'), ('words71', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[rights, reserved], [reserved,    ], [   , context], [context, earlier], [earlier, words71], [words71, .]]

>> Trigrams: 
[[rights, reserved,    ], [reserved,    , context], [   , context, earlier], [context, earlier, words71], [earlier, words71, .]]

>> Noun Phrases are: 
[All rights,    context, earlier words71]

>> Named Entities are: 
[]


============================ Sentence 281 =============================

Each word in the context is presented to  the network as a one-of-N vector, that is, one component has a value  of 1 and the rest are 0. 


>> Tokens are: 
[word, context, presented,  , network, -, -, N, vector, ,, ,, component, value,  , 1, rest,  , 0, .] 

>> PoS Tags are: 
[('word', 'NOUN'), ('context', 'NOUN'), ('presented', 'VERB'), (' ', 'SPACE'), ('network', 'NOUN'), ('-', 'PUNCT'), ('-', 'PUNCT'), ('N', 'NUM'), ('vector', 'NOUN'), (',', 'PUNCT'), (',', 'PUNCT'), ('component', 'NOUN'), ('value', 'NOUN'), (' ', 'SPACE'), ('1', 'NUM'), ('rest', 'NOUN'), ('\xa0', 'SPACE'), ('0', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('word', 'nsubjpass'), ('context', 'pobj'), ('presented', 'ROOT'), (' ', 'pobj'), ('network', 'dobj'), ('-', 'punct'), ('-', 'punct'), ('N', 'pobj'), ('vector', 'pobj'), (',', 'punct'), (',', 'punct'), ('component', 'nsubj'), ('value', 'dobj'), (' ', 'appos'), ('1', 'pobj'), ('rest', 'nsubj'), ('\xa0', 'attr'), ('0', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[word, context], [context, presented], [presented,  ], [ , network], [network, -], [-, -], [-, N], [N, vector], [vector, ,], [,, ,], [,, component], [component, value], [value,  ], [ , 1], [1, rest], [rest,  ], [ , 0], [0, .]]

>> Trigrams: 
[[word, context, presented], [context, presented,  ], [presented,  , network], [ , network, -], [network, -, -], [-, -, N], [-, N, vector], [N, vector, ,], [vector, ,, ,], [,, ,, component], [,, component, value], [component, value,  ], [value,  , 1], [ , 1, rest], [1, rest,  ], [rest,  , 0], [ , 0, .]]

>> Noun Phrases are: 
[Each word, the context, the network, a one-of-N vector, one component, a value, the rest]

>> Named Entities are: 
[('one', 'CARDINAL'), ('one', 'CARDINAL'), ('1', 'CARDINAL')]


============================ Sentence 282 =============================

In the first layer, each word creates a different  pattern of activations, or word vectors (Fig. 


>> Tokens are: 
[layer, ,, word, creates, different,  , pattern, activations, ,, word, vectors, (, Fig, .] 

>> PoS Tags are: 
[('layer', 'NOUN'), (',', 'PUNCT'), ('word', 'NOUN'), ('creates', 'VERB'), ('different', 'ADJ'), (' ', 'SPACE'), ('pattern', 'NOUN'), ('activations', 'NOUN'), (',', 'PUNCT'), ('word', 'NOUN'), ('vectors', 'NOUN'), ('(', 'PUNCT'), ('Fig', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('layer', 'pobj'), (',', 'punct'), ('word', 'nsubj'), ('creates', 'ROOT'), ('different', 'amod'), (' ', 'compound'), ('pattern', 'dobj'), ('activations', 'pobj'), (',', 'punct'), ('word', 'compound'), ('vectors', 'conj'), ('(', 'punct'), ('Fig', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[layer, ,], [,, word], [word, creates], [creates, different], [different,  ], [ , pattern], [pattern, activations], [activations, ,], [,, word], [word, vectors], [vectors, (], [(, Fig], [Fig, .]]

>> Trigrams: 
[[layer, ,, word], [,, word, creates], [word, creates, different], [creates, different,  ], [different,  , pattern], [ , pattern, activations], [pattern, activations, ,], [activations, ,, word], [,, word, vectors], [word, vectors, (], [vectors, (, Fig], [(, Fig, .]]

>> Noun Phrases are: 
[the first layer, each word, a different  pattern, activations, word vectors, Fig]

>> Named Entities are: 
[('first', 'ORDINAL'), ('Fig', 'PERSON')]


============================ Sentence 283 =============================

 4). 


>> Tokens are: 
[ , 4, ), .] 

>> PoS Tags are: 
[('\xa0', 'SPACE'), ('4', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\xa0', 'ROOT'), ('4', 'nummod'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[ , 4], [4, )], [), .]]

>> Trigrams: 
[[ , 4, )], [4, ), .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 284 =============================

In a language model,  the other layers of the network learn to convert the input word vec- tors into an output word vector for the predicted next word, which  can be used to predict the probability for any word in the vocabulary  to appear as the next word. 


>> Tokens are: 
[language, model, ,,  , layers, network, learn, convert, input, word, vec-, tors, output, word, vector, predicted, word, ,,  , predict, probability, word, vocabulary,  , appear, word, .] 

>> PoS Tags are: 
[('language', 'NOUN'), ('model', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('layers', 'NOUN'), ('network', 'NOUN'), ('learn', 'VERB'), ('convert', 'VERB'), ('input', 'NOUN'), ('word', 'NOUN'), ('vec-', 'ADP'), ('tors', 'NOUN'), ('output', 'NOUN'), ('word', 'NOUN'), ('vector', 'NOUN'), ('predicted', 'VERB'), ('word', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('predict', 'VERB'), ('probability', 'NOUN'), ('word', 'NOUN'), ('vocabulary', 'NOUN'), (' ', 'SPACE'), ('appear', 'VERB'), ('word', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('language', 'compound'), ('model', 'pobj'), (',', 'punct'), (' ', 'nsubj'), ('layers', 'nsubj'), ('network', 'pobj'), ('learn', 'ROOT'), ('convert', 'xcomp'), ('input', 'compound'), ('word', 'dobj'), ('vec-', 'compound'), ('tors', 'appos'), ('output', 'compound'), ('word', 'compound'), ('vector', 'pobj'), ('predicted', 'amod'), ('word', 'pobj'), (',', 'punct'), (' ', 'nsubjpass'), ('predict', 'xcomp'), ('probability', 'dobj'), ('word', 'pobj'), ('vocabulary', 'pobj'), (' ', 'appos'), ('appear', 'acl'), ('word', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[language, model], [model, ,], [,,  ], [ , layers], [layers, network], [network, learn], [learn, convert], [convert, input], [input, word], [word, vec-], [vec-, tors], [tors, output], [output, word], [word, vector], [vector, predicted], [predicted, word], [word, ,], [,,  ], [ , predict], [predict, probability], [probability, word], [word, vocabulary], [vocabulary,  ], [ , appear], [appear, word], [word, .]]

>> Trigrams: 
[[language, model, ,], [model, ,,  ], [,,  , layers], [ , layers, network], [layers, network, learn], [network, learn, convert], [learn, convert, input], [convert, input, word], [input, word, vec-], [word, vec-, tors], [vec-, tors, output], [tors, output, word], [output, word, vector], [word, vector, predicted], [vector, predicted, word], [predicted, word, ,], [word, ,,  ], [,,  , predict], [ , predict, probability], [predict, probability, word], [probability, word, vocabulary], [word, vocabulary,  ], [vocabulary,  , appear], [ , appear, word], [appear, word, .]]

>> Noun Phrases are: 
[a language model, the other layers, the network, the input word, vec- tors, an output word vector, the predicted next word, the probability, any word, the vocabulary, the next word]

>> Named Entities are: 
[]


============================ Sentence 285 =============================

The network learns word vectors that  contain many active components each of which can be interpreted  as a separate feature of the word, as was first demonstrated27 in the  context of learning distributed representations for symbols. 


>> Tokens are: 
[network, learns, word, vectors,  , contain, active, components, interpreted,  , separate, feature, word, ,, demonstrated27,  , context, learning, distributed, representations, symbols, .] 

>> PoS Tags are: 
[('network', 'NOUN'), ('learns', 'VERB'), ('word', 'NOUN'), ('vectors', 'NOUN'), (' ', 'SPACE'), ('contain', 'VERB'), ('active', 'ADJ'), ('components', 'NOUN'), ('interpreted', 'VERB'), (' ', 'SPACE'), ('separate', 'ADJ'), ('feature', 'NOUN'), ('word', 'NOUN'), (',', 'PUNCT'), ('demonstrated27', 'NOUN'), (' ', 'SPACE'), ('context', 'NOUN'), ('learning', 'VERB'), ('distributed', 'VERB'), ('representations', 'NOUN'), ('symbols', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('network', 'nsubj'), ('learns', 'ROOT'), ('word', 'compound'), ('vectors', 'dobj'), (' ', 'nsubj'), ('contain', 'ccomp'), ('active', 'amod'), ('components', 'dobj'), ('interpreted', 'advcl'), (' ', 'dobj'), ('separate', 'amod'), ('feature', 'pobj'), ('word', 'pobj'), (',', 'punct'), ('demonstrated27', 'attr'), (' ', 'compound'), ('context', 'pobj'), ('learning', 'pcomp'), ('distributed', 'conj'), ('representations', 'dobj'), ('symbols', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[network, learns], [learns, word], [word, vectors], [vectors,  ], [ , contain], [contain, active], [active, components], [components, interpreted], [interpreted,  ], [ , separate], [separate, feature], [feature, word], [word, ,], [,, demonstrated27], [demonstrated27,  ], [ , context], [context, learning], [learning, distributed], [distributed, representations], [representations, symbols], [symbols, .]]

>> Trigrams: 
[[network, learns, word], [learns, word, vectors], [word, vectors,  ], [vectors,  , contain], [ , contain, active], [contain, active, components], [active, components, interpreted], [components, interpreted,  ], [interpreted,  , separate], [ , separate, feature], [separate, feature, word], [feature, word, ,], [word, ,, demonstrated27], [,, demonstrated27,  ], [demonstrated27,  , context], [ , context, learning], [context, learning, distributed], [learning, distributed, representations], [distributed, representations, symbols], [representations, symbols, .]]

>> Noun Phrases are: 
[The network, word vectors, many active components, a separate feature, the word, first demonstrated27, the  context, representations, symbols]

>> Named Entities are: 
[('first', 'ORDINAL')]


============================ Sentence 286 =============================

These  semantic features were not explicitly present in the input. 


>> Tokens are: 
[ , semantic, features, explicitly, present, input, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('semantic', 'ADJ'), ('features', 'NOUN'), ('explicitly', 'ADV'), ('present', 'ADJ'), ('input', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'nmod'), ('semantic', 'amod'), ('features', 'nsubj'), ('explicitly', 'advmod'), ('present', 'acomp'), ('input', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[ , semantic], [semantic, features], [features, explicitly], [explicitly, present], [present, input], [input, .]]

>> Trigrams: 
[[ , semantic, features], [semantic, features, explicitly], [features, explicitly, present], [explicitly, present, input], [present, input, .]]

>> Noun Phrases are: 
[These  semantic features, the input]

>> Named Entities are: 
[]


============================ Sentence 287 =============================

They were  discovered by the learning procedure as a good way of factorizing  the structured relationships between the input and output symbols  into multiple ‘micro-rules’. 


>> Tokens are: 
[ , discovered, learning, procedure, good, way, factorizing,  , structured, relationships, input, output, symbols,  , multiple, ‘, micro, -, rules, ’, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('discovered', 'VERB'), ('learning', 'NOUN'), ('procedure', 'NOUN'), ('good', 'ADJ'), ('way', 'NOUN'), ('factorizing', 'VERB'), (' ', 'SPACE'), ('structured', 'ADJ'), ('relationships', 'NOUN'), ('input', 'NOUN'), ('output', 'NOUN'), ('symbols', 'NOUN'), (' ', 'SPACE'), ('multiple', 'ADJ'), ('‘', 'PUNCT'), ('micro', 'NOUN'), ('-', 'NOUN'), ('rules', 'NOUN'), ('’', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'dep'), ('discovered', 'ROOT'), ('learning', 'compound'), ('procedure', 'pobj'), ('good', 'amod'), ('way', 'pobj'), ('factorizing', 'pcomp'), (' ', 'dative'), ('structured', 'amod'), ('relationships', 'dobj'), ('input', 'nmod'), ('output', 'conj'), ('symbols', 'pobj'), (' ', 'appos'), ('multiple', 'amod'), ('‘', 'punct'), ('micro', 'pobj'), ('-', 'pobj'), ('rules', 'pobj'), ('’', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[ , discovered], [discovered, learning], [learning, procedure], [procedure, good], [good, way], [way, factorizing], [factorizing,  ], [ , structured], [structured, relationships], [relationships, input], [input, output], [output, symbols], [symbols,  ], [ , multiple], [multiple, ‘], [‘, micro], [micro, -], [-, rules], [rules, ’], [’, .]]

>> Trigrams: 
[[ , discovered, learning], [discovered, learning, procedure], [learning, procedure, good], [procedure, good, way], [good, way, factorizing], [way, factorizing,  ], [factorizing,  , structured], [ , structured, relationships], [structured, relationships, input], [relationships, input, output], [input, output, symbols], [output, symbols,  ], [symbols,  , multiple], [ , multiple, ‘], [multiple, ‘, micro], [‘, micro, -], [micro, -, rules], [-, rules, ’], [rules, ’, .]]

>> Noun Phrases are: 
[They, the learning procedure, a good way, the structured relationships, the input and output symbols, multiple ‘micro, -, rules]

>> Named Entities are: 
[]


============================ Sentence 288 =============================

Learning word vectors turned out to also  work very well when the word sequences come from a large corpus  of real text and the individual micro-rules are unreliable71. 


>> Tokens are: 
[Learning, word, vectors, turned,  , work, word, sequences, come, large, corpus,  , real, text, individual, micro, -, rules, unreliable71, .] 

>> PoS Tags are: 
[('Learning', 'VERB'), ('word', 'NOUN'), ('vectors', 'NOUN'), ('turned', 'VERB'), (' ', 'SPACE'), ('work', 'VERB'), ('word', 'NOUN'), ('sequences', 'NOUN'), ('come', 'VERB'), ('large', 'ADJ'), ('corpus', 'NOUN'), (' ', 'SPACE'), ('real', 'ADJ'), ('text', 'NOUN'), ('individual', 'ADJ'), ('micro', 'NOUN'), ('-', 'NOUN'), ('rules', 'NOUN'), ('unreliable71', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Learning', 'csubj'), ('word', 'compound'), ('vectors', 'nsubj'), ('turned', 'csubj'), (' ', 'nsubj'), ('work', 'xcomp'), ('word', 'compound'), ('sequences', 'nsubj'), ('come', 'advcl'), ('large', 'amod'), ('corpus', 'pobj'), (' ', 'appos'), ('real', 'amod'), ('text', 'pobj'), ('individual', 'amod'), ('micro', 'conj'), ('-', 'nsubj'), ('rules', 'nsubj'), ('unreliable71', 'acomp'), ('.', 'punct')]

>> Bigrams: 
[[Learning, word], [word, vectors], [vectors, turned], [turned,  ], [ , work], [work, word], [word, sequences], [sequences, come], [come, large], [large, corpus], [corpus,  ], [ , real], [real, text], [text, individual], [individual, micro], [micro, -], [-, rules], [rules, unreliable71], [unreliable71, .]]

>> Trigrams: 
[[Learning, word, vectors], [word, vectors, turned], [vectors, turned,  ], [turned,  , work], [ , work, word], [work, word, sequences], [word, sequences, come], [sequences, come, large], [come, large, corpus], [large, corpus,  ], [corpus,  , real], [ , real, text], [real, text, individual], [text, individual, micro], [individual, micro, -], [micro, -, rules], [-, rules, unreliable71], [rules, unreliable71, .]]

>> Noun Phrases are: 
[word vectors, the word sequences, a large corpus, real text, the individual micro, -, rules]

>> Named Entities are: 
[]


============================ Sentence 289 =============================

When  trained to predict the next word in a news story, for example, the  learned word vectors for Tuesday and Wednesday are very similar, as  are the word vectors for Sweden and Norway. 


>> Tokens are: 
[ , trained, predict, word, news, story, ,, example, ,,  , learned, word, vectors, Tuesday, Wednesday, similar, ,,  , word, vectors, Sweden, Norway, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('trained', 'VERB'), ('predict', 'VERB'), ('word', 'NOUN'), ('news', 'NOUN'), ('story', 'NOUN'), (',', 'PUNCT'), ('example', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('learned', 'VERB'), ('word', 'NOUN'), ('vectors', 'NOUN'), ('Tuesday', 'PROPN'), ('Wednesday', 'PROPN'), ('similar', 'ADJ'), (',', 'PUNCT'), (' ', 'SPACE'), ('word', 'NOUN'), ('vectors', 'NOUN'), ('Sweden', 'PROPN'), ('Norway', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'nsubj'), ('trained', 'advcl'), ('predict', 'xcomp'), ('word', 'dobj'), ('news', 'compound'), ('story', 'pobj'), (',', 'punct'), ('example', 'pobj'), (',', 'punct'), (' ', 'nsubj'), ('learned', 'ROOT'), ('word', 'compound'), ('vectors', 'dobj'), ('Tuesday', 'pobj'), ('Wednesday', 'nsubj'), ('similar', 'acomp'), (',', 'punct'), (' ', 'nsubj'), ('word', 'compound'), ('vectors', 'attr'), ('Sweden', 'pobj'), ('Norway', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[ , trained], [trained, predict], [predict, word], [word, news], [news, story], [story, ,], [,, example], [example, ,], [,,  ], [ , learned], [learned, word], [word, vectors], [vectors, Tuesday], [Tuesday, Wednesday], [Wednesday, similar], [similar, ,], [,,  ], [ , word], [word, vectors], [vectors, Sweden], [Sweden, Norway], [Norway, .]]

>> Trigrams: 
[[ , trained, predict], [trained, predict, word], [predict, word, news], [word, news, story], [news, story, ,], [story, ,, example], [,, example, ,], [example, ,,  ], [,,  , learned], [ , learned, word], [learned, word, vectors], [word, vectors, Tuesday], [vectors, Tuesday, Wednesday], [Tuesday, Wednesday, similar], [Wednesday, similar, ,], [similar, ,,  ], [,,  , word], [ , word, vectors], [word, vectors, Sweden], [vectors, Sweden, Norway], [Sweden, Norway, .]]

>> Noun Phrases are: 
[the next word, a news story, example, word vectors, Tuesday, Wednesday, the word vectors, Sweden, Norway]

>> Named Entities are: 
[('Tuesday', 'DATE'), ('Wednesday', 'DATE'), ('Sweden', 'GPE'), ('Norway', 'GPE')]


============================ Sentence 290 =============================

Such representations  are called distributed representations because their elements (the  features) are not mutually exclusive and their many configurations  correspond to the variations seen in the observed data. 


>> Tokens are: 
[representations,  , called, distributed, representations, elements, (,  , features, ), mutually, exclusive, configurations,  , correspond, variations, seen, observed, data, .] 

>> PoS Tags are: 
[('representations', 'NOUN'), (' ', 'SPACE'), ('called', 'VERB'), ('distributed', 'VERB'), ('representations', 'NOUN'), ('elements', 'NOUN'), ('(', 'PUNCT'), (' ', 'SPACE'), ('features', 'NOUN'), (')', 'PUNCT'), ('mutually', 'ADV'), ('exclusive', 'ADJ'), ('configurations', 'NOUN'), (' ', 'SPACE'), ('correspond', 'VERB'), ('variations', 'NOUN'), ('seen', 'VERB'), ('observed', 'VERB'), ('data', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('representations', 'ROOT'), (' ', 'nsubjpass'), ('called', 'relcl'), ('distributed', 'amod'), ('representations', 'oprd'), ('elements', 'nsubj'), ('(', 'punct'), (' ', 'compound'), ('features', 'appos'), (')', 'punct'), ('mutually', 'advmod'), ('exclusive', 'acomp'), ('configurations', 'conj'), (' ', 'nsubj'), ('correspond', 'relcl'), ('variations', 'pobj'), ('seen', 'acl'), ('observed', 'amod'), ('data', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[representations,  ], [ , called], [called, distributed], [distributed, representations], [representations, elements], [elements, (], [(,  ], [ , features], [features, )], [), mutually], [mutually, exclusive], [exclusive, configurations], [configurations,  ], [ , correspond], [correspond, variations], [variations, seen], [seen, observed], [observed, data], [data, .]]

>> Trigrams: 
[[representations,  , called], [ , called, distributed], [called, distributed, representations], [distributed, representations, elements], [representations, elements, (], [elements, (,  ], [(,  , features], [ , features, )], [features, ), mutually], [), mutually, exclusive], [mutually, exclusive, configurations], [exclusive, configurations,  ], [configurations,  , correspond], [ , correspond, variations], [correspond, variations, seen], [variations, seen, observed], [seen, observed, data], [observed, data, .]]

>> Noun Phrases are: 
[Such representations, distributed representations, their elements, (the  features, the variations, the observed data]

>> Named Entities are: 
[]


============================ Sentence 291 =============================

These word  vectors are composed of learned features that were not determined  ahead of time by experts, but automatically discovered by the neural  network. 


>> Tokens are: 
[word,  , vectors, composed, learned, features, determined,  , ahead, time, experts, ,, automatically, discovered, neural,  , network, .] 

>> PoS Tags are: 
[('word', 'NOUN'), (' ', 'SPACE'), ('vectors', 'NOUN'), ('composed', 'VERB'), ('learned', 'VERB'), ('features', 'NOUN'), ('determined', 'VERB'), (' ', 'SPACE'), ('ahead', 'ADV'), ('time', 'NOUN'), ('experts', 'NOUN'), (',', 'PUNCT'), ('automatically', 'ADV'), ('discovered', 'VERB'), ('neural', 'ADJ'), (' ', 'SPACE'), ('network', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('word', 'nsubjpass'), (' ', 'compound'), ('vectors', 'nsubjpass'), ('composed', 'ROOT'), ('learned', 'amod'), ('features', 'pobj'), ('determined', 'conj'), (' ', 'dobj'), ('ahead', 'advmod'), ('time', 'pobj'), ('experts', 'pobj'), (',', 'punct'), ('automatically', 'advmod'), ('discovered', 'conj'), ('neural', 'amod'), (' ', 'compound'), ('network', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[word,  ], [ , vectors], [vectors, composed], [composed, learned], [learned, features], [features, determined], [determined,  ], [ , ahead], [ahead, time], [time, experts], [experts, ,], [,, automatically], [automatically, discovered], [discovered, neural], [neural,  ], [ , network], [network, .]]

>> Trigrams: 
[[word,  , vectors], [ , vectors, composed], [vectors, composed, learned], [composed, learned, features], [learned, features, determined], [features, determined,  ], [determined,  , ahead], [ , ahead, time], [ahead, time, experts], [time, experts, ,], [experts, ,, automatically], [,, automatically, discovered], [automatically, discovered, neural], [discovered, neural,  ], [neural,  , network], [ , network, .]]

>> Noun Phrases are: 
[These word,  vectors, learned features, time, experts, the neural  network]

>> Named Entities are: 
[]


============================ Sentence 292 =============================

Vector representations of words learned from text are now  very widely used in natural language applications14,17,72–76. 


>> Tokens are: 
[Vector, representations, words, learned, text,  , widely, natural, language, applications14,17,72–76, .] 

>> PoS Tags are: 
[('Vector', 'NOUN'), ('representations', 'NOUN'), ('words', 'NOUN'), ('learned', 'VERB'), ('text', 'NOUN'), (' ', 'SPACE'), ('widely', 'ADV'), ('natural', 'ADJ'), ('language', 'NOUN'), ('applications14,17,72–76', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Vector', 'compound'), ('representations', 'nsubj'), ('words', 'pobj'), ('learned', 'acl'), ('text', 'pobj'), (' ', 'nsubjpass'), ('widely', 'advmod'), ('natural', 'amod'), ('language', 'compound'), ('applications14,17,72–76', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Vector, representations], [representations, words], [words, learned], [learned, text], [text,  ], [ , widely], [widely, natural], [natural, language], [language, applications14,17,72–76], [applications14,17,72–76, .]]

>> Trigrams: 
[[Vector, representations, words], [representations, words, learned], [words, learned, text], [learned, text,  ], [text,  , widely], [ , widely, natural], [widely, natural, language], [natural, language, applications14,17,72–76], [language, applications14,17,72–76, .]]

>> Noun Phrases are: 
[Vector representations, words, text, natural language applications14,17,72–76]

>> Named Entities are: 
[]


============================ Sentence 293 =============================

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 294 =============================

The issue of representation lies at the heart of the debate between  the logic-inspired and the neural-network-inspired paradigms for  cognition. 


>> Tokens are: 
[issue, representation, lies, heart, debate,  , logic, -, inspired, neural, -, network, -, inspired, paradigms,  , cognition, .] 

>> PoS Tags are: 
[('issue', 'NOUN'), ('representation', 'NOUN'), ('lies', 'VERB'), ('heart', 'NOUN'), ('debate', 'NOUN'), (' ', 'SPACE'), ('logic', 'NOUN'), ('-', 'PUNCT'), ('inspired', 'VERB'), ('neural', 'ADJ'), ('-', 'PUNCT'), ('network', 'NOUN'), ('-', 'PUNCT'), ('inspired', 'VERB'), ('paradigms', 'NOUN'), (' ', 'SPACE'), ('cognition', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('issue', 'nsubj'), ('representation', 'pobj'), ('lies', 'ROOT'), ('heart', 'pobj'), ('debate', 'pobj'), (' ', 'pobj'), ('logic', 'npadvmod'), ('-', 'punct'), ('inspired', 'meta'), ('neural', 'amod'), ('-', 'punct'), ('network', 'npadvmod'), ('-', 'punct'), ('inspired', 'amod'), ('paradigms', 'dobj'), (' ', 'compound'), ('cognition', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[issue, representation], [representation, lies], [lies, heart], [heart, debate], [debate,  ], [ , logic], [logic, -], [-, inspired], [inspired, neural], [neural, -], [-, network], [network, -], [-, inspired], [inspired, paradigms], [paradigms,  ], [ , cognition], [cognition, .]]

>> Trigrams: 
[[issue, representation, lies], [representation, lies, heart], [lies, heart, debate], [heart, debate,  ], [debate,  , logic], [ , logic, -], [logic, -, inspired], [-, inspired, neural], [inspired, neural, -], [neural, -, network], [-, network, -], [network, -, inspired], [-, inspired, paradigms], [inspired, paradigms,  ], [paradigms,  , cognition], [ , cognition, .]]

>> Noun Phrases are: 
[The issue, representation, the heart, the debate, the logic-inspired and the neural-network-inspired paradigms,  cognition]

>> Named Entities are: 
[]


============================ Sentence 295 =============================

In the logic-inspired paradigm, an instance of a symbol is  something for which the only property is that it is either identical or  non-identical to other symbol instances. 


>> Tokens are: 
[logic, -, inspired, paradigm, ,, instance, symbol,  , property, identical,  , non, -, identical, symbol, instances, .] 

>> PoS Tags are: 
[('logic', 'NOUN'), ('-', 'PUNCT'), ('inspired', 'VERB'), ('paradigm', 'NOUN'), (',', 'PUNCT'), ('instance', 'NOUN'), ('symbol', 'NOUN'), (' ', 'SPACE'), ('property', 'NOUN'), ('identical', 'ADJ'), (' ', 'SPACE'), ('non', 'ADJ'), ('-', 'ADJ'), ('identical', 'ADJ'), ('symbol', 'NOUN'), ('instances', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('logic', 'npadvmod'), ('-', 'punct'), ('inspired', 'amod'), ('paradigm', 'pobj'), (',', 'punct'), ('instance', 'nsubj'), ('symbol', 'pobj'), (' ', 'attr'), ('property', 'nsubj'), ('identical', 'acomp'), (' ', 'nsubj'), ('non', 'conj'), ('-', 'conj'), ('identical', 'acomp'), ('symbol', 'compound'), ('instances', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[logic, -], [-, inspired], [inspired, paradigm], [paradigm, ,], [,, instance], [instance, symbol], [symbol,  ], [ , property], [property, identical], [identical,  ], [ , non], [non, -], [-, identical], [identical, symbol], [symbol, instances], [instances, .]]

>> Trigrams: 
[[logic, -, inspired], [-, inspired, paradigm], [inspired, paradigm, ,], [paradigm, ,, instance], [,, instance, symbol], [instance, symbol,  ], [symbol,  , property], [ , property, identical], [property, identical,  ], [identical,  , non], [ , non, -], [non, -, identical], [-, identical, symbol], [identical, symbol, instances], [symbol, instances, .]]

>> Noun Phrases are: 
[the logic-inspired paradigm, an instance, a symbol, something, the only property, it, other symbol instances]

>> Named Entities are: 
[]


============================ Sentence 296 =============================

It has no internal structure  that is relevant to its use; and to reason with symbols, they must be  bound to the variables in judiciously chosen rules of inference. 


>> Tokens are: 
[internal, structure,  , relevant, use, ;, reason, symbols, ,,  , bound, variables, judiciously, chosen, rules, inference, .] 

>> PoS Tags are: 
[('internal', 'ADJ'), ('structure', 'NOUN'), (' ', 'SPACE'), ('relevant', 'ADJ'), ('use', 'NOUN'), (';', 'PUNCT'), ('reason', 'NOUN'), ('symbols', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('bound', 'VERB'), ('variables', 'NOUN'), ('judiciously', 'ADV'), ('chosen', 'VERB'), ('rules', 'NOUN'), ('inference', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('internal', 'amod'), ('structure', 'dobj'), (' ', 'appos'), ('relevant', 'acomp'), ('use', 'pobj'), (';', 'punct'), ('reason', 'conj'), ('symbols', 'pobj'), (',', 'punct'), (' ', 'nsubjpass'), ('bound', 'advcl'), ('variables', 'pobj'), ('judiciously', 'advmod'), ('chosen', 'amod'), ('rules', 'pobj'), ('inference', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[internal, structure], [structure,  ], [ , relevant], [relevant, use], [use, ;], [;, reason], [reason, symbols], [symbols, ,], [,,  ], [ , bound], [bound, variables], [variables, judiciously], [judiciously, chosen], [chosen, rules], [rules, inference], [inference, .]]

>> Trigrams: 
[[internal, structure,  ], [structure,  , relevant], [ , relevant, use], [relevant, use, ;], [use, ;, reason], [;, reason, symbols], [reason, symbols, ,], [symbols, ,,  ], [,,  , bound], [ , bound, variables], [bound, variables, judiciously], [variables, judiciously, chosen], [judiciously, chosen, rules], [chosen, rules, inference], [rules, inference, .]]

>> Noun Phrases are: 
[It, no internal structure, its use, to reason, symbols, they, the variables, judiciously chosen rules, inference]

>> Named Entities are: 
[]


============================ Sentence 297 =============================

By  contrast, neural networks just use big activity vectors, big weight  matrices and scalar non-linearities to perform the type of fast ‘intui- tive’ inference that underpins effortless commonsense reasoning. 


>> Tokens are: 
[ , contrast, ,, neural, networks, use, big, activity, vectors, ,, big, weight,  , matrices, scalar, non, -, linearities, perform, type, fast, ‘, intui-, tive, ’, inference, underpins, effortless, commonsense, reasoning, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('contrast', 'NOUN'), (',', 'PUNCT'), ('neural', 'ADJ'), ('networks', 'NOUN'), ('use', 'VERB'), ('big', 'ADJ'), ('activity', 'NOUN'), ('vectors', 'NOUN'), (',', 'PUNCT'), ('big', 'ADJ'), ('weight', 'NOUN'), (' ', 'SPACE'), ('matrices', 'NOUN'), ('scalar', 'ADJ'), ('non', 'ADJ'), ('-', 'NOUN'), ('linearities', 'NOUN'), ('perform', 'VERB'), ('type', 'NOUN'), ('fast', 'ADJ'), ('‘', 'PUNCT'), ('intui-', 'ADJ'), ('tive', 'NOUN'), ('’', 'PUNCT'), ('inference', 'NOUN'), ('underpins', 'VERB'), ('effortless', 'ADJ'), ('commonsense', 'NOUN'), ('reasoning', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'pobj'), ('contrast', 'pobj'), (',', 'punct'), ('neural', 'amod'), ('networks', 'nsubj'), ('use', 'ROOT'), ('big', 'amod'), ('activity', 'compound'), ('vectors', 'dobj'), (',', 'punct'), ('big', 'amod'), ('weight', 'appos'), (' ', 'compound'), ('matrices', 'dobj'), ('scalar', 'amod'), ('non', 'conj'), ('-', 'conj'), ('linearities', 'conj'), ('perform', 'xcomp'), ('type', 'dobj'), ('fast', 'amod'), ('‘', 'punct'), ('intui-', 'nmod'), ('tive', 'nmod'), ('’', 'punct'), ('inference', 'pobj'), ('underpins', 'relcl'), ('effortless', 'xcomp'), ('commonsense', 'compound'), ('reasoning', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[ , contrast], [contrast, ,], [,, neural], [neural, networks], [networks, use], [use, big], [big, activity], [activity, vectors], [vectors, ,], [,, big], [big, weight], [weight,  ], [ , matrices], [matrices, scalar], [scalar, non], [non, -], [-, linearities], [linearities, perform], [perform, type], [type, fast], [fast, ‘], [‘, intui-], [intui-, tive], [tive, ’], [’, inference], [inference, underpins], [underpins, effortless], [effortless, commonsense], [commonsense, reasoning], [reasoning, .]]

>> Trigrams: 
[[ , contrast, ,], [contrast, ,, neural], [,, neural, networks], [neural, networks, use], [networks, use, big], [use, big, activity], [big, activity, vectors], [activity, vectors, ,], [vectors, ,, big], [,, big, weight], [big, weight,  ], [weight,  , matrices], [ , matrices, scalar], [matrices, scalar, non], [scalar, non, -], [non, -, linearities], [-, linearities, perform], [linearities, perform, type], [perform, type, fast], [type, fast, ‘], [fast, ‘, intui-], [‘, intui-, tive], [intui-, tive, ’], [tive, ’, inference], [’, inference, underpins], [inference, underpins, effortless], [underpins, effortless, commonsense], [effortless, commonsense, reasoning], [commonsense, reasoning, .]]

>> Noun Phrases are: 
[contrast, neural networks, big activity vectors, big weight,  matrices, -, linearities, the type, fast ‘intui- tive’ inference, commonsense reasoning]

>> Named Entities are: 
[]


============================ Sentence 298 =============================

  Before the introduction of neural language models71, the standard  approach to statistical modelling of language did not exploit distrib- uted representations: it was based on counting frequencies of occur- rences of short symbol sequences of length up to N (called N-grams). 


>> Tokens are: 
[  , introduction, neural, language, models71, ,, standard,  , approach, statistical, modelling, language, exploit, distrib-, uted, representations, :, based, counting, frequencies, occur-, rences, short, symbol, sequences, length, N, (, called, N, -, grams, ), .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('introduction', 'NOUN'), ('neural', 'ADJ'), ('language', 'NOUN'), ('models71', 'NOUN'), (',', 'PUNCT'), ('standard', 'ADJ'), (' ', 'SPACE'), ('approach', 'NOUN'), ('statistical', 'ADJ'), ('modelling', 'NOUN'), ('language', 'NOUN'), ('exploit', 'VERB'), ('distrib-', 'NOUN'), ('uted', 'ADJ'), ('representations', 'NOUN'), (':', 'PUNCT'), ('based', 'VERB'), ('counting', 'VERB'), ('frequencies', 'NOUN'), ('occur-', 'ADJ'), ('rences', 'NOUN'), ('short', 'ADJ'), ('symbol', 'NOUN'), ('sequences', 'NOUN'), ('length', 'NOUN'), ('N', 'PROPN'), ('(', 'PUNCT'), ('called', 'VERB'), ('N', 'PROPN'), ('-', 'PUNCT'), ('grams', 'PROPN'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'dep'), ('introduction', 'pobj'), ('neural', 'amod'), ('language', 'compound'), ('models71', 'pobj'), (',', 'punct'), ('standard', 'amod'), (' ', 'compound'), ('approach', 'nsubj'), ('statistical', 'amod'), ('modelling', 'pobj'), ('language', 'pobj'), ('exploit', 'ROOT'), ('distrib-', 'nmod'), ('uted', 'amod'), ('representations', 'dobj'), (':', 'punct'), ('based', 'acl'), ('counting', 'pcomp'), ('frequencies', 'dobj'), ('occur-', 'amod'), ('rences', 'pobj'), ('short', 'amod'), ('symbol', 'compound'), ('sequences', 'pobj'), ('length', 'pobj'), ('N', 'pobj'), ('(', 'punct'), ('called', 'acl'), ('N', 'compound'), ('-', 'punct'), ('grams', 'oprd'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[  , introduction], [introduction, neural], [neural, language], [language, models71], [models71, ,], [,, standard], [standard,  ], [ , approach], [approach, statistical], [statistical, modelling], [modelling, language], [language, exploit], [exploit, distrib-], [distrib-, uted], [uted, representations], [representations, :], [:, based], [based, counting], [counting, frequencies], [frequencies, occur-], [occur-, rences], [rences, short], [short, symbol], [symbol, sequences], [sequences, length], [length, N], [N, (], [(, called], [called, N], [N, -], [-, grams], [grams, )], [), .]]

>> Trigrams: 
[[  , introduction, neural], [introduction, neural, language], [neural, language, models71], [language, models71, ,], [models71, ,, standard], [,, standard,  ], [standard,  , approach], [ , approach, statistical], [approach, statistical, modelling], [statistical, modelling, language], [modelling, language, exploit], [language, exploit, distrib-], [exploit, distrib-, uted], [distrib-, uted, representations], [uted, representations, :], [representations, :, based], [:, based, counting], [based, counting, frequencies], [counting, frequencies, occur-], [frequencies, occur-, rences], [occur-, rences, short], [rences, short, symbol], [short, symbol, sequences], [symbol, sequences, length], [sequences, length, N], [length, N, (], [N, (, called], [(, called, N], [called, N, -], [N, -, grams], [-, grams, )], [grams, ), .]]

>> Noun Phrases are: 
[the introduction, neural language models71, the standard  approach, statistical modelling, language, distrib- uted representations, it, frequencies, occur- rences, short symbol sequences, length, N, N-grams]

>> Named Entities are: 
[('N', 'GPE')]


============================ Sentence 299 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 300 =============================

The number of possible N-grams is on the order of VN, where V is  the vocabulary size, so taking into account a context of more than a   handful of words would require very large training corpora. 


>> Tokens are: 
[number, possible, N, -, grams, order, VN, ,, V,  , vocabulary, size, ,, taking, account, context,   , handful, words, require, large, training, corpora, .] 

>> PoS Tags are: 
[('number', 'NOUN'), ('possible', 'ADJ'), ('N', 'PROPN'), ('-', 'PUNCT'), ('grams', 'NOUN'), ('order', 'NOUN'), ('VN', 'PROPN'), (',', 'PUNCT'), ('V', 'NOUN'), (' ', 'SPACE'), ('vocabulary', 'ADJ'), ('size', 'NOUN'), (',', 'PUNCT'), ('taking', 'VERB'), ('account', 'NOUN'), ('context', 'NOUN'), ('  ', 'SPACE'), ('handful', 'NOUN'), ('words', 'NOUN'), ('require', 'VERB'), ('large', 'ADJ'), ('training', 'NOUN'), ('corpora', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('number', 'nsubj'), ('possible', 'amod'), ('N', 'compound'), ('-', 'punct'), ('grams', 'pobj'), ('order', 'pobj'), ('VN', 'pobj'), (',', 'punct'), ('V', 'nsubj'), (' ', 'attr'), ('vocabulary', 'amod'), ('size', 'attr'), (',', 'punct'), ('taking', 'csubj'), ('account', 'pobj'), ('context', 'dobj'), ('  ', 'nummod'), ('handful', 'pobj'), ('words', 'pobj'), ('require', 'conj'), ('large', 'amod'), ('training', 'compound'), ('corpora', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[number, possible], [possible, N], [N, -], [-, grams], [grams, order], [order, VN], [VN, ,], [,, V], [V,  ], [ , vocabulary], [vocabulary, size], [size, ,], [,, taking], [taking, account], [account, context], [context,   ], [  , handful], [handful, words], [words, require], [require, large], [large, training], [training, corpora], [corpora, .]]

>> Trigrams: 
[[number, possible, N], [possible, N, -], [N, -, grams], [-, grams, order], [grams, order, VN], [order, VN, ,], [VN, ,, V], [,, V,  ], [V,  , vocabulary], [ , vocabulary, size], [vocabulary, size, ,], [size, ,, taking], [,, taking, account], [taking, account, context], [account, context,   ], [context,   , handful], [  , handful, words], [handful, words, require], [words, require, large], [require, large, training], [large, training, corpora], [training, corpora, .]]

>> Noun Phrases are: 
[The number, possible N-grams, the order, VN, V, the vocabulary size, account, a context, more than a   handful, words, very large training corpora]

>> Named Entities are: 
[]


============================ Sentence 301 =============================

N-grams  treat each word as an atomic unit, so they cannot generalize across  semantically related sequences of words, whereas neural language  models can because they associate each word with a vector of real  valued features, and semantically related words end up close to each  other in that vector space (Fig. 


>> Tokens are: 
[N, -, grams,  , treat, word, atomic, unit, ,, generalize,  , semantically, related, sequences, words, ,, neural, language,  , models, associate, word, vector, real,  , valued, features, ,, semantically, related, words, end, close,  , vector, space, (, Fig, .] 

>> PoS Tags are: 
[('N', 'NUM'), ('-', 'PUNCT'), ('grams', 'NOUN'), (' ', 'SPACE'), ('treat', 'VERB'), ('word', 'NOUN'), ('atomic', 'ADJ'), ('unit', 'NOUN'), (',', 'PUNCT'), ('generalize', 'VERB'), (' ', 'SPACE'), ('semantically', 'ADV'), ('related', 'VERB'), ('sequences', 'NOUN'), ('words', 'NOUN'), (',', 'PUNCT'), ('neural', 'ADJ'), ('language', 'NOUN'), (' ', 'SPACE'), ('models', 'NOUN'), ('associate', 'VERB'), ('word', 'NOUN'), ('vector', 'NOUN'), ('real', 'ADJ'), (' ', 'SPACE'), ('valued', 'VERB'), ('features', 'NOUN'), (',', 'PUNCT'), ('semantically', 'ADV'), ('related', 'VERB'), ('words', 'NOUN'), ('end', 'VERB'), ('close', 'ADV'), (' ', 'SPACE'), ('vector', 'NOUN'), ('space', 'NOUN'), ('(', 'PUNCT'), ('Fig', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('N', 'nummod'), ('-', 'punct'), ('grams', 'nsubj'), (' ', 'appos'), ('treat', 'ROOT'), ('word', 'dobj'), ('atomic', 'amod'), ('unit', 'pobj'), (',', 'punct'), ('generalize', 'conj'), (' ', 'pobj'), ('semantically', 'advmod'), ('related', 'amod'), ('sequences', 'pobj'), ('words', 'pobj'), (',', 'punct'), ('neural', 'amod'), ('language', 'nmod'), (' ', 'compound'), ('models', 'nsubj'), ('associate', 'advcl'), ('word', 'dobj'), ('vector', 'pobj'), ('real', 'amod'), (' ', 'npadvmod'), ('valued', 'amod'), ('features', 'pobj'), (',', 'punct'), ('semantically', 'advmod'), ('related', 'amod'), ('words', 'nsubj'), ('end', 'conj'), ('close', 'advmod'), (' ', 'pobj'), ('vector', 'compound'), ('space', 'pobj'), ('(', 'punct'), ('Fig', 'npadvmod'), ('.', 'punct')]

>> Bigrams: 
[[N, -], [-, grams], [grams,  ], [ , treat], [treat, word], [word, atomic], [atomic, unit], [unit, ,], [,, generalize], [generalize,  ], [ , semantically], [semantically, related], [related, sequences], [sequences, words], [words, ,], [,, neural], [neural, language], [language,  ], [ , models], [models, associate], [associate, word], [word, vector], [vector, real], [real,  ], [ , valued], [valued, features], [features, ,], [,, semantically], [semantically, related], [related, words], [words, end], [end, close], [close,  ], [ , vector], [vector, space], [space, (], [(, Fig], [Fig, .]]

>> Trigrams: 
[[N, -, grams], [-, grams,  ], [grams,  , treat], [ , treat, word], [treat, word, atomic], [word, atomic, unit], [atomic, unit, ,], [unit, ,, generalize], [,, generalize,  ], [generalize,  , semantically], [ , semantically, related], [semantically, related, sequences], [related, sequences, words], [sequences, words, ,], [words, ,, neural], [,, neural, language], [neural, language,  ], [language,  , models], [ , models, associate], [models, associate, word], [associate, word, vector], [word, vector, real], [vector, real,  ], [real,  , valued], [ , valued, features], [valued, features, ,], [features, ,, semantically], [,, semantically, related], [semantically, related, words], [related, words, end], [words, end, close], [end, close,  ], [close,  , vector], [ , vector, space], [vector, space, (], [space, (, Fig], [(, Fig, .]]

>> Noun Phrases are: 
[N-grams, each word, an atomic unit, they, semantically related sequences, words, neural language  models, they, each word, a vector, real  valued features, semantically related words, that vector space]

>> Named Entities are: 
[('Fig', 'PERSON')]


============================ Sentence 302 =============================

 4). 


>> Tokens are: 
[ , 4, ), .] 

>> PoS Tags are: 
[('\xa0', 'SPACE'), ('4', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\xa0', 'ROOT'), ('4', 'nummod'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[ , 4], [4, )], [), .]]

>> Trigrams: 
[[ , 4, )], [4, ), .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 303 =============================

  Recurrent neural networks   


>> Tokens are: 
[  , Recurrent, neural, networks,  ] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('Recurrent', 'ADJ'), ('neural', 'ADJ'), ('networks', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'nmod'), ('Recurrent', 'nmod'), ('neural', 'amod'), ('networks', 'ROOT'), (' ', 'appos')]

>> Bigrams: 
[[  , Recurrent], [Recurrent, neural], [neural, networks], [networks,  ]]

>> Trigrams: 
[[  , Recurrent, neural], [Recurrent, neural, networks], [neural, networks,  ]]

>> Noun Phrases are: 
[  Recurrent neural networks]

>> Named Entities are: 
[]


============================ Sentence 304 =============================

When backpropagation was first introduced, its most exciting use was  for training recurrent neural networks (RNNs). 


>> Tokens are: 
[backpropagation, introduced, ,, exciting, use,  , training, recurrent, neural, networks, (, RNNs, ), .] 

>> PoS Tags are: 
[('backpropagation', 'NOUN'), ('introduced', 'VERB'), (',', 'PUNCT'), ('exciting', 'ADJ'), ('use', 'NOUN'), (' ', 'SPACE'), ('training', 'VERB'), ('recurrent', 'ADJ'), ('neural', 'ADJ'), ('networks', 'NOUN'), ('(', 'PUNCT'), ('RNNs', 'PROPN'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('backpropagation', 'nsubjpass'), ('introduced', 'advcl'), (',', 'punct'), ('exciting', 'amod'), ('use', 'nsubj'), (' ', 'nsubj'), ('training', 'pcomp'), ('recurrent', 'amod'), ('neural', 'amod'), ('networks', 'dobj'), ('(', 'punct'), ('RNNs', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[backpropagation, introduced], [introduced, ,], [,, exciting], [exciting, use], [use,  ], [ , training], [training, recurrent], [recurrent, neural], [neural, networks], [networks, (], [(, RNNs], [RNNs, )], [), .]]

>> Trigrams: 
[[backpropagation, introduced, ,], [introduced, ,, exciting], [,, exciting, use], [exciting, use,  ], [use,  , training], [ , training, recurrent], [training, recurrent, neural], [recurrent, neural, networks], [neural, networks, (], [networks, (, RNNs], [(, RNNs, )], [RNNs, ), .]]

>> Noun Phrases are: 
[backpropagation, its most exciting use, recurrent neural networks, RNNs]

>> Named Entities are: 
[('first', 'ORDINAL')]


============================ Sentence 305 =============================

For tasks that involve  sequential inputs, such as speech and language, it is often better to  use RNNs (Fig. 5). 


>> Tokens are: 
[tasks, involve,  , sequential, inputs, ,, speech, language, ,, better,  , use, RNNs, (, Fig, ., 5, ), .] 

>> PoS Tags are: 
[('tasks', 'NOUN'), ('involve', 'VERB'), (' ', 'SPACE'), ('sequential', 'ADJ'), ('inputs', 'NOUN'), (',', 'PUNCT'), ('speech', 'NOUN'), ('language', 'NOUN'), (',', 'PUNCT'), ('better', 'ADJ'), (' ', 'SPACE'), ('use', 'VERB'), ('RNNs', 'NOUN'), ('(', 'PUNCT'), ('Fig', 'PROPN'), ('.', 'PUNCT'), ('5', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('tasks', 'pobj'), ('involve', 'relcl'), (' ', 'nmod'), ('sequential', 'amod'), ('inputs', 'dobj'), (',', 'punct'), ('speech', 'pobj'), ('language', 'conj'), (',', 'punct'), ('better', 'acomp'), (' ', 'pobj'), ('use', 'xcomp'), ('RNNs', 'dobj'), ('(', 'punct'), ('Fig', 'appos'), ('.', 'punct'), ('5', 'npadvmod'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[tasks, involve], [involve,  ], [ , sequential], [sequential, inputs], [inputs, ,], [,, speech], [speech, language], [language, ,], [,, better], [better,  ], [ , use], [use, RNNs], [RNNs, (], [(, Fig], [Fig, .], [., 5], [5, )], [), .]]

>> Trigrams: 
[[tasks, involve,  ], [involve,  , sequential], [ , sequential, inputs], [sequential, inputs, ,], [inputs, ,, speech], [,, speech, language], [speech, language, ,], [language, ,, better], [,, better,  ], [better,  , use], [ , use, RNNs], [use, RNNs, (], [RNNs, (, Fig], [(, Fig, .], [Fig, ., 5], [., 5, )], [5, ), .]]

>> Noun Phrases are: 
[tasks,  sequential inputs, speech, language, it, RNNs, Fig]

>> Named Entities are: 
[('Fig', 'PERSON'), ('5', 'CARDINAL')]


============================ Sentence 306 =============================

RNNs process an input sequence one element at a  time, maintaining in their hidden units a ‘state vector’ that implicitly  contains information about the history of all the past elements of  the sequence. 


>> Tokens are: 
[RNNs, process, input, sequence, element,  , time, ,, maintaining, hidden, units, ‘, state, vector, ’, implicitly,  , contains, information, history, past, elements,  , sequence, .] 

>> PoS Tags are: 
[('RNNs', 'NOUN'), ('process', 'VERB'), ('input', 'NOUN'), ('sequence', 'NOUN'), ('element', 'NOUN'), (' ', 'SPACE'), ('time', 'NOUN'), (',', 'PUNCT'), ('maintaining', 'VERB'), ('hidden', 'ADJ'), ('units', 'NOUN'), ('‘', 'PUNCT'), ('state', 'NOUN'), ('vector', 'NOUN'), ('’', 'PUNCT'), ('implicitly', 'ADV'), (' ', 'SPACE'), ('contains', 'VERB'), ('information', 'NOUN'), ('history', 'NOUN'), ('past', 'ADJ'), ('elements', 'NOUN'), (' ', 'SPACE'), ('sequence', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('RNNs', 'nsubj'), ('process', 'ROOT'), ('input', 'compound'), ('sequence', 'nmod'), ('element', 'dobj'), (' ', 'compound'), ('time', 'pobj'), (',', 'punct'), ('maintaining', 'advcl'), ('hidden', 'amod'), ('units', 'pobj'), ('‘', 'punct'), ('state', 'compound'), ('vector', 'dobj'), ('’', 'punct'), ('implicitly', 'advmod'), (' ', 'nsubj'), ('contains', 'conj'), ('information', 'dobj'), ('history', 'pobj'), ('past', 'amod'), ('elements', 'pobj'), (' ', 'pobj'), ('sequence', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[RNNs, process], [process, input], [input, sequence], [sequence, element], [element,  ], [ , time], [time, ,], [,, maintaining], [maintaining, hidden], [hidden, units], [units, ‘], [‘, state], [state, vector], [vector, ’], [’, implicitly], [implicitly,  ], [ , contains], [contains, information], [information, history], [history, past], [past, elements], [elements,  ], [ , sequence], [sequence, .]]

>> Trigrams: 
[[RNNs, process, input], [process, input, sequence], [input, sequence, element], [sequence, element,  ], [element,  , time], [ , time, ,], [time, ,, maintaining], [,, maintaining, hidden], [maintaining, hidden, units], [hidden, units, ‘], [units, ‘, state], [‘, state, vector], [state, vector, ’], [vector, ’, implicitly], [’, implicitly,  ], [implicitly,  , contains], [ , contains, information], [contains, information, history], [information, history, past], [history, past, elements], [past, elements,  ], [elements,  , sequence], [ , sequence, .]]

>> Noun Phrases are: 
[RNNs, an input sequence one element, a  time, their hidden units, a ‘state vector, information, the history, all the past elements, the sequence]

>> Named Entities are: 
[('one', 'CARDINAL')]


============================ Sentence 307 =============================

When we consider the outputs of the hidden units at  different discrete time steps as if they were the outputs of different  neurons in a deep multilayer network (Fig. 


>> Tokens are: 
[consider, outputs, hidden, units,  , different, discrete, time, steps, outputs, different,  , neurons, deep, multilayer, network, (, Fig, .] 

>> PoS Tags are: 
[('consider', 'VERB'), ('outputs', 'NOUN'), ('hidden', 'ADJ'), ('units', 'NOUN'), (' ', 'SPACE'), ('different', 'ADJ'), ('discrete', 'ADJ'), ('time', 'NOUN'), ('steps', 'NOUN'), ('outputs', 'NOUN'), ('different', 'ADJ'), (' ', 'SPACE'), ('neurons', 'NOUN'), ('deep', 'ADJ'), ('multilayer', 'NOUN'), ('network', 'NOUN'), ('(', 'PUNCT'), ('Fig', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('consider', 'ROOT'), ('outputs', 'dobj'), ('hidden', 'amod'), ('units', 'pobj'), (' ', 'pobj'), ('different', 'amod'), ('discrete', 'amod'), ('time', 'compound'), ('steps', 'ccomp'), ('outputs', 'attr'), ('different', 'amod'), (' ', 'compound'), ('neurons', 'pobj'), ('deep', 'amod'), ('multilayer', 'compound'), ('network', 'pobj'), ('(', 'punct'), ('Fig', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[consider, outputs], [outputs, hidden], [hidden, units], [units,  ], [ , different], [different, discrete], [discrete, time], [time, steps], [steps, outputs], [outputs, different], [different,  ], [ , neurons], [neurons, deep], [deep, multilayer], [multilayer, network], [network, (], [(, Fig], [Fig, .]]

>> Trigrams: 
[[consider, outputs, hidden], [outputs, hidden, units], [hidden, units,  ], [units,  , different], [ , different, discrete], [different, discrete, time], [discrete, time, steps], [time, steps, outputs], [steps, outputs, different], [outputs, different,  ], [different,  , neurons], [ , neurons, deep], [neurons, deep, multilayer], [deep, multilayer, network], [multilayer, network, (], [network, (, Fig], [(, Fig, .]]

>> Noun Phrases are: 
[we, the outputs, the hidden units, they, the outputs, different  neurons, a deep multilayer network, Fig]

>> Named Entities are: 
[('Fig', 'ORG')]


============================ Sentence 308 =============================

 5, right), it becomes clear   


>> Tokens are: 
[ , 5, ,, right, ), ,, clear,  ] 

>> PoS Tags are: 
[('\xa0', 'SPACE'), ('5', 'NUM'), (',', 'PUNCT'), ('right', 'INTJ'), (')', 'PUNCT'), (',', 'PUNCT'), ('clear', 'ADJ'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('\xa0', 'dep'), ('5', 'nummod'), (',', 'punct'), ('right', 'amod'), (')', 'punct'), (',', 'punct'), ('clear', 'acomp'), (' ', 'punct')]

>> Bigrams: 
[[ , 5], [5, ,], [,, right], [right, )], [), ,], [,, clear], [clear,  ]]

>> Trigrams: 
[[ , 5, ,], [5, ,, right], [,, right, )], [right, ), ,], [), ,, clear], [,, clear,  ]]

>> Noun Phrases are: 
[it]

>> Named Entities are: 
[]


============================ Sentence 309 =============================

how we can apply backpropagation to train RNNs. 


>> Tokens are: 
[apply, backpropagation, train, RNNs, .] 

>> PoS Tags are: 
[('apply', 'VERB'), ('backpropagation', 'NOUN'), ('train', 'VERB'), ('RNNs', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('apply', 'ROOT'), ('backpropagation', 'dobj'), ('train', 'advcl'), ('RNNs', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[apply, backpropagation], [backpropagation, train], [train, RNNs], [RNNs, .]]

>> Trigrams: 
[[apply, backpropagation, train], [backpropagation, train, RNNs], [train, RNNs, .]]

>> Noun Phrases are: 
[we, backpropagation, RNNs]

>> Named Entities are: 
[]


============================ Sentence 310 =============================

  RNNs are very powerful dynamic systems, but training them has  proved to be problematic because the backpropagated gradients  either grow or shrink at each time step, so over many time steps they  typically explode or vanish77,78.   Thanks to advances in their architecture79,80 and ways of training  them81,82, RNNs have been found to be very good at predicting the  next character in the text83 or the next word in a sequence75, but they  can also be used for more complex tasks. 


>> Tokens are: 
[  , RNNs, powerful, dynamic, systems, ,, training,  , proved, problematic, backpropagated, gradients,  , grow, shrink, time, step, ,, time, steps,  , typically, explode, vanish77,78, .,   , Thanks, advances, architecture79,80, ways, training,  , them81,82, ,, RNNs, found, good, predicting,  , character, text83, word, sequence75, ,,  , complex, tasks, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('RNNs', 'NOUN'), ('powerful', 'ADJ'), ('dynamic', 'ADJ'), ('systems', 'NOUN'), (',', 'PUNCT'), ('training', 'VERB'), (' ', 'SPACE'), ('proved', 'VERB'), ('problematic', 'ADJ'), ('backpropagated', 'VERB'), ('gradients', 'NOUN'), (' ', 'SPACE'), ('grow', 'VERB'), ('shrink', 'VERB'), ('time', 'NOUN'), ('step', 'NOUN'), (',', 'PUNCT'), ('time', 'NOUN'), ('steps', 'NOUN'), (' ', 'SPACE'), ('typically', 'ADV'), ('explode', 'VERB'), ('vanish77,78', 'ADJ'), ('.', 'PUNCT'), ('  ', 'SPACE'), ('Thanks', 'NOUN'), ('advances', 'NOUN'), ('architecture79,80', 'NOUN'), ('ways', 'NOUN'), ('training', 'VERB'), (' ', 'SPACE'), ('them81,82', 'PROPN'), (',', 'PUNCT'), ('RNNs', 'NOUN'), ('found', 'VERB'), ('good', 'ADJ'), ('predicting', 'VERB'), (' ', 'SPACE'), ('character', 'NOUN'), ('text83', 'NOUN'), ('word', 'NOUN'), ('sequence75', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('complex', 'ADJ'), ('tasks', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'compound'), ('RNNs', 'nsubj'), ('powerful', 'amod'), ('dynamic', 'amod'), ('systems', 'attr'), (',', 'punct'), ('training', 'conj'), (' ', 'nsubj'), ('proved', 'ccomp'), ('problematic', 'acomp'), ('backpropagated', 'amod'), ('gradients', 'nsubj'), (' ', 'appos'), ('grow', 'advcl'), ('shrink', 'conj'), ('time', 'compound'), ('step', 'pobj'), (',', 'punct'), ('time', 'compound'), ('steps', 'pobj'), (' ', 'nsubj'), ('typically', 'advmod'), ('explode', 'conj'), ('vanish77,78', 'conj'), ('.', 'punct'), ('  ', 'punct'), ('Thanks', 'npadvmod'), ('advances', 'pobj'), ('architecture79,80', 'pobj'), ('ways', 'conj'), ('training', 'pcomp'), (' ', 'dobj'), ('them81,82', 'dobj'), (',', 'punct'), ('RNNs', 'nsubjpass'), ('found', 'ROOT'), ('good', 'acomp'), ('predicting', 'pcomp'), (' ', 'nmod'), ('character', 'dobj'), ('text83', 'pobj'), ('word', 'conj'), ('sequence75', 'pobj'), (',', 'punct'), (' ', 'nsubjpass'), ('complex', 'amod'), ('tasks', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[  , RNNs], [RNNs, powerful], [powerful, dynamic], [dynamic, systems], [systems, ,], [,, training], [training,  ], [ , proved], [proved, problematic], [problematic, backpropagated], [backpropagated, gradients], [gradients,  ], [ , grow], [grow, shrink], [shrink, time], [time, step], [step, ,], [,, time], [time, steps], [steps,  ], [ , typically], [typically, explode], [explode, vanish77,78], [vanish77,78, .], [.,   ], [  , Thanks], [Thanks, advances], [advances, architecture79,80], [architecture79,80, ways], [ways, training], [training,  ], [ , them81,82], [them81,82, ,], [,, RNNs], [RNNs, found], [found, good], [good, predicting], [predicting,  ], [ , character], [character, text83], [text83, word], [word, sequence75], [sequence75, ,], [,,  ], [ , complex], [complex, tasks], [tasks, .]]

>> Trigrams: 
[[  , RNNs, powerful], [RNNs, powerful, dynamic], [powerful, dynamic, systems], [dynamic, systems, ,], [systems, ,, training], [,, training,  ], [training,  , proved], [ , proved, problematic], [proved, problematic, backpropagated], [problematic, backpropagated, gradients], [backpropagated, gradients,  ], [gradients,  , grow], [ , grow, shrink], [grow, shrink, time], [shrink, time, step], [time, step, ,], [step, ,, time], [,, time, steps], [time, steps,  ], [steps,  , typically], [ , typically, explode], [typically, explode, vanish77,78], [explode, vanish77,78, .], [vanish77,78, .,   ], [.,   , Thanks], [  , Thanks, advances], [Thanks, advances, architecture79,80], [advances, architecture79,80, ways], [architecture79,80, ways, training], [ways, training,  ], [training,  , them81,82], [ , them81,82, ,], [them81,82, ,, RNNs], [,, RNNs, found], [RNNs, found, good], [found, good, predicting], [good, predicting,  ], [predicting,  , character], [ , character, text83], [character, text83, word], [text83, word, sequence75], [word, sequence75, ,], [sequence75, ,,  ], [,,  , complex], [ , complex, tasks], [complex, tasks, .]]

>> Noun Phrases are: 
[  RNNs, very powerful dynamic systems, them, the backpropagated gradients, each time step, many time steps, they, advances, their architecture79,80, ways, them81,82, RNNs, the  next character, the text83, the next word, a sequence75, they, more complex tasks]

>> Named Entities are: 
[('architecture79,80', 'PERSON'), ('sequence75', 'ORG')]


============================ Sentence 311 =============================

For example, after reading  an English sentence one word at a time, an English ‘encoder’ network  can be trained so that the final state vector of its hidden units is a good  representation of the thought expressed by the sentence. 


>> Tokens are: 
[example, ,, reading,  , English, sentence, word, time, ,, English, ‘, encoder, ’, network,  , trained, final, state, vector, hidden, units, good,  , representation, thought, expressed, sentence, .] 

>> PoS Tags are: 
[('example', 'NOUN'), (',', 'PUNCT'), ('reading', 'VERB'), (' ', 'SPACE'), ('English', 'ADJ'), ('sentence', 'NOUN'), ('word', 'NOUN'), ('time', 'NOUN'), (',', 'PUNCT'), ('English', 'PROPN'), ('‘', 'PUNCT'), ('encoder', 'NOUN'), ('’', 'PUNCT'), ('network', 'NOUN'), (' ', 'SPACE'), ('trained', 'VERB'), ('final', 'ADJ'), ('state', 'NOUN'), ('vector', 'NOUN'), ('hidden', 'ADJ'), ('units', 'NOUN'), ('good', 'ADJ'), (' ', 'SPACE'), ('representation', 'NOUN'), ('thought', 'NOUN'), ('expressed', 'VERB'), ('sentence', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('example', 'pobj'), (',', 'punct'), ('reading', 'pcomp'), (' ', 'dative'), ('English', 'amod'), ('sentence', 'dobj'), ('word', 'dobj'), ('time', 'pobj'), (',', 'punct'), ('English', 'nmod'), ('‘', 'punct'), ('encoder', 'nmod'), ('’', 'punct'), ('network', 'nsubjpass'), (' ', 'nsubjpass'), ('trained', 'ROOT'), ('final', 'amod'), ('state', 'compound'), ('vector', 'nsubj'), ('hidden', 'amod'), ('units', 'pobj'), ('good', 'amod'), (' ', 'compound'), ('representation', 'attr'), ('thought', 'pobj'), ('expressed', 'acl'), ('sentence', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[example, ,], [,, reading], [reading,  ], [ , English], [English, sentence], [sentence, word], [word, time], [time, ,], [,, English], [English, ‘], [‘, encoder], [encoder, ’], [’, network], [network,  ], [ , trained], [trained, final], [final, state], [state, vector], [vector, hidden], [hidden, units], [units, good], [good,  ], [ , representation], [representation, thought], [thought, expressed], [expressed, sentence], [sentence, .]]

>> Trigrams: 
[[example, ,, reading], [,, reading,  ], [reading,  , English], [ , English, sentence], [English, sentence, word], [sentence, word, time], [word, time, ,], [time, ,, English], [,, English, ‘], [English, ‘, encoder], [‘, encoder, ’], [encoder, ’, network], [’, network,  ], [network,  , trained], [ , trained, final], [trained, final, state], [final, state, vector], [state, vector, hidden], [vector, hidden, units], [hidden, units, good], [units, good,  ], [good,  , representation], [ , representation, thought], [representation, thought, expressed], [thought, expressed, sentence], [expressed, sentence, .]]

>> Noun Phrases are: 
[example, an English sentence, one word, a time, an English ‘encoder’ network, the final state vector, its hidden units, a good  representation, the thought, the sentence]

>> Named Entities are: 
[('English', 'LANGUAGE'), ('English', 'LANGUAGE')]


============================ Sentence 312 =============================

This thought  vector can then be used as the initial hidden state of (or as extra input  to) a jointly trained French ‘decoder’ network, which outputs a prob- ability distribution for the first word of the French translation. 


>> Tokens are: 
[thought,  , vector, initial, hidden, state, (, extra, input,  , ), jointly, trained, French, ‘, decoder, ’, network, ,, outputs, prob-, ability, distribution, word, French, translation, .] 

>> PoS Tags are: 
[('thought', 'VERB'), (' ', 'SPACE'), ('vector', 'NOUN'), ('initial', 'ADJ'), ('hidden', 'VERB'), ('state', 'NOUN'), ('(', 'PUNCT'), ('extra', 'ADJ'), ('input', 'NOUN'), (' ', 'SPACE'), (')', 'PUNCT'), ('jointly', 'ADV'), ('trained', 'VERB'), ('French', 'ADJ'), ('‘', 'PUNCT'), ('decoder', 'NOUN'), ('’', 'PUNCT'), ('network', 'NOUN'), (',', 'PUNCT'), ('outputs', 'VERB'), ('prob-', 'NOUN'), ('ability', 'NOUN'), ('distribution', 'NOUN'), ('word', 'NOUN'), ('French', 'ADJ'), ('translation', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('thought', 'ROOT'), (' ', 'compound'), ('vector', 'nsubjpass'), ('initial', 'amod'), ('hidden', 'amod'), ('state', 'pobj'), ('(', 'punct'), ('extra', 'amod'), ('input', 'pobj'), (' ', 'pobj'), (')', 'punct'), ('jointly', 'advmod'), ('trained', 'amod'), ('French', 'amod'), ('‘', 'punct'), ('decoder', 'nmod'), ('’', 'punct'), ('network', 'pobj'), (',', 'punct'), ('outputs', 'relcl'), ('prob-', 'compound'), ('ability', 'compound'), ('distribution', 'dobj'), ('word', 'pobj'), ('French', 'amod'), ('translation', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[thought,  ], [ , vector], [vector, initial], [initial, hidden], [hidden, state], [state, (], [(, extra], [extra, input], [input,  ], [ , )], [), jointly], [jointly, trained], [trained, French], [French, ‘], [‘, decoder], [decoder, ’], [’, network], [network, ,], [,, outputs], [outputs, prob-], [prob-, ability], [ability, distribution], [distribution, word], [word, French], [French, translation], [translation, .]]

>> Trigrams: 
[[thought,  , vector], [ , vector, initial], [vector, initial, hidden], [initial, hidden, state], [hidden, state, (], [state, (, extra], [(, extra, input], [extra, input,  ], [input,  , )], [ , ), jointly], [), jointly, trained], [jointly, trained, French], [trained, French, ‘], [French, ‘, decoder], [‘, decoder, ’], [decoder, ’, network], [’, network, ,], [network, ,, outputs], [,, outputs, prob-], [outputs, prob-, ability], [prob-, ability, distribution], [ability, distribution, word], [distribution, word, French], [word, French, translation], [French, translation, .]]

>> Noun Phrases are: 
[ vector, the initial hidden state, extra input, a jointly trained French ‘decoder’ network, a prob- ability distribution, the first word, the French translation]

>> Named Entities are: 
[('French', 'NORP'), ('French', 'NORP')]


============================ Sentence 313 =============================

If a  particular first word is chosen from this distribution and provided  as input to the decoder network it will then output a probability dis- tribution for the second word of the translation and so on until a  full stop is chosen17,72,76. 


>> Tokens are: 
[ , particular, word, chosen, distribution, provided,  , input, decoder, network, output, probability, dis-, tribution, second, word, translation,  , stop, chosen17,72,76, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('particular', 'ADJ'), ('word', 'NOUN'), ('chosen', 'VERB'), ('distribution', 'NOUN'), ('provided', 'VERB'), (' ', 'SPACE'), ('input', 'NOUN'), ('decoder', 'NOUN'), ('network', 'NOUN'), ('output', 'VERB'), ('probability', 'NOUN'), ('dis-', 'NOUN'), ('tribution', 'NOUN'), ('second', 'ADJ'), ('word', 'NOUN'), ('translation', 'NOUN'), (' ', 'SPACE'), ('stop', 'NOUN'), ('chosen17,72,76', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'nmod'), ('particular', 'amod'), ('word', 'nsubjpass'), ('chosen', 'advcl'), ('distribution', 'pobj'), ('provided', 'conj'), (' ', 'dobj'), ('input', 'pobj'), ('decoder', 'compound'), ('network', 'pobj'), ('output', 'ROOT'), ('probability', 'compound'), ('dis-', 'compound'), ('tribution', 'dobj'), ('second', 'amod'), ('word', 'pobj'), ('translation', 'pobj'), (' ', 'nmod'), ('stop', 'nsubj'), ('chosen17,72,76', 'attr'), ('.', 'punct')]

>> Bigrams: 
[[ , particular], [particular, word], [word, chosen], [chosen, distribution], [distribution, provided], [provided,  ], [ , input], [input, decoder], [decoder, network], [network, output], [output, probability], [probability, dis-], [dis-, tribution], [tribution, second], [second, word], [word, translation], [translation,  ], [ , stop], [stop, chosen17,72,76], [chosen17,72,76, .]]

>> Trigrams: 
[[ , particular, word], [particular, word, chosen], [word, chosen, distribution], [chosen, distribution, provided], [distribution, provided,  ], [provided,  , input], [ , input, decoder], [input, decoder, network], [decoder, network, output], [network, output, probability], [output, probability, dis-], [probability, dis-, tribution], [dis-, tribution, second], [tribution, second, word], [second, word, translation], [word, translation,  ], [translation,  , stop], [ , stop, chosen17,72,76], [stop, chosen17,72,76, .]]

>> Noun Phrases are: 
[a  particular first word, this distribution, input, the decoder network, it, a probability dis- tribution, the second word, the translation, a  full stop, chosen17,72,76]

>> Named Entities are: 
[]


============================ Sentence 314 =============================

Overall, this process generates sequences of  French words according to a probability distribution that depends on  the English sentence. 


>> Tokens are: 
[Overall, ,, process, generates, sequences,  , French, words, according, probability, distribution, depends,  , English, sentence, .] 

>> PoS Tags are: 
[('Overall', 'ADV'), (',', 'PUNCT'), ('process', 'NOUN'), ('generates', 'VERB'), ('sequences', 'NOUN'), (' ', 'SPACE'), ('French', 'ADJ'), ('words', 'NOUN'), ('according', 'VERB'), ('probability', 'NOUN'), ('distribution', 'NOUN'), ('depends', 'VERB'), (' ', 'SPACE'), ('English', 'ADJ'), ('sentence', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Overall', 'advmod'), (',', 'punct'), ('process', 'nsubj'), ('generates', 'ROOT'), ('sequences', 'dobj'), (' ', 'nmod'), ('French', 'amod'), ('words', 'pobj'), ('according', 'prep'), ('probability', 'compound'), ('distribution', 'pobj'), ('depends', 'relcl'), (' ', 'pobj'), ('English', 'amod'), ('sentence', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Overall, ,], [,, process], [process, generates], [generates, sequences], [sequences,  ], [ , French], [French, words], [words, according], [according, probability], [probability, distribution], [distribution, depends], [depends,  ], [ , English], [English, sentence], [sentence, .]]

>> Trigrams: 
[[Overall, ,, process], [,, process, generates], [process, generates, sequences], [generates, sequences,  ], [sequences,  , French], [ , French, words], [French, words, according], [words, according, probability], [according, probability, distribution], [probability, distribution, depends], [distribution, depends,  ], [depends,  , English], [ , English, sentence], [English, sentence, .]]

>> Noun Phrases are: 
[this process, sequences,  French words, a probability distribution, the English sentence]

>> Named Entities are: 
[('French', 'NORP'), ('English', 'LANGUAGE')]


============================ Sentence 315 =============================

This rather naive way of performing machine  translation has quickly become competitive with the state-of-the-art,  and this raises serious doubts about whether understanding a sen- tence requires anything like the internal symbolic expressions that are  manipulated by using inference rules. 


>> Tokens are: 
[naive, way, performing, machine,  , translation, quickly, competitive, state, -, -, -, art, ,,  , raises, doubts, understanding, sen-, tence, requires, like, internal, symbolic, expressions,  , manipulated, inference, rules, .] 

>> PoS Tags are: 
[('naive', 'ADJ'), ('way', 'NOUN'), ('performing', 'VERB'), ('machine', 'NOUN'), (' ', 'SPACE'), ('translation', 'NOUN'), ('quickly', 'ADV'), ('competitive', 'ADJ'), ('state', 'NOUN'), ('-', 'PUNCT'), ('-', 'PUNCT'), ('-', 'PUNCT'), ('art', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('raises', 'VERB'), ('doubts', 'NOUN'), ('understanding', 'VERB'), ('sen-', 'ADJ'), ('tence', 'NOUN'), ('requires', 'VERB'), ('like', 'ADP'), ('internal', 'ADJ'), ('symbolic', 'ADJ'), ('expressions', 'NOUN'), (' ', 'SPACE'), ('manipulated', 'VERB'), ('inference', 'NOUN'), ('rules', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('naive', 'amod'), ('way', 'nsubj'), ('performing', 'pcomp'), ('machine', 'compound'), (' ', 'compound'), ('translation', 'dobj'), ('quickly', 'advmod'), ('competitive', 'acomp'), ('state', 'nmod'), ('-', 'punct'), ('-', 'punct'), ('-', 'punct'), ('art', 'pobj'), (',', 'punct'), (' ', 'pobj'), ('raises', 'conj'), ('doubts', 'dobj'), ('understanding', 'csubj'), ('sen-', 'amod'), ('tence', 'dobj'), ('requires', 'pcomp'), ('like', 'prep'), ('internal', 'amod'), ('symbolic', 'amod'), ('expressions', 'pobj'), (' ', 'dep'), ('manipulated', 'relcl'), ('inference', 'compound'), ('rules', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[naive, way], [way, performing], [performing, machine], [machine,  ], [ , translation], [translation, quickly], [quickly, competitive], [competitive, state], [state, -], [-, -], [-, -], [-, art], [art, ,], [,,  ], [ , raises], [raises, doubts], [doubts, understanding], [understanding, sen-], [sen-, tence], [tence, requires], [requires, like], [like, internal], [internal, symbolic], [symbolic, expressions], [expressions,  ], [ , manipulated], [manipulated, inference], [inference, rules], [rules, .]]

>> Trigrams: 
[[naive, way, performing], [way, performing, machine], [performing, machine,  ], [machine,  , translation], [ , translation, quickly], [translation, quickly, competitive], [quickly, competitive, state], [competitive, state, -], [state, -, -], [-, -, -], [-, -, art], [-, art, ,], [art, ,,  ], [,,  , raises], [ , raises, doubts], [raises, doubts, understanding], [doubts, understanding, sen-], [understanding, sen-, tence], [sen-, tence, requires], [tence, requires, like], [requires, like, internal], [like, internal, symbolic], [internal, symbolic, expressions], [symbolic, expressions,  ], [expressions,  , manipulated], [ , manipulated, inference], [manipulated, inference, rules], [inference, rules, .]]

>> Noun Phrases are: 
[This rather naive way, machine  translation, the-art, serious doubts, a sen- tence, anything, the internal symbolic expressions, inference rules]

>> Named Entities are: 
[]


============================ Sentence 316 =============================

It is more compatible with the  view that everyday reasoning involves many simultaneous analogies   Figure 4 | Visualizing the learned word vectors. 


>> Tokens are: 
[compatible,  , view, everyday, reasoning, involves, simultaneous, analogies,   , Figure, 4, |, Visualizing, learned, word, vectors, .] 

>> PoS Tags are: 
[('compatible', 'ADJ'), (' ', 'SPACE'), ('view', 'NOUN'), ('everyday', 'ADJ'), ('reasoning', 'NOUN'), ('involves', 'VERB'), ('simultaneous', 'ADJ'), ('analogies', 'NOUN'), ('  ', 'SPACE'), ('Figure', 'NOUN'), ('4', 'NUM'), ('|', 'NOUN'), ('Visualizing', 'VERB'), ('learned', 'VERB'), ('word', 'NOUN'), ('vectors', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('compatible', 'acomp'), (' ', 'compound'), ('view', 'pobj'), ('everyday', 'amod'), ('reasoning', 'nsubj'), ('involves', 'ccomp'), ('simultaneous', 'amod'), ('analogies', 'dobj'), ('  ', 'compound'), ('Figure', 'appos'), ('4', 'nummod'), ('|', 'npadvmod'), ('Visualizing', 'advcl'), ('learned', 'amod'), ('word', 'compound'), ('vectors', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[compatible,  ], [ , view], [view, everyday], [everyday, reasoning], [reasoning, involves], [involves, simultaneous], [simultaneous, analogies], [analogies,   ], [  , Figure], [Figure, 4], [4, |], [|, Visualizing], [Visualizing, learned], [learned, word], [word, vectors], [vectors, .]]

>> Trigrams: 
[[compatible,  , view], [ , view, everyday], [view, everyday, reasoning], [everyday, reasoning, involves], [reasoning, involves, simultaneous], [involves, simultaneous, analogies], [simultaneous, analogies,   ], [analogies,   , Figure], [  , Figure, 4], [Figure, 4, |], [4, |, Visualizing], [|, Visualizing, learned], [Visualizing, learned, word], [learned, word, vectors], [word, vectors, .]]

>> Noun Phrases are: 
[It, the  view, everyday reasoning, many simultaneous analogies,   Figure, the learned word vectors]

>> Named Entities are: 
[('4', 'CARDINAL')]


============================ Sentence 317 =============================

On the left is an illustration  of word representations learned for modelling language, non-linearly projected  to 2D for visualization using the t-SNE algorithm103. 


>> Tokens are: 
[left, illustration,  , word, representations, learned, modelling, language, ,, non, -, linearly, projected,  , 2D, visualization, t, -, SNE, algorithm103, .] 

>> PoS Tags are: 
[('left', 'NOUN'), ('illustration', 'NOUN'), (' ', 'SPACE'), ('word', 'NOUN'), ('representations', 'NOUN'), ('learned', 'VERB'), ('modelling', 'VERB'), ('language', 'NOUN'), (',', 'PUNCT'), ('non', 'ADJ'), ('-', 'ADJ'), ('linearly', 'ADV'), ('projected', 'VERB'), (' ', 'SPACE'), ('2D', 'VERB'), ('visualization', 'NOUN'), ('t', 'NOUN'), ('-', 'PUNCT'), ('SNE', 'PROPN'), ('algorithm103', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('left', 'pobj'), ('illustration', 'attr'), (' ', 'nsubj'), ('word', 'compound'), ('representations', 'pobj'), ('learned', 'relcl'), ('modelling', 'pcomp'), ('language', 'dobj'), (',', 'punct'), ('non', 'amod'), ('-', 'advmod'), ('linearly', 'advmod'), ('projected', 'conj'), (' ', 'dobj'), ('2D', 'xcomp'), ('visualization', 'pobj'), ('t', 'compound'), ('-', 'punct'), ('SNE', 'compound'), ('algorithm103', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[left, illustration], [illustration,  ], [ , word], [word, representations], [representations, learned], [learned, modelling], [modelling, language], [language, ,], [,, non], [non, -], [-, linearly], [linearly, projected], [projected,  ], [ , 2D], [2D, visualization], [visualization, t], [t, -], [-, SNE], [SNE, algorithm103], [algorithm103, .]]

>> Trigrams: 
[[left, illustration,  ], [illustration,  , word], [ , word, representations], [word, representations, learned], [representations, learned, modelling], [learned, modelling, language], [modelling, language, ,], [language, ,, non], [,, non, -], [non, -, linearly], [-, linearly, projected], [linearly, projected,  ], [projected,  , 2D], [ , 2D, visualization], [2D, visualization, t], [visualization, t, -], [t, -, SNE], [-, SNE, algorithm103], [SNE, algorithm103, .]]

>> Noun Phrases are: 
[the left, an illustration, word representations, language, visualization, the t-SNE algorithm103]

>> Named Entities are: 
[('2D', 'CARDINAL')]


============================ Sentence 318 =============================

On the right is a 2D  representation of phrases learned by an English-to-French encoder–decoder  recurrent neural network75. 


>> Tokens are: 
[right, 2D,  , representation, phrases, learned, English, -, -, French, encoder, –, decoder,  , recurrent, neural, network75, .] 

>> PoS Tags are: 
[('right', 'NOUN'), ('2D', 'NOUN'), (' ', 'SPACE'), ('representation', 'NOUN'), ('phrases', 'NOUN'), ('learned', 'VERB'), ('English', 'PROPN'), ('-', 'PUNCT'), ('-', 'PUNCT'), ('French', 'ADJ'), ('encoder', 'NOUN'), ('–', 'PUNCT'), ('decoder', 'NOUN'), (' ', 'SPACE'), ('recurrent', 'ADJ'), ('neural', 'ADJ'), ('network75', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('right', 'pobj'), ('2D', 'attr'), (' ', 'prep'), ('representation', 'attr'), ('phrases', 'pobj'), ('learned', 'acl'), ('English', 'nmod'), ('-', 'punct'), ('-', 'punct'), ('French', 'pobj'), ('encoder', 'pobj'), ('–', 'punct'), ('decoder', 'conj'), (' ', 'punct'), ('recurrent', 'amod'), ('neural', 'amod'), ('network75', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[right, 2D], [2D,  ], [ , representation], [representation, phrases], [phrases, learned], [learned, English], [English, -], [-, -], [-, French], [French, encoder], [encoder, –], [–, decoder], [decoder,  ], [ , recurrent], [recurrent, neural], [neural, network75], [network75, .]]

>> Trigrams: 
[[right, 2D,  ], [2D,  , representation], [ , representation, phrases], [representation, phrases, learned], [phrases, learned, English], [learned, English, -], [English, -, -], [-, -, French], [-, French, encoder], [French, encoder, –], [encoder, –, decoder], [–, decoder,  ], [decoder,  , recurrent], [ , recurrent, neural], [recurrent, neural, network75], [neural, network75, .]]

>> Noun Phrases are: 
[the right, a 2D, representation, phrases, an English-to-French encoder, decoder, recurrent neural network75]

>> Named Entities are: 
[('2D', 'CARDINAL'), ('English', 'LANGUAGE'), ('French', 'NORP'), ('network75', 'GPE')]


============================ Sentence 319 =============================

One can observe that semantically similar words   or sequences of words are mapped to nearby representations. 


>> Tokens are: 
[observe, semantically, similar, words,   , sequences, words, mapped, nearby, representations, .] 

>> PoS Tags are: 
[('observe', 'VERB'), ('semantically', 'ADV'), ('similar', 'ADJ'), ('words', 'NOUN'), ('  ', 'SPACE'), ('sequences', 'NOUN'), ('words', 'NOUN'), ('mapped', 'VERB'), ('nearby', 'ADJ'), ('representations', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('observe', 'ROOT'), ('semantically', 'advmod'), ('similar', 'amod'), ('words', 'nsubjpass'), ('  ', 'appos'), ('sequences', 'conj'), ('words', 'pobj'), ('mapped', 'ccomp'), ('nearby', 'amod'), ('representations', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[observe, semantically], [semantically, similar], [similar, words], [words,   ], [  , sequences], [sequences, words], [words, mapped], [mapped, nearby], [nearby, representations], [representations, .]]

>> Trigrams: 
[[observe, semantically, similar], [semantically, similar, words], [similar, words,   ], [words,   , sequences], [  , sequences, words], [sequences, words, mapped], [words, mapped, nearby], [mapped, nearby, representations], [nearby, representations, .]]

>> Noun Phrases are: 
[One, semantically similar words, sequences, words, nearby representations]

>> Named Entities are: 
[]


============================ Sentence 320 =============================

The distributed  representations of words are obtained by using backpropagation to jointly learn  a representation for each word and a function that predicts a target quantity  such as the next word in a sequence (for language modelling) or a whole  sequence of translated words (for machine translation)18,75. 


>> Tokens are: 
[distributed,  , representations, words, obtained, backpropagation, jointly, learn,  , representation, word, function, predicts, target, quantity,  , word, sequence, (, language, modelling, ),  , sequence, translated, words, (, machine, translation)18,75, .] 

>> PoS Tags are: 
[('distributed', 'VERB'), (' ', 'SPACE'), ('representations', 'NOUN'), ('words', 'NOUN'), ('obtained', 'VERB'), ('backpropagation', 'NOUN'), ('jointly', 'ADV'), ('learn', 'VERB'), (' ', 'SPACE'), ('representation', 'NOUN'), ('word', 'NOUN'), ('function', 'NOUN'), ('predicts', 'VERB'), ('target', 'NOUN'), ('quantity', 'NOUN'), (' ', 'SPACE'), ('word', 'NOUN'), ('sequence', 'NOUN'), ('(', 'PUNCT'), ('language', 'NOUN'), ('modelling', 'NOUN'), (')', 'PUNCT'), (' ', 'SPACE'), ('sequence', 'NOUN'), ('translated', 'VERB'), ('words', 'NOUN'), ('(', 'PUNCT'), ('machine', 'NOUN'), ('translation)18,75', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('distributed', 'amod'), (' ', 'prep'), ('representations', 'nsubjpass'), ('words', 'pobj'), ('obtained', 'ROOT'), ('backpropagation', 'dobj'), ('jointly', 'advmod'), ('learn', 'xcomp'), (' ', 'dative'), ('representation', 'dobj'), ('word', 'pobj'), ('function', 'conj'), ('predicts', 'relcl'), ('target', 'compound'), ('quantity', 'dobj'), (' ', 'appos'), ('word', 'pobj'), ('sequence', 'pobj'), ('(', 'punct'), ('language', 'compound'), ('modelling', 'pobj'), (')', 'punct'), (' ', 'compound'), ('sequence', 'conj'), ('translated', 'amod'), ('words', 'pobj'), ('(', 'punct'), ('machine', 'compound'), ('translation)18,75', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[distributed,  ], [ , representations], [representations, words], [words, obtained], [obtained, backpropagation], [backpropagation, jointly], [jointly, learn], [learn,  ], [ , representation], [representation, word], [word, function], [function, predicts], [predicts, target], [target, quantity], [quantity,  ], [ , word], [word, sequence], [sequence, (], [(, language], [language, modelling], [modelling, )], [),  ], [ , sequence], [sequence, translated], [translated, words], [words, (], [(, machine], [machine, translation)18,75], [translation)18,75, .]]

>> Trigrams: 
[[distributed,  , representations], [ , representations, words], [representations, words, obtained], [words, obtained, backpropagation], [obtained, backpropagation, jointly], [backpropagation, jointly, learn], [jointly, learn,  ], [learn,  , representation], [ , representation, word], [representation, word, function], [word, function, predicts], [function, predicts, target], [predicts, target, quantity], [target, quantity,  ], [quantity,  , word], [ , word, sequence], [word, sequence, (], [sequence, (, language], [(, language, modelling], [language, modelling, )], [modelling, ),  ], [),  , sequence], [ , sequence, translated], [sequence, translated, words], [translated, words, (], [words, (, machine], [(, machine, translation)18,75], [machine, translation)18,75, .]]

>> Noun Phrases are: 
[The distributed  representations, words, backpropagation, a representation, each word, a function, a target quantity, the next word, a sequence, language modelling, a whole  sequence, translated words, machine translation)18,75]

>> Named Entities are: 
[]


============================ Sentence 321 =============================

 −37 −36 


>> Tokens are: 
[ , −37, −36] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('−37', 'X'), ('−36', 'NOUN')] 

>> Dependency Tags are: 
[(' ', 'compound'), ('−37', 'compound'), ('−36', 'ROOT')]

>> Bigrams: 
[[ , −37], [−37, −36]]

>> Trigrams: 
[[ , −37, −36]]

>> Noun Phrases are: 
[ −37 −36]

>> Named Entities are: 
[]


============================ Sentence 322 =============================

−35 −34 −33 −32 −31 −30 −29  9  10  10.5  11  11.5  12  12.5  13  13.5  14   community   organizations  institutions   society  industry   company   organization   school   companies   Community   o 


>> Tokens are: 
[−35, −34, −33, −32, −31, −30, −29,  , 9,  , 10,  , 10.5,  , 11,  , 11.5,  , 12,  , 12.5,  , 13,  , 13.5,  , 14,   , community,   , organizations,  , institutions,   , society,  , industry,   , company,   , organization,   , school,   , companies,   , Community,   , o] 

>> PoS Tags are: 
[('−35', 'PROPN'), ('−34', 'ADJ'), ('−33', 'X'), ('−32', 'PROPN'), ('−31', 'X'), ('−30', 'PROPN'), ('−29', 'ADP'), (' ', 'SPACE'), ('9', 'NUM'), (' ', 'SPACE'), ('10', 'NUM'), (' ', 'SPACE'), ('10.5', 'NUM'), (' ', 'SPACE'), ('11', 'NUM'), (' ', 'SPACE'), ('11.5', 'NUM'), (' ', 'SPACE'), ('12', 'NUM'), (' ', 'SPACE'), ('12.5', 'NUM'), (' ', 'SPACE'), ('13', 'NUM'), (' ', 'SPACE'), ('13.5', 'NUM'), (' ', 'SPACE'), ('14', 'NUM'), ('  ', 'SPACE'), ('community', 'NOUN'), ('  ', 'SPACE'), ('organizations', 'NOUN'), (' ', 'SPACE'), ('institutions', 'NOUN'), ('  ', 'SPACE'), ('society', 'NOUN'), (' ', 'SPACE'), ('industry', 'NOUN'), ('  ', 'SPACE'), ('company', 'NOUN'), ('  ', 'SPACE'), ('organization', 'NOUN'), ('  ', 'SPACE'), ('school', 'NOUN'), ('  ', 'SPACE'), ('companies', 'NOUN'), ('  ', 'SPACE'), ('Community', 'PROPN'), ('  ', 'SPACE'), ('o', 'NOUN')] 

>> Dependency Tags are: 
[('−35', 'nmod'), ('−34', 'amod'), ('−33', 'nmod'), ('−32', 'dep'), ('−31', 'amod'), ('−30', 'dobj'), ('−29', 'prep'), (' ', 'pobj'), ('9', 'nummod'), (' ', 'dobj'), ('10', 'nummod'), (' ', 'npadvmod'), ('10.5', 'nummod'), (' ', 'dobj'), ('11', 'nummod'), (' ', 'appos'), ('11.5', 'nummod'), (' ', 'dobj'), ('12', 'nummod'), (' ', 'appos'), ('12.5', 'nummod'), (' ', 'dobj'), ('13', 'nummod'), (' ', 'appos'), ('13.5', 'nummod'), (' ', 'appos'), ('14', 'nummod'), ('  ', 'appos'), ('community', 'nmod'), ('  ', 'compound'), ('organizations', 'nmod'), (' ', 'appos'), ('institutions', 'nsubj'), ('  ', 'nmod'), ('society', 'appos'), (' ', 'nmod'), ('industry', 'compound'), ('  ', 'nummod'), ('company', 'nmod'), ('  ', 'nummod'), ('organization', 'nmod'), ('  ', 'compound'), ('school', 'compound'), ('  ', 'nummod'), ('companies', 'appos'), ('  ', 'nmod'), ('Community', 'compound'), ('  ', 'ROOT'), ('o', 'punct')]

>> Bigrams: 
[[−35, −34], [−34, −33], [−33, −32], [−32, −31], [−31, −30], [−30, −29], [−29,  ], [ , 9], [9,  ], [ , 10], [10,  ], [ , 10.5], [10.5,  ], [ , 11], [11,  ], [ , 11.5], [11.5,  ], [ , 12], [12,  ], [ , 12.5], [12.5,  ], [ , 13], [13,  ], [ , 13.5], [13.5,  ], [ , 14], [14,   ], [  , community], [community,   ], [  , organizations], [organizations,  ], [ , institutions], [institutions,   ], [  , society], [society,  ], [ , industry], [industry,   ], [  , company], [company,   ], [  , organization], [organization,   ], [  , school], [school,   ], [  , companies], [companies,   ], [  , Community], [Community,   ], [  , o]]

>> Trigrams: 
[[−35, −34, −33], [−34, −33, −32], [−33, −32, −31], [−32, −31, −30], [−31, −30, −29], [−30, −29,  ], [−29,  , 9], [ , 9,  ], [9,  , 10], [ , 10,  ], [10,  , 10.5], [ , 10.5,  ], [10.5,  , 11], [ , 11,  ], [11,  , 11.5], [ , 11.5,  ], [11.5,  , 12], [ , 12,  ], [12,  , 12.5], [ , 12.5,  ], [12.5,  , 13], [ , 13,  ], [13,  , 13.5], [ , 13.5,  ], [13.5,  , 14], [ , 14,   ], [14,   , community], [  , community,   ], [community,   , organizations], [  , organizations,  ], [organizations,  , institutions], [ , institutions,   ], [institutions,   , society], [  , society,  ], [society,  , industry], [ , industry,   ], [industry,   , company], [  , company,   ], [company,   , organization], [  , organization,   ], [organization,   , school], [  , school,   ], [school,   , companies], [  , companies,   ], [companies,   , Community], [  , Community,   ], [Community,   , o]]

>> Noun Phrases are: 
[−31 −30,   society,  industry   company   organization   school   companies]

>> Named Entities are: 
[('9', 'CARDINAL'), ('10.5', 'CARDINAL'), ('11', 'CARDINAL'), ('11.5', 'CARDINAL'), ('12', 'CARDINAL'), ('12.5', 'CARDINAL'), ('13', 'CARDINAL'), ('13.5', 'CARDINAL'), ('14', 'CARDINAL')]


============================ Sentence 323 =============================

�ce   Agency   communities   Association   body   schools   agencies  −5.5 −5 −4.5 −4 −3.5 −3 −2.5 −2 −4.2  −4  −3.8  −3.6  −3.4  −3.2  −3  −2.8  −2.6  −2.4  −2.2  over the past few months   


>> Tokens are: 
[�, ce,   , Agency,   , communities,   , Association,   , body,   , schools,   , agencies,  , −5.5, −5, −4.5, −4, −3.5, −3, −2.5, −2, −4.2,  , −4,  , −3.8,  , −3.6,  , −3.4,  , −3.2,  , −3,  , −2.8,  , −2.6,  , −2.4,  , −2.2,  , past, months,  ] 

>> PoS Tags are: 
[('�', 'NOUN'), ('ce', 'INTJ'), ('  ', 'SPACE'), ('Agency', 'PROPN'), ('  ', 'SPACE'), ('communities', 'NOUN'), ('  ', 'SPACE'), ('Association', 'PROPN'), ('  ', 'SPACE'), ('body', 'NOUN'), ('  ', 'SPACE'), ('schools', 'NOUN'), ('  ', 'SPACE'), ('agencies', 'NOUN'), (' ', 'SPACE'), ('−5.5', 'PROPN'), ('−5', 'PUNCT'), ('−4.5', 'PROPN'), ('−4', 'PUNCT'), ('−3.5', 'PROPN'), ('−3', 'PROPN'), ('−2.5', 'PROPN'), ('−2', 'NOUN'), ('−4.2', 'NOUN'), (' ', 'SPACE'), ('−4', 'ADP'), (' ', 'SPACE'), ('−3.8', 'PROPN'), (' ', 'SPACE'), ('−3.6', 'PROPN'), (' ', 'SPACE'), ('−3.4', 'PROPN'), (' ', 'SPACE'), ('−3.2', 'X'), (' ', 'SPACE'), ('−3', 'ADJ'), (' ', 'SPACE'), ('−2.8', 'NOUN'), (' ', 'SPACE'), ('−2.6', 'PROPN'), (' ', 'SPACE'), ('−2.4', 'NOUN'), (' ', 'SPACE'), ('−2.2', 'PROPN'), (' ', 'SPACE'), ('past', 'ADJ'), ('months', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('�', 'compound'), ('ce', 'nsubj'), ('  ', 'nmod'), ('Agency', 'compound'), ('  ', 'nsubj'), ('communities', 'dep'), ('  ', 'compound'), ('Association', 'dobj'), ('  ', 'compound'), ('body', 'appos'), ('  ', 'appos'), ('schools', 'nmod'), ('  ', 'nummod'), ('agencies', 'ROOT'), (' ', 'appos'), ('−5.5', 'appos'), ('−5', 'punct'), ('−4.5', 'appos'), ('−4', 'prep'), ('−3.5', 'compound'), ('−3', 'compound'), ('−2.5', 'compound'), ('−2', 'compound'), ('−4.2', 'appos'), (' ', 'appos'), ('−4', 'prep'), (' ', 'pobj'), ('−3.8', 'appos'), (' ', 'appos'), ('−3.6', 'appos'), (' ', 'appos'), ('−3.4', 'prep'), (' ', 'dobj'), ('−3.2', 'appos'), (' ', 'dobj'), ('−3', 'nmod'), (' ', 'compound'), ('−2.8', 'appos'), (' ', 'appos'), ('−2.6', 'appos'), (' ', 'punct'), ('−2.4', 'nmod'), (' ', 'compound'), ('−2.2', 'appos'), (' ', 'appos'), ('past', 'amod'), ('months', 'pobj'), (' ', 'appos')]

>> Bigrams: 
[[�, ce], [ce,   ], [  , Agency], [Agency,   ], [  , communities], [communities,   ], [  , Association], [Association,   ], [  , body], [body,   ], [  , schools], [schools,   ], [  , agencies], [agencies,  ], [ , −5.5], [−5.5, −5], [−5, −4.5], [−4.5, −4], [−4, −3.5], [−3.5, −3], [−3, −2.5], [−2.5, −2], [−2, −4.2], [−4.2,  ], [ , −4], [−4,  ], [ , −3.8], [−3.8,  ], [ , −3.6], [−3.6,  ], [ , −3.4], [−3.4,  ], [ , −3.2], [−3.2,  ], [ , −3], [−3,  ], [ , −2.8], [−2.8,  ], [ , −2.6], [−2.6,  ], [ , −2.4], [−2.4,  ], [ , −2.2], [−2.2,  ], [ , past], [past, months], [months,  ]]

>> Trigrams: 
[[�, ce,   ], [ce,   , Agency], [  , Agency,   ], [Agency,   , communities], [  , communities,   ], [communities,   , Association], [  , Association,   ], [Association,   , body], [  , body,   ], [body,   , schools], [  , schools,   ], [schools,   , agencies], [  , agencies,  ], [agencies,  , −5.5], [ , −5.5, −5], [−5.5, −5, −4.5], [−5, −4.5, −4], [−4.5, −4, −3.5], [−4, −3.5, −3], [−3.5, −3, −2.5], [−3, −2.5, −2], [−2.5, −2, −4.2], [−2, −4.2,  ], [−4.2,  , −4], [ , −4,  ], [−4,  , −3.8], [ , −3.8,  ], [−3.8,  , −3.6], [ , −3.6,  ], [−3.6,  , −3.4], [ , −3.4,  ], [−3.4,  , −3.2], [ , −3.2,  ], [−3.2,  , −3], [ , −3,  ], [−3,  , −2.8], [ , −2.8,  ], [−2.8,  , −2.6], [ , −2.6,  ], [−2.6,  , −2.4], [ , −2.4,  ], [−2.4,  , −2.2], [ , −2.2,  ], [−2.2,  , past], [ , past, months], [past, months,  ]]

>> Noun Phrases are: 
[  Association,   body, −5.5, −4.5, −3.5 −3 −2.5 −2 −4.2, −3.8, −3.6, −3  −2.8, −2.6, −2.4  −2.2, the past few months]

>> Named Entities are: 
[('the past few months', 'DATE')]


============================ Sentence 324 =============================

that a few days   


>> Tokens are: 
[days,  ] 

>> PoS Tags are: 
[('days', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('days', 'npadvmod'), (' ', 'meta')]

>> Bigrams: 
[[days,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 325 =============================

In the last few daysthe past few days   


>> Tokens are: 
[daysthe, past, days,  ] 

>> PoS Tags are: 
[('daysthe', 'ADJ'), ('past', 'ADJ'), ('days', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('daysthe', 'amod'), ('past', 'amod'), ('days', 'pobj'), (' ', 'punct')]

>> Bigrams: 
[[daysthe, past], [past, days], [days,  ]]

>> Trigrams: 
[[daysthe, past, days], [past, days,  ]]

>> Noun Phrases are: 
[the last few daysthe past few days]

>> Named Entities are: 
[('daysthe past few days', 'DATE')]


============================ Sentence 326 =============================

In a few months  in the coming months  a few months ago  &quot; the two groups  of the two groups  over the last few months  dispute between the two  the last two decades  the next six months  two months before being for nearly two months  over the last two decades  within a few months  2 8  M A Y  2 0 1 5  |  V O L  5 2 1  |   


>> Tokens are: 
[months,  , coming, months,  , months, ago,  , &, quot, ;, groups,  , groups,  , months,  , dispute,  , decades,  , months,  , months, nearly, months,  , decades,  , months,  , 2, 8,  , M, Y,  , 2, 0, 1, 5,  , |,  , V, O, L,  , 5, 2, 1,  , |,  ] 

>> PoS Tags are: 
[('months', 'NOUN'), (' ', 'SPACE'), ('coming', 'VERB'), ('months', 'NOUN'), (' ', 'SPACE'), ('months', 'NOUN'), ('ago', 'ADP'), (' ', 'SPACE'), ('&', 'CCONJ'), ('quot', 'NOUN'), (';', 'PUNCT'), ('groups', 'NOUN'), (' ', 'SPACE'), ('groups', 'NOUN'), (' ', 'SPACE'), ('months', 'NOUN'), (' ', 'SPACE'), ('dispute', 'NOUN'), (' ', 'SPACE'), ('decades', 'NOUN'), (' ', 'SPACE'), ('months', 'NOUN'), (' ', 'SPACE'), ('months', 'NOUN'), ('nearly', 'ADV'), ('months', 'NOUN'), (' ', 'SPACE'), ('decades', 'NOUN'), (' ', 'SPACE'), ('months', 'NOUN'), (' ', 'SPACE'), ('2', 'NUM'), ('8', 'NUM'), (' ', 'SPACE'), ('M', 'PROPN'), ('Y', 'PROPN'), (' ', 'SPACE'), ('2', 'NUM'), ('0', 'NUM'), ('1', 'NUM'), ('5', 'NUM'), (' ', 'SPACE'), ('|', 'NOUN'), (' ', 'SPACE'), ('V', 'NOUN'), ('O', 'NOUN'), ('L', 'NOUN'), (' ', 'SPACE'), ('5', 'NUM'), ('2', 'NUM'), ('1', 'NUM'), (' ', 'SPACE'), ('|', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('months', 'pobj'), (' ', 'pobj'), ('coming', 'amod'), ('months', 'pobj'), (' ', 'ROOT'), ('months', 'npadvmod'), ('ago', 'advmod'), (' ', 'conj'), ('&', 'cc'), ('quot', 'conj'), (';', 'punct'), ('groups', 'appos'), (' ', 'appos'), ('groups', 'pobj'), (' ', 'appos'), ('months', 'pobj'), (' ', 'nsubj'), ('dispute', 'relcl'), (' ', 'pobj'), ('decades', 'npadvmod'), (' ', 'npadvmod'), ('months', 'npadvmod'), (' ', 'prep'), ('months', 'npadvmod'), ('nearly', 'advmod'), ('months', 'pobj'), (' ', 'npadvmod'), ('decades', 'pobj'), (' ', 'npadvmod'), ('months', 'pobj'), (' ', 'nsubj'), ('2', 'nummod'), ('8', 'nummod'), (' ', 'compound'), ('M', 'compound'), ('Y', 'nmod'), (' ', 'appos'), ('2', 'quantmod'), ('0', 'quantmod'), ('1', 'compound'), ('5', 'nummod'), (' ', 'npadvmod'), ('|', 'npadvmod'), (' ', 'punct'), ('V', 'compound'), ('O', 'compound'), ('L', 'npadvmod'), (' ', 'nsubj'), ('5', 'compound'), ('2', 'compound'), ('1', 'npadvmod'), (' ', 'punct'), ('|', 'npadvmod'), (' ', 'punct')]

>> Bigrams: 
[[months,  ], [ , coming], [coming, months], [months,  ], [ , months], [months, ago], [ago,  ], [ , &], [&, quot], [quot, ;], [;, groups], [groups,  ], [ , groups], [groups,  ], [ , months], [months,  ], [ , dispute], [dispute,  ], [ , decades], [decades,  ], [ , months], [months,  ], [ , months], [months, nearly], [nearly, months], [months,  ], [ , decades], [decades,  ], [ , months], [months,  ], [ , 2], [2, 8], [8,  ], [ , M], [M, Y], [Y,  ], [ , 2], [2, 0], [0, 1], [1, 5], [5,  ], [ , |], [|,  ], [ , V], [V, O], [O, L], [L,  ], [ , 5], [5, 2], [2, 1], [1,  ], [ , |], [|,  ]]

>> Trigrams: 
[[months,  , coming], [ , coming, months], [coming, months,  ], [months,  , months], [ , months, ago], [months, ago,  ], [ago,  , &], [ , &, quot], [&, quot, ;], [quot, ;, groups], [;, groups,  ], [groups,  , groups], [ , groups,  ], [groups,  , months], [ , months,  ], [months,  , dispute], [ , dispute,  ], [dispute,  , decades], [ , decades,  ], [decades,  , months], [ , months,  ], [months,  , months], [ , months, nearly], [months, nearly, months], [nearly, months,  ], [months,  , decades], [ , decades,  ], [decades,  , months], [ , months,  ], [months,  , 2], [ , 2, 8], [2, 8,  ], [8,  , M], [ , M, Y], [M, Y,  ], [Y,  , 2], [ , 2, 0], [2, 0, 1], [0, 1, 5], [1, 5,  ], [5,  , |], [ , |,  ], [|,  , V], [ , V, O], [V, O, L], [O, L,  ], [L,  , 5], [ , 5, 2], [5, 2, 1], [2, 1,  ], [1,  , |], [ , |,  ]]

>> Noun Phrases are: 
[a few months, the coming months, quot, the two groups, the two groups, the last few months, nearly two months, the last two decades, a few months]

>> Named Entities are: 
[('a few months', 'DATE'), ('the coming months', 'DATE'), ('a few months ago', 'DATE'), ('two', 'CARDINAL'), ('two', 'CARDINAL'), ('the last few months', 'DATE'), ('two', 'CARDINAL'), ('the last two decades', 'DATE'), ('the next six months', 'DATE'), ('two months', 'DATE'), ('nearly two months', 'DATE'), ('the last two decades', 'DATE'), ('a few months', 'DATE'), ('2 8  M A Y  ', 'TIME'), ('2', 'CARDINAL')]


============================ Sentence 327 =============================

N A T U R E  |  4 4 1  REVIEW INSIGHT  © 2015 Macmillan Publishers Limited. 


>> Tokens are: 
[N, T, U, R, E,  , |,  , 4, 4, 1,  , REVIEW, INSIGHT,  , ©, 2015, Macmillan, Publishers, Limited, .] 

>> PoS Tags are: 
[('N', 'PROPN'), ('T', 'NOUN'), ('U', 'NOUN'), ('R', 'NOUN'), ('E', 'NOUN'), (' ', 'SPACE'), ('|', 'NOUN'), (' ', 'SPACE'), ('4', 'NUM'), ('4', 'NUM'), ('1', 'NUM'), (' ', 'SPACE'), ('REVIEW', 'PROPN'), ('INSIGHT', 'PROPN'), (' ', 'SPACE'), ('©', 'ADJ'), ('2015', 'NUM'), ('Macmillan', 'PROPN'), ('Publishers', 'PROPN'), ('Limited', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('N', 'compound'), ('T', 'compound'), ('U', 'compound'), ('R', 'compound'), ('E', 'ROOT'), (' ', 'appos'), ('|', 'npadvmod'), (' ', 'appos'), ('4', 'nummod'), ('4', 'compound'), ('1', 'nummod'), (' ', 'compound'), ('REVIEW', 'compound'), ('INSIGHT', 'dobj'), (' ', 'nmod'), ('©', 'nmod'), ('2015', 'nummod'), ('Macmillan', 'compound'), ('Publishers', 'compound'), ('Limited', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[N, T], [T, U], [U, R], [R, E], [E,  ], [ , |], [|,  ], [ , 4], [4, 4], [4, 1], [1,  ], [ , REVIEW], [REVIEW, INSIGHT], [INSIGHT,  ], [ , ©], [©, 2015], [2015, Macmillan], [Macmillan, Publishers], [Publishers, Limited], [Limited, .]]

>> Trigrams: 
[[N, T, U], [T, U, R], [U, R, E], [R, E,  ], [E,  , |], [ , |,  ], [|,  , 4], [ , 4, 4], [4, 4, 1], [4, 1,  ], [1,  , REVIEW], [ , REVIEW, INSIGHT], [REVIEW, INSIGHT,  ], [INSIGHT,  , ©], [ , ©, 2015], [©, 2015, Macmillan], [2015, Macmillan, Publishers], [Macmillan, Publishers, Limited], [Publishers, Limited, .]]

>> Noun Phrases are: 
[N A T U R E, 4 4 1  REVIEW INSIGHT,  © 2015 Macmillan Publishers Limited]

>> Named Entities are: 
[('2015', 'DATE'), ('Macmillan Publishers Limited', 'ORG')]


============================ Sentence 328 =============================

All rights reserved    that each contribute plausibility to a conclusion84,85. 


>> Tokens are: 
[rights, reserved,    , contribute, plausibility, conclusion84,85, .] 

>> PoS Tags are: 
[('rights', 'NOUN'), ('reserved', 'VERB'), ('   ', 'SPACE'), ('contribute', 'ADJ'), ('plausibility', 'NOUN'), ('conclusion84,85', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('rights', 'nsubj'), ('reserved', 'ROOT'), ('   ', 'dobj'), ('contribute', 'amod'), ('plausibility', 'ccomp'), ('conclusion84,85', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[rights, reserved], [reserved,    ], [   , contribute], [contribute, plausibility], [plausibility, conclusion84,85], [conclusion84,85, .]]

>> Trigrams: 
[[rights, reserved,    ], [reserved,    , contribute], [   , contribute, plausibility], [contribute, plausibility, conclusion84,85], [plausibility, conclusion84,85, .]]

>> Noun Phrases are: 
[All rights, a conclusion84,85]

>> Named Entities are: 
[]


============================ Sentence 329 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 330 =============================

Instead of translating the meaning of a French sentence into an   English sentence, one can learn to ‘translate’ the meaning of an image  into an English sentence (Fig. 3). 


>> Tokens are: 
[Instead, translating, meaning, French, sentence,   , English, sentence, ,, learn, ‘, translate, ’, meaning, image,  , English, sentence, (, Fig, ., 3, ), .] 

>> PoS Tags are: 
[('Instead', 'ADV'), ('translating', 'VERB'), ('meaning', 'NOUN'), ('French', 'ADJ'), ('sentence', 'NOUN'), ('  ', 'SPACE'), ('English', 'ADJ'), ('sentence', 'NOUN'), (',', 'PUNCT'), ('learn', 'VERB'), ('‘', 'PUNCT'), ('translate', 'VERB'), ('’', 'PUNCT'), ('meaning', 'NOUN'), ('image', 'NOUN'), (' ', 'SPACE'), ('English', 'ADJ'), ('sentence', 'NOUN'), ('(', 'PUNCT'), ('Fig', 'PROPN'), ('.', 'PUNCT'), ('3', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Instead', 'advmod'), ('translating', 'pcomp'), ('meaning', 'dobj'), ('French', 'amod'), ('sentence', 'pobj'), ('  ', 'nummod'), ('English', 'amod'), ('sentence', 'pobj'), (',', 'punct'), ('learn', 'ROOT'), ('‘', 'punct'), ('translate', 'xcomp'), ('’', 'punct'), ('meaning', 'dobj'), ('image', 'pobj'), (' ', 'nummod'), ('English', 'amod'), ('sentence', 'pobj'), ('(', 'punct'), ('Fig', 'appos'), ('.', 'punct'), ('3', 'nummod'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Instead, translating], [translating, meaning], [meaning, French], [French, sentence], [sentence,   ], [  , English], [English, sentence], [sentence, ,], [,, learn], [learn, ‘], [‘, translate], [translate, ’], [’, meaning], [meaning, image], [image,  ], [ , English], [English, sentence], [sentence, (], [(, Fig], [Fig, .], [., 3], [3, )], [), .]]

>> Trigrams: 
[[Instead, translating, meaning], [translating, meaning, French], [meaning, French, sentence], [French, sentence,   ], [sentence,   , English], [  , English, sentence], [English, sentence, ,], [sentence, ,, learn], [,, learn, ‘], [learn, ‘, translate], [‘, translate, ’], [translate, ’, meaning], [’, meaning, image], [meaning, image,  ], [image,  , English], [ , English, sentence], [English, sentence, (], [sentence, (, Fig], [(, Fig, .], [Fig, ., 3], [., 3, )], [3, ), .]]

>> Noun Phrases are: 
[the meaning, a French sentence, an   English sentence, one, the meaning, an image, an English sentence, (Fig]

>> Named Entities are: 
[('French', 'NORP'), ('English', 'LANGUAGE'), ('English', 'LANGUAGE'), ('Fig', 'ORG'), ('3', 'CARDINAL')]


============================ Sentence 331 =============================

The encoder here is a deep Con- vNet that converts the pixels into an activity vector in its last hidden  layer. 


>> Tokens are: 
[encoder, deep, Con-, vNet, converts, pixels, activity, vector, hidden,  , layer, .] 

>> PoS Tags are: 
[('encoder', 'NOUN'), ('deep', 'ADJ'), ('Con-', 'PROPN'), ('vNet', 'PROPN'), ('converts', 'VERB'), ('pixels', 'NOUN'), ('activity', 'NOUN'), ('vector', 'NOUN'), ('hidden', 'VERB'), (' ', 'SPACE'), ('layer', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('encoder', 'nsubj'), ('deep', 'amod'), ('Con-', 'compound'), ('vNet', 'attr'), ('converts', 'relcl'), ('pixels', 'dobj'), ('activity', 'compound'), ('vector', 'pobj'), ('hidden', 'amod'), (' ', 'compound'), ('layer', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[encoder, deep], [deep, Con-], [Con-, vNet], [vNet, converts], [converts, pixels], [pixels, activity], [activity, vector], [vector, hidden], [hidden,  ], [ , layer], [layer, .]]

>> Trigrams: 
[[encoder, deep, Con-], [deep, Con-, vNet], [Con-, vNet, converts], [vNet, converts, pixels], [converts, pixels, activity], [pixels, activity, vector], [activity, vector, hidden], [vector, hidden,  ], [hidden,  , layer], [ , layer, .]]

>> Noun Phrases are: 
[The encoder, a deep Con- vNet, the pixels, an activity vector, its last hidden  layer]

>> Named Entities are: 
[]


============================ Sentence 332 =============================

The decoder is an RNN similar to the ones used for machine  translation and neural language modelling. 


>> Tokens are: 
[decoder, RNN, similar, ones, machine,  , translation, neural, language, modelling, .] 

>> PoS Tags are: 
[('decoder', 'NOUN'), ('RNN', 'PROPN'), ('similar', 'ADJ'), ('ones', 'NOUN'), ('machine', 'NOUN'), (' ', 'SPACE'), ('translation', 'NOUN'), ('neural', 'ADJ'), ('language', 'NOUN'), ('modelling', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('decoder', 'nsubj'), ('RNN', 'attr'), ('similar', 'amod'), ('ones', 'pobj'), ('machine', 'compound'), (' ', 'compound'), ('translation', 'pobj'), ('neural', 'amod'), ('language', 'compound'), ('modelling', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[decoder, RNN], [RNN, similar], [similar, ones], [ones, machine], [machine,  ], [ , translation], [translation, neural], [neural, language], [language, modelling], [modelling, .]]

>> Trigrams: 
[[decoder, RNN, similar], [RNN, similar, ones], [similar, ones, machine], [ones, machine,  ], [machine,  , translation], [ , translation, neural], [translation, neural, language], [neural, language, modelling], [language, modelling, .]]

>> Noun Phrases are: 
[The decoder, an RNN, the ones, machine  translation, neural language modelling]

>> Named Entities are: 
[('RNN', 'ORG')]


============================ Sentence 333 =============================

There has been a surge of  interest in such systems recently (see examples mentioned in ref. 86). 


>> Tokens are: 
[surge,  , interest, systems, recently, (, examples, mentioned, ref, ., 86, ), .] 

>> PoS Tags are: 
[('surge', 'NOUN'), (' ', 'SPACE'), ('interest', 'NOUN'), ('systems', 'NOUN'), ('recently', 'ADV'), ('(', 'PUNCT'), ('examples', 'NOUN'), ('mentioned', 'VERB'), ('ref', 'NOUN'), ('.', 'PUNCT'), ('86', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('surge', 'attr'), (' ', 'compound'), ('interest', 'pobj'), ('systems', 'pobj'), ('recently', 'advmod'), ('(', 'punct'), ('examples', 'dobj'), ('mentioned', 'acl'), ('ref', 'pobj'), ('.', 'punct'), ('86', 'npadvmod'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[surge,  ], [ , interest], [interest, systems], [systems, recently], [recently, (], [(, examples], [examples, mentioned], [mentioned, ref], [ref, .], [., 86], [86, )], [), .]]

>> Trigrams: 
[[surge,  , interest], [ , interest, systems], [interest, systems, recently], [systems, recently, (], [recently, (, examples], [(, examples, mentioned], [examples, mentioned, ref], [mentioned, ref, .], [ref, ., 86], [., 86, )], [86, ), .]]

>> Noun Phrases are: 
[a surge,  interest, such systems, examples, ref]

>> Named Entities are: 
[('86', 'CARDINAL')]


============================ Sentence 334 =============================

  RNNs, once unfolded in time (Fig. 5), can be seen as very deep  feedforward networks in which all the layers share the same weights.   


>> Tokens are: 
[  , RNNs, ,, unfolded, time, (, Fig, ., 5, ), ,, seen, deep,  , feedforward, networks, layers, share, weights, .,  ] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('RNNs', 'NOUN'), (',', 'PUNCT'), ('unfolded', 'VERB'), ('time', 'NOUN'), ('(', 'PUNCT'), ('Fig', 'PROPN'), ('.', 'PUNCT'), ('5', 'NUM'), (')', 'PUNCT'), (',', 'PUNCT'), ('seen', 'VERB'), ('deep', 'ADJ'), (' ', 'SPACE'), ('feedforward', 'NOUN'), ('networks', 'NOUN'), ('layers', 'NOUN'), ('share', 'VERB'), ('weights', 'NOUN'), ('.', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'compound'), ('RNNs', 'nsubj'), (',', 'punct'), ('unfolded', 'advcl'), ('time', 'pobj'), ('(', 'punct'), ('Fig', 'appos'), ('.', 'punct'), ('5', 'nummod'), (')', 'punct'), (',', 'punct'), ('seen', 'ROOT'), ('deep', 'amod'), (' ', 'compound'), ('feedforward', 'amod'), ('networks', 'pobj'), ('layers', 'nsubj'), ('share', 'relcl'), ('weights', 'dobj'), ('.', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[  , RNNs], [RNNs, ,], [,, unfolded], [unfolded, time], [time, (], [(, Fig], [Fig, .], [., 5], [5, )], [), ,], [,, seen], [seen, deep], [deep,  ], [ , feedforward], [feedforward, networks], [networks, layers], [layers, share], [share, weights], [weights, .], [.,  ]]

>> Trigrams: 
[[  , RNNs, ,], [RNNs, ,, unfolded], [,, unfolded, time], [unfolded, time, (], [time, (, Fig], [(, Fig, .], [Fig, ., 5], [., 5, )], [5, ), ,], [), ,, seen], [,, seen, deep], [seen, deep,  ], [deep,  , feedforward], [ , feedforward, networks], [feedforward, networks, layers], [networks, layers, share], [layers, share, weights], [share, weights, .], [weights, .,  ]]

>> Noun Phrases are: 
[  RNNs, time, Fig, very deep  feedforward networks, all the layers, the same weights]

>> Named Entities are: 
[('Fig', 'PERSON'), ('5', 'CARDINAL')]


============================ Sentence 335 =============================

Although their main purpose is to learn long-term dependencies,  theoretical and empirical evidence shows that it is difficult to learn  to store information for very long78. 


>> Tokens are: 
[main, purpose, learn, long, -, term, dependencies, ,,  , theoretical, empirical, evidence, shows, difficult, learn,  , store, information, long78, .] 

>> PoS Tags are: 
[('main', 'ADJ'), ('purpose', 'NOUN'), ('learn', 'VERB'), ('long', 'ADJ'), ('-', 'PUNCT'), ('term', 'NOUN'), ('dependencies', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('theoretical', 'ADJ'), ('empirical', 'ADJ'), ('evidence', 'NOUN'), ('shows', 'VERB'), ('difficult', 'ADJ'), ('learn', 'VERB'), (' ', 'SPACE'), ('store', 'VERB'), ('information', 'NOUN'), ('long78', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('main', 'amod'), ('purpose', 'nsubj'), ('learn', 'xcomp'), ('long', 'amod'), ('-', 'punct'), ('term', 'compound'), ('dependencies', 'dobj'), (',', 'punct'), (' ', 'nmod'), ('theoretical', 'amod'), ('empirical', 'conj'), ('evidence', 'nsubj'), ('shows', 'ROOT'), ('difficult', 'acomp'), ('learn', 'xcomp'), (' ', 'dobj'), ('store', 'xcomp'), ('information', 'dobj'), ('long78', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[main, purpose], [purpose, learn], [learn, long], [long, -], [-, term], [term, dependencies], [dependencies, ,], [,,  ], [ , theoretical], [theoretical, empirical], [empirical, evidence], [evidence, shows], [shows, difficult], [difficult, learn], [learn,  ], [ , store], [store, information], [information, long78], [long78, .]]

>> Trigrams: 
[[main, purpose, learn], [purpose, learn, long], [learn, long, -], [long, -, term], [-, term, dependencies], [term, dependencies, ,], [dependencies, ,,  ], [,,  , theoretical], [ , theoretical, empirical], [theoretical, empirical, evidence], [empirical, evidence, shows], [evidence, shows, difficult], [shows, difficult, learn], [difficult, learn,  ], [learn,  , store], [ , store, information], [store, information, long78], [information, long78, .]]

>> Noun Phrases are: 
[their main purpose, long-term dependencies,  theoretical and empirical evidence, it, information, very long78]

>> Named Entities are: 
[]


============================ Sentence 336 =============================

    


>> Tokens are: 
[   ] 

>> PoS Tags are: 
[('   ', 'SPACE')] 

>> Dependency Tags are: 
[('   ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 337 =============================

To correct for that, one idea is to augment the network with an  explicit memory. 


>> Tokens are: 
[correct, ,, idea, augment, network,  , explicit, memory, .] 

>> PoS Tags are: 
[('correct', 'VERB'), (',', 'PUNCT'), ('idea', 'NOUN'), ('augment', 'VERB'), ('network', 'NOUN'), (' ', 'SPACE'), ('explicit', 'ADJ'), ('memory', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('correct', 'advcl'), (',', 'punct'), ('idea', 'nsubj'), ('augment', 'xcomp'), ('network', 'dobj'), (' ', 'amod'), ('explicit', 'amod'), ('memory', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[correct, ,], [,, idea], [idea, augment], [augment, network], [network,  ], [ , explicit], [explicit, memory], [memory, .]]

>> Trigrams: 
[[correct, ,, idea], [,, idea, augment], [idea, augment, network], [augment, network,  ], [network,  , explicit], [ , explicit, memory], [explicit, memory, .]]

>> Noun Phrases are: 
[one idea, the network, an  explicit memory]

>> Named Entities are: 
[('one', 'CARDINAL')]


============================ Sentence 338 =============================

The first proposal of this kind is the long short-term  memory (LSTM) networks that use special hidden units, the natural  behaviour of which is to remember inputs for a long time79. 


>> Tokens are: 
[proposal, kind, long, short, -, term,  , memory, (, LSTM, ), networks, use, special, hidden, units, ,, natural,  , behaviour, remember, inputs, long, time79, .] 

>> PoS Tags are: 
[('proposal', 'NOUN'), ('kind', 'NOUN'), ('long', 'ADJ'), ('short', 'ADJ'), ('-', 'PUNCT'), ('term', 'NOUN'), (' ', 'SPACE'), ('memory', 'NOUN'), ('(', 'PUNCT'), ('LSTM', 'PROPN'), (')', 'PUNCT'), ('networks', 'NOUN'), ('use', 'VERB'), ('special', 'ADJ'), ('hidden', 'ADJ'), ('units', 'NOUN'), (',', 'PUNCT'), ('natural', 'ADJ'), (' ', 'SPACE'), ('behaviour', 'NOUN'), ('remember', 'VERB'), ('inputs', 'NOUN'), ('long', 'ADJ'), ('time79', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('proposal', 'nsubj'), ('kind', 'pobj'), ('long', 'amod'), ('short', 'amod'), ('-', 'punct'), ('term', 'compound'), (' ', 'compound'), ('memory', 'attr'), ('(', 'punct'), ('LSTM', 'appos'), (')', 'punct'), ('networks', 'appos'), ('use', 'relcl'), ('special', 'amod'), ('hidden', 'amod'), ('units', 'dobj'), (',', 'punct'), ('natural', 'amod'), (' ', 'compound'), ('behaviour', 'appos'), ('remember', 'xcomp'), ('inputs', 'dobj'), ('long', 'amod'), ('time79', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[proposal, kind], [kind, long], [long, short], [short, -], [-, term], [term,  ], [ , memory], [memory, (], [(, LSTM], [LSTM, )], [), networks], [networks, use], [use, special], [special, hidden], [hidden, units], [units, ,], [,, natural], [natural,  ], [ , behaviour], [behaviour, remember], [remember, inputs], [inputs, long], [long, time79], [time79, .]]

>> Trigrams: 
[[proposal, kind, long], [kind, long, short], [long, short, -], [short, -, term], [-, term,  ], [term,  , memory], [ , memory, (], [memory, (, LSTM], [(, LSTM, )], [LSTM, ), networks], [), networks, use], [networks, use, special], [use, special, hidden], [special, hidden, units], [hidden, units, ,], [units, ,, natural], [,, natural,  ], [natural,  , behaviour], [ , behaviour, remember], [behaviour, remember, inputs], [remember, inputs, long], [inputs, long, time79], [long, time79, .]]

>> Noun Phrases are: 
[The first proposal, this kind, the long short-term  memory, LSTM, networks, special hidden units, the natural  behaviour, inputs, a long time79]

>> Named Entities are: 
[('first', 'ORDINAL')]


============================ Sentence 339 =============================

A special  unit called the memory cell acts like an accumulator or a gated leaky  neuron: it has a connection to itself at the next time step that has a  weight of one, so it copies its own real-valued state and accumulates  the external signal, but this self-connection is multiplicatively gated  by another unit that learns to decide when to clear the content of the  memory. 


>> Tokens are: 
[special,  , unit, called, memory, cell, acts, like, accumulator, gated, leaky,  , neuron, :, connection, time, step,  , weight, ,, copies, real, -, valued, state, accumulates,  , external, signal, ,, self, -, connection, multiplicatively, gated,  , unit, learns, decide, clear, content,  , memory, .] 

>> PoS Tags are: 
[('special', 'ADJ'), (' ', 'SPACE'), ('unit', 'NOUN'), ('called', 'VERB'), ('memory', 'NOUN'), ('cell', 'NOUN'), ('acts', 'VERB'), ('like', 'ADP'), ('accumulator', 'NOUN'), ('gated', 'VERB'), ('leaky', 'X'), (' ', 'SPACE'), ('neuron', 'NOUN'), (':', 'PUNCT'), ('connection', 'NOUN'), ('time', 'NOUN'), ('step', 'NOUN'), (' ', 'SPACE'), ('weight', 'NOUN'), (',', 'PUNCT'), ('copies', 'VERB'), ('real', 'ADV'), ('-', 'PUNCT'), ('valued', 'VERB'), ('state', 'NOUN'), ('accumulates', 'VERB'), (' ', 'SPACE'), ('external', 'ADJ'), ('signal', 'NOUN'), (',', 'PUNCT'), ('self', 'NOUN'), ('-', 'PUNCT'), ('connection', 'NOUN'), ('multiplicatively', 'ADV'), ('gated', 'VERB'), (' ', 'SPACE'), ('unit', 'NOUN'), ('learns', 'VERB'), ('decide', 'VERB'), ('clear', 'VERB'), ('content', 'NOUN'), (' ', 'SPACE'), ('memory', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('special', 'amod'), (' ', 'compound'), ('unit', 'nsubj'), ('called', 'ccomp'), ('memory', 'compound'), ('cell', 'dobj'), ('acts', 'oprd'), ('like', 'prep'), ('accumulator', 'pobj'), ('gated', 'amod'), ('leaky', 'compound'), (' ', 'compound'), ('neuron', 'conj'), (':', 'punct'), ('connection', 'dobj'), ('time', 'compound'), ('step', 'pobj'), (' ', 'amod'), ('weight', 'dobj'), (',', 'punct'), ('copies', 'ROOT'), ('real', 'advmod'), ('-', 'punct'), ('valued', 'amod'), ('state', 'dobj'), ('accumulates', 'conj'), (' ', 'dobj'), ('external', 'amod'), ('signal', 'dobj'), (',', 'punct'), ('self', 'compound'), ('-', 'punct'), ('connection', 'nsubjpass'), ('multiplicatively', 'advmod'), ('gated', 'conj'), (' ', 'dobj'), ('unit', 'pobj'), ('learns', 'relcl'), ('decide', 'xcomp'), ('clear', 'xcomp'), ('content', 'dobj'), (' ', 'compound'), ('memory', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[special,  ], [ , unit], [unit, called], [called, memory], [memory, cell], [cell, acts], [acts, like], [like, accumulator], [accumulator, gated], [gated, leaky], [leaky,  ], [ , neuron], [neuron, :], [:, connection], [connection, time], [time, step], [step,  ], [ , weight], [weight, ,], [,, copies], [copies, real], [real, -], [-, valued], [valued, state], [state, accumulates], [accumulates,  ], [ , external], [external, signal], [signal, ,], [,, self], [self, -], [-, connection], [connection, multiplicatively], [multiplicatively, gated], [gated,  ], [ , unit], [unit, learns], [learns, decide], [decide, clear], [clear, content], [content,  ], [ , memory], [memory, .]]

>> Trigrams: 
[[special,  , unit], [ , unit, called], [unit, called, memory], [called, memory, cell], [memory, cell, acts], [cell, acts, like], [acts, like, accumulator], [like, accumulator, gated], [accumulator, gated, leaky], [gated, leaky,  ], [leaky,  , neuron], [ , neuron, :], [neuron, :, connection], [:, connection, time], [connection, time, step], [time, step,  ], [step,  , weight], [ , weight, ,], [weight, ,, copies], [,, copies, real], [copies, real, -], [real, -, valued], [-, valued, state], [valued, state, accumulates], [state, accumulates,  ], [accumulates,  , external], [ , external, signal], [external, signal, ,], [signal, ,, self], [,, self, -], [self, -, connection], [-, connection, multiplicatively], [connection, multiplicatively, gated], [multiplicatively, gated,  ], [gated,  , unit], [ , unit, learns], [unit, learns, decide], [learns, decide, clear], [decide, clear, content], [clear, content,  ], [content,  , memory], [ , memory, .]]

>> Noun Phrases are: 
[A special  unit, the memory cell, an accumulator, a gated leaky  neuron, it, a connection, itself, the next time step, a  weight, it, its own real-valued state, the external signal, this self-connection, another unit, the content, the  memory]

>> Named Entities are: 
[('one', 'CARDINAL')]


============================ Sentence 340 =============================

  LSTM networks have subsequently proved to be more effective  than conventional RNNs, especially when they have several layers for  each time step87, enabling an entire speech recognition system that  goes all the way from acoustics to the sequence of characters in the  transcription. 


>> Tokens are: 
[  , LSTM, networks, subsequently, proved, effective,  , conventional, RNNs, ,, especially, layers,  , time, step87, ,, enabling, entire, speech, recognition, system,  , goes, way, acoustics, sequence, characters,  , transcription, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('LSTM', 'PROPN'), ('networks', 'NOUN'), ('subsequently', 'ADV'), ('proved', 'VERB'), ('effective', 'ADJ'), (' ', 'SPACE'), ('conventional', 'ADJ'), ('RNNs', 'NOUN'), (',', 'PUNCT'), ('especially', 'ADV'), ('layers', 'NOUN'), (' ', 'SPACE'), ('time', 'NOUN'), ('step87', 'NOUN'), (',', 'PUNCT'), ('enabling', 'VERB'), ('entire', 'ADJ'), ('speech', 'NOUN'), ('recognition', 'NOUN'), ('system', 'NOUN'), (' ', 'SPACE'), ('goes', 'VERB'), ('way', 'NOUN'), ('acoustics', 'NOUN'), ('sequence', 'NOUN'), ('characters', 'NOUN'), (' ', 'SPACE'), ('transcription', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'nummod'), ('LSTM', 'compound'), ('networks', 'nsubj'), ('subsequently', 'advmod'), ('proved', 'ROOT'), ('effective', 'amod'), (' ', 'attr'), ('conventional', 'amod'), ('RNNs', 'pobj'), (',', 'punct'), ('especially', 'advmod'), ('layers', 'dobj'), (' ', 'pobj'), ('time', 'compound'), ('step87', 'advcl'), (',', 'punct'), ('enabling', 'advcl'), ('entire', 'amod'), ('speech', 'compound'), ('recognition', 'compound'), ('system', 'dobj'), (' ', 'nsubj'), ('goes', 'relcl'), ('way', 'npadvmod'), ('acoustics', 'pobj'), ('sequence', 'pobj'), ('characters', 'pobj'), (' ', 'compound'), ('transcription', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[  , LSTM], [LSTM, networks], [networks, subsequently], [subsequently, proved], [proved, effective], [effective,  ], [ , conventional], [conventional, RNNs], [RNNs, ,], [,, especially], [especially, layers], [layers,  ], [ , time], [time, step87], [step87, ,], [,, enabling], [enabling, entire], [entire, speech], [speech, recognition], [recognition, system], [system,  ], [ , goes], [goes, way], [way, acoustics], [acoustics, sequence], [sequence, characters], [characters,  ], [ , transcription], [transcription, .]]

>> Trigrams: 
[[  , LSTM, networks], [LSTM, networks, subsequently], [networks, subsequently, proved], [subsequently, proved, effective], [proved, effective,  ], [effective,  , conventional], [ , conventional, RNNs], [conventional, RNNs, ,], [RNNs, ,, especially], [,, especially, layers], [especially, layers,  ], [layers,  , time], [ , time, step87], [time, step87, ,], [step87, ,, enabling], [,, enabling, entire], [enabling, entire, speech], [entire, speech, recognition], [speech, recognition, system], [recognition, system,  ], [system,  , goes], [ , goes, way], [goes, way, acoustics], [way, acoustics, sequence], [acoustics, sequence, characters], [sequence, characters,  ], [characters,  , transcription], [ , transcription, .]]

>> Noun Phrases are: 
[  LSTM networks, conventional RNNs, they, several layers, an entire speech recognition system, acoustics, the sequence, characters, the  transcription]

>> Named Entities are: 
[]


============================ Sentence 341 =============================

LSTM networks or related forms of gated units are also  currently used for the encoder and decoder networks that perform  so well at machine translation17,72,76. 


>> Tokens are: 
[LSTM, networks, related, forms, gated, units,  , currently, encoder, decoder, networks, perform,  , machine, translation17,72,76, .] 

>> PoS Tags are: 
[('LSTM', 'NOUN'), ('networks', 'NOUN'), ('related', 'VERB'), ('forms', 'NOUN'), ('gated', 'VERB'), ('units', 'NOUN'), (' ', 'SPACE'), ('currently', 'ADV'), ('encoder', 'NOUN'), ('decoder', 'NOUN'), ('networks', 'NOUN'), ('perform', 'VERB'), (' ', 'SPACE'), ('machine', 'NOUN'), ('translation17,72,76', 'INTJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('LSTM', 'compound'), ('networks', 'nsubj'), ('related', 'amod'), ('forms', 'conj'), ('gated', 'amod'), ('units', 'pobj'), (' ', 'attr'), ('currently', 'advmod'), ('encoder', 'pobj'), ('decoder', 'compound'), ('networks', 'conj'), ('perform', 'relcl'), (' ', 'dobj'), ('machine', 'compound'), ('translation17,72,76', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[LSTM, networks], [networks, related], [related, forms], [forms, gated], [gated, units], [units,  ], [ , currently], [currently, encoder], [encoder, decoder], [decoder, networks], [networks, perform], [perform,  ], [ , machine], [machine, translation17,72,76], [translation17,72,76, .]]

>> Trigrams: 
[[LSTM, networks, related], [networks, related, forms], [related, forms, gated], [forms, gated, units], [gated, units,  ], [units,  , currently], [ , currently, encoder], [currently, encoder, decoder], [encoder, decoder, networks], [decoder, networks, perform], [networks, perform,  ], [perform,  , machine], [ , machine, translation17,72,76], [machine, translation17,72,76, .]]

>> Noun Phrases are: 
[LSTM networks, related forms, gated units, the encoder, decoder networks]

>> Named Entities are: 
[]


============================ Sentence 342 =============================

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 343 =============================

Over the past year, several authors have made different proposals to  augment RNNs with a memory module. 


>> Tokens are: 
[past, year, ,, authors, different, proposals,  , augment, RNNs, memory, module, .] 

>> PoS Tags are: 
[('past', 'ADJ'), ('year', 'NOUN'), (',', 'PUNCT'), ('authors', 'NOUN'), ('different', 'ADJ'), ('proposals', 'NOUN'), (' ', 'SPACE'), ('augment', 'NOUN'), ('RNNs', 'NOUN'), ('memory', 'NOUN'), ('module', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('past', 'amod'), ('year', 'pobj'), (',', 'punct'), ('authors', 'nsubj'), ('different', 'amod'), ('proposals', 'dobj'), (' ', 'pobj'), ('augment', 'compound'), ('RNNs', 'dobj'), ('memory', 'compound'), ('module', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[past, year], [year, ,], [,, authors], [authors, different], [different, proposals], [proposals,  ], [ , augment], [augment, RNNs], [RNNs, memory], [memory, module], [module, .]]

>> Trigrams: 
[[past, year, ,], [year, ,, authors], [,, authors, different], [authors, different, proposals], [different, proposals,  ], [proposals,  , augment], [ , augment, RNNs], [augment, RNNs, memory], [RNNs, memory, module], [memory, module, .]]

>> Noun Phrases are: 
[the past year, several authors, different proposals, augment RNNs, a memory module]

>> Named Entities are: 
[('the past year', 'DATE')]


============================ Sentence 344 =============================

Proposals include the Neural   


>> Tokens are: 
[Proposals, include, Neural,  ] 

>> PoS Tags are: 
[('Proposals', 'NOUN'), ('include', 'VERB'), ('Neural', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Proposals', 'nsubj'), ('include', 'ROOT'), ('Neural', 'dobj'), (' ', 'appos')]

>> Bigrams: 
[[Proposals, include], [include, Neural], [Neural,  ]]

>> Trigrams: 
[[Proposals, include, Neural], [include, Neural,  ]]

>> Noun Phrases are: 
[Proposals, the Neural]

>> Named Entities are: 
[('the Neural  ', 'ORG')]


============================ Sentence 345 =============================

Turing Machine in which the network is augmented by a ‘tape-like’  memory that the RNN can choose to read from or write to88, and  memory networks, in which a regular network is augmented by a  kind of associative memory89. 


>> Tokens are: 
[Turing, Machine, network, augmented, ‘, tape, -, like, ’,  , memory, RNN, choose, read, write, to88, ,,  , memory, networks, ,, regular, network, augmented,  , kind, associative, memory89, .] 

>> PoS Tags are: 
[('Turing', 'PROPN'), ('Machine', 'PROPN'), ('network', 'NOUN'), ('augmented', 'VERB'), ('‘', 'PUNCT'), ('tape', 'NOUN'), ('-', 'PUNCT'), ('like', 'ADJ'), ('’', 'PUNCT'), (' ', 'SPACE'), ('memory', 'NOUN'), ('RNN', 'PROPN'), ('choose', 'VERB'), ('read', 'VERB'), ('write', 'VERB'), ('to88', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('memory', 'NOUN'), ('networks', 'NOUN'), (',', 'PUNCT'), ('regular', 'ADJ'), ('network', 'NOUN'), ('augmented', 'VERB'), (' ', 'SPACE'), ('kind', 'NOUN'), ('associative', 'ADJ'), ('memory89', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Turing', 'compound'), ('Machine', 'ROOT'), ('network', 'nsubjpass'), ('augmented', 'relcl'), ('‘', 'punct'), ('tape', 'npadvmod'), ('-', 'punct'), ('like', 'amod'), ('’', 'punct'), (' ', 'compound'), ('memory', 'pobj'), ('RNN', 'nsubj'), ('choose', 'relcl'), ('read', 'xcomp'), ('write', 'conj'), ('to88', 'dobj'), (',', 'punct'), (' ', 'compound'), ('memory', 'compound'), ('networks', 'conj'), (',', 'punct'), ('regular', 'amod'), ('network', 'nsubjpass'), ('augmented', 'relcl'), (' ', 'compound'), ('kind', 'pobj'), ('associative', 'amod'), ('memory89', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Turing, Machine], [Machine, network], [network, augmented], [augmented, ‘], [‘, tape], [tape, -], [-, like], [like, ’], [’,  ], [ , memory], [memory, RNN], [RNN, choose], [choose, read], [read, write], [write, to88], [to88, ,], [,,  ], [ , memory], [memory, networks], [networks, ,], [,, regular], [regular, network], [network, augmented], [augmented,  ], [ , kind], [kind, associative], [associative, memory89], [memory89, .]]

>> Trigrams: 
[[Turing, Machine, network], [Machine, network, augmented], [network, augmented, ‘], [augmented, ‘, tape], [‘, tape, -], [tape, -, like], [-, like, ’], [like, ’,  ], [’,  , memory], [ , memory, RNN], [memory, RNN, choose], [RNN, choose, read], [choose, read, write], [read, write, to88], [write, to88, ,], [to88, ,,  ], [,,  , memory], [ , memory, networks], [memory, networks, ,], [networks, ,, regular], [,, regular, network], [regular, network, augmented], [network, augmented,  ], [augmented,  , kind], [ , kind, associative], [kind, associative, memory89], [associative, memory89, .]]

>> Noun Phrases are: 
[Turing Machine, the network, a ‘tape-like’  memory, the RNN, to88,  memory networks, a regular network, a  kind, associative memory89]

>> Named Entities are: 
[('RNN', 'ORG')]


============================ Sentence 346 =============================

Memory networks have yielded excel- lent performance on standard question-answering benchmarks. 


>> Tokens are: 
[Memory, networks, yielded, excel-, lent, performance, standard, question, -, answering, benchmarks, .] 

>> PoS Tags are: 
[('Memory', 'NOUN'), ('networks', 'NOUN'), ('yielded', 'VERB'), ('excel-', 'ADP'), ('lent', 'VERB'), ('performance', 'NOUN'), ('standard', 'ADJ'), ('question', 'NOUN'), ('-', 'PUNCT'), ('answering', 'VERB'), ('benchmarks', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Memory', 'compound'), ('networks', 'nsubj'), ('yielded', 'ROOT'), ('excel-', 'amod'), ('lent', 'amod'), ('performance', 'dobj'), ('standard', 'amod'), ('question', 'compound'), ('-', 'punct'), ('answering', 'amod'), ('benchmarks', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Memory, networks], [networks, yielded], [yielded, excel-], [excel-, lent], [lent, performance], [performance, standard], [standard, question], [question, -], [-, answering], [answering, benchmarks], [benchmarks, .]]

>> Trigrams: 
[[Memory, networks, yielded], [networks, yielded, excel-], [yielded, excel-, lent], [excel-, lent, performance], [lent, performance, standard], [performance, standard, question], [standard, question, -], [question, -, answering], [-, answering, benchmarks], [answering, benchmarks, .]]

>> Noun Phrases are: 
[Memory networks, excel- lent performance, standard question-answering benchmarks]

>> Named Entities are: 
[]


============================ Sentence 347 =============================

The  memory is used to remember the story about which the network is  later asked to answer questions. 


>> Tokens are: 
[ , memory, remember, story, network,  , later, asked, answer, questions, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('memory', 'NOUN'), ('remember', 'VERB'), ('story', 'NOUN'), ('network', 'NOUN'), (' ', 'SPACE'), ('later', 'ADV'), ('asked', 'VERB'), ('answer', 'VERB'), ('questions', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'compound'), ('memory', 'nsubjpass'), ('remember', 'xcomp'), ('story', 'dobj'), ('network', 'nsubjpass'), (' ', 'nsubj'), ('later', 'advmod'), ('asked', 'relcl'), ('answer', 'xcomp'), ('questions', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[ , memory], [memory, remember], [remember, story], [story, network], [network,  ], [ , later], [later, asked], [asked, answer], [answer, questions], [questions, .]]

>> Trigrams: 
[[ , memory, remember], [memory, remember, story], [remember, story, network], [story, network,  ], [network,  , later], [ , later, asked], [later, asked, answer], [asked, answer, questions], [answer, questions, .]]

>> Noun Phrases are: 
[The  memory, the story, the network, questions]

>> Named Entities are: 
[]


============================ Sentence 348 =============================

  Beyond simple memorization, neural Turing machines and mem- ory networks are being used for tasks that would normally require  reasoning and symbol manipulation. 


>> Tokens are: 
[  , simple, memorization, ,, neural, Turing, machines, mem-, ory, networks, tasks, normally, require,  , reasoning, symbol, manipulation, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('simple', 'ADJ'), ('memorization', 'NOUN'), (',', 'PUNCT'), ('neural', 'ADJ'), ('Turing', 'PROPN'), ('machines', 'NOUN'), ('mem-', 'ADJ'), ('ory', 'NOUN'), ('networks', 'NOUN'), ('tasks', 'NOUN'), ('normally', 'ADV'), ('require', 'VERB'), (' ', 'SPACE'), ('reasoning', 'NOUN'), ('symbol', 'NOUN'), ('manipulation', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'dep'), ('simple', 'amod'), ('memorization', 'pobj'), (',', 'punct'), ('neural', 'amod'), ('Turing', 'compound'), ('machines', 'nsubjpass'), ('mem-', 'nmod'), ('ory', 'amod'), ('networks', 'conj'), ('tasks', 'pobj'), ('normally', 'advmod'), ('require', 'relcl'), (' ', 'dobj'), ('reasoning', 'dobj'), ('symbol', 'compound'), ('manipulation', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[  , simple], [simple, memorization], [memorization, ,], [,, neural], [neural, Turing], [Turing, machines], [machines, mem-], [mem-, ory], [ory, networks], [networks, tasks], [tasks, normally], [normally, require], [require,  ], [ , reasoning], [reasoning, symbol], [symbol, manipulation], [manipulation, .]]

>> Trigrams: 
[[  , simple, memorization], [simple, memorization, ,], [memorization, ,, neural], [,, neural, Turing], [neural, Turing, machines], [Turing, machines, mem-], [machines, mem-, ory], [mem-, ory, networks], [ory, networks, tasks], [networks, tasks, normally], [tasks, normally, require], [normally, require,  ], [require,  , reasoning], [ , reasoning, symbol], [reasoning, symbol, manipulation], [symbol, manipulation, .]]

>> Noun Phrases are: 
[simple memorization, neural Turing machines, mem- ory networks, tasks, reasoning, symbol manipulation]

>> Named Entities are: 
[]


============================ Sentence 349 =============================

Neural Turing machines can  be taught ‘algorithms’. 


>> Tokens are: 
[Neural, Turing, machines,  , taught, ‘, algorithms, ’, .] 

>> PoS Tags are: 
[('Neural', 'PROPN'), ('Turing', 'PROPN'), ('machines', 'NOUN'), (' ', 'SPACE'), ('taught', 'VERB'), ('‘', 'PUNCT'), ('algorithms', 'NOUN'), ('’', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Neural', 'compound'), ('Turing', 'compound'), ('machines', 'nsubjpass'), (' ', 'nsubjpass'), ('taught', 'ROOT'), ('‘', 'punct'), ('algorithms', 'dobj'), ('’', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Neural, Turing], [Turing, machines], [machines,  ], [ , taught], [taught, ‘], [‘, algorithms], [algorithms, ’], [’, .]]

>> Trigrams: 
[[Neural, Turing, machines], [Turing, machines,  ], [machines,  , taught], [ , taught, ‘], [taught, ‘, algorithms], [‘, algorithms, ’], [algorithms, ’, .]]

>> Noun Phrases are: 
[Neural Turing machines, algorithms]

>> Named Entities are: 
[('Neural Turing', 'ORG')]


============================ Sentence 350 =============================

Among other things, they can learn to output   a sorted list of symbols when their input consists of an unsorted  sequence in which each symbol is accompanied by a real value that  indicates its priority in the list88. 


>> Tokens are: 
[things, ,, learn, output,   , sorted, list, symbols, input, consists, unsorted,  , sequence, symbol, accompanied, real, value,  , indicates, priority, list88, .] 

>> PoS Tags are: 
[('things', 'NOUN'), (',', 'PUNCT'), ('learn', 'VERB'), ('output', 'VERB'), ('  ', 'SPACE'), ('sorted', 'ADJ'), ('list', 'NOUN'), ('symbols', 'NOUN'), ('input', 'NOUN'), ('consists', 'VERB'), ('unsorted', 'ADJ'), (' ', 'SPACE'), ('sequence', 'NOUN'), ('symbol', 'NOUN'), ('accompanied', 'VERB'), ('real', 'ADJ'), ('value', 'NOUN'), (' ', 'SPACE'), ('indicates', 'VERB'), ('priority', 'NOUN'), ('list88', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('things', 'pobj'), (',', 'punct'), ('learn', 'ROOT'), ('output', 'xcomp'), ('  ', 'dobj'), ('sorted', 'amod'), ('list', 'dobj'), ('symbols', 'pobj'), ('input', 'nsubj'), ('consists', 'advcl'), ('unsorted', 'amod'), (' ', 'compound'), ('sequence', 'pobj'), ('symbol', 'nsubjpass'), ('accompanied', 'relcl'), ('real', 'amod'), ('value', 'pobj'), (' ', 'nsubj'), ('indicates', 'relcl'), ('priority', 'dobj'), ('list88', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[things, ,], [,, learn], [learn, output], [output,   ], [  , sorted], [sorted, list], [list, symbols], [symbols, input], [input, consists], [consists, unsorted], [unsorted,  ], [ , sequence], [sequence, symbol], [symbol, accompanied], [accompanied, real], [real, value], [value,  ], [ , indicates], [indicates, priority], [priority, list88], [list88, .]]

>> Trigrams: 
[[things, ,, learn], [,, learn, output], [learn, output,   ], [output,   , sorted], [  , sorted, list], [sorted, list, symbols], [list, symbols, input], [symbols, input, consists], [input, consists, unsorted], [consists, unsorted,  ], [unsorted,  , sequence], [ , sequence, symbol], [sequence, symbol, accompanied], [symbol, accompanied, real], [accompanied, real, value], [real, value,  ], [value,  , indicates], [ , indicates, priority], [indicates, priority, list88], [priority, list88, .]]

>> Noun Phrases are: 
[other things, they, a sorted list, symbols, their input, an unsorted  sequence, each symbol, a real value, its priority, the list88]

>> Named Entities are: 
[]


============================ Sentence 351 =============================

Memory networks can be trained  to keep track of the state of the world in a setting similar to a text  adventure game and after reading a story, they can answer questions  that require complex inference90. 


>> Tokens are: 
[Memory, networks, trained,  , track, state, world, setting, similar, text,  , adventure, game, reading, story, ,, answer, questions,  , require, complex, inference90, .] 

>> PoS Tags are: 
[('Memory', 'NOUN'), ('networks', 'NOUN'), ('trained', 'VERB'), (' ', 'SPACE'), ('track', 'NOUN'), ('state', 'NOUN'), ('world', 'NOUN'), ('setting', 'NOUN'), ('similar', 'ADJ'), ('text', 'NOUN'), (' ', 'SPACE'), ('adventure', 'NOUN'), ('game', 'NOUN'), ('reading', 'VERB'), ('story', 'NOUN'), (',', 'PUNCT'), ('answer', 'VERB'), ('questions', 'NOUN'), (' ', 'SPACE'), ('require', 'VERB'), ('complex', 'ADJ'), ('inference90', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Memory', 'compound'), ('networks', 'nsubjpass'), ('trained', 'ROOT'), (' ', 'dobj'), ('track', 'dobj'), ('state', 'pobj'), ('world', 'pobj'), ('setting', 'pobj'), ('similar', 'amod'), ('text', 'compound'), (' ', 'nmod'), ('adventure', 'compound'), ('game', 'pobj'), ('reading', 'pcomp'), ('story', 'dobj'), (',', 'punct'), ('answer', 'conj'), ('questions', 'dobj'), (' ', 'appos'), ('require', 'relcl'), ('complex', 'amod'), ('inference90', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Memory, networks], [networks, trained], [trained,  ], [ , track], [track, state], [state, world], [world, setting], [setting, similar], [similar, text], [text,  ], [ , adventure], [adventure, game], [game, reading], [reading, story], [story, ,], [,, answer], [answer, questions], [questions,  ], [ , require], [require, complex], [complex, inference90], [inference90, .]]

>> Trigrams: 
[[Memory, networks, trained], [networks, trained,  ], [trained,  , track], [ , track, state], [track, state, world], [state, world, setting], [world, setting, similar], [setting, similar, text], [similar, text,  ], [text,  , adventure], [ , adventure, game], [adventure, game, reading], [game, reading, story], [reading, story, ,], [story, ,, answer], [,, answer, questions], [answer, questions,  ], [questions,  , require], [ , require, complex], [require, complex, inference90], [complex, inference90, .]]

>> Noun Phrases are: 
[Memory networks, track, the state, the world, a setting, a text  adventure game, a story, they, questions, complex inference90]

>> Named Entities are: 
[]


============================ Sentence 352 =============================

In one test example, the network is  shown a 15-sentence version of the The Lord of the Rings and correctly  answers questions such as “where is Frodo now?”89. 


>> Tokens are: 
[test, example, ,, network,  , shown, 15, -, sentence, version, Lord, Rings, correctly,  , answers, questions, “, Frodo, now?”89, .] 

>> PoS Tags are: 
[('test', 'NOUN'), ('example', 'NOUN'), (',', 'PUNCT'), ('network', 'NOUN'), (' ', 'SPACE'), ('shown', 'VERB'), ('15', 'NUM'), ('-', 'PUNCT'), ('sentence', 'NOUN'), ('version', 'NOUN'), ('Lord', 'PROPN'), ('Rings', 'PROPN'), ('correctly', 'ADV'), (' ', 'SPACE'), ('answers', 'VERB'), ('questions', 'NOUN'), ('“', 'PUNCT'), ('Frodo', 'PROPN'), ('now?”89', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('test', 'compound'), ('example', 'pobj'), (',', 'punct'), ('network', 'nsubjpass'), (' ', 'nsubj'), ('shown', 'ROOT'), ('15', 'nummod'), ('-', 'punct'), ('sentence', 'compound'), ('version', 'dobj'), ('Lord', 'pobj'), ('Rings', 'pobj'), ('correctly', 'advmod'), (' ', 'nsubj'), ('answers', 'conj'), ('questions', 'dobj'), ('“', 'punct'), ('Frodo', 'compound'), ('now?”89', 'nsubj'), ('.', 'punct')]

>> Bigrams: 
[[test, example], [example, ,], [,, network], [network,  ], [ , shown], [shown, 15], [15, -], [-, sentence], [sentence, version], [version, Lord], [Lord, Rings], [Rings, correctly], [correctly,  ], [ , answers], [answers, questions], [questions, “], [“, Frodo], [Frodo, now?”89], [now?”89, .]]

>> Trigrams: 
[[test, example, ,], [example, ,, network], [,, network,  ], [network,  , shown], [ , shown, 15], [shown, 15, -], [15, -, sentence], [-, sentence, version], [sentence, version, Lord], [version, Lord, Rings], [Lord, Rings, correctly], [Rings, correctly,  ], [correctly,  , answers], [ , answers, questions], [answers, questions, “], [questions, “, Frodo], [“, Frodo, now?”89], [Frodo, now?”89, .]]

>> Noun Phrases are: 
[one test example, the network, a 15-sentence version, the The Lord, the Rings, questions, Frodo now?”89]

>> Named Entities are: 
[('one', 'CARDINAL'), ('15', 'CARDINAL'), ('Rings', 'ORG')]


============================ Sentence 353 =============================

    


>> Tokens are: 
[   ] 

>> PoS Tags are: 
[('   ', 'SPACE')] 

>> Dependency Tags are: 
[('   ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 354 =============================

The future of deep learning   


>> Tokens are: 
[future, deep, learning,  ] 

>> PoS Tags are: 
[('future', 'NOUN'), ('deep', 'ADJ'), ('learning', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('future', 'ROOT'), ('deep', 'amod'), ('learning', 'pobj'), (' ', 'punct')]

>> Bigrams: 
[[future, deep], [deep, learning], [learning,  ]]

>> Trigrams: 
[[future, deep, learning], [deep, learning,  ]]

>> Noun Phrases are: 
[The future, deep learning]

>> Named Entities are: 
[]


============================ Sentence 355 =============================

Unsupervised learning91–98 had a catalytic effect in reviving interest in  deep learning, but has since been overshadowed by the successes of  purely supervised learning. 


>> Tokens are: 
[Unsupervised, learning91–98, catalytic, effect, reviving, interest,  , deep, learning, ,, overshadowed, successes,  , purely, supervised, learning, .] 

>> PoS Tags are: 
[('Unsupervised', 'PROPN'), ('learning91–98', 'PROPN'), ('catalytic', 'ADJ'), ('effect', 'NOUN'), ('reviving', 'VERB'), ('interest', 'NOUN'), (' ', 'SPACE'), ('deep', 'ADJ'), ('learning', 'NOUN'), (',', 'PUNCT'), ('overshadowed', 'VERB'), ('successes', 'NOUN'), (' ', 'SPACE'), ('purely', 'ADV'), ('supervised', 'VERB'), ('learning', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Unsupervised', 'compound'), ('learning91–98', 'nsubj'), ('catalytic', 'amod'), ('effect', 'dobj'), ('reviving', 'amod'), ('interest', 'pobj'), (' ', 'pobj'), ('deep', 'amod'), ('learning', 'pobj'), (',', 'punct'), ('overshadowed', 'conj'), ('successes', 'pobj'), (' ', 'pobj'), ('purely', 'advmod'), ('supervised', 'amod'), ('learning', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Unsupervised, learning91–98], [learning91–98, catalytic], [catalytic, effect], [effect, reviving], [reviving, interest], [interest,  ], [ , deep], [deep, learning], [learning, ,], [,, overshadowed], [overshadowed, successes], [successes,  ], [ , purely], [purely, supervised], [supervised, learning], [learning, .]]

>> Trigrams: 
[[Unsupervised, learning91–98, catalytic], [learning91–98, catalytic, effect], [catalytic, effect, reviving], [effect, reviving, interest], [reviving, interest,  ], [interest,  , deep], [ , deep, learning], [deep, learning, ,], [learning, ,, overshadowed], [,, overshadowed, successes], [overshadowed, successes,  ], [successes,  , purely], [ , purely, supervised], [purely, supervised, learning], [supervised, learning, .]]

>> Noun Phrases are: 
[Unsupervised learning91–98, a catalytic effect, reviving interest, deep learning, the successes, purely supervised learning]

>> Named Entities are: 
[]


============================ Sentence 356 =============================

Although we have not focused on it in this  Review, we expect unsupervised learning to become far more important  in the longer term. 


>> Tokens are: 
[focused,  , Review, ,, expect, unsupervised, learning, far, important,  , longer, term, .] 

>> PoS Tags are: 
[('focused', 'VERB'), (' ', 'SPACE'), ('Review', 'PROPN'), (',', 'PUNCT'), ('expect', 'VERB'), ('unsupervised', 'ADJ'), ('learning', 'NOUN'), ('far', 'ADV'), ('important', 'ADJ'), (' ', 'SPACE'), ('longer', 'ADJ'), ('term', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('focused', 'advcl'), (' ', 'compound'), ('Review', 'pobj'), (',', 'punct'), ('expect', 'ROOT'), ('unsupervised', 'amod'), ('learning', 'nsubj'), ('far', 'advmod'), ('important', 'amod'), (' ', 'attr'), ('longer', 'amod'), ('term', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[focused,  ], [ , Review], [Review, ,], [,, expect], [expect, unsupervised], [unsupervised, learning], [learning, far], [far, important], [important,  ], [ , longer], [longer, term], [term, .]]

>> Trigrams: 
[[focused,  , Review], [ , Review, ,], [Review, ,, expect], [,, expect, unsupervised], [expect, unsupervised, learning], [unsupervised, learning, far], [learning, far, important], [far, important,  ], [important,  , longer], [ , longer, term], [longer, term, .]]

>> Noun Phrases are: 
[we, it, this  Review, we, unsupervised learning, the longer term]

>> Named Entities are: 
[]


============================ Sentence 357 =============================

Human and animal learning is largely unsupervised:  we discover the structure of the world by observing it, not by being told  the name of every object. 


>> Tokens are: 
[Human, animal, learning, largely, unsupervised, :,  , discover, structure, world, observing, ,, told,  , object, .] 

>> PoS Tags are: 
[('Human', 'ADJ'), ('animal', 'NOUN'), ('learning', 'NOUN'), ('largely', 'ADV'), ('unsupervised', 'ADJ'), (':', 'PUNCT'), (' ', 'SPACE'), ('discover', 'VERB'), ('structure', 'NOUN'), ('world', 'NOUN'), ('observing', 'VERB'), (',', 'PUNCT'), ('told', 'VERB'), (' ', 'SPACE'), ('object', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Human', 'amod'), ('animal', 'conj'), ('learning', 'nsubj'), ('largely', 'advmod'), ('unsupervised', 'acomp'), (':', 'punct'), (' ', 'attr'), ('discover', 'ROOT'), ('structure', 'dobj'), ('world', 'pobj'), ('observing', 'pcomp'), (',', 'punct'), ('told', 'pcomp'), (' ', 'dative'), ('object', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Human, animal], [animal, learning], [learning, largely], [largely, unsupervised], [unsupervised, :], [:,  ], [ , discover], [discover, structure], [structure, world], [world, observing], [observing, ,], [,, told], [told,  ], [ , object], [object, .]]

>> Trigrams: 
[[Human, animal, learning], [animal, learning, largely], [learning, largely, unsupervised], [largely, unsupervised, :], [unsupervised, :,  ], [:,  , discover], [ , discover, structure], [discover, structure, world], [structure, world, observing], [world, observing, ,], [observing, ,, told], [,, told,  ], [told,  , object], [ , object, .]]

>> Noun Phrases are: 
[Human and animal learning, we, the structure, the world, it, the name, every object]

>> Named Entities are: 
[]


============================ Sentence 358 =============================

  Human vision is an active process that sequentially samples the optic  array in an intelligent, task-specific way using a small, high-resolution  fovea with a large, low-resolution surround. 


>> Tokens are: 
[  , Human, vision, active, process, sequentially, samples, optic,  , array, intelligent, ,, task, -, specific, way, small, ,, high, -, resolution,  , fovea, large, ,, low, -, resolution, surround, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('Human', 'ADJ'), ('vision', 'NOUN'), ('active', 'ADJ'), ('process', 'NOUN'), ('sequentially', 'ADV'), ('samples', 'VERB'), ('optic', 'ADJ'), (' ', 'SPACE'), ('array', 'NOUN'), ('intelligent', 'ADJ'), (',', 'PUNCT'), ('task', 'NOUN'), ('-', 'PUNCT'), ('specific', 'ADJ'), ('way', 'NOUN'), ('small', 'ADJ'), (',', 'PUNCT'), ('high', 'ADJ'), ('-', 'PUNCT'), ('resolution', 'NOUN'), (' ', 'SPACE'), ('fovea', 'NOUN'), ('large', 'ADJ'), (',', 'PUNCT'), ('low', 'ADJ'), ('-', 'PUNCT'), ('resolution', 'NOUN'), ('surround', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'nummod'), ('Human', 'compound'), ('vision', 'nsubj'), ('active', 'amod'), ('process', 'attr'), ('sequentially', 'advmod'), ('samples', 'relcl'), ('optic', 'amod'), (' ', 'compound'), ('array', 'dobj'), ('intelligent', 'amod'), (',', 'punct'), ('task', 'npadvmod'), ('-', 'punct'), ('specific', 'amod'), ('way', 'pobj'), ('small', 'amod'), (',', 'punct'), ('high', 'amod'), ('-', 'punct'), ('resolution', 'nmod'), (' ', 'nummod'), ('fovea', 'dobj'), ('large', 'amod'), (',', 'punct'), ('low', 'amod'), ('-', 'punct'), ('resolution', 'compound'), ('surround', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[  , Human], [Human, vision], [vision, active], [active, process], [process, sequentially], [sequentially, samples], [samples, optic], [optic,  ], [ , array], [array, intelligent], [intelligent, ,], [,, task], [task, -], [-, specific], [specific, way], [way, small], [small, ,], [,, high], [high, -], [-, resolution], [resolution,  ], [ , fovea], [fovea, large], [large, ,], [,, low], [low, -], [-, resolution], [resolution, surround], [surround, .]]

>> Trigrams: 
[[  , Human, vision], [Human, vision, active], [vision, active, process], [active, process, sequentially], [process, sequentially, samples], [sequentially, samples, optic], [samples, optic,  ], [optic,  , array], [ , array, intelligent], [array, intelligent, ,], [intelligent, ,, task], [,, task, -], [task, -, specific], [-, specific, way], [specific, way, small], [way, small, ,], [small, ,, high], [,, high, -], [high, -, resolution], [-, resolution,  ], [resolution,  , fovea], [ , fovea, large], [fovea, large, ,], [large, ,, low], [,, low, -], [low, -, resolution], [-, resolution, surround], [resolution, surround, .]]

>> Noun Phrases are: 
[  Human vision, an active process, the optic  array, an intelligent, task-specific way, a small, high-resolution  fovea, a large, low-resolution surround]

>> Named Entities are: 
[]


============================ Sentence 359 =============================

We expect much of the  future progress in vision to come from systems that are trained end-to- end and combine ConvNets with RNNs that use reinforcement learning  to decide where to look. 


>> Tokens are: 
[expect,  , future, progress, vision, come, systems, trained, end, -, to-, end, combine, ConvNets, RNNs, use, reinforcement, learning,  , decide, look, .] 

>> PoS Tags are: 
[('expect', 'VERB'), (' ', 'SPACE'), ('future', 'ADJ'), ('progress', 'NOUN'), ('vision', 'NOUN'), ('come', 'VERB'), ('systems', 'NOUN'), ('trained', 'VERB'), ('end', 'NOUN'), ('-', 'PUNCT'), ('to-', 'NOUN'), ('end', 'NOUN'), ('combine', 'VERB'), ('ConvNets', 'PROPN'), ('RNNs', 'NOUN'), ('use', 'VERB'), ('reinforcement', 'NOUN'), ('learning', 'VERB'), (' ', 'SPACE'), ('decide', 'VERB'), ('look', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('expect', 'ROOT'), (' ', 'nmod'), ('future', 'amod'), ('progress', 'pobj'), ('vision', 'pobj'), ('come', 'ccomp'), ('systems', 'pobj'), ('trained', 'relcl'), ('end', 'compound'), ('-', 'punct'), ('to-', 'compound'), ('end', 'dobj'), ('combine', 'conj'), ('ConvNets', 'dobj'), ('RNNs', 'pobj'), ('use', 'relcl'), ('reinforcement', 'dobj'), ('learning', 'xcomp'), (' ', 'dobj'), ('decide', 'xcomp'), ('look', 'xcomp'), ('.', 'punct')]

>> Bigrams: 
[[expect,  ], [ , future], [future, progress], [progress, vision], [vision, come], [come, systems], [systems, trained], [trained, end], [end, -], [-, to-], [to-, end], [end, combine], [combine, ConvNets], [ConvNets, RNNs], [RNNs, use], [use, reinforcement], [reinforcement, learning], [learning,  ], [ , decide], [decide, look], [look, .]]

>> Trigrams: 
[[expect,  , future], [ , future, progress], [future, progress, vision], [progress, vision, come], [vision, come, systems], [come, systems, trained], [systems, trained, end], [trained, end, -], [end, -, to-], [-, to-, end], [to-, end, combine], [end, combine, ConvNets], [combine, ConvNets, RNNs], [ConvNets, RNNs, use], [RNNs, use, reinforcement], [use, reinforcement, learning], [reinforcement, learning,  ], [learning,  , decide], [ , decide, look], [decide, look, .]]

>> Noun Phrases are: 
[We, the  future progress, vision, systems, end-to- end, ConvNets, RNNs, reinforcement]

>> Named Entities are: 
[]


============================ Sentence 360 =============================

Systems combining deep learning and rein- forcement learning are in their infancy, but they already outperform  passive vision systems99 at classification tasks and produce impressive  results in learning to play many different video games100. 


>> Tokens are: 
[Systems, combining, deep, learning, rein-, forcement, learning, infancy, ,, outperform,  , passive, vision, systems99, classification, tasks, produce, impressive,  , results, learning, play, different, video, games100, .] 

>> PoS Tags are: 
[('Systems', 'NOUN'), ('combining', 'VERB'), ('deep', 'ADJ'), ('learning', 'NOUN'), ('rein-', 'NOUN'), ('forcement', 'ADJ'), ('learning', 'NOUN'), ('infancy', 'NOUN'), (',', 'PUNCT'), ('outperform', 'VERB'), (' ', 'SPACE'), ('passive', 'ADJ'), ('vision', 'NOUN'), ('systems99', 'NOUN'), ('classification', 'NOUN'), ('tasks', 'NOUN'), ('produce', 'VERB'), ('impressive', 'ADJ'), (' ', 'SPACE'), ('results', 'NOUN'), ('learning', 'VERB'), ('play', 'VERB'), ('different', 'ADJ'), ('video', 'NOUN'), ('games100', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Systems', 'nsubj'), ('combining', 'acl'), ('deep', 'amod'), ('learning', 'dobj'), ('rein-', 'nmod'), ('forcement', 'amod'), ('learning', 'conj'), ('infancy', 'pobj'), (',', 'punct'), ('outperform', 'conj'), (' ', 'nmod'), ('passive', 'amod'), ('vision', 'compound'), ('systems99', 'dobj'), ('classification', 'compound'), ('tasks', 'pobj'), ('produce', 'conj'), ('impressive', 'amod'), (' ', 'compound'), ('results', 'dobj'), ('learning', 'pcomp'), ('play', 'xcomp'), ('different', 'amod'), ('video', 'compound'), ('games100', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Systems, combining], [combining, deep], [deep, learning], [learning, rein-], [rein-, forcement], [forcement, learning], [learning, infancy], [infancy, ,], [,, outperform], [outperform,  ], [ , passive], [passive, vision], [vision, systems99], [systems99, classification], [classification, tasks], [tasks, produce], [produce, impressive], [impressive,  ], [ , results], [results, learning], [learning, play], [play, different], [different, video], [video, games100], [games100, .]]

>> Trigrams: 
[[Systems, combining, deep], [combining, deep, learning], [deep, learning, rein-], [learning, rein-, forcement], [rein-, forcement, learning], [forcement, learning, infancy], [learning, infancy, ,], [infancy, ,, outperform], [,, outperform,  ], [outperform,  , passive], [ , passive, vision], [passive, vision, systems99], [vision, systems99, classification], [systems99, classification, tasks], [classification, tasks, produce], [tasks, produce, impressive], [produce, impressive,  ], [impressive,  , results], [ , results, learning], [results, learning, play], [learning, play, different], [play, different, video], [different, video, games100], [video, games100, .]]

>> Noun Phrases are: 
[Systems, deep learning, their infancy, they,  passive vision systems99, classification tasks, impressive  results, many different video games100]

>> Named Entities are: 
[]


============================ Sentence 361 =============================

  Natural language understanding is another area in which deep learn- ing is poised to make a large impact over the next few years. 


>> Tokens are: 
[  , Natural, language, understanding, area, deep, learn-, ing, poised, large, impact, years, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('Natural', 'ADJ'), ('language', 'NOUN'), ('understanding', 'NOUN'), ('area', 'NOUN'), ('deep', 'ADJ'), ('learn-', 'ADJ'), ('ing', 'NOUN'), ('poised', 'VERB'), ('large', 'ADJ'), ('impact', 'NOUN'), ('years', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'nummod'), ('Natural', 'amod'), ('language', 'compound'), ('understanding', 'nsubj'), ('area', 'attr'), ('deep', 'amod'), ('learn-', 'compound'), ('ing', 'nsubjpass'), ('poised', 'relcl'), ('large', 'amod'), ('impact', 'dobj'), ('years', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[  , Natural], [Natural, language], [language, understanding], [understanding, area], [area, deep], [deep, learn-], [learn-, ing], [ing, poised], [poised, large], [large, impact], [impact, years], [years, .]]

>> Trigrams: 
[[  , Natural, language], [Natural, language, understanding], [language, understanding, area], [understanding, area, deep], [area, deep, learn-], [deep, learn-, ing], [learn-, ing, poised], [ing, poised, large], [poised, large, impact], [large, impact, years], [impact, years, .]]

>> Noun Phrases are: 
[  Natural language understanding, another area, deep learn- ing, a large impact, the next few years]

>> Named Entities are: 
[('the next few years', 'DATE')]


============================ Sentence 362 =============================

We expect  systems that use RNNs to understand sentences or whole documents  will become much better when they learn strategies for selectively  attending to one part at a time76,86. 


>> Tokens are: 
[expect,  , systems, use, RNNs, understand, sentences, documents,  , better, learn, strategies, selectively,  , attending, time76,86, .] 

>> PoS Tags are: 
[('expect', 'VERB'), (' ', 'SPACE'), ('systems', 'NOUN'), ('use', 'VERB'), ('RNNs', 'NOUN'), ('understand', 'VERB'), ('sentences', 'NOUN'), ('documents', 'NOUN'), (' ', 'SPACE'), ('better', 'ADJ'), ('learn', 'VERB'), ('strategies', 'NOUN'), ('selectively', 'ADV'), (' ', 'SPACE'), ('attending', 'VERB'), ('time76,86', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('expect', 'ROOT'), (' ', 'compound'), ('systems', 'dobj'), ('use', 'relcl'), ('RNNs', 'dobj'), ('understand', 'xcomp'), ('sentences', 'dobj'), ('documents', 'conj'), (' ', 'nsubj'), ('better', 'acomp'), ('learn', 'advcl'), ('strategies', 'dobj'), ('selectively', 'advmod'), (' ', 'pobj'), ('attending', 'acl'), ('time76,86', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[expect,  ], [ , systems], [systems, use], [use, RNNs], [RNNs, understand], [understand, sentences], [sentences, documents], [documents,  ], [ , better], [better, learn], [learn, strategies], [strategies, selectively], [selectively,  ], [ , attending], [attending, time76,86], [time76,86, .]]

>> Trigrams: 
[[expect,  , systems], [ , systems, use], [systems, use, RNNs], [use, RNNs, understand], [RNNs, understand, sentences], [understand, sentences, documents], [sentences, documents,  ], [documents,  , better], [ , better, learn], [better, learn, strategies], [learn, strategies, selectively], [strategies, selectively,  ], [selectively,  , attending], [ , attending, time76,86], [attending, time76,86, .]]

>> Noun Phrases are: 
[We,  systems, RNNs, sentences, whole documents, they, strategies, one part, a time76,86]

>> Named Entities are: 
[('one', 'CARDINAL')]


============================ Sentence 363 =============================

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 364 =============================

Ultimately, major progress in artificial intelligence will come about  through systems that combine representation learning with complex  reasoning. 


>> Tokens are: 
[Ultimately, ,, major, progress, artificial, intelligence, come,  , systems, combine, representation, learning, complex,  , reasoning, .] 

>> PoS Tags are: 
[('Ultimately', 'ADV'), (',', 'PUNCT'), ('major', 'ADJ'), ('progress', 'NOUN'), ('artificial', 'ADJ'), ('intelligence', 'NOUN'), ('come', 'VERB'), (' ', 'SPACE'), ('systems', 'NOUN'), ('combine', 'VERB'), ('representation', 'NOUN'), ('learning', 'VERB'), ('complex', 'ADJ'), (' ', 'SPACE'), ('reasoning', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Ultimately', 'advmod'), (',', 'punct'), ('major', 'amod'), ('progress', 'nsubj'), ('artificial', 'amod'), ('intelligence', 'pobj'), ('come', 'ROOT'), (' ', 'pobj'), ('systems', 'pobj'), ('combine', 'relcl'), ('representation', 'dobj'), ('learning', 'acl'), ('complex', 'amod'), (' ', 'compound'), ('reasoning', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Ultimately, ,], [,, major], [major, progress], [progress, artificial], [artificial, intelligence], [intelligence, come], [come,  ], [ , systems], [systems, combine], [combine, representation], [representation, learning], [learning, complex], [complex,  ], [ , reasoning], [reasoning, .]]

>> Trigrams: 
[[Ultimately, ,, major], [,, major, progress], [major, progress, artificial], [progress, artificial, intelligence], [artificial, intelligence, come], [intelligence, come,  ], [come,  , systems], [ , systems, combine], [systems, combine, representation], [combine, representation, learning], [representation, learning, complex], [learning, complex,  ], [complex,  , reasoning], [ , reasoning, .]]

>> Noun Phrases are: 
[major progress, artificial intelligence, systems, representation, complex  reasoning]

>> Named Entities are: 
[]


============================ Sentence 365 =============================

Although deep learning and simple reasoning have been  used for speech and handwriting recognition for a long time, new  paradigms are needed to replace rule-based manipulation of symbolic  expressions by operations on large vectors101. 


>> Tokens are: 
[deep, learning, simple, reasoning,  , speech, handwriting, recognition, long, time, ,, new,  , paradigms, needed, replace, rule, -, based, manipulation, symbolic,  , expressions, operations, large, vectors101, .] 

>> PoS Tags are: 
[('deep', 'ADJ'), ('learning', 'NOUN'), ('simple', 'ADJ'), ('reasoning', 'NOUN'), (' ', 'SPACE'), ('speech', 'NOUN'), ('handwriting', 'NOUN'), ('recognition', 'NOUN'), ('long', 'ADJ'), ('time', 'NOUN'), (',', 'PUNCT'), ('new', 'ADJ'), (' ', 'SPACE'), ('paradigms', 'NOUN'), ('needed', 'VERB'), ('replace', 'VERB'), ('rule', 'NOUN'), ('-', 'PUNCT'), ('based', 'VERB'), ('manipulation', 'NOUN'), ('symbolic', 'ADJ'), (' ', 'SPACE'), ('expressions', 'NOUN'), ('operations', 'NOUN'), ('large', 'ADJ'), ('vectors101', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('deep', 'amod'), ('learning', 'nsubjpass'), ('simple', 'amod'), ('reasoning', 'conj'), (' ', 'nsubjpass'), ('speech', 'pobj'), ('handwriting', 'conj'), ('recognition', 'pobj'), ('long', 'amod'), ('time', 'pobj'), (',', 'punct'), ('new', 'amod'), (' ', 'compound'), ('paradigms', 'nsubjpass'), ('needed', 'ROOT'), ('replace', 'advcl'), ('rule', 'npadvmod'), ('-', 'punct'), ('based', 'amod'), ('manipulation', 'dobj'), ('symbolic', 'amod'), (' ', 'compound'), ('expressions', 'pobj'), ('operations', 'pobj'), ('large', 'amod'), ('vectors101', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[deep, learning], [learning, simple], [simple, reasoning], [reasoning,  ], [ , speech], [speech, handwriting], [handwriting, recognition], [recognition, long], [long, time], [time, ,], [,, new], [new,  ], [ , paradigms], [paradigms, needed], [needed, replace], [replace, rule], [rule, -], [-, based], [based, manipulation], [manipulation, symbolic], [symbolic,  ], [ , expressions], [expressions, operations], [operations, large], [large, vectors101], [vectors101, .]]

>> Trigrams: 
[[deep, learning, simple], [learning, simple, reasoning], [simple, reasoning,  ], [reasoning,  , speech], [ , speech, handwriting], [speech, handwriting, recognition], [handwriting, recognition, long], [recognition, long, time], [long, time, ,], [time, ,, new], [,, new,  ], [new,  , paradigms], [ , paradigms, needed], [paradigms, needed, replace], [needed, replace, rule], [replace, rule, -], [rule, -, based], [-, based, manipulation], [based, manipulation, symbolic], [manipulation, symbolic,  ], [symbolic,  , expressions], [ , expressions, operations], [expressions, operations, large], [operations, large, vectors101], [large, vectors101, .]]

>> Noun Phrases are: 
[deep learning, simple reasoning, speech, handwriting, recognition, a long time, new  paradigms, rule-based manipulation, symbolic  expressions, operations, large vectors101]

>> Named Entities are: 
[]


============================ Sentence 366 =============================

■  Received 25 February; accepted 1 May 2015. 


>> Tokens are: 
[■,  , Received, 25, February, ;, accepted, 1, 2015, .] 

>> PoS Tags are: 
[('■', 'PUNCT'), (' ', 'SPACE'), ('Received', 'VERB'), ('25', 'NUM'), ('February', 'PROPN'), (';', 'PUNCT'), ('accepted', 'VERB'), ('1', 'NUM'), ('2015', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('■', 'punct'), (' ', 'nsubj'), ('Received', 'ROOT'), ('25', 'nummod'), ('February', 'dobj'), (';', 'punct'), ('accepted', 'conj'), ('1', 'nummod'), ('2015', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[■,  ], [ , Received], [Received, 25], [25, February], [February, ;], [;, accepted], [accepted, 1], [1, 2015], [2015, .]]

>> Trigrams: 
[[■,  , Received], [ , Received, 25], [Received, 25, February], [25, February, ;], [February, ;, accepted], [;, accepted, 1], [accepted, 1, 2015], [1, 2015, .]]

>> Noun Phrases are: 
[25 February]

>> Named Entities are: 
[('25 February', 'DATE'), ('1 May 2015', 'DATE')]


============================ Sentence 367 =============================

 1. 


>> Tokens are: 
[ , 1, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('1', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'ROOT'), ('1', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[ , 1], [1, .]]

>> Trigrams: 
[[ , 1, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('1', 'CARDINAL')]


============================ Sentence 368 =============================

Krizhevsky, A., Sutskever, I. & Hinton, G. ImageNet classification with deep  convolutional neural networks. 


>> Tokens are: 
[Krizhevsky, ,, A., ,, Sutskever, ,, I., &, Hinton, ,, G., ImageNet, classification, deep,  , convolutional, neural, networks, .] 

>> PoS Tags are: 
[('Krizhevsky', 'PROPN'), (',', 'PUNCT'), ('A.', 'PROPN'), (',', 'PUNCT'), ('Sutskever', 'PROPN'), (',', 'PUNCT'), ('I.', 'PROPN'), ('&', 'CCONJ'), ('Hinton', 'PROPN'), (',', 'PUNCT'), ('G.', 'PROPN'), ('ImageNet', 'PROPN'), ('classification', 'NOUN'), ('deep', 'ADJ'), (' ', 'SPACE'), ('convolutional', 'ADJ'), ('neural', 'ADJ'), ('networks', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Krizhevsky', 'ROOT'), (',', 'punct'), ('A.', 'conj'), (',', 'punct'), ('Sutskever', 'conj'), (',', 'punct'), ('I.', 'conj'), ('&', 'cc'), ('Hinton', 'conj'), (',', 'punct'), ('G.', 'compound'), ('ImageNet', 'compound'), ('classification', 'appos'), ('deep', 'amod'), (' ', 'nmod'), ('convolutional', 'amod'), ('neural', 'amod'), ('networks', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Krizhevsky, ,], [,, A.], [A., ,], [,, Sutskever], [Sutskever, ,], [,, I.], [I., &], [&, Hinton], [Hinton, ,], [,, G.], [G., ImageNet], [ImageNet, classification], [classification, deep], [deep,  ], [ , convolutional], [convolutional, neural], [neural, networks], [networks, .]]

>> Trigrams: 
[[Krizhevsky, ,, A.], [,, A., ,], [A., ,, Sutskever], [,, Sutskever, ,], [Sutskever, ,, I.], [,, I., &], [I., &, Hinton], [&, Hinton, ,], [Hinton, ,, G.], [,, G., ImageNet], [G., ImageNet, classification], [ImageNet, classification, deep], [classification, deep,  ], [deep,  , convolutional], [ , convolutional, neural], [convolutional, neural, networks], [neural, networks, .]]

>> Noun Phrases are: 
[Krizhevsky, A., Sutskever, I., Hinton, G. ImageNet classification, deep  convolutional neural networks]

>> Named Entities are: 
[('Krizhevsky, A.', 'ORG'), ('Sutskever', 'ORG'), ('I. & Hinton', 'ORG'), ('G. ImageNet', 'ORG')]


============================ Sentence 369 =============================

In Proc. 


>> Tokens are: 
[Proc, .] 

>> PoS Tags are: 
[('Proc', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Proc', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Proc, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Proc]

>> Named Entities are: 
[]


============================ Sentence 370 =============================

Advances in Neural Information   


>> Tokens are: 
[Advances, Neural, Information,  ] 

>> PoS Tags are: 
[('Advances', 'NOUN'), ('Neural', 'PROPN'), ('Information', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Advances', 'ROOT'), ('Neural', 'compound'), ('Information', 'compound'), (' ', 'pobj')]

>> Bigrams: 
[[Advances, Neural], [Neural, Information], [Information,  ]]

>> Trigrams: 
[[Advances, Neural, Information], [Neural, Information,  ]]

>> Noun Phrases are: 
[Advances]

>> Named Entities are: 
[]


============================ Sentence 371 =============================

Processing Systems 25 1090–1098 (2012). 


>> Tokens are: 
[Processing, Systems, 25, 1090–1098, (, 2012, ), .] 

>> PoS Tags are: 
[('Processing', 'PROPN'), ('Systems', 'PROPN'), ('25', 'NUM'), ('1090–1098', 'NUM'), ('(', 'PUNCT'), ('2012', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Processing', 'compound'), ('Systems', 'ROOT'), ('25', 'nummod'), ('1090–1098', 'appos'), ('(', 'punct'), ('2012', 'npadvmod'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Processing, Systems], [Systems, 25], [25, 1090–1098], [1090–1098, (], [(, 2012], [2012, )], [), .]]

>> Trigrams: 
[[Processing, Systems, 25], [Systems, 25, 1090–1098], [25, 1090–1098, (], [1090–1098, (, 2012], [(, 2012, )], [2012, ), .]]

>> Noun Phrases are: 
[Processing Systems]

>> Named Entities are: 
[('25 1090–1098', 'DATE'), ('2012', 'DATE')]


============================ Sentence 372 =============================

  This report was a breakthrough that used convolutional nets to almost halve  the error rate for object recognition, and precipitated the rapid adoption of  deep learning by the computer vision community. 


>> Tokens are: 
[  , report, breakthrough, convolutional, nets, halve,  , error, rate, object, recognition, ,, precipitated, rapid, adoption,  , deep, learning, computer, vision, community, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('report', 'NOUN'), ('breakthrough', 'NOUN'), ('convolutional', 'ADJ'), ('nets', 'NOUN'), ('halve', 'VERB'), (' ', 'SPACE'), ('error', 'NOUN'), ('rate', 'NOUN'), ('object', 'NOUN'), ('recognition', 'NOUN'), (',', 'PUNCT'), ('precipitated', 'VERB'), ('rapid', 'ADJ'), ('adoption', 'NOUN'), (' ', 'SPACE'), ('deep', 'ADJ'), ('learning', 'NOUN'), ('computer', 'NOUN'), ('vision', 'NOUN'), ('community', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'nsubj'), ('report', 'nsubj'), ('breakthrough', 'attr'), ('convolutional', 'amod'), ('nets', 'dobj'), ('halve', 'xcomp'), (' ', 'dobj'), ('error', 'compound'), ('rate', 'dobj'), ('object', 'compound'), ('recognition', 'pobj'), (',', 'punct'), ('precipitated', 'conj'), ('rapid', 'amod'), ('adoption', 'dobj'), (' ', 'pobj'), ('deep', 'amod'), ('learning', 'dobj'), ('computer', 'compound'), ('vision', 'compound'), ('community', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[  , report], [report, breakthrough], [breakthrough, convolutional], [convolutional, nets], [nets, halve], [halve,  ], [ , error], [error, rate], [rate, object], [object, recognition], [recognition, ,], [,, precipitated], [precipitated, rapid], [rapid, adoption], [adoption,  ], [ , deep], [deep, learning], [learning, computer], [computer, vision], [vision, community], [community, .]]

>> Trigrams: 
[[  , report, breakthrough], [report, breakthrough, convolutional], [breakthrough, convolutional, nets], [convolutional, nets, halve], [nets, halve,  ], [halve,  , error], [ , error, rate], [error, rate, object], [rate, object, recognition], [object, recognition, ,], [recognition, ,, precipitated], [,, precipitated, rapid], [precipitated, rapid, adoption], [rapid, adoption,  ], [adoption,  , deep], [ , deep, learning], [deep, learning, computer], [learning, computer, vision], [computer, vision, community], [vision, community, .]]

>> Noun Phrases are: 
[This report, a breakthrough, convolutional nets, the error rate, object recognition, the rapid adoption, deep learning, the computer vision community]

>> Named Entities are: 
[]


============================ Sentence 373 =============================

 2. 


>> Tokens are: 
[ , 2, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('2', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'ROOT'), ('2', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[ , 2], [2, .]]

>> Trigrams: 
[[ , 2, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('2', 'CARDINAL')]


============================ Sentence 374 =============================

Farabet, C., Couprie, C., Najman, L. & LeCun, Y. Learning hierarchical features for  scene labeling. 


>> Tokens are: 
[Farabet, ,, C., ,, Couprie, ,, C., ,, Najman, ,, L., &, LeCun, ,, Y., Learning, hierarchical, features,  , scene, labeling, .] 

>> PoS Tags are: 
[('Farabet', 'PROPN'), (',', 'PUNCT'), ('C.', 'PROPN'), (',', 'PUNCT'), ('Couprie', 'PROPN'), (',', 'PUNCT'), ('C.', 'PROPN'), (',', 'PUNCT'), ('Najman', 'PROPN'), (',', 'PUNCT'), ('L.', 'PROPN'), ('&', 'CCONJ'), ('LeCun', 'PROPN'), (',', 'PUNCT'), ('Y.', 'PROPN'), ('Learning', 'PROPN'), ('hierarchical', 'ADJ'), ('features', 'VERB'), (' ', 'SPACE'), ('scene', 'NOUN'), ('labeling', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Farabet', 'nsubj'), (',', 'punct'), ('C.', 'conj'), (',', 'punct'), ('Couprie', 'conj'), (',', 'punct'), ('C.', 'conj'), (',', 'punct'), ('Najman', 'conj'), (',', 'punct'), ('L.', 'conj'), ('&', 'cc'), ('LeCun', 'conj'), (',', 'punct'), ('Y.', 'compound'), ('Learning', 'appos'), ('hierarchical', 'amod'), ('features', 'ROOT'), (' ', 'nummod'), ('scene', 'compound'), ('labeling', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Farabet, ,], [,, C.], [C., ,], [,, Couprie], [Couprie, ,], [,, C.], [C., ,], [,, Najman], [Najman, ,], [,, L.], [L., &], [&, LeCun], [LeCun, ,], [,, Y.], [Y., Learning], [Learning, hierarchical], [hierarchical, features], [features,  ], [ , scene], [scene, labeling], [labeling, .]]

>> Trigrams: 
[[Farabet, ,, C.], [,, C., ,], [C., ,, Couprie], [,, Couprie, ,], [Couprie, ,, C.], [,, C., ,], [C., ,, Najman], [,, Najman, ,], [Najman, ,, L.], [,, L., &], [L., &, LeCun], [&, LeCun, ,], [LeCun, ,, Y.], [,, Y., Learning], [Y., Learning, hierarchical], [Learning, hierarchical, features], [hierarchical, features,  ], [features,  , scene], [ , scene, labeling], [scene, labeling, .]]

>> Noun Phrases are: 
[Farabet, C., Couprie, C., Najman, L., LeCun, Y. Learning,  scene labeling]

>> Named Entities are: 
[('Farabet', 'GPE'), ('C., Couprie, C.', 'ORG'), ('L. & LeCun', 'ORG'), ('Y. Learning', 'PERSON')]


============================ Sentence 375 =============================

IEEE Trans. 


>> Tokens are: 
[IEEE, Trans, .] 

>> PoS Tags are: 
[('IEEE', 'PROPN'), ('Trans', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('IEEE', 'compound'), ('Trans', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[IEEE, Trans], [Trans, .]]

>> Trigrams: 
[[IEEE, Trans, .]]

>> Noun Phrases are: 
[IEEE Trans]

>> Named Entities are: 
[('IEEE Trans', 'PERSON')]


============================ Sentence 376 =============================

Pattern Anal. 


>> Tokens are: 
[Pattern, Anal, .] 

>> PoS Tags are: 
[('Pattern', 'PROPN'), ('Anal', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Pattern', 'compound'), ('Anal', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Pattern, Anal], [Anal, .]]

>> Trigrams: 
[[Pattern, Anal, .]]

>> Noun Phrases are: 
[Pattern Anal]

>> Named Entities are: 
[]


============================ Sentence 377 =============================

Mach. 


>> Tokens are: 
[Mach, .] 

>> PoS Tags are: 
[('Mach', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Mach', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Mach, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('Mach', 'PERSON')]


============================ Sentence 378 =============================

Intell. 


>> Tokens are: 
[Intell, .] 

>> PoS Tags are: 
[('Intell', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Intell', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Intell, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Intell]

>> Named Entities are: 
[('Intell', 'GPE')]


============================ Sentence 379 =============================

35, 1915–1929 (2013). 


>> Tokens are: 
[35, ,, 1915–1929, (, 2013, ), .] 

>> PoS Tags are: 
[('35', 'NUM'), (',', 'PUNCT'), ('1915–1929', 'NUM'), ('(', 'PUNCT'), ('2013', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('35', 'nummod'), (',', 'punct'), ('1915–1929', 'ROOT'), ('(', 'punct'), ('2013', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[35, ,], [,, 1915–1929], [1915–1929, (], [(, 2013], [2013, )], [), .]]

>> Trigrams: 
[[35, ,, 1915–1929], [,, 1915–1929, (], [1915–1929, (, 2013], [(, 2013, )], [2013, ), .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('35', 'DATE'), ('1915–1929', 'DATE'), ('2013', 'DATE')]


============================ Sentence 380 =============================

  3. 


>> Tokens are: 
[  , 3, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('3', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('3', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 3], [3, .]]

>> Trigrams: 
[[  , 3, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('3', 'CARDINAL')]


============================ Sentence 381 =============================

Tompson, J., Jain, A., LeCun, Y. & Bregler, C. Joint training of a convolutional  network and a graphical model for human pose estimation. 


>> Tokens are: 
[Tompson, ,, J., ,, Jain, ,, A., ,, LeCun, ,, Y., &, Bregler, ,, C., Joint, training, convolutional,  , network, graphical, model, human, pose, estimation, .] 

>> PoS Tags are: 
[('Tompson', 'PROPN'), (',', 'PUNCT'), ('J.', 'PROPN'), (',', 'PUNCT'), ('Jain', 'PROPN'), (',', 'PUNCT'), ('A.', 'PROPN'), (',', 'PUNCT'), ('LeCun', 'PROPN'), (',', 'PUNCT'), ('Y.', 'PROPN'), ('&', 'CCONJ'), ('Bregler', 'PROPN'), (',', 'PUNCT'), ('C.', 'PROPN'), ('Joint', 'PROPN'), ('training', 'NOUN'), ('convolutional', 'ADJ'), (' ', 'SPACE'), ('network', 'NOUN'), ('graphical', 'ADJ'), ('model', 'NOUN'), ('human', 'ADJ'), ('pose', 'NOUN'), ('estimation', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Tompson', 'nmod'), (',', 'punct'), ('J.', 'appos'), (',', 'punct'), ('Jain', 'appos'), (',', 'punct'), ('A.', 'conj'), (',', 'punct'), ('LeCun', 'conj'), (',', 'punct'), ('Y.', 'conj'), ('&', 'cc'), ('Bregler', 'conj'), (',', 'punct'), ('C.', 'compound'), ('Joint', 'compound'), ('training', 'ROOT'), ('convolutional', 'amod'), (' ', 'compound'), ('network', 'pobj'), ('graphical', 'amod'), ('model', 'conj'), ('human', 'amod'), ('pose', 'compound'), ('estimation', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Tompson, ,], [,, J.], [J., ,], [,, Jain], [Jain, ,], [,, A.], [A., ,], [,, LeCun], [LeCun, ,], [,, Y.], [Y., &], [&, Bregler], [Bregler, ,], [,, C.], [C., Joint], [Joint, training], [training, convolutional], [convolutional,  ], [ , network], [network, graphical], [graphical, model], [model, human], [human, pose], [pose, estimation], [estimation, .]]

>> Trigrams: 
[[Tompson, ,, J.], [,, J., ,], [J., ,, Jain], [,, Jain, ,], [Jain, ,, A.], [,, A., ,], [A., ,, LeCun], [,, LeCun, ,], [LeCun, ,, Y.], [,, Y., &], [Y., &, Bregler], [&, Bregler, ,], [Bregler, ,, C.], [,, C., Joint], [C., Joint, training], [Joint, training, convolutional], [training, convolutional,  ], [convolutional,  , network], [ , network, graphical], [network, graphical, model], [graphical, model, human], [model, human, pose], [human, pose, estimation], [pose, estimation, .]]

>> Noun Phrases are: 
[J., Jain, A., LeCun, Y., Bregler, a convolutional  network, a graphical model, human pose estimation]

>> Named Entities are: 
[('Tompson', 'PERSON'), ('J., Jain, A.', 'ORG'), ('LeCun', 'ORG'), ('Y. & Bregler', 'ORG'), ('C. Joint', 'PERSON')]


============================ Sentence 382 =============================

In Proc. 


>> Tokens are: 
[Proc, .] 

>> PoS Tags are: 
[('Proc', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Proc', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Proc, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Proc]

>> Named Entities are: 
[]


============================ Sentence 383 =============================

Advances in   


>> Tokens are: 
[Advances,  ] 

>> PoS Tags are: 
[('Advances', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Advances', 'ROOT'), (' ', 'pobj')]

>> Bigrams: 
[[Advances,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Advances]

>> Named Entities are: 
[]


============================ Sentence 384 =============================

Neural Information Processing Systems 27 1799–1807 (2014). 


>> Tokens are: 
[Neural, Information, Processing, Systems, 27, 1799–1807, (, 2014, ), .] 

>> PoS Tags are: 
[('Neural', 'PROPN'), ('Information', 'PROPN'), ('Processing', 'PROPN'), ('Systems', 'PROPN'), ('27', 'NUM'), ('1799–1807', 'NUM'), ('(', 'PUNCT'), ('2014', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Neural', 'compound'), ('Information', 'compound'), ('Processing', 'compound'), ('Systems', 'ROOT'), ('27', 'nummod'), ('1799–1807', 'appos'), ('(', 'punct'), ('2014', 'npadvmod'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Neural, Information], [Information, Processing], [Processing, Systems], [Systems, 27], [27, 1799–1807], [1799–1807, (], [(, 2014], [2014, )], [), .]]

>> Trigrams: 
[[Neural, Information, Processing], [Information, Processing, Systems], [Processing, Systems, 27], [Systems, 27, 1799–1807], [27, 1799–1807, (], [1799–1807, (, 2014], [(, 2014, )], [2014, ), .]]

>> Noun Phrases are: 
[Neural Information Processing Systems]

>> Named Entities are: 
[('27 1799–1807', 'DATE'), ('2014', 'DATE')]


============================ Sentence 385 =============================

  4. 


>> Tokens are: 
[  , 4, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('4', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('4', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 4], [4, .]]

>> Trigrams: 
[[  , 4, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('4', 'CARDINAL')]


============================ Sentence 386 =============================

Szegedy, C. et al. 


>> Tokens are: 
[Szegedy, ,, C., et, al, .] 

>> PoS Tags are: 
[('Szegedy', 'PROPN'), (',', 'PUNCT'), ('C.', 'PROPN'), ('et', 'PROPN'), ('al', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Szegedy', 'ROOT'), (',', 'punct'), ('C.', 'appos'), ('et', 'compound'), ('al', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[Szegedy, ,], [,, C.], [C., et], [et, al], [al, .]]

>> Trigrams: 
[[Szegedy, ,, C.], [,, C., et], [C., et, al], [et, al, .]]

>> Noun Phrases are: 
[Szegedy, C., et al]

>> Named Entities are: 
[]


============================ Sentence 387 =============================

Going deeper with convolutions. 


>> Tokens are: 
[Going, deeper, convolutions, .] 

>> PoS Tags are: 
[('Going', 'VERB'), ('deeper', 'ADV'), ('convolutions', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Going', 'ROOT'), ('deeper', 'advmod'), ('convolutions', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Going, deeper], [deeper, convolutions], [convolutions, .]]

>> Trigrams: 
[[Going, deeper, convolutions], [deeper, convolutions, .]]

>> Noun Phrases are: 
[convolutions]

>> Named Entities are: 
[]


============================ Sentence 388 =============================

Preprint at http://arxiv.org/ abs/1409.4842 (2014). 


>> Tokens are: 
[Preprint, http://arxiv.org/, abs/1409.4842, (, 2014, ), .] 

>> PoS Tags are: 
[('Preprint', 'NOUN'), ('http://arxiv.org/', 'PRON'), ('abs/1409.4842', 'PROPN'), ('(', 'PUNCT'), ('2014', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Preprint', 'ROOT'), ('http://arxiv.org/', 'compound'), ('abs/1409.4842', 'pobj'), ('(', 'punct'), ('2014', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Preprint, http://arxiv.org/], [http://arxiv.org/, abs/1409.4842], [abs/1409.4842, (], [(, 2014], [2014, )], [), .]]

>> Trigrams: 
[[Preprint, http://arxiv.org/, abs/1409.4842], [http://arxiv.org/, abs/1409.4842, (], [abs/1409.4842, (, 2014], [(, 2014, )], [2014, ), .]]

>> Noun Phrases are: 
[Preprint, http://arxiv.org/ abs/1409.4842]

>> Named Entities are: 
[('2014', 'DATE')]


============================ Sentence 389 =============================

  5. 


>> Tokens are: 
[  , 5, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('5', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('5', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 5], [5, .]]

>> Trigrams: 
[[  , 5, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('5', 'CARDINAL')]


============================ Sentence 390 =============================

Mikolov, T., Deoras, A., Povey, D., Burget, L. & Cernocky, J. Strategies for training  large scale neural network language models. 


>> Tokens are: 
[Mikolov, ,, T., ,, Deoras, ,, A., ,, Povey, ,, D., ,, Burget, ,, L., &, Cernocky, ,, J., Strategies, training,  , large, scale, neural, network, language, models, .] 

>> PoS Tags are: 
[('Mikolov', 'PROPN'), (',', 'PUNCT'), ('T.', 'PROPN'), (',', 'PUNCT'), ('Deoras', 'PROPN'), (',', 'PUNCT'), ('A.', 'PROPN'), (',', 'PUNCT'), ('Povey', 'PROPN'), (',', 'PUNCT'), ('D.', 'PROPN'), (',', 'PUNCT'), ('Burget', 'PROPN'), (',', 'PUNCT'), ('L.', 'PROPN'), ('&', 'CCONJ'), ('Cernocky', 'PROPN'), (',', 'PUNCT'), ('J.', 'PROPN'), ('Strategies', 'PROPN'), ('training', 'VERB'), (' ', 'SPACE'), ('large', 'ADJ'), ('scale', 'NOUN'), ('neural', 'ADJ'), ('network', 'NOUN'), ('language', 'NOUN'), ('models', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Mikolov', 'ROOT'), (',', 'punct'), ('T.', 'conj'), (',', 'punct'), ('Deoras', 'conj'), (',', 'punct'), ('A.', 'conj'), (',', 'punct'), ('Povey', 'conj'), (',', 'punct'), ('D.', 'conj'), (',', 'punct'), ('Burget', 'conj'), (',', 'punct'), ('L.', 'conj'), ('&', 'cc'), ('Cernocky', 'conj'), (',', 'punct'), ('J.', 'compound'), ('Strategies', 'conj'), ('training', 'pcomp'), (' ', 'nmod'), ('large', 'amod'), ('scale', 'compound'), ('neural', 'amod'), ('network', 'compound'), ('language', 'compound'), ('models', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Mikolov, ,], [,, T.], [T., ,], [,, Deoras], [Deoras, ,], [,, A.], [A., ,], [,, Povey], [Povey, ,], [,, D.], [D., ,], [,, Burget], [Burget, ,], [,, L.], [L., &], [&, Cernocky], [Cernocky, ,], [,, J.], [J., Strategies], [Strategies, training], [training,  ], [ , large], [large, scale], [scale, neural], [neural, network], [network, language], [language, models], [models, .]]

>> Trigrams: 
[[Mikolov, ,, T.], [,, T., ,], [T., ,, Deoras], [,, Deoras, ,], [Deoras, ,, A.], [,, A., ,], [A., ,, Povey], [,, Povey, ,], [Povey, ,, D.], [,, D., ,], [D., ,, Burget], [,, Burget, ,], [Burget, ,, L.], [,, L., &], [L., &, Cernocky], [&, Cernocky, ,], [Cernocky, ,, J.], [,, J., Strategies], [J., Strategies, training], [Strategies, training,  ], [training,  , large], [ , large, scale], [large, scale, neural], [scale, neural, network], [neural, network, language], [network, language, models], [language, models, .]]

>> Noun Phrases are: 
[Mikolov, T., Deoras, A., Povey, D., Burget, L., Cernocky, J. Strategies,  large scale neural network language models]

>> Named Entities are: 
[('Povey', 'GPE'), ('D.', 'NORP'), ('Burget', 'ORG'), ('L. & Cernocky', 'ORG')]


============================ Sentence 391 =============================

In Proc. 


>> Tokens are: 
[Proc, .] 

>> PoS Tags are: 
[('Proc', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Proc', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Proc, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Proc]

>> Named Entities are: 
[]


============================ Sentence 392 =============================

Automatic Speech  Recognition and Understanding 196–201 (2011). 


>> Tokens are: 
[Automatic, Speech,  , Recognition, Understanding, 196–201, (, 2011, ), .] 

>> PoS Tags are: 
[('Automatic', 'ADJ'), ('Speech', 'PROPN'), (' ', 'SPACE'), ('Recognition', 'PROPN'), ('Understanding', 'PROPN'), ('196–201', 'NUM'), ('(', 'PUNCT'), ('2011', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Automatic', 'amod'), ('Speech', 'nmod'), (' ', 'nummod'), ('Recognition', 'ROOT'), ('Understanding', 'conj'), ('196–201', 'appos'), ('(', 'punct'), ('2011', 'npadvmod'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Automatic, Speech], [Speech,  ], [ , Recognition], [Recognition, Understanding], [Understanding, 196–201], [196–201, (], [(, 2011], [2011, )], [), .]]

>> Trigrams: 
[[Automatic, Speech,  ], [Speech,  , Recognition], [ , Recognition, Understanding], [Recognition, Understanding, 196–201], [Understanding, 196–201, (], [196–201, (, 2011], [(, 2011, )], [2011, ), .]]

>> Noun Phrases are: 
[Automatic Speech  Recognition, Understanding]

>> Named Entities are: 
[('Recognition', 'ORG'), ('196–201', 'CARDINAL'), ('2011', 'DATE')]


============================ Sentence 393 =============================

  6. 


>> Tokens are: 
[  , 6, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('6', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('6', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 6], [6, .]]

>> Trigrams: 
[[  , 6, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('6', 'CARDINAL')]


============================ Sentence 394 =============================

Hinton, G. et al. 


>> Tokens are: 
[Hinton, ,, G., et, al, .] 

>> PoS Tags are: 
[('Hinton', 'PROPN'), (',', 'PUNCT'), ('G.', 'PROPN'), ('et', 'PROPN'), ('al', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Hinton', 'ROOT'), (',', 'punct'), ('G.', 'compound'), ('et', 'compound'), ('al', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[Hinton, ,], [,, G.], [G., et], [et, al], [al, .]]

>> Trigrams: 
[[Hinton, ,, G.], [,, G., et], [G., et, al], [et, al, .]]

>> Noun Phrases are: 
[Hinton, G. et al]

>> Named Entities are: 
[('Hinton', 'GPE')]


============================ Sentence 395 =============================

Deep neural networks for acoustic modeling in speech  recognition. 


>> Tokens are: 
[Deep, neural, networks, acoustic, modeling, speech,  , recognition, .] 

>> PoS Tags are: 
[('Deep', 'ADJ'), ('neural', 'ADJ'), ('networks', 'NOUN'), ('acoustic', 'ADJ'), ('modeling', 'NOUN'), ('speech', 'NOUN'), (' ', 'SPACE'), ('recognition', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Deep', 'amod'), ('neural', 'amod'), ('networks', 'ROOT'), ('acoustic', 'amod'), ('modeling', 'pobj'), ('speech', 'pobj'), (' ', 'compound'), ('recognition', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[Deep, neural], [neural, networks], [networks, acoustic], [acoustic, modeling], [modeling, speech], [speech,  ], [ , recognition], [recognition, .]]

>> Trigrams: 
[[Deep, neural, networks], [neural, networks, acoustic], [networks, acoustic, modeling], [acoustic, modeling, speech], [modeling, speech,  ], [speech,  , recognition], [ , recognition, .]]

>> Noun Phrases are: 
[Deep neural networks, acoustic modeling, speech,  recognition]

>> Named Entities are: 
[]


============================ Sentence 396 =============================

IEEE Signal Processing Magazine 29, 82–97 (2012). 


>> Tokens are: 
[IEEE, Signal, Processing, Magazine, 29, ,, 82–97, (, 2012, ), .] 

>> PoS Tags are: 
[('IEEE', 'PROPN'), ('Signal', 'PROPN'), ('Processing', 'PROPN'), ('Magazine', 'PROPN'), ('29', 'NUM'), (',', 'PUNCT'), ('82–97', 'NUM'), ('(', 'PUNCT'), ('2012', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('IEEE', 'compound'), ('Signal', 'compound'), ('Processing', 'compound'), ('Magazine', 'ROOT'), ('29', 'nummod'), (',', 'punct'), ('82–97', 'appos'), ('(', 'punct'), ('2012', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[IEEE, Signal], [Signal, Processing], [Processing, Magazine], [Magazine, 29], [29, ,], [,, 82–97], [82–97, (], [(, 2012], [2012, )], [), .]]

>> Trigrams: 
[[IEEE, Signal, Processing], [Signal, Processing, Magazine], [Processing, Magazine, 29], [Magazine, 29, ,], [29, ,, 82–97], [,, 82–97, (], [82–97, (, 2012], [(, 2012, )], [2012, ), .]]

>> Noun Phrases are: 
[IEEE Signal Processing Magazine]

>> Named Entities are: 
[('IEEE Signal Processing Magazine', 'ORG'), ('29', 'CARDINAL'), ('2012', 'DATE')]


============================ Sentence 397 =============================

  This joint paper from the major speech recognition laboratories, summarizing  the breakthrough achieved with deep learning on the task of phonetic  classification for automatic speech recognition, was the first major industrial  application of deep learning. 


>> Tokens are: 
[  , joint, paper, major, speech, recognition, laboratories, ,, summarizing,  , breakthrough, achieved, deep, learning, task, phonetic,  , classification, automatic, speech, recognition, ,, major, industrial,  , application, deep, learning, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('joint', 'ADJ'), ('paper', 'NOUN'), ('major', 'ADJ'), ('speech', 'NOUN'), ('recognition', 'NOUN'), ('laboratories', 'NOUN'), (',', 'PUNCT'), ('summarizing', 'VERB'), (' ', 'SPACE'), ('breakthrough', 'NOUN'), ('achieved', 'VERB'), ('deep', 'ADJ'), ('learning', 'NOUN'), ('task', 'NOUN'), ('phonetic', 'ADJ'), (' ', 'SPACE'), ('classification', 'NOUN'), ('automatic', 'ADJ'), ('speech', 'NOUN'), ('recognition', 'NOUN'), (',', 'PUNCT'), ('major', 'ADJ'), ('industrial', 'ADJ'), (' ', 'SPACE'), ('application', 'NOUN'), ('deep', 'ADJ'), ('learning', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'nmod'), ('joint', 'amod'), ('paper', 'nsubj'), ('major', 'amod'), ('speech', 'compound'), ('recognition', 'compound'), ('laboratories', 'pobj'), (',', 'punct'), ('summarizing', 'advcl'), (' ', 'dobj'), ('breakthrough', 'dobj'), ('achieved', 'acl'), ('deep', 'amod'), ('learning', 'pobj'), ('task', 'pobj'), ('phonetic', 'amod'), (' ', 'compound'), ('classification', 'pobj'), ('automatic', 'amod'), ('speech', 'compound'), ('recognition', 'pobj'), (',', 'punct'), ('major', 'amod'), ('industrial', 'amod'), (' ', 'compound'), ('application', 'attr'), ('deep', 'amod'), ('learning', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[  , joint], [joint, paper], [paper, major], [major, speech], [speech, recognition], [recognition, laboratories], [laboratories, ,], [,, summarizing], [summarizing,  ], [ , breakthrough], [breakthrough, achieved], [achieved, deep], [deep, learning], [learning, task], [task, phonetic], [phonetic,  ], [ , classification], [classification, automatic], [automatic, speech], [speech, recognition], [recognition, ,], [,, major], [major, industrial], [industrial,  ], [ , application], [application, deep], [deep, learning], [learning, .]]

>> Trigrams: 
[[  , joint, paper], [joint, paper, major], [paper, major, speech], [major, speech, recognition], [speech, recognition, laboratories], [recognition, laboratories, ,], [laboratories, ,, summarizing], [,, summarizing,  ], [summarizing,  , breakthrough], [ , breakthrough, achieved], [breakthrough, achieved, deep], [achieved, deep, learning], [deep, learning, task], [learning, task, phonetic], [task, phonetic,  ], [phonetic,  , classification], [ , classification, automatic], [classification, automatic, speech], [automatic, speech, recognition], [speech, recognition, ,], [recognition, ,, major], [,, major, industrial], [major, industrial,  ], [industrial,  , application], [ , application, deep], [application, deep, learning], [deep, learning, .]]

>> Noun Phrases are: 
[  This joint paper, the major speech recognition laboratories, the breakthrough, deep learning, the task, phonetic  classification, automatic speech recognition, the first major industrial  application, deep learning]

>> Named Entities are: 
[('first', 'ORDINAL')]


============================ Sentence 398 =============================

 7. 


>> Tokens are: 
[ , 7, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('7', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'ROOT'), ('7', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[ , 7], [7, .]]

>> Trigrams: 
[[ , 7, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('7', 'CARDINAL')]


============================ Sentence 399 =============================

Sainath, T., Mohamed, A.-R., Kingsbury, B. & Ramabhadran, B. Deep  convolutional neural networks for LVCSR. 


>> Tokens are: 
[Sainath, ,, T., ,, Mohamed, ,, A.-R., ,, Kingsbury, ,, B., &, Ramabhadran, ,, B., Deep,  , convolutional, neural, networks, LVCSR, .] 

>> PoS Tags are: 
[('Sainath', 'PROPN'), (',', 'PUNCT'), ('T.', 'PROPN'), (',', 'PUNCT'), ('Mohamed', 'PROPN'), (',', 'PUNCT'), ('A.-R.', 'PROPN'), (',', 'PUNCT'), ('Kingsbury', 'PROPN'), (',', 'PUNCT'), ('B.', 'PROPN'), ('&', 'CCONJ'), ('Ramabhadran', 'PROPN'), (',', 'PUNCT'), ('B.', 'PROPN'), ('Deep', 'PROPN'), (' ', 'SPACE'), ('convolutional', 'ADJ'), ('neural', 'ADJ'), ('networks', 'NOUN'), ('LVCSR', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Sainath', 'nmod'), (',', 'punct'), ('T.', 'conj'), (',', 'punct'), ('Mohamed', 'conj'), (',', 'punct'), ('A.-R.', 'conj'), (',', 'punct'), ('Kingsbury', 'conj'), (',', 'punct'), ('B.', 'conj'), ('&', 'cc'), ('Ramabhadran', 'conj'), (',', 'punct'), ('B.', 'compound'), ('Deep', 'appos'), (' ', 'nmod'), ('convolutional', 'amod'), ('neural', 'amod'), ('networks', 'ROOT'), ('LVCSR', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Sainath, ,], [,, T.], [T., ,], [,, Mohamed], [Mohamed, ,], [,, A.-R.], [A.-R., ,], [,, Kingsbury], [Kingsbury, ,], [,, B.], [B., &], [&, Ramabhadran], [Ramabhadran, ,], [,, B.], [B., Deep], [Deep,  ], [ , convolutional], [convolutional, neural], [neural, networks], [networks, LVCSR], [LVCSR, .]]

>> Trigrams: 
[[Sainath, ,, T.], [,, T., ,], [T., ,, Mohamed], [,, Mohamed, ,], [Mohamed, ,, A.-R.], [,, A.-R., ,], [A.-R., ,, Kingsbury], [,, Kingsbury, ,], [Kingsbury, ,, B.], [,, B., &], [B., &, Ramabhadran], [&, Ramabhadran, ,], [Ramabhadran, ,, B.], [,, B., Deep], [B., Deep,  ], [Deep,  , convolutional], [ , convolutional, neural], [convolutional, neural, networks], [neural, networks, LVCSR], [networks, LVCSR, .]]

>> Noun Phrases are: 
[B. Deep, LVCSR]

>> Named Entities are: 
[('Kingsbury', 'ORG'), ('B. & Ramabhadran', 'ORG'), ('B. Deep', 'PERSON'), ('LVCSR', 'ORG')]


============================ Sentence 400 =============================

In Proc. 


>> Tokens are: 
[Proc, .] 

>> PoS Tags are: 
[('Proc', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Proc', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Proc, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Proc]

>> Named Entities are: 
[]


============================ Sentence 401 =============================

Acoustics, Speech and Signal  Processing 8614–8618 (2013). 


>> Tokens are: 
[Acoustics, ,, Speech, Signal,  , Processing, 8614–8618, (, 2013, ), .] 

>> PoS Tags are: 
[('Acoustics', 'NOUN'), (',', 'PUNCT'), ('Speech', 'PROPN'), ('Signal', 'PROPN'), (' ', 'SPACE'), ('Processing', 'VERB'), ('8614–8618', 'NUM'), ('(', 'PUNCT'), ('2013', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Acoustics', 'nsubj'), (',', 'punct'), ('Speech', 'conj'), ('Signal', 'compound'), (' ', 'conj'), ('Processing', 'ROOT'), ('8614–8618', 'dobj'), ('(', 'punct'), ('2013', 'npadvmod'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Acoustics, ,], [,, Speech], [Speech, Signal], [Signal,  ], [ , Processing], [Processing, 8614–8618], [8614–8618, (], [(, 2013], [2013, )], [), .]]

>> Trigrams: 
[[Acoustics, ,, Speech], [,, Speech, Signal], [Speech, Signal,  ], [Signal,  , Processing], [ , Processing, 8614–8618], [Processing, 8614–8618, (], [8614–8618, (, 2013], [(, 2013, )], [2013, ), .]]

>> Noun Phrases are: 
[Acoustics, Speech]

>> Named Entities are: 
[('Speech', 'ORG'), ('2013', 'DATE')]


============================ Sentence 402 =============================

  8. 


>> Tokens are: 
[  , 8, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('8', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('8', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 8], [8, .]]

>> Trigrams: 
[[  , 8, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('8', 'CARDINAL')]


============================ Sentence 403 =============================

Ma, J., Sheridan, R. P., Liaw, A., Dahl, G. E. & Svetnik, V. Deep neural nets as a  method for quantitative structure-activity relationships. 


>> Tokens are: 
[Ma, ,, J., ,, Sheridan, ,, R., P., ,, Liaw, ,, A., ,, Dahl, ,, G., E., &, Svetnik, ,, V., Deep, neural, nets,  , method, quantitative, structure, -, activity, relationships, .] 

>> PoS Tags are: 
[('Ma', 'PROPN'), (',', 'PUNCT'), ('J.', 'PROPN'), (',', 'PUNCT'), ('Sheridan', 'PROPN'), (',', 'PUNCT'), ('R.', 'PROPN'), ('P.', 'PROPN'), (',', 'PUNCT'), ('Liaw', 'PROPN'), (',', 'PUNCT'), ('A.', 'PROPN'), (',', 'PUNCT'), ('Dahl', 'PROPN'), (',', 'PUNCT'), ('G.', 'PROPN'), ('E.', 'PROPN'), ('&', 'CCONJ'), ('Svetnik', 'PROPN'), (',', 'PUNCT'), ('V.', 'PROPN'), ('Deep', 'ADJ'), ('neural', 'ADJ'), ('nets', 'NOUN'), (' ', 'SPACE'), ('method', 'NOUN'), ('quantitative', 'ADJ'), ('structure', 'NOUN'), ('-', 'PUNCT'), ('activity', 'NOUN'), ('relationships', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Ma', 'ROOT'), (',', 'punct'), ('J.', 'conj'), (',', 'punct'), ('Sheridan', 'conj'), (',', 'punct'), ('R.', 'compound'), ('P.', 'conj'), (',', 'punct'), ('Liaw', 'conj'), (',', 'punct'), ('A.', 'conj'), (',', 'punct'), ('Dahl', 'conj'), (',', 'punct'), ('G.', 'compound'), ('E.', 'conj'), ('&', 'cc'), ('Svetnik', 'conj'), (',', 'punct'), ('V.', 'compound'), ('Deep', 'amod'), ('neural', 'amod'), ('nets', 'appos'), (' ', 'compound'), ('method', 'pobj'), ('quantitative', 'amod'), ('structure', 'compound'), ('-', 'punct'), ('activity', 'compound'), ('relationships', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Ma, ,], [,, J.], [J., ,], [,, Sheridan], [Sheridan, ,], [,, R.], [R., P.], [P., ,], [,, Liaw], [Liaw, ,], [,, A.], [A., ,], [,, Dahl], [Dahl, ,], [,, G.], [G., E.], [E., &], [&, Svetnik], [Svetnik, ,], [,, V.], [V., Deep], [Deep, neural], [neural, nets], [nets,  ], [ , method], [method, quantitative], [quantitative, structure], [structure, -], [-, activity], [activity, relationships], [relationships, .]]

>> Trigrams: 
[[Ma, ,, J.], [,, J., ,], [J., ,, Sheridan], [,, Sheridan, ,], [Sheridan, ,, R.], [,, R., P.], [R., P., ,], [P., ,, Liaw], [,, Liaw, ,], [Liaw, ,, A.], [,, A., ,], [A., ,, Dahl], [,, Dahl, ,], [Dahl, ,, G.], [,, G., E.], [G., E., &], [E., &, Svetnik], [&, Svetnik, ,], [Svetnik, ,, V.], [,, V., Deep], [V., Deep, neural], [Deep, neural, nets], [neural, nets,  ], [nets,  , method], [ , method, quantitative], [method, quantitative, structure], [quantitative, structure, -], [structure, -, activity], [-, activity, relationships], [activity, relationships, .]]

>> Noun Phrases are: 
[Ma, J., Sheridan, R. P., Liaw, A., Dahl, G. E., Svetnik, V. Deep neural nets, a  method, quantitative structure-activity relationships]

>> Named Entities are: 
[('Sheridan', 'NORP'), ('R. P.', 'PERSON'), ('Liaw', 'PERSON'), ('Dahl', 'ORG'), ('G. E. & Svetnik', 'ORG'), ('V. Deep', 'PERSON')]


============================ Sentence 404 =============================

J. Chem. 


>> Tokens are: 
[J., Chem, .] 

>> PoS Tags are: 
[('J.', 'PROPN'), ('Chem', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('J.', 'compound'), ('Chem', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[J., Chem], [Chem, .]]

>> Trigrams: 
[[J., Chem, .]]

>> Noun Phrases are: 
[J. Chem]

>> Named Entities are: 
[('J. Chem', 'PERSON')]


============================ Sentence 405 =============================

Inf. 


>> Tokens are: 
[Inf, .] 

>> PoS Tags are: 
[('Inf', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Inf', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Inf, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Inf]

>> Named Entities are: 
[]


============================ Sentence 406 =============================

Model. 


>> Tokens are: 
[Model, .] 

>> PoS Tags are: 
[('Model', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Model', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Model, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Model]

>> Named Entities are: 
[]


============================ Sentence 407 =============================

55,   


>> Tokens are: 
[55, ,,  ] 

>> PoS Tags are: 
[('55', 'NUM'), (',', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('55', 'ROOT'), (',', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[55, ,], [,,  ]]

>> Trigrams: 
[[55, ,,  ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('55', 'DATE')]


============================ Sentence 408 =============================

263–274 (2015). 


>> Tokens are: 
[263–274, (, 2015, ), .] 

>> PoS Tags are: 
[('263–274', 'NUM'), ('(', 'PUNCT'), ('2015', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('263–274', 'ROOT'), ('(', 'punct'), ('2015', 'npadvmod'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[263–274, (], [(, 2015], [2015, )], [), .]]

>> Trigrams: 
[[263–274, (, 2015], [(, 2015, )], [2015, ), .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('263–274', 'CARDINAL'), ('2015', 'DATE')]


============================ Sentence 409 =============================

  9. 


>> Tokens are: 
[  , 9, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('9', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('9', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 9], [9, .]]

>> Trigrams: 
[[  , 9, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('9', 'CARDINAL')]


============================ Sentence 410 =============================

Ciodaro, T., Deva, D., de Seixas, J. & Damazio, D. Online particle detection with  neural networks based on topological calorimetry information. 


>> Tokens are: 
[Ciodaro, ,, T., ,, Deva, ,, D., ,, de, Seixas, ,, J., &, Damazio, ,, D., Online, particle, detection,  , neural, networks, based, topological, calorimetry, information, .] 

>> PoS Tags are: 
[('Ciodaro', 'PROPN'), (',', 'PUNCT'), ('T.', 'PROPN'), (',', 'PUNCT'), ('Deva', 'PROPN'), (',', 'PUNCT'), ('D.', 'PROPN'), (',', 'PUNCT'), ('de', 'PROPN'), ('Seixas', 'PROPN'), (',', 'PUNCT'), ('J.', 'PROPN'), ('&', 'CCONJ'), ('Damazio', 'PROPN'), (',', 'PUNCT'), ('D.', 'PROPN'), ('Online', 'PROPN'), ('particle', 'NOUN'), ('detection', 'NOUN'), (' ', 'SPACE'), ('neural', 'ADJ'), ('networks', 'NOUN'), ('based', 'VERB'), ('topological', 'ADJ'), ('calorimetry', 'NOUN'), ('information', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Ciodaro', 'ROOT'), (',', 'punct'), ('T.', 'npadvmod'), (',', 'punct'), ('Deva', 'conj'), (',', 'punct'), ('D.', 'conj'), (',', 'punct'), ('de', 'nmod'), ('Seixas', 'conj'), (',', 'punct'), ('J.', 'conj'), ('&', 'cc'), ('Damazio', 'conj'), (',', 'punct'), ('D.', 'compound'), ('Online', 'compound'), ('particle', 'compound'), ('detection', 'appos'), (' ', 'nmod'), ('neural', 'amod'), ('networks', 'pobj'), ('based', 'acl'), ('topological', 'amod'), ('calorimetry', 'compound'), ('information', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Ciodaro, ,], [,, T.], [T., ,], [,, Deva], [Deva, ,], [,, D.], [D., ,], [,, de], [de, Seixas], [Seixas, ,], [,, J.], [J., &], [&, Damazio], [Damazio, ,], [,, D.], [D., Online], [Online, particle], [particle, detection], [detection,  ], [ , neural], [neural, networks], [networks, based], [based, topological], [topological, calorimetry], [calorimetry, information], [information, .]]

>> Trigrams: 
[[Ciodaro, ,, T.], [,, T., ,], [T., ,, Deva], [,, Deva, ,], [Deva, ,, D.], [,, D., ,], [D., ,, de], [,, de, Seixas], [de, Seixas, ,], [Seixas, ,, J.], [,, J., &], [J., &, Damazio], [&, Damazio, ,], [Damazio, ,, D.], [,, D., Online], [D., Online, particle], [Online, particle, detection], [particle, detection,  ], [detection,  , neural], [ , neural, networks], [neural, networks, based], [networks, based, topological], [based, topological, calorimetry], [topological, calorimetry, information], [calorimetry, information, .]]

>> Noun Phrases are: 
[Ciodaro, D. Online particle detection,  neural networks, topological calorimetry information]

>> Named Entities are: 
[('Deva', 'PERSON'), ('D.', 'NORP'), ('de Seixas', 'PERSON'), ('J. & Damazio', 'ORG'), ('D.', 'NORP')]


============================ Sentence 411 =============================

J. Phys. 


>> Tokens are: 
[J., Phys, .] 

>> PoS Tags are: 
[('J.', 'PROPN'), ('Phys', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('J.', 'compound'), ('Phys', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[J., Phys], [Phys, .]]

>> Trigrams: 
[[J., Phys, .]]

>> Noun Phrases are: 
[J. Phys]

>> Named Entities are: 
[('J. Phys', 'PERSON')]


============================ Sentence 412 =============================

Conf. 


>> Tokens are: 
[Conf, .] 

>> PoS Tags are: 
[('Conf', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Conf', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Conf, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Conf]

>> Named Entities are: 
[('Conf', 'PERSON')]


============================ Sentence 413 =============================

 Series 368, 012030 (2012). 


>> Tokens are: 
[ , Series, 368, ,, 012030, (, 2012, ), .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('Series', 'NOUN'), ('368', 'NUM'), (',', 'PUNCT'), ('012030', 'NUM'), ('(', 'PUNCT'), ('2012', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'compound'), ('Series', 'ROOT'), ('368', 'appos'), (',', 'punct'), ('012030', 'appos'), ('(', 'punct'), ('2012', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[ , Series], [Series, 368], [368, ,], [,, 012030], [012030, (], [(, 2012], [2012, )], [), .]]

>> Trigrams: 
[[ , Series, 368], [Series, 368, ,], [368, ,, 012030], [,, 012030, (], [012030, (, 2012], [(, 2012, )], [2012, ), .]]

>> Noun Phrases are: 
[ Series]

>> Named Entities are: 
[('368', 'CARDINAL'), ('2012', 'DATE')]


============================ Sentence 414 =============================

  10. 


>> Tokens are: 
[  , 10, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('10', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('10', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 10], [10, .]]

>> Trigrams: 
[[  , 10, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('10', 'CARDINAL')]


============================ Sentence 415 =============================

Kaggle. 


>> Tokens are: 
[Kaggle, .] 

>> PoS Tags are: 
[('Kaggle', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Kaggle', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Kaggle, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Kaggle]

>> Named Entities are: 
[('Kaggle', 'PERSON')]


============================ Sentence 416 =============================

Higgs boson machine learning challenge. 


>> Tokens are: 
[Higgs, boson, machine, learning, challenge, .] 

>> PoS Tags are: 
[('Higgs', 'PROPN'), ('boson', 'NOUN'), ('machine', 'NOUN'), ('learning', 'NOUN'), ('challenge', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Higgs', 'compound'), ('boson', 'compound'), ('machine', 'compound'), ('learning', 'compound'), ('challenge', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Higgs, boson], [boson, machine], [machine, learning], [learning, challenge], [challenge, .]]

>> Trigrams: 
[[Higgs, boson, machine], [boson, machine, learning], [machine, learning, challenge], [learning, challenge, .]]

>> Noun Phrases are: 
[Higgs boson machine learning challenge]

>> Named Entities are: 
[]


============================ Sentence 417 =============================

Kaggle https://www.kaggle. 


>> Tokens are: 
[Kaggle, https://www.kaggle, .] 

>> PoS Tags are: 
[('Kaggle', 'PROPN'), ('https://www.kaggle', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Kaggle', 'compound'), ('https://www.kaggle', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Kaggle, https://www.kaggle], [https://www.kaggle, .]]

>> Trigrams: 
[[Kaggle, https://www.kaggle, .]]

>> Noun Phrases are: 
[Kaggle https://www.kaggle]

>> Named Entities are: 
[('Kaggle https://www.kaggle', 'PERSON')]


============================ Sentence 418 =============================

com/c/higgs-boson (2014). 


>> Tokens are: 
[com, /, c, /, higgs, -, boson, (, 2014, ), .] 

>> PoS Tags are: 
[('com', 'NOUN'), ('/', 'SYM'), ('c', 'NOUN'), ('/', 'SYM'), ('higgs', 'NOUN'), ('-', 'PUNCT'), ('boson', 'NOUN'), ('(', 'PUNCT'), ('2014', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('com', 'nmod'), ('/', 'punct'), ('c', 'nmod'), ('/', 'punct'), ('higgs', 'compound'), ('-', 'punct'), ('boson', 'ROOT'), ('(', 'punct'), ('2014', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[com, /], [/, c], [c, /], [/, higgs], [higgs, -], [-, boson], [boson, (], [(, 2014], [2014, )], [), .]]

>> Trigrams: 
[[com, /, c], [/, c, /], [c, /, higgs], [/, higgs, -], [higgs, -, boson], [-, boson, (], [boson, (, 2014], [(, 2014, )], [2014, ), .]]

>> Noun Phrases are: 
[com/c/higgs-boson]

>> Named Entities are: 
[('2014', 'DATE')]


============================ Sentence 419 =============================

  11. 


>> Tokens are: 
[  , 11, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('11', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('11', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 11], [11, .]]

>> Trigrams: 
[[  , 11, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('11', 'CARDINAL')]


============================ Sentence 420 =============================

Helmstaedter, M. et al. 


>> Tokens are: 
[Helmstaedter, ,, M., et, al, .] 

>> PoS Tags are: 
[('Helmstaedter', 'PROPN'), (',', 'PUNCT'), ('M.', 'PROPN'), ('et', 'NOUN'), ('al', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Helmstaedter', 'ROOT'), (',', 'punct'), ('M.', 'compound'), ('et', 'compound'), ('al', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[Helmstaedter, ,], [,, M.], [M., et], [et, al], [al, .]]

>> Trigrams: 
[[Helmstaedter, ,, M.], [,, M., et], [M., et, al], [et, al, .]]

>> Noun Phrases are: 
[Helmstaedter, M. et al]

>> Named Entities are: 
[]


============================ Sentence 421 =============================

Connectomic reconstruction of the inner plexiform layer  in the mouse retina. 


>> Tokens are: 
[Connectomic, reconstruction, inner, plexiform, layer,  , mouse, retina, .] 

>> PoS Tags are: 
[('Connectomic', 'ADJ'), ('reconstruction', 'NOUN'), ('inner', 'ADJ'), ('plexiform', 'NOUN'), ('layer', 'NOUN'), (' ', 'SPACE'), ('mouse', 'NOUN'), ('retina', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Connectomic', 'amod'), ('reconstruction', 'nsubj'), ('inner', 'amod'), ('plexiform', 'compound'), ('layer', 'pobj'), (' ', 'appos'), ('mouse', 'pobj'), ('retina', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Connectomic, reconstruction], [reconstruction, inner], [inner, plexiform], [plexiform, layer], [layer,  ], [ , mouse], [mouse, retina], [retina, .]]

>> Trigrams: 
[[Connectomic, reconstruction, inner], [reconstruction, inner, plexiform], [inner, plexiform, layer], [plexiform, layer,  ], [layer,  , mouse], [ , mouse, retina], [mouse, retina, .]]

>> Noun Phrases are: 
[Connectomic reconstruction, the inner plexiform layer, the mouse]

>> Named Entities are: 
[('Connectomic', 'NORP')]


============================ Sentence 422 =============================

Nature 500, 168–174 (2013). 


>> Tokens are: 
[Nature, 500, ,, 168–174, (, 2013, ), .] 

>> PoS Tags are: 
[('Nature', 'NOUN'), ('500', 'NUM'), (',', 'PUNCT'), ('168–174', 'NUM'), ('(', 'PUNCT'), ('2013', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Nature', 'ROOT'), ('500', 'nummod'), (',', 'punct'), ('168–174', 'appos'), ('(', 'punct'), ('2013', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Nature, 500], [500, ,], [,, 168–174], [168–174, (], [(, 2013], [2013, )], [), .]]

>> Trigrams: 
[[Nature, 500, ,], [500, ,, 168–174], [,, 168–174, (], [168–174, (, 2013], [(, 2013, )], [2013, ), .]]

>> Noun Phrases are: 
[Nature]

>> Named Entities are: 
[('500', 'CARDINAL'), ('2013', 'DATE')]


============================ Sentence 423 =============================

  xtxt−1 xt+1x   


>> Tokens are: 
[  , xtxt−1, xt+1x,  ] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('xtxt−1', 'NUM'), ('xt+1x', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('xtxt−1', 'punct'), ('xt+1x', 'prep'), (' ', 'appos')]

>> Bigrams: 
[[  , xtxt−1], [xtxt−1, xt+1x], [xt+1x,  ]]

>> Trigrams: 
[[  , xtxt−1, xt+1x], [xtxt−1, xt+1x,  ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 424 =============================

Unfold  V W  W W W W  V V V   


>> Tokens are: 
[Unfold,  , V, W,  , W, W, W, W,  , V, V, V,  ] 

>> PoS Tags are: 
[('Unfold', 'PROPN'), (' ', 'SPACE'), ('V', 'PROPN'), ('W', 'PROPN'), (' ', 'SPACE'), ('W', 'PROPN'), ('W', 'PROPN'), ('W', 'PROPN'), ('W', 'PROPN'), (' ', 'SPACE'), ('V', 'NOUN'), ('V', 'NOUN'), ('V', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Unfold', 'ROOT'), (' ', 'compound'), ('V', 'dobj'), ('W', 'compound'), (' ', 'dobj'), ('W', 'compound'), ('W', 'compound'), ('W', 'compound'), ('W', 'nmod'), (' ', 'compound'), ('V', 'compound'), ('V', 'compound'), ('V', 'appos'), (' ', 'dobj')]

>> Bigrams: 
[[Unfold,  ], [ , V], [V, W], [W,  ], [ , W], [W, W], [W, W], [W, W], [W,  ], [ , V], [V, V], [V, V], [V,  ]]

>> Trigrams: 
[[Unfold,  , V], [ , V, W], [V, W,  ], [W,  , W], [ , W, W], [W, W, W], [W, W, W], [W, W,  ], [W,  , V], [ , V, V], [V, V, V], [V, V,  ]]

>> Noun Phrases are: 
[Unfold,  V, W W W W  V V V]

>> Named Entities are: 
[]


============================ Sentence 425 =============================

U U 


>> Tokens are: 
[U, U] 

>> PoS Tags are: 
[('U', 'NOUN'), ('U', 'NOUN')] 

>> Dependency Tags are: 
[('U', 'compound'), ('U', 'ROOT')]

>> Bigrams: 
[[U, U]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[U U]

>> Named Entities are: 
[('U U', 'GPE')]


============================ Sentence 426 =============================

U U  s  o   


>> Tokens are: 
[U, U,  , s,  , o,  ] 

>> PoS Tags are: 
[('U', 'NOUN'), ('U', 'NOUN'), (' ', 'SPACE'), ('s', 'VERB'), (' ', 'SPACE'), ('o', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('U', 'compound'), ('U', 'nsubj'), (' ', 'appos'), ('s', 'ROOT'), (' ', 'attr'), ('o', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[U, U], [U,  ], [ , s], [s,  ], [ , o], [o,  ]]

>> Trigrams: 
[[U, U,  ], [U,  , s], [ , s,  ], [s,  , o], [ , o,  ]]

>> Noun Phrases are: 
[U U]

>> Named Entities are: 
[]


============================ Sentence 427 =============================

st−1  ot−1 ot  st st+1  ot+1   


>> Tokens are: 
[st−1,  , ot−1, ot,  , st, st+1,  , ot+1,  ] 

>> PoS Tags are: 
[('st−1', 'NOUN'), (' ', 'SPACE'), ('ot−1', 'PROPN'), ('ot', 'PROPN'), (' ', 'SPACE'), ('st', 'PROPN'), ('st+1', 'NOUN'), (' ', 'SPACE'), ('ot+1', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('st−1', 'nmod'), (' ', 'compound'), ('ot−1', 'compound'), ('ot', 'appos'), (' ', 'appos'), ('st', 'compound'), ('st+1', 'ROOT'), (' ', 'advmod'), ('ot+1', 'appos'), (' ', 'nummod')]

>> Bigrams: 
[[st−1,  ], [ , ot−1], [ot−1, ot], [ot,  ], [ , st], [st, st+1], [st+1,  ], [ , ot+1], [ot+1,  ]]

>> Trigrams: 
[[st−1,  , ot−1], [ , ot−1, ot], [ot−1, ot,  ], [ot,  , st], [ , st, st+1], [st, st+1,  ], [st+1,  , ot+1], [ , ot+1,  ]]

>> Noun Phrases are: 
[ ot−1 ot, ot+1]

>> Named Entities are: 
[('ot−1', 'ORG')]


============================ Sentence 428 =============================

Figure 5 | 


>> Tokens are: 
[Figure, 5, |] 

>> PoS Tags are: 
[('Figure', 'NOUN'), ('5', 'NUM'), ('|', 'NOUN')] 

>> Dependency Tags are: 
[('Figure', 'ROOT'), ('5', 'nummod'), ('|', 'appos')]

>> Bigrams: 
[[Figure, 5], [5, |]]

>> Trigrams: 
[[Figure, 5, |]]

>> Noun Phrases are: 
[Figure, 5 |]

>> Named Entities are: 
[('5', 'CARDINAL')]


============================ Sentence 429 =============================

A recurrent neural network and the unfolding in time of the  computation involved in its forward computation. 


>> Tokens are: 
[recurrent, neural, network, unfolding, time,  , computation, involved, forward, computation, .] 

>> PoS Tags are: 
[('recurrent', 'ADJ'), ('neural', 'ADJ'), ('network', 'NOUN'), ('unfolding', 'NOUN'), ('time', 'NOUN'), (' ', 'SPACE'), ('computation', 'NOUN'), ('involved', 'VERB'), ('forward', 'ADJ'), ('computation', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('recurrent', 'amod'), ('neural', 'amod'), ('network', 'ROOT'), ('unfolding', 'conj'), ('time', 'pobj'), (' ', 'compound'), ('computation', 'pobj'), ('involved', 'acl'), ('forward', 'amod'), ('computation', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[recurrent, neural], [neural, network], [network, unfolding], [unfolding, time], [time,  ], [ , computation], [computation, involved], [involved, forward], [forward, computation], [computation, .]]

>> Trigrams: 
[[recurrent, neural, network], [neural, network, unfolding], [network, unfolding, time], [unfolding, time,  ], [time,  , computation], [ , computation, involved], [computation, involved, forward], [involved, forward, computation], [forward, computation, .]]

>> Noun Phrases are: 
[A recurrent neural network, the unfolding, time, the  computation, its forward computation]

>> Named Entities are: 
[]


============================ Sentence 430 =============================

The artificial neurons  (for example, hidden units grouped under node s with values st at time t) get  inputs from other neurons at previous time steps (this is represented with the  black square, representing a delay of one time step, on the left). 


>> Tokens are: 
[artificial, neurons,  , (, example, ,, hidden, units, grouped, node, s, values, st, time, t, ),  , inputs, neurons, previous, time, steps, (, represented,  , black, square, ,, representing, delay, time, step, ,, left, ), .] 

>> PoS Tags are: 
[('artificial', 'ADJ'), ('neurons', 'NOUN'), (' ', 'SPACE'), ('(', 'PUNCT'), ('example', 'NOUN'), (',', 'PUNCT'), ('hidden', 'ADJ'), ('units', 'NOUN'), ('grouped', 'VERB'), ('node', 'NOUN'), ('s', 'VERB'), ('values', 'NOUN'), ('st', 'ADV'), ('time', 'NOUN'), ('t', 'NOUN'), (')', 'PUNCT'), (' ', 'SPACE'), ('inputs', 'NOUN'), ('neurons', 'NOUN'), ('previous', 'ADJ'), ('time', 'NOUN'), ('steps', 'NOUN'), ('(', 'PUNCT'), ('represented', 'VERB'), (' ', 'SPACE'), ('black', 'ADJ'), ('square', 'NOUN'), (',', 'PUNCT'), ('representing', 'VERB'), ('delay', 'NOUN'), ('time', 'NOUN'), ('step', 'NOUN'), (',', 'PUNCT'), ('left', 'NOUN'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('artificial', 'amod'), ('neurons', 'nsubj'), (' ', 'appos'), ('(', 'punct'), ('example', 'pobj'), (',', 'punct'), ('hidden', 'amod'), ('units', 'nsubj'), ('grouped', 'acl'), ('node', 'pobj'), ('s', 'parataxis'), ('values', 'pobj'), ('st', 'advmod'), ('time', 'compound'), ('t', 'pobj'), (')', 'punct'), (' ', 'nsubj'), ('inputs', 'dobj'), ('neurons', 'pobj'), ('previous', 'amod'), ('time', 'compound'), ('steps', 'pobj'), ('(', 'punct'), ('represented', 'parataxis'), (' ', 'nmod'), ('black', 'amod'), ('square', 'pobj'), (',', 'punct'), ('representing', 'advcl'), ('delay', 'dobj'), ('time', 'compound'), ('step', 'pobj'), (',', 'punct'), ('left', 'pobj'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[artificial, neurons], [neurons,  ], [ , (], [(, example], [example, ,], [,, hidden], [hidden, units], [units, grouped], [grouped, node], [node, s], [s, values], [values, st], [st, time], [time, t], [t, )], [),  ], [ , inputs], [inputs, neurons], [neurons, previous], [previous, time], [time, steps], [steps, (], [(, represented], [represented,  ], [ , black], [black, square], [square, ,], [,, representing], [representing, delay], [delay, time], [time, step], [step, ,], [,, left], [left, )], [), .]]

>> Trigrams: 
[[artificial, neurons,  ], [neurons,  , (], [ , (, example], [(, example, ,], [example, ,, hidden], [,, hidden, units], [hidden, units, grouped], [units, grouped, node], [grouped, node, s], [node, s, values], [s, values, st], [values, st, time], [st, time, t], [time, t, )], [t, ),  ], [),  , inputs], [ , inputs, neurons], [inputs, neurons, previous], [neurons, previous, time], [previous, time, steps], [time, steps, (], [steps, (, represented], [(, represented,  ], [represented,  , black], [ , black, square], [black, square, ,], [square, ,, representing], [,, representing, delay], [representing, delay, time], [delay, time, step], [time, step, ,], [step, ,, left], [,, left, )], [left, ), .]]

>> Noun Phrases are: 
[The artificial neurons, example, hidden units, node, values, time t,  inputs, other neurons, previous time steps, the  black square, a delay, one time step, the left]

>> Named Entities are: 
[('one', 'CARDINAL')]


============================ Sentence 431 =============================

In this way, a  recurrent neural network can map an input sequence with elements xt into an  output sequence with elements ot, with each ot depending on all the previous  xtʹ (for tʹ ≤ t). 


>> Tokens are: 
[way, ,,  , recurrent, neural, network, map, input, sequence, elements, xt,  , output, sequence, elements, ot, ,, ot, depending, previous,  , xtʹ, (, tʹ, ≤, t, ), .] 

>> PoS Tags are: 
[('way', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('recurrent', 'ADJ'), ('neural', 'ADJ'), ('network', 'NOUN'), ('map', 'VERB'), ('input', 'NOUN'), ('sequence', 'NOUN'), ('elements', 'NOUN'), ('xt', 'PUNCT'), (' ', 'SPACE'), ('output', 'NOUN'), ('sequence', 'NOUN'), ('elements', 'NOUN'), ('ot', 'NOUN'), (',', 'PUNCT'), ('ot', 'NOUN'), ('depending', 'VERB'), ('previous', 'ADJ'), (' ', 'SPACE'), ('xtʹ', 'NOUN'), ('(', 'PUNCT'), ('tʹ', 'ADP'), ('≤', 'NOUN'), ('t', 'NOUN'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('way', 'pobj'), (',', 'punct'), (' ', 'nmod'), ('recurrent', 'amod'), ('neural', 'amod'), ('network', 'nsubj'), ('map', 'ROOT'), ('input', 'compound'), ('sequence', 'dobj'), ('elements', 'pobj'), ('xt', 'punct'), (' ', 'amod'), ('output', 'compound'), ('sequence', 'pobj'), ('elements', 'compound'), ('ot', 'pobj'), (',', 'punct'), ('ot', 'nsubj'), ('depending', 'pcomp'), ('previous', 'amod'), (' ', 'compound'), ('xtʹ', 'pobj'), ('(', 'punct'), ('tʹ', 'nmod'), ('≤', 'compound'), ('t', 'pobj'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[way, ,], [,,  ], [ , recurrent], [recurrent, neural], [neural, network], [network, map], [map, input], [input, sequence], [sequence, elements], [elements, xt], [xt,  ], [ , output], [output, sequence], [sequence, elements], [elements, ot], [ot, ,], [,, ot], [ot, depending], [depending, previous], [previous,  ], [ , xtʹ], [xtʹ, (], [(, tʹ], [tʹ, ≤], [≤, t], [t, )], [), .]]

>> Trigrams: 
[[way, ,,  ], [,,  , recurrent], [ , recurrent, neural], [recurrent, neural, network], [neural, network, map], [network, map, input], [map, input, sequence], [input, sequence, elements], [sequence, elements, xt], [elements, xt,  ], [xt,  , output], [ , output, sequence], [output, sequence, elements], [sequence, elements, ot], [elements, ot, ,], [ot, ,, ot], [,, ot, depending], [ot, depending, previous], [depending, previous,  ], [previous,  , xtʹ], [ , xtʹ, (], [xtʹ, (, tʹ], [(, tʹ, ≤], [tʹ, ≤, t], [≤, t, )], [t, ), .]]

>> Noun Phrases are: 
[this way, a  recurrent neural network, an input sequence, elements, an  output sequence, elements ot, each ot, all the previous  xtʹ, tʹ ≤ t]

>> Named Entities are: 
[]


============================ Sentence 432 =============================

The same parameters (matrices U,V,W ) are used at each time  step. 


>> Tokens are: 
[parameters, (, matrices, U, ,, V, ,, W, ), time,  , step, .] 

>> PoS Tags are: 
[('parameters', 'NOUN'), ('(', 'PUNCT'), ('matrices', 'NOUN'), ('U', 'NOUN'), (',', 'PUNCT'), ('V', 'PROPN'), (',', 'PUNCT'), ('W', 'PROPN'), (')', 'PUNCT'), ('time', 'NOUN'), (' ', 'SPACE'), ('step', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('parameters', 'nsubjpass'), ('(', 'punct'), ('matrices', 'nmod'), ('U', 'appos'), (',', 'punct'), ('V', 'appos'), (',', 'punct'), ('W', 'appos'), (')', 'punct'), ('time', 'pobj'), (' ', 'compound'), ('step', 'npadvmod'), ('.', 'punct')]

>> Bigrams: 
[[parameters, (], [(, matrices], [matrices, U], [U, ,], [,, V], [V, ,], [,, W], [W, )], [), time], [time,  ], [ , step], [step, .]]

>> Trigrams: 
[[parameters, (, matrices], [(, matrices, U], [matrices, U, ,], [U, ,, V], [,, V, ,], [V, ,, W], [,, W, )], [W, ), time], [), time,  ], [time,  , step], [ , step, .]]

>> Noun Phrases are: 
[The same parameters, matrices U, V, W, each time]

>> Named Entities are: 
[]


============================ Sentence 433 =============================

Many other architectures are possible, including a variant in which the  network can generate a sequence of outputs (for example, words), each of  which is used as inputs for the next time step. 


>> Tokens are: 
[architectures, possible, ,, including, variant,  , network, generate, sequence, outputs, (, example, ,, words, ), ,,  , inputs, time, step, .] 

>> PoS Tags are: 
[('architectures', 'NOUN'), ('possible', 'ADJ'), (',', 'PUNCT'), ('including', 'VERB'), ('variant', 'NOUN'), (' ', 'SPACE'), ('network', 'NOUN'), ('generate', 'VERB'), ('sequence', 'NOUN'), ('outputs', 'NOUN'), ('(', 'PUNCT'), ('example', 'NOUN'), (',', 'PUNCT'), ('words', 'NOUN'), (')', 'PUNCT'), (',', 'PUNCT'), (' ', 'SPACE'), ('inputs', 'NOUN'), ('time', 'NOUN'), ('step', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('architectures', 'nsubj'), ('possible', 'acomp'), (',', 'punct'), ('including', 'prep'), ('variant', 'pobj'), (' ', 'compound'), ('network', 'nsubj'), ('generate', 'relcl'), ('sequence', 'dobj'), ('outputs', 'pobj'), ('(', 'punct'), ('example', 'pobj'), (',', 'punct'), ('words', 'npadvmod'), (')', 'punct'), (',', 'punct'), (' ', 'pobj'), ('inputs', 'pobj'), ('time', 'compound'), ('step', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[architectures, possible], [possible, ,], [,, including], [including, variant], [variant,  ], [ , network], [network, generate], [generate, sequence], [sequence, outputs], [outputs, (], [(, example], [example, ,], [,, words], [words, )], [), ,], [,,  ], [ , inputs], [inputs, time], [time, step], [step, .]]

>> Trigrams: 
[[architectures, possible, ,], [possible, ,, including], [,, including, variant], [including, variant,  ], [variant,  , network], [ , network, generate], [network, generate, sequence], [generate, sequence, outputs], [sequence, outputs, (], [outputs, (, example], [(, example, ,], [example, ,, words], [,, words, )], [words, ), ,], [), ,,  ], [,,  , inputs], [ , inputs, time], [inputs, time, step], [time, step, .]]

>> Noun Phrases are: 
[Many other architectures, a variant, the  network, a sequence, outputs, example, inputs, the next time step]

>> Named Entities are: 
[]


============================ Sentence 434 =============================

The backpropagation algorithm  (Fig. 1) can be directly applied to the computational graph of the unfolded  network on the right, to compute the derivative of a total error (for example,  the log-probability of generating the right sequence of outputs) with respect to  all the states st and all the parameters. 


>> Tokens are: 
[backpropagation, algorithm,  , (, Fig, ., 1, ), directly, applied, computational, graph, unfolded,  , network, right, ,, compute, derivative, total, error, (, example, ,,  , log, -, probability, generating, right, sequence, outputs, ), respect,  , states, st, parameters, .] 

>> PoS Tags are: 
[('backpropagation', 'NOUN'), ('algorithm', 'NOUN'), (' ', 'SPACE'), ('(', 'PUNCT'), ('Fig', 'PROPN'), ('.', 'PUNCT'), ('1', 'NUM'), (')', 'PUNCT'), ('directly', 'ADV'), ('applied', 'VERB'), ('computational', 'ADJ'), ('graph', 'NOUN'), ('unfolded', 'ADJ'), (' ', 'SPACE'), ('network', 'NOUN'), ('right', 'NOUN'), (',', 'PUNCT'), ('compute', 'VERB'), ('derivative', 'NOUN'), ('total', 'ADJ'), ('error', 'NOUN'), ('(', 'PUNCT'), ('example', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('log', 'NOUN'), ('-', 'PUNCT'), ('probability', 'NOUN'), ('generating', 'VERB'), ('right', 'ADJ'), ('sequence', 'NOUN'), ('outputs', 'NOUN'), (')', 'PUNCT'), ('respect', 'NOUN'), (' ', 'SPACE'), ('states', 'NOUN'), ('st', 'ADV'), ('parameters', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('backpropagation', 'nsubj'), ('algorithm', 'advmod'), (' ', 'nsubjpass'), ('(', 'punct'), ('Fig', 'npadvmod'), ('.', 'punct'), ('1', 'nummod'), (')', 'punct'), ('directly', 'advmod'), ('applied', 'ROOT'), ('computational', 'amod'), ('graph', 'pobj'), ('unfolded', 'amod'), (' ', 'compound'), ('network', 'pobj'), ('right', 'pobj'), (',', 'punct'), ('compute', 'advcl'), ('derivative', 'dobj'), ('total', 'amod'), ('error', 'pobj'), ('(', 'punct'), ('example', 'pobj'), (',', 'punct'), (' ', 'dobj'), ('log', 'compound'), ('-', 'punct'), ('probability', 'appos'), ('generating', 'pcomp'), ('right', 'amod'), ('sequence', 'dobj'), ('outputs', 'pobj'), (')', 'punct'), ('respect', 'pobj'), (' ', 'pobj'), ('states', 'npadvmod'), ('st', 'advmod'), ('parameters', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[backpropagation, algorithm], [algorithm,  ], [ , (], [(, Fig], [Fig, .], [., 1], [1, )], [), directly], [directly, applied], [applied, computational], [computational, graph], [graph, unfolded], [unfolded,  ], [ , network], [network, right], [right, ,], [,, compute], [compute, derivative], [derivative, total], [total, error], [error, (], [(, example], [example, ,], [,,  ], [ , log], [log, -], [-, probability], [probability, generating], [generating, right], [right, sequence], [sequence, outputs], [outputs, )], [), respect], [respect,  ], [ , states], [states, st], [st, parameters], [parameters, .]]

>> Trigrams: 
[[backpropagation, algorithm,  ], [algorithm,  , (], [ , (, Fig], [(, Fig, .], [Fig, ., 1], [., 1, )], [1, ), directly], [), directly, applied], [directly, applied, computational], [applied, computational, graph], [computational, graph, unfolded], [graph, unfolded,  ], [unfolded,  , network], [ , network, right], [network, right, ,], [right, ,, compute], [,, compute, derivative], [compute, derivative, total], [derivative, total, error], [total, error, (], [error, (, example], [(, example, ,], [example, ,,  ], [,,  , log], [ , log, -], [log, -, probability], [-, probability, generating], [probability, generating, right], [generating, right, sequence], [right, sequence, outputs], [sequence, outputs, )], [outputs, ), respect], [), respect,  ], [respect,  , states], [ , states, st], [states, st, parameters], [st, parameters, .]]

>> Noun Phrases are: 
[The backpropagation, the computational graph, the unfolded  network, the right, the derivative, a total error, example, the log-probability, the right sequence, outputs, respect]

>> Named Entities are: 
[('Fig', 'PERSON'), ('1', 'CARDINAL')]


============================ Sentence 435 =============================

 4 4 2  |   


>> Tokens are: 
[ , 4, 4, 2,  , |,  ] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('4', 'NUM'), ('4', 'NUM'), ('2', 'NUM'), (' ', 'SPACE'), ('|', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT'), ('4', 'quantmod'), ('4', 'compound'), ('2', 'nummod'), (' ', 'punct'), ('|', 'npadvmod'), (' ', 'punct')]

>> Bigrams: 
[[ , 4], [4, 4], [4, 2], [2,  ], [ , |], [|,  ]]

>> Trigrams: 
[[ , 4, 4], [4, 4, 2], [4, 2,  ], [2,  , |], [ , |,  ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('4 4 2', 'PERCENT')]


============================ Sentence 436 =============================

N A T U R E  |  V O L  5 2 1  |  2 8  M A Y  2 0 1 5  REVIEWINSIGHT  © 2015 Macmillan Publishers Limited. 


>> Tokens are: 
[N, T, U, R, E,  , |,  , V, O, L,  , 5, 2, 1,  , |,  , 2, 8,  , M, Y,  , 2, 0, 1, 5,  , REVIEWINSIGHT,  , ©, 2015, Macmillan, Publishers, Limited, .] 

>> PoS Tags are: 
[('N', 'PROPN'), ('T', 'NOUN'), ('U', 'NOUN'), ('R', 'NOUN'), ('E', 'NOUN'), (' ', 'SPACE'), ('|', 'NOUN'), (' ', 'SPACE'), ('V', 'NOUN'), ('O', 'NOUN'), ('L', 'NOUN'), (' ', 'SPACE'), ('5', 'NUM'), ('2', 'NUM'), ('1', 'NUM'), (' ', 'SPACE'), ('|', 'NOUN'), (' ', 'SPACE'), ('2', 'NUM'), ('8', 'NUM'), (' ', 'SPACE'), ('M', 'PROPN'), ('Y', 'PROPN'), (' ', 'SPACE'), ('2', 'NUM'), ('0', 'NUM'), ('1', 'NUM'), ('5', 'NUM'), (' ', 'SPACE'), ('REVIEWINSIGHT', 'X'), (' ', 'SPACE'), ('©', 'ADJ'), ('2015', 'NUM'), ('Macmillan', 'PROPN'), ('Publishers', 'PROPN'), ('Limited', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('N', 'compound'), ('T', 'compound'), ('U', 'compound'), ('R', 'compound'), ('E', 'nsubj'), (' ', 'appos'), ('|', 'npadvmod'), (' ', 'punct'), ('V', 'compound'), ('O', 'appos'), ('L', 'appos'), (' ', 'appos'), ('5', 'compound'), ('2', 'compound'), ('1', 'nummod'), (' ', 'punct'), ('|', 'npadvmod'), (' ', 'appos'), ('2', 'compound'), ('8', 'nummod'), (' ', 'compound'), ('M', 'compound'), ('Y', 'nmod'), (' ', 'appos'), ('2', 'nummod'), ('0', 'quantmod'), ('1', 'compound'), ('5', 'nummod'), (' ', 'appos'), ('REVIEWINSIGHT', 'ROOT'), (' ', 'compound'), ('©', 'amod'), ('2015', 'nummod'), ('Macmillan', 'compound'), ('Publishers', 'compound'), ('Limited', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[N, T], [T, U], [U, R], [R, E], [E,  ], [ , |], [|,  ], [ , V], [V, O], [O, L], [L,  ], [ , 5], [5, 2], [2, 1], [1,  ], [ , |], [|,  ], [ , 2], [2, 8], [8,  ], [ , M], [M, Y], [Y,  ], [ , 2], [2, 0], [0, 1], [1, 5], [5,  ], [ , REVIEWINSIGHT], [REVIEWINSIGHT,  ], [ , ©], [©, 2015], [2015, Macmillan], [Macmillan, Publishers], [Publishers, Limited], [Limited, .]]

>> Trigrams: 
[[N, T, U], [T, U, R], [U, R, E], [R, E,  ], [E,  , |], [ , |,  ], [|,  , V], [ , V, O], [V, O, L], [O, L,  ], [L,  , 5], [ , 5, 2], [5, 2, 1], [2, 1,  ], [1,  , |], [ , |,  ], [|,  , 2], [ , 2, 8], [2, 8,  ], [8,  , M], [ , M, Y], [M, Y,  ], [Y,  , 2], [ , 2, 0], [2, 0, 1], [0, 1, 5], [1, 5,  ], [5,  , REVIEWINSIGHT], [ , REVIEWINSIGHT,  ], [REVIEWINSIGHT,  , ©], [ , ©, 2015], [©, 2015, Macmillan], [2015, Macmillan, Publishers], [Macmillan, Publishers, Limited], [Publishers, Limited, .]]

>> Noun Phrases are: 
[N A T U R E, V O, L,  © 2015 Macmillan Publishers Limited]

>> Named Entities are: 
[('2', 'CARDINAL'), ('2015', 'DATE'), ('Macmillan Publishers Limited', 'ORG')]


============================ Sentence 437 =============================

All rights reserved    12. 


>> Tokens are: 
[rights, reserved,    , 12, .] 

>> PoS Tags are: 
[('rights', 'NOUN'), ('reserved', 'VERB'), ('   ', 'SPACE'), ('12', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('rights', 'nsubj'), ('reserved', 'ROOT'), ('   ', 'dobj'), ('12', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[rights, reserved], [reserved,    ], [   , 12], [12, .]]

>> Trigrams: 
[[rights, reserved,    ], [reserved,    , 12], [   , 12, .]]

>> Noun Phrases are: 
[All rights]

>> Named Entities are: 
[]


============================ Sentence 438 =============================

Leung, M. K., Xiong, H. Y., Lee, L. J. & Frey, B. J. Deep learning of the tissue- regulated splicing code. 


>> Tokens are: 
[Leung, ,, M., K., ,, Xiong, ,, H., Y., ,, Lee, ,, L., J., &, Frey, ,, B., J., Deep, learning, tissue-, regulated, splicing, code, .] 

>> PoS Tags are: 
[('Leung', 'PROPN'), (',', 'PUNCT'), ('M.', 'PROPN'), ('K.', 'PROPN'), (',', 'PUNCT'), ('Xiong', 'PROPN'), (',', 'PUNCT'), ('H.', 'PROPN'), ('Y.', 'PROPN'), (',', 'PUNCT'), ('Lee', 'PROPN'), (',', 'PUNCT'), ('L.', 'PROPN'), ('J.', 'PROPN'), ('&', 'CCONJ'), ('Frey', 'PROPN'), (',', 'PUNCT'), ('B.', 'PROPN'), ('J.', 'PROPN'), ('Deep', 'PROPN'), ('learning', 'NOUN'), ('tissue-', 'NOUN'), ('regulated', 'ADJ'), ('splicing', 'NOUN'), ('code', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Leung', 'nmod'), (',', 'punct'), ('M.', 'compound'), ('K.', 'nsubj'), (',', 'punct'), ('Xiong', 'appos'), (',', 'punct'), ('H.', 'compound'), ('Y.', 'conj'), (',', 'punct'), ('Lee', 'conj'), (',', 'punct'), ('L.', 'compound'), ('J.', 'conj'), ('&', 'cc'), ('Frey', 'conj'), (',', 'punct'), ('B.', 'compound'), ('J.', 'compound'), ('Deep', 'compound'), ('learning', 'appos'), ('tissue-', 'pobj'), ('regulated', 'amod'), ('splicing', 'compound'), ('code', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Leung, ,], [,, M.], [M., K.], [K., ,], [,, Xiong], [Xiong, ,], [,, H.], [H., Y.], [Y., ,], [,, Lee], [Lee, ,], [,, L.], [L., J.], [J., &], [&, Frey], [Frey, ,], [,, B.], [B., J.], [J., Deep], [Deep, learning], [learning, tissue-], [tissue-, regulated], [regulated, splicing], [splicing, code], [code, .]]

>> Trigrams: 
[[Leung, ,, M.], [,, M., K.], [M., K., ,], [K., ,, Xiong], [,, Xiong, ,], [Xiong, ,, H.], [,, H., Y.], [H., Y., ,], [Y., ,, Lee], [,, Lee, ,], [Lee, ,, L.], [,, L., J.], [L., J., &], [J., &, Frey], [&, Frey, ,], [Frey, ,, B.], [,, B., J.], [B., J., Deep], [J., Deep, learning], [Deep, learning, tissue-], [learning, tissue-, regulated], [tissue-, regulated, splicing], [regulated, splicing, code], [splicing, code, .]]

>> Noun Phrases are: 
[Leung, M. K., Xiong, H. Y., Lee, L. J., Frey, B. J. Deep learning, the tissue-]

>> Named Entities are: 
[('Leung', 'PERSON'), ('M. K.', 'PERSON'), ('Xiong', 'GPE'), ('H. Y.', 'PERSON'), ('Lee', 'PERSON'), ('L. J. & Frey', 'ORG'), ('B. J. Deep', 'PERSON')]


============================ Sentence 439 =============================

Bioinformatics 30, i121–i129 (2014). 


>> Tokens are: 
[Bioinformatics, 30, ,, i121, –, i129, (, 2014, ), .] 

>> PoS Tags are: 
[('Bioinformatics', 'PROPN'), ('30', 'NUM'), (',', 'PUNCT'), ('i121', 'NUM'), ('–', 'PUNCT'), ('i129', 'NUM'), ('(', 'PUNCT'), ('2014', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Bioinformatics', 'ROOT'), ('30', 'nummod'), (',', 'punct'), ('i121', 'appos'), ('–', 'punct'), ('i129', 'appos'), ('(', 'punct'), ('2014', 'npadvmod'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Bioinformatics, 30], [30, ,], [,, i121], [i121, –], [–, i129], [i129, (], [(, 2014], [2014, )], [), .]]

>> Trigrams: 
[[Bioinformatics, 30, ,], [30, ,, i121], [,, i121, –], [i121, –, i129], [–, i129, (], [i129, (, 2014], [(, 2014, )], [2014, ), .]]

>> Noun Phrases are: 
[Bioinformatics]

>> Named Entities are: 
[('2014', 'DATE')]


============================ Sentence 440 =============================

  13. 


>> Tokens are: 
[  , 13, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('13', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('13', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 13], [13, .]]

>> Trigrams: 
[[  , 13, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('13', 'CARDINAL')]


============================ Sentence 441 =============================

Xiong, H. Y. et al. 


>> Tokens are: 
[Xiong, ,, H., Y., et, al, .] 

>> PoS Tags are: 
[('Xiong', 'PROPN'), (',', 'PUNCT'), ('H.', 'PROPN'), ('Y.', 'PROPN'), ('et', 'PROPN'), ('al', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Xiong', 'ROOT'), (',', 'punct'), ('H.', 'compound'), ('Y.', 'compound'), ('et', 'compound'), ('al', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[Xiong, ,], [,, H.], [H., Y.], [Y., et], [et, al], [al, .]]

>> Trigrams: 
[[Xiong, ,, H.], [,, H., Y.], [H., Y., et], [Y., et, al], [et, al, .]]

>> Noun Phrases are: 
[Xiong, H. Y. et al]

>> Named Entities are: 
[('H. Y. et al', 'PERSON')]


============================ Sentence 442 =============================

The human splicing code reveals new insights into the genetic  determinants of disease. 


>> Tokens are: 
[human, splicing, code, reveals, new, insights, genetic,  , determinants, disease, .] 

>> PoS Tags are: 
[('human', 'ADJ'), ('splicing', 'NOUN'), ('code', 'NOUN'), ('reveals', 'VERB'), ('new', 'ADJ'), ('insights', 'NOUN'), ('genetic', 'ADJ'), (' ', 'SPACE'), ('determinants', 'NOUN'), ('disease', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('human', 'amod'), ('splicing', 'compound'), ('code', 'nsubj'), ('reveals', 'ROOT'), ('new', 'amod'), ('insights', 'dobj'), ('genetic', 'amod'), (' ', 'compound'), ('determinants', 'pobj'), ('disease', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[human, splicing], [splicing, code], [code, reveals], [reveals, new], [new, insights], [insights, genetic], [genetic,  ], [ , determinants], [determinants, disease], [disease, .]]

>> Trigrams: 
[[human, splicing, code], [splicing, code, reveals], [code, reveals, new], [reveals, new, insights], [new, insights, genetic], [insights, genetic,  ], [genetic,  , determinants], [ , determinants, disease], [determinants, disease, .]]

>> Noun Phrases are: 
[The human splicing code, new insights, the genetic  determinants, disease]

>> Named Entities are: 
[]


============================ Sentence 443 =============================

Science 347, 6218 (2015). 


>> Tokens are: 
[Science, 347, ,, 6218, (, 2015, ), .] 

>> PoS Tags are: 
[('Science', 'NOUN'), ('347', 'NUM'), (',', 'PUNCT'), ('6218', 'NUM'), ('(', 'PUNCT'), ('2015', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Science', 'ROOT'), ('347', 'nummod'), (',', 'punct'), ('6218', 'appos'), ('(', 'punct'), ('2015', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Science, 347], [347, ,], [,, 6218], [6218, (], [(, 2015], [2015, )], [), .]]

>> Trigrams: 
[[Science, 347, ,], [347, ,, 6218], [,, 6218, (], [6218, (, 2015], [(, 2015, )], [2015, ), .]]

>> Noun Phrases are: 
[Science]

>> Named Entities are: 
[('347, 6218', 'DATE'), ('2015', 'DATE')]


============================ Sentence 444 =============================

  14. 


>> Tokens are: 
[  , 14, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('14', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('14', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 14], [14, .]]

>> Trigrams: 
[[  , 14, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('14', 'CARDINAL')]


============================ Sentence 445 =============================

Collobert, R., et al. 


>> Tokens are: 
[Collobert, ,, R., ,, et, al, .] 

>> PoS Tags are: 
[('Collobert', 'PROPN'), (',', 'PUNCT'), ('R.', 'PROPN'), (',', 'PUNCT'), ('et', 'X'), ('al', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Collobert', 'ROOT'), (',', 'punct'), ('R.', 'conj'), (',', 'punct'), ('et', 'compound'), ('al', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[Collobert, ,], [,, R.], [R., ,], [,, et], [et, al], [al, .]]

>> Trigrams: 
[[Collobert, ,, R.], [,, R., ,], [R., ,, et], [,, et, al], [et, al, .]]

>> Noun Phrases are: 
[Collobert, R., et al]

>> Named Entities are: 
[('Collobert', 'PERSON'), ('R.', 'NORP')]


============================ Sentence 446 =============================

Natural language processing (almost) from scratch. 


>> Tokens are: 
[Natural, language, processing, (, ), scratch, .] 

>> PoS Tags are: 
[('Natural', 'ADJ'), ('language', 'NOUN'), ('processing', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('scratch', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Natural', 'amod'), ('language', 'compound'), ('processing', 'ROOT'), ('(', 'punct'), (')', 'punct'), ('scratch', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Natural, language], [language, processing], [processing, (], [(, )], [), scratch], [scratch, .]]

>> Trigrams: 
[[Natural, language, processing], [language, processing, (], [processing, (, )], [(, ), scratch], [), scratch, .]]

>> Noun Phrases are: 
[Natural language processing, scratch]

>> Named Entities are: 
[]


============================ Sentence 447 =============================

J. Mach.   


>> Tokens are: 
[J., Mach, .,  ] 

>> PoS Tags are: 
[('J.', 'PROPN'), ('Mach', 'PROPN'), ('.', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('J.', 'compound'), ('Mach', 'ROOT'), ('.', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[J., Mach], [Mach, .], [.,  ]]

>> Trigrams: 
[[J., Mach, .], [Mach, .,  ]]

>> Noun Phrases are: 
[J. Mach]

>> Named Entities are: 
[('J. Mach', 'PERSON')]


============================ Sentence 448 =============================

Learn. 


>> Tokens are: 
[Learn, .] 

>> PoS Tags are: 
[('Learn', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Learn', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Learn, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('Learn', 'ORG')]


============================ Sentence 449 =============================

Res. 


>> Tokens are: 
[Res, .] 

>> PoS Tags are: 
[('Res', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Res', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Res, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Res]

>> Named Entities are: 
[]


============================ Sentence 450 =============================

12, 2493–2537 (2011). 


>> Tokens are: 
[12, ,, 2493–2537, (, 2011, ), .] 

>> PoS Tags are: 
[('12', 'NUM'), (',', 'PUNCT'), ('2493–2537', 'NUM'), ('(', 'PUNCT'), ('2011', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('12', 'ROOT'), (',', 'punct'), ('2493–2537', 'npadvmod'), ('(', 'punct'), ('2011', 'npadvmod'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[12, ,], [,, 2493–2537], [2493–2537, (], [(, 2011], [2011, )], [), .]]

>> Trigrams: 
[[12, ,, 2493–2537], [,, 2493–2537, (], [2493–2537, (, 2011], [(, 2011, )], [2011, ), .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('12', 'CARDINAL'), ('2011', 'DATE')]


============================ Sentence 451 =============================

  15. 


>> Tokens are: 
[  , 15, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('15', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('15', 'npadvmod'), ('.', 'punct')]

>> Bigrams: 
[[  , 15], [15, .]]

>> Trigrams: 
[[  , 15, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('15', 'CARDINAL')]


============================ Sentence 452 =============================

Bordes, A., Chopra, S. & Weston, J. Question answering with subgraph  embeddings. 


>> Tokens are: 
[Bordes, ,, A., ,, Chopra, ,, S., &, Weston, ,, J., Question, answering, subgraph,  , embeddings, .] 

>> PoS Tags are: 
[('Bordes', 'PROPN'), (',', 'PUNCT'), ('A.', 'PROPN'), (',', 'PUNCT'), ('Chopra', 'PROPN'), (',', 'PUNCT'), ('S.', 'PROPN'), ('&', 'CCONJ'), ('Weston', 'PROPN'), (',', 'PUNCT'), ('J.', 'PROPN'), ('Question', 'PROPN'), ('answering', 'VERB'), ('subgraph', 'NOUN'), (' ', 'SPACE'), ('embeddings', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Bordes', 'ROOT'), (',', 'punct'), ('A.', 'conj'), (',', 'punct'), ('Chopra', 'conj'), (',', 'punct'), ('S.', 'conj'), ('&', 'cc'), ('Weston', 'conj'), (',', 'punct'), ('J.', 'compound'), ('Question', 'appos'), ('answering', 'acl'), ('subgraph', 'compound'), (' ', 'compound'), ('embeddings', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Bordes, ,], [,, A.], [A., ,], [,, Chopra], [Chopra, ,], [,, S.], [S., &], [&, Weston], [Weston, ,], [,, J.], [J., Question], [Question, answering], [answering, subgraph], [subgraph,  ], [ , embeddings], [embeddings, .]]

>> Trigrams: 
[[Bordes, ,, A.], [,, A., ,], [A., ,, Chopra], [,, Chopra, ,], [Chopra, ,, S.], [,, S., &], [S., &, Weston], [&, Weston, ,], [Weston, ,, J.], [,, J., Question], [J., Question, answering], [Question, answering, subgraph], [answering, subgraph,  ], [subgraph,  , embeddings], [ , embeddings, .]]

>> Noun Phrases are: 
[Bordes, A., Chopra, S., Weston, J. Question, subgraph  embeddings]

>> Named Entities are: 
[('Chopra', 'ORG'), ('S. & Weston', 'ORG'), ('J. Question', 'ORG')]


============================ Sentence 453 =============================

In Proc. 


>> Tokens are: 
[Proc, .] 

>> PoS Tags are: 
[('Proc', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Proc', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Proc, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Proc]

>> Named Entities are: 
[]


============================ Sentence 454 =============================

Empirical Methods in Natural Language Processing http:// arxiv.org/abs/1406.3676v3 (2014). 


>> Tokens are: 
[Empirical, Methods, Natural, Language, Processing, http://, arxiv.org/abs/1406.3676v3, (, 2014, ), .] 

>> PoS Tags are: 
[('Empirical', 'PROPN'), ('Methods', 'PROPN'), ('Natural', 'PROPN'), ('Language', 'PROPN'), ('Processing', 'PROPN'), ('http://', 'PROPN'), ('arxiv.org/abs/1406.3676v3', 'PROPN'), ('(', 'PUNCT'), ('2014', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Empirical', 'compound'), ('Methods', 'ROOT'), ('Natural', 'compound'), ('Language', 'compound'), ('Processing', 'compound'), ('http://', 'compound'), ('arxiv.org/abs/1406.3676v3', 'pobj'), ('(', 'punct'), ('2014', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Empirical, Methods], [Methods, Natural], [Natural, Language], [Language, Processing], [Processing, http://], [http://, arxiv.org/abs/1406.3676v3], [arxiv.org/abs/1406.3676v3, (], [(, 2014], [2014, )], [), .]]

>> Trigrams: 
[[Empirical, Methods, Natural], [Methods, Natural, Language], [Natural, Language, Processing], [Language, Processing, http://], [Processing, http://, arxiv.org/abs/1406.3676v3], [http://, arxiv.org/abs/1406.3676v3, (], [arxiv.org/abs/1406.3676v3, (, 2014], [(, 2014, )], [2014, ), .]]

>> Noun Phrases are: 
[Empirical Methods, Natural Language Processing http:// arxiv.org/abs/1406.3676v3]

>> Named Entities are: 
[('2014', 'DATE')]


============================ Sentence 455 =============================

  16. 


>> Tokens are: 
[  , 16, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('16', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('16', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 16], [16, .]]

>> Trigrams: 
[[  , 16, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('16', 'CARDINAL')]


============================ Sentence 456 =============================

Jean, S., Cho, K., Memisevic, R. & Bengio, Y. 


>> Tokens are: 
[Jean, ,, S., ,, Cho, ,, K., ,, Memisevic, ,, R., &, Bengio, ,, Y.] 

>> PoS Tags are: 
[('Jean', 'PROPN'), (',', 'PUNCT'), ('S.', 'PROPN'), (',', 'PUNCT'), ('Cho', 'PROPN'), (',', 'PUNCT'), ('K.', 'PROPN'), (',', 'PUNCT'), ('Memisevic', 'PROPN'), (',', 'PUNCT'), ('R.', 'PROPN'), ('&', 'CCONJ'), ('Bengio', 'PROPN'), (',', 'PUNCT'), ('Y.', 'PROPN')] 

>> Dependency Tags are: 
[('Jean', 'ROOT'), (',', 'punct'), ('S.', 'npadvmod'), (',', 'punct'), ('Cho', 'conj'), (',', 'punct'), ('K.', 'conj'), (',', 'punct'), ('Memisevic', 'conj'), (',', 'punct'), ('R.', 'conj'), ('&', 'cc'), ('Bengio', 'conj'), (',', 'punct'), ('Y.', 'conj')]

>> Bigrams: 
[[Jean, ,], [,, S.], [S., ,], [,, Cho], [Cho, ,], [,, K.], [K., ,], [,, Memisevic], [Memisevic, ,], [,, R.], [R., &], [&, Bengio], [Bengio, ,], [,, Y.]]

>> Trigrams: 
[[Jean, ,, S.], [,, S., ,], [S., ,, Cho], [,, Cho, ,], [Cho, ,, K.], [,, K., ,], [K., ,, Memisevic], [,, Memisevic, ,], [Memisevic, ,, R.], [,, R., &], [R., &, Bengio], [&, Bengio, ,], [Bengio, ,, Y.]]

>> Noun Phrases are: 
[Jean, Y.]

>> Named Entities are: 
[('Jean', 'PERSON'), ('K.', 'NORP'), ('Memisevic', 'NORP'), ('R. & Bengio', 'ORG')]


============================ Sentence 457 =============================

On using very large target  vocabulary for neural machine translation. 


>> Tokens are: 
[large, target,  , vocabulary, neural, machine, translation, .] 

>> PoS Tags are: 
[('large', 'ADJ'), ('target', 'NOUN'), (' ', 'SPACE'), ('vocabulary', 'NOUN'), ('neural', 'ADJ'), ('machine', 'NOUN'), ('translation', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('large', 'amod'), ('target', 'dobj'), (' ', 'compound'), ('vocabulary', 'pobj'), ('neural', 'amod'), ('machine', 'compound'), ('translation', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[large, target], [target,  ], [ , vocabulary], [vocabulary, neural], [neural, machine], [machine, translation], [translation, .]]

>> Trigrams: 
[[large, target,  ], [target,  , vocabulary], [ , vocabulary, neural], [vocabulary, neural, machine], [neural, machine, translation], [machine, translation, .]]

>> Noun Phrases are: 
[very large target,  vocabulary, neural machine translation]

>> Named Entities are: 
[]


============================ Sentence 458 =============================

In Proc. 


>> Tokens are: 
[Proc, .] 

>> PoS Tags are: 
[('Proc', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Proc', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Proc, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Proc]

>> Named Entities are: 
[]


============================ Sentence 459 =============================

ACL-IJCNLP http://arxiv.org/ abs/1412.2007 (2015). 


>> Tokens are: 
[ACL, -, IJCNLP, http://arxiv.org/, abs/1412.2007, (, 2015, ), .] 

>> PoS Tags are: 
[('ACL', 'PROPN'), ('-', 'PUNCT'), ('IJCNLP', 'PROPN'), ('http://arxiv.org/', 'PROPN'), ('abs/1412.2007', 'PROPN'), ('(', 'PUNCT'), ('2015', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('ACL', 'compound'), ('-', 'punct'), ('IJCNLP', 'ROOT'), ('http://arxiv.org/', 'compound'), ('abs/1412.2007', 'appos'), ('(', 'punct'), ('2015', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[ACL, -], [-, IJCNLP], [IJCNLP, http://arxiv.org/], [http://arxiv.org/, abs/1412.2007], [abs/1412.2007, (], [(, 2015], [2015, )], [), .]]

>> Trigrams: 
[[ACL, -, IJCNLP], [-, IJCNLP, http://arxiv.org/], [IJCNLP, http://arxiv.org/, abs/1412.2007], [http://arxiv.org/, abs/1412.2007, (], [abs/1412.2007, (, 2015], [(, 2015, )], [2015, ), .]]

>> Noun Phrases are: 
[ACL-IJCNLP, http://arxiv.org/ abs/1412.2007]

>> Named Entities are: 
[('ACL-IJCNLP', 'ORG'), ('2015', 'DATE')]


============================ Sentence 460 =============================

 17. 


>> Tokens are: 
[ , 17, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('17', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'ROOT'), ('17', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[ , 17], [17, .]]

>> Trigrams: 
[[ , 17, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('17', 'CARDINAL')]


============================ Sentence 461 =============================

Sutskever, I. Vinyals, O. & Le. 


>> Tokens are: 
[Sutskever, ,, I., Vinyals, ,, O., &, Le, .] 

>> PoS Tags are: 
[('Sutskever', 'PROPN'), (',', 'PUNCT'), ('I.', 'PROPN'), ('Vinyals', 'PROPN'), (',', 'PUNCT'), ('O.', 'PROPN'), ('&', 'CCONJ'), ('Le', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Sutskever', 'ROOT'), (',', 'punct'), ('I.', 'compound'), ('Vinyals', 'conj'), (',', 'punct'), ('O.', 'conj'), ('&', 'cc'), ('Le', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[Sutskever, ,], [,, I.], [I., Vinyals], [Vinyals, ,], [,, O.], [O., &], [&, Le], [Le, .]]

>> Trigrams: 
[[Sutskever, ,, I.], [,, I., Vinyals], [I., Vinyals, ,], [Vinyals, ,, O.], [,, O., &], [O., &, Le], [&, Le, .]]

>> Noun Phrases are: 
[Sutskever, I. Vinyals, O., Le]

>> Named Entities are: 
[('Sutskever', 'ORG'), ('I. Vinyals, O. & Le', 'ORG')]


============================ Sentence 462 =============================

Q. V. Sequence to sequence learning with neural  networks. 


>> Tokens are: 
[Q., V., Sequence, sequence, learning, neural,  , networks, .] 

>> PoS Tags are: 
[('Q.', 'PROPN'), ('V.', 'PROPN'), ('Sequence', 'PROPN'), ('sequence', 'NOUN'), ('learning', 'VERB'), ('neural', 'ADJ'), (' ', 'SPACE'), ('networks', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Q.', 'compound'), ('V.', 'compound'), ('Sequence', 'nsubj'), ('sequence', 'pobj'), ('learning', 'ROOT'), ('neural', 'amod'), (' ', 'compound'), ('networks', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Q., V.], [V., Sequence], [Sequence, sequence], [sequence, learning], [learning, neural], [neural,  ], [ , networks], [networks, .]]

>> Trigrams: 
[[Q., V., Sequence], [V., Sequence, sequence], [Sequence, sequence, learning], [sequence, learning, neural], [learning, neural,  ], [neural,  , networks], [ , networks, .]]

>> Noun Phrases are: 
[Q. V. Sequence, sequence, neural  networks]

>> Named Entities are: 
[('Q. V. Sequence', 'PERSON')]


============================ Sentence 463 =============================

In Proc. 


>> Tokens are: 
[Proc, .] 

>> PoS Tags are: 
[('Proc', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Proc', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Proc, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Proc]

>> Named Entities are: 
[]


============================ Sentence 464 =============================

Advances in Neural Information Processing Systems 27  3104–3112 (2014). 


>> Tokens are: 
[Advances, Neural, Information, Processing, Systems, 27,  , 3104–3112, (, 2014, ), .] 

>> PoS Tags are: 
[('Advances', 'NOUN'), ('Neural', 'PROPN'), ('Information', 'PROPN'), ('Processing', 'PROPN'), ('Systems', 'PROPN'), ('27', 'NUM'), (' ', 'SPACE'), ('3104–3112', 'NUM'), ('(', 'PUNCT'), ('2014', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Advances', 'ROOT'), ('Neural', 'compound'), ('Information', 'compound'), ('Processing', 'compound'), ('Systems', 'pobj'), ('27', 'nummod'), (' ', 'appos'), ('3104–3112', 'appos'), ('(', 'punct'), ('2014', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Advances, Neural], [Neural, Information], [Information, Processing], [Processing, Systems], [Systems, 27], [27,  ], [ , 3104–3112], [3104–3112, (], [(, 2014], [2014, )], [), .]]

>> Trigrams: 
[[Advances, Neural, Information], [Neural, Information, Processing], [Information, Processing, Systems], [Processing, Systems, 27], [Systems, 27,  ], [27,  , 3104–3112], [ , 3104–3112, (], [3104–3112, (, 2014], [(, 2014, )], [2014, ), .]]

>> Noun Phrases are: 
[Advances, Neural Information Processing Systems]

>> Named Entities are: 
[('Neural Information Processing Systems', 'ORG'), ('2014', 'DATE')]


============================ Sentence 465 =============================

   This paper showed state-of-the-art machine translation results with the  architecture introduced in ref. 


>> Tokens are: 
[   , paper, showed, state, -, -, -, art, machine, translation, results,  , architecture, introduced, ref, .] 

>> PoS Tags are: 
[('   ', 'SPACE'), ('paper', 'NOUN'), ('showed', 'VERB'), ('state', 'NOUN'), ('-', 'PUNCT'), ('-', 'PUNCT'), ('-', 'PUNCT'), ('art', 'NOUN'), ('machine', 'NOUN'), ('translation', 'NOUN'), ('results', 'NOUN'), (' ', 'SPACE'), ('architecture', 'NOUN'), ('introduced', 'VERB'), ('ref', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('   ', 'meta'), ('paper', 'nsubj'), ('showed', 'ROOT'), ('state', 'nmod'), ('-', 'punct'), ('-', 'punct'), ('-', 'punct'), ('art', 'pobj'), ('machine', 'compound'), ('translation', 'compound'), ('results', 'dobj'), (' ', 'compound'), ('architecture', 'pobj'), ('introduced', 'acl'), ('ref', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[   , paper], [paper, showed], [showed, state], [state, -], [-, -], [-, -], [-, art], [art, machine], [machine, translation], [translation, results], [results,  ], [ , architecture], [architecture, introduced], [introduced, ref], [ref, .]]

>> Trigrams: 
[[   , paper, showed], [paper, showed, state], [showed, state, -], [state, -, -], [-, -, -], [-, -, art], [-, art, machine], [art, machine, translation], [machine, translation, results], [translation, results,  ], [results,  , architecture], [ , architecture, introduced], [architecture, introduced, ref], [introduced, ref, .]]

>> Noun Phrases are: 
[This paper, the-art, the  architecture, ref]

>> Named Entities are: 
[]


============================ Sentence 466 =============================

72, with a recurrent network trained to read a  sentence in one language, produce a semantic representation of its meaning,  and generate a translation in another language. 


>> Tokens are: 
[72, ,, recurrent, network, trained, read,  , sentence, language, ,, produce, semantic, representation, meaning, ,,  , generate, translation, language, .] 

>> PoS Tags are: 
[('72', 'NUM'), (',', 'PUNCT'), ('recurrent', 'ADJ'), ('network', 'NOUN'), ('trained', 'VERB'), ('read', 'VERB'), (' ', 'SPACE'), ('sentence', 'NOUN'), ('language', 'NOUN'), (',', 'PUNCT'), ('produce', 'VERB'), ('semantic', 'ADJ'), ('representation', 'NOUN'), ('meaning', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('generate', 'VERB'), ('translation', 'NOUN'), ('language', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('72', 'nsubj'), (',', 'punct'), ('recurrent', 'amod'), ('network', 'pobj'), ('trained', 'acl'), ('read', 'xcomp'), (' ', 'compound'), ('sentence', 'dobj'), ('language', 'pobj'), (',', 'punct'), ('produce', 'ROOT'), ('semantic', 'amod'), ('representation', 'dobj'), ('meaning', 'pobj'), (',', 'punct'), (' ', 'dobj'), ('generate', 'conj'), ('translation', 'dobj'), ('language', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[72, ,], [,, recurrent], [recurrent, network], [network, trained], [trained, read], [read,  ], [ , sentence], [sentence, language], [language, ,], [,, produce], [produce, semantic], [semantic, representation], [representation, meaning], [meaning, ,], [,,  ], [ , generate], [generate, translation], [translation, language], [language, .]]

>> Trigrams: 
[[72, ,, recurrent], [,, recurrent, network], [recurrent, network, trained], [network, trained, read], [trained, read,  ], [read,  , sentence], [ , sentence, language], [sentence, language, ,], [language, ,, produce], [,, produce, semantic], [produce, semantic, representation], [semantic, representation, meaning], [representation, meaning, ,], [meaning, ,,  ], [,,  , generate], [ , generate, translation], [generate, translation, language], [translation, language, .]]

>> Noun Phrases are: 
[a recurrent network, a  sentence, one language, a semantic representation, its meaning, a translation, another language]

>> Named Entities are: 
[('72', 'CARDINAL')]


============================ Sentence 467 =============================

 18. 


>> Tokens are: 
[ , 18, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('18', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'ROOT'), ('18', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[ , 18], [18, .]]

>> Trigrams: 
[[ , 18, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('18', 'CARDINAL')]


============================ Sentence 468 =============================

Bottou, L. & Bousquet, O. 


>> Tokens are: 
[Bottou, ,, L., &, Bousquet, ,, O.] 

>> PoS Tags are: 
[('Bottou', 'PROPN'), (',', 'PUNCT'), ('L.', 'PROPN'), ('&', 'CCONJ'), ('Bousquet', 'PROPN'), (',', 'PUNCT'), ('O.', 'PROPN')] 

>> Dependency Tags are: 
[('Bottou', 'ROOT'), (',', 'punct'), ('L.', 'conj'), ('&', 'cc'), ('Bousquet', 'conj'), (',', 'punct'), ('O.', 'appos')]

>> Bigrams: 
[[Bottou, ,], [,, L.], [L., &], [&, Bousquet], [Bousquet, ,], [,, O.]]

>> Trigrams: 
[[Bottou, ,, L.], [,, L., &], [L., &, Bousquet], [&, Bousquet, ,], [Bousquet, ,, O.]]

>> Noun Phrases are: 
[Bottou, L., Bousquet, O.]

>> Named Entities are: 
[('Bottou', 'GPE'), ('L. & Bousquet', 'ORG')]


============================ Sentence 469 =============================

The tradeoffs of large scale learning. 


>> Tokens are: 
[tradeoffs, large, scale, learning, .] 

>> PoS Tags are: 
[('tradeoffs', 'NOUN'), ('large', 'ADJ'), ('scale', 'NOUN'), ('learning', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('tradeoffs', 'ROOT'), ('large', 'amod'), ('scale', 'compound'), ('learning', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[tradeoffs, large], [large, scale], [scale, learning], [learning, .]]

>> Trigrams: 
[[tradeoffs, large, scale], [large, scale, learning], [scale, learning, .]]

>> Noun Phrases are: 
[The tradeoffs, large scale learning]

>> Named Entities are: 
[]


============================ Sentence 470 =============================

In Proc. 


>> Tokens are: 
[Proc, .] 

>> PoS Tags are: 
[('Proc', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Proc', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Proc, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Proc]

>> Named Entities are: 
[]


============================ Sentence 471 =============================

Advances  in Neural Information Processing Systems 20 161–168 (2007). 


>> Tokens are: 
[Advances,  , Neural, Information, Processing, Systems, 20, 161–168, (, 2007, ), .] 

>> PoS Tags are: 
[('Advances', 'NOUN'), (' ', 'SPACE'), ('Neural', 'PROPN'), ('Information', 'PROPN'), ('Processing', 'PROPN'), ('Systems', 'PROPN'), ('20', 'NUM'), ('161–168', 'NUM'), ('(', 'PUNCT'), ('2007', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Advances', 'ROOT'), (' ', 'appos'), ('Neural', 'compound'), ('Information', 'compound'), ('Processing', 'compound'), ('Systems', 'pobj'), ('20', 'nummod'), ('161–168', 'appos'), ('(', 'punct'), ('2007', 'npadvmod'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Advances,  ], [ , Neural], [Neural, Information], [Information, Processing], [Processing, Systems], [Systems, 20], [20, 161–168], [161–168, (], [(, 2007], [2007, )], [), .]]

>> Trigrams: 
[[Advances,  , Neural], [ , Neural, Information], [Neural, Information, Processing], [Information, Processing, Systems], [Processing, Systems, 20], [Systems, 20, 161–168], [20, 161–168, (], [161–168, (, 2007], [(, 2007, )], [2007, ), .]]

>> Noun Phrases are: 
[Advances, Neural Information Processing Systems]

>> Named Entities are: 
[('Neural Information Processing Systems', 'ORG'), ('20 161–168 (2007', 'DATE')]


============================ Sentence 472 =============================

  19. 


>> Tokens are: 
[  , 19, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('19', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('19', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 19], [19, .]]

>> Trigrams: 
[[  , 19, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('19', 'CARDINAL')]


============================ Sentence 473 =============================

Duda, R. O. & Hart, P. E. Pattern Classification and Scene Analysis (Wiley, 1973). 


>> Tokens are: 
[Duda, ,, R., O., &, Hart, ,, P., E., Pattern, Classification, Scene, Analysis, (, Wiley, ,, 1973, ), .] 

>> PoS Tags are: 
[('Duda', 'PROPN'), (',', 'PUNCT'), ('R.', 'PROPN'), ('O.', 'PROPN'), ('&', 'CCONJ'), ('Hart', 'PROPN'), (',', 'PUNCT'), ('P.', 'PROPN'), ('E.', 'PROPN'), ('Pattern', 'PROPN'), ('Classification', 'PROPN'), ('Scene', 'PROPN'), ('Analysis', 'PROPN'), ('(', 'PUNCT'), ('Wiley', 'PROPN'), (',', 'PUNCT'), ('1973', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Duda', 'ROOT'), (',', 'punct'), ('R.', 'compound'), ('O.', 'conj'), ('&', 'cc'), ('Hart', 'conj'), (',', 'punct'), ('P.', 'compound'), ('E.', 'compound'), ('Pattern', 'compound'), ('Classification', 'conj'), ('Scene', 'compound'), ('Analysis', 'conj'), ('(', 'punct'), ('Wiley', 'appos'), (',', 'punct'), ('1973', 'npadvmod'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Duda, ,], [,, R.], [R., O.], [O., &], [&, Hart], [Hart, ,], [,, P.], [P., E.], [E., Pattern], [Pattern, Classification], [Classification, Scene], [Scene, Analysis], [Analysis, (], [(, Wiley], [Wiley, ,], [,, 1973], [1973, )], [), .]]

>> Trigrams: 
[[Duda, ,, R.], [,, R., O.], [R., O., &], [O., &, Hart], [&, Hart, ,], [Hart, ,, P.], [,, P., E.], [P., E., Pattern], [E., Pattern, Classification], [Pattern, Classification, Scene], [Classification, Scene, Analysis], [Scene, Analysis, (], [Analysis, (, Wiley], [(, Wiley, ,], [Wiley, ,, 1973], [,, 1973, )], [1973, ), .]]

>> Noun Phrases are: 
[Duda, R. O., Hart, P. E. Pattern Classification, Scene Analysis, Wiley]

>> Named Entities are: 
[('R. O. & Hart', 'ORG'), ('P. E. Pattern Classification', 'ORG'), ('1973', 'DATE')]


============================ Sentence 474 =============================

 20. 


>> Tokens are: 
[ , 20, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('20', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'ROOT'), ('20', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[ , 20], [20, .]]

>> Trigrams: 
[[ , 20, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('20', 'CARDINAL')]


============================ Sentence 475 =============================

Schölkopf, B. & Smola, A. Learning with Kernels (MIT Press, 2002). 


>> Tokens are: 
[Schölkopf, ,, B., &, Smola, ,, A., Learning, Kernels, (, MIT, Press, ,, 2002, ), .] 

>> PoS Tags are: 
[('Schölkopf', 'PROPN'), (',', 'PUNCT'), ('B.', 'PROPN'), ('&', 'CCONJ'), ('Smola', 'PROPN'), (',', 'PUNCT'), ('A.', 'NOUN'), ('Learning', 'PROPN'), ('Kernels', 'PROPN'), ('(', 'PUNCT'), ('MIT', 'PROPN'), ('Press', 'PROPN'), (',', 'PUNCT'), ('2002', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Schölkopf', 'ROOT'), (',', 'punct'), ('B.', 'conj'), ('&', 'cc'), ('Smola', 'conj'), (',', 'punct'), ('A.', 'compound'), ('Learning', 'appos'), ('Kernels', 'pobj'), ('(', 'punct'), ('MIT', 'compound'), ('Press', 'appos'), (',', 'punct'), ('2002', 'npadvmod'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Schölkopf, ,], [,, B.], [B., &], [&, Smola], [Smola, ,], [,, A.], [A., Learning], [Learning, Kernels], [Kernels, (], [(, MIT], [MIT, Press], [Press, ,], [,, 2002], [2002, )], [), .]]

>> Trigrams: 
[[Schölkopf, ,, B.], [,, B., &], [B., &, Smola], [&, Smola, ,], [Smola, ,, A.], [,, A., Learning], [A., Learning, Kernels], [Learning, Kernels, (], [Kernels, (, MIT], [(, MIT, Press], [MIT, Press, ,], [Press, ,, 2002], [,, 2002, )], [2002, ), .]]

>> Noun Phrases are: 
[Schölkopf, B., Smola, A. Learning, Kernels, MIT Press]

>> Named Entities are: 
[('B. & Smola', 'ORG'), ('A. Learning', 'GPE'), ('Kernels', 'PERSON'), ('MIT Press', 'ORG'), ('2002', 'DATE')]


============================ Sentence 476 =============================

 21. 


>> Tokens are: 
[ , 21, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('21', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'ROOT'), ('21', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[ , 21], [21, .]]

>> Trigrams: 
[[ , 21, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('21', 'CARDINAL')]


============================ Sentence 477 =============================

Bengio, Y., Delalleau, O. & Le Roux, N. 


>> Tokens are: 
[Bengio, ,, Y., ,, Delalleau, ,, O., &, Le, Roux, ,, N.] 

>> PoS Tags are: 
[('Bengio', 'PROPN'), (',', 'PUNCT'), ('Y.', 'PROPN'), (',', 'PUNCT'), ('Delalleau', 'PROPN'), (',', 'PUNCT'), ('O.', 'PROPN'), ('&', 'CCONJ'), ('Le', 'PROPN'), ('Roux', 'PROPN'), (',', 'PUNCT'), ('N.', 'PROPN')] 

>> Dependency Tags are: 
[('Bengio', 'ROOT'), (',', 'punct'), ('Y.', 'conj'), (',', 'punct'), ('Delalleau', 'conj'), (',', 'punct'), ('O.', 'conj'), ('&', 'cc'), ('Le', 'compound'), ('Roux', 'conj'), (',', 'punct'), ('N.', 'npadvmod')]

>> Bigrams: 
[[Bengio, ,], [,, Y.], [Y., ,], [,, Delalleau], [Delalleau, ,], [,, O.], [O., &], [&, Le], [Le, Roux], [Roux, ,], [,, N.]]

>> Trigrams: 
[[Bengio, ,, Y.], [,, Y., ,], [Y., ,, Delalleau], [,, Delalleau, ,], [Delalleau, ,, O.], [,, O., &], [O., &, Le], [&, Le, Roux], [Le, Roux, ,], [Roux, ,, N.]]

>> Noun Phrases are: 
[Bengio, Y., Delalleau, O., Le Roux]

>> Named Entities are: 
[('Bengio', 'PERSON'), ('Y.', 'ORG'), ('Delalleau, O. & Le Roux', 'ORG')]


============================ Sentence 478 =============================

The curse of highly variable functions   for local kernel machines. 


>> Tokens are: 
[curse, highly, variable, functions,   , local, kernel, machines, .] 

>> PoS Tags are: 
[('curse', 'NOUN'), ('highly', 'ADV'), ('variable', 'ADJ'), ('functions', 'NOUN'), ('  ', 'SPACE'), ('local', 'ADJ'), ('kernel', 'NOUN'), ('machines', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('curse', 'ROOT'), ('highly', 'advmod'), ('variable', 'amod'), ('functions', 'pobj'), ('  ', 'appos'), ('local', 'amod'), ('kernel', 'compound'), ('machines', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[curse, highly], [highly, variable], [variable, functions], [functions,   ], [  , local], [local, kernel], [kernel, machines], [machines, .]]

>> Trigrams: 
[[curse, highly, variable], [highly, variable, functions], [variable, functions,   ], [functions,   , local], [  , local, kernel], [local, kernel, machines], [kernel, machines, .]]

>> Noun Phrases are: 
[The curse, highly variable functions, local kernel machines]

>> Named Entities are: 
[]


============================ Sentence 479 =============================

In Proc. 


>> Tokens are: 
[Proc, .] 

>> PoS Tags are: 
[('Proc', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Proc', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Proc, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Proc]

>> Named Entities are: 
[]


============================ Sentence 480 =============================

Advances in Neural Information Processing  Systems 18 107–114 (2005). 


>> Tokens are: 
[Advances, Neural, Information, Processing,  , Systems, 18, 107–114, (, 2005, ), .] 

>> PoS Tags are: 
[('Advances', 'NOUN'), ('Neural', 'PROPN'), ('Information', 'PROPN'), ('Processing', 'PROPN'), (' ', 'SPACE'), ('Systems', 'PROPN'), ('18', 'NUM'), ('107–114', 'NUM'), ('(', 'PUNCT'), ('2005', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Advances', 'ROOT'), ('Neural', 'compound'), ('Information', 'compound'), ('Processing', 'pobj'), (' ', 'compound'), ('Systems', 'appos'), ('18', 'nummod'), ('107–114', 'appos'), ('(', 'punct'), ('2005', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Advances, Neural], [Neural, Information], [Information, Processing], [Processing,  ], [ , Systems], [Systems, 18], [18, 107–114], [107–114, (], [(, 2005], [2005, )], [), .]]

>> Trigrams: 
[[Advances, Neural, Information], [Neural, Information, Processing], [Information, Processing,  ], [Processing,  , Systems], [ , Systems, 18], [Systems, 18, 107–114], [18, 107–114, (], [107–114, (, 2005], [(, 2005, )], [2005, ), .]]

>> Noun Phrases are: 
[Advances, Neural Information Processing,  Systems]

>> Named Entities are: 
[('Neural Information Processing  Systems', 'ORG'), ('18 107–114', 'DATE'), ('2005', 'DATE')]


============================ Sentence 481 =============================

  22. 


>> Tokens are: 
[  , 22, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('22', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('22', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 22], [22, .]]

>> Trigrams: 
[[  , 22, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('22', 'CARDINAL')]


============================ Sentence 482 =============================

Selfridge, O. G. Pandemonium: a paradigm for learning in mechanisation of  thought processes. 


>> Tokens are: 
[Selfridge, ,, O., G., Pandemonium, :, paradigm, learning, mechanisation,  , thought, processes, .] 

>> PoS Tags are: 
[('Selfridge', 'PROPN'), (',', 'PUNCT'), ('O.', 'PROPN'), ('G.', 'PROPN'), ('Pandemonium', 'PROPN'), (':', 'PUNCT'), ('paradigm', 'NOUN'), ('learning', 'VERB'), ('mechanisation', 'NOUN'), (' ', 'SPACE'), ('thought', 'VERB'), ('processes', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Selfridge', 'dep'), (',', 'punct'), ('O.', 'compound'), ('G.', 'compound'), ('Pandemonium', 'ROOT'), (':', 'punct'), ('paradigm', 'appos'), ('learning', 'pcomp'), ('mechanisation', 'pobj'), (' ', 'pobj'), ('thought', 'compound'), ('processes', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Selfridge, ,], [,, O.], [O., G.], [G., Pandemonium], [Pandemonium, :], [:, paradigm], [paradigm, learning], [learning, mechanisation], [mechanisation,  ], [ , thought], [thought, processes], [processes, .]]

>> Trigrams: 
[[Selfridge, ,, O.], [,, O., G.], [O., G., Pandemonium], [G., Pandemonium, :], [Pandemonium, :, paradigm], [:, paradigm, learning], [paradigm, learning, mechanisation], [learning, mechanisation,  ], [mechanisation,  , thought], [ , thought, processes], [thought, processes, .]]

>> Noun Phrases are: 
[Selfridge, O. G. Pandemonium, a paradigm, mechanisation, thought processes]

>> Named Entities are: 
[('O. G. Pandemonium', 'PERSON')]


============================ Sentence 483 =============================

In Proc. 


>> Tokens are: 
[Proc, .] 

>> PoS Tags are: 
[('Proc', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Proc', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Proc, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Proc]

>> Named Entities are: 
[]


============================ Sentence 484 =============================

Symposium on Mechanisation of Thought Processes  513–526 (1958). 


>> Tokens are: 
[Symposium, Mechanisation, Thought, Processes,  , 513–526, (, 1958, ), .] 

>> PoS Tags are: 
[('Symposium', 'NOUN'), ('Mechanisation', 'PROPN'), ('Thought', 'PROPN'), ('Processes', 'PROPN'), (' ', 'SPACE'), ('513–526', 'NUM'), ('(', 'PUNCT'), ('1958', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Symposium', 'ROOT'), ('Mechanisation', 'pobj'), ('Thought', 'compound'), ('Processes', 'pobj'), (' ', 'prep'), ('513–526', 'nummod'), ('(', 'punct'), ('1958', 'npadvmod'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Symposium, Mechanisation], [Mechanisation, Thought], [Thought, Processes], [Processes,  ], [ , 513–526], [513–526, (], [(, 1958], [1958, )], [), .]]

>> Trigrams: 
[[Symposium, Mechanisation, Thought], [Mechanisation, Thought, Processes], [Thought, Processes,  ], [Processes,  , 513–526], [ , 513–526, (], [513–526, (, 1958], [(, 1958, )], [1958, ), .]]

>> Noun Phrases are: 
[Symposium, Mechanisation, Thought Processes]

>> Named Entities are: 
[('513–526', 'CARDINAL'), ('1958', 'DATE')]


============================ Sentence 485 =============================

  23. 


>> Tokens are: 
[  , 23, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('23', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('23', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 23], [23, .]]

>> Trigrams: 
[[  , 23, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('23', 'CARDINAL')]


============================ Sentence 486 =============================

Rosenblatt, F. The Perceptron — A Perceiving and Recognizing Automaton. 


>> Tokens are: 
[Rosenblatt, ,, F., Perceptron, —, Perceiving, Recognizing, Automaton, .] 

>> PoS Tags are: 
[('Rosenblatt', 'PROPN'), (',', 'PUNCT'), ('F.', 'PROPN'), ('Perceptron', 'PROPN'), ('—', 'PUNCT'), ('Perceiving', 'PROPN'), ('Recognizing', 'PROPN'), ('Automaton', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Rosenblatt', 'ROOT'), (',', 'punct'), ('F.', 'appos'), ('Perceptron', 'appos'), ('—', 'punct'), ('Perceiving', 'appos'), ('Recognizing', 'conj'), ('Automaton', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[Rosenblatt, ,], [,, F.], [F., Perceptron], [Perceptron, —], [—, Perceiving], [Perceiving, Recognizing], [Recognizing, Automaton], [Automaton, .]]

>> Trigrams: 
[[Rosenblatt, ,, F.], [,, F., Perceptron], [F., Perceptron, —], [Perceptron, —, Perceiving], [—, Perceiving, Recognizing], [Perceiving, Recognizing, Automaton], [Recognizing, Automaton, .]]

>> Noun Phrases are: 
[Rosenblatt, F., The Perceptron, A Perceiving, Recognizing, Automaton]

>> Named Entities are: 
[('Rosenblatt', 'PERSON'), ('F. The Perceptron — A', 'PERSON'), ('Recognizing Automaton', 'PERSON')]


============================ Sentence 487 =============================

Tech.   


>> Tokens are: 
[Tech, .,  ] 

>> PoS Tags are: 
[('Tech', 'NOUN'), ('.', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Tech', 'ROOT'), ('.', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[Tech, .], [.,  ]]

>> Trigrams: 
[[Tech, .,  ]]

>> Noun Phrases are: 
[Tech]

>> Named Entities are: 
[]


============================ Sentence 488 =============================

Rep. 85-460-1 (Cornell Aeronautical Laboratory, 1957). 


>> Tokens are: 
[Rep., 85, -, 460, -, 1, (, Cornell, Aeronautical, Laboratory, ,, 1957, ), .] 

>> PoS Tags are: 
[('Rep.', 'PROPN'), ('85', 'NUM'), ('-', 'SYM'), ('460', 'NUM'), ('-', 'SYM'), ('1', 'NUM'), ('(', 'PUNCT'), ('Cornell', 'PROPN'), ('Aeronautical', 'PROPN'), ('Laboratory', 'PROPN'), (',', 'PUNCT'), ('1957', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Rep.', 'ROOT'), ('85', 'nummod'), ('-', 'punct'), ('460', 'nummod'), ('-', 'punct'), ('1', 'nummod'), ('(', 'punct'), ('Cornell', 'compound'), ('Aeronautical', 'compound'), ('Laboratory', 'appos'), (',', 'punct'), ('1957', 'npadvmod'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Rep., 85], [85, -], [-, 460], [460, -], [-, 1], [1, (], [(, Cornell], [Cornell, Aeronautical], [Aeronautical, Laboratory], [Laboratory, ,], [,, 1957], [1957, )], [), .]]

>> Trigrams: 
[[Rep., 85, -], [85, -, 460], [-, 460, -], [460, -, 1], [-, 1, (], [1, (, Cornell], [(, Cornell, Aeronautical], [Cornell, Aeronautical, Laboratory], [Aeronautical, Laboratory, ,], [Laboratory, ,, 1957], [,, 1957, )], [1957, ), .]]

>> Noun Phrases are: 
[Rep., (Cornell Aeronautical Laboratory]

>> Named Entities are: 
[('85', 'CARDINAL'), ('Cornell Aeronautical Laboratory', 'ORG'), ('1957', 'DATE')]


============================ Sentence 489 =============================

  24. 


>> Tokens are: 
[  , 24, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('24', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('24', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 24], [24, .]]

>> Trigrams: 
[[  , 24, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('24', 'CARDINAL')]


============================ Sentence 490 =============================

Werbos, P. Beyond Regression: New Tools for Prediction and Analysis in the  Behavioral Sciences. 


>> Tokens are: 
[Werbos, ,, P., Regression, :, New, Tools, Prediction, Analysis,  , Behavioral, Sciences, .] 

>> PoS Tags are: 
[('Werbos', 'PROPN'), (',', 'PUNCT'), ('P.', 'PROPN'), ('Regression', 'NOUN'), (':', 'PUNCT'), ('New', 'PROPN'), ('Tools', 'PROPN'), ('Prediction', 'PROPN'), ('Analysis', 'PROPN'), (' ', 'SPACE'), ('Behavioral', 'PROPN'), ('Sciences', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Werbos', 'ROOT'), (',', 'punct'), ('P.', 'appos'), ('Regression', 'pobj'), (':', 'punct'), ('New', 'compound'), ('Tools', 'appos'), ('Prediction', 'pobj'), ('Analysis', 'conj'), (' ', 'compound'), ('Behavioral', 'compound'), ('Sciences', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Werbos, ,], [,, P.], [P., Regression], [Regression, :], [:, New], [New, Tools], [Tools, Prediction], [Prediction, Analysis], [Analysis,  ], [ , Behavioral], [Behavioral, Sciences], [Sciences, .]]

>> Trigrams: 
[[Werbos, ,, P.], [,, P., Regression], [P., Regression, :], [Regression, :, New], [:, New, Tools], [New, Tools, Prediction], [Tools, Prediction, Analysis], [Prediction, Analysis,  ], [Analysis,  , Behavioral], [ , Behavioral, Sciences], [Behavioral, Sciences, .]]

>> Noun Phrases are: 
[Werbos, P., Regression, New Tools, Prediction, Analysis, the  Behavioral Sciences]

>> Named Entities are: 
[('Werbos', 'PERSON'), ('P. Beyond Regression', 'PERSON'), ('Behavioral Sciences', 'ORG')]


============================ Sentence 491 =============================

PhD thesis, Harvard Univ. 


>> Tokens are: 
[PhD, thesis, ,, Harvard, Univ, .] 

>> PoS Tags are: 
[('PhD', 'NOUN'), ('thesis', 'NOUN'), (',', 'PUNCT'), ('Harvard', 'PROPN'), ('Univ', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('PhD', 'compound'), ('thesis', 'ROOT'), (',', 'punct'), ('Harvard', 'compound'), ('Univ', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[PhD, thesis], [thesis, ,], [,, Harvard], [Harvard, Univ], [Univ, .]]

>> Trigrams: 
[[PhD, thesis, ,], [thesis, ,, Harvard], [,, Harvard, Univ], [Harvard, Univ, .]]

>> Noun Phrases are: 
[PhD thesis, Harvard Univ]

>> Named Entities are: 
[('Harvard Univ', 'PERSON')]


============================ Sentence 492 =============================

(1974). 


>> Tokens are: 
[(, 1974, ), .] 

>> PoS Tags are: 
[('(', 'PUNCT'), ('1974', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('(', 'punct'), ('1974', 'ROOT'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[(, 1974], [1974, )], [), .]]

>> Trigrams: 
[[(, 1974, )], [1974, ), .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('1974', 'DATE')]


============================ Sentence 493 =============================

  25. 


>> Tokens are: 
[  , 25, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('25', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('25', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 25], [25, .]]

>> Trigrams: 
[[  , 25, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('25', 'CARDINAL')]


============================ Sentence 494 =============================

Parker, D. B. Learning Logic Report TR–47 (MIT Press, 1985). 


>> Tokens are: 
[Parker, ,, D., B., Learning, Logic, Report, TR–47, (, MIT, Press, ,, 1985, ), .] 

>> PoS Tags are: 
[('Parker', 'PROPN'), (',', 'PUNCT'), ('D.', 'PROPN'), ('B.', 'PROPN'), ('Learning', 'PROPN'), ('Logic', 'PROPN'), ('Report', 'PROPN'), ('TR–47', 'NOUN'), ('(', 'PUNCT'), ('MIT', 'PROPN'), ('Press', 'PROPN'), (',', 'PUNCT'), ('1985', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Parker', 'nsubj'), (',', 'punct'), ('D.', 'compound'), ('B.', 'compound'), ('Learning', 'compound'), ('Logic', 'compound'), ('Report', 'appos'), ('TR–47', 'ROOT'), ('(', 'punct'), ('MIT', 'compound'), ('Press', 'dep'), (',', 'punct'), ('1985', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Parker, ,], [,, D.], [D., B.], [B., Learning], [Learning, Logic], [Logic, Report], [Report, TR–47], [TR–47, (], [(, MIT], [MIT, Press], [Press, ,], [,, 1985], [1985, )], [), .]]

>> Trigrams: 
[[Parker, ,, D.], [,, D., B.], [D., B., Learning], [B., Learning, Logic], [Learning, Logic, Report], [Logic, Report, TR–47], [Report, TR–47, (], [TR–47, (, MIT], [(, MIT, Press], [MIT, Press, ,], [Press, ,, 1985], [,, 1985, )], [1985, ), .]]

>> Noun Phrases are: 
[Parker, D. B. Learning Logic Report]

>> Named Entities are: 
[('Parker', 'ORG'), ('D. B. Learning Logic Report', 'ORG'), ('MIT Press', 'ORG'), ('1985', 'DATE')]


============================ Sentence 495 =============================

 26. 


>> Tokens are: 
[ , 26, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('26', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'ROOT'), ('26', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[ , 26], [26, .]]

>> Trigrams: 
[[ , 26, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('26', 'CARDINAL')]


============================ Sentence 496 =============================

LeCun, Y. Une procédure d’apprentissage pour Réseau à seuil assymétrique   in Cognitiva 85: a la Frontière de l’Intelligence Artificielle, des Sciences de la  Connaissance et des Neurosciences [in French] 599–604 (1985). 


>> Tokens are: 
[LeCun, ,, Y., Une, procédure, d’apprentissage, pour, Réseau, à, seuil, assymétrique,   , Cognitiva, 85, :, la, Frontière, de, l’Intelligence, Artificielle, ,, des, Sciences, de, la,  , Connaissance, et, des, Neurosciences, [, French, ], 599–604, (, 1985, ), .] 

>> PoS Tags are: 
[('LeCun', 'PROPN'), (',', 'PUNCT'), ('Y.', 'PROPN'), ('Une', 'PROPN'), ('procédure', 'NOUN'), ('d’apprentissage', 'NOUN'), ('pour', 'VERB'), ('Réseau', 'PROPN'), ('à', 'DET'), ('seuil', 'NOUN'), ('assymétrique', 'NOUN'), ('  ', 'SPACE'), ('Cognitiva', 'PROPN'), ('85', 'NUM'), (':', 'PUNCT'), ('la', 'X'), ('Frontière', 'PROPN'), ('de', 'X'), ('l’Intelligence', 'PROPN'), ('Artificielle', 'PROPN'), (',', 'PUNCT'), ('des', 'X'), ('Sciences', 'PROPN'), ('de', 'X'), ('la', 'X'), (' ', 'SPACE'), ('Connaissance', 'NOUN'), ('et', 'X'), ('des', 'X'), ('Neurosciences', 'PROPN'), ('[', 'PUNCT'), ('French', 'PROPN'), (']', 'PUNCT'), ('599–604', 'NUM'), ('(', 'PUNCT'), ('1985', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('LeCun', 'nsubj'), (',', 'punct'), ('Y.', 'compound'), ('Une', 'compound'), ('procédure', 'compound'), ('d’apprentissage', 'appos'), ('pour', 'ROOT'), ('Réseau', 'dobj'), ('à', 'det'), ('seuil', 'compound'), ('assymétrique', 'compound'), ('  ', 'dobj'), ('Cognitiva', 'pobj'), ('85', 'nummod'), (':', 'punct'), ('la', 'nmod'), ('Frontière', 'nmod'), ('de', 'nmod'), ('l’Intelligence', 'nmod'), ('Artificielle', 'nmod'), (',', 'punct'), ('des', 'nmod'), ('Sciences', 'nmod'), ('de', 'nmod'), ('la', 'nmod'), (' ', 'nmod'), ('Connaissance', 'nmod'), ('et', 'nmod'), ('des', 'compound'), ('Neurosciences', 'pobj'), ('[', 'punct'), ('French', 'pobj'), (']', 'punct'), ('599–604', 'appos'), ('(', 'punct'), ('1985', 'npadvmod'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[LeCun, ,], [,, Y.], [Y., Une], [Une, procédure], [procédure, d’apprentissage], [d’apprentissage, pour], [pour, Réseau], [Réseau, à], [à, seuil], [seuil, assymétrique], [assymétrique,   ], [  , Cognitiva], [Cognitiva, 85], [85, :], [:, la], [la, Frontière], [Frontière, de], [de, l’Intelligence], [l’Intelligence, Artificielle], [Artificielle, ,], [,, des], [des, Sciences], [Sciences, de], [de, la], [la,  ], [ , Connaissance], [Connaissance, et], [et, des], [des, Neurosciences], [Neurosciences, [], [[, French], [French, ]], [], 599–604], [599–604, (], [(, 1985], [1985, )], [), .]]

>> Trigrams: 
[[LeCun, ,, Y.], [,, Y., Une], [Y., Une, procédure], [Une, procédure, d’apprentissage], [procédure, d’apprentissage, pour], [d’apprentissage, pour, Réseau], [pour, Réseau, à], [Réseau, à, seuil], [à, seuil, assymétrique], [seuil, assymétrique,   ], [assymétrique,   , Cognitiva], [  , Cognitiva, 85], [Cognitiva, 85, :], [85, :, la], [:, la, Frontière], [la, Frontière, de], [Frontière, de, l’Intelligence], [de, l’Intelligence, Artificielle], [l’Intelligence, Artificielle, ,], [Artificielle, ,, des], [,, des, Sciences], [des, Sciences, de], [Sciences, de, la], [de, la,  ], [la,  , Connaissance], [ , Connaissance, et], [Connaissance, et, des], [et, des, Neurosciences], [des, Neurosciences, [], [Neurosciences, [, French], [[, French, ]], [French, ], 599–604], [], 599–604, (], [599–604, (, 1985], [(, 1985, )], [1985, ), .]]

>> Noun Phrases are: 
[LeCun, Y. Une procédure d’apprentissage, Réseau, Cognitiva, la Frontière de l’Intelligence Artificielle, des Sciences de la  Connaissance et des Neurosciences, French]

>> Named Entities are: 
[('Y. Une', 'PERSON'), ('Réseau', 'GPE'), ('French', 'NORP'), ('1985', 'DATE')]


============================ Sentence 497 =============================

  27. 


>> Tokens are: 
[  , 27, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('27', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('27', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 27], [27, .]]

>> Trigrams: 
[[  , 27, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('27', 'CARDINAL')]


============================ Sentence 498 =============================

Rumelhart, D. E., Hinton, G. E. & Williams, R. J. Learning representations by  back-propagating errors. 


>> Tokens are: 
[Rumelhart, ,, D., E., ,, Hinton, ,, G., E., &, Williams, ,, R., J., Learning, representations,  , -, propagating, errors, .] 

>> PoS Tags are: 
[('Rumelhart', 'PROPN'), (',', 'PUNCT'), ('D.', 'PROPN'), ('E.', 'PROPN'), (',', 'PUNCT'), ('Hinton', 'PROPN'), (',', 'PUNCT'), ('G.', 'PROPN'), ('E.', 'PROPN'), ('&', 'CCONJ'), ('Williams', 'PROPN'), (',', 'PUNCT'), ('R.', 'PROPN'), ('J.', 'PROPN'), ('Learning', 'PROPN'), ('representations', 'NOUN'), (' ', 'SPACE'), ('-', 'PUNCT'), ('propagating', 'VERB'), ('errors', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Rumelhart', 'nsubj'), (',', 'punct'), ('D.', 'compound'), ('E.', 'conj'), (',', 'punct'), ('Hinton', 'conj'), (',', 'punct'), ('G.', 'compound'), ('E.', 'conj'), ('&', 'cc'), ('Williams', 'conj'), (',', 'punct'), ('R.', 'compound'), ('J.', 'compound'), ('Learning', 'compound'), ('representations', 'ROOT'), (' ', 'pobj'), ('-', 'punct'), ('propagating', 'amod'), ('errors', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Rumelhart, ,], [,, D.], [D., E.], [E., ,], [,, Hinton], [Hinton, ,], [,, G.], [G., E.], [E., &], [&, Williams], [Williams, ,], [,, R.], [R., J.], [J., Learning], [Learning, representations], [representations,  ], [ , -], [-, propagating], [propagating, errors], [errors, .]]

>> Trigrams: 
[[Rumelhart, ,, D.], [,, D., E.], [D., E., ,], [E., ,, Hinton], [,, Hinton, ,], [Hinton, ,, G.], [,, G., E.], [G., E., &], [E., &, Williams], [&, Williams, ,], [Williams, ,, R.], [,, R., J.], [R., J., Learning], [J., Learning, representations], [Learning, representations,  ], [representations,  , -], [ , -, propagating], [-, propagating, errors], [propagating, errors, .]]

>> Noun Phrases are: 
[Rumelhart, D. E., Hinton, G. E., Williams, back-propagating errors]

>> Named Entities are: 
[('Rumelhart', 'PERSON'), ('D. E.', 'NORP'), ('Hinton', 'GPE'), ('G. E. & Williams', 'ORG'), ('R. J. Learning', 'PERSON')]


============================ Sentence 499 =============================

Nature 323, 533–536 (1986). 


>> Tokens are: 
[Nature, 323, ,, 533–536, (, 1986, ), .] 

>> PoS Tags are: 
[('Nature', 'NOUN'), ('323', 'NUM'), (',', 'PUNCT'), ('533–536', 'NUM'), ('(', 'PUNCT'), ('1986', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Nature', 'ROOT'), ('323', 'nummod'), (',', 'punct'), ('533–536', 'appos'), ('(', 'punct'), ('1986', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Nature, 323], [323, ,], [,, 533–536], [533–536, (], [(, 1986], [1986, )], [), .]]

>> Trigrams: 
[[Nature, 323, ,], [323, ,, 533–536], [,, 533–536, (], [533–536, (, 1986], [(, 1986, )], [1986, ), .]]

>> Noun Phrases are: 
[Nature]

>> Named Entities are: 
[('323', 'CARDINAL'), ('533–536', 'CARDINAL'), ('1986', 'DATE')]


============================ Sentence 500 =============================

  28. 


>> Tokens are: 
[  , 28, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('28', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('28', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 28], [28, .]]

>> Trigrams: 
[[  , 28, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('28', 'CARDINAL')]


============================ Sentence 501 =============================

Glorot, X., Bordes, A. & Bengio. 


>> Tokens are: 
[Glorot, ,, X., ,, Bordes, ,, A., &, Bengio, .] 

>> PoS Tags are: 
[('Glorot', 'PROPN'), (',', 'PUNCT'), ('X.', 'PROPN'), (',', 'PUNCT'), ('Bordes', 'PROPN'), (',', 'PUNCT'), ('A.', 'PROPN'), ('&', 'CCONJ'), ('Bengio', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Glorot', 'ROOT'), (',', 'punct'), ('X.', 'conj'), (',', 'punct'), ('Bordes', 'conj'), (',', 'punct'), ('A.', 'conj'), ('&', 'cc'), ('Bengio', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[Glorot, ,], [,, X.], [X., ,], [,, Bordes], [Bordes, ,], [,, A.], [A., &], [&, Bengio], [Bengio, .]]

>> Trigrams: 
[[Glorot, ,, X.], [,, X., ,], [X., ,, Bordes], [,, Bordes, ,], [Bordes, ,, A.], [,, A., &], [A., &, Bengio], [&, Bengio, .]]

>> Noun Phrases are: 
[Glorot, X., Bordes, A., Bengio]

>> Named Entities are: 
[('X.', 'GPE'), ('Bordes', 'GPE'), ('A. & Bengio', 'ORG')]


============================ Sentence 502 =============================

Y. Deep sparse rectifier neural networks. 


>> Tokens are: 
[Y., Deep, sparse, rectifier, neural, networks, .] 

>> PoS Tags are: 
[('Y.', 'PROPN'), ('Deep', 'PROPN'), ('sparse', 'NOUN'), ('rectifier', 'ADJ'), ('neural', 'ADJ'), ('networks', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Y.', 'compound'), ('Deep', 'amod'), ('sparse', 'amod'), ('rectifier', 'amod'), ('neural', 'amod'), ('networks', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Y., Deep], [Deep, sparse], [sparse, rectifier], [rectifier, neural], [neural, networks], [networks, .]]

>> Trigrams: 
[[Y., Deep, sparse], [Deep, sparse, rectifier], [sparse, rectifier, neural], [rectifier, neural, networks], [neural, networks, .]]

>> Noun Phrases are: 
[Y. Deep sparse rectifier neural networks]

>> Named Entities are: 
[('Y. Deep', 'PERSON')]


============================ Sentence 503 =============================

In Proc.  14th International Conference on Artificial Intelligence and Statistics 315–323  (2011). 


>> Tokens are: 
[Proc, .,  , 14th, International, Conference, Artificial, Intelligence, Statistics, 315–323,  , (, 2011, ), .] 

>> PoS Tags are: 
[('Proc', 'PROPN'), ('.', 'PUNCT'), (' ', 'SPACE'), ('14th', 'PROPN'), ('International', 'PROPN'), ('Conference', 'PROPN'), ('Artificial', 'PROPN'), ('Intelligence', 'PROPN'), ('Statistics', 'PROPN'), ('315–323', 'NUM'), (' ', 'SPACE'), ('(', 'PUNCT'), ('2011', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Proc', 'pobj'), ('.', 'punct'), (' ', 'compound'), ('14th', 'nummod'), ('International', 'compound'), ('Conference', 'pobj'), ('Artificial', 'compound'), ('Intelligence', 'pobj'), ('Statistics', 'conj'), ('315–323', 'nummod'), (' ', 'conj'), ('(', 'punct'), ('2011', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Proc, .], [.,  ], [ , 14th], [14th, International], [International, Conference], [Conference, Artificial], [Artificial, Intelligence], [Intelligence, Statistics], [Statistics, 315–323], [315–323,  ], [ , (], [(, 2011], [2011, )], [), .]]

>> Trigrams: 
[[Proc, .,  ], [.,  , 14th], [ , 14th, International], [14th, International, Conference], [International, Conference, Artificial], [Conference, Artificial, Intelligence], [Artificial, Intelligence, Statistics], [Intelligence, Statistics, 315–323], [Statistics, 315–323,  ], [315–323,  , (], [ , (, 2011], [(, 2011, )], [2011, ), .]]

>> Noun Phrases are: 
[Proc,  14th International Conference, Artificial Intelligence, Statistics]

>> Named Entities are: 
[('14th', 'ORDINAL'), ('International Conference on Artificial Intelligence and Statistics 315–323', 'EVENT'), ('2011', 'DATE')]


============================ Sentence 504 =============================

   This paper showed that supervised training of very deep neural networks is  much faster if the hidden layers are composed of ReLU. 


>> Tokens are: 
[   , paper, showed, supervised, training, deep, neural, networks,  , faster, hidden, layers, composed, ReLU, .] 

>> PoS Tags are: 
[('   ', 'SPACE'), ('paper', 'NOUN'), ('showed', 'VERB'), ('supervised', 'ADJ'), ('training', 'NOUN'), ('deep', 'ADJ'), ('neural', 'ADJ'), ('networks', 'NOUN'), (' ', 'SPACE'), ('faster', 'ADV'), ('hidden', 'VERB'), ('layers', 'NOUN'), ('composed', 'VERB'), ('ReLU', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('   ', 'npadvmod'), ('paper', 'nsubj'), ('showed', 'ROOT'), ('supervised', 'amod'), ('training', 'nsubj'), ('deep', 'amod'), ('neural', 'amod'), ('networks', 'pobj'), (' ', 'attr'), ('faster', 'acomp'), ('hidden', 'amod'), ('layers', 'nsubjpass'), ('composed', 'advcl'), ('ReLU', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[   , paper], [paper, showed], [showed, supervised], [supervised, training], [training, deep], [deep, neural], [neural, networks], [networks,  ], [ , faster], [faster, hidden], [hidden, layers], [layers, composed], [composed, ReLU], [ReLU, .]]

>> Trigrams: 
[[   , paper, showed], [paper, showed, supervised], [showed, supervised, training], [supervised, training, deep], [training, deep, neural], [deep, neural, networks], [neural, networks,  ], [networks,  , faster], [ , faster, hidden], [faster, hidden, layers], [hidden, layers, composed], [layers, composed, ReLU], [composed, ReLU, .]]

>> Noun Phrases are: 
[This paper, supervised training, very deep neural networks, the hidden layers, ReLU]

>> Named Entities are: 
[('ReLU', 'LOC')]


============================ Sentence 505 =============================

 29. 


>> Tokens are: 
[ , 29, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('29', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'ROOT'), ('29', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[ , 29], [29, .]]

>> Trigrams: 
[[ , 29, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('29', 'CARDINAL')]


============================ Sentence 506 =============================

Dauphin, Y. et al. 


>> Tokens are: 
[Dauphin, ,, Y., et, al, .] 

>> PoS Tags are: 
[('Dauphin', 'PROPN'), (',', 'PUNCT'), ('Y.', 'PROPN'), ('et', 'PROPN'), ('al', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Dauphin', 'ROOT'), (',', 'punct'), ('Y.', 'compound'), ('et', 'compound'), ('al', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[Dauphin, ,], [,, Y.], [Y., et], [et, al], [al, .]]

>> Trigrams: 
[[Dauphin, ,, Y.], [,, Y., et], [Y., et, al], [et, al, .]]

>> Noun Phrases are: 
[Dauphin, Y. et al]

>> Named Entities are: 
[]


============================ Sentence 507 =============================

Identifying and attacking the saddle point problem in high- dimensional non-convex optimization. 


>> Tokens are: 
[Identifying, attacking, saddle, point, problem, high-, dimensional, non, -, convex, optimization, .] 

>> PoS Tags are: 
[('Identifying', 'NOUN'), ('attacking', 'VERB'), ('saddle', 'NOUN'), ('point', 'NOUN'), ('problem', 'NOUN'), ('high-', 'ADJ'), ('dimensional', 'ADJ'), ('non', 'ADJ'), ('-', 'ADJ'), ('convex', 'ADJ'), ('optimization', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Identifying', 'ROOT'), ('attacking', 'conj'), ('saddle', 'compound'), ('point', 'compound'), ('problem', 'dobj'), ('high-', 'nmod'), ('dimensional', 'amod'), ('non', 'amod'), ('-', 'amod'), ('convex', 'amod'), ('optimization', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Identifying, attacking], [attacking, saddle], [saddle, point], [point, problem], [problem, high-], [high-, dimensional], [dimensional, non], [non, -], [-, convex], [convex, optimization], [optimization, .]]

>> Trigrams: 
[[Identifying, attacking, saddle], [attacking, saddle, point], [saddle, point, problem], [point, problem, high-], [problem, high-, dimensional], [high-, dimensional, non], [dimensional, non, -], [non, -, convex], [-, convex, optimization], [convex, optimization, .]]

>> Noun Phrases are: 
[Identifying, the saddle point problem, high- dimensional non-convex optimization]

>> Named Entities are: 
[]


============================ Sentence 508 =============================

In Proc. 


>> Tokens are: 
[Proc, .] 

>> PoS Tags are: 
[('Proc', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Proc', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Proc, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Proc]

>> Named Entities are: 
[]


============================ Sentence 509 =============================

Advances in Neural Information   


>> Tokens are: 
[Advances, Neural, Information,  ] 

>> PoS Tags are: 
[('Advances', 'NOUN'), ('Neural', 'PROPN'), ('Information', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Advances', 'ROOT'), ('Neural', 'compound'), ('Information', 'compound'), (' ', 'pobj')]

>> Bigrams: 
[[Advances, Neural], [Neural, Information], [Information,  ]]

>> Trigrams: 
[[Advances, Neural, Information], [Neural, Information,  ]]

>> Noun Phrases are: 
[Advances]

>> Named Entities are: 
[]


============================ Sentence 510 =============================

Processing Systems 27 2933–2941 (2014). 


>> Tokens are: 
[Processing, Systems, 27, 2933–2941, (, 2014, ), .] 

>> PoS Tags are: 
[('Processing', 'PROPN'), ('Systems', 'PROPN'), ('27', 'NUM'), ('2933–2941', 'NUM'), ('(', 'PUNCT'), ('2014', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Processing', 'compound'), ('Systems', 'ROOT'), ('27', 'nummod'), ('2933–2941', 'appos'), ('(', 'punct'), ('2014', 'npadvmod'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Processing, Systems], [Systems, 27], [27, 2933–2941], [2933–2941, (], [(, 2014], [2014, )], [), .]]

>> Trigrams: 
[[Processing, Systems, 27], [Systems, 27, 2933–2941], [27, 2933–2941, (], [2933–2941, (, 2014], [(, 2014, )], [2014, ), .]]

>> Noun Phrases are: 
[Processing Systems]

>> Named Entities are: 
[('27 2933–2941', 'DATE'), ('2014', 'DATE')]


============================ Sentence 511 =============================

  30. 


>> Tokens are: 
[  , 30, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('30', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('30', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 30], [30, .]]

>> Trigrams: 
[[  , 30, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('30', 'CARDINAL')]


============================ Sentence 512 =============================

Choromanska, A., Henaff, M., Mathieu, M., Arous, G. B. & LeCun, Y. The loss  surface of multilayer networks. 


>> Tokens are: 
[Choromanska, ,, A., ,, Henaff, ,, M., ,, Mathieu, ,, M., ,, Arous, ,, G., B., &, LeCun, ,, Y., loss,  , surface, multilayer, networks, .] 

>> PoS Tags are: 
[('Choromanska', 'PROPN'), (',', 'PUNCT'), ('A.', 'PROPN'), (',', 'PUNCT'), ('Henaff', 'PROPN'), (',', 'PUNCT'), ('M.', 'PROPN'), (',', 'PUNCT'), ('Mathieu', 'PROPN'), (',', 'PUNCT'), ('M.', 'PROPN'), (',', 'PUNCT'), ('Arous', 'PROPN'), (',', 'PUNCT'), ('G.', 'PROPN'), ('B.', 'PROPN'), ('&', 'CCONJ'), ('LeCun', 'PROPN'), (',', 'PUNCT'), ('Y.', 'PROPN'), ('loss', 'NOUN'), (' ', 'SPACE'), ('surface', 'NOUN'), ('multilayer', 'ADJ'), ('networks', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Choromanska', 'nmod'), (',', 'punct'), ('A.', 'conj'), (',', 'punct'), ('Henaff', 'conj'), (',', 'punct'), ('M.', 'conj'), (',', 'punct'), ('Mathieu', 'conj'), (',', 'punct'), ('M.', 'conj'), (',', 'punct'), ('Arous', 'conj'), (',', 'punct'), ('G.', 'compound'), ('B.', 'conj'), ('&', 'cc'), ('LeCun', 'conj'), (',', 'punct'), ('Y.', 'nmod'), ('loss', 'appos'), (' ', 'punct'), ('surface', 'ROOT'), ('multilayer', 'compound'), ('networks', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Choromanska, ,], [,, A.], [A., ,], [,, Henaff], [Henaff, ,], [,, M.], [M., ,], [,, Mathieu], [Mathieu, ,], [,, M.], [M., ,], [,, Arous], [Arous, ,], [,, G.], [G., B.], [B., &], [&, LeCun], [LeCun, ,], [,, Y.], [Y., loss], [loss,  ], [ , surface], [surface, multilayer], [multilayer, networks], [networks, .]]

>> Trigrams: 
[[Choromanska, ,, A.], [,, A., ,], [A., ,, Henaff], [,, Henaff, ,], [Henaff, ,, M.], [,, M., ,], [M., ,, Mathieu], [,, Mathieu, ,], [Mathieu, ,, M.], [,, M., ,], [M., ,, Arous], [,, Arous, ,], [Arous, ,, G.], [,, G., B.], [G., B., &], [B., &, LeCun], [&, LeCun, ,], [LeCun, ,, Y.], [,, Y., loss], [Y., loss,  ], [loss,  , surface], [ , surface, multilayer], [surface, multilayer, networks], [multilayer, networks, .]]

>> Noun Phrases are: 
[Y. The loss, multilayer networks]

>> Named Entities are: 
[('Choromanska', 'GPE'), ('G. B. & LeCun', 'PERSON'), ('Y. The', 'PERSON')]


============================ Sentence 513 =============================

In Proc. 


>> Tokens are: 
[Proc, .] 

>> PoS Tags are: 
[('Proc', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Proc', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Proc, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Proc]

>> Named Entities are: 
[]


============================ Sentence 514 =============================

Conference on AI and Statistics http:// arxiv.org/abs/1412.0233 (2014). 


>> Tokens are: 
[Conference, AI, Statistics, http://, arxiv.org/abs/1412.0233, (, 2014, ), .] 

>> PoS Tags are: 
[('Conference', 'NOUN'), ('AI', 'PROPN'), ('Statistics', 'PROPN'), ('http://', 'NOUN'), ('arxiv.org/abs/1412.0233', 'NOUN'), ('(', 'PUNCT'), ('2014', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Conference', 'ROOT'), ('AI', 'nmod'), ('Statistics', 'conj'), ('http://', 'pobj'), ('arxiv.org/abs/1412.0233', 'advmod'), ('(', 'punct'), ('2014', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Conference, AI], [AI, Statistics], [Statistics, http://], [http://, arxiv.org/abs/1412.0233], [arxiv.org/abs/1412.0233, (], [(, 2014], [2014, )], [), .]]

>> Trigrams: 
[[Conference, AI, Statistics], [AI, Statistics, http://], [Statistics, http://, arxiv.org/abs/1412.0233], [http://, arxiv.org/abs/1412.0233, (], [arxiv.org/abs/1412.0233, (, 2014], [(, 2014, )], [2014, ), .]]

>> Noun Phrases are: 
[Conference, AI and Statistics http://]

>> Named Entities are: 
[('2014', 'DATE')]


============================ Sentence 515 =============================

  31. 


>> Tokens are: 
[  , 31, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('31', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('31', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 31], [31, .]]

>> Trigrams: 
[[  , 31, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('31', 'CARDINAL')]


============================ Sentence 516 =============================

Hinton, G. E. 


>> Tokens are: 
[Hinton, ,, G., E.] 

>> PoS Tags are: 
[('Hinton', 'PROPN'), (',', 'PUNCT'), ('G.', 'PROPN'), ('E.', 'PROPN')] 

>> Dependency Tags are: 
[('Hinton', 'ROOT'), (',', 'punct'), ('G.', 'compound'), ('E.', 'appos')]

>> Bigrams: 
[[Hinton, ,], [,, G.], [G., E.]]

>> Trigrams: 
[[Hinton, ,, G.], [,, G., E.]]

>> Noun Phrases are: 
[Hinton, G. E.]

>> Named Entities are: 
[('Hinton', 'GPE'), ('G. E.', 'PERSON')]


============================ Sentence 517 =============================

What kind of graphical model is the brain? 


>> Tokens are: 
[kind, graphical, model, brain, ?] 

>> PoS Tags are: 
[('kind', 'NOUN'), ('graphical', 'ADJ'), ('model', 'NOUN'), ('brain', 'NOUN'), ('?', 'PUNCT')] 

>> Dependency Tags are: 
[('kind', 'attr'), ('graphical', 'amod'), ('model', 'pobj'), ('brain', 'attr'), ('?', 'punct')]

>> Bigrams: 
[[kind, graphical], [graphical, model], [model, brain], [brain, ?]]

>> Trigrams: 
[[kind, graphical, model], [graphical, model, brain], [model, brain, ?]]

>> Noun Phrases are: 
[What kind, graphical model, the brain]

>> Named Entities are: 
[]


============================ Sentence 518 =============================

In Proc. 


>> Tokens are: 
[Proc, .] 

>> PoS Tags are: 
[('Proc', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Proc', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Proc, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Proc]

>> Named Entities are: 
[]


============================ Sentence 519 =============================

19th   


>> Tokens are: 
[19th,  ] 

>> PoS Tags are: 
[('19th', 'ADJ'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('19th', 'amod'), (' ', 'ROOT')]

>> Bigrams: 
[[19th,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('19th', 'DATE')]


============================ Sentence 520 =============================

International Joint Conference on Artificial intelligence 1765–1775 (2005). 


>> Tokens are: 
[International, Joint, Conference, Artificial, intelligence, 1765–1775, (, 2005, ), .] 

>> PoS Tags are: 
[('International', 'PROPN'), ('Joint', 'PROPN'), ('Conference', 'PROPN'), ('Artificial', 'ADJ'), ('intelligence', 'NOUN'), ('1765–1775', 'NUM'), ('(', 'PUNCT'), ('2005', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('International', 'compound'), ('Joint', 'compound'), ('Conference', 'ROOT'), ('Artificial', 'amod'), ('intelligence', 'compound'), ('1765–1775', 'pobj'), ('(', 'punct'), ('2005', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[International, Joint], [Joint, Conference], [Conference, Artificial], [Artificial, intelligence], [intelligence, 1765–1775], [1765–1775, (], [(, 2005], [2005, )], [), .]]

>> Trigrams: 
[[International, Joint, Conference], [Joint, Conference, Artificial], [Conference, Artificial, intelligence], [Artificial, intelligence, 1765–1775], [intelligence, 1765–1775, (], [1765–1775, (, 2005], [(, 2005, )], [2005, ), .]]

>> Noun Phrases are: 
[International Joint Conference]

>> Named Entities are: 
[('2005', 'DATE')]


============================ Sentence 521 =============================

  32. 


>> Tokens are: 
[  , 32, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('32', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('32', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 32], [32, .]]

>> Trigrams: 
[[  , 32, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('32', 'CARDINAL')]


============================ Sentence 522 =============================

Hinton, G. E., Osindero, S. & Teh, Y.-W. A fast learning algorithm for deep belief  nets. 


>> Tokens are: 
[Hinton, ,, G., E., ,, Osindero, ,, S., &, Teh, ,, Y.-W., fast, learning, algorithm, deep, belief,  , nets, .] 

>> PoS Tags are: 
[('Hinton', 'PROPN'), (',', 'PUNCT'), ('G.', 'PROPN'), ('E.', 'PROPN'), (',', 'PUNCT'), ('Osindero', 'PROPN'), (',', 'PUNCT'), ('S.', 'PROPN'), ('&', 'CCONJ'), ('Teh', 'PROPN'), (',', 'PUNCT'), ('Y.-W.', 'PUNCT'), ('fast', 'ADJ'), ('learning', 'NOUN'), ('algorithm', 'NOUN'), ('deep', 'ADJ'), ('belief', 'NOUN'), (' ', 'SPACE'), ('nets', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Hinton', 'ROOT'), (',', 'punct'), ('G.', 'compound'), ('E.', 'conj'), (',', 'punct'), ('Osindero', 'conj'), (',', 'punct'), ('S.', 'conj'), ('&', 'cc'), ('Teh', 'conj'), (',', 'punct'), ('Y.-W.', 'punct'), ('fast', 'amod'), ('learning', 'amod'), ('algorithm', 'appos'), ('deep', 'amod'), ('belief', 'pobj'), (' ', 'compound'), ('nets', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[Hinton, ,], [,, G.], [G., E.], [E., ,], [,, Osindero], [Osindero, ,], [,, S.], [S., &], [&, Teh], [Teh, ,], [,, Y.-W.], [Y.-W., fast], [fast, learning], [learning, algorithm], [algorithm, deep], [deep, belief], [belief,  ], [ , nets], [nets, .]]

>> Trigrams: 
[[Hinton, ,, G.], [,, G., E.], [G., E., ,], [E., ,, Osindero], [,, Osindero, ,], [Osindero, ,, S.], [,, S., &], [S., &, Teh], [&, Teh, ,], [Teh, ,, Y.-W.], [,, Y.-W., fast], [Y.-W., fast, learning], [fast, learning, algorithm], [learning, algorithm, deep], [algorithm, deep, belief], [deep, belief,  ], [belief,  , nets], [ , nets, .]]

>> Noun Phrases are: 
[Hinton, G. E., Osindero, S., Teh, A fast learning algorithm, deep belief,  nets]

>> Named Entities are: 
[('Hinton', 'GPE'), ('G. E.', 'PERSON'), ('Osindero', 'ORG'), ('S. & Teh', 'ORG')]


============================ Sentence 523 =============================

Neural Comp. 


>> Tokens are: 
[Neural, Comp, .] 

>> PoS Tags are: 
[('Neural', 'PROPN'), ('Comp', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Neural', 'compound'), ('Comp', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Neural, Comp], [Comp, .]]

>> Trigrams: 
[[Neural, Comp, .]]

>> Noun Phrases are: 
[Neural Comp]

>> Named Entities are: 
[]


============================ Sentence 524 =============================

18, 1527–1554 (2006). 


>> Tokens are: 
[18, ,, 1527–1554, (, 2006, ), .] 

>> PoS Tags are: 
[('18', 'NUM'), (',', 'PUNCT'), ('1527–1554', 'NUM'), ('(', 'PUNCT'), ('2006', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('18', 'nummod'), (',', 'punct'), ('1527–1554', 'ROOT'), ('(', 'punct'), ('2006', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[18, ,], [,, 1527–1554], [1527–1554, (], [(, 2006], [2006, )], [), .]]

>> Trigrams: 
[[18, ,, 1527–1554], [,, 1527–1554, (], [1527–1554, (, 2006], [(, 2006, )], [2006, ), .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('18', 'CARDINAL')]


============================ Sentence 525 =============================

  This paper introduced a novel and effective way of training very deep neural  networks by pre-training one hidden layer at a time using the unsupervised  learning procedure for restricted Boltzmann machines. 


>> Tokens are: 
[  , paper, introduced, novel, effective, way, training, deep, neural,  , networks, pre, -, training, hidden, layer, time, unsupervised,  , learning, procedure, restricted, Boltzmann, machines, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('paper', 'NOUN'), ('introduced', 'VERB'), ('novel', 'ADJ'), ('effective', 'ADJ'), ('way', 'NOUN'), ('training', 'VERB'), ('deep', 'ADJ'), ('neural', 'ADJ'), (' ', 'SPACE'), ('networks', 'NOUN'), ('pre', 'ADJ'), ('-', 'ADJ'), ('training', 'VERB'), ('hidden', 'VERB'), ('layer', 'NOUN'), ('time', 'NOUN'), ('unsupervised', 'ADJ'), (' ', 'SPACE'), ('learning', 'NOUN'), ('procedure', 'NOUN'), ('restricted', 'VERB'), ('Boltzmann', 'PROPN'), ('machines', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'npadvmod'), ('paper', 'nsubj'), ('introduced', 'ROOT'), ('novel', 'amod'), ('effective', 'conj'), ('way', 'dobj'), ('training', 'pobj'), ('deep', 'amod'), ('neural', 'amod'), (' ', 'compound'), ('networks', 'dobj'), ('pre', 'amod'), ('-', 'amod'), ('training', 'amod'), ('hidden', 'amod'), ('layer', 'pobj'), ('time', 'pobj'), ('unsupervised', 'amod'), (' ', 'compound'), ('learning', 'compound'), ('procedure', 'dobj'), ('restricted', 'amod'), ('Boltzmann', 'compound'), ('machines', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[  , paper], [paper, introduced], [introduced, novel], [novel, effective], [effective, way], [way, training], [training, deep], [deep, neural], [neural,  ], [ , networks], [networks, pre], [pre, -], [-, training], [training, hidden], [hidden, layer], [layer, time], [time, unsupervised], [unsupervised,  ], [ , learning], [learning, procedure], [procedure, restricted], [restricted, Boltzmann], [Boltzmann, machines], [machines, .]]

>> Trigrams: 
[[  , paper, introduced], [paper, introduced, novel], [introduced, novel, effective], [novel, effective, way], [effective, way, training], [way, training, deep], [training, deep, neural], [deep, neural,  ], [neural,  , networks], [ , networks, pre], [networks, pre, -], [pre, -, training], [-, training, hidden], [training, hidden, layer], [hidden, layer, time], [layer, time, unsupervised], [time, unsupervised,  ], [unsupervised,  , learning], [ , learning, procedure], [learning, procedure, restricted], [procedure, restricted, Boltzmann], [restricted, Boltzmann, machines], [Boltzmann, machines, .]]

>> Noun Phrases are: 
[This paper, a novel and effective way, very deep neural  networks, pre-training one hidden layer, a time, the unsupervised  learning procedure, restricted Boltzmann machines]

>> Named Entities are: 
[('one', 'CARDINAL'), ('Boltzmann', 'PERSON')]


============================ Sentence 526 =============================

  33. 


>> Tokens are: 
[  , 33, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('33', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('33', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 33], [33, .]]

>> Trigrams: 
[[  , 33, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('33', 'CARDINAL')]


============================ Sentence 527 =============================

Bengio, Y., Lamblin, P., Popovici, D. & Larochelle, H. Greedy layer-wise training  of deep networks. 


>> Tokens are: 
[Bengio, ,, Y., ,, Lamblin, ,, P., ,, Popovici, ,, D., &, Larochelle, ,, H., Greedy, layer, -, wise, training,  , deep, networks, .] 

>> PoS Tags are: 
[('Bengio', 'PROPN'), (',', 'PUNCT'), ('Y.', 'PROPN'), (',', 'PUNCT'), ('Lamblin', 'PROPN'), (',', 'PUNCT'), ('P.', 'PROPN'), (',', 'PUNCT'), ('Popovici', 'PROPN'), (',', 'PUNCT'), ('D.', 'PROPN'), ('&', 'CCONJ'), ('Larochelle', 'PROPN'), (',', 'PUNCT'), ('H.', 'PROPN'), ('Greedy', 'PROPN'), ('layer', 'NOUN'), ('-', 'PUNCT'), ('wise', 'ADJ'), ('training', 'NOUN'), (' ', 'SPACE'), ('deep', 'ADJ'), ('networks', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Bengio', 'ROOT'), (',', 'punct'), ('Y.', 'conj'), (',', 'punct'), ('Lamblin', 'conj'), (',', 'punct'), ('P.', 'conj'), (',', 'punct'), ('Popovici', 'conj'), (',', 'punct'), ('D.', 'conj'), ('&', 'cc'), ('Larochelle', 'conj'), (',', 'punct'), ('H.', 'compound'), ('Greedy', 'amod'), ('layer', 'npadvmod'), ('-', 'punct'), ('wise', 'amod'), ('training', 'compound'), (' ', 'appos'), ('deep', 'amod'), ('networks', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Bengio, ,], [,, Y.], [Y., ,], [,, Lamblin], [Lamblin, ,], [,, P.], [P., ,], [,, Popovici], [Popovici, ,], [,, D.], [D., &], [&, Larochelle], [Larochelle, ,], [,, H.], [H., Greedy], [Greedy, layer], [layer, -], [-, wise], [wise, training], [training,  ], [ , deep], [deep, networks], [networks, .]]

>> Trigrams: 
[[Bengio, ,, Y.], [,, Y., ,], [Y., ,, Lamblin], [,, Lamblin, ,], [Lamblin, ,, P.], [,, P., ,], [P., ,, Popovici], [,, Popovici, ,], [Popovici, ,, D.], [,, D., &], [D., &, Larochelle], [&, Larochelle, ,], [Larochelle, ,, H.], [,, H., Greedy], [H., Greedy, layer], [Greedy, layer, -], [layer, -, wise], [-, wise, training], [wise, training,  ], [training,  , deep], [ , deep, networks], [deep, networks, .]]

>> Noun Phrases are: 
[Bengio, Y., Lamblin, P., Popovici, D., Larochelle, deep networks]

>> Named Entities are: 
[('Bengio', 'PERSON'), ('Y.', 'ORG'), ('Lamblin', 'GPE'), ('D. & Larochelle', 'ORG'), ('H. Greedy', 'PERSON')]


============================ Sentence 528 =============================

In Proc. 


>> Tokens are: 
[Proc, .] 

>> PoS Tags are: 
[('Proc', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Proc', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Proc, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Proc]

>> Named Entities are: 
[]


============================ Sentence 529 =============================

Advances in Neural Information Processing Systems 19  153–160 (2006). 


>> Tokens are: 
[Advances, Neural, Information, Processing, Systems, 19,  , 153–160, (, 2006, ), .] 

>> PoS Tags are: 
[('Advances', 'NOUN'), ('Neural', 'PROPN'), ('Information', 'PROPN'), ('Processing', 'PROPN'), ('Systems', 'PROPN'), ('19', 'NUM'), (' ', 'SPACE'), ('153–160', 'NUM'), ('(', 'PUNCT'), ('2006', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Advances', 'ROOT'), ('Neural', 'compound'), ('Information', 'compound'), ('Processing', 'compound'), ('Systems', 'pobj'), ('19', 'nummod'), (' ', 'appos'), ('153–160', 'appos'), ('(', 'punct'), ('2006', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Advances, Neural], [Neural, Information], [Information, Processing], [Processing, Systems], [Systems, 19], [19,  ], [ , 153–160], [153–160, (], [(, 2006], [2006, )], [), .]]

>> Trigrams: 
[[Advances, Neural, Information], [Neural, Information, Processing], [Information, Processing, Systems], [Processing, Systems, 19], [Systems, 19,  ], [19,  , 153–160], [ , 153–160, (], [153–160, (, 2006], [(, 2006, )], [2006, ), .]]

>> Noun Phrases are: 
[Advances, Neural Information Processing Systems]

>> Named Entities are: 
[('Neural Information Processing Systems', 'ORG'), ('2006', 'DATE')]


============================ Sentence 530 =============================

    


>> Tokens are: 
[   ] 

>> PoS Tags are: 
[('   ', 'SPACE')] 

>> Dependency Tags are: 
[('   ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 531 =============================

This report demonstrated that the unsupervised pre-training method  introduced in ref. 


>> Tokens are: 
[report, demonstrated, unsupervised, pre, -, training, method,  , introduced, ref, .] 

>> PoS Tags are: 
[('report', 'NOUN'), ('demonstrated', 'VERB'), ('unsupervised', 'ADJ'), ('pre', 'ADJ'), ('-', 'ADJ'), ('training', 'ADJ'), ('method', 'NOUN'), (' ', 'SPACE'), ('introduced', 'VERB'), ('ref', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('report', 'nsubj'), ('demonstrated', 'ROOT'), ('unsupervised', 'amod'), ('pre', 'amod'), ('-', 'amod'), ('training', 'amod'), ('method', 'ccomp'), (' ', 'appos'), ('introduced', 'acl'), ('ref', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[report, demonstrated], [demonstrated, unsupervised], [unsupervised, pre], [pre, -], [-, training], [training, method], [method,  ], [ , introduced], [introduced, ref], [ref, .]]

>> Trigrams: 
[[report, demonstrated, unsupervised], [demonstrated, unsupervised, pre], [unsupervised, pre, -], [pre, -, training], [-, training, method], [training, method,  ], [method,  , introduced], [ , introduced, ref], [introduced, ref, .]]

>> Noun Phrases are: 
[This report, ref]

>> Named Entities are: 
[]


============================ Sentence 532 =============================

32 significantly improves performance on test data and  generalizes the method to other unsupervised representation-learning  techniques, such as auto-encoders. 


>> Tokens are: 
[32, significantly, improves, performance, test, data,  , generalizes, method, unsupervised, representation, -, learning,  , techniques, ,, auto, -, encoders, .] 

>> PoS Tags are: 
[('32', 'NUM'), ('significantly', 'ADV'), ('improves', 'VERB'), ('performance', 'NOUN'), ('test', 'NOUN'), ('data', 'NOUN'), (' ', 'SPACE'), ('generalizes', 'VERB'), ('method', 'NOUN'), ('unsupervised', 'ADJ'), ('representation', 'NOUN'), ('-', 'PUNCT'), ('learning', 'VERB'), (' ', 'SPACE'), ('techniques', 'NOUN'), (',', 'PUNCT'), ('auto', 'NOUN'), ('-', 'PUNCT'), ('encoders', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('32', 'nsubj'), ('significantly', 'advmod'), ('improves', 'ROOT'), ('performance', 'dobj'), ('test', 'compound'), ('data', 'pobj'), (' ', 'nsubj'), ('generalizes', 'conj'), ('method', 'dobj'), ('unsupervised', 'amod'), ('representation', 'compound'), ('-', 'punct'), ('learning', 'amod'), (' ', 'compound'), ('techniques', 'pobj'), (',', 'punct'), ('auto', 'compound'), ('-', 'punct'), ('encoders', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[32, significantly], [significantly, improves], [improves, performance], [performance, test], [test, data], [data,  ], [ , generalizes], [generalizes, method], [method, unsupervised], [unsupervised, representation], [representation, -], [-, learning], [learning,  ], [ , techniques], [techniques, ,], [,, auto], [auto, -], [-, encoders], [encoders, .]]

>> Trigrams: 
[[32, significantly, improves], [significantly, improves, performance], [improves, performance, test], [performance, test, data], [test, data,  ], [data,  , generalizes], [ , generalizes, method], [generalizes, method, unsupervised], [method, unsupervised, representation], [unsupervised, representation, -], [representation, -, learning], [-, learning,  ], [learning,  , techniques], [ , techniques, ,], [techniques, ,, auto], [,, auto, -], [auto, -, encoders], [-, encoders, .]]

>> Noun Phrases are: 
[performance, test data, the method, other unsupervised representation-learning  techniques, auto-encoders]

>> Named Entities are: 
[('32', 'CARDINAL')]


============================ Sentence 533 =============================

 34. 


>> Tokens are: 
[ , 34, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('34', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'ROOT'), ('34', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[ , 34], [34, .]]

>> Trigrams: 
[[ , 34, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('34', 'CARDINAL')]


============================ Sentence 534 =============================

Ranzato, M., Poultney, C., Chopra, S. & LeCun, Y. Efficient learning of sparse  representations with an energy-based model. 


>> Tokens are: 
[Ranzato, ,, M., ,, Poultney, ,, C., ,, Chopra, ,, S., &, LeCun, ,, Y., Efficient, learning, sparse,  , representations, energy, -, based, model, .] 

>> PoS Tags are: 
[('Ranzato', 'PROPN'), (',', 'PUNCT'), ('M.', 'PROPN'), (',', 'PUNCT'), ('Poultney', 'PROPN'), (',', 'PUNCT'), ('C.', 'PROPN'), (',', 'PUNCT'), ('Chopra', 'PROPN'), (',', 'PUNCT'), ('S.', 'PROPN'), ('&', 'CCONJ'), ('LeCun', 'PROPN'), (',', 'PUNCT'), ('Y.', 'PROPN'), ('Efficient', 'PROPN'), ('learning', 'NOUN'), ('sparse', 'NOUN'), (' ', 'SPACE'), ('representations', 'NOUN'), ('energy', 'NOUN'), ('-', 'PUNCT'), ('based', 'VERB'), ('model', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Ranzato', 'nmod'), (',', 'punct'), ('M.', 'conj'), (',', 'punct'), ('Poultney', 'conj'), (',', 'punct'), ('C.', 'conj'), (',', 'punct'), ('Chopra', 'conj'), (',', 'punct'), ('S.', 'conj'), ('&', 'cc'), ('LeCun', 'conj'), (',', 'punct'), ('Y.', 'compound'), ('Efficient', 'appos'), ('learning', 'acl'), ('sparse', 'pobj'), (' ', 'punct'), ('representations', 'ROOT'), ('energy', 'npadvmod'), ('-', 'punct'), ('based', 'amod'), ('model', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Ranzato, ,], [,, M.], [M., ,], [,, Poultney], [Poultney, ,], [,, C.], [C., ,], [,, Chopra], [Chopra, ,], [,, S.], [S., &], [&, LeCun], [LeCun, ,], [,, Y.], [Y., Efficient], [Efficient, learning], [learning, sparse], [sparse,  ], [ , representations], [representations, energy], [energy, -], [-, based], [based, model], [model, .]]

>> Trigrams: 
[[Ranzato, ,, M.], [,, M., ,], [M., ,, Poultney], [,, Poultney, ,], [Poultney, ,, C.], [,, C., ,], [C., ,, Chopra], [,, Chopra, ,], [Chopra, ,, S.], [,, S., &], [S., &, LeCun], [&, LeCun, ,], [LeCun, ,, Y.], [,, Y., Efficient], [Y., Efficient, learning], [Efficient, learning, sparse], [learning, sparse,  ], [sparse,  , representations], [ , representations, energy], [representations, energy, -], [energy, -, based], [-, based, model], [based, model, .]]

>> Noun Phrases are: 
[Y. Efficient, sparse, an energy-based model]

>> Named Entities are: 
[('Ranzato', 'PERSON'), ('Poultney', 'PERSON'), ('S. & LeCun', 'ORG'), ('Y. Efficient', 'PERSON')]


============================ Sentence 535 =============================

In Proc. 


>> Tokens are: 
[Proc, .] 

>> PoS Tags are: 
[('Proc', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Proc', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Proc, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Proc]

>> Named Entities are: 
[]


============================ Sentence 536 =============================

Advances in Neural  Information Processing Systems 19 1137–1144 (2006). 


>> Tokens are: 
[Advances, Neural,  , Information, Processing, Systems, 19, 1137–1144, (, 2006, ), .] 

>> PoS Tags are: 
[('Advances', 'NOUN'), ('Neural', 'PROPN'), (' ', 'SPACE'), ('Information', 'PROPN'), ('Processing', 'PROPN'), ('Systems', 'PROPN'), ('19', 'NUM'), ('1137–1144', 'NUM'), ('(', 'PUNCT'), ('2006', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Advances', 'ROOT'), ('Neural', 'nmod'), (' ', 'nummod'), ('Information', 'compound'), ('Processing', 'compound'), ('Systems', 'pobj'), ('19', 'nummod'), ('1137–1144', 'appos'), ('(', 'punct'), ('2006', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Advances, Neural], [Neural,  ], [ , Information], [Information, Processing], [Processing, Systems], [Systems, 19], [19, 1137–1144], [1137–1144, (], [(, 2006], [2006, )], [), .]]

>> Trigrams: 
[[Advances, Neural,  ], [Neural,  , Information], [ , Information, Processing], [Information, Processing, Systems], [Processing, Systems, 19], [Systems, 19, 1137–1144], [19, 1137–1144, (], [1137–1144, (, 2006], [(, 2006, )], [2006, ), .]]

>> Noun Phrases are: 
[Advances, Neural  Information Processing Systems]

>> Named Entities are: 
[('Neural  Information Processing Systems', 'ORG'), ('19 1137–1144', 'DATE'), ('2006', 'DATE')]


============================ Sentence 537 =============================

  35. 


>> Tokens are: 
[  , 35, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('35', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('35', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 35], [35, .]]

>> Trigrams: 
[[  , 35, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('35', 'CARDINAL')]


============================ Sentence 538 =============================

Hinton, G. E. & Salakhutdinov, R. Reducing the dimensionality of data with  neural networks. 


>> Tokens are: 
[Hinton, ,, G., E., &, Salakhutdinov, ,, R., Reducing, dimensionality, data,  , neural, networks, .] 

>> PoS Tags are: 
[('Hinton', 'PROPN'), (',', 'PUNCT'), ('G.', 'PROPN'), ('E.', 'PROPN'), ('&', 'CCONJ'), ('Salakhutdinov', 'PROPN'), (',', 'PUNCT'), ('R.', 'PROPN'), ('Reducing', 'VERB'), ('dimensionality', 'NOUN'), ('data', 'NOUN'), (' ', 'SPACE'), ('neural', 'ADJ'), ('networks', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Hinton', 'ROOT'), (',', 'punct'), ('G.', 'compound'), ('E.', 'conj'), ('&', 'cc'), ('Salakhutdinov', 'conj'), (',', 'punct'), ('R.', 'appos'), ('Reducing', 'acl'), ('dimensionality', 'dobj'), ('data', 'pobj'), (' ', 'nmod'), ('neural', 'amod'), ('networks', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Hinton, ,], [,, G.], [G., E.], [E., &], [&, Salakhutdinov], [Salakhutdinov, ,], [,, R.], [R., Reducing], [Reducing, dimensionality], [dimensionality, data], [data,  ], [ , neural], [neural, networks], [networks, .]]

>> Trigrams: 
[[Hinton, ,, G.], [,, G., E.], [G., E., &], [E., &, Salakhutdinov], [&, Salakhutdinov, ,], [Salakhutdinov, ,, R.], [,, R., Reducing], [R., Reducing, dimensionality], [Reducing, dimensionality, data], [dimensionality, data,  ], [data,  , neural], [ , neural, networks], [neural, networks, .]]

>> Noun Phrases are: 
[Hinton, G. E., Salakhutdinov, R., the dimensionality, data,  neural networks]

>> Named Entities are: 
[('Hinton', 'GPE'), ('G. E. & Salakhutdinov', 'ORG'), ('R. Reducing', 'PERSON')]


============================ Sentence 539 =============================

Science 313, 504–507 


>> Tokens are: 
[Science, 313, ,, 504–507] 

>> PoS Tags are: 
[('Science', 'NOUN'), ('313', 'NUM'), (',', 'PUNCT'), ('504–507', 'NUM')] 

>> Dependency Tags are: 
[('Science', 'ROOT'), ('313', 'nummod'), (',', 'punct'), ('504–507', 'appos')]

>> Bigrams: 
[[Science, 313], [313, ,], [,, 504–507]]

>> Trigrams: 
[[Science, 313, ,], [313, ,, 504–507]]

>> Noun Phrases are: 
[Science]

>> Named Entities are: 
[('313', 'CARDINAL'), ('504–507', 'DATE')]


============================ Sentence 540 =============================

( 


>> Tokens are: 
[(] 

>> PoS Tags are: 
[('(', 'PUNCT')] 

>> Dependency Tags are: 
[('(', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 541 =============================

2006). 


>> Tokens are: 
[2006, ), .] 

>> PoS Tags are: 
[('2006', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('2006', 'ROOT'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[2006, )], [), .]]

>> Trigrams: 
[[2006, ), .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('2006', 'DATE')]


============================ Sentence 542 =============================

  36. 


>> Tokens are: 
[  , 36, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('36', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('36', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 36], [36, .]]

>> Trigrams: 
[[  , 36, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('36', 'CARDINAL')]


============================ Sentence 543 =============================

Sermanet, P., Kavukcuoglu, K., Chintala, S. & LeCun, Y. Pedestrian detection with  unsupervised multi-stage feature learning. 


>> Tokens are: 
[Sermanet, ,, P., ,, Kavukcuoglu, ,, K., ,, Chintala, ,, S., &, LeCun, ,, Y., Pedestrian, detection,  , unsupervised, multi, -, stage, feature, learning, .] 

>> PoS Tags are: 
[('Sermanet', 'PROPN'), (',', 'PUNCT'), ('P.', 'PROPN'), (',', 'PUNCT'), ('Kavukcuoglu', 'PROPN'), (',', 'PUNCT'), ('K.', 'PROPN'), (',', 'PUNCT'), ('Chintala', 'PROPN'), (',', 'PUNCT'), ('S.', 'PROPN'), ('&', 'CCONJ'), ('LeCun', 'PROPN'), (',', 'PUNCT'), ('Y.', 'PROPN'), ('Pedestrian', 'PROPN'), ('detection', 'NOUN'), (' ', 'SPACE'), ('unsupervised', 'ADJ'), ('multi', 'ADJ'), ('-', 'ADJ'), ('stage', 'ADJ'), ('feature', 'NOUN'), ('learning', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Sermanet', 'nsubj'), (',', 'punct'), ('P.', 'appos'), (',', 'punct'), ('Kavukcuoglu', 'conj'), (',', 'punct'), ('K.', 'conj'), (',', 'punct'), ('Chintala', 'conj'), (',', 'punct'), ('S.', 'conj'), ('&', 'cc'), ('LeCun', 'conj'), (',', 'punct'), ('Y.', 'compound'), ('Pedestrian', 'compound'), ('detection', 'appos'), (' ', 'pobj'), ('unsupervised', 'amod'), ('multi', 'amod'), ('-', 'amod'), ('stage', 'amod'), ('feature', 'compound'), ('learning', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Sermanet, ,], [,, P.], [P., ,], [,, Kavukcuoglu], [Kavukcuoglu, ,], [,, K.], [K., ,], [,, Chintala], [Chintala, ,], [,, S.], [S., &], [&, LeCun], [LeCun, ,], [,, Y.], [Y., Pedestrian], [Pedestrian, detection], [detection,  ], [ , unsupervised], [unsupervised, multi], [multi, -], [-, stage], [stage, feature], [feature, learning], [learning, .]]

>> Trigrams: 
[[Sermanet, ,, P.], [,, P., ,], [P., ,, Kavukcuoglu], [,, Kavukcuoglu, ,], [Kavukcuoglu, ,, K.], [,, K., ,], [K., ,, Chintala], [,, Chintala, ,], [Chintala, ,, S.], [,, S., &], [S., &, LeCun], [&, LeCun, ,], [LeCun, ,, Y.], [,, Y., Pedestrian], [Y., Pedestrian, detection], [Pedestrian, detection,  ], [detection,  , unsupervised], [ , unsupervised, multi], [unsupervised, multi, -], [multi, -, stage], [-, stage, feature], [stage, feature, learning], [feature, learning, .]]

>> Noun Phrases are: 
[Sermanet, P., Kavukcuoglu, K., Chintala, S., LeCun, Y. Pedestrian detection]

>> Named Entities are: 
[('Kavukcuoglu', 'GPE'), ('K.', 'NORP'), ('Chintala', 'GPE'), ('S. & LeCun', 'ORG'), ('Y. Pedestrian', 'NORP')]


============================ Sentence 544 =============================

In Proc. 


>> Tokens are: 
[Proc, .] 

>> PoS Tags are: 
[('Proc', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Proc', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Proc, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Proc]

>> Named Entities are: 
[]


============================ Sentence 545 =============================

International Conference  on Computer Vision and Pattern Recognition http://arxiv.org/abs/1212.0142  (2013). 


>> Tokens are: 
[International, Conference,  , Computer, Vision, Pattern, Recognition, http://arxiv.org/abs/1212.0142,  , (, 2013, ), .] 

>> PoS Tags are: 
[('International', 'PROPN'), ('Conference', 'PROPN'), (' ', 'SPACE'), ('Computer', 'PROPN'), ('Vision', 'PROPN'), ('Pattern', 'PROPN'), ('Recognition', 'PROPN'), ('http://arxiv.org/abs/1212.0142', 'PROPN'), (' ', 'SPACE'), ('(', 'PUNCT'), ('2013', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('International', 'compound'), ('Conference', 'ROOT'), (' ', 'nummod'), ('Computer', 'compound'), ('Vision', 'pobj'), ('Pattern', 'conj'), ('Recognition', 'compound'), ('http://arxiv.org/abs/1212.0142', 'appos'), (' ', 'appos'), ('(', 'punct'), ('2013', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[International, Conference], [Conference,  ], [ , Computer], [Computer, Vision], [Vision, Pattern], [Pattern, Recognition], [Recognition, http://arxiv.org/abs/1212.0142], [http://arxiv.org/abs/1212.0142,  ], [ , (], [(, 2013], [2013, )], [), .]]

>> Trigrams: 
[[International, Conference,  ], [Conference,  , Computer], [ , Computer, Vision], [Computer, Vision, Pattern], [Vision, Pattern, Recognition], [Pattern, Recognition, http://arxiv.org/abs/1212.0142], [Recognition, http://arxiv.org/abs/1212.0142,  ], [http://arxiv.org/abs/1212.0142,  , (], [ , (, 2013], [(, 2013, )], [2013, ), .]]

>> Noun Phrases are: 
[International Conference, Computer Vision, Pattern, Recognition http://arxiv.org/abs/1212.0142]

>> Named Entities are: 
[('2013', 'DATE')]


============================ Sentence 546 =============================

  37. 


>> Tokens are: 
[  , 37, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('37', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('37', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 37], [37, .]]

>> Trigrams: 
[[  , 37, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('37', 'CARDINAL')]


============================ Sentence 547 =============================

Raina, R., Madhavan, A. & Ng, A. Y. Large-scale deep unsupervised learning  using graphics processors. 


>> Tokens are: 
[Raina, ,, R., ,, Madhavan, ,, A., &, Ng, ,, A., Y., Large, -, scale, deep, unsupervised, learning,  , graphics, processors, .] 

>> PoS Tags are: 
[('Raina', 'PROPN'), (',', 'PUNCT'), ('R.', 'PROPN'), (',', 'PUNCT'), ('Madhavan', 'PROPN'), (',', 'PUNCT'), ('A.', 'PROPN'), ('&', 'CCONJ'), ('Ng', 'PROPN'), (',', 'PUNCT'), ('A.', 'PROPN'), ('Y.', 'PROPN'), ('Large', 'ADJ'), ('-', 'PUNCT'), ('scale', 'NOUN'), ('deep', 'ADJ'), ('unsupervised', 'ADJ'), ('learning', 'VERB'), (' ', 'SPACE'), ('graphics', 'NOUN'), ('processors', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Raina', 'nsubj'), (',', 'punct'), ('R.', 'appos'), (',', 'punct'), ('Madhavan', 'conj'), (',', 'punct'), ('A.', 'conj'), ('&', 'cc'), ('Ng', 'conj'), (',', 'punct'), ('A.', 'compound'), ('Y.', 'nmod'), ('Large', 'amod'), ('-', 'punct'), ('scale', 'appos'), ('deep', 'amod'), ('unsupervised', 'amod'), ('learning', 'ROOT'), (' ', 'dobj'), ('graphics', 'compound'), ('processors', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Raina, ,], [,, R.], [R., ,], [,, Madhavan], [Madhavan, ,], [,, A.], [A., &], [&, Ng], [Ng, ,], [,, A.], [A., Y.], [Y., Large], [Large, -], [-, scale], [scale, deep], [deep, unsupervised], [unsupervised, learning], [learning,  ], [ , graphics], [graphics, processors], [processors, .]]

>> Trigrams: 
[[Raina, ,, R.], [,, R., ,], [R., ,, Madhavan], [,, Madhavan, ,], [Madhavan, ,, A.], [,, A., &], [A., &, Ng], [&, Ng, ,], [Ng, ,, A.], [,, A., Y.], [A., Y., Large], [Y., Large, -], [Large, -, scale], [-, scale, deep], [scale, deep, unsupervised], [deep, unsupervised, learning], [unsupervised, learning,  ], [learning,  , graphics], [ , graphics, processors], [graphics, processors, .]]

>> Noun Phrases are: 
[Raina, R., Madhavan, A., Ng, A. Y. Large-scale, graphics processors]

>> Named Entities are: 
[('R.', 'NORP'), ('Madhavan, A. & Ng', 'ORG'), ('A. Y. Large-', 'PERSON')]


============================ Sentence 548 =============================

In Proc. 


>> Tokens are: 
[Proc, .] 

>> PoS Tags are: 
[('Proc', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Proc', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Proc, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Proc]

>> Named Entities are: 
[]


============================ Sentence 549 =============================

26th Annual International Conference on  Machine Learning 873–880 (2009). 


>> Tokens are: 
[26th, Annual, International, Conference,  , Machine, Learning, 873–880, (, 2009, ), .] 

>> PoS Tags are: 
[('26th', 'ADJ'), ('Annual', 'PROPN'), ('International', 'PROPN'), ('Conference', 'PROPN'), (' ', 'SPACE'), ('Machine', 'PROPN'), ('Learning', 'PROPN'), ('873–880', 'NUM'), ('(', 'PUNCT'), ('2009', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('26th', 'amod'), ('Annual', 'compound'), ('International', 'compound'), ('Conference', 'ROOT'), (' ', 'pobj'), ('Machine', 'compound'), ('Learning', 'npadvmod'), ('873–880', 'nummod'), ('(', 'punct'), ('2009', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[26th, Annual], [Annual, International], [International, Conference], [Conference,  ], [ , Machine], [Machine, Learning], [Learning, 873–880], [873–880, (], [(, 2009], [2009, )], [), .]]

>> Trigrams: 
[[26th, Annual, International], [Annual, International, Conference], [International, Conference,  ], [Conference,  , Machine], [ , Machine, Learning], [Machine, Learning, 873–880], [Learning, 873–880, (], [873–880, (, 2009], [(, 2009, )], [2009, ), .]]

>> Noun Phrases are: 
[26th Annual International Conference]

>> Named Entities are: 
[('26th', 'ORDINAL'), ('Annual International Conference', 'EVENT'), ('2009', 'DATE')]


============================ Sentence 550 =============================

  38. 


>> Tokens are: 
[  , 38, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('38', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('38', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 38], [38, .]]

>> Trigrams: 
[[  , 38, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('38', 'CARDINAL')]


============================ Sentence 551 =============================

Mohamed, A.-R., Dahl, G. E. & Hinton, G. Acoustic modeling using deep belief  networks. 


>> Tokens are: 
[Mohamed, ,, A.-R., ,, Dahl, ,, G., E., &, Hinton, ,, G., Acoustic, modeling, deep, belief,  , networks, .] 

>> PoS Tags are: 
[('Mohamed', 'PROPN'), (',', 'PUNCT'), ('A.-R.', 'PROPN'), (',', 'PUNCT'), ('Dahl', 'PROPN'), (',', 'PUNCT'), ('G.', 'PROPN'), ('E.', 'PROPN'), ('&', 'CCONJ'), ('Hinton', 'PROPN'), (',', 'PUNCT'), ('G.', 'PROPN'), ('Acoustic', 'PROPN'), ('modeling', 'NOUN'), ('deep', 'ADJ'), ('belief', 'NOUN'), (' ', 'SPACE'), ('networks', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Mohamed', 'ROOT'), (',', 'punct'), ('A.-R.', 'appos'), (',', 'punct'), ('Dahl', 'npadvmod'), (',', 'punct'), ('G.', 'compound'), ('E.', 'conj'), ('&', 'cc'), ('Hinton', 'conj'), (',', 'punct'), ('G.', 'compound'), ('Acoustic', 'compound'), ('modeling', 'appos'), ('deep', 'amod'), ('belief', 'nmod'), (' ', 'compound'), ('networks', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Mohamed, ,], [,, A.-R.], [A.-R., ,], [,, Dahl], [Dahl, ,], [,, G.], [G., E.], [E., &], [&, Hinton], [Hinton, ,], [,, G.], [G., Acoustic], [Acoustic, modeling], [modeling, deep], [deep, belief], [belief,  ], [ , networks], [networks, .]]

>> Trigrams: 
[[Mohamed, ,, A.-R.], [,, A.-R., ,], [A.-R., ,, Dahl], [,, Dahl, ,], [Dahl, ,, G.], [,, G., E.], [G., E., &], [E., &, Hinton], [&, Hinton, ,], [Hinton, ,, G.], [,, G., Acoustic], [G., Acoustic, modeling], [Acoustic, modeling, deep], [modeling, deep, belief], [deep, belief,  ], [belief,  , networks], [ , networks, .]]

>> Noun Phrases are: 
[Mohamed, A.-R., G. Acoustic modeling, deep belief  networks]

>> Named Entities are: 
[('Mohamed', 'ORG'), ('Dahl', 'ORG'), ('G. E. & Hinton', 'ORG'), ('G. Acoustic', 'PERSON')]


============================ Sentence 552 =============================

IEEE Trans. 


>> Tokens are: 
[IEEE, Trans, .] 

>> PoS Tags are: 
[('IEEE', 'PROPN'), ('Trans', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('IEEE', 'compound'), ('Trans', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[IEEE, Trans], [Trans, .]]

>> Trigrams: 
[[IEEE, Trans, .]]

>> Noun Phrases are: 
[IEEE Trans]

>> Named Entities are: 
[('IEEE Trans', 'ORG')]


============================ Sentence 553 =============================

Audio Speech Lang. 


>> Tokens are: 
[Audio, Speech, Lang, .] 

>> PoS Tags are: 
[('Audio', 'PROPN'), ('Speech', 'PROPN'), ('Lang', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Audio', 'compound'), ('Speech', 'compound'), ('Lang', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Audio, Speech], [Speech, Lang], [Lang, .]]

>> Trigrams: 
[[Audio, Speech, Lang], [Speech, Lang, .]]

>> Noun Phrases are: 
[Audio Speech Lang]

>> Named Entities are: 
[('Audio Speech Lang', 'PERSON')]


============================ Sentence 554 =============================

Process. 


>> Tokens are: 
[Process, .] 

>> PoS Tags are: 
[('Process', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Process', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Process, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Process]

>> Named Entities are: 
[]


============================ Sentence 555 =============================

20, 14–22 (2012). 


>> Tokens are: 
[20, ,, 14–22, (, 2012, ), .] 

>> PoS Tags are: 
[('20', 'NUM'), (',', 'PUNCT'), ('14–22', 'NUM'), ('(', 'PUNCT'), ('2012', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('20', 'nummod'), (',', 'punct'), ('14–22', 'ROOT'), ('(', 'punct'), ('2012', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[20, ,], [,, 14–22], [14–22, (], [(, 2012], [2012, )], [), .]]

>> Trigrams: 
[[20, ,, 14–22], [,, 14–22, (], [14–22, (, 2012], [(, 2012, )], [2012, ), .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('20, 14–22', 'CARDINAL'), ('2012', 'DATE')]


============================ Sentence 556 =============================

  39. 


>> Tokens are: 
[  , 39, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('39', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('39', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 39], [39, .]]

>> Trigrams: 
[[  , 39, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('39', 'CARDINAL')]


============================ Sentence 557 =============================

Dahl, G. E., Yu, D., Deng, L. & Acero, A. Context-dependent pre-trained deep  neural networks for large vocabulary speech recognition. 


>> Tokens are: 
[Dahl, ,, G., E., ,, Yu, ,, D., ,, Deng, ,, L., &, Acero, ,, A., Context, -, dependent, pre, -, trained, deep,  , neural, networks, large, vocabulary, speech, recognition, .] 

>> PoS Tags are: 
[('Dahl', 'PROPN'), (',', 'PUNCT'), ('G.', 'PROPN'), ('E.', 'PROPN'), (',', 'PUNCT'), ('Yu', 'PROPN'), (',', 'PUNCT'), ('D.', 'PROPN'), (',', 'PUNCT'), ('Deng', 'PROPN'), (',', 'PUNCT'), ('L.', 'PROPN'), ('&', 'CCONJ'), ('Acero', 'PROPN'), (',', 'PUNCT'), ('A.', 'PROPN'), ('Context', 'NOUN'), ('-', 'PUNCT'), ('dependent', 'ADJ'), ('pre', 'ADJ'), ('-', 'ADJ'), ('trained', 'ADJ'), ('deep', 'ADJ'), (' ', 'SPACE'), ('neural', 'ADJ'), ('networks', 'NOUN'), ('large', 'ADJ'), ('vocabulary', 'ADJ'), ('speech', 'NOUN'), ('recognition', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Dahl', 'ROOT'), (',', 'punct'), ('G.', 'compound'), ('E.', 'conj'), (',', 'punct'), ('Yu', 'appos'), (',', 'punct'), ('D.', 'conj'), (',', 'punct'), ('Deng', 'conj'), (',', 'punct'), ('L.', 'conj'), ('&', 'cc'), ('Acero', 'conj'), (',', 'punct'), ('A.', 'compound'), ('Context', 'npadvmod'), ('-', 'punct'), ('dependent', 'amod'), ('pre', 'amod'), ('-', 'amod'), ('trained', 'amod'), ('deep', 'amod'), (' ', 'nmod'), ('neural', 'amod'), ('networks', 'appos'), ('large', 'amod'), ('vocabulary', 'amod'), ('speech', 'compound'), ('recognition', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Dahl, ,], [,, G.], [G., E.], [E., ,], [,, Yu], [Yu, ,], [,, D.], [D., ,], [,, Deng], [Deng, ,], [,, L.], [L., &], [&, Acero], [Acero, ,], [,, A.], [A., Context], [Context, -], [-, dependent], [dependent, pre], [pre, -], [-, trained], [trained, deep], [deep,  ], [ , neural], [neural, networks], [networks, large], [large, vocabulary], [vocabulary, speech], [speech, recognition], [recognition, .]]

>> Trigrams: 
[[Dahl, ,, G.], [,, G., E.], [G., E., ,], [E., ,, Yu], [,, Yu, ,], [Yu, ,, D.], [,, D., ,], [D., ,, Deng], [,, Deng, ,], [Deng, ,, L.], [,, L., &], [L., &, Acero], [&, Acero, ,], [Acero, ,, A.], [,, A., Context], [A., Context, -], [Context, -, dependent], [-, dependent, pre], [dependent, pre, -], [pre, -, trained], [-, trained, deep], [trained, deep,  ], [deep,  , neural], [ , neural, networks], [neural, networks, large], [networks, large, vocabulary], [large, vocabulary, speech], [vocabulary, speech, recognition], [speech, recognition, .]]

>> Noun Phrases are: 
[Dahl, G. E., Yu, D., Deng, L., Acero, A. Context-dependent pre-trained deep  neural networks, large vocabulary speech recognition]

>> Named Entities are: 
[('G. E.', 'PERSON'), ('D.', 'NORP'), ('Deng', 'PERSON'), ('L. & Acero', 'ORG'), ('A. Context-dependent', 'PERSON')]


============================ Sentence 558 =============================

IEEE Trans. 


>> Tokens are: 
[IEEE, Trans, .] 

>> PoS Tags are: 
[('IEEE', 'PROPN'), ('Trans', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('IEEE', 'compound'), ('Trans', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[IEEE, Trans], [Trans, .]]

>> Trigrams: 
[[IEEE, Trans, .]]

>> Noun Phrases are: 
[IEEE Trans]

>> Named Entities are: 
[('IEEE Trans', 'PERSON')]


============================ Sentence 559 =============================

Audio   


>> Tokens are: 
[Audio,  ] 

>> PoS Tags are: 
[('Audio', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Audio', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[Audio,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Audio]

>> Named Entities are: 
[]


============================ Sentence 560 =============================

Speech Lang. 


>> Tokens are: 
[Speech, Lang, .] 

>> PoS Tags are: 
[('Speech', 'PROPN'), ('Lang', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Speech', 'compound'), ('Lang', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Speech, Lang], [Lang, .]]

>> Trigrams: 
[[Speech, Lang, .]]

>> Noun Phrases are: 
[Speech Lang]

>> Named Entities are: 
[('Speech Lang', 'PERSON')]


============================ Sentence 561 =============================

Process. 


>> Tokens are: 
[Process, .] 

>> PoS Tags are: 
[('Process', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Process', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Process, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Process]

>> Named Entities are: 
[]


============================ Sentence 562 =============================

20, 33–42 (2012). 


>> Tokens are: 
[20, ,, 33–42, (, 2012, ), .] 

>> PoS Tags are: 
[('20', 'NUM'), (',', 'PUNCT'), ('33–42', 'NUM'), ('(', 'PUNCT'), ('2012', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('20', 'nummod'), (',', 'punct'), ('33–42', 'ROOT'), ('(', 'punct'), ('2012', 'npadvmod'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[20, ,], [,, 33–42], [33–42, (], [(, 2012], [2012, )], [), .]]

>> Trigrams: 
[[20, ,, 33–42], [,, 33–42, (], [33–42, (, 2012], [(, 2012, )], [2012, ), .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('20', 'CARDINAL'), ('33–42', 'CARDINAL'), ('2012', 'DATE')]


============================ Sentence 563 =============================

  40. 


>> Tokens are: 
[  , 40, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('40', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('40', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 40], [40, .]]

>> Trigrams: 
[[  , 40, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('40', 'CARDINAL')]


============================ Sentence 564 =============================

Bengio, Y., Courville, A. & Vincent, P. Representation learning: a review and new  perspectives. 


>> Tokens are: 
[Bengio, ,, Y., ,, Courville, ,, A., &, Vincent, ,, P., Representation, learning, :, review, new,  , perspectives, .] 

>> PoS Tags are: 
[('Bengio', 'PROPN'), (',', 'PUNCT'), ('Y.', 'PROPN'), (',', 'PUNCT'), ('Courville', 'PROPN'), (',', 'PUNCT'), ('A.', 'PROPN'), ('&', 'CCONJ'), ('Vincent', 'PROPN'), (',', 'PUNCT'), ('P.', 'PROPN'), ('Representation', 'PROPN'), ('learning', 'VERB'), (':', 'PUNCT'), ('review', 'NOUN'), ('new', 'ADJ'), (' ', 'SPACE'), ('perspectives', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Bengio', 'dep'), (',', 'punct'), ('Y.', 'npadvmod'), (',', 'punct'), ('Courville', 'conj'), (',', 'punct'), ('A.', 'conj'), ('&', 'cc'), ('Vincent', 'conj'), (',', 'punct'), ('P.', 'compound'), ('Representation', 'nsubj'), ('learning', 'ROOT'), (':', 'punct'), ('review', 'dep'), ('new', 'amod'), (' ', 'compound'), ('perspectives', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[Bengio, ,], [,, Y.], [Y., ,], [,, Courville], [Courville, ,], [,, A.], [A., &], [&, Vincent], [Vincent, ,], [,, P.], [P., Representation], [Representation, learning], [learning, :], [:, review], [review, new], [new,  ], [ , perspectives], [perspectives, .]]

>> Trigrams: 
[[Bengio, ,, Y.], [,, Y., ,], [Y., ,, Courville], [,, Courville, ,], [Courville, ,, A.], [,, A., &], [A., &, Vincent], [&, Vincent, ,], [Vincent, ,, P.], [,, P., Representation], [P., Representation, learning], [Representation, learning, :], [learning, :, review], [:, review, new], [review, new,  ], [new,  , perspectives], [ , perspectives, .]]

>> Noun Phrases are: 
[P. Representation]

>> Named Entities are: 
[('Bengio', 'PERSON'), ('Y.', 'ORG'), ('Courville', 'GPE'), ('A. & Vincent', 'ORG')]


============================ Sentence 565 =============================

IEEE Trans. 


>> Tokens are: 
[IEEE, Trans, .] 

>> PoS Tags are: 
[('IEEE', 'PROPN'), ('Trans', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('IEEE', 'compound'), ('Trans', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[IEEE, Trans], [Trans, .]]

>> Trigrams: 
[[IEEE, Trans, .]]

>> Noun Phrases are: 
[IEEE Trans]

>> Named Entities are: 
[('IEEE Trans', 'PERSON')]


============================ Sentence 566 =============================

Pattern Anal. 


>> Tokens are: 
[Pattern, Anal, .] 

>> PoS Tags are: 
[('Pattern', 'PROPN'), ('Anal', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Pattern', 'compound'), ('Anal', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Pattern, Anal], [Anal, .]]

>> Trigrams: 
[[Pattern, Anal, .]]

>> Noun Phrases are: 
[Pattern Anal]

>> Named Entities are: 
[]


============================ Sentence 567 =============================

Machine Intell. 


>> Tokens are: 
[Machine, Intell, .] 

>> PoS Tags are: 
[('Machine', 'PROPN'), ('Intell', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Machine', 'compound'), ('Intell', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Machine, Intell], [Intell, .]]

>> Trigrams: 
[[Machine, Intell, .]]

>> Noun Phrases are: 
[Machine Intell]

>> Named Entities are: 
[('Machine Intell', 'PERSON')]


============================ Sentence 568 =============================

35, 1798–1828 (2013). 


>> Tokens are: 
[35, ,, 1798–1828, (, 2013, ), .] 

>> PoS Tags are: 
[('35', 'NUM'), (',', 'PUNCT'), ('1798–1828', 'NUM'), ('(', 'PUNCT'), ('2013', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('35', 'ROOT'), (',', 'punct'), ('1798–1828', 'npadvmod'), ('(', 'punct'), ('2013', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[35, ,], [,, 1798–1828], [1798–1828, (], [(, 2013], [2013, )], [), .]]

>> Trigrams: 
[[35, ,, 1798–1828], [,, 1798–1828, (], [1798–1828, (, 2013], [(, 2013, )], [2013, ), .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('35', 'DATE'), ('1798–1828', 'CARDINAL'), ('2013', 'DATE')]


============================ Sentence 569 =============================

  41. 


>> Tokens are: 
[  , 41, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('41', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('41', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 41], [41, .]]

>> Trigrams: 
[[  , 41, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('41', 'CARDINAL')]


============================ Sentence 570 =============================

LeCun, Y. et al. 


>> Tokens are: 
[LeCun, ,, Y., et, al, .] 

>> PoS Tags are: 
[('LeCun', 'PROPN'), (',', 'PUNCT'), ('Y.', 'PROPN'), ('et', 'PROPN'), ('al', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('LeCun', 'ROOT'), (',', 'punct'), ('Y.', 'compound'), ('et', 'compound'), ('al', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[LeCun, ,], [,, Y.], [Y., et], [et, al], [al, .]]

>> Trigrams: 
[[LeCun, ,, Y.], [,, Y., et], [Y., et, al], [et, al, .]]

>> Noun Phrases are: 
[LeCun, Y. et al]

>> Named Entities are: 
[]


============================ Sentence 571 =============================

Handwritten digit recognition with a back-propagation network. 


>> Tokens are: 
[Handwritten, digit, recognition, -, propagation, network, .] 

>> PoS Tags are: 
[('Handwritten', 'ADJ'), ('digit', 'NOUN'), ('recognition', 'NOUN'), ('-', 'PUNCT'), ('propagation', 'NOUN'), ('network', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Handwritten', 'amod'), ('digit', 'compound'), ('recognition', 'ROOT'), ('-', 'punct'), ('propagation', 'compound'), ('network', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Handwritten, digit], [digit, recognition], [recognition, -], [-, propagation], [propagation, network], [network, .]]

>> Trigrams: 
[[Handwritten, digit, recognition], [digit, recognition, -], [recognition, -, propagation], [-, propagation, network], [propagation, network, .]]

>> Noun Phrases are: 
[Handwritten digit recognition, a back-propagation network]

>> Named Entities are: 
[]


============================ Sentence 572 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 573 =============================

In Proc. 


>> Tokens are: 
[Proc, .] 

>> PoS Tags are: 
[('Proc', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Proc', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Proc, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Proc]

>> Named Entities are: 
[]


============================ Sentence 574 =============================

Advances in Neural Information Processing Systems 396–404 (1990). 


>> Tokens are: 
[Advances, Neural, Information, Processing, Systems, 396–404, (, 1990, ), .] 

>> PoS Tags are: 
[('Advances', 'NOUN'), ('Neural', 'PROPN'), ('Information', 'PROPN'), ('Processing', 'PROPN'), ('Systems', 'PROPN'), ('396–404', 'PROPN'), ('(', 'PUNCT'), ('1990', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Advances', 'ROOT'), ('Neural', 'compound'), ('Information', 'compound'), ('Processing', 'compound'), ('Systems', 'compound'), ('396–404', 'pobj'), ('(', 'punct'), ('1990', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Advances, Neural], [Neural, Information], [Information, Processing], [Processing, Systems], [Systems, 396–404], [396–404, (], [(, 1990], [1990, )], [), .]]

>> Trigrams: 
[[Advances, Neural, Information], [Neural, Information, Processing], [Information, Processing, Systems], [Processing, Systems, 396–404], [Systems, 396–404, (], [396–404, (, 1990], [(, 1990, )], [1990, ), .]]

>> Noun Phrases are: 
[Advances, Neural Information Processing Systems 396–404]

>> Named Entities are: 
[('Neural Information Processing Systems', 'ORG'), ('396–404', 'CARDINAL'), ('1990', 'DATE')]


============================ Sentence 575 =============================

   This is the first paper on convolutional networks trained by backpropagation   for the task of classifying low-resolution images of handwritten digits. 


>> Tokens are: 
[   , paper, convolutional, networks, trained, backpropagation,   , task, classifying, low, -, resolution, images, handwritten, digits, .] 

>> PoS Tags are: 
[('   ', 'SPACE'), ('paper', 'NOUN'), ('convolutional', 'ADJ'), ('networks', 'NOUN'), ('trained', 'VERB'), ('backpropagation', 'NOUN'), ('  ', 'SPACE'), ('task', 'NOUN'), ('classifying', 'VERB'), ('low', 'ADJ'), ('-', 'PUNCT'), ('resolution', 'NOUN'), ('images', 'NOUN'), ('handwritten', 'ADJ'), ('digits', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('   ', 'npadvmod'), ('paper', 'attr'), ('convolutional', 'amod'), ('networks', 'pobj'), ('trained', 'acl'), ('backpropagation', 'compound'), ('  ', 'pobj'), ('task', 'pobj'), ('classifying', 'pcomp'), ('low', 'amod'), ('-', 'punct'), ('resolution', 'compound'), ('images', 'dobj'), ('handwritten', 'amod'), ('digits', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[   , paper], [paper, convolutional], [convolutional, networks], [networks, trained], [trained, backpropagation], [backpropagation,   ], [  , task], [task, classifying], [classifying, low], [low, -], [-, resolution], [resolution, images], [images, handwritten], [handwritten, digits], [digits, .]]

>> Trigrams: 
[[   , paper, convolutional], [paper, convolutional, networks], [convolutional, networks, trained], [networks, trained, backpropagation], [trained, backpropagation,   ], [backpropagation,   , task], [  , task, classifying], [task, classifying, low], [classifying, low, -], [low, -, resolution], [-, resolution, images], [resolution, images, handwritten], [images, handwritten, digits], [handwritten, digits, .]]

>> Noun Phrases are: 
[the first paper, convolutional networks, the task, low-resolution images, handwritten digits]

>> Named Entities are: 
[('first', 'ORDINAL')]


============================ Sentence 576 =============================

42. 


>> Tokens are: 
[42, .] 

>> PoS Tags are: 
[('42', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('42', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[42, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('42', 'CARDINAL')]


============================ Sentence 577 =============================

LeCun, Y., Bottou, L., Bengio, Y. & Haffner, P. Gradient-based learning applied to   document recognition. 


>> Tokens are: 
[LeCun, ,, Y., ,, Bottou, ,, L., ,, Bengio, ,, Y., &, Haffner, ,, P., Gradient, -, based, learning, applied,   , document, recognition, .] 

>> PoS Tags are: 
[('LeCun', 'PROPN'), (',', 'PUNCT'), ('Y.', 'PROPN'), (',', 'PUNCT'), ('Bottou', 'PROPN'), (',', 'PUNCT'), ('L.', 'PROPN'), (',', 'PUNCT'), ('Bengio', 'PROPN'), (',', 'PUNCT'), ('Y.', 'PROPN'), ('&', 'CCONJ'), ('Haffner', 'PROPN'), (',', 'PUNCT'), ('P.', 'PROPN'), ('Gradient', 'PROPN'), ('-', 'PUNCT'), ('based', 'VERB'), ('learning', 'NOUN'), ('applied', 'VERB'), ('  ', 'SPACE'), ('document', 'NOUN'), ('recognition', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('LeCun', 'nsubj'), (',', 'punct'), ('Y.', 'conj'), (',', 'punct'), ('Bottou', 'conj'), (',', 'punct'), ('L.', 'conj'), (',', 'punct'), ('Bengio', 'conj'), (',', 'punct'), ('Y.', 'conj'), ('&', 'cc'), ('Haffner', 'conj'), (',', 'punct'), ('P.', 'compound'), ('Gradient', 'npadvmod'), ('-', 'punct'), ('based', 'amod'), ('learning', 'appos'), ('applied', 'ROOT'), ('  ', 'compound'), ('document', 'compound'), ('recognition', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[LeCun, ,], [,, Y.], [Y., ,], [,, Bottou], [Bottou, ,], [,, L.], [L., ,], [,, Bengio], [Bengio, ,], [,, Y.], [Y., &], [&, Haffner], [Haffner, ,], [,, P.], [P., Gradient], [Gradient, -], [-, based], [based, learning], [learning, applied], [applied,   ], [  , document], [document, recognition], [recognition, .]]

>> Trigrams: 
[[LeCun, ,, Y.], [,, Y., ,], [Y., ,, Bottou], [,, Bottou, ,], [Bottou, ,, L.], [,, L., ,], [L., ,, Bengio], [,, Bengio, ,], [Bengio, ,, Y.], [,, Y., &], [Y., &, Haffner], [&, Haffner, ,], [Haffner, ,, P.], [,, P., Gradient], [P., Gradient, -], [Gradient, -, based], [-, based, learning], [based, learning, applied], [learning, applied,   ], [applied,   , document], [  , document, recognition], [document, recognition, .]]

>> Noun Phrases are: 
[LeCun, Y., Bottou, L., Bengio, Y., Haffner, P. Gradient-based learning,   document recognition]

>> Named Entities are: 
[('Y.', 'ORG'), ('Bottou', 'GPE'), ('L.', 'GPE'), ('Bengio', 'GPE'), ('Y. & Haffner', 'ORG'), ('P. Gradient', 'PERSON')]


============================ Sentence 578 =============================

Proc. 


>> Tokens are: 
[Proc, .] 

>> PoS Tags are: 
[('Proc', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Proc', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Proc, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Proc]

>> Named Entities are: 
[]


============================ Sentence 579 =============================

IEEE 86, 2278–2324 (1998). 


>> Tokens are: 
[IEEE, 86, ,, 2278–2324, (, 1998, ), .] 

>> PoS Tags are: 
[('IEEE', 'PROPN'), ('86', 'NUM'), (',', 'PUNCT'), ('2278–2324', 'NUM'), ('(', 'PUNCT'), ('1998', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('IEEE', 'ROOT'), ('86', 'nummod'), (',', 'punct'), ('2278–2324', 'appos'), ('(', 'punct'), ('1998', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[IEEE, 86], [86, ,], [,, 2278–2324], [2278–2324, (], [(, 1998], [1998, )], [), .]]

>> Trigrams: 
[[IEEE, 86, ,], [86, ,, 2278–2324], [,, 2278–2324, (], [2278–2324, (, 1998], [(, 1998, )], [1998, ), .]]

>> Noun Phrases are: 
[IEEE]

>> Named Entities are: 
[('86', 'DATE'), ('2278–2324', 'CARDINAL'), ('1998', 'DATE')]


============================ Sentence 580 =============================

  This overview paper on the principles of end-to-end training of modular   systems such as deep neural networks using gradient-based optimization  showed how neural networks (and in particular convolutional nets) can be  combined with search or inference mechanisms to model complex outputs  that are interdependent, such as sequences of characters associated with the  content of a document. 


>> Tokens are: 
[  , overview, paper, principles, end, -, -, end, training, modular,   , systems, deep, neural, networks, gradient, -, based, optimization,  , showed, neural, networks, (, particular, convolutional, nets, ),  , combined, search, inference, mechanisms, model, complex, outputs,  , interdependent, ,, sequences, characters, associated,  , content, document, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('overview', 'NOUN'), ('paper', 'NOUN'), ('principles', 'NOUN'), ('end', 'NOUN'), ('-', 'PUNCT'), ('-', 'PUNCT'), ('end', 'NOUN'), ('training', 'NOUN'), ('modular', 'ADJ'), ('  ', 'SPACE'), ('systems', 'NOUN'), ('deep', 'ADJ'), ('neural', 'ADJ'), ('networks', 'NOUN'), ('gradient', 'NOUN'), ('-', 'PUNCT'), ('based', 'VERB'), ('optimization', 'NOUN'), (' ', 'SPACE'), ('showed', 'VERB'), ('neural', 'ADJ'), ('networks', 'NOUN'), ('(', 'PUNCT'), ('particular', 'ADJ'), ('convolutional', 'ADJ'), ('nets', 'NOUN'), (')', 'PUNCT'), (' ', 'SPACE'), ('combined', 'VERB'), ('search', 'NOUN'), ('inference', 'NOUN'), ('mechanisms', 'NOUN'), ('model', 'VERB'), ('complex', 'ADJ'), ('outputs', 'NOUN'), (' ', 'SPACE'), ('interdependent', 'ADJ'), (',', 'PUNCT'), ('sequences', 'NOUN'), ('characters', 'NOUN'), ('associated', 'VERB'), (' ', 'SPACE'), ('content', 'NOUN'), ('document', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'nmod'), ('overview', 'compound'), ('paper', 'nsubj'), ('principles', 'pobj'), ('end', 'nmod'), ('-', 'punct'), ('-', 'punct'), ('end', 'pobj'), ('training', 'pobj'), ('modular', 'amod'), ('  ', 'compound'), ('systems', 'pobj'), ('deep', 'amod'), ('neural', 'amod'), ('networks', 'pobj'), ('gradient', 'npadvmod'), ('-', 'punct'), ('based', 'amod'), ('optimization', 'dobj'), (' ', 'nsubj'), ('showed', 'ROOT'), ('neural', 'amod'), ('networks', 'nsubj'), ('(', 'punct'), ('particular', 'amod'), ('convolutional', 'amod'), ('nets', 'pobj'), (')', 'punct'), (' ', 'attr'), ('combined', 'acl'), ('search', 'nmod'), ('inference', 'conj'), ('mechanisms', 'pobj'), ('model', 'relcl'), ('complex', 'amod'), ('outputs', 'dobj'), (' ', 'appos'), ('interdependent', 'acomp'), (',', 'punct'), ('sequences', 'pobj'), ('characters', 'pobj'), ('associated', 'acl'), (' ', 'compound'), ('content', 'pobj'), ('document', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[  , overview], [overview, paper], [paper, principles], [principles, end], [end, -], [-, -], [-, end], [end, training], [training, modular], [modular,   ], [  , systems], [systems, deep], [deep, neural], [neural, networks], [networks, gradient], [gradient, -], [-, based], [based, optimization], [optimization,  ], [ , showed], [showed, neural], [neural, networks], [networks, (], [(, particular], [particular, convolutional], [convolutional, nets], [nets, )], [),  ], [ , combined], [combined, search], [search, inference], [inference, mechanisms], [mechanisms, model], [model, complex], [complex, outputs], [outputs,  ], [ , interdependent], [interdependent, ,], [,, sequences], [sequences, characters], [characters, associated], [associated,  ], [ , content], [content, document], [document, .]]

>> Trigrams: 
[[  , overview, paper], [overview, paper, principles], [paper, principles, end], [principles, end, -], [end, -, -], [-, -, end], [-, end, training], [end, training, modular], [training, modular,   ], [modular,   , systems], [  , systems, deep], [systems, deep, neural], [deep, neural, networks], [neural, networks, gradient], [networks, gradient, -], [gradient, -, based], [-, based, optimization], [based, optimization,  ], [optimization,  , showed], [ , showed, neural], [showed, neural, networks], [neural, networks, (], [networks, (, particular], [(, particular, convolutional], [particular, convolutional, nets], [convolutional, nets, )], [nets, ),  ], [),  , combined], [ , combined, search], [combined, search, inference], [search, inference, mechanisms], [inference, mechanisms, model], [mechanisms, model, complex], [model, complex, outputs], [complex, outputs,  ], [outputs,  , interdependent], [ , interdependent, ,], [interdependent, ,, sequences], [,, sequences, characters], [sequences, characters, associated], [characters, associated,  ], [associated,  , content], [ , content, document], [content, document, .]]

>> Noun Phrases are: 
[  This overview paper, the principles, end, modular   systems, deep neural networks, gradient-based optimization, how neural networks, particular convolutional nets, search or inference mechanisms, complex outputs, sequences, characters, the  content, a document]

>> Named Entities are: 
[]


============================ Sentence 581 =============================

 43. 


>> Tokens are: 
[ , 43, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('43', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'ROOT'), ('43', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[ , 43], [43, .]]

>> Trigrams: 
[[ , 43, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('43', 'CARDINAL')]


============================ Sentence 582 =============================

Hubel, D. H. & Wiesel, T. N. Receptive fields, binocular interaction, and functional  architecture in the cat’s visual cortex. 


>> Tokens are: 
[Hubel, ,, D., H., &, Wiesel, ,, T., N., Receptive, fields, ,, binocular, interaction, ,, functional,  , architecture, cat, visual, cortex, .] 

>> PoS Tags are: 
[('Hubel', 'PROPN'), (',', 'PUNCT'), ('D.', 'PROPN'), ('H.', 'PROPN'), ('&', 'CCONJ'), ('Wiesel', 'PROPN'), (',', 'PUNCT'), ('T.', 'PROPN'), ('N.', 'PROPN'), ('Receptive', 'ADJ'), ('fields', 'NOUN'), (',', 'PUNCT'), ('binocular', 'ADJ'), ('interaction', 'NOUN'), (',', 'PUNCT'), ('functional', 'ADJ'), (' ', 'SPACE'), ('architecture', 'NOUN'), ('cat', 'NOUN'), ('visual', 'ADJ'), ('cortex', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Hubel', 'ROOT'), (',', 'punct'), ('D.', 'compound'), ('H.', 'appos'), ('&', 'cc'), ('Wiesel', 'conj'), (',', 'punct'), ('T.', 'compound'), ('N.', 'compound'), ('Receptive', 'amod'), ('fields', 'appos'), (',', 'punct'), ('binocular', 'amod'), ('interaction', 'conj'), (',', 'punct'), ('functional', 'amod'), (' ', 'compound'), ('architecture', 'conj'), ('cat', 'poss'), ('visual', 'amod'), ('cortex', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Hubel, ,], [,, D.], [D., H.], [H., &], [&, Wiesel], [Wiesel, ,], [,, T.], [T., N.], [N., Receptive], [Receptive, fields], [fields, ,], [,, binocular], [binocular, interaction], [interaction, ,], [,, functional], [functional,  ], [ , architecture], [architecture, cat], [cat, visual], [visual, cortex], [cortex, .]]

>> Trigrams: 
[[Hubel, ,, D.], [,, D., H.], [D., H., &], [H., &, Wiesel], [&, Wiesel, ,], [Wiesel, ,, T.], [,, T., N.], [T., N., Receptive], [N., Receptive, fields], [Receptive, fields, ,], [fields, ,, binocular], [,, binocular, interaction], [binocular, interaction, ,], [interaction, ,, functional], [,, functional,  ], [functional,  , architecture], [ , architecture, cat], [architecture, cat, visual], [cat, visual, cortex], [visual, cortex, .]]

>> Noun Phrases are: 
[Hubel, D. H., Wiesel, T. N. Receptive fields, binocular interaction, functional  architecture, the cat’s visual cortex]

>> Named Entities are: 
[('Hubel', 'ORG'), ('D. H. & Wiesel', 'ORG'), ('T. N. Receptive', 'PERSON')]


============================ Sentence 583 =============================

J. Physiol. 


>> Tokens are: 
[J., Physiol, .] 

>> PoS Tags are: 
[('J.', 'PROPN'), ('Physiol', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('J.', 'compound'), ('Physiol', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[J., Physiol], [Physiol, .]]

>> Trigrams: 
[[J., Physiol, .]]

>> Noun Phrases are: 
[J. Physiol]

>> Named Entities are: 
[('J. Physiol', 'PERSON')]


============================ Sentence 584 =============================

160, 106–154 (1962). 


>> Tokens are: 
[160, ,, 106–154, (, 1962, ), .] 

>> PoS Tags are: 
[('160', 'NUM'), (',', 'PUNCT'), ('106–154', 'NUM'), ('(', 'PUNCT'), ('1962', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('160', 'ROOT'), (',', 'punct'), ('106–154', 'npadvmod'), ('(', 'punct'), ('1962', 'npadvmod'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[160, ,], [,, 106–154], [106–154, (], [(, 1962], [1962, )], [), .]]

>> Trigrams: 
[[160, ,, 106–154], [,, 106–154, (], [106–154, (, 1962], [(, 1962, )], [1962, ), .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('160', 'CARDINAL'), ('106–154', 'CARDINAL'), ('1962', 'DATE')]


============================ Sentence 585 =============================

  44. 


>> Tokens are: 
[  , 44, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('44', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('44', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 44], [44, .]]

>> Trigrams: 
[[  , 44, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('44', 'CARDINAL')]


============================ Sentence 586 =============================

Felleman, D. J. & Essen, D. C. V. Distributed hierarchical processing in the  primate cerebral cortex. 


>> Tokens are: 
[Felleman, ,, D., J., &, Essen, ,, D., C., V., Distributed, hierarchical, processing,  , primate, cerebral, cortex, .] 

>> PoS Tags are: 
[('Felleman', 'PROPN'), (',', 'PUNCT'), ('D.', 'PROPN'), ('J.', 'PROPN'), ('&', 'CCONJ'), ('Essen', 'PROPN'), (',', 'PUNCT'), ('D.', 'PROPN'), ('C.', 'PROPN'), ('V.', 'PROPN'), ('Distributed', 'VERB'), ('hierarchical', 'ADJ'), ('processing', 'NOUN'), (' ', 'SPACE'), ('primate', 'NOUN'), ('cerebral', 'ADJ'), ('cortex', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Felleman', 'nsubj'), (',', 'punct'), ('D.', 'compound'), ('J.', 'appos'), ('&', 'cc'), ('Essen', 'conj'), (',', 'punct'), ('D.', 'compound'), ('C.', 'compound'), ('V.', 'nsubj'), ('Distributed', 'ROOT'), ('hierarchical', 'amod'), ('processing', 'dobj'), (' ', 'nmod'), ('primate', 'nmod'), ('cerebral', 'amod'), ('cortex', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Felleman, ,], [,, D.], [D., J.], [J., &], [&, Essen], [Essen, ,], [,, D.], [D., C.], [C., V.], [V., Distributed], [Distributed, hierarchical], [hierarchical, processing], [processing,  ], [ , primate], [primate, cerebral], [cerebral, cortex], [cortex, .]]

>> Trigrams: 
[[Felleman, ,, D.], [,, D., J.], [D., J., &], [J., &, Essen], [&, Essen, ,], [Essen, ,, D.], [,, D., C.], [D., C., V.], [C., V., Distributed], [V., Distributed, hierarchical], [Distributed, hierarchical, processing], [hierarchical, processing,  ], [processing,  , primate], [ , primate, cerebral], [primate, cerebral, cortex], [cerebral, cortex, .]]

>> Noun Phrases are: 
[Felleman, D. J., Essen, D. C. V., hierarchical processing, the  primate cerebral cortex]

>> Named Entities are: 
[('D. J. & Essen', 'ORG'), ('C. V. Distributed', 'PERSON')]


============================ Sentence 587 =============================

Cereb. 


>> Tokens are: 
[Cereb, .] 

>> PoS Tags are: 
[('Cereb', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Cereb', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Cereb, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Cereb]

>> Named Entities are: 
[('Cereb', 'ORG')]


============================ Sentence 588 =============================

Cortex 1, 1–47 (1991). 


>> Tokens are: 
[Cortex, 1, ,, 1–47, (, 1991, ), .] 

>> PoS Tags are: 
[('Cortex', 'PROPN'), ('1', 'NUM'), (',', 'PUNCT'), ('1–47', 'PROPN'), ('(', 'PUNCT'), ('1991', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Cortex', 'ROOT'), ('1', 'nummod'), (',', 'punct'), ('1–47', 'appos'), ('(', 'punct'), ('1991', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Cortex, 1], [1, ,], [,, 1–47], [1–47, (], [(, 1991], [1991, )], [), .]]

>> Trigrams: 
[[Cortex, 1, ,], [1, ,, 1–47], [,, 1–47, (], [1–47, (, 1991], [(, 1991, )], [1991, ), .]]

>> Noun Phrases are: 
[Cortex, 1–47]

>> Named Entities are: 
[('1', 'CARDINAL'), ('1991', 'DATE')]


============================ Sentence 589 =============================

  45. 


>> Tokens are: 
[  , 45, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('45', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('45', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 45], [45, .]]

>> Trigrams: 
[[  , 45, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('45', 'CARDINAL')]


============================ Sentence 590 =============================

Cadieu, C. F. et al. 


>> Tokens are: 
[Cadieu, ,, C., F., et, al, .] 

>> PoS Tags are: 
[('Cadieu', 'PROPN'), (',', 'PUNCT'), ('C.', 'PROPN'), ('F.', 'PROPN'), ('et', 'PROPN'), ('al', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Cadieu', 'ROOT'), (',', 'punct'), ('C.', 'compound'), ('F.', 'compound'), ('et', 'compound'), ('al', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[Cadieu, ,], [,, C.], [C., F.], [F., et], [et, al], [al, .]]

>> Trigrams: 
[[Cadieu, ,, C.], [,, C., F.], [C., F., et], [F., et, al], [et, al, .]]

>> Noun Phrases are: 
[Cadieu, C. F. et al]

>> Named Entities are: 
[('C. F. et al', 'PERSON')]


============================ Sentence 591 =============================

Deep neural networks rival the representation of primate   


>> Tokens are: 
[Deep, neural, networks, rival, representation, primate,  ] 

>> PoS Tags are: 
[('Deep', 'ADJ'), ('neural', 'ADJ'), ('networks', 'NOUN'), ('rival', 'VERB'), ('representation', 'NOUN'), ('primate', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Deep', 'amod'), ('neural', 'amod'), ('networks', 'nsubj'), ('rival', 'ROOT'), ('representation', 'dobj'), ('primate', 'pobj'), (' ', 'punct')]

>> Bigrams: 
[[Deep, neural], [neural, networks], [networks, rival], [rival, representation], [representation, primate], [primate,  ]]

>> Trigrams: 
[[Deep, neural, networks], [neural, networks, rival], [networks, rival, representation], [rival, representation, primate], [representation, primate,  ]]

>> Noun Phrases are: 
[Deep neural networks, the representation, primate]

>> Named Entities are: 
[]


============================ Sentence 592 =============================

it cortex for core visual object recognition. 


>> Tokens are: 
[cortex, core, visual, object, recognition, .] 

>> PoS Tags are: 
[('cortex', 'VERB'), ('core', 'ADJ'), ('visual', 'ADJ'), ('object', 'NOUN'), ('recognition', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('cortex', 'ROOT'), ('core', 'amod'), ('visual', 'amod'), ('object', 'compound'), ('recognition', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[cortex, core], [core, visual], [visual, object], [object, recognition], [recognition, .]]

>> Trigrams: 
[[cortex, core, visual], [core, visual, object], [visual, object, recognition], [object, recognition, .]]

>> Noun Phrases are: 
[it, core visual object recognition]

>> Named Entities are: 
[]


============================ Sentence 593 =============================

PLoS Comp. 


>> Tokens are: 
[PLoS, Comp, .] 

>> PoS Tags are: 
[('PLoS', 'PROPN'), ('Comp', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('PLoS', 'compound'), ('Comp', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[PLoS, Comp], [Comp, .]]

>> Trigrams: 
[[PLoS, Comp, .]]

>> Noun Phrases are: 
[PLoS Comp]

>> Named Entities are: 
[]


============================ Sentence 594 =============================

Biol. 


>> Tokens are: 
[Biol, .] 

>> PoS Tags are: 
[('Biol', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Biol', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Biol, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Biol]

>> Named Entities are: 
[]


============================ Sentence 595 =============================

10, e1003963  (2014). 


>> Tokens are: 
[10, ,, e1003963,  , (, 2014, ), .] 

>> PoS Tags are: 
[('10', 'NUM'), (',', 'PUNCT'), ('e1003963', 'PROPN'), (' ', 'SPACE'), ('(', 'PUNCT'), ('2014', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('10', 'ROOT'), (',', 'punct'), ('e1003963', 'compound'), (' ', 'nsubj'), ('(', 'punct'), ('2014', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[10, ,], [,, e1003963], [e1003963,  ], [ , (], [(, 2014], [2014, )], [), .]]

>> Trigrams: 
[[10, ,, e1003963], [,, e1003963,  ], [e1003963,  , (], [ , (, 2014], [(, 2014, )], [2014, ), .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('10', 'CARDINAL'), ('2014', 'DATE')]


============================ Sentence 596 =============================

  46. 


>> Tokens are: 
[  , 46, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('46', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('46', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 46], [46, .]]

>> Trigrams: 
[[  , 46, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('46', 'DATE')]


============================ Sentence 597 =============================

Fukushima, K. & Miyake, S. Neocognitron: a new algorithm for pattern  recognition tolerant of deformations and shifts in position. 


>> Tokens are: 
[Fukushima, ,, K., &, Miyake, ,, S., Neocognitron, :, new, algorithm, pattern,  , recognition, tolerant, deformations, shifts, position, .] 

>> PoS Tags are: 
[('Fukushima', 'PROPN'), (',', 'PUNCT'), ('K.', 'PROPN'), ('&', 'CCONJ'), ('Miyake', 'PROPN'), (',', 'PUNCT'), ('S.', 'PROPN'), ('Neocognitron', 'PROPN'), (':', 'PUNCT'), ('new', 'ADJ'), ('algorithm', 'NOUN'), ('pattern', 'NOUN'), (' ', 'SPACE'), ('recognition', 'NOUN'), ('tolerant', 'NOUN'), ('deformations', 'NOUN'), ('shifts', 'NOUN'), ('position', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Fukushima', 'nmod'), (',', 'punct'), ('K.', 'conj'), ('&', 'cc'), ('Miyake', 'conj'), (',', 'punct'), ('S.', 'compound'), ('Neocognitron', 'ROOT'), (':', 'punct'), ('new', 'amod'), ('algorithm', 'appos'), ('pattern', 'pobj'), (' ', 'compound'), ('recognition', 'appos'), ('tolerant', 'appos'), ('deformations', 'pobj'), ('shifts', 'conj'), ('position', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Fukushima, ,], [,, K.], [K., &], [&, Miyake], [Miyake, ,], [,, S.], [S., Neocognitron], [Neocognitron, :], [:, new], [new, algorithm], [algorithm, pattern], [pattern,  ], [ , recognition], [recognition, tolerant], [tolerant, deformations], [deformations, shifts], [shifts, position], [position, .]]

>> Trigrams: 
[[Fukushima, ,, K.], [,, K., &], [K., &, Miyake], [&, Miyake, ,], [Miyake, ,, S.], [,, S., Neocognitron], [S., Neocognitron, :], [Neocognitron, :, new], [:, new, algorithm], [new, algorithm, pattern], [algorithm, pattern,  ], [pattern,  , recognition], [ , recognition, tolerant], [recognition, tolerant, deformations], [tolerant, deformations, shifts], [deformations, shifts, position], [shifts, position, .]]

>> Noun Phrases are: 
[Fukushima, K. & Miyake, S. Neocognitron, a new algorithm, pattern,  recognition, tolerant, deformations, shifts, position]

>> Named Entities are: 
[('Fukushima', 'PERSON'), ('K. & Miyake', 'ORG'), ('S. Neocognitron', 'PERSON')]


============================ Sentence 598 =============================

Pattern Recognition  15, 455–469 (1982). 


>> Tokens are: 
[Pattern, Recognition,  , 15, ,, 455–469, (, 1982, ), .] 

>> PoS Tags are: 
[('Pattern', 'PROPN'), ('Recognition', 'PROPN'), (' ', 'SPACE'), ('15', 'NUM'), (',', 'PUNCT'), ('455–469', 'NUM'), ('(', 'PUNCT'), ('1982', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Pattern', 'compound'), ('Recognition', 'ROOT'), (' ', 'appos'), ('15', 'nummod'), (',', 'punct'), ('455–469', 'npadvmod'), ('(', 'punct'), ('1982', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Pattern, Recognition], [Recognition,  ], [ , 15], [15, ,], [,, 455–469], [455–469, (], [(, 1982], [1982, )], [), .]]

>> Trigrams: 
[[Pattern, Recognition,  ], [Recognition,  , 15], [ , 15, ,], [15, ,, 455–469], [,, 455–469, (], [455–469, (, 1982], [(, 1982, )], [1982, ), .]]

>> Noun Phrases are: 
[Pattern Recognition]

>> Named Entities are: 
[('15', 'CARDINAL'), ('1982', 'DATE')]


============================ Sentence 599 =============================

  47. 


>> Tokens are: 
[  , 47, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('47', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('47', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 47], [47, .]]

>> Trigrams: 
[[  , 47, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('47', 'CARDINAL')]


============================ Sentence 600 =============================

Waibel, A., Hanazawa, T., Hinton, G. E., Shikano, K. & Lang, K. Phoneme  recognition using time-delay neural networks. 


>> Tokens are: 
[Waibel, ,, A., ,, Hanazawa, ,, T., ,, Hinton, ,, G., E., ,, Shikano, ,, K., &, Lang, ,, K., Phoneme,  , recognition, time, -, delay, neural, networks, .] 

>> PoS Tags are: 
[('Waibel', 'PROPN'), (',', 'PUNCT'), ('A.', 'PROPN'), (',', 'PUNCT'), ('Hanazawa', 'PROPN'), (',', 'PUNCT'), ('T.', 'PROPN'), (',', 'PUNCT'), ('Hinton', 'PROPN'), (',', 'PUNCT'), ('G.', 'PROPN'), ('E.', 'PROPN'), (',', 'PUNCT'), ('Shikano', 'PROPN'), (',', 'PUNCT'), ('K.', 'PROPN'), ('&', 'CCONJ'), ('Lang', 'PROPN'), (',', 'PUNCT'), ('K.', 'PROPN'), ('Phoneme', 'PROPN'), (' ', 'SPACE'), ('recognition', 'NOUN'), ('time', 'NOUN'), ('-', 'PUNCT'), ('delay', 'NOUN'), ('neural', 'ADJ'), ('networks', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Waibel', 'nmod'), (',', 'punct'), ('A.', 'conj'), (',', 'punct'), ('Hanazawa', 'conj'), (',', 'punct'), ('T.', 'conj'), (',', 'punct'), ('Hinton', 'conj'), (',', 'punct'), ('G.', 'compound'), ('E.', 'conj'), (',', 'punct'), ('Shikano', 'conj'), (',', 'punct'), ('K.', 'conj'), ('&', 'cc'), ('Lang', 'conj'), (',', 'punct'), ('K.', 'compound'), ('Phoneme', 'appos'), (' ', 'punct'), ('recognition', 'ROOT'), ('time', 'npadvmod'), ('-', 'punct'), ('delay', 'nmod'), ('neural', 'amod'), ('networks', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Waibel, ,], [,, A.], [A., ,], [,, Hanazawa], [Hanazawa, ,], [,, T.], [T., ,], [,, Hinton], [Hinton, ,], [,, G.], [G., E.], [E., ,], [,, Shikano], [Shikano, ,], [,, K.], [K., &], [&, Lang], [Lang, ,], [,, K.], [K., Phoneme], [Phoneme,  ], [ , recognition], [recognition, time], [time, -], [-, delay], [delay, neural], [neural, networks], [networks, .]]

>> Trigrams: 
[[Waibel, ,, A.], [,, A., ,], [A., ,, Hanazawa], [,, Hanazawa, ,], [Hanazawa, ,, T.], [,, T., ,], [T., ,, Hinton], [,, Hinton, ,], [Hinton, ,, G.], [,, G., E.], [G., E., ,], [E., ,, Shikano], [,, Shikano, ,], [Shikano, ,, K.], [,, K., &], [K., &, Lang], [&, Lang, ,], [Lang, ,, K.], [,, K., Phoneme], [K., Phoneme,  ], [Phoneme,  , recognition], [ , recognition, time], [recognition, time, -], [time, -, delay], [-, delay, neural], [delay, neural, networks], [neural, networks, .]]

>> Noun Phrases are: 
[K. Phoneme, time-delay neural networks]

>> Named Entities are: 
[('A.', 'PERSON'), ('Hanazawa', 'GPE'), ('T.', 'GPE'), ('Hinton', 'GPE'), ('G. E.', 'PERSON'), ('Shikano', 'ORG'), ('K. & Lang', 'ORG'), ('K. Phoneme', 'PERSON')]


============================ Sentence 601 =============================

IEEE Trans. 


>> Tokens are: 
[IEEE, Trans, .] 

>> PoS Tags are: 
[('IEEE', 'PROPN'), ('Trans', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('IEEE', 'compound'), ('Trans', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[IEEE, Trans], [Trans, .]]

>> Trigrams: 
[[IEEE, Trans, .]]

>> Noun Phrases are: 
[IEEE Trans]

>> Named Entities are: 
[('IEEE Trans', 'ORG')]


============================ Sentence 602 =============================

Acoustics Speech  Signal Process. 


>> Tokens are: 
[Acoustics, Speech,  , Signal, Process, .] 

>> PoS Tags are: 
[('Acoustics', 'PROPN'), ('Speech', 'PROPN'), (' ', 'SPACE'), ('Signal', 'PROPN'), ('Process', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Acoustics', 'nmod'), ('Speech', 'nmod'), (' ', 'appos'), ('Signal', 'compound'), ('Process', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Acoustics, Speech], [Speech,  ], [ , Signal], [Signal, Process], [Process, .]]

>> Trigrams: 
[[Acoustics, Speech,  ], [Speech,  , Signal], [ , Signal, Process], [Signal, Process, .]]

>> Noun Phrases are: 
[Acoustics Speech  Signal Process]

>> Named Entities are: 
[('Acoustics Speech  Signal Process', 'ORG')]


============================ Sentence 603 =============================

37, 328–339 (1989). 


>> Tokens are: 
[37, ,, 328–339, (, 1989, ), .] 

>> PoS Tags are: 
[('37', 'NUM'), (',', 'PUNCT'), ('328–339', 'NUM'), ('(', 'PUNCT'), ('1989', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('37', 'ROOT'), (',', 'punct'), ('328–339', 'npadvmod'), ('(', 'punct'), ('1989', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[37, ,], [,, 328–339], [328–339, (], [(, 1989], [1989, )], [), .]]

>> Trigrams: 
[[37, ,, 328–339], [,, 328–339, (], [328–339, (, 1989], [(, 1989, )], [1989, ), .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('37', 'CARDINAL'), ('1989', 'DATE')]


============================ Sentence 604 =============================

  48. 


>> Tokens are: 
[  , 48, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('48', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('48', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 48], [48, .]]

>> Trigrams: 
[[  , 48, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('48', 'CARDINAL')]


============================ Sentence 605 =============================

Bottou, L., Fogelman-Soulié, F., Blanchet, P. & Lienard, J. Experiments with time  delay networks and dynamic time warping for speaker independent isolated  digit recognition. 


>> Tokens are: 
[Bottou, ,, L., ,, Fogelman, -, Soulié, ,, F., ,, Blanchet, ,, P., &, Lienard, ,, J., Experiments, time,  , delay, networks, dynamic, time, warping, speaker, independent, isolated,  , digit, recognition, .] 

>> PoS Tags are: 
[('Bottou', 'PROPN'), (',', 'PUNCT'), ('L.', 'PROPN'), (',', 'PUNCT'), ('Fogelman', 'PROPN'), ('-', 'PUNCT'), ('Soulié', 'PROPN'), (',', 'PUNCT'), ('F.', 'PROPN'), (',', 'PUNCT'), ('Blanchet', 'PROPN'), (',', 'PUNCT'), ('P.', 'PROPN'), ('&', 'CCONJ'), ('Lienard', 'PROPN'), (',', 'PUNCT'), ('J.', 'PROPN'), ('Experiments', 'PROPN'), ('time', 'NOUN'), (' ', 'SPACE'), ('delay', 'NOUN'), ('networks', 'NOUN'), ('dynamic', 'ADJ'), ('time', 'NOUN'), ('warping', 'VERB'), ('speaker', 'NOUN'), ('independent', 'ADJ'), ('isolated', 'ADJ'), (' ', 'SPACE'), ('digit', 'NOUN'), ('recognition', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Bottou', 'ROOT'), (',', 'punct'), ('L.', 'conj'), (',', 'punct'), ('Fogelman', 'compound'), ('-', 'punct'), ('Soulié', 'conj'), (',', 'punct'), ('F.', 'conj'), (',', 'punct'), ('Blanchet', 'conj'), (',', 'punct'), ('P.', 'conj'), ('&', 'cc'), ('Lienard', 'conj'), (',', 'punct'), ('J.', 'compound'), ('Experiments', 'appos'), ('time', 'pobj'), (' ', 'nsubj'), ('delay', 'compound'), ('networks', 'appos'), ('dynamic', 'amod'), ('time', 'conj'), ('warping', 'acl'), ('speaker', 'nmod'), ('independent', 'amod'), ('isolated', 'amod'), (' ', 'compound'), ('digit', 'compound'), ('recognition', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Bottou, ,], [,, L.], [L., ,], [,, Fogelman], [Fogelman, -], [-, Soulié], [Soulié, ,], [,, F.], [F., ,], [,, Blanchet], [Blanchet, ,], [,, P.], [P., &], [&, Lienard], [Lienard, ,], [,, J.], [J., Experiments], [Experiments, time], [time,  ], [ , delay], [delay, networks], [networks, dynamic], [dynamic, time], [time, warping], [warping, speaker], [speaker, independent], [independent, isolated], [isolated,  ], [ , digit], [digit, recognition], [recognition, .]]

>> Trigrams: 
[[Bottou, ,, L.], [,, L., ,], [L., ,, Fogelman], [,, Fogelman, -], [Fogelman, -, Soulié], [-, Soulié, ,], [Soulié, ,, F.], [,, F., ,], [F., ,, Blanchet], [,, Blanchet, ,], [Blanchet, ,, P.], [,, P., &], [P., &, Lienard], [&, Lienard, ,], [Lienard, ,, J.], [,, J., Experiments], [J., Experiments, time], [Experiments, time,  ], [time,  , delay], [ , delay, networks], [delay, networks, dynamic], [networks, dynamic, time], [dynamic, time, warping], [time, warping, speaker], [warping, speaker, independent], [speaker, independent, isolated], [independent, isolated,  ], [isolated,  , digit], [ , digit, recognition], [digit, recognition, .]]

>> Noun Phrases are: 
[Bottou, L., Fogelman-Soulié, F., Blanchet, P., Lienard, J. Experiments, time,  delay networks, dynamic time, speaker independent isolated  digit recognition]

>> Named Entities are: 
[('Bottou', 'GPE'), ('L.', 'GPE'), ('Fogelman-Soulié', 'ORG'), ('P. & Lienard', 'ORG'), ('J. Experiments', 'ORG')]


============================ Sentence 606 =============================

In Proc. 


>> Tokens are: 
[Proc, .] 

>> PoS Tags are: 
[('Proc', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Proc', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Proc, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Proc]

>> Named Entities are: 
[]


============================ Sentence 607 =============================

EuroSpeech 89 537–540 (1989). 


>> Tokens are: 
[EuroSpeech, 89, 537–540, (, 1989, ), .] 

>> PoS Tags are: 
[('EuroSpeech', 'PROPN'), ('89', 'NUM'), ('537–540', 'NUM'), ('(', 'PUNCT'), ('1989', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('EuroSpeech', 'ROOT'), ('89', 'nummod'), ('537–540', 'appos'), ('(', 'punct'), ('1989', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[EuroSpeech, 89], [89, 537–540], [537–540, (], [(, 1989], [1989, )], [), .]]

>> Trigrams: 
[[EuroSpeech, 89, 537–540], [89, 537–540, (], [537–540, (, 1989], [(, 1989, )], [1989, ), .]]

>> Noun Phrases are: 
[EuroSpeech]

>> Named Entities are: 
[('EuroSpeech 89', 'PRODUCT'), ('1989', 'DATE')]


============================ Sentence 608 =============================

  49. 


>> Tokens are: 
[  , 49, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('49', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('49', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 49], [49, .]]

>> Trigrams: 
[[  , 49, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('49', 'DATE')]


============================ Sentence 609 =============================

Simard, D., Steinkraus, P. Y. & Platt, J. C. Best practices for convolutional neural  networks. 


>> Tokens are: 
[Simard, ,, D., ,, Steinkraus, ,, P., Y., &, Platt, ,, J., C., Best, practices, convolutional, neural,  , networks, .] 

>> PoS Tags are: 
[('Simard', 'PROPN'), (',', 'PUNCT'), ('D.', 'PROPN'), (',', 'PUNCT'), ('Steinkraus', 'PROPN'), (',', 'PUNCT'), ('P.', 'PROPN'), ('Y.', 'PROPN'), ('&', 'CCONJ'), ('Platt', 'PROPN'), (',', 'PUNCT'), ('J.', 'PROPN'), ('C.', 'PROPN'), ('Best', 'PROPN'), ('practices', 'NOUN'), ('convolutional', 'ADJ'), ('neural', 'ADJ'), (' ', 'SPACE'), ('networks', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Simard', 'nmod'), (',', 'punct'), ('D.', 'appos'), (',', 'punct'), ('Steinkraus', 'conj'), (',', 'punct'), ('P.', 'compound'), ('Y.', 'conj'), ('&', 'cc'), ('Platt', 'conj'), (',', 'punct'), ('J.', 'compound'), ('C.', 'compound'), ('Best', 'compound'), ('practices', 'ROOT'), ('convolutional', 'amod'), ('neural', 'amod'), (' ', 'compound'), ('networks', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Simard, ,], [,, D.], [D., ,], [,, Steinkraus], [Steinkraus, ,], [,, P.], [P., Y.], [Y., &], [&, Platt], [Platt, ,], [,, J.], [J., C.], [C., Best], [Best, practices], [practices, convolutional], [convolutional, neural], [neural,  ], [ , networks], [networks, .]]

>> Trigrams: 
[[Simard, ,, D.], [,, D., ,], [D., ,, Steinkraus], [,, Steinkraus, ,], [Steinkraus, ,, P.], [,, P., Y.], [P., Y., &], [Y., &, Platt], [&, Platt, ,], [Platt, ,, J.], [,, J., C.], [J., C., Best], [C., Best, practices], [Best, practices, convolutional], [practices, convolutional, neural], [convolutional, neural,  ], [neural,  , networks], [ , networks, .]]

>> Noun Phrases are: 
[D., Steinkraus, P. Y., Platt, convolutional neural  networks]

>> Named Entities are: 
[('D.', 'NORP'), ('P. Y. & Platt', 'ORG'), ('J. C. Best', 'PERSON')]


============================ Sentence 610 =============================

In Proc. 


>> Tokens are: 
[Proc, .] 

>> PoS Tags are: 
[('Proc', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Proc', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Proc, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Proc]

>> Named Entities are: 
[]


============================ Sentence 611 =============================

Document Analysis and Recognition 958–963 (2003). 


>> Tokens are: 
[Document, Analysis, Recognition, 958–963, (, 2003, ), .] 

>> PoS Tags are: 
[('Document', 'NOUN'), ('Analysis', 'PROPN'), ('Recognition', 'PROPN'), ('958–963', 'NUM'), ('(', 'PUNCT'), ('2003', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Document', 'compound'), ('Analysis', 'ROOT'), ('Recognition', 'compound'), ('958–963', 'conj'), ('(', 'punct'), ('2003', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Document, Analysis], [Analysis, Recognition], [Recognition, 958–963], [958–963, (], [(, 2003], [2003, )], [), .]]

>> Trigrams: 
[[Document, Analysis, Recognition], [Analysis, Recognition, 958–963], [Recognition, 958–963, (], [958–963, (, 2003], [(, 2003, )], [2003, ), .]]

>> Noun Phrases are: 
[Document Analysis]

>> Named Entities are: 
[('Recognition', 'ORG'), ('2003', 'DATE')]


============================ Sentence 612 =============================

  50. 


>> Tokens are: 
[  , 50, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('50', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('50', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 50], [50, .]]

>> Trigrams: 
[[  , 50, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('50', 'CARDINAL')]


============================ Sentence 613 =============================

Vaillant, R., Monrocq, C. & LeCun, Y. Original approach for the localisation of  objects in images. 


>> Tokens are: 
[Vaillant, ,, R., ,, Monrocq, ,, C., &, LeCun, ,, Y., Original, approach, localisation,  , objects, images, .] 

>> PoS Tags are: 
[('Vaillant', 'PROPN'), (',', 'PUNCT'), ('R.', 'PROPN'), (',', 'PUNCT'), ('Monrocq', 'PROPN'), (',', 'PUNCT'), ('C.', 'PROPN'), ('&', 'CCONJ'), ('LeCun', 'PROPN'), (',', 'PUNCT'), ('Y.', 'PROPN'), ('Original', 'PROPN'), ('approach', 'NOUN'), ('localisation', 'NOUN'), (' ', 'SPACE'), ('objects', 'NOUN'), ('images', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Vaillant', 'nmod'), (',', 'punct'), ('R.', 'appos'), (',', 'punct'), ('Monrocq', 'conj'), (',', 'punct'), ('C.', 'conj'), ('&', 'cc'), ('LeCun', 'conj'), (',', 'punct'), ('Y.', 'compound'), ('Original', 'conj'), ('approach', 'nsubj'), ('localisation', 'pobj'), (' ', 'pobj'), ('objects', 'ROOT'), ('images', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Vaillant, ,], [,, R.], [R., ,], [,, Monrocq], [Monrocq, ,], [,, C.], [C., &], [&, LeCun], [LeCun, ,], [,, Y.], [Y., Original], [Original, approach], [approach, localisation], [localisation,  ], [ , objects], [objects, images], [images, .]]

>> Trigrams: 
[[Vaillant, ,, R.], [,, R., ,], [R., ,, Monrocq], [,, Monrocq, ,], [Monrocq, ,, C.], [,, C., &], [C., &, LeCun], [&, LeCun, ,], [LeCun, ,, Y.], [,, Y., Original], [Y., Original, approach], [Original, approach, localisation], [approach, localisation,  ], [localisation,  , objects], [ , objects, images], [objects, images, .]]

>> Noun Phrases are: 
[R., Monrocq, C., LeCun, the localisation, images]

>> Named Entities are: 
[('R.', 'NORP'), ('Monrocq', 'GPE'), ('Y. Original', 'PERSON')]


============================ Sentence 614 =============================

In Proc. 


>> Tokens are: 
[Proc, .] 

>> PoS Tags are: 
[('Proc', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Proc', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Proc, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Proc]

>> Named Entities are: 
[]


============================ Sentence 615 =============================

Vision, Image, and Signal Processing 141, 245–250  (1994). 


>> Tokens are: 
[Vision, ,, Image, ,, Signal, Processing, 141, ,, 245–250,  , (, 1994, ), .] 

>> PoS Tags are: 
[('Vision', 'PROPN'), (',', 'PUNCT'), ('Image', 'PROPN'), (',', 'PUNCT'), ('Signal', 'PROPN'), ('Processing', 'PROPN'), ('141', 'NUM'), (',', 'PUNCT'), ('245–250', 'NUM'), (' ', 'SPACE'), ('(', 'PUNCT'), ('1994', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Vision', 'ROOT'), (',', 'punct'), ('Image', 'conj'), (',', 'punct'), ('Signal', 'compound'), ('Processing', 'conj'), ('141', 'nummod'), (',', 'punct'), ('245–250', 'nummod'), (' ', 'appos'), ('(', 'punct'), ('1994', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Vision, ,], [,, Image], [Image, ,], [,, Signal], [Signal, Processing], [Processing, 141], [141, ,], [,, 245–250], [245–250,  ], [ , (], [(, 1994], [1994, )], [), .]]

>> Trigrams: 
[[Vision, ,, Image], [,, Image, ,], [Image, ,, Signal], [,, Signal, Processing], [Signal, Processing, 141], [Processing, 141, ,], [141, ,, 245–250], [,, 245–250,  ], [245–250,  , (], [ , (, 1994], [(, 1994, )], [1994, ), .]]

>> Noun Phrases are: 
[Vision, Image, Signal Processing]

>> Named Entities are: 
[('141', 'CARDINAL'), ('245–250', 'CARDINAL'), ('1994', 'DATE')]


============================ Sentence 616 =============================

  51. 


>> Tokens are: 
[  , 51, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('51', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('51', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 51], [51, .]]

>> Trigrams: 
[[  , 51, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('51', 'CARDINAL')]


============================ Sentence 617 =============================

Nowlan, S. & Platt, J. in Neural Information Processing Systems 901–908 (1995). 


>> Tokens are: 
[Nowlan, ,, S., &, Platt, ,, J., Neural, Information, Processing, Systems, 901–908, (, 1995, ), .] 

>> PoS Tags are: 
[('Nowlan', 'PROPN'), (',', 'PUNCT'), ('S.', 'PROPN'), ('&', 'CCONJ'), ('Platt', 'PROPN'), (',', 'PUNCT'), ('J.', 'PROPN'), ('Neural', 'PROPN'), ('Information', 'PROPN'), ('Processing', 'PROPN'), ('Systems', 'PROPN'), ('901–908', 'NUM'), ('(', 'PUNCT'), ('1995', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Nowlan', 'ROOT'), (',', 'punct'), ('S.', 'conj'), ('&', 'cc'), ('Platt', 'conj'), (',', 'punct'), ('J.', 'appos'), ('Neural', 'compound'), ('Information', 'compound'), ('Processing', 'compound'), ('Systems', 'pobj'), ('901–908', 'appos'), ('(', 'punct'), ('1995', 'npadvmod'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Nowlan, ,], [,, S.], [S., &], [&, Platt], [Platt, ,], [,, J.], [J., Neural], [Neural, Information], [Information, Processing], [Processing, Systems], [Systems, 901–908], [901–908, (], [(, 1995], [1995, )], [), .]]

>> Trigrams: 
[[Nowlan, ,, S.], [,, S., &], [S., &, Platt], [&, Platt, ,], [Platt, ,, J.], [,, J., Neural], [J., Neural, Information], [Neural, Information, Processing], [Information, Processing, Systems], [Processing, Systems, 901–908], [Systems, 901–908, (], [901–908, (, 1995], [(, 1995, )], [1995, ), .]]

>> Noun Phrases are: 
[Nowlan, S., Platt, J., Neural Information Processing Systems]

>> Named Entities are: 
[('S. & Platt, J. in Neural Information Processing Systems', 'ORG'), ('901–908', 'CARDINAL')]


============================ Sentence 618 =============================

 52. 


>> Tokens are: 
[ , 52, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('52', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'ROOT'), ('52', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[ , 52], [52, .]]

>> Trigrams: 
[[ , 52, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('52', 'CARDINAL')]


============================ Sentence 619 =============================

Lawrence, S., Giles, C. L., Tsoi, A. C. & Back, A. D. Face recognition: a   convolutional neural-network approach. 


>> Tokens are: 
[Lawrence, ,, S., ,, Giles, ,, C., L., ,, Tsoi, ,, A., C., &, ,, A., D., Face, recognition, :,   , convolutional, neural, -, network, approach, .] 

>> PoS Tags are: 
[('Lawrence', 'PROPN'), (',', 'PUNCT'), ('S.', 'PROPN'), (',', 'PUNCT'), ('Giles', 'PROPN'), (',', 'PUNCT'), ('C.', 'PROPN'), ('L.', 'PROPN'), (',', 'PUNCT'), ('Tsoi', 'PROPN'), (',', 'PUNCT'), ('A.', 'PROPN'), ('C.', 'PROPN'), ('&', 'CCONJ'), (',', 'PUNCT'), ('A.', 'PROPN'), ('D.', 'PROPN'), ('Face', 'PROPN'), ('recognition', 'NOUN'), (':', 'PUNCT'), ('  ', 'SPACE'), ('convolutional', 'ADJ'), ('neural', 'ADJ'), ('-', 'PUNCT'), ('network', 'NOUN'), ('approach', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Lawrence', 'dep'), (',', 'punct'), ('S.', 'appos'), (',', 'punct'), ('Giles', 'conj'), (',', 'punct'), ('C.', 'compound'), ('L.', 'conj'), (',', 'punct'), ('Tsoi', 'conj'), (',', 'punct'), ('A.', 'compound'), ('C.', 'conj'), ('&', 'cc'), (',', 'punct'), ('A.', 'compound'), ('D.', 'compound'), ('Face', 'compound'), ('recognition', 'ROOT'), (':', 'punct'), ('  ', 'nmod'), ('convolutional', 'amod'), ('neural', 'amod'), ('-', 'punct'), ('network', 'compound'), ('approach', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[Lawrence, ,], [,, S.], [S., ,], [,, Giles], [Giles, ,], [,, C.], [C., L.], [L., ,], [,, Tsoi], [Tsoi, ,], [,, A.], [A., C.], [C., &], [&, ,], [,, A.], [A., D.], [D., Face], [Face, recognition], [recognition, :], [:,   ], [  , convolutional], [convolutional, neural], [neural, -], [-, network], [network, approach], [approach, .]]

>> Trigrams: 
[[Lawrence, ,, S.], [,, S., ,], [S., ,, Giles], [,, Giles, ,], [Giles, ,, C.], [,, C., L.], [C., L., ,], [L., ,, Tsoi], [,, Tsoi, ,], [Tsoi, ,, A.], [,, A., C.], [A., C., &], [C., &, ,], [&, ,, A.], [,, A., D.], [A., D., Face], [D., Face, recognition], [Face, recognition, :], [recognition, :,   ], [:,   , convolutional], [  , convolutional, neural], [convolutional, neural, -], [neural, -, network], [-, network, approach], [network, approach, .]]

>> Noun Phrases are: 
[S., Giles, C. L., Tsoi, A. C., Back, a   convolutional neural-network approach]

>> Named Entities are: 
[('Lawrence', 'PERSON'), ('C. L.', 'PERSON'), ('A. D.', 'NORP')]


============================ Sentence 620 =============================

IEEE Trans. 


>> Tokens are: 
[IEEE, Trans, .] 

>> PoS Tags are: 
[('IEEE', 'PROPN'), ('Trans', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('IEEE', 'compound'), ('Trans', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[IEEE, Trans], [Trans, .]]

>> Trigrams: 
[[IEEE, Trans, .]]

>> Noun Phrases are: 
[IEEE Trans]

>> Named Entities are: 
[('IEEE Trans', 'PERSON')]


============================ Sentence 621 =============================

Neural Networks 8, 98–113  (1997). 


>> Tokens are: 
[Neural, Networks, 8, ,, 98–113,  , (, 1997, ), .] 

>> PoS Tags are: 
[('Neural', 'PROPN'), ('Networks', 'PROPN'), ('8', 'NUM'), (',', 'PUNCT'), ('98–113', 'NUM'), (' ', 'SPACE'), ('(', 'PUNCT'), ('1997', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Neural', 'compound'), ('Networks', 'ROOT'), ('8', 'nummod'), (',', 'punct'), ('98–113', 'compound'), (' ', 'appos'), ('(', 'punct'), ('1997', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Neural, Networks], [Networks, 8], [8, ,], [,, 98–113], [98–113,  ], [ , (], [(, 1997], [1997, )], [), .]]

>> Trigrams: 
[[Neural, Networks, 8], [Networks, 8, ,], [8, ,, 98–113], [,, 98–113,  ], [98–113,  , (], [ , (, 1997], [(, 1997, )], [1997, ), .]]

>> Noun Phrases are: 
[Neural Networks]

>> Named Entities are: 
[('8', 'CARDINAL'), ('98–113', 'CARDINAL'), ('1997', 'DATE')]


============================ Sentence 622 =============================

  53. 


>> Tokens are: 
[  , 53, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('53', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('53', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 53], [53, .]]

>> Trigrams: 
[[  , 53, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('53', 'CARDINAL')]


============================ Sentence 623 =============================

Ciresan, D., Meier, U. Masci, J. & Schmidhuber, J. Multi-column deep neural  network for traffic sign classification. 


>> Tokens are: 
[Ciresan, ,, D., ,, Meier, ,, U., Masci, ,, J., &, Schmidhuber, ,, J., Multi, -, column, deep, neural,  , network, traffic, sign, classification, .] 

>> PoS Tags are: 
[('Ciresan', 'PROPN'), (',', 'PUNCT'), ('D.', 'PROPN'), (',', 'PUNCT'), ('Meier', 'PROPN'), (',', 'PUNCT'), ('U.', 'PROPN'), ('Masci', 'PROPN'), (',', 'PUNCT'), ('J.', 'PROPN'), ('&', 'CCONJ'), ('Schmidhuber', 'PROPN'), (',', 'PUNCT'), ('J.', 'PROPN'), ('Multi', 'PROPN'), ('-', 'PUNCT'), ('column', 'NOUN'), ('deep', 'ADJ'), ('neural', 'ADJ'), (' ', 'SPACE'), ('network', 'NOUN'), ('traffic', 'NOUN'), ('sign', 'NOUN'), ('classification', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Ciresan', 'ROOT'), (',', 'punct'), ('D.', 'appos'), (',', 'punct'), ('Meier', 'conj'), (',', 'punct'), ('U.', 'compound'), ('Masci', 'conj'), (',', 'punct'), ('J.', 'conj'), ('&', 'cc'), ('Schmidhuber', 'conj'), (',', 'punct'), ('J.', 'compound'), ('Multi', 'compound'), ('-', 'punct'), ('column', 'nmod'), ('deep', 'amod'), ('neural', 'amod'), (' ', 'compound'), ('network', 'appos'), ('traffic', 'compound'), ('sign', 'compound'), ('classification', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Ciresan, ,], [,, D.], [D., ,], [,, Meier], [Meier, ,], [,, U.], [U., Masci], [Masci, ,], [,, J.], [J., &], [&, Schmidhuber], [Schmidhuber, ,], [,, J.], [J., Multi], [Multi, -], [-, column], [column, deep], [deep, neural], [neural,  ], [ , network], [network, traffic], [traffic, sign], [sign, classification], [classification, .]]

>> Trigrams: 
[[Ciresan, ,, D.], [,, D., ,], [D., ,, Meier], [,, Meier, ,], [Meier, ,, U.], [,, U., Masci], [U., Masci, ,], [Masci, ,, J.], [,, J., &], [J., &, Schmidhuber], [&, Schmidhuber, ,], [Schmidhuber, ,, J.], [,, J., Multi], [J., Multi, -], [Multi, -, column], [-, column, deep], [column, deep, neural], [deep, neural,  ], [neural,  , network], [ , network, traffic], [network, traffic, sign], [traffic, sign, classification], [sign, classification, .]]

>> Noun Phrases are: 
[Ciresan, D., Meier, U. Masci, J., Schmidhuber, J. Multi-column deep neural  network, traffic sign classification]

>> Named Entities are: 
[('Ciresan', 'PERSON'), ('D.', 'NORP'), ('J. & Schmidhuber', 'ORG'), ('J. Multi', 'ORG')]


============================ Sentence 624 =============================

Neural Networks 32, 333–338 (2012). 


>> Tokens are: 
[Neural, Networks, 32, ,, 333–338, (, 2012, ), .] 

>> PoS Tags are: 
[('Neural', 'PROPN'), ('Networks', 'PROPN'), ('32', 'NUM'), (',', 'PUNCT'), ('333–338', 'NUM'), ('(', 'PUNCT'), ('2012', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Neural', 'compound'), ('Networks', 'ROOT'), ('32', 'nummod'), (',', 'punct'), ('333–338', 'appos'), ('(', 'punct'), ('2012', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Neural, Networks], [Networks, 32], [32, ,], [,, 333–338], [333–338, (], [(, 2012], [2012, )], [), .]]

>> Trigrams: 
[[Neural, Networks, 32], [Networks, 32, ,], [32, ,, 333–338], [,, 333–338, (], [333–338, (, 2012], [(, 2012, )], [2012, ), .]]

>> Noun Phrases are: 
[Neural Networks]

>> Named Entities are: 
[('Neural Networks', 'ORG'), ('32', 'CARDINAL'), ('333–338', 'CARDINAL'), ('2012', 'DATE')]


============================ Sentence 625 =============================

  54. 


>> Tokens are: 
[  , 54, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('54', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('54', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 54], [54, .]]

>> Trigrams: 
[[  , 54, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('54', 'DATE')]


============================ Sentence 626 =============================

Ning, F. et al. 


>> Tokens are: 
[Ning, ,, F., et, al, .] 

>> PoS Tags are: 
[('Ning', 'PROPN'), (',', 'PUNCT'), ('F.', 'PROPN'), ('et', 'PROPN'), ('al', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Ning', 'ROOT'), (',', 'punct'), ('F.', 'compound'), ('et', 'compound'), ('al', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[Ning, ,], [,, F.], [F., et], [et, al], [al, .]]

>> Trigrams: 
[[Ning, ,, F.], [,, F., et], [F., et, al], [et, al, .]]

>> Noun Phrases are: 
[Ning, F. et al]

>> Named Entities are: 
[]


============================ Sentence 627 =============================

Toward automatic phenotyping of developing embryos from  videos. 


>> Tokens are: 
[automatic, phenotyping, developing, embryos,  , videos, .] 

>> PoS Tags are: 
[('automatic', 'ADJ'), ('phenotyping', 'NOUN'), ('developing', 'VERB'), ('embryos', 'NOUN'), (' ', 'SPACE'), ('videos', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('automatic', 'amod'), ('phenotyping', 'pobj'), ('developing', 'pcomp'), ('embryos', 'dobj'), (' ', 'compound'), ('videos', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[automatic, phenotyping], [phenotyping, developing], [developing, embryos], [embryos,  ], [ , videos], [videos, .]]

>> Trigrams: 
[[automatic, phenotyping, developing], [phenotyping, developing, embryos], [developing, embryos,  ], [embryos,  , videos], [ , videos, .]]

>> Noun Phrases are: 
[automatic phenotyping, embryos,  videos]

>> Named Entities are: 
[]


============================ Sentence 628 =============================

IEEE Trans. 


>> Tokens are: 
[IEEE, Trans, .] 

>> PoS Tags are: 
[('IEEE', 'PROPN'), ('Trans', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('IEEE', 'compound'), ('Trans', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[IEEE, Trans], [Trans, .]]

>> Trigrams: 
[[IEEE, Trans, .]]

>> Noun Phrases are: 
[IEEE Trans]

>> Named Entities are: 
[('IEEE Trans', 'PERSON')]


============================ Sentence 629 =============================

Image Process. 


>> Tokens are: 
[Image, Process, .] 

>> PoS Tags are: 
[('Image', 'PROPN'), ('Process', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Image', 'compound'), ('Process', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Image, Process], [Process, .]]

>> Trigrams: 
[[Image, Process, .]]

>> Noun Phrases are: 
[Image Process]

>> Named Entities are: 
[]


============================ Sentence 630 =============================

14, 1360–1371 (2005). 


>> Tokens are: 
[14, ,, 1360–1371, (, 2005, ), .] 

>> PoS Tags are: 
[('14', 'NUM'), (',', 'PUNCT'), ('1360–1371', 'NUM'), ('(', 'PUNCT'), ('2005', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('14', 'nummod'), (',', 'punct'), ('1360–1371', 'ROOT'), ('(', 'punct'), ('2005', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[14, ,], [,, 1360–1371], [1360–1371, (], [(, 2005], [2005, )], [), .]]

>> Trigrams: 
[[14, ,, 1360–1371], [,, 1360–1371, (], [1360–1371, (, 2005], [(, 2005, )], [2005, ), .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('14', 'CARDINAL')]


============================ Sentence 631 =============================

  55. 


>> Tokens are: 
[  , 55, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('55', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('55', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 55], [55, .]]

>> Trigrams: 
[[  , 55, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('55', 'CARDINAL')]


============================ Sentence 632 =============================

Turaga, S. C. et al. 


>> Tokens are: 
[Turaga, ,, S., C., et, al, .] 

>> PoS Tags are: 
[('Turaga', 'PROPN'), (',', 'PUNCT'), ('S.', 'PROPN'), ('C.', 'PROPN'), ('et', 'PROPN'), ('al', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Turaga', 'ROOT'), (',', 'punct'), ('S.', 'compound'), ('C.', 'compound'), ('et', 'compound'), ('al', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[Turaga, ,], [,, S.], [S., C.], [C., et], [et, al], [al, .]]

>> Trigrams: 
[[Turaga, ,, S.], [,, S., C.], [S., C., et], [C., et, al], [et, al, .]]

>> Noun Phrases are: 
[Turaga, S. C. et al]

>> Named Entities are: 
[('Turaga', 'PERSON'), ('S. C. et al', 'PERSON')]


============================ Sentence 633 =============================

Convolutional networks can learn to generate affinity graphs  for image segmentation. 


>> Tokens are: 
[Convolutional, networks, learn, generate, affinity, graphs,  , image, segmentation, .] 

>> PoS Tags are: 
[('Convolutional', 'ADJ'), ('networks', 'NOUN'), ('learn', 'VERB'), ('generate', 'VERB'), ('affinity', 'NOUN'), ('graphs', 'NOUN'), (' ', 'SPACE'), ('image', 'NOUN'), ('segmentation', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Convolutional', 'amod'), ('networks', 'nsubj'), ('learn', 'ROOT'), ('generate', 'xcomp'), ('affinity', 'compound'), ('graphs', 'dobj'), (' ', 'appos'), ('image', 'compound'), ('segmentation', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Convolutional, networks], [networks, learn], [learn, generate], [generate, affinity], [affinity, graphs], [graphs,  ], [ , image], [image, segmentation], [segmentation, .]]

>> Trigrams: 
[[Convolutional, networks, learn], [networks, learn, generate], [learn, generate, affinity], [generate, affinity, graphs], [affinity, graphs,  ], [graphs,  , image], [ , image, segmentation], [image, segmentation, .]]

>> Noun Phrases are: 
[Convolutional networks, affinity graphs, image segmentation]

>> Named Entities are: 
[]


============================ Sentence 634 =============================

Neural Comput. 


>> Tokens are: 
[Neural, Comput, .] 

>> PoS Tags are: 
[('Neural', 'PROPN'), ('Comput', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Neural', 'compound'), ('Comput', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Neural, Comput], [Comput, .]]

>> Trigrams: 
[[Neural, Comput, .]]

>> Noun Phrases are: 
[Neural Comput]

>> Named Entities are: 
[]


============================ Sentence 635 =============================

22, 511–538 (2010). 


>> Tokens are: 
[22, ,, 511–538, (, 2010, ), .] 

>> PoS Tags are: 
[('22', 'NUM'), (',', 'PUNCT'), ('511–538', 'NUM'), ('(', 'PUNCT'), ('2010', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('22', 'ROOT'), (',', 'punct'), ('511–538', 'npadvmod'), ('(', 'punct'), ('2010', 'npadvmod'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[22, ,], [,, 511–538], [511–538, (], [(, 2010], [2010, )], [), .]]

>> Trigrams: 
[[22, ,, 511–538], [,, 511–538, (], [511–538, (, 2010], [(, 2010, )], [2010, ), .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('22', 'CARDINAL'), ('511–538', 'CARDINAL'), ('2010', 'DATE')]


============================ Sentence 636 =============================

  56. 


>> Tokens are: 
[  , 56, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('56', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('56', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 56], [56, .]]

>> Trigrams: 
[[  , 56, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('56', 'CARDINAL')]


============================ Sentence 637 =============================

Garcia, C. & Delakis, M. Convolutional face finder: a neural architecture for  fast and robust face detection. 


>> Tokens are: 
[Garcia, ,, C., &, Delakis, ,, M., Convolutional, face, finder, :, neural, architecture,  , fast, robust, face, detection, .] 

>> PoS Tags are: 
[('Garcia', 'PROPN'), (',', 'PUNCT'), ('C.', 'PROPN'), ('&', 'CCONJ'), ('Delakis', 'PROPN'), (',', 'PUNCT'), ('M.', 'PROPN'), ('Convolutional', 'PROPN'), ('face', 'NOUN'), ('finder', 'NOUN'), (':', 'PUNCT'), ('neural', 'ADJ'), ('architecture', 'NOUN'), (' ', 'SPACE'), ('fast', 'ADJ'), ('robust', 'ADJ'), ('face', 'NOUN'), ('detection', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Garcia', 'ROOT'), (',', 'punct'), ('C.', 'conj'), ('&', 'cc'), ('Delakis', 'conj'), (',', 'punct'), ('M.', 'compound'), ('Convolutional', 'compound'), ('face', 'compound'), ('finder', 'appos'), (':', 'punct'), ('neural', 'amod'), ('architecture', 'appos'), (' ', 'nmod'), ('fast', 'amod'), ('robust', 'conj'), ('face', 'compound'), ('detection', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Garcia, ,], [,, C.], [C., &], [&, Delakis], [Delakis, ,], [,, M.], [M., Convolutional], [Convolutional, face], [face, finder], [finder, :], [:, neural], [neural, architecture], [architecture,  ], [ , fast], [fast, robust], [robust, face], [face, detection], [detection, .]]

>> Trigrams: 
[[Garcia, ,, C.], [,, C., &], [C., &, Delakis], [&, Delakis, ,], [Delakis, ,, M.], [,, M., Convolutional], [M., Convolutional, face], [Convolutional, face, finder], [face, finder, :], [finder, :, neural], [:, neural, architecture], [neural, architecture,  ], [architecture,  , fast], [ , fast, robust], [fast, robust, face], [robust, face, detection], [face, detection, .]]

>> Noun Phrases are: 
[Garcia, C., Delakis, M. Convolutional face finder, a neural architecture,  fast and robust face detection]

>> Named Entities are: 
[('Garcia', 'PERSON'), ('M. Convolutional', 'ORG')]


============================ Sentence 638 =============================

IEEE Trans. 


>> Tokens are: 
[IEEE, Trans, .] 

>> PoS Tags are: 
[('IEEE', 'PROPN'), ('Trans', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('IEEE', 'compound'), ('Trans', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[IEEE, Trans], [Trans, .]]

>> Trigrams: 
[[IEEE, Trans, .]]

>> Noun Phrases are: 
[IEEE Trans]

>> Named Entities are: 
[('IEEE Trans', 'ORG')]


============================ Sentence 639 =============================

Pattern Anal. 


>> Tokens are: 
[Pattern, Anal, .] 

>> PoS Tags are: 
[('Pattern', 'PROPN'), ('Anal', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Pattern', 'compound'), ('Anal', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Pattern, Anal], [Anal, .]]

>> Trigrams: 
[[Pattern, Anal, .]]

>> Noun Phrases are: 
[Pattern Anal]

>> Named Entities are: 
[]


============================ Sentence 640 =============================

Machine Intell. 


>> Tokens are: 
[Machine, Intell, .] 

>> PoS Tags are: 
[('Machine', 'PROPN'), ('Intell', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Machine', 'compound'), ('Intell', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Machine, Intell], [Intell, .]]

>> Trigrams: 
[[Machine, Intell, .]]

>> Noun Phrases are: 
[Machine Intell]

>> Named Entities are: 
[('Machine Intell', 'PERSON')]


============================ Sentence 641 =============================

26,  1408–1423 (2004). 


>> Tokens are: 
[26, ,,  , 1408–1423, (, 2004, ), .] 

>> PoS Tags are: 
[('26', 'NUM'), (',', 'PUNCT'), (' ', 'SPACE'), ('1408–1423', 'NUM'), ('(', 'PUNCT'), ('2004', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('26', 'nummod'), (',', 'punct'), (' ', 'appos'), ('1408–1423', 'ROOT'), ('(', 'punct'), ('2004', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[26, ,], [,,  ], [ , 1408–1423], [1408–1423, (], [(, 2004], [2004, )], [), .]]

>> Trigrams: 
[[26, ,,  ], [,,  , 1408–1423], [ , 1408–1423, (], [1408–1423, (, 2004], [(, 2004, )], [2004, ), .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('26', 'CARDINAL'), ('1408–1423', 'CARDINAL')]


============================ Sentence 642 =============================

  57. 


>> Tokens are: 
[  , 57, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('57', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('57', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 57], [57, .]]

>> Trigrams: 
[[  , 57, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('57', 'CARDINAL')]


============================ Sentence 643 =============================

Osadchy, M., LeCun, Y. & Miller, M. Synergistic face detection and pose  estimation with energy-based models. 


>> Tokens are: 
[Osadchy, ,, M., ,, LeCun, ,, Y., &, Miller, ,, M., Synergistic, face, detection, pose,  , estimation, energy, -, based, models, .] 

>> PoS Tags are: 
[('Osadchy', 'ADJ'), (',', 'PUNCT'), ('M.', 'PROPN'), (',', 'PUNCT'), ('LeCun', 'PROPN'), (',', 'PUNCT'), ('Y.', 'PROPN'), ('&', 'CCONJ'), ('Miller', 'PROPN'), (',', 'PUNCT'), ('M.', 'PROPN'), ('Synergistic', 'PROPN'), ('face', 'NOUN'), ('detection', 'NOUN'), ('pose', 'VERB'), (' ', 'SPACE'), ('estimation', 'NOUN'), ('energy', 'NOUN'), ('-', 'PUNCT'), ('based', 'VERB'), ('models', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Osadchy', 'amod'), (',', 'punct'), ('M.', 'meta'), (',', 'punct'), ('LeCun', 'conj'), (',', 'punct'), ('Y.', 'conj'), ('&', 'cc'), ('Miller', 'conj'), (',', 'punct'), ('M.', 'compound'), ('Synergistic', 'amod'), ('face', 'compound'), ('detection', 'ROOT'), ('pose', 'conj'), (' ', 'compound'), ('estimation', 'dobj'), ('energy', 'npadvmod'), ('-', 'punct'), ('based', 'amod'), ('models', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Osadchy, ,], [,, M.], [M., ,], [,, LeCun], [LeCun, ,], [,, Y.], [Y., &], [&, Miller], [Miller, ,], [,, M.], [M., Synergistic], [Synergistic, face], [face, detection], [detection, pose], [pose,  ], [ , estimation], [estimation, energy], [energy, -], [-, based], [based, models], [models, .]]

>> Trigrams: 
[[Osadchy, ,, M.], [,, M., ,], [M., ,, LeCun], [,, LeCun, ,], [LeCun, ,, Y.], [,, Y., &], [Y., &, Miller], [&, Miller, ,], [Miller, ,, M.], [,, M., Synergistic], [M., Synergistic, face], [Synergistic, face, detection], [face, detection, pose], [detection, pose,  ], [pose,  , estimation], [ , estimation, energy], [estimation, energy, -], [energy, -, based], [-, based, models], [based, models, .]]

>> Noun Phrases are: 
[Osadchy, M., LeCun, Y. & Miller, M. Synergistic face detection,  estimation, energy-based models]

>> Named Entities are: 
[('Y. & Miller', 'ORG'), ('M. Synergistic', 'ORG')]


============================ Sentence 644 =============================

J. Mach. 


>> Tokens are: 
[J., Mach, .] 

>> PoS Tags are: 
[('J.', 'PROPN'), ('Mach', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('J.', 'compound'), ('Mach', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[J., Mach], [Mach, .]]

>> Trigrams: 
[[J., Mach, .]]

>> Noun Phrases are: 
[J. Mach]

>> Named Entities are: 
[('J. Mach', 'PERSON')]


============================ Sentence 645 =============================

Learn. 


>> Tokens are: 
[Learn, .] 

>> PoS Tags are: 
[('Learn', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Learn', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Learn, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('Learn', 'PERSON')]


============================ Sentence 646 =============================

Res. 8, 1197–1215  (2007). 


>> Tokens are: 
[Res, ., 8, ,, 1197–1215,  , (, 2007, ), .] 

>> PoS Tags are: 
[('Res', 'NOUN'), ('.', 'NOUN'), ('8', 'NUM'), (',', 'PUNCT'), ('1197–1215', 'NUM'), (' ', 'SPACE'), ('(', 'PUNCT'), ('2007', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Res', 'ROOT'), ('.', 'punct'), ('8', 'nummod'), (',', 'punct'), ('1197–1215', 'nummod'), (' ', 'appos'), ('(', 'punct'), ('2007', 'npadvmod'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Res, .], [., 8], [8, ,], [,, 1197–1215], [1197–1215,  ], [ , (], [(, 2007], [2007, )], [), .]]

>> Trigrams: 
[[Res, ., 8], [., 8, ,], [8, ,, 1197–1215], [,, 1197–1215,  ], [1197–1215,  , (], [ , (, 2007], [(, 2007, )], [2007, ), .]]

>> Noun Phrases are: 
[Res]

>> Named Entities are: 
[('8', 'CARDINAL'), ('1197–1215', 'DATE'), ('2007', 'DATE')]


============================ Sentence 647 =============================

  58. 


>> Tokens are: 
[  , 58, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('58', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('58', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 58], [58, .]]

>> Trigrams: 
[[  , 58, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('58', 'CARDINAL')]


============================ Sentence 648 =============================

Tompson, J., Goroshin, R. R., Jain, A., LeCun, Y. Y. & Bregler, C. C. Efficient object  localization using convolutional networks. 


>> Tokens are: 
[Tompson, ,, J., ,, Goroshin, ,, R., R., ,, Jain, ,, A., ,, LeCun, ,, Y., Y., &, Bregler, ,, C., C., Efficient, object,  , localization, convolutional, networks, .] 

>> PoS Tags are: 
[('Tompson', 'PROPN'), (',', 'PUNCT'), ('J.', 'PROPN'), (',', 'PUNCT'), ('Goroshin', 'PROPN'), (',', 'PUNCT'), ('R.', 'PROPN'), ('R.', 'PROPN'), (',', 'PUNCT'), ('Jain', 'PROPN'), (',', 'PUNCT'), ('A.', 'PROPN'), (',', 'PUNCT'), ('LeCun', 'PROPN'), (',', 'PUNCT'), ('Y.', 'PROPN'), ('Y.', 'PROPN'), ('&', 'CCONJ'), ('Bregler', 'PROPN'), (',', 'PUNCT'), ('C.', 'PROPN'), ('C.', 'PROPN'), ('Efficient', 'PROPN'), ('object', 'VERB'), (' ', 'SPACE'), ('localization', 'NOUN'), ('convolutional', 'ADJ'), ('networks', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Tompson', 'npadvmod'), (',', 'punct'), ('J.', 'nsubj'), (',', 'punct'), ('Goroshin', 'conj'), (',', 'punct'), ('R.', 'compound'), ('R.', 'conj'), (',', 'punct'), ('Jain', 'conj'), (',', 'punct'), ('A.', 'conj'), (',', 'punct'), ('LeCun', 'conj'), (',', 'punct'), ('Y.', 'compound'), ('Y.', 'conj'), ('&', 'cc'), ('Bregler', 'conj'), (',', 'punct'), ('C.', 'compound'), ('C.', 'compound'), ('Efficient', 'appos'), ('object', 'ROOT'), (' ', 'punct'), ('localization', 'dobj'), ('convolutional', 'amod'), ('networks', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Tompson, ,], [,, J.], [J., ,], [,, Goroshin], [Goroshin, ,], [,, R.], [R., R.], [R., ,], [,, Jain], [Jain, ,], [,, A.], [A., ,], [,, LeCun], [LeCun, ,], [,, Y.], [Y., Y.], [Y., &], [&, Bregler], [Bregler, ,], [,, C.], [C., C.], [C., Efficient], [Efficient, object], [object,  ], [ , localization], [localization, convolutional], [convolutional, networks], [networks, .]]

>> Trigrams: 
[[Tompson, ,, J.], [,, J., ,], [J., ,, Goroshin], [,, Goroshin, ,], [Goroshin, ,, R.], [,, R., R.], [R., R., ,], [R., ,, Jain], [,, Jain, ,], [Jain, ,, A.], [,, A., ,], [A., ,, LeCun], [,, LeCun, ,], [LeCun, ,, Y.], [,, Y., Y.], [Y., Y., &], [Y., &, Bregler], [&, Bregler, ,], [Bregler, ,, C.], [,, C., C.], [C., C., Efficient], [C., Efficient, object], [Efficient, object,  ], [object,  , localization], [ , localization, convolutional], [localization, convolutional, networks], [convolutional, networks, .]]

>> Noun Phrases are: 
[J., Goroshin, R. R., Jain, A., LeCun, Y. Y., Bregler, C. C. Efficient, localization, convolutional networks]

>> Named Entities are: 
[('Tompson', 'PERSON'), ('J.', 'ORG'), ('R. R.', 'PERSON'), ('LeCun', 'PERSON'), ('Y. Y. & Bregler', 'ORG'), ('C. C. Efficient', 'PERSON')]


============================ Sentence 649 =============================

In Proc. 


>> Tokens are: 
[Proc, .] 

>> PoS Tags are: 
[('Proc', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Proc', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Proc, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Proc]

>> Named Entities are: 
[]


============================ Sentence 650 =============================

Conference on Computer  Vision and Pattern Recognition http://arxiv.org/abs/1411.4280 (2014). 


>> Tokens are: 
[Conference, Computer,  , Vision, Pattern, Recognition, http://arxiv.org/abs/1411.4280, (, 2014, ), .] 

>> PoS Tags are: 
[('Conference', 'NOUN'), ('Computer', 'PROPN'), (' ', 'SPACE'), ('Vision', 'PROPN'), ('Pattern', 'PROPN'), ('Recognition', 'PROPN'), ('http://arxiv.org/abs/1411.4280', 'NOUN'), ('(', 'PUNCT'), ('2014', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Conference', 'ROOT'), ('Computer', 'nmod'), (' ', 'nummod'), ('Vision', 'pobj'), ('Pattern', 'conj'), ('Recognition', 'compound'), ('http://arxiv.org/abs/1411.4280', 'appos'), ('(', 'punct'), ('2014', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Conference, Computer], [Computer,  ], [ , Vision], [Vision, Pattern], [Pattern, Recognition], [Recognition, http://arxiv.org/abs/1411.4280], [http://arxiv.org/abs/1411.4280, (], [(, 2014], [2014, )], [), .]]

>> Trigrams: 
[[Conference, Computer,  ], [Computer,  , Vision], [ , Vision, Pattern], [Vision, Pattern, Recognition], [Pattern, Recognition, http://arxiv.org/abs/1411.4280], [Recognition, http://arxiv.org/abs/1411.4280, (], [http://arxiv.org/abs/1411.4280, (, 2014], [(, 2014, )], [2014, ), .]]

>> Noun Phrases are: 
[Conference, Computer  Vision, Pattern, Recognition http://arxiv.org/abs/1411.4280]

>> Named Entities are: 
[('2014', 'DATE')]


============================ Sentence 651 =============================

  59. 


>> Tokens are: 
[  , 59, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('59', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('59', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 59], [59, .]]

>> Trigrams: 
[[  , 59, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('59', 'CARDINAL')]


============================ Sentence 652 =============================

Taigman, Y., Yang, M., Ranzato, M. & Wolf, L. Deepface: closing the gap to  human-level performance in face verification. 


>> Tokens are: 
[Taigman, ,, Y., ,, Yang, ,, M., ,, Ranzato, ,, M., &, Wolf, ,, L., Deepface, :, closing, gap,  , human, -, level, performance, face, verification, .] 

>> PoS Tags are: 
[('Taigman', 'PROPN'), (',', 'PUNCT'), ('Y.', 'PROPN'), (',', 'PUNCT'), ('Yang', 'PROPN'), (',', 'PUNCT'), ('M.', 'PROPN'), (',', 'PUNCT'), ('Ranzato', 'PROPN'), (',', 'PUNCT'), ('M.', 'PROPN'), ('&', 'CCONJ'), ('Wolf', 'PROPN'), (',', 'PUNCT'), ('L.', 'PROPN'), ('Deepface', 'PROPN'), (':', 'PUNCT'), ('closing', 'VERB'), ('gap', 'NOUN'), (' ', 'SPACE'), ('human', 'ADJ'), ('-', 'PUNCT'), ('level', 'NOUN'), ('performance', 'NOUN'), ('face', 'NOUN'), ('verification', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Taigman', 'ROOT'), (',', 'punct'), ('Y.', 'conj'), (',', 'punct'), ('Yang', 'conj'), (',', 'punct'), ('M.', 'conj'), (',', 'punct'), ('Ranzato', 'conj'), (',', 'punct'), ('M.', 'conj'), ('&', 'cc'), ('Wolf', 'conj'), (',', 'punct'), ('L.', 'compound'), ('Deepface', 'appos'), (':', 'punct'), ('closing', 'acl'), ('gap', 'dobj'), (' ', 'nmod'), ('human', 'amod'), ('-', 'punct'), ('level', 'compound'), ('performance', 'pobj'), ('face', 'compound'), ('verification', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Taigman, ,], [,, Y.], [Y., ,], [,, Yang], [Yang, ,], [,, M.], [M., ,], [,, Ranzato], [Ranzato, ,], [,, M.], [M., &], [&, Wolf], [Wolf, ,], [,, L.], [L., Deepface], [Deepface, :], [:, closing], [closing, gap], [gap,  ], [ , human], [human, -], [-, level], [level, performance], [performance, face], [face, verification], [verification, .]]

>> Trigrams: 
[[Taigman, ,, Y.], [,, Y., ,], [Y., ,, Yang], [,, Yang, ,], [Yang, ,, M.], [,, M., ,], [M., ,, Ranzato], [,, Ranzato, ,], [Ranzato, ,, M.], [,, M., &], [M., &, Wolf], [&, Wolf, ,], [Wolf, ,, L.], [,, L., Deepface], [L., Deepface, :], [Deepface, :, closing], [:, closing, gap], [closing, gap,  ], [gap,  , human], [ , human, -], [human, -, level], [-, level, performance], [level, performance, face], [performance, face, verification], [face, verification, .]]

>> Noun Phrases are: 
[Taigman, Y., Yang, M., Ranzato, M., Wolf, L. Deepface, the gap,  human-level performance, face verification]

>> Named Entities are: 
[('Y.', 'ORG'), ('Yang', 'PERSON'), ('Ranzato, M. & Wolf', 'ORG'), ('L. Deepface', 'PERSON')]


============================ Sentence 653 =============================

In Proc. 


>> Tokens are: 
[Proc, .] 

>> PoS Tags are: 
[('Proc', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Proc', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Proc, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Proc]

>> Named Entities are: 
[]


============================ Sentence 654 =============================

Conference on Computer  Vision and Pattern Recognition 1701–1708 (2014). 


>> Tokens are: 
[Conference, Computer,  , Vision, Pattern, Recognition, 1701–1708, (, 2014, ), .] 

>> PoS Tags are: 
[('Conference', 'NOUN'), ('Computer', 'PROPN'), (' ', 'SPACE'), ('Vision', 'PROPN'), ('Pattern', 'PROPN'), ('Recognition', 'PROPN'), ('1701–1708', 'NUM'), ('(', 'PUNCT'), ('2014', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Conference', 'ROOT'), ('Computer', 'nmod'), (' ', 'nummod'), ('Vision', 'pobj'), ('Pattern', 'conj'), ('Recognition', 'compound'), ('1701–1708', 'appos'), ('(', 'punct'), ('2014', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Conference, Computer], [Computer,  ], [ , Vision], [Vision, Pattern], [Pattern, Recognition], [Recognition, 1701–1708], [1701–1708, (], [(, 2014], [2014, )], [), .]]

>> Trigrams: 
[[Conference, Computer,  ], [Computer,  , Vision], [ , Vision, Pattern], [Vision, Pattern, Recognition], [Pattern, Recognition, 1701–1708], [Recognition, 1701–1708, (], [1701–1708, (, 2014], [(, 2014, )], [2014, ), .]]

>> Noun Phrases are: 
[Conference, Computer  Vision, Pattern]

>> Named Entities are: 
[('2014', 'DATE')]


============================ Sentence 655 =============================

  60. 


>> Tokens are: 
[  , 60, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('60', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('60', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 60], [60, .]]

>> Trigrams: 
[[  , 60, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('60', 'CARDINAL')]


============================ Sentence 656 =============================

Hadsell, R. et al. 


>> Tokens are: 
[Hadsell, ,, R., et, al, .] 

>> PoS Tags are: 
[('Hadsell', 'PROPN'), (',', 'PUNCT'), ('R.', 'PROPN'), ('et', 'PROPN'), ('al', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Hadsell', 'ROOT'), (',', 'punct'), ('R.', 'compound'), ('et', 'compound'), ('al', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[Hadsell, ,], [,, R.], [R., et], [et, al], [al, .]]

>> Trigrams: 
[[Hadsell, ,, R.], [,, R., et], [R., et, al], [et, al, .]]

>> Noun Phrases are: 
[Hadsell, R. et al]

>> Named Entities are: 
[('R.', 'NORP')]


============================ Sentence 657 =============================

Learning long-range vision for autonomous off-road driving. 


>> Tokens are: 
[Learning, long, -, range, vision, autonomous, -, road, driving, .] 

>> PoS Tags are: 
[('Learning', 'VERB'), ('long', 'ADJ'), ('-', 'PUNCT'), ('range', 'NOUN'), ('vision', 'NOUN'), ('autonomous', 'ADJ'), ('-', 'PUNCT'), ('road', 'NOUN'), ('driving', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Learning', 'ROOT'), ('long', 'amod'), ('-', 'punct'), ('range', 'compound'), ('vision', 'dobj'), ('autonomous', 'amod'), ('-', 'punct'), ('road', 'pobj'), ('driving', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Learning, long], [long, -], [-, range], [range, vision], [vision, autonomous], [autonomous, -], [-, road], [road, driving], [driving, .]]

>> Trigrams: 
[[Learning, long, -], [long, -, range], [-, range, vision], [range, vision, autonomous], [vision, autonomous, -], [autonomous, -, road], [-, road, driving], [road, driving, .]]

>> Noun Phrases are: 
[long-range vision, road]

>> Named Entities are: 
[]


============================ Sentence 658 =============================

 J. Field Robot. 


>> Tokens are: 
[ , J., Field, Robot, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('J.', 'PROPN'), ('Field', 'PROPN'), ('Robot', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'compound'), ('J.', 'compound'), ('Field', 'compound'), ('Robot', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[ , J.], [J., Field], [Field, Robot], [Robot, .]]

>> Trigrams: 
[[ , J., Field], [J., Field, Robot], [Field, Robot, .]]

>> Noun Phrases are: 
[ J. Field Robot]

>> Named Entities are: 
[('J. Field Robot', 'ORG')]


============================ Sentence 659 =============================

26, 120–144 (2009). 


>> Tokens are: 
[26, ,, 120–144, (, 2009, ), .] 

>> PoS Tags are: 
[('26', 'NUM'), (',', 'PUNCT'), ('120–144', 'NUM'), ('(', 'PUNCT'), ('2009', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('26', 'nummod'), (',', 'punct'), ('120–144', 'ROOT'), ('(', 'punct'), ('2009', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[26, ,], [,, 120–144], [120–144, (], [(, 2009], [2009, )], [), .]]

>> Trigrams: 
[[26, ,, 120–144], [,, 120–144, (], [120–144, (, 2009], [(, 2009, )], [2009, ), .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('26', 'CARDINAL'), ('2009', 'DATE')]


============================ Sentence 660 =============================

  61. 


>> Tokens are: 
[  , 61, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('61', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('61', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 61], [61, .]]

>> Trigrams: 
[[  , 61, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('61', 'CARDINAL')]


============================ Sentence 661 =============================

Farabet, C., Couprie, C., Najman, L. & LeCun, Y. Scene parsing with multiscale  feature learning, purity trees, and optimal covers. 


>> Tokens are: 
[Farabet, ,, C., ,, Couprie, ,, C., ,, Najman, ,, L., &, LeCun, ,, Y., Scene, parsing, multiscale,  , feature, learning, ,, purity, trees, ,, optimal, covers, .] 

>> PoS Tags are: 
[('Farabet', 'PROPN'), (',', 'PUNCT'), ('C.', 'PROPN'), (',', 'PUNCT'), ('Couprie', 'PROPN'), (',', 'PUNCT'), ('C.', 'PROPN'), (',', 'PUNCT'), ('Najman', 'PROPN'), (',', 'PUNCT'), ('L.', 'PROPN'), ('&', 'CCONJ'), ('LeCun', 'PROPN'), (',', 'PUNCT'), ('Y.', 'PROPN'), ('Scene', 'PROPN'), ('parsing', 'VERB'), ('multiscale', 'ADJ'), (' ', 'SPACE'), ('feature', 'NOUN'), ('learning', 'NOUN'), (',', 'PUNCT'), ('purity', 'NOUN'), ('trees', 'NOUN'), (',', 'PUNCT'), ('optimal', 'ADJ'), ('covers', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Farabet', 'nsubj'), (',', 'punct'), ('C.', 'conj'), (',', 'punct'), ('Couprie', 'conj'), (',', 'punct'), ('C.', 'conj'), (',', 'punct'), ('Najman', 'conj'), (',', 'punct'), ('L.', 'conj'), ('&', 'cc'), ('LeCun', 'conj'), (',', 'punct'), ('Y.', 'compound'), ('Scene', 'appos'), ('parsing', 'ROOT'), ('multiscale', 'amod'), (' ', 'advmod'), ('feature', 'compound'), ('learning', 'pobj'), (',', 'punct'), ('purity', 'compound'), ('trees', 'conj'), (',', 'punct'), ('optimal', 'amod'), ('covers', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[Farabet, ,], [,, C.], [C., ,], [,, Couprie], [Couprie, ,], [,, C.], [C., ,], [,, Najman], [Najman, ,], [,, L.], [L., &], [&, LeCun], [LeCun, ,], [,, Y.], [Y., Scene], [Scene, parsing], [parsing, multiscale], [multiscale,  ], [ , feature], [feature, learning], [learning, ,], [,, purity], [purity, trees], [trees, ,], [,, optimal], [optimal, covers], [covers, .]]

>> Trigrams: 
[[Farabet, ,, C.], [,, C., ,], [C., ,, Couprie], [,, Couprie, ,], [Couprie, ,, C.], [,, C., ,], [C., ,, Najman], [,, Najman, ,], [Najman, ,, L.], [,, L., &], [L., &, LeCun], [&, LeCun, ,], [LeCun, ,, Y.], [,, Y., Scene], [Y., Scene, parsing], [Scene, parsing, multiscale], [parsing, multiscale,  ], [multiscale,  , feature], [ , feature, learning], [feature, learning, ,], [learning, ,, purity], [,, purity, trees], [purity, trees, ,], [trees, ,, optimal], [,, optimal, covers], [optimal, covers, .]]

>> Noun Phrases are: 
[Farabet, C., Couprie, C., Najman, L., LeCun, Y. Scene, multiscale  feature learning, purity trees, optimal covers]

>> Named Entities are: 
[('Farabet', 'GPE'), ('C., Couprie, C.', 'ORG'), ('L. & LeCun', 'ORG'), ('Y. Scene', 'PERSON')]


============================ Sentence 662 =============================

In Proc. 


>> Tokens are: 
[Proc, .] 

>> PoS Tags are: 
[('Proc', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Proc', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Proc, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Proc]

>> Named Entities are: 
[]


============================ Sentence 663 =============================

International  Conference on Machine Learning http://arxiv.org/abs/1202.2160 (2012). 


>> Tokens are: 
[International,  , Conference, Machine, Learning, http://arxiv.org/abs/1202.2160, (, 2012, ), .] 

>> PoS Tags are: 
[('International', 'PROPN'), (' ', 'SPACE'), ('Conference', 'PROPN'), ('Machine', 'PROPN'), ('Learning', 'PROPN'), ('http://arxiv.org/abs/1202.2160', 'PROPN'), ('(', 'PUNCT'), ('2012', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('International', 'nmod'), (' ', 'compound'), ('Conference', 'ROOT'), ('Machine', 'compound'), ('Learning', 'compound'), ('http://arxiv.org/abs/1202.2160', 'pobj'), ('(', 'punct'), ('2012', 'npadvmod'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[International,  ], [ , Conference], [Conference, Machine], [Machine, Learning], [Learning, http://arxiv.org/abs/1202.2160], [http://arxiv.org/abs/1202.2160, (], [(, 2012], [2012, )], [), .]]

>> Trigrams: 
[[International,  , Conference], [ , Conference, Machine], [Conference, Machine, Learning], [Machine, Learning, http://arxiv.org/abs/1202.2160], [Learning, http://arxiv.org/abs/1202.2160, (], [http://arxiv.org/abs/1202.2160, (, 2012], [(, 2012, )], [2012, ), .]]

>> Noun Phrases are: 
[International  Conference, Machine Learning http://arxiv.org/abs/1202.2160]

>> Named Entities are: 
[('2012', 'DATE')]


============================ Sentence 664 =============================

  62. 


>> Tokens are: 
[  , 62, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('62', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('62', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 62], [62, .]]

>> Trigrams: 
[[  , 62, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('62', 'CARDINAL')]


============================ Sentence 665 =============================

Srivastava, N., Hinton, G., Krizhevsky, A., Sutskever, I. & Salakhutdinov, R.   


>> Tokens are: 
[Srivastava, ,, N., ,, Hinton, ,, G., ,, Krizhevsky, ,, A., ,, Sutskever, ,, I., &, Salakhutdinov, ,, R.,  ] 

>> PoS Tags are: 
[('Srivastava', 'PROPN'), (',', 'PUNCT'), ('N.', 'PROPN'), (',', 'PUNCT'), ('Hinton', 'PROPN'), (',', 'PUNCT'), ('G.', 'PROPN'), (',', 'PUNCT'), ('Krizhevsky', 'PROPN'), (',', 'PUNCT'), ('A.', 'PROPN'), (',', 'PUNCT'), ('Sutskever', 'PROPN'), (',', 'PUNCT'), ('I.', 'PROPN'), ('&', 'CCONJ'), ('Salakhutdinov', 'PROPN'), (',', 'PUNCT'), ('R.', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Srivastava', 'ROOT'), (',', 'punct'), ('N.', 'conj'), (',', 'punct'), ('Hinton', 'conj'), (',', 'punct'), ('G.', 'conj'), (',', 'punct'), ('Krizhevsky', 'conj'), (',', 'punct'), ('A.', 'conj'), (',', 'punct'), ('Sutskever', 'conj'), (',', 'punct'), ('I.', 'conj'), ('&', 'cc'), ('Salakhutdinov', 'conj'), (',', 'punct'), ('R.', 'appos'), (' ', 'punct')]

>> Bigrams: 
[[Srivastava, ,], [,, N.], [N., ,], [,, Hinton], [Hinton, ,], [,, G.], [G., ,], [,, Krizhevsky], [Krizhevsky, ,], [,, A.], [A., ,], [,, Sutskever], [Sutskever, ,], [,, I.], [I., &], [&, Salakhutdinov], [Salakhutdinov, ,], [,, R.], [R.,  ]]

>> Trigrams: 
[[Srivastava, ,, N.], [,, N., ,], [N., ,, Hinton], [,, Hinton, ,], [Hinton, ,, G.], [,, G., ,], [G., ,, Krizhevsky], [,, Krizhevsky, ,], [Krizhevsky, ,, A.], [,, A., ,], [A., ,, Sutskever], [,, Sutskever, ,], [Sutskever, ,, I.], [,, I., &], [I., &, Salakhutdinov], [&, Salakhutdinov, ,], [Salakhutdinov, ,, R.], [,, R.,  ]]

>> Noun Phrases are: 
[Srivastava, N., Hinton, G., Krizhevsky, A., Sutskever, I., Salakhutdinov, R.]

>> Named Entities are: 
[('Srivastava', 'PERSON'), ('N.', 'ORG'), ('Hinton', 'GPE'), ('G.', 'PERSON'), ('Sutskever', 'ORG'), ('I. & Salakhutdinov', 'ORG'), ('R.', 'NORP')]


============================ Sentence 666 =============================

Dropout: a simple way to prevent neural networks from overfitting. 


>> Tokens are: 
[Dropout, :, simple, way, prevent, neural, networks, overfitting, .] 

>> PoS Tags are: 
[('Dropout', 'PROPN'), (':', 'PUNCT'), ('simple', 'ADJ'), ('way', 'NOUN'), ('prevent', 'VERB'), ('neural', 'ADJ'), ('networks', 'NOUN'), ('overfitting', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Dropout', 'ROOT'), (':', 'punct'), ('simple', 'amod'), ('way', 'appos'), ('prevent', 'relcl'), ('neural', 'amod'), ('networks', 'dobj'), ('overfitting', 'pcomp'), ('.', 'punct')]

>> Bigrams: 
[[Dropout, :], [:, simple], [simple, way], [way, prevent], [prevent, neural], [neural, networks], [networks, overfitting], [overfitting, .]]

>> Trigrams: 
[[Dropout, :, simple], [:, simple, way], [simple, way, prevent], [way, prevent, neural], [prevent, neural, networks], [neural, networks, overfitting], [networks, overfitting, .]]

>> Noun Phrases are: 
[Dropout, a simple way, neural networks]

>> Named Entities are: 
[]


============================ Sentence 667 =============================

J. Machine   


>> Tokens are: 
[J., Machine,  ] 

>> PoS Tags are: 
[('J.', 'PROPN'), ('Machine', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('J.', 'compound'), ('Machine', 'compound'), (' ', 'ROOT')]

>> Bigrams: 
[[J., Machine], [Machine,  ]]

>> Trigrams: 
[[J., Machine,  ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('J. Machine', 'PERSON')]


============================ Sentence 668 =============================

Learning Res. 


>> Tokens are: 
[Learning, Res, .] 

>> PoS Tags are: 
[('Learning', 'PROPN'), ('Res', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Learning', 'compound'), ('Res', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Learning, Res], [Res, .]]

>> Trigrams: 
[[Learning, Res, .]]

>> Noun Phrases are: 
[Learning Res]

>> Named Entities are: 
[]


============================ Sentence 669 =============================

15, 1929–1958 (2014). 


>> Tokens are: 
[15, ,, 1929–1958, (, 2014, ), .] 

>> PoS Tags are: 
[('15', 'NUM'), (',', 'PUNCT'), ('1929–1958', 'NUM'), ('(', 'PUNCT'), ('2014', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('15', 'nummod'), (',', 'punct'), ('1929–1958', 'ROOT'), ('(', 'punct'), ('2014', 'npadvmod'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[15, ,], [,, 1929–1958], [1929–1958, (], [(, 2014], [2014, )], [), .]]

>> Trigrams: 
[[15, ,, 1929–1958], [,, 1929–1958, (], [1929–1958, (, 2014], [(, 2014, )], [2014, ), .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('15', 'CARDINAL'), ('2014', 'DATE')]


============================ Sentence 670 =============================

  63. 


>> Tokens are: 
[  , 63, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('63', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('63', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 63], [63, .]]

>> Trigrams: 
[[  , 63, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('63', 'CARDINAL')]


============================ Sentence 671 =============================

Sermanet, P. et al. 


>> Tokens are: 
[Sermanet, ,, P., et, al, .] 

>> PoS Tags are: 
[('Sermanet', 'PROPN'), (',', 'PUNCT'), ('P.', 'PROPN'), ('et', 'PROPN'), ('al', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Sermanet', 'ROOT'), (',', 'punct'), ('P.', 'compound'), ('et', 'compound'), ('al', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[Sermanet, ,], [,, P.], [P., et], [et, al], [al, .]]

>> Trigrams: 
[[Sermanet, ,, P.], [,, P., et], [P., et, al], [et, al, .]]

>> Noun Phrases are: 
[Sermanet, P. et al]

>> Named Entities are: 
[]


============================ Sentence 672 =============================

Overfeat: integrated recognition, localization and detection  using convolutional networks. 


>> Tokens are: 
[Overfeat, :, integrated, recognition, ,, localization, detection,  , convolutional, networks, .] 

>> PoS Tags are: 
[('Overfeat', 'PROPN'), (':', 'PUNCT'), ('integrated', 'ADJ'), ('recognition', 'NOUN'), (',', 'PUNCT'), ('localization', 'NOUN'), ('detection', 'NOUN'), (' ', 'SPACE'), ('convolutional', 'ADJ'), ('networks', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Overfeat', 'ROOT'), (':', 'punct'), ('integrated', 'amod'), ('recognition', 'appos'), (',', 'punct'), ('localization', 'conj'), ('detection', 'compound'), (' ', 'conj'), ('convolutional', 'amod'), ('networks', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Overfeat, :], [:, integrated], [integrated, recognition], [recognition, ,], [,, localization], [localization, detection], [detection,  ], [ , convolutional], [convolutional, networks], [networks, .]]

>> Trigrams: 
[[Overfeat, :, integrated], [:, integrated, recognition], [integrated, recognition, ,], [recognition, ,, localization], [,, localization, detection], [localization, detection,  ], [detection,  , convolutional], [ , convolutional, networks], [convolutional, networks, .]]

>> Noun Phrases are: 
[Overfeat, integrated recognition, localization, convolutional networks]

>> Named Entities are: 
[]


============================ Sentence 673 =============================

In Proc. 


>> Tokens are: 
[Proc, .] 

>> PoS Tags are: 
[('Proc', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Proc', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Proc, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Proc]

>> Named Entities are: 
[]


============================ Sentence 674 =============================

International Conference on Learning   


>> Tokens are: 
[International, Conference, Learning,  ] 

>> PoS Tags are: 
[('International', 'PROPN'), ('Conference', 'PROPN'), ('Learning', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('International', 'compound'), ('Conference', 'ROOT'), ('Learning', 'pcomp'), (' ', 'punct')]

>> Bigrams: 
[[International, Conference], [Conference, Learning], [Learning,  ]]

>> Trigrams: 
[[International, Conference, Learning], [Conference, Learning,  ]]

>> Noun Phrases are: 
[International Conference, Learning]

>> Named Entities are: 
[]


============================ Sentence 675 =============================

Representations http://arxiv.org/abs/1312.6229 (2014). 


>> Tokens are: 
[Representations, http://arxiv.org/abs/1312.6229, (, 2014, ), .] 

>> PoS Tags are: 
[('Representations', 'PROPN'), ('http://arxiv.org/abs/1312.6229', 'NOUN'), ('(', 'PUNCT'), ('2014', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Representations', 'compound'), ('http://arxiv.org/abs/1312.6229', 'ROOT'), ('(', 'punct'), ('2014', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Representations, http://arxiv.org/abs/1312.6229], [http://arxiv.org/abs/1312.6229, (], [(, 2014], [2014, )], [), .]]

>> Trigrams: 
[[Representations, http://arxiv.org/abs/1312.6229, (], [http://arxiv.org/abs/1312.6229, (, 2014], [(, 2014, )], [2014, ), .]]

>> Noun Phrases are: 
[Representations http://arxiv.org/abs/1312.6229]

>> Named Entities are: 
[('2014', 'DATE')]


============================ Sentence 676 =============================

  64. 


>> Tokens are: 
[  , 64, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('64', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('64', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 64], [64, .]]

>> Trigrams: 
[[  , 64, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('64', 'CARDINAL')]


============================ Sentence 677 =============================

Girshick, R., Donahue, J., Darrell, T. & Malik, J. Rich feature hierarchies for  accurate object detection and semantic segmentation. 


>> Tokens are: 
[Girshick, ,, R., ,, Donahue, ,, J., ,, Darrell, ,, T., &, Malik, ,, J., Rich, feature, hierarchies,  , accurate, object, detection, semantic, segmentation, .] 

>> PoS Tags are: 
[('Girshick', 'PROPN'), (',', 'PUNCT'), ('R.', 'PROPN'), (',', 'PUNCT'), ('Donahue', 'PROPN'), (',', 'PUNCT'), ('J.', 'PROPN'), (',', 'PUNCT'), ('Darrell', 'PROPN'), (',', 'PUNCT'), ('T.', 'PROPN'), ('&', 'CCONJ'), ('Malik', 'PROPN'), (',', 'PUNCT'), ('J.', 'PROPN'), ('Rich', 'PROPN'), ('feature', 'NOUN'), ('hierarchies', 'NOUN'), (' ', 'SPACE'), ('accurate', 'ADJ'), ('object', 'NOUN'), ('detection', 'NOUN'), ('semantic', 'ADJ'), ('segmentation', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Girshick', 'ROOT'), (',', 'punct'), ('R.', 'appos'), (',', 'punct'), ('Donahue', 'conj'), (',', 'punct'), ('J.', 'conj'), (',', 'punct'), ('Darrell', 'conj'), (',', 'punct'), ('T.', 'conj'), ('&', 'cc'), ('Malik', 'conj'), (',', 'punct'), ('J.', 'compound'), ('Rich', 'compound'), ('feature', 'compound'), ('hierarchies', 'appos'), (' ', 'nmod'), ('accurate', 'amod'), ('object', 'compound'), ('detection', 'pobj'), ('semantic', 'amod'), ('segmentation', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[Girshick, ,], [,, R.], [R., ,], [,, Donahue], [Donahue, ,], [,, J.], [J., ,], [,, Darrell], [Darrell, ,], [,, T.], [T., &], [&, Malik], [Malik, ,], [,, J.], [J., Rich], [Rich, feature], [feature, hierarchies], [hierarchies,  ], [ , accurate], [accurate, object], [object, detection], [detection, semantic], [semantic, segmentation], [segmentation, .]]

>> Trigrams: 
[[Girshick, ,, R.], [,, R., ,], [R., ,, Donahue], [,, Donahue, ,], [Donahue, ,, J.], [,, J., ,], [J., ,, Darrell], [,, Darrell, ,], [Darrell, ,, T.], [,, T., &], [T., &, Malik], [&, Malik, ,], [Malik, ,, J.], [,, J., Rich], [J., Rich, feature], [Rich, feature, hierarchies], [feature, hierarchies,  ], [hierarchies,  , accurate], [ , accurate, object], [accurate, object, detection], [object, detection, semantic], [detection, semantic, segmentation], [semantic, segmentation, .]]

>> Noun Phrases are: 
[Girshick, R., Donahue, J., Darrell, T., Malik, J. Rich feature hierarchies,  accurate object detection, semantic segmentation]

>> Named Entities are: 
[('R.', 'NORP'), ('Donahue', 'GPE'), ('J.', 'ORG'), ('Darrell', 'ORG'), ('T. & Malik', 'ORG'), ('J. Rich', 'ORG')]


============================ Sentence 678 =============================

In Proc. 


>> Tokens are: 
[Proc, .] 

>> PoS Tags are: 
[('Proc', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Proc', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Proc, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Proc]

>> Named Entities are: 
[]


============================ Sentence 679 =============================

Conference on  Computer Vision and Pattern Recognition 580–587 (2014). 


>> Tokens are: 
[Conference,  , Computer, Vision, Pattern, Recognition, 580–587, (, 2014, ), .] 

>> PoS Tags are: 
[('Conference', 'NOUN'), (' ', 'SPACE'), ('Computer', 'PROPN'), ('Vision', 'PROPN'), ('Pattern', 'PROPN'), ('Recognition', 'PROPN'), ('580–587', 'NUM'), ('(', 'PUNCT'), ('2014', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Conference', 'ROOT'), (' ', 'pobj'), ('Computer', 'compound'), ('Vision', 'pobj'), ('Pattern', 'compound'), ('Recognition', 'conj'), ('580–587', 'nummod'), ('(', 'punct'), ('2014', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Conference,  ], [ , Computer], [Computer, Vision], [Vision, Pattern], [Pattern, Recognition], [Recognition, 580–587], [580–587, (], [(, 2014], [2014, )], [), .]]

>> Trigrams: 
[[Conference,  , Computer], [ , Computer, Vision], [Computer, Vision, Pattern], [Vision, Pattern, Recognition], [Pattern, Recognition, 580–587], [Recognition, 580–587, (], [580–587, (, 2014], [(, 2014, )], [2014, ), .]]

>> Noun Phrases are: 
[Conference, Computer Vision, Pattern Recognition]

>> Named Entities are: 
[('2014', 'DATE')]


============================ Sentence 680 =============================

  65. 


>> Tokens are: 
[  , 65, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('65', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('65', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 65], [65, .]]

>> Trigrams: 
[[  , 65, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('65', 'CARDINAL')]


============================ Sentence 681 =============================

Simonyan, K. & Zisserman, A. Very deep convolutional networks for large-scale  image recognition. 


>> Tokens are: 
[Simonyan, ,, K., &, Zisserman, ,, A., deep, convolutional, networks, large, -, scale,  , image, recognition, .] 

>> PoS Tags are: 
[('Simonyan', 'PROPN'), (',', 'PUNCT'), ('K.', 'PROPN'), ('&', 'CCONJ'), ('Zisserman', 'PROPN'), (',', 'PUNCT'), ('A.', 'NOUN'), ('deep', 'ADJ'), ('convolutional', 'ADJ'), ('networks', 'NOUN'), ('large', 'ADJ'), ('-', 'PUNCT'), ('scale', 'NOUN'), (' ', 'SPACE'), ('image', 'NOUN'), ('recognition', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Simonyan', 'ROOT'), (',', 'punct'), ('K.', 'conj'), ('&', 'cc'), ('Zisserman', 'conj'), (',', 'punct'), ('A.', 'compound'), ('deep', 'amod'), ('convolutional', 'amod'), ('networks', 'appos'), ('large', 'amod'), ('-', 'punct'), ('scale', 'nmod'), (' ', 'nummod'), ('image', 'compound'), ('recognition', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Simonyan, ,], [,, K.], [K., &], [&, Zisserman], [Zisserman, ,], [,, A.], [A., deep], [deep, convolutional], [convolutional, networks], [networks, large], [large, -], [-, scale], [scale,  ], [ , image], [image, recognition], [recognition, .]]

>> Trigrams: 
[[Simonyan, ,, K.], [,, K., &], [K., &, Zisserman], [&, Zisserman, ,], [Zisserman, ,, A.], [,, A., deep], [A., deep, convolutional], [deep, convolutional, networks], [convolutional, networks, large], [networks, large, -], [large, -, scale], [-, scale,  ], [scale,  , image], [ , image, recognition], [image, recognition, .]]

>> Noun Phrases are: 
[Simonyan, K., Zisserman, A. Very deep convolutional networks, large-scale  image recognition]

>> Named Entities are: 
[('K. & Zisserman', 'ORG')]


============================ Sentence 682 =============================

In Proc. 


>> Tokens are: 
[Proc, .] 

>> PoS Tags are: 
[('Proc', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Proc', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Proc, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Proc]

>> Named Entities are: 
[]


============================ Sentence 683 =============================

International Conference on Learning Representations  http://arxiv.org/abs/1409.1556 (2014). 


>> Tokens are: 
[International, Conference, Learning, Representations,  , http://arxiv.org/abs/1409.1556, (, 2014, ), .] 

>> PoS Tags are: 
[('International', 'PROPN'), ('Conference', 'PROPN'), ('Learning', 'PROPN'), ('Representations', 'PROPN'), (' ', 'SPACE'), ('http://arxiv.org/abs/1409.1556', 'PROPN'), ('(', 'PUNCT'), ('2014', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('International', 'compound'), ('Conference', 'ROOT'), ('Learning', 'compound'), ('Representations', 'pobj'), (' ', 'punct'), ('http://arxiv.org/abs/1409.1556', 'appos'), ('(', 'punct'), ('2014', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[International, Conference], [Conference, Learning], [Learning, Representations], [Representations,  ], [ , http://arxiv.org/abs/1409.1556], [http://arxiv.org/abs/1409.1556, (], [(, 2014], [2014, )], [), .]]

>> Trigrams: 
[[International, Conference, Learning], [Conference, Learning, Representations], [Learning, Representations,  ], [Representations,  , http://arxiv.org/abs/1409.1556], [ , http://arxiv.org/abs/1409.1556, (], [http://arxiv.org/abs/1409.1556, (, 2014], [(, 2014, )], [2014, ), .]]

>> Noun Phrases are: 
[International Conference, Learning Representations, http://arxiv.org/abs/1409.1556]

>> Named Entities are: 
[('2014', 'DATE')]


============================ Sentence 684 =============================

  66. 


>> Tokens are: 
[  , 66, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('66', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('66', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 66], [66, .]]

>> Trigrams: 
[[  , 66, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('66', 'CARDINAL')]


============================ Sentence 685 =============================

Boser, B., Sackinger, E., Bromley, J., LeCun, Y. & Jackel, L. An analog neural  network processor with programmable topology. 


>> Tokens are: 
[Boser, ,, B., ,, Sackinger, ,, E., ,, Bromley, ,, J., ,, LeCun, ,, Y., &, Jackel, ,, L., analog, neural,  , network, processor, programmable, topology, .] 

>> PoS Tags are: 
[('Boser', 'PROPN'), (',', 'PUNCT'), ('B.', 'PROPN'), (',', 'PUNCT'), ('Sackinger', 'PROPN'), (',', 'PUNCT'), ('E.', 'PROPN'), (',', 'PUNCT'), ('Bromley', 'PROPN'), (',', 'PUNCT'), ('J.', 'PROPN'), (',', 'PUNCT'), ('LeCun', 'PROPN'), (',', 'PUNCT'), ('Y.', 'PROPN'), ('&', 'CCONJ'), ('Jackel', 'PROPN'), (',', 'PUNCT'), ('L.', 'PROPN'), ('analog', 'ADJ'), ('neural', 'ADJ'), (' ', 'SPACE'), ('network', 'NOUN'), ('processor', 'NOUN'), ('programmable', 'ADJ'), ('topology', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Boser', 'ROOT'), (',', 'punct'), ('B.', 'conj'), (',', 'punct'), ('Sackinger', 'conj'), (',', 'punct'), ('E.', 'conj'), (',', 'punct'), ('Bromley', 'conj'), (',', 'punct'), ('J.', 'conj'), (',', 'punct'), ('LeCun', 'conj'), (',', 'punct'), ('Y.', 'conj'), ('&', 'cc'), ('Jackel', 'conj'), (',', 'punct'), ('L.', 'nmod'), ('analog', 'amod'), ('neural', 'amod'), (' ', 'compound'), ('network', 'compound'), ('processor', 'appos'), ('programmable', 'amod'), ('topology', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Boser, ,], [,, B.], [B., ,], [,, Sackinger], [Sackinger, ,], [,, E.], [E., ,], [,, Bromley], [Bromley, ,], [,, J.], [J., ,], [,, LeCun], [LeCun, ,], [,, Y.], [Y., &], [&, Jackel], [Jackel, ,], [,, L.], [L., analog], [analog, neural], [neural,  ], [ , network], [network, processor], [processor, programmable], [programmable, topology], [topology, .]]

>> Trigrams: 
[[Boser, ,, B.], [,, B., ,], [B., ,, Sackinger], [,, Sackinger, ,], [Sackinger, ,, E.], [,, E., ,], [E., ,, Bromley], [,, Bromley, ,], [Bromley, ,, J.], [,, J., ,], [J., ,, LeCun], [,, LeCun, ,], [LeCun, ,, Y.], [,, Y., &], [Y., &, Jackel], [&, Jackel, ,], [Jackel, ,, L.], [,, L., analog], [L., analog, neural], [analog, neural,  ], [neural,  , network], [ , network, processor], [network, processor, programmable], [processor, programmable, topology], [programmable, topology, .]]

>> Noun Phrases are: 
[Boser, B., Sackinger, E., Bromley, J., LeCun, Y., Jackel, L. An analog neural  network processor, programmable topology]

>> Named Entities are: 
[('Boser', 'PERSON'), ('B.', 'PERSON'), ('Bromley', 'GPE'), ('Y. & Jackel', 'ORG'), ('L. An', 'PERSON')]


============================ Sentence 686 =============================

J. Solid State Circuits 26,  2017–2025 (1991). 


>> Tokens are: 
[J., Solid, State, Circuits, 26, ,,  , 2017–2025, (, 1991, ), .] 

>> PoS Tags are: 
[('J.', 'PROPN'), ('Solid', 'PROPN'), ('State', 'PROPN'), ('Circuits', 'PROPN'), ('26', 'NUM'), (',', 'PUNCT'), (' ', 'SPACE'), ('2017–2025', 'NUM'), ('(', 'PUNCT'), ('1991', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('J.', 'compound'), ('Solid', 'compound'), ('State', 'compound'), ('Circuits', 'ROOT'), ('26', 'appos'), (',', 'punct'), (' ', 'appos'), ('2017–2025', 'nummod'), ('(', 'punct'), ('1991', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[J., Solid], [Solid, State], [State, Circuits], [Circuits, 26], [26, ,], [,,  ], [ , 2017–2025], [2017–2025, (], [(, 1991], [1991, )], [), .]]

>> Trigrams: 
[[J., Solid, State], [Solid, State, Circuits], [State, Circuits, 26], [Circuits, 26, ,], [26, ,,  ], [,,  , 2017–2025], [ , 2017–2025, (], [2017–2025, (, 1991], [(, 1991, )], [1991, ), .]]

>> Noun Phrases are: 
[J. Solid State Circuits]

>> Named Entities are: 
[('J. Solid State Circuits', 'PERSON'), ('26', 'DATE'), ('1991', 'DATE')]


============================ Sentence 687 =============================

  67. 


>> Tokens are: 
[  , 67, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('67', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('67', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 67], [67, .]]

>> Trigrams: 
[[  , 67, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('67', 'CARDINAL')]


============================ Sentence 688 =============================

Farabet, C. et al. 


>> Tokens are: 
[Farabet, ,, C., et, al, .] 

>> PoS Tags are: 
[('Farabet', 'PROPN'), (',', 'PUNCT'), ('C.', 'PROPN'), ('et', 'PROPN'), ('al', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Farabet', 'ROOT'), (',', 'punct'), ('C.', 'compound'), ('et', 'compound'), ('al', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[Farabet, ,], [,, C.], [C., et], [et, al], [al, .]]

>> Trigrams: 
[[Farabet, ,, C.], [,, C., et], [C., et, al], [et, al, .]]

>> Noun Phrases are: 
[Farabet, C. et al]

>> Named Entities are: 
[('Farabet', 'GPE')]


============================ Sentence 689 =============================

Large-scale FPGA-based convolutional networks. 


>> Tokens are: 
[Large, -, scale, FPGA, -, based, convolutional, networks, .] 

>> PoS Tags are: 
[('Large', 'ADJ'), ('-', 'PUNCT'), ('scale', 'NOUN'), ('FPGA', 'PROPN'), ('-', 'PUNCT'), ('based', 'VERB'), ('convolutional', 'ADJ'), ('networks', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Large', 'amod'), ('-', 'punct'), ('scale', 'nmod'), ('FPGA', 'npadvmod'), ('-', 'punct'), ('based', 'amod'), ('convolutional', 'amod'), ('networks', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Large, -], [-, scale], [scale, FPGA], [FPGA, -], [-, based], [based, convolutional], [convolutional, networks], [networks, .]]

>> Trigrams: 
[[Large, -, scale], [-, scale, FPGA], [scale, FPGA, -], [FPGA, -, based], [-, based, convolutional], [based, convolutional, networks], [convolutional, networks, .]]

>> Noun Phrases are: 
[Large-scale FPGA-based convolutional networks]

>> Named Entities are: 
[('FPGA', 'ORG')]


============================ Sentence 690 =============================

In Scaling  up Machine Learning: Parallel and Distributed Approaches (eds Bekkerman, R.,  Bilenko, M. & Langford, J.) 


>> Tokens are: 
[Scaling,  , Machine, Learning, :, Parallel, Distributed, Approaches, (, eds, Bekkerman, ,, R., ,,  , Bilenko, ,, M., &, Langford, ,, J., )] 

>> PoS Tags are: 
[('Scaling', 'VERB'), (' ', 'SPACE'), ('Machine', 'PROPN'), ('Learning', 'PROPN'), (':', 'PUNCT'), ('Parallel', 'ADJ'), ('Distributed', 'VERB'), ('Approaches', 'NOUN'), ('(', 'PUNCT'), ('eds', 'NOUN'), ('Bekkerman', 'PROPN'), (',', 'PUNCT'), ('R.', 'PROPN'), (',', 'PUNCT'), (' ', 'SPACE'), ('Bilenko', 'PROPN'), (',', 'PUNCT'), ('M.', 'PROPN'), ('&', 'CCONJ'), ('Langford', 'PROPN'), (',', 'PUNCT'), ('J.', 'PROPN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('Scaling', 'pobj'), (' ', 'dobj'), ('Machine', 'compound'), ('Learning', 'pobj'), (':', 'punct'), ('Parallel', 'pobj'), ('Distributed', 'conj'), ('Approaches', 'dobj'), ('(', 'punct'), ('eds', 'conj'), ('Bekkerman', 'dobj'), (',', 'punct'), ('R.', 'appos'), (',', 'punct'), (' ', 'conj'), ('Bilenko', 'npadvmod'), (',', 'punct'), ('M.', 'conj'), ('&', 'cc'), ('Langford', 'conj'), (',', 'punct'), ('J.', 'appos'), (')', 'punct')]

>> Bigrams: 
[[Scaling,  ], [ , Machine], [Machine, Learning], [Learning, :], [:, Parallel], [Parallel, Distributed], [Distributed, Approaches], [Approaches, (], [(, eds], [eds, Bekkerman], [Bekkerman, ,], [,, R.], [R., ,], [,,  ], [ , Bilenko], [Bilenko, ,], [,, M.], [M., &], [&, Langford], [Langford, ,], [,, J.], [J., )]]

>> Trigrams: 
[[Scaling,  , Machine], [ , Machine, Learning], [Machine, Learning, :], [Learning, :, Parallel], [:, Parallel, Distributed], [Parallel, Distributed, Approaches], [Distributed, Approaches, (], [Approaches, (, eds], [(, eds, Bekkerman], [eds, Bekkerman, ,], [Bekkerman, ,, R.], [,, R., ,], [R., ,,  ], [,,  , Bilenko], [ , Bilenko, ,], [Bilenko, ,, M.], [,, M., &], [M., &, Langford], [&, Langford, ,], [Langford, ,, J.], [,, J., )]]

>> Noun Phrases are: 
[Machine Learning, Approaches, eds, Bekkerman, R., J.]

>> Named Entities are: 
[('Machine Learning: Parallel and Distributed Approaches', 'WORK_OF_ART'), ('Bekkerman', 'PERSON'), ('R.', 'NORP'), ('M. & Langford', 'ORG'), ('J.', 'ORG')]


============================ Sentence 691 =============================

399–419 (Cambridge Univ. 


>> Tokens are: 
[399–419, (, Cambridge, Univ, .] 

>> PoS Tags are: 
[('399–419', 'NUM'), ('(', 'PUNCT'), ('Cambridge', 'PROPN'), ('Univ', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('399–419', 'ROOT'), ('(', 'punct'), ('Cambridge', 'compound'), ('Univ', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[399–419, (], [(, Cambridge], [Cambridge, Univ], [Univ, .]]

>> Trigrams: 
[[399–419, (, Cambridge], [(, Cambridge, Univ], [Cambridge, Univ, .]]

>> Noun Phrases are: 
[(Cambridge Univ]

>> Named Entities are: 
[('399–419', 'CARDINAL'), ('Cambridge Univ.', 'ORG')]


============================ Sentence 692 =============================

Press, 2011). 


>> Tokens are: 
[Press, ,, 2011, ), .] 

>> PoS Tags are: 
[('Press', 'NOUN'), (',', 'PUNCT'), ('2011', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Press', 'ROOT'), (',', 'punct'), ('2011', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Press, ,], [,, 2011], [2011, )], [), .]]

>> Trigrams: 
[[Press, ,, 2011], [,, 2011, )], [2011, ), .]]

>> Noun Phrases are: 
[Press]

>> Named Entities are: 
[('2011', 'DATE')]


============================ Sentence 693 =============================

  68. 


>> Tokens are: 
[  , 68, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('68', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('68', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 68], [68, .]]

>> Trigrams: 
[[  , 68, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('68', 'CARDINAL')]


============================ Sentence 694 =============================

Bengio, Y. Learning Deep Architectures for AI (Now, 2009). 


>> Tokens are: 
[Bengio, ,, Y., Learning, Deep, Architectures, AI, (, ,, 2009, ), .] 

>> PoS Tags are: 
[('Bengio', 'PROPN'), (',', 'PUNCT'), ('Y.', 'PROPN'), ('Learning', 'PROPN'), ('Deep', 'PROPN'), ('Architectures', 'PROPN'), ('AI', 'PROPN'), ('(', 'PUNCT'), (',', 'PUNCT'), ('2009', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Bengio', 'ROOT'), (',', 'punct'), ('Y.', 'compound'), ('Learning', 'compound'), ('Deep', 'compound'), ('Architectures', 'appos'), ('AI', 'pobj'), ('(', 'punct'), (',', 'punct'), ('2009', 'npadvmod'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Bengio, ,], [,, Y.], [Y., Learning], [Learning, Deep], [Deep, Architectures], [Architectures, AI], [AI, (], [(, ,], [,, 2009], [2009, )], [), .]]

>> Trigrams: 
[[Bengio, ,, Y.], [,, Y., Learning], [Y., Learning, Deep], [Learning, Deep, Architectures], [Deep, Architectures, AI], [Architectures, AI, (], [AI, (, ,], [(, ,, 2009], [,, 2009, )], [2009, ), .]]

>> Noun Phrases are: 
[Bengio, Y. Learning Deep Architectures, AI]

>> Named Entities are: 
[('Bengio', 'GPE'), ('Y. Learning Deep Architectures', 'PERSON'), ('2009', 'DATE')]


============================ Sentence 695 =============================

 69. 


>> Tokens are: 
[ , 69, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('69', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'ROOT'), ('69', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[ , 69], [69, .]]

>> Trigrams: 
[[ , 69, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('69', 'CARDINAL')]


============================ Sentence 696 =============================

Montufar, G. & Morton, J. When does a mixture of products contain a product of   mixtures? 


>> Tokens are: 
[Montufar, ,, G., &, Morton, ,, J., mixture, products, contain, product,   , mixtures, ?] 

>> PoS Tags are: 
[('Montufar', 'ADV'), (',', 'PUNCT'), ('G.', 'PROPN'), ('&', 'CCONJ'), ('Morton', 'PROPN'), (',', 'PUNCT'), ('J.', 'PROPN'), ('mixture', 'NOUN'), ('products', 'NOUN'), ('contain', 'VERB'), ('product', 'NOUN'), ('  ', 'SPACE'), ('mixtures', 'NOUN'), ('?', 'PUNCT')] 

>> Dependency Tags are: 
[('Montufar', 'advmod'), (',', 'punct'), ('G.', 'npadvmod'), ('&', 'cc'), ('Morton', 'conj'), (',', 'punct'), ('J.', 'appos'), ('mixture', 'nsubj'), ('products', 'pobj'), ('contain', 'ROOT'), ('product', 'dobj'), ('  ', 'compound'), ('mixtures', 'pobj'), ('?', 'punct')]

>> Bigrams: 
[[Montufar, ,], [,, G.], [G., &], [&, Morton], [Morton, ,], [,, J.], [J., mixture], [mixture, products], [products, contain], [contain, product], [product,   ], [  , mixtures], [mixtures, ?]]

>> Trigrams: 
[[Montufar, ,, G.], [,, G., &], [G., &, Morton], [&, Morton, ,], [Morton, ,, J.], [,, J., mixture], [J., mixture, products], [mixture, products, contain], [products, contain, product], [contain, product,   ], [product,   , mixtures], [  , mixtures, ?]]

>> Noun Phrases are: 
[J., a mixture, products, a product,   mixtures]

>> Named Entities are: 
[('G. & Morton', 'ORG'), ('J.', 'PERSON')]


============================ Sentence 697 =============================

J. Discrete Math. 


>> Tokens are: 
[J., Discrete, Math, .] 

>> PoS Tags are: 
[('J.', 'PROPN'), ('Discrete', 'PROPN'), ('Math', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('J.', 'compound'), ('Discrete', 'compound'), ('Math', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[J., Discrete], [Discrete, Math], [Math, .]]

>> Trigrams: 
[[J., Discrete, Math], [Discrete, Math, .]]

>> Noun Phrases are: 
[J. Discrete Math]

>> Named Entities are: 
[('J. Discrete Math', 'PERSON')]


============================ Sentence 698 =============================

29, 321–347 (2014). 


>> Tokens are: 
[29, ,, 321–347, (, 2014, ), .] 

>> PoS Tags are: 
[('29', 'NUM'), (',', 'PUNCT'), ('321–347', 'NUM'), ('(', 'PUNCT'), ('2014', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('29', 'ROOT'), (',', 'punct'), ('321–347', 'npadvmod'), ('(', 'punct'), ('2014', 'npadvmod'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[29, ,], [,, 321–347], [321–347, (], [(, 2014], [2014, )], [), .]]

>> Trigrams: 
[[29, ,, 321–347], [,, 321–347, (], [321–347, (, 2014], [(, 2014, )], [2014, ), .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('29', 'CARDINAL'), ('321–347', 'CARDINAL'), ('2014', 'DATE')]


============================ Sentence 699 =============================

 70. 


>> Tokens are: 
[ , 70, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('70', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'ROOT'), ('70', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[ , 70], [70, .]]

>> Trigrams: 
[[ , 70, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('70', 'CARDINAL')]


============================ Sentence 700 =============================

Montufar, G. F., Pascanu, R., Cho, K. & Bengio, Y. 


>> Tokens are: 
[Montufar, ,, G., F., ,, Pascanu, ,, R., ,, Cho, ,, K., &, Bengio, ,, Y.] 

>> PoS Tags are: 
[('Montufar', 'ADV'), (',', 'PUNCT'), ('G.', 'PROPN'), ('F.', 'PROPN'), (',', 'PUNCT'), ('Pascanu', 'PROPN'), (',', 'PUNCT'), ('R.', 'PROPN'), (',', 'PUNCT'), ('Cho', 'PROPN'), (',', 'PUNCT'), ('K.', 'PROPN'), ('&', 'CCONJ'), ('Bengio', 'PROPN'), (',', 'PUNCT'), ('Y.', 'PROPN')] 

>> Dependency Tags are: 
[('Montufar', 'advmod'), (',', 'punct'), ('G.', 'compound'), ('F.', 'ROOT'), (',', 'punct'), ('Pascanu', 'appos'), (',', 'punct'), ('R.', 'conj'), (',', 'punct'), ('Cho', 'conj'), (',', 'punct'), ('K.', 'conj'), ('&', 'cc'), ('Bengio', 'conj'), (',', 'punct'), ('Y.', 'punct')]

>> Bigrams: 
[[Montufar, ,], [,, G.], [G., F.], [F., ,], [,, Pascanu], [Pascanu, ,], [,, R.], [R., ,], [,, Cho], [Cho, ,], [,, K.], [K., &], [&, Bengio], [Bengio, ,], [,, Y.]]

>> Trigrams: 
[[Montufar, ,, G.], [,, G., F.], [G., F., ,], [F., ,, Pascanu], [,, Pascanu, ,], [Pascanu, ,, R.], [,, R., ,], [R., ,, Cho], [,, Cho, ,], [Cho, ,, K.], [,, K., &], [K., &, Bengio], [&, Bengio, ,], [Bengio, ,, Y.]]

>> Noun Phrases are: 
[Montufar, G. F., Pascanu, R., Cho, K., Bengio]

>> Named Entities are: 
[('G. F.', 'PERSON'), ('Pascanu', 'ORG'), ('R.', 'NORP'), ('K. & Bengio', 'ORG'), ('Y.', 'PERSON')]


============================ Sentence 701 =============================

On the number of linear regions   of deep neural networks. 


>> Tokens are: 
[number, linear, regions,   , deep, neural, networks, .] 

>> PoS Tags are: 
[('number', 'NOUN'), ('linear', 'ADJ'), ('regions', 'NOUN'), ('  ', 'SPACE'), ('deep', 'ADJ'), ('neural', 'ADJ'), ('networks', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('number', 'pobj'), ('linear', 'amod'), ('regions', 'pobj'), ('  ', 'appos'), ('deep', 'amod'), ('neural', 'amod'), ('networks', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[number, linear], [linear, regions], [regions,   ], [  , deep], [deep, neural], [neural, networks], [networks, .]]

>> Trigrams: 
[[number, linear, regions], [linear, regions,   ], [regions,   , deep], [  , deep, neural], [deep, neural, networks], [neural, networks, .]]

>> Noun Phrases are: 
[the number, linear regions, deep neural networks]

>> Named Entities are: 
[]


============================ Sentence 702 =============================

In Proc. 


>> Tokens are: 
[Proc, .] 

>> PoS Tags are: 
[('Proc', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Proc', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Proc, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Proc]

>> Named Entities are: 
[]


============================ Sentence 703 =============================

Advances in Neural Information Processing   


>> Tokens are: 
[Advances, Neural, Information, Processing,  ] 

>> PoS Tags are: 
[('Advances', 'NOUN'), ('Neural', 'PROPN'), ('Information', 'PROPN'), ('Processing', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Advances', 'ROOT'), ('Neural', 'compound'), ('Information', 'compound'), ('Processing', 'pobj'), (' ', 'punct')]

>> Bigrams: 
[[Advances, Neural], [Neural, Information], [Information, Processing], [Processing,  ]]

>> Trigrams: 
[[Advances, Neural, Information], [Neural, Information, Processing], [Information, Processing,  ]]

>> Noun Phrases are: 
[Advances, Neural Information Processing]

>> Named Entities are: 
[('Neural Information Processing  ', 'ORG')]


============================ Sentence 704 =============================

Systems 27 2924–2932 (2014). 


>> Tokens are: 
[Systems, 27, 2924–2932, (, 2014, ), .] 

>> PoS Tags are: 
[('Systems', 'PROPN'), ('27', 'NUM'), ('2924–2932', 'NUM'), ('(', 'PUNCT'), ('2014', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Systems', 'ROOT'), ('27', 'nummod'), ('2924–2932', 'appos'), ('(', 'punct'), ('2014', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Systems, 27], [27, 2924–2932], [2924–2932, (], [(, 2014], [2014, )], [), .]]

>> Trigrams: 
[[Systems, 27, 2924–2932], [27, 2924–2932, (], [2924–2932, (, 2014], [(, 2014, )], [2014, ), .]]

>> Noun Phrases are: 
[Systems]

>> Named Entities are: 
[('27 2924–2932', 'DATE'), ('2014', 'DATE')]


============================ Sentence 705 =============================

  71. 


>> Tokens are: 
[  , 71, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('71', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('71', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 71], [71, .]]

>> Trigrams: 
[[  , 71, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('71', 'CARDINAL')]


============================ Sentence 706 =============================

Bengio, Y., Ducharme, R. & Vincent, P. A neural probabilistic language model. 


>> Tokens are: 
[Bengio, ,, Y., ,, Ducharme, ,, R., &, Vincent, ,, P., neural, probabilistic, language, model, .] 

>> PoS Tags are: 
[('Bengio', 'PROPN'), (',', 'PUNCT'), ('Y.', 'PROPN'), (',', 'PUNCT'), ('Ducharme', 'PROPN'), (',', 'PUNCT'), ('R.', 'PROPN'), ('&', 'CCONJ'), ('Vincent', 'PROPN'), (',', 'PUNCT'), ('P.', 'PROPN'), ('neural', 'ADJ'), ('probabilistic', 'ADJ'), ('language', 'NOUN'), ('model', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Bengio', 'ROOT'), (',', 'punct'), ('Y.', 'conj'), (',', 'punct'), ('Ducharme', 'conj'), (',', 'punct'), ('R.', 'conj'), ('&', 'cc'), ('Vincent', 'conj'), (',', 'punct'), ('P.', 'compound'), ('neural', 'amod'), ('probabilistic', 'amod'), ('language', 'compound'), ('model', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[Bengio, ,], [,, Y.], [Y., ,], [,, Ducharme], [Ducharme, ,], [,, R.], [R., &], [&, Vincent], [Vincent, ,], [,, P.], [P., neural], [neural, probabilistic], [probabilistic, language], [language, model], [model, .]]

>> Trigrams: 
[[Bengio, ,, Y.], [,, Y., ,], [Y., ,, Ducharme], [,, Ducharme, ,], [Ducharme, ,, R.], [,, R., &], [R., &, Vincent], [&, Vincent, ,], [Vincent, ,, P.], [,, P., neural], [P., neural, probabilistic], [neural, probabilistic, language], [probabilistic, language, model], [language, model, .]]

>> Noun Phrases are: 
[Bengio, Y., Ducharme, R., Vincent, P. A neural probabilistic language model]

>> Named Entities are: 
[('Bengio', 'PERSON'), ('R. & Vincent', 'ORG')]


============================ Sentence 707 =============================

In  Proc. 


>> Tokens are: 
[ , Proc, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('Proc', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'pobj'), ('Proc', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[ , Proc], [Proc, .]]

>> Trigrams: 
[[ , Proc, .]]

>> Noun Phrases are: 
[Proc]

>> Named Entities are: 
[]


============================ Sentence 708 =============================

Advances in Neural Information Processing Systems 13 932–938 (2001). 


>> Tokens are: 
[Advances, Neural, Information, Processing, Systems, 13, 932–938, (, 2001, ), .] 

>> PoS Tags are: 
[('Advances', 'NOUN'), ('Neural', 'PROPN'), ('Information', 'PROPN'), ('Processing', 'PROPN'), ('Systems', 'PROPN'), ('13', 'NUM'), ('932–938', 'NUM'), ('(', 'PUNCT'), ('2001', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Advances', 'ROOT'), ('Neural', 'compound'), ('Information', 'compound'), ('Processing', 'compound'), ('Systems', 'pobj'), ('13', 'nummod'), ('932–938', 'appos'), ('(', 'punct'), ('2001', 'npadvmod'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Advances, Neural], [Neural, Information], [Information, Processing], [Processing, Systems], [Systems, 13], [13, 932–938], [932–938, (], [(, 2001], [2001, )], [), .]]

>> Trigrams: 
[[Advances, Neural, Information], [Neural, Information, Processing], [Information, Processing, Systems], [Processing, Systems, 13], [Systems, 13, 932–938], [13, 932–938, (], [932–938, (, 2001], [(, 2001, )], [2001, ), .]]

>> Noun Phrases are: 
[Advances, Neural Information Processing Systems]

>> Named Entities are: 
[('Neural Information Processing Systems', 'ORG'), ('2001', 'DATE')]


============================ Sentence 709 =============================

   This paper introduced neural language models, which learn to convert a word  symbol into a word vector or word embedding composed of learned semantic  features in order to predict the next word in a sequence. 


>> Tokens are: 
[   , paper, introduced, neural, language, models, ,, learn, convert, word,  , symbol, word, vector, word, embedding, composed, learned, semantic,  , features, order, predict, word, sequence, .] 

>> PoS Tags are: 
[('   ', 'SPACE'), ('paper', 'NOUN'), ('introduced', 'VERB'), ('neural', 'ADJ'), ('language', 'NOUN'), ('models', 'NOUN'), (',', 'PUNCT'), ('learn', 'VERB'), ('convert', 'VERB'), ('word', 'NOUN'), (' ', 'SPACE'), ('symbol', 'NOUN'), ('word', 'NOUN'), ('vector', 'NOUN'), ('word', 'NOUN'), ('embedding', 'VERB'), ('composed', 'VERB'), ('learned', 'VERB'), ('semantic', 'ADJ'), (' ', 'SPACE'), ('features', 'NOUN'), ('order', 'NOUN'), ('predict', 'VERB'), ('word', 'NOUN'), ('sequence', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('   ', 'dep'), ('paper', 'nsubj'), ('introduced', 'ROOT'), ('neural', 'amod'), ('language', 'compound'), ('models', 'dobj'), (',', 'punct'), ('learn', 'relcl'), ('convert', 'xcomp'), ('word', 'dobj'), (' ', 'nummod'), ('symbol', 'dobj'), ('word', 'compound'), ('vector', 'pobj'), ('word', 'conj'), ('embedding', 'acl'), ('composed', 'advcl'), ('learned', 'amod'), ('semantic', 'amod'), (' ', 'compound'), ('features', 'pobj'), ('order', 'pobj'), ('predict', 'acl'), ('word', 'dobj'), ('sequence', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[   , paper], [paper, introduced], [introduced, neural], [neural, language], [language, models], [models, ,], [,, learn], [learn, convert], [convert, word], [word,  ], [ , symbol], [symbol, word], [word, vector], [vector, word], [word, embedding], [embedding, composed], [composed, learned], [learned, semantic], [semantic,  ], [ , features], [features, order], [order, predict], [predict, word], [word, sequence], [sequence, .]]

>> Trigrams: 
[[   , paper, introduced], [paper, introduced, neural], [introduced, neural, language], [neural, language, models], [language, models, ,], [models, ,, learn], [,, learn, convert], [learn, convert, word], [convert, word,  ], [word,  , symbol], [ , symbol, word], [symbol, word, vector], [word, vector, word], [vector, word, embedding], [word, embedding, composed], [embedding, composed, learned], [composed, learned, semantic], [learned, semantic,  ], [semantic,  , features], [ , features, order], [features, order, predict], [order, predict, word], [predict, word, sequence], [word, sequence, .]]

>> Noun Phrases are: 
[This paper, neural language models, a word, symbol, a word vector, word, learned semantic  features, order, the next word, a sequence]

>> Named Entities are: 
[]


============================ Sentence 710 =============================

 72. 


>> Tokens are: 
[ , 72, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('72', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'ROOT'), ('72', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[ , 72], [72, .]]

>> Trigrams: 
[[ , 72, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('72', 'CARDINAL')]


============================ Sentence 711 =============================

Cho, K. et al. 


>> Tokens are: 
[Cho, ,, K., et, al, .] 

>> PoS Tags are: 
[('Cho', 'PROPN'), (',', 'PUNCT'), ('K.', 'PROPN'), ('et', 'NOUN'), ('al', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Cho', 'nmod'), (',', 'punct'), ('K.', 'compound'), ('et', 'compound'), ('al', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Cho, ,], [,, K.], [K., et], [et, al], [al, .]]

>> Trigrams: 
[[Cho, ,, K.], [,, K., et], [K., et, al], [et, al, .]]

>> Noun Phrases are: 
[Cho, K. et al]

>> Named Entities are: 
[('Cho', 'PERSON')]


============================ Sentence 712 =============================

Learning phrase representations using RNN encoder-decoder   2 8  M A Y  2 0 1 5  |   


>> Tokens are: 
[Learning, phrase, representations, RNN, encoder, -, decoder,   , 2, 8,  , M, Y,  , 2, 0, 1, 5,  , |,  ] 

>> PoS Tags are: 
[('Learning', 'VERB'), ('phrase', 'NOUN'), ('representations', 'NOUN'), ('RNN', 'PROPN'), ('encoder', 'NOUN'), ('-', 'PUNCT'), ('decoder', 'NOUN'), ('  ', 'SPACE'), ('2', 'NUM'), ('8', 'NUM'), (' ', 'SPACE'), ('M', 'PROPN'), ('Y', 'PROPN'), (' ', 'SPACE'), ('2', 'NUM'), ('0', 'NUM'), ('1', 'NUM'), ('5', 'NUM'), (' ', 'SPACE'), ('|', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Learning', 'compound'), ('phrase', 'compound'), ('representations', 'nsubj'), ('RNN', 'compound'), ('encoder', 'dobj'), ('-', 'punct'), ('decoder', 'ROOT'), ('  ', 'quantmod'), ('2', 'compound'), ('8', 'nummod'), (' ', 'compound'), ('M', 'compound'), ('Y', 'nmod'), (' ', 'dobj'), ('2', 'quantmod'), ('0', 'quantmod'), ('1', 'compound'), ('5', 'nummod'), (' ', 'punct'), ('|', 'npadvmod'), (' ', 'punct')]

>> Bigrams: 
[[Learning, phrase], [phrase, representations], [representations, RNN], [RNN, encoder], [encoder, -], [-, decoder], [decoder,   ], [  , 2], [2, 8], [8,  ], [ , M], [M, Y], [Y,  ], [ , 2], [2, 0], [0, 1], [1, 5], [5,  ], [ , |], [|,  ]]

>> Trigrams: 
[[Learning, phrase, representations], [phrase, representations, RNN], [representations, RNN, encoder], [RNN, encoder, -], [encoder, -, decoder], [-, decoder,   ], [decoder,   , 2], [  , 2, 8], [2, 8,  ], [8,  , M], [ , M, Y], [M, Y,  ], [Y,  , 2], [ , 2, 0], [2, 0, 1], [0, 1, 5], [1, 5,  ], [5,  , |], [ , |,  ]]

>> Noun Phrases are: 
[Learning phrase representations, RNN encoder]

>> Named Entities are: 
[('RNN', 'ORG'), ('2 8  M A Y  ', 'TIME'), ('2', 'CARDINAL')]


============================ Sentence 713 =============================

V O 


>> Tokens are: 
[V, O] 

>> PoS Tags are: 
[('V', 'NOUN'), ('O', 'NOUN')] 

>> Dependency Tags are: 
[('V', 'compound'), ('O', 'ROOT')]

>> Bigrams: 
[[V, O]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[V O]

>> Named Entities are: 
[]


============================ Sentence 714 =============================

L  5 2 1  |   


>> Tokens are: 
[L,  , 5, 2, 1,  , |,  ] 

>> PoS Tags are: 
[('L', 'NOUN'), (' ', 'SPACE'), ('5', 'NUM'), ('2', 'NUM'), ('1', 'NUM'), (' ', 'SPACE'), ('|', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('L', 'ROOT'), (' ', 'appos'), ('5', 'compound'), ('2', 'compound'), ('1', 'nummod'), (' ', 'nummod'), ('|', 'npadvmod'), (' ', 'punct')]

>> Bigrams: 
[[L,  ], [ , 5], [5, 2], [2, 1], [1,  ], [ , |], [|,  ]]

>> Trigrams: 
[[L,  , 5], [ , 5, 2], [5, 2, 1], [2, 1,  ], [1,  , |], [ , |,  ]]

>> Noun Phrases are: 
[L]

>> Named Entities are: 
[]


============================ Sentence 715 =============================

N A T U R E  |  4 4 3  REVIEW INSIGHT  © 2015 Macmillan Publishers Limited. 


>> Tokens are: 
[N, T, U, R, E,  , |,  , 4, 4, 3,  , REVIEW, INSIGHT,  , ©, 2015, Macmillan, Publishers, Limited, .] 

>> PoS Tags are: 
[('N', 'PROPN'), ('T', 'NOUN'), ('U', 'NOUN'), ('R', 'NOUN'), ('E', 'NOUN'), (' ', 'SPACE'), ('|', 'NOUN'), (' ', 'SPACE'), ('4', 'NUM'), ('4', 'NUM'), ('3', 'NUM'), (' ', 'SPACE'), ('REVIEW', 'PROPN'), ('INSIGHT', 'PROPN'), (' ', 'SPACE'), ('©', 'ADJ'), ('2015', 'NUM'), ('Macmillan', 'PROPN'), ('Publishers', 'PROPN'), ('Limited', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('N', 'compound'), ('T', 'compound'), ('U', 'compound'), ('R', 'compound'), ('E', 'ROOT'), (' ', 'appos'), ('|', 'npadvmod'), (' ', 'prep'), ('4', 'nummod'), ('4', 'compound'), ('3', 'nummod'), (' ', 'compound'), ('REVIEW', 'compound'), ('INSIGHT', 'dobj'), (' ', 'nmod'), ('©', 'nmod'), ('2015', 'nummod'), ('Macmillan', 'compound'), ('Publishers', 'compound'), ('Limited', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[N, T], [T, U], [U, R], [R, E], [E,  ], [ , |], [|,  ], [ , 4], [4, 4], [4, 3], [3,  ], [ , REVIEW], [REVIEW, INSIGHT], [INSIGHT,  ], [ , ©], [©, 2015], [2015, Macmillan], [Macmillan, Publishers], [Publishers, Limited], [Limited, .]]

>> Trigrams: 
[[N, T, U], [T, U, R], [U, R, E], [R, E,  ], [E,  , |], [ , |,  ], [|,  , 4], [ , 4, 4], [4, 4, 3], [4, 3,  ], [3,  , REVIEW], [ , REVIEW, INSIGHT], [REVIEW, INSIGHT,  ], [INSIGHT,  , ©], [ , ©, 2015], [©, 2015, Macmillan], [2015, Macmillan, Publishers], [Macmillan, Publishers, Limited], [Publishers, Limited, .]]

>> Noun Phrases are: 
[N A T U R E, 4 4 3  REVIEW INSIGHT,  © 2015 Macmillan Publishers Limited]

>> Named Entities are: 
[('4 4 3', 'CARDINAL'), ('2015', 'DATE'), ('Macmillan Publishers Limited', 'ORG')]


============================ Sentence 716 =============================

All rights reserved    for statistical machine translation. 


>> Tokens are: 
[rights, reserved,    , statistical, machine, translation, .] 

>> PoS Tags are: 
[('rights', 'NOUN'), ('reserved', 'VERB'), ('   ', 'SPACE'), ('statistical', 'ADJ'), ('machine', 'NOUN'), ('translation', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('rights', 'nsubj'), ('reserved', 'ROOT'), ('   ', 'dobj'), ('statistical', 'amod'), ('machine', 'compound'), ('translation', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[rights, reserved], [reserved,    ], [   , statistical], [statistical, machine], [machine, translation], [translation, .]]

>> Trigrams: 
[[rights, reserved,    ], [reserved,    , statistical], [   , statistical, machine], [statistical, machine, translation], [machine, translation, .]]

>> Noun Phrases are: 
[All rights, statistical machine translation]

>> Named Entities are: 
[]


============================ Sentence 717 =============================

In Proc. 


>> Tokens are: 
[Proc, .] 

>> PoS Tags are: 
[('Proc', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Proc', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Proc, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Proc]

>> Named Entities are: 
[]


============================ Sentence 718 =============================

Conference on Empirical Methods in  Natural Language Processing 1724–1734 (2014). 


>> Tokens are: 
[Conference, Empirical, Methods,  , Natural, Language, Processing, 1724–1734, (, 2014, ), .] 

>> PoS Tags are: 
[('Conference', 'NOUN'), ('Empirical', 'PROPN'), ('Methods', 'PROPN'), (' ', 'SPACE'), ('Natural', 'PROPN'), ('Language', 'PROPN'), ('Processing', 'NOUN'), ('1724–1734', 'NUM'), ('(', 'PUNCT'), ('2014', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Conference', 'ROOT'), ('Empirical', 'compound'), ('Methods', 'pobj'), (' ', 'pobj'), ('Natural', 'compound'), ('Language', 'compound'), ('Processing', 'appos'), ('1724–1734', 'nummod'), ('(', 'punct'), ('2014', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Conference, Empirical], [Empirical, Methods], [Methods,  ], [ , Natural], [Natural, Language], [Language, Processing], [Processing, 1724–1734], [1724–1734, (], [(, 2014], [2014, )], [), .]]

>> Trigrams: 
[[Conference, Empirical, Methods], [Empirical, Methods,  ], [Methods,  , Natural], [ , Natural, Language], [Natural, Language, Processing], [Language, Processing, 1724–1734], [Processing, 1724–1734, (], [1724–1734, (, 2014], [(, 2014, )], [2014, ), .]]

>> Noun Phrases are: 
[Conference, Empirical Methods, Natural Language Processing]

>> Named Entities are: 
[('2014', 'DATE')]


============================ Sentence 719 =============================

   73. 


>> Tokens are: 
[   , 73, .] 

>> PoS Tags are: 
[('   ', 'SPACE'), ('73', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('   ', 'ROOT'), ('73', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[   , 73], [73, .]]

>> Trigrams: 
[[   , 73, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 720 =============================

Schwenk, H. Continuous space language models. 


>> Tokens are: 
[Schwenk, ,, H., Continuous, space, language, models, .] 

>> PoS Tags are: 
[('Schwenk', 'PROPN'), (',', 'PUNCT'), ('H.', 'PROPN'), ('Continuous', 'ADJ'), ('space', 'NOUN'), ('language', 'NOUN'), ('models', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Schwenk', 'nmod'), (',', 'punct'), ('H.', 'nmod'), ('Continuous', 'amod'), ('space', 'compound'), ('language', 'compound'), ('models', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Schwenk, ,], [,, H.], [H., Continuous], [Continuous, space], [space, language], [language, models], [models, .]]

>> Trigrams: 
[[Schwenk, ,, H.], [,, H., Continuous], [H., Continuous, space], [Continuous, space, language], [space, language, models], [language, models, .]]

>> Noun Phrases are: 
[Schwenk, H. Continuous space language models]

>> Named Entities are: 
[]


============================ Sentence 721 =============================

Computer Speech Lang. 


>> Tokens are: 
[Computer, Speech, Lang, .] 

>> PoS Tags are: 
[('Computer', 'PROPN'), ('Speech', 'PROPN'), ('Lang', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Computer', 'compound'), ('Speech', 'compound'), ('Lang', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Computer, Speech], [Speech, Lang], [Lang, .]]

>> Trigrams: 
[[Computer, Speech, Lang], [Speech, Lang, .]]

>> Noun Phrases are: 
[Computer Speech Lang]

>> Named Entities are: 
[('Speech Lang', 'PERSON')]


============================ Sentence 722 =============================

21,   


>> Tokens are: 
[21, ,,  ] 

>> PoS Tags are: 
[('21', 'NUM'), (',', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('21', 'ROOT'), (',', 'punct'), (' ', 'prep')]

>> Bigrams: 
[[21, ,], [,,  ]]

>> Trigrams: 
[[21, ,,  ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('21', 'DATE')]


============================ Sentence 723 =============================

492–518 (2007). 


>> Tokens are: 
[492–518, (, 2007, ), .] 

>> PoS Tags are: 
[('492–518', 'NUM'), ('(', 'PUNCT'), ('2007', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('492–518', 'ROOT'), ('(', 'punct'), ('2007', 'npadvmod'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[492–518, (], [(, 2007], [2007, )], [), .]]

>> Trigrams: 
[[492–518, (, 2007], [(, 2007, )], [2007, ), .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('492–518', 'CARDINAL'), ('2007', 'DATE')]


============================ Sentence 724 =============================

  74. 


>> Tokens are: 
[  , 74, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('74', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('74', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 74], [74, .]]

>> Trigrams: 
[[  , 74, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('74', 'DATE')]


============================ Sentence 725 =============================

Socher, R., Lin, C. C-Y., Manning, C. & Ng, A. Y. Parsing natural scenes and  natural language with recursive neural networks. 


>> Tokens are: 
[Socher, ,, R., ,, Lin, ,, C., C, -, Y., ,, Manning, ,, C., &, Ng, ,, A., Y., Parsing, natural, scenes,  , natural, language, recursive, neural, networks, .] 

>> PoS Tags are: 
[('Socher', 'PROPN'), (',', 'PUNCT'), ('R.', 'PROPN'), (',', 'PUNCT'), ('Lin', 'PROPN'), (',', 'PUNCT'), ('C.', 'PROPN'), ('C', 'PROPN'), ('-', 'PUNCT'), ('Y.', 'PROPN'), (',', 'PUNCT'), ('Manning', 'PROPN'), (',', 'PUNCT'), ('C.', 'PROPN'), ('&', 'CCONJ'), ('Ng', 'PROPN'), (',', 'PUNCT'), ('A.', 'PROPN'), ('Y.', 'PROPN'), ('Parsing', 'PROPN'), ('natural', 'ADJ'), ('scenes', 'NOUN'), (' ', 'SPACE'), ('natural', 'ADJ'), ('language', 'NOUN'), ('recursive', 'ADJ'), ('neural', 'ADJ'), ('networks', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Socher', 'ROOT'), (',', 'punct'), ('R.', 'appos'), (',', 'punct'), ('Lin', 'npadvmod'), (',', 'punct'), ('C.', 'compound'), ('C', 'compound'), ('-', 'punct'), ('Y.', 'conj'), (',', 'punct'), ('Manning', 'conj'), (',', 'punct'), ('C.', 'conj'), ('&', 'cc'), ('Ng', 'conj'), (',', 'punct'), ('A.', 'compound'), ('Y.', 'compound'), ('Parsing', 'amod'), ('natural', 'amod'), ('scenes', 'appos'), (' ', 'nmod'), ('natural', 'amod'), ('language', 'conj'), ('recursive', 'amod'), ('neural', 'amod'), ('networks', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Socher, ,], [,, R.], [R., ,], [,, Lin], [Lin, ,], [,, C.], [C., C], [C, -], [-, Y.], [Y., ,], [,, Manning], [Manning, ,], [,, C.], [C., &], [&, Ng], [Ng, ,], [,, A.], [A., Y.], [Y., Parsing], [Parsing, natural], [natural, scenes], [scenes,  ], [ , natural], [natural, language], [language, recursive], [recursive, neural], [neural, networks], [networks, .]]

>> Trigrams: 
[[Socher, ,, R.], [,, R., ,], [R., ,, Lin], [,, Lin, ,], [Lin, ,, C.], [,, C., C], [C., C, -], [C, -, Y.], [-, Y., ,], [Y., ,, Manning], [,, Manning, ,], [Manning, ,, C.], [,, C., &], [C., &, Ng], [&, Ng, ,], [Ng, ,, A.], [,, A., Y.], [A., Y., Parsing], [Y., Parsing, natural], [Parsing, natural, scenes], [natural, scenes,  ], [scenes,  , natural], [ , natural, language], [natural, language, recursive], [language, recursive, neural], [recursive, neural, networks], [neural, networks, .]]

>> Noun Phrases are: 
[Socher, R., A. Y. Parsing natural scenes,  natural language, recursive neural networks]

>> Named Entities are: 
[('R.', 'NORP'), ('A. Y. Parsing', 'PERSON')]


============================ Sentence 726 =============================

In Proc. 


>> Tokens are: 
[Proc, .] 

>> PoS Tags are: 
[('Proc', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Proc', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Proc, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Proc]

>> Named Entities are: 
[]


============================ Sentence 727 =============================

International  Conference on Machine Learning 129–136 (2011). 


>> Tokens are: 
[International,  , Conference, Machine, Learning, 129–136, (, 2011, ), .] 

>> PoS Tags are: 
[('International', 'PROPN'), (' ', 'SPACE'), ('Conference', 'PROPN'), ('Machine', 'PROPN'), ('Learning', 'PROPN'), ('129–136', 'PROPN'), ('(', 'PUNCT'), ('2011', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('International', 'nmod'), (' ', 'compound'), ('Conference', 'ROOT'), ('Machine', 'compound'), ('Learning', 'pobj'), ('129–136', 'appos'), ('(', 'punct'), ('2011', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[International,  ], [ , Conference], [Conference, Machine], [Machine, Learning], [Learning, 129–136], [129–136, (], [(, 2011], [2011, )], [), .]]

>> Trigrams: 
[[International,  , Conference], [ , Conference, Machine], [Conference, Machine, Learning], [Machine, Learning, 129–136], [Learning, 129–136, (], [129–136, (, 2011], [(, 2011, )], [2011, ), .]]

>> Noun Phrases are: 
[International  Conference, Machine Learning, 129–136]

>> Named Entities are: 
[('129–136', 'CARDINAL'), ('2011', 'DATE')]


============================ Sentence 728 =============================

  75. 


>> Tokens are: 
[  , 75, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('75', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('75', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 75], [75, .]]

>> Trigrams: 
[[  , 75, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('75', 'CARDINAL')]


============================ Sentence 729 =============================

Mikolov, T., Sutskever, I., Chen, K., Corrado, G. & Dean, J. Distributed  representations of words and phrases and their compositionality. 


>> Tokens are: 
[Mikolov, ,, T., ,, Sutskever, ,, I., ,, Chen, ,, K., ,, Corrado, ,, G., &, Dean, ,, J., Distributed,  , representations, words, phrases, compositionality, .] 

>> PoS Tags are: 
[('Mikolov', 'PROPN'), (',', 'PUNCT'), ('T.', 'PROPN'), (',', 'PUNCT'), ('Sutskever', 'PROPN'), (',', 'PUNCT'), ('I.', 'PROPN'), (',', 'PUNCT'), ('Chen', 'PROPN'), (',', 'PUNCT'), ('K.', 'PROPN'), (',', 'PUNCT'), ('Corrado', 'PROPN'), (',', 'PUNCT'), ('G.', 'PROPN'), ('&', 'CCONJ'), ('Dean', 'PROPN'), (',', 'PUNCT'), ('J.', 'PROPN'), ('Distributed', 'VERB'), (' ', 'SPACE'), ('representations', 'NOUN'), ('words', 'NOUN'), ('phrases', 'NOUN'), ('compositionality', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Mikolov', 'npadvmod'), (',', 'punct'), ('T.', 'conj'), (',', 'punct'), ('Sutskever', 'conj'), (',', 'punct'), ('I.', 'conj'), (',', 'punct'), ('Chen', 'conj'), (',', 'punct'), ('K.', 'conj'), (',', 'punct'), ('Corrado', 'conj'), (',', 'punct'), ('G.', 'conj'), ('&', 'cc'), ('Dean', 'conj'), (',', 'punct'), ('J.', 'nsubj'), ('Distributed', 'ROOT'), (' ', 'dobj'), ('representations', 'dobj'), ('words', 'pobj'), ('phrases', 'conj'), ('compositionality', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[Mikolov, ,], [,, T.], [T., ,], [,, Sutskever], [Sutskever, ,], [,, I.], [I., ,], [,, Chen], [Chen, ,], [,, K.], [K., ,], [,, Corrado], [Corrado, ,], [,, G.], [G., &], [&, Dean], [Dean, ,], [,, J.], [J., Distributed], [Distributed,  ], [ , representations], [representations, words], [words, phrases], [phrases, compositionality], [compositionality, .]]

>> Trigrams: 
[[Mikolov, ,, T.], [,, T., ,], [T., ,, Sutskever], [,, Sutskever, ,], [Sutskever, ,, I.], [,, I., ,], [I., ,, Chen], [,, Chen, ,], [Chen, ,, K.], [,, K., ,], [K., ,, Corrado], [,, Corrado, ,], [Corrado, ,, G.], [,, G., &], [G., &, Dean], [&, Dean, ,], [Dean, ,, J.], [,, J., Distributed], [J., Distributed,  ], [Distributed,  , representations], [ , representations, words], [representations, words, phrases], [words, phrases, compositionality], [phrases, compositionality, .]]

>> Noun Phrases are: 
[J., representations, words, phrases, their compositionality]

>> Named Entities are: 
[('Sutskever', 'ORG'), ('I.', 'ORG'), ('Chen', 'PERSON'), ('K.', 'NORP'), ('Corrado', 'GPE'), ('J. Distributed', 'PERSON')]


============================ Sentence 730 =============================

In Proc.   


>> Tokens are: 
[Proc, .,  ] 

>> PoS Tags are: 
[('Proc', 'PROPN'), ('.', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Proc', 'pobj'), ('.', 'punct'), (' ', 'pobj')]

>> Bigrams: 
[[Proc, .], [.,  ]]

>> Trigrams: 
[[Proc, .,  ]]

>> Noun Phrases are: 
[Proc]

>> Named Entities are: 
[]


============================ Sentence 731 =============================

Advances in Neural Information Processing Systems 26 3111–3119 (2013). 


>> Tokens are: 
[Advances, Neural, Information, Processing, Systems, 26, 3111–3119, (, 2013, ), .] 

>> PoS Tags are: 
[('Advances', 'NOUN'), ('Neural', 'PROPN'), ('Information', 'PROPN'), ('Processing', 'PROPN'), ('Systems', 'PROPN'), ('26', 'NUM'), ('3111–3119', 'NOUN'), ('(', 'PUNCT'), ('2013', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Advances', 'ROOT'), ('Neural', 'compound'), ('Information', 'compound'), ('Processing', 'compound'), ('Systems', 'pobj'), ('26', 'nummod'), ('3111–3119', 'appos'), ('(', 'punct'), ('2013', 'npadvmod'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Advances, Neural], [Neural, Information], [Information, Processing], [Processing, Systems], [Systems, 26], [26, 3111–3119], [3111–3119, (], [(, 2013], [2013, )], [), .]]

>> Trigrams: 
[[Advances, Neural, Information], [Neural, Information, Processing], [Information, Processing, Systems], [Processing, Systems, 26], [Systems, 26, 3111–3119], [26, 3111–3119, (], [3111–3119, (, 2013], [(, 2013, )], [2013, ), .]]

>> Noun Phrases are: 
[Advances, Neural Information Processing Systems, 26 3111–3119]

>> Named Entities are: 
[('Neural Information Processing Systems', 'ORG'), ('26 3111–3119', 'DATE'), ('2013', 'DATE')]


============================ Sentence 732 =============================

  76. 


>> Tokens are: 
[  , 76, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('76', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('76', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 76], [76, .]]

>> Trigrams: 
[[  , 76, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('76', 'DATE')]


============================ Sentence 733 =============================

Bahdanau, D., Cho, K. & Bengio, Y. Neural machine translation by jointly  learning to align and translate. 


>> Tokens are: 
[Bahdanau, ,, D., ,, Cho, ,, K., &, Bengio, ,, Y., Neural, machine, translation, jointly,  , learning, align, translate, .] 

>> PoS Tags are: 
[('Bahdanau', 'PROPN'), (',', 'PUNCT'), ('D.', 'PROPN'), (',', 'PUNCT'), ('Cho', 'PROPN'), (',', 'PUNCT'), ('K.', 'PROPN'), ('&', 'CCONJ'), ('Bengio', 'PROPN'), (',', 'PUNCT'), ('Y.', 'PROPN'), ('Neural', 'PROPN'), ('machine', 'NOUN'), ('translation', 'NOUN'), ('jointly', 'ADV'), (' ', 'SPACE'), ('learning', 'VERB'), ('align', 'VERB'), ('translate', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Bahdanau', 'ROOT'), (',', 'punct'), ('D.', 'appos'), (',', 'punct'), ('Cho', 'conj'), (',', 'punct'), ('K.', 'conj'), ('&', 'cc'), ('Bengio', 'conj'), (',', 'punct'), ('Y.', 'compound'), ('Neural', 'compound'), ('machine', 'compound'), ('translation', 'conj'), ('jointly', 'advmod'), (' ', 'pobj'), ('learning', 'acl'), ('align', 'xcomp'), ('translate', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[Bahdanau, ,], [,, D.], [D., ,], [,, Cho], [Cho, ,], [,, K.], [K., &], [&, Bengio], [Bengio, ,], [,, Y.], [Y., Neural], [Neural, machine], [machine, translation], [translation, jointly], [jointly,  ], [ , learning], [learning, align], [align, translate], [translate, .]]

>> Trigrams: 
[[Bahdanau, ,, D.], [,, D., ,], [D., ,, Cho], [,, Cho, ,], [Cho, ,, K.], [,, K., &], [K., &, Bengio], [&, Bengio, ,], [Bengio, ,, Y.], [,, Y., Neural], [Y., Neural, machine], [Neural, machine, translation], [machine, translation, jointly], [translation, jointly,  ], [jointly,  , learning], [ , learning, align], [learning, align, translate], [align, translate, .]]

>> Noun Phrases are: 
[Bahdanau, D., Cho, K., Bengio, Y. Neural machine translation]

>> Named Entities are: 
[('D.', 'NORP'), ('Cho, K. & Bengio', 'ORG'), ('Y. Neural', 'ORG')]


============================ Sentence 734 =============================

In Proc. 


>> Tokens are: 
[Proc, .] 

>> PoS Tags are: 
[('Proc', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Proc', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Proc, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Proc]

>> Named Entities are: 
[]


============================ Sentence 735 =============================

International Conference on Learning   


>> Tokens are: 
[International, Conference, Learning,  ] 

>> PoS Tags are: 
[('International', 'PROPN'), ('Conference', 'PROPN'), ('Learning', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('International', 'compound'), ('Conference', 'ROOT'), ('Learning', 'pcomp'), (' ', 'punct')]

>> Bigrams: 
[[International, Conference], [Conference, Learning], [Learning,  ]]

>> Trigrams: 
[[International, Conference, Learning], [Conference, Learning,  ]]

>> Noun Phrases are: 
[International Conference, Learning]

>> Named Entities are: 
[]


============================ Sentence 736 =============================

Representations http://arxiv.org/abs/1409.0473 (2015). 


>> Tokens are: 
[Representations, http://arxiv.org/abs/1409.0473, (, 2015, ), .] 

>> PoS Tags are: 
[('Representations', 'PROPN'), ('http://arxiv.org/abs/1409.0473', 'PROPN'), ('(', 'PUNCT'), ('2015', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Representations', 'nsubj'), ('http://arxiv.org/abs/1409.0473', 'ROOT'), ('(', 'punct'), ('2015', 'npadvmod'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Representations, http://arxiv.org/abs/1409.0473], [http://arxiv.org/abs/1409.0473, (], [(, 2015], [2015, )], [), .]]

>> Trigrams: 
[[Representations, http://arxiv.org/abs/1409.0473, (], [http://arxiv.org/abs/1409.0473, (, 2015], [(, 2015, )], [2015, ), .]]

>> Noun Phrases are: 
[Representations]

>> Named Entities are: 
[('2015', 'DATE')]


============================ Sentence 737 =============================

 77. 


>> Tokens are: 
[ , 77, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('77', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'ROOT'), ('77', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[ , 77], [77, .]]

>> Trigrams: 
[[ , 77, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('77', 'CARDINAL')]


============================ Sentence 738 =============================

Hochreiter, S. Untersuchungen zu dynamischen neuronalen Netzen [in  German] 


>> Tokens are: 
[Hochreiter, ,, S., Untersuchungen, zu, dynamischen, neuronalen, Netzen, [,  , German, ]] 

>> PoS Tags are: 
[('Hochreiter', 'PROPN'), (',', 'PUNCT'), ('S.', 'PROPN'), ('Untersuchungen', 'PROPN'), ('zu', 'PROPN'), ('dynamischen', 'ADV'), ('neuronalen', 'VERB'), ('Netzen', 'PROPN'), ('[', 'PUNCT'), (' ', 'SPACE'), ('German', 'ADJ'), (']', 'PUNCT')] 

>> Dependency Tags are: 
[('Hochreiter', 'advmod'), (',', 'punct'), ('S.', 'compound'), ('Untersuchungen', 'nsubj'), ('zu', 'nmod'), ('dynamischen', 'advmod'), ('neuronalen', 'ROOT'), ('Netzen', 'dobj'), ('[', 'punct'), (' ', 'pobj'), ('German', 'advcl'), (']', 'punct')]

>> Bigrams: 
[[Hochreiter, ,], [,, S.], [S., Untersuchungen], [Untersuchungen, zu], [zu, dynamischen], [dynamischen, neuronalen], [neuronalen, Netzen], [Netzen, [], [[,  ], [ , German], [German, ]]]

>> Trigrams: 
[[Hochreiter, ,, S.], [,, S., Untersuchungen], [S., Untersuchungen, zu], [Untersuchungen, zu, dynamischen], [zu, dynamischen, neuronalen], [dynamischen, neuronalen, Netzen], [neuronalen, Netzen, [], [Netzen, [,  ], [[,  , German], [ , German, ]]]

>> Noun Phrases are: 
[S. Untersuchungen, Netzen]

>> Named Entities are: 
[('S. Untersuchungen', 'PERSON'), ('Netzen', 'PERSON'), ('German', 'NORP')]


============================ Sentence 739 =============================

Diploma thesis, T.U. Münich (1991). 


>> Tokens are: 
[Diploma, thesis, ,, T.U., Münich, (, 1991, ), .] 

>> PoS Tags are: 
[('Diploma', 'NOUN'), ('thesis', 'NOUN'), (',', 'PUNCT'), ('T.U.', 'PROPN'), ('Münich', 'PROPN'), ('(', 'PUNCT'), ('1991', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Diploma', 'compound'), ('thesis', 'ROOT'), (',', 'punct'), ('T.U.', 'compound'), ('Münich', 'conj'), ('(', 'punct'), ('1991', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Diploma, thesis], [thesis, ,], [,, T.U.], [T.U., Münich], [Münich, (], [(, 1991], [1991, )], [), .]]

>> Trigrams: 
[[Diploma, thesis, ,], [thesis, ,, T.U.], [,, T.U., Münich], [T.U., Münich, (], [Münich, (, 1991], [(, 1991, )], [1991, ), .]]

>> Noun Phrases are: 
[Diploma thesis, T.U. Münich]

>> Named Entities are: 
[('Diploma', 'NORP'), ('T.U. Münich', 'PERSON'), ('1991', 'DATE')]


============================ Sentence 740 =============================

  78. 


>> Tokens are: 
[  , 78, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('78', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('78', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 78], [78, .]]

>> Trigrams: 
[[  , 78, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('78', 'CARDINAL')]


============================ Sentence 741 =============================

Bengio, Y., Simard, P. & Frasconi, P. Learning long-term dependencies with  gradient descent is difficult. 


>> Tokens are: 
[Bengio, ,, Y., ,, Simard, ,, P., &, Frasconi, ,, P., Learning, long, -, term, dependencies,  , gradient, descent, difficult, .] 

>> PoS Tags are: 
[('Bengio', 'PROPN'), (',', 'PUNCT'), ('Y.', 'PROPN'), (',', 'PUNCT'), ('Simard', 'PROPN'), (',', 'PUNCT'), ('P.', 'PROPN'), ('&', 'CCONJ'), ('Frasconi', 'PROPN'), (',', 'PUNCT'), ('P.', 'PROPN'), ('Learning', 'PROPN'), ('long', 'ADJ'), ('-', 'PUNCT'), ('term', 'NOUN'), ('dependencies', 'NOUN'), (' ', 'SPACE'), ('gradient', 'ADJ'), ('descent', 'NOUN'), ('difficult', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Bengio', 'nsubj'), (',', 'punct'), ('Y.', 'conj'), (',', 'punct'), ('Simard', 'conj'), (',', 'punct'), ('P.', 'conj'), ('&', 'cc'), ('Frasconi', 'conj'), (',', 'punct'), ('P.', 'compound'), ('Learning', 'nmod'), ('long', 'amod'), ('-', 'punct'), ('term', 'compound'), ('dependencies', 'conj'), (' ', 'pobj'), ('gradient', 'amod'), ('descent', 'pobj'), ('difficult', 'acomp'), ('.', 'punct')]

>> Bigrams: 
[[Bengio, ,], [,, Y.], [Y., ,], [,, Simard], [Simard, ,], [,, P.], [P., &], [&, Frasconi], [Frasconi, ,], [,, P.], [P., Learning], [Learning, long], [long, -], [-, term], [term, dependencies], [dependencies,  ], [ , gradient], [gradient, descent], [descent, difficult], [difficult, .]]

>> Trigrams: 
[[Bengio, ,, Y.], [,, Y., ,], [Y., ,, Simard], [,, Simard, ,], [Simard, ,, P.], [,, P., &], [P., &, Frasconi], [&, Frasconi, ,], [Frasconi, ,, P.], [,, P., Learning], [P., Learning, long], [Learning, long, -], [long, -, term], [-, term, dependencies], [term, dependencies,  ], [dependencies,  , gradient], [ , gradient, descent], [gradient, descent, difficult], [descent, difficult, .]]

>> Noun Phrases are: 
[Bengio, Y., Simard, P., Frasconi, P. Learning long-term dependencies, gradient descent]

>> Named Entities are: 
[('Bengio', 'PERSON'), ('Y.', 'ORG'), ('P. & Frasconi, P. Learning', 'ORG')]


============================ Sentence 742 =============================

IEEE Trans. 


>> Tokens are: 
[IEEE, Trans, .] 

>> PoS Tags are: 
[('IEEE', 'PROPN'), ('Trans', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('IEEE', 'compound'), ('Trans', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[IEEE, Trans], [Trans, .]]

>> Trigrams: 
[[IEEE, Trans, .]]

>> Noun Phrases are: 
[IEEE Trans]

>> Named Entities are: 
[]


============================ Sentence 743 =============================

Neural Networks 5, 157–166 (1994). 


>> Tokens are: 
[Neural, Networks, 5, ,, 157–166, (, 1994, ), .] 

>> PoS Tags are: 
[('Neural', 'PROPN'), ('Networks', 'PROPN'), ('5', 'NUM'), (',', 'PUNCT'), ('157–166', 'NUM'), ('(', 'PUNCT'), ('1994', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Neural', 'compound'), ('Networks', 'ROOT'), ('5', 'nummod'), (',', 'punct'), ('157–166', 'appos'), ('(', 'punct'), ('1994', 'npadvmod'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Neural, Networks], [Networks, 5], [5, ,], [,, 157–166], [157–166, (], [(, 1994], [1994, )], [), .]]

>> Trigrams: 
[[Neural, Networks, 5], [Networks, 5, ,], [5, ,, 157–166], [,, 157–166, (], [157–166, (, 1994], [(, 1994, )], [1994, ), .]]

>> Noun Phrases are: 
[Neural Networks]

>> Named Entities are: 
[('5', 'CARDINAL'), ('157–166', 'CARDINAL'), ('1994', 'DATE')]


============================ Sentence 744 =============================

  79. 


>> Tokens are: 
[  , 79, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('79', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('79', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 79], [79, .]]

>> Trigrams: 
[[  , 79, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('79', 'CARDINAL')]


============================ Sentence 745 =============================

Hochreiter, S. & Schmidhuber, J. Long short-term memory. 


>> Tokens are: 
[Hochreiter, ,, S., &, Schmidhuber, ,, J., Long, short, -, term, memory, .] 

>> PoS Tags are: 
[('Hochreiter', 'PROPN'), (',', 'PUNCT'), ('S.', 'PROPN'), ('&', 'CCONJ'), ('Schmidhuber', 'PROPN'), (',', 'PUNCT'), ('J.', 'PROPN'), ('Long', 'PROPN'), ('short', 'ADJ'), ('-', 'PUNCT'), ('term', 'NOUN'), ('memory', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Hochreiter', 'dep'), (',', 'punct'), ('S.', 'appos'), ('&', 'cc'), ('Schmidhuber', 'conj'), (',', 'punct'), ('J.', 'nmod'), ('Long', 'nmod'), ('short', 'amod'), ('-', 'punct'), ('term', 'compound'), ('memory', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Hochreiter, ,], [,, S.], [S., &], [&, Schmidhuber], [Schmidhuber, ,], [,, J.], [J., Long], [Long, short], [short, -], [-, term], [term, memory], [memory, .]]

>> Trigrams: 
[[Hochreiter, ,, S.], [,, S., &], [S., &, Schmidhuber], [&, Schmidhuber, ,], [Schmidhuber, ,, J.], [,, J., Long], [J., Long, short], [Long, short, -], [short, -, term], [-, term, memory], [term, memory, .]]

>> Noun Phrases are: 
[S., Schmidhuber]

>> Named Entities are: 
[('S. & Schmidhuber', 'ORG'), ('J. Long', 'PERSON')]


============================ Sentence 746 =============================

Neural Comput. 


>> Tokens are: 
[Neural, Comput, .] 

>> PoS Tags are: 
[('Neural', 'PROPN'), ('Comput', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Neural', 'compound'), ('Comput', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Neural, Comput], [Comput, .]]

>> Trigrams: 
[[Neural, Comput, .]]

>> Noun Phrases are: 
[Neural Comput]

>> Named Entities are: 
[]


============================ Sentence 747 =============================

9,  1735–1780 (1997). 


>> Tokens are: 
[9, ,,  , 1735–1780, (, 1997, ), .] 

>> PoS Tags are: 
[('9', 'NUM'), (',', 'PUNCT'), (' ', 'SPACE'), ('1735–1780', 'NUM'), ('(', 'PUNCT'), ('1997', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('9', 'ROOT'), (',', 'punct'), (' ', 'npadvmod'), ('1735–1780', 'pobj'), ('(', 'punct'), ('1997', 'npadvmod'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[9, ,], [,,  ], [ , 1735–1780], [1735–1780, (], [(, 1997], [1997, )], [), .]]

>> Trigrams: 
[[9, ,,  ], [,,  , 1735–1780], [ , 1735–1780, (], [1735–1780, (, 1997], [(, 1997, )], [1997, ), .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('9', 'CARDINAL'), ('1735–1780', 'CARDINAL'), ('1997', 'DATE')]


============================ Sentence 748 =============================

   This paper introduced LSTM recurrent networks, which have become a crucial  ingredient in recent advances with recurrent networks because they are good  at learning long-range dependencies. 


>> Tokens are: 
[   , paper, introduced, LSTM, recurrent, networks, ,, crucial,  , ingredient, recent, advances, recurrent, networks, good,  , learning, long, -, range, dependencies, .] 

>> PoS Tags are: 
[('   ', 'SPACE'), ('paper', 'NOUN'), ('introduced', 'VERB'), ('LSTM', 'PROPN'), ('recurrent', 'ADJ'), ('networks', 'NOUN'), (',', 'PUNCT'), ('crucial', 'ADJ'), (' ', 'SPACE'), ('ingredient', 'NOUN'), ('recent', 'ADJ'), ('advances', 'NOUN'), ('recurrent', 'ADJ'), ('networks', 'NOUN'), ('good', 'ADJ'), (' ', 'SPACE'), ('learning', 'VERB'), ('long', 'ADJ'), ('-', 'PUNCT'), ('range', 'NOUN'), ('dependencies', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('   ', 'meta'), ('paper', 'nsubj'), ('introduced', 'ROOT'), ('LSTM', 'nmod'), ('recurrent', 'amod'), ('networks', 'dobj'), (',', 'punct'), ('crucial', 'amod'), (' ', 'compound'), ('ingredient', 'attr'), ('recent', 'amod'), ('advances', 'pobj'), ('recurrent', 'amod'), ('networks', 'pobj'), ('good', 'amod'), (' ', 'attr'), ('learning', 'pcomp'), ('long', 'amod'), ('-', 'punct'), ('range', 'compound'), ('dependencies', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[   , paper], [paper, introduced], [introduced, LSTM], [LSTM, recurrent], [recurrent, networks], [networks, ,], [,, crucial], [crucial,  ], [ , ingredient], [ingredient, recent], [recent, advances], [advances, recurrent], [recurrent, networks], [networks, good], [good,  ], [ , learning], [learning, long], [long, -], [-, range], [range, dependencies], [dependencies, .]]

>> Trigrams: 
[[   , paper, introduced], [paper, introduced, LSTM], [introduced, LSTM, recurrent], [LSTM, recurrent, networks], [recurrent, networks, ,], [networks, ,, crucial], [,, crucial,  ], [crucial,  , ingredient], [ , ingredient, recent], [ingredient, recent, advances], [recent, advances, recurrent], [advances, recurrent, networks], [recurrent, networks, good], [networks, good,  ], [good,  , learning], [ , learning, long], [learning, long, -], [long, -, range], [-, range, dependencies], [range, dependencies, .]]

>> Noun Phrases are: 
[This paper, LSTM recurrent networks, a crucial  ingredient, recent advances, recurrent networks, they, long-range dependencies]

>> Named Entities are: 
[('LSTM', 'DATE')]


============================ Sentence 749 =============================

  80. 


>> Tokens are: 
[  , 80, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('80', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('80', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 80], [80, .]]

>> Trigrams: 
[[  , 80, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('80', 'CARDINAL')]


============================ Sentence 750 =============================

ElHihi, S. & Bengio, Y. Hierarchical recurrent neural networks for long-term  dependencies. 


>> Tokens are: 
[ElHihi, ,, S., &, Bengio, ,, Y., Hierarchical, recurrent, neural, networks, long, -, term,  , dependencies, .] 

>> PoS Tags are: 
[('ElHihi', 'PROPN'), (',', 'PUNCT'), ('S.', 'PROPN'), ('&', 'CCONJ'), ('Bengio', 'PROPN'), (',', 'PUNCT'), ('Y.', 'PROPN'), ('Hierarchical', 'PROPN'), ('recurrent', 'ADJ'), ('neural', 'ADJ'), ('networks', 'NOUN'), ('long', 'ADJ'), ('-', 'PUNCT'), ('term', 'NOUN'), (' ', 'SPACE'), ('dependencies', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('ElHihi', 'nmod'), (',', 'punct'), ('S.', 'conj'), ('&', 'cc'), ('Bengio', 'conj'), (',', 'punct'), ('Y.', 'compound'), ('Hierarchical', 'conj'), ('recurrent', 'amod'), ('neural', 'amod'), ('networks', 'ROOT'), ('long', 'amod'), ('-', 'punct'), ('term', 'nmod'), (' ', 'compound'), ('dependencies', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[ElHihi, ,], [,, S.], [S., &], [&, Bengio], [Bengio, ,], [,, Y.], [Y., Hierarchical], [Hierarchical, recurrent], [recurrent, neural], [neural, networks], [networks, long], [long, -], [-, term], [term,  ], [ , dependencies], [dependencies, .]]

>> Trigrams: 
[[ElHihi, ,, S.], [,, S., &], [S., &, Bengio], [&, Bengio, ,], [Bengio, ,, Y.], [,, Y., Hierarchical], [Y., Hierarchical, recurrent], [Hierarchical, recurrent, neural], [recurrent, neural, networks], [neural, networks, long], [networks, long, -], [long, -, term], [-, term,  ], [term,  , dependencies], [ , dependencies, .]]

>> Noun Phrases are: 
[ElHihi, S. & Bengio, Y. Hierarchical recurrent neural networks, long-term  dependencies]

>> Named Entities are: 
[('ElHihi', 'PERSON'), ('S. & Bengio', 'ORG'), ('Y. Hierarchical', 'ORG')]


============================ Sentence 751 =============================

In Proc. 


>> Tokens are: 
[Proc, .] 

>> PoS Tags are: 
[('Proc', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Proc', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Proc, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Proc]

>> Named Entities are: 
[]


============================ Sentence 752 =============================

Advances in Neural Information Processing Systems 8  http://papers.nips.cc/paper/1102-hierarchical-recurrent-neural-networks-for- long-term-dependencies (1995). 


>> Tokens are: 
[Advances, Neural, Information, Processing, Systems, 8,  , http://papers.nips.cc/paper/1102-hierarchical-recurrent-neural-networks-for-, long, -, term, -, dependencies, (, 1995, ), .] 

>> PoS Tags are: 
[('Advances', 'NOUN'), ('Neural', 'PROPN'), ('Information', 'PROPN'), ('Processing', 'PROPN'), ('Systems', 'PROPN'), ('8', 'NUM'), (' ', 'SPACE'), ('http://papers.nips.cc/paper/1102-hierarchical-recurrent-neural-networks-for-', 'VERB'), ('long', 'ADJ'), ('-', 'PUNCT'), ('term', 'NOUN'), ('-', 'PUNCT'), ('dependencies', 'NOUN'), ('(', 'PUNCT'), ('1995', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Advances', 'ROOT'), ('Neural', 'compound'), ('Information', 'compound'), ('Processing', 'compound'), ('Systems', 'pobj'), ('8', 'appos'), (' ', 'appos'), ('http://papers.nips.cc/paper/1102-hierarchical-recurrent-neural-networks-for-', 'punct'), ('long', 'amod'), ('-', 'punct'), ('term', 'compound'), ('-', 'punct'), ('dependencies', 'conj'), ('(', 'punct'), ('1995', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Advances, Neural], [Neural, Information], [Information, Processing], [Processing, Systems], [Systems, 8], [8,  ], [ , http://papers.nips.cc/paper/1102-hierarchical-recurrent-neural-networks-for-], [http://papers.nips.cc/paper/1102-hierarchical-recurrent-neural-networks-for-, long], [long, -], [-, term], [term, -], [-, dependencies], [dependencies, (], [(, 1995], [1995, )], [), .]]

>> Trigrams: 
[[Advances, Neural, Information], [Neural, Information, Processing], [Information, Processing, Systems], [Processing, Systems, 8], [Systems, 8,  ], [8,  , http://papers.nips.cc/paper/1102-hierarchical-recurrent-neural-networks-for-], [ , http://papers.nips.cc/paper/1102-hierarchical-recurrent-neural-networks-for-, long], [http://papers.nips.cc/paper/1102-hierarchical-recurrent-neural-networks-for-, long, -], [long, -, term], [-, term, -], [term, -, dependencies], [-, dependencies, (], [dependencies, (, 1995], [(, 1995, )], [1995, ), .]]

>> Noun Phrases are: 
[Advances, Neural Information Processing Systems, long-term-dependencies]

>> Named Entities are: 
[('Neural Information Processing Systems', 'ORG'), ('1995', 'DATE')]


============================ Sentence 753 =============================

  81. 


>> Tokens are: 
[  , 81, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('81', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('81', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 81], [81, .]]

>> Trigrams: 
[[  , 81, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('81', 'CARDINAL')]


============================ Sentence 754 =============================

Sutskever, I. Training Recurrent Neural Networks. 


>> Tokens are: 
[Sutskever, ,, I., Training, Recurrent, Neural, Networks, .] 

>> PoS Tags are: 
[('Sutskever', 'PROPN'), (',', 'PUNCT'), ('I.', 'PROPN'), ('Training', 'PROPN'), ('Recurrent', 'PROPN'), ('Neural', 'PROPN'), ('Networks', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Sutskever', 'ROOT'), (',', 'punct'), ('I.', 'compound'), ('Training', 'compound'), ('Recurrent', 'compound'), ('Neural', 'compound'), ('Networks', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[Sutskever, ,], [,, I.], [I., Training], [Training, Recurrent], [Recurrent, Neural], [Neural, Networks], [Networks, .]]

>> Trigrams: 
[[Sutskever, ,, I.], [,, I., Training], [I., Training, Recurrent], [Training, Recurrent, Neural], [Recurrent, Neural, Networks], [Neural, Networks, .]]

>> Noun Phrases are: 
[Sutskever, I. Training Recurrent Neural Networks]

>> Named Entities are: 
[('Sutskever', 'ORG'), ('I. Training Recurrent Neural Networks', 'ORG')]


============================ Sentence 755 =============================

PhD thesis, Univ. 


>> Tokens are: 
[PhD, thesis, ,, Univ, .] 

>> PoS Tags are: 
[('PhD', 'NOUN'), ('thesis', 'NOUN'), (',', 'PUNCT'), ('Univ', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('PhD', 'compound'), ('thesis', 'ROOT'), (',', 'punct'), ('Univ', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[PhD, thesis], [thesis, ,], [,, Univ], [Univ, .]]

>> Trigrams: 
[[PhD, thesis, ,], [thesis, ,, Univ], [,, Univ, .]]

>> Noun Phrases are: 
[PhD thesis, Univ]

>> Named Entities are: 
[('Univ', 'PERSON')]


============================ Sentence 756 =============================

Toronto  (2012). 


>> Tokens are: 
[Toronto,  , (, 2012, ), .] 

>> PoS Tags are: 
[('Toronto', 'PROPN'), (' ', 'SPACE'), ('(', 'PUNCT'), ('2012', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Toronto', 'ROOT'), (' ', 'nummod'), ('(', 'punct'), ('2012', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Toronto,  ], [ , (], [(, 2012], [2012, )], [), .]]

>> Trigrams: 
[[Toronto,  , (], [ , (, 2012], [(, 2012, )], [2012, ), .]]

>> Noun Phrases are: 
[Toronto]

>> Named Entities are: 
[]


============================ Sentence 757 =============================

  82. 


>> Tokens are: 
[  , 82, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('82', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('82', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 82], [82, .]]

>> Trigrams: 
[[  , 82, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('82', 'CARDINAL')]


============================ Sentence 758 =============================

Pascanu, R., Mikolov, T. & Bengio, Y. 


>> Tokens are: 
[Pascanu, ,, R., ,, Mikolov, ,, T., &, Bengio, ,, Y.] 

>> PoS Tags are: 
[('Pascanu', 'PROPN'), (',', 'PUNCT'), ('R.', 'PROPN'), (',', 'PUNCT'), ('Mikolov', 'PROPN'), (',', 'PUNCT'), ('T.', 'PROPN'), ('&', 'CCONJ'), ('Bengio', 'PROPN'), (',', 'PUNCT'), ('Y.', 'PROPN')] 

>> Dependency Tags are: 
[('Pascanu', 'ROOT'), (',', 'punct'), ('R.', 'appos'), (',', 'punct'), ('Mikolov', 'conj'), (',', 'punct'), ('T.', 'conj'), ('&', 'cc'), ('Bengio', 'conj'), (',', 'punct'), ('Y.', 'appos')]

>> Bigrams: 
[[Pascanu, ,], [,, R.], [R., ,], [,, Mikolov], [Mikolov, ,], [,, T.], [T., &], [&, Bengio], [Bengio, ,], [,, Y.]]

>> Trigrams: 
[[Pascanu, ,, R.], [,, R., ,], [R., ,, Mikolov], [,, Mikolov, ,], [Mikolov, ,, T.], [,, T., &], [T., &, Bengio], [&, Bengio, ,], [Bengio, ,, Y.]]

>> Noun Phrases are: 
[Pascanu, R., Mikolov, T., Bengio, Y.]

>> Named Entities are: 
[('R.', 'NORP'), ('T. & Bengio', 'ORG'), ('Y.', 'PERSON')]


============================ Sentence 759 =============================

On the difficulty of training recurrent neural  networks. 


>> Tokens are: 
[difficulty, training, recurrent, neural,  , networks, .] 

>> PoS Tags are: 
[('difficulty', 'NOUN'), ('training', 'NOUN'), ('recurrent', 'ADJ'), ('neural', 'ADJ'), (' ', 'SPACE'), ('networks', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('difficulty', 'pobj'), ('training', 'pcomp'), ('recurrent', 'amod'), ('neural', 'amod'), (' ', 'compound'), ('networks', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[difficulty, training], [training, recurrent], [recurrent, neural], [neural,  ], [ , networks], [networks, .]]

>> Trigrams: 
[[difficulty, training, recurrent], [training, recurrent, neural], [recurrent, neural,  ], [neural,  , networks], [ , networks, .]]

>> Noun Phrases are: 
[the difficulty, training, recurrent neural  networks]

>> Named Entities are: 
[]


============================ Sentence 760 =============================

In Proc. 


>> Tokens are: 
[Proc, .] 

>> PoS Tags are: 
[('Proc', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Proc', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Proc, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Proc]

>> Named Entities are: 
[]


============================ Sentence 761 =============================

30th International Conference on Machine Learning 1310– 1318 (2013). 


>> Tokens are: 
[30th, International, Conference, Machine, Learning, 1310, –, 1318, (, 2013, ), .] 

>> PoS Tags are: 
[('30th', 'ADJ'), ('International', 'PROPN'), ('Conference', 'PROPN'), ('Machine', 'PROPN'), ('Learning', 'PROPN'), ('1310', 'NUM'), ('–', 'SYM'), ('1318', 'NUM'), ('(', 'PUNCT'), ('2013', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('30th', 'amod'), ('International', 'compound'), ('Conference', 'ROOT'), ('Machine', 'compound'), ('Learning', 'pobj'), ('1310', 'npadvmod'), ('–', 'punct'), ('1318', 'appos'), ('(', 'punct'), ('2013', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[30th, International], [International, Conference], [Conference, Machine], [Machine, Learning], [Learning, 1310], [1310, –], [–, 1318], [1318, (], [(, 2013], [2013, )], [), .]]

>> Trigrams: 
[[30th, International, Conference], [International, Conference, Machine], [Conference, Machine, Learning], [Machine, Learning, 1310], [Learning, 1310, –], [1310, –, 1318], [–, 1318, (], [1318, (, 2013], [(, 2013, )], [2013, ), .]]

>> Noun Phrases are: 
[30th International Conference, Machine Learning]

>> Named Entities are: 
[('30th', 'ORDINAL'), ('1310– 1318', 'DATE'), ('2013', 'DATE')]


============================ Sentence 762 =============================

  83. 


>> Tokens are: 
[  , 83, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('83', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('83', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 83], [83, .]]

>> Trigrams: 
[[  , 83, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('83', 'CARDINAL')]


============================ Sentence 763 =============================

Sutskever, I., Martens, J. & Hinton, G. E. Generating text with recurrent neural  networks. 


>> Tokens are: 
[Sutskever, ,, I., ,, Martens, ,, J., &, Hinton, ,, G., E., Generating, text, recurrent, neural,  , networks, .] 

>> PoS Tags are: 
[('Sutskever', 'PROPN'), (',', 'PUNCT'), ('I.', 'PROPN'), (',', 'PUNCT'), ('Martens', 'PROPN'), (',', 'PUNCT'), ('J.', 'PROPN'), ('&', 'CCONJ'), ('Hinton', 'PROPN'), (',', 'PUNCT'), ('G.', 'PROPN'), ('E.', 'PROPN'), ('Generating', 'PROPN'), ('text', 'NOUN'), ('recurrent', 'ADJ'), ('neural', 'ADJ'), (' ', 'SPACE'), ('networks', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Sutskever', 'ROOT'), (',', 'punct'), ('I.', 'appos'), (',', 'punct'), ('Martens', 'conj'), (',', 'punct'), ('J.', 'conj'), ('&', 'cc'), ('Hinton', 'conj'), (',', 'punct'), ('G.', 'compound'), ('E.', 'compound'), ('Generating', 'compound'), ('text', 'appos'), ('recurrent', 'amod'), ('neural', 'amod'), (' ', 'compound'), ('networks', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Sutskever, ,], [,, I.], [I., ,], [,, Martens], [Martens, ,], [,, J.], [J., &], [&, Hinton], [Hinton, ,], [,, G.], [G., E.], [E., Generating], [Generating, text], [text, recurrent], [recurrent, neural], [neural,  ], [ , networks], [networks, .]]

>> Trigrams: 
[[Sutskever, ,, I.], [,, I., ,], [I., ,, Martens], [,, Martens, ,], [Martens, ,, J.], [,, J., &], [J., &, Hinton], [&, Hinton, ,], [Hinton, ,, G.], [,, G., E.], [G., E., Generating], [E., Generating, text], [Generating, text, recurrent], [text, recurrent, neural], [recurrent, neural,  ], [neural,  , networks], [ , networks, .]]

>> Noun Phrases are: 
[Sutskever, I., Martens, J., Hinton, G. E. Generating text, recurrent neural  networks]

>> Named Entities are: 
[('Sutskever', 'ORG'), ('I.', 'ORG'), ('Martens, J. & Hinton', 'ORG'), ('G. E. Generating', 'PERSON')]


============================ Sentence 764 =============================

In Proc. 


>> Tokens are: 
[Proc, .] 

>> PoS Tags are: 
[('Proc', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Proc', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Proc, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Proc]

>> Named Entities are: 
[('Proc.', 'DATE')]


============================ Sentence 765 =============================

28th International Conference on Machine Learning 1017– 1024 (2011). 


>> Tokens are: 
[28th, International, Conference, Machine, Learning, 1017, –, 1024, (, 2011, ), .] 

>> PoS Tags are: 
[('28th', 'ADJ'), ('International', 'PROPN'), ('Conference', 'PROPN'), ('Machine', 'PROPN'), ('Learning', 'PROPN'), ('1017', 'NUM'), ('–', 'PUNCT'), ('1024', 'NUM'), ('(', 'PUNCT'), ('2011', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('28th', 'amod'), ('International', 'compound'), ('Conference', 'ROOT'), ('Machine', 'compound'), ('Learning', 'pobj'), ('1017', 'appos'), ('–', 'punct'), ('1024', 'appos'), ('(', 'punct'), ('2011', 'npadvmod'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[28th, International], [International, Conference], [Conference, Machine], [Machine, Learning], [Learning, 1017], [1017, –], [–, 1024], [1024, (], [(, 2011], [2011, )], [), .]]

>> Trigrams: 
[[28th, International, Conference], [International, Conference, Machine], [Conference, Machine, Learning], [Machine, Learning, 1017], [Learning, 1017, –], [1017, –, 1024], [–, 1024, (], [1024, (, 2011], [(, 2011, )], [2011, ), .]]

>> Noun Phrases are: 
[28th International Conference, Machine Learning]

>> Named Entities are: 
[('2011', 'DATE')]


============================ Sentence 766 =============================

  84. 


>> Tokens are: 
[  , 84, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('84', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('84', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 84], [84, .]]

>> Trigrams: 
[[  , 84, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('84', 'CARDINAL')]


============================ Sentence 767 =============================

Lakoff, G. & Johnson, M. Metaphors 


>> Tokens are: 
[Lakoff, ,, G., &, Johnson, ,, M., Metaphors] 

>> PoS Tags are: 
[('Lakoff', 'PROPN'), (',', 'PUNCT'), ('G.', 'PROPN'), ('&', 'CCONJ'), ('Johnson', 'PROPN'), (',', 'PUNCT'), ('M.', 'PROPN'), ('Metaphors', 'NOUN')] 

>> Dependency Tags are: 
[('Lakoff', 'ROOT'), (',', 'punct'), ('G.', 'conj'), ('&', 'cc'), ('Johnson', 'conj'), (',', 'punct'), ('M.', 'compound'), ('Metaphors', 'appos')]

>> Bigrams: 
[[Lakoff, ,], [,, G.], [G., &], [&, Johnson], [Johnson, ,], [,, M.], [M., Metaphors]]

>> Trigrams: 
[[Lakoff, ,, G.], [,, G., &], [G., &, Johnson], [&, Johnson, ,], [Johnson, ,, M.], [,, M., Metaphors]]

>> Noun Phrases are: 
[Lakoff, G., Johnson, M. Metaphors]

>> Named Entities are: 
[('Lakoff, G. & Johnson', 'ORG')]


============================ Sentence 768 =============================

We Live 


>> Tokens are: 
[Live] 

>> PoS Tags are: 
[('Live', 'VERB')] 

>> Dependency Tags are: 
[('Live', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[We]

>> Named Entities are: 
[]


============================ Sentence 769 =============================

By (Univ. 


>> Tokens are: 
[(, Univ, .] 

>> PoS Tags are: 
[('(', 'PUNCT'), ('Univ', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('(', 'punct'), ('Univ', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[(, Univ], [Univ, .]]

>> Trigrams: 
[[(, Univ, .]]

>> Noun Phrases are: 
[Univ]

>> Named Entities are: 
[]


============================ Sentence 770 =============================

Chicago Press, 2008). 


>> Tokens are: 
[Chicago, Press, ,, 2008, ), .] 

>> PoS Tags are: 
[('Chicago', 'PROPN'), ('Press', 'PROPN'), (',', 'PUNCT'), ('2008', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Chicago', 'compound'), ('Press', 'ROOT'), (',', 'punct'), ('2008', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Chicago, Press], [Press, ,], [,, 2008], [2008, )], [), .]]

>> Trigrams: 
[[Chicago, Press, ,], [Press, ,, 2008], [,, 2008, )], [2008, ), .]]

>> Noun Phrases are: 
[Chicago Press]

>> Named Entities are: 
[('Chicago Press', 'ORG')]


============================ Sentence 771 =============================

 85. 


>> Tokens are: 
[ , 85, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('85', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'ROOT'), ('85', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[ , 85], [85, .]]

>> Trigrams: 
[[ , 85, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('85', 'CARDINAL')]


============================ Sentence 772 =============================

Rogers, T. T. & McClelland, J. L. Semantic Cognition: A Parallel Distributed   Processing Approach 


>> Tokens are: 
[Rogers, ,, T., T., &, McClelland, ,, J., L., Semantic, Cognition, :, Parallel, Distributed,   , Processing, Approach] 

>> PoS Tags are: 
[('Rogers', 'NOUN'), (',', 'PUNCT'), ('T.', 'PROPN'), ('T.', 'PROPN'), ('&', 'CCONJ'), ('McClelland', 'PROPN'), (',', 'PUNCT'), ('J.', 'PROPN'), ('L.', 'PROPN'), ('Semantic', 'PROPN'), ('Cognition', 'PROPN'), (':', 'PUNCT'), ('Parallel', 'ADJ'), ('Distributed', 'VERB'), ('  ', 'SPACE'), ('Processing', 'NOUN'), ('Approach', 'NOUN')] 

>> Dependency Tags are: 
[('Rogers', 'ROOT'), (',', 'punct'), ('T.', 'compound'), ('T.', 'appos'), ('&', 'cc'), ('McClelland', 'conj'), (',', 'punct'), ('J.', 'compound'), ('L.', 'compound'), ('Semantic', 'compound'), ('Cognition', 'appos'), (':', 'punct'), ('Parallel', 'appos'), ('Distributed', 'prep'), ('  ', 'dobj'), ('Processing', 'compound'), ('Approach', 'appos')]

>> Bigrams: 
[[Rogers, ,], [,, T.], [T., T.], [T., &], [&, McClelland], [McClelland, ,], [,, J.], [J., L.], [L., Semantic], [Semantic, Cognition], [Cognition, :], [:, Parallel], [Parallel, Distributed], [Distributed,   ], [  , Processing], [Processing, Approach]]

>> Trigrams: 
[[Rogers, ,, T.], [,, T., T.], [T., T., &], [T., &, McClelland], [&, McClelland, ,], [McClelland, ,, J.], [,, J., L.], [J., L., Semantic], [L., Semantic, Cognition], [Semantic, Cognition, :], [Cognition, :, Parallel], [:, Parallel, Distributed], [Parallel, Distributed,   ], [Distributed,   , Processing], [  , Processing, Approach]]

>> Noun Phrases are: 
[Rogers, T. T., McClelland, J. L. Semantic Cognition, Processing Approach]

>> Named Entities are: 
[('T. T. & McClelland', 'ORG'), ('J. L. Semantic Cognition', 'ORG')]


============================ Sentence 773 =============================

( 


>> Tokens are: 
[(] 

>> PoS Tags are: 
[('(', 'PUNCT')] 

>> Dependency Tags are: 
[('(', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 774 =============================

MIT Press, 2004). 


>> Tokens are: 
[MIT, Press, ,, 2004, ), .] 

>> PoS Tags are: 
[('MIT', 'PROPN'), ('Press', 'PROPN'), (',', 'PUNCT'), ('2004', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('MIT', 'compound'), ('Press', 'ROOT'), (',', 'punct'), ('2004', 'npadvmod'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[MIT, Press], [Press, ,], [,, 2004], [2004, )], [), .]]

>> Trigrams: 
[[MIT, Press, ,], [Press, ,, 2004], [,, 2004, )], [2004, ), .]]

>> Noun Phrases are: 
[MIT Press]

>> Named Entities are: 
[('MIT Press', 'ORG'), ('2004', 'DATE')]


============================ Sentence 775 =============================

 86. 


>> Tokens are: 
[ , 86, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('86', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'ROOT'), ('86', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[ , 86], [86, .]]

>> Trigrams: 
[[ , 86, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('86', 'CARDINAL')]


============================ Sentence 776 =============================

Xu, K. et al. 


>> Tokens are: 
[Xu, ,, K., et, al, .] 

>> PoS Tags are: 
[('Xu', 'PROPN'), (',', 'PUNCT'), ('K.', 'PROPN'), ('et', 'NOUN'), ('al', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Xu', 'amod'), (',', 'punct'), ('K.', 'compound'), ('et', 'compound'), ('al', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Xu, ,], [,, K.], [K., et], [et, al], [al, .]]

>> Trigrams: 
[[Xu, ,, K.], [,, K., et], [K., et, al], [et, al, .]]

>> Noun Phrases are: 
[Xu, K. et al]

>> Named Entities are: 
[('Xu', 'PERSON')]


============================ Sentence 777 =============================

Show, attend and tell: Neural image caption generation with visual   attention. 


>> Tokens are: 
[,, attend, tell, :, Neural, image, caption, generation, visual,   , attention, .] 

>> PoS Tags are: 
[(',', 'PUNCT'), ('attend', 'VERB'), ('tell', 'VERB'), (':', 'PUNCT'), ('Neural', 'ADJ'), ('image', 'NOUN'), ('caption', 'NOUN'), ('generation', 'NOUN'), ('visual', 'ADJ'), ('  ', 'SPACE'), ('attention', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(',', 'punct'), ('attend', 'conj'), ('tell', 'conj'), (':', 'punct'), ('Neural', 'amod'), ('image', 'compound'), ('caption', 'compound'), ('generation', 'dobj'), ('visual', 'amod'), ('  ', 'compound'), ('attention', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[,, attend], [attend, tell], [tell, :], [:, Neural], [Neural, image], [image, caption], [caption, generation], [generation, visual], [visual,   ], [  , attention], [attention, .]]

>> Trigrams: 
[[,, attend, tell], [attend, tell, :], [tell, :, Neural], [:, Neural, image], [Neural, image, caption], [image, caption, generation], [caption, generation, visual], [generation, visual,   ], [visual,   , attention], [  , attention, .]]

>> Noun Phrases are: 
[Neural image caption generation, visual   attention]

>> Named Entities are: 
[]


============================ Sentence 778 =============================

In Proc. 


>> Tokens are: 
[Proc, .] 

>> PoS Tags are: 
[('Proc', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Proc', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Proc, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Proc]

>> Named Entities are: 
[]


============================ Sentence 779 =============================

International Conference on Learning Representations http:// arxiv.org/abs/1502.03044 (2015). 


>> Tokens are: 
[International, Conference, Learning, Representations, http://, arxiv.org/abs/1502.03044, (, 2015, ), .] 

>> PoS Tags are: 
[('International', 'PROPN'), ('Conference', 'PROPN'), ('Learning', 'PROPN'), ('Representations', 'PROPN'), ('http://', 'PROPN'), ('arxiv.org/abs/1502.03044', 'NOUN'), ('(', 'PUNCT'), ('2015', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('International', 'compound'), ('Conference', 'ROOT'), ('Learning', 'compound'), ('Representations', 'pobj'), ('http://', 'compound'), ('arxiv.org/abs/1502.03044', 'pobj'), ('(', 'punct'), ('2015', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[International, Conference], [Conference, Learning], [Learning, Representations], [Representations, http://], [http://, arxiv.org/abs/1502.03044], [arxiv.org/abs/1502.03044, (], [(, 2015], [2015, )], [), .]]

>> Trigrams: 
[[International, Conference, Learning], [Conference, Learning, Representations], [Learning, Representations, http://], [Representations, http://, arxiv.org/abs/1502.03044], [http://, arxiv.org/abs/1502.03044, (], [arxiv.org/abs/1502.03044, (, 2015], [(, 2015, )], [2015, ), .]]

>> Noun Phrases are: 
[International Conference, Learning Representations, http:// arxiv.org/abs/1502.03044]

>> Named Entities are: 
[('2015', 'DATE')]


============================ Sentence 780 =============================

  87. 


>> Tokens are: 
[  , 87, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('87', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('87', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 87], [87, .]]

>> Trigrams: 
[[  , 87, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('87', 'DATE')]


============================ Sentence 781 =============================

Graves, A., Mohamed, A.-R. & Hinton, G. Speech recognition with deep recurrent  neural networks. 


>> Tokens are: 
[Graves, ,, A., ,, Mohamed, ,, A.-R., &, Hinton, ,, G., Speech, recognition, deep, recurrent,  , neural, networks, .] 

>> PoS Tags are: 
[('Graves', 'NOUN'), (',', 'PUNCT'), ('A.', 'PROPN'), (',', 'PUNCT'), ('Mohamed', 'PROPN'), (',', 'PUNCT'), ('A.-R.', 'PROPN'), ('&', 'CCONJ'), ('Hinton', 'PROPN'), (',', 'PUNCT'), ('G.', 'PROPN'), ('Speech', 'PROPN'), ('recognition', 'NOUN'), ('deep', 'ADJ'), ('recurrent', 'NOUN'), (' ', 'SPACE'), ('neural', 'ADJ'), ('networks', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Graves', 'ROOT'), (',', 'punct'), ('A.', 'conj'), (',', 'punct'), ('Mohamed', 'conj'), (',', 'punct'), ('A.-R.', 'conj'), ('&', 'cc'), ('Hinton', 'conj'), (',', 'punct'), ('G.', 'compound'), ('Speech', 'compound'), ('recognition', 'appos'), ('deep', 'amod'), ('recurrent', 'amod'), (' ', 'nmod'), ('neural', 'amod'), ('networks', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Graves, ,], [,, A.], [A., ,], [,, Mohamed], [Mohamed, ,], [,, A.-R.], [A.-R., &], [&, Hinton], [Hinton, ,], [,, G.], [G., Speech], [Speech, recognition], [recognition, deep], [deep, recurrent], [recurrent,  ], [ , neural], [neural, networks], [networks, .]]

>> Trigrams: 
[[Graves, ,, A.], [,, A., ,], [A., ,, Mohamed], [,, Mohamed, ,], [Mohamed, ,, A.-R.], [,, A.-R., &], [A.-R., &, Hinton], [&, Hinton, ,], [Hinton, ,, G.], [,, G., Speech], [G., Speech, recognition], [Speech, recognition, deep], [recognition, deep, recurrent], [deep, recurrent,  ], [recurrent,  , neural], [ , neural, networks], [neural, networks, .]]

>> Noun Phrases are: 
[Graves, A., Mohamed, A.-R., Hinton, G. Speech recognition, deep recurrent  neural networks]

>> Named Entities are: 
[('Mohamed', 'ORG'), ('& Hinton', 'ORG'), ('G. Speech', 'PERSON')]


============================ Sentence 782 =============================

In Proc. 


>> Tokens are: 
[Proc, .] 

>> PoS Tags are: 
[('Proc', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Proc', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Proc, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Proc]

>> Named Entities are: 
[]


============================ Sentence 783 =============================

International Conference on Acoustics, Speech and  Signal Processing 6645–6649 (2013). 


>> Tokens are: 
[International, Conference, Acoustics, ,, Speech,  , Signal, Processing, 6645–6649, (, 2013, ), .] 

>> PoS Tags are: 
[('International', 'PROPN'), ('Conference', 'PROPN'), ('Acoustics', 'PROPN'), (',', 'PUNCT'), ('Speech', 'PROPN'), (' ', 'SPACE'), ('Signal', 'PROPN'), ('Processing', 'PROPN'), ('6645–6649', 'NUM'), ('(', 'PUNCT'), ('2013', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('International', 'compound'), ('Conference', 'ROOT'), ('Acoustics', 'pobj'), (',', 'punct'), ('Speech', 'conj'), (' ', 'conj'), ('Signal', 'compound'), ('Processing', 'compound'), ('6645–6649', 'appos'), ('(', 'punct'), ('2013', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[International, Conference], [Conference, Acoustics], [Acoustics, ,], [,, Speech], [Speech,  ], [ , Signal], [Signal, Processing], [Processing, 6645–6649], [6645–6649, (], [(, 2013], [2013, )], [), .]]

>> Trigrams: 
[[International, Conference, Acoustics], [Conference, Acoustics, ,], [Acoustics, ,, Speech], [,, Speech,  ], [Speech,  , Signal], [ , Signal, Processing], [Signal, Processing, 6645–6649], [Processing, 6645–6649, (], [6645–6649, (, 2013], [(, 2013, )], [2013, ), .]]

>> Noun Phrases are: 
[International Conference, Acoustics, Speech]

>> Named Entities are: 
[('Speech', 'ORG'), ('2013', 'DATE')]


============================ Sentence 784 =============================

  88. 


>> Tokens are: 
[  , 88, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('88', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('88', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 88], [88, .]]

>> Trigrams: 
[[  , 88, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('88', 'CARDINAL')]


============================ Sentence 785 =============================

Graves, A., Wayne, G. & Danihelka, I. Neural Turing machines. 


>> Tokens are: 
[Graves, ,, A., ,, Wayne, ,, G., &, Danihelka, ,, I., Neural, Turing, machines, .] 

>> PoS Tags are: 
[('Graves', 'NOUN'), (',', 'PUNCT'), ('A.', 'PROPN'), (',', 'PUNCT'), ('Wayne', 'PROPN'), (',', 'PUNCT'), ('G.', 'PROPN'), ('&', 'CCONJ'), ('Danihelka', 'PROPN'), (',', 'PUNCT'), ('I.', 'PROPN'), ('Neural', 'PROPN'), ('Turing', 'PROPN'), ('machines', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Graves', 'dep'), (',', 'punct'), ('A.', 'conj'), (',', 'punct'), ('Wayne', 'conj'), (',', 'punct'), ('G.', 'conj'), ('&', 'cc'), ('Danihelka', 'conj'), (',', 'punct'), ('I.', 'compound'), ('Neural', 'compound'), ('Turing', 'compound'), ('machines', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Graves, ,], [,, A.], [A., ,], [,, Wayne], [Wayne, ,], [,, G.], [G., &], [&, Danihelka], [Danihelka, ,], [,, I.], [I., Neural], [Neural, Turing], [Turing, machines], [machines, .]]

>> Trigrams: 
[[Graves, ,, A.], [,, A., ,], [A., ,, Wayne], [,, Wayne, ,], [Wayne, ,, G.], [,, G., &], [G., &, Danihelka], [&, Danihelka, ,], [Danihelka, ,, I.], [,, I., Neural], [I., Neural, Turing], [Neural, Turing, machines], [Turing, machines, .]]

>> Noun Phrases are: 
[Graves, A., Wayne, G. & Danihelka, I. Neural Turing machines]

>> Named Entities are: 
[('Wayne, G. & Danihelka', 'ORG'), ('I. Neural Turing', 'ORG')]


============================ Sentence 786 =============================

http://arxiv.org/ abs/1410.5401 (2014). 


>> Tokens are: 
[http://arxiv.org/, abs/1410.5401, (, 2014, ), .] 

>> PoS Tags are: 
[('http://arxiv.org/', 'PROPN'), ('abs/1410.5401', 'PROPN'), ('(', 'PUNCT'), ('2014', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('http://arxiv.org/', 'compound'), ('abs/1410.5401', 'ROOT'), ('(', 'punct'), ('2014', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[http://arxiv.org/, abs/1410.5401], [abs/1410.5401, (], [(, 2014], [2014, )], [), .]]

>> Trigrams: 
[[http://arxiv.org/, abs/1410.5401, (], [abs/1410.5401, (, 2014], [(, 2014, )], [2014, ), .]]

>> Noun Phrases are: 
[http://arxiv.org/ abs/1410.5401]

>> Named Entities are: 
[('2014', 'DATE')]


============================ Sentence 787 =============================

  89. 


>> Tokens are: 
[  , 89, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('89', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('89', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 89], [89, .]]

>> Trigrams: 
[[  , 89, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('89', 'CARDINAL')]


============================ Sentence 788 =============================

Weston, J. Chopra, S. & Bordes, A. Memory networks. 


>> Tokens are: 
[Weston, ,, J., Chopra, ,, S., &, Bordes, ,, A., Memory, networks, .] 

>> PoS Tags are: 
[('Weston', 'PROPN'), (',', 'PUNCT'), ('J.', 'PROPN'), ('Chopra', 'PROPN'), (',', 'PUNCT'), ('S.', 'PROPN'), ('&', 'CCONJ'), ('Bordes', 'PROPN'), (',', 'PUNCT'), ('A.', 'PROPN'), ('Memory', 'PROPN'), ('networks', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Weston', 'nsubj'), (',', 'punct'), ('J.', 'compound'), ('Chopra', 'conj'), (',', 'punct'), ('S.', 'conj'), ('&', 'cc'), ('Bordes', 'conj'), (',', 'punct'), ('A.', 'compound'), ('Memory', 'compound'), ('networks', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Weston, ,], [,, J.], [J., Chopra], [Chopra, ,], [,, S.], [S., &], [&, Bordes], [Bordes, ,], [,, A.], [A., Memory], [Memory, networks], [networks, .]]

>> Trigrams: 
[[Weston, ,, J.], [,, J., Chopra], [J., Chopra, ,], [Chopra, ,, S.], [,, S., &], [S., &, Bordes], [&, Bordes, ,], [Bordes, ,, A.], [,, A., Memory], [A., Memory, networks], [Memory, networks, .]]

>> Noun Phrases are: 
[Weston, J. Chopra, S., Bordes]

>> Named Entities are: 
[('Weston', 'GPE'), ('J. Chopra', 'PERSON'), ('S. & Bordes', 'ORG')]


============================ Sentence 789 =============================

http://arxiv.org/ abs/1410.3916 (2014). 


>> Tokens are: 
[http://arxiv.org/, abs/1410.3916, (, 2014, ), .] 

>> PoS Tags are: 
[('http://arxiv.org/', 'PRON'), ('abs/1410.3916', 'PROPN'), ('(', 'PUNCT'), ('2014', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('http://arxiv.org/', 'poss'), ('abs/1410.3916', 'ROOT'), ('(', 'punct'), ('2014', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[http://arxiv.org/, abs/1410.3916], [abs/1410.3916, (], [(, 2014], [2014, )], [), .]]

>> Trigrams: 
[[http://arxiv.org/, abs/1410.3916, (], [abs/1410.3916, (, 2014], [(, 2014, )], [2014, ), .]]

>> Noun Phrases are: 
[http://arxiv.org/ abs/1410.3916]

>> Named Entities are: 
[('2014', 'DATE')]


============================ Sentence 790 =============================

  90. 


>> Tokens are: 
[  , 90, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('90', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('90', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 90], [90, .]]

>> Trigrams: 
[[  , 90, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('90', 'CARDINAL')]


============================ Sentence 791 =============================

Weston, J., Bordes, A., Chopra, S. & Mikolov, T. 


>> Tokens are: 
[Weston, ,, J., ,, Bordes, ,, A., ,, Chopra, ,, S., &, Mikolov, ,, T.] 

>> PoS Tags are: 
[('Weston', 'PROPN'), (',', 'PUNCT'), ('J.', 'PROPN'), (',', 'PUNCT'), ('Bordes', 'PROPN'), (',', 'PUNCT'), ('A.', 'PROPN'), (',', 'PUNCT'), ('Chopra', 'PROPN'), (',', 'PUNCT'), ('S.', 'PROPN'), ('&', 'CCONJ'), ('Mikolov', 'PROPN'), (',', 'PUNCT'), ('T.', 'PROPN')] 

>> Dependency Tags are: 
[('Weston', 'ROOT'), (',', 'punct'), ('J.', 'conj'), (',', 'punct'), ('Bordes', 'conj'), (',', 'punct'), ('A.', 'conj'), (',', 'punct'), ('Chopra', 'conj'), (',', 'punct'), ('S.', 'conj'), ('&', 'cc'), ('Mikolov', 'conj'), (',', 'punct'), ('T.', 'appos')]

>> Bigrams: 
[[Weston, ,], [,, J.], [J., ,], [,, Bordes], [Bordes, ,], [,, A.], [A., ,], [,, Chopra], [Chopra, ,], [,, S.], [S., &], [&, Mikolov], [Mikolov, ,], [,, T.]]

>> Trigrams: 
[[Weston, ,, J.], [,, J., ,], [J., ,, Bordes], [,, Bordes, ,], [Bordes, ,, A.], [,, A., ,], [A., ,, Chopra], [,, Chopra, ,], [Chopra, ,, S.], [,, S., &], [S., &, Mikolov], [&, Mikolov, ,], [Mikolov, ,, T.]]

>> Noun Phrases are: 
[Weston, J., Bordes, A., Chopra, S., Mikolov, T.]

>> Named Entities are: 
[('Weston', 'GPE'), ('J.', 'GPE'), ('Bordes', 'GPE'), ('Chopra', 'ORG'), ('S. & Mikolov', 'ORG')]


============================ Sentence 792 =============================

Towards AI-complete question  answering: a set of prerequisite toy tasks. 


>> Tokens are: 
[AI, -, complete, question,  , answering, :, set, prerequisite, toy, tasks, .] 

>> PoS Tags are: 
[('AI', 'NOUN'), ('-', 'PUNCT'), ('complete', 'ADJ'), ('question', 'NOUN'), (' ', 'SPACE'), ('answering', 'VERB'), (':', 'PUNCT'), ('set', 'NOUN'), ('prerequisite', 'ADJ'), ('toy', 'NOUN'), ('tasks', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('AI', 'npadvmod'), ('-', 'punct'), ('complete', 'amod'), ('question', 'compound'), (' ', 'pobj'), ('answering', 'acl'), (':', 'punct'), ('set', 'appos'), ('prerequisite', 'compound'), ('toy', 'compound'), ('tasks', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[AI, -], [-, complete], [complete, question], [question,  ], [ , answering], [answering, :], [:, set], [set, prerequisite], [prerequisite, toy], [toy, tasks], [tasks, .]]

>> Trigrams: 
[[AI, -, complete], [-, complete, question], [complete, question,  ], [question,  , answering], [ , answering, :], [answering, :, set], [:, set, prerequisite], [set, prerequisite, toy], [prerequisite, toy, tasks], [toy, tasks, .]]

>> Noun Phrases are: 
[a set, prerequisite toy tasks]

>> Named Entities are: 
[]


============================ Sentence 793 =============================

http://arxiv.org/abs/1502.05698  (2015). 


>> Tokens are: 
[http://arxiv.org/abs/1502.05698,  , (, 2015, ), .] 

>> PoS Tags are: 
[('http://arxiv.org/abs/1502.05698', 'NOUN'), (' ', 'SPACE'), ('(', 'PUNCT'), ('2015', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('http://arxiv.org/abs/1502.05698', 'compound'), (' ', 'ROOT'), ('(', 'punct'), ('2015', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[http://arxiv.org/abs/1502.05698,  ], [ , (], [(, 2015], [2015, )], [), .]]

>> Trigrams: 
[[http://arxiv.org/abs/1502.05698,  , (], [ , (, 2015], [(, 2015, )], [2015, ), .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('2015', 'DATE')]


============================ Sentence 794 =============================

  91. 


>> Tokens are: 
[  , 91, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('91', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('91', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 91], [91, .]]

>> Trigrams: 
[[  , 91, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('91', 'CARDINAL')]


============================ Sentence 795 =============================

Hinton, G. E., Dayan, P., Frey, B. J. & Neal, R. M. 


>> Tokens are: 
[Hinton, ,, G., E., ,, Dayan, ,, P., ,, Frey, ,, B., J., &, Neal, ,, R., M.] 

>> PoS Tags are: 
[('Hinton', 'PROPN'), (',', 'PUNCT'), ('G.', 'PROPN'), ('E.', 'PROPN'), (',', 'PUNCT'), ('Dayan', 'PROPN'), (',', 'PUNCT'), ('P.', 'PROPN'), (',', 'PUNCT'), ('Frey', 'PROPN'), (',', 'PUNCT'), ('B.', 'PROPN'), ('J.', 'PROPN'), ('&', 'CCONJ'), ('Neal', 'PROPN'), (',', 'PUNCT'), ('R.', 'PROPN'), ('M.', 'PROPN')] 

>> Dependency Tags are: 
[('Hinton', 'ROOT'), (',', 'punct'), ('G.', 'compound'), ('E.', 'conj'), (',', 'punct'), ('Dayan', 'conj'), (',', 'punct'), ('P.', 'conj'), (',', 'punct'), ('Frey', 'conj'), (',', 'punct'), ('B.', 'compound'), ('J.', 'conj'), ('&', 'cc'), ('Neal', 'conj'), (',', 'punct'), ('R.', 'compound'), ('M.', 'appos')]

>> Bigrams: 
[[Hinton, ,], [,, G.], [G., E.], [E., ,], [,, Dayan], [Dayan, ,], [,, P.], [P., ,], [,, Frey], [Frey, ,], [,, B.], [B., J.], [J., &], [&, Neal], [Neal, ,], [,, R.], [R., M.]]

>> Trigrams: 
[[Hinton, ,, G.], [,, G., E.], [G., E., ,], [E., ,, Dayan], [,, Dayan, ,], [Dayan, ,, P.], [,, P., ,], [P., ,, Frey], [,, Frey, ,], [Frey, ,, B.], [,, B., J.], [B., J., &], [J., &, Neal], [&, Neal, ,], [Neal, ,, R.], [,, R., M.]]

>> Noun Phrases are: 
[Hinton, G. E., Dayan, P., Frey, B. J., Neal, R. M.]

>> Named Entities are: 
[('Hinton', 'GPE'), ('G. E.', 'PERSON'), ('Dayan', 'ORG'), ('Frey', 'ORG'), ('B. J. & Neal', 'ORG'), ('R. M.', 'PERSON')]


============================ Sentence 796 =============================

The wake-sleep algorithm for  unsupervised neural networks. 


>> Tokens are: 
[wake, -, sleep, algorithm,  , unsupervised, neural, networks, .] 

>> PoS Tags are: 
[('wake', 'VERB'), ('-', 'PUNCT'), ('sleep', 'NOUN'), ('algorithm', 'NOUN'), (' ', 'SPACE'), ('unsupervised', 'ADJ'), ('neural', 'ADJ'), ('networks', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('wake', 'amod'), ('-', 'punct'), ('sleep', 'compound'), ('algorithm', 'ROOT'), (' ', 'nmod'), ('unsupervised', 'amod'), ('neural', 'amod'), ('networks', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[wake, -], [-, sleep], [sleep, algorithm], [algorithm,  ], [ , unsupervised], [unsupervised, neural], [neural, networks], [networks, .]]

>> Trigrams: 
[[wake, -, sleep], [-, sleep, algorithm], [sleep, algorithm,  ], [algorithm,  , unsupervised], [ , unsupervised, neural], [unsupervised, neural, networks], [neural, networks, .]]

>> Noun Phrases are: 
[The wake-sleep algorithm,  unsupervised neural networks]

>> Named Entities are: 
[]


============================ Sentence 797 =============================

Science 268, 1558–1161 (1995). 


>> Tokens are: 
[Science, 268, ,, 1558–1161, (, 1995, ), .] 

>> PoS Tags are: 
[('Science', 'NOUN'), ('268', 'NUM'), (',', 'PUNCT'), ('1558–1161', 'NUM'), ('(', 'PUNCT'), ('1995', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Science', 'ROOT'), ('268', 'nummod'), (',', 'punct'), ('1558–1161', 'appos'), ('(', 'punct'), ('1995', 'npadvmod'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Science, 268], [268, ,], [,, 1558–1161], [1558–1161, (], [(, 1995], [1995, )], [), .]]

>> Trigrams: 
[[Science, 268, ,], [268, ,, 1558–1161], [,, 1558–1161, (], [1558–1161, (, 1995], [(, 1995, )], [1995, ), .]]

>> Noun Phrases are: 
[Science]

>> Named Entities are: 
[('268', 'CARDINAL'), ('1558–1161 (1995', 'DATE')]


============================ Sentence 798 =============================

  92. 


>> Tokens are: 
[  , 92, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('92', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('92', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 92], [92, .]]

>> Trigrams: 
[[  , 92, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('92', 'CARDINAL')]


============================ Sentence 799 =============================

Salakhutdinov, R. & Hinton, G. Deep Boltzmann machines. 


>> Tokens are: 
[Salakhutdinov, ,, R., &, Hinton, ,, G., Deep, Boltzmann, machines, .] 

>> PoS Tags are: 
[('Salakhutdinov', 'PROPN'), (',', 'PUNCT'), ('R.', 'PROPN'), ('&', 'CCONJ'), ('Hinton', 'PROPN'), (',', 'PUNCT'), ('G.', 'PROPN'), ('Deep', 'PROPN'), ('Boltzmann', 'PROPN'), ('machines', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Salakhutdinov', 'ROOT'), (',', 'punct'), ('R.', 'conj'), ('&', 'cc'), ('Hinton', 'conj'), (',', 'punct'), ('G.', 'compound'), ('Deep', 'compound'), ('Boltzmann', 'compound'), ('machines', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[Salakhutdinov, ,], [,, R.], [R., &], [&, Hinton], [Hinton, ,], [,, G.], [G., Deep], [Deep, Boltzmann], [Boltzmann, machines], [machines, .]]

>> Trigrams: 
[[Salakhutdinov, ,, R.], [,, R., &], [R., &, Hinton], [&, Hinton, ,], [Hinton, ,, G.], [,, G., Deep], [G., Deep, Boltzmann], [Deep, Boltzmann, machines], [Boltzmann, machines, .]]

>> Noun Phrases are: 
[Salakhutdinov, R., Hinton, G. Deep Boltzmann machines]

>> Named Entities are: 
[('Salakhutdinov', 'PERSON'), ('R. & Hinton', 'ORG'), ('G. Deep Boltzmann', 'PERSON')]


============================ Sentence 800 =============================

In Proc. 


>> Tokens are: 
[Proc, .] 

>> PoS Tags are: 
[('Proc', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Proc', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Proc, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Proc]

>> Named Entities are: 
[]


============================ Sentence 801 =============================

International  Conference on Artificial Intelligence and Statistics 448–455 (2009). 


>> Tokens are: 
[International,  , Conference, Artificial, Intelligence, Statistics, 448–455, (, 2009, ), .] 

>> PoS Tags are: 
[('International', 'PROPN'), (' ', 'SPACE'), ('Conference', 'PROPN'), ('Artificial', 'PROPN'), ('Intelligence', 'PROPN'), ('Statistics', 'PROPN'), ('448–455', 'NUM'), ('(', 'PUNCT'), ('2009', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('International', 'nmod'), (' ', 'compound'), ('Conference', 'ROOT'), ('Artificial', 'compound'), ('Intelligence', 'pobj'), ('Statistics', 'compound'), ('448–455', 'conj'), ('(', 'punct'), ('2009', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[International,  ], [ , Conference], [Conference, Artificial], [Artificial, Intelligence], [Intelligence, Statistics], [Statistics, 448–455], [448–455, (], [(, 2009], [2009, )], [), .]]

>> Trigrams: 
[[International,  , Conference], [ , Conference, Artificial], [Conference, Artificial, Intelligence], [Artificial, Intelligence, Statistics], [Intelligence, Statistics, 448–455], [Statistics, 448–455, (], [448–455, (, 2009], [(, 2009, )], [2009, ), .]]

>> Noun Phrases are: 
[International  Conference, Artificial Intelligence]

>> Named Entities are: 
[('2009', 'DATE')]


============================ Sentence 802 =============================

  93. 


>> Tokens are: 
[  , 93, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('93', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('93', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 93], [93, .]]

>> Trigrams: 
[[  , 93, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('93', 'CARDINAL')]


============================ Sentence 803 =============================

Vincent, P., Larochelle, H., Bengio, Y. & Manzagol, P.-A. Extracting and composing  robust features with denoising autoencoders. 


>> Tokens are: 
[Vincent, ,, P., ,, Larochelle, ,, H., ,, Bengio, ,, Y., &, Manzagol, ,, P.-A., Extracting, composing,  , robust, features, denoising, autoencoders, .] 

>> PoS Tags are: 
[('Vincent', 'PROPN'), (',', 'PUNCT'), ('P.', 'PROPN'), (',', 'PUNCT'), ('Larochelle', 'PROPN'), (',', 'PUNCT'), ('H.', 'PROPN'), (',', 'PUNCT'), ('Bengio', 'PROPN'), (',', 'PUNCT'), ('Y.', 'PROPN'), ('&', 'CCONJ'), ('Manzagol', 'PROPN'), (',', 'PUNCT'), ('P.-A.', 'VERB'), ('Extracting', 'VERB'), ('composing', 'VERB'), (' ', 'SPACE'), ('robust', 'ADJ'), ('features', 'NOUN'), ('denoising', 'VERB'), ('autoencoders', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Vincent', 'ROOT'), (',', 'punct'), ('P.', 'npadvmod'), (',', 'punct'), ('Larochelle', 'conj'), (',', 'punct'), ('H.', 'conj'), (',', 'punct'), ('Bengio', 'conj'), (',', 'punct'), ('Y.', 'conj'), ('&', 'cc'), ('Manzagol', 'conj'), (',', 'punct'), ('P.-A.', 'appos'), ('Extracting', 'conj'), ('composing', 'conj'), (' ', 'nmod'), ('robust', 'amod'), ('features', 'dobj'), ('denoising', 'amod'), ('autoencoders', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Vincent, ,], [,, P.], [P., ,], [,, Larochelle], [Larochelle, ,], [,, H.], [H., ,], [,, Bengio], [Bengio, ,], [,, Y.], [Y., &], [&, Manzagol], [Manzagol, ,], [,, P.-A.], [P.-A., Extracting], [Extracting, composing], [composing,  ], [ , robust], [robust, features], [features, denoising], [denoising, autoencoders], [autoencoders, .]]

>> Trigrams: 
[[Vincent, ,, P.], [,, P., ,], [P., ,, Larochelle], [,, Larochelle, ,], [Larochelle, ,, H.], [,, H., ,], [H., ,, Bengio], [,, Bengio, ,], [Bengio, ,, Y.], [,, Y., &], [Y., &, Manzagol], [&, Manzagol, ,], [Manzagol, ,, P.-A.], [,, P.-A., Extracting], [P.-A., Extracting, composing], [Extracting, composing,  ], [composing,  , robust], [ , robust, features], [robust, features, denoising], [features, denoising, autoencoders], [denoising, autoencoders, .]]

>> Noun Phrases are: 
[Vincent,  robust features, denoising autoencoders]

>> Named Entities are: 
[('Vincent', 'PERSON'), ('P.', 'GPE'), ('Larochelle', 'GPE'), ('Bengio', 'GPE'), ('Y. & Manzagol', 'ORG')]


============================ Sentence 804 =============================

In Proc. 


>> Tokens are: 
[Proc, .] 

>> PoS Tags are: 
[('Proc', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Proc', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Proc, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Proc]

>> Named Entities are: 
[]


============================ Sentence 805 =============================

25th 


>> Tokens are: 
[25th] 

>> PoS Tags are: 
[('25th', 'NOUN')] 

>> Dependency Tags are: 
[('25th', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[25th]

>> Named Entities are: 
[('25th', 'ORDINAL')]


============================ Sentence 806 =============================

International  Conference on Machine Learning 1096–1103 (2008). 


>> Tokens are: 
[International,  , Conference, Machine, Learning, 1096–1103, (, 2008, ), .] 

>> PoS Tags are: 
[('International', 'PROPN'), (' ', 'SPACE'), ('Conference', 'PROPN'), ('Machine', 'PROPN'), ('Learning', 'PROPN'), ('1096–1103', 'NUM'), ('(', 'PUNCT'), ('2008', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('International', 'nmod'), (' ', 'compound'), ('Conference', 'ROOT'), ('Machine', 'compound'), ('Learning', 'pobj'), ('1096–1103', 'nummod'), ('(', 'punct'), ('2008', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[International,  ], [ , Conference], [Conference, Machine], [Machine, Learning], [Learning, 1096–1103], [1096–1103, (], [(, 2008], [2008, )], [), .]]

>> Trigrams: 
[[International,  , Conference], [ , Conference, Machine], [Conference, Machine, Learning], [Machine, Learning, 1096–1103], [Learning, 1096–1103, (], [1096–1103, (, 2008], [(, 2008, )], [2008, ), .]]

>> Noun Phrases are: 
[International  Conference, Machine Learning]

>> Named Entities are: 
[]


============================ Sentence 807 =============================

  94. 


>> Tokens are: 
[  , 94, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('94', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('94', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 94], [94, .]]

>> Trigrams: 
[[  , 94, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('94', 'CARDINAL')]


============================ Sentence 808 =============================

Kavukcuoglu, K. et al. 


>> Tokens are: 
[Kavukcuoglu, ,, K., et, al, .] 

>> PoS Tags are: 
[('Kavukcuoglu', 'PROPN'), (',', 'PUNCT'), ('K.', 'PROPN'), ('et', 'NOUN'), ('al', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Kavukcuoglu', 'ROOT'), (',', 'punct'), ('K.', 'compound'), ('et', 'compound'), ('al', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[Kavukcuoglu, ,], [,, K.], [K., et], [et, al], [al, .]]

>> Trigrams: 
[[Kavukcuoglu, ,, K.], [,, K., et], [K., et, al], [et, al, .]]

>> Noun Phrases are: 
[Kavukcuoglu, K. et al]

>> Named Entities are: 
[]


============================ Sentence 809 =============================

Learning convolutional feature hierarchies for visual  recognition. 


>> Tokens are: 
[Learning, convolutional, feature, hierarchies, visual,  , recognition, .] 

>> PoS Tags are: 
[('Learning', 'VERB'), ('convolutional', 'ADJ'), ('feature', 'NOUN'), ('hierarchies', 'NOUN'), ('visual', 'ADJ'), (' ', 'SPACE'), ('recognition', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Learning', 'ROOT'), ('convolutional', 'amod'), ('feature', 'compound'), ('hierarchies', 'dobj'), ('visual', 'amod'), (' ', 'compound'), ('recognition', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Learning, convolutional], [convolutional, feature], [feature, hierarchies], [hierarchies, visual], [visual,  ], [ , recognition], [recognition, .]]

>> Trigrams: 
[[Learning, convolutional, feature], [convolutional, feature, hierarchies], [feature, hierarchies, visual], [hierarchies, visual,  ], [visual,  , recognition], [ , recognition, .]]

>> Noun Phrases are: 
[convolutional feature hierarchies, visual  recognition]

>> Named Entities are: 
[]


============================ Sentence 810 =============================

In Proc. 


>> Tokens are: 
[Proc, .] 

>> PoS Tags are: 
[('Proc', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Proc', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Proc, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Proc]

>> Named Entities are: 
[]


============================ Sentence 811 =============================

Advances in Neural Information Processing Systems 23  1090–1098 (2010). 


>> Tokens are: 
[Advances, Neural, Information, Processing, Systems, 23,  , 1090–1098, (, 2010, ), .] 

>> PoS Tags are: 
[('Advances', 'NOUN'), ('Neural', 'PROPN'), ('Information', 'PROPN'), ('Processing', 'PROPN'), ('Systems', 'PROPN'), ('23', 'NUM'), (' ', 'SPACE'), ('1090–1098', 'NUM'), ('(', 'PUNCT'), ('2010', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Advances', 'ROOT'), ('Neural', 'compound'), ('Information', 'compound'), ('Processing', 'compound'), ('Systems', 'pobj'), ('23', 'nummod'), (' ', 'appos'), ('1090–1098', 'appos'), ('(', 'punct'), ('2010', 'npadvmod'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Advances, Neural], [Neural, Information], [Information, Processing], [Processing, Systems], [Systems, 23], [23,  ], [ , 1090–1098], [1090–1098, (], [(, 2010], [2010, )], [), .]]

>> Trigrams: 
[[Advances, Neural, Information], [Neural, Information, Processing], [Information, Processing, Systems], [Processing, Systems, 23], [Systems, 23,  ], [23,  , 1090–1098], [ , 1090–1098, (], [1090–1098, (, 2010], [(, 2010, )], [2010, ), .]]

>> Noun Phrases are: 
[Advances, Neural Information Processing Systems]

>> Named Entities are: 
[('Neural Information Processing Systems', 'ORG')]


============================ Sentence 812 =============================

  95. 


>> Tokens are: 
[  , 95, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('95', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('95', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 95], [95, .]]

>> Trigrams: 
[[  , 95, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('95', 'CARDINAL')]


============================ Sentence 813 =============================

Gregor, K. & LeCun, Y. Learning fast approximations of sparse coding. 


>> Tokens are: 
[Gregor, ,, K., &, LeCun, ,, Y., Learning, fast, approximations, sparse, coding, .] 

>> PoS Tags are: 
[('Gregor', 'PROPN'), (',', 'PUNCT'), ('K.', 'PROPN'), ('&', 'CCONJ'), ('LeCun', 'PROPN'), (',', 'PUNCT'), ('Y.', 'PROPN'), ('Learning', 'PROPN'), ('fast', 'ADJ'), ('approximations', 'NOUN'), ('sparse', 'ADJ'), ('coding', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Gregor', 'amod'), (',', 'punct'), ('K.', 'conj'), ('&', 'cc'), ('LeCun', 'conj'), (',', 'punct'), ('Y.', 'compound'), ('Learning', 'appos'), ('fast', 'amod'), ('approximations', 'ROOT'), ('sparse', 'amod'), ('coding', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Gregor, ,], [,, K.], [K., &], [&, LeCun], [LeCun, ,], [,, Y.], [Y., Learning], [Learning, fast], [fast, approximations], [approximations, sparse], [sparse, coding], [coding, .]]

>> Trigrams: 
[[Gregor, ,, K.], [,, K., &], [K., &, LeCun], [&, LeCun, ,], [LeCun, ,, Y.], [,, Y., Learning], [Y., Learning, fast], [Learning, fast, approximations], [fast, approximations, sparse], [approximations, sparse, coding], [sparse, coding, .]]

>> Noun Phrases are: 
[Y. Learning]

>> Named Entities are: 
[('Gregor', 'PERSON'), ('K. & LeCun', 'ORG'), ('Y. Learning', 'PERSON')]


============================ Sentence 814 =============================

In Proc. 


>> Tokens are: 
[Proc, .] 

>> PoS Tags are: 
[('Proc', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Proc', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Proc, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Proc]

>> Named Entities are: 
[]


============================ Sentence 815 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 816 =============================

International Conference on Machine Learning 399–406 (2010). 


>> Tokens are: 
[International, Conference, Machine, Learning, 399–406, (, 2010, ), .] 

>> PoS Tags are: 
[('International', 'PROPN'), ('Conference', 'PROPN'), ('Machine', 'PROPN'), ('Learning', 'PROPN'), ('399–406', 'NUM'), ('(', 'PUNCT'), ('2010', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('International', 'compound'), ('Conference', 'ROOT'), ('Machine', 'compound'), ('Learning', 'pobj'), ('399–406', 'appos'), ('(', 'punct'), ('2010', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[International, Conference], [Conference, Machine], [Machine, Learning], [Learning, 399–406], [399–406, (], [(, 2010], [2010, )], [), .]]

>> Trigrams: 
[[International, Conference, Machine], [Conference, Machine, Learning], [Machine, Learning, 399–406], [Learning, 399–406, (], [399–406, (, 2010], [(, 2010, )], [2010, ), .]]

>> Noun Phrases are: 
[International Conference, Machine Learning]

>> Named Entities are: 
[('399–406', 'CARDINAL'), ('2010', 'DATE')]


============================ Sentence 817 =============================

  96. 


>> Tokens are: 
[  , 96, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('96', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('96', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 96], [96, .]]

>> Trigrams: 
[[  , 96, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('96', 'CARDINAL')]


============================ Sentence 818 =============================

Ranzato, M., Mnih, V., Susskind, J. M. & Hinton, 


>> Tokens are: 
[Ranzato, ,, M., ,, Mnih, ,, V., ,, Susskind, ,, J., M., &, Hinton, ,] 

>> PoS Tags are: 
[('Ranzato', 'PROPN'), (',', 'PUNCT'), ('M.', 'PROPN'), (',', 'PUNCT'), ('Mnih', 'PROPN'), (',', 'PUNCT'), ('V.', 'PROPN'), (',', 'PUNCT'), ('Susskind', 'PROPN'), (',', 'PUNCT'), ('J.', 'PROPN'), ('M.', 'PROPN'), ('&', 'CCONJ'), ('Hinton', 'PROPN'), (',', 'PUNCT')] 

>> Dependency Tags are: 
[('Ranzato', 'ROOT'), (',', 'punct'), ('M.', 'conj'), (',', 'punct'), ('Mnih', 'conj'), (',', 'punct'), ('V.', 'conj'), (',', 'punct'), ('Susskind', 'conj'), (',', 'punct'), ('J.', 'compound'), ('M.', 'conj'), ('&', 'cc'), ('Hinton', 'conj'), (',', 'punct')]

>> Bigrams: 
[[Ranzato, ,], [,, M.], [M., ,], [,, Mnih], [Mnih, ,], [,, V.], [V., ,], [,, Susskind], [Susskind, ,], [,, J.], [J., M.], [M., &], [&, Hinton], [Hinton, ,]]

>> Trigrams: 
[[Ranzato, ,, M.], [,, M., ,], [M., ,, Mnih], [,, Mnih, ,], [Mnih, ,, V.], [,, V., ,], [V., ,, Susskind], [,, Susskind, ,], [Susskind, ,, J.], [,, J., M.], [J., M., &], [M., &, Hinton], [&, Hinton, ,]]

>> Noun Phrases are: 
[Ranzato, M., Mnih, V., Susskind, J. M., Hinton]

>> Named Entities are: 
[('Ranzato', 'PERSON'), ('Mnih', 'PERSON'), ('J. M. & Hinton', 'ORG')]


============================ Sentence 819 =============================

G. E. Modeling natural images  using gated MRFs. 


>> Tokens are: 
[G., E., Modeling, natural, images,  , gated, MRFs, .] 

>> PoS Tags are: 
[('G.', 'PROPN'), ('E.', 'PROPN'), ('Modeling', 'PROPN'), ('natural', 'ADJ'), ('images', 'NOUN'), (' ', 'SPACE'), ('gated', 'VERB'), ('MRFs', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('G.', 'compound'), ('E.', 'nmod'), ('Modeling', 'ROOT'), ('natural', 'amod'), ('images', 'appos'), (' ', 'appos'), ('gated', 'amod'), ('MRFs', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[G., E.], [E., Modeling], [Modeling, natural], [natural, images], [images,  ], [ , gated], [gated, MRFs], [MRFs, .]]

>> Trigrams: 
[[G., E., Modeling], [E., Modeling, natural], [Modeling, natural, images], [natural, images,  ], [images,  , gated], [ , gated, MRFs], [gated, MRFs, .]]

>> Noun Phrases are: 
[G. E. Modeling, natural images, gated MRFs]

>> Named Entities are: 
[('G. E. Modeling', 'PERSON')]


============================ Sentence 820 =============================

IEEE Trans. 


>> Tokens are: 
[IEEE, Trans, .] 

>> PoS Tags are: 
[('IEEE', 'PROPN'), ('Trans', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('IEEE', 'compound'), ('Trans', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[IEEE, Trans], [Trans, .]]

>> Trigrams: 
[[IEEE, Trans, .]]

>> Noun Phrases are: 
[IEEE Trans]

>> Named Entities are: 
[('IEEE Trans', 'ORG')]


============================ Sentence 821 =============================

Pattern Anal. 


>> Tokens are: 
[Pattern, Anal, .] 

>> PoS Tags are: 
[('Pattern', 'PROPN'), ('Anal', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Pattern', 'compound'), ('Anal', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Pattern, Anal], [Anal, .]]

>> Trigrams: 
[[Pattern, Anal, .]]

>> Noun Phrases are: 
[Pattern Anal]

>> Named Entities are: 
[]


============================ Sentence 822 =============================

Machine Intell. 


>> Tokens are: 
[Machine, Intell, .] 

>> PoS Tags are: 
[('Machine', 'PROPN'), ('Intell', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Machine', 'compound'), ('Intell', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Machine, Intell], [Intell, .]]

>> Trigrams: 
[[Machine, Intell, .]]

>> Noun Phrases are: 
[Machine Intell]

>> Named Entities are: 
[('Machine Intell', 'PERSON')]


============================ Sentence 823 =============================

35, 2206–2222  (2013). 


>> Tokens are: 
[35, ,, 2206–2222,  , (, 2013, ), .] 

>> PoS Tags are: 
[('35', 'NUM'), (',', 'PUNCT'), ('2206–2222', 'NUM'), (' ', 'SPACE'), ('(', 'PUNCT'), ('2013', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('35', 'ROOT'), (',', 'punct'), ('2206–2222', 'nummod'), (' ', 'appos'), ('(', 'punct'), ('2013', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[35, ,], [,, 2206–2222], [2206–2222,  ], [ , (], [(, 2013], [2013, )], [), .]]

>> Trigrams: 
[[35, ,, 2206–2222], [,, 2206–2222,  ], [2206–2222,  , (], [ , (, 2013], [(, 2013, )], [2013, ), .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('35', 'DATE'), ('2013', 'DATE')]


============================ Sentence 824 =============================

  97. 


>> Tokens are: 
[  , 97, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('97', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('97', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 97], [97, .]]

>> Trigrams: 
[[  , 97, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('97', 'CARDINAL')]


============================ Sentence 825 =============================

Bengio, Y., Thibodeau-Laufer, E., Alain, G. & Yosinski, J. Deep generative  stochastic networks trainable by backprop. 


>> Tokens are: 
[Bengio, ,, Y., ,, Thibodeau, -, Laufer, ,, E., ,, Alain, ,, G., &, Yosinski, ,, J., Deep, generative,  , stochastic, networks, trainable, backprop, .] 

>> PoS Tags are: 
[('Bengio', 'PROPN'), (',', 'PUNCT'), ('Y.', 'PROPN'), (',', 'PUNCT'), ('Thibodeau', 'PROPN'), ('-', 'PUNCT'), ('Laufer', 'PROPN'), (',', 'PUNCT'), ('E.', 'PROPN'), (',', 'PUNCT'), ('Alain', 'PROPN'), (',', 'PUNCT'), ('G.', 'PROPN'), ('&', 'CCONJ'), ('Yosinski', 'PROPN'), (',', 'PUNCT'), ('J.', 'PROPN'), ('Deep', 'PROPN'), ('generative', 'ADJ'), (' ', 'SPACE'), ('stochastic', 'NOUN'), ('networks', 'NOUN'), ('trainable', 'ADJ'), ('backprop', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Bengio', 'npadvmod'), (',', 'punct'), ('Y.', 'conj'), (',', 'punct'), ('Thibodeau', 'compound'), ('-', 'punct'), ('Laufer', 'conj'), (',', 'punct'), ('E.', 'conj'), (',', 'punct'), ('Alain', 'conj'), (',', 'punct'), ('G.', 'conj'), ('&', 'cc'), ('Yosinski', 'conj'), (',', 'punct'), ('J.', 'compound'), ('Deep', 'nsubj'), ('generative', 'amod'), (' ', 'nmod'), ('stochastic', 'amod'), ('networks', 'nsubj'), ('trainable', 'ROOT'), ('backprop', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Bengio, ,], [,, Y.], [Y., ,], [,, Thibodeau], [Thibodeau, -], [-, Laufer], [Laufer, ,], [,, E.], [E., ,], [,, Alain], [Alain, ,], [,, G.], [G., &], [&, Yosinski], [Yosinski, ,], [,, J.], [J., Deep], [Deep, generative], [generative,  ], [ , stochastic], [stochastic, networks], [networks, trainable], [trainable, backprop], [backprop, .]]

>> Trigrams: 
[[Bengio, ,, Y.], [,, Y., ,], [Y., ,, Thibodeau], [,, Thibodeau, -], [Thibodeau, -, Laufer], [-, Laufer, ,], [Laufer, ,, E.], [,, E., ,], [E., ,, Alain], [,, Alain, ,], [Alain, ,, G.], [,, G., &], [G., &, Yosinski], [&, Yosinski, ,], [Yosinski, ,, J.], [,, J., Deep], [J., Deep, generative], [Deep, generative,  ], [generative,  , stochastic], [ , stochastic, networks], [stochastic, networks, trainable], [networks, trainable, backprop], [trainable, backprop, .]]

>> Noun Phrases are: 
[J. Deep, backprop]

>> Named Entities are: 
[('Bengio', 'PERSON'), ('Y.', 'ORG'), ('Thibodeau', 'PERSON'), ('Alain, G. & Yosinski', 'ORG'), ('J. Deep', 'PERSON')]


============================ Sentence 826 =============================

In Proc. 


>> Tokens are: 
[Proc, .] 

>> PoS Tags are: 
[('Proc', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Proc', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Proc, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Proc]

>> Named Entities are: 
[('Proc.', 'DATE')]


============================ Sentence 827 =============================

31st 


>> Tokens are: 
[31st] 

>> PoS Tags are: 
[('31st', 'NOUN')] 

>> Dependency Tags are: 
[('31st', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[31st]

>> Named Entities are: 
[('31st', 'ORDINAL')]


============================ Sentence 828 =============================

International  Conference on Machine Learning 226–234 (2014). 


>> Tokens are: 
[International,  , Conference, Machine, Learning, 226–234, (, 2014, ), .] 

>> PoS Tags are: 
[('International', 'PROPN'), (' ', 'SPACE'), ('Conference', 'PROPN'), ('Machine', 'PROPN'), ('Learning', 'PROPN'), ('226–234', 'NUM'), ('(', 'PUNCT'), ('2014', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('International', 'nmod'), (' ', 'compound'), ('Conference', 'ROOT'), ('Machine', 'compound'), ('Learning', 'pobj'), ('226–234', 'nummod'), ('(', 'punct'), ('2014', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[International,  ], [ , Conference], [Conference, Machine], [Machine, Learning], [Learning, 226–234], [226–234, (], [(, 2014], [2014, )], [), .]]

>> Trigrams: 
[[International,  , Conference], [ , Conference, Machine], [Conference, Machine, Learning], [Machine, Learning, 226–234], [Learning, 226–234, (], [226–234, (, 2014], [(, 2014, )], [2014, ), .]]

>> Noun Phrases are: 
[International  Conference, Machine Learning]

>> Named Entities are: 
[('2014', 'DATE')]


============================ Sentence 829 =============================

  98. 


>> Tokens are: 
[  , 98, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('98', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('98', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 98], [98, .]]

>> Trigrams: 
[[  , 98, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('98', 'CARDINAL')]


============================ Sentence 830 =============================

Kingma, D., Rezende, D., Mohamed, S. & Welling, M. Semi-supervised learning  with deep generative models. 


>> Tokens are: 
[Kingma, ,, D., ,, Rezende, ,, D., ,, Mohamed, ,, S., &, Welling, ,, M., Semi, -, supervised, learning,  , deep, generative, models, .] 

>> PoS Tags are: 
[('Kingma', 'PROPN'), (',', 'PUNCT'), ('D.', 'PROPN'), (',', 'PUNCT'), ('Rezende', 'PROPN'), (',', 'PUNCT'), ('D.', 'PROPN'), (',', 'PUNCT'), ('Mohamed', 'PROPN'), (',', 'PUNCT'), ('S.', 'PROPN'), ('&', 'CCONJ'), ('Welling', 'PROPN'), (',', 'PUNCT'), ('M.', 'PROPN'), ('Semi', 'ADJ'), ('-', 'ADJ'), ('supervised', 'ADJ'), ('learning', 'NOUN'), (' ', 'SPACE'), ('deep', 'ADJ'), ('generative', 'ADJ'), ('models', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Kingma', 'ROOT'), (',', 'punct'), ('D.', 'appos'), (',', 'punct'), ('Rezende', 'conj'), (',', 'punct'), ('D.', 'conj'), (',', 'punct'), ('Mohamed', 'conj'), (',', 'punct'), ('S.', 'conj'), ('&', 'cc'), ('Welling', 'conj'), (',', 'punct'), ('M.', 'compound'), ('Semi', 'amod'), ('-', 'amod'), ('supervised', 'amod'), ('learning', 'compound'), (' ', 'appos'), ('deep', 'amod'), ('generative', 'amod'), ('models', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Kingma, ,], [,, D.], [D., ,], [,, Rezende], [Rezende, ,], [,, D.], [D., ,], [,, Mohamed], [Mohamed, ,], [,, S.], [S., &], [&, Welling], [Welling, ,], [,, M.], [M., Semi], [Semi, -], [-, supervised], [supervised, learning], [learning,  ], [ , deep], [deep, generative], [generative, models], [models, .]]

>> Trigrams: 
[[Kingma, ,, D.], [,, D., ,], [D., ,, Rezende], [,, Rezende, ,], [Rezende, ,, D.], [,, D., ,], [D., ,, Mohamed], [,, Mohamed, ,], [Mohamed, ,, S.], [,, S., &], [S., &, Welling], [&, Welling, ,], [Welling, ,, M.], [,, M., Semi], [M., Semi, -], [Semi, -, supervised], [-, supervised, learning], [supervised, learning,  ], [learning,  , deep], [ , deep, generative], [deep, generative, models], [generative, models, .]]

>> Noun Phrases are: 
[Kingma, D., Rezende, D., Mohamed, S., Welling, deep generative models]

>> Named Entities are: 
[('D.', 'NORP'), ('Rezende', 'ORG'), ('D.', 'NORP'), ('Mohamed, S. & Welling', 'ORG'), ('M. Semi', 'PERSON')]


============================ Sentence 831 =============================

In Proc. 


>> Tokens are: 
[Proc, .] 

>> PoS Tags are: 
[('Proc', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Proc', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Proc, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Proc]

>> Named Entities are: 
[]


============================ Sentence 832 =============================

Advances in Neural Information Processing   


>> Tokens are: 
[Advances, Neural, Information, Processing,  ] 

>> PoS Tags are: 
[('Advances', 'NOUN'), ('Neural', 'PROPN'), ('Information', 'PROPN'), ('Processing', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Advances', 'ROOT'), ('Neural', 'compound'), ('Information', 'compound'), ('Processing', 'pobj'), (' ', 'punct')]

>> Bigrams: 
[[Advances, Neural], [Neural, Information], [Information, Processing], [Processing,  ]]

>> Trigrams: 
[[Advances, Neural, Information], [Neural, Information, Processing], [Information, Processing,  ]]

>> Noun Phrases are: 
[Advances, Neural Information Processing]

>> Named Entities are: 
[('Neural Information Processing  ', 'ORG')]


============================ Sentence 833 =============================

Systems 27 3581–3589 (2014). 


>> Tokens are: 
[Systems, 27, 3581–3589, (, 2014, ), .] 

>> PoS Tags are: 
[('Systems', 'PROPN'), ('27', 'NUM'), ('3581–3589', 'NUM'), ('(', 'PUNCT'), ('2014', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Systems', 'ROOT'), ('27', 'nummod'), ('3581–3589', 'nummod'), ('(', 'punct'), ('2014', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Systems, 27], [27, 3581–3589], [3581–3589, (], [(, 2014], [2014, )], [), .]]

>> Trigrams: 
[[Systems, 27, 3581–3589], [27, 3581–3589, (], [3581–3589, (, 2014], [(, 2014, )], [2014, ), .]]

>> Noun Phrases are: 
[Systems]

>> Named Entities are: 
[('27 3581–3589', 'DATE'), ('2014', 'DATE')]


============================ Sentence 834 =============================

  99. 


>> Tokens are: 
[  , 99, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('99', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('99', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 99], [99, .]]

>> Trigrams: 
[[  , 99, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('99', 'CARDINAL')]


============================ Sentence 835 =============================

Ba, J., Mnih, V. & Kavukcuoglu, K. Multiple object recognition with visual  attention. 


>> Tokens are: 
[Ba, ,, J., ,, Mnih, ,, V., &, Kavukcuoglu, ,, K., Multiple, object, recognition, visual,  , attention, .] 

>> PoS Tags are: 
[('Ba', 'PROPN'), (',', 'PUNCT'), ('J.', 'PROPN'), (',', 'PUNCT'), ('Mnih', 'PROPN'), (',', 'PUNCT'), ('V.', 'PROPN'), ('&', 'CCONJ'), ('Kavukcuoglu', 'PROPN'), (',', 'PUNCT'), ('K.', 'PROPN'), ('Multiple', 'PROPN'), ('object', 'NOUN'), ('recognition', 'NOUN'), ('visual', 'ADJ'), (' ', 'SPACE'), ('attention', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Ba', 'ROOT'), (',', 'punct'), ('J.', 'conj'), (',', 'punct'), ('Mnih', 'conj'), (',', 'punct'), ('V.', 'conj'), ('&', 'cc'), ('Kavukcuoglu', 'conj'), (',', 'punct'), ('K.', 'compound'), ('Multiple', 'compound'), ('object', 'compound'), ('recognition', 'conj'), ('visual', 'amod'), (' ', 'compound'), ('attention', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Ba, ,], [,, J.], [J., ,], [,, Mnih], [Mnih, ,], [,, V.], [V., &], [&, Kavukcuoglu], [Kavukcuoglu, ,], [,, K.], [K., Multiple], [Multiple, object], [object, recognition], [recognition, visual], [visual,  ], [ , attention], [attention, .]]

>> Trigrams: 
[[Ba, ,, J.], [,, J., ,], [J., ,, Mnih], [,, Mnih, ,], [Mnih, ,, V.], [,, V., &], [V., &, Kavukcuoglu], [&, Kavukcuoglu, ,], [Kavukcuoglu, ,, K.], [,, K., Multiple], [K., Multiple, object], [Multiple, object, recognition], [object, recognition, visual], [recognition, visual,  ], [visual,  , attention], [ , attention, .]]

>> Noun Phrases are: 
[Ba, J., Mnih, V., Kavukcuoglu, K. Multiple object recognition, visual  attention]

>> Named Entities are: 
[('J.', 'ORG'), ('V. & Kavukcuoglu', 'ORG'), ('K. Multiple', 'NORP')]


============================ Sentence 836 =============================

In Proc. 


>> Tokens are: 
[Proc, .] 

>> PoS Tags are: 
[('Proc', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Proc', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Proc, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Proc]

>> Named Entities are: 
[]


============================ Sentence 837 =============================

International Conference on Learning Representations http:// arxiv.org/abs/1412.7755 (2014). 


>> Tokens are: 
[International, Conference, Learning, Representations, http://, arxiv.org/abs/1412.7755, (, 2014, ), .] 

>> PoS Tags are: 
[('International', 'PROPN'), ('Conference', 'PROPN'), ('Learning', 'PROPN'), ('Representations', 'PROPN'), ('http://', 'PROPN'), ('arxiv.org/abs/1412.7755', 'VERB'), ('(', 'PUNCT'), ('2014', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('International', 'compound'), ('Conference', 'nsubj'), ('Learning', 'compound'), ('Representations', 'pobj'), ('http://', 'nsubj'), ('arxiv.org/abs/1412.7755', 'ROOT'), ('(', 'punct'), ('2014', 'npadvmod'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[International, Conference], [Conference, Learning], [Learning, Representations], [Representations, http://], [http://, arxiv.org/abs/1412.7755], [arxiv.org/abs/1412.7755, (], [(, 2014], [2014, )], [), .]]

>> Trigrams: 
[[International, Conference, Learning], [Conference, Learning, Representations], [Learning, Representations, http://], [Representations, http://, arxiv.org/abs/1412.7755], [http://, arxiv.org/abs/1412.7755, (], [arxiv.org/abs/1412.7755, (, 2014], [(, 2014, )], [2014, ), .]]

>> Noun Phrases are: 
[International Conference, Learning Representations, http://]

>> Named Entities are: 
[('2014', 'DATE')]


============================ Sentence 838 =============================

  100. 


>> Tokens are: 
[  , 100, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('100', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('100', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 100], [100, .]]

>> Trigrams: 
[[  , 100, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('100', 'CARDINAL')]


============================ Sentence 839 =============================

Mnih, V. et al. 


>> Tokens are: 
[Mnih, ,, V., et, al, .] 

>> PoS Tags are: 
[('Mnih', 'PROPN'), (',', 'PUNCT'), ('V.', 'PROPN'), ('et', 'NOUN'), ('al', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Mnih', 'ROOT'), (',', 'punct'), ('V.', 'compound'), ('et', 'compound'), ('al', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[Mnih, ,], [,, V.], [V., et], [et, al], [al, .]]

>> Trigrams: 
[[Mnih, ,, V.], [,, V., et], [V., et, al], [et, al, .]]

>> Noun Phrases are: 
[Mnih, V. et al]

>> Named Entities are: 
[('Mnih', 'PERSON')]


============================ Sentence 840 =============================

Human-level control through deep reinforcement learning. 


>> Tokens are: 
[Human, -, level, control, deep, reinforcement, learning, .] 

>> PoS Tags are: 
[('Human', 'ADJ'), ('-', 'PUNCT'), ('level', 'NOUN'), ('control', 'NOUN'), ('deep', 'ADJ'), ('reinforcement', 'NOUN'), ('learning', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Human', 'amod'), ('-', 'punct'), ('level', 'compound'), ('control', 'ROOT'), ('deep', 'amod'), ('reinforcement', 'compound'), ('learning', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Human, -], [-, level], [level, control], [control, deep], [deep, reinforcement], [reinforcement, learning], [learning, .]]

>> Trigrams: 
[[Human, -, level], [-, level, control], [level, control, deep], [control, deep, reinforcement], [deep, reinforcement, learning], [reinforcement, learning, .]]

>> Noun Phrases are: 
[Human-level control, deep reinforcement learning]

>> Named Entities are: 
[]


============================ Sentence 841 =============================

Nature   518, 529–533 (2015). 


>> Tokens are: 
[Nature,   , 518, ,, 529–533, (, 2015, ), .] 

>> PoS Tags are: 
[('Nature', 'NOUN'), ('  ', 'SPACE'), ('518', 'NUM'), (',', 'PUNCT'), ('529–533', 'NUM'), ('(', 'PUNCT'), ('2015', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Nature', 'ROOT'), ('  ', 'appos'), ('518', 'nummod'), (',', 'punct'), ('529–533', 'appos'), ('(', 'punct'), ('2015', 'npadvmod'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Nature,   ], [  , 518], [518, ,], [,, 529–533], [529–533, (], [(, 2015], [2015, )], [), .]]

>> Trigrams: 
[[Nature,   , 518], [  , 518, ,], [518, ,, 529–533], [,, 529–533, (], [529–533, (, 2015], [(, 2015, )], [2015, ), .]]

>> Noun Phrases are: 
[Nature]

>> Named Entities are: 
[('518', 'CARDINAL'), ('529–533', 'CARDINAL'), ('2015', 'DATE')]


============================ Sentence 842 =============================

 101. 


>> Tokens are: 
[ , 101, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('101', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'ROOT'), ('101', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[ , 101], [101, .]]

>> Trigrams: 
[[ , 101, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('101', 'CARDINAL')]


============================ Sentence 843 =============================

Bottou, L. 


>> Tokens are: 
[Bottou, ,, L.] 

>> PoS Tags are: 
[('Bottou', 'PROPN'), (',', 'PUNCT'), ('L.', 'PROPN')] 

>> Dependency Tags are: 
[('Bottou', 'ROOT'), (',', 'punct'), ('L.', 'appos')]

>> Bigrams: 
[[Bottou, ,], [,, L.]]

>> Trigrams: 
[[Bottou, ,, L.]]

>> Noun Phrases are: 
[Bottou, L.]

>> Named Entities are: 
[('Bottou', 'GPE')]


============================ Sentence 844 =============================

From machine learning to machine reasoning. 


>> Tokens are: 
[machine, learning, machine, reasoning, .] 

>> PoS Tags are: 
[('machine', 'NOUN'), ('learning', 'VERB'), ('machine', 'NOUN'), ('reasoning', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('machine', 'pobj'), ('learning', 'pobj'), ('machine', 'xcomp'), ('reasoning', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[machine, learning], [learning, machine], [machine, reasoning], [reasoning, .]]

>> Trigrams: 
[[machine, learning, machine], [learning, machine, reasoning], [machine, reasoning, .]]

>> Noun Phrases are: 
[machine, reasoning]

>> Named Entities are: 
[]


============================ Sentence 845 =============================

Mach. 


>> Tokens are: 
[Mach, .] 

>> PoS Tags are: 
[('Mach', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Mach', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Mach, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('Mach', 'PERSON')]


============================ Sentence 846 =============================

Learn. 


>> Tokens are: 
[Learn, .] 

>> PoS Tags are: 
[('Learn', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Learn', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Learn, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('Learn', 'ORG')]


============================ Sentence 847 =============================

94,  133–149 (2014). 


>> Tokens are: 
[94, ,,  , 133–149, (, 2014, ), .] 

>> PoS Tags are: 
[('94', 'NUM'), (',', 'PUNCT'), (' ', 'SPACE'), ('133–149', 'NUM'), ('(', 'PUNCT'), ('2014', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('94', 'ROOT'), (',', 'punct'), (' ', 'appos'), ('133–149', 'appos'), ('(', 'punct'), ('2014', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[94, ,], [,,  ], [ , 133–149], [133–149, (], [(, 2014], [2014, )], [), .]]

>> Trigrams: 
[[94, ,,  ], [,,  , 133–149], [ , 133–149, (], [133–149, (, 2014], [(, 2014, )], [2014, ), .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('94', 'CARDINAL'), ('133–149', 'CARDINAL'), ('2014', 'DATE')]


============================ Sentence 848 =============================

  102. 


>> Tokens are: 
[  , 102, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('102', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('102', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 102], [102, .]]

>> Trigrams: 
[[  , 102, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('102', 'CARDINAL')]


============================ Sentence 849 =============================

Vinyals, O., Toshev, A., Bengio, S. & Erhan, D. Show and tell: a neural image  caption generator. 


>> Tokens are: 
[Vinyals, ,, O., ,, Toshev, ,, A., ,, Bengio, ,, S., &, Erhan, ,, D., tell, :, neural, image,  , caption, generator, .] 

>> PoS Tags are: 
[('Vinyals', 'NOUN'), (',', 'PUNCT'), ('O.', 'PROPN'), (',', 'PUNCT'), ('Toshev', 'PROPN'), (',', 'PUNCT'), ('A.', 'PROPN'), (',', 'PUNCT'), ('Bengio', 'PROPN'), (',', 'PUNCT'), ('S.', 'PROPN'), ('&', 'CCONJ'), ('Erhan', 'PROPN'), (',', 'PUNCT'), ('D.', 'PROPN'), ('tell', 'VERB'), (':', 'PUNCT'), ('neural', 'ADJ'), ('image', 'NOUN'), (' ', 'SPACE'), ('caption', 'NOUN'), ('generator', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Vinyals', 'ROOT'), (',', 'punct'), ('O.', 'appos'), (',', 'punct'), ('Toshev', 'conj'), (',', 'punct'), ('A.', 'conj'), (',', 'punct'), ('Bengio', 'conj'), (',', 'punct'), ('S.', 'conj'), ('&', 'cc'), ('Erhan', 'conj'), (',', 'punct'), ('D.', 'compound'), ('tell', 'conj'), (':', 'punct'), ('neural', 'amod'), ('image', 'nmod'), (' ', 'prep'), ('caption', 'compound'), ('generator', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Vinyals, ,], [,, O.], [O., ,], [,, Toshev], [Toshev, ,], [,, A.], [A., ,], [,, Bengio], [Bengio, ,], [,, S.], [S., &], [&, Erhan], [Erhan, ,], [,, D.], [D., tell], [tell, :], [:, neural], [neural, image], [image,  ], [ , caption], [caption, generator], [generator, .]]

>> Trigrams: 
[[Vinyals, ,, O.], [,, O., ,], [O., ,, Toshev], [,, Toshev, ,], [Toshev, ,, A.], [,, A., ,], [A., ,, Bengio], [,, Bengio, ,], [Bengio, ,, S.], [,, S., &], [S., &, Erhan], [&, Erhan, ,], [Erhan, ,, D.], [,, D., tell], [D., tell, :], [tell, :, neural], [:, neural, image], [neural, image,  ], [image,  , caption], [ , caption, generator], [caption, generator, .]]

>> Noun Phrases are: 
[Vinyals, O., Toshev, A., Bengio, S., Erhan, D. Show, a neural image  caption generator]

>> Named Entities are: 
[('Bengio', 'GPE'), ('S. & Erhan', 'ORG')]


============================ Sentence 850 =============================

In Proc. 


>> Tokens are: 
[Proc, .] 

>> PoS Tags are: 
[('Proc', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Proc', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Proc, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Proc]

>> Named Entities are: 
[]


============================ Sentence 851 =============================

International Conference on Machine Learning http:// arxiv.org/abs/1502.03044 (2014). 


>> Tokens are: 
[International, Conference, Machine, Learning, http://, arxiv.org/abs/1502.03044, (, 2014, ), .] 

>> PoS Tags are: 
[('International', 'PROPN'), ('Conference', 'PROPN'), ('Machine', 'PROPN'), ('Learning', 'PROPN'), ('http://', 'PROPN'), ('arxiv.org/abs/1502.03044', 'NOUN'), ('(', 'PUNCT'), ('2014', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('International', 'compound'), ('Conference', 'ROOT'), ('Machine', 'compound'), ('Learning', 'compound'), ('http://', 'compound'), ('arxiv.org/abs/1502.03044', 'pobj'), ('(', 'punct'), ('2014', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[International, Conference], [Conference, Machine], [Machine, Learning], [Learning, http://], [http://, arxiv.org/abs/1502.03044], [arxiv.org/abs/1502.03044, (], [(, 2014], [2014, )], [), .]]

>> Trigrams: 
[[International, Conference, Machine], [Conference, Machine, Learning], [Machine, Learning, http://], [Learning, http://, arxiv.org/abs/1502.03044], [http://, arxiv.org/abs/1502.03044, (], [arxiv.org/abs/1502.03044, (, 2014], [(, 2014, )], [2014, ), .]]

>> Noun Phrases are: 
[International Conference, Machine Learning http:// arxiv.org/abs/1502.03044]

>> Named Entities are: 
[('2014', 'DATE')]


============================ Sentence 852 =============================

 103. 


>> Tokens are: 
[ , 103, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('103', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'ROOT'), ('103', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[ , 103], [103, .]]

>> Trigrams: 
[[ , 103, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('103', 'CARDINAL')]


============================ Sentence 853 =============================

van der Maaten, L. & Hinton, G. E. Visualizing data using t-SNE. 


>> Tokens are: 
[van, der, Maaten, ,, L., &, Hinton, ,, G., E., Visualizing, data, t, -, SNE, .] 

>> PoS Tags are: 
[('van', 'NOUN'), ('der', 'NOUN'), ('Maaten', 'PROPN'), (',', 'PUNCT'), ('L.', 'PROPN'), ('&', 'CCONJ'), ('Hinton', 'PROPN'), (',', 'PUNCT'), ('G.', 'PROPN'), ('E.', 'PROPN'), ('Visualizing', 'PROPN'), ('data', 'NOUN'), ('t', 'NOUN'), ('-', 'PUNCT'), ('SNE', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('van', 'compound'), ('der', 'ROOT'), ('Maaten', 'appos'), (',', 'punct'), ('L.', 'conj'), ('&', 'cc'), ('Hinton', 'conj'), (',', 'punct'), ('G.', 'compound'), ('E.', 'compound'), ('Visualizing', 'compound'), ('data', 'appos'), ('t', 'compound'), ('-', 'punct'), ('SNE', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[van, der], [der, Maaten], [Maaten, ,], [,, L.], [L., &], [&, Hinton], [Hinton, ,], [,, G.], [G., E.], [E., Visualizing], [Visualizing, data], [data, t], [t, -], [-, SNE], [SNE, .]]

>> Trigrams: 
[[van, der, Maaten], [der, Maaten, ,], [Maaten, ,, L.], [,, L., &], [L., &, Hinton], [&, Hinton, ,], [Hinton, ,, G.], [,, G., E.], [G., E., Visualizing], [E., Visualizing, data], [Visualizing, data, t], [data, t, -], [t, -, SNE], [-, SNE, .]]

>> Noun Phrases are: 
[van der, Maaten, L., Hinton, G. E. Visualizing data, t-SNE]

>> Named Entities are: 
[('Maaten', 'PERSON'), ('L. & Hinton', 'ORG'), ('G. E. Visualizing', 'PERSON')]


============================ Sentence 854 =============================

J. Mach. 


>> Tokens are: 
[J., Mach, .] 

>> PoS Tags are: 
[('J.', 'PROPN'), ('Mach', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('J.', 'compound'), ('Mach', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[J., Mach], [Mach, .]]

>> Trigrams: 
[[J., Mach, .]]

>> Noun Phrases are: 
[J. Mach]

>> Named Entities are: 
[('J. Mach', 'PERSON')]


============================ Sentence 855 =============================

Learn. 


>> Tokens are: 
[Learn, .] 

>> PoS Tags are: 
[('Learn', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Learn', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Learn, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('Learn', 'ORG')]


============================ Sentence 856 =============================

Research 9, 2579–2605 (2008). 


>> Tokens are: 
[Research, 9, ,, 2579–2605, (, 2008, ), .] 

>> PoS Tags are: 
[('Research', 'NOUN'), ('9', 'NUM'), (',', 'PUNCT'), ('2579–2605', 'NUM'), ('(', 'PUNCT'), ('2008', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Research', 'ROOT'), ('9', 'nummod'), (',', 'punct'), ('2579–2605', 'appos'), ('(', 'punct'), ('2008', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Research, 9], [9, ,], [,, 2579–2605], [2579–2605, (], [(, 2008], [2008, )], [), .]]

>> Trigrams: 
[[Research, 9, ,], [9, ,, 2579–2605], [,, 2579–2605, (], [2579–2605, (, 2008], [(, 2008, )], [2008, ), .]]

>> Noun Phrases are: 
[Research]

>> Named Entities are: 
[('9, 2579–2605 (2008', 'DATE')]


============================ Sentence 857 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 858 =============================

Acknowledgements The authors would like to thank the Natural Sciences and  Engineering Research Council of Canada, the Canadian Institute For Advanced  Research (CIFAR), the National Science Foundation and Office of Naval Research  for support. 


>> Tokens are: 
[Acknowledgements, authors, like, thank, Natural, Sciences,  , Engineering, Research, Council, Canada, ,, Canadian, Institute, Advanced,  , Research, (, CIFAR, ), ,, National, Science, Foundation, Office, Naval, Research,  , support, .] 

>> PoS Tags are: 
[('Acknowledgements', 'NOUN'), ('authors', 'NOUN'), ('like', 'VERB'), ('thank', 'VERB'), ('Natural', 'PROPN'), ('Sciences', 'PROPN'), (' ', 'SPACE'), ('Engineering', 'PROPN'), ('Research', 'PROPN'), ('Council', 'PROPN'), ('Canada', 'PROPN'), (',', 'PUNCT'), ('Canadian', 'PROPN'), ('Institute', 'PROPN'), ('Advanced', 'PROPN'), (' ', 'SPACE'), ('Research', 'PROPN'), ('(', 'PUNCT'), ('CIFAR', 'PROPN'), (')', 'PUNCT'), (',', 'PUNCT'), ('National', 'PROPN'), ('Science', 'PROPN'), ('Foundation', 'PROPN'), ('Office', 'PROPN'), ('Naval', 'PROPN'), ('Research', 'PROPN'), (' ', 'SPACE'), ('support', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Acknowledgements', 'npadvmod'), ('authors', 'nsubj'), ('like', 'ROOT'), ('thank', 'xcomp'), ('Natural', 'compound'), ('Sciences', 'dobj'), (' ', 'compound'), ('Engineering', 'compound'), ('Research', 'compound'), ('Council', 'conj'), ('Canada', 'pobj'), (',', 'punct'), ('Canadian', 'compound'), ('Institute', 'dobj'), ('Advanced', 'nmod'), (' ', 'nmod'), ('Research', 'pobj'), ('(', 'punct'), ('CIFAR', 'appos'), (')', 'punct'), (',', 'punct'), ('National', 'compound'), ('Science', 'compound'), ('Foundation', 'conj'), ('Office', 'conj'), ('Naval', 'compound'), ('Research', 'pobj'), (' ', 'dobj'), ('support', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Acknowledgements, authors], [authors, like], [like, thank], [thank, Natural], [Natural, Sciences], [Sciences,  ], [ , Engineering], [Engineering, Research], [Research, Council], [Council, Canada], [Canada, ,], [,, Canadian], [Canadian, Institute], [Institute, Advanced], [Advanced,  ], [ , Research], [Research, (], [(, CIFAR], [CIFAR, )], [), ,], [,, National], [National, Science], [Science, Foundation], [Foundation, Office], [Office, Naval], [Naval, Research], [Research,  ], [ , support], [support, .]]

>> Trigrams: 
[[Acknowledgements, authors, like], [authors, like, thank], [like, thank, Natural], [thank, Natural, Sciences], [Natural, Sciences,  ], [Sciences,  , Engineering], [ , Engineering, Research], [Engineering, Research, Council], [Research, Council, Canada], [Council, Canada, ,], [Canada, ,, Canadian], [,, Canadian, Institute], [Canadian, Institute, Advanced], [Institute, Advanced,  ], [Advanced,  , Research], [ , Research, (], [Research, (, CIFAR], [(, CIFAR, )], [CIFAR, ), ,], [), ,, National], [,, National, Science], [National, Science, Foundation], [Science, Foundation, Office], [Foundation, Office, Naval], [Office, Naval, Research], [Naval, Research,  ], [Research,  , support], [ , support, .]]

>> Noun Phrases are: 
[The authors, the Natural Sciences,  Engineering Research Council, Canada, the Canadian Institute, Advanced  Research, (CIFAR, the National Science Foundation, Office, Naval Research, support]

>> Named Entities are: 
[('the Natural Sciences', 'ORG'), ('the Canadian Institute For Advanced  Research', 'ORG'), ('the National Science Foundation and Office of Naval Research', 'ORG')]


============================ Sentence 859 =============================

Y.L. and Y.B. are CIFAR fellows. 


>> Tokens are: 
[Y.L., Y.B., CIFAR, fellows, .] 

>> PoS Tags are: 
[('Y.L.', 'PROPN'), ('Y.B.', 'PROPN'), ('CIFAR', 'PROPN'), ('fellows', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Y.L.', 'nsubj'), ('Y.B.', 'conj'), ('CIFAR', 'compound'), ('fellows', 'attr'), ('.', 'punct')]

>> Bigrams: 
[[Y.L., Y.B.], [Y.B., CIFAR], [CIFAR, fellows], [fellows, .]]

>> Trigrams: 
[[Y.L., Y.B., CIFAR], [Y.B., CIFAR, fellows], [CIFAR, fellows, .]]

>> Noun Phrases are: 
[Y.L., Y.B., CIFAR fellows]

>> Named Entities are: 
[('Y.L.', 'GPE'), ('Y.B.', 'GPE')]


============================ Sentence 860 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 861 =============================

Author Information Reprints and permissions information is available at  www.nature.com/reprints. 


>> Tokens are: 
[Author, Information, Reprints, permissions, information, available,  , www.nature.com/reprints, .] 

>> PoS Tags are: 
[('Author', 'NOUN'), ('Information', 'PROPN'), ('Reprints', 'PROPN'), ('permissions', 'NOUN'), ('information', 'NOUN'), ('available', 'ADJ'), (' ', 'SPACE'), ('www.nature.com/reprints', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Author', 'compound'), ('Information', 'compound'), ('Reprints', 'nsubj'), ('permissions', 'compound'), ('information', 'conj'), ('available', 'acomp'), (' ', 'det'), ('www.nature.com/reprints', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Author, Information], [Information, Reprints], [Reprints, permissions], [permissions, information], [information, available], [available,  ], [ , www.nature.com/reprints], [www.nature.com/reprints, .]]

>> Trigrams: 
[[Author, Information, Reprints], [Information, Reprints, permissions], [Reprints, permissions, information], [permissions, information, available], [information, available,  ], [available,  , www.nature.com/reprints], [ , www.nature.com/reprints, .]]

>> Noun Phrases are: 
[Author Information Reprints, permissions information,  www.nature.com/reprints]

>> Named Entities are: 
[]


============================ Sentence 862 =============================

The authors declare no competing financial  interests. 


>> Tokens are: 
[authors, declare, competing, financial,  , interests, .] 

>> PoS Tags are: 
[('authors', 'NOUN'), ('declare', 'VERB'), ('competing', 'VERB'), ('financial', 'ADJ'), (' ', 'SPACE'), ('interests', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('authors', 'nsubj'), ('declare', 'ROOT'), ('competing', 'amod'), ('financial', 'amod'), (' ', 'compound'), ('interests', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[authors, declare], [declare, competing], [competing, financial], [financial,  ], [ , interests], [interests, .]]

>> Trigrams: 
[[authors, declare, competing], [declare, competing, financial], [competing, financial,  ], [financial,  , interests], [ , interests, .]]

>> Noun Phrases are: 
[The authors, no competing financial  interests]

>> Named Entities are: 
[]


============================ Sentence 863 =============================

Readers are welcome to comment on the online version of this  paper at go.nature.com/7cjbaa. 


>> Tokens are: 
[Readers, welcome, comment, online, version,  , paper, go.nature.com/7cjbaa, .] 

>> PoS Tags are: 
[('Readers', 'NOUN'), ('welcome', 'ADJ'), ('comment', 'VERB'), ('online', 'ADJ'), ('version', 'NOUN'), (' ', 'SPACE'), ('paper', 'NOUN'), ('go.nature.com/7cjbaa', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Readers', 'nsubj'), ('welcome', 'acomp'), ('comment', 'xcomp'), ('online', 'amod'), ('version', 'pobj'), (' ', 'compound'), ('paper', 'pobj'), ('go.nature.com/7cjbaa', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Readers, welcome], [welcome, comment], [comment, online], [online, version], [version,  ], [ , paper], [paper, go.nature.com/7cjbaa], [go.nature.com/7cjbaa, .]]

>> Trigrams: 
[[Readers, welcome, comment], [welcome, comment, online], [comment, online, version], [online, version,  ], [version,  , paper], [ , paper, go.nature.com/7cjbaa], [paper, go.nature.com/7cjbaa, .]]

>> Noun Phrases are: 
[Readers, the online version, this  paper, go.nature.com/7cjbaa]

>> Named Entities are: 
[]


============================ Sentence 864 =============================

Correspondence should be addressed to Y.L.  (yann@cs.nyu.edu). 


>> Tokens are: 
[Correspondence, addressed, Y.L.,  , (, yann@cs.nyu.edu, ), .] 

>> PoS Tags are: 
[('Correspondence', 'NOUN'), ('addressed', 'VERB'), ('Y.L.', 'PROPN'), (' ', 'SPACE'), ('(', 'PUNCT'), ('yann@cs.nyu.edu', 'X'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Correspondence', 'nsubjpass'), ('addressed', 'ROOT'), ('Y.L.', 'nmod'), (' ', 'pobj'), ('(', 'punct'), ('yann@cs.nyu.edu', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Correspondence, addressed], [addressed, Y.L.], [Y.L.,  ], [ , (], [(, yann@cs.nyu.edu], [yann@cs.nyu.edu, )], [), .]]

>> Trigrams: 
[[Correspondence, addressed, Y.L.], [addressed, Y.L.,  ], [Y.L.,  , (], [ , (, yann@cs.nyu.edu], [(, yann@cs.nyu.edu, )], [yann@cs.nyu.edu, ), .]]

>> Noun Phrases are: 
[Correspondence]

>> Named Entities are: 
[('Y.L.', 'GPE')]


============================ Sentence 865 =============================

 4 4 4  |   


>> Tokens are: 
[ , 4, 4, 4,  , |,  ] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('4', 'NUM'), ('4', 'NUM'), ('4', 'NUM'), (' ', 'SPACE'), ('|', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT'), ('4', 'nummod'), ('4', 'compound'), ('4', 'nummod'), (' ', 'punct'), ('|', 'npadvmod'), (' ', 'punct')]

>> Bigrams: 
[[ , 4], [4, 4], [4, 4], [4,  ], [ , |], [|,  ]]

>> Trigrams: 
[[ , 4, 4], [4, 4, 4], [4, 4,  ], [4,  , |], [ , |,  ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 866 =============================

N A T U R E  |  V O L  5 2 1  |  2 8  M A Y  2 0 1 5  REVIEWINSIGHT  © 2015 Macmillan Publishers Limited. 


>> Tokens are: 
[N, T, U, R, E,  , |,  , V, O, L,  , 5, 2, 1,  , |,  , 2, 8,  , M, Y,  , 2, 0, 1, 5,  , REVIEWINSIGHT,  , ©, 2015, Macmillan, Publishers, Limited, .] 

>> PoS Tags are: 
[('N', 'PROPN'), ('T', 'NOUN'), ('U', 'NOUN'), ('R', 'NOUN'), ('E', 'NOUN'), (' ', 'SPACE'), ('|', 'NOUN'), (' ', 'SPACE'), ('V', 'NOUN'), ('O', 'NOUN'), ('L', 'NOUN'), (' ', 'SPACE'), ('5', 'NUM'), ('2', 'NUM'), ('1', 'NUM'), (' ', 'SPACE'), ('|', 'NOUN'), (' ', 'SPACE'), ('2', 'NUM'), ('8', 'NUM'), (' ', 'SPACE'), ('M', 'PROPN'), ('Y', 'PROPN'), (' ', 'SPACE'), ('2', 'NUM'), ('0', 'NUM'), ('1', 'NUM'), ('5', 'NUM'), (' ', 'SPACE'), ('REVIEWINSIGHT', 'X'), (' ', 'SPACE'), ('©', 'ADJ'), ('2015', 'NUM'), ('Macmillan', 'PROPN'), ('Publishers', 'PROPN'), ('Limited', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('N', 'compound'), ('T', 'compound'), ('U', 'compound'), ('R', 'compound'), ('E', 'nsubj'), (' ', 'appos'), ('|', 'npadvmod'), (' ', 'punct'), ('V', 'compound'), ('O', 'appos'), ('L', 'appos'), (' ', 'appos'), ('5', 'compound'), ('2', 'compound'), ('1', 'nummod'), (' ', 'punct'), ('|', 'npadvmod'), (' ', 'appos'), ('2', 'compound'), ('8', 'nummod'), (' ', 'compound'), ('M', 'compound'), ('Y', 'nmod'), (' ', 'appos'), ('2', 'nummod'), ('0', 'quantmod'), ('1', 'compound'), ('5', 'nummod'), (' ', 'appos'), ('REVIEWINSIGHT', 'ROOT'), (' ', 'compound'), ('©', 'amod'), ('2015', 'nummod'), ('Macmillan', 'compound'), ('Publishers', 'compound'), ('Limited', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[N, T], [T, U], [U, R], [R, E], [E,  ], [ , |], [|,  ], [ , V], [V, O], [O, L], [L,  ], [ , 5], [5, 2], [2, 1], [1,  ], [ , |], [|,  ], [ , 2], [2, 8], [8,  ], [ , M], [M, Y], [Y,  ], [ , 2], [2, 0], [0, 1], [1, 5], [5,  ], [ , REVIEWINSIGHT], [REVIEWINSIGHT,  ], [ , ©], [©, 2015], [2015, Macmillan], [Macmillan, Publishers], [Publishers, Limited], [Limited, .]]

>> Trigrams: 
[[N, T, U], [T, U, R], [U, R, E], [R, E,  ], [E,  , |], [ , |,  ], [|,  , V], [ , V, O], [V, O, L], [O, L,  ], [L,  , 5], [ , 5, 2], [5, 2, 1], [2, 1,  ], [1,  , |], [ , |,  ], [|,  , 2], [ , 2, 8], [2, 8,  ], [8,  , M], [ , M, Y], [M, Y,  ], [Y,  , 2], [ , 2, 0], [2, 0, 1], [0, 1, 5], [1, 5,  ], [5,  , REVIEWINSIGHT], [ , REVIEWINSIGHT,  ], [REVIEWINSIGHT,  , ©], [ , ©, 2015], [©, 2015, Macmillan], [2015, Macmillan, Publishers], [Macmillan, Publishers, Limited], [Publishers, Limited, .]]

>> Noun Phrases are: 
[N A T U R E, V O, L,  © 2015 Macmillan Publishers Limited]

>> Named Entities are: 
[('2', 'CARDINAL'), ('2015', 'DATE'), ('Macmillan Publishers Limited', 'ORG')]


============================ Sentence 867 =============================

All rights reserved 


>> Tokens are: 
[rights, reserved] 

>> PoS Tags are: 
[('rights', 'NOUN'), ('reserved', 'VERB')] 

>> Dependency Tags are: 
[('rights', 'ROOT'), ('reserved', 'acl')]

>> Bigrams: 
[[rights, reserved]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[All rights]

>> Named Entities are: 
[]
