

========================== Sentence 1 ===========================

 AI-9 Fuzzy Logic Systems (FLS) produce acceptable but definite output in response to incomplete, ambiguous, distorted, or inaccurate (fuzzy) input. 

Tokens are: 
>> ['AI', '-9', 'Fuzzy', 'Logic', 'Systems', '(', 'FLS', ')', 'produce', 'acceptable', 'but', 'definite', 'output', 'in', 'response', 'to', 'incomplete', ',', 'ambiguous', ',', 'distorted', ',', 'or', 'inaccurate', '(', 'fuzzy', ')', 'input', '.'] 

 UPOS tags are: 
>> [('AI', 'VERB'), ('-9', 'NUM'), ('Fuzzy', 'ADJ'), ('Logic', 'NOUN'), ('Systems', 'NOUN'), ('(', 'PUNCT'), ('FLS', 'PROPN'), (')', 'PUNCT'), ('produce', 'VERB'), ('acceptable', 'ADJ'), ('but', 'CCONJ'), ('definite', 'ADJ'), ('output', 'NOUN'), ('in', 'ADP'), ('response', 'NOUN'), ('to', 'ADP'), ('incomplete', 'ADJ'), (',', 'PUNCT'), ('ambiguous', 'ADJ'), (',', 'PUNCT'), ('distorted', 'ADJ'), (',', 'PUNCT'), ('or', 'CCONJ'), ('inaccurate', 'ADJ'), ('(', 'PUNCT'), ('fuzzy', 'ADJ'), (')', 'PUNCT'), ('input', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('AI', 'VB'), ('-9', 'CD'), ('Fuzzy', 'JJ'), ('Logic', 'NN'), ('Systems', 'NNS'), ('(', '-LRB-'), ('FLS', 'NNP'), (')', '-RRB-'), ('produce', 'VBP'), ('acceptable', 'JJ'), ('but', 'CC'), ('definite', 'JJ'), ('output', 'NN'), ('in', 'IN'), ('response', 'NN'), ('to', 'IN'), ('incomplete', 'JJ'), (',', ','), ('ambiguous', 'JJ'), (',', ','), ('distorted', 'JJ'), (',', ','), ('or', 'CC'), ('inaccurate', 'JJ'), ('(', '-LRB-'), ('fuzzy', 'JJ'), (')', '-RRB-'), ('input', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('AI', 'be'), ('-9', '-9'), ('Fuzzy', 'fuzzy'), ('Logic', 'logic'), ('Systems', 'system'), ('(', '('), ('FLS', 'FLS'), (')', ')'), ('produce', 'produce'), ('acceptable', 'acceptable'), ('but', 'but'), ('definite', 'definite'), ('output', 'output'), ('in', 'in'), ('response', 'response'), ('to', 'to'), ('incomplete', 'incomplete'), (',', ','), ('ambiguous', 'ambiguous'), (',', ','), ('distorted', 'distort'), (',', ','), ('or', 'or'), ('inaccurate', 'inaccurate'), ('(', '('), ('fuzzy', 'fuzzy'), (')', ')'), ('input', 'input'), ('.', '.')] 

 Dependency tags are: 
>> [(('AI', 'root'), 'root'), (('-9', 'Systems'), 'nummod'), (('Fuzzy', 'Systems'), 'amod'), (('Logic', 'Systems'), 'compound'), (('Systems', 'AI'), 'nsubj'), (('(', 'FLS'), 'punct'), (('FLS', 'Systems'), 'appos'), ((')', 'FLS'), 'punct'), (('produce', 'AI'), 'parataxis'), (('acceptable', 'output'), 'amod'), (('but', 'definite'), 'cc'), (('definite', 'acceptable'), 'conj'), (('output', 'produce'), 'obj'), (('in', 'response'), 'case'), (('response', 'output'), 'nmod'), (('to', 'input'), 'case'), (('incomplete', 'input'), 'amod'), ((',', 'ambiguous'), 'punct'), (('ambiguous', 'incomplete'), 'conj'), ((',', 'distorted'), 'punct'), (('distorted', 'incomplete'), 'conj'), ((',', 'inaccurate'), 'punct'), (('or', 'inaccurate'), 'cc'), (('inaccurate', 'incomplete'), 'conj'), (('(', 'fuzzy'), 'punct'), (('fuzzy', 'input'), 'amod'), ((')', 'fuzzy'), 'punct'), (('input', 'response'), 'nmod'), (('.', 'AI'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 2 ===========================

 What is Fuzzy Logic? 

Tokens are: 
>> ['What', 'is', 'Fuzzy', 'Logic', '?'] 

 UPOS tags are: 
>> [('What', 'PRON'), ('is', 'AUX'), ('Fuzzy', 'ADJ'), ('Logic', 'PROPN'), ('?', 'PUNCT')] 

 XPOS tags are: 
>> [('What', 'WP'), ('is', 'VBZ'), ('Fuzzy', 'JJ'), ('Logic', 'NNP'), ('?', '.')] 

 Lemmas are: 
>> [('What', 'what'), ('is', 'be'), ('Fuzzy', 'fuzzy'), ('Logic', 'logic'), ('?', '?')] 

 Dependency tags are: 
>> [(('What', 'root'), 'root'), (('is', 'What'), 'cop'), (('Fuzzy', 'Logic'), 'amod'), (('Logic', 'What'), 'nsubj'), (('?', 'What'), 'punct')]

 Named Entities are: 
>> [('Fuzzy Logic', 'PERSON')]

========================== Sentence 3 ===========================

 Fuzzy Logic (FL) is a method of reasoning that resembles human reasoning. 

Tokens are: 
>> ['Fuzzy', 'Logic', '(', 'FL', ')', 'is', 'a', 'method', 'of', 'reasoning', 'that', 'resembles', 'human', 'reasoning', '.'] 

 UPOS tags are: 
>> [('Fuzzy', 'ADJ'), ('Logic', 'PROPN'), ('(', 'PUNCT'), ('FL', 'PROPN'), (')', 'PUNCT'), ('is', 'AUX'), ('a', 'DET'), ('method', 'NOUN'), ('of', 'ADP'), ('reasoning', 'NOUN'), ('that', 'PRON'), ('resembles', 'VERB'), ('human', 'ADJ'), ('reasoning', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Fuzzy', 'JJ'), ('Logic', 'NNP'), ('(', '-LRB-'), ('FL', 'NNP'), (')', '-RRB-'), ('is', 'VBZ'), ('a', 'DT'), ('method', 'NN'), ('of', 'IN'), ('reasoning', 'NN'), ('that', 'WDT'), ('resembles', 'VBZ'), ('human', 'JJ'), ('reasoning', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('Fuzzy', 'fuzzy'), ('Logic', 'logic'), ('(', '('), ('FL', 'FL'), (')', ')'), ('is', 'be'), ('a', 'a'), ('method', 'method'), ('of', 'of'), ('reasoning', 'reasoning'), ('that', 'that'), ('resembles', 'resemble'), ('human', 'human'), ('reasoning', 'reasoning'), ('.', '.')] 

 Dependency tags are: 
>> [(('Fuzzy', 'Logic'), 'amod'), (('Logic', 'method'), 'nsubj'), (('(', 'FL'), 'punct'), (('FL', 'Logic'), 'appos'), ((')', 'FL'), 'punct'), (('is', 'method'), 'cop'), (('a', 'method'), 'det'), (('method', 'root'), 'root'), (('of', 'reasoning'), 'case'), (('reasoning', 'method'), 'nmod'), (('that', 'resembles'), 'nsubj'), (('resembles', 'reasoning'), 'acl:relcl'), (('human', 'reasoning'), 'amod'), (('reasoning', 'resembles'), 'obj'), (('.', 'method'), 'punct')]

 Named Entities are: 
>> [('FL', 'GPE')]

========================== Sentence 4 ===========================

 The approach of FL imitates the way of decision making in humans that involves all intermediate possibilities between digital values YES and NO. 

Tokens are: 
>> ['The', 'approach', 'of', 'FL', 'imitates', 'the', 'way', 'of', 'decision', 'making', 'in', 'humans', 'that', 'involves', 'all', 'intermediate', 'possibilities', 'between', 'digital', 'values', 'YES', 'and', 'NO', '.'] 

 UPOS tags are: 
>> [('The', 'DET'), ('approach', 'NOUN'), ('of', 'ADP'), ('FL', 'PROPN'), ('imitates', 'VERB'), ('the', 'DET'), ('way', 'NOUN'), ('of', 'ADP'), ('decision', 'NOUN'), ('making', 'VERB'), ('in', 'ADP'), ('humans', 'NOUN'), ('that', 'PRON'), ('involves', 'VERB'), ('all', 'DET'), ('intermediate', 'ADJ'), ('possibilities', 'NOUN'), ('between', 'ADP'), ('digital', 'ADJ'), ('values', 'NOUN'), ('YES', 'INTJ'), ('and', 'CCONJ'), ('NO', 'INTJ'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('The', 'DT'), ('approach', 'NN'), ('of', 'IN'), ('FL', 'NNP'), ('imitates', 'VBZ'), ('the', 'DT'), ('way', 'NN'), ('of', 'IN'), ('decision', 'NN'), ('making', 'VBG'), ('in', 'IN'), ('humans', 'NNS'), ('that', 'WDT'), ('involves', 'VBZ'), ('all', 'DT'), ('intermediate', 'JJ'), ('possibilities', 'NNS'), ('between', 'IN'), ('digital', 'JJ'), ('values', 'NNS'), ('YES', 'UH'), ('and', 'CC'), ('NO', 'UH'), ('.', '.')] 

 Lemmas are: 
>> [('The', 'the'), ('approach', 'approach'), ('of', 'of'), ('FL', 'FL'), ('imitates', 'imitate'), ('the', 'the'), ('way', 'way'), ('of', 'of'), ('decision', 'decision'), ('making', 'make'), ('in', 'in'), ('humans', 'human'), ('that', 'that'), ('involves', 'involve'), ('all', 'all'), ('intermediate', 'intermediate'), ('possibilities', 'possibility'), ('between', 'between'), ('digital', 'digital'), ('values', 'value'), ('YES', 'yes'), ('and', 'and'), ('NO', 'no'), ('.', '.')] 

 Dependency tags are: 
>> [(('The', 'approach'), 'det'), (('approach', 'imitates'), 'nsubj'), (('of', 'FL'), 'case'), (('FL', 'approach'), 'nmod'), (('imitates', 'root'), 'root'), (('the', 'way'), 'det'), (('way', 'imitates'), 'obj'), (('of', 'decision'), 'case'), (('decision', 'way'), 'nmod'), (('making', 'decision'), 'acl'), (('in', 'humans'), 'case'), (('humans', 'making'), 'obl'), (('that', 'involves'), 'nsubj'), (('involves', 'humans'), 'acl:relcl'), (('all', 'possibilities'), 'det'), (('intermediate', 'possibilities'), 'amod'), (('possibilities', 'involves'), 'obj'), (('between', 'values'), 'case'), (('digital', 'values'), 'amod'), (('values', 'possibilities'), 'nmod'), (('YES', 'involves'), 'discourse'), (('and', 'NO'), 'cc'), (('NO', 'YES'), 'conj'), (('.', 'imitates'), 'punct')]

 Named Entities are: 
>> [('FL', 'GPE')]

========================== Sentence 5 ===========================

 The conventional logic block that a computer can understand takes precise input and produces a definite output as TRUE or FALSE, which is equivalent to human’s YES or NO. 

Tokens are: 
>> ['The', 'conventional', 'logic', 'block', 'that', 'a', 'computer', 'can', 'understand', 'takes', 'precise', 'input', 'and', 'produces', 'a', 'definite', 'output', 'as', 'TRUE', 'or', 'FALSE', ',', 'which', 'is', 'equivalent', 'to', 'human', '’s', 'YES', 'or', 'NO', '.'] 

 UPOS tags are: 
>> [('The', 'DET'), ('conventional', 'ADJ'), ('logic', 'NOUN'), ('block', 'NOUN'), ('that', 'PRON'), ('a', 'DET'), ('computer', 'NOUN'), ('can', 'AUX'), ('understand', 'VERB'), ('takes', 'VERB'), ('precise', 'ADJ'), ('input', 'NOUN'), ('and', 'CCONJ'), ('produces', 'VERB'), ('a', 'DET'), ('definite', 'ADJ'), ('output', 'NOUN'), ('as', 'ADV'), ('TRUE', 'ADJ'), ('or', 'CCONJ'), ('FALSE', 'ADJ'), (',', 'PUNCT'), ('which', 'PRON'), ('is', 'AUX'), ('equivalent', 'ADJ'), ('to', 'ADP'), ('human', 'NOUN'), ('’s', 'PART'), ('YES', 'INTJ'), ('or', 'CCONJ'), ('NO', 'INTJ'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('The', 'DT'), ('conventional', 'JJ'), ('logic', 'NN'), ('block', 'NN'), ('that', 'WDT'), ('a', 'DT'), ('computer', 'NN'), ('can', 'MD'), ('understand', 'VB'), ('takes', 'VBZ'), ('precise', 'JJ'), ('input', 'NN'), ('and', 'CC'), ('produces', 'VBZ'), ('a', 'DT'), ('definite', 'JJ'), ('output', 'NN'), ('as', 'RB'), ('TRUE', 'JJ'), ('or', 'CC'), ('FALSE', 'JJ'), (',', ','), ('which', 'WDT'), ('is', 'VBZ'), ('equivalent', 'JJ'), ('to', 'IN'), ('human', 'NN'), ('’s', 'POS'), ('YES', 'UH'), ('or', 'CC'), ('NO', 'UH'), ('.', '.')] 

 Lemmas are: 
>> [('The', 'the'), ('conventional', 'conventional'), ('logic', 'logic'), ('block', 'block'), ('that', 'that'), ('a', 'a'), ('computer', 'computer'), ('can', 'can'), ('understand', 'understand'), ('takes', 'take'), ('precise', 'precise'), ('input', 'input'), ('and', 'and'), ('produces', 'produce'), ('a', 'a'), ('definite', 'definite'), ('output', 'output'), ('as', 'as'), ('TRUE', 'true'), ('or', 'or'), ('FALSE', 'false'), (',', ','), ('which', 'which'), ('is', 'be'), ('equivalent', 'equivalent'), ('to', 'to'), ('human', 'human'), ('’s', "'s"), ('YES', 'yes'), ('or', 'or'), ('NO', 'no'), ('.', '.')] 

 Dependency tags are: 
>> [(('The', 'block'), 'det'), (('conventional', 'block'), 'amod'), (('logic', 'block'), 'compound'), (('block', 'takes'), 'nsubj'), (('that', 'understand'), 'obj'), (('a', 'computer'), 'det'), (('computer', 'understand'), 'nsubj'), (('can', 'understand'), 'aux'), (('understand', 'block'), 'acl:relcl'), (('takes', 'root'), 'root'), (('precise', 'input'), 'amod'), (('input', 'takes'), 'obj'), (('and', 'produces'), 'cc'), (('produces', 'takes'), 'conj'), (('a', 'output'), 'det'), (('definite', 'output'), 'amod'), (('output', 'produces'), 'obj'), (('as', 'TRUE'), 'advmod'), (('TRUE', 'output'), 'amod'), (('or', 'FALSE'), 'cc'), (('FALSE', 'TRUE'), 'conj'), ((',', 'equivalent'), 'punct'), (('which', 'equivalent'), 'nsubj'), (('is', 'equivalent'), 'cop'), (('equivalent', 'output'), 'acl:relcl'), (('to', 'YES'), 'case'), (('human', 'YES'), 'nmod:poss'), (('’s', 'human'), 'case'), (('YES', 'equivalent'), 'discourse'), (('or', 'NO'), 'cc'), (('NO', 'YES'), 'conj'), (('.', 'takes'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 6 ===========================

 The inventor of fuzzy logic, Lotfi Zadeh, observed that unlike computers, the human decision making includes a range of possibilities between YES and NO, such as − 	CERTAINLY YES  	POSSIBLY YES  	CANNOT SAY  	POSSIBLY NO  	CERTAINLY NO 

Tokens are: 
>> ['The', 'inventor', 'of', 'fuzzy', 'logic', ',', 'Lotfi', 'Zadeh', ',', 'observed', 'that', 'unlike', 'computers', ',', 'the', 'human', 'decision', 'making', 'includes', 'a', 'range', 'of', 'possibilities', 'between', 'YES', 'and', 'NO', ',', 'such', 'as', '−', 'CERTAINLY', 'YES', 'POSSIBLY', 'YES', 'CANNOT', 'SAY', 'POSSIBLY', 'NO', 'CERTAINLY', 'NO'] 

 UPOS tags are: 
>> [('The', 'DET'), ('inventor', 'NOUN'), ('of', 'ADP'), ('fuzzy', 'ADJ'), ('logic', 'NOUN'), (',', 'PUNCT'), ('Lotfi', 'PROPN'), ('Zadeh', 'PROPN'), (',', 'PUNCT'), ('observed', 'VERB'), ('that', 'SCONJ'), ('unlike', 'ADP'), ('computers', 'NOUN'), (',', 'PUNCT'), ('the', 'DET'), ('human', 'ADJ'), ('decision', 'NOUN'), ('making', 'VERB'), ('includes', 'VERB'), ('a', 'DET'), ('range', 'NOUN'), ('of', 'ADP'), ('possibilities', 'NOUN'), ('between', 'ADP'), ('YES', 'INTJ'), ('and', 'CCONJ'), ('NO', 'INTJ'), (',', 'PUNCT'), ('such', 'ADJ'), ('as', 'ADP'), ('−', 'PUNCT'), ('CERTAINLY', 'ADV'), ('YES', 'INTJ'), ('POSSIBLY', 'ADV'), ('YES', 'INTJ'), ('CANNOT', 'AUX'), ('SAY', 'VERB'), ('POSSIBLY', 'ADV'), ('NO', 'INTJ'), ('CERTAINLY', 'ADV'), ('NO', 'INTJ')] 

 XPOS tags are: 
>> [('The', 'DT'), ('inventor', 'NN'), ('of', 'IN'), ('fuzzy', 'JJ'), ('logic', 'NN'), (',', ','), ('Lotfi', 'NNP'), ('Zadeh', 'NNP'), (',', ','), ('observed', 'VBD'), ('that', 'IN'), ('unlike', 'IN'), ('computers', 'NNS'), (',', ','), ('the', 'DT'), ('human', 'JJ'), ('decision', 'NN'), ('making', 'VBG'), ('includes', 'VBZ'), ('a', 'DT'), ('range', 'NN'), ('of', 'IN'), ('possibilities', 'NNS'), ('between', 'IN'), ('YES', 'UH'), ('and', 'CC'), ('NO', 'UH'), (',', ','), ('such', 'JJ'), ('as', 'IN'), ('−', ','), ('CERTAINLY', 'RB'), ('YES', 'UH'), ('POSSIBLY', 'RB'), ('YES', 'UH'), ('CANNOT', 'MD'), ('SAY', 'VB'), ('POSSIBLY', 'RB'), ('NO', 'UH'), ('CERTAINLY', 'RB'), ('NO', 'UH')] 

 Lemmas are: 
>> [('The', 'the'), ('inventor', 'inventor'), ('of', 'of'), ('fuzzy', 'fuzzy'), ('logic', 'logic'), (',', ','), ('Lotfi', 'Lotfi'), ('Zadeh', 'Zadeh'), (',', ','), ('observed', 'observe'), ('that', 'that'), ('unlike', 'unlike'), ('computers', 'computer'), (',', ','), ('the', 'the'), ('human', 'human'), ('decision', 'decision'), ('making', 'make'), ('includes', 'include'), ('a', 'a'), ('range', 'range'), ('of', 'of'), ('possibilities', 'possibility'), ('between', 'between'), ('YES', 'yes'), ('and', 'and'), ('NO', 'no'), (',', ','), ('such', 'such'), ('as', 'as'), ('−', "''"), ('CERTAINLY', 'certainly'), ('YES', 'yes'), ('POSSIBLY', 'possibly'), ('YES', 'yes'), ('CANNOT', 'cannot'), ('SAY', 'say'), ('POSSIBLY', 'possibly'), ('NO', 'no'), ('CERTAINLY', 'certainly'), ('NO', 'no')] 

 Dependency tags are: 
>> [(('The', 'inventor'), 'det'), (('inventor', 'observed'), 'nsubj'), (('of', 'logic'), 'case'), (('fuzzy', 'logic'), 'amod'), (('logic', 'inventor'), 'nmod'), ((',', 'Lotfi'), 'punct'), (('Lotfi', 'logic'), 'appos'), (('Zadeh', 'Lotfi'), 'flat'), ((',', 'inventor'), 'punct'), (('observed', 'root'), 'root'), (('that', 'includes'), 'mark'), (('unlike', 'computers'), 'case'), (('computers', 'includes'), 'obl'), ((',', 'computers'), 'punct'), (('the', 'decision'), 'det'), (('human', 'decision'), 'amod'), (('decision', 'includes'), 'nsubj'), (('making', 'decision'), 'acl'), (('includes', 'observed'), 'ccomp'), (('a', 'range'), 'det'), (('range', 'includes'), 'obj'), (('of', 'possibilities'), 'case'), (('possibilities', 'range'), 'nmod'), (('between', 'YES'), 'case'), (('YES', 'possibilities'), 'nmod'), (('and', 'NO'), 'cc'), (('NO', 'YES'), 'conj'), ((',', 'such'), 'punct'), (('such', 'SAY'), 'mark'), (('as', 'such'), 'fixed'), (('−', 'such'), 'punct'), (('CERTAINLY', 'SAY'), 'advmod'), (('YES', 'SAY'), 'discourse'), (('POSSIBLY', 'SAY'), 'advmod'), (('YES', 'SAY'), 'discourse'), (('CANNOT', 'SAY'), 'aux'), (('SAY', 'observed'), 'parataxis'), (('POSSIBLY', 'SAY'), 'advmod'), (('NO', 'SAY'), 'discourse'), (('CERTAINLY', 'SAY'), 'advmod'), (('NO', 'SAY'), 'discourse')]

 Named Entities are: 
>> [('Lotfi Zadeh', 'PERSON')]

========================== Sentence 7 ===========================

 The fuzzy logic works on the levels of possibilities of input to achieve the definite output. 

Tokens are: 
>> ['The', 'fuzzy', 'logic', 'works', 'on', 'the', 'levels', 'of', 'possibilities', 'of', 'input', 'to', 'achieve', 'the', 'definite', 'output', '.'] 

 UPOS tags are: 
>> [('The', 'DET'), ('fuzzy', 'ADJ'), ('logic', 'NOUN'), ('works', 'VERB'), ('on', 'ADP'), ('the', 'DET'), ('levels', 'NOUN'), ('of', 'ADP'), ('possibilities', 'NOUN'), ('of', 'ADP'), ('input', 'NOUN'), ('to', 'PART'), ('achieve', 'VERB'), ('the', 'DET'), ('definite', 'ADJ'), ('output', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('The', 'DT'), ('fuzzy', 'JJ'), ('logic', 'NN'), ('works', 'VBZ'), ('on', 'IN'), ('the', 'DT'), ('levels', 'NNS'), ('of', 'IN'), ('possibilities', 'NNS'), ('of', 'IN'), ('input', 'NN'), ('to', 'TO'), ('achieve', 'VB'), ('the', 'DT'), ('definite', 'JJ'), ('output', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('The', 'the'), ('fuzzy', 'fuzzy'), ('logic', 'logic'), ('works', 'work'), ('on', 'on'), ('the', 'the'), ('levels', 'level'), ('of', 'of'), ('possibilities', 'possibility'), ('of', 'of'), ('input', 'input'), ('to', 'to'), ('achieve', 'achieve'), ('the', 'the'), ('definite', 'definite'), ('output', 'output'), ('.', '.')] 

 Dependency tags are: 
>> [(('The', 'logic'), 'det'), (('fuzzy', 'logic'), 'amod'), (('logic', 'works'), 'nsubj'), (('works', 'root'), 'root'), (('on', 'levels'), 'case'), (('the', 'levels'), 'det'), (('levels', 'works'), 'obl'), (('of', 'possibilities'), 'case'), (('possibilities', 'levels'), 'nmod'), (('of', 'input'), 'case'), (('input', 'possibilities'), 'nmod'), (('to', 'achieve'), 'mark'), (('achieve', 'works'), 'advcl'), (('the', 'output'), 'det'), (('definite', 'output'), 'amod'), (('output', 'achieve'), 'obj'), (('.', 'works'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 8 ===========================

 Implementation · 

Tokens are: 
>> ['Implementation', '·'] 

 UPOS tags are: 
>> [('Implementation', 'NOUN'), ('·', 'PUNCT')] 

 XPOS tags are: 
>> [('Implementation', 'NN'), ('·', 'NFP')] 

 Lemmas are: 
>> [('Implementation', 'implementation'), ('·', '·')] 

 Dependency tags are: 
>> [(('Implementation', 'root'), 'root'), (('·', 'Implementation'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 9 ===========================

 It can be implemented in systems with various sizes and capabilities ranging from small micro-controllers to large, networked, workstation-based control systems. 

Tokens are: 
>> ['It', 'can', 'be', 'implemented', 'in', 'systems', 'with', 'various', 'sizes', 'and', 'capabilities', 'ranging', 'from', 'small', 'micro-controllers', 'to', 'large', ',', 'networked', ',', 'workstation', '-', 'based', 'control', 'systems', '.'] 

 UPOS tags are: 
>> [('It', 'PRON'), ('can', 'AUX'), ('be', 'AUX'), ('implemented', 'VERB'), ('in', 'ADP'), ('systems', 'NOUN'), ('with', 'ADP'), ('various', 'ADJ'), ('sizes', 'NOUN'), ('and', 'CCONJ'), ('capabilities', 'NOUN'), ('ranging', 'VERB'), ('from', 'ADP'), ('small', 'ADJ'), ('micro-controllers', 'NOUN'), ('to', 'ADP'), ('large', 'ADJ'), (',', 'PUNCT'), ('networked', 'VERB'), (',', 'PUNCT'), ('workstation', 'NOUN'), ('-', 'PUNCT'), ('based', 'VERB'), ('control', 'NOUN'), ('systems', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('It', 'PRP'), ('can', 'MD'), ('be', 'VB'), ('implemented', 'VBN'), ('in', 'IN'), ('systems', 'NNS'), ('with', 'IN'), ('various', 'JJ'), ('sizes', 'NNS'), ('and', 'CC'), ('capabilities', 'NNS'), ('ranging', 'VBG'), ('from', 'IN'), ('small', 'JJ'), ('micro-controllers', 'NNS'), ('to', 'IN'), ('large', 'JJ'), (',', ','), ('networked', 'VBN'), (',', ','), ('workstation', 'NN'), ('-', 'HYPH'), ('based', 'VBN'), ('control', 'NN'), ('systems', 'NNS'), ('.', '.')] 

 Lemmas are: 
>> [('It', 'it'), ('can', 'can'), ('be', 'be'), ('implemented', 'implement'), ('in', 'in'), ('systems', 'system'), ('with', 'with'), ('various', 'various'), ('sizes', 'size'), ('and', 'and'), ('capabilities', 'capability'), ('ranging', 'range'), ('from', 'from'), ('small', 'small'), ('micro-controllers', 'micro-controller'), ('to', 'to'), ('large', 'large'), (',', ','), ('networked', 'network'), (',', ','), ('workstation', 'workstation'), ('-', '-'), ('based', 'base'), ('control', 'control'), ('systems', 'system'), ('.', '.')] 

 Dependency tags are: 
>> [(('It', 'implemented'), 'nsubj:pass'), (('can', 'implemented'), 'aux'), (('be', 'implemented'), 'aux:pass'), (('implemented', 'root'), 'root'), (('in', 'systems'), 'case'), (('systems', 'implemented'), 'obl'), (('with', 'sizes'), 'case'), (('various', 'sizes'), 'amod'), (('sizes', 'systems'), 'nmod'), (('and', 'capabilities'), 'cc'), (('capabilities', 'sizes'), 'conj'), (('ranging', 'sizes'), 'acl'), (('from', 'micro-controllers'), 'case'), (('small', 'micro-controllers'), 'amod'), (('micro-controllers', 'ranging'), 'obl'), (('to', 'systems'), 'case'), (('large', 'systems'), 'amod'), ((',', 'networked'), 'punct'), (('networked', 'systems'), 'amod'), ((',', 'systems'), 'punct'), (('workstation', 'based'), 'compound'), (('-', 'based'), 'punct'), (('based', 'systems'), 'amod'), (('control', 'systems'), 'compound'), (('systems', 'micro-controllers'), 'nmod'), (('.', 'implemented'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 10 ===========================

 · 

Tokens are: 
>> ['·'] 

 UPOS tags are: 
>> [('·', 'PUNCT')] 

 XPOS tags are: 
>> [('·', 'NFP')] 

 Lemmas are: 
>> [('·', '·')] 

 Dependency tags are: 
>> [(('·', 'root'), 'root')]

 Named Entities are: 
>> []

========================== Sentence 11 ===========================

 It can be implemented in hardware, software, or a combination of both. 

Tokens are: 
>> ['It', 'can', 'be', 'implemented', 'in', 'hardware', ',', 'software', ',', 'or', 'a', 'combination', 'of', 'both', '.'] 

 UPOS tags are: 
>> [('It', 'PRON'), ('can', 'AUX'), ('be', 'AUX'), ('implemented', 'VERB'), ('in', 'ADP'), ('hardware', 'NOUN'), (',', 'PUNCT'), ('software', 'NOUN'), (',', 'PUNCT'), ('or', 'CCONJ'), ('a', 'DET'), ('combination', 'NOUN'), ('of', 'ADP'), ('both', 'DET'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('It', 'PRP'), ('can', 'MD'), ('be', 'VB'), ('implemented', 'VBN'), ('in', 'IN'), ('hardware', 'NN'), (',', ','), ('software', 'NN'), (',', ','), ('or', 'CC'), ('a', 'DT'), ('combination', 'NN'), ('of', 'IN'), ('both', 'DT'), ('.', '.')] 

 Lemmas are: 
>> [('It', 'it'), ('can', 'can'), ('be', 'be'), ('implemented', 'implement'), ('in', 'in'), ('hardware', 'hardware'), (',', ','), ('software', 'software'), (',', ','), ('or', 'or'), ('a', 'a'), ('combination', 'combination'), ('of', 'of'), ('both', 'both'), ('.', '.')] 

 Dependency tags are: 
>> [(('It', 'implemented'), 'nsubj:pass'), (('can', 'implemented'), 'aux'), (('be', 'implemented'), 'aux:pass'), (('implemented', 'root'), 'root'), (('in', 'hardware'), 'case'), (('hardware', 'implemented'), 'obl'), ((',', 'software'), 'punct'), (('software', 'hardware'), 'conj'), ((',', 'combination'), 'punct'), (('or', 'combination'), 'cc'), (('a', 'combination'), 'det'), (('combination', 'hardware'), 'conj'), (('of', 'both'), 'case'), (('both', 'combination'), 'nmod'), (('.', 'implemented'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 12 ===========================

 Why Fuzzy Logic? 

Tokens are: 
>> ['Why', 'Fuzzy', 'Logic', '?'] 

 UPOS tags are: 
>> [('Why', 'ADV'), ('Fuzzy', 'ADJ'), ('Logic', 'PROPN'), ('?', 'PUNCT')] 

 XPOS tags are: 
>> [('Why', 'WRB'), ('Fuzzy', 'JJ'), ('Logic', 'NNP'), ('?', '.')] 

 Lemmas are: 
>> [('Why', 'why'), ('Fuzzy', 'fuzzy'), ('Logic', 'logic'), ('?', '?')] 

 Dependency tags are: 
>> [(('Why', 'Fuzzy'), 'advmod'), (('Fuzzy', 'root'), 'root'), (('Logic', 'Fuzzy'), 'vocative'), (('?', 'Fuzzy'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 13 ===========================

 Fuzzy logic is useful for commercial and practical purposes. 

Tokens are: 
>> ['Fuzzy', 'logic', 'is', 'useful', 'for', 'commercial', 'and', 'practical', 'purposes', '.'] 

 UPOS tags are: 
>> [('Fuzzy', 'ADJ'), ('logic', 'NOUN'), ('is', 'AUX'), ('useful', 'ADJ'), ('for', 'ADP'), ('commercial', 'ADJ'), ('and', 'CCONJ'), ('practical', 'ADJ'), ('purposes', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Fuzzy', 'JJ'), ('logic', 'NN'), ('is', 'VBZ'), ('useful', 'JJ'), ('for', 'IN'), ('commercial', 'JJ'), ('and', 'CC'), ('practical', 'JJ'), ('purposes', 'NNS'), ('.', '.')] 

 Lemmas are: 
>> [('Fuzzy', 'fuzzy'), ('logic', 'logic'), ('is', 'be'), ('useful', 'useful'), ('for', 'for'), ('commercial', 'commercial'), ('and', 'and'), ('practical', 'practical'), ('purposes', 'purpose'), ('.', '.')] 

 Dependency tags are: 
>> [(('Fuzzy', 'logic'), 'amod'), (('logic', 'useful'), 'nsubj'), (('is', 'useful'), 'cop'), (('useful', 'root'), 'root'), (('for', 'purposes'), 'case'), (('commercial', 'purposes'), 'amod'), (('and', 'practical'), 'cc'), (('practical', 'commercial'), 'conj'), (('purposes', 'useful'), 'obl'), (('.', 'useful'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 14 ===========================

 · 

Tokens are: 
>> ['·'] 

 UPOS tags are: 
>> [('·', 'PUNCT')] 

 XPOS tags are: 
>> [('·', 'NFP')] 

 Lemmas are: 
>> [('·', '·')] 

 Dependency tags are: 
>> [(('·', 'root'), 'root')]

 Named Entities are: 
>> []

========================== Sentence 15 ===========================

 It can control machines and consumer products. 

Tokens are: 
>> ['It', 'can', 'control', 'machines', 'and', 'consumer', 'products', '.'] 

 UPOS tags are: 
>> [('It', 'PRON'), ('can', 'AUX'), ('control', 'VERB'), ('machines', 'NOUN'), ('and', 'CCONJ'), ('consumer', 'NOUN'), ('products', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('It', 'PRP'), ('can', 'MD'), ('control', 'VB'), ('machines', 'NNS'), ('and', 'CC'), ('consumer', 'NN'), ('products', 'NNS'), ('.', '.')] 

 Lemmas are: 
>> [('It', 'it'), ('can', 'can'), ('control', 'control'), ('machines', 'machine'), ('and', 'and'), ('consumer', 'consumer'), ('products', 'product'), ('.', '.')] 

 Dependency tags are: 
>> [(('It', 'control'), 'nsubj'), (('can', 'control'), 'aux'), (('control', 'root'), 'root'), (('machines', 'control'), 'obj'), (('and', 'products'), 'cc'), (('consumer', 'products'), 'compound'), (('products', 'machines'), 'conj'), (('.', 'control'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 16 ===========================

 · 

Tokens are: 
>> ['·'] 

 UPOS tags are: 
>> [('·', 'PUNCT')] 

 XPOS tags are: 
>> [('·', 'NFP')] 

 Lemmas are: 
>> [('·', '·')] 

 Dependency tags are: 
>> [(('·', 'root'), 'root')]

 Named Entities are: 
>> []

========================== Sentence 17 ===========================

 It may not give accurate reasoning, but acceptable reasoning. 

Tokens are: 
>> ['It', 'may', 'not', 'give', 'accurate', 'reasoning', ',', 'but', 'acceptable', 'reasoning', '.'] 

 UPOS tags are: 
>> [('It', 'PRON'), ('may', 'AUX'), ('not', 'PART'), ('give', 'VERB'), ('accurate', 'ADJ'), ('reasoning', 'NOUN'), (',', 'PUNCT'), ('but', 'CCONJ'), ('acceptable', 'ADJ'), ('reasoning', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('It', 'PRP'), ('may', 'MD'), ('not', 'RB'), ('give', 'VB'), ('accurate', 'JJ'), ('reasoning', 'NN'), (',', ','), ('but', 'CC'), ('acceptable', 'JJ'), ('reasoning', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('It', 'it'), ('may', 'may'), ('not', 'not'), ('give', 'give'), ('accurate', 'accurate'), ('reasoning', 'reasoning'), (',', ','), ('but', 'but'), ('acceptable', 'acceptable'), ('reasoning', 'reasoning'), ('.', '.')] 

 Dependency tags are: 
>> [(('It', 'give'), 'nsubj'), (('may', 'give'), 'aux'), (('not', 'give'), 'advmod'), (('give', 'root'), 'root'), (('accurate', 'reasoning'), 'amod'), (('reasoning', 'give'), 'obj'), ((',', 'reasoning'), 'punct'), (('but', 'reasoning'), 'cc'), (('acceptable', 'reasoning'), 'amod'), (('reasoning', 'reasoning'), 'conj'), (('.', 'give'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 18 ===========================

 · Fuzzy logic helps to deal with the uncertainty in engineering. 

Tokens are: 
>> ['·', 'Fuzzy', 'logic', 'helps', 'to', 'deal', 'with', 'the', 'uncertainty', 'in', 'engineering', '.'] 

 UPOS tags are: 
>> [('·', 'PUNCT'), ('Fuzzy', 'ADJ'), ('logic', 'NOUN'), ('helps', 'VERB'), ('to', 'PART'), ('deal', 'VERB'), ('with', 'ADP'), ('the', 'DET'), ('uncertainty', 'NOUN'), ('in', 'ADP'), ('engineering', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('·', 'NFP'), ('Fuzzy', 'JJ'), ('logic', 'NN'), ('helps', 'VBZ'), ('to', 'TO'), ('deal', 'VB'), ('with', 'IN'), ('the', 'DT'), ('uncertainty', 'NN'), ('in', 'IN'), ('engineering', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('·', '·'), ('Fuzzy', 'fuzzy'), ('logic', 'logic'), ('helps', 'help'), ('to', 'to'), ('deal', 'deal'), ('with', 'with'), ('the', 'the'), ('uncertainty', 'uncertainty'), ('in', 'in'), ('engineering', 'engineering'), ('.', '.')] 

 Dependency tags are: 
>> [(('·', 'helps'), 'punct'), (('Fuzzy', 'logic'), 'amod'), (('logic', 'helps'), 'nsubj'), (('helps', 'root'), 'root'), (('to', 'deal'), 'mark'), (('deal', 'helps'), 'xcomp'), (('with', 'uncertainty'), 'case'), (('the', 'uncertainty'), 'det'), (('uncertainty', 'deal'), 'obl'), (('in', 'engineering'), 'case'), (('engineering', 'uncertainty'), 'nmod'), (('.', 'helps'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 19 ===========================

 Fuzzy Logic Systems Architecture 

Tokens are: 
>> ['Fuzzy', 'Logic', 'Systems', 'Architecture'] 

 UPOS tags are: 
>> [('Fuzzy', 'ADJ'), ('Logic', 'NOUN'), ('Systems', 'NOUN'), ('Architecture', 'NOUN')] 

 XPOS tags are: 
>> [('Fuzzy', 'JJ'), ('Logic', 'NN'), ('Systems', 'NNS'), ('Architecture', 'NN')] 

 Lemmas are: 
>> [('Fuzzy', 'fuzzy'), ('Logic', 'logic'), ('Systems', 'system'), ('Architecture', 'Architecture')] 

 Dependency tags are: 
>> [(('Fuzzy', 'Systems'), 'amod'), (('Logic', 'Systems'), 'compound'), (('Systems', 'Architecture'), 'compound'), (('Architecture', 'root'), 'root')]

 Named Entities are: 
>> []

========================== Sentence 20 ===========================

 It has four main parts as shown − · Fuzzification Module − 

Tokens are: 
>> ['It', 'has', 'four', 'main', 'parts', 'as', 'shown', '−', '·', 'Fuzzification', 'Module', '−'] 

 UPOS tags are: 
>> [('It', 'PRON'), ('has', 'VERB'), ('four', 'NUM'), ('main', 'ADJ'), ('parts', 'NOUN'), ('as', 'SCONJ'), ('shown', 'VERB'), ('−', 'PUNCT'), ('·', 'PUNCT'), ('Fuzzification', 'PROPN'), ('Module', 'NOUN'), ('−', 'PUNCT')] 

 XPOS tags are: 
>> [('It', 'PRP'), ('has', 'VBZ'), ('four', 'CD'), ('main', 'JJ'), ('parts', 'NNS'), ('as', 'IN'), ('shown', 'VBN'), ('−', ','), ('·', 'NFP'), ('Fuzzification', 'NNP'), ('Module', 'NN'), ('−', '.')] 

 Lemmas are: 
>> [('It', 'it'), ('has', 'have'), ('four', 'four'), ('main', 'main'), ('parts', 'part'), ('as', 'as'), ('shown', 'show'), ('−', "''"), ('·', '·'), ('Fuzzification', 'Fuzzification'), ('Module', 'Module'), ('−', "''")] 

 Dependency tags are: 
>> [(('It', 'has'), 'nsubj'), (('has', 'root'), 'root'), (('four', 'parts'), 'nummod'), (('main', 'parts'), 'amod'), (('parts', 'has'), 'obj'), (('as', 'shown'), 'mark'), (('shown', 'parts'), 'acl'), (('−', 'has'), 'punct'), (('·', 'Module'), 'punct'), (('Fuzzification', 'Module'), 'compound'), (('Module', 'has'), 'parataxis'), (('−', 'has'), 'punct')]

 Named Entities are: 
>> [('four', 'CARDINAL')]

========================== Sentence 21 ===========================

 It transforms the system inputs, which are crisp numbers, into fuzzy sets. 

Tokens are: 
>> ['It', 'transforms', 'the', 'system', 'inputs', ',', 'which', 'are', 'crisp', 'numbers', ',', 'into', 'fuzzy', 'sets', '.'] 

 UPOS tags are: 
>> [('It', 'PRON'), ('transforms', 'VERB'), ('the', 'DET'), ('system', 'NOUN'), ('inputs', 'NOUN'), (',', 'PUNCT'), ('which', 'PRON'), ('are', 'AUX'), ('crisp', 'ADJ'), ('numbers', 'NOUN'), (',', 'PUNCT'), ('into', 'ADP'), ('fuzzy', 'ADJ'), ('sets', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('It', 'PRP'), ('transforms', 'VBZ'), ('the', 'DT'), ('system', 'NN'), ('inputs', 'NNS'), (',', ','), ('which', 'WDT'), ('are', 'VBP'), ('crisp', 'JJ'), ('numbers', 'NNS'), (',', ','), ('into', 'IN'), ('fuzzy', 'JJ'), ('sets', 'NNS'), ('.', '.')] 

 Lemmas are: 
>> [('It', 'it'), ('transforms', 'transform'), ('the', 'the'), ('system', 'system'), ('inputs', 'input'), (',', ','), ('which', 'which'), ('are', 'be'), ('crisp', 'crisp'), ('numbers', 'number'), (',', ','), ('into', 'into'), ('fuzzy', 'fuzzy'), ('sets', 'set'), ('.', '.')] 

 Dependency tags are: 
>> [(('It', 'transforms'), 'nsubj'), (('transforms', 'root'), 'root'), (('the', 'inputs'), 'det'), (('system', 'inputs'), 'compound'), (('inputs', 'transforms'), 'obj'), ((',', 'inputs'), 'punct'), (('which', 'numbers'), 'nsubj'), (('are', 'numbers'), 'cop'), (('crisp', 'numbers'), 'amod'), (('numbers', 'inputs'), 'acl:relcl'), ((',', 'sets'), 'punct'), (('into', 'sets'), 'case'), (('fuzzy', 'sets'), 'amod'), (('sets', 'numbers'), 'nmod'), (('.', 'transforms'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 22 ===========================

 It splits the input signal into five steps such as − 	LP 	x is Large Positive  	MP 	x is Medium Positive  	S 	x is Small  	MN 	x is Medium Negative  	LN 	x is Large Negative   ·  Knowledge Base − 

Tokens are: 
>> ['It', 'splits', 'the', 'input', 'signal', 'into', 'five', 'steps', 'such', 'as', '−', 'LP', 'x', 'is', 'Large', 'Positive', 'MP', 'x', 'is', 'Medium', 'Positive', 'S', 'x', 'is', 'Small', 'MN', 'x', 'is', 'Medium', 'Negative', 'LN', 'x', 'is', 'Large', 'Negative', '·', 'Knowledge', 'Base', '−'] 

 UPOS tags are: 
>> [('It', 'PRON'), ('splits', 'VERB'), ('the', 'DET'), ('input', 'NOUN'), ('signal', 'NOUN'), ('into', 'ADP'), ('five', 'NUM'), ('steps', 'NOUN'), ('such', 'ADJ'), ('as', 'ADP'), ('−', 'PUNCT'), ('LP', 'PROPN'), ('x', 'NOUN'), ('is', 'AUX'), ('Large', 'ADJ'), ('Positive', 'ADJ'), ('MP', 'NOUN'), ('x', 'NOUN'), ('is', 'AUX'), ('Medium', 'ADJ'), ('Positive', 'ADJ'), ('S', 'PART'), ('x', 'NOUN'), ('is', 'AUX'), ('Small', 'ADJ'), ('MN', 'PROPN'), ('x', 'NOUN'), ('is', 'AUX'), ('Medium', 'ADJ'), ('Negative', 'ADJ'), ('LN', 'NOUN'), ('x', 'NOUN'), ('is', 'AUX'), ('Large', 'ADJ'), ('Negative', 'ADJ'), ('·', 'PUNCT'), ('Knowledge', 'NOUN'), ('Base', 'NOUN'), ('−', 'PUNCT')] 

 XPOS tags are: 
>> [('It', 'PRP'), ('splits', 'VBZ'), ('the', 'DT'), ('input', 'NN'), ('signal', 'NN'), ('into', 'IN'), ('five', 'CD'), ('steps', 'NNS'), ('such', 'JJ'), ('as', 'IN'), ('−', ','), ('LP', 'NNP'), ('x', 'NN'), ('is', 'VBZ'), ('Large', 'JJ'), ('Positive', 'JJ'), ('MP', 'NN'), ('x', 'NN'), ('is', 'VBZ'), ('Medium', 'JJ'), ('Positive', 'JJ'), ('S', 'POS'), ('x', 'NN'), ('is', 'VBZ'), ('Small', 'JJ'), ('MN', 'NNP'), ('x', 'NN'), ('is', 'VBZ'), ('Medium', 'JJ'), ('Negative', 'JJ'), ('LN', 'NN'), ('x', 'NN'), ('is', 'VBZ'), ('Large', 'JJ'), ('Negative', 'JJ'), ('·', 'NFP'), ('Knowledge', 'NN'), ('Base', 'NN'), ('−', '.')] 

 Lemmas are: 
>> [('It', 'it'), ('splits', 'split'), ('the', 'the'), ('input', 'input'), ('signal', 'signal'), ('into', 'into'), ('five', 'five'), ('steps', 'step'), ('such', 'such'), ('as', 'as'), ('−', "''"), ('LP', 'LP'), ('x', 'x'), ('is', 'be'), ('Large', 'large'), ('Positive', 'positive'), ('MP', 'mp'), ('x', 'x'), ('is', 'be'), ('Medium', 'medium'), ('Positive', 'positive'), ('S', "'s"), ('x', 'x'), ('is', 'be'), ('Small', 'small'), ('MN', 'MN'), ('x', 'x'), ('is', 'be'), ('Medium', 'medium'), ('Negative', 'negative'), ('LN', 'ln'), ('x', 'x'), ('is', 'be'), ('Large', 'large'), ('Negative', 'negative'), ('·', '·'), ('Knowledge', 'knowledge'), ('Base', 'base'), ('−', "''")] 

 Dependency tags are: 
>> [(('It', 'splits'), 'nsubj'), (('splits', 'root'), 'root'), (('the', 'signal'), 'det'), (('input', 'signal'), 'compound'), (('signal', 'splits'), 'obj'), (('into', 'steps'), 'case'), (('five', 'steps'), 'nummod'), (('steps', 'splits'), 'obl'), (('such', 'x'), 'case'), (('as', 'such'), 'fixed'), (('−', 'splits'), 'punct'), (('LP', 'x'), 'compound'), (('x', 'x'), 'nsubj'), (('is', 'splits'), 'parataxis'), (('Large', 'x'), 'amod'), (('Positive', 'x'), 'amod'), (('MP', 'x'), 'compound'), (('x', 'x'), 'nsubj'), (('is', 'x'), 'cop'), (('Medium', 'Positive'), 'amod'), (('Positive', 'x'), 'nmod:poss'), (('S', 'Positive'), 'case'), (('x', 'x'), 'nsubj'), (('is', 'x'), 'cop'), (('Small', 'x'), 'amod'), (('MN', 'x'), 'compound'), (('x', 'splits'), 'parataxis'), (('is', 'x'), 'cop'), (('Medium', 'x'), 'amod'), (('Negative', 'x'), 'amod'), (('LN', 'x'), 'compound'), (('x', 'x'), 'conj'), (('is', 'Negative'), 'cop'), (('Large', 'Negative'), 'amod'), (('Negative', 'x'), 'amod'), (('·', 'Base'), 'punct'), (('Knowledge', 'Base'), 'compound'), (('Base', 'Negative'), 'appos'), (('−', 'splits'), 'punct')]

 Named Entities are: 
>> [('five', 'CARDINAL')]

========================== Sentence 23 ===========================

 It stores IF-THEN rules provided by experts. 

Tokens are: 
>> ['It', 'stores', 'IF', '-', 'THEN', 'rules', 'provided', 'by', 'experts', '.'] 

 UPOS tags are: 
>> [('It', 'PRON'), ('stores', 'VERB'), ('IF', 'SCONJ'), ('-', 'PUNCT'), ('THEN', 'ADV'), ('rules', 'NOUN'), ('provided', 'VERB'), ('by', 'ADP'), ('experts', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('It', 'PRP'), ('stores', 'VBZ'), ('IF', 'IN'), ('-', ','), ('THEN', 'RB'), ('rules', 'NNS'), ('provided', 'VBN'), ('by', 'IN'), ('experts', 'NNS'), ('.', '.')] 

 Lemmas are: 
>> [('It', 'it'), ('stores', 'store'), ('IF', 'if'), ('-', '-'), ('THEN', 'then'), ('rules', 'rule'), ('provided', 'provide'), ('by', 'by'), ('experts', 'expert'), ('.', '.')] 

 Dependency tags are: 
>> [(('It', 'stores'), 'nsubj'), (('stores', 'root'), 'root'), (('IF', 'rules'), 'mark'), (('-', 'rules'), 'punct'), (('THEN', 'rules'), 'advmod'), (('rules', 'stores'), 'parataxis'), (('provided', 'rules'), 'acl'), (('by', 'experts'), 'case'), (('experts', 'provided'), 'obl'), (('.', 'stores'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 24 ===========================

 · Inference Engine − 

Tokens are: 
>> ['·', 'Inference', 'Engine', '−'] 

 UPOS tags are: 
>> [('·', 'PUNCT'), ('Inference', 'NOUN'), ('Engine', 'NOUN'), ('−', 'PUNCT')] 

 XPOS tags are: 
>> [('·', 'NFP'), ('Inference', 'NN'), ('Engine', 'NN'), ('−', '.')] 

 Lemmas are: 
>> [('·', '·'), ('Inference', 'inference'), ('Engine', 'engine'), ('−', "''")] 

 Dependency tags are: 
>> [(('·', 'Engine'), 'punct'), (('Inference', 'Engine'), 'compound'), (('Engine', 'root'), 'root'), (('−', 'Engine'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 25 ===========================

 It simulates the human reasoning process by making fuzzy inference on the inputs and IF-THEN rules. 

Tokens are: 
>> ['It', 'simulates', 'the', 'human', 'reasoning', 'process', 'by', 'making', 'fuzzy', 'inference', 'on', 'the', 'inputs', 'and', 'IF', '-', 'THEN', 'rules', '.'] 

 UPOS tags are: 
>> [('It', 'PRON'), ('simulates', 'VERB'), ('the', 'DET'), ('human', 'ADJ'), ('reasoning', 'NOUN'), ('process', 'NOUN'), ('by', 'SCONJ'), ('making', 'VERB'), ('fuzzy', 'ADJ'), ('inference', 'NOUN'), ('on', 'ADP'), ('the', 'DET'), ('inputs', 'NOUN'), ('and', 'CCONJ'), ('IF', 'SCONJ'), ('-', 'PUNCT'), ('THEN', 'ADV'), ('rules', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('It', 'PRP'), ('simulates', 'VBZ'), ('the', 'DT'), ('human', 'JJ'), ('reasoning', 'NN'), ('process', 'NN'), ('by', 'IN'), ('making', 'VBG'), ('fuzzy', 'JJ'), ('inference', 'NN'), ('on', 'IN'), ('the', 'DT'), ('inputs', 'NNS'), ('and', 'CC'), ('IF', 'IN'), ('-', ','), ('THEN', 'RB'), ('rules', 'NNS'), ('.', '.')] 

 Lemmas are: 
>> [('It', 'it'), ('simulates', 'simulate'), ('the', 'the'), ('human', 'human'), ('reasoning', 'reasoning'), ('process', 'process'), ('by', 'by'), ('making', 'make'), ('fuzzy', 'fuzzy'), ('inference', 'inference'), ('on', 'on'), ('the', 'the'), ('inputs', 'input'), ('and', 'and'), ('IF', 'if'), ('-', '-'), ('THEN', 'then'), ('rules', 'rule'), ('.', '.')] 

 Dependency tags are: 
>> [(('It', 'simulates'), 'nsubj'), (('simulates', 'root'), 'root'), (('the', 'process'), 'det'), (('human', 'process'), 'amod'), (('reasoning', 'process'), 'compound'), (('process', 'simulates'), 'obj'), (('by', 'making'), 'mark'), (('making', 'simulates'), 'advcl'), (('fuzzy', 'inference'), 'amod'), (('inference', 'making'), 'obj'), (('on', 'inputs'), 'case'), (('the', 'inputs'), 'det'), (('inputs', 'making'), 'obl'), (('and', 'rules'), 'cc'), (('IF', 'rules'), 'mark'), (('-', 'rules'), 'punct'), (('THEN', 'rules'), 'advmod'), (('rules', 'making'), 'conj'), (('.', 'simulates'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 26 ===========================

 · Defuzzification Module − 

Tokens are: 
>> ['·', 'Defuzzification', 'Module', '−'] 

 UPOS tags are: 
>> [('·', 'PUNCT'), ('Defuzzification', 'NOUN'), ('Module', 'NOUN'), ('−', 'PUNCT')] 

 XPOS tags are: 
>> [('·', 'NFP'), ('Defuzzification', 'NN'), ('Module', 'NN'), ('−', '.')] 

 Lemmas are: 
>> [('·', '·'), ('Defuzzification', 'defuzzification'), ('Module', 'Module'), ('−', "''")] 

 Dependency tags are: 
>> [(('·', 'Module'), 'punct'), (('Defuzzification', 'Module'), 'compound'), (('Module', 'root'), 'root'), (('−', 'Module'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 27 ===========================

 It transforms the fuzzy set obtained by the inference engine into a crisp value. 

Tokens are: 
>> ['It', 'transforms', 'the', 'fuzzy', 'set', 'obtained', 'by', 'the', 'inference', 'engine', 'into', 'a', 'crisp', 'value', '.'] 

 UPOS tags are: 
>> [('It', 'PRON'), ('transforms', 'VERB'), ('the', 'DET'), ('fuzzy', 'ADJ'), ('set', 'NOUN'), ('obtained', 'VERB'), ('by', 'ADP'), ('the', 'DET'), ('inference', 'NOUN'), ('engine', 'NOUN'), ('into', 'ADP'), ('a', 'DET'), ('crisp', 'ADJ'), ('value', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('It', 'PRP'), ('transforms', 'VBZ'), ('the', 'DT'), ('fuzzy', 'JJ'), ('set', 'NN'), ('obtained', 'VBN'), ('by', 'IN'), ('the', 'DT'), ('inference', 'NN'), ('engine', 'NN'), ('into', 'IN'), ('a', 'DT'), ('crisp', 'JJ'), ('value', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('It', 'it'), ('transforms', 'transform'), ('the', 'the'), ('fuzzy', 'fuzzy'), ('set', 'set'), ('obtained', 'obtain'), ('by', 'by'), ('the', 'the'), ('inference', 'inference'), ('engine', 'engine'), ('into', 'into'), ('a', 'a'), ('crisp', 'crisp'), ('value', 'value'), ('.', '.')] 

 Dependency tags are: 
>> [(('It', 'transforms'), 'nsubj'), (('transforms', 'root'), 'root'), (('the', 'set'), 'det'), (('fuzzy', 'set'), 'amod'), (('set', 'transforms'), 'obj'), (('obtained', 'set'), 'acl'), (('by', 'engine'), 'case'), (('the', 'engine'), 'det'), (('inference', 'engine'), 'compound'), (('engine', 'obtained'), 'obl'), (('into', 'value'), 'case'), (('a', 'value'), 'det'), (('crisp', 'value'), 'amod'), (('value', 'obtained'), 'obl'), (('.', 'transforms'), 'punct')]

 Named Entities are: 
>> []