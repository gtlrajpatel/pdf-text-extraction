

========================== Sentence 1 ===========================

 OOPC++ UNIT-1   Prof. Rupesh G. Vaishnav rupesh.vaishnav@darshan.ac.in 94280-37452 Information & Network Security (2170709)	 Darshan Institute of Engineering & Technology UNIT-5 Cryptographic Hash Functions      1  Outline Cryptographic Hash Functions  Applications 

Tokens are: 
>> ['OOPC', '++', 'UNIT', '-1', 'Prof.', 'Rupesh', 'G.', 'Vaishnav', 'rupesh.vaishnav@darshan.ac.in', '94280-37452', 'Information', '&', 'Network', 'Security', '(', '2170709', ')', 'Darshan', 'Institute', 'of', 'Engineering', '&', 'Technology', 'UNIT', '-5', 'Cryptographic', 'Hash', 'Functions', '1', 'Outline', 'Cryptographic', 'Hash', 'Functions', 'Applications'] 

 UPOS tags are: 
>> [('OOPC', 'PROPN'), ('++', 'NUM'), ('UNIT', 'NOUN'), ('-1', 'NOUN'), ('Prof.', 'PROPN'), ('Rupesh', 'PROPN'), ('G.', 'PROPN'), ('Vaishnav', 'PROPN'), ('rupesh.vaishnav@darshan.ac.in', 'X'), ('94280-37452', 'NUM'), ('Information', 'NOUN'), ('&', 'CCONJ'), ('Network', 'PROPN'), ('Security', 'NOUN'), ('(', 'PUNCT'), ('2170709', 'NUM'), (')', 'PUNCT'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('of', 'ADP'), ('Engineering', 'NOUN'), ('&', 'CCONJ'), ('Technology', 'NOUN'), ('UNIT', 'NOUN'), ('-5', 'NUM'), ('Cryptographic', 'ADJ'), ('Hash', 'NOUN'), ('Functions', 'NOUN'), ('1', 'NUM'), ('Outline', 'NOUN'), ('Cryptographic', 'ADJ'), ('Hash', 'NOUN'), ('Functions', 'NOUN'), ('Applications', 'NOUN')] 

 XPOS tags are: 
>> [('OOPC', 'NNP'), ('++', 'CD'), ('UNIT', 'NN'), ('-1', 'NN'), ('Prof.', 'NNP'), ('Rupesh', 'NNP'), ('G.', 'NNP'), ('Vaishnav', 'NNP'), ('rupesh.vaishnav@darshan.ac.in', 'ADD'), ('94280-37452', 'CD'), ('Information', 'NN'), ('&', 'CC'), ('Network', 'NNP'), ('Security', 'NN'), ('(', '-LRB-'), ('2170709', 'CD'), (')', '-RRB-'), ('Darshan', 'NNP'), ('Institute', 'NNP'), ('of', 'IN'), ('Engineering', 'NN'), ('&', 'CC'), ('Technology', 'NN'), ('UNIT', 'NN'), ('-5', 'CD'), ('Cryptographic', 'JJ'), ('Hash', 'NN'), ('Functions', 'NNS'), ('1', 'CD'), ('Outline', 'NN'), ('Cryptographic', 'JJ'), ('Hash', 'NN'), ('Functions', 'NNS'), ('Applications', 'NNS')] 

 Lemmas are: 
>> [('OOPC', 'OOPC'), ('++', '++'), ('UNIT', 'unit'), ('-1', '-1'), ('Prof.', 'Prof.'), ('Rupesh', 'Rupesh'), ('G.', 'G.'), ('Vaishnav', 'Vaishnav'), ('rupesh.vaishnav@darshan.ac.in', 'rupesh.vaishnav@darshan.ac.in'), ('94280-37452', '94280-37452'), ('Information', 'information'), ('&', '&'), ('Network', 'Network'), ('Security', 'security'), ('(', '('), ('2170709', '2170709'), (')', ')'), ('Darshan', 'Darshan'), ('Institute', 'Institute'), ('of', 'of'), ('Engineering', 'Engineering'), ('&', '&'), ('Technology', 'technology'), ('UNIT', 'unit'), ('-5', '-5'), ('Cryptographic', 'Cryptographic'), ('Hash', 'hash'), ('Functions', 'function'), ('1', '1'), ('Outline', 'outline'), ('Cryptographic', 'Cryptographic'), ('Hash', 'hash'), ('Functions', 'function'), ('Applications', 'application')] 

 Dependency tags are: 
>> [(('OOPC', 'root'), 'root'), (('++', 'UNIT'), 'nummod'), (('UNIT', '-1'), 'compound'), (('-1', 'Prof.'), 'compound'), (('Prof.', 'OOPC'), 'list'), (('Rupesh', 'Prof.'), 'flat'), (('G.', 'Vaishnav'), 'compound'), (('Vaishnav', 'OOPC'), 'list'), (('rupesh.vaishnav@darshan.ac.in', 'OOPC'), 'list'), (('94280-37452', 'OOPC'), 'list'), (('Information', 'OOPC'), 'list'), (('&', 'Security'), 'cc'), (('Network', 'Security'), 'compound'), (('Security', 'Information'), 'conj'), (('(', 'Institute'), 'punct'), (('2170709', 'Security'), 'appos'), ((')', '2170709'), 'punct'), (('Darshan', 'Institute'), 'compound'), (('Institute', 'OOPC'), 'list'), (('of', 'UNIT'), 'case'), (('Engineering', 'UNIT'), 'compound'), (('&', 'Technology'), 'cc'), (('Technology', 'Engineering'), 'conj'), (('UNIT', 'Institute'), 'nmod'), (('-5', 'Functions'), 'nummod'), (('Cryptographic', 'Functions'), 'amod'), (('Hash', 'Functions'), 'compound'), (('Functions', 'Institute'), 'nmod'), (('1', 'Outline'), 'nummod'), (('Outline', 'Applications'), 'compound'), (('Cryptographic', 'Applications'), 'amod'), (('Hash', 'Functions'), 'compound'), (('Functions', 'Applications'), 'compound'), (('Applications', 'Functions'), 'appos')]

 Named Entities are: 
>> [('94280-37452 Information & Network Security', 'ORG'), ('2170709', 'CARDINAL'), ('1', 'CARDINAL')]

========================== Sentence 2 ===========================

 Simple hash functions Requirements and security Hash functions based on Cipher Block Chaining Secure Hash Algorithm (SHA)   Unit-5  Cryptographic Hash Functions                                 Darshan Institute of Engineering & Technology   ‹#›  X.800 and RFC 2828 International Telecommunication Union (ITU) 2  Hash Function 

Tokens are: 
>> ['Simple', 'hash', 'functions', 'Requirements', 'and', 'security', 'Hash', 'functions', 'based', 'on', 'Cipher', 'Block', 'Chaining', 'Secure', 'Hash', 'Algorithm', '(', 'SHA', ')', 'Unit', '-5', 'Cryptographic', 'Hash', 'Functions', 'Darshan', 'Institute', 'of', 'Engineering', '&', 'Technology', '‹#›', 'X.800', 'and', 'RFC', '2828', 'International', 'Telecommunication', 'Union', '(', 'ITU', ')', '2', 'Hash', 'Function'] 

 UPOS tags are: 
>> [('Simple', 'ADJ'), ('hash', 'NOUN'), ('functions', 'NOUN'), ('Requirements', 'NOUN'), ('and', 'CCONJ'), ('security', 'NOUN'), ('Hash', 'NOUN'), ('functions', 'NOUN'), ('based', 'VERB'), ('on', 'ADP'), ('Cipher', 'PROPN'), ('Block', 'PROPN'), ('Chaining', 'PROPN'), ('Secure', 'ADJ'), ('Hash', 'PROPN'), ('Algorithm', 'PROPN'), ('(', 'PUNCT'), ('SHA', 'PROPN'), (')', 'PUNCT'), ('Unit', 'NOUN'), ('-5', 'NUM'), ('Cryptographic', 'ADJ'), ('Hash', 'PROPN'), ('Functions', 'PROPN'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('of', 'ADP'), ('Engineering', 'PROPN'), ('&', 'CCONJ'), ('Technology', 'PROPN'), ('‹#›', 'PROPN'), ('X.800', 'PROPN'), ('and', 'CCONJ'), ('RFC', 'PROPN'), ('2828', 'NUM'), ('International', 'ADJ'), ('Telecommunication', 'ADJ'), ('Union', 'PROPN'), ('(', 'PUNCT'), ('ITU', 'PROPN'), (')', 'PUNCT'), ('2', 'NUM'), ('Hash', 'NOUN'), ('Function', 'NOUN')] 

 XPOS tags are: 
>> [('Simple', 'JJ'), ('hash', 'NN'), ('functions', 'NNS'), ('Requirements', 'NNS'), ('and', 'CC'), ('security', 'NN'), ('Hash', 'NN'), ('functions', 'NNS'), ('based', 'VBN'), ('on', 'IN'), ('Cipher', 'NNP'), ('Block', 'NNP'), ('Chaining', 'NNP'), ('Secure', 'NNP'), ('Hash', 'NNP'), ('Algorithm', 'NNP'), ('(', '-LRB-'), ('SHA', 'NNP'), (')', '-RRB-'), ('Unit', 'NN'), ('-5', 'CD'), ('Cryptographic', 'NNP'), ('Hash', 'NNP'), ('Functions', 'NNPS'), ('Darshan', 'NNP'), ('Institute', 'NNP'), ('of', 'IN'), ('Engineering', 'NNP'), ('&', 'CC'), ('Technology', 'NNP'), ('‹#›', 'NNP'), ('X.800', 'NNP'), ('and', 'CC'), ('RFC', 'NNP'), ('2828', 'CD'), ('International', 'NNP'), ('Telecommunication', 'JJ'), ('Union', 'NNP'), ('(', '-LRB-'), ('ITU', 'NNP'), (')', '-RRB-'), ('2', 'CD'), ('Hash', 'NN'), ('Function', 'NN')] 

 Lemmas are: 
>> [('Simple', 'simple'), ('hash', 'hash'), ('functions', 'function'), ('Requirements', 'requirement'), ('and', 'and'), ('security', 'security'), ('Hash', 'hash'), ('functions', 'function'), ('based', 'base'), ('on', 'on'), ('Cipher', 'Cipher'), ('Block', 'Block'), ('Chaining', 'Chaining'), ('Secure', 'secure'), ('Hash', 'hash'), ('Algorithm', 'Algorithm'), ('(', '('), ('SHA', 'SHA'), (')', ')'), ('Unit', 'unit'), ('-5', '-5'), ('Cryptographic', 'Cryptographic'), ('Hash', 'hash'), ('Functions', 'Function'), ('Darshan', 'Darshan'), ('Institute', 'Institute'), ('of', 'of'), ('Engineering', 'Engineering'), ('&', '&'), ('Technology', 'Technology'), ('‹#›', '‹#›'), ('X.800', 'X.800'), ('and', 'and'), ('RFC', 'RFC'), ('2828', '2828'), ('International', 'International'), ('Telecommunication', 'Telecommunication'), ('Union', 'Union'), ('(', '('), ('ITU', 'ITU'), (')', ')'), ('2', '2'), ('Hash', 'hash'), ('Function', 'function')] 

 Dependency tags are: 
>> [(('Simple', 'Requirements'), 'amod'), (('hash', 'functions'), 'compound'), (('functions', 'Requirements'), 'compound'), (('Requirements', 'Function'), 'compound'), (('and', 'functions'), 'cc'), (('security', 'Hash'), 'compound'), (('Hash', 'functions'), 'compound'), (('functions', 'Requirements'), 'conj'), (('based', 'functions'), 'acl'), (('on', 'Algorithm'), 'case'), (('Cipher', 'Block'), 'compound'), (('Block', 'Algorithm'), 'compound'), (('Chaining', 'Algorithm'), 'compound'), (('Secure', 'Algorithm'), 'amod'), (('Hash', 'Algorithm'), 'compound'), (('Algorithm', 'based'), 'obl'), (('(', 'SHA'), 'punct'), (('SHA', 'Algorithm'), 'appos'), ((')', 'SHA'), 'punct'), (('Unit', 'Algorithm'), 'appos'), (('-5', 'Institute'), 'nummod'), (('Cryptographic', 'Functions'), 'amod'), (('Hash', 'Functions'), 'compound'), (('Functions', 'Institute'), 'compound'), (('Darshan', 'Institute'), 'compound'), (('Institute', 'Unit'), 'appos'), (('of', '‹#›'), 'case'), (('Engineering', '‹#›'), 'compound'), (('&', 'Technology'), 'cc'), (('Technology', 'Engineering'), 'conj'), (('‹#›', 'Institute'), 'compound'), (('X.800', 'Institute'), 'nmod'), (('and', 'RFC'), 'cc'), (('RFC', 'Union'), 'compound'), (('2828', 'Union'), 'nummod'), (('International', 'Union'), 'amod'), (('Telecommunication', 'Union'), 'amod'), (('Union', 'Function'), 'compound'), (('(', 'ITU'), 'punct'), (('ITU', 'Union'), 'appos'), ((')', 'ITU'), 'punct'), (('2', 'Function'), 'nummod'), (('Hash', 'Function'), 'compound'), (('Function', 'root'), 'root')]

 Named Entities are: 
>> [('Cipher Block Chaining Secure Hash Algorithm', 'ORG'), ('RFC 2828 International Telecommunication Union', 'ORG'), ('2', 'CARDINAL')]

========================== Sentence 3 ===========================

 A hash function H accepts a variable-length block of data M as input and produces a fixed-size hash value h = H(M). 

Tokens are: 
>> ['A', 'hash', 'function', 'H', 'accepts', 'a', 'variable', '-', 'length', 'block', 'of', 'data', 'M', 'as', 'input', 'and', 'produces', 'a', 'fixed', '-', 'size', 'hash', 'value', 'h', '=', 'H', '(', 'M', ')', '.'] 

 UPOS tags are: 
>> [('A', 'DET'), ('hash', 'NOUN'), ('function', 'NOUN'), ('H', 'PROPN'), ('accepts', 'VERB'), ('a', 'DET'), ('variable', 'ADJ'), ('-', 'PUNCT'), ('length', 'NOUN'), ('block', 'NOUN'), ('of', 'ADP'), ('data', 'NOUN'), ('M', 'NOUN'), ('as', 'ADP'), ('input', 'NOUN'), ('and', 'CCONJ'), ('produces', 'VERB'), ('a', 'DET'), ('fixed', 'VERB'), ('-', 'PUNCT'), ('size', 'NOUN'), ('hash', 'NOUN'), ('value', 'NOUN'), ('h', 'NOUN'), ('=', 'SYM'), ('H', 'NOUN'), ('(', 'PUNCT'), ('M', 'NOUN'), (')', 'PUNCT'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('A', 'DT'), ('hash', 'NN'), ('function', 'NN'), ('H', 'NNP'), ('accepts', 'VBZ'), ('a', 'DT'), ('variable', 'JJ'), ('-', 'HYPH'), ('length', 'NN'), ('block', 'NN'), ('of', 'IN'), ('data', 'NN'), ('M', 'NN'), ('as', 'IN'), ('input', 'NN'), ('and', 'CC'), ('produces', 'VBZ'), ('a', 'DT'), ('fixed', 'VBN'), ('-', 'HYPH'), ('size', 'NN'), ('hash', 'NN'), ('value', 'NN'), ('h', 'NN'), ('=', 'SYM'), ('H', 'NN'), ('(', '-LRB-'), ('M', 'NN'), (')', '-RRB-'), ('.', '.')] 

 Lemmas are: 
>> [('A', 'a'), ('hash', 'hash'), ('function', 'function'), ('H', 'H'), ('accepts', 'accept'), ('a', 'a'), ('variable', 'variable'), ('-', '-'), ('length', 'length'), ('block', 'block'), ('of', 'of'), ('data', 'datum'), ('M', 'm'), ('as', 'as'), ('input', 'input'), ('and', 'and'), ('produces', 'produce'), ('a', 'a'), ('fixed', 'fix'), ('-', '-'), ('size', 'size'), ('hash', 'hash'), ('value', 'value'), ('h', 'h'), ('=', '='), ('H', 'h'), ('(', '('), ('M', 'm'), (')', ')'), ('.', '.')] 

 Dependency tags are: 
>> [(('A', 'function'), 'det'), (('hash', 'function'), 'compound'), (('function', 'accepts'), 'nsubj'), (('H', 'accepts'), 'nsubj'), (('accepts', 'root'), 'root'), (('a', 'block'), 'det'), (('variable', 'length'), 'amod'), (('-', 'length'), 'punct'), (('length', 'block'), 'compound'), (('block', 'accepts'), 'obj'), (('of', 'M'), 'case'), (('data', 'M'), 'compound'), (('M', 'block'), 'nmod'), (('as', 'input'), 'case'), (('input', 'accepts'), 'obl'), (('and', 'produces'), 'cc'), (('produces', 'accepts'), 'conj'), (('a', 'value'), 'det'), (('fixed', 'size'), 'amod'), (('-', 'size'), 'punct'), (('size', 'value'), 'compound'), (('hash', 'value'), 'compound'), (('value', 'produces'), 'obj'), (('h', '='), 'nsubj'), (('=', 'value'), 'acl'), (('H', '='), 'obj'), (('(', 'M'), 'punct'), (('M', 'H'), 'appos'), ((')', 'M'), 'punct'), (('.', 'accepts'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 4 ===========================

 A “good” hash function has the property that the results of applying a change to any bit or bits in M results, with high probability, in a change to the hash code. 

Tokens are: 
>> ['A', '“', 'good', '”', 'hash', 'function', 'has', 'the', 'property', 'that', 'the', 'results', 'of', 'applying', 'a', 'change', 'to', 'any', 'bit', 'or', 'bits', 'in', 'M', 'results', ',', 'with', 'high', 'probability', ',', 'in', 'a', 'change', 'to', 'the', 'hash', 'code', '.'] 

 UPOS tags are: 
>> [('A', 'DET'), ('“', 'PUNCT'), ('good', 'ADJ'), ('”', 'PUNCT'), ('hash', 'NOUN'), ('function', 'NOUN'), ('has', 'VERB'), ('the', 'DET'), ('property', 'NOUN'), ('that', 'PRON'), ('the', 'DET'), ('results', 'NOUN'), ('of', 'SCONJ'), ('applying', 'VERB'), ('a', 'DET'), ('change', 'NOUN'), ('to', 'ADP'), ('any', 'DET'), ('bit', 'NOUN'), ('or', 'CCONJ'), ('bits', 'NOUN'), ('in', 'ADP'), ('M', 'NOUN'), ('results', 'NOUN'), (',', 'PUNCT'), ('with', 'ADP'), ('high', 'ADJ'), ('probability', 'NOUN'), (',', 'PUNCT'), ('in', 'ADP'), ('a', 'DET'), ('change', 'NOUN'), ('to', 'ADP'), ('the', 'DET'), ('hash', 'NOUN'), ('code', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('A', 'DT'), ('“', '``'), ('good', 'JJ'), ('”', "''"), ('hash', 'NN'), ('function', 'NN'), ('has', 'VBZ'), ('the', 'DT'), ('property', 'NN'), ('that', 'WDT'), ('the', 'DT'), ('results', 'NNS'), ('of', 'IN'), ('applying', 'VBG'), ('a', 'DT'), ('change', 'NN'), ('to', 'IN'), ('any', 'DT'), ('bit', 'NN'), ('or', 'CC'), ('bits', 'NNS'), ('in', 'IN'), ('M', 'NN'), ('results', 'NNS'), (',', ','), ('with', 'IN'), ('high', 'JJ'), ('probability', 'NN'), (',', ','), ('in', 'IN'), ('a', 'DT'), ('change', 'NN'), ('to', 'IN'), ('the', 'DT'), ('hash', 'NN'), ('code', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('A', 'a'), ('“', "''"), ('good', 'good'), ('”', "''"), ('hash', 'hash'), ('function', 'function'), ('has', 'have'), ('the', 'the'), ('property', 'property'), ('that', 'that'), ('the', 'the'), ('results', 'result'), ('of', 'of'), ('applying', 'apply'), ('a', 'a'), ('change', 'change'), ('to', 'to'), ('any', 'any'), ('bit', 'bit'), ('or', 'or'), ('bits', 'bit'), ('in', 'in'), ('M', 'm'), ('results', 'result'), (',', ','), ('with', 'with'), ('high', 'high'), ('probability', 'probability'), (',', ','), ('in', 'in'), ('a', 'a'), ('change', 'change'), ('to', 'to'), ('the', 'the'), ('hash', 'hash'), ('code', 'code'), ('.', '.')] 

 Dependency tags are: 
>> [(('A', 'function'), 'det'), (('“', 'good'), 'punct'), (('good', 'function'), 'amod'), (('”', 'good'), 'punct'), (('hash', 'function'), 'compound'), (('function', 'has'), 'nsubj'), (('has', 'root'), 'root'), (('the', 'property'), 'det'), (('property', 'has'), 'obj'), (('that', 'applying'), 'mark'), (('the', 'results'), 'det'), (('results', 'property'), 'acl:relcl'), (('of', 'applying'), 'mark'), (('applying', 'results'), 'acl'), (('a', 'change'), 'det'), (('change', 'applying'), 'obj'), (('to', 'bit'), 'case'), (('any', 'bit'), 'det'), (('bit', 'applying'), 'obl'), (('or', 'bits'), 'cc'), (('bits', 'bit'), 'conj'), (('in', 'results'), 'case'), (('M', 'results'), 'compound'), (('results', 'bit'), 'nmod'), ((',', 'probability'), 'punct'), (('with', 'probability'), 'case'), (('high', 'probability'), 'amod'), (('probability', 'results'), 'nmod'), ((',', 'change'), 'punct'), (('in', 'change'), 'case'), (('a', 'change'), 'det'), (('change', 'probability'), 'nmod'), (('to', 'code'), 'case'), (('the', 'code'), 'det'), (('hash', 'code'), 'compound'), (('code', 'change'), 'nmod'), (('.', 'has'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 5 ===========================

 Unit-5  Cryptographic Hash Functions                                 Darshan Institute of Engineering & Technology   ‹#›  Applications of Cryptographic Hash Functions Message authentication Digital Signature One-way password file   Unit-5  Cryptographic Hash Functions                                 Darshan Institute of Engineering & Technology   ‹#›  1. Message Authentication Message authentication is a mechanism or service used to verify the integrity of a message. 

Tokens are: 
>> ['Unit', '-5', 'Cryptographic', 'Hash', 'Functions', 'Darshan', 'Institute', 'of', 'Engineering', '&', 'Technology', '‹#›', 'Applications', 'of', 'Cryptographic', 'Hash', 'Functions', 'Message', 'authentication', 'Digital', 'Signature', 'One-way', 'password', 'file', 'Unit-5', 'Cryptographic', 'Hash', 'Functions', 'Darshan', 'Institute', 'of', 'Engineering', '&', 'Technology', '‹#›', '1', '.', 'Message', 'Authentication', 'Message', 'authentication', 'is', 'a', 'mechanism', 'or', 'service', 'used', 'to', 'verify', 'the', 'integrity', 'of', 'a', 'message', '.'] 

 UPOS tags are: 
>> [('Unit', 'NOUN'), ('-5', 'NUM'), ('Cryptographic', 'ADJ'), ('Hash', 'NOUN'), ('Functions', 'NOUN'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('of', 'ADP'), ('Engineering', 'NOUN'), ('&', 'CCONJ'), ('Technology', 'NOUN'), ('‹#›', 'NOUN'), ('Applications', 'NOUN'), ('of', 'ADP'), ('Cryptographic', 'ADJ'), ('Hash', 'NOUN'), ('Functions', 'NOUN'), ('Message', 'NOUN'), ('authentication', 'NOUN'), ('Digital', 'ADJ'), ('Signature', 'NOUN'), ('One-way', 'NOUN'), ('password', 'NOUN'), ('file', 'NOUN'), ('Unit-5', 'NOUN'), ('Cryptographic', 'ADJ'), ('Hash', 'NOUN'), ('Functions', 'NOUN'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('of', 'ADP'), ('Engineering', 'NOUN'), ('&', 'CCONJ'), ('Technology', 'NOUN'), ('‹#›', 'NOUN'), ('1', 'NUM'), ('.', 'PUNCT'), ('Message', 'NOUN'), ('Authentication', 'NOUN'), ('Message', 'NOUN'), ('authentication', 'NOUN'), ('is', 'AUX'), ('a', 'DET'), ('mechanism', 'NOUN'), ('or', 'CCONJ'), ('service', 'NOUN'), ('used', 'VERB'), ('to', 'PART'), ('verify', 'VERB'), ('the', 'DET'), ('integrity', 'NOUN'), ('of', 'ADP'), ('a', 'DET'), ('message', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Unit', 'NN'), ('-5', 'CD'), ('Cryptographic', 'JJ'), ('Hash', 'NN'), ('Functions', 'NNS'), ('Darshan', 'NNP'), ('Institute', 'NNP'), ('of', 'IN'), ('Engineering', 'NN'), ('&', 'CC'), ('Technology', 'NN'), ('‹#›', 'NN'), ('Applications', 'NNS'), ('of', 'IN'), ('Cryptographic', 'JJ'), ('Hash', 'NN'), ('Functions', 'NNS'), ('Message', 'NN'), ('authentication', 'NN'), ('Digital', 'JJ'), ('Signature', 'NN'), ('One-way', 'NN'), ('password', 'NN'), ('file', 'NN'), ('Unit-5', 'NN'), ('Cryptographic', 'JJ'), ('Hash', 'NN'), ('Functions', 'NNS'), ('Darshan', 'NNP'), ('Institute', 'NNP'), ('of', 'IN'), ('Engineering', 'NN'), ('&', 'CC'), ('Technology', 'NN'), ('‹#›', 'NN'), ('1', 'LS'), ('.', '.'), ('Message', 'NN'), ('Authentication', 'NN'), ('Message', 'NN'), ('authentication', 'NN'), ('is', 'VBZ'), ('a', 'DT'), ('mechanism', 'NN'), ('or', 'CC'), ('service', 'NN'), ('used', 'VBN'), ('to', 'TO'), ('verify', 'VB'), ('the', 'DT'), ('integrity', 'NN'), ('of', 'IN'), ('a', 'DT'), ('message', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('Unit', 'unit'), ('-5', '-5'), ('Cryptographic', 'Cryptographic'), ('Hash', 'hash'), ('Functions', 'function'), ('Darshan', 'Darshan'), ('Institute', 'Institute'), ('of', 'of'), ('Engineering', 'Engineering'), ('&', '&'), ('Technology', 'technology'), ('‹#›', '‹#›'), ('Applications', 'application'), ('of', 'of'), ('Cryptographic', 'Cryptographic'), ('Hash', 'hash'), ('Functions', 'function'), ('Message', 'message'), ('authentication', 'authentication'), ('Digital', 'digital'), ('Signature', 'signature'), ('One-way', 'one-way'), ('password', 'password'), ('file', 'file'), ('Unit-5', 'unciot'), ('Cryptographic', 'Cryptographic'), ('Hash', 'hash'), ('Functions', 'function'), ('Darshan', 'Darshan'), ('Institute', 'Institute'), ('of', 'of'), ('Engineering', 'Engineering'), ('&', '&'), ('Technology', 'technology'), ('‹#›', '‹#›'), ('1', '1'), ('.', '.'), ('Message', 'message'), ('Authentication', 'authentication'), ('Message', 'message'), ('authentication', 'authentication'), ('is', 'be'), ('a', 'a'), ('mechanism', 'mechanism'), ('or', 'or'), ('service', 'service'), ('used', 'use'), ('to', 'to'), ('verify', 'verify'), ('the', 'the'), ('integrity', 'integrity'), ('of', 'of'), ('a', 'a'), ('message', 'message'), ('.', '.')] 

 Dependency tags are: 
>> [(('Unit', 'mechanism'), 'nsubj'), (('-5', 'Functions'), 'nummod'), (('Cryptographic', 'Functions'), 'amod'), (('Hash', 'Functions'), 'compound'), (('Functions', 'Institute'), 'compound'), (('Darshan', 'Institute'), 'compound'), (('Institute', 'Unit'), 'appos'), (('of', 'Applications'), 'case'), (('Engineering', 'Applications'), 'compound'), (('&', 'Technology'), 'cc'), (('Technology', 'Engineering'), 'conj'), (('‹#›', 'Applications'), 'compound'), (('Applications', 'Institute'), 'nmod'), (('of', 'Functions'), 'case'), (('Cryptographic', 'Functions'), 'amod'), (('Hash', 'Functions'), 'compound'), (('Functions', 'Applications'), 'nmod'), (('Message', 'Applications'), 'compound'), (('authentication', 'file'), 'compound'), (('Digital', 'file'), 'amod'), (('Signature', 'file'), 'compound'), (('One-way', 'file'), 'compound'), (('password', 'file'), 'compound'), (('file', 'Applications'), 'nmod'), (('Unit-5', 'Institute'), 'compound'), (('Cryptographic', 'Functions'), 'amod'), (('Hash', 'Functions'), 'compound'), (('Functions', 'Institute'), 'compound'), (('Darshan', 'Institute'), 'compound'), (('Institute', 'file'), 'appos'), (('of', '‹#›'), 'case'), (('Engineering', '‹#›'), 'compound'), (('&', 'Technology'), 'cc'), (('Technology', 'Engineering'), 'conj'), (('‹#›', 'Institute'), 'nmod'), (('1', 'mechanism'), 'nummod'), (('.', '1'), 'punct'), (('Message', 'authentication'), 'compound'), (('Authentication', 'authentication'), 'compound'), (('Message', 'authentication'), 'compound'), (('authentication', 'mechanism'), 'nsubj'), (('is', 'mechanism'), 'cop'), (('a', 'mechanism'), 'det'), (('mechanism', 'root'), 'root'), (('or', 'service'), 'cc'), (('service', 'mechanism'), 'conj'), (('used', 'service'), 'acl'), (('to', 'verify'), 'mark'), (('verify', 'used'), 'xcomp'), (('the', 'integrity'), 'det'), (('integrity', 'verify'), 'obj'), (('of', 'message'), 'case'), (('a', 'message'), 'det'), (('message', 'integrity'), 'nmod'), (('.', 'mechanism'), 'punct')]

 Named Entities are: 
>> [('Unit-5  Cryptographic Hash Functions                                 Darshan Institute of Engineering & Technology', 'ORG'), ('Cryptographic Hash Functions                                 Darshan Institute of Engineering & Technology', 'ORG'), ('1', 'CARDINAL'), ('Message Authentication Message', 'PRODUCT')]

========================== Sentence 6 ===========================

 Message authentication assures that data received are exactly as sent (i.e.---, contain no modification, insertion, deletion, or replay). 

Tokens are: 
>> ['Message', 'authentication', 'assures', 'that', 'data', 'received', 'are', 'exactly', 'as', 'sent', '(', 'i.e.', '---', ',', 'contain', 'no', 'modification', ',', 'insertion', ',', 'deletion', ',', 'or', 'replay', ')', '.'] 

 UPOS tags are: 
>> [('Message', 'NOUN'), ('authentication', 'NOUN'), ('assures', 'VERB'), ('that', 'SCONJ'), ('data', 'NOUN'), ('received', 'VERB'), ('are', 'AUX'), ('exactly', 'ADV'), ('as', 'SCONJ'), ('sent', 'VERB'), ('(', 'PUNCT'), ('i.e.', 'ADV'), ('---', 'PUNCT'), (',', 'PUNCT'), ('contain', 'VERB'), ('no', 'DET'), ('modification', 'NOUN'), (',', 'PUNCT'), ('insertion', 'NOUN'), (',', 'PUNCT'), ('deletion', 'NOUN'), (',', 'PUNCT'), ('or', 'CCONJ'), ('replay', 'NOUN'), (')', 'PUNCT'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Message', 'NN'), ('authentication', 'NN'), ('assures', 'VBZ'), ('that', 'IN'), ('data', 'NNS'), ('received', 'VBN'), ('are', 'VBP'), ('exactly', 'RB'), ('as', 'IN'), ('sent', 'VBN'), ('(', '-LRB-'), ('i.e.', 'FW'), ('---', ','), (',', ','), ('contain', 'VBP'), ('no', 'DT'), ('modification', 'NN'), (',', ','), ('insertion', 'NN'), (',', ','), ('deletion', 'NN'), (',', ','), ('or', 'CC'), ('replay', 'NN'), (')', '-RRB-'), ('.', '.')] 

 Lemmas are: 
>> [('Message', 'message'), ('authentication', 'authentication'), ('assures', 'assure'), ('that', 'that'), ('data', 'datum'), ('received', 'receive'), ('are', 'be'), ('exactly', 'exactly'), ('as', 'as'), ('sent', 'send'), ('(', '('), ('i.e.', 'i.e.'), ('---', '---'), (',', ','), ('contain', 'contain'), ('no', 'no'), ('modification', 'modification'), (',', ','), ('insertion', 'insertion'), (',', ','), ('deletion', 'deletion'), (',', ','), ('or', 'or'), ('replay', 'replay'), (')', ')'), ('.', '.')] 

 Dependency tags are: 
>> [(('Message', 'authentication'), 'compound'), (('authentication', 'assures'), 'nsubj'), (('assures', 'root'), 'root'), (('that', 'sent'), 'mark'), (('data', 'sent'), 'nsubj:pass'), (('received', 'data'), 'acl'), (('are', 'sent'), 'aux:pass'), (('exactly', 'sent'), 'advmod'), (('as', 'sent'), 'mark'), (('sent', 'assures'), 'ccomp'), (('(', 'contain'), 'punct'), (('i.e.', 'contain'), 'advmod'), (('---', 'i.e.'), 'punct'), ((',', 'contain'), 'punct'), (('contain', 'assures'), 'ccomp'), (('no', 'modification'), 'det'), (('modification', 'contain'), 'obj'), ((',', 'insertion'), 'punct'), (('insertion', 'modification'), 'conj'), ((',', 'deletion'), 'punct'), (('deletion', 'modification'), 'conj'), ((',', 'replay'), 'punct'), (('or', 'replay'), 'cc'), (('replay', 'modification'), 'conj'), ((')', 'contain'), 'punct'), (('.', 'assures'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 7 ===========================

 When a hash function is used to provide message authentication, the hash function value is often referred to as a message digest. 

Tokens are: 
>> ['When', 'a', 'hash', 'function', 'is', 'used', 'to', 'provide', 'message', 'authentication', ',', 'the', 'hash', 'function', 'value', 'is', 'often', 'referred', 'to', 'as', 'a', 'message', 'digest', '.'] 

 UPOS tags are: 
>> [('When', 'SCONJ'), ('a', 'DET'), ('hash', 'NOUN'), ('function', 'NOUN'), ('is', 'AUX'), ('used', 'VERB'), ('to', 'PART'), ('provide', 'VERB'), ('message', 'NOUN'), ('authentication', 'NOUN'), (',', 'PUNCT'), ('the', 'DET'), ('hash', 'NOUN'), ('function', 'NOUN'), ('value', 'NOUN'), ('is', 'AUX'), ('often', 'ADV'), ('referred', 'VERB'), ('to', 'ADP'), ('as', 'ADP'), ('a', 'DET'), ('message', 'NOUN'), ('digest', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('When', 'WRB'), ('a', 'DT'), ('hash', 'NN'), ('function', 'NN'), ('is', 'VBZ'), ('used', 'VBN'), ('to', 'TO'), ('provide', 'VB'), ('message', 'NN'), ('authentication', 'NN'), (',', ','), ('the', 'DT'), ('hash', 'NN'), ('function', 'NN'), ('value', 'NN'), ('is', 'VBZ'), ('often', 'RB'), ('referred', 'VBN'), ('to', 'IN'), ('as', 'IN'), ('a', 'DT'), ('message', 'NN'), ('digest', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('When', 'when'), ('a', 'a'), ('hash', 'hash'), ('function', 'function'), ('is', 'be'), ('used', 'use'), ('to', 'to'), ('provide', 'provide'), ('message', 'message'), ('authentication', 'authentication'), (',', ','), ('the', 'the'), ('hash', 'hash'), ('function', 'function'), ('value', 'value'), ('is', 'be'), ('often', 'often'), ('referred', 'refer'), ('to', 'to'), ('as', 'as'), ('a', 'a'), ('message', 'message'), ('digest', 'digest'), ('.', '.')] 

 Dependency tags are: 
>> [(('When', 'used'), 'mark'), (('a', 'function'), 'det'), (('hash', 'function'), 'compound'), (('function', 'used'), 'nsubj:pass'), (('is', 'used'), 'aux:pass'), (('used', 'referred'), 'advcl'), (('to', 'provide'), 'mark'), (('provide', 'used'), 'xcomp'), (('message', 'authentication'), 'compound'), (('authentication', 'provide'), 'obj'), ((',', 'referred'), 'punct'), (('the', 'value'), 'det'), (('hash', 'value'), 'compound'), (('function', 'value'), 'compound'), (('value', 'referred'), 'nsubj:pass'), (('is', 'referred'), 'aux:pass'), (('often', 'referred'), 'advmod'), (('referred', 'root'), 'root'), (('to', 'referred'), 'obl'), (('as', 'digest'), 'case'), (('a', 'digest'), 'det'), (('message', 'digest'), 'compound'), (('digest', 'referred'), 'obl'), (('.', 'referred'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 8 ===========================

 Unit-5  Cryptographic Hash Functions                                 Darshan Institute of Engineering & Technology   ‹#›  Message authentication method - 1 Only A and B share the secret key, the message must have come from A and has not been altered. 

Tokens are: 
>> ['Unit', '-5', 'Cryptographic', 'Hash', 'Functions', 'Darshan', 'Institute', 'of', 'Engineering', '&', 'Technology', '‹#›', 'Message', 'authentication', 'method', '-', '1', 'Only', 'A', 'and', 'B', 'share', 'the', 'secret', 'key', ',', 'the', 'message', 'must', 'have', 'come', 'from', 'A', 'and', 'has', 'not', 'been', 'altered', '.'] 

 UPOS tags are: 
>> [('Unit', 'NOUN'), ('-5', 'NUM'), ('Cryptographic', 'ADJ'), ('Hash', 'NOUN'), ('Functions', 'NOUN'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('of', 'ADP'), ('Engineering', 'NOUN'), ('&', 'CCONJ'), ('Technology', 'NOUN'), ('‹#›', 'NOUN'), ('Message', 'NOUN'), ('authentication', 'NOUN'), ('method', 'NOUN'), ('-', 'PUNCT'), ('1', 'NUM'), ('Only', 'ADV'), ('A', 'DET'), ('and', 'CCONJ'), ('B', 'NOUN'), ('share', 'VERB'), ('the', 'DET'), ('secret', 'ADJ'), ('key', 'NOUN'), (',', 'PUNCT'), ('the', 'DET'), ('message', 'NOUN'), ('must', 'AUX'), ('have', 'AUX'), ('come', 'VERB'), ('from', 'ADP'), ('A', 'DET'), ('and', 'CCONJ'), ('has', 'AUX'), ('not', 'PART'), ('been', 'AUX'), ('altered', 'VERB'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Unit', 'NN'), ('-5', 'CD'), ('Cryptographic', 'NNP'), ('Hash', 'NN'), ('Functions', 'NNS'), ('Darshan', 'NNP'), ('Institute', 'NNP'), ('of', 'IN'), ('Engineering', 'NN'), ('&', 'CC'), ('Technology', 'NN'), ('‹#›', 'NN'), ('Message', 'NN'), ('authentication', 'NN'), ('method', 'NN'), ('-', ','), ('1', 'CD'), ('Only', 'RB'), ('A', 'DT'), ('and', 'CC'), ('B', 'NN'), ('share', 'VB'), ('the', 'DT'), ('secret', 'JJ'), ('key', 'NN'), (',', ','), ('the', 'DT'), ('message', 'NN'), ('must', 'MD'), ('have', 'VB'), ('come', 'VBN'), ('from', 'IN'), ('A', 'DT'), ('and', 'CC'), ('has', 'VBZ'), ('not', 'RB'), ('been', 'VBN'), ('altered', 'VBN'), ('.', '.')] 

 Lemmas are: 
>> [('Unit', 'unit'), ('-5', '-5'), ('Cryptographic', 'Cryptographic'), ('Hash', 'hash'), ('Functions', 'function'), ('Darshan', 'Darshan'), ('Institute', 'Institute'), ('of', 'of'), ('Engineering', 'Engineering'), ('&', '&'), ('Technology', 'technology'), ('‹#›', '‹#›'), ('Message', 'message'), ('authentication', 'authentication'), ('method', 'method'), ('-', '-'), ('1', '1'), ('Only', 'only'), ('A', 'a'), ('and', 'and'), ('B', 'b'), ('share', 'share'), ('the', 'the'), ('secret', 'secret'), ('key', 'key'), (',', ','), ('the', 'the'), ('message', 'message'), ('must', 'must'), ('have', 'have'), ('come', 'come'), ('from', 'from'), ('A', 'a'), ('and', 'and'), ('has', 'have'), ('not', 'not'), ('been', 'be'), ('altered', 'alter'), ('.', '.')] 

 Dependency tags are: 
>> [(('Unit', 'Functions'), 'compound'), (('-5', 'Unit'), 'nummod'), (('Cryptographic', 'Hash'), 'amod'), (('Hash', 'Functions'), 'compound'), (('Functions', 'Institute'), 'compound'), (('Darshan', 'Institute'), 'compound'), (('Institute', 'come'), 'nsubj'), (('of', 'method'), 'case'), (('Engineering', 'method'), 'compound'), (('&', 'Technology'), 'cc'), (('Technology', 'Engineering'), 'conj'), (('‹#›', 'method'), 'compound'), (('Message', 'method'), 'compound'), (('authentication', 'method'), 'compound'), (('method', 'Institute'), 'nmod'), (('-', 'method'), 'punct'), (('1', 'share'), 'nsubj'), (('Only', 'A'), 'advmod'), (('A', 'share'), 'nsubj'), (('and', 'B'), 'cc'), (('B', 'A'), 'conj'), (('share', 'method'), 'parataxis'), (('the', 'key'), 'det'), (('secret', 'key'), 'amod'), (('key', 'share'), 'obj'), ((',', 'come'), 'punct'), (('the', 'message'), 'det'), (('message', 'come'), 'nsubj'), (('must', 'come'), 'aux'), (('have', 'come'), 'aux'), (('come', 'root'), 'root'), (('from', 'A'), 'case'), (('A', 'come'), 'obl'), (('and', 'altered'), 'cc'), (('has', 'altered'), 'aux'), (('not', 'altered'), 'advmod'), (('been', 'altered'), 'aux:pass'), (('altered', 'come'), 'conj'), (('.', 'come'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 9 ===========================

 The hash code provides the structure required to achieve authentication. 

Tokens are: 
>> ['The', 'hash', 'code', 'provides', 'the', 'structure', 'required', 'to', 'achieve', 'authentication', '.'] 

 UPOS tags are: 
>> [('The', 'DET'), ('hash', 'NOUN'), ('code', 'NOUN'), ('provides', 'VERB'), ('the', 'DET'), ('structure', 'NOUN'), ('required', 'VERB'), ('to', 'PART'), ('achieve', 'VERB'), ('authentication', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('The', 'DT'), ('hash', 'NN'), ('code', 'NN'), ('provides', 'VBZ'), ('the', 'DT'), ('structure', 'NN'), ('required', 'VBN'), ('to', 'TO'), ('achieve', 'VB'), ('authentication', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('The', 'the'), ('hash', 'hash'), ('code', 'code'), ('provides', 'provide'), ('the', 'the'), ('structure', 'structure'), ('required', 'require'), ('to', 'to'), ('achieve', 'achieve'), ('authentication', 'authentication'), ('.', '.')] 

 Dependency tags are: 
>> [(('The', 'code'), 'det'), (('hash', 'code'), 'compound'), (('code', 'provides'), 'nsubj'), (('provides', 'root'), 'root'), (('the', 'structure'), 'det'), (('structure', 'provides'), 'obj'), (('required', 'structure'), 'acl'), (('to', 'achieve'), 'mark'), (('achieve', 'required'), 'xcomp'), (('authentication', 'achieve'), 'obj'), (('.', 'provides'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 10 ===========================

 Because encryption is applied to the entire message plus hash code, confidentiality is also provided. 

Tokens are: 
>> ['Because', 'encryption', 'is', 'applied', 'to', 'the', 'entire', 'message', 'plus', 'hash', 'code', ',', 'confidentiality', 'is', 'also', 'provided', '.'] 

 UPOS tags are: 
>> [('Because', 'SCONJ'), ('encryption', 'NOUN'), ('is', 'AUX'), ('applied', 'VERB'), ('to', 'ADP'), ('the', 'DET'), ('entire', 'ADJ'), ('message', 'NOUN'), ('plus', 'CCONJ'), ('hash', 'NOUN'), ('code', 'NOUN'), (',', 'PUNCT'), ('confidentiality', 'NOUN'), ('is', 'AUX'), ('also', 'ADV'), ('provided', 'VERB'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Because', 'IN'), ('encryption', 'NN'), ('is', 'VBZ'), ('applied', 'VBN'), ('to', 'IN'), ('the', 'DT'), ('entire', 'JJ'), ('message', 'NN'), ('plus', 'CC'), ('hash', 'NN'), ('code', 'NN'), (',', ','), ('confidentiality', 'NN'), ('is', 'VBZ'), ('also', 'RB'), ('provided', 'VBN'), ('.', '.')] 

 Lemmas are: 
>> [('Because', 'because'), ('encryption', 'encryption'), ('is', 'be'), ('applied', 'apply'), ('to', 'to'), ('the', 'the'), ('entire', 'entire'), ('message', 'message'), ('plus', 'plus'), ('hash', 'hash'), ('code', 'code'), (',', ','), ('confidentiality', 'confidentiality'), ('is', 'be'), ('also', 'also'), ('provided', 'provide'), ('.', '.')] 

 Dependency tags are: 
>> [(('Because', 'applied'), 'mark'), (('encryption', 'applied'), 'nsubj:pass'), (('is', 'applied'), 'aux:pass'), (('applied', 'provided'), 'advcl'), (('to', 'message'), 'case'), (('the', 'message'), 'det'), (('entire', 'message'), 'amod'), (('message', 'applied'), 'obl'), (('plus', 'code'), 'cc'), (('hash', 'code'), 'compound'), (('code', 'message'), 'conj'), ((',', 'provided'), 'punct'), (('confidentiality', 'provided'), 'nsubj:pass'), (('is', 'provided'), 'aux:pass'), (('also', 'provided'), 'advmod'), (('provided', 'root'), 'root'), (('.', 'provided'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 11 ===========================

 E D ll H H M M    K K H(M) Compare  E (K, [ M || H(M)]) 

Tokens are: 
>> ['E', 'D', 'll', 'H', 'H', 'M', 'M', 'K', 'K', 'H(', 'M', ')', 'Compare', 'E', '(', 'K', ',', '[', 'M', '||', 'H', '(', 'M', ')', ']', ')'] 

 UPOS tags are: 
>> [('E', 'PROPN'), ('D', 'PROPN'), ('ll', 'NOUN'), ('H', 'PROPN'), ('H', 'PROPN'), ('M', 'NUM'), ('M', 'NUM'), ('K', 'NUM'), ('K', 'NUM'), ('H(', 'NUM'), ('M', 'NUM'), (')', 'PUNCT'), ('Compare', 'NOUN'), ('E', 'PROPN'), ('(', 'PUNCT'), ('K', 'NUM'), (',', 'PUNCT'), ('[', 'PUNCT'), ('M', 'NUM'), ('||', 'SYM'), ('H', 'NUM'), ('(', 'PUNCT'), ('M', 'NUM'), (')', 'PUNCT'), (']', 'PUNCT'), (')', 'PUNCT')] 

 XPOS tags are: 
>> [('E', 'NNP'), ('D', 'NNP'), ('ll', 'NNS'), ('H', 'NNP'), ('H', 'NNP'), ('M', 'CD'), ('M', 'CD'), ('K', 'CD'), ('K', 'CD'), ('H(', 'CD'), ('M', 'CD'), (')', '-RRB-'), ('Compare', 'NN'), ('E', 'NNP'), ('(', '-LRB-'), ('K', 'CD'), (',', ','), ('[', '-LRB-'), ('M', 'CD'), ('||', 'SYM'), ('H', 'CD'), ('(', '-LRB-'), ('M', 'CD'), (')', '-RRB-'), (']', '-RRB-'), (')', '-RRB-')] 

 Lemmas are: 
>> [('E', 'E'), ('D', 'D'), ('ll', 'will'), ('H', 'H'), ('H', 'H'), ('M', 'm'), ('M', 'm'), ('K', 'k'), ('K', 'k'), ('H(', 'h('), ('M', 'm'), (')', ')'), ('Compare', 'compare'), ('E', 'E'), ('(', '('), ('K', 'k'), (',', ','), ('[', '['), ('M', 'm'), ('||', '||'), ('H', 'H'), ('(', '('), ('M', 'm'), (')', ')'), (']', ']'), (')', ')')] 

 Dependency tags are: 
>> [(('E', 'root'), 'root'), (('D', 'E'), 'flat'), (('ll', 'E'), 'list'), (('H', 'K'), 'compound'), (('H', 'K'), 'compound'), (('M', 'K'), 'compound'), (('M', 'K'), 'compound'), (('K', 'K'), 'compound'), (('K', 'Compare'), 'nummod'), (('H(', 'M'), 'compound'), (('M', 'K'), 'compound'), ((')', 'M'), 'punct'), (('Compare', 'E'), 'list'), (('E', 'Compare'), 'appos'), (('(', 'K'), 'punct'), (('K', 'E'), 'appos'), ((',', 'M'), 'punct'), (('[', 'M'), 'punct'), (('M', 'E'), 'list'), (('||', 'M'), 'punct'), (('H', 'M'), 'nmod'), (('(', 'M'), 'punct'), (('M', 'M'), 'appos'), ((')', 'M'), 'punct'), ((']', 'M'), 'punct'), ((')', 'M'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 12 ===========================

 Source A Destination B  Unit-5  Cryptographic Hash Functions                                 Darshan Institute of Engineering & Technology   ‹#›  Message authentication method - 2 Only the hash code is encrypted, using symmetric encryption. 

Tokens are: 
>> ['Source', 'A', 'Destination', 'B', 'Unit-5', 'Cryptographic', 'Hash', 'Functions', 'Darshan', 'Institute', 'of', 'Engineering', '&', 'Technology', '‹#›', 'Message', 'authentication', 'method', '-', '2', 'Only', 'the', 'hash', 'code', 'is', 'encrypted', ',', 'using', 'symmetric', 'encryption', '.'] 

 UPOS tags are: 
>> [('Source', 'NOUN'), ('A', 'DET'), ('Destination', 'NOUN'), ('B', 'NOUN'), ('Unit-5', 'PROPN'), ('Cryptographic', 'ADJ'), ('Hash', 'PROPN'), ('Functions', 'PROPN'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('of', 'ADP'), ('Engineering', 'NOUN'), ('&', 'CCONJ'), ('Technology', 'NOUN'), ('‹#›', 'NOUN'), ('Message', 'NOUN'), ('authentication', 'NOUN'), ('method', 'NOUN'), ('-', 'PUNCT'), ('2', 'NUM'), ('Only', 'ADV'), ('the', 'DET'), ('hash', 'NOUN'), ('code', 'NOUN'), ('is', 'AUX'), ('encrypted', 'VERB'), (',', 'PUNCT'), ('using', 'VERB'), ('symmetric', 'ADJ'), ('encryption', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Source', 'NN'), ('A', 'DT'), ('Destination', 'NN'), ('B', 'NN'), ('Unit-5', 'NNP'), ('Cryptographic', 'NNP'), ('Hash', 'NNP'), ('Functions', 'NNPS'), ('Darshan', 'NNP'), ('Institute', 'NNP'), ('of', 'IN'), ('Engineering', 'NN'), ('&', 'CC'), ('Technology', 'NN'), ('‹#›', 'NN'), ('Message', 'NN'), ('authentication', 'NN'), ('method', 'NN'), ('-', ','), ('2', 'CD'), ('Only', 'RB'), ('the', 'DT'), ('hash', 'NN'), ('code', 'NN'), ('is', 'VBZ'), ('encrypted', 'VBN'), (',', ','), ('using', 'VBG'), ('symmetric', 'JJ'), ('encryption', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('Source', 'source'), ('A', 'a'), ('Destination', 'destination'), ('B', 'b'), ('Unit-5', 'Unit-5'), ('Cryptographic', 'Cryptographic'), ('Hash', 'hash'), ('Functions', 'Function'), ('Darshan', 'Darshan'), ('Institute', 'Institute'), ('of', 'of'), ('Engineering', 'Engineering'), ('&', '&'), ('Technology', 'technology'), ('‹#›', '‹#›'), ('Message', 'message'), ('authentication', 'authentication'), ('method', 'method'), ('-', '-'), ('2', '2'), ('Only', 'only'), ('the', 'the'), ('hash', 'hash'), ('code', 'code'), ('is', 'be'), ('encrypted', 'encrypt'), (',', ','), ('using', 'use'), ('symmetric', 'symmetric'), ('encryption', 'encryption'), ('.', '.')] 

 Dependency tags are: 
>> [(('Source', 'root'), 'root'), (('A', 'Institute'), 'det'), (('Destination', 'B'), 'compound'), (('B', 'Institute'), 'compound'), (('Unit-5', 'Institute'), 'compound'), (('Cryptographic', 'Functions'), 'amod'), (('Hash', 'Functions'), 'compound'), (('Functions', 'Institute'), 'compound'), (('Darshan', 'Institute'), 'compound'), (('Institute', 'Source'), 'appos'), (('of', 'method'), 'case'), (('Engineering', 'method'), 'compound'), (('&', 'Technology'), 'cc'), (('Technology', 'Engineering'), 'conj'), (('‹#›', 'method'), 'compound'), (('Message', 'method'), 'compound'), (('authentication', 'method'), 'compound'), (('method', 'Institute'), 'nmod'), (('-', 'Institute'), 'punct'), (('2', 'encrypted'), 'nsubj:pass'), (('Only', 'code'), 'advmod'), (('the', 'code'), 'det'), (('hash', 'code'), 'compound'), (('code', 'encrypted'), 'nsubj:pass'), (('is', 'encrypted'), 'aux:pass'), (('encrypted', 'method'), 'acl:relcl'), ((',', 'encrypted'), 'punct'), (('using', 'encrypted'), 'advcl'), (('symmetric', 'encryption'), 'amod'), (('encryption', 'using'), 'obj'), (('.', 'Source'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 13 ===========================

 This reduces the processing burden for those applications that do not require confidentiality. 

Tokens are: 
>> ['This', 'reduces', 'the', 'processing', 'burden', 'for', 'those', 'applications', 'that', 'do', 'not', 'require', 'confidentiality', '.'] 

 UPOS tags are: 
>> [('This', 'PRON'), ('reduces', 'VERB'), ('the', 'DET'), ('processing', 'NOUN'), ('burden', 'NOUN'), ('for', 'ADP'), ('those', 'DET'), ('applications', 'NOUN'), ('that', 'PRON'), ('do', 'AUX'), ('not', 'PART'), ('require', 'VERB'), ('confidentiality', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('This', 'DT'), ('reduces', 'VBZ'), ('the', 'DT'), ('processing', 'NN'), ('burden', 'NN'), ('for', 'IN'), ('those', 'DT'), ('applications', 'NNS'), ('that', 'WDT'), ('do', 'VBP'), ('not', 'RB'), ('require', 'VB'), ('confidentiality', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('This', 'this'), ('reduces', 'reduce'), ('the', 'the'), ('processing', 'processing'), ('burden', 'burden'), ('for', 'for'), ('those', 'that'), ('applications', 'application'), ('that', 'that'), ('do', 'do'), ('not', 'not'), ('require', 'require'), ('confidentiality', 'confidentiality'), ('.', '.')] 

 Dependency tags are: 
>> [(('This', 'reduces'), 'nsubj'), (('reduces', 'root'), 'root'), (('the', 'burden'), 'det'), (('processing', 'burden'), 'compound'), (('burden', 'reduces'), 'obj'), (('for', 'applications'), 'case'), (('those', 'applications'), 'det'), (('applications', 'burden'), 'nmod'), (('that', 'require'), 'nsubj'), (('do', 'require'), 'aux'), (('not', 'require'), 'advmod'), (('require', 'applications'), 'acl:relcl'), (('confidentiality', 'require'), 'obj'), (('.', 'reduces'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 14 ===========================

 H M   Source A Destination B E K ll M  E(K, H(M)) 

Tokens are: 
>> ['H', 'M', 'Source', 'A', 'Destination', 'B', 'E', 'K', 'll', 'M', 'E(', 'K', ',', 'H(', 'M', ')', ')'] 

 UPOS tags are: 
>> [('H', 'PROPN'), ('M', 'NUM'), ('Source', 'NOUN'), ('A', 'DET'), ('Destination', 'NOUN'), ('B', 'NUM'), ('E', 'NOUN'), ('K', 'NUM'), ('ll', 'NOUN'), ('M', 'NUM'), ('E(', 'NUM'), ('K', 'NUM'), (',', 'PUNCT'), ('H(', 'NUM'), ('M', 'NUM'), (')', 'PUNCT'), (')', 'PUNCT')] 

 XPOS tags are: 
>> [('H', 'NNP'), ('M', 'CD'), ('Source', 'NN'), ('A', 'DT'), ('Destination', 'NN'), ('B', 'CD'), ('E', 'NN'), ('K', 'CD'), ('ll', 'NN'), ('M', 'CD'), ('E(', 'CD'), ('K', 'CD'), (',', ','), ('H(', 'CD'), ('M', 'CD'), (')', '-RRB-'), (')', '-RRB-')] 

 Lemmas are: 
>> [('H', 'H'), ('M', 'm'), ('Source', 'source'), ('A', 'a'), ('Destination', 'destination'), ('B', 'b'), ('E', 'e'), ('K', 'k'), ('ll', 'will'), ('M', 'm'), ('E(', 'e('), ('K', 'k'), (',', ','), ('H(', 'h('), ('M', 'm'), (')', ')'), (')', ')')] 

 Dependency tags are: 
>> [(('H', 'M'), 'compound'), (('M', 'Source'), 'nummod'), (('Source', 'root'), 'root'), (('A', 'Destination'), 'det'), (('Destination', 'Source'), 'appos'), (('B', 'K'), 'compound'), (('E', 'K'), 'compound'), (('K', 'Destination'), 'appos'), (('ll', 'M'), 'compound'), (('M', 'Source'), 'list'), (('E(', 'K'), 'compound'), (('K', 'M'), 'nummod'), ((',', 'M'), 'punct'), (('H(', 'M'), 'nummod'), (('M', 'M'), 'appos'), ((')', 'M'), 'punct'), ((')', 'M'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 15 ===========================

 H D K  Compare    Unit-5  Cryptographic Hash Functions                                 Darshan Institute of Engineering & Technology   ‹#›  Message authentication method - 3 

Tokens are: 
>> ['H', 'D', 'K', 'Compare', 'Unit-5', 'Cryptographic', 'Hash', 'Functions', 'Darshan', 'Institute', 'of', 'Engineering', '&', 'Technology', '‹#›', 'Message', 'authentication', 'method', '-', '3'] 

 UPOS tags are: 
>> [('H', 'PROPN'), ('D', 'PROPN'), ('K', 'NUM'), ('Compare', 'VERB'), ('Unit-5', 'NOUN'), ('Cryptographic', 'ADJ'), ('Hash', 'NOUN'), ('Functions', 'NOUN'), ('Darshan', 'PROPN'), ('Institute', 'NOUN'), ('of', 'ADP'), ('Engineering', 'NOUN'), ('&', 'CCONJ'), ('Technology', 'NOUN'), ('‹#›', 'NOUN'), ('Message', 'NOUN'), ('authentication', 'NOUN'), ('method', 'NOUN'), ('-', 'PUNCT'), ('3', 'NUM')] 

 XPOS tags are: 
>> [('H', 'NNP'), ('D', 'NNP'), ('K', 'CD'), ('Compare', 'VB'), ('Unit-5', 'NN'), ('Cryptographic', 'JJ'), ('Hash', 'NN'), ('Functions', 'NNS'), ('Darshan', 'NNP'), ('Institute', 'NN'), ('of', 'IN'), ('Engineering', 'NN'), ('&', 'CC'), ('Technology', 'NN'), ('‹#›', 'NN'), ('Message', 'NN'), ('authentication', 'NN'), ('method', 'NN'), ('-', ','), ('3', 'CD')] 

 Lemmas are: 
>> [('H', 'H'), ('D', 'D'), ('K', 'k'), ('Compare', 'compare'), ('Unit-5', 'unciot'), ('Cryptographic', 'Cryptographic'), ('Hash', 'hash'), ('Functions', 'function'), ('Darshan', 'Darshan'), ('Institute', 'Institute'), ('of', 'of'), ('Engineering', 'Engineering'), ('&', '&'), ('Technology', 'technology'), ('‹#›', '‹#›'), ('Message', 'message'), ('authentication', 'authentication'), ('method', 'method'), ('-', '-'), ('3', '3')] 

 Dependency tags are: 
>> [(('H', 'K'), 'compound'), (('D', 'K'), 'compound'), (('K', 'root'), 'root'), (('Compare', 'K'), 'appos'), (('Unit-5', 'Functions'), 'compound'), (('Cryptographic', 'Functions'), 'amod'), (('Hash', 'Functions'), 'compound'), (('Functions', 'Institute'), 'compound'), (('Darshan', 'Institute'), 'compound'), (('Institute', 'Compare'), 'obj'), (('of', 'method'), 'case'), (('Engineering', '‹#›'), 'compound'), (('&', 'Technology'), 'cc'), (('Technology', 'Engineering'), 'conj'), (('‹#›', 'method'), 'compound'), (('Message', 'method'), 'compound'), (('authentication', 'method'), 'compound'), (('method', 'Institute'), 'nmod'), (('-', 'method'), 'punct'), (('3', 'method'), 'appos')]

 Named Entities are: 
>> []

========================== Sentence 16 ===========================

 It is possible to use a hash function but no encryption for message authentication. 

Tokens are: 
>> ['It', 'is', 'possible', 'to', 'use', 'a', 'hash', 'function', 'but', 'no', 'encryption', 'for', 'message', 'authentication', '.'] 

 UPOS tags are: 
>> [('It', 'PRON'), ('is', 'AUX'), ('possible', 'ADJ'), ('to', 'PART'), ('use', 'VERB'), ('a', 'DET'), ('hash', 'NOUN'), ('function', 'NOUN'), ('but', 'CCONJ'), ('no', 'DET'), ('encryption', 'NOUN'), ('for', 'ADP'), ('message', 'NOUN'), ('authentication', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('It', 'PRP'), ('is', 'VBZ'), ('possible', 'JJ'), ('to', 'TO'), ('use', 'VB'), ('a', 'DT'), ('hash', 'NN'), ('function', 'NN'), ('but', 'CC'), ('no', 'DT'), ('encryption', 'NN'), ('for', 'IN'), ('message', 'NN'), ('authentication', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('It', 'it'), ('is', 'be'), ('possible', 'possible'), ('to', 'to'), ('use', 'use'), ('a', 'a'), ('hash', 'hash'), ('function', 'function'), ('but', 'but'), ('no', 'no'), ('encryption', 'encryption'), ('for', 'for'), ('message', 'message'), ('authentication', 'authentication'), ('.', '.')] 

 Dependency tags are: 
>> [(('It', 'possible'), 'expl'), (('is', 'possible'), 'cop'), (('possible', 'root'), 'root'), (('to', 'use'), 'mark'), (('use', 'possible'), 'csubj'), (('a', 'function'), 'det'), (('hash', 'function'), 'compound'), (('function', 'use'), 'obj'), (('but', 'encryption'), 'cc'), (('no', 'encryption'), 'det'), (('encryption', 'function'), 'conj'), (('for', 'authentication'), 'case'), (('message', 'authentication'), 'compound'), (('authentication', 'encryption'), 'nmod'), (('.', 'possible'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 17 ===========================

 A and B share a common secret value S. A computes the hash value over the concatenation of M  and S  and appends the resulting hash value to M.  Because B possesses S, it can recompute the hash value to verify. 

Tokens are: 
>> ['A', 'and', 'B', 'share', 'a', 'common', 'secret', 'value', 'S.', 'A', 'computes', 'the', 'hash', 'value', 'over', 'the', 'concatenation', 'of', 'M', 'and', 'S', 'and', 'appends', 'the', 'resulting', 'hash', 'value', 'to', 'M.', 'Because', 'B', 'possesses', 'S', ',', 'it', 'can', 'recompute', 'the', 'hash', 'value', 'to', 'verify', '.'] 

 UPOS tags are: 
>> [('A', 'DET'), ('and', 'CCONJ'), ('B', 'NOUN'), ('share', 'VERB'), ('a', 'DET'), ('common', 'ADJ'), ('secret', 'ADJ'), ('value', 'NOUN'), ('S.', 'NOUN'), ('A', 'PROPN'), ('computes', 'VERB'), ('the', 'DET'), ('hash', 'NOUN'), ('value', 'NOUN'), ('over', 'ADP'), ('the', 'DET'), ('concatenation', 'NOUN'), ('of', 'ADP'), ('M', 'NOUN'), ('and', 'CCONJ'), ('S', 'PART'), ('and', 'CCONJ'), ('appends', 'VERB'), ('the', 'DET'), ('resulting', 'VERB'), ('hash', 'NOUN'), ('value', 'NOUN'), ('to', 'ADP'), ('M.', 'PROPN'), ('Because', 'SCONJ'), ('B', 'PROPN'), ('possesses', 'VERB'), ('S', 'PART'), (',', 'PUNCT'), ('it', 'PRON'), ('can', 'AUX'), ('recompute', 'VERB'), ('the', 'DET'), ('hash', 'NOUN'), ('value', 'NOUN'), ('to', 'PART'), ('verify', 'VERB'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('A', 'DT'), ('and', 'CC'), ('B', 'NN'), ('share', 'VBP'), ('a', 'DT'), ('common', 'JJ'), ('secret', 'JJ'), ('value', 'NN'), ('S.', 'NN'), ('A', 'NNP'), ('computes', 'VBZ'), ('the', 'DT'), ('hash', 'NN'), ('value', 'NN'), ('over', 'IN'), ('the', 'DT'), ('concatenation', 'NN'), ('of', 'IN'), ('M', 'NN'), ('and', 'CC'), ('S', 'POS'), ('and', 'CC'), ('appends', 'VBZ'), ('the', 'DT'), ('resulting', 'VBG'), ('hash', 'NN'), ('value', 'NN'), ('to', 'IN'), ('M.', 'NNP'), ('Because', 'IN'), ('B', 'NNP'), ('possesses', 'VBZ'), ('S', 'POS'), (',', ','), ('it', 'PRP'), ('can', 'MD'), ('recompute', 'VB'), ('the', 'DT'), ('hash', 'NN'), ('value', 'NN'), ('to', 'TO'), ('verify', 'VB'), ('.', '.')] 

 Lemmas are: 
>> [('A', 'a'), ('and', 'and'), ('B', 'b'), ('share', 'share'), ('a', 'a'), ('common', 'common'), ('secret', 'secret'), ('value', 'value'), ('S.', 'S.'), ('A', 'A'), ('computes', 'compute'), ('the', 'the'), ('hash', 'hash'), ('value', 'value'), ('over', 'over'), ('the', 'the'), ('concatenation', 'concatenation'), ('of', 'of'), ('M', 'm'), ('and', 'and'), ('S', "'s"), ('and', 'and'), ('appends', 'append'), ('the', 'the'), ('resulting', 'result'), ('hash', 'hash'), ('value', 'value'), ('to', 'to'), ('M.', 'M.'), ('Because', 'because'), ('B', 'B'), ('possesses', 'possess'), ('S', "'s"), (',', ','), ('it', 'it'), ('can', 'can'), ('recompute', 'recompute'), ('the', 'the'), ('hash', 'hash'), ('value', 'value'), ('to', 'to'), ('verify', 'verify'), ('.', '.')] 

 Dependency tags are: 
>> [(('A', 'share'), 'nsubj'), (('and', 'B'), 'cc'), (('B', 'A'), 'conj'), (('share', 'root'), 'root'), (('a', 'value'), 'det'), (('common', 'value'), 'amod'), (('secret', 'value'), 'amod'), (('value', 'share'), 'obj'), (('S.', 'computes'), 'nsubj'), (('A', 'S.'), 'flat'), (('computes', 'value'), 'acl:relcl'), (('the', 'value'), 'det'), (('hash', 'value'), 'compound'), (('value', 'computes'), 'obj'), (('over', 'concatenation'), 'case'), (('the', 'concatenation'), 'det'), (('concatenation', 'computes'), 'obl'), (('of', 'M'), 'case'), (('M', 'concatenation'), 'nmod'), (('and', 'appends'), 'cc'), (('S', 'M'), 'case'), (('and', 'appends'), 'cc'), (('appends', 'computes'), 'conj'), (('the', 'value'), 'det'), (('resulting', 'value'), 'amod'), (('hash', 'value'), 'compound'), (('value', 'appends'), 'obj'), (('to', 'M.'), 'case'), (('M.', 'value'), 'nmod'), (('Because', 'possesses'), 'mark'), (('B', 'possesses'), 'nsubj'), (('possesses', 'recompute'), 'advcl'), (('S', 'possesses'), 'case'), ((',', 'recompute'), 'punct'), (('it', 'recompute'), 'nsubj'), (('can', 'recompute'), 'aux'), (('recompute', 'share'), 'parataxis'), (('the', 'value'), 'det'), (('hash', 'value'), 'compound'), (('value', 'recompute'), 'obj'), (('to', 'verify'), 'mark'), (('verify', 'recompute'), 'advcl'), (('.', 'share'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 18 ===========================

 An opponent cannot modify an intercepted message. 

Tokens are: 
>> ['An', 'opponent', 'cannot', 'modify', 'an', 'intercepted', 'message', '.'] 

 UPOS tags are: 
>> [('An', 'DET'), ('opponent', 'NOUN'), ('cannot', 'AUX'), ('modify', 'VERB'), ('an', 'DET'), ('intercepted', 'VERB'), ('message', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('An', 'DT'), ('opponent', 'NN'), ('cannot', 'MD'), ('modify', 'VB'), ('an', 'DT'), ('intercepted', 'VBN'), ('message', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('An', 'a'), ('opponent', 'opponent'), ('cannot', 'cannot'), ('modify', 'modify'), ('an', 'a'), ('intercepted', 'intercept'), ('message', 'message'), ('.', '.')] 

 Dependency tags are: 
>> [(('An', 'opponent'), 'det'), (('opponent', 'modify'), 'nsubj'), (('cannot', 'modify'), 'aux'), (('modify', 'root'), 'root'), (('an', 'message'), 'det'), (('intercepted', 'message'), 'amod'), (('message', 'modify'), 'obj'), (('.', 'modify'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 19 ===========================

 M   Source A Destination B H ll M  H(M || S) H Compare   ll S ll S  Unit-5  Cryptographic Hash Functions                                 Darshan Institute of Engineering & Technology   ‹#›  Message authentication method - 4 Confidentiality can be added to the approach of method (3) by encrypting the entire message plus the hash code. 

Tokens are: 
>> ['M', 'Source', 'A', 'Destination', 'B', 'H', 'll', 'M', 'H(', 'M', '||', 'S', ')', 'H', 'Compare', 'll', 'S', 'll', 'S', 'Unit', '-5', 'Cryptographic', 'Hash', 'Functions', 'Darshan', 'Institute', 'of', 'Engineering', '&', 'Technology', '‹#›', 'Message', 'authentication', 'method', '-', '4', 'Confidentiality', 'can', 'be', 'added', 'to', 'the', 'approach', 'of', 'method', '(', '3', ')', 'by', 'encrypting', 'the', 'entire', 'message', 'plus', 'the', 'hash', 'code', '.'] 

 UPOS tags are: 
>> [('M', 'NUM'), ('Source', 'NOUN'), ('A', 'DET'), ('Destination', 'NOUN'), ('B', 'NOUN'), ('H', 'NOUN'), ('ll', 'NOUN'), ('M', 'NOUN'), ('H(', 'NUM'), ('M', 'NOUN'), ('||', 'SYM'), ('S', 'NUM'), (')', 'PUNCT'), ('H', 'NOUN'), ('Compare', 'NOUN'), ('ll', 'PROPN'), ('S', 'PART'), ('ll', 'PROPN'), ('S', 'PART'), ('Unit', 'NOUN'), ('-5', 'NUM'), ('Cryptographic', 'ADJ'), ('Hash', 'NOUN'), ('Functions', 'NOUN'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('of', 'ADP'), ('Engineering', 'NOUN'), ('&', 'CCONJ'), ('Technology', 'NOUN'), ('‹#›', 'NOUN'), ('Message', 'NOUN'), ('authentication', 'NOUN'), ('method', 'NOUN'), ('-', 'PUNCT'), ('4', 'NUM'), ('Confidentiality', 'NOUN'), ('can', 'AUX'), ('be', 'AUX'), ('added', 'VERB'), ('to', 'ADP'), ('the', 'DET'), ('approach', 'NOUN'), ('of', 'ADP'), ('method', 'NOUN'), ('(', 'PUNCT'), ('3', 'NUM'), (')', 'PUNCT'), ('by', 'SCONJ'), ('encrypting', 'VERB'), ('the', 'DET'), ('entire', 'ADJ'), ('message', 'NOUN'), ('plus', 'CCONJ'), ('the', 'DET'), ('hash', 'NOUN'), ('code', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('M', 'CD'), ('Source', 'NN'), ('A', 'DT'), ('Destination', 'NN'), ('B', 'NN'), ('H', 'NN'), ('ll', 'NN'), ('M', 'NN'), ('H(', 'CD'), ('M', 'NN'), ('||', 'SYM'), ('S', 'LS'), (')', '-RRB-'), ('H', 'NN'), ('Compare', 'NN'), ('ll', 'NNP'), ('S', 'POS'), ('ll', 'NNP'), ('S', 'POS'), ('Unit', 'NN'), ('-5', 'CD'), ('Cryptographic', 'NNP'), ('Hash', 'NN'), ('Functions', 'NNS'), ('Darshan', 'NNP'), ('Institute', 'NNP'), ('of', 'IN'), ('Engineering', 'NN'), ('&', 'CC'), ('Technology', 'NN'), ('‹#›', 'NN'), ('Message', 'NN'), ('authentication', 'NN'), ('method', 'NN'), ('-', ','), ('4', 'CD'), ('Confidentiality', 'NN'), ('can', 'MD'), ('be', 'VB'), ('added', 'VBN'), ('to', 'IN'), ('the', 'DT'), ('approach', 'NN'), ('of', 'IN'), ('method', 'NN'), ('(', '-LRB-'), ('3', 'CD'), (')', '-RRB-'), ('by', 'IN'), ('encrypting', 'VBG'), ('the', 'DT'), ('entire', 'JJ'), ('message', 'NN'), ('plus', 'CC'), ('the', 'DT'), ('hash', 'NN'), ('code', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('M', 'm'), ('Source', 'source'), ('A', 'a'), ('Destination', 'destination'), ('B', 'b'), ('H', 'h'), ('ll', 'will'), ('M', 'm'), ('H(', 'h('), ('M', 'm'), ('||', '||'), ('S', 'S'), (')', ')'), ('H', 'h'), ('Compare', 'compare'), ('ll', 'will'), ('S', "'s"), ('ll', 'will'), ('S', "'s"), ('Unit', 'unit'), ('-5', '-5'), ('Cryptographic', 'Cryptographic'), ('Hash', 'hash'), ('Functions', 'function'), ('Darshan', 'Darshan'), ('Institute', 'Institute'), ('of', 'of'), ('Engineering', 'Engineering'), ('&', '&'), ('Technology', 'technology'), ('‹#›', '‹#›'), ('Message', 'message'), ('authentication', 'authentication'), ('method', 'method'), ('-', '-'), ('4', '4'), ('Confidentiality', 'confidentiality'), ('can', 'can'), ('be', 'be'), ('added', 'add'), ('to', 'to'), ('the', 'the'), ('approach', 'approach'), ('of', 'of'), ('method', 'method'), ('(', '('), ('3', '3'), (')', ')'), ('by', 'by'), ('encrypting', 'encrypt'), ('the', 'the'), ('entire', 'entire'), ('message', 'message'), ('plus', 'plus'), ('the', 'the'), ('hash', 'hash'), ('code', 'code'), ('.', '.')] 

 Dependency tags are: 
>> [(('M', 'root'), 'root'), (('Source', 'M'), 'appos'), (('A', 'Compare'), 'det'), (('Destination', 'B'), 'compound'), (('B', 'M'), 'compound'), (('H', 'M'), 'compound'), (('ll', 'M'), 'compound'), (('M', 'Source'), 'appos'), (('H(', 'M'), 'nummod'), (('M', 'M'), 'appos'), (('||', 'S'), 'punct'), (('S', 'Compare'), 'nummod'), ((')', 'S'), 'punct'), (('H', 'Compare'), 'compound'), (('Compare', 'Source'), 'appos'), (('ll', 'll'), 'compound'), (('S', 'll'), 'case'), (('ll', 'Unit'), 'nmod:poss'), (('S', 'll'), 'case'), (('Unit', 'Functions'), 'compound'), (('-5', 'Functions'), 'nummod'), (('Cryptographic', 'Functions'), 'amod'), (('Hash', 'Functions'), 'compound'), (('Functions', 'Institute'), 'compound'), (('Darshan', 'Institute'), 'compound'), (('Institute', 'Source'), 'appos'), (('of', 'method'), 'case'), (('Engineering', 'method'), 'compound'), (('&', 'Technology'), 'cc'), (('Technology', 'Engineering'), 'conj'), (('‹#›', 'method'), 'compound'), (('Message', 'method'), 'compound'), (('authentication', 'method'), 'compound'), (('method', 'Institute'), 'nmod'), (('-', 'Source'), 'punct'), (('4', 'Confidentiality'), 'nummod'), (('Confidentiality', 'added'), 'nsubj:pass'), (('can', 'added'), 'aux'), (('be', 'added'), 'aux:pass'), (('added', 'Source'), 'parataxis'), (('to', 'approach'), 'case'), (('the', 'approach'), 'det'), (('approach', 'added'), 'obl'), (('of', 'method'), 'case'), (('method', 'approach'), 'nmod'), (('(', '3'), 'punct'), (('3', 'method'), 'appos'), ((')', '3'), 'punct'), (('by', 'encrypting'), 'mark'), (('encrypting', 'added'), 'advcl'), (('the', 'message'), 'det'), (('entire', 'message'), 'amod'), (('message', 'encrypting'), 'obj'), (('plus', 'code'), 'cc'), (('the', 'code'), 'det'), (('hash', 'code'), 'compound'), (('code', 'message'), 'conj'), (('.', 'M'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 20 ===========================

 M   Source A Destination B H ll M  H(M || S) H Compare   ll S ll S E K  D K E (K, [ M || H(M || S)]) 

Tokens are: 
>> ['M', 'Source', 'A', 'Destination', 'B', 'H', 'll', 'M', 'H(', 'M', '||', 'S', ')', 'H', 'Compare', 'll', 'S', 'll', 'S', 'E', 'K', 'D', 'K', 'E', '(', 'K', ',', '[', 'M', '||', 'H', '(', 'M', '||', 'S', ')', ']', ')'] 

 UPOS tags are: 
>> [('M', 'NUM'), ('Source', 'NOUN'), ('A', 'DET'), ('Destination', 'NOUN'), ('B', 'NOUN'), ('H', 'NOUN'), ('ll', 'NOUN'), ('M', 'NOUN'), ('H(', 'NUM'), ('M', 'NOUN'), ('||', 'SYM'), ('S', 'NUM'), (')', 'PUNCT'), ('H', 'NOUN'), ('Compare', 'NOUN'), ('ll', 'NOUN'), ('S', 'NOUN'), ('ll', 'NOUN'), ('S', 'NOUN'), ('E', 'NOUN'), ('K', 'NUM'), ('D', 'NOUN'), ('K', 'NUM'), ('E', 'NOUN'), ('(', 'PUNCT'), ('K', 'NUM'), (',', 'PUNCT'), ('[', 'PUNCT'), ('M', 'NOUN'), ('||', 'SYM'), ('H', 'NOUN'), ('(', 'PUNCT'), ('M', 'NOUN'), ('||', 'SYM'), ('S', 'NOUN'), (')', 'PUNCT'), (']', 'PUNCT'), (')', 'PUNCT')] 

 XPOS tags are: 
>> [('M', 'LS'), ('Source', 'NN'), ('A', 'DT'), ('Destination', 'NN'), ('B', 'NN'), ('H', 'NN'), ('ll', 'NN'), ('M', 'NN'), ('H(', 'CD'), ('M', 'NN'), ('||', 'SYM'), ('S', 'LS'), (')', '-RRB-'), ('H', 'NN'), ('Compare', 'NN'), ('ll', 'NN'), ('S', 'NN'), ('ll', 'NN'), ('S', 'NN'), ('E', 'NN'), ('K', 'CD'), ('D', 'NN'), ('K', 'CD'), ('E', 'NN'), ('(', '-LRB-'), ('K', 'CD'), (',', ','), ('[', '-LRB-'), ('M', 'NN'), ('||', 'SYM'), ('H', 'NN'), ('(', '-LRB-'), ('M', 'NN'), ('||', 'SYM'), ('S', 'NN'), (')', '-RRB-'), (']', '-RRB-'), (')', '-RRB-')] 

 Lemmas are: 
>> [('M', 'm'), ('Source', 'source'), ('A', 'a'), ('Destination', 'destination'), ('B', 'b'), ('H', 'h'), ('ll', 'will'), ('M', 'm'), ('H(', 'h('), ('M', 'm'), ('||', '||'), ('S', 'S'), (')', ')'), ('H', 'h'), ('Compare', 'compare'), ('ll', 'will'), ('S', 's'), ('ll', 'will'), ('S', 's'), ('E', 'e'), ('K', 'k'), ('D', 'd'), ('K', 'k'), ('E', 'e'), ('(', '('), ('K', 'k'), (',', ','), ('[', '['), ('M', 'm'), ('||', '||'), ('H', 'h'), ('(', '('), ('M', 'm'), ('||', '||'), ('S', 's'), (')', ')'), (']', ']'), (')', ')')] 

 Dependency tags are: 
>> [(('M', 'Source'), 'nummod'), (('Source', 'root'), 'root'), (('A', 'B'), 'det'), (('Destination', 'B'), 'compound'), (('B', 'Source'), 'appos'), (('H', 'M'), 'compound'), (('ll', 'M'), 'compound'), (('M', 'Source'), 'list'), (('H(', 'M'), 'nummod'), (('M', 'M'), 'appos'), (('||', 'S'), 'punct'), (('S', 'Compare'), 'nummod'), ((')', 'S'), 'punct'), (('H', 'Compare'), 'compound'), (('Compare', 'Source'), 'list'), (('ll', 'Source'), 'list'), (('S', 'll'), 'compound'), (('ll', 'Compare'), 'appos'), (('S', 'll'), 'appos'), (('E', 'll'), 'appos'), (('K', 'K'), 'compound'), (('D', 'K'), 'compound'), (('K', 'E'), 'nummod'), (('E', 'Source'), 'list'), (('(', 'K'), 'punct'), (('K', 'E'), 'appos'), ((',', 'M'), 'punct'), (('[', 'M'), 'punct'), (('M', 'Source'), 'list'), (('||', 'M'), 'punct'), (('H', 'M'), 'appos'), (('(', 'M'), 'punct'), (('M', 'M'), 'appos'), (('||', 'S'), 'case'), (('S', 'M'), 'nmod'), ((')', 'M'), 'punct'), ((']', 'M'), 'punct'), ((')', 'M'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 21 ===========================

 Unit-5  Cryptographic Hash Functions                                 Darshan Institute of Engineering & Technology   ‹#›   9  MAC (Message Authentication Code) 

Tokens are: 
>> ['Unit', '-5', 'Cryptographic', 'Hash', 'Functions', 'Darshan', 'Institute', 'of', 'Engineering', '&', 'Technology', '‹#›', '9', 'MAC', '(', 'Message', 'Authentication', 'Code', ')'] 

 UPOS tags are: 
>> [('Unit', 'NOUN'), ('-5', 'NUM'), ('Cryptographic', 'ADJ'), ('Hash', 'NOUN'), ('Functions', 'NOUN'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('of', 'ADP'), ('Engineering', 'NOUN'), ('&', 'CCONJ'), ('Technology', 'NOUN'), ('‹#›', 'NOUN'), ('9', 'NUM'), ('MAC', 'NOUN'), ('(', 'PUNCT'), ('Message', 'NOUN'), ('Authentication', 'NOUN'), ('Code', 'NOUN'), (')', 'PUNCT')] 

 XPOS tags are: 
>> [('Unit', 'NN'), ('-5', 'CD'), ('Cryptographic', 'JJ'), ('Hash', 'NN'), ('Functions', 'NNS'), ('Darshan', 'NNP'), ('Institute', 'NNP'), ('of', 'IN'), ('Engineering', 'NN'), ('&', 'CC'), ('Technology', 'NN'), ('‹#›', 'NN'), ('9', 'CD'), ('MAC', 'NN'), ('(', '-LRB-'), ('Message', 'NN'), ('Authentication', 'NN'), ('Code', 'NN'), (')', '-RRB-')] 

 Lemmas are: 
>> [('Unit', 'unit'), ('-5', '-5'), ('Cryptographic', 'Cryptographic'), ('Hash', 'hash'), ('Functions', 'function'), ('Darshan', 'Darshan'), ('Institute', 'Institute'), ('of', 'of'), ('Engineering', 'Engineering'), ('&', '&'), ('Technology', 'technology'), ('‹#›', '‹#›'), ('9', '9'), ('MAC', 'mac'), ('(', '('), ('Message', 'message'), ('Authentication', 'authentication'), ('Code', 'code'), (')', ')')] 

 Dependency tags are: 
>> [(('Unit', 'root'), 'root'), (('-5', 'Unit'), 'nummod'), (('Cryptographic', 'Functions'), 'amod'), (('Hash', 'Functions'), 'compound'), (('Functions', 'Unit'), 'appos'), (('Darshan', 'Institute'), 'compound'), (('Institute', 'Unit'), 'appos'), (('of', '‹#›'), 'case'), (('Engineering', '‹#›'), 'compound'), (('&', 'Technology'), 'cc'), (('Technology', 'Engineering'), 'conj'), (('‹#›', 'Institute'), 'nmod'), (('9', 'MAC'), 'nummod'), (('MAC', 'Institute'), 'nmod'), (('(', 'Code'), 'punct'), (('Message', 'Code'), 'compound'), (('Authentication', 'Code'), 'compound'), (('Code', 'MAC'), 'appos'), ((')', 'Code'), 'punct')]

 Named Entities are: 
>> [('9', 'CARDINAL')]

========================== Sentence 22 ===========================

 More commonly, message authentication is achieved using a MAC also known as keyed hash function. 

Tokens are: 
>> ['More', 'commonly', ',', 'message', 'authentication', 'is', 'achieved', 'using', 'a', 'MAC', 'also', 'known', 'as', 'keyed', 'hash', 'function', '.'] 

 UPOS tags are: 
>> [('More', 'ADV'), ('commonly', 'ADV'), (',', 'PUNCT'), ('message', 'NOUN'), ('authentication', 'NOUN'), ('is', 'AUX'), ('achieved', 'VERB'), ('using', 'VERB'), ('a', 'DET'), ('MAC', 'PROPN'), ('also', 'ADV'), ('known', 'VERB'), ('as', 'ADP'), ('keyed', 'VERB'), ('hash', 'NOUN'), ('function', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('More', 'RBR'), ('commonly', 'RB'), (',', ','), ('message', 'NN'), ('authentication', 'NN'), ('is', 'VBZ'), ('achieved', 'VBN'), ('using', 'VBG'), ('a', 'DT'), ('MAC', 'NNP'), ('also', 'RB'), ('known', 'VBN'), ('as', 'IN'), ('keyed', 'VBN'), ('hash', 'NN'), ('function', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('More', 'more'), ('commonly', 'commonly'), (',', ','), ('message', 'message'), ('authentication', 'authentication'), ('is', 'be'), ('achieved', 'achieve'), ('using', 'use'), ('a', 'a'), ('MAC', 'MAC'), ('also', 'also'), ('known', 'know'), ('as', 'as'), ('keyed', 'key'), ('hash', 'hash'), ('function', 'function'), ('.', '.')] 

 Dependency tags are: 
>> [(('More', 'commonly'), 'advmod'), (('commonly', 'achieved'), 'advmod'), ((',', 'achieved'), 'punct'), (('message', 'authentication'), 'compound'), (('authentication', 'achieved'), 'nsubj:pass'), (('is', 'achieved'), 'aux:pass'), (('achieved', 'root'), 'root'), (('using', 'achieved'), 'advcl'), (('a', 'MAC'), 'det'), (('MAC', 'using'), 'obj'), (('also', 'known'), 'advmod'), (('known', 'using'), 'xcomp'), (('as', 'function'), 'case'), (('keyed', 'function'), 'amod'), (('hash', 'function'), 'compound'), (('function', 'known'), 'obl'), (('.', 'achieved'), 'punct')]

 Named Entities are: 
>> [('MAC', 'ORG')]

========================== Sentence 23 ===========================

 MACs are used between two parties that share a secret key to authenticate information exchanged between those parties. 

Tokens are: 
>> ['MACs', 'are', 'used', 'between', 'two', 'parties', 'that', 'share', 'a', 'secret', 'key', 'to', 'authenticate', 'information', 'exchanged', 'between', 'those', 'parties', '.'] 

 UPOS tags are: 
>> [('MACs', 'NOUN'), ('are', 'AUX'), ('used', 'VERB'), ('between', 'ADP'), ('two', 'NUM'), ('parties', 'NOUN'), ('that', 'PRON'), ('share', 'VERB'), ('a', 'DET'), ('secret', 'ADJ'), ('key', 'NOUN'), ('to', 'PART'), ('authenticate', 'VERB'), ('information', 'NOUN'), ('exchanged', 'VERB'), ('between', 'ADP'), ('those', 'DET'), ('parties', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('MACs', 'NNS'), ('are', 'VBP'), ('used', 'VBN'), ('between', 'IN'), ('two', 'CD'), ('parties', 'NNS'), ('that', 'WDT'), ('share', 'VBP'), ('a', 'DT'), ('secret', 'JJ'), ('key', 'NN'), ('to', 'TO'), ('authenticate', 'VB'), ('information', 'NN'), ('exchanged', 'VBN'), ('between', 'IN'), ('those', 'DT'), ('parties', 'NNS'), ('.', '.')] 

 Lemmas are: 
>> [('MACs', 'mac'), ('are', 'be'), ('used', 'use'), ('between', 'between'), ('two', 'two'), ('parties', 'party'), ('that', 'that'), ('share', 'share'), ('a', 'a'), ('secret', 'secret'), ('key', 'key'), ('to', 'to'), ('authenticate', 'authenticate'), ('information', 'information'), ('exchanged', 'exchange'), ('between', 'between'), ('those', 'that'), ('parties', 'party'), ('.', '.')] 

 Dependency tags are: 
>> [(('MACs', 'used'), 'nsubj:pass'), (('are', 'used'), 'aux:pass'), (('used', 'root'), 'root'), (('between', 'parties'), 'case'), (('two', 'parties'), 'nummod'), (('parties', 'used'), 'obl'), (('that', 'share'), 'nsubj'), (('share', 'parties'), 'acl:relcl'), (('a', 'key'), 'det'), (('secret', 'key'), 'amod'), (('key', 'share'), 'obj'), (('to', 'authenticate'), 'mark'), (('authenticate', 'key'), 'acl'), (('information', 'authenticate'), 'obj'), (('exchanged', 'information'), 'acl'), (('between', 'parties'), 'case'), (('those', 'parties'), 'det'), (('parties', 'exchanged'), 'obl'), (('.', 'used'), 'punct')]

 Named Entities are: 
>> [('two', 'CARDINAL')]

========================== Sentence 24 ===========================

 A MAC function takes as input a secret key and a data block and produces a hash value, referred to as the MAC. 

Tokens are: 
>> ['A', 'MAC', 'function', 'takes', 'as', 'input', 'a', 'secret', 'key', 'and', 'a', 'data', 'block', 'and', 'produces', 'a', 'hash', 'value', ',', 'referred', 'to', 'as', 'the', 'MAC', '.'] 

 UPOS tags are: 
>> [('A', 'DET'), ('MAC', 'PROPN'), ('function', 'NOUN'), ('takes', 'VERB'), ('as', 'ADP'), ('input', 'VERB'), ('a', 'DET'), ('secret', 'ADJ'), ('key', 'NOUN'), ('and', 'CCONJ'), ('a', 'DET'), ('data', 'NOUN'), ('block', 'NOUN'), ('and', 'CCONJ'), ('produces', 'VERB'), ('a', 'DET'), ('hash', 'NOUN'), ('value', 'NOUN'), (',', 'PUNCT'), ('referred', 'VERB'), ('to', 'ADP'), ('as', 'ADP'), ('the', 'DET'), ('MAC', 'PROPN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('A', 'DT'), ('MAC', 'NNP'), ('function', 'NN'), ('takes', 'VBZ'), ('as', 'IN'), ('input', 'VB'), ('a', 'DT'), ('secret', 'JJ'), ('key', 'NN'), ('and', 'CC'), ('a', 'DT'), ('data', 'NN'), ('block', 'NN'), ('and', 'CC'), ('produces', 'VBZ'), ('a', 'DT'), ('hash', 'NN'), ('value', 'NN'), (',', ','), ('referred', 'VBN'), ('to', 'IN'), ('as', 'IN'), ('the', 'DT'), ('MAC', 'NNP'), ('.', '.')] 

 Lemmas are: 
>> [('A', 'a'), ('MAC', 'MAC'), ('function', 'function'), ('takes', 'take'), ('as', 'as'), ('input', 'input'), ('a', 'a'), ('secret', 'secret'), ('key', 'key'), ('and', 'and'), ('a', 'a'), ('data', 'datum'), ('block', 'block'), ('and', 'and'), ('produces', 'produce'), ('a', 'a'), ('hash', 'hash'), ('value', 'value'), (',', ','), ('referred', 'refer'), ('to', 'to'), ('as', 'as'), ('the', 'the'), ('MAC', 'MAC'), ('.', '.')] 

 Dependency tags are: 
>> [(('A', 'function'), 'det'), (('MAC', 'function'), 'compound'), (('function', 'takes'), 'nsubj'), (('takes', 'root'), 'root'), (('as', 'input'), 'mark'), (('input', 'takes'), 'advcl'), (('a', 'key'), 'det'), (('secret', 'key'), 'amod'), (('key', 'input'), 'obj'), (('and', 'block'), 'cc'), (('a', 'block'), 'det'), (('data', 'block'), 'compound'), (('block', 'key'), 'conj'), (('and', 'produces'), 'cc'), (('produces', 'takes'), 'conj'), (('a', 'value'), 'det'), (('hash', 'value'), 'compound'), (('value', 'produces'), 'obj'), ((',', 'referred'), 'punct'), (('referred', 'value'), 'acl'), (('to', 'referred'), 'obl'), (('as', 'MAC'), 'case'), (('the', 'MAC'), 'det'), (('MAC', 'referred'), 'obl'), (('.', 'takes'), 'punct')]

 Named Entities are: 
>> [('MAC', 'ORG'), ('MAC', 'ORG')]

========================== Sentence 25 ===========================

 The combination of hashing and encryption results in an overall function that is, in fact, a MAC (Method -2 in previous slide). 

Tokens are: 
>> ['The', 'combination', 'of', 'hashing', 'and', 'encryption', 'results', 'in', 'an', 'overall', 'function', 'that', 'is', ',', 'in', 'fact', ',', 'a', 'MAC', '(', 'Method', '-', '2', 'in', 'previous', 'slide', ')', '.'] 

 UPOS tags are: 
>> [('The', 'DET'), ('combination', 'NOUN'), ('of', 'ADP'), ('hashing', 'NOUN'), ('and', 'CCONJ'), ('encryption', 'NOUN'), ('results', 'NOUN'), ('in', 'ADP'), ('an', 'DET'), ('overall', 'ADJ'), ('function', 'NOUN'), ('that', 'PRON'), ('is', 'AUX'), (',', 'PUNCT'), ('in', 'ADP'), ('fact', 'NOUN'), (',', 'PUNCT'), ('a', 'DET'), ('MAC', 'NOUN'), ('(', 'PUNCT'), ('Method', 'NOUN'), ('-', 'SYM'), ('2', 'NUM'), ('in', 'ADP'), ('previous', 'ADJ'), ('slide', 'NOUN'), (')', 'PUNCT'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('The', 'DT'), ('combination', 'NN'), ('of', 'IN'), ('hashing', 'NN'), ('and', 'CC'), ('encryption', 'NN'), ('results', 'NNS'), ('in', 'IN'), ('an', 'DT'), ('overall', 'JJ'), ('function', 'NN'), ('that', 'WDT'), ('is', 'VBZ'), (',', ','), ('in', 'IN'), ('fact', 'NN'), (',', ','), ('a', 'DT'), ('MAC', 'NN'), ('(', '-LRB-'), ('Method', 'NN'), ('-', 'SYM'), ('2', 'CD'), ('in', 'IN'), ('previous', 'JJ'), ('slide', 'NN'), (')', '-RRB-'), ('.', '.')] 

 Lemmas are: 
>> [('The', 'the'), ('combination', 'combination'), ('of', 'of'), ('hashing', 'hashing'), ('and', 'and'), ('encryption', 'encryption'), ('results', 'result'), ('in', 'in'), ('an', 'a'), ('overall', 'overall'), ('function', 'function'), ('that', 'that'), ('is', 'be'), (',', ','), ('in', 'in'), ('fact', 'fact'), (',', ','), ('a', 'a'), ('MAC', 'mac'), ('(', '('), ('Method', 'method'), ('-', '-'), ('2', '2'), ('in', 'in'), ('previous', 'previous'), ('slide', 'slide'), (')', ')'), ('.', '.')] 

 Dependency tags are: 
>> [(('The', 'combination'), 'det'), (('combination', 'root'), 'root'), (('of', 'results'), 'case'), (('hashing', 'results'), 'compound'), (('and', 'encryption'), 'cc'), (('encryption', 'hashing'), 'conj'), (('results', 'combination'), 'nmod'), (('in', 'function'), 'case'), (('an', 'function'), 'det'), (('overall', 'function'), 'amod'), (('function', 'results'), 'nmod'), (('that', 'MAC'), 'nsubj'), (('is', 'MAC'), 'cop'), ((',', 'MAC'), 'punct'), (('in', 'fact'), 'case'), (('fact', 'MAC'), 'obl'), ((',', 'fact'), 'punct'), (('a', 'MAC'), 'det'), (('MAC', 'function'), 'acl:relcl'), (('(', 'Method'), 'punct'), (('Method', 'MAC'), 'appos'), (('-', '2'), 'case'), (('2', 'Method'), 'nmod'), (('in', 'slide'), 'case'), (('previous', 'slide'), 'amod'), (('slide', 'Method'), 'nmod'), ((')', 'Method'), 'punct'), (('.', 'MAC'), 'punct')]

 Named Entities are: 
>> [('MAC', 'ORG')]

========================== Sentence 26 ===========================

 Unit-5  Cryptographic Hash Functions                                 Darshan Institute of Engineering & Technology   ‹#›  Digital Signature 

Tokens are: 
>> ['Unit', '-5', 'Cryptographic', 'Hash', 'Functions', 'Darshan', 'Institute', 'of', 'Engineering', '&', 'Technology', '‹#›', 'Digital', 'Signature'] 

 UPOS tags are: 
>> [('Unit', 'NOUN'), ('-5', 'NUM'), ('Cryptographic', 'ADJ'), ('Hash', 'NOUN'), ('Functions', 'NOUN'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('of', 'ADP'), ('Engineering', 'NOUN'), ('&', 'CCONJ'), ('Technology', 'NOUN'), ('‹#›', 'NOUN'), ('Digital', 'ADJ'), ('Signature', 'NOUN')] 

 XPOS tags are: 
>> [('Unit', 'NN'), ('-5', 'CD'), ('Cryptographic', 'JJ'), ('Hash', 'NN'), ('Functions', 'NNS'), ('Darshan', 'NNP'), ('Institute', 'NNP'), ('of', 'IN'), ('Engineering', 'NN'), ('&', 'CC'), ('Technology', 'NN'), ('‹#›', 'NN'), ('Digital', 'JJ'), ('Signature', 'NN')] 

 Lemmas are: 
>> [('Unit', 'unit'), ('-5', '-5'), ('Cryptographic', 'Cryptographic'), ('Hash', 'hash'), ('Functions', 'function'), ('Darshan', 'Darshan'), ('Institute', 'Institute'), ('of', 'of'), ('Engineering', 'Engineering'), ('&', '&'), ('Technology', 'technology'), ('‹#›', '‹#›'), ('Digital', 'digital'), ('Signature', 'signature')] 

 Dependency tags are: 
>> [(('Unit', 'root'), 'root'), (('-5', 'Unit'), 'nummod'), (('Cryptographic', 'Functions'), 'amod'), (('Hash', 'Functions'), 'compound'), (('Functions', 'Unit'), 'appos'), (('Darshan', 'Institute'), 'compound'), (('Institute', 'Unit'), 'appos'), (('of', 'Signature'), 'case'), (('Engineering', 'Signature'), 'compound'), (('&', 'Technology'), 'cc'), (('Technology', 'Engineering'), 'conj'), (('‹#›', 'Signature'), 'compound'), (('Digital', 'Signature'), 'amod'), (('Signature', 'Institute'), 'nmod')]

 Named Entities are: 
>> []

========================== Sentence 27 ===========================

 A digital signature is a mathematical technique used to validate the authenticity and integrity of a message, software or digital document. 

Tokens are: 
>> ['A', 'digital', 'signature', 'is', 'a', 'mathematical', 'technique', 'used', 'to', 'validate', 'the', 'authenticity', 'and', 'integrity', 'of', 'a', 'message', ',', 'software', 'or', 'digital', 'document', '.'] 

 UPOS tags are: 
>> [('A', 'DET'), ('digital', 'ADJ'), ('signature', 'NOUN'), ('is', 'AUX'), ('a', 'DET'), ('mathematical', 'ADJ'), ('technique', 'NOUN'), ('used', 'VERB'), ('to', 'PART'), ('validate', 'VERB'), ('the', 'DET'), ('authenticity', 'NOUN'), ('and', 'CCONJ'), ('integrity', 'NOUN'), ('of', 'ADP'), ('a', 'DET'), ('message', 'NOUN'), (',', 'PUNCT'), ('software', 'NOUN'), ('or', 'CCONJ'), ('digital', 'ADJ'), ('document', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('A', 'DT'), ('digital', 'JJ'), ('signature', 'NN'), ('is', 'VBZ'), ('a', 'DT'), ('mathematical', 'JJ'), ('technique', 'NN'), ('used', 'VBN'), ('to', 'TO'), ('validate', 'VB'), ('the', 'DT'), ('authenticity', 'NN'), ('and', 'CC'), ('integrity', 'NN'), ('of', 'IN'), ('a', 'DT'), ('message', 'NN'), (',', ','), ('software', 'NN'), ('or', 'CC'), ('digital', 'JJ'), ('document', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('A', 'a'), ('digital', 'digital'), ('signature', 'signature'), ('is', 'be'), ('a', 'a'), ('mathematical', 'mathematical'), ('technique', 'technique'), ('used', 'use'), ('to', 'to'), ('validate', 'validate'), ('the', 'the'), ('authenticity', 'authenticity'), ('and', 'and'), ('integrity', 'integrity'), ('of', 'of'), ('a', 'a'), ('message', 'message'), (',', ','), ('software', 'software'), ('or', 'or'), ('digital', 'digital'), ('document', 'document'), ('.', '.')] 

 Dependency tags are: 
>> [(('A', 'signature'), 'det'), (('digital', 'signature'), 'amod'), (('signature', 'technique'), 'nsubj'), (('is', 'technique'), 'cop'), (('a', 'technique'), 'det'), (('mathematical', 'technique'), 'amod'), (('technique', 'root'), 'root'), (('used', 'technique'), 'acl'), (('to', 'validate'), 'mark'), (('validate', 'used'), 'xcomp'), (('the', 'authenticity'), 'det'), (('authenticity', 'validate'), 'obj'), (('and', 'integrity'), 'cc'), (('integrity', 'authenticity'), 'conj'), (('of', 'message'), 'case'), (('a', 'message'), 'det'), (('message', 'authenticity'), 'nmod'), ((',', 'software'), 'punct'), (('software', 'message'), 'conj'), (('or', 'document'), 'cc'), (('digital', 'document'), 'amod'), (('document', 'message'), 'conj'), (('.', 'technique'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 28 ===========================

 The operation of the digital signature is similar to that of the MAC. 

Tokens are: 
>> ['The', 'operation', 'of', 'the', 'digital', 'signature', 'is', 'similar', 'to', 'that', 'of', 'the', 'MAC', '.'] 

 UPOS tags are: 
>> [('The', 'DET'), ('operation', 'NOUN'), ('of', 'ADP'), ('the', 'DET'), ('digital', 'ADJ'), ('signature', 'NOUN'), ('is', 'AUX'), ('similar', 'ADJ'), ('to', 'ADP'), ('that', 'PRON'), ('of', 'ADP'), ('the', 'DET'), ('MAC', 'PROPN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('The', 'DT'), ('operation', 'NN'), ('of', 'IN'), ('the', 'DT'), ('digital', 'JJ'), ('signature', 'NN'), ('is', 'VBZ'), ('similar', 'JJ'), ('to', 'IN'), ('that', 'DT'), ('of', 'IN'), ('the', 'DT'), ('MAC', 'NNP'), ('.', '.')] 

 Lemmas are: 
>> [('The', 'the'), ('operation', 'operation'), ('of', 'of'), ('the', 'the'), ('digital', 'digital'), ('signature', 'signature'), ('is', 'be'), ('similar', 'similar'), ('to', 'to'), ('that', 'that'), ('of', 'of'), ('the', 'the'), ('MAC', 'MAC'), ('.', '.')] 

 Dependency tags are: 
>> [(('The', 'operation'), 'det'), (('operation', 'similar'), 'nsubj'), (('of', 'signature'), 'case'), (('the', 'signature'), 'det'), (('digital', 'signature'), 'amod'), (('signature', 'operation'), 'nmod'), (('is', 'similar'), 'cop'), (('similar', 'root'), 'root'), (('to', 'that'), 'case'), (('that', 'similar'), 'obl'), (('of', 'MAC'), 'case'), (('the', 'MAC'), 'det'), (('MAC', 'that'), 'nmod'), (('.', 'similar'), 'punct')]

 Named Entities are: 
>> [('MAC', 'ORG')]

========================== Sentence 29 ===========================

 In the case of the digital signature, the hash value of a message is encrypted with a user’s private key. 

Tokens are: 
>> ['In', 'the', 'case', 'of', 'the', 'digital', 'signature', ',', 'the', 'hash', 'value', 'of', 'a', 'message', 'is', 'encrypted', 'with', 'a', 'user', '’s', 'private', 'key', '.'] 

 UPOS tags are: 
>> [('In', 'ADP'), ('the', 'DET'), ('case', 'NOUN'), ('of', 'ADP'), ('the', 'DET'), ('digital', 'ADJ'), ('signature', 'NOUN'), (',', 'PUNCT'), ('the', 'DET'), ('hash', 'NOUN'), ('value', 'NOUN'), ('of', 'ADP'), ('a', 'DET'), ('message', 'NOUN'), ('is', 'AUX'), ('encrypted', 'VERB'), ('with', 'ADP'), ('a', 'DET'), ('user', 'NOUN'), ('’s', 'PART'), ('private', 'ADJ'), ('key', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('In', 'IN'), ('the', 'DT'), ('case', 'NN'), ('of', 'IN'), ('the', 'DT'), ('digital', 'JJ'), ('signature', 'NN'), (',', ','), ('the', 'DT'), ('hash', 'NN'), ('value', 'NN'), ('of', 'IN'), ('a', 'DT'), ('message', 'NN'), ('is', 'VBZ'), ('encrypted', 'VBN'), ('with', 'IN'), ('a', 'DT'), ('user', 'NN'), ('’s', 'POS'), ('private', 'JJ'), ('key', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('In', 'in'), ('the', 'the'), ('case', 'case'), ('of', 'of'), ('the', 'the'), ('digital', 'digital'), ('signature', 'signature'), (',', ','), ('the', 'the'), ('hash', 'hash'), ('value', 'value'), ('of', 'of'), ('a', 'a'), ('message', 'message'), ('is', 'be'), ('encrypted', 'encrypt'), ('with', 'with'), ('a', 'a'), ('user', 'user'), ('’s', "'s"), ('private', 'private'), ('key', 'key'), ('.', '.')] 

 Dependency tags are: 
>> [(('In', 'case'), 'case'), (('the', 'case'), 'det'), (('case', 'encrypted'), 'obl'), (('of', 'signature'), 'case'), (('the', 'signature'), 'det'), (('digital', 'signature'), 'amod'), (('signature', 'case'), 'nmod'), ((',', 'encrypted'), 'punct'), (('the', 'value'), 'det'), (('hash', 'value'), 'compound'), (('value', 'encrypted'), 'nsubj:pass'), (('of', 'message'), 'case'), (('a', 'message'), 'det'), (('message', 'value'), 'nmod'), (('is', 'encrypted'), 'aux:pass'), (('encrypted', 'root'), 'root'), (('with', 'key'), 'case'), (('a', 'user'), 'det'), (('user', 'key'), 'nmod:poss'), (('’s', 'user'), 'case'), (('private', 'key'), 'amod'), (('key', 'encrypted'), 'obl'), (('.', 'encrypted'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 30 ===========================

 Anyone who knows the user’s public key can verify the integrity of the message that is associated with the digital signature. 

Tokens are: 
>> ['Anyone', 'who', 'knows', 'the', 'user', '’s', 'public', 'key', 'can', 'verify', 'the', 'integrity', 'of', 'the', 'message', 'that', 'is', 'associated', 'with', 'the', 'digital', 'signature', '.'] 

 UPOS tags are: 
>> [('Anyone', 'PRON'), ('who', 'PRON'), ('knows', 'VERB'), ('the', 'DET'), ('user', 'NOUN'), ('’s', 'PART'), ('public', 'ADJ'), ('key', 'NOUN'), ('can', 'AUX'), ('verify', 'VERB'), ('the', 'DET'), ('integrity', 'NOUN'), ('of', 'ADP'), ('the', 'DET'), ('message', 'NOUN'), ('that', 'PRON'), ('is', 'AUX'), ('associated', 'VERB'), ('with', 'ADP'), ('the', 'DET'), ('digital', 'ADJ'), ('signature', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Anyone', 'NN'), ('who', 'WP'), ('knows', 'VBZ'), ('the', 'DT'), ('user', 'NN'), ('’s', 'POS'), ('public', 'JJ'), ('key', 'NN'), ('can', 'MD'), ('verify', 'VB'), ('the', 'DT'), ('integrity', 'NN'), ('of', 'IN'), ('the', 'DT'), ('message', 'NN'), ('that', 'WDT'), ('is', 'VBZ'), ('associated', 'VBN'), ('with', 'IN'), ('the', 'DT'), ('digital', 'JJ'), ('signature', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('Anyone', 'anyone'), ('who', 'who'), ('knows', 'know'), ('the', 'the'), ('user', 'user'), ('’s', "'s"), ('public', 'public'), ('key', 'key'), ('can', 'can'), ('verify', 'verify'), ('the', 'the'), ('integrity', 'integrity'), ('of', 'of'), ('the', 'the'), ('message', 'message'), ('that', 'that'), ('is', 'be'), ('associated', 'associate'), ('with', 'with'), ('the', 'the'), ('digital', 'digital'), ('signature', 'signature'), ('.', '.')] 

 Dependency tags are: 
>> [(('Anyone', 'verify'), 'nsubj'), (('who', 'knows'), 'nsubj'), (('knows', 'Anyone'), 'acl:relcl'), (('the', 'user'), 'det'), (('user', 'key'), 'nmod:poss'), (('’s', 'user'), 'case'), (('public', 'key'), 'amod'), (('key', 'knows'), 'obj'), (('can', 'verify'), 'aux'), (('verify', 'root'), 'root'), (('the', 'integrity'), 'det'), (('integrity', 'verify'), 'obj'), (('of', 'message'), 'case'), (('the', 'message'), 'det'), (('message', 'integrity'), 'nmod'), (('that', 'associated'), 'nsubj:pass'), (('is', 'associated'), 'aux:pass'), (('associated', 'message'), 'acl:relcl'), (('with', 'signature'), 'case'), (('the', 'signature'), 'det'), (('digital', 'signature'), 'amod'), (('signature', 'associated'), 'obl'), (('.', 'verify'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 31 ===========================

 Unit-5  Cryptographic Hash Functions                                 Darshan Institute of Engineering & Technology   ‹#›  Digital Signature method - 1 

Tokens are: 
>> ['Unit', '-5', 'Cryptographic', 'Hash', 'Functions', 'Darshan', 'Institute', 'of', 'Engineering', '&', 'Technology', '‹#›', 'Digital', 'Signature', 'method', '-', '1'] 

 UPOS tags are: 
>> [('Unit', 'NOUN'), ('-5', 'NUM'), ('Cryptographic', 'ADJ'), ('Hash', 'NOUN'), ('Functions', 'NOUN'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('of', 'ADP'), ('Engineering', 'NOUN'), ('&', 'CCONJ'), ('Technology', 'NOUN'), ('‹#›', 'NOUN'), ('Digital', 'ADJ'), ('Signature', 'NOUN'), ('method', 'NOUN'), ('-', 'PUNCT'), ('1', 'NUM')] 

 XPOS tags are: 
>> [('Unit', 'NN'), ('-5', 'CD'), ('Cryptographic', 'JJ'), ('Hash', 'NN'), ('Functions', 'NNS'), ('Darshan', 'NNP'), ('Institute', 'NNP'), ('of', 'IN'), ('Engineering', 'NN'), ('&', 'CC'), ('Technology', 'NN'), ('‹#›', 'NN'), ('Digital', 'JJ'), ('Signature', 'NN'), ('method', 'NN'), ('-', ','), ('1', 'CD')] 

 Lemmas are: 
>> [('Unit', 'unit'), ('-5', '-5'), ('Cryptographic', 'Cryptographic'), ('Hash', 'hash'), ('Functions', 'function'), ('Darshan', 'Darshan'), ('Institute', 'Institute'), ('of', 'of'), ('Engineering', 'Engineering'), ('&', '&'), ('Technology', 'technology'), ('‹#›', '‹#›'), ('Digital', 'digital'), ('Signature', 'signature'), ('method', 'method'), ('-', '-'), ('1', '1')] 

 Dependency tags are: 
>> [(('Unit', 'root'), 'root'), (('-5', 'Unit'), 'nummod'), (('Cryptographic', 'Functions'), 'amod'), (('Hash', 'Functions'), 'compound'), (('Functions', 'Unit'), 'appos'), (('Darshan', 'Institute'), 'compound'), (('Institute', 'Unit'), 'appos'), (('of', 'method'), 'case'), (('Engineering', '‹#›'), 'compound'), (('&', 'Technology'), 'cc'), (('Technology', 'Engineering'), 'conj'), (('‹#›', 'method'), 'compound'), (('Digital', 'method'), 'amod'), (('Signature', 'method'), 'compound'), (('method', 'Institute'), 'nmod'), (('-', 'method'), 'punct'), (('1', 'method'), 'appos')]

 Named Entities are: 
>> []

========================== Sentence 32 ===========================

 The hash code is encrypted, using public-key encryption with the sender’s private key. 

Tokens are: 
>> ['The', 'hash', 'code', 'is', 'encrypted', ',', 'using', 'public-key', 'encryption', 'with', 'the', 'sender', '’s', 'private', 'key', '.'] 

 UPOS tags are: 
>> [('The', 'DET'), ('hash', 'NOUN'), ('code', 'NOUN'), ('is', 'AUX'), ('encrypted', 'VERB'), (',', 'PUNCT'), ('using', 'VERB'), ('public-key', 'ADJ'), ('encryption', 'NOUN'), ('with', 'ADP'), ('the', 'DET'), ('sender', 'NOUN'), ('’s', 'PART'), ('private', 'ADJ'), ('key', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('The', 'DT'), ('hash', 'NN'), ('code', 'NN'), ('is', 'VBZ'), ('encrypted', 'VBN'), (',', ','), ('using', 'VBG'), ('public-key', 'JJ'), ('encryption', 'NN'), ('with', 'IN'), ('the', 'DT'), ('sender', 'NN'), ('’s', 'POS'), ('private', 'JJ'), ('key', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('The', 'the'), ('hash', 'hash'), ('code', 'code'), ('is', 'be'), ('encrypted', 'encrypt'), (',', ','), ('using', 'use'), ('public-key', 'public-key'), ('encryption', 'encryption'), ('with', 'with'), ('the', 'the'), ('sender', 'sender'), ('’s', "'s"), ('private', 'private'), ('key', 'key'), ('.', '.')] 

 Dependency tags are: 
>> [(('The', 'code'), 'det'), (('hash', 'code'), 'compound'), (('code', 'encrypted'), 'nsubj:pass'), (('is', 'encrypted'), 'aux:pass'), (('encrypted', 'root'), 'root'), ((',', 'using'), 'punct'), (('using', 'encrypted'), 'advcl'), (('public-key', 'encryption'), 'amod'), (('encryption', 'using'), 'obj'), (('with', 'key'), 'case'), (('the', 'sender'), 'det'), (('sender', 'key'), 'nmod:poss'), (('’s', 'sender'), 'case'), (('private', 'key'), 'amod'), (('key', 'using'), 'obl'), (('.', 'encrypted'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 33 ===========================

 This provides authentication. 

Tokens are: 
>> ['This', 'provides', 'authentication', '.'] 

 UPOS tags are: 
>> [('This', 'PRON'), ('provides', 'VERB'), ('authentication', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('This', 'DT'), ('provides', 'VBZ'), ('authentication', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('This', 'this'), ('provides', 'provide'), ('authentication', 'authentication'), ('.', '.')] 

 Dependency tags are: 
>> [(('This', 'provides'), 'nsubj'), (('provides', 'root'), 'root'), (('authentication', 'provides'), 'obj'), (('.', 'provides'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 34 ===========================

 It also provides a digital signature, because only the sender could have produced the encrypted hash code. 

Tokens are: 
>> ['It', 'also', 'provides', 'a', 'digital', 'signature', ',', 'because', 'only', 'the', 'sender', 'could', 'have', 'produced', 'the', 'encrypted', 'hash', 'code', '.'] 

 UPOS tags are: 
>> [('It', 'PRON'), ('also', 'ADV'), ('provides', 'VERB'), ('a', 'DET'), ('digital', 'ADJ'), ('signature', 'NOUN'), (',', 'PUNCT'), ('because', 'SCONJ'), ('only', 'ADV'), ('the', 'DET'), ('sender', 'NOUN'), ('could', 'AUX'), ('have', 'AUX'), ('produced', 'VERB'), ('the', 'DET'), ('encrypted', 'VERB'), ('hash', 'NOUN'), ('code', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('It', 'PRP'), ('also', 'RB'), ('provides', 'VBZ'), ('a', 'DT'), ('digital', 'JJ'), ('signature', 'NN'), (',', ','), ('because', 'IN'), ('only', 'RB'), ('the', 'DT'), ('sender', 'NN'), ('could', 'MD'), ('have', 'VB'), ('produced', 'VBN'), ('the', 'DT'), ('encrypted', 'VBN'), ('hash', 'NN'), ('code', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('It', 'it'), ('also', 'also'), ('provides', 'provide'), ('a', 'a'), ('digital', 'digital'), ('signature', 'signature'), (',', ','), ('because', 'because'), ('only', 'only'), ('the', 'the'), ('sender', 'sender'), ('could', 'could'), ('have', 'have'), ('produced', 'produce'), ('the', 'the'), ('encrypted', 'encrypt'), ('hash', 'hash'), ('code', 'code'), ('.', '.')] 

 Dependency tags are: 
>> [(('It', 'provides'), 'nsubj'), (('also', 'provides'), 'advmod'), (('provides', 'root'), 'root'), (('a', 'signature'), 'det'), (('digital', 'signature'), 'amod'), (('signature', 'provides'), 'obj'), ((',', 'produced'), 'punct'), (('because', 'produced'), 'mark'), (('only', 'sender'), 'advmod'), (('the', 'sender'), 'det'), (('sender', 'produced'), 'nsubj'), (('could', 'produced'), 'aux'), (('have', 'produced'), 'aux'), (('produced', 'provides'), 'advcl'), (('the', 'code'), 'det'), (('encrypted', 'code'), 'amod'), (('hash', 'code'), 'compound'), (('code', 'produced'), 'obj'), (('.', 'provides'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 35 ===========================

 H M   Source A Destination B E PRa ll M  E(PRa, H(M)) H D PUa  Compare    Unit-5  Cryptographic Hash Functions                                 Darshan Institute of Engineering & Technology   ‹#›  Digital Signature method - 2 

Tokens are: 
>> ['H', 'M', 'Source', 'A', 'Destination', 'B', 'E', 'PRa', 'll', 'M', 'E(', 'PRa', ',', 'H(', 'M', ')', ')', 'H', 'D', 'PUa', 'Compare', 'Unit-5', 'Cryptographic', 'Hash', 'Functions', 'Darshan', 'Institute', 'of', 'Engineering', '&', 'Technology', '‹#›', 'Digital', 'Signature', 'method', '-', '2'] 

 UPOS tags are: 
>> [('H', 'PROPN'), ('M', 'NUM'), ('Source', 'NOUN'), ('A', 'DET'), ('Destination', 'NOUN'), ('B', 'NOUN'), ('E', 'NOUN'), ('PRa', 'NOUN'), ('ll', 'NOUN'), ('M', 'NOUN'), ('E(', 'PROPN'), ('PRa', 'NOUN'), (',', 'PUNCT'), ('H(', 'NUM'), ('M', 'NUM'), (')', 'PUNCT'), (')', 'PUNCT'), ('H', 'NOUN'), ('D', 'NOUN'), ('PUa', 'NOUN'), ('Compare', 'NOUN'), ('Unit-5', 'NOUN'), ('Cryptographic', 'ADJ'), ('Hash', 'NOUN'), ('Functions', 'NOUN'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('of', 'ADP'), ('Engineering', 'NOUN'), ('&', 'CCONJ'), ('Technology', 'NOUN'), ('‹#›', 'NOUN'), ('Digital', 'ADJ'), ('Signature', 'NOUN'), ('method', 'NOUN'), ('-', 'PUNCT'), ('2', 'NUM')] 

 XPOS tags are: 
>> [('H', 'NNP'), ('M', 'CD'), ('Source', 'NN'), ('A', 'DT'), ('Destination', 'NN'), ('B', 'NN'), ('E', 'NN'), ('PRa', 'NN'), ('ll', 'NN'), ('M', 'NN'), ('E(', 'NNP'), ('PRa', 'NN'), (',', ','), ('H(', 'CD'), ('M', 'CD'), (')', '-RRB-'), (')', '-RRB-'), ('H', 'NN'), ('D', 'NN'), ('PUa', 'NN'), ('Compare', 'NN'), ('Unit-5', 'NN'), ('Cryptographic', 'JJ'), ('Hash', 'NN'), ('Functions', 'NNS'), ('Darshan', 'NNP'), ('Institute', 'NNP'), ('of', 'IN'), ('Engineering', 'NN'), ('&', 'CC'), ('Technology', 'NN'), ('‹#›', 'NN'), ('Digital', 'JJ'), ('Signature', 'NN'), ('method', 'NN'), ('-', ','), ('2', 'CD')] 

 Lemmas are: 
>> [('H', 'H'), ('M', 'm'), ('Source', 'source'), ('A', 'a'), ('Destination', 'destination'), ('B', 'b'), ('E', 'e'), ('PRa', 'pra'), ('ll', 'will'), ('M', 'm'), ('E(', 'E('), ('PRa', 'pra'), (',', ','), ('H(', 'h('), ('M', 'm'), (')', ')'), (')', ')'), ('H', 'h'), ('D', 'd'), ('PUa', 'pua'), ('Compare', 'compare'), ('Unit-5', 'unciot'), ('Cryptographic', 'Cryptographic'), ('Hash', 'hash'), ('Functions', 'function'), ('Darshan', 'Darshan'), ('Institute', 'Institute'), ('of', 'of'), ('Engineering', 'Engineering'), ('&', '&'), ('Technology', 'technology'), ('‹#›', '‹#›'), ('Digital', 'digital'), ('Signature', 'signature'), ('method', 'method'), ('-', '-'), ('2', '2')] 

 Dependency tags are: 
>> [(('H', 'M'), 'compound'), (('M', 'Source'), 'nummod'), (('Source', 'root'), 'root'), (('A', 'E'), 'det'), (('Destination', 'B'), 'compound'), (('B', 'Source'), 'appos'), (('E', 'Source'), 'appos'), (('PRa', 'E'), 'compound'), (('ll', 'M'), 'compound'), (('M', 'PRa'), 'compound'), (('E(', 'PRa'), 'compound'), (('PRa', 'Source'), 'list'), ((',', 'PRa'), 'punct'), (('H(', 'M'), 'nummod'), (('M', 'PRa'), 'appos'), ((')', 'M'), 'punct'), ((')', 'M'), 'punct'), (('H', 'D'), 'compound'), (('D', 'Compare'), 'compound'), (('PUa', 'Compare'), 'compound'), (('Compare', 'Source'), 'list'), (('Unit-5', 'Functions'), 'compound'), (('Cryptographic', 'Functions'), 'amod'), (('Hash', 'Functions'), 'compound'), (('Functions', 'Institute'), 'compound'), (('Darshan', 'Institute'), 'compound'), (('Institute', 'Source'), 'list'), (('of', 'method'), 'case'), (('Engineering', '‹#›'), 'compound'), (('&', 'Technology'), 'cc'), (('Technology', 'Engineering'), 'conj'), (('‹#›', 'method'), 'compound'), (('Digital', 'method'), 'amod'), (('Signature', 'method'), 'compound'), (('method', 'Institute'), 'nmod'), (('-', 'Source'), 'punct'), (('2', 'method'), 'appos')]

 Named Entities are: 
>> []

========================== Sentence 36 ===========================

 If confidentiality as well as a digital signature is desired, then the message plus the private-key-encrypted hash code can be encrypted using a symmetric  secret key. 

Tokens are: 
>> ['If', 'confidentiality', 'as', 'well', 'as', 'a', 'digital', 'signature', 'is', 'desired', ',', 'then', 'the', 'message', 'plus', 'the', 'private-', 'key', '-', 'encrypted', 'hash', 'code', 'can', 'be', 'encrypted', 'using', 'a', 'symmetric', 'secret', 'key', '.'] 

 UPOS tags are: 
>> [('If', 'SCONJ'), ('confidentiality', 'NOUN'), ('as', 'ADV'), ('well', 'ADV'), ('as', 'ADP'), ('a', 'DET'), ('digital', 'ADJ'), ('signature', 'NOUN'), ('is', 'AUX'), ('desired', 'VERB'), (',', 'PUNCT'), ('then', 'ADV'), ('the', 'DET'), ('message', 'NOUN'), ('plus', 'CCONJ'), ('the', 'DET'), ('private-', 'ADJ'), ('key', 'ADJ'), ('-', 'PUNCT'), ('encrypted', 'VERB'), ('hash', 'NOUN'), ('code', 'NOUN'), ('can', 'AUX'), ('be', 'AUX'), ('encrypted', 'VERB'), ('using', 'VERB'), ('a', 'DET'), ('symmetric', 'ADJ'), ('secret', 'ADJ'), ('key', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('If', 'IN'), ('confidentiality', 'NN'), ('as', 'RB'), ('well', 'RB'), ('as', 'IN'), ('a', 'DT'), ('digital', 'JJ'), ('signature', 'NN'), ('is', 'VBZ'), ('desired', 'VBN'), (',', ','), ('then', 'RB'), ('the', 'DT'), ('message', 'NN'), ('plus', 'CC'), ('the', 'DT'), ('private-', 'JJ'), ('key', 'JJ'), ('-', 'HYPH'), ('encrypted', 'VBN'), ('hash', 'NN'), ('code', 'NN'), ('can', 'MD'), ('be', 'VB'), ('encrypted', 'VBN'), ('using', 'VBG'), ('a', 'DT'), ('symmetric', 'JJ'), ('secret', 'JJ'), ('key', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('If', 'if'), ('confidentiality', 'confidentiality'), ('as', 'as'), ('well', 'well'), ('as', 'as'), ('a', 'a'), ('digital', 'digital'), ('signature', 'signature'), ('is', 'be'), ('desired', 'desire'), (',', ','), ('then', 'then'), ('the', 'the'), ('message', 'message'), ('plus', 'plus'), ('the', 'the'), ('private-', 'private-'), ('key', 'key'), ('-', '-'), ('encrypted', 'encrypt'), ('hash', 'hash'), ('code', 'code'), ('can', 'can'), ('be', 'be'), ('encrypted', 'encrypt'), ('using', 'use'), ('a', 'a'), ('symmetric', 'symmetric'), ('secret', 'secret'), ('key', 'key'), ('.', '.')] 

 Dependency tags are: 
>> [(('If', 'desired'), 'mark'), (('confidentiality', 'desired'), 'nsubj:pass'), (('as', 'signature'), 'cc'), (('well', 'as'), 'fixed'), (('as', 'as'), 'fixed'), (('a', 'signature'), 'det'), (('digital', 'signature'), 'amod'), (('signature', 'confidentiality'), 'conj'), (('is', 'desired'), 'aux:pass'), (('desired', 'encrypted'), 'advcl'), ((',', 'encrypted'), 'punct'), (('then', 'encrypted'), 'advmod'), (('the', 'message'), 'det'), (('message', 'encrypted'), 'nsubj:pass'), (('plus', 'code'), 'cc'), (('the', 'code'), 'det'), (('private-', 'code'), 'amod'), (('key', 'encrypted'), 'compound'), (('-', 'encrypted'), 'punct'), (('encrypted', 'code'), 'amod'), (('hash', 'code'), 'compound'), (('code', 'message'), 'conj'), (('can', 'encrypted'), 'aux'), (('be', 'encrypted'), 'aux:pass'), (('encrypted', 'root'), 'root'), (('using', 'encrypted'), 'advcl'), (('a', 'key'), 'det'), (('symmetric', 'key'), 'amod'), (('secret', 'key'), 'amod'), (('key', 'using'), 'obj'), (('.', 'encrypted'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 37 ===========================

 M   Source A Destination B E ll M  E(Pra, H(M)) H Compare  E K  D K E (K, [ M || E(Pra, H(M)]) 

Tokens are: 
>> ['M', 'Source', 'A', 'Destination', 'B', 'E', 'll', 'M', 'E(', 'Pra', ',', 'H', '(', 'M', ')', ')', 'H', 'Compare', 'E', 'K', 'D', 'K', 'E', '(', 'K', ',', '[', 'M', '||', 'E', '(', 'Pra', ',', 'H', '(', 'M', ')', ']', ')'] 

 UPOS tags are: 
>> [('M', 'PROPN'), ('Source', 'NOUN'), ('A', 'DET'), ('Destination', 'NOUN'), ('B', 'NOUN'), ('E', 'NOUN'), ('ll', 'PROPN'), ('M', 'PROPN'), ('E(', 'PROPN'), ('Pra', 'PROPN'), (',', 'PUNCT'), ('H', 'NUM'), ('(', 'PUNCT'), ('M', 'NUM'), (')', 'PUNCT'), (')', 'PUNCT'), ('H', 'NOUN'), ('Compare', 'NOUN'), ('E', 'NOUN'), ('K', 'NUM'), ('D', 'PROPN'), ('K', 'NUM'), ('E', 'PROPN'), ('(', 'PUNCT'), ('K', 'NUM'), (',', 'PUNCT'), ('[', 'PUNCT'), ('M', 'NUM'), ('||', 'SYM'), ('E', 'PROPN'), ('(', 'PUNCT'), ('Pra', 'PROPN'), (',', 'PUNCT'), ('H', 'NUM'), ('(', 'PUNCT'), ('M', 'NUM'), (')', 'PUNCT'), (']', 'PUNCT'), (')', 'PUNCT')] 

 XPOS tags are: 
>> [('M', 'NNP'), ('Source', 'NN'), ('A', 'DT'), ('Destination', 'NN'), ('B', 'NN'), ('E', 'NN'), ('ll', 'NNP'), ('M', 'NNP'), ('E(', 'NNP'), ('Pra', 'NNP'), (',', ','), ('H', 'CD'), ('(', '-LRB-'), ('M', 'CD'), (')', '-RRB-'), (')', '-RRB-'), ('H', 'NN'), ('Compare', 'NN'), ('E', 'NN'), ('K', 'CD'), ('D', 'NNP'), ('K', 'CD'), ('E', 'NNP'), ('(', '-LRB-'), ('K', 'CD'), (',', ','), ('[', '-LRB-'), ('M', 'CD'), ('||', 'SYM'), ('E', 'NNP'), ('(', '-LRB-'), ('Pra', 'NNP'), (',', ','), ('H', 'CD'), ('(', '-LRB-'), ('M', 'CD'), (')', '-RRB-'), (']', '-RRB-'), (')', '-RRB-')] 

 Lemmas are: 
>> [('M', 'M'), ('Source', 'source'), ('A', 'a'), ('Destination', 'destination'), ('B', 'b'), ('E', 'e'), ('ll', 'will'), ('M', 'M'), ('E(', 'E('), ('Pra', 'Pra'), (',', ','), ('H', 'H'), ('(', '('), ('M', 'm'), (')', ')'), (')', ')'), ('H', 'h'), ('Compare', 'compare'), ('E', 'e'), ('K', 'k'), ('D', 'D'), ('K', 'k'), ('E', 'E'), ('(', '('), ('K', 'k'), (',', ','), ('[', '['), ('M', 'm'), ('||', '||'), ('E', 'E'), ('(', '('), ('Pra', 'Pra'), (',', ','), ('H', 'H'), ('(', '('), ('M', 'm'), (')', ')'), (']', ']'), (')', ')')] 

 Dependency tags are: 
>> [(('M', 'Source'), 'compound'), (('Source', 'root'), 'root'), (('A', 'B'), 'det'), (('Destination', 'B'), 'compound'), (('B', 'E'), 'compound'), (('E', 'Source'), 'appos'), (('ll', 'M'), 'compound'), (('M', 'E'), 'appos'), (('E(', 'M'), 'flat'), (('Pra', 'M'), 'flat'), ((',', 'Pra'), 'punct'), (('H', 'M'), 'nummod'), (('(', 'M'), 'punct'), (('M', 'Pra'), 'appos'), ((')', 'M'), 'punct'), ((')', 'M'), 'punct'), (('H', 'Compare'), 'compound'), (('Compare', 'Source'), 'list'), (('E', 'Compare'), 'appos'), (('K', 'D'), 'nummod'), (('D', 'Compare'), 'appos'), (('K', 'D'), 'nummod'), (('E', 'D'), 'flat'), (('(', 'K'), 'punct'), (('K', 'Source'), 'list'), ((',', 'M'), 'punct'), (('[', 'M'), 'punct'), (('M', 'Source'), 'list'), (('||', 'M'), 'flat'), (('E', 'M'), 'flat'), (('(', 'Pra'), 'punct'), (('Pra', 'M'), 'conj'), ((',', 'H'), 'punct'), (('H', 'Pra'), 'dep'), (('(', 'M'), 'punct'), (('M', 'Pra'), 'dep'), ((')', 'M'), 'punct'), ((']', 'Pra'), 'punct'), ((')', 'Pra'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 38 ===========================

 H PRa D PUa    Unit-5  Cryptographic Hash Functions                                 Darshan Institute of Engineering & Technology   ‹#›   13  Security Requirements  Disclosure Traffic analysis Masquerade Content modification Sequence modification Timing modification Source repudiation Destination repudiation   Unit-5  Cryptographic Hash Functions                                 Darshan Institute of Engineering & Technology   ‹#›  Requirements for hash functions Can be applied to any sized message M. Produces fixed-length output h. 

Tokens are: 
>> ['H', 'PRa', 'D', 'PUa', 'Unit-5', 'Cryptographic', 'Hash', 'Functions', 'Darshan', 'Institute', 'of', 'Engineering', '&', 'Technology', '‹#›', '13', 'Security', 'Requirements', 'Disclosure', 'Traffic', 'analysis', 'Masquerade', 'Content', 'modification', 'Sequence', 'modification', 'Timing', 'modification', 'Source', 'repudiation', 'Destination', 'repudiation', 'Unit-5', 'Cryptographic', 'Hash', 'Functions', 'Darshan', 'Institute', 'of', 'Engineering', '&', 'Technology', '‹#›', 'Requirements', 'for', 'hash', 'functions', 'Can', 'be', 'applied', 'to', 'any', 'sized', 'message', 'M.', 'Produces', 'fixed', '-', 'length', 'output', 'h.'] 

 UPOS tags are: 
>> [('H', 'PROPN'), ('PRa', 'PROPN'), ('D', 'PROPN'), ('PUa', 'PROPN'), ('Unit-5', 'PROPN'), ('Cryptographic', 'ADJ'), ('Hash', 'PROPN'), ('Functions', 'PROPN'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('of', 'ADP'), ('Engineering', 'NOUN'), ('&', 'CCONJ'), ('Technology', 'NOUN'), ('‹#›', 'NOUN'), ('13', 'NUM'), ('Security', 'NOUN'), ('Requirements', 'NOUN'), ('Disclosure', 'NOUN'), ('Traffic', 'NOUN'), ('analysis', 'NOUN'), ('Masquerade', 'NOUN'), ('Content', 'NOUN'), ('modification', 'NOUN'), ('Sequence', 'NOUN'), ('modification', 'NOUN'), ('Timing', 'NOUN'), ('modification', 'NOUN'), ('Source', 'NOUN'), ('repudiation', 'NOUN'), ('Destination', 'NOUN'), ('repudiation', 'NOUN'), ('Unit-5', 'PROPN'), ('Cryptographic', 'ADJ'), ('Hash', 'PROPN'), ('Functions', 'PROPN'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('of', 'ADP'), ('Engineering', 'NOUN'), ('&', 'CCONJ'), ('Technology', 'NOUN'), ('‹#›', 'NOUN'), ('Requirements', 'NOUN'), ('for', 'ADP'), ('hash', 'NOUN'), ('functions', 'NOUN'), ('Can', 'AUX'), ('be', 'AUX'), ('applied', 'VERB'), ('to', 'ADP'), ('any', 'DET'), ('sized', 'VERB'), ('message', 'NOUN'), ('M.', 'NOUN'), ('Produces', 'VERB'), ('fixed', 'VERB'), ('-', 'PUNCT'), ('length', 'NOUN'), ('output', 'NOUN'), ('h.', 'NOUN')] 

 XPOS tags are: 
>> [('H', 'NNP'), ('PRa', 'NNP'), ('D', 'NNP'), ('PUa', 'NNP'), ('Unit-5', 'NNP'), ('Cryptographic', 'NNP'), ('Hash', 'NNP'), ('Functions', 'NNPS'), ('Darshan', 'NNP'), ('Institute', 'NNP'), ('of', 'IN'), ('Engineering', 'NN'), ('&', 'CC'), ('Technology', 'NN'), ('‹#›', 'NN'), ('13', 'CD'), ('Security', 'NN'), ('Requirements', 'NNS'), ('Disclosure', 'NN'), ('Traffic', 'NN'), ('analysis', 'NN'), ('Masquerade', 'NN'), ('Content', 'NN'), ('modification', 'NN'), ('Sequence', 'NN'), ('modification', 'NN'), ('Timing', 'NN'), ('modification', 'NN'), ('Source', 'NN'), ('repudiation', 'NN'), ('Destination', 'NN'), ('repudiation', 'NN'), ('Unit-5', 'NNP'), ('Cryptographic', 'NNP'), ('Hash', 'NNP'), ('Functions', 'NNPS'), ('Darshan', 'NNP'), ('Institute', 'NNP'), ('of', 'IN'), ('Engineering', 'NN'), ('&', 'CC'), ('Technology', 'NN'), ('‹#›', 'NN'), ('Requirements', 'NNS'), ('for', 'IN'), ('hash', 'NN'), ('functions', 'NNS'), ('Can', 'MD'), ('be', 'VB'), ('applied', 'VBN'), ('to', 'IN'), ('any', 'DT'), ('sized', 'VBN'), ('message', 'NN'), ('M.', 'NN'), ('Produces', 'VBZ'), ('fixed', 'VBN'), ('-', 'HYPH'), ('length', 'NN'), ('output', 'NN'), ('h.', 'NN')] 

 Lemmas are: 
>> [('H', 'H'), ('PRa', 'PRa'), ('D', 'D'), ('PUa', 'PUa'), ('Unit-5', 'Unit-5'), ('Cryptographic', 'Cryptographic'), ('Hash', 'hash'), ('Functions', 'Function'), ('Darshan', 'Darshan'), ('Institute', 'Institute'), ('of', 'of'), ('Engineering', 'Engineering'), ('&', '&'), ('Technology', 'technology'), ('‹#›', '‹#›'), ('13', '13'), ('Security', 'security'), ('Requirements', 'requirement'), ('Disclosure', 'disclosure'), ('Traffic', 'traffic'), ('analysis', 'analysis'), ('Masquerade', 'masquerade'), ('Content', 'Content'), ('modification', 'modification'), ('Sequence', 'sequence'), ('modification', 'modification'), ('Timing', 'timing'), ('modification', 'modification'), ('Source', 'source'), ('repudiation', 'repudiation'), ('Destination', 'destination'), ('repudiation', 'repudiation'), ('Unit-5', 'Unit-5'), ('Cryptographic', 'Cryptographic'), ('Hash', 'hash'), ('Functions', 'Function'), ('Darshan', 'Darshan'), ('Institute', 'Institute'), ('of', 'of'), ('Engineering', 'Engineering'), ('&', '&'), ('Technology', 'technology'), ('‹#›', '‹#›'), ('Requirements', 'requirement'), ('for', 'for'), ('hash', 'hash'), ('functions', 'function'), ('Can', 'can'), ('be', 'be'), ('applied', 'apply'), ('to', 'to'), ('any', 'any'), ('sized', 'size'), ('message', 'message'), ('M.', 'M.'), ('Produces', 'produce'), ('fixed', 'fix'), ('-', '-'), ('length', 'length'), ('output', 'output'), ('h.', 'h.')] 

 Dependency tags are: 
>> [(('H', 'D'), 'compound'), (('PRa', 'D'), 'compound'), (('D', 'Institute'), 'compound'), (('PUa', 'Institute'), 'compound'), (('Unit-5', 'Institute'), 'compound'), (('Cryptographic', 'Functions'), 'amod'), (('Hash', 'Functions'), 'compound'), (('Functions', 'Institute'), 'compound'), (('Darshan', 'Institute'), 'compound'), (('Institute', 'applied'), 'nsubj:pass'), (('of', '‹#›'), 'case'), (('Engineering', '‹#›'), 'compound'), (('&', 'Technology'), 'cc'), (('Technology', 'Engineering'), 'conj'), (('‹#›', 'Institute'), 'nmod'), (('13', 'Requirements'), 'nummod'), (('Security', 'Requirements'), 'compound'), (('Requirements', 'Institute'), 'nmod'), (('Disclosure', 'analysis'), 'compound'), (('Traffic', 'analysis'), 'compound'), (('analysis', 'Requirements'), 'compound'), (('Masquerade', 'modification'), 'compound'), (('Content', 'modification'), 'compound'), (('modification', 'Requirements'), 'compound'), (('Sequence', 'Timing'), 'compound'), (('modification', 'Timing'), 'compound'), (('Timing', 'repudiation'), 'compound'), (('modification', 'repudiation'), 'compound'), (('Source', 'repudiation'), 'compound'), (('repudiation', 'repudiation'), 'compound'), (('Destination', 'repudiation'), 'compound'), (('repudiation', 'Institute'), 'conj'), (('Unit-5', 'Institute'), 'compound'), (('Cryptographic', 'Functions'), 'amod'), (('Hash', 'Functions'), 'compound'), (('Functions', 'Institute'), 'compound'), (('Darshan', 'Institute'), 'compound'), (('Institute', 'repudiation'), 'appos'), (('of', 'Requirements'), 'case'), (('Engineering', 'Requirements'), 'compound'), (('&', 'Technology'), 'cc'), (('Technology', 'Engineering'), 'conj'), (('‹#›', 'Requirements'), 'compound'), (('Requirements', 'Institute'), 'nmod'), (('for', 'functions'), 'case'), (('hash', 'functions'), 'compound'), (('functions', 'Requirements'), 'nmod'), (('Can', 'applied'), 'aux'), (('be', 'applied'), 'aux:pass'), (('applied', 'root'), 'root'), (('to', 'message'), 'case'), (('any', 'message'), 'det'), (('sized', 'message'), 'amod'), (('message', 'applied'), 'obl'), (('M.', 'Produces'), 'nsubj'), (('Produces', 'message'), 'acl:relcl'), (('fixed', 'length'), 'amod'), (('-', 'length'), 'punct'), (('length', 'output'), 'compound'), (('output', 'h.'), 'compound'), (('h.', 'Produces'), 'obj')]

 Named Entities are: 
>> [('13', 'CARDINAL')]

========================== Sentence 39 ===========================

 It is easy to compute h=H(M) for any message M. Given hash value h is infeasible to find y such that (H(y) = h) One-way property 

Tokens are: 
>> ['It', 'is', 'easy', 'to', 'compute', 'h=', 'H', '(', 'M', ')', 'for', 'any', 'message', 'M.', 'Given', 'hash', 'value', 'h', 'is', 'infeasible', 'to', 'find', 'y', 'such', 'that', '(', 'H(', 'y', ')', '=', 'h)', 'One', '-', 'way', 'property'] 

 UPOS tags are: 
>> [('It', 'PRON'), ('is', 'AUX'), ('easy', 'ADJ'), ('to', 'PART'), ('compute', 'VERB'), ('h=', 'NUM'), ('H', 'NOUN'), ('(', 'PUNCT'), ('M', 'NUM'), (')', 'PUNCT'), ('for', 'ADP'), ('any', 'DET'), ('message', 'NOUN'), ('M.', 'NOUN'), ('Given', 'VERB'), ('hash', 'NOUN'), ('value', 'NOUN'), ('h', 'NOUN'), ('is', 'AUX'), ('infeasible', 'ADJ'), ('to', 'PART'), ('find', 'VERB'), ('y', 'NOUN'), ('such', 'ADJ'), ('that', 'PRON'), ('(', 'PUNCT'), ('H(', 'NUM'), ('y', 'NOUN'), (')', 'PUNCT'), ('=', 'PUNCT'), ('h)', 'SYM'), ('One', 'NUM'), ('-', 'PUNCT'), ('way', 'NOUN'), ('property', 'NOUN')] 

 XPOS tags are: 
>> [('It', 'PRP'), ('is', 'VBZ'), ('easy', 'JJ'), ('to', 'TO'), ('compute', 'VB'), ('h=', 'CD'), ('H', 'NN'), ('(', '-LRB-'), ('M', 'LS'), (')', '-RRB-'), ('for', 'IN'), ('any', 'DT'), ('message', 'NN'), ('M.', 'NN'), ('Given', 'VBN'), ('hash', 'NN'), ('value', 'NN'), ('h', 'NN'), ('is', 'VBZ'), ('infeasible', 'JJ'), ('to', 'TO'), ('find', 'VB'), ('y', 'NNS'), ('such', 'JJ'), ('that', 'WDT'), ('(', '-LRB-'), ('H(', 'CD'), ('y', 'NN'), (')', '-RRB-'), ('=', ','), ('h)', 'SYM'), ('One', 'CD'), ('-', 'HYPH'), ('way', 'NN'), ('property', 'NN')] 

 Lemmas are: 
>> [('It', 'it'), ('is', 'be'), ('easy', 'easy'), ('to', 'to'), ('compute', 'compute'), ('h=', 'h='), ('H', 'h'), ('(', '('), ('M', 'm'), (')', ')'), ('for', 'for'), ('any', 'any'), ('message', 'message'), ('M.', 'M.'), ('Given', 'give'), ('hash', 'hash'), ('value', 'value'), ('h', 'h'), ('is', 'be'), ('infeasible', 'infeasible'), ('to', 'to'), ('find', 'find'), ('y', 'y'), ('such', 'such'), ('that', 'that'), ('(', '('), ('H(', 'h('), ('y', 'y'), (')', ')'), ('=', '='), ('h)', 'h)'), ('One', 'one'), ('-', '-'), ('way', 'way'), ('property', 'property')] 

 Dependency tags are: 
>> [(('It', 'easy'), 'expl'), (('is', 'easy'), 'cop'), (('easy', 'root'), 'root'), (('to', 'compute'), 'mark'), (('compute', 'easy'), 'csubj'), (('h=', 'H'), 'nummod'), (('H', 'compute'), 'obj'), (('(', 'M'), 'punct'), (('M', 'H'), 'nummod'), ((')', 'M'), 'punct'), (('for', 'message'), 'case'), (('any', 'message'), 'det'), (('message', 'compute'), 'obl'), (('M.', 'message'), 'flat'), (('Given', 'value'), 'amod'), (('hash', 'value'), 'compound'), (('value', 'h'), 'compound'), (('h', 'infeasible'), 'nsubj'), (('is', 'infeasible'), 'cop'), (('infeasible', 'easy'), 'conj'), (('to', 'find'), 'mark'), (('find', 'infeasible'), 'xcomp'), (('y', 'find'), 'obj'), (('such', 'that'), 'case'), (('that', 'y'), 'nmod'), (('(', 'y'), 'punct'), (('H(', 'y'), 'nummod'), (('y', 'that'), 'appos'), ((')', 'y'), 'punct'), (('=', 'property'), 'punct'), (('h)', 'property'), 'cc'), (('One', 'way'), 'nummod'), (('-', 'way'), 'punct'), (('way', 'property'), 'compound'), (('property', 'infeasible'), 'parataxis')]

 Named Entities are: 
>> [('One', 'CARDINAL')]

========================== Sentence 40 ===========================

 For given block x, it is computational infeasible to find         y ≠ x with H(y) = H(x) 

Tokens are: 
>> ['For', 'given', 'block', 'x', ',', 'it', 'is', 'computational', 'infeasible', 'to', 'find', 'y', '≠', 'x', 'with', 'H(y', ')', '=', 'H(', 'x', ')'] 

 UPOS tags are: 
>> [('For', 'ADP'), ('given', 'VERB'), ('block', 'NOUN'), ('x', 'NOUN'), (',', 'PUNCT'), ('it', 'PRON'), ('is', 'AUX'), ('computational', 'ADJ'), ('infeasible', 'ADJ'), ('to', 'PART'), ('find', 'VERB'), ('y', 'NOUN'), ('≠', 'NOUN'), ('x', 'NOUN'), ('with', 'ADP'), ('H(y', 'PROPN'), (')', 'PUNCT'), ('=', 'SYM'), ('H(', 'NUM'), ('x', 'NOUN'), (')', 'PUNCT')] 

 XPOS tags are: 
>> [('For', 'IN'), ('given', 'VBN'), ('block', 'NN'), ('x', 'NN'), (',', ','), ('it', 'PRP'), ('is', 'VBZ'), ('computational', 'JJ'), ('infeasible', 'JJ'), ('to', 'TO'), ('find', 'VB'), ('y', 'NN'), ('≠', 'NN'), ('x', 'NN'), ('with', 'IN'), ('H(y', 'NNP'), (')', '-RRB-'), ('=', 'SYM'), ('H(', 'CD'), ('x', 'NN'), (')', '-RRB-')] 

 Lemmas are: 
>> [('For', 'for'), ('given', 'give'), ('block', 'block'), ('x', 'x'), (',', ','), ('it', 'it'), ('is', 'be'), ('computational', 'computational'), ('infeasible', 'infeasible'), ('to', 'to'), ('find', 'find'), ('y', 'y'), ('≠', '≠'), ('x', 'x'), ('with', 'with'), ('H(y', 'H(y'), (')', ')'), ('=', '='), ('H(', 'h('), ('x', 'x'), (')', ')')] 

 Dependency tags are: 
>> [(('For', 'x'), 'case'), (('given', 'x'), 'amod'), (('block', 'x'), 'compound'), (('x', 'infeasible'), 'obl'), ((',', 'infeasible'), 'punct'), (('it', 'infeasible'), 'expl'), (('is', 'infeasible'), 'cop'), (('computational', 'infeasible'), 'advmod'), (('infeasible', 'root'), 'root'), (('to', 'find'), 'mark'), (('find', 'infeasible'), 'csubj'), (('y', 'find'), 'obj'), (('≠', 'x'), 'compound'), (('x', 'find'), 'obj'), (('with', 'H(y'), 'case'), (('H(y', 'x'), 'nmod'), ((')', 'H(y'), 'punct'), (('=', 'infeasible'), 'parataxis'), (('H(', 'x'), 'nummod'), (('x', '='), 'obj'), ((')', 'infeasible'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 41 ===========================

 Weak collision resistance 

Tokens are: 
>> ['Weak', 'collision', 'resistance'] 

 UPOS tags are: 
>> [('Weak', 'ADJ'), ('collision', 'NOUN'), ('resistance', 'NOUN')] 

 XPOS tags are: 
>> [('Weak', 'JJ'), ('collision', 'NN'), ('resistance', 'NN')] 

 Lemmas are: 
>> [('Weak', 'weak'), ('collision', 'collision'), ('resistance', 'resistance')] 

 Dependency tags are: 
>> [(('Weak', 'resistance'), 'amod'), (('collision', 'resistance'), 'compound'), (('resistance', 'root'), 'root')]

 Named Entities are: 
>> []

========================== Sentence 42 ===========================

 It is computationally infeasible to find messages m1  and m2 with H(m1) = H(m2) 

Tokens are: 
>> ['It', 'is', 'computationally', 'infeasible', 'to', 'find', 'messages', 'm', '1', 'and', 'm', '2', 'with', 'H(', 'm', '1', ')', '=', 'H', '(', 'm', '2', ')'] 

 UPOS tags are: 
>> [('It', 'PRON'), ('is', 'AUX'), ('computationally', 'ADV'), ('infeasible', 'ADJ'), ('to', 'PART'), ('find', 'VERB'), ('messages', 'NOUN'), ('m', 'NOUN'), ('1', 'NUM'), ('and', 'CCONJ'), ('m', 'NUM'), ('2', 'NUM'), ('with', 'ADP'), ('H(', 'NUM'), ('m', 'NOUN'), ('1', 'NUM'), (')', 'PUNCT'), ('=', 'SYM'), ('H', 'NOUN'), ('(', 'PUNCT'), ('m', 'NOUN'), ('2', 'NUM'), (')', 'PUNCT')] 

 XPOS tags are: 
>> [('It', 'PRP'), ('is', 'VBZ'), ('computationally', 'RB'), ('infeasible', 'JJ'), ('to', 'TO'), ('find', 'VB'), ('messages', 'NNS'), ('m', 'NN'), ('1', 'CD'), ('and', 'CC'), ('m', 'CD'), ('2', 'CD'), ('with', 'IN'), ('H(', 'CD'), ('m', 'NN'), ('1', 'CD'), (')', '-RRB-'), ('=', 'SYM'), ('H', 'NN'), ('(', '-LRB-'), ('m', 'NN'), ('2', 'CD'), (')', '-RRB-')] 

 Lemmas are: 
>> [('It', 'it'), ('is', 'be'), ('computationally', 'computationally'), ('infeasible', 'infeasible'), ('to', 'to'), ('find', 'find'), ('messages', 'message'), ('m', 'm'), ('1', '1'), ('and', 'and'), ('m', 'm'), ('2', '2'), ('with', 'with'), ('H(', 'h('), ('m', 'm'), ('1', '1'), (')', ')'), ('=', '='), ('H', 'h'), ('(', '('), ('m', 'm'), ('2', '2'), (')', ')')] 

 Dependency tags are: 
>> [(('It', 'infeasible'), 'expl'), (('is', 'infeasible'), 'cop'), (('computationally', 'infeasible'), 'advmod'), (('infeasible', 'root'), 'root'), (('to', 'find'), 'mark'), (('find', 'infeasible'), 'csubj'), (('messages', 'find'), 'obj'), (('m', 'find'), 'obj'), (('1', 'm'), 'nummod'), (('and', 'm'), 'cc'), (('m', 'm'), 'conj'), (('2', 'm'), 'nummod'), (('with', 'm'), 'case'), (('H(', 'm'), 'nummod'), (('m', 'find'), 'obl'), (('1', 'm'), 'nummod'), ((')', 'm'), 'punct'), (('=', 'find'), 'advcl'), (('H', '='), 'obj'), (('(', 'm'), 'punct'), (('m', '='), 'appos'), (('2', 'm'), 'nummod'), ((')', 'm'), 'punct')]

 Named Entities are: 
>> [('1  and m', 'QUANTITY'), ('2', 'CARDINAL')]

========================== Sentence 43 ===========================

 Strong collision resistance   Unit-5  Cryptographic Hash Functions                                 Darshan Institute of Engineering & Technology   ‹#›  Simple Hash Function 

Tokens are: 
>> ['Strong', 'collision', 'resistance', 'Unit-5', 'Cryptographic', 'Hash', 'Functions', 'Darshan', 'Institute', 'of', 'Engineering', '&', 'Technology', '‹#›', 'Simple', 'Hash', 'Function'] 

 UPOS tags are: 
>> [('Strong', 'ADJ'), ('collision', 'NOUN'), ('resistance', 'NOUN'), ('Unit-5', 'NOUN'), ('Cryptographic', 'ADJ'), ('Hash', 'NOUN'), ('Functions', 'NOUN'), ('Darshan', 'PROPN'), ('Institute', 'NOUN'), ('of', 'ADP'), ('Engineering', 'NOUN'), ('&', 'CCONJ'), ('Technology', 'NOUN'), ('‹#›', 'NOUN'), ('Simple', 'ADJ'), ('Hash', 'NOUN'), ('Function', 'NOUN')] 

 XPOS tags are: 
>> [('Strong', 'JJ'), ('collision', 'NN'), ('resistance', 'NN'), ('Unit-5', 'NN'), ('Cryptographic', 'JJ'), ('Hash', 'NN'), ('Functions', 'NNS'), ('Darshan', 'NNP'), ('Institute', 'NN'), ('of', 'IN'), ('Engineering', 'NN'), ('&', 'CC'), ('Technology', 'NN'), ('‹#›', 'NN'), ('Simple', 'JJ'), ('Hash', 'NN'), ('Function', 'NN')] 

 Lemmas are: 
>> [('Strong', 'strong'), ('collision', 'collision'), ('resistance', 'resistance'), ('Unit-5', 'unciot'), ('Cryptographic', 'Cryptographic'), ('Hash', 'hash'), ('Functions', 'function'), ('Darshan', 'Darshan'), ('Institute', 'Institute'), ('of', 'of'), ('Engineering', 'Engineering'), ('&', '&'), ('Technology', 'technology'), ('‹#›', '‹#›'), ('Simple', 'simple'), ('Hash', 'hash'), ('Function', 'function')] 

 Dependency tags are: 
>> [(('Strong', 'resistance'), 'amod'), (('collision', 'resistance'), 'compound'), (('resistance', 'root'), 'root'), (('Unit-5', 'Functions'), 'compound'), (('Cryptographic', 'Functions'), 'amod'), (('Hash', 'Functions'), 'compound'), (('Functions', 'resistance'), 'list'), (('Darshan', 'Institute'), 'compound'), (('Institute', 'resistance'), 'list'), (('of', 'Function'), 'case'), (('Engineering', '‹#›'), 'compound'), (('&', 'Technology'), 'cc'), (('Technology', 'Engineering'), 'conj'), (('‹#›', 'Function'), 'compound'), (('Simple', 'Function'), 'amod'), (('Hash', 'Function'), 'compound'), (('Function', 'resistance'), 'conj')]

 Named Entities are: 
>> [('Unit-5  Cryptographic Hash Functions                                 Darshan Institute of Engineering & Technology', 'ORG')]

========================== Sentence 44 ===========================

 The input (message, file, etc.) is viewed as a sequence of n-bit blocks. 

Tokens are: 
>> ['The', 'input', '(', 'message', ',', 'file', ',', 'etc.', ')', 'is', 'viewed', 'as', 'a', 'sequence', 'of', 'n-bit', 'blocks', '.'] 

 UPOS tags are: 
>> [('The', 'DET'), ('input', 'NOUN'), ('(', 'PUNCT'), ('message', 'NOUN'), (',', 'PUNCT'), ('file', 'NOUN'), (',', 'PUNCT'), ('etc.', 'X'), (')', 'PUNCT'), ('is', 'AUX'), ('viewed', 'VERB'), ('as', 'ADP'), ('a', 'DET'), ('sequence', 'NOUN'), ('of', 'ADP'), ('n-bit', 'NOUN'), ('blocks', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('The', 'DT'), ('input', 'NN'), ('(', '-LRB-'), ('message', 'NN'), (',', ','), ('file', 'NN'), (',', ','), ('etc.', 'FW'), (')', '-RRB-'), ('is', 'VBZ'), ('viewed', 'VBN'), ('as', 'IN'), ('a', 'DT'), ('sequence', 'NN'), ('of', 'IN'), ('n-bit', 'NN'), ('blocks', 'NNS'), ('.', '.')] 

 Lemmas are: 
>> [('The', 'the'), ('input', 'input'), ('(', '('), ('message', 'message'), (',', ','), ('file', 'file'), (',', ','), ('etc.', 'etc.'), (')', ')'), ('is', 'be'), ('viewed', 'view'), ('as', 'as'), ('a', 'a'), ('sequence', 'sequence'), ('of', 'of'), ('n-bit', 'n-bit'), ('blocks', 'block'), ('.', '.')] 

 Dependency tags are: 
>> [(('The', 'input'), 'det'), (('input', 'viewed'), 'nsubj:pass'), (('(', 'message'), 'punct'), (('message', 'input'), 'appos'), ((',', 'file'), 'punct'), (('file', 'message'), 'conj'), ((',', 'etc.'), 'punct'), (('etc.', 'message'), 'conj'), ((')', 'message'), 'punct'), (('is', 'viewed'), 'aux:pass'), (('viewed', 'root'), 'root'), (('as', 'sequence'), 'case'), (('a', 'sequence'), 'det'), (('sequence', 'viewed'), 'obl'), (('of', 'blocks'), 'case'), (('n-bit', 'blocks'), 'compound'), (('blocks', 'sequence'), 'nmod'), (('.', 'viewed'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 45 ===========================

 The input is processed one block at a time in an iterative fashion to produce an n-bit hash function. 

Tokens are: 
>> ['The', 'input', 'is', 'processed', 'one', 'block', 'at', 'a', 'time', 'in', 'an', 'iterative', 'fashion', 'to', 'produce', 'an', 'n-bit', 'hash', 'function', '.'] 

 UPOS tags are: 
>> [('The', 'DET'), ('input', 'NOUN'), ('is', 'AUX'), ('processed', 'VERB'), ('one', 'NUM'), ('block', 'NOUN'), ('at', 'ADP'), ('a', 'DET'), ('time', 'NOUN'), ('in', 'ADP'), ('an', 'DET'), ('iterative', 'ADJ'), ('fashion', 'NOUN'), ('to', 'PART'), ('produce', 'VERB'), ('an', 'DET'), ('n-bit', 'ADJ'), ('hash', 'NOUN'), ('function', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('The', 'DT'), ('input', 'NN'), ('is', 'VBZ'), ('processed', 'VBN'), ('one', 'CD'), ('block', 'NN'), ('at', 'IN'), ('a', 'DT'), ('time', 'NN'), ('in', 'IN'), ('an', 'DT'), ('iterative', 'JJ'), ('fashion', 'NN'), ('to', 'TO'), ('produce', 'VB'), ('an', 'DT'), ('n-bit', 'JJ'), ('hash', 'NN'), ('function', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('The', 'the'), ('input', 'input'), ('is', 'be'), ('processed', 'process'), ('one', 'one'), ('block', 'block'), ('at', 'at'), ('a', 'a'), ('time', 'time'), ('in', 'in'), ('an', 'a'), ('iterative', 'iterative'), ('fashion', 'fashion'), ('to', 'to'), ('produce', 'produce'), ('an', 'a'), ('n-bit', 'n-bit'), ('hash', 'hash'), ('function', 'function'), ('.', '.')] 

 Dependency tags are: 
>> [(('The', 'input'), 'det'), (('input', 'processed'), 'nsubj:pass'), (('is', 'processed'), 'aux:pass'), (('processed', 'root'), 'root'), (('one', 'block'), 'nummod'), (('block', 'processed'), 'obl:tmod'), (('at', 'time'), 'case'), (('a', 'time'), 'det'), (('time', 'processed'), 'obl'), (('in', 'fashion'), 'case'), (('an', 'fashion'), 'det'), (('iterative', 'fashion'), 'amod'), (('fashion', 'processed'), 'obl'), (('to', 'produce'), 'mark'), (('produce', 'processed'), 'advcl'), (('an', 'function'), 'det'), (('n-bit', 'function'), 'amod'), (('hash', 'function'), 'compound'), (('function', 'produce'), 'obj'), (('.', 'processed'), 'punct')]

 Named Entities are: 
>> [('one', 'CARDINAL')]

========================== Sentence 46 ===========================

 One of the simplest hash functions is the bit-by-bit exclusive-OR (XOR) of every block. 

Tokens are: 
>> ['One', 'of', 'the', 'simplest', 'hash', 'functions', 'is', 'the', 'bit-by', '-', 'bit', 'exclusive', '-', 'OR', '(', 'XOR', ')', 'of', 'every', 'block', '.'] 

 UPOS tags are: 
>> [('One', 'NUM'), ('of', 'ADP'), ('the', 'DET'), ('simplest', 'ADJ'), ('hash', 'NOUN'), ('functions', 'NOUN'), ('is', 'AUX'), ('the', 'DET'), ('bit-by', 'ADJ'), ('-', 'PUNCT'), ('bit', 'NOUN'), ('exclusive', 'ADJ'), ('-', 'PUNCT'), ('OR', 'CCONJ'), ('(', 'PUNCT'), ('XOR', 'NOUN'), (')', 'PUNCT'), ('of', 'ADP'), ('every', 'DET'), ('block', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('One', 'CD'), ('of', 'IN'), ('the', 'DT'), ('simplest', 'JJS'), ('hash', 'NN'), ('functions', 'NNS'), ('is', 'VBZ'), ('the', 'DT'), ('bit-by', 'JJ'), ('-', 'HYPH'), ('bit', 'NN'), ('exclusive', 'JJ'), ('-', 'HYPH'), ('OR', 'CC'), ('(', '-LRB-'), ('XOR', 'NN'), (')', '-RRB-'), ('of', 'IN'), ('every', 'DT'), ('block', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('One', 'one'), ('of', 'of'), ('the', 'the'), ('simplest', 'simple'), ('hash', 'hash'), ('functions', 'function'), ('is', 'be'), ('the', 'the'), ('bit-by', 'bit-by'), ('-', '-'), ('bit', 'bit'), ('exclusive', 'exclusive'), ('-', '-'), ('OR', 'or'), ('(', '('), ('XOR', 'xor'), (')', ')'), ('of', 'of'), ('every', 'every'), ('block', 'block'), ('.', '.')] 

 Dependency tags are: 
>> [(('One', 'exclusive'), 'nsubj'), (('of', 'functions'), 'case'), (('the', 'functions'), 'det'), (('simplest', 'functions'), 'amod'), (('hash', 'functions'), 'compound'), (('functions', 'One'), 'nmod'), (('is', 'exclusive'), 'cop'), (('the', 'exclusive'), 'det'), (('bit-by', 'bit'), 'amod'), (('-', 'bit'), 'punct'), (('bit', 'exclusive'), 'obl:npmod'), (('exclusive', 'root'), 'root'), (('-', 'exclusive'), 'punct'), (('OR', 'XOR'), 'cc'), (('(', 'XOR'), 'punct'), (('XOR', 'exclusive'), 'appos'), ((')', 'XOR'), 'punct'), (('of', 'block'), 'case'), (('every', 'block'), 'det'), (('block', 'exclusive'), 'obl'), (('.', 'exclusive'), 'punct')]

 Named Entities are: 
>> [('One', 'CARDINAL')]

========================== Sentence 47 ===========================

 Where,  		           = ith bit of the hash code 1 ≤ i ≤ n 		          m = number of n-bit blocks in the input 		          = ith bit in jth block   		  Unit-5  Cryptographic Hash Functions                                 Darshan Institute of Engineering & Technology   ‹#›  SHA -  Secure Hash Algorithm 		SHA - 1	SHA - 224	SHA - 256	SHA - 384	SHA - 512  	Message Digest Size	160	224	256	384	512  	Message Size	< 264	< 264	< 264	< 2128	< 2128  	Block Size	512	512	512	1024	1024  	Word Size	32	32	32	64	64  	Number of Steps	80	64	64	80	80   Unit-5  Cryptographic Hash Functions                                 Darshan Institute of Engineering & Technology   ‹#›  SHA - 512 

Tokens are: 
>> ['Where', ',', '=', 'ith', 'bit', 'of', 'the', 'hash', 'code', '1', '≤', 'i', '≤', 'n', 'm', '=', 'number', 'of', 'n-bit', 'blocks', 'in', 'the', 'input', '=', 'ith', 'bit', 'in', 'jth', 'block', 'Unit', '-5', 'Cryptographic', 'Hash', 'Functions', 'Darshan', 'Institute', 'of', 'Engineering', '&', 'Technology', '‹#›', 'SHA', '-', 'Secure', 'Hash', 'Algorithm', 'SHA', '-', '1', 'SHA', '-', '224', 'SHA', '-', '256', 'SHA', '-', '384', 'SHA', '-', '512', 'Message', 'Digest', 'Size', '160', '224', '256', '384', '512', 'Message', 'Size', '<', '264', '<', '264', '<', '264', '<', '2128', '<', '2128', 'Block', 'Size', '512', '512', '512', '1024', '1024', 'Word', 'Size', '32', '32', '32', '64', '64', 'Number', 'of', 'Steps', '80', '64', '64', '80', '80', 'Unit', '-5', 'Cryptographic', 'Hash', 'Functions', 'Darshan', 'Institute', 'of', 'Engineering', '&', 'Technology', '‹#›', 'SHA', '-', '512'] 

 UPOS tags are: 
>> [('Where', 'ADV'), (',', 'PUNCT'), ('=', 'PUNCT'), ('ith', 'ADJ'), ('bit', 'NOUN'), ('of', 'ADP'), ('the', 'DET'), ('hash', 'NOUN'), ('code', 'NOUN'), ('1', 'NUM'), ('≤', 'NOUN'), ('i', 'PRON'), ('≤', 'AUX'), ('n', 'NOUN'), ('m', 'NUM'), ('=', 'PUNCT'), ('number', 'NOUN'), ('of', 'ADP'), ('n-bit', 'NOUN'), ('blocks', 'NOUN'), ('in', 'ADP'), ('the', 'DET'), ('input', 'NOUN'), ('=', 'PUNCT'), ('ith', 'NOUN'), ('bit', 'NOUN'), ('in', 'ADP'), ('jth', 'NOUN'), ('block', 'NOUN'), ('Unit', 'NOUN'), ('-5', 'NUM'), ('Cryptographic', 'ADJ'), ('Hash', 'NOUN'), ('Functions', 'NOUN'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('of', 'ADP'), ('Engineering', 'NOUN'), ('&', 'CCONJ'), ('Technology', 'NOUN'), ('‹#›', 'NOUN'), ('SHA', 'PROPN'), ('-', 'PUNCT'), ('Secure', 'ADJ'), ('Hash', 'NOUN'), ('Algorithm', 'NOUN'), ('SHA', 'NOUN'), ('-', 'PUNCT'), ('1', 'NUM'), ('SHA', 'NOUN'), ('-', 'PUNCT'), ('224', 'NUM'), ('SHA', 'NOUN'), ('-', 'PUNCT'), ('256', 'NUM'), ('SHA', 'NOUN'), ('-', 'PUNCT'), ('384', 'NUM'), ('SHA', 'NOUN'), ('-', 'SYM'), ('512', 'NUM'), ('Message', 'NOUN'), ('Digest', 'NOUN'), ('Size', 'NOUN'), ('160', 'NUM'), ('224', 'NUM'), ('256', 'NUM'), ('384', 'NUM'), ('512', 'NUM'), ('Message', 'NOUN'), ('Size', 'NOUN'), ('<', 'PUNCT'), ('264', 'NUM'), ('<', 'PUNCT'), ('264', 'NUM'), ('<', 'PUNCT'), ('264', 'NUM'), ('<', 'PUNCT'), ('2128', 'NUM'), ('<', 'PUNCT'), ('2128', 'NUM'), ('Block', 'NOUN'), ('Size', 'NOUN'), ('512', 'NUM'), ('512', 'NUM'), ('512', 'NUM'), ('1024', 'NUM'), ('1024', 'NUM'), ('Word', 'NOUN'), ('Size', 'NOUN'), ('32', 'NUM'), ('32', 'NUM'), ('32', 'NUM'), ('64', 'NUM'), ('64', 'NUM'), ('Number', 'NOUN'), ('of', 'ADP'), ('Steps', 'NOUN'), ('80', 'NUM'), ('64', 'NUM'), ('64', 'NUM'), ('80', 'NUM'), ('80', 'NUM'), ('Unit', 'NOUN'), ('-5', 'NUM'), ('Cryptographic', 'ADJ'), ('Hash', 'NOUN'), ('Functions', 'NOUN'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('of', 'ADP'), ('Engineering', 'PROPN'), ('&', 'CCONJ'), ('Technology', 'NOUN'), ('‹#›', 'NOUN'), ('SHA', 'PROPN'), ('-', 'SYM'), ('512', 'NUM')] 

 XPOS tags are: 
>> [('Where', 'WRB'), (',', ','), ('=', ','), ('ith', 'JJ'), ('bit', 'NN'), ('of', 'IN'), ('the', 'DT'), ('hash', 'NN'), ('code', 'NN'), ('1', 'CD'), ('≤', 'NNS'), ('i', 'PRP'), ('≤', 'VBP'), ('n', 'NN'), ('m', 'CD'), ('=', ','), ('number', 'NN'), ('of', 'IN'), ('n-bit', 'NN'), ('blocks', 'NNS'), ('in', 'IN'), ('the', 'DT'), ('input', 'NN'), ('=', ','), ('ith', 'NN'), ('bit', 'NN'), ('in', 'IN'), ('jth', 'NN'), ('block', 'NN'), ('Unit', 'NN'), ('-5', 'CD'), ('Cryptographic', 'JJ'), ('Hash', 'NN'), ('Functions', 'NNS'), ('Darshan', 'NNP'), ('Institute', 'NNP'), ('of', 'IN'), ('Engineering', 'NN'), ('&', 'CC'), ('Technology', 'NN'), ('‹#›', 'NN'), ('SHA', 'NNP'), ('-', ','), ('Secure', 'JJ'), ('Hash', 'NN'), ('Algorithm', 'NN'), ('SHA', 'NN'), ('-', ','), ('1', 'CD'), ('SHA', 'NN'), ('-', 'HYPH'), ('224', 'CD'), ('SHA', 'NN'), ('-', 'HYPH'), ('256', 'CD'), ('SHA', 'NN'), ('-', 'HYPH'), ('384', 'CD'), ('SHA', 'NN'), ('-', 'SYM'), ('512', 'CD'), ('Message', 'NN'), ('Digest', 'NN'), ('Size', 'NN'), ('160', 'CD'), ('224', 'CD'), ('256', 'CD'), ('384', 'CD'), ('512', 'CD'), ('Message', 'NN'), ('Size', 'NN'), ('<', '-LRB-'), ('264', 'CD'), ('<', '-LRB-'), ('264', 'CD'), ('<', '-LRB-'), ('264', 'CD'), ('<', '-LRB-'), ('2128', 'CD'), ('<', '-LRB-'), ('2128', 'CD'), ('Block', 'NN'), ('Size', 'NN'), ('512', 'CD'), ('512', 'CD'), ('512', 'CD'), ('1024', 'CD'), ('1024', 'CD'), ('Word', 'NN'), ('Size', 'NN'), ('32', 'CD'), ('32', 'CD'), ('32', 'CD'), ('64', 'CD'), ('64', 'CD'), ('Number', 'NN'), ('of', 'IN'), ('Steps', 'NNS'), ('80', 'CD'), ('64', 'CD'), ('64', 'CD'), ('80', 'CD'), ('80', 'CD'), ('Unit', 'NN'), ('-5', 'CD'), ('Cryptographic', 'JJ'), ('Hash', 'NN'), ('Functions', 'NNS'), ('Darshan', 'NNP'), ('Institute', 'NNP'), ('of', 'IN'), ('Engineering', 'NNP'), ('&', 'CC'), ('Technology', 'NN'), ('‹#›', 'NN'), ('SHA', 'NNP'), ('-', 'SYM'), ('512', 'CD')] 

 Lemmas are: 
>> [('Where', 'where'), (',', ','), ('=', '='), ('ith', 'ith'), ('bit', 'bit'), ('of', 'of'), ('the', 'the'), ('hash', 'hash'), ('code', 'code'), ('1', '1'), ('≤', '≤'), ('i', 'I'), ('≤', 'be'), ('n', 'n'), ('m', 'm'), ('=', '='), ('number', 'number'), ('of', 'of'), ('n-bit', 'n-bit'), ('blocks', 'block'), ('in', 'in'), ('the', 'the'), ('input', 'input'), ('=', '='), ('ith', 'ith'), ('bit', 'bit'), ('in', 'in'), ('jth', 'jth'), ('block', 'block'), ('Unit', 'unit'), ('-5', '-5'), ('Cryptographic', 'Cryptographic'), ('Hash', 'hash'), ('Functions', 'function'), ('Darshan', 'Darshan'), ('Institute', 'Institute'), ('of', 'of'), ('Engineering', 'Engineering'), ('&', '&'), ('Technology', 'technology'), ('‹#›', '‹#›'), ('SHA', 'SHA'), ('-', '-'), ('Secure', 'secure'), ('Hash', 'hash'), ('Algorithm', 'algorithm'), ('SHA', 'sha'), ('-', '-'), ('1', '1'), ('SHA', 'sha'), ('-', '-'), ('224', '224'), ('SHA', 'sha'), ('-', '-'), ('256', '256'), ('SHA', 'sha'), ('-', '-'), ('384', '384'), ('SHA', 'sha'), ('-', '-'), ('512', '512'), ('Message', 'message'), ('Digest', 'digest'), ('Size', 'size'), ('160', '160'), ('224', '224'), ('256', '256'), ('384', '384'), ('512', '512'), ('Message', 'message'), ('Size', 'size'), ('<', '<'), ('264', '264'), ('<', '<'), ('264', '264'), ('<', '<'), ('264', '264'), ('<', '<'), ('2128', '2128'), ('<', '<'), ('2128', '2128'), ('Block', 'block'), ('Size', 'size'), ('512', '512'), ('512', '512'), ('512', '512'), ('1024', '1024'), ('1024', '1024'), ('Word', 'Word'), ('Size', 'size'), ('32', '32'), ('32', '32'), ('32', '32'), ('64', '64'), ('64', '64'), ('Number', 'number'), ('of', 'of'), ('Steps', 'step'), ('80', '80'), ('64', '64'), ('64', '64'), ('80', '80'), ('80', '80'), ('Unit', 'unit'), ('-5', '-5'), ('Cryptographic', 'Cryptographic'), ('Hash', 'hash'), ('Functions', 'function'), ('Darshan', 'Darshan'), ('Institute', 'Institute'), ('of', 'of'), ('Engineering', 'Engineering'), ('&', '&'), ('Technology', 'technology'), ('‹#›', '‹#›'), ('SHA', 'SHA'), ('-', '-'), ('512', '512')] 

 Dependency tags are: 
>> [(('Where', 'm'), 'advmod'), ((',', 'Where'), 'punct'), (('=', 'bit'), 'punct'), (('ith', 'bit'), 'amod'), (('bit', 'm'), 'parataxis'), (('of', 'code'), 'case'), (('the', 'code'), 'det'), (('hash', 'code'), 'compound'), (('code', 'bit'), 'nmod'), (('1', '≤'), 'nummod'), (('≤', 'm'), 'obl'), (('i', 'm'), 'nsubj'), (('≤', 'm'), 'cop'), (('n', 'm'), 'compound'), (('m', 'root'), 'root'), (('=', 'm'), 'punct'), (('number', 'm'), 'parataxis'), (('of', 'blocks'), 'case'), (('n-bit', 'blocks'), 'compound'), (('blocks', 'number'), 'nmod'), (('in', 'input'), 'case'), (('the', 'input'), 'det'), (('input', 'number'), 'nmod'), (('=', 'bit'), 'punct'), (('ith', 'bit'), 'det'), (('bit', 'number'), 'conj'), (('in', 'Unit'), 'case'), (('jth', 'block'), 'compound'), (('block', 'Unit'), 'compound'), (('Unit', 'bit'), 'nmod'), (('-5', 'Functions'), 'nummod'), (('Cryptographic', 'Functions'), 'amod'), (('Hash', 'Functions'), 'compound'), (('Functions', 'Unit'), 'appos'), (('Darshan', 'Institute'), 'compound'), (('Institute', 'Unit'), 'conj'), (('of', 'Engineering'), 'case'), (('Engineering', 'Institute'), 'nmod'), (('&', 'Technology'), 'cc'), (('Technology', 'Engineering'), 'conj'), (('‹#›', 'SHA'), 'compound'), (('SHA', 'Institute'), 'appos'), (('-', 'SHA'), 'punct'), (('Secure', 'Algorithm'), 'amod'), (('Hash', 'Algorithm'), 'compound'), (('Algorithm', 'SHA'), 'appos'), (('SHA', 'Algorithm'), 'appos'), (('-', 'SHA'), 'punct'), (('1', 'SHA'), 'nummod'), (('SHA', 'SHA'), 'compound'), (('-', 'SHA'), 'punct'), (('224', 'SHA'), 'nummod'), (('SHA', 'SHA'), 'compound'), (('-', 'SHA'), 'punct'), (('256', 'SHA'), 'nummod'), (('SHA', 'SHA'), 'compound'), (('-', 'SHA'), 'punct'), (('384', 'SHA'), 'nummod'), (('SHA', 'Size'), 'compound'), (('-', '512'), 'case'), (('512', 'SHA'), 'nummod'), (('Message', 'Size'), 'compound'), (('Digest', 'Size'), 'compound'), (('Size', 'SHA'), 'appos'), (('160', 'Size'), 'nummod'), (('224', '512'), 'compound'), (('256', '512'), 'compound'), (('384', '512'), 'compound'), (('512', 'Size'), 'nummod'), (('Message', 'Size'), 'compound'), (('Size', 'Size'), 'appos'), (('<', '264'), 'punct'), (('264', '264'), 'compound'), (('<', '264'), 'punct'), (('264', 'Size'), 'nummod'), (('<', 'Size'), 'punct'), (('264', 'Size'), 'nummod'), (('<', 'Size'), 'punct'), (('2128', 'Size'), 'nummod'), (('<', 'Block'), 'punct'), (('2128', 'Block'), 'nummod'), (('Block', 'Size'), 'compound'), (('Size', 'Size'), 'appos'), (('512', 'Size'), 'nummod'), (('512', '1024'), 'compound'), (('512', '1024'), 'compound'), (('1024', '1024'), 'compound'), (('1024', 'Word'), 'nummod'), (('Word', 'Size'), 'appos'), (('Size', 'Word'), 'appos'), (('32', '64'), 'compound'), (('32', '64'), 'compound'), (('32', '64'), 'compound'), (('64', '64'), 'compound'), (('64', 'Number'), 'nummod'), (('Number', 'Word'), 'appos'), (('of', 'Steps'), 'case'), (('Steps', 'Number'), 'nmod'), (('80', 'Unit'), 'nummod'), (('64', 'Unit'), 'nummod'), (('64', 'Unit'), 'nummod'), (('80', 'Unit'), 'nummod'), (('80', 'Unit'), 'nummod'), (('Unit', 'Number'), 'appos'), (('-5', 'Functions'), 'nummod'), (('Cryptographic', 'Functions'), 'amod'), (('Hash', 'Functions'), 'compound'), (('Functions', 'Institute'), 'compound'), (('Darshan', 'Institute'), 'compound'), (('Institute', 'Unit'), 'appos'), (('of', 'SHA'), 'case'), (('Engineering', 'SHA'), 'compound'), (('&', 'Technology'), 'cc'), (('Technology', 'Engineering'), 'conj'), (('‹#›', 'SHA'), 'compound'), (('SHA', 'Institute'), 'nmod'), (('-', '512'), 'case'), (('512', 'SHA'), 'nmod')]

 Named Entities are: 
>> [('1024', 'CARDINAL'), ('32', 'CARDINAL'), ('32', 'CARDINAL'), ('80', 'CARDINAL'), ('80', 'CARDINAL')]

========================== Sentence 48 ===========================

 The algorithm takes as input a message with a maximum length of less than 2128 bits and produces as output a 512-bit message digest. 

Tokens are: 
>> ['The', 'algorithm', 'takes', 'as', 'input', 'a', 'message', 'with', 'a', 'maximum', 'length', 'of', 'less', 'than', '2128', 'bits', 'and', 'produces', 'as', 'output', 'a', '512', '-', 'bit', 'message', 'digest', '.'] 

 UPOS tags are: 
>> [('The', 'DET'), ('algorithm', 'NOUN'), ('takes', 'VERB'), ('as', 'ADP'), ('input', 'VERB'), ('a', 'DET'), ('message', 'NOUN'), ('with', 'ADP'), ('a', 'DET'), ('maximum', 'ADJ'), ('length', 'NOUN'), ('of', 'ADP'), ('less', 'ADJ'), ('than', 'ADP'), ('2128', 'NUM'), ('bits', 'NOUN'), ('and', 'CCONJ'), ('produces', 'VERB'), ('as', 'ADP'), ('output', 'NOUN'), ('a', 'DET'), ('512', 'NUM'), ('-', 'PUNCT'), ('bit', 'NOUN'), ('message', 'NOUN'), ('digest', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('The', 'DT'), ('algorithm', 'NN'), ('takes', 'VBZ'), ('as', 'IN'), ('input', 'VB'), ('a', 'DT'), ('message', 'NN'), ('with', 'IN'), ('a', 'DT'), ('maximum', 'JJ'), ('length', 'NN'), ('of', 'IN'), ('less', 'JJR'), ('than', 'IN'), ('2128', 'CD'), ('bits', 'NNS'), ('and', 'CC'), ('produces', 'VBZ'), ('as', 'IN'), ('output', 'NN'), ('a', 'DT'), ('512', 'CD'), ('-', 'HYPH'), ('bit', 'NN'), ('message', 'NN'), ('digest', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('The', 'the'), ('algorithm', 'algorithm'), ('takes', 'take'), ('as', 'as'), ('input', 'input'), ('a', 'a'), ('message', 'message'), ('with', 'with'), ('a', 'a'), ('maximum', 'maximum'), ('length', 'length'), ('of', 'of'), ('less', 'less'), ('than', 'than'), ('2128', '2128'), ('bits', 'bit'), ('and', 'and'), ('produces', 'produce'), ('as', 'as'), ('output', 'output'), ('a', 'a'), ('512', '512'), ('-', '-'), ('bit', 'bit'), ('message', 'message'), ('digest', 'digest'), ('.', '.')] 

 Dependency tags are: 
>> [(('The', 'algorithm'), 'det'), (('algorithm', 'takes'), 'nsubj'), (('takes', 'root'), 'root'), (('as', 'input'), 'mark'), (('input', 'takes'), 'advcl'), (('a', 'message'), 'det'), (('message', 'input'), 'obj'), (('with', 'length'), 'case'), (('a', 'length'), 'det'), (('maximum', 'length'), 'amod'), (('length', 'message'), 'nmod'), (('of', 'bits'), 'case'), (('less', '2128'), 'advmod'), (('than', 'less'), 'fixed'), (('2128', 'bits'), 'nummod'), (('bits', 'length'), 'nmod'), (('and', 'produces'), 'cc'), (('produces', 'input'), 'conj'), (('as', 'output'), 'case'), (('output', 'produces'), 'obl'), (('a', 'digest'), 'det'), (('512', 'bit'), 'nummod'), (('-', 'bit'), 'punct'), (('bit', 'digest'), 'compound'), (('message', 'digest'), 'compound'), (('digest', 'produces'), 'obj'), (('.', 'takes'), 'punct')]

 Named Entities are: 
>> [('less than 2128', 'CARDINAL'), ('512', 'CARDINAL')]

========================== Sentence 49 ===========================

 The input is processed in 1024-bit blocks. 

Tokens are: 
>> ['The', 'input', 'is', 'processed', 'in', '1024', '-', 'bit', 'blocks', '.'] 

 UPOS tags are: 
>> [('The', 'DET'), ('input', 'NOUN'), ('is', 'AUX'), ('processed', 'VERB'), ('in', 'ADP'), ('1024', 'NUM'), ('-', 'PUNCT'), ('bit', 'NOUN'), ('blocks', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('The', 'DT'), ('input', 'NN'), ('is', 'VBZ'), ('processed', 'VBN'), ('in', 'IN'), ('1024', 'CD'), ('-', 'HYPH'), ('bit', 'NN'), ('blocks', 'NNS'), ('.', '.')] 

 Lemmas are: 
>> [('The', 'the'), ('input', 'input'), ('is', 'be'), ('processed', 'process'), ('in', 'in'), ('1024', '1024'), ('-', '-'), ('bit', 'bit'), ('blocks', 'block'), ('.', '.')] 

 Dependency tags are: 
>> [(('The', 'input'), 'det'), (('input', 'processed'), 'nsubj:pass'), (('is', 'processed'), 'aux:pass'), (('processed', 'root'), 'root'), (('in', 'blocks'), 'case'), (('1024', 'bit'), 'nummod'), (('-', 'bit'), 'punct'), (('bit', 'blocks'), 'compound'), (('blocks', 'processed'), 'obl'), (('.', 'processed'), 'punct')]

 Named Entities are: 
>> [('1024-bit', 'QUANTITY')]

========================== Sentence 50 ===========================

 Unit-5  Cryptographic Hash Functions                                 Darshan Institute of Engineering & Technology   ‹#›   Message Digest Generation using SHA -512    Message (L bit) 10000…0 L M1 (1024 bits) M2 (1024 bits) MN (1024 bits) F + H1 (512 bits) IV=H0 F + H2 (512 bits) F + HN (512 bits) 

Tokens are: 
>> ['Unit', '-5', 'Cryptographic', 'Hash', 'Functions', 'Darshan', 'Institute', 'of', 'Engineering', '&', 'Technology', '‹#›', 'Message', 'Digest', 'Generation', 'using', 'SHA', '-', '512', 'Message', '(', 'L', 'bit', ')', '10000…0', 'L', 'M1', '(', '1024', 'bits', ')', 'M2', '(', '1024', 'bits', ')', 'MN', '(', '1024', 'bits', ')', 'F', '+', 'H1', '(', '512', 'bits', ')', 'IV=', 'H0', 'F', '+', 'H2', '(', '512', 'bits', ')', 'F', '+', 'HN', '(', '512', 'bits', ')'] 

 UPOS tags are: 
>> [('Unit', 'NOUN'), ('-5', 'NUM'), ('Cryptographic', 'ADJ'), ('Hash', 'NOUN'), ('Functions', 'NOUN'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('of', 'ADP'), ('Engineering', 'NOUN'), ('&', 'CCONJ'), ('Technology', 'NOUN'), ('‹#›', 'NOUN'), ('Message', 'NOUN'), ('Digest', 'NOUN'), ('Generation', 'NOUN'), ('using', 'VERB'), ('SHA', 'NOUN'), ('-', 'PUNCT'), ('512', 'NUM'), ('Message', 'NOUN'), ('(', 'PUNCT'), ('L', 'NOUN'), ('bit', 'NOUN'), (')', 'PUNCT'), ('10000…0', 'NUM'), ('L', 'NOUN'), ('M1', 'NOUN'), ('(', 'PUNCT'), ('1024', 'NUM'), ('bits', 'NOUN'), (')', 'PUNCT'), ('M2', 'NOUN'), ('(', 'PUNCT'), ('1024', 'NUM'), ('bits', 'NOUN'), (')', 'PUNCT'), ('MN', 'NOUN'), ('(', 'PUNCT'), ('1024', 'NUM'), ('bits', 'NOUN'), (')', 'PUNCT'), ('F', 'NOUN'), ('+', 'SYM'), ('H1', 'NOUN'), ('(', 'PUNCT'), ('512', 'NUM'), ('bits', 'NOUN'), (')', 'PUNCT'), ('IV=', 'NUM'), ('H0', 'NOUN'), ('F', 'NOUN'), ('+', 'SYM'), ('H2', 'NOUN'), ('(', 'PUNCT'), ('512', 'NUM'), ('bits', 'NOUN'), (')', 'PUNCT'), ('F', 'NOUN'), ('+', 'SYM'), ('HN', 'NOUN'), ('(', 'PUNCT'), ('512', 'NUM'), ('bits', 'NOUN'), (')', 'PUNCT')] 

 XPOS tags are: 
>> [('Unit', 'NN'), ('-5', 'CD'), ('Cryptographic', 'JJ'), ('Hash', 'NN'), ('Functions', 'NNS'), ('Darshan', 'NNP'), ('Institute', 'NNP'), ('of', 'IN'), ('Engineering', 'NN'), ('&', 'CC'), ('Technology', 'NN'), ('‹#›', 'NN'), ('Message', 'NN'), ('Digest', 'NN'), ('Generation', 'NN'), ('using', 'VBG'), ('SHA', 'NN'), ('-', ','), ('512', 'CD'), ('Message', 'NN'), ('(', '-LRB-'), ('L', 'NN'), ('bit', 'NN'), (')', '-RRB-'), ('10000…0', 'CD'), ('L', 'NN'), ('M1', 'NN'), ('(', '-LRB-'), ('1024', 'CD'), ('bits', 'NNS'), (')', '-RRB-'), ('M2', 'NN'), ('(', '-LRB-'), ('1024', 'CD'), ('bits', 'NNS'), (')', '-RRB-'), ('MN', 'NN'), ('(', '-LRB-'), ('1024', 'CD'), ('bits', 'NNS'), (')', '-RRB-'), ('F', 'NN'), ('+', 'SYM'), ('H1', 'NN'), ('(', '-LRB-'), ('512', 'CD'), ('bits', 'NNS'), (')', '-RRB-'), ('IV=', 'CD'), ('H0', 'NN'), ('F', 'NN'), ('+', 'SYM'), ('H2', 'NN'), ('(', '-LRB-'), ('512', 'CD'), ('bits', 'NNS'), (')', '-RRB-'), ('F', 'NN'), ('+', 'SYM'), ('HN', 'NN'), ('(', '-LRB-'), ('512', 'CD'), ('bits', 'NNS'), (')', '-RRB-')] 

 Lemmas are: 
>> [('Unit', 'unit'), ('-5', '-5'), ('Cryptographic', 'Cryptographic'), ('Hash', 'hash'), ('Functions', 'function'), ('Darshan', 'Darshan'), ('Institute', 'Institute'), ('of', 'of'), ('Engineering', 'Engineering'), ('&', '&'), ('Technology', 'technology'), ('‹#›', '‹#›'), ('Message', 'message'), ('Digest', 'digest'), ('Generation', 'generation'), ('using', 'use'), ('SHA', 'sha'), ('-', '-'), ('512', '512'), ('Message', 'message'), ('(', '('), ('L', 'L'), ('bit', 'bit'), (')', ')'), ('10000…0', '10000…0'), ('L', 'L'), ('M1', 'M1'), ('(', '('), ('1024', '1024'), ('bits', 'bit'), (')', ')'), ('M2', 'M2'), ('(', '('), ('1024', '1024'), ('bits', 'bit'), (')', ')'), ('MN', 'mn'), ('(', '('), ('1024', '1024'), ('bits', 'bit'), (')', ')'), ('F', 'f'), ('+', '+'), ('H1', 'h1'), ('(', '('), ('512', '512'), ('bits', 'bit'), (')', ')'), ('IV=', 'iv='), ('H0', 'h0'), ('F', 'f'), ('+', '+'), ('H2', 'h2'), ('(', '('), ('512', '512'), ('bits', 'bit'), (')', ')'), ('F', 'f'), ('+', '+'), ('HN', 'hn'), ('(', '('), ('512', '512'), ('bits', 'bit'), (')', ')')] 

 Dependency tags are: 
>> [(('Unit', 'root'), 'root'), (('-5', 'Unit'), 'nummod'), (('Cryptographic', 'Functions'), 'amod'), (('Hash', 'Functions'), 'compound'), (('Functions', 'Unit'), 'appos'), (('Darshan', 'Institute'), 'compound'), (('Institute', 'Unit'), 'appos'), (('of', 'Generation'), 'case'), (('Engineering', 'Generation'), 'compound'), (('&', 'Technology'), 'cc'), (('Technology', 'Engineering'), 'conj'), (('‹#›', 'Generation'), 'compound'), (('Message', 'Generation'), 'compound'), (('Digest', 'Generation'), 'compound'), (('Generation', 'Institute'), 'nmod'), (('using', 'Generation'), 'acl'), (('SHA', 'using'), 'obj'), (('-', 'Message'), 'punct'), (('512', 'Message'), 'nummod'), (('Message', 'SHA'), 'appos'), (('(', 'bit'), 'punct'), (('L', 'bit'), 'compound'), (('bit', 'Message'), 'appos'), ((')', 'bit'), 'punct'), (('10000…0', 'M1'), 'nummod'), (('L', 'M1'), 'compound'), (('M1', 'Message'), 'appos'), (('(', 'bits'), 'punct'), (('1024', 'bits'), 'nummod'), (('bits', 'M1'), 'appos'), ((')', 'bits'), 'punct'), (('M2', 'M1'), 'appos'), (('(', 'bits'), 'punct'), (('1024', 'bits'), 'nummod'), (('bits', 'M2'), 'appos'), ((')', 'bits'), 'punct'), (('MN', 'M2'), 'appos'), (('(', 'bits'), 'punct'), (('1024', 'bits'), 'nummod'), (('bits', 'MN'), 'appos'), ((')', 'bits'), 'punct'), (('F', 'MN'), 'appos'), (('+', 'H1'), 'cc'), (('H1', 'F'), 'appos'), (('(', 'bits'), 'punct'), (('512', 'bits'), 'nummod'), (('bits', 'H1'), 'appos'), ((')', 'bits'), 'punct'), (('IV=', 'H0'), 'nummod'), (('H0', 'F'), 'appos'), (('F', 'H0'), 'appos'), (('+', 'H2'), 'cc'), (('H2', 'F'), 'appos'), (('(', 'bits'), 'punct'), (('512', 'bits'), 'nummod'), (('bits', 'H2'), 'appos'), ((')', 'bits'), 'punct'), (('F', 'H0'), 'appos'), (('+', 'HN'), 'cc'), (('HN', 'F'), 'conj'), (('(', 'bits'), 'punct'), (('512', 'bits'), 'nummod'), (('bits', 'HN'), 'appos'), ((')', 'bits'), 'punct')]

 Named Entities are: 
>> [('Unit-5  Cryptographic Hash Functions                                 Darshan Institute of Engineering & Technology', 'ORG'), ('1024 bits', 'QUANTITY'), ('1024 bits', 'QUANTITY')]

========================== Sentence 51 ===========================

 Message Digest Generation using SHA -512   Unit-5  Cryptographic Hash Functions                                 Darshan Institute of Engineering & Technology   ‹#›  Step -1 Append Padding Bits 

Tokens are: 
>> ['Message', 'Digest', 'Generation', 'using', 'SHA', '-', '512', 'Unit-5', 'Cryptographic', 'Hash', 'Functions', 'Darshan', 'Institute', 'of', 'Engineering', '&', 'Technology', '‹#›', 'Step', '-1', 'Append', 'Padding', 'Bits'] 

 UPOS tags are: 
>> [('Message', 'NOUN'), ('Digest', 'NOUN'), ('Generation', 'NOUN'), ('using', 'VERB'), ('SHA', 'NOUN'), ('-', 'PUNCT'), ('512', 'NUM'), ('Unit-5', 'NOUN'), ('Cryptographic', 'ADJ'), ('Hash', 'NOUN'), ('Functions', 'NOUN'), ('Darshan', 'PROPN'), ('Institute', 'NOUN'), ('of', 'ADP'), ('Engineering', 'NOUN'), ('&', 'CCONJ'), ('Technology', 'NOUN'), ('‹#›', 'NOUN'), ('Step', 'NOUN'), ('-1', 'NUM'), ('Append', 'NOUN'), ('Padding', 'NOUN'), ('Bits', 'NOUN')] 

 XPOS tags are: 
>> [('Message', 'NN'), ('Digest', 'NN'), ('Generation', 'NN'), ('using', 'VBG'), ('SHA', 'NN'), ('-', ','), ('512', 'CD'), ('Unit-5', 'NN'), ('Cryptographic', 'JJ'), ('Hash', 'NN'), ('Functions', 'NNS'), ('Darshan', 'NNP'), ('Institute', 'NN'), ('of', 'IN'), ('Engineering', 'NN'), ('&', 'CC'), ('Technology', 'NN'), ('‹#›', 'NN'), ('Step', 'NN'), ('-1', 'CD'), ('Append', 'NN'), ('Padding', 'NN'), ('Bits', 'NNS')] 

 Lemmas are: 
>> [('Message', 'message'), ('Digest', 'digest'), ('Generation', 'generation'), ('using', 'use'), ('SHA', 'sha'), ('-', '-'), ('512', '512'), ('Unit-5', 'unciot'), ('Cryptographic', 'Cryptographic'), ('Hash', 'hash'), ('Functions', 'function'), ('Darshan', 'Darshan'), ('Institute', 'Institute'), ('of', 'of'), ('Engineering', 'Engineering'), ('&', '&'), ('Technology', 'technology'), ('‹#›', '‹#›'), ('Step', 'step'), ('-1', '-1'), ('Append', 'append'), ('Padding', 'padding'), ('Bits', 'bit')] 

 Dependency tags are: 
>> [(('Message', 'Digest'), 'compound'), (('Digest', 'Generation'), 'compound'), (('Generation', 'root'), 'root'), (('using', 'Generation'), 'acl'), (('SHA', 'using'), 'obj'), (('-', 'SHA'), 'punct'), (('512', 'Functions'), 'nummod'), (('Unit-5', 'Functions'), 'compound'), (('Cryptographic', 'Functions'), 'amod'), (('Hash', 'Functions'), 'compound'), (('Functions', 'Institute'), 'compound'), (('Darshan', 'Institute'), 'compound'), (('Institute', 'Generation'), 'parataxis'), (('of', 'Bits'), 'case'), (('Engineering', '‹#›'), 'compound'), (('&', 'Technology'), 'cc'), (('Technology', 'Engineering'), 'conj'), (('‹#›', 'Institute'), 'nmod'), (('Step', 'Bits'), 'compound'), (('-1', 'Bits'), 'nummod'), (('Append', 'Bits'), 'compound'), (('Padding', 'Bits'), 'compound'), (('Bits', 'Institute'), 'nmod')]

 Named Entities are: 
>> []

========================== Sentence 52 ===========================

 The message is padded so that its length is congruent to 896 modulo 1024 [length ≡ 896(mod 1024)] . 

Tokens are: 
>> ['The', 'message', 'is', 'padded', 'so', 'that', 'its', 'length', 'is', 'congruent', 'to', '896', 'modulo', '1024', '[', 'length', '≡', '896', '(', 'mod', '1024', ')', ']', '.'] 

 UPOS tags are: 
>> [('The', 'DET'), ('message', 'NOUN'), ('is', 'AUX'), ('padded', 'VERB'), ('so', 'SCONJ'), ('that', 'SCONJ'), ('its', 'PRON'), ('length', 'NOUN'), ('is', 'AUX'), ('congruent', 'ADJ'), ('to', 'ADP'), ('896', 'NUM'), ('modulo', 'ADJ'), ('1024', 'NUM'), ('[', 'PUNCT'), ('length', 'NOUN'), ('≡', 'SYM'), ('896', 'NUM'), ('(', 'PUNCT'), ('mod', 'NOUN'), ('1024', 'NUM'), (')', 'PUNCT'), (']', 'PUNCT'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('The', 'DT'), ('message', 'NN'), ('is', 'VBZ'), ('padded', 'VBN'), ('so', 'IN'), ('that', 'IN'), ('its', 'PRP$'), ('length', 'NN'), ('is', 'VBZ'), ('congruent', 'JJ'), ('to', 'IN'), ('896', 'CD'), ('modulo', 'JJ'), ('1024', 'CD'), ('[', '-LRB-'), ('length', 'NN'), ('≡', 'SYM'), ('896', 'CD'), ('(', '-LRB-'), ('mod', 'NN'), ('1024', 'CD'), (')', '-RRB-'), (']', '-RRB-'), ('.', '.')] 

 Lemmas are: 
>> [('The', 'the'), ('message', 'message'), ('is', 'be'), ('padded', 'pad'), ('so', 'so'), ('that', 'that'), ('its', 'its'), ('length', 'length'), ('is', 'be'), ('congruent', 'congruent'), ('to', 'to'), ('896', '896'), ('modulo', 'modulo'), ('1024', '1024'), ('[', '['), ('length', 'length'), ('≡', '≡'), ('896', '896'), ('(', '('), ('mod', 'mod'), ('1024', '1024'), (')', ')'), (']', ']'), ('.', '.')] 

 Dependency tags are: 
>> [(('The', 'message'), 'det'), (('message', 'padded'), 'nsubj:pass'), (('is', 'padded'), 'aux:pass'), (('padded', 'root'), 'root'), (('so', 'congruent'), 'mark'), (('that', 'so'), 'fixed'), (('its', 'length'), 'nmod:poss'), (('length', 'congruent'), 'nsubj'), (('is', 'congruent'), 'cop'), (('congruent', 'padded'), 'advcl'), (('to', '1024'), 'case'), (('896', '1024'), 'nummod'), (('modulo', '1024'), 'amod'), (('1024', 'congruent'), 'obl'), (('[', 'length'), 'punct'), (('length', 'padded'), 'dep'), (('≡', '896'), 'case'), (('896', 'length'), 'nmod'), (('(', 'mod'), 'punct'), (('mod', 'length'), 'appos'), (('1024', 'mod'), 'dep'), ((')', 'mod'), 'punct'), ((']', 'length'), 'punct'), (('.', 'padded'), 'punct')]

 Named Entities are: 
>> [('896', 'CARDINAL'), ('1024', 'CARDINAL'), ('896', 'CARDINAL'), ('1024', 'CARDINAL')]

========================== Sentence 53 ===========================

 Padding is always added, even if the message is already of the desired length. 

Tokens are: 
>> ['Padding', 'is', 'always', 'added', ',', 'even', 'if', 'the', 'message', 'is', 'already', 'of', 'the', 'desired', 'length', '.'] 

 UPOS tags are: 
>> [('Padding', 'NOUN'), ('is', 'AUX'), ('always', 'ADV'), ('added', 'VERB'), (',', 'PUNCT'), ('even', 'ADV'), ('if', 'SCONJ'), ('the', 'DET'), ('message', 'NOUN'), ('is', 'AUX'), ('already', 'ADV'), ('of', 'ADP'), ('the', 'DET'), ('desired', 'VERB'), ('length', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Padding', 'NN'), ('is', 'VBZ'), ('always', 'RB'), ('added', 'VBN'), (',', ','), ('even', 'RB'), ('if', 'IN'), ('the', 'DT'), ('message', 'NN'), ('is', 'VBZ'), ('already', 'RB'), ('of', 'IN'), ('the', 'DT'), ('desired', 'VBN'), ('length', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('Padding', 'padding'), ('is', 'be'), ('always', 'always'), ('added', 'add'), (',', ','), ('even', 'even'), ('if', 'if'), ('the', 'the'), ('message', 'message'), ('is', 'be'), ('already', 'already'), ('of', 'of'), ('the', 'the'), ('desired', 'desire'), ('length', 'length'), ('.', '.')] 

 Dependency tags are: 
>> [(('Padding', 'added'), 'nsubj:pass'), (('is', 'added'), 'aux:pass'), (('always', 'added'), 'advmod'), (('added', 'root'), 'root'), ((',', 'added'), 'punct'), (('even', 'length'), 'advmod'), (('if', 'length'), 'mark'), (('the', 'message'), 'det'), (('message', 'length'), 'nsubj'), (('is', 'length'), 'cop'), (('already', 'length'), 'advmod'), (('of', 'length'), 'case'), (('the', 'length'), 'det'), (('desired', 'length'), 'amod'), (('length', 'added'), 'advcl'), (('.', 'added'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 54 ===========================

 Thus, the number of padding bits is in the range of 1 to 1024. 

Tokens are: 
>> ['Thus', ',', 'the', 'number', 'of', 'padding', 'bits', 'is', 'in', 'the', 'range', 'of', '1', 'to', '1024', '.'] 

 UPOS tags are: 
>> [('Thus', 'ADV'), (',', 'PUNCT'), ('the', 'DET'), ('number', 'NOUN'), ('of', 'ADP'), ('padding', 'NOUN'), ('bits', 'NOUN'), ('is', 'AUX'), ('in', 'ADP'), ('the', 'DET'), ('range', 'NOUN'), ('of', 'ADP'), ('1', 'NUM'), ('to', 'ADP'), ('1024', 'NUM'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Thus', 'RB'), (',', ','), ('the', 'DT'), ('number', 'NN'), ('of', 'IN'), ('padding', 'NN'), ('bits', 'NNS'), ('is', 'VBZ'), ('in', 'IN'), ('the', 'DT'), ('range', 'NN'), ('of', 'IN'), ('1', 'CD'), ('to', 'IN'), ('1024', 'CD'), ('.', '.')] 

 Lemmas are: 
>> [('Thus', 'thus'), (',', ','), ('the', 'the'), ('number', 'number'), ('of', 'of'), ('padding', 'padding'), ('bits', 'bit'), ('is', 'be'), ('in', 'in'), ('the', 'the'), ('range', 'range'), ('of', 'of'), ('1', '1'), ('to', 'to'), ('1024', '1024'), ('.', '.')] 

 Dependency tags are: 
>> [(('Thus', 'range'), 'advmod'), ((',', 'range'), 'punct'), (('the', 'number'), 'det'), (('number', 'range'), 'nsubj'), (('of', 'bits'), 'case'), (('padding', 'bits'), 'compound'), (('bits', 'number'), 'nmod'), (('is', 'range'), 'cop'), (('in', 'range'), 'case'), (('the', 'range'), 'det'), (('range', 'root'), 'root'), (('of', '1'), 'case'), (('1', 'range'), 'nmod'), (('to', '1024'), 'case'), (('1024', '1'), 'nmod'), (('.', 'range'), 'punct')]

 Named Entities are: 
>> [('1', 'CARDINAL'), ('1024', 'CARDINAL')]

========================== Sentence 55 ===========================

 The padding consists of a single 1 bit followed by the necessary number of 0 bits. 

Tokens are: 
>> ['The', 'padding', 'consists', 'of', 'a', 'single', '1', 'bit', 'followed', 'by', 'the', 'necessary', 'number', 'of', '0', 'bits', '.'] 

 UPOS tags are: 
>> [('The', 'DET'), ('padding', 'NOUN'), ('consists', 'VERB'), ('of', 'ADP'), ('a', 'DET'), ('single', 'ADJ'), ('1', 'NUM'), ('bit', 'NOUN'), ('followed', 'VERB'), ('by', 'ADP'), ('the', 'DET'), ('necessary', 'ADJ'), ('number', 'NOUN'), ('of', 'ADP'), ('0', 'NUM'), ('bits', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('The', 'DT'), ('padding', 'NN'), ('consists', 'VBZ'), ('of', 'IN'), ('a', 'DT'), ('single', 'JJ'), ('1', 'CD'), ('bit', 'NN'), ('followed', 'VBN'), ('by', 'IN'), ('the', 'DT'), ('necessary', 'JJ'), ('number', 'NN'), ('of', 'IN'), ('0', 'CD'), ('bits', 'NNS'), ('.', '.')] 

 Lemmas are: 
>> [('The', 'the'), ('padding', 'padding'), ('consists', 'consist'), ('of', 'of'), ('a', 'a'), ('single', 'single'), ('1', '1'), ('bit', 'bit'), ('followed', 'follow'), ('by', 'by'), ('the', 'the'), ('necessary', 'necessary'), ('number', 'number'), ('of', 'of'), ('0', '0'), ('bits', 'bit'), ('.', '.')] 

 Dependency tags are: 
>> [(('The', 'padding'), 'det'), (('padding', 'consists'), 'nsubj'), (('consists', 'root'), 'root'), (('of', 'bit'), 'case'), (('a', 'bit'), 'det'), (('single', 'bit'), 'amod'), (('1', 'bit'), 'nummod'), (('bit', 'consists'), 'obl'), (('followed', 'bit'), 'acl'), (('by', 'number'), 'case'), (('the', 'number'), 'det'), (('necessary', 'number'), 'amod'), (('number', 'followed'), 'obl'), (('of', 'bits'), 'case'), (('0', 'bits'), 'nummod'), (('bits', 'number'), 'nmod'), (('.', 'consists'), 'punct')]

 Named Entities are: 
>> [('1', 'CARDINAL'), ('0', 'CARDINAL')]

========================== Sentence 56 ===========================

 Unit-5  Cryptographic Hash Functions                                 Darshan Institute of Engineering & Technology   ‹#›  Step -2 Append Length 

Tokens are: 
>> ['Unit', '-5', 'Cryptographic', 'Hash', 'Functions', 'Darshan', 'Institute', 'of', 'Engineering', '&', 'Technology', '‹#›', 'Step', '-2', 'Append', 'Length'] 

 UPOS tags are: 
>> [('Unit', 'NOUN'), ('-5', 'NUM'), ('Cryptographic', 'ADJ'), ('Hash', 'NOUN'), ('Functions', 'NOUN'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('of', 'ADP'), ('Engineering', 'NOUN'), ('&', 'CCONJ'), ('Technology', 'NOUN'), ('‹#›', 'NOUN'), ('Step', 'NOUN'), ('-2', 'NUM'), ('Append', 'NOUN'), ('Length', 'NOUN')] 

 XPOS tags are: 
>> [('Unit', 'NN'), ('-5', 'CD'), ('Cryptographic', 'JJ'), ('Hash', 'NN'), ('Functions', 'NNS'), ('Darshan', 'NNP'), ('Institute', 'NNP'), ('of', 'IN'), ('Engineering', 'NN'), ('&', 'CC'), ('Technology', 'NN'), ('‹#›', 'NN'), ('Step', 'NN'), ('-2', 'CD'), ('Append', 'NN'), ('Length', 'NN')] 

 Lemmas are: 
>> [('Unit', 'unit'), ('-5', '-5'), ('Cryptographic', 'Cryptographic'), ('Hash', 'hash'), ('Functions', 'function'), ('Darshan', 'Darshan'), ('Institute', 'Institute'), ('of', 'of'), ('Engineering', 'Engineering'), ('&', '&'), ('Technology', 'technology'), ('‹#›', '‹#›'), ('Step', 'step'), ('-2', '-2'), ('Append', 'append'), ('Length', 'length')] 

 Dependency tags are: 
>> [(('Unit', 'root'), 'root'), (('-5', 'Unit'), 'nummod'), (('Cryptographic', 'Functions'), 'amod'), (('Hash', 'Functions'), 'compound'), (('Functions', 'Unit'), 'appos'), (('Darshan', 'Institute'), 'compound'), (('Institute', 'Unit'), 'appos'), (('of', '‹#›'), 'case'), (('Engineering', '‹#›'), 'compound'), (('&', 'Technology'), 'cc'), (('Technology', 'Engineering'), 'conj'), (('‹#›', 'Institute'), 'nmod'), (('Step', 'Institute'), 'nmod'), (('-2', 'Length'), 'nummod'), (('Append', 'Length'), 'compound'), (('Length', 'Step'), 'conj')]

 Named Entities are: 
>> []

========================== Sentence 57 ===========================

 A block of 128 bits is appended to the message. 

Tokens are: 
>> ['A', 'block', 'of', '128', 'bits', 'is', 'appended', 'to', 'the', 'message', '.'] 

 UPOS tags are: 
>> [('A', 'DET'), ('block', 'NOUN'), ('of', 'ADP'), ('128', 'NUM'), ('bits', 'NOUN'), ('is', 'AUX'), ('appended', 'VERB'), ('to', 'ADP'), ('the', 'DET'), ('message', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('A', 'DT'), ('block', 'NN'), ('of', 'IN'), ('128', 'CD'), ('bits', 'NNS'), ('is', 'VBZ'), ('appended', 'VBN'), ('to', 'IN'), ('the', 'DT'), ('message', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('A', 'a'), ('block', 'block'), ('of', 'of'), ('128', '128'), ('bits', 'bit'), ('is', 'be'), ('appended', 'append'), ('to', 'to'), ('the', 'the'), ('message', 'message'), ('.', '.')] 

 Dependency tags are: 
>> [(('A', 'block'), 'det'), (('block', 'appended'), 'nsubj:pass'), (('of', 'bits'), 'case'), (('128', 'bits'), 'nummod'), (('bits', 'block'), 'nmod'), (('is', 'appended'), 'aux:pass'), (('appended', 'root'), 'root'), (('to', 'message'), 'case'), (('the', 'message'), 'det'), (('message', 'appended'), 'obl'), (('.', 'appended'), 'punct')]

 Named Entities are: 
>> [('128', 'CARDINAL')]

========================== Sentence 58 ===========================

 This block is treated as an unsigned 128-bit integer (most significant byte first) and contains the length of the original message (before the padding). 

Tokens are: 
>> ['This', 'block', 'is', 'treated', 'as', 'an', 'unsigned', '128', '-', 'bit', 'integer', '(', 'most', 'significant', 'byte', 'first', ')', 'and', 'contains', 'the', 'length', 'of', 'the', 'original', 'message', '(', 'before', 'the', 'padding', ')', '.'] 

 UPOS tags are: 
>> [('This', 'DET'), ('block', 'NOUN'), ('is', 'AUX'), ('treated', 'VERB'), ('as', 'ADP'), ('an', 'DET'), ('unsigned', 'ADJ'), ('128', 'NUM'), ('-', 'PUNCT'), ('bit', 'NOUN'), ('integer', 'NOUN'), ('(', 'PUNCT'), ('most', 'ADV'), ('significant', 'ADJ'), ('byte', 'NOUN'), ('first', 'ADJ'), (')', 'PUNCT'), ('and', 'CCONJ'), ('contains', 'VERB'), ('the', 'DET'), ('length', 'NOUN'), ('of', 'ADP'), ('the', 'DET'), ('original', 'ADJ'), ('message', 'NOUN'), ('(', 'PUNCT'), ('before', 'ADP'), ('the', 'DET'), ('padding', 'NOUN'), (')', 'PUNCT'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('This', 'DT'), ('block', 'NN'), ('is', 'VBZ'), ('treated', 'VBN'), ('as', 'IN'), ('an', 'DT'), ('unsigned', 'JJ'), ('128', 'CD'), ('-', 'HYPH'), ('bit', 'NN'), ('integer', 'NN'), ('(', '-LRB-'), ('most', 'RBS'), ('significant', 'JJ'), ('byte', 'NN'), ('first', 'JJ'), (')', '-RRB-'), ('and', 'CC'), ('contains', 'VBZ'), ('the', 'DT'), ('length', 'NN'), ('of', 'IN'), ('the', 'DT'), ('original', 'JJ'), ('message', 'NN'), ('(', '-LRB-'), ('before', 'IN'), ('the', 'DT'), ('padding', 'NN'), (')', '-RRB-'), ('.', '.')] 

 Lemmas are: 
>> [('This', 'this'), ('block', 'block'), ('is', 'be'), ('treated', 'treat'), ('as', 'as'), ('an', 'a'), ('unsigned', 'unsigned'), ('128', '128'), ('-', '-'), ('bit', 'bit'), ('integer', 'integer'), ('(', '('), ('most', 'most'), ('significant', 'significant'), ('byte', 'byte'), ('first', 'first'), (')', ')'), ('and', 'and'), ('contains', 'contain'), ('the', 'the'), ('length', 'length'), ('of', 'of'), ('the', 'the'), ('original', 'original'), ('message', 'message'), ('(', '('), ('before', 'before'), ('the', 'the'), ('padding', 'padding'), (')', ')'), ('.', '.')] 

 Dependency tags are: 
>> [(('This', 'block'), 'det'), (('block', 'treated'), 'nsubj:pass'), (('is', 'treated'), 'aux:pass'), (('treated', 'root'), 'root'), (('as', 'integer'), 'case'), (('an', 'integer'), 'det'), (('unsigned', 'integer'), 'amod'), (('128', 'bit'), 'nummod'), (('-', 'bit'), 'punct'), (('bit', 'integer'), 'compound'), (('integer', 'treated'), 'obl'), (('(', 'byte'), 'punct'), (('most', 'significant'), 'advmod'), (('significant', 'byte'), 'amod'), (('byte', 'integer'), 'appos'), (('first', 'byte'), 'amod'), ((')', 'byte'), 'punct'), (('and', 'contains'), 'cc'), (('contains', 'treated'), 'conj'), (('the', 'length'), 'det'), (('length', 'contains'), 'obj'), (('of', 'message'), 'case'), (('the', 'message'), 'det'), (('original', 'message'), 'amod'), (('message', 'length'), 'nmod'), (('(', 'padding'), 'punct'), (('before', 'padding'), 'case'), (('the', 'padding'), 'det'), (('padding', 'contains'), 'obl'), ((')', 'padding'), 'punct'), (('.', 'treated'), 'punct')]

 Named Entities are: 
>> [('128-bit', 'QUANTITY'), ('first', 'ORDINAL')]

========================== Sentence 59 ===========================

 Unit-5  Cryptographic Hash Functions                                 Darshan Institute of Engineering & Technology   ‹#›  Step -3 Initialize hash buffer 

Tokens are: 
>> ['Unit', '-5', 'Cryptographic', 'Hash', 'Functions', 'Darshan', 'Institute', 'of', 'Engineering', '&', 'Technology', '‹#›', 'Step', '-3', 'Initialize', 'hash', 'buffer'] 

 UPOS tags are: 
>> [('Unit', 'NOUN'), ('-5', 'NUM'), ('Cryptographic', 'ADJ'), ('Hash', 'NOUN'), ('Functions', 'NOUN'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('of', 'ADP'), ('Engineering', 'NOUN'), ('&', 'CCONJ'), ('Technology', 'NOUN'), ('‹#›', 'NOUN'), ('Step', 'NOUN'), ('-3', 'NUM'), ('Initialize', 'NOUN'), ('hash', 'NOUN'), ('buffer', 'NOUN')] 

 XPOS tags are: 
>> [('Unit', 'NN'), ('-5', 'CD'), ('Cryptographic', 'JJ'), ('Hash', 'NN'), ('Functions', 'NNS'), ('Darshan', 'NNP'), ('Institute', 'NNP'), ('of', 'IN'), ('Engineering', 'NN'), ('&', 'CC'), ('Technology', 'NN'), ('‹#›', 'NN'), ('Step', 'NN'), ('-3', 'CD'), ('Initialize', 'NN'), ('hash', 'NN'), ('buffer', 'NN')] 

 Lemmas are: 
>> [('Unit', 'unit'), ('-5', '-5'), ('Cryptographic', 'Cryptographic'), ('Hash', 'hash'), ('Functions', 'function'), ('Darshan', 'Darshan'), ('Institute', 'Institute'), ('of', 'of'), ('Engineering', 'Engineering'), ('&', '&'), ('Technology', 'technology'), ('‹#›', '‹#›'), ('Step', 'step'), ('-3', '-3'), ('Initialize', 'initialize'), ('hash', 'hash'), ('buffer', 'buffer')] 

 Dependency tags are: 
>> [(('Unit', 'root'), 'root'), (('-5', 'Unit'), 'nummod'), (('Cryptographic', 'Functions'), 'amod'), (('Hash', 'Functions'), 'compound'), (('Functions', 'Institute'), 'compound'), (('Darshan', 'Institute'), 'compound'), (('Institute', 'Unit'), 'appos'), (('of', 'buffer'), 'case'), (('Engineering', '‹#›'), 'compound'), (('&', 'Technology'), 'cc'), (('Technology', 'Engineering'), 'conj'), (('‹#›', 'Institute'), 'nmod'), (('Step', 'buffer'), 'compound'), (('-3', 'buffer'), 'nummod'), (('Initialize', 'hash'), 'compound'), (('hash', 'buffer'), 'compound'), (('buffer', 'Institute'), 'nmod')]

 Named Entities are: 
>> []

========================== Sentence 60 ===========================

 The outcome of the first two steps produces a message that is an integer multiple of 1024 bits in length. 

Tokens are: 
>> ['The', 'outcome', 'of', 'the', 'first', 'two', 'steps', 'produces', 'a', 'message', 'that', 'is', 'an', 'integer', 'multiple', 'of', '1024', 'bits', 'in', 'length', '.'] 

 UPOS tags are: 
>> [('The', 'DET'), ('outcome', 'NOUN'), ('of', 'ADP'), ('the', 'DET'), ('first', 'ADJ'), ('two', 'NUM'), ('steps', 'NOUN'), ('produces', 'VERB'), ('a', 'DET'), ('message', 'NOUN'), ('that', 'PRON'), ('is', 'AUX'), ('an', 'DET'), ('integer', 'NOUN'), ('multiple', 'ADJ'), ('of', 'ADP'), ('1024', 'NUM'), ('bits', 'NOUN'), ('in', 'ADP'), ('length', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('The', 'DT'), ('outcome', 'NN'), ('of', 'IN'), ('the', 'DT'), ('first', 'JJ'), ('two', 'CD'), ('steps', 'NNS'), ('produces', 'VBZ'), ('a', 'DT'), ('message', 'NN'), ('that', 'WDT'), ('is', 'VBZ'), ('an', 'DT'), ('integer', 'NN'), ('multiple', 'JJ'), ('of', 'IN'), ('1024', 'CD'), ('bits', 'NNS'), ('in', 'IN'), ('length', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('The', 'the'), ('outcome', 'outcome'), ('of', 'of'), ('the', 'the'), ('first', 'first'), ('two', 'two'), ('steps', 'step'), ('produces', 'produce'), ('a', 'a'), ('message', 'message'), ('that', 'that'), ('is', 'be'), ('an', 'a'), ('integer', 'integer'), ('multiple', 'multiple'), ('of', 'of'), ('1024', '1024'), ('bits', 'bit'), ('in', 'in'), ('length', 'length'), ('.', '.')] 

 Dependency tags are: 
>> [(('The', 'outcome'), 'det'), (('outcome', 'produces'), 'nsubj'), (('of', 'steps'), 'case'), (('the', 'steps'), 'det'), (('first', 'steps'), 'amod'), (('two', 'steps'), 'nummod'), (('steps', 'outcome'), 'nmod'), (('produces', 'root'), 'root'), (('a', 'message'), 'det'), (('message', 'produces'), 'obj'), (('that', 'integer'), 'nsubj'), (('is', 'integer'), 'cop'), (('an', 'integer'), 'det'), (('integer', 'message'), 'acl:relcl'), (('multiple', 'integer'), 'amod'), (('of', 'bits'), 'case'), (('1024', 'bits'), 'nummod'), (('bits', 'multiple'), 'obl'), (('in', 'length'), 'case'), (('length', 'bits'), 'nmod'), (('.', 'produces'), 'punct')]

 Named Entities are: 
>> [('first', 'ORDINAL'), ('two', 'CARDINAL'), ('1024', 'CARDINAL')]

========================== Sentence 61 ===========================

 the expanded message is represented as the sequence of 1024-bit blocks M1 , M2, … , MN, so that the total length of expanded message is N X 1024 bits. 

Tokens are: 
>> ['the', 'expanded', 'message', 'is', 'represented', 'as', 'the', 'sequence', 'of', '1024', '-', 'bit', 'blocks', 'M1', ',', 'M2', ',', '…', ',', 'MN', ',', 'so', 'that', 'the', 'total', 'length', 'of', 'expanded', 'message', 'is', 'N', 'X', '1024', 'bits', '.'] 

 UPOS tags are: 
>> [('the', 'DET'), ('expanded', 'VERB'), ('message', 'NOUN'), ('is', 'AUX'), ('represented', 'VERB'), ('as', 'ADP'), ('the', 'DET'), ('sequence', 'NOUN'), ('of', 'ADP'), ('1024', 'NUM'), ('-', 'PUNCT'), ('bit', 'NOUN'), ('blocks', 'NOUN'), ('M1', 'PROPN'), (',', 'PUNCT'), ('M2', 'PROPN'), (',', 'PUNCT'), ('…', 'PUNCT'), (',', 'PUNCT'), ('MN', 'PROPN'), (',', 'PUNCT'), ('so', 'ADV'), ('that', 'SCONJ'), ('the', 'DET'), ('total', 'ADJ'), ('length', 'NOUN'), ('of', 'ADP'), ('expanded', 'VERB'), ('message', 'NOUN'), ('is', 'AUX'), ('N', 'ADP'), ('X', 'SYM'), ('1024', 'NUM'), ('bits', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('the', 'DT'), ('expanded', 'VBN'), ('message', 'NN'), ('is', 'VBZ'), ('represented', 'VBN'), ('as', 'IN'), ('the', 'DT'), ('sequence', 'NN'), ('of', 'IN'), ('1024', 'CD'), ('-', 'HYPH'), ('bit', 'NN'), ('blocks', 'NNS'), ('M1', 'NNP'), (',', ','), ('M2', 'NNP'), (',', ','), ('…', ','), (',', ','), ('MN', 'NNP'), (',', ','), ('so', 'RB'), ('that', 'IN'), ('the', 'DT'), ('total', 'JJ'), ('length', 'NN'), ('of', 'IN'), ('expanded', 'VBN'), ('message', 'NN'), ('is', 'VBZ'), ('N', 'IN'), ('X', 'SYM'), ('1024', 'CD'), ('bits', 'NNS'), ('.', '.')] 

 Lemmas are: 
>> [('the', 'the'), ('expanded', 'expand'), ('message', 'message'), ('is', 'be'), ('represented', 'represent'), ('as', 'as'), ('the', 'the'), ('sequence', 'sequence'), ('of', 'of'), ('1024', '1024'), ('-', '-'), ('bit', 'bit'), ('blocks', 'block'), ('M1', 'M1'), (',', ','), ('M2', 'M2'), (',', ','), ('…', '…'), (',', ','), ('MN', 'MN'), (',', ','), ('so', 'so'), ('that', 'that'), ('the', 'the'), ('total', 'total'), ('length', 'length'), ('of', 'of'), ('expanded', 'expand'), ('message', 'message'), ('is', 'be'), ('N', 'N'), ('X', 'x'), ('1024', '1024'), ('bits', 'bit'), ('.', '.')] 

 Dependency tags are: 
>> [(('the', 'message'), 'det'), (('expanded', 'message'), 'amod'), (('message', 'represented'), 'nsubj:pass'), (('is', 'represented'), 'aux:pass'), (('represented', 'root'), 'root'), (('as', 'sequence'), 'case'), (('the', 'sequence'), 'det'), (('sequence', 'represented'), 'obl'), (('of', 'M1'), 'case'), (('1024', 'bit'), 'nummod'), (('-', 'bit'), 'punct'), (('bit', 'blocks'), 'compound'), (('blocks', 'M1'), 'compound'), (('M1', 'sequence'), 'nmod'), ((',', 'M1'), 'punct'), (('M2', 'M1'), 'appos'), ((',', 'M1'), 'punct'), (('…', 'M1'), 'punct'), ((',', 'MN'), 'punct'), (('MN', 'M1'), 'appos'), ((',', 'bits'), 'punct'), (('so', 'bits'), 'mark'), (('that', 'so'), 'fixed'), (('the', 'length'), 'det'), (('total', 'length'), 'amod'), (('length', 'bits'), 'nsubj'), (('of', 'message'), 'case'), (('expanded', 'message'), 'amod'), (('message', 'length'), 'nmod'), (('is', 'bits'), 'cop'), (('N', 'bits'), 'case'), (('X', '1024'), 'case'), (('1024', 'N'), 'nmod'), (('bits', 'represented'), 'advcl'), (('.', 'represented'), 'punct')]

 Named Entities are: 
>> [('1024-bit', 'QUANTITY')]

========================== Sentence 62 ===========================

 A 512-bit buffer is used to hold intermediate and final results of the hash function. 

Tokens are: 
>> ['A', '512', '-', 'bit', 'buffer', 'is', 'used', 'to', 'hold', 'intermediate', 'and', 'final', 'results', 'of', 'the', 'hash', 'function', '.'] 

 UPOS tags are: 
>> [('A', 'DET'), ('512', 'NUM'), ('-', 'PUNCT'), ('bit', 'NOUN'), ('buffer', 'NOUN'), ('is', 'AUX'), ('used', 'VERB'), ('to', 'PART'), ('hold', 'VERB'), ('intermediate', 'ADJ'), ('and', 'CCONJ'), ('final', 'ADJ'), ('results', 'NOUN'), ('of', 'ADP'), ('the', 'DET'), ('hash', 'NOUN'), ('function', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('A', 'DT'), ('512', 'CD'), ('-', 'HYPH'), ('bit', 'NN'), ('buffer', 'NN'), ('is', 'VBZ'), ('used', 'VBN'), ('to', 'TO'), ('hold', 'VB'), ('intermediate', 'JJ'), ('and', 'CC'), ('final', 'JJ'), ('results', 'NNS'), ('of', 'IN'), ('the', 'DT'), ('hash', 'NN'), ('function', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('A', 'a'), ('512', '512'), ('-', '-'), ('bit', 'bit'), ('buffer', 'buffer'), ('is', 'be'), ('used', 'use'), ('to', 'to'), ('hold', 'hold'), ('intermediate', 'intermediate'), ('and', 'and'), ('final', 'final'), ('results', 'result'), ('of', 'of'), ('the', 'the'), ('hash', 'hash'), ('function', 'function'), ('.', '.')] 

 Dependency tags are: 
>> [(('A', 'buffer'), 'det'), (('512', 'bit'), 'nummod'), (('-', 'bit'), 'punct'), (('bit', 'buffer'), 'compound'), (('buffer', 'used'), 'nsubj:pass'), (('is', 'used'), 'aux:pass'), (('used', 'root'), 'root'), (('to', 'hold'), 'mark'), (('hold', 'used'), 'xcomp'), (('intermediate', 'results'), 'amod'), (('and', 'final'), 'cc'), (('final', 'intermediate'), 'conj'), (('results', 'hold'), 'obj'), (('of', 'function'), 'case'), (('the', 'function'), 'det'), (('hash', 'function'), 'compound'), (('function', 'results'), 'nmod'), (('.', 'used'), 'punct')]

 Named Entities are: 
>> [('512', 'CARDINAL')]

========================== Sentence 63 ===========================

 The buffer can be represented as eight 64-bit registers (a, b, c, d, e, f, g, h). 

Tokens are: 
>> ['The', 'buffer', 'can', 'be', 'represented', 'as', 'eight', '64', '-', 'bit', 'registers', '(', 'a', ',', 'b', ',', 'c', ',', 'd', ',', 'e', ',', 'f', ',', 'g', ',', 'h', ')', '.'] 

 UPOS tags are: 
>> [('The', 'DET'), ('buffer', 'NOUN'), ('can', 'AUX'), ('be', 'AUX'), ('represented', 'VERB'), ('as', 'ADP'), ('eight', 'NUM'), ('64', 'NUM'), ('-', 'PUNCT'), ('bit', 'NOUN'), ('registers', 'NOUN'), ('(', 'PUNCT'), ('a', 'PROPN'), (',', 'PUNCT'), ('b', 'NOUN'), (',', 'PUNCT'), ('c', 'PROPN'), (',', 'PUNCT'), ('d', 'PROPN'), (',', 'PUNCT'), ('e', 'NOUN'), (',', 'PUNCT'), ('f', 'PROPN'), (',', 'PUNCT'), ('g', 'NOUN'), (',', 'PUNCT'), ('h', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('The', 'DT'), ('buffer', 'NN'), ('can', 'MD'), ('be', 'VB'), ('represented', 'VBN'), ('as', 'IN'), ('eight', 'CD'), ('64', 'CD'), ('-', 'HYPH'), ('bit', 'NN'), ('registers', 'NNS'), ('(', '-LRB-'), ('a', 'NNP'), (',', ','), ('b', 'NN'), (',', ','), ('c', 'NNP'), (',', ','), ('d', 'NNP'), (',', ','), ('e', 'NN'), (',', ','), ('f', 'NNP'), (',', ','), ('g', 'NNS'), (',', ','), ('h', 'CD'), (')', '-RRB-'), ('.', '.')] 

 Lemmas are: 
>> [('The', 'the'), ('buffer', 'buffer'), ('can', 'can'), ('be', 'be'), ('represented', 'represent'), ('as', 'as'), ('eight', 'eight'), ('64', '64'), ('-', '-'), ('bit', 'bit'), ('registers', 'register'), ('(', '('), ('a', 'a'), (',', ','), ('b', 'b'), (',', ','), ('c', 'c'), (',', ','), ('d', 'd'), (',', ','), ('e', 'e'), (',', ','), ('f', 'for'), (',', ','), ('g', 'gram'), (',', ','), ('h', 'h'), (')', ')'), ('.', '.')] 

 Dependency tags are: 
>> [(('The', 'buffer'), 'det'), (('buffer', 'represented'), 'nsubj:pass'), (('can', 'represented'), 'aux'), (('be', 'represented'), 'aux:pass'), (('represented', 'root'), 'root'), (('as', 'registers'), 'case'), (('eight', 'registers'), 'nummod'), (('64', 'bit'), 'nummod'), (('-', 'bit'), 'punct'), (('bit', 'registers'), 'compound'), (('registers', 'represented'), 'obl'), (('(', 'a'), 'punct'), (('a', 'registers'), 'appos'), ((',', 'a'), 'punct'), (('b', 'a'), 'conj'), ((',', 'a'), 'punct'), (('c', 'a'), 'conj'), ((',', 'd'), 'punct'), (('d', 'a'), 'conj'), ((',', 'e'), 'punct'), (('e', 'a'), 'conj'), ((',', 'f'), 'punct'), (('f', 'a'), 'conj'), ((',', 'g'), 'punct'), (('g', 'a'), 'conj'), ((',', 'h'), 'punct'), (('h', 'a'), 'dep'), ((')', 'a'), 'punct'), (('.', 'represented'), 'punct')]

 Named Entities are: 
>> [('eight 64-bit', 'QUANTITY')]

========================== Sentence 64 ===========================

 Unit-5  Cryptographic Hash Functions                                 Darshan Institute of Engineering & Technology   ‹#›  Step -4 Process message in 1024-bit (128-word) blocks 

Tokens are: 
>> ['Unit', '-5', 'Cryptographic', 'Hash', 'Functions', 'Darshan', 'Institute', 'of', 'Engineering', '&', 'Technology', '‹#›', 'Step', '-4', 'Process', 'message', 'in', '1024', '-', 'bit', '(', '128', '-', 'word', ')', 'blocks'] 

 UPOS tags are: 
>> [('Unit', 'NOUN'), ('-5', 'NUM'), ('Cryptographic', 'ADJ'), ('Hash', 'NOUN'), ('Functions', 'NOUN'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('of', 'ADP'), ('Engineering', 'NOUN'), ('&', 'CCONJ'), ('Technology', 'NOUN'), ('‹#›', 'NOUN'), ('Step', 'NOUN'), ('-4', 'NUM'), ('Process', 'NOUN'), ('message', 'NOUN'), ('in', 'ADP'), ('1024', 'NUM'), ('-', 'PUNCT'), ('bit', 'NOUN'), ('(', 'PUNCT'), ('128', 'NUM'), ('-', 'SYM'), ('word', 'NOUN'), (')', 'PUNCT'), ('blocks', 'NOUN')] 

 XPOS tags are: 
>> [('Unit', 'NN'), ('-5', 'CD'), ('Cryptographic', 'JJ'), ('Hash', 'NN'), ('Functions', 'NNS'), ('Darshan', 'NNP'), ('Institute', 'NNP'), ('of', 'IN'), ('Engineering', 'NN'), ('&', 'CC'), ('Technology', 'NN'), ('‹#›', 'NN'), ('Step', 'NN'), ('-4', 'CD'), ('Process', 'NN'), ('message', 'NN'), ('in', 'IN'), ('1024', 'CD'), ('-', ','), ('bit', 'NN'), ('(', '-LRB-'), ('128', 'CD'), ('-', 'SYM'), ('word', 'NN'), (')', '-RRB-'), ('blocks', 'NNS')] 

 Lemmas are: 
>> [('Unit', 'unit'), ('-5', '-5'), ('Cryptographic', 'Cryptographic'), ('Hash', 'hash'), ('Functions', 'function'), ('Darshan', 'Darshan'), ('Institute', 'Institute'), ('of', 'of'), ('Engineering', 'Engineering'), ('&', '&'), ('Technology', 'technology'), ('‹#›', '‹#›'), ('Step', 'step'), ('-4', '-4'), ('Process', 'process'), ('message', 'message'), ('in', 'in'), ('1024', '1024'), ('-', '-'), ('bit', 'bit'), ('(', '('), ('128', '128'), ('-', '-'), ('word', 'word'), (')', ')'), ('blocks', 'block')] 

 Dependency tags are: 
>> [(('Unit', 'root'), 'root'), (('-5', 'Functions'), 'nummod'), (('Cryptographic', 'Functions'), 'amod'), (('Hash', 'Functions'), 'compound'), (('Functions', 'Unit'), 'appos'), (('Darshan', 'Institute'), 'compound'), (('Institute', 'Unit'), 'appos'), (('of', 'Step'), 'case'), (('Engineering', '‹#›'), 'compound'), (('&', 'Technology'), 'cc'), (('Technology', 'Engineering'), 'conj'), (('‹#›', 'Step'), 'compound'), (('Step', 'Institute'), 'nmod'), (('-4', 'message'), 'nummod'), (('Process', 'message'), 'compound'), (('message', 'Step'), 'appos'), (('in', '1024'), 'case'), (('1024', 'message'), 'nmod'), (('-', 'bit'), 'punct'), (('bit', 'blocks'), 'nmod:npmod'), (('(', 'blocks'), 'punct'), (('128', 'blocks'), 'nummod'), (('-', 'word'), 'case'), (('word', '128'), 'nmod'), ((')', 'word'), 'punct'), (('blocks', 'message'), 'appos')]

 Named Entities are: 
>> [('Unit-5  Cryptographic Hash Functions                                 Darshan Institute of Engineering & Technology', 'ORG'), ('1024-bit', 'QUANTITY'), ('128-word', 'QUANTITY')]

========================== Sentence 65 ===========================

 The heart of the algorithm is a module that consists of 80 rounds; this module is labelled F  Unit-5  Cryptographic Hash Functions                                 Darshan Institute of Engineering & Technology   ‹#›   SHA-512 Processing of a Single 1024-Bit Block   SHA-512 Processing of a Single 1024-Bit Block Message schedule Mi Hi-1 a b c d e f g e 64 Round 0 K0 a b c d e f g e 64 Round 79 K79    W0 W79 + + + + + + + +  Hi  Unit-5  Cryptographic Hash Functions                                 Darshan Institute of Engineering & Technology   ‹#›  SHA-512 Processing of a Single 1024-Bit Block Each round takes as input the 512-bit buffer value, abcdefgh, and updates the contents of the buffer. 

Tokens are: 
>> ['The', 'heart', 'of', 'the', 'algorithm', 'is', 'a', 'module', 'that', 'consists', 'of', '80', 'rounds', ';', 'this', 'module', 'is', 'labelled', 'F', 'Unit', '-5', 'Cryptographic', 'Hash', 'Functions', 'Darshan', 'Institute', 'of', 'Engineering', '&', 'Technology', '‹#›', 'SHA-512', 'Processing', 'of', 'a', 'Single', '1024', '-', 'Bit', 'Block', 'SHA-512', 'Processing', 'of', 'a', 'Single', '1024', '-', 'Bit', 'Block', 'Message', 'schedule', 'Mi', 'Hi-1', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'e', '64', 'Round', '0', 'K0', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'e', '64', 'Round', '79', 'K79', 'W0', 'W79', '+', '+', '+', '+', '+', '+', '+', '+', 'Hi', 'Unit-5', 'Cryptographic', 'Hash', 'Functions', 'Darshan', 'Institute', 'of', 'Engineering', '&', 'Technology', '‹#›', 'SHA-512', 'Processing', 'of', 'a', 'Single', '1024', '-', 'Bit', 'Block', 'Each', 'round', 'takes', 'as', 'input', 'the', '512', '-', 'bit', 'buffer', 'value', ',', 'abcdefgh', ',', 'and', 'updates', 'the', 'contents', 'of', 'the', 'buffer', '.'] 

 UPOS tags are: 
>> [('The', 'DET'), ('heart', 'NOUN'), ('of', 'ADP'), ('the', 'DET'), ('algorithm', 'NOUN'), ('is', 'AUX'), ('a', 'DET'), ('module', 'NOUN'), ('that', 'PRON'), ('consists', 'VERB'), ('of', 'ADP'), ('80', 'NUM'), ('rounds', 'NOUN'), (';', 'PUNCT'), ('this', 'DET'), ('module', 'NOUN'), ('is', 'AUX'), ('labelled', 'VERB'), ('F', 'PROPN'), ('Unit', 'NOUN'), ('-5', 'NUM'), ('Cryptographic', 'ADJ'), ('Hash', 'NOUN'), ('Functions', 'NOUN'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('of', 'ADP'), ('Engineering', 'NOUN'), ('&', 'CCONJ'), ('Technology', 'NOUN'), ('‹#›', 'NOUN'), ('SHA-512', 'NOUN'), ('Processing', 'NOUN'), ('of', 'ADP'), ('a', 'DET'), ('Single', 'ADJ'), ('1024', 'NUM'), ('-', 'PUNCT'), ('Bit', 'NOUN'), ('Block', 'NOUN'), ('SHA-512', 'NOUN'), ('Processing', 'NOUN'), ('of', 'ADP'), ('a', 'DET'), ('Single', 'ADJ'), ('1024', 'NUM'), ('-', 'PUNCT'), ('Bit', 'NOUN'), ('Block', 'NOUN'), ('Message', 'NOUN'), ('schedule', 'NOUN'), ('Mi', 'NOUN'), ('Hi-1', 'NOUN'), ('a', 'DET'), ('b', 'NOUN'), ('c', 'NOUN'), ('d', 'NOUN'), ('e', 'NOUN'), ('f', 'NOUN'), ('g', 'NOUN'), ('e', 'NOUN'), ('64', 'NUM'), ('Round', 'NOUN'), ('0', 'NUM'), ('K0', 'NOUN'), ('a', 'NOUN'), ('b', 'NOUN'), ('c', 'NOUN'), ('d', 'NOUN'), ('e', 'NOUN'), ('f', 'NOUN'), ('g', 'NOUN'), ('e', 'NOUN'), ('64', 'NUM'), ('Round', 'NOUN'), ('79', 'NUM'), ('K79', 'NOUN'), ('W0', 'NOUN'), ('W79', 'NUM'), ('+', 'SYM'), ('+', 'SYM'), ('+', 'SYM'), ('+', 'SYM'), ('+', 'SYM'), ('+', 'SYM'), ('+', 'SYM'), ('+', 'SYM'), ('Hi', 'NOUN'), ('Unit-5', 'NOUN'), ('Cryptographic', 'ADJ'), ('Hash', 'NOUN'), ('Functions', 'NOUN'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('of', 'ADP'), ('Engineering', 'NOUN'), ('&', 'CCONJ'), ('Technology', 'NOUN'), ('‹#›', 'NOUN'), ('SHA-512', 'NOUN'), ('Processing', 'NOUN'), ('of', 'ADP'), ('a', 'DET'), ('Single', 'ADJ'), ('1024', 'NUM'), ('-', 'PUNCT'), ('Bit', 'NOUN'), ('Block', 'NOUN'), ('Each', 'DET'), ('round', 'NOUN'), ('takes', 'VERB'), ('as', 'ADP'), ('input', 'VERB'), ('the', 'DET'), ('512', 'NUM'), ('-', 'PUNCT'), ('bit', 'NOUN'), ('buffer', 'NOUN'), ('value', 'NOUN'), (',', 'PUNCT'), ('abcdefgh', 'NOUN'), (',', 'PUNCT'), ('and', 'CCONJ'), ('updates', 'VERB'), ('the', 'DET'), ('contents', 'NOUN'), ('of', 'ADP'), ('the', 'DET'), ('buffer', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('The', 'DT'), ('heart', 'NN'), ('of', 'IN'), ('the', 'DT'), ('algorithm', 'NN'), ('is', 'VBZ'), ('a', 'DT'), ('module', 'NN'), ('that', 'WDT'), ('consists', 'VBZ'), ('of', 'IN'), ('80', 'CD'), ('rounds', 'NNS'), (';', ','), ('this', 'DT'), ('module', 'NN'), ('is', 'VBZ'), ('labelled', 'VBN'), ('F', 'NNP'), ('Unit', 'NN'), ('-5', 'CD'), ('Cryptographic', 'JJ'), ('Hash', 'NN'), ('Functions', 'NNS'), ('Darshan', 'NNP'), ('Institute', 'NNP'), ('of', 'IN'), ('Engineering', 'NN'), ('&', 'CC'), ('Technology', 'NN'), ('‹#›', 'NN'), ('SHA-512', 'NN'), ('Processing', 'NN'), ('of', 'IN'), ('a', 'DT'), ('Single', 'JJ'), ('1024', 'CD'), ('-', 'HYPH'), ('Bit', 'NN'), ('Block', 'NN'), ('SHA-512', 'NN'), ('Processing', 'NN'), ('of', 'IN'), ('a', 'DT'), ('Single', 'JJ'), ('1024', 'CD'), ('-', 'HYPH'), ('Bit', 'NN'), ('Block', 'NN'), ('Message', 'NN'), ('schedule', 'NN'), ('Mi', 'NN'), ('Hi-1', 'NN'), ('a', 'DT'), ('b', 'NN'), ('c', 'NN'), ('d', 'NN'), ('e', 'NN'), ('f', 'NN'), ('g', 'NN'), ('e', 'NN'), ('64', 'CD'), ('Round', 'NN'), ('0', 'CD'), ('K0', 'NN'), ('a', 'NN'), ('b', 'NN'), ('c', 'NN'), ('d', 'NN'), ('e', 'NN'), ('f', 'NN'), ('g', 'NN'), ('e', 'NN'), ('64', 'CD'), ('Round', 'NN'), ('79', 'CD'), ('K79', 'NN'), ('W0', 'NN'), ('W79', 'CD'), ('+', 'SYM'), ('+', 'SYM'), ('+', 'SYM'), ('+', 'SYM'), ('+', 'SYM'), ('+', 'SYM'), ('+', 'SYM'), ('+', 'SYM'), ('Hi', 'NN'), ('Unit-5', 'NN'), ('Cryptographic', 'JJ'), ('Hash', 'NN'), ('Functions', 'NNS'), ('Darshan', 'NNP'), ('Institute', 'NNP'), ('of', 'IN'), ('Engineering', 'NN'), ('&', 'CC'), ('Technology', 'NN'), ('‹#›', 'NN'), ('SHA-512', 'NN'), ('Processing', 'NN'), ('of', 'IN'), ('a', 'DT'), ('Single', 'JJ'), ('1024', 'CD'), ('-', 'HYPH'), ('Bit', 'NN'), ('Block', 'NN'), ('Each', 'DT'), ('round', 'NN'), ('takes', 'VBZ'), ('as', 'IN'), ('input', 'VB'), ('the', 'DT'), ('512', 'CD'), ('-', 'HYPH'), ('bit', 'NN'), ('buffer', 'NN'), ('value', 'NN'), (',', ','), ('abcdefgh', 'NN'), (',', ','), ('and', 'CC'), ('updates', 'VBZ'), ('the', 'DT'), ('contents', 'NNS'), ('of', 'IN'), ('the', 'DT'), ('buffer', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('The', 'the'), ('heart', 'heart'), ('of', 'of'), ('the', 'the'), ('algorithm', 'algorithm'), ('is', 'be'), ('a', 'a'), ('module', 'module'), ('that', 'that'), ('consists', 'consist'), ('of', 'of'), ('80', '80'), ('rounds', 'round'), (';', ';'), ('this', 'this'), ('module', 'module'), ('is', 'be'), ('labelled', 'label'), ('F', 'F'), ('Unit', 'unit'), ('-5', '-5'), ('Cryptographic', 'Cryptographic'), ('Hash', 'hash'), ('Functions', 'function'), ('Darshan', 'Darshan'), ('Institute', 'Institute'), ('of', 'of'), ('Engineering', 'Engineering'), ('&', '&'), ('Technology', 'technology'), ('‹#›', '‹#›'), ('SHA-512', 'sha-512'), ('Processing', 'processing'), ('of', 'of'), ('a', 'a'), ('Single', 'single'), ('1024', '1024'), ('-', '-'), ('Bit', 'bit'), ('Block', 'block'), ('SHA-512', 'sha-512'), ('Processing', 'processing'), ('of', 'of'), ('a', 'a'), ('Single', 'single'), ('1024', '1024'), ('-', '-'), ('Bit', 'bit'), ('Block', 'block'), ('Message', 'message'), ('schedule', 'schedule'), ('Mi', 'mi'), ('Hi-1', 'hi-1'), ('a', 'a'), ('b', 'b'), ('c', 'c'), ('d', 'd'), ('e', 'e'), ('f', 'f'), ('g', 'gram'), ('e', 'e'), ('64', '64'), ('Round', 'round'), ('0', '0'), ('K0', 'k0'), ('a', 'a'), ('b', 'b'), ('c', 'c'), ('d', 'd'), ('e', 'e'), ('f', 'f'), ('g', 'gram'), ('e', 'e'), ('64', '64'), ('Round', 'round'), ('79', '79'), ('K79', 'k79'), ('W0', 'w0'), ('W79', 'w79'), ('+', '+'), ('+', '+'), ('+', '+'), ('+', '+'), ('+', '+'), ('+', '+'), ('+', '+'), ('+', '+'), ('Hi', 'hi'), ('Unit-5', 'unciot'), ('Cryptographic', 'Cryptographic'), ('Hash', 'hash'), ('Functions', 'function'), ('Darshan', 'Darshan'), ('Institute', 'Institute'), ('of', 'of'), ('Engineering', 'Engineering'), ('&', '&'), ('Technology', 'technology'), ('‹#›', '‹#›'), ('SHA-512', 'sha-512'), ('Processing', 'processing'), ('of', 'of'), ('a', 'a'), ('Single', 'single'), ('1024', '1024'), ('-', '-'), ('Bit', 'bit'), ('Block', 'block'), ('Each', 'each'), ('round', 'round'), ('takes', 'take'), ('as', 'as'), ('input', 'input'), ('the', 'the'), ('512', '512'), ('-', '-'), ('bit', 'bit'), ('buffer', 'buffer'), ('value', 'value'), (',', ','), ('abcdefgh', 'abcdefgh'), (',', ','), ('and', 'and'), ('updates', 'update'), ('the', 'the'), ('contents', 'content'), ('of', 'of'), ('the', 'the'), ('buffer', 'buffer'), ('.', '.')] 

 Dependency tags are: 
>> [(('The', 'heart'), 'det'), (('heart', 'module'), 'nsubj'), (('of', 'algorithm'), 'case'), (('the', 'algorithm'), 'det'), (('algorithm', 'heart'), 'nmod'), (('is', 'module'), 'cop'), (('a', 'module'), 'det'), (('module', 'root'), 'root'), (('that', 'consists'), 'nsubj'), (('consists', 'module'), 'acl:relcl'), (('of', 'rounds'), 'case'), (('80', 'rounds'), 'nummod'), (('rounds', 'consists'), 'obl'), ((';', 'module'), 'punct'), (('this', 'module'), 'det'), (('module', 'labelled'), 'nsubj:pass'), (('is', 'labelled'), 'aux:pass'), (('labelled', 'module'), 'parataxis'), (('F', 'Unit'), 'compound'), (('Unit', 'Functions'), 'compound'), (('-5', 'Functions'), 'nummod'), (('Cryptographic', 'Functions'), 'amod'), (('Hash', 'Functions'), 'compound'), (('Functions', 'Institute'), 'compound'), (('Darshan', 'Institute'), 'compound'), (('Institute', 'labelled'), 'obj'), (('of', 'Engineering'), 'case'), (('Engineering', 'Institute'), 'nmod'), (('&', 'Technology'), 'cc'), (('Technology', 'Engineering'), 'conj'), (('‹#›', 'Processing'), 'compound'), (('SHA-512', 'Processing'), 'compound'), (('Processing', 'Institute'), 'conj'), (('of', 'Processing'), 'case'), (('a', 'Processing'), 'det'), (('Single', 'Processing'), 'amod'), (('1024', 'Bit'), 'nummod'), (('-', 'Bit'), 'punct'), (('Bit', 'Block'), 'compound'), (('Block', 'Processing'), 'compound'), (('SHA-512', 'Processing'), 'compound'), (('Processing', 'Processing'), 'nmod'), (('of', 'schedule'), 'case'), (('a', 'schedule'), 'det'), (('Single', 'schedule'), 'amod'), (('1024', 'Bit'), 'nummod'), (('-', 'Bit'), 'punct'), (('Bit', 'Block'), 'compound'), (('Block', 'schedule'), 'compound'), (('Message', 'schedule'), 'compound'), (('schedule', 'Processing'), 'nmod'), (('Mi', 'schedule'), 'compound'), (('Hi-1', 'schedule'), 'appos'), (('a', 'b'), 'det'), (('b', 'c'), 'compound'), (('c', 'labelled'), 'parataxis'), (('d', 'c'), 'compound'), (('e', 'c'), 'compound'), (('f', 'e'), 'compound'), (('g', 'e'), 'compound'), (('e', 'c'), 'compound'), (('64', 'Round'), 'nummod'), (('Round', 'K0'), 'compound'), (('0', 'Round'), 'nummod'), (('K0', 'labelled'), 'parataxis'), (('a', 'b'), 'compound'), (('b', 'labelled'), 'parataxis'), (('c', 'b'), 'compound'), (('d', 'e'), 'compound'), (('e', 'c'), 'compound'), (('f', 'e'), 'compound'), (('g', 'f'), 'compound'), (('e', 'e'), 'compound'), (('64', 'Round'), 'nummod'), (('Round', 'W0'), 'compound'), (('79', 'Round'), 'nummod'), (('K79', 'Round'), 'compound'), (('W0', 'e'), 'compound'), (('W79', 'W0'), 'nummod'), (('+', '+'), 'cc'), (('+', '+'), 'advmod'), (('+', 'W0'), 'advmod'), (('+', 'W0'), 'advmod'), (('+', '+'), 'advmod'), (('+', 'Hi'), 'cc'), (('+', 'Hi'), 'advmod'), (('+', 'Hi'), 'cc'), (('Hi', 'W0'), 'conj'), (('Unit-5', 'Functions'), 'compound'), (('Cryptographic', 'Functions'), 'amod'), (('Hash', 'Functions'), 'compound'), (('Functions', 'Institute'), 'compound'), (('Darshan', 'Institute'), 'compound'), (('Institute', 'Hi'), 'appos'), (('of', 'Engineering'), 'case'), (('Engineering', 'Institute'), 'nmod'), (('&', 'Technology'), 'cc'), (('Technology', 'Engineering'), 'conj'), (('‹#›', 'Processing'), 'compound'), (('SHA-512', 'Processing'), 'compound'), (('Processing', 'Institute'), 'conj'), (('of', 'Block'), 'case'), (('a', 'Block'), 'det'), (('Single', 'Block'), 'amod'), (('1024', 'Bit'), 'nummod'), (('-', 'Bit'), 'punct'), (('Bit', 'Block'), 'compound'), (('Block', 'Processing'), 'nmod'), (('Each', 'round'), 'det'), (('round', 'takes'), 'nsubj'), (('takes', 'Processing'), 'acl:relcl'), (('as', 'input'), 'mark'), (('input', 'takes'), 'advcl'), (('the', 'value'), 'det'), (('512', 'bit'), 'nummod'), (('-', 'bit'), 'punct'), (('bit', 'value'), 'compound'), (('buffer', 'value'), 'compound'), (('value', 'input'), 'obj'), ((',', 'abcdefgh'), 'punct'), (('abcdefgh', 'value'), 'conj'), ((',', 'updates'), 'punct'), (('and', 'updates'), 'cc'), (('updates', 'takes'), 'conj'), (('the', 'contents'), 'det'), (('contents', 'updates'), 'obj'), (('of', 'buffer'), 'case'), (('the', 'buffer'), 'det'), (('buffer', 'contents'), 'nmod'), (('.', 'module'), 'punct')]

 Named Entities are: 
>> [('80', 'CARDINAL'), ('1024', 'CARDINAL'), ('512', 'CARDINAL')]

========================== Sentence 66 ===========================

 At input to the first round, the buffer has the value of the intermediate hash value, Hi-1. 

Tokens are: 
>> ['At', 'input', 'to', 'the', 'first', 'round', ',', 'the', 'buffer', 'has', 'the', 'value', 'of', 'the', 'intermediate', 'hash', 'value', ',', 'Hi', '-', '1', '.'] 

 UPOS tags are: 
>> [('At', 'ADP'), ('input', 'NOUN'), ('to', 'ADP'), ('the', 'DET'), ('first', 'ADJ'), ('round', 'NOUN'), (',', 'PUNCT'), ('the', 'DET'), ('buffer', 'NOUN'), ('has', 'VERB'), ('the', 'DET'), ('value', 'NOUN'), ('of', 'ADP'), ('the', 'DET'), ('intermediate', 'ADJ'), ('hash', 'NOUN'), ('value', 'NOUN'), (',', 'PUNCT'), ('Hi', 'INTJ'), ('-', 'SYM'), ('1', 'NUM'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('At', 'IN'), ('input', 'NN'), ('to', 'IN'), ('the', 'DT'), ('first', 'JJ'), ('round', 'NN'), (',', ','), ('the', 'DT'), ('buffer', 'NN'), ('has', 'VBZ'), ('the', 'DT'), ('value', 'NN'), ('of', 'IN'), ('the', 'DT'), ('intermediate', 'JJ'), ('hash', 'NN'), ('value', 'NN'), (',', ','), ('Hi', 'UH'), ('-', 'SYM'), ('1', 'CD'), ('.', '.')] 

 Lemmas are: 
>> [('At', 'at'), ('input', 'input'), ('to', 'to'), ('the', 'the'), ('first', 'first'), ('round', 'round'), (',', ','), ('the', 'the'), ('buffer', 'buffer'), ('has', 'have'), ('the', 'the'), ('value', 'value'), ('of', 'of'), ('the', 'the'), ('intermediate', 'intermediate'), ('hash', 'hash'), ('value', 'value'), (',', ','), ('Hi', 'hi'), ('-', '-'), ('1', '1'), ('.', '.')] 

 Dependency tags are: 
>> [(('At', 'input'), 'case'), (('input', 'has'), 'obl'), (('to', 'round'), 'case'), (('the', 'round'), 'det'), (('first', 'round'), 'amod'), (('round', 'input'), 'nmod'), ((',', 'has'), 'punct'), (('the', 'buffer'), 'det'), (('buffer', 'has'), 'nsubj'), (('has', 'root'), 'root'), (('the', 'value'), 'det'), (('value', 'has'), 'obj'), (('of', 'value'), 'case'), (('the', 'value'), 'det'), (('intermediate', 'value'), 'amod'), (('hash', 'value'), 'compound'), (('value', 'value'), 'nmod'), ((',', 'Hi'), 'punct'), (('Hi', 'has'), 'discourse'), (('-', '1'), 'case'), (('1', 'Hi'), 'nmod'), (('.', 'has'), 'punct')]

 Named Entities are: 
>> [('first', 'ORDINAL')]

========================== Sentence 67 ===========================

 Each round t makes use of a 64-bit value 

Tokens are: 
>> ['Each', 'round', 't', 'makes', 'use', 'of', 'a', '64', '-', 'bit', 'value'] 

 UPOS tags are: 
>> [('Each', 'DET'), ('round', 'NOUN'), ('t', 'NOUN'), ('makes', 'VERB'), ('use', 'NOUN'), ('of', 'ADP'), ('a', 'DET'), ('64', 'NUM'), ('-', 'PUNCT'), ('bit', 'NOUN'), ('value', 'NOUN')] 

 XPOS tags are: 
>> [('Each', 'DT'), ('round', 'NN'), ('t', 'NN'), ('makes', 'VBZ'), ('use', 'NN'), ('of', 'IN'), ('a', 'DT'), ('64', 'CD'), ('-', 'HYPH'), ('bit', 'NN'), ('value', 'NN')] 

 Lemmas are: 
>> [('Each', 'each'), ('round', 'round'), ('t', 't'), ('makes', 'make'), ('use', 'use'), ('of', 'of'), ('a', 'a'), ('64', '64'), ('-', '-'), ('bit', 'bit'), ('value', 'value')] 

 Dependency tags are: 
>> [(('Each', 't'), 'det'), (('round', 't'), 'compound'), (('t', 'makes'), 'nsubj'), (('makes', 'root'), 'root'), (('use', 'makes'), 'obj'), (('of', 'value'), 'case'), (('a', 'value'), 'det'), (('64', 'bit'), 'nummod'), (('-', 'bit'), 'punct'), (('bit', 'value'), 'compound'), (('value', 'use'), 'nmod')]

 Named Entities are: 
>> [('64-bit', 'QUANTITY')]

========================== Sentence 68 ===========================

 Wt, derived from the current 1024-bit block being processed. 

Tokens are: 
>> ['Wt', ',', 'derived', 'from', 'the', 'current', '1024', '-', 'bit', 'block', 'being', 'processed', '.'] 

 UPOS tags are: 
>> [('Wt', 'PROPN'), (',', 'PUNCT'), ('derived', 'VERB'), ('from', 'ADP'), ('the', 'DET'), ('current', 'ADJ'), ('1024', 'NUM'), ('-', 'PUNCT'), ('bit', 'NOUN'), ('block', 'NOUN'), ('being', 'AUX'), ('processed', 'VERB'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Wt', 'NNP'), (',', ','), ('derived', 'VBN'), ('from', 'IN'), ('the', 'DT'), ('current', 'JJ'), ('1024', 'CD'), ('-', 'HYPH'), ('bit', 'NN'), ('block', 'NN'), ('being', 'VBG'), ('processed', 'VBN'), ('.', '.')] 

 Lemmas are: 
>> [('Wt', 'Wt'), (',', ','), ('derived', 'derive'), ('from', 'from'), ('the', 'the'), ('current', 'current'), ('1024', '1024'), ('-', '-'), ('bit', 'bit'), ('block', 'block'), ('being', 'be'), ('processed', 'process'), ('.', '.')] 

 Dependency tags are: 
>> [(('Wt', 'root'), 'root'), ((',', 'derived'), 'punct'), (('derived', 'Wt'), 'acl'), (('from', 'block'), 'case'), (('the', 'block'), 'det'), (('current', 'block'), 'amod'), (('1024', 'bit'), 'nummod'), (('-', 'bit'), 'punct'), (('bit', 'block'), 'compound'), (('block', 'derived'), 'obl'), (('being', 'processed'), 'aux:pass'), (('processed', 'block'), 'acl'), (('.', 'Wt'), 'punct')]

 Named Entities are: 
>> [('1024-bit', 'QUANTITY')]

========================== Sentence 69 ===========================

 The output of the eightieth round is added to the input to the first round (Hi-1) to produce Hi.  Unit-5  Cryptographic Hash Functions                                 Darshan Institute of Engineering & Technology   ‹#›  Step – 5 Output  After all N 1024-bit blocks have been processed, the output from the Nth stage is the 512-bit message digest  Unit-5  Cryptographic Hash Functions                                 Darshan Institute of Engineering & Technology   ‹#›   SHA-512 Round Function   SHA-512 Round Function – Cont… a b c d e f g h b c d e f g h a Ʃ + + Maj + Ʃ Ch + + + Wt + Kt  Unit-5  Cryptographic Hash Functions                                 Darshan Institute of Engineering & Technology   ‹#›               SHA-512 Round Function Elements Maj(a,b,c) = (a AND b) XOR (a AND c) XOR (b AND c) 

Tokens are: 
>> ['The', 'output', 'of', 'the', 'eightieth', 'round', 'is', 'added', 'to', 'the', 'input', 'to', 'the', 'first', 'round', '(', 'Hi', '-', '1', ')', 'to', 'produce', 'Hi.', 'Unit', '-5', 'Cryptographic', 'Hash', 'Functions', 'Darshan', 'Institute', 'of', 'Engineering', '&', 'Technology', '‹#›', 'Step', '–', '5', 'Output', 'After', 'all', 'N', '1024', '-', 'bit', 'blocks', 'have', 'been', 'processed', ',', 'the', 'output', 'from', 'the', 'Nth', 'stage', 'is', 'the', '512', '-', 'bit', 'message', 'digest', 'Unit', '-5', 'Cryptographic', 'Hash', 'Functions', 'Darshan', 'Institute', 'of', 'Engineering', '&', 'Technology', '‹#›', 'SHA-512', 'Round', 'Function', 'SHA-512', 'Round', 'Function', '–', 'Cont', '…', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'a', 'Ʃ', '+', '+', 'Maj', '+', 'Ʃ', 'Ch', '+', '+', '+', 'Wt', '+', 'Kt', 'Unit', '-5', 'Cryptographic', 'Hash', 'Functions', 'Darshan', 'Institute', 'of', 'Engineering', '&', 'Technology', '‹#›', 'SHA-512', 'Round', 'Function', 'Elements', 'Maj', '(', 'a', ',', 'b', ',', 'c', ')', '=', '(', 'a', 'AND', 'b)', 'XOR', '(', 'a', 'AND', 'c)', 'XOR', '(', 'b', 'AND', 'c)'] 

 UPOS tags are: 
>> [('The', 'DET'), ('output', 'NOUN'), ('of', 'ADP'), ('the', 'DET'), ('eightieth', 'ADJ'), ('round', 'NOUN'), ('is', 'AUX'), ('added', 'VERB'), ('to', 'ADP'), ('the', 'DET'), ('input', 'NOUN'), ('to', 'ADP'), ('the', 'DET'), ('first', 'ADJ'), ('round', 'NOUN'), ('(', 'PUNCT'), ('Hi', 'PROPN'), ('-', 'SYM'), ('1', 'NUM'), (')', 'PUNCT'), ('to', 'PART'), ('produce', 'VERB'), ('Hi.', 'PROPN'), ('Unit', 'NOUN'), ('-5', 'NUM'), ('Cryptographic', 'ADJ'), ('Hash', 'PROPN'), ('Functions', 'PROPN'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('of', 'ADP'), ('Engineering', 'PROPN'), ('&', 'CCONJ'), ('Technology', 'PROPN'), ('‹#›', 'PROPN'), ('Step', 'NOUN'), ('–', 'SYM'), ('5', 'NUM'), ('Output', 'NOUN'), ('After', 'ADP'), ('all', 'DET'), ('N', 'NOUN'), ('1024', 'NUM'), ('-', 'PUNCT'), ('bit', 'NOUN'), ('blocks', 'NOUN'), ('have', 'AUX'), ('been', 'AUX'), ('processed', 'VERB'), (',', 'PUNCT'), ('the', 'DET'), ('output', 'NOUN'), ('from', 'ADP'), ('the', 'DET'), ('Nth', 'NOUN'), ('stage', 'NOUN'), ('is', 'AUX'), ('the', 'DET'), ('512', 'NUM'), ('-', 'PUNCT'), ('bit', 'NOUN'), ('message', 'NOUN'), ('digest', 'NOUN'), ('Unit', 'NOUN'), ('-5', 'NUM'), ('Cryptographic', 'ADJ'), ('Hash', 'NOUN'), ('Functions', 'NOUN'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('of', 'ADP'), ('Engineering', 'NOUN'), ('&', 'CCONJ'), ('Technology', 'NOUN'), ('‹#›', 'NOUN'), ('SHA-512', 'PROPN'), ('Round', 'PROPN'), ('Function', 'NOUN'), ('SHA-512', 'NOUN'), ('Round', 'PROPN'), ('Function', 'NOUN'), ('–', 'PUNCT'), ('Cont', 'NOUN'), ('…', 'PUNCT'), ('a', 'SYM'), ('b', 'NOUN'), ('c', 'NOUN'), ('d', 'NOUN'), ('e', 'NOUN'), ('f', 'NOUN'), ('g', 'NOUN'), ('h', 'NOUN'), ('b', 'NOUN'), ('c', 'NOUN'), ('d', 'NOUN'), ('e', 'NOUN'), ('f', 'NOUN'), ('g', 'NOUN'), ('h', 'NOUN'), ('a', 'PUNCT'), ('Ʃ', 'NOUN'), ('+', 'SYM'), ('+', 'SYM'), ('Maj', 'NOUN'), ('+', 'SYM'), ('Ʃ', 'NOUN'), ('Ch', 'NOUN'), ('+', 'SYM'), ('+', 'SYM'), ('+', 'SYM'), ('Wt', 'NOUN'), ('+', 'SYM'), ('Kt', 'NOUN'), ('Unit', 'NOUN'), ('-5', 'NUM'), ('Cryptographic', 'ADJ'), ('Hash', 'NOUN'), ('Functions', 'NOUN'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('of', 'ADP'), ('Engineering', 'NOUN'), ('&', 'CCONJ'), ('Technology', 'NOUN'), ('‹#›', 'NOUN'), ('SHA-512', 'NOUN'), ('Round', 'NOUN'), ('Function', 'NOUN'), ('Elements', 'NOUN'), ('Maj', 'PROPN'), ('(', 'PUNCT'), ('a', 'NUM'), (',', 'PUNCT'), ('b', 'NUM'), (',', 'PUNCT'), ('c', 'NOUN'), (')', 'PUNCT'), ('=', 'PUNCT'), ('(', 'PUNCT'), ('a', 'DET'), ('AND', 'CCONJ'), ('b)', 'NOUN'), ('XOR', 'NOUN'), ('(', 'PUNCT'), ('a', 'DET'), ('AND', 'CCONJ'), ('c)', 'NOUN'), ('XOR', 'NOUN'), ('(', 'PUNCT'), ('b', 'NOUN'), ('AND', 'CCONJ'), ('c)', 'NOUN')] 

 XPOS tags are: 
>> [('The', 'DT'), ('output', 'NN'), ('of', 'IN'), ('the', 'DT'), ('eightieth', 'JJ'), ('round', 'NN'), ('is', 'VBZ'), ('added', 'VBN'), ('to', 'IN'), ('the', 'DT'), ('input', 'NN'), ('to', 'IN'), ('the', 'DT'), ('first', 'JJ'), ('round', 'NN'), ('(', '-LRB-'), ('Hi', 'NNP'), ('-', 'SYM'), ('1', 'CD'), (')', '-RRB-'), ('to', 'TO'), ('produce', 'VB'), ('Hi.', 'NNP'), ('Unit', 'NN'), ('-5', 'CD'), ('Cryptographic', 'NNP'), ('Hash', 'NNP'), ('Functions', 'NNPS'), ('Darshan', 'NNP'), ('Institute', 'NNP'), ('of', 'IN'), ('Engineering', 'NNP'), ('&', 'CC'), ('Technology', 'NNP'), ('‹#›', 'NNP'), ('Step', 'NN'), ('–', 'SYM'), ('5', 'CD'), ('Output', 'NN'), ('After', 'IN'), ('all', 'DT'), ('N', 'NN'), ('1024', 'CD'), ('-', 'HYPH'), ('bit', 'NN'), ('blocks', 'NNS'), ('have', 'VBP'), ('been', 'VBN'), ('processed', 'VBN'), (',', ','), ('the', 'DT'), ('output', 'NN'), ('from', 'IN'), ('the', 'DT'), ('Nth', 'NN'), ('stage', 'NN'), ('is', 'VBZ'), ('the', 'DT'), ('512', 'CD'), ('-', 'HYPH'), ('bit', 'NN'), ('message', 'NN'), ('digest', 'NN'), ('Unit', 'NN'), ('-5', 'CD'), ('Cryptographic', 'JJ'), ('Hash', 'NN'), ('Functions', 'NNS'), ('Darshan', 'NNP'), ('Institute', 'NNP'), ('of', 'IN'), ('Engineering', 'NN'), ('&', 'CC'), ('Technology', 'NN'), ('‹#›', 'NN'), ('SHA-512', 'NNP'), ('Round', 'NNP'), ('Function', 'NN'), ('SHA-512', 'NN'), ('Round', 'NNP'), ('Function', 'NN'), ('–', ','), ('Cont', 'NN'), ('…', ','), ('a', 'SYM'), ('b', 'NN'), ('c', 'NN'), ('d', 'NN'), ('e', 'NN'), ('f', 'NN'), ('g', 'NN'), ('h', 'NN'), ('b', 'NN'), ('c', 'NN'), ('d', 'NN'), ('e', 'NN'), ('f', 'NN'), ('g', 'NN'), ('h', 'NN'), ('a', '-RRB-'), ('Ʃ', 'NN'), ('+', 'SYM'), ('+', 'SYM'), ('Maj', 'NN'), ('+', 'SYM'), ('Ʃ', 'NN'), ('Ch', 'NN'), ('+', 'SYM'), ('+', 'SYM'), ('+', 'SYM'), ('Wt', 'NN'), ('+', 'SYM'), ('Kt', 'NN'), ('Unit', 'NN'), ('-5', 'CD'), ('Cryptographic', 'JJ'), ('Hash', 'NN'), ('Functions', 'NNS'), ('Darshan', 'NNP'), ('Institute', 'NNP'), ('of', 'IN'), ('Engineering', 'NN'), ('&', 'CC'), ('Technology', 'NN'), ('‹#›', 'NN'), ('SHA-512', 'NN'), ('Round', 'NN'), ('Function', 'NN'), ('Elements', 'NNS'), ('Maj', 'NNP'), ('(', '-LRB-'), ('a', 'LS'), (',', ','), ('b', 'CD'), (',', ','), ('c', 'NN'), (')', '-RRB-'), ('=', ','), ('(', '-LRB-'), ('a', 'DT'), ('AND', 'CC'), ('b)', 'NN'), ('XOR', 'NN'), ('(', '-LRB-'), ('a', 'DT'), ('AND', 'CC'), ('c)', 'NN'), ('XOR', 'NN'), ('(', '-LRB-'), ('b', 'NN'), ('AND', 'CC'), ('c)', 'NN')] 

 Lemmas are: 
>> [('The', 'the'), ('output', 'output'), ('of', 'of'), ('the', 'the'), ('eightieth', 'eightieth'), ('round', 'round'), ('is', 'be'), ('added', 'add'), ('to', 'to'), ('the', 'the'), ('input', 'input'), ('to', 'to'), ('the', 'the'), ('first', 'first'), ('round', 'round'), ('(', '('), ('Hi', 'hi'), ('-', '-'), ('1', '1'), (')', ')'), ('to', 'to'), ('produce', 'produce'), ('Hi.', 'Hi.'), ('Unit', 'unit'), ('-5', '-5'), ('Cryptographic', 'Cryptographic'), ('Hash', 'hash'), ('Functions', 'Function'), ('Darshan', 'Darshan'), ('Institute', 'Institute'), ('of', 'of'), ('Engineering', 'Engineering'), ('&', '&'), ('Technology', 'Technology'), ('‹#›', '‹#›'), ('Step', 'step'), ('–', '-'), ('5', '5'), ('Output', 'output'), ('After', 'after'), ('all', 'all'), ('N', 'N'), ('1024', '1024'), ('-', '-'), ('bit', 'bit'), ('blocks', 'block'), ('have', 'have'), ('been', 'be'), ('processed', 'process'), (',', ','), ('the', 'the'), ('output', 'output'), ('from', 'from'), ('the', 'the'), ('Nth', 'nth'), ('stage', 'stage'), ('is', 'be'), ('the', 'the'), ('512', '512'), ('-', '-'), ('bit', 'bit'), ('message', 'message'), ('digest', 'digest'), ('Unit', 'unit'), ('-5', '-5'), ('Cryptographic', 'Cryptographic'), ('Hash', 'hash'), ('Functions', 'function'), ('Darshan', 'Darshan'), ('Institute', 'Institute'), ('of', 'of'), ('Engineering', 'Engineering'), ('&', '&'), ('Technology', 'technology'), ('‹#›', '‹#›'), ('SHA-512', 'SHA-512'), ('Round', 'Round'), ('Function', 'function'), ('SHA-512', 'sha-512'), ('Round', 'Round'), ('Function', 'function'), ('–', '-'), ('Cont', 'cont'), ('…', '…'), ('a', 'a'), ('b', 'b'), ('c', 'c'), ('d', 'd'), ('e', 'e'), ('f', 'f'), ('g', 'gram'), ('h', 'h'), ('b', 'b'), ('c', 'c'), ('d', 'd'), ('e', 'e'), ('f', 'f'), ('g', 'gram'), ('h', 'h'), ('a', 'a'), ('Ʃ', 'ʃ'), ('+', '+'), ('+', '+'), ('Maj', 'maj'), ('+', '+'), ('Ʃ', 'ʃ'), ('Ch', 'ch'), ('+', '+'), ('+', '+'), ('+', '+'), ('Wt', 'wt'), ('+', '+'), ('Kt', 'kt'), ('Unit', 'unit'), ('-5', '-5'), ('Cryptographic', 'Cryptographic'), ('Hash', 'hash'), ('Functions', 'function'), ('Darshan', 'Darshan'), ('Institute', 'Institute'), ('of', 'of'), ('Engineering', 'Engineering'), ('&', '&'), ('Technology', 'technology'), ('‹#›', '‹#›'), ('SHA-512', 'sha-512'), ('Round', 'round'), ('Function', 'function'), ('Elements', 'element'), ('Maj', 'Maj'), ('(', '('), ('a', 'a'), (',', ','), ('b', 'b'), (',', ','), ('c', 'c'), (')', ')'), ('=', '='), ('(', '('), ('a', 'a'), ('AND', 'and'), ('b)', 'b)'), ('XOR', 'xor'), ('(', '('), ('a', 'a'), ('AND', 'and'), ('c)', 'c)'), ('XOR', 'xor'), ('(', '('), ('b', 'b'), ('AND', 'and'), ('c)', 'c)')] 

 Dependency tags are: 
>> [(('The', 'output'), 'det'), (('output', 'added'), 'nsubj:pass'), (('of', 'round'), 'case'), (('the', 'round'), 'det'), (('eightieth', 'round'), 'amod'), (('round', 'output'), 'nmod'), (('is', 'added'), 'aux:pass'), (('added', 'root'), 'root'), (('to', 'input'), 'case'), (('the', 'input'), 'det'), (('input', 'added'), 'obl'), (('to', 'round'), 'case'), (('the', 'round'), 'det'), (('first', 'round'), 'amod'), (('round', 'input'), 'nmod'), (('(', 'Hi'), 'punct'), (('Hi', 'round'), 'appos'), (('-', '1'), 'case'), (('1', 'Hi'), 'nmod'), ((')', 'Hi'), 'punct'), (('to', 'produce'), 'mark'), (('produce', 'added'), 'advcl'), (('Hi.', 'Unit'), 'compound'), (('Unit', 'Institute'), 'compound'), (('-5', 'Unit'), 'nummod'), (('Cryptographic', 'Functions'), 'amod'), (('Hash', 'Functions'), 'compound'), (('Functions', 'Institute'), 'compound'), (('Darshan', 'Institute'), 'compound'), (('Institute', 'produce'), 'obj'), (('of', '‹#›'), 'case'), (('Engineering', '‹#›'), 'compound'), (('&', 'Technology'), 'cc'), (('Technology', 'Engineering'), 'conj'), (('‹#›', 'Institute'), 'nmod'), (('Step', 'Institute'), 'nmod'), (('–', '5'), 'case'), (('5', 'Output'), 'nummod'), (('Output', 'Step'), 'nmod'), (('After', 'N'), 'case'), (('all', 'blocks'), 'det'), (('N', 'blocks'), 'compound'), (('1024', 'bit'), 'nummod'), (('-', 'bit'), 'punct'), (('bit', 'blocks'), 'compound'), (('blocks', 'processed'), 'nsubj:pass'), (('have', 'processed'), 'aux'), (('been', 'processed'), 'aux:pass'), (('processed', 'added'), 'conj'), ((',', 'processed'), 'punct'), (('the', 'output'), 'det'), (('output', 'processed'), 'nsubj:pass'), (('from', 'stage'), 'case'), (('the', 'stage'), 'det'), (('Nth', 'stage'), 'compound'), (('stage', 'output'), 'nmod'), (('is', 'Unit'), 'cop'), (('the', 'Unit'), 'det'), (('512', 'bit'), 'nummod'), (('-', 'bit'), 'punct'), (('bit', 'Unit'), 'compound'), (('message', 'Unit'), 'compound'), (('digest', 'Unit'), 'compound'), (('Unit', 'added'), 'parataxis'), (('-5', 'Unit'), 'nummod'), (('Cryptographic', 'Functions'), 'amod'), (('Hash', 'Functions'), 'compound'), (('Functions', 'Institute'), 'compound'), (('Darshan', 'Institute'), 'compound'), (('Institute', 'Unit'), 'conj'), (('of', 'Function'), 'case'), (('Engineering', 'Institute'), 'nmod'), (('&', 'Technology'), 'cc'), (('Technology', 'Engineering'), 'conj'), (('‹#›', 'Function'), 'compound'), (('SHA-512', 'Function'), 'compound'), (('Round', 'Function'), 'compound'), (('Function', 'Institute'), 'nmod'), (('SHA-512', 'Function'), 'compound'), (('Round', 'Function'), 'compound'), (('Function', 'Function'), 'nmod'), (('–', 'Function'), 'punct'), (('Cont', 'Function'), 'appos'), (('…', 'b'), 'punct'), (('a', 'b'), 'det'), (('b', 'Function'), 'compound'), (('c', 'b'), 'compound'), (('d', 'e'), 'compound'), (('e', 'b'), 'nmod'), (('f', 'b'), 'compound'), (('g', 'e'), 'compound'), (('h', 'b'), 'compound'), (('b', 'e'), 'compound'), (('c', 'b'), 'compound'), (('d', 'b'), 'compound'), (('e', 'b'), 'punct'), (('f', 'h'), 'compound'), (('g', 'h'), 'compound'), (('h', 'c'), 'compound'), (('a', 'Ʃ'), 'punct'), (('Ʃ', 'e'), 'compound'), (('+', 'Maj'), 'cc'), (('+', 'Maj'), 'cc'), (('Maj', 'Ʃ'), 'conj'), (('+', 'Ch'), 'cc'), (('Ʃ', 'Ch'), 'compound'), (('Ch', 'Maj'), 'conj'), (('+', 'Wt'), 'cc'), (('+', 'Wt'), 'cc'), (('+', 'Wt'), 'cc'), (('Wt', 'Ch'), 'conj'), (('+', 'Unit'), 'cc'), (('Kt', 'Unit'), 'compound'), (('Unit', 'Wt'), 'conj'), (('-5', 'Functions'), 'nummod'), (('Cryptographic', 'Functions'), 'amod'), (('Hash', 'Functions'), 'compound'), (('Functions', 'Institute'), 'compound'), (('Darshan', 'Institute'), 'compound'), (('Institute', 'Unit'), 'appos'), (('of', '‹#›'), 'case'), (('Engineering', '‹#›'), 'compound'), (('&', 'Technology'), 'cc'), (('Technology', 'Engineering'), 'conj'), (('‹#›', 'Elements'), 'compound'), (('SHA-512', 'Elements'), 'compound'), (('Round', 'Elements'), 'compound'), (('Function', 'Elements'), 'compound'), (('Elements', 'Institute'), 'nmod'), (('Maj', 'Elements'), 'flat'), (('(', 'a'), 'punct'), (('a', 'c'), 'nummod'), ((',', 'a'), 'punct'), (('b', 'c'), 'nummod'), ((',', 'c'), 'punct'), (('c', 'Elements'), 'appos'), ((')', 'c'), 'punct'), (('=', 'XOR'), 'punct'), (('(', 'XOR'), 'punct'), (('a', 'XOR'), 'det'), (('AND', 'b)'), 'cc'), (('b)', 'a'), 'conj'), (('XOR', 'Elements'), 'appos'), (('(', 'XOR'), 'punct'), (('a', 'XOR'), 'det'), (('AND', 'c)'), 'cc'), (('c)', 'a'), 'conj'), (('XOR', 'XOR'), 'appos'), (('(', 'b'), 'punct'), (('b', 'XOR'), 'appos'), (('AND', 'c)'), 'cc'), (('c)', 'b'), 'conj')]

 Named Entities are: 
>> [('eightieth', 'ORDINAL'), ('first', 'ORDINAL'), ('Hi.  Unit-5  Cryptographic Hash Functions                                 Darshan Institute of Engineering & Technology', 'ORG'), ('5', 'CARDINAL'), ('1024', 'CARDINAL'), ('Nth', 'LOC'), ('512', 'CARDINAL')]

========================== Sentence 70 ===========================

 Majority of arguments are true ∑(a) = ROTR(a,28) XOR ROTR(a,34) XOR ROTR(a,39) ∑(e) = ROTR(e,14) XOR ROTR(e,18) XOR ROTR(e,41) + = addition modulo 264 

Tokens are: 
>> ['Majority', 'of', 'arguments', 'are', 'true', '∑(', 'a', ')', '=', 'ROTR', '(', 'a', ',28', ')', 'XOR', 'ROTR', '(', 'a,34', ')', 'XOR', 'ROTR', '(', 'a,39', ')', '∑(', 'e', ')', '=', 'ROTR', '(', 'e', ',', '14', ')', 'XOR', 'ROTR', '(', 'e,18', ')', 'XOR', 'ROTR', '(', 'e,41', ')', '+', '=', 'addition', 'modulo', '264'] 

 UPOS tags are: 
>> [('Majority', 'NOUN'), ('of', 'ADP'), ('arguments', 'NOUN'), ('are', 'AUX'), ('true', 'ADJ'), ('∑(', 'PUNCT'), ('a', 'NUM'), (')', 'PUNCT'), ('=', 'PUNCT'), ('ROTR', 'NOUN'), ('(', 'PUNCT'), ('a', 'DET'), (',28', 'NUM'), (')', 'PUNCT'), ('XOR', 'NOUN'), ('ROTR', 'NOUN'), ('(', 'PUNCT'), ('a,34', 'NUM'), (')', 'PUNCT'), ('XOR', 'NOUN'), ('ROTR', 'NOUN'), ('(', 'PUNCT'), ('a,39', 'NUM'), (')', 'PUNCT'), ('∑(', 'PUNCT'), ('e', 'NOUN'), (')', 'PUNCT'), ('=', 'PUNCT'), ('ROTR', 'PROPN'), ('(', 'PUNCT'), ('e', 'NOUN'), (',', 'PUNCT'), ('14', 'NUM'), (')', 'PUNCT'), ('XOR', 'NOUN'), ('ROTR', 'NOUN'), ('(', 'PUNCT'), ('e,18', 'NUM'), (')', 'PUNCT'), ('XOR', 'NOUN'), ('ROTR', 'NOUN'), ('(', 'PUNCT'), ('e,41', 'NUM'), (')', 'PUNCT'), ('+', 'SYM'), ('=', 'SYM'), ('addition', 'NOUN'), ('modulo', 'NOUN'), ('264', 'NUM')] 

 XPOS tags are: 
>> [('Majority', 'NN'), ('of', 'IN'), ('arguments', 'NNS'), ('are', 'VBP'), ('true', 'JJ'), ('∑(', '-LRB-'), ('a', 'LS'), (')', '-RRB-'), ('=', ','), ('ROTR', 'NN'), ('(', '-LRB-'), ('a', 'DT'), (',28', 'CD'), (')', '-RRB-'), ('XOR', 'NN'), ('ROTR', 'NN'), ('(', '-LRB-'), ('a,34', 'CD'), (')', '-RRB-'), ('XOR', 'NN'), ('ROTR', 'NN'), ('(', '-LRB-'), ('a,39', 'CD'), (')', '-RRB-'), ('∑(', '-LRB-'), ('e', 'NN'), (')', '-RRB-'), ('=', ','), ('ROTR', 'NNP'), ('(', '-LRB-'), ('e', 'NN'), (',', ','), ('14', 'CD'), (')', '-RRB-'), ('XOR', 'NN'), ('ROTR', 'NN'), ('(', '-LRB-'), ('e,18', 'CD'), (')', '-RRB-'), ('XOR', 'NN'), ('ROTR', 'NN'), ('(', '-LRB-'), ('e,41', 'CD'), (')', '-RRB-'), ('+', 'SYM'), ('=', 'SYM'), ('addition', 'NN'), ('modulo', 'NN'), ('264', 'CD')] 

 Lemmas are: 
>> [('Majority', 'majority'), ('of', 'of'), ('arguments', 'argument'), ('are', 'be'), ('true', 'true'), ('∑(', '∑('), ('a', 'a'), (')', ')'), ('=', '='), ('ROTR', 'rotr'), ('(', '('), ('a', 'a'), (',28', ',28'), (')', ')'), ('XOR', 'xor'), ('ROTR', 'rotr'), ('(', '('), ('a,34', 'a34'), (')', ')'), ('XOR', 'xor'), ('ROTR', 'rotr'), ('(', '('), ('a,39', 'a39'), (')', ')'), ('∑(', '∑('), ('e', 'e'), (')', ')'), ('=', '='), ('ROTR', 'ROTR'), ('(', '('), ('e', 'e'), (',', ','), ('14', '14'), (')', ')'), ('XOR', 'xor'), ('ROTR', 'rotr'), ('(', '('), ('e,18', 'e,18'), (')', ')'), ('XOR', 'xor'), ('ROTR', 'rotr'), ('(', '('), ('e,41', 'e,41'), (')', ')'), ('+', '+'), ('=', '='), ('addition', 'addition'), ('modulo', 'modulo'), ('264', '264')] 

 Dependency tags are: 
>> [(('Majority', 'true'), 'nsubj'), (('of', 'arguments'), 'case'), (('arguments', 'Majority'), 'nmod'), (('are', 'true'), 'cop'), (('true', 'root'), 'root'), (('∑(', 'a'), 'punct'), (('a', 'true'), 'nummod'), ((')', 'a'), 'punct'), (('=', 'true'), 'punct'), (('ROTR', 'true'), 'parataxis'), (('(', 'ROTR'), 'punct'), (('a', 'ROTR'), 'det'), ((',28', 'ROTR'), 'nummod'), ((')', ',28'), 'punct'), (('XOR', 'ROTR'), 'compound'), (('ROTR', 'ROTR'), 'appos'), (('(', 'ROTR'), 'punct'), (('a,34', 'ROTR'), 'appos'), ((')', 'a,34'), 'punct'), (('XOR', 'ROTR'), 'compound'), (('ROTR', 'ROTR'), 'conj'), (('(', 'a,39'), 'punct'), (('a,39', 'ROTR'), 'appos'), ((')', 'a,39'), 'punct'), (('∑(', 'e'), 'punct'), (('e', 'ROTR'), 'appos'), ((')', 'e'), 'punct'), (('=', 'true'), 'punct'), (('ROTR', 'ROTR'), 'conj'), (('(', 'e'), 'punct'), (('e', 'ROTR'), 'appos'), ((',', 'e'), 'punct'), (('14', 'e'), 'nummod'), ((')', 'e'), 'punct'), (('XOR', 'ROTR'), 'compound'), (('ROTR', 'ROTR'), 'conj'), (('(', 'e,18'), 'punct'), (('e,18', 'ROTR'), 'nummod'), ((')', 'e,18'), 'punct'), (('XOR', 'ROTR'), 'compound'), (('ROTR', 'ROTR'), 'appos'), (('(', 'e,41'), 'punct'), (('e,41', 'ROTR'), 'appos'), ((')', 'e,41'), 'punct'), (('+', '='), 'cc'), (('=', 'ROTR'), 'conj'), (('addition', '='), 'obj'), (('modulo', '='), 'obj'), (('264', 'modulo'), 'nummod')]

 Named Entities are: 
>> [('264', 'CARDINAL')]

========================== Sentence 71 ===========================

 Kt  = a 64-bit additive constant 

Tokens are: 
>> ['Kt', '=', 'a', '64', '-', 'bit', 'additive', 'constant'] 

 UPOS tags are: 
>> [('Kt', 'NOUN'), ('=', 'PUNCT'), ('a', 'DET'), ('64', 'NUM'), ('-', 'PUNCT'), ('bit', 'NOUN'), ('additive', 'NOUN'), ('constant', 'ADJ')] 

 XPOS tags are: 
>> [('Kt', 'NN'), ('=', ','), ('a', 'DT'), ('64', 'CD'), ('-', 'HYPH'), ('bit', 'NN'), ('additive', 'NN'), ('constant', 'JJ')] 

 Lemmas are: 
>> [('Kt', 'kt'), ('=', '='), ('a', 'a'), ('64', '64'), ('-', '-'), ('bit', 'bit'), ('additive', 'additive'), ('constant', 'constant')] 

 Dependency tags are: 
>> [(('Kt', 'root'), 'root'), (('=', 'Kt'), 'punct'), (('a', 'additive'), 'det'), (('64', 'bit'), 'nummod'), (('-', 'bit'), 'punct'), (('bit', 'additive'), 'compound'), (('additive', 'Kt'), 'appos'), (('constant', 'additive'), 'amod')]

 Named Entities are: 
>> [('64-bit', 'QUANTITY')]

========================== Sentence 72 ===========================

 Wt = a 64-bit word derived from the current 512-bit input block. 

Tokens are: 
>> ['Wt', '=', 'a', '64', '-', 'bit', 'word', 'derived', 'from', 'the', 'current', '512', '-', 'bit', 'input', 'block', '.'] 

 UPOS tags are: 
>> [('Wt', 'NOUN'), ('=', 'PUNCT'), ('a', 'DET'), ('64', 'NUM'), ('-', 'PUNCT'), ('bit', 'NOUN'), ('word', 'NOUN'), ('derived', 'VERB'), ('from', 'ADP'), ('the', 'DET'), ('current', 'ADJ'), ('512', 'NUM'), ('-', 'PUNCT'), ('bit', 'NOUN'), ('input', 'NOUN'), ('block', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Wt', 'NN'), ('=', ','), ('a', 'DT'), ('64', 'CD'), ('-', 'HYPH'), ('bit', 'NN'), ('word', 'NN'), ('derived', 'VBN'), ('from', 'IN'), ('the', 'DT'), ('current', 'JJ'), ('512', 'CD'), ('-', 'HYPH'), ('bit', 'NN'), ('input', 'NN'), ('block', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('Wt', 'wt'), ('=', '='), ('a', 'a'), ('64', '64'), ('-', '-'), ('bit', 'bit'), ('word', 'word'), ('derived', 'derive'), ('from', 'from'), ('the', 'the'), ('current', 'current'), ('512', '512'), ('-', '-'), ('bit', 'bit'), ('input', 'input'), ('block', 'block'), ('.', '.')] 

 Dependency tags are: 
>> [(('Wt', 'root'), 'root'), (('=', 'Wt'), 'punct'), (('a', 'word'), 'det'), (('64', 'bit'), 'nummod'), (('-', 'bit'), 'punct'), (('bit', 'word'), 'compound'), (('word', 'Wt'), 'appos'), (('derived', 'word'), 'acl'), (('from', 'block'), 'case'), (('the', 'block'), 'det'), (('current', 'block'), 'amod'), (('512', 'bit'), 'nummod'), (('-', 'bit'), 'punct'), (('bit', 'block'), 'compound'), (('input', 'block'), 'compound'), (('block', 'derived'), 'obl'), (('.', 'Wt'), 'punct')]

 Named Entities are: 
>> [('64-bit', 'QUANTITY'), ('512-bit', 'QUANTITY')]

========================== Sentence 73 ===========================

 Unit-5  Cryptographic Hash Functions                                 Darshan Institute of Engineering & Technology   ‹#› 

Tokens are: 
>> ['Unit', '-5', 'Cryptographic', 'Hash', 'Functions', 'Darshan', 'Institute', 'of', 'Engineering', '&', 'Technology', '‹#›'] 

 UPOS tags are: 
>> [('Unit', 'NOUN'), ('-5', 'NUM'), ('Cryptographic', 'ADJ'), ('Hash', 'NOUN'), ('Functions', 'NOUN'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('of', 'ADP'), ('Engineering', 'NOUN'), ('&', 'CCONJ'), ('Technology', 'NOUN'), ('‹#›', 'NOUN')] 

 XPOS tags are: 
>> [('Unit', 'NN'), ('-5', 'CD'), ('Cryptographic', 'JJ'), ('Hash', 'NN'), ('Functions', 'NNS'), ('Darshan', 'NNP'), ('Institute', 'NNP'), ('of', 'IN'), ('Engineering', 'NN'), ('&', 'CC'), ('Technology', 'NN'), ('‹#›', 'NN')] 

 Lemmas are: 
>> [('Unit', 'unit'), ('-5', '-5'), ('Cryptographic', 'Cryptographic'), ('Hash', 'hash'), ('Functions', 'function'), ('Darshan', 'Darshan'), ('Institute', 'Institute'), ('of', 'of'), ('Engineering', 'Engineering'), ('&', '&'), ('Technology', 'technology'), ('‹#›', '‹#›')] 

 Dependency tags are: 
>> [(('Unit', 'root'), 'root'), (('-5', 'Unit'), 'nummod'), (('Cryptographic', 'Functions'), 'amod'), (('Hash', 'Functions'), 'compound'), (('Functions', 'Unit'), 'appos'), (('Darshan', 'Institute'), 'compound'), (('Institute', 'Unit'), 'appos'), (('of', '‹#›'), 'case'), (('Engineering', '‹#›'), 'compound'), (('&', 'Technology'), 'cc'), (('Technology', 'Engineering'), 'conj'), (('‹#›', 'Institute'), 'nmod')]

 Named Entities are: 
>> [('Unit-5  Cryptographic Hash Functions                                 Darshan Institute of Engineering & Technology', 'ORG')]