				 *** Text Processing using NLTK *** 


============================ Sentence 1 =============================

PowerPoint Presentation  Unit – 1 Introduction to Compiler Design dixita.kagathara@darshan.ac.in +91 - 97277 47317 (CE Department) Computer Engineering Department Prof. Dixita B. Kagathara Compiler Design (CD) GTU # 2170701   Darshan Institute of Engineering & Technology, Rajkot     Looping Topics to be covered  Translator Analysis synthesis model of compilation Phases of compiler Grouping of the Phases Difference between compiler & interpreter Context of compiler (Cousins of compiler) Pass structure Types of compiler            Translator   હેલ્લો        Translator A translator is a program that takes one form of program as input and converts it into another form. 


>> Tokens are: 
 ['PowerPoint', 'Presentation', 'Unit', '–', '1', 'Introduction', 'Compiler', 'Design', 'dixita.kagathara', '@', 'darshan.ac.in', '+91', '-', '97277', '47317', '(', 'CE', 'Department', ')', 'Computer', 'Engineering', 'Department', 'Prof.', 'Dixita', 'B.', 'Kagathara', 'Compiler', 'Design', '(', 'CD', ')', 'GTU', '#', '2170701', 'Darshan', 'Institute', 'Engineering', '&', 'Technology', ',', 'Rajkot', '\uf050', 'Looping', 'Topics', 'covered', 'Translator', 'Analysis', 'synthesis', 'model', 'compilation', 'Phases', 'compiler', 'Grouping', 'Phases', 'Difference', 'compiler', '&', 'interpreter', 'Context', 'compiler', '(', 'Cousins', 'compiler', ')', 'Pass', 'structure', 'Types', 'compiler', 'Translator', 'હેલ્લો', 'Translator', 'A', 'translator', 'program', 'takes', 'one', 'form', 'program', 'input', 'converts', 'another', 'form', '.']

>> Bigrams are: 
 [('PowerPoint', 'Presentation'), ('Presentation', 'Unit'), ('Unit', '–'), ('–', '1'), ('1', 'Introduction'), ('Introduction', 'Compiler'), ('Compiler', 'Design'), ('Design', 'dixita.kagathara'), ('dixita.kagathara', '@'), ('@', 'darshan.ac.in'), ('darshan.ac.in', '+91'), ('+91', '-'), ('-', '97277'), ('97277', '47317'), ('47317', '('), ('(', 'CE'), ('CE', 'Department'), ('Department', ')'), (')', 'Computer'), ('Computer', 'Engineering'), ('Engineering', 'Department'), ('Department', 'Prof.'), ('Prof.', 'Dixita'), ('Dixita', 'B.'), ('B.', 'Kagathara'), ('Kagathara', 'Compiler'), ('Compiler', 'Design'), ('Design', '('), ('(', 'CD'), ('CD', ')'), (')', 'GTU'), ('GTU', '#'), ('#', '2170701'), ('2170701', 'Darshan'), ('Darshan', 'Institute'), ('Institute', 'Engineering'), ('Engineering', '&'), ('&', 'Technology'), ('Technology', ','), (',', 'Rajkot'), ('Rajkot', '\uf050'), ('\uf050', 'Looping'), ('Looping', 'Topics'), ('Topics', 'covered'), ('covered', 'Translator'), ('Translator', 'Analysis'), ('Analysis', 'synthesis'), ('synthesis', 'model'), ('model', 'compilation'), ('compilation', 'Phases'), ('Phases', 'compiler'), ('compiler', 'Grouping'), ('Grouping', 'Phases'), ('Phases', 'Difference'), ('Difference', 'compiler'), ('compiler', '&'), ('&', 'interpreter'), ('interpreter', 'Context'), ('Context', 'compiler'), ('compiler', '('), ('(', 'Cousins'), ('Cousins', 'compiler'), ('compiler', ')'), (')', 'Pass'), ('Pass', 'structure'), ('structure', 'Types'), ('Types', 'compiler'), ('compiler', 'Translator'), ('Translator', 'હેલ્લો'), ('હેલ્લો', 'Translator'), ('Translator', 'A'), ('A', 'translator'), ('translator', 'program'), ('program', 'takes'), ('takes', 'one'), ('one', 'form'), ('form', 'program'), ('program', 'input'), ('input', 'converts'), ('converts', 'another'), ('another', 'form'), ('form', '.')]

>> Trigrams are: 
 [('PowerPoint', 'Presentation', 'Unit'), ('Presentation', 'Unit', '–'), ('Unit', '–', '1'), ('–', '1', 'Introduction'), ('1', 'Introduction', 'Compiler'), ('Introduction', 'Compiler', 'Design'), ('Compiler', 'Design', 'dixita.kagathara'), ('Design', 'dixita.kagathara', '@'), ('dixita.kagathara', '@', 'darshan.ac.in'), ('@', 'darshan.ac.in', '+91'), ('darshan.ac.in', '+91', '-'), ('+91', '-', '97277'), ('-', '97277', '47317'), ('97277', '47317', '('), ('47317', '(', 'CE'), ('(', 'CE', 'Department'), ('CE', 'Department', ')'), ('Department', ')', 'Computer'), (')', 'Computer', 'Engineering'), ('Computer', 'Engineering', 'Department'), ('Engineering', 'Department', 'Prof.'), ('Department', 'Prof.', 'Dixita'), ('Prof.', 'Dixita', 'B.'), ('Dixita', 'B.', 'Kagathara'), ('B.', 'Kagathara', 'Compiler'), ('Kagathara', 'Compiler', 'Design'), ('Compiler', 'Design', '('), ('Design', '(', 'CD'), ('(', 'CD', ')'), ('CD', ')', 'GTU'), (')', 'GTU', '#'), ('GTU', '#', '2170701'), ('#', '2170701', 'Darshan'), ('2170701', 'Darshan', 'Institute'), ('Darshan', 'Institute', 'Engineering'), ('Institute', 'Engineering', '&'), ('Engineering', '&', 'Technology'), ('&', 'Technology', ','), ('Technology', ',', 'Rajkot'), (',', 'Rajkot', '\uf050'), ('Rajkot', '\uf050', 'Looping'), ('\uf050', 'Looping', 'Topics'), ('Looping', 'Topics', 'covered'), ('Topics', 'covered', 'Translator'), ('covered', 'Translator', 'Analysis'), ('Translator', 'Analysis', 'synthesis'), ('Analysis', 'synthesis', 'model'), ('synthesis', 'model', 'compilation'), ('model', 'compilation', 'Phases'), ('compilation', 'Phases', 'compiler'), ('Phases', 'compiler', 'Grouping'), ('compiler', 'Grouping', 'Phases'), ('Grouping', 'Phases', 'Difference'), ('Phases', 'Difference', 'compiler'), ('Difference', 'compiler', '&'), ('compiler', '&', 'interpreter'), ('&', 'interpreter', 'Context'), ('interpreter', 'Context', 'compiler'), ('Context', 'compiler', '('), ('compiler', '(', 'Cousins'), ('(', 'Cousins', 'compiler'), ('Cousins', 'compiler', ')'), ('compiler', ')', 'Pass'), (')', 'Pass', 'structure'), ('Pass', 'structure', 'Types'), ('structure', 'Types', 'compiler'), ('Types', 'compiler', 'Translator'), ('compiler', 'Translator', 'હેલ્લો'), ('Translator', 'હેલ્લો', 'Translator'), ('હેલ્લો', 'Translator', 'A'), ('Translator', 'A', 'translator'), ('A', 'translator', 'program'), ('translator', 'program', 'takes'), ('program', 'takes', 'one'), ('takes', 'one', 'form'), ('one', 'form', 'program'), ('form', 'program', 'input'), ('program', 'input', 'converts'), ('input', 'converts', 'another'), ('converts', 'another', 'form'), ('another', 'form', '.')]

>> POS Tags are: 
 [('PowerPoint', 'NNP'), ('Presentation', 'NNP'), ('Unit', 'NNP'), ('–', 'VBD'), ('1', 'CD'), ('Introduction', 'NNP'), ('Compiler', 'NNP'), ('Design', 'NNP'), ('dixita.kagathara', 'NN'), ('@', 'NNP'), ('darshan.ac.in', 'NN'), ('+91', 'NNP'), ('-', ':'), ('97277', 'CD'), ('47317', 'CD'), ('(', '('), ('CE', 'NNP'), ('Department', 'NNP'), (')', ')'), ('Computer', 'NNP'), ('Engineering', 'NNP'), ('Department', 'NNP'), ('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B.', 'NNP'), ('Kagathara', 'NNP'), ('Compiler', 'NNP'), ('Design', 'NNP'), ('(', '('), ('CD', 'NN'), (')', ')'), ('GTU', 'NNP'), ('#', '#'), ('2170701', 'CD'), ('Darshan', 'NNP'), ('Institute', 'NNP'), ('Engineering', 'NNP'), ('&', 'CC'), ('Technology', 'NNP'), (',', ','), ('Rajkot', 'NNP'), ('\uf050', 'NNP'), ('Looping', 'NNP'), ('Topics', 'NNP'), ('covered', 'VBD'), ('Translator', 'NNP'), ('Analysis', 'NNP'), ('synthesis', 'NN'), ('model', 'NN'), ('compilation', 'NN'), ('Phases', 'NNP'), ('compiler', 'NN'), ('Grouping', 'NNP'), ('Phases', 'NNP'), ('Difference', 'NNP'), ('compiler', 'NN'), ('&', 'CC'), ('interpreter', 'NN'), ('Context', 'NNP'), ('compiler', 'NN'), ('(', '('), ('Cousins', 'NNP'), ('compiler', 'NN'), (')', ')'), ('Pass', 'NNP'), ('structure', 'NN'), ('Types', 'NNP'), ('compiler', 'NN'), ('Translator', 'NNP'), ('હેલ્લો', 'NNP'), ('Translator', 'NNP'), ('A', 'NNP'), ('translator', 'NN'), ('program', 'NN'), ('takes', 'VBZ'), ('one', 'CD'), ('form', 'NN'), ('program', 'NN'), ('input', 'NN'), ('converts', 'VBZ'), ('another', 'DT'), ('form', 'NN'), ('.', '.')]

 (S
  (NP PowerPoint/NNP Presentation/NNP Unit/NNP)
  –/VBD
  1/CD
  (NP
    Introduction/NNP
    Compiler/NNP
    Design/NNP
    dixita.kagathara/NN
    @/NNP
    darshan.ac.in/NN
    +91/NNP)
  -/:
  97277/CD
  47317/CD
  (/(
  (NP CE/NNP Department/NNP)
  )/)
  (NP
    Computer/NNP
    Engineering/NNP
    Department/NNP
    Prof./NNP
    Dixita/NNP
    B./NNP
    Kagathara/NNP
    Compiler/NNP
    Design/NNP)
  (/(
  (NP CD/NN)
  )/)
  (NP GTU/NNP)
  #/#
  2170701/CD
  (NP Darshan/NNP Institute/NNP Engineering/NNP)
  &/CC
  (NP Technology/NNP)
  ,/,
  (NP Rajkot/NNP /NNP Looping/NNP Topics/NNP)
  covered/VBD
  (NP
    Translator/NNP
    Analysis/NNP
    synthesis/NN
    model/NN
    compilation/NN
    Phases/NNP
    compiler/NN
    Grouping/NNP
    Phases/NNP
    Difference/NNP
    compiler/NN)
  &/CC
  (NP interpreter/NN Context/NNP compiler/NN)
  (/(
  (NP Cousins/NNP compiler/NN)
  )/)
  (NP
    Pass/NNP
    structure/NN
    Types/NNP
    compiler/NN
    Translator/NNP
    હેલ્લો/NNP
    Translator/NNP
    A/NNP
    translator/NN
    program/NN)
  takes/VBZ
  one/CD
  (NP form/NN program/NN input/NN)
  converts/VBZ
  (NP another/DT form/NN)
  ./.) 


>> Noun Phrases are: 
 ['PowerPoint Presentation Unit', 'Introduction Compiler Design dixita.kagathara @ darshan.ac.in +91', 'CE Department', 'Computer Engineering Department Prof. Dixita B. Kagathara Compiler Design', 'CD', 'GTU', 'Darshan Institute Engineering', 'Technology', 'Rajkot \uf050 Looping Topics', 'Translator Analysis synthesis model compilation Phases compiler Grouping Phases Difference compiler', 'interpreter Context compiler', 'Cousins compiler', 'Pass structure Types compiler Translator હેલ્લો Translator A translator program', 'form program input', 'another form']

>> Named Entities are: 
 [('ORGANIZATION', 'PowerPoint'), ('PERSON', 'Unit'), ('ORGANIZATION', 'CE Department'), ('ORGANIZATION', 'Computer Engineering Department'), ('PERSON', 'Dixita B. Kagathara Compiler'), ('ORGANIZATION', 'GTU'), ('PERSON', 'Darshan Institute'), ('ORGANIZATION', 'Technology'), ('PERSON', 'Rajkot'), ('PERSON', 'Topics'), ('PERSON', 'Translator Analysis'), ('PERSON', 'Phases'), ('PERSON', 'Phases Difference'), ('ORGANIZATION', 'Cousins'), ('ORGANIZATION', 'Pass'), ('PERSON', 'Types'), ('PERSON', 'Translator')] 

>> Stemming using Porter Stemmer: 
 [('PowerPoint', 'powerpoint'), ('Presentation', 'present'), ('Unit', 'unit'), ('–', '–'), ('1', '1'), ('Introduction', 'introduct'), ('Compiler', 'compil'), ('Design', 'design'), ('dixita.kagathara', 'dixita.kagathara'), ('@', '@'), ('darshan.ac.in', 'darshan.ac.in'), ('+91', '+91'), ('-', '-'), ('97277', '97277'), ('47317', '47317'), ('(', '('), ('CE', 'ce'), ('Department', 'depart'), (')', ')'), ('Computer', 'comput'), ('Engineering', 'engin'), ('Department', 'depart'), ('Prof.', 'prof.'), ('Dixita', 'dixita'), ('B.', 'b.'), ('Kagathara', 'kagathara'), ('Compiler', 'compil'), ('Design', 'design'), ('(', '('), ('CD', 'cd'), (')', ')'), ('GTU', 'gtu'), ('#', '#'), ('2170701', '2170701'), ('Darshan', 'darshan'), ('Institute', 'institut'), ('Engineering', 'engin'), ('&', '&'), ('Technology', 'technolog'), (',', ','), ('Rajkot', 'rajkot'), ('\uf050', '\uf050'), ('Looping', 'loop'), ('Topics', 'topic'), ('covered', 'cover'), ('Translator', 'translat'), ('Analysis', 'analysi'), ('synthesis', 'synthesi'), ('model', 'model'), ('compilation', 'compil'), ('Phases', 'phase'), ('compiler', 'compil'), ('Grouping', 'group'), ('Phases', 'phase'), ('Difference', 'differ'), ('compiler', 'compil'), ('&', '&'), ('interpreter', 'interpret'), ('Context', 'context'), ('compiler', 'compil'), ('(', '('), ('Cousins', 'cousin'), ('compiler', 'compil'), (')', ')'), ('Pass', 'pass'), ('structure', 'structur'), ('Types', 'type'), ('compiler', 'compil'), ('Translator', 'translat'), ('હેલ્લો', 'હેલ્લો'), ('Translator', 'translat'), ('A', 'a'), ('translator', 'translat'), ('program', 'program'), ('takes', 'take'), ('one', 'one'), ('form', 'form'), ('program', 'program'), ('input', 'input'), ('converts', 'convert'), ('another', 'anoth'), ('form', 'form'), ('.', '.')]

>> Stemming using Snowball Stemmer: 
 [('PowerPoint', 'powerpoint'), ('Presentation', 'present'), ('Unit', 'unit'), ('–', '–'), ('1', '1'), ('Introduction', 'introduct'), ('Compiler', 'compil'), ('Design', 'design'), ('dixita.kagathara', 'dixita.kagathara'), ('@', '@'), ('darshan.ac.in', 'darshan.ac.in'), ('+91', '+91'), ('-', '-'), ('97277', '97277'), ('47317', '47317'), ('(', '('), ('CE', 'ce'), ('Department', 'depart'), (')', ')'), ('Computer', 'comput'), ('Engineering', 'engin'), ('Department', 'depart'), ('Prof.', 'prof.'), ('Dixita', 'dixita'), ('B.', 'b.'), ('Kagathara', 'kagathara'), ('Compiler', 'compil'), ('Design', 'design'), ('(', '('), ('CD', 'cd'), (')', ')'), ('GTU', 'gtu'), ('#', '#'), ('2170701', '2170701'), ('Darshan', 'darshan'), ('Institute', 'institut'), ('Engineering', 'engin'), ('&', '&'), ('Technology', 'technolog'), (',', ','), ('Rajkot', 'rajkot'), ('\uf050', '\uf050'), ('Looping', 'loop'), ('Topics', 'topic'), ('covered', 'cover'), ('Translator', 'translat'), ('Analysis', 'analysi'), ('synthesis', 'synthesi'), ('model', 'model'), ('compilation', 'compil'), ('Phases', 'phase'), ('compiler', 'compil'), ('Grouping', 'group'), ('Phases', 'phase'), ('Difference', 'differ'), ('compiler', 'compil'), ('&', '&'), ('interpreter', 'interpret'), ('Context', 'context'), ('compiler', 'compil'), ('(', '('), ('Cousins', 'cousin'), ('compiler', 'compil'), (')', ')'), ('Pass', 'pass'), ('structure', 'structur'), ('Types', 'type'), ('compiler', 'compil'), ('Translator', 'translat'), ('હેલ્લો', 'હેલ્લો'), ('Translator', 'translat'), ('A', 'a'), ('translator', 'translat'), ('program', 'program'), ('takes', 'take'), ('one', 'one'), ('form', 'form'), ('program', 'program'), ('input', 'input'), ('converts', 'convert'), ('another', 'anoth'), ('form', 'form'), ('.', '.')]

>> Lemmatization: 
 [('PowerPoint', 'PowerPoint'), ('Presentation', 'Presentation'), ('Unit', 'Unit'), ('–', '–'), ('1', '1'), ('Introduction', 'Introduction'), ('Compiler', 'Compiler'), ('Design', 'Design'), ('dixita.kagathara', 'dixita.kagathara'), ('@', '@'), ('darshan.ac.in', 'darshan.ac.in'), ('+91', '+91'), ('-', '-'), ('97277', '97277'), ('47317', '47317'), ('(', '('), ('CE', 'CE'), ('Department', 'Department'), (')', ')'), ('Computer', 'Computer'), ('Engineering', 'Engineering'), ('Department', 'Department'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B.', 'B.'), ('Kagathara', 'Kagathara'), ('Compiler', 'Compiler'), ('Design', 'Design'), ('(', '('), ('CD', 'CD'), (')', ')'), ('GTU', 'GTU'), ('#', '#'), ('2170701', '2170701'), ('Darshan', 'Darshan'), ('Institute', 'Institute'), ('Engineering', 'Engineering'), ('&', '&'), ('Technology', 'Technology'), (',', ','), ('Rajkot', 'Rajkot'), ('\uf050', '\uf050'), ('Looping', 'Looping'), ('Topics', 'Topics'), ('covered', 'covered'), ('Translator', 'Translator'), ('Analysis', 'Analysis'), ('synthesis', 'synthesis'), ('model', 'model'), ('compilation', 'compilation'), ('Phases', 'Phases'), ('compiler', 'compiler'), ('Grouping', 'Grouping'), ('Phases', 'Phases'), ('Difference', 'Difference'), ('compiler', 'compiler'), ('&', '&'), ('interpreter', 'interpreter'), ('Context', 'Context'), ('compiler', 'compiler'), ('(', '('), ('Cousins', 'Cousins'), ('compiler', 'compiler'), (')', ')'), ('Pass', 'Pass'), ('structure', 'structure'), ('Types', 'Types'), ('compiler', 'compiler'), ('Translator', 'Translator'), ('હેલ્લો', 'હેલ્લો'), ('Translator', 'Translator'), ('A', 'A'), ('translator', 'translator'), ('program', 'program'), ('takes', 'take'), ('one', 'one'), ('form', 'form'), ('program', 'program'), ('input', 'input'), ('converts', 'convert'), ('another', 'another'), ('form', 'form'), ('.', '.')]



============================ Sentence 2 =============================

Types of translators are: Compiler Interpreter Assembler  Error Messages  Translator Source Program Target Program (If any)    Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1 – Introduction to Compiler Design ‹#›  Compiler  A compiler is a program that reads a program written in source language and translates it into an equivalent program in target language. 


>> Tokens are: 
 ['Types', 'translators', ':', 'Compiler', 'Interpreter', 'Assembler', 'Error', 'Messages', 'Translator', 'Source', 'Program', 'Target', 'Program', '(', 'If', ')', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '1', '–', 'Introduction', 'Compiler', 'Design', '‹', '#', '›', 'Compiler', 'A', 'compiler', 'program', 'reads', 'program', 'written', 'source', 'language', 'translates', 'equivalent', 'program', 'target', 'language', '.']

>> Bigrams are: 
 [('Types', 'translators'), ('translators', ':'), (':', 'Compiler'), ('Compiler', 'Interpreter'), ('Interpreter', 'Assembler'), ('Assembler', 'Error'), ('Error', 'Messages'), ('Messages', 'Translator'), ('Translator', 'Source'), ('Source', 'Program'), ('Program', 'Target'), ('Target', 'Program'), ('Program', '('), ('(', 'If'), ('If', ')'), (')', 'Prof.'), ('Prof.', 'Dixita'), ('Dixita', 'B'), ('B', 'Kagathara'), ('Kagathara', '#'), ('#', '2170701'), ('2170701', '('), ('(', 'CD'), ('CD', ')'), (')', '\uf077'), ('\uf077', 'Unit'), ('Unit', '1'), ('1', '–'), ('–', 'Introduction'), ('Introduction', 'Compiler'), ('Compiler', 'Design'), ('Design', '‹'), ('‹', '#'), ('#', '›'), ('›', 'Compiler'), ('Compiler', 'A'), ('A', 'compiler'), ('compiler', 'program'), ('program', 'reads'), ('reads', 'program'), ('program', 'written'), ('written', 'source'), ('source', 'language'), ('language', 'translates'), ('translates', 'equivalent'), ('equivalent', 'program'), ('program', 'target'), ('target', 'language'), ('language', '.')]

>> Trigrams are: 
 [('Types', 'translators', ':'), ('translators', ':', 'Compiler'), (':', 'Compiler', 'Interpreter'), ('Compiler', 'Interpreter', 'Assembler'), ('Interpreter', 'Assembler', 'Error'), ('Assembler', 'Error', 'Messages'), ('Error', 'Messages', 'Translator'), ('Messages', 'Translator', 'Source'), ('Translator', 'Source', 'Program'), ('Source', 'Program', 'Target'), ('Program', 'Target', 'Program'), ('Target', 'Program', '('), ('Program', '(', 'If'), ('(', 'If', ')'), ('If', ')', 'Prof.'), (')', 'Prof.', 'Dixita'), ('Prof.', 'Dixita', 'B'), ('Dixita', 'B', 'Kagathara'), ('B', 'Kagathara', '#'), ('Kagathara', '#', '2170701'), ('#', '2170701', '('), ('2170701', '(', 'CD'), ('(', 'CD', ')'), ('CD', ')', '\uf077'), (')', '\uf077', 'Unit'), ('\uf077', 'Unit', '1'), ('Unit', '1', '–'), ('1', '–', 'Introduction'), ('–', 'Introduction', 'Compiler'), ('Introduction', 'Compiler', 'Design'), ('Compiler', 'Design', '‹'), ('Design', '‹', '#'), ('‹', '#', '›'), ('#', '›', 'Compiler'), ('›', 'Compiler', 'A'), ('Compiler', 'A', 'compiler'), ('A', 'compiler', 'program'), ('compiler', 'program', 'reads'), ('program', 'reads', 'program'), ('reads', 'program', 'written'), ('program', 'written', 'source'), ('written', 'source', 'language'), ('source', 'language', 'translates'), ('language', 'translates', 'equivalent'), ('translates', 'equivalent', 'program'), ('equivalent', 'program', 'target'), ('program', 'target', 'language'), ('target', 'language', '.')]

>> POS Tags are: 
 [('Types', 'NNS'), ('translators', 'NNS'), (':', ':'), ('Compiler', 'NNP'), ('Interpreter', 'NNP'), ('Assembler', 'NNP'), ('Error', 'NNP'), ('Messages', 'NNP'), ('Translator', 'NNP'), ('Source', 'NNP'), ('Program', 'NNP'), ('Target', 'NNP'), ('Program', 'NNP'), ('(', '('), ('If', 'IN'), (')', ')'), ('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', '#'), ('2170701', 'CD'), ('(', '('), ('CD', 'NN'), (')', ')'), ('\uf077', 'VBD'), ('Unit', 'NNP'), ('1', 'CD'), ('–', 'NNP'), ('Introduction', 'NNP'), ('Compiler', 'NNP'), ('Design', 'NNP'), ('‹', 'NNP'), ('#', '#'), ('›', 'NNP'), ('Compiler', 'NNP'), ('A', 'NNP'), ('compiler', 'NN'), ('program', 'NN'), ('reads', 'VBZ'), ('program', 'NN'), ('written', 'VBN'), ('source', 'NN'), ('language', 'NN'), ('translates', 'VBZ'), ('equivalent', 'JJ'), ('program', 'NN'), ('target', 'NN'), ('language', 'NN'), ('.', '.')]

 (S
  (NP Types/NNS translators/NNS)
  :/:
  (NP
    Compiler/NNP
    Interpreter/NNP
    Assembler/NNP
    Error/NNP
    Messages/NNP
    Translator/NNP
    Source/NNP
    Program/NNP
    Target/NNP
    Program/NNP)
  (/(
  If/IN
  )/)
  (NP Prof./NNP Dixita/NNP B/NNP Kagathara/NNP)
  #/#
  2170701/CD
  (/(
  (NP CD/NN)
  )/)
  /VBD
  (NP Unit/NNP)
  1/CD
  (NP –/NNP Introduction/NNP Compiler/NNP Design/NNP ‹/NNP)
  #/#
  (NP ›/NNP Compiler/NNP A/NNP compiler/NN program/NN)
  reads/VBZ
  (NP program/NN)
  written/VBN
  (NP source/NN language/NN)
  translates/VBZ
  (NP equivalent/JJ program/NN target/NN language/NN)
  ./.) 


>> Noun Phrases are: 
 ['Types translators', 'Compiler Interpreter Assembler Error Messages Translator Source Program Target Program', 'Prof. Dixita B Kagathara', 'CD', 'Unit', '– Introduction Compiler Design ‹', '› Compiler A compiler program', 'program', 'source language', 'equivalent program target language']

>> Named Entities are: 
 [('ORGANIZATION', 'Compiler'), ('PERSON', 'Assembler Error Messages Translator Source Program Target Program'), ('ORGANIZATION', 'Unit')] 

>> Stemming using Porter Stemmer: 
 [('Types', 'type'), ('translators', 'translat'), (':', ':'), ('Compiler', 'compil'), ('Interpreter', 'interpret'), ('Assembler', 'assembl'), ('Error', 'error'), ('Messages', 'messag'), ('Translator', 'translat'), ('Source', 'sourc'), ('Program', 'program'), ('Target', 'target'), ('Program', 'program'), ('(', '('), ('If', 'if'), (')', ')'), ('Prof.', 'prof.'), ('Dixita', 'dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '–'), ('Introduction', 'introduct'), ('Compiler', 'compil'), ('Design', 'design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Compiler', 'compil'), ('A', 'a'), ('compiler', 'compil'), ('program', 'program'), ('reads', 'read'), ('program', 'program'), ('written', 'written'), ('source', 'sourc'), ('language', 'languag'), ('translates', 'translat'), ('equivalent', 'equival'), ('program', 'program'), ('target', 'target'), ('language', 'languag'), ('.', '.')]

>> Stemming using Snowball Stemmer: 
 [('Types', 'type'), ('translators', 'translat'), (':', ':'), ('Compiler', 'compil'), ('Interpreter', 'interpret'), ('Assembler', 'assembl'), ('Error', 'error'), ('Messages', 'messag'), ('Translator', 'translat'), ('Source', 'sourc'), ('Program', 'program'), ('Target', 'target'), ('Program', 'program'), ('(', '('), ('If', 'if'), (')', ')'), ('Prof.', 'prof.'), ('Dixita', 'dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '–'), ('Introduction', 'introduct'), ('Compiler', 'compil'), ('Design', 'design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Compiler', 'compil'), ('A', 'a'), ('compiler', 'compil'), ('program', 'program'), ('reads', 'read'), ('program', 'program'), ('written', 'written'), ('source', 'sourc'), ('language', 'languag'), ('translates', 'translat'), ('equivalent', 'equival'), ('program', 'program'), ('target', 'target'), ('language', 'languag'), ('.', '.')]

>> Lemmatization: 
 [('Types', 'Types'), ('translators', 'translator'), (':', ':'), ('Compiler', 'Compiler'), ('Interpreter', 'Interpreter'), ('Assembler', 'Assembler'), ('Error', 'Error'), ('Messages', 'Messages'), ('Translator', 'Translator'), ('Source', 'Source'), ('Program', 'Program'), ('Target', 'Target'), ('Program', 'Program'), ('(', '('), ('If', 'If'), (')', ')'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'CD'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'Unit'), ('1', '1'), ('–', '–'), ('Introduction', 'Introduction'), ('Compiler', 'Compiler'), ('Design', 'Design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Compiler', 'Compiler'), ('A', 'A'), ('compiler', 'compiler'), ('program', 'program'), ('reads', 'read'), ('program', 'program'), ('written', 'written'), ('source', 'source'), ('language', 'language'), ('translates', 'translates'), ('equivalent', 'equivalent'), ('program', 'program'), ('target', 'target'), ('language', 'language'), ('.', '.')]



============================ Sentence 3 =============================

Error Messages  Source Program Target Program Compiler void main() { int a=1,b=2,c; c=a+b; printf(“%d”,c); } Source Program 0000 1100 0010 0100 0111 1000 0001 1111 0101 1110 1100 0000 1000 1011 Target Program (If any)    Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1 – Introduction to Compiler Design ‹#›  Interpreter  Interpreter is also program that reads a program written in source language and translates it into an equivalent program in target language   Interpreter              Source Program  Target Program line by line. 


>> Tokens are: 
 ['Error', 'Messages', 'Source', 'Program', 'Target', 'Program', 'Compiler', 'void', 'main', '(', ')', '{', 'int', 'a=1', ',', 'b=2', ',', 'c', ';', 'c=a+b', ';', 'printf', '(', '“', '%', '”', ',', 'c', ')', ';', '}', 'Source', 'Program', '0000', '1100', '0010', '0100', '0111', '1000', '0001', '1111', '0101', '1110', '1100', '0000', '1000', '1011', 'Target', 'Program', '(', 'If', ')', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '1', '–', 'Introduction', 'Compiler', 'Design', '‹', '#', '›', 'Interpreter', 'Interpreter', 'also', 'program', 'reads', 'program', 'written', 'source', 'language', 'translates', 'equivalent', 'program', 'target', 'language', 'Interpreter', 'Source', 'Program', 'Target', 'Program', 'line', 'line', '.']

>> Bigrams are: 
 [('Error', 'Messages'), ('Messages', 'Source'), ('Source', 'Program'), ('Program', 'Target'), ('Target', 'Program'), ('Program', 'Compiler'), ('Compiler', 'void'), ('void', 'main'), ('main', '('), ('(', ')'), (')', '{'), ('{', 'int'), ('int', 'a=1'), ('a=1', ','), (',', 'b=2'), ('b=2', ','), (',', 'c'), ('c', ';'), (';', 'c=a+b'), ('c=a+b', ';'), (';', 'printf'), ('printf', '('), ('(', '“'), ('“', '%'), ('%', '”'), ('”', ','), (',', 'c'), ('c', ')'), (')', ';'), (';', '}'), ('}', 'Source'), ('Source', 'Program'), ('Program', '0000'), ('0000', '1100'), ('1100', '0010'), ('0010', '0100'), ('0100', '0111'), ('0111', '1000'), ('1000', '0001'), ('0001', '1111'), ('1111', '0101'), ('0101', '1110'), ('1110', '1100'), ('1100', '0000'), ('0000', '1000'), ('1000', '1011'), ('1011', 'Target'), ('Target', 'Program'), ('Program', '('), ('(', 'If'), ('If', ')'), (')', 'Prof.'), ('Prof.', 'Dixita'), ('Dixita', 'B'), ('B', 'Kagathara'), ('Kagathara', '#'), ('#', '2170701'), ('2170701', '('), ('(', 'CD'), ('CD', ')'), (')', '\uf077'), ('\uf077', 'Unit'), ('Unit', '1'), ('1', '–'), ('–', 'Introduction'), ('Introduction', 'Compiler'), ('Compiler', 'Design'), ('Design', '‹'), ('‹', '#'), ('#', '›'), ('›', 'Interpreter'), ('Interpreter', 'Interpreter'), ('Interpreter', 'also'), ('also', 'program'), ('program', 'reads'), ('reads', 'program'), ('program', 'written'), ('written', 'source'), ('source', 'language'), ('language', 'translates'), ('translates', 'equivalent'), ('equivalent', 'program'), ('program', 'target'), ('target', 'language'), ('language', 'Interpreter'), ('Interpreter', 'Source'), ('Source', 'Program'), ('Program', 'Target'), ('Target', 'Program'), ('Program', 'line'), ('line', 'line'), ('line', '.')]

>> Trigrams are: 
 [('Error', 'Messages', 'Source'), ('Messages', 'Source', 'Program'), ('Source', 'Program', 'Target'), ('Program', 'Target', 'Program'), ('Target', 'Program', 'Compiler'), ('Program', 'Compiler', 'void'), ('Compiler', 'void', 'main'), ('void', 'main', '('), ('main', '(', ')'), ('(', ')', '{'), (')', '{', 'int'), ('{', 'int', 'a=1'), ('int', 'a=1', ','), ('a=1', ',', 'b=2'), (',', 'b=2', ','), ('b=2', ',', 'c'), (',', 'c', ';'), ('c', ';', 'c=a+b'), (';', 'c=a+b', ';'), ('c=a+b', ';', 'printf'), (';', 'printf', '('), ('printf', '(', '“'), ('(', '“', '%'), ('“', '%', '”'), ('%', '”', ','), ('”', ',', 'c'), (',', 'c', ')'), ('c', ')', ';'), (')', ';', '}'), (';', '}', 'Source'), ('}', 'Source', 'Program'), ('Source', 'Program', '0000'), ('Program', '0000', '1100'), ('0000', '1100', '0010'), ('1100', '0010', '0100'), ('0010', '0100', '0111'), ('0100', '0111', '1000'), ('0111', '1000', '0001'), ('1000', '0001', '1111'), ('0001', '1111', '0101'), ('1111', '0101', '1110'), ('0101', '1110', '1100'), ('1110', '1100', '0000'), ('1100', '0000', '1000'), ('0000', '1000', '1011'), ('1000', '1011', 'Target'), ('1011', 'Target', 'Program'), ('Target', 'Program', '('), ('Program', '(', 'If'), ('(', 'If', ')'), ('If', ')', 'Prof.'), (')', 'Prof.', 'Dixita'), ('Prof.', 'Dixita', 'B'), ('Dixita', 'B', 'Kagathara'), ('B', 'Kagathara', '#'), ('Kagathara', '#', '2170701'), ('#', '2170701', '('), ('2170701', '(', 'CD'), ('(', 'CD', ')'), ('CD', ')', '\uf077'), (')', '\uf077', 'Unit'), ('\uf077', 'Unit', '1'), ('Unit', '1', '–'), ('1', '–', 'Introduction'), ('–', 'Introduction', 'Compiler'), ('Introduction', 'Compiler', 'Design'), ('Compiler', 'Design', '‹'), ('Design', '‹', '#'), ('‹', '#', '›'), ('#', '›', 'Interpreter'), ('›', 'Interpreter', 'Interpreter'), ('Interpreter', 'Interpreter', 'also'), ('Interpreter', 'also', 'program'), ('also', 'program', 'reads'), ('program', 'reads', 'program'), ('reads', 'program', 'written'), ('program', 'written', 'source'), ('written', 'source', 'language'), ('source', 'language', 'translates'), ('language', 'translates', 'equivalent'), ('translates', 'equivalent', 'program'), ('equivalent', 'program', 'target'), ('program', 'target', 'language'), ('target', 'language', 'Interpreter'), ('language', 'Interpreter', 'Source'), ('Interpreter', 'Source', 'Program'), ('Source', 'Program', 'Target'), ('Program', 'Target', 'Program'), ('Target', 'Program', 'line'), ('Program', 'line', 'line'), ('line', 'line', '.')]

>> POS Tags are: 
 [('Error', 'NN'), ('Messages', 'NNP'), ('Source', 'NNP'), ('Program', 'NNP'), ('Target', 'NNP'), ('Program', 'NNP'), ('Compiler', 'NNP'), ('void', 'NN'), ('main', 'JJ'), ('(', '('), (')', ')'), ('{', '('), ('int', 'NN'), ('a=1', 'NN'), (',', ','), ('b=2', 'NN'), (',', ','), ('c', 'NN'), (';', ':'), ('c=a+b', 'NN'), (';', ':'), ('printf', 'CC'), ('(', '('), ('“', 'CD'), ('%', 'NN'), ('”', 'NN'), (',', ','), ('c', 'NN'), (')', ')'), (';', ':'), ('}', ')'), ('Source', 'NNP'), ('Program', 'NNP'), ('0000', 'CD'), ('1100', 'CD'), ('0010', 'CD'), ('0100', 'CD'), ('0111', 'CD'), ('1000', 'CD'), ('0001', 'CD'), ('1111', 'CD'), ('0101', 'CD'), ('1110', 'CD'), ('1100', 'CD'), ('0000', 'CD'), ('1000', 'CD'), ('1011', 'CD'), ('Target', 'NNP'), ('Program', 'NNP'), ('(', '('), ('If', 'IN'), (')', ')'), ('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', '#'), ('2170701', 'CD'), ('(', '('), ('CD', 'NN'), (')', ')'), ('\uf077', 'VBD'), ('Unit', 'NNP'), ('1', 'CD'), ('–', 'NNP'), ('Introduction', 'NNP'), ('Compiler', 'NNP'), ('Design', 'NNP'), ('‹', 'NNP'), ('#', '#'), ('›', 'NNP'), ('Interpreter', 'NNP'), ('Interpreter', 'NNP'), ('also', 'RB'), ('program', 'NN'), ('reads', 'VBZ'), ('program', 'NN'), ('written', 'VBN'), ('source', 'NN'), ('language', 'NN'), ('translates', 'VBZ'), ('equivalent', 'JJ'), ('program', 'NN'), ('target', 'NN'), ('language', 'NN'), ('Interpreter', 'NNP'), ('Source', 'NNP'), ('Program', 'NNP'), ('Target', 'NNP'), ('Program', 'NNP'), ('line', 'NN'), ('line', 'NN'), ('.', '.')]

 (S
  (NP
    Error/NN
    Messages/NNP
    Source/NNP
    Program/NNP
    Target/NNP
    Program/NNP
    Compiler/NNP
    void/NN)
  main/JJ
  (/(
  )/)
  {/(
  (NP int/NN a=1/NN)
  ,/,
  (NP b=2/NN)
  ,/,
  (NP c/NN)
  ;/:
  (NP c=a+b/NN)
  ;/:
  printf/CC
  (/(
  “/CD
  (NP %/NN ”/NN)
  ,/,
  (NP c/NN)
  )/)
  ;/:
  }/)
  (NP Source/NNP Program/NNP)
  0000/CD
  1100/CD
  0010/CD
  0100/CD
  0111/CD
  1000/CD
  0001/CD
  1111/CD
  0101/CD
  1110/CD
  1100/CD
  0000/CD
  1000/CD
  1011/CD
  (NP Target/NNP Program/NNP)
  (/(
  If/IN
  )/)
  (NP Prof./NNP Dixita/NNP B/NNP Kagathara/NNP)
  #/#
  2170701/CD
  (/(
  (NP CD/NN)
  )/)
  /VBD
  (NP Unit/NNP)
  1/CD
  (NP –/NNP Introduction/NNP Compiler/NNP Design/NNP ‹/NNP)
  #/#
  (NP ›/NNP Interpreter/NNP Interpreter/NNP)
  also/RB
  (NP program/NN)
  reads/VBZ
  (NP program/NN)
  written/VBN
  (NP source/NN language/NN)
  translates/VBZ
  (NP
    equivalent/JJ
    program/NN
    target/NN
    language/NN
    Interpreter/NNP
    Source/NNP
    Program/NNP
    Target/NNP
    Program/NNP
    line/NN
    line/NN)
  ./.) 


>> Noun Phrases are: 
 ['Error Messages Source Program Target Program Compiler void', 'int a=1', 'b=2', 'c', 'c=a+b', '% ”', 'c', 'Source Program', 'Target Program', 'Prof. Dixita B Kagathara', 'CD', 'Unit', '– Introduction Compiler Design ‹', '› Interpreter Interpreter', 'program', 'program', 'source language', 'equivalent program target language Interpreter Source Program Target Program line line']

>> Named Entities are: 
 [('PERSON', 'Error Messages Source Program Target Program Compiler'), ('PERSON', 'Source Program'), ('ORGANIZATION', 'Unit'), ('ORGANIZATION', 'Interpreter Source Program Target')] 

>> Stemming using Porter Stemmer: 
 [('Error', 'error'), ('Messages', 'messag'), ('Source', 'sourc'), ('Program', 'program'), ('Target', 'target'), ('Program', 'program'), ('Compiler', 'compil'), ('void', 'void'), ('main', 'main'), ('(', '('), (')', ')'), ('{', '{'), ('int', 'int'), ('a=1', 'a=1'), (',', ','), ('b=2', 'b=2'), (',', ','), ('c', 'c'), (';', ';'), ('c=a+b', 'c=a+b'), (';', ';'), ('printf', 'printf'), ('(', '('), ('“', '“'), ('%', '%'), ('”', '”'), (',', ','), ('c', 'c'), (')', ')'), (';', ';'), ('}', '}'), ('Source', 'sourc'), ('Program', 'program'), ('0000', '0000'), ('1100', '1100'), ('0010', '0010'), ('0100', '0100'), ('0111', '0111'), ('1000', '1000'), ('0001', '0001'), ('1111', '1111'), ('0101', '0101'), ('1110', '1110'), ('1100', '1100'), ('0000', '0000'), ('1000', '1000'), ('1011', '1011'), ('Target', 'target'), ('Program', 'program'), ('(', '('), ('If', 'if'), (')', ')'), ('Prof.', 'prof.'), ('Dixita', 'dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '–'), ('Introduction', 'introduct'), ('Compiler', 'compil'), ('Design', 'design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Interpreter', 'interpret'), ('Interpreter', 'interpret'), ('also', 'also'), ('program', 'program'), ('reads', 'read'), ('program', 'program'), ('written', 'written'), ('source', 'sourc'), ('language', 'languag'), ('translates', 'translat'), ('equivalent', 'equival'), ('program', 'program'), ('target', 'target'), ('language', 'languag'), ('Interpreter', 'interpret'), ('Source', 'sourc'), ('Program', 'program'), ('Target', 'target'), ('Program', 'program'), ('line', 'line'), ('line', 'line'), ('.', '.')]

>> Stemming using Snowball Stemmer: 
 [('Error', 'error'), ('Messages', 'messag'), ('Source', 'sourc'), ('Program', 'program'), ('Target', 'target'), ('Program', 'program'), ('Compiler', 'compil'), ('void', 'void'), ('main', 'main'), ('(', '('), (')', ')'), ('{', '{'), ('int', 'int'), ('a=1', 'a=1'), (',', ','), ('b=2', 'b=2'), (',', ','), ('c', 'c'), (';', ';'), ('c=a+b', 'c=a+b'), (';', ';'), ('printf', 'printf'), ('(', '('), ('“', '“'), ('%', '%'), ('”', '”'), (',', ','), ('c', 'c'), (')', ')'), (';', ';'), ('}', '}'), ('Source', 'sourc'), ('Program', 'program'), ('0000', '0000'), ('1100', '1100'), ('0010', '0010'), ('0100', '0100'), ('0111', '0111'), ('1000', '1000'), ('0001', '0001'), ('1111', '1111'), ('0101', '0101'), ('1110', '1110'), ('1100', '1100'), ('0000', '0000'), ('1000', '1000'), ('1011', '1011'), ('Target', 'target'), ('Program', 'program'), ('(', '('), ('If', 'if'), (')', ')'), ('Prof.', 'prof.'), ('Dixita', 'dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '–'), ('Introduction', 'introduct'), ('Compiler', 'compil'), ('Design', 'design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Interpreter', 'interpret'), ('Interpreter', 'interpret'), ('also', 'also'), ('program', 'program'), ('reads', 'read'), ('program', 'program'), ('written', 'written'), ('source', 'sourc'), ('language', 'languag'), ('translates', 'translat'), ('equivalent', 'equival'), ('program', 'program'), ('target', 'target'), ('language', 'languag'), ('Interpreter', 'interpret'), ('Source', 'sourc'), ('Program', 'program'), ('Target', 'target'), ('Program', 'program'), ('line', 'line'), ('line', 'line'), ('.', '.')]

>> Lemmatization: 
 [('Error', 'Error'), ('Messages', 'Messages'), ('Source', 'Source'), ('Program', 'Program'), ('Target', 'Target'), ('Program', 'Program'), ('Compiler', 'Compiler'), ('void', 'void'), ('main', 'main'), ('(', '('), (')', ')'), ('{', '{'), ('int', 'int'), ('a=1', 'a=1'), (',', ','), ('b=2', 'b=2'), (',', ','), ('c', 'c'), (';', ';'), ('c=a+b', 'c=a+b'), (';', ';'), ('printf', 'printf'), ('(', '('), ('“', '“'), ('%', '%'), ('”', '”'), (',', ','), ('c', 'c'), (')', ')'), (';', ';'), ('}', '}'), ('Source', 'Source'), ('Program', 'Program'), ('0000', '0000'), ('1100', '1100'), ('0010', '0010'), ('0100', '0100'), ('0111', '0111'), ('1000', '1000'), ('0001', '0001'), ('1111', '1111'), ('0101', '0101'), ('1110', '1110'), ('1100', '1100'), ('0000', '0000'), ('1000', '1000'), ('1011', '1011'), ('Target', 'Target'), ('Program', 'Program'), ('(', '('), ('If', 'If'), (')', ')'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'CD'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'Unit'), ('1', '1'), ('–', '–'), ('Introduction', 'Introduction'), ('Compiler', 'Compiler'), ('Design', 'Design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Interpreter', 'Interpreter'), ('Interpreter', 'Interpreter'), ('also', 'also'), ('program', 'program'), ('reads', 'read'), ('program', 'program'), ('written', 'written'), ('source', 'source'), ('language', 'language'), ('translates', 'translates'), ('equivalent', 'equivalent'), ('program', 'program'), ('target', 'target'), ('language', 'language'), ('Interpreter', 'Interpreter'), ('Source', 'Source'), ('Program', 'Program'), ('Target', 'Target'), ('Program', 'Program'), ('line', 'line'), ('line', 'line'), ('.', '.')]



============================ Sentence 4 =============================

Void main()  {      int a=1,b=2,c;      c=a+b;      printf(“%d”,c);  } 0000 1100 0010 0000 1111 1010 1100 0010 0011 1100 0010 1111 1100 0010 Error Messages  (If any)    Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1 – Introduction to Compiler Design ‹#›  Assembler  Assembler is a translator which takes the assembly code as an input and generates the machine code as an output. 


>> Tokens are: 
 ['Void', 'main', '(', ')', '{', 'int', 'a=1', ',', 'b=2', ',', 'c', ';', 'c=a+b', ';', 'printf', '(', '“', '%', '”', ',', 'c', ')', ';', '}', '0000', '1100', '0010', '0000', '1111', '1010', '1100', '0010', '0011', '1100', '0010', '1111', '1100', '0010', 'Error', 'Messages', '(', 'If', ')', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '1', '–', 'Introduction', 'Compiler', 'Design', '‹', '#', '›', 'Assembler', 'Assembler', 'translator', 'takes', 'assembly', 'code', 'input', 'generates', 'machine', 'code', 'output', '.']

>> Bigrams are: 
 [('Void', 'main'), ('main', '('), ('(', ')'), (')', '{'), ('{', 'int'), ('int', 'a=1'), ('a=1', ','), (',', 'b=2'), ('b=2', ','), (',', 'c'), ('c', ';'), (';', 'c=a+b'), ('c=a+b', ';'), (';', 'printf'), ('printf', '('), ('(', '“'), ('“', '%'), ('%', '”'), ('”', ','), (',', 'c'), ('c', ')'), (')', ';'), (';', '}'), ('}', '0000'), ('0000', '1100'), ('1100', '0010'), ('0010', '0000'), ('0000', '1111'), ('1111', '1010'), ('1010', '1100'), ('1100', '0010'), ('0010', '0011'), ('0011', '1100'), ('1100', '0010'), ('0010', '1111'), ('1111', '1100'), ('1100', '0010'), ('0010', 'Error'), ('Error', 'Messages'), ('Messages', '('), ('(', 'If'), ('If', ')'), (')', 'Prof.'), ('Prof.', 'Dixita'), ('Dixita', 'B'), ('B', 'Kagathara'), ('Kagathara', '#'), ('#', '2170701'), ('2170701', '('), ('(', 'CD'), ('CD', ')'), (')', '\uf077'), ('\uf077', 'Unit'), ('Unit', '1'), ('1', '–'), ('–', 'Introduction'), ('Introduction', 'Compiler'), ('Compiler', 'Design'), ('Design', '‹'), ('‹', '#'), ('#', '›'), ('›', 'Assembler'), ('Assembler', 'Assembler'), ('Assembler', 'translator'), ('translator', 'takes'), ('takes', 'assembly'), ('assembly', 'code'), ('code', 'input'), ('input', 'generates'), ('generates', 'machine'), ('machine', 'code'), ('code', 'output'), ('output', '.')]

>> Trigrams are: 
 [('Void', 'main', '('), ('main', '(', ')'), ('(', ')', '{'), (')', '{', 'int'), ('{', 'int', 'a=1'), ('int', 'a=1', ','), ('a=1', ',', 'b=2'), (',', 'b=2', ','), ('b=2', ',', 'c'), (',', 'c', ';'), ('c', ';', 'c=a+b'), (';', 'c=a+b', ';'), ('c=a+b', ';', 'printf'), (';', 'printf', '('), ('printf', '(', '“'), ('(', '“', '%'), ('“', '%', '”'), ('%', '”', ','), ('”', ',', 'c'), (',', 'c', ')'), ('c', ')', ';'), (')', ';', '}'), (';', '}', '0000'), ('}', '0000', '1100'), ('0000', '1100', '0010'), ('1100', '0010', '0000'), ('0010', '0000', '1111'), ('0000', '1111', '1010'), ('1111', '1010', '1100'), ('1010', '1100', '0010'), ('1100', '0010', '0011'), ('0010', '0011', '1100'), ('0011', '1100', '0010'), ('1100', '0010', '1111'), ('0010', '1111', '1100'), ('1111', '1100', '0010'), ('1100', '0010', 'Error'), ('0010', 'Error', 'Messages'), ('Error', 'Messages', '('), ('Messages', '(', 'If'), ('(', 'If', ')'), ('If', ')', 'Prof.'), (')', 'Prof.', 'Dixita'), ('Prof.', 'Dixita', 'B'), ('Dixita', 'B', 'Kagathara'), ('B', 'Kagathara', '#'), ('Kagathara', '#', '2170701'), ('#', '2170701', '('), ('2170701', '(', 'CD'), ('(', 'CD', ')'), ('CD', ')', '\uf077'), (')', '\uf077', 'Unit'), ('\uf077', 'Unit', '1'), ('Unit', '1', '–'), ('1', '–', 'Introduction'), ('–', 'Introduction', 'Compiler'), ('Introduction', 'Compiler', 'Design'), ('Compiler', 'Design', '‹'), ('Design', '‹', '#'), ('‹', '#', '›'), ('#', '›', 'Assembler'), ('›', 'Assembler', 'Assembler'), ('Assembler', 'Assembler', 'translator'), ('Assembler', 'translator', 'takes'), ('translator', 'takes', 'assembly'), ('takes', 'assembly', 'code'), ('assembly', 'code', 'input'), ('code', 'input', 'generates'), ('input', 'generates', 'machine'), ('generates', 'machine', 'code'), ('machine', 'code', 'output'), ('code', 'output', '.')]

>> POS Tags are: 
 [('Void', 'NNP'), ('main', 'JJ'), ('(', '('), (')', ')'), ('{', '('), ('int', 'NN'), ('a=1', 'NN'), (',', ','), ('b=2', 'NN'), (',', ','), ('c', 'NN'), (';', ':'), ('c=a+b', 'NN'), (';', ':'), ('printf', 'CC'), ('(', '('), ('“', 'CD'), ('%', 'NN'), ('”', 'NN'), (',', ','), ('c', 'NN'), (')', ')'), (';', ':'), ('}', ')'), ('0000', 'CD'), ('1100', 'CD'), ('0010', 'CD'), ('0000', 'CD'), ('1111', 'CD'), ('1010', 'CD'), ('1100', 'CD'), ('0010', 'CD'), ('0011', 'CD'), ('1100', 'CD'), ('0010', 'CD'), ('1111', 'CD'), ('1100', 'CD'), ('0010', 'CD'), ('Error', 'NNP'), ('Messages', 'NNP'), ('(', '('), ('If', 'IN'), (')', ')'), ('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', '#'), ('2170701', 'CD'), ('(', '('), ('CD', 'NN'), (')', ')'), ('\uf077', 'VBD'), ('Unit', 'NNP'), ('1', 'CD'), ('–', 'NNP'), ('Introduction', 'NNP'), ('Compiler', 'NNP'), ('Design', 'NNP'), ('‹', 'NNP'), ('#', '#'), ('›', 'NNP'), ('Assembler', 'NNP'), ('Assembler', 'NNP'), ('translator', 'NN'), ('takes', 'VBZ'), ('assembly', 'RB'), ('code', 'JJ'), ('input', 'NN'), ('generates', 'NNS'), ('machine', 'NN'), ('code', 'NN'), ('output', 'NN'), ('.', '.')]

 (S
  (NP Void/NNP)
  main/JJ
  (/(
  )/)
  {/(
  (NP int/NN a=1/NN)
  ,/,
  (NP b=2/NN)
  ,/,
  (NP c/NN)
  ;/:
  (NP c=a+b/NN)
  ;/:
  printf/CC
  (/(
  “/CD
  (NP %/NN ”/NN)
  ,/,
  (NP c/NN)
  )/)
  ;/:
  }/)
  0000/CD
  1100/CD
  0010/CD
  0000/CD
  1111/CD
  1010/CD
  1100/CD
  0010/CD
  0011/CD
  1100/CD
  0010/CD
  1111/CD
  1100/CD
  0010/CD
  (NP Error/NNP Messages/NNP)
  (/(
  If/IN
  )/)
  (NP Prof./NNP Dixita/NNP B/NNP Kagathara/NNP)
  #/#
  2170701/CD
  (/(
  (NP CD/NN)
  )/)
  /VBD
  (NP Unit/NNP)
  1/CD
  (NP –/NNP Introduction/NNP Compiler/NNP Design/NNP ‹/NNP)
  #/#
  (NP ›/NNP Assembler/NNP Assembler/NNP translator/NN)
  takes/VBZ
  assembly/RB
  (NP code/JJ input/NN generates/NNS machine/NN code/NN output/NN)
  ./.) 


>> Noun Phrases are: 
 ['Void', 'int a=1', 'b=2', 'c', 'c=a+b', '% ”', 'c', 'Error Messages', 'Prof. Dixita B Kagathara', 'CD', 'Unit', '– Introduction Compiler Design ‹', '› Assembler Assembler translator', 'code input generates machine code output']

>> Named Entities are: 
 [('GPE', 'Void'), ('ORGANIZATION', 'Unit'), ('PERSON', 'Assembler Assembler')] 

>> Stemming using Porter Stemmer: 
 [('Void', 'void'), ('main', 'main'), ('(', '('), (')', ')'), ('{', '{'), ('int', 'int'), ('a=1', 'a=1'), (',', ','), ('b=2', 'b=2'), (',', ','), ('c', 'c'), (';', ';'), ('c=a+b', 'c=a+b'), (';', ';'), ('printf', 'printf'), ('(', '('), ('“', '“'), ('%', '%'), ('”', '”'), (',', ','), ('c', 'c'), (')', ')'), (';', ';'), ('}', '}'), ('0000', '0000'), ('1100', '1100'), ('0010', '0010'), ('0000', '0000'), ('1111', '1111'), ('1010', '1010'), ('1100', '1100'), ('0010', '0010'), ('0011', '0011'), ('1100', '1100'), ('0010', '0010'), ('1111', '1111'), ('1100', '1100'), ('0010', '0010'), ('Error', 'error'), ('Messages', 'messag'), ('(', '('), ('If', 'if'), (')', ')'), ('Prof.', 'prof.'), ('Dixita', 'dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '–'), ('Introduction', 'introduct'), ('Compiler', 'compil'), ('Design', 'design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Assembler', 'assembl'), ('Assembler', 'assembl'), ('translator', 'translat'), ('takes', 'take'), ('assembly', 'assembl'), ('code', 'code'), ('input', 'input'), ('generates', 'gener'), ('machine', 'machin'), ('code', 'code'), ('output', 'output'), ('.', '.')]

>> Stemming using Snowball Stemmer: 
 [('Void', 'void'), ('main', 'main'), ('(', '('), (')', ')'), ('{', '{'), ('int', 'int'), ('a=1', 'a=1'), (',', ','), ('b=2', 'b=2'), (',', ','), ('c', 'c'), (';', ';'), ('c=a+b', 'c=a+b'), (';', ';'), ('printf', 'printf'), ('(', '('), ('“', '“'), ('%', '%'), ('”', '”'), (',', ','), ('c', 'c'), (')', ')'), (';', ';'), ('}', '}'), ('0000', '0000'), ('1100', '1100'), ('0010', '0010'), ('0000', '0000'), ('1111', '1111'), ('1010', '1010'), ('1100', '1100'), ('0010', '0010'), ('0011', '0011'), ('1100', '1100'), ('0010', '0010'), ('1111', '1111'), ('1100', '1100'), ('0010', '0010'), ('Error', 'error'), ('Messages', 'messag'), ('(', '('), ('If', 'if'), (')', ')'), ('Prof.', 'prof.'), ('Dixita', 'dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '–'), ('Introduction', 'introduct'), ('Compiler', 'compil'), ('Design', 'design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Assembler', 'assembl'), ('Assembler', 'assembl'), ('translator', 'translat'), ('takes', 'take'), ('assembly', 'assembl'), ('code', 'code'), ('input', 'input'), ('generates', 'generat'), ('machine', 'machin'), ('code', 'code'), ('output', 'output'), ('.', '.')]

>> Lemmatization: 
 [('Void', 'Void'), ('main', 'main'), ('(', '('), (')', ')'), ('{', '{'), ('int', 'int'), ('a=1', 'a=1'), (',', ','), ('b=2', 'b=2'), (',', ','), ('c', 'c'), (';', ';'), ('c=a+b', 'c=a+b'), (';', ';'), ('printf', 'printf'), ('(', '('), ('“', '“'), ('%', '%'), ('”', '”'), (',', ','), ('c', 'c'), (')', ')'), (';', ';'), ('}', '}'), ('0000', '0000'), ('1100', '1100'), ('0010', '0010'), ('0000', '0000'), ('1111', '1111'), ('1010', '1010'), ('1100', '1100'), ('0010', '0010'), ('0011', '0011'), ('1100', '1100'), ('0010', '0010'), ('1111', '1111'), ('1100', '1100'), ('0010', '0010'), ('Error', 'Error'), ('Messages', 'Messages'), ('(', '('), ('If', 'If'), (')', ')'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'CD'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'Unit'), ('1', '1'), ('–', '–'), ('Introduction', 'Introduction'), ('Compiler', 'Compiler'), ('Design', 'Design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Assembler', 'Assembler'), ('Assembler', 'Assembler'), ('translator', 'translator'), ('takes', 'take'), ('assembly', 'assembly'), ('code', 'code'), ('input', 'input'), ('generates', 'generates'), ('machine', 'machine'), ('code', 'code'), ('output', 'output'), ('.', '.')]



============================ Sentence 5 =============================

Assembler MOV id3, R1 MUL #2.0, R1 MOV id2, R2 MUL R2, R1 MOV id1, R2 ADD R2, R1 MOV R1, id1 Assembly Code  0000 1100 0010 0100 0111 1000 0001 1111 0101 1110 1100 0000 1000 1011 1100 0000 1000  Machine Code Error Messages  (If any)    Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1 – Introduction to Compiler Design ‹#›  Analysis Synthesis model of compilation         Analysis synthesis model of compilation There are two parts of compilation. 


>> Tokens are: 
 ['Assembler', 'MOV', 'id3', ',', 'R1', 'MUL', '#', '2.0', ',', 'R1', 'MOV', 'id2', ',', 'R2', 'MUL', 'R2', ',', 'R1', 'MOV', 'id1', ',', 'R2', 'ADD', 'R2', ',', 'R1', 'MOV', 'R1', ',', 'id1', 'Assembly', 'Code', '0000', '1100', '0010', '0100', '0111', '1000', '0001', '1111', '0101', '1110', '1100', '0000', '1000', '1011', '1100', '0000', '1000', 'Machine', 'Code', 'Error', 'Messages', '(', 'If', ')', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '1', '–', 'Introduction', 'Compiler', 'Design', '‹', '#', '›', 'Analysis', 'Synthesis', 'model', 'compilation', 'Analysis', 'synthesis', 'model', 'compilation', 'There', 'two', 'parts', 'compilation', '.']

>> Bigrams are: 
 [('Assembler', 'MOV'), ('MOV', 'id3'), ('id3', ','), (',', 'R1'), ('R1', 'MUL'), ('MUL', '#'), ('#', '2.0'), ('2.0', ','), (',', 'R1'), ('R1', 'MOV'), ('MOV', 'id2'), ('id2', ','), (',', 'R2'), ('R2', 'MUL'), ('MUL', 'R2'), ('R2', ','), (',', 'R1'), ('R1', 'MOV'), ('MOV', 'id1'), ('id1', ','), (',', 'R2'), ('R2', 'ADD'), ('ADD', 'R2'), ('R2', ','), (',', 'R1'), ('R1', 'MOV'), ('MOV', 'R1'), ('R1', ','), (',', 'id1'), ('id1', 'Assembly'), ('Assembly', 'Code'), ('Code', '0000'), ('0000', '1100'), ('1100', '0010'), ('0010', '0100'), ('0100', '0111'), ('0111', '1000'), ('1000', '0001'), ('0001', '1111'), ('1111', '0101'), ('0101', '1110'), ('1110', '1100'), ('1100', '0000'), ('0000', '1000'), ('1000', '1011'), ('1011', '1100'), ('1100', '0000'), ('0000', '1000'), ('1000', 'Machine'), ('Machine', 'Code'), ('Code', 'Error'), ('Error', 'Messages'), ('Messages', '('), ('(', 'If'), ('If', ')'), (')', 'Prof.'), ('Prof.', 'Dixita'), ('Dixita', 'B'), ('B', 'Kagathara'), ('Kagathara', '#'), ('#', '2170701'), ('2170701', '('), ('(', 'CD'), ('CD', ')'), (')', '\uf077'), ('\uf077', 'Unit'), ('Unit', '1'), ('1', '–'), ('–', 'Introduction'), ('Introduction', 'Compiler'), ('Compiler', 'Design'), ('Design', '‹'), ('‹', '#'), ('#', '›'), ('›', 'Analysis'), ('Analysis', 'Synthesis'), ('Synthesis', 'model'), ('model', 'compilation'), ('compilation', 'Analysis'), ('Analysis', 'synthesis'), ('synthesis', 'model'), ('model', 'compilation'), ('compilation', 'There'), ('There', 'two'), ('two', 'parts'), ('parts', 'compilation'), ('compilation', '.')]

>> Trigrams are: 
 [('Assembler', 'MOV', 'id3'), ('MOV', 'id3', ','), ('id3', ',', 'R1'), (',', 'R1', 'MUL'), ('R1', 'MUL', '#'), ('MUL', '#', '2.0'), ('#', '2.0', ','), ('2.0', ',', 'R1'), (',', 'R1', 'MOV'), ('R1', 'MOV', 'id2'), ('MOV', 'id2', ','), ('id2', ',', 'R2'), (',', 'R2', 'MUL'), ('R2', 'MUL', 'R2'), ('MUL', 'R2', ','), ('R2', ',', 'R1'), (',', 'R1', 'MOV'), ('R1', 'MOV', 'id1'), ('MOV', 'id1', ','), ('id1', ',', 'R2'), (',', 'R2', 'ADD'), ('R2', 'ADD', 'R2'), ('ADD', 'R2', ','), ('R2', ',', 'R1'), (',', 'R1', 'MOV'), ('R1', 'MOV', 'R1'), ('MOV', 'R1', ','), ('R1', ',', 'id1'), (',', 'id1', 'Assembly'), ('id1', 'Assembly', 'Code'), ('Assembly', 'Code', '0000'), ('Code', '0000', '1100'), ('0000', '1100', '0010'), ('1100', '0010', '0100'), ('0010', '0100', '0111'), ('0100', '0111', '1000'), ('0111', '1000', '0001'), ('1000', '0001', '1111'), ('0001', '1111', '0101'), ('1111', '0101', '1110'), ('0101', '1110', '1100'), ('1110', '1100', '0000'), ('1100', '0000', '1000'), ('0000', '1000', '1011'), ('1000', '1011', '1100'), ('1011', '1100', '0000'), ('1100', '0000', '1000'), ('0000', '1000', 'Machine'), ('1000', 'Machine', 'Code'), ('Machine', 'Code', 'Error'), ('Code', 'Error', 'Messages'), ('Error', 'Messages', '('), ('Messages', '(', 'If'), ('(', 'If', ')'), ('If', ')', 'Prof.'), (')', 'Prof.', 'Dixita'), ('Prof.', 'Dixita', 'B'), ('Dixita', 'B', 'Kagathara'), ('B', 'Kagathara', '#'), ('Kagathara', '#', '2170701'), ('#', '2170701', '('), ('2170701', '(', 'CD'), ('(', 'CD', ')'), ('CD', ')', '\uf077'), (')', '\uf077', 'Unit'), ('\uf077', 'Unit', '1'), ('Unit', '1', '–'), ('1', '–', 'Introduction'), ('–', 'Introduction', 'Compiler'), ('Introduction', 'Compiler', 'Design'), ('Compiler', 'Design', '‹'), ('Design', '‹', '#'), ('‹', '#', '›'), ('#', '›', 'Analysis'), ('›', 'Analysis', 'Synthesis'), ('Analysis', 'Synthesis', 'model'), ('Synthesis', 'model', 'compilation'), ('model', 'compilation', 'Analysis'), ('compilation', 'Analysis', 'synthesis'), ('Analysis', 'synthesis', 'model'), ('synthesis', 'model', 'compilation'), ('model', 'compilation', 'There'), ('compilation', 'There', 'two'), ('There', 'two', 'parts'), ('two', 'parts', 'compilation'), ('parts', 'compilation', '.')]

>> POS Tags are: 
 [('Assembler', 'NNP'), ('MOV', 'NNP'), ('id3', 'NN'), (',', ','), ('R1', 'NNP'), ('MUL', 'NNP'), ('#', '#'), ('2.0', 'CD'), (',', ','), ('R1', 'NNP'), ('MOV', 'NNP'), ('id2', 'NN'), (',', ','), ('R2', 'NNP'), ('MUL', 'NNP'), ('R2', 'NNP'), (',', ','), ('R1', 'NNP'), ('MOV', 'NNP'), ('id1', 'NN'), (',', ','), ('R2', 'NNP'), ('ADD', 'NNP'), ('R2', 'NNP'), (',', ','), ('R1', 'NNP'), ('MOV', 'NNP'), ('R1', 'NNP'), (',', ','), ('id1', 'NN'), ('Assembly', 'NNP'), ('Code', 'NNP'), ('0000', 'CD'), ('1100', 'CD'), ('0010', 'CD'), ('0100', 'CD'), ('0111', 'CD'), ('1000', 'CD'), ('0001', 'CD'), ('1111', 'CD'), ('0101', 'CD'), ('1110', 'CD'), ('1100', 'CD'), ('0000', 'CD'), ('1000', 'CD'), ('1011', 'CD'), ('1100', 'CD'), ('0000', 'CD'), ('1000', 'CD'), ('Machine', 'NNP'), ('Code', 'NNP'), ('Error', 'NNP'), ('Messages', 'NNP'), ('(', '('), ('If', 'IN'), (')', ')'), ('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', '#'), ('2170701', 'CD'), ('(', '('), ('CD', 'NN'), (')', ')'), ('\uf077', 'VBD'), ('Unit', 'NNP'), ('1', 'CD'), ('–', 'NNP'), ('Introduction', 'NNP'), ('Compiler', 'NNP'), ('Design', 'NNP'), ('‹', 'NNP'), ('#', '#'), ('›', 'JJ'), ('Analysis', 'NNP'), ('Synthesis', 'NNP'), ('model', 'NN'), ('compilation', 'NN'), ('Analysis', 'NNP'), ('synthesis', 'NN'), ('model', 'NN'), ('compilation', 'NN'), ('There', 'EX'), ('two', 'CD'), ('parts', 'NNS'), ('compilation', 'NN'), ('.', '.')]

 (S
  (NP Assembler/NNP MOV/NNP id3/NN)
  ,/,
  (NP R1/NNP MUL/NNP)
  #/#
  2.0/CD
  ,/,
  (NP R1/NNP MOV/NNP id2/NN)
  ,/,
  (NP R2/NNP MUL/NNP R2/NNP)
  ,/,
  (NP R1/NNP MOV/NNP id1/NN)
  ,/,
  (NP R2/NNP ADD/NNP R2/NNP)
  ,/,
  (NP R1/NNP MOV/NNP R1/NNP)
  ,/,
  (NP id1/NN Assembly/NNP Code/NNP)
  0000/CD
  1100/CD
  0010/CD
  0100/CD
  0111/CD
  1000/CD
  0001/CD
  1111/CD
  0101/CD
  1110/CD
  1100/CD
  0000/CD
  1000/CD
  1011/CD
  1100/CD
  0000/CD
  1000/CD
  (NP Machine/NNP Code/NNP Error/NNP Messages/NNP)
  (/(
  If/IN
  )/)
  (NP Prof./NNP Dixita/NNP B/NNP Kagathara/NNP)
  #/#
  2170701/CD
  (/(
  (NP CD/NN)
  )/)
  /VBD
  (NP Unit/NNP)
  1/CD
  (NP –/NNP Introduction/NNP Compiler/NNP Design/NNP ‹/NNP)
  #/#
  (NP
    ›/JJ
    Analysis/NNP
    Synthesis/NNP
    model/NN
    compilation/NN
    Analysis/NNP
    synthesis/NN
    model/NN
    compilation/NN)
  There/EX
  two/CD
  (NP parts/NNS compilation/NN)
  ./.) 


>> Noun Phrases are: 
 ['Assembler MOV id3', 'R1 MUL', 'R1 MOV id2', 'R2 MUL R2', 'R1 MOV id1', 'R2 ADD R2', 'R1 MOV R1', 'id1 Assembly Code', 'Machine Code Error Messages', 'Prof. Dixita B Kagathara', 'CD', 'Unit', '– Introduction Compiler Design ‹', '› Analysis Synthesis model compilation Analysis synthesis model compilation', 'parts compilation']

>> Named Entities are: 
 [('PERSON', 'Assembler'), ('ORGANIZATION', 'MOV'), ('PERSON', 'R1 MUL'), ('PERSON', 'R1 MOV'), ('PERSON', 'R2 MUL R2'), ('PERSON', 'R1 MOV'), ('PERSON', 'R2 ADD R2'), ('PERSON', 'R1 MOV R1'), ('PERSON', 'Assembly Code'), ('PERSON', 'Machine Code Error Messages'), ('ORGANIZATION', 'Unit')] 

>> Stemming using Porter Stemmer: 
 [('Assembler', 'assembl'), ('MOV', 'mov'), ('id3', 'id3'), (',', ','), ('R1', 'r1'), ('MUL', 'mul'), ('#', '#'), ('2.0', '2.0'), (',', ','), ('R1', 'r1'), ('MOV', 'mov'), ('id2', 'id2'), (',', ','), ('R2', 'r2'), ('MUL', 'mul'), ('R2', 'r2'), (',', ','), ('R1', 'r1'), ('MOV', 'mov'), ('id1', 'id1'), (',', ','), ('R2', 'r2'), ('ADD', 'add'), ('R2', 'r2'), (',', ','), ('R1', 'r1'), ('MOV', 'mov'), ('R1', 'r1'), (',', ','), ('id1', 'id1'), ('Assembly', 'assembl'), ('Code', 'code'), ('0000', '0000'), ('1100', '1100'), ('0010', '0010'), ('0100', '0100'), ('0111', '0111'), ('1000', '1000'), ('0001', '0001'), ('1111', '1111'), ('0101', '0101'), ('1110', '1110'), ('1100', '1100'), ('0000', '0000'), ('1000', '1000'), ('1011', '1011'), ('1100', '1100'), ('0000', '0000'), ('1000', '1000'), ('Machine', 'machin'), ('Code', 'code'), ('Error', 'error'), ('Messages', 'messag'), ('(', '('), ('If', 'if'), (')', ')'), ('Prof.', 'prof.'), ('Dixita', 'dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '–'), ('Introduction', 'introduct'), ('Compiler', 'compil'), ('Design', 'design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Analysis', 'analysi'), ('Synthesis', 'synthesi'), ('model', 'model'), ('compilation', 'compil'), ('Analysis', 'analysi'), ('synthesis', 'synthesi'), ('model', 'model'), ('compilation', 'compil'), ('There', 'there'), ('two', 'two'), ('parts', 'part'), ('compilation', 'compil'), ('.', '.')]

>> Stemming using Snowball Stemmer: 
 [('Assembler', 'assembl'), ('MOV', 'mov'), ('id3', 'id3'), (',', ','), ('R1', 'r1'), ('MUL', 'mul'), ('#', '#'), ('2.0', '2.0'), (',', ','), ('R1', 'r1'), ('MOV', 'mov'), ('id2', 'id2'), (',', ','), ('R2', 'r2'), ('MUL', 'mul'), ('R2', 'r2'), (',', ','), ('R1', 'r1'), ('MOV', 'mov'), ('id1', 'id1'), (',', ','), ('R2', 'r2'), ('ADD', 'add'), ('R2', 'r2'), (',', ','), ('R1', 'r1'), ('MOV', 'mov'), ('R1', 'r1'), (',', ','), ('id1', 'id1'), ('Assembly', 'assembl'), ('Code', 'code'), ('0000', '0000'), ('1100', '1100'), ('0010', '0010'), ('0100', '0100'), ('0111', '0111'), ('1000', '1000'), ('0001', '0001'), ('1111', '1111'), ('0101', '0101'), ('1110', '1110'), ('1100', '1100'), ('0000', '0000'), ('1000', '1000'), ('1011', '1011'), ('1100', '1100'), ('0000', '0000'), ('1000', '1000'), ('Machine', 'machin'), ('Code', 'code'), ('Error', 'error'), ('Messages', 'messag'), ('(', '('), ('If', 'if'), (')', ')'), ('Prof.', 'prof.'), ('Dixita', 'dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '–'), ('Introduction', 'introduct'), ('Compiler', 'compil'), ('Design', 'design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Analysis', 'analysi'), ('Synthesis', 'synthesi'), ('model', 'model'), ('compilation', 'compil'), ('Analysis', 'analysi'), ('synthesis', 'synthesi'), ('model', 'model'), ('compilation', 'compil'), ('There', 'there'), ('two', 'two'), ('parts', 'part'), ('compilation', 'compil'), ('.', '.')]

>> Lemmatization: 
 [('Assembler', 'Assembler'), ('MOV', 'MOV'), ('id3', 'id3'), (',', ','), ('R1', 'R1'), ('MUL', 'MUL'), ('#', '#'), ('2.0', '2.0'), (',', ','), ('R1', 'R1'), ('MOV', 'MOV'), ('id2', 'id2'), (',', ','), ('R2', 'R2'), ('MUL', 'MUL'), ('R2', 'R2'), (',', ','), ('R1', 'R1'), ('MOV', 'MOV'), ('id1', 'id1'), (',', ','), ('R2', 'R2'), ('ADD', 'ADD'), ('R2', 'R2'), (',', ','), ('R1', 'R1'), ('MOV', 'MOV'), ('R1', 'R1'), (',', ','), ('id1', 'id1'), ('Assembly', 'Assembly'), ('Code', 'Code'), ('0000', '0000'), ('1100', '1100'), ('0010', '0010'), ('0100', '0100'), ('0111', '0111'), ('1000', '1000'), ('0001', '0001'), ('1111', '1111'), ('0101', '0101'), ('1110', '1110'), ('1100', '1100'), ('0000', '0000'), ('1000', '1000'), ('1011', '1011'), ('1100', '1100'), ('0000', '0000'), ('1000', '1000'), ('Machine', 'Machine'), ('Code', 'Code'), ('Error', 'Error'), ('Messages', 'Messages'), ('(', '('), ('If', 'If'), (')', ')'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'CD'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'Unit'), ('1', '1'), ('–', '–'), ('Introduction', 'Introduction'), ('Compiler', 'Compiler'), ('Design', 'Design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Analysis', 'Analysis'), ('Synthesis', 'Synthesis'), ('model', 'model'), ('compilation', 'compilation'), ('Analysis', 'Analysis'), ('synthesis', 'synthesis'), ('model', 'model'), ('compilation', 'compilation'), ('There', 'There'), ('two', 'two'), ('parts', 'part'), ('compilation', 'compilation'), ('.', '.')]



============================ Sentence 6 =============================

Analysis Phase Synthesis Phase  Analysis Phase Synthesis Phase Intermediate Representation void main() { int a=1,b=2,c; c=a+b; printf(“%d”,c); } Source Code  0000 1100  0111 1000 0001 1111 0101 1000 1011 Target Code    Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1– Introduction to Compiler Design ‹#›  Analysis phase & Synthesis phase Analysis Phase Analysis part breaks up the source program into constituent pieces and creates an intermediate representation of the source program. 


>> Tokens are: 
 ['Analysis', 'Phase', 'Synthesis', 'Phase', 'Analysis', 'Phase', 'Synthesis', 'Phase', 'Intermediate', 'Representation', 'void', 'main', '(', ')', '{', 'int', 'a=1', ',', 'b=2', ',', 'c', ';', 'c=a+b', ';', 'printf', '(', '“', '%', '”', ',', 'c', ')', ';', '}', 'Source', 'Code', '0000', '1100', '0111', '1000', '0001', '1111', '0101', '1000', '1011', 'Target', 'Code', 'Prof.', 'Jay', 'R', 'Dhamsaniya', '#', '3130006', '(', 'PS', ')', '\uf077', 'Unit', '1', '–', 'Basic', 'Probability', '‹', '#', '›', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '1–', 'Introduction', 'Compiler', 'Design', '‹', '#', '›', 'Analysis', 'phase', '&', 'Synthesis', 'phase', 'Analysis', 'Phase', 'Analysis', 'part', 'breaks', 'source', 'program', 'constituent', 'pieces', 'creates', 'intermediate', 'representation', 'source', 'program', '.']

>> Bigrams are: 
 [('Analysis', 'Phase'), ('Phase', 'Synthesis'), ('Synthesis', 'Phase'), ('Phase', 'Analysis'), ('Analysis', 'Phase'), ('Phase', 'Synthesis'), ('Synthesis', 'Phase'), ('Phase', 'Intermediate'), ('Intermediate', 'Representation'), ('Representation', 'void'), ('void', 'main'), ('main', '('), ('(', ')'), (')', '{'), ('{', 'int'), ('int', 'a=1'), ('a=1', ','), (',', 'b=2'), ('b=2', ','), (',', 'c'), ('c', ';'), (';', 'c=a+b'), ('c=a+b', ';'), (';', 'printf'), ('printf', '('), ('(', '“'), ('“', '%'), ('%', '”'), ('”', ','), (',', 'c'), ('c', ')'), (')', ';'), (';', '}'), ('}', 'Source'), ('Source', 'Code'), ('Code', '0000'), ('0000', '1100'), ('1100', '0111'), ('0111', '1000'), ('1000', '0001'), ('0001', '1111'), ('1111', '0101'), ('0101', '1000'), ('1000', '1011'), ('1011', 'Target'), ('Target', 'Code'), ('Code', 'Prof.'), ('Prof.', 'Jay'), ('Jay', 'R'), ('R', 'Dhamsaniya'), ('Dhamsaniya', '#'), ('#', '3130006'), ('3130006', '('), ('(', 'PS'), ('PS', ')'), (')', '\uf077'), ('\uf077', 'Unit'), ('Unit', '1'), ('1', '–'), ('–', 'Basic'), ('Basic', 'Probability'), ('Probability', '‹'), ('‹', '#'), ('#', '›'), ('›', 'Prof.'), ('Prof.', 'Dixita'), ('Dixita', 'B'), ('B', 'Kagathara'), ('Kagathara', '#'), ('#', '2170701'), ('2170701', '('), ('(', 'CD'), ('CD', ')'), (')', '\uf077'), ('\uf077', 'Unit'), ('Unit', '1–'), ('1–', 'Introduction'), ('Introduction', 'Compiler'), ('Compiler', 'Design'), ('Design', '‹'), ('‹', '#'), ('#', '›'), ('›', 'Analysis'), ('Analysis', 'phase'), ('phase', '&'), ('&', 'Synthesis'), ('Synthesis', 'phase'), ('phase', 'Analysis'), ('Analysis', 'Phase'), ('Phase', 'Analysis'), ('Analysis', 'part'), ('part', 'breaks'), ('breaks', 'source'), ('source', 'program'), ('program', 'constituent'), ('constituent', 'pieces'), ('pieces', 'creates'), ('creates', 'intermediate'), ('intermediate', 'representation'), ('representation', 'source'), ('source', 'program'), ('program', '.')]

>> Trigrams are: 
 [('Analysis', 'Phase', 'Synthesis'), ('Phase', 'Synthesis', 'Phase'), ('Synthesis', 'Phase', 'Analysis'), ('Phase', 'Analysis', 'Phase'), ('Analysis', 'Phase', 'Synthesis'), ('Phase', 'Synthesis', 'Phase'), ('Synthesis', 'Phase', 'Intermediate'), ('Phase', 'Intermediate', 'Representation'), ('Intermediate', 'Representation', 'void'), ('Representation', 'void', 'main'), ('void', 'main', '('), ('main', '(', ')'), ('(', ')', '{'), (')', '{', 'int'), ('{', 'int', 'a=1'), ('int', 'a=1', ','), ('a=1', ',', 'b=2'), (',', 'b=2', ','), ('b=2', ',', 'c'), (',', 'c', ';'), ('c', ';', 'c=a+b'), (';', 'c=a+b', ';'), ('c=a+b', ';', 'printf'), (';', 'printf', '('), ('printf', '(', '“'), ('(', '“', '%'), ('“', '%', '”'), ('%', '”', ','), ('”', ',', 'c'), (',', 'c', ')'), ('c', ')', ';'), (')', ';', '}'), (';', '}', 'Source'), ('}', 'Source', 'Code'), ('Source', 'Code', '0000'), ('Code', '0000', '1100'), ('0000', '1100', '0111'), ('1100', '0111', '1000'), ('0111', '1000', '0001'), ('1000', '0001', '1111'), ('0001', '1111', '0101'), ('1111', '0101', '1000'), ('0101', '1000', '1011'), ('1000', '1011', 'Target'), ('1011', 'Target', 'Code'), ('Target', 'Code', 'Prof.'), ('Code', 'Prof.', 'Jay'), ('Prof.', 'Jay', 'R'), ('Jay', 'R', 'Dhamsaniya'), ('R', 'Dhamsaniya', '#'), ('Dhamsaniya', '#', '3130006'), ('#', '3130006', '('), ('3130006', '(', 'PS'), ('(', 'PS', ')'), ('PS', ')', '\uf077'), (')', '\uf077', 'Unit'), ('\uf077', 'Unit', '1'), ('Unit', '1', '–'), ('1', '–', 'Basic'), ('–', 'Basic', 'Probability'), ('Basic', 'Probability', '‹'), ('Probability', '‹', '#'), ('‹', '#', '›'), ('#', '›', 'Prof.'), ('›', 'Prof.', 'Dixita'), ('Prof.', 'Dixita', 'B'), ('Dixita', 'B', 'Kagathara'), ('B', 'Kagathara', '#'), ('Kagathara', '#', '2170701'), ('#', '2170701', '('), ('2170701', '(', 'CD'), ('(', 'CD', ')'), ('CD', ')', '\uf077'), (')', '\uf077', 'Unit'), ('\uf077', 'Unit', '1–'), ('Unit', '1–', 'Introduction'), ('1–', 'Introduction', 'Compiler'), ('Introduction', 'Compiler', 'Design'), ('Compiler', 'Design', '‹'), ('Design', '‹', '#'), ('‹', '#', '›'), ('#', '›', 'Analysis'), ('›', 'Analysis', 'phase'), ('Analysis', 'phase', '&'), ('phase', '&', 'Synthesis'), ('&', 'Synthesis', 'phase'), ('Synthesis', 'phase', 'Analysis'), ('phase', 'Analysis', 'Phase'), ('Analysis', 'Phase', 'Analysis'), ('Phase', 'Analysis', 'part'), ('Analysis', 'part', 'breaks'), ('part', 'breaks', 'source'), ('breaks', 'source', 'program'), ('source', 'program', 'constituent'), ('program', 'constituent', 'pieces'), ('constituent', 'pieces', 'creates'), ('pieces', 'creates', 'intermediate'), ('creates', 'intermediate', 'representation'), ('intermediate', 'representation', 'source'), ('representation', 'source', 'program'), ('source', 'program', '.')]

>> POS Tags are: 
 [('Analysis', 'NN'), ('Phase', 'NNP'), ('Synthesis', 'NNP'), ('Phase', 'NNP'), ('Analysis', 'NNP'), ('Phase', 'NNP'), ('Synthesis', 'NNP'), ('Phase', 'NNP'), ('Intermediate', 'NNP'), ('Representation', 'NNP'), ('void', 'NN'), ('main', 'JJ'), ('(', '('), (')', ')'), ('{', '('), ('int', 'NN'), ('a=1', 'NN'), (',', ','), ('b=2', 'NN'), (',', ','), ('c', 'NN'), (';', ':'), ('c=a+b', 'NN'), (';', ':'), ('printf', 'CC'), ('(', '('), ('“', 'CD'), ('%', 'NN'), ('”', 'NN'), (',', ','), ('c', 'NN'), (')', ')'), (';', ':'), ('}', ')'), ('Source', 'NNP'), ('Code', 'NNP'), ('0000', 'CD'), ('1100', 'CD'), ('0111', 'CD'), ('1000', 'CD'), ('0001', 'CD'), ('1111', 'CD'), ('0101', 'CD'), ('1000', 'CD'), ('1011', 'CD'), ('Target', 'NNP'), ('Code', 'NNP'), ('Prof.', 'NNP'), ('Jay', 'NNP'), ('R', 'NNP'), ('Dhamsaniya', 'NNP'), ('#', '#'), ('3130006', 'CD'), ('(', '('), ('PS', 'NNP'), (')', ')'), ('\uf077', 'VBD'), ('Unit', 'NNP'), ('1', 'CD'), ('–', 'NNP'), ('Basic', 'NNP'), ('Probability', 'NNP'), ('‹', 'NNP'), ('#', '#'), ('›', 'NNP'), ('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', '#'), ('2170701', 'CD'), ('(', '('), ('CD', 'NN'), (')', ')'), ('\uf077', 'VBD'), ('Unit', 'NNP'), ('1–', 'CD'), ('Introduction', 'NNP'), ('Compiler', 'NNP'), ('Design', 'NNP'), ('‹', 'NNP'), ('#', '#'), ('›', 'JJ'), ('Analysis', 'NNP'), ('phase', 'NN'), ('&', 'CC'), ('Synthesis', 'NNP'), ('phase', 'NN'), ('Analysis', 'NNP'), ('Phase', 'NNP'), ('Analysis', 'NNP'), ('part', 'NN'), ('breaks', 'NNS'), ('source', 'NN'), ('program', 'NN'), ('constituent', 'NN'), ('pieces', 'NNS'), ('creates', 'VBZ'), ('intermediate', 'JJ'), ('representation', 'NN'), ('source', 'NN'), ('program', 'NN'), ('.', '.')]

 (S
  (NP
    Analysis/NN
    Phase/NNP
    Synthesis/NNP
    Phase/NNP
    Analysis/NNP
    Phase/NNP
    Synthesis/NNP
    Phase/NNP
    Intermediate/NNP
    Representation/NNP
    void/NN)
  main/JJ
  (/(
  )/)
  {/(
  (NP int/NN a=1/NN)
  ,/,
  (NP b=2/NN)
  ,/,
  (NP c/NN)
  ;/:
  (NP c=a+b/NN)
  ;/:
  printf/CC
  (/(
  “/CD
  (NP %/NN ”/NN)
  ,/,
  (NP c/NN)
  )/)
  ;/:
  }/)
  (NP Source/NNP Code/NNP)
  0000/CD
  1100/CD
  0111/CD
  1000/CD
  0001/CD
  1111/CD
  0101/CD
  1000/CD
  1011/CD
  (NP Target/NNP Code/NNP Prof./NNP Jay/NNP R/NNP Dhamsaniya/NNP)
  #/#
  3130006/CD
  (/(
  (NP PS/NNP)
  )/)
  /VBD
  (NP Unit/NNP)
  1/CD
  (NP –/NNP Basic/NNP Probability/NNP ‹/NNP)
  #/#
  (NP ›/NNP Prof./NNP Dixita/NNP B/NNP Kagathara/NNP)
  #/#
  2170701/CD
  (/(
  (NP CD/NN)
  )/)
  /VBD
  (NP Unit/NNP)
  1–/CD
  (NP Introduction/NNP Compiler/NNP Design/NNP ‹/NNP)
  #/#
  (NP ›/JJ Analysis/NNP phase/NN)
  &/CC
  (NP
    Synthesis/NNP
    phase/NN
    Analysis/NNP
    Phase/NNP
    Analysis/NNP
    part/NN
    breaks/NNS
    source/NN
    program/NN
    constituent/NN
    pieces/NNS)
  creates/VBZ
  (NP intermediate/JJ representation/NN source/NN program/NN)
  ./.) 


>> Noun Phrases are: 
 ['Analysis Phase Synthesis Phase Analysis Phase Synthesis Phase Intermediate Representation void', 'int a=1', 'b=2', 'c', 'c=a+b', '% ”', 'c', 'Source Code', 'Target Code Prof. Jay R Dhamsaniya', 'PS', 'Unit', '– Basic Probability ‹', '› Prof. Dixita B Kagathara', 'CD', 'Unit', 'Introduction Compiler Design ‹', '› Analysis phase', 'Synthesis phase Analysis Phase Analysis part breaks source program constituent pieces', 'intermediate representation source program']

>> Named Entities are: 
 [('PERSON', 'Analysis'), ('PERSON', 'Phase Synthesis Phase Analysis Phase Synthesis Phase Intermediate'), ('PERSON', 'Source Code'), ('PERSON', 'Target Code'), ('ORGANIZATION', 'Unit'), ('ORGANIZATION', 'Unit'), ('ORGANIZATION', 'Synthesis'), ('PERSON', 'Analysis Phase Analysis')] 

>> Stemming using Porter Stemmer: 
 [('Analysis', 'analysi'), ('Phase', 'phase'), ('Synthesis', 'synthesi'), ('Phase', 'phase'), ('Analysis', 'analysi'), ('Phase', 'phase'), ('Synthesis', 'synthesi'), ('Phase', 'phase'), ('Intermediate', 'intermedi'), ('Representation', 'represent'), ('void', 'void'), ('main', 'main'), ('(', '('), (')', ')'), ('{', '{'), ('int', 'int'), ('a=1', 'a=1'), (',', ','), ('b=2', 'b=2'), (',', ','), ('c', 'c'), (';', ';'), ('c=a+b', 'c=a+b'), (';', ';'), ('printf', 'printf'), ('(', '('), ('“', '“'), ('%', '%'), ('”', '”'), (',', ','), ('c', 'c'), (')', ')'), (';', ';'), ('}', '}'), ('Source', 'sourc'), ('Code', 'code'), ('0000', '0000'), ('1100', '1100'), ('0111', '0111'), ('1000', '1000'), ('0001', '0001'), ('1111', '1111'), ('0101', '0101'), ('1000', '1000'), ('1011', '1011'), ('Target', 'target'), ('Code', 'code'), ('Prof.', 'prof.'), ('Jay', 'jay'), ('R', 'r'), ('Dhamsaniya', 'dhamsaniya'), ('#', '#'), ('3130006', '3130006'), ('(', '('), ('PS', 'ps'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '–'), ('Basic', 'basic'), ('Probability', 'probabl'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Prof.', 'prof.'), ('Dixita', 'dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1–', '1–'), ('Introduction', 'introduct'), ('Compiler', 'compil'), ('Design', 'design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Analysis', 'analysi'), ('phase', 'phase'), ('&', '&'), ('Synthesis', 'synthesi'), ('phase', 'phase'), ('Analysis', 'analysi'), ('Phase', 'phase'), ('Analysis', 'analysi'), ('part', 'part'), ('breaks', 'break'), ('source', 'sourc'), ('program', 'program'), ('constituent', 'constitu'), ('pieces', 'piec'), ('creates', 'creat'), ('intermediate', 'intermedi'), ('representation', 'represent'), ('source', 'sourc'), ('program', 'program'), ('.', '.')]

>> Stemming using Snowball Stemmer: 
 [('Analysis', 'analysi'), ('Phase', 'phase'), ('Synthesis', 'synthesi'), ('Phase', 'phase'), ('Analysis', 'analysi'), ('Phase', 'phase'), ('Synthesis', 'synthesi'), ('Phase', 'phase'), ('Intermediate', 'intermedi'), ('Representation', 'represent'), ('void', 'void'), ('main', 'main'), ('(', '('), (')', ')'), ('{', '{'), ('int', 'int'), ('a=1', 'a=1'), (',', ','), ('b=2', 'b=2'), (',', ','), ('c', 'c'), (';', ';'), ('c=a+b', 'c=a+b'), (';', ';'), ('printf', 'printf'), ('(', '('), ('“', '“'), ('%', '%'), ('”', '”'), (',', ','), ('c', 'c'), (')', ')'), (';', ';'), ('}', '}'), ('Source', 'sourc'), ('Code', 'code'), ('0000', '0000'), ('1100', '1100'), ('0111', '0111'), ('1000', '1000'), ('0001', '0001'), ('1111', '1111'), ('0101', '0101'), ('1000', '1000'), ('1011', '1011'), ('Target', 'target'), ('Code', 'code'), ('Prof.', 'prof.'), ('Jay', 'jay'), ('R', 'r'), ('Dhamsaniya', 'dhamsaniya'), ('#', '#'), ('3130006', '3130006'), ('(', '('), ('PS', 'ps'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '–'), ('Basic', 'basic'), ('Probability', 'probabl'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Prof.', 'prof.'), ('Dixita', 'dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1–', '1–'), ('Introduction', 'introduct'), ('Compiler', 'compil'), ('Design', 'design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Analysis', 'analysi'), ('phase', 'phase'), ('&', '&'), ('Synthesis', 'synthesi'), ('phase', 'phase'), ('Analysis', 'analysi'), ('Phase', 'phase'), ('Analysis', 'analysi'), ('part', 'part'), ('breaks', 'break'), ('source', 'sourc'), ('program', 'program'), ('constituent', 'constitu'), ('pieces', 'piec'), ('creates', 'creat'), ('intermediate', 'intermedi'), ('representation', 'represent'), ('source', 'sourc'), ('program', 'program'), ('.', '.')]

>> Lemmatization: 
 [('Analysis', 'Analysis'), ('Phase', 'Phase'), ('Synthesis', 'Synthesis'), ('Phase', 'Phase'), ('Analysis', 'Analysis'), ('Phase', 'Phase'), ('Synthesis', 'Synthesis'), ('Phase', 'Phase'), ('Intermediate', 'Intermediate'), ('Representation', 'Representation'), ('void', 'void'), ('main', 'main'), ('(', '('), (')', ')'), ('{', '{'), ('int', 'int'), ('a=1', 'a=1'), (',', ','), ('b=2', 'b=2'), (',', ','), ('c', 'c'), (';', ';'), ('c=a+b', 'c=a+b'), (';', ';'), ('printf', 'printf'), ('(', '('), ('“', '“'), ('%', '%'), ('”', '”'), (',', ','), ('c', 'c'), (')', ')'), (';', ';'), ('}', '}'), ('Source', 'Source'), ('Code', 'Code'), ('0000', '0000'), ('1100', '1100'), ('0111', '0111'), ('1000', '1000'), ('0001', '0001'), ('1111', '1111'), ('0101', '0101'), ('1000', '1000'), ('1011', '1011'), ('Target', 'Target'), ('Code', 'Code'), ('Prof.', 'Prof.'), ('Jay', 'Jay'), ('R', 'R'), ('Dhamsaniya', 'Dhamsaniya'), ('#', '#'), ('3130006', '3130006'), ('(', '('), ('PS', 'PS'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'Unit'), ('1', '1'), ('–', '–'), ('Basic', 'Basic'), ('Probability', 'Probability'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'CD'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'Unit'), ('1–', '1–'), ('Introduction', 'Introduction'), ('Compiler', 'Compiler'), ('Design', 'Design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Analysis', 'Analysis'), ('phase', 'phase'), ('&', '&'), ('Synthesis', 'Synthesis'), ('phase', 'phase'), ('Analysis', 'Analysis'), ('Phase', 'Phase'), ('Analysis', 'Analysis'), ('part', 'part'), ('breaks', 'break'), ('source', 'source'), ('program', 'program'), ('constituent', 'constituent'), ('pieces', 'piece'), ('creates', 'creates'), ('intermediate', 'intermediate'), ('representation', 'representation'), ('source', 'source'), ('program', 'program'), ('.', '.')]



============================ Sentence 7 =============================

Analysis phase consists of three sub phases:  Lexical analysis  Syntax analysis  Semantic analysis  Synthesis Phase The synthesis part constructs the desired target program from the intermediate representation. 


>> Tokens are: 
 ['Analysis', 'phase', 'consists', 'three', 'sub', 'phases', ':', 'Lexical', 'analysis', 'Syntax', 'analysis', 'Semantic', 'analysis', 'Synthesis', 'Phase', 'The', 'synthesis', 'part', 'constructs', 'desired', 'target', 'program', 'intermediate', 'representation', '.']

>> Bigrams are: 
 [('Analysis', 'phase'), ('phase', 'consists'), ('consists', 'three'), ('three', 'sub'), ('sub', 'phases'), ('phases', ':'), (':', 'Lexical'), ('Lexical', 'analysis'), ('analysis', 'Syntax'), ('Syntax', 'analysis'), ('analysis', 'Semantic'), ('Semantic', 'analysis'), ('analysis', 'Synthesis'), ('Synthesis', 'Phase'), ('Phase', 'The'), ('The', 'synthesis'), ('synthesis', 'part'), ('part', 'constructs'), ('constructs', 'desired'), ('desired', 'target'), ('target', 'program'), ('program', 'intermediate'), ('intermediate', 'representation'), ('representation', '.')]

>> Trigrams are: 
 [('Analysis', 'phase', 'consists'), ('phase', 'consists', 'three'), ('consists', 'three', 'sub'), ('three', 'sub', 'phases'), ('sub', 'phases', ':'), ('phases', ':', 'Lexical'), (':', 'Lexical', 'analysis'), ('Lexical', 'analysis', 'Syntax'), ('analysis', 'Syntax', 'analysis'), ('Syntax', 'analysis', 'Semantic'), ('analysis', 'Semantic', 'analysis'), ('Semantic', 'analysis', 'Synthesis'), ('analysis', 'Synthesis', 'Phase'), ('Synthesis', 'Phase', 'The'), ('Phase', 'The', 'synthesis'), ('The', 'synthesis', 'part'), ('synthesis', 'part', 'constructs'), ('part', 'constructs', 'desired'), ('constructs', 'desired', 'target'), ('desired', 'target', 'program'), ('target', 'program', 'intermediate'), ('program', 'intermediate', 'representation'), ('intermediate', 'representation', '.')]

>> POS Tags are: 
 [('Analysis', 'NN'), ('phase', 'NN'), ('consists', 'VBZ'), ('three', 'CD'), ('sub', 'NN'), ('phases', 'NNS'), (':', ':'), ('Lexical', 'JJ'), ('analysis', 'NN'), ('Syntax', 'NNP'), ('analysis', 'NN'), ('Semantic', 'NNP'), ('analysis', 'NN'), ('Synthesis', 'NNP'), ('Phase', 'NNP'), ('The', 'DT'), ('synthesis', 'NN'), ('part', 'NN'), ('constructs', 'NNS'), ('desired', 'VBD'), ('target', 'NN'), ('program', 'NN'), ('intermediate', 'JJ'), ('representation', 'NN'), ('.', '.')]

 (S
  (NP Analysis/NN phase/NN)
  consists/VBZ
  three/CD
  (NP sub/NN phases/NNS)
  :/:
  (NP
    Lexical/JJ
    analysis/NN
    Syntax/NNP
    analysis/NN
    Semantic/NNP
    analysis/NN
    Synthesis/NNP
    Phase/NNP)
  (NP The/DT synthesis/NN part/NN constructs/NNS)
  desired/VBD
  (NP target/NN program/NN)
  (NP intermediate/JJ representation/NN)
  ./.) 


>> Noun Phrases are: 
 ['Analysis phase', 'sub phases', 'Lexical analysis Syntax analysis Semantic analysis Synthesis Phase', 'The synthesis part constructs', 'target program', 'intermediate representation']

>> Named Entities are: 
 [('GPE', 'Analysis'), ('PERSON', 'Syntax'), ('ORGANIZATION', 'Semantic'), ('PERSON', 'Synthesis Phase')] 

>> Stemming using Porter Stemmer: 
 [('Analysis', 'analysi'), ('phase', 'phase'), ('consists', 'consist'), ('three', 'three'), ('sub', 'sub'), ('phases', 'phase'), (':', ':'), ('Lexical', 'lexic'), ('analysis', 'analysi'), ('Syntax', 'syntax'), ('analysis', 'analysi'), ('Semantic', 'semant'), ('analysis', 'analysi'), ('Synthesis', 'synthesi'), ('Phase', 'phase'), ('The', 'the'), ('synthesis', 'synthesi'), ('part', 'part'), ('constructs', 'construct'), ('desired', 'desir'), ('target', 'target'), ('program', 'program'), ('intermediate', 'intermedi'), ('representation', 'represent'), ('.', '.')]

>> Stemming using Snowball Stemmer: 
 [('Analysis', 'analysi'), ('phase', 'phase'), ('consists', 'consist'), ('three', 'three'), ('sub', 'sub'), ('phases', 'phase'), (':', ':'), ('Lexical', 'lexic'), ('analysis', 'analysi'), ('Syntax', 'syntax'), ('analysis', 'analysi'), ('Semantic', 'semant'), ('analysis', 'analysi'), ('Synthesis', 'synthesi'), ('Phase', 'phase'), ('The', 'the'), ('synthesis', 'synthesi'), ('part', 'part'), ('constructs', 'construct'), ('desired', 'desir'), ('target', 'target'), ('program', 'program'), ('intermediate', 'intermedi'), ('representation', 'represent'), ('.', '.')]

>> Lemmatization: 
 [('Analysis', 'Analysis'), ('phase', 'phase'), ('consists', 'consists'), ('three', 'three'), ('sub', 'sub'), ('phases', 'phase'), (':', ':'), ('Lexical', 'Lexical'), ('analysis', 'analysis'), ('Syntax', 'Syntax'), ('analysis', 'analysis'), ('Semantic', 'Semantic'), ('analysis', 'analysis'), ('Synthesis', 'Synthesis'), ('Phase', 'Phase'), ('The', 'The'), ('synthesis', 'synthesis'), ('part', 'part'), ('constructs', 'construct'), ('desired', 'desired'), ('target', 'target'), ('program', 'program'), ('intermediate', 'intermediate'), ('representation', 'representation'), ('.', '.')]



============================ Sentence 8 =============================

Synthesis phase consist of the following sub phases:  Code optimization Code generation     Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1 – Introduction to Compiler Design ‹#›  Phases of compiler        Phases of compiler Compiler Analysis phase Synthesis phase Lexical analysis  Syntax analysis  Semantic analysis    Intermediate code generation Code optimization  Code generation     Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1– Introduction to Compiler Design ‹#›  Lexical analysis Lexical Analysis is also called linear analysis or scanning. 


>> Tokens are: 
 ['Synthesis', 'phase', 'consist', 'following', 'sub', 'phases', ':', 'Code', 'optimization', 'Code', 'generation', 'Prof.', 'Jay', 'R', 'Dhamsaniya', '#', '3130006', '(', 'PS', ')', '\uf077', 'Unit', '1', '–', 'Basic', 'Probability', '‹', '#', '›', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '1', '–', 'Introduction', 'Compiler', 'Design', '‹', '#', '›', 'Phases', 'compiler', 'Phases', 'compiler', 'Compiler', 'Analysis', 'phase', 'Synthesis', 'phase', 'Lexical', 'analysis', 'Syntax', 'analysis', 'Semantic', 'analysis', 'Intermediate', 'code', 'generation', 'Code', 'optimization', 'Code', 'generation', 'Prof.', 'Jay', 'R', 'Dhamsaniya', '#', '3130006', '(', 'PS', ')', '\uf077', 'Unit', '1', '–', 'Basic', 'Probability', '‹', '#', '›', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '1–', 'Introduction', 'Compiler', 'Design', '‹', '#', '›', 'Lexical', 'analysis', 'Lexical', 'Analysis', 'also', 'called', 'linear', 'analysis', 'scanning', '.']

>> Bigrams are: 
 [('Synthesis', 'phase'), ('phase', 'consist'), ('consist', 'following'), ('following', 'sub'), ('sub', 'phases'), ('phases', ':'), (':', 'Code'), ('Code', 'optimization'), ('optimization', 'Code'), ('Code', 'generation'), ('generation', 'Prof.'), ('Prof.', 'Jay'), ('Jay', 'R'), ('R', 'Dhamsaniya'), ('Dhamsaniya', '#'), ('#', '3130006'), ('3130006', '('), ('(', 'PS'), ('PS', ')'), (')', '\uf077'), ('\uf077', 'Unit'), ('Unit', '1'), ('1', '–'), ('–', 'Basic'), ('Basic', 'Probability'), ('Probability', '‹'), ('‹', '#'), ('#', '›'), ('›', 'Prof.'), ('Prof.', 'Dixita'), ('Dixita', 'B'), ('B', 'Kagathara'), ('Kagathara', '#'), ('#', '2170701'), ('2170701', '('), ('(', 'CD'), ('CD', ')'), (')', '\uf077'), ('\uf077', 'Unit'), ('Unit', '1'), ('1', '–'), ('–', 'Introduction'), ('Introduction', 'Compiler'), ('Compiler', 'Design'), ('Design', '‹'), ('‹', '#'), ('#', '›'), ('›', 'Phases'), ('Phases', 'compiler'), ('compiler', 'Phases'), ('Phases', 'compiler'), ('compiler', 'Compiler'), ('Compiler', 'Analysis'), ('Analysis', 'phase'), ('phase', 'Synthesis'), ('Synthesis', 'phase'), ('phase', 'Lexical'), ('Lexical', 'analysis'), ('analysis', 'Syntax'), ('Syntax', 'analysis'), ('analysis', 'Semantic'), ('Semantic', 'analysis'), ('analysis', 'Intermediate'), ('Intermediate', 'code'), ('code', 'generation'), ('generation', 'Code'), ('Code', 'optimization'), ('optimization', 'Code'), ('Code', 'generation'), ('generation', 'Prof.'), ('Prof.', 'Jay'), ('Jay', 'R'), ('R', 'Dhamsaniya'), ('Dhamsaniya', '#'), ('#', '3130006'), ('3130006', '('), ('(', 'PS'), ('PS', ')'), (')', '\uf077'), ('\uf077', 'Unit'), ('Unit', '1'), ('1', '–'), ('–', 'Basic'), ('Basic', 'Probability'), ('Probability', '‹'), ('‹', '#'), ('#', '›'), ('›', 'Prof.'), ('Prof.', 'Dixita'), ('Dixita', 'B'), ('B', 'Kagathara'), ('Kagathara', '#'), ('#', '2170701'), ('2170701', '('), ('(', 'CD'), ('CD', ')'), (')', '\uf077'), ('\uf077', 'Unit'), ('Unit', '1–'), ('1–', 'Introduction'), ('Introduction', 'Compiler'), ('Compiler', 'Design'), ('Design', '‹'), ('‹', '#'), ('#', '›'), ('›', 'Lexical'), ('Lexical', 'analysis'), ('analysis', 'Lexical'), ('Lexical', 'Analysis'), ('Analysis', 'also'), ('also', 'called'), ('called', 'linear'), ('linear', 'analysis'), ('analysis', 'scanning'), ('scanning', '.')]

>> Trigrams are: 
 [('Synthesis', 'phase', 'consist'), ('phase', 'consist', 'following'), ('consist', 'following', 'sub'), ('following', 'sub', 'phases'), ('sub', 'phases', ':'), ('phases', ':', 'Code'), (':', 'Code', 'optimization'), ('Code', 'optimization', 'Code'), ('optimization', 'Code', 'generation'), ('Code', 'generation', 'Prof.'), ('generation', 'Prof.', 'Jay'), ('Prof.', 'Jay', 'R'), ('Jay', 'R', 'Dhamsaniya'), ('R', 'Dhamsaniya', '#'), ('Dhamsaniya', '#', '3130006'), ('#', '3130006', '('), ('3130006', '(', 'PS'), ('(', 'PS', ')'), ('PS', ')', '\uf077'), (')', '\uf077', 'Unit'), ('\uf077', 'Unit', '1'), ('Unit', '1', '–'), ('1', '–', 'Basic'), ('–', 'Basic', 'Probability'), ('Basic', 'Probability', '‹'), ('Probability', '‹', '#'), ('‹', '#', '›'), ('#', '›', 'Prof.'), ('›', 'Prof.', 'Dixita'), ('Prof.', 'Dixita', 'B'), ('Dixita', 'B', 'Kagathara'), ('B', 'Kagathara', '#'), ('Kagathara', '#', '2170701'), ('#', '2170701', '('), ('2170701', '(', 'CD'), ('(', 'CD', ')'), ('CD', ')', '\uf077'), (')', '\uf077', 'Unit'), ('\uf077', 'Unit', '1'), ('Unit', '1', '–'), ('1', '–', 'Introduction'), ('–', 'Introduction', 'Compiler'), ('Introduction', 'Compiler', 'Design'), ('Compiler', 'Design', '‹'), ('Design', '‹', '#'), ('‹', '#', '›'), ('#', '›', 'Phases'), ('›', 'Phases', 'compiler'), ('Phases', 'compiler', 'Phases'), ('compiler', 'Phases', 'compiler'), ('Phases', 'compiler', 'Compiler'), ('compiler', 'Compiler', 'Analysis'), ('Compiler', 'Analysis', 'phase'), ('Analysis', 'phase', 'Synthesis'), ('phase', 'Synthesis', 'phase'), ('Synthesis', 'phase', 'Lexical'), ('phase', 'Lexical', 'analysis'), ('Lexical', 'analysis', 'Syntax'), ('analysis', 'Syntax', 'analysis'), ('Syntax', 'analysis', 'Semantic'), ('analysis', 'Semantic', 'analysis'), ('Semantic', 'analysis', 'Intermediate'), ('analysis', 'Intermediate', 'code'), ('Intermediate', 'code', 'generation'), ('code', 'generation', 'Code'), ('generation', 'Code', 'optimization'), ('Code', 'optimization', 'Code'), ('optimization', 'Code', 'generation'), ('Code', 'generation', 'Prof.'), ('generation', 'Prof.', 'Jay'), ('Prof.', 'Jay', 'R'), ('Jay', 'R', 'Dhamsaniya'), ('R', 'Dhamsaniya', '#'), ('Dhamsaniya', '#', '3130006'), ('#', '3130006', '('), ('3130006', '(', 'PS'), ('(', 'PS', ')'), ('PS', ')', '\uf077'), (')', '\uf077', 'Unit'), ('\uf077', 'Unit', '1'), ('Unit', '1', '–'), ('1', '–', 'Basic'), ('–', 'Basic', 'Probability'), ('Basic', 'Probability', '‹'), ('Probability', '‹', '#'), ('‹', '#', '›'), ('#', '›', 'Prof.'), ('›', 'Prof.', 'Dixita'), ('Prof.', 'Dixita', 'B'), ('Dixita', 'B', 'Kagathara'), ('B', 'Kagathara', '#'), ('Kagathara', '#', '2170701'), ('#', '2170701', '('), ('2170701', '(', 'CD'), ('(', 'CD', ')'), ('CD', ')', '\uf077'), (')', '\uf077', 'Unit'), ('\uf077', 'Unit', '1–'), ('Unit', '1–', 'Introduction'), ('1–', 'Introduction', 'Compiler'), ('Introduction', 'Compiler', 'Design'), ('Compiler', 'Design', '‹'), ('Design', '‹', '#'), ('‹', '#', '›'), ('#', '›', 'Lexical'), ('›', 'Lexical', 'analysis'), ('Lexical', 'analysis', 'Lexical'), ('analysis', 'Lexical', 'Analysis'), ('Lexical', 'Analysis', 'also'), ('Analysis', 'also', 'called'), ('also', 'called', 'linear'), ('called', 'linear', 'analysis'), ('linear', 'analysis', 'scanning'), ('analysis', 'scanning', '.')]

>> POS Tags are: 
 [('Synthesis', 'NN'), ('phase', 'NN'), ('consist', 'NN'), ('following', 'VBG'), ('sub', 'JJ'), ('phases', 'NNS'), (':', ':'), ('Code', 'NNP'), ('optimization', 'NN'), ('Code', 'NNP'), ('generation', 'NN'), ('Prof.', 'NNP'), ('Jay', 'NNP'), ('R', 'NNP'), ('Dhamsaniya', 'NNP'), ('#', '#'), ('3130006', 'CD'), ('(', '('), ('PS', 'NNP'), (')', ')'), ('\uf077', 'VBD'), ('Unit', 'NNP'), ('1', 'CD'), ('–', 'NNP'), ('Basic', 'NNP'), ('Probability', 'NNP'), ('‹', 'NNP'), ('#', '#'), ('›', 'NNP'), ('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', '#'), ('2170701', 'CD'), ('(', '('), ('CD', 'NN'), (')', ')'), ('\uf077', 'VBD'), ('Unit', 'NNP'), ('1', 'CD'), ('–', 'NNP'), ('Introduction', 'NNP'), ('Compiler', 'NNP'), ('Design', 'NNP'), ('‹', 'NNP'), ('#', '#'), ('›', 'NNP'), ('Phases', 'NNP'), ('compiler', 'NN'), ('Phases', 'NNP'), ('compiler', 'NN'), ('Compiler', 'NNP'), ('Analysis', 'NNP'), ('phase', 'NN'), ('Synthesis', 'NNP'), ('phase', 'NN'), ('Lexical', 'NNP'), ('analysis', 'NN'), ('Syntax', 'NNP'), ('analysis', 'NN'), ('Semantic', 'NNP'), ('analysis', 'NN'), ('Intermediate', 'NNP'), ('code', 'NN'), ('generation', 'NN'), ('Code', 'NNP'), ('optimization', 'NN'), ('Code', 'NNP'), ('generation', 'NN'), ('Prof.', 'NNP'), ('Jay', 'NNP'), ('R', 'NNP'), ('Dhamsaniya', 'NNP'), ('#', '#'), ('3130006', 'CD'), ('(', '('), ('PS', 'NNP'), (')', ')'), ('\uf077', 'VBD'), ('Unit', 'NNP'), ('1', 'CD'), ('–', 'NNP'), ('Basic', 'NNP'), ('Probability', 'NNP'), ('‹', 'NNP'), ('#', '#'), ('›', 'NNP'), ('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', '#'), ('2170701', 'CD'), ('(', '('), ('CD', 'NN'), (')', ')'), ('\uf077', 'VBD'), ('Unit', 'NNP'), ('1–', 'CD'), ('Introduction', 'NNP'), ('Compiler', 'NNP'), ('Design', 'NNP'), ('‹', 'NNP'), ('#', '#'), ('›', 'NNP'), ('Lexical', 'NNP'), ('analysis', 'NN'), ('Lexical', 'NNP'), ('Analysis', 'NNP'), ('also', 'RB'), ('called', 'VBD'), ('linear', 'JJ'), ('analysis', 'NN'), ('scanning', 'NN'), ('.', '.')]

 (S
  (NP Synthesis/NN phase/NN consist/NN)
  following/VBG
  (NP sub/JJ phases/NNS)
  :/:
  (NP
    Code/NNP
    optimization/NN
    Code/NNP
    generation/NN
    Prof./NNP
    Jay/NNP
    R/NNP
    Dhamsaniya/NNP)
  #/#
  3130006/CD
  (/(
  (NP PS/NNP)
  )/)
  /VBD
  (NP Unit/NNP)
  1/CD
  (NP –/NNP Basic/NNP Probability/NNP ‹/NNP)
  #/#
  (NP ›/NNP Prof./NNP Dixita/NNP B/NNP Kagathara/NNP)
  #/#
  2170701/CD
  (/(
  (NP CD/NN)
  )/)
  /VBD
  (NP Unit/NNP)
  1/CD
  (NP –/NNP Introduction/NNP Compiler/NNP Design/NNP ‹/NNP)
  #/#
  (NP
    ›/NNP
    Phases/NNP
    compiler/NN
    Phases/NNP
    compiler/NN
    Compiler/NNP
    Analysis/NNP
    phase/NN
    Synthesis/NNP
    phase/NN
    Lexical/NNP
    analysis/NN
    Syntax/NNP
    analysis/NN
    Semantic/NNP
    analysis/NN
    Intermediate/NNP
    code/NN
    generation/NN
    Code/NNP
    optimization/NN
    Code/NNP
    generation/NN
    Prof./NNP
    Jay/NNP
    R/NNP
    Dhamsaniya/NNP)
  #/#
  3130006/CD
  (/(
  (NP PS/NNP)
  )/)
  /VBD
  (NP Unit/NNP)
  1/CD
  (NP –/NNP Basic/NNP Probability/NNP ‹/NNP)
  #/#
  (NP ›/NNP Prof./NNP Dixita/NNP B/NNP Kagathara/NNP)
  #/#
  2170701/CD
  (/(
  (NP CD/NN)
  )/)
  /VBD
  (NP Unit/NNP)
  1–/CD
  (NP Introduction/NNP Compiler/NNP Design/NNP ‹/NNP)
  #/#
  (NP ›/NNP Lexical/NNP analysis/NN Lexical/NNP Analysis/NNP)
  also/RB
  called/VBD
  (NP linear/JJ analysis/NN scanning/NN)
  ./.) 


>> Noun Phrases are: 
 ['Synthesis phase consist', 'sub phases', 'Code optimization Code generation Prof. Jay R Dhamsaniya', 'PS', 'Unit', '– Basic Probability ‹', '› Prof. Dixita B Kagathara', 'CD', 'Unit', '– Introduction Compiler Design ‹', '› Phases compiler Phases compiler Compiler Analysis phase Synthesis phase Lexical analysis Syntax analysis Semantic analysis Intermediate code generation Code optimization Code generation Prof. Jay R Dhamsaniya', 'PS', 'Unit', '– Basic Probability ‹', '› Prof. Dixita B Kagathara', 'CD', 'Unit', 'Introduction Compiler Design ‹', '› Lexical analysis Lexical Analysis', 'linear analysis scanning']

>> Named Entities are: 
 [('GPE', 'Synthesis'), ('PERSON', 'Code'), ('ORGANIZATION', 'Unit'), ('ORGANIZATION', 'Unit'), ('PERSON', 'Phases'), ('ORGANIZATION', 'Compiler Analysis'), ('PERSON', 'Synthesis'), ('PERSON', 'Lexical'), ('PERSON', 'Syntax'), ('ORGANIZATION', 'Semantic'), ('ORGANIZATION', 'Intermediate'), ('PERSON', 'Code'), ('PERSON', 'Code'), ('ORGANIZATION', 'Unit'), ('ORGANIZATION', 'Unit'), ('PERSON', 'Lexical Analysis')] 

>> Stemming using Porter Stemmer: 
 [('Synthesis', 'synthesi'), ('phase', 'phase'), ('consist', 'consist'), ('following', 'follow'), ('sub', 'sub'), ('phases', 'phase'), (':', ':'), ('Code', 'code'), ('optimization', 'optim'), ('Code', 'code'), ('generation', 'gener'), ('Prof.', 'prof.'), ('Jay', 'jay'), ('R', 'r'), ('Dhamsaniya', 'dhamsaniya'), ('#', '#'), ('3130006', '3130006'), ('(', '('), ('PS', 'ps'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '–'), ('Basic', 'basic'), ('Probability', 'probabl'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Prof.', 'prof.'), ('Dixita', 'dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '–'), ('Introduction', 'introduct'), ('Compiler', 'compil'), ('Design', 'design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Phases', 'phase'), ('compiler', 'compil'), ('Phases', 'phase'), ('compiler', 'compil'), ('Compiler', 'compil'), ('Analysis', 'analysi'), ('phase', 'phase'), ('Synthesis', 'synthesi'), ('phase', 'phase'), ('Lexical', 'lexic'), ('analysis', 'analysi'), ('Syntax', 'syntax'), ('analysis', 'analysi'), ('Semantic', 'semant'), ('analysis', 'analysi'), ('Intermediate', 'intermedi'), ('code', 'code'), ('generation', 'gener'), ('Code', 'code'), ('optimization', 'optim'), ('Code', 'code'), ('generation', 'gener'), ('Prof.', 'prof.'), ('Jay', 'jay'), ('R', 'r'), ('Dhamsaniya', 'dhamsaniya'), ('#', '#'), ('3130006', '3130006'), ('(', '('), ('PS', 'ps'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '–'), ('Basic', 'basic'), ('Probability', 'probabl'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Prof.', 'prof.'), ('Dixita', 'dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1–', '1–'), ('Introduction', 'introduct'), ('Compiler', 'compil'), ('Design', 'design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Lexical', 'lexic'), ('analysis', 'analysi'), ('Lexical', 'lexic'), ('Analysis', 'analysi'), ('also', 'also'), ('called', 'call'), ('linear', 'linear'), ('analysis', 'analysi'), ('scanning', 'scan'), ('.', '.')]

>> Stemming using Snowball Stemmer: 
 [('Synthesis', 'synthesi'), ('phase', 'phase'), ('consist', 'consist'), ('following', 'follow'), ('sub', 'sub'), ('phases', 'phase'), (':', ':'), ('Code', 'code'), ('optimization', 'optim'), ('Code', 'code'), ('generation', 'generat'), ('Prof.', 'prof.'), ('Jay', 'jay'), ('R', 'r'), ('Dhamsaniya', 'dhamsaniya'), ('#', '#'), ('3130006', '3130006'), ('(', '('), ('PS', 'ps'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '–'), ('Basic', 'basic'), ('Probability', 'probabl'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Prof.', 'prof.'), ('Dixita', 'dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '–'), ('Introduction', 'introduct'), ('Compiler', 'compil'), ('Design', 'design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Phases', 'phase'), ('compiler', 'compil'), ('Phases', 'phase'), ('compiler', 'compil'), ('Compiler', 'compil'), ('Analysis', 'analysi'), ('phase', 'phase'), ('Synthesis', 'synthesi'), ('phase', 'phase'), ('Lexical', 'lexic'), ('analysis', 'analysi'), ('Syntax', 'syntax'), ('analysis', 'analysi'), ('Semantic', 'semant'), ('analysis', 'analysi'), ('Intermediate', 'intermedi'), ('code', 'code'), ('generation', 'generat'), ('Code', 'code'), ('optimization', 'optim'), ('Code', 'code'), ('generation', 'generat'), ('Prof.', 'prof.'), ('Jay', 'jay'), ('R', 'r'), ('Dhamsaniya', 'dhamsaniya'), ('#', '#'), ('3130006', '3130006'), ('(', '('), ('PS', 'ps'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '–'), ('Basic', 'basic'), ('Probability', 'probabl'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Prof.', 'prof.'), ('Dixita', 'dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1–', '1–'), ('Introduction', 'introduct'), ('Compiler', 'compil'), ('Design', 'design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Lexical', 'lexic'), ('analysis', 'analysi'), ('Lexical', 'lexic'), ('Analysis', 'analysi'), ('also', 'also'), ('called', 'call'), ('linear', 'linear'), ('analysis', 'analysi'), ('scanning', 'scan'), ('.', '.')]

>> Lemmatization: 
 [('Synthesis', 'Synthesis'), ('phase', 'phase'), ('consist', 'consist'), ('following', 'following'), ('sub', 'sub'), ('phases', 'phase'), (':', ':'), ('Code', 'Code'), ('optimization', 'optimization'), ('Code', 'Code'), ('generation', 'generation'), ('Prof.', 'Prof.'), ('Jay', 'Jay'), ('R', 'R'), ('Dhamsaniya', 'Dhamsaniya'), ('#', '#'), ('3130006', '3130006'), ('(', '('), ('PS', 'PS'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'Unit'), ('1', '1'), ('–', '–'), ('Basic', 'Basic'), ('Probability', 'Probability'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'CD'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'Unit'), ('1', '1'), ('–', '–'), ('Introduction', 'Introduction'), ('Compiler', 'Compiler'), ('Design', 'Design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Phases', 'Phases'), ('compiler', 'compiler'), ('Phases', 'Phases'), ('compiler', 'compiler'), ('Compiler', 'Compiler'), ('Analysis', 'Analysis'), ('phase', 'phase'), ('Synthesis', 'Synthesis'), ('phase', 'phase'), ('Lexical', 'Lexical'), ('analysis', 'analysis'), ('Syntax', 'Syntax'), ('analysis', 'analysis'), ('Semantic', 'Semantic'), ('analysis', 'analysis'), ('Intermediate', 'Intermediate'), ('code', 'code'), ('generation', 'generation'), ('Code', 'Code'), ('optimization', 'optimization'), ('Code', 'Code'), ('generation', 'generation'), ('Prof.', 'Prof.'), ('Jay', 'Jay'), ('R', 'R'), ('Dhamsaniya', 'Dhamsaniya'), ('#', '#'), ('3130006', '3130006'), ('(', '('), ('PS', 'PS'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'Unit'), ('1', '1'), ('–', '–'), ('Basic', 'Basic'), ('Probability', 'Probability'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'CD'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'Unit'), ('1–', '1–'), ('Introduction', 'Introduction'), ('Compiler', 'Compiler'), ('Design', 'Design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Lexical', 'Lexical'), ('analysis', 'analysis'), ('Lexical', 'Lexical'), ('Analysis', 'Analysis'), ('also', 'also'), ('called', 'called'), ('linear', 'linear'), ('analysis', 'analysis'), ('scanning', 'scanning'), ('.', '.')]



============================ Sentence 9 =============================

Lexical Analyzer divides the given source statement into the tokens. 


>> Tokens are: 
 ['Lexical', 'Analyzer', 'divides', 'given', 'source', 'statement', 'tokens', '.']

>> Bigrams are: 
 [('Lexical', 'Analyzer'), ('Analyzer', 'divides'), ('divides', 'given'), ('given', 'source'), ('source', 'statement'), ('statement', 'tokens'), ('tokens', '.')]

>> Trigrams are: 
 [('Lexical', 'Analyzer', 'divides'), ('Analyzer', 'divides', 'given'), ('divides', 'given', 'source'), ('given', 'source', 'statement'), ('source', 'statement', 'tokens'), ('statement', 'tokens', '.')]

>> POS Tags are: 
 [('Lexical', 'JJ'), ('Analyzer', 'NNP'), ('divides', 'NNS'), ('given', 'VBN'), ('source', 'NN'), ('statement', 'NN'), ('tokens', 'NNS'), ('.', '.')]

 (S
  (NP Lexical/JJ Analyzer/NNP divides/NNS)
  given/VBN
  (NP source/NN statement/NN tokens/NNS)
  ./.) 


>> Noun Phrases are: 
 ['Lexical Analyzer divides', 'source statement tokens']

>> Named Entities are: 
 [('PERSON', 'Lexical'), ('ORGANIZATION', 'Analyzer')] 

>> Stemming using Porter Stemmer: 
 [('Lexical', 'lexic'), ('Analyzer', 'analyz'), ('divides', 'divid'), ('given', 'given'), ('source', 'sourc'), ('statement', 'statement'), ('tokens', 'token'), ('.', '.')]

>> Stemming using Snowball Stemmer: 
 [('Lexical', 'lexic'), ('Analyzer', 'analyz'), ('divides', 'divid'), ('given', 'given'), ('source', 'sourc'), ('statement', 'statement'), ('tokens', 'token'), ('.', '.')]

>> Lemmatization: 
 [('Lexical', 'Lexical'), ('Analyzer', 'Analyzer'), ('divides', 'divide'), ('given', 'given'), ('source', 'source'), ('statement', 'statement'), ('tokens', 'token'), ('.', '.')]



============================ Sentence 10 =============================

Ex: Position = initial + rate * 60 would be grouped into the following tokens: 	Position (identifier) 	= (Assignment symbol) 	initial (identifier) 	+ (Plus symbol) 	rate (identifier) 	* (Multiplication symbol) 	60 (Number)  Lexical analysis id1 = id2 + id3 * 60        Position = initial + rate*60    Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1 – Introduction to Compiler Design ‹#›  Phases of compiler Compiler Analysis phase Synthesis phase Lexical analysis  Syntax analysis  Semantic analysis    Intermediate code generation Code optimization  Code generation     Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1– Introduction to Compiler Design ‹#›  Syntax analysis Syntax Analysis is also called Parsing or Hierarchical Analysis. 


>> Tokens are: 
 ['Ex', ':', 'Position', '=', 'initial', '+', 'rate', '*', '60', 'would', 'grouped', 'following', 'tokens', ':', 'Position', '(', 'identifier', ')', '=', '(', 'Assignment', 'symbol', ')', 'initial', '(', 'identifier', ')', '+', '(', 'Plus', 'symbol', ')', 'rate', '(', 'identifier', ')', '*', '(', 'Multiplication', 'symbol', ')', '60', '(', 'Number', ')', 'Lexical', 'analysis', 'id1', '=', 'id2', '+', 'id3', '*', '60', 'Position', '=', 'initial', '+', 'rate', '*', '60', 'Prof.', 'Jay', 'R', 'Dhamsaniya', '#', '3130006', '(', 'PS', ')', '\uf077', 'Unit', '1', '–', 'Basic', 'Probability', '‹', '#', '›', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '1', '–', 'Introduction', 'Compiler', 'Design', '‹', '#', '›', 'Phases', 'compiler', 'Compiler', 'Analysis', 'phase', 'Synthesis', 'phase', 'Lexical', 'analysis', 'Syntax', 'analysis', 'Semantic', 'analysis', 'Intermediate', 'code', 'generation', 'Code', 'optimization', 'Code', 'generation', 'Prof.', 'Jay', 'R', 'Dhamsaniya', '#', '3130006', '(', 'PS', ')', '\uf077', 'Unit', '1', '–', 'Basic', 'Probability', '‹', '#', '›', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '1–', 'Introduction', 'Compiler', 'Design', '‹', '#', '›', 'Syntax', 'analysis', 'Syntax', 'Analysis', 'also', 'called', 'Parsing', 'Hierarchical', 'Analysis', '.']

>> Bigrams are: 
 [('Ex', ':'), (':', 'Position'), ('Position', '='), ('=', 'initial'), ('initial', '+'), ('+', 'rate'), ('rate', '*'), ('*', '60'), ('60', 'would'), ('would', 'grouped'), ('grouped', 'following'), ('following', 'tokens'), ('tokens', ':'), (':', 'Position'), ('Position', '('), ('(', 'identifier'), ('identifier', ')'), (')', '='), ('=', '('), ('(', 'Assignment'), ('Assignment', 'symbol'), ('symbol', ')'), (')', 'initial'), ('initial', '('), ('(', 'identifier'), ('identifier', ')'), (')', '+'), ('+', '('), ('(', 'Plus'), ('Plus', 'symbol'), ('symbol', ')'), (')', 'rate'), ('rate', '('), ('(', 'identifier'), ('identifier', ')'), (')', '*'), ('*', '('), ('(', 'Multiplication'), ('Multiplication', 'symbol'), ('symbol', ')'), (')', '60'), ('60', '('), ('(', 'Number'), ('Number', ')'), (')', 'Lexical'), ('Lexical', 'analysis'), ('analysis', 'id1'), ('id1', '='), ('=', 'id2'), ('id2', '+'), ('+', 'id3'), ('id3', '*'), ('*', '60'), ('60', 'Position'), ('Position', '='), ('=', 'initial'), ('initial', '+'), ('+', 'rate'), ('rate', '*'), ('*', '60'), ('60', 'Prof.'), ('Prof.', 'Jay'), ('Jay', 'R'), ('R', 'Dhamsaniya'), ('Dhamsaniya', '#'), ('#', '3130006'), ('3130006', '('), ('(', 'PS'), ('PS', ')'), (')', '\uf077'), ('\uf077', 'Unit'), ('Unit', '1'), ('1', '–'), ('–', 'Basic'), ('Basic', 'Probability'), ('Probability', '‹'), ('‹', '#'), ('#', '›'), ('›', 'Prof.'), ('Prof.', 'Dixita'), ('Dixita', 'B'), ('B', 'Kagathara'), ('Kagathara', '#'), ('#', '2170701'), ('2170701', '('), ('(', 'CD'), ('CD', ')'), (')', '\uf077'), ('\uf077', 'Unit'), ('Unit', '1'), ('1', '–'), ('–', 'Introduction'), ('Introduction', 'Compiler'), ('Compiler', 'Design'), ('Design', '‹'), ('‹', '#'), ('#', '›'), ('›', 'Phases'), ('Phases', 'compiler'), ('compiler', 'Compiler'), ('Compiler', 'Analysis'), ('Analysis', 'phase'), ('phase', 'Synthesis'), ('Synthesis', 'phase'), ('phase', 'Lexical'), ('Lexical', 'analysis'), ('analysis', 'Syntax'), ('Syntax', 'analysis'), ('analysis', 'Semantic'), ('Semantic', 'analysis'), ('analysis', 'Intermediate'), ('Intermediate', 'code'), ('code', 'generation'), ('generation', 'Code'), ('Code', 'optimization'), ('optimization', 'Code'), ('Code', 'generation'), ('generation', 'Prof.'), ('Prof.', 'Jay'), ('Jay', 'R'), ('R', 'Dhamsaniya'), ('Dhamsaniya', '#'), ('#', '3130006'), ('3130006', '('), ('(', 'PS'), ('PS', ')'), (')', '\uf077'), ('\uf077', 'Unit'), ('Unit', '1'), ('1', '–'), ('–', 'Basic'), ('Basic', 'Probability'), ('Probability', '‹'), ('‹', '#'), ('#', '›'), ('›', 'Prof.'), ('Prof.', 'Dixita'), ('Dixita', 'B'), ('B', 'Kagathara'), ('Kagathara', '#'), ('#', '2170701'), ('2170701', '('), ('(', 'CD'), ('CD', ')'), (')', '\uf077'), ('\uf077', 'Unit'), ('Unit', '1–'), ('1–', 'Introduction'), ('Introduction', 'Compiler'), ('Compiler', 'Design'), ('Design', '‹'), ('‹', '#'), ('#', '›'), ('›', 'Syntax'), ('Syntax', 'analysis'), ('analysis', 'Syntax'), ('Syntax', 'Analysis'), ('Analysis', 'also'), ('also', 'called'), ('called', 'Parsing'), ('Parsing', 'Hierarchical'), ('Hierarchical', 'Analysis'), ('Analysis', '.')]

>> Trigrams are: 
 [('Ex', ':', 'Position'), (':', 'Position', '='), ('Position', '=', 'initial'), ('=', 'initial', '+'), ('initial', '+', 'rate'), ('+', 'rate', '*'), ('rate', '*', '60'), ('*', '60', 'would'), ('60', 'would', 'grouped'), ('would', 'grouped', 'following'), ('grouped', 'following', 'tokens'), ('following', 'tokens', ':'), ('tokens', ':', 'Position'), (':', 'Position', '('), ('Position', '(', 'identifier'), ('(', 'identifier', ')'), ('identifier', ')', '='), (')', '=', '('), ('=', '(', 'Assignment'), ('(', 'Assignment', 'symbol'), ('Assignment', 'symbol', ')'), ('symbol', ')', 'initial'), (')', 'initial', '('), ('initial', '(', 'identifier'), ('(', 'identifier', ')'), ('identifier', ')', '+'), (')', '+', '('), ('+', '(', 'Plus'), ('(', 'Plus', 'symbol'), ('Plus', 'symbol', ')'), ('symbol', ')', 'rate'), (')', 'rate', '('), ('rate', '(', 'identifier'), ('(', 'identifier', ')'), ('identifier', ')', '*'), (')', '*', '('), ('*', '(', 'Multiplication'), ('(', 'Multiplication', 'symbol'), ('Multiplication', 'symbol', ')'), ('symbol', ')', '60'), (')', '60', '('), ('60', '(', 'Number'), ('(', 'Number', ')'), ('Number', ')', 'Lexical'), (')', 'Lexical', 'analysis'), ('Lexical', 'analysis', 'id1'), ('analysis', 'id1', '='), ('id1', '=', 'id2'), ('=', 'id2', '+'), ('id2', '+', 'id3'), ('+', 'id3', '*'), ('id3', '*', '60'), ('*', '60', 'Position'), ('60', 'Position', '='), ('Position', '=', 'initial'), ('=', 'initial', '+'), ('initial', '+', 'rate'), ('+', 'rate', '*'), ('rate', '*', '60'), ('*', '60', 'Prof.'), ('60', 'Prof.', 'Jay'), ('Prof.', 'Jay', 'R'), ('Jay', 'R', 'Dhamsaniya'), ('R', 'Dhamsaniya', '#'), ('Dhamsaniya', '#', '3130006'), ('#', '3130006', '('), ('3130006', '(', 'PS'), ('(', 'PS', ')'), ('PS', ')', '\uf077'), (')', '\uf077', 'Unit'), ('\uf077', 'Unit', '1'), ('Unit', '1', '–'), ('1', '–', 'Basic'), ('–', 'Basic', 'Probability'), ('Basic', 'Probability', '‹'), ('Probability', '‹', '#'), ('‹', '#', '›'), ('#', '›', 'Prof.'), ('›', 'Prof.', 'Dixita'), ('Prof.', 'Dixita', 'B'), ('Dixita', 'B', 'Kagathara'), ('B', 'Kagathara', '#'), ('Kagathara', '#', '2170701'), ('#', '2170701', '('), ('2170701', '(', 'CD'), ('(', 'CD', ')'), ('CD', ')', '\uf077'), (')', '\uf077', 'Unit'), ('\uf077', 'Unit', '1'), ('Unit', '1', '–'), ('1', '–', 'Introduction'), ('–', 'Introduction', 'Compiler'), ('Introduction', 'Compiler', 'Design'), ('Compiler', 'Design', '‹'), ('Design', '‹', '#'), ('‹', '#', '›'), ('#', '›', 'Phases'), ('›', 'Phases', 'compiler'), ('Phases', 'compiler', 'Compiler'), ('compiler', 'Compiler', 'Analysis'), ('Compiler', 'Analysis', 'phase'), ('Analysis', 'phase', 'Synthesis'), ('phase', 'Synthesis', 'phase'), ('Synthesis', 'phase', 'Lexical'), ('phase', 'Lexical', 'analysis'), ('Lexical', 'analysis', 'Syntax'), ('analysis', 'Syntax', 'analysis'), ('Syntax', 'analysis', 'Semantic'), ('analysis', 'Semantic', 'analysis'), ('Semantic', 'analysis', 'Intermediate'), ('analysis', 'Intermediate', 'code'), ('Intermediate', 'code', 'generation'), ('code', 'generation', 'Code'), ('generation', 'Code', 'optimization'), ('Code', 'optimization', 'Code'), ('optimization', 'Code', 'generation'), ('Code', 'generation', 'Prof.'), ('generation', 'Prof.', 'Jay'), ('Prof.', 'Jay', 'R'), ('Jay', 'R', 'Dhamsaniya'), ('R', 'Dhamsaniya', '#'), ('Dhamsaniya', '#', '3130006'), ('#', '3130006', '('), ('3130006', '(', 'PS'), ('(', 'PS', ')'), ('PS', ')', '\uf077'), (')', '\uf077', 'Unit'), ('\uf077', 'Unit', '1'), ('Unit', '1', '–'), ('1', '–', 'Basic'), ('–', 'Basic', 'Probability'), ('Basic', 'Probability', '‹'), ('Probability', '‹', '#'), ('‹', '#', '›'), ('#', '›', 'Prof.'), ('›', 'Prof.', 'Dixita'), ('Prof.', 'Dixita', 'B'), ('Dixita', 'B', 'Kagathara'), ('B', 'Kagathara', '#'), ('Kagathara', '#', '2170701'), ('#', '2170701', '('), ('2170701', '(', 'CD'), ('(', 'CD', ')'), ('CD', ')', '\uf077'), (')', '\uf077', 'Unit'), ('\uf077', 'Unit', '1–'), ('Unit', '1–', 'Introduction'), ('1–', 'Introduction', 'Compiler'), ('Introduction', 'Compiler', 'Design'), ('Compiler', 'Design', '‹'), ('Design', '‹', '#'), ('‹', '#', '›'), ('#', '›', 'Syntax'), ('›', 'Syntax', 'analysis'), ('Syntax', 'analysis', 'Syntax'), ('analysis', 'Syntax', 'Analysis'), ('Syntax', 'Analysis', 'also'), ('Analysis', 'also', 'called'), ('also', 'called', 'Parsing'), ('called', 'Parsing', 'Hierarchical'), ('Parsing', 'Hierarchical', 'Analysis'), ('Hierarchical', 'Analysis', '.')]

>> POS Tags are: 
 [('Ex', 'NN'), (':', ':'), ('Position', 'NN'), ('=', 'IN'), ('initial', 'JJ'), ('+', 'JJ'), ('rate', 'NN'), ('*', 'NNS'), ('60', 'CD'), ('would', 'MD'), ('grouped', 'VB'), ('following', 'VBG'), ('tokens', 'NNS'), (':', ':'), ('Position', 'NN'), ('(', '('), ('identifier', 'NN'), (')', ')'), ('=', 'NN'), ('(', '('), ('Assignment', 'NNP'), ('symbol', 'NN'), (')', ')'), ('initial', 'JJ'), ('(', '('), ('identifier', 'NN'), (')', ')'), ('+', 'NN'), ('(', '('), ('Plus', 'NNP'), ('symbol', 'NN'), (')', ')'), ('rate', 'NN'), ('(', '('), ('identifier', 'NN'), (')', ')'), ('*', 'NN'), ('(', '('), ('Multiplication', 'NNP'), ('symbol', 'NN'), (')', ')'), ('60', 'CD'), ('(', '('), ('Number', 'NNP'), (')', ')'), ('Lexical', 'NNP'), ('analysis', 'NN'), ('id1', 'NN'), ('=', 'NNP'), ('id2', 'NN'), ('+', 'NNP'), ('id3', 'NN'), ('*', 'VBD'), ('60', 'CD'), ('Position', 'NNP'), ('=', 'NNP'), ('initial', 'JJ'), ('+', 'NNP'), ('rate', 'NN'), ('*', 'VBD'), ('60', 'CD'), ('Prof.', 'NNP'), ('Jay', 'NNP'), ('R', 'NNP'), ('Dhamsaniya', 'NNP'), ('#', '#'), ('3130006', 'CD'), ('(', '('), ('PS', 'NNP'), (')', ')'), ('\uf077', 'VBD'), ('Unit', 'NNP'), ('1', 'CD'), ('–', 'NNP'), ('Basic', 'NNP'), ('Probability', 'NNP'), ('‹', 'NNP'), ('#', '#'), ('›', 'NNP'), ('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', '#'), ('2170701', 'CD'), ('(', '('), ('CD', 'NN'), (')', ')'), ('\uf077', 'VBD'), ('Unit', 'NNP'), ('1', 'CD'), ('–', 'NNP'), ('Introduction', 'NNP'), ('Compiler', 'NNP'), ('Design', 'NNP'), ('‹', 'NNP'), ('#', '#'), ('›', 'NNP'), ('Phases', 'NNP'), ('compiler', 'NN'), ('Compiler', 'NNP'), ('Analysis', 'NNP'), ('phase', 'NN'), ('Synthesis', 'NNP'), ('phase', 'NN'), ('Lexical', 'NNP'), ('analysis', 'NN'), ('Syntax', 'NNP'), ('analysis', 'NN'), ('Semantic', 'NNP'), ('analysis', 'NN'), ('Intermediate', 'NNP'), ('code', 'NN'), ('generation', 'NN'), ('Code', 'NNP'), ('optimization', 'NN'), ('Code', 'NNP'), ('generation', 'NN'), ('Prof.', 'NNP'), ('Jay', 'NNP'), ('R', 'NNP'), ('Dhamsaniya', 'NNP'), ('#', '#'), ('3130006', 'CD'), ('(', '('), ('PS', 'NNP'), (')', ')'), ('\uf077', 'VBD'), ('Unit', 'NNP'), ('1', 'CD'), ('–', 'NNP'), ('Basic', 'NNP'), ('Probability', 'NNP'), ('‹', 'NNP'), ('#', '#'), ('›', 'NNP'), ('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', '#'), ('2170701', 'CD'), ('(', '('), ('CD', 'NN'), (')', ')'), ('\uf077', 'VBD'), ('Unit', 'NNP'), ('1–', 'CD'), ('Introduction', 'NNP'), ('Compiler', 'NNP'), ('Design', 'NNP'), ('‹', 'NNP'), ('#', '#'), ('›', 'NNP'), ('Syntax', 'NNP'), ('analysis', 'NN'), ('Syntax', 'NNP'), ('Analysis', 'NNP'), ('also', 'RB'), ('called', 'VBD'), ('Parsing', 'NNP'), ('Hierarchical', 'NNP'), ('Analysis', 'NNP'), ('.', '.')]

 (S
  (NP Ex/NN)
  :/:
  (NP Position/NN)
  =/IN
  (NP initial/JJ +/JJ rate/NN */NNS)
  60/CD
  would/MD
  grouped/VB
  following/VBG
  (NP tokens/NNS)
  :/:
  (NP Position/NN)
  (/(
  (NP identifier/NN)
  )/)
  (NP =/NN)
  (/(
  (NP Assignment/NNP symbol/NN)
  )/)
  initial/JJ
  (/(
  (NP identifier/NN)
  )/)
  (NP +/NN)
  (/(
  (NP Plus/NNP symbol/NN)
  )/)
  (NP rate/NN)
  (/(
  (NP identifier/NN)
  )/)
  (NP */NN)
  (/(
  (NP Multiplication/NNP symbol/NN)
  )/)
  60/CD
  (/(
  (NP Number/NNP)
  )/)
  (NP Lexical/NNP analysis/NN id1/NN =/NNP id2/NN +/NNP id3/NN)
  */VBD
  60/CD
  (NP Position/NNP =/NNP)
  (NP initial/JJ +/NNP rate/NN)
  */VBD
  60/CD
  (NP Prof./NNP Jay/NNP R/NNP Dhamsaniya/NNP)
  #/#
  3130006/CD
  (/(
  (NP PS/NNP)
  )/)
  /VBD
  (NP Unit/NNP)
  1/CD
  (NP –/NNP Basic/NNP Probability/NNP ‹/NNP)
  #/#
  (NP ›/NNP Prof./NNP Dixita/NNP B/NNP Kagathara/NNP)
  #/#
  2170701/CD
  (/(
  (NP CD/NN)
  )/)
  /VBD
  (NP Unit/NNP)
  1/CD
  (NP –/NNP Introduction/NNP Compiler/NNP Design/NNP ‹/NNP)
  #/#
  (NP
    ›/NNP
    Phases/NNP
    compiler/NN
    Compiler/NNP
    Analysis/NNP
    phase/NN
    Synthesis/NNP
    phase/NN
    Lexical/NNP
    analysis/NN
    Syntax/NNP
    analysis/NN
    Semantic/NNP
    analysis/NN
    Intermediate/NNP
    code/NN
    generation/NN
    Code/NNP
    optimization/NN
    Code/NNP
    generation/NN
    Prof./NNP
    Jay/NNP
    R/NNP
    Dhamsaniya/NNP)
  #/#
  3130006/CD
  (/(
  (NP PS/NNP)
  )/)
  /VBD
  (NP Unit/NNP)
  1/CD
  (NP –/NNP Basic/NNP Probability/NNP ‹/NNP)
  #/#
  (NP ›/NNP Prof./NNP Dixita/NNP B/NNP Kagathara/NNP)
  #/#
  2170701/CD
  (/(
  (NP CD/NN)
  )/)
  /VBD
  (NP Unit/NNP)
  1–/CD
  (NP Introduction/NNP Compiler/NNP Design/NNP ‹/NNP)
  #/#
  (NP ›/NNP Syntax/NNP analysis/NN Syntax/NNP Analysis/NNP)
  also/RB
  called/VBD
  (NP Parsing/NNP Hierarchical/NNP Analysis/NNP)
  ./.) 


>> Noun Phrases are: 
 ['Ex', 'Position', 'initial + rate *', 'tokens', 'Position', 'identifier', '=', 'Assignment symbol', 'identifier', '+', 'Plus symbol', 'rate', 'identifier', '*', 'Multiplication symbol', 'Number', 'Lexical analysis id1 = id2 + id3', 'Position =', 'initial + rate', 'Prof. Jay R Dhamsaniya', 'PS', 'Unit', '– Basic Probability ‹', '› Prof. Dixita B Kagathara', 'CD', 'Unit', '– Introduction Compiler Design ‹', '› Phases compiler Compiler Analysis phase Synthesis phase Lexical analysis Syntax analysis Semantic analysis Intermediate code generation Code optimization Code generation Prof. Jay R Dhamsaniya', 'PS', 'Unit', '– Basic Probability ‹', '› Prof. Dixita B Kagathara', 'CD', 'Unit', 'Introduction Compiler Design ‹', '› Syntax analysis Syntax Analysis', 'Parsing Hierarchical Analysis']

>> Named Entities are: 
 [('GPE', 'Ex'), ('ORGANIZATION', 'Assignment'), ('ORGANIZATION', 'Plus'), ('ORGANIZATION', 'Multiplication'), ('PERSON', 'Lexical'), ('ORGANIZATION', 'Unit'), ('ORGANIZATION', 'Unit'), ('ORGANIZATION', 'Compiler Analysis'), ('PERSON', 'Synthesis'), ('PERSON', 'Lexical'), ('PERSON', 'Syntax'), ('ORGANIZATION', 'Semantic'), ('ORGANIZATION', 'Intermediate'), ('PERSON', 'Code'), ('PERSON', 'Code'), ('ORGANIZATION', 'Unit'), ('ORGANIZATION', 'Unit'), ('PERSON', 'Syntax Analysis'), ('ORGANIZATION', 'Parsing Hierarchical Analysis')] 

>> Stemming using Porter Stemmer: 
 [('Ex', 'ex'), (':', ':'), ('Position', 'posit'), ('=', '='), ('initial', 'initi'), ('+', '+'), ('rate', 'rate'), ('*', '*'), ('60', '60'), ('would', 'would'), ('grouped', 'group'), ('following', 'follow'), ('tokens', 'token'), (':', ':'), ('Position', 'posit'), ('(', '('), ('identifier', 'identifi'), (')', ')'), ('=', '='), ('(', '('), ('Assignment', 'assign'), ('symbol', 'symbol'), (')', ')'), ('initial', 'initi'), ('(', '('), ('identifier', 'identifi'), (')', ')'), ('+', '+'), ('(', '('), ('Plus', 'plu'), ('symbol', 'symbol'), (')', ')'), ('rate', 'rate'), ('(', '('), ('identifier', 'identifi'), (')', ')'), ('*', '*'), ('(', '('), ('Multiplication', 'multipl'), ('symbol', 'symbol'), (')', ')'), ('60', '60'), ('(', '('), ('Number', 'number'), (')', ')'), ('Lexical', 'lexic'), ('analysis', 'analysi'), ('id1', 'id1'), ('=', '='), ('id2', 'id2'), ('+', '+'), ('id3', 'id3'), ('*', '*'), ('60', '60'), ('Position', 'posit'), ('=', '='), ('initial', 'initi'), ('+', '+'), ('rate', 'rate'), ('*', '*'), ('60', '60'), ('Prof.', 'prof.'), ('Jay', 'jay'), ('R', 'r'), ('Dhamsaniya', 'dhamsaniya'), ('#', '#'), ('3130006', '3130006'), ('(', '('), ('PS', 'ps'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '–'), ('Basic', 'basic'), ('Probability', 'probabl'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Prof.', 'prof.'), ('Dixita', 'dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '–'), ('Introduction', 'introduct'), ('Compiler', 'compil'), ('Design', 'design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Phases', 'phase'), ('compiler', 'compil'), ('Compiler', 'compil'), ('Analysis', 'analysi'), ('phase', 'phase'), ('Synthesis', 'synthesi'), ('phase', 'phase'), ('Lexical', 'lexic'), ('analysis', 'analysi'), ('Syntax', 'syntax'), ('analysis', 'analysi'), ('Semantic', 'semant'), ('analysis', 'analysi'), ('Intermediate', 'intermedi'), ('code', 'code'), ('generation', 'gener'), ('Code', 'code'), ('optimization', 'optim'), ('Code', 'code'), ('generation', 'gener'), ('Prof.', 'prof.'), ('Jay', 'jay'), ('R', 'r'), ('Dhamsaniya', 'dhamsaniya'), ('#', '#'), ('3130006', '3130006'), ('(', '('), ('PS', 'ps'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '–'), ('Basic', 'basic'), ('Probability', 'probabl'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Prof.', 'prof.'), ('Dixita', 'dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1–', '1–'), ('Introduction', 'introduct'), ('Compiler', 'compil'), ('Design', 'design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Syntax', 'syntax'), ('analysis', 'analysi'), ('Syntax', 'syntax'), ('Analysis', 'analysi'), ('also', 'also'), ('called', 'call'), ('Parsing', 'pars'), ('Hierarchical', 'hierarch'), ('Analysis', 'analysi'), ('.', '.')]

>> Stemming using Snowball Stemmer: 
 [('Ex', 'ex'), (':', ':'), ('Position', 'posit'), ('=', '='), ('initial', 'initi'), ('+', '+'), ('rate', 'rate'), ('*', '*'), ('60', '60'), ('would', 'would'), ('grouped', 'group'), ('following', 'follow'), ('tokens', 'token'), (':', ':'), ('Position', 'posit'), ('(', '('), ('identifier', 'identifi'), (')', ')'), ('=', '='), ('(', '('), ('Assignment', 'assign'), ('symbol', 'symbol'), (')', ')'), ('initial', 'initi'), ('(', '('), ('identifier', 'identifi'), (')', ')'), ('+', '+'), ('(', '('), ('Plus', 'plus'), ('symbol', 'symbol'), (')', ')'), ('rate', 'rate'), ('(', '('), ('identifier', 'identifi'), (')', ')'), ('*', '*'), ('(', '('), ('Multiplication', 'multipl'), ('symbol', 'symbol'), (')', ')'), ('60', '60'), ('(', '('), ('Number', 'number'), (')', ')'), ('Lexical', 'lexic'), ('analysis', 'analysi'), ('id1', 'id1'), ('=', '='), ('id2', 'id2'), ('+', '+'), ('id3', 'id3'), ('*', '*'), ('60', '60'), ('Position', 'posit'), ('=', '='), ('initial', 'initi'), ('+', '+'), ('rate', 'rate'), ('*', '*'), ('60', '60'), ('Prof.', 'prof.'), ('Jay', 'jay'), ('R', 'r'), ('Dhamsaniya', 'dhamsaniya'), ('#', '#'), ('3130006', '3130006'), ('(', '('), ('PS', 'ps'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '–'), ('Basic', 'basic'), ('Probability', 'probabl'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Prof.', 'prof.'), ('Dixita', 'dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '–'), ('Introduction', 'introduct'), ('Compiler', 'compil'), ('Design', 'design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Phases', 'phase'), ('compiler', 'compil'), ('Compiler', 'compil'), ('Analysis', 'analysi'), ('phase', 'phase'), ('Synthesis', 'synthesi'), ('phase', 'phase'), ('Lexical', 'lexic'), ('analysis', 'analysi'), ('Syntax', 'syntax'), ('analysis', 'analysi'), ('Semantic', 'semant'), ('analysis', 'analysi'), ('Intermediate', 'intermedi'), ('code', 'code'), ('generation', 'generat'), ('Code', 'code'), ('optimization', 'optim'), ('Code', 'code'), ('generation', 'generat'), ('Prof.', 'prof.'), ('Jay', 'jay'), ('R', 'r'), ('Dhamsaniya', 'dhamsaniya'), ('#', '#'), ('3130006', '3130006'), ('(', '('), ('PS', 'ps'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '–'), ('Basic', 'basic'), ('Probability', 'probabl'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Prof.', 'prof.'), ('Dixita', 'dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1–', '1–'), ('Introduction', 'introduct'), ('Compiler', 'compil'), ('Design', 'design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Syntax', 'syntax'), ('analysis', 'analysi'), ('Syntax', 'syntax'), ('Analysis', 'analysi'), ('also', 'also'), ('called', 'call'), ('Parsing', 'pars'), ('Hierarchical', 'hierarch'), ('Analysis', 'analysi'), ('.', '.')]

>> Lemmatization: 
 [('Ex', 'Ex'), (':', ':'), ('Position', 'Position'), ('=', '='), ('initial', 'initial'), ('+', '+'), ('rate', 'rate'), ('*', '*'), ('60', '60'), ('would', 'would'), ('grouped', 'grouped'), ('following', 'following'), ('tokens', 'token'), (':', ':'), ('Position', 'Position'), ('(', '('), ('identifier', 'identifier'), (')', ')'), ('=', '='), ('(', '('), ('Assignment', 'Assignment'), ('symbol', 'symbol'), (')', ')'), ('initial', 'initial'), ('(', '('), ('identifier', 'identifier'), (')', ')'), ('+', '+'), ('(', '('), ('Plus', 'Plus'), ('symbol', 'symbol'), (')', ')'), ('rate', 'rate'), ('(', '('), ('identifier', 'identifier'), (')', ')'), ('*', '*'), ('(', '('), ('Multiplication', 'Multiplication'), ('symbol', 'symbol'), (')', ')'), ('60', '60'), ('(', '('), ('Number', 'Number'), (')', ')'), ('Lexical', 'Lexical'), ('analysis', 'analysis'), ('id1', 'id1'), ('=', '='), ('id2', 'id2'), ('+', '+'), ('id3', 'id3'), ('*', '*'), ('60', '60'), ('Position', 'Position'), ('=', '='), ('initial', 'initial'), ('+', '+'), ('rate', 'rate'), ('*', '*'), ('60', '60'), ('Prof.', 'Prof.'), ('Jay', 'Jay'), ('R', 'R'), ('Dhamsaniya', 'Dhamsaniya'), ('#', '#'), ('3130006', '3130006'), ('(', '('), ('PS', 'PS'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'Unit'), ('1', '1'), ('–', '–'), ('Basic', 'Basic'), ('Probability', 'Probability'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'CD'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'Unit'), ('1', '1'), ('–', '–'), ('Introduction', 'Introduction'), ('Compiler', 'Compiler'), ('Design', 'Design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Phases', 'Phases'), ('compiler', 'compiler'), ('Compiler', 'Compiler'), ('Analysis', 'Analysis'), ('phase', 'phase'), ('Synthesis', 'Synthesis'), ('phase', 'phase'), ('Lexical', 'Lexical'), ('analysis', 'analysis'), ('Syntax', 'Syntax'), ('analysis', 'analysis'), ('Semantic', 'Semantic'), ('analysis', 'analysis'), ('Intermediate', 'Intermediate'), ('code', 'code'), ('generation', 'generation'), ('Code', 'Code'), ('optimization', 'optimization'), ('Code', 'Code'), ('generation', 'generation'), ('Prof.', 'Prof.'), ('Jay', 'Jay'), ('R', 'R'), ('Dhamsaniya', 'Dhamsaniya'), ('#', '#'), ('3130006', '3130006'), ('(', '('), ('PS', 'PS'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'Unit'), ('1', '1'), ('–', '–'), ('Basic', 'Basic'), ('Probability', 'Probability'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'CD'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'Unit'), ('1–', '1–'), ('Introduction', 'Introduction'), ('Compiler', 'Compiler'), ('Design', 'Design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Syntax', 'Syntax'), ('analysis', 'analysis'), ('Syntax', 'Syntax'), ('Analysis', 'Analysis'), ('also', 'also'), ('called', 'called'), ('Parsing', 'Parsing'), ('Hierarchical', 'Hierarchical'), ('Analysis', 'Analysis'), ('.', '.')]



============================ Sentence 11 =============================

The syntax analyzer checks each line of the code and spots every tiny mistake. 


>> Tokens are: 
 ['The', 'syntax', 'analyzer', 'checks', 'line', 'code', 'spots', 'every', 'tiny', 'mistake', '.']

>> Bigrams are: 
 [('The', 'syntax'), ('syntax', 'analyzer'), ('analyzer', 'checks'), ('checks', 'line'), ('line', 'code'), ('code', 'spots'), ('spots', 'every'), ('every', 'tiny'), ('tiny', 'mistake'), ('mistake', '.')]

>> Trigrams are: 
 [('The', 'syntax', 'analyzer'), ('syntax', 'analyzer', 'checks'), ('analyzer', 'checks', 'line'), ('checks', 'line', 'code'), ('line', 'code', 'spots'), ('code', 'spots', 'every'), ('spots', 'every', 'tiny'), ('every', 'tiny', 'mistake'), ('tiny', 'mistake', '.')]

>> POS Tags are: 
 [('The', 'DT'), ('syntax', 'JJ'), ('analyzer', 'NN'), ('checks', 'NNS'), ('line', 'NN'), ('code', 'NN'), ('spots', 'NNS'), ('every', 'DT'), ('tiny', 'JJ'), ('mistake', 'NN'), ('.', '.')]

 (S
  (NP
    The/DT
    syntax/JJ
    analyzer/NN
    checks/NNS
    line/NN
    code/NN
    spots/NNS)
  (NP every/DT tiny/JJ mistake/NN)
  ./.) 


>> Noun Phrases are: 
 ['The syntax analyzer checks line code spots', 'every tiny mistake']

>> Named Entities are: 
 [] 

>> Stemming using Porter Stemmer: 
 [('The', 'the'), ('syntax', 'syntax'), ('analyzer', 'analyz'), ('checks', 'check'), ('line', 'line'), ('code', 'code'), ('spots', 'spot'), ('every', 'everi'), ('tiny', 'tini'), ('mistake', 'mistak'), ('.', '.')]

>> Stemming using Snowball Stemmer: 
 [('The', 'the'), ('syntax', 'syntax'), ('analyzer', 'analyz'), ('checks', 'check'), ('line', 'line'), ('code', 'code'), ('spots', 'spot'), ('every', 'everi'), ('tiny', 'tini'), ('mistake', 'mistak'), ('.', '.')]

>> Lemmatization: 
 [('The', 'The'), ('syntax', 'syntax'), ('analyzer', 'analyzer'), ('checks', 'check'), ('line', 'line'), ('code', 'code'), ('spots', 'spot'), ('every', 'every'), ('tiny', 'tiny'), ('mistake', 'mistake'), ('.', '.')]



============================ Sentence 12 =============================

If code is error free then syntax analyzer generates the tree. 


>> Tokens are: 
 ['If', 'code', 'error', 'free', 'syntax', 'analyzer', 'generates', 'tree', '.']

>> Bigrams are: 
 [('If', 'code'), ('code', 'error'), ('error', 'free'), ('free', 'syntax'), ('syntax', 'analyzer'), ('analyzer', 'generates'), ('generates', 'tree'), ('tree', '.')]

>> Trigrams are: 
 [('If', 'code', 'error'), ('code', 'error', 'free'), ('error', 'free', 'syntax'), ('free', 'syntax', 'analyzer'), ('syntax', 'analyzer', 'generates'), ('analyzer', 'generates', 'tree'), ('generates', 'tree', '.')]

>> POS Tags are: 
 [('If', 'IN'), ('code', 'JJ'), ('error', 'NN'), ('free', 'JJ'), ('syntax', 'NN'), ('analyzer', 'NN'), ('generates', 'NNS'), ('tree', 'VBP'), ('.', '.')]

 (S
  If/IN
  (NP code/JJ error/NN)
  (NP free/JJ syntax/NN analyzer/NN generates/NNS)
  tree/VBP
  ./.) 


>> Noun Phrases are: 
 ['code error', 'free syntax analyzer generates']

>> Named Entities are: 
 [] 

>> Stemming using Porter Stemmer: 
 [('If', 'if'), ('code', 'code'), ('error', 'error'), ('free', 'free'), ('syntax', 'syntax'), ('analyzer', 'analyz'), ('generates', 'gener'), ('tree', 'tree'), ('.', '.')]

>> Stemming using Snowball Stemmer: 
 [('If', 'if'), ('code', 'code'), ('error', 'error'), ('free', 'free'), ('syntax', 'syntax'), ('analyzer', 'analyz'), ('generates', 'generat'), ('tree', 'tree'), ('.', '.')]

>> Lemmatization: 
 [('If', 'If'), ('code', 'code'), ('error', 'error'), ('free', 'free'), ('syntax', 'syntax'), ('analyzer', 'analyzer'), ('generates', 'generates'), ('tree', 'tree'), ('.', '.')]



============================ Sentence 13 =============================

Syntax analysis id1 = id2 + id3 * 60 Lexical analysis = id1 + id2 * id3 60 Position = initial + rate*60    Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1 – Introduction to Compiler Design ‹#›  Phases of compiler Compiler Analysis phase Synthesis phase Lexical analysis  Syntax analysis  Semantic analysis    Intermediate code generation Code optimization  Code generation     Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1– Introduction to Compiler Design ‹#›  Semantic analysis Semantic analyzer determines the meaning of a source string. 


>> Tokens are: 
 ['Syntax', 'analysis', 'id1', '=', 'id2', '+', 'id3', '*', '60', 'Lexical', 'analysis', '=', 'id1', '+', 'id2', '*', 'id3', '60', 'Position', '=', 'initial', '+', 'rate', '*', '60', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '1', '–', 'Introduction', 'Compiler', 'Design', '‹', '#', '›', 'Phases', 'compiler', 'Compiler', 'Analysis', 'phase', 'Synthesis', 'phase', 'Lexical', 'analysis', 'Syntax', 'analysis', 'Semantic', 'analysis', 'Intermediate', 'code', 'generation', 'Code', 'optimization', 'Code', 'generation', 'Prof.', 'Jay', 'R', 'Dhamsaniya', '#', '3130006', '(', 'PS', ')', '\uf077', 'Unit', '1', '–', 'Basic', 'Probability', '‹', '#', '›', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '1–', 'Introduction', 'Compiler', 'Design', '‹', '#', '›', 'Semantic', 'analysis', 'Semantic', 'analyzer', 'determines', 'meaning', 'source', 'string', '.']

>> Bigrams are: 
 [('Syntax', 'analysis'), ('analysis', 'id1'), ('id1', '='), ('=', 'id2'), ('id2', '+'), ('+', 'id3'), ('id3', '*'), ('*', '60'), ('60', 'Lexical'), ('Lexical', 'analysis'), ('analysis', '='), ('=', 'id1'), ('id1', '+'), ('+', 'id2'), ('id2', '*'), ('*', 'id3'), ('id3', '60'), ('60', 'Position'), ('Position', '='), ('=', 'initial'), ('initial', '+'), ('+', 'rate'), ('rate', '*'), ('*', '60'), ('60', 'Prof.'), ('Prof.', 'Dixita'), ('Dixita', 'B'), ('B', 'Kagathara'), ('Kagathara', '#'), ('#', '2170701'), ('2170701', '('), ('(', 'CD'), ('CD', ')'), (')', '\uf077'), ('\uf077', 'Unit'), ('Unit', '1'), ('1', '–'), ('–', 'Introduction'), ('Introduction', 'Compiler'), ('Compiler', 'Design'), ('Design', '‹'), ('‹', '#'), ('#', '›'), ('›', 'Phases'), ('Phases', 'compiler'), ('compiler', 'Compiler'), ('Compiler', 'Analysis'), ('Analysis', 'phase'), ('phase', 'Synthesis'), ('Synthesis', 'phase'), ('phase', 'Lexical'), ('Lexical', 'analysis'), ('analysis', 'Syntax'), ('Syntax', 'analysis'), ('analysis', 'Semantic'), ('Semantic', 'analysis'), ('analysis', 'Intermediate'), ('Intermediate', 'code'), ('code', 'generation'), ('generation', 'Code'), ('Code', 'optimization'), ('optimization', 'Code'), ('Code', 'generation'), ('generation', 'Prof.'), ('Prof.', 'Jay'), ('Jay', 'R'), ('R', 'Dhamsaniya'), ('Dhamsaniya', '#'), ('#', '3130006'), ('3130006', '('), ('(', 'PS'), ('PS', ')'), (')', '\uf077'), ('\uf077', 'Unit'), ('Unit', '1'), ('1', '–'), ('–', 'Basic'), ('Basic', 'Probability'), ('Probability', '‹'), ('‹', '#'), ('#', '›'), ('›', 'Prof.'), ('Prof.', 'Dixita'), ('Dixita', 'B'), ('B', 'Kagathara'), ('Kagathara', '#'), ('#', '2170701'), ('2170701', '('), ('(', 'CD'), ('CD', ')'), (')', '\uf077'), ('\uf077', 'Unit'), ('Unit', '1–'), ('1–', 'Introduction'), ('Introduction', 'Compiler'), ('Compiler', 'Design'), ('Design', '‹'), ('‹', '#'), ('#', '›'), ('›', 'Semantic'), ('Semantic', 'analysis'), ('analysis', 'Semantic'), ('Semantic', 'analyzer'), ('analyzer', 'determines'), ('determines', 'meaning'), ('meaning', 'source'), ('source', 'string'), ('string', '.')]

>> Trigrams are: 
 [('Syntax', 'analysis', 'id1'), ('analysis', 'id1', '='), ('id1', '=', 'id2'), ('=', 'id2', '+'), ('id2', '+', 'id3'), ('+', 'id3', '*'), ('id3', '*', '60'), ('*', '60', 'Lexical'), ('60', 'Lexical', 'analysis'), ('Lexical', 'analysis', '='), ('analysis', '=', 'id1'), ('=', 'id1', '+'), ('id1', '+', 'id2'), ('+', 'id2', '*'), ('id2', '*', 'id3'), ('*', 'id3', '60'), ('id3', '60', 'Position'), ('60', 'Position', '='), ('Position', '=', 'initial'), ('=', 'initial', '+'), ('initial', '+', 'rate'), ('+', 'rate', '*'), ('rate', '*', '60'), ('*', '60', 'Prof.'), ('60', 'Prof.', 'Dixita'), ('Prof.', 'Dixita', 'B'), ('Dixita', 'B', 'Kagathara'), ('B', 'Kagathara', '#'), ('Kagathara', '#', '2170701'), ('#', '2170701', '('), ('2170701', '(', 'CD'), ('(', 'CD', ')'), ('CD', ')', '\uf077'), (')', '\uf077', 'Unit'), ('\uf077', 'Unit', '1'), ('Unit', '1', '–'), ('1', '–', 'Introduction'), ('–', 'Introduction', 'Compiler'), ('Introduction', 'Compiler', 'Design'), ('Compiler', 'Design', '‹'), ('Design', '‹', '#'), ('‹', '#', '›'), ('#', '›', 'Phases'), ('›', 'Phases', 'compiler'), ('Phases', 'compiler', 'Compiler'), ('compiler', 'Compiler', 'Analysis'), ('Compiler', 'Analysis', 'phase'), ('Analysis', 'phase', 'Synthesis'), ('phase', 'Synthesis', 'phase'), ('Synthesis', 'phase', 'Lexical'), ('phase', 'Lexical', 'analysis'), ('Lexical', 'analysis', 'Syntax'), ('analysis', 'Syntax', 'analysis'), ('Syntax', 'analysis', 'Semantic'), ('analysis', 'Semantic', 'analysis'), ('Semantic', 'analysis', 'Intermediate'), ('analysis', 'Intermediate', 'code'), ('Intermediate', 'code', 'generation'), ('code', 'generation', 'Code'), ('generation', 'Code', 'optimization'), ('Code', 'optimization', 'Code'), ('optimization', 'Code', 'generation'), ('Code', 'generation', 'Prof.'), ('generation', 'Prof.', 'Jay'), ('Prof.', 'Jay', 'R'), ('Jay', 'R', 'Dhamsaniya'), ('R', 'Dhamsaniya', '#'), ('Dhamsaniya', '#', '3130006'), ('#', '3130006', '('), ('3130006', '(', 'PS'), ('(', 'PS', ')'), ('PS', ')', '\uf077'), (')', '\uf077', 'Unit'), ('\uf077', 'Unit', '1'), ('Unit', '1', '–'), ('1', '–', 'Basic'), ('–', 'Basic', 'Probability'), ('Basic', 'Probability', '‹'), ('Probability', '‹', '#'), ('‹', '#', '›'), ('#', '›', 'Prof.'), ('›', 'Prof.', 'Dixita'), ('Prof.', 'Dixita', 'B'), ('Dixita', 'B', 'Kagathara'), ('B', 'Kagathara', '#'), ('Kagathara', '#', '2170701'), ('#', '2170701', '('), ('2170701', '(', 'CD'), ('(', 'CD', ')'), ('CD', ')', '\uf077'), (')', '\uf077', 'Unit'), ('\uf077', 'Unit', '1–'), ('Unit', '1–', 'Introduction'), ('1–', 'Introduction', 'Compiler'), ('Introduction', 'Compiler', 'Design'), ('Compiler', 'Design', '‹'), ('Design', '‹', '#'), ('‹', '#', '›'), ('#', '›', 'Semantic'), ('›', 'Semantic', 'analysis'), ('Semantic', 'analysis', 'Semantic'), ('analysis', 'Semantic', 'analyzer'), ('Semantic', 'analyzer', 'determines'), ('analyzer', 'determines', 'meaning'), ('determines', 'meaning', 'source'), ('meaning', 'source', 'string'), ('source', 'string', '.')]

>> POS Tags are: 
 [('Syntax', 'JJ'), ('analysis', 'NN'), ('id1', 'NN'), ('=', 'NNP'), ('id2', 'NN'), ('+', 'NNP'), ('id3', 'NN'), ('*', 'VBD'), ('60', 'CD'), ('Lexical', 'JJ'), ('analysis', 'NN'), ('=', 'NNP'), ('id1', 'NN'), ('+', 'NNP'), ('id2', 'NN'), ('*', 'NNP'), ('id3', 'VBZ'), ('60', 'CD'), ('Position', 'NNP'), ('=', 'NNP'), ('initial', 'JJ'), ('+', 'NNP'), ('rate', 'NN'), ('*', 'VBD'), ('60', 'CD'), ('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', '#'), ('2170701', 'CD'), ('(', '('), ('CD', 'NN'), (')', ')'), ('\uf077', 'VBD'), ('Unit', 'NNP'), ('1', 'CD'), ('–', 'NNP'), ('Introduction', 'NNP'), ('Compiler', 'NNP'), ('Design', 'NNP'), ('‹', 'NNP'), ('#', '#'), ('›', 'NNP'), ('Phases', 'NNP'), ('compiler', 'NN'), ('Compiler', 'NNP'), ('Analysis', 'NNP'), ('phase', 'NN'), ('Synthesis', 'NNP'), ('phase', 'NN'), ('Lexical', 'NNP'), ('analysis', 'NN'), ('Syntax', 'NNP'), ('analysis', 'NN'), ('Semantic', 'NNP'), ('analysis', 'NN'), ('Intermediate', 'NNP'), ('code', 'NN'), ('generation', 'NN'), ('Code', 'NNP'), ('optimization', 'NN'), ('Code', 'NNP'), ('generation', 'NN'), ('Prof.', 'NNP'), ('Jay', 'NNP'), ('R', 'NNP'), ('Dhamsaniya', 'NNP'), ('#', '#'), ('3130006', 'CD'), ('(', '('), ('PS', 'NNP'), (')', ')'), ('\uf077', 'VBD'), ('Unit', 'NNP'), ('1', 'CD'), ('–', 'NNP'), ('Basic', 'NNP'), ('Probability', 'NNP'), ('‹', 'NNP'), ('#', '#'), ('›', 'NNP'), ('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', '#'), ('2170701', 'CD'), ('(', '('), ('CD', 'NN'), (')', ')'), ('\uf077', 'VBD'), ('Unit', 'NNP'), ('1–', 'CD'), ('Introduction', 'NNP'), ('Compiler', 'NNP'), ('Design', 'NNP'), ('‹', 'NNP'), ('#', '#'), ('›', 'NNP'), ('Semantic', 'NNP'), ('analysis', 'NN'), ('Semantic', 'NNP'), ('analyzer', 'NN'), ('determines', 'NNS'), ('meaning', 'VBG'), ('source', 'NN'), ('string', 'NN'), ('.', '.')]

 (S
  (NP Syntax/JJ analysis/NN id1/NN =/NNP id2/NN +/NNP id3/NN)
  */VBD
  60/CD
  (NP Lexical/JJ analysis/NN =/NNP id1/NN +/NNP id2/NN */NNP)
  id3/VBZ
  60/CD
  (NP Position/NNP =/NNP)
  (NP initial/JJ +/NNP rate/NN)
  */VBD
  60/CD
  (NP Prof./NNP Dixita/NNP B/NNP Kagathara/NNP)
  #/#
  2170701/CD
  (/(
  (NP CD/NN)
  )/)
  /VBD
  (NP Unit/NNP)
  1/CD
  (NP –/NNP Introduction/NNP Compiler/NNP Design/NNP ‹/NNP)
  #/#
  (NP
    ›/NNP
    Phases/NNP
    compiler/NN
    Compiler/NNP
    Analysis/NNP
    phase/NN
    Synthesis/NNP
    phase/NN
    Lexical/NNP
    analysis/NN
    Syntax/NNP
    analysis/NN
    Semantic/NNP
    analysis/NN
    Intermediate/NNP
    code/NN
    generation/NN
    Code/NNP
    optimization/NN
    Code/NNP
    generation/NN
    Prof./NNP
    Jay/NNP
    R/NNP
    Dhamsaniya/NNP)
  #/#
  3130006/CD
  (/(
  (NP PS/NNP)
  )/)
  /VBD
  (NP Unit/NNP)
  1/CD
  (NP –/NNP Basic/NNP Probability/NNP ‹/NNP)
  #/#
  (NP ›/NNP Prof./NNP Dixita/NNP B/NNP Kagathara/NNP)
  #/#
  2170701/CD
  (/(
  (NP CD/NN)
  )/)
  /VBD
  (NP Unit/NNP)
  1–/CD
  (NP Introduction/NNP Compiler/NNP Design/NNP ‹/NNP)
  #/#
  (NP
    ›/NNP
    Semantic/NNP
    analysis/NN
    Semantic/NNP
    analyzer/NN
    determines/NNS)
  meaning/VBG
  (NP source/NN string/NN)
  ./.) 


>> Noun Phrases are: 
 ['Syntax analysis id1 = id2 + id3', 'Lexical analysis = id1 + id2 *', 'Position =', 'initial + rate', 'Prof. Dixita B Kagathara', 'CD', 'Unit', '– Introduction Compiler Design ‹', '› Phases compiler Compiler Analysis phase Synthesis phase Lexical analysis Syntax analysis Semantic analysis Intermediate code generation Code optimization Code generation Prof. Jay R Dhamsaniya', 'PS', 'Unit', '– Basic Probability ‹', '› Prof. Dixita B Kagathara', 'CD', 'Unit', 'Introduction Compiler Design ‹', '› Semantic analysis Semantic analyzer determines', 'source string']

>> Named Entities are: 
 [('GPE', 'Syntax'), ('ORGANIZATION', 'Unit'), ('ORGANIZATION', 'Compiler Analysis'), ('PERSON', 'Synthesis'), ('PERSON', 'Lexical'), ('PERSON', 'Syntax'), ('ORGANIZATION', 'Semantic'), ('ORGANIZATION', 'Intermediate'), ('PERSON', 'Code'), ('PERSON', 'Code'), ('ORGANIZATION', 'Unit'), ('ORGANIZATION', 'Unit'), ('ORGANIZATION', 'Semantic')] 

>> Stemming using Porter Stemmer: 
 [('Syntax', 'syntax'), ('analysis', 'analysi'), ('id1', 'id1'), ('=', '='), ('id2', 'id2'), ('+', '+'), ('id3', 'id3'), ('*', '*'), ('60', '60'), ('Lexical', 'lexic'), ('analysis', 'analysi'), ('=', '='), ('id1', 'id1'), ('+', '+'), ('id2', 'id2'), ('*', '*'), ('id3', 'id3'), ('60', '60'), ('Position', 'posit'), ('=', '='), ('initial', 'initi'), ('+', '+'), ('rate', 'rate'), ('*', '*'), ('60', '60'), ('Prof.', 'prof.'), ('Dixita', 'dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '–'), ('Introduction', 'introduct'), ('Compiler', 'compil'), ('Design', 'design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Phases', 'phase'), ('compiler', 'compil'), ('Compiler', 'compil'), ('Analysis', 'analysi'), ('phase', 'phase'), ('Synthesis', 'synthesi'), ('phase', 'phase'), ('Lexical', 'lexic'), ('analysis', 'analysi'), ('Syntax', 'syntax'), ('analysis', 'analysi'), ('Semantic', 'semant'), ('analysis', 'analysi'), ('Intermediate', 'intermedi'), ('code', 'code'), ('generation', 'gener'), ('Code', 'code'), ('optimization', 'optim'), ('Code', 'code'), ('generation', 'gener'), ('Prof.', 'prof.'), ('Jay', 'jay'), ('R', 'r'), ('Dhamsaniya', 'dhamsaniya'), ('#', '#'), ('3130006', '3130006'), ('(', '('), ('PS', 'ps'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '–'), ('Basic', 'basic'), ('Probability', 'probabl'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Prof.', 'prof.'), ('Dixita', 'dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1–', '1–'), ('Introduction', 'introduct'), ('Compiler', 'compil'), ('Design', 'design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Semantic', 'semant'), ('analysis', 'analysi'), ('Semantic', 'semant'), ('analyzer', 'analyz'), ('determines', 'determin'), ('meaning', 'mean'), ('source', 'sourc'), ('string', 'string'), ('.', '.')]

>> Stemming using Snowball Stemmer: 
 [('Syntax', 'syntax'), ('analysis', 'analysi'), ('id1', 'id1'), ('=', '='), ('id2', 'id2'), ('+', '+'), ('id3', 'id3'), ('*', '*'), ('60', '60'), ('Lexical', 'lexic'), ('analysis', 'analysi'), ('=', '='), ('id1', 'id1'), ('+', '+'), ('id2', 'id2'), ('*', '*'), ('id3', 'id3'), ('60', '60'), ('Position', 'posit'), ('=', '='), ('initial', 'initi'), ('+', '+'), ('rate', 'rate'), ('*', '*'), ('60', '60'), ('Prof.', 'prof.'), ('Dixita', 'dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '–'), ('Introduction', 'introduct'), ('Compiler', 'compil'), ('Design', 'design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Phases', 'phase'), ('compiler', 'compil'), ('Compiler', 'compil'), ('Analysis', 'analysi'), ('phase', 'phase'), ('Synthesis', 'synthesi'), ('phase', 'phase'), ('Lexical', 'lexic'), ('analysis', 'analysi'), ('Syntax', 'syntax'), ('analysis', 'analysi'), ('Semantic', 'semant'), ('analysis', 'analysi'), ('Intermediate', 'intermedi'), ('code', 'code'), ('generation', 'generat'), ('Code', 'code'), ('optimization', 'optim'), ('Code', 'code'), ('generation', 'generat'), ('Prof.', 'prof.'), ('Jay', 'jay'), ('R', 'r'), ('Dhamsaniya', 'dhamsaniya'), ('#', '#'), ('3130006', '3130006'), ('(', '('), ('PS', 'ps'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '–'), ('Basic', 'basic'), ('Probability', 'probabl'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Prof.', 'prof.'), ('Dixita', 'dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1–', '1–'), ('Introduction', 'introduct'), ('Compiler', 'compil'), ('Design', 'design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Semantic', 'semant'), ('analysis', 'analysi'), ('Semantic', 'semant'), ('analyzer', 'analyz'), ('determines', 'determin'), ('meaning', 'mean'), ('source', 'sourc'), ('string', 'string'), ('.', '.')]

>> Lemmatization: 
 [('Syntax', 'Syntax'), ('analysis', 'analysis'), ('id1', 'id1'), ('=', '='), ('id2', 'id2'), ('+', '+'), ('id3', 'id3'), ('*', '*'), ('60', '60'), ('Lexical', 'Lexical'), ('analysis', 'analysis'), ('=', '='), ('id1', 'id1'), ('+', '+'), ('id2', 'id2'), ('*', '*'), ('id3', 'id3'), ('60', '60'), ('Position', 'Position'), ('=', '='), ('initial', 'initial'), ('+', '+'), ('rate', 'rate'), ('*', '*'), ('60', '60'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'CD'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'Unit'), ('1', '1'), ('–', '–'), ('Introduction', 'Introduction'), ('Compiler', 'Compiler'), ('Design', 'Design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Phases', 'Phases'), ('compiler', 'compiler'), ('Compiler', 'Compiler'), ('Analysis', 'Analysis'), ('phase', 'phase'), ('Synthesis', 'Synthesis'), ('phase', 'phase'), ('Lexical', 'Lexical'), ('analysis', 'analysis'), ('Syntax', 'Syntax'), ('analysis', 'analysis'), ('Semantic', 'Semantic'), ('analysis', 'analysis'), ('Intermediate', 'Intermediate'), ('code', 'code'), ('generation', 'generation'), ('Code', 'Code'), ('optimization', 'optimization'), ('Code', 'Code'), ('generation', 'generation'), ('Prof.', 'Prof.'), ('Jay', 'Jay'), ('R', 'R'), ('Dhamsaniya', 'Dhamsaniya'), ('#', '#'), ('3130006', '3130006'), ('(', '('), ('PS', 'PS'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'Unit'), ('1', '1'), ('–', '–'), ('Basic', 'Basic'), ('Probability', 'Probability'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'CD'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'Unit'), ('1–', '1–'), ('Introduction', 'Introduction'), ('Compiler', 'Compiler'), ('Design', 'Design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Semantic', 'Semantic'), ('analysis', 'analysis'), ('Semantic', 'Semantic'), ('analyzer', 'analyzer'), ('determines', 'determines'), ('meaning', 'meaning'), ('source', 'source'), ('string', 'string'), ('.', '.')]



============================ Sentence 14 =============================

It performs following operations:  matching of parenthesis in the expression. 


>> Tokens are: 
 ['It', 'performs', 'following', 'operations', ':', 'matching', 'parenthesis', 'expression', '.']

>> Bigrams are: 
 [('It', 'performs'), ('performs', 'following'), ('following', 'operations'), ('operations', ':'), (':', 'matching'), ('matching', 'parenthesis'), ('parenthesis', 'expression'), ('expression', '.')]

>> Trigrams are: 
 [('It', 'performs', 'following'), ('performs', 'following', 'operations'), ('following', 'operations', ':'), ('operations', ':', 'matching'), (':', 'matching', 'parenthesis'), ('matching', 'parenthesis', 'expression'), ('parenthesis', 'expression', '.')]

>> POS Tags are: 
 [('It', 'PRP'), ('performs', 'VBZ'), ('following', 'VBG'), ('operations', 'NNS'), (':', ':'), ('matching', 'VBG'), ('parenthesis', 'NN'), ('expression', 'NN'), ('.', '.')]

 (S
  It/PRP
  performs/VBZ
  following/VBG
  (NP operations/NNS)
  :/:
  matching/VBG
  (NP parenthesis/NN expression/NN)
  ./.) 


>> Noun Phrases are: 
 ['operations', 'parenthesis expression']

>> Named Entities are: 
 [] 

>> Stemming using Porter Stemmer: 
 [('It', 'it'), ('performs', 'perform'), ('following', 'follow'), ('operations', 'oper'), (':', ':'), ('matching', 'match'), ('parenthesis', 'parenthesi'), ('expression', 'express'), ('.', '.')]

>> Stemming using Snowball Stemmer: 
 [('It', 'it'), ('performs', 'perform'), ('following', 'follow'), ('operations', 'oper'), (':', ':'), ('matching', 'match'), ('parenthesis', 'parenthesi'), ('expression', 'express'), ('.', '.')]

>> Lemmatization: 
 [('It', 'It'), ('performs', 'performs'), ('following', 'following'), ('operations', 'operation'), (':', ':'), ('matching', 'matching'), ('parenthesis', 'parenthesis'), ('expression', 'expression'), ('.', '.')]



============================ Sentence 15 =============================

Matching of if..else statement. 


>> Tokens are: 
 ['Matching', '..', 'else', 'statement', '.']

>> Bigrams are: 
 [('Matching', '..'), ('..', 'else'), ('else', 'statement'), ('statement', '.')]

>> Trigrams are: 
 [('Matching', '..', 'else'), ('..', 'else', 'statement'), ('else', 'statement', '.')]

>> POS Tags are: 
 [('Matching', 'VBG'), ('..', 'NN'), ('else', 'RB'), ('statement', 'NN'), ('.', '.')]

 (S Matching/VBG (NP ../NN) else/RB (NP statement/NN) ./.) 


>> Noun Phrases are: 
 ['..', 'statement']

>> Named Entities are: 
 [] 

>> Stemming using Porter Stemmer: 
 [('Matching', 'match'), ('..', '..'), ('else', 'els'), ('statement', 'statement'), ('.', '.')]

>> Stemming using Snowball Stemmer: 
 [('Matching', 'match'), ('..', '..'), ('else', 'els'), ('statement', 'statement'), ('.', '.')]

>> Lemmatization: 
 [('Matching', 'Matching'), ('..', '..'), ('else', 'else'), ('statement', 'statement'), ('.', '.')]



============================ Sentence 16 =============================

Performing arithmetic operation that are type compatible. 


>> Tokens are: 
 ['Performing', 'arithmetic', 'operation', 'type', 'compatible', '.']

>> Bigrams are: 
 [('Performing', 'arithmetic'), ('arithmetic', 'operation'), ('operation', 'type'), ('type', 'compatible'), ('compatible', '.')]

>> Trigrams are: 
 [('Performing', 'arithmetic', 'operation'), ('arithmetic', 'operation', 'type'), ('operation', 'type', 'compatible'), ('type', 'compatible', '.')]

>> POS Tags are: 
 [('Performing', 'VBG'), ('arithmetic', 'JJ'), ('operation', 'NN'), ('type', 'NN'), ('compatible', 'NN'), ('.', '.')]

 (S
  Performing/VBG
  (NP arithmetic/JJ operation/NN type/NN compatible/NN)
  ./.) 


>> Noun Phrases are: 
 ['arithmetic operation type compatible']

>> Named Entities are: 
 [] 

>> Stemming using Porter Stemmer: 
 [('Performing', 'perform'), ('arithmetic', 'arithmet'), ('operation', 'oper'), ('type', 'type'), ('compatible', 'compat'), ('.', '.')]

>> Stemming using Snowball Stemmer: 
 [('Performing', 'perform'), ('arithmetic', 'arithmet'), ('operation', 'oper'), ('type', 'type'), ('compatible', 'compat'), ('.', '.')]

>> Lemmatization: 
 [('Performing', 'Performing'), ('arithmetic', 'arithmetic'), ('operation', 'operation'), ('type', 'type'), ('compatible', 'compatible'), ('.', '.')]



============================ Sentence 17 =============================

Checking the scope of operation. 


>> Tokens are: 
 ['Checking', 'scope', 'operation', '.']

>> Bigrams are: 
 [('Checking', 'scope'), ('scope', 'operation'), ('operation', '.')]

>> Trigrams are: 
 [('Checking', 'scope', 'operation'), ('scope', 'operation', '.')]

>> POS Tags are: 
 [('Checking', 'VBG'), ('scope', 'NN'), ('operation', 'NN'), ('.', '.')]

 (S Checking/VBG (NP scope/NN operation/NN) ./.) 


>> Noun Phrases are: 
 ['scope operation']

>> Named Entities are: 
 [] 

>> Stemming using Porter Stemmer: 
 [('Checking', 'check'), ('scope', 'scope'), ('operation', 'oper'), ('.', '.')]

>> Stemming using Snowball Stemmer: 
 [('Checking', 'check'), ('scope', 'scope'), ('operation', 'oper'), ('.', '.')]

>> Lemmatization: 
 [('Checking', 'Checking'), ('scope', 'scope'), ('operation', 'operation'), ('.', '.')]



============================ Sentence 18 =============================

= id1 + id2 * id3 60 Semantic analysis = id1 + id2 * id3 inttoreal 60  int to real *Note: Consider id1, id2 and id3 are real    Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1 – Introduction to Compiler Design ‹#›  Phases of compiler Compiler Analysis phase Synthesis phase Lexical analysis  Syntax analysis  Semantic analysis    Intermediate code generation Code optimization  Code generation     Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1– Introduction to Compiler Design ‹#›  Intermediate code generator Two important properties of intermediate code :  It should be easy to produce. 


>> Tokens are: 
 ['=', 'id1', '+', 'id2', '*', 'id3', '60', 'Semantic', 'analysis', '=', 'id1', '+', 'id2', '*', 'id3', 'inttoreal', '60', 'int', 'real', '*', 'Note', ':', 'Consider', 'id1', ',', 'id2', 'id3', 'real', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '1', '–', 'Introduction', 'Compiler', 'Design', '‹', '#', '›', 'Phases', 'compiler', 'Compiler', 'Analysis', 'phase', 'Synthesis', 'phase', 'Lexical', 'analysis', 'Syntax', 'analysis', 'Semantic', 'analysis', 'Intermediate', 'code', 'generation', 'Code', 'optimization', 'Code', 'generation', 'Prof.', 'Jay', 'R', 'Dhamsaniya', '#', '3130006', '(', 'PS', ')', '\uf077', 'Unit', '1', '–', 'Basic', 'Probability', '‹', '#', '›', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '1–', 'Introduction', 'Compiler', 'Design', '‹', '#', '›', 'Intermediate', 'code', 'generator', 'Two', 'important', 'properties', 'intermediate', 'code', ':', 'It', 'easy', 'produce', '.']

>> Bigrams are: 
 [('=', 'id1'), ('id1', '+'), ('+', 'id2'), ('id2', '*'), ('*', 'id3'), ('id3', '60'), ('60', 'Semantic'), ('Semantic', 'analysis'), ('analysis', '='), ('=', 'id1'), ('id1', '+'), ('+', 'id2'), ('id2', '*'), ('*', 'id3'), ('id3', 'inttoreal'), ('inttoreal', '60'), ('60', 'int'), ('int', 'real'), ('real', '*'), ('*', 'Note'), ('Note', ':'), (':', 'Consider'), ('Consider', 'id1'), ('id1', ','), (',', 'id2'), ('id2', 'id3'), ('id3', 'real'), ('real', 'Prof.'), ('Prof.', 'Dixita'), ('Dixita', 'B'), ('B', 'Kagathara'), ('Kagathara', '#'), ('#', '2170701'), ('2170701', '('), ('(', 'CD'), ('CD', ')'), (')', '\uf077'), ('\uf077', 'Unit'), ('Unit', '1'), ('1', '–'), ('–', 'Introduction'), ('Introduction', 'Compiler'), ('Compiler', 'Design'), ('Design', '‹'), ('‹', '#'), ('#', '›'), ('›', 'Phases'), ('Phases', 'compiler'), ('compiler', 'Compiler'), ('Compiler', 'Analysis'), ('Analysis', 'phase'), ('phase', 'Synthesis'), ('Synthesis', 'phase'), ('phase', 'Lexical'), ('Lexical', 'analysis'), ('analysis', 'Syntax'), ('Syntax', 'analysis'), ('analysis', 'Semantic'), ('Semantic', 'analysis'), ('analysis', 'Intermediate'), ('Intermediate', 'code'), ('code', 'generation'), ('generation', 'Code'), ('Code', 'optimization'), ('optimization', 'Code'), ('Code', 'generation'), ('generation', 'Prof.'), ('Prof.', 'Jay'), ('Jay', 'R'), ('R', 'Dhamsaniya'), ('Dhamsaniya', '#'), ('#', '3130006'), ('3130006', '('), ('(', 'PS'), ('PS', ')'), (')', '\uf077'), ('\uf077', 'Unit'), ('Unit', '1'), ('1', '–'), ('–', 'Basic'), ('Basic', 'Probability'), ('Probability', '‹'), ('‹', '#'), ('#', '›'), ('›', 'Prof.'), ('Prof.', 'Dixita'), ('Dixita', 'B'), ('B', 'Kagathara'), ('Kagathara', '#'), ('#', '2170701'), ('2170701', '('), ('(', 'CD'), ('CD', ')'), (')', '\uf077'), ('\uf077', 'Unit'), ('Unit', '1–'), ('1–', 'Introduction'), ('Introduction', 'Compiler'), ('Compiler', 'Design'), ('Design', '‹'), ('‹', '#'), ('#', '›'), ('›', 'Intermediate'), ('Intermediate', 'code'), ('code', 'generator'), ('generator', 'Two'), ('Two', 'important'), ('important', 'properties'), ('properties', 'intermediate'), ('intermediate', 'code'), ('code', ':'), (':', 'It'), ('It', 'easy'), ('easy', 'produce'), ('produce', '.')]

>> Trigrams are: 
 [('=', 'id1', '+'), ('id1', '+', 'id2'), ('+', 'id2', '*'), ('id2', '*', 'id3'), ('*', 'id3', '60'), ('id3', '60', 'Semantic'), ('60', 'Semantic', 'analysis'), ('Semantic', 'analysis', '='), ('analysis', '=', 'id1'), ('=', 'id1', '+'), ('id1', '+', 'id2'), ('+', 'id2', '*'), ('id2', '*', 'id3'), ('*', 'id3', 'inttoreal'), ('id3', 'inttoreal', '60'), ('inttoreal', '60', 'int'), ('60', 'int', 'real'), ('int', 'real', '*'), ('real', '*', 'Note'), ('*', 'Note', ':'), ('Note', ':', 'Consider'), (':', 'Consider', 'id1'), ('Consider', 'id1', ','), ('id1', ',', 'id2'), (',', 'id2', 'id3'), ('id2', 'id3', 'real'), ('id3', 'real', 'Prof.'), ('real', 'Prof.', 'Dixita'), ('Prof.', 'Dixita', 'B'), ('Dixita', 'B', 'Kagathara'), ('B', 'Kagathara', '#'), ('Kagathara', '#', '2170701'), ('#', '2170701', '('), ('2170701', '(', 'CD'), ('(', 'CD', ')'), ('CD', ')', '\uf077'), (')', '\uf077', 'Unit'), ('\uf077', 'Unit', '1'), ('Unit', '1', '–'), ('1', '–', 'Introduction'), ('–', 'Introduction', 'Compiler'), ('Introduction', 'Compiler', 'Design'), ('Compiler', 'Design', '‹'), ('Design', '‹', '#'), ('‹', '#', '›'), ('#', '›', 'Phases'), ('›', 'Phases', 'compiler'), ('Phases', 'compiler', 'Compiler'), ('compiler', 'Compiler', 'Analysis'), ('Compiler', 'Analysis', 'phase'), ('Analysis', 'phase', 'Synthesis'), ('phase', 'Synthesis', 'phase'), ('Synthesis', 'phase', 'Lexical'), ('phase', 'Lexical', 'analysis'), ('Lexical', 'analysis', 'Syntax'), ('analysis', 'Syntax', 'analysis'), ('Syntax', 'analysis', 'Semantic'), ('analysis', 'Semantic', 'analysis'), ('Semantic', 'analysis', 'Intermediate'), ('analysis', 'Intermediate', 'code'), ('Intermediate', 'code', 'generation'), ('code', 'generation', 'Code'), ('generation', 'Code', 'optimization'), ('Code', 'optimization', 'Code'), ('optimization', 'Code', 'generation'), ('Code', 'generation', 'Prof.'), ('generation', 'Prof.', 'Jay'), ('Prof.', 'Jay', 'R'), ('Jay', 'R', 'Dhamsaniya'), ('R', 'Dhamsaniya', '#'), ('Dhamsaniya', '#', '3130006'), ('#', '3130006', '('), ('3130006', '(', 'PS'), ('(', 'PS', ')'), ('PS', ')', '\uf077'), (')', '\uf077', 'Unit'), ('\uf077', 'Unit', '1'), ('Unit', '1', '–'), ('1', '–', 'Basic'), ('–', 'Basic', 'Probability'), ('Basic', 'Probability', '‹'), ('Probability', '‹', '#'), ('‹', '#', '›'), ('#', '›', 'Prof.'), ('›', 'Prof.', 'Dixita'), ('Prof.', 'Dixita', 'B'), ('Dixita', 'B', 'Kagathara'), ('B', 'Kagathara', '#'), ('Kagathara', '#', '2170701'), ('#', '2170701', '('), ('2170701', '(', 'CD'), ('(', 'CD', ')'), ('CD', ')', '\uf077'), (')', '\uf077', 'Unit'), ('\uf077', 'Unit', '1–'), ('Unit', '1–', 'Introduction'), ('1–', 'Introduction', 'Compiler'), ('Introduction', 'Compiler', 'Design'), ('Compiler', 'Design', '‹'), ('Design', '‹', '#'), ('‹', '#', '›'), ('#', '›', 'Intermediate'), ('›', 'Intermediate', 'code'), ('Intermediate', 'code', 'generator'), ('code', 'generator', 'Two'), ('generator', 'Two', 'important'), ('Two', 'important', 'properties'), ('important', 'properties', 'intermediate'), ('properties', 'intermediate', 'code'), ('intermediate', 'code', ':'), ('code', ':', 'It'), (':', 'It', 'easy'), ('It', 'easy', 'produce'), ('easy', 'produce', '.')]

>> POS Tags are: 
 [('=', 'JJ'), ('id1', 'NN'), ('+', 'NNP'), ('id2', 'NN'), ('*', 'NNP'), ('id3', 'VBZ'), ('60', 'CD'), ('Semantic', 'JJ'), ('analysis', 'NN'), ('=', 'NNP'), ('id1', 'NN'), ('+', 'NNP'), ('id2', 'NN'), ('*', 'NNP'), ('id3', 'NN'), ('inttoreal', 'NN'), ('60', 'CD'), ('int', 'NN'), ('real', 'JJ'), ('*', 'JJ'), ('Note', 'NN'), (':', ':'), ('Consider', 'NNP'), ('id1', 'NN'), (',', ','), ('id2', 'JJ'), ('id3', 'NN'), ('real', 'JJ'), ('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', '#'), ('2170701', 'CD'), ('(', '('), ('CD', 'NN'), (')', ')'), ('\uf077', 'VBD'), ('Unit', 'NNP'), ('1', 'CD'), ('–', 'NNP'), ('Introduction', 'NNP'), ('Compiler', 'NNP'), ('Design', 'NNP'), ('‹', 'NNP'), ('#', '#'), ('›', 'NNP'), ('Phases', 'NNP'), ('compiler', 'NN'), ('Compiler', 'NNP'), ('Analysis', 'NNP'), ('phase', 'NN'), ('Synthesis', 'NNP'), ('phase', 'NN'), ('Lexical', 'NNP'), ('analysis', 'NN'), ('Syntax', 'NNP'), ('analysis', 'NN'), ('Semantic', 'NNP'), ('analysis', 'NN'), ('Intermediate', 'NNP'), ('code', 'NN'), ('generation', 'NN'), ('Code', 'NNP'), ('optimization', 'NN'), ('Code', 'NNP'), ('generation', 'NN'), ('Prof.', 'NNP'), ('Jay', 'NNP'), ('R', 'NNP'), ('Dhamsaniya', 'NNP'), ('#', '#'), ('3130006', 'CD'), ('(', '('), ('PS', 'NNP'), (')', ')'), ('\uf077', 'VBD'), ('Unit', 'NNP'), ('1', 'CD'), ('–', 'NNP'), ('Basic', 'NNP'), ('Probability', 'NNP'), ('‹', 'NNP'), ('#', '#'), ('›', 'NNP'), ('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', '#'), ('2170701', 'CD'), ('(', '('), ('CD', 'NN'), (')', ')'), ('\uf077', 'VBD'), ('Unit', 'NNP'), ('1–', 'CD'), ('Introduction', 'NNP'), ('Compiler', 'NNP'), ('Design', 'NNP'), ('‹', 'NNP'), ('#', '#'), ('›', 'NNP'), ('Intermediate', 'NNP'), ('code', 'NN'), ('generator', 'NN'), ('Two', 'CD'), ('important', 'JJ'), ('properties', 'NNS'), ('intermediate', 'JJ'), ('code', 'NN'), (':', ':'), ('It', 'PRP'), ('easy', 'JJ'), ('produce', 'NN'), ('.', '.')]

 (S
  (NP =/JJ id1/NN +/NNP id2/NN */NNP)
  id3/VBZ
  60/CD
  (NP
    Semantic/JJ
    analysis/NN
    =/NNP
    id1/NN
    +/NNP
    id2/NN
    */NNP
    id3/NN
    inttoreal/NN)
  60/CD
  (NP int/NN)
  (NP real/JJ */JJ Note/NN)
  :/:
  (NP Consider/NNP id1/NN)
  ,/,
  (NP id2/JJ id3/NN)
  (NP real/JJ Prof./NNP Dixita/NNP B/NNP Kagathara/NNP)
  #/#
  2170701/CD
  (/(
  (NP CD/NN)
  )/)
  /VBD
  (NP Unit/NNP)
  1/CD
  (NP –/NNP Introduction/NNP Compiler/NNP Design/NNP ‹/NNP)
  #/#
  (NP
    ›/NNP
    Phases/NNP
    compiler/NN
    Compiler/NNP
    Analysis/NNP
    phase/NN
    Synthesis/NNP
    phase/NN
    Lexical/NNP
    analysis/NN
    Syntax/NNP
    analysis/NN
    Semantic/NNP
    analysis/NN
    Intermediate/NNP
    code/NN
    generation/NN
    Code/NNP
    optimization/NN
    Code/NNP
    generation/NN
    Prof./NNP
    Jay/NNP
    R/NNP
    Dhamsaniya/NNP)
  #/#
  3130006/CD
  (/(
  (NP PS/NNP)
  )/)
  /VBD
  (NP Unit/NNP)
  1/CD
  (NP –/NNP Basic/NNP Probability/NNP ‹/NNP)
  #/#
  (NP ›/NNP Prof./NNP Dixita/NNP B/NNP Kagathara/NNP)
  #/#
  2170701/CD
  (/(
  (NP CD/NN)
  )/)
  /VBD
  (NP Unit/NNP)
  1–/CD
  (NP Introduction/NNP Compiler/NNP Design/NNP ‹/NNP)
  #/#
  (NP ›/NNP Intermediate/NNP code/NN generator/NN)
  Two/CD
  (NP important/JJ properties/NNS)
  (NP intermediate/JJ code/NN)
  :/:
  It/PRP
  (NP easy/JJ produce/NN)
  ./.) 


>> Noun Phrases are: 
 ['= id1 + id2 *', 'Semantic analysis = id1 + id2 * id3 inttoreal', 'int', 'real * Note', 'Consider id1', 'id2 id3', 'real Prof. Dixita B Kagathara', 'CD', 'Unit', '– Introduction Compiler Design ‹', '› Phases compiler Compiler Analysis phase Synthesis phase Lexical analysis Syntax analysis Semantic analysis Intermediate code generation Code optimization Code generation Prof. Jay R Dhamsaniya', 'PS', 'Unit', '– Basic Probability ‹', '› Prof. Dixita B Kagathara', 'CD', 'Unit', 'Introduction Compiler Design ‹', '› Intermediate code generator', 'important properties', 'intermediate code', 'easy produce']

>> Named Entities are: 
 [('ORGANIZATION', 'Unit'), ('ORGANIZATION', 'Compiler Analysis'), ('PERSON', 'Synthesis'), ('PERSON', 'Lexical'), ('PERSON', 'Syntax'), ('ORGANIZATION', 'Semantic'), ('ORGANIZATION', 'Intermediate'), ('PERSON', 'Code'), ('PERSON', 'Code'), ('ORGANIZATION', 'Unit'), ('ORGANIZATION', 'Unit')] 

>> Stemming using Porter Stemmer: 
 [('=', '='), ('id1', 'id1'), ('+', '+'), ('id2', 'id2'), ('*', '*'), ('id3', 'id3'), ('60', '60'), ('Semantic', 'semant'), ('analysis', 'analysi'), ('=', '='), ('id1', 'id1'), ('+', '+'), ('id2', 'id2'), ('*', '*'), ('id3', 'id3'), ('inttoreal', 'inttor'), ('60', '60'), ('int', 'int'), ('real', 'real'), ('*', '*'), ('Note', 'note'), (':', ':'), ('Consider', 'consid'), ('id1', 'id1'), (',', ','), ('id2', 'id2'), ('id3', 'id3'), ('real', 'real'), ('Prof.', 'prof.'), ('Dixita', 'dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '–'), ('Introduction', 'introduct'), ('Compiler', 'compil'), ('Design', 'design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Phases', 'phase'), ('compiler', 'compil'), ('Compiler', 'compil'), ('Analysis', 'analysi'), ('phase', 'phase'), ('Synthesis', 'synthesi'), ('phase', 'phase'), ('Lexical', 'lexic'), ('analysis', 'analysi'), ('Syntax', 'syntax'), ('analysis', 'analysi'), ('Semantic', 'semant'), ('analysis', 'analysi'), ('Intermediate', 'intermedi'), ('code', 'code'), ('generation', 'gener'), ('Code', 'code'), ('optimization', 'optim'), ('Code', 'code'), ('generation', 'gener'), ('Prof.', 'prof.'), ('Jay', 'jay'), ('R', 'r'), ('Dhamsaniya', 'dhamsaniya'), ('#', '#'), ('3130006', '3130006'), ('(', '('), ('PS', 'ps'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '–'), ('Basic', 'basic'), ('Probability', 'probabl'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Prof.', 'prof.'), ('Dixita', 'dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1–', '1–'), ('Introduction', 'introduct'), ('Compiler', 'compil'), ('Design', 'design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Intermediate', 'intermedi'), ('code', 'code'), ('generator', 'gener'), ('Two', 'two'), ('important', 'import'), ('properties', 'properti'), ('intermediate', 'intermedi'), ('code', 'code'), (':', ':'), ('It', 'it'), ('easy', 'easi'), ('produce', 'produc'), ('.', '.')]

>> Stemming using Snowball Stemmer: 
 [('=', '='), ('id1', 'id1'), ('+', '+'), ('id2', 'id2'), ('*', '*'), ('id3', 'id3'), ('60', '60'), ('Semantic', 'semant'), ('analysis', 'analysi'), ('=', '='), ('id1', 'id1'), ('+', '+'), ('id2', 'id2'), ('*', '*'), ('id3', 'id3'), ('inttoreal', 'inttor'), ('60', '60'), ('int', 'int'), ('real', 'real'), ('*', '*'), ('Note', 'note'), (':', ':'), ('Consider', 'consid'), ('id1', 'id1'), (',', ','), ('id2', 'id2'), ('id3', 'id3'), ('real', 'real'), ('Prof.', 'prof.'), ('Dixita', 'dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '–'), ('Introduction', 'introduct'), ('Compiler', 'compil'), ('Design', 'design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Phases', 'phase'), ('compiler', 'compil'), ('Compiler', 'compil'), ('Analysis', 'analysi'), ('phase', 'phase'), ('Synthesis', 'synthesi'), ('phase', 'phase'), ('Lexical', 'lexic'), ('analysis', 'analysi'), ('Syntax', 'syntax'), ('analysis', 'analysi'), ('Semantic', 'semant'), ('analysis', 'analysi'), ('Intermediate', 'intermedi'), ('code', 'code'), ('generation', 'generat'), ('Code', 'code'), ('optimization', 'optim'), ('Code', 'code'), ('generation', 'generat'), ('Prof.', 'prof.'), ('Jay', 'jay'), ('R', 'r'), ('Dhamsaniya', 'dhamsaniya'), ('#', '#'), ('3130006', '3130006'), ('(', '('), ('PS', 'ps'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '–'), ('Basic', 'basic'), ('Probability', 'probabl'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Prof.', 'prof.'), ('Dixita', 'dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1–', '1–'), ('Introduction', 'introduct'), ('Compiler', 'compil'), ('Design', 'design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Intermediate', 'intermedi'), ('code', 'code'), ('generator', 'generat'), ('Two', 'two'), ('important', 'import'), ('properties', 'properti'), ('intermediate', 'intermedi'), ('code', 'code'), (':', ':'), ('It', 'it'), ('easy', 'easi'), ('produce', 'produc'), ('.', '.')]

>> Lemmatization: 
 [('=', '='), ('id1', 'id1'), ('+', '+'), ('id2', 'id2'), ('*', '*'), ('id3', 'id3'), ('60', '60'), ('Semantic', 'Semantic'), ('analysis', 'analysis'), ('=', '='), ('id1', 'id1'), ('+', '+'), ('id2', 'id2'), ('*', '*'), ('id3', 'id3'), ('inttoreal', 'inttoreal'), ('60', '60'), ('int', 'int'), ('real', 'real'), ('*', '*'), ('Note', 'Note'), (':', ':'), ('Consider', 'Consider'), ('id1', 'id1'), (',', ','), ('id2', 'id2'), ('id3', 'id3'), ('real', 'real'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'CD'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'Unit'), ('1', '1'), ('–', '–'), ('Introduction', 'Introduction'), ('Compiler', 'Compiler'), ('Design', 'Design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Phases', 'Phases'), ('compiler', 'compiler'), ('Compiler', 'Compiler'), ('Analysis', 'Analysis'), ('phase', 'phase'), ('Synthesis', 'Synthesis'), ('phase', 'phase'), ('Lexical', 'Lexical'), ('analysis', 'analysis'), ('Syntax', 'Syntax'), ('analysis', 'analysis'), ('Semantic', 'Semantic'), ('analysis', 'analysis'), ('Intermediate', 'Intermediate'), ('code', 'code'), ('generation', 'generation'), ('Code', 'Code'), ('optimization', 'optimization'), ('Code', 'Code'), ('generation', 'generation'), ('Prof.', 'Prof.'), ('Jay', 'Jay'), ('R', 'R'), ('Dhamsaniya', 'Dhamsaniya'), ('#', '#'), ('3130006', '3130006'), ('(', '('), ('PS', 'PS'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'Unit'), ('1', '1'), ('–', '–'), ('Basic', 'Basic'), ('Probability', 'Probability'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'CD'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'Unit'), ('1–', '1–'), ('Introduction', 'Introduction'), ('Compiler', 'Compiler'), ('Design', 'Design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Intermediate', 'Intermediate'), ('code', 'code'), ('generator', 'generator'), ('Two', 'Two'), ('important', 'important'), ('properties', 'property'), ('intermediate', 'intermediate'), ('code', 'code'), (':', ':'), ('It', 'It'), ('easy', 'easy'), ('produce', 'produce'), ('.', '.')]



============================ Sentence 19 =============================

Easy to translate into target program. 


>> Tokens are: 
 ['Easy', 'translate', 'target', 'program', '.']

>> Bigrams are: 
 [('Easy', 'translate'), ('translate', 'target'), ('target', 'program'), ('program', '.')]

>> Trigrams are: 
 [('Easy', 'translate', 'target'), ('translate', 'target', 'program'), ('target', 'program', '.')]

>> POS Tags are: 
 [('Easy', 'JJ'), ('translate', 'JJ'), ('target', 'NN'), ('program', 'NN'), ('.', '.')]

 (S (NP Easy/JJ translate/JJ target/NN program/NN) ./.) 


>> Noun Phrases are: 
 ['Easy translate target program']

>> Named Entities are: 
 [('GPE', 'Easy')] 

>> Stemming using Porter Stemmer: 
 [('Easy', 'easi'), ('translate', 'translat'), ('target', 'target'), ('program', 'program'), ('.', '.')]

>> Stemming using Snowball Stemmer: 
 [('Easy', 'easi'), ('translate', 'translat'), ('target', 'target'), ('program', 'program'), ('.', '.')]

>> Lemmatization: 
 [('Easy', 'Easy'), ('translate', 'translate'), ('target', 'target'), ('program', 'program'), ('.', '.')]



============================ Sentence 20 =============================

Intermediate form can be represented using “three address code”. 


>> Tokens are: 
 ['Intermediate', 'form', 'represented', 'using', '“', 'three', 'address', 'code', '”', '.']

>> Bigrams are: 
 [('Intermediate', 'form'), ('form', 'represented'), ('represented', 'using'), ('using', '“'), ('“', 'three'), ('three', 'address'), ('address', 'code'), ('code', '”'), ('”', '.')]

>> Trigrams are: 
 [('Intermediate', 'form', 'represented'), ('form', 'represented', 'using'), ('represented', 'using', '“'), ('using', '“', 'three'), ('“', 'three', 'address'), ('three', 'address', 'code'), ('address', 'code', '”'), ('code', '”', '.')]

>> POS Tags are: 
 [('Intermediate', 'JJ'), ('form', 'NN'), ('represented', 'VBD'), ('using', 'VBG'), ('“', 'NNP'), ('three', 'CD'), ('address', 'NN'), ('code', 'NN'), ('”', 'NN'), ('.', '.')]

 (S
  (NP Intermediate/JJ form/NN)
  represented/VBD
  using/VBG
  (NP “/NNP)
  three/CD
  (NP address/NN code/NN ”/NN)
  ./.) 


>> Noun Phrases are: 
 ['Intermediate form', '“', 'address code ”']

>> Named Entities are: 
 [] 

>> Stemming using Porter Stemmer: 
 [('Intermediate', 'intermedi'), ('form', 'form'), ('represented', 'repres'), ('using', 'use'), ('“', '“'), ('three', 'three'), ('address', 'address'), ('code', 'code'), ('”', '”'), ('.', '.')]

>> Stemming using Snowball Stemmer: 
 [('Intermediate', 'intermedi'), ('form', 'form'), ('represented', 'repres'), ('using', 'use'), ('“', '“'), ('three', 'three'), ('address', 'address'), ('code', 'code'), ('”', '”'), ('.', '.')]

>> Lemmatization: 
 [('Intermediate', 'Intermediate'), ('form', 'form'), ('represented', 'represented'), ('using', 'using'), ('“', '“'), ('three', 'three'), ('address', 'address'), ('code', 'code'), ('”', '”'), ('.', '.')]



============================ Sentence 21 =============================

Three address code consist of a sequence of instruction, each of which has at most three operands. 


>> Tokens are: 
 ['Three', 'address', 'code', 'consist', 'sequence', 'instruction', ',', 'three', 'operands', '.']

>> Bigrams are: 
 [('Three', 'address'), ('address', 'code'), ('code', 'consist'), ('consist', 'sequence'), ('sequence', 'instruction'), ('instruction', ','), (',', 'three'), ('three', 'operands'), ('operands', '.')]

>> Trigrams are: 
 [('Three', 'address', 'code'), ('address', 'code', 'consist'), ('code', 'consist', 'sequence'), ('consist', 'sequence', 'instruction'), ('sequence', 'instruction', ','), ('instruction', ',', 'three'), (',', 'three', 'operands'), ('three', 'operands', '.')]

>> POS Tags are: 
 [('Three', 'CD'), ('address', 'NN'), ('code', 'NN'), ('consist', 'JJ'), ('sequence', 'NN'), ('instruction', 'NN'), (',', ','), ('three', 'CD'), ('operands', 'NNS'), ('.', '.')]

 (S
  Three/CD
  (NP address/NN code/NN)
  (NP consist/JJ sequence/NN instruction/NN)
  ,/,
  three/CD
  (NP operands/NNS)
  ./.) 


>> Noun Phrases are: 
 ['address code', 'consist sequence instruction', 'operands']

>> Named Entities are: 
 [] 

>> Stemming using Porter Stemmer: 
 [('Three', 'three'), ('address', 'address'), ('code', 'code'), ('consist', 'consist'), ('sequence', 'sequenc'), ('instruction', 'instruct'), (',', ','), ('three', 'three'), ('operands', 'operand'), ('.', '.')]

>> Stemming using Snowball Stemmer: 
 [('Three', 'three'), ('address', 'address'), ('code', 'code'), ('consist', 'consist'), ('sequence', 'sequenc'), ('instruction', 'instruct'), (',', ','), ('three', 'three'), ('operands', 'operand'), ('.', '.')]

>> Lemmatization: 
 [('Three', 'Three'), ('address', 'address'), ('code', 'code'), ('consist', 'consist'), ('sequence', 'sequence'), ('instruction', 'instruction'), (',', ','), ('three', 'three'), ('operands', 'operand'), ('.', '.')]



============================ Sentence 22 =============================

= id1 + id2 * id3 inttoreal 60 Intermediate code  		t1= int to real(60) 		t2= id3 * t1 		t3= t2 + id2 		id1= t3 t1   t2   t3     Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1 – Introduction to Compiler Design ‹#›  Phases of compiler Compiler Analysis phase Synthesis phase Lexical analysis  Syntax analysis  Semantic analysis    Intermediate code generation Code optimization  Code generation     Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1– Introduction to Compiler Design ‹#›  Code optimization It improves the intermediate code. 


>> Tokens are: 
 ['=', 'id1', '+', 'id2', '*', 'id3', 'inttoreal', '60', 'Intermediate', 'code', 't1=', 'int', 'real', '(', '60', ')', 't2=', 'id3', '*', 't1', 't3=', 't2', '+', 'id2', 'id1=', 't3', 't1', 't2', 't3', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '1', '–', 'Introduction', 'Compiler', 'Design', '‹', '#', '›', 'Phases', 'compiler', 'Compiler', 'Analysis', 'phase', 'Synthesis', 'phase', 'Lexical', 'analysis', 'Syntax', 'analysis', 'Semantic', 'analysis', 'Intermediate', 'code', 'generation', 'Code', 'optimization', 'Code', 'generation', 'Prof.', 'Jay', 'R', 'Dhamsaniya', '#', '3130006', '(', 'PS', ')', '\uf077', 'Unit', '1', '–', 'Basic', 'Probability', '‹', '#', '›', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '1–', 'Introduction', 'Compiler', 'Design', '‹', '#', '›', 'Code', 'optimization', 'It', 'improves', 'intermediate', 'code', '.']

>> Bigrams are: 
 [('=', 'id1'), ('id1', '+'), ('+', 'id2'), ('id2', '*'), ('*', 'id3'), ('id3', 'inttoreal'), ('inttoreal', '60'), ('60', 'Intermediate'), ('Intermediate', 'code'), ('code', 't1='), ('t1=', 'int'), ('int', 'real'), ('real', '('), ('(', '60'), ('60', ')'), (')', 't2='), ('t2=', 'id3'), ('id3', '*'), ('*', 't1'), ('t1', 't3='), ('t3=', 't2'), ('t2', '+'), ('+', 'id2'), ('id2', 'id1='), ('id1=', 't3'), ('t3', 't1'), ('t1', 't2'), ('t2', 't3'), ('t3', 'Prof.'), ('Prof.', 'Dixita'), ('Dixita', 'B'), ('B', 'Kagathara'), ('Kagathara', '#'), ('#', '2170701'), ('2170701', '('), ('(', 'CD'), ('CD', ')'), (')', '\uf077'), ('\uf077', 'Unit'), ('Unit', '1'), ('1', '–'), ('–', 'Introduction'), ('Introduction', 'Compiler'), ('Compiler', 'Design'), ('Design', '‹'), ('‹', '#'), ('#', '›'), ('›', 'Phases'), ('Phases', 'compiler'), ('compiler', 'Compiler'), ('Compiler', 'Analysis'), ('Analysis', 'phase'), ('phase', 'Synthesis'), ('Synthesis', 'phase'), ('phase', 'Lexical'), ('Lexical', 'analysis'), ('analysis', 'Syntax'), ('Syntax', 'analysis'), ('analysis', 'Semantic'), ('Semantic', 'analysis'), ('analysis', 'Intermediate'), ('Intermediate', 'code'), ('code', 'generation'), ('generation', 'Code'), ('Code', 'optimization'), ('optimization', 'Code'), ('Code', 'generation'), ('generation', 'Prof.'), ('Prof.', 'Jay'), ('Jay', 'R'), ('R', 'Dhamsaniya'), ('Dhamsaniya', '#'), ('#', '3130006'), ('3130006', '('), ('(', 'PS'), ('PS', ')'), (')', '\uf077'), ('\uf077', 'Unit'), ('Unit', '1'), ('1', '–'), ('–', 'Basic'), ('Basic', 'Probability'), ('Probability', '‹'), ('‹', '#'), ('#', '›'), ('›', 'Prof.'), ('Prof.', 'Dixita'), ('Dixita', 'B'), ('B', 'Kagathara'), ('Kagathara', '#'), ('#', '2170701'), ('2170701', '('), ('(', 'CD'), ('CD', ')'), (')', '\uf077'), ('\uf077', 'Unit'), ('Unit', '1–'), ('1–', 'Introduction'), ('Introduction', 'Compiler'), ('Compiler', 'Design'), ('Design', '‹'), ('‹', '#'), ('#', '›'), ('›', 'Code'), ('Code', 'optimization'), ('optimization', 'It'), ('It', 'improves'), ('improves', 'intermediate'), ('intermediate', 'code'), ('code', '.')]

>> Trigrams are: 
 [('=', 'id1', '+'), ('id1', '+', 'id2'), ('+', 'id2', '*'), ('id2', '*', 'id3'), ('*', 'id3', 'inttoreal'), ('id3', 'inttoreal', '60'), ('inttoreal', '60', 'Intermediate'), ('60', 'Intermediate', 'code'), ('Intermediate', 'code', 't1='), ('code', 't1=', 'int'), ('t1=', 'int', 'real'), ('int', 'real', '('), ('real', '(', '60'), ('(', '60', ')'), ('60', ')', 't2='), (')', 't2=', 'id3'), ('t2=', 'id3', '*'), ('id3', '*', 't1'), ('*', 't1', 't3='), ('t1', 't3=', 't2'), ('t3=', 't2', '+'), ('t2', '+', 'id2'), ('+', 'id2', 'id1='), ('id2', 'id1=', 't3'), ('id1=', 't3', 't1'), ('t3', 't1', 't2'), ('t1', 't2', 't3'), ('t2', 't3', 'Prof.'), ('t3', 'Prof.', 'Dixita'), ('Prof.', 'Dixita', 'B'), ('Dixita', 'B', 'Kagathara'), ('B', 'Kagathara', '#'), ('Kagathara', '#', '2170701'), ('#', '2170701', '('), ('2170701', '(', 'CD'), ('(', 'CD', ')'), ('CD', ')', '\uf077'), (')', '\uf077', 'Unit'), ('\uf077', 'Unit', '1'), ('Unit', '1', '–'), ('1', '–', 'Introduction'), ('–', 'Introduction', 'Compiler'), ('Introduction', 'Compiler', 'Design'), ('Compiler', 'Design', '‹'), ('Design', '‹', '#'), ('‹', '#', '›'), ('#', '›', 'Phases'), ('›', 'Phases', 'compiler'), ('Phases', 'compiler', 'Compiler'), ('compiler', 'Compiler', 'Analysis'), ('Compiler', 'Analysis', 'phase'), ('Analysis', 'phase', 'Synthesis'), ('phase', 'Synthesis', 'phase'), ('Synthesis', 'phase', 'Lexical'), ('phase', 'Lexical', 'analysis'), ('Lexical', 'analysis', 'Syntax'), ('analysis', 'Syntax', 'analysis'), ('Syntax', 'analysis', 'Semantic'), ('analysis', 'Semantic', 'analysis'), ('Semantic', 'analysis', 'Intermediate'), ('analysis', 'Intermediate', 'code'), ('Intermediate', 'code', 'generation'), ('code', 'generation', 'Code'), ('generation', 'Code', 'optimization'), ('Code', 'optimization', 'Code'), ('optimization', 'Code', 'generation'), ('Code', 'generation', 'Prof.'), ('generation', 'Prof.', 'Jay'), ('Prof.', 'Jay', 'R'), ('Jay', 'R', 'Dhamsaniya'), ('R', 'Dhamsaniya', '#'), ('Dhamsaniya', '#', '3130006'), ('#', '3130006', '('), ('3130006', '(', 'PS'), ('(', 'PS', ')'), ('PS', ')', '\uf077'), (')', '\uf077', 'Unit'), ('\uf077', 'Unit', '1'), ('Unit', '1', '–'), ('1', '–', 'Basic'), ('–', 'Basic', 'Probability'), ('Basic', 'Probability', '‹'), ('Probability', '‹', '#'), ('‹', '#', '›'), ('#', '›', 'Prof.'), ('›', 'Prof.', 'Dixita'), ('Prof.', 'Dixita', 'B'), ('Dixita', 'B', 'Kagathara'), ('B', 'Kagathara', '#'), ('Kagathara', '#', '2170701'), ('#', '2170701', '('), ('2170701', '(', 'CD'), ('(', 'CD', ')'), ('CD', ')', '\uf077'), (')', '\uf077', 'Unit'), ('\uf077', 'Unit', '1–'), ('Unit', '1–', 'Introduction'), ('1–', 'Introduction', 'Compiler'), ('Introduction', 'Compiler', 'Design'), ('Compiler', 'Design', '‹'), ('Design', '‹', '#'), ('‹', '#', '›'), ('#', '›', 'Code'), ('›', 'Code', 'optimization'), ('Code', 'optimization', 'It'), ('optimization', 'It', 'improves'), ('It', 'improves', 'intermediate'), ('improves', 'intermediate', 'code'), ('intermediate', 'code', '.')]

>> POS Tags are: 
 [('=', 'JJ'), ('id1', 'NN'), ('+', 'NNP'), ('id2', 'NN'), ('*', 'NNP'), ('id3', 'NN'), ('inttoreal', 'NN'), ('60', 'CD'), ('Intermediate', 'NNP'), ('code', 'NN'), ('t1=', 'NN'), ('int', 'NN'), ('real', 'JJ'), ('(', '('), ('60', 'CD'), (')', ')'), ('t2=', 'NN'), ('id3', 'JJ'), ('*', 'NNP'), ('t1', 'NN'), ('t3=', 'NN'), ('t2', 'NN'), ('+', 'NNP'), ('id2', 'NN'), ('id1=', 'NN'), ('t3', 'NN'), ('t1', 'NN'), ('t2', 'NN'), ('t3', 'NN'), ('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', '#'), ('2170701', 'CD'), ('(', '('), ('CD', 'NN'), (')', ')'), ('\uf077', 'VBD'), ('Unit', 'NNP'), ('1', 'CD'), ('–', 'NNP'), ('Introduction', 'NNP'), ('Compiler', 'NNP'), ('Design', 'NNP'), ('‹', 'NNP'), ('#', '#'), ('›', 'NNP'), ('Phases', 'NNP'), ('compiler', 'NN'), ('Compiler', 'NNP'), ('Analysis', 'NNP'), ('phase', 'NN'), ('Synthesis', 'NNP'), ('phase', 'NN'), ('Lexical', 'NNP'), ('analysis', 'NN'), ('Syntax', 'NNP'), ('analysis', 'NN'), ('Semantic', 'NNP'), ('analysis', 'NN'), ('Intermediate', 'NNP'), ('code', 'NN'), ('generation', 'NN'), ('Code', 'NNP'), ('optimization', 'NN'), ('Code', 'NNP'), ('generation', 'NN'), ('Prof.', 'NNP'), ('Jay', 'NNP'), ('R', 'NNP'), ('Dhamsaniya', 'NNP'), ('#', '#'), ('3130006', 'CD'), ('(', '('), ('PS', 'NNP'), (')', ')'), ('\uf077', 'VBD'), ('Unit', 'NNP'), ('1', 'CD'), ('–', 'NNP'), ('Basic', 'NNP'), ('Probability', 'NNP'), ('‹', 'NNP'), ('#', '#'), ('›', 'NNP'), ('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', '#'), ('2170701', 'CD'), ('(', '('), ('CD', 'NN'), (')', ')'), ('\uf077', 'VBD'), ('Unit', 'NNP'), ('1–', 'CD'), ('Introduction', 'NNP'), ('Compiler', 'NNP'), ('Design', 'NNP'), ('‹', 'NNP'), ('#', '#'), ('›', 'NNP'), ('Code', 'NNP'), ('optimization', 'NN'), ('It', 'PRP'), ('improves', 'VBZ'), ('intermediate', 'JJ'), ('code', 'NN'), ('.', '.')]

 (S
  (NP =/JJ id1/NN +/NNP id2/NN */NNP id3/NN inttoreal/NN)
  60/CD
  (NP Intermediate/NNP code/NN t1=/NN int/NN)
  real/JJ
  (/(
  60/CD
  )/)
  (NP t2=/NN)
  (NP
    id3/JJ
    */NNP
    t1/NN
    t3=/NN
    t2/NN
    +/NNP
    id2/NN
    id1=/NN
    t3/NN
    t1/NN
    t2/NN
    t3/NN
    Prof./NNP
    Dixita/NNP
    B/NNP
    Kagathara/NNP)
  #/#
  2170701/CD
  (/(
  (NP CD/NN)
  )/)
  /VBD
  (NP Unit/NNP)
  1/CD
  (NP –/NNP Introduction/NNP Compiler/NNP Design/NNP ‹/NNP)
  #/#
  (NP
    ›/NNP
    Phases/NNP
    compiler/NN
    Compiler/NNP
    Analysis/NNP
    phase/NN
    Synthesis/NNP
    phase/NN
    Lexical/NNP
    analysis/NN
    Syntax/NNP
    analysis/NN
    Semantic/NNP
    analysis/NN
    Intermediate/NNP
    code/NN
    generation/NN
    Code/NNP
    optimization/NN
    Code/NNP
    generation/NN
    Prof./NNP
    Jay/NNP
    R/NNP
    Dhamsaniya/NNP)
  #/#
  3130006/CD
  (/(
  (NP PS/NNP)
  )/)
  /VBD
  (NP Unit/NNP)
  1/CD
  (NP –/NNP Basic/NNP Probability/NNP ‹/NNP)
  #/#
  (NP ›/NNP Prof./NNP Dixita/NNP B/NNP Kagathara/NNP)
  #/#
  2170701/CD
  (/(
  (NP CD/NN)
  )/)
  /VBD
  (NP Unit/NNP)
  1–/CD
  (NP Introduction/NNP Compiler/NNP Design/NNP ‹/NNP)
  #/#
  (NP ›/NNP Code/NNP optimization/NN)
  It/PRP
  improves/VBZ
  (NP intermediate/JJ code/NN)
  ./.) 


>> Noun Phrases are: 
 ['= id1 + id2 * id3 inttoreal', 'Intermediate code t1= int', 't2=', 'id3 * t1 t3= t2 + id2 id1= t3 t1 t2 t3 Prof. Dixita B Kagathara', 'CD', 'Unit', '– Introduction Compiler Design ‹', '› Phases compiler Compiler Analysis phase Synthesis phase Lexical analysis Syntax analysis Semantic analysis Intermediate code generation Code optimization Code generation Prof. Jay R Dhamsaniya', 'PS', 'Unit', '– Basic Probability ‹', '› Prof. Dixita B Kagathara', 'CD', 'Unit', 'Introduction Compiler Design ‹', '› Code optimization', 'intermediate code']

>> Named Entities are: 
 [('ORGANIZATION', 'Unit'), ('ORGANIZATION', 'Compiler Analysis'), ('PERSON', 'Synthesis'), ('PERSON', 'Lexical'), ('PERSON', 'Syntax'), ('ORGANIZATION', 'Semantic'), ('ORGANIZATION', 'Intermediate'), ('PERSON', 'Code'), ('PERSON', 'Code'), ('ORGANIZATION', 'Unit'), ('ORGANIZATION', 'Unit')] 

>> Stemming using Porter Stemmer: 
 [('=', '='), ('id1', 'id1'), ('+', '+'), ('id2', 'id2'), ('*', '*'), ('id3', 'id3'), ('inttoreal', 'inttor'), ('60', '60'), ('Intermediate', 'intermedi'), ('code', 'code'), ('t1=', 't1='), ('int', 'int'), ('real', 'real'), ('(', '('), ('60', '60'), (')', ')'), ('t2=', 't2='), ('id3', 'id3'), ('*', '*'), ('t1', 't1'), ('t3=', 't3='), ('t2', 't2'), ('+', '+'), ('id2', 'id2'), ('id1=', 'id1='), ('t3', 't3'), ('t1', 't1'), ('t2', 't2'), ('t3', 't3'), ('Prof.', 'prof.'), ('Dixita', 'dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '–'), ('Introduction', 'introduct'), ('Compiler', 'compil'), ('Design', 'design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Phases', 'phase'), ('compiler', 'compil'), ('Compiler', 'compil'), ('Analysis', 'analysi'), ('phase', 'phase'), ('Synthesis', 'synthesi'), ('phase', 'phase'), ('Lexical', 'lexic'), ('analysis', 'analysi'), ('Syntax', 'syntax'), ('analysis', 'analysi'), ('Semantic', 'semant'), ('analysis', 'analysi'), ('Intermediate', 'intermedi'), ('code', 'code'), ('generation', 'gener'), ('Code', 'code'), ('optimization', 'optim'), ('Code', 'code'), ('generation', 'gener'), ('Prof.', 'prof.'), ('Jay', 'jay'), ('R', 'r'), ('Dhamsaniya', 'dhamsaniya'), ('#', '#'), ('3130006', '3130006'), ('(', '('), ('PS', 'ps'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '–'), ('Basic', 'basic'), ('Probability', 'probabl'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Prof.', 'prof.'), ('Dixita', 'dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1–', '1–'), ('Introduction', 'introduct'), ('Compiler', 'compil'), ('Design', 'design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Code', 'code'), ('optimization', 'optim'), ('It', 'it'), ('improves', 'improv'), ('intermediate', 'intermedi'), ('code', 'code'), ('.', '.')]

>> Stemming using Snowball Stemmer: 
 [('=', '='), ('id1', 'id1'), ('+', '+'), ('id2', 'id2'), ('*', '*'), ('id3', 'id3'), ('inttoreal', 'inttor'), ('60', '60'), ('Intermediate', 'intermedi'), ('code', 'code'), ('t1=', 't1='), ('int', 'int'), ('real', 'real'), ('(', '('), ('60', '60'), (')', ')'), ('t2=', 't2='), ('id3', 'id3'), ('*', '*'), ('t1', 't1'), ('t3=', 't3='), ('t2', 't2'), ('+', '+'), ('id2', 'id2'), ('id1=', 'id1='), ('t3', 't3'), ('t1', 't1'), ('t2', 't2'), ('t3', 't3'), ('Prof.', 'prof.'), ('Dixita', 'dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '–'), ('Introduction', 'introduct'), ('Compiler', 'compil'), ('Design', 'design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Phases', 'phase'), ('compiler', 'compil'), ('Compiler', 'compil'), ('Analysis', 'analysi'), ('phase', 'phase'), ('Synthesis', 'synthesi'), ('phase', 'phase'), ('Lexical', 'lexic'), ('analysis', 'analysi'), ('Syntax', 'syntax'), ('analysis', 'analysi'), ('Semantic', 'semant'), ('analysis', 'analysi'), ('Intermediate', 'intermedi'), ('code', 'code'), ('generation', 'generat'), ('Code', 'code'), ('optimization', 'optim'), ('Code', 'code'), ('generation', 'generat'), ('Prof.', 'prof.'), ('Jay', 'jay'), ('R', 'r'), ('Dhamsaniya', 'dhamsaniya'), ('#', '#'), ('3130006', '3130006'), ('(', '('), ('PS', 'ps'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '–'), ('Basic', 'basic'), ('Probability', 'probabl'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Prof.', 'prof.'), ('Dixita', 'dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1–', '1–'), ('Introduction', 'introduct'), ('Compiler', 'compil'), ('Design', 'design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Code', 'code'), ('optimization', 'optim'), ('It', 'it'), ('improves', 'improv'), ('intermediate', 'intermedi'), ('code', 'code'), ('.', '.')]

>> Lemmatization: 
 [('=', '='), ('id1', 'id1'), ('+', '+'), ('id2', 'id2'), ('*', '*'), ('id3', 'id3'), ('inttoreal', 'inttoreal'), ('60', '60'), ('Intermediate', 'Intermediate'), ('code', 'code'), ('t1=', 't1='), ('int', 'int'), ('real', 'real'), ('(', '('), ('60', '60'), (')', ')'), ('t2=', 't2='), ('id3', 'id3'), ('*', '*'), ('t1', 't1'), ('t3=', 't3='), ('t2', 't2'), ('+', '+'), ('id2', 'id2'), ('id1=', 'id1='), ('t3', 't3'), ('t1', 't1'), ('t2', 't2'), ('t3', 't3'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'CD'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'Unit'), ('1', '1'), ('–', '–'), ('Introduction', 'Introduction'), ('Compiler', 'Compiler'), ('Design', 'Design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Phases', 'Phases'), ('compiler', 'compiler'), ('Compiler', 'Compiler'), ('Analysis', 'Analysis'), ('phase', 'phase'), ('Synthesis', 'Synthesis'), ('phase', 'phase'), ('Lexical', 'Lexical'), ('analysis', 'analysis'), ('Syntax', 'Syntax'), ('analysis', 'analysis'), ('Semantic', 'Semantic'), ('analysis', 'analysis'), ('Intermediate', 'Intermediate'), ('code', 'code'), ('generation', 'generation'), ('Code', 'Code'), ('optimization', 'optimization'), ('Code', 'Code'), ('generation', 'generation'), ('Prof.', 'Prof.'), ('Jay', 'Jay'), ('R', 'R'), ('Dhamsaniya', 'Dhamsaniya'), ('#', '#'), ('3130006', '3130006'), ('(', '('), ('PS', 'PS'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'Unit'), ('1', '1'), ('–', '–'), ('Basic', 'Basic'), ('Probability', 'Probability'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'CD'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'Unit'), ('1–', '1–'), ('Introduction', 'Introduction'), ('Compiler', 'Compiler'), ('Design', 'Design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Code', 'Code'), ('optimization', 'optimization'), ('It', 'It'), ('improves', 'improves'), ('intermediate', 'intermediate'), ('code', 'code'), ('.', '.')]



============================ Sentence 23 =============================

This is necessary to have a faster execution of code or less consumption of memory. 


>> Tokens are: 
 ['This', 'necessary', 'faster', 'execution', 'code', 'less', 'consumption', 'memory', '.']

>> Bigrams are: 
 [('This', 'necessary'), ('necessary', 'faster'), ('faster', 'execution'), ('execution', 'code'), ('code', 'less'), ('less', 'consumption'), ('consumption', 'memory'), ('memory', '.')]

>> Trigrams are: 
 [('This', 'necessary', 'faster'), ('necessary', 'faster', 'execution'), ('faster', 'execution', 'code'), ('execution', 'code', 'less'), ('code', 'less', 'consumption'), ('less', 'consumption', 'memory'), ('consumption', 'memory', '.')]

>> POS Tags are: 
 [('This', 'DT'), ('necessary', 'JJ'), ('faster', 'JJR'), ('execution', 'NN'), ('code', 'NN'), ('less', 'JJR'), ('consumption', 'JJ'), ('memory', 'NN'), ('.', '.')]

 (S
  This/DT
  necessary/JJ
  faster/JJR
  (NP execution/NN code/NN)
  less/JJR
  (NP consumption/JJ memory/NN)
  ./.) 


>> Noun Phrases are: 
 ['execution code', 'consumption memory']

>> Named Entities are: 
 [] 

>> Stemming using Porter Stemmer: 
 [('This', 'thi'), ('necessary', 'necessari'), ('faster', 'faster'), ('execution', 'execut'), ('code', 'code'), ('less', 'less'), ('consumption', 'consumpt'), ('memory', 'memori'), ('.', '.')]

>> Stemming using Snowball Stemmer: 
 [('This', 'this'), ('necessary', 'necessari'), ('faster', 'faster'), ('execution', 'execut'), ('code', 'code'), ('less', 'less'), ('consumption', 'consumpt'), ('memory', 'memori'), ('.', '.')]

>> Lemmatization: 
 [('This', 'This'), ('necessary', 'necessary'), ('faster', 'faster'), ('execution', 'execution'), ('code', 'code'), ('less', 'le'), ('consumption', 'consumption'), ('memory', 'memory'), ('.', '.')]



============================ Sentence 24 =============================

Intermediate code  	           t1= int to real(60) 	t2= id3 * t1 	t3= t2 + id2 		id1= t3  Code optimization  		t1= id3 * 60.0 		id1 = id2 + t1      Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1 – Introduction to Compiler Design ‹#›  Phases of compiler Compiler Analysis phase Synthesis phase Lexical analysis  Syntax analysis  Semantic analysis    Intermediate code generation Code optimization  Code generation     Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1– Introduction to Compiler Design ‹#›  Code generation The intermediate code instructions are translated into sequence of machine instruction. 


>> Tokens are: 
 ['Intermediate', 'code', 't1=', 'int', 'real', '(', '60', ')', 't2=', 'id3', '*', 't1', 't3=', 't2', '+', 'id2', 'id1=', 't3', 'Code', 'optimization', 't1=', 'id3', '*', '60.0', 'id1', '=', 'id2', '+', 't1', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '1', '–', 'Introduction', 'Compiler', 'Design', '‹', '#', '›', 'Phases', 'compiler', 'Compiler', 'Analysis', 'phase', 'Synthesis', 'phase', 'Lexical', 'analysis', 'Syntax', 'analysis', 'Semantic', 'analysis', 'Intermediate', 'code', 'generation', 'Code', 'optimization', 'Code', 'generation', 'Prof.', 'Jay', 'R', 'Dhamsaniya', '#', '3130006', '(', 'PS', ')', '\uf077', 'Unit', '1', '–', 'Basic', 'Probability', '‹', '#', '›', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '1–', 'Introduction', 'Compiler', 'Design', '‹', '#', '›', 'Code', 'generation', 'The', 'intermediate', 'code', 'instructions', 'translated', 'sequence', 'machine', 'instruction', '.']

>> Bigrams are: 
 [('Intermediate', 'code'), ('code', 't1='), ('t1=', 'int'), ('int', 'real'), ('real', '('), ('(', '60'), ('60', ')'), (')', 't2='), ('t2=', 'id3'), ('id3', '*'), ('*', 't1'), ('t1', 't3='), ('t3=', 't2'), ('t2', '+'), ('+', 'id2'), ('id2', 'id1='), ('id1=', 't3'), ('t3', 'Code'), ('Code', 'optimization'), ('optimization', 't1='), ('t1=', 'id3'), ('id3', '*'), ('*', '60.0'), ('60.0', 'id1'), ('id1', '='), ('=', 'id2'), ('id2', '+'), ('+', 't1'), ('t1', 'Prof.'), ('Prof.', 'Dixita'), ('Dixita', 'B'), ('B', 'Kagathara'), ('Kagathara', '#'), ('#', '2170701'), ('2170701', '('), ('(', 'CD'), ('CD', ')'), (')', '\uf077'), ('\uf077', 'Unit'), ('Unit', '1'), ('1', '–'), ('–', 'Introduction'), ('Introduction', 'Compiler'), ('Compiler', 'Design'), ('Design', '‹'), ('‹', '#'), ('#', '›'), ('›', 'Phases'), ('Phases', 'compiler'), ('compiler', 'Compiler'), ('Compiler', 'Analysis'), ('Analysis', 'phase'), ('phase', 'Synthesis'), ('Synthesis', 'phase'), ('phase', 'Lexical'), ('Lexical', 'analysis'), ('analysis', 'Syntax'), ('Syntax', 'analysis'), ('analysis', 'Semantic'), ('Semantic', 'analysis'), ('analysis', 'Intermediate'), ('Intermediate', 'code'), ('code', 'generation'), ('generation', 'Code'), ('Code', 'optimization'), ('optimization', 'Code'), ('Code', 'generation'), ('generation', 'Prof.'), ('Prof.', 'Jay'), ('Jay', 'R'), ('R', 'Dhamsaniya'), ('Dhamsaniya', '#'), ('#', '3130006'), ('3130006', '('), ('(', 'PS'), ('PS', ')'), (')', '\uf077'), ('\uf077', 'Unit'), ('Unit', '1'), ('1', '–'), ('–', 'Basic'), ('Basic', 'Probability'), ('Probability', '‹'), ('‹', '#'), ('#', '›'), ('›', 'Prof.'), ('Prof.', 'Dixita'), ('Dixita', 'B'), ('B', 'Kagathara'), ('Kagathara', '#'), ('#', '2170701'), ('2170701', '('), ('(', 'CD'), ('CD', ')'), (')', '\uf077'), ('\uf077', 'Unit'), ('Unit', '1–'), ('1–', 'Introduction'), ('Introduction', 'Compiler'), ('Compiler', 'Design'), ('Design', '‹'), ('‹', '#'), ('#', '›'), ('›', 'Code'), ('Code', 'generation'), ('generation', 'The'), ('The', 'intermediate'), ('intermediate', 'code'), ('code', 'instructions'), ('instructions', 'translated'), ('translated', 'sequence'), ('sequence', 'machine'), ('machine', 'instruction'), ('instruction', '.')]

>> Trigrams are: 
 [('Intermediate', 'code', 't1='), ('code', 't1=', 'int'), ('t1=', 'int', 'real'), ('int', 'real', '('), ('real', '(', '60'), ('(', '60', ')'), ('60', ')', 't2='), (')', 't2=', 'id3'), ('t2=', 'id3', '*'), ('id3', '*', 't1'), ('*', 't1', 't3='), ('t1', 't3=', 't2'), ('t3=', 't2', '+'), ('t2', '+', 'id2'), ('+', 'id2', 'id1='), ('id2', 'id1=', 't3'), ('id1=', 't3', 'Code'), ('t3', 'Code', 'optimization'), ('Code', 'optimization', 't1='), ('optimization', 't1=', 'id3'), ('t1=', 'id3', '*'), ('id3', '*', '60.0'), ('*', '60.0', 'id1'), ('60.0', 'id1', '='), ('id1', '=', 'id2'), ('=', 'id2', '+'), ('id2', '+', 't1'), ('+', 't1', 'Prof.'), ('t1', 'Prof.', 'Dixita'), ('Prof.', 'Dixita', 'B'), ('Dixita', 'B', 'Kagathara'), ('B', 'Kagathara', '#'), ('Kagathara', '#', '2170701'), ('#', '2170701', '('), ('2170701', '(', 'CD'), ('(', 'CD', ')'), ('CD', ')', '\uf077'), (')', '\uf077', 'Unit'), ('\uf077', 'Unit', '1'), ('Unit', '1', '–'), ('1', '–', 'Introduction'), ('–', 'Introduction', 'Compiler'), ('Introduction', 'Compiler', 'Design'), ('Compiler', 'Design', '‹'), ('Design', '‹', '#'), ('‹', '#', '›'), ('#', '›', 'Phases'), ('›', 'Phases', 'compiler'), ('Phases', 'compiler', 'Compiler'), ('compiler', 'Compiler', 'Analysis'), ('Compiler', 'Analysis', 'phase'), ('Analysis', 'phase', 'Synthesis'), ('phase', 'Synthesis', 'phase'), ('Synthesis', 'phase', 'Lexical'), ('phase', 'Lexical', 'analysis'), ('Lexical', 'analysis', 'Syntax'), ('analysis', 'Syntax', 'analysis'), ('Syntax', 'analysis', 'Semantic'), ('analysis', 'Semantic', 'analysis'), ('Semantic', 'analysis', 'Intermediate'), ('analysis', 'Intermediate', 'code'), ('Intermediate', 'code', 'generation'), ('code', 'generation', 'Code'), ('generation', 'Code', 'optimization'), ('Code', 'optimization', 'Code'), ('optimization', 'Code', 'generation'), ('Code', 'generation', 'Prof.'), ('generation', 'Prof.', 'Jay'), ('Prof.', 'Jay', 'R'), ('Jay', 'R', 'Dhamsaniya'), ('R', 'Dhamsaniya', '#'), ('Dhamsaniya', '#', '3130006'), ('#', '3130006', '('), ('3130006', '(', 'PS'), ('(', 'PS', ')'), ('PS', ')', '\uf077'), (')', '\uf077', 'Unit'), ('\uf077', 'Unit', '1'), ('Unit', '1', '–'), ('1', '–', 'Basic'), ('–', 'Basic', 'Probability'), ('Basic', 'Probability', '‹'), ('Probability', '‹', '#'), ('‹', '#', '›'), ('#', '›', 'Prof.'), ('›', 'Prof.', 'Dixita'), ('Prof.', 'Dixita', 'B'), ('Dixita', 'B', 'Kagathara'), ('B', 'Kagathara', '#'), ('Kagathara', '#', '2170701'), ('#', '2170701', '('), ('2170701', '(', 'CD'), ('(', 'CD', ')'), ('CD', ')', '\uf077'), (')', '\uf077', 'Unit'), ('\uf077', 'Unit', '1–'), ('Unit', '1–', 'Introduction'), ('1–', 'Introduction', 'Compiler'), ('Introduction', 'Compiler', 'Design'), ('Compiler', 'Design', '‹'), ('Design', '‹', '#'), ('‹', '#', '›'), ('#', '›', 'Code'), ('›', 'Code', 'generation'), ('Code', 'generation', 'The'), ('generation', 'The', 'intermediate'), ('The', 'intermediate', 'code'), ('intermediate', 'code', 'instructions'), ('code', 'instructions', 'translated'), ('instructions', 'translated', 'sequence'), ('translated', 'sequence', 'machine'), ('sequence', 'machine', 'instruction'), ('machine', 'instruction', '.')]

>> POS Tags are: 
 [('Intermediate', 'NNP'), ('code', 'NN'), ('t1=', 'NN'), ('int', 'NN'), ('real', 'JJ'), ('(', '('), ('60', 'CD'), (')', ')'), ('t2=', 'NN'), ('id3', 'JJ'), ('*', 'NNP'), ('t1', 'NN'), ('t3=', 'NN'), ('t2', 'NN'), ('+', 'NNP'), ('id2', 'NN'), ('id1=', 'NN'), ('t3', 'NN'), ('Code', 'NNP'), ('optimization', 'NN'), ('t1=', 'NN'), ('id3', 'NN'), ('*', 'VBD'), ('60.0', 'CD'), ('id1', 'NN'), ('=', 'NNP'), ('id2', 'NN'), ('+', 'NNP'), ('t1', 'NN'), ('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', '#'), ('2170701', 'CD'), ('(', '('), ('CD', 'NN'), (')', ')'), ('\uf077', 'VBD'), ('Unit', 'NNP'), ('1', 'CD'), ('–', 'NNP'), ('Introduction', 'NNP'), ('Compiler', 'NNP'), ('Design', 'NNP'), ('‹', 'NNP'), ('#', '#'), ('›', 'NNP'), ('Phases', 'NNP'), ('compiler', 'NN'), ('Compiler', 'NNP'), ('Analysis', 'NNP'), ('phase', 'NN'), ('Synthesis', 'NNP'), ('phase', 'NN'), ('Lexical', 'NNP'), ('analysis', 'NN'), ('Syntax', 'NNP'), ('analysis', 'NN'), ('Semantic', 'NNP'), ('analysis', 'NN'), ('Intermediate', 'NNP'), ('code', 'NN'), ('generation', 'NN'), ('Code', 'NNP'), ('optimization', 'NN'), ('Code', 'NNP'), ('generation', 'NN'), ('Prof.', 'NNP'), ('Jay', 'NNP'), ('R', 'NNP'), ('Dhamsaniya', 'NNP'), ('#', '#'), ('3130006', 'CD'), ('(', '('), ('PS', 'NNP'), (')', ')'), ('\uf077', 'VBD'), ('Unit', 'NNP'), ('1', 'CD'), ('–', 'NNP'), ('Basic', 'NNP'), ('Probability', 'NNP'), ('‹', 'NNP'), ('#', '#'), ('›', 'NNP'), ('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', '#'), ('2170701', 'CD'), ('(', '('), ('CD', 'NN'), (')', ')'), ('\uf077', 'VBD'), ('Unit', 'NNP'), ('1–', 'CD'), ('Introduction', 'NNP'), ('Compiler', 'NNP'), ('Design', 'NNP'), ('‹', 'NNP'), ('#', '#'), ('›', 'NNP'), ('Code', 'NNP'), ('generation', 'NN'), ('The', 'DT'), ('intermediate', 'JJ'), ('code', 'NN'), ('instructions', 'NNS'), ('translated', 'VBD'), ('sequence', 'NN'), ('machine', 'NN'), ('instruction', 'NN'), ('.', '.')]

 (S
  (NP Intermediate/NNP code/NN t1=/NN int/NN)
  real/JJ
  (/(
  60/CD
  )/)
  (NP t2=/NN)
  (NP
    id3/JJ
    */NNP
    t1/NN
    t3=/NN
    t2/NN
    +/NNP
    id2/NN
    id1=/NN
    t3/NN
    Code/NNP
    optimization/NN
    t1=/NN
    id3/NN)
  */VBD
  60.0/CD
  (NP
    id1/NN
    =/NNP
    id2/NN
    +/NNP
    t1/NN
    Prof./NNP
    Dixita/NNP
    B/NNP
    Kagathara/NNP)
  #/#
  2170701/CD
  (/(
  (NP CD/NN)
  )/)
  /VBD
  (NP Unit/NNP)
  1/CD
  (NP –/NNP Introduction/NNP Compiler/NNP Design/NNP ‹/NNP)
  #/#
  (NP
    ›/NNP
    Phases/NNP
    compiler/NN
    Compiler/NNP
    Analysis/NNP
    phase/NN
    Synthesis/NNP
    phase/NN
    Lexical/NNP
    analysis/NN
    Syntax/NNP
    analysis/NN
    Semantic/NNP
    analysis/NN
    Intermediate/NNP
    code/NN
    generation/NN
    Code/NNP
    optimization/NN
    Code/NNP
    generation/NN
    Prof./NNP
    Jay/NNP
    R/NNP
    Dhamsaniya/NNP)
  #/#
  3130006/CD
  (/(
  (NP PS/NNP)
  )/)
  /VBD
  (NP Unit/NNP)
  1/CD
  (NP –/NNP Basic/NNP Probability/NNP ‹/NNP)
  #/#
  (NP ›/NNP Prof./NNP Dixita/NNP B/NNP Kagathara/NNP)
  #/#
  2170701/CD
  (/(
  (NP CD/NN)
  )/)
  /VBD
  (NP Unit/NNP)
  1–/CD
  (NP Introduction/NNP Compiler/NNP Design/NNP ‹/NNP)
  #/#
  (NP ›/NNP Code/NNP generation/NN)
  (NP The/DT intermediate/JJ code/NN instructions/NNS)
  translated/VBD
  (NP sequence/NN machine/NN instruction/NN)
  ./.) 


>> Noun Phrases are: 
 ['Intermediate code t1= int', 't2=', 'id3 * t1 t3= t2 + id2 id1= t3 Code optimization t1= id3', 'id1 = id2 + t1 Prof. Dixita B Kagathara', 'CD', 'Unit', '– Introduction Compiler Design ‹', '› Phases compiler Compiler Analysis phase Synthesis phase Lexical analysis Syntax analysis Semantic analysis Intermediate code generation Code optimization Code generation Prof. Jay R Dhamsaniya', 'PS', 'Unit', '– Basic Probability ‹', '› Prof. Dixita B Kagathara', 'CD', 'Unit', 'Introduction Compiler Design ‹', '› Code generation', 'The intermediate code instructions', 'sequence machine instruction']

>> Named Entities are: 
 [('GPE', 'Intermediate'), ('PERSON', 'Code'), ('ORGANIZATION', 'Unit'), ('ORGANIZATION', 'Compiler Analysis'), ('PERSON', 'Synthesis'), ('PERSON', 'Lexical'), ('PERSON', 'Syntax'), ('ORGANIZATION', 'Semantic'), ('ORGANIZATION', 'Intermediate'), ('PERSON', 'Code'), ('PERSON', 'Code'), ('ORGANIZATION', 'Unit'), ('ORGANIZATION', 'Unit')] 

>> Stemming using Porter Stemmer: 
 [('Intermediate', 'intermedi'), ('code', 'code'), ('t1=', 't1='), ('int', 'int'), ('real', 'real'), ('(', '('), ('60', '60'), (')', ')'), ('t2=', 't2='), ('id3', 'id3'), ('*', '*'), ('t1', 't1'), ('t3=', 't3='), ('t2', 't2'), ('+', '+'), ('id2', 'id2'), ('id1=', 'id1='), ('t3', 't3'), ('Code', 'code'), ('optimization', 'optim'), ('t1=', 't1='), ('id3', 'id3'), ('*', '*'), ('60.0', '60.0'), ('id1', 'id1'), ('=', '='), ('id2', 'id2'), ('+', '+'), ('t1', 't1'), ('Prof.', 'prof.'), ('Dixita', 'dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '–'), ('Introduction', 'introduct'), ('Compiler', 'compil'), ('Design', 'design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Phases', 'phase'), ('compiler', 'compil'), ('Compiler', 'compil'), ('Analysis', 'analysi'), ('phase', 'phase'), ('Synthesis', 'synthesi'), ('phase', 'phase'), ('Lexical', 'lexic'), ('analysis', 'analysi'), ('Syntax', 'syntax'), ('analysis', 'analysi'), ('Semantic', 'semant'), ('analysis', 'analysi'), ('Intermediate', 'intermedi'), ('code', 'code'), ('generation', 'gener'), ('Code', 'code'), ('optimization', 'optim'), ('Code', 'code'), ('generation', 'gener'), ('Prof.', 'prof.'), ('Jay', 'jay'), ('R', 'r'), ('Dhamsaniya', 'dhamsaniya'), ('#', '#'), ('3130006', '3130006'), ('(', '('), ('PS', 'ps'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '–'), ('Basic', 'basic'), ('Probability', 'probabl'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Prof.', 'prof.'), ('Dixita', 'dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1–', '1–'), ('Introduction', 'introduct'), ('Compiler', 'compil'), ('Design', 'design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Code', 'code'), ('generation', 'gener'), ('The', 'the'), ('intermediate', 'intermedi'), ('code', 'code'), ('instructions', 'instruct'), ('translated', 'translat'), ('sequence', 'sequenc'), ('machine', 'machin'), ('instruction', 'instruct'), ('.', '.')]

>> Stemming using Snowball Stemmer: 
 [('Intermediate', 'intermedi'), ('code', 'code'), ('t1=', 't1='), ('int', 'int'), ('real', 'real'), ('(', '('), ('60', '60'), (')', ')'), ('t2=', 't2='), ('id3', 'id3'), ('*', '*'), ('t1', 't1'), ('t3=', 't3='), ('t2', 't2'), ('+', '+'), ('id2', 'id2'), ('id1=', 'id1='), ('t3', 't3'), ('Code', 'code'), ('optimization', 'optim'), ('t1=', 't1='), ('id3', 'id3'), ('*', '*'), ('60.0', '60.0'), ('id1', 'id1'), ('=', '='), ('id2', 'id2'), ('+', '+'), ('t1', 't1'), ('Prof.', 'prof.'), ('Dixita', 'dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '–'), ('Introduction', 'introduct'), ('Compiler', 'compil'), ('Design', 'design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Phases', 'phase'), ('compiler', 'compil'), ('Compiler', 'compil'), ('Analysis', 'analysi'), ('phase', 'phase'), ('Synthesis', 'synthesi'), ('phase', 'phase'), ('Lexical', 'lexic'), ('analysis', 'analysi'), ('Syntax', 'syntax'), ('analysis', 'analysi'), ('Semantic', 'semant'), ('analysis', 'analysi'), ('Intermediate', 'intermedi'), ('code', 'code'), ('generation', 'generat'), ('Code', 'code'), ('optimization', 'optim'), ('Code', 'code'), ('generation', 'generat'), ('Prof.', 'prof.'), ('Jay', 'jay'), ('R', 'r'), ('Dhamsaniya', 'dhamsaniya'), ('#', '#'), ('3130006', '3130006'), ('(', '('), ('PS', 'ps'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '–'), ('Basic', 'basic'), ('Probability', 'probabl'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Prof.', 'prof.'), ('Dixita', 'dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1–', '1–'), ('Introduction', 'introduct'), ('Compiler', 'compil'), ('Design', 'design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Code', 'code'), ('generation', 'generat'), ('The', 'the'), ('intermediate', 'intermedi'), ('code', 'code'), ('instructions', 'instruct'), ('translated', 'translat'), ('sequence', 'sequenc'), ('machine', 'machin'), ('instruction', 'instruct'), ('.', '.')]

>> Lemmatization: 
 [('Intermediate', 'Intermediate'), ('code', 'code'), ('t1=', 't1='), ('int', 'int'), ('real', 'real'), ('(', '('), ('60', '60'), (')', ')'), ('t2=', 't2='), ('id3', 'id3'), ('*', '*'), ('t1', 't1'), ('t3=', 't3='), ('t2', 't2'), ('+', '+'), ('id2', 'id2'), ('id1=', 'id1='), ('t3', 't3'), ('Code', 'Code'), ('optimization', 'optimization'), ('t1=', 't1='), ('id3', 'id3'), ('*', '*'), ('60.0', '60.0'), ('id1', 'id1'), ('=', '='), ('id2', 'id2'), ('+', '+'), ('t1', 't1'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'CD'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'Unit'), ('1', '1'), ('–', '–'), ('Introduction', 'Introduction'), ('Compiler', 'Compiler'), ('Design', 'Design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Phases', 'Phases'), ('compiler', 'compiler'), ('Compiler', 'Compiler'), ('Analysis', 'Analysis'), ('phase', 'phase'), ('Synthesis', 'Synthesis'), ('phase', 'phase'), ('Lexical', 'Lexical'), ('analysis', 'analysis'), ('Syntax', 'Syntax'), ('analysis', 'analysis'), ('Semantic', 'Semantic'), ('analysis', 'analysis'), ('Intermediate', 'Intermediate'), ('code', 'code'), ('generation', 'generation'), ('Code', 'Code'), ('optimization', 'optimization'), ('Code', 'Code'), ('generation', 'generation'), ('Prof.', 'Prof.'), ('Jay', 'Jay'), ('R', 'R'), ('Dhamsaniya', 'Dhamsaniya'), ('#', '#'), ('3130006', '3130006'), ('(', '('), ('PS', 'PS'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'Unit'), ('1', '1'), ('–', '–'), ('Basic', 'Basic'), ('Probability', 'Probability'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'CD'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'Unit'), ('1–', '1–'), ('Introduction', 'Introduction'), ('Compiler', 'Compiler'), ('Design', 'Design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Code', 'Code'), ('generation', 'generation'), ('The', 'The'), ('intermediate', 'intermediate'), ('code', 'code'), ('instructions', 'instruction'), ('translated', 'translated'), ('sequence', 'sequence'), ('machine', 'machine'), ('instruction', 'instruction'), ('.', '.')]



============================ Sentence 25 =============================

Code generation  		MOV id3, R2 		MUL #60.0, R2 		MOV id2, R1 		ADD R2,R1 		MOV R1, id1    Code optimization  		t1= id3 * 60.0 		id1 = id2 + t1 Id3R2 Id2R1    Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1 – Introduction to Compiler Design ‹#›  Phases of compiler Symbol table Error detection and recovery Lexical analysis Code optimization Syntax analysis Semantic analysis Intermediate code  Code generation Target Program Source program   Analysis Phase Synthesis Phase  	Variable  Name	Type	Address 	Position	Float	0001 	Initial 	Float	0005 	Rate	Float	0009     Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1– Introduction to Compiler Design ‹#›  Exercise Write output of all the phases of compiler for following statements: x = b-c*2 I=p*n*r/100  	      Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1 – Introduction to Compiler Design ‹#›  Grouping of Phases        Front end & back end (Grouping of phases) Depends primarily on source language and largely independent of the target machine. 


>> Tokens are: 
 ['Code', 'generation', 'MOV', 'id3', ',', 'R2', 'MUL', '#', '60.0', ',', 'R2', 'MOV', 'id2', ',', 'R1', 'ADD', 'R2', ',', 'R1', 'MOV', 'R1', ',', 'id1', 'Code', 'optimization', 't1=', 'id3', '*', '60.0', 'id1', '=', 'id2', '+', 't1', 'Id3\uf0e0R2', 'Id2\uf0e0R1', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '1', '–', 'Introduction', 'Compiler', 'Design', '‹', '#', '›', 'Phases', 'compiler', 'Symbol', 'table', 'Error', 'detection', 'recovery', 'Lexical', 'analysis', 'Code', 'optimization', 'Syntax', 'analysis', 'Semantic', 'analysis', 'Intermediate', 'code', 'Code', 'generation', 'Target', 'Program', 'Source', 'program', 'Analysis', 'Phase', 'Synthesis', 'Phase', 'Variable', 'Name', 'Type', 'Address', 'Position', 'Float', '0001', 'Initial', 'Float', '0005', 'Rate', 'Float', '0009', 'Prof.', 'Jay', 'R', 'Dhamsaniya', '#', '3130006', '(', 'PS', ')', '\uf077', 'Unit', '1', '–', 'Basic', 'Probability', '‹', '#', '›', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '1–', 'Introduction', 'Compiler', 'Design', '‹', '#', '›', 'Exercise', 'Write', 'output', 'phases', 'compiler', 'following', 'statements', ':', 'x', '=', 'b-c', '*', '2', 'I=p', '*', 'n', '*', 'r/100', 'Prof.', 'Jay', 'R', 'Dhamsaniya', '#', '3130006', '(', 'PS', ')', '\uf077', 'Unit', '1', '–', 'Basic', 'Probability', '‹', '#', '›', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '1', '–', 'Introduction', 'Compiler', 'Design', '‹', '#', '›', 'Grouping', 'Phases', 'Front', 'end', '&', 'back', 'end', '(', 'Grouping', 'phases', ')', 'Depends', 'primarily', 'source', 'language', 'largely', 'independent', 'target', 'machine', '.']

>> Bigrams are: 
 [('Code', 'generation'), ('generation', 'MOV'), ('MOV', 'id3'), ('id3', ','), (',', 'R2'), ('R2', 'MUL'), ('MUL', '#'), ('#', '60.0'), ('60.0', ','), (',', 'R2'), ('R2', 'MOV'), ('MOV', 'id2'), ('id2', ','), (',', 'R1'), ('R1', 'ADD'), ('ADD', 'R2'), ('R2', ','), (',', 'R1'), ('R1', 'MOV'), ('MOV', 'R1'), ('R1', ','), (',', 'id1'), ('id1', 'Code'), ('Code', 'optimization'), ('optimization', 't1='), ('t1=', 'id3'), ('id3', '*'), ('*', '60.0'), ('60.0', 'id1'), ('id1', '='), ('=', 'id2'), ('id2', '+'), ('+', 't1'), ('t1', 'Id3\uf0e0R2'), ('Id3\uf0e0R2', 'Id2\uf0e0R1'), ('Id2\uf0e0R1', 'Prof.'), ('Prof.', 'Dixita'), ('Dixita', 'B'), ('B', 'Kagathara'), ('Kagathara', '#'), ('#', '2170701'), ('2170701', '('), ('(', 'CD'), ('CD', ')'), (')', '\uf077'), ('\uf077', 'Unit'), ('Unit', '1'), ('1', '–'), ('–', 'Introduction'), ('Introduction', 'Compiler'), ('Compiler', 'Design'), ('Design', '‹'), ('‹', '#'), ('#', '›'), ('›', 'Phases'), ('Phases', 'compiler'), ('compiler', 'Symbol'), ('Symbol', 'table'), ('table', 'Error'), ('Error', 'detection'), ('detection', 'recovery'), ('recovery', 'Lexical'), ('Lexical', 'analysis'), ('analysis', 'Code'), ('Code', 'optimization'), ('optimization', 'Syntax'), ('Syntax', 'analysis'), ('analysis', 'Semantic'), ('Semantic', 'analysis'), ('analysis', 'Intermediate'), ('Intermediate', 'code'), ('code', 'Code'), ('Code', 'generation'), ('generation', 'Target'), ('Target', 'Program'), ('Program', 'Source'), ('Source', 'program'), ('program', 'Analysis'), ('Analysis', 'Phase'), ('Phase', 'Synthesis'), ('Synthesis', 'Phase'), ('Phase', 'Variable'), ('Variable', 'Name'), ('Name', 'Type'), ('Type', 'Address'), ('Address', 'Position'), ('Position', 'Float'), ('Float', '0001'), ('0001', 'Initial'), ('Initial', 'Float'), ('Float', '0005'), ('0005', 'Rate'), ('Rate', 'Float'), ('Float', '0009'), ('0009', 'Prof.'), ('Prof.', 'Jay'), ('Jay', 'R'), ('R', 'Dhamsaniya'), ('Dhamsaniya', '#'), ('#', '3130006'), ('3130006', '('), ('(', 'PS'), ('PS', ')'), (')', '\uf077'), ('\uf077', 'Unit'), ('Unit', '1'), ('1', '–'), ('–', 'Basic'), ('Basic', 'Probability'), ('Probability', '‹'), ('‹', '#'), ('#', '›'), ('›', 'Prof.'), ('Prof.', 'Dixita'), ('Dixita', 'B'), ('B', 'Kagathara'), ('Kagathara', '#'), ('#', '2170701'), ('2170701', '('), ('(', 'CD'), ('CD', ')'), (')', '\uf077'), ('\uf077', 'Unit'), ('Unit', '1–'), ('1–', 'Introduction'), ('Introduction', 'Compiler'), ('Compiler', 'Design'), ('Design', '‹'), ('‹', '#'), ('#', '›'), ('›', 'Exercise'), ('Exercise', 'Write'), ('Write', 'output'), ('output', 'phases'), ('phases', 'compiler'), ('compiler', 'following'), ('following', 'statements'), ('statements', ':'), (':', 'x'), ('x', '='), ('=', 'b-c'), ('b-c', '*'), ('*', '2'), ('2', 'I=p'), ('I=p', '*'), ('*', 'n'), ('n', '*'), ('*', 'r/100'), ('r/100', 'Prof.'), ('Prof.', 'Jay'), ('Jay', 'R'), ('R', 'Dhamsaniya'), ('Dhamsaniya', '#'), ('#', '3130006'), ('3130006', '('), ('(', 'PS'), ('PS', ')'), (')', '\uf077'), ('\uf077', 'Unit'), ('Unit', '1'), ('1', '–'), ('–', 'Basic'), ('Basic', 'Probability'), ('Probability', '‹'), ('‹', '#'), ('#', '›'), ('›', 'Prof.'), ('Prof.', 'Dixita'), ('Dixita', 'B'), ('B', 'Kagathara'), ('Kagathara', '#'), ('#', '2170701'), ('2170701', '('), ('(', 'CD'), ('CD', ')'), (')', '\uf077'), ('\uf077', 'Unit'), ('Unit', '1'), ('1', '–'), ('–', 'Introduction'), ('Introduction', 'Compiler'), ('Compiler', 'Design'), ('Design', '‹'), ('‹', '#'), ('#', '›'), ('›', 'Grouping'), ('Grouping', 'Phases'), ('Phases', 'Front'), ('Front', 'end'), ('end', '&'), ('&', 'back'), ('back', 'end'), ('end', '('), ('(', 'Grouping'), ('Grouping', 'phases'), ('phases', ')'), (')', 'Depends'), ('Depends', 'primarily'), ('primarily', 'source'), ('source', 'language'), ('language', 'largely'), ('largely', 'independent'), ('independent', 'target'), ('target', 'machine'), ('machine', '.')]

>> Trigrams are: 
 [('Code', 'generation', 'MOV'), ('generation', 'MOV', 'id3'), ('MOV', 'id3', ','), ('id3', ',', 'R2'), (',', 'R2', 'MUL'), ('R2', 'MUL', '#'), ('MUL', '#', '60.0'), ('#', '60.0', ','), ('60.0', ',', 'R2'), (',', 'R2', 'MOV'), ('R2', 'MOV', 'id2'), ('MOV', 'id2', ','), ('id2', ',', 'R1'), (',', 'R1', 'ADD'), ('R1', 'ADD', 'R2'), ('ADD', 'R2', ','), ('R2', ',', 'R1'), (',', 'R1', 'MOV'), ('R1', 'MOV', 'R1'), ('MOV', 'R1', ','), ('R1', ',', 'id1'), (',', 'id1', 'Code'), ('id1', 'Code', 'optimization'), ('Code', 'optimization', 't1='), ('optimization', 't1=', 'id3'), ('t1=', 'id3', '*'), ('id3', '*', '60.0'), ('*', '60.0', 'id1'), ('60.0', 'id1', '='), ('id1', '=', 'id2'), ('=', 'id2', '+'), ('id2', '+', 't1'), ('+', 't1', 'Id3\uf0e0R2'), ('t1', 'Id3\uf0e0R2', 'Id2\uf0e0R1'), ('Id3\uf0e0R2', 'Id2\uf0e0R1', 'Prof.'), ('Id2\uf0e0R1', 'Prof.', 'Dixita'), ('Prof.', 'Dixita', 'B'), ('Dixita', 'B', 'Kagathara'), ('B', 'Kagathara', '#'), ('Kagathara', '#', '2170701'), ('#', '2170701', '('), ('2170701', '(', 'CD'), ('(', 'CD', ')'), ('CD', ')', '\uf077'), (')', '\uf077', 'Unit'), ('\uf077', 'Unit', '1'), ('Unit', '1', '–'), ('1', '–', 'Introduction'), ('–', 'Introduction', 'Compiler'), ('Introduction', 'Compiler', 'Design'), ('Compiler', 'Design', '‹'), ('Design', '‹', '#'), ('‹', '#', '›'), ('#', '›', 'Phases'), ('›', 'Phases', 'compiler'), ('Phases', 'compiler', 'Symbol'), ('compiler', 'Symbol', 'table'), ('Symbol', 'table', 'Error'), ('table', 'Error', 'detection'), ('Error', 'detection', 'recovery'), ('detection', 'recovery', 'Lexical'), ('recovery', 'Lexical', 'analysis'), ('Lexical', 'analysis', 'Code'), ('analysis', 'Code', 'optimization'), ('Code', 'optimization', 'Syntax'), ('optimization', 'Syntax', 'analysis'), ('Syntax', 'analysis', 'Semantic'), ('analysis', 'Semantic', 'analysis'), ('Semantic', 'analysis', 'Intermediate'), ('analysis', 'Intermediate', 'code'), ('Intermediate', 'code', 'Code'), ('code', 'Code', 'generation'), ('Code', 'generation', 'Target'), ('generation', 'Target', 'Program'), ('Target', 'Program', 'Source'), ('Program', 'Source', 'program'), ('Source', 'program', 'Analysis'), ('program', 'Analysis', 'Phase'), ('Analysis', 'Phase', 'Synthesis'), ('Phase', 'Synthesis', 'Phase'), ('Synthesis', 'Phase', 'Variable'), ('Phase', 'Variable', 'Name'), ('Variable', 'Name', 'Type'), ('Name', 'Type', 'Address'), ('Type', 'Address', 'Position'), ('Address', 'Position', 'Float'), ('Position', 'Float', '0001'), ('Float', '0001', 'Initial'), ('0001', 'Initial', 'Float'), ('Initial', 'Float', '0005'), ('Float', '0005', 'Rate'), ('0005', 'Rate', 'Float'), ('Rate', 'Float', '0009'), ('Float', '0009', 'Prof.'), ('0009', 'Prof.', 'Jay'), ('Prof.', 'Jay', 'R'), ('Jay', 'R', 'Dhamsaniya'), ('R', 'Dhamsaniya', '#'), ('Dhamsaniya', '#', '3130006'), ('#', '3130006', '('), ('3130006', '(', 'PS'), ('(', 'PS', ')'), ('PS', ')', '\uf077'), (')', '\uf077', 'Unit'), ('\uf077', 'Unit', '1'), ('Unit', '1', '–'), ('1', '–', 'Basic'), ('–', 'Basic', 'Probability'), ('Basic', 'Probability', '‹'), ('Probability', '‹', '#'), ('‹', '#', '›'), ('#', '›', 'Prof.'), ('›', 'Prof.', 'Dixita'), ('Prof.', 'Dixita', 'B'), ('Dixita', 'B', 'Kagathara'), ('B', 'Kagathara', '#'), ('Kagathara', '#', '2170701'), ('#', '2170701', '('), ('2170701', '(', 'CD'), ('(', 'CD', ')'), ('CD', ')', '\uf077'), (')', '\uf077', 'Unit'), ('\uf077', 'Unit', '1–'), ('Unit', '1–', 'Introduction'), ('1–', 'Introduction', 'Compiler'), ('Introduction', 'Compiler', 'Design'), ('Compiler', 'Design', '‹'), ('Design', '‹', '#'), ('‹', '#', '›'), ('#', '›', 'Exercise'), ('›', 'Exercise', 'Write'), ('Exercise', 'Write', 'output'), ('Write', 'output', 'phases'), ('output', 'phases', 'compiler'), ('phases', 'compiler', 'following'), ('compiler', 'following', 'statements'), ('following', 'statements', ':'), ('statements', ':', 'x'), (':', 'x', '='), ('x', '=', 'b-c'), ('=', 'b-c', '*'), ('b-c', '*', '2'), ('*', '2', 'I=p'), ('2', 'I=p', '*'), ('I=p', '*', 'n'), ('*', 'n', '*'), ('n', '*', 'r/100'), ('*', 'r/100', 'Prof.'), ('r/100', 'Prof.', 'Jay'), ('Prof.', 'Jay', 'R'), ('Jay', 'R', 'Dhamsaniya'), ('R', 'Dhamsaniya', '#'), ('Dhamsaniya', '#', '3130006'), ('#', '3130006', '('), ('3130006', '(', 'PS'), ('(', 'PS', ')'), ('PS', ')', '\uf077'), (')', '\uf077', 'Unit'), ('\uf077', 'Unit', '1'), ('Unit', '1', '–'), ('1', '–', 'Basic'), ('–', 'Basic', 'Probability'), ('Basic', 'Probability', '‹'), ('Probability', '‹', '#'), ('‹', '#', '›'), ('#', '›', 'Prof.'), ('›', 'Prof.', 'Dixita'), ('Prof.', 'Dixita', 'B'), ('Dixita', 'B', 'Kagathara'), ('B', 'Kagathara', '#'), ('Kagathara', '#', '2170701'), ('#', '2170701', '('), ('2170701', '(', 'CD'), ('(', 'CD', ')'), ('CD', ')', '\uf077'), (')', '\uf077', 'Unit'), ('\uf077', 'Unit', '1'), ('Unit', '1', '–'), ('1', '–', 'Introduction'), ('–', 'Introduction', 'Compiler'), ('Introduction', 'Compiler', 'Design'), ('Compiler', 'Design', '‹'), ('Design', '‹', '#'), ('‹', '#', '›'), ('#', '›', 'Grouping'), ('›', 'Grouping', 'Phases'), ('Grouping', 'Phases', 'Front'), ('Phases', 'Front', 'end'), ('Front', 'end', '&'), ('end', '&', 'back'), ('&', 'back', 'end'), ('back', 'end', '('), ('end', '(', 'Grouping'), ('(', 'Grouping', 'phases'), ('Grouping', 'phases', ')'), ('phases', ')', 'Depends'), (')', 'Depends', 'primarily'), ('Depends', 'primarily', 'source'), ('primarily', 'source', 'language'), ('source', 'language', 'largely'), ('language', 'largely', 'independent'), ('largely', 'independent', 'target'), ('independent', 'target', 'machine'), ('target', 'machine', '.')]

>> POS Tags are: 
 [('Code', 'NNP'), ('generation', 'NN'), ('MOV', 'NNP'), ('id3', 'NN'), (',', ','), ('R2', 'NNP'), ('MUL', 'NNP'), ('#', '#'), ('60.0', 'CD'), (',', ','), ('R2', 'NNP'), ('MOV', 'NNP'), ('id2', 'NN'), (',', ','), ('R1', 'NNP'), ('ADD', 'NNP'), ('R2', 'NNP'), (',', ','), ('R1', 'NNP'), ('MOV', 'NNP'), ('R1', 'NNP'), (',', ','), ('id1', 'JJ'), ('Code', 'NNP'), ('optimization', 'NN'), ('t1=', 'NN'), ('id3', 'NN'), ('*', 'VBD'), ('60.0', 'CD'), ('id1', 'NN'), ('=', 'NNP'), ('id2', 'NN'), ('+', 'NNP'), ('t1', 'NN'), ('Id3\uf0e0R2', 'NNP'), ('Id2\uf0e0R1', 'NNP'), ('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', '#'), ('2170701', 'CD'), ('(', '('), ('CD', 'NN'), (')', ')'), ('\uf077', 'VBD'), ('Unit', 'NNP'), ('1', 'CD'), ('–', 'NNP'), ('Introduction', 'NNP'), ('Compiler', 'NNP'), ('Design', 'NNP'), ('‹', 'NNP'), ('#', '#'), ('›', 'NNP'), ('Phases', 'NNP'), ('compiler', 'NN'), ('Symbol', 'NNP'), ('table', 'NN'), ('Error', 'NNP'), ('detection', 'NN'), ('recovery', 'NN'), ('Lexical', 'NNP'), ('analysis', 'NN'), ('Code', 'NNP'), ('optimization', 'NN'), ('Syntax', 'NNP'), ('analysis', 'NN'), ('Semantic', 'NNP'), ('analysis', 'NN'), ('Intermediate', 'NNP'), ('code', 'NN'), ('Code', 'NNP'), ('generation', 'NN'), ('Target', 'NNP'), ('Program', 'NNP'), ('Source', 'NNP'), ('program', 'NN'), ('Analysis', 'NNP'), ('Phase', 'NNP'), ('Synthesis', 'NNP'), ('Phase', 'NNP'), ('Variable', 'NNP'), ('Name', 'NNP'), ('Type', 'NNP'), ('Address', 'NNP'), ('Position', 'NNP'), ('Float', 'NNP'), ('0001', 'CD'), ('Initial', 'NNP'), ('Float', 'NNP'), ('0005', 'CD'), ('Rate', 'NNP'), ('Float', 'NNP'), ('0009', 'CD'), ('Prof.', 'NNP'), ('Jay', 'NNP'), ('R', 'NNP'), ('Dhamsaniya', 'NNP'), ('#', '#'), ('3130006', 'CD'), ('(', '('), ('PS', 'NNP'), (')', ')'), ('\uf077', 'VBD'), ('Unit', 'NNP'), ('1', 'CD'), ('–', 'NNP'), ('Basic', 'NNP'), ('Probability', 'NNP'), ('‹', 'NNP'), ('#', '#'), ('›', 'NNP'), ('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', '#'), ('2170701', 'CD'), ('(', '('), ('CD', 'NN'), (')', ')'), ('\uf077', 'VBD'), ('Unit', 'NNP'), ('1–', 'CD'), ('Introduction', 'NNP'), ('Compiler', 'NNP'), ('Design', 'NNP'), ('‹', 'NNP'), ('#', '#'), ('›', 'NNP'), ('Exercise', 'NNP'), ('Write', 'NNP'), ('output', 'NN'), ('phases', 'NNS'), ('compiler', 'VBP'), ('following', 'VBG'), ('statements', 'NNS'), (':', ':'), ('x', 'JJ'), ('=', 'JJ'), ('b-c', 'JJ'), ('*', 'NN'), ('2', 'CD'), ('I=p', 'NNP'), ('*', 'NNP'), ('n', 'MD'), ('*', 'VB'), ('r/100', 'NN'), ('Prof.', 'NNP'), ('Jay', 'NNP'), ('R', 'NNP'), ('Dhamsaniya', 'NNP'), ('#', '#'), ('3130006', 'CD'), ('(', '('), ('PS', 'NNP'), (')', ')'), ('\uf077', 'VBD'), ('Unit', 'NNP'), ('1', 'CD'), ('–', 'NNP'), ('Basic', 'NNP'), ('Probability', 'NNP'), ('‹', 'NNP'), ('#', '#'), ('›', 'NNP'), ('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', '#'), ('2170701', 'CD'), ('(', '('), ('CD', 'NN'), (')', ')'), ('\uf077', 'VBD'), ('Unit', 'NNP'), ('1', 'CD'), ('–', 'NNP'), ('Introduction', 'NNP'), ('Compiler', 'NNP'), ('Design', 'NNP'), ('‹', 'NNP'), ('#', '#'), ('›', 'NNP'), ('Grouping', 'NNP'), ('Phases', 'NNP'), ('Front', 'NNP'), ('end', 'NN'), ('&', 'CC'), ('back', 'JJ'), ('end', 'NN'), ('(', '('), ('Grouping', 'NNP'), ('phases', 'NNS'), (')', ')'), ('Depends', 'VBZ'), ('primarily', 'RB'), ('source', 'NN'), ('language', 'NN'), ('largely', 'RB'), ('independent', 'JJ'), ('target', 'NN'), ('machine', 'NN'), ('.', '.')]

 (S
  (NP Code/NNP generation/NN MOV/NNP id3/NN)
  ,/,
  (NP R2/NNP MUL/NNP)
  #/#
  60.0/CD
  ,/,
  (NP R2/NNP MOV/NNP id2/NN)
  ,/,
  (NP R1/NNP ADD/NNP R2/NNP)
  ,/,
  (NP R1/NNP MOV/NNP R1/NNP)
  ,/,
  (NP id1/JJ Code/NNP optimization/NN t1=/NN id3/NN)
  */VBD
  60.0/CD
  (NP
    id1/NN
    =/NNP
    id2/NN
    +/NNP
    t1/NN
    Id3R2/NNP
    Id2R1/NNP
    Prof./NNP
    Dixita/NNP
    B/NNP
    Kagathara/NNP)
  #/#
  2170701/CD
  (/(
  (NP CD/NN)
  )/)
  /VBD
  (NP Unit/NNP)
  1/CD
  (NP –/NNP Introduction/NNP Compiler/NNP Design/NNP ‹/NNP)
  #/#
  (NP
    ›/NNP
    Phases/NNP
    compiler/NN
    Symbol/NNP
    table/NN
    Error/NNP
    detection/NN
    recovery/NN
    Lexical/NNP
    analysis/NN
    Code/NNP
    optimization/NN
    Syntax/NNP
    analysis/NN
    Semantic/NNP
    analysis/NN
    Intermediate/NNP
    code/NN
    Code/NNP
    generation/NN
    Target/NNP
    Program/NNP
    Source/NNP
    program/NN
    Analysis/NNP
    Phase/NNP
    Synthesis/NNP
    Phase/NNP
    Variable/NNP
    Name/NNP
    Type/NNP
    Address/NNP
    Position/NNP
    Float/NNP)
  0001/CD
  (NP Initial/NNP Float/NNP)
  0005/CD
  (NP Rate/NNP Float/NNP)
  0009/CD
  (NP Prof./NNP Jay/NNP R/NNP Dhamsaniya/NNP)
  #/#
  3130006/CD
  (/(
  (NP PS/NNP)
  )/)
  /VBD
  (NP Unit/NNP)
  1/CD
  (NP –/NNP Basic/NNP Probability/NNP ‹/NNP)
  #/#
  (NP ›/NNP Prof./NNP Dixita/NNP B/NNP Kagathara/NNP)
  #/#
  2170701/CD
  (/(
  (NP CD/NN)
  )/)
  /VBD
  (NP Unit/NNP)
  1–/CD
  (NP Introduction/NNP Compiler/NNP Design/NNP ‹/NNP)
  #/#
  (NP ›/NNP Exercise/NNP Write/NNP output/NN phases/NNS)
  compiler/VBP
  following/VBG
  (NP statements/NNS)
  :/:
  (NP x/JJ =/JJ b-c/JJ */NN)
  2/CD
  (NP I=p/NNP */NNP)
  n/MD
  */VB
  (NP r/100/NN Prof./NNP Jay/NNP R/NNP Dhamsaniya/NNP)
  #/#
  3130006/CD
  (/(
  (NP PS/NNP)
  )/)
  /VBD
  (NP Unit/NNP)
  1/CD
  (NP –/NNP Basic/NNP Probability/NNP ‹/NNP)
  #/#
  (NP ›/NNP Prof./NNP Dixita/NNP B/NNP Kagathara/NNP)
  #/#
  2170701/CD
  (/(
  (NP CD/NN)
  )/)
  /VBD
  (NP Unit/NNP)
  1/CD
  (NP –/NNP Introduction/NNP Compiler/NNP Design/NNP ‹/NNP)
  #/#
  (NP ›/NNP Grouping/NNP Phases/NNP Front/NNP end/NN)
  &/CC
  (NP back/JJ end/NN)
  (/(
  (NP Grouping/NNP phases/NNS)
  )/)
  Depends/VBZ
  primarily/RB
  (NP source/NN language/NN)
  largely/RB
  (NP independent/JJ target/NN machine/NN)
  ./.) 


>> Noun Phrases are: 
 ['Code generation MOV id3', 'R2 MUL', 'R2 MOV id2', 'R1 ADD R2', 'R1 MOV R1', 'id1 Code optimization t1= id3', 'id1 = id2 + t1 Id3\uf0e0R2 Id2\uf0e0R1 Prof. Dixita B Kagathara', 'CD', 'Unit', '– Introduction Compiler Design ‹', '› Phases compiler Symbol table Error detection recovery Lexical analysis Code optimization Syntax analysis Semantic analysis Intermediate code Code generation Target Program Source program Analysis Phase Synthesis Phase Variable Name Type Address Position Float', 'Initial Float', 'Rate Float', 'Prof. Jay R Dhamsaniya', 'PS', 'Unit', '– Basic Probability ‹', '› Prof. Dixita B Kagathara', 'CD', 'Unit', 'Introduction Compiler Design ‹', '› Exercise Write output phases', 'statements', 'x = b-c *', 'I=p *', 'r/100 Prof. Jay R Dhamsaniya', 'PS', 'Unit', '– Basic Probability ‹', '› Prof. Dixita B Kagathara', 'CD', 'Unit', '– Introduction Compiler Design ‹', '› Grouping Phases Front end', 'back end', 'Grouping phases', 'source language', 'independent target machine']

>> Named Entities are: 
 [('GPE', 'Code'), ('ORGANIZATION', 'MOV'), ('PERSON', 'R2 MUL'), ('PERSON', 'R2 MOV'), ('PERSON', 'R1 ADD R2'), ('PERSON', 'R1 MOV R1'), ('ORGANIZATION', 'Unit'), ('PERSON', 'Symbol'), ('PERSON', 'Error'), ('PERSON', 'Lexical'), ('PERSON', 'Code'), ('PERSON', 'Syntax'), ('ORGANIZATION', 'Semantic'), ('ORGANIZATION', 'Intermediate'), ('PERSON', 'Code'), ('PERSON', 'Target Program Source'), ('PERSON', 'Analysis Phase Synthesis Phase Variable Name Type Address Position'), ('ORGANIZATION', 'Unit'), ('ORGANIZATION', 'Unit'), ('ORGANIZATION', 'Unit'), ('ORGANIZATION', 'Unit'), ('PERSON', 'Phases Front')] 

>> Stemming using Porter Stemmer: 
 [('Code', 'code'), ('generation', 'gener'), ('MOV', 'mov'), ('id3', 'id3'), (',', ','), ('R2', 'r2'), ('MUL', 'mul'), ('#', '#'), ('60.0', '60.0'), (',', ','), ('R2', 'r2'), ('MOV', 'mov'), ('id2', 'id2'), (',', ','), ('R1', 'r1'), ('ADD', 'add'), ('R2', 'r2'), (',', ','), ('R1', 'r1'), ('MOV', 'mov'), ('R1', 'r1'), (',', ','), ('id1', 'id1'), ('Code', 'code'), ('optimization', 'optim'), ('t1=', 't1='), ('id3', 'id3'), ('*', '*'), ('60.0', '60.0'), ('id1', 'id1'), ('=', '='), ('id2', 'id2'), ('+', '+'), ('t1', 't1'), ('Id3\uf0e0R2', 'id3\uf0e0r2'), ('Id2\uf0e0R1', 'id2\uf0e0r1'), ('Prof.', 'prof.'), ('Dixita', 'dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '–'), ('Introduction', 'introduct'), ('Compiler', 'compil'), ('Design', 'design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Phases', 'phase'), ('compiler', 'compil'), ('Symbol', 'symbol'), ('table', 'tabl'), ('Error', 'error'), ('detection', 'detect'), ('recovery', 'recoveri'), ('Lexical', 'lexic'), ('analysis', 'analysi'), ('Code', 'code'), ('optimization', 'optim'), ('Syntax', 'syntax'), ('analysis', 'analysi'), ('Semantic', 'semant'), ('analysis', 'analysi'), ('Intermediate', 'intermedi'), ('code', 'code'), ('Code', 'code'), ('generation', 'gener'), ('Target', 'target'), ('Program', 'program'), ('Source', 'sourc'), ('program', 'program'), ('Analysis', 'analysi'), ('Phase', 'phase'), ('Synthesis', 'synthesi'), ('Phase', 'phase'), ('Variable', 'variabl'), ('Name', 'name'), ('Type', 'type'), ('Address', 'address'), ('Position', 'posit'), ('Float', 'float'), ('0001', '0001'), ('Initial', 'initi'), ('Float', 'float'), ('0005', '0005'), ('Rate', 'rate'), ('Float', 'float'), ('0009', '0009'), ('Prof.', 'prof.'), ('Jay', 'jay'), ('R', 'r'), ('Dhamsaniya', 'dhamsaniya'), ('#', '#'), ('3130006', '3130006'), ('(', '('), ('PS', 'ps'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '–'), ('Basic', 'basic'), ('Probability', 'probabl'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Prof.', 'prof.'), ('Dixita', 'dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1–', '1–'), ('Introduction', 'introduct'), ('Compiler', 'compil'), ('Design', 'design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Exercise', 'exercis'), ('Write', 'write'), ('output', 'output'), ('phases', 'phase'), ('compiler', 'compil'), ('following', 'follow'), ('statements', 'statement'), (':', ':'), ('x', 'x'), ('=', '='), ('b-c', 'b-c'), ('*', '*'), ('2', '2'), ('I=p', 'i=p'), ('*', '*'), ('n', 'n'), ('*', '*'), ('r/100', 'r/100'), ('Prof.', 'prof.'), ('Jay', 'jay'), ('R', 'r'), ('Dhamsaniya', 'dhamsaniya'), ('#', '#'), ('3130006', '3130006'), ('(', '('), ('PS', 'ps'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '–'), ('Basic', 'basic'), ('Probability', 'probabl'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Prof.', 'prof.'), ('Dixita', 'dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '–'), ('Introduction', 'introduct'), ('Compiler', 'compil'), ('Design', 'design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Grouping', 'group'), ('Phases', 'phase'), ('Front', 'front'), ('end', 'end'), ('&', '&'), ('back', 'back'), ('end', 'end'), ('(', '('), ('Grouping', 'group'), ('phases', 'phase'), (')', ')'), ('Depends', 'depend'), ('primarily', 'primarili'), ('source', 'sourc'), ('language', 'languag'), ('largely', 'larg'), ('independent', 'independ'), ('target', 'target'), ('machine', 'machin'), ('.', '.')]

>> Stemming using Snowball Stemmer: 
 [('Code', 'code'), ('generation', 'generat'), ('MOV', 'mov'), ('id3', 'id3'), (',', ','), ('R2', 'r2'), ('MUL', 'mul'), ('#', '#'), ('60.0', '60.0'), (',', ','), ('R2', 'r2'), ('MOV', 'mov'), ('id2', 'id2'), (',', ','), ('R1', 'r1'), ('ADD', 'add'), ('R2', 'r2'), (',', ','), ('R1', 'r1'), ('MOV', 'mov'), ('R1', 'r1'), (',', ','), ('id1', 'id1'), ('Code', 'code'), ('optimization', 'optim'), ('t1=', 't1='), ('id3', 'id3'), ('*', '*'), ('60.0', '60.0'), ('id1', 'id1'), ('=', '='), ('id2', 'id2'), ('+', '+'), ('t1', 't1'), ('Id3\uf0e0R2', 'id3\uf0e0r2'), ('Id2\uf0e0R1', 'id2\uf0e0r1'), ('Prof.', 'prof.'), ('Dixita', 'dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '–'), ('Introduction', 'introduct'), ('Compiler', 'compil'), ('Design', 'design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Phases', 'phase'), ('compiler', 'compil'), ('Symbol', 'symbol'), ('table', 'tabl'), ('Error', 'error'), ('detection', 'detect'), ('recovery', 'recoveri'), ('Lexical', 'lexic'), ('analysis', 'analysi'), ('Code', 'code'), ('optimization', 'optim'), ('Syntax', 'syntax'), ('analysis', 'analysi'), ('Semantic', 'semant'), ('analysis', 'analysi'), ('Intermediate', 'intermedi'), ('code', 'code'), ('Code', 'code'), ('generation', 'generat'), ('Target', 'target'), ('Program', 'program'), ('Source', 'sourc'), ('program', 'program'), ('Analysis', 'analysi'), ('Phase', 'phase'), ('Synthesis', 'synthesi'), ('Phase', 'phase'), ('Variable', 'variabl'), ('Name', 'name'), ('Type', 'type'), ('Address', 'address'), ('Position', 'posit'), ('Float', 'float'), ('0001', '0001'), ('Initial', 'initi'), ('Float', 'float'), ('0005', '0005'), ('Rate', 'rate'), ('Float', 'float'), ('0009', '0009'), ('Prof.', 'prof.'), ('Jay', 'jay'), ('R', 'r'), ('Dhamsaniya', 'dhamsaniya'), ('#', '#'), ('3130006', '3130006'), ('(', '('), ('PS', 'ps'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '–'), ('Basic', 'basic'), ('Probability', 'probabl'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Prof.', 'prof.'), ('Dixita', 'dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1–', '1–'), ('Introduction', 'introduct'), ('Compiler', 'compil'), ('Design', 'design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Exercise', 'exercis'), ('Write', 'write'), ('output', 'output'), ('phases', 'phase'), ('compiler', 'compil'), ('following', 'follow'), ('statements', 'statement'), (':', ':'), ('x', 'x'), ('=', '='), ('b-c', 'b-c'), ('*', '*'), ('2', '2'), ('I=p', 'i=p'), ('*', '*'), ('n', 'n'), ('*', '*'), ('r/100', 'r/100'), ('Prof.', 'prof.'), ('Jay', 'jay'), ('R', 'r'), ('Dhamsaniya', 'dhamsaniya'), ('#', '#'), ('3130006', '3130006'), ('(', '('), ('PS', 'ps'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '–'), ('Basic', 'basic'), ('Probability', 'probabl'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Prof.', 'prof.'), ('Dixita', 'dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '–'), ('Introduction', 'introduct'), ('Compiler', 'compil'), ('Design', 'design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Grouping', 'group'), ('Phases', 'phase'), ('Front', 'front'), ('end', 'end'), ('&', '&'), ('back', 'back'), ('end', 'end'), ('(', '('), ('Grouping', 'group'), ('phases', 'phase'), (')', ')'), ('Depends', 'depend'), ('primarily', 'primarili'), ('source', 'sourc'), ('language', 'languag'), ('largely', 'larg'), ('independent', 'independ'), ('target', 'target'), ('machine', 'machin'), ('.', '.')]

>> Lemmatization: 
 [('Code', 'Code'), ('generation', 'generation'), ('MOV', 'MOV'), ('id3', 'id3'), (',', ','), ('R2', 'R2'), ('MUL', 'MUL'), ('#', '#'), ('60.0', '60.0'), (',', ','), ('R2', 'R2'), ('MOV', 'MOV'), ('id2', 'id2'), (',', ','), ('R1', 'R1'), ('ADD', 'ADD'), ('R2', 'R2'), (',', ','), ('R1', 'R1'), ('MOV', 'MOV'), ('R1', 'R1'), (',', ','), ('id1', 'id1'), ('Code', 'Code'), ('optimization', 'optimization'), ('t1=', 't1='), ('id3', 'id3'), ('*', '*'), ('60.0', '60.0'), ('id1', 'id1'), ('=', '='), ('id2', 'id2'), ('+', '+'), ('t1', 't1'), ('Id3\uf0e0R2', 'Id3\uf0e0R2'), ('Id2\uf0e0R1', 'Id2\uf0e0R1'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'CD'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'Unit'), ('1', '1'), ('–', '–'), ('Introduction', 'Introduction'), ('Compiler', 'Compiler'), ('Design', 'Design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Phases', 'Phases'), ('compiler', 'compiler'), ('Symbol', 'Symbol'), ('table', 'table'), ('Error', 'Error'), ('detection', 'detection'), ('recovery', 'recovery'), ('Lexical', 'Lexical'), ('analysis', 'analysis'), ('Code', 'Code'), ('optimization', 'optimization'), ('Syntax', 'Syntax'), ('analysis', 'analysis'), ('Semantic', 'Semantic'), ('analysis', 'analysis'), ('Intermediate', 'Intermediate'), ('code', 'code'), ('Code', 'Code'), ('generation', 'generation'), ('Target', 'Target'), ('Program', 'Program'), ('Source', 'Source'), ('program', 'program'), ('Analysis', 'Analysis'), ('Phase', 'Phase'), ('Synthesis', 'Synthesis'), ('Phase', 'Phase'), ('Variable', 'Variable'), ('Name', 'Name'), ('Type', 'Type'), ('Address', 'Address'), ('Position', 'Position'), ('Float', 'Float'), ('0001', '0001'), ('Initial', 'Initial'), ('Float', 'Float'), ('0005', '0005'), ('Rate', 'Rate'), ('Float', 'Float'), ('0009', '0009'), ('Prof.', 'Prof.'), ('Jay', 'Jay'), ('R', 'R'), ('Dhamsaniya', 'Dhamsaniya'), ('#', '#'), ('3130006', '3130006'), ('(', '('), ('PS', 'PS'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'Unit'), ('1', '1'), ('–', '–'), ('Basic', 'Basic'), ('Probability', 'Probability'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'CD'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'Unit'), ('1–', '1–'), ('Introduction', 'Introduction'), ('Compiler', 'Compiler'), ('Design', 'Design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Exercise', 'Exercise'), ('Write', 'Write'), ('output', 'output'), ('phases', 'phase'), ('compiler', 'compiler'), ('following', 'following'), ('statements', 'statement'), (':', ':'), ('x', 'x'), ('=', '='), ('b-c', 'b-c'), ('*', '*'), ('2', '2'), ('I=p', 'I=p'), ('*', '*'), ('n', 'n'), ('*', '*'), ('r/100', 'r/100'), ('Prof.', 'Prof.'), ('Jay', 'Jay'), ('R', 'R'), ('Dhamsaniya', 'Dhamsaniya'), ('#', '#'), ('3130006', '3130006'), ('(', '('), ('PS', 'PS'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'Unit'), ('1', '1'), ('–', '–'), ('Basic', 'Basic'), ('Probability', 'Probability'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'CD'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'Unit'), ('1', '1'), ('–', '–'), ('Introduction', 'Introduction'), ('Compiler', 'Compiler'), ('Design', 'Design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Grouping', 'Grouping'), ('Phases', 'Phases'), ('Front', 'Front'), ('end', 'end'), ('&', '&'), ('back', 'back'), ('end', 'end'), ('(', '('), ('Grouping', 'Grouping'), ('phases', 'phase'), (')', ')'), ('Depends', 'Depends'), ('primarily', 'primarily'), ('source', 'source'), ('language', 'language'), ('largely', 'largely'), ('independent', 'independent'), ('target', 'target'), ('machine', 'machine'), ('.', '.')]



============================ Sentence 26 =============================

It includes following phases:  Lexical analysis Syntax analysis  Semantic analysis Intermediate code generation  Creation of symbol table  Front end Depends on target machine and do not depends on source program. 


>> Tokens are: 
 ['It', 'includes', 'following', 'phases', ':', 'Lexical', 'analysis', 'Syntax', 'analysis', 'Semantic', 'analysis', 'Intermediate', 'code', 'generation', 'Creation', 'symbol', 'table', 'Front', 'end', 'Depends', 'target', 'machine', 'depends', 'source', 'program', '.']

>> Bigrams are: 
 [('It', 'includes'), ('includes', 'following'), ('following', 'phases'), ('phases', ':'), (':', 'Lexical'), ('Lexical', 'analysis'), ('analysis', 'Syntax'), ('Syntax', 'analysis'), ('analysis', 'Semantic'), ('Semantic', 'analysis'), ('analysis', 'Intermediate'), ('Intermediate', 'code'), ('code', 'generation'), ('generation', 'Creation'), ('Creation', 'symbol'), ('symbol', 'table'), ('table', 'Front'), ('Front', 'end'), ('end', 'Depends'), ('Depends', 'target'), ('target', 'machine'), ('machine', 'depends'), ('depends', 'source'), ('source', 'program'), ('program', '.')]

>> Trigrams are: 
 [('It', 'includes', 'following'), ('includes', 'following', 'phases'), ('following', 'phases', ':'), ('phases', ':', 'Lexical'), (':', 'Lexical', 'analysis'), ('Lexical', 'analysis', 'Syntax'), ('analysis', 'Syntax', 'analysis'), ('Syntax', 'analysis', 'Semantic'), ('analysis', 'Semantic', 'analysis'), ('Semantic', 'analysis', 'Intermediate'), ('analysis', 'Intermediate', 'code'), ('Intermediate', 'code', 'generation'), ('code', 'generation', 'Creation'), ('generation', 'Creation', 'symbol'), ('Creation', 'symbol', 'table'), ('symbol', 'table', 'Front'), ('table', 'Front', 'end'), ('Front', 'end', 'Depends'), ('end', 'Depends', 'target'), ('Depends', 'target', 'machine'), ('target', 'machine', 'depends'), ('machine', 'depends', 'source'), ('depends', 'source', 'program'), ('source', 'program', '.')]

>> POS Tags are: 
 [('It', 'PRP'), ('includes', 'VBZ'), ('following', 'VBG'), ('phases', 'NNS'), (':', ':'), ('Lexical', 'JJ'), ('analysis', 'NN'), ('Syntax', 'NNP'), ('analysis', 'NN'), ('Semantic', 'NNP'), ('analysis', 'NN'), ('Intermediate', 'NNP'), ('code', 'NN'), ('generation', 'NN'), ('Creation', 'NNP'), ('symbol', 'NN'), ('table', 'NN'), ('Front', 'NNP'), ('end', 'NN'), ('Depends', 'VBZ'), ('target', 'NN'), ('machine', 'NN'), ('depends', 'VBZ'), ('source', 'NN'), ('program', 'NN'), ('.', '.')]

 (S
  It/PRP
  includes/VBZ
  following/VBG
  (NP phases/NNS)
  :/:
  (NP
    Lexical/JJ
    analysis/NN
    Syntax/NNP
    analysis/NN
    Semantic/NNP
    analysis/NN
    Intermediate/NNP
    code/NN
    generation/NN
    Creation/NNP
    symbol/NN
    table/NN
    Front/NNP
    end/NN)
  Depends/VBZ
  (NP target/NN machine/NN)
  depends/VBZ
  (NP source/NN program/NN)
  ./.) 


>> Noun Phrases are: 
 ['phases', 'Lexical analysis Syntax analysis Semantic analysis Intermediate code generation Creation symbol table Front end', 'target machine', 'source program']

>> Named Entities are: 
 [('PERSON', 'Syntax'), ('ORGANIZATION', 'Semantic'), ('ORGANIZATION', 'Intermediate')] 

>> Stemming using Porter Stemmer: 
 [('It', 'it'), ('includes', 'includ'), ('following', 'follow'), ('phases', 'phase'), (':', ':'), ('Lexical', 'lexic'), ('analysis', 'analysi'), ('Syntax', 'syntax'), ('analysis', 'analysi'), ('Semantic', 'semant'), ('analysis', 'analysi'), ('Intermediate', 'intermedi'), ('code', 'code'), ('generation', 'gener'), ('Creation', 'creation'), ('symbol', 'symbol'), ('table', 'tabl'), ('Front', 'front'), ('end', 'end'), ('Depends', 'depend'), ('target', 'target'), ('machine', 'machin'), ('depends', 'depend'), ('source', 'sourc'), ('program', 'program'), ('.', '.')]

>> Stemming using Snowball Stemmer: 
 [('It', 'it'), ('includes', 'includ'), ('following', 'follow'), ('phases', 'phase'), (':', ':'), ('Lexical', 'lexic'), ('analysis', 'analysi'), ('Syntax', 'syntax'), ('analysis', 'analysi'), ('Semantic', 'semant'), ('analysis', 'analysi'), ('Intermediate', 'intermedi'), ('code', 'code'), ('generation', 'generat'), ('Creation', 'creation'), ('symbol', 'symbol'), ('table', 'tabl'), ('Front', 'front'), ('end', 'end'), ('Depends', 'depend'), ('target', 'target'), ('machine', 'machin'), ('depends', 'depend'), ('source', 'sourc'), ('program', 'program'), ('.', '.')]

>> Lemmatization: 
 [('It', 'It'), ('includes', 'includes'), ('following', 'following'), ('phases', 'phase'), (':', ':'), ('Lexical', 'Lexical'), ('analysis', 'analysis'), ('Syntax', 'Syntax'), ('analysis', 'analysis'), ('Semantic', 'Semantic'), ('analysis', 'analysis'), ('Intermediate', 'Intermediate'), ('code', 'code'), ('generation', 'generation'), ('Creation', 'Creation'), ('symbol', 'symbol'), ('table', 'table'), ('Front', 'Front'), ('end', 'end'), ('Depends', 'Depends'), ('target', 'target'), ('machine', 'machine'), ('depends', 'depends'), ('source', 'source'), ('program', 'program'), ('.', '.')]



============================ Sentence 27 =============================

It includes following phases:  Code optimization  Code generation phase  Error handling and symbol table operation    Back end    Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1 – Introduction to Compiler Design ‹#›  Difference between compiler & interpreter  	Compiler 	Interpreter  	Scans the entire program and translates it as a whole into machine code. 


>> Tokens are: 
 ['It', 'includes', 'following', 'phases', ':', 'Code', 'optimization', 'Code', 'generation', 'phase', 'Error', 'handling', 'symbol', 'table', 'operation', 'Back', 'end', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '1', '–', 'Introduction', 'Compiler', 'Design', '‹', '#', '›', 'Difference', 'compiler', '&', 'interpreter', 'Compiler', 'Interpreter', 'Scans', 'entire', 'program', 'translates', 'whole', 'machine', 'code', '.']

>> Bigrams are: 
 [('It', 'includes'), ('includes', 'following'), ('following', 'phases'), ('phases', ':'), (':', 'Code'), ('Code', 'optimization'), ('optimization', 'Code'), ('Code', 'generation'), ('generation', 'phase'), ('phase', 'Error'), ('Error', 'handling'), ('handling', 'symbol'), ('symbol', 'table'), ('table', 'operation'), ('operation', 'Back'), ('Back', 'end'), ('end', 'Prof.'), ('Prof.', 'Dixita'), ('Dixita', 'B'), ('B', 'Kagathara'), ('Kagathara', '#'), ('#', '2170701'), ('2170701', '('), ('(', 'CD'), ('CD', ')'), (')', '\uf077'), ('\uf077', 'Unit'), ('Unit', '1'), ('1', '–'), ('–', 'Introduction'), ('Introduction', 'Compiler'), ('Compiler', 'Design'), ('Design', '‹'), ('‹', '#'), ('#', '›'), ('›', 'Difference'), ('Difference', 'compiler'), ('compiler', '&'), ('&', 'interpreter'), ('interpreter', 'Compiler'), ('Compiler', 'Interpreter'), ('Interpreter', 'Scans'), ('Scans', 'entire'), ('entire', 'program'), ('program', 'translates'), ('translates', 'whole'), ('whole', 'machine'), ('machine', 'code'), ('code', '.')]

>> Trigrams are: 
 [('It', 'includes', 'following'), ('includes', 'following', 'phases'), ('following', 'phases', ':'), ('phases', ':', 'Code'), (':', 'Code', 'optimization'), ('Code', 'optimization', 'Code'), ('optimization', 'Code', 'generation'), ('Code', 'generation', 'phase'), ('generation', 'phase', 'Error'), ('phase', 'Error', 'handling'), ('Error', 'handling', 'symbol'), ('handling', 'symbol', 'table'), ('symbol', 'table', 'operation'), ('table', 'operation', 'Back'), ('operation', 'Back', 'end'), ('Back', 'end', 'Prof.'), ('end', 'Prof.', 'Dixita'), ('Prof.', 'Dixita', 'B'), ('Dixita', 'B', 'Kagathara'), ('B', 'Kagathara', '#'), ('Kagathara', '#', '2170701'), ('#', '2170701', '('), ('2170701', '(', 'CD'), ('(', 'CD', ')'), ('CD', ')', '\uf077'), (')', '\uf077', 'Unit'), ('\uf077', 'Unit', '1'), ('Unit', '1', '–'), ('1', '–', 'Introduction'), ('–', 'Introduction', 'Compiler'), ('Introduction', 'Compiler', 'Design'), ('Compiler', 'Design', '‹'), ('Design', '‹', '#'), ('‹', '#', '›'), ('#', '›', 'Difference'), ('›', 'Difference', 'compiler'), ('Difference', 'compiler', '&'), ('compiler', '&', 'interpreter'), ('&', 'interpreter', 'Compiler'), ('interpreter', 'Compiler', 'Interpreter'), ('Compiler', 'Interpreter', 'Scans'), ('Interpreter', 'Scans', 'entire'), ('Scans', 'entire', 'program'), ('entire', 'program', 'translates'), ('program', 'translates', 'whole'), ('translates', 'whole', 'machine'), ('whole', 'machine', 'code'), ('machine', 'code', '.')]

>> POS Tags are: 
 [('It', 'PRP'), ('includes', 'VBZ'), ('following', 'VBG'), ('phases', 'NNS'), (':', ':'), ('Code', 'NNP'), ('optimization', 'NN'), ('Code', 'NNP'), ('generation', 'NN'), ('phase', 'NN'), ('Error', 'NNP'), ('handling', 'VBG'), ('symbol', 'NN'), ('table', 'NN'), ('operation', 'NN'), ('Back', 'NNP'), ('end', 'NN'), ('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', '#'), ('2170701', 'CD'), ('(', '('), ('CD', 'NN'), (')', ')'), ('\uf077', 'VBD'), ('Unit', 'NNP'), ('1', 'CD'), ('–', 'NNP'), ('Introduction', 'NNP'), ('Compiler', 'NNP'), ('Design', 'NNP'), ('‹', 'NNP'), ('#', '#'), ('›', 'NNP'), ('Difference', 'NNP'), ('compiler', 'NN'), ('&', 'CC'), ('interpreter', 'NN'), ('Compiler', 'NNP'), ('Interpreter', 'NNP'), ('Scans', 'NNP'), ('entire', 'JJ'), ('program', 'NN'), ('translates', 'NNS'), ('whole', 'JJ'), ('machine', 'NN'), ('code', 'NN'), ('.', '.')]

 (S
  It/PRP
  includes/VBZ
  following/VBG
  (NP phases/NNS)
  :/:
  (NP
    Code/NNP
    optimization/NN
    Code/NNP
    generation/NN
    phase/NN
    Error/NNP)
  handling/VBG
  (NP
    symbol/NN
    table/NN
    operation/NN
    Back/NNP
    end/NN
    Prof./NNP
    Dixita/NNP
    B/NNP
    Kagathara/NNP)
  #/#
  2170701/CD
  (/(
  (NP CD/NN)
  )/)
  /VBD
  (NP Unit/NNP)
  1/CD
  (NP –/NNP Introduction/NNP Compiler/NNP Design/NNP ‹/NNP)
  #/#
  (NP ›/NNP Difference/NNP compiler/NN)
  &/CC
  (NP interpreter/NN Compiler/NNP Interpreter/NNP Scans/NNP)
  (NP entire/JJ program/NN translates/NNS)
  (NP whole/JJ machine/NN code/NN)
  ./.) 


>> Noun Phrases are: 
 ['phases', 'Code optimization Code generation phase Error', 'symbol table operation Back end Prof. Dixita B Kagathara', 'CD', 'Unit', '– Introduction Compiler Design ‹', '› Difference compiler', 'interpreter Compiler Interpreter Scans', 'entire program translates', 'whole machine code']

>> Named Entities are: 
 [('PERSON', 'Code'), ('ORGANIZATION', 'Unit'), ('ORGANIZATION', 'Compiler')] 

>> Stemming using Porter Stemmer: 
 [('It', 'it'), ('includes', 'includ'), ('following', 'follow'), ('phases', 'phase'), (':', ':'), ('Code', 'code'), ('optimization', 'optim'), ('Code', 'code'), ('generation', 'gener'), ('phase', 'phase'), ('Error', 'error'), ('handling', 'handl'), ('symbol', 'symbol'), ('table', 'tabl'), ('operation', 'oper'), ('Back', 'back'), ('end', 'end'), ('Prof.', 'prof.'), ('Dixita', 'dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '–'), ('Introduction', 'introduct'), ('Compiler', 'compil'), ('Design', 'design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Difference', 'differ'), ('compiler', 'compil'), ('&', '&'), ('interpreter', 'interpret'), ('Compiler', 'compil'), ('Interpreter', 'interpret'), ('Scans', 'scan'), ('entire', 'entir'), ('program', 'program'), ('translates', 'translat'), ('whole', 'whole'), ('machine', 'machin'), ('code', 'code'), ('.', '.')]

>> Stemming using Snowball Stemmer: 
 [('It', 'it'), ('includes', 'includ'), ('following', 'follow'), ('phases', 'phase'), (':', ':'), ('Code', 'code'), ('optimization', 'optim'), ('Code', 'code'), ('generation', 'generat'), ('phase', 'phase'), ('Error', 'error'), ('handling', 'handl'), ('symbol', 'symbol'), ('table', 'tabl'), ('operation', 'oper'), ('Back', 'back'), ('end', 'end'), ('Prof.', 'prof.'), ('Dixita', 'dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '–'), ('Introduction', 'introduct'), ('Compiler', 'compil'), ('Design', 'design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Difference', 'differ'), ('compiler', 'compil'), ('&', '&'), ('interpreter', 'interpret'), ('Compiler', 'compil'), ('Interpreter', 'interpret'), ('Scans', 'scan'), ('entire', 'entir'), ('program', 'program'), ('translates', 'translat'), ('whole', 'whole'), ('machine', 'machin'), ('code', 'code'), ('.', '.')]

>> Lemmatization: 
 [('It', 'It'), ('includes', 'includes'), ('following', 'following'), ('phases', 'phase'), (':', ':'), ('Code', 'Code'), ('optimization', 'optimization'), ('Code', 'Code'), ('generation', 'generation'), ('phase', 'phase'), ('Error', 'Error'), ('handling', 'handling'), ('symbol', 'symbol'), ('table', 'table'), ('operation', 'operation'), ('Back', 'Back'), ('end', 'end'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'CD'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'Unit'), ('1', '1'), ('–', '–'), ('Introduction', 'Introduction'), ('Compiler', 'Compiler'), ('Design', 'Design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Difference', 'Difference'), ('compiler', 'compiler'), ('&', '&'), ('interpreter', 'interpreter'), ('Compiler', 'Compiler'), ('Interpreter', 'Interpreter'), ('Scans', 'Scans'), ('entire', 'entire'), ('program', 'program'), ('translates', 'translates'), ('whole', 'whole'), ('machine', 'machine'), ('code', 'code'), ('.', '.')]



============================ Sentence 28 =============================

It translates program’s one statement at a time. 


>> Tokens are: 
 ['It', 'translates', 'program', '’', 'one', 'statement', 'time', '.']

>> Bigrams are: 
 [('It', 'translates'), ('translates', 'program'), ('program', '’'), ('’', 'one'), ('one', 'statement'), ('statement', 'time'), ('time', '.')]

>> Trigrams are: 
 [('It', 'translates', 'program'), ('translates', 'program', '’'), ('program', '’', 'one'), ('’', 'one', 'statement'), ('one', 'statement', 'time'), ('statement', 'time', '.')]

>> POS Tags are: 
 [('It', 'PRP'), ('translates', 'VBZ'), ('program', 'NN'), ('’', "''"), ('one', 'CD'), ('statement', 'NN'), ('time', 'NN'), ('.', '.')]

 (S
  It/PRP
  translates/VBZ
  (NP program/NN)
  ’/''
  one/CD
  (NP statement/NN time/NN)
  ./.) 


>> Noun Phrases are: 
 ['program', 'statement time']

>> Named Entities are: 
 [] 

>> Stemming using Porter Stemmer: 
 [('It', 'it'), ('translates', 'translat'), ('program', 'program'), ('’', '’'), ('one', 'one'), ('statement', 'statement'), ('time', 'time'), ('.', '.')]

>> Stemming using Snowball Stemmer: 
 [('It', 'it'), ('translates', 'translat'), ('program', 'program'), ('’', '’'), ('one', 'one'), ('statement', 'statement'), ('time', 'time'), ('.', '.')]

>> Lemmatization: 
 [('It', 'It'), ('translates', 'translates'), ('program', 'program'), ('’', '’'), ('one', 'one'), ('statement', 'statement'), ('time', 'time'), ('.', '.')]



============================ Sentence 29 =============================

It generates intermediate code. 


>> Tokens are: 
 ['It', 'generates', 'intermediate', 'code', '.']

>> Bigrams are: 
 [('It', 'generates'), ('generates', 'intermediate'), ('intermediate', 'code'), ('code', '.')]

>> Trigrams are: 
 [('It', 'generates', 'intermediate'), ('generates', 'intermediate', 'code'), ('intermediate', 'code', '.')]

>> POS Tags are: 
 [('It', 'PRP'), ('generates', 'VBZ'), ('intermediate', 'JJ'), ('code', 'NN'), ('.', '.')]

 (S It/PRP generates/VBZ (NP intermediate/JJ code/NN) ./.) 


>> Noun Phrases are: 
 ['intermediate code']

>> Named Entities are: 
 [] 

>> Stemming using Porter Stemmer: 
 [('It', 'it'), ('generates', 'gener'), ('intermediate', 'intermedi'), ('code', 'code'), ('.', '.')]

>> Stemming using Snowball Stemmer: 
 [('It', 'it'), ('generates', 'generat'), ('intermediate', 'intermedi'), ('code', 'code'), ('.', '.')]

>> Lemmatization: 
 [('It', 'It'), ('generates', 'generates'), ('intermediate', 'intermediate'), ('code', 'code'), ('.', '.')]



============================ Sentence 30 =============================

It does not generate intermediate code. 


>> Tokens are: 
 ['It', 'generate', 'intermediate', 'code', '.']

>> Bigrams are: 
 [('It', 'generate'), ('generate', 'intermediate'), ('intermediate', 'code'), ('code', '.')]

>> Trigrams are: 
 [('It', 'generate', 'intermediate'), ('generate', 'intermediate', 'code'), ('intermediate', 'code', '.')]

>> POS Tags are: 
 [('It', 'PRP'), ('generate', 'VB'), ('intermediate', 'JJ'), ('code', 'NN'), ('.', '.')]

 (S It/PRP generate/VB (NP intermediate/JJ code/NN) ./.) 


>> Noun Phrases are: 
 ['intermediate code']

>> Named Entities are: 
 [] 

>> Stemming using Porter Stemmer: 
 [('It', 'it'), ('generate', 'gener'), ('intermediate', 'intermedi'), ('code', 'code'), ('.', '.')]

>> Stemming using Snowball Stemmer: 
 [('It', 'it'), ('generate', 'generat'), ('intermediate', 'intermedi'), ('code', 'code'), ('.', '.')]

>> Lemmatization: 
 [('It', 'It'), ('generate', 'generate'), ('intermediate', 'intermediate'), ('code', 'code'), ('.', '.')]



============================ Sentence 31 =============================

Memory requirement is more. 


>> Tokens are: 
 ['Memory', 'requirement', '.']

>> Bigrams are: 
 [('Memory', 'requirement'), ('requirement', '.')]

>> Trigrams are: 
 [('Memory', 'requirement', '.')]

>> POS Tags are: 
 [('Memory', 'NN'), ('requirement', 'NN'), ('.', '.')]

 (S (NP Memory/NN requirement/NN) ./.) 


>> Noun Phrases are: 
 ['Memory requirement']

>> Named Entities are: 
 [('GPE', 'Memory')] 

>> Stemming using Porter Stemmer: 
 [('Memory', 'memori'), ('requirement', 'requir'), ('.', '.')]

>> Stemming using Snowball Stemmer: 
 [('Memory', 'memori'), ('requirement', 'requir'), ('.', '.')]

>> Lemmatization: 
 [('Memory', 'Memory'), ('requirement', 'requirement'), ('.', '.')]



============================ Sentence 32 =============================

Memory requirement is less. 


>> Tokens are: 
 ['Memory', 'requirement', 'less', '.']

>> Bigrams are: 
 [('Memory', 'requirement'), ('requirement', 'less'), ('less', '.')]

>> Trigrams are: 
 [('Memory', 'requirement', 'less'), ('requirement', 'less', '.')]

>> POS Tags are: 
 [('Memory', 'NNP'), ('requirement', 'NN'), ('less', 'NN'), ('.', '.')]

 (S (NP Memory/NNP requirement/NN less/NN) ./.) 


>> Noun Phrases are: 
 ['Memory requirement less']

>> Named Entities are: 
 [('GPE', 'Memory')] 

>> Stemming using Porter Stemmer: 
 [('Memory', 'memori'), ('requirement', 'requir'), ('less', 'less'), ('.', '.')]

>> Stemming using Snowball Stemmer: 
 [('Memory', 'memori'), ('requirement', 'requir'), ('less', 'less'), ('.', '.')]

>> Lemmatization: 
 [('Memory', 'Memory'), ('requirement', 'requirement'), ('less', 'le'), ('.', '.')]



============================ Sentence 33 =============================

An error is displayed after entire program is checked. 


>> Tokens are: 
 ['An', 'error', 'displayed', 'entire', 'program', 'checked', '.']

>> Bigrams are: 
 [('An', 'error'), ('error', 'displayed'), ('displayed', 'entire'), ('entire', 'program'), ('program', 'checked'), ('checked', '.')]

>> Trigrams are: 
 [('An', 'error', 'displayed'), ('error', 'displayed', 'entire'), ('displayed', 'entire', 'program'), ('entire', 'program', 'checked'), ('program', 'checked', '.')]

>> POS Tags are: 
 [('An', 'DT'), ('error', 'NN'), ('displayed', 'VBD'), ('entire', 'JJ'), ('program', 'NN'), ('checked', 'VBN'), ('.', '.')]

 (S
  (NP An/DT error/NN)
  displayed/VBD
  (NP entire/JJ program/NN)
  checked/VBN
  ./.) 


>> Noun Phrases are: 
 ['An error', 'entire program']

>> Named Entities are: 
 [] 

>> Stemming using Porter Stemmer: 
 [('An', 'an'), ('error', 'error'), ('displayed', 'display'), ('entire', 'entir'), ('program', 'program'), ('checked', 'check'), ('.', '.')]

>> Stemming using Snowball Stemmer: 
 [('An', 'an'), ('error', 'error'), ('displayed', 'display'), ('entire', 'entir'), ('program', 'program'), ('checked', 'check'), ('.', '.')]

>> Lemmatization: 
 [('An', 'An'), ('error', 'error'), ('displayed', 'displayed'), ('entire', 'entire'), ('program', 'program'), ('checked', 'checked'), ('.', '.')]



============================ Sentence 34 =============================

An error is displayed for every instruction interpreted if any. 


>> Tokens are: 
 ['An', 'error', 'displayed', 'every', 'instruction', 'interpreted', '.']

>> Bigrams are: 
 [('An', 'error'), ('error', 'displayed'), ('displayed', 'every'), ('every', 'instruction'), ('instruction', 'interpreted'), ('interpreted', '.')]

>> Trigrams are: 
 [('An', 'error', 'displayed'), ('error', 'displayed', 'every'), ('displayed', 'every', 'instruction'), ('every', 'instruction', 'interpreted'), ('instruction', 'interpreted', '.')]

>> POS Tags are: 
 [('An', 'DT'), ('error', 'NN'), ('displayed', 'VBD'), ('every', 'DT'), ('instruction', 'NN'), ('interpreted', 'VBN'), ('.', '.')]

 (S
  (NP An/DT error/NN)
  displayed/VBD
  (NP every/DT instruction/NN)
  interpreted/VBN
  ./.) 


>> Noun Phrases are: 
 ['An error', 'every instruction']

>> Named Entities are: 
 [] 

>> Stemming using Porter Stemmer: 
 [('An', 'an'), ('error', 'error'), ('displayed', 'display'), ('every', 'everi'), ('instruction', 'instruct'), ('interpreted', 'interpret'), ('.', '.')]

>> Stemming using Snowball Stemmer: 
 [('An', 'an'), ('error', 'error'), ('displayed', 'display'), ('every', 'everi'), ('instruction', 'instruct'), ('interpreted', 'interpret'), ('.', '.')]

>> Lemmatization: 
 [('An', 'An'), ('error', 'error'), ('displayed', 'displayed'), ('every', 'every'), ('instruction', 'instruction'), ('interpreted', 'interpreted'), ('.', '.')]



============================ Sentence 35 =============================

Example: C compiler 	Example: Basic, Python, Ruby      Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1 – Introduction to Compiler Design ‹#›  Context of Compiler (Cousins of compiler)        Context of compiler (Cousins of compiler) In addition to compiler, many other system programs are required to generate absolute machine code. 


>> Tokens are: 
 ['Example', ':', 'C', 'compiler', 'Example', ':', 'Basic', ',', 'Python', ',', 'Ruby', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '1', '–', 'Introduction', 'Compiler', 'Design', '‹', '#', '›', 'Context', 'Compiler', '(', 'Cousins', 'compiler', ')', 'Context', 'compiler', '(', 'Cousins', 'compiler', ')', 'In', 'addition', 'compiler', ',', 'many', 'system', 'programs', 'required', 'generate', 'absolute', 'machine', 'code', '.']

>> Bigrams are: 
 [('Example', ':'), (':', 'C'), ('C', 'compiler'), ('compiler', 'Example'), ('Example', ':'), (':', 'Basic'), ('Basic', ','), (',', 'Python'), ('Python', ','), (',', 'Ruby'), ('Ruby', 'Prof.'), ('Prof.', 'Dixita'), ('Dixita', 'B'), ('B', 'Kagathara'), ('Kagathara', '#'), ('#', '2170701'), ('2170701', '('), ('(', 'CD'), ('CD', ')'), (')', '\uf077'), ('\uf077', 'Unit'), ('Unit', '1'), ('1', '–'), ('–', 'Introduction'), ('Introduction', 'Compiler'), ('Compiler', 'Design'), ('Design', '‹'), ('‹', '#'), ('#', '›'), ('›', 'Context'), ('Context', 'Compiler'), ('Compiler', '('), ('(', 'Cousins'), ('Cousins', 'compiler'), ('compiler', ')'), (')', 'Context'), ('Context', 'compiler'), ('compiler', '('), ('(', 'Cousins'), ('Cousins', 'compiler'), ('compiler', ')'), (')', 'In'), ('In', 'addition'), ('addition', 'compiler'), ('compiler', ','), (',', 'many'), ('many', 'system'), ('system', 'programs'), ('programs', 'required'), ('required', 'generate'), ('generate', 'absolute'), ('absolute', 'machine'), ('machine', 'code'), ('code', '.')]

>> Trigrams are: 
 [('Example', ':', 'C'), (':', 'C', 'compiler'), ('C', 'compiler', 'Example'), ('compiler', 'Example', ':'), ('Example', ':', 'Basic'), (':', 'Basic', ','), ('Basic', ',', 'Python'), (',', 'Python', ','), ('Python', ',', 'Ruby'), (',', 'Ruby', 'Prof.'), ('Ruby', 'Prof.', 'Dixita'), ('Prof.', 'Dixita', 'B'), ('Dixita', 'B', 'Kagathara'), ('B', 'Kagathara', '#'), ('Kagathara', '#', '2170701'), ('#', '2170701', '('), ('2170701', '(', 'CD'), ('(', 'CD', ')'), ('CD', ')', '\uf077'), (')', '\uf077', 'Unit'), ('\uf077', 'Unit', '1'), ('Unit', '1', '–'), ('1', '–', 'Introduction'), ('–', 'Introduction', 'Compiler'), ('Introduction', 'Compiler', 'Design'), ('Compiler', 'Design', '‹'), ('Design', '‹', '#'), ('‹', '#', '›'), ('#', '›', 'Context'), ('›', 'Context', 'Compiler'), ('Context', 'Compiler', '('), ('Compiler', '(', 'Cousins'), ('(', 'Cousins', 'compiler'), ('Cousins', 'compiler', ')'), ('compiler', ')', 'Context'), (')', 'Context', 'compiler'), ('Context', 'compiler', '('), ('compiler', '(', 'Cousins'), ('(', 'Cousins', 'compiler'), ('Cousins', 'compiler', ')'), ('compiler', ')', 'In'), (')', 'In', 'addition'), ('In', 'addition', 'compiler'), ('addition', 'compiler', ','), ('compiler', ',', 'many'), (',', 'many', 'system'), ('many', 'system', 'programs'), ('system', 'programs', 'required'), ('programs', 'required', 'generate'), ('required', 'generate', 'absolute'), ('generate', 'absolute', 'machine'), ('absolute', 'machine', 'code'), ('machine', 'code', '.')]

>> POS Tags are: 
 [('Example', 'NN'), (':', ':'), ('C', 'NNP'), ('compiler', 'NN'), ('Example', 'NN'), (':', ':'), ('Basic', 'NNP'), (',', ','), ('Python', 'NNP'), (',', ','), ('Ruby', 'NNP'), ('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', '#'), ('2170701', 'CD'), ('(', '('), ('CD', 'NN'), (')', ')'), ('\uf077', 'VBD'), ('Unit', 'NNP'), ('1', 'CD'), ('–', 'NNP'), ('Introduction', 'NNP'), ('Compiler', 'NNP'), ('Design', 'NNP'), ('‹', 'NNP'), ('#', '#'), ('›', 'NNP'), ('Context', 'NNP'), ('Compiler', 'NNP'), ('(', '('), ('Cousins', 'NNP'), ('compiler', 'NN'), (')', ')'), ('Context', 'NNP'), ('compiler', 'NN'), ('(', '('), ('Cousins', 'NNP'), ('compiler', 'NN'), (')', ')'), ('In', 'IN'), ('addition', 'NN'), ('compiler', 'NN'), (',', ','), ('many', 'JJ'), ('system', 'NN'), ('programs', 'NNS'), ('required', 'VBN'), ('generate', 'JJ'), ('absolute', 'JJ'), ('machine', 'NN'), ('code', 'NN'), ('.', '.')]

 (S
  (NP Example/NN)
  :/:
  (NP C/NNP compiler/NN Example/NN)
  :/:
  (NP Basic/NNP)
  ,/,
  (NP Python/NNP)
  ,/,
  (NP Ruby/NNP Prof./NNP Dixita/NNP B/NNP Kagathara/NNP)
  #/#
  2170701/CD
  (/(
  (NP CD/NN)
  )/)
  /VBD
  (NP Unit/NNP)
  1/CD
  (NP –/NNP Introduction/NNP Compiler/NNP Design/NNP ‹/NNP)
  #/#
  (NP ›/NNP Context/NNP Compiler/NNP)
  (/(
  (NP Cousins/NNP compiler/NN)
  )/)
  (NP Context/NNP compiler/NN)
  (/(
  (NP Cousins/NNP compiler/NN)
  )/)
  In/IN
  (NP addition/NN compiler/NN)
  ,/,
  (NP many/JJ system/NN programs/NNS)
  required/VBN
  (NP generate/JJ absolute/JJ machine/NN code/NN)
  ./.) 


>> Noun Phrases are: 
 ['Example', 'C compiler Example', 'Basic', 'Python', 'Ruby Prof. Dixita B Kagathara', 'CD', 'Unit', '– Introduction Compiler Design ‹', '› Context Compiler', 'Cousins compiler', 'Context compiler', 'Cousins compiler', 'addition compiler', 'many system programs', 'generate absolute machine code']

>> Named Entities are: 
 [('GPE', 'Example'), ('PERSON', 'Basic'), ('PERSON', 'Python'), ('PERSON', 'Ruby'), ('ORGANIZATION', 'Unit'), ('ORGANIZATION', 'Cousins'), ('ORGANIZATION', 'Cousins')] 

>> Stemming using Porter Stemmer: 
 [('Example', 'exampl'), (':', ':'), ('C', 'c'), ('compiler', 'compil'), ('Example', 'exampl'), (':', ':'), ('Basic', 'basic'), (',', ','), ('Python', 'python'), (',', ','), ('Ruby', 'rubi'), ('Prof.', 'prof.'), ('Dixita', 'dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '–'), ('Introduction', 'introduct'), ('Compiler', 'compil'), ('Design', 'design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Context', 'context'), ('Compiler', 'compil'), ('(', '('), ('Cousins', 'cousin'), ('compiler', 'compil'), (')', ')'), ('Context', 'context'), ('compiler', 'compil'), ('(', '('), ('Cousins', 'cousin'), ('compiler', 'compil'), (')', ')'), ('In', 'in'), ('addition', 'addit'), ('compiler', 'compil'), (',', ','), ('many', 'mani'), ('system', 'system'), ('programs', 'program'), ('required', 'requir'), ('generate', 'gener'), ('absolute', 'absolut'), ('machine', 'machin'), ('code', 'code'), ('.', '.')]

>> Stemming using Snowball Stemmer: 
 [('Example', 'exampl'), (':', ':'), ('C', 'c'), ('compiler', 'compil'), ('Example', 'exampl'), (':', ':'), ('Basic', 'basic'), (',', ','), ('Python', 'python'), (',', ','), ('Ruby', 'rubi'), ('Prof.', 'prof.'), ('Dixita', 'dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '–'), ('Introduction', 'introduct'), ('Compiler', 'compil'), ('Design', 'design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Context', 'context'), ('Compiler', 'compil'), ('(', '('), ('Cousins', 'cousin'), ('compiler', 'compil'), (')', ')'), ('Context', 'context'), ('compiler', 'compil'), ('(', '('), ('Cousins', 'cousin'), ('compiler', 'compil'), (')', ')'), ('In', 'in'), ('addition', 'addit'), ('compiler', 'compil'), (',', ','), ('many', 'mani'), ('system', 'system'), ('programs', 'program'), ('required', 'requir'), ('generate', 'generat'), ('absolute', 'absolut'), ('machine', 'machin'), ('code', 'code'), ('.', '.')]

>> Lemmatization: 
 [('Example', 'Example'), (':', ':'), ('C', 'C'), ('compiler', 'compiler'), ('Example', 'Example'), (':', ':'), ('Basic', 'Basic'), (',', ','), ('Python', 'Python'), (',', ','), ('Ruby', 'Ruby'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'CD'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'Unit'), ('1', '1'), ('–', '–'), ('Introduction', 'Introduction'), ('Compiler', 'Compiler'), ('Design', 'Design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Context', 'Context'), ('Compiler', 'Compiler'), ('(', '('), ('Cousins', 'Cousins'), ('compiler', 'compiler'), (')', ')'), ('Context', 'Context'), ('compiler', 'compiler'), ('(', '('), ('Cousins', 'Cousins'), ('compiler', 'compiler'), (')', ')'), ('In', 'In'), ('addition', 'addition'), ('compiler', 'compiler'), (',', ','), ('many', 'many'), ('system', 'system'), ('programs', 'program'), ('required', 'required'), ('generate', 'generate'), ('absolute', 'absolute'), ('machine', 'machine'), ('code', 'code'), ('.', '.')]



============================ Sentence 36 =============================

These system programs are:  Preprocessor Assembler Linker Loader    Skeletal Source Program Compiler Assembler Source Program Target Assembly  Program Relocatable Object Code Absolute Machine  Code Libraries &  Object Files Linker / Loader Preprocessor    Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1 – Introduction to Compiler Design ‹#›  Context of compiler (Cousins of compiler)    Skeletal Source Program Compiler Assembler Source Program Target Assembly  Program Relocatable Object Code Absolute Machine  Code Libraries &  Object Files Linker / Loader Preprocessor Preprocessor Some of the task performed by preprocessor: Macro processing: Allows user to define macros. 


>> Tokens are: 
 ['These', 'system', 'programs', ':', 'Preprocessor', 'Assembler', 'Linker', 'Loader', 'Skeletal', 'Source', 'Program', 'Compiler', 'Assembler', 'Source', 'Program', 'Target', 'Assembly', 'Program', 'Relocatable', 'Object', 'Code', 'Absolute', 'Machine', 'Code', 'Libraries', '&', 'Object', 'Files', 'Linker', '/', 'Loader', 'Preprocessor', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '1', '–', 'Introduction', 'Compiler', 'Design', '‹', '#', '›', 'Context', 'compiler', '(', 'Cousins', 'compiler', ')', 'Skeletal', 'Source', 'Program', 'Compiler', 'Assembler', 'Source', 'Program', 'Target', 'Assembly', 'Program', 'Relocatable', 'Object', 'Code', 'Absolute', 'Machine', 'Code', 'Libraries', '&', 'Object', 'Files', 'Linker', '/', 'Loader', 'Preprocessor', 'Preprocessor', 'Some', 'task', 'performed', 'preprocessor', ':', 'Macro', 'processing', ':', 'Allows', 'user', 'define', 'macros', '.']

>> Bigrams are: 
 [('These', 'system'), ('system', 'programs'), ('programs', ':'), (':', 'Preprocessor'), ('Preprocessor', 'Assembler'), ('Assembler', 'Linker'), ('Linker', 'Loader'), ('Loader', 'Skeletal'), ('Skeletal', 'Source'), ('Source', 'Program'), ('Program', 'Compiler'), ('Compiler', 'Assembler'), ('Assembler', 'Source'), ('Source', 'Program'), ('Program', 'Target'), ('Target', 'Assembly'), ('Assembly', 'Program'), ('Program', 'Relocatable'), ('Relocatable', 'Object'), ('Object', 'Code'), ('Code', 'Absolute'), ('Absolute', 'Machine'), ('Machine', 'Code'), ('Code', 'Libraries'), ('Libraries', '&'), ('&', 'Object'), ('Object', 'Files'), ('Files', 'Linker'), ('Linker', '/'), ('/', 'Loader'), ('Loader', 'Preprocessor'), ('Preprocessor', 'Prof.'), ('Prof.', 'Dixita'), ('Dixita', 'B'), ('B', 'Kagathara'), ('Kagathara', '#'), ('#', '2170701'), ('2170701', '('), ('(', 'CD'), ('CD', ')'), (')', '\uf077'), ('\uf077', 'Unit'), ('Unit', '1'), ('1', '–'), ('–', 'Introduction'), ('Introduction', 'Compiler'), ('Compiler', 'Design'), ('Design', '‹'), ('‹', '#'), ('#', '›'), ('›', 'Context'), ('Context', 'compiler'), ('compiler', '('), ('(', 'Cousins'), ('Cousins', 'compiler'), ('compiler', ')'), (')', 'Skeletal'), ('Skeletal', 'Source'), ('Source', 'Program'), ('Program', 'Compiler'), ('Compiler', 'Assembler'), ('Assembler', 'Source'), ('Source', 'Program'), ('Program', 'Target'), ('Target', 'Assembly'), ('Assembly', 'Program'), ('Program', 'Relocatable'), ('Relocatable', 'Object'), ('Object', 'Code'), ('Code', 'Absolute'), ('Absolute', 'Machine'), ('Machine', 'Code'), ('Code', 'Libraries'), ('Libraries', '&'), ('&', 'Object'), ('Object', 'Files'), ('Files', 'Linker'), ('Linker', '/'), ('/', 'Loader'), ('Loader', 'Preprocessor'), ('Preprocessor', 'Preprocessor'), ('Preprocessor', 'Some'), ('Some', 'task'), ('task', 'performed'), ('performed', 'preprocessor'), ('preprocessor', ':'), (':', 'Macro'), ('Macro', 'processing'), ('processing', ':'), (':', 'Allows'), ('Allows', 'user'), ('user', 'define'), ('define', 'macros'), ('macros', '.')]

>> Trigrams are: 
 [('These', 'system', 'programs'), ('system', 'programs', ':'), ('programs', ':', 'Preprocessor'), (':', 'Preprocessor', 'Assembler'), ('Preprocessor', 'Assembler', 'Linker'), ('Assembler', 'Linker', 'Loader'), ('Linker', 'Loader', 'Skeletal'), ('Loader', 'Skeletal', 'Source'), ('Skeletal', 'Source', 'Program'), ('Source', 'Program', 'Compiler'), ('Program', 'Compiler', 'Assembler'), ('Compiler', 'Assembler', 'Source'), ('Assembler', 'Source', 'Program'), ('Source', 'Program', 'Target'), ('Program', 'Target', 'Assembly'), ('Target', 'Assembly', 'Program'), ('Assembly', 'Program', 'Relocatable'), ('Program', 'Relocatable', 'Object'), ('Relocatable', 'Object', 'Code'), ('Object', 'Code', 'Absolute'), ('Code', 'Absolute', 'Machine'), ('Absolute', 'Machine', 'Code'), ('Machine', 'Code', 'Libraries'), ('Code', 'Libraries', '&'), ('Libraries', '&', 'Object'), ('&', 'Object', 'Files'), ('Object', 'Files', 'Linker'), ('Files', 'Linker', '/'), ('Linker', '/', 'Loader'), ('/', 'Loader', 'Preprocessor'), ('Loader', 'Preprocessor', 'Prof.'), ('Preprocessor', 'Prof.', 'Dixita'), ('Prof.', 'Dixita', 'B'), ('Dixita', 'B', 'Kagathara'), ('B', 'Kagathara', '#'), ('Kagathara', '#', '2170701'), ('#', '2170701', '('), ('2170701', '(', 'CD'), ('(', 'CD', ')'), ('CD', ')', '\uf077'), (')', '\uf077', 'Unit'), ('\uf077', 'Unit', '1'), ('Unit', '1', '–'), ('1', '–', 'Introduction'), ('–', 'Introduction', 'Compiler'), ('Introduction', 'Compiler', 'Design'), ('Compiler', 'Design', '‹'), ('Design', '‹', '#'), ('‹', '#', '›'), ('#', '›', 'Context'), ('›', 'Context', 'compiler'), ('Context', 'compiler', '('), ('compiler', '(', 'Cousins'), ('(', 'Cousins', 'compiler'), ('Cousins', 'compiler', ')'), ('compiler', ')', 'Skeletal'), (')', 'Skeletal', 'Source'), ('Skeletal', 'Source', 'Program'), ('Source', 'Program', 'Compiler'), ('Program', 'Compiler', 'Assembler'), ('Compiler', 'Assembler', 'Source'), ('Assembler', 'Source', 'Program'), ('Source', 'Program', 'Target'), ('Program', 'Target', 'Assembly'), ('Target', 'Assembly', 'Program'), ('Assembly', 'Program', 'Relocatable'), ('Program', 'Relocatable', 'Object'), ('Relocatable', 'Object', 'Code'), ('Object', 'Code', 'Absolute'), ('Code', 'Absolute', 'Machine'), ('Absolute', 'Machine', 'Code'), ('Machine', 'Code', 'Libraries'), ('Code', 'Libraries', '&'), ('Libraries', '&', 'Object'), ('&', 'Object', 'Files'), ('Object', 'Files', 'Linker'), ('Files', 'Linker', '/'), ('Linker', '/', 'Loader'), ('/', 'Loader', 'Preprocessor'), ('Loader', 'Preprocessor', 'Preprocessor'), ('Preprocessor', 'Preprocessor', 'Some'), ('Preprocessor', 'Some', 'task'), ('Some', 'task', 'performed'), ('task', 'performed', 'preprocessor'), ('performed', 'preprocessor', ':'), ('preprocessor', ':', 'Macro'), (':', 'Macro', 'processing'), ('Macro', 'processing', ':'), ('processing', ':', 'Allows'), (':', 'Allows', 'user'), ('Allows', 'user', 'define'), ('user', 'define', 'macros'), ('define', 'macros', '.')]

>> POS Tags are: 
 [('These', 'DT'), ('system', 'NN'), ('programs', 'NNS'), (':', ':'), ('Preprocessor', 'NNP'), ('Assembler', 'NNP'), ('Linker', 'NNP'), ('Loader', 'NNP'), ('Skeletal', 'NNP'), ('Source', 'NNP'), ('Program', 'NNP'), ('Compiler', 'NNP'), ('Assembler', 'NNP'), ('Source', 'NNP'), ('Program', 'NNP'), ('Target', 'NNP'), ('Assembly', 'NNP'), ('Program', 'NNP'), ('Relocatable', 'NNP'), ('Object', 'NNP'), ('Code', 'NNP'), ('Absolute', 'NNP'), ('Machine', 'NNP'), ('Code', 'NNP'), ('Libraries', 'NNP'), ('&', 'CC'), ('Object', 'NNP'), ('Files', 'NNP'), ('Linker', 'NNP'), ('/', 'NNP'), ('Loader', 'NNP'), ('Preprocessor', 'NNP'), ('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', '#'), ('2170701', 'CD'), ('(', '('), ('CD', 'NN'), (')', ')'), ('\uf077', 'VBD'), ('Unit', 'NNP'), ('1', 'CD'), ('–', 'NNP'), ('Introduction', 'NNP'), ('Compiler', 'NNP'), ('Design', 'NNP'), ('‹', 'NNP'), ('#', '#'), ('›', 'NNP'), ('Context', 'NNP'), ('compiler', 'NN'), ('(', '('), ('Cousins', 'NNP'), ('compiler', 'NN'), (')', ')'), ('Skeletal', 'NNP'), ('Source', 'NNP'), ('Program', 'NNP'), ('Compiler', 'NNP'), ('Assembler', 'NNP'), ('Source', 'NNP'), ('Program', 'NNP'), ('Target', 'NNP'), ('Assembly', 'NNP'), ('Program', 'NNP'), ('Relocatable', 'NNP'), ('Object', 'NNP'), ('Code', 'NNP'), ('Absolute', 'NNP'), ('Machine', 'NNP'), ('Code', 'NNP'), ('Libraries', 'NNP'), ('&', 'CC'), ('Object', 'NNP'), ('Files', 'NNP'), ('Linker', 'NNP'), ('/', 'NNP'), ('Loader', 'NNP'), ('Preprocessor', 'NNP'), ('Preprocessor', 'NNP'), ('Some', 'DT'), ('task', 'NN'), ('performed', 'VBD'), ('preprocessor', 'NN'), (':', ':'), ('Macro', 'JJ'), ('processing', 'NN'), (':', ':'), ('Allows', 'NNP'), ('user', 'VBP'), ('define', 'NN'), ('macros', 'NN'), ('.', '.')]

 (S
  (NP These/DT system/NN programs/NNS)
  :/:
  (NP
    Preprocessor/NNP
    Assembler/NNP
    Linker/NNP
    Loader/NNP
    Skeletal/NNP
    Source/NNP
    Program/NNP
    Compiler/NNP
    Assembler/NNP
    Source/NNP
    Program/NNP
    Target/NNP
    Assembly/NNP
    Program/NNP
    Relocatable/NNP
    Object/NNP
    Code/NNP
    Absolute/NNP
    Machine/NNP
    Code/NNP
    Libraries/NNP)
  &/CC
  (NP
    Object/NNP
    Files/NNP
    Linker/NNP
    //NNP
    Loader/NNP
    Preprocessor/NNP
    Prof./NNP
    Dixita/NNP
    B/NNP
    Kagathara/NNP)
  #/#
  2170701/CD
  (/(
  (NP CD/NN)
  )/)
  /VBD
  (NP Unit/NNP)
  1/CD
  (NP –/NNP Introduction/NNP Compiler/NNP Design/NNP ‹/NNP)
  #/#
  (NP ›/NNP Context/NNP compiler/NN)
  (/(
  (NP Cousins/NNP compiler/NN)
  )/)
  (NP
    Skeletal/NNP
    Source/NNP
    Program/NNP
    Compiler/NNP
    Assembler/NNP
    Source/NNP
    Program/NNP
    Target/NNP
    Assembly/NNP
    Program/NNP
    Relocatable/NNP
    Object/NNP
    Code/NNP
    Absolute/NNP
    Machine/NNP
    Code/NNP
    Libraries/NNP)
  &/CC
  (NP
    Object/NNP
    Files/NNP
    Linker/NNP
    //NNP
    Loader/NNP
    Preprocessor/NNP
    Preprocessor/NNP)
  (NP Some/DT task/NN)
  performed/VBD
  (NP preprocessor/NN)
  :/:
  (NP Macro/JJ processing/NN)
  :/:
  (NP Allows/NNP)
  user/VBP
  (NP define/NN macros/NN)
  ./.) 


>> Noun Phrases are: 
 ['These system programs', 'Preprocessor Assembler Linker Loader Skeletal Source Program Compiler Assembler Source Program Target Assembly Program Relocatable Object Code Absolute Machine Code Libraries', 'Object Files Linker / Loader Preprocessor Prof. Dixita B Kagathara', 'CD', 'Unit', '– Introduction Compiler Design ‹', '› Context compiler', 'Cousins compiler', 'Skeletal Source Program Compiler Assembler Source Program Target Assembly Program Relocatable Object Code Absolute Machine Code Libraries', 'Object Files Linker / Loader Preprocessor Preprocessor', 'Some task', 'preprocessor', 'Macro processing', 'Allows', 'define macros']

>> Named Entities are: 
 [('PERSON', 'Assembler Linker Loader Skeletal Source Program Compiler Assembler Source Program Target Assembly Program Relocatable Object Code Absolute Machine Code Libraries'), ('PERSON', 'Object Files Linker'), ('ORGANIZATION', 'Unit'), ('ORGANIZATION', 'Cousins'), ('ORGANIZATION', 'Skeletal Source Program Compiler Assembler Source Program Target Assembly Program Relocatable Object Code Absolute Machine Code'), ('PERSON', 'Object Files Linker')] 

>> Stemming using Porter Stemmer: 
 [('These', 'these'), ('system', 'system'), ('programs', 'program'), (':', ':'), ('Preprocessor', 'preprocessor'), ('Assembler', 'assembl'), ('Linker', 'linker'), ('Loader', 'loader'), ('Skeletal', 'skelet'), ('Source', 'sourc'), ('Program', 'program'), ('Compiler', 'compil'), ('Assembler', 'assembl'), ('Source', 'sourc'), ('Program', 'program'), ('Target', 'target'), ('Assembly', 'assembl'), ('Program', 'program'), ('Relocatable', 'relocat'), ('Object', 'object'), ('Code', 'code'), ('Absolute', 'absolut'), ('Machine', 'machin'), ('Code', 'code'), ('Libraries', 'librari'), ('&', '&'), ('Object', 'object'), ('Files', 'file'), ('Linker', 'linker'), ('/', '/'), ('Loader', 'loader'), ('Preprocessor', 'preprocessor'), ('Prof.', 'prof.'), ('Dixita', 'dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '–'), ('Introduction', 'introduct'), ('Compiler', 'compil'), ('Design', 'design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Context', 'context'), ('compiler', 'compil'), ('(', '('), ('Cousins', 'cousin'), ('compiler', 'compil'), (')', ')'), ('Skeletal', 'skelet'), ('Source', 'sourc'), ('Program', 'program'), ('Compiler', 'compil'), ('Assembler', 'assembl'), ('Source', 'sourc'), ('Program', 'program'), ('Target', 'target'), ('Assembly', 'assembl'), ('Program', 'program'), ('Relocatable', 'relocat'), ('Object', 'object'), ('Code', 'code'), ('Absolute', 'absolut'), ('Machine', 'machin'), ('Code', 'code'), ('Libraries', 'librari'), ('&', '&'), ('Object', 'object'), ('Files', 'file'), ('Linker', 'linker'), ('/', '/'), ('Loader', 'loader'), ('Preprocessor', 'preprocessor'), ('Preprocessor', 'preprocessor'), ('Some', 'some'), ('task', 'task'), ('performed', 'perform'), ('preprocessor', 'preprocessor'), (':', ':'), ('Macro', 'macro'), ('processing', 'process'), (':', ':'), ('Allows', 'allow'), ('user', 'user'), ('define', 'defin'), ('macros', 'macro'), ('.', '.')]

>> Stemming using Snowball Stemmer: 
 [('These', 'these'), ('system', 'system'), ('programs', 'program'), (':', ':'), ('Preprocessor', 'preprocessor'), ('Assembler', 'assembl'), ('Linker', 'linker'), ('Loader', 'loader'), ('Skeletal', 'skelet'), ('Source', 'sourc'), ('Program', 'program'), ('Compiler', 'compil'), ('Assembler', 'assembl'), ('Source', 'sourc'), ('Program', 'program'), ('Target', 'target'), ('Assembly', 'assembl'), ('Program', 'program'), ('Relocatable', 'relocat'), ('Object', 'object'), ('Code', 'code'), ('Absolute', 'absolut'), ('Machine', 'machin'), ('Code', 'code'), ('Libraries', 'librari'), ('&', '&'), ('Object', 'object'), ('Files', 'file'), ('Linker', 'linker'), ('/', '/'), ('Loader', 'loader'), ('Preprocessor', 'preprocessor'), ('Prof.', 'prof.'), ('Dixita', 'dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '–'), ('Introduction', 'introduct'), ('Compiler', 'compil'), ('Design', 'design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Context', 'context'), ('compiler', 'compil'), ('(', '('), ('Cousins', 'cousin'), ('compiler', 'compil'), (')', ')'), ('Skeletal', 'skelet'), ('Source', 'sourc'), ('Program', 'program'), ('Compiler', 'compil'), ('Assembler', 'assembl'), ('Source', 'sourc'), ('Program', 'program'), ('Target', 'target'), ('Assembly', 'assembl'), ('Program', 'program'), ('Relocatable', 'relocat'), ('Object', 'object'), ('Code', 'code'), ('Absolute', 'absolut'), ('Machine', 'machin'), ('Code', 'code'), ('Libraries', 'librari'), ('&', '&'), ('Object', 'object'), ('Files', 'file'), ('Linker', 'linker'), ('/', '/'), ('Loader', 'loader'), ('Preprocessor', 'preprocessor'), ('Preprocessor', 'preprocessor'), ('Some', 'some'), ('task', 'task'), ('performed', 'perform'), ('preprocessor', 'preprocessor'), (':', ':'), ('Macro', 'macro'), ('processing', 'process'), (':', ':'), ('Allows', 'allow'), ('user', 'user'), ('define', 'defin'), ('macros', 'macro'), ('.', '.')]

>> Lemmatization: 
 [('These', 'These'), ('system', 'system'), ('programs', 'program'), (':', ':'), ('Preprocessor', 'Preprocessor'), ('Assembler', 'Assembler'), ('Linker', 'Linker'), ('Loader', 'Loader'), ('Skeletal', 'Skeletal'), ('Source', 'Source'), ('Program', 'Program'), ('Compiler', 'Compiler'), ('Assembler', 'Assembler'), ('Source', 'Source'), ('Program', 'Program'), ('Target', 'Target'), ('Assembly', 'Assembly'), ('Program', 'Program'), ('Relocatable', 'Relocatable'), ('Object', 'Object'), ('Code', 'Code'), ('Absolute', 'Absolute'), ('Machine', 'Machine'), ('Code', 'Code'), ('Libraries', 'Libraries'), ('&', '&'), ('Object', 'Object'), ('Files', 'Files'), ('Linker', 'Linker'), ('/', '/'), ('Loader', 'Loader'), ('Preprocessor', 'Preprocessor'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'CD'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'Unit'), ('1', '1'), ('–', '–'), ('Introduction', 'Introduction'), ('Compiler', 'Compiler'), ('Design', 'Design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Context', 'Context'), ('compiler', 'compiler'), ('(', '('), ('Cousins', 'Cousins'), ('compiler', 'compiler'), (')', ')'), ('Skeletal', 'Skeletal'), ('Source', 'Source'), ('Program', 'Program'), ('Compiler', 'Compiler'), ('Assembler', 'Assembler'), ('Source', 'Source'), ('Program', 'Program'), ('Target', 'Target'), ('Assembly', 'Assembly'), ('Program', 'Program'), ('Relocatable', 'Relocatable'), ('Object', 'Object'), ('Code', 'Code'), ('Absolute', 'Absolute'), ('Machine', 'Machine'), ('Code', 'Code'), ('Libraries', 'Libraries'), ('&', '&'), ('Object', 'Object'), ('Files', 'Files'), ('Linker', 'Linker'), ('/', '/'), ('Loader', 'Loader'), ('Preprocessor', 'Preprocessor'), ('Preprocessor', 'Preprocessor'), ('Some', 'Some'), ('task', 'task'), ('performed', 'performed'), ('preprocessor', 'preprocessor'), (':', ':'), ('Macro', 'Macro'), ('processing', 'processing'), (':', ':'), ('Allows', 'Allows'), ('user', 'user'), ('define', 'define'), ('macros', 'macro'), ('.', '.')]



============================ Sentence 37 =============================

Ex: #define PI 3.14159265358979323846 File inclusion: A preprocessor may include the header file into the program. 


>> Tokens are: 
 ['Ex', ':', '#', 'define', 'PI', '3.14159265358979323846', 'File', 'inclusion', ':', 'A', 'preprocessor', 'may', 'include', 'header', 'file', 'program', '.']

>> Bigrams are: 
 [('Ex', ':'), (':', '#'), ('#', 'define'), ('define', 'PI'), ('PI', '3.14159265358979323846'), ('3.14159265358979323846', 'File'), ('File', 'inclusion'), ('inclusion', ':'), (':', 'A'), ('A', 'preprocessor'), ('preprocessor', 'may'), ('may', 'include'), ('include', 'header'), ('header', 'file'), ('file', 'program'), ('program', '.')]

>> Trigrams are: 
 [('Ex', ':', '#'), (':', '#', 'define'), ('#', 'define', 'PI'), ('define', 'PI', '3.14159265358979323846'), ('PI', '3.14159265358979323846', 'File'), ('3.14159265358979323846', 'File', 'inclusion'), ('File', 'inclusion', ':'), ('inclusion', ':', 'A'), (':', 'A', 'preprocessor'), ('A', 'preprocessor', 'may'), ('preprocessor', 'may', 'include'), ('may', 'include', 'header'), ('include', 'header', 'file'), ('header', 'file', 'program'), ('file', 'program', '.')]

>> POS Tags are: 
 [('Ex', 'NN'), (':', ':'), ('#', '#'), ('define', 'VB'), ('PI', 'NNP'), ('3.14159265358979323846', 'CD'), ('File', 'NNP'), ('inclusion', 'NN'), (':', ':'), ('A', 'DT'), ('preprocessor', 'NN'), ('may', 'MD'), ('include', 'VB'), ('header', 'JJR'), ('file', 'JJ'), ('program', 'NN'), ('.', '.')]

 (S
  (NP Ex/NN)
  :/:
  #/#
  define/VB
  (NP PI/NNP)
  3.14159265358979323846/CD
  (NP File/NNP inclusion/NN)
  :/:
  (NP A/DT preprocessor/NN)
  may/MD
  include/VB
  header/JJR
  (NP file/JJ program/NN)
  ./.) 


>> Noun Phrases are: 
 ['Ex', 'PI', 'File inclusion', 'A preprocessor', 'file program']

>> Named Entities are: 
 [('GPE', 'Ex')] 

>> Stemming using Porter Stemmer: 
 [('Ex', 'ex'), (':', ':'), ('#', '#'), ('define', 'defin'), ('PI', 'pi'), ('3.14159265358979323846', '3.14159265358979323846'), ('File', 'file'), ('inclusion', 'inclus'), (':', ':'), ('A', 'a'), ('preprocessor', 'preprocessor'), ('may', 'may'), ('include', 'includ'), ('header', 'header'), ('file', 'file'), ('program', 'program'), ('.', '.')]

>> Stemming using Snowball Stemmer: 
 [('Ex', 'ex'), (':', ':'), ('#', '#'), ('define', 'defin'), ('PI', 'pi'), ('3.14159265358979323846', '3.14159265358979323846'), ('File', 'file'), ('inclusion', 'inclus'), (':', ':'), ('A', 'a'), ('preprocessor', 'preprocessor'), ('may', 'may'), ('include', 'includ'), ('header', 'header'), ('file', 'file'), ('program', 'program'), ('.', '.')]

>> Lemmatization: 
 [('Ex', 'Ex'), (':', ':'), ('#', '#'), ('define', 'define'), ('PI', 'PI'), ('3.14159265358979323846', '3.14159265358979323846'), ('File', 'File'), ('inclusion', 'inclusion'), (':', ':'), ('A', 'A'), ('preprocessor', 'preprocessor'), ('may', 'may'), ('include', 'include'), ('header', 'header'), ('file', 'file'), ('program', 'program'), ('.', '.')]



============================ Sentence 38 =============================

Ex: #include<stdio.h> Rational preprocessor: It provides built in macro for construct like while statement or if statement. 


>> Tokens are: 
 ['Ex', ':', '#', 'include', '<', 'stdio.h', '>', 'Rational', 'preprocessor', ':', 'It', 'provides', 'built', 'macro', 'construct', 'like', 'statement', 'statement', '.']

>> Bigrams are: 
 [('Ex', ':'), (':', '#'), ('#', 'include'), ('include', '<'), ('<', 'stdio.h'), ('stdio.h', '>'), ('>', 'Rational'), ('Rational', 'preprocessor'), ('preprocessor', ':'), (':', 'It'), ('It', 'provides'), ('provides', 'built'), ('built', 'macro'), ('macro', 'construct'), ('construct', 'like'), ('like', 'statement'), ('statement', 'statement'), ('statement', '.')]

>> Trigrams are: 
 [('Ex', ':', '#'), (':', '#', 'include'), ('#', 'include', '<'), ('include', '<', 'stdio.h'), ('<', 'stdio.h', '>'), ('stdio.h', '>', 'Rational'), ('>', 'Rational', 'preprocessor'), ('Rational', 'preprocessor', ':'), ('preprocessor', ':', 'It'), (':', 'It', 'provides'), ('It', 'provides', 'built'), ('provides', 'built', 'macro'), ('built', 'macro', 'construct'), ('macro', 'construct', 'like'), ('construct', 'like', 'statement'), ('like', 'statement', 'statement'), ('statement', 'statement', '.')]

>> POS Tags are: 
 [('Ex', 'NN'), (':', ':'), ('#', '#'), ('include', 'VBP'), ('<', 'JJ'), ('stdio.h', 'JJ'), ('>', 'NNP'), ('Rational', 'NNP'), ('preprocessor', 'NN'), (':', ':'), ('It', 'PRP'), ('provides', 'VBZ'), ('built', 'VBN'), ('macro', 'JJ'), ('construct', 'NN'), ('like', 'IN'), ('statement', 'NN'), ('statement', 'NN'), ('.', '.')]

 (S
  (NP Ex/NN)
  :/:
  #/#
  include/VBP
  (NP </JJ stdio.h/JJ >/NNP Rational/NNP preprocessor/NN)
  :/:
  It/PRP
  provides/VBZ
  built/VBN
  (NP macro/JJ construct/NN)
  like/IN
  (NP statement/NN statement/NN)
  ./.) 


>> Noun Phrases are: 
 ['Ex', '< stdio.h > Rational preprocessor', 'macro construct', 'statement statement']

>> Named Entities are: 
 [('GPE', 'Ex')] 

>> Stemming using Porter Stemmer: 
 [('Ex', 'ex'), (':', ':'), ('#', '#'), ('include', 'includ'), ('<', '<'), ('stdio.h', 'stdio.h'), ('>', '>'), ('Rational', 'ration'), ('preprocessor', 'preprocessor'), (':', ':'), ('It', 'it'), ('provides', 'provid'), ('built', 'built'), ('macro', 'macro'), ('construct', 'construct'), ('like', 'like'), ('statement', 'statement'), ('statement', 'statement'), ('.', '.')]

>> Stemming using Snowball Stemmer: 
 [('Ex', 'ex'), (':', ':'), ('#', '#'), ('include', 'includ'), ('<', '<'), ('stdio.h', 'stdio.h'), ('>', '>'), ('Rational', 'ration'), ('preprocessor', 'preprocessor'), (':', ':'), ('It', 'it'), ('provides', 'provid'), ('built', 'built'), ('macro', 'macro'), ('construct', 'construct'), ('like', 'like'), ('statement', 'statement'), ('statement', 'statement'), ('.', '.')]

>> Lemmatization: 
 [('Ex', 'Ex'), (':', ':'), ('#', '#'), ('include', 'include'), ('<', '<'), ('stdio.h', 'stdio.h'), ('>', '>'), ('Rational', 'Rational'), ('preprocessor', 'preprocessor'), (':', ':'), ('It', 'It'), ('provides', 'provides'), ('built', 'built'), ('macro', 'macro'), ('construct', 'construct'), ('like', 'like'), ('statement', 'statement'), ('statement', 'statement'), ('.', '.')]



============================ Sentence 39 =============================

Language extensions: Add capabilities to the language by using built-in macros. 


>> Tokens are: 
 ['Language', 'extensions', ':', 'Add', 'capabilities', 'language', 'using', 'built-in', 'macros', '.']

>> Bigrams are: 
 [('Language', 'extensions'), ('extensions', ':'), (':', 'Add'), ('Add', 'capabilities'), ('capabilities', 'language'), ('language', 'using'), ('using', 'built-in'), ('built-in', 'macros'), ('macros', '.')]

>> Trigrams are: 
 [('Language', 'extensions', ':'), ('extensions', ':', 'Add'), (':', 'Add', 'capabilities'), ('Add', 'capabilities', 'language'), ('capabilities', 'language', 'using'), ('language', 'using', 'built-in'), ('using', 'built-in', 'macros'), ('built-in', 'macros', '.')]

>> POS Tags are: 
 [('Language', 'JJ'), ('extensions', 'NNS'), (':', ':'), ('Add', 'NNP'), ('capabilities', 'NNS'), ('language', 'NN'), ('using', 'VBG'), ('built-in', 'JJ'), ('macros', 'NNS'), ('.', '.')]

 (S
  (NP Language/JJ extensions/NNS)
  :/:
  (NP Add/NNP capabilities/NNS language/NN)
  using/VBG
  (NP built-in/JJ macros/NNS)
  ./.) 


>> Noun Phrases are: 
 ['Language extensions', 'Add capabilities language', 'built-in macros']

>> Named Entities are: 
 [] 

>> Stemming using Porter Stemmer: 
 [('Language', 'languag'), ('extensions', 'extens'), (':', ':'), ('Add', 'add'), ('capabilities', 'capabl'), ('language', 'languag'), ('using', 'use'), ('built-in', 'built-in'), ('macros', 'macro'), ('.', '.')]

>> Stemming using Snowball Stemmer: 
 [('Language', 'languag'), ('extensions', 'extens'), (':', ':'), ('Add', 'add'), ('capabilities', 'capabl'), ('language', 'languag'), ('using', 'use'), ('built-in', 'built-in'), ('macros', 'macro'), ('.', '.')]

>> Lemmatization: 
 [('Language', 'Language'), ('extensions', 'extension'), (':', ':'), ('Add', 'Add'), ('capabilities', 'capability'), ('language', 'language'), ('using', 'using'), ('built-in', 'built-in'), ('macros', 'macro'), ('.', '.')]



============================ Sentence 40 =============================

Ex: the language equal is a database query language embedded in C. Statement beginning with ## are taken by preprocessor to be database access statement unrelated to C and translated into procedure call on routines that perform the database access. 


>> Tokens are: 
 ['Ex', ':', 'language', 'equal', 'database', 'query', 'language', 'embedded', 'C.', 'Statement', 'beginning', '#', '#', 'taken', 'preprocessor', 'database', 'access', 'statement', 'unrelated', 'C', 'translated', 'procedure', 'call', 'routines', 'perform', 'database', 'access', '.']

>> Bigrams are: 
 [('Ex', ':'), (':', 'language'), ('language', 'equal'), ('equal', 'database'), ('database', 'query'), ('query', 'language'), ('language', 'embedded'), ('embedded', 'C.'), ('C.', 'Statement'), ('Statement', 'beginning'), ('beginning', '#'), ('#', '#'), ('#', 'taken'), ('taken', 'preprocessor'), ('preprocessor', 'database'), ('database', 'access'), ('access', 'statement'), ('statement', 'unrelated'), ('unrelated', 'C'), ('C', 'translated'), ('translated', 'procedure'), ('procedure', 'call'), ('call', 'routines'), ('routines', 'perform'), ('perform', 'database'), ('database', 'access'), ('access', '.')]

>> Trigrams are: 
 [('Ex', ':', 'language'), (':', 'language', 'equal'), ('language', 'equal', 'database'), ('equal', 'database', 'query'), ('database', 'query', 'language'), ('query', 'language', 'embedded'), ('language', 'embedded', 'C.'), ('embedded', 'C.', 'Statement'), ('C.', 'Statement', 'beginning'), ('Statement', 'beginning', '#'), ('beginning', '#', '#'), ('#', '#', 'taken'), ('#', 'taken', 'preprocessor'), ('taken', 'preprocessor', 'database'), ('preprocessor', 'database', 'access'), ('database', 'access', 'statement'), ('access', 'statement', 'unrelated'), ('statement', 'unrelated', 'C'), ('unrelated', 'C', 'translated'), ('C', 'translated', 'procedure'), ('translated', 'procedure', 'call'), ('procedure', 'call', 'routines'), ('call', 'routines', 'perform'), ('routines', 'perform', 'database'), ('perform', 'database', 'access'), ('database', 'access', '.')]

>> POS Tags are: 
 [('Ex', 'NN'), (':', ':'), ('language', 'NN'), ('equal', 'JJ'), ('database', 'NN'), ('query', 'NN'), ('language', 'NN'), ('embedded', 'VBD'), ('C.', 'NNP'), ('Statement', 'NNP'), ('beginning', 'VBG'), ('#', '#'), ('#', '#'), ('taken', 'VBN'), ('preprocessor', 'NN'), ('database', 'NN'), ('access', 'NN'), ('statement', 'NN'), ('unrelated', 'JJ'), ('C', 'NNP'), ('translated', 'VBD'), ('procedure', 'NN'), ('call', 'NN'), ('routines', 'NNS'), ('perform', 'NN'), ('database', 'NN'), ('access', 'NN'), ('.', '.')]

 (S
  (NP Ex/NN)
  :/:
  (NP language/NN)
  (NP equal/JJ database/NN query/NN language/NN)
  embedded/VBD
  (NP C./NNP Statement/NNP)
  beginning/VBG
  #/#
  #/#
  taken/VBN
  (NP preprocessor/NN database/NN access/NN statement/NN)
  (NP unrelated/JJ C/NNP)
  translated/VBD
  (NP
    procedure/NN
    call/NN
    routines/NNS
    perform/NN
    database/NN
    access/NN)
  ./.) 


>> Noun Phrases are: 
 ['Ex', 'language', 'equal database query language', 'C. Statement', 'preprocessor database access statement', 'unrelated C', 'procedure call routines perform database access']

>> Named Entities are: 
 [('GPE', 'Ex')] 

>> Stemming using Porter Stemmer: 
 [('Ex', 'ex'), (':', ':'), ('language', 'languag'), ('equal', 'equal'), ('database', 'databas'), ('query', 'queri'), ('language', 'languag'), ('embedded', 'embed'), ('C.', 'c.'), ('Statement', 'statement'), ('beginning', 'begin'), ('#', '#'), ('#', '#'), ('taken', 'taken'), ('preprocessor', 'preprocessor'), ('database', 'databas'), ('access', 'access'), ('statement', 'statement'), ('unrelated', 'unrel'), ('C', 'c'), ('translated', 'translat'), ('procedure', 'procedur'), ('call', 'call'), ('routines', 'routin'), ('perform', 'perform'), ('database', 'databas'), ('access', 'access'), ('.', '.')]

>> Stemming using Snowball Stemmer: 
 [('Ex', 'ex'), (':', ':'), ('language', 'languag'), ('equal', 'equal'), ('database', 'databas'), ('query', 'queri'), ('language', 'languag'), ('embedded', 'embed'), ('C.', 'c.'), ('Statement', 'statement'), ('beginning', 'begin'), ('#', '#'), ('#', '#'), ('taken', 'taken'), ('preprocessor', 'preprocessor'), ('database', 'databas'), ('access', 'access'), ('statement', 'statement'), ('unrelated', 'unrel'), ('C', 'c'), ('translated', 'translat'), ('procedure', 'procedur'), ('call', 'call'), ('routines', 'routin'), ('perform', 'perform'), ('database', 'databas'), ('access', 'access'), ('.', '.')]

>> Lemmatization: 
 [('Ex', 'Ex'), (':', ':'), ('language', 'language'), ('equal', 'equal'), ('database', 'database'), ('query', 'query'), ('language', 'language'), ('embedded', 'embedded'), ('C.', 'C.'), ('Statement', 'Statement'), ('beginning', 'beginning'), ('#', '#'), ('#', '#'), ('taken', 'taken'), ('preprocessor', 'preprocessor'), ('database', 'database'), ('access', 'access'), ('statement', 'statement'), ('unrelated', 'unrelated'), ('C', 'C'), ('translated', 'translated'), ('procedure', 'procedure'), ('call', 'call'), ('routines', 'routine'), ('perform', 'perform'), ('database', 'database'), ('access', 'access'), ('.', '.')]



============================ Sentence 41 =============================

Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1 – Introduction to Compiler Design ‹#›  Context of compiler (Cousins of compiler)    Skeletal Source Program Compiler Assembler Source Program Target Assembly  Program Relocatable Object Code Absolute Machine  Code Libraries &  Object Files Linker / Loader Preprocessor Compiler A compiler is a program that reads a program written in source language and translates it into an equivalent program in target language. 


>> Tokens are: 
 ['Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '1', '–', 'Introduction', 'Compiler', 'Design', '‹', '#', '›', 'Context', 'compiler', '(', 'Cousins', 'compiler', ')', 'Skeletal', 'Source', 'Program', 'Compiler', 'Assembler', 'Source', 'Program', 'Target', 'Assembly', 'Program', 'Relocatable', 'Object', 'Code', 'Absolute', 'Machine', 'Code', 'Libraries', '&', 'Object', 'Files', 'Linker', '/', 'Loader', 'Preprocessor', 'Compiler', 'A', 'compiler', 'program', 'reads', 'program', 'written', 'source', 'language', 'translates', 'equivalent', 'program', 'target', 'language', '.']

>> Bigrams are: 
 [('Prof.', 'Dixita'), ('Dixita', 'B'), ('B', 'Kagathara'), ('Kagathara', '#'), ('#', '2170701'), ('2170701', '('), ('(', 'CD'), ('CD', ')'), (')', '\uf077'), ('\uf077', 'Unit'), ('Unit', '1'), ('1', '–'), ('–', 'Introduction'), ('Introduction', 'Compiler'), ('Compiler', 'Design'), ('Design', '‹'), ('‹', '#'), ('#', '›'), ('›', 'Context'), ('Context', 'compiler'), ('compiler', '('), ('(', 'Cousins'), ('Cousins', 'compiler'), ('compiler', ')'), (')', 'Skeletal'), ('Skeletal', 'Source'), ('Source', 'Program'), ('Program', 'Compiler'), ('Compiler', 'Assembler'), ('Assembler', 'Source'), ('Source', 'Program'), ('Program', 'Target'), ('Target', 'Assembly'), ('Assembly', 'Program'), ('Program', 'Relocatable'), ('Relocatable', 'Object'), ('Object', 'Code'), ('Code', 'Absolute'), ('Absolute', 'Machine'), ('Machine', 'Code'), ('Code', 'Libraries'), ('Libraries', '&'), ('&', 'Object'), ('Object', 'Files'), ('Files', 'Linker'), ('Linker', '/'), ('/', 'Loader'), ('Loader', 'Preprocessor'), ('Preprocessor', 'Compiler'), ('Compiler', 'A'), ('A', 'compiler'), ('compiler', 'program'), ('program', 'reads'), ('reads', 'program'), ('program', 'written'), ('written', 'source'), ('source', 'language'), ('language', 'translates'), ('translates', 'equivalent'), ('equivalent', 'program'), ('program', 'target'), ('target', 'language'), ('language', '.')]

>> Trigrams are: 
 [('Prof.', 'Dixita', 'B'), ('Dixita', 'B', 'Kagathara'), ('B', 'Kagathara', '#'), ('Kagathara', '#', '2170701'), ('#', '2170701', '('), ('2170701', '(', 'CD'), ('(', 'CD', ')'), ('CD', ')', '\uf077'), (')', '\uf077', 'Unit'), ('\uf077', 'Unit', '1'), ('Unit', '1', '–'), ('1', '–', 'Introduction'), ('–', 'Introduction', 'Compiler'), ('Introduction', 'Compiler', 'Design'), ('Compiler', 'Design', '‹'), ('Design', '‹', '#'), ('‹', '#', '›'), ('#', '›', 'Context'), ('›', 'Context', 'compiler'), ('Context', 'compiler', '('), ('compiler', '(', 'Cousins'), ('(', 'Cousins', 'compiler'), ('Cousins', 'compiler', ')'), ('compiler', ')', 'Skeletal'), (')', 'Skeletal', 'Source'), ('Skeletal', 'Source', 'Program'), ('Source', 'Program', 'Compiler'), ('Program', 'Compiler', 'Assembler'), ('Compiler', 'Assembler', 'Source'), ('Assembler', 'Source', 'Program'), ('Source', 'Program', 'Target'), ('Program', 'Target', 'Assembly'), ('Target', 'Assembly', 'Program'), ('Assembly', 'Program', 'Relocatable'), ('Program', 'Relocatable', 'Object'), ('Relocatable', 'Object', 'Code'), ('Object', 'Code', 'Absolute'), ('Code', 'Absolute', 'Machine'), ('Absolute', 'Machine', 'Code'), ('Machine', 'Code', 'Libraries'), ('Code', 'Libraries', '&'), ('Libraries', '&', 'Object'), ('&', 'Object', 'Files'), ('Object', 'Files', 'Linker'), ('Files', 'Linker', '/'), ('Linker', '/', 'Loader'), ('/', 'Loader', 'Preprocessor'), ('Loader', 'Preprocessor', 'Compiler'), ('Preprocessor', 'Compiler', 'A'), ('Compiler', 'A', 'compiler'), ('A', 'compiler', 'program'), ('compiler', 'program', 'reads'), ('program', 'reads', 'program'), ('reads', 'program', 'written'), ('program', 'written', 'source'), ('written', 'source', 'language'), ('source', 'language', 'translates'), ('language', 'translates', 'equivalent'), ('translates', 'equivalent', 'program'), ('equivalent', 'program', 'target'), ('program', 'target', 'language'), ('target', 'language', '.')]

>> POS Tags are: 
 [('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', '#'), ('2170701', 'CD'), ('(', '('), ('CD', 'NN'), (')', ')'), ('\uf077', 'VBD'), ('Unit', 'NNP'), ('1', 'CD'), ('–', 'NNP'), ('Introduction', 'NNP'), ('Compiler', 'NNP'), ('Design', 'NNP'), ('‹', 'NNP'), ('#', '#'), ('›', 'NNP'), ('Context', 'NNP'), ('compiler', 'NN'), ('(', '('), ('Cousins', 'NNP'), ('compiler', 'NN'), (')', ')'), ('Skeletal', 'NNP'), ('Source', 'NNP'), ('Program', 'NNP'), ('Compiler', 'NNP'), ('Assembler', 'NNP'), ('Source', 'NNP'), ('Program', 'NNP'), ('Target', 'NNP'), ('Assembly', 'NNP'), ('Program', 'NNP'), ('Relocatable', 'NNP'), ('Object', 'NNP'), ('Code', 'NNP'), ('Absolute', 'NNP'), ('Machine', 'NNP'), ('Code', 'NNP'), ('Libraries', 'NNP'), ('&', 'CC'), ('Object', 'NNP'), ('Files', 'NNP'), ('Linker', 'NNP'), ('/', 'NNP'), ('Loader', 'NNP'), ('Preprocessor', 'NNP'), ('Compiler', 'NNP'), ('A', 'NNP'), ('compiler', 'NN'), ('program', 'NN'), ('reads', 'VBZ'), ('program', 'NN'), ('written', 'VBN'), ('source', 'NN'), ('language', 'NN'), ('translates', 'VBZ'), ('equivalent', 'JJ'), ('program', 'NN'), ('target', 'NN'), ('language', 'NN'), ('.', '.')]

 (S
  (NP Prof./NNP Dixita/NNP B/NNP Kagathara/NNP)
  #/#
  2170701/CD
  (/(
  (NP CD/NN)
  )/)
  /VBD
  (NP Unit/NNP)
  1/CD
  (NP –/NNP Introduction/NNP Compiler/NNP Design/NNP ‹/NNP)
  #/#
  (NP ›/NNP Context/NNP compiler/NN)
  (/(
  (NP Cousins/NNP compiler/NN)
  )/)
  (NP
    Skeletal/NNP
    Source/NNP
    Program/NNP
    Compiler/NNP
    Assembler/NNP
    Source/NNP
    Program/NNP
    Target/NNP
    Assembly/NNP
    Program/NNP
    Relocatable/NNP
    Object/NNP
    Code/NNP
    Absolute/NNP
    Machine/NNP
    Code/NNP
    Libraries/NNP)
  &/CC
  (NP
    Object/NNP
    Files/NNP
    Linker/NNP
    //NNP
    Loader/NNP
    Preprocessor/NNP
    Compiler/NNP
    A/NNP
    compiler/NN
    program/NN)
  reads/VBZ
  (NP program/NN)
  written/VBN
  (NP source/NN language/NN)
  translates/VBZ
  (NP equivalent/JJ program/NN target/NN language/NN)
  ./.) 


>> Noun Phrases are: 
 ['Prof. Dixita B Kagathara', 'CD', 'Unit', '– Introduction Compiler Design ‹', '› Context compiler', 'Cousins compiler', 'Skeletal Source Program Compiler Assembler Source Program Target Assembly Program Relocatable Object Code Absolute Machine Code Libraries', 'Object Files Linker / Loader Preprocessor Compiler A compiler program', 'program', 'source language', 'equivalent program target language']

>> Named Entities are: 
 [('ORGANIZATION', 'Unit'), ('ORGANIZATION', 'Cousins'), ('ORGANIZATION', 'Skeletal Source Program Compiler Assembler Source Program Target Assembly Program Relocatable Object Code Absolute Machine Code'), ('PERSON', 'Object Files Linker')] 

>> Stemming using Porter Stemmer: 
 [('Prof.', 'prof.'), ('Dixita', 'dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '–'), ('Introduction', 'introduct'), ('Compiler', 'compil'), ('Design', 'design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Context', 'context'), ('compiler', 'compil'), ('(', '('), ('Cousins', 'cousin'), ('compiler', 'compil'), (')', ')'), ('Skeletal', 'skelet'), ('Source', 'sourc'), ('Program', 'program'), ('Compiler', 'compil'), ('Assembler', 'assembl'), ('Source', 'sourc'), ('Program', 'program'), ('Target', 'target'), ('Assembly', 'assembl'), ('Program', 'program'), ('Relocatable', 'relocat'), ('Object', 'object'), ('Code', 'code'), ('Absolute', 'absolut'), ('Machine', 'machin'), ('Code', 'code'), ('Libraries', 'librari'), ('&', '&'), ('Object', 'object'), ('Files', 'file'), ('Linker', 'linker'), ('/', '/'), ('Loader', 'loader'), ('Preprocessor', 'preprocessor'), ('Compiler', 'compil'), ('A', 'a'), ('compiler', 'compil'), ('program', 'program'), ('reads', 'read'), ('program', 'program'), ('written', 'written'), ('source', 'sourc'), ('language', 'languag'), ('translates', 'translat'), ('equivalent', 'equival'), ('program', 'program'), ('target', 'target'), ('language', 'languag'), ('.', '.')]

>> Stemming using Snowball Stemmer: 
 [('Prof.', 'prof.'), ('Dixita', 'dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '–'), ('Introduction', 'introduct'), ('Compiler', 'compil'), ('Design', 'design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Context', 'context'), ('compiler', 'compil'), ('(', '('), ('Cousins', 'cousin'), ('compiler', 'compil'), (')', ')'), ('Skeletal', 'skelet'), ('Source', 'sourc'), ('Program', 'program'), ('Compiler', 'compil'), ('Assembler', 'assembl'), ('Source', 'sourc'), ('Program', 'program'), ('Target', 'target'), ('Assembly', 'assembl'), ('Program', 'program'), ('Relocatable', 'relocat'), ('Object', 'object'), ('Code', 'code'), ('Absolute', 'absolut'), ('Machine', 'machin'), ('Code', 'code'), ('Libraries', 'librari'), ('&', '&'), ('Object', 'object'), ('Files', 'file'), ('Linker', 'linker'), ('/', '/'), ('Loader', 'loader'), ('Preprocessor', 'preprocessor'), ('Compiler', 'compil'), ('A', 'a'), ('compiler', 'compil'), ('program', 'program'), ('reads', 'read'), ('program', 'program'), ('written', 'written'), ('source', 'sourc'), ('language', 'languag'), ('translates', 'translat'), ('equivalent', 'equival'), ('program', 'program'), ('target', 'target'), ('language', 'languag'), ('.', '.')]

>> Lemmatization: 
 [('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'CD'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'Unit'), ('1', '1'), ('–', '–'), ('Introduction', 'Introduction'), ('Compiler', 'Compiler'), ('Design', 'Design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Context', 'Context'), ('compiler', 'compiler'), ('(', '('), ('Cousins', 'Cousins'), ('compiler', 'compiler'), (')', ')'), ('Skeletal', 'Skeletal'), ('Source', 'Source'), ('Program', 'Program'), ('Compiler', 'Compiler'), ('Assembler', 'Assembler'), ('Source', 'Source'), ('Program', 'Program'), ('Target', 'Target'), ('Assembly', 'Assembly'), ('Program', 'Program'), ('Relocatable', 'Relocatable'), ('Object', 'Object'), ('Code', 'Code'), ('Absolute', 'Absolute'), ('Machine', 'Machine'), ('Code', 'Code'), ('Libraries', 'Libraries'), ('&', '&'), ('Object', 'Object'), ('Files', 'Files'), ('Linker', 'Linker'), ('/', '/'), ('Loader', 'Loader'), ('Preprocessor', 'Preprocessor'), ('Compiler', 'Compiler'), ('A', 'A'), ('compiler', 'compiler'), ('program', 'program'), ('reads', 'read'), ('program', 'program'), ('written', 'written'), ('source', 'source'), ('language', 'language'), ('translates', 'translates'), ('equivalent', 'equivalent'), ('program', 'program'), ('target', 'target'), ('language', 'language'), ('.', '.')]



============================ Sentence 42 =============================

Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1 – Introduction to Compiler Design ‹#›  Context of compiler (Cousins of compiler)    Skeletal Source Program Compiler Assembler Source Program Target Assembly  Program Relocatable Object Code Absolute Machine  Code Libraries &  Object Files Linker / Loader Preprocessor Assembler Assembler is a translator which takes the assembly program (mnemonic) as an input and generates the machine code as an output. 


>> Tokens are: 
 ['Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '1', '–', 'Introduction', 'Compiler', 'Design', '‹', '#', '›', 'Context', 'compiler', '(', 'Cousins', 'compiler', ')', 'Skeletal', 'Source', 'Program', 'Compiler', 'Assembler', 'Source', 'Program', 'Target', 'Assembly', 'Program', 'Relocatable', 'Object', 'Code', 'Absolute', 'Machine', 'Code', 'Libraries', '&', 'Object', 'Files', 'Linker', '/', 'Loader', 'Preprocessor', 'Assembler', 'Assembler', 'translator', 'takes', 'assembly', 'program', '(', 'mnemonic', ')', 'input', 'generates', 'machine', 'code', 'output', '.']

>> Bigrams are: 
 [('Prof.', 'Dixita'), ('Dixita', 'B'), ('B', 'Kagathara'), ('Kagathara', '#'), ('#', '2170701'), ('2170701', '('), ('(', 'CD'), ('CD', ')'), (')', '\uf077'), ('\uf077', 'Unit'), ('Unit', '1'), ('1', '–'), ('–', 'Introduction'), ('Introduction', 'Compiler'), ('Compiler', 'Design'), ('Design', '‹'), ('‹', '#'), ('#', '›'), ('›', 'Context'), ('Context', 'compiler'), ('compiler', '('), ('(', 'Cousins'), ('Cousins', 'compiler'), ('compiler', ')'), (')', 'Skeletal'), ('Skeletal', 'Source'), ('Source', 'Program'), ('Program', 'Compiler'), ('Compiler', 'Assembler'), ('Assembler', 'Source'), ('Source', 'Program'), ('Program', 'Target'), ('Target', 'Assembly'), ('Assembly', 'Program'), ('Program', 'Relocatable'), ('Relocatable', 'Object'), ('Object', 'Code'), ('Code', 'Absolute'), ('Absolute', 'Machine'), ('Machine', 'Code'), ('Code', 'Libraries'), ('Libraries', '&'), ('&', 'Object'), ('Object', 'Files'), ('Files', 'Linker'), ('Linker', '/'), ('/', 'Loader'), ('Loader', 'Preprocessor'), ('Preprocessor', 'Assembler'), ('Assembler', 'Assembler'), ('Assembler', 'translator'), ('translator', 'takes'), ('takes', 'assembly'), ('assembly', 'program'), ('program', '('), ('(', 'mnemonic'), ('mnemonic', ')'), (')', 'input'), ('input', 'generates'), ('generates', 'machine'), ('machine', 'code'), ('code', 'output'), ('output', '.')]

>> Trigrams are: 
 [('Prof.', 'Dixita', 'B'), ('Dixita', 'B', 'Kagathara'), ('B', 'Kagathara', '#'), ('Kagathara', '#', '2170701'), ('#', '2170701', '('), ('2170701', '(', 'CD'), ('(', 'CD', ')'), ('CD', ')', '\uf077'), (')', '\uf077', 'Unit'), ('\uf077', 'Unit', '1'), ('Unit', '1', '–'), ('1', '–', 'Introduction'), ('–', 'Introduction', 'Compiler'), ('Introduction', 'Compiler', 'Design'), ('Compiler', 'Design', '‹'), ('Design', '‹', '#'), ('‹', '#', '›'), ('#', '›', 'Context'), ('›', 'Context', 'compiler'), ('Context', 'compiler', '('), ('compiler', '(', 'Cousins'), ('(', 'Cousins', 'compiler'), ('Cousins', 'compiler', ')'), ('compiler', ')', 'Skeletal'), (')', 'Skeletal', 'Source'), ('Skeletal', 'Source', 'Program'), ('Source', 'Program', 'Compiler'), ('Program', 'Compiler', 'Assembler'), ('Compiler', 'Assembler', 'Source'), ('Assembler', 'Source', 'Program'), ('Source', 'Program', 'Target'), ('Program', 'Target', 'Assembly'), ('Target', 'Assembly', 'Program'), ('Assembly', 'Program', 'Relocatable'), ('Program', 'Relocatable', 'Object'), ('Relocatable', 'Object', 'Code'), ('Object', 'Code', 'Absolute'), ('Code', 'Absolute', 'Machine'), ('Absolute', 'Machine', 'Code'), ('Machine', 'Code', 'Libraries'), ('Code', 'Libraries', '&'), ('Libraries', '&', 'Object'), ('&', 'Object', 'Files'), ('Object', 'Files', 'Linker'), ('Files', 'Linker', '/'), ('Linker', '/', 'Loader'), ('/', 'Loader', 'Preprocessor'), ('Loader', 'Preprocessor', 'Assembler'), ('Preprocessor', 'Assembler', 'Assembler'), ('Assembler', 'Assembler', 'translator'), ('Assembler', 'translator', 'takes'), ('translator', 'takes', 'assembly'), ('takes', 'assembly', 'program'), ('assembly', 'program', '('), ('program', '(', 'mnemonic'), ('(', 'mnemonic', ')'), ('mnemonic', ')', 'input'), (')', 'input', 'generates'), ('input', 'generates', 'machine'), ('generates', 'machine', 'code'), ('machine', 'code', 'output'), ('code', 'output', '.')]

>> POS Tags are: 
 [('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', '#'), ('2170701', 'CD'), ('(', '('), ('CD', 'NN'), (')', ')'), ('\uf077', 'VBD'), ('Unit', 'NNP'), ('1', 'CD'), ('–', 'NNP'), ('Introduction', 'NNP'), ('Compiler', 'NNP'), ('Design', 'NNP'), ('‹', 'NNP'), ('#', '#'), ('›', 'NNP'), ('Context', 'NNP'), ('compiler', 'NN'), ('(', '('), ('Cousins', 'NNP'), ('compiler', 'NN'), (')', ')'), ('Skeletal', 'NNP'), ('Source', 'NNP'), ('Program', 'NNP'), ('Compiler', 'NNP'), ('Assembler', 'NNP'), ('Source', 'NNP'), ('Program', 'NNP'), ('Target', 'NNP'), ('Assembly', 'NNP'), ('Program', 'NNP'), ('Relocatable', 'NNP'), ('Object', 'NNP'), ('Code', 'NNP'), ('Absolute', 'NNP'), ('Machine', 'NNP'), ('Code', 'NNP'), ('Libraries', 'NNP'), ('&', 'CC'), ('Object', 'NNP'), ('Files', 'NNP'), ('Linker', 'NNP'), ('/', 'NNP'), ('Loader', 'NNP'), ('Preprocessor', 'NNP'), ('Assembler', 'NNP'), ('Assembler', 'NNP'), ('translator', 'NN'), ('takes', 'VBZ'), ('assembly', 'RB'), ('program', 'NN'), ('(', '('), ('mnemonic', 'JJ'), (')', ')'), ('input', 'NN'), ('generates', 'NNS'), ('machine', 'NN'), ('code', 'NN'), ('output', 'NN'), ('.', '.')]

 (S
  (NP Prof./NNP Dixita/NNP B/NNP Kagathara/NNP)
  #/#
  2170701/CD
  (/(
  (NP CD/NN)
  )/)
  /VBD
  (NP Unit/NNP)
  1/CD
  (NP –/NNP Introduction/NNP Compiler/NNP Design/NNP ‹/NNP)
  #/#
  (NP ›/NNP Context/NNP compiler/NN)
  (/(
  (NP Cousins/NNP compiler/NN)
  )/)
  (NP
    Skeletal/NNP
    Source/NNP
    Program/NNP
    Compiler/NNP
    Assembler/NNP
    Source/NNP
    Program/NNP
    Target/NNP
    Assembly/NNP
    Program/NNP
    Relocatable/NNP
    Object/NNP
    Code/NNP
    Absolute/NNP
    Machine/NNP
    Code/NNP
    Libraries/NNP)
  &/CC
  (NP
    Object/NNP
    Files/NNP
    Linker/NNP
    //NNP
    Loader/NNP
    Preprocessor/NNP
    Assembler/NNP
    Assembler/NNP
    translator/NN)
  takes/VBZ
  assembly/RB
  (NP program/NN)
  (/(
  mnemonic/JJ
  )/)
  (NP input/NN generates/NNS machine/NN code/NN output/NN)
  ./.) 


>> Noun Phrases are: 
 ['Prof. Dixita B Kagathara', 'CD', 'Unit', '– Introduction Compiler Design ‹', '› Context compiler', 'Cousins compiler', 'Skeletal Source Program Compiler Assembler Source Program Target Assembly Program Relocatable Object Code Absolute Machine Code Libraries', 'Object Files Linker / Loader Preprocessor Assembler Assembler translator', 'program', 'input generates machine code output']

>> Named Entities are: 
 [('ORGANIZATION', 'Unit'), ('ORGANIZATION', 'Cousins'), ('ORGANIZATION', 'Skeletal Source Program Compiler Assembler Source Program Target Assembly Program Relocatable Object Code Absolute Machine Code'), ('PERSON', 'Object Files Linker'), ('PERSON', 'Assembler Assembler')] 

>> Stemming using Porter Stemmer: 
 [('Prof.', 'prof.'), ('Dixita', 'dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '–'), ('Introduction', 'introduct'), ('Compiler', 'compil'), ('Design', 'design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Context', 'context'), ('compiler', 'compil'), ('(', '('), ('Cousins', 'cousin'), ('compiler', 'compil'), (')', ')'), ('Skeletal', 'skelet'), ('Source', 'sourc'), ('Program', 'program'), ('Compiler', 'compil'), ('Assembler', 'assembl'), ('Source', 'sourc'), ('Program', 'program'), ('Target', 'target'), ('Assembly', 'assembl'), ('Program', 'program'), ('Relocatable', 'relocat'), ('Object', 'object'), ('Code', 'code'), ('Absolute', 'absolut'), ('Machine', 'machin'), ('Code', 'code'), ('Libraries', 'librari'), ('&', '&'), ('Object', 'object'), ('Files', 'file'), ('Linker', 'linker'), ('/', '/'), ('Loader', 'loader'), ('Preprocessor', 'preprocessor'), ('Assembler', 'assembl'), ('Assembler', 'assembl'), ('translator', 'translat'), ('takes', 'take'), ('assembly', 'assembl'), ('program', 'program'), ('(', '('), ('mnemonic', 'mnemon'), (')', ')'), ('input', 'input'), ('generates', 'gener'), ('machine', 'machin'), ('code', 'code'), ('output', 'output'), ('.', '.')]

>> Stemming using Snowball Stemmer: 
 [('Prof.', 'prof.'), ('Dixita', 'dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '–'), ('Introduction', 'introduct'), ('Compiler', 'compil'), ('Design', 'design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Context', 'context'), ('compiler', 'compil'), ('(', '('), ('Cousins', 'cousin'), ('compiler', 'compil'), (')', ')'), ('Skeletal', 'skelet'), ('Source', 'sourc'), ('Program', 'program'), ('Compiler', 'compil'), ('Assembler', 'assembl'), ('Source', 'sourc'), ('Program', 'program'), ('Target', 'target'), ('Assembly', 'assembl'), ('Program', 'program'), ('Relocatable', 'relocat'), ('Object', 'object'), ('Code', 'code'), ('Absolute', 'absolut'), ('Machine', 'machin'), ('Code', 'code'), ('Libraries', 'librari'), ('&', '&'), ('Object', 'object'), ('Files', 'file'), ('Linker', 'linker'), ('/', '/'), ('Loader', 'loader'), ('Preprocessor', 'preprocessor'), ('Assembler', 'assembl'), ('Assembler', 'assembl'), ('translator', 'translat'), ('takes', 'take'), ('assembly', 'assembl'), ('program', 'program'), ('(', '('), ('mnemonic', 'mnemon'), (')', ')'), ('input', 'input'), ('generates', 'generat'), ('machine', 'machin'), ('code', 'code'), ('output', 'output'), ('.', '.')]

>> Lemmatization: 
 [('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'CD'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'Unit'), ('1', '1'), ('–', '–'), ('Introduction', 'Introduction'), ('Compiler', 'Compiler'), ('Design', 'Design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Context', 'Context'), ('compiler', 'compiler'), ('(', '('), ('Cousins', 'Cousins'), ('compiler', 'compiler'), (')', ')'), ('Skeletal', 'Skeletal'), ('Source', 'Source'), ('Program', 'Program'), ('Compiler', 'Compiler'), ('Assembler', 'Assembler'), ('Source', 'Source'), ('Program', 'Program'), ('Target', 'Target'), ('Assembly', 'Assembly'), ('Program', 'Program'), ('Relocatable', 'Relocatable'), ('Object', 'Object'), ('Code', 'Code'), ('Absolute', 'Absolute'), ('Machine', 'Machine'), ('Code', 'Code'), ('Libraries', 'Libraries'), ('&', '&'), ('Object', 'Object'), ('Files', 'Files'), ('Linker', 'Linker'), ('/', '/'), ('Loader', 'Loader'), ('Preprocessor', 'Preprocessor'), ('Assembler', 'Assembler'), ('Assembler', 'Assembler'), ('translator', 'translator'), ('takes', 'take'), ('assembly', 'assembly'), ('program', 'program'), ('(', '('), ('mnemonic', 'mnemonic'), (')', ')'), ('input', 'input'), ('generates', 'generates'), ('machine', 'machine'), ('code', 'code'), ('output', 'output'), ('.', '.')]



============================ Sentence 43 =============================

Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1 – Introduction to Compiler Design ‹#›  Context of compiler (Cousins of compiler)    Skeletal Source Program Compiler Assembler Source Program Target Assembly  Program Relocatable Object Code Absolute Machine  Code Libraries &  Object Files Linker / Loader Preprocessor Linker Linker  makes a single program from a several files of relocatable machine code. 


>> Tokens are: 
 ['Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '1', '–', 'Introduction', 'Compiler', 'Design', '‹', '#', '›', 'Context', 'compiler', '(', 'Cousins', 'compiler', ')', 'Skeletal', 'Source', 'Program', 'Compiler', 'Assembler', 'Source', 'Program', 'Target', 'Assembly', 'Program', 'Relocatable', 'Object', 'Code', 'Absolute', 'Machine', 'Code', 'Libraries', '&', 'Object', 'Files', 'Linker', '/', 'Loader', 'Preprocessor', 'Linker', 'Linker', 'makes', 'single', 'program', 'several', 'files', 'relocatable', 'machine', 'code', '.']

>> Bigrams are: 
 [('Prof.', 'Dixita'), ('Dixita', 'B'), ('B', 'Kagathara'), ('Kagathara', '#'), ('#', '2170701'), ('2170701', '('), ('(', 'CD'), ('CD', ')'), (')', '\uf077'), ('\uf077', 'Unit'), ('Unit', '1'), ('1', '–'), ('–', 'Introduction'), ('Introduction', 'Compiler'), ('Compiler', 'Design'), ('Design', '‹'), ('‹', '#'), ('#', '›'), ('›', 'Context'), ('Context', 'compiler'), ('compiler', '('), ('(', 'Cousins'), ('Cousins', 'compiler'), ('compiler', ')'), (')', 'Skeletal'), ('Skeletal', 'Source'), ('Source', 'Program'), ('Program', 'Compiler'), ('Compiler', 'Assembler'), ('Assembler', 'Source'), ('Source', 'Program'), ('Program', 'Target'), ('Target', 'Assembly'), ('Assembly', 'Program'), ('Program', 'Relocatable'), ('Relocatable', 'Object'), ('Object', 'Code'), ('Code', 'Absolute'), ('Absolute', 'Machine'), ('Machine', 'Code'), ('Code', 'Libraries'), ('Libraries', '&'), ('&', 'Object'), ('Object', 'Files'), ('Files', 'Linker'), ('Linker', '/'), ('/', 'Loader'), ('Loader', 'Preprocessor'), ('Preprocessor', 'Linker'), ('Linker', 'Linker'), ('Linker', 'makes'), ('makes', 'single'), ('single', 'program'), ('program', 'several'), ('several', 'files'), ('files', 'relocatable'), ('relocatable', 'machine'), ('machine', 'code'), ('code', '.')]

>> Trigrams are: 
 [('Prof.', 'Dixita', 'B'), ('Dixita', 'B', 'Kagathara'), ('B', 'Kagathara', '#'), ('Kagathara', '#', '2170701'), ('#', '2170701', '('), ('2170701', '(', 'CD'), ('(', 'CD', ')'), ('CD', ')', '\uf077'), (')', '\uf077', 'Unit'), ('\uf077', 'Unit', '1'), ('Unit', '1', '–'), ('1', '–', 'Introduction'), ('–', 'Introduction', 'Compiler'), ('Introduction', 'Compiler', 'Design'), ('Compiler', 'Design', '‹'), ('Design', '‹', '#'), ('‹', '#', '›'), ('#', '›', 'Context'), ('›', 'Context', 'compiler'), ('Context', 'compiler', '('), ('compiler', '(', 'Cousins'), ('(', 'Cousins', 'compiler'), ('Cousins', 'compiler', ')'), ('compiler', ')', 'Skeletal'), (')', 'Skeletal', 'Source'), ('Skeletal', 'Source', 'Program'), ('Source', 'Program', 'Compiler'), ('Program', 'Compiler', 'Assembler'), ('Compiler', 'Assembler', 'Source'), ('Assembler', 'Source', 'Program'), ('Source', 'Program', 'Target'), ('Program', 'Target', 'Assembly'), ('Target', 'Assembly', 'Program'), ('Assembly', 'Program', 'Relocatable'), ('Program', 'Relocatable', 'Object'), ('Relocatable', 'Object', 'Code'), ('Object', 'Code', 'Absolute'), ('Code', 'Absolute', 'Machine'), ('Absolute', 'Machine', 'Code'), ('Machine', 'Code', 'Libraries'), ('Code', 'Libraries', '&'), ('Libraries', '&', 'Object'), ('&', 'Object', 'Files'), ('Object', 'Files', 'Linker'), ('Files', 'Linker', '/'), ('Linker', '/', 'Loader'), ('/', 'Loader', 'Preprocessor'), ('Loader', 'Preprocessor', 'Linker'), ('Preprocessor', 'Linker', 'Linker'), ('Linker', 'Linker', 'makes'), ('Linker', 'makes', 'single'), ('makes', 'single', 'program'), ('single', 'program', 'several'), ('program', 'several', 'files'), ('several', 'files', 'relocatable'), ('files', 'relocatable', 'machine'), ('relocatable', 'machine', 'code'), ('machine', 'code', '.')]

>> POS Tags are: 
 [('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', '#'), ('2170701', 'CD'), ('(', '('), ('CD', 'NN'), (')', ')'), ('\uf077', 'VBD'), ('Unit', 'NNP'), ('1', 'CD'), ('–', 'NNP'), ('Introduction', 'NNP'), ('Compiler', 'NNP'), ('Design', 'NNP'), ('‹', 'NNP'), ('#', '#'), ('›', 'NNP'), ('Context', 'NNP'), ('compiler', 'NN'), ('(', '('), ('Cousins', 'NNP'), ('compiler', 'NN'), (')', ')'), ('Skeletal', 'NNP'), ('Source', 'NNP'), ('Program', 'NNP'), ('Compiler', 'NNP'), ('Assembler', 'NNP'), ('Source', 'NNP'), ('Program', 'NNP'), ('Target', 'NNP'), ('Assembly', 'NNP'), ('Program', 'NNP'), ('Relocatable', 'NNP'), ('Object', 'NNP'), ('Code', 'NNP'), ('Absolute', 'NNP'), ('Machine', 'NNP'), ('Code', 'NNP'), ('Libraries', 'NNP'), ('&', 'CC'), ('Object', 'NNP'), ('Files', 'NNP'), ('Linker', 'NNP'), ('/', 'NNP'), ('Loader', 'NNP'), ('Preprocessor', 'NNP'), ('Linker', 'NNP'), ('Linker', 'NNP'), ('makes', 'VBZ'), ('single', 'JJ'), ('program', 'NN'), ('several', 'JJ'), ('files', 'NNS'), ('relocatable', 'JJ'), ('machine', 'NN'), ('code', 'NN'), ('.', '.')]

 (S
  (NP Prof./NNP Dixita/NNP B/NNP Kagathara/NNP)
  #/#
  2170701/CD
  (/(
  (NP CD/NN)
  )/)
  /VBD
  (NP Unit/NNP)
  1/CD
  (NP –/NNP Introduction/NNP Compiler/NNP Design/NNP ‹/NNP)
  #/#
  (NP ›/NNP Context/NNP compiler/NN)
  (/(
  (NP Cousins/NNP compiler/NN)
  )/)
  (NP
    Skeletal/NNP
    Source/NNP
    Program/NNP
    Compiler/NNP
    Assembler/NNP
    Source/NNP
    Program/NNP
    Target/NNP
    Assembly/NNP
    Program/NNP
    Relocatable/NNP
    Object/NNP
    Code/NNP
    Absolute/NNP
    Machine/NNP
    Code/NNP
    Libraries/NNP)
  &/CC
  (NP
    Object/NNP
    Files/NNP
    Linker/NNP
    //NNP
    Loader/NNP
    Preprocessor/NNP
    Linker/NNP
    Linker/NNP)
  makes/VBZ
  (NP single/JJ program/NN)
  (NP several/JJ files/NNS)
  (NP relocatable/JJ machine/NN code/NN)
  ./.) 


>> Noun Phrases are: 
 ['Prof. Dixita B Kagathara', 'CD', 'Unit', '– Introduction Compiler Design ‹', '› Context compiler', 'Cousins compiler', 'Skeletal Source Program Compiler Assembler Source Program Target Assembly Program Relocatable Object Code Absolute Machine Code Libraries', 'Object Files Linker / Loader Preprocessor Linker Linker', 'single program', 'several files', 'relocatable machine code']

>> Named Entities are: 
 [('ORGANIZATION', 'Unit'), ('ORGANIZATION', 'Cousins'), ('ORGANIZATION', 'Skeletal Source Program Compiler Assembler Source Program Target Assembly Program Relocatable Object Code Absolute Machine Code'), ('PERSON', 'Object Files Linker'), ('PERSON', 'Linker Linker')] 

>> Stemming using Porter Stemmer: 
 [('Prof.', 'prof.'), ('Dixita', 'dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '–'), ('Introduction', 'introduct'), ('Compiler', 'compil'), ('Design', 'design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Context', 'context'), ('compiler', 'compil'), ('(', '('), ('Cousins', 'cousin'), ('compiler', 'compil'), (')', ')'), ('Skeletal', 'skelet'), ('Source', 'sourc'), ('Program', 'program'), ('Compiler', 'compil'), ('Assembler', 'assembl'), ('Source', 'sourc'), ('Program', 'program'), ('Target', 'target'), ('Assembly', 'assembl'), ('Program', 'program'), ('Relocatable', 'relocat'), ('Object', 'object'), ('Code', 'code'), ('Absolute', 'absolut'), ('Machine', 'machin'), ('Code', 'code'), ('Libraries', 'librari'), ('&', '&'), ('Object', 'object'), ('Files', 'file'), ('Linker', 'linker'), ('/', '/'), ('Loader', 'loader'), ('Preprocessor', 'preprocessor'), ('Linker', 'linker'), ('Linker', 'linker'), ('makes', 'make'), ('single', 'singl'), ('program', 'program'), ('several', 'sever'), ('files', 'file'), ('relocatable', 'relocat'), ('machine', 'machin'), ('code', 'code'), ('.', '.')]

>> Stemming using Snowball Stemmer: 
 [('Prof.', 'prof.'), ('Dixita', 'dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '–'), ('Introduction', 'introduct'), ('Compiler', 'compil'), ('Design', 'design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Context', 'context'), ('compiler', 'compil'), ('(', '('), ('Cousins', 'cousin'), ('compiler', 'compil'), (')', ')'), ('Skeletal', 'skelet'), ('Source', 'sourc'), ('Program', 'program'), ('Compiler', 'compil'), ('Assembler', 'assembl'), ('Source', 'sourc'), ('Program', 'program'), ('Target', 'target'), ('Assembly', 'assembl'), ('Program', 'program'), ('Relocatable', 'relocat'), ('Object', 'object'), ('Code', 'code'), ('Absolute', 'absolut'), ('Machine', 'machin'), ('Code', 'code'), ('Libraries', 'librari'), ('&', '&'), ('Object', 'object'), ('Files', 'file'), ('Linker', 'linker'), ('/', '/'), ('Loader', 'loader'), ('Preprocessor', 'preprocessor'), ('Linker', 'linker'), ('Linker', 'linker'), ('makes', 'make'), ('single', 'singl'), ('program', 'program'), ('several', 'sever'), ('files', 'file'), ('relocatable', 'relocat'), ('machine', 'machin'), ('code', 'code'), ('.', '.')]

>> Lemmatization: 
 [('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'CD'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'Unit'), ('1', '1'), ('–', '–'), ('Introduction', 'Introduction'), ('Compiler', 'Compiler'), ('Design', 'Design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Context', 'Context'), ('compiler', 'compiler'), ('(', '('), ('Cousins', 'Cousins'), ('compiler', 'compiler'), (')', ')'), ('Skeletal', 'Skeletal'), ('Source', 'Source'), ('Program', 'Program'), ('Compiler', 'Compiler'), ('Assembler', 'Assembler'), ('Source', 'Source'), ('Program', 'Program'), ('Target', 'Target'), ('Assembly', 'Assembly'), ('Program', 'Program'), ('Relocatable', 'Relocatable'), ('Object', 'Object'), ('Code', 'Code'), ('Absolute', 'Absolute'), ('Machine', 'Machine'), ('Code', 'Code'), ('Libraries', 'Libraries'), ('&', '&'), ('Object', 'Object'), ('Files', 'Files'), ('Linker', 'Linker'), ('/', '/'), ('Loader', 'Loader'), ('Preprocessor', 'Preprocessor'), ('Linker', 'Linker'), ('Linker', 'Linker'), ('makes', 'make'), ('single', 'single'), ('program', 'program'), ('several', 'several'), ('files', 'file'), ('relocatable', 'relocatable'), ('machine', 'machine'), ('code', 'code'), ('.', '.')]



============================ Sentence 44 =============================

These files may have been the result of several different compilation, and one or more library files. 


>> Tokens are: 
 ['These', 'files', 'may', 'result', 'several', 'different', 'compilation', ',', 'one', 'library', 'files', '.']

>> Bigrams are: 
 [('These', 'files'), ('files', 'may'), ('may', 'result'), ('result', 'several'), ('several', 'different'), ('different', 'compilation'), ('compilation', ','), (',', 'one'), ('one', 'library'), ('library', 'files'), ('files', '.')]

>> Trigrams are: 
 [('These', 'files', 'may'), ('files', 'may', 'result'), ('may', 'result', 'several'), ('result', 'several', 'different'), ('several', 'different', 'compilation'), ('different', 'compilation', ','), ('compilation', ',', 'one'), (',', 'one', 'library'), ('one', 'library', 'files'), ('library', 'files', '.')]

>> POS Tags are: 
 [('These', 'DT'), ('files', 'NNS'), ('may', 'MD'), ('result', 'VB'), ('several', 'JJ'), ('different', 'JJ'), ('compilation', 'NN'), (',', ','), ('one', 'CD'), ('library', 'NN'), ('files', 'NNS'), ('.', '.')]

 (S
  (NP These/DT files/NNS)
  may/MD
  result/VB
  (NP several/JJ different/JJ compilation/NN)
  ,/,
  one/CD
  (NP library/NN files/NNS)
  ./.) 


>> Noun Phrases are: 
 ['These files', 'several different compilation', 'library files']

>> Named Entities are: 
 [] 

>> Stemming using Porter Stemmer: 
 [('These', 'these'), ('files', 'file'), ('may', 'may'), ('result', 'result'), ('several', 'sever'), ('different', 'differ'), ('compilation', 'compil'), (',', ','), ('one', 'one'), ('library', 'librari'), ('files', 'file'), ('.', '.')]

>> Stemming using Snowball Stemmer: 
 [('These', 'these'), ('files', 'file'), ('may', 'may'), ('result', 'result'), ('several', 'sever'), ('different', 'differ'), ('compilation', 'compil'), (',', ','), ('one', 'one'), ('library', 'librari'), ('files', 'file'), ('.', '.')]

>> Lemmatization: 
 [('These', 'These'), ('files', 'file'), ('may', 'may'), ('result', 'result'), ('several', 'several'), ('different', 'different'), ('compilation', 'compilation'), (',', ','), ('one', 'one'), ('library', 'library'), ('files', 'file'), ('.', '.')]



============================ Sentence 45 =============================

Loader The process of loading consists of: Taking relocatable machine code Altering the relocatable address  Placing the altered instructions and data in memory at the proper location. 


>> Tokens are: 
 ['Loader', 'The', 'process', 'loading', 'consists', ':', 'Taking', 'relocatable', 'machine', 'code', 'Altering', 'relocatable', 'address', 'Placing', 'altered', 'instructions', 'data', 'memory', 'proper', 'location', '.']

>> Bigrams are: 
 [('Loader', 'The'), ('The', 'process'), ('process', 'loading'), ('loading', 'consists'), ('consists', ':'), (':', 'Taking'), ('Taking', 'relocatable'), ('relocatable', 'machine'), ('machine', 'code'), ('code', 'Altering'), ('Altering', 'relocatable'), ('relocatable', 'address'), ('address', 'Placing'), ('Placing', 'altered'), ('altered', 'instructions'), ('instructions', 'data'), ('data', 'memory'), ('memory', 'proper'), ('proper', 'location'), ('location', '.')]

>> Trigrams are: 
 [('Loader', 'The', 'process'), ('The', 'process', 'loading'), ('process', 'loading', 'consists'), ('loading', 'consists', ':'), ('consists', ':', 'Taking'), (':', 'Taking', 'relocatable'), ('Taking', 'relocatable', 'machine'), ('relocatable', 'machine', 'code'), ('machine', 'code', 'Altering'), ('code', 'Altering', 'relocatable'), ('Altering', 'relocatable', 'address'), ('relocatable', 'address', 'Placing'), ('address', 'Placing', 'altered'), ('Placing', 'altered', 'instructions'), ('altered', 'instructions', 'data'), ('instructions', 'data', 'memory'), ('data', 'memory', 'proper'), ('memory', 'proper', 'location'), ('proper', 'location', '.')]

>> POS Tags are: 
 [('Loader', 'VB'), ('The', 'DT'), ('process', 'NN'), ('loading', 'VBG'), ('consists', 'NNS'), (':', ':'), ('Taking', 'VBG'), ('relocatable', 'JJ'), ('machine', 'NN'), ('code', 'NN'), ('Altering', 'NNP'), ('relocatable', 'JJ'), ('address', 'NN'), ('Placing', 'VBG'), ('altered', 'JJ'), ('instructions', 'NNS'), ('data', 'NNS'), ('memory', 'NN'), ('proper', 'JJ'), ('location', 'NN'), ('.', '.')]

 (S
  Loader/VB
  (NP The/DT process/NN)
  loading/VBG
  (NP consists/NNS)
  :/:
  Taking/VBG
  (NP relocatable/JJ machine/NN code/NN Altering/NNP)
  (NP relocatable/JJ address/NN)
  Placing/VBG
  (NP altered/JJ instructions/NNS data/NNS memory/NN)
  (NP proper/JJ location/NN)
  ./.) 


>> Noun Phrases are: 
 ['The process', 'consists', 'relocatable machine code Altering', 'relocatable address', 'altered instructions data memory', 'proper location']

>> Named Entities are: 
 [] 

>> Stemming using Porter Stemmer: 
 [('Loader', 'loader'), ('The', 'the'), ('process', 'process'), ('loading', 'load'), ('consists', 'consist'), (':', ':'), ('Taking', 'take'), ('relocatable', 'relocat'), ('machine', 'machin'), ('code', 'code'), ('Altering', 'alter'), ('relocatable', 'relocat'), ('address', 'address'), ('Placing', 'place'), ('altered', 'alter'), ('instructions', 'instruct'), ('data', 'data'), ('memory', 'memori'), ('proper', 'proper'), ('location', 'locat'), ('.', '.')]

>> Stemming using Snowball Stemmer: 
 [('Loader', 'loader'), ('The', 'the'), ('process', 'process'), ('loading', 'load'), ('consists', 'consist'), (':', ':'), ('Taking', 'take'), ('relocatable', 'relocat'), ('machine', 'machin'), ('code', 'code'), ('Altering', 'alter'), ('relocatable', 'relocat'), ('address', 'address'), ('Placing', 'place'), ('altered', 'alter'), ('instructions', 'instruct'), ('data', 'data'), ('memory', 'memori'), ('proper', 'proper'), ('location', 'locat'), ('.', '.')]

>> Lemmatization: 
 [('Loader', 'Loader'), ('The', 'The'), ('process', 'process'), ('loading', 'loading'), ('consists', 'consists'), (':', ':'), ('Taking', 'Taking'), ('relocatable', 'relocatable'), ('machine', 'machine'), ('code', 'code'), ('Altering', 'Altering'), ('relocatable', 'relocatable'), ('address', 'address'), ('Placing', 'Placing'), ('altered', 'altered'), ('instructions', 'instruction'), ('data', 'data'), ('memory', 'memory'), ('proper', 'proper'), ('location', 'location'), ('.', '.')]



============================ Sentence 46 =============================

Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1 – Introduction to Compiler Design ‹#›  Pass structure        Pass structure One complete scan of a source program is called pass. 


>> Tokens are: 
 ['Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '1', '–', 'Introduction', 'Compiler', 'Design', '‹', '#', '›', 'Pass', 'structure', 'Pass', 'structure', 'One', 'complete', 'scan', 'source', 'program', 'called', 'pass', '.']

>> Bigrams are: 
 [('Prof.', 'Dixita'), ('Dixita', 'B'), ('B', 'Kagathara'), ('Kagathara', '#'), ('#', '2170701'), ('2170701', '('), ('(', 'CD'), ('CD', ')'), (')', '\uf077'), ('\uf077', 'Unit'), ('Unit', '1'), ('1', '–'), ('–', 'Introduction'), ('Introduction', 'Compiler'), ('Compiler', 'Design'), ('Design', '‹'), ('‹', '#'), ('#', '›'), ('›', 'Pass'), ('Pass', 'structure'), ('structure', 'Pass'), ('Pass', 'structure'), ('structure', 'One'), ('One', 'complete'), ('complete', 'scan'), ('scan', 'source'), ('source', 'program'), ('program', 'called'), ('called', 'pass'), ('pass', '.')]

>> Trigrams are: 
 [('Prof.', 'Dixita', 'B'), ('Dixita', 'B', 'Kagathara'), ('B', 'Kagathara', '#'), ('Kagathara', '#', '2170701'), ('#', '2170701', '('), ('2170701', '(', 'CD'), ('(', 'CD', ')'), ('CD', ')', '\uf077'), (')', '\uf077', 'Unit'), ('\uf077', 'Unit', '1'), ('Unit', '1', '–'), ('1', '–', 'Introduction'), ('–', 'Introduction', 'Compiler'), ('Introduction', 'Compiler', 'Design'), ('Compiler', 'Design', '‹'), ('Design', '‹', '#'), ('‹', '#', '›'), ('#', '›', 'Pass'), ('›', 'Pass', 'structure'), ('Pass', 'structure', 'Pass'), ('structure', 'Pass', 'structure'), ('Pass', 'structure', 'One'), ('structure', 'One', 'complete'), ('One', 'complete', 'scan'), ('complete', 'scan', 'source'), ('scan', 'source', 'program'), ('source', 'program', 'called'), ('program', 'called', 'pass'), ('called', 'pass', '.')]

>> POS Tags are: 
 [('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', '#'), ('2170701', 'CD'), ('(', '('), ('CD', 'NN'), (')', ')'), ('\uf077', 'VBD'), ('Unit', 'NNP'), ('1', 'CD'), ('–', 'NNP'), ('Introduction', 'NNP'), ('Compiler', 'NNP'), ('Design', 'NNP'), ('‹', 'NNP'), ('#', '#'), ('›', 'JJ'), ('Pass', 'NNP'), ('structure', 'NN'), ('Pass', 'NNP'), ('structure', 'NN'), ('One', 'CD'), ('complete', 'JJ'), ('scan', 'JJ'), ('source', 'NN'), ('program', 'NN'), ('called', 'VBN'), ('pass', 'NN'), ('.', '.')]

 (S
  (NP Prof./NNP Dixita/NNP B/NNP Kagathara/NNP)
  #/#
  2170701/CD
  (/(
  (NP CD/NN)
  )/)
  /VBD
  (NP Unit/NNP)
  1/CD
  (NP –/NNP Introduction/NNP Compiler/NNP Design/NNP ‹/NNP)
  #/#
  (NP ›/JJ Pass/NNP structure/NN Pass/NNP structure/NN)
  One/CD
  (NP complete/JJ scan/JJ source/NN program/NN)
  called/VBN
  (NP pass/NN)
  ./.) 


>> Noun Phrases are: 
 ['Prof. Dixita B Kagathara', 'CD', 'Unit', '– Introduction Compiler Design ‹', '› Pass structure Pass structure', 'complete scan source program', 'pass']

>> Named Entities are: 
 [('ORGANIZATION', 'Unit'), ('ORGANIZATION', 'Pass'), ('ORGANIZATION', 'Pass')] 

>> Stemming using Porter Stemmer: 
 [('Prof.', 'prof.'), ('Dixita', 'dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '–'), ('Introduction', 'introduct'), ('Compiler', 'compil'), ('Design', 'design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Pass', 'pass'), ('structure', 'structur'), ('Pass', 'pass'), ('structure', 'structur'), ('One', 'one'), ('complete', 'complet'), ('scan', 'scan'), ('source', 'sourc'), ('program', 'program'), ('called', 'call'), ('pass', 'pass'), ('.', '.')]

>> Stemming using Snowball Stemmer: 
 [('Prof.', 'prof.'), ('Dixita', 'dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '–'), ('Introduction', 'introduct'), ('Compiler', 'compil'), ('Design', 'design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Pass', 'pass'), ('structure', 'structur'), ('Pass', 'pass'), ('structure', 'structur'), ('One', 'one'), ('complete', 'complet'), ('scan', 'scan'), ('source', 'sourc'), ('program', 'program'), ('called', 'call'), ('pass', 'pass'), ('.', '.')]

>> Lemmatization: 
 [('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'CD'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'Unit'), ('1', '1'), ('–', '–'), ('Introduction', 'Introduction'), ('Compiler', 'Compiler'), ('Design', 'Design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Pass', 'Pass'), ('structure', 'structure'), ('Pass', 'Pass'), ('structure', 'structure'), ('One', 'One'), ('complete', 'complete'), ('scan', 'scan'), ('source', 'source'), ('program', 'program'), ('called', 'called'), ('pass', 'pas'), ('.', '.')]



============================ Sentence 47 =============================

Pass includes reading an input file and writing to the output file. 


>> Tokens are: 
 ['Pass', 'includes', 'reading', 'input', 'file', 'writing', 'output', 'file', '.']

>> Bigrams are: 
 [('Pass', 'includes'), ('includes', 'reading'), ('reading', 'input'), ('input', 'file'), ('file', 'writing'), ('writing', 'output'), ('output', 'file'), ('file', '.')]

>> Trigrams are: 
 [('Pass', 'includes', 'reading'), ('includes', 'reading', 'input'), ('reading', 'input', 'file'), ('input', 'file', 'writing'), ('file', 'writing', 'output'), ('writing', 'output', 'file'), ('output', 'file', '.')]

>> POS Tags are: 
 [('Pass', 'NNP'), ('includes', 'VBZ'), ('reading', 'NN'), ('input', 'NN'), ('file', 'NN'), ('writing', 'VBG'), ('output', 'NN'), ('file', 'NN'), ('.', '.')]

 (S
  (NP Pass/NNP)
  includes/VBZ
  (NP reading/NN input/NN file/NN)
  writing/VBG
  (NP output/NN file/NN)
  ./.) 


>> Noun Phrases are: 
 ['Pass', 'reading input file', 'output file']

>> Named Entities are: 
 [('GPE', 'Pass')] 

>> Stemming using Porter Stemmer: 
 [('Pass', 'pass'), ('includes', 'includ'), ('reading', 'read'), ('input', 'input'), ('file', 'file'), ('writing', 'write'), ('output', 'output'), ('file', 'file'), ('.', '.')]

>> Stemming using Snowball Stemmer: 
 [('Pass', 'pass'), ('includes', 'includ'), ('reading', 'read'), ('input', 'input'), ('file', 'file'), ('writing', 'write'), ('output', 'output'), ('file', 'file'), ('.', '.')]

>> Lemmatization: 
 [('Pass', 'Pass'), ('includes', 'includes'), ('reading', 'reading'), ('input', 'input'), ('file', 'file'), ('writing', 'writing'), ('output', 'output'), ('file', 'file'), ('.', '.')]



============================ Sentence 48 =============================

In a single pass compiler analysis of source statement is immediately followed by synthesis of equivalent target statement. 


>> Tokens are: 
 ['In', 'single', 'pass', 'compiler', 'analysis', 'source', 'statement', 'immediately', 'followed', 'synthesis', 'equivalent', 'target', 'statement', '.']

>> Bigrams are: 
 [('In', 'single'), ('single', 'pass'), ('pass', 'compiler'), ('compiler', 'analysis'), ('analysis', 'source'), ('source', 'statement'), ('statement', 'immediately'), ('immediately', 'followed'), ('followed', 'synthesis'), ('synthesis', 'equivalent'), ('equivalent', 'target'), ('target', 'statement'), ('statement', '.')]

>> Trigrams are: 
 [('In', 'single', 'pass'), ('single', 'pass', 'compiler'), ('pass', 'compiler', 'analysis'), ('compiler', 'analysis', 'source'), ('analysis', 'source', 'statement'), ('source', 'statement', 'immediately'), ('statement', 'immediately', 'followed'), ('immediately', 'followed', 'synthesis'), ('followed', 'synthesis', 'equivalent'), ('synthesis', 'equivalent', 'target'), ('equivalent', 'target', 'statement'), ('target', 'statement', '.')]

>> POS Tags are: 
 [('In', 'IN'), ('single', 'JJ'), ('pass', 'NN'), ('compiler', 'NN'), ('analysis', 'NN'), ('source', 'NN'), ('statement', 'NN'), ('immediately', 'RB'), ('followed', 'VBD'), ('synthesis', 'JJ'), ('equivalent', 'JJ'), ('target', 'NN'), ('statement', 'NN'), ('.', '.')]

 (S
  In/IN
  (NP
    single/JJ
    pass/NN
    compiler/NN
    analysis/NN
    source/NN
    statement/NN)
  immediately/RB
  followed/VBD
  (NP synthesis/JJ equivalent/JJ target/NN statement/NN)
  ./.) 


>> Noun Phrases are: 
 ['single pass compiler analysis source statement', 'synthesis equivalent target statement']

>> Named Entities are: 
 [] 

>> Stemming using Porter Stemmer: 
 [('In', 'in'), ('single', 'singl'), ('pass', 'pass'), ('compiler', 'compil'), ('analysis', 'analysi'), ('source', 'sourc'), ('statement', 'statement'), ('immediately', 'immedi'), ('followed', 'follow'), ('synthesis', 'synthesi'), ('equivalent', 'equival'), ('target', 'target'), ('statement', 'statement'), ('.', '.')]

>> Stemming using Snowball Stemmer: 
 [('In', 'in'), ('single', 'singl'), ('pass', 'pass'), ('compiler', 'compil'), ('analysis', 'analysi'), ('source', 'sourc'), ('statement', 'statement'), ('immediately', 'immedi'), ('followed', 'follow'), ('synthesis', 'synthesi'), ('equivalent', 'equival'), ('target', 'target'), ('statement', 'statement'), ('.', '.')]

>> Lemmatization: 
 [('In', 'In'), ('single', 'single'), ('pass', 'pas'), ('compiler', 'compiler'), ('analysis', 'analysis'), ('source', 'source'), ('statement', 'statement'), ('immediately', 'immediately'), ('followed', 'followed'), ('synthesis', 'synthesis'), ('equivalent', 'equivalent'), ('target', 'target'), ('statement', 'statement'), ('.', '.')]



============================ Sentence 49 =============================

While in a two pass compiler intermediate code is generated between analysis and synthesis phase. 


>> Tokens are: 
 ['While', 'two', 'pass', 'compiler', 'intermediate', 'code', 'generated', 'analysis', 'synthesis', 'phase', '.']

>> Bigrams are: 
 [('While', 'two'), ('two', 'pass'), ('pass', 'compiler'), ('compiler', 'intermediate'), ('intermediate', 'code'), ('code', 'generated'), ('generated', 'analysis'), ('analysis', 'synthesis'), ('synthesis', 'phase'), ('phase', '.')]

>> Trigrams are: 
 [('While', 'two', 'pass'), ('two', 'pass', 'compiler'), ('pass', 'compiler', 'intermediate'), ('compiler', 'intermediate', 'code'), ('intermediate', 'code', 'generated'), ('code', 'generated', 'analysis'), ('generated', 'analysis', 'synthesis'), ('analysis', 'synthesis', 'phase'), ('synthesis', 'phase', '.')]

>> POS Tags are: 
 [('While', 'IN'), ('two', 'CD'), ('pass', 'VBP'), ('compiler', 'NN'), ('intermediate', 'JJ'), ('code', 'NN'), ('generated', 'VBD'), ('analysis', 'NN'), ('synthesis', 'NN'), ('phase', 'NN'), ('.', '.')]

 (S
  While/IN
  two/CD
  pass/VBP
  (NP compiler/NN)
  (NP intermediate/JJ code/NN)
  generated/VBD
  (NP analysis/NN synthesis/NN phase/NN)
  ./.) 


>> Noun Phrases are: 
 ['compiler', 'intermediate code', 'analysis synthesis phase']

>> Named Entities are: 
 [] 

>> Stemming using Porter Stemmer: 
 [('While', 'while'), ('two', 'two'), ('pass', 'pass'), ('compiler', 'compil'), ('intermediate', 'intermedi'), ('code', 'code'), ('generated', 'gener'), ('analysis', 'analysi'), ('synthesis', 'synthesi'), ('phase', 'phase'), ('.', '.')]

>> Stemming using Snowball Stemmer: 
 [('While', 'while'), ('two', 'two'), ('pass', 'pass'), ('compiler', 'compil'), ('intermediate', 'intermedi'), ('code', 'code'), ('generated', 'generat'), ('analysis', 'analysi'), ('synthesis', 'synthesi'), ('phase', 'phase'), ('.', '.')]

>> Lemmatization: 
 [('While', 'While'), ('two', 'two'), ('pass', 'pas'), ('compiler', 'compiler'), ('intermediate', 'intermediate'), ('code', 'code'), ('generated', 'generated'), ('analysis', 'analysis'), ('synthesis', 'synthesis'), ('phase', 'phase'), ('.', '.')]



============================ Sentence 50 =============================

It is difficult to compile the source program into single pass due to: forward reference       Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1 – Introduction to Compiler Design ‹#›  Pass structure Forward reference: A forward reference of a program entity is a reference to the entity which precedes its definition in the program. 


>> Tokens are: 
 ['It', 'difficult', 'compile', 'source', 'program', 'single', 'pass', 'due', ':', 'forward', 'reference', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '1', '–', 'Introduction', 'Compiler', 'Design', '‹', '#', '›', 'Pass', 'structure', 'Forward', 'reference', ':', 'A', 'forward', 'reference', 'program', 'entity', 'reference', 'entity', 'precedes', 'definition', 'program', '.']

>> Bigrams are: 
 [('It', 'difficult'), ('difficult', 'compile'), ('compile', 'source'), ('source', 'program'), ('program', 'single'), ('single', 'pass'), ('pass', 'due'), ('due', ':'), (':', 'forward'), ('forward', 'reference'), ('reference', 'Prof.'), ('Prof.', 'Dixita'), ('Dixita', 'B'), ('B', 'Kagathara'), ('Kagathara', '#'), ('#', '2170701'), ('2170701', '('), ('(', 'CD'), ('CD', ')'), (')', '\uf077'), ('\uf077', 'Unit'), ('Unit', '1'), ('1', '–'), ('–', 'Introduction'), ('Introduction', 'Compiler'), ('Compiler', 'Design'), ('Design', '‹'), ('‹', '#'), ('#', '›'), ('›', 'Pass'), ('Pass', 'structure'), ('structure', 'Forward'), ('Forward', 'reference'), ('reference', ':'), (':', 'A'), ('A', 'forward'), ('forward', 'reference'), ('reference', 'program'), ('program', 'entity'), ('entity', 'reference'), ('reference', 'entity'), ('entity', 'precedes'), ('precedes', 'definition'), ('definition', 'program'), ('program', '.')]

>> Trigrams are: 
 [('It', 'difficult', 'compile'), ('difficult', 'compile', 'source'), ('compile', 'source', 'program'), ('source', 'program', 'single'), ('program', 'single', 'pass'), ('single', 'pass', 'due'), ('pass', 'due', ':'), ('due', ':', 'forward'), (':', 'forward', 'reference'), ('forward', 'reference', 'Prof.'), ('reference', 'Prof.', 'Dixita'), ('Prof.', 'Dixita', 'B'), ('Dixita', 'B', 'Kagathara'), ('B', 'Kagathara', '#'), ('Kagathara', '#', '2170701'), ('#', '2170701', '('), ('2170701', '(', 'CD'), ('(', 'CD', ')'), ('CD', ')', '\uf077'), (')', '\uf077', 'Unit'), ('\uf077', 'Unit', '1'), ('Unit', '1', '–'), ('1', '–', 'Introduction'), ('–', 'Introduction', 'Compiler'), ('Introduction', 'Compiler', 'Design'), ('Compiler', 'Design', '‹'), ('Design', '‹', '#'), ('‹', '#', '›'), ('#', '›', 'Pass'), ('›', 'Pass', 'structure'), ('Pass', 'structure', 'Forward'), ('structure', 'Forward', 'reference'), ('Forward', 'reference', ':'), ('reference', ':', 'A'), (':', 'A', 'forward'), ('A', 'forward', 'reference'), ('forward', 'reference', 'program'), ('reference', 'program', 'entity'), ('program', 'entity', 'reference'), ('entity', 'reference', 'entity'), ('reference', 'entity', 'precedes'), ('entity', 'precedes', 'definition'), ('precedes', 'definition', 'program'), ('definition', 'program', '.')]

>> POS Tags are: 
 [('It', 'PRP'), ('difficult', 'JJ'), ('compile', 'JJ'), ('source', 'NN'), ('program', 'NN'), ('single', 'JJ'), ('pass', 'NN'), ('due', 'JJ'), (':', ':'), ('forward', 'JJ'), ('reference', 'NN'), ('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', '#'), ('2170701', 'CD'), ('(', '('), ('CD', 'NN'), (')', ')'), ('\uf077', 'VBD'), ('Unit', 'NNP'), ('1', 'CD'), ('–', 'NNP'), ('Introduction', 'NNP'), ('Compiler', 'NNP'), ('Design', 'NNP'), ('‹', 'NNP'), ('#', '#'), ('›', 'JJ'), ('Pass', 'NNP'), ('structure', 'NN'), ('Forward', 'NNP'), ('reference', 'NN'), (':', ':'), ('A', 'DT'), ('forward', 'JJ'), ('reference', 'NN'), ('program', 'NN'), ('entity', 'NN'), ('reference', 'NN'), ('entity', 'NN'), ('precedes', 'JJ'), ('definition', 'NN'), ('program', 'NN'), ('.', '.')]

 (S
  It/PRP
  (NP difficult/JJ compile/JJ source/NN program/NN)
  (NP single/JJ pass/NN)
  due/JJ
  :/:
  (NP
    forward/JJ
    reference/NN
    Prof./NNP
    Dixita/NNP
    B/NNP
    Kagathara/NNP)
  #/#
  2170701/CD
  (/(
  (NP CD/NN)
  )/)
  /VBD
  (NP Unit/NNP)
  1/CD
  (NP –/NNP Introduction/NNP Compiler/NNP Design/NNP ‹/NNP)
  #/#
  (NP ›/JJ Pass/NNP structure/NN Forward/NNP reference/NN)
  :/:
  (NP
    A/DT
    forward/JJ
    reference/NN
    program/NN
    entity/NN
    reference/NN
    entity/NN)
  (NP precedes/JJ definition/NN program/NN)
  ./.) 


>> Noun Phrases are: 
 ['difficult compile source program', 'single pass', 'forward reference Prof. Dixita B Kagathara', 'CD', 'Unit', '– Introduction Compiler Design ‹', '› Pass structure Forward reference', 'A forward reference program entity reference entity', 'precedes definition program']

>> Named Entities are: 
 [('ORGANIZATION', 'Unit'), ('ORGANIZATION', 'Pass'), ('ORGANIZATION', 'Forward')] 

>> Stemming using Porter Stemmer: 
 [('It', 'it'), ('difficult', 'difficult'), ('compile', 'compil'), ('source', 'sourc'), ('program', 'program'), ('single', 'singl'), ('pass', 'pass'), ('due', 'due'), (':', ':'), ('forward', 'forward'), ('reference', 'refer'), ('Prof.', 'prof.'), ('Dixita', 'dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '–'), ('Introduction', 'introduct'), ('Compiler', 'compil'), ('Design', 'design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Pass', 'pass'), ('structure', 'structur'), ('Forward', 'forward'), ('reference', 'refer'), (':', ':'), ('A', 'a'), ('forward', 'forward'), ('reference', 'refer'), ('program', 'program'), ('entity', 'entiti'), ('reference', 'refer'), ('entity', 'entiti'), ('precedes', 'preced'), ('definition', 'definit'), ('program', 'program'), ('.', '.')]

>> Stemming using Snowball Stemmer: 
 [('It', 'it'), ('difficult', 'difficult'), ('compile', 'compil'), ('source', 'sourc'), ('program', 'program'), ('single', 'singl'), ('pass', 'pass'), ('due', 'due'), (':', ':'), ('forward', 'forward'), ('reference', 'refer'), ('Prof.', 'prof.'), ('Dixita', 'dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '–'), ('Introduction', 'introduct'), ('Compiler', 'compil'), ('Design', 'design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Pass', 'pass'), ('structure', 'structur'), ('Forward', 'forward'), ('reference', 'refer'), (':', ':'), ('A', 'a'), ('forward', 'forward'), ('reference', 'refer'), ('program', 'program'), ('entity', 'entiti'), ('reference', 'refer'), ('entity', 'entiti'), ('precedes', 'preced'), ('definition', 'definit'), ('program', 'program'), ('.', '.')]

>> Lemmatization: 
 [('It', 'It'), ('difficult', 'difficult'), ('compile', 'compile'), ('source', 'source'), ('program', 'program'), ('single', 'single'), ('pass', 'pas'), ('due', 'due'), (':', ':'), ('forward', 'forward'), ('reference', 'reference'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'CD'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'Unit'), ('1', '1'), ('–', '–'), ('Introduction', 'Introduction'), ('Compiler', 'Compiler'), ('Design', 'Design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Pass', 'Pass'), ('structure', 'structure'), ('Forward', 'Forward'), ('reference', 'reference'), (':', ':'), ('A', 'A'), ('forward', 'forward'), ('reference', 'reference'), ('program', 'program'), ('entity', 'entity'), ('reference', 'reference'), ('entity', 'entity'), ('precedes', 'precedes'), ('definition', 'definition'), ('program', 'program'), ('.', '.')]



============================ Sentence 51 =============================

This problem can be solved by postponing the generation of target code until more information concerning the entity becomes available. 


>> Tokens are: 
 ['This', 'problem', 'solved', 'postponing', 'generation', 'target', 'code', 'information', 'concerning', 'entity', 'becomes', 'available', '.']

>> Bigrams are: 
 [('This', 'problem'), ('problem', 'solved'), ('solved', 'postponing'), ('postponing', 'generation'), ('generation', 'target'), ('target', 'code'), ('code', 'information'), ('information', 'concerning'), ('concerning', 'entity'), ('entity', 'becomes'), ('becomes', 'available'), ('available', '.')]

>> Trigrams are: 
 [('This', 'problem', 'solved'), ('problem', 'solved', 'postponing'), ('solved', 'postponing', 'generation'), ('postponing', 'generation', 'target'), ('generation', 'target', 'code'), ('target', 'code', 'information'), ('code', 'information', 'concerning'), ('information', 'concerning', 'entity'), ('concerning', 'entity', 'becomes'), ('entity', 'becomes', 'available'), ('becomes', 'available', '.')]

>> POS Tags are: 
 [('This', 'DT'), ('problem', 'NN'), ('solved', 'VBD'), ('postponing', 'VBG'), ('generation', 'NN'), ('target', 'NN'), ('code', 'NN'), ('information', 'NN'), ('concerning', 'VBG'), ('entity', 'NN'), ('becomes', 'VBZ'), ('available', 'JJ'), ('.', '.')]

 (S
  (NP This/DT problem/NN)
  solved/VBD
  postponing/VBG
  (NP generation/NN target/NN code/NN information/NN)
  concerning/VBG
  (NP entity/NN)
  becomes/VBZ
  available/JJ
  ./.) 


>> Noun Phrases are: 
 ['This problem', 'generation target code information', 'entity']

>> Named Entities are: 
 [] 

>> Stemming using Porter Stemmer: 
 [('This', 'thi'), ('problem', 'problem'), ('solved', 'solv'), ('postponing', 'postpon'), ('generation', 'gener'), ('target', 'target'), ('code', 'code'), ('information', 'inform'), ('concerning', 'concern'), ('entity', 'entiti'), ('becomes', 'becom'), ('available', 'avail'), ('.', '.')]

>> Stemming using Snowball Stemmer: 
 [('This', 'this'), ('problem', 'problem'), ('solved', 'solv'), ('postponing', 'postpon'), ('generation', 'generat'), ('target', 'target'), ('code', 'code'), ('information', 'inform'), ('concerning', 'concern'), ('entity', 'entiti'), ('becomes', 'becom'), ('available', 'avail'), ('.', '.')]

>> Lemmatization: 
 [('This', 'This'), ('problem', 'problem'), ('solved', 'solved'), ('postponing', 'postponing'), ('generation', 'generation'), ('target', 'target'), ('code', 'code'), ('information', 'information'), ('concerning', 'concerning'), ('entity', 'entity'), ('becomes', 'becomes'), ('available', 'available'), ('.', '.')]



============================ Sentence 52 =============================

It leads to multi pass model of compilation. 


>> Tokens are: 
 ['It', 'leads', 'multi', 'pass', 'model', 'compilation', '.']

>> Bigrams are: 
 [('It', 'leads'), ('leads', 'multi'), ('multi', 'pass'), ('pass', 'model'), ('model', 'compilation'), ('compilation', '.')]

>> Trigrams are: 
 [('It', 'leads', 'multi'), ('leads', 'multi', 'pass'), ('multi', 'pass', 'model'), ('pass', 'model', 'compilation'), ('model', 'compilation', '.')]

>> POS Tags are: 
 [('It', 'PRP'), ('leads', 'VBZ'), ('multi', 'JJ'), ('pass', 'NN'), ('model', 'NN'), ('compilation', 'NN'), ('.', '.')]

 (S
  It/PRP
  leads/VBZ
  (NP multi/JJ pass/NN model/NN compilation/NN)
  ./.) 


>> Noun Phrases are: 
 ['multi pass model compilation']

>> Named Entities are: 
 [] 

>> Stemming using Porter Stemmer: 
 [('It', 'it'), ('leads', 'lead'), ('multi', 'multi'), ('pass', 'pass'), ('model', 'model'), ('compilation', 'compil'), ('.', '.')]

>> Stemming using Snowball Stemmer: 
 [('It', 'it'), ('leads', 'lead'), ('multi', 'multi'), ('pass', 'pass'), ('model', 'model'), ('compilation', 'compil'), ('.', '.')]

>> Lemmatization: 
 [('It', 'It'), ('leads', 'lead'), ('multi', 'multi'), ('pass', 'pas'), ('model', 'model'), ('compilation', 'compilation'), ('.', '.')]



============================ Sentence 53 =============================

Perform analysis of the source program and note relevant information. 


>> Tokens are: 
 ['Perform', 'analysis', 'source', 'program', 'note', 'relevant', 'information', '.']

>> Bigrams are: 
 [('Perform', 'analysis'), ('analysis', 'source'), ('source', 'program'), ('program', 'note'), ('note', 'relevant'), ('relevant', 'information'), ('information', '.')]

>> Trigrams are: 
 [('Perform', 'analysis', 'source'), ('analysis', 'source', 'program'), ('source', 'program', 'note'), ('program', 'note', 'relevant'), ('note', 'relevant', 'information'), ('relevant', 'information', '.')]

>> POS Tags are: 
 [('Perform', 'VB'), ('analysis', 'NN'), ('source', 'NN'), ('program', 'NN'), ('note', 'NN'), ('relevant', 'JJ'), ('information', 'NN'), ('.', '.')]

 (S
  Perform/VB
  (NP analysis/NN source/NN program/NN note/NN)
  (NP relevant/JJ information/NN)
  ./.) 


>> Noun Phrases are: 
 ['analysis source program note', 'relevant information']

>> Named Entities are: 
 [] 

>> Stemming using Porter Stemmer: 
 [('Perform', 'perform'), ('analysis', 'analysi'), ('source', 'sourc'), ('program', 'program'), ('note', 'note'), ('relevant', 'relev'), ('information', 'inform'), ('.', '.')]

>> Stemming using Snowball Stemmer: 
 [('Perform', 'perform'), ('analysis', 'analysi'), ('source', 'sourc'), ('program', 'program'), ('note', 'note'), ('relevant', 'relev'), ('information', 'inform'), ('.', '.')]

>> Lemmatization: 
 [('Perform', 'Perform'), ('analysis', 'analysis'), ('source', 'source'), ('program', 'program'), ('note', 'note'), ('relevant', 'relevant'), ('information', 'information'), ('.', '.')]



============================ Sentence 54 =============================

In Pass II: Generate target code using information noted in pass I. 


>> Tokens are: 
 ['In', 'Pass', 'II', ':', 'Generate', 'target', 'code', 'using', 'information', 'noted', 'pass', 'I', '.']

>> Bigrams are: 
 [('In', 'Pass'), ('Pass', 'II'), ('II', ':'), (':', 'Generate'), ('Generate', 'target'), ('target', 'code'), ('code', 'using'), ('using', 'information'), ('information', 'noted'), ('noted', 'pass'), ('pass', 'I'), ('I', '.')]

>> Trigrams are: 
 [('In', 'Pass', 'II'), ('Pass', 'II', ':'), ('II', ':', 'Generate'), (':', 'Generate', 'target'), ('Generate', 'target', 'code'), ('target', 'code', 'using'), ('code', 'using', 'information'), ('using', 'information', 'noted'), ('information', 'noted', 'pass'), ('noted', 'pass', 'I'), ('pass', 'I', '.')]

>> POS Tags are: 
 [('In', 'IN'), ('Pass', 'NNP'), ('II', 'NNP'), (':', ':'), ('Generate', 'NNP'), ('target', 'NN'), ('code', 'NN'), ('using', 'VBG'), ('information', 'NN'), ('noted', 'VBD'), ('pass', 'NN'), ('I', 'PRP'), ('.', '.')]

 (S
  In/IN
  (NP Pass/NNP II/NNP)
  :/:
  (NP Generate/NNP target/NN code/NN)
  using/VBG
  (NP information/NN)
  noted/VBD
  (NP pass/NN)
  I/PRP
  ./.) 


>> Noun Phrases are: 
 ['Pass II', 'Generate target code', 'information', 'pass']

>> Named Entities are: 
 [('ORGANIZATION', 'Pass')] 

>> Stemming using Porter Stemmer: 
 [('In', 'in'), ('Pass', 'pass'), ('II', 'ii'), (':', ':'), ('Generate', 'gener'), ('target', 'target'), ('code', 'code'), ('using', 'use'), ('information', 'inform'), ('noted', 'note'), ('pass', 'pass'), ('I', 'i'), ('.', '.')]

>> Stemming using Snowball Stemmer: 
 [('In', 'in'), ('Pass', 'pass'), ('II', 'ii'), (':', ':'), ('Generate', 'generat'), ('target', 'target'), ('code', 'code'), ('using', 'use'), ('information', 'inform'), ('noted', 'note'), ('pass', 'pass'), ('I', 'i'), ('.', '.')]

>> Lemmatization: 
 [('In', 'In'), ('Pass', 'Pass'), ('II', 'II'), (':', ':'), ('Generate', 'Generate'), ('target', 'target'), ('code', 'code'), ('using', 'using'), ('information', 'information'), ('noted', 'noted'), ('pass', 'pas'), ('I', 'I'), ('.', '.')]



============================ Sentence 55 =============================

Pass I: Pass II:    Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1 – Introduction to Compiler Design ‹#›  Effect of reducing the number of passes It is desirable to have a few passes, because it takes time to read and write intermediate file. 


>> Tokens are: 
 ['Pass', 'I', ':', 'Pass', 'II', ':', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '1', '–', 'Introduction', 'Compiler', 'Design', '‹', '#', '›', 'Effect', 'reducing', 'number', 'passes', 'It', 'desirable', 'passes', ',', 'takes', 'time', 'read', 'write', 'intermediate', 'file', '.']

>> Bigrams are: 
 [('Pass', 'I'), ('I', ':'), (':', 'Pass'), ('Pass', 'II'), ('II', ':'), (':', 'Prof.'), ('Prof.', 'Dixita'), ('Dixita', 'B'), ('B', 'Kagathara'), ('Kagathara', '#'), ('#', '2170701'), ('2170701', '('), ('(', 'CD'), ('CD', ')'), (')', '\uf077'), ('\uf077', 'Unit'), ('Unit', '1'), ('1', '–'), ('–', 'Introduction'), ('Introduction', 'Compiler'), ('Compiler', 'Design'), ('Design', '‹'), ('‹', '#'), ('#', '›'), ('›', 'Effect'), ('Effect', 'reducing'), ('reducing', 'number'), ('number', 'passes'), ('passes', 'It'), ('It', 'desirable'), ('desirable', 'passes'), ('passes', ','), (',', 'takes'), ('takes', 'time'), ('time', 'read'), ('read', 'write'), ('write', 'intermediate'), ('intermediate', 'file'), ('file', '.')]

>> Trigrams are: 
 [('Pass', 'I', ':'), ('I', ':', 'Pass'), (':', 'Pass', 'II'), ('Pass', 'II', ':'), ('II', ':', 'Prof.'), (':', 'Prof.', 'Dixita'), ('Prof.', 'Dixita', 'B'), ('Dixita', 'B', 'Kagathara'), ('B', 'Kagathara', '#'), ('Kagathara', '#', '2170701'), ('#', '2170701', '('), ('2170701', '(', 'CD'), ('(', 'CD', ')'), ('CD', ')', '\uf077'), (')', '\uf077', 'Unit'), ('\uf077', 'Unit', '1'), ('Unit', '1', '–'), ('1', '–', 'Introduction'), ('–', 'Introduction', 'Compiler'), ('Introduction', 'Compiler', 'Design'), ('Compiler', 'Design', '‹'), ('Design', '‹', '#'), ('‹', '#', '›'), ('#', '›', 'Effect'), ('›', 'Effect', 'reducing'), ('Effect', 'reducing', 'number'), ('reducing', 'number', 'passes'), ('number', 'passes', 'It'), ('passes', 'It', 'desirable'), ('It', 'desirable', 'passes'), ('desirable', 'passes', ','), ('passes', ',', 'takes'), (',', 'takes', 'time'), ('takes', 'time', 'read'), ('time', 'read', 'write'), ('read', 'write', 'intermediate'), ('write', 'intermediate', 'file'), ('intermediate', 'file', '.')]

>> POS Tags are: 
 [('Pass', 'NN'), ('I', 'PRP'), (':', ':'), ('Pass', 'NN'), ('II', 'NNP'), (':', ':'), ('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', '#'), ('2170701', 'CD'), ('(', '('), ('CD', 'NN'), (')', ')'), ('\uf077', 'VBD'), ('Unit', 'NNP'), ('1', 'CD'), ('–', 'NNP'), ('Introduction', 'NNP'), ('Compiler', 'NNP'), ('Design', 'NNP'), ('‹', 'NNP'), ('#', '#'), ('›', 'NNP'), ('Effect', 'NNP'), ('reducing', 'VBG'), ('number', 'NN'), ('passes', 'NNS'), ('It', 'PRP'), ('desirable', 'JJ'), ('passes', 'NNS'), (',', ','), ('takes', 'VBZ'), ('time', 'NN'), ('read', 'JJ'), ('write', 'JJ'), ('intermediate', 'JJ'), ('file', 'NN'), ('.', '.')]

 (S
  (NP Pass/NN)
  I/PRP
  :/:
  (NP Pass/NN II/NNP)
  :/:
  (NP Prof./NNP Dixita/NNP B/NNP Kagathara/NNP)
  #/#
  2170701/CD
  (/(
  (NP CD/NN)
  )/)
  /VBD
  (NP Unit/NNP)
  1/CD
  (NP –/NNP Introduction/NNP Compiler/NNP Design/NNP ‹/NNP)
  #/#
  (NP ›/NNP Effect/NNP)
  reducing/VBG
  (NP number/NN passes/NNS)
  It/PRP
  (NP desirable/JJ passes/NNS)
  ,/,
  takes/VBZ
  (NP time/NN)
  (NP read/JJ write/JJ intermediate/JJ file/NN)
  ./.) 


>> Noun Phrases are: 
 ['Pass', 'Pass II', 'Prof. Dixita B Kagathara', 'CD', 'Unit', '– Introduction Compiler Design ‹', '› Effect', 'number passes', 'desirable passes', 'time', 'read write intermediate file']

>> Named Entities are: 
 [('PERSON', 'Pass II'), ('ORGANIZATION', 'Unit')] 

>> Stemming using Porter Stemmer: 
 [('Pass', 'pass'), ('I', 'i'), (':', ':'), ('Pass', 'pass'), ('II', 'ii'), (':', ':'), ('Prof.', 'prof.'), ('Dixita', 'dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '–'), ('Introduction', 'introduct'), ('Compiler', 'compil'), ('Design', 'design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Effect', 'effect'), ('reducing', 'reduc'), ('number', 'number'), ('passes', 'pass'), ('It', 'it'), ('desirable', 'desir'), ('passes', 'pass'), (',', ','), ('takes', 'take'), ('time', 'time'), ('read', 'read'), ('write', 'write'), ('intermediate', 'intermedi'), ('file', 'file'), ('.', '.')]

>> Stemming using Snowball Stemmer: 
 [('Pass', 'pass'), ('I', 'i'), (':', ':'), ('Pass', 'pass'), ('II', 'ii'), (':', ':'), ('Prof.', 'prof.'), ('Dixita', 'dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '–'), ('Introduction', 'introduct'), ('Compiler', 'compil'), ('Design', 'design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Effect', 'effect'), ('reducing', 'reduc'), ('number', 'number'), ('passes', 'pass'), ('It', 'it'), ('desirable', 'desir'), ('passes', 'pass'), (',', ','), ('takes', 'take'), ('time', 'time'), ('read', 'read'), ('write', 'write'), ('intermediate', 'intermedi'), ('file', 'file'), ('.', '.')]

>> Lemmatization: 
 [('Pass', 'Pass'), ('I', 'I'), (':', ':'), ('Pass', 'Pass'), ('II', 'II'), (':', ':'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'CD'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'Unit'), ('1', '1'), ('–', '–'), ('Introduction', 'Introduction'), ('Compiler', 'Compiler'), ('Design', 'Design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Effect', 'Effect'), ('reducing', 'reducing'), ('number', 'number'), ('passes', 'pass'), ('It', 'It'), ('desirable', 'desirable'), ('passes', 'pass'), (',', ','), ('takes', 'take'), ('time', 'time'), ('read', 'read'), ('write', 'write'), ('intermediate', 'intermediate'), ('file', 'file'), ('.', '.')]



============================ Sentence 56 =============================

If we group several phases into one pass then memory requirement may be large. 


>> Tokens are: 
 ['If', 'group', 'several', 'phases', 'one', 'pass', 'memory', 'requirement', 'may', 'large', '.']

>> Bigrams are: 
 [('If', 'group'), ('group', 'several'), ('several', 'phases'), ('phases', 'one'), ('one', 'pass'), ('pass', 'memory'), ('memory', 'requirement'), ('requirement', 'may'), ('may', 'large'), ('large', '.')]

>> Trigrams are: 
 [('If', 'group', 'several'), ('group', 'several', 'phases'), ('several', 'phases', 'one'), ('phases', 'one', 'pass'), ('one', 'pass', 'memory'), ('pass', 'memory', 'requirement'), ('memory', 'requirement', 'may'), ('requirement', 'may', 'large'), ('may', 'large', '.')]

>> POS Tags are: 
 [('If', 'IN'), ('group', 'NN'), ('several', 'JJ'), ('phases', 'VBZ'), ('one', 'CD'), ('pass', 'NN'), ('memory', 'NN'), ('requirement', 'NN'), ('may', 'MD'), ('large', 'JJ'), ('.', '.')]

 (S
  If/IN
  (NP group/NN)
  several/JJ
  phases/VBZ
  one/CD
  (NP pass/NN memory/NN requirement/NN)
  may/MD
  large/JJ
  ./.) 


>> Noun Phrases are: 
 ['group', 'pass memory requirement']

>> Named Entities are: 
 [] 

>> Stemming using Porter Stemmer: 
 [('If', 'if'), ('group', 'group'), ('several', 'sever'), ('phases', 'phase'), ('one', 'one'), ('pass', 'pass'), ('memory', 'memori'), ('requirement', 'requir'), ('may', 'may'), ('large', 'larg'), ('.', '.')]

>> Stemming using Snowball Stemmer: 
 [('If', 'if'), ('group', 'group'), ('several', 'sever'), ('phases', 'phase'), ('one', 'one'), ('pass', 'pass'), ('memory', 'memori'), ('requirement', 'requir'), ('may', 'may'), ('large', 'larg'), ('.', '.')]

>> Lemmatization: 
 [('If', 'If'), ('group', 'group'), ('several', 'several'), ('phases', 'phase'), ('one', 'one'), ('pass', 'pas'), ('memory', 'memory'), ('requirement', 'requirement'), ('may', 'may'), ('large', 'large'), ('.', '.')]



============================ Sentence 57 =============================

Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1 – Introduction to Compiler Design ‹#›  Types of compiler        Types of compiler One pass compiler It is a type of compiler that compiles whole process in one-pass. 


>> Tokens are: 
 ['Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '1', '–', 'Introduction', 'Compiler', 'Design', '‹', '#', '›', 'Types', 'compiler', 'Types', 'compiler', 'One', 'pass', 'compiler', 'It', 'type', 'compiler', 'compiles', 'whole', 'process', 'one-pass', '.']

>> Bigrams are: 
 [('Prof.', 'Dixita'), ('Dixita', 'B'), ('B', 'Kagathara'), ('Kagathara', '#'), ('#', '2170701'), ('2170701', '('), ('(', 'CD'), ('CD', ')'), (')', '\uf077'), ('\uf077', 'Unit'), ('Unit', '1'), ('1', '–'), ('–', 'Introduction'), ('Introduction', 'Compiler'), ('Compiler', 'Design'), ('Design', '‹'), ('‹', '#'), ('#', '›'), ('›', 'Types'), ('Types', 'compiler'), ('compiler', 'Types'), ('Types', 'compiler'), ('compiler', 'One'), ('One', 'pass'), ('pass', 'compiler'), ('compiler', 'It'), ('It', 'type'), ('type', 'compiler'), ('compiler', 'compiles'), ('compiles', 'whole'), ('whole', 'process'), ('process', 'one-pass'), ('one-pass', '.')]

>> Trigrams are: 
 [('Prof.', 'Dixita', 'B'), ('Dixita', 'B', 'Kagathara'), ('B', 'Kagathara', '#'), ('Kagathara', '#', '2170701'), ('#', '2170701', '('), ('2170701', '(', 'CD'), ('(', 'CD', ')'), ('CD', ')', '\uf077'), (')', '\uf077', 'Unit'), ('\uf077', 'Unit', '1'), ('Unit', '1', '–'), ('1', '–', 'Introduction'), ('–', 'Introduction', 'Compiler'), ('Introduction', 'Compiler', 'Design'), ('Compiler', 'Design', '‹'), ('Design', '‹', '#'), ('‹', '#', '›'), ('#', '›', 'Types'), ('›', 'Types', 'compiler'), ('Types', 'compiler', 'Types'), ('compiler', 'Types', 'compiler'), ('Types', 'compiler', 'One'), ('compiler', 'One', 'pass'), ('One', 'pass', 'compiler'), ('pass', 'compiler', 'It'), ('compiler', 'It', 'type'), ('It', 'type', 'compiler'), ('type', 'compiler', 'compiles'), ('compiler', 'compiles', 'whole'), ('compiles', 'whole', 'process'), ('whole', 'process', 'one-pass'), ('process', 'one-pass', '.')]

>> POS Tags are: 
 [('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', '#'), ('2170701', 'CD'), ('(', '('), ('CD', 'NN'), (')', ')'), ('\uf077', 'VBD'), ('Unit', 'NNP'), ('1', 'CD'), ('–', 'NNP'), ('Introduction', 'NNP'), ('Compiler', 'NNP'), ('Design', 'NNP'), ('‹', 'NNP'), ('#', '#'), ('›', 'NNP'), ('Types', 'NNP'), ('compiler', 'NN'), ('Types', 'NNP'), ('compiler', 'NN'), ('One', 'CD'), ('pass', 'NN'), ('compiler', 'NN'), ('It', 'PRP'), ('type', 'VBZ'), ('compiler', 'NN'), ('compiles', 'NNS'), ('whole', 'JJ'), ('process', 'NN'), ('one-pass', 'NN'), ('.', '.')]

 (S
  (NP Prof./NNP Dixita/NNP B/NNP Kagathara/NNP)
  #/#
  2170701/CD
  (/(
  (NP CD/NN)
  )/)
  /VBD
  (NP Unit/NNP)
  1/CD
  (NP –/NNP Introduction/NNP Compiler/NNP Design/NNP ‹/NNP)
  #/#
  (NP ›/NNP Types/NNP compiler/NN Types/NNP compiler/NN)
  One/CD
  (NP pass/NN compiler/NN)
  It/PRP
  type/VBZ
  (NP compiler/NN compiles/NNS)
  (NP whole/JJ process/NN one-pass/NN)
  ./.) 


>> Noun Phrases are: 
 ['Prof. Dixita B Kagathara', 'CD', 'Unit', '– Introduction Compiler Design ‹', '› Types compiler Types compiler', 'pass compiler', 'compiler compiles', 'whole process one-pass']

>> Named Entities are: 
 [('ORGANIZATION', 'Unit'), ('PERSON', 'Types')] 

>> Stemming using Porter Stemmer: 
 [('Prof.', 'prof.'), ('Dixita', 'dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '–'), ('Introduction', 'introduct'), ('Compiler', 'compil'), ('Design', 'design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Types', 'type'), ('compiler', 'compil'), ('Types', 'type'), ('compiler', 'compil'), ('One', 'one'), ('pass', 'pass'), ('compiler', 'compil'), ('It', 'it'), ('type', 'type'), ('compiler', 'compil'), ('compiles', 'compil'), ('whole', 'whole'), ('process', 'process'), ('one-pass', 'one-pass'), ('.', '.')]

>> Stemming using Snowball Stemmer: 
 [('Prof.', 'prof.'), ('Dixita', 'dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '–'), ('Introduction', 'introduct'), ('Compiler', 'compil'), ('Design', 'design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Types', 'type'), ('compiler', 'compil'), ('Types', 'type'), ('compiler', 'compil'), ('One', 'one'), ('pass', 'pass'), ('compiler', 'compil'), ('It', 'it'), ('type', 'type'), ('compiler', 'compil'), ('compiles', 'compil'), ('whole', 'whole'), ('process', 'process'), ('one-pass', 'one-pass'), ('.', '.')]

>> Lemmatization: 
 [('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'CD'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'Unit'), ('1', '1'), ('–', '–'), ('Introduction', 'Introduction'), ('Compiler', 'Compiler'), ('Design', 'Design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Types', 'Types'), ('compiler', 'compiler'), ('Types', 'Types'), ('compiler', 'compiler'), ('One', 'One'), ('pass', 'pas'), ('compiler', 'compiler'), ('It', 'It'), ('type', 'type'), ('compiler', 'compiler'), ('compiles', 'compiles'), ('whole', 'whole'), ('process', 'process'), ('one-pass', 'one-pass'), ('.', '.')]



============================ Sentence 58 =============================

Two pass compiler It is a type of compiler that compiles whole process in two-pass. 


>> Tokens are: 
 ['Two', 'pass', 'compiler', 'It', 'type', 'compiler', 'compiles', 'whole', 'process', 'two-pass', '.']

>> Bigrams are: 
 [('Two', 'pass'), ('pass', 'compiler'), ('compiler', 'It'), ('It', 'type'), ('type', 'compiler'), ('compiler', 'compiles'), ('compiles', 'whole'), ('whole', 'process'), ('process', 'two-pass'), ('two-pass', '.')]

>> Trigrams are: 
 [('Two', 'pass', 'compiler'), ('pass', 'compiler', 'It'), ('compiler', 'It', 'type'), ('It', 'type', 'compiler'), ('type', 'compiler', 'compiles'), ('compiler', 'compiles', 'whole'), ('compiles', 'whole', 'process'), ('whole', 'process', 'two-pass'), ('process', 'two-pass', '.')]

>> POS Tags are: 
 [('Two', 'CD'), ('pass', 'NN'), ('compiler', 'NN'), ('It', 'PRP'), ('type', 'VBZ'), ('compiler', 'NN'), ('compiles', 'NNS'), ('whole', 'JJ'), ('process', 'NN'), ('two-pass', 'NN'), ('.', '.')]

 (S
  Two/CD
  (NP pass/NN compiler/NN)
  It/PRP
  type/VBZ
  (NP compiler/NN compiles/NNS)
  (NP whole/JJ process/NN two-pass/NN)
  ./.) 


>> Noun Phrases are: 
 ['pass compiler', 'compiler compiles', 'whole process two-pass']

>> Named Entities are: 
 [] 

>> Stemming using Porter Stemmer: 
 [('Two', 'two'), ('pass', 'pass'), ('compiler', 'compil'), ('It', 'it'), ('type', 'type'), ('compiler', 'compil'), ('compiles', 'compil'), ('whole', 'whole'), ('process', 'process'), ('two-pass', 'two-pass'), ('.', '.')]

>> Stemming using Snowball Stemmer: 
 [('Two', 'two'), ('pass', 'pass'), ('compiler', 'compil'), ('It', 'it'), ('type', 'type'), ('compiler', 'compil'), ('compiles', 'compil'), ('whole', 'whole'), ('process', 'process'), ('two-pass', 'two-pass'), ('.', '.')]

>> Lemmatization: 
 [('Two', 'Two'), ('pass', 'pas'), ('compiler', 'compiler'), ('It', 'It'), ('type', 'type'), ('compiler', 'compiler'), ('compiles', 'compiles'), ('whole', 'whole'), ('process', 'process'), ('two-pass', 'two-pass'), ('.', '.')]



============================ Sentence 59 =============================

It generates intermediate code. 


>> Tokens are: 
 ['It', 'generates', 'intermediate', 'code', '.']

>> Bigrams are: 
 [('It', 'generates'), ('generates', 'intermediate'), ('intermediate', 'code'), ('code', '.')]

>> Trigrams are: 
 [('It', 'generates', 'intermediate'), ('generates', 'intermediate', 'code'), ('intermediate', 'code', '.')]

>> POS Tags are: 
 [('It', 'PRP'), ('generates', 'VBZ'), ('intermediate', 'JJ'), ('code', 'NN'), ('.', '.')]

 (S It/PRP generates/VBZ (NP intermediate/JJ code/NN) ./.) 


>> Noun Phrases are: 
 ['intermediate code']

>> Named Entities are: 
 [] 

>> Stemming using Porter Stemmer: 
 [('It', 'it'), ('generates', 'gener'), ('intermediate', 'intermedi'), ('code', 'code'), ('.', '.')]

>> Stemming using Snowball Stemmer: 
 [('It', 'it'), ('generates', 'generat'), ('intermediate', 'intermedi'), ('code', 'code'), ('.', '.')]

>> Lemmatization: 
 [('It', 'It'), ('generates', 'generates'), ('intermediate', 'intermediate'), ('code', 'code'), ('.', '.')]



============================ Sentence 60 =============================

Incremental compiler The compiler which compiles only the changed line from the source code and update the object code. 


>> Tokens are: 
 ['Incremental', 'compiler', 'The', 'compiler', 'compiles', 'changed', 'line', 'source', 'code', 'update', 'object', 'code', '.']

>> Bigrams are: 
 [('Incremental', 'compiler'), ('compiler', 'The'), ('The', 'compiler'), ('compiler', 'compiles'), ('compiles', 'changed'), ('changed', 'line'), ('line', 'source'), ('source', 'code'), ('code', 'update'), ('update', 'object'), ('object', 'code'), ('code', '.')]

>> Trigrams are: 
 [('Incremental', 'compiler', 'The'), ('compiler', 'The', 'compiler'), ('The', 'compiler', 'compiles'), ('compiler', 'compiles', 'changed'), ('compiles', 'changed', 'line'), ('changed', 'line', 'source'), ('line', 'source', 'code'), ('source', 'code', 'update'), ('code', 'update', 'object'), ('update', 'object', 'code'), ('object', 'code', '.')]

>> POS Tags are: 
 [('Incremental', 'NNP'), ('compiler', 'VBD'), ('The', 'DT'), ('compiler', 'NN'), ('compiles', 'NNS'), ('changed', 'VBD'), ('line', 'NN'), ('source', 'NN'), ('code', 'NN'), ('update', 'JJ'), ('object', 'JJ'), ('code', 'NN'), ('.', '.')]

 (S
  (NP Incremental/NNP)
  compiler/VBD
  (NP The/DT compiler/NN compiles/NNS)
  changed/VBD
  (NP line/NN source/NN code/NN)
  (NP update/JJ object/JJ code/NN)
  ./.) 


>> Noun Phrases are: 
 ['Incremental', 'The compiler compiles', 'line source code', 'update object code']

>> Named Entities are: 
 [('GPE', 'Incremental')] 

>> Stemming using Porter Stemmer: 
 [('Incremental', 'increment'), ('compiler', 'compil'), ('The', 'the'), ('compiler', 'compil'), ('compiles', 'compil'), ('changed', 'chang'), ('line', 'line'), ('source', 'sourc'), ('code', 'code'), ('update', 'updat'), ('object', 'object'), ('code', 'code'), ('.', '.')]

>> Stemming using Snowball Stemmer: 
 [('Incremental', 'increment'), ('compiler', 'compil'), ('The', 'the'), ('compiler', 'compil'), ('compiles', 'compil'), ('changed', 'chang'), ('line', 'line'), ('source', 'sourc'), ('code', 'code'), ('update', 'updat'), ('object', 'object'), ('code', 'code'), ('.', '.')]

>> Lemmatization: 
 [('Incremental', 'Incremental'), ('compiler', 'compiler'), ('The', 'The'), ('compiler', 'compiler'), ('compiles', 'compiles'), ('changed', 'changed'), ('line', 'line'), ('source', 'source'), ('code', 'code'), ('update', 'update'), ('object', 'object'), ('code', 'code'), ('.', '.')]



============================ Sentence 61 =============================

Native code compiler The compiler used to compile a source code for a same type of platform only. 


>> Tokens are: 
 ['Native', 'code', 'compiler', 'The', 'compiler', 'used', 'compile', 'source', 'code', 'type', 'platform', '.']

>> Bigrams are: 
 [('Native', 'code'), ('code', 'compiler'), ('compiler', 'The'), ('The', 'compiler'), ('compiler', 'used'), ('used', 'compile'), ('compile', 'source'), ('source', 'code'), ('code', 'type'), ('type', 'platform'), ('platform', '.')]

>> Trigrams are: 
 [('Native', 'code', 'compiler'), ('code', 'compiler', 'The'), ('compiler', 'The', 'compiler'), ('The', 'compiler', 'used'), ('compiler', 'used', 'compile'), ('used', 'compile', 'source'), ('compile', 'source', 'code'), ('source', 'code', 'type'), ('code', 'type', 'platform'), ('type', 'platform', '.')]

>> POS Tags are: 
 [('Native', 'JJ'), ('code', 'NN'), ('compiler', 'NN'), ('The', 'DT'), ('compiler', 'NN'), ('used', 'VBN'), ('compile', 'NN'), ('source', 'NN'), ('code', 'NN'), ('type', 'NN'), ('platform', 'NN'), ('.', '.')]

 (S
  (NP Native/JJ code/NN compiler/NN)
  (NP The/DT compiler/NN)
  used/VBN
  (NP compile/NN source/NN code/NN type/NN platform/NN)
  ./.) 


>> Noun Phrases are: 
 ['Native code compiler', 'The compiler', 'compile source code type platform']

>> Named Entities are: 
 [('GPE', 'Native')] 

>> Stemming using Porter Stemmer: 
 [('Native', 'nativ'), ('code', 'code'), ('compiler', 'compil'), ('The', 'the'), ('compiler', 'compil'), ('used', 'use'), ('compile', 'compil'), ('source', 'sourc'), ('code', 'code'), ('type', 'type'), ('platform', 'platform'), ('.', '.')]

>> Stemming using Snowball Stemmer: 
 [('Native', 'nativ'), ('code', 'code'), ('compiler', 'compil'), ('The', 'the'), ('compiler', 'compil'), ('used', 'use'), ('compile', 'compil'), ('source', 'sourc'), ('code', 'code'), ('type', 'type'), ('platform', 'platform'), ('.', '.')]

>> Lemmatization: 
 [('Native', 'Native'), ('code', 'code'), ('compiler', 'compiler'), ('The', 'The'), ('compiler', 'compiler'), ('used', 'used'), ('compile', 'compile'), ('source', 'source'), ('code', 'code'), ('type', 'type'), ('platform', 'platform'), ('.', '.')]



============================ Sentence 62 =============================

Cross compiler The compiler used to compile a source code for a different kinds platform. 


>> Tokens are: 
 ['Cross', 'compiler', 'The', 'compiler', 'used', 'compile', 'source', 'code', 'different', 'kinds', 'platform', '.']

>> Bigrams are: 
 [('Cross', 'compiler'), ('compiler', 'The'), ('The', 'compiler'), ('compiler', 'used'), ('used', 'compile'), ('compile', 'source'), ('source', 'code'), ('code', 'different'), ('different', 'kinds'), ('kinds', 'platform'), ('platform', '.')]

>> Trigrams are: 
 [('Cross', 'compiler', 'The'), ('compiler', 'The', 'compiler'), ('The', 'compiler', 'used'), ('compiler', 'used', 'compile'), ('used', 'compile', 'source'), ('compile', 'source', 'code'), ('source', 'code', 'different'), ('code', 'different', 'kinds'), ('different', 'kinds', 'platform'), ('kinds', 'platform', '.')]

>> POS Tags are: 
 [('Cross', 'NNP'), ('compiler', 'VBZ'), ('The', 'DT'), ('compiler', 'NN'), ('used', 'VBN'), ('compile', 'NN'), ('source', 'NN'), ('code', 'NN'), ('different', 'JJ'), ('kinds', 'NNS'), ('platform', 'NN'), ('.', '.')]

 (S
  (NP Cross/NNP)
  compiler/VBZ
  (NP The/DT compiler/NN)
  used/VBN
  (NP compile/NN source/NN code/NN)
  (NP different/JJ kinds/NNS platform/NN)
  ./.) 


>> Noun Phrases are: 
 ['Cross', 'The compiler', 'compile source code', 'different kinds platform']

>> Named Entities are: 
 [('GPE', 'Cross')] 

>> Stemming using Porter Stemmer: 
 [('Cross', 'cross'), ('compiler', 'compil'), ('The', 'the'), ('compiler', 'compil'), ('used', 'use'), ('compile', 'compil'), ('source', 'sourc'), ('code', 'code'), ('different', 'differ'), ('kinds', 'kind'), ('platform', 'platform'), ('.', '.')]

>> Stemming using Snowball Stemmer: 
 [('Cross', 'cross'), ('compiler', 'compil'), ('The', 'the'), ('compiler', 'compil'), ('used', 'use'), ('compile', 'compil'), ('source', 'sourc'), ('code', 'code'), ('different', 'differ'), ('kinds', 'kind'), ('platform', 'platform'), ('.', '.')]

>> Lemmatization: 
 [('Cross', 'Cross'), ('compiler', 'compiler'), ('The', 'The'), ('compiler', 'compiler'), ('used', 'used'), ('compile', 'compile'), ('source', 'source'), ('code', 'code'), ('different', 'different'), ('kinds', 'kind'), ('platform', 'platform'), ('.', '.')]



============================ Sentence 63 =============================

Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1– Introduction to Compiler Design ‹#›  Thank You                                       /docProps/thumbnail.jpeg 


>> Tokens are: 
 ['Prof.', 'Jay', 'R', 'Dhamsaniya', '#', '3130006', '(', 'PS', ')', '\uf077', 'Unit', '1', '–', 'Basic', 'Probability', '‹', '#', '›', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '1–', 'Introduction', 'Compiler', 'Design', '‹', '#', '›', 'Thank', 'You', '/docProps/thumbnail.jpeg']

>> Bigrams are: 
 [('Prof.', 'Jay'), ('Jay', 'R'), ('R', 'Dhamsaniya'), ('Dhamsaniya', '#'), ('#', '3130006'), ('3130006', '('), ('(', 'PS'), ('PS', ')'), (')', '\uf077'), ('\uf077', 'Unit'), ('Unit', '1'), ('1', '–'), ('–', 'Basic'), ('Basic', 'Probability'), ('Probability', '‹'), ('‹', '#'), ('#', '›'), ('›', 'Prof.'), ('Prof.', 'Dixita'), ('Dixita', 'B'), ('B', 'Kagathara'), ('Kagathara', '#'), ('#', '2170701'), ('2170701', '('), ('(', 'CD'), ('CD', ')'), (')', '\uf077'), ('\uf077', 'Unit'), ('Unit', '1–'), ('1–', 'Introduction'), ('Introduction', 'Compiler'), ('Compiler', 'Design'), ('Design', '‹'), ('‹', '#'), ('#', '›'), ('›', 'Thank'), ('Thank', 'You'), ('You', '/docProps/thumbnail.jpeg')]

>> Trigrams are: 
 [('Prof.', 'Jay', 'R'), ('Jay', 'R', 'Dhamsaniya'), ('R', 'Dhamsaniya', '#'), ('Dhamsaniya', '#', '3130006'), ('#', '3130006', '('), ('3130006', '(', 'PS'), ('(', 'PS', ')'), ('PS', ')', '\uf077'), (')', '\uf077', 'Unit'), ('\uf077', 'Unit', '1'), ('Unit', '1', '–'), ('1', '–', 'Basic'), ('–', 'Basic', 'Probability'), ('Basic', 'Probability', '‹'), ('Probability', '‹', '#'), ('‹', '#', '›'), ('#', '›', 'Prof.'), ('›', 'Prof.', 'Dixita'), ('Prof.', 'Dixita', 'B'), ('Dixita', 'B', 'Kagathara'), ('B', 'Kagathara', '#'), ('Kagathara', '#', '2170701'), ('#', '2170701', '('), ('2170701', '(', 'CD'), ('(', 'CD', ')'), ('CD', ')', '\uf077'), (')', '\uf077', 'Unit'), ('\uf077', 'Unit', '1–'), ('Unit', '1–', 'Introduction'), ('1–', 'Introduction', 'Compiler'), ('Introduction', 'Compiler', 'Design'), ('Compiler', 'Design', '‹'), ('Design', '‹', '#'), ('‹', '#', '›'), ('#', '›', 'Thank'), ('›', 'Thank', 'You'), ('Thank', 'You', '/docProps/thumbnail.jpeg')]

>> POS Tags are: 
 [('Prof.', 'NNP'), ('Jay', 'NNP'), ('R', 'NNP'), ('Dhamsaniya', 'NNP'), ('#', '#'), ('3130006', 'CD'), ('(', '('), ('PS', 'NNP'), (')', ')'), ('\uf077', 'VBD'), ('Unit', 'NNP'), ('1', 'CD'), ('–', 'NNP'), ('Basic', 'NNP'), ('Probability', 'NNP'), ('‹', 'NNP'), ('#', '#'), ('›', 'NNP'), ('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', '#'), ('2170701', 'CD'), ('(', '('), ('CD', 'NN'), (')', ')'), ('\uf077', 'VBD'), ('Unit', 'NNP'), ('1–', 'CD'), ('Introduction', 'NNP'), ('Compiler', 'NNP'), ('Design', 'NNP'), ('‹', 'NNP'), ('#', '#'), ('›', 'NNP'), ('Thank', 'NNP'), ('You', 'PRP'), ('/docProps/thumbnail.jpeg', 'VBP')]

 (S
  (NP Prof./NNP Jay/NNP R/NNP Dhamsaniya/NNP)
  #/#
  3130006/CD
  (/(
  (NP PS/NNP)
  )/)
  /VBD
  (NP Unit/NNP)
  1/CD
  (NP –/NNP Basic/NNP Probability/NNP ‹/NNP)
  #/#
  (NP ›/NNP Prof./NNP Dixita/NNP B/NNP Kagathara/NNP)
  #/#
  2170701/CD
  (/(
  (NP CD/NN)
  )/)
  /VBD
  (NP Unit/NNP)
  1–/CD
  (NP Introduction/NNP Compiler/NNP Design/NNP ‹/NNP)
  #/#
  (NP ›/NNP Thank/NNP)
  You/PRP
  /docProps/thumbnail.jpeg/VBP) 


>> Noun Phrases are: 
 ['Prof. Jay R Dhamsaniya', 'PS', 'Unit', '– Basic Probability ‹', '› Prof. Dixita B Kagathara', 'CD', 'Unit', 'Introduction Compiler Design ‹', '› Thank']

>> Named Entities are: 
 [('ORGANIZATION', 'Unit'), ('ORGANIZATION', 'Unit')] 

>> Stemming using Porter Stemmer: 
 [('Prof.', 'prof.'), ('Jay', 'jay'), ('R', 'r'), ('Dhamsaniya', 'dhamsaniya'), ('#', '#'), ('3130006', '3130006'), ('(', '('), ('PS', 'ps'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '–'), ('Basic', 'basic'), ('Probability', 'probabl'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Prof.', 'prof.'), ('Dixita', 'dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1–', '1–'), ('Introduction', 'introduct'), ('Compiler', 'compil'), ('Design', 'design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Thank', 'thank'), ('You', 'you'), ('/docProps/thumbnail.jpeg', '/docprops/thumbnail.jpeg')]

>> Stemming using Snowball Stemmer: 
 [('Prof.', 'prof.'), ('Jay', 'jay'), ('R', 'r'), ('Dhamsaniya', 'dhamsaniya'), ('#', '#'), ('3130006', '3130006'), ('(', '('), ('PS', 'ps'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '–'), ('Basic', 'basic'), ('Probability', 'probabl'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Prof.', 'prof.'), ('Dixita', 'dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1–', '1–'), ('Introduction', 'introduct'), ('Compiler', 'compil'), ('Design', 'design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Thank', 'thank'), ('You', 'you'), ('/docProps/thumbnail.jpeg', '/docprops/thumbnail.jpeg')]

>> Lemmatization: 
 [('Prof.', 'Prof.'), ('Jay', 'Jay'), ('R', 'R'), ('Dhamsaniya', 'Dhamsaniya'), ('#', '#'), ('3130006', '3130006'), ('(', '('), ('PS', 'PS'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'Unit'), ('1', '1'), ('–', '–'), ('Basic', 'Basic'), ('Probability', 'Probability'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'CD'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'Unit'), ('1–', '1–'), ('Introduction', 'Introduction'), ('Compiler', 'Compiler'), ('Design', 'Design'), ('‹', '‹'), ('#', '#'), ('›', '›'), ('Thank', 'Thank'), ('You', 'You'), ('/docProps/thumbnail.jpeg', '/docProps/thumbnail.jpeg')]

