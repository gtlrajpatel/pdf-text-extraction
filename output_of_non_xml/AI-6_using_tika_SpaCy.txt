				 *** Text Processing using Spacy *** 


============================ Sentence 1 =============================

AI-6 


>> Tokens are: 
[AI-6] 

>> PoS Tags are: 
[('AI-6', 'NUM')] 

>> Dependency Tags are: 
[('AI-6', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 2 =============================

An AI system is composed of an agent and its environment. 


>> Tokens are: 
[AI, system, composed, agent, environment, .] 

>> PoS Tags are: 
[('AI', 'PROPN'), ('system', 'NOUN'), ('composed', 'VERB'), ('agent', 'NOUN'), ('environment', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('AI', 'compound'), ('system', 'nsubjpass'), ('composed', 'ROOT'), ('agent', 'pobj'), ('environment', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[AI, system], [system, composed], [composed, agent], [agent, environment], [environment, .]]

>> Trigrams: 
[[AI, system, composed], [system, composed, agent], [composed, agent, environment], [agent, environment, .]]

>> Noun Phrases are: 
[An AI system, an agent, its environment]

>> Named Entities are: 
[('AI', 'ORG')]


============================ Sentence 3 =============================

The agents act in their environment. 


>> Tokens are: 
[agents, act, environment, .] 

>> PoS Tags are: 
[('agents', 'NOUN'), ('act', 'VERB'), ('environment', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('agents', 'nsubj'), ('act', 'ROOT'), ('environment', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[agents, act], [act, environment], [environment, .]]

>> Trigrams: 
[[agents, act, environment], [act, environment, .]]

>> Noun Phrases are: 
[The agents, their environment]

>> Named Entities are: 
[]


============================ Sentence 4 =============================

The environment may contain other agents. 


>> Tokens are: 
[environment, contain, agents, .] 

>> PoS Tags are: 
[('environment', 'NOUN'), ('contain', 'VERB'), ('agents', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('environment', 'nsubj'), ('contain', 'ROOT'), ('agents', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[environment, contain], [contain, agents], [agents, .]]

>> Trigrams: 
[[environment, contain, agents], [contain, agents, .]]

>> Noun Phrases are: 
[The environment, other agents]

>> Named Entities are: 
[]


============================ Sentence 5 =============================

What are Agent and Environment? 


>> Tokens are: 
[Agent, Environment, ?] 

>> PoS Tags are: 
[('Agent', 'PROPN'), ('Environment', 'PROPN'), ('?', 'PUNCT')] 

>> Dependency Tags are: 
[('Agent', 'attr'), ('Environment', 'conj'), ('?', 'punct')]

>> Bigrams: 
[[Agent, Environment], [Environment, ?]]

>> Trigrams: 
[[Agent, Environment, ?]]

>> Noun Phrases are: 
[What, Agent, Environment]

>> Named Entities are: 
[]


============================ Sentence 6 =============================

An agent is anything that can perceive its environment through sensors and acts upon that environment through effectors. 


>> Tokens are: 
[agent, perceive, environment, sensors, acts, environment, effectors, .] 

>> PoS Tags are: 
[('agent', 'NOUN'), ('perceive', 'VERB'), ('environment', 'NOUN'), ('sensors', 'NOUN'), ('acts', 'VERB'), ('environment', 'NOUN'), ('effectors', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('agent', 'nsubj'), ('perceive', 'relcl'), ('environment', 'dobj'), ('sensors', 'pobj'), ('acts', 'conj'), ('environment', 'pobj'), ('effectors', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[agent, perceive], [perceive, environment], [environment, sensors], [sensors, acts], [acts, environment], [environment, effectors], [effectors, .]]

>> Trigrams: 
[[agent, perceive, environment], [perceive, environment, sensors], [environment, sensors, acts], [sensors, acts, environment], [acts, environment, effectors], [environment, effectors, .]]

>> Noun Phrases are: 
[An agent, anything, its environment, sensors, that environment, effectors]

>> Named Entities are: 
[]


============================ Sentence 7 =============================

· 


>> Tokens are: 
[·] 

>> PoS Tags are: 
[('·', 'PUNCT')] 

>> Dependency Tags are: 
[('·', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 8 =============================

A human agent has sensory organs such as eyes, ears, nose, tongue and skin parallel to the sensors, and other organs such as hands, legs, mouth, for effectors. 


>> Tokens are: 
[human, agent, sensory, organs, eyes, ,, ears, ,, nose, ,, tongue, skin, parallel, sensors, ,, organs, hands, ,, legs, ,, mouth, ,, effectors, .] 

>> PoS Tags are: 
[('human', 'ADJ'), ('agent', 'NOUN'), ('sensory', 'ADJ'), ('organs', 'NOUN'), ('eyes', 'NOUN'), (',', 'PUNCT'), ('ears', 'NOUN'), (',', 'PUNCT'), ('nose', 'NOUN'), (',', 'PUNCT'), ('tongue', 'NOUN'), ('skin', 'NOUN'), ('parallel', 'ADJ'), ('sensors', 'NOUN'), (',', 'PUNCT'), ('organs', 'NOUN'), ('hands', 'NOUN'), (',', 'PUNCT'), ('legs', 'NOUN'), (',', 'PUNCT'), ('mouth', 'NOUN'), (',', 'PUNCT'), ('effectors', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('human', 'amod'), ('agent', 'nsubj'), ('sensory', 'amod'), ('organs', 'dobj'), ('eyes', 'pobj'), (',', 'punct'), ('ears', 'conj'), (',', 'punct'), ('nose', 'conj'), (',', 'punct'), ('tongue', 'conj'), ('skin', 'conj'), ('parallel', 'advcl'), ('sensors', 'pobj'), (',', 'punct'), ('organs', 'conj'), ('hands', 'pobj'), (',', 'punct'), ('legs', 'conj'), (',', 'punct'), ('mouth', 'conj'), (',', 'punct'), ('effectors', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[human, agent], [agent, sensory], [sensory, organs], [organs, eyes], [eyes, ,], [,, ears], [ears, ,], [,, nose], [nose, ,], [,, tongue], [tongue, skin], [skin, parallel], [parallel, sensors], [sensors, ,], [,, organs], [organs, hands], [hands, ,], [,, legs], [legs, ,], [,, mouth], [mouth, ,], [,, effectors], [effectors, .]]

>> Trigrams: 
[[human, agent, sensory], [agent, sensory, organs], [sensory, organs, eyes], [organs, eyes, ,], [eyes, ,, ears], [,, ears, ,], [ears, ,, nose], [,, nose, ,], [nose, ,, tongue], [,, tongue, skin], [tongue, skin, parallel], [skin, parallel, sensors], [parallel, sensors, ,], [sensors, ,, organs], [,, organs, hands], [organs, hands, ,], [hands, ,, legs], [,, legs, ,], [legs, ,, mouth], [,, mouth, ,], [mouth, ,, effectors], [,, effectors, .]]

>> Noun Phrases are: 
[A human agent, sensory organs, eyes, ears, nose, tongue, skin, the sensors, other organs, hands, legs, mouth, effectors]

>> Named Entities are: 
[]


============================ Sentence 9 =============================

· 


>> Tokens are: 
[·] 

>> PoS Tags are: 
[('·', 'PUNCT')] 

>> Dependency Tags are: 
[('·', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 10 =============================

A robotic agent replaces cameras and infrared range finders for the sensors, and various motors and actuators for effectors. 


>> Tokens are: 
[robotic, agent, replaces, cameras, infrared, range, finders, sensors, ,, motors, actuators, effectors, .] 

>> PoS Tags are: 
[('robotic', 'ADJ'), ('agent', 'NOUN'), ('replaces', 'NOUN'), ('cameras', 'NOUN'), ('infrared', 'VERB'), ('range', 'NOUN'), ('finders', 'NOUN'), ('sensors', 'NOUN'), (',', 'PUNCT'), ('motors', 'NOUN'), ('actuators', 'NOUN'), ('effectors', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('robotic', 'amod'), ('agent', 'nsubj'), ('replaces', 'compound'), ('cameras', 'ROOT'), ('infrared', 'conj'), ('range', 'compound'), ('finders', 'dobj'), ('sensors', 'pobj'), (',', 'punct'), ('motors', 'conj'), ('actuators', 'conj'), ('effectors', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[robotic, agent], [agent, replaces], [replaces, cameras], [cameras, infrared], [infrared, range], [range, finders], [finders, sensors], [sensors, ,], [,, motors], [motors, actuators], [actuators, effectors], [effectors, .]]

>> Trigrams: 
[[robotic, agent, replaces], [agent, replaces, cameras], [replaces, cameras, infrared], [cameras, infrared, range], [infrared, range, finders], [range, finders, sensors], [finders, sensors, ,], [sensors, ,, motors], [,, motors, actuators], [motors, actuators, effectors], [actuators, effectors, .]]

>> Noun Phrases are: 
[A robotic agent, range finders, the sensors, various motors, actuators, effectors]

>> Named Entities are: 
[]


============================ Sentence 11 =============================

· A software agent has encoded bit strings as its programs and actions. 


>> Tokens are: 
[·, software, agent, encoded, bit, strings, programs, actions, .] 

>> PoS Tags are: 
[('·', 'PUNCT'), ('software', 'NOUN'), ('agent', 'NOUN'), ('encoded', 'VERB'), ('bit', 'NOUN'), ('strings', 'NOUN'), ('programs', 'NOUN'), ('actions', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('·', 'punct'), ('software', 'compound'), ('agent', 'nsubj'), ('encoded', 'ROOT'), ('bit', 'compound'), ('strings', 'dobj'), ('programs', 'pobj'), ('actions', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[·, software], [software, agent], [agent, encoded], [encoded, bit], [bit, strings], [strings, programs], [programs, actions], [actions, .]]

>> Trigrams: 
[[·, software, agent], [software, agent, encoded], [agent, encoded, bit], [encoded, bit, strings], [bit, strings, programs], [strings, programs, actions], [programs, actions, .]]

>> Noun Phrases are: 
[A software agent, bit strings, its programs, actions]

>> Named Entities are: 
[]


============================ Sentence 12 =============================

 Agent Terminology · Performance Measure of Agent − 


>> Tokens are: 
[ , Agent, Terminology, ·, Performance, Measure, Agent, −] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('Agent', 'PROPN'), ('Terminology', 'PROPN'), ('·', 'PUNCT'), ('Performance', 'NOUN'), ('Measure', 'NOUN'), ('Agent', 'PROPN'), ('−', 'PROPN')] 

>> Dependency Tags are: 
[(' ', 'nmod'), ('Agent', 'compound'), ('Terminology', 'compound'), ('·', 'punct'), ('Performance', 'compound'), ('Measure', 'ROOT'), ('Agent', 'compound'), ('−', 'pobj')]

>> Bigrams: 
[[ , Agent], [Agent, Terminology], [Terminology, ·], [·, Performance], [Performance, Measure], [Measure, Agent], [Agent, −]]

>> Trigrams: 
[[ , Agent, Terminology], [Agent, Terminology, ·], [Terminology, ·, Performance], [·, Performance, Measure], [Performance, Measure, Agent], [Measure, Agent, −]]

>> Noun Phrases are: 
[ Agent Terminology · Performance Measure, Agent −]

>> Named Entities are: 
[('Performance Measure', 'PERSON')]


============================ Sentence 13 =============================

It is the criteria, which determines how successful an agent is. 


>> Tokens are: 
[criteria, ,, determines, successful, agent, .] 

>> PoS Tags are: 
[('criteria', 'NOUN'), (',', 'PUNCT'), ('determines', 'VERB'), ('successful', 'ADJ'), ('agent', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('criteria', 'attr'), (',', 'punct'), ('determines', 'relcl'), ('successful', 'acomp'), ('agent', 'nsubj'), ('.', 'punct')]

>> Bigrams: 
[[criteria, ,], [,, determines], [determines, successful], [successful, agent], [agent, .]]

>> Trigrams: 
[[criteria, ,, determines], [,, determines, successful], [determines, successful, agent], [successful, agent, .]]

>> Noun Phrases are: 
[It, the criteria, an agent]

>> Named Entities are: 
[]


============================ Sentence 14 =============================

· Behavior of Agent − It is the action that agent performs after any given sequence of percepts. · 


>> Tokens are: 
[·, Behavior, Agent, −, action, agent, performs, given, sequence, percepts, ., ·] 

>> PoS Tags are: 
[('·', 'PUNCT'), ('Behavior', 'NOUN'), ('Agent', 'PROPN'), ('−', 'PROPN'), ('action', 'NOUN'), ('agent', 'NOUN'), ('performs', 'VERB'), ('given', 'VERB'), ('sequence', 'NOUN'), ('percepts', 'NOUN'), ('.', 'PUNCT'), ('·', 'PUNCT')] 

>> Dependency Tags are: 
[('·', 'punct'), ('Behavior', 'nsubj'), ('Agent', 'compound'), ('−', 'pobj'), ('action', 'attr'), ('agent', 'nsubj'), ('performs', 'relcl'), ('given', 'amod'), ('sequence', 'pobj'), ('percepts', 'pobj'), ('.', 'punct'), ('·', 'punct')]

>> Bigrams: 
[[·, Behavior], [Behavior, Agent], [Agent, −], [−, action], [action, agent], [agent, performs], [performs, given], [given, sequence], [sequence, percepts], [percepts, .], [., ·]]

>> Trigrams: 
[[·, Behavior, Agent], [Behavior, Agent, −], [Agent, −, action], [−, action, agent], [action, agent, performs], [agent, performs, given], [performs, given, sequence], [given, sequence, percepts], [sequence, percepts, .], [percepts, ., ·]]

>> Noun Phrases are: 
[· Behavior, Agent −, It, the action, agent, any given sequence, percepts]

>> Named Entities are: 
[]


============================ Sentence 15 =============================

Percept − It is agent’s perceptual inputs at a given instance. 


>> Tokens are: 
[Percept, −, agent, perceptual, inputs, given, instance, .] 

>> PoS Tags are: 
[('Percept', 'PROPN'), ('−', 'PROPN'), ('agent', 'NOUN'), ('perceptual', 'ADJ'), ('inputs', 'NOUN'), ('given', 'VERB'), ('instance', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Percept', 'compound'), ('−', 'npadvmod'), ('agent', 'poss'), ('perceptual', 'amod'), ('inputs', 'attr'), ('given', 'amod'), ('instance', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Percept, −], [−, agent], [agent, perceptual], [perceptual, inputs], [inputs, given], [given, instance], [instance, .]]

>> Trigrams: 
[[Percept, −, agent], [−, agent, perceptual], [agent, perceptual, inputs], [perceptual, inputs, given], [inputs, given, instance], [given, instance, .]]

>> Noun Phrases are: 
[It, agent’s perceptual inputs, a given instance]

>> Named Entities are: 
[]


============================ Sentence 16 =============================

· 


>> Tokens are: 
[·] 

>> PoS Tags are: 
[('·', 'PUNCT')] 

>> Dependency Tags are: 
[('·', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 17 =============================

Percept Sequence − It is the history of all that an agent has perceived till date. 


>> Tokens are: 
[Percept, Sequence, −, history, agent, perceived, till, date, .] 

>> PoS Tags are: 
[('Percept', 'PROPN'), ('Sequence', 'PROPN'), ('−', 'PROPN'), ('history', 'NOUN'), ('agent', 'NOUN'), ('perceived', 'VERB'), ('till', 'SCONJ'), ('date', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Percept', 'compound'), ('Sequence', 'compound'), ('−', 'npadvmod'), ('history', 'attr'), ('agent', 'nsubj'), ('perceived', 'relcl'), ('till', 'prep'), ('date', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Percept, Sequence], [Sequence, −], [−, history], [history, agent], [agent, perceived], [perceived, till], [till, date], [date, .]]

>> Trigrams: 
[[Percept, Sequence, −], [Sequence, −, history], [−, history, agent], [history, agent, perceived], [agent, perceived, till], [perceived, till, date], [till, date, .]]

>> Noun Phrases are: 
[It, the history, an agent, date]

>> Named Entities are: 
[('Percept Sequence −', 'PERSON')]


============================ Sentence 18 =============================

· Agent Function − It is a map from the precept sequence to an action. 


>> Tokens are: 
[·, Agent, Function, −, map, precept, sequence, action, .] 

>> PoS Tags are: 
[('·', 'PUNCT'), ('Agent', 'NOUN'), ('Function', 'PROPN'), ('−', 'PROPN'), ('map', 'NOUN'), ('precept', 'ADJ'), ('sequence', 'NOUN'), ('action', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('·', 'punct'), ('Agent', 'compound'), ('Function', 'compound'), ('−', 'dep'), ('map', 'attr'), ('precept', 'amod'), ('sequence', 'pobj'), ('action', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[·, Agent], [Agent, Function], [Function, −], [−, map], [map, precept], [precept, sequence], [sequence, action], [action, .]]

>> Trigrams: 
[[·, Agent, Function], [Agent, Function, −], [Function, −, map], [−, map, precept], [map, precept, sequence], [precept, sequence, action], [sequence, action, .]]

>> Noun Phrases are: 
[It, a map, the precept sequence, an action]

>> Named Entities are: 
[]


============================ Sentence 19 =============================

Rationality Rationality is nothing but status of being reasonable, sensible, and having good sense of judgment. 


>> Tokens are: 
[Rationality, Rationality, status, reasonable, ,, sensible, ,, having, good, sense, judgment, .] 

>> PoS Tags are: 
[('Rationality', 'NOUN'), ('Rationality', 'NOUN'), ('status', 'NOUN'), ('reasonable', 'ADJ'), (',', 'PUNCT'), ('sensible', 'ADJ'), (',', 'PUNCT'), ('having', 'VERB'), ('good', 'ADJ'), ('sense', 'NOUN'), ('judgment', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Rationality', 'compound'), ('Rationality', 'nsubj'), ('status', 'pobj'), ('reasonable', 'acomp'), (',', 'punct'), ('sensible', 'conj'), (',', 'punct'), ('having', 'conj'), ('good', 'amod'), ('sense', 'dobj'), ('judgment', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Rationality, Rationality], [Rationality, status], [status, reasonable], [reasonable, ,], [,, sensible], [sensible, ,], [,, having], [having, good], [good, sense], [sense, judgment], [judgment, .]]

>> Trigrams: 
[[Rationality, Rationality, status], [Rationality, status, reasonable], [status, reasonable, ,], [reasonable, ,, sensible], [,, sensible, ,], [sensible, ,, having], [,, having, good], [having, good, sense], [good, sense, judgment], [sense, judgment, .]]

>> Noun Phrases are: 
[Rationality Rationality, nothing, status, good sense, judgment]

>> Named Entities are: 
[]


============================ Sentence 20 =============================

Rationality is concerned with expected actions and results depending upon what the agent has perceived. 


>> Tokens are: 
[Rationality, concerned, expected, actions, results, depending, agent, perceived, .] 

>> PoS Tags are: 
[('Rationality', 'NOUN'), ('concerned', 'VERB'), ('expected', 'VERB'), ('actions', 'NOUN'), ('results', 'NOUN'), ('depending', 'VERB'), ('agent', 'NOUN'), ('perceived', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Rationality', 'nsubj'), ('concerned', 'acomp'), ('expected', 'amod'), ('actions', 'pobj'), ('results', 'conj'), ('depending', 'prep'), ('agent', 'nsubj'), ('perceived', 'pcomp'), ('.', 'punct')]

>> Bigrams: 
[[Rationality, concerned], [concerned, expected], [expected, actions], [actions, results], [results, depending], [depending, agent], [agent, perceived], [perceived, .]]

>> Trigrams: 
[[Rationality, concerned, expected], [concerned, expected, actions], [expected, actions, results], [actions, results, depending], [results, depending, agent], [depending, agent, perceived], [agent, perceived, .]]

>> Noun Phrases are: 
[Rationality, expected actions, results, what, the agent]

>> Named Entities are: 
[]


============================ Sentence 21 =============================

Performing actions with the aim of obtaining useful information is an important part of rationality. 


>> Tokens are: 
[Performing, actions, aim, obtaining, useful, information, important, rationality, .] 

>> PoS Tags are: 
[('Performing', 'VERB'), ('actions', 'NOUN'), ('aim', 'NOUN'), ('obtaining', 'VERB'), ('useful', 'ADJ'), ('information', 'NOUN'), ('important', 'ADJ'), ('rationality', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Performing', 'csubj'), ('actions', 'dobj'), ('aim', 'pobj'), ('obtaining', 'pcomp'), ('useful', 'amod'), ('information', 'dobj'), ('important', 'amod'), ('rationality', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Performing, actions], [actions, aim], [aim, obtaining], [obtaining, useful], [useful, information], [information, important], [important, rationality], [rationality, .]]

>> Trigrams: 
[[Performing, actions, aim], [actions, aim, obtaining], [aim, obtaining, useful], [obtaining, useful, information], [useful, information, important], [information, important, rationality], [important, rationality, .]]

>> Noun Phrases are: 
[actions, the aim, useful information, an important part, rationality]

>> Named Entities are: 
[]


============================ Sentence 22 =============================

What is Ideal Rational Agent? 


>> Tokens are: 
[Ideal, Rational, Agent, ?] 

>> PoS Tags are: 
[('Ideal', 'PROPN'), ('Rational', 'PROPN'), ('Agent', 'PROPN'), ('?', 'PUNCT')] 

>> Dependency Tags are: 
[('Ideal', 'compound'), ('Rational', 'compound'), ('Agent', 'nsubj'), ('?', 'punct')]

>> Bigrams: 
[[Ideal, Rational], [Rational, Agent], [Agent, ?]]

>> Trigrams: 
[[Ideal, Rational, Agent], [Rational, Agent, ?]]

>> Noun Phrases are: 
[What, Ideal Rational Agent]

>> Named Entities are: 
[]


============================ Sentence 23 =============================

An ideal rational agent is the one, which is capable of doing expected actions to maximize its performance measure, on the basis of − · Its percept sequence · Its built-in knowledge base Rationality of an agent depends on the following − · The performance measures, which determine the degree of success. 


>> Tokens are: 
[ideal, rational, agent, ,, capable, expected, actions, maximize, performance, measure, ,, basis, −, ·, percept, sequence, ·, built, -, knowledge, base, Rationality, agent, depends, following, −, ·, performance, measures, ,, determine, degree, success, .] 

>> PoS Tags are: 
[('ideal', 'ADJ'), ('rational', 'ADJ'), ('agent', 'NOUN'), (',', 'PUNCT'), ('capable', 'ADJ'), ('expected', 'VERB'), ('actions', 'NOUN'), ('maximize', 'VERB'), ('performance', 'NOUN'), ('measure', 'NOUN'), (',', 'PUNCT'), ('basis', 'NOUN'), ('−', 'NOUN'), ('·', 'PUNCT'), ('percept', 'NOUN'), ('sequence', 'NOUN'), ('·', 'PUNCT'), ('built', 'VERB'), ('-', 'PUNCT'), ('knowledge', 'NOUN'), ('base', 'NOUN'), ('Rationality', 'NOUN'), ('agent', 'NOUN'), ('depends', 'VERB'), ('following', 'VERB'), ('−', 'NOUN'), ('·', 'PUNCT'), ('performance', 'NOUN'), ('measures', 'NOUN'), (',', 'PUNCT'), ('determine', 'VERB'), ('degree', 'NOUN'), ('success', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('ideal', 'amod'), ('rational', 'amod'), ('agent', 'nsubj'), (',', 'punct'), ('capable', 'acomp'), ('expected', 'amod'), ('actions', 'dobj'), ('maximize', 'acl'), ('performance', 'compound'), ('measure', 'dobj'), (',', 'punct'), ('basis', 'pobj'), ('−', 'pobj'), ('·', 'punct'), ('percept', 'amod'), ('sequence', 'nsubj'), ('·', 'punct'), ('built', 'amod'), ('-', 'punct'), ('knowledge', 'compound'), ('base', 'appos'), ('Rationality', 'nsubj'), ('agent', 'pobj'), ('depends', 'conj'), ('following', 'amod'), ('−', 'pobj'), ('·', 'punct'), ('performance', 'compound'), ('measures', 'appos'), (',', 'punct'), ('determine', 'relcl'), ('degree', 'dobj'), ('success', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[ideal, rational], [rational, agent], [agent, ,], [,, capable], [capable, expected], [expected, actions], [actions, maximize], [maximize, performance], [performance, measure], [measure, ,], [,, basis], [basis, −], [−, ·], [·, percept], [percept, sequence], [sequence, ·], [·, built], [built, -], [-, knowledge], [knowledge, base], [base, Rationality], [Rationality, agent], [agent, depends], [depends, following], [following, −], [−, ·], [·, performance], [performance, measures], [measures, ,], [,, determine], [determine, degree], [degree, success], [success, .]]

>> Trigrams: 
[[ideal, rational, agent], [rational, agent, ,], [agent, ,, capable], [,, capable, expected], [capable, expected, actions], [expected, actions, maximize], [actions, maximize, performance], [maximize, performance, measure], [performance, measure, ,], [measure, ,, basis], [,, basis, −], [basis, −, ·], [−, ·, percept], [·, percept, sequence], [percept, sequence, ·], [sequence, ·, built], [·, built, -], [built, -, knowledge], [-, knowledge, base], [knowledge, base, Rationality], [base, Rationality, agent], [Rationality, agent, depends], [agent, depends, following], [depends, following, −], [following, −, ·], [−, ·, performance], [·, performance, measures], [performance, measures, ,], [measures, ,, determine], [,, determine, degree], [determine, degree, success], [degree, success, .]]

>> Noun Phrases are: 
[An ideal rational agent, expected actions, its performance measure, the basis, −, · Its percept sequence, Its built-in knowledge base, Rationality, an agent, the following −, The performance measures, the degree, success]

>> Named Entities are: 
[('−', 'GPE')]


============================ Sentence 24 =============================

· 


>> Tokens are: 
[·] 

>> PoS Tags are: 
[('·', 'PUNCT')] 

>> Dependency Tags are: 
[('·', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 25 =============================

Agent’s Percept Sequence till now. 


>> Tokens are: 
[Agent, Percept, Sequence, till, .] 

>> PoS Tags are: 
[('Agent', 'PROPN'), ('Percept', 'PROPN'), ('Sequence', 'PROPN'), ('till', 'SCONJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Agent', 'poss'), ('Percept', 'compound'), ('Sequence', 'ROOT'), ('till', 'prep'), ('.', 'punct')]

>> Bigrams: 
[[Agent, Percept], [Percept, Sequence], [Sequence, till], [till, .]]

>> Trigrams: 
[[Agent, Percept, Sequence], [Percept, Sequence, till], [Sequence, till, .]]

>> Noun Phrases are: 
[Agent’s Percept Sequence]

>> Named Entities are: 
[]


============================ Sentence 26 =============================

· 


>> Tokens are: 
[·] 

>> PoS Tags are: 
[('·', 'PUNCT')] 

>> Dependency Tags are: 
[('·', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 27 =============================

The agent’s prior knowledge about the environment. 


>> Tokens are: 
[agent, prior, knowledge, environment, .] 

>> PoS Tags are: 
[('agent', 'NOUN'), ('prior', 'ADJ'), ('knowledge', 'NOUN'), ('environment', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('agent', 'ROOT'), ('prior', 'amod'), ('knowledge', 'appos'), ('environment', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[agent, prior], [prior, knowledge], [knowledge, environment], [environment, .]]

>> Trigrams: 
[[agent, prior, knowledge], [prior, knowledge, environment], [knowledge, environment, .]]

>> Noun Phrases are: 
[The agent, prior knowledge, the environment]

>> Named Entities are: 
[]


============================ Sentence 28 =============================

· 


>> Tokens are: 
[·] 

>> PoS Tags are: 
[('·', 'PUNCT')] 

>> Dependency Tags are: 
[('·', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 29 =============================

The actions that the agent can carry out. 


>> Tokens are: 
[actions, agent, carry, .] 

>> PoS Tags are: 
[('actions', 'NOUN'), ('agent', 'NOUN'), ('carry', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('actions', 'ROOT'), ('agent', 'nsubj'), ('carry', 'relcl'), ('.', 'punct')]

>> Bigrams: 
[[actions, agent], [agent, carry], [carry, .]]

>> Trigrams: 
[[actions, agent, carry], [agent, carry, .]]

>> Noun Phrases are: 
[The actions, the agent]

>> Named Entities are: 
[]


============================ Sentence 30 =============================

A rational agent always performs right action, where the right action means the action that causes the agent to be most successful in the given percept sequence. 


>> Tokens are: 
[rational, agent, performs, right, action, ,, right, action, means, action, causes, agent, successful, given, percept, sequence, .] 

>> PoS Tags are: 
[('rational', 'ADJ'), ('agent', 'NOUN'), ('performs', 'VERB'), ('right', 'ADJ'), ('action', 'NOUN'), (',', 'PUNCT'), ('right', 'ADJ'), ('action', 'NOUN'), ('means', 'VERB'), ('action', 'NOUN'), ('causes', 'VERB'), ('agent', 'NOUN'), ('successful', 'ADJ'), ('given', 'VERB'), ('percept', 'VERB'), ('sequence', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('rational', 'amod'), ('agent', 'nsubj'), ('performs', 'ROOT'), ('right', 'amod'), ('action', 'dobj'), (',', 'punct'), ('right', 'amod'), ('action', 'nsubj'), ('means', 'relcl'), ('action', 'dobj'), ('causes', 'relcl'), ('agent', 'nsubj'), ('successful', 'acomp'), ('given', 'amod'), ('percept', 'amod'), ('sequence', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[rational, agent], [agent, performs], [performs, right], [right, action], [action, ,], [,, right], [right, action], [action, means], [means, action], [action, causes], [causes, agent], [agent, successful], [successful, given], [given, percept], [percept, sequence], [sequence, .]]

>> Trigrams: 
[[rational, agent, performs], [agent, performs, right], [performs, right, action], [right, action, ,], [action, ,, right], [,, right, action], [right, action, means], [action, means, action], [means, action, causes], [action, causes, agent], [causes, agent, successful], [agent, successful, given], [successful, given, percept], [given, percept, sequence], [percept, sequence, .]]

>> Noun Phrases are: 
[A rational agent, right action, the right action, the action, the agent, the given percept sequence]

>> Named Entities are: 
[]


============================ Sentence 31 =============================

The problem the agent solves is characterized by Performance Measure, Environment, Actuators, and Sensors (PEAS). 


>> Tokens are: 
[problem, agent, solves, characterized, Performance, Measure, ,, Environment, ,, Actuators, ,, Sensors, (, PEAS, ), .] 

>> PoS Tags are: 
[('problem', 'NOUN'), ('agent', 'NOUN'), ('solves', 'NOUN'), ('characterized', 'VERB'), ('Performance', 'NOUN'), ('Measure', 'NOUN'), (',', 'PUNCT'), ('Environment', 'PROPN'), (',', 'PUNCT'), ('Actuators', 'PROPN'), (',', 'PUNCT'), ('Sensors', 'NOUN'), ('(', 'PUNCT'), ('PEAS', 'PROPN'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('problem', 'nsubjpass'), ('agent', 'compound'), ('solves', 'relcl'), ('characterized', 'ROOT'), ('Performance', 'compound'), ('Measure', 'pobj'), (',', 'punct'), ('Environment', 'conj'), (',', 'punct'), ('Actuators', 'conj'), (',', 'punct'), ('Sensors', 'conj'), ('(', 'punct'), ('PEAS', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[problem, agent], [agent, solves], [solves, characterized], [characterized, Performance], [Performance, Measure], [Measure, ,], [,, Environment], [Environment, ,], [,, Actuators], [Actuators, ,], [,, Sensors], [Sensors, (], [(, PEAS], [PEAS, )], [), .]]

>> Trigrams: 
[[problem, agent, solves], [agent, solves, characterized], [solves, characterized, Performance], [characterized, Performance, Measure], [Performance, Measure, ,], [Measure, ,, Environment], [,, Environment, ,], [Environment, ,, Actuators], [,, Actuators, ,], [Actuators, ,, Sensors], [,, Sensors, (], [Sensors, (, PEAS], [(, PEAS, )], [PEAS, ), .]]

>> Noun Phrases are: 
[The problem, Performance Measure, Environment, Actuators, Sensors, PEAS]

>> Named Entities are: 
[('Performance Measure', 'PERSON')]


============================ Sentence 32 =============================

The Structure of Intelligent Agents Agent’s structure can be viewed as − · Agent = Architecture + Agent Program · Architecture = the machinery that an agent executes on. 


>> Tokens are: 
[Structure, Intelligent, Agents, Agent, structure, viewed, −, ·, Agent, =, Architecture, +, Agent, Program, ·, Architecture, =, machinery, agent, executes, .] 

>> PoS Tags are: 
[('Structure', 'PROPN'), ('Intelligent', 'PROPN'), ('Agents', 'PROPN'), ('Agent', 'PROPN'), ('structure', 'NOUN'), ('viewed', 'VERB'), ('−', 'PROPN'), ('·', 'SYM'), ('Agent', 'PROPN'), ('=', 'SYM'), ('Architecture', 'PROPN'), ('+', 'SYM'), ('Agent', 'PROPN'), ('Program', 'PROPN'), ('·', 'PUNCT'), ('Architecture', 'NOUN'), ('=', 'PUNCT'), ('machinery', 'NOUN'), ('agent', 'NOUN'), ('executes', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Structure', 'poss'), ('Intelligent', 'compound'), ('Agents', 'compound'), ('Agent', 'pobj'), ('structure', 'nsubjpass'), ('viewed', 'ROOT'), ('−', 'pobj'), ('·', 'punct'), ('Agent', 'nmod'), ('=', 'punct'), ('Architecture', 'nmod'), ('+', 'cc'), ('Agent', 'compound'), ('Program', 'nmod'), ('·', 'punct'), ('Architecture', 'appos'), ('=', 'punct'), ('machinery', 'appos'), ('agent', 'nsubj'), ('executes', 'relcl'), ('.', 'punct')]

>> Bigrams: 
[[Structure, Intelligent], [Intelligent, Agents], [Agents, Agent], [Agent, structure], [structure, viewed], [viewed, −], [−, ·], [·, Agent], [Agent, =], [=, Architecture], [Architecture, +], [+, Agent], [Agent, Program], [Program, ·], [·, Architecture], [Architecture, =], [=, machinery], [machinery, agent], [agent, executes], [executes, .]]

>> Trigrams: 
[[Structure, Intelligent, Agents], [Intelligent, Agents, Agent], [Agents, Agent, structure], [Agent, structure, viewed], [structure, viewed, −], [viewed, −, ·], [−, ·, Agent], [·, Agent, =], [Agent, =, Architecture], [=, Architecture, +], [Architecture, +, Agent], [+, Agent, Program], [Agent, Program, ·], [Program, ·, Architecture], [·, Architecture, =], [Architecture, =, machinery], [=, machinery, agent], [machinery, agent, executes], [agent, executes, .]]

>> Noun Phrases are: 
[Intelligent Agents Agent, −, · Agent = Architecture + Agent Program · Architecture, the machinery, an agent]

>> Named Entities are: 
[]


============================ Sentence 33 =============================

· Agent Program = an implementation of an agent function. 


>> Tokens are: 
[·, Agent, Program, =, implementation, agent, function, .] 

>> PoS Tags are: 
[('·', 'PUNCT'), ('Agent', 'PROPN'), ('Program', 'PROPN'), ('=', 'PUNCT'), ('implementation', 'NOUN'), ('agent', 'NOUN'), ('function', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('·', 'punct'), ('Agent', 'compound'), ('Program', 'ROOT'), ('=', 'punct'), ('implementation', 'appos'), ('agent', 'compound'), ('function', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[·, Agent], [Agent, Program], [Program, =], [=, implementation], [implementation, agent], [agent, function], [function, .]]

>> Trigrams: 
[[·, Agent, Program], [Agent, Program, =], [Program, =, implementation], [=, implementation, agent], [implementation, agent, function], [agent, function, .]]

>> Noun Phrases are: 
[· Agent Program, an implementation, an agent function]

>> Named Entities are: 
[]


============================ Sentence 34 =============================

Simple Reflex Agents · They choose actions only based on the current percept. 


>> Tokens are: 
[Simple, Reflex, Agents, ·, choose, actions, based, current, percept, .] 

>> PoS Tags are: 
[('Simple', 'ADJ'), ('Reflex', 'PROPN'), ('Agents', 'PROPN'), ('·', 'PUNCT'), ('choose', 'VERB'), ('actions', 'NOUN'), ('based', 'VERB'), ('current', 'ADJ'), ('percept', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Simple', 'amod'), ('Reflex', 'compound'), ('Agents', 'nsubj'), ('·', 'punct'), ('choose', 'ROOT'), ('actions', 'dobj'), ('based', 'acl'), ('current', 'amod'), ('percept', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Simple, Reflex], [Reflex, Agents], [Agents, ·], [·, choose], [choose, actions], [actions, based], [based, current], [current, percept], [percept, .]]

>> Trigrams: 
[[Simple, Reflex, Agents], [Reflex, Agents, ·], [Agents, ·, choose], [·, choose, actions], [choose, actions, based], [actions, based, current], [based, current, percept], [current, percept, .]]

>> Noun Phrases are: 
[Simple Reflex Agents, They, actions, the current percept]

>> Named Entities are: 
[('Simple Reflex Agents', 'PERSON')]


============================ Sentence 35 =============================

· They are rational only if a correct decision is made only on the basis of current precept. 


>> Tokens are: 
[·, rational, correct, decision, basis, current, precept, .] 

>> PoS Tags are: 
[('·', 'PUNCT'), ('rational', 'ADJ'), ('correct', 'ADJ'), ('decision', 'NOUN'), ('basis', 'NOUN'), ('current', 'ADJ'), ('precept', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('·', 'punct'), ('rational', 'acomp'), ('correct', 'amod'), ('decision', 'nsubjpass'), ('basis', 'pobj'), ('current', 'amod'), ('precept', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[·, rational], [rational, correct], [correct, decision], [decision, basis], [basis, current], [current, precept], [precept, .]]

>> Trigrams: 
[[·, rational, correct], [rational, correct, decision], [correct, decision, basis], [decision, basis, current], [basis, current, precept], [current, precept, .]]

>> Noun Phrases are: 
[They, a correct decision, the basis, current precept]

>> Named Entities are: 
[]


============================ Sentence 36 =============================

· Their environment is completely observable. 


>> Tokens are: 
[·, environment, completely, observable, .] 

>> PoS Tags are: 
[('·', 'PUNCT'), ('environment', 'NOUN'), ('completely', 'ADV'), ('observable', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('·', 'punct'), ('environment', 'nsubj'), ('completely', 'advmod'), ('observable', 'acomp'), ('.', 'punct')]

>> Bigrams: 
[[·, environment], [environment, completely], [completely, observable], [observable, .]]

>> Trigrams: 
[[·, environment, completely], [environment, completely, observable], [completely, observable, .]]

>> Noun Phrases are: 
[Their environment]

>> Named Entities are: 
[]


============================ Sentence 37 =============================

Condition-Action Rule − It is a rule that maps a state (condition) to an action. 


>> Tokens are: 
[Condition, -, Action, Rule, −, rule, maps, state, (, condition, ), action, .] 

>> PoS Tags are: 
[('Condition', 'NOUN'), ('-', 'PUNCT'), ('Action', 'PROPN'), ('Rule', 'PROPN'), ('−', 'NOUN'), ('rule', 'NOUN'), ('maps', 'VERB'), ('state', 'NOUN'), ('(', 'PUNCT'), ('condition', 'NOUN'), (')', 'PUNCT'), ('action', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Condition', 'compound'), ('-', 'punct'), ('Action', 'compound'), ('Rule', 'compound'), ('−', 'npadvmod'), ('rule', 'attr'), ('maps', 'relcl'), ('state', 'nmod'), ('(', 'punct'), ('condition', 'dobj'), (')', 'punct'), ('action', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Condition, -], [-, Action], [Action, Rule], [Rule, −], [−, rule], [rule, maps], [maps, state], [state, (], [(, condition], [condition, )], [), action], [action, .]]

>> Trigrams: 
[[Condition, -, Action], [-, Action, Rule], [Action, Rule, −], [Rule, −, rule], [−, rule, maps], [rule, maps, state], [maps, state, (], [state, (, condition], [(, condition, )], [condition, ), action], [), action, .]]

>> Noun Phrases are: 
[It, a rule, a state (condition, an action]

>> Named Entities are: 
[]


============================ Sentence 38 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 39 =============================

Model Based Reflex Agents They use a model of the world to choose their actions. 


>> Tokens are: 
[Model, Based, Reflex, Agents, use, model, world, choose, actions, .] 

>> PoS Tags are: 
[('Model', 'PROPN'), ('Based', 'VERB'), ('Reflex', 'PROPN'), ('Agents', 'PROPN'), ('use', 'VERB'), ('model', 'NOUN'), ('world', 'NOUN'), ('choose', 'VERB'), ('actions', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Model', 'npadvmod'), ('Based', 'compound'), ('Reflex', 'compound'), ('Agents', 'ROOT'), ('use', 'relcl'), ('model', 'dobj'), ('world', 'pobj'), ('choose', 'xcomp'), ('actions', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Model, Based], [Based, Reflex], [Reflex, Agents], [Agents, use], [use, model], [model, world], [world, choose], [choose, actions], [actions, .]]

>> Trigrams: 
[[Model, Based, Reflex], [Based, Reflex, Agents], [Reflex, Agents, use], [Agents, use, model], [use, model, world], [model, world, choose], [world, choose, actions], [choose, actions, .]]

>> Noun Phrases are: 
[Model Based Reflex Agents, They, a model, the world, their actions]

>> Named Entities are: 
[('Model Based Reflex Agents', 'ORG')]


============================ Sentence 40 =============================

They maintain an internal state. 


>> Tokens are: 
[maintain, internal, state, .] 

>> PoS Tags are: 
[('maintain', 'VERB'), ('internal', 'ADJ'), ('state', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('maintain', 'ROOT'), ('internal', 'amod'), ('state', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[maintain, internal], [internal, state], [state, .]]

>> Trigrams: 
[[maintain, internal, state], [internal, state, .]]

>> Noun Phrases are: 
[They, an internal state]

>> Named Entities are: 
[]


============================ Sentence 41 =============================

Model − knowledge about “how the things happen in the world”. 


>> Tokens are: 
[Model, −, knowledge, “, things, happen, world, ”, .] 

>> PoS Tags are: 
[('Model', 'NOUN'), ('−', 'PROPN'), ('knowledge', 'NOUN'), ('“', 'PUNCT'), ('things', 'NOUN'), ('happen', 'VERB'), ('world', 'NOUN'), ('”', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Model', 'compound'), ('−', 'compound'), ('knowledge', 'ROOT'), ('“', 'punct'), ('things', 'nsubj'), ('happen', 'pcomp'), ('world', 'pobj'), ('”', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Model, −], [−, knowledge], [knowledge, “], [“, things], [things, happen], [happen, world], [world, ”], [”, .]]

>> Trigrams: 
[[Model, −, knowledge], [−, knowledge, “], [knowledge, “, things], [“, things, happen], [things, happen, world], [happen, world, ”], [world, ”, .]]

>> Noun Phrases are: 
[Model − knowledge, the things, the world]

>> Named Entities are: 
[('Model −', 'PERSON')]


============================ Sentence 42 =============================

Internal State − It is a representation of unobserved aspects of current state depending on percept history. 


>> Tokens are: 
[Internal, State, −, representation, unobserved, aspects, current, state, depending, percept, history, .] 

>> PoS Tags are: 
[('Internal', 'PROPN'), ('State', 'PROPN'), ('−', 'PROPN'), ('representation', 'NOUN'), ('unobserved', 'ADJ'), ('aspects', 'NOUN'), ('current', 'ADJ'), ('state', 'NOUN'), ('depending', 'VERB'), ('percept', 'ADJ'), ('history', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Internal', 'compound'), ('State', 'compound'), ('−', 'npadvmod'), ('representation', 'attr'), ('unobserved', 'amod'), ('aspects', 'pobj'), ('current', 'amod'), ('state', 'pobj'), ('depending', 'prep'), ('percept', 'amod'), ('history', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Internal, State], [State, −], [−, representation], [representation, unobserved], [unobserved, aspects], [aspects, current], [current, state], [state, depending], [depending, percept], [percept, history], [history, .]]

>> Trigrams: 
[[Internal, State, −], [State, −, representation], [−, representation, unobserved], [representation, unobserved, aspects], [unobserved, aspects, current], [aspects, current, state], [current, state, depending], [state, depending, percept], [depending, percept, history], [percept, history, .]]

>> Noun Phrases are: 
[It, a representation, unobserved aspects, current state, percept history]

>> Named Entities are: 
[('Internal State −', 'ORG')]


============================ Sentence 43 =============================

Updating the state requires the information about − · How the world evolves. · 


>> Tokens are: 
[Updating, state, requires, information, −, ·, world, evolves, ., ·] 

>> PoS Tags are: 
[('Updating', 'VERB'), ('state', 'NOUN'), ('requires', 'VERB'), ('information', 'NOUN'), ('−', 'NOUN'), ('·', 'PUNCT'), ('world', 'NOUN'), ('evolves', 'VERB'), ('.', 'PUNCT'), ('·', 'PUNCT')] 

>> Dependency Tags are: 
[('Updating', 'csubj'), ('state', 'dobj'), ('requires', 'ROOT'), ('information', 'dobj'), ('−', 'pobj'), ('·', 'punct'), ('world', 'nsubj'), ('evolves', 'relcl'), ('.', 'punct'), ('·', 'punct')]

>> Bigrams: 
[[Updating, state], [state, requires], [requires, information], [information, −], [−, ·], [·, world], [world, evolves], [evolves, .], [., ·]]

>> Trigrams: 
[[Updating, state, requires], [state, requires, information], [requires, information, −], [information, −, ·], [−, ·, world], [·, world, evolves], [world, evolves, .], [evolves, ., ·]]

>> Noun Phrases are: 
[the state, the information, −, the world]

>> Named Entities are: 
[]


============================ Sentence 44 =============================

How the agent’s actions affect the world. 


>> Tokens are: 
[agent, actions, affect, world, .] 

>> PoS Tags are: 
[('agent', 'NOUN'), ('actions', 'NOUN'), ('affect', 'VERB'), ('world', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('agent', 'poss'), ('actions', 'nsubj'), ('affect', 'ROOT'), ('world', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[agent, actions], [actions, affect], [affect, world], [world, .]]

>> Trigrams: 
[[agent, actions, affect], [actions, affect, world], [affect, world, .]]

>> Noun Phrases are: 
[the agent’s actions, the world]

>> Named Entities are: 
[]


============================ Sentence 45 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 46 =============================

Goal Based Agents They choose their actions in order to achieve goals. 


>> Tokens are: 
[Goal, Based, Agents, choose, actions, order, achieve, goals, .] 

>> PoS Tags are: 
[('Goal', 'PROPN'), ('Based', 'VERB'), ('Agents', 'NOUN'), ('choose', 'VERB'), ('actions', 'NOUN'), ('order', 'NOUN'), ('achieve', 'VERB'), ('goals', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Goal', 'compound'), ('Based', 'compound'), ('Agents', 'npadvmod'), ('choose', 'ROOT'), ('actions', 'dobj'), ('order', 'pobj'), ('achieve', 'acl'), ('goals', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Goal, Based], [Based, Agents], [Agents, choose], [choose, actions], [actions, order], [order, achieve], [achieve, goals], [goals, .]]

>> Trigrams: 
[[Goal, Based, Agents], [Based, Agents, choose], [Agents, choose, actions], [choose, actions, order], [actions, order, achieve], [order, achieve, goals], [achieve, goals, .]]

>> Noun Phrases are: 
[They, their actions, order, goals]

>> Named Entities are: 
[]


============================ Sentence 47 =============================

Goal-based approach is more flexible than reflex agent since the knowledge supporting a decision is explicitly modeled, thereby allowing for modifications. 


>> Tokens are: 
[Goal, -, based, approach, flexible, reflex, agent, knowledge, supporting, decision, explicitly, modeled, ,, allowing, modifications, .] 

>> PoS Tags are: 
[('Goal', 'NOUN'), ('-', 'PUNCT'), ('based', 'VERB'), ('approach', 'NOUN'), ('flexible', 'ADJ'), ('reflex', 'ADJ'), ('agent', 'NOUN'), ('knowledge', 'NOUN'), ('supporting', 'VERB'), ('decision', 'NOUN'), ('explicitly', 'ADV'), ('modeled', 'VERB'), (',', 'PUNCT'), ('allowing', 'VERB'), ('modifications', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Goal', 'npadvmod'), ('-', 'punct'), ('based', 'amod'), ('approach', 'nsubj'), ('flexible', 'acomp'), ('reflex', 'amod'), ('agent', 'pobj'), ('knowledge', 'nsubjpass'), ('supporting', 'acl'), ('decision', 'dobj'), ('explicitly', 'advmod'), ('modeled', 'advcl'), (',', 'punct'), ('allowing', 'advcl'), ('modifications', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Goal, -], [-, based], [based, approach], [approach, flexible], [flexible, reflex], [reflex, agent], [agent, knowledge], [knowledge, supporting], [supporting, decision], [decision, explicitly], [explicitly, modeled], [modeled, ,], [,, allowing], [allowing, modifications], [modifications, .]]

>> Trigrams: 
[[Goal, -, based], [-, based, approach], [based, approach, flexible], [approach, flexible, reflex], [flexible, reflex, agent], [reflex, agent, knowledge], [agent, knowledge, supporting], [knowledge, supporting, decision], [supporting, decision, explicitly], [decision, explicitly, modeled], [explicitly, modeled, ,], [modeled, ,, allowing], [,, allowing, modifications], [allowing, modifications, .]]

>> Noun Phrases are: 
[Goal-based approach, reflex agent, the knowledge, a decision, modifications]

>> Named Entities are: 
[]


============================ Sentence 48 =============================

Goal − It is the description of desirable situations. 


>> Tokens are: 
[Goal, −, description, desirable, situations, .] 

>> PoS Tags are: 
[('Goal', 'NOUN'), ('−', 'NOUN'), ('description', 'NOUN'), ('desirable', 'ADJ'), ('situations', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Goal', 'compound'), ('−', 'npadvmod'), ('description', 'attr'), ('desirable', 'amod'), ('situations', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Goal, −], [−, description], [description, desirable], [desirable, situations], [situations, .]]

>> Trigrams: 
[[Goal, −, description], [−, description, desirable], [description, desirable, situations], [desirable, situations, .]]

>> Noun Phrases are: 
[It, the description, desirable situations]

>> Named Entities are: 
[]


============================ Sentence 49 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 50 =============================

Utility Based Agents They choose actions based on a preference (utility) for each state. 


>> Tokens are: 
[Utility, Based, Agents, choose, actions, based, preference, (, utility, ), state, .] 

>> PoS Tags are: 
[('Utility', 'PROPN'), ('Based', 'PROPN'), ('Agents', 'NOUN'), ('choose', 'VERB'), ('actions', 'NOUN'), ('based', 'VERB'), ('preference', 'NOUN'), ('(', 'PUNCT'), ('utility', 'NOUN'), (')', 'PUNCT'), ('state', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Utility', 'compound'), ('Based', 'compound'), ('Agents', 'npadvmod'), ('choose', 'ROOT'), ('actions', 'dobj'), ('based', 'acl'), ('preference', 'pobj'), ('(', 'punct'), ('utility', 'appos'), (')', 'punct'), ('state', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Utility, Based], [Based, Agents], [Agents, choose], [choose, actions], [actions, based], [based, preference], [preference, (], [(, utility], [utility, )], [), state], [state, .]]

>> Trigrams: 
[[Utility, Based, Agents], [Based, Agents, choose], [Agents, choose, actions], [choose, actions, based], [actions, based, preference], [based, preference, (], [preference, (, utility], [(, utility, )], [utility, ), state], [), state, .]]

>> Noun Phrases are: 
[They, actions, a preference, (utility, each state]

>> Named Entities are: 
[]


============================ Sentence 51 =============================

Goals are inadequate when − · There are conflicting goals, out of which only few can be achieved. 


>> Tokens are: 
[Goals, inadequate, −, ·, conflicting, goals, ,, achieved, .] 

>> PoS Tags are: 
[('Goals', 'NOUN'), ('inadequate', 'ADJ'), ('−', 'PROPN'), ('·', 'PUNCT'), ('conflicting', 'VERB'), ('goals', 'NOUN'), (',', 'PUNCT'), ('achieved', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Goals', 'nsubj'), ('inadequate', 'acomp'), ('−', 'dep'), ('·', 'punct'), ('conflicting', 'amod'), ('goals', 'attr'), (',', 'punct'), ('achieved', 'pcomp'), ('.', 'punct')]

>> Bigrams: 
[[Goals, inadequate], [inadequate, −], [−, ·], [·, conflicting], [conflicting, goals], [goals, ,], [,, achieved], [achieved, .]]

>> Trigrams: 
[[Goals, inadequate, −], [inadequate, −, ·], [−, ·, conflicting], [·, conflicting, goals], [conflicting, goals, ,], [goals, ,, achieved], [,, achieved, .]]

>> Noun Phrases are: 
[Goals, conflicting goals]

>> Named Entities are: 
[]


============================ Sentence 52 =============================

· Goals have some uncertainty of being achieved and you need to weigh likelihood of success against the importance of a goal.   


>> Tokens are: 
[·, Goals, uncertainty, achieved, need, weigh, likelihood, success, importance, goal, .,  ] 

>> PoS Tags are: 
[('·', 'PUNCT'), ('Goals', 'NOUN'), ('uncertainty', 'NOUN'), ('achieved', 'VERB'), ('need', 'VERB'), ('weigh', 'VERB'), ('likelihood', 'NOUN'), ('success', 'NOUN'), ('importance', 'NOUN'), ('goal', 'NOUN'), ('.', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('·', 'punct'), ('Goals', 'nsubj'), ('uncertainty', 'dobj'), ('achieved', 'pcomp'), ('need', 'conj'), ('weigh', 'xcomp'), ('likelihood', 'dobj'), ('success', 'pobj'), ('importance', 'pobj'), ('goal', 'pobj'), ('.', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[·, Goals], [Goals, uncertainty], [uncertainty, achieved], [achieved, need], [need, weigh], [weigh, likelihood], [likelihood, success], [success, importance], [importance, goal], [goal, .], [.,  ]]

>> Trigrams: 
[[·, Goals, uncertainty], [Goals, uncertainty, achieved], [uncertainty, achieved, need], [achieved, need, weigh], [need, weigh, likelihood], [weigh, likelihood, success], [likelihood, success, importance], [success, importance, goal], [importance, goal, .], [goal, .,  ]]

>> Noun Phrases are: 
[Goals, some uncertainty, you, likelihood, success, the importance, a goal]

>> Named Entities are: 
[('Goals', 'PERSON')]


============================ Sentence 53 =============================

The Nature of Environments Some programs operate in the entirely artificial environment confined to keyboard input, database, computer file systems and character output on a screen. 


>> Tokens are: 
[Nature, Environments, programs, operate, entirely, artificial, environment, confined, keyboard, input, ,, database, ,, computer, file, systems, character, output, screen, .] 

>> PoS Tags are: 
[('Nature', 'PROPN'), ('Environments', 'NOUN'), ('programs', 'NOUN'), ('operate', 'VERB'), ('entirely', 'ADV'), ('artificial', 'ADJ'), ('environment', 'NOUN'), ('confined', 'VERB'), ('keyboard', 'NOUN'), ('input', 'NOUN'), (',', 'PUNCT'), ('database', 'NOUN'), (',', 'PUNCT'), ('computer', 'NOUN'), ('file', 'NOUN'), ('systems', 'NOUN'), ('character', 'NOUN'), ('output', 'NOUN'), ('screen', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Nature', 'nsubj'), ('Environments', 'pobj'), ('programs', 'nsubj'), ('operate', 'ROOT'), ('entirely', 'advmod'), ('artificial', 'amod'), ('environment', 'pobj'), ('confined', 'acl'), ('keyboard', 'compound'), ('input', 'pobj'), (',', 'punct'), ('database', 'conj'), (',', 'punct'), ('computer', 'compound'), ('file', 'compound'), ('systems', 'conj'), ('character', 'compound'), ('output', 'conj'), ('screen', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Nature, Environments], [Environments, programs], [programs, operate], [operate, entirely], [entirely, artificial], [artificial, environment], [environment, confined], [confined, keyboard], [keyboard, input], [input, ,], [,, database], [database, ,], [,, computer], [computer, file], [file, systems], [systems, character], [character, output], [output, screen], [screen, .]]

>> Trigrams: 
[[Nature, Environments, programs], [Environments, programs, operate], [programs, operate, entirely], [operate, entirely, artificial], [entirely, artificial, environment], [artificial, environment, confined], [environment, confined, keyboard], [confined, keyboard, input], [keyboard, input, ,], [input, ,, database], [,, database, ,], [database, ,, computer], [,, computer, file], [computer, file, systems], [file, systems, character], [systems, character, output], [character, output, screen], [output, screen, .]]

>> Noun Phrases are: 
[The Nature, Environments, Some programs, the entirely artificial environment, keyboard input, database, computer file systems, character output, a screen]

>> Named Entities are: 
[]


============================ Sentence 54 =============================

In contrast, some software agents (software robots or softbots) exist in rich, unlimited softbots domains. 


>> Tokens are: 
[contrast, ,, software, agents, (, software, robots, softbots, ), exist, rich, ,, unlimited, softbots, domains, .] 

>> PoS Tags are: 
[('contrast', 'NOUN'), (',', 'PUNCT'), ('software', 'NOUN'), ('agents', 'NOUN'), ('(', 'PUNCT'), ('software', 'NOUN'), ('robots', 'NOUN'), ('softbots', 'NOUN'), (')', 'PUNCT'), ('exist', 'VERB'), ('rich', 'ADJ'), (',', 'PUNCT'), ('unlimited', 'ADJ'), ('softbots', 'NOUN'), ('domains', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('contrast', 'pobj'), (',', 'punct'), ('software', 'compound'), ('agents', 'nsubj'), ('(', 'punct'), ('software', 'compound'), ('robots', 'appos'), ('softbots', 'conj'), (')', 'punct'), ('exist', 'ROOT'), ('rich', 'amod'), (',', 'punct'), ('unlimited', 'amod'), ('softbots', 'compound'), ('domains', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[contrast, ,], [,, software], [software, agents], [agents, (], [(, software], [software, robots], [robots, softbots], [softbots, )], [), exist], [exist, rich], [rich, ,], [,, unlimited], [unlimited, softbots], [softbots, domains], [domains, .]]

>> Trigrams: 
[[contrast, ,, software], [,, software, agents], [software, agents, (], [agents, (, software], [(, software, robots], [software, robots, softbots], [robots, softbots, )], [softbots, ), exist], [), exist, rich], [exist, rich, ,], [rich, ,, unlimited], [,, unlimited, softbots], [unlimited, softbots, domains], [softbots, domains, .]]

>> Noun Phrases are: 
[contrast, some software agents, software robots, softbots, rich, unlimited softbots domains]

>> Named Entities are: 
[]


============================ Sentence 55 =============================

The simulator has a very detailed, complex environment. 


>> Tokens are: 
[simulator, detailed, ,, complex, environment, .] 

>> PoS Tags are: 
[('simulator', 'NOUN'), ('detailed', 'ADJ'), (',', 'PUNCT'), ('complex', 'ADJ'), ('environment', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('simulator', 'nsubj'), ('detailed', 'amod'), (',', 'punct'), ('complex', 'amod'), ('environment', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[simulator, detailed], [detailed, ,], [,, complex], [complex, environment], [environment, .]]

>> Trigrams: 
[[simulator, detailed, ,], [detailed, ,, complex], [,, complex, environment], [complex, environment, .]]

>> Noun Phrases are: 
[The simulator, a very detailed, complex environment]

>> Named Entities are: 
[]


============================ Sentence 56 =============================

The software agent needs to choose from a long array of actions in real time. 


>> Tokens are: 
[software, agent, needs, choose, long, array, actions, real, time, .] 

>> PoS Tags are: 
[('software', 'NOUN'), ('agent', 'NOUN'), ('needs', 'VERB'), ('choose', 'VERB'), ('long', 'ADJ'), ('array', 'NOUN'), ('actions', 'NOUN'), ('real', 'ADJ'), ('time', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('software', 'compound'), ('agent', 'nsubj'), ('needs', 'ROOT'), ('choose', 'xcomp'), ('long', 'amod'), ('array', 'pobj'), ('actions', 'pobj'), ('real', 'amod'), ('time', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[software, agent], [agent, needs], [needs, choose], [choose, long], [long, array], [array, actions], [actions, real], [real, time], [time, .]]

>> Trigrams: 
[[software, agent, needs], [agent, needs, choose], [needs, choose, long], [choose, long, array], [long, array, actions], [array, actions, real], [actions, real, time], [real, time, .]]

>> Noun Phrases are: 
[The software agent, a long array, actions, real time]

>> Named Entities are: 
[]


============================ Sentence 57 =============================

A softbot designed to scan the online preferences of the customer and show interesting items to the customer works in the real as well as an artificial environment. 


>> Tokens are: 
[softbot, designed, scan, online, preferences, customer, interesting, items, customer, works, real, artificial, environment, .] 

>> PoS Tags are: 
[('softbot', 'NOUN'), ('designed', 'VERB'), ('scan', 'VERB'), ('online', 'ADJ'), ('preferences', 'NOUN'), ('customer', 'NOUN'), ('interesting', 'ADJ'), ('items', 'NOUN'), ('customer', 'NOUN'), ('works', 'VERB'), ('real', 'NOUN'), ('artificial', 'ADJ'), ('environment', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('softbot', 'nsubj'), ('designed', 'acl'), ('scan', 'xcomp'), ('online', 'amod'), ('preferences', 'dobj'), ('customer', 'pobj'), ('interesting', 'amod'), ('items', 'dobj'), ('customer', 'pobj'), ('works', 'ROOT'), ('real', 'pobj'), ('artificial', 'amod'), ('environment', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[softbot, designed], [designed, scan], [scan, online], [online, preferences], [preferences, customer], [customer, interesting], [interesting, items], [items, customer], [customer, works], [works, real], [real, artificial], [artificial, environment], [environment, .]]

>> Trigrams: 
[[softbot, designed, scan], [designed, scan, online], [scan, online, preferences], [online, preferences, customer], [preferences, customer, interesting], [customer, interesting, items], [interesting, items, customer], [items, customer, works], [customer, works, real], [works, real, artificial], [real, artificial, environment], [artificial, environment, .]]

>> Noun Phrases are: 
[A softbot, the online preferences, the customer, interesting items, the customer, the real, an artificial environment]

>> Named Entities are: 
[]


============================ Sentence 58 =============================

The most famous artificial environment is the Turing Test environment, in which one real and other artificial agents are tested on equal ground. 


>> Tokens are: 
[famous, artificial, environment, Turing, Test, environment, ,, real, artificial, agents, tested, equal, ground, .] 

>> PoS Tags are: 
[('famous', 'ADJ'), ('artificial', 'ADJ'), ('environment', 'NOUN'), ('Turing', 'PROPN'), ('Test', 'PROPN'), ('environment', 'NOUN'), (',', 'PUNCT'), ('real', 'ADJ'), ('artificial', 'ADJ'), ('agents', 'NOUN'), ('tested', 'VERB'), ('equal', 'ADJ'), ('ground', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('famous', 'amod'), ('artificial', 'amod'), ('environment', 'nsubj'), ('Turing', 'compound'), ('Test', 'compound'), ('environment', 'attr'), (',', 'punct'), ('real', 'amod'), ('artificial', 'amod'), ('agents', 'nsubjpass'), ('tested', 'relcl'), ('equal', 'amod'), ('ground', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[famous, artificial], [artificial, environment], [environment, Turing], [Turing, Test], [Test, environment], [environment, ,], [,, real], [real, artificial], [artificial, agents], [agents, tested], [tested, equal], [equal, ground], [ground, .]]

>> Trigrams: 
[[famous, artificial, environment], [artificial, environment, Turing], [environment, Turing, Test], [Turing, Test, environment], [Test, environment, ,], [environment, ,, real], [,, real, artificial], [real, artificial, agents], [artificial, agents, tested], [agents, tested, equal], [tested, equal, ground], [equal, ground, .]]

>> Noun Phrases are: 
[The most famous artificial environment, the Turing Test environment, one real and other artificial agents, equal ground]

>> Named Entities are: 
[('Turing Test', 'ORG'), ('one', 'CARDINAL')]


============================ Sentence 59 =============================

This is a very challenging environment as it is highly difficult for a software agent to perform as well as a human. 


>> Tokens are: 
[challenging, environment, highly, difficult, software, agent, perform, human, .] 

>> PoS Tags are: 
[('challenging', 'ADJ'), ('environment', 'NOUN'), ('highly', 'ADV'), ('difficult', 'ADJ'), ('software', 'NOUN'), ('agent', 'NOUN'), ('perform', 'VERB'), ('human', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('challenging', 'amod'), ('environment', 'attr'), ('highly', 'advmod'), ('difficult', 'acomp'), ('software', 'compound'), ('agent', 'nsubj'), ('perform', 'advcl'), ('human', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[challenging, environment], [environment, highly], [highly, difficult], [difficult, software], [software, agent], [agent, perform], [perform, human], [human, .]]

>> Trigrams: 
[[challenging, environment, highly], [environment, highly, difficult], [highly, difficult, software], [difficult, software, agent], [software, agent, perform], [agent, perform, human], [perform, human, .]]

>> Noun Phrases are: 
[a very challenging environment, it, a software agent, a human]

>> Named Entities are: 
[]


============================ Sentence 60 =============================

Turing Test 


>> Tokens are: 
[Turing, Test] 

>> PoS Tags are: 
[('Turing', 'PROPN'), ('Test', 'PROPN')] 

>> Dependency Tags are: 
[('Turing', 'compound'), ('Test', 'ROOT')]

>> Bigrams: 
[[Turing, Test]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Turing Test]

>> Named Entities are: 
[]


============================ Sentence 61 =============================

The success of an intelligent behavior of a system can be measured with Turing Test. 


>> Tokens are: 
[success, intelligent, behavior, system, measured, Turing, Test, .] 

>> PoS Tags are: 
[('success', 'NOUN'), ('intelligent', 'ADJ'), ('behavior', 'NOUN'), ('system', 'NOUN'), ('measured', 'VERB'), ('Turing', 'PROPN'), ('Test', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('success', 'nsubjpass'), ('intelligent', 'amod'), ('behavior', 'pobj'), ('system', 'pobj'), ('measured', 'ROOT'), ('Turing', 'compound'), ('Test', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[success, intelligent], [intelligent, behavior], [behavior, system], [system, measured], [measured, Turing], [Turing, Test], [Test, .]]

>> Trigrams: 
[[success, intelligent, behavior], [intelligent, behavior, system], [behavior, system, measured], [system, measured, Turing], [measured, Turing, Test], [Turing, Test, .]]

>> Noun Phrases are: 
[The success, an intelligent behavior, a system, Turing Test]

>> Named Entities are: 
[('Turing Test', 'ORG')]


============================ Sentence 62 =============================

Two persons and a machine to be evaluated participate in the test. 


>> Tokens are: 
[persons, machine, evaluated, participate, test, .] 

>> PoS Tags are: 
[('persons', 'NOUN'), ('machine', 'NOUN'), ('evaluated', 'VERB'), ('participate', 'NOUN'), ('test', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('persons', 'nsubj'), ('machine', 'conj'), ('evaluated', 'relcl'), ('participate', 'ROOT'), ('test', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[persons, machine], [machine, evaluated], [evaluated, participate], [participate, test], [test, .]]

>> Trigrams: 
[[persons, machine, evaluated], [machine, evaluated, participate], [evaluated, participate, test], [participate, test, .]]

>> Noun Phrases are: 
[Two persons, a machine, the test]

>> Named Entities are: 
[('Two', 'CARDINAL')]


============================ Sentence 63 =============================

Out of the two persons, one plays the role of the tester. 


>> Tokens are: 
[persons, ,, plays, role, tester, .] 

>> PoS Tags are: 
[('persons', 'NOUN'), (',', 'PUNCT'), ('plays', 'VERB'), ('role', 'NOUN'), ('tester', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('persons', 'pobj'), (',', 'punct'), ('plays', 'ROOT'), ('role', 'dobj'), ('tester', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[persons, ,], [,, plays], [plays, role], [role, tester], [tester, .]]

>> Trigrams: 
[[persons, ,, plays], [,, plays, role], [plays, role, tester], [role, tester, .]]

>> Noun Phrases are: 
[the two persons, one, the role, the tester]

>> Named Entities are: 
[('two', 'CARDINAL')]


============================ Sentence 64 =============================

Each of them sits in different rooms. 


>> Tokens are: 
[sits, different, rooms, .] 

>> PoS Tags are: 
[('sits', 'VERB'), ('different', 'ADJ'), ('rooms', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('sits', 'ROOT'), ('different', 'amod'), ('rooms', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[sits, different], [different, rooms], [rooms, .]]

>> Trigrams: 
[[sits, different, rooms], [different, rooms, .]]

>> Noun Phrases are: 
[them, different rooms]

>> Named Entities are: 
[]


============================ Sentence 65 =============================

The tester is unaware of who is machine and who is a human. 


>> Tokens are: 
[tester, unaware, machine, human, .] 

>> PoS Tags are: 
[('tester', 'NOUN'), ('unaware', 'ADJ'), ('machine', 'NOUN'), ('human', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('tester', 'nsubj'), ('unaware', 'acomp'), ('machine', 'attr'), ('human', 'attr'), ('.', 'punct')]

>> Bigrams: 
[[tester, unaware], [unaware, machine], [machine, human], [human, .]]

>> Trigrams: 
[[tester, unaware, machine], [unaware, machine, human], [machine, human, .]]

>> Noun Phrases are: 
[The tester, who, machine, who, a human]

>> Named Entities are: 
[]


============================ Sentence 66 =============================

He interrogates the questions by typing and sending them to both intelligences, to which he receives typed responses. 


>> Tokens are: 
[interrogates, questions, typing, sending, intelligences, ,, receives, typed, responses, .] 

>> PoS Tags are: 
[('interrogates', 'VERB'), ('questions', 'NOUN'), ('typing', 'VERB'), ('sending', 'VERB'), ('intelligences', 'NOUN'), (',', 'PUNCT'), ('receives', 'VERB'), ('typed', 'VERB'), ('responses', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('interrogates', 'ROOT'), ('questions', 'dobj'), ('typing', 'pcomp'), ('sending', 'conj'), ('intelligences', 'pobj'), (',', 'punct'), ('receives', 'relcl'), ('typed', 'xcomp'), ('responses', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[interrogates, questions], [questions, typing], [typing, sending], [sending, intelligences], [intelligences, ,], [,, receives], [receives, typed], [typed, responses], [responses, .]]

>> Trigrams: 
[[interrogates, questions, typing], [questions, typing, sending], [typing, sending, intelligences], [sending, intelligences, ,], [intelligences, ,, receives], [,, receives, typed], [receives, typed, responses], [typed, responses, .]]

>> Noun Phrases are: 
[He, the questions, them, both intelligences, he, responses]

>> Named Entities are: 
[]


============================ Sentence 67 =============================

This test aims at fooling the tester. 


>> Tokens are: 
[test, aims, fooling, tester, .] 

>> PoS Tags are: 
[('test', 'NOUN'), ('aims', 'VERB'), ('fooling', 'VERB'), ('tester', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('test', 'nsubj'), ('aims', 'ROOT'), ('fooling', 'pcomp'), ('tester', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[test, aims], [aims, fooling], [fooling, tester], [tester, .]]

>> Trigrams: 
[[test, aims, fooling], [aims, fooling, tester], [fooling, tester, .]]

>> Noun Phrases are: 
[This test, the tester]

>> Named Entities are: 
[]


============================ Sentence 68 =============================

If the tester fails to determine machine’s response from the human response, then the machine is said to be intelligent. 


>> Tokens are: 
[tester, fails, determine, machine, response, human, response, ,, machine, said, intelligent, .] 

>> PoS Tags are: 
[('tester', 'NOUN'), ('fails', 'VERB'), ('determine', 'VERB'), ('machine', 'NOUN'), ('response', 'NOUN'), ('human', 'ADJ'), ('response', 'NOUN'), (',', 'PUNCT'), ('machine', 'NOUN'), ('said', 'VERB'), ('intelligent', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('tester', 'nsubj'), ('fails', 'advcl'), ('determine', 'xcomp'), ('machine', 'nmod'), ('response', 'dobj'), ('human', 'amod'), ('response', 'pobj'), (',', 'punct'), ('machine', 'nsubjpass'), ('said', 'ROOT'), ('intelligent', 'acomp'), ('.', 'punct')]

>> Bigrams: 
[[tester, fails], [fails, determine], [determine, machine], [machine, response], [response, human], [human, response], [response, ,], [,, machine], [machine, said], [said, intelligent], [intelligent, .]]

>> Trigrams: 
[[tester, fails, determine], [fails, determine, machine], [determine, machine, response], [machine, response, human], [response, human, response], [human, response, ,], [response, ,, machine], [,, machine, said], [machine, said, intelligent], [said, intelligent, .]]

>> Noun Phrases are: 
[the tester, machine’s response, the human response, the machine]

>> Named Entities are: 
[]


============================ Sentence 69 =============================

Properties of Environment The environment has multifold properties − · Discrete / Continuous 


>> Tokens are: 
[Properties, Environment, environment, multifold, properties, −, ·, Discrete, /, Continuous] 

>> PoS Tags are: 
[('Properties', 'NOUN'), ('Environment', 'PROPN'), ('environment', 'NOUN'), ('multifold', 'NOUN'), ('properties', 'NOUN'), ('−', 'VERB'), ('·', 'PUNCT'), ('Discrete', 'PROPN'), ('/', 'SYM'), ('Continuous', 'ADJ')] 

>> Dependency Tags are: 
[('Properties', 'nsubj'), ('Environment', 'pobj'), ('environment', 'nsubj'), ('multifold', 'ROOT'), ('properties', 'dobj'), ('−', 'advcl'), ('·', 'punct'), ('Discrete', 'nmod'), ('/', 'punct'), ('Continuous', 'punct')]

>> Bigrams: 
[[Properties, Environment], [Environment, environment], [environment, multifold], [multifold, properties], [properties, −], [−, ·], [·, Discrete], [Discrete, /], [/, Continuous]]

>> Trigrams: 
[[Properties, Environment, environment], [Environment, environment, multifold], [environment, multifold, properties], [multifold, properties, −], [properties, −, ·], [−, ·, Discrete], [·, Discrete, /], [Discrete, /, Continuous]]

>> Noun Phrases are: 
[Properties, Environment, The environment, properties]

>> Named Entities are: 
[('− · Discrete / Continuous', 'PERSON')]


============================ Sentence 70 =============================

− If there are a limited number of distinct, clearly defined, states of the environment, the environment is discrete (For example, chess); otherwise it is continuous (For example, driving). 


>> Tokens are: 
[−, limited, number, distinct, ,, clearly, defined, ,, states, environment, ,, environment, discrete, (, example, ,, chess, ), ;, continuous, (, example, ,, driving, ), .] 

>> PoS Tags are: 
[('−', 'NOUN'), ('limited', 'ADJ'), ('number', 'NOUN'), ('distinct', 'ADJ'), (',', 'PUNCT'), ('clearly', 'ADV'), ('defined', 'VERB'), (',', 'PUNCT'), ('states', 'NOUN'), ('environment', 'NOUN'), (',', 'PUNCT'), ('environment', 'NOUN'), ('discrete', 'ADJ'), ('(', 'PUNCT'), ('example', 'NOUN'), (',', 'PUNCT'), ('chess', 'NOUN'), (')', 'PUNCT'), (';', 'PUNCT'), ('continuous', 'ADJ'), ('(', 'PUNCT'), ('example', 'NOUN'), (',', 'PUNCT'), ('driving', 'VERB'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('−', 'npadvmod'), ('limited', 'amod'), ('number', 'attr'), ('distinct', 'amod'), (',', 'punct'), ('clearly', 'advmod'), ('defined', 'pcomp'), (',', 'punct'), ('states', 'nsubj'), ('environment', 'pobj'), (',', 'punct'), ('environment', 'nsubj'), ('discrete', 'acomp'), ('(', 'punct'), ('example', 'pobj'), (',', 'punct'), ('chess', 'npadvmod'), (')', 'punct'), (';', 'punct'), ('continuous', 'acomp'), ('(', 'punct'), ('example', 'pobj'), (',', 'punct'), ('driving', 'ROOT'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[−, limited], [limited, number], [number, distinct], [distinct, ,], [,, clearly], [clearly, defined], [defined, ,], [,, states], [states, environment], [environment, ,], [,, environment], [environment, discrete], [discrete, (], [(, example], [example, ,], [,, chess], [chess, )], [), ;], [;, continuous], [continuous, (], [(, example], [example, ,], [,, driving], [driving, )], [), .]]

>> Trigrams: 
[[−, limited, number], [limited, number, distinct], [number, distinct, ,], [distinct, ,, clearly], [,, clearly, defined], [clearly, defined, ,], [defined, ,, states], [,, states, environment], [states, environment, ,], [environment, ,, environment], [,, environment, discrete], [environment, discrete, (], [discrete, (, example], [(, example, ,], [example, ,, chess], [,, chess, )], [chess, ), ;], [), ;, continuous], [;, continuous, (], [continuous, (, example], [(, example, ,], [example, ,, driving], [,, driving, )], [driving, ), .]]

>> Noun Phrases are: 
[a limited number, states, the environment, the environment, example, it, example]

>> Named Entities are: 
[]


============================ Sentence 71 =============================

· 


>> Tokens are: 
[·] 

>> PoS Tags are: 
[('·', 'PUNCT')] 

>> Dependency Tags are: 
[('·', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 72 =============================

Observable / Partially Observable 


>> Tokens are: 
[Observable, /, Partially, Observable] 

>> PoS Tags are: 
[('Observable', 'PROPN'), ('/', 'SYM'), ('Partially', 'ADV'), ('Observable', 'ADJ')] 

>> Dependency Tags are: 
[('Observable', 'ROOT'), ('/', 'punct'), ('Partially', 'advmod'), ('Observable', 'punct')]

>> Bigrams: 
[[Observable, /], [/, Partially], [Partially, Observable]]

>> Trigrams: 
[[Observable, /, Partially], [/, Partially, Observable]]

>> Noun Phrases are: 
[Observable]

>> Named Entities are: 
[('Observable / Partially Observable', 'ORG')]


============================ Sentence 73 =============================

− If it is possible to determine the complete state of the environment at each time point from the percepts it is observable; otherwise it is only partially observable. 


>> Tokens are: 
[−, possible, determine, complete, state, environment, time, point, percepts, observable, ;, partially, observable, .] 

>> PoS Tags are: 
[('−', 'NOUN'), ('possible', 'ADJ'), ('determine', 'VERB'), ('complete', 'ADJ'), ('state', 'NOUN'), ('environment', 'NOUN'), ('time', 'NOUN'), ('point', 'NOUN'), ('percepts', 'NOUN'), ('observable', 'ADJ'), (';', 'PUNCT'), ('partially', 'ADV'), ('observable', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('−', 'npadvmod'), ('possible', 'acomp'), ('determine', 'xcomp'), ('complete', 'amod'), ('state', 'dobj'), ('environment', 'pobj'), ('time', 'compound'), ('point', 'pobj'), ('percepts', 'pobj'), ('observable', 'acomp'), (';', 'punct'), ('partially', 'advmod'), ('observable', 'acomp'), ('.', 'punct')]

>> Bigrams: 
[[−, possible], [possible, determine], [determine, complete], [complete, state], [state, environment], [environment, time], [time, point], [point, percepts], [percepts, observable], [observable, ;], [;, partially], [partially, observable], [observable, .]]

>> Trigrams: 
[[−, possible, determine], [possible, determine, complete], [determine, complete, state], [complete, state, environment], [state, environment, time], [environment, time, point], [time, point, percepts], [point, percepts, observable], [percepts, observable, ;], [observable, ;, partially], [;, partially, observable], [partially, observable, .]]

>> Noun Phrases are: 
[it, the complete state, the environment, each time point, the percepts, it, it]

>> Named Entities are: 
[]


============================ Sentence 74 =============================

· Static / Dynamic − If the environment does not change while an agent is acting, then it is static; otherwise it is dynamic. 


>> Tokens are: 
[·, Static, /, Dynamic, −, environment, change, agent, acting, ,, static, ;, dynamic, .] 

>> PoS Tags are: 
[('·', 'PUNCT'), ('Static', 'PROPN'), ('/', 'SYM'), ('Dynamic', 'ADJ'), ('−', 'NOUN'), ('environment', 'NOUN'), ('change', 'VERB'), ('agent', 'NOUN'), ('acting', 'VERB'), (',', 'PUNCT'), ('static', 'ADJ'), (';', 'PUNCT'), ('dynamic', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('·', 'punct'), ('Static', 'amod'), ('/', 'punct'), ('Dynamic', 'compound'), ('−', 'nsubj'), ('environment', 'nsubj'), ('change', 'advcl'), ('agent', 'nsubj'), ('acting', 'advcl'), (',', 'punct'), ('static', 'acomp'), (';', 'punct'), ('dynamic', 'acomp'), ('.', 'punct')]

>> Bigrams: 
[[·, Static], [Static, /], [/, Dynamic], [Dynamic, −], [−, environment], [environment, change], [change, agent], [agent, acting], [acting, ,], [,, static], [static, ;], [;, dynamic], [dynamic, .]]

>> Trigrams: 
[[·, Static, /], [Static, /, Dynamic], [/, Dynamic, −], [Dynamic, −, environment], [−, environment, change], [environment, change, agent], [change, agent, acting], [agent, acting, ,], [acting, ,, static], [,, static, ;], [static, ;, dynamic], [;, dynamic, .]]

>> Noun Phrases are: 
[· Static / Dynamic −, the environment, an agent, it, it]

>> Named Entities are: 
[('Static / Dynamic −', 'ORG')]


============================ Sentence 75 =============================

· Single agent / Multiple agents − The environment may contain other agents which may be of the same or different kind as that of the agent. 


>> Tokens are: 
[·, Single, agent, /, Multiple, agents, −, environment, contain, agents, different, kind, agent, .] 

>> PoS Tags are: 
[('·', 'PUNCT'), ('Single', 'ADJ'), ('agent', 'NOUN'), ('/', 'SYM'), ('Multiple', 'ADJ'), ('agents', 'NOUN'), ('−', 'VERB'), ('environment', 'NOUN'), ('contain', 'VERB'), ('agents', 'NOUN'), ('different', 'ADJ'), ('kind', 'NOUN'), ('agent', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('·', 'punct'), ('Single', 'amod'), ('agent', 'nmod'), ('/', 'punct'), ('Multiple', 'amod'), ('agents', 'nsubj'), ('−', 'ROOT'), ('environment', 'nsubj'), ('contain', 'ccomp'), ('agents', 'dobj'), ('different', 'conj'), ('kind', 'pobj'), ('agent', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[·, Single], [Single, agent], [agent, /], [/, Multiple], [Multiple, agents], [agents, −], [−, environment], [environment, contain], [contain, agents], [agents, different], [different, kind], [kind, agent], [agent, .]]

>> Trigrams: 
[[·, Single, agent], [Single, agent, /], [agent, /, Multiple], [/, Multiple, agents], [Multiple, agents, −], [agents, −, environment], [−, environment, contain], [environment, contain, agents], [contain, agents, different], [agents, different, kind], [different, kind, agent], [kind, agent, .]]

>> Noun Phrases are: 
[· Single agent / Multiple agents, The environment, other agents, the same or different kind, the agent]

>> Named Entities are: 
[('Single', 'PERSON')]


============================ Sentence 76 =============================

· Accessible / Inaccessible − If the agent’s sensory apparatus can have access to the complete state of the environment, then the environment is accessible to that agent. 


>> Tokens are: 
[·, Accessible, /, Inaccessible, −, agent, sensory, apparatus, access, complete, state, environment, ,, environment, accessible, agent, .] 

>> PoS Tags are: 
[('·', 'PUNCT'), ('Accessible', 'ADJ'), ('/', 'SYM'), ('Inaccessible', 'ADJ'), ('−', 'NOUN'), ('agent', 'NOUN'), ('sensory', 'ADJ'), ('apparatus', 'NOUN'), ('access', 'NOUN'), ('complete', 'ADJ'), ('state', 'NOUN'), ('environment', 'NOUN'), (',', 'PUNCT'), ('environment', 'NOUN'), ('accessible', 'ADJ'), ('agent', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('·', 'punct'), ('Accessible', 'amod'), ('/', 'punct'), ('Inaccessible', 'amod'), ('−', 'nsubj'), ('agent', 'poss'), ('sensory', 'amod'), ('apparatus', 'nsubj'), ('access', 'dobj'), ('complete', 'amod'), ('state', 'pobj'), ('environment', 'pobj'), (',', 'punct'), ('environment', 'nsubj'), ('accessible', 'acomp'), ('agent', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[·, Accessible], [Accessible, /], [/, Inaccessible], [Inaccessible, −], [−, agent], [agent, sensory], [sensory, apparatus], [apparatus, access], [access, complete], [complete, state], [state, environment], [environment, ,], [,, environment], [environment, accessible], [accessible, agent], [agent, .]]

>> Trigrams: 
[[·, Accessible, /], [Accessible, /, Inaccessible], [/, Inaccessible, −], [Inaccessible, −, agent], [−, agent, sensory], [agent, sensory, apparatus], [sensory, apparatus, access], [apparatus, access, complete], [access, complete, state], [complete, state, environment], [state, environment, ,], [environment, ,, environment], [,, environment, accessible], [environment, accessible, agent], [accessible, agent, .]]

>> Noun Phrases are: 
[· Accessible / Inaccessible −, the agent’s sensory apparatus, access, the complete state, the environment, the environment, that agent]

>> Named Entities are: 
[('Accessible / Inaccessible −', 'ORG')]


============================ Sentence 77 =============================

· Deterministic / Non-deterministic − If the next state of the environment is completely determined by the current state and the actions of the agent, then the environment is deterministic; otherwise it is non-deterministic. · 


>> Tokens are: 
[·, Deterministic, /, Non, -, deterministic, −, state, environment, completely, determined, current, state, actions, agent, ,, environment, deterministic, ;, non, -, deterministic, ., ·] 

>> PoS Tags are: 
[('·', 'PUNCT'), ('Deterministic', 'ADJ'), ('/', 'SYM'), ('Non', 'ADJ'), ('-', 'ADJ'), ('deterministic', 'ADJ'), ('−', 'NOUN'), ('state', 'NOUN'), ('environment', 'NOUN'), ('completely', 'ADV'), ('determined', 'VERB'), ('current', 'ADJ'), ('state', 'NOUN'), ('actions', 'NOUN'), ('agent', 'NOUN'), (',', 'PUNCT'), ('environment', 'NOUN'), ('deterministic', 'ADJ'), (';', 'PUNCT'), ('non', 'ADJ'), ('-', 'ADJ'), ('deterministic', 'ADJ'), ('.', 'PUNCT'), ('·', 'PUNCT')] 

>> Dependency Tags are: 
[('·', 'punct'), ('Deterministic', 'amod'), ('/', 'punct'), ('Non', 'amod'), ('-', 'amod'), ('deterministic', 'amod'), ('−', 'nsubj'), ('state', 'nsubjpass'), ('environment', 'pobj'), ('completely', 'advmod'), ('determined', 'advcl'), ('current', 'amod'), ('state', 'pobj'), ('actions', 'conj'), ('agent', 'pobj'), (',', 'punct'), ('environment', 'nsubj'), ('deterministic', 'acomp'), (';', 'punct'), ('non', 'acomp'), ('-', 'acomp'), ('deterministic', 'acomp'), ('.', 'punct'), ('·', 'punct')]

>> Bigrams: 
[[·, Deterministic], [Deterministic, /], [/, Non], [Non, -], [-, deterministic], [deterministic, −], [−, state], [state, environment], [environment, completely], [completely, determined], [determined, current], [current, state], [state, actions], [actions, agent], [agent, ,], [,, environment], [environment, deterministic], [deterministic, ;], [;, non], [non, -], [-, deterministic], [deterministic, .], [., ·]]

>> Trigrams: 
[[·, Deterministic, /], [Deterministic, /, Non], [/, Non, -], [Non, -, deterministic], [-, deterministic, −], [deterministic, −, state], [−, state, environment], [state, environment, completely], [environment, completely, determined], [completely, determined, current], [determined, current, state], [current, state, actions], [state, actions, agent], [actions, agent, ,], [agent, ,, environment], [,, environment, deterministic], [environment, deterministic, ;], [deterministic, ;, non], [;, non, -], [non, -, deterministic], [-, deterministic, .], [deterministic, ., ·]]

>> Noun Phrases are: 
[· Deterministic / Non-deterministic −, the next state, the environment, the current state, the actions, the agent, the environment, it]

>> Named Entities are: 
[('Deterministic / Non-deterministic', 'ORG')]


============================ Sentence 78 =============================

Episodic / Non-episodic − 


>> Tokens are: 
[Episodic, /, Non, -, episodic, −] 

>> PoS Tags are: 
[('Episodic', 'ADJ'), ('/', 'SYM'), ('Non', 'ADJ'), ('-', 'ADJ'), ('episodic', 'ADJ'), ('−', 'NOUN')] 

>> Dependency Tags are: 
[('Episodic', 'amod'), ('/', 'punct'), ('Non', 'amod'), ('-', 'amod'), ('episodic', 'amod'), ('−', 'ROOT')]

>> Bigrams: 
[[Episodic, /], [/, Non], [Non, -], [-, episodic], [episodic, −]]

>> Trigrams: 
[[Episodic, /, Non], [/, Non, -], [Non, -, episodic], [-, episodic, −]]

>> Noun Phrases are: 
[Episodic / Non-episodic −]

>> Named Entities are: 
[('Episodic / Non-episodic', 'PERSON')]


============================ Sentence 79 =============================

In an episodic environment, each episode consists of the agent perceiving and then acting. 


>> Tokens are: 
[episodic, environment, ,, episode, consists, agent, perceiving, acting, .] 

>> PoS Tags are: 
[('episodic', 'ADJ'), ('environment', 'NOUN'), (',', 'PUNCT'), ('episode', 'NOUN'), ('consists', 'VERB'), ('agent', 'NOUN'), ('perceiving', 'VERB'), ('acting', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('episodic', 'amod'), ('environment', 'pobj'), (',', 'punct'), ('episode', 'nsubj'), ('consists', 'ROOT'), ('agent', 'compound'), ('perceiving', 'pobj'), ('acting', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[episodic, environment], [environment, ,], [,, episode], [episode, consists], [consists, agent], [agent, perceiving], [perceiving, acting], [acting, .]]

>> Trigrams: 
[[episodic, environment, ,], [environment, ,, episode], [,, episode, consists], [episode, consists, agent], [consists, agent, perceiving], [agent, perceiving, acting], [perceiving, acting, .]]

>> Noun Phrases are: 
[an episodic environment, each episode]

>> Named Entities are: 
[]


============================ Sentence 80 =============================

The quality of its action depends just on the episode itself. 


>> Tokens are: 
[quality, action, depends, episode, .] 

>> PoS Tags are: 
[('quality', 'NOUN'), ('action', 'NOUN'), ('depends', 'VERB'), ('episode', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('quality', 'nsubj'), ('action', 'pobj'), ('depends', 'ROOT'), ('episode', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[quality, action], [action, depends], [depends, episode], [episode, .]]

>> Trigrams: 
[[quality, action, depends], [action, depends, episode], [depends, episode, .]]

>> Noun Phrases are: 
[The quality, its action, the episode, itself]

>> Named Entities are: 
[]


============================ Sentence 81 =============================

Subsequent episodes do not depend on the actions in the previous episodes. 


>> Tokens are: 
[Subsequent, episodes, depend, actions, previous, episodes, .] 

>> PoS Tags are: 
[('Subsequent', 'ADJ'), ('episodes', 'NOUN'), ('depend', 'VERB'), ('actions', 'NOUN'), ('previous', 'ADJ'), ('episodes', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Subsequent', 'amod'), ('episodes', 'nsubj'), ('depend', 'ROOT'), ('actions', 'pobj'), ('previous', 'amod'), ('episodes', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Subsequent, episodes], [episodes, depend], [depend, actions], [actions, previous], [previous, episodes], [episodes, .]]

>> Trigrams: 
[[Subsequent, episodes, depend], [episodes, depend, actions], [depend, actions, previous], [actions, previous, episodes], [previous, episodes, .]]

>> Noun Phrases are: 
[Subsequent episodes, the actions, the previous episodes]

>> Named Entities are: 
[]


============================ Sentence 82 =============================

Episodic environments are much simpler because the agent does not need to think ahead. 


>> Tokens are: 
[Episodic, environments, simpler, agent, need, think, ahead, .] 

>> PoS Tags are: 
[('Episodic', 'ADJ'), ('environments', 'NOUN'), ('simpler', 'ADJ'), ('agent', 'NOUN'), ('need', 'VERB'), ('think', 'VERB'), ('ahead', 'ADV'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Episodic', 'amod'), ('environments', 'nsubj'), ('simpler', 'acomp'), ('agent', 'nsubj'), ('need', 'advcl'), ('think', 'xcomp'), ('ahead', 'advmod'), ('.', 'punct')]

>> Bigrams: 
[[Episodic, environments], [environments, simpler], [simpler, agent], [agent, need], [need, think], [think, ahead], [ahead, .]]

>> Trigrams: 
[[Episodic, environments, simpler], [environments, simpler, agent], [simpler, agent, need], [agent, need, think], [need, think, ahead], [think, ahead, .]]

>> Noun Phrases are: 
[Episodic environments, the agent]

>> Named Entities are: 
[]
