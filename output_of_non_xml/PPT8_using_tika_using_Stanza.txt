

========================== Sentence 1 ===========================

 Power 

Tokens are: 
>> ['Power'] 

 UPOS tags are: 
>> [('Power', 'NOUN')] 

 XPOS tags are: 
>> [('Power', 'NN')] 

 Lemmas are: 
>> [('Power', 'power')] 

 Dependency tags are: 
>> [(('Power', 'root'), 'root')]

 Named Entities are: 
>> []

========================== Sentence 2 ===========================

 Point Presentation  Unit – 1 Introduction to Compiler Design dixita.kagathara@darshan.ac.in +91 - 97277 47317 (CE Department) Computer Engineering Department Prof. Dixita B. Kagathara Compiler Design (CD) GTU # 2170701   Darshan Institute of Engineering & Technology, Rajkot     Looping Topics to be covered  Translator Analysis synthesis model of compilation Phases of compiler Grouping of the Phases Difference between compiler & interpreter Context of compiler (Cousins of compiler) 

Tokens are: 
>> ['Point', 'Presentation', 'Unit', '–', '1', 'Introduction', 'to', 'Compiler', 'Design', 'dixita.kagathara@darshan.ac.in', '+91', '-', '97277', '47317', '(', 'CE', 'Department', ')', 'Computer', 'Engineering', 'Department', 'Prof.', 'Dixita', 'B.', 'Kagathara', 'Compiler', 'Design', '(', 'CD', ')', 'GTU', '#', '2170701', 'Darshan', 'Institute', 'of', 'Engineering', '&', 'Technology', ',', 'Rajkot', '\uf050', 'Looping', 'Topics', 'to', 'be', 'covered', 'Translator', 'Analysis', 'synthesis', 'model', 'of', 'compilation', 'Phases', 'of', 'compiler', 'Grouping', 'of', 'the', 'Phases', 'Difference', 'between', 'compiler', '&', 'interpreter', 'Context', 'of', 'compiler', '(', 'Cousins', 'of', 'compiler', ')'] 

 UPOS tags are: 
>> [('Point', 'NOUN'), ('Presentation', 'NOUN'), ('Unit', 'NOUN'), ('–', 'PUNCT'), ('1', 'NUM'), ('Introduction', 'NOUN'), ('to', 'ADP'), ('Compiler', 'PROPN'), ('Design', 'PROPN'), ('dixita.kagathara@darshan.ac.in', 'X'), ('+91', 'NUM'), ('-', 'SYM'), ('97277', 'NUM'), ('47317', 'NUM'), ('(', 'PUNCT'), ('CE', 'PROPN'), ('Department', 'PROPN'), (')', 'PUNCT'), ('Computer', 'PROPN'), ('Engineering', 'PROPN'), ('Department', 'PROPN'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B.', 'PROPN'), ('Kagathara', 'PROPN'), ('Compiler', 'PROPN'), ('Design', 'PROPN'), ('(', 'PUNCT'), ('CD', 'PROPN'), (')', 'PUNCT'), ('GTU', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('of', 'ADP'), ('Engineering', 'PROPN'), ('&', 'CCONJ'), ('Technology', 'PROPN'), (',', 'PUNCT'), ('Rajkot', 'PROPN'), ('\uf050', 'PUNCT'), ('Looping', 'PROPN'), ('Topics', 'PROPN'), ('to', 'PART'), ('be', 'AUX'), ('covered', 'VERB'), ('Translator', 'PROPN'), ('Analysis', 'PROPN'), ('synthesis', 'NOUN'), ('model', 'NOUN'), ('of', 'ADP'), ('compilation', 'NOUN'), ('Phases', 'NOUN'), ('of', 'ADP'), ('compiler', 'NOUN'), ('Grouping', 'NOUN'), ('of', 'ADP'), ('the', 'DET'), ('Phases', 'PROPN'), ('Difference', 'PROPN'), ('between', 'ADP'), ('compiler', 'NOUN'), ('&', 'CCONJ'), ('interpreter', 'NOUN'), ('Context', 'PROPN'), ('of', 'ADP'), ('compiler', 'NOUN'), ('(', 'PUNCT'), ('Cousins', 'PROPN'), ('of', 'ADP'), ('compiler', 'NOUN'), (')', 'PUNCT')] 

 XPOS tags are: 
>> [('Point', 'NN'), ('Presentation', 'NN'), ('Unit', 'NN'), ('–', ':'), ('1', 'CD'), ('Introduction', 'NN'), ('to', 'IN'), ('Compiler', 'NNP'), ('Design', 'NNP'), ('dixita.kagathara@darshan.ac.in', 'ADD'), ('+91', 'CD'), ('-', 'SYM'), ('97277', 'CD'), ('47317', 'CD'), ('(', '-LRB-'), ('CE', 'NNP'), ('Department', 'NNP'), (')', '-RRB-'), ('Computer', 'NNP'), ('Engineering', 'NNP'), ('Department', 'NNP'), ('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B.', 'NNP'), ('Kagathara', 'NNP'), ('Compiler', 'NNP'), ('Design', 'NNP'), ('(', '-LRB-'), ('CD', 'NNP'), (')', '-RRB-'), ('GTU', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('Darshan', 'NNP'), ('Institute', 'NNP'), ('of', 'IN'), ('Engineering', 'NNP'), ('&', 'CC'), ('Technology', 'NNP'), (',', ','), ('Rajkot', 'NNP'), ('\uf050', ','), ('Looping', 'NNP'), ('Topics', 'NNPS'), ('to', 'TO'), ('be', 'VB'), ('covered', 'VBN'), ('Translator', 'NNP'), ('Analysis', 'NNP'), ('synthesis', 'NN'), ('model', 'NN'), ('of', 'IN'), ('compilation', 'NN'), ('Phases', 'NNS'), ('of', 'IN'), ('compiler', 'NN'), ('Grouping', 'NN'), ('of', 'IN'), ('the', 'DT'), ('Phases', 'NNPS'), ('Difference', 'NNP'), ('between', 'IN'), ('compiler', 'NN'), ('&', 'CC'), ('interpreter', 'NN'), ('Context', 'NNP'), ('of', 'IN'), ('compiler', 'NN'), ('(', '-LRB-'), ('Cousins', 'NNPS'), ('of', 'IN'), ('compiler', 'NN'), (')', '-RRB-')] 

 Lemmas are: 
>> [('Point', 'point'), ('Presentation', 'presentation'), ('Unit', 'unit'), ('–', '-'), ('1', '1'), ('Introduction', 'introduction'), ('to', 'to'), ('Compiler', 'Compiler'), ('Design', 'Design'), ('dixita.kagathara@darshan.ac.in', 'dixita.kagathara@darshan.ac.in'), ('+91', '+91'), ('-', '-'), ('97277', '97277'), ('47317', '47317'), ('(', '('), ('CE', 'CE'), ('Department', 'Department'), (')', ')'), ('Computer', 'Computer'), ('Engineering', 'Engineering'), ('Department', 'Department'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B.', 'B.'), ('Kagathara', 'Kagathara'), ('Compiler', 'Compiler'), ('Design', 'Design'), ('(', '('), ('CD', 'CD'), (')', ')'), ('GTU', 'GTU'), ('#', '#'), ('2170701', '2170701'), ('Darshan', 'Darshan'), ('Institute', 'Institute'), ('of', 'of'), ('Engineering', 'Engineering'), ('&', '&'), ('Technology', 'Technology'), (',', ','), ('Rajkot', 'Rajkot'), ('\uf050', "''"), ('Looping', 'Looping'), ('Topics', 'topic'), ('to', 'to'), ('be', 'be'), ('covered', 'cover'), ('Translator', 'Translator'), ('Analysis', 'Analysis'), ('synthesis', 'synthesis'), ('model', 'model'), ('of', 'of'), ('compilation', 'compilation'), ('Phases', 'phase'), ('of', 'of'), ('compiler', 'compiler'), ('Grouping', 'grouping'), ('of', 'of'), ('the', 'the'), ('Phases', 'Phases'), ('Difference', 'Difference'), ('between', 'between'), ('compiler', 'compiler'), ('&', '&'), ('interpreter', 'interpreter'), ('Context', 'Context'), ('of', 'of'), ('compiler', 'compiler'), ('(', '('), ('Cousins', 'Cousins'), ('of', 'of'), ('compiler', 'compiler'), (')', ')')] 

 Dependency tags are: 
>> [(('Point', 'Presentation'), 'compound'), (('Presentation', 'Unit'), 'compound'), (('Unit', 'root'), 'root'), (('–', 'Unit'), 'punct'), (('1', 'Introduction'), 'nummod'), (('Introduction', 'Unit'), 'appos'), (('to', 'Design'), 'case'), (('Compiler', 'Design'), 'compound'), (('Design', 'Introduction'), 'nmod'), (('dixita.kagathara@darshan.ac.in', 'Design'), 'appos'), (('+91', 'dixita.kagathara@darshan.ac.in'), 'nummod'), (('-', '97277'), 'case'), (('97277', '+91'), 'nmod'), (('47317', 'Department'), 'nummod'), (('(', 'Department'), 'punct'), (('CE', 'Department'), 'compound'), (('Department', 'dixita.kagathara@darshan.ac.in'), 'appos'), ((')', 'Department'), 'punct'), (('Computer', 'Department'), 'compound'), (('Engineering', 'Department'), 'compound'), (('Department', 'Unit'), 'appos'), (('Prof.', 'Unit'), 'appos'), (('Dixita', 'Prof.'), 'flat'), (('B.', 'Prof.'), 'flat'), (('Kagathara', 'Design'), 'compound'), (('Compiler', 'Design'), 'compound'), (('Design', 'Prof.'), 'appos'), (('(', 'CD'), 'punct'), (('CD', 'Design'), 'appos'), ((')', 'CD'), 'punct'), (('GTU', 'Institute'), 'compound'), (('#', 'Institute'), 'compound'), (('2170701', '#'), 'nummod'), (('Darshan', 'Institute'), 'compound'), (('Institute', 'Unit'), 'conj'), (('of', 'Engineering'), 'case'), (('Engineering', 'Institute'), 'nmod'), (('&', 'Technology'), 'cc'), (('Technology', 'Engineering'), 'conj'), ((',', 'Rajkot'), 'punct'), (('Rajkot', 'Engineering'), 'appos'), (('\uf050', 'Rajkot'), 'punct'), (('Looping', 'Topics'), 'compound'), (('Topics', 'Institute'), 'appos'), (('to', 'covered'), 'mark'), (('be', 'covered'), 'aux:pass'), (('covered', 'Topics'), 'acl'), (('Translator', 'Analysis'), 'compound'), (('Analysis', 'synthesis'), 'compound'), (('synthesis', 'model'), 'compound'), (('model', 'covered'), 'obj'), (('of', 'Phases'), 'case'), (('compilation', 'Phases'), 'compound'), (('Phases', 'model'), 'nmod'), (('of', 'Grouping'), 'case'), (('compiler', 'Grouping'), 'compound'), (('Grouping', 'Phases'), 'nmod'), (('of', 'Difference'), 'case'), (('the', 'Difference'), 'det'), (('Phases', 'Difference'), 'compound'), (('Difference', 'Grouping'), 'nmod'), (('between', 'compiler'), 'case'), (('compiler', 'Difference'), 'nmod'), (('&', 'Context'), 'cc'), (('interpreter', 'Context'), 'compound'), (('Context', 'compiler'), 'conj'), (('of', 'compiler'), 'case'), (('compiler', 'Context'), 'nmod'), (('(', 'Cousins'), 'punct'), (('Cousins', 'compiler'), 'appos'), (('of', 'compiler'), 'case'), (('compiler', 'Cousins'), 'nmod'), ((')', 'Cousins'), 'punct')]

 Named Entities are: 
>> [('1', 'CARDINAL'), ('+91', 'CARDINAL'), ('Dixita B. Kagathara Compiler Design', 'ORG'), ('2170701', 'CARDINAL'), ('Darshan Institute of Engineering & Technology', 'ORG'), ('Rajkot    \uf050 Looping Topics', 'ORG'), ('Translator Analysis', 'WORK_OF_ART'), ('Phases of compiler Grouping of the Phases Difference', 'WORK_OF_ART'), ('Cousins of compiler', 'WORK_OF_ART')]

========================== Sentence 3 ===========================

 Pass structure Types of compiler            Translator   હેલ્લો        Translator A translator is a program that takes one form of program as input and converts it into another form. 

Tokens are: 
>> ['Pass', 'structure', 'Types', 'of', 'compiler', 'Translator', 'હેલ્લો', 'Translator', 'A', 'translator', 'is', 'a', 'program', 'that', 'takes', 'one', 'form', 'of', 'program', 'as', 'input', 'and', 'converts', 'it', 'into', 'another', 'form', '.'] 

 UPOS tags are: 
>> [('Pass', 'VERB'), ('structure', 'NOUN'), ('Types', 'NOUN'), ('of', 'ADP'), ('compiler', 'NOUN'), ('Translator', 'PROPN'), ('હેલ્લો', 'NOUN'), ('Translator', 'PROPN'), ('A', 'DET'), ('translator', 'NOUN'), ('is', 'AUX'), ('a', 'DET'), ('program', 'NOUN'), ('that', 'PRON'), ('takes', 'VERB'), ('one', 'NUM'), ('form', 'NOUN'), ('of', 'ADP'), ('program', 'NOUN'), ('as', 'ADP'), ('input', 'NOUN'), ('and', 'CCONJ'), ('converts', 'VERB'), ('it', 'PRON'), ('into', 'ADP'), ('another', 'DET'), ('form', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Pass', 'VB'), ('structure', 'NN'), ('Types', 'NNS'), ('of', 'IN'), ('compiler', 'NN'), ('Translator', 'NNP'), ('હેલ્લો', 'NN'), ('Translator', 'NNP'), ('A', 'DT'), ('translator', 'NN'), ('is', 'VBZ'), ('a', 'DT'), ('program', 'NN'), ('that', 'WDT'), ('takes', 'VBZ'), ('one', 'CD'), ('form', 'NN'), ('of', 'IN'), ('program', 'NN'), ('as', 'IN'), ('input', 'NN'), ('and', 'CC'), ('converts', 'VBZ'), ('it', 'PRP'), ('into', 'IN'), ('another', 'DT'), ('form', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('Pass', 'pass'), ('structure', 'structure'), ('Types', 'type'), ('of', 'of'), ('compiler', 'compiler'), ('Translator', 'Translator'), ('હેલ્લો', 'હેલ્લો'), ('Translator', 'Translator'), ('A', 'a'), ('translator', 'translator'), ('is', 'be'), ('a', 'a'), ('program', 'program'), ('that', 'that'), ('takes', 'take'), ('one', 'one'), ('form', 'form'), ('of', 'of'), ('program', 'program'), ('as', 'as'), ('input', 'input'), ('and', 'and'), ('converts', 'convert'), ('it', 'it'), ('into', 'into'), ('another', 'another'), ('form', 'form'), ('.', '.')] 

 Dependency tags are: 
>> [(('Pass', 'root'), 'root'), (('structure', 'Types'), 'compound'), (('Types', 'Pass'), 'obj'), (('of', 'Translator'), 'case'), (('compiler', 'Types'), 'nmod'), (('Translator', 'Types'), 'nmod'), (('હેલ્લો', 'Translator'), 'compound'), (('Translator', 'Translator'), 'flat'), (('A', 'translator'), 'det'), (('translator', 'program'), 'nsubj'), (('is', 'program'), 'cop'), (('a', 'program'), 'det'), (('program', 'Pass'), 'parataxis'), (('that', 'takes'), 'nsubj'), (('takes', 'program'), 'acl:relcl'), (('one', 'form'), 'nummod'), (('form', 'takes'), 'obj'), (('of', 'program'), 'case'), (('program', 'form'), 'nmod'), (('as', 'input'), 'case'), (('input', 'takes'), 'obl'), (('and', 'converts'), 'cc'), (('converts', 'takes'), 'conj'), (('it', 'converts'), 'obj'), (('into', 'form'), 'case'), (('another', 'form'), 'det'), (('form', 'converts'), 'obl'), (('.', 'Pass'), 'punct')]

 Named Entities are: 
>> [('one', 'CARDINAL')]

========================== Sentence 4 ===========================

 Types of translators are: Compiler Interpreter Assembler  Error Messages  Translator Source Program Target Program (If any)    Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1 – Introduction to Compiler Design ‹#›  Compiler  A compiler is a program that reads a program written in source language and translates it into an equivalent program in target language. 

Tokens are: 
>> ['Types', 'of', 'translators', 'are', ':', 'Compiler', 'Interpreter', 'Assembler', 'Error', 'Messages', 'Translator', 'Source', 'Program', 'Target', 'Program', '(', 'If', 'any', ')', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '1', '–', 'Introduction', 'to', 'Compiler', 'Design', '‹#›', 'Compiler', 'A', 'compiler', 'is', 'a', 'program', 'that', 'reads', 'a', 'program', 'written', 'in', 'source', 'language', 'and', 'translates', 'it', 'into', 'an', 'equivalent', 'program', 'in', 'target', 'language', '.'] 

 UPOS tags are: 
>> [('Types', 'NOUN'), ('of', 'ADP'), ('translators', 'NOUN'), ('are', 'AUX'), (':', 'PUNCT'), ('Compiler', 'PROPN'), ('Interpreter', 'PROPN'), ('Assembler', 'PROPN'), ('Error', 'PROPN'), ('Messages', 'PROPN'), ('Translator', 'PROPN'), ('Source', 'PROPN'), ('Program', 'PROPN'), ('Target', 'PROPN'), ('Program', 'PROPN'), ('(', 'PUNCT'), ('If', 'SCONJ'), ('any', 'PRON'), (')', 'PUNCT'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'PROPN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Introduction', 'NOUN'), ('to', 'ADP'), ('Compiler', 'PROPN'), ('Design', 'PROPN'), ('‹#›', 'PROPN'), ('Compiler', 'PROPN'), ('A', 'DET'), ('compiler', 'NOUN'), ('is', 'AUX'), ('a', 'DET'), ('program', 'NOUN'), ('that', 'PRON'), ('reads', 'VERB'), ('a', 'DET'), ('program', 'NOUN'), ('written', 'VERB'), ('in', 'ADP'), ('source', 'NOUN'), ('language', 'NOUN'), ('and', 'CCONJ'), ('translates', 'VERB'), ('it', 'PRON'), ('into', 'ADP'), ('an', 'DET'), ('equivalent', 'ADJ'), ('program', 'NOUN'), ('in', 'ADP'), ('target', 'NOUN'), ('language', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Types', 'NNS'), ('of', 'IN'), ('translators', 'NNS'), ('are', 'VBP'), (':', ':'), ('Compiler', 'NNP'), ('Interpreter', 'NNP'), ('Assembler', 'NNP'), ('Error', 'NNP'), ('Messages', 'NNPS'), ('Translator', 'NNP'), ('Source', 'NNP'), ('Program', 'NNP'), ('Target', 'NNP'), ('Program', 'NNP'), ('(', '-LRB-'), ('If', 'IN'), ('any', 'DT'), (')', '-RRB-'), ('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NNP'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('1', 'CD'), ('–', ':'), ('Introduction', 'NN'), ('to', 'IN'), ('Compiler', 'NNP'), ('Design', 'NNP'), ('‹#›', 'NNP'), ('Compiler', 'NNP'), ('A', 'DT'), ('compiler', 'NN'), ('is', 'VBZ'), ('a', 'DT'), ('program', 'NN'), ('that', 'WDT'), ('reads', 'VBZ'), ('a', 'DT'), ('program', 'NN'), ('written', 'VBN'), ('in', 'IN'), ('source', 'NN'), ('language', 'NN'), ('and', 'CC'), ('translates', 'VBZ'), ('it', 'PRP'), ('into', 'IN'), ('an', 'DT'), ('equivalent', 'JJ'), ('program', 'NN'), ('in', 'IN'), ('target', 'NN'), ('language', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('Types', 'type'), ('of', 'of'), ('translators', 'translator'), ('are', 'be'), (':', ':'), ('Compiler', 'Compiler'), ('Interpreter', 'Interpreter'), ('Assembler', 'Assembler'), ('Error', 'Error'), ('Messages', 'message'), ('Translator', 'Translator'), ('Source', 'Source'), ('Program', 'Program'), ('Target', 'Target'), ('Program', 'Program'), ('(', '('), ('If', 'if'), ('any', 'any'), (')', ')'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'CD'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '-'), ('Introduction', 'introduction'), ('to', 'to'), ('Compiler', 'Compiler'), ('Design', 'Design'), ('‹#›', '‹#›'), ('Compiler', 'Compiler'), ('A', 'a'), ('compiler', 'compiler'), ('is', 'be'), ('a', 'a'), ('program', 'program'), ('that', 'that'), ('reads', 'read'), ('a', 'a'), ('program', 'program'), ('written', 'write'), ('in', 'in'), ('source', 'source'), ('language', 'language'), ('and', 'and'), ('translates', 'translate'), ('it', 'it'), ('into', 'into'), ('an', 'a'), ('equivalent', 'equivalent'), ('program', 'program'), ('in', 'in'), ('target', 'target'), ('language', 'language'), ('.', '.')] 

 Dependency tags are: 
>> [(('Types', 'Program'), 'nsubj'), (('of', 'translators'), 'case'), (('translators', 'Types'), 'nmod'), (('are', 'Program'), 'cop'), ((':', 'Program'), 'punct'), (('Compiler', 'Program'), 'compound'), (('Interpreter', 'Program'), 'compound'), (('Assembler', 'Program'), 'compound'), (('Error', 'Program'), 'compound'), (('Messages', 'Program'), 'compound'), (('Translator', 'Program'), 'compound'), (('Source', 'Program'), 'compound'), (('Program', 'Program'), 'compound'), (('Target', 'Program'), 'compound'), (('Program', 'root'), 'root'), (('(', 'program'), 'punct'), (('If', 'program'), 'mark'), (('any', 'program'), 'nsubj'), ((')', 'any'), 'punct'), (('Prof.', 'program'), 'nsubj'), (('Dixita', 'Prof.'), 'flat'), (('B', 'Prof.'), 'flat'), (('Kagathara', 'Prof.'), 'flat'), (('#', 'Prof.'), 'compound'), (('2170701', 'Prof.'), 'flat'), (('(', 'CD'), 'punct'), (('CD', 'Prof.'), 'appos'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', 'Prof.'), 'appos'), (('1', 'Unit'), 'nummod'), (('–', 'Prof.'), 'punct'), (('Introduction', 'Program'), 'appos'), (('to', 'Compiler'), 'case'), (('Compiler', 'Compiler'), 'compound'), (('Design', 'Compiler'), 'compound'), (('‹#›', 'Compiler'), 'compound'), (('Compiler', 'Introduction'), 'nmod'), (('A', 'compiler'), 'det'), (('compiler', 'Compiler'), 'appos'), (('is', 'program'), 'cop'), (('a', 'program'), 'det'), (('program', 'Introduction'), 'advcl'), (('that', 'reads'), 'nsubj'), (('reads', 'program'), 'acl:relcl'), (('a', 'program'), 'det'), (('program', 'reads'), 'obj'), (('written', 'program'), 'acl'), (('in', 'language'), 'case'), (('source', 'language'), 'compound'), (('language', 'written'), 'obl'), (('and', 'translates'), 'cc'), (('translates', 'reads'), 'conj'), (('it', 'translates'), 'obj'), (('into', 'program'), 'case'), (('an', 'program'), 'det'), (('equivalent', 'program'), 'amod'), (('program', 'translates'), 'obl'), (('in', 'language'), 'case'), (('target', 'language'), 'compound'), (('language', 'program'), 'nmod'), (('.', 'are'), 'punct')]

 Named Entities are: 
>> [('2170701', 'CARDINAL'), ('1', 'CARDINAL')]

========================== Sentence 5 ===========================

 Error Messages  Source Program Target Program Compiler void main() { int a=1,b=2,c; c=a+b; printf(“%d”,c); } Source Program 0000 1100 0010 0100 0111 1000 0001 1111 0101 1110 1100 0000 1000 1011 Target Program (If any)    Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1 – Introduction to Compiler Design ‹#›  Interpreter  Interpreter is also program that reads a program written in source language and translates it into an equivalent program in target language   Interpreter              Source Program  Target Program line by line. 

Tokens are: 
>> ['Error', 'Messages', 'Source', 'Program', 'Target', 'Program', 'Compiler', 'void', 'main', '(', ')', '{', 'int', 'a=', '1', ',', 'b=2', ',', 'c', ';', 'c=a', '+b', ';', 'printf', '(', '“', '%', 'd', '”', ',', 'c', ')', ';', '}', 'Source', 'Program', '0000', '1100', '0010', '0100', '0111', '1000', '0001', '1111', '0101', '1110', '1100', '0000', '1000', '1011', 'Target', 'Program', '(', 'If', 'any', ')', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '1', '–', 'Introduction', 'to', 'Compiler', 'Design', '‹#›', 'Interpreter', 'Interpreter', 'is', 'also', 'program', 'that', 'reads', 'a', 'program', 'written', 'in', 'source', 'language', 'and', 'translates', 'it', 'into', 'an', 'equivalent', 'program', 'in', 'target', 'language', 'Interpreter', 'Source', 'Program', 'Target', 'Program', 'line', 'by', 'line', '.'] 

 UPOS tags are: 
>> [('Error', 'NOUN'), ('Messages', 'NOUN'), ('Source', 'NOUN'), ('Program', 'PROPN'), ('Target', 'PROPN'), ('Program', 'PROPN'), ('Compiler', 'PROPN'), ('void', 'NOUN'), ('main', 'ADJ'), ('(', 'PUNCT'), (')', 'PUNCT'), ('{', 'PUNCT'), ('int', 'NOUN'), ('a=', 'PROPN'), ('1', 'NUM'), (',', 'PUNCT'), ('b=2', 'PROPN'), (',', 'PUNCT'), ('c', 'NOUN'), (';', 'PUNCT'), ('c=a', 'PROPN'), ('+b', 'PUNCT'), (';', 'PUNCT'), ('printf', 'PROPN'), ('(', 'PUNCT'), ('“', 'PUNCT'), ('%', 'SYM'), ('d', 'NOUN'), ('”', 'PUNCT'), (',', 'PUNCT'), ('c', 'PROPN'), (')', 'PUNCT'), (';', 'PUNCT'), ('}', 'PUNCT'), ('Source', 'NOUN'), ('Program', 'NOUN'), ('0000', 'NUM'), ('1100', 'NUM'), ('0010', 'NUM'), ('0100', 'NUM'), ('0111', 'NUM'), ('1000', 'NUM'), ('0001', 'NUM'), ('1111', 'NUM'), ('0101', 'NUM'), ('1110', 'NUM'), ('1100', 'NUM'), ('0000', 'NUM'), ('1000', 'NUM'), ('1011', 'NUM'), ('Target', 'PROPN'), ('Program', 'PROPN'), ('(', 'PUNCT'), ('If', 'SCONJ'), ('any', 'DET'), (')', 'PUNCT'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Introduction', 'NOUN'), ('to', 'ADP'), ('Compiler', 'PROPN'), ('Design', 'PROPN'), ('‹#›', 'PROPN'), ('Interpreter', 'PROPN'), ('Interpreter', 'PROPN'), ('is', 'AUX'), ('also', 'ADV'), ('program', 'NOUN'), ('that', 'PRON'), ('reads', 'VERB'), ('a', 'DET'), ('program', 'NOUN'), ('written', 'VERB'), ('in', 'ADP'), ('source', 'NOUN'), ('language', 'NOUN'), ('and', 'CCONJ'), ('translates', 'VERB'), ('it', 'PRON'), ('into', 'ADP'), ('an', 'DET'), ('equivalent', 'ADJ'), ('program', 'NOUN'), ('in', 'ADP'), ('target', 'NOUN'), ('language', 'NOUN'), ('Interpreter', 'PROPN'), ('Source', 'PROPN'), ('Program', 'PROPN'), ('Target', 'PROPN'), ('Program', 'PROPN'), ('line', 'NOUN'), ('by', 'ADP'), ('line', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Error', 'NN'), ('Messages', 'NNS'), ('Source', 'NN'), ('Program', 'NNP'), ('Target', 'NNP'), ('Program', 'NNP'), ('Compiler', 'NNP'), ('void', 'NN'), ('main', 'JJ'), ('(', '-LRB-'), (')', '-RRB-'), ('{', ','), ('int', 'NN'), ('a=', 'NNP'), ('1', 'CD'), (',', ','), ('b=2', 'NNP'), (',', ','), ('c', 'NN'), (';', ','), ('c=a', 'NNP'), ('+b', '-RRB-'), (';', ','), ('printf', 'NNP'), ('(', '-LRB-'), ('“', '``'), ('%', 'NN'), ('d', 'NN'), ('”', "''"), (',', ','), ('c', 'NNP'), (')', '-RRB-'), (';', ','), ('}', 'NFP'), ('Source', 'NN'), ('Program', 'NN'), ('0000', 'CD'), ('1100', 'CD'), ('0010', 'CD'), ('0100', 'CD'), ('0111', 'CD'), ('1000', 'CD'), ('0001', 'CD'), ('1111', 'CD'), ('0101', 'CD'), ('1110', 'CD'), ('1100', 'CD'), ('0000', 'CD'), ('1000', 'CD'), ('1011', 'CD'), ('Target', 'NNP'), ('Program', 'NNP'), ('(', '-LRB-'), ('If', 'IN'), ('any', 'DT'), (')', '-RRB-'), ('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('1', 'CD'), ('–', ','), ('Introduction', 'NN'), ('to', 'IN'), ('Compiler', 'NNP'), ('Design', 'NNP'), ('‹#›', 'NNP'), ('Interpreter', 'NNP'), ('Interpreter', 'NNP'), ('is', 'VBZ'), ('also', 'RB'), ('program', 'NN'), ('that', 'WDT'), ('reads', 'VBZ'), ('a', 'DT'), ('program', 'NN'), ('written', 'VBN'), ('in', 'IN'), ('source', 'NN'), ('language', 'NN'), ('and', 'CC'), ('translates', 'VBZ'), ('it', 'PRP'), ('into', 'IN'), ('an', 'DT'), ('equivalent', 'JJ'), ('program', 'NN'), ('in', 'IN'), ('target', 'NN'), ('language', 'NN'), ('Interpreter', 'NNP'), ('Source', 'NNP'), ('Program', 'NNP'), ('Target', 'NNP'), ('Program', 'NNP'), ('line', 'NN'), ('by', 'IN'), ('line', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('Error', 'error'), ('Messages', 'message'), ('Source', 'source'), ('Program', 'Program'), ('Target', 'Target'), ('Program', 'Program'), ('Compiler', 'Compiler'), ('void', 'void'), ('main', 'main'), ('(', '('), (')', ')'), ('{', '{'), ('int', 'int'), ('a=', 'a='), ('1', '1'), (',', ','), ('b=2', 'b=2'), (',', ','), ('c', 'c'), (';', ';'), ('c=a', 'c=a'), ('+b', '+b'), (';', ';'), ('printf', 'printf'), ('(', '('), ('“', "''"), ('%', '%'), ('d', 'd'), ('”', "''"), (',', ','), ('c', 'c'), (')', ')'), (';', ';'), ('}', '}'), ('Source', 'source'), ('Program', 'program'), ('0000', '0000'), ('1100', '1100'), ('0010', '0010'), ('0100', '0100'), ('0111', '0111'), ('1000', '1000'), ('0001', '0001'), ('1111', '1111'), ('0101', '0101'), ('1110', '1110'), ('1100', '1100'), ('0000', '0000'), ('1000', '1000'), ('1011', '1011'), ('Target', 'Target'), ('Program', 'Program'), ('(', '('), ('If', 'if'), ('any', 'any'), (')', ')'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '-'), ('Introduction', 'introduction'), ('to', 'to'), ('Compiler', 'Compiler'), ('Design', 'Design'), ('‹#›', '‹#›'), ('Interpreter', 'Interpreter'), ('Interpreter', 'Interpreter'), ('is', 'be'), ('also', 'also'), ('program', 'program'), ('that', 'that'), ('reads', 'read'), ('a', 'a'), ('program', 'program'), ('written', 'write'), ('in', 'in'), ('source', 'source'), ('language', 'language'), ('and', 'and'), ('translates', 'translate'), ('it', 'it'), ('into', 'into'), ('an', 'a'), ('equivalent', 'equivalent'), ('program', 'program'), ('in', 'in'), ('target', 'target'), ('language', 'language'), ('Interpreter', 'Interpreter'), ('Source', 'Source'), ('Program', 'Program'), ('Target', 'Target'), ('Program', 'Program'), ('line', 'line'), ('by', 'by'), ('line', 'line'), ('.', '.')] 

 Dependency tags are: 
>> [(('Error', 'Messages'), 'compound'), (('Messages', 'Program'), 'compound'), (('Source', 'Program'), 'compound'), (('Program', 'Program'), 'compound'), (('Target', 'Program'), 'compound'), (('Program', 'void'), 'compound'), (('Compiler', 'void'), 'compound'), (('void', 'root'), 'root'), (('main', 'void'), 'amod'), (('(', 'a='), 'punct'), ((')', 'int'), 'punct'), (('{', 'a='), 'punct'), (('int', 'a='), 'compound'), (('a=', 'void'), 'appos'), (('1', 'a='), 'nummod'), ((',', 'a='), 'punct'), (('b=2', 'a='), 'appos'), ((',', 'c'), 'punct'), (('c', 'a='), 'appos'), ((';', 'c'), 'punct'), (('c=a', 'c'), 'appos'), (('+b', 'c=a'), 'punct'), ((';', 'a='), 'punct'), (('printf', 'a='), 'conj'), (('(', 'd'), 'punct'), (('“', 'd'), 'punct'), (('%', 'd'), 'compound'), (('d', 'printf'), 'appos'), (('”', 'd'), 'punct'), ((',', 'd'), 'punct'), (('c', 'd'), 'appos'), ((')', 'c'), 'punct'), ((';', 'Program'), 'punct'), (('}', 'Program'), 'punct'), (('Source', 'Program'), 'compound'), (('Program', 'a='), 'conj'), (('0000', 'Program'), 'nummod'), (('1100', '0010'), 'compound'), (('0010', '0111'), 'compound'), (('0100', '0111'), 'compound'), (('0111', 'Program'), 'nummod'), (('1000', '0101'), 'compound'), (('0001', '0101'), 'compound'), (('1111', '1110'), 'compound'), (('0101', 'Program'), 'nummod'), (('1110', 'Program'), 'nummod'), (('1100', 'Program'), 'nummod'), (('0000', 'Program'), 'nummod'), (('1000', '1011'), 'compound'), (('1011', 'Program'), 'nummod'), (('Target', 'Program'), 'compound'), (('Program', 'Program'), 'appos'), (('(', 'Prof.'), 'punct'), (('If', 'Prof.'), 'mark'), (('any', 'Prof.'), 'det'), ((')', 'any'), 'punct'), (('Prof.', 'Program'), 'compound'), (('Dixita', 'Prof.'), 'compound'), (('B', '#'), 'compound'), (('Kagathara', '#'), 'compound'), (('#', 'Prof.'), 'compound'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', 'Unit'), 'compound'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', '#'), 'appos'), (('1', 'Unit'), 'nummod'), (('–', 'Introduction'), 'punct'), (('Introduction', 'Unit'), 'appos'), (('to', 'Interpreter'), 'case'), (('Compiler', '‹#›'), 'compound'), (('Design', '‹#›'), 'compound'), (('‹#›', 'Interpreter'), 'compound'), (('Interpreter', 'Interpreter'), 'compound'), (('Interpreter', 'Introduction'), 'nmod'), (('is', 'program'), 'cop'), (('also', 'program'), 'advmod'), (('program', 'Introduction'), 'advcl'), (('that', 'reads'), 'nsubj'), (('reads', 'program'), 'acl:relcl'), (('a', 'program'), 'det'), (('program', 'reads'), 'obj'), (('written', 'program'), 'acl'), (('in', 'language'), 'case'), (('source', 'language'), 'compound'), (('language', 'written'), 'obl'), (('and', 'translates'), 'cc'), (('translates', 'reads'), 'conj'), (('it', 'translates'), 'obj'), (('into', 'program'), 'case'), (('an', 'program'), 'det'), (('equivalent', 'program'), 'amod'), (('program', 'translates'), 'obl'), (('in', 'line'), 'case'), (('target', 'line'), 'compound'), (('language', 'line'), 'compound'), (('Interpreter', 'Program'), 'compound'), (('Source', 'Program'), 'compound'), (('Program', 'line'), 'compound'), (('Target', 'Program'), 'compound'), (('Program', 'line'), 'compound'), (('line', 'program'), 'nmod'), (('by', 'line'), 'case'), (('line', 'line'), 'nmod'), (('.', 'program'), 'punct')]

 Named Entities are: 
>> [('2170701', 'CARDINAL'), ('1', 'CARDINAL'), ('Interpreter              Source Program  Target Program', 'WORK_OF_ART')]

========================== Sentence 6 ===========================

 Void main()  {      int a=1,b=2,c;      c=a+b;      printf(“%d”,c);  } 0000 1100 0010 0000 1111 1010 1100 0010 0011 1100 0010 1111 1100 0010 Error Messages  (If any)    Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1 – Introduction to Compiler Design ‹#›  Assembler  Assembler is a translator which takes the assembly code as an input and generates the machine code as an output. 

Tokens are: 
>> ['Void', 'main', '(', ')', '{', 'int', 'a=', '1', ',', 'b=2', ',', 'c', ';', 'c=a', '+b', ';', 'printf', '(', '“', '%', 'd', '”', ',', 'c', ')', ';', '}', '0000', '1100', '0010', '0000', '1111', '1010', '1100', '0010', '0011', '1100', '0010', '1111', '1100', '0010', 'Error', 'Messages', '(', 'If', 'any', ')', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '1', '–', 'Introduction', 'to', 'Compiler', 'Design', '‹#›', 'Assembler', 'Assembler', 'is', 'a', 'translator', 'which', 'takes', 'the', 'assembly', 'code', 'as', 'an', 'input', 'and', 'generates', 'the', 'machine', 'code', 'as', 'an', 'output', '.'] 

 UPOS tags are: 
>> [('Void', 'NOUN'), ('main', 'ADJ'), ('(', 'PUNCT'), (')', 'PUNCT'), ('{', 'PUNCT'), ('int', 'NOUN'), ('a=', 'PROPN'), ('1', 'NUM'), (',', 'PUNCT'), ('b=2', 'PROPN'), (',', 'PUNCT'), ('c', 'NOUN'), (';', 'PUNCT'), ('c=a', 'NOUN'), ('+b', 'PUNCT'), (';', 'PUNCT'), ('printf', 'PROPN'), ('(', 'PUNCT'), ('“', 'PUNCT'), ('%', 'SYM'), ('d', 'NOUN'), ('”', 'PUNCT'), (',', 'PUNCT'), ('c', 'PROPN'), (')', 'PUNCT'), (';', 'PUNCT'), ('}', 'PUNCT'), ('0000', 'NUM'), ('1100', 'NUM'), ('0010', 'NUM'), ('0000', 'NUM'), ('1111', 'NUM'), ('1010', 'NUM'), ('1100', 'NUM'), ('0010', 'NUM'), ('0011', 'NUM'), ('1100', 'NUM'), ('0010', 'NUM'), ('1111', 'NUM'), ('1100', 'NUM'), ('0010', 'NUM'), ('Error', 'NOUN'), ('Messages', 'NOUN'), ('(', 'PUNCT'), ('If', 'SCONJ'), ('any', 'DET'), (')', 'PUNCT'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'PROPN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Introduction', 'NOUN'), ('to', 'ADP'), ('Compiler', 'PROPN'), ('Design', 'PROPN'), ('‹#›', 'PROPN'), ('Assembler', 'PROPN'), ('Assembler', 'PROPN'), ('is', 'AUX'), ('a', 'DET'), ('translator', 'NOUN'), ('which', 'PRON'), ('takes', 'VERB'), ('the', 'DET'), ('assembly', 'NOUN'), ('code', 'NOUN'), ('as', 'ADP'), ('an', 'DET'), ('input', 'NOUN'), ('and', 'CCONJ'), ('generates', 'VERB'), ('the', 'DET'), ('machine', 'NOUN'), ('code', 'NOUN'), ('as', 'ADP'), ('an', 'DET'), ('output', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Void', 'NN'), ('main', 'JJ'), ('(', '-LRB-'), (')', '-RRB-'), ('{', ','), ('int', 'NN'), ('a=', 'NNP'), ('1', 'CD'), (',', ','), ('b=2', 'NNP'), (',', ','), ('c', 'NN'), (';', ':'), ('c=a', 'NN'), ('+b', '-RRB-'), (';', ':'), ('printf', 'NNP'), ('(', '-LRB-'), ('“', '``'), ('%', 'NN'), ('d', 'NN'), ('”', "''"), (',', ','), ('c', 'NNP'), (')', '-RRB-'), (';', ':'), ('}', 'NFP'), ('0000', 'CD'), ('1100', 'CD'), ('0010', 'CD'), ('0000', 'CD'), ('1111', 'CD'), ('1010', 'CD'), ('1100', 'CD'), ('0010', 'CD'), ('0011', 'CD'), ('1100', 'CD'), ('0010', 'CD'), ('1111', 'CD'), ('1100', 'CD'), ('0010', 'CD'), ('Error', 'NN'), ('Messages', 'NNS'), ('(', '-LRB-'), ('If', 'IN'), ('any', 'DT'), (')', '-RRB-'), ('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NNP'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('1', 'CD'), ('–', ':'), ('Introduction', 'NN'), ('to', 'IN'), ('Compiler', 'NNP'), ('Design', 'NNP'), ('‹#›', 'NNP'), ('Assembler', 'NNP'), ('Assembler', 'NNP'), ('is', 'VBZ'), ('a', 'DT'), ('translator', 'NN'), ('which', 'WDT'), ('takes', 'VBZ'), ('the', 'DT'), ('assembly', 'NN'), ('code', 'NN'), ('as', 'IN'), ('an', 'DT'), ('input', 'NN'), ('and', 'CC'), ('generates', 'VBZ'), ('the', 'DT'), ('machine', 'NN'), ('code', 'NN'), ('as', 'IN'), ('an', 'DT'), ('output', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('Void', 'void'), ('main', 'main'), ('(', '('), (')', ')'), ('{', '{'), ('int', 'int'), ('a=', 'a='), ('1', '1'), (',', ','), ('b=2', 'b=2'), (',', ','), ('c', 'c'), (';', ';'), ('c=a', 'c=a'), ('+b', '+b'), (';', ';'), ('printf', 'printf'), ('(', '('), ('“', "''"), ('%', '%'), ('d', 'd'), ('”', "''"), (',', ','), ('c', 'c'), (')', ')'), (';', ';'), ('}', '}'), ('0000', '0000'), ('1100', '1100'), ('0010', '0010'), ('0000', '0000'), ('1111', '1111'), ('1010', '1010'), ('1100', '1100'), ('0010', '0010'), ('0011', '0011'), ('1100', '1100'), ('0010', '0010'), ('1111', '1111'), ('1100', '1100'), ('0010', '0010'), ('Error', 'error'), ('Messages', 'message'), ('(', '('), ('If', 'if'), ('any', 'any'), (')', ')'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'CD'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '-'), ('Introduction', 'introduction'), ('to', 'to'), ('Compiler', 'Compiler'), ('Design', 'Design'), ('‹#›', '‹#›'), ('Assembler', 'Assembler'), ('Assembler', 'Assembler'), ('is', 'be'), ('a', 'a'), ('translator', 'translator'), ('which', 'which'), ('takes', 'take'), ('the', 'the'), ('assembly', 'assembly'), ('code', 'code'), ('as', 'as'), ('an', 'a'), ('input', 'input'), ('and', 'and'), ('generates', 'generate'), ('the', 'the'), ('machine', 'machine'), ('code', 'code'), ('as', 'as'), ('an', 'a'), ('output', 'output'), ('.', '.')] 

 Dependency tags are: 
>> [(('Void', 'root'), 'root'), (('main', 'Void'), 'amod'), (('(', 'a='), 'punct'), ((')', 'int'), 'punct'), (('{', 'int'), 'punct'), (('int', 'main'), 'list'), (('a=', 'int'), 'flat'), (('1', 'a='), 'nummod'), ((',', 'b=2'), 'punct'), (('b=2', 'a='), 'conj'), ((',', 'a='), 'punct'), (('c', 'a='), 'conj'), ((';', 'c=a'), 'punct'), (('c=a', 'a='), 'conj'), (('+b', 'a='), 'punct'), ((';', 'printf'), 'punct'), (('printf', 'a='), 'conj'), (('(', 'd'), 'punct'), (('“', 'd'), 'punct'), (('%', 'd'), 'compound'), (('d', 'printf'), 'appos'), (('”', 'd'), 'punct'), ((',', 'c'), 'punct'), (('c', 'a='), 'conj'), ((')', 'd'), 'punct'), ((';', 'int'), 'punct'), (('}', '0000'), 'punct'), (('0000', 'a='), 'conj'), (('1100', '0010'), 'compound'), (('0010', '0000'), 'compound'), (('0000', '1111'), 'compound'), (('1111', '1010'), 'compound'), (('1010', '0010'), 'compound'), (('1100', '0011'), 'compound'), (('0010', '0011'), 'compound'), (('0011', '0010'), 'compound'), (('1100', '0010'), 'compound'), (('0010', '1111'), 'compound'), (('1111', '0010'), 'compound'), (('1100', '0010'), 'compound'), (('0010', 'Error'), 'nummod'), (('Error', 'Messages'), 'compound'), (('Messages', 'a='), 'conj'), (('(', 'Prof.'), 'punct'), (('If', 'any'), 'mark'), (('any', 'Prof.'), 'det'), ((')', 'any'), 'punct'), (('Prof.', 'Messages'), 'compound'), (('Dixita', 'Prof.'), 'flat'), (('B', 'Prof.'), 'flat'), (('Kagathara', '#'), 'compound'), (('#', 'Prof.'), 'compound'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', '#'), 'appos'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', '#'), 'appos'), (('1', 'Unit'), 'nummod'), (('–', 'Introduction'), 'punct'), (('Introduction', 'a='), 'parataxis'), (('to', 'Assembler'), 'case'), (('Compiler', 'Design'), 'compound'), (('Design', '‹#›'), 'compound'), (('‹#›', 'Assembler'), 'compound'), (('Assembler', 'Assembler'), 'compound'), (('Assembler', 'Introduction'), 'nmod'), (('is', 'translator'), 'cop'), (('a', 'translator'), 'det'), (('translator', 'Introduction'), 'parataxis'), (('which', 'takes'), 'nsubj'), (('takes', 'translator'), 'acl:relcl'), (('the', 'code'), 'det'), (('assembly', 'code'), 'compound'), (('code', 'takes'), 'obj'), (('as', 'input'), 'case'), (('an', 'input'), 'det'), (('input', 'takes'), 'obl'), (('and', 'generates'), 'cc'), (('generates', 'takes'), 'conj'), (('the', 'code'), 'det'), (('machine', 'code'), 'compound'), (('code', 'generates'), 'obj'), (('as', 'output'), 'case'), (('an', 'output'), 'det'), (('output', 'generates'), 'obl'), (('.', 'translator'), 'punct')]

 Named Entities are: 
>> [('2170701', 'CARDINAL'), ('1', 'CARDINAL'), ('Assembler  Assembler', 'ORG')]

========================== Sentence 7 ===========================

 Assembler MOV id3, R1 MUL #2.0, R1 MOV id2, R2 MUL R2, R1 MOV id1, R2 ADD R2, R1 MOV R1, id1 Assembly Code  0000 1100 0010 0100 0111 1000 0001 1111 0101 1110 1100 0000 1000 1011 1100 0000 1000  Machine Code Error Messages  (If any)    Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1 – Introduction to Compiler Design ‹#›  Analysis Synthesis model of compilation         Analysis synthesis model of compilation 

Tokens are: 
>> ['Assembler', 'MOV', 'id', '3', ',', 'R1', 'MUL', '#', '2.0', ',', 'R1', 'MOV', 'id2', ',', 'R2', 'MUL', 'R2', ',', 'R1', 'MOV', 'id1', ',', 'R2', 'ADD', 'R2', ',', 'R1', 'MOV', 'R1', ',', 'id', '1', 'Assembly', 'Code', '0000', '1100', '0010', '0100', '0111', '1000', '0001', '1111', '0101', '1110', '1100', '0000', '1000', '1011', '1100', '0000', '1000', 'Machine', 'Code', 'Error', 'Messages', '(', 'If', 'any', ')', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '1', '–', 'Introduction', 'to', 'Compiler', 'Design', '‹#›', 'Analysis', 'Synthesis', 'model', 'of', 'compilation', 'Analysis', 'synthesis', 'model', 'of', 'compilation'] 

 UPOS tags are: 
>> [('Assembler', 'NOUN'), ('MOV', 'PROPN'), ('id', 'NOUN'), ('3', 'NUM'), (',', 'PUNCT'), ('R1', 'NUM'), ('MUL', 'NOUN'), ('#', 'SYM'), ('2.0', 'NUM'), (',', 'PUNCT'), ('R1', 'NUM'), ('MOV', 'NOUN'), ('id2', 'NOUN'), (',', 'PUNCT'), ('R2', 'PROPN'), ('MUL', 'NOUN'), ('R2', 'PROPN'), (',', 'PUNCT'), ('R1', 'NUM'), ('MOV', 'NOUN'), ('id1', 'NOUN'), (',', 'PUNCT'), ('R2', 'NUM'), ('ADD', 'NOUN'), ('R2', 'PROPN'), (',', 'PUNCT'), ('R1', 'PROPN'), ('MOV', 'PROPN'), ('R1', 'PROPN'), (',', 'PUNCT'), ('id', 'NOUN'), ('1', 'NUM'), ('Assembly', 'NOUN'), ('Code', 'NOUN'), ('0000', 'NUM'), ('1100', 'NUM'), ('0010', 'NUM'), ('0100', 'NUM'), ('0111', 'NUM'), ('1000', 'NUM'), ('0001', 'NUM'), ('1111', 'NUM'), ('0101', 'NUM'), ('1110', 'NUM'), ('1100', 'NUM'), ('0000', 'NUM'), ('1000', 'NUM'), ('1011', 'NUM'), ('1100', 'NUM'), ('0000', 'NUM'), ('1000', 'NUM'), ('Machine', 'NOUN'), ('Code', 'NOUN'), ('Error', 'NOUN'), ('Messages', 'NOUN'), ('(', 'PUNCT'), ('If', 'SCONJ'), ('any', 'DET'), (')', 'PUNCT'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Introduction', 'NOUN'), ('to', 'ADP'), ('Compiler', 'PROPN'), ('Design', 'PROPN'), ('‹#›', 'NOUN'), ('Analysis', 'NOUN'), ('Synthesis', 'NOUN'), ('model', 'NOUN'), ('of', 'ADP'), ('compilation', 'NOUN'), ('Analysis', 'NOUN'), ('synthesis', 'NOUN'), ('model', 'NOUN'), ('of', 'ADP'), ('compilation', 'NOUN')] 

 XPOS tags are: 
>> [('Assembler', 'NN'), ('MOV', 'NNP'), ('id', 'NN'), ('3', 'CD'), (',', ','), ('R1', 'CD'), ('MUL', 'NN'), ('#', 'NN'), ('2.0', 'CD'), (',', ','), ('R1', 'CD'), ('MOV', 'NN'), ('id2', 'NN'), (',', ','), ('R2', 'NNP'), ('MUL', 'NN'), ('R2', 'NNP'), (',', ','), ('R1', 'CD'), ('MOV', 'NN'), ('id1', 'NN'), (',', ','), ('R2', 'CD'), ('ADD', 'NN'), ('R2', 'NNP'), (',', ','), ('R1', 'NNP'), ('MOV', 'NNP'), ('R1', 'NNP'), (',', ','), ('id', 'NN'), ('1', 'CD'), ('Assembly', 'NN'), ('Code', 'NN'), ('0000', 'CD'), ('1100', 'CD'), ('0010', 'CD'), ('0100', 'CD'), ('0111', 'CD'), ('1000', 'CD'), ('0001', 'CD'), ('1111', 'CD'), ('0101', 'CD'), ('1110', 'CD'), ('1100', 'CD'), ('0000', 'CD'), ('1000', 'CD'), ('1011', 'CD'), ('1100', 'CD'), ('0000', 'CD'), ('1000', 'CD'), ('Machine', 'NN'), ('Code', 'NN'), ('Error', 'NN'), ('Messages', 'NNS'), ('(', '-LRB-'), ('If', 'IN'), ('any', 'DT'), (')', '-RRB-'), ('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('1', 'CD'), ('–', ':'), ('Introduction', 'NN'), ('to', 'IN'), ('Compiler', 'NNP'), ('Design', 'NNP'), ('‹#›', 'NN'), ('Analysis', 'NN'), ('Synthesis', 'NN'), ('model', 'NN'), ('of', 'IN'), ('compilation', 'NN'), ('Analysis', 'NN'), ('synthesis', 'NN'), ('model', 'NN'), ('of', 'IN'), ('compilation', 'NN')] 

 Lemmas are: 
>> [('Assembler', 'assembler'), ('MOV', 'MOV'), ('id', 'id'), ('3', '3'), (',', ','), ('R1', 'r1'), ('MUL', 'mul'), ('#', '#'), ('2.0', '2.0'), (',', ','), ('R1', 'r1'), ('MOV', 'mov'), ('id2', 'id2'), (',', ','), ('R2', 'R2'), ('MUL', 'mul'), ('R2', 'R2'), (',', ','), ('R1', 'r1'), ('MOV', 'mov'), ('id1', 'id1'), (',', ','), ('R2', 'r2'), ('ADD', 'add'), ('R2', 'R2'), (',', ','), ('R1', 'R1'), ('MOV', 'MOV'), ('R1', 'R1'), (',', ','), ('id', 'id'), ('1', '1'), ('Assembly', 'assembly'), ('Code', 'code'), ('0000', '0000'), ('1100', '1100'), ('0010', '0010'), ('0100', '0100'), ('0111', '0111'), ('1000', '1000'), ('0001', '0001'), ('1111', '1111'), ('0101', '0101'), ('1110', '1110'), ('1100', '1100'), ('0000', '0000'), ('1000', '1000'), ('1011', '1011'), ('1100', '1100'), ('0000', '0000'), ('1000', '1000'), ('Machine', 'Machine'), ('Code', 'code'), ('Error', 'error'), ('Messages', 'message'), ('(', '('), ('If', 'if'), ('any', 'any'), (')', ')'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '-'), ('Introduction', 'introduction'), ('to', 'to'), ('Compiler', 'Compiler'), ('Design', 'Design'), ('‹#›', '‹#›'), ('Analysis', 'analysis'), ('Synthesis', 'synthesis'), ('model', 'model'), ('of', 'of'), ('compilation', 'compilation'), ('Analysis', 'analysis'), ('synthesis', 'synthesis'), ('model', 'model'), ('of', 'of'), ('compilation', 'compilation')] 

 Dependency tags are: 
>> [(('Assembler', 'id'), 'compound'), (('MOV', 'id'), 'compound'), (('id', 'root'), 'root'), (('3', 'id'), 'nummod'), ((',', 'id'), 'punct'), (('R1', '#'), 'nummod'), (('MUL', '#'), 'compound'), (('#', 'id'), 'list'), (('2.0', '#'), 'nummod'), ((',', 'id'), 'punct'), (('R1', 'id2'), 'nummod'), (('MOV', 'id'), 'list'), (('id2', 'id'), 'list'), ((',', 'id2'), 'punct'), (('R2', 'id2'), 'compound'), (('MUL', 'R2'), 'compound'), (('R2', 'id'), 'list'), ((',', 'R2'), 'punct'), (('R1', 'id1'), 'nummod'), (('MOV', 'id1'), 'compound'), (('id1', 'id'), 'list'), ((',', 'id1'), 'punct'), (('R2', 'R2'), 'nummod'), (('ADD', 'R2'), 'compound'), (('R2', 'id'), 'list'), ((',', 'R2'), 'punct'), (('R1', 'R2'), 'appos'), (('MOV', 'R1'), 'compound'), (('R1', 'id'), 'list'), ((',', 'id'), 'punct'), (('id', 'id'), 'conj'), (('1', 'Code'), 'nummod'), (('Assembly', 'Code'), 'compound'), (('Code', 'id'), 'list'), (('0000', 'Code'), 'nummod'), (('1100', '0010'), 'compound'), (('0010', '0111'), 'compound'), (('0100', 'Code'), 'nummod'), (('0111', 'id'), 'appos'), (('1000', '0101'), 'compound'), (('0001', 'id'), 'appos'), (('1111', '0111'), 'compound'), (('0101', 'id'), 'appos'), (('1110', 'id'), 'appos'), (('1100', '1011'), 'compound'), (('0000', 'id'), 'appos'), (('1000', '0000'), 'compound'), (('1011', '0000'), 'compound'), (('1100', 'Machine'), 'nummod'), (('0000', 'Machine'), 'nummod'), (('1000', 'Code'), 'nummod'), (('Machine', 'Code'), 'compound'), (('Code', 'Messages'), 'compound'), (('Error', 'Messages'), 'compound'), (('Messages', 'id'), 'parataxis'), (('(', 'Prof.'), 'punct'), (('If', 'any'), 'mark'), (('any', 'Prof.'), 'det'), ((')', 'any'), 'punct'), (('Prof.', 'Messages'), 'compound'), (('Dixita', 'Kagathara'), 'compound'), (('B', '#'), 'compound'), (('Kagathara', '#'), 'compound'), (('#', 'Prof.'), 'compound'), (('2170701', 'CD'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', '#'), 'appos'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', '#'), 'appos'), (('1', 'Unit'), 'nummod'), (('–', 'Introduction'), 'punct'), (('Introduction', 'id'), 'parataxis'), (('to', 'model'), 'case'), (('Compiler', 'Analysis'), 'compound'), (('Design', 'Analysis'), 'compound'), (('‹#›', 'Analysis'), 'compound'), (('Analysis', 'model'), 'compound'), (('Synthesis', 'model'), 'compound'), (('model', 'Introduction'), 'nmod'), (('of', 'model'), 'case'), (('compilation', 'Analysis'), 'compound'), (('Analysis', 'model'), 'compound'), (('synthesis', 'model'), 'compound'), (('model', 'model'), 'nmod'), (('of', 'compilation'), 'case'), (('compilation', 'model'), 'nmod')]

 Named Entities are: 
>> [('3', 'CARDINAL'), ('2170701', 'CARDINAL'), ('1', 'CARDINAL')]

========================== Sentence 8 ===========================

 There are two parts of compilation. 

Tokens are: 
>> ['There', 'are', 'two', 'parts', 'of', 'compilation', '.'] 

 UPOS tags are: 
>> [('There', 'PRON'), ('are', 'VERB'), ('two', 'NUM'), ('parts', 'NOUN'), ('of', 'ADP'), ('compilation', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('There', 'EX'), ('are', 'VBP'), ('two', 'CD'), ('parts', 'NNS'), ('of', 'IN'), ('compilation', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('There', 'there'), ('are', 'be'), ('two', 'two'), ('parts', 'part'), ('of', 'of'), ('compilation', 'compilation'), ('.', '.')] 

 Dependency tags are: 
>> [(('There', 'are'), 'expl'), (('are', 'root'), 'root'), (('two', 'parts'), 'nummod'), (('parts', 'are'), 'nsubj'), (('of', 'compilation'), 'case'), (('compilation', 'parts'), 'nmod'), (('.', 'are'), 'punct')]

 Named Entities are: 
>> [('two', 'CARDINAL')]

========================== Sentence 9 ===========================

 Analysis Phase Synthesis Phase  Analysis Phase Synthesis Phase Intermediate Representation void main() { int a=1,b=2,c; c=a+b; printf(“%d”,c); } Source Code  0000 1100  0111 1000 0001 1111 0101 1000 1011 Target Code    Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1– Introduction to Compiler Design ‹#›  Analysis phase & Synthesis phase Analysis Phase Analysis part breaks up the source program into constituent pieces and creates an intermediate representation of the source program. 

Tokens are: 
>> ['Analysis', 'Phase', 'Synthesis', 'Phase', 'Analysis', 'Phase', 'Synthesis', 'Phase', 'Intermediate', 'Representation', 'void', 'main', '(', ')', '{', 'int', 'a=', '1', ',', 'b=2', ',', 'c', ';', 'c=a', '+b', ';', 'printf', '(', '“', '%', 'd', '”', ',', 'c', ')', ';', '}', 'Source', 'Code', '0000', '1100', '0111', '1000', '0001', '1111', '0101', '1000', '1011', 'Target', 'Code', 'Prof.', 'Jay', 'R', 'Dhamsaniya', '#', '3130006', '(', 'PS', ')', '\uf077', 'Unit', '1', '–', 'Basic', 'Probability', '‹#›', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '1', '–', 'Introduction', 'to', 'Compiler', 'Design', '‹#›', 'Analysis', 'phase', '&', 'Synthesis', 'phase', 'Analysis', 'Phase', 'Analysis', 'part', 'breaks', 'up', 'the', 'source', 'program', 'into', 'constituent', 'pieces', 'and', 'creates', 'an', 'intermediate', 'representation', 'of', 'the', 'source', 'program', '.'] 

 UPOS tags are: 
>> [('Analysis', 'NOUN'), ('Phase', 'NOUN'), ('Synthesis', 'NOUN'), ('Phase', 'NOUN'), ('Analysis', 'NOUN'), ('Phase', 'NOUN'), ('Synthesis', 'NOUN'), ('Phase', 'NOUN'), ('Intermediate', 'ADJ'), ('Representation', 'NOUN'), ('void', 'NOUN'), ('main', 'ADJ'), ('(', 'PUNCT'), (')', 'PUNCT'), ('{', 'PUNCT'), ('int', 'NOUN'), ('a=', 'PROPN'), ('1', 'NUM'), (',', 'PUNCT'), ('b=2', 'PROPN'), (',', 'PUNCT'), ('c', 'NOUN'), (';', 'PUNCT'), ('c=a', 'NOUN'), ('+b', 'PUNCT'), (';', 'PUNCT'), ('printf', 'PROPN'), ('(', 'PUNCT'), ('“', 'PUNCT'), ('%', 'SYM'), ('d', 'NOUN'), ('”', 'PUNCT'), (',', 'PUNCT'), ('c', 'NOUN'), (')', 'PUNCT'), (';', 'PUNCT'), ('}', 'PUNCT'), ('Source', 'NOUN'), ('Code', 'NOUN'), ('0000', 'NUM'), ('1100', 'NUM'), ('0111', 'NUM'), ('1000', 'NUM'), ('0001', 'NUM'), ('1111', 'NUM'), ('0101', 'NUM'), ('1000', 'NUM'), ('1011', 'NUM'), ('Target', 'NOUN'), ('Code', 'NOUN'), ('Prof.', 'NOUN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'ADJ'), ('Probability', 'NOUN'), ('‹#›', 'NOUN'), ('Prof.', 'NOUN'), ('Dixita', 'PROPN'), ('B', 'NOUN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Introduction', 'NOUN'), ('to', 'ADP'), ('Compiler', 'NOUN'), ('Design', 'NOUN'), ('‹#›', 'NOUN'), ('Analysis', 'NOUN'), ('phase', 'NOUN'), ('&', 'CCONJ'), ('Synthesis', 'NOUN'), ('phase', 'NOUN'), ('Analysis', 'NOUN'), ('Phase', 'NOUN'), ('Analysis', 'NOUN'), ('part', 'NOUN'), ('breaks', 'VERB'), ('up', 'ADP'), ('the', 'DET'), ('source', 'NOUN'), ('program', 'NOUN'), ('into', 'ADP'), ('constituent', 'ADJ'), ('pieces', 'NOUN'), ('and', 'CCONJ'), ('creates', 'VERB'), ('an', 'DET'), ('intermediate', 'ADJ'), ('representation', 'NOUN'), ('of', 'ADP'), ('the', 'DET'), ('source', 'NOUN'), ('program', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Analysis', 'NN'), ('Phase', 'NN'), ('Synthesis', 'NN'), ('Phase', 'NN'), ('Analysis', 'NN'), ('Phase', 'NN'), ('Synthesis', 'NN'), ('Phase', 'NN'), ('Intermediate', 'JJ'), ('Representation', 'NN'), ('void', 'NN'), ('main', 'JJ'), ('(', '-LRB-'), (')', '-RRB-'), ('{', ','), ('int', 'NN'), ('a=', 'NNP'), ('1', 'CD'), (',', ','), ('b=2', 'NNP'), (',', ','), ('c', 'NN'), (';', ','), ('c=a', 'NN'), ('+b', '-RRB-'), (';', ','), ('printf', 'NNP'), ('(', '-LRB-'), ('“', '``'), ('%', 'NN'), ('d', 'NN'), ('”', "''"), (',', ','), ('c', 'NN'), (')', '-RRB-'), (';', ','), ('}', 'NFP'), ('Source', 'NN'), ('Code', 'NN'), ('0000', 'CD'), ('1100', 'CD'), ('0111', 'CD'), ('1000', 'CD'), ('0001', 'CD'), ('1111', 'CD'), ('0101', 'CD'), ('1000', 'CD'), ('1011', 'CD'), ('Target', 'NN'), ('Code', 'NN'), ('Prof.', 'NN'), ('Jay', 'NNP'), ('R', 'NNP'), ('Dhamsaniya', 'NNP'), ('#', 'NN'), ('3130006', 'CD'), ('(', '-LRB-'), ('PS', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('1', 'CD'), ('–', ','), ('Basic', 'JJ'), ('Probability', 'NN'), ('‹#›', 'NN'), ('Prof.', 'NN'), ('Dixita', 'NNP'), ('B', 'NN'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('1', 'CD'), ('–', ','), ('Introduction', 'NN'), ('to', 'IN'), ('Compiler', 'NN'), ('Design', 'NN'), ('‹#›', 'NN'), ('Analysis', 'NN'), ('phase', 'NN'), ('&', 'CC'), ('Synthesis', 'NN'), ('phase', 'NN'), ('Analysis', 'NN'), ('Phase', 'NN'), ('Analysis', 'NN'), ('part', 'NN'), ('breaks', 'VBZ'), ('up', 'RP'), ('the', 'DT'), ('source', 'NN'), ('program', 'NN'), ('into', 'IN'), ('constituent', 'JJ'), ('pieces', 'NNS'), ('and', 'CC'), ('creates', 'VBZ'), ('an', 'DT'), ('intermediate', 'JJ'), ('representation', 'NN'), ('of', 'IN'), ('the', 'DT'), ('source', 'NN'), ('program', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('Analysis', 'analysis'), ('Phase', 'phase'), ('Synthesis', 'synthesis'), ('Phase', 'phase'), ('Analysis', 'analysis'), ('Phase', 'phase'), ('Synthesis', 'synthesis'), ('Phase', 'phase'), ('Intermediate', 'intermediate'), ('Representation', 'representation'), ('void', 'void'), ('main', 'main'), ('(', '('), (')', ')'), ('{', '{'), ('int', 'int'), ('a=', 'a='), ('1', '1'), (',', ','), ('b=2', 'b=2'), (',', ','), ('c', 'c'), (';', ';'), ('c=a', 'c=a'), ('+b', '+b'), (';', ';'), ('printf', 'printf'), ('(', '('), ('“', "''"), ('%', '%'), ('d', 'd'), ('”', "''"), (',', ','), ('c', 'c'), (')', ')'), (';', ';'), ('}', '}'), ('Source', 'source'), ('Code', 'code'), ('0000', '0000'), ('1100', '1100'), ('0111', '0111'), ('1000', '1000'), ('0001', '0001'), ('1111', '1111'), ('0101', '0101'), ('1000', '1000'), ('1011', '1011'), ('Target', 'target'), ('Code', 'code'), ('Prof.', 'Prof.'), ('Jay', 'Jay'), ('R', 'R'), ('Dhamsaniya', 'Dhamsaniya'), ('#', '#'), ('3130006', '3130006'), ('(', '('), ('PS', 'ps'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '-'), ('Basic', 'basic'), ('Probability', 'probability'), ('‹#›', '‹#›'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'b'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '-'), ('Introduction', 'introduction'), ('to', 'to'), ('Compiler', 'compiler'), ('Design', 'design'), ('‹#›', '‹#›'), ('Analysis', 'analysis'), ('phase', 'phase'), ('&', '&'), ('Synthesis', 'synthesis'), ('phase', 'phase'), ('Analysis', 'analysis'), ('Phase', 'phase'), ('Analysis', 'analysis'), ('part', 'part'), ('breaks', 'break'), ('up', 'up'), ('the', 'the'), ('source', 'source'), ('program', 'program'), ('into', 'into'), ('constituent', 'constituent'), ('pieces', 'piece'), ('and', 'and'), ('creates', 'create'), ('an', 'a'), ('intermediate', 'intermediate'), ('representation', 'representation'), ('of', 'of'), ('the', 'the'), ('source', 'source'), ('program', 'program'), ('.', '.')] 

 Dependency tags are: 
>> [(('Analysis', 'Phase'), 'compound'), (('Phase', 'root'), 'root'), (('Synthesis', 'Phase'), 'compound'), (('Phase', 'Analysis'), 'compound'), (('Analysis', 'Phase'), 'compound'), (('Phase', 'Phase'), 'conj'), (('Synthesis', 'Phase'), 'compound'), (('Phase', 'Phase'), 'conj'), (('Intermediate', 'void'), 'amod'), (('Representation', 'void'), 'compound'), (('void', 'Phase'), 'conj'), (('main', 'void'), 'amod'), (('(', 'int'), 'punct'), ((')', 'int'), 'punct'), (('{', 'a='), 'punct'), (('int', 'a='), 'compound'), (('a=', 'Phase'), 'conj'), (('1', 'a='), 'nummod'), ((',', 'b=2'), 'punct'), (('b=2', 'a='), 'conj'), ((',', 'c'), 'punct'), (('c', 'a='), 'conj'), ((';', 'a='), 'punct'), (('c=a', 'c'), 'appos'), (('+b', 'c=a'), 'punct'), ((';', 'Phase'), 'punct'), (('printf', 'Phase'), 'conj'), (('(', 'd'), 'punct'), (('“', 'd'), 'punct'), (('%', 'd'), 'compound'), (('d', 'printf'), 'appos'), (('”', 'd'), 'punct'), ((',', 'c'), 'punct'), (('c', 'd'), 'conj'), ((')', 'c'), 'punct'), ((';', 'd'), 'punct'), (('}', 'Code'), 'punct'), (('Source', 'Code'), 'compound'), (('Code', 'Phase'), 'conj'), (('0000', 'Code'), 'nummod'), (('1100', '0111'), 'compound'), (('0111', 'Code'), 'nummod'), (('1000', '0001'), 'compound'), (('0001', '0101'), 'compound'), (('1111', '0101'), 'compound'), (('0101', 'Code'), 'nummod'), (('1000', 'Code'), 'nummod'), (('1011', 'Code'), 'nummod'), (('Target', 'Code'), 'compound'), (('Code', 'Code'), 'appos'), (('Prof.', 'Code'), 'compound'), (('Jay', '#'), 'compound'), (('R', '#'), 'compound'), (('Dhamsaniya', '#'), 'compound'), (('#', 'Code'), 'appos'), (('3130006', '#'), 'nummod'), (('(', 'PS'), 'punct'), (('PS', 'Unit'), 'appos'), ((')', 'PS'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', '#'), 'appos'), (('1', 'Unit'), 'nummod'), (('–', 'Unit'), 'punct'), (('Basic', 'Probability'), 'amod'), (('Probability', 'Unit'), 'compound'), (('‹#›', 'Probability'), 'compound'), (('Prof.', 'Probability'), 'compound'), (('Dixita', 'B'), 'compound'), (('B', '#'), 'compound'), (('Kagathara', '#'), 'compound'), (('#', 'Prof.'), 'appos'), (('2170701', 'CD'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', 'Unit'), 'compound'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', '#'), 'appos'), (('1', 'Unit'), 'nummod'), (('–', 'Introduction'), 'punct'), (('Introduction', 'Unit'), 'appos'), (('to', 'phase'), 'case'), (('Compiler', 'Design'), 'compound'), (('Design', 'phase'), 'compound'), (('‹#›', 'Analysis'), 'compound'), (('Analysis', 'phase'), 'compound'), (('phase', 'Introduction'), 'nmod'), (('&', 'part'), 'cc'), (('Synthesis', 'Analysis'), 'compound'), (('phase', 'Analysis'), 'compound'), (('Analysis', 'part'), 'compound'), (('Phase', 'Analysis'), 'compound'), (('Analysis', 'part'), 'compound'), (('part', 'breaks'), 'nsubj'), (('breaks', 'Introduction'), 'parataxis'), (('up', 'breaks'), 'compound:prt'), (('the', 'program'), 'det'), (('source', 'program'), 'compound'), (('program', 'breaks'), 'obj'), (('into', 'pieces'), 'case'), (('constituent', 'pieces'), 'amod'), (('pieces', 'program'), 'nmod'), (('and', 'creates'), 'cc'), (('creates', 'breaks'), 'conj'), (('an', 'representation'), 'det'), (('intermediate', 'representation'), 'amod'), (('representation', 'creates'), 'obj'), (('of', 'program'), 'case'), (('the', 'program'), 'det'), (('source', 'program'), 'compound'), (('program', 'representation'), 'nmod'), (('.', 'breaks'), 'punct')]

 Named Entities are: 
>> [('2170701', 'CARDINAL'), ('1', 'CARDINAL'), ('Phase Analysis', 'WORK_OF_ART')]

========================== Sentence 10 ===========================

 Analysis phase consists of three sub phases:  Lexical analysis  Syntax analysis  Semantic analysis  Synthesis Phase 

Tokens are: 
>> ['Analysis', 'phase', 'consists', 'of', 'three', 'sub', 'phases', ':', 'Lexical', 'analysis', 'Syntax', 'analysis', 'Semantic', 'analysis', 'Synthesis', 'Phase'] 

 UPOS tags are: 
>> [('Analysis', 'NOUN'), ('phase', 'NOUN'), ('consists', 'VERB'), ('of', 'ADP'), ('three', 'NUM'), ('sub', 'NOUN'), ('phases', 'NOUN'), (':', 'PUNCT'), ('Lexical', 'ADJ'), ('analysis', 'NOUN'), ('Syntax', 'NOUN'), ('analysis', 'NOUN'), ('Semantic', 'ADJ'), ('analysis', 'NOUN'), ('Synthesis', 'NOUN'), ('Phase', 'NOUN')] 

 XPOS tags are: 
>> [('Analysis', 'NN'), ('phase', 'NN'), ('consists', 'VBZ'), ('of', 'IN'), ('three', 'CD'), ('sub', 'NN'), ('phases', 'NNS'), (':', ':'), ('Lexical', 'JJ'), ('analysis', 'NN'), ('Syntax', 'NN'), ('analysis', 'NN'), ('Semantic', 'JJ'), ('analysis', 'NN'), ('Synthesis', 'NN'), ('Phase', 'NN')] 

 Lemmas are: 
>> [('Analysis', 'analysis'), ('phase', 'phase'), ('consists', 'consist'), ('of', 'of'), ('three', 'three'), ('sub', 'sub'), ('phases', 'phase'), (':', ':'), ('Lexical', 'lexical'), ('analysis', 'analysis'), ('Syntax', 'Syntax'), ('analysis', 'analysis'), ('Semantic', 'Semantic'), ('analysis', 'analysis'), ('Synthesis', 'synthesis'), ('Phase', 'phase')] 

 Dependency tags are: 
>> [(('Analysis', 'phase'), 'compound'), (('phase', 'consists'), 'nsubj'), (('consists', 'root'), 'root'), (('of', 'phases'), 'case'), (('three', 'phases'), 'nummod'), (('sub', 'phases'), 'compound'), (('phases', 'consists'), 'obl'), ((':', 'phases'), 'punct'), (('Lexical', 'analysis'), 'amod'), (('analysis', 'analysis'), 'compound'), (('Syntax', 'analysis'), 'compound'), (('analysis', 'Phase'), 'compound'), (('Semantic', 'analysis'), 'amod'), (('analysis', 'Phase'), 'compound'), (('Synthesis', 'Phase'), 'compound'), (('Phase', 'consists'), 'parataxis')]

 Named Entities are: 
>> [('three', 'CARDINAL')]

========================== Sentence 11 ===========================

 The synthesis part constructs the desired target program from the intermediate representation. 

Tokens are: 
>> ['The', 'synthesis', 'part', 'constructs', 'the', 'desired', 'target', 'program', 'from', 'the', 'intermediate', 'representation', '.'] 

 UPOS tags are: 
>> [('The', 'DET'), ('synthesis', 'NOUN'), ('part', 'NOUN'), ('constructs', 'VERB'), ('the', 'DET'), ('desired', 'VERB'), ('target', 'NOUN'), ('program', 'NOUN'), ('from', 'ADP'), ('the', 'DET'), ('intermediate', 'ADJ'), ('representation', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('The', 'DT'), ('synthesis', 'NN'), ('part', 'NN'), ('constructs', 'VBZ'), ('the', 'DT'), ('desired', 'VBN'), ('target', 'NN'), ('program', 'NN'), ('from', 'IN'), ('the', 'DT'), ('intermediate', 'JJ'), ('representation', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('The', 'the'), ('synthesis', 'synthesis'), ('part', 'part'), ('constructs', 'construct'), ('the', 'the'), ('desired', 'desire'), ('target', 'target'), ('program', 'program'), ('from', 'from'), ('the', 'the'), ('intermediate', 'intermediate'), ('representation', 'representation'), ('.', '.')] 

 Dependency tags are: 
>> [(('The', 'part'), 'det'), (('synthesis', 'part'), 'compound'), (('part', 'constructs'), 'nsubj'), (('constructs', 'root'), 'root'), (('the', 'program'), 'det'), (('desired', 'program'), 'amod'), (('target', 'program'), 'compound'), (('program', 'constructs'), 'obj'), (('from', 'representation'), 'case'), (('the', 'representation'), 'det'), (('intermediate', 'representation'), 'amod'), (('representation', 'program'), 'nmod'), (('.', 'constructs'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 12 ===========================

 Synthesis phase consist of the following sub phases:  Code optimization Code generation     Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1 – Introduction to Compiler Design ‹#›  Phases of compiler        Phases of compiler Compiler Analysis phase Synthesis phase Lexical analysis  Syntax analysis  Semantic analysis    Intermediate code generation Code optimization  Code generation     Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1– Introduction to Compiler Design ‹#›  Lexical analysis Lexical Analysis is also called linear analysis or scanning. 

Tokens are: 
>> ['Synthesis', 'phase', 'consist', 'of', 'the', 'following', 'sub', 'phases', ':', 'Code', 'optimization', 'Code', 'generation', 'Prof.', 'Jay', 'R', 'Dhamsaniya', '#', '3130006', '(', 'PS', ')', '\uf077', 'Unit', '1', '–', 'Basic', 'Probability', '‹#›', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '1', '–', 'Introduction', 'to', 'Compiler', 'Design', '‹#›', 'Phases', 'of', 'compiler', 'Phases', 'of', 'compiler', 'Compiler', 'Analysis', 'phase', 'Synthesis', 'phase', 'Lexical', 'analysis', 'Syntax', 'analysis', 'Semantic', 'analysis', 'Intermediate', 'code', 'generation', 'Code', 'optimization', 'Code', 'generation', 'Prof.', 'Jay', 'R', 'Dhamsaniya', '#', '3130006', '(', 'PS', ')', '\uf077', 'Unit', '1', '–', 'Basic', 'Probability', '‹#›', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '1', '–', 'Introduction', 'to', 'Compiler', 'Design', '‹#›', 'Lexical', 'analysis', 'Lexical', 'Analysis', 'is', 'also', 'called', 'linear', 'analysis', 'or', 'scanning', '.'] 

 UPOS tags are: 
>> [('Synthesis', 'NOUN'), ('phase', 'NOUN'), ('consist', 'VERB'), ('of', 'ADP'), ('the', 'DET'), ('following', 'VERB'), ('sub', 'NOUN'), ('phases', 'NOUN'), (':', 'PUNCT'), ('Code', 'NOUN'), ('optimization', 'NOUN'), ('Code', 'NOUN'), ('generation', 'NOUN'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'ADJ'), ('Probability', 'NOUN'), ('‹#›', 'NOUN'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Introduction', 'NOUN'), ('to', 'ADP'), ('Compiler', 'NOUN'), ('Design', 'NOUN'), ('‹#›', 'NOUN'), ('Phases', 'NOUN'), ('of', 'ADP'), ('compiler', 'NOUN'), ('Phases', 'NOUN'), ('of', 'ADP'), ('compiler', 'NOUN'), ('Compiler', 'NOUN'), ('Analysis', 'NOUN'), ('phase', 'NOUN'), ('Synthesis', 'NOUN'), ('phase', 'NOUN'), ('Lexical', 'ADJ'), ('analysis', 'NOUN'), ('Syntax', 'PROPN'), ('analysis', 'NOUN'), ('Semantic', 'ADJ'), ('analysis', 'NOUN'), ('Intermediate', 'ADJ'), ('code', 'NOUN'), ('generation', 'NOUN'), ('Code', 'NOUN'), ('optimization', 'NOUN'), ('Code', 'NOUN'), ('generation', 'NOUN'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('\uf077', 'PUNCT'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'ADJ'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Introduction', 'NOUN'), ('to', 'ADP'), ('Compiler', 'NOUN'), ('Design', 'NOUN'), ('‹#›', 'CCONJ'), ('Lexical', 'ADJ'), ('analysis', 'NOUN'), ('Lexical', 'ADJ'), ('Analysis', 'PROPN'), ('is', 'AUX'), ('also', 'ADV'), ('called', 'VERB'), ('linear', 'ADJ'), ('analysis', 'NOUN'), ('or', 'CCONJ'), ('scanning', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Synthesis', 'NN'), ('phase', 'NN'), ('consist', 'VBP'), ('of', 'IN'), ('the', 'DT'), ('following', 'VBG'), ('sub', 'NN'), ('phases', 'NNS'), (':', ':'), ('Code', 'NN'), ('optimization', 'NN'), ('Code', 'NN'), ('generation', 'NN'), ('Prof.', 'NNP'), ('Jay', 'NNP'), ('R', 'NNP'), ('Dhamsaniya', 'NNP'), ('#', 'NN'), ('3130006', 'CD'), ('(', '-LRB-'), ('PS', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('1', 'CD'), ('–', ':'), ('Basic', 'JJ'), ('Probability', 'NN'), ('‹#›', 'NN'), ('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('1', 'CD'), ('–', ':'), ('Introduction', 'NN'), ('to', 'IN'), ('Compiler', 'NN'), ('Design', 'NN'), ('‹#›', 'NN'), ('Phases', 'NNS'), ('of', 'IN'), ('compiler', 'NN'), ('Phases', 'NNS'), ('of', 'IN'), ('compiler', 'NN'), ('Compiler', 'NN'), ('Analysis', 'NN'), ('phase', 'NN'), ('Synthesis', 'NN'), ('phase', 'NN'), ('Lexical', 'JJ'), ('analysis', 'NN'), ('Syntax', 'NNP'), ('analysis', 'NN'), ('Semantic', 'JJ'), ('analysis', 'NN'), ('Intermediate', 'JJ'), ('code', 'NN'), ('generation', 'NN'), ('Code', 'NN'), ('optimization', 'NN'), ('Code', 'NN'), ('generation', 'NN'), ('Prof.', 'NNP'), ('Jay', 'NNP'), ('R', 'NNP'), ('Dhamsaniya', 'NNP'), ('#', 'NN'), ('3130006', 'CD'), ('(', '-LRB-'), ('PS', 'NNP'), (')', '-RRB-'), ('\uf077', ','), ('Unit', 'NN'), ('1', 'CD'), ('–', ':'), ('Basic', 'JJ'), ('Probability', 'NNP'), ('‹#›', 'NNP'), ('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('1', 'CD'), ('–', ':'), ('Introduction', 'NN'), ('to', 'IN'), ('Compiler', 'NN'), ('Design', 'NN'), ('‹#›', 'CC'), ('Lexical', 'JJ'), ('analysis', 'NN'), ('Lexical', 'JJ'), ('Analysis', 'NNP'), ('is', 'VBZ'), ('also', 'RB'), ('called', 'VBN'), ('linear', 'JJ'), ('analysis', 'NN'), ('or', 'CC'), ('scanning', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('Synthesis', 'synthesis'), ('phase', 'phase'), ('consist', 'consist'), ('of', 'of'), ('the', 'the'), ('following', 'follow'), ('sub', 'sub'), ('phases', 'phase'), (':', ':'), ('Code', 'code'), ('optimization', 'optimization'), ('Code', 'code'), ('generation', 'generation'), ('Prof.', 'Prof.'), ('Jay', 'Jay'), ('R', 'R'), ('Dhamsaniya', 'Dhamsaniya'), ('#', '#'), ('3130006', '3130006'), ('(', '('), ('PS', 'ps'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '-'), ('Basic', 'basic'), ('Probability', 'probability'), ('‹#›', '‹#›'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '-'), ('Introduction', 'introduction'), ('to', 'to'), ('Compiler', 'compiler'), ('Design', 'design'), ('‹#›', '‹#›'), ('Phases', 'phase'), ('of', 'of'), ('compiler', 'compiler'), ('Phases', 'phase'), ('of', 'of'), ('compiler', 'compiler'), ('Compiler', 'compiler'), ('Analysis', 'analysis'), ('phase', 'phase'), ('Synthesis', 'synthesis'), ('phase', 'phase'), ('Lexical', 'lexical'), ('analysis', 'analysis'), ('Syntax', 'Syntax'), ('analysis', 'analysis'), ('Semantic', 'Semantic'), ('analysis', 'analysis'), ('Intermediate', 'intermediate'), ('code', 'code'), ('generation', 'generation'), ('Code', 'code'), ('optimization', 'optimization'), ('Code', 'code'), ('generation', 'generation'), ('Prof.', 'Prof.'), ('Jay', 'Jay'), ('R', 'R'), ('Dhamsaniya', 'Dhamsaniya'), ('#', '#'), ('3130006', '3130006'), ('(', '('), ('PS', 'ps'), (')', ')'), ('\uf077', "''"), ('Unit', 'unit'), ('1', '1'), ('–', '-'), ('Basic', 'basic'), ('Probability', 'Probability'), ('‹#›', '‹#›'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '-'), ('Introduction', 'introduction'), ('to', 'to'), ('Compiler', 'compiler'), ('Design', 'design'), ('‹#›', '‹#›'), ('Lexical', 'lexical'), ('analysis', 'analysis'), ('Lexical', 'lexical'), ('Analysis', 'Analysis'), ('is', 'be'), ('also', 'also'), ('called', 'call'), ('linear', 'linear'), ('analysis', 'analysis'), ('or', 'or'), ('scanning', 'scanning'), ('.', '.')] 

 Dependency tags are: 
>> [(('Synthesis', 'phase'), 'compound'), (('phase', 'consist'), 'nsubj'), (('consist', 'root'), 'root'), (('of', 'phases'), 'case'), (('the', 'phases'), 'det'), (('following', 'phases'), 'amod'), (('sub', 'phases'), 'compound'), (('phases', 'consist'), 'obl'), ((':', 'consist'), 'punct'), (('Code', 'generation'), 'compound'), (('optimization', 'Code'), 'compound'), (('Code', 'generation'), 'compound'), (('generation', 'phases'), 'appos'), (('Prof.', 'generation'), 'compound'), (('Jay', 'Prof.'), 'flat'), (('R', '#'), 'compound'), (('Dhamsaniya', '#'), 'compound'), (('#', 'generation'), 'conj'), (('3130006', '#'), 'nummod'), (('(', 'PS'), 'punct'), (('PS', 'Unit'), 'appos'), ((')', 'PS'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', 'generation'), 'conj'), (('1', 'Unit'), 'dep'), (('–', 'Unit'), 'punct'), (('Basic', 'Probability'), 'amod'), (('Probability', 'generation'), 'conj'), (('‹#›', 'Probability'), 'compound'), (('Prof.', 'Probability'), 'appos'), (('Dixita', 'B'), 'compound'), (('B', 'Kagathara'), 'compound'), (('Kagathara', '#'), 'compound'), (('#', 'Prof.'), 'compound'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', 'Unit'), 'appos'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', '#'), 'appos'), (('1', 'Unit'), 'nummod'), (('–', 'consist'), 'punct'), (('Introduction', 'generation'), 'conj'), (('to', 'Design'), 'case'), (('Compiler', 'Design'), 'compound'), (('Design', 'Introduction'), 'nmod'), (('‹#›', 'Phases'), 'compound'), (('Phases', 'Introduction'), 'nmod'), (('of', 'Phases'), 'case'), (('compiler', 'Phases'), 'compound'), (('Phases', 'Phases'), 'nmod'), (('of', 'phase'), 'case'), (('compiler', 'phase'), 'compound'), (('Compiler', 'Analysis'), 'compound'), (('Analysis', 'phase'), 'compound'), (('phase', 'analysis'), 'compound'), (('Synthesis', 'analysis'), 'compound'), (('phase', 'analysis'), 'compound'), (('Lexical', 'analysis'), 'amod'), (('analysis', 'analysis'), 'compound'), (('Syntax', 'analysis'), 'compound'), (('analysis', 'analysis'), 'compound'), (('Semantic', 'analysis'), 'amod'), (('analysis', 'Phases'), 'conj'), (('Intermediate', 'generation'), 'amod'), (('code', 'generation'), 'compound'), (('generation', 'generation'), 'compound'), (('Code', 'generation'), 'compound'), (('optimization', 'generation'), 'compound'), (('Code', 'generation'), 'compound'), (('generation', 'analysis'), 'conj'), (('Prof.', 'generation'), 'appos'), (('Jay', 'Prof.'), 'flat'), (('R', 'Prof.'), 'flat'), (('Dhamsaniya', 'Prof.'), 'flat'), (('#', 'Prof.'), 'compound'), (('3130006', '#'), 'nummod'), (('(', 'PS'), 'punct'), (('PS', 'Prof.'), 'appos'), ((')', 'PS'), 'punct'), (('\uf077', 'PS'), 'punct'), (('Unit', 'Prof.'), 'appos'), (('1', 'Unit'), 'nummod'), (('–', '‹#›'), 'punct'), (('Basic', 'Probability'), 'amod'), (('Probability', '‹#›'), 'compound'), (('‹#›', 'Unit'), 'compound'), (('Prof.', '‹#›'), 'flat'), (('Dixita', 'Prof.'), 'flat'), (('B', 'Prof.'), 'flat'), (('Kagathara', 'Prof.'), 'flat'), (('#', 'Prof.'), 'compound'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', '#'), 'appos'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', '#'), 'appos'), (('1', 'Unit'), 'nummod'), (('–', 'Introduction'), 'punct'), (('Introduction', 'Unit'), 'appos'), (('to', 'Design'), 'case'), (('Compiler', 'Design'), 'compound'), (('Design', 'Introduction'), 'nmod'), (('‹#›', 'Analysis'), 'cc'), (('Lexical', 'analysis'), 'amod'), (('analysis', 'Analysis'), 'compound'), (('Lexical', 'Analysis'), 'amod'), (('Analysis', 'called'), 'nsubj:pass'), (('is', 'called'), 'aux:pass'), (('also', 'called'), 'advmod'), (('called', 'Introduction'), 'acl:relcl'), (('linear', 'analysis'), 'amod'), (('analysis', 'called'), 'obj'), (('or', 'scanning'), 'cc'), (('scanning', 'analysis'), 'conj'), (('.', 'consist'), 'punct')]

 Named Entities are: 
>> [('#3130006', 'CARDINAL'), ('1', 'CARDINAL'), ('2170701', 'CARDINAL'), ('1', 'CARDINAL'), ('1', 'CARDINAL'), ('2170701', 'CARDINAL'), ('1', 'CARDINAL'), ('Lexical Analysis', 'ORG')]

========================== Sentence 13 ===========================

 Lexical Analyzer divides the given source statement into the tokens. 

Tokens are: 
>> ['Lexical', 'Analyzer', 'divides', 'the', 'given', 'source', 'statement', 'into', 'the', 'tokens', '.'] 

 UPOS tags are: 
>> [('Lexical', 'ADJ'), ('Analyzer', 'NOUN'), ('divides', 'VERB'), ('the', 'DET'), ('given', 'VERB'), ('source', 'NOUN'), ('statement', 'NOUN'), ('into', 'ADP'), ('the', 'DET'), ('tokens', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Lexical', 'JJ'), ('Analyzer', 'NN'), ('divides', 'VBZ'), ('the', 'DT'), ('given', 'VBN'), ('source', 'NN'), ('statement', 'NN'), ('into', 'IN'), ('the', 'DT'), ('tokens', 'NNS'), ('.', '.')] 

 Lemmas are: 
>> [('Lexical', 'lexical'), ('Analyzer', 'analyzer'), ('divides', 'divide'), ('the', 'the'), ('given', 'give'), ('source', 'source'), ('statement', 'statement'), ('into', 'into'), ('the', 'the'), ('tokens', 'token'), ('.', '.')] 

 Dependency tags are: 
>> [(('Lexical', 'Analyzer'), 'amod'), (('Analyzer', 'divides'), 'nsubj'), (('divides', 'root'), 'root'), (('the', 'statement'), 'det'), (('given', 'statement'), 'amod'), (('source', 'statement'), 'compound'), (('statement', 'divides'), 'obj'), (('into', 'tokens'), 'case'), (('the', 'tokens'), 'det'), (('tokens', 'divides'), 'obl'), (('.', 'divides'), 'punct')]

 Named Entities are: 
>> [('Lexical Analyzer', 'PERSON')]

========================== Sentence 14 ===========================

 Ex: Position = initial + rate * 60 would be grouped into the following tokens: 	Position (identifier) 	= (Assignment symbol) 	initial (identifier) 	+ (Plus symbol) 	rate (identifier) 	* (Multiplication symbol) 	60 (Number)  Lexical analysis id1 = id2 + id3 * 60        Position = initial + rate*60    Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1 – Introduction to Compiler Design ‹#›  Phases of compiler Compiler Analysis phase Synthesis phase Lexical analysis  Syntax analysis  Semantic analysis    Intermediate code generation Code optimization  Code generation     Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1– Introduction to Compiler Design ‹#›  Syntax analysis Syntax Analysis is also called Parsing or Hierarchical Analysis. 

Tokens are: 
>> ['Ex', ':', 'Position', '=', 'initial', '+', 'rate', '*', '60', 'would', 'be', 'grouped', 'into', 'the', 'following', 'tokens', ':', 'Position', '(', 'identifier', ')', '=', '(', 'Assignment', 'symbol', ')', 'initial', '(', 'identifier', ')', '+', '(', 'Plus', 'symbol', ')', 'rate', '(', 'identifier', ')', '*', '(', 'Multiplication', 'symbol', ')', '60', '(', 'Number', ')', 'Lexical', 'analysis', 'id', '1', '=', 'id', '2', '+', 'id', '3', '*', '60', 'Position', '=', 'initial', '+', 'rate*60', 'Prof.', 'Jay', 'R', 'Dhamsaniya', '#', '3130006', '(', 'PS', ')', '\uf077', 'Unit', '1', '–', 'Basic', 'Probability', '‹#›', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '1', '–', 'Introduction', 'to', 'Compiler', 'Design', '‹#›', 'Phases', 'of', 'compiler', 'Compiler', 'Analysis', 'phase', 'Synthesis', 'phase', 'Lexical', 'analysis', 'Syntax', 'analysis', 'Semantic', 'analysis', 'Intermediate', 'code', 'generation', 'Code', 'optimization', 'Code', 'generation', 'Prof.', 'Jay', 'R', 'Dhamsaniya', '#', '3130006', '(', 'PS', ')', '\uf077', 'Unit', '1', '–', 'Basic', 'Probability', '‹#›', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '1', '–', 'Introduction', 'to', 'Compiler', 'Design', '‹#›', 'Syntax', 'analysis', 'Syntax', 'Analysis', 'is', 'also', 'called', 'Parsing', 'or', 'Hierarchical', 'Analysis', '.'] 

 UPOS tags are: 
>> [('Ex', 'NOUN'), (':', 'PUNCT'), ('Position', 'NOUN'), ('=', 'PUNCT'), ('initial', 'NOUN'), ('+', 'SYM'), ('rate', 'NOUN'), ('*', 'PUNCT'), ('60', 'NUM'), ('would', 'AUX'), ('be', 'AUX'), ('grouped', 'VERB'), ('into', 'ADP'), ('the', 'DET'), ('following', 'VERB'), ('tokens', 'NOUN'), (':', 'PUNCT'), ('Position', 'NOUN'), ('(', 'PUNCT'), ('identifier', 'NOUN'), (')', 'PUNCT'), ('=', 'PUNCT'), ('(', 'PUNCT'), ('Assignment', 'NOUN'), ('symbol', 'NOUN'), (')', 'PUNCT'), ('initial', 'ADJ'), ('(', 'PUNCT'), ('identifier', 'NOUN'), (')', 'PUNCT'), ('+', 'SYM'), ('(', 'PUNCT'), ('Plus', 'CCONJ'), ('symbol', 'NOUN'), (')', 'PUNCT'), ('rate', 'NOUN'), ('(', 'PUNCT'), ('identifier', 'NOUN'), (')', 'PUNCT'), ('*', 'PUNCT'), ('(', 'PUNCT'), ('Multiplication', 'NOUN'), ('symbol', 'NOUN'), (')', 'PUNCT'), ('60', 'NUM'), ('(', 'PUNCT'), ('Number', 'NOUN'), (')', 'PUNCT'), ('Lexical', 'ADJ'), ('analysis', 'NOUN'), ('id', 'NOUN'), ('1', 'NUM'), ('=', 'SYM'), ('id', 'NOUN'), ('2', 'NUM'), ('+', 'SYM'), ('id', 'NOUN'), ('3', 'NUM'), ('*', 'PUNCT'), ('60', 'NUM'), ('Position', 'NOUN'), ('=', 'PUNCT'), ('initial', 'ADJ'), ('+', 'SYM'), ('rate*60', 'NOUN'), ('Prof.', 'NOUN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'ADJ'), ('Probability', 'NOUN'), ('‹#›', 'NOUN'), ('Prof.', 'NOUN'), ('Dixita', 'PROPN'), ('B', 'NOUN'), ('Kagathara', 'NOUN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Introduction', 'NOUN'), ('to', 'ADP'), ('Compiler', 'NOUN'), ('Design', 'NOUN'), ('‹#›', 'NOUN'), ('Phases', 'NOUN'), ('of', 'ADP'), ('compiler', 'NOUN'), ('Compiler', 'NOUN'), ('Analysis', 'NOUN'), ('phase', 'NOUN'), ('Synthesis', 'NOUN'), ('phase', 'NOUN'), ('Lexical', 'ADJ'), ('analysis', 'NOUN'), ('Syntax', 'NOUN'), ('analysis', 'NOUN'), ('Semantic', 'ADJ'), ('analysis', 'NOUN'), ('Intermediate', 'ADJ'), ('code', 'NOUN'), ('generation', 'NOUN'), ('Code', 'NOUN'), ('optimization', 'NOUN'), ('Code', 'NOUN'), ('generation', 'NOUN'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'ADJ'), ('Probability', 'NOUN'), ('‹#›', 'NOUN'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'NOUN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Introduction', 'NOUN'), ('to', 'ADP'), ('Compiler', 'NOUN'), ('Design', 'NOUN'), ('‹#›', 'NOUN'), ('Syntax', 'NOUN'), ('analysis', 'NOUN'), ('Syntax', 'NOUN'), ('Analysis', 'NOUN'), ('is', 'AUX'), ('also', 'ADV'), ('called', 'VERB'), ('Parsing', 'NOUN'), ('or', 'CCONJ'), ('Hierarchical', 'ADJ'), ('Analysis', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Ex', 'NN'), (':', ':'), ('Position', 'NN'), ('=', ','), ('initial', 'NN'), ('+', ','), ('rate', 'NN'), ('*', 'NFP'), ('60', 'CD'), ('would', 'MD'), ('be', 'VB'), ('grouped', 'VBN'), ('into', 'IN'), ('the', 'DT'), ('following', 'VBG'), ('tokens', 'NNS'), (':', ':'), ('Position', 'NN'), ('(', '-LRB-'), ('identifier', 'NN'), (')', '-RRB-'), ('=', ','), ('(', '-LRB-'), ('Assignment', 'NN'), ('symbol', 'NN'), (')', '-RRB-'), ('initial', 'JJ'), ('(', '-LRB-'), ('identifier', 'NN'), (')', '-RRB-'), ('+', 'SYM'), ('(', '-LRB-'), ('Plus', 'CC'), ('symbol', 'NN'), (')', '-RRB-'), ('rate', 'NN'), ('(', '-LRB-'), ('identifier', 'NN'), (')', '-RRB-'), ('*', 'NFP'), ('(', '-LRB-'), ('Multiplication', 'NN'), ('symbol', 'NN'), (')', '-RRB-'), ('60', 'CD'), ('(', '-LRB-'), ('Number', 'NN'), (')', '-RRB-'), ('Lexical', 'JJ'), ('analysis', 'NN'), ('id', 'NN'), ('1', 'CD'), ('=', 'SYM'), ('id', 'NN'), ('2', 'CD'), ('+', 'SYM'), ('id', 'NN'), ('3', 'CD'), ('*', 'NFP'), ('60', 'CD'), ('Position', 'NN'), ('=', ','), ('initial', 'JJ'), ('+', 'SYM'), ('rate*60', 'NN'), ('Prof.', 'NN'), ('Jay', 'NNP'), ('R', 'NNP'), ('Dhamsaniya', 'NNP'), ('#', 'NN'), ('3130006', 'CD'), ('(', '-LRB-'), ('PS', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('1', 'CD'), ('–', ','), ('Basic', 'JJ'), ('Probability', 'NN'), ('‹#›', 'NN'), ('Prof.', 'NN'), ('Dixita', 'NNP'), ('B', 'NN'), ('Kagathara', 'NN'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('1', 'CD'), ('–', ','), ('Introduction', 'NN'), ('to', 'IN'), ('Compiler', 'NN'), ('Design', 'NN'), ('‹#›', 'NN'), ('Phases', 'NNS'), ('of', 'IN'), ('compiler', 'NN'), ('Compiler', 'NN'), ('Analysis', 'NN'), ('phase', 'NN'), ('Synthesis', 'NN'), ('phase', 'NN'), ('Lexical', 'JJ'), ('analysis', 'NN'), ('Syntax', 'NN'), ('analysis', 'NN'), ('Semantic', 'JJ'), ('analysis', 'NN'), ('Intermediate', 'JJ'), ('code', 'NN'), ('generation', 'NN'), ('Code', 'NN'), ('optimization', 'NN'), ('Code', 'NN'), ('generation', 'NN'), ('Prof.', 'NNP'), ('Jay', 'NNP'), ('R', 'NNP'), ('Dhamsaniya', 'NNP'), ('#', 'NN'), ('3130006', 'CD'), ('(', '-LRB-'), ('PS', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('1', 'CD'), ('–', ','), ('Basic', 'JJ'), ('Probability', 'NN'), ('‹#›', 'NN'), ('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NN'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('1', 'CD'), ('–', ','), ('Introduction', 'NN'), ('to', 'IN'), ('Compiler', 'NN'), ('Design', 'NN'), ('‹#›', 'NN'), ('Syntax', 'NN'), ('analysis', 'NN'), ('Syntax', 'NN'), ('Analysis', 'NN'), ('is', 'VBZ'), ('also', 'RB'), ('called', 'VBN'), ('Parsing', 'NN'), ('or', 'CC'), ('Hierarchical', 'JJ'), ('Analysis', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('Ex', 'ex'), (':', ':'), ('Position', 'position'), ('=', '='), ('initial', 'initial'), ('+', '+'), ('rate', 'rate'), ('*', '*'), ('60', '60'), ('would', 'would'), ('be', 'be'), ('grouped', 'group'), ('into', 'into'), ('the', 'the'), ('following', 'follow'), ('tokens', 'token'), (':', ':'), ('Position', 'position'), ('(', '('), ('identifier', 'identifier'), (')', ')'), ('=', '='), ('(', '('), ('Assignment', 'assignment'), ('symbol', 'symbol'), (')', ')'), ('initial', 'initial'), ('(', '('), ('identifier', 'identifier'), (')', ')'), ('+', '+'), ('(', '('), ('Plus', 'plus'), ('symbol', 'symbol'), (')', ')'), ('rate', 'rate'), ('(', '('), ('identifier', 'identifier'), (')', ')'), ('*', '*'), ('(', '('), ('Multiplication', 'multiplication'), ('symbol', 'symbol'), (')', ')'), ('60', '60'), ('(', '('), ('Number', 'number'), (')', ')'), ('Lexical', 'lexical'), ('analysis', 'analysis'), ('id', 'id'), ('1', '1'), ('=', '='), ('id', 'id'), ('2', '2'), ('+', '+'), ('id', 'id'), ('3', '3'), ('*', '*'), ('60', '60'), ('Position', 'position'), ('=', '='), ('initial', 'initial'), ('+', '+'), ('rate*60', 'rate*60'), ('Prof.', 'Prof.'), ('Jay', 'Jay'), ('R', 'R'), ('Dhamsaniya', 'Dhamsaniya'), ('#', '#'), ('3130006', '3130006'), ('(', '('), ('PS', 'ps'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '-'), ('Basic', 'basic'), ('Probability', 'probability'), ('‹#›', '‹#›'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '-'), ('Introduction', 'introduction'), ('to', 'to'), ('Compiler', 'compiler'), ('Design', 'design'), ('‹#›', '‹#›'), ('Phases', 'phase'), ('of', 'of'), ('compiler', 'compiler'), ('Compiler', 'compiler'), ('Analysis', 'analysis'), ('phase', 'phase'), ('Synthesis', 'synthesis'), ('phase', 'phase'), ('Lexical', 'lexical'), ('analysis', 'analysis'), ('Syntax', 'Syntax'), ('analysis', 'analysis'), ('Semantic', 'Semantic'), ('analysis', 'analysis'), ('Intermediate', 'intermediate'), ('code', 'code'), ('generation', 'generation'), ('Code', 'code'), ('optimization', 'optimization'), ('Code', 'code'), ('generation', 'generation'), ('Prof.', 'Prof.'), ('Jay', 'Jay'), ('R', 'R'), ('Dhamsaniya', 'Dhamsaniya'), ('#', '#'), ('3130006', '3130006'), ('(', '('), ('PS', 'ps'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '-'), ('Basic', 'basic'), ('Probability', 'probability'), ('‹#›', '‹#›'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'b'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '-'), ('Introduction', 'introduction'), ('to', 'to'), ('Compiler', 'compiler'), ('Design', 'design'), ('‹#›', '‹#›'), ('Syntax', 'Syntax'), ('analysis', 'analysis'), ('Syntax', 'Syntax'), ('Analysis', 'analysis'), ('is', 'be'), ('also', 'also'), ('called', 'call'), ('Parsing', 'parsing'), ('or', 'or'), ('Hierarchical', 'hierarchical'), ('Analysis', 'analysis'), ('.', '.')] 

 Dependency tags are: 
>> [(('Ex', 'root'), 'root'), ((':', 'Ex'), 'punct'), (('Position', 'Ex'), 'appos'), (('=', 'Position'), 'punct'), (('initial', 'grouped'), 'nsubj:pass'), (('+', 'rate'), 'cc'), (('rate', 'initial'), 'conj'), (('*', 'initial'), 'punct'), (('60', 'rate'), 'nummod'), (('would', 'grouped'), 'aux'), (('be', 'grouped'), 'aux:pass'), (('grouped', 'Ex'), 'appos'), (('into', 'tokens'), 'case'), (('the', 'tokens'), 'det'), (('following', 'tokens'), 'amod'), (('tokens', 'grouped'), 'obl'), ((':', 'Position'), 'punct'), (('Position', 'tokens'), 'appos'), (('(', 'identifier'), 'punct'), (('identifier', 'Position'), 'dep'), ((')', 'identifier'), 'punct'), (('=', 'Position'), 'punct'), (('(', 'symbol'), 'punct'), (('Assignment', 'symbol'), 'compound'), (('symbol', 'Position'), 'dep'), ((')', 'symbol'), 'punct'), (('initial', 'rate'), 'amod'), (('(', 'identifier'), 'punct'), (('identifier', 'Position'), 'dep'), ((')', 'identifier'), 'punct'), (('+', 'rate'), 'cc'), (('(', 'symbol'), 'punct'), (('Plus', 'symbol'), 'cc'), (('symbol', 'rate'), 'compound'), ((')', 'symbol'), 'punct'), (('rate', 'Position'), 'conj'), (('(', 'identifier'), 'punct'), (('identifier', 'rate'), 'appos'), ((')', 'identifier'), 'punct'), (('*', 'symbol'), 'punct'), (('(', 'symbol'), 'punct'), (('Multiplication', 'symbol'), 'compound'), (('symbol', 'rate'), 'appos'), ((')', 'symbol'), 'punct'), (('60', 'Number'), 'nummod'), (('(', 'Number'), 'punct'), (('Number', 'id'), 'appos'), ((')', 'Number'), 'punct'), (('Lexical', 'analysis'), 'amod'), (('analysis', 'id'), 'compound'), (('id', 'Position'), 'conj'), (('1', '='), 'nsubj'), (('=', 'id'), 'parataxis'), (('id', '='), 'obj'), (('2', 'id'), 'nummod'), (('+', 'id'), 'cc'), (('id', 'id'), 'conj'), (('3', 'id'), 'nummod'), (('*', 'Position'), 'punct'), (('60', 'Position'), 'nummod'), (('Position', 'id'), 'conj'), (('=', 'Position'), 'punct'), (('initial', 'rate*60'), 'amod'), (('+', 'rate*60'), 'cc'), (('rate*60', 'Prof.'), 'compound'), (('Prof.', 'grouped'), 'parataxis'), (('Jay', '#'), 'compound'), (('R', '#'), 'compound'), (('Dhamsaniya', '#'), 'compound'), (('#', 'Prof.'), 'appos'), (('3130006', '#'), 'nummod'), (('(', 'PS'), 'punct'), (('PS', 'Unit'), 'appos'), ((')', 'PS'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', '#'), 'appos'), (('1', 'Unit'), 'nummod'), (('–', 'Ex'), 'punct'), (('Basic', 'Probability'), 'amod'), (('Probability', '‹#›'), 'compound'), (('‹#›', 'Ex'), 'appos'), (('Prof.', 'B'), 'compound'), (('Dixita', 'B'), 'compound'), (('B', '#'), 'compound'), (('Kagathara', '#'), 'compound'), (('#', 'grouped'), 'parataxis'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', 'Unit'), 'compound'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', '#'), 'appos'), (('1', 'Unit'), 'nummod'), (('–', 'Ex'), 'punct'), (('Introduction', 'grouped'), 'parataxis'), (('to', 'Design'), 'case'), (('Compiler', 'Design'), 'compound'), (('Design', 'Phases'), 'nmod'), (('‹#›', 'Phases'), 'compound'), (('Phases', 'Introduction'), 'nmod'), (('of', 'phase'), 'case'), (('compiler', 'phase'), 'compound'), (('Compiler', 'Analysis'), 'compound'), (('Analysis', 'phase'), 'compound'), (('phase', 'phase'), 'compound'), (('Synthesis', 'analysis'), 'compound'), (('phase', 'analysis'), 'compound'), (('Lexical', 'analysis'), 'amod'), (('analysis', 'analysis'), 'compound'), (('Syntax', 'analysis'), 'compound'), (('analysis', 'analysis'), 'compound'), (('Semantic', 'analysis'), 'amod'), (('analysis', 'Phases'), 'nmod'), (('Intermediate', 'generation'), 'amod'), (('code', 'generation'), 'compound'), (('generation', 'generation'), 'compound'), (('Code', 'generation'), 'compound'), (('optimization', 'generation'), 'compound'), (('Code', 'generation'), 'compound'), (('generation', 'analysis'), 'conj'), (('Prof.', 'generation'), 'compound'), (('Jay', 'Prof.'), 'flat'), (('R', 'Prof.'), 'flat'), (('Dhamsaniya', '#'), 'compound'), (('#', 'Prof.'), 'appos'), (('3130006', '#'), 'nummod'), (('(', 'PS'), 'punct'), (('PS', '#'), 'appos'), ((')', 'PS'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', '#'), 'appos'), (('1', 'Unit'), 'nummod'), (('–', 'Probability'), 'punct'), (('Basic', 'Probability'), 'amod'), (('Probability', 'Unit'), 'compound'), (('‹#›', 'Probability'), 'compound'), (('Prof.', 'Probability'), 'compound'), (('Dixita', 'B'), 'compound'), (('B', 'Kagathara'), 'compound'), (('Kagathara', 'Prof.'), 'compound'), (('#', 'Prof.'), 'appos'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', '#'), 'appos'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', '#'), 'appos'), (('1', 'Unit'), 'nummod'), (('–', 'Introduction'), 'punct'), (('Introduction', 'Unit'), 'appos'), (('to', 'Analysis'), 'case'), (('Compiler', 'Design'), 'compound'), (('Design', 'Analysis'), 'compound'), (('‹#›', 'analysis'), 'compound'), (('Syntax', 'analysis'), 'compound'), (('analysis', 'Analysis'), 'compound'), (('Syntax', 'Analysis'), 'compound'), (('Analysis', 'called'), 'nsubj:pass'), (('is', 'called'), 'aux:pass'), (('also', 'called'), 'advmod'), (('called', 'Introduction'), 'parataxis'), (('Parsing', 'Analysis'), 'compound'), (('or', 'Hierarchical'), 'cc'), (('Hierarchical', 'Parsing'), 'conj'), (('Analysis', 'called'), 'obj'), (('.', 'Ex'), 'punct')]

 Named Entities are: 
>> [('60', 'CARDINAL'), ('60', 'CARDINAL'), ('2', 'CARDINAL'), ('3', 'CARDINAL'), ('#3130006', 'CARDINAL'), ('1', 'CARDINAL'), ('#2170701', 'CARDINAL'), ('1', 'CARDINAL'), ('1', 'CARDINAL'), ('2170701', 'CARDINAL'), ('1', 'CARDINAL'), ('Parsing or Hierarchical Analysis', 'WORK_OF_ART')]

========================== Sentence 15 ===========================

 The syntax analyzer checks each line of the code and spots every tiny mistake. 

Tokens are: 
>> ['The', 'syntax', 'analyzer', 'checks', 'each', 'line', 'of', 'the', 'code', 'and', 'spots', 'every', 'tiny', 'mistake', '.'] 

 UPOS tags are: 
>> [('The', 'DET'), ('syntax', 'NOUN'), ('analyzer', 'NOUN'), ('checks', 'VERB'), ('each', 'DET'), ('line', 'NOUN'), ('of', 'ADP'), ('the', 'DET'), ('code', 'NOUN'), ('and', 'CCONJ'), ('spots', 'VERB'), ('every', 'DET'), ('tiny', 'ADJ'), ('mistake', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('The', 'DT'), ('syntax', 'NN'), ('analyzer', 'NN'), ('checks', 'VBZ'), ('each', 'DT'), ('line', 'NN'), ('of', 'IN'), ('the', 'DT'), ('code', 'NN'), ('and', 'CC'), ('spots', 'VBZ'), ('every', 'DT'), ('tiny', 'JJ'), ('mistake', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('The', 'the'), ('syntax', 'syntax'), ('analyzer', 'analyzer'), ('checks', 'check'), ('each', 'each'), ('line', 'line'), ('of', 'of'), ('the', 'the'), ('code', 'code'), ('and', 'and'), ('spots', 'spot'), ('every', 'every'), ('tiny', 'tiny'), ('mistake', 'mistake'), ('.', '.')] 

 Dependency tags are: 
>> [(('The', 'analyzer'), 'det'), (('syntax', 'analyzer'), 'compound'), (('analyzer', 'checks'), 'nsubj'), (('checks', 'root'), 'root'), (('each', 'line'), 'det'), (('line', 'checks'), 'obj'), (('of', 'code'), 'case'), (('the', 'code'), 'det'), (('code', 'line'), 'nmod'), (('and', 'spots'), 'cc'), (('spots', 'checks'), 'conj'), (('every', 'mistake'), 'det'), (('tiny', 'mistake'), 'amod'), (('mistake', 'spots'), 'obj'), (('.', 'checks'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 16 ===========================

 If code is error free then syntax analyzer generates the tree. 

Tokens are: 
>> ['If', 'code', 'is', 'error', 'free', 'then', 'syntax', 'analyzer', 'generates', 'the', 'tree', '.'] 

 UPOS tags are: 
>> [('If', 'SCONJ'), ('code', 'NOUN'), ('is', 'AUX'), ('error', 'NOUN'), ('free', 'ADJ'), ('then', 'ADV'), ('syntax', 'NOUN'), ('analyzer', 'NOUN'), ('generates', 'VERB'), ('the', 'DET'), ('tree', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('If', 'IN'), ('code', 'NN'), ('is', 'VBZ'), ('error', 'NN'), ('free', 'JJ'), ('then', 'RB'), ('syntax', 'NN'), ('analyzer', 'NN'), ('generates', 'VBZ'), ('the', 'DT'), ('tree', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('If', 'if'), ('code', 'code'), ('is', 'be'), ('error', 'error'), ('free', 'free'), ('then', 'then'), ('syntax', 'syntax'), ('analyzer', 'analyzer'), ('generates', 'generate'), ('the', 'the'), ('tree', 'tree'), ('.', '.')] 

 Dependency tags are: 
>> [(('If', 'free'), 'mark'), (('code', 'free'), 'nsubj'), (('is', 'free'), 'cop'), (('error', 'free'), 'compound'), (('free', 'generates'), 'advcl'), (('then', 'generates'), 'advmod'), (('syntax', 'analyzer'), 'compound'), (('analyzer', 'generates'), 'nsubj'), (('generates', 'root'), 'root'), (('the', 'tree'), 'det'), (('tree', 'generates'), 'obj'), (('.', 'generates'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 17 ===========================

 Syntax analysis id1 = id2 + id3 * 60 Lexical analysis = id1 + id2 * id3 60 Position = initial + rate*60    Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1 – Introduction to Compiler Design ‹#›  Phases of compiler Compiler Analysis phase Synthesis phase Lexical analysis  Syntax analysis  Semantic analysis    Intermediate code generation Code optimization  Code generation     Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1– Introduction to Compiler Design ‹#›  Semantic analysis Semantic analyzer determines the meaning of a source string. 

Tokens are: 
>> ['Syntax', 'analysis', 'id', '1', '=', 'id', '2', '+', 'id', '3', '*', '60', 'Lexical', 'analysis', '=', 'id', '1', '+', 'id', '2', '*', 'id', '3', '60', 'Position', '=', 'initial', '+', 'rate*60', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '1', '–', 'Introduction', 'to', 'Compiler', 'Design', '‹#›', 'Phases', 'of', 'compiler', 'Compiler', 'Analysis', 'phase', 'Synthesis', 'phase', 'Lexical', 'analysis', 'Syntax', 'analysis', 'Semantic', 'analysis', 'Intermediate', 'code', 'generation', 'Code', 'optimization', 'Code', 'generation', 'Prof.', 'Jay', 'R', 'Dhamsaniya', '#', '3130006', '(', 'PS', ')', '\uf077', 'Unit', '1', '–', 'Basic', 'Probability', '‹#›', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '1', '–', 'Introduction', 'to', 'Compiler', 'Design', '‹#›', 'Semantic', 'analysis', 'Semantic', 'analyzer', 'determines', 'the', 'meaning', 'of', 'a', 'source', 'string', '.'] 

 UPOS tags are: 
>> [('Syntax', 'NOUN'), ('analysis', 'NOUN'), ('id', 'NOUN'), ('1', 'NUM'), ('=', 'SYM'), ('id', 'NOUN'), ('2', 'NUM'), ('+', 'SYM'), ('id', 'NOUN'), ('3', 'NUM'), ('*', 'PUNCT'), ('60', 'NUM'), ('Lexical', 'ADJ'), ('analysis', 'NOUN'), ('=', 'SYM'), ('id', 'NOUN'), ('1', 'NUM'), ('+', 'SYM'), ('id', 'NOUN'), ('2', 'NUM'), ('*', 'PUNCT'), ('id', 'NOUN'), ('3', 'NUM'), ('60', 'NUM'), ('Position', 'NOUN'), ('=', 'SYM'), ('initial', 'NOUN'), ('+', 'SYM'), ('rate*60', 'NOUN'), ('Prof.', 'NOUN'), ('Dixita', 'PROPN'), ('B', 'NOUN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Introduction', 'NOUN'), ('to', 'ADP'), ('Compiler', 'NOUN'), ('Design', 'NOUN'), ('‹#›', 'NOUN'), ('Phases', 'NOUN'), ('of', 'ADP'), ('compiler', 'NOUN'), ('Compiler', 'NOUN'), ('Analysis', 'NOUN'), ('phase', 'NOUN'), ('Synthesis', 'NOUN'), ('phase', 'NOUN'), ('Lexical', 'ADJ'), ('analysis', 'NOUN'), ('Syntax', 'NOUN'), ('analysis', 'NOUN'), ('Semantic', 'ADJ'), ('analysis', 'NOUN'), ('Intermediate', 'ADJ'), ('code', 'NOUN'), ('generation', 'NOUN'), ('Code', 'NOUN'), ('optimization', 'NOUN'), ('Code', 'NOUN'), ('generation', 'NOUN'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'ADJ'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Introduction', 'NOUN'), ('to', 'ADP'), ('Compiler', 'PROPN'), ('Design', 'PROPN'), ('‹#›', 'PUNCT'), ('Semantic', 'ADJ'), ('analysis', 'NOUN'), ('Semantic', 'ADJ'), ('analyzer', 'NOUN'), ('determines', 'VERB'), ('the', 'DET'), ('meaning', 'NOUN'), ('of', 'ADP'), ('a', 'DET'), ('source', 'NOUN'), ('string', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Syntax', 'NN'), ('analysis', 'NN'), ('id', 'NN'), ('1', 'CD'), ('=', 'SYM'), ('id', 'NN'), ('2', 'CD'), ('+', 'SYM'), ('id', 'NN'), ('3', 'CD'), ('*', 'NFP'), ('60', 'CD'), ('Lexical', 'JJ'), ('analysis', 'NN'), ('=', 'SYM'), ('id', 'NN'), ('1', 'CD'), ('+', 'SYM'), ('id', 'NN'), ('2', 'CD'), ('*', 'NFP'), ('id', 'NN'), ('3', 'CD'), ('60', 'CD'), ('Position', 'NN'), ('=', 'SYM'), ('initial', 'NN'), ('+', 'SYM'), ('rate*60', 'NN'), ('Prof.', 'NN'), ('Dixita', 'NNP'), ('B', 'NN'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('1', 'CD'), ('–', ':'), ('Introduction', 'NN'), ('to', 'IN'), ('Compiler', 'NN'), ('Design', 'NN'), ('‹#›', 'NN'), ('Phases', 'NNS'), ('of', 'IN'), ('compiler', 'NN'), ('Compiler', 'NN'), ('Analysis', 'NN'), ('phase', 'NN'), ('Synthesis', 'NN'), ('phase', 'NN'), ('Lexical', 'JJ'), ('analysis', 'NN'), ('Syntax', 'NN'), ('analysis', 'NN'), ('Semantic', 'JJ'), ('analysis', 'NN'), ('Intermediate', 'JJ'), ('code', 'NN'), ('generation', 'NN'), ('Code', 'NN'), ('optimization', 'NN'), ('Code', 'NN'), ('generation', 'NN'), ('Prof.', 'NNP'), ('Jay', 'NNP'), ('R', 'NNP'), ('Dhamsaniya', 'NNP'), ('#', 'NN'), ('3130006', 'CD'), ('(', '-LRB-'), ('PS', 'NNP'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('1', 'CD'), ('–', ':'), ('Basic', 'NNP'), ('Probability', 'NNP'), ('‹#›', 'NNP'), ('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('1', 'CD'), ('–', ':'), ('Introduction', 'NN'), ('to', 'IN'), ('Compiler', 'NNP'), ('Design', 'NNP'), ('‹#›', ','), ('Semantic', 'JJ'), ('analysis', 'NN'), ('Semantic', 'JJ'), ('analyzer', 'NN'), ('determines', 'VBZ'), ('the', 'DT'), ('meaning', 'NN'), ('of', 'IN'), ('a', 'DT'), ('source', 'NN'), ('string', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('Syntax', 'Syntax'), ('analysis', 'analysis'), ('id', 'id'), ('1', '1'), ('=', '='), ('id', 'id'), ('2', '2'), ('+', '+'), ('id', 'id'), ('3', '3'), ('*', '*'), ('60', '60'), ('Lexical', 'lexical'), ('analysis', 'analysis'), ('=', '='), ('id', 'id'), ('1', '1'), ('+', '+'), ('id', 'id'), ('2', '2'), ('*', '*'), ('id', 'id'), ('3', '3'), ('60', '60'), ('Position', 'position'), ('=', '='), ('initial', 'initial'), ('+', '+'), ('rate*60', 'rate*60'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'b'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '-'), ('Introduction', 'introduction'), ('to', 'to'), ('Compiler', 'compiler'), ('Design', 'design'), ('‹#›', '‹#›'), ('Phases', 'phase'), ('of', 'of'), ('compiler', 'compiler'), ('Compiler', 'compiler'), ('Analysis', 'analysis'), ('phase', 'phase'), ('Synthesis', 'synthesis'), ('phase', 'phase'), ('Lexical', 'lexical'), ('analysis', 'analysis'), ('Syntax', 'Syntax'), ('analysis', 'analysis'), ('Semantic', 'Semantic'), ('analysis', 'analysis'), ('Intermediate', 'intermediate'), ('code', 'code'), ('generation', 'generation'), ('Code', 'code'), ('optimization', 'optimization'), ('Code', 'code'), ('generation', 'generation'), ('Prof.', 'Prof.'), ('Jay', 'Jay'), ('R', 'R'), ('Dhamsaniya', 'Dhamsaniya'), ('#', '#'), ('3130006', '3130006'), ('(', '('), ('PS', 'ps'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '-'), ('Basic', 'basic'), ('Probability', 'Probability'), ('‹#›', '‹#›'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '-'), ('Introduction', 'introduction'), ('to', 'to'), ('Compiler', 'Compiler'), ('Design', 'Design'), ('‹#›', '‹#›'), ('Semantic', 'Semantic'), ('analysis', 'analysis'), ('Semantic', 'Semantic'), ('analyzer', 'analyzer'), ('determines', 'determine'), ('the', 'the'), ('meaning', 'meaning'), ('of', 'of'), ('a', 'a'), ('source', 'source'), ('string', 'string'), ('.', '.')] 

 Dependency tags are: 
>> [(('Syntax', 'analysis'), 'compound'), (('analysis', 'id'), 'compound'), (('id', 'root'), 'root'), (('1', '='), 'nsubj'), (('=', 'id'), 'appos'), (('id', '='), 'obj'), (('2', 'id'), 'nummod'), (('+', 'id'), 'cc'), (('id', 'id'), 'conj'), (('3', 'id'), 'nummod'), (('*', 'analysis'), 'punct'), (('60', 'analysis'), 'nummod'), (('Lexical', 'analysis'), 'amod'), (('analysis', 'id'), 'conj'), (('=', '='), 'conj'), (('id', '='), 'obj'), (('1', 'id'), 'nummod'), (('+', 'id'), 'cc'), (('id', 'id'), 'conj'), (('2', 'id'), 'nummod'), (('*', 'id'), 'punct'), (('id', 'id'), 'conj'), (('3', 'Position'), 'nummod'), (('60', 'Position'), 'nummod'), (('Position', '='), 'nsubj'), (('=', 'id'), 'conj'), (('initial', '='), 'obj'), (('+', 'rate*60'), 'cc'), (('rate*60', 'initial'), 'conj'), (('Prof.', 'initial'), 'conj'), (('Dixita', 'B'), 'compound'), (('B', 'Kagathara'), 'compound'), (('Kagathara', '#'), 'compound'), (('#', 'initial'), 'conj'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', 'Unit'), 'appos'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', '#'), 'appos'), (('1', 'Unit'), 'nummod'), (('–', 'Introduction'), 'punct'), (('Introduction', 'Unit'), 'appos'), (('to', 'Design'), 'case'), (('Compiler', 'Design'), 'compound'), (('Design', 'Phases'), 'nmod'), (('‹#›', 'Phases'), 'compound'), (('Phases', 'Introduction'), 'nmod'), (('of', 'phase'), 'case'), (('compiler', 'Analysis'), 'compound'), (('Compiler', 'Analysis'), 'compound'), (('Analysis', 'phase'), 'compound'), (('phase', 'phase'), 'compound'), (('Synthesis', 'phase'), 'compound'), (('phase', 'analysis'), 'compound'), (('Lexical', 'analysis'), 'amod'), (('analysis', 'analysis'), 'compound'), (('Syntax', 'analysis'), 'compound'), (('analysis', 'analysis'), 'compound'), (('Semantic', 'analysis'), 'amod'), (('analysis', 'Phases'), 'nmod'), (('Intermediate', 'generation'), 'amod'), (('code', 'generation'), 'compound'), (('generation', 'generation'), 'compound'), (('Code', 'generation'), 'compound'), (('optimization', 'generation'), 'compound'), (('Code', 'generation'), 'compound'), (('generation', 'analysis'), 'conj'), (('Prof.', 'generation'), 'compound'), (('Jay', 'Prof.'), 'flat'), (('R', 'Prof.'), 'flat'), (('Dhamsaniya', 'Prof.'), 'flat'), (('#', 'Prof.'), 'appos'), (('3130006', '#'), 'nummod'), (('(', 'PS'), 'punct'), (('PS', 'Unit'), 'appos'), ((')', 'PS'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', '#'), 'appos'), (('1', 'Unit'), 'nummod'), (('–', 'Unit'), 'punct'), (('Basic', 'Probability'), 'amod'), (('Probability', '‹#›'), 'compound'), (('‹#›', 'Unit'), 'compound'), (('Prof.', '‹#›'), 'flat'), (('Dixita', '‹#›'), 'flat'), (('B', 'Prof.'), 'flat'), (('Kagathara', 'Prof.'), 'flat'), (('#', 'Prof.'), 'appos'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', 'Unit'), 'appos'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', '#'), 'appos'), (('1', 'Unit'), 'nummod'), (('–', 'Introduction'), 'punct'), (('Introduction', 'Unit'), 'appos'), (('to', 'Design'), 'case'), (('Compiler', 'Design'), 'compound'), (('Design', 'Introduction'), 'nmod'), (('‹#›', 'Introduction'), 'punct'), (('Semantic', 'analysis'), 'amod'), (('analysis', 'analyzer'), 'compound'), (('Semantic', 'analyzer'), 'amod'), (('analyzer', 'determines'), 'nsubj'), (('determines', 'Introduction'), 'parataxis'), (('the', 'meaning'), 'det'), (('meaning', 'determines'), 'obj'), (('of', 'string'), 'case'), (('a', 'string'), 'det'), (('source', 'string'), 'compound'), (('string', 'meaning'), 'nmod'), (('.', 'determines'), 'punct')]

 Named Entities are: 
>> [('3', 'CARDINAL'), ('1', 'CARDINAL'), ('2', 'CARDINAL'), ('60', 'CARDINAL'), ('2170701', 'CARDINAL'), ('1', 'CARDINAL'), ('1', 'CARDINAL'), ('2170701', 'CARDINAL'), ('1', 'CARDINAL')]

========================== Sentence 18 ===========================

 It performs following operations:  matching of parenthesis in the expression. 

Tokens are: 
>> ['It', 'performs', 'following', 'operations', ':', 'matching', 'of', 'parenthesis', 'in', 'the', 'expression', '.'] 

 UPOS tags are: 
>> [('It', 'PRON'), ('performs', 'VERB'), ('following', 'VERB'), ('operations', 'NOUN'), (':', 'PUNCT'), ('matching', 'NOUN'), ('of', 'ADP'), ('parenthesis', 'NOUN'), ('in', 'ADP'), ('the', 'DET'), ('expression', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('It', 'PRP'), ('performs', 'VBZ'), ('following', 'VBG'), ('operations', 'NNS'), (':', ':'), ('matching', 'NN'), ('of', 'IN'), ('parenthesis', 'NN'), ('in', 'IN'), ('the', 'DT'), ('expression', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('It', 'it'), ('performs', 'perform'), ('following', 'follow'), ('operations', 'operation'), (':', ':'), ('matching', 'matching'), ('of', 'of'), ('parenthesis', 'parenthesis'), ('in', 'in'), ('the', 'the'), ('expression', 'expression'), ('.', '.')] 

 Dependency tags are: 
>> [(('It', 'performs'), 'nsubj'), (('performs', 'root'), 'root'), (('following', 'operations'), 'amod'), (('operations', 'performs'), 'obj'), ((':', 'matching'), 'punct'), (('matching', 'operations'), 'appos'), (('of', 'parenthesis'), 'case'), (('parenthesis', 'matching'), 'nmod'), (('in', 'expression'), 'case'), (('the', 'expression'), 'det'), (('expression', 'matching'), 'nmod'), (('.', 'performs'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 19 ===========================

 Matching of if..else statement. 

Tokens are: 
>> ['Matching', 'of', 'if', '..', 'else', 'statement', '.'] 

 UPOS tags are: 
>> [('Matching', 'VERB'), ('of', 'ADP'), ('if', 'SCONJ'), ('..', 'PUNCT'), ('else', 'ADJ'), ('statement', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Matching', 'VBG'), ('of', 'IN'), ('if', 'IN'), ('..', ','), ('else', 'JJ'), ('statement', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('Matching', 'match'), ('of', 'of'), ('if', 'if'), ('..', '..'), ('else', 'else'), ('statement', 'statement'), ('.', '.')] 

 Dependency tags are: 
>> [(('Matching', 'root'), 'root'), (('of', 'statement'), 'case'), (('if', 'statement'), 'mark'), (('..', 'statement'), 'punct'), (('else', 'statement'), 'amod'), (('statement', 'Matching'), 'advcl'), (('.', 'Matching'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 20 ===========================

 Performing arithmetic operation that are type compatible. 

Tokens are: 
>> ['Performing', 'arithmetic', 'operation', 'that', 'are', 'type', 'compatible', '.'] 

 UPOS tags are: 
>> [('Performing', 'VERB'), ('arithmetic', 'ADJ'), ('operation', 'NOUN'), ('that', 'PRON'), ('are', 'AUX'), ('type', 'NOUN'), ('compatible', 'ADJ'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Performing', 'VBG'), ('arithmetic', 'JJ'), ('operation', 'NN'), ('that', 'WDT'), ('are', 'VBP'), ('type', 'NN'), ('compatible', 'JJ'), ('.', '.')] 

 Lemmas are: 
>> [('Performing', 'perform'), ('arithmetic', 'arithmetic'), ('operation', 'operation'), ('that', 'that'), ('are', 'be'), ('type', 'type'), ('compatible', 'compatible'), ('.', '.')] 

 Dependency tags are: 
>> [(('Performing', 'root'), 'root'), (('arithmetic', 'operation'), 'amod'), (('operation', 'Performing'), 'obj'), (('that', 'compatible'), 'nsubj'), (('are', 'compatible'), 'cop'), (('type', 'compatible'), 'obl:npmod'), (('compatible', 'operation'), 'acl:relcl'), (('.', 'Performing'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 21 ===========================

 Checking the scope of operation. 

Tokens are: 
>> ['Checking', 'the', 'scope', 'of', 'operation', '.'] 

 UPOS tags are: 
>> [('Checking', 'VERB'), ('the', 'DET'), ('scope', 'NOUN'), ('of', 'ADP'), ('operation', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Checking', 'VBG'), ('the', 'DT'), ('scope', 'NN'), ('of', 'IN'), ('operation', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('Checking', 'check'), ('the', 'the'), ('scope', 'scope'), ('of', 'of'), ('operation', 'operation'), ('.', '.')] 

 Dependency tags are: 
>> [(('Checking', 'root'), 'root'), (('the', 'scope'), 'det'), (('scope', 'Checking'), 'obj'), (('of', 'operation'), 'case'), (('operation', 'scope'), 'nmod'), (('.', 'Checking'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 22 ===========================

 = id1 + id2 * id3 60 Semantic analysis = id1 + id2 * id3 inttoreal 60  int to real *Note: Consider id1, id2 and id3 are real    Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1 – Introduction to Compiler Design ‹#›  Phases of compiler Compiler Analysis phase Synthesis phase Lexical analysis  Syntax analysis  Semantic analysis    Intermediate code generation Code optimization  Code generation     Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1– Introduction to Compiler Design ‹#›  Intermediate code generator Two important properties of intermediate code : 

Tokens are: 
>> ['=', 'id', '1', '+', 'id', '2', '*', 'id3', '60', 'Semantic', 'analysis', '=', 'id', '1', '+', 'id', '2', '*', 'id3', 'inttoreal', '60', 'int', 'to', 'real', '*', 'Note', ':', 'Consider', 'id1', ',', 'id', '2', 'and', 'id', '3', 'are', 'real', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '1', '–', 'Introduction', 'to', 'Compiler', 'Design', '‹#›', 'Phases', 'of', 'compiler', 'Compiler', 'Analysis', 'phase', 'Synthesis', 'phase', 'Lexical', 'analysis', 'Syntax', 'analysis', 'Semantic', 'analysis', 'Intermediate', 'code', 'generation', 'Code', 'optimization', 'Code', 'generation', 'Prof.', 'Jay', 'R', 'Dhamsaniya', '#', '3130006', '(', 'PS', ')', '\uf077', 'Unit', '1', '–', 'Basic', 'Probability', '‹#›', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '1', '–', 'Introduction', 'to', 'Compiler', 'Design', '‹#›', 'Intermediate', 'code', 'generator', 'Two', 'important', 'properties', 'of', 'intermediate', 'code', ':'] 

 UPOS tags are: 
>> [('=', 'PUNCT'), ('id', 'NOUN'), ('1', 'NUM'), ('+', 'SYM'), ('id', 'NOUN'), ('2', 'NUM'), ('*', 'PUNCT'), ('id3', 'NOUN'), ('60', 'NUM'), ('Semantic', 'ADJ'), ('analysis', 'NOUN'), ('=', 'PUNCT'), ('id', 'NOUN'), ('1', 'NUM'), ('+', 'SYM'), ('id', 'NOUN'), ('2', 'NUM'), ('*', 'PUNCT'), ('id3', 'NOUN'), ('inttoreal', 'NOUN'), ('60', 'NUM'), ('int', 'NOUN'), ('to', 'ADP'), ('real', 'ADJ'), ('*', 'PUNCT'), ('Note', 'NOUN'), (':', 'PUNCT'), ('Consider', 'VERB'), ('id1', 'NOUN'), (',', 'PUNCT'), ('id', 'NOUN'), ('2', 'NUM'), ('and', 'CCONJ'), ('id', 'NOUN'), ('3', 'NUM'), ('are', 'AUX'), ('real', 'ADJ'), ('Prof.', 'NOUN'), ('Dixita', 'PROPN'), ('B', 'NOUN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Introduction', 'NOUN'), ('to', 'ADP'), ('Compiler', 'NOUN'), ('Design', 'NOUN'), ('‹#›', 'NOUN'), ('Phases', 'NOUN'), ('of', 'ADP'), ('compiler', 'NOUN'), ('Compiler', 'NOUN'), ('Analysis', 'NOUN'), ('phase', 'NOUN'), ('Synthesis', 'NOUN'), ('phase', 'NOUN'), ('Lexical', 'ADJ'), ('analysis', 'NOUN'), ('Syntax', 'NOUN'), ('analysis', 'NOUN'), ('Semantic', 'ADJ'), ('analysis', 'NOUN'), ('Intermediate', 'ADJ'), ('code', 'NOUN'), ('generation', 'NOUN'), ('Code', 'NOUN'), ('optimization', 'NOUN'), ('Code', 'NOUN'), ('generation', 'NOUN'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'ADJ'), ('Probability', 'NOUN'), ('‹#›', 'NOUN'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Introduction', 'NOUN'), ('to', 'ADP'), ('Compiler', 'NOUN'), ('Design', 'NOUN'), ('‹#›', 'NOUN'), ('Intermediate', 'ADJ'), ('code', 'NOUN'), ('generator', 'NOUN'), ('Two', 'NUM'), ('important', 'ADJ'), ('properties', 'NOUN'), ('of', 'ADP'), ('intermediate', 'ADJ'), ('code', 'NOUN'), (':', 'PUNCT')] 

 XPOS tags are: 
>> [('=', 'NFP'), ('id', 'NN'), ('1', 'CD'), ('+', 'SYM'), ('id', 'NN'), ('2', 'CD'), ('*', 'NFP'), ('id3', 'NN'), ('60', 'CD'), ('Semantic', 'JJ'), ('analysis', 'NN'), ('=', ','), ('id', 'NN'), ('1', 'CD'), ('+', 'SYM'), ('id', 'NN'), ('2', 'CD'), ('*', 'NFP'), ('id3', 'NN'), ('inttoreal', 'NN'), ('60', 'CD'), ('int', 'NN'), ('to', 'IN'), ('real', 'JJ'), ('*', 'NFP'), ('Note', 'NN'), (':', ':'), ('Consider', 'VB'), ('id1', 'NN'), (',', ','), ('id', 'NN'), ('2', 'CD'), ('and', 'CC'), ('id', 'NN'), ('3', 'CD'), ('are', 'VBP'), ('real', 'JJ'), ('Prof.', 'NN'), ('Dixita', 'NNP'), ('B', 'NN'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('1', 'CD'), ('–', ':'), ('Introduction', 'NN'), ('to', 'IN'), ('Compiler', 'NN'), ('Design', 'NN'), ('‹#›', 'NN'), ('Phases', 'NNS'), ('of', 'IN'), ('compiler', 'NN'), ('Compiler', 'NN'), ('Analysis', 'NN'), ('phase', 'NN'), ('Synthesis', 'NN'), ('phase', 'NN'), ('Lexical', 'JJ'), ('analysis', 'NN'), ('Syntax', 'NN'), ('analysis', 'NN'), ('Semantic', 'JJ'), ('analysis', 'NN'), ('Intermediate', 'JJ'), ('code', 'NN'), ('generation', 'NN'), ('Code', 'NN'), ('optimization', 'NN'), ('Code', 'NN'), ('generation', 'NN'), ('Prof.', 'NNP'), ('Jay', 'NNP'), ('R', 'NNP'), ('Dhamsaniya', 'NNP'), ('#', 'NN'), ('3130006', 'CD'), ('(', '-LRB-'), ('PS', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('1', 'CD'), ('–', ':'), ('Basic', 'JJ'), ('Probability', 'NN'), ('‹#›', 'NN'), ('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('1', 'CD'), ('–', ','), ('Introduction', 'NN'), ('to', 'IN'), ('Compiler', 'NN'), ('Design', 'NN'), ('‹#›', 'NN'), ('Intermediate', 'JJ'), ('code', 'NN'), ('generator', 'NN'), ('Two', 'CD'), ('important', 'JJ'), ('properties', 'NNS'), ('of', 'IN'), ('intermediate', 'JJ'), ('code', 'NN'), (':', ':')] 

 Lemmas are: 
>> [('=', '='), ('id', 'id'), ('1', '1'), ('+', '+'), ('id', 'id'), ('2', '2'), ('*', '*'), ('id3', 'id3'), ('60', '60'), ('Semantic', 'Semantic'), ('analysis', 'analysis'), ('=', '='), ('id', 'id'), ('1', '1'), ('+', '+'), ('id', 'id'), ('2', '2'), ('*', '*'), ('id3', 'id3'), ('inttoreal', 'inttoreal'), ('60', '60'), ('int', 'int'), ('to', 'to'), ('real', 'real'), ('*', '*'), ('Note', 'note'), (':', ':'), ('Consider', 'consider'), ('id1', 'id1'), (',', ','), ('id', 'id'), ('2', '2'), ('and', 'and'), ('id', 'id'), ('3', '3'), ('are', 'be'), ('real', 'real'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'b'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '-'), ('Introduction', 'introduction'), ('to', 'to'), ('Compiler', 'compiler'), ('Design', 'design'), ('‹#›', '‹#›'), ('Phases', 'phase'), ('of', 'of'), ('compiler', 'compiler'), ('Compiler', 'compiler'), ('Analysis', 'analysis'), ('phase', 'phase'), ('Synthesis', 'synthesis'), ('phase', 'phase'), ('Lexical', 'lexical'), ('analysis', 'analysis'), ('Syntax', 'Syntax'), ('analysis', 'analysis'), ('Semantic', 'Semantic'), ('analysis', 'analysis'), ('Intermediate', 'intermediate'), ('code', 'code'), ('generation', 'generation'), ('Code', 'code'), ('optimization', 'optimization'), ('Code', 'code'), ('generation', 'generation'), ('Prof.', 'Prof.'), ('Jay', 'Jay'), ('R', 'R'), ('Dhamsaniya', 'Dhamsaniya'), ('#', '#'), ('3130006', '3130006'), ('(', '('), ('PS', 'ps'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '-'), ('Basic', 'basic'), ('Probability', 'probability'), ('‹#›', '‹#›'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '-'), ('Introduction', 'introduction'), ('to', 'to'), ('Compiler', 'compiler'), ('Design', 'design'), ('‹#›', '‹#›'), ('Intermediate', 'intermediate'), ('code', 'code'), ('generator', 'generator'), ('Two', 'two'), ('important', 'important'), ('properties', 'property'), ('of', 'of'), ('intermediate', 'intermediate'), ('code', 'code'), (':', ':')] 

 Dependency tags are: 
>> [(('=', 'id'), 'punct'), (('id', 'root'), 'root'), (('1', 'id'), 'nummod'), (('+', 'id'), 'cc'), (('id', 'id'), 'conj'), (('2', 'id'), 'nummod'), (('*', 'id3'), 'punct'), (('id3', 'id'), 'appos'), (('60', 'analysis'), 'nummod'), (('Semantic', 'analysis'), 'amod'), (('analysis', 'id'), 'conj'), (('=', 'id'), 'punct'), (('id', 'id'), 'parataxis'), (('1', 'id'), 'nummod'), (('+', 'id'), 'cc'), (('id', 'id'), 'conj'), (('2', 'id'), 'nummod'), (('*', 'inttoreal'), 'punct'), (('id3', 'inttoreal'), 'compound'), (('inttoreal', 'id'), 'conj'), (('60', 'int'), 'nummod'), (('int', 'inttoreal'), 'appos'), (('to', 'Note'), 'case'), (('real', 'Note'), 'amod'), (('*', 'Note'), 'punct'), (('Note', 'inttoreal'), 'nmod'), ((':', 'id'), 'punct'), (('Consider', 'id'), 'parataxis'), (('id1', 'Consider'), 'obj'), ((',', 'id'), 'punct'), (('id', 'id1'), 'conj'), (('2', 'id'), 'nummod'), (('and', 'id'), 'cc'), (('id', 'id1'), 'conj'), (('3', 'id'), 'nummod'), (('are', 'Prof.'), 'cop'), (('real', 'Prof.'), 'amod'), (('Prof.', '#'), 'compound'), (('Dixita', '#'), 'compound'), (('B', '#'), 'compound'), (('Kagathara', '#'), 'compound'), (('#', 'id'), 'conj'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', 'Unit'), 'appos'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', '#'), 'appos'), (('1', 'Unit'), 'nummod'), (('–', 'Introduction'), 'punct'), (('Introduction', 'Unit'), 'appos'), (('to', 'Phases'), 'case'), (('Compiler', 'Design'), 'compound'), (('Design', 'Phases'), 'nmod'), (('‹#›', 'Phases'), 'compound'), (('Phases', 'Introduction'), 'nmod'), (('of', 'phase'), 'case'), (('compiler', 'Analysis'), 'compound'), (('Compiler', 'Analysis'), 'compound'), (('Analysis', 'phase'), 'compound'), (('phase', 'phase'), 'compound'), (('Synthesis', 'phase'), 'compound'), (('phase', 'analysis'), 'compound'), (('Lexical', 'analysis'), 'amod'), (('analysis', 'analysis'), 'compound'), (('Syntax', 'analysis'), 'compound'), (('analysis', 'analysis'), 'compound'), (('Semantic', 'analysis'), 'amod'), (('analysis', 'Phases'), 'nmod'), (('Intermediate', 'generation'), 'amod'), (('code', 'generation'), 'compound'), (('generation', 'generation'), 'compound'), (('Code', 'generation'), 'compound'), (('optimization', 'generation'), 'compound'), (('Code', 'generation'), 'compound'), (('generation', 'analysis'), 'conj'), (('Prof.', 'generation'), 'compound'), (('Jay', 'R'), 'compound'), (('R', '#'), 'compound'), (('Dhamsaniya', '#'), 'compound'), (('#', 'generation'), 'appos'), (('3130006', '#'), 'nummod'), (('(', 'PS'), 'punct'), (('PS', 'Unit'), 'appos'), ((')', 'PS'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', '#'), 'appos'), (('1', 'Unit'), 'nummod'), (('–', 'Probability'), 'punct'), (('Basic', 'Probability'), 'amod'), (('Probability', 'Unit'), 'compound'), (('‹#›', 'Probability'), 'compound'), (('Prof.', 'Probability'), 'compound'), (('Dixita', 'Kagathara'), 'compound'), (('B', 'Kagathara'), 'compound'), (('Kagathara', '#'), 'compound'), (('#', 'Prof.'), 'appos'), (('2170701', 'CD'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', '#'), 'appos'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', '#'), 'appos'), (('1', 'Unit'), 'nummod'), (('–', 'Introduction'), 'punct'), (('Introduction', 'Unit'), 'appos'), (('to', 'Design'), 'case'), (('Compiler', 'Design'), 'compound'), (('Design', 'Introduction'), 'nmod'), (('‹#›', 'generator'), 'compound'), (('Intermediate', 'generator'), 'amod'), (('code', 'generator'), 'compound'), (('generator', 'properties'), 'compound'), (('Two', 'properties'), 'nummod'), (('important', 'properties'), 'amod'), (('properties', 'Introduction'), 'appos'), (('of', 'code'), 'case'), (('intermediate', 'code'), 'amod'), (('code', 'properties'), 'nmod'), ((':', 'id'), 'punct')]

 Named Entities are: 
>> [('1', 'CARDINAL'), ('60', 'CARDINAL'), ('2', 'CARDINAL'), ('3', 'CARDINAL'), ('2170701', 'CARDINAL'), ('1', 'CARDINAL'), ('1', 'CARDINAL'), ('2170701', 'CARDINAL'), ('1', 'CARDINAL'), ('Two', 'CARDINAL')]

========================== Sentence 23 ===========================

 It should be easy to produce. 

Tokens are: 
>> ['It', 'should', 'be', 'easy', 'to', 'produce', '.'] 

 UPOS tags are: 
>> [('It', 'PRON'), ('should', 'AUX'), ('be', 'AUX'), ('easy', 'ADJ'), ('to', 'PART'), ('produce', 'VERB'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('It', 'PRP'), ('should', 'MD'), ('be', 'VB'), ('easy', 'JJ'), ('to', 'TO'), ('produce', 'VB'), ('.', '.')] 

 Lemmas are: 
>> [('It', 'it'), ('should', 'should'), ('be', 'be'), ('easy', 'easy'), ('to', 'to'), ('produce', 'produce'), ('.', '.')] 

 Dependency tags are: 
>> [(('It', 'easy'), 'expl'), (('should', 'easy'), 'aux'), (('be', 'easy'), 'cop'), (('easy', 'root'), 'root'), (('to', 'produce'), 'mark'), (('produce', 'easy'), 'csubj'), (('.', 'easy'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 24 ===========================

 Easy to translate into target program. 

Tokens are: 
>> ['Easy', 'to', 'translate', 'into', 'target', 'program', '.'] 

 UPOS tags are: 
>> [('Easy', 'ADJ'), ('to', 'PART'), ('translate', 'VERB'), ('into', 'ADP'), ('target', 'NOUN'), ('program', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Easy', 'JJ'), ('to', 'TO'), ('translate', 'VB'), ('into', 'IN'), ('target', 'NN'), ('program', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('Easy', 'easy'), ('to', 'to'), ('translate', 'translate'), ('into', 'into'), ('target', 'target'), ('program', 'program'), ('.', '.')] 

 Dependency tags are: 
>> [(('Easy', 'root'), 'root'), (('to', 'translate'), 'mark'), (('translate', 'Easy'), 'csubj'), (('into', 'program'), 'case'), (('target', 'program'), 'compound'), (('program', 'translate'), 'obl'), (('.', 'Easy'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 25 ===========================

 Intermediate form can be represented using “three address code”. 

Tokens are: 
>> ['Intermediate', 'form', 'can', 'be', 'represented', 'using', '“', 'three', 'address', 'code', '”', '.'] 

 UPOS tags are: 
>> [('Intermediate', 'ADJ'), ('form', 'NOUN'), ('can', 'AUX'), ('be', 'AUX'), ('represented', 'VERB'), ('using', 'VERB'), ('“', 'PUNCT'), ('three', 'NUM'), ('address', 'NOUN'), ('code', 'NOUN'), ('”', 'PUNCT'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Intermediate', 'JJ'), ('form', 'NN'), ('can', 'MD'), ('be', 'VB'), ('represented', 'VBN'), ('using', 'VBG'), ('“', '``'), ('three', 'CD'), ('address', 'NN'), ('code', 'NN'), ('”', "''"), ('.', '.')] 

 Lemmas are: 
>> [('Intermediate', 'intermediate'), ('form', 'form'), ('can', 'can'), ('be', 'be'), ('represented', 'represent'), ('using', 'use'), ('“', "''"), ('three', 'three'), ('address', 'address'), ('code', 'code'), ('”', "''"), ('.', '.')] 

 Dependency tags are: 
>> [(('Intermediate', 'form'), 'amod'), (('form', 'represented'), 'nsubj:pass'), (('can', 'represented'), 'aux'), (('be', 'represented'), 'aux:pass'), (('represented', 'root'), 'root'), (('using', 'represented'), 'advcl'), (('“', 'code'), 'punct'), (('three', 'code'), 'nummod'), (('address', 'code'), 'compound'), (('code', 'using'), 'obj'), (('”', 'code'), 'punct'), (('.', 'represented'), 'punct')]

 Named Entities are: 
>> [('three', 'CARDINAL')]

========================== Sentence 26 ===========================

 Three address code consist of a sequence of instruction, each of which has at most three operands. 

Tokens are: 
>> ['Three', 'address', 'code', 'consist', 'of', 'a', 'sequence', 'of', 'instruction', ',', 'each', 'of', 'which', 'has', 'at', 'most', 'three', 'operands', '.'] 

 UPOS tags are: 
>> [('Three', 'NUM'), ('address', 'NOUN'), ('code', 'NOUN'), ('consist', 'VERB'), ('of', 'ADP'), ('a', 'DET'), ('sequence', 'NOUN'), ('of', 'ADP'), ('instruction', 'NOUN'), (',', 'PUNCT'), ('each', 'DET'), ('of', 'ADP'), ('which', 'PRON'), ('has', 'VERB'), ('at', 'ADP'), ('most', 'ADJ'), ('three', 'NUM'), ('operands', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Three', 'CD'), ('address', 'NN'), ('code', 'NN'), ('consist', 'VBP'), ('of', 'IN'), ('a', 'DT'), ('sequence', 'NN'), ('of', 'IN'), ('instruction', 'NN'), (',', ','), ('each', 'DT'), ('of', 'IN'), ('which', 'WDT'), ('has', 'VBZ'), ('at', 'IN'), ('most', 'JJS'), ('three', 'CD'), ('operands', 'NNS'), ('.', '.')] 

 Lemmas are: 
>> [('Three', 'three'), ('address', 'address'), ('code', 'code'), ('consist', 'consist'), ('of', 'of'), ('a', 'a'), ('sequence', 'sequence'), ('of', 'of'), ('instruction', 'instruction'), (',', ','), ('each', 'each'), ('of', 'of'), ('which', 'which'), ('has', 'have'), ('at', 'at'), ('most', 'most'), ('three', 'three'), ('operands', 'operand'), ('.', '.')] 

 Dependency tags are: 
>> [(('Three', 'code'), 'nummod'), (('address', 'code'), 'compound'), (('code', 'consist'), 'nsubj'), (('consist', 'root'), 'root'), (('of', 'sequence'), 'case'), (('a', 'sequence'), 'det'), (('sequence', 'consist'), 'obl'), (('of', 'instruction'), 'case'), (('instruction', 'sequence'), 'nmod'), ((',', 'has'), 'punct'), (('each', 'has'), 'nsubj'), (('of', 'which'), 'case'), (('which', 'each'), 'nmod'), (('has', 'sequence'), 'acl:relcl'), (('at', 'operands'), 'case'), (('most', 'operands'), 'amod'), (('three', 'operands'), 'nummod'), (('operands', 'has'), 'obl'), (('.', 'consist'), 'punct')]

 Named Entities are: 
>> [('Three', 'CARDINAL'), ('three', 'CARDINAL')]

========================== Sentence 27 ===========================

 = id1 + id2 * id3 inttoreal 60 Intermediate code  		t1= int to real(60) 		t2= id3 * t1 		t3= t2 + id2 		id1= t3 t1   t2   t3     Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1 – Introduction to Compiler Design ‹#›  Phases of compiler Compiler Analysis phase Synthesis phase Lexical analysis  Syntax analysis  Semantic analysis    Intermediate code generation Code optimization  Code generation     Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1– Introduction to Compiler Design ‹#›  Code optimization 

Tokens are: 
>> ['=', 'id', '1', '+', 'id', '2', '*', 'id3', 'inttoreal', '60', 'Intermediate', 'code', 't1', '=', 'int', 'to', 'real', '(', '60', ')', 't2', '=', 'id', '3', '*', 't1', 't3', '=', 't2', '+', 'id2', 'id', '1', '=', 't3', 't1', 't2', 't3', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '1', '–', 'Introduction', 'to', 'Compiler', 'Design', '‹#›', 'Phases', 'of', 'compiler', 'Compiler', 'Analysis', 'phase', 'Synthesis', 'phase', 'Lexical', 'analysis', 'Syntax', 'analysis', 'Semantic', 'analysis', 'Intermediate', 'code', 'generation', 'Code', 'optimization', 'Code', 'generation', 'Prof.', 'Jay', 'R', 'Dhamsaniya', '#', '3130006', '(', 'PS', ')', '\uf077', 'Unit', '1', '–', 'Basic', 'Probability', '‹#›', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '1', '–', 'Introduction', 'to', 'Compiler', 'Design', '‹#›', 'Code', 'optimization'] 

 UPOS tags are: 
>> [('=', 'PUNCT'), ('id', 'NOUN'), ('1', 'NUM'), ('+', 'SYM'), ('id', 'NOUN'), ('2', 'NUM'), ('*', 'PUNCT'), ('id3', 'NOUN'), ('inttoreal', 'NOUN'), ('60', 'NUM'), ('Intermediate', 'ADJ'), ('code', 'NOUN'), ('t1', 'NOUN'), ('=', 'SYM'), ('int', 'NOUN'), ('to', 'ADP'), ('real', 'ADJ'), ('(', 'PUNCT'), ('60', 'NUM'), (')', 'PUNCT'), ('t2', 'NOUN'), ('=', 'PUNCT'), ('id', 'NOUN'), ('3', 'NUM'), ('*', 'PUNCT'), ('t1', 'NOUN'), ('t3', 'NOUN'), ('=', 'SYM'), ('t2', 'NOUN'), ('+', 'SYM'), ('id2', 'NOUN'), ('id', 'NOUN'), ('1', 'NUM'), ('=', 'SYM'), ('t3', 'NOUN'), ('t1', 'NOUN'), ('t2', 'NOUN'), ('t3', 'NOUN'), ('Prof.', 'NOUN'), ('Dixita', 'PROPN'), ('B', 'NOUN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Introduction', 'NOUN'), ('to', 'ADP'), ('Compiler', 'NOUN'), ('Design', 'NOUN'), ('‹#›', 'NOUN'), ('Phases', 'NOUN'), ('of', 'ADP'), ('compiler', 'NOUN'), ('Compiler', 'NOUN'), ('Analysis', 'NOUN'), ('phase', 'NOUN'), ('Synthesis', 'NOUN'), ('phase', 'NOUN'), ('Lexical', 'ADJ'), ('analysis', 'NOUN'), ('Syntax', 'NOUN'), ('analysis', 'NOUN'), ('Semantic', 'ADJ'), ('analysis', 'NOUN'), ('Intermediate', 'ADJ'), ('code', 'NOUN'), ('generation', 'NOUN'), ('Code', 'NOUN'), ('optimization', 'NOUN'), ('Code', 'NOUN'), ('generation', 'NOUN'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'ADJ'), ('Probability', 'NOUN'), ('‹#›', 'NOUN'), ('Prof.', 'NOUN'), ('Dixita', 'PROPN'), ('B', 'NOUN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Introduction', 'NOUN'), ('to', 'ADP'), ('Compiler', 'NOUN'), ('Design', 'NOUN'), ('‹#›', 'NOUN'), ('Code', 'NOUN'), ('optimization', 'NOUN')] 

 XPOS tags are: 
>> [('=', 'NFP'), ('id', 'NN'), ('1', 'CD'), ('+', 'SYM'), ('id', 'NN'), ('2', 'CD'), ('*', 'NFP'), ('id3', 'NN'), ('inttoreal', 'NN'), ('60', 'CD'), ('Intermediate', 'JJ'), ('code', 'NN'), ('t1', 'NN'), ('=', 'SYM'), ('int', 'NN'), ('to', 'IN'), ('real', 'JJ'), ('(', '-LRB-'), ('60', 'CD'), (')', '-RRB-'), ('t2', 'NN'), ('=', ','), ('id', 'NN'), ('3', 'CD'), ('*', 'NFP'), ('t1', 'NN'), ('t3', 'NN'), ('=', 'SYM'), ('t2', 'NN'), ('+', 'SYM'), ('id2', 'NN'), ('id', 'NN'), ('1', 'CD'), ('=', 'SYM'), ('t3', 'NN'), ('t1', 'NN'), ('t2', 'NN'), ('t3', 'NN'), ('Prof.', 'NN'), ('Dixita', 'NNP'), ('B', 'NN'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('1', 'CD'), ('–', ','), ('Introduction', 'NN'), ('to', 'IN'), ('Compiler', 'NN'), ('Design', 'NN'), ('‹#›', 'NN'), ('Phases', 'NNS'), ('of', 'IN'), ('compiler', 'NN'), ('Compiler', 'NN'), ('Analysis', 'NN'), ('phase', 'NN'), ('Synthesis', 'NN'), ('phase', 'NN'), ('Lexical', 'JJ'), ('analysis', 'NN'), ('Syntax', 'NN'), ('analysis', 'NN'), ('Semantic', 'JJ'), ('analysis', 'NN'), ('Intermediate', 'JJ'), ('code', 'NN'), ('generation', 'NN'), ('Code', 'NN'), ('optimization', 'NN'), ('Code', 'NN'), ('generation', 'NN'), ('Prof.', 'NNP'), ('Jay', 'NNP'), ('R', 'NNP'), ('Dhamsaniya', 'NNP'), ('#', 'NN'), ('3130006', 'CD'), ('(', '-LRB-'), ('PS', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('1', 'CD'), ('–', ','), ('Basic', 'JJ'), ('Probability', 'NN'), ('‹#›', 'NN'), ('Prof.', 'NN'), ('Dixita', 'NNP'), ('B', 'NN'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('1', 'CD'), ('–', ','), ('Introduction', 'NN'), ('to', 'IN'), ('Compiler', 'NN'), ('Design', 'NN'), ('‹#›', 'NN'), ('Code', 'NN'), ('optimization', 'NN')] 

 Lemmas are: 
>> [('=', '='), ('id', 'id'), ('1', '1'), ('+', '+'), ('id', 'id'), ('2', '2'), ('*', '*'), ('id3', 'id3'), ('inttoreal', 'inttoreal'), ('60', '60'), ('Intermediate', 'intermediate'), ('code', 'code'), ('t1', 't1'), ('=', '='), ('int', 'int'), ('to', 'to'), ('real', 'real'), ('(', '('), ('60', '60'), (')', ')'), ('t2', 't2'), ('=', '='), ('id', 'id'), ('3', '3'), ('*', '*'), ('t1', 't1'), ('t3', 't3'), ('=', '='), ('t2', 't2'), ('+', '+'), ('id2', 'id2'), ('id', 'id'), ('1', '1'), ('=', '='), ('t3', 't3'), ('t1', 't1'), ('t2', 't2'), ('t3', 't3'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'b'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '-'), ('Introduction', 'introduction'), ('to', 'to'), ('Compiler', 'compiler'), ('Design', 'design'), ('‹#›', '‹#›'), ('Phases', 'phase'), ('of', 'of'), ('compiler', 'compiler'), ('Compiler', 'compiler'), ('Analysis', 'analysis'), ('phase', 'phase'), ('Synthesis', 'synthesis'), ('phase', 'phase'), ('Lexical', 'lexical'), ('analysis', 'analysis'), ('Syntax', 'Syntax'), ('analysis', 'analysis'), ('Semantic', 'Semantic'), ('analysis', 'analysis'), ('Intermediate', 'intermediate'), ('code', 'code'), ('generation', 'generation'), ('Code', 'code'), ('optimization', 'optimization'), ('Code', 'code'), ('generation', 'generation'), ('Prof.', 'Prof.'), ('Jay', 'Jay'), ('R', 'R'), ('Dhamsaniya', 'Dhamsaniya'), ('#', '#'), ('3130006', '3130006'), ('(', '('), ('PS', 'ps'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '-'), ('Basic', 'basic'), ('Probability', 'probability'), ('‹#›', '‹#›'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'b'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '-'), ('Introduction', 'introduction'), ('to', 'to'), ('Compiler', 'compiler'), ('Design', 'design'), ('‹#›', '‹#›'), ('Code', 'code'), ('optimization', 'optimization')] 

 Dependency tags are: 
>> [(('=', 'id'), 'punct'), (('id', 'root'), 'root'), (('1', 'id'), 'nummod'), (('+', 'id'), 'cc'), (('id', 'id'), 'conj'), (('2', 'id'), 'nummod'), (('*', 'id'), 'punct'), (('id3', 'inttoreal'), 'compound'), (('inttoreal', 'id'), 'conj'), (('60', 't1'), 'nummod'), (('Intermediate', 't1'), 'amod'), (('code', 't1'), 'compound'), (('t1', '='), 'nsubj'), (('=', 'id'), 'parataxis'), (('int', '='), 'obj'), (('to', 't2'), 'case'), (('real', 't2'), 'amod'), (('(', 't2'), 'punct'), (('60', 't2'), 'nummod'), ((')', 't2'), 'punct'), (('t2', '='), 'obl'), (('=', 'id'), 'punct'), (('id', 'id'), 'parataxis'), (('3', 'id'), 'nummod'), (('*', 't3'), 'punct'), (('t1', 't3'), 'compound'), (('t3', '='), 'nsubj'), (('=', 'id'), 'parataxis'), (('t2', '='), 'obj'), (('+', 'id'), 'cc'), (('id2', 'id'), 'compound'), (('id', '='), 'obj'), (('1', 'id'), 'nummod'), (('=', 'id'), 'parataxis'), (('t3', '='), 'obj'), (('t1', 't3'), 'compound'), (('t2', 't3'), 'compound'), (('t3', '='), 'obj'), (('Prof.', 't3'), 'compound'), (('Dixita', 'B'), 'compound'), (('B', '#'), 'compound'), (('Kagathara', '#'), 'compound'), (('#', 't3'), 'appos'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', 'Unit'), 'appos'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', '#'), 'appos'), (('1', 'Unit'), 'nummod'), (('–', 'Introduction'), 'punct'), (('Introduction', 'id'), 'conj'), (('to', 'Design'), 'case'), (('Compiler', 'Design'), 'compound'), (('Design', 'Phases'), 'nmod'), (('‹#›', 'Phases'), 'compound'), (('Phases', 'Introduction'), 'nmod'), (('of', 'phase'), 'case'), (('compiler', 'Analysis'), 'compound'), (('Compiler', 'Analysis'), 'compound'), (('Analysis', 'phase'), 'compound'), (('phase', 'phase'), 'compound'), (('Synthesis', 'analysis'), 'compound'), (('phase', 'analysis'), 'compound'), (('Lexical', 'analysis'), 'amod'), (('analysis', 'analysis'), 'compound'), (('Syntax', 'analysis'), 'compound'), (('analysis', 'analysis'), 'compound'), (('Semantic', 'analysis'), 'amod'), (('analysis', 'Phases'), 'nmod'), (('Intermediate', 'generation'), 'amod'), (('code', 'generation'), 'compound'), (('generation', 'generation'), 'compound'), (('Code', 'generation'), 'compound'), (('optimization', 'generation'), 'compound'), (('Code', 'generation'), 'compound'), (('generation', 'analysis'), 'conj'), (('Prof.', 'generation'), 'compound'), (('Jay', 'Prof.'), 'flat'), (('R', '#'), 'compound'), (('Dhamsaniya', '#'), 'compound'), (('#', 'generation'), 'appos'), (('3130006', '#'), 'nummod'), (('(', 'PS'), 'punct'), (('PS', 'Unit'), 'appos'), ((')', 'PS'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', '#'), 'appos'), (('1', 'Unit'), 'nummod'), (('–', 'Unit'), 'punct'), (('Basic', 'Probability'), 'amod'), (('Probability', 'Unit'), 'appos'), (('‹#›', 'Probability'), 'appos'), (('Prof.', 'Probability'), 'appos'), (('Dixita', 'B'), 'compound'), (('B', 'Kagathara'), 'compound'), (('Kagathara', '#'), 'appos'), (('#', 'Prof.'), 'appos'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', '#'), 'appos'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', '#'), 'appos'), (('1', 'Unit'), 'nummod'), (('–', 'Introduction'), 'punct'), (('Introduction', 'Unit'), 'appos'), (('to', 'optimization'), 'case'), (('Compiler', 'Design'), 'compound'), (('Design', 'Introduction'), 'nmod'), (('‹#›', 'optimization'), 'compound'), (('Code', 'optimization'), 'compound'), (('optimization', 'Introduction'), 'nmod')]

 Named Entities are: 
>> [('60', 'CARDINAL'), ('1', 'CARDINAL'), ('1', 'CARDINAL'), ('2170701', 'CARDINAL'), ('1', 'CARDINAL')]

========================== Sentence 28 ===========================

 It improves the intermediate code. 

Tokens are: 
>> ['It', 'improves', 'the', 'intermediate', 'code', '.'] 

 UPOS tags are: 
>> [('It', 'PRON'), ('improves', 'VERB'), ('the', 'DET'), ('intermediate', 'ADJ'), ('code', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('It', 'PRP'), ('improves', 'VBZ'), ('the', 'DT'), ('intermediate', 'JJ'), ('code', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('It', 'it'), ('improves', 'improve'), ('the', 'the'), ('intermediate', 'intermediate'), ('code', 'code'), ('.', '.')] 

 Dependency tags are: 
>> [(('It', 'improves'), 'nsubj'), (('improves', 'root'), 'root'), (('the', 'code'), 'det'), (('intermediate', 'code'), 'amod'), (('code', 'improves'), 'obj'), (('.', 'improves'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 29 ===========================

 This is necessary to have a faster execution of code or less consumption of memory. 

Tokens are: 
>> ['This', 'is', 'necessary', 'to', 'have', 'a', 'faster', 'execution', 'of', 'code', 'or', 'less', 'consumption', 'of', 'memory', '.'] 

 UPOS tags are: 
>> [('This', 'PRON'), ('is', 'AUX'), ('necessary', 'ADJ'), ('to', 'PART'), ('have', 'VERB'), ('a', 'DET'), ('faster', 'ADJ'), ('execution', 'NOUN'), ('of', 'ADP'), ('code', 'NOUN'), ('or', 'CCONJ'), ('less', 'ADJ'), ('consumption', 'NOUN'), ('of', 'ADP'), ('memory', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('This', 'DT'), ('is', 'VBZ'), ('necessary', 'JJ'), ('to', 'TO'), ('have', 'VB'), ('a', 'DT'), ('faster', 'JJR'), ('execution', 'NN'), ('of', 'IN'), ('code', 'NN'), ('or', 'CC'), ('less', 'JJR'), ('consumption', 'NN'), ('of', 'IN'), ('memory', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('This', 'this'), ('is', 'be'), ('necessary', 'necessary'), ('to', 'to'), ('have', 'have'), ('a', 'a'), ('faster', 'fast'), ('execution', 'execution'), ('of', 'of'), ('code', 'code'), ('or', 'or'), ('less', 'less'), ('consumption', 'consumption'), ('of', 'of'), ('memory', 'memory'), ('.', '.')] 

 Dependency tags are: 
>> [(('This', 'necessary'), 'nsubj'), (('is', 'necessary'), 'cop'), (('necessary', 'root'), 'root'), (('to', 'have'), 'mark'), (('have', 'necessary'), 'xcomp'), (('a', 'execution'), 'det'), (('faster', 'execution'), 'amod'), (('execution', 'have'), 'obj'), (('of', 'consumption'), 'case'), (('code', 'execution'), 'nmod'), (('or', 'less'), 'cc'), (('less', 'code'), 'conj'), (('consumption', 'execution'), 'nmod'), (('of', 'memory'), 'case'), (('memory', 'consumption'), 'nmod'), (('.', 'necessary'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 30 ===========================

 Intermediate code  	           t1= int to real(60) 	t2= id3 * t1 	t3= t2 + id2 		id1= t3  Code optimization  		t1= id3 * 60.0 		id1 = id2 + t1      Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1 – Introduction to Compiler Design ‹#›  Phases of compiler Compiler Analysis phase Synthesis phase Lexical analysis  Syntax analysis  Semantic analysis    Intermediate code generation Code optimization  Code generation     Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1– Introduction to Compiler Design ‹#›  Code generation 

Tokens are: 
>> ['Intermediate', 'code', 't1', '=', 'int', 'to', 'real', '(', '60', ')', 't2', '=', 'id', '3', '*', 't1', 't3', '=', 't2', '+', 'id2', 'id', '1', '=', 't3', 'Code', 'optimization', 't', '1', '=', 'id', '3', '*', '60.0', 'id', '1', '=', 'id', '2', '+', 't1', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '1', '–', 'Introduction', 'to', 'Compiler', 'Design', '‹#›', 'Phases', 'of', 'compiler', 'Compiler', 'Analysis', 'phase', 'Synthesis', 'phase', 'Lexical', 'analysis', 'Syntax', 'analysis', 'Semantic', 'analysis', 'Intermediate', 'code', 'generation', 'Code', 'optimization', 'Code', 'generation', 'Prof.', 'Jay', 'R', 'Dhamsaniya', '#', '3130006', '(', 'PS', ')', '\uf077', 'Unit', '1', '–', 'Basic', 'Probability', '‹#›', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '1', '–', 'Introduction', 'to', 'Compiler', 'Design', '‹#›', 'Code', 'generation'] 

 UPOS tags are: 
>> [('Intermediate', 'ADJ'), ('code', 'NOUN'), ('t1', 'NOUN'), ('=', 'SYM'), ('int', 'NOUN'), ('to', 'ADP'), ('real', 'ADJ'), ('(', 'PUNCT'), ('60', 'NUM'), (')', 'PUNCT'), ('t2', 'NOUN'), ('=', 'SYM'), ('id', 'NOUN'), ('3', 'NUM'), ('*', 'PUNCT'), ('t1', 'NOUN'), ('t3', 'NOUN'), ('=', 'SYM'), ('t2', 'NOUN'), ('+', 'SYM'), ('id2', 'NOUN'), ('id', 'NOUN'), ('1', 'NUM'), ('=', 'SYM'), ('t3', 'NOUN'), ('Code', 'NOUN'), ('optimization', 'NOUN'), ('t', 'NOUN'), ('1', 'NUM'), ('=', 'SYM'), ('id', 'NOUN'), ('3', 'NUM'), ('*', 'PUNCT'), ('60.0', 'NUM'), ('id', 'NOUN'), ('1', 'NUM'), ('=', 'SYM'), ('id', 'NOUN'), ('2', 'NUM'), ('+', 'SYM'), ('t1', 'NOUN'), ('Prof.', 'NOUN'), ('Dixita', 'PROPN'), ('B', 'NOUN'), ('Kagathara', 'NOUN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Introduction', 'NOUN'), ('to', 'ADP'), ('Compiler', 'NOUN'), ('Design', 'NOUN'), ('‹#›', 'NOUN'), ('Phases', 'NOUN'), ('of', 'ADP'), ('compiler', 'NOUN'), ('Compiler', 'NOUN'), ('Analysis', 'NOUN'), ('phase', 'NOUN'), ('Synthesis', 'NOUN'), ('phase', 'NOUN'), ('Lexical', 'ADJ'), ('analysis', 'NOUN'), ('Syntax', 'NOUN'), ('analysis', 'NOUN'), ('Semantic', 'ADJ'), ('analysis', 'NOUN'), ('Intermediate', 'ADJ'), ('code', 'NOUN'), ('generation', 'NOUN'), ('Code', 'NOUN'), ('optimization', 'NOUN'), ('Code', 'NOUN'), ('generation', 'NOUN'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'ADJ'), ('Probability', 'NOUN'), ('‹#›', 'NOUN'), ('Prof.', 'NOUN'), ('Dixita', 'PROPN'), ('B', 'NOUN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Introduction', 'NOUN'), ('to', 'ADP'), ('Compiler', 'NOUN'), ('Design', 'NOUN'), ('‹#›', 'NOUN'), ('Code', 'NOUN'), ('generation', 'NOUN')] 

 XPOS tags are: 
>> [('Intermediate', 'JJ'), ('code', 'NN'), ('t1', 'NN'), ('=', 'SYM'), ('int', 'NN'), ('to', 'IN'), ('real', 'JJ'), ('(', '-LRB-'), ('60', 'CD'), (')', '-RRB-'), ('t2', 'NN'), ('=', 'SYM'), ('id', 'NN'), ('3', 'CD'), ('*', 'NFP'), ('t1', 'NN'), ('t3', 'NN'), ('=', 'SYM'), ('t2', 'NN'), ('+', 'SYM'), ('id2', 'NN'), ('id', 'NN'), ('1', 'CD'), ('=', 'SYM'), ('t3', 'NN'), ('Code', 'NN'), ('optimization', 'NN'), ('t', 'NN'), ('1', 'CD'), ('=', 'SYM'), ('id', 'NN'), ('3', 'CD'), ('*', 'NFP'), ('60.0', 'CD'), ('id', 'NN'), ('1', 'CD'), ('=', 'SYM'), ('id', 'NN'), ('2', 'CD'), ('+', 'SYM'), ('t1', 'NN'), ('Prof.', 'NN'), ('Dixita', 'NNP'), ('B', 'NN'), ('Kagathara', 'NN'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('1', 'CD'), ('–', ','), ('Introduction', 'NN'), ('to', 'IN'), ('Compiler', 'NN'), ('Design', 'NN'), ('‹#›', 'NN'), ('Phases', 'NNS'), ('of', 'IN'), ('compiler', 'NN'), ('Compiler', 'NN'), ('Analysis', 'NN'), ('phase', 'NN'), ('Synthesis', 'NN'), ('phase', 'NN'), ('Lexical', 'JJ'), ('analysis', 'NN'), ('Syntax', 'NN'), ('analysis', 'NN'), ('Semantic', 'JJ'), ('analysis', 'NN'), ('Intermediate', 'JJ'), ('code', 'NN'), ('generation', 'NN'), ('Code', 'NN'), ('optimization', 'NN'), ('Code', 'NN'), ('generation', 'NN'), ('Prof.', 'NNP'), ('Jay', 'NNP'), ('R', 'NNP'), ('Dhamsaniya', 'NNP'), ('#', 'NN'), ('3130006', 'CD'), ('(', '-LRB-'), ('PS', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('1', 'CD'), ('–', ','), ('Basic', 'JJ'), ('Probability', 'NN'), ('‹#›', 'NN'), ('Prof.', 'NN'), ('Dixita', 'NNP'), ('B', 'NN'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('1', 'CD'), ('–', ','), ('Introduction', 'NN'), ('to', 'IN'), ('Compiler', 'NN'), ('Design', 'NN'), ('‹#›', 'NN'), ('Code', 'NN'), ('generation', 'NN')] 

 Lemmas are: 
>> [('Intermediate', 'intermediate'), ('code', 'code'), ('t1', 't1'), ('=', '='), ('int', 'int'), ('to', 'to'), ('real', 'real'), ('(', '('), ('60', '60'), (')', ')'), ('t2', 't2'), ('=', '='), ('id', 'id'), ('3', '3'), ('*', '*'), ('t1', 't1'), ('t3', 't3'), ('=', '='), ('t2', 't2'), ('+', '+'), ('id2', 'id2'), ('id', 'id'), ('1', '1'), ('=', '='), ('t3', 't3'), ('Code', 'code'), ('optimization', 'optimization'), ('t', 't'), ('1', '1'), ('=', '='), ('id', 'id'), ('3', '3'), ('*', '*'), ('60.0', '60.0'), ('id', 'id'), ('1', '1'), ('=', '='), ('id', 'id'), ('2', '2'), ('+', '+'), ('t1', 't1'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '-'), ('Introduction', 'introduction'), ('to', 'to'), ('Compiler', 'compiler'), ('Design', 'design'), ('‹#›', '‹#›'), ('Phases', 'phase'), ('of', 'of'), ('compiler', 'compiler'), ('Compiler', 'compiler'), ('Analysis', 'analysis'), ('phase', 'phase'), ('Synthesis', 'synthesis'), ('phase', 'phase'), ('Lexical', 'lexical'), ('analysis', 'analysis'), ('Syntax', 'Syntax'), ('analysis', 'analysis'), ('Semantic', 'Semantic'), ('analysis', 'analysis'), ('Intermediate', 'intermediate'), ('code', 'code'), ('generation', 'generation'), ('Code', 'code'), ('optimization', 'optimization'), ('Code', 'code'), ('generation', 'generation'), ('Prof.', 'Prof.'), ('Jay', 'Jay'), ('R', 'R'), ('Dhamsaniya', 'Dhamsaniya'), ('#', '#'), ('3130006', '3130006'), ('(', '('), ('PS', 'ps'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '-'), ('Basic', 'basic'), ('Probability', 'probability'), ('‹#›', '‹#›'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'b'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '-'), ('Introduction', 'introduction'), ('to', 'to'), ('Compiler', 'compiler'), ('Design', 'design'), ('‹#›', '‹#›'), ('Code', 'code'), ('generation', 'generation')] 

 Dependency tags are: 
>> [(('Intermediate', 't1'), 'amod'), (('code', 't1'), 'compound'), (('t1', '='), 'nsubj'), (('=', 'root'), 'root'), (('int', '='), 'obj'), (('to', 't2'), 'case'), (('real', 't2'), 'amod'), (('(', 't2'), 'punct'), (('60', 't2'), 'nummod'), ((')', 't2'), 'punct'), (('t2', '='), 'nsubj'), (('=', '='), 'conj'), (('id', '='), 'obj'), (('3', 'id'), 'nummod'), (('*', 't3'), 'punct'), (('t1', 't3'), 'compound'), (('t3', '='), 'obj'), (('=', '='), 'conj'), (('t2', 'id'), 'compound'), (('+', 'id'), 'cc'), (('id2', 'id'), 'compound'), (('id', '='), 'obj'), (('1', 'id'), 'nummod'), (('=', 'id'), 'parataxis'), (('t3', 'optimization'), 'compound'), (('Code', 'optimization'), 'compound'), (('optimization', '='), 'obj'), (('t', '='), 'obj'), (('1', '='), 'nummod'), (('=', 'optimization'), 'appos'), (('id', '='), 'obj'), (('3', 'id'), 'nummod'), (('*', 'id'), 'punct'), (('60.0', 'id'), 'nummod'), (('id', 'id'), 'appos'), (('1', 'id'), 'nummod'), (('=', 'id'), 'appos'), (('id', '='), 'obj'), (('2', 'id'), 'nummod'), (('+', 't1'), 'cc'), (('t1', 'Prof.'), 'compound'), (('Prof.', 'id'), 'appos'), (('Dixita', 'B'), 'compound'), (('B', '#'), 'compound'), (('Kagathara', '#'), 'compound'), (('#', 'id'), 'appos'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', 'Unit'), 'compound'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', '#'), 'appos'), (('1', 'Unit'), 'nummod'), (('–', 'Introduction'), 'punct'), (('Introduction', 'Unit'), 'appos'), (('to', 'Design'), 'case'), (('Compiler', 'Design'), 'compound'), (('Design', 'Phases'), 'nmod'), (('‹#›', 'Phases'), 'compound'), (('Phases', 'Introduction'), 'nmod'), (('of', 'phase'), 'case'), (('compiler', 'Analysis'), 'compound'), (('Compiler', 'Analysis'), 'compound'), (('Analysis', 'phase'), 'compound'), (('phase', 'phase'), 'compound'), (('Synthesis', 'analysis'), 'compound'), (('phase', 'analysis'), 'compound'), (('Lexical', 'analysis'), 'amod'), (('analysis', 'analysis'), 'compound'), (('Syntax', 'analysis'), 'compound'), (('analysis', 'analysis'), 'compound'), (('Semantic', 'analysis'), 'amod'), (('analysis', 'Phases'), 'nmod'), (('Intermediate', 'generation'), 'amod'), (('code', 'generation'), 'compound'), (('generation', 'generation'), 'compound'), (('Code', 'generation'), 'compound'), (('optimization', 'generation'), 'compound'), (('Code', 'generation'), 'compound'), (('generation', 'analysis'), 'appos'), (('Prof.', 'generation'), 'compound'), (('Jay', 'Prof.'), 'flat'), (('R', '#'), 'compound'), (('Dhamsaniya', '#'), 'compound'), (('#', 'generation'), 'appos'), (('3130006', '#'), 'nummod'), (('(', 'PS'), 'punct'), (('PS', 'Unit'), 'appos'), ((')', 'PS'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', '#'), 'appos'), (('1', 'Unit'), 'nummod'), (('–', 'Unit'), 'punct'), (('Basic', 'Probability'), 'amod'), (('Probability', 'Unit'), 'appos'), (('‹#›', 'Probability'), 'appos'), (('Prof.', 'Probability'), 'appos'), (('Dixita', 'B'), 'compound'), (('B', 'Kagathara'), 'compound'), (('Kagathara', 'Prof.'), 'appos'), (('#', 'CD'), 'compound'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', 'Unit'), 'appos'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', 'Kagathara'), 'appos'), (('1', 'Unit'), 'nummod'), (('–', 'Introduction'), 'punct'), (('Introduction', 'Unit'), 'appos'), (('to', 'generation'), 'case'), (('Compiler', 'Design'), 'compound'), (('Design', 'generation'), 'compound'), (('‹#›', 'generation'), 'compound'), (('Code', 'generation'), 'compound'), (('generation', 'Introduction'), 'nmod')]

 Named Entities are: 
>> [('1', 'CARDINAL'), ('1', 'CARDINAL'), ('2170701', 'CARDINAL'), ('1', 'CARDINAL')]

========================== Sentence 31 ===========================

 The intermediate code instructions are translated into sequence of machine instruction. 

Tokens are: 
>> ['The', 'intermediate', 'code', 'instructions', 'are', 'translated', 'into', 'sequence', 'of', 'machine', 'instruction', '.'] 

 UPOS tags are: 
>> [('The', 'DET'), ('intermediate', 'ADJ'), ('code', 'NOUN'), ('instructions', 'NOUN'), ('are', 'AUX'), ('translated', 'VERB'), ('into', 'ADP'), ('sequence', 'NOUN'), ('of', 'ADP'), ('machine', 'NOUN'), ('instruction', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('The', 'DT'), ('intermediate', 'JJ'), ('code', 'NN'), ('instructions', 'NNS'), ('are', 'VBP'), ('translated', 'VBN'), ('into', 'IN'), ('sequence', 'NN'), ('of', 'IN'), ('machine', 'NN'), ('instruction', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('The', 'the'), ('intermediate', 'intermediate'), ('code', 'code'), ('instructions', 'instruction'), ('are', 'be'), ('translated', 'translate'), ('into', 'into'), ('sequence', 'sequence'), ('of', 'of'), ('machine', 'machine'), ('instruction', 'instruction'), ('.', '.')] 

 Dependency tags are: 
>> [(('The', 'instructions'), 'det'), (('intermediate', 'instructions'), 'amod'), (('code', 'instructions'), 'compound'), (('instructions', 'translated'), 'nsubj:pass'), (('are', 'translated'), 'aux:pass'), (('translated', 'root'), 'root'), (('into', 'sequence'), 'case'), (('sequence', 'translated'), 'obl'), (('of', 'instruction'), 'case'), (('machine', 'instruction'), 'compound'), (('instruction', 'sequence'), 'nmod'), (('.', 'translated'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 32 ===========================

 Code generation  		MOV id3, R2 		MUL #60.0, R2 		MOV id2, R1 		ADD R2,R1 		MOV R1, id1    Code optimization  		t1= id3 * 60.0 		id1 = id2 + t1 Id3R2 Id2R1    Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1 – Introduction to Compiler Design ‹#›  Phases of compiler Symbol table Error detection and recovery Lexical analysis Code optimization Syntax analysis Semantic analysis Intermediate code  Code generation Target Program Source program   Analysis Phase Synthesis Phase  	Variable  Name	Type	Address 	Position	Float	0001 	Initial 	Float	0005 	Rate	Float	0009     Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1– Introduction to Compiler Design ‹#›  Exercise Write output of all the phases of compiler for following statements: x = b-c*2 I=p*n*r/100  	      Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1 – Introduction to Compiler Design ‹#›  Grouping of Phases        Front end & back end (Grouping of phases) 

Tokens are: 
>> ['Code', 'generation', 'MOV', 'id', '3', ',', 'R2', 'MUL', '#', '60.0', ',', 'R2', 'MOV', 'id2', ',', 'R1', 'ADD', 'R2', ',', 'R1', 'MOV', 'R1', ',', 'id', '1', 'Code', 'optimization', 't', '1', '=', 'id', '3', '*', '60.0', 'id', '1', '=', 'id', '2', '+', 't1', 'Id3', '\uf0e0', 'R2', 'Id2\uf0e0R1', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '1', '–', 'Introduction', 'to', 'Compiler', 'Design', '‹#›', 'Phases', 'of', 'compiler', 'Symbol', 'table', 'Error', 'detection', 'and', 'recovery', 'Lexical', 'analysis', 'Code', 'optimization', 'Syntax', 'analysis', 'Semantic', 'analysis', 'Intermediate', 'code', 'Code', 'generation', 'Target', 'Program', 'Source', 'program', 'Analysis', 'Phase', 'Synthesis', 'Phase', 'Variable', 'Name', 'Type', 'Address', 'Position', 'Float', '0001', 'Initial', 'Float', '0005', 'Rate', 'Float', '0009', 'Prof.', 'Jay', 'R', 'Dhamsaniya', '#', '3130006', '(', 'PS', ')', '\uf077', 'Unit', '1', '–', 'Basic', 'Probability', '‹#›', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '1', '–', 'Introduction', 'to', 'Compiler', 'Design', '‹#›', 'Exercise', 'Write', 'output', 'of', 'all', 'the', 'phases', 'of', 'compiler', 'for', 'following', 'statements', ':', 'x', '=', 'b-c*2', 'I=p*n*r/100', 'Prof.', 'Jay', 'R', 'Dhamsaniya', '#', '3130006', '(', 'PS', ')', '\uf077', 'Unit', '1', '–', 'Basic', 'Probability', '‹#›', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '1', '–', 'Introduction', 'to', 'Compiler', 'Design', '‹#›', 'Grouping', 'of', 'Phases', 'Front', 'end', '&', 'back', 'end', '(', 'Grouping', 'of', 'phases', ')'] 

 UPOS tags are: 
>> [('Code', 'NOUN'), ('generation', 'NOUN'), ('MOV', 'NOUN'), ('id', 'NOUN'), ('3', 'NUM'), (',', 'PUNCT'), ('R2', 'NUM'), ('MUL', 'NOUN'), ('#', 'SYM'), ('60.0', 'NUM'), (',', 'PUNCT'), ('R2', 'NUM'), ('MOV', 'NOUN'), ('id2', 'NOUN'), (',', 'PUNCT'), ('R1', 'NUM'), ('ADD', 'NOUN'), ('R2', 'PROPN'), (',', 'PUNCT'), ('R1', 'NUM'), ('MOV', 'NOUN'), ('R1', 'NOUN'), (',', 'PUNCT'), ('id', 'NOUN'), ('1', 'NUM'), ('Code', 'NOUN'), ('optimization', 'NOUN'), ('t', 'NOUN'), ('1', 'NUM'), ('=', 'SYM'), ('id', 'NOUN'), ('3', 'NUM'), ('*', 'PUNCT'), ('60.0', 'NUM'), ('id', 'NOUN'), ('1', 'NUM'), ('=', 'SYM'), ('id', 'NOUN'), ('2', 'NUM'), ('+', 'SYM'), ('t1', 'NOUN'), ('Id3', 'NOUN'), ('\uf0e0', 'PUNCT'), ('R2', 'PROPN'), ('Id2\uf0e0R1', 'NOUN'), ('Prof.', 'NOUN'), ('Dixita', 'PROPN'), ('B', 'NOUN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Introduction', 'NOUN'), ('to', 'ADP'), ('Compiler', 'NOUN'), ('Design', 'NOUN'), ('‹#›', 'NOUN'), ('Phases', 'NOUN'), ('of', 'ADP'), ('compiler', 'NOUN'), ('Symbol', 'NOUN'), ('table', 'NOUN'), ('Error', 'NOUN'), ('detection', 'NOUN'), ('and', 'CCONJ'), ('recovery', 'NOUN'), ('Lexical', 'ADJ'), ('analysis', 'NOUN'), ('Code', 'NOUN'), ('optimization', 'NOUN'), ('Syntax', 'NOUN'), ('analysis', 'NOUN'), ('Semantic', 'ADJ'), ('analysis', 'NOUN'), ('Intermediate', 'ADJ'), ('code', 'NOUN'), ('Code', 'NOUN'), ('generation', 'NOUN'), ('Target', 'NOUN'), ('Program', 'NOUN'), ('Source', 'NOUN'), ('program', 'NOUN'), ('Analysis', 'NOUN'), ('Phase', 'NOUN'), ('Synthesis', 'NOUN'), ('Phase', 'NOUN'), ('Variable', 'ADJ'), ('Name', 'NOUN'), ('Type', 'NOUN'), ('Address', 'NOUN'), ('Position', 'NOUN'), ('Float', 'NOUN'), ('0001', 'NUM'), ('Initial', 'ADJ'), ('Float', 'NOUN'), ('0005', 'NUM'), ('Rate', 'NOUN'), ('Float', 'NOUN'), ('0009', 'NUM'), ('Prof.', 'NOUN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'ADJ'), ('Probability', 'NOUN'), ('‹#›', 'NOUN'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Introduction', 'NOUN'), ('to', 'ADP'), ('Compiler', 'PROPN'), ('Design', 'PROPN'), ('‹#›', 'NOUN'), ('Exercise', 'PROPN'), ('Write', 'PROPN'), ('output', 'NOUN'), ('of', 'ADP'), ('all', 'DET'), ('the', 'DET'), ('phases', 'NOUN'), ('of', 'ADP'), ('compiler', 'NOUN'), ('for', 'ADP'), ('following', 'VERB'), ('statements', 'NOUN'), (':', 'PUNCT'), ('x', 'NOUN'), ('=', 'PUNCT'), ('b-c*2', 'PROPN'), ('I=p*n*r/100', 'PROPN'), ('Prof.', 'NOUN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'ADJ'), ('Probability', 'NOUN'), ('‹#›', 'NOUN'), ('Prof.', 'NOUN'), ('Dixita', 'PROPN'), ('B', 'NOUN'), ('Kagathara', 'NOUN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Introduction', 'NOUN'), ('to', 'ADP'), ('Compiler', 'NOUN'), ('Design', 'NOUN'), ('‹#›', 'NOUN'), ('Grouping', 'NOUN'), ('of', 'ADP'), ('Phases', 'NOUN'), ('Front', 'ADJ'), ('end', 'NOUN'), ('&', 'CCONJ'), ('back', 'NOUN'), ('end', 'NOUN'), ('(', 'PUNCT'), ('Grouping', 'NOUN'), ('of', 'ADP'), ('phases', 'NOUN'), (')', 'PUNCT')] 

 XPOS tags are: 
>> [('Code', 'NN'), ('generation', 'NN'), ('MOV', 'NN'), ('id', 'NN'), ('3', 'CD'), (',', ','), ('R2', 'CD'), ('MUL', 'NN'), ('#', 'NN'), ('60.0', 'CD'), (',', ','), ('R2', 'CD'), ('MOV', 'NN'), ('id2', 'NN'), (',', ','), ('R1', 'CD'), ('ADD', 'NN'), ('R2', 'NNP'), (',', ','), ('R1', 'CD'), ('MOV', 'NN'), ('R1', 'NN'), (',', ','), ('id', 'NN'), ('1', 'CD'), ('Code', 'NN'), ('optimization', 'NN'), ('t', 'NN'), ('1', 'CD'), ('=', 'SYM'), ('id', 'NN'), ('3', 'CD'), ('*', 'NFP'), ('60.0', 'CD'), ('id', 'NN'), ('1', 'CD'), ('=', 'SYM'), ('id', 'NN'), ('2', 'CD'), ('+', 'SYM'), ('t1', 'NN'), ('Id3', 'NN'), ('\uf0e0', ','), ('R2', 'NNP'), ('Id2\uf0e0R1', 'NN'), ('Prof.', 'NN'), ('Dixita', 'NNP'), ('B', 'NN'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('1', 'CD'), ('–', ','), ('Introduction', 'NN'), ('to', 'IN'), ('Compiler', 'NN'), ('Design', 'NN'), ('‹#›', 'NN'), ('Phases', 'NNS'), ('of', 'IN'), ('compiler', 'NN'), ('Symbol', 'NN'), ('table', 'NN'), ('Error', 'NN'), ('detection', 'NN'), ('and', 'CC'), ('recovery', 'NN'), ('Lexical', 'JJ'), ('analysis', 'NN'), ('Code', 'NN'), ('optimization', 'NN'), ('Syntax', 'NN'), ('analysis', 'NN'), ('Semantic', 'JJ'), ('analysis', 'NN'), ('Intermediate', 'JJ'), ('code', 'NN'), ('Code', 'NN'), ('generation', 'NN'), ('Target', 'NN'), ('Program', 'NN'), ('Source', 'NN'), ('program', 'NN'), ('Analysis', 'NN'), ('Phase', 'NN'), ('Synthesis', 'NN'), ('Phase', 'NN'), ('Variable', 'JJ'), ('Name', 'NN'), ('Type', 'NN'), ('Address', 'NN'), ('Position', 'NN'), ('Float', 'NN'), ('0001', 'CD'), ('Initial', 'JJ'), ('Float', 'NN'), ('0005', 'CD'), ('Rate', 'NN'), ('Float', 'NN'), ('0009', 'CD'), ('Prof.', 'NN'), ('Jay', 'NNP'), ('R', 'NNP'), ('Dhamsaniya', 'NNP'), ('#', 'NN'), ('3130006', 'CD'), ('(', '-LRB-'), ('PS', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('1', 'CD'), ('–', ','), ('Basic', 'JJ'), ('Probability', 'NN'), ('‹#›', 'NN'), ('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('1', 'CD'), ('–', ','), ('Introduction', 'NN'), ('to', 'IN'), ('Compiler', 'NNP'), ('Design', 'NNP'), ('‹#›', 'NN'), ('Exercise', 'NNP'), ('Write', 'NNP'), ('output', 'NN'), ('of', 'IN'), ('all', 'PDT'), ('the', 'DT'), ('phases', 'NNS'), ('of', 'IN'), ('compiler', 'NN'), ('for', 'IN'), ('following', 'VBG'), ('statements', 'NNS'), (':', ':'), ('x', 'NN'), ('=', ','), ('b-c*2', 'NNP'), ('I=p*n*r/100', 'NNP'), ('Prof.', 'NN'), ('Jay', 'NNP'), ('R', 'NNP'), ('Dhamsaniya', 'NNP'), ('#', 'NN'), ('3130006', 'CD'), ('(', '-LRB-'), ('PS', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('1', 'CD'), ('–', ','), ('Basic', 'JJ'), ('Probability', 'NN'), ('‹#›', 'NN'), ('Prof.', 'NN'), ('Dixita', 'NNP'), ('B', 'NN'), ('Kagathara', 'NN'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('1', 'CD'), ('–', ','), ('Introduction', 'NN'), ('to', 'IN'), ('Compiler', 'NN'), ('Design', 'NN'), ('‹#›', 'NN'), ('Grouping', 'NN'), ('of', 'IN'), ('Phases', 'NNS'), ('Front', 'JJ'), ('end', 'NN'), ('&', 'CC'), ('back', 'NN'), ('end', 'NN'), ('(', '-LRB-'), ('Grouping', 'NN'), ('of', 'IN'), ('phases', 'NNS'), (')', '-RRB-')] 

 Lemmas are: 
>> [('Code', 'code'), ('generation', 'generation'), ('MOV', 'mov'), ('id', 'id'), ('3', '3'), (',', ','), ('R2', 'r2'), ('MUL', 'mul'), ('#', '#'), ('60.0', '60.0'), (',', ','), ('R2', 'r2'), ('MOV', 'mov'), ('id2', 'id2'), (',', ','), ('R1', 'r1'), ('ADD', 'add'), ('R2', 'R2'), (',', ','), ('R1', 'r1'), ('MOV', 'mov'), ('R1', 'r1'), (',', ','), ('id', 'id'), ('1', '1'), ('Code', 'code'), ('optimization', 'optimization'), ('t', 't'), ('1', '1'), ('=', '='), ('id', 'id'), ('3', '3'), ('*', '*'), ('60.0', '60.0'), ('id', 'id'), ('1', '1'), ('=', '='), ('id', 'id'), ('2', '2'), ('+', '+'), ('t1', 't1'), ('Id3', 'id3'), ('\uf0e0', "''"), ('R2', 'R2'), ('Id2\uf0e0R1', 'id2\uf0e0r1'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'b'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '-'), ('Introduction', 'introduction'), ('to', 'to'), ('Compiler', 'compiler'), ('Design', 'design'), ('‹#›', '‹#›'), ('Phases', 'phase'), ('of', 'of'), ('compiler', 'compiler'), ('Symbol', 'symbol'), ('table', 'table'), ('Error', 'error'), ('detection', 'detection'), ('and', 'and'), ('recovery', 'recovery'), ('Lexical', 'lexical'), ('analysis', 'analysis'), ('Code', 'code'), ('optimization', 'optimization'), ('Syntax', 'Syntax'), ('analysis', 'analysis'), ('Semantic', 'Semantic'), ('analysis', 'analysis'), ('Intermediate', 'intermediate'), ('code', 'code'), ('Code', 'code'), ('generation', 'generation'), ('Target', 'target'), ('Program', 'program'), ('Source', 'source'), ('program', 'program'), ('Analysis', 'analysis'), ('Phase', 'phase'), ('Synthesis', 'synthesis'), ('Phase', 'phase'), ('Variable', 'variable'), ('Name', 'name'), ('Type', 'type'), ('Address', 'address'), ('Position', 'position'), ('Float', 'float'), ('0001', '0001'), ('Initial', 'Initial'), ('Float', 'float'), ('0005', '0005'), ('Rate', 'rate'), ('Float', 'float'), ('0009', '0009'), ('Prof.', 'Prof.'), ('Jay', 'Jay'), ('R', 'R'), ('Dhamsaniya', 'Dhamsaniya'), ('#', '#'), ('3130006', '3130006'), ('(', '('), ('PS', 'ps'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '-'), ('Basic', 'basic'), ('Probability', 'probability'), ('‹#›', '‹#›'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '-'), ('Introduction', 'introduction'), ('to', 'to'), ('Compiler', 'Compiler'), ('Design', 'Design'), ('‹#›', '‹#›'), ('Exercise', 'Exercise'), ('Write', 'Write'), ('output', 'output'), ('of', 'of'), ('all', 'all'), ('the', 'the'), ('phases', 'phase'), ('of', 'of'), ('compiler', 'compiler'), ('for', 'for'), ('following', 'follow'), ('statements', 'statement'), (':', ':'), ('x', 'x'), ('=', '='), ('b-c*2', 'b-c*2'), ('I=p*n*r/100', 'I=p*n*r/100'), ('Prof.', 'Prof.'), ('Jay', 'Jay'), ('R', 'R'), ('Dhamsaniya', 'Dhamsaniya'), ('#', '#'), ('3130006', '3130006'), ('(', '('), ('PS', 'ps'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '-'), ('Basic', 'basic'), ('Probability', 'probability'), ('‹#›', '‹#›'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '-'), ('Introduction', 'introduction'), ('to', 'to'), ('Compiler', 'compiler'), ('Design', 'design'), ('‹#›', '‹#›'), ('Grouping', 'grouping'), ('of', 'of'), ('Phases', 'phase'), ('Front', 'Front'), ('end', 'end'), ('&', '&'), ('back', 'back'), ('end', 'end'), ('(', '('), ('Grouping', 'grouping'), ('of', 'of'), ('phases', 'phase'), (')', ')')] 

 Dependency tags are: 
>> [(('Code', 'generation'), 'compound'), (('generation', 'root'), 'root'), (('MOV', 'id'), 'compound'), (('id', 'generation'), 'appos'), (('3', 'id'), 'nummod'), ((',', 'id'), 'punct'), (('R2', '#'), 'nummod'), (('MUL', '#'), 'compound'), (('#', 'id'), 'conj'), (('60.0', '#'), 'nummod'), ((',', '#'), 'punct'), (('R2', 'id2'), 'nummod'), (('MOV', 'id2'), 'compound'), (('id2', 'id'), 'conj'), ((',', 'id2'), 'punct'), (('R1', 'ADD'), 'nummod'), (('ADD', 'R2'), 'compound'), (('R2', 'id'), 'conj'), ((',', 'R2'), 'punct'), (('R1', 'R1'), 'nummod'), (('MOV', 'R1'), 'compound'), (('R1', 'id'), 'conj'), ((',', 'R1'), 'punct'), (('id', 'R1'), 'conj'), (('1', 'optimization'), 'nummod'), (('Code', 'optimization'), 'compound'), (('optimization', 'id'), 'conj'), (('t', 'optimization'), 'compound'), (('1', '='), 'nummod'), (('=', 'optimization'), 'parataxis'), (('id', '='), 'obj'), (('3', 'id'), 'nummod'), (('*', 'id'), 'punct'), (('60.0', 'id'), 'nummod'), (('id', 'id'), 'appos'), (('1', 'id'), 'nummod'), (('=', 'id'), 'parataxis'), (('id', '='), 'obj'), (('2', 'id'), 'nummod'), (('+', 't1'), 'cc'), (('t1', 'Id3'), 'compound'), (('Id3', 'id'), 'conj'), (('\uf0e0', 'Id3'), 'punct'), (('R2', 'Id3'), 'appos'), (('Id2\uf0e0R1', 'Id3'), 'appos'), (('Prof.', 'Id2\uf0e0R1'), 'appos'), (('Dixita', 'B'), 'compound'), (('B', 'Prof.'), 'compound'), (('Kagathara', '#'), 'compound'), (('#', 'B'), 'compound'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', 'Unit'), 'compound'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', '#'), 'appos'), (('1', 'Unit'), 'nummod'), (('–', 'Introduction'), 'punct'), (('Introduction', 'Unit'), 'appos'), (('to', 'Design'), 'case'), (('Compiler', 'Design'), 'compound'), (('Design', 'Introduction'), 'nmod'), (('‹#›', 'Phases'), 'compound'), (('Phases', 'Design'), 'conj'), (('of', 'table'), 'case'), (('compiler', 'table'), 'compound'), (('Symbol', 'table'), 'compound'), (('table', 'detection'), 'compound'), (('Error', 'detection'), 'compound'), (('detection', 'Phases'), 'nmod'), (('and', 'analysis'), 'cc'), (('recovery', 'analysis'), 'compound'), (('Lexical', 'analysis'), 'amod'), (('analysis', 'detection'), 'conj'), (('Code', 'detection'), 'compound'), (('optimization', 'analysis'), 'compound'), (('Syntax', 'analysis'), 'compound'), (('analysis', 'analysis'), 'compound'), (('Semantic', 'analysis'), 'amod'), (('analysis', 'id'), 'conj'), (('Intermediate', 'generation'), 'amod'), (('code', 'generation'), 'compound'), (('Code', 'generation'), 'compound'), (('generation', 'analysis'), 'compound'), (('Target', 'Program'), 'compound'), (('Program', 'Analysis'), 'compound'), (('Source', 'Analysis'), 'compound'), (('program', 'Analysis'), 'compound'), (('Analysis', 'Phase'), 'compound'), (('Phase', 'Phase'), 'compound'), (('Synthesis', 'Phase'), 'compound'), (('Phase', 'Float'), 'compound'), (('Variable', 'Type'), 'amod'), (('Name', 'Type'), 'compound'), (('Type', 'Address'), 'compound'), (('Address', 'Float'), 'compound'), (('Position', 'Float'), 'compound'), (('Float', 'id'), 'conj'), (('0001', 'Float'), 'nummod'), (('Initial', 'Float'), 'amod'), (('Float', 'Float'), 'compound'), (('0005', 'Float'), 'nummod'), (('Rate', 'Float'), 'compound'), (('Float', 'Float'), 'conj'), (('0009', 'Jay'), 'nummod'), (('Prof.', 'Dhamsaniya'), 'compound'), (('Jay', 'Dhamsaniya'), 'compound'), (('R', 'Dhamsaniya'), 'compound'), (('Dhamsaniya', '#'), 'compound'), (('#', 'Float'), 'compound'), (('3130006', '#'), 'nummod'), (('(', 'PS'), 'punct'), (('PS', 'Unit'), 'compound'), ((')', 'PS'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', '#'), 'appos'), (('1', 'Unit'), 'nummod'), (('–', 'Unit'), 'punct'), (('Basic', 'Probability'), 'amod'), (('Probability', 'Unit'), 'compound'), (('‹#›', 'Probability'), 'compound'), (('Prof.', 'Probability'), 'compound'), (('Dixita', 'B'), 'compound'), (('B', '#'), 'compound'), (('Kagathara', '#'), 'compound'), (('#', 'Prof.'), 'compound'), (('2170701', 'CD'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', 'Unit'), 'compound'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', '#'), 'appos'), (('1', 'Unit'), 'nummod'), (('–', 'Introduction'), 'punct'), (('Introduction', 'Unit'), 'compound'), (('to', 'output'), 'case'), (('Compiler', 'Design'), 'compound'), (('Design', 'Exercise'), 'compound'), (('‹#›', 'Exercise'), 'compound'), (('Exercise', 'Write'), 'compound'), (('Write', 'output'), 'compound'), (('output', 'Introduction'), 'nmod'), (('of', 'phases'), 'case'), (('all', 'phases'), 'det:predet'), (('the', 'phases'), 'det'), (('phases', 'output'), 'nmod'), (('of', 'compiler'), 'case'), (('compiler', 'phases'), 'nmod'), (('for', 'statements'), 'case'), (('following', 'statements'), 'amod'), (('statements', 'phases'), 'nmod'), ((':', 'x'), 'punct'), (('x', 'statements'), 'appos'), (('=', 'x'), 'punct'), (('b-c*2', 'x'), 'parataxis'), (('I=p*n*r/100', 'b-c*2'), 'dep'), (('Prof.', 'b-c*2'), 'compound'), (('Jay', '#'), 'compound'), (('R', '#'), 'compound'), (('Dhamsaniya', '#'), 'compound'), (('#', 'b-c*2'), 'dep'), (('3130006', '#'), 'nummod'), (('(', 'PS'), 'punct'), (('PS', 'Unit'), 'appos'), ((')', 'PS'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', '#'), 'appos'), (('1', 'Unit'), 'nummod'), (('–', 'Unit'), 'punct'), (('Basic', 'Probability'), 'amod'), (('Probability', 'Unit'), 'compound'), (('‹#›', 'Probability'), 'compound'), (('Prof.', 'Probability'), 'compound'), (('Dixita', 'B'), 'compound'), (('B', 'Prof.'), 'compound'), (('Kagathara', '#'), 'compound'), (('#', 'B'), 'appos'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', '#'), 'appos'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', '#'), 'appos'), (('1', 'Unit'), 'nummod'), (('–', 'Introduction'), 'punct'), (('Introduction', 'Unit'), 'appos'), (('to', 'Design'), 'case'), (('Compiler', 'Design'), 'compound'), (('Design', 'Grouping'), 'compound'), (('‹#›', 'Grouping'), 'compound'), (('Grouping', 'Introduction'), 'nmod'), (('of', 'Phases'), 'case'), (('Phases', 'Grouping'), 'nmod'), (('Front', 'end'), 'amod'), (('end', 'end'), 'compound'), (('&', 'back'), 'cc'), (('back', 'end'), 'conj'), (('end', 'Grouping'), 'nmod'), (('(', 'Grouping'), 'punct'), (('Grouping', 'end'), 'appos'), (('of', 'phases'), 'case'), (('phases', 'Grouping'), 'nmod'), ((')', 'Grouping'), 'punct')]

 Named Entities are: 
>> [('3', 'CARDINAL'), ('1', 'CARDINAL'), ('#3130006', 'CARDINAL'), ('1', 'CARDINAL'), ('2170701', 'CARDINAL'), ('1', 'CARDINAL'), ('#3130006', 'CARDINAL'), ('1', 'CARDINAL'), ('2170701', 'CARDINAL'), ('1', 'CARDINAL')]

========================== Sentence 33 ===========================

 Depends primarily on source language and largely independent of the target machine. 

Tokens are: 
>> ['Depends', 'primarily', 'on', 'source', 'language', 'and', 'largely', 'independent', 'of', 'the', 'target', 'machine', '.'] 

 UPOS tags are: 
>> [('Depends', 'VERB'), ('primarily', 'ADV'), ('on', 'ADP'), ('source', 'NOUN'), ('language', 'NOUN'), ('and', 'CCONJ'), ('largely', 'ADV'), ('independent', 'ADJ'), ('of', 'ADP'), ('the', 'DET'), ('target', 'NOUN'), ('machine', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Depends', 'VBZ'), ('primarily', 'RB'), ('on', 'IN'), ('source', 'NN'), ('language', 'NN'), ('and', 'CC'), ('largely', 'RB'), ('independent', 'JJ'), ('of', 'IN'), ('the', 'DT'), ('target', 'NN'), ('machine', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('Depends', 'depend'), ('primarily', 'primarily'), ('on', 'on'), ('source', 'source'), ('language', 'language'), ('and', 'and'), ('largely', 'largely'), ('independent', 'independent'), ('of', 'of'), ('the', 'the'), ('target', 'target'), ('machine', 'machine'), ('.', '.')] 

 Dependency tags are: 
>> [(('Depends', 'root'), 'root'), (('primarily', 'language'), 'advmod'), (('on', 'language'), 'case'), (('source', 'language'), 'compound'), (('language', 'Depends'), 'obl'), (('and', 'independent'), 'cc'), (('largely', 'independent'), 'advmod'), (('independent', 'Depends'), 'conj'), (('of', 'machine'), 'case'), (('the', 'machine'), 'det'), (('target', 'machine'), 'compound'), (('machine', 'independent'), 'obl'), (('.', 'Depends'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 34 ===========================

 It includes following phases:  Lexical analysis Syntax analysis  Semantic analysis Intermediate code generation  Creation of symbol table  Front end Depends on target machine and do not depends on source program. 

Tokens are: 
>> ['It', 'includes', 'following', 'phases', ':', 'Lexical', 'analysis', 'Syntax', 'analysis', 'Semantic', 'analysis', 'Intermediate', 'code', 'generation', 'Creation', 'of', 'symbol', 'table', 'Front', 'end', 'Depends', 'on', 'target', 'machine', 'and', 'do', 'not', 'depends', 'on', 'source', 'program', '.'] 

 UPOS tags are: 
>> [('It', 'PRON'), ('includes', 'VERB'), ('following', 'VERB'), ('phases', 'NOUN'), (':', 'PUNCT'), ('Lexical', 'ADJ'), ('analysis', 'NOUN'), ('Syntax', 'NOUN'), ('analysis', 'NOUN'), ('Semantic', 'ADJ'), ('analysis', 'NOUN'), ('Intermediate', 'ADJ'), ('code', 'NOUN'), ('generation', 'NOUN'), ('Creation', 'NOUN'), ('of', 'ADP'), ('symbol', 'NOUN'), ('table', 'NOUN'), ('Front', 'ADJ'), ('end', 'NOUN'), ('Depends', 'VERB'), ('on', 'ADP'), ('target', 'NOUN'), ('machine', 'NOUN'), ('and', 'CCONJ'), ('do', 'AUX'), ('not', 'PART'), ('depends', 'VERB'), ('on', 'ADP'), ('source', 'NOUN'), ('program', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('It', 'PRP'), ('includes', 'VBZ'), ('following', 'VBG'), ('phases', 'NNS'), (':', ':'), ('Lexical', 'JJ'), ('analysis', 'NN'), ('Syntax', 'NN'), ('analysis', 'NN'), ('Semantic', 'JJ'), ('analysis', 'NN'), ('Intermediate', 'JJ'), ('code', 'NN'), ('generation', 'NN'), ('Creation', 'NN'), ('of', 'IN'), ('symbol', 'NN'), ('table', 'NN'), ('Front', 'JJ'), ('end', 'NN'), ('Depends', 'VBZ'), ('on', 'IN'), ('target', 'NN'), ('machine', 'NN'), ('and', 'CC'), ('do', 'VBP'), ('not', 'RB'), ('depends', 'VBZ'), ('on', 'IN'), ('source', 'NN'), ('program', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('It', 'it'), ('includes', 'include'), ('following', 'follow'), ('phases', 'phase'), (':', ':'), ('Lexical', 'lexical'), ('analysis', 'analysis'), ('Syntax', 'Syntax'), ('analysis', 'analysis'), ('Semantic', 'Semantic'), ('analysis', 'analysis'), ('Intermediate', 'intermediate'), ('code', 'code'), ('generation', 'generation'), ('Creation', 'creation'), ('of', 'of'), ('symbol', 'symbol'), ('table', 'table'), ('Front', 'Front'), ('end', 'end'), ('Depends', 'depend'), ('on', 'on'), ('target', 'target'), ('machine', 'machine'), ('and', 'and'), ('do', 'do'), ('not', 'not'), ('depends', 'depend'), ('on', 'on'), ('source', 'source'), ('program', 'program'), ('.', '.')] 

 Dependency tags are: 
>> [(('It', 'includes'), 'nsubj'), (('includes', 'root'), 'root'), (('following', 'phases'), 'amod'), (('phases', 'includes'), 'obj'), ((':', 'includes'), 'punct'), (('Lexical', 'analysis'), 'amod'), (('analysis', 'analysis'), 'compound'), (('Syntax', 'analysis'), 'compound'), (('analysis', 'analysis'), 'compound'), (('Semantic', 'analysis'), 'amod'), (('analysis', 'Creation'), 'compound'), (('Intermediate', 'Creation'), 'amod'), (('code', 'generation'), 'compound'), (('generation', 'Creation'), 'compound'), (('Creation', 'Depends'), 'nsubj'), (('of', 'end'), 'case'), (('symbol', 'table'), 'compound'), (('table', 'end'), 'compound'), (('Front', 'end'), 'amod'), (('end', 'Creation'), 'nmod'), (('Depends', 'includes'), 'parataxis'), (('on', 'machine'), 'case'), (('target', 'machine'), 'compound'), (('machine', 'Depends'), 'obl'), (('and', 'depends'), 'cc'), (('do', 'depends'), 'aux'), (('not', 'depends'), 'advmod'), (('depends', 'Depends'), 'conj'), (('on', 'program'), 'case'), (('source', 'program'), 'compound'), (('program', 'depends'), 'obl'), (('.', 'includes'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 35 ===========================

 It includes following phases:  Code optimization  Code generation phase  Error handling and symbol table operation    Back end    Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1 – Introduction to Compiler Design ‹#›  Difference between compiler & interpreter  	Compiler 	Interpreter  	Scans the entire program and translates it as a whole into machine code. 

Tokens are: 
>> ['It', 'includes', 'following', 'phases', ':', 'Code', 'optimization', 'Code', 'generation', 'phase', 'Error', 'handling', 'and', 'symbol', 'table', 'operation', 'Back', 'end', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '1', '–', 'Introduction', 'to', 'Compiler', 'Design', '‹#›', 'Difference', 'between', 'compiler', '&', 'interpreter', 'Compiler', 'Interpreter', 'Scans', 'the', 'entire', 'program', 'and', 'translates', 'it', 'as', 'a', 'whole', 'into', 'machine', 'code', '.'] 

 UPOS tags are: 
>> [('It', 'PRON'), ('includes', 'VERB'), ('following', 'VERB'), ('phases', 'NOUN'), (':', 'PUNCT'), ('Code', 'NOUN'), ('optimization', 'NOUN'), ('Code', 'NOUN'), ('generation', 'NOUN'), ('phase', 'NOUN'), ('Error', 'NOUN'), ('handling', 'NOUN'), ('and', 'CCONJ'), ('symbol', 'NOUN'), ('table', 'NOUN'), ('operation', 'NOUN'), ('Back', 'NOUN'), ('end', 'NOUN'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'PUNCT'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Introduction', 'NOUN'), ('to', 'ADP'), ('Compiler', 'PROPN'), ('Design', 'PROPN'), ('‹#›', 'PROPN'), ('Difference', 'NOUN'), ('between', 'ADP'), ('compiler', 'NOUN'), ('&', 'CCONJ'), ('interpreter', 'NOUN'), ('Compiler', 'PROPN'), ('Interpreter', 'PROPN'), ('Scans', 'PROPN'), ('the', 'DET'), ('entire', 'ADJ'), ('program', 'NOUN'), ('and', 'CCONJ'), ('translates', 'VERB'), ('it', 'PRON'), ('as', 'ADP'), ('a', 'DET'), ('whole', 'NOUN'), ('into', 'ADP'), ('machine', 'NOUN'), ('code', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('It', 'PRP'), ('includes', 'VBZ'), ('following', 'VBG'), ('phases', 'NNS'), (':', ':'), ('Code', 'NN'), ('optimization', 'NN'), ('Code', 'NN'), ('generation', 'NN'), ('phase', 'NN'), ('Error', 'NN'), ('handling', 'NN'), ('and', 'CC'), ('symbol', 'NN'), ('table', 'NN'), ('operation', 'NN'), ('Back', 'NN'), ('end', 'NN'), ('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', ','), ('Unit', 'NN'), ('1', 'CD'), ('–', ':'), ('Introduction', 'NN'), ('to', 'IN'), ('Compiler', 'NNP'), ('Design', 'NNP'), ('‹#›', 'NNP'), ('Difference', 'NN'), ('between', 'IN'), ('compiler', 'NN'), ('&', 'CC'), ('interpreter', 'NN'), ('Compiler', 'NNP'), ('Interpreter', 'NNP'), ('Scans', 'NNPS'), ('the', 'DT'), ('entire', 'JJ'), ('program', 'NN'), ('and', 'CC'), ('translates', 'VBZ'), ('it', 'PRP'), ('as', 'IN'), ('a', 'DT'), ('whole', 'NN'), ('into', 'IN'), ('machine', 'NN'), ('code', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('It', 'it'), ('includes', 'include'), ('following', 'follow'), ('phases', 'phase'), (':', ':'), ('Code', 'code'), ('optimization', 'optimization'), ('Code', 'code'), ('generation', 'generation'), ('phase', 'phase'), ('Error', 'error'), ('handling', 'handling'), ('and', 'and'), ('symbol', 'symbol'), ('table', 'table'), ('operation', 'operation'), ('Back', 'back'), ('end', 'end'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', "''"), ('Unit', 'unit'), ('1', '1'), ('–', '-'), ('Introduction', 'introduction'), ('to', 'to'), ('Compiler', 'Compiler'), ('Design', 'Design'), ('‹#›', '‹#›'), ('Difference', 'difference'), ('between', 'between'), ('compiler', 'compiler'), ('&', '&'), ('interpreter', 'interpreter'), ('Compiler', 'Compiler'), ('Interpreter', 'Interpreter'), ('Scans', 'Scan'), ('the', 'the'), ('entire', 'entire'), ('program', 'program'), ('and', 'and'), ('translates', 'translate'), ('it', 'it'), ('as', 'as'), ('a', 'a'), ('whole', 'whole'), ('into', 'into'), ('machine', 'machine'), ('code', 'code'), ('.', '.')] 

 Dependency tags are: 
>> [(('It', 'includes'), 'nsubj'), (('includes', 'root'), 'root'), (('following', 'phases'), 'amod'), (('phases', 'includes'), 'obj'), ((':', 'includes'), 'punct'), (('Code', 'phase'), 'compound'), (('optimization', 'phase'), 'compound'), (('Code', 'phase'), 'compound'), (('generation', 'phase'), 'compound'), (('phase', 'handling'), 'compound'), (('Error', 'handling'), 'compound'), (('handling', 'operation'), 'compound'), (('and', 'table'), 'cc'), (('symbol', 'table'), 'compound'), (('table', 'handling'), 'conj'), (('operation', 'end'), 'compound'), (('Back', 'end'), 'compound'), (('end', 'phases'), 'appos'), (('Prof.', 'end'), 'compound'), (('Dixita', 'Prof.'), 'flat'), (('B', 'Kagathara'), 'compound'), (('Kagathara', 'Prof.'), 'appos'), (('#', 'Prof.'), 'appos'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', '#'), 'appos'), ((')', 'CD'), 'punct'), (('\uf077', 'CD'), 'punct'), (('Unit', 'Prof.'), 'appos'), (('1', 'Unit'), 'nummod'), (('–', 'Introduction'), 'punct'), (('Introduction', 'Prof.'), 'appos'), (('to', 'Difference'), 'case'), (('Compiler', 'Design'), 'compound'), (('Design', '‹#›'), 'compound'), (('‹#›', 'Difference'), 'compound'), (('Difference', 'Introduction'), 'nmod'), (('between', 'compiler'), 'case'), (('compiler', 'Difference'), 'nmod'), (('&', 'interpreter'), 'cc'), (('interpreter', 'compiler'), 'conj'), (('Compiler', 'Scans'), 'compound'), (('Interpreter', 'Scans'), 'compound'), (('Scans', 'compiler'), 'conj'), (('the', 'program'), 'det'), (('entire', 'program'), 'amod'), (('program', 'Scans'), 'appos'), (('and', 'translates'), 'cc'), (('translates', 'includes'), 'conj'), (('it', 'translates'), 'obj'), (('as', 'whole'), 'case'), (('a', 'whole'), 'det'), (('whole', 'translates'), 'obl'), (('into', 'code'), 'case'), (('machine', 'code'), 'compound'), (('code', 'translates'), 'obl'), (('.', 'includes'), 'punct')]

 Named Entities are: 
>> [('2170701', 'CARDINAL'), ('1', 'CARDINAL')]

========================== Sentence 36 ===========================

 It translates program’s one statement at a time. 

Tokens are: 
>> ['It', 'translates', 'program', '’s', 'one', 'statement', 'at', 'a', 'time', '.'] 

 UPOS tags are: 
>> [('It', 'PRON'), ('translates', 'VERB'), ('program', 'NOUN'), ('’s', 'PART'), ('one', 'NUM'), ('statement', 'NOUN'), ('at', 'ADP'), ('a', 'DET'), ('time', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('It', 'PRP'), ('translates', 'VBZ'), ('program', 'NN'), ('’s', 'POS'), ('one', 'CD'), ('statement', 'NN'), ('at', 'IN'), ('a', 'DT'), ('time', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('It', 'it'), ('translates', 'translate'), ('program', 'program'), ('’s', "'s"), ('one', 'one'), ('statement', 'statement'), ('at', 'at'), ('a', 'a'), ('time', 'time'), ('.', '.')] 

 Dependency tags are: 
>> [(('It', 'translates'), 'nsubj'), (('translates', 'root'), 'root'), (('program', 'statement'), 'nmod:poss'), (('’s', 'program'), 'case'), (('one', 'statement'), 'nummod'), (('statement', 'translates'), 'obj'), (('at', 'time'), 'case'), (('a', 'time'), 'det'), (('time', 'translates'), 'obl'), (('.', 'translates'), 'punct')]

 Named Entities are: 
>> [('one', 'CARDINAL')]

========================== Sentence 37 ===========================

 It generates intermediate code. 

Tokens are: 
>> ['It', 'generates', 'intermediate', 'code', '.'] 

 UPOS tags are: 
>> [('It', 'PRON'), ('generates', 'VERB'), ('intermediate', 'ADJ'), ('code', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('It', 'PRP'), ('generates', 'VBZ'), ('intermediate', 'JJ'), ('code', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('It', 'it'), ('generates', 'generate'), ('intermediate', 'intermediate'), ('code', 'code'), ('.', '.')] 

 Dependency tags are: 
>> [(('It', 'generates'), 'nsubj'), (('generates', 'root'), 'root'), (('intermediate', 'code'), 'amod'), (('code', 'generates'), 'obj'), (('.', 'generates'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 38 ===========================

 It does not generate intermediate code. 

Tokens are: 
>> ['It', 'does', 'not', 'generate', 'intermediate', 'code', '.'] 

 UPOS tags are: 
>> [('It', 'PRON'), ('does', 'AUX'), ('not', 'PART'), ('generate', 'VERB'), ('intermediate', 'ADJ'), ('code', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('It', 'PRP'), ('does', 'VBZ'), ('not', 'RB'), ('generate', 'VB'), ('intermediate', 'JJ'), ('code', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('It', 'it'), ('does', 'do'), ('not', 'not'), ('generate', 'generate'), ('intermediate', 'intermediate'), ('code', 'code'), ('.', '.')] 

 Dependency tags are: 
>> [(('It', 'generate'), 'nsubj'), (('does', 'generate'), 'aux'), (('not', 'generate'), 'advmod'), (('generate', 'root'), 'root'), (('intermediate', 'code'), 'amod'), (('code', 'generate'), 'obj'), (('.', 'generate'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 39 ===========================

 Memory requirement is more. 

Tokens are: 
>> ['Memory', 'requirement', 'is', 'more', '.'] 

 UPOS tags are: 
>> [('Memory', 'NOUN'), ('requirement', 'NOUN'), ('is', 'AUX'), ('more', 'ADV'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Memory', 'NN'), ('requirement', 'NN'), ('is', 'VBZ'), ('more', 'RBR'), ('.', '.')] 

 Lemmas are: 
>> [('Memory', 'memory'), ('requirement', 'requirement'), ('is', 'be'), ('more', 'more'), ('.', '.')] 

 Dependency tags are: 
>> [(('Memory', 'requirement'), 'compound'), (('requirement', 'more'), 'nsubj'), (('is', 'more'), 'cop'), (('more', 'root'), 'root'), (('.', 'more'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 40 ===========================

 Memory requirement is less. 

Tokens are: 
>> ['Memory', 'requirement', 'is', 'less', '.'] 

 UPOS tags are: 
>> [('Memory', 'NOUN'), ('requirement', 'NOUN'), ('is', 'AUX'), ('less', 'ADV'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Memory', 'NN'), ('requirement', 'NN'), ('is', 'VBZ'), ('less', 'RBR'), ('.', '.')] 

 Lemmas are: 
>> [('Memory', 'memory'), ('requirement', 'requirement'), ('is', 'be'), ('less', 'less'), ('.', '.')] 

 Dependency tags are: 
>> [(('Memory', 'requirement'), 'compound'), (('requirement', 'less'), 'nsubj'), (('is', 'less'), 'cop'), (('less', 'root'), 'root'), (('.', 'less'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 41 ===========================

 An error is displayed after entire program is checked. 

Tokens are: 
>> ['An', 'error', 'is', 'displayed', 'after', 'entire', 'program', 'is', 'checked', '.'] 

 UPOS tags are: 
>> [('An', 'DET'), ('error', 'NOUN'), ('is', 'AUX'), ('displayed', 'VERB'), ('after', 'ADP'), ('entire', 'ADJ'), ('program', 'NOUN'), ('is', 'AUX'), ('checked', 'VERB'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('An', 'DT'), ('error', 'NN'), ('is', 'VBZ'), ('displayed', 'VBN'), ('after', 'IN'), ('entire', 'JJ'), ('program', 'NN'), ('is', 'VBZ'), ('checked', 'VBN'), ('.', '.')] 

 Lemmas are: 
>> [('An', 'a'), ('error', 'error'), ('is', 'be'), ('displayed', 'display'), ('after', 'after'), ('entire', 'entire'), ('program', 'program'), ('is', 'be'), ('checked', 'check'), ('.', '.')] 

 Dependency tags are: 
>> [(('An', 'error'), 'det'), (('error', 'displayed'), 'nsubj:pass'), (('is', 'displayed'), 'aux:pass'), (('displayed', 'root'), 'root'), (('after', 'program'), 'case'), (('entire', 'program'), 'amod'), (('program', 'displayed'), 'obl'), (('is', 'checked'), 'aux:pass'), (('checked', 'displayed'), 'advcl'), (('.', 'displayed'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 42 ===========================

 An error is displayed for every instruction interpreted if any. 

Tokens are: 
>> ['An', 'error', 'is', 'displayed', 'for', 'every', 'instruction', 'interpreted', 'if', 'any', '.'] 

 UPOS tags are: 
>> [('An', 'DET'), ('error', 'NOUN'), ('is', 'AUX'), ('displayed', 'VERB'), ('for', 'ADP'), ('every', 'DET'), ('instruction', 'NOUN'), ('interpreted', 'VERB'), ('if', 'SCONJ'), ('any', 'DET'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('An', 'DT'), ('error', 'NN'), ('is', 'VBZ'), ('displayed', 'VBN'), ('for', 'IN'), ('every', 'DT'), ('instruction', 'NN'), ('interpreted', 'VBN'), ('if', 'IN'), ('any', 'DT'), ('.', '.')] 

 Lemmas are: 
>> [('An', 'a'), ('error', 'error'), ('is', 'be'), ('displayed', 'display'), ('for', 'for'), ('every', 'every'), ('instruction', 'instruction'), ('interpreted', 'interpret'), ('if', 'if'), ('any', 'any'), ('.', '.')] 

 Dependency tags are: 
>> [(('An', 'error'), 'det'), (('error', 'displayed'), 'nsubj:pass'), (('is', 'displayed'), 'aux:pass'), (('displayed', 'root'), 'root'), (('for', 'instruction'), 'case'), (('every', 'instruction'), 'det'), (('instruction', 'displayed'), 'obl'), (('interpreted', 'instruction'), 'acl'), (('if', 'any'), 'mark'), (('any', 'interpreted'), 'obl'), (('.', 'displayed'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 43 ===========================

 Example: C compiler 	Example: Basic, Python, Ruby      Prof. 

Tokens are: 
>> ['Example', ':', 'C', 'compiler', 'Example', ':', 'Basic', ',', 'Python', ',', 'Ruby', 'Prof', '.'] 

 UPOS tags are: 
>> [('Example', 'NOUN'), (':', 'PUNCT'), ('C', 'PROPN'), ('compiler', 'NOUN'), ('Example', 'NOUN'), (':', 'PUNCT'), ('Basic', 'PROPN'), (',', 'PUNCT'), ('Python', 'PROPN'), (',', 'PUNCT'), ('Ruby', 'PROPN'), ('Prof', 'PROPN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Example', 'NN'), (':', ':'), ('C', 'NNP'), ('compiler', 'NN'), ('Example', 'NN'), (':', ':'), ('Basic', 'NNP'), (',', ','), ('Python', 'NNP'), (',', ','), ('Ruby', 'NNP'), ('Prof', 'NNP'), ('.', '.')] 

 Lemmas are: 
>> [('Example', 'example'), (':', ':'), ('C', 'C'), ('compiler', 'compiler'), ('Example', 'example'), (':', ':'), ('Basic', 'Basic'), (',', ','), ('Python', 'python'), (',', ','), ('Ruby', 'Ruby'), ('Prof', 'Prof'), ('.', '.')] 

 Dependency tags are: 
>> [(('Example', 'root'), 'root'), ((':', 'Example'), 'punct'), (('C', 'Example'), 'compound'), (('compiler', 'Example'), 'compound'), (('Example', 'Example'), 'appos'), ((':', 'Basic'), 'punct'), (('Basic', 'Example'), 'dep'), ((',', 'Python'), 'punct'), (('Python', 'Basic'), 'conj'), ((',', 'Prof'), 'punct'), (('Ruby', 'Basic'), 'conj'), (('Prof', 'Basic'), 'conj'), (('.', 'Example'), 'punct')]

 Named Entities are: 
>> [('Ruby\xa0     Prof', 'PERSON')]

========================== Sentence 44 ===========================

 Dixita B Kagathara  #2170701 (CD)      Unit 1 – Introduction to Compiler Design ‹#›  Context of Compiler (Cousins of compiler) 

Tokens are: 
>> ['Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '1', '–', 'Introduction', 'to', 'Compiler', 'Design', '‹#›', 'Context', 'of', 'Compiler', '(', 'Cousins', 'of', 'compiler', ')'] 

 UPOS tags are: 
>> [('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Introduction', 'NOUN'), ('to', 'ADP'), ('Compiler', 'NOUN'), ('Design', 'NOUN'), ('‹#›', 'PROPN'), ('Context', 'NOUN'), ('of', 'ADP'), ('Compiler', 'PROPN'), ('(', 'PUNCT'), ('Cousins', 'NOUN'), ('of', 'ADP'), ('compiler', 'NOUN'), (')', 'PUNCT')] 

 XPOS tags are: 
>> [('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('1', 'CD'), ('–', ':'), ('Introduction', 'NN'), ('to', 'IN'), ('Compiler', 'NN'), ('Design', 'NN'), ('‹#›', 'NNP'), ('Context', 'NN'), ('of', 'IN'), ('Compiler', 'NNP'), ('(', '-LRB-'), ('Cousins', 'NNS'), ('of', 'IN'), ('compiler', 'NN'), (')', '-RRB-')] 

 Lemmas are: 
>> [('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '-'), ('Introduction', 'introduction'), ('to', 'to'), ('Compiler', 'compiler'), ('Design', 'design'), ('‹#›', '‹#›'), ('Context', 'context'), ('of', 'of'), ('Compiler', 'Compiler'), ('(', '('), ('Cousins', 'cousin'), ('of', 'of'), ('compiler', 'compiler'), (')', ')')] 

 Dependency tags are: 
>> [(('Dixita', 'Kagathara'), 'compound'), (('B', 'Kagathara'), 'compound'), (('Kagathara', '#'), 'compound'), (('#', 'Introduction'), 'nsubj'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', 'Unit'), 'compound'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', '#'), 'appos'), (('1', 'Unit'), 'nummod'), (('–', 'Introduction'), 'punct'), (('Introduction', 'root'), 'root'), (('to', 'Design'), 'case'), (('Compiler', 'Design'), 'compound'), (('Design', 'Introduction'), 'nmod'), (('‹#›', 'Context'), 'compound'), (('Context', 'Introduction'), 'nmod'), (('of', 'Compiler'), 'case'), (('Compiler', 'Context'), 'nmod'), (('(', 'Cousins'), 'punct'), (('Cousins', 'Context'), 'appos'), (('of', 'compiler'), 'case'), (('compiler', 'Cousins'), 'nmod'), ((')', 'Cousins'), 'punct')]

 Named Entities are: 
>> [('2170701', 'CARDINAL'), ('1', 'CARDINAL')]

========================== Sentence 45 ===========================

 Context of compiler (Cousins of compiler) 

Tokens are: 
>> ['Context', 'of', 'compiler', '(', 'Cousins', 'of', 'compiler', ')'] 

 UPOS tags are: 
>> [('Context', 'NOUN'), ('of', 'ADP'), ('compiler', 'NOUN'), ('(', 'PUNCT'), ('Cousins', 'NOUN'), ('of', 'ADP'), ('compiler', 'NOUN'), (')', 'PUNCT')] 

 XPOS tags are: 
>> [('Context', 'NN'), ('of', 'IN'), ('compiler', 'NN'), ('(', '-LRB-'), ('Cousins', 'NNS'), ('of', 'IN'), ('compiler', 'NN'), (')', '-RRB-')] 

 Lemmas are: 
>> [('Context', 'context'), ('of', 'of'), ('compiler', 'compiler'), ('(', '('), ('Cousins', 'cousin'), ('of', 'of'), ('compiler', 'compiler'), (')', ')')] 

 Dependency tags are: 
>> [(('Context', 'root'), 'root'), (('of', 'compiler'), 'case'), (('compiler', 'Context'), 'nmod'), (('(', 'Cousins'), 'punct'), (('Cousins', 'Context'), 'appos'), (('of', 'compiler'), 'case'), (('compiler', 'Cousins'), 'nmod'), ((')', 'Cousins'), 'punct')]

 Named Entities are: 
>> [('Cousins', 'PERSON')]

========================== Sentence 46 ===========================

 In addition to compiler, many other system programs are required to generate absolute machine code. 

Tokens are: 
>> ['In', 'addition', 'to', 'compiler', ',', 'many', 'other', 'system', 'programs', 'are', 'required', 'to', 'generate', 'absolute', 'machine', 'code', '.'] 

 UPOS tags are: 
>> [('In', 'ADP'), ('addition', 'NOUN'), ('to', 'ADP'), ('compiler', 'NOUN'), (',', 'PUNCT'), ('many', 'ADJ'), ('other', 'ADJ'), ('system', 'NOUN'), ('programs', 'NOUN'), ('are', 'AUX'), ('required', 'VERB'), ('to', 'PART'), ('generate', 'VERB'), ('absolute', 'ADJ'), ('machine', 'NOUN'), ('code', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('In', 'IN'), ('addition', 'NN'), ('to', 'IN'), ('compiler', 'NN'), (',', ','), ('many', 'JJ'), ('other', 'JJ'), ('system', 'NN'), ('programs', 'NNS'), ('are', 'VBP'), ('required', 'VBN'), ('to', 'TO'), ('generate', 'VB'), ('absolute', 'JJ'), ('machine', 'NN'), ('code', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('In', 'in'), ('addition', 'addition'), ('to', 'to'), ('compiler', 'compiler'), (',', ','), ('many', 'many'), ('other', 'other'), ('system', 'system'), ('programs', 'program'), ('are', 'be'), ('required', 'require'), ('to', 'to'), ('generate', 'generate'), ('absolute', 'absolute'), ('machine', 'machine'), ('code', 'code'), ('.', '.')] 

 Dependency tags are: 
>> [(('In', 'addition'), 'case'), (('addition', 'required'), 'obl'), (('to', 'compiler'), 'case'), (('compiler', 'addition'), 'nmod'), ((',', 'required'), 'punct'), (('many', 'programs'), 'amod'), (('other', 'programs'), 'amod'), (('system', 'programs'), 'compound'), (('programs', 'required'), 'nsubj:pass'), (('are', 'required'), 'aux:pass'), (('required', 'root'), 'root'), (('to', 'generate'), 'mark'), (('generate', 'required'), 'xcomp'), (('absolute', 'code'), 'amod'), (('machine', 'code'), 'compound'), (('code', 'generate'), 'obj'), (('.', 'required'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 47 ===========================

 These system programs are:  Preprocessor Assembler Linker Loader    Skeletal Source Program Compiler Assembler Source Program Target Assembly  Program Relocatable Object Code Absolute Machine  Code Libraries &  Object Files Linker / Loader Preprocessor    Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1 – Introduction to Compiler Design ‹#›  Context of compiler (Cousins of compiler)    Skeletal Source Program Compiler Assembler Source Program Target Assembly  Program Relocatable Object Code Absolute Machine  Code Libraries &  Object Files Linker / Loader Preprocessor Preprocessor 

Tokens are: 
>> ['These', 'system', 'programs', 'are', ':', 'Preprocessor', 'Assembler', 'Linker', 'Loader', 'Skeletal', 'Source', 'Program', 'Compiler', 'Assembler', 'Source', 'Program', 'Target', 'Assembly', 'Program', 'Relocatable', 'Object', 'Code', 'Absolute', 'Machine', 'Code', 'Libraries', '&', 'Object', 'Files', 'Linker', '/', 'Loader', 'Preprocessor', 'Prof', '.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '1', '–', 'Introduction', 'to', 'Compiler', 'Design', '‹#›', 'Context', 'of', 'compiler', '(', 'Cousins', 'of', 'compiler', ')', 'Skeletal', 'Source', 'Program', 'Compiler', 'Assembler', 'Source', 'Program', 'Target', 'Assembly', 'Program', 'Relocatable', 'Object', 'Code', 'Absolute', 'Machine', 'Code', 'Libraries', '&', 'Object', 'Files', 'Linker', '/', 'Loader', 'Preprocessor', 'Preprocessor'] 

 UPOS tags are: 
>> [('These', 'DET'), ('system', 'NOUN'), ('programs', 'NOUN'), ('are', 'AUX'), (':', 'PUNCT'), ('Preprocessor', 'NOUN'), ('Assembler', 'NOUN'), ('Linker', 'NOUN'), ('Loader', 'NOUN'), ('Skeletal', 'ADJ'), ('Source', 'NOUN'), ('Program', 'NOUN'), ('Compiler', 'NOUN'), ('Assembler', 'NOUN'), ('Source', 'NOUN'), ('Program', 'NOUN'), ('Target', 'NOUN'), ('Assembly', 'NOUN'), ('Program', 'NOUN'), ('Relocatable', 'ADJ'), ('Object', 'NOUN'), ('Code', 'NOUN'), ('Absolute', 'ADJ'), ('Machine', 'NOUN'), ('Code', 'NOUN'), ('Libraries', 'NOUN'), ('&', 'CCONJ'), ('Object', 'NOUN'), ('Files', 'NOUN'), ('Linker', 'NOUN'), ('/', 'PUNCT'), ('Loader', 'NOUN'), ('Preprocessor', 'NOUN'), ('Prof', 'PROPN'), ('.', 'PUNCT'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Introduction', 'NOUN'), ('to', 'ADP'), ('Compiler', 'NOUN'), ('Design', 'NOUN'), ('‹#›', 'NOUN'), ('Context', 'NOUN'), ('of', 'ADP'), ('compiler', 'NOUN'), ('(', 'PUNCT'), ('Cousins', 'NOUN'), ('of', 'ADP'), ('compiler', 'NOUN'), (')', 'PUNCT'), ('Skeletal', 'ADJ'), ('Source', 'NOUN'), ('Program', 'NOUN'), ('Compiler', 'NOUN'), ('Assembler', 'NOUN'), ('Source', 'NOUN'), ('Program', 'NOUN'), ('Target', 'NOUN'), ('Assembly', 'NOUN'), ('Program', 'NOUN'), ('Relocatable', 'ADJ'), ('Object', 'NOUN'), ('Code', 'NOUN'), ('Absolute', 'ADJ'), ('Machine', 'NOUN'), ('Code', 'NOUN'), ('Libraries', 'PROPN'), ('&', 'CCONJ'), ('Object', 'PROPN'), ('Files', 'PROPN'), ('Linker', 'PROPN'), ('/', 'SYM'), ('Loader', 'NOUN'), ('Preprocessor', 'NOUN'), ('Preprocessor', 'NOUN')] 

 XPOS tags are: 
>> [('These', 'DT'), ('system', 'NN'), ('programs', 'NNS'), ('are', 'VBP'), (':', ':'), ('Preprocessor', 'NN'), ('Assembler', 'NN'), ('Linker', 'NN'), ('Loader', 'NN'), ('Skeletal', 'JJ'), ('Source', 'NN'), ('Program', 'NN'), ('Compiler', 'NN'), ('Assembler', 'NN'), ('Source', 'NN'), ('Program', 'NN'), ('Target', 'NN'), ('Assembly', 'NN'), ('Program', 'NN'), ('Relocatable', 'JJ'), ('Object', 'NN'), ('Code', 'NN'), ('Absolute', 'JJ'), ('Machine', 'NN'), ('Code', 'NN'), ('Libraries', 'NNS'), ('&', 'CC'), ('Object', 'NN'), ('Files', 'NNS'), ('Linker', 'NN'), ('/', ','), ('Loader', 'NN'), ('Preprocessor', 'NN'), ('Prof', 'NNP'), ('.', '.'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('1', 'CD'), ('–', ','), ('Introduction', 'NN'), ('to', 'IN'), ('Compiler', 'NN'), ('Design', 'NN'), ('‹#›', 'NN'), ('Context', 'NN'), ('of', 'IN'), ('compiler', 'NN'), ('(', '-LRB-'), ('Cousins', 'NNS'), ('of', 'IN'), ('compiler', 'NN'), (')', '-RRB-'), ('Skeletal', 'JJ'), ('Source', 'NN'), ('Program', 'NN'), ('Compiler', 'NN'), ('Assembler', 'NN'), ('Source', 'NN'), ('Program', 'NN'), ('Target', 'NN'), ('Assembly', 'NN'), ('Program', 'NN'), ('Relocatable', 'JJ'), ('Object', 'NN'), ('Code', 'NN'), ('Absolute', 'JJ'), ('Machine', 'NN'), ('Code', 'NN'), ('Libraries', 'NNPS'), ('&', 'CC'), ('Object', 'NNP'), ('Files', 'NNPS'), ('Linker', 'NNP'), ('/', ','), ('Loader', 'NN'), ('Preprocessor', 'NN'), ('Preprocessor', 'NN')] 

 Lemmas are: 
>> [('These', 'this'), ('system', 'system'), ('programs', 'program'), ('are', 'be'), (':', ':'), ('Preprocessor', 'preprocessor'), ('Assembler', 'assembler'), ('Linker', 'linker'), ('Loader', 'loader'), ('Skeletal', 'Skeletal'), ('Source', 'source'), ('Program', 'program'), ('Compiler', 'compiler'), ('Assembler', 'assembler'), ('Source', 'source'), ('Program', 'program'), ('Target', 'target'), ('Assembly', 'assembly'), ('Program', 'program'), ('Relocatable', 'relocatable'), ('Object', 'object'), ('Code', 'code'), ('Absolute', 'absolute'), ('Machine', 'Machine'), ('Code', 'code'), ('Libraries', 'library'), ('&', '&'), ('Object', 'object'), ('Files', 'file'), ('Linker', 'linker'), ('/', '/'), ('Loader', 'loader'), ('Preprocessor', 'preprocessor'), ('Prof', 'Prof'), ('.', '.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '-'), ('Introduction', 'introduction'), ('to', 'to'), ('Compiler', 'compiler'), ('Design', 'design'), ('‹#›', '‹#›'), ('Context', 'context'), ('of', 'of'), ('compiler', 'compiler'), ('(', '('), ('Cousins', 'cousin'), ('of', 'of'), ('compiler', 'compiler'), (')', ')'), ('Skeletal', 'Skeletal'), ('Source', 'source'), ('Program', 'program'), ('Compiler', 'compiler'), ('Assembler', 'assembler'), ('Source', 'source'), ('Program', 'program'), ('Target', 'target'), ('Assembly', 'assembly'), ('Program', 'program'), ('Relocatable', 'relocatable'), ('Object', 'object'), ('Code', 'code'), ('Absolute', 'absolute'), ('Machine', 'Machine'), ('Code', 'code'), ('Libraries', 'Library'), ('&', '&'), ('Object', 'object'), ('Files', 'Files'), ('Linker', 'Linker'), ('/', '/'), ('Loader', 'loader'), ('Preprocessor', 'preprocessor'), ('Preprocessor', 'preprocessor')] 

 Dependency tags are: 
>> [(('These', 'programs'), 'det'), (('system', 'programs'), 'compound'), (('programs', 'are'), 'nsubj'), (('are', 'Program'), 'cop'), ((':', 'are'), 'punct'), (('Preprocessor', 'Program'), 'compound'), (('Assembler', 'Program'), 'compound'), (('Linker', 'Program'), 'compound'), (('Loader', 'Program'), 'compound'), (('Skeletal', 'Program'), 'amod'), (('Source', 'Program'), 'compound'), (('Program', 'root'), 'root'), (('Compiler', 'Program'), 'compound'), (('Assembler', 'Program'), 'compound'), (('Source', 'Program'), 'compound'), (('Program', 'Program'), 'conj'), (('Target', 'Program'), 'compound'), (('Assembly', 'Program'), 'compound'), (('Program', 'Program'), 'compound'), (('Relocatable', 'Code'), 'amod'), (('Object', 'Program'), 'compound'), (('Code', 'Libraries'), 'compound'), (('Absolute', 'Libraries'), 'amod'), (('Machine', 'Libraries'), 'compound'), (('Code', 'Libraries'), 'compound'), (('Libraries', 'Program'), 'conj'), (('&', 'Files'), 'cc'), (('Object', 'Files'), 'compound'), (('Files', 'Libraries'), 'compound'), (('Linker', 'Libraries'), 'appos'), (('/', 'Preprocessor'), 'cc'), (('Loader', 'Preprocessor'), 'compound'), (('Preprocessor', 'Prof'), 'compound'), (('Prof', 'Linker'), 'appos'), (('.', '#'), 'punct'), (('Dixita', '#'), 'compound'), (('B', '#'), 'compound'), (('Kagathara', '#'), 'compound'), (('#', 'Program'), 'conj'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', '#'), 'appos'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', '#'), 'appos'), (('1', 'Unit'), 'nummod'), (('–', 'Introduction'), 'punct'), (('Introduction', 'Unit'), 'appos'), (('to', 'Design'), 'case'), (('Compiler', 'Design'), 'compound'), (('Design', 'Context'), 'compound'), (('‹#›', 'Context'), 'compound'), (('Context', 'Introduction'), 'nmod'), (('of', 'compiler'), 'case'), (('compiler', 'Context'), 'nmod'), (('(', 'Cousins'), 'punct'), (('Cousins', 'Context'), 'appos'), (('of', 'compiler'), 'case'), (('compiler', 'Cousins'), 'nmod'), ((')', 'Cousins'), 'punct'), (('Skeletal', 'Program'), 'amod'), (('Source', 'Program'), 'compound'), (('Program', 'Cousins'), 'conj'), (('Compiler', 'Program'), 'compound'), (('Assembler', 'Program'), 'compound'), (('Source', 'Program'), 'compound'), (('Program', 'Program'), 'compound'), (('Target', 'Program'), 'compound'), (('Assembly', 'Program'), 'compound'), (('Program', 'Program'), 'compound'), (('Relocatable', 'Code'), 'amod'), (('Object', 'Libraries'), 'compound'), (('Code', 'Libraries'), 'compound'), (('Absolute', 'Libraries'), 'amod'), (('Machine', 'Libraries'), 'compound'), (('Code', 'Libraries'), 'compound'), (('Libraries', 'Program'), 'compound'), (('&', 'Files'), 'cc'), (('Object', 'Files'), 'compound'), (('Files', 'Libraries'), 'conj'), (('Linker', 'Preprocessor'), 'compound'), (('/', 'Loader'), 'cc'), (('Loader', 'Preprocessor'), 'compound'), (('Preprocessor', 'Preprocessor'), 'compound'), (('Preprocessor', 'Libraries'), 'conj')]

 Named Entities are: 
>> [('2170701', 'CARDINAL'), ('1', 'CARDINAL')]

========================== Sentence 48 ===========================

 Some of the task performed by preprocessor: Macro processing: Allows user to define macros. 

Tokens are: 
>> ['Some', 'of', 'the', 'task', 'performed', 'by', 'preprocessor', ':', 'Macro', 'processing', ':', 'Allows', 'user', 'to', 'define', 'macros', '.'] 

 UPOS tags are: 
>> [('Some', 'PRON'), ('of', 'ADP'), ('the', 'DET'), ('task', 'NOUN'), ('performed', 'VERB'), ('by', 'ADP'), ('preprocessor', 'NOUN'), (':', 'PUNCT'), ('Macro', 'NOUN'), ('processing', 'NOUN'), (':', 'PUNCT'), ('Allows', 'VERB'), ('user', 'NOUN'), ('to', 'PART'), ('define', 'VERB'), ('macros', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Some', 'DT'), ('of', 'IN'), ('the', 'DT'), ('task', 'NN'), ('performed', 'VBN'), ('by', 'IN'), ('preprocessor', 'NN'), (':', ':'), ('Macro', 'NN'), ('processing', 'NN'), (':', ':'), ('Allows', 'VBZ'), ('user', 'NN'), ('to', 'TO'), ('define', 'VB'), ('macros', 'NNS'), ('.', '.')] 

 Lemmas are: 
>> [('Some', 'some'), ('of', 'of'), ('the', 'the'), ('task', 'task'), ('performed', 'perform'), ('by', 'by'), ('preprocessor', 'preprocessor'), (':', ':'), ('Macro', 'macro'), ('processing', 'processing'), (':', ':'), ('Allows', 'allow'), ('user', 'user'), ('to', 'to'), ('define', 'define'), ('macros', 'macro'), ('.', '.')] 

 Dependency tags are: 
>> [(('Some', 'Allows'), 'nsubj'), (('of', 'task'), 'case'), (('the', 'task'), 'det'), (('task', 'Some'), 'nmod'), (('performed', 'task'), 'acl'), (('by', 'preprocessor'), 'case'), (('preprocessor', 'performed'), 'obl'), ((':', 'processing'), 'punct'), (('Macro', 'processing'), 'compound'), (('processing', 'Some'), 'parataxis'), ((':', 'Allows'), 'punct'), (('Allows', 'root'), 'root'), (('user', 'Allows'), 'obj'), (('to', 'define'), 'mark'), (('define', 'Allows'), 'xcomp'), (('macros', 'define'), 'obj'), (('.', 'Allows'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 49 ===========================

 Ex: #define PI 3.14159265358979323846 

Tokens are: 
>> ['Ex', ':', '#', 'define', 'PI', '3.14159265358979323846'] 

 UPOS tags are: 
>> [('Ex', 'NOUN'), (':', 'PUNCT'), ('#', 'SYM'), ('define', 'VERB'), ('PI', 'PROPN'), ('3.14159265358979323846', 'NUM')] 

 XPOS tags are: 
>> [('Ex', 'NN'), (':', ':'), ('#', 'NN'), ('define', 'VBP'), ('PI', 'NNP'), ('3.14159265358979323846', 'CD')] 

 Lemmas are: 
>> [('Ex', 'ex'), (':', ':'), ('#', '#'), ('define', 'define'), ('PI', 'PI'), ('3.14159265358979323846', '3.14159265358979323846')] 

 Dependency tags are: 
>> [(('Ex', 'root'), 'root'), ((':', 'Ex'), 'punct'), (('#', 'define'), 'nsubj'), (('define', 'Ex'), 'appos'), (('PI', 'define'), 'obj'), (('3.14159265358979323846', 'define'), 'obj')]

 Named Entities are: 
>> []

========================== Sentence 50 ===========================

 File inclusion: A preprocessor may include the header file into the program. 

Tokens are: 
>> ['File', 'inclusion', ':', 'A', 'preprocessor', 'may', 'include', 'the', 'header', 'file', 'into', 'the', 'program', '.'] 

 UPOS tags are: 
>> [('File', 'NOUN'), ('inclusion', 'NOUN'), (':', 'PUNCT'), ('A', 'DET'), ('preprocessor', 'NOUN'), ('may', 'AUX'), ('include', 'VERB'), ('the', 'DET'), ('header', 'NOUN'), ('file', 'NOUN'), ('into', 'ADP'), ('the', 'DET'), ('program', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('File', 'NN'), ('inclusion', 'NN'), (':', ':'), ('A', 'DT'), ('preprocessor', 'NN'), ('may', 'MD'), ('include', 'VB'), ('the', 'DT'), ('header', 'NN'), ('file', 'NN'), ('into', 'IN'), ('the', 'DT'), ('program', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('File', 'file'), ('inclusion', 'inclusion'), (':', ':'), ('A', 'a'), ('preprocessor', 'preprocessor'), ('may', 'may'), ('include', 'include'), ('the', 'the'), ('header', 'header'), ('file', 'file'), ('into', 'into'), ('the', 'the'), ('program', 'program'), ('.', '.')] 

 Dependency tags are: 
>> [(('File', 'inclusion'), 'compound'), (('inclusion', 'root'), 'root'), ((':', 'inclusion'), 'punct'), (('A', 'preprocessor'), 'det'), (('preprocessor', 'include'), 'nsubj'), (('may', 'include'), 'aux'), (('include', 'inclusion'), 'appos'), (('the', 'file'), 'det'), (('header', 'file'), 'compound'), (('file', 'include'), 'obj'), (('into', 'program'), 'case'), (('the', 'program'), 'det'), (('program', 'include'), 'obl'), (('.', 'inclusion'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 51 ===========================

 Ex: #include<stdio.h> 

Tokens are: 
>> ['Ex', ':', '#', 'include<stdio.h', '>'] 

 UPOS tags are: 
>> [('Ex', 'NOUN'), (':', 'PUNCT'), ('#', 'SYM'), ('include<stdio.h', 'NOUN'), ('>', 'PUNCT')] 

 XPOS tags are: 
>> [('Ex', 'NN'), (':', ':'), ('#', 'NN'), ('include<stdio.h', 'NN'), ('>', '-RRB-')] 

 Lemmas are: 
>> [('Ex', 'ex'), (':', ':'), ('#', '#'), ('include<stdio.h', 'include<stdio.h'), ('>', '>')] 

 Dependency tags are: 
>> [(('Ex', 'root'), 'root'), ((':', 'Ex'), 'punct'), (('#', 'include<stdio.h'), 'compound'), (('include<stdio.h', 'Ex'), 'appos'), (('>', 'include<stdio.h'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 52 ===========================

 Rational preprocessor: 

Tokens are: 
>> ['Rational', 'preprocessor', ':'] 

 UPOS tags are: 
>> [('Rational', 'ADJ'), ('preprocessor', 'NOUN'), (':', 'PUNCT')] 

 XPOS tags are: 
>> [('Rational', 'JJ'), ('preprocessor', 'NN'), (':', ':')] 

 Lemmas are: 
>> [('Rational', 'Rational'), ('preprocessor', 'preprocessor'), (':', ':')] 

 Dependency tags are: 
>> [(('Rational', 'preprocessor'), 'amod'), (('preprocessor', 'root'), 'root'), ((':', 'preprocessor'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 53 ===========================

 It provides built in macro for construct like while statement or if statement. 

Tokens are: 
>> ['It', 'provides', 'built', 'in', 'macro', 'for', 'construct', 'like', 'while', 'statement', 'or', 'if', 'statement', '.'] 

 UPOS tags are: 
>> [('It', 'PRON'), ('provides', 'VERB'), ('built', 'VERB'), ('in', 'ADP'), ('macro', 'NOUN'), ('for', 'ADP'), ('construct', 'NOUN'), ('like', 'ADP'), ('while', 'SCONJ'), ('statement', 'NOUN'), ('or', 'CCONJ'), ('if', 'ADP'), ('statement', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('It', 'PRP'), ('provides', 'VBZ'), ('built', 'VBN'), ('in', 'IN'), ('macro', 'NN'), ('for', 'IN'), ('construct', 'NN'), ('like', 'IN'), ('while', 'IN'), ('statement', 'NN'), ('or', 'CC'), ('if', 'IN'), ('statement', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('It', 'it'), ('provides', 'provide'), ('built', 'build'), ('in', 'in'), ('macro', 'macro'), ('for', 'for'), ('construct', 'construct'), ('like', 'like'), ('while', 'while'), ('statement', 'statement'), ('or', 'or'), ('if', 'if'), ('statement', 'statement'), ('.', '.')] 

 Dependency tags are: 
>> [(('It', 'provides'), 'nsubj'), (('provides', 'root'), 'root'), (('built', 'provides'), 'xcomp'), (('in', 'macro'), 'case'), (('macro', 'built'), 'obl'), (('for', 'construct'), 'case'), (('construct', 'built'), 'obl'), (('like', 'statement'), 'case'), (('while', 'statement'), 'mark'), (('statement', 'built'), 'obl'), (('or', 'statement'), 'cc'), (('if', 'statement'), 'case'), (('statement', 'statement'), 'conj'), (('.', 'provides'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 54 ===========================

 Language extensions: Add capabilities to the language by using built-in macros. 

Tokens are: 
>> ['Language', 'extensions', ':', 'Add', 'capabilities', 'to', 'the', 'language', 'by', 'using', 'built', '-', 'in', 'macros', '.'] 

 UPOS tags are: 
>> [('Language', 'NOUN'), ('extensions', 'NOUN'), (':', 'PUNCT'), ('Add', 'VERB'), ('capabilities', 'NOUN'), ('to', 'ADP'), ('the', 'DET'), ('language', 'NOUN'), ('by', 'SCONJ'), ('using', 'VERB'), ('built', 'VERB'), ('-', 'PUNCT'), ('in', 'ADP'), ('macros', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Language', 'NN'), ('extensions', 'NNS'), (':', ':'), ('Add', 'VB'), ('capabilities', 'NNS'), ('to', 'IN'), ('the', 'DT'), ('language', 'NN'), ('by', 'IN'), ('using', 'VBG'), ('built', 'VBN'), ('-', 'HYPH'), ('in', 'IN'), ('macros', 'NNS'), ('.', '.')] 

 Lemmas are: 
>> [('Language', 'language'), ('extensions', 'extension'), (':', ':'), ('Add', 'add'), ('capabilities', 'capability'), ('to', 'to'), ('the', 'the'), ('language', 'language'), ('by', 'by'), ('using', 'use'), ('built', 'build'), ('-', '-'), ('in', 'in'), ('macros', 'macro'), ('.', '.')] 

 Dependency tags are: 
>> [(('Language', 'extensions'), 'compound'), (('extensions', 'root'), 'root'), ((':', 'extensions'), 'punct'), (('Add', 'extensions'), 'parataxis'), (('capabilities', 'Add'), 'obj'), (('to', 'language'), 'case'), (('the', 'language'), 'det'), (('language', 'Add'), 'obl'), (('by', 'using'), 'mark'), (('using', 'Add'), 'advcl'), (('built', 'macros'), 'amod'), (('-', 'built'), 'punct'), (('in', 'macros'), 'case'), (('macros', 'using'), 'obj'), (('.', 'extensions'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 55 ===========================

 Ex: the language equal is a database query language embedded in C. Statement beginning with ## are taken by preprocessor to be database access statement unrelated to C and translated into procedure call on routines that perform the database access. 

Tokens are: 
>> ['Ex', ':', 'the', 'language', 'equal', 'is', 'a', 'database', 'query', 'language', 'embedded', 'in', 'C.', 'Statement', 'beginning', 'with', '##', 'are', 'taken', 'by', 'preprocessor', 'to', 'be', 'database', 'access', 'statement', 'unrelated', 'to', 'C', 'and', 'translated', 'into', 'procedure', 'call', 'on', 'routines', 'that', 'perform', 'the', 'database', 'access', '.'] 

 UPOS tags are: 
>> [('Ex', 'PROPN'), (':', 'PUNCT'), ('the', 'DET'), ('language', 'NOUN'), ('equal', 'ADJ'), ('is', 'AUX'), ('a', 'DET'), ('database', 'NOUN'), ('query', 'NOUN'), ('language', 'NOUN'), ('embedded', 'VERB'), ('in', 'ADP'), ('C.', 'NOUN'), ('Statement', 'NOUN'), ('beginning', 'NOUN'), ('with', 'ADP'), ('##', 'SYM'), ('are', 'AUX'), ('taken', 'VERB'), ('by', 'ADP'), ('preprocessor', 'NOUN'), ('to', 'PART'), ('be', 'AUX'), ('database', 'NOUN'), ('access', 'NOUN'), ('statement', 'NOUN'), ('unrelated', 'ADJ'), ('to', 'ADP'), ('C', 'PROPN'), ('and', 'CCONJ'), ('translated', 'VERB'), ('into', 'ADP'), ('procedure', 'NOUN'), ('call', 'NOUN'), ('on', 'ADP'), ('routines', 'NOUN'), ('that', 'PRON'), ('perform', 'VERB'), ('the', 'DET'), ('database', 'NOUN'), ('access', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Ex', 'NNP'), (':', ':'), ('the', 'DT'), ('language', 'NN'), ('equal', 'JJ'), ('is', 'VBZ'), ('a', 'DT'), ('database', 'NN'), ('query', 'NN'), ('language', 'NN'), ('embedded', 'VBN'), ('in', 'IN'), ('C.', 'NN'), ('Statement', 'NN'), ('beginning', 'NN'), ('with', 'IN'), ('##', 'SYM'), ('are', 'VBP'), ('taken', 'VBN'), ('by', 'IN'), ('preprocessor', 'NN'), ('to', 'TO'), ('be', 'VB'), ('database', 'NN'), ('access', 'NN'), ('statement', 'NN'), ('unrelated', 'JJ'), ('to', 'IN'), ('C', 'NNP'), ('and', 'CC'), ('translated', 'VBN'), ('into', 'IN'), ('procedure', 'NN'), ('call', 'NN'), ('on', 'IN'), ('routines', 'NNS'), ('that', 'WDT'), ('perform', 'VBP'), ('the', 'DT'), ('database', 'NN'), ('access', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('Ex', 'Ex'), (':', ':'), ('the', 'the'), ('language', 'language'), ('equal', 'equal'), ('is', 'be'), ('a', 'a'), ('database', 'database'), ('query', 'query'), ('language', 'language'), ('embedded', 'embed'), ('in', 'in'), ('C.', 'C.'), ('Statement', 'statement'), ('beginning', 'beginning'), ('with', 'with'), ('##', '##'), ('are', 'be'), ('taken', 'take'), ('by', 'by'), ('preprocessor', 'preprocessor'), ('to', 'to'), ('be', 'be'), ('database', 'database'), ('access', 'access'), ('statement', 'statement'), ('unrelated', 'unrelated'), ('to', 'to'), ('C', 'C'), ('and', 'and'), ('translated', 'translate'), ('into', 'into'), ('procedure', 'procedure'), ('call', 'call'), ('on', 'on'), ('routines', 'routine'), ('that', 'that'), ('perform', 'perform'), ('the', 'the'), ('database', 'database'), ('access', 'access'), ('.', '.')] 

 Dependency tags are: 
>> [(('Ex', 'root'), 'root'), ((':', 'Ex'), 'punct'), (('the', 'language'), 'det'), (('language', 'language'), 'nsubj'), (('equal', 'language'), 'amod'), (('is', 'language'), 'cop'), (('a', 'language'), 'det'), (('database', 'language'), 'compound'), (('query', 'language'), 'compound'), (('language', 'Ex'), 'appos'), (('embedded', 'language'), 'acl'), (('in', 'Statement'), 'case'), (('C.', 'Statement'), 'compound'), (('Statement', 'embedded'), 'obl'), (('beginning', 'embedded'), 'obl'), (('with', '##'), 'case'), (('##', 'taken'), 'nsubj:pass'), (('are', 'taken'), 'aux:pass'), (('taken', 'language'), 'advcl'), (('by', 'preprocessor'), 'case'), (('preprocessor', 'taken'), 'obl'), (('to', 'statement'), 'mark'), (('be', 'statement'), 'cop'), (('database', 'statement'), 'compound'), (('access', 'statement'), 'compound'), (('statement', 'taken'), 'xcomp'), (('unrelated', 'statement'), 'amod'), (('to', 'C'), 'case'), (('C', 'unrelated'), 'obl'), (('and', 'translated'), 'cc'), (('translated', 'unrelated'), 'conj'), (('into', 'call'), 'case'), (('procedure', 'call'), 'compound'), (('call', 'translated'), 'obl'), (('on', 'routines'), 'case'), (('routines', 'call'), 'nmod'), (('that', 'perform'), 'nsubj'), (('perform', 'routines'), 'acl:relcl'), (('the', 'access'), 'det'), (('database', 'access'), 'compound'), (('access', 'perform'), 'obj'), (('.', 'Ex'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 56 ===========================

 Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1 – Introduction to Compiler Design ‹#›  Context of compiler (Cousins of compiler)    Skeletal Source Program Compiler Assembler Source Program Target Assembly  Program Relocatable Object Code Absolute Machine  Code Libraries &  Object Files Linker / Loader Preprocessor Compiler 

Tokens are: 
>> ['Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '1', '–', 'Introduction', 'to', 'Compiler', 'Design', '‹#›', 'Context', 'of', 'compiler', '(', 'Cousins', 'of', 'compiler', ')', 'Skeletal', 'Source', 'Program', 'Compiler', 'Assembler', 'Source', 'Program', 'Target', 'Assembly', 'Program', 'Relocatable', 'Object', 'Code', 'Absolute', 'Machine', 'Code', 'Libraries', '&', 'Object', 'Files', 'Linker', '/', 'Loader', 'Preprocessor', 'Compiler'] 

 UPOS tags are: 
>> [('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Introduction', 'NOUN'), ('to', 'ADP'), ('Compiler', 'NOUN'), ('Design', 'NOUN'), ('‹#›', 'NOUN'), ('Context', 'NOUN'), ('of', 'ADP'), ('compiler', 'NOUN'), ('(', 'PUNCT'), ('Cousins', 'NOUN'), ('of', 'ADP'), ('compiler', 'NOUN'), (')', 'PUNCT'), ('Skeletal', 'ADJ'), ('Source', 'NOUN'), ('Program', 'NOUN'), ('Compiler', 'NOUN'), ('Assembler', 'NOUN'), ('Source', 'NOUN'), ('Program', 'NOUN'), ('Target', 'NOUN'), ('Assembly', 'NOUN'), ('Program', 'NOUN'), ('Relocatable', 'ADJ'), ('Object', 'NOUN'), ('Code', 'NOUN'), ('Absolute', 'ADJ'), ('Machine', 'NOUN'), ('Code', 'NOUN'), ('Libraries', 'PROPN'), ('&', 'CCONJ'), ('Object', 'PROPN'), ('Files', 'PROPN'), ('Linker', 'PROPN'), ('/', 'SYM'), ('Loader', 'PROPN'), ('Preprocessor', 'PROPN'), ('Compiler', 'NOUN')] 

 XPOS tags are: 
>> [('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('1', 'CD'), ('–', ','), ('Introduction', 'NN'), ('to', 'IN'), ('Compiler', 'NN'), ('Design', 'NN'), ('‹#›', 'NN'), ('Context', 'NN'), ('of', 'IN'), ('compiler', 'NN'), ('(', '-LRB-'), ('Cousins', 'NNS'), ('of', 'IN'), ('compiler', 'NN'), (')', '-RRB-'), ('Skeletal', 'JJ'), ('Source', 'NN'), ('Program', 'NN'), ('Compiler', 'NN'), ('Assembler', 'NN'), ('Source', 'NN'), ('Program', 'NN'), ('Target', 'NN'), ('Assembly', 'NN'), ('Program', 'NN'), ('Relocatable', 'JJ'), ('Object', 'NN'), ('Code', 'NN'), ('Absolute', 'JJ'), ('Machine', 'NN'), ('Code', 'NN'), ('Libraries', 'NNPS'), ('&', 'CC'), ('Object', 'NNP'), ('Files', 'NNP'), ('Linker', 'NNP'), ('/', ','), ('Loader', 'NNP'), ('Preprocessor', 'NNP'), ('Compiler', 'NN')] 

 Lemmas are: 
>> [('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '-'), ('Introduction', 'introduction'), ('to', 'to'), ('Compiler', 'compiler'), ('Design', 'design'), ('‹#›', '‹#›'), ('Context', 'context'), ('of', 'of'), ('compiler', 'compiler'), ('(', '('), ('Cousins', 'cousin'), ('of', 'of'), ('compiler', 'compiler'), (')', ')'), ('Skeletal', 'Skeletal'), ('Source', 'source'), ('Program', 'program'), ('Compiler', 'compiler'), ('Assembler', 'assembler'), ('Source', 'source'), ('Program', 'program'), ('Target', 'target'), ('Assembly', 'assembly'), ('Program', 'program'), ('Relocatable', 'relocatable'), ('Object', 'object'), ('Code', 'code'), ('Absolute', 'absolute'), ('Machine', 'Machine'), ('Code', 'code'), ('Libraries', 'Library'), ('&', '&'), ('Object', 'object'), ('Files', 'Files'), ('Linker', 'Linker'), ('/', '/'), ('Loader', 'Loader'), ('Preprocessor', 'Preprocessor'), ('Compiler', 'compiler')] 

 Dependency tags are: 
>> [(('Prof.', 'root'), 'root'), (('Dixita', 'Prof.'), 'flat'), (('B', 'Kagathara'), 'compound'), (('Kagathara', 'Prof.'), 'flat'), (('#', 'Prof.'), 'list'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', 'Unit'), 'compound'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', 'Prof.'), 'list'), (('1', 'Unit'), 'nummod'), (('–', 'Introduction'), 'punct'), (('Introduction', 'Prof.'), 'list'), (('to', 'Design'), 'case'), (('Compiler', 'Design'), 'compound'), (('Design', 'Introduction'), 'nmod'), (('‹#›', 'Context'), 'compound'), (('Context', 'Introduction'), 'nmod'), (('of', 'compiler'), 'case'), (('compiler', 'Context'), 'nmod'), (('(', 'Cousins'), 'punct'), (('Cousins', 'Context'), 'appos'), (('of', 'compiler'), 'case'), (('compiler', 'Cousins'), 'nmod'), ((')', 'Cousins'), 'punct'), (('Skeletal', 'Program'), 'amod'), (('Source', 'Program'), 'compound'), (('Program', 'Context'), 'appos'), (('Compiler', 'Program'), 'compound'), (('Assembler', 'Program'), 'compound'), (('Source', 'Program'), 'compound'), (('Program', 'Program'), 'compound'), (('Target', 'Program'), 'compound'), (('Assembly', 'Program'), 'compound'), (('Program', 'Program'), 'compound'), (('Relocatable', 'Code'), 'amod'), (('Object', 'Code'), 'compound'), (('Code', 'Program'), 'compound'), (('Absolute', 'Libraries'), 'amod'), (('Machine', 'Libraries'), 'compound'), (('Code', 'Libraries'), 'compound'), (('Libraries', 'Code'), 'compound'), (('&', 'Files'), 'cc'), (('Object', 'Files'), 'compound'), (('Files', 'Libraries'), 'conj'), (('Linker', 'Compiler'), 'compound'), (('/', 'Loader'), 'cc'), (('Loader', 'Preprocessor'), 'compound'), (('Preprocessor', 'Compiler'), 'compound'), (('Compiler', 'Libraries'), 'conj')]

 Named Entities are: 
>> [('#2170701', 'CARDINAL'), ('1', 'CARDINAL')]

========================== Sentence 57 ===========================

 A compiler is a program that reads a program written in source language and translates it into an equivalent program in target language. 

Tokens are: 
>> ['A', 'compiler', 'is', 'a', 'program', 'that', 'reads', 'a', 'program', 'written', 'in', 'source', 'language', 'and', 'translates', 'it', 'into', 'an', 'equivalent', 'program', 'in', 'target', 'language', '.'] 

 UPOS tags are: 
>> [('A', 'DET'), ('compiler', 'NOUN'), ('is', 'AUX'), ('a', 'DET'), ('program', 'NOUN'), ('that', 'PRON'), ('reads', 'VERB'), ('a', 'DET'), ('program', 'NOUN'), ('written', 'VERB'), ('in', 'ADP'), ('source', 'NOUN'), ('language', 'NOUN'), ('and', 'CCONJ'), ('translates', 'VERB'), ('it', 'PRON'), ('into', 'ADP'), ('an', 'DET'), ('equivalent', 'ADJ'), ('program', 'NOUN'), ('in', 'ADP'), ('target', 'NOUN'), ('language', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('A', 'DT'), ('compiler', 'NN'), ('is', 'VBZ'), ('a', 'DT'), ('program', 'NN'), ('that', 'WDT'), ('reads', 'VBZ'), ('a', 'DT'), ('program', 'NN'), ('written', 'VBN'), ('in', 'IN'), ('source', 'NN'), ('language', 'NN'), ('and', 'CC'), ('translates', 'VBZ'), ('it', 'PRP'), ('into', 'IN'), ('an', 'DT'), ('equivalent', 'JJ'), ('program', 'NN'), ('in', 'IN'), ('target', 'NN'), ('language', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('A', 'a'), ('compiler', 'compiler'), ('is', 'be'), ('a', 'a'), ('program', 'program'), ('that', 'that'), ('reads', 'read'), ('a', 'a'), ('program', 'program'), ('written', 'write'), ('in', 'in'), ('source', 'source'), ('language', 'language'), ('and', 'and'), ('translates', 'translate'), ('it', 'it'), ('into', 'into'), ('an', 'a'), ('equivalent', 'equivalent'), ('program', 'program'), ('in', 'in'), ('target', 'target'), ('language', 'language'), ('.', '.')] 

 Dependency tags are: 
>> [(('A', 'compiler'), 'det'), (('compiler', 'program'), 'nsubj'), (('is', 'program'), 'cop'), (('a', 'program'), 'det'), (('program', 'root'), 'root'), (('that', 'reads'), 'nsubj'), (('reads', 'program'), 'acl:relcl'), (('a', 'program'), 'det'), (('program', 'reads'), 'obj'), (('written', 'program'), 'acl'), (('in', 'language'), 'case'), (('source', 'language'), 'compound'), (('language', 'written'), 'obl'), (('and', 'translates'), 'cc'), (('translates', 'reads'), 'conj'), (('it', 'translates'), 'obj'), (('into', 'program'), 'case'), (('an', 'program'), 'det'), (('equivalent', 'program'), 'amod'), (('program', 'translates'), 'obl'), (('in', 'language'), 'case'), (('target', 'language'), 'compound'), (('language', 'program'), 'nmod'), (('.', 'program'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 58 ===========================

 Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1 – Introduction to Compiler Design ‹#›  Context of compiler (Cousins of compiler)    Skeletal Source Program Compiler Assembler Source Program Target Assembly  Program Relocatable Object Code Absolute Machine  Code Libraries &  Object Files Linker / Loader Preprocessor Assembler Assembler is a translator which takes the assembly program (mnemonic) as an input and generates the machine code as an output. 

Tokens are: 
>> ['Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '1', '–', 'Introduction', 'to', 'Compiler', 'Design', '‹#›', 'Context', 'of', 'compiler', '(', 'Cousins', 'of', 'compiler', ')', 'Skeletal', 'Source', 'Program', 'Compiler', 'Assembler', 'Source', 'Program', 'Target', 'Assembly', 'Program', 'Relocatable', 'Object', 'Code', 'Absolute', 'Machine', 'Code', 'Libraries', '&', 'Object', 'Files', 'Linker', '/', 'Loader', 'Preprocessor', 'Assembler', 'Assembler', 'is', 'a', 'translator', 'which', 'takes', 'the', 'assembly', 'program', '(', 'mnemonic', ')', 'as', 'an', 'input', 'and', 'generates', 'the', 'machine', 'code', 'as', 'an', 'output', '.'] 

 UPOS tags are: 
>> [('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'PROPN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Introduction', 'NOUN'), ('to', 'ADP'), ('Compiler', 'PROPN'), ('Design', 'PROPN'), ('‹#›', 'PROPN'), ('Context', 'PROPN'), ('of', 'ADP'), ('compiler', 'NOUN'), ('(', 'PUNCT'), ('Cousins', 'PROPN'), ('of', 'ADP'), ('compiler', 'NOUN'), (')', 'PUNCT'), ('Skeletal', 'ADJ'), ('Source', 'PROPN'), ('Program', 'PROPN'), ('Compiler', 'PROPN'), ('Assembler', 'PROPN'), ('Source', 'PROPN'), ('Program', 'PROPN'), ('Target', 'PROPN'), ('Assembly', 'PROPN'), ('Program', 'PROPN'), ('Relocatable', 'ADJ'), ('Object', 'PROPN'), ('Code', 'PROPN'), ('Absolute', 'ADJ'), ('Machine', 'PROPN'), ('Code', 'PROPN'), ('Libraries', 'PROPN'), ('&', 'CCONJ'), ('Object', 'PROPN'), ('Files', 'PROPN'), ('Linker', 'PROPN'), ('/', 'SYM'), ('Loader', 'PROPN'), ('Preprocessor', 'PROPN'), ('Assembler', 'PROPN'), ('Assembler', 'PROPN'), ('is', 'AUX'), ('a', 'DET'), ('translator', 'NOUN'), ('which', 'PRON'), ('takes', 'VERB'), ('the', 'DET'), ('assembly', 'NOUN'), ('program', 'NOUN'), ('(', 'PUNCT'), ('mnemonic', 'ADJ'), (')', 'PUNCT'), ('as', 'ADP'), ('an', 'DET'), ('input', 'NOUN'), ('and', 'CCONJ'), ('generates', 'VERB'), ('the', 'DET'), ('machine', 'NOUN'), ('code', 'NOUN'), ('as', 'ADP'), ('an', 'DET'), ('output', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NNP'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('1', 'CD'), ('–', ':'), ('Introduction', 'NN'), ('to', 'IN'), ('Compiler', 'NNP'), ('Design', 'NNP'), ('‹#›', 'NNP'), ('Context', 'NNP'), ('of', 'IN'), ('compiler', 'NN'), ('(', '-LRB-'), ('Cousins', 'NNPS'), ('of', 'IN'), ('compiler', 'NN'), (')', '-RRB-'), ('Skeletal', 'NNP'), ('Source', 'NNP'), ('Program', 'NNP'), ('Compiler', 'NNP'), ('Assembler', 'NNP'), ('Source', 'NNP'), ('Program', 'NNP'), ('Target', 'NNP'), ('Assembly', 'NNP'), ('Program', 'NNP'), ('Relocatable', 'NNP'), ('Object', 'NNP'), ('Code', 'NNP'), ('Absolute', 'NNP'), ('Machine', 'NNP'), ('Code', 'NNP'), ('Libraries', 'NNPS'), ('&', 'CC'), ('Object', 'NNP'), ('Files', 'NNP'), ('Linker', 'NNP'), ('/', 'SYM'), ('Loader', 'NNP'), ('Preprocessor', 'NNP'), ('Assembler', 'NNP'), ('Assembler', 'NNP'), ('is', 'VBZ'), ('a', 'DT'), ('translator', 'NN'), ('which', 'WDT'), ('takes', 'VBZ'), ('the', 'DT'), ('assembly', 'NN'), ('program', 'NN'), ('(', '-LRB-'), ('mnemonic', 'JJ'), (')', '-RRB-'), ('as', 'IN'), ('an', 'DT'), ('input', 'NN'), ('and', 'CC'), ('generates', 'VBZ'), ('the', 'DT'), ('machine', 'NN'), ('code', 'NN'), ('as', 'IN'), ('an', 'DT'), ('output', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'CD'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '-'), ('Introduction', 'introduction'), ('to', 'to'), ('Compiler', 'Compiler'), ('Design', 'Design'), ('‹#›', '‹#›'), ('Context', 'Context'), ('of', 'of'), ('compiler', 'compiler'), ('(', '('), ('Cousins', 'Cousins'), ('of', 'of'), ('compiler', 'compiler'), (')', ')'), ('Skeletal', 'Skeletal'), ('Source', 'Source'), ('Program', 'Program'), ('Compiler', 'Compiler'), ('Assembler', 'Assembler'), ('Source', 'Source'), ('Program', 'Program'), ('Target', 'Target'), ('Assembly', 'Assembly'), ('Program', 'Program'), ('Relocatable', 'relocatable'), ('Object', 'object'), ('Code', 'code'), ('Absolute', 'absolute'), ('Machine', 'Machine'), ('Code', 'code'), ('Libraries', 'Library'), ('&', '&'), ('Object', 'object'), ('Files', 'Files'), ('Linker', 'Linker'), ('/', '/'), ('Loader', 'Loader'), ('Preprocessor', 'Preprocessor'), ('Assembler', 'Assembler'), ('Assembler', 'Assembler'), ('is', 'be'), ('a', 'a'), ('translator', 'translator'), ('which', 'which'), ('takes', 'take'), ('the', 'the'), ('assembly', 'assembly'), ('program', 'program'), ('(', '('), ('mnemonic', 'mnemonic'), (')', ')'), ('as', 'as'), ('an', 'a'), ('input', 'input'), ('and', 'and'), ('generates', 'generate'), ('the', 'the'), ('machine', 'machine'), ('code', 'code'), ('as', 'as'), ('an', 'a'), ('output', 'output'), ('.', '.')] 

 Dependency tags are: 
>> [(('Prof.', 'translator'), 'nsubj'), (('Dixita', 'Prof.'), 'flat'), (('B', 'Prof.'), 'flat'), (('Kagathara', 'Prof.'), 'flat'), (('#', 'Prof.'), 'appos'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', '#'), 'appos'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', 'Prof.'), 'appos'), (('1', 'Unit'), 'dep'), (('–', 'Introduction'), 'punct'), (('Introduction', 'Prof.'), 'appos'), (('to', 'Context'), 'case'), (('Compiler', 'Design'), 'compound'), (('Design', 'Context'), 'compound'), (('‹#›', 'Context'), 'compound'), (('Context', 'Introduction'), 'nmod'), (('of', 'compiler'), 'case'), (('compiler', 'Context'), 'nmod'), (('(', 'Cousins'), 'punct'), (('Cousins', 'Context'), 'appos'), (('of', 'compiler'), 'case'), (('compiler', 'Cousins'), 'nmod'), ((')', 'Cousins'), 'punct'), (('Skeletal', 'Program'), 'amod'), (('Source', 'Program'), 'compound'), (('Program', 'Program'), 'compound'), (('Compiler', 'Program'), 'compound'), (('Assembler', 'Program'), 'compound'), (('Source', 'Program'), 'compound'), (('Program', 'Program'), 'compound'), (('Target', 'Program'), 'compound'), (('Assembly', 'Program'), 'compound'), (('Program', 'Code'), 'compound'), (('Relocatable', 'Code'), 'amod'), (('Object', 'Code'), 'compound'), (('Code', 'Libraries'), 'compound'), (('Absolute', 'Libraries'), 'amod'), (('Machine', 'Libraries'), 'compound'), (('Code', 'Libraries'), 'compound'), (('Libraries', 'Linker'), 'compound'), (('&', 'Files'), 'cc'), (('Object', 'Files'), 'compound'), (('Files', 'Linker'), 'compound'), (('Linker', 'translator'), 'nsubj'), (('/', 'Assembler'), 'cc'), (('Loader', 'Assembler'), 'compound'), (('Preprocessor', 'Assembler'), 'compound'), (('Assembler', 'Assembler'), 'compound'), (('Assembler', 'Linker'), 'conj'), (('is', 'translator'), 'cop'), (('a', 'translator'), 'det'), (('translator', 'root'), 'root'), (('which', 'takes'), 'nsubj'), (('takes', 'translator'), 'acl:relcl'), (('the', 'program'), 'det'), (('assembly', 'program'), 'compound'), (('program', 'takes'), 'obj'), (('(', 'mnemonic'), 'punct'), (('mnemonic', 'program'), 'appos'), ((')', 'mnemonic'), 'punct'), (('as', 'input'), 'case'), (('an', 'input'), 'det'), (('input', 'takes'), 'obl'), (('and', 'generates'), 'cc'), (('generates', 'takes'), 'conj'), (('the', 'code'), 'det'), (('machine', 'code'), 'compound'), (('code', 'generates'), 'obj'), (('as', 'output'), 'case'), (('an', 'output'), 'det'), (('output', 'generates'), 'obl'), (('.', 'translator'), 'punct')]

 Named Entities are: 
>> [('2170701', 'CARDINAL'), ('1', 'CARDINAL'), ('Skeletal Source Program Compiler Assembler Source Program Target Assembly  Program Relocatable Object Code Absolute Machine  Code Libraries &  Object Files Linker / Loader Preprocessor Assembler Assembler', 'WORK_OF_ART')]

========================== Sentence 59 ===========================

 Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1 – Introduction to Compiler Design ‹#›  Context of compiler (Cousins of compiler)    Skeletal Source Program Compiler Assembler Source Program Target Assembly  Program Relocatable Object Code Absolute Machine  Code Libraries &  Object Files Linker / Loader Preprocessor Linker Linker  makes a single program from a several files of relocatable machine code. 

Tokens are: 
>> ['Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '1', '–', 'Introduction', 'to', 'Compiler', 'Design', '‹#›', 'Context', 'of', 'compiler', '(', 'Cousins', 'of', 'compiler', ')', 'Skeletal', 'Source', 'Program', 'Compiler', 'Assembler', 'Source', 'Program', 'Target', 'Assembly', 'Program', 'Relocatable', 'Object', 'Code', 'Absolute', 'Machine', 'Code', 'Libraries', '&', 'Object', 'Files', 'Linker', '/', 'Loader', 'Preprocessor', 'Linker', 'Linker', 'makes', 'a', 'single', 'program', 'from', 'a', 'several', 'files', 'of', 'relocatable', 'machine', 'code', '.'] 

 UPOS tags are: 
>> [('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Introduction', 'NOUN'), ('to', 'ADP'), ('Compiler', 'PROPN'), ('Design', 'PROPN'), ('‹#›', 'PROPN'), ('Context', 'PROPN'), ('of', 'ADP'), ('compiler', 'NOUN'), ('(', 'PUNCT'), ('Cousins', 'PROPN'), ('of', 'ADP'), ('compiler', 'NOUN'), (')', 'PUNCT'), ('Skeletal', 'ADJ'), ('Source', 'PROPN'), ('Program', 'PROPN'), ('Compiler', 'PROPN'), ('Assembler', 'PROPN'), ('Source', 'PROPN'), ('Program', 'PROPN'), ('Target', 'PROPN'), ('Assembly', 'PROPN'), ('Program', 'PROPN'), ('Relocatable', 'ADJ'), ('Object', 'PROPN'), ('Code', 'PROPN'), ('Absolute', 'ADJ'), ('Machine', 'PROPN'), ('Code', 'PROPN'), ('Libraries', 'PROPN'), ('&', 'CCONJ'), ('Object', 'PROPN'), ('Files', 'PROPN'), ('Linker', 'PROPN'), ('/', 'SYM'), ('Loader', 'PROPN'), ('Preprocessor', 'PROPN'), ('Linker', 'PROPN'), ('Linker', 'PROPN'), ('makes', 'VERB'), ('a', 'DET'), ('single', 'ADJ'), ('program', 'NOUN'), ('from', 'ADP'), ('a', 'DET'), ('several', 'ADJ'), ('files', 'NOUN'), ('of', 'ADP'), ('relocatable', 'ADJ'), ('machine', 'NOUN'), ('code', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('1', 'CD'), ('–', ':'), ('Introduction', 'NN'), ('to', 'IN'), ('Compiler', 'NNP'), ('Design', 'NNP'), ('‹#›', 'NNP'), ('Context', 'NNP'), ('of', 'IN'), ('compiler', 'NN'), ('(', '-LRB-'), ('Cousins', 'NNPS'), ('of', 'IN'), ('compiler', 'NN'), (')', '-RRB-'), ('Skeletal', 'NNP'), ('Source', 'NNP'), ('Program', 'NNP'), ('Compiler', 'NNP'), ('Assembler', 'NNP'), ('Source', 'NNP'), ('Program', 'NNP'), ('Target', 'NNP'), ('Assembly', 'NNP'), ('Program', 'NNP'), ('Relocatable', 'NNP'), ('Object', 'NNP'), ('Code', 'NNP'), ('Absolute', 'NNP'), ('Machine', 'NNP'), ('Code', 'NNP'), ('Libraries', 'NNPS'), ('&', 'CC'), ('Object', 'NNP'), ('Files', 'NNP'), ('Linker', 'NNP'), ('/', ','), ('Loader', 'NNP'), ('Preprocessor', 'NNP'), ('Linker', 'NNP'), ('Linker', 'NNP'), ('makes', 'VBZ'), ('a', 'DT'), ('single', 'JJ'), ('program', 'NN'), ('from', 'IN'), ('a', 'DT'), ('several', 'JJ'), ('files', 'NNS'), ('of', 'IN'), ('relocatable', 'JJ'), ('machine', 'NN'), ('code', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '-'), ('Introduction', 'introduction'), ('to', 'to'), ('Compiler', 'Compiler'), ('Design', 'Design'), ('‹#›', '‹#›'), ('Context', 'Context'), ('of', 'of'), ('compiler', 'compiler'), ('(', '('), ('Cousins', 'Cousins'), ('of', 'of'), ('compiler', 'compiler'), (')', ')'), ('Skeletal', 'Skeletal'), ('Source', 'Source'), ('Program', 'Program'), ('Compiler', 'Compiler'), ('Assembler', 'Assembler'), ('Source', 'Source'), ('Program', 'Program'), ('Target', 'Target'), ('Assembly', 'Assembly'), ('Program', 'Program'), ('Relocatable', 'relocatable'), ('Object', 'object'), ('Code', 'code'), ('Absolute', 'absolute'), ('Machine', 'Machine'), ('Code', 'code'), ('Libraries', 'Library'), ('&', '&'), ('Object', 'object'), ('Files', 'Files'), ('Linker', 'Linker'), ('/', '/'), ('Loader', 'Loader'), ('Preprocessor', 'Preprocessor'), ('Linker', 'Linker'), ('Linker', 'Linker'), ('makes', 'make'), ('a', 'a'), ('single', 'single'), ('program', 'program'), ('from', 'from'), ('a', 'a'), ('several', 'several'), ('files', 'file'), ('of', 'of'), ('relocatable', 'relocatable'), ('machine', 'machine'), ('code', 'code'), ('.', '.')] 

 Dependency tags are: 
>> [(('Prof.', 'makes'), 'nsubj'), (('Dixita', 'Prof.'), 'flat'), (('B', 'Prof.'), 'flat'), (('Kagathara', 'Prof.'), 'flat'), (('#', 'Prof.'), 'appos'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', 'Unit'), 'compound'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', 'Prof.'), 'appos'), (('1', 'Unit'), 'dep'), (('–', 'Introduction'), 'punct'), (('Introduction', 'Prof.'), 'appos'), (('to', 'Context'), 'case'), (('Compiler', 'Design'), 'compound'), (('Design', 'Context'), 'compound'), (('‹#›', 'Context'), 'compound'), (('Context', 'Introduction'), 'nmod'), (('of', 'compiler'), 'case'), (('compiler', 'Context'), 'nmod'), (('(', 'Cousins'), 'punct'), (('Cousins', 'Context'), 'appos'), (('of', 'compiler'), 'case'), (('compiler', 'Cousins'), 'nmod'), ((')', 'Cousins'), 'punct'), (('Skeletal', 'Source'), 'amod'), (('Source', 'Program'), 'compound'), (('Program', 'Program'), 'compound'), (('Compiler', 'Program'), 'compound'), (('Assembler', 'Program'), 'compound'), (('Source', 'Program'), 'compound'), (('Program', 'Program'), 'compound'), (('Target', 'Program'), 'compound'), (('Assembly', 'Program'), 'compound'), (('Program', 'Code'), 'compound'), (('Relocatable', 'Code'), 'amod'), (('Object', 'Code'), 'compound'), (('Code', 'Libraries'), 'compound'), (('Absolute', 'Libraries'), 'amod'), (('Machine', 'Libraries'), 'compound'), (('Code', 'Libraries'), 'compound'), (('Libraries', 'Linker'), 'compound'), (('&', 'Object'), 'cc'), (('Object', 'Libraries'), 'conj'), (('Files', 'Linker'), 'compound'), (('Linker', 'makes'), 'nsubj'), (('/', 'Loader'), 'cc'), (('Loader', 'Preprocessor'), 'compound'), (('Preprocessor', 'Linker'), 'compound'), (('Linker', 'Linker'), 'compound'), (('Linker', 'makes'), 'nsubj'), (('makes', 'root'), 'root'), (('a', 'program'), 'det'), (('single', 'program'), 'amod'), (('program', 'makes'), 'obj'), (('from', 'files'), 'case'), (('a', 'files'), 'det'), (('several', 'files'), 'amod'), (('files', 'program'), 'nmod'), (('of', 'code'), 'case'), (('relocatable', 'code'), 'amod'), (('machine', 'code'), 'compound'), (('code', 'files'), 'nmod'), (('.', 'makes'), 'punct')]

 Named Entities are: 
>> [('2170701', 'CARDINAL'), ('1', 'CARDINAL'), ('Skeletal Source Program Compiler Assembler Source Program Target Assembly  Program Relocatable Object Code Absolute Machine  Code Libraries &  Object Files Linker / Loader Preprocessor Linker Linker', 'WORK_OF_ART')]

========================== Sentence 60 ===========================

 These files may have been the result of several different compilation, and one or more library files. 

Tokens are: 
>> ['These', 'files', 'may', 'have', 'been', 'the', 'result', 'of', 'several', 'different', 'compilation', ',', 'and', 'one', 'or', 'more', 'library', 'files', '.'] 

 UPOS tags are: 
>> [('These', 'DET'), ('files', 'NOUN'), ('may', 'AUX'), ('have', 'AUX'), ('been', 'AUX'), ('the', 'DET'), ('result', 'NOUN'), ('of', 'ADP'), ('several', 'ADJ'), ('different', 'ADJ'), ('compilation', 'NOUN'), (',', 'PUNCT'), ('and', 'CCONJ'), ('one', 'NUM'), ('or', 'CCONJ'), ('more', 'ADJ'), ('library', 'NOUN'), ('files', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('These', 'DT'), ('files', 'NNS'), ('may', 'MD'), ('have', 'VB'), ('been', 'VBN'), ('the', 'DT'), ('result', 'NN'), ('of', 'IN'), ('several', 'JJ'), ('different', 'JJ'), ('compilation', 'NN'), (',', ','), ('and', 'CC'), ('one', 'CD'), ('or', 'CC'), ('more', 'JJR'), ('library', 'NN'), ('files', 'NNS'), ('.', '.')] 

 Lemmas are: 
>> [('These', 'this'), ('files', 'file'), ('may', 'may'), ('have', 'have'), ('been', 'be'), ('the', 'the'), ('result', 'result'), ('of', 'of'), ('several', 'several'), ('different', 'different'), ('compilation', 'compilation'), (',', ','), ('and', 'and'), ('one', 'one'), ('or', 'or'), ('more', 'more'), ('library', 'library'), ('files', 'file'), ('.', '.')] 

 Dependency tags are: 
>> [(('These', 'files'), 'det'), (('files', 'result'), 'nsubj'), (('may', 'result'), 'aux'), (('have', 'result'), 'aux'), (('been', 'result'), 'cop'), (('the', 'result'), 'det'), (('result', 'root'), 'root'), (('of', 'compilation'), 'case'), (('several', 'compilation'), 'amod'), (('different', 'compilation'), 'amod'), (('compilation', 'result'), 'nmod'), ((',', 'files'), 'punct'), (('and', 'files'), 'cc'), (('one', 'files'), 'nummod'), (('or', 'more'), 'cc'), (('more', 'one'), 'conj'), (('library', 'files'), 'compound'), (('files', 'result'), 'conj'), (('.', 'result'), 'punct')]

 Named Entities are: 
>> [('one', 'CARDINAL')]

========================== Sentence 61 ===========================

 Loader 

Tokens are: 
>> ['Loader'] 

 UPOS tags are: 
>> [('Loader', 'NOUN')] 

 XPOS tags are: 
>> [('Loader', 'NN')] 

 Lemmas are: 
>> [('Loader', 'loader')] 

 Dependency tags are: 
>> [(('Loader', 'root'), 'root')]

 Named Entities are: 
>> [('Loader', 'PERSON')]

========================== Sentence 62 ===========================

 The process of loading consists of: Taking relocatable machine code Altering the relocatable address  Placing the altered instructions and data in memory at the proper location. 

Tokens are: 
>> ['The', 'process', 'of', 'loading', 'consists', 'of', ':', 'Taking', 'relocatable', 'machine', 'code', 'Altering', 'the', 'relocatable', 'address', 'Placing', 'the', 'altered', 'instructions', 'and', 'data', 'in', 'memory', 'at', 'the', 'proper', 'location', '.'] 

 UPOS tags are: 
>> [('The', 'DET'), ('process', 'NOUN'), ('of', 'ADP'), ('loading', 'NOUN'), ('consists', 'VERB'), ('of', 'ADP'), (':', 'PUNCT'), ('Taking', 'VERB'), ('relocatable', 'ADJ'), ('machine', 'NOUN'), ('code', 'NOUN'), ('Altering', 'VERB'), ('the', 'DET'), ('relocatable', 'ADJ'), ('address', 'NOUN'), ('Placing', 'VERB'), ('the', 'DET'), ('altered', 'VERB'), ('instructions', 'NOUN'), ('and', 'CCONJ'), ('data', 'NOUN'), ('in', 'ADP'), ('memory', 'NOUN'), ('at', 'ADP'), ('the', 'DET'), ('proper', 'ADJ'), ('location', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('The', 'DT'), ('process', 'NN'), ('of', 'IN'), ('loading', 'NN'), ('consists', 'VBZ'), ('of', 'IN'), (':', ':'), ('Taking', 'VBG'), ('relocatable', 'JJ'), ('machine', 'NN'), ('code', 'NN'), ('Altering', 'VBG'), ('the', 'DT'), ('relocatable', 'JJ'), ('address', 'NN'), ('Placing', 'VBG'), ('the', 'DT'), ('altered', 'VBN'), ('instructions', 'NNS'), ('and', 'CC'), ('data', 'NNS'), ('in', 'IN'), ('memory', 'NN'), ('at', 'IN'), ('the', 'DT'), ('proper', 'JJ'), ('location', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('The', 'the'), ('process', 'process'), ('of', 'of'), ('loading', 'loading'), ('consists', 'consist'), ('of', 'of'), (':', ':'), ('Taking', 'take'), ('relocatable', 'relocatable'), ('machine', 'machine'), ('code', 'code'), ('Altering', 'alter'), ('the', 'the'), ('relocatable', 'relocatable'), ('address', 'address'), ('Placing', 'place'), ('the', 'the'), ('altered', 'alter'), ('instructions', 'instruction'), ('and', 'and'), ('data', 'datum'), ('in', 'in'), ('memory', 'memory'), ('at', 'at'), ('the', 'the'), ('proper', 'proper'), ('location', 'location'), ('.', '.')] 

 Dependency tags are: 
>> [(('The', 'process'), 'det'), (('process', 'consists'), 'nsubj'), (('of', 'loading'), 'case'), (('loading', 'process'), 'nmod'), (('consists', 'root'), 'root'), (('of', 'Taking'), 'mark'), ((':', 'Taking'), 'punct'), (('Taking', 'consists'), 'advcl'), (('relocatable', 'code'), 'amod'), (('machine', 'code'), 'compound'), (('code', 'Taking'), 'obj'), (('Altering', 'Taking'), 'xcomp'), (('the', 'address'), 'det'), (('relocatable', 'address'), 'amod'), (('address', 'Altering'), 'obj'), (('Placing', 'Altering'), 'advcl'), (('the', 'instructions'), 'det'), (('altered', 'instructions'), 'amod'), (('instructions', 'Placing'), 'obj'), (('and', 'data'), 'cc'), (('data', 'instructions'), 'conj'), (('in', 'memory'), 'case'), (('memory', 'instructions'), 'nmod'), (('at', 'location'), 'case'), (('the', 'location'), 'det'), (('proper', 'location'), 'amod'), (('location', 'Placing'), 'obl'), (('.', 'consists'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 63 ===========================

 Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1 – Introduction to Compiler Design ‹#›  Pass structure        Pass structure 

Tokens are: 
>> ['Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '1', '–', 'Introduction', 'to', 'Compiler', 'Design', '‹#›', 'Pass', 'structure', 'Pass', 'structure'] 

 UPOS tags are: 
>> [('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Introduction', 'NOUN'), ('to', 'ADP'), ('Compiler', 'NOUN'), ('Design', 'NOUN'), ('‹#›', 'NOUN'), ('Pass', 'NOUN'), ('structure', 'NOUN'), ('Pass', 'NOUN'), ('structure', 'NOUN')] 

 XPOS tags are: 
>> [('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('1', 'CD'), ('–', ','), ('Introduction', 'NN'), ('to', 'IN'), ('Compiler', 'NN'), ('Design', 'NN'), ('‹#›', 'NN'), ('Pass', 'NN'), ('structure', 'NN'), ('Pass', 'NN'), ('structure', 'NN')] 

 Lemmas are: 
>> [('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '-'), ('Introduction', 'introduction'), ('to', 'to'), ('Compiler', 'compiler'), ('Design', 'design'), ('‹#›', '‹#›'), ('Pass', 'pass'), ('structure', 'structure'), ('Pass', 'pass'), ('structure', 'structure')] 

 Dependency tags are: 
>> [(('Prof.', 'root'), 'root'), (('Dixita', 'Prof.'), 'flat'), (('B', 'Kagathara'), 'compound'), (('Kagathara', 'Prof.'), 'flat'), (('#', 'Prof.'), 'list'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', 'Unit'), 'compound'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', 'Prof.'), 'list'), (('1', 'Unit'), 'nummod'), (('–', 'Introduction'), 'punct'), (('Introduction', 'Prof.'), 'list'), (('to', 'structure'), 'case'), (('Compiler', 'Design'), 'compound'), (('Design', 'Introduction'), 'nmod'), (('‹#›', 'structure'), 'compound'), (('Pass', 'structure'), 'compound'), (('structure', 'structure'), 'compound'), (('Pass', 'structure'), 'compound'), (('structure', 'Introduction'), 'nmod')]

 Named Entities are: 
>> [('2170701', 'CARDINAL'), ('1', 'CARDINAL')]

========================== Sentence 64 ===========================

 One complete scan of a source program is called pass. 

Tokens are: 
>> ['One', 'complete', 'scan', 'of', 'a', 'source', 'program', 'is', 'called', 'pass', '.'] 

 UPOS tags are: 
>> [('One', 'NUM'), ('complete', 'ADJ'), ('scan', 'NOUN'), ('of', 'ADP'), ('a', 'DET'), ('source', 'NOUN'), ('program', 'NOUN'), ('is', 'AUX'), ('called', 'VERB'), ('pass', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('One', 'CD'), ('complete', 'JJ'), ('scan', 'NN'), ('of', 'IN'), ('a', 'DT'), ('source', 'NN'), ('program', 'NN'), ('is', 'VBZ'), ('called', 'VBN'), ('pass', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('One', 'one'), ('complete', 'complete'), ('scan', 'scan'), ('of', 'of'), ('a', 'a'), ('source', 'source'), ('program', 'program'), ('is', 'be'), ('called', 'call'), ('pass', 'pass'), ('.', '.')] 

 Dependency tags are: 
>> [(('One', 'scan'), 'nummod'), (('complete', 'scan'), 'amod'), (('scan', 'called'), 'nsubj:pass'), (('of', 'program'), 'case'), (('a', 'program'), 'det'), (('source', 'program'), 'compound'), (('program', 'scan'), 'nmod'), (('is', 'called'), 'aux:pass'), (('called', 'root'), 'root'), (('pass', 'called'), 'xcomp'), (('.', 'called'), 'punct')]

 Named Entities are: 
>> [('One', 'CARDINAL')]

========================== Sentence 65 ===========================

 Pass includes reading an input file and writing to the output file. 

Tokens are: 
>> ['Pass', 'includes', 'reading', 'an', 'input', 'file', 'and', 'writing', 'to', 'the', 'output', 'file', '.'] 

 UPOS tags are: 
>> [('Pass', 'VERB'), ('includes', 'VERB'), ('reading', 'VERB'), ('an', 'DET'), ('input', 'NOUN'), ('file', 'NOUN'), ('and', 'CCONJ'), ('writing', 'VERB'), ('to', 'ADP'), ('the', 'DET'), ('output', 'NOUN'), ('file', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Pass', 'VB'), ('includes', 'VBZ'), ('reading', 'VBG'), ('an', 'DT'), ('input', 'NN'), ('file', 'NN'), ('and', 'CC'), ('writing', 'VBG'), ('to', 'IN'), ('the', 'DT'), ('output', 'NN'), ('file', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('Pass', 'pass'), ('includes', 'include'), ('reading', 'read'), ('an', 'a'), ('input', 'input'), ('file', 'file'), ('and', 'and'), ('writing', 'write'), ('to', 'to'), ('the', 'the'), ('output', 'output'), ('file', 'file'), ('.', '.')] 

 Dependency tags are: 
>> [(('Pass', 'root'), 'root'), (('includes', 'Pass'), 'xcomp'), (('reading', 'includes'), 'xcomp'), (('an', 'file'), 'det'), (('input', 'file'), 'compound'), (('file', 'reading'), 'obj'), (('and', 'writing'), 'cc'), (('writing', 'reading'), 'conj'), (('to', 'file'), 'case'), (('the', 'file'), 'det'), (('output', 'file'), 'compound'), (('file', 'writing'), 'obl'), (('.', 'Pass'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 66 ===========================

 In a single pass compiler analysis of source statement is immediately followed by synthesis of equivalent target statement. 

Tokens are: 
>> ['In', 'a', 'single', 'pass', 'compiler', 'analysis', 'of', 'source', 'statement', 'is', 'immediately', 'followed', 'by', 'synthesis', 'of', 'equivalent', 'target', 'statement', '.'] 

 UPOS tags are: 
>> [('In', 'ADP'), ('a', 'DET'), ('single', 'ADJ'), ('pass', 'NOUN'), ('compiler', 'NOUN'), ('analysis', 'NOUN'), ('of', 'ADP'), ('source', 'NOUN'), ('statement', 'NOUN'), ('is', 'AUX'), ('immediately', 'ADV'), ('followed', 'VERB'), ('by', 'ADP'), ('synthesis', 'NOUN'), ('of', 'ADP'), ('equivalent', 'ADJ'), ('target', 'NOUN'), ('statement', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('In', 'IN'), ('a', 'DT'), ('single', 'JJ'), ('pass', 'NN'), ('compiler', 'NN'), ('analysis', 'NN'), ('of', 'IN'), ('source', 'NN'), ('statement', 'NN'), ('is', 'VBZ'), ('immediately', 'RB'), ('followed', 'VBN'), ('by', 'IN'), ('synthesis', 'NN'), ('of', 'IN'), ('equivalent', 'JJ'), ('target', 'NN'), ('statement', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('In', 'in'), ('a', 'a'), ('single', 'single'), ('pass', 'pass'), ('compiler', 'compiler'), ('analysis', 'analysis'), ('of', 'of'), ('source', 'source'), ('statement', 'statement'), ('is', 'be'), ('immediately', 'immediately'), ('followed', 'follow'), ('by', 'by'), ('synthesis', 'synthesis'), ('of', 'of'), ('equivalent', 'equivalent'), ('target', 'target'), ('statement', 'statement'), ('.', '.')] 

 Dependency tags are: 
>> [(('In', 'analysis'), 'case'), (('a', 'analysis'), 'det'), (('single', 'analysis'), 'amod'), (('pass', 'analysis'), 'compound'), (('compiler', 'analysis'), 'compound'), (('analysis', 'followed'), 'obl'), (('of', 'statement'), 'case'), (('source', 'statement'), 'compound'), (('statement', 'analysis'), 'nmod'), (('is', 'followed'), 'aux:pass'), (('immediately', 'followed'), 'advmod'), (('followed', 'root'), 'root'), (('by', 'synthesis'), 'case'), (('synthesis', 'followed'), 'obl'), (('of', 'statement'), 'case'), (('equivalent', 'statement'), 'amod'), (('target', 'statement'), 'compound'), (('statement', 'synthesis'), 'nmod'), (('.', 'followed'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 67 ===========================

 While in a two pass compiler intermediate code is generated between analysis and synthesis phase. 

Tokens are: 
>> ['While', 'in', 'a', 'two', 'pass', 'compiler', 'intermediate', 'code', 'is', 'generated', 'between', 'analysis', 'and', 'synthesis', 'phase', '.'] 

 UPOS tags are: 
>> [('While', 'SCONJ'), ('in', 'ADP'), ('a', 'DET'), ('two', 'NUM'), ('pass', 'NOUN'), ('compiler', 'NOUN'), ('intermediate', 'ADJ'), ('code', 'NOUN'), ('is', 'AUX'), ('generated', 'VERB'), ('between', 'ADP'), ('analysis', 'NOUN'), ('and', 'CCONJ'), ('synthesis', 'NOUN'), ('phase', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('While', 'IN'), ('in', 'IN'), ('a', 'DT'), ('two', 'CD'), ('pass', 'NN'), ('compiler', 'NN'), ('intermediate', 'JJ'), ('code', 'NN'), ('is', 'VBZ'), ('generated', 'VBN'), ('between', 'IN'), ('analysis', 'NN'), ('and', 'CC'), ('synthesis', 'NN'), ('phase', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('While', 'while'), ('in', 'in'), ('a', 'a'), ('two', 'two'), ('pass', 'pass'), ('compiler', 'compiler'), ('intermediate', 'intermediate'), ('code', 'code'), ('is', 'be'), ('generated', 'generate'), ('between', 'between'), ('analysis', 'analysis'), ('and', 'and'), ('synthesis', 'synthesis'), ('phase', 'phase'), ('.', '.')] 

 Dependency tags are: 
>> [(('While', 'generated'), 'mark'), (('in', 'compiler'), 'case'), (('a', 'compiler'), 'det'), (('two', 'compiler'), 'nummod'), (('pass', 'compiler'), 'compound'), (('compiler', 'generated'), 'obl'), (('intermediate', 'code'), 'amod'), (('code', 'generated'), 'nsubj:pass'), (('is', 'generated'), 'aux:pass'), (('generated', 'root'), 'root'), (('between', 'analysis'), 'case'), (('analysis', 'generated'), 'obl'), (('and', 'phase'), 'cc'), (('synthesis', 'phase'), 'compound'), (('phase', 'analysis'), 'conj'), (('.', 'generated'), 'punct')]

 Named Entities are: 
>> [('two', 'CARDINAL')]

========================== Sentence 68 ===========================

 It is difficult to compile the source program into single pass due to: forward reference       Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1 – Introduction to Compiler Design ‹#›  Pass structure Forward reference: A forward reference of a program entity is a reference to the entity which precedes its definition in the program. 

Tokens are: 
>> ['It', 'is', 'difficult', 'to', 'compile', 'the', 'source', 'program', 'into', 'single', 'pass', 'due', 'to', ':', 'forward', 'reference', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '1', '–', 'Introduction', 'to', 'Compiler', 'Design', '‹#›', 'Pass', 'structure', 'Forward', 'reference', ':', 'A', 'forward', 'reference', 'of', 'a', 'program', 'entity', 'is', 'a', 'reference', 'to', 'the', 'entity', 'which', 'precedes', 'its', 'definition', 'in', 'the', 'program', '.'] 

 UPOS tags are: 
>> [('It', 'PRON'), ('is', 'AUX'), ('difficult', 'ADJ'), ('to', 'PART'), ('compile', 'VERB'), ('the', 'DET'), ('source', 'NOUN'), ('program', 'NOUN'), ('into', 'ADP'), ('single', 'ADJ'), ('pass', 'NOUN'), ('due', 'ADP'), ('to', 'ADP'), (':', 'PUNCT'), ('forward', 'ADJ'), ('reference', 'NOUN'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Introduction', 'NOUN'), ('to', 'ADP'), ('Compiler', 'PROPN'), ('Design', 'PROPN'), ('‹#›', 'NOUN'), ('Pass', 'NOUN'), ('structure', 'NOUN'), ('Forward', 'ADJ'), ('reference', 'NOUN'), (':', 'PUNCT'), ('A', 'DET'), ('forward', 'ADJ'), ('reference', 'NOUN'), ('of', 'ADP'), ('a', 'DET'), ('program', 'NOUN'), ('entity', 'NOUN'), ('is', 'AUX'), ('a', 'DET'), ('reference', 'NOUN'), ('to', 'ADP'), ('the', 'DET'), ('entity', 'NOUN'), ('which', 'PRON'), ('precedes', 'VERB'), ('its', 'PRON'), ('definition', 'NOUN'), ('in', 'ADP'), ('the', 'DET'), ('program', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('It', 'PRP'), ('is', 'VBZ'), ('difficult', 'JJ'), ('to', 'TO'), ('compile', 'VB'), ('the', 'DT'), ('source', 'NN'), ('program', 'NN'), ('into', 'IN'), ('single', 'JJ'), ('pass', 'NN'), ('due', 'IN'), ('to', 'IN'), (':', ':'), ('forward', 'JJ'), ('reference', 'NN'), ('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('1', 'CD'), ('–', ':'), ('Introduction', 'NN'), ('to', 'IN'), ('Compiler', 'NNP'), ('Design', 'NNP'), ('‹#›', 'NN'), ('Pass', 'NN'), ('structure', 'NN'), ('Forward', 'JJ'), ('reference', 'NN'), (':', ':'), ('A', 'DT'), ('forward', 'JJ'), ('reference', 'NN'), ('of', 'IN'), ('a', 'DT'), ('program', 'NN'), ('entity', 'NN'), ('is', 'VBZ'), ('a', 'DT'), ('reference', 'NN'), ('to', 'IN'), ('the', 'DT'), ('entity', 'NN'), ('which', 'WDT'), ('precedes', 'VBZ'), ('its', 'PRP$'), ('definition', 'NN'), ('in', 'IN'), ('the', 'DT'), ('program', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('It', 'it'), ('is', 'be'), ('difficult', 'difficult'), ('to', 'to'), ('compile', 'compile'), ('the', 'the'), ('source', 'source'), ('program', 'program'), ('into', 'into'), ('single', 'single'), ('pass', 'pass'), ('due', 'due'), ('to', 'to'), (':', ':'), ('forward', 'forward'), ('reference', 'reference'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '-'), ('Introduction', 'introduction'), ('to', 'to'), ('Compiler', 'Compiler'), ('Design', 'Design'), ('‹#›', '‹#›'), ('Pass', 'pass'), ('structure', 'structure'), ('Forward', 'forward'), ('reference', 'reference'), (':', ':'), ('A', 'a'), ('forward', 'forward'), ('reference', 'reference'), ('of', 'of'), ('a', 'a'), ('program', 'program'), ('entity', 'entity'), ('is', 'be'), ('a', 'a'), ('reference', 'reference'), ('to', 'to'), ('the', 'the'), ('entity', 'entity'), ('which', 'which'), ('precedes', 'precede'), ('its', 'its'), ('definition', 'definition'), ('in', 'in'), ('the', 'the'), ('program', 'program'), ('.', '.')] 

 Dependency tags are: 
>> [(('It', 'difficult'), 'expl'), (('is', 'difficult'), 'cop'), (('difficult', 'root'), 'root'), (('to', 'compile'), 'mark'), (('compile', 'difficult'), 'csubj'), (('the', 'program'), 'det'), (('source', 'program'), 'compound'), (('program', 'compile'), 'obj'), (('into', 'pass'), 'case'), (('single', 'pass'), 'amod'), (('pass', 'compile'), 'obl'), (('due', 'reference'), 'case'), (('to', 'due'), 'fixed'), ((':', 'reference'), 'punct'), (('forward', 'reference'), 'amod'), (('reference', 'compile'), 'obl'), (('Prof.', 'reference'), 'compound'), (('Dixita', 'Prof.'), 'flat'), (('B', 'Kagathara'), 'compound'), (('Kagathara', 'Prof.'), 'flat'), (('#', 'reference'), 'appos'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', '#'), 'appos'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', 'reference'), 'appos'), (('1', 'Unit'), 'nummod'), (('–', 'Introduction'), 'punct'), (('Introduction', 'reference'), 'appos'), (('to', 'structure'), 'case'), (('Compiler', 'structure'), 'compound'), (('Design', 'structure'), 'compound'), (('‹#›', 'structure'), 'compound'), (('Pass', 'structure'), 'compound'), (('structure', 'Introduction'), 'nmod'), (('Forward', 'reference'), 'amod'), (('reference', 'Introduction'), 'nmod'), ((':', 'reference'), 'punct'), (('A', 'reference'), 'det'), (('forward', 'reference'), 'amod'), (('reference', 'reference'), 'nsubj'), (('of', 'entity'), 'case'), (('a', 'entity'), 'det'), (('program', 'entity'), 'compound'), (('entity', 'reference'), 'nmod'), (('is', 'reference'), 'cop'), (('a', 'reference'), 'det'), (('reference', 'difficult'), 'parataxis'), (('to', 'entity'), 'case'), (('the', 'entity'), 'det'), (('entity', 'reference'), 'nmod'), (('which', 'precedes'), 'nsubj'), (('precedes', 'entity'), 'acl:relcl'), (('its', 'definition'), 'nmod:poss'), (('definition', 'precedes'), 'obj'), (('in', 'program'), 'case'), (('the', 'program'), 'det'), (('program', 'precedes'), 'obl'), (('.', 'difficult'), 'punct')]

 Named Entities are: 
>> [('#2170701', 'CARDINAL'), ('1', 'CARDINAL')]

========================== Sentence 69 ===========================

 This problem can be solved by postponing the generation of target code until more information concerning the entity becomes available. 

Tokens are: 
>> ['This', 'problem', 'can', 'be', 'solved', 'by', 'postponing', 'the', 'generation', 'of', 'target', 'code', 'until', 'more', 'information', 'concerning', 'the', 'entity', 'becomes', 'available', '.'] 

 UPOS tags are: 
>> [('This', 'DET'), ('problem', 'NOUN'), ('can', 'AUX'), ('be', 'AUX'), ('solved', 'VERB'), ('by', 'SCONJ'), ('postponing', 'VERB'), ('the', 'DET'), ('generation', 'NOUN'), ('of', 'ADP'), ('target', 'NOUN'), ('code', 'NOUN'), ('until', 'SCONJ'), ('more', 'ADJ'), ('information', 'NOUN'), ('concerning', 'VERB'), ('the', 'DET'), ('entity', 'NOUN'), ('becomes', 'VERB'), ('available', 'ADJ'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('This', 'DT'), ('problem', 'NN'), ('can', 'MD'), ('be', 'VB'), ('solved', 'VBN'), ('by', 'IN'), ('postponing', 'VBG'), ('the', 'DT'), ('generation', 'NN'), ('of', 'IN'), ('target', 'NN'), ('code', 'NN'), ('until', 'IN'), ('more', 'JJR'), ('information', 'NN'), ('concerning', 'VBG'), ('the', 'DT'), ('entity', 'NN'), ('becomes', 'VBZ'), ('available', 'JJ'), ('.', '.')] 

 Lemmas are: 
>> [('This', 'this'), ('problem', 'problem'), ('can', 'can'), ('be', 'be'), ('solved', 'solve'), ('by', 'by'), ('postponing', 'postpone'), ('the', 'the'), ('generation', 'generation'), ('of', 'of'), ('target', 'target'), ('code', 'code'), ('until', 'until'), ('more', 'more'), ('information', 'information'), ('concerning', 'concern'), ('the', 'the'), ('entity', 'entity'), ('becomes', 'become'), ('available', 'available'), ('.', '.')] 

 Dependency tags are: 
>> [(('This', 'problem'), 'det'), (('problem', 'solved'), 'nsubj:pass'), (('can', 'solved'), 'aux'), (('be', 'solved'), 'aux:pass'), (('solved', 'root'), 'root'), (('by', 'postponing'), 'mark'), (('postponing', 'solved'), 'advcl'), (('the', 'generation'), 'det'), (('generation', 'postponing'), 'obj'), (('of', 'code'), 'case'), (('target', 'code'), 'compound'), (('code', 'generation'), 'nmod'), (('until', 'becomes'), 'mark'), (('more', 'information'), 'amod'), (('information', 'becomes'), 'nsubj'), (('concerning', 'entity'), 'case'), (('the', 'entity'), 'det'), (('entity', 'information'), 'nmod'), (('becomes', 'solved'), 'advcl'), (('available', 'becomes'), 'xcomp'), (('.', 'solved'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 70 ===========================

 It leads to multi pass model of compilation. 

Tokens are: 
>> ['It', 'leads', 'to', 'multi', 'pass', 'model', 'of', 'compilation', '.'] 

 UPOS tags are: 
>> [('It', 'PRON'), ('leads', 'VERB'), ('to', 'ADP'), ('multi', 'ADJ'), ('pass', 'NOUN'), ('model', 'NOUN'), ('of', 'ADP'), ('compilation', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('It', 'PRP'), ('leads', 'VBZ'), ('to', 'IN'), ('multi', 'JJ'), ('pass', 'NN'), ('model', 'NN'), ('of', 'IN'), ('compilation', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('It', 'it'), ('leads', 'lead'), ('to', 'to'), ('multi', 'multi'), ('pass', 'pass'), ('model', 'model'), ('of', 'of'), ('compilation', 'compilation'), ('.', '.')] 

 Dependency tags are: 
>> [(('It', 'leads'), 'nsubj'), (('leads', 'root'), 'root'), (('to', 'model'), 'case'), (('multi', 'model'), 'amod'), (('pass', 'model'), 'compound'), (('model', 'leads'), 'obl'), (('of', 'compilation'), 'case'), (('compilation', 'model'), 'nmod'), (('.', 'leads'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 71 ===========================

 Perform analysis of the source program and note relevant information. 

Tokens are: 
>> ['Perform', 'analysis', 'of', 'the', 'source', 'program', 'and', 'note', 'relevant', 'information', '.'] 

 UPOS tags are: 
>> [('Perform', 'VERB'), ('analysis', 'NOUN'), ('of', 'ADP'), ('the', 'DET'), ('source', 'NOUN'), ('program', 'NOUN'), ('and', 'CCONJ'), ('note', 'VERB'), ('relevant', 'ADJ'), ('information', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Perform', 'VB'), ('analysis', 'NN'), ('of', 'IN'), ('the', 'DT'), ('source', 'NN'), ('program', 'NN'), ('and', 'CC'), ('note', 'VB'), ('relevant', 'JJ'), ('information', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('Perform', 'perform'), ('analysis', 'analysis'), ('of', 'of'), ('the', 'the'), ('source', 'source'), ('program', 'program'), ('and', 'and'), ('note', 'note'), ('relevant', 'relevant'), ('information', 'information'), ('.', '.')] 

 Dependency tags are: 
>> [(('Perform', 'root'), 'root'), (('analysis', 'Perform'), 'obj'), (('of', 'program'), 'case'), (('the', 'program'), 'det'), (('source', 'program'), 'compound'), (('program', 'analysis'), 'nmod'), (('and', 'note'), 'cc'), (('note', 'Perform'), 'conj'), (('relevant', 'information'), 'amod'), (('information', 'note'), 'obj'), (('.', 'Perform'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 72 ===========================

 In Pass II: Generate target code using information noted in pass I.  Pass I: Pass II:    Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1 – Introduction to Compiler Design ‹#›  Effect of reducing the number of passes 

Tokens are: 
>> ['In', 'Pass', 'II', ':', 'Generate', 'target', 'code', 'using', 'information', 'noted', 'in', 'pass', 'I.', 'Pass', 'I', ':', 'Pass', 'II', ':', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '1', '–', 'Introduction', 'to', 'Compiler', 'Design', '‹#›', 'Effect', 'of', 'reducing', 'the', 'number', 'of', 'passes'] 

 UPOS tags are: 
>> [('In', 'ADP'), ('Pass', 'NOUN'), ('II', 'NUM'), (':', 'PUNCT'), ('Generate', 'VERB'), ('target', 'NOUN'), ('code', 'NOUN'), ('using', 'VERB'), ('information', 'NOUN'), ('noted', 'VERB'), ('in', 'ADP'), ('pass', 'NOUN'), ('I.', 'NOUN'), ('Pass', 'NOUN'), ('I', 'PRON'), (':', 'PUNCT'), ('Pass', 'NOUN'), ('II', 'NUM'), (':', 'PUNCT'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'NOUN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Introduction', 'NOUN'), ('to', 'ADP'), ('Compiler', 'NOUN'), ('Design', 'NOUN'), ('‹#›', 'NOUN'), ('Effect', 'NOUN'), ('of', 'SCONJ'), ('reducing', 'VERB'), ('the', 'DET'), ('number', 'NOUN'), ('of', 'ADP'), ('passes', 'NOUN')] 

 XPOS tags are: 
>> [('In', 'IN'), ('Pass', 'NN'), ('II', 'CD'), (':', ':'), ('Generate', 'VB'), ('target', 'NN'), ('code', 'NN'), ('using', 'VBG'), ('information', 'NN'), ('noted', 'VBN'), ('in', 'IN'), ('pass', 'NN'), ('I.', 'NN'), ('Pass', 'NN'), ('I', 'PRP'), (':', ':'), ('Pass', 'NN'), ('II', 'CD'), (':', ':'), ('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NN'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('1', 'CD'), ('–', ','), ('Introduction', 'NN'), ('to', 'IN'), ('Compiler', 'NN'), ('Design', 'NN'), ('‹#›', 'NN'), ('Effect', 'NN'), ('of', 'IN'), ('reducing', 'VBG'), ('the', 'DT'), ('number', 'NN'), ('of', 'IN'), ('passes', 'NNS')] 

 Lemmas are: 
>> [('In', 'in'), ('Pass', 'pass'), ('II', 'ii'), (':', ':'), ('Generate', 'generate'), ('target', 'target'), ('code', 'code'), ('using', 'use'), ('information', 'information'), ('noted', 'note'), ('in', 'in'), ('pass', 'pass'), ('I.', 'i.'), ('Pass', 'pass'), ('I', 'I'), (':', ':'), ('Pass', 'pass'), ('II', 'ii'), (':', ':'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'b'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '-'), ('Introduction', 'introduction'), ('to', 'to'), ('Compiler', 'compiler'), ('Design', 'design'), ('‹#›', '‹#›'), ('Effect', 'effect'), ('of', 'of'), ('reducing', 'reduce'), ('the', 'the'), ('number', 'number'), ('of', 'of'), ('passes', 'pass')] 

 Dependency tags are: 
>> [(('In', 'Pass'), 'case'), (('Pass', 'Generate'), 'obl'), (('II', 'Pass'), 'nummod'), ((':', 'Generate'), 'punct'), (('Generate', 'root'), 'root'), (('target', 'code'), 'compound'), (('code', 'Generate'), 'obj'), (('using', 'Generate'), 'advcl'), (('information', 'using'), 'obj'), (('noted', 'information'), 'acl'), (('in', 'Pass'), 'case'), (('pass', 'Pass'), 'compound'), (('I.', 'Pass'), 'compound'), (('Pass', 'noted'), 'obl'), (('I', 'Pass'), 'nsubj'), ((':', 'Pass'), 'punct'), (('Pass', 'Pass'), 'appos'), (('II', 'Pass'), 'nummod'), ((':', 'Pass'), 'punct'), (('Prof.', 'Pass'), 'appos'), (('Dixita', 'B'), 'compound'), (('B', 'Kagathara'), 'compound'), (('Kagathara', 'Pass'), 'appos'), (('#', 'Pass'), 'appos'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', '#'), 'appos'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', 'Pass'), 'appos'), (('1', 'Unit'), 'nummod'), (('–', 'Introduction'), 'punct'), (('Introduction', 'Pass'), 'appos'), (('to', 'Effect'), 'case'), (('Compiler', 'Design'), 'compound'), (('Design', 'Effect'), 'compound'), (('‹#›', 'Effect'), 'compound'), (('Effect', 'Introduction'), 'nmod'), (('of', 'reducing'), 'mark'), (('reducing', 'Effect'), 'acl'), (('the', 'number'), 'det'), (('number', 'reducing'), 'obj'), (('of', 'passes'), 'case'), (('passes', 'number'), 'nmod')]

 Named Entities are: 
>> [('2170701', 'CARDINAL'), ('1', 'CARDINAL')]

========================== Sentence 73 ===========================

 It is desirable to have a few passes, because it takes time to read and write intermediate file. 

Tokens are: 
>> ['It', 'is', 'desirable', 'to', 'have', 'a', 'few', 'passes', ',', 'because', 'it', 'takes', 'time', 'to', 'read', 'and', 'write', 'intermediate', 'file', '.'] 

 UPOS tags are: 
>> [('It', 'PRON'), ('is', 'AUX'), ('desirable', 'ADJ'), ('to', 'PART'), ('have', 'VERB'), ('a', 'DET'), ('few', 'ADJ'), ('passes', 'NOUN'), (',', 'PUNCT'), ('because', 'SCONJ'), ('it', 'PRON'), ('takes', 'VERB'), ('time', 'NOUN'), ('to', 'PART'), ('read', 'VERB'), ('and', 'CCONJ'), ('write', 'VERB'), ('intermediate', 'ADJ'), ('file', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('It', 'PRP'), ('is', 'VBZ'), ('desirable', 'JJ'), ('to', 'TO'), ('have', 'VB'), ('a', 'DT'), ('few', 'JJ'), ('passes', 'NNS'), (',', ','), ('because', 'IN'), ('it', 'PRP'), ('takes', 'VBZ'), ('time', 'NN'), ('to', 'TO'), ('read', 'VB'), ('and', 'CC'), ('write', 'VB'), ('intermediate', 'JJ'), ('file', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('It', 'it'), ('is', 'be'), ('desirable', 'desirable'), ('to', 'to'), ('have', 'have'), ('a', 'a'), ('few', 'few'), ('passes', 'pass'), (',', ','), ('because', 'because'), ('it', 'it'), ('takes', 'take'), ('time', 'time'), ('to', 'to'), ('read', 'read'), ('and', 'and'), ('write', 'write'), ('intermediate', 'intermediate'), ('file', 'file'), ('.', '.')] 

 Dependency tags are: 
>> [(('It', 'desirable'), 'expl'), (('is', 'desirable'), 'cop'), (('desirable', 'root'), 'root'), (('to', 'have'), 'mark'), (('have', 'desirable'), 'csubj'), (('a', 'passes'), 'det'), (('few', 'passes'), 'amod'), (('passes', 'have'), 'obj'), ((',', 'takes'), 'punct'), (('because', 'takes'), 'mark'), (('it', 'takes'), 'nsubj'), (('takes', 'desirable'), 'advcl'), (('time', 'takes'), 'obj'), (('to', 'read'), 'mark'), (('read', 'time'), 'acl'), (('and', 'write'), 'cc'), (('write', 'read'), 'conj'), (('intermediate', 'file'), 'amod'), (('file', 'write'), 'obj'), (('.', 'desirable'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 74 ===========================

 If we group several phases into one pass then memory requirement may be large. 

Tokens are: 
>> ['If', 'we', 'group', 'several', 'phases', 'into', 'one', 'pass', 'then', 'memory', 'requirement', 'may', 'be', 'large', '.'] 

 UPOS tags are: 
>> [('If', 'SCONJ'), ('we', 'PRON'), ('group', 'VERB'), ('several', 'ADJ'), ('phases', 'NOUN'), ('into', 'ADP'), ('one', 'NUM'), ('pass', 'NOUN'), ('then', 'ADV'), ('memory', 'NOUN'), ('requirement', 'NOUN'), ('may', 'AUX'), ('be', 'AUX'), ('large', 'ADJ'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('If', 'IN'), ('we', 'PRP'), ('group', 'VBP'), ('several', 'JJ'), ('phases', 'NNS'), ('into', 'IN'), ('one', 'CD'), ('pass', 'NN'), ('then', 'RB'), ('memory', 'NN'), ('requirement', 'NN'), ('may', 'MD'), ('be', 'VB'), ('large', 'JJ'), ('.', '.')] 

 Lemmas are: 
>> [('If', 'if'), ('we', 'we'), ('group', 'group'), ('several', 'several'), ('phases', 'phase'), ('into', 'into'), ('one', 'one'), ('pass', 'pass'), ('then', 'then'), ('memory', 'memory'), ('requirement', 'requirement'), ('may', 'may'), ('be', 'be'), ('large', 'large'), ('.', '.')] 

 Dependency tags are: 
>> [(('If', 'group'), 'mark'), (('we', 'group'), 'nsubj'), (('group', 'large'), 'advcl'), (('several', 'phases'), 'amod'), (('phases', 'group'), 'obj'), (('into', 'pass'), 'case'), (('one', 'pass'), 'nummod'), (('pass', 'group'), 'obl'), (('then', 'large'), 'advmod'), (('memory', 'requirement'), 'compound'), (('requirement', 'large'), 'nsubj'), (('may', 'large'), 'aux'), (('be', 'large'), 'cop'), (('large', 'root'), 'root'), (('.', 'large'), 'punct')]

 Named Entities are: 
>> [('one', 'CARDINAL')]

========================== Sentence 75 ===========================

 Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1 – Introduction to Compiler Design ‹#›  Types of compiler        Types of compiler 

Tokens are: 
>> ['Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '1', '–', 'Introduction', 'to', 'Compiler', 'Design', '‹#›', 'Types', 'of', 'compiler', 'Types', 'of', 'compiler'] 

 UPOS tags are: 
>> [('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Introduction', 'NOUN'), ('to', 'ADP'), ('Compiler', 'NOUN'), ('Design', 'NOUN'), ('‹#›', 'NOUN'), ('Types', 'NOUN'), ('of', 'ADP'), ('compiler', 'NOUN'), ('Types', 'NOUN'), ('of', 'ADP'), ('compiler', 'NOUN')] 

 XPOS tags are: 
>> [('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('1', 'CD'), ('–', ':'), ('Introduction', 'NN'), ('to', 'IN'), ('Compiler', 'NN'), ('Design', 'NN'), ('‹#›', 'NN'), ('Types', 'NNS'), ('of', 'IN'), ('compiler', 'NN'), ('Types', 'NNS'), ('of', 'IN'), ('compiler', 'NN')] 

 Lemmas are: 
>> [('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '-'), ('Introduction', 'introduction'), ('to', 'to'), ('Compiler', 'compiler'), ('Design', 'design'), ('‹#›', '‹#›'), ('Types', 'type'), ('of', 'of'), ('compiler', 'compiler'), ('Types', 'type'), ('of', 'of'), ('compiler', 'compiler')] 

 Dependency tags are: 
>> [(('Prof.', 'root'), 'root'), (('Dixita', 'Prof.'), 'flat'), (('B', 'Kagathara'), 'compound'), (('Kagathara', 'Prof.'), 'flat'), (('#', 'Prof.'), 'list'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', 'Unit'), 'compound'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', 'Prof.'), 'list'), (('1', 'Unit'), 'nummod'), (('–', 'Introduction'), 'punct'), (('Introduction', 'Prof.'), 'list'), (('to', 'Design'), 'case'), (('Compiler', 'Design'), 'compound'), (('Design', 'Introduction'), 'nmod'), (('‹#›', 'Types'), 'compound'), (('Types', 'Introduction'), 'nmod'), (('of', 'Types'), 'case'), (('compiler', 'Types'), 'compound'), (('Types', 'Types'), 'nmod'), (('of', 'compiler'), 'case'), (('compiler', 'Types'), 'nmod')]

 Named Entities are: 
>> [('#2170701', 'CARDINAL'), ('1', 'CARDINAL')]

========================== Sentence 76 ===========================

 One pass compiler 

Tokens are: 
>> ['One', 'pass', 'compiler'] 

 UPOS tags are: 
>> [('One', 'NUM'), ('pass', 'NOUN'), ('compiler', 'NOUN')] 

 XPOS tags are: 
>> [('One', 'CD'), ('pass', 'NN'), ('compiler', 'NN')] 

 Lemmas are: 
>> [('One', 'one'), ('pass', 'pass'), ('compiler', 'compiler')] 

 Dependency tags are: 
>> [(('One', 'compiler'), 'nummod'), (('pass', 'compiler'), 'compound'), (('compiler', 'root'), 'root')]

 Named Entities are: 
>> [('One', 'CARDINAL')]

========================== Sentence 77 ===========================

 It is a type of compiler that compiles whole process in one-pass. 

Tokens are: 
>> ['It', 'is', 'a', 'type', 'of', 'compiler', 'that', 'compiles', 'whole', 'process', 'in', 'one', '-', 'pass', '.'] 

 UPOS tags are: 
>> [('It', 'PRON'), ('is', 'AUX'), ('a', 'DET'), ('type', 'NOUN'), ('of', 'ADP'), ('compiler', 'NOUN'), ('that', 'PRON'), ('compiles', 'VERB'), ('whole', 'ADJ'), ('process', 'NOUN'), ('in', 'ADP'), ('one', 'NUM'), ('-', 'PUNCT'), ('pass', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('It', 'PRP'), ('is', 'VBZ'), ('a', 'DT'), ('type', 'NN'), ('of', 'IN'), ('compiler', 'NN'), ('that', 'WDT'), ('compiles', 'VBZ'), ('whole', 'JJ'), ('process', 'NN'), ('in', 'IN'), ('one', 'CD'), ('-', 'HYPH'), ('pass', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('It', 'it'), ('is', 'be'), ('a', 'a'), ('type', 'type'), ('of', 'of'), ('compiler', 'compiler'), ('that', 'that'), ('compiles', 'compile'), ('whole', 'whole'), ('process', 'process'), ('in', 'in'), ('one', 'one'), ('-', '-'), ('pass', 'pass'), ('.', '.')] 

 Dependency tags are: 
>> [(('It', 'type'), 'nsubj'), (('is', 'type'), 'cop'), (('a', 'type'), 'det'), (('type', 'root'), 'root'), (('of', 'compiler'), 'case'), (('compiler', 'type'), 'nmod'), (('that', 'compiles'), 'nsubj'), (('compiles', 'compiler'), 'acl:relcl'), (('whole', 'process'), 'amod'), (('process', 'compiles'), 'obj'), (('in', 'pass'), 'case'), (('one', 'pass'), 'nummod'), (('-', 'pass'), 'punct'), (('pass', 'compiles'), 'obl'), (('.', 'type'), 'punct')]

 Named Entities are: 
>> [('one', 'CARDINAL')]

========================== Sentence 78 ===========================

 Two pass compiler 

Tokens are: 
>> ['Two', 'pass', 'compiler'] 

 UPOS tags are: 
>> [('Two', 'NUM'), ('pass', 'NOUN'), ('compiler', 'NOUN')] 

 XPOS tags are: 
>> [('Two', 'CD'), ('pass', 'NN'), ('compiler', 'NN')] 

 Lemmas are: 
>> [('Two', 'two'), ('pass', 'pass'), ('compiler', 'compiler')] 

 Dependency tags are: 
>> [(('Two', 'compiler'), 'nummod'), (('pass', 'compiler'), 'compound'), (('compiler', 'root'), 'root')]

 Named Entities are: 
>> [('Two', 'CARDINAL')]

========================== Sentence 79 ===========================

 It is a type of compiler that compiles whole process in two-pass. 

Tokens are: 
>> ['It', 'is', 'a', 'type', 'of', 'compiler', 'that', 'compiles', 'whole', 'process', 'in', 'two', '-pass', '.'] 

 UPOS tags are: 
>> [('It', 'PRON'), ('is', 'AUX'), ('a', 'DET'), ('type', 'NOUN'), ('of', 'ADP'), ('compiler', 'NOUN'), ('that', 'PRON'), ('compiles', 'VERB'), ('whole', 'ADJ'), ('process', 'NOUN'), ('in', 'ADP'), ('two', 'NUM'), ('-pass', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('It', 'PRP'), ('is', 'VBZ'), ('a', 'DT'), ('type', 'NN'), ('of', 'IN'), ('compiler', 'NN'), ('that', 'WDT'), ('compiles', 'VBZ'), ('whole', 'JJ'), ('process', 'NN'), ('in', 'IN'), ('two', 'CD'), ('-pass', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('It', 'it'), ('is', 'be'), ('a', 'a'), ('type', 'type'), ('of', 'of'), ('compiler', 'compiler'), ('that', 'that'), ('compiles', 'compile'), ('whole', 'whole'), ('process', 'process'), ('in', 'in'), ('two', 'two'), ('-pass', '-pass'), ('.', '.')] 

 Dependency tags are: 
>> [(('It', 'type'), 'nsubj'), (('is', 'type'), 'cop'), (('a', 'type'), 'det'), (('type', 'root'), 'root'), (('of', 'compiler'), 'case'), (('compiler', 'type'), 'nmod'), (('that', 'compiles'), 'nsubj'), (('compiles', 'compiler'), 'acl:relcl'), (('whole', 'process'), 'amod'), (('process', 'compiles'), 'obj'), (('in', '-pass'), 'case'), (('two', '-pass'), 'nummod'), (('-pass', 'compiles'), 'obl'), (('.', 'type'), 'punct')]

 Named Entities are: 
>> [('two', 'CARDINAL')]

========================== Sentence 80 ===========================

 It generates intermediate code. 

Tokens are: 
>> ['It', 'generates', 'intermediate', 'code', '.'] 

 UPOS tags are: 
>> [('It', 'PRON'), ('generates', 'VERB'), ('intermediate', 'ADJ'), ('code', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('It', 'PRP'), ('generates', 'VBZ'), ('intermediate', 'JJ'), ('code', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('It', 'it'), ('generates', 'generate'), ('intermediate', 'intermediate'), ('code', 'code'), ('.', '.')] 

 Dependency tags are: 
>> [(('It', 'generates'), 'nsubj'), (('generates', 'root'), 'root'), (('intermediate', 'code'), 'amod'), (('code', 'generates'), 'obj'), (('.', 'generates'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 81 ===========================

 Incremental compiler 

Tokens are: 
>> ['Incremental', 'compiler'] 

 UPOS tags are: 
>> [('Incremental', 'ADJ'), ('compiler', 'NOUN')] 

 XPOS tags are: 
>> [('Incremental', 'JJ'), ('compiler', 'NN')] 

 Lemmas are: 
>> [('Incremental', 'Incremental'), ('compiler', 'compiler')] 

 Dependency tags are: 
>> [(('Incremental', 'compiler'), 'amod'), (('compiler', 'root'), 'root')]

 Named Entities are: 
>> []

========================== Sentence 82 ===========================

 The compiler which compiles only the changed line from the source code and update the object code. 

Tokens are: 
>> ['The', 'compiler', 'which', 'compiles', 'only', 'the', 'changed', 'line', 'from', 'the', 'source', 'code', 'and', 'update', 'the', 'object', 'code', '.'] 

 UPOS tags are: 
>> [('The', 'DET'), ('compiler', 'NOUN'), ('which', 'PRON'), ('compiles', 'VERB'), ('only', 'ADV'), ('the', 'DET'), ('changed', 'VERB'), ('line', 'NOUN'), ('from', 'ADP'), ('the', 'DET'), ('source', 'NOUN'), ('code', 'NOUN'), ('and', 'CCONJ'), ('update', 'VERB'), ('the', 'DET'), ('object', 'NOUN'), ('code', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('The', 'DT'), ('compiler', 'NN'), ('which', 'WDT'), ('compiles', 'VBZ'), ('only', 'RB'), ('the', 'DT'), ('changed', 'VBN'), ('line', 'NN'), ('from', 'IN'), ('the', 'DT'), ('source', 'NN'), ('code', 'NN'), ('and', 'CC'), ('update', 'VB'), ('the', 'DT'), ('object', 'NN'), ('code', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('The', 'the'), ('compiler', 'compiler'), ('which', 'which'), ('compiles', 'compile'), ('only', 'only'), ('the', 'the'), ('changed', 'change'), ('line', 'line'), ('from', 'from'), ('the', 'the'), ('source', 'source'), ('code', 'code'), ('and', 'and'), ('update', 'update'), ('the', 'the'), ('object', 'object'), ('code', 'code'), ('.', '.')] 

 Dependency tags are: 
>> [(('The', 'compiler'), 'det'), (('compiler', 'root'), 'root'), (('which', 'compiles'), 'nsubj'), (('compiles', 'compiler'), 'acl:relcl'), (('only', 'line'), 'advmod'), (('the', 'line'), 'det'), (('changed', 'line'), 'amod'), (('line', 'compiles'), 'obj'), (('from', 'code'), 'case'), (('the', 'code'), 'det'), (('source', 'code'), 'compound'), (('code', 'line'), 'nmod'), (('and', 'update'), 'cc'), (('update', 'compiles'), 'conj'), (('the', 'code'), 'det'), (('object', 'code'), 'compound'), (('code', 'update'), 'obj'), (('.', 'compiler'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 83 ===========================

 Native code compiler 

Tokens are: 
>> ['Native', 'code', 'compiler'] 

 UPOS tags are: 
>> [('Native', 'ADJ'), ('code', 'NOUN'), ('compiler', 'NOUN')] 

 XPOS tags are: 
>> [('Native', 'JJ'), ('code', 'NN'), ('compiler', 'NN')] 

 Lemmas are: 
>> [('Native', 'native'), ('code', 'code'), ('compiler', 'compiler')] 

 Dependency tags are: 
>> [(('Native', 'code'), 'amod'), (('code', 'compiler'), 'compound'), (('compiler', 'root'), 'root')]

 Named Entities are: 
>> []

========================== Sentence 84 ===========================

 The compiler used to compile a source code for a same type of platform only. 

Tokens are: 
>> ['The', 'compiler', 'used', 'to', 'compile', 'a', 'source', 'code', 'for', 'a', 'same', 'type', 'of', 'platform', 'only', '.'] 

 UPOS tags are: 
>> [('The', 'DET'), ('compiler', 'NOUN'), ('used', 'VERB'), ('to', 'PART'), ('compile', 'VERB'), ('a', 'DET'), ('source', 'NOUN'), ('code', 'NOUN'), ('for', 'ADP'), ('a', 'DET'), ('same', 'ADJ'), ('type', 'NOUN'), ('of', 'ADP'), ('platform', 'NOUN'), ('only', 'ADV'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('The', 'DT'), ('compiler', 'NN'), ('used', 'VBD'), ('to', 'TO'), ('compile', 'VB'), ('a', 'DT'), ('source', 'NN'), ('code', 'NN'), ('for', 'IN'), ('a', 'DT'), ('same', 'JJ'), ('type', 'NN'), ('of', 'IN'), ('platform', 'NN'), ('only', 'RB'), ('.', '.')] 

 Lemmas are: 
>> [('The', 'the'), ('compiler', 'compiler'), ('used', 'use'), ('to', 'to'), ('compile', 'compile'), ('a', 'a'), ('source', 'source'), ('code', 'code'), ('for', 'for'), ('a', 'a'), ('same', 'same'), ('type', 'type'), ('of', 'of'), ('platform', 'platform'), ('only', 'only'), ('.', '.')] 

 Dependency tags are: 
>> [(('The', 'compiler'), 'det'), (('compiler', 'used'), 'nsubj'), (('used', 'root'), 'root'), (('to', 'compile'), 'mark'), (('compile', 'used'), 'xcomp'), (('a', 'code'), 'det'), (('source', 'code'), 'compound'), (('code', 'compile'), 'obj'), (('for', 'type'), 'case'), (('a', 'type'), 'det'), (('same', 'type'), 'amod'), (('type', 'compile'), 'obl'), (('of', 'platform'), 'case'), (('platform', 'type'), 'nmod'), (('only', 'type'), 'advmod'), (('.', 'used'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 85 ===========================

 Cross compiler 

Tokens are: 
>> ['Cross', 'compiler'] 

 UPOS tags are: 
>> [('Cross', 'NOUN'), ('compiler', 'NOUN')] 

 XPOS tags are: 
>> [('Cross', 'NN'), ('compiler', 'NN')] 

 Lemmas are: 
>> [('Cross', 'Cross'), ('compiler', 'compiler')] 

 Dependency tags are: 
>> [(('Cross', 'compiler'), 'compound'), (('compiler', 'root'), 'root')]

 Named Entities are: 
>> []

========================== Sentence 86 ===========================

 The compiler used to compile a source code for a different kinds platform. 

Tokens are: 
>> ['The', 'compiler', 'used', 'to', 'compile', 'a', 'source', 'code', 'for', 'a', 'different', 'kinds', 'platform', '.'] 

 UPOS tags are: 
>> [('The', 'DET'), ('compiler', 'NOUN'), ('used', 'VERB'), ('to', 'PART'), ('compile', 'VERB'), ('a', 'DET'), ('source', 'NOUN'), ('code', 'NOUN'), ('for', 'ADP'), ('a', 'DET'), ('different', 'ADJ'), ('kinds', 'NOUN'), ('platform', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('The', 'DT'), ('compiler', 'NN'), ('used', 'VBD'), ('to', 'TO'), ('compile', 'VB'), ('a', 'DT'), ('source', 'NN'), ('code', 'NN'), ('for', 'IN'), ('a', 'DT'), ('different', 'JJ'), ('kinds', 'NNS'), ('platform', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('The', 'the'), ('compiler', 'compiler'), ('used', 'use'), ('to', 'to'), ('compile', 'compile'), ('a', 'a'), ('source', 'source'), ('code', 'code'), ('for', 'for'), ('a', 'a'), ('different', 'different'), ('kinds', 'kind'), ('platform', 'platform'), ('.', '.')] 

 Dependency tags are: 
>> [(('The', 'compiler'), 'det'), (('compiler', 'used'), 'nsubj'), (('used', 'root'), 'root'), (('to', 'compile'), 'mark'), (('compile', 'used'), 'xcomp'), (('a', 'code'), 'det'), (('source', 'code'), 'compound'), (('code', 'compile'), 'obj'), (('for', 'platform'), 'case'), (('a', 'platform'), 'det'), (('different', 'platform'), 'amod'), (('kinds', 'platform'), 'compound'), (('platform', 'compile'), 'obl'), (('.', 'used'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 87 ===========================

 Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1– Introduction to Compiler Design ‹#›  Thank You                                       /docProps/thumbnail.jpeg 

Tokens are: 
>> ['Prof.', 'Jay', 'R', 'Dhamsaniya', '#', '3130006', '(', 'PS', ')', '\uf077', 'Unit', '1', '–', 'Basic', 'Probability', '‹#›', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '1', '–', 'Introduction', 'to', 'Compiler', 'Design', '‹#›', 'Thank', 'You', '/docProps/thumbnail', '.jpeg'] 

 UPOS tags are: 
>> [('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'ADJ'), ('Probability', 'NOUN'), ('‹#›', 'NOUN'), ('Prof.', 'NOUN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Introduction', 'NOUN'), ('to', 'ADP'), ('Compiler', 'NOUN'), ('Design', 'NOUN'), ('‹#›', 'NOUN'), ('Thank', 'VERB'), ('You', 'PRON'), ('/docProps/thumbnail', 'PROPN'), ('.jpeg', 'NOUN')] 

 XPOS tags are: 
>> [('Prof.', 'NNP'), ('Jay', 'NNP'), ('R', 'NNP'), ('Dhamsaniya', 'NNP'), ('#', 'NN'), ('3130006', 'CD'), ('(', '-LRB-'), ('PS', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('1', 'CD'), ('–', ','), ('Basic', 'JJ'), ('Probability', 'NN'), ('‹#›', 'NN'), ('Prof.', 'NN'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('1', 'CD'), ('–', ','), ('Introduction', 'NN'), ('to', 'IN'), ('Compiler', 'NN'), ('Design', 'NN'), ('‹#›', 'NN'), ('Thank', 'VBP'), ('You', 'PRP'), ('/docProps/thumbnail', 'NNP'), ('.jpeg', 'NN')] 

 Lemmas are: 
>> [('Prof.', 'Prof.'), ('Jay', 'Jay'), ('R', 'R'), ('Dhamsaniya', 'Dhamsaniya'), ('#', '#'), ('3130006', '3130006'), ('(', '('), ('PS', 'ps'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '-'), ('Basic', 'basic'), ('Probability', 'probability'), ('‹#›', '‹#›'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('1', '1'), ('–', '-'), ('Introduction', 'introduction'), ('to', 'to'), ('Compiler', 'compiler'), ('Design', 'design'), ('‹#›', '‹#›'), ('Thank', 'thank'), ('You', 'you'), ('/docProps/thumbnail', '/docProps/thumbnail'), ('.jpeg', '.jpeg')] 

 Dependency tags are: 
>> [(('Prof.', 'root'), 'root'), (('Jay', 'Prof.'), 'flat'), (('R', 'Prof.'), 'flat'), (('Dhamsaniya', 'Prof.'), 'flat'), (('#', 'Prof.'), 'list'), (('3130006', '#'), 'nummod'), (('(', 'Unit'), 'punct'), (('PS', 'Unit'), 'compound'), ((')', 'PS'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', 'Prof.'), 'list'), (('1', 'Unit'), 'nummod'), (('–', 'Unit'), 'punct'), (('Basic', 'Probability'), 'amod'), (('Probability', 'Prof.'), 'list'), (('‹#›', 'Prof.'), 'list'), (('Prof.', 'Probability'), 'appos'), (('Dixita', 'Kagathara'), 'compound'), (('B', 'Kagathara'), 'compound'), (('Kagathara', '#'), 'compound'), (('#', 'Prof.'), 'list'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', 'Unit'), 'appos'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', 'Prof.'), 'list'), (('1', 'Unit'), 'nummod'), (('–', 'Introduction'), 'punct'), (('Introduction', 'Prof.'), 'list'), (('to', 'Design'), 'case'), (('Compiler', 'Design'), 'compound'), (('Design', 'Introduction'), 'nmod'), (('‹#›', 'Thank'), 'nsubj'), (('Thank', 'Prof.'), 'list'), (('You', 'Thank'), 'obj'), (('/docProps/thumbnail', 'Thank'), 'obj'), (('.jpeg', 'Thank'), 'obj')]

 Named Entities are: 
>> [('#3130006', 'CARDINAL'), ('2170701', 'CARDINAL'), ('1', 'CARDINAL')]