

========================== Sentence 1 ===========================

 Power 

Tokens are: 
>> ['Power'] 

 UPOS tags are: 
>> [('Power', 'NOUN')] 

 XPOS tags are: 
>> [('Power', 'NN')] 

 Lemmas are: 
>> [('Power', 'power')] 

 Dependency tags are: 
>> [(('Power', 'root'), 'root')]

 Named Entities are: 
>> []

========================== Sentence 2 ===========================

 Point Presentation  arjun.bala@darshan.ac.in 9624822202 Computer Engineering Department Prof. Arjun V. Bala Python for Data Science (PDS) (3150713)  Unit-02  Data Science  & Python  Darshan Institute of Engineering & Technology, Rajkot     Looping Outline 

Tokens are: 
>> ['Point', 'Presentation', 'arjun.bala@darshan.ac.in', '9624822202', 'Computer', 'Engineering', 'Department', 'Prof.', 'Arjun', 'V.', 'Bala', 'Python', 'for', 'Data', 'Science', '(', 'PDS', ')', '(', '3150713', ')', 'Unit', '-02', 'Data', 'Science', '&', 'Python', 'Darshan', 'Institute', 'of', 'Engineering', '&', 'Technology', ',', 'Rajkot', '\uf050', 'Looping', 'Outline'] 

 UPOS tags are: 
>> [('Point', 'NOUN'), ('Presentation', 'NOUN'), ('arjun.bala@darshan.ac.in', 'PROPN'), ('9624822202', 'NUM'), ('Computer', 'NOUN'), ('Engineering', 'NOUN'), ('Department', 'PROPN'), ('Prof.', 'PROPN'), ('Arjun', 'PROPN'), ('V.', 'PROPN'), ('Bala', 'PROPN'), ('Python', 'PROPN'), ('for', 'ADP'), ('Data', 'NOUN'), ('Science', 'PROPN'), ('(', 'PUNCT'), ('PDS', 'NOUN'), (')', 'PUNCT'), ('(', 'PUNCT'), ('3150713', 'NUM'), (')', 'PUNCT'), ('Unit', 'NOUN'), ('-02', 'NUM'), ('Data', 'NOUN'), ('Science', 'NOUN'), ('&', 'CCONJ'), ('Python', 'PROPN'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('of', 'ADP'), ('Engineering', 'PROPN'), ('&', 'CCONJ'), ('Technology', 'PROPN'), (',', 'PUNCT'), ('Rajkot', 'PROPN'), ('\uf050', 'PROPN'), ('Looping', 'PROPN'), ('Outline', 'PROPN')] 

 XPOS tags are: 
>> [('Point', 'NN'), ('Presentation', 'NN'), ('arjun.bala@darshan.ac.in', 'NNP'), ('9624822202', 'CD'), ('Computer', 'NN'), ('Engineering', 'NN'), ('Department', 'NNP'), ('Prof.', 'NNP'), ('Arjun', 'NNP'), ('V.', 'NNP'), ('Bala', 'NNP'), ('Python', 'NNP'), ('for', 'IN'), ('Data', 'NN'), ('Science', 'NNP'), ('(', '-LRB-'), ('PDS', 'NN'), (')', '-RRB-'), ('(', '-LRB-'), ('3150713', 'CD'), (')', '-RRB-'), ('Unit', 'NN'), ('-02', 'CD'), ('Data', 'NN'), ('Science', 'NN'), ('&', 'CC'), ('Python', 'NNP'), ('Darshan', 'NNP'), ('Institute', 'NNP'), ('of', 'IN'), ('Engineering', 'NNP'), ('&', 'CC'), ('Technology', 'NNP'), (',', ','), ('Rajkot', 'NNP'), ('\uf050', 'NNP'), ('Looping', 'NNP'), ('Outline', 'NNP')] 

 Lemmas are: 
>> [('Point', 'point'), ('Presentation', 'presentation'), ('arjun.bala@darshan.ac.in', 'arjun.bala@darshan.ac.in'), ('9624822202', '9624822202'), ('Computer', 'Computer'), ('Engineering', 'Engineering'), ('Department', 'Department'), ('Prof.', 'Prof.'), ('Arjun', 'Arjun'), ('V.', 'V.'), ('Bala', 'Bala'), ('Python', 'python'), ('for', 'for'), ('Data', 'data'), ('Science', 'Science'), ('(', '('), ('PDS', 'pds'), (')', ')'), ('(', '('), ('3150713', '3150713'), (')', ')'), ('Unit', 'unit'), ('-02', '-02'), ('Data', 'data'), ('Science', 'science'), ('&', '&'), ('Python', 'python'), ('Darshan', 'Darshan'), ('Institute', 'Institute'), ('of', 'of'), ('Engineering', 'Engineering'), ('&', '&'), ('Technology', 'Technology'), (',', ','), ('Rajkot', 'Rajkot'), ('\uf050', '\uf050'), ('Looping', 'Looping'), ('Outline', 'Outline')] 

 Dependency tags are: 
>> [(('Point', 'Presentation'), 'compound'), (('Presentation', 'root'), 'root'), (('arjun.bala@darshan.ac.in', 'Presentation'), 'appos'), (('9624822202', 'Department'), 'nummod'), (('Computer', 'Department'), 'compound'), (('Engineering', 'Department'), 'compound'), (('Department', 'Presentation'), 'list'), (('Prof.', 'Department'), 'flat'), (('Arjun', 'Prof.'), 'flat'), (('V.', 'Prof.'), 'flat'), (('Bala', 'Prof.'), 'flat'), (('Python', 'Prof.'), 'flat'), (('for', 'Science'), 'case'), (('Data', 'Science'), 'compound'), (('Science', 'Prof.'), 'nmod'), (('(', 'PDS'), 'punct'), (('PDS', 'Science'), 'appos'), ((')', 'PDS'), 'punct'), (('(', 'Unit'), 'punct'), (('3150713', 'Unit'), 'nummod'), ((')', 'Unit'), 'punct'), (('Unit', 'Presentation'), 'list'), (('-02', 'Science'), 'nummod'), (('Data', 'Science'), 'compound'), (('Science', 'Unit'), 'appos'), (('&', 'Python'), 'cc'), (('Python', 'Science'), 'conj'), (('Darshan', 'Institute'), 'compound'), (('Institute', 'Presentation'), 'list'), (('of', 'Engineering'), 'case'), (('Engineering', 'Institute'), 'nmod'), (('&', 'Technology'), 'cc'), (('Technology', 'Engineering'), 'conj'), ((',', 'Outline'), 'punct'), (('Rajkot', 'Outline'), 'compound'), (('\uf050', 'Outline'), 'compound'), (('Looping', 'Outline'), 'compound'), (('Outline', 'Institute'), 'appos')]

 Named Entities are: 
>> [('9624822202 Computer Engineering Department', 'ORG'), ('Arjun V. Bala Python', 'PERSON'), ('Data Science (PDS)', 'ORG'), ('3150713', 'CARDINAL'), ('-02', 'CARDINAL'), ('Data Science  & Python  Darshan Institute of Engineering & Technology', 'ORG'), ('Rajkot', 'GPE')]

========================== Sentence 3 ===========================

 Core competencies of a data scientist Creating the Data Science Pipeline Why Python? 

Tokens are: 
>> ['Core', 'competencies', 'of', 'a', 'data', 'scientist', 'Creating', 'the', 'Data', 'Science', 'Pipeline', 'Why', 'Python', '?'] 

 UPOS tags are: 
>> [('Core', 'NOUN'), ('competencies', 'NOUN'), ('of', 'ADP'), ('a', 'DET'), ('data', 'NOUN'), ('scientist', 'NOUN'), ('Creating', 'VERB'), ('the', 'DET'), ('Data', 'NOUN'), ('Science', 'PROPN'), ('Pipeline', 'NOUN'), ('Why', 'SCONJ'), ('Python', 'PROPN'), ('?', 'PUNCT')] 

 XPOS tags are: 
>> [('Core', 'NN'), ('competencies', 'NNS'), ('of', 'IN'), ('a', 'DT'), ('data', 'NN'), ('scientist', 'NN'), ('Creating', 'VBG'), ('the', 'DT'), ('Data', 'NN'), ('Science', 'NNP'), ('Pipeline', 'NN'), ('Why', 'WRB'), ('Python', 'NNP'), ('?', '.')] 

 Lemmas are: 
>> [('Core', 'core'), ('competencies', 'competency'), ('of', 'of'), ('a', 'a'), ('data', 'datum'), ('scientist', 'scientist'), ('Creating', 'create'), ('the', 'the'), ('Data', 'data'), ('Science', 'Science'), ('Pipeline', 'pipeline'), ('Why', 'why'), ('Python', 'python'), ('?', '?')] 

 Dependency tags are: 
>> [(('Core', 'competencies'), 'compound'), (('competencies', 'root'), 'root'), (('of', 'scientist'), 'case'), (('a', 'scientist'), 'det'), (('data', 'scientist'), 'compound'), (('scientist', 'competencies'), 'nmod'), (('Creating', 'scientist'), 'acl'), (('the', 'Pipeline'), 'det'), (('Data', 'Science'), 'compound'), (('Science', 'Pipeline'), 'compound'), (('Pipeline', 'Creating'), 'obj'), (('Why', 'Python'), 'mark'), (('Python', 'Creating'), 'obl'), (('?', 'competencies'), 'punct')]

 Named Entities are: 
>> [('Creating the Data Science Pipeline Why Python', 'WORK_OF_ART')]

========================== Sentence 4 ===========================

 Understanding Python's Role in Data Science Considering Speed of Execution Using the Python Ecosystem for Data Science Performing fundamental scientific computing using NumPy Performing data analysis using pandas Accessing scientific tools using SciPy Implementing machine learning using Scikit-learn Going for deep learning with Keras and TensorFlow Plotting the data using matplotlib Creating graphs with NetworkX Parsing HTML documents using Beautiful Soup     Core competencies of a data scientist The Data Scientist requires knowledge of vast range of skills to perform required tasks. 

Tokens are: 
>> ['Understanding', 'Python', "'s", 'Role', 'in', 'Data', 'Science', 'Considering', 'Speed', 'of', 'Execution', 'Using', 'the', 'Python', 'Ecosystem', 'for', 'Data', 'Science', 'Performing', 'fundamental', 'scientific', 'computing', 'using', 'NumPy', 'Performing', 'data', 'analysis', 'using', 'pandas', 'Accessing', 'scientific', 'tools', 'using', 'SciPy', 'Implementing', 'machine', 'learning', 'using', 'Scikit-learn', 'Going', 'for', 'deep', 'learning', 'with', 'Keras', 'and', 'TensorFlow', 'Plotting', 'the', 'data', 'using', 'matplotlib', 'Creating', 'graphs', 'with', 'NetworkX', 'Parsing', 'HTML', 'documents', 'using', 'Beautiful', 'Soup', 'Core', 'competencies', 'of', 'a', 'data', 'scientist', 'The', 'Data', 'Scientist', 'requires', 'knowledge', 'of', 'vast', 'range', 'of', 'skills', 'to', 'perform', 'required', 'tasks', '.'] 

 UPOS tags are: 
>> [('Understanding', 'VERB'), ('Python', 'PROPN'), ("'s", 'PART'), ('Role', 'PROPN'), ('in', 'ADP'), ('Data', 'PROPN'), ('Science', 'PROPN'), ('Considering', 'VERB'), ('Speed', 'PROPN'), ('of', 'ADP'), ('Execution', 'NOUN'), ('Using', 'VERB'), ('the', 'DET'), ('Python', 'PROPN'), ('Ecosystem', 'PROPN'), ('for', 'ADP'), ('Data', 'PROPN'), ('Science', 'PROPN'), ('Performing', 'VERB'), ('fundamental', 'ADJ'), ('scientific', 'ADJ'), ('computing', 'NOUN'), ('using', 'VERB'), ('NumPy', 'PROPN'), ('Performing', 'VERB'), ('data', 'NOUN'), ('analysis', 'NOUN'), ('using', 'VERB'), ('pandas', 'NOUN'), ('Accessing', 'VERB'), ('scientific', 'ADJ'), ('tools', 'NOUN'), ('using', 'VERB'), ('SciPy', 'PROPN'), ('Implementing', 'VERB'), ('machine', 'NOUN'), ('learning', 'NOUN'), ('using', 'VERB'), ('Scikit-learn', 'ADJ'), ('Going', 'VERB'), ('for', 'ADP'), ('deep', 'ADJ'), ('learning', 'NOUN'), ('with', 'ADP'), ('Keras', 'PROPN'), ('and', 'CCONJ'), ('TensorFlow', 'PROPN'), ('Plotting', 'VERB'), ('the', 'DET'), ('data', 'NOUN'), ('using', 'VERB'), ('matplotlib', 'NOUN'), ('Creating', 'VERB'), ('graphs', 'NOUN'), ('with', 'ADP'), ('NetworkX', 'PROPN'), ('Parsing', 'PROPN'), ('HTML', 'PROPN'), ('documents', 'NOUN'), ('using', 'VERB'), ('Beautiful', 'ADJ'), ('Soup', 'PROPN'), ('Core', 'PROPN'), ('competencies', 'NOUN'), ('of', 'ADP'), ('a', 'DET'), ('data', 'NOUN'), ('scientist', 'NOUN'), ('The', 'DET'), ('Data', 'PROPN'), ('Scientist', 'PROPN'), ('requires', 'VERB'), ('knowledge', 'NOUN'), ('of', 'ADP'), ('vast', 'ADJ'), ('range', 'NOUN'), ('of', 'ADP'), ('skills', 'NOUN'), ('to', 'PART'), ('perform', 'VERB'), ('required', 'VERB'), ('tasks', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Understanding', 'VBG'), ('Python', 'NNP'), ("'s", 'POS'), ('Role', 'NNP'), ('in', 'IN'), ('Data', 'NNP'), ('Science', 'NNP'), ('Considering', 'VBG'), ('Speed', 'NNP'), ('of', 'IN'), ('Execution', 'NN'), ('Using', 'VBG'), ('the', 'DT'), ('Python', 'NNP'), ('Ecosystem', 'NNP'), ('for', 'IN'), ('Data', 'NNP'), ('Science', 'NNP'), ('Performing', 'VBG'), ('fundamental', 'JJ'), ('scientific', 'JJ'), ('computing', 'NN'), ('using', 'VBG'), ('NumPy', 'NNP'), ('Performing', 'VBG'), ('data', 'NNS'), ('analysis', 'NN'), ('using', 'VBG'), ('pandas', 'NNS'), ('Accessing', 'VBG'), ('scientific', 'JJ'), ('tools', 'NNS'), ('using', 'VBG'), ('SciPy', 'NNP'), ('Implementing', 'VBG'), ('machine', 'NN'), ('learning', 'NN'), ('using', 'VBG'), ('Scikit-learn', 'JJ'), ('Going', 'VBG'), ('for', 'IN'), ('deep', 'JJ'), ('learning', 'NN'), ('with', 'IN'), ('Keras', 'NNP'), ('and', 'CC'), ('TensorFlow', 'NNP'), ('Plotting', 'VBG'), ('the', 'DT'), ('data', 'NNS'), ('using', 'VBG'), ('matplotlib', 'NN'), ('Creating', 'VBG'), ('graphs', 'NNS'), ('with', 'IN'), ('NetworkX', 'NNP'), ('Parsing', 'NNP'), ('HTML', 'NNP'), ('documents', 'NNS'), ('using', 'VBG'), ('Beautiful', 'NNP'), ('Soup', 'NNP'), ('Core', 'NNP'), ('competencies', 'NNS'), ('of', 'IN'), ('a', 'DT'), ('data', 'NN'), ('scientist', 'NN'), ('The', 'DT'), ('Data', 'NNP'), ('Scientist', 'NNP'), ('requires', 'VBZ'), ('knowledge', 'NN'), ('of', 'IN'), ('vast', 'JJ'), ('range', 'NN'), ('of', 'IN'), ('skills', 'NNS'), ('to', 'TO'), ('perform', 'VB'), ('required', 'VBN'), ('tasks', 'NNS'), ('.', '.')] 

 Lemmas are: 
>> [('Understanding', 'understand'), ('Python', 'python'), ("'s", "'s"), ('Role', 'Role'), ('in', 'in'), ('Data', 'data'), ('Science', 'Science'), ('Considering', 'consider'), ('Speed', 'Speed'), ('of', 'of'), ('Execution', 'execution'), ('Using', 'use'), ('the', 'the'), ('Python', 'python'), ('Ecosystem', 'Ecosystem'), ('for', 'for'), ('Data', 'data'), ('Science', 'Science'), ('Performing', 'perform'), ('fundamental', 'fundamental'), ('scientific', 'scientific'), ('computing', 'computing'), ('using', 'use'), ('NumPy', 'NumPy'), ('Performing', 'perform'), ('data', 'datum'), ('analysis', 'analysis'), ('using', 'use'), ('pandas', 'panda'), ('Accessing', 'access'), ('scientific', 'scientific'), ('tools', 'tool'), ('using', 'use'), ('SciPy', 'SciPy'), ('Implementing', 'implement'), ('machine', 'machine'), ('learning', 'learning'), ('using', 'use'), ('Scikit-learn', 'scikit-learn'), ('Going', 'go'), ('for', 'for'), ('deep', 'deep'), ('learning', 'learning'), ('with', 'with'), ('Keras', 'Keras'), ('and', 'and'), ('TensorFlow', 'TensorFlow'), ('Plotting', 'plot'), ('the', 'the'), ('data', 'datum'), ('using', 'use'), ('matplotlib', 'matplotlib'), ('Creating', 'create'), ('graphs', 'graph'), ('with', 'with'), ('NetworkX', 'NetworkX'), ('Parsing', 'Parsing'), ('HTML', 'HTML'), ('documents', 'document'), ('using', 'use'), ('Beautiful', 'beautiful'), ('Soup', 'Soup'), ('Core', 'core'), ('competencies', 'competency'), ('of', 'of'), ('a', 'a'), ('data', 'datum'), ('scientist', 'scientist'), ('The', 'the'), ('Data', 'data'), ('Scientist', 'Scientist'), ('requires', 'require'), ('knowledge', 'knowledge'), ('of', 'of'), ('vast', 'vast'), ('range', 'range'), ('of', 'of'), ('skills', 'skill'), ('to', 'to'), ('perform', 'perform'), ('required', 'require'), ('tasks', 'task'), ('.', '.')] 

 Dependency tags are: 
>> [(('Understanding', 'requires'), 'advcl'), (('Python', 'Role'), 'nmod:poss'), (("'s", 'Python'), 'case'), (('Role', 'Understanding'), 'obj'), (('in', 'Science'), 'case'), (('Data', 'Science'), 'compound'), (('Science', 'Role'), 'nmod'), (('Considering', 'Understanding'), 'advcl'), (('Speed', 'Considering'), 'obj'), (('of', 'Execution'), 'case'), (('Execution', 'Speed'), 'nmod'), (('Using', 'Considering'), 'xcomp'), (('the', 'Ecosystem'), 'det'), (('Python', 'Ecosystem'), 'compound'), (('Ecosystem', 'Using'), 'obj'), (('for', 'Science'), 'case'), (('Data', 'Science'), 'compound'), (('Science', 'Ecosystem'), 'nmod'), (('Performing', 'Using'), 'advcl'), (('fundamental', 'computing'), 'amod'), (('scientific', 'computing'), 'amod'), (('computing', 'Performing'), 'obj'), (('using', 'Performing'), 'advcl'), (('NumPy', 'using'), 'obj'), (('Performing', 'using'), 'advcl'), (('data', 'analysis'), 'compound'), (('analysis', 'Performing'), 'obj'), (('using', 'using'), 'advcl'), (('pandas', 'using'), 'obj'), (('Accessing', 'pandas'), 'acl'), (('scientific', 'tools'), 'amod'), (('tools', 'Accessing'), 'obj'), (('using', 'tools'), 'acl'), (('SciPy', 'using'), 'obj'), (('Implementing', 'using'), 'advcl'), (('machine', 'learning'), 'compound'), (('learning', 'Implementing'), 'obj'), (('using', 'Implementing'), 'conj'), (('Scikit-learn', 'Going'), 'amod'), (('Going', 'using'), 'xcomp'), (('for', 'learning'), 'case'), (('deep', 'learning'), 'amod'), (('learning', 'Going'), 'obl'), (('with', 'Keras'), 'case'), (('Keras', 'learning'), 'nmod'), (('and', 'TensorFlow'), 'cc'), (('TensorFlow', 'Keras'), 'conj'), (('Plotting', 'TensorFlow'), 'acl'), (('the', 'data'), 'det'), (('data', 'Plotting'), 'obj'), (('using', 'data'), 'acl'), (('matplotlib', 'using'), 'obj'), (('Creating', 'using'), 'advcl'), (('graphs', 'Creating'), 'obj'), (('with', 'documents'), 'case'), (('NetworkX', 'documents'), 'compound'), (('Parsing', 'HTML'), 'compound'), (('HTML', 'documents'), 'compound'), (('documents', 'Creating'), 'obl'), (('using', 'documents'), 'acl'), (('Beautiful', 'Soup'), 'amod'), (('Soup', 'Core'), 'compound'), (('Core', 'competencies'), 'compound'), (('competencies', 'using'), 'obj'), (('of', 'scientist'), 'case'), (('a', 'scientist'), 'det'), (('data', 'scientist'), 'compound'), (('scientist', 'competencies'), 'nmod'), (('The', 'Scientist'), 'det'), (('Data', 'Scientist'), 'compound'), (('Scientist', 'requires'), 'nsubj'), (('requires', 'root'), 'root'), (('knowledge', 'requires'), 'obj'), (('of', 'range'), 'case'), (('vast', 'range'), 'amod'), (('range', 'knowledge'), 'nmod'), (('of', 'skills'), 'case'), (('skills', 'range'), 'nmod'), (('to', 'perform'), 'mark'), (('perform', 'range'), 'acl'), (('required', 'tasks'), 'amod'), (('tasks', 'perform'), 'obj'), (('.', 'requires'), 'punct')]

 Named Entities are: 
>> [('Python', 'ORG'), ('NumPy Performing data analysis using pandas Accessing scientific tools using SciPy Implementing machine learning using Scikit-learn Going for deep learning with Keras', 'WORK_OF_ART'), ('Beautiful Soup     Core', 'WORK_OF_ART'), ('The Data Scientist', 'WORK_OF_ART')]

========================== Sentence 5 ===========================

 Most of the times data scientists work in a team to provide the best results,  for example someone who is good at gathering data might team up with an analyst and some gifted in presenting information. 

Tokens are: 
>> ['Most', 'of', 'the', 'times', 'data', 'scientists', 'work', 'in', 'a', 'team', 'to', 'provide', 'the', 'best', 'results', ',', 'for', 'example', 'someone', 'who', 'is', 'good', 'at', 'gathering', 'data', 'might', 'team', 'up', 'with', 'an', 'analyst', 'and', 'some', 'gifted', 'in', 'presenting', 'information', '.'] 

 UPOS tags are: 
>> [('Most', 'ADJ'), ('of', 'ADP'), ('the', 'DET'), ('times', 'NOUN'), ('data', 'NOUN'), ('scientists', 'NOUN'), ('work', 'VERB'), ('in', 'ADP'), ('a', 'DET'), ('team', 'NOUN'), ('to', 'PART'), ('provide', 'VERB'), ('the', 'DET'), ('best', 'ADJ'), ('results', 'NOUN'), (',', 'PUNCT'), ('for', 'ADP'), ('example', 'NOUN'), ('someone', 'NOUN'), ('who', 'PRON'), ('is', 'AUX'), ('good', 'ADJ'), ('at', 'SCONJ'), ('gathering', 'NOUN'), ('data', 'NOUN'), ('might', 'AUX'), ('team', 'VERB'), ('up', 'ADP'), ('with', 'ADP'), ('an', 'DET'), ('analyst', 'NOUN'), ('and', 'CCONJ'), ('some', 'DET'), ('gifted', 'VERB'), ('in', 'SCONJ'), ('presenting', 'VERB'), ('information', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Most', 'JJS'), ('of', 'IN'), ('the', 'DT'), ('times', 'NNS'), ('data', 'NNS'), ('scientists', 'NNS'), ('work', 'VBP'), ('in', 'IN'), ('a', 'DT'), ('team', 'NN'), ('to', 'TO'), ('provide', 'VB'), ('the', 'DT'), ('best', 'JJS'), ('results', 'NNS'), (',', ','), ('for', 'IN'), ('example', 'NN'), ('someone', 'NN'), ('who', 'WP'), ('is', 'VBZ'), ('good', 'JJ'), ('at', 'IN'), ('gathering', 'NN'), ('data', 'NNS'), ('might', 'MD'), ('team', 'VB'), ('up', 'RP'), ('with', 'IN'), ('an', 'DT'), ('analyst', 'NN'), ('and', 'CC'), ('some', 'DT'), ('gifted', 'VBN'), ('in', 'IN'), ('presenting', 'VBG'), ('information', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('Most', 'most'), ('of', 'of'), ('the', 'the'), ('times', 'time'), ('data', 'datum'), ('scientists', 'scientist'), ('work', 'work'), ('in', 'in'), ('a', 'a'), ('team', 'team'), ('to', 'to'), ('provide', 'provide'), ('the', 'the'), ('best', 'good'), ('results', 'result'), (',', ','), ('for', 'for'), ('example', 'example'), ('someone', 'someone'), ('who', 'who'), ('is', 'be'), ('good', 'good'), ('at', 'at'), ('gathering', 'gathering'), ('data', 'datum'), ('might', 'might'), ('team', 'team'), ('up', 'up'), ('with', 'with'), ('an', 'a'), ('analyst', 'analyst'), ('and', 'and'), ('some', 'some'), ('gifted', 'gift'), ('in', 'in'), ('presenting', 'present'), ('information', 'information'), ('.', '.')] 

 Dependency tags are: 
>> [(('Most', 'work'), 'nsubj'), (('of', 'scientists'), 'case'), (('the', 'times'), 'det'), (('times', 'scientists'), 'compound'), (('data', 'scientists'), 'compound'), (('scientists', 'work'), 'nsubj'), (('work', 'root'), 'root'), (('in', 'team'), 'case'), (('a', 'team'), 'det'), (('team', 'work'), 'obl'), (('to', 'provide'), 'mark'), (('provide', 'work'), 'advcl'), (('the', 'results'), 'det'), (('best', 'results'), 'amod'), (('results', 'provide'), 'obj'), ((',', 'team'), 'punct'), (('for', 'example'), 'case'), (('example', 'team'), 'obl'), (('someone', 'team'), 'nsubj'), (('who', 'good'), 'nsubj'), (('is', 'good'), 'cop'), (('good', 'someone'), 'acl:relcl'), (('at', 'data'), 'case'), (('gathering', 'data'), 'compound'), (('data', 'good'), 'obl'), (('might', 'team'), 'aux'), (('team', 'work'), 'advcl'), (('up', 'team'), 'compound:prt'), (('with', 'analyst'), 'case'), (('an', 'analyst'), 'det'), (('analyst', 'team'), 'obl'), (('and', 'gifted'), 'cc'), (('some', 'analyst'), 'conj'), (('gifted', 'analyst'), 'acl'), (('in', 'presenting'), 'mark'), (('presenting', 'gifted'), 'advcl'), (('information', 'presenting'), 'obj'), (('.', 'work'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 6 ===========================

 It would be hard to find a single person with all the required skills. 

Tokens are: 
>> ['It', 'would', 'be', 'hard', 'to', 'find', 'a', 'single', 'person', 'with', 'all', 'the', 'required', 'skills', '.'] 

 UPOS tags are: 
>> [('It', 'PRON'), ('would', 'AUX'), ('be', 'AUX'), ('hard', 'ADJ'), ('to', 'PART'), ('find', 'VERB'), ('a', 'DET'), ('single', 'ADJ'), ('person', 'NOUN'), ('with', 'ADP'), ('all', 'DET'), ('the', 'DET'), ('required', 'VERB'), ('skills', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('It', 'PRP'), ('would', 'MD'), ('be', 'VB'), ('hard', 'JJ'), ('to', 'TO'), ('find', 'VB'), ('a', 'DT'), ('single', 'JJ'), ('person', 'NN'), ('with', 'IN'), ('all', 'PDT'), ('the', 'DT'), ('required', 'VBN'), ('skills', 'NNS'), ('.', '.')] 

 Lemmas are: 
>> [('It', 'it'), ('would', 'would'), ('be', 'be'), ('hard', 'hard'), ('to', 'to'), ('find', 'find'), ('a', 'a'), ('single', 'single'), ('person', 'person'), ('with', 'with'), ('all', 'all'), ('the', 'the'), ('required', 'require'), ('skills', 'skill'), ('.', '.')] 

 Dependency tags are: 
>> [(('It', 'hard'), 'expl'), (('would', 'hard'), 'aux'), (('be', 'hard'), 'cop'), (('hard', 'root'), 'root'), (('to', 'find'), 'mark'), (('find', 'hard'), 'csubj'), (('a', 'person'), 'det'), (('single', 'person'), 'amod'), (('person', 'find'), 'obj'), (('with', 'skills'), 'case'), (('all', 'skills'), 'det:predet'), (('the', 'skills'), 'det'), (('required', 'skills'), 'amod'), (('skills', 'find'), 'obl'), (('.', 'hard'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 7 ===========================

 Below are the areas in which a data scientist could find opportunity Data Capture : Managing data source (i.e.--- database, exel, pdf, text etc…) 

Tokens are: 
>> ['Below', 'are', 'the', 'areas', 'in', 'which', 'a', 'data', 'scientist', 'could', 'find', 'opportunity', 'Data', 'Capture', ':', 'Managing', 'data', 'source', '(', 'i.e.', '---', 'database', ',', 'exel', ',', 'pdf', ',', 'text', 'etc', '…', ')'] 

 UPOS tags are: 
>> [('Below', 'ADV'), ('are', 'AUX'), ('the', 'DET'), ('areas', 'NOUN'), ('in', 'ADP'), ('which', 'PRON'), ('a', 'DET'), ('data', 'NOUN'), ('scientist', 'NOUN'), ('could', 'AUX'), ('find', 'VERB'), ('opportunity', 'NOUN'), ('Data', 'NOUN'), ('Capture', 'NOUN'), (':', 'PUNCT'), ('Managing', 'VERB'), ('data', 'NOUN'), ('source', 'NOUN'), ('(', 'PUNCT'), ('i.e.', 'ADV'), ('---', 'PUNCT'), ('database', 'NOUN'), (',', 'PUNCT'), ('exel', 'NOUN'), (',', 'PUNCT'), ('pdf', 'NOUN'), (',', 'PUNCT'), ('text', 'NOUN'), ('etc', 'X'), ('…', 'PUNCT'), (')', 'PUNCT')] 

 XPOS tags are: 
>> [('Below', 'RB'), ('are', 'VBP'), ('the', 'DT'), ('areas', 'NNS'), ('in', 'IN'), ('which', 'WDT'), ('a', 'DT'), ('data', 'NN'), ('scientist', 'NN'), ('could', 'MD'), ('find', 'VB'), ('opportunity', 'NN'), ('Data', 'NN'), ('Capture', 'NN'), (':', ':'), ('Managing', 'VBG'), ('data', 'NN'), ('source', 'NN'), ('(', '-LRB-'), ('i.e.', 'FW'), ('---', ','), ('database', 'NN'), (',', ','), ('exel', 'NN'), (',', ','), ('pdf', 'NN'), (',', ','), ('text', 'NN'), ('etc', 'FW'), ('…', '.'), (')', '-RRB-')] 

 Lemmas are: 
>> [('Below', 'below'), ('are', 'be'), ('the', 'the'), ('areas', 'area'), ('in', 'in'), ('which', 'which'), ('a', 'a'), ('data', 'datum'), ('scientist', 'scientist'), ('could', 'could'), ('find', 'find'), ('opportunity', 'opportunity'), ('Data', 'data'), ('Capture', 'capture'), (':', ':'), ('Managing', 'manage'), ('data', 'datum'), ('source', 'source'), ('(', '('), ('i.e.', 'i.e.'), ('---', '---'), ('database', 'database'), (',', ','), ('exel', 'exel'), (',', ','), ('pdf', 'pdf'), (',', ','), ('text', 'text'), ('etc', 'etc'), ('…', '…'), (')', ')')] 

 Dependency tags are: 
>> [(('Below', 'root'), 'root'), (('are', 'Below'), 'cop'), (('the', 'areas'), 'det'), (('areas', 'Below'), 'nsubj'), (('in', 'which'), 'case'), (('which', 'find'), 'obl'), (('a', 'scientist'), 'det'), (('data', 'scientist'), 'compound'), (('scientist', 'find'), 'nsubj'), (('could', 'find'), 'aux'), (('find', 'areas'), 'acl:relcl'), (('opportunity', 'Capture'), 'compound'), (('Data', 'Capture'), 'compound'), (('Capture', 'find'), 'obj'), ((':', 'areas'), 'punct'), (('Managing', 'find'), 'advcl'), (('data', 'source'), 'compound'), (('source', 'Managing'), 'obj'), (('(', 'database'), 'punct'), (('i.e.', 'database'), 'advmod'), (('---', 'database'), 'punct'), (('database', 'source'), 'appos'), ((',', 'exel'), 'punct'), (('exel', 'database'), 'conj'), ((',', 'pdf'), 'punct'), (('pdf', 'database'), 'conj'), ((',', 'text'), 'punct'), (('text', 'database'), 'conj'), (('etc', 'database'), 'conj'), (('…', 'database'), 'punct'), ((')', 'database'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 8 ===========================

 Converting the unstructured data to structured data. 

Tokens are: 
>> ['Converting', 'the', 'unstructured', 'data', 'to', 'structured', 'data', '.'] 

 UPOS tags are: 
>> [('Converting', 'VERB'), ('the', 'DET'), ('unstructured', 'ADJ'), ('data', 'NOUN'), ('to', 'ADP'), ('structured', 'VERB'), ('data', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Converting', 'VBG'), ('the', 'DT'), ('unstructured', 'JJ'), ('data', 'NNS'), ('to', 'IN'), ('structured', 'VBN'), ('data', 'NNS'), ('.', '.')] 

 Lemmas are: 
>> [('Converting', 'convert'), ('the', 'the'), ('unstructured', 'unstructured'), ('data', 'datum'), ('to', 'to'), ('structured', 'structure'), ('data', 'datum'), ('.', '.')] 

 Dependency tags are: 
>> [(('Converting', 'root'), 'root'), (('the', 'data'), 'det'), (('unstructured', 'data'), 'amod'), (('data', 'Converting'), 'obj'), (('to', 'data'), 'case'), (('structured', 'data'), 'amod'), (('data', 'data'), 'nmod'), (('.', 'Converting'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 9 ===========================

 Analysis : Knowledge of basic statistical tools. 

Tokens are: 
>> ['Analysis', ':', 'Knowledge', 'of', 'basic', 'statistical', 'tools', '.'] 

 UPOS tags are: 
>> [('Analysis', 'NOUN'), (':', 'PUNCT'), ('Knowledge', 'NOUN'), ('of', 'ADP'), ('basic', 'ADJ'), ('statistical', 'ADJ'), ('tools', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Analysis', 'NN'), (':', ':'), ('Knowledge', 'NN'), ('of', 'IN'), ('basic', 'JJ'), ('statistical', 'JJ'), ('tools', 'NNS'), ('.', '.')] 

 Lemmas are: 
>> [('Analysis', 'analysis'), (':', ':'), ('Knowledge', 'knowledge'), ('of', 'of'), ('basic', 'basic'), ('statistical', 'statistical'), ('tools', 'tool'), ('.', '.')] 

 Dependency tags are: 
>> [(('Analysis', 'root'), 'root'), ((':', 'Analysis'), 'punct'), (('Knowledge', 'Analysis'), 'appos'), (('of', 'tools'), 'case'), (('basic', 'tools'), 'amod'), (('statistical', 'tools'), 'amod'), (('tools', 'Knowledge'), 'nmod'), (('.', 'Analysis'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 10 ===========================

 Use of specialized math tricks and algorithms. 

Tokens are: 
>> ['Use', 'of', 'specialized', 'math', 'tricks', 'and', 'algorithms', '.'] 

 UPOS tags are: 
>> [('Use', 'NOUN'), ('of', 'ADP'), ('specialized', 'VERB'), ('math', 'NOUN'), ('tricks', 'NOUN'), ('and', 'CCONJ'), ('algorithms', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Use', 'NN'), ('of', 'IN'), ('specialized', 'VBN'), ('math', 'NN'), ('tricks', 'NNS'), ('and', 'CC'), ('algorithms', 'NNS'), ('.', '.')] 

 Lemmas are: 
>> [('Use', 'use'), ('of', 'of'), ('specialized', 'specialize'), ('math', 'math'), ('tricks', 'trick'), ('and', 'and'), ('algorithms', 'algorithm'), ('.', '.')] 

 Dependency tags are: 
>> [(('Use', 'root'), 'root'), (('of', 'tricks'), 'case'), (('specialized', 'tricks'), 'amod'), (('math', 'tricks'), 'compound'), (('tricks', 'Use'), 'nmod'), (('and', 'algorithms'), 'cc'), (('algorithms', 'tricks'), 'conj'), (('.', 'Use'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 11 ===========================

 Presentations : Provide graphical presentations of the pattern. 

Tokens are: 
>> ['Presentations', ':', 'Provide', 'graphical', 'presentations', 'of', 'the', 'pattern', '.'] 

 UPOS tags are: 
>> [('Presentations', 'NOUN'), (':', 'PUNCT'), ('Provide', 'VERB'), ('graphical', 'ADJ'), ('presentations', 'NOUN'), ('of', 'ADP'), ('the', 'DET'), ('pattern', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Presentations', 'NNS'), (':', ':'), ('Provide', 'VB'), ('graphical', 'JJ'), ('presentations', 'NNS'), ('of', 'IN'), ('the', 'DT'), ('pattern', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('Presentations', 'presentation'), (':', ':'), ('Provide', 'provide'), ('graphical', 'graphical'), ('presentations', 'presentation'), ('of', 'of'), ('the', 'the'), ('pattern', 'pattern'), ('.', '.')] 

 Dependency tags are: 
>> [(('Presentations', 'root'), 'root'), ((':', 'Presentations'), 'punct'), (('Provide', 'Presentations'), 'appos'), (('graphical', 'presentations'), 'amod'), (('presentations', 'Provide'), 'obj'), (('of', 'pattern'), 'case'), (('the', 'pattern'), 'det'), (('pattern', 'presentations'), 'nmod'), (('.', 'Presentations'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 12 ===========================

 Represent the results of the data analysis to the end users. 

Tokens are: 
>> ['Represent', 'the', 'results', 'of', 'the', 'data', 'analysis', 'to', 'the', 'end', 'users', '.'] 

 UPOS tags are: 
>> [('Represent', 'VERB'), ('the', 'DET'), ('results', 'NOUN'), ('of', 'ADP'), ('the', 'DET'), ('data', 'NOUN'), ('analysis', 'NOUN'), ('to', 'ADP'), ('the', 'DET'), ('end', 'NOUN'), ('users', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Represent', 'VB'), ('the', 'DT'), ('results', 'NNS'), ('of', 'IN'), ('the', 'DT'), ('data', 'NN'), ('analysis', 'NN'), ('to', 'IN'), ('the', 'DT'), ('end', 'NN'), ('users', 'NNS'), ('.', '.')] 

 Lemmas are: 
>> [('Represent', 'represent'), ('the', 'the'), ('results', 'result'), ('of', 'of'), ('the', 'the'), ('data', 'datum'), ('analysis', 'analysis'), ('to', 'to'), ('the', 'the'), ('end', 'end'), ('users', 'user'), ('.', '.')] 

 Dependency tags are: 
>> [(('Represent', 'root'), 'root'), (('the', 'results'), 'det'), (('results', 'Represent'), 'obj'), (('of', 'analysis'), 'case'), (('the', 'analysis'), 'det'), (('data', 'analysis'), 'compound'), (('analysis', 'results'), 'nmod'), (('to', 'users'), 'case'), (('the', 'users'), 'det'), (('end', 'users'), 'compound'), (('users', 'analysis'), 'nmod'), (('.', 'Represent'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 13 ===========================

 Prof. Arjun V. Bala #3150713 (PDS)      Unit 02 – Data Science and Python ‹#›  Creating the Data Science Pipeline Data science pipeline requires the data scientist to follow particular steps in the preparation, analysis and presentation of the data. 

Tokens are: 
>> ['Prof.', 'Arjun', 'V.', 'Bala', '#', '3150713', '(', 'PDS', ')', '\uf077', 'Unit', '02', '–', 'Data', 'Science', 'and', 'Python', '‹#›', 'Creating', 'the', 'Data', 'Science', 'Pipeline', 'Data', 'science', 'pipeline', 'requires', 'the', 'data', 'scientist', 'to', 'follow', 'particular', 'steps', 'in', 'the', 'preparation', ',', 'analysis', 'and', 'presentation', 'of', 'the', 'data', '.'] 

 UPOS tags are: 
>> [('Prof.', 'PROPN'), ('Arjun', 'PROPN'), ('V.', 'PROPN'), ('Bala', 'PROPN'), ('#', 'SYM'), ('3150713', 'NUM'), ('(', 'PUNCT'), ('PDS', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('02', 'NUM'), ('–', 'PUNCT'), ('Data', 'NOUN'), ('Science', 'PROPN'), ('and', 'CCONJ'), ('Python', 'PROPN'), ('‹#›', 'NOUN'), ('Creating', 'VERB'), ('the', 'DET'), ('Data', 'PROPN'), ('Science', 'PROPN'), ('Pipeline', 'PROPN'), ('Data', 'NOUN'), ('science', 'NOUN'), ('pipeline', 'NOUN'), ('requires', 'VERB'), ('the', 'DET'), ('data', 'NOUN'), ('scientist', 'NOUN'), ('to', 'PART'), ('follow', 'VERB'), ('particular', 'ADJ'), ('steps', 'NOUN'), ('in', 'ADP'), ('the', 'DET'), ('preparation', 'NOUN'), (',', 'PUNCT'), ('analysis', 'NOUN'), ('and', 'CCONJ'), ('presentation', 'NOUN'), ('of', 'ADP'), ('the', 'DET'), ('data', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Prof.', 'NNP'), ('Arjun', 'NNP'), ('V.', 'NNP'), ('Bala', 'NNP'), ('#', 'NN'), ('3150713', 'CD'), ('(', '-LRB-'), ('PDS', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('02', 'CD'), ('–', ','), ('Data', 'NN'), ('Science', 'NNP'), ('and', 'CC'), ('Python', 'NNP'), ('‹#›', 'NN'), ('Creating', 'VBG'), ('the', 'DT'), ('Data', 'NNP'), ('Science', 'NNP'), ('Pipeline', 'NNP'), ('Data', 'NN'), ('science', 'NN'), ('pipeline', 'NN'), ('requires', 'VBZ'), ('the', 'DT'), ('data', 'NN'), ('scientist', 'NN'), ('to', 'TO'), ('follow', 'VB'), ('particular', 'JJ'), ('steps', 'NNS'), ('in', 'IN'), ('the', 'DT'), ('preparation', 'NN'), (',', ','), ('analysis', 'NN'), ('and', 'CC'), ('presentation', 'NN'), ('of', 'IN'), ('the', 'DT'), ('data', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('Prof.', 'Prof.'), ('Arjun', 'Arjun'), ('V.', 'V.'), ('Bala', 'Bala'), ('#', '#'), ('3150713', '3150713'), ('(', '('), ('PDS', 'pds'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('02', '02'), ('–', '-'), ('Data', 'data'), ('Science', 'Science'), ('and', 'and'), ('Python', 'python'), ('‹#›', '‹#›'), ('Creating', 'create'), ('the', 'the'), ('Data', 'data'), ('Science', 'Science'), ('Pipeline', 'Pipeline'), ('Data', 'data'), ('science', 'science'), ('pipeline', 'pipeline'), ('requires', 'require'), ('the', 'the'), ('data', 'datum'), ('scientist', 'scientist'), ('to', 'to'), ('follow', 'follow'), ('particular', 'particular'), ('steps', 'step'), ('in', 'in'), ('the', 'the'), ('preparation', 'preparation'), (',', ','), ('analysis', 'analysis'), ('and', 'and'), ('presentation', 'presentation'), ('of', 'of'), ('the', 'the'), ('data', 'datum'), ('.', '.')] 

 Dependency tags are: 
>> [(('Prof.', 'requires'), 'nsubj'), (('Arjun', 'Prof.'), 'flat'), (('V.', 'Prof.'), 'flat'), (('Bala', 'Prof.'), 'flat'), (('#', 'Prof.'), 'list'), (('3150713', '#'), 'nummod'), (('(', 'PDS'), 'punct'), (('PDS', 'Unit'), 'compound'), ((')', 'PDS'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', 'Prof.'), 'list'), (('02', 'Unit'), 'nummod'), (('–', 'Prof.'), 'punct'), (('Data', '‹#›'), 'compound'), (('Science', '‹#›'), 'compound'), (('and', 'Python'), 'cc'), (('Python', 'Science'), 'conj'), (('‹#›', 'Prof.'), 'appos'), (('Creating', '‹#›'), 'acl'), (('the', 'pipeline'), 'det'), (('Data', 'Science'), 'compound'), (('Science', 'pipeline'), 'compound'), (('Pipeline', 'pipeline'), 'compound'), (('Data', 'pipeline'), 'compound'), (('science', 'pipeline'), 'compound'), (('pipeline', 'Creating'), 'obj'), (('requires', 'root'), 'root'), (('the', 'scientist'), 'det'), (('data', 'scientist'), 'compound'), (('scientist', 'requires'), 'obj'), (('to', 'follow'), 'mark'), (('follow', 'requires'), 'xcomp'), (('particular', 'steps'), 'amod'), (('steps', 'follow'), 'obj'), (('in', 'preparation'), 'case'), (('the', 'preparation'), 'det'), (('preparation', 'steps'), 'nmod'), ((',', 'analysis'), 'punct'), (('analysis', 'preparation'), 'conj'), (('and', 'presentation'), 'cc'), (('presentation', 'preparation'), 'conj'), (('of', 'data'), 'case'), (('the', 'data'), 'det'), (('data', 'presentation'), 'nmod'), (('.', 'requires'), 'punct')]

 Named Entities are: 
>> [('Arjun V. Bala', 'PERSON'), ('3150713', 'CARDINAL'), ('Unit 02 – Data Science', 'ORG'), ('the Data Science Pipeline Data', 'ORG')]

========================== Sentence 14 ===========================

 General steps in the pipeline are Preparing the data 

Tokens are: 
>> ['General', 'steps', 'in', 'the', 'pipeline', 'are', 'Preparing', 'the', 'data'] 

 UPOS tags are: 
>> [('General', 'ADJ'), ('steps', 'NOUN'), ('in', 'ADP'), ('the', 'DET'), ('pipeline', 'NOUN'), ('are', 'AUX'), ('Preparing', 'VERB'), ('the', 'DET'), ('data', 'NOUN')] 

 XPOS tags are: 
>> [('General', 'JJ'), ('steps', 'NNS'), ('in', 'IN'), ('the', 'DT'), ('pipeline', 'NN'), ('are', 'VBP'), ('Preparing', 'VBG'), ('the', 'DT'), ('data', 'NNS')] 

 Lemmas are: 
>> [('General', 'General'), ('steps', 'step'), ('in', 'in'), ('the', 'the'), ('pipeline', 'pipeline'), ('are', 'be'), ('Preparing', 'prepare'), ('the', 'the'), ('data', 'datum')] 

 Dependency tags are: 
>> [(('General', 'steps'), 'amod'), (('steps', 'Preparing'), 'nsubj'), (('in', 'pipeline'), 'case'), (('the', 'pipeline'), 'det'), (('pipeline', 'steps'), 'nmod'), (('are', 'Preparing'), 'aux'), (('Preparing', 'root'), 'root'), (('the', 'data'), 'det'), (('data', 'Preparing'), 'obj')]

 Named Entities are: 
>> []

========================== Sentence 15 ===========================

 The data we access from various sources may not come directly in the structured format. 

Tokens are: 
>> ['The', 'data', 'we', 'access', 'from', 'various', 'sources', 'may', 'not', 'come', 'directly', 'in', 'the', 'structured', 'format', '.'] 

 UPOS tags are: 
>> [('The', 'DET'), ('data', 'NOUN'), ('we', 'PRON'), ('access', 'VERB'), ('from', 'ADP'), ('various', 'ADJ'), ('sources', 'NOUN'), ('may', 'AUX'), ('not', 'PART'), ('come', 'VERB'), ('directly', 'ADV'), ('in', 'ADP'), ('the', 'DET'), ('structured', 'VERB'), ('format', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('The', 'DT'), ('data', 'NNS'), ('we', 'PRP'), ('access', 'VBP'), ('from', 'IN'), ('various', 'JJ'), ('sources', 'NNS'), ('may', 'MD'), ('not', 'RB'), ('come', 'VB'), ('directly', 'RB'), ('in', 'IN'), ('the', 'DT'), ('structured', 'VBN'), ('format', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('The', 'the'), ('data', 'datum'), ('we', 'we'), ('access', 'access'), ('from', 'from'), ('various', 'various'), ('sources', 'source'), ('may', 'may'), ('not', 'not'), ('come', 'come'), ('directly', 'directly'), ('in', 'in'), ('the', 'the'), ('structured', 'structure'), ('format', 'format'), ('.', '.')] 

 Dependency tags are: 
>> [(('The', 'data'), 'det'), (('data', 'come'), 'nsubj'), (('we', 'access'), 'nsubj'), (('access', 'data'), 'acl:relcl'), (('from', 'sources'), 'case'), (('various', 'sources'), 'amod'), (('sources', 'access'), 'obl'), (('may', 'come'), 'aux'), (('not', 'come'), 'advmod'), (('come', 'root'), 'root'), (('directly', 'come'), 'advmod'), (('in', 'format'), 'case'), (('the', 'format'), 'det'), (('structured', 'format'), 'amod'), (('format', 'come'), 'obl'), (('.', 'come'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 16 ===========================

 We need to transform the data in the structured format. 

Tokens are: 
>> ['We', 'need', 'to', 'transform', 'the', 'data', 'in', 'the', 'structured', 'format', '.'] 

 UPOS tags are: 
>> [('We', 'PRON'), ('need', 'VERB'), ('to', 'PART'), ('transform', 'VERB'), ('the', 'DET'), ('data', 'NOUN'), ('in', 'ADP'), ('the', 'DET'), ('structured', 'VERB'), ('format', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('We', 'PRP'), ('need', 'VBP'), ('to', 'TO'), ('transform', 'VB'), ('the', 'DT'), ('data', 'NNS'), ('in', 'IN'), ('the', 'DT'), ('structured', 'VBN'), ('format', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('We', 'we'), ('need', 'need'), ('to', 'to'), ('transform', 'transform'), ('the', 'the'), ('data', 'datum'), ('in', 'in'), ('the', 'the'), ('structured', 'structure'), ('format', 'format'), ('.', '.')] 

 Dependency tags are: 
>> [(('We', 'need'), 'nsubj'), (('need', 'root'), 'root'), (('to', 'transform'), 'mark'), (('transform', 'need'), 'xcomp'), (('the', 'data'), 'det'), (('data', 'transform'), 'obj'), (('in', 'format'), 'case'), (('the', 'format'), 'det'), (('structured', 'format'), 'amod'), (('format', 'transform'), 'obl'), (('.', 'need'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 17 ===========================

 Transformation may require changing data types, order in which data appears and even the creation of missing data Performing data analysis Results of the data analysis should be provable and consistent. 

Tokens are: 
>> ['Transformation', 'may', 'require', 'changing', 'data', 'types', ',', 'order', 'in', 'which', 'data', 'appears', 'and', 'even', 'the', 'creation', 'of', 'missing', 'data', 'Performing', 'data', 'analysis', 'Results', 'of', 'the', 'data', 'analysis', 'should', 'be', 'provable', 'and', 'consistent', '.'] 

 UPOS tags are: 
>> [('Transformation', 'NOUN'), ('may', 'AUX'), ('require', 'VERB'), ('changing', 'VERB'), ('data', 'NOUN'), ('types', 'NOUN'), (',', 'PUNCT'), ('order', 'NOUN'), ('in', 'ADP'), ('which', 'PRON'), ('data', 'NOUN'), ('appears', 'VERB'), ('and', 'CCONJ'), ('even', 'ADV'), ('the', 'DET'), ('creation', 'NOUN'), ('of', 'ADP'), ('missing', 'VERB'), ('data', 'NOUN'), ('Performing', 'VERB'), ('data', 'NOUN'), ('analysis', 'NOUN'), ('Results', 'NOUN'), ('of', 'ADP'), ('the', 'DET'), ('data', 'NOUN'), ('analysis', 'NOUN'), ('should', 'AUX'), ('be', 'AUX'), ('provable', 'ADJ'), ('and', 'CCONJ'), ('consistent', 'ADJ'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Transformation', 'NN'), ('may', 'MD'), ('require', 'VB'), ('changing', 'VBG'), ('data', 'NN'), ('types', 'NNS'), (',', ','), ('order', 'NN'), ('in', 'IN'), ('which', 'WDT'), ('data', 'NNS'), ('appears', 'VBZ'), ('and', 'CC'), ('even', 'RB'), ('the', 'DT'), ('creation', 'NN'), ('of', 'IN'), ('missing', 'VBG'), ('data', 'NNS'), ('Performing', 'VBG'), ('data', 'NNS'), ('analysis', 'NN'), ('Results', 'NNS'), ('of', 'IN'), ('the', 'DT'), ('data', 'NN'), ('analysis', 'NN'), ('should', 'MD'), ('be', 'VB'), ('provable', 'JJ'), ('and', 'CC'), ('consistent', 'JJ'), ('.', '.')] 

 Lemmas are: 
>> [('Transformation', 'transformation'), ('may', 'may'), ('require', 'require'), ('changing', 'change'), ('data', 'datum'), ('types', 'type'), (',', ','), ('order', 'order'), ('in', 'in'), ('which', 'which'), ('data', 'datum'), ('appears', 'appear'), ('and', 'and'), ('even', 'even'), ('the', 'the'), ('creation', 'creation'), ('of', 'of'), ('missing', 'miss'), ('data', 'datum'), ('Performing', 'perform'), ('data', 'datum'), ('analysis', 'analysis'), ('Results', 'result'), ('of', 'of'), ('the', 'the'), ('data', 'datum'), ('analysis', 'analysis'), ('should', 'should'), ('be', 'be'), ('provable', 'provable'), ('and', 'and'), ('consistent', 'consistent'), ('.', '.')] 

 Dependency tags are: 
>> [(('Transformation', 'require'), 'nsubj'), (('may', 'require'), 'aux'), (('require', 'root'), 'root'), (('changing', 'types'), 'amod'), (('data', 'types'), 'compound'), (('types', 'require'), 'obj'), ((',', 'appears'), 'punct'), (('order', 'appears'), 'mark'), (('in', 'which'), 'case'), (('which', 'appears'), 'obl'), (('data', 'appears'), 'nsubj'), (('appears', 'types'), 'acl:relcl'), (('and', 'provable'), 'cc'), (('even', 'creation'), 'advmod'), (('the', 'creation'), 'det'), (('creation', 'provable'), 'nsubj'), (('of', 'data'), 'case'), (('missing', 'data'), 'amod'), (('data', 'creation'), 'nmod'), (('Performing', 'data'), 'acl'), (('data', 'analysis'), 'compound'), (('analysis', 'Results'), 'compound'), (('Results', 'Performing'), 'obj'), (('of', 'analysis'), 'case'), (('the', 'analysis'), 'det'), (('data', 'analysis'), 'compound'), (('analysis', 'Results'), 'nmod'), (('should', 'provable'), 'aux'), (('be', 'provable'), 'cop'), (('provable', 'appears'), 'conj'), (('and', 'consistent'), 'cc'), (('consistent', 'provable'), 'conj'), (('.', 'require'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 18 ===========================

 Some time single approach may not provide the desired output, we need to use multiple algorithms to get the result. 

Tokens are: 
>> ['Some', 'time', 'single', 'approach', 'may', 'not', 'provide', 'the', 'desired', 'output', ',', 'we', 'need', 'to', 'use', 'multiple', 'algorithms', 'to', 'get', 'the', 'result', '.'] 

 UPOS tags are: 
>> [('Some', 'DET'), ('time', 'NOUN'), ('single', 'ADJ'), ('approach', 'NOUN'), ('may', 'AUX'), ('not', 'PART'), ('provide', 'VERB'), ('the', 'DET'), ('desired', 'VERB'), ('output', 'NOUN'), (',', 'PUNCT'), ('we', 'PRON'), ('need', 'VERB'), ('to', 'PART'), ('use', 'VERB'), ('multiple', 'ADJ'), ('algorithms', 'NOUN'), ('to', 'PART'), ('get', 'VERB'), ('the', 'DET'), ('result', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Some', 'DT'), ('time', 'NN'), ('single', 'JJ'), ('approach', 'NN'), ('may', 'MD'), ('not', 'RB'), ('provide', 'VB'), ('the', 'DT'), ('desired', 'VBN'), ('output', 'NN'), (',', ','), ('we', 'PRP'), ('need', 'VBP'), ('to', 'TO'), ('use', 'VB'), ('multiple', 'JJ'), ('algorithms', 'NNS'), ('to', 'TO'), ('get', 'VB'), ('the', 'DT'), ('result', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('Some', 'some'), ('time', 'time'), ('single', 'single'), ('approach', 'approach'), ('may', 'may'), ('not', 'not'), ('provide', 'provide'), ('the', 'the'), ('desired', 'desire'), ('output', 'output'), (',', ','), ('we', 'we'), ('need', 'need'), ('to', 'to'), ('use', 'use'), ('multiple', 'multiple'), ('algorithms', 'algorithm'), ('to', 'to'), ('get', 'get'), ('the', 'the'), ('result', 'result'), ('.', '.')] 

 Dependency tags are: 
>> [(('Some', 'approach'), 'det'), (('time', 'approach'), 'compound'), (('single', 'approach'), 'amod'), (('approach', 'provide'), 'nsubj'), (('may', 'provide'), 'aux'), (('not', 'provide'), 'advmod'), (('provide', 'root'), 'root'), (('the', 'output'), 'det'), (('desired', 'output'), 'amod'), (('output', 'provide'), 'obj'), ((',', 'need'), 'punct'), (('we', 'need'), 'nsubj'), (('need', 'provide'), 'parataxis'), (('to', 'use'), 'mark'), (('use', 'need'), 'xcomp'), (('multiple', 'algorithms'), 'amod'), (('algorithms', 'use'), 'obj'), (('to', 'get'), 'mark'), (('get', 'use'), 'advcl'), (('the', 'result'), 'det'), (('result', 'get'), 'obj'), (('.', 'provide'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 19 ===========================

 The use of trial and error is part of the data science art. 

Tokens are: 
>> ['The', 'use', 'of', 'trial', 'and', 'error', 'is', 'part', 'of', 'the', 'data', 'science', 'art', '.'] 

 UPOS tags are: 
>> [('The', 'DET'), ('use', 'NOUN'), ('of', 'ADP'), ('trial', 'NOUN'), ('and', 'CCONJ'), ('error', 'NOUN'), ('is', 'AUX'), ('part', 'NOUN'), ('of', 'ADP'), ('the', 'DET'), ('data', 'NOUN'), ('science', 'NOUN'), ('art', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('The', 'DT'), ('use', 'NN'), ('of', 'IN'), ('trial', 'NN'), ('and', 'CC'), ('error', 'NN'), ('is', 'VBZ'), ('part', 'NN'), ('of', 'IN'), ('the', 'DT'), ('data', 'NN'), ('science', 'NN'), ('art', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('The', 'the'), ('use', 'use'), ('of', 'of'), ('trial', 'trial'), ('and', 'and'), ('error', 'error'), ('is', 'be'), ('part', 'part'), ('of', 'of'), ('the', 'the'), ('data', 'datum'), ('science', 'science'), ('art', 'art'), ('.', '.')] 

 Dependency tags are: 
>> [(('The', 'use'), 'det'), (('use', 'part'), 'nsubj'), (('of', 'trial'), 'case'), (('trial', 'use'), 'nmod'), (('and', 'error'), 'cc'), (('error', 'trial'), 'conj'), (('is', 'part'), 'cop'), (('part', 'root'), 'root'), (('of', 'art'), 'case'), (('the', 'art'), 'det'), (('data', 'art'), 'compound'), (('science', 'art'), 'compound'), (('art', 'part'), 'nmod'), (('.', 'part'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 20 ===========================

 Learning from data 

Tokens are: 
>> ['Learning', 'from', 'data'] 

 UPOS tags are: 
>> [('Learning', 'VERB'), ('from', 'ADP'), ('data', 'NOUN')] 

 XPOS tags are: 
>> [('Learning', 'VBG'), ('from', 'IN'), ('data', 'NNS')] 

 Lemmas are: 
>> [('Learning', 'learning'), ('from', 'from'), ('data', 'datum')] 

 Dependency tags are: 
>> [(('Learning', 'root'), 'root'), (('from', 'data'), 'case'), (('data', 'Learning'), 'obl')]

 Named Entities are: 
>> []

========================== Sentence 21 ===========================

 As we iterate through various statistical analysis methods and apply algorithms to detect patterns, we begin learning from the data. 

Tokens are: 
>> ['As', 'we', 'iterate', 'through', 'various', 'statistical', 'analysis', 'methods', 'and', 'apply', 'algorithms', 'to', 'detect', 'patterns', ',', 'we', 'begin', 'learning', 'from', 'the', 'data', '.'] 

 UPOS tags are: 
>> [('As', 'SCONJ'), ('we', 'PRON'), ('iterate', 'VERB'), ('through', 'ADP'), ('various', 'ADJ'), ('statistical', 'ADJ'), ('analysis', 'NOUN'), ('methods', 'NOUN'), ('and', 'CCONJ'), ('apply', 'VERB'), ('algorithms', 'NOUN'), ('to', 'PART'), ('detect', 'VERB'), ('patterns', 'NOUN'), (',', 'PUNCT'), ('we', 'PRON'), ('begin', 'VERB'), ('learning', 'VERB'), ('from', 'ADP'), ('the', 'DET'), ('data', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('As', 'IN'), ('we', 'PRP'), ('iterate', 'VBP'), ('through', 'IN'), ('various', 'JJ'), ('statistical', 'JJ'), ('analysis', 'NN'), ('methods', 'NNS'), ('and', 'CC'), ('apply', 'VBP'), ('algorithms', 'NNS'), ('to', 'TO'), ('detect', 'VB'), ('patterns', 'NNS'), (',', ','), ('we', 'PRP'), ('begin', 'VBP'), ('learning', 'VBG'), ('from', 'IN'), ('the', 'DT'), ('data', 'NNS'), ('.', '.')] 

 Lemmas are: 
>> [('As', 'as'), ('we', 'we'), ('iterate', 'iterate'), ('through', 'through'), ('various', 'various'), ('statistical', 'statistical'), ('analysis', 'analysis'), ('methods', 'method'), ('and', 'and'), ('apply', 'apply'), ('algorithms', 'algorithm'), ('to', 'to'), ('detect', 'detect'), ('patterns', 'pattern'), (',', ','), ('we', 'we'), ('begin', 'begin'), ('learning', 'learn'), ('from', 'from'), ('the', 'the'), ('data', 'datum'), ('.', '.')] 

 Dependency tags are: 
>> [(('As', 'iterate'), 'mark'), (('we', 'iterate'), 'nsubj'), (('iterate', 'begin'), 'advcl'), (('through', 'methods'), 'case'), (('various', 'methods'), 'amod'), (('statistical', 'methods'), 'amod'), (('analysis', 'methods'), 'compound'), (('methods', 'iterate'), 'obl'), (('and', 'apply'), 'cc'), (('apply', 'iterate'), 'conj'), (('algorithms', 'apply'), 'obj'), (('to', 'detect'), 'mark'), (('detect', 'apply'), 'advcl'), (('patterns', 'detect'), 'obj'), ((',', 'begin'), 'punct'), (('we', 'begin'), 'nsubj'), (('begin', 'root'), 'root'), (('learning', 'begin'), 'xcomp'), (('from', 'data'), 'case'), (('the', 'data'), 'det'), (('data', 'learning'), 'obl'), (('.', 'begin'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 22 ===========================

 The data might not tell the story that you originally thought it would. 

Tokens are: 
>> ['The', 'data', 'might', 'not', 'tell', 'the', 'story', 'that', 'you', 'originally', 'thought', 'it', 'would', '.'] 

 UPOS tags are: 
>> [('The', 'DET'), ('data', 'NOUN'), ('might', 'AUX'), ('not', 'PART'), ('tell', 'VERB'), ('the', 'DET'), ('story', 'NOUN'), ('that', 'PRON'), ('you', 'PRON'), ('originally', 'ADV'), ('thought', 'VERB'), ('it', 'PRON'), ('would', 'AUX'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('The', 'DT'), ('data', 'NNS'), ('might', 'MD'), ('not', 'RB'), ('tell', 'VB'), ('the', 'DT'), ('story', 'NN'), ('that', 'WDT'), ('you', 'PRP'), ('originally', 'RB'), ('thought', 'VBD'), ('it', 'PRP'), ('would', 'MD'), ('.', '.')] 

 Lemmas are: 
>> [('The', 'the'), ('data', 'datum'), ('might', 'might'), ('not', 'not'), ('tell', 'tell'), ('the', 'the'), ('story', 'story'), ('that', 'that'), ('you', 'you'), ('originally', 'originally'), ('thought', 'think'), ('it', 'it'), ('would', 'would'), ('.', '.')] 

 Dependency tags are: 
>> [(('The', 'data'), 'det'), (('data', 'tell'), 'nsubj'), (('might', 'tell'), 'aux'), (('not', 'tell'), 'advmod'), (('tell', 'root'), 'root'), (('the', 'story'), 'det'), (('story', 'tell'), 'obj'), (('that', 'thought'), 'obj'), (('you', 'thought'), 'nsubj'), (('originally', 'thought'), 'advmod'), (('thought', 'story'), 'acl:relcl'), (('it', 'would'), 'nsubj'), (('would', 'thought'), 'ccomp'), (('.', 'tell'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 23 ===========================

 Visualizing Obtaining insights    Prof. Arjun V. Bala #3150713 (PDS)      Unit 02 – Data Science and Python ‹#›  Why Python? 

Tokens are: 
>> ['Visualizing', 'Obtaining', 'insights', 'Prof.', 'Arjun', 'V.', 'Bala', '#', '3150713', '(', 'PDS', ')', '\uf077', 'Unit', '02', '–', 'Data', 'Science', 'and', 'Python', '‹#›', 'Why', 'Python', '?'] 

 UPOS tags are: 
>> [('Visualizing', 'VERB'), ('Obtaining', 'VERB'), ('insights', 'NOUN'), ('Prof.', 'PROPN'), ('Arjun', 'PROPN'), ('V.', 'PROPN'), ('Bala', 'PROPN'), ('#', 'SYM'), ('3150713', 'NUM'), ('(', 'PUNCT'), ('PDS', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('02', 'NUM'), ('–', 'PUNCT'), ('Data', 'NOUN'), ('Science', 'PROPN'), ('and', 'CCONJ'), ('Python', 'PROPN'), ('‹#›', 'NOUN'), ('Why', 'ADV'), ('Python', 'PROPN'), ('?', 'PUNCT')] 

 XPOS tags are: 
>> [('Visualizing', 'VBG'), ('Obtaining', 'VBG'), ('insights', 'NNS'), ('Prof.', 'NNP'), ('Arjun', 'NNP'), ('V.', 'NNP'), ('Bala', 'NNP'), ('#', 'NN'), ('3150713', 'CD'), ('(', '-LRB-'), ('PDS', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('02', 'CD'), ('–', ','), ('Data', 'NN'), ('Science', 'NNP'), ('and', 'CC'), ('Python', 'NNP'), ('‹#›', 'NN'), ('Why', 'WRB'), ('Python', 'NNP'), ('?', '.')] 

 Lemmas are: 
>> [('Visualizing', 'visualize'), ('Obtaining', 'obtain'), ('insights', 'insight'), ('Prof.', 'Prof.'), ('Arjun', 'Arjun'), ('V.', 'V.'), ('Bala', 'Bala'), ('#', '#'), ('3150713', '3150713'), ('(', '('), ('PDS', 'pds'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('02', '02'), ('–', '-'), ('Data', 'data'), ('Science', 'Science'), ('and', 'and'), ('Python', 'python'), ('‹#›', '‹#›'), ('Why', 'why'), ('Python', 'python'), ('?', '?')] 

 Dependency tags are: 
>> [(('Visualizing', 'root'), 'root'), (('Obtaining', 'Visualizing'), 'xcomp'), (('insights', 'Obtaining'), 'obj'), (('Prof.', 'insights'), 'flat'), (('Arjun', 'Prof.'), 'flat'), (('V.', 'Prof.'), 'flat'), (('Bala', 'Prof.'), 'flat'), (('#', 'Prof.'), 'list'), (('3150713', '#'), 'nummod'), (('(', 'PDS'), 'punct'), (('PDS', '#'), 'appos'), ((')', 'PDS'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', 'Prof.'), 'list'), (('02', 'Unit'), 'nummod'), (('–', 'Unit'), 'punct'), (('Data', 'Science'), 'compound'), (('Science', '‹#›'), 'compound'), (('and', 'Python'), 'cc'), (('Python', 'Science'), 'conj'), (('‹#›', 'Prof.'), 'list'), (('Why', 'Python'), 'advmod'), (('Python', '‹#›'), 'appos'), (('?', 'Visualizing'), 'punct')]

 Named Entities are: 
>> [('3150713', 'CARDINAL'), ('02', 'CARDINAL'), ('Data Science and Python ‹#›  Why Python', 'WORK_OF_ART')]

========================== Sentence 24 ===========================

 Python is the vision of a single person, Guido van Rossum, Guido started the language in December 1989 as a replacement for the ABC language. 

Tokens are: 
>> ['Python', 'is', 'the', 'vision', 'of', 'a', 'single', 'person', ',', 'Guido', 'van', 'Rossum', ',', 'Guido', 'started', 'the', 'language', 'in', 'December', '1989', 'as', 'a', 'replacement', 'for', 'the', 'ABC', 'language', '.'] 

 UPOS tags are: 
>> [('Python', 'PROPN'), ('is', 'AUX'), ('the', 'DET'), ('vision', 'NOUN'), ('of', 'ADP'), ('a', 'DET'), ('single', 'ADJ'), ('person', 'NOUN'), (',', 'PUNCT'), ('Guido', 'PROPN'), ('van', 'PROPN'), ('Rossum', 'PROPN'), (',', 'PUNCT'), ('Guido', 'PROPN'), ('started', 'VERB'), ('the', 'DET'), ('language', 'NOUN'), ('in', 'ADP'), ('December', 'PROPN'), ('1989', 'NUM'), ('as', 'ADP'), ('a', 'DET'), ('replacement', 'NOUN'), ('for', 'ADP'), ('the', 'DET'), ('ABC', 'PROPN'), ('language', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Python', 'NNP'), ('is', 'VBZ'), ('the', 'DT'), ('vision', 'NN'), ('of', 'IN'), ('a', 'DT'), ('single', 'JJ'), ('person', 'NN'), (',', ','), ('Guido', 'NNP'), ('van', 'NNP'), ('Rossum', 'NNP'), (',', ','), ('Guido', 'NNP'), ('started', 'VBD'), ('the', 'DT'), ('language', 'NN'), ('in', 'IN'), ('December', 'NNP'), ('1989', 'CD'), ('as', 'IN'), ('a', 'DT'), ('replacement', 'NN'), ('for', 'IN'), ('the', 'DT'), ('ABC', 'NNP'), ('language', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('Python', 'python'), ('is', 'be'), ('the', 'the'), ('vision', 'vision'), ('of', 'of'), ('a', 'a'), ('single', 'single'), ('person', 'person'), (',', ','), ('Guido', 'Guido'), ('van', 'van'), ('Rossum', 'Rossum'), (',', ','), ('Guido', 'Guido'), ('started', 'start'), ('the', 'the'), ('language', 'language'), ('in', 'in'), ('December', 'December'), ('1989', '1989'), ('as', 'as'), ('a', 'a'), ('replacement', 'replacement'), ('for', 'for'), ('the', 'the'), ('ABC', 'ABC'), ('language', 'language'), ('.', '.')] 

 Dependency tags are: 
>> [(('Python', 'vision'), 'nsubj'), (('is', 'vision'), 'cop'), (('the', 'vision'), 'det'), (('vision', 'root'), 'root'), (('of', 'person'), 'case'), (('a', 'person'), 'det'), (('single', 'person'), 'amod'), (('person', 'vision'), 'nmod'), ((',', 'Guido'), 'punct'), (('Guido', 'person'), 'appos'), (('van', 'Guido'), 'flat'), (('Rossum', 'Guido'), 'flat'), ((',', 'started'), 'punct'), (('Guido', 'started'), 'nsubj'), (('started', 'vision'), 'acl:relcl'), (('the', 'language'), 'det'), (('language', 'started'), 'obj'), (('in', 'December'), 'case'), (('December', 'started'), 'obl'), (('1989', 'December'), 'nummod'), (('as', 'replacement'), 'case'), (('a', 'replacement'), 'det'), (('replacement', 'started'), 'obl'), (('for', 'language'), 'case'), (('the', 'language'), 'det'), (('ABC', 'language'), 'compound'), (('language', 'replacement'), 'nmod'), (('.', 'vision'), 'punct')]

 Named Entities are: 
>> [('Guido van Rossum', 'PERSON'), ('Guido', 'PERSON'), ('December 1989', 'DATE'), ('ABC', 'ORG')]

========================== Sentence 25 ===========================

 However, it far exceeds the ability to create applications of all types, and in contrast to ABC, boasts four programming styles (programming paradigms) 

Tokens are: 
>> ['However', ',', 'it', 'far', 'exceeds', 'the', 'ability', 'to', 'create', 'applications', 'of', 'all', 'types', ',', 'and', 'in', 'contrast', 'to', 'ABC', ',', 'boasts', 'four', 'programming', 'styles', '(', 'programming', 'paradigms', ')'] 

 UPOS tags are: 
>> [('However', 'ADV'), (',', 'PUNCT'), ('it', 'PRON'), ('far', 'ADV'), ('exceeds', 'VERB'), ('the', 'DET'), ('ability', 'NOUN'), ('to', 'PART'), ('create', 'VERB'), ('applications', 'NOUN'), ('of', 'ADP'), ('all', 'DET'), ('types', 'NOUN'), (',', 'PUNCT'), ('and', 'CCONJ'), ('in', 'ADP'), ('contrast', 'NOUN'), ('to', 'ADP'), ('ABC', 'PROPN'), (',', 'PUNCT'), ('boasts', 'VERB'), ('four', 'NUM'), ('programming', 'NOUN'), ('styles', 'NOUN'), ('(', 'PUNCT'), ('programming', 'NOUN'), ('paradigms', 'NOUN'), (')', 'PUNCT')] 

 XPOS tags are: 
>> [('However', 'RB'), (',', ','), ('it', 'PRP'), ('far', 'RB'), ('exceeds', 'VBZ'), ('the', 'DT'), ('ability', 'NN'), ('to', 'TO'), ('create', 'VB'), ('applications', 'NNS'), ('of', 'IN'), ('all', 'DT'), ('types', 'NNS'), (',', ','), ('and', 'CC'), ('in', 'IN'), ('contrast', 'NN'), ('to', 'IN'), ('ABC', 'NNP'), (',', ','), ('boasts', 'VBZ'), ('four', 'CD'), ('programming', 'NN'), ('styles', 'NNS'), ('(', '-LRB-'), ('programming', 'NN'), ('paradigms', 'NNS'), (')', '-RRB-')] 

 Lemmas are: 
>> [('However', 'however'), (',', ','), ('it', 'it'), ('far', 'far'), ('exceeds', 'exceed'), ('the', 'the'), ('ability', 'ability'), ('to', 'to'), ('create', 'create'), ('applications', 'application'), ('of', 'of'), ('all', 'all'), ('types', 'type'), (',', ','), ('and', 'and'), ('in', 'in'), ('contrast', 'contrast'), ('to', 'to'), ('ABC', 'ABC'), (',', ','), ('boasts', 'boast'), ('four', 'four'), ('programming', 'programming'), ('styles', 'style'), ('(', '('), ('programming', 'programming'), ('paradigms', 'paradigm'), (')', ')')] 

 Dependency tags are: 
>> [(('However', 'exceeds'), 'advmod'), ((',', 'exceeds'), 'punct'), (('it', 'exceeds'), 'nsubj'), (('far', 'exceeds'), 'advmod'), (('exceeds', 'root'), 'root'), (('the', 'ability'), 'det'), (('ability', 'exceeds'), 'obj'), (('to', 'create'), 'mark'), (('create', 'ability'), 'acl'), (('applications', 'create'), 'obj'), (('of', 'types'), 'case'), (('all', 'types'), 'det'), (('types', 'applications'), 'nmod'), ((',', 'boasts'), 'punct'), (('and', 'boasts'), 'cc'), (('in', 'contrast'), 'case'), (('contrast', 'boasts'), 'obl'), (('to', 'ABC'), 'case'), (('ABC', 'contrast'), 'nmod'), ((',', 'contrast'), 'punct'), (('boasts', 'exceeds'), 'conj'), (('four', 'styles'), 'nummod'), (('programming', 'styles'), 'compound'), (('styles', 'boasts'), 'obj'), (('(', 'paradigms'), 'punct'), (('programming', 'paradigms'), 'compound'), (('paradigms', 'styles'), 'appos'), ((')', 'paradigms'), 'punct')]

 Named Entities are: 
>> [('ABC', 'ORG'), ('four', 'CARDINAL')]

========================== Sentence 26 ===========================

 Functional :  Treats every statements as a mathematical equation and avoids any form of state or mutable data 

Tokens are: 
>> ['Functional', ':', 'Treats', 'every', 'statements', 'as', 'a', 'mathematical', 'equation', 'and', 'avoids', 'any', 'form', 'of', 'state', 'or', 'mutable', 'data'] 

 UPOS tags are: 
>> [('Functional', 'ADJ'), (':', 'PUNCT'), ('Treats', 'VERB'), ('every', 'DET'), ('statements', 'NOUN'), ('as', 'ADP'), ('a', 'DET'), ('mathematical', 'ADJ'), ('equation', 'NOUN'), ('and', 'CCONJ'), ('avoids', 'VERB'), ('any', 'DET'), ('form', 'NOUN'), ('of', 'ADP'), ('state', 'NOUN'), ('or', 'CCONJ'), ('mutable', 'ADJ'), ('data', 'NOUN')] 

 XPOS tags are: 
>> [('Functional', 'JJ'), (':', ':'), ('Treats', 'VBZ'), ('every', 'DT'), ('statements', 'NNS'), ('as', 'IN'), ('a', 'DT'), ('mathematical', 'JJ'), ('equation', 'NN'), ('and', 'CC'), ('avoids', 'VBZ'), ('any', 'DT'), ('form', 'NN'), ('of', 'IN'), ('state', 'NN'), ('or', 'CC'), ('mutable', 'JJ'), ('data', 'NNS')] 

 Lemmas are: 
>> [('Functional', 'Functional'), (':', ':'), ('Treats', 'treat'), ('every', 'every'), ('statements', 'statement'), ('as', 'as'), ('a', 'a'), ('mathematical', 'mathematical'), ('equation', 'equation'), ('and', 'and'), ('avoids', 'avoid'), ('any', 'any'), ('form', 'form'), ('of', 'of'), ('state', 'state'), ('or', 'or'), ('mutable', 'mutable'), ('data', 'datum')] 

 Dependency tags are: 
>> [(('Functional', 'root'), 'root'), ((':', 'Functional'), 'punct'), (('Treats', 'Functional'), 'parataxis'), (('every', 'statements'), 'det'), (('statements', 'Treats'), 'obj'), (('as', 'equation'), 'case'), (('a', 'equation'), 'det'), (('mathematical', 'equation'), 'amod'), (('equation', 'statements'), 'nmod'), (('and', 'avoids'), 'cc'), (('avoids', 'Treats'), 'conj'), (('any', 'form'), 'det'), (('form', 'avoids'), 'obj'), (('of', 'data'), 'case'), (('state', 'data'), 'compound'), (('or', 'mutable'), 'cc'), (('mutable', 'state'), 'conj'), (('data', 'form'), 'nmod')]

 Named Entities are: 
>> []

========================== Sentence 27 ===========================

 The main advantage of this approach is having no side effects to consider. 

Tokens are: 
>> ['The', 'main', 'advantage', 'of', 'this', 'approach', 'is', 'having', 'no', 'side', 'effects', 'to', 'consider', '.'] 

 UPOS tags are: 
>> [('The', 'DET'), ('main', 'ADJ'), ('advantage', 'NOUN'), ('of', 'ADP'), ('this', 'DET'), ('approach', 'NOUN'), ('is', 'AUX'), ('having', 'VERB'), ('no', 'DET'), ('side', 'NOUN'), ('effects', 'NOUN'), ('to', 'PART'), ('consider', 'VERB'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('The', 'DT'), ('main', 'JJ'), ('advantage', 'NN'), ('of', 'IN'), ('this', 'DT'), ('approach', 'NN'), ('is', 'VBZ'), ('having', 'VBG'), ('no', 'DT'), ('side', 'NN'), ('effects', 'NNS'), ('to', 'TO'), ('consider', 'VB'), ('.', '.')] 

 Lemmas are: 
>> [('The', 'the'), ('main', 'main'), ('advantage', 'advantage'), ('of', 'of'), ('this', 'this'), ('approach', 'approach'), ('is', 'be'), ('having', 'have'), ('no', 'no'), ('side', 'side'), ('effects', 'effect'), ('to', 'to'), ('consider', 'consider'), ('.', '.')] 

 Dependency tags are: 
>> [(('The', 'advantage'), 'det'), (('main', 'advantage'), 'amod'), (('advantage', 'having'), 'nsubj'), (('of', 'approach'), 'case'), (('this', 'approach'), 'det'), (('approach', 'advantage'), 'nmod'), (('is', 'having'), 'aux'), (('having', 'root'), 'root'), (('no', 'effects'), 'det'), (('side', 'effects'), 'compound'), (('effects', 'having'), 'obj'), (('to', 'consider'), 'mark'), (('consider', 'effects'), 'acl'), (('.', 'having'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 28 ===========================

 This coding style lends itself better than the others to parallel processing because there is no state to consider. 

Tokens are: 
>> ['This', 'coding', 'style', 'lends', 'itself', 'better', 'than', 'the', 'others', 'to', 'parallel', 'processing', 'because', 'there', 'is', 'no', 'state', 'to', 'consider', '.'] 

 UPOS tags are: 
>> [('This', 'DET'), ('coding', 'NOUN'), ('style', 'NOUN'), ('lends', 'VERB'), ('itself', 'PRON'), ('better', 'ADJ'), ('than', 'ADP'), ('the', 'DET'), ('others', 'NOUN'), ('to', 'ADP'), ('parallel', 'ADJ'), ('processing', 'NOUN'), ('because', 'SCONJ'), ('there', 'PRON'), ('is', 'VERB'), ('no', 'DET'), ('state', 'NOUN'), ('to', 'PART'), ('consider', 'VERB'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('This', 'DT'), ('coding', 'NN'), ('style', 'NN'), ('lends', 'VBZ'), ('itself', 'PRP'), ('better', 'JJR'), ('than', 'IN'), ('the', 'DT'), ('others', 'NNS'), ('to', 'IN'), ('parallel', 'JJ'), ('processing', 'NN'), ('because', 'IN'), ('there', 'EX'), ('is', 'VBZ'), ('no', 'DT'), ('state', 'NN'), ('to', 'TO'), ('consider', 'VB'), ('.', '.')] 

 Lemmas are: 
>> [('This', 'this'), ('coding', 'coding'), ('style', 'style'), ('lends', 'lend'), ('itself', 'itself'), ('better', 'good'), ('than', 'than'), ('the', 'the'), ('others', 'other'), ('to', 'to'), ('parallel', 'parallel'), ('processing', 'processing'), ('because', 'because'), ('there', 'there'), ('is', 'be'), ('no', 'no'), ('state', 'state'), ('to', 'to'), ('consider', 'consider'), ('.', '.')] 

 Dependency tags are: 
>> [(('This', 'style'), 'det'), (('coding', 'style'), 'compound'), (('style', 'lends'), 'nsubj'), (('lends', 'root'), 'root'), (('itself', 'lends'), 'obj'), (('better', 'lends'), 'xcomp'), (('than', 'others'), 'case'), (('the', 'others'), 'det'), (('others', 'better'), 'obl'), (('to', 'processing'), 'case'), (('parallel', 'processing'), 'amod'), (('processing', 'others'), 'nmod'), (('because', 'is'), 'mark'), (('there', 'is'), 'expl'), (('is', 'lends'), 'advcl'), (('no', 'state'), 'det'), (('state', 'is'), 'nsubj'), (('to', 'consider'), 'mark'), (('consider', 'state'), 'acl'), (('.', 'lends'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 29 ===========================

 Many developers prefer this coding style for recursion and for lambda calculus. 

Tokens are: 
>> ['Many', 'developers', 'prefer', 'this', 'coding', 'style', 'for', 'recursion', 'and', 'for', 'lambda', 'calculus', '.'] 

 UPOS tags are: 
>> [('Many', 'ADJ'), ('developers', 'NOUN'), ('prefer', 'VERB'), ('this', 'DET'), ('coding', 'NOUN'), ('style', 'NOUN'), ('for', 'ADP'), ('recursion', 'NOUN'), ('and', 'CCONJ'), ('for', 'ADP'), ('lambda', 'NOUN'), ('calculus', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Many', 'JJ'), ('developers', 'NNS'), ('prefer', 'VBP'), ('this', 'DT'), ('coding', 'NN'), ('style', 'NN'), ('for', 'IN'), ('recursion', 'NN'), ('and', 'CC'), ('for', 'IN'), ('lambda', 'NN'), ('calculus', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('Many', 'many'), ('developers', 'developer'), ('prefer', 'prefer'), ('this', 'this'), ('coding', 'coding'), ('style', 'style'), ('for', 'for'), ('recursion', 'recursion'), ('and', 'and'), ('for', 'for'), ('lambda', 'lambda'), ('calculus', 'calculus'), ('.', '.')] 

 Dependency tags are: 
>> [(('Many', 'developers'), 'amod'), (('developers', 'prefer'), 'nsubj'), (('prefer', 'root'), 'root'), (('this', 'style'), 'det'), (('coding', 'style'), 'compound'), (('style', 'prefer'), 'obj'), (('for', 'recursion'), 'case'), (('recursion', 'style'), 'nmod'), (('and', 'calculus'), 'cc'), (('for', 'calculus'), 'case'), (('lambda', 'calculus'), 'compound'), (('calculus', 'recursion'), 'conj'), (('.', 'prefer'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 30 ===========================

 Imperative : Performs computations as a direct change to program state. 

Tokens are: 
>> ['Imperative', ':', 'Performs', 'computations', 'as', 'a', 'direct', 'change', 'to', 'program', 'state', '.'] 

 UPOS tags are: 
>> [('Imperative', 'ADJ'), (':', 'PUNCT'), ('Performs', 'VERB'), ('computations', 'NOUN'), ('as', 'ADP'), ('a', 'DET'), ('direct', 'ADJ'), ('change', 'NOUN'), ('to', 'ADP'), ('program', 'NOUN'), ('state', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Imperative', 'JJ'), (':', ':'), ('Performs', 'VBZ'), ('computations', 'NNS'), ('as', 'IN'), ('a', 'DT'), ('direct', 'JJ'), ('change', 'NN'), ('to', 'IN'), ('program', 'NN'), ('state', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('Imperative', 'imperative'), (':', ':'), ('Performs', 'perform'), ('computations', 'computation'), ('as', 'as'), ('a', 'a'), ('direct', 'direct'), ('change', 'change'), ('to', 'to'), ('program', 'program'), ('state', 'state'), ('.', '.')] 

 Dependency tags are: 
>> [(('Imperative', 'root'), 'root'), ((':', 'Imperative'), 'punct'), (('Performs', 'Imperative'), 'parataxis'), (('computations', 'Performs'), 'obj'), (('as', 'change'), 'case'), (('a', 'change'), 'det'), (('direct', 'change'), 'amod'), (('change', 'Performs'), 'obl'), (('to', 'state'), 'case'), (('program', 'state'), 'compound'), (('state', 'change'), 'nmod'), (('.', 'Imperative'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 31 ===========================

 This style is especially useful when manipulating data structures and produces elegant but simple code. 

Tokens are: 
>> ['This', 'style', 'is', 'especially', 'useful', 'when', 'manipulating', 'data', 'structures', 'and', 'produces', 'elegant', 'but', 'simple', 'code', '.'] 

 UPOS tags are: 
>> [('This', 'DET'), ('style', 'NOUN'), ('is', 'AUX'), ('especially', 'ADV'), ('useful', 'ADJ'), ('when', 'SCONJ'), ('manipulating', 'VERB'), ('data', 'NOUN'), ('structures', 'NOUN'), ('and', 'CCONJ'), ('produces', 'VERB'), ('elegant', 'ADJ'), ('but', 'CCONJ'), ('simple', 'ADJ'), ('code', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('This', 'DT'), ('style', 'NN'), ('is', 'VBZ'), ('especially', 'RB'), ('useful', 'JJ'), ('when', 'WRB'), ('manipulating', 'VBG'), ('data', 'NN'), ('structures', 'NNS'), ('and', 'CC'), ('produces', 'VBZ'), ('elegant', 'JJ'), ('but', 'CC'), ('simple', 'JJ'), ('code', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('This', 'this'), ('style', 'style'), ('is', 'be'), ('especially', 'especially'), ('useful', 'useful'), ('when', 'when'), ('manipulating', 'manipulate'), ('data', 'datum'), ('structures', 'structure'), ('and', 'and'), ('produces', 'produce'), ('elegant', 'elegant'), ('but', 'but'), ('simple', 'simple'), ('code', 'code'), ('.', '.')] 

 Dependency tags are: 
>> [(('This', 'style'), 'det'), (('style', 'useful'), 'nsubj'), (('is', 'useful'), 'cop'), (('especially', 'useful'), 'advmod'), (('useful', 'root'), 'root'), (('when', 'manipulating'), 'mark'), (('manipulating', 'useful'), 'advcl'), (('data', 'structures'), 'compound'), (('structures', 'manipulating'), 'obj'), (('and', 'produces'), 'cc'), (('produces', 'useful'), 'conj'), (('elegant', 'code'), 'amod'), (('but', 'simple'), 'cc'), (('simple', 'elegant'), 'conj'), (('code', 'produces'), 'obj'), (('.', 'useful'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 32 ===========================

 Object-oriented : Relies on data fields that are treated as objects and manipulated only through prescribed methods. 

Tokens are: 
>> ['Object', '-oriented', ':', 'Relies', 'on', 'data', 'fields', 'that', 'are', 'treated', 'as', 'objects', 'and', 'manipulated', 'only', 'through', 'prescribed', 'methods', '.'] 

 UPOS tags are: 
>> [('Object', 'NOUN'), ('-oriented', 'VERB'), (':', 'PUNCT'), ('Relies', 'VERB'), ('on', 'ADP'), ('data', 'NOUN'), ('fields', 'NOUN'), ('that', 'PRON'), ('are', 'AUX'), ('treated', 'VERB'), ('as', 'ADP'), ('objects', 'NOUN'), ('and', 'CCONJ'), ('manipulated', 'VERB'), ('only', 'ADV'), ('through', 'ADP'), ('prescribed', 'VERB'), ('methods', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Object', 'NN'), ('-oriented', 'VBN'), (':', ':'), ('Relies', 'VBZ'), ('on', 'IN'), ('data', 'NN'), ('fields', 'NNS'), ('that', 'WDT'), ('are', 'VBP'), ('treated', 'VBN'), ('as', 'IN'), ('objects', 'NNS'), ('and', 'CC'), ('manipulated', 'VBN'), ('only', 'RB'), ('through', 'IN'), ('prescribed', 'VBN'), ('methods', 'NNS'), ('.', '.')] 

 Lemmas are: 
>> [('Object', 'object'), ('-oriented', '-orient'), (':', ':'), ('Relies', 'rely'), ('on', 'on'), ('data', 'datum'), ('fields', 'field'), ('that', 'that'), ('are', 'be'), ('treated', 'treat'), ('as', 'as'), ('objects', 'object'), ('and', 'and'), ('manipulated', 'manipulate'), ('only', 'only'), ('through', 'through'), ('prescribed', 'prescribe'), ('methods', 'method'), ('.', '.')] 

 Dependency tags are: 
>> [(('Object', 'root'), 'root'), (('-oriented', 'Object'), 'acl'), ((':', 'Relies'), 'punct'), (('Relies', 'Object'), 'appos'), (('on', 'fields'), 'case'), (('data', 'fields'), 'compound'), (('fields', 'Relies'), 'obl'), (('that', 'treated'), 'nsubj:pass'), (('are', 'treated'), 'aux:pass'), (('treated', 'fields'), 'acl:relcl'), (('as', 'objects'), 'case'), (('objects', 'treated'), 'obl'), (('and', 'manipulated'), 'cc'), (('manipulated', 'treated'), 'conj'), (('only', 'methods'), 'advmod'), (('through', 'methods'), 'case'), (('prescribed', 'methods'), 'amod'), (('methods', 'manipulated'), 'obl'), (('.', 'Relies'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 33 ===========================

 Python doesn’t fully support this coding form because it can’t implement features such as data hiding. 

Tokens are: 
>> ['Python', 'does', 'n’t', 'fully', 'support', 'this', 'coding', 'form', 'because', 'it', 'ca', 'n’t', 'implement', 'features', 'such', 'as', 'data', 'hiding', '.'] 

 UPOS tags are: 
>> [('Python', 'PROPN'), ('does', 'AUX'), ('n’t', 'PART'), ('fully', 'ADV'), ('support', 'VERB'), ('this', 'DET'), ('coding', 'NOUN'), ('form', 'NOUN'), ('because', 'SCONJ'), ('it', 'PRON'), ('ca', 'AUX'), ('n’t', 'PART'), ('implement', 'VERB'), ('features', 'NOUN'), ('such', 'ADJ'), ('as', 'ADP'), ('data', 'NOUN'), ('hiding', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Python', 'NNP'), ('does', 'VBZ'), ('n’t', 'RB'), ('fully', 'RB'), ('support', 'VB'), ('this', 'DT'), ('coding', 'NN'), ('form', 'NN'), ('because', 'IN'), ('it', 'PRP'), ('ca', 'MD'), ('n’t', 'RB'), ('implement', 'VB'), ('features', 'NNS'), ('such', 'JJ'), ('as', 'IN'), ('data', 'NNS'), ('hiding', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('Python', 'python'), ('does', 'do'), ('n’t', 'not'), ('fully', 'fully'), ('support', 'support'), ('this', 'this'), ('coding', 'coding'), ('form', 'form'), ('because', 'because'), ('it', 'it'), ('ca', 'can'), ('n’t', 'not'), ('implement', 'implement'), ('features', 'feature'), ('such', 'such'), ('as', 'as'), ('data', 'datum'), ('hiding', 'hiding'), ('.', '.')] 

 Dependency tags are: 
>> [(('Python', 'support'), 'nsubj'), (('does', 'support'), 'aux'), (('n’t', 'support'), 'advmod'), (('fully', 'support'), 'advmod'), (('support', 'root'), 'root'), (('this', 'form'), 'det'), (('coding', 'form'), 'compound'), (('form', 'support'), 'obj'), (('because', 'implement'), 'mark'), (('it', 'implement'), 'nsubj'), (('ca', 'implement'), 'aux'), (('n’t', 'implement'), 'advmod'), (('implement', 'support'), 'advcl'), (('features', 'implement'), 'obj'), (('such', 'hiding'), 'case'), (('as', 'such'), 'fixed'), (('data', 'hiding'), 'compound'), (('hiding', 'features'), 'nmod'), (('.', 'support'), 'punct')]

 Named Entities are: 
>> [('Python', 'ORG')]

========================== Sentence 34 ===========================

 This is useful coding style for complex applications because it supports encapsulation and polymorphism. 

Tokens are: 
>> ['This', 'is', 'useful', 'coding', 'style', 'for', 'complex', 'applications', 'because', 'it', 'supports', 'encapsulation', 'and', 'polymorphism', '.'] 

 UPOS tags are: 
>> [('This', 'PRON'), ('is', 'AUX'), ('useful', 'ADJ'), ('coding', 'NOUN'), ('style', 'NOUN'), ('for', 'ADP'), ('complex', 'ADJ'), ('applications', 'NOUN'), ('because', 'SCONJ'), ('it', 'PRON'), ('supports', 'VERB'), ('encapsulation', 'NOUN'), ('and', 'CCONJ'), ('polymorphism', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('This', 'DT'), ('is', 'VBZ'), ('useful', 'JJ'), ('coding', 'NN'), ('style', 'NN'), ('for', 'IN'), ('complex', 'JJ'), ('applications', 'NNS'), ('because', 'IN'), ('it', 'PRP'), ('supports', 'VBZ'), ('encapsulation', 'NN'), ('and', 'CC'), ('polymorphism', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('This', 'this'), ('is', 'be'), ('useful', 'useful'), ('coding', 'coding'), ('style', 'style'), ('for', 'for'), ('complex', 'complex'), ('applications', 'application'), ('because', 'because'), ('it', 'it'), ('supports', 'support'), ('encapsulation', 'encapsulation'), ('and', 'and'), ('polymorphism', 'polymorphism'), ('.', '.')] 

 Dependency tags are: 
>> [(('This', 'style'), 'nsubj'), (('is', 'style'), 'cop'), (('useful', 'style'), 'amod'), (('coding', 'style'), 'compound'), (('style', 'root'), 'root'), (('for', 'applications'), 'case'), (('complex', 'applications'), 'amod'), (('applications', 'style'), 'nmod'), (('because', 'supports'), 'mark'), (('it', 'supports'), 'nsubj'), (('supports', 'style'), 'advcl'), (('encapsulation', 'supports'), 'obj'), (('and', 'polymorphism'), 'cc'), (('polymorphism', 'encapsulation'), 'conj'), (('.', 'style'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 35 ===========================

 Procedural :  Treats tasks as step-by-step iterations where common tasks are placed in functions that are called as needed. 

Tokens are: 
>> ['Procedural', ':', 'Treats', 'tasks', 'as', 'step-by-step', 'iterations', 'where', 'common', 'tasks', 'are', 'placed', 'in', 'functions', 'that', 'are', 'called', 'as', 'needed', '.'] 

 UPOS tags are: 
>> [('Procedural', 'ADJ'), (':', 'PUNCT'), ('Treats', 'NOUN'), ('tasks', 'NOUN'), ('as', 'ADP'), ('step-by-step', 'ADJ'), ('iterations', 'NOUN'), ('where', 'SCONJ'), ('common', 'ADJ'), ('tasks', 'NOUN'), ('are', 'AUX'), ('placed', 'VERB'), ('in', 'ADP'), ('functions', 'NOUN'), ('that', 'PRON'), ('are', 'AUX'), ('called', 'VERB'), ('as', 'SCONJ'), ('needed', 'VERB'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Procedural', 'JJ'), (':', ':'), ('Treats', 'NNS'), ('tasks', 'NNS'), ('as', 'IN'), ('step-by-step', 'JJ'), ('iterations', 'NNS'), ('where', 'WRB'), ('common', 'JJ'), ('tasks', 'NNS'), ('are', 'VBP'), ('placed', 'VBN'), ('in', 'IN'), ('functions', 'NNS'), ('that', 'WDT'), ('are', 'VBP'), ('called', 'VBN'), ('as', 'IN'), ('needed', 'VBN'), ('.', '.')] 

 Lemmas are: 
>> [('Procedural', 'procedural'), (':', ':'), ('Treats', 'treat'), ('tasks', 'task'), ('as', 'as'), ('step-by-step', 'step-by-step'), ('iterations', 'iteration'), ('where', 'where'), ('common', 'common'), ('tasks', 'task'), ('are', 'be'), ('placed', 'place'), ('in', 'in'), ('functions', 'function'), ('that', 'that'), ('are', 'be'), ('called', 'call'), ('as', 'as'), ('needed', 'need'), ('.', '.')] 

 Dependency tags are: 
>> [(('Procedural', 'root'), 'root'), ((':', 'Procedural'), 'punct'), (('Treats', 'tasks'), 'compound'), (('tasks', 'Procedural'), 'appos'), (('as', 'iterations'), 'case'), (('step-by-step', 'iterations'), 'amod'), (('iterations', 'tasks'), 'nmod'), (('where', 'placed'), 'mark'), (('common', 'tasks'), 'amod'), (('tasks', 'placed'), 'nsubj:pass'), (('are', 'placed'), 'aux:pass'), (('placed', 'iterations'), 'acl:relcl'), (('in', 'functions'), 'case'), (('functions', 'placed'), 'obl'), (('that', 'called'), 'nsubj:pass'), (('are', 'called'), 'aux:pass'), (('called', 'functions'), 'acl:relcl'), (('as', 'needed'), 'mark'), (('needed', 'called'), 'advcl'), (('.', 'Procedural'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 36 ===========================

 Prof. Arjun V. Bala #3150713 (PDS)      Unit 02 – Data Science and Python ‹#›  Understanding Python's Role in Data Science Python has a unique attribute and is easy to use when it comes to quantitative and analytical computing Data Science Python is widely used and is a favorite tool along being a flexible and open sourced language. 

Tokens are: 
>> ['Prof.', 'Arjun', 'V.', 'Bala', '#', '3150713', '(', 'PDS', ')', '\uf077', 'Unit', '02', '–', 'Data', 'Science', 'and', 'Python', '‹#›', 'Understanding', 'Python', "'s", 'Role', 'in', 'Data', 'Science', 'Python', 'has', 'a', 'unique', 'attribute', 'and', 'is', 'easy', 'to', 'use', 'when', 'it', 'comes', 'to', 'quantitative', 'and', 'analytical', 'computing', 'Data', 'Science', 'Python', 'is', 'widely', 'used', 'and', 'is', 'a', 'favorite', 'tool', 'along', 'being', 'a', 'flexible', 'and', 'open', 'sourced', 'language', '.'] 

 UPOS tags are: 
>> [('Prof.', 'PROPN'), ('Arjun', 'PROPN'), ('V.', 'PROPN'), ('Bala', 'PROPN'), ('#', 'SYM'), ('3150713', 'NUM'), ('(', 'PUNCT'), ('PDS', 'PROPN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('02', 'NUM'), ('–', 'PUNCT'), ('Data', 'PROPN'), ('Science', 'PROPN'), ('and', 'CCONJ'), ('Python', 'PROPN'), ('‹#›', 'NOUN'), ('Understanding', 'PROPN'), ('Python', 'PROPN'), ("'s", 'PART'), ('Role', 'PROPN'), ('in', 'ADP'), ('Data', 'PROPN'), ('Science', 'PROPN'), ('Python', 'PROPN'), ('has', 'VERB'), ('a', 'DET'), ('unique', 'ADJ'), ('attribute', 'NOUN'), ('and', 'CCONJ'), ('is', 'AUX'), ('easy', 'ADJ'), ('to', 'PART'), ('use', 'VERB'), ('when', 'SCONJ'), ('it', 'PRON'), ('comes', 'VERB'), ('to', 'ADP'), ('quantitative', 'ADJ'), ('and', 'CCONJ'), ('analytical', 'ADJ'), ('computing', 'NOUN'), ('Data', 'NOUN'), ('Science', 'PROPN'), ('Python', 'PROPN'), ('is', 'AUX'), ('widely', 'ADV'), ('used', 'VERB'), ('and', 'CCONJ'), ('is', 'AUX'), ('a', 'DET'), ('favorite', 'ADJ'), ('tool', 'NOUN'), ('along', 'SCONJ'), ('being', 'AUX'), ('a', 'DET'), ('flexible', 'ADJ'), ('and', 'CCONJ'), ('open', 'ADJ'), ('sourced', 'VERB'), ('language', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Prof.', 'NNP'), ('Arjun', 'NNP'), ('V.', 'NNP'), ('Bala', 'NNP'), ('#', 'NN'), ('3150713', 'CD'), ('(', '-LRB-'), ('PDS', 'NNP'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('02', 'CD'), ('–', ':'), ('Data', 'NNP'), ('Science', 'NNP'), ('and', 'CC'), ('Python', 'NNP'), ('‹#›', 'NN'), ('Understanding', 'NNP'), ('Python', 'NNP'), ("'s", 'POS'), ('Role', 'NNP'), ('in', 'IN'), ('Data', 'NNP'), ('Science', 'NNP'), ('Python', 'NNP'), ('has', 'VBZ'), ('a', 'DT'), ('unique', 'JJ'), ('attribute', 'NN'), ('and', 'CC'), ('is', 'VBZ'), ('easy', 'JJ'), ('to', 'TO'), ('use', 'VB'), ('when', 'WRB'), ('it', 'PRP'), ('comes', 'VBZ'), ('to', 'IN'), ('quantitative', 'JJ'), ('and', 'CC'), ('analytical', 'JJ'), ('computing', 'NN'), ('Data', 'NN'), ('Science', 'NNP'), ('Python', 'NNP'), ('is', 'VBZ'), ('widely', 'RB'), ('used', 'VBN'), ('and', 'CC'), ('is', 'VBZ'), ('a', 'DT'), ('favorite', 'JJ'), ('tool', 'NN'), ('along', 'IN'), ('being', 'VBG'), ('a', 'DT'), ('flexible', 'JJ'), ('and', 'CC'), ('open', 'JJ'), ('sourced', 'VBN'), ('language', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('Prof.', 'Prof.'), ('Arjun', 'Arjun'), ('V.', 'V.'), ('Bala', 'Bala'), ('#', '#'), ('3150713', '3150713'), ('(', '('), ('PDS', 'PDS'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('02', '02'), ('–', '-'), ('Data', 'data'), ('Science', 'Science'), ('and', 'and'), ('Python', 'python'), ('‹#›', '‹#›'), ('Understanding', 'Understanding'), ('Python', 'python'), ("'s", "'s"), ('Role', 'Role'), ('in', 'in'), ('Data', 'data'), ('Science', 'Science'), ('Python', 'python'), ('has', 'have'), ('a', 'a'), ('unique', 'unique'), ('attribute', 'attribute'), ('and', 'and'), ('is', 'be'), ('easy', 'easy'), ('to', 'to'), ('use', 'use'), ('when', 'when'), ('it', 'it'), ('comes', 'come'), ('to', 'to'), ('quantitative', 'quantitative'), ('and', 'and'), ('analytical', 'analytical'), ('computing', 'computing'), ('Data', 'data'), ('Science', 'Science'), ('Python', 'python'), ('is', 'be'), ('widely', 'widely'), ('used', 'use'), ('and', 'and'), ('is', 'be'), ('a', 'a'), ('favorite', 'favorite'), ('tool', 'tool'), ('along', 'along'), ('being', 'be'), ('a', 'a'), ('flexible', 'flexible'), ('and', 'and'), ('open', 'open'), ('sourced', 'source'), ('language', 'language'), ('.', '.')] 

 Dependency tags are: 
>> [(('Prof.', 'has'), 'nsubj'), (('Arjun', 'Prof.'), 'flat'), (('V.', 'Prof.'), 'flat'), (('Bala', 'Prof.'), 'flat'), (('#', 'Prof.'), 'appos'), (('3150713', 'Prof.'), 'nmod:npmod'), (('(', 'PDS'), 'punct'), (('PDS', 'Unit'), 'compound'), ((')', 'PDS'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', 'Prof.'), 'appos'), (('02', 'Unit'), 'dep'), (('–', 'Prof.'), 'punct'), (('Data', 'Science'), 'compound'), (('Science', 'Understanding'), 'compound'), (('and', 'Python'), 'cc'), (('Python', 'Science'), 'conj'), (('‹#›', 'Understanding'), 'compound'), (('Understanding', 'Prof.'), 'appos'), (('Python', 'Role'), 'nmod:poss'), (("'s", 'Python'), 'case'), (('Role', 'Understanding'), 'appos'), (('in', 'Python'), 'case'), (('Data', 'Python'), 'compound'), (('Science', 'Python'), 'compound'), (('Python', 'Role'), 'nmod'), (('has', 'root'), 'root'), (('a', 'attribute'), 'det'), (('unique', 'attribute'), 'amod'), (('attribute', 'has'), 'obj'), (('and', 'easy'), 'cc'), (('is', 'easy'), 'cop'), (('easy', 'has'), 'conj'), (('to', 'use'), 'mark'), (('use', 'easy'), 'xcomp'), (('when', 'comes'), 'mark'), (('it', 'comes'), 'nsubj'), (('comes', 'use'), 'advcl'), (('to', 'Python'), 'case'), (('quantitative', 'Python'), 'amod'), (('and', 'analytical'), 'cc'), (('analytical', 'quantitative'), 'conj'), (('computing', 'Python'), 'compound'), (('Data', 'Python'), 'compound'), (('Science', 'Python'), 'compound'), (('Python', 'used'), 'nsubj:pass'), (('is', 'used'), 'aux:pass'), (('widely', 'used'), 'advmod'), (('used', 'use'), 'ccomp'), (('and', 'tool'), 'cc'), (('is', 'tool'), 'cop'), (('a', 'tool'), 'det'), (('favorite', 'tool'), 'amod'), (('tool', 'used'), 'conj'), (('along', 'language'), 'mark'), (('being', 'language'), 'cop'), (('a', 'language'), 'det'), (('flexible', 'language'), 'amod'), (('and', 'open'), 'cc'), (('open', 'flexible'), 'conj'), (('sourced', 'language'), 'amod'), (('language', 'tool'), 'advcl'), (('.', 'has'), 'punct')]

 Named Entities are: 
>> [('3150713', 'CARDINAL'), ('02', 'CARDINAL'), ("Understanding Python's Role in Data Science Python", 'WORK_OF_ART'), ('Data Science Python', 'PRODUCT')]

========================== Sentence 37 ===========================

 Its massive libraries are used for data manipulation and are very easy to learn even for a beginner data analyst. 

Tokens are: 
>> ['Its', 'massive', 'libraries', 'are', 'used', 'for', 'data', 'manipulation', 'and', 'are', 'very', 'easy', 'to', 'learn', 'even', 'for', 'a', 'beginner', 'data', 'analyst', '.'] 

 UPOS tags are: 
>> [('Its', 'PRON'), ('massive', 'ADJ'), ('libraries', 'NOUN'), ('are', 'AUX'), ('used', 'VERB'), ('for', 'ADP'), ('data', 'NOUN'), ('manipulation', 'NOUN'), ('and', 'CCONJ'), ('are', 'AUX'), ('very', 'ADV'), ('easy', 'ADJ'), ('to', 'PART'), ('learn', 'VERB'), ('even', 'ADV'), ('for', 'ADP'), ('a', 'DET'), ('beginner', 'NOUN'), ('data', 'NOUN'), ('analyst', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Its', 'PRP$'), ('massive', 'JJ'), ('libraries', 'NNS'), ('are', 'VBP'), ('used', 'VBN'), ('for', 'IN'), ('data', 'NN'), ('manipulation', 'NN'), ('and', 'CC'), ('are', 'VBP'), ('very', 'RB'), ('easy', 'JJ'), ('to', 'TO'), ('learn', 'VB'), ('even', 'RB'), ('for', 'IN'), ('a', 'DT'), ('beginner', 'NN'), ('data', 'NN'), ('analyst', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('Its', 'its'), ('massive', 'massive'), ('libraries', 'library'), ('are', 'be'), ('used', 'use'), ('for', 'for'), ('data', 'datum'), ('manipulation', 'manipulation'), ('and', 'and'), ('are', 'be'), ('very', 'very'), ('easy', 'easy'), ('to', 'to'), ('learn', 'learn'), ('even', 'even'), ('for', 'for'), ('a', 'a'), ('beginner', 'beginner'), ('data', 'datum'), ('analyst', 'analyst'), ('.', '.')] 

 Dependency tags are: 
>> [(('Its', 'libraries'), 'nmod:poss'), (('massive', 'libraries'), 'amod'), (('libraries', 'used'), 'nsubj:pass'), (('are', 'used'), 'aux:pass'), (('used', 'root'), 'root'), (('for', 'manipulation'), 'case'), (('data', 'manipulation'), 'compound'), (('manipulation', 'used'), 'obl'), (('and', 'easy'), 'cc'), (('are', 'easy'), 'cop'), (('very', 'easy'), 'advmod'), (('easy', 'used'), 'conj'), (('to', 'learn'), 'mark'), (('learn', 'easy'), 'xcomp'), (('even', 'analyst'), 'advmod'), (('for', 'analyst'), 'case'), (('a', 'analyst'), 'det'), (('beginner', 'analyst'), 'compound'), (('data', 'analyst'), 'compound'), (('analyst', 'learn'), 'obl'), (('.', 'used'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 38 ===========================

 Apart from being an independent platform it also easily integrates with any existing infrastructure which can be used to solve the most complex problems. 

Tokens are: 
>> ['Apart', 'from', 'being', 'an', 'independent', 'platform', 'it', 'also', 'easily', 'integrates', 'with', 'any', 'existing', 'infrastructure', 'which', 'can', 'be', 'used', 'to', 'solve', 'the', 'most', 'complex', 'problems', '.'] 

 UPOS tags are: 
>> [('Apart', 'ADV'), ('from', 'SCONJ'), ('being', 'AUX'), ('an', 'DET'), ('independent', 'ADJ'), ('platform', 'NOUN'), ('it', 'PRON'), ('also', 'ADV'), ('easily', 'ADV'), ('integrates', 'VERB'), ('with', 'ADP'), ('any', 'DET'), ('existing', 'VERB'), ('infrastructure', 'NOUN'), ('which', 'PRON'), ('can', 'AUX'), ('be', 'AUX'), ('used', 'VERB'), ('to', 'PART'), ('solve', 'VERB'), ('the', 'DET'), ('most', 'ADV'), ('complex', 'ADJ'), ('problems', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Apart', 'RB'), ('from', 'IN'), ('being', 'VBG'), ('an', 'DT'), ('independent', 'JJ'), ('platform', 'NN'), ('it', 'PRP'), ('also', 'RB'), ('easily', 'RB'), ('integrates', 'VBZ'), ('with', 'IN'), ('any', 'DT'), ('existing', 'VBG'), ('infrastructure', 'NN'), ('which', 'WDT'), ('can', 'MD'), ('be', 'VB'), ('used', 'VBN'), ('to', 'TO'), ('solve', 'VB'), ('the', 'DT'), ('most', 'RBS'), ('complex', 'JJ'), ('problems', 'NNS'), ('.', '.')] 

 Lemmas are: 
>> [('Apart', 'apart'), ('from', 'from'), ('being', 'be'), ('an', 'a'), ('independent', 'independent'), ('platform', 'platform'), ('it', 'it'), ('also', 'also'), ('easily', 'easily'), ('integrates', 'integrate'), ('with', 'with'), ('any', 'any'), ('existing', 'exist'), ('infrastructure', 'infrastructure'), ('which', 'which'), ('can', 'can'), ('be', 'be'), ('used', 'use'), ('to', 'to'), ('solve', 'solve'), ('the', 'the'), ('most', 'most'), ('complex', 'complex'), ('problems', 'problem'), ('.', '.')] 

 Dependency tags are: 
>> [(('Apart', 'integrates'), 'advmod'), (('from', 'platform'), 'mark'), (('being', 'platform'), 'cop'), (('an', 'platform'), 'det'), (('independent', 'platform'), 'amod'), (('platform', 'Apart'), 'advcl'), (('it', 'integrates'), 'nsubj'), (('also', 'integrates'), 'advmod'), (('easily', 'integrates'), 'advmod'), (('integrates', 'root'), 'root'), (('with', 'infrastructure'), 'case'), (('any', 'infrastructure'), 'det'), (('existing', 'infrastructure'), 'amod'), (('infrastructure', 'integrates'), 'obl'), (('which', 'used'), 'nsubj:pass'), (('can', 'used'), 'aux'), (('be', 'used'), 'aux:pass'), (('used', 'infrastructure'), 'acl:relcl'), (('to', 'solve'), 'mark'), (('solve', 'used'), 'xcomp'), (('the', 'problems'), 'det'), (('most', 'complex'), 'advmod'), (('complex', 'problems'), 'amod'), (('problems', 'solve'), 'obj'), (('.', 'integrates'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 39 ===========================

 Python is preferred over other data science tools because of following features, Powerful and Easy to use Open Source Choice of Libraries Flexibility Visualization and Graphics Well supported    Prof. Arjun V. Bala #3150713 (PDS)      Unit 02 – Data Science and Python ‹#›  Considering Speed of Execution Analysis takes considerable processing power. 

Tokens are: 
>> ['Python', 'is', 'preferred', 'over', 'other', 'data', 'science', 'tools', 'because', 'of', 'following', 'features', ',', 'Powerful', 'and', 'Easy', 'to', 'use', 'Open', 'Source', 'Choice', 'of', 'Libraries', 'Flexibility', 'Visualization', 'and', 'Graphics', 'Well', 'supported', 'Prof.', 'Arjun', 'V.', 'Bala', '#', '3150713', '(', 'PDS', ')', '\uf077', 'Unit', '02', '–', 'Data', 'Science', 'and', 'Python', '‹#›', 'Considering', 'Speed', 'of', 'Execution', 'Analysis', 'takes', 'considerable', 'processing', 'power', '.'] 

 UPOS tags are: 
>> [('Python', 'PROPN'), ('is', 'AUX'), ('preferred', 'VERB'), ('over', 'ADP'), ('other', 'ADJ'), ('data', 'NOUN'), ('science', 'NOUN'), ('tools', 'NOUN'), ('because', 'ADP'), ('of', 'SCONJ'), ('following', 'VERB'), ('features', 'NOUN'), (',', 'PUNCT'), ('Powerful', 'ADJ'), ('and', 'CCONJ'), ('Easy', 'ADJ'), ('to', 'PART'), ('use', 'VERB'), ('Open', 'ADJ'), ('Source', 'NOUN'), ('Choice', 'NOUN'), ('of', 'ADP'), ('Libraries', 'NOUN'), ('Flexibility', 'NOUN'), ('Visualization', 'NOUN'), ('and', 'CCONJ'), ('Graphics', 'NOUN'), ('Well', 'ADV'), ('supported', 'VERB'), ('Prof.', 'PROPN'), ('Arjun', 'PROPN'), ('V.', 'PROPN'), ('Bala', 'PROPN'), ('#', 'SYM'), ('3150713', 'NUM'), ('(', 'PUNCT'), ('PDS', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('02', 'NUM'), ('–', 'PUNCT'), ('Data', 'NOUN'), ('Science', 'NOUN'), ('and', 'CCONJ'), ('Python', 'NOUN'), ('‹#›', 'NOUN'), ('Considering', 'VERB'), ('Speed', 'NOUN'), ('of', 'ADP'), ('Execution', 'NOUN'), ('Analysis', 'NOUN'), ('takes', 'VERB'), ('considerable', 'ADJ'), ('processing', 'NOUN'), ('power', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Python', 'NNP'), ('is', 'VBZ'), ('preferred', 'VBN'), ('over', 'IN'), ('other', 'JJ'), ('data', 'NN'), ('science', 'NN'), ('tools', 'NNS'), ('because', 'IN'), ('of', 'IN'), ('following', 'VBG'), ('features', 'NNS'), (',', ','), ('Powerful', 'JJ'), ('and', 'CC'), ('Easy', 'JJ'), ('to', 'TO'), ('use', 'VB'), ('Open', 'JJ'), ('Source', 'NN'), ('Choice', 'NN'), ('of', 'IN'), ('Libraries', 'NNS'), ('Flexibility', 'NN'), ('Visualization', 'NN'), ('and', 'CC'), ('Graphics', 'NNS'), ('Well', 'RB'), ('supported', 'VBN'), ('Prof.', 'NNP'), ('Arjun', 'NNP'), ('V.', 'NNP'), ('Bala', 'NNP'), ('#', 'NN'), ('3150713', 'CD'), ('(', '-LRB-'), ('PDS', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('02', 'CD'), ('–', ','), ('Data', 'NN'), ('Science', 'NN'), ('and', 'CC'), ('Python', 'NN'), ('‹#›', 'NN'), ('Considering', 'VBG'), ('Speed', 'NN'), ('of', 'IN'), ('Execution', 'NN'), ('Analysis', 'NN'), ('takes', 'VBZ'), ('considerable', 'JJ'), ('processing', 'NN'), ('power', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('Python', 'python'), ('is', 'be'), ('preferred', 'prefer'), ('over', 'over'), ('other', 'other'), ('data', 'datum'), ('science', 'science'), ('tools', 'tool'), ('because', 'because'), ('of', 'of'), ('following', 'follow'), ('features', 'feature'), (',', ','), ('Powerful', 'powerful'), ('and', 'and'), ('Easy', 'easy'), ('to', 'to'), ('use', 'use'), ('Open', 'Open'), ('Source', 'source'), ('Choice', 'Choice'), ('of', 'of'), ('Libraries', 'library'), ('Flexibility', 'flexibility'), ('Visualization', 'visualization'), ('and', 'and'), ('Graphics', 'graphic'), ('Well', 'well'), ('supported', 'support'), ('Prof.', 'Prof.'), ('Arjun', 'Arjun'), ('V.', 'V.'), ('Bala', 'Bala'), ('#', '#'), ('3150713', '3150713'), ('(', '('), ('PDS', 'pds'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('02', '02'), ('–', '-'), ('Data', 'data'), ('Science', 'science'), ('and', 'and'), ('Python', 'python'), ('‹#›', '‹#›'), ('Considering', 'consider'), ('Speed', 'speed'), ('of', 'of'), ('Execution', 'execution'), ('Analysis', 'analysis'), ('takes', 'take'), ('considerable', 'considerable'), ('processing', 'processing'), ('power', 'power'), ('.', '.')] 

 Dependency tags are: 
>> [(('Python', 'preferred'), 'nsubj:pass'), (('is', 'preferred'), 'aux:pass'), (('preferred', 'root'), 'root'), (('over', 'tools'), 'case'), (('other', 'tools'), 'amod'), (('data', 'science'), 'compound'), (('science', 'tools'), 'compound'), (('tools', 'preferred'), 'obl'), (('because', 'features'), 'case'), (('of', 'because'), 'fixed'), (('following', 'features'), 'amod'), (('features', 'preferred'), 'obl'), ((',', 'Powerful'), 'punct'), (('Powerful', 'features'), 'amod'), (('and', 'Easy'), 'cc'), (('Easy', 'Powerful'), 'conj'), (('to', 'use'), 'mark'), (('use', 'features'), 'acl'), (('Open', 'Choice'), 'amod'), (('Source', 'Choice'), 'compound'), (('Choice', 'use'), 'obj'), (('of', 'Visualization'), 'case'), (('Libraries', 'Choice'), 'nmod'), (('Flexibility', 'Visualization'), 'compound'), (('Visualization', 'Choice'), 'nmod'), (('and', 'Graphics'), 'cc'), (('Graphics', 'Visualization'), 'conj'), (('Well', 'supported'), 'advmod'), (('supported', 'Prof.'), 'amod'), (('Prof.', 'Visualization'), 'appos'), (('Arjun', 'Prof.'), 'flat'), (('V.', 'Prof.'), 'flat'), (('Bala', 'Prof.'), 'flat'), (('#', 'Prof.'), 'appos'), (('3150713', 'PDS'), 'nummod'), (('(', 'PDS'), 'punct'), (('PDS', 'Unit'), 'appos'), ((')', 'PDS'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', 'Prof.'), 'appos'), (('02', 'Unit'), 'nummod'), (('–', 'Unit'), 'punct'), (('Data', 'Science'), 'compound'), (('Science', 'Unit'), 'compound'), (('and', '‹#›'), 'cc'), (('Python', '‹#›'), 'compound'), (('‹#›', 'Science'), 'conj'), (('Considering', '‹#›'), 'acl'), (('Speed', 'Considering'), 'obj'), (('of', 'Analysis'), 'case'), (('Execution', 'Analysis'), 'compound'), (('Analysis', 'Speed'), 'nmod'), (('takes', '‹#›'), 'acl:relcl'), (('considerable', 'power'), 'amod'), (('processing', 'power'), 'compound'), (('power', 'takes'), 'obj'), (('.', 'preferred'), 'punct')]

 Named Entities are: 
>> [('Python', 'ORG'), ('Powerful and Easy to use Open Source Choice', 'WORK_OF_ART'), ('3150713', 'CARDINAL'), ('02', 'CARDINAL'), ('Python ‹#›  Considering Speed of Execution Analysis', 'LAW')]

========================== Sentence 40 ===========================

 The dataset are so large that you can bog down even an incredibly powerful system. 

Tokens are: 
>> ['The', 'dataset', 'are', 'so', 'large', 'that', 'you', 'can', 'bog', 'down', 'even', 'an', 'incredibly', 'powerful', 'system', '.'] 

 UPOS tags are: 
>> [('The', 'DET'), ('dataset', 'NOUN'), ('are', 'AUX'), ('so', 'ADV'), ('large', 'ADJ'), ('that', 'SCONJ'), ('you', 'PRON'), ('can', 'AUX'), ('bog', 'VERB'), ('down', 'ADP'), ('even', 'ADV'), ('an', 'DET'), ('incredibly', 'ADV'), ('powerful', 'ADJ'), ('system', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('The', 'DT'), ('dataset', 'NN'), ('are', 'VBP'), ('so', 'RB'), ('large', 'JJ'), ('that', 'IN'), ('you', 'PRP'), ('can', 'MD'), ('bog', 'VB'), ('down', 'RP'), ('even', 'RB'), ('an', 'DT'), ('incredibly', 'RB'), ('powerful', 'JJ'), ('system', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('The', 'the'), ('dataset', 'dataset'), ('are', 'be'), ('so', 'so'), ('large', 'large'), ('that', 'that'), ('you', 'you'), ('can', 'can'), ('bog', 'bog'), ('down', 'down'), ('even', 'even'), ('an', 'a'), ('incredibly', 'incredibly'), ('powerful', 'powerful'), ('system', 'system'), ('.', '.')] 

 Dependency tags are: 
>> [(('The', 'dataset'), 'det'), (('dataset', 'large'), 'nsubj'), (('are', 'large'), 'cop'), (('so', 'large'), 'advmod'), (('large', 'root'), 'root'), (('that', 'bog'), 'mark'), (('you', 'bog'), 'nsubj'), (('can', 'bog'), 'aux'), (('bog', 'large'), 'ccomp'), (('down', 'bog'), 'compound:prt'), (('even', 'system'), 'advmod'), (('an', 'system'), 'det'), (('incredibly', 'powerful'), 'advmod'), (('powerful', 'system'), 'amod'), (('system', 'bog'), 'obj'), (('.', 'large'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 41 ===========================

 Following factors control the speed of execution for data science application Dataset Size Loading Technique Coding Style Machine capabilities Analysis Algorithm 

Tokens are: 
>> ['Following', 'factors', 'control', 'the', 'speed', 'of', 'execution', 'for', 'data', 'science', 'application', 'Dataset', 'Size', 'Loading', 'Technique', 'Coding', 'Style', 'Machine', 'capabilities', 'Analysis', 'Algorithm'] 

 UPOS tags are: 
>> [('Following', 'VERB'), ('factors', 'NOUN'), ('control', 'VERB'), ('the', 'DET'), ('speed', 'NOUN'), ('of', 'ADP'), ('execution', 'NOUN'), ('for', 'ADP'), ('data', 'NOUN'), ('science', 'NOUN'), ('application', 'NOUN'), ('Dataset', 'NOUN'), ('Size', 'NOUN'), ('Loading', 'NOUN'), ('Technique', 'NOUN'), ('Coding', 'NOUN'), ('Style', 'NOUN'), ('Machine', 'NOUN'), ('capabilities', 'NOUN'), ('Analysis', 'NOUN'), ('Algorithm', 'NOUN')] 

 XPOS tags are: 
>> [('Following', 'VBG'), ('factors', 'NNS'), ('control', 'VBP'), ('the', 'DT'), ('speed', 'NN'), ('of', 'IN'), ('execution', 'NN'), ('for', 'IN'), ('data', 'NN'), ('science', 'NN'), ('application', 'NN'), ('Dataset', 'NN'), ('Size', 'NN'), ('Loading', 'NN'), ('Technique', 'NN'), ('Coding', 'NN'), ('Style', 'NN'), ('Machine', 'NN'), ('capabilities', 'NNS'), ('Analysis', 'NN'), ('Algorithm', 'NN')] 

 Lemmas are: 
>> [('Following', 'follow'), ('factors', 'factor'), ('control', 'control'), ('the', 'the'), ('speed', 'speed'), ('of', 'of'), ('execution', 'execution'), ('for', 'for'), ('data', 'datum'), ('science', 'science'), ('application', 'application'), ('Dataset', 'dataset'), ('Size', 'size'), ('Loading', 'loading'), ('Technique', 'technique'), ('Coding', 'coding'), ('Style', 'style'), ('Machine', 'Machine'), ('capabilities', 'capability'), ('Analysis', 'analysis'), ('Algorithm', 'algorithm')] 

 Dependency tags are: 
>> [(('Following', 'factors'), 'amod'), (('factors', 'control'), 'nsubj'), (('control', 'root'), 'root'), (('the', 'speed'), 'det'), (('speed', 'control'), 'obj'), (('of', 'execution'), 'case'), (('execution', 'speed'), 'nmod'), (('for', 'Technique'), 'case'), (('data', 'application'), 'compound'), (('science', 'application'), 'compound'), (('application', 'Size'), 'compound'), (('Dataset', 'Size'), 'compound'), (('Size', 'Technique'), 'compound'), (('Loading', 'Technique'), 'compound'), (('Technique', 'Algorithm'), 'compound'), (('Coding', 'Algorithm'), 'compound'), (('Style', 'capabilities'), 'compound'), (('Machine', 'capabilities'), 'compound'), (('capabilities', 'Algorithm'), 'compound'), (('Analysis', 'Algorithm'), 'compound'), (('Algorithm', 'control'), 'obl')]

 Named Entities are: 
>> []

========================== Sentence 42 ===========================

 We will explore all factors in details in following couple of slides. 

Tokens are: 
>> ['We', 'will', 'explore', 'all', 'factors', 'in', 'details', 'in', 'following', 'couple', 'of', 'slides', '.'] 

 UPOS tags are: 
>> [('We', 'PRON'), ('will', 'AUX'), ('explore', 'VERB'), ('all', 'DET'), ('factors', 'NOUN'), ('in', 'ADP'), ('details', 'NOUN'), ('in', 'SCONJ'), ('following', 'VERB'), ('couple', 'NOUN'), ('of', 'ADP'), ('slides', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('We', 'PRP'), ('will', 'MD'), ('explore', 'VB'), ('all', 'DT'), ('factors', 'NNS'), ('in', 'IN'), ('details', 'NNS'), ('in', 'IN'), ('following', 'VBG'), ('couple', 'NN'), ('of', 'IN'), ('slides', 'NNS'), ('.', '.')] 

 Lemmas are: 
>> [('We', 'we'), ('will', 'will'), ('explore', 'explore'), ('all', 'all'), ('factors', 'factor'), ('in', 'in'), ('details', 'detail'), ('in', 'in'), ('following', 'follow'), ('couple', 'couple'), ('of', 'of'), ('slides', 'slide'), ('.', '.')] 

 Dependency tags are: 
>> [(('We', 'explore'), 'nsubj'), (('will', 'explore'), 'aux'), (('explore', 'root'), 'root'), (('all', 'factors'), 'det'), (('factors', 'explore'), 'obj'), (('in', 'details'), 'case'), (('details', 'factors'), 'nmod'), (('in', 'couple'), 'case'), (('following', 'couple'), 'amod'), (('couple', 'explore'), 'obl'), (('of', 'slides'), 'case'), (('slides', 'couple'), 'nmod'), (('.', 'explore'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 43 ===========================

 Prof. Arjun V. Bala #3150713 (PDS)      Unit 02 – Data Science and Python ‹#›  Considering Speed of Execution (Cont.) 

Tokens are: 
>> ['Prof.', 'Arjun', 'V.', 'Bala', '#', '3150713', '(', 'PDS', ')', '\uf077', 'Unit', '02', '–', 'Data', 'Science', 'and', 'Python', '‹#›', 'Considering', 'Speed', 'of', 'Execution', '(', 'Cont', '.', ')'] 

 UPOS tags are: 
>> [('Prof.', 'PROPN'), ('Arjun', 'PROPN'), ('V.', 'PROPN'), ('Bala', 'PROPN'), ('#', 'SYM'), ('3150713', 'NUM'), ('(', 'PUNCT'), ('PDS', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('02', 'NUM'), ('–', 'PUNCT'), ('Data', 'NOUN'), ('Science', 'NOUN'), ('and', 'CCONJ'), ('Python', 'NOUN'), ('‹#›', 'NOUN'), ('Considering', 'VERB'), ('Speed', 'NOUN'), ('of', 'ADP'), ('Execution', 'NOUN'), ('(', 'PUNCT'), ('Cont', 'NOUN'), ('.', 'PUNCT'), (')', 'PUNCT')] 

 XPOS tags are: 
>> [('Prof.', 'NNP'), ('Arjun', 'NNP'), ('V.', 'NNP'), ('Bala', 'NNP'), ('#', 'NN'), ('3150713', 'CD'), ('(', '-LRB-'), ('PDS', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('02', 'CD'), ('–', ','), ('Data', 'NN'), ('Science', 'NN'), ('and', 'CC'), ('Python', 'NN'), ('‹#›', 'NN'), ('Considering', 'VBG'), ('Speed', 'NN'), ('of', 'IN'), ('Execution', 'NN'), ('(', '-LRB-'), ('Cont', 'NN'), ('.', '.'), (')', '-RRB-')] 

 Lemmas are: 
>> [('Prof.', 'Prof.'), ('Arjun', 'Arjun'), ('V.', 'V.'), ('Bala', 'Bala'), ('#', '#'), ('3150713', '3150713'), ('(', '('), ('PDS', 'pds'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('02', '02'), ('–', '-'), ('Data', 'data'), ('Science', 'science'), ('and', 'and'), ('Python', 'python'), ('‹#›', '‹#›'), ('Considering', 'consider'), ('Speed', 'speed'), ('of', 'of'), ('Execution', 'execution'), ('(', '('), ('Cont', 'cont'), ('.', '.'), (')', ')')] 

 Dependency tags are: 
>> [(('Prof.', 'root'), 'root'), (('Arjun', 'Prof.'), 'flat'), (('V.', 'Prof.'), 'flat'), (('Bala', 'Prof.'), 'flat'), (('#', 'Prof.'), 'list'), (('3150713', '#'), 'nummod'), (('(', 'PDS'), 'punct'), (('PDS', 'Unit'), 'compound'), ((')', 'PDS'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', 'Prof.'), 'list'), (('02', 'Unit'), 'nummod'), (('–', 'Unit'), 'punct'), (('Data', 'Science'), 'compound'), (('Science', 'Unit'), 'appos'), (('and', '‹#›'), 'cc'), (('Python', '‹#›'), 'compound'), (('‹#›', 'Prof.'), 'list'), (('Considering', '‹#›'), 'acl'), (('Speed', 'Considering'), 'obj'), (('of', 'Execution'), 'case'), (('Execution', 'Speed'), 'nmod'), (('(', 'Cont'), 'punct'), (('Cont', 'Execution'), 'appos'), (('.', 'Cont'), 'punct'), ((')', 'Cont'), 'punct')]

 Named Entities are: 
>> [('Arjun V. Bala', 'PERSON'), ('3150713', 'CARDINAL'), ('02', 'CARDINAL')]

========================== Sentence 44 ===========================

 Dataset size :  Data science relies on huge datasets in many cases. 

Tokens are: 
>> ['Dataset', 'size', ':', 'Data', 'science', 'relies', 'on', 'huge', 'datasets', 'in', 'many', 'cases', '.'] 

 UPOS tags are: 
>> [('Dataset', 'NOUN'), ('size', 'NOUN'), (':', 'PUNCT'), ('Data', 'NOUN'), ('science', 'NOUN'), ('relies', 'VERB'), ('on', 'ADP'), ('huge', 'ADJ'), ('datasets', 'NOUN'), ('in', 'ADP'), ('many', 'ADJ'), ('cases', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Dataset', 'NN'), ('size', 'NN'), (':', ':'), ('Data', 'NN'), ('science', 'NN'), ('relies', 'VBZ'), ('on', 'IN'), ('huge', 'JJ'), ('datasets', 'NNS'), ('in', 'IN'), ('many', 'JJ'), ('cases', 'NNS'), ('.', '.')] 

 Lemmas are: 
>> [('Dataset', 'dataset'), ('size', 'size'), (':', ':'), ('Data', 'data'), ('science', 'science'), ('relies', 'rely'), ('on', 'on'), ('huge', 'huge'), ('datasets', 'dataset'), ('in', 'in'), ('many', 'many'), ('cases', 'case'), ('.', '.')] 

 Dependency tags are: 
>> [(('Dataset', 'size'), 'compound'), (('size', 'root'), 'root'), ((':', 'size'), 'punct'), (('Data', 'science'), 'compound'), (('science', 'relies'), 'nsubj'), (('relies', 'size'), 'parataxis'), (('on', 'datasets'), 'case'), (('huge', 'datasets'), 'amod'), (('datasets', 'relies'), 'obl'), (('in', 'cases'), 'case'), (('many', 'cases'), 'amod'), (('cases', 'relies'), 'obl'), (('.', 'size'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 45 ===========================

 The application type determines the size of dataset in part, but dataset size also relies on the size of the source data. 

Tokens are: 
>> ['The', 'application', 'type', 'determines', 'the', 'size', 'of', 'dataset', 'in', 'part', ',', 'but', 'dataset', 'size', 'also', 'relies', 'on', 'the', 'size', 'of', 'the', 'source', 'data', '.'] 

 UPOS tags are: 
>> [('The', 'DET'), ('application', 'NOUN'), ('type', 'NOUN'), ('determines', 'VERB'), ('the', 'DET'), ('size', 'NOUN'), ('of', 'ADP'), ('dataset', 'NOUN'), ('in', 'ADP'), ('part', 'NOUN'), (',', 'PUNCT'), ('but', 'CCONJ'), ('dataset', 'NOUN'), ('size', 'NOUN'), ('also', 'ADV'), ('relies', 'VERB'), ('on', 'ADP'), ('the', 'DET'), ('size', 'NOUN'), ('of', 'ADP'), ('the', 'DET'), ('source', 'NOUN'), ('data', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('The', 'DT'), ('application', 'NN'), ('type', 'NN'), ('determines', 'VBZ'), ('the', 'DT'), ('size', 'NN'), ('of', 'IN'), ('dataset', 'NN'), ('in', 'IN'), ('part', 'NN'), (',', ','), ('but', 'CC'), ('dataset', 'NN'), ('size', 'NN'), ('also', 'RB'), ('relies', 'VBZ'), ('on', 'IN'), ('the', 'DT'), ('size', 'NN'), ('of', 'IN'), ('the', 'DT'), ('source', 'NN'), ('data', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('The', 'the'), ('application', 'application'), ('type', 'type'), ('determines', 'determine'), ('the', 'the'), ('size', 'size'), ('of', 'of'), ('dataset', 'dataset'), ('in', 'in'), ('part', 'part'), (',', ','), ('but', 'but'), ('dataset', 'dataset'), ('size', 'size'), ('also', 'also'), ('relies', 'rely'), ('on', 'on'), ('the', 'the'), ('size', 'size'), ('of', 'of'), ('the', 'the'), ('source', 'source'), ('data', 'datum'), ('.', '.')] 

 Dependency tags are: 
>> [(('The', 'type'), 'det'), (('application', 'type'), 'compound'), (('type', 'determines'), 'nsubj'), (('determines', 'root'), 'root'), (('the', 'size'), 'det'), (('size', 'determines'), 'obj'), (('of', 'dataset'), 'case'), (('dataset', 'size'), 'nmod'), (('in', 'part'), 'case'), (('part', 'dataset'), 'nmod'), ((',', 'relies'), 'punct'), (('but', 'relies'), 'cc'), (('dataset', 'size'), 'compound'), (('size', 'relies'), 'nsubj'), (('also', 'relies'), 'advmod'), (('relies', 'determines'), 'conj'), (('on', 'size'), 'case'), (('the', 'size'), 'det'), (('size', 'relies'), 'obl'), (('of', 'data'), 'case'), (('the', 'data'), 'det'), (('source', 'data'), 'compound'), (('data', 'size'), 'nmod'), (('.', 'determines'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 46 ===========================

 Underestimating the effect of dataset size is deadly in data science applications, especially those that need to operate in real time (such as self-driving cars). 

Tokens are: 
>> ['Underestimating', 'the', 'effect', 'of', 'dataset', 'size', 'is', 'deadly', 'in', 'data', 'science', 'applications', ',', 'especially', 'those', 'that', 'need', 'to', 'operate', 'in', 'real', 'time', '(', 'such', 'as', 'self', '-', 'driving', 'cars', ')', '.'] 

 UPOS tags are: 
>> [('Underestimating', 'VERB'), ('the', 'DET'), ('effect', 'NOUN'), ('of', 'ADP'), ('dataset', 'NOUN'), ('size', 'NOUN'), ('is', 'AUX'), ('deadly', 'ADJ'), ('in', 'ADP'), ('data', 'NOUN'), ('science', 'NOUN'), ('applications', 'NOUN'), (',', 'PUNCT'), ('especially', 'ADV'), ('those', 'PRON'), ('that', 'PRON'), ('need', 'VERB'), ('to', 'PART'), ('operate', 'VERB'), ('in', 'ADP'), ('real', 'ADJ'), ('time', 'NOUN'), ('(', 'PUNCT'), ('such', 'ADJ'), ('as', 'ADP'), ('self', 'NOUN'), ('-', 'PUNCT'), ('driving', 'NOUN'), ('cars', 'NOUN'), (')', 'PUNCT'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Underestimating', 'VBG'), ('the', 'DT'), ('effect', 'NN'), ('of', 'IN'), ('dataset', 'NN'), ('size', 'NN'), ('is', 'VBZ'), ('deadly', 'JJ'), ('in', 'IN'), ('data', 'NN'), ('science', 'NN'), ('applications', 'NNS'), (',', ','), ('especially', 'RB'), ('those', 'DT'), ('that', 'WDT'), ('need', 'VBP'), ('to', 'TO'), ('operate', 'VB'), ('in', 'IN'), ('real', 'JJ'), ('time', 'NN'), ('(', '-LRB-'), ('such', 'JJ'), ('as', 'IN'), ('self', 'NN'), ('-', 'HYPH'), ('driving', 'NN'), ('cars', 'NNS'), (')', '-RRB-'), ('.', '.')] 

 Lemmas are: 
>> [('Underestimating', 'underestimate'), ('the', 'the'), ('effect', 'effect'), ('of', 'of'), ('dataset', 'dataset'), ('size', 'size'), ('is', 'be'), ('deadly', 'deadly'), ('in', 'in'), ('data', 'datum'), ('science', 'science'), ('applications', 'application'), (',', ','), ('especially', 'especially'), ('those', 'that'), ('that', 'that'), ('need', 'need'), ('to', 'to'), ('operate', 'operate'), ('in', 'in'), ('real', 'real'), ('time', 'time'), ('(', '('), ('such', 'such'), ('as', 'as'), ('self', 'self'), ('-', '-'), ('driving', 'driving'), ('cars', 'car'), (')', ')'), ('.', '.')] 

 Dependency tags are: 
>> [(('Underestimating', 'deadly'), 'csubj'), (('the', 'effect'), 'det'), (('effect', 'Underestimating'), 'obj'), (('of', 'size'), 'case'), (('dataset', 'size'), 'compound'), (('size', 'effect'), 'nmod'), (('is', 'deadly'), 'cop'), (('deadly', 'root'), 'root'), (('in', 'applications'), 'case'), (('data', 'applications'), 'compound'), (('science', 'applications'), 'compound'), (('applications', 'deadly'), 'obl'), ((',', 'deadly'), 'punct'), (('especially', 'those'), 'advmod'), (('those', 'applications'), 'appos'), (('that', 'need'), 'nsubj'), (('need', 'those'), 'acl:relcl'), (('to', 'operate'), 'mark'), (('operate', 'need'), 'xcomp'), (('in', 'time'), 'case'), (('real', 'time'), 'amod'), (('time', 'operate'), 'obl'), (('(', 'cars'), 'punct'), (('such', 'cars'), 'case'), (('as', 'such'), 'fixed'), (('self', 'driving'), 'compound'), (('-', 'driving'), 'punct'), (('driving', 'cars'), 'amod'), (('cars', 'time'), 'nmod'), ((')', 'cars'), 'punct'), (('.', 'deadly'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 47 ===========================

 Loading technique : 

Tokens are: 
>> ['Loading', 'technique', ':'] 

 UPOS tags are: 
>> [('Loading', 'NOUN'), ('technique', 'NOUN'), (':', 'PUNCT')] 

 XPOS tags are: 
>> [('Loading', 'NN'), ('technique', 'NN'), (':', ':')] 

 Lemmas are: 
>> [('Loading', 'loading'), ('technique', 'technique'), (':', ':')] 

 Dependency tags are: 
>> [(('Loading', 'technique'), 'compound'), (('technique', 'root'), 'root'), ((':', 'technique'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 48 ===========================

 The method we use to load data for analysis is critical, and we should always use the fastest one even if it means upgrading the hardware to do so. 

Tokens are: 
>> ['The', 'method', 'we', 'use', 'to', 'load', 'data', 'for', 'analysis', 'is', 'critical', ',', 'and', 'we', 'should', 'always', 'use', 'the', 'fastest', 'one', 'even', 'if', 'it', 'means', 'upgrading', 'the', 'hardware', 'to', 'do', 'so', '.'] 

 UPOS tags are: 
>> [('The', 'DET'), ('method', 'NOUN'), ('we', 'PRON'), ('use', 'VERB'), ('to', 'PART'), ('load', 'VERB'), ('data', 'NOUN'), ('for', 'ADP'), ('analysis', 'NOUN'), ('is', 'AUX'), ('critical', 'ADJ'), (',', 'PUNCT'), ('and', 'CCONJ'), ('we', 'PRON'), ('should', 'AUX'), ('always', 'ADV'), ('use', 'VERB'), ('the', 'DET'), ('fastest', 'ADJ'), ('one', 'NOUN'), ('even', 'ADV'), ('if', 'SCONJ'), ('it', 'PRON'), ('means', 'VERB'), ('upgrading', 'VERB'), ('the', 'DET'), ('hardware', 'NOUN'), ('to', 'PART'), ('do', 'VERB'), ('so', 'ADV'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('The', 'DT'), ('method', 'NN'), ('we', 'PRP'), ('use', 'VBP'), ('to', 'TO'), ('load', 'VB'), ('data', 'NNS'), ('for', 'IN'), ('analysis', 'NN'), ('is', 'VBZ'), ('critical', 'JJ'), (',', ','), ('and', 'CC'), ('we', 'PRP'), ('should', 'MD'), ('always', 'RB'), ('use', 'VB'), ('the', 'DT'), ('fastest', 'JJS'), ('one', 'NN'), ('even', 'RB'), ('if', 'IN'), ('it', 'PRP'), ('means', 'VBZ'), ('upgrading', 'VBG'), ('the', 'DT'), ('hardware', 'NN'), ('to', 'TO'), ('do', 'VB'), ('so', 'RB'), ('.', '.')] 

 Lemmas are: 
>> [('The', 'the'), ('method', 'method'), ('we', 'we'), ('use', 'use'), ('to', 'to'), ('load', 'load'), ('data', 'datum'), ('for', 'for'), ('analysis', 'analysis'), ('is', 'be'), ('critical', 'critical'), (',', ','), ('and', 'and'), ('we', 'we'), ('should', 'should'), ('always', 'always'), ('use', 'use'), ('the', 'the'), ('fastest', 'fast'), ('one', 'one'), ('even', 'even'), ('if', 'if'), ('it', 'it'), ('means', 'mean'), ('upgrading', 'upgrade'), ('the', 'the'), ('hardware', 'hardware'), ('to', 'to'), ('do', 'do'), ('so', 'so'), ('.', '.')] 

 Dependency tags are: 
>> [(('The', 'method'), 'det'), (('method', 'critical'), 'nsubj'), (('we', 'use'), 'nsubj'), (('use', 'method'), 'acl:relcl'), (('to', 'load'), 'mark'), (('load', 'use'), 'xcomp'), (('data', 'load'), 'obj'), (('for', 'analysis'), 'case'), (('analysis', 'load'), 'obl'), (('is', 'critical'), 'cop'), (('critical', 'root'), 'root'), ((',', 'use'), 'punct'), (('and', 'use'), 'cc'), (('we', 'use'), 'nsubj'), (('should', 'use'), 'aux'), (('always', 'use'), 'advmod'), (('use', 'critical'), 'conj'), (('the', 'one'), 'det'), (('fastest', 'one'), 'amod'), (('one', 'use'), 'obj'), (('even', 'means'), 'advmod'), (('if', 'means'), 'mark'), (('it', 'means'), 'nsubj'), (('means', 'use'), 'advcl'), (('upgrading', 'means'), 'xcomp'), (('the', 'hardware'), 'det'), (('hardware', 'upgrading'), 'obj'), (('to', 'do'), 'mark'), (('do', 'upgrading'), 'advcl'), (('so', 'do'), 'advmod'), (('.', 'critical'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 49 ===========================

 Working with data in memory is always faster than working with data stored on disk. 

Tokens are: 
>> ['Working', 'with', 'data', 'in', 'memory', 'is', 'always', 'faster', 'than', 'working', 'with', 'data', 'stored', 'on', 'disk', '.'] 

 UPOS tags are: 
>> [('Working', 'VERB'), ('with', 'ADP'), ('data', 'NOUN'), ('in', 'ADP'), ('memory', 'NOUN'), ('is', 'AUX'), ('always', 'ADV'), ('faster', 'ADJ'), ('than', 'SCONJ'), ('working', 'VERB'), ('with', 'ADP'), ('data', 'NOUN'), ('stored', 'VERB'), ('on', 'ADP'), ('disk', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Working', 'VBG'), ('with', 'IN'), ('data', 'NNS'), ('in', 'IN'), ('memory', 'NN'), ('is', 'VBZ'), ('always', 'RB'), ('faster', 'JJR'), ('than', 'IN'), ('working', 'VBG'), ('with', 'IN'), ('data', 'NNS'), ('stored', 'VBN'), ('on', 'IN'), ('disk', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('Working', 'work'), ('with', 'with'), ('data', 'datum'), ('in', 'in'), ('memory', 'memory'), ('is', 'be'), ('always', 'always'), ('faster', 'fast'), ('than', 'than'), ('working', 'work'), ('with', 'with'), ('data', 'datum'), ('stored', 'store'), ('on', 'on'), ('disk', 'disk'), ('.', '.')] 

 Dependency tags are: 
>> [(('Working', 'faster'), 'csubj'), (('with', 'data'), 'case'), (('data', 'Working'), 'obl'), (('in', 'memory'), 'case'), (('memory', 'data'), 'nmod'), (('is', 'faster'), 'cop'), (('always', 'faster'), 'advmod'), (('faster', 'root'), 'root'), (('than', 'working'), 'mark'), (('working', 'faster'), 'advcl'), (('with', 'data'), 'case'), (('data', 'working'), 'obl'), (('stored', 'data'), 'acl'), (('on', 'disk'), 'case'), (('disk', 'stored'), 'obl'), (('.', 'faster'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 50 ===========================

 Accessing local data is always faster than accessing it across a network. 

Tokens are: 
>> ['Accessing', 'local', 'data', 'is', 'always', 'faster', 'than', 'accessing', 'it', 'across', 'a', 'network', '.'] 

 UPOS tags are: 
>> [('Accessing', 'VERB'), ('local', 'ADJ'), ('data', 'NOUN'), ('is', 'AUX'), ('always', 'ADV'), ('faster', 'ADJ'), ('than', 'SCONJ'), ('accessing', 'VERB'), ('it', 'PRON'), ('across', 'ADP'), ('a', 'DET'), ('network', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Accessing', 'VBG'), ('local', 'JJ'), ('data', 'NNS'), ('is', 'VBZ'), ('always', 'RB'), ('faster', 'JJR'), ('than', 'IN'), ('accessing', 'VBG'), ('it', 'PRP'), ('across', 'IN'), ('a', 'DT'), ('network', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('Accessing', 'access'), ('local', 'local'), ('data', 'datum'), ('is', 'be'), ('always', 'always'), ('faster', 'fast'), ('than', 'than'), ('accessing', 'access'), ('it', 'it'), ('across', 'across'), ('a', 'a'), ('network', 'network'), ('.', '.')] 

 Dependency tags are: 
>> [(('Accessing', 'faster'), 'csubj'), (('local', 'data'), 'amod'), (('data', 'Accessing'), 'obj'), (('is', 'faster'), 'cop'), (('always', 'faster'), 'advmod'), (('faster', 'root'), 'root'), (('than', 'accessing'), 'mark'), (('accessing', 'faster'), 'advcl'), (('it', 'accessing'), 'obj'), (('across', 'network'), 'case'), (('a', 'network'), 'det'), (('network', 'accessing'), 'obl'), (('.', 'faster'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 51 ===========================

 Performing data science tasks that rely on network is probably the slowest method of all    Prof. Arjun V. Bala #3150713 (PDS)      Unit 02 – Data Science and Python ‹#›  Considering Speed of Execution (Cont.) 

Tokens are: 
>> ['Performing', 'data', 'science', 'tasks', 'that', 'rely', 'on', 'network', 'is', 'probably', 'the', 'slowest', 'method', 'of', 'all', 'Prof.', 'Arjun', 'V.', 'Bala', '#', '3150713', '(', 'PDS', ')', '\uf077', 'Unit', '02', '–', 'Data', 'Science', 'and', 'Python', '‹#›', 'Considering', 'Speed', 'of', 'Execution', '(', 'Cont', '.', ')'] 

 UPOS tags are: 
>> [('Performing', 'VERB'), ('data', 'NOUN'), ('science', 'NOUN'), ('tasks', 'NOUN'), ('that', 'PRON'), ('rely', 'VERB'), ('on', 'ADP'), ('network', 'NOUN'), ('is', 'AUX'), ('probably', 'ADV'), ('the', 'DET'), ('slowest', 'ADJ'), ('method', 'NOUN'), ('of', 'ADP'), ('all', 'DET'), ('Prof.', 'PROPN'), ('Arjun', 'PROPN'), ('V.', 'PROPN'), ('Bala', 'PROPN'), ('#', 'SYM'), ('3150713', 'NUM'), ('(', 'PUNCT'), ('PDS', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('02', 'NUM'), ('–', 'PUNCT'), ('Data', 'NOUN'), ('Science', 'NOUN'), ('and', 'CCONJ'), ('Python', 'PROPN'), ('‹#›', 'NOUN'), ('Considering', 'VERB'), ('Speed', 'NOUN'), ('of', 'ADP'), ('Execution', 'NOUN'), ('(', 'PUNCT'), ('Cont', 'NOUN'), ('.', 'PUNCT'), (')', 'PUNCT')] 

 XPOS tags are: 
>> [('Performing', 'VBG'), ('data', 'NN'), ('science', 'NN'), ('tasks', 'NNS'), ('that', 'WDT'), ('rely', 'VBP'), ('on', 'IN'), ('network', 'NN'), ('is', 'VBZ'), ('probably', 'RB'), ('the', 'DT'), ('slowest', 'JJS'), ('method', 'NN'), ('of', 'IN'), ('all', 'DT'), ('Prof.', 'NNP'), ('Arjun', 'NNP'), ('V.', 'NNP'), ('Bala', 'NNP'), ('#', 'NN'), ('3150713', 'CD'), ('(', '-LRB-'), ('PDS', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('02', 'CD'), ('–', ':'), ('Data', 'NN'), ('Science', 'NN'), ('and', 'CC'), ('Python', 'NNP'), ('‹#›', 'NN'), ('Considering', 'VBG'), ('Speed', 'NN'), ('of', 'IN'), ('Execution', 'NN'), ('(', '-LRB-'), ('Cont', 'NN'), ('.', '.'), (')', '-RRB-')] 

 Lemmas are: 
>> [('Performing', 'perform'), ('data', 'datum'), ('science', 'science'), ('tasks', 'task'), ('that', 'that'), ('rely', 'rely'), ('on', 'on'), ('network', 'network'), ('is', 'be'), ('probably', 'probably'), ('the', 'the'), ('slowest', 'slow'), ('method', 'method'), ('of', 'of'), ('all', 'all'), ('Prof.', 'Prof.'), ('Arjun', 'Arjun'), ('V.', 'V.'), ('Bala', 'Bala'), ('#', '#'), ('3150713', '3150713'), ('(', '('), ('PDS', 'pds'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('02', '02'), ('–', '-'), ('Data', 'data'), ('Science', 'science'), ('and', 'and'), ('Python', 'python'), ('‹#›', '‹#›'), ('Considering', 'consider'), ('Speed', 'speed'), ('of', 'of'), ('Execution', 'execution'), ('(', '('), ('Cont', 'cont'), ('.', '.'), (')', ')')] 

 Dependency tags are: 
>> [(('Performing', 'method'), 'csubj'), (('data', 'science'), 'compound'), (('science', 'tasks'), 'compound'), (('tasks', 'Performing'), 'obj'), (('that', 'rely'), 'nsubj'), (('rely', 'tasks'), 'acl:relcl'), (('on', 'network'), 'case'), (('network', 'rely'), 'obl'), (('is', 'method'), 'cop'), (('probably', 'method'), 'advmod'), (('the', 'method'), 'det'), (('slowest', 'method'), 'amod'), (('method', 'root'), 'root'), (('of', 'Prof.'), 'case'), (('all', 'Prof.'), 'det'), (('Prof.', 'method'), 'nmod'), (('Arjun', 'Prof.'), 'flat'), (('V.', 'Prof.'), 'flat'), (('Bala', 'Prof.'), 'flat'), (('#', 'Prof.'), 'appos'), (('3150713', '#'), 'nummod'), (('(', 'PDS'), 'punct'), (('PDS', 'Unit'), 'appos'), ((')', 'PDS'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', 'method'), 'appos'), (('02', 'Unit'), 'nummod'), (('–', 'Science'), 'punct'), (('Data', 'Science'), 'compound'), (('Science', 'Unit'), 'appos'), (('and', 'Python'), 'cc'), (('Python', 'Science'), 'conj'), (('‹#›', 'Science'), 'conj'), (('Considering', '‹#›'), 'acl'), (('Speed', 'Considering'), 'obj'), (('of', 'Execution'), 'case'), (('Execution', 'Speed'), 'nmod'), (('(', 'Cont'), 'punct'), (('Cont', 'Execution'), 'appos'), (('.', 'Cont'), 'punct'), ((')', 'Cont'), 'punct')]

 Named Entities are: 
>> [('02', 'CARDINAL')]

========================== Sentence 52 ===========================

 Coding Style : Anyone can create a slow application using any programming language by employing coding techniques that don’t make the best use of programming language functionality. 

Tokens are: 
>> ['Coding', 'Style', ':', 'Anyone', 'can', 'create', 'a', 'slow', 'application', 'using', 'any', 'programming', 'language', 'by', 'employing', 'coding', 'techniques', 'that', 'do', 'n’t', 'make', 'the', 'best', 'use', 'of', 'programming', 'language', 'functionality', '.'] 

 UPOS tags are: 
>> [('Coding', 'NOUN'), ('Style', 'NOUN'), (':', 'PUNCT'), ('Anyone', 'PRON'), ('can', 'AUX'), ('create', 'VERB'), ('a', 'DET'), ('slow', 'ADJ'), ('application', 'NOUN'), ('using', 'VERB'), ('any', 'DET'), ('programming', 'NOUN'), ('language', 'NOUN'), ('by', 'SCONJ'), ('employing', 'VERB'), ('coding', 'NOUN'), ('techniques', 'NOUN'), ('that', 'PRON'), ('do', 'AUX'), ('n’t', 'PART'), ('make', 'VERB'), ('the', 'DET'), ('best', 'ADJ'), ('use', 'NOUN'), ('of', 'SCONJ'), ('programming', 'NOUN'), ('language', 'NOUN'), ('functionality', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Coding', 'NN'), ('Style', 'NN'), (':', ':'), ('Anyone', 'NN'), ('can', 'MD'), ('create', 'VB'), ('a', 'DT'), ('slow', 'JJ'), ('application', 'NN'), ('using', 'VBG'), ('any', 'DT'), ('programming', 'NN'), ('language', 'NN'), ('by', 'IN'), ('employing', 'VBG'), ('coding', 'NN'), ('techniques', 'NNS'), ('that', 'WDT'), ('do', 'VBP'), ('n’t', 'RB'), ('make', 'VB'), ('the', 'DT'), ('best', 'JJS'), ('use', 'NN'), ('of', 'IN'), ('programming', 'NN'), ('language', 'NN'), ('functionality', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('Coding', 'coding'), ('Style', 'style'), (':', ':'), ('Anyone', 'anyone'), ('can', 'can'), ('create', 'create'), ('a', 'a'), ('slow', 'slow'), ('application', 'application'), ('using', 'use'), ('any', 'any'), ('programming', 'programming'), ('language', 'language'), ('by', 'by'), ('employing', 'employ'), ('coding', 'coding'), ('techniques', 'technique'), ('that', 'that'), ('do', 'do'), ('n’t', 'not'), ('make', 'make'), ('the', 'the'), ('best', 'good'), ('use', 'use'), ('of', 'of'), ('programming', 'programming'), ('language', 'language'), ('functionality', 'functionality'), ('.', '.')] 

 Dependency tags are: 
>> [(('Coding', 'Style'), 'compound'), (('Style', 'root'), 'root'), ((':', 'Style'), 'punct'), (('Anyone', 'create'), 'nsubj'), (('can', 'create'), 'aux'), (('create', 'Style'), 'parataxis'), (('a', 'application'), 'det'), (('slow', 'application'), 'amod'), (('application', 'create'), 'obj'), (('using', 'application'), 'acl'), (('any', 'language'), 'det'), (('programming', 'language'), 'compound'), (('language', 'using'), 'obj'), (('by', 'employing'), 'mark'), (('employing', 'using'), 'advcl'), (('coding', 'techniques'), 'compound'), (('techniques', 'employing'), 'obj'), (('that', 'make'), 'nsubj'), (('do', 'make'), 'aux'), (('n’t', 'make'), 'advmod'), (('make', 'techniques'), 'acl:relcl'), (('the', 'use'), 'det'), (('best', 'use'), 'amod'), (('use', 'make'), 'obj'), (('of', 'functionality'), 'case'), (('programming', 'functionality'), 'compound'), (('language', 'functionality'), 'compound'), (('functionality', 'use'), 'nmod'), (('.', 'Style'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 53 ===========================

 To create fast data science applications, you must use best-of-method coding techniques. 

Tokens are: 
>> ['To', 'create', 'fast', 'data', 'science', 'applications', ',', 'you', 'must', 'use', 'best-', 'of', '-', 'method', 'coding', 'techniques', '.'] 

 UPOS tags are: 
>> [('To', 'PART'), ('create', 'VERB'), ('fast', 'ADJ'), ('data', 'NOUN'), ('science', 'NOUN'), ('applications', 'NOUN'), (',', 'PUNCT'), ('you', 'PRON'), ('must', 'AUX'), ('use', 'VERB'), ('best-', 'ADJ'), ('of', 'ADP'), ('-', 'PUNCT'), ('method', 'NOUN'), ('coding', 'NOUN'), ('techniques', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('To', 'TO'), ('create', 'VB'), ('fast', 'JJ'), ('data', 'NN'), ('science', 'NN'), ('applications', 'NNS'), (',', ','), ('you', 'PRP'), ('must', 'MD'), ('use', 'VB'), ('best-', 'JJS'), ('of', 'IN'), ('-', 'HYPH'), ('method', 'NN'), ('coding', 'NN'), ('techniques', 'NNS'), ('.', '.')] 

 Lemmas are: 
>> [('To', 'to'), ('create', 'create'), ('fast', 'fast'), ('data', 'datum'), ('science', 'science'), ('applications', 'application'), (',', ','), ('you', 'you'), ('must', 'must'), ('use', 'use'), ('best-', 'best'), ('of', 'of'), ('-', '-'), ('method', 'method'), ('coding', 'coding'), ('techniques', 'technique'), ('.', '.')] 

 Dependency tags are: 
>> [(('To', 'create'), 'mark'), (('create', 'use'), 'advcl'), (('fast', 'applications'), 'amod'), (('data', 'applications'), 'compound'), (('science', 'applications'), 'compound'), (('applications', 'create'), 'obj'), ((',', 'use'), 'punct'), (('you', 'use'), 'nsubj'), (('must', 'use'), 'aux'), (('use', 'root'), 'root'), (('best-', 'techniques'), 'amod'), (('of', 'method'), 'case'), (('-', 'method'), 'punct'), (('method', 'techniques'), 'compound'), (('coding', 'techniques'), 'compound'), (('techniques', 'use'), 'obj'), (('.', 'use'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 54 ===========================

 Machine Capability : Running data science applications on a memory-constrained system with a slower processor is impossible. 

Tokens are: 
>> ['Machine', 'Capability', ':', 'Running', 'data', 'science', 'applications', 'on', 'a', 'memory', '-', 'constrained', 'system', 'with', 'a', 'slower', 'processor', 'is', 'impossible', '.'] 

 UPOS tags are: 
>> [('Machine', 'NOUN'), ('Capability', 'NOUN'), (':', 'PUNCT'), ('Running', 'VERB'), ('data', 'NOUN'), ('science', 'NOUN'), ('applications', 'NOUN'), ('on', 'ADP'), ('a', 'DET'), ('memory', 'NOUN'), ('-', 'PUNCT'), ('constrained', 'VERB'), ('system', 'NOUN'), ('with', 'ADP'), ('a', 'DET'), ('slower', 'ADJ'), ('processor', 'NOUN'), ('is', 'AUX'), ('impossible', 'ADJ'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Machine', 'NN'), ('Capability', 'NN'), (':', ':'), ('Running', 'VBG'), ('data', 'NN'), ('science', 'NN'), ('applications', 'NNS'), ('on', 'IN'), ('a', 'DT'), ('memory', 'NN'), ('-', 'HYPH'), ('constrained', 'VBN'), ('system', 'NN'), ('with', 'IN'), ('a', 'DT'), ('slower', 'JJR'), ('processor', 'NN'), ('is', 'VBZ'), ('impossible', 'JJ'), ('.', '.')] 

 Lemmas are: 
>> [('Machine', 'Machine'), ('Capability', 'capability'), (':', ':'), ('Running', 'Run'), ('data', 'datum'), ('science', 'science'), ('applications', 'application'), ('on', 'on'), ('a', 'a'), ('memory', 'memory'), ('-', '-'), ('constrained', 'constrain'), ('system', 'system'), ('with', 'with'), ('a', 'a'), ('slower', 'slow'), ('processor', 'processor'), ('is', 'be'), ('impossible', 'impossible'), ('.', '.')] 

 Dependency tags are: 
>> [(('Machine', 'Capability'), 'compound'), (('Capability', 'root'), 'root'), ((':', 'Capability'), 'punct'), (('Running', 'impossible'), 'csubj'), (('data', 'science'), 'compound'), (('science', 'applications'), 'compound'), (('applications', 'Running'), 'obj'), (('on', 'system'), 'case'), (('a', 'system'), 'det'), (('memory', 'constrained'), 'compound'), (('-', 'constrained'), 'punct'), (('constrained', 'system'), 'amod'), (('system', 'applications'), 'nmod'), (('with', 'processor'), 'case'), (('a', 'processor'), 'det'), (('slower', 'processor'), 'amod'), (('processor', 'system'), 'nmod'), (('is', 'impossible'), 'cop'), (('impossible', 'Capability'), 'appos'), (('.', 'Capability'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 55 ===========================

 The system you use needs to have the best hardware you can afford. 

Tokens are: 
>> ['The', 'system', 'you', 'use', 'needs', 'to', 'have', 'the', 'best', 'hardware', 'you', 'can', 'afford', '.'] 

 UPOS tags are: 
>> [('The', 'DET'), ('system', 'NOUN'), ('you', 'PRON'), ('use', 'VERB'), ('needs', 'VERB'), ('to', 'PART'), ('have', 'VERB'), ('the', 'DET'), ('best', 'ADJ'), ('hardware', 'NOUN'), ('you', 'PRON'), ('can', 'AUX'), ('afford', 'VERB'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('The', 'DT'), ('system', 'NN'), ('you', 'PRP'), ('use', 'VBP'), ('needs', 'VBZ'), ('to', 'TO'), ('have', 'VB'), ('the', 'DT'), ('best', 'JJS'), ('hardware', 'NN'), ('you', 'PRP'), ('can', 'MD'), ('afford', 'VB'), ('.', '.')] 

 Lemmas are: 
>> [('The', 'the'), ('system', 'system'), ('you', 'you'), ('use', 'use'), ('needs', 'need'), ('to', 'to'), ('have', 'have'), ('the', 'the'), ('best', 'good'), ('hardware', 'hardware'), ('you', 'you'), ('can', 'can'), ('afford', 'afford'), ('.', '.')] 

 Dependency tags are: 
>> [(('The', 'system'), 'det'), (('system', 'needs'), 'nsubj'), (('you', 'use'), 'nsubj'), (('use', 'system'), 'acl:relcl'), (('needs', 'root'), 'root'), (('to', 'have'), 'mark'), (('have', 'needs'), 'xcomp'), (('the', 'hardware'), 'det'), (('best', 'hardware'), 'amod'), (('hardware', 'have'), 'obj'), (('you', 'afford'), 'nsubj'), (('can', 'afford'), 'aux'), (('afford', 'hardware'), 'acl:relcl'), (('.', 'needs'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 56 ===========================

 Given that data science applications are both processor and disk bound, you can’t really cut corners in any area and expect great results. 

Tokens are: 
>> ['Given', 'that', 'data', 'science', 'applications', 'are', 'both', 'processor', 'and', 'disk', 'bound', ',', 'you', 'ca', 'n’t', 'really', 'cut', 'corners', 'in', 'any', 'area', 'and', 'expect', 'great', 'results', '.'] 

 UPOS tags are: 
>> [('Given', 'VERB'), ('that', 'SCONJ'), ('data', 'NOUN'), ('science', 'NOUN'), ('applications', 'NOUN'), ('are', 'AUX'), ('both', 'CCONJ'), ('processor', 'NOUN'), ('and', 'CCONJ'), ('disk', 'NOUN'), ('bound', 'VERB'), (',', 'PUNCT'), ('you', 'PRON'), ('ca', 'AUX'), ('n’t', 'PART'), ('really', 'ADV'), ('cut', 'VERB'), ('corners', 'NOUN'), ('in', 'ADP'), ('any', 'DET'), ('area', 'NOUN'), ('and', 'CCONJ'), ('expect', 'VERB'), ('great', 'ADJ'), ('results', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Given', 'VBN'), ('that', 'IN'), ('data', 'NN'), ('science', 'NN'), ('applications', 'NNS'), ('are', 'VBP'), ('both', 'CC'), ('processor', 'NN'), ('and', 'CC'), ('disk', 'NN'), ('bound', 'VBN'), (',', ','), ('you', 'PRP'), ('ca', 'MD'), ('n’t', 'RB'), ('really', 'RB'), ('cut', 'VB'), ('corners', 'NNS'), ('in', 'IN'), ('any', 'DT'), ('area', 'NN'), ('and', 'CC'), ('expect', 'VB'), ('great', 'JJ'), ('results', 'NNS'), ('.', '.')] 

 Lemmas are: 
>> [('Given', 'give'), ('that', 'that'), ('data', 'datum'), ('science', 'science'), ('applications', 'application'), ('are', 'be'), ('both', 'both'), ('processor', 'processor'), ('and', 'and'), ('disk', 'disk'), ('bound', 'bind'), (',', ','), ('you', 'you'), ('ca', 'can'), ('n’t', 'not'), ('really', 'really'), ('cut', 'cut'), ('corners', 'corner'), ('in', 'in'), ('any', 'any'), ('area', 'area'), ('and', 'and'), ('expect', 'expect'), ('great', 'great'), ('results', 'result'), ('.', '.')] 

 Dependency tags are: 
>> [(('Given', 'cut'), 'advcl'), (('that', 'processor'), 'mark'), (('data', 'applications'), 'compound'), (('science', 'applications'), 'compound'), (('applications', 'processor'), 'nsubj'), (('are', 'processor'), 'cop'), (('both', 'processor'), 'cc:preconj'), (('processor', 'Given'), 'ccomp'), (('and', 'disk'), 'cc'), (('disk', 'processor'), 'conj'), (('bound', 'processor'), 'conj'), ((',', 'cut'), 'punct'), (('you', 'cut'), 'nsubj'), (('ca', 'cut'), 'aux'), (('n’t', 'cut'), 'advmod'), (('really', 'cut'), 'advmod'), (('cut', 'root'), 'root'), (('corners', 'cut'), 'obj'), (('in', 'area'), 'case'), (('any', 'area'), 'det'), (('area', 'cut'), 'obl'), (('and', 'expect'), 'cc'), (('expect', 'cut'), 'conj'), (('great', 'results'), 'amod'), (('results', 'expect'), 'obj'), (('.', 'cut'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 57 ===========================

 Analysis Algorithm : 

Tokens are: 
>> ['Analysis', 'Algorithm', ':'] 

 UPOS tags are: 
>> [('Analysis', 'NOUN'), ('Algorithm', 'NOUN'), (':', 'PUNCT')] 

 XPOS tags are: 
>> [('Analysis', 'NN'), ('Algorithm', 'NN'), (':', ':')] 

 Lemmas are: 
>> [('Analysis', 'analysis'), ('Algorithm', 'algorithm'), (':', ':')] 

 Dependency tags are: 
>> [(('Analysis', 'Algorithm'), 'compound'), (('Algorithm', 'root'), 'root'), ((':', 'Algorithm'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 58 ===========================

 The algorithm you use determines the kind of result you obtain and controls execution speed. 

Tokens are: 
>> ['The', 'algorithm', 'you', 'use', 'determines', 'the', 'kind', 'of', 'result', 'you', 'obtain', 'and', 'controls', 'execution', 'speed', '.'] 

 UPOS tags are: 
>> [('The', 'DET'), ('algorithm', 'NOUN'), ('you', 'PRON'), ('use', 'VERB'), ('determines', 'VERB'), ('the', 'DET'), ('kind', 'NOUN'), ('of', 'ADP'), ('result', 'NOUN'), ('you', 'PRON'), ('obtain', 'VERB'), ('and', 'CCONJ'), ('controls', 'NOUN'), ('execution', 'NOUN'), ('speed', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('The', 'DT'), ('algorithm', 'NN'), ('you', 'PRP'), ('use', 'VBP'), ('determines', 'VBZ'), ('the', 'DT'), ('kind', 'NN'), ('of', 'IN'), ('result', 'NN'), ('you', 'PRP'), ('obtain', 'VBP'), ('and', 'CC'), ('controls', 'NNS'), ('execution', 'NN'), ('speed', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('The', 'the'), ('algorithm', 'algorithm'), ('you', 'you'), ('use', 'use'), ('determines', 'determine'), ('the', 'the'), ('kind', 'kind'), ('of', 'of'), ('result', 'result'), ('you', 'you'), ('obtain', 'obtain'), ('and', 'and'), ('controls', 'control'), ('execution', 'execution'), ('speed', 'speed'), ('.', '.')] 

 Dependency tags are: 
>> [(('The', 'algorithm'), 'det'), (('algorithm', 'determines'), 'nsubj'), (('you', 'use'), 'nsubj'), (('use', 'algorithm'), 'acl:relcl'), (('determines', 'root'), 'root'), (('the', 'kind'), 'det'), (('kind', 'determines'), 'obj'), (('of', 'result'), 'case'), (('result', 'kind'), 'nmod'), (('you', 'obtain'), 'nsubj'), (('obtain', 'result'), 'acl:relcl'), (('and', 'speed'), 'cc'), (('controls', 'speed'), 'compound'), (('execution', 'speed'), 'compound'), (('speed', 'obtain'), 'obj'), (('.', 'determines'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 59 ===========================

 We must experiment to find the best algorithm for particular dataset. 

Tokens are: 
>> ['We', 'must', 'experiment', 'to', 'find', 'the', 'best', 'algorithm', 'for', 'particular', 'dataset', '.'] 

 UPOS tags are: 
>> [('We', 'PRON'), ('must', 'AUX'), ('experiment', 'VERB'), ('to', 'PART'), ('find', 'VERB'), ('the', 'DET'), ('best', 'ADJ'), ('algorithm', 'NOUN'), ('for', 'ADP'), ('particular', 'ADJ'), ('dataset', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('We', 'PRP'), ('must', 'MD'), ('experiment', 'VB'), ('to', 'TO'), ('find', 'VB'), ('the', 'DT'), ('best', 'JJS'), ('algorithm', 'NN'), ('for', 'IN'), ('particular', 'JJ'), ('dataset', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('We', 'we'), ('must', 'must'), ('experiment', 'experiment'), ('to', 'to'), ('find', 'find'), ('the', 'the'), ('best', 'good'), ('algorithm', 'algorithm'), ('for', 'for'), ('particular', 'particular'), ('dataset', 'dataset'), ('.', '.')] 

 Dependency tags are: 
>> [(('We', 'experiment'), 'nsubj'), (('must', 'experiment'), 'aux'), (('experiment', 'root'), 'root'), (('to', 'find'), 'mark'), (('find', 'experiment'), 'xcomp'), (('the', 'algorithm'), 'det'), (('best', 'algorithm'), 'amod'), (('algorithm', 'find'), 'obj'), (('for', 'dataset'), 'case'), (('particular', 'dataset'), 'amod'), (('dataset', 'algorithm'), 'nmod'), (('.', 'experiment'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 60 ===========================

 Prof. Arjun V. Bala #3150713 (PDS)      Unit 02 – Data Science and Python ‹#›  Using the Python Ecosystem for Data Science 

Tokens are: 
>> ['Prof.', 'Arjun', 'V.', 'Bala', '#', '3150713', '(', 'PDS', ')', '\uf077', 'Unit', '02', '–', 'Data', 'Science', 'and', 'Python', '‹#›', 'Using', 'the', 'Python', 'Ecosystem', 'for', 'Data', 'Science'] 

 UPOS tags are: 
>> [('Prof.', 'PROPN'), ('Arjun', 'PROPN'), ('V.', 'PROPN'), ('Bala', 'PROPN'), ('#', 'SYM'), ('3150713', 'NUM'), ('(', 'PUNCT'), ('PDS', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('02', 'NUM'), ('–', 'PUNCT'), ('Data', 'NOUN'), ('Science', 'NOUN'), ('and', 'CCONJ'), ('Python', 'PROPN'), ('‹#›', 'NOUN'), ('Using', 'VERB'), ('the', 'DET'), ('Python', 'PROPN'), ('Ecosystem', 'NOUN'), ('for', 'ADP'), ('Data', 'NOUN'), ('Science', 'NOUN')] 

 XPOS tags are: 
>> [('Prof.', 'NNP'), ('Arjun', 'NNP'), ('V.', 'NNP'), ('Bala', 'NNP'), ('#', 'NN'), ('3150713', 'CD'), ('(', '-LRB-'), ('PDS', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('02', 'CD'), ('–', ','), ('Data', 'NN'), ('Science', 'NN'), ('and', 'CC'), ('Python', 'NNP'), ('‹#›', 'NN'), ('Using', 'VBG'), ('the', 'DT'), ('Python', 'NNP'), ('Ecosystem', 'NN'), ('for', 'IN'), ('Data', 'NN'), ('Science', 'NN')] 

 Lemmas are: 
>> [('Prof.', 'Prof.'), ('Arjun', 'Arjun'), ('V.', 'V.'), ('Bala', 'Bala'), ('#', '#'), ('3150713', '3150713'), ('(', '('), ('PDS', 'pds'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('02', '02'), ('–', '-'), ('Data', 'data'), ('Science', 'science'), ('and', 'and'), ('Python', 'python'), ('‹#›', '‹#›'), ('Using', 'use'), ('the', 'the'), ('Python', 'python'), ('Ecosystem', 'ecosystem'), ('for', 'for'), ('Data', 'data'), ('Science', 'science')] 

 Dependency tags are: 
>> [(('Prof.', 'root'), 'root'), (('Arjun', 'Prof.'), 'flat'), (('V.', 'Prof.'), 'flat'), (('Bala', 'Prof.'), 'flat'), (('#', 'Prof.'), 'list'), (('3150713', '#'), 'nummod'), (('(', 'PDS'), 'punct'), (('PDS', 'Unit'), 'compound'), ((')', 'PDS'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', 'Prof.'), 'list'), (('02', 'Unit'), 'nummod'), (('–', 'Unit'), 'punct'), (('Data', 'Science'), 'compound'), (('Science', '‹#›'), 'compound'), (('and', 'Python'), 'cc'), (('Python', 'Science'), 'conj'), (('‹#›', 'Prof.'), 'list'), (('Using', '‹#›'), 'acl'), (('the', 'Ecosystem'), 'det'), (('Python', 'Ecosystem'), 'compound'), (('Ecosystem', 'Using'), 'obj'), (('for', 'Science'), 'case'), (('Data', 'Science'), 'compound'), (('Science', 'Ecosystem'), 'nmod')]

 Named Entities are: 
>> [('3150713', 'CARDINAL'), ('02', 'CARDINAL')]

========================== Sentence 61 ===========================

 We need to load certain libraries in order to perform specific data science task in python. 

Tokens are: 
>> ['We', 'need', 'to', 'load', 'certain', 'libraries', 'in', 'order', 'to', 'perform', 'specific', 'data', 'science', 'task', 'in', 'python', '.'] 

 UPOS tags are: 
>> [('We', 'PRON'), ('need', 'VERB'), ('to', 'PART'), ('load', 'VERB'), ('certain', 'ADJ'), ('libraries', 'NOUN'), ('in', 'ADP'), ('order', 'NOUN'), ('to', 'PART'), ('perform', 'VERB'), ('specific', 'ADJ'), ('data', 'NOUN'), ('science', 'NOUN'), ('task', 'NOUN'), ('in', 'ADP'), ('python', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('We', 'PRP'), ('need', 'VBP'), ('to', 'TO'), ('load', 'VB'), ('certain', 'JJ'), ('libraries', 'NNS'), ('in', 'IN'), ('order', 'NN'), ('to', 'TO'), ('perform', 'VB'), ('specific', 'JJ'), ('data', 'NNS'), ('science', 'NN'), ('task', 'NN'), ('in', 'IN'), ('python', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('We', 'we'), ('need', 'need'), ('to', 'to'), ('load', 'load'), ('certain', 'certain'), ('libraries', 'library'), ('in', 'in'), ('order', 'order'), ('to', 'to'), ('perform', 'perform'), ('specific', 'specific'), ('data', 'datum'), ('science', 'science'), ('task', 'task'), ('in', 'in'), ('python', 'python'), ('.', '.')] 

 Dependency tags are: 
>> [(('We', 'need'), 'nsubj'), (('need', 'root'), 'root'), (('to', 'load'), 'mark'), (('load', 'need'), 'xcomp'), (('certain', 'libraries'), 'amod'), (('libraries', 'load'), 'obj'), (('in', 'perform'), 'mark'), (('order', 'in'), 'fixed'), (('to', 'perform'), 'mark'), (('perform', 'load'), 'advcl'), (('specific', 'task'), 'amod'), (('data', 'science'), 'compound'), (('science', 'task'), 'compound'), (('task', 'perform'), 'obj'), (('in', 'python'), 'case'), (('python', 'perform'), 'obl'), (('.', 'need'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 62 ===========================

 Following are the list of libraries which we are going to use in this subject. 

Tokens are: 
>> ['Following', 'are', 'the', 'list', 'of', 'libraries', 'which', 'we', 'are', 'going', 'to', 'use', 'in', 'this', 'subject', '.'] 

 UPOS tags are: 
>> [('Following', 'VERB'), ('are', 'AUX'), ('the', 'DET'), ('list', 'NOUN'), ('of', 'ADP'), ('libraries', 'NOUN'), ('which', 'PRON'), ('we', 'PRON'), ('are', 'AUX'), ('going', 'VERB'), ('to', 'PART'), ('use', 'VERB'), ('in', 'ADP'), ('this', 'DET'), ('subject', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Following', 'VBG'), ('are', 'VBP'), ('the', 'DT'), ('list', 'NN'), ('of', 'IN'), ('libraries', 'NNS'), ('which', 'WDT'), ('we', 'PRP'), ('are', 'VBP'), ('going', 'VBG'), ('to', 'TO'), ('use', 'VB'), ('in', 'IN'), ('this', 'DT'), ('subject', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('Following', 'follow'), ('are', 'be'), ('the', 'the'), ('list', 'list'), ('of', 'of'), ('libraries', 'library'), ('which', 'which'), ('we', 'we'), ('are', 'be'), ('going', 'go'), ('to', 'to'), ('use', 'use'), ('in', 'in'), ('this', 'this'), ('subject', 'subject'), ('.', '.')] 

 Dependency tags are: 
>> [(('Following', 'root'), 'root'), (('are', 'Following'), 'cop'), (('the', 'list'), 'det'), (('list', 'Following'), 'nsubj'), (('of', 'libraries'), 'case'), (('libraries', 'list'), 'nmod'), (('which', 'going'), 'obj'), (('we', 'going'), 'nsubj'), (('are', 'going'), 'aux'), (('going', 'libraries'), 'acl:relcl'), (('to', 'use'), 'mark'), (('use', 'going'), 'xcomp'), (('in', 'subject'), 'case'), (('this', 'subject'), 'det'), (('subject', 'use'), 'obl'), (('.', 'Following'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 63 ===========================

 Performing fundamental scientific computing using NumPy Performing data analysis using pandas Plotting the data using matplotlib Accessing scientific tools using SciPy Implementing machine learning using Scikit-learn Going for deep learning with Keras and TensorFlow Creating graphs with NetworkX Parsing HTML documents using Beautiful Soup     Prof. Arjun V. Bala #3150713 (PDS)      Unit 02 – Data Science and Python ‹#›  1) NumPy NumPy is used to perform fundamental scientific computing. 

Tokens are: 
>> ['Performing', 'fundamental', 'scientific', 'computing', 'using', 'NumPy', 'Performing', 'data', 'analysis', 'using', 'pandas', 'Plotting', 'the', 'data', 'using', 'matplotlib', 'Accessing', 'scientific', 'tools', 'using', 'SciPy', 'Implementing', 'machine', 'learning', 'using', 'Scikit-learn', 'Going', 'for', 'deep', 'learning', 'with', 'Keras', 'and', 'TensorFlow', 'Creating', 'graphs', 'with', 'NetworkX', 'Parsing', 'HTML', 'documents', 'using', 'Beautiful', 'Soup', 'Prof.', 'Arjun', 'V.', 'Bala', '#', '3150713', '(', 'PDS', ')', '\uf077', 'Unit', '02', '–', 'Data', 'Science', 'and', 'Python', '‹#', '›', '1', ')', 'NumPy', 'NumPy', 'is', 'used', 'to', 'perform', 'fundamental', 'scientific', 'computing', '.'] 

 UPOS tags are: 
>> [('Performing', 'VERB'), ('fundamental', 'ADJ'), ('scientific', 'ADJ'), ('computing', 'NOUN'), ('using', 'VERB'), ('NumPy', 'PROPN'), ('Performing', 'VERB'), ('data', 'NOUN'), ('analysis', 'NOUN'), ('using', 'VERB'), ('pandas', 'NOUN'), ('Plotting', 'VERB'), ('the', 'DET'), ('data', 'NOUN'), ('using', 'VERB'), ('matplotlib', 'NOUN'), ('Accessing', 'VERB'), ('scientific', 'ADJ'), ('tools', 'NOUN'), ('using', 'VERB'), ('SciPy', 'PROPN'), ('Implementing', 'VERB'), ('machine', 'NOUN'), ('learning', 'NOUN'), ('using', 'VERB'), ('Scikit-learn', 'ADJ'), ('Going', 'VERB'), ('for', 'ADP'), ('deep', 'ADJ'), ('learning', 'NOUN'), ('with', 'ADP'), ('Keras', 'PROPN'), ('and', 'CCONJ'), ('TensorFlow', 'PROPN'), ('Creating', 'VERB'), ('graphs', 'NOUN'), ('with', 'ADP'), ('NetworkX', 'PROPN'), ('Parsing', 'PROPN'), ('HTML', 'PROPN'), ('documents', 'NOUN'), ('using', 'VERB'), ('Beautiful', 'ADJ'), ('Soup', 'PROPN'), ('Prof.', 'PROPN'), ('Arjun', 'PROPN'), ('V.', 'PROPN'), ('Bala', 'PROPN'), ('#', 'SYM'), ('3150713', 'NUM'), ('(', 'PUNCT'), ('PDS', 'PROPN'), (')', 'PUNCT'), ('\uf077', 'PUNCT'), ('Unit', 'NOUN'), ('02', 'NUM'), ('–', 'SYM'), ('Data', 'PROPN'), ('Science', 'PROPN'), ('and', 'CCONJ'), ('Python', 'PROPN'), ('‹#', 'PROPN'), ('›', 'PUNCT'), ('1', 'NUM'), (')', 'PUNCT'), ('NumPy', 'PROPN'), ('NumPy', 'PROPN'), ('is', 'AUX'), ('used', 'VERB'), ('to', 'PART'), ('perform', 'VERB'), ('fundamental', 'ADJ'), ('scientific', 'ADJ'), ('computing', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Performing', 'VBG'), ('fundamental', 'JJ'), ('scientific', 'JJ'), ('computing', 'NN'), ('using', 'VBG'), ('NumPy', 'NNP'), ('Performing', 'VBG'), ('data', 'NNS'), ('analysis', 'NN'), ('using', 'VBG'), ('pandas', 'NNS'), ('Plotting', 'VBG'), ('the', 'DT'), ('data', 'NNS'), ('using', 'VBG'), ('matplotlib', 'NN'), ('Accessing', 'VBG'), ('scientific', 'JJ'), ('tools', 'NNS'), ('using', 'VBG'), ('SciPy', 'NNP'), ('Implementing', 'VBG'), ('machine', 'NN'), ('learning', 'NN'), ('using', 'VBG'), ('Scikit-learn', 'JJ'), ('Going', 'VBG'), ('for', 'IN'), ('deep', 'JJ'), ('learning', 'NN'), ('with', 'IN'), ('Keras', 'NNP'), ('and', 'CC'), ('TensorFlow', 'NNP'), ('Creating', 'VBG'), ('graphs', 'NNS'), ('with', 'IN'), ('NetworkX', 'NNP'), ('Parsing', 'NNP'), ('HTML', 'NNP'), ('documents', 'NNS'), ('using', 'VBG'), ('Beautiful', 'NNP'), ('Soup', 'NNP'), ('Prof.', 'NNP'), ('Arjun', 'NNP'), ('V.', 'NNP'), ('Bala', 'NNP'), ('#', 'NN'), ('3150713', 'CD'), ('(', '-LRB-'), ('PDS', 'NNP'), (')', '-RRB-'), ('\uf077', ','), ('Unit', 'NN'), ('02', 'CD'), ('–', 'SYM'), ('Data', 'NNP'), ('Science', 'NNP'), ('and', 'CC'), ('Python', 'NNP'), ('‹#', 'NNP'), ('›', ':'), ('1', 'CD'), (')', '-RRB-'), ('NumPy', 'NNP'), ('NumPy', 'NNP'), ('is', 'VBZ'), ('used', 'VBN'), ('to', 'TO'), ('perform', 'VB'), ('fundamental', 'JJ'), ('scientific', 'JJ'), ('computing', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('Performing', 'perform'), ('fundamental', 'fundamental'), ('scientific', 'scientific'), ('computing', 'computing'), ('using', 'use'), ('NumPy', 'NumPy'), ('Performing', 'perform'), ('data', 'datum'), ('analysis', 'analysis'), ('using', 'use'), ('pandas', 'panda'), ('Plotting', 'plot'), ('the', 'the'), ('data', 'datum'), ('using', 'use'), ('matplotlib', 'matplotlib'), ('Accessing', 'access'), ('scientific', 'scientific'), ('tools', 'tool'), ('using', 'use'), ('SciPy', 'SciPy'), ('Implementing', 'implement'), ('machine', 'machine'), ('learning', 'learning'), ('using', 'use'), ('Scikit-learn', 'scikit-learn'), ('Going', 'go'), ('for', 'for'), ('deep', 'deep'), ('learning', 'learning'), ('with', 'with'), ('Keras', 'Keras'), ('and', 'and'), ('TensorFlow', 'TensorFlow'), ('Creating', 'create'), ('graphs', 'graph'), ('with', 'with'), ('NetworkX', 'NetworkX'), ('Parsing', 'Parsing'), ('HTML', 'HTML'), ('documents', 'document'), ('using', 'use'), ('Beautiful', 'beautiful'), ('Soup', 'Soup'), ('Prof.', 'Prof.'), ('Arjun', 'Arjun'), ('V.', 'V.'), ('Bala', 'Bala'), ('#', '#'), ('3150713', '3150713'), ('(', '('), ('PDS', 'PDS'), (')', ')'), ('\uf077', "''"), ('Unit', 'unit'), ('02', '02'), ('–', '-'), ('Data', 'data'), ('Science', 'Science'), ('and', 'and'), ('Python', 'python'), ('‹#', '‹#'), ('›', "''"), ('1', '1'), (')', ')'), ('NumPy', 'NumPy'), ('NumPy', 'NumPy'), ('is', 'be'), ('used', 'use'), ('to', 'to'), ('perform', 'perform'), ('fundamental', 'fundamental'), ('scientific', 'scientific'), ('computing', 'computing'), ('.', '.')] 

 Dependency tags are: 
>> [(('Performing', 'used'), 'advcl'), (('fundamental', 'computing'), 'amod'), (('scientific', 'computing'), 'amod'), (('computing', 'Performing'), 'obj'), (('using', 'computing'), 'acl'), (('NumPy', 'using'), 'obj'), (('Performing', 'using'), 'xcomp'), (('data', 'analysis'), 'compound'), (('analysis', 'Performing'), 'obj'), (('using', 'using'), 'advcl'), (('pandas', 'using'), 'obj'), (('Plotting', 'pandas'), 'acl'), (('the', 'data'), 'det'), (('data', 'Plotting'), 'obj'), (('using', 'Plotting'), 'advcl'), (('matplotlib', 'using'), 'obj'), (('Accessing', 'matplotlib'), 'acl'), (('scientific', 'tools'), 'amod'), (('tools', 'Accessing'), 'obj'), (('using', 'Accessing'), 'advcl'), (('SciPy', 'using'), 'obj'), (('Implementing', 'using'), 'advcl'), (('machine', 'learning'), 'compound'), (('learning', 'Implementing'), 'obj'), (('using', 'Implementing'), 'advcl'), (('Scikit-learn', 'Going'), 'compound'), (('Going', 'using'), 'xcomp'), (('for', 'learning'), 'case'), (('deep', 'learning'), 'amod'), (('learning', 'Going'), 'obl'), (('with', 'Keras'), 'case'), (('Keras', 'learning'), 'nmod'), (('and', 'TensorFlow'), 'cc'), (('TensorFlow', 'Keras'), 'conj'), (('Creating', 'using'), 'conj'), (('graphs', 'Creating'), 'obj'), (('with', 'documents'), 'case'), (('NetworkX', 'documents'), 'compound'), (('Parsing', 'HTML'), 'compound'), (('HTML', 'documents'), 'compound'), (('documents', 'Creating'), 'obl'), (('using', 'documents'), 'acl'), (('Beautiful', 'Soup'), 'amod'), (('Soup', 'Prof.'), 'compound'), (('Prof.', 'using'), 'obj'), (('Arjun', 'Prof.'), 'flat'), (('V.', 'Prof.'), 'flat'), (('Bala', 'Prof.'), 'flat'), (('#', 'Prof.'), 'compound'), (('3150713', 'Prof.'), 'nummod'), (('(', 'PDS'), 'punct'), (('PDS', 'Prof.'), 'appos'), ((')', 'PDS'), 'punct'), (('\uf077', 'PDS'), 'punct'), (('Unit', 'Prof.'), 'appos'), (('02', 'Unit'), 'nummod'), (('–', 'Science'), 'case'), (('Data', 'Science'), 'compound'), (('Science', 'Unit'), 'nmod'), (('and', 'Python'), 'cc'), (('Python', 'Science'), 'conj'), (('‹#', 'Python'), 'flat'), (('›', '1'), 'punct'), (('1', 'Python'), 'dep'), ((')', '1'), 'punct'), (('NumPy', 'used'), 'nsubj:pass'), (('NumPy', 'used'), 'nsubj:pass'), (('is', 'used'), 'aux:pass'), (('used', 'root'), 'root'), (('to', 'perform'), 'mark'), (('perform', 'used'), 'xcomp'), (('fundamental', 'computing'), 'amod'), (('scientific', 'computing'), 'amod'), (('computing', 'perform'), 'obj'), (('.', 'used'), 'punct')]

 Named Entities are: 
>> [('NumPy Performing', 'ORG'), ('SciPy Implementing', 'PRODUCT'), ('Scikit-learn Going for deep learning with Keras', 'WORK_OF_ART'), ('Beautiful Soup     Prof. Arjun V. Bala #3150713', 'WORK_OF_ART'), ('02', 'CARDINAL'), ('1', 'CARDINAL'), ('NumPy NumPy', 'ORG')]

========================== Sentence 64 ===========================

 NumPy library provides the means for performing n-dimensional array manipulation, which is critical for data science work. 

Tokens are: 
>> ['NumPy', 'library', 'provides', 'the', 'means', 'for', 'performing', 'n-dimensional', 'array', 'manipulation', ',', 'which', 'is', 'critical', 'for', 'data', 'science', 'work', '.'] 

 UPOS tags are: 
>> [('NumPy', 'PROPN'), ('library', 'NOUN'), ('provides', 'VERB'), ('the', 'DET'), ('means', 'NOUN'), ('for', 'SCONJ'), ('performing', 'VERB'), ('n-dimensional', 'ADJ'), ('array', 'NOUN'), ('manipulation', 'NOUN'), (',', 'PUNCT'), ('which', 'PRON'), ('is', 'AUX'), ('critical', 'ADJ'), ('for', 'ADP'), ('data', 'NOUN'), ('science', 'NOUN'), ('work', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('NumPy', 'NNP'), ('library', 'NN'), ('provides', 'VBZ'), ('the', 'DT'), ('means', 'NNS'), ('for', 'IN'), ('performing', 'VBG'), ('n-dimensional', 'JJ'), ('array', 'NN'), ('manipulation', 'NN'), (',', ','), ('which', 'WDT'), ('is', 'VBZ'), ('critical', 'JJ'), ('for', 'IN'), ('data', 'NN'), ('science', 'NN'), ('work', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('NumPy', 'NumPy'), ('library', 'library'), ('provides', 'provide'), ('the', 'the'), ('means', 'means'), ('for', 'for'), ('performing', 'perform'), ('n-dimensional', 'n-dimensional'), ('array', 'array'), ('manipulation', 'manipulation'), (',', ','), ('which', 'which'), ('is', 'be'), ('critical', 'critical'), ('for', 'for'), ('data', 'datum'), ('science', 'science'), ('work', 'work'), ('.', '.')] 

 Dependency tags are: 
>> [(('NumPy', 'library'), 'compound'), (('library', 'provides'), 'nsubj'), (('provides', 'root'), 'root'), (('the', 'means'), 'det'), (('means', 'provides'), 'obj'), (('for', 'performing'), 'mark'), (('performing', 'means'), 'acl'), (('n-dimensional', 'manipulation'), 'amod'), (('array', 'manipulation'), 'compound'), (('manipulation', 'performing'), 'obj'), ((',', 'manipulation'), 'punct'), (('which', 'critical'), 'nsubj'), (('is', 'critical'), 'cop'), (('critical', 'manipulation'), 'acl:relcl'), (('for', 'work'), 'case'), (('data', 'work'), 'compound'), (('science', 'work'), 'compound'), (('work', 'critical'), 'obl'), (('.', 'provides'), 'punct')]

 Named Entities are: 
>> [('NumPy', 'ORG')]

========================== Sentence 65 ===========================

 NumPy provides functions that include support for linear algebra, Fourier transformation, random-number generation and many more.. 

Tokens are: 
>> ['NumPy', 'provides', 'functions', 'that', 'include', 'support', 'for', 'linear', 'algebra', ',', 'Fourier', 'transformation', ',', 'random-number', 'generation', 'and', 'many', 'more', '..'] 

 UPOS tags are: 
>> [('NumPy', 'PROPN'), ('provides', 'VERB'), ('functions', 'NOUN'), ('that', 'PRON'), ('include', 'VERB'), ('support', 'NOUN'), ('for', 'ADP'), ('linear', 'ADJ'), ('algebra', 'NOUN'), (',', 'PUNCT'), ('Fourier', 'NOUN'), ('transformation', 'NOUN'), (',', 'PUNCT'), ('random-number', 'NOUN'), ('generation', 'NOUN'), ('and', 'CCONJ'), ('many', 'ADJ'), ('more', 'ADV'), ('..', 'PUNCT')] 

 XPOS tags are: 
>> [('NumPy', 'NNP'), ('provides', 'VBZ'), ('functions', 'NNS'), ('that', 'WDT'), ('include', 'VBP'), ('support', 'NN'), ('for', 'IN'), ('linear', 'JJ'), ('algebra', 'NN'), (',', ','), ('Fourier', 'NN'), ('transformation', 'NN'), (',', ','), ('random-number', 'NN'), ('generation', 'NN'), ('and', 'CC'), ('many', 'JJ'), ('more', 'RBR'), ('..', '.')] 

 Lemmas are: 
>> [('NumPy', 'NumPy'), ('provides', 'provide'), ('functions', 'function'), ('that', 'that'), ('include', 'include'), ('support', 'support'), ('for', 'for'), ('linear', 'linear'), ('algebra', 'algebra'), (',', ','), ('Fourier', 'fourier'), ('transformation', 'transformation'), (',', ','), ('random-number', 'random-number'), ('generation', 'generation'), ('and', 'and'), ('many', 'many'), ('more', 'more'), ('..', '..')] 

 Dependency tags are: 
>> [(('NumPy', 'provides'), 'nsubj'), (('provides', 'root'), 'root'), (('functions', 'provides'), 'obj'), (('that', 'include'), 'nsubj'), (('include', 'functions'), 'acl:relcl'), (('support', 'include'), 'obj'), (('for', 'algebra'), 'case'), (('linear', 'algebra'), 'amod'), (('algebra', 'support'), 'nmod'), ((',', 'transformation'), 'punct'), (('Fourier', 'transformation'), 'compound'), (('transformation', 'algebra'), 'conj'), ((',', 'generation'), 'punct'), (('random-number', 'generation'), 'compound'), (('generation', 'algebra'), 'conj'), (('and', 'more'), 'cc'), (('many', 'more'), 'amod'), (('more', 'algebra'), 'conj'), (('..', 'provides'), 'punct')]

 Named Entities are: 
>> [('NumPy', 'ORG')]

========================== Sentence 66 ===========================

 Explore listing of functions at https://numpy.org/doc/stable/reference/routines.html      Prof. Arjun V. Bala #3150713 (PDS)      Unit 02 – Data Science and Python ‹#›  2) pandas pandas is a fast, powerful, flexible and easy to use open source data analysis and manipulation tool, built on top of the Python programming language. 

Tokens are: 
>> ['Explore', 'listing', 'of', 'functions', 'at', 'https://numpy.org/doc/stable/reference/routines.html', 'Prof.', 'Arjun', 'V.', 'Bala', '#', '3150713', '(', 'PDS', ')', '\uf077', 'Unit', '02', '–', 'Data', 'Science', 'and', 'Python', '‹#›', '2', ')', 'pandas', 'pandas', 'is', 'a', 'fast', ',', 'powerful', ',', 'flexible', 'and', 'easy', 'to', 'use', 'open', 'source', 'data', 'analysis', 'and', 'manipulation', 'tool', ',', 'built', 'on', 'top', 'of', 'the', 'Python', 'programming', 'language', '.'] 

 UPOS tags are: 
>> [('Explore', 'VERB'), ('listing', 'NOUN'), ('of', 'ADP'), ('functions', 'NOUN'), ('at', 'ADP'), ('https://numpy.org/doc/stable/reference/routines.html', 'X'), ('Prof.', 'PROPN'), ('Arjun', 'PROPN'), ('V.', 'PROPN'), ('Bala', 'PROPN'), ('#', 'SYM'), ('3150713', 'NUM'), ('(', 'PUNCT'), ('PDS', 'PROPN'), (')', 'PUNCT'), ('\uf077', 'PUNCT'), ('Unit', 'NOUN'), ('02', 'NUM'), ('–', 'PUNCT'), ('Data', 'NOUN'), ('Science', 'PROPN'), ('and', 'CCONJ'), ('Python', 'PROPN'), ('‹#›', 'PROPN'), ('2', 'NUM'), (')', 'PUNCT'), ('pandas', 'NOUN'), ('pandas', 'NOUN'), ('is', 'AUX'), ('a', 'DET'), ('fast', 'ADJ'), (',', 'PUNCT'), ('powerful', 'ADJ'), (',', 'PUNCT'), ('flexible', 'ADJ'), ('and', 'CCONJ'), ('easy', 'ADJ'), ('to', 'PART'), ('use', 'VERB'), ('open', 'ADJ'), ('source', 'NOUN'), ('data', 'NOUN'), ('analysis', 'NOUN'), ('and', 'CCONJ'), ('manipulation', 'NOUN'), ('tool', 'NOUN'), (',', 'PUNCT'), ('built', 'VERB'), ('on', 'ADP'), ('top', 'NOUN'), ('of', 'ADP'), ('the', 'DET'), ('Python', 'PROPN'), ('programming', 'NOUN'), ('language', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Explore', 'VB'), ('listing', 'NN'), ('of', 'IN'), ('functions', 'NNS'), ('at', 'IN'), ('https://numpy.org/doc/stable/reference/routines.html', 'ADD'), ('Prof.', 'NNP'), ('Arjun', 'NNP'), ('V.', 'NNP'), ('Bala', 'NNP'), ('#', 'NN'), ('3150713', 'CD'), ('(', '-LRB-'), ('PDS', 'NNP'), (')', '-RRB-'), ('\uf077', '-LRB-'), ('Unit', 'NN'), ('02', 'CD'), ('–', ':'), ('Data', 'NN'), ('Science', 'NNP'), ('and', 'CC'), ('Python', 'NNP'), ('‹#›', 'NNP'), ('2', 'CD'), (')', '-RRB-'), ('pandas', 'NNS'), ('pandas', 'NNS'), ('is', 'VBZ'), ('a', 'DT'), ('fast', 'JJ'), (',', ','), ('powerful', 'JJ'), (',', ','), ('flexible', 'JJ'), ('and', 'CC'), ('easy', 'JJ'), ('to', 'TO'), ('use', 'VB'), ('open', 'JJ'), ('source', 'NN'), ('data', 'NN'), ('analysis', 'NN'), ('and', 'CC'), ('manipulation', 'NN'), ('tool', 'NN'), (',', ','), ('built', 'VBN'), ('on', 'IN'), ('top', 'NN'), ('of', 'IN'), ('the', 'DT'), ('Python', 'NNP'), ('programming', 'NN'), ('language', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('Explore', 'explore'), ('listing', 'listing'), ('of', 'of'), ('functions', 'function'), ('at', 'at'), ('https://numpy.org/doc/stable/reference/routines.html', 'https://numpy.org/doc/stable/reference/routines.html'), ('Prof.', 'Prof.'), ('Arjun', 'Arjun'), ('V.', 'V.'), ('Bala', 'Bala'), ('#', '#'), ('3150713', '3150713'), ('(', '('), ('PDS', 'PDS'), (')', ')'), ('\uf077', "''"), ('Unit', 'unit'), ('02', '02'), ('–', '-'), ('Data', 'data'), ('Science', 'Science'), ('and', 'and'), ('Python', 'python'), ('‹#›', '‹#›'), ('2', '2'), (')', ')'), ('pandas', 'panda'), ('pandas', 'panda'), ('is', 'be'), ('a', 'a'), ('fast', 'fast'), (',', ','), ('powerful', 'powerful'), (',', ','), ('flexible', 'flexible'), ('and', 'and'), ('easy', 'easy'), ('to', 'to'), ('use', 'use'), ('open', 'open'), ('source', 'source'), ('data', 'datum'), ('analysis', 'analysis'), ('and', 'and'), ('manipulation', 'manipulation'), ('tool', 'tool'), (',', ','), ('built', 'build'), ('on', 'on'), ('top', 'top'), ('of', 'of'), ('the', 'the'), ('Python', 'python'), ('programming', 'programming'), ('language', 'language'), ('.', '.')] 

 Dependency tags are: 
>> [(('Explore', 'root'), 'root'), (('listing', 'Explore'), 'obj'), (('of', 'functions'), 'case'), (('functions', 'listing'), 'nmod'), (('at', 'https://numpy.org/doc/stable/reference/routines.html'), 'case'), (('https://numpy.org/doc/stable/reference/routines.html', 'listing'), 'nmod'), (('Prof.', 'https://numpy.org/doc/stable/reference/routines.html'), 'flat'), (('Arjun', 'Prof.'), 'flat'), (('V.', 'Prof.'), 'flat'), (('Bala', 'Prof.'), 'flat'), (('#', 'Prof.'), 'flat'), (('3150713', 'Prof.'), 'flat'), (('(', 'PDS'), 'punct'), (('PDS', 'Prof.'), 'appos'), ((')', 'PDS'), 'punct'), (('\uf077', 'Unit'), 'punct'), (('Unit', 'Prof.'), 'appos'), (('02', 'Unit'), 'dep'), (('–', 'Science'), 'punct'), (('Data', 'Science'), 'compound'), (('Science', 'Unit'), 'appos'), (('and', 'Python'), 'cc'), (('Python', 'Science'), 'conj'), (('‹#›', 'Science'), 'conj'), (('2', '‹#›'), 'dep'), ((')', 'Unit'), 'punct'), (('pandas', 'pandas'), 'compound'), (('pandas', 'Explore'), 'obj'), (('is', 'fast'), 'cop'), (('a', 'fast'), 'det'), (('fast', 'pandas'), 'amod'), ((',', 'powerful'), 'punct'), (('powerful', 'fast'), 'conj'), ((',', 'flexible'), 'punct'), (('flexible', 'fast'), 'conj'), (('and', 'easy'), 'cc'), (('easy', 'fast'), 'conj'), (('to', 'use'), 'mark'), (('use', 'Explore'), 'advcl'), (('open', 'analysis'), 'amod'), (('source', 'data'), 'compound'), (('data', 'analysis'), 'compound'), (('analysis', 'use'), 'obj'), (('and', 'tool'), 'cc'), (('manipulation', 'tool'), 'compound'), (('tool', 'analysis'), 'conj'), ((',', 'built'), 'punct'), (('built', 'analysis'), 'acl'), (('on', 'top'), 'case'), (('top', 'built'), 'obl'), (('of', 'language'), 'case'), (('the', 'language'), 'det'), (('Python', 'language'), 'compound'), (('programming', 'language'), 'compound'), (('language', 'top'), 'nmod'), (('.', 'Explore'), 'punct')]

 Named Entities are: 
>> [('3150713', 'CARDINAL'), ('02', 'CARDINAL'), ('2', 'CARDINAL'), ('Python', 'LANGUAGE')]

========================== Sentence 67 ===========================

 it offers data structures and operations for manipulating numerical tables and time series. 

Tokens are: 
>> ['it', 'offers', 'data', 'structures', 'and', 'operations', 'for', 'manipulating', 'numerical', 'tables', 'and', 'time', 'series', '.'] 

 UPOS tags are: 
>> [('it', 'PRON'), ('offers', 'VERB'), ('data', 'NOUN'), ('structures', 'NOUN'), ('and', 'CCONJ'), ('operations', 'NOUN'), ('for', 'SCONJ'), ('manipulating', 'VERB'), ('numerical', 'ADJ'), ('tables', 'NOUN'), ('and', 'CCONJ'), ('time', 'NOUN'), ('series', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('it', 'PRP'), ('offers', 'VBZ'), ('data', 'NN'), ('structures', 'NNS'), ('and', 'CC'), ('operations', 'NNS'), ('for', 'IN'), ('manipulating', 'VBG'), ('numerical', 'JJ'), ('tables', 'NNS'), ('and', 'CC'), ('time', 'NN'), ('series', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('it', 'it'), ('offers', 'offer'), ('data', 'datum'), ('structures', 'structure'), ('and', 'and'), ('operations', 'operation'), ('for', 'for'), ('manipulating', 'manipulate'), ('numerical', 'numerical'), ('tables', 'table'), ('and', 'and'), ('time', 'time'), ('series', 'series'), ('.', '.')] 

 Dependency tags are: 
>> [(('it', 'offers'), 'nsubj'), (('offers', 'root'), 'root'), (('data', 'structures'), 'compound'), (('structures', 'offers'), 'obj'), (('and', 'operations'), 'cc'), (('operations', 'structures'), 'conj'), (('for', 'manipulating'), 'mark'), (('manipulating', 'offers'), 'advcl'), (('numerical', 'tables'), 'amod'), (('tables', 'manipulating'), 'obj'), (('and', 'series'), 'cc'), (('time', 'series'), 'compound'), (('series', 'tables'), 'conj'), (('.', 'offers'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 68 ===========================

 The library is optimized to perform data science tasks especially fast and efficiently. 

Tokens are: 
>> ['The', 'library', 'is', 'optimized', 'to', 'perform', 'data', 'science', 'tasks', 'especially', 'fast', 'and', 'efficiently', '.'] 

 UPOS tags are: 
>> [('The', 'DET'), ('library', 'NOUN'), ('is', 'AUX'), ('optimized', 'VERB'), ('to', 'PART'), ('perform', 'VERB'), ('data', 'NOUN'), ('science', 'NOUN'), ('tasks', 'NOUN'), ('especially', 'ADV'), ('fast', 'ADV'), ('and', 'CCONJ'), ('efficiently', 'ADV'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('The', 'DT'), ('library', 'NN'), ('is', 'VBZ'), ('optimized', 'VBN'), ('to', 'TO'), ('perform', 'VB'), ('data', 'NN'), ('science', 'NN'), ('tasks', 'NNS'), ('especially', 'RB'), ('fast', 'RB'), ('and', 'CC'), ('efficiently', 'RB'), ('.', '.')] 

 Lemmas are: 
>> [('The', 'the'), ('library', 'library'), ('is', 'be'), ('optimized', 'optimize'), ('to', 'to'), ('perform', 'perform'), ('data', 'datum'), ('science', 'science'), ('tasks', 'task'), ('especially', 'especially'), ('fast', 'fast'), ('and', 'and'), ('efficiently', 'efficiently'), ('.', '.')] 

 Dependency tags are: 
>> [(('The', 'library'), 'det'), (('library', 'optimized'), 'nsubj:pass'), (('is', 'optimized'), 'aux:pass'), (('optimized', 'root'), 'root'), (('to', 'perform'), 'mark'), (('perform', 'optimized'), 'xcomp'), (('data', 'tasks'), 'compound'), (('science', 'tasks'), 'compound'), (('tasks', 'perform'), 'obj'), (('especially', 'fast'), 'advmod'), (('fast', 'perform'), 'advmod'), (('and', 'efficiently'), 'cc'), (('efficiently', 'fast'), 'conj'), (('.', 'optimized'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 69 ===========================

 The basic principle behind pandas is to provide data analysis and modelling support for Python that is similar to other languages such as R.     Prof. Arjun V. Bala #3150713 (PDS)      Unit 02 – Data Science and Python ‹#›  3) matplotlib 

Tokens are: 
>> ['The', 'basic', 'principle', 'behind', 'pandas', 'is', 'to', 'provide', 'data', 'analysis', 'and', 'modelling', 'support', 'for', 'Python', 'that', 'is', 'similar', 'to', 'other', 'languages', 'such', 'as', 'R.', 'Prof.', 'Arjun', 'V.', 'Bala', '#', '3150713', '(', 'PDS', ')', '\uf077', 'Unit', '02', '–', 'Data', 'Science', 'and', 'Python', '‹#', '›', '3', ')', 'matplotlib'] 

 UPOS tags are: 
>> [('The', 'DET'), ('basic', 'ADJ'), ('principle', 'NOUN'), ('behind', 'ADP'), ('pandas', 'NOUN'), ('is', 'VERB'), ('to', 'PART'), ('provide', 'VERB'), ('data', 'NOUN'), ('analysis', 'NOUN'), ('and', 'CCONJ'), ('modelling', 'NOUN'), ('support', 'NOUN'), ('for', 'ADP'), ('Python', 'PROPN'), ('that', 'PRON'), ('is', 'AUX'), ('similar', 'ADJ'), ('to', 'ADP'), ('other', 'ADJ'), ('languages', 'NOUN'), ('such', 'ADJ'), ('as', 'ADP'), ('R.', 'PROPN'), ('Prof.', 'PROPN'), ('Arjun', 'PROPN'), ('V.', 'PROPN'), ('Bala', 'PROPN'), ('#', 'SYM'), ('3150713', 'NUM'), ('(', 'PUNCT'), ('PDS', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'PUNCT'), ('Unit', 'NOUN'), ('02', 'NUM'), ('–', 'SYM'), ('Data', 'NOUN'), ('Science', 'NOUN'), ('and', 'CCONJ'), ('Python', 'PROPN'), ('‹#', 'NOUN'), ('›', 'PUNCT'), ('3', 'NUM'), (')', 'PUNCT'), ('matplotlib', 'NOUN')] 

 XPOS tags are: 
>> [('The', 'DT'), ('basic', 'JJ'), ('principle', 'NN'), ('behind', 'IN'), ('pandas', 'NNS'), ('is', 'VBZ'), ('to', 'TO'), ('provide', 'VB'), ('data', 'NN'), ('analysis', 'NN'), ('and', 'CC'), ('modelling', 'NN'), ('support', 'NN'), ('for', 'IN'), ('Python', 'NNP'), ('that', 'WDT'), ('is', 'VBZ'), ('similar', 'JJ'), ('to', 'IN'), ('other', 'JJ'), ('languages', 'NNS'), ('such', 'JJ'), ('as', 'IN'), ('R.', 'NNP'), ('Prof.', 'NNP'), ('Arjun', 'NNP'), ('V.', 'NNP'), ('Bala', 'NNP'), ('#', 'NN'), ('3150713', 'CD'), ('(', '-LRB-'), ('PDS', 'NN'), (')', '-RRB-'), ('\uf077', ','), ('Unit', 'NN'), ('02', 'CD'), ('–', 'SYM'), ('Data', 'NN'), ('Science', 'NN'), ('and', 'CC'), ('Python', 'NNP'), ('‹#', 'NN'), ('›', '-LRB-'), ('3', 'CD'), (')', '-RRB-'), ('matplotlib', 'NN')] 

 Lemmas are: 
>> [('The', 'the'), ('basic', 'basic'), ('principle', 'principle'), ('behind', 'behind'), ('pandas', 'panda'), ('is', 'be'), ('to', 'to'), ('provide', 'provide'), ('data', 'datum'), ('analysis', 'analysis'), ('and', 'and'), ('modelling', 'modelling'), ('support', 'support'), ('for', 'for'), ('Python', 'python'), ('that', 'that'), ('is', 'be'), ('similar', 'similar'), ('to', 'to'), ('other', 'other'), ('languages', 'language'), ('such', 'such'), ('as', 'as'), ('R.', 'R.'), ('Prof.', 'Prof.'), ('Arjun', 'Arjun'), ('V.', 'V.'), ('Bala', 'Bala'), ('#', '#'), ('3150713', '3150713'), ('(', '('), ('PDS', 'pds'), (')', ')'), ('\uf077', "''"), ('Unit', 'unit'), ('02', '02'), ('–', '-'), ('Data', 'data'), ('Science', 'science'), ('and', 'and'), ('Python', 'python'), ('‹#', '‹#'), ('›', "''"), ('3', '3'), (')', ')'), ('matplotlib', 'matplotlib')] 

 Dependency tags are: 
>> [(('The', 'principle'), 'det'), (('basic', 'principle'), 'amod'), (('principle', 'provide'), 'nsubj'), (('behind', 'pandas'), 'case'), (('pandas', 'principle'), 'nmod'), (('is', 'provide'), 'cop'), (('to', 'provide'), 'mark'), (('provide', 'root'), 'root'), (('data', 'analysis'), 'compound'), (('analysis', 'provide'), 'obj'), (('and', 'support'), 'cc'), (('modelling', 'support'), 'compound'), (('support', 'analysis'), 'conj'), (('for', 'Python'), 'case'), (('Python', 'support'), 'nmod'), (('that', 'similar'), 'nsubj'), (('is', 'similar'), 'cop'), (('similar', 'analysis'), 'acl:relcl'), (('to', 'languages'), 'case'), (('other', 'languages'), 'amod'), (('languages', 'similar'), 'obl'), (('such', 'R.'), 'case'), (('as', 'such'), 'fixed'), (('R.', 'languages'), 'nmod'), (('Prof.', 'R.'), 'flat'), (('Arjun', 'R.'), 'flat'), (('V.', 'R.'), 'flat'), (('Bala', 'R.'), 'flat'), (('#', 'R.'), 'appos'), (('3150713', 'R.'), 'nummod'), (('(', 'PDS'), 'punct'), (('PDS', 'Unit'), 'appos'), ((')', 'PDS'), 'punct'), (('\uf077', 'PDS'), 'punct'), (('Unit', 'R.'), 'appos'), (('02', 'Unit'), 'nummod'), (('–', 'Science'), 'case'), (('Data', 'Science'), 'compound'), (('Science', 'Unit'), 'nmod'), (('and', 'Python'), 'cc'), (('Python', 'Science'), 'conj'), (('‹#', 'Unit'), 'conj'), (('›', '3'), 'punct'), (('3', '‹#'), 'appos'), ((')', '3'), 'punct'), (('matplotlib', 'Unit'), 'appos')]

 Named Entities are: 
>> [('Python', 'WORK_OF_ART'), ('3150713', 'CARDINAL')]

========================== Sentence 70 ===========================

 The matplotlib library gives a MATLAB like interface for creating data presentations of the analysis. 

Tokens are: 
>> ['The', 'matplotlib', 'library', 'gives', 'a', 'MATLAB', 'like', 'interface', 'for', 'creating', 'data', 'presentations', 'of', 'the', 'analysis', '.'] 

 UPOS tags are: 
>> [('The', 'DET'), ('matplotlib', 'NOUN'), ('library', 'NOUN'), ('gives', 'VERB'), ('a', 'DET'), ('MATLAB', 'NOUN'), ('like', 'ADP'), ('interface', 'NOUN'), ('for', 'SCONJ'), ('creating', 'VERB'), ('data', 'NOUN'), ('presentations', 'NOUN'), ('of', 'ADP'), ('the', 'DET'), ('analysis', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('The', 'DT'), ('matplotlib', 'NN'), ('library', 'NN'), ('gives', 'VBZ'), ('a', 'DT'), ('MATLAB', 'NN'), ('like', 'IN'), ('interface', 'NN'), ('for', 'IN'), ('creating', 'VBG'), ('data', 'NN'), ('presentations', 'NNS'), ('of', 'IN'), ('the', 'DT'), ('analysis', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('The', 'the'), ('matplotlib', 'matplotlib'), ('library', 'library'), ('gives', 'give'), ('a', 'a'), ('MATLAB', 'matlab'), ('like', 'like'), ('interface', 'interface'), ('for', 'for'), ('creating', 'create'), ('data', 'datum'), ('presentations', 'presentation'), ('of', 'of'), ('the', 'the'), ('analysis', 'analysis'), ('.', '.')] 

 Dependency tags are: 
>> [(('The', 'library'), 'det'), (('matplotlib', 'library'), 'compound'), (('library', 'gives'), 'nsubj'), (('gives', 'root'), 'root'), (('a', 'MATLAB'), 'det'), (('MATLAB', 'gives'), 'obj'), (('like', 'interface'), 'case'), (('interface', 'MATLAB'), 'nmod'), (('for', 'creating'), 'mark'), (('creating', 'interface'), 'acl'), (('data', 'presentations'), 'compound'), (('presentations', 'creating'), 'obj'), (('of', 'analysis'), 'case'), (('the', 'analysis'), 'det'), (('analysis', 'presentations'), 'nmod'), (('.', 'gives'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 71 ===========================

 The library is initially limited to 2-D output, but it still provide means to express analysis graphically. 

Tokens are: 
>> ['The', 'library', 'is', 'initially', 'limited', 'to', '2', '-', 'D', 'output', ',', 'but', 'it', 'still', 'provide', 'means', 'to', 'express', 'analysis', 'graphically', '.'] 

 UPOS tags are: 
>> [('The', 'DET'), ('library', 'NOUN'), ('is', 'AUX'), ('initially', 'ADV'), ('limited', 'VERB'), ('to', 'ADP'), ('2', 'NUM'), ('-', 'PUNCT'), ('D', 'NOUN'), ('output', 'NOUN'), (',', 'PUNCT'), ('but', 'CCONJ'), ('it', 'PRON'), ('still', 'ADV'), ('provide', 'VERB'), ('means', 'NOUN'), ('to', 'PART'), ('express', 'VERB'), ('analysis', 'NOUN'), ('graphically', 'ADV'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('The', 'DT'), ('library', 'NN'), ('is', 'VBZ'), ('initially', 'RB'), ('limited', 'VBN'), ('to', 'IN'), ('2', 'CD'), ('-', 'HYPH'), ('D', 'NN'), ('output', 'NN'), (',', ','), ('but', 'CC'), ('it', 'PRP'), ('still', 'RB'), ('provide', 'VBP'), ('means', 'NNS'), ('to', 'TO'), ('express', 'VB'), ('analysis', 'NN'), ('graphically', 'RB'), ('.', '.')] 

 Lemmas are: 
>> [('The', 'the'), ('library', 'library'), ('is', 'be'), ('initially', 'initially'), ('limited', 'limit'), ('to', 'to'), ('2', '2'), ('-', '-'), ('D', 'd'), ('output', 'output'), (',', ','), ('but', 'but'), ('it', 'it'), ('still', 'still'), ('provide', 'provide'), ('means', 'means'), ('to', 'to'), ('express', 'express'), ('analysis', 'analysis'), ('graphically', 'graphically'), ('.', '.')] 

 Dependency tags are: 
>> [(('The', 'library'), 'det'), (('library', 'limited'), 'nsubj:pass'), (('is', 'limited'), 'aux:pass'), (('initially', 'limited'), 'advmod'), (('limited', 'root'), 'root'), (('to', 'output'), 'case'), (('2', 'D'), 'nummod'), (('-', 'D'), 'punct'), (('D', 'output'), 'compound'), (('output', 'limited'), 'obl'), ((',', 'provide'), 'punct'), (('but', 'provide'), 'cc'), (('it', 'provide'), 'nsubj'), (('still', 'provide'), 'advmod'), (('provide', 'limited'), 'conj'), (('means', 'provide'), 'obj'), (('to', 'express'), 'mark'), (('express', 'means'), 'acl'), (('analysis', 'express'), 'obj'), (('graphically', 'express'), 'advmod'), (('.', 'limited'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 72 ===========================

 Without this library we can not create output that people outside the data science community could easily understand. 

Tokens are: 
>> ['Without', 'this', 'library', 'we', 'can', 'not', 'create', 'output', 'that', 'people', 'outside', 'the', 'data', 'science', 'community', 'could', 'easily', 'understand', '.'] 

 UPOS tags are: 
>> [('Without', 'ADP'), ('this', 'DET'), ('library', 'NOUN'), ('we', 'PRON'), ('can', 'AUX'), ('not', 'PART'), ('create', 'VERB'), ('output', 'NOUN'), ('that', 'SCONJ'), ('people', 'NOUN'), ('outside', 'ADP'), ('the', 'DET'), ('data', 'NOUN'), ('science', 'NOUN'), ('community', 'NOUN'), ('could', 'AUX'), ('easily', 'ADV'), ('understand', 'VERB'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Without', 'IN'), ('this', 'DT'), ('library', 'NN'), ('we', 'PRP'), ('can', 'MD'), ('not', 'RB'), ('create', 'VB'), ('output', 'NN'), ('that', 'IN'), ('people', 'NNS'), ('outside', 'IN'), ('the', 'DT'), ('data', 'NNS'), ('science', 'NN'), ('community', 'NN'), ('could', 'MD'), ('easily', 'RB'), ('understand', 'VB'), ('.', '.')] 

 Lemmas are: 
>> [('Without', 'without'), ('this', 'this'), ('library', 'library'), ('we', 'we'), ('can', 'can'), ('not', 'not'), ('create', 'create'), ('output', 'output'), ('that', 'that'), ('people', 'people'), ('outside', 'outside'), ('the', 'the'), ('data', 'datum'), ('science', 'science'), ('community', 'community'), ('could', 'could'), ('easily', 'easily'), ('understand', 'understand'), ('.', '.')] 

 Dependency tags are: 
>> [(('Without', 'library'), 'case'), (('this', 'library'), 'det'), (('library', 'create'), 'obl'), (('we', 'create'), 'nsubj'), (('can', 'create'), 'aux'), (('not', 'create'), 'advmod'), (('create', 'root'), 'root'), (('output', 'create'), 'obj'), (('that', 'understand'), 'mark'), (('people', 'understand'), 'nsubj'), (('outside', 'community'), 'case'), (('the', 'community'), 'det'), (('data', 'community'), 'compound'), (('science', 'community'), 'compound'), (('community', 'people'), 'nmod'), (('could', 'understand'), 'aux'), (('easily', 'understand'), 'advmod'), (('understand', 'output'), 'acl'), (('.', 'create'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 73 ===========================

 Prof. Arjun V. Bala #3150713 (PDS)      Unit 02 – Data Science and Python ‹#›  4) SciPy 

Tokens are: 
>> ['Prof.', 'Arjun', 'V.', 'Bala', '#', '3150713', '(', 'PDS', ')', '\uf077', 'Unit', '02', '–', 'Data', 'Science', 'and', 'Python', '‹#', '›', '4', ')', 'SciPy'] 

 UPOS tags are: 
>> [('Prof.', 'PROPN'), ('Arjun', 'PROPN'), ('V.', 'PROPN'), ('Bala', 'PROPN'), ('#', 'SYM'), ('3150713', 'NUM'), ('(', 'PUNCT'), ('PDS', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('02', 'NUM'), ('–', 'PUNCT'), ('Data', 'NOUN'), ('Science', 'NOUN'), ('and', 'CCONJ'), ('Python', 'PROPN'), ('‹#', 'NOUN'), ('›', 'PUNCT'), ('4', 'NUM'), (')', 'PUNCT'), ('SciPy', 'PROPN')] 

 XPOS tags are: 
>> [('Prof.', 'NNP'), ('Arjun', 'NNP'), ('V.', 'NNP'), ('Bala', 'NNP'), ('#', 'NN'), ('3150713', 'CD'), ('(', '-LRB-'), ('PDS', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('02', 'CD'), ('–', ':'), ('Data', 'NN'), ('Science', 'NN'), ('and', 'CC'), ('Python', 'NNP'), ('‹#', 'NN'), ('›', '-LRB-'), ('4', 'CD'), (')', '-RRB-'), ('SciPy', 'NNP')] 

 Lemmas are: 
>> [('Prof.', 'Prof.'), ('Arjun', 'Arjun'), ('V.', 'V.'), ('Bala', 'Bala'), ('#', '#'), ('3150713', '3150713'), ('(', '('), ('PDS', 'pds'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('02', '02'), ('–', '-'), ('Data', 'data'), ('Science', 'science'), ('and', 'and'), ('Python', 'python'), ('‹#', '‹#'), ('›', "''"), ('4', '4'), (')', ')'), ('SciPy', 'SciPy')] 

 Dependency tags are: 
>> [(('Prof.', 'root'), 'root'), (('Arjun', 'Prof.'), 'flat'), (('V.', 'Prof.'), 'flat'), (('Bala', 'Prof.'), 'flat'), (('#', 'Prof.'), 'list'), (('3150713', '#'), 'nummod'), (('(', 'PDS'), 'punct'), (('PDS', '#'), 'appos'), ((')', 'PDS'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', 'Prof.'), 'list'), (('02', 'Unit'), 'nummod'), (('–', 'Science'), 'punct'), (('Data', 'Science'), 'compound'), (('Science', 'Unit'), 'appos'), (('and', 'Python'), 'cc'), (('Python', 'Science'), 'conj'), (('‹#', 'Prof.'), 'list'), (('›', 'SciPy'), 'punct'), (('4', 'SciPy'), 'nummod'), ((')', 'SciPy'), 'punct'), (('SciPy', 'Prof.'), 'list')]

 Named Entities are: 
>> [('Arjun V. Bala', 'PERSON'), ('3150713', 'CARDINAL'), ('02', 'CARDINAL'), ('4', 'CARDINAL')]

========================== Sentence 74 ===========================

 The SciPy stack contains a host of other libraries that we can also download separately. 

Tokens are: 
>> ['The', 'SciPy', 'stack', 'contains', 'a', 'host', 'of', 'other', 'libraries', 'that', 'we', 'can', 'also', 'download', 'separately', '.'] 

 UPOS tags are: 
>> [('The', 'DET'), ('SciPy', 'PROPN'), ('stack', 'NOUN'), ('contains', 'VERB'), ('a', 'DET'), ('host', 'NOUN'), ('of', 'ADP'), ('other', 'ADJ'), ('libraries', 'NOUN'), ('that', 'PRON'), ('we', 'PRON'), ('can', 'AUX'), ('also', 'ADV'), ('download', 'VERB'), ('separately', 'ADV'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('The', 'DT'), ('SciPy', 'NNP'), ('stack', 'NN'), ('contains', 'VBZ'), ('a', 'DT'), ('host', 'NN'), ('of', 'IN'), ('other', 'JJ'), ('libraries', 'NNS'), ('that', 'WDT'), ('we', 'PRP'), ('can', 'MD'), ('also', 'RB'), ('download', 'VB'), ('separately', 'RB'), ('.', '.')] 

 Lemmas are: 
>> [('The', 'the'), ('SciPy', 'SciPy'), ('stack', 'stack'), ('contains', 'contain'), ('a', 'a'), ('host', 'host'), ('of', 'of'), ('other', 'other'), ('libraries', 'library'), ('that', 'that'), ('we', 'we'), ('can', 'can'), ('also', 'also'), ('download', 'download'), ('separately', 'separately'), ('.', '.')] 

 Dependency tags are: 
>> [(('The', 'stack'), 'det'), (('SciPy', 'stack'), 'compound'), (('stack', 'contains'), 'nsubj'), (('contains', 'root'), 'root'), (('a', 'host'), 'det'), (('host', 'contains'), 'obj'), (('of', 'libraries'), 'case'), (('other', 'libraries'), 'amod'), (('libraries', 'host'), 'nmod'), (('that', 'download'), 'obj'), (('we', 'download'), 'nsubj'), (('can', 'download'), 'aux'), (('also', 'download'), 'advmod'), (('download', 'libraries'), 'acl:relcl'), (('separately', 'download'), 'advmod'), (('.', 'contains'), 'punct')]

 Named Entities are: 
>> [('SciPy', 'ORG')]

========================== Sentence 75 ===========================

 These libraries provide support for mathematics, science and engineering. 

Tokens are: 
>> ['These', 'libraries', 'provide', 'support', 'for', 'mathematics', ',', 'science', 'and', 'engineering', '.'] 

 UPOS tags are: 
>> [('These', 'DET'), ('libraries', 'NOUN'), ('provide', 'VERB'), ('support', 'NOUN'), ('for', 'ADP'), ('mathematics', 'NOUN'), (',', 'PUNCT'), ('science', 'NOUN'), ('and', 'CCONJ'), ('engineering', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('These', 'DT'), ('libraries', 'NNS'), ('provide', 'VBP'), ('support', 'NN'), ('for', 'IN'), ('mathematics', 'NN'), (',', ','), ('science', 'NN'), ('and', 'CC'), ('engineering', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('These', 'this'), ('libraries', 'library'), ('provide', 'provide'), ('support', 'support'), ('for', 'for'), ('mathematics', 'mathematics'), (',', ','), ('science', 'science'), ('and', 'and'), ('engineering', 'engineering'), ('.', '.')] 

 Dependency tags are: 
>> [(('These', 'libraries'), 'det'), (('libraries', 'provide'), 'nsubj'), (('provide', 'root'), 'root'), (('support', 'provide'), 'obj'), (('for', 'mathematics'), 'case'), (('mathematics', 'support'), 'nmod'), ((',', 'science'), 'punct'), (('science', 'mathematics'), 'conj'), (('and', 'engineering'), 'cc'), (('engineering', 'mathematics'), 'conj'), (('.', 'provide'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 76 ===========================

 When we obtain SciPy, we get a set of libraries designed to work together to create applications of various sorts, these libraries are NumPy Pandas matplotlib Jupeter Sympy Etc…..      Prof. Arjun V. Bala #3150713 (PDS)      Unit 02 – Data Science and Python ‹#›  5) Scikit-learn 

Tokens are: 
>> ['When', 'we', 'obtain', 'SciPy', ',', 'we', 'get', 'a', 'set', 'of', 'libraries', 'designed', 'to', 'work', 'together', 'to', 'create', 'applications', 'of', 'various', 'sorts', ',', 'these', 'libraries', 'are', 'NumPy', 'Pandas', 'matplotlib', 'Jupeter', 'Sympy', 'Etc', '…..', 'Prof.', 'Arjun', 'V.', 'Bala', '#', '3150713', '(', 'PDS', ')', '\uf077', 'Unit', '02', '–', 'Data', 'Science', 'and', 'Python', '‹#›', '5', ')', 'Scikit-learn'] 

 UPOS tags are: 
>> [('When', 'SCONJ'), ('we', 'PRON'), ('obtain', 'VERB'), ('SciPy', 'PROPN'), (',', 'PUNCT'), ('we', 'PRON'), ('get', 'VERB'), ('a', 'DET'), ('set', 'NOUN'), ('of', 'ADP'), ('libraries', 'NOUN'), ('designed', 'VERB'), ('to', 'PART'), ('work', 'VERB'), ('together', 'ADV'), ('to', 'PART'), ('create', 'VERB'), ('applications', 'NOUN'), ('of', 'ADP'), ('various', 'ADJ'), ('sorts', 'NOUN'), (',', 'PUNCT'), ('these', 'DET'), ('libraries', 'NOUN'), ('are', 'AUX'), ('NumPy', 'PROPN'), ('Pandas', 'PROPN'), ('matplotlib', 'NOUN'), ('Jupeter', 'PROPN'), ('Sympy', 'PROPN'), ('Etc', 'X'), ('…..', 'PUNCT'), ('Prof.', 'PROPN'), ('Arjun', 'PROPN'), ('V.', 'PROPN'), ('Bala', 'PROPN'), ('#', 'SYM'), ('3150713', 'NUM'), ('(', 'PUNCT'), ('PDS', 'PROPN'), (')', 'PUNCT'), ('\uf077', 'PUNCT'), ('Unit', 'NOUN'), ('02', 'NUM'), ('–', 'SYM'), ('Data', 'NOUN'), ('Science', 'PROPN'), ('and', 'CCONJ'), ('Python', 'PROPN'), ('‹#›', 'PROPN'), ('5', 'NUM'), (')', 'PUNCT'), ('Scikit-learn', 'ADJ')] 

 XPOS tags are: 
>> [('When', 'WRB'), ('we', 'PRP'), ('obtain', 'VBP'), ('SciPy', 'NNP'), (',', ','), ('we', 'PRP'), ('get', 'VBP'), ('a', 'DT'), ('set', 'NN'), ('of', 'IN'), ('libraries', 'NNS'), ('designed', 'VBN'), ('to', 'TO'), ('work', 'VB'), ('together', 'RB'), ('to', 'TO'), ('create', 'VB'), ('applications', 'NNS'), ('of', 'IN'), ('various', 'JJ'), ('sorts', 'NNS'), (',', ','), ('these', 'DT'), ('libraries', 'NNS'), ('are', 'VBP'), ('NumPy', 'NNP'), ('Pandas', 'NNP'), ('matplotlib', 'NN'), ('Jupeter', 'NNP'), ('Sympy', 'NNP'), ('Etc', 'FW'), ('…..', ','), ('Prof.', 'NNP'), ('Arjun', 'NNP'), ('V.', 'NNP'), ('Bala', 'NNP'), ('#', 'NN'), ('3150713', 'CD'), ('(', '-LRB-'), ('PDS', 'NNP'), (')', '-RRB-'), ('\uf077', '-LRB-'), ('Unit', 'NN'), ('02', 'CD'), ('–', 'SYM'), ('Data', 'NN'), ('Science', 'NNP'), ('and', 'CC'), ('Python', 'NNP'), ('‹#›', 'NNP'), ('5', 'CD'), (')', '-RRB-'), ('Scikit-learn', 'JJ')] 

 Lemmas are: 
>> [('When', 'when'), ('we', 'we'), ('obtain', 'obtain'), ('SciPy', 'SciPy'), (',', ','), ('we', 'we'), ('get', 'get'), ('a', 'a'), ('set', 'set'), ('of', 'of'), ('libraries', 'library'), ('designed', 'design'), ('to', 'to'), ('work', 'work'), ('together', 'together'), ('to', 'to'), ('create', 'create'), ('applications', 'application'), ('of', 'of'), ('various', 'various'), ('sorts', 'sort'), (',', ','), ('these', 'this'), ('libraries', 'library'), ('are', 'be'), ('NumPy', 'NumPy'), ('Pandas', 'Pandas'), ('matplotlib', 'matplotlib'), ('Jupeter', 'Jupeter'), ('Sympy', 'Sympy'), ('Etc', 'etc'), ('…..', '…..'), ('Prof.', 'Prof.'), ('Arjun', 'Arjun'), ('V.', 'V.'), ('Bala', 'Bala'), ('#', '#'), ('3150713', '3150713'), ('(', '('), ('PDS', 'PDS'), (')', ')'), ('\uf077', "''"), ('Unit', 'unit'), ('02', '02'), ('–', '-'), ('Data', 'data'), ('Science', 'Science'), ('and', 'and'), ('Python', 'python'), ('‹#›', '‹#›'), ('5', '5'), (')', ')'), ('Scikit-learn', 'scikit-learn')] 

 Dependency tags are: 
>> [(('When', 'obtain'), 'mark'), (('we', 'obtain'), 'nsubj'), (('obtain', 'get'), 'advcl'), (('SciPy', 'obtain'), 'obj'), ((',', 'get'), 'punct'), (('we', 'get'), 'nsubj'), (('get', 'root'), 'root'), (('a', 'set'), 'det'), (('set', 'get'), 'obj'), (('of', 'libraries'), 'case'), (('libraries', 'set'), 'nmod'), (('designed', 'libraries'), 'acl'), (('to', 'work'), 'mark'), (('work', 'designed'), 'xcomp'), (('together', 'work'), 'advmod'), (('to', 'create'), 'mark'), (('create', 'work'), 'advcl'), (('applications', 'create'), 'obj'), (('of', 'sorts'), 'case'), (('various', 'sorts'), 'amod'), (('sorts', 'applications'), 'nmod'), ((',', 'NumPy'), 'punct'), (('these', 'libraries'), 'det'), (('libraries', 'NumPy'), 'nsubj'), (('are', 'NumPy'), 'cop'), (('NumPy', 'get'), 'parataxis'), (('Pandas', 'matplotlib'), 'compound'), (('matplotlib', 'NumPy'), 'flat'), (('Jupeter', 'matplotlib'), 'flat'), (('Sympy', 'Jupeter'), 'flat'), (('Etc', 'Jupeter'), 'conj'), (('…..', 'Prof.'), 'punct'), (('Prof.', 'matplotlib'), 'appos'), (('Arjun', 'Prof.'), 'flat'), (('V.', 'Prof.'), 'flat'), (('Bala', 'Prof.'), 'flat'), (('#', 'Prof.'), 'flat'), (('3150713', 'Prof.'), 'flat'), (('(', 'PDS'), 'punct'), (('PDS', 'Prof.'), 'appos'), ((')', 'PDS'), 'punct'), (('\uf077', 'Unit'), 'punct'), (('Unit', 'Prof.'), 'appos'), (('02', 'Unit'), 'nummod'), (('–', 'Science'), 'case'), (('Data', 'Science'), 'compound'), (('Science', 'Unit'), 'nmod'), (('and', 'Python'), 'cc'), (('Python', 'Science'), 'conj'), (('‹#›', 'Unit'), 'conj'), (('5', '‹#›'), 'dep'), ((')', 'Unit'), 'punct'), (('Scikit-learn', 'Unit'), 'appos')]

 Named Entities are: 
>> [('SciPy', 'ORG'), ('3150713', 'CARDINAL'), ('02', 'CARDINAL')]

========================== Sentence 77 ===========================

 The Scikit-learn library is one of many Scikit libraries that build on the capabilities provided by NumPy and SciPy to allow Python developers to perform domain specific tasks. 

Tokens are: 
>> ['The', 'Scikit-learn', 'library', 'is', 'one', 'of', 'many', 'Scikit', 'libraries', 'that', 'build', 'on', 'the', 'capabilities', 'provided', 'by', 'NumPy', 'and', 'SciPy', 'to', 'allow', 'Python', 'developers', 'to', 'perform', 'domain', 'specific', 'tasks', '.'] 

 UPOS tags are: 
>> [('The', 'DET'), ('Scikit-learn', 'ADJ'), ('library', 'NOUN'), ('is', 'AUX'), ('one', 'NUM'), ('of', 'ADP'), ('many', 'ADJ'), ('Scikit', 'ADJ'), ('libraries', 'NOUN'), ('that', 'PRON'), ('build', 'VERB'), ('on', 'ADP'), ('the', 'DET'), ('capabilities', 'NOUN'), ('provided', 'VERB'), ('by', 'ADP'), ('NumPy', 'PROPN'), ('and', 'CCONJ'), ('SciPy', 'PROPN'), ('to', 'PART'), ('allow', 'VERB'), ('Python', 'PROPN'), ('developers', 'NOUN'), ('to', 'PART'), ('perform', 'VERB'), ('domain', 'NOUN'), ('specific', 'ADJ'), ('tasks', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('The', 'DT'), ('Scikit-learn', 'JJ'), ('library', 'NN'), ('is', 'VBZ'), ('one', 'CD'), ('of', 'IN'), ('many', 'JJ'), ('Scikit', 'JJ'), ('libraries', 'NNS'), ('that', 'WDT'), ('build', 'VBP'), ('on', 'IN'), ('the', 'DT'), ('capabilities', 'NNS'), ('provided', 'VBN'), ('by', 'IN'), ('NumPy', 'NNP'), ('and', 'CC'), ('SciPy', 'NNP'), ('to', 'TO'), ('allow', 'VB'), ('Python', 'NNP'), ('developers', 'NNS'), ('to', 'TO'), ('perform', 'VB'), ('domain', 'NN'), ('specific', 'JJ'), ('tasks', 'NNS'), ('.', '.')] 

 Lemmas are: 
>> [('The', 'the'), ('Scikit-learn', 'scikit-learn'), ('library', 'library'), ('is', 'be'), ('one', 'one'), ('of', 'of'), ('many', 'many'), ('Scikit', 'Scikit'), ('libraries', 'library'), ('that', 'that'), ('build', 'build'), ('on', 'on'), ('the', 'the'), ('capabilities', 'capability'), ('provided', 'provide'), ('by', 'by'), ('NumPy', 'NumPy'), ('and', 'and'), ('SciPy', 'SciPy'), ('to', 'to'), ('allow', 'allow'), ('Python', 'python'), ('developers', 'developer'), ('to', 'to'), ('perform', 'perform'), ('domain', 'domain'), ('specific', 'specific'), ('tasks', 'task'), ('.', '.')] 

 Dependency tags are: 
>> [(('The', 'library'), 'det'), (('Scikit-learn', 'library'), 'amod'), (('library', 'one'), 'nsubj'), (('is', 'one'), 'cop'), (('one', 'root'), 'root'), (('of', 'libraries'), 'case'), (('many', 'libraries'), 'amod'), (('Scikit', 'libraries'), 'amod'), (('libraries', 'one'), 'nmod'), (('that', 'build'), 'nsubj'), (('build', 'libraries'), 'acl:relcl'), (('on', 'capabilities'), 'case'), (('the', 'capabilities'), 'det'), (('capabilities', 'build'), 'obl'), (('provided', 'capabilities'), 'acl'), (('by', 'NumPy'), 'case'), (('NumPy', 'provided'), 'obl'), (('and', 'SciPy'), 'cc'), (('SciPy', 'NumPy'), 'conj'), (('to', 'allow'), 'mark'), (('allow', 'build'), 'advcl'), (('Python', 'developers'), 'compound'), (('developers', 'allow'), 'obj'), (('to', 'perform'), 'mark'), (('perform', 'allow'), 'xcomp'), (('domain', 'tasks'), 'compound'), (('specific', 'tasks'), 'amod'), (('tasks', 'perform'), 'obj'), (('.', 'one'), 'punct')]

 Named Entities are: 
>> [('The Scikit-learn library', 'ORG'), ('Scikit', 'ORG'), ('NumPy', 'ORG'), ('SciPy', 'PRODUCT'), ('Python', 'ORG')]

========================== Sentence 78 ===========================

 Scikit-learn library focuses on data mining and data analysis, it provides access to following sort of functionality: Classification Regression Clustering Dimensionality reduction Model selection Pre-processing Scikit-learn is the most important library we are going to learn in this subject     Prof. Arjun V. Bala #3150713 (PDS)      Unit 02 – Data Science and Python ‹#›  6) Keras and TensorFlow Keras is an application programming interface (API) that is used to train deep learning models. 

Tokens are: 
>> ['Scikit-learn', 'library', 'focuses', 'on', 'data', 'mining', 'and', 'data', 'analysis', ',', 'it', 'provides', 'access', 'to', 'following', 'sort', 'of', 'functionality', ':', 'Classification', 'Regression', 'Clustering', 'Dimensionality', 'reduction', 'Model', 'selection', 'Pre-processing', 'Scikit-learn', 'is', 'the', 'most', 'important', 'library', 'we', 'are', 'going', 'to', 'learn', 'in', 'this', 'subject', 'Prof.', 'Arjun', 'V.', 'Bala', '#', '3150713', '(', 'PDS', ')', '\uf077', 'Unit', '02', '–', 'Data', 'Science', 'and', 'Python', '‹#', '›', '6', ')', 'Keras', 'and', 'TensorFlow', 'Keras', 'is', 'an', 'application', 'programming', 'interface', '(', 'API', ')', 'that', 'is', 'used', 'to', 'train', 'deep', 'learning', 'models', '.'] 

 UPOS tags are: 
>> [('Scikit-learn', 'ADJ'), ('library', 'NOUN'), ('focuses', 'VERB'), ('on', 'ADP'), ('data', 'NOUN'), ('mining', 'NOUN'), ('and', 'CCONJ'), ('data', 'NOUN'), ('analysis', 'NOUN'), (',', 'PUNCT'), ('it', 'PRON'), ('provides', 'VERB'), ('access', 'NOUN'), ('to', 'ADP'), ('following', 'VERB'), ('sort', 'NOUN'), ('of', 'ADP'), ('functionality', 'NOUN'), (':', 'PUNCT'), ('Classification', 'NOUN'), ('Regression', 'NOUN'), ('Clustering', 'NOUN'), ('Dimensionality', 'NOUN'), ('reduction', 'NOUN'), ('Model', 'NOUN'), ('selection', 'NOUN'), ('Pre-processing', 'NOUN'), ('Scikit-learn', 'NOUN'), ('is', 'AUX'), ('the', 'DET'), ('most', 'ADV'), ('important', 'ADJ'), ('library', 'NOUN'), ('we', 'PRON'), ('are', 'AUX'), ('going', 'VERB'), ('to', 'PART'), ('learn', 'VERB'), ('in', 'ADP'), ('this', 'DET'), ('subject', 'NOUN'), ('Prof.', 'PROPN'), ('Arjun', 'PROPN'), ('V.', 'PROPN'), ('Bala', 'PROPN'), ('#', 'SYM'), ('3150713', 'NUM'), ('(', 'PUNCT'), ('PDS', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('02', 'NUM'), ('–', 'PUNCT'), ('Data', 'PROPN'), ('Science', 'PROPN'), ('and', 'CCONJ'), ('Python', 'PROPN'), ('‹#', 'NOUN'), ('›', 'PUNCT'), ('6', 'NUM'), (')', 'PUNCT'), ('Keras', 'PROPN'), ('and', 'CCONJ'), ('TensorFlow', 'PROPN'), ('Keras', 'PROPN'), ('is', 'AUX'), ('an', 'DET'), ('application', 'NOUN'), ('programming', 'NOUN'), ('interface', 'NOUN'), ('(', 'PUNCT'), ('API', 'PROPN'), (')', 'PUNCT'), ('that', 'PRON'), ('is', 'AUX'), ('used', 'VERB'), ('to', 'PART'), ('train', 'VERB'), ('deep', 'ADJ'), ('learning', 'NOUN'), ('models', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Scikit-learn', 'JJ'), ('library', 'NN'), ('focuses', 'VBZ'), ('on', 'IN'), ('data', 'NN'), ('mining', 'NN'), ('and', 'CC'), ('data', 'NN'), ('analysis', 'NN'), (',', ','), ('it', 'PRP'), ('provides', 'VBZ'), ('access', 'NN'), ('to', 'IN'), ('following', 'VBG'), ('sort', 'NN'), ('of', 'IN'), ('functionality', 'NN'), (':', ':'), ('Classification', 'NN'), ('Regression', 'NN'), ('Clustering', 'NN'), ('Dimensionality', 'NN'), ('reduction', 'NN'), ('Model', 'NN'), ('selection', 'NN'), ('Pre-processing', 'NN'), ('Scikit-learn', 'NN'), ('is', 'VBZ'), ('the', 'DT'), ('most', 'RBS'), ('important', 'JJ'), ('library', 'NN'), ('we', 'PRP'), ('are', 'VBP'), ('going', 'VBG'), ('to', 'TO'), ('learn', 'VB'), ('in', 'IN'), ('this', 'DT'), ('subject', 'NN'), ('Prof.', 'NNP'), ('Arjun', 'NNP'), ('V.', 'NNP'), ('Bala', 'NNP'), ('#', 'NN'), ('3150713', 'CD'), ('(', '-LRB-'), ('PDS', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('02', 'CD'), ('–', ':'), ('Data', 'NNP'), ('Science', 'NNP'), ('and', 'CC'), ('Python', 'NNP'), ('‹#', 'NN'), ('›', '-LRB-'), ('6', 'CD'), (')', '-RRB-'), ('Keras', 'NNP'), ('and', 'CC'), ('TensorFlow', 'NNP'), ('Keras', 'NNP'), ('is', 'VBZ'), ('an', 'DT'), ('application', 'NN'), ('programming', 'NN'), ('interface', 'NN'), ('(', '-LRB-'), ('API', 'NNP'), (')', '-RRB-'), ('that', 'WDT'), ('is', 'VBZ'), ('used', 'VBN'), ('to', 'TO'), ('train', 'VB'), ('deep', 'JJ'), ('learning', 'NN'), ('models', 'NNS'), ('.', '.')] 

 Lemmas are: 
>> [('Scikit-learn', 'scikit-learn'), ('library', 'library'), ('focuses', 'focus'), ('on', 'on'), ('data', 'datum'), ('mining', 'mining'), ('and', 'and'), ('data', 'datum'), ('analysis', 'analysis'), (',', ','), ('it', 'it'), ('provides', 'provide'), ('access', 'access'), ('to', 'to'), ('following', 'follow'), ('sort', 'sort'), ('of', 'of'), ('functionality', 'functionality'), (':', ':'), ('Classification', 'classification'), ('Regression', 'regression'), ('Clustering', 'clustering'), ('Dimensionality', 'dimensionality'), ('reduction', 'reduction'), ('Model', 'model'), ('selection', 'selection'), ('Pre-processing', 'pre-processing'), ('Scikit-learn', 'scikit-learn'), ('is', 'be'), ('the', 'the'), ('most', 'most'), ('important', 'important'), ('library', 'library'), ('we', 'we'), ('are', 'be'), ('going', 'go'), ('to', 'to'), ('learn', 'learn'), ('in', 'in'), ('this', 'this'), ('subject', 'subject'), ('Prof.', 'Prof.'), ('Arjun', 'Arjun'), ('V.', 'V.'), ('Bala', 'Bala'), ('#', '#'), ('3150713', '3150713'), ('(', '('), ('PDS', 'pds'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('02', '02'), ('–', '-'), ('Data', 'data'), ('Science', 'Science'), ('and', 'and'), ('Python', 'python'), ('‹#', '‹#'), ('›', "''"), ('6', '6'), (')', ')'), ('Keras', 'Keras'), ('and', 'and'), ('TensorFlow', 'TensorFlow'), ('Keras', 'Keras'), ('is', 'be'), ('an', 'a'), ('application', 'application'), ('programming', 'programming'), ('interface', 'interface'), ('(', '('), ('API', 'api'), (')', ')'), ('that', 'that'), ('is', 'be'), ('used', 'use'), ('to', 'to'), ('train', 'train'), ('deep', 'deep'), ('learning', 'learning'), ('models', 'model'), ('.', '.')] 

 Dependency tags are: 
>> [(('Scikit-learn', 'library'), 'amod'), (('library', 'focuses'), 'nsubj'), (('focuses', 'root'), 'root'), (('on', 'analysis'), 'case'), (('data', 'analysis'), 'compound'), (('mining', 'analysis'), 'compound'), (('and', 'data'), 'cc'), (('data', 'mining'), 'conj'), (('analysis', 'focuses'), 'obl'), ((',', 'provides'), 'punct'), (('it', 'provides'), 'nsubj'), (('provides', 'focuses'), 'conj'), (('access', 'provides'), 'obj'), (('to', 'sort'), 'case'), (('following', 'sort'), 'amod'), (('sort', 'access'), 'nmod'), (('of', 'functionality'), 'case'), (('functionality', 'sort'), 'nmod'), ((':', 'sort'), 'punct'), (('Classification', 'selection'), 'compound'), (('Regression', 'selection'), 'compound'), (('Clustering', 'selection'), 'compound'), (('Dimensionality', 'selection'), 'compound'), (('reduction', 'selection'), 'compound'), (('Model', 'selection'), 'compound'), (('selection', 'Scikit-learn'), 'compound'), (('Pre-processing', 'Scikit-learn'), 'compound'), (('Scikit-learn', 'library'), 'nsubj'), (('is', 'library'), 'cop'), (('the', 'library'), 'det'), (('most', 'important'), 'advmod'), (('important', 'library'), 'amod'), (('library', 'focuses'), 'parataxis'), (('we', 'going'), 'nsubj'), (('are', 'going'), 'aux'), (('going', 'library'), 'acl:relcl'), (('to', 'learn'), 'mark'), (('learn', 'going'), 'xcomp'), (('in', 'subject'), 'case'), (('this', 'subject'), 'det'), (('subject', 'learn'), 'obl'), (('Prof.', 'subject'), 'appos'), (('Arjun', 'Prof.'), 'flat'), (('V.', 'Prof.'), 'flat'), (('Bala', 'Prof.'), 'flat'), (('#', 'Prof.'), 'appos'), (('3150713', 'Prof.'), 'flat'), (('(', 'PDS'), 'punct'), (('PDS', 'Prof.'), 'appos'), ((')', 'PDS'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', 'Prof.'), 'appos'), (('02', 'Unit'), 'nummod'), (('–', 'Science'), 'punct'), (('Data', 'Science'), 'compound'), (('Science', '‹#'), 'compound'), (('and', 'Python'), 'cc'), (('Python', 'Science'), 'conj'), (('‹#', 'Keras'), 'compound'), (('›', '6'), 'punct'), (('6', '‹#'), 'nummod'), ((')', '6'), 'punct'), (('Keras', 'interface'), 'nsubj'), (('and', 'interface'), 'cc'), (('TensorFlow', 'interface'), 'nsubj'), (('Keras', 'TensorFlow'), 'flat'), (('is', 'interface'), 'cop'), (('an', 'interface'), 'det'), (('application', 'programming'), 'compound'), (('programming', 'interface'), 'compound'), (('interface', 'focuses'), 'conj'), (('(', 'API'), 'punct'), (('API', 'interface'), 'appos'), ((')', 'API'), 'punct'), (('that', 'used'), 'nsubj:pass'), (('is', 'used'), 'aux:pass'), (('used', 'interface'), 'acl:relcl'), (('to', 'train'), 'mark'), (('train', 'used'), 'xcomp'), (('deep', 'models'), 'amod'), (('learning', 'models'), 'compound'), (('models', 'train'), 'obj'), (('.', 'focuses'), 'punct')]

 Named Entities are: 
>> [('3150713', 'CARDINAL'), ('02', 'CARDINAL'), ('6', 'CARDINAL'), ('Keras', 'ORG'), ('TensorFlow Keras', 'ORG')]

========================== Sentence 79 ===========================

 An API often specifies a model for doing something, but it doesn’t provide an implementation. 

Tokens are: 
>> ['An', 'API', 'often', 'specifies', 'a', 'model', 'for', 'doing', 'something', ',', 'but', 'it', 'does', 'n’t', 'provide', 'an', 'implementation', '.'] 

 UPOS tags are: 
>> [('An', 'DET'), ('API', 'PROPN'), ('often', 'ADV'), ('specifies', 'VERB'), ('a', 'DET'), ('model', 'NOUN'), ('for', 'SCONJ'), ('doing', 'VERB'), ('something', 'NOUN'), (',', 'PUNCT'), ('but', 'CCONJ'), ('it', 'PRON'), ('does', 'AUX'), ('n’t', 'PART'), ('provide', 'VERB'), ('an', 'DET'), ('implementation', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('An', 'DT'), ('API', 'NNP'), ('often', 'RB'), ('specifies', 'VBZ'), ('a', 'DT'), ('model', 'NN'), ('for', 'IN'), ('doing', 'VBG'), ('something', 'NN'), (',', ','), ('but', 'CC'), ('it', 'PRP'), ('does', 'VBZ'), ('n’t', 'RB'), ('provide', 'VB'), ('an', 'DT'), ('implementation', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('An', 'a'), ('API', 'api'), ('often', 'often'), ('specifies', 'specify'), ('a', 'a'), ('model', 'model'), ('for', 'for'), ('doing', 'do'), ('something', 'something'), (',', ','), ('but', 'but'), ('it', 'it'), ('does', 'do'), ('n’t', 'not'), ('provide', 'provide'), ('an', 'a'), ('implementation', 'implementation'), ('.', '.')] 

 Dependency tags are: 
>> [(('An', 'API'), 'det'), (('API', 'specifies'), 'nsubj'), (('often', 'specifies'), 'advmod'), (('specifies', 'root'), 'root'), (('a', 'model'), 'det'), (('model', 'specifies'), 'obj'), (('for', 'doing'), 'mark'), (('doing', 'model'), 'acl'), (('something', 'doing'), 'obj'), ((',', 'provide'), 'punct'), (('but', 'provide'), 'cc'), (('it', 'provide'), 'nsubj'), (('does', 'provide'), 'aux'), (('n’t', 'provide'), 'advmod'), (('provide', 'specifies'), 'conj'), (('an', 'implementation'), 'det'), (('implementation', 'provide'), 'obj'), (('.', 'specifies'), 'punct')]

 Named Entities are: 
>> [('API', 'ORG')]

========================== Sentence 80 ===========================

 Tensor 

Tokens are: 
>> ['Tensor'] 

 UPOS tags are: 
>> [('Tensor', 'NOUN')] 

 XPOS tags are: 
>> [('Tensor', 'NN')] 

 Lemmas are: 
>> [('Tensor', 'tensor')] 

 Dependency tags are: 
>> [(('Tensor', 'root'), 'root')]

 Named Entities are: 
>> [('Tensor', 'PERSON')]

========================== Sentence 81 ===========================

 Flow is an implementation for the keras, there are many other implementations for the keras like Microsoft’s cognitive Toolkit, CNKT Theano     Prof. Arjun V. Bala #3150713 (PDS)      Unit 02 – Data Science and Python ‹#›  7) Network 

Tokens are: 
>> ['Flow', 'is', 'an', 'implementation', 'for', 'the', 'keras', ',', 'there', 'are', 'many', 'other', 'implementations', 'for', 'the', 'keras', 'like', 'Microsoft', '’s', 'cognitive', 'Toolkit', ',', 'CNKT', 'Theano', 'Prof.', 'Arjun', 'V.', 'Bala', '#', '3150713', '(', 'PDS', ')', '\uf077', 'Unit', '02', '–', 'Data', 'Science', 'and', 'Python', '‹#', '›', '7', ')', 'Network'] 

 UPOS tags are: 
>> [('Flow', 'PROPN'), ('is', 'AUX'), ('an', 'DET'), ('implementation', 'NOUN'), ('for', 'ADP'), ('the', 'DET'), ('keras', 'NOUN'), (',', 'PUNCT'), ('there', 'PRON'), ('are', 'VERB'), ('many', 'ADJ'), ('other', 'ADJ'), ('implementations', 'NOUN'), ('for', 'ADP'), ('the', 'DET'), ('keras', 'NOUN'), ('like', 'ADP'), ('Microsoft', 'PROPN'), ('’s', 'PART'), ('cognitive', 'ADJ'), ('Toolkit', 'PROPN'), (',', 'PUNCT'), ('CNKT', 'PROPN'), ('Theano', 'PROPN'), ('Prof.', 'PROPN'), ('Arjun', 'PROPN'), ('V.', 'PROPN'), ('Bala', 'PROPN'), ('#', 'SYM'), ('3150713', 'NUM'), ('(', 'PUNCT'), ('PDS', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'PUNCT'), ('Unit', 'NOUN'), ('02', 'NUM'), ('–', 'SYM'), ('Data', 'NOUN'), ('Science', 'NOUN'), ('and', 'CCONJ'), ('Python', 'PROPN'), ('‹#', 'NOUN'), ('›', 'PUNCT'), ('7', 'NUM'), (')', 'PUNCT'), ('Network', 'NOUN')] 

 XPOS tags are: 
>> [('Flow', 'NNP'), ('is', 'VBZ'), ('an', 'DT'), ('implementation', 'NN'), ('for', 'IN'), ('the', 'DT'), ('keras', 'NN'), (',', ','), ('there', 'EX'), ('are', 'VBP'), ('many', 'JJ'), ('other', 'JJ'), ('implementations', 'NNS'), ('for', 'IN'), ('the', 'DT'), ('keras', 'NNS'), ('like', 'IN'), ('Microsoft', 'NNP'), ('’s', 'POS'), ('cognitive', 'JJ'), ('Toolkit', 'NNP'), (',', ','), ('CNKT', 'NNP'), ('Theano', 'NNP'), ('Prof.', 'NNP'), ('Arjun', 'NNP'), ('V.', 'NNP'), ('Bala', 'NNP'), ('#', 'NN'), ('3150713', 'CD'), ('(', '-LRB-'), ('PDS', 'NN'), (')', '-RRB-'), ('\uf077', ','), ('Unit', 'NN'), ('02', 'CD'), ('–', 'SYM'), ('Data', 'NN'), ('Science', 'NN'), ('and', 'CC'), ('Python', 'NNP'), ('‹#', 'NN'), ('›', '-LRB-'), ('7', 'CD'), (')', '-RRB-'), ('Network', 'NN')] 

 Lemmas are: 
>> [('Flow', 'Flow'), ('is', 'be'), ('an', 'a'), ('implementation', 'implementation'), ('for', 'for'), ('the', 'the'), ('keras', 'kera'), (',', ','), ('there', 'there'), ('are', 'be'), ('many', 'many'), ('other', 'other'), ('implementations', 'implementation'), ('for', 'for'), ('the', 'the'), ('keras', 'kera'), ('like', 'like'), ('Microsoft', 'Microsoft'), ('’s', "'s"), ('cognitive', 'cognitive'), ('Toolkit', 'Toolkit'), (',', ','), ('CNKT', 'CNKT'), ('Theano', 'Theano'), ('Prof.', 'Prof.'), ('Arjun', 'Arjun'), ('V.', 'V.'), ('Bala', 'Bala'), ('#', '#'), ('3150713', '3150713'), ('(', '('), ('PDS', 'pds'), (')', ')'), ('\uf077', "''"), ('Unit', 'unit'), ('02', '02'), ('–', '-'), ('Data', 'data'), ('Science', 'science'), ('and', 'and'), ('Python', 'python'), ('‹#', '‹#'), ('›', "''"), ('7', '7'), (')', ')'), ('Network', 'network')] 

 Dependency tags are: 
>> [(('Flow', 'implementation'), 'nsubj'), (('is', 'implementation'), 'cop'), (('an', 'implementation'), 'det'), (('implementation', 'root'), 'root'), (('for', 'keras'), 'case'), (('the', 'keras'), 'det'), (('keras', 'implementation'), 'nmod'), ((',', 'implementation'), 'punct'), (('there', 'are'), 'expl'), (('are', 'implementation'), 'parataxis'), (('many', 'implementations'), 'amod'), (('other', 'implementations'), 'amod'), (('implementations', 'are'), 'nsubj'), (('for', 'keras'), 'case'), (('the', 'keras'), 'det'), (('keras', 'implementations'), 'nmod'), (('like', 'Toolkit'), 'case'), (('Microsoft', 'Toolkit'), 'nmod:poss'), (('’s', 'Microsoft'), 'case'), (('cognitive', 'Toolkit'), 'amod'), (('Toolkit', 'keras'), 'nmod'), ((',', 'CNKT'), 'punct'), (('CNKT', 'Toolkit'), 'appos'), (('Theano', 'CNKT'), 'flat'), (('Prof.', 'CNKT'), 'flat'), (('Arjun', 'CNKT'), 'flat'), (('V.', 'CNKT'), 'flat'), (('Bala', 'CNKT'), 'flat'), (('#', 'Toolkit'), 'appos'), (('3150713', '#'), 'nummod'), (('(', 'PDS'), 'punct'), (('PDS', 'Unit'), 'appos'), ((')', 'PDS'), 'punct'), (('\uf077', 'Unit'), 'punct'), (('Unit', 'Toolkit'), 'appos'), (('02', 'Unit'), 'nummod'), (('–', 'Science'), 'case'), (('Data', 'Science'), 'compound'), (('Science', 'Unit'), 'nmod'), (('and', '‹#'), 'cc'), (('Python', '‹#'), 'compound'), (('‹#', 'Unit'), 'conj'), (('›', '7'), 'punct'), (('7', 'Network'), 'nummod'), ((')', '7'), 'punct'), (('Network', 'Unit'), 'appos')]

 Named Entities are: 
>> [('Microsoft', 'ORG'), ('Toolkit', 'PRODUCT'), ('3150713', 'CARDINAL'), ('02', 'CARDINAL'), ('7', 'CARDINAL')]

========================== Sentence 82 ===========================

 X Network 

Tokens are: 
>> ['X', 'Network'] 

 UPOS tags are: 
>> [('X', 'PROPN'), ('Network', 'PROPN')] 

 XPOS tags are: 
>> [('X', 'NNP'), ('Network', 'NNP')] 

 Lemmas are: 
>> [('X', 'X'), ('Network', 'Network')] 

 Dependency tags are: 
>> [(('X', 'Network'), 'compound'), (('Network', 'root'), 'root')]

 Named Entities are: 
>> []

========================== Sentence 83 ===========================

 X is a Python package for the creation, manipulation, and study of the structure, dynamics, and functions of complex networks (For example GPS setup to discover routes through city streets). 

Tokens are: 
>> ['X', 'is', 'a', 'Python', 'package', 'for', 'the', 'creation', ',', 'manipulation', ',', 'and', 'study', 'of', 'the', 'structure', ',', 'dynamics', ',', 'and', 'functions', 'of', 'complex', 'networks', '(', 'For', 'example', 'GPS', 'setup', 'to', 'discover', 'routes', 'through', 'city', 'streets', ')', '.'] 

 UPOS tags are: 
>> [('X', 'PROPN'), ('is', 'AUX'), ('a', 'DET'), ('Python', 'PROPN'), ('package', 'NOUN'), ('for', 'ADP'), ('the', 'DET'), ('creation', 'NOUN'), (',', 'PUNCT'), ('manipulation', 'NOUN'), (',', 'PUNCT'), ('and', 'CCONJ'), ('study', 'NOUN'), ('of', 'ADP'), ('the', 'DET'), ('structure', 'NOUN'), (',', 'PUNCT'), ('dynamics', 'NOUN'), (',', 'PUNCT'), ('and', 'CCONJ'), ('functions', 'NOUN'), ('of', 'ADP'), ('complex', 'ADJ'), ('networks', 'NOUN'), ('(', 'PUNCT'), ('For', 'ADP'), ('example', 'NOUN'), ('GPS', 'NOUN'), ('setup', 'NOUN'), ('to', 'PART'), ('discover', 'VERB'), ('routes', 'NOUN'), ('through', 'ADP'), ('city', 'NOUN'), ('streets', 'NOUN'), (')', 'PUNCT'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('X', 'NNP'), ('is', 'VBZ'), ('a', 'DT'), ('Python', 'NNP'), ('package', 'NN'), ('for', 'IN'), ('the', 'DT'), ('creation', 'NN'), (',', ','), ('manipulation', 'NN'), (',', ','), ('and', 'CC'), ('study', 'NN'), ('of', 'IN'), ('the', 'DT'), ('structure', 'NN'), (',', ','), ('dynamics', 'NNS'), (',', ','), ('and', 'CC'), ('functions', 'NNS'), ('of', 'IN'), ('complex', 'JJ'), ('networks', 'NNS'), ('(', '-LRB-'), ('For', 'IN'), ('example', 'NN'), ('GPS', 'NN'), ('setup', 'NN'), ('to', 'TO'), ('discover', 'VB'), ('routes', 'NNS'), ('through', 'IN'), ('city', 'NN'), ('streets', 'NNS'), (')', '-RRB-'), ('.', '.')] 

 Lemmas are: 
>> [('X', 'X'), ('is', 'be'), ('a', 'a'), ('Python', 'python'), ('package', 'package'), ('for', 'for'), ('the', 'the'), ('creation', 'creation'), (',', ','), ('manipulation', 'manipulation'), (',', ','), ('and', 'and'), ('study', 'study'), ('of', 'of'), ('the', 'the'), ('structure', 'structure'), (',', ','), ('dynamics', 'dynamics'), (',', ','), ('and', 'and'), ('functions', 'function'), ('of', 'of'), ('complex', 'complex'), ('networks', 'network'), ('(', '('), ('For', 'for'), ('example', 'example'), ('GPS', 'gps'), ('setup', 'setup'), ('to', 'to'), ('discover', 'discover'), ('routes', 'route'), ('through', 'through'), ('city', 'city'), ('streets', 'street'), (')', ')'), ('.', '.')] 

 Dependency tags are: 
>> [(('X', 'package'), 'nsubj'), (('is', 'package'), 'cop'), (('a', 'package'), 'det'), (('Python', 'package'), 'compound'), (('package', 'root'), 'root'), (('for', 'creation'), 'case'), (('the', 'creation'), 'det'), (('creation', 'package'), 'nmod'), ((',', 'manipulation'), 'punct'), (('manipulation', 'creation'), 'conj'), ((',', 'study'), 'punct'), (('and', 'study'), 'cc'), (('study', 'creation'), 'conj'), (('of', 'structure'), 'case'), (('the', 'structure'), 'det'), (('structure', 'study'), 'nmod'), ((',', 'dynamics'), 'punct'), (('dynamics', 'structure'), 'conj'), ((',', 'functions'), 'punct'), (('and', 'functions'), 'cc'), (('functions', 'structure'), 'conj'), (('of', 'networks'), 'case'), (('complex', 'networks'), 'amod'), (('networks', 'functions'), 'nmod'), (('(', 'setup'), 'punct'), (('For', 'setup'), 'case'), (('example', 'setup'), 'compound'), (('GPS', 'setup'), 'compound'), (('setup', 'functions'), 'nmod'), (('to', 'discover'), 'mark'), (('discover', 'setup'), 'acl'), (('routes', 'discover'), 'obj'), (('through', 'streets'), 'case'), (('city', 'streets'), 'compound'), (('streets', 'routes'), 'nmod'), ((')', 'setup'), 'punct'), (('.', 'package'), 'punct')]

 Named Entities are: 
>> [('Python', 'PRODUCT')]

========================== Sentence 84 ===========================

 Network 

Tokens are: 
>> ['Network'] 

 UPOS tags are: 
>> [('Network', 'NOUN')] 

 XPOS tags are: 
>> [('Network', 'NN')] 

 Lemmas are: 
>> [('Network', 'network')] 

 Dependency tags are: 
>> [(('Network', 'root'), 'root')]

 Named Entities are: 
>> []

========================== Sentence 85 ===========================

 X also provides the means to output the resulting analysis in a form that humans understand. 

Tokens are: 
>> ['X', 'also', 'provides', 'the', 'means', 'to', 'output', 'the', 'resulting', 'analysis', 'in', 'a', 'form', 'that', 'humans', 'understand', '.'] 

 UPOS tags are: 
>> [('X', 'PROPN'), ('also', 'ADV'), ('provides', 'VERB'), ('the', 'DET'), ('means', 'NOUN'), ('to', 'PART'), ('output', 'VERB'), ('the', 'DET'), ('resulting', 'VERB'), ('analysis', 'NOUN'), ('in', 'ADP'), ('a', 'DET'), ('form', 'NOUN'), ('that', 'PRON'), ('humans', 'NOUN'), ('understand', 'VERB'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('X', 'NNP'), ('also', 'RB'), ('provides', 'VBZ'), ('the', 'DT'), ('means', 'NNS'), ('to', 'TO'), ('output', 'VB'), ('the', 'DT'), ('resulting', 'VBG'), ('analysis', 'NN'), ('in', 'IN'), ('a', 'DT'), ('form', 'NN'), ('that', 'WDT'), ('humans', 'NNS'), ('understand', 'VBP'), ('.', '.')] 

 Lemmas are: 
>> [('X', 'X'), ('also', 'also'), ('provides', 'provide'), ('the', 'the'), ('means', 'means'), ('to', 'to'), ('output', 'output'), ('the', 'the'), ('resulting', 'result'), ('analysis', 'analysis'), ('in', 'in'), ('a', 'a'), ('form', 'form'), ('that', 'that'), ('humans', 'human'), ('understand', 'understand'), ('.', '.')] 

 Dependency tags are: 
>> [(('X', 'provides'), 'nsubj'), (('also', 'provides'), 'advmod'), (('provides', 'root'), 'root'), (('the', 'means'), 'det'), (('means', 'provides'), 'obj'), (('to', 'output'), 'mark'), (('output', 'means'), 'acl'), (('the', 'analysis'), 'det'), (('resulting', 'analysis'), 'amod'), (('analysis', 'output'), 'obj'), (('in', 'form'), 'case'), (('a', 'form'), 'det'), (('form', 'analysis'), 'nmod'), (('that', 'understand'), 'obj'), (('humans', 'understand'), 'nsubj'), (('understand', 'form'), 'acl:relcl'), (('.', 'provides'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 86 ===========================

 Main advantage of using Network 

Tokens are: 
>> ['Main', 'advantage', 'of', 'using', 'Network'] 

 UPOS tags are: 
>> [('Main', 'ADJ'), ('advantage', 'NOUN'), ('of', 'SCONJ'), ('using', 'VERB'), ('Network', 'NOUN')] 

 XPOS tags are: 
>> [('Main', 'JJ'), ('advantage', 'NN'), ('of', 'IN'), ('using', 'VBG'), ('Network', 'NN')] 

 Lemmas are: 
>> [('Main', 'Main'), ('advantage', 'advantage'), ('of', 'of'), ('using', 'use'), ('Network', 'network')] 

 Dependency tags are: 
>> [(('Main', 'advantage'), 'amod'), (('advantage', 'root'), 'root'), (('of', 'using'), 'mark'), (('using', 'advantage'), 'acl'), (('Network', 'using'), 'obj')]

 Named Entities are: 
>> []

========================== Sentence 87 ===========================

 X is that nodes can be anything (including images) and edges can hold arbitrary data. 

Tokens are: 
>> ['X', 'is', 'that', 'nodes', 'can', 'be', 'anything', '(', 'including', 'images', ')', 'and', 'edges', 'can', 'hold', 'arbitrary', 'data', '.'] 

 UPOS tags are: 
>> [('X', 'PROPN'), ('is', 'VERB'), ('that', 'SCONJ'), ('nodes', 'NOUN'), ('can', 'AUX'), ('be', 'AUX'), ('anything', 'NOUN'), ('(', 'PUNCT'), ('including', 'VERB'), ('images', 'NOUN'), (')', 'PUNCT'), ('and', 'CCONJ'), ('edges', 'NOUN'), ('can', 'AUX'), ('hold', 'VERB'), ('arbitrary', 'ADJ'), ('data', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('X', 'NNP'), ('is', 'VBZ'), ('that', 'IN'), ('nodes', 'NNS'), ('can', 'MD'), ('be', 'VB'), ('anything', 'NN'), ('(', '-LRB-'), ('including', 'VBG'), ('images', 'NNS'), (')', '-RRB-'), ('and', 'CC'), ('edges', 'NNS'), ('can', 'MD'), ('hold', 'VB'), ('arbitrary', 'JJ'), ('data', 'NNS'), ('.', '.')] 

 Lemmas are: 
>> [('X', 'X'), ('is', 'be'), ('that', 'that'), ('nodes', 'node'), ('can', 'can'), ('be', 'be'), ('anything', 'anything'), ('(', '('), ('including', 'include'), ('images', 'image'), (')', ')'), ('and', 'and'), ('edges', 'edge'), ('can', 'can'), ('hold', 'hold'), ('arbitrary', 'arbitrary'), ('data', 'datum'), ('.', '.')] 

 Dependency tags are: 
>> [(('X', 'is'), 'nsubj'), (('is', 'root'), 'root'), (('that', 'anything'), 'mark'), (('nodes', 'anything'), 'nsubj'), (('can', 'anything'), 'aux'), (('be', 'anything'), 'cop'), (('anything', 'is'), 'ccomp'), (('(', 'images'), 'punct'), (('including', 'images'), 'case'), (('images', 'anything'), 'nmod'), ((')', 'images'), 'punct'), (('and', 'hold'), 'cc'), (('edges', 'hold'), 'nsubj'), (('can', 'hold'), 'aux'), (('hold', 'anything'), 'conj'), (('arbitrary', 'data'), 'amod'), (('data', 'hold'), 'obj'), (('.', 'is'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 88 ===========================

 Prof. Arjun V. Bala #3150713 (PDS)      Unit 02 – Data Science and Python ‹#›  8) Beautiful Soup Beautiful Soup is a Python package for parsing HTML and XML documents. 

Tokens are: 
>> ['Prof.', 'Arjun', 'V.', 'Bala', '#', '3150713', '(', 'PDS', ')', '\uf077', 'Unit', '02', '–', 'Data', 'Science', 'and', 'Python', '‹#', '›', '8', ')', 'Beautiful', 'Soup', 'Beautiful', 'Soup', 'is', 'a', 'Python', 'package', 'for', 'parsing', 'HTML', 'and', 'XML', 'documents', '.'] 

 UPOS tags are: 
>> [('Prof.', 'PROPN'), ('Arjun', 'PROPN'), ('V.', 'PROPN'), ('Bala', 'PROPN'), ('#', 'SYM'), ('3150713', 'NUM'), ('(', 'PUNCT'), ('PDS', 'PROPN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('02', 'NUM'), ('–', 'PUNCT'), ('Data', 'PROPN'), ('Science', 'PROPN'), ('and', 'CCONJ'), ('Python', 'PROPN'), ('‹#', 'PROPN'), ('›', 'PUNCT'), ('8', 'NUM'), (')', 'PUNCT'), ('Beautiful', 'ADJ'), ('Soup', 'PROPN'), ('Beautiful', 'ADJ'), ('Soup', 'PROPN'), ('is', 'AUX'), ('a', 'DET'), ('Python', 'PROPN'), ('package', 'NOUN'), ('for', 'ADP'), ('parsing', 'NOUN'), ('HTML', 'NOUN'), ('and', 'CCONJ'), ('XML', 'PROPN'), ('documents', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Prof.', 'NNP'), ('Arjun', 'NNP'), ('V.', 'NNP'), ('Bala', 'NNP'), ('#', 'NN'), ('3150713', 'CD'), ('(', '-LRB-'), ('PDS', 'NNP'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('02', 'CD'), ('–', ':'), ('Data', 'NNP'), ('Science', 'NNP'), ('and', 'CC'), ('Python', 'NNP'), ('‹#', 'NNP'), ('›', '-LRB-'), ('8', 'LS'), (')', '-RRB-'), ('Beautiful', 'NNP'), ('Soup', 'NNP'), ('Beautiful', 'NNP'), ('Soup', 'NNP'), ('is', 'VBZ'), ('a', 'DT'), ('Python', 'NNP'), ('package', 'NN'), ('for', 'IN'), ('parsing', 'NN'), ('HTML', 'NN'), ('and', 'CC'), ('XML', 'NNP'), ('documents', 'NNS'), ('.', '.')] 

 Lemmas are: 
>> [('Prof.', 'Prof.'), ('Arjun', 'Arjun'), ('V.', 'V.'), ('Bala', 'Bala'), ('#', '#'), ('3150713', '3150713'), ('(', '('), ('PDS', 'PDS'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('02', '02'), ('–', '-'), ('Data', 'data'), ('Science', 'Science'), ('and', 'and'), ('Python', 'python'), ('‹#', '‹#'), ('›', "''"), ('8', '8'), (')', ')'), ('Beautiful', 'beautiful'), ('Soup', 'Soup'), ('Beautiful', 'beautiful'), ('Soup', 'Soup'), ('is', 'be'), ('a', 'a'), ('Python', 'python'), ('package', 'package'), ('for', 'for'), ('parsing', 'parsing'), ('HTML', 'HTML'), ('and', 'and'), ('XML', 'XML'), ('documents', 'document'), ('.', '.')] 

 Dependency tags are: 
>> [(('Prof.', 'package'), 'nsubj'), (('Arjun', 'Prof.'), 'flat'), (('V.', 'Prof.'), 'flat'), (('Bala', 'Prof.'), 'flat'), (('#', 'Prof.'), 'list'), (('3150713', '#'), 'nummod'), (('(', 'PDS'), 'punct'), (('PDS', 'Unit'), 'compound'), ((')', 'PDS'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', 'Prof.'), 'appos'), (('02', 'Unit'), 'nummod'), (('–', 'Science'), 'punct'), (('Data', 'Science'), 'compound'), (('Science', 'Prof.'), 'appos'), (('and', '‹#'), 'cc'), (('Python', '‹#'), 'compound'), (('‹#', 'Science'), 'conj'), (('›', '8'), 'punct'), (('8', '‹#'), 'nummod'), ((')', '8'), 'punct'), (('Beautiful', 'Soup'), 'amod'), (('Soup', 'Soup'), 'compound'), (('Beautiful', 'Soup'), 'amod'), (('Soup', 'package'), 'nsubj'), (('is', 'package'), 'cop'), (('a', 'package'), 'det'), (('Python', 'package'), 'compound'), (('package', 'root'), 'root'), (('for', 'documents'), 'case'), (('parsing', 'documents'), 'compound'), (('HTML', 'documents'), 'compound'), (('and', 'XML'), 'cc'), (('XML', 'HTML'), 'conj'), (('documents', 'package'), 'nmod'), (('.', 'package'), 'punct')]

 Named Entities are: 
>> [('Arjun V. Bala', 'PERSON'), ('3150713', 'CARDINAL'), ('02', 'CARDINAL'), ('8', 'CARDINAL'), ('Beautiful Soup Beautiful Soup', 'WORK_OF_ART'), ('Python', 'WORK_OF_ART')]

========================== Sentence 89 ===========================

 It creates a parse tree for parsed pages that can be used to extract data from HTML, which is useful for web scraping. 

Tokens are: 
>> ['It', 'creates', 'a', 'parse', 'tree', 'for', 'parsed', 'pages', 'that', 'can', 'be', 'used', 'to', 'extract', 'data', 'from', 'HTML', ',', 'which', 'is', 'useful', 'for', 'web', 'scraping', '.'] 

 UPOS tags are: 
>> [('It', 'PRON'), ('creates', 'VERB'), ('a', 'DET'), ('parse', 'NOUN'), ('tree', 'NOUN'), ('for', 'ADP'), ('parsed', 'VERB'), ('pages', 'NOUN'), ('that', 'PRON'), ('can', 'AUX'), ('be', 'AUX'), ('used', 'VERB'), ('to', 'PART'), ('extract', 'VERB'), ('data', 'NOUN'), ('from', 'ADP'), ('HTML', 'PROPN'), (',', 'PUNCT'), ('which', 'PRON'), ('is', 'AUX'), ('useful', 'ADJ'), ('for', 'ADP'), ('web', 'NOUN'), ('scraping', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('It', 'PRP'), ('creates', 'VBZ'), ('a', 'DT'), ('parse', 'NN'), ('tree', 'NN'), ('for', 'IN'), ('parsed', 'VBN'), ('pages', 'NNS'), ('that', 'WDT'), ('can', 'MD'), ('be', 'VB'), ('used', 'VBN'), ('to', 'TO'), ('extract', 'VB'), ('data', 'NNS'), ('from', 'IN'), ('HTML', 'NNP'), (',', ','), ('which', 'WDT'), ('is', 'VBZ'), ('useful', 'JJ'), ('for', 'IN'), ('web', 'NN'), ('scraping', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('It', 'it'), ('creates', 'create'), ('a', 'a'), ('parse', 'parse'), ('tree', 'tree'), ('for', 'for'), ('parsed', 'parse'), ('pages', 'page'), ('that', 'that'), ('can', 'can'), ('be', 'be'), ('used', 'use'), ('to', 'to'), ('extract', 'extract'), ('data', 'datum'), ('from', 'from'), ('HTML', 'HTML'), (',', ','), ('which', 'which'), ('is', 'be'), ('useful', 'useful'), ('for', 'for'), ('web', 'web'), ('scraping', 'scraping'), ('.', '.')] 

 Dependency tags are: 
>> [(('It', 'creates'), 'nsubj'), (('creates', 'root'), 'root'), (('a', 'tree'), 'det'), (('parse', 'tree'), 'compound'), (('tree', 'creates'), 'obj'), (('for', 'pages'), 'case'), (('parsed', 'pages'), 'amod'), (('pages', 'tree'), 'nmod'), (('that', 'used'), 'nsubj:pass'), (('can', 'used'), 'aux'), (('be', 'used'), 'aux:pass'), (('used', 'pages'), 'acl:relcl'), (('to', 'extract'), 'mark'), (('extract', 'used'), 'xcomp'), (('data', 'extract'), 'obj'), (('from', 'HTML'), 'case'), (('HTML', 'extract'), 'obl'), ((',', 'useful'), 'punct'), (('which', 'useful'), 'nsubj'), (('is', 'useful'), 'cop'), (('useful', 'HTML'), 'acl:relcl'), (('for', 'scraping'), 'case'), (('web', 'scraping'), 'compound'), (('scraping', 'useful'), 'obl'), (('.', 'creates'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 90 ===========================

 Prof. Arjun V. Bala #3150713 (PDS)      Unit 02 – Data Science and Python ‹#›                                /docProps/thumbnail. 

Tokens are: 
>> ['Prof.', 'Arjun', 'V.', 'Bala', '#', '3150713', '(', 'PDS', ')', '\uf077', 'Unit', '02', '–', 'Data', 'Science', 'and', 'Python', '‹#›', '/docProps/thumbnail', '.'] 

 UPOS tags are: 
>> [('Prof.', 'PROPN'), ('Arjun', 'PROPN'), ('V.', 'PROPN'), ('Bala', 'PROPN'), ('#', 'SYM'), ('3150713', 'NUM'), ('(', 'PUNCT'), ('PDS', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('02', 'NUM'), ('–', 'PUNCT'), ('Data', 'NOUN'), ('Science', 'PROPN'), ('and', 'CCONJ'), ('Python', 'PROPN'), ('‹#›', 'PROPN'), ('/docProps/thumbnail', 'PROPN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Prof.', 'NNP'), ('Arjun', 'NNP'), ('V.', 'NNP'), ('Bala', 'NNP'), ('#', 'NN'), ('3150713', 'CD'), ('(', '-LRB-'), ('PDS', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('02', 'CD'), ('–', ','), ('Data', 'NN'), ('Science', 'NNP'), ('and', 'CC'), ('Python', 'NNP'), ('‹#›', 'NNP'), ('/docProps/thumbnail', 'NNP'), ('.', '.')] 

 Lemmas are: 
>> [('Prof.', 'Prof.'), ('Arjun', 'Arjun'), ('V.', 'V.'), ('Bala', 'Bala'), ('#', '#'), ('3150713', '3150713'), ('(', '('), ('PDS', 'pds'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('02', '02'), ('–', '-'), ('Data', 'data'), ('Science', 'Science'), ('and', 'and'), ('Python', 'python'), ('‹#›', '‹#›'), ('/docProps/thumbnail', '/docProps/thumbnail'), ('.', '.')] 

 Dependency tags are: 
>> [(('Prof.', 'root'), 'root'), (('Arjun', 'Prof.'), 'flat'), (('V.', 'Prof.'), 'flat'), (('Bala', 'Prof.'), 'flat'), (('#', 'Prof.'), 'list'), (('3150713', '#'), 'nummod'), (('(', 'PDS'), 'punct'), (('PDS', '#'), 'appos'), ((')', 'PDS'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', 'Prof.'), 'list'), (('02', 'Unit'), 'nummod'), (('–', 'Unit'), 'punct'), (('Data', 'Science'), 'compound'), (('Science', 'Unit'), 'appos'), (('and', 'Python'), 'cc'), (('Python', '‹#›'), 'compound'), (('‹#›', '/docProps/thumbnail'), 'compound'), (('/docProps/thumbnail', 'Prof.'), 'list'), (('.', 'Prof.'), 'punct')]

 Named Entities are: 
>> [('Arjun V. Bala', 'PERSON'), ('3150713', 'CARDINAL'), ('02', 'CARDINAL')]

========================== Sentence 91 ===========================

 jpeg 

Tokens are: 
>> ['jpeg'] 

 UPOS tags are: 
>> [('jpeg', 'NOUN')] 

 XPOS tags are: 
>> [('jpeg', 'NN')] 

 Lemmas are: 
>> [('jpeg', 'jpeg')] 

 Dependency tags are: 
>> [(('jpeg', 'root'), 'root')]

 Named Entities are: 
>> []