				 *** Text Processing using Spacy *** 


============================ Sentence 1 =============================

PowerPoint Presentation  Unit – 3 Parsing Theory (I) dixita.kagathara@darshan.ac.in +91 - 97277 47317 (CE Department) 


>> Tokens are: 
[PowerPoint, Presentation,  , Unit, –, 3, Parsing, Theory, (, ), dixita.kagathara@darshan.ac.in, +91, -, 97277, 47317, (, CE, Department, )] 

>> PoS Tags are: 
[('PowerPoint', 'PROPN'), ('Presentation', 'PROPN'), (' ', 'SPACE'), ('Unit', 'PROPN'), ('–', 'PUNCT'), ('3', 'NUM'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('dixita.kagathara@darshan.ac.in', 'VERB'), ('+91', 'NOUN'), ('-', 'PUNCT'), ('97277', 'NUM'), ('47317', 'NUM'), ('(', 'PUNCT'), ('CE', 'PROPN'), ('Department', 'PROPN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('PowerPoint', 'compound'), ('Presentation', 'nsubj'), (' ', 'compound'), ('Unit', 'appos'), ('–', 'punct'), ('3', 'nummod'), ('Parsing', 'compound'), ('Theory', 'appos'), ('(', 'punct'), (')', 'punct'), ('dixita.kagathara@darshan.ac.in', 'ROOT'), ('+91', 'npadvmod'), ('-', 'punct'), ('97277', 'dobj'), ('47317', 'nummod'), ('(', 'punct'), ('CE', 'compound'), ('Department', 'parataxis'), (')', 'punct')]

>> Bigrams: 
[[PowerPoint, Presentation], [Presentation,  ], [ , Unit], [Unit, –], [–, 3], [3, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), dixita.kagathara@darshan.ac.in], [dixita.kagathara@darshan.ac.in, +91], [+91, -], [-, 97277], [97277, 47317], [47317, (], [(, CE], [CE, Department], [Department, )]]

>> Trigrams: 
[[PowerPoint, Presentation,  ], [Presentation,  , Unit], [ , Unit, –], [Unit, –, 3], [–, 3, Parsing], [3, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), dixita.kagathara@darshan.ac.in], [), dixita.kagathara@darshan.ac.in, +91], [dixita.kagathara@darshan.ac.in, +91, -], [+91, -, 97277], [-, 97277, 47317], [97277, 47317, (], [47317, (, CE], [(, CE, Department], [CE, Department, )]]

>> Noun Phrases are: 
[PowerPoint Presentation,  Unit, 3 Parsing Theory, I]

>> Named Entities are: 
[('CE Department)', 'ORG')]


============================ Sentence 2 =============================

Computer Engineering Department Prof. Dixita B. Kagathara Compiler Design (CD) GTU # 2170701   Darshan Institute of Engineering & Technology, Rajkot     Looping Topics to be covered  Role of parser Context free grammar Derivation & Ambiguity Left recursion & Left factoring Classification of parsing Backtracking LL(1) parsing Recursive descent paring Shift reduce parsing Operator precedence parsing LR parsing             Role of Parser        Role of parser   


>> Tokens are: 
[Computer, Engineering, Department, Prof., Dixita, B., Kagathara, Compiler, Design, (, CD, ), GTU, #, 2170701,   , Darshan, Institute, Engineering, &, Technology, ,, Rajkot,    , , Looping, Topics, covered,  , Role, parser, Context, free, grammar, Derivation, &, Ambiguity, Left, recursion, &, Left, factoring, Classification, parsing, Backtracking, LL(1, ), parsing, Recursive, descent, paring, Shift, reduce, parsing, Operator, precedence, parsing, LR, parsing,             , Role, Parser,        , Role, parser,  ] 

>> PoS Tags are: 
[('Computer', 'PROPN'), ('Engineering', 'PROPN'), ('Department', 'PROPN'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B.', 'PROPN'), ('Kagathara', 'PROPN'), ('Compiler', 'PROPN'), ('Design', 'PROPN'), ('(', 'PUNCT'), ('CD', 'PROPN'), (')', 'PUNCT'), ('GTU', 'NOUN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('  ', 'SPACE'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('Engineering', 'PROPN'), ('&', 'CCONJ'), ('Technology', 'PROPN'), (',', 'PUNCT'), ('Rajkot', 'PROPN'), ('   ', 'SPACE'), ('\uf050', 'PROPN'), ('Looping', 'VERB'), ('Topics', 'PROPN'), ('covered', 'VERB'), (' ', 'SPACE'), ('Role', 'PROPN'), ('parser', 'ADJ'), ('Context', 'PROPN'), ('free', 'ADJ'), ('grammar', 'NOUN'), ('Derivation', 'PROPN'), ('&', 'CCONJ'), ('Ambiguity', 'PROPN'), ('Left', 'VERB'), ('recursion', 'NOUN'), ('&', 'CCONJ'), ('Left', 'PROPN'), ('factoring', 'VERB'), ('Classification', 'PROPN'), ('parsing', 'VERB'), ('Backtracking', 'PROPN'), ('LL(1', 'PROPN'), (')', 'PUNCT'), ('parsing', 'VERB'), ('Recursive', 'PROPN'), ('descent', 'NOUN'), ('paring', 'NOUN'), ('Shift', 'NOUN'), ('reduce', 'VERB'), ('parsing', 'VERB'), ('Operator', 'NOUN'), ('precedence', 'NOUN'), ('parsing', 'VERB'), ('LR', 'PROPN'), ('parsing', 'VERB'), ('            ', 'SPACE'), ('Role', 'PROPN'), ('Parser', 'PROPN'), ('       ', 'SPACE'), ('Role', 'PROPN'), ('parser', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Computer', 'compound'), ('Engineering', 'compound'), ('Department', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B.', 'compound'), ('Kagathara', 'compound'), ('Compiler', 'compound'), ('Design', 'nsubj'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('GTU', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('  ', 'appos'), ('Darshan', 'compound'), ('Institute', 'appos'), ('Engineering', 'pobj'), ('&', 'cc'), ('Technology', 'conj'), (',', 'punct'), ('Rajkot', 'appos'), ('   ', 'appos'), ('\uf050', 'appos'), ('Looping', 'advcl'), ('Topics', 'dobj'), ('covered', 'ccomp'), (' ', 'punct'), ('Role', 'appos'), ('parser', 'amod'), ('Context', 'nmod'), ('free', 'amod'), ('grammar', 'compound'), ('Derivation', 'pobj'), ('&', 'cc'), ('Ambiguity', 'conj'), ('Left', 'ROOT'), ('recursion', 'dobj'), ('&', 'cc'), ('Left', 'conj'), ('factoring', 'advcl'), ('Classification', 'dobj'), ('parsing', 'pcomp'), ('Backtracking', 'compound'), ('LL(1', 'dobj'), (')', 'punct'), ('parsing', 'advcl'), ('Recursive', 'compound'), ('descent', 'compound'), ('paring', 'nsubj'), ('Shift', 'nsubj'), ('reduce', 'ccomp'), ('parsing', 'xcomp'), ('Operator', 'compound'), ('precedence', 'nsubj'), ('parsing', 'ccomp'), ('LR', 'nsubj'), ('parsing', 'ccomp'), ('            ', 'compound'), ('Role', 'dobj'), ('Parser', 'pobj'), ('       ', 'compound'), ('Role', 'dobj'), ('parser', 'pobj'), (' ', 'punct')]

>> Bigrams: 
[[Computer, Engineering], [Engineering, Department], [Department, Prof.], [Prof., Dixita], [Dixita, B.], [B., Kagathara], [Kagathara, Compiler], [Compiler, Design], [Design, (], [(, CD], [CD, )], [), GTU], [GTU, #], [#, 2170701], [2170701,   ], [  , Darshan], [Darshan, Institute], [Institute, Engineering], [Engineering, &], [&, Technology], [Technology, ,], [,, Rajkot], [Rajkot,    ], [   , ], [, Looping], [Looping, Topics], [Topics, covered], [covered,  ], [ , Role], [Role, parser], [parser, Context], [Context, free], [free, grammar], [grammar, Derivation], [Derivation, &], [&, Ambiguity], [Ambiguity, Left], [Left, recursion], [recursion, &], [&, Left], [Left, factoring], [factoring, Classification], [Classification, parsing], [parsing, Backtracking], [Backtracking, LL(1], [LL(1, )], [), parsing], [parsing, Recursive], [Recursive, descent], [descent, paring], [paring, Shift], [Shift, reduce], [reduce, parsing], [parsing, Operator], [Operator, precedence], [precedence, parsing], [parsing, LR], [LR, parsing], [parsing,             ], [            , Role], [Role, Parser], [Parser,        ], [       , Role], [Role, parser], [parser,  ]]

>> Trigrams: 
[[Computer, Engineering, Department], [Engineering, Department, Prof.], [Department, Prof., Dixita], [Prof., Dixita, B.], [Dixita, B., Kagathara], [B., Kagathara, Compiler], [Kagathara, Compiler, Design], [Compiler, Design, (], [Design, (, CD], [(, CD, )], [CD, ), GTU], [), GTU, #], [GTU, #, 2170701], [#, 2170701,   ], [2170701,   , Darshan], [  , Darshan, Institute], [Darshan, Institute, Engineering], [Institute, Engineering, &], [Engineering, &, Technology], [&, Technology, ,], [Technology, ,, Rajkot], [,, Rajkot,    ], [Rajkot,    , ], [   , , Looping], [, Looping, Topics], [Looping, Topics, covered], [Topics, covered,  ], [covered,  , Role], [ , Role, parser], [Role, parser, Context], [parser, Context, free], [Context, free, grammar], [free, grammar, Derivation], [grammar, Derivation, &], [Derivation, &, Ambiguity], [&, Ambiguity, Left], [Ambiguity, Left, recursion], [Left, recursion, &], [recursion, &, Left], [&, Left, factoring], [Left, factoring, Classification], [factoring, Classification, parsing], [Classification, parsing, Backtracking], [parsing, Backtracking, LL(1], [Backtracking, LL(1, )], [LL(1, ), parsing], [), parsing, Recursive], [parsing, Recursive, descent], [Recursive, descent, paring], [descent, paring, Shift], [paring, Shift, reduce], [Shift, reduce, parsing], [reduce, parsing, Operator], [parsing, Operator, precedence], [Operator, precedence, parsing], [precedence, parsing, LR], [parsing, LR, parsing], [LR, parsing,             ], [parsing,             , Role], [            , Role, Parser], [Role, Parser,        ], [Parser,        , Role], [       , Role, parser], [Role, parser,  ]]

>> Noun Phrases are: 
[Computer Engineering Department Prof. Dixita B. Kagathara Compiler Design, CD, GTU, Darshan Institute, Engineering, Technology, Rajkot, , Topics, Role, parser Context free grammar Derivation, Ambiguity, recursion, Left, Classification, Backtracking LL(1, Recursive descent paring, Shift, Operator precedence, LR,             Role, Parser,        Role, parser]

>> Named Entities are: 
[('Dixita B.', 'PERSON'), ('Darshan Institute of Engineering & Technology', 'ORG'), ('Looping Topics', 'ORG'), ('Derivation & Ambiguity', 'ORG'), ('LR', 'ORG')]


============================ Sentence 3 =============================

Parser obtains a string of token from the lexical analyzer and reports  syntax error if any otherwise generates syntax tree. 


>> Tokens are: 
[Parser, obtains, string, token, lexical, analyzer, reports,  , syntax, error, generates, syntax, tree, .] 

>> PoS Tags are: 
[('Parser', 'PROPN'), ('obtains', 'VERB'), ('string', 'NOUN'), ('token', 'ADJ'), ('lexical', 'ADJ'), ('analyzer', 'NOUN'), ('reports', 'VERB'), (' ', 'SPACE'), ('syntax', 'NOUN'), ('error', 'NOUN'), ('generates', 'VERB'), ('syntax', 'NOUN'), ('tree', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Parser', 'nsubj'), ('obtains', 'ROOT'), ('string', 'dobj'), ('token', 'pobj'), ('lexical', 'amod'), ('analyzer', 'pobj'), ('reports', 'conj'), (' ', 'compound'), ('syntax', 'compound'), ('error', 'dobj'), ('generates', 'advcl'), ('syntax', 'compound'), ('tree', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Parser, obtains], [obtains, string], [string, token], [token, lexical], [lexical, analyzer], [analyzer, reports], [reports,  ], [ , syntax], [syntax, error], [error, generates], [generates, syntax], [syntax, tree], [tree, .]]

>> Trigrams: 
[[Parser, obtains, string], [obtains, string, token], [string, token, lexical], [token, lexical, analyzer], [lexical, analyzer, reports], [analyzer, reports,  ], [reports,  , syntax], [ , syntax, error], [syntax, error, generates], [error, generates, syntax], [generates, syntax, tree], [syntax, tree, .]]

>> Noun Phrases are: 
[Parser, a string, the lexical analyzer,  syntax error, syntax tree]

>> Named Entities are: 
[('Parser', 'ORG')]


============================ Sentence 4 =============================

There are two types of parser:  Top-down parser  Bottom-up parser 


>> Tokens are: 
[types, parser, :,  , -, parser,  , -, parser] 

>> PoS Tags are: 
[('types', 'NOUN'), ('parser', 'NOUN'), (':', 'PUNCT'), (' ', 'SPACE'), ('-', 'PUNCT'), ('parser', 'NOUN'), (' ', 'SPACE'), ('-', 'PUNCT'), ('parser', 'NOUN')] 

>> Dependency Tags are: 
[('types', 'attr'), ('parser', 'pobj'), (':', 'punct'), (' ', 'attr'), ('-', 'punct'), ('parser', 'amod'), (' ', 'compound'), ('-', 'punct'), ('parser', 'appos')]

>> Bigrams: 
[[types, parser], [parser, :], [:,  ], [ , -], [-, parser], [parser,  ], [ , -], [-, parser]]

>> Trigrams: 
[[types, parser, :], [parser, :,  ], [:,  , -], [ , -, parser], [-, parser,  ], [parser,  , -], [ , -, parser]]

>> Noun Phrases are: 
[two types, parser, Top-down parser  Bottom-up parser]

>> Named Entities are: 
[('two', 'CARDINAL')]


============================ Sentence 5 =============================

 Rest of front end Parse tree Token IR Lexical analyzer Symbol table Parser Get next token Source program Parsetree     


>> Tokens are: 
[ , Rest, end, Parse, tree, Token, IR, Lexical, analyzer, Symbol, table, Parser, token, Source, program, Parsetree,    ] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('Rest', 'NOUN'), ('end', 'NOUN'), ('Parse', 'NOUN'), ('tree', 'NOUN'), ('Token', 'PROPN'), ('IR', 'PROPN'), ('Lexical', 'PROPN'), ('analyzer', 'NOUN'), ('Symbol', 'PROPN'), ('table', 'NOUN'), ('Parser', 'PROPN'), ('token', 'ADJ'), ('Source', 'NOUN'), ('program', 'NOUN'), ('Parsetree', 'PROPN'), ('   ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'nmod'), ('Rest', 'nmod'), ('end', 'pobj'), ('Parse', 'compound'), ('tree', 'ROOT'), ('Token', 'compound'), ('IR', 'compound'), ('Lexical', 'compound'), ('analyzer', 'compound'), ('Symbol', 'compound'), ('table', 'appos'), ('Parser', 'compound'), ('token', 'amod'), ('Source', 'compound'), ('program', 'appos'), ('Parsetree', 'compound'), ('   ', 'appos')]

>> Bigrams: 
[[ , Rest], [Rest, end], [end, Parse], [Parse, tree], [tree, Token], [Token, IR], [IR, Lexical], [Lexical, analyzer], [analyzer, Symbol], [Symbol, table], [table, Parser], [Parser, token], [token, Source], [Source, program], [program, Parsetree], [Parsetree,    ]]

>> Trigrams: 
[[ , Rest, end], [Rest, end, Parse], [end, Parse, tree], [Parse, tree, Token], [tree, Token, IR], [Token, IR, Lexical], [IR, Lexical, analyzer], [Lexical, analyzer, Symbol], [analyzer, Symbol, table], [Symbol, table, Parser], [table, Parser, token], [Parser, token, Source], [token, Source, program], [Source, program, Parsetree], [program, Parsetree,    ]]

>> Noun Phrases are: 
[front end, Token IR Lexical analyzer Symbol table, next token Source program]

>> Named Entities are: 
[('Parse', 'ORG'), ('Token IR Lexical', 'ORG')]


============================ Sentence 6 =============================

Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#› 


>> Tokens are: 
[Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›] 

>> PoS Tags are: 
[('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X')] 

>> Dependency Tags are: 
[('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'nsubj'), ('#', 'appos'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct')]

>> Bigrams: 
[[Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›]]

>> Trigrams: 
[[Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›]]

>> Noun Phrases are: 
[Prof. Jay R Dhamsaniya, (PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('Jay R Dhamsaniya', 'ORG'), ('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 7 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 8 =============================

Context free grammar        Context free grammar A context free grammar (CFG) is a 4-tuple where,  is finite set of non terminals,  is disjoint finite set of terminals,  is an element of  and it’s a start symbol,  is a finite set formulas of the form  where  and    Nonterminal symbol:   


>> Tokens are: 
[Context, free, grammar,        , Context, free, grammar, context, free, grammar, (, CFG, ), 4, -, tuple, ,,  , finite, set, non, terminals, ,,  , disjoint, finite, set, terminals, ,,  , element,  , start, symbol, ,,  , finite, set, formulas, form,  ,  ,    , Nonterminal, symbol, :,  ] 

>> PoS Tags are: 
[('Context', 'PROPN'), ('free', 'ADJ'), ('grammar', 'NOUN'), ('       ', 'SPACE'), ('Context', 'PROPN'), ('free', 'ADJ'), ('grammar', 'NOUN'), ('context', 'NOUN'), ('free', 'ADJ'), ('grammar', 'NOUN'), ('(', 'PUNCT'), ('CFG', 'PROPN'), (')', 'PUNCT'), ('4', 'NUM'), ('-', 'PUNCT'), ('tuple', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('finite', 'ADJ'), ('set', 'NOUN'), ('non', 'ADJ'), ('terminals', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('disjoint', 'NOUN'), ('finite', 'NOUN'), ('set', 'NOUN'), ('terminals', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('element', 'NOUN'), (' ', 'SPACE'), ('start', 'ADJ'), ('symbol', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('finite', 'ADJ'), ('set', 'VERB'), ('formulas', 'NOUN'), ('form', 'NOUN'), (' ', 'SPACE'), (' ', 'SPACE'), ('   ', 'SPACE'), ('Nonterminal', 'ADJ'), ('symbol', 'NOUN'), (':', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Context', 'nmod'), ('free', 'amod'), ('grammar', 'nsubj'), ('       ', 'nmod'), ('Context', 'nmod'), ('free', 'amod'), ('grammar', 'appos'), ('context', 'npadvmod'), ('free', 'amod'), ('grammar', 'appos'), ('(', 'punct'), ('CFG', 'appos'), (')', 'punct'), ('4', 'nummod'), ('-', 'punct'), ('tuple', 'attr'), (',', 'punct'), (' ', 'nsubj'), ('finite', 'amod'), ('set', 'attr'), ('non', 'amod'), ('terminals', 'pobj'), (',', 'punct'), (' ', 'nsubj'), ('disjoint', 'compound'), ('finite', 'compound'), ('set', 'attr'), ('terminals', 'pobj'), (',', 'punct'), (' ', 'nsubj'), ('element', 'attr'), (' ', 'pobj'), ('start', 'compound'), ('symbol', 'attr'), (',', 'punct'), (' ', 'nsubj'), ('finite', 'amod'), ('set', 'amod'), ('formulas', 'attr'), ('form', 'pobj'), (' ', 'appos'), (' ', 'nmod'), ('   ', 'conj'), ('Nonterminal', 'amod'), ('symbol', 'relcl'), (':', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[Context, free], [free, grammar], [grammar,        ], [       , Context], [Context, free], [free, grammar], [grammar, context], [context, free], [free, grammar], [grammar, (], [(, CFG], [CFG, )], [), 4], [4, -], [-, tuple], [tuple, ,], [,,  ], [ , finite], [finite, set], [set, non], [non, terminals], [terminals, ,], [,,  ], [ , disjoint], [disjoint, finite], [finite, set], [set, terminals], [terminals, ,], [,,  ], [ , element], [element,  ], [ , start], [start, symbol], [symbol, ,], [,,  ], [ , finite], [finite, set], [set, formulas], [formulas, form], [form,  ], [ ,  ], [ ,    ], [   , Nonterminal], [Nonterminal, symbol], [symbol, :], [:,  ]]

>> Trigrams: 
[[Context, free, grammar], [free, grammar,        ], [grammar,        , Context], [       , Context, free], [Context, free, grammar], [free, grammar, context], [grammar, context, free], [context, free, grammar], [free, grammar, (], [grammar, (, CFG], [(, CFG, )], [CFG, ), 4], [), 4, -], [4, -, tuple], [-, tuple, ,], [tuple, ,,  ], [,,  , finite], [ , finite, set], [finite, set, non], [set, non, terminals], [non, terminals, ,], [terminals, ,,  ], [,,  , disjoint], [ , disjoint, finite], [disjoint, finite, set], [finite, set, terminals], [set, terminals, ,], [terminals, ,,  ], [,,  , element], [ , element,  ], [element,  , start], [ , start, symbol], [start, symbol, ,], [symbol, ,,  ], [,,  , finite], [ , finite, set], [finite, set, formulas], [set, formulas, form], [formulas, form,  ], [form,  ,  ], [ ,  ,    ], [ ,    , Nonterminal], [   , Nonterminal, symbol], [Nonterminal, symbol, :], [symbol, :,  ]]

>> Noun Phrases are: 
[Context free grammar,        Context free grammar, A context free grammar, (CFG, a 4-tuple, finite set, non terminals, disjoint finite set, terminals, an element, it, a start symbol, a finite set formulas, the form]

>> Named Entities are: 
[('4', 'CARDINAL')]


============================ Sentence 9 =============================

The name of syntax category of a language, e.g.--.-, noun, verb, etc.   


>> Tokens are: 
[syntax, category, language, ,, e.g.--.-, ,, noun, ,, verb, ,, etc, .,  ] 

>> PoS Tags are: 
[('syntax', 'NOUN'), ('category', 'NOUN'), ('language', 'NOUN'), (',', 'PUNCT'), ('e.g.--.-', 'ADJ'), (',', 'PUNCT'), ('noun', 'NOUN'), (',', 'PUNCT'), ('verb', 'NOUN'), (',', 'PUNCT'), ('etc', 'X'), ('.', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('syntax', 'compound'), ('category', 'pobj'), ('language', 'pobj'), (',', 'punct'), ('e.g.--.-', 'appos'), (',', 'punct'), ('noun', 'conj'), (',', 'punct'), ('verb', 'conj'), (',', 'punct'), ('etc', 'conj'), ('.', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[syntax, category], [category, language], [language, ,], [,, e.g.--.-], [e.g.--.-, ,], [,, noun], [noun, ,], [,, verb], [verb, ,], [,, etc], [etc, .], [.,  ]]

>> Trigrams: 
[[syntax, category, language], [category, language, ,], [language, ,, e.g.--.-], [,, e.g.--.-, ,], [e.g.--.-, ,, noun], [,, noun, ,], [noun, ,, verb], [,, verb, ,], [verb, ,, etc], [,, etc, .], [etc, .,  ]]

>> Noun Phrases are: 
[The name, syntax category, a language, noun, verb]

>> Named Entities are: 
[]


============================ Sentence 10 =============================

The It is written as a single capital letter, or as a name enclosed between < … >, e.g.--.-, A or <Noun>.   


>> Tokens are: 
[written, single, capital, letter, ,, enclosed, <, …, >, ,, e.g.--.-, ,, <, Noun, >, .,  ] 

>> PoS Tags are: 
[('written', 'VERB'), ('single', 'ADJ'), ('capital', 'NOUN'), ('letter', 'NOUN'), (',', 'PUNCT'), ('enclosed', 'VERB'), ('<', 'X'), ('…', 'PUNCT'), ('>', 'X'), (',', 'PUNCT'), ('e.g.--.-', 'PROPN'), (',', 'PUNCT'), ('<', 'X'), ('Noun', 'PROPN'), ('>', 'X'), ('.', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('written', 'ROOT'), ('single', 'amod'), ('capital', 'compound'), ('letter', 'pobj'), (',', 'punct'), ('enclosed', 'acl'), ('<', 'pobj'), ('…', 'punct'), ('>', 'appos'), (',', 'punct'), ('e.g.--.-', 'conj'), (',', 'punct'), ('<', 'conj'), ('Noun', 'appos'), ('>', 'dep'), ('.', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[written, single], [single, capital], [capital, letter], [letter, ,], [,, enclosed], [enclosed, <], [<, …], […, >], [>, ,], [,, e.g.--.-], [e.g.--.-, ,], [,, <], [<, Noun], [Noun, >], [>, .], [.,  ]]

>> Trigrams: 
[[written, single, capital], [single, capital, letter], [capital, letter, ,], [letter, ,, enclosed], [,, enclosed, <], [enclosed, <, …], [<, …, >], […, >, ,], [>, ,, e.g.--.-], [,, e.g.--.-, ,], [e.g.--.-, ,, <], [,, <, Noun], [<, Noun, >], [Noun, >, .], [>, .,  ]]

>> Noun Phrases are: 
[The It, a single capital letter, a name, e.g.--.-, A, Noun]

>> Named Entities are: 
[]


============================ Sentence 11 =============================

Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'nsubj'), ('#', 'appos'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[Prof. Jay R Dhamsaniya, (PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 12 =============================

Context free grammar A context free grammar (CFG) is a 4-tuple where,  is finite set of non terminals,  is disjoint finite set of terminals,  is an element of  and it’s a start symbol,  is a finite set formulas of the form  where  and    Terminal symbol:   


>> Tokens are: 
[Context, free, grammar, context, free, grammar, (, CFG, ), 4, -, tuple, ,,  , finite, set, non, terminals, ,,  , disjoint, finite, set, terminals, ,,  , element,  , start, symbol, ,,  , finite, set, formulas, form,  ,  ,    , Terminal, symbol, :,  ] 

>> PoS Tags are: 
[('Context', 'PROPN'), ('free', 'ADJ'), ('grammar', 'NOUN'), ('context', 'NOUN'), ('free', 'ADJ'), ('grammar', 'NOUN'), ('(', 'PUNCT'), ('CFG', 'PROPN'), (')', 'PUNCT'), ('4', 'NUM'), ('-', 'PUNCT'), ('tuple', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('finite', 'ADJ'), ('set', 'NOUN'), ('non', 'ADJ'), ('terminals', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('disjoint', 'NOUN'), ('finite', 'NOUN'), ('set', 'NOUN'), ('terminals', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('element', 'NOUN'), (' ', 'SPACE'), ('start', 'ADJ'), ('symbol', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('finite', 'ADJ'), ('set', 'VERB'), ('formulas', 'NOUN'), ('form', 'NOUN'), (' ', 'SPACE'), (' ', 'SPACE'), ('   ', 'SPACE'), ('Terminal', 'ADJ'), ('symbol', 'NOUN'), (':', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Context', 'nmod'), ('free', 'amod'), ('grammar', 'nmod'), ('context', 'npadvmod'), ('free', 'amod'), ('grammar', 'nsubj'), ('(', 'punct'), ('CFG', 'appos'), (')', 'punct'), ('4', 'nummod'), ('-', 'punct'), ('tuple', 'attr'), (',', 'punct'), (' ', 'nsubj'), ('finite', 'amod'), ('set', 'attr'), ('non', 'amod'), ('terminals', 'pobj'), (',', 'punct'), (' ', 'nsubj'), ('disjoint', 'compound'), ('finite', 'compound'), ('set', 'attr'), ('terminals', 'pobj'), (',', 'punct'), (' ', 'nsubj'), ('element', 'attr'), (' ', 'pobj'), ('start', 'compound'), ('symbol', 'attr'), (',', 'punct'), (' ', 'nsubj'), ('finite', 'amod'), ('set', 'amod'), ('formulas', 'attr'), ('form', 'pobj'), (' ', 'appos'), (' ', 'nsubj'), ('   ', 'amod'), ('Terminal', 'amod'), ('symbol', 'conj'), (':', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[Context, free], [free, grammar], [grammar, context], [context, free], [free, grammar], [grammar, (], [(, CFG], [CFG, )], [), 4], [4, -], [-, tuple], [tuple, ,], [,,  ], [ , finite], [finite, set], [set, non], [non, terminals], [terminals, ,], [,,  ], [ , disjoint], [disjoint, finite], [finite, set], [set, terminals], [terminals, ,], [,,  ], [ , element], [element,  ], [ , start], [start, symbol], [symbol, ,], [,,  ], [ , finite], [finite, set], [set, formulas], [formulas, form], [form,  ], [ ,  ], [ ,    ], [   , Terminal], [Terminal, symbol], [symbol, :], [:,  ]]

>> Trigrams: 
[[Context, free, grammar], [free, grammar, context], [grammar, context, free], [context, free, grammar], [free, grammar, (], [grammar, (, CFG], [(, CFG, )], [CFG, ), 4], [), 4, -], [4, -, tuple], [-, tuple, ,], [tuple, ,,  ], [,,  , finite], [ , finite, set], [finite, set, non], [set, non, terminals], [non, terminals, ,], [terminals, ,,  ], [,,  , disjoint], [ , disjoint, finite], [disjoint, finite, set], [finite, set, terminals], [set, terminals, ,], [terminals, ,,  ], [,,  , element], [ , element,  ], [element,  , start], [ , start, symbol], [start, symbol, ,], [symbol, ,,  ], [,,  , finite], [ , finite, set], [finite, set, formulas], [set, formulas, form], [formulas, form,  ], [form,  ,  ], [ ,  ,    ], [ ,    , Terminal], [   , Terminal, symbol], [Terminal, symbol, :], [symbol, :,  ]]

>> Noun Phrases are: 
[Context free grammar A context free grammar, (CFG, a 4-tuple, finite set, non terminals, disjoint finite set, terminals, an element, it, a start symbol, a finite set formulas, the form,    Terminal symbol]

>> Named Entities are: 
[('4', 'CARDINAL')]


============================ Sentence 13 =============================

A symbol in the alphabet. 


>> Tokens are: 
[symbol, alphabet, .] 

>> PoS Tags are: 
[('symbol', 'NOUN'), ('alphabet', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('symbol', 'ROOT'), ('alphabet', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[symbol, alphabet], [alphabet, .]]

>> Trigrams: 
[[symbol, alphabet, .]]

>> Noun Phrases are: 
[A symbol, the alphabet]

>> Named Entities are: 
[]


============================ Sentence 14 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 15 =============================

It is denoted by lower case letter and punctuation marks used in language. 


>> Tokens are: 
[denoted, lower, case, letter, punctuation, marks, language, .] 

>> PoS Tags are: 
[('denoted', 'VERB'), ('lower', 'ADJ'), ('case', 'NOUN'), ('letter', 'NOUN'), ('punctuation', 'NOUN'), ('marks', 'NOUN'), ('language', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('denoted', 'ROOT'), ('lower', 'amod'), ('case', 'compound'), ('letter', 'pobj'), ('punctuation', 'compound'), ('marks', 'conj'), ('language', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[denoted, lower], [lower, case], [case, letter], [letter, punctuation], [punctuation, marks], [marks, language], [language, .]]

>> Trigrams: 
[[denoted, lower, case], [lower, case, letter], [case, letter, punctuation], [letter, punctuation, marks], [punctuation, marks, language], [marks, language, .]]

>> Noun Phrases are: 
[It, lower case letter, punctuation marks, language]

>> Named Entities are: 
[]


============================ Sentence 16 =============================

  <Noun Phrase> → <Article><Noun> <Article> → a | an | the <Noun> → boy | apple         Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[  , <, Noun, Phrase, >, →, <, Article><Noun, >, <, Article, >, →, |, |, <, Noun, >, →, boy, |, apple,         , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('<', 'X'), ('Noun', 'PROPN'), ('Phrase', 'PROPN'), ('>', 'PUNCT'), ('→', 'SYM'), ('<', 'X'), ('Article><Noun', 'PROPN'), ('>', 'PUNCT'), ('<', 'PUNCT'), ('Article', 'PROPN'), ('>', 'X'), ('→', 'SYM'), ('|', 'NOUN'), ('|', 'NOUN'), ('<', 'X'), ('Noun', 'PROPN'), ('>', 'PROPN'), ('→', 'PUNCT'), ('boy', 'NOUN'), ('|', 'NOUN'), ('apple', 'NOUN'), ('        ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'dep'), ('<', 'appos'), ('Noun', 'compound'), ('Phrase', 'appos'), ('>', 'punct'), ('→', 'punct'), ('<', 'appos'), ('Article><Noun', 'appos'), ('>', 'punct'), ('<', 'appos'), ('Article', 'appos'), ('>', 'appos'), ('→', 'punct'), ('|', 'appos'), ('|', 'npadvmod'), ('<', 'nmod'), ('Noun', 'appos'), ('>', 'punct'), ('→', 'punct'), ('boy', 'compound'), ('|', 'appos'), ('apple', 'compound'), ('        ', 'compound'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'appos'), ('#', 'nmod'), ('3130006', 'appos'), ('(', 'punct'), ('PS', 'nsubj'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[  , <], [<, Noun], [Noun, Phrase], [Phrase, >], [>, →], [→, <], [<, Article><Noun], [Article><Noun, >], [>, <], [<, Article], [Article, >], [>, →], [→, |], [|, |], [|, <], [<, Noun], [Noun, >], [>, →], [→, boy], [boy, |], [|, apple], [apple,         ], [        , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[  , <, Noun], [<, Noun, Phrase], [Noun, Phrase, >], [Phrase, >, →], [>, →, <], [→, <, Article><Noun], [<, Article><Noun, >], [Article><Noun, >, <], [>, <, Article], [<, Article, >], [Article, >, →], [>, →, |], [→, |, |], [|, |, <], [|, <, Noun], [<, Noun, >], [Noun, >, →], [>, →, boy], [→, boy, |], [boy, |, apple], [|, apple,         ], [apple,         , Prof.], [        , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[Noun Phrase, Article><Noun, Article, a |, the <Noun, → boy |, apple         Prof. Jay R Dhamsaniya, PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 17 =============================

Context free grammar A context free grammar (CFG) is a 4-tuple where,  is finite set of non terminals,  is disjoint finite set of terminals,  is an element of  and it’s a start symbol,  is a finite set formulas of the form  where  and    Start symbol:   


>> Tokens are: 
[Context, free, grammar, context, free, grammar, (, CFG, ), 4, -, tuple, ,,  , finite, set, non, terminals, ,,  , disjoint, finite, set, terminals, ,,  , element,  , start, symbol, ,,  , finite, set, formulas, form,  ,  ,    , Start, symbol, :,  ] 

>> PoS Tags are: 
[('Context', 'PROPN'), ('free', 'ADJ'), ('grammar', 'NOUN'), ('context', 'NOUN'), ('free', 'ADJ'), ('grammar', 'NOUN'), ('(', 'PUNCT'), ('CFG', 'PROPN'), (')', 'PUNCT'), ('4', 'NUM'), ('-', 'PUNCT'), ('tuple', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('finite', 'ADJ'), ('set', 'NOUN'), ('non', 'ADJ'), ('terminals', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('disjoint', 'NOUN'), ('finite', 'NOUN'), ('set', 'NOUN'), ('terminals', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('element', 'NOUN'), (' ', 'SPACE'), ('start', 'ADJ'), ('symbol', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('finite', 'ADJ'), ('set', 'VERB'), ('formulas', 'NOUN'), ('form', 'NOUN'), (' ', 'SPACE'), (' ', 'SPACE'), ('   ', 'SPACE'), ('Start', 'PROPN'), ('symbol', 'NOUN'), (':', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Context', 'nmod'), ('free', 'amod'), ('grammar', 'nmod'), ('context', 'npadvmod'), ('free', 'amod'), ('grammar', 'nsubj'), ('(', 'punct'), ('CFG', 'appos'), (')', 'punct'), ('4', 'nummod'), ('-', 'punct'), ('tuple', 'attr'), (',', 'punct'), (' ', 'nsubj'), ('finite', 'amod'), ('set', 'attr'), ('non', 'amod'), ('terminals', 'pobj'), (',', 'punct'), (' ', 'nsubj'), ('disjoint', 'compound'), ('finite', 'compound'), ('set', 'attr'), ('terminals', 'pobj'), (',', 'punct'), (' ', 'nsubj'), ('element', 'attr'), (' ', 'pobj'), ('start', 'compound'), ('symbol', 'attr'), (',', 'punct'), (' ', 'nsubj'), ('finite', 'amod'), ('set', 'amod'), ('formulas', 'attr'), ('form', 'pobj'), (' ', 'appos'), (' ', 'meta'), ('   ', 'conj'), ('Start', 'compound'), ('symbol', 'appos'), (':', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[Context, free], [free, grammar], [grammar, context], [context, free], [free, grammar], [grammar, (], [(, CFG], [CFG, )], [), 4], [4, -], [-, tuple], [tuple, ,], [,,  ], [ , finite], [finite, set], [set, non], [non, terminals], [terminals, ,], [,,  ], [ , disjoint], [disjoint, finite], [finite, set], [set, terminals], [terminals, ,], [,,  ], [ , element], [element,  ], [ , start], [start, symbol], [symbol, ,], [,,  ], [ , finite], [finite, set], [set, formulas], [formulas, form], [form,  ], [ ,  ], [ ,    ], [   , Start], [Start, symbol], [symbol, :], [:,  ]]

>> Trigrams: 
[[Context, free, grammar], [free, grammar, context], [grammar, context, free], [context, free, grammar], [free, grammar, (], [grammar, (, CFG], [(, CFG, )], [CFG, ), 4], [), 4, -], [4, -, tuple], [-, tuple, ,], [tuple, ,,  ], [,,  , finite], [ , finite, set], [finite, set, non], [set, non, terminals], [non, terminals, ,], [terminals, ,,  ], [,,  , disjoint], [ , disjoint, finite], [disjoint, finite, set], [finite, set, terminals], [set, terminals, ,], [terminals, ,,  ], [,,  , element], [ , element,  ], [element,  , start], [ , start, symbol], [start, symbol, ,], [symbol, ,,  ], [,,  , finite], [ , finite, set], [finite, set, formulas], [set, formulas, form], [formulas, form,  ], [form,  ,  ], [ ,  ,    ], [ ,    , Start], [   , Start, symbol], [Start, symbol, :], [symbol, :,  ]]

>> Noun Phrases are: 
[Context free grammar A context free grammar, (CFG, a 4-tuple, finite set, non terminals, disjoint finite set, terminals, an element, it, a start symbol, a finite set formulas, the form, where  and    Start symbol]

>> Named Entities are: 
[('4', 'CARDINAL')]


============================ Sentence 18 =============================

First nonterminal symbol of the grammar is called start symbol. 


>> Tokens are: 
[nonterminal, symbol, grammar, called, start, symbol, .] 

>> PoS Tags are: 
[('nonterminal', 'ADJ'), ('symbol', 'NOUN'), ('grammar', 'NOUN'), ('called', 'VERB'), ('start', 'NOUN'), ('symbol', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('nonterminal', 'amod'), ('symbol', 'nsubjpass'), ('grammar', 'pobj'), ('called', 'ROOT'), ('start', 'compound'), ('symbol', 'oprd'), ('.', 'punct')]

>> Bigrams: 
[[nonterminal, symbol], [symbol, grammar], [grammar, called], [called, start], [start, symbol], [symbol, .]]

>> Trigrams: 
[[nonterminal, symbol, grammar], [symbol, grammar, called], [grammar, called, start], [called, start, symbol], [start, symbol, .]]

>> Noun Phrases are: 
[First nonterminal symbol, the grammar, start symbol]

>> Named Entities are: 
[('First', 'ORDINAL')]


============================ Sentence 19 =============================

   <Noun Phrase> → <Article><Noun> <Article> → a | an | the <Noun> → boy | apple     Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[   , <, Noun, Phrase, >, →, <, Article><Noun, >, <, Article, >, →, |, |, <, Noun, >, →, boy, |, apple,     , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('   ', 'SPACE'), ('<', 'X'), ('Noun', 'PROPN'), ('Phrase', 'PROPN'), ('>', 'PUNCT'), ('→', 'SYM'), ('<', 'X'), ('Article><Noun', 'PROPN'), ('>', 'PUNCT'), ('<', 'PUNCT'), ('Article', 'PROPN'), ('>', 'X'), ('→', 'SYM'), ('|', 'NOUN'), ('|', 'NOUN'), ('<', 'X'), ('Noun', 'PROPN'), ('>', 'PROPN'), ('→', 'PUNCT'), ('boy', 'NOUN'), ('|', 'NOUN'), ('apple', 'NOUN'), ('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('   ', 'dep'), ('<', 'appos'), ('Noun', 'compound'), ('Phrase', 'nsubj'), ('>', 'punct'), ('→', 'punct'), ('<', 'appos'), ('Article><Noun', 'appos'), ('>', 'punct'), ('<', 'punct'), ('Article', 'appos'), ('>', 'nummod'), ('→', 'punct'), ('|', 'appos'), ('|', 'npadvmod'), ('<', 'nmod'), ('Noun', 'appos'), ('>', 'punct'), ('→', 'punct'), ('boy', 'appos'), ('|', 'punct'), ('apple', 'appos'), ('    ', 'compound'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'appos'), ('#', 'nmod'), ('3130006', 'appos'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'dobj'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[   , <], [<, Noun], [Noun, Phrase], [Phrase, >], [>, →], [→, <], [<, Article><Noun], [Article><Noun, >], [>, <], [<, Article], [Article, >], [>, →], [→, |], [|, |], [|, <], [<, Noun], [Noun, >], [>, →], [→, boy], [boy, |], [|, apple], [apple,     ], [    , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[   , <, Noun], [<, Noun, Phrase], [Noun, Phrase, >], [Phrase, >, →], [>, →, <], [→, <, Article><Noun], [<, Article><Noun, >], [Article><Noun, >, <], [>, <, Article], [<, Article, >], [Article, >, →], [>, →, |], [→, |, |], [|, |, <], [|, <, Noun], [<, Noun, >], [Noun, >, →], [>, →, boy], [→, boy, |], [boy, |, apple], [|, apple,     ], [apple,     , Prof.], [    , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[   <Noun Phrase, Article><Noun, Article, a |, the <Noun, → boy, apple,     Prof. Jay R Dhamsaniya, PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 20 =============================

Context free grammar A context free grammar (CFG) is a 4-tuple where,  is finite set of non terminals,  is disjoint finite set of terminals,  is an element of  and it’s a start symbol,  is a finite set formulas of the form  where  and    Production:   A production, also called a rewriting rule, is a rule of grammar. 


>> Tokens are: 
[Context, free, grammar, context, free, grammar, (, CFG, ), 4, -, tuple, ,,  , finite, set, non, terminals, ,,  , disjoint, finite, set, terminals, ,,  , element,  , start, symbol, ,,  , finite, set, formulas, form,  ,  ,    , Production, :,   , production, ,, called, rewriting, rule, ,, rule, grammar, .] 

>> PoS Tags are: 
[('Context', 'PROPN'), ('free', 'ADJ'), ('grammar', 'NOUN'), ('context', 'NOUN'), ('free', 'ADJ'), ('grammar', 'NOUN'), ('(', 'PUNCT'), ('CFG', 'PROPN'), (')', 'PUNCT'), ('4', 'NUM'), ('-', 'PUNCT'), ('tuple', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('finite', 'ADJ'), ('set', 'NOUN'), ('non', 'ADJ'), ('terminals', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('disjoint', 'NOUN'), ('finite', 'NOUN'), ('set', 'NOUN'), ('terminals', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('element', 'NOUN'), (' ', 'SPACE'), ('start', 'ADJ'), ('symbol', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('finite', 'ADJ'), ('set', 'VERB'), ('formulas', 'NOUN'), ('form', 'NOUN'), (' ', 'SPACE'), (' ', 'SPACE'), ('   ', 'SPACE'), ('Production', 'NOUN'), (':', 'PUNCT'), ('  ', 'SPACE'), ('production', 'NOUN'), (',', 'PUNCT'), ('called', 'VERB'), ('rewriting', 'VERB'), ('rule', 'NOUN'), (',', 'PUNCT'), ('rule', 'NOUN'), ('grammar', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Context', 'nmod'), ('free', 'amod'), ('grammar', 'nmod'), ('context', 'npadvmod'), ('free', 'amod'), ('grammar', 'nsubj'), ('(', 'punct'), ('CFG', 'appos'), (')', 'punct'), ('4', 'nummod'), ('-', 'punct'), ('tuple', 'attr'), (',', 'punct'), (' ', 'nsubj'), ('finite', 'amod'), ('set', 'attr'), ('non', 'amod'), ('terminals', 'pobj'), (',', 'punct'), (' ', 'nsubj'), ('disjoint', 'compound'), ('finite', 'compound'), ('set', 'attr'), ('terminals', 'pobj'), (',', 'punct'), (' ', 'nsubj'), ('element', 'attr'), (' ', 'pobj'), ('start', 'compound'), ('symbol', 'attr'), (',', 'punct'), (' ', 'nsubj'), ('finite', 'amod'), ('set', 'amod'), ('formulas', 'attr'), ('form', 'pobj'), (' ', 'appos'), (' ', 'nsubj'), ('   ', 'compound'), ('Production', 'attr'), (':', 'punct'), ('  ', 'nmod'), ('production', 'nsubj'), (',', 'punct'), ('called', 'ccomp'), ('rewriting', 'amod'), ('rule', 'dobj'), (',', 'punct'), ('rule', 'attr'), ('grammar', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Context, free], [free, grammar], [grammar, context], [context, free], [free, grammar], [grammar, (], [(, CFG], [CFG, )], [), 4], [4, -], [-, tuple], [tuple, ,], [,,  ], [ , finite], [finite, set], [set, non], [non, terminals], [terminals, ,], [,,  ], [ , disjoint], [disjoint, finite], [finite, set], [set, terminals], [terminals, ,], [,,  ], [ , element], [element,  ], [ , start], [start, symbol], [symbol, ,], [,,  ], [ , finite], [finite, set], [set, formulas], [formulas, form], [form,  ], [ ,  ], [ ,    ], [   , Production], [Production, :], [:,   ], [  , production], [production, ,], [,, called], [called, rewriting], [rewriting, rule], [rule, ,], [,, rule], [rule, grammar], [grammar, .]]

>> Trigrams: 
[[Context, free, grammar], [free, grammar, context], [grammar, context, free], [context, free, grammar], [free, grammar, (], [grammar, (, CFG], [(, CFG, )], [CFG, ), 4], [), 4, -], [4, -, tuple], [-, tuple, ,], [tuple, ,,  ], [,,  , finite], [ , finite, set], [finite, set, non], [set, non, terminals], [non, terminals, ,], [terminals, ,,  ], [,,  , disjoint], [ , disjoint, finite], [disjoint, finite, set], [finite, set, terminals], [set, terminals, ,], [terminals, ,,  ], [,,  , element], [ , element,  ], [element,  , start], [ , start, symbol], [start, symbol, ,], [symbol, ,,  ], [,,  , finite], [ , finite, set], [finite, set, formulas], [set, formulas, form], [formulas, form,  ], [form,  ,  ], [ ,  ,    ], [ ,    , Production], [   , Production, :], [Production, :,   ], [:,   , production], [  , production, ,], [production, ,, called], [,, called, rewriting], [called, rewriting, rule], [rewriting, rule, ,], [rule, ,, rule], [,, rule, grammar], [rule, grammar, .]]

>> Noun Phrases are: 
[Context free grammar A context free grammar, (CFG, a 4-tuple, finite set, non terminals, disjoint finite set, terminals, an element, it, a start symbol, a finite set formulas, the form, where  and    Production,   A production, a rewriting rule, a rule, grammar]

>> Named Entities are: 
[('4', 'CARDINAL')]


============================ Sentence 21 =============================

It has the form of A nonterminal symbol → String of terminal and nonterminal symbols     <Noun Phrase> → <Article><Noun> <Article> → a | an | the <Noun> → boy | apple       Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[form, nonterminal, symbol, →, String, terminal, nonterminal, symbols,     , <, Noun, Phrase, >, →, <, Article><Noun, >, <, Article, >, →, |, |, <, Noun, >, →, boy, |, apple,       , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('form', 'NOUN'), ('nonterminal', 'ADJ'), ('symbol', 'NOUN'), ('→', 'SYM'), ('String', 'NOUN'), ('terminal', 'NOUN'), ('nonterminal', 'ADJ'), ('symbols', 'NOUN'), ('    ', 'SPACE'), ('<', 'X'), ('Noun', 'PROPN'), ('Phrase', 'PROPN'), ('>', 'PUNCT'), ('→', 'SYM'), ('<', 'X'), ('Article><Noun', 'PROPN'), ('>', 'PUNCT'), ('<', 'PUNCT'), ('Article', 'PROPN'), ('>', 'X'), ('→', 'SYM'), ('|', 'NOUN'), ('|', 'NOUN'), ('<', 'X'), ('Noun', 'PROPN'), ('>', 'PROPN'), ('→', 'PUNCT'), ('boy', 'NOUN'), ('|', 'NOUN'), ('apple', 'NOUN'), ('      ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('form', 'dobj'), ('nonterminal', 'amod'), ('symbol', 'nmod'), ('→', 'punct'), ('String', 'pobj'), ('terminal', 'pobj'), ('nonterminal', 'conj'), ('symbols', 'conj'), ('    ', 'nmod'), ('<', 'dep'), ('Noun', 'compound'), ('Phrase', 'ccomp'), ('>', 'punct'), ('→', 'punct'), ('<', 'punct'), ('Article><Noun', 'appos'), ('>', 'punct'), ('<', 'punct'), ('Article', 'appos'), ('>', 'nummod'), ('→', 'punct'), ('|', 'appos'), ('|', 'npadvmod'), ('<', 'nmod'), ('Noun', 'appos'), ('>', 'punct'), ('→', 'punct'), ('boy', 'compound'), ('|', 'appos'), ('apple', 'compound'), ('      ', 'compound'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'appos'), ('#', 'nmod'), ('3130006', 'appos'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'dobj'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'ccomp'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[form, nonterminal], [nonterminal, symbol], [symbol, →], [→, String], [String, terminal], [terminal, nonterminal], [nonterminal, symbols], [symbols,     ], [    , <], [<, Noun], [Noun, Phrase], [Phrase, >], [>, →], [→, <], [<, Article><Noun], [Article><Noun, >], [>, <], [<, Article], [Article, >], [>, →], [→, |], [|, |], [|, <], [<, Noun], [Noun, >], [>, →], [→, boy], [boy, |], [|, apple], [apple,       ], [      , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[form, nonterminal, symbol], [nonterminal, symbol, →], [symbol, →, String], [→, String, terminal], [String, terminal, nonterminal], [terminal, nonterminal, symbols], [nonterminal, symbols,     ], [symbols,     , <], [    , <, Noun], [<, Noun, Phrase], [Noun, Phrase, >], [Phrase, >, →], [>, →, <], [→, <, Article><Noun], [<, Article><Noun, >], [Article><Noun, >, <], [>, <, Article], [<, Article, >], [Article, >, →], [>, →, |], [→, |, |], [|, |, <], [|, <, Noun], [<, Noun, >], [Noun, >, →], [>, →, boy], [→, boy, |], [boy, |, apple], [|, apple,       ], [apple,       , Prof.], [      , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[It, the form, A nonterminal symbol → String, terminal, symbols, Article><Noun, Article, a |, the <Noun, → boy |, apple       Prof. Jay R Dhamsaniya, PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 22 =============================

Example: Grammar Write terminals, non terminals, start symbol, and productions for following grammar. 


>> Tokens are: 
[Example, :, Grammar, Write, terminals, ,, non, terminals, ,, start, symbol, ,, productions, following, grammar, .] 

>> PoS Tags are: 
[('Example', 'NOUN'), (':', 'PUNCT'), ('Grammar', 'PROPN'), ('Write', 'PROPN'), ('terminals', 'NOUN'), (',', 'PUNCT'), ('non', 'ADJ'), ('terminals', 'NOUN'), (',', 'PUNCT'), ('start', 'VERB'), ('symbol', 'NOUN'), (',', 'PUNCT'), ('productions', 'NOUN'), ('following', 'VERB'), ('grammar', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Example', 'dep'), (':', 'punct'), ('Grammar', 'compound'), ('Write', 'nsubj'), ('terminals', 'dobj'), (',', 'punct'), ('non', 'amod'), ('terminals', 'conj'), (',', 'punct'), ('start', 'ROOT'), ('symbol', 'dobj'), (',', 'punct'), ('productions', 'conj'), ('following', 'pcomp'), ('grammar', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Example, :], [:, Grammar], [Grammar, Write], [Write, terminals], [terminals, ,], [,, non], [non, terminals], [terminals, ,], [,, start], [start, symbol], [symbol, ,], [,, productions], [productions, following], [following, grammar], [grammar, .]]

>> Trigrams: 
[[Example, :, Grammar], [:, Grammar, Write], [Grammar, Write, terminals], [Write, terminals, ,], [terminals, ,, non], [,, non, terminals], [non, terminals, ,], [terminals, ,, start], [,, start, symbol], [start, symbol, ,], [symbol, ,, productions], [,, productions, following], [productions, following, grammar], [following, grammar, .]]

>> Noun Phrases are: 
[Grammar Write, terminals, non terminals, symbol, productions, grammar]

>> Named Entities are: 
[('Grammar Write', 'PERSON')]


============================ Sentence 23 =============================

E  E O E| (E) | -E | id O  + | - | * | /  | ↑   


>> Tokens are: 
[E, , E, O, E|, (, E, ), |, -E, |, d, O, , +, |, -, |, *, |, /,  , |, ↑,  ] 

>> PoS Tags are: 
[('E', 'NOUN'), ('\uf0e0', 'NOUN'), ('E', 'NOUN'), ('O', 'NOUN'), ('E|', 'NOUN'), ('(', 'PUNCT'), ('E', 'NOUN'), (')', 'PUNCT'), ('|', 'NOUN'), ('-E', 'PUNCT'), ('|', 'NOUN'), ('d', 'NOUN'), ('O', 'NOUN'), ('\uf0e0', 'NOUN'), ('+', 'ADV'), ('|', 'NOUN'), ('-', 'PUNCT'), ('|', 'NOUN'), ('*', 'PUNCT'), ('|', 'NOUN'), ('/', 'SYM'), (' ', 'SPACE'), ('|', 'NOUN'), ('↑', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('E', 'nmod'), ('\uf0e0', 'nmod'), ('E', 'nmod'), ('O', 'nmod'), ('E|', 'nmod'), ('(', 'punct'), ('E', 'nmod'), (')', 'punct'), ('|', 'dep'), ('-E', 'punct'), ('|', 'appos'), ('d', 'appos'), ('O', 'nmod'), ('\uf0e0', 'nmod'), ('+', 'case'), ('|', 'compound'), ('-', 'punct'), ('|', 'appos'), ('*', 'punct'), ('|', 'npadvmod'), ('/', 'punct'), (' ', 'nummod'), ('|', 'dep'), ('↑', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[E, ], [, E], [E, O], [O, E|], [E|, (], [(, E], [E, )], [), |], [|, -E], [-E, |], [|, d], [d, O], [O, ], [, +], [+, |], [|, -], [-, |], [|, *], [*, |], [|, /], [/,  ], [ , |], [|, ↑], [↑,  ]]

>> Trigrams: 
[[E, , E], [, E, O], [E, O, E|], [O, E|, (], [E|, (, E], [(, E, )], [E, ), |], [), |, -E], [|, -E, |], [-E, |, d], [|, d, O], [d, O, ], [O, , +], [, +, |], [+, |, -], [|, -, |], [-, |, *], [|, *, |], [*, |, /], [|, /,  ], [/,  , |], [ , |, ↑], [|, ↑,  ]]

>> Noun Phrases are: 
[|, id, | - |]

>> Named Entities are: 
[]


============================ Sentence 24 =============================

Terminals: 	id + - * / ↑ ( ) 


>> Tokens are: 
[Terminals, :, 	, d, +, -, *, /, ↑, (, )] 

>> PoS Tags are: 
[('Terminals', 'NOUN'), (':', 'PUNCT'), ('\t', 'SPACE'), ('d', 'NOUN'), ('+', 'NOUN'), ('-', 'PUNCT'), ('*', 'PUNCT'), ('/', 'SYM'), ('↑', 'PROPN'), ('(', 'PUNCT'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('Terminals', 'ROOT'), (':', 'punct'), ('\t', 'appos'), ('d', 'appos'), ('+', 'appos'), ('-', 'punct'), ('*', 'punct'), ('/', 'punct'), ('↑', 'prep'), ('(', 'punct'), (')', 'punct')]

>> Bigrams: 
[[Terminals, :], [:, 	], [	, d], [d, +], [+, -], [-, *], [*, /], [/, ↑], [↑, (], [(, )]]

>> Trigrams: 
[[Terminals, :, 	], [:, 	, d], [	, d, +], [d, +, -], [+, -, *], [-, *, /], [*, /, ↑], [/, ↑, (], [↑, (, )]]

>> Noun Phrases are: 
[Terminals, id, +]

>> Named Entities are: 
[]


============================ Sentence 25 =============================

Non terminals: E, O Start symbol: 	E Productions: 	E  E O E| (E) | -E | id 		O  + | - | * | /  | ↑     Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›  Derivation & Ambiguity        Derivation Derivation is used to find whether the string belongs to a given grammar or not. 


>> Tokens are: 
[Non, terminals, :, E, ,, O, Start, symbol, :, 	, E, Productions, :, 	, E, , E, O, E|, (, E, ), |, -E, |, d, 		, O, , +, |, -, |, *, |, /,  , |, ↑,     , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  , Derivation, &, Ambiguity,        , Derivation, Derivation, find, string, belongs, given, grammar, .] 

>> PoS Tags are: 
[('Non', 'ADJ'), ('terminals', 'NOUN'), (':', 'PUNCT'), ('E', 'NOUN'), (',', 'PUNCT'), ('O', 'INTJ'), ('Start', 'PROPN'), ('symbol', 'NOUN'), (':', 'PUNCT'), ('\t', 'SPACE'), ('E', 'NOUN'), ('Productions', 'PROPN'), (':', 'PUNCT'), ('\t', 'SPACE'), ('E', 'PROPN'), ('\uf0e0', 'NOUN'), ('E', 'NOUN'), ('O', 'NOUN'), ('E|', 'NOUN'), ('(', 'PUNCT'), ('E', 'NOUN'), (')', 'PUNCT'), ('|', 'NOUN'), ('-E', 'PUNCT'), ('|', 'NOUN'), ('d', 'NOUN'), ('\t\t', 'SPACE'), ('O', 'INTJ'), ('\uf0e0', 'NOUN'), ('+', 'ADV'), ('|', 'NOUN'), ('-', 'PUNCT'), ('|', 'NOUN'), ('*', 'PUNCT'), ('|', 'NOUN'), ('/', 'SYM'), (' ', 'SPACE'), ('|', 'NOUN'), ('↑', 'VERB'), ('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE'), ('Derivation', 'PROPN'), ('&', 'CCONJ'), ('Ambiguity', 'PROPN'), ('       ', 'SPACE'), ('Derivation', 'PROPN'), ('Derivation', 'PROPN'), ('find', 'VERB'), ('string', 'NOUN'), ('belongs', 'VERB'), ('given', 'VERB'), ('grammar', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Non', 'nmod'), ('terminals', 'dobj'), (':', 'punct'), ('E', 'appos'), (',', 'punct'), ('O', 'intj'), ('Start', 'compound'), ('symbol', 'appos'), (':', 'punct'), ('\t', 'compound'), ('E', 'compound'), ('Productions', 'appos'), (':', 'punct'), ('\t', 'compound'), ('E', 'compound'), ('\uf0e0', 'nmod'), ('E', 'nmod'), ('O', 'nmod'), ('E|', 'nmod'), ('(', 'punct'), ('E', 'appos'), (')', 'punct'), ('|', 'dobj'), ('-E', 'punct'), ('|', 'dobj'), ('d', 'appos'), ('\t\t', 'nmod'), ('O', 'nmod'), ('\uf0e0', 'appos'), ('+', 'prep'), ('|', 'compound'), ('-', 'punct'), ('|', 'npadvmod'), ('*', 'punct'), ('|', 'npadvmod'), ('/', 'punct'), (' ', 'nsubj'), ('|', 'appos'), ('↑', 'advcl'), ('    ', 'compound'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'dobj'), ('#', 'nmod'), ('3130006', 'npadvmod'), ('(', 'punct'), ('PS', 'nsubj'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'parataxis'), ('  ', 'conj'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'amod'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct'), ('Derivation', 'nmod'), ('&', 'cc'), ('Ambiguity', 'conj'), ('       ', 'compound'), ('Derivation', 'compound'), ('Derivation', 'nsubjpass'), ('find', 'xcomp'), ('string', 'nsubj'), ('belongs', 'ccomp'), ('given', 'amod'), ('grammar', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Non, terminals], [terminals, :], [:, E], [E, ,], [,, O], [O, Start], [Start, symbol], [symbol, :], [:, 	], [	, E], [E, Productions], [Productions, :], [:, 	], [	, E], [E, ], [, E], [E, O], [O, E|], [E|, (], [(, E], [E, )], [), |], [|, -E], [-E, |], [|, d], [d, 		], [		, O], [O, ], [, +], [+, |], [|, -], [-, |], [|, *], [*, |], [|, /], [/,  ], [ , |], [|, ↑], [↑,     ], [    , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ], [ , Derivation], [Derivation, &], [&, Ambiguity], [Ambiguity,        ], [       , Derivation], [Derivation, Derivation], [Derivation, find], [find, string], [string, belongs], [belongs, given], [given, grammar], [grammar, .]]

>> Trigrams: 
[[Non, terminals, :], [terminals, :, E], [:, E, ,], [E, ,, O], [,, O, Start], [O, Start, symbol], [Start, symbol, :], [symbol, :, 	], [:, 	, E], [	, E, Productions], [E, Productions, :], [Productions, :, 	], [:, 	, E], [	, E, ], [E, , E], [, E, O], [E, O, E|], [O, E|, (], [E|, (, E], [(, E, )], [E, ), |], [), |, -E], [|, -E, |], [-E, |, d], [|, d, 		], [d, 		, O], [		, O, ], [O, , +], [, +, |], [+, |, -], [|, -, |], [-, |, *], [|, *, |], [*, |, /], [|, /,  ], [/,  , |], [ , |, ↑], [|, ↑,     ], [↑,     , Prof.], [    , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ], [‹#›,  , Derivation], [ , Derivation, &], [Derivation, &, Ambiguity], [&, Ambiguity,        ], [Ambiguity,        , Derivation], [       , Derivation, Derivation], [Derivation, Derivation, find], [Derivation, find, string], [find, string, belongs], [string, belongs, given], [belongs, given, grammar], [given, grammar, .]]

>> Noun Phrases are: 
[terminals, E, O Start symbol, 	E Productions, 	E  E O E| (E, |, -E |, d, 		O , |,     Prof. Jay R Dhamsaniya, PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I, the string, a given grammar]

>> Named Entities are: 
[('Jay R Dhamsaniya', 'ORG'), ('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 26 =============================

Types of derivations are:   


>> Tokens are: 
[Types, derivations, :,  ] 

>> PoS Tags are: 
[('Types', 'NOUN'), ('derivations', 'NOUN'), (':', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Types', 'nsubj'), ('derivations', 'pobj'), (':', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[Types, derivations], [derivations, :], [:,  ]]

>> Trigrams: 
[[Types, derivations, :], [derivations, :,  ]]

>> Noun Phrases are: 
[Types, derivations]

>> Named Entities are: 
[]


============================ Sentence 27 =============================

Leftmost derivation   


>> Tokens are: 
[Leftmost, derivation,  ] 

>> PoS Tags are: 
[('Leftmost', 'PROPN'), ('derivation', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Leftmost', 'compound'), ('derivation', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[Leftmost, derivation], [derivation,  ]]

>> Trigrams: 
[[Leftmost, derivation,  ]]

>> Noun Phrases are: 
[Leftmost derivation]

>> Named Entities are: 
[]


============================ Sentence 28 =============================

Rightmost derivation     Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[Rightmost, derivation,     , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('Rightmost', 'VERB'), ('derivation', 'NOUN'), ('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Rightmost', 'nsubj'), ('derivation', 'dobj'), ('    ', 'compound'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'appos'), ('#', 'appos'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'nsubj'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'parataxis'), ('  ', 'nummod'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'appos'), ('‹#›', 'punct'), ('  ', 'appos'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'appos'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[Rightmost, derivation], [derivation,     ], [    , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[Rightmost, derivation,     ], [derivation,     , Prof.], [    , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[derivation,     Prof. Jay R Dhamsaniya, PS, Unit, Basic Probability, Prof. Dixita B Kagathara, #, (CD, Unit, Theory, I]

>> Named Entities are: 
[('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 29 =============================

Leftmost derivation   


>> Tokens are: 
[Leftmost, derivation,  ] 

>> PoS Tags are: 
[('Leftmost', 'PROPN'), ('derivation', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Leftmost', 'compound'), ('derivation', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[Leftmost, derivation], [derivation,  ]]

>> Trigrams: 
[[Leftmost, derivation,  ]]

>> Noun Phrases are: 
[Leftmost derivation]

>> Named Entities are: 
[]


============================ Sentence 30 =============================

A derivation of a string  in a grammar  is a left most derivation if at every step the left most non terminal is replaced. 


>> Tokens are: 
[derivation, string,  , grammar,  , left, derivation, step, left, non, terminal, replaced, .] 

>> PoS Tags are: 
[('derivation', 'NOUN'), ('string', 'NOUN'), (' ', 'SPACE'), ('grammar', 'NOUN'), (' ', 'SPACE'), ('left', 'ADJ'), ('derivation', 'NOUN'), ('step', 'NOUN'), ('left', 'ADJ'), ('non', 'ADJ'), ('terminal', 'NOUN'), ('replaced', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('derivation', 'nsubj'), ('string', 'compound'), (' ', 'pobj'), ('grammar', 'pobj'), (' ', 'nsubj'), ('left', 'amod'), ('derivation', 'attr'), ('step', 'pobj'), ('left', 'amod'), ('non', 'amod'), ('terminal', 'nsubjpass'), ('replaced', 'advcl'), ('.', 'punct')]

>> Bigrams: 
[[derivation, string], [string,  ], [ , grammar], [grammar,  ], [ , left], [left, derivation], [derivation, step], [step, left], [left, non], [non, terminal], [terminal, replaced], [replaced, .]]

>> Trigrams: 
[[derivation, string,  ], [string,  , grammar], [ , grammar,  ], [grammar,  , left], [ , left, derivation], [left, derivation, step], [derivation, step, left], [step, left, non], [left, non, terminal], [non, terminal, replaced], [terminal, replaced, .]]

>> Noun Phrases are: 
[A derivation, a grammar, a left most derivation, every step, the left most non terminal]

>> Named Entities are: 
[]


============================ Sentence 31 =============================

Grammar: SS+S | S-S | S*S | S/S | a 	Output string: a*a-a   		S 


>> Tokens are: 
[Grammar, :, SS+S, |, S, -, S, |, S*S, |, S, /, S, |, 	, Output, string, :, a*a, -,   		, S] 

>> PoS Tags are: 
[('Grammar', 'NOUN'), (':', 'PUNCT'), ('S\uf0e0S+S', 'ADJ'), ('|', 'NOUN'), ('S', 'PROPN'), ('-', 'PUNCT'), ('S', 'PROPN'), ('|', 'NOUN'), ('S*S', 'DET'), ('|', 'NOUN'), ('S', 'PROPN'), ('/', 'SYM'), ('S', 'PROPN'), ('|', 'NOUN'), ('\t', 'SPACE'), ('Output', 'NOUN'), ('string', 'NOUN'), (':', 'PUNCT'), ('a*a', 'PUNCT'), ('-', 'PUNCT'), ('  \t\t', 'SPACE'), ('S', 'PROPN')] 

>> Dependency Tags are: 
[('Grammar', 'npadvmod'), (':', 'punct'), ('S\uf0e0S+S', 'amod'), ('|', 'compound'), ('S', 'compound'), ('-', 'punct'), ('S', 'dobj'), ('|', 'appos'), ('S*S', 'punct'), ('|', 'npadvmod'), ('S', 'nmod'), ('/', 'punct'), ('S', 'compound'), ('|', 'appos'), ('\t', 'compound'), ('Output', 'compound'), ('string', 'ROOT'), (':', 'punct'), ('a*a', 'appos'), ('-', 'punct'), ('  \t\t', 'nummod'), ('S', 'appos')]

>> Bigrams: 
[[Grammar, :], [:, SS+S], [SS+S, |], [|, S], [S, -], [-, S], [S, |], [|, S*S], [S*S, |], [|, S], [S, /], [/, S], [S, |], [|, 	], [	, Output], [Output, string], [string, :], [:, a*a], [a*a, -], [-,   		], [  		, S]]

>> Trigrams: 
[[Grammar, :, SS+S], [:, SS+S, |], [SS+S, |, S], [|, S, -], [S, -, S], [-, S, |], [S, |, S*S], [|, S*S, |], [S*S, |, S], [|, S, /], [S, /, S], [/, S, |], [S, |, 	], [|, 	, Output], [	, Output, string], [Output, string, :], [string, :, a*a], [:, a*a, -], [a*a, -,   		], [-,   		, S]]

>> Noun Phrases are: 
[| S-S, S/S |, a   		S]

>> Named Entities are: 
[('Grammar', 'PERSON'), ('S/S', 'ORG')]


============================ Sentence 32 =============================

	S-S S*S-S a*S-S a*a-S 	a*a-a   a S - S a a S * S S Parse tree represents the structure of derivation   Leftmost Derivation Parse tree    Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#› 


>> Tokens are: 
[	, S, -, S, S*S, -, S, a*S, -, S, a*a, -, S, 	, a*a, -,   , S, -, S, S, *, S, S, Parse, tree, represents, structure, derivation,   , Leftmost, Derivation, Parse, tree,    , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('\uf0e0S', 'PROPN'), ('-', 'PUNCT'), ('S', 'PROPN'), ('\uf0e0S*S', 'VERB'), ('-', 'PUNCT'), ('S', 'NOUN'), ('\uf0e0a*S', 'PROPN'), ('-', 'PUNCT'), ('S', 'PROPN'), ('\uf0e0a*a', 'PROPN'), ('-', 'PUNCT'), ('S', 'PROPN'), ('\t', 'SPACE'), ('\uf0e0a*a', 'PROPN'), ('-', 'PUNCT'), ('  ', 'SPACE'), ('S', 'PROPN'), ('-', 'PUNCT'), ('S', 'PROPN'), ('S', 'PROPN'), ('*', 'PROPN'), ('S', 'NOUN'), ('S', 'PROPN'), ('Parse', 'PROPN'), ('tree', 'NOUN'), ('represents', 'VERB'), ('structure', 'NOUN'), ('derivation', 'NOUN'), ('  ', 'SPACE'), ('Leftmost', 'PROPN'), ('Derivation', 'PROPN'), ('Parse', 'NOUN'), ('tree', 'NOUN'), ('   ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X')] 

>> Dependency Tags are: 
[('\t', 'nmod'), ('\uf0e0S', 'compound'), ('-', 'punct'), ('S', 'nmod'), ('\uf0e0S*S', 'compound'), ('-', 'punct'), ('S', 'compound'), ('\uf0e0a*S', 'amod'), ('-', 'punct'), ('S', 'compound'), ('\uf0e0a*a', 'compound'), ('-', 'punct'), ('S', 'compound'), ('\t', 'compound'), ('\uf0e0a*a', 'nsubj'), ('-', 'punct'), ('  ', 'appos'), ('S', 'compound'), ('-', 'punct'), ('S', 'appos'), ('S', 'compound'), ('*', 'punct'), ('S', 'compound'), ('S', 'compound'), ('Parse', 'compound'), ('tree', 'nsubj'), ('represents', 'ccomp'), ('structure', 'dobj'), ('derivation', 'pobj'), ('  ', 'dobj'), ('Leftmost', 'compound'), ('Derivation', 'compound'), ('Parse', 'compound'), ('tree', 'compound'), ('   ', 'nummod'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'appos'), ('#', 'nmod'), ('3130006', 'appos'), ('(', 'punct'), ('PS', 'nsubj'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'parataxis'), ('  ', 'dobj'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct')]

>> Bigrams: 
[[	, S], [S, -], [-, S], [S, S*S], [S*S, -], [-, S], [S, a*S], [a*S, -], [-, S], [S, a*a], [a*a, -], [-, S], [S, 	], [	, a*a], [a*a, -], [-,   ], [  , S], [S, -], [-, S], [S, S], [S, *], [*, S], [S, S], [S, Parse], [Parse, tree], [tree, represents], [represents, structure], [structure, derivation], [derivation,   ], [  , Leftmost], [Leftmost, Derivation], [Derivation, Parse], [Parse, tree], [tree,    ], [   , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›]]

>> Trigrams: 
[[	, S, -], [S, -, S], [-, S, S*S], [S, S*S, -], [S*S, -, S], [-, S, a*S], [S, a*S, -], [a*S, -, S], [-, S, a*a], [S, a*a, -], [a*a, -, S], [-, S, 	], [S, 	, a*a], [	, a*a, -], [a*a, -,   ], [-,   , S], [  , S, -], [S, -, S], [-, S, S], [S, S, *], [S, *, S], [*, S, S], [S, S, Parse], [S, Parse, tree], [Parse, tree, represents], [tree, represents, structure], [represents, structure, derivation], [structure, derivation,   ], [derivation,   , Leftmost], [  , Leftmost, Derivation], [Leftmost, Derivation, Parse], [Derivation, Parse, tree], [Parse, tree,    ], [tree,    , Prof.], [   , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›]]

>> Noun Phrases are: 
[	S-S S*S-S a*S-S a*a-S 	a*a, a S - S, a a S * S S Parse tree, the structure, derivation, Leftmost Derivation Parse tree    Prof. Jay R Dhamsaniya, PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('Leftmost Derivation Parse', 'ORG'), ('Jay R Dhamsaniya', 'ORG'), ('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 33 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 34 =============================

Rightmost derivation   


>> Tokens are: 
[Rightmost, derivation,  ] 

>> PoS Tags are: 
[('Rightmost', 'PROPN'), ('derivation', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Rightmost', 'ROOT'), ('derivation', 'dobj'), (' ', 'punct')]

>> Bigrams: 
[[Rightmost, derivation], [derivation,  ]]

>> Trigrams: 
[[Rightmost, derivation,  ]]

>> Noun Phrases are: 
[Rightmost, derivation]

>> Named Entities are: 
[]


============================ Sentence 35 =============================

A derivation of a string  in a grammar  is a right most derivation if at every step the right most non terminal is replaced. 


>> Tokens are: 
[derivation, string,  , grammar,  , right, derivation, step, right, non, terminal, replaced, .] 

>> PoS Tags are: 
[('derivation', 'NOUN'), ('string', 'NOUN'), (' ', 'SPACE'), ('grammar', 'NOUN'), (' ', 'SPACE'), ('right', 'ADV'), ('derivation', 'NOUN'), ('step', 'NOUN'), ('right', 'ADV'), ('non', 'ADJ'), ('terminal', 'NOUN'), ('replaced', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('derivation', 'nsubj'), ('string', 'compound'), (' ', 'pobj'), ('grammar', 'pobj'), (' ', 'nsubj'), ('right', 'advmod'), ('derivation', 'attr'), ('step', 'pobj'), ('right', 'amod'), ('non', 'amod'), ('terminal', 'nsubjpass'), ('replaced', 'advcl'), ('.', 'punct')]

>> Bigrams: 
[[derivation, string], [string,  ], [ , grammar], [grammar,  ], [ , right], [right, derivation], [derivation, step], [step, right], [right, non], [non, terminal], [terminal, replaced], [replaced, .]]

>> Trigrams: 
[[derivation, string,  ], [string,  , grammar], [ , grammar,  ], [grammar,  , right], [ , right, derivation], [right, derivation, step], [derivation, step, right], [step, right, non], [right, non, terminal], [non, terminal, replaced], [terminal, replaced, .]]

>> Noun Phrases are: 
[A derivation, a grammar, a right most derivation, every step, the right most non terminal]

>> Named Entities are: 
[]


============================ Sentence 36 =============================

It is all called canonical derivation. 


>> Tokens are: 
[called, canonical, derivation, .] 

>> PoS Tags are: 
[('called', 'VERB'), ('canonical', 'ADJ'), ('derivation', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('called', 'ROOT'), ('canonical', 'amod'), ('derivation', 'oprd'), ('.', 'punct')]

>> Bigrams: 
[[called, canonical], [canonical, derivation], [derivation, .]]

>> Trigrams: 
[[called, canonical, derivation], [canonical, derivation, .]]

>> Noun Phrases are: 
[It, canonical derivation]

>> Named Entities are: 
[]


============================ Sentence 37 =============================

Grammar: SS+S | S-S | S*S | S/S | a 	Output string: a*a-a            S 		S*S 		 S*S-S 		 S*S-a 		 S*a-a 		 a*a-a  a S * S 


>> Tokens are: 
[Grammar, :, SS+S, |, S, -, S, |, S*S, |, S, /, S, |, 	, Output, string, :, a*a, -,            , S, 		, S*S, 		 , S*S, -, S, 		 , S*S, -, 		 , S*a, -, 		 , a*a, -,  , S, *, S] 

>> PoS Tags are: 
[('Grammar', 'NOUN'), (':', 'PUNCT'), ('S\uf0e0S+S', 'ADJ'), ('|', 'NOUN'), ('S', 'PROPN'), ('-', 'PUNCT'), ('S', 'PROPN'), ('|', 'NOUN'), ('S*S', 'DET'), ('|', 'NOUN'), ('S', 'PROPN'), ('/', 'SYM'), ('S', 'PROPN'), ('|', 'NOUN'), ('\t', 'SPACE'), ('Output', 'NOUN'), ('string', 'NOUN'), (':', 'PUNCT'), ('a*a', 'PUNCT'), ('-', 'PUNCT'), ('           ', 'SPACE'), ('S', 'PROPN'), ('\t\t', 'SPACE'), ('\uf0e0S*S', 'VERB'), ('\t\t ', 'SPACE'), ('\uf0e0S*S', 'VERB'), ('-', 'PUNCT'), ('S', 'NOUN'), ('\t\t ', 'SPACE'), ('\uf0e0S*S', 'VERB'), ('-', 'PUNCT'), ('\t\t ', 'SPACE'), ('\uf0e0S*a', 'PROPN'), ('-', 'PUNCT'), ('\t\t ', 'SPACE'), ('\uf0e0a*a', 'PROPN'), ('-', 'PUNCT'), (' ', 'SPACE'), ('S', 'PROPN'), ('*', 'PUNCT'), ('S', 'PROPN')] 

>> Dependency Tags are: 
[('Grammar', 'npadvmod'), (':', 'punct'), ('S\uf0e0S+S', 'amod'), ('|', 'compound'), ('S', 'compound'), ('-', 'punct'), ('S', 'dobj'), ('|', 'appos'), ('S*S', 'punct'), ('|', 'npadvmod'), ('S', 'nmod'), ('/', 'punct'), ('S', 'compound'), ('|', 'appos'), ('\t', 'compound'), ('Output', 'compound'), ('string', 'ROOT'), (':', 'punct'), ('a*a', 'appos'), ('-', 'punct'), ('           ', 'compound'), ('S', 'appos'), ('\t\t', 'npadvmod'), ('\uf0e0S*S', 'ccomp'), ('\t\t ', 'prep'), ('\uf0e0S*S', 'compound'), ('-', 'punct'), ('S', 'compound'), ('\t\t ', 'pobj'), ('\uf0e0S*S', 'advcl'), ('-', 'punct'), ('\t\t ', 'appos'), ('\uf0e0S*a', 'appos'), ('-', 'punct'), ('\t\t ', 'appos'), ('\uf0e0a*a', 'dobj'), ('-', 'punct'), (' ', 'appos'), ('S', 'compound'), ('*', 'punct'), ('S', 'appos')]

>> Bigrams: 
[[Grammar, :], [:, SS+S], [SS+S, |], [|, S], [S, -], [-, S], [S, |], [|, S*S], [S*S, |], [|, S], [S, /], [/, S], [S, |], [|, 	], [	, Output], [Output, string], [string, :], [:, a*a], [a*a, -], [-,            ], [           , S], [S, 		], [		, S*S], [S*S, 		 ], [		 , S*S], [S*S, -], [-, S], [S, 		 ], [		 , S*S], [S*S, -], [-, 		 ], [		 , S*a], [S*a, -], [-, 		 ], [		 , a*a], [a*a, -], [-,  ], [ , S], [S, *], [*, S]]

>> Trigrams: 
[[Grammar, :, SS+S], [:, SS+S, |], [SS+S, |, S], [|, S, -], [S, -, S], [-, S, |], [S, |, S*S], [|, S*S, |], [S*S, |, S], [|, S, /], [S, /, S], [/, S, |], [S, |, 	], [|, 	, Output], [	, Output, string], [Output, string, :], [string, :, a*a], [:, a*a, -], [a*a, -,            ], [-,            , S], [           , S, 		], [S, 		, S*S], [		, S*S, 		 ], [S*S, 		 , S*S], [		 , S*S, -], [S*S, -, S], [-, S, 		 ], [S, 		 , S*S], [		 , S*S, -], [S*S, -, 		 ], [-, 		 , S*a], [		 , S*a, -], [S*a, -, 		 ], [-, 		 , a*a], [		 , a*a, -], [a*a, -,  ], [-,  , S], [ , S, *], [S, *, S]]

>> Noun Phrases are: 
[| S-S, S/S |, a            S, S*a, a*a, a S * S]

>> Named Entities are: 
[('Grammar', 'PERSON'), ('S/S', 'ORG'), ('\uf0e0S*S-S \t\t ', 'CARDINAL')]


============================ Sentence 38 =============================

a a S - S S Rightmost Derivation Parse Tree     


>> Tokens are: 
[S, -, S, S, Rightmost, Derivation, Parse, Tree,    ] 

>> PoS Tags are: 
[('S', 'PROPN'), ('-', 'PUNCT'), ('S', 'PROPN'), ('S', 'PROPN'), ('Rightmost', 'PROPN'), ('Derivation', 'NOUN'), ('Parse', 'NOUN'), ('Tree', 'PROPN'), ('   ', 'SPACE')] 

>> Dependency Tags are: 
[('S', 'compound'), ('-', 'punct'), ('S', 'compound'), ('S', 'compound'), ('Rightmost', 'compound'), ('Derivation', 'compound'), ('Parse', 'compound'), ('Tree', 'npadvmod'), ('   ', 'ROOT')]

>> Bigrams: 
[[S, -], [-, S], [S, S], [S, Rightmost], [Rightmost, Derivation], [Derivation, Parse], [Parse, Tree], [Tree,    ]]

>> Trigrams: 
[[S, -, S], [-, S, S], [S, S, Rightmost], [S, Rightmost, Derivation], [Rightmost, Derivation, Parse], [Derivation, Parse, Tree], [Parse, Tree,    ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 39 =============================

Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'nsubj'), ('#', 'appos'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[Prof. Jay R Dhamsaniya, (PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('Jay R Dhamsaniya', 'ORG'), ('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 40 =============================

Exercise: Derivation Perform leftmost derivation and draw parse tree. 


>> Tokens are: 
[Exercise, :, Derivation, Perform, leftmost, derivation, draw, parse, tree, .] 

>> PoS Tags are: 
[('Exercise', 'NOUN'), (':', 'PUNCT'), ('Derivation', 'NOUN'), ('Perform', 'VERB'), ('leftmost', 'NOUN'), ('derivation', 'NOUN'), ('draw', 'VERB'), ('parse', 'NOUN'), ('tree', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Exercise', 'ROOT'), (':', 'punct'), ('Derivation', 'compound'), ('Perform', 'appos'), ('leftmost', 'compound'), ('derivation', 'dobj'), ('draw', 'conj'), ('parse', 'compound'), ('tree', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Exercise, :], [:, Derivation], [Derivation, Perform], [Perform, leftmost], [leftmost, derivation], [derivation, draw], [draw, parse], [parse, tree], [tree, .]]

>> Trigrams: 
[[Exercise, :, Derivation], [:, Derivation, Perform], [Derivation, Perform, leftmost], [Perform, leftmost, derivation], [leftmost, derivation, draw], [derivation, draw, parse], [draw, parse, tree], [parse, tree, .]]

>> Noun Phrases are: 
[Exercise, leftmost derivation, parse tree]

>> Named Entities are: 
[]


============================ Sentence 41 =============================

	SA1B A0A | 𝜖 B0B | 1B | 𝜖   


>> Tokens are: 
[	, SA1B, A0A, |, 𝜖, B0B, |, 1B, |, 𝜖,  ] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('S\uf0e0A1B', 'PROPN'), ('A\uf0e00A', 'PROPN'), ('|', 'NOUN'), ('𝜖', 'PROPN'), ('B\uf0e00B', 'ADV'), ('|', 'NOUN'), ('1B', 'NOUN'), ('|', 'NOUN'), ('𝜖', 'ADP'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('S\uf0e0A1B', 'compound'), ('A\uf0e00A', 'compound'), ('|', 'npadvmod'), ('𝜖', 'quantmod'), ('B\uf0e00B', 'advmod'), ('|', 'compound'), ('1B', 'ROOT'), ('|', 'npadvmod'), ('𝜖', 'prep'), (' ', 'appos')]

>> Bigrams: 
[[	, SA1B], [SA1B, A0A], [A0A, |], [|, 𝜖], [𝜖, B0B], [B0B, |], [|, 1B], [1B, |], [|, 𝜖], [𝜖,  ]]

>> Trigrams: 
[[	, SA1B, A0A], [SA1B, A0A, |], [A0A, |, 𝜖], [|, 𝜖, B0B], [𝜖, B0B, |], [B0B, |, 1B], [|, 1B, |], [1B, |, 𝜖], [|, 𝜖,  ]]

>> Noun Phrases are: 
[	SA1B A0A | 𝜖 B0B | 1B]

>> Named Entities are: 
[('1B', 'CARDINAL')]


============================ Sentence 42 =============================

Output string: 1001 Perform leftmost derivation and draw parse tree. 


>> Tokens are: 
[Output, string, :, 1001, Perform, leftmost, derivation, draw, parse, tree, .] 

>> PoS Tags are: 
[('Output', 'NOUN'), ('string', 'NOUN'), (':', 'PUNCT'), ('1001', 'NUM'), ('Perform', 'VERB'), ('leftmost', 'NOUN'), ('derivation', 'NOUN'), ('draw', 'VERB'), ('parse', 'NOUN'), ('tree', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Output', 'compound'), ('string', 'ROOT'), (':', 'punct'), ('1001', 'appos'), ('Perform', 'compound'), ('leftmost', 'compound'), ('derivation', 'appos'), ('draw', 'conj'), ('parse', 'compound'), ('tree', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Output, string], [string, :], [:, 1001], [1001, Perform], [Perform, leftmost], [leftmost, derivation], [derivation, draw], [draw, parse], [parse, tree], [tree, .]]

>> Trigrams: 
[[Output, string, :], [string, :, 1001], [:, 1001, Perform], [1001, Perform, leftmost], [Perform, leftmost, derivation], [leftmost, derivation, draw], [derivation, draw, parse], [draw, parse, tree], [parse, tree, .]]

>> Noun Phrases are: 
[Output string, Perform leftmost derivation, parse tree]

>> Named Entities are: 
[('1001', 'DATE')]


============================ Sentence 43 =============================

      S0S1 | 01   Output string: 000111 


>> Tokens are: 
[      , S0S1, |, 01,   , Output, string, :, 000111] 

>> PoS Tags are: 
[('      ', 'SPACE'), ('S\uf0e00S1', 'PROPN'), ('|', 'NOUN'), ('01', 'NUM'), ('  ', 'SPACE'), ('Output', 'NOUN'), ('string', 'NOUN'), (':', 'PUNCT'), ('000111', 'NUM')] 

>> Dependency Tags are: 
[('      ', 'compound'), ('S\uf0e00S1', 'compound'), ('|', 'npadvmod'), ('01', 'nummod'), ('  ', 'appos'), ('Output', 'compound'), ('string', 'ROOT'), (':', 'punct'), ('000111', 'appos')]

>> Bigrams: 
[[      , S0S1], [S0S1, |], [|, 01], [01,   ], [  , Output], [Output, string], [string, :], [:, 000111]]

>> Trigrams: 
[[      , S0S1, |], [S0S1, |, 01], [|, 01,   ], [01,   , Output], [  , Output, string], [Output, string, :], [string, :, 000111]]

>> Noun Phrases are: 
[      S0S1 | 01   Output string]

>> Named Entities are: 
[('01', 'CARDINAL')]


============================ Sentence 44 =============================

Perform rightmost derivation and draw parse tree. 


>> Tokens are: 
[Perform, rightmost, derivation, draw, parse, tree, .] 

>> PoS Tags are: 
[('Perform', 'VERB'), ('rightmost', 'NOUN'), ('derivation', 'NOUN'), ('draw', 'VERB'), ('parse', 'NOUN'), ('tree', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Perform', 'ROOT'), ('rightmost', 'compound'), ('derivation', 'dobj'), ('draw', 'conj'), ('parse', 'compound'), ('tree', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Perform, rightmost], [rightmost, derivation], [derivation, draw], [draw, parse], [parse, tree], [tree, .]]

>> Trigrams: 
[[Perform, rightmost, derivation], [rightmost, derivation, draw], [derivation, draw, parse], [draw, parse, tree], [parse, tree, .]]

>> Noun Phrases are: 
[rightmost derivation, parse tree]

>> Named Entities are: 
[]


============================ Sentence 45 =============================

EE+E | E*E | id | (E) | -E Output string: id + id * id     Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#› 


>> Tokens are: 
[EE+E, |, E*E, |, d, |, (, E, ), |, -E, Output, string, :, d, +, d, *, d,     , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›] 

>> PoS Tags are: 
[('E\uf0e0E+E', 'VERB'), ('|', 'NOUN'), ('E*E', 'NOUN'), ('|', 'NOUN'), ('d', 'NOUN'), ('|', 'NOUN'), ('(', 'PUNCT'), ('E', 'NOUN'), (')', 'PUNCT'), ('|', 'NOUN'), ('-E', 'VERB'), ('Output', 'NOUN'), ('string', 'NOUN'), (':', 'PUNCT'), ('d', 'NOUN'), ('+', 'SYM'), ('d', 'NOUN'), ('*', 'NOUN'), ('d', 'NOUN'), ('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X')] 

>> Dependency Tags are: 
[('E\uf0e0E+E', 'dep'), ('|', 'compound'), ('E*E', 'compound'), ('|', 'pobj'), ('d', 'advmod'), ('|', 'appos'), ('(', 'punct'), ('E', 'appos'), (')', 'punct'), ('|', 'punct'), ('-E', 'punct'), ('Output', 'compound'), ('string', 'nsubj'), (':', 'punct'), ('d', 'appos'), ('+', 'cc'), ('d', 'meta'), ('*', 'dep'), ('d', 'meta'), ('    ', 'nummod'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'pobj'), ('#', 'nmod'), ('3130006', 'appos'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'dobj'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct')]

>> Bigrams: 
[[EE+E, |], [|, E*E], [E*E, |], [|, d], [d, |], [|, (], [(, E], [E, )], [), |], [|, -E], [-E, Output], [Output, string], [string, :], [:, d], [d, +], [+, d], [d, *], [*, d], [d,     ], [    , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›]]

>> Trigrams: 
[[EE+E, |, E*E], [|, E*E, |], [E*E, |, d], [|, d, |], [d, |, (], [|, (, E], [(, E, )], [E, ), |], [), |, -E], [|, -E, Output], [-E, Output, string], [Output, string, :], [string, :, d], [:, d, +], [d, +, d], [+, d, *], [d, *, d], [*, d,     ], [d,     , Prof.], [    , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›]]

>> Noun Phrases are: 
[| E*E |, id |, (E, id, d * id     Prof. Jay R Dhamsaniya, PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 46 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 47 =============================

Ambiguous grammar        Ambiguity Ambiguity, is a word, phrase, or statement which contains more than one meaning. 


>> Tokens are: 
[Ambiguous, grammar,        , Ambiguity, Ambiguity, ,, word, ,, phrase, ,, statement, contains, meaning, .] 

>> PoS Tags are: 
[('Ambiguous', 'ADJ'), ('grammar', 'NOUN'), ('       ', 'SPACE'), ('Ambiguity', 'PROPN'), ('Ambiguity', 'NOUN'), (',', 'PUNCT'), ('word', 'NOUN'), (',', 'PUNCT'), ('phrase', 'NOUN'), (',', 'PUNCT'), ('statement', 'NOUN'), ('contains', 'VERB'), ('meaning', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Ambiguous', 'amod'), ('grammar', 'compound'), ('       ', 'compound'), ('Ambiguity', 'compound'), ('Ambiguity', 'nsubj'), (',', 'punct'), ('word', 'attr'), (',', 'punct'), ('phrase', 'conj'), (',', 'punct'), ('statement', 'conj'), ('contains', 'relcl'), ('meaning', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Ambiguous, grammar], [grammar,        ], [       , Ambiguity], [Ambiguity, Ambiguity], [Ambiguity, ,], [,, word], [word, ,], [,, phrase], [phrase, ,], [,, statement], [statement, contains], [contains, meaning], [meaning, .]]

>> Trigrams: 
[[Ambiguous, grammar,        ], [grammar,        , Ambiguity], [       , Ambiguity, Ambiguity], [Ambiguity, Ambiguity, ,], [Ambiguity, ,, word], [,, word, ,], [word, ,, phrase], [,, phrase, ,], [phrase, ,, statement], [,, statement, contains], [statement, contains, meaning], [contains, meaning, .]]

>> Noun Phrases are: 
[Ambiguous grammar        Ambiguity Ambiguity, a word, phrase, statement, more than one meaning]

>> Named Entities are: 
[('more than one', 'CARDINAL')]


============================ Sentence 48 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 49 =============================

Chip A long thin piece of potato A small piece of silicon      Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[Chip, long, thin, piece, potato, small, piece, silicon,      , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('Chip', 'NOUN'), ('long', 'ADJ'), ('thin', 'ADJ'), ('piece', 'NOUN'), ('potato', 'NOUN'), ('small', 'ADJ'), ('piece', 'NOUN'), ('silicon', 'NOUN'), ('     ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Chip', 'compound'), ('long', 'amod'), ('thin', 'amod'), ('piece', 'nsubj'), ('potato', 'pobj'), ('small', 'amod'), ('piece', 'appos'), ('silicon', 'compound'), ('     ', 'compound'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'pobj'), ('#', 'nmod'), ('3130006', 'appos'), ('(', 'punct'), ('PS', 'nsubj'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'parataxis'), ('  ', 'appos'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'appos'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[Chip, long], [long, thin], [thin, piece], [piece, potato], [potato, small], [small, piece], [piece, silicon], [silicon,      ], [     , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[Chip, long, thin], [long, thin, piece], [thin, piece, potato], [piece, potato, small], [potato, small, piece], [small, piece, silicon], [piece, silicon,      ], [silicon,      , Prof.], [     , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[Chip A long thin piece, potato, A small piece, silicon      Prof. Jay R Dhamsaniya, PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 50 =============================

Ambiguity In formal language grammar, ambiguity would arise if identical string can occur on the RHS of two or more productions. 


>> Tokens are: 
[Ambiguity, formal, language, grammar, ,, ambiguity, arise, identical, string, occur, RHS, productions, .] 

>> PoS Tags are: 
[('Ambiguity', 'NOUN'), ('formal', 'ADJ'), ('language', 'NOUN'), ('grammar', 'NOUN'), (',', 'PUNCT'), ('ambiguity', 'NOUN'), ('arise', 'VERB'), ('identical', 'ADJ'), ('string', 'NOUN'), ('occur', 'VERB'), ('RHS', 'PROPN'), ('productions', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Ambiguity', 'dep'), ('formal', 'amod'), ('language', 'compound'), ('grammar', 'pobj'), (',', 'punct'), ('ambiguity', 'nsubj'), ('arise', 'ROOT'), ('identical', 'amod'), ('string', 'nsubj'), ('occur', 'ccomp'), ('RHS', 'pobj'), ('productions', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Ambiguity, formal], [formal, language], [language, grammar], [grammar, ,], [,, ambiguity], [ambiguity, arise], [arise, identical], [identical, string], [string, occur], [occur, RHS], [RHS, productions], [productions, .]]

>> Trigrams: 
[[Ambiguity, formal, language], [formal, language, grammar], [language, grammar, ,], [grammar, ,, ambiguity], [,, ambiguity, arise], [ambiguity, arise, identical], [arise, identical, string], [identical, string, occur], [string, occur, RHS], [occur, RHS, productions], [RHS, productions, .]]

>> Noun Phrases are: 
[formal language grammar, ambiguity, identical string, the RHS, two or more productions]

>> Named Entities are: 
[('RHS', 'NORP'), ('two', 'CARDINAL')]


============================ Sentence 51 =============================

Grammar: 	 	  can be derived from either N1 or N2     Replaced by  or  ? 


>> Tokens are: 
[Grammar, :, 	 	  , derived, N1, N2,     , Replaced,  ,  , ?] 

>> PoS Tags are: 
[('Grammar', 'NOUN'), (':', 'PUNCT'), ('\t \t  ', 'SPACE'), ('derived', 'VERB'), ('N1', 'PROPN'), ('N2', 'PROPN'), ('    ', 'SPACE'), ('Replaced', 'VERB'), (' ', 'SPACE'), (' ', 'SPACE'), ('?', 'PUNCT')] 

>> Dependency Tags are: 
[('Grammar', 'nsubjpass'), (':', 'punct'), ('\t \t  ', 'appos'), ('derived', 'ROOT'), ('N1', 'pobj'), ('N2', 'conj'), ('    ', 'nsubj'), ('Replaced', 'advcl'), (' ', 'pobj'), (' ', 'conj'), ('?', 'punct')]

>> Bigrams: 
[[Grammar, :], [:, 	 	  ], [	 	  , derived], [derived, N1], [N1, N2], [N2,     ], [    , Replaced], [Replaced,  ], [ ,  ], [ , ?]]

>> Trigrams: 
[[Grammar, :, 	 	  ], [:, 	 	  , derived], [	 	  , derived, N1], [derived, N1, N2], [N1, N2,     ], [N2,     , Replaced], [    , Replaced,  ], [Replaced,  ,  ], [ ,  , ?]]

>> Noun Phrases are: 
[Grammar, either N1, N2]

>> Named Entities are: 
[('Grammar', 'PERSON'), ('N1', 'CARDINAL'), ('N2     Replaced', 'PRODUCT')]


============================ Sentence 52 =============================

    


>> Tokens are: 
[   ] 

>> PoS Tags are: 
[('   ', 'SPACE')] 

>> Dependency Tags are: 
[('   ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 53 =============================

Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›  Ambiguous grammar Ambiguous grammar is one that produces more than one leftmost or more then one rightmost derivation for the same sentence. 


>> Tokens are: 
[Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  , Ambiguous, grammar, Ambiguous, grammar, produces, leftmost, rightmost, derivation, sentence, .] 

>> PoS Tags are: 
[('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE'), ('Ambiguous', 'ADJ'), ('grammar', 'NOUN'), ('Ambiguous', 'ADJ'), ('grammar', 'NOUN'), ('produces', 'VERB'), ('leftmost', 'NOUN'), ('rightmost', 'NOUN'), ('derivation', 'NOUN'), ('sentence', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'nsubj'), ('#', 'appos'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'dep'), ('Ambiguous', 'amod'), ('grammar', 'nmod'), ('Ambiguous', 'amod'), ('grammar', 'nsubj'), ('produces', 'relcl'), ('leftmost', 'dobj'), ('rightmost', 'compound'), ('derivation', 'attr'), ('sentence', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ], [ , Ambiguous], [Ambiguous, grammar], [grammar, Ambiguous], [Ambiguous, grammar], [grammar, produces], [produces, leftmost], [leftmost, rightmost], [rightmost, derivation], [derivation, sentence], [sentence, .]]

>> Trigrams: 
[[Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ], [‹#›,  , Ambiguous], [ , Ambiguous, grammar], [Ambiguous, grammar, Ambiguous], [grammar, Ambiguous, grammar], [Ambiguous, grammar, produces], [grammar, produces, leftmost], [produces, leftmost, rightmost], [leftmost, rightmost, derivation], [rightmost, derivation, sentence], [derivation, sentence, .]]

>> Noun Phrases are: 
[Prof. Jay R Dhamsaniya, (PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I, Ambiguous grammar Ambiguous grammar, more than one leftmost, then one rightmost derivation, the same sentence]

>> Named Entities are: 
[('Jay R Dhamsaniya', 'ORG'), ('PS', 'ORG'), ('Dixita', 'PERSON'), ('more than one', 'CARDINAL')]


============================ Sentence 54 =============================

Grammar: SS+S | S*S | (S) | a		Output string: a+a*a  	    S					   	    S 	S*S						S+S 


>> Tokens are: 
[Grammar, :, SS+S, |, S*S, |, (, S, ), |, 		, Output, string, :, a+a*a,  	    , S, 					   	    , S, 	, S*S, 						, S+S] 

>> PoS Tags are: 
[('Grammar', 'NOUN'), (':', 'PUNCT'), ('S\uf0e0S+S', 'ADJ'), ('|', 'NOUN'), ('S*S', 'DET'), ('|', 'NOUN'), ('(', 'PUNCT'), ('S', 'NOUN'), (')', 'PUNCT'), ('|', 'VERB'), ('\t\t', 'SPACE'), ('Output', 'NOUN'), ('string', 'NOUN'), (':', 'PUNCT'), ('a+a*a', 'PROPN'), (' \t    ', 'SPACE'), ('S', 'PROPN'), ('\t\t\t\t\t   \t    ', 'SPACE'), ('S', 'PROPN'), ('\t', 'SPACE'), ('\uf0e0S*S', 'VERB'), ('\t\t\t\t\t\t', 'SPACE'), ('\uf0e0S+S', 'PROPN')] 

>> Dependency Tags are: 
[('Grammar', 'dep'), (':', 'punct'), ('S\uf0e0S+S', 'amod'), ('|', 'appos'), ('S*S', 'det'), ('|', 'npadvmod'), ('(', 'punct'), ('S', 'appos'), (')', 'punct'), ('|', 'appos'), ('\t\t', 'compound'), ('Output', 'compound'), ('string', 'ROOT'), (':', 'punct'), ('a+a*a', 'compound'), (' \t    ', 'compound'), ('S', 'compound'), ('\t\t\t\t\t   \t    ', 'compound'), ('S', 'compound'), ('\t', 'nsubj'), ('\uf0e0S*S', 'ccomp'), ('\t\t\t\t\t\t', 'dobj'), ('\uf0e0S+S', 'punct')]

>> Bigrams: 
[[Grammar, :], [:, SS+S], [SS+S, |], [|, S*S], [S*S, |], [|, (], [(, S], [S, )], [), |], [|, 		], [		, Output], [Output, string], [string, :], [:, a+a*a], [a+a*a,  	    ], [ 	    , S], [S, 					   	    ], [					   	    , S], [S, 	], [	, S*S], [S*S, 						], [						, S+S]]

>> Trigrams: 
[[Grammar, :, SS+S], [:, SS+S, |], [SS+S, |, S*S], [|, S*S, |], [S*S, |, (], [|, (, S], [(, S, )], [S, ), |], [), |, 		], [|, 		, Output], [		, Output, string], [Output, string, :], [string, :, a+a*a], [:, a+a*a,  	    ], [a+a*a,  	    , S], [ 	    , S, 					   	    ], [S, 					   	    , S], [					   	    , S, 	], [S, 	, S*S], [	, S*S, 						], [S*S, 						, S+S]]

>> Noun Phrases are: 
[SS+S |, (S]

>> Named Entities are: 
[('Grammar', 'PERSON')]


============================ Sentence 55 =============================

	S+S*S					a+S 	a+S*S					a+S*S 	a+a*S					a+a*S 	a+a*a					a+a*a Here, Two leftmost derivation for string a+a*a is possible hence, above grammar is ambiguous. 


>> Tokens are: 
[	, S+S*S, 					, a+S, 	, a+S*S, 					, a+S*S, 	, a+a*S, 					, a+a*S, 	, a+a*a, 					, a+a*a, ,, leftmost, derivation, string, a+a*a, possible, ,, grammar, ambiguous, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('\uf0e0S+S*S', 'PROPN'), ('\t\t\t\t\t', 'SPACE'), ('\uf0e0a+S', 'PUNCT'), ('\t', 'SPACE'), ('\uf0e0a+S*S', 'ADJ'), ('\t\t\t\t\t', 'SPACE'), ('\uf0e0a+S*S', 'ADJ'), ('\t', 'SPACE'), ('\uf0e0a+a*S', 'PROPN'), ('\t\t\t\t\t', 'SPACE'), ('\uf0e0a+a*S', 'PROPN'), ('\t', 'SPACE'), ('\uf0e0a+a*a', 'PROPN'), ('\t\t\t\t\t', 'SPACE'), ('\uf0e0a+a*a', 'PROPN'), (',', 'PUNCT'), ('leftmost', 'NOUN'), ('derivation', 'NOUN'), ('string', 'NOUN'), ('a+a*a', 'PROPN'), ('possible', 'ADJ'), (',', 'PUNCT'), ('grammar', 'NOUN'), ('ambiguous', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('\uf0e0S+S*S', 'dep'), ('\t\t\t\t\t', 'appos'), ('\uf0e0a+S', 'punct'), ('\t', 'acl'), ('\uf0e0a+S*S', 'appos'), ('\t\t\t\t\t', 'amod'), ('\uf0e0a+S*S', 'compound'), ('\t', 'appos'), ('\uf0e0a+a*S', 'appos'), ('\t\t\t\t\t', 'compound'), ('\uf0e0a+a*S', 'compound'), ('\t', 'compound'), ('\uf0e0a+a*a', 'compound'), ('\t\t\t\t\t', 'advmod'), ('\uf0e0a+a*a', 'dep'), (',', 'punct'), ('leftmost', 'compound'), ('derivation', 'nsubj'), ('string', 'pobj'), ('a+a*a', 'dobj'), ('possible', 'acomp'), (',', 'punct'), ('grammar', 'pobj'), ('ambiguous', 'acomp'), ('.', 'punct')]

>> Bigrams: 
[[	, S+S*S], [S+S*S, 					], [					, a+S], [a+S, 	], [	, a+S*S], [a+S*S, 					], [					, a+S*S], [a+S*S, 	], [	, a+a*S], [a+a*S, 					], [					, a+a*S], [a+a*S, 	], [	, a+a*a], [a+a*a, 					], [					, a+a*a], [a+a*a, ,], [,, leftmost], [leftmost, derivation], [derivation, string], [string, a+a*a], [a+a*a, possible], [possible, ,], [,, grammar], [grammar, ambiguous], [ambiguous, .]]

>> Trigrams: 
[[	, S+S*S, 					], [S+S*S, 					, a+S], [					, a+S, 	], [a+S, 	, a+S*S], [	, a+S*S, 					], [a+S*S, 					, a+S*S], [					, a+S*S, 	], [a+S*S, 	, a+a*S], [	, a+a*S, 					], [a+a*S, 					, a+a*S], [					, a+a*S, 	], [a+a*S, 	, a+a*a], [	, a+a*a, 					], [a+a*a, 					, a+a*a], [					, a+a*a, ,], [a+a*a, ,, leftmost], [,, leftmost, derivation], [leftmost, derivation, string], [derivation, string, a+a*a], [string, a+a*a, possible], [a+a*a, possible, ,], [possible, ,, grammar], [,, grammar, ambiguous], [grammar, ambiguous, .]]

>> Noun Phrases are: 
[a+a*S, Two leftmost derivation, string, a+a*a, grammar]

>> Named Entities are: 
[('\uf0e0S+S*S', 'CARDINAL'), ('\uf0e0a+a*S\t\t\t\t\t', 'PRODUCT'), ('Two', 'CARDINAL')]


============================ Sentence 56 =============================

 a S * S 


>> Tokens are: 
[ , S, *, S] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('S', 'PROPN'), ('*', 'PUNCT'), ('S', 'PROPN')] 

>> Dependency Tags are: 
[(' ', 'ROOT'), ('S', 'compound'), ('*', 'punct'), ('S', 'dative')]

>> Bigrams: 
[[ , S], [S, *], [*, S]]

>> Trigrams: 
[[ , S, *], [S, *, S]]

>> Noun Phrases are: 
[a S * S]

>> Named Entities are: 
[]


============================ Sentence 57 =============================

a a S S + S 


>> Tokens are: 
[S, S, +, S] 

>> PoS Tags are: 
[('S', 'PROPN'), ('S', 'PROPN'), ('+', 'SYM'), ('S', 'PROPN')] 

>> Dependency Tags are: 
[('S', 'compound'), ('S', 'meta'), ('+', 'cc'), ('S', 'conj')]

>> Bigrams: 
[[S, S], [S, +], [+, S]]

>> Trigrams: 
[[S, S, +], [S, +, S]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 58 =============================

a S + S a a S * S S     


>> Tokens are: 
[S, +, S, S, *, S, S,    ] 

>> PoS Tags are: 
[('S', 'PROPN'), ('+', 'SYM'), ('S', 'NOUN'), ('S', 'PROPN'), ('*', 'PROPN'), ('S', 'NOUN'), ('S', 'NOUN'), ('   ', 'SPACE')] 

>> Dependency Tags are: 
[('S', 'nmod'), ('+', 'cc'), ('S', 'ROOT'), ('S', 'compound'), ('*', 'punct'), ('S', 'compound'), ('S', 'appos'), ('   ', 'nummod')]

>> Bigrams: 
[[S, +], [+, S], [S, S], [S, *], [*, S], [S, S], [S,    ]]

>> Trigrams: 
[[S, +, S], [+, S, S], [S, S, *], [S, *, S], [*, S, S], [S, S,    ]]

>> Noun Phrases are: 
[a S + S, a a S * S S]

>> Named Entities are: 
[]


============================ Sentence 59 =============================

Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'nsubj'), ('#', 'appos'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[Prof. Jay R Dhamsaniya, (PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('Jay R Dhamsaniya', 'ORG'), ('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 60 =============================

Exercise: Ambiguous Grammar Check Ambiguity in following grammars: S aS | Sa | 𝜖  (output string: aaaa) S aSbS | bSaS | 𝜖  (output string: abab) 


>> Tokens are: 
[Exercise, :, Ambiguous, Grammar, Check, Ambiguity, following, grammars, :, S, |, Sa, |, 𝜖,  , (, output, string, :, aaaa, ), S, aSbS, |, bSaS, |, 𝜖,  , (, output, string, :, abab, )] 

>> PoS Tags are: 
[('Exercise', 'NOUN'), (':', 'PUNCT'), ('Ambiguous', 'PROPN'), ('Grammar', 'PROPN'), ('Check', 'PROPN'), ('Ambiguity', 'NOUN'), ('following', 'VERB'), ('grammars', 'NOUN'), (':', 'PUNCT'), ('S\uf0e0', 'NOUN'), ('|', 'NOUN'), ('Sa', 'PRON'), ('|', 'NOUN'), ('𝜖', 'ADP'), (' ', 'SPACE'), ('(', 'PUNCT'), ('output', 'NOUN'), ('string', 'NOUN'), (':', 'PUNCT'), ('aaaa', 'NOUN'), (')', 'PUNCT'), ('S\uf0e0', 'NOUN'), ('aSbS', 'NOUN'), ('|', 'NOUN'), ('bSaS', 'NOUN'), ('|', 'NOUN'), ('𝜖', 'ADP'), (' ', 'SPACE'), ('(', 'PUNCT'), ('output', 'NOUN'), ('string', 'NOUN'), (':', 'PUNCT'), ('abab', 'NOUN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('Exercise', 'ROOT'), (':', 'punct'), ('Ambiguous', 'compound'), ('Grammar', 'compound'), ('Check', 'compound'), ('Ambiguity', 'appos'), ('following', 'pcomp'), ('grammars', 'dobj'), (':', 'punct'), ('S\uf0e0', 'appos'), ('|', 'pobj'), ('Sa', 'nsubj'), ('|', 'appos'), ('𝜖', 'prep'), (' ', 'pobj'), ('(', 'punct'), ('output', 'compound'), ('string', 'appos'), (':', 'punct'), ('aaaa', 'appos'), (')', 'punct'), ('S\uf0e0', 'npadvmod'), ('aSbS', 'appos'), ('|', 'npadvmod'), ('bSaS', 'compound'), ('|', 'appos'), ('𝜖', 'prep'), (' ', 'pobj'), ('(', 'punct'), ('output', 'compound'), ('string', 'appos'), (':', 'punct'), ('abab', 'appos'), (')', 'punct')]

>> Bigrams: 
[[Exercise, :], [:, Ambiguous], [Ambiguous, Grammar], [Grammar, Check], [Check, Ambiguity], [Ambiguity, following], [following, grammars], [grammars, :], [:, S], [S, |], [|, Sa], [Sa, |], [|, 𝜖], [𝜖,  ], [ , (], [(, output], [output, string], [string, :], [:, aaaa], [aaaa, )], [), S], [S, aSbS], [aSbS, |], [|, bSaS], [bSaS, |], [|, 𝜖], [𝜖,  ], [ , (], [(, output], [output, string], [string, :], [:, abab], [abab, )]]

>> Trigrams: 
[[Exercise, :, Ambiguous], [:, Ambiguous, Grammar], [Ambiguous, Grammar, Check], [Grammar, Check, Ambiguity], [Check, Ambiguity, following], [Ambiguity, following, grammars], [following, grammars, :], [grammars, :, S], [:, S, |], [S, |, Sa], [|, Sa, |], [Sa, |, 𝜖], [|, 𝜖,  ], [𝜖,  , (], [ , (, output], [(, output, string], [output, string, :], [string, :, aaaa], [:, aaaa, )], [aaaa, ), S], [), S, aSbS], [S, aSbS, |], [aSbS, |, bSaS], [|, bSaS, |], [bSaS, |, 𝜖], [|, 𝜖,  ], [𝜖,  , (], [ , (, output], [(, output, string], [output, string, :], [string, :, abab], [:, abab, )]]

>> Noun Phrases are: 
[Exercise, Ambiguous Grammar Check Ambiguity, grammars, S, |, Sa, (output string, aaaa, aSbS, bSaS |, (output string, abab]

>> Named Entities are: 
[('aSbS', 'ORG')]


============================ Sentence 61 =============================

S 


>> Tokens are: 
[S] 

>> PoS Tags are: 
[('S\uf0e0', 'NOUN')] 

>> Dependency Tags are: 
[('S\uf0e0', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[S]

>> Named Entities are: 
[]


============================ Sentence 62 =============================

SS+ | SS* | a (output string: aa+a*) <exp> → <exp> + <term> | <term> <term> → <term> * <letter> | <letter>  <letter> → a|b|c|…|z  (output string: a+b*c)   


>> Tokens are: 
[SS+, |, SS, *, |, (, output, string, :, aa+a, *, ), <, exp, >, →, <, exp, >, +, <, term, >, |, <, term, >, <, term, >, →, <, term, >, *, <, letter, >, |, <, letter, >,  , <, letter, >, →, a|b|c|, …, |z,  , (, output, string, :, a+b*c, ),  ] 

>> PoS Tags are: 
[('SS+', 'PROPN'), ('|', 'NOUN'), ('SS', 'NOUN'), ('*', 'PUNCT'), ('|', 'NOUN'), ('(', 'PUNCT'), ('output', 'NOUN'), ('string', 'NOUN'), (':', 'PUNCT'), ('aa+a', 'INTJ'), ('*', 'PUNCT'), (')', 'PUNCT'), ('<', 'X'), ('exp', 'NOUN'), ('>', 'X'), ('→', 'SYM'), ('<', 'X'), ('exp', 'X'), ('>', 'X'), ('+', 'NUM'), ('<', 'X'), ('term', 'NOUN'), ('>', 'X'), ('|', 'NOUN'), ('<', 'X'), ('term', 'NOUN'), ('>', 'X'), ('<', 'X'), ('term', 'NOUN'), ('>', 'X'), ('→', 'SYM'), ('<', 'X'), ('term', 'NOUN'), ('>', 'X'), ('*', 'PUNCT'), ('<', 'X'), ('letter', 'NOUN'), ('>', 'X'), ('|', 'NOUN'), ('<', 'X'), ('letter', 'NOUN'), ('>', 'X'), (' ', 'SPACE'), ('<', 'X'), ('letter', 'NOUN'), ('>', 'X'), ('→', 'SYM'), ('a|b|c|', 'ADV'), ('…', 'PUNCT'), ('|z', 'X'), (' ', 'SPACE'), ('(', 'PUNCT'), ('output', 'NOUN'), ('string', 'NOUN'), (':', 'PUNCT'), ('a+b*c', 'PROPN'), (')', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('SS+', 'compound'), ('|', 'compound'), ('SS', 'nsubj'), ('*', 'punct'), ('|', 'appos'), ('(', 'punct'), ('output', 'compound'), ('string', 'ROOT'), (':', 'punct'), ('aa+a', 'appos'), ('*', 'punct'), (')', 'punct'), ('<', 'nmod'), ('exp', 'appos'), ('>', 'npadvmod'), ('→', 'punct'), ('<', 'punct'), ('exp', 'npadvmod'), ('>', 'appos'), ('+', 'advmod'), ('<', 'punct'), ('term', 'appos'), ('>', 'punct'), ('|', 'npadvmod'), ('<', 'punct'), ('term', 'npadvmod'), ('>', 'punct'), ('<', 'punct'), ('term', 'npadvmod'), ('>', 'punct'), ('→', 'punct'), ('<', 'punct'), ('term', 'npadvmod'), ('>', 'punct'), ('*', 'punct'), ('<', 'punct'), ('letter', 'npadvmod'), ('>', 'punct'), ('|', 'npadvmod'), ('<', 'punct'), ('letter', 'npadvmod'), ('>', 'punct'), (' ', 'punct'), ('<', 'punct'), ('letter', 'appos'), ('>', 'npadvmod'), ('→', 'punct'), ('a|b|c|', 'advmod'), ('…', 'punct'), ('|z', 'compound'), (' ', 'appos'), ('(', 'punct'), ('output', 'compound'), ('string', 'parataxis'), (':', 'punct'), ('a+b*c', 'punct'), (')', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[SS+, |], [|, SS], [SS, *], [*, |], [|, (], [(, output], [output, string], [string, :], [:, aa+a], [aa+a, *], [*, )], [), <], [<, exp], [exp, >], [>, →], [→, <], [<, exp], [exp, >], [>, +], [+, <], [<, term], [term, >], [>, |], [|, <], [<, term], [term, >], [>, <], [<, term], [term, >], [>, →], [→, <], [<, term], [term, >], [>, *], [*, <], [<, letter], [letter, >], [>, |], [|, <], [<, letter], [letter, >], [>,  ], [ , <], [<, letter], [letter, >], [>, →], [→, a|b|c|], [a|b|c|, …], […, |z], [|z,  ], [ , (], [(, output], [output, string], [string, :], [:, a+b*c], [a+b*c, )], [),  ]]

>> Trigrams: 
[[SS+, |, SS], [|, SS, *], [SS, *, |], [*, |, (], [|, (, output], [(, output, string], [output, string, :], [string, :, aa+a], [:, aa+a, *], [aa+a, *, )], [*, ), <], [), <, exp], [<, exp, >], [exp, >, →], [>, →, <], [→, <, exp], [<, exp, >], [exp, >, +], [>, +, <], [+, <, term], [<, term, >], [term, >, |], [>, |, <], [|, <, term], [<, term, >], [term, >, <], [>, <, term], [<, term, >], [term, >, →], [>, →, <], [→, <, term], [<, term, >], [term, >, *], [>, *, <], [*, <, letter], [<, letter, >], [letter, >, |], [>, |, <], [|, <, letter], [<, letter, >], [letter, >,  ], [>,  , <], [ , <, letter], [<, letter, >], [letter, >, →], [>, →, a|b|c|], [→, a|b|c|, …], [a|b|c|, …, |z], […, |z,  ], [|z,  , (], [ , (, output], [(, output, string], [output, string, :], [string, :, a+b*c], [:, a+b*c, )], [a+b*c, ),  ]]

>> Noun Phrases are: 
[SS+ | SS, |, <exp, term, letter]

>> Named Entities are: 
[]


============================ Sentence 63 =============================

Prove that the CFG with productions: S  a | Sa | bSS | SSb | SbS  is ambiguous (Hint: consider output string yourself) 


>> Tokens are: 
[Prove, CFG, productions, :, S, , |, Sa, |, bSS, |, SSb, |, SbS,  , ambiguous, (, Hint, :, consider, output, string, )] 

>> PoS Tags are: 
[('Prove', 'VERB'), ('CFG', 'PROPN'), ('productions', 'NOUN'), (':', 'PUNCT'), ('S', 'NOUN'), ('\uf0e0', 'VERB'), ('|', 'NOUN'), ('Sa', 'PROPN'), ('|', 'NOUN'), ('bSS', 'PROPN'), ('|', 'NOUN'), ('SSb', 'PROPN'), ('|', 'NOUN'), ('SbS', 'PROPN'), (' ', 'SPACE'), ('ambiguous', 'ADJ'), ('(', 'PUNCT'), ('Hint', 'PROPN'), (':', 'PUNCT'), ('consider', 'VERB'), ('output', 'NOUN'), ('string', 'VERB'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('Prove', 'ccomp'), ('CFG', 'meta'), ('productions', 'pobj'), (':', 'punct'), ('S', 'nsubj'), ('\uf0e0', 'appos'), ('|', 'npadvmod'), ('Sa', 'compound'), ('|', 'appos'), ('bSS', 'nmod'), ('|', 'compound'), ('SSb', 'appos'), ('|', 'appos'), ('SbS', 'appos'), (' ', 'appos'), ('ambiguous', 'acomp'), ('(', 'punct'), ('Hint', 'dep'), (':', 'punct'), ('consider', 'ROOT'), ('output', 'nsubj'), ('string', 'ccomp'), (')', 'punct')]

>> Bigrams: 
[[Prove, CFG], [CFG, productions], [productions, :], [:, S], [S, ], [, |], [|, Sa], [Sa, |], [|, bSS], [bSS, |], [|, SSb], [SSb, |], [|, SbS], [SbS,  ], [ , ambiguous], [ambiguous, (], [(, Hint], [Hint, :], [:, consider], [consider, output], [output, string], [string, )]]

>> Trigrams: 
[[Prove, CFG, productions], [CFG, productions, :], [productions, :, S], [:, S, ], [S, , |], [, |, Sa], [|, Sa, |], [Sa, |, bSS], [|, bSS, |], [bSS, |, SSb], [|, SSb, |], [SSb, |, SbS], [|, SbS,  ], [SbS,  , ambiguous], [ , ambiguous, (], [ambiguous, (, Hint], [(, Hint, :], [Hint, :, consider], [:, consider, output], [consider, output, string], [output, string, )]]

>> Noun Phrases are: 
[productions, S, Sa |, bSS | SSb, |, SbS, output, yourself]

>> Named Entities are: 
[]


============================ Sentence 64 =============================

    Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[    , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('    ', 'compound'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'nsubj'), ('#', 'appos'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[    , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[    , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[    Prof. Jay R Dhamsaniya, (PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 65 =============================

Left recursion & Left factoring        Left recursion A grammar is said to be left recursive if it has a non terminal  such that there is a derivation for some string  Algorithm to eliminate left recursion Arrange the non terminals in some order    


>> Tokens are: 
[Left, recursion, &, Left, factoring,        , Left, recursion, grammar, said, left, recursive, non, terminal,  , derivation, string,  , Algorithm, eliminate, left, recursion, Arrange, non, terminals, order,    ] 

>> PoS Tags are: 
[('Left', 'VERB'), ('recursion', 'NOUN'), ('&', 'CCONJ'), ('Left', 'PROPN'), ('factoring', 'VERB'), ('       ', 'SPACE'), ('Left', 'VERB'), ('recursion', 'NOUN'), ('grammar', 'NOUN'), ('said', 'VERB'), ('left', 'VERB'), ('recursive', 'ADJ'), ('non', 'ADJ'), ('terminal', 'ADJ'), (' ', 'SPACE'), ('derivation', 'NOUN'), ('string', 'NOUN'), (' ', 'SPACE'), ('Algorithm', 'PROPN'), ('eliminate', 'VERB'), ('left', 'VERB'), ('recursion', 'NOUN'), ('Arrange', 'PROPN'), ('non', 'ADJ'), ('terminals', 'NOUN'), ('order', 'NOUN'), ('\xa0\xa0 ', 'SPACE')] 

>> Dependency Tags are: 
[('Left', 'advcl'), ('recursion', 'dobj'), ('&', 'cc'), ('Left', 'conj'), ('factoring', 'oprd'), ('       ', 'dobj'), ('Left', 'amod'), ('recursion', 'dobj'), ('grammar', 'nsubjpass'), ('said', 'ROOT'), ('left', 'xcomp'), ('recursive', 'oprd'), ('non', 'amod'), ('terminal', 'dobj'), (' ', 'dobj'), ('derivation', 'attr'), ('string', 'pobj'), (' ', 'punct'), ('Algorithm', 'npadvmod'), ('eliminate', 'xcomp'), ('left', 'amod'), ('recursion', 'dobj'), ('Arrange', 'dobj'), ('non', 'amod'), ('terminals', 'dobj'), ('order', 'pobj'), ('\xa0\xa0 ', 'punct')]

>> Bigrams: 
[[Left, recursion], [recursion, &], [&, Left], [Left, factoring], [factoring,        ], [       , Left], [Left, recursion], [recursion, grammar], [grammar, said], [said, left], [left, recursive], [recursive, non], [non, terminal], [terminal,  ], [ , derivation], [derivation, string], [string,  ], [ , Algorithm], [Algorithm, eliminate], [eliminate, left], [left, recursion], [recursion, Arrange], [Arrange, non], [non, terminals], [terminals, order], [order,    ]]

>> Trigrams: 
[[Left, recursion, &], [recursion, &, Left], [&, Left, factoring], [Left, factoring,        ], [factoring,        , Left], [       , Left, recursion], [Left, recursion, grammar], [recursion, grammar, said], [grammar, said, left], [said, left, recursive], [left, recursive, non], [recursive, non, terminal], [non, terminal,  ], [terminal,  , derivation], [ , derivation, string], [derivation, string,  ], [string,  , Algorithm], [ , Algorithm, eliminate], [Algorithm, eliminate, left], [eliminate, left, recursion], [left, recursion, Arrange], [recursion, Arrange, non], [Arrange, non, terminals], [non, terminals, order], [terminals, order,    ]]

>> Noun Phrases are: 
[recursion, Left, Left recursion, A grammar, it, a derivation, some string, left recursion, Arrange, the non terminals, some order]

>> Named Entities are: 
[]


============================ Sentence 66 =============================

For  do begin 	for  do begin  		replace each production of the form    			by the productions , 			where are all the current 				productions;  	 end  	 eliminate the immediate left recursion among the  - productions end     Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›    Left recursion elimination 


>> Tokens are: 
[ , begin, 	,   , begin,  		, replace, production, form,     			, productions, ,, 			, current, 				, productions, ;,  	 , end,  	 , eliminate, immediate, left, recursion,   , -, productions, end,     , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,    , Left, recursion, elimination] 

>> PoS Tags are: 
[('\xa0', 'SPACE'), ('begin', 'VERB'), ('\t', 'SPACE'), ('\xa0\xa0', 'SPACE'), ('begin', 'VERB'), ('\xa0\t\t', 'SPACE'), ('replace', 'VERB'), ('production', 'NOUN'), ('form', 'NOUN'), ('\xa0\xa0  \t\t\t', 'SPACE'), ('productions', 'NOUN'), (',', 'PUNCT'), ('\t\t\t', 'SPACE'), ('current', 'ADJ'), ('\t\t\t\t', 'SPACE'), ('productions', 'NOUN'), (';', 'PUNCT'), ('\xa0\t\xa0', 'SPACE'), ('end', 'NOUN'), ('\xa0\t ', 'SPACE'), ('eliminate', 'VERB'), ('immediate', 'ADJ'), ('left', 'ADJ'), ('recursion', 'NOUN'), ('\xa0 ', 'SPACE'), ('-', 'PUNCT'), ('productions', 'NOUN'), ('end', 'VERB'), ('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), ('   ', 'SPACE'), ('Left', 'ADJ'), ('recursion', 'NOUN'), ('elimination', 'NOUN')] 

>> Dependency Tags are: 
[('\xa0', 'pobj'), ('begin', 'ccomp'), ('\t', 'dobj'), ('\xa0\xa0', 'pobj'), ('begin', 'advcl'), ('\xa0\t\t', 'nsubj'), ('replace', 'xcomp'), ('production', 'dobj'), ('form', 'pobj'), ('\xa0\xa0  \t\t\t', 'acl'), ('productions', 'pobj'), (',', 'punct'), ('\t\t\t', 'npadvmod'), ('current', 'amod'), ('\t\t\t\t', 'amod'), ('productions', 'attr'), (';', 'punct'), ('\xa0\t\xa0', 'punct'), ('end', 'pobj'), ('\xa0\t ', 'cc'), ('eliminate', 'conj'), ('immediate', 'amod'), ('left', 'amod'), ('recursion', 'dobj'), ('\xa0 ', 'compound'), ('-', 'punct'), ('productions', 'pobj'), ('end', 'conj'), ('    ', 'compound'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'dobj'), ('#', 'npadvmod'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'conj'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), ('   ', 'nummod'), ('Left', 'amod'), ('recursion', 'compound'), ('elimination', 'dobj')]

>> Bigrams: 
[[ , begin], [begin, 	], [	,   ], [  , begin], [begin,  		], [ 		, replace], [replace, production], [production, form], [form,     			], [    			, productions], [productions, ,], [,, 			], [			, current], [current, 				], [				, productions], [productions, ;], [;,  	 ], [ 	 , end], [end,  	 ], [ 	 , eliminate], [eliminate, immediate], [immediate, left], [left, recursion], [recursion,   ], [  , -], [-, productions], [productions, end], [end,     ], [    , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,    ], [   , Left], [Left, recursion], [recursion, elimination]]

>> Trigrams: 
[[ , begin, 	], [begin, 	,   ], [	,   , begin], [  , begin,  		], [begin,  		, replace], [ 		, replace, production], [replace, production, form], [production, form,     			], [form,     			, productions], [    			, productions, ,], [productions, ,, 			], [,, 			, current], [			, current, 				], [current, 				, productions], [				, productions, ;], [productions, ;,  	 ], [;,  	 , end], [ 	 , end,  	 ], [end,  	 , eliminate], [ 	 , eliminate, immediate], [eliminate, immediate, left], [immediate, left, recursion], [left, recursion,   ], [recursion,   , -], [  , -, productions], [-, productions, end], [productions, end,     ], [end,     , Prof.], [    , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,    ], [‹#›,    , Left], [   , Left, recursion], [Left, recursion, elimination]]

>> Noun Phrases are: 
[each production, the form, the productions, all the current 				productions, end, the immediate left recursion, the  - productions,     Prof. Jay R Dhamsaniya, (PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I,    Left recursion elimination]

>> Named Entities are: 
[('Jay R Dhamsaniya', 'ORG'), ('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 67 =============================

        𝜖    Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[     , ,   , 𝜖,    , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('     ', 'SPACE'), ('\uf0e0', 'NOUN'), ('  ', 'SPACE'), ('𝜖', 'ADP'), ('   ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('     ', 'compound'), ('\uf0e0', 'nsubj'), ('  ', 'dep'), ('𝜖', 'prep'), ('   ', 'nummod'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'pobj'), ('#', 'nmod'), ('3130006', 'appos'), ('(', 'punct'), ('PS', 'nsubj'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'parataxis'), ('  ', 'appos'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[     , ], [,   ], [  , 𝜖], [𝜖,    ], [   , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[     , ,   ], [,   , 𝜖], [  , 𝜖,    ], [𝜖,    , Prof.], [   , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[     ,    Prof. Jay R Dhamsaniya, PS, Unit, – Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('Jay R Dhamsaniya', 'ORG'), ('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 68 =============================

Examples: Left recursion elimination EE+T | T 				ETE’ 				E’+TE’ | ε TT*F | F 				TFT’ 				T’*FT’ | ε  XX%Y | Z 				XZX’ 				X’%YX’ | ε       Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[Examples, :, Left, recursion, elimination, EE+T, |, T, 				, ETE, ’, 				, E’+TE, ’, |, ε, TT*F, |, F, 				, TFT, ’, 				, T’*FT, ’, |, ε,  , XX%Y, |, Z, 				, XZX, ’, 				, X’%YX, ’, |, ε,       , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('Examples', 'NOUN'), (':', 'PUNCT'), ('Left', 'VERB'), ('recursion', 'NOUN'), ('elimination', 'NOUN'), ('E\uf0e0E+T', 'NOUN'), ('|', 'NOUN'), ('T', 'PROPN'), ('\t\t\t\t', 'SPACE'), ('E\uf0e0TE', 'NOUN'), ('’', 'PUNCT'), ('\t\t\t\t', 'SPACE'), ('E’\uf0e0+TE', 'PROPN'), ('’', 'PUNCT'), ('|', 'NOUN'), ('ε', 'ADP'), ('T\uf0e0T*F', 'PROPN'), ('|', 'NOUN'), ('F', 'PROPN'), ('\t\t\t\t', 'SPACE'), ('T\uf0e0FT', 'NOUN'), ('’', 'PUNCT'), ('\t\t\t\t', 'SPACE'), ('T’\uf0e0*FT', 'NOUN'), ('’', 'PUNCT'), ('|', 'NOUN'), ('ε', 'ADP'), (' ', 'SPACE'), ('X\uf0e0X%Y', 'PROPN'), ('|', 'NOUN'), ('Z', 'PROPN'), ('\t\t\t\t', 'SPACE'), ('X\uf0e0ZX', 'NOUN'), ('’', 'PUNCT'), ('\t\t\t\t', 'SPACE'), ('X’\uf0e0%YX', 'PROPN'), ('’', 'PUNCT'), ('|', 'NOUN'), ('ε', 'ADP'), ('      ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Examples', 'nsubj'), (':', 'punct'), ('Left', 'ROOT'), ('recursion', 'compound'), ('elimination', 'dobj'), ('E\uf0e0E+T', 'compound'), ('|', 'npadvmod'), ('T', 'compound'), ('\t\t\t\t', 'compound'), ('E\uf0e0TE', 'nmod'), ('’', 'punct'), ('\t\t\t\t', 'amod'), ('E’\uf0e0+TE', 'dep'), ('’', 'punct'), ('|', 'dobj'), ('ε', 'prep'), ('T\uf0e0T*F', 'compound'), ('|', 'compound'), ('F', 'compound'), ('\t\t\t\t', 'amod'), ('T\uf0e0FT', 'nmod'), ('’', 'punct'), ('\t\t\t\t', 'amod'), ('T’\uf0e0*FT', 'pobj'), ('’', 'punct'), ('|', 'npadvmod'), ('ε', 'prep'), (' ', 'pobj'), ('X\uf0e0X%Y', 'compound'), ('|', 'npadvmod'), ('Z', 'compound'), ('\t\t\t\t', 'nmod'), ('X\uf0e0ZX', 'nmod'), ('’', 'punct'), ('\t\t\t\t', 'compound'), ('X’\uf0e0%YX', 'dobj'), ('’', 'punct'), ('|', 'npadvmod'), ('ε', 'prep'), ('      ', 'compound'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'pobj'), ('#', 'nmod'), ('3130006', 'npadvmod'), ('(', 'punct'), ('PS', 'nsubj'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'parataxis'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'dep'), ('‹#›', 'punct'), ('  ', 'appos'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'appos'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'advcl'), ('  ', 'conj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[Examples, :], [:, Left], [Left, recursion], [recursion, elimination], [elimination, EE+T], [EE+T, |], [|, T], [T, 				], [				, ETE], [ETE, ’], [’, 				], [				, E’+TE], [E’+TE, ’], [’, |], [|, ε], [ε, TT*F], [TT*F, |], [|, F], [F, 				], [				, TFT], [TFT, ’], [’, 				], [				, T’*FT], [T’*FT, ’], [’, |], [|, ε], [ε,  ], [ , XX%Y], [XX%Y, |], [|, Z], [Z, 				], [				, XZX], [XZX, ’], [’, 				], [				, X’%YX], [X’%YX, ’], [’, |], [|, ε], [ε,       ], [      , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[Examples, :, Left], [:, Left, recursion], [Left, recursion, elimination], [recursion, elimination, EE+T], [elimination, EE+T, |], [EE+T, |, T], [|, T, 				], [T, 				, ETE], [				, ETE, ’], [ETE, ’, 				], [’, 				, E’+TE], [				, E’+TE, ’], [E’+TE, ’, |], [’, |, ε], [|, ε, TT*F], [ε, TT*F, |], [TT*F, |, F], [|, F, 				], [F, 				, TFT], [				, TFT, ’], [TFT, ’, 				], [’, 				, T’*FT], [				, T’*FT, ’], [T’*FT, ’, |], [’, |, ε], [|, ε,  ], [ε,  , XX%Y], [ , XX%Y, |], [XX%Y, |, Z], [|, Z, 				], [Z, 				, XZX], [				, XZX, ’], [XZX, ’, 				], [’, 				, X’%YX], [				, X’%YX, ’], [X’%YX, ’, |], [’, |, ε], [|, ε,       ], [ε,       , Prof.], [      , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[Examples, recursion elimination, |, TT*F | F 				TFT’ 				T’*FT, Z 				XZX’ 				X’%YX,       Prof. Jay R Dhamsaniya, PS, Unit, Prof. Dixita B Kagathara, #, (CD, Unit, Theory, I]

>> Named Entities are: 
[('X’\uf0e0%YX', 'CARDINAL'), ('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 69 =============================

Exercise: Left recursion AAbd | Aa | a        BBe | b AAB | AC | a | b SA | B AABC | Acd | a | aa BBee | b ExpExp+term | Exp-term | term       


>> Tokens are: 
[Exercise, :, Left, recursion, AAbd, |, Aa, |,        , BBe, |, b, AAB, |, AC, |, |, b, SA, |, B, AABC, |, Acd, |, |, aa, BBee, |, b, ExpExp+term, |, Exp, -, term, |, term,      ] 

>> PoS Tags are: 
[('Exercise', 'NOUN'), (':', 'PUNCT'), ('Left', 'VERB'), ('recursion', 'NOUN'), ('A\uf0e0Abd', 'PROPN'), ('|', 'NOUN'), ('Aa', 'PROPN'), ('|', 'NOUN'), ('       ', 'SPACE'), ('B\uf0e0Be', 'NOUN'), ('|', 'NOUN'), ('b', 'NOUN'), ('A\uf0e0AB', 'ADV'), ('|', 'NOUN'), ('AC', 'PROPN'), ('|', 'NOUN'), ('|', 'NOUN'), ('b', 'NOUN'), ('S\uf0e0A', 'PROPN'), ('|', 'NOUN'), ('B', 'PROPN'), ('A\uf0e0ABC', 'PROPN'), ('|', 'NOUN'), ('Acd', 'PROPN'), ('|', 'NOUN'), ('|', 'NOUN'), ('aa', 'NOUN'), ('B\uf0e0Bee', 'PROPN'), ('|', 'NOUN'), ('b', 'NOUN'), ('Exp\uf0e0Exp+term', 'NOUN'), ('|', 'NOUN'), ('Exp', 'NUM'), ('-', 'PUNCT'), ('term', 'NOUN'), ('|', 'NOUN'), ('term', 'NOUN'), ('     ', 'SPACE')] 

>> Dependency Tags are: 
[('Exercise', 'nsubj'), (':', 'punct'), ('Left', 'ROOT'), ('recursion', 'dobj'), ('A\uf0e0Abd', 'compound'), ('|', 'npadvmod'), ('Aa', 'compound'), ('|', 'npadvmod'), ('       ', 'npadvmod'), ('B\uf0e0Be', 'punct'), ('|', 'npadvmod'), ('b', 'punct'), ('A\uf0e0AB', 'advmod'), ('|', 'advmod'), ('AC', 'compound'), ('|', 'npadvmod'), ('|', 'npadvmod'), ('b', 'punct'), ('S\uf0e0A', 'npadvmod'), ('|', 'npadvmod'), ('B', 'compound'), ('A\uf0e0ABC', 'appos'), ('|', 'npadvmod'), ('Acd', 'compound'), ('|', 'npadvmod'), ('|', 'npadvmod'), ('aa', 'compound'), ('B\uf0e0Bee', 'npadvmod'), ('|', 'npadvmod'), ('b', 'punct'), ('Exp\uf0e0Exp+term', 'compound'), ('|', 'npadvmod'), ('Exp', 'compound'), ('-', 'punct'), ('term', 'compound'), ('|', 'compound'), ('term', 'compound'), ('     ', 'punct')]

>> Bigrams: 
[[Exercise, :], [:, Left], [Left, recursion], [recursion, AAbd], [AAbd, |], [|, Aa], [Aa, |], [|,        ], [       , BBe], [BBe, |], [|, b], [b, AAB], [AAB, |], [|, AC], [AC, |], [|, |], [|, b], [b, SA], [SA, |], [|, B], [B, AABC], [AABC, |], [|, Acd], [Acd, |], [|, |], [|, aa], [aa, BBee], [BBee, |], [|, b], [b, ExpExp+term], [ExpExp+term, |], [|, Exp], [Exp, -], [-, term], [term, |], [|, term], [term,      ]]

>> Trigrams: 
[[Exercise, :, Left], [:, Left, recursion], [Left, recursion, AAbd], [recursion, AAbd, |], [AAbd, |, Aa], [|, Aa, |], [Aa, |,        ], [|,        , BBe], [       , BBe, |], [BBe, |, b], [|, b, AAB], [b, AAB, |], [AAB, |, AC], [|, AC, |], [AC, |, |], [|, |, b], [|, b, SA], [b, SA, |], [SA, |, B], [|, B, AABC], [B, AABC, |], [AABC, |, Acd], [|, Acd, |], [Acd, |, |], [|, |, aa], [|, aa, BBee], [aa, BBee, |], [BBee, |, b], [|, b, ExpExp+term], [b, ExpExp+term, |], [ExpExp+term, |, Exp], [|, Exp, -], [Exp, -, term], [-, term, |], [term, |, term], [|, term,      ]]

>> Noun Phrases are: 
[Exercise, recursion, B AABC]

>> Named Entities are: 
[('Acd', 'PERSON'), ('B\uf0e0Bee', 'GPE')]


============================ Sentence 70 =============================

Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›  Left factoring Left factoring is a grammar transformation that is useful for producing a grammar suitable for predictive parsing. 


>> Tokens are: 
[Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  , Left, factoring, Left, factoring, grammar, transformation, useful, producing, grammar, suitable, predictive, parsing, .] 

>> PoS Tags are: 
[('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'VERB'), (' ', 'SPACE'), ('Left', 'VERB'), ('factoring', 'NOUN'), ('Left', 'PROPN'), ('factoring', 'NOUN'), ('grammar', 'NOUN'), ('transformation', 'NOUN'), ('useful', 'ADJ'), ('producing', 'VERB'), ('grammar', 'NOUN'), ('suitable', 'ADJ'), ('predictive', 'ADJ'), ('parsing', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'nsubj'), ('#', 'appos'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'det'), ('Left', 'amod'), ('factoring', 'compound'), ('Left', 'compound'), ('factoring', 'nsubj'), ('grammar', 'compound'), ('transformation', 'attr'), ('useful', 'acomp'), ('producing', 'pcomp'), ('grammar', 'dobj'), ('suitable', 'amod'), ('predictive', 'amod'), ('parsing', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ], [ , Left], [Left, factoring], [factoring, Left], [Left, factoring], [factoring, grammar], [grammar, transformation], [transformation, useful], [useful, producing], [producing, grammar], [grammar, suitable], [suitable, predictive], [predictive, parsing], [parsing, .]]

>> Trigrams: 
[[Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ], [‹#›,  , Left], [ , Left, factoring], [Left, factoring, Left], [factoring, Left, factoring], [Left, factoring, grammar], [factoring, grammar, transformation], [grammar, transformation, useful], [transformation, useful, producing], [useful, producing, grammar], [producing, grammar, suitable], [grammar, suitable, predictive], [suitable, predictive, parsing], [predictive, parsing, .]]

>> Noun Phrases are: 
[Prof. Jay R Dhamsaniya, (PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I,  Left factoring Left factoring, a grammar transformation, a grammar, predictive parsing]

>> Named Entities are: 
[('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 71 =============================

Algorithm to left factor a grammar 


>> Tokens are: 
[Algorithm, left, factor, grammar] 

>> PoS Tags are: 
[('Algorithm', 'NOUN'), ('left', 'ADJ'), ('factor', 'NOUN'), ('grammar', 'NOUN')] 

>> Dependency Tags are: 
[('Algorithm', 'nsubj'), ('left', 'ROOT'), ('factor', 'dobj'), ('grammar', 'dobj')]

>> Bigrams: 
[[Algorithm, left], [left, factor], [factor, grammar]]

>> Trigrams: 
[[Algorithm, left, factor], [left, factor, grammar]]

>> Noun Phrases are: 
[Algorithm, factor, a grammar]

>> Named Entities are: 
[]


============================ Sentence 72 =============================

Input: Grammar G Output: An equivalent left factored grammar. 


>> Tokens are: 
[Input, :, Grammar, G, Output, :, equivalent, left, factored, grammar, .] 

>> PoS Tags are: 
[('Input', 'NOUN'), (':', 'PUNCT'), ('Grammar', 'PROPN'), ('G', 'PROPN'), ('Output', 'PROPN'), (':', 'PUNCT'), ('equivalent', 'ADJ'), ('left', 'VERB'), ('factored', 'ADJ'), ('grammar', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Input', 'ROOT'), (':', 'punct'), ('Grammar', 'compound'), ('G', 'compound'), ('Output', 'appos'), (':', 'punct'), ('equivalent', 'amod'), ('left', 'amod'), ('factored', 'amod'), ('grammar', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[Input, :], [:, Grammar], [Grammar, G], [G, Output], [Output, :], [:, equivalent], [equivalent, left], [left, factored], [factored, grammar], [grammar, .]]

>> Trigrams: 
[[Input, :, Grammar], [:, Grammar, G], [Grammar, G, Output], [G, Output, :], [Output, :, equivalent], [:, equivalent, left], [equivalent, left, factored], [left, factored, grammar], [factored, grammar, .]]

>> Noun Phrases are: 
[Input, Grammar G Output, An equivalent left factored grammar]

>> Named Entities are: 
[]


============================ Sentence 73 =============================

Method:   


>> Tokens are: 
[Method, :,  ] 

>> PoS Tags are: 
[('Method', 'PROPN'), (':', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Method', 'ROOT'), (':', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[Method, :], [:,  ]]

>> Trigrams: 
[[Method, :,  ]]

>> Noun Phrases are: 
[Method]

>> Named Entities are: 
[]


============================ Sentence 74 =============================

For each non terminal A find the longest prefix  common to two or more of its alternatives. 


>> Tokens are: 
[non, terminal, find, longest, prefix,   , common, alternatives, .] 

>> PoS Tags are: 
[('non', 'ADJ'), ('terminal', 'ADJ'), ('find', 'NOUN'), ('longest', 'ADJ'), ('prefix', 'NOUN'), ('\xa0\xa0', 'SPACE'), ('common', 'ADJ'), ('alternatives', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('non', 'amod'), ('terminal', 'pobj'), ('find', 'ROOT'), ('longest', 'amod'), ('prefix', 'dobj'), ('\xa0\xa0', 'nsubj'), ('common', 'relcl'), ('alternatives', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[non, terminal], [terminal, find], [find, longest], [longest, prefix], [prefix,   ], [  , common], [common, alternatives], [alternatives, .]]

>> Trigrams: 
[[non, terminal, find], [terminal, find, longest], [find, longest, prefix], [longest, prefix,   ], [prefix,   , common], [  , common, alternatives], [common, alternatives, .]]

>> Noun Phrases are: 
[For each non terminal A find, the longest prefix, its alternatives]

>> Named Entities are: 
[('two', 'CARDINAL')]


============================ Sentence 75 =============================

If , i.e.--,  there is a non trivial common prefix, replace all the  productions where  represents all alternatives that do not begin with  by 	    


>> Tokens are: 
[ , ,, i.e.--, ,,   , non, trivial, common, prefix, ,, replace,  , productions,   , represents, alternatives, begin,   , 	   ] 

>> PoS Tags are: 
[('\xa0', 'SPACE'), (',', 'PUNCT'), ('i.e.--', 'PUNCT'), (',', 'PUNCT'), ('\xa0\xa0', 'SPACE'), ('non', 'ADJ'), ('trivial', 'ADJ'), ('common', 'ADJ'), ('prefix', 'NOUN'), (',', 'PUNCT'), ('replace', 'VERB'), (' ', 'SPACE'), ('productions', 'NOUN'), ('\xa0\xa0', 'SPACE'), ('represents', 'VERB'), ('alternatives', 'NOUN'), ('begin', 'VERB'), ('\xa0\xa0', 'SPACE'), ('\t   ', 'SPACE')] 

>> Dependency Tags are: 
[('\xa0', 'nsubj'), (',', 'punct'), ('i.e.--', 'npadvmod'), (',', 'punct'), ('\xa0\xa0', 'appos'), ('non', 'amod'), ('trivial', 'amod'), ('common', 'amod'), ('prefix', 'attr'), (',', 'punct'), ('replace', 'conj'), (' ', 'compound'), ('productions', 'dobj'), ('\xa0\xa0', 'nsubj'), ('represents', 'relcl'), ('alternatives', 'dobj'), ('begin', 'relcl'), ('\xa0\xa0', 'pobj'), ('\t   ', 'pobj')]

>> Bigrams: 
[[ , ,], [,, i.e.--], [i.e.--, ,], [,,   ], [  , non], [non, trivial], [trivial, common], [common, prefix], [prefix, ,], [,, replace], [replace,  ], [ , productions], [productions,   ], [  , represents], [represents, alternatives], [alternatives, begin], [begin,   ], [  , 	   ]]

>> Trigrams: 
[[ , ,, i.e.--], [,, i.e.--, ,], [i.e.--, ,,   ], [,,   , non], [  , non, trivial], [non, trivial, common], [trivial, common, prefix], [common, prefix, ,], [prefix, ,, replace], [,, replace,  ], [replace,  , productions], [ , productions,   ], [productions,   , represents], [  , represents, alternatives], [represents, alternatives, begin], [alternatives, begin,   ], [begin,   , 	   ]]

>> Noun Phrases are: 
[a non trivial common prefix, all the  productions, all alternatives]

>> Named Entities are: 
[]


============================ Sentence 76 =============================

Here A' is new non terminal. 


>> Tokens are: 
[', new, non, terminal, .] 

>> PoS Tags are: 
[("'", 'PUNCT'), ('new', 'ADJ'), ('non', 'ADJ'), ('terminal', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[("'", 'punct'), ('new', 'amod'), ('non', 'amod'), ('terminal', 'attr'), ('.', 'punct')]

>> Bigrams: 
[[', new], [new, non], [non, terminal], [terminal, .]]

>> Trigrams: 
[[', new, non], [new, non, terminal], [non, terminal, .]]

>> Noun Phrases are: 
[Here A, new non terminal]

>> Named Entities are: 
[]


============================ Sentence 77 =============================

Repeatedly apply this transformation until no two alternatives for a non-terminal have a common prefix. 


>> Tokens are: 
[Repeatedly, apply, transformation, alternatives, non, -, terminal, common, prefix, .] 

>> PoS Tags are: 
[('Repeatedly', 'ADV'), ('apply', 'VERB'), ('transformation', 'NOUN'), ('alternatives', 'NOUN'), ('non', 'ADJ'), ('-', 'ADJ'), ('terminal', 'ADJ'), ('common', 'ADJ'), ('prefix', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Repeatedly', 'advmod'), ('apply', 'ROOT'), ('transformation', 'dobj'), ('alternatives', 'pobj'), ('non', 'amod'), ('-', 'amod'), ('terminal', 'pobj'), ('common', 'amod'), ('prefix', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Repeatedly, apply], [apply, transformation], [transformation, alternatives], [alternatives, non], [non, -], [-, terminal], [terminal, common], [common, prefix], [prefix, .]]

>> Trigrams: 
[[Repeatedly, apply, transformation], [apply, transformation, alternatives], [transformation, alternatives, non], [alternatives, non, -], [non, -, terminal], [-, terminal, common], [terminal, common, prefix], [common, prefix, .]]

>> Noun Phrases are: 
[this transformation, no two alternatives, a common prefix]

>> Named Entities are: 
[]


============================ Sentence 78 =============================

    Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#› 


>> Tokens are: 
[    , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›] 

>> PoS Tags are: 
[('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X')] 

>> Dependency Tags are: 
[('    ', 'nummod'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'nsubj'), ('#', 'appos'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct')]

>> Bigrams: 
[[    , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›]]

>> Trigrams: 
[[    , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›]]

>> Noun Phrases are: 
[    Prof. Jay R Dhamsaniya, (PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('Jay R Dhamsaniya', 'ORG'), ('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 79 =============================

    δ Left factoring elimination     δ   |             Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[    , δ, Left, factoring, elimination,     , δ,   , |,             , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('    ', 'SPACE'), ('δ', 'DET'), ('Left', 'ADJ'), ('factoring', 'NOUN'), ('elimination', 'NOUN'), ('    ', 'SPACE'), ('δ', 'NUM'), ('  ', 'SPACE'), ('|', 'NOUN'), ('            ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('    ', 'dep'), ('δ', 'det'), ('Left', 'amod'), ('factoring', 'compound'), ('elimination', 'appos'), ('    ', 'appos'), ('δ', 'appos'), ('  ', 'appos'), ('|', 'appos'), ('            ', 'compound'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'appos'), ('#', 'nmod'), ('3130006', 'appos'), ('(', 'punct'), ('PS', 'nsubj'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'dobj'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[    , δ], [δ, Left], [Left, factoring], [factoring, elimination], [elimination,     ], [    , δ], [δ,   ], [  , |], [|,             ], [            , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[    , δ, Left], [δ, Left, factoring], [Left, factoring, elimination], [factoring, elimination,     ], [elimination,     , δ], [    , δ,   ], [δ,   , |], [  , |,             ], [|,             , Prof.], [            , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[δ Left factoring elimination, |,             Prof. Jay R Dhamsaniya, PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 80 =============================

Example: Left factoring elimination SaAB | aCD 


>> Tokens are: 
[Example, :, Left, factoring, elimination, SaAB, |, aCD] 

>> PoS Tags are: 
[('Example', 'NOUN'), (':', 'PUNCT'), ('Left', 'VERB'), ('factoring', 'NOUN'), ('elimination', 'NOUN'), ('S\uf0e0aAB', 'NOUN'), ('|', 'NOUN'), ('aCD', 'PROPN')] 

>> Dependency Tags are: 
[('Example', 'dep'), (':', 'punct'), ('Left', 'ROOT'), ('factoring', 'compound'), ('elimination', 'dobj'), ('S\uf0e0aAB', 'appos'), ('|', 'npadvmod'), ('aCD', 'npadvmod')]

>> Bigrams: 
[[Example, :], [:, Left], [Left, factoring], [factoring, elimination], [elimination, SaAB], [SaAB, |], [|, aCD]]

>> Trigrams: 
[[Example, :, Left], [:, Left, factoring], [Left, factoring, elimination], [factoring, elimination, SaAB], [elimination, SaAB, |], [SaAB, |, aCD]]

>> Noun Phrases are: 
[factoring elimination, SaAB]

>> Named Entities are: 
[('aCD', 'PERSON')]


============================ Sentence 81 =============================

			SaS’ 			S’AB | CD A xByA | xByAzA | a  			A xByAA’ | a 			A’ Є | zA  A aAB | aA |a 			AaA’ 			A’AB | A | 𝜖 			A’AA’’ | 𝜖 			A’’B | 𝜖      Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[			, SaS, ’, 			, S’AB, |, CD, A, xByA, |, xByAzA, |,  			, A, xByAA, ’, |, 			, A’, Є, |, zA,  , A, aAB, |, aA, |a, 			, AaA, ’, 			, A’AB, |, |, 𝜖, 			, A’AA, ’’, |, 𝜖, 			, A’’B, |, 𝜖,      , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('\t\t\t', 'SPACE'), ('S\uf0e0aS', 'NOUN'), ('’', 'PUNCT'), ('\t\t\t', 'SPACE'), ('S’\uf0e0AB', 'PROPN'), ('|', 'NOUN'), ('CD', 'PROPN'), ('A\uf0e0', 'ADJ'), ('xByA', 'NOUN'), ('|', 'NOUN'), ('xByAzA', 'NUM'), ('|', 'NOUN'), (' \t\t\t', 'SPACE'), ('A\uf0e0', 'ADV'), ('xByAA', 'PROPN'), ('’', 'PUNCT'), ('|', 'NOUN'), ('\t\t\t', 'SPACE'), ('A’\uf0e0', 'PROPN'), ('Є', 'PROPN'), ('|', 'NOUN'), ('zA', 'PROPN'), (' ', 'SPACE'), ('A\uf0e0', 'ADJ'), ('aAB', 'NOUN'), ('|', 'NOUN'), ('aA', 'ADV'), ('|a', 'X'), ('\t\t\t', 'SPACE'), ('A\uf0e0aA', 'PUNCT'), ('’', 'PUNCT'), ('\t\t\t', 'SPACE'), ('A’\uf0e0AB', 'PROPN'), ('|', 'NOUN'), ('|', 'NOUN'), ('𝜖', 'ADP'), ('\t\t\t', 'SPACE'), ('A’\uf0e0AA', 'NOUN'), ('’’', 'PUNCT'), ('|', 'NOUN'), ('𝜖', 'PROPN'), ('\t\t\t', 'SPACE'), ('A’’\uf0e0B', 'PROPN'), ('|', 'NOUN'), ('𝜖', 'PROPN'), ('     ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('\t\t\t', 'compound'), ('S\uf0e0aS', 'nmod'), ('’', 'punct'), ('\t\t\t', 'compound'), ('S’\uf0e0AB', 'compound'), ('|', 'npadvmod'), ('CD', 'compound'), ('A\uf0e0', 'amod'), ('xByA', 'compound'), ('|', 'npadvmod'), ('xByAzA', 'appos'), ('|', 'appos'), (' \t\t\t', 'nmod'), ('A\uf0e0', 'amod'), ('xByAA', 'poss'), ('’', 'punct'), ('|', 'appos'), ('\t\t\t', 'compound'), ('A’\uf0e0', 'compound'), ('Є', 'compound'), ('|', 'npadvmod'), ('zA', 'nmod'), (' ', 'nmod'), ('A\uf0e0', 'amod'), ('aAB', 'appos'), ('|', 'npadvmod'), ('aA', 'appos'), ('|a', 'appos'), ('\t\t\t', 'nmod'), ('A\uf0e0aA', 'punct'), ('’', 'punct'), ('\t\t\t', 'compound'), ('A’\uf0e0AB', 'compound'), ('|', 'appos'), ('|', 'appos'), ('𝜖', 'prep'), ('\t\t\t', 'compound'), ('A’\uf0e0AA', 'appos'), ('’’', 'punct'), ('|', 'npadvmod'), ('𝜖', 'prep'), ('\t\t\t', 'compound'), ('A’’\uf0e0B', 'compound'), ('|', 'appos'), ('𝜖', 'appos'), ('     ', 'compound'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'pobj'), ('#', 'nmod'), ('3130006', 'appos'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'dobj'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[			, SaS], [SaS, ’], [’, 			], [			, S’AB], [S’AB, |], [|, CD], [CD, A], [A, xByA], [xByA, |], [|, xByAzA], [xByAzA, |], [|,  			], [ 			, A], [A, xByAA], [xByAA, ’], [’, |], [|, 			], [			, A’], [A’, Є], [Є, |], [|, zA], [zA,  ], [ , A], [A, aAB], [aAB, |], [|, aA], [aA, |a], [|a, 			], [			, AaA], [AaA, ’], [’, 			], [			, A’AB], [A’AB, |], [|, |], [|, 𝜖], [𝜖, 			], [			, A’AA], [A’AA, ’’], [’’, |], [|, 𝜖], [𝜖, 			], [			, A’’B], [A’’B, |], [|, 𝜖], [𝜖,      ], [     , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[			, SaS, ’], [SaS, ’, 			], [’, 			, S’AB], [			, S’AB, |], [S’AB, |, CD], [|, CD, A], [CD, A, xByA], [A, xByA, |], [xByA, |, xByAzA], [|, xByAzA, |], [xByAzA, |,  			], [|,  			, A], [ 			, A, xByAA], [A, xByAA, ’], [xByAA, ’, |], [’, |, 			], [|, 			, A’], [			, A’, Є], [A’, Є, |], [Є, |, zA], [|, zA,  ], [zA,  , A], [ , A, aAB], [A, aAB, |], [aAB, |, aA], [|, aA, |a], [aA, |a, 			], [|a, 			, AaA], [			, AaA, ’], [AaA, ’, 			], [’, 			, A’AB], [			, A’AB, |], [A’AB, |, |], [|, |, 𝜖], [|, 𝜖, 			], [𝜖, 			, A’AA], [			, A’AA, ’’], [A’AA, ’’, |], [’’, |, 𝜖], [|, 𝜖, 			], [𝜖, 			, A’’B], [			, A’’B, |], [A’’B, |, 𝜖], [|, 𝜖,      ], [𝜖,      , Prof.], [     , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[|, a  			A xByAA’ |, zA  A aAB, 			AaA’ 			A’AB |, A |, 			A’AA, 			A’’B |, 𝜖,      Prof. Jay R Dhamsaniya, (PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('xByA', 'GPE'), ('xByAzA', 'ORG'), ('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 82 =============================

Exercise SiEtS | iEtSeS | a A ad | a | ab | abc | x     Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[Exercise, SiEtS, |, iEtSeS, |, A, ad, |, |, ab, |, abc, |, x,     , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('Exercise', 'PROPN'), ('S\uf0e0iEtS', 'PROPN'), ('|', 'NOUN'), ('iEtSeS', 'NUM'), ('|', 'NOUN'), ('A\uf0e0', 'ADJ'), ('ad', 'NOUN'), ('|', 'NOUN'), ('|', 'NOUN'), ('ab', 'ADP'), ('|', 'NOUN'), ('abc', 'NOUN'), ('|', 'NOUN'), ('x', 'SYM'), ('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Exercise', 'compound'), ('S\uf0e0iEtS', 'compound'), ('|', 'dep'), ('iEtSeS', 'punct'), ('|', 'appos'), ('A\uf0e0', 'amod'), ('ad', 'compound'), ('|', 'npadvmod'), ('|', 'npadvmod'), ('ab', 'prep'), ('|', 'pobj'), ('abc', 'punct'), ('|', 'ROOT'), ('x', 'punct'), ('    ', 'compound'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'appos'), ('#', 'nmod'), ('3130006', 'appos'), ('(', 'punct'), ('PS', 'nsubj'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'parataxis'), ('  ', 'nummod'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'appos'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'punct'), ('Unit', 'npadvmod'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[Exercise, SiEtS], [SiEtS, |], [|, iEtSeS], [iEtSeS, |], [|, A], [A, ad], [ad, |], [|, |], [|, ab], [ab, |], [|, abc], [abc, |], [|, x], [x,     ], [    , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[Exercise, SiEtS, |], [SiEtS, |, iEtSeS], [|, iEtSeS, |], [iEtSeS, |, A], [|, A, ad], [A, ad, |], [ad, |, |], [|, |, ab], [|, ab, |], [ab, |, abc], [|, abc, |], [abc, |, x], [|, x,     ], [x,     , Prof.], [    , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[|, |,     Prof. Jay R Dhamsaniya, PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Theory, I]

>> Named Entities are: 
[('Jay R Dhamsaniya', 'ORG'), ('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 83 =============================

Parsing        Parsing Parsing is a technique that takes input string and produces output either a parse tree if string is valid sentence of grammar, or an error message indicating that string is not a valid. 


>> Tokens are: 
[Parsing,        , Parsing, Parsing, technique, takes, input, string, produces, output, parse, tree, string, valid, sentence, grammar, ,, error, message, indicating, string, valid, .] 

>> PoS Tags are: 
[('Parsing', 'VERB'), ('       ', 'SPACE'), ('Parsing', 'PROPN'), ('Parsing', 'PROPN'), ('technique', 'NOUN'), ('takes', 'VERB'), ('input', 'NOUN'), ('string', 'NOUN'), ('produces', 'VERB'), ('output', 'NOUN'), ('parse', 'NOUN'), ('tree', 'NOUN'), ('string', 'NOUN'), ('valid', 'ADJ'), ('sentence', 'NOUN'), ('grammar', 'NOUN'), (',', 'PUNCT'), ('error', 'NOUN'), ('message', 'NOUN'), ('indicating', 'VERB'), ('string', 'NOUN'), ('valid', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Parsing', 'csubj'), ('       ', 'compound'), ('Parsing', 'compound'), ('Parsing', 'dobj'), ('technique', 'attr'), ('takes', 'relcl'), ('input', 'compound'), ('string', 'dobj'), ('produces', 'conj'), ('output', 'dobj'), ('parse', 'compound'), ('tree', 'dobj'), ('string', 'nsubj'), ('valid', 'amod'), ('sentence', 'attr'), ('grammar', 'pobj'), (',', 'punct'), ('error', 'compound'), ('message', 'conj'), ('indicating', 'acl'), ('string', 'nsubj'), ('valid', 'attr'), ('.', 'punct')]

>> Bigrams: 
[[Parsing,        ], [       , Parsing], [Parsing, Parsing], [Parsing, technique], [technique, takes], [takes, input], [input, string], [string, produces], [produces, output], [output, parse], [parse, tree], [tree, string], [string, valid], [valid, sentence], [sentence, grammar], [grammar, ,], [,, error], [error, message], [message, indicating], [indicating, string], [string, valid], [valid, .]]

>> Trigrams: 
[[Parsing,        , Parsing], [       , Parsing, Parsing], [Parsing, Parsing, technique], [Parsing, technique, takes], [technique, takes, input], [takes, input, string], [input, string, produces], [string, produces, output], [produces, output, parse], [output, parse, tree], [parse, tree, string], [tree, string, valid], [string, valid, sentence], [valid, sentence, grammar], [sentence, grammar, ,], [grammar, ,, error], [,, error, message], [error, message, indicating], [message, indicating, string], [indicating, string, valid], [string, valid, .]]

>> Noun Phrases are: 
[       Parsing Parsing, a technique, input string, output, either a parse tree, string, valid sentence, grammar, an error message, string]

>> Named Entities are: 
[]


============================ Sentence 84 =============================

Types of parsing are: Top down parsing: In top down parsing parser build parse tree from top to bottom. 


>> Tokens are: 
[Types, parsing, :, parsing, :, parsing, parser, build, parse, tree, .] 

>> PoS Tags are: 
[('Types', 'NOUN'), ('parsing', 'NOUN'), (':', 'PUNCT'), ('parsing', 'VERB'), (':', 'PUNCT'), ('parsing', 'VERB'), ('parser', 'NOUN'), ('build', 'NOUN'), ('parse', 'NOUN'), ('tree', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Types', 'nsubj'), ('parsing', 'pobj'), (':', 'punct'), ('parsing', 'xcomp'), (':', 'punct'), ('parsing', 'pcomp'), ('parser', 'amod'), ('build', 'compound'), ('parse', 'compound'), ('tree', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Types, parsing], [parsing, :], [:, parsing], [parsing, :], [:, parsing], [parsing, parser], [parser, build], [build, parse], [parse, tree], [tree, .]]

>> Trigrams: 
[[Types, parsing, :], [parsing, :, parsing], [:, parsing, :], [parsing, :, parsing], [:, parsing, parser], [parsing, parser, build], [parser, build, parse], [build, parse, tree], [parse, tree, .]]

>> Noun Phrases are: 
[Types, parsing, parser build parse tree, top, bottom]

>> Named Entities are: 
[]


============================ Sentence 85 =============================

Bottom up parsing: Bottom up parser starts from leaves and work up to the root. 


>> Tokens are: 
[parsing, :, parser, starts, leaves, work, root, .] 

>> PoS Tags are: 
[('parsing', 'VERB'), (':', 'PUNCT'), ('parser', 'NOUN'), ('starts', 'NOUN'), ('leaves', 'NOUN'), ('work', 'VERB'), ('root', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('parsing', 'xcomp'), (':', 'punct'), ('parser', 'amod'), ('starts', 'ROOT'), ('leaves', 'pobj'), ('work', 'conj'), ('root', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[parsing, :], [:, parser], [parser, starts], [starts, leaves], [leaves, work], [work, root], [root, .]]

>> Trigrams: 
[[parsing, :, parser], [:, parser, starts], [parser, starts, leaves], [starts, leaves, work], [leaves, work, root], [work, root, .]]

>> Noun Phrases are: 
[Bottom up parsing: Bottom up parser starts, leaves, the root]

>> Named Entities are: 
[]


============================ Sentence 86 =============================

    Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[    , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('    ', 'nummod'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'nsubj'), ('#', 'appos'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[    , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[    , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[    Prof. Jay R Dhamsaniya, (PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('Jay R Dhamsaniya', 'ORG'), ('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 87 =============================

Classification of parsing methods Parsing Top down parsing Bottom up parsing (Shift reduce) 


>> Tokens are: 
[Classification, parsing, methods, Parsing, parsing, parsing, (, Shift, reduce, )] 

>> PoS Tags are: 
[('Classification', 'NOUN'), ('parsing', 'VERB'), ('methods', 'NOUN'), ('Parsing', 'VERB'), ('parsing', 'VERB'), ('parsing', 'VERB'), ('(', 'PUNCT'), ('Shift', 'NOUN'), ('reduce', 'VERB'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('Classification', 'ROOT'), ('parsing', 'pcomp'), ('methods', 'dobj'), ('Parsing', 'acl'), ('parsing', 'xcomp'), ('parsing', 'ccomp'), ('(', 'punct'), ('Shift', 'nsubj'), ('reduce', 'parataxis'), (')', 'punct')]

>> Bigrams: 
[[Classification, parsing], [parsing, methods], [methods, Parsing], [Parsing, parsing], [parsing, parsing], [parsing, (], [(, Shift], [Shift, reduce], [reduce, )]]

>> Trigrams: 
[[Classification, parsing, methods], [parsing, methods, Parsing], [methods, Parsing, parsing], [Parsing, parsing, parsing], [parsing, parsing, (], [parsing, (, Shift], [(, Shift, reduce], [Shift, reduce, )]]

>> Noun Phrases are: 
[Classification, methods, Top, Bottom, Shift]

>> Named Entities are: 
[('Bottom', 'PERSON')]


============================ Sentence 88 =============================

Back tracking Parsing without backtracking (predictive parsing) LR parsing Operator precedence LALR   


>> Tokens are: 
[tracking, Parsing, backtracking, (, predictive, parsing, ), LR, parsing, Operator, precedence, LALR,  ] 

>> PoS Tags are: 
[('tracking', 'VERB'), ('Parsing', 'VERB'), ('backtracking', 'VERB'), ('(', 'PUNCT'), ('predictive', 'ADJ'), ('parsing', 'NOUN'), (')', 'PUNCT'), ('LR', 'PROPN'), ('parsing', 'VERB'), ('Operator', 'PROPN'), ('precedence', 'NOUN'), ('LALR', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('tracking', 'ROOT'), ('Parsing', 'dobj'), ('backtracking', 'pcomp'), ('(', 'punct'), ('predictive', 'amod'), ('parsing', 'dobj'), (')', 'punct'), ('LR', 'npadvmod'), ('parsing', 'advcl'), ('Operator', 'compound'), ('precedence', 'compound'), ('LALR', 'dobj'), (' ', 'punct')]

>> Bigrams: 
[[tracking, Parsing], [Parsing, backtracking], [backtracking, (], [(, predictive], [predictive, parsing], [parsing, )], [), LR], [LR, parsing], [parsing, Operator], [Operator, precedence], [precedence, LALR], [LALR,  ]]

>> Trigrams: 
[[tracking, Parsing, backtracking], [Parsing, backtracking, (], [backtracking, (, predictive], [(, predictive, parsing], [predictive, parsing, )], [parsing, ), LR], [), LR, parsing], [LR, parsing, Operator], [parsing, Operator, precedence], [Operator, precedence, LALR], [precedence, LALR,  ]]

>> Noun Phrases are: 
[predictive parsing, Operator precedence LALR]

>> Named Entities are: 
[]


============================ Sentence 89 =============================

CLR  SLR   


>> Tokens are: 
[CLR,  , SLR,  ] 

>> PoS Tags are: 
[('CLR', 'PROPN'), (' ', 'SPACE'), ('SLR', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('CLR', 'ROOT'), (' ', 'appos'), ('SLR', 'compound'), (' ', 'appos')]

>> Bigrams: 
[[CLR,  ], [ , SLR], [SLR,  ]]

>> Trigrams: 
[[CLR,  , SLR], [ , SLR,  ]]

>> Noun Phrases are: 
[CLR]

>> Named Entities are: 
[('CLR', 'ORG'), ('SLR', 'ORG')]


============================ Sentence 90 =============================

Recursive  descent  LL(1)        


>> Tokens are: 
[Recursive,  , descent,  , LL(1, ),       ] 

>> PoS Tags are: 
[('Recursive', 'PROPN'), (' ', 'SPACE'), ('descent', 'NOUN'), (' ', 'SPACE'), ('LL(1', 'NOUN'), (')', 'PUNCT'), ('      ', 'SPACE')] 

>> Dependency Tags are: 
[('Recursive', 'compound'), (' ', 'poss'), ('descent', 'appos'), (' ', 'compound'), ('LL(1', 'appos'), (')', 'punct'), ('      ', 'ROOT')]

>> Bigrams: 
[[Recursive,  ], [ , descent], [descent,  ], [ , LL(1], [LL(1, )], [),       ]]

>> Trigrams: 
[[Recursive,  , descent], [ , descent,  ], [descent,  , LL(1], [ , LL(1, )], [LL(1, ),       ]]

>> Noun Phrases are: 
[descent,  LL(1]

>> Named Entities are: 
[]


============================ Sentence 91 =============================

Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara   


>> Tokens are: 
[Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara,  ] 

>> PoS Tags are: 
[('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'nsubj'), ('#', 'appos'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'dep'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'ROOT'), ('‹#›', 'punct'), ('  ', 'appos'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), (' ', 'punct')]

>> Bigrams: 
[[Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,  ]]

>> Trigrams: 
[[Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,  ]]

>> Noun Phrases are: 
[Prof. Jay R Dhamsaniya, (PS, Unit, Prof. Dixita B Kagathara]

>> Named Entities are: 
[('PS', 'ORG'), ('Dixita', 'PERSON'), ('Kagathara', 'PERSON')]


============================ Sentence 92 =============================

#2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[#, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('#', 'nmod'), ('2170701', 'nsubj'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[(CD, Unit, Theory, I]

>> Named Entities are: 
[]


============================ Sentence 93 =============================

Backtracking In backtracking, expansion of nonterminal symbol we choose one alternative and if any mismatch occurs then we try another alternative.   


>> Tokens are: 
[Backtracking, backtracking, ,, expansion, nonterminal, symbol, choose, alternative, mismatch, occurs, try, alternative, .,  ] 

>> PoS Tags are: 
[('Backtracking', 'VERB'), ('backtracking', 'NOUN'), (',', 'PUNCT'), ('expansion', 'NOUN'), ('nonterminal', 'ADJ'), ('symbol', 'NOUN'), ('choose', 'VERB'), ('alternative', 'NOUN'), ('mismatch', 'NOUN'), ('occurs', 'VERB'), ('try', 'VERB'), ('alternative', 'NOUN'), ('.', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Backtracking', 'dep'), ('backtracking', 'pobj'), (',', 'punct'), ('expansion', 'nsubj'), ('nonterminal', 'amod'), ('symbol', 'pobj'), ('choose', 'ROOT'), ('alternative', 'dobj'), ('mismatch', 'nsubj'), ('occurs', 'advcl'), ('try', 'conj'), ('alternative', 'dobj'), ('.', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[Backtracking, backtracking], [backtracking, ,], [,, expansion], [expansion, nonterminal], [nonterminal, symbol], [symbol, choose], [choose, alternative], [alternative, mismatch], [mismatch, occurs], [occurs, try], [try, alternative], [alternative, .], [.,  ]]

>> Trigrams: 
[[Backtracking, backtracking, ,], [backtracking, ,, expansion], [,, expansion, nonterminal], [expansion, nonterminal, symbol], [nonterminal, symbol, choose], [symbol, choose, alternative], [choose, alternative, mismatch], [alternative, mismatch, occurs], [mismatch, occurs, try], [occurs, try, alternative], [try, alternative, .], [alternative, .,  ]]

>> Noun Phrases are: 
[backtracking, nonterminal symbol, we, one alternative, any mismatch, we, another alternative]

>> Named Entities are: 
[]


============================ Sentence 94 =============================

Grammar: 


>> Tokens are: 
[Grammar, :] 

>> PoS Tags are: 
[('Grammar', 'PROPN'), (':', 'PUNCT')] 

>> Dependency Tags are: 
[('Grammar', 'ROOT'), (':', 'punct')]

>> Bigrams: 
[[Grammar, :]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Grammar]

>> Named Entities are: 
[('Grammar', 'PERSON')]


============================ Sentence 95 =============================

S cAd		 


>> Tokens are: 
[S, cAd, 		] 

>> PoS Tags are: 
[('S\uf0e0', 'NOUN'), ('cAd', 'NOUN'), ('\t\t', 'SPACE')] 

>> Dependency Tags are: 
[('S\uf0e0', 'ROOT'), ('cAd', 'pobj'), ('\t\t', 'punct')]

>> Bigrams: 
[[S, cAd], [cAd, 		]]

>> Trigrams: 
[[S, cAd, 		]]

>> Noun Phrases are: 
[S, cAd]

>> Named Entities are: 
[]


============================ Sentence 96 =============================

Input string: cad 	        A ab | a c 


>> Tokens are: 
[Input, string, :, cad, 	        , A, ab, |, c] 

>> PoS Tags are: 
[('Input', 'NOUN'), ('string', 'VERB'), (':', 'PUNCT'), ('cad', 'NOUN'), ('\t        ', 'SPACE'), ('A\uf0e0', 'ADV'), ('ab', 'ADP'), ('|', 'NOUN'), ('c', 'NOUN')] 

>> Dependency Tags are: 
[('Input', 'nsubj'), ('string', 'ROOT'), (':', 'punct'), ('cad', 'dep'), ('\t        ', 'dobj'), ('A\uf0e0', 'advmod'), ('ab', 'prep'), ('|', 'advmod'), ('c', 'appos')]

>> Bigrams: 
[[Input, string], [string, :], [:, cad], [cad, 	        ], [	        , A], [A, ab], [ab, |], [|, c]]

>> Trigrams: 
[[Input, string, :], [string, :, cad], [:, cad, 	        ], [cad, 	        , A], [	        , A, ab], [A, ab, |], [ab, |, c]]

>> Noun Phrases are: 
[Input, a c]

>> Named Entities are: 
[]


============================ Sentence 97 =============================

A 


>> Tokens are: 
[] 

>> PoS Tags are: 
[] 

>> Dependency Tags are: 
[]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 98 =============================

d S c A d S a b c A d S a Parsing done Make prediction Backtrack Make prediction 


>> Tokens are: 
[d, S, c, d, S, b, c, d, S, Parsing, prediction, Backtrack, prediction] 

>> PoS Tags are: 
[('d', 'PROPN'), ('S', 'NOUN'), ('c', 'NOUN'), ('d', 'X'), ('S', 'NOUN'), ('b', 'NOUN'), ('c', 'NOUN'), ('d', 'X'), ('S', 'NOUN'), ('Parsing', 'NOUN'), ('prediction', 'NOUN'), ('Backtrack', 'PROPN'), ('prediction', 'NOUN')] 

>> Dependency Tags are: 
[('d', 'meta'), ('S', 'compound'), ('c', 'pobj'), ('d', 'compound'), ('S', 'appos'), ('b', 'appos'), ('c', 'appos'), ('d', 'mark'), ('S', 'appos'), ('Parsing', 'nsubj'), ('prediction', 'dobj'), ('Backtrack', 'compound'), ('prediction', 'dobj')]

>> Bigrams: 
[[d, S], [S, c], [c, d], [d, S], [S, b], [b, c], [c, d], [d, S], [S, Parsing], [Parsing, prediction], [prediction, Backtrack], [Backtrack, prediction]]

>> Trigrams: 
[[d, S, c], [S, c, d], [c, d, S], [d, S, b], [S, b, c], [b, c, d], [c, d, S], [d, S, Parsing], [S, Parsing, prediction], [Parsing, prediction, Backtrack], [prediction, Backtrack, prediction]]

>> Noun Phrases are: 
[S c, A d S, a b, c, S, a Parsing, prediction, prediction]

>> Named Entities are: 
[('A d S a Parsing', 'WORK_OF_ART'), ('Backtrack Make', 'GPE')]


============================ Sentence 99 =============================

   Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[   , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('   ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('   ', 'nummod'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'nsubj'), ('#', 'appos'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[   , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[   , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[   Prof. Jay R Dhamsaniya, (PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('Jay R Dhamsaniya', 'ORG'), ('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 100 =============================

Exercise 


>> Tokens are: 
[Exercise] 

>> PoS Tags are: 
[('Exercise', 'NOUN')] 

>> Dependency Tags are: 
[('Exercise', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Exercise]

>> Named Entities are: 
[]


============================ Sentence 101 =============================

E 5+T | 3-T 


>> Tokens are: 
[E, 5+T, |, 3, -, T] 

>> PoS Tags are: 
[('E\uf0e0', 'ADJ'), ('5+T', 'NOUN'), ('|', 'NOUN'), ('3', 'NUM'), ('-', 'PUNCT'), ('T', 'NOUN')] 

>> Dependency Tags are: 
[('E\uf0e0', 'ROOT'), ('5+T', 'appos'), ('|', 'npadvmod'), ('3', 'nummod'), ('-', 'punct'), ('T', 'appos')]

>> Bigrams: 
[[E, 5+T], [5+T, |], [|, 3], [3, -], [-, T]]

>> Trigrams: 
[[E, 5+T, |], [5+T, |, 3], [|, 3, -], [3, -, T]]

>> Noun Phrases are: 
[5+T, -T]

>> Named Entities are: 
[('3', 'CARDINAL')]


============================ Sentence 102 =============================

T V | V*V | V+V V a | b String: 3-a+b 


>> Tokens are: 
[T, V, |, V*V, |, V+V, V, |, b, String, :, 3, -, a+b] 

>> PoS Tags are: 
[('T\uf0e0', 'NOUN'), ('V', 'NOUN'), ('|', 'NOUN'), ('V*V', 'NOUN'), ('|', 'NOUN'), ('V+V', 'PROPN'), ('V\uf0e0', 'VERB'), ('|', 'NOUN'), ('b', 'X'), ('String', 'NOUN'), (':', 'PUNCT'), ('3', 'NUM'), ('-', 'SYM'), ('a+b', 'PRON')] 

>> Dependency Tags are: 
[('T\uf0e0', 'compound'), ('V', 'nsubj'), ('|', 'advmod'), ('V*V', 'compound'), ('|', 'advmod'), ('V+V', 'npadvmod'), ('V\uf0e0', 'ROOT'), ('|', 'dobj'), ('b', 'meta'), ('String', 'dep'), (':', 'punct'), ('3', 'appos'), ('-', 'punct'), ('a+b', 'prep')]

>> Bigrams: 
[[T, V], [V, |], [|, V*V], [V*V, |], [|, V+V], [V+V, V], [V, |], [|, b], [b, String], [String, :], [:, 3], [3, -], [-, a+b]]

>> Trigrams: 
[[T, V, |], [V, |, V*V], [|, V*V, |], [V*V, |, V+V], [|, V+V, V], [V+V, V, |], [V, |, b], [|, b, String], [b, String, :], [String, :, 3], [:, 3, -], [3, -, a+b]]

>> Noun Phrases are: 
[T V, a |]

>> Named Entities are: 
[('3-a+b', 'PERCENT')]


============================ Sentence 103 =============================

     


>> Tokens are: 
[    ] 

>> PoS Tags are: 
[('    ', 'SPACE')] 

>> Dependency Tags are: 
[('    ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 104 =============================

Prof. 


>> Tokens are: 
[Prof.] 

>> PoS Tags are: 
[('Prof.', 'PROPN')] 

>> Dependency Tags are: 
[('Prof.', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Prof.]

>> Named Entities are: 
[]


============================ Sentence 105 =============================

Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#› 


>> Tokens are: 
[Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›] 

>> PoS Tags are: 
[('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X')] 

>> Dependency Tags are: 
[('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'npadvmod'), ('#', 'appos'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct')]

>> Bigrams: 
[[Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›]]

>> Trigrams: 
[[Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›]]

>> Noun Phrases are: 
[(PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('Jay R Dhamsaniya', 'ORG'), ('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 106 =============================

 Parsing Methods Parsing Top down parsing Bottom up parsing (Shift reduce) Back tracking Parsing without backtracking (predictive parsing) LR parsing Operator precedence LALR   


>> Tokens are: 
[ , Parsing, Methods, Parsing, parsing, parsing, (, Shift, reduce, ), tracking, Parsing, backtracking, (, predictive, parsing, ), LR, parsing, Operator, precedence, LALR,  ] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('Parsing', 'PROPN'), ('Methods', 'PROPN'), ('Parsing', 'VERB'), ('parsing', 'VERB'), ('parsing', 'VERB'), ('(', 'PUNCT'), ('Shift', 'NOUN'), ('reduce', 'VERB'), (')', 'PUNCT'), ('tracking', 'VERB'), ('Parsing', 'VERB'), ('backtracking', 'VERB'), ('(', 'PUNCT'), ('predictive', 'ADJ'), ('parsing', 'NOUN'), (')', 'PUNCT'), ('LR', 'PROPN'), ('parsing', 'VERB'), ('Operator', 'PROPN'), ('precedence', 'NOUN'), ('LALR', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'compound'), ('Parsing', 'compound'), ('Methods', 'dep'), ('Parsing', 'acl'), ('parsing', 'acl'), ('parsing', 'ccomp'), ('(', 'punct'), ('Shift', 'nsubj'), ('reduce', 'ccomp'), (')', 'punct'), ('tracking', 'ROOT'), ('Parsing', 'dobj'), ('backtracking', 'pcomp'), ('(', 'punct'), ('predictive', 'amod'), ('parsing', 'dobj'), (')', 'punct'), ('LR', 'npadvmod'), ('parsing', 'advcl'), ('Operator', 'compound'), ('precedence', 'compound'), ('LALR', 'dobj'), (' ', 'punct')]

>> Bigrams: 
[[ , Parsing], [Parsing, Methods], [Methods, Parsing], [Parsing, parsing], [parsing, parsing], [parsing, (], [(, Shift], [Shift, reduce], [reduce, )], [), tracking], [tracking, Parsing], [Parsing, backtracking], [backtracking, (], [(, predictive], [predictive, parsing], [parsing, )], [), LR], [LR, parsing], [parsing, Operator], [Operator, precedence], [precedence, LALR], [LALR,  ]]

>> Trigrams: 
[[ , Parsing, Methods], [Parsing, Methods, Parsing], [Methods, Parsing, parsing], [Parsing, parsing, parsing], [parsing, parsing, (], [parsing, (, Shift], [(, Shift, reduce], [Shift, reduce, )], [reduce, ), tracking], [), tracking, Parsing], [tracking, Parsing, backtracking], [Parsing, backtracking, (], [backtracking, (, predictive], [(, predictive, parsing], [predictive, parsing, )], [parsing, ), LR], [), LR, parsing], [LR, parsing, Operator], [parsing, Operator, precedence], [Operator, precedence, LALR], [precedence, LALR,  ]]

>> Noun Phrases are: 
[Top, Bottom, Shift, predictive parsing, Operator precedence LALR]

>> Named Entities are: 
[('Bottom', 'PERSON')]


============================ Sentence 107 =============================

CLR  SLR   


>> Tokens are: 
[CLR,  , SLR,  ] 

>> PoS Tags are: 
[('CLR', 'PROPN'), (' ', 'SPACE'), ('SLR', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('CLR', 'ROOT'), (' ', 'appos'), ('SLR', 'compound'), (' ', 'appos')]

>> Bigrams: 
[[CLR,  ], [ , SLR], [SLR,  ]]

>> Trigrams: 
[[CLR,  , SLR], [ , SLR,  ]]

>> Noun Phrases are: 
[CLR]

>> Named Entities are: 
[('CLR', 'ORG'), ('SLR', 'ORG')]


============================ Sentence 108 =============================

Recursive  descent  LL(1)        


>> Tokens are: 
[Recursive,  , descent,  , LL(1, ),       ] 

>> PoS Tags are: 
[('Recursive', 'PROPN'), (' ', 'SPACE'), ('descent', 'NOUN'), (' ', 'SPACE'), ('LL(1', 'NOUN'), (')', 'PUNCT'), ('      ', 'SPACE')] 

>> Dependency Tags are: 
[('Recursive', 'compound'), (' ', 'poss'), ('descent', 'appos'), (' ', 'compound'), ('LL(1', 'appos'), (')', 'punct'), ('      ', 'ROOT')]

>> Bigrams: 
[[Recursive,  ], [ , descent], [descent,  ], [ , LL(1], [LL(1, )], [),       ]]

>> Trigrams: 
[[Recursive,  , descent], [ , descent,  ], [descent,  , LL(1], [ , LL(1, )], [LL(1, ),       ]]

>> Noun Phrases are: 
[descent,  LL(1]

>> Named Entities are: 
[]


============================ Sentence 109 =============================

Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara   


>> Tokens are: 
[Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara,  ] 

>> PoS Tags are: 
[('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'nsubj'), ('#', 'appos'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'dep'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'ROOT'), ('‹#›', 'punct'), ('  ', 'appos'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), (' ', 'punct')]

>> Bigrams: 
[[Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,  ]]

>> Trigrams: 
[[Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,  ]]

>> Noun Phrases are: 
[Prof. Jay R Dhamsaniya, (PS, Unit, Prof. Dixita B Kagathara]

>> Named Entities are: 
[('PS', 'ORG'), ('Dixita', 'PERSON'), ('Kagathara', 'PERSON')]


============================ Sentence 110 =============================

#2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›  LL(1) parser (predictive parser) LL(1) is non recursive top down parser. 


>> Tokens are: 
[#, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  , LL(1, ), parser, (, predictive, parser, ), LL(1, ), non, recursive, parser, .] 

>> PoS Tags are: 
[('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE'), ('LL(1', 'PROPN'), (')', 'PUNCT'), ('parser', 'NOUN'), ('(', 'PUNCT'), ('predictive', 'ADJ'), ('parser', 'NOUN'), (')', 'PUNCT'), ('LL(1', 'PROPN'), (')', 'PUNCT'), ('non', 'ADJ'), ('recursive', 'ADJ'), ('parser', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('#', 'nmod'), ('2170701', 'nsubj'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'csubj'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'nmod'), ('LL(1', 'nmod'), (')', 'punct'), ('parser', 'attr'), ('(', 'punct'), ('predictive', 'amod'), ('parser', 'nmod'), (')', 'punct'), ('LL(1', 'appos'), (')', 'punct'), ('non', 'acomp'), ('recursive', 'amod'), ('parser', 'acomp'), ('.', 'punct')]

>> Bigrams: 
[[#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ], [ , LL(1], [LL(1, )], [), parser], [parser, (], [(, predictive], [predictive, parser], [parser, )], [), LL(1], [LL(1, )], [), non], [non, recursive], [recursive, parser], [parser, .]]

>> Trigrams: 
[[#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ], [‹#›,  , LL(1], [ , LL(1, )], [LL(1, ), parser], [), parser, (], [parser, (, predictive], [(, predictive, parser], [predictive, parser, )], [parser, ), LL(1], [), LL(1, )], [LL(1, ), non], [), non, recursive], [non, recursive, parser], [recursive, parser, .]]

>> Noun Phrases are: 
[(CD, Unit, Theory, I,  LL(1) parser, predictive parser) LL(1]

>> Named Entities are: 
[]


============================ Sentence 111 =============================

First L indicates input is scanned from left to right. 


>> Tokens are: 
[L, indicates, input, scanned, left, right, .] 

>> PoS Tags are: 
[('L', 'PROPN'), ('indicates', 'VERB'), ('input', 'NOUN'), ('scanned', 'VERB'), ('left', 'ADV'), ('right', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('L', 'nsubj'), ('indicates', 'ROOT'), ('input', 'nsubjpass'), ('scanned', 'ccomp'), ('left', 'pcomp'), ('right', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[L, indicates], [indicates, input], [input, scanned], [scanned, left], [left, right], [right, .]]

>> Trigrams: 
[[L, indicates, input], [indicates, input, scanned], [input, scanned, left], [scanned, left, right], [left, right, .]]

>> Noun Phrases are: 
[First L, input, right]

>> Named Entities are: 
[('First L', 'ORG')]


============================ Sentence 112 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 113 =============================

The second L means it uses leftmost derivation for input string   1 means it uses only input symbol to predict the parsing process. 


>> Tokens are: 
[second, L, means, uses, leftmost, derivation, input, string,   , 1, means, uses, input, symbol, predict, parsing, process, .] 

>> PoS Tags are: 
[('second', 'ADJ'), ('L', 'PROPN'), ('means', 'VERB'), ('uses', 'VERB'), ('leftmost', 'NOUN'), ('derivation', 'NOUN'), ('input', 'NOUN'), ('string', 'NOUN'), ('  ', 'SPACE'), ('1', 'NUM'), ('means', 'VERB'), ('uses', 'VERB'), ('input', 'NOUN'), ('symbol', 'NOUN'), ('predict', 'VERB'), ('parsing', 'NOUN'), ('process', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('second', 'amod'), ('L', 'nsubj'), ('means', 'ROOT'), ('uses', 'ccomp'), ('leftmost', 'compound'), ('derivation', 'dobj'), ('input', 'compound'), ('string', 'pobj'), ('  ', 'dobj'), ('1', 'nummod'), ('means', 'ccomp'), ('uses', 'ccomp'), ('input', 'compound'), ('symbol', 'dobj'), ('predict', 'xcomp'), ('parsing', 'amod'), ('process', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[second, L], [L, means], [means, uses], [uses, leftmost], [leftmost, derivation], [derivation, input], [input, string], [string,   ], [  , 1], [1, means], [means, uses], [uses, input], [input, symbol], [symbol, predict], [predict, parsing], [parsing, process], [process, .]]

>> Trigrams: 
[[second, L, means], [L, means, uses], [means, uses, leftmost], [uses, leftmost, derivation], [leftmost, derivation, input], [derivation, input, string], [input, string,   ], [string,   , 1], [  , 1, means], [1, means, uses], [means, uses, input], [uses, input, symbol], [input, symbol, predict], [symbol, predict, parsing], [predict, parsing, process], [parsing, process, .]]

>> Noun Phrases are: 
[The second L, it, leftmost derivation, input string, it, only input symbol, the parsing process]

>> Named Entities are: 
[('second', 'ORDINAL'), ('1', 'CARDINAL')]


============================ Sentence 114 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 115 =============================

Predictive parsing program Parsing table M INPUT OUTPUT    


>> Tokens are: 
[Predictive, parsing, program, Parsing, table, M, INPUT, OUTPUT,   ] 

>> PoS Tags are: 
[('Predictive', 'ADJ'), ('parsing', 'VERB'), ('program', 'NOUN'), ('Parsing', 'VERB'), ('table', 'NOUN'), ('M', 'PROPN'), ('INPUT', 'PROPN'), ('OUTPUT', 'PROPN'), ('  ', 'SPACE')] 

>> Dependency Tags are: 
[('Predictive', 'amod'), ('parsing', 'amod'), ('program', 'compound'), ('Parsing', 'ccomp'), ('table', 'compound'), ('M', 'compound'), ('INPUT', 'compound'), ('OUTPUT', 'dobj'), ('  ', 'ROOT')]

>> Bigrams: 
[[Predictive, parsing], [parsing, program], [program, Parsing], [Parsing, table], [table, M], [M, INPUT], [INPUT, OUTPUT], [OUTPUT,   ]]

>> Trigrams: 
[[Predictive, parsing, program], [parsing, program, Parsing], [program, Parsing, table], [Parsing, table, M], [table, M, INPUT], [M, INPUT, OUTPUT], [INPUT, OUTPUT,   ]]

>> Noun Phrases are: 
[table M INPUT OUTPUT]

>> Named Entities are: 
[]


============================ Sentence 116 =============================

Stack  	a	+	b	$	  	X 	Y 	Z 	$     Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›  LL(1) parsing (predictive parsing) 


>> Tokens are: 
[Stack,  	, 	, +, 	, b, 	, $, 	  	, X, 	, Y, 	, Z, 	, $,     , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  , LL(1, ), parsing, (, predictive, parsing, )] 

>> PoS Tags are: 
[('Stack', 'PROPN'), (' \t', 'SPACE'), ('\t', 'SPACE'), ('+', 'CCONJ'), ('\t', 'SPACE'), ('b', 'PROPN'), ('\t', 'SPACE'), ('$', 'SYM'), ('\t  \t', 'SPACE'), ('X', 'PROPN'), ('\t', 'SPACE'), ('Y', 'PROPN'), ('\t', 'SPACE'), ('Z', 'PROPN'), ('\t', 'SPACE'), ('$', 'SYM'), ('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE'), ('LL(1', 'NOUN'), (')', 'PUNCT'), ('parsing', 'VERB'), ('(', 'PUNCT'), ('predictive', 'ADJ'), ('parsing', 'NOUN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('Stack', 'nsubj'), (' \t', 'appos'), ('\t', 'appos'), ('+', 'cc'), ('\t', 'conj'), ('b', 'prep'), ('\t', 'appos'), ('$', 'nmod'), ('\t  \t', 'appos'), ('X', 'nmod'), ('\t', 'compound'), ('Y', 'nmod'), ('\t', 'compound'), ('Z', 'compound'), ('\t', 'appos'), ('$', 'nmod'), ('    ', 'appos'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'appos'), ('#', 'nmod'), ('3130006', 'appos'), ('(', 'punct'), ('PS', 'nsubj'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'parataxis'), ('  ', 'nummod'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'appos'), ('‹#›', 'punct'), ('  ', 'appos'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'appos'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'compound'), ('LL(1', 'npadvmod'), (')', 'punct'), ('parsing', 'advcl'), ('(', 'punct'), ('predictive', 'amod'), ('parsing', 'appos'), (')', 'punct')]

>> Bigrams: 
[[Stack,  	], [ 	, 	], [	, +], [+, 	], [	, b], [b, 	], [	, $], [$, 	  	], [	  	, X], [X, 	], [	, Y], [Y, 	], [	, Z], [Z, 	], [	, $], [$,     ], [    , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ], [ , LL(1], [LL(1, )], [), parsing], [parsing, (], [(, predictive], [predictive, parsing], [parsing, )]]

>> Trigrams: 
[[Stack,  	, 	], [ 	, 	, +], [	, +, 	], [+, 	, b], [	, b, 	], [b, 	, $], [	, $, 	  	], [$, 	  	, X], [	  	, X, 	], [X, 	, Y], [	, Y, 	], [Y, 	, Z], [	, Z, 	], [Z, 	, $], [	, $,     ], [$,     , Prof.], [    , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ], [‹#›,  , LL(1], [ , LL(1, )], [LL(1, ), parsing], [), parsing, (], [parsing, (, predictive], [(, predictive, parsing], [predictive, parsing, )]]

>> Noun Phrases are: 
[Stack, Prof. Jay R Dhamsaniya, PS, Unit, – Basic Probability, Prof. Dixita B Kagathara, #, (CD, Unit, Theory, I, predictive parsing]

>> Named Entities are: 
[('Stack', 'ORG'), ('Jay R Dhamsaniya', 'ORG'), ('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 117 =============================

Steps to construct LL(1) parser Remove left recursion / Perform left factoring (if any). 


>> Tokens are: 
[Steps, construct, LL(1, ), parser, Remove, left, recursion, /, Perform, left, factoring, (, ), .] 

>> PoS Tags are: 
[('Steps', 'NOUN'), ('construct', 'VERB'), ('LL(1', 'NOUN'), (')', 'PUNCT'), ('parser', 'NOUN'), ('Remove', 'PROPN'), ('left', 'VERB'), ('recursion', 'NOUN'), ('/', 'SYM'), ('Perform', 'VERB'), ('left', 'VERB'), ('factoring', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Steps', 'nsubj'), ('construct', 'xcomp'), ('LL(1', 'dobj'), (')', 'punct'), ('parser', 'compound'), ('Remove', 'npadvmod'), ('left', 'ROOT'), ('recursion', 'dobj'), ('/', 'punct'), ('Perform', 'conj'), ('left', 'amod'), ('factoring', 'dobj'), ('(', 'punct'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Steps, construct], [construct, LL(1], [LL(1, )], [), parser], [parser, Remove], [Remove, left], [left, recursion], [recursion, /], [/, Perform], [Perform, left], [left, factoring], [factoring, (], [(, )], [), .]]

>> Trigrams: 
[[Steps, construct, LL(1], [construct, LL(1, )], [LL(1, ), parser], [), parser, Remove], [parser, Remove, left], [Remove, left, recursion], [left, recursion, /], [recursion, /, Perform], [/, Perform, left], [Perform, left, factoring], [left, factoring, (], [factoring, (, )], [(, ), .]]

>> Noun Phrases are: 
[Steps, LL(1, recursion, left factoring]

>> Named Entities are: 
[('Remove', 'PERSON')]


============================ Sentence 118 =============================

Compute FIRST and FOLLOW of non terminals. 


>> Tokens are: 
[Compute, FOLLOW, non, terminals, .] 

>> PoS Tags are: 
[('Compute', 'PROPN'), ('FOLLOW', 'PROPN'), ('non', 'ADJ'), ('terminals', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Compute', 'compound'), ('FOLLOW', 'conj'), ('non', 'amod'), ('terminals', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Compute, FOLLOW], [FOLLOW, non], [non, terminals], [terminals, .]]

>> Trigrams: 
[[Compute, FOLLOW, non], [FOLLOW, non, terminals], [non, terminals, .]]

>> Noun Phrases are: 
[Compute FIRST, FOLLOW, non terminals]

>> Named Entities are: 
[('Compute FIRST', 'PERSON')]


============================ Sentence 119 =============================

Construct predictive parsing table. 


>> Tokens are: 
[Construct, predictive, parsing, table, .] 

>> PoS Tags are: 
[('Construct', 'VERB'), ('predictive', 'ADJ'), ('parsing', 'VERB'), ('table', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Construct', 'ROOT'), ('predictive', 'amod'), ('parsing', 'compound'), ('table', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Construct, predictive], [predictive, parsing], [parsing, table], [table, .]]

>> Trigrams: 
[[Construct, predictive, parsing], [predictive, parsing, table], [parsing, table, .]]

>> Noun Phrases are: 
[predictive parsing table]

>> Named Entities are: 
[('Construct', 'ORG')]


============================ Sentence 120 =============================

Parse the input string using parsing table. 


>> Tokens are: 
[Parse, input, string, parsing, table, .] 

>> PoS Tags are: 
[('Parse', 'VERB'), ('input', 'NOUN'), ('string', 'NOUN'), ('parsing', 'VERB'), ('table', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Parse', 'ROOT'), ('input', 'compound'), ('string', 'dobj'), ('parsing', 'xcomp'), ('table', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Parse, input], [input, string], [string, parsing], [parsing, table], [table, .]]

>> Trigrams: 
[[Parse, input, string], [input, string, parsing], [string, parsing, table], [parsing, table, .]]

>> Noun Phrases are: 
[the input string, table]

>> Named Entities are: 
[]


============================ Sentence 121 =============================

    Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[    , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('    ', 'nmod'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'nsubj'), ('#', 'appos'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[    , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[    , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[    Prof. Jay R Dhamsaniya, (PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('Jay R Dhamsaniya', 'ORG'), ('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 122 =============================

Rules to compute first of non terminal If and  is terminal, add  to . 


>> Tokens are: 
[Rules, compute, non, terminal,  , terminal, ,, add,  , .] 

>> PoS Tags are: 
[('Rules', 'NOUN'), ('compute', 'VERB'), ('non', 'ADJ'), ('terminal', 'ADJ'), (' ', 'SPACE'), ('terminal', 'ADJ'), (',', 'PUNCT'), ('add', 'VERB'), (' ', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Rules', 'nsubj'), ('compute', 'ROOT'), ('non', 'amod'), ('terminal', 'pobj'), (' ', 'nsubj'), ('terminal', 'acomp'), (',', 'punct'), ('add', 'conj'), (' ', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Rules, compute], [compute, non], [non, terminal], [terminal,  ], [ , terminal], [terminal, ,], [,, add], [add,  ], [ , .]]

>> Trigrams: 
[[Rules, compute, non], [compute, non, terminal], [non, terminal,  ], [terminal,  , terminal], [ , terminal, ,], [terminal, ,, add], [,, add,  ], [add,  , .]]

>> Noun Phrases are: 
[Rules]

>> Named Entities are: 
[('first', 'ORDINAL')]


============================ Sentence 123 =============================

If , add to . 


>> Tokens are: 
[,, add, .] 

>> PoS Tags are: 
[(',', 'PUNCT'), ('add', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(',', 'punct'), ('add', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[,, add], [add, .]]

>> Trigrams: 
[[,, add, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 124 =============================

If  is nonterminal and is a production, then place  in  if for some , a is in , and 𝜖 is in all of that is . 


>> Tokens are: 
[ , nonterminal, production, ,, place,  ,  , ,, ,, 𝜖, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('nonterminal', 'ADJ'), ('production', 'NOUN'), (',', 'PUNCT'), ('place', 'VERB'), (' ', 'SPACE'), (' ', 'SPACE'), (',', 'PUNCT'), (',', 'PUNCT'), ('𝜖', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'nsubj'), ('nonterminal', 'acomp'), ('production', 'attr'), (',', 'punct'), ('place', 'ROOT'), (' ', 'dobj'), (' ', 'pobj'), (',', 'punct'), (',', 'punct'), ('𝜖', 'nsubj'), ('.', 'punct')]

>> Bigrams: 
[[ , nonterminal], [nonterminal, production], [production, ,], [,, place], [place,  ], [ ,  ], [ , ,], [,, ,], [,, 𝜖], [𝜖, .]]

>> Trigrams: 
[[ , nonterminal, production], [nonterminal, production, ,], [production, ,, place], [,, place,  ], [place,  ,  ], [ ,  , ,], [ , ,, ,], [,, ,, 𝜖], [,, 𝜖, .]]

>> Noun Phrases are: 
[a production, 𝜖]

>> Named Entities are: 
[]


============================ Sentence 125 =============================

If 𝜖 is in  for all then add 𝜖 to . 


>> Tokens are: 
[𝜖,  , add, 𝜖, .] 

>> PoS Tags are: 
[('𝜖', 'NOUN'), (' ', 'SPACE'), ('add', 'VERB'), ('𝜖', 'ADP'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('𝜖', 'nsubj'), (' ', 'pobj'), ('add', 'ROOT'), ('𝜖', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[𝜖,  ], [ , add], [add, 𝜖], [𝜖, .]]

>> Trigrams: 
[[𝜖,  , add], [ , add, 𝜖], [add, 𝜖, .]]

>> Noun Phrases are: 
[𝜖]

>> Named Entities are: 
[]


============================ Sentence 126 =============================

Everything in  is surely in  If  does not derive 𝜖, then we do nothing more to , but if , then we add  and so on. 


>> Tokens are: 
[ , surely,  ,  , derive, 𝜖, ,, ,, ,, add,  , .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('surely', 'ADV'), (' ', 'SPACE'), (' ', 'SPACE'), ('derive', 'VERB'), ('𝜖', 'ADP'), (',', 'PUNCT'), (',', 'PUNCT'), (',', 'PUNCT'), ('add', 'VERB'), (' ', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'pobj'), ('surely', 'advmod'), (' ', 'pobj'), (' ', 'nsubj'), ('derive', 'advcl'), ('𝜖', 'dobj'), (',', 'punct'), (',', 'punct'), (',', 'punct'), ('add', 'conj'), (' ', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[ , surely], [surely,  ], [ ,  ], [ , derive], [derive, 𝜖], [𝜖, ,], [,, ,], [,, ,], [,, add], [add,  ], [ , .]]

>> Trigrams: 
[[ , surely,  ], [surely,  ,  ], [ ,  , derive], [ , derive, 𝜖], [derive, 𝜖, ,], [𝜖, ,, ,], [,, ,, ,], [,, ,, add], [,, add,  ], [add,  , .]]

>> Noun Phrases are: 
[Everything, we, nothing, we]

>> Named Entities are: 
[]


============================ Sentence 127 =============================

    Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[    , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('    ', 'nummod'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'nsubj'), ('#', 'appos'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[    , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[    , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[    Prof. Jay R Dhamsaniya, (PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('Jay R Dhamsaniya', 'ORG'), ('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 128 =============================

Rules to compute first of non terminal Simplification of Rule 3 


>> Tokens are: 
[Rules, compute, non, terminal, Simplification, Rule, 3] 

>> PoS Tags are: 
[('Rules', 'NOUN'), ('compute', 'VERB'), ('non', 'ADJ'), ('terminal', 'ADJ'), ('Simplification', 'PROPN'), ('Rule', 'NOUN'), ('3', 'NUM')] 

>> Dependency Tags are: 
[('Rules', 'nsubj'), ('compute', 'ROOT'), ('non', 'amod'), ('terminal', 'amod'), ('Simplification', 'pobj'), ('Rule', 'pobj'), ('3', 'dobj')]

>> Bigrams: 
[[Rules, compute], [compute, non], [non, terminal], [terminal, Simplification], [Simplification, Rule], [Rule, 3]]

>> Trigrams: 
[[Rules, compute, non], [compute, non, terminal], [non, terminal, Simplification], [terminal, Simplification, Rule], [Simplification, Rule, 3]]

>> Noun Phrases are: 
[Rules, non terminal Simplification, Rule]

>> Named Entities are: 
[('first', 'ORDINAL')]


============================ Sentence 129 =============================

If  ,   If  does not derives   If  derives     If  & Y2 derives ∈    


>> Tokens are: 
[ , ,,   ,  , derives,   ,  , derives,     ,  , &, Y2, derives, ∈,   ] 

>> PoS Tags are: 
[(' ', 'SPACE'), (',', 'PUNCT'), ('  ', 'SPACE'), (' ', 'SPACE'), ('derives', 'VERB'), ('  ', 'SPACE'), (' ', 'SPACE'), ('derives', 'VERB'), ('    ', 'SPACE'), (' ', 'SPACE'), ('&', 'CCONJ'), ('Y2', 'PROPN'), ('derives', 'VERB'), ('∈', 'PROPN'), ('  ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'pobj'), (',', 'punct'), ('  ', 'pobj'), (' ', 'nsubj'), ('derives', 'ROOT'), ('  ', 'dobj'), (' ', 'nsubj'), ('derives', 'advcl'), ('    ', 'dobj'), (' ', 'nsubj'), ('&', 'cc'), ('Y2', 'conj'), ('derives', 'advcl'), ('∈', 'compound'), ('  ', 'dobj')]

>> Bigrams: 
[[ , ,], [,,   ], [  ,  ], [ , derives], [derives,   ], [  ,  ], [ , derives], [derives,     ], [    ,  ], [ , &], [&, Y2], [Y2, derives], [derives, ∈], [∈,   ]]

>> Trigrams: 
[[ , ,,   ], [,,   ,  ], [  ,  , derives], [ , derives,   ], [derives,   ,  ], [  ,  , derives], [ , derives,     ], [derives,     ,  ], [    ,  , &], [ , &, Y2], [&, Y2, derives], [Y2, derives, ∈], [derives, ∈,   ]]

>> Noun Phrases are: 
[Y2]

>> Named Entities are: 
[]


============================ Sentence 130 =============================

If  , Y2 & Y3 derives ∈   


>> Tokens are: 
[ , ,, Y2, &, Y3, derives, ∈,  ] 

>> PoS Tags are: 
[(' ', 'SPACE'), (',', 'PUNCT'), ('Y2', 'PROPN'), ('&', 'CCONJ'), ('Y3', 'PROPN'), ('derives', 'VERB'), ('∈', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'nsubj'), (',', 'punct'), ('Y2', 'conj'), ('&', 'cc'), ('Y3', 'conj'), ('derives', 'ROOT'), ('∈', 'nmod'), (' ', 'dobj')]

>> Bigrams: 
[[ , ,], [,, Y2], [Y2, &], [&, Y3], [Y3, derives], [derives, ∈], [∈,  ]]

>> Trigrams: 
[[ , ,, Y2], [,, Y2, &], [Y2, &, Y3], [&, Y3, derives], [Y3, derives, ∈], [derives, ∈,  ]]

>> Noun Phrases are: 
[Y2, Y3]

>> Named Entities are: 
[('Y2', 'CARDINAL')]


============================ Sentence 131 =============================

If  , Y2 , Y3 ….. 


>> Tokens are: 
[ , ,, Y2, ,, Y3, …, ..] 

>> PoS Tags are: 
[(' ', 'SPACE'), (',', 'PUNCT'), ('Y2', 'PROPN'), (',', 'PUNCT'), ('Y3', 'PROPN'), ('…', 'PUNCT'), ('..', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'pobj'), (',', 'punct'), ('Y2', 'conj'), (',', 'punct'), ('Y3', 'appos'), ('…', 'punct'), ('..', 'punct')]

>> Bigrams: 
[[ , ,], [,, Y2], [Y2, ,], [,, Y3], [Y3, …], […, ..]]

>> Trigrams: 
[[ , ,, Y2], [,, Y2, ,], [Y2, ,, Y3], [,, Y3, …], [Y3, …, ..]]

>> Noun Phrases are: 
[Y2, Y3]

>> Named Entities are: 
[('Y2', 'CARDINAL'), ('Y3', 'PERSON')]


============================ Sentence 132 =============================

YK all derives ∈  (note: if all non terminals derives ∈ then add ∈ to FIRST(A)) 


>> Tokens are: 
[YK, derives, ∈,  , (, note, :, non, terminals, derives, ∈, add, ∈, FIRST(A, ), )] 

>> PoS Tags are: 
[('YK', 'NOUN'), ('derives', 'VERB'), ('∈', 'X'), (' ', 'SPACE'), ('(', 'PUNCT'), ('note', 'VERB'), (':', 'PUNCT'), ('non', 'ADJ'), ('terminals', 'NOUN'), ('derives', 'VERB'), ('∈', 'PROPN'), ('add', 'VERB'), ('∈', 'PROPN'), ('FIRST(A', 'X'), (')', 'PUNCT'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('YK', 'nsubj'), ('derives', 'ROOT'), ('∈', 'nmod'), (' ', 'dobj'), ('(', 'punct'), ('note', 'parataxis'), (':', 'punct'), ('non', 'amod'), ('terminals', 'nsubj'), ('derives', 'advcl'), ('∈', 'dobj'), ('add', 'conj'), ('∈', 'dobj'), ('FIRST(A', 'pobj'), (')', 'punct'), (')', 'punct')]

>> Bigrams: 
[[YK, derives], [derives, ∈], [∈,  ], [ , (], [(, note], [note, :], [:, non], [non, terminals], [terminals, derives], [derives, ∈], [∈, add], [add, ∈], [∈, FIRST(A], [FIRST(A, )], [), )]]

>> Trigrams: 
[[YK, derives, ∈], [derives, ∈,  ], [∈,  , (], [ , (, note], [(, note, :], [note, :, non], [:, non, terminals], [non, terminals, derives], [terminals, derives, ∈], [derives, ∈, add], [∈, add, ∈], [add, ∈, FIRST(A], [∈, FIRST(A, )], [FIRST(A, ), )]]

>> Noun Phrases are: 
[YK, all non terminals, ∈, ∈]

>> Named Entities are: 
[('∈', 'NORP'), ('∈', 'NORP')]


============================ Sentence 133 =============================

    Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[    , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('    ', 'compound'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'nsubj'), ('#', 'appos'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[    , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[    , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[    Prof. Jay R Dhamsaniya, (PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('Jay R Dhamsaniya', 'ORG'), ('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 134 =============================

Rules to compute FOLLOW of non terminal Place S is start symbol) 


>> Tokens are: 
[Rules, compute, FOLLOW, non, terminal, Place, S, start, symbol, )] 

>> PoS Tags are: 
[('Rules', 'NOUN'), ('compute', 'VERB'), ('FOLLOW', 'NOUN'), ('non', 'ADJ'), ('terminal', 'ADJ'), ('Place', 'PROPN'), ('S', 'PROPN'), ('start', 'VERB'), ('symbol', 'NOUN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('Rules', 'nsubj'), ('compute', 'ROOT'), ('FOLLOW', 'dobj'), ('non', 'amod'), ('terminal', 'amod'), ('Place', 'compound'), ('S', 'pobj'), ('start', 'dep'), ('symbol', 'npadvmod'), (')', 'punct')]

>> Bigrams: 
[[Rules, compute], [compute, FOLLOW], [FOLLOW, non], [non, terminal], [terminal, Place], [Place, S], [S, start], [start, symbol], [symbol, )]]

>> Trigrams: 
[[Rules, compute, FOLLOW], [compute, FOLLOW, non], [FOLLOW, non, terminal], [non, terminal, Place], [terminal, Place, S], [Place, S, start], [S, start, symbol], [start, symbol, )]]

>> Noun Phrases are: 
[Rules, FOLLOW, non terminal Place S]

>> Named Entities are: 
[('Place S', 'ORG')]


============================ Sentence 135 =============================

If then everything in  except for 𝜖 is placed in   If there is a production or a production  where  contains  then everything in     Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#› 


>> Tokens are: 
[ , 𝜖, placed,   , production, production,  ,  , contains,  ,     , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('𝜖', 'NOUN'), ('placed', 'VERB'), ('  ', 'SPACE'), ('production', 'NOUN'), ('production', 'NOUN'), (' ', 'SPACE'), (' ', 'SPACE'), ('contains', 'VERB'), (' ', 'SPACE'), ('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X')] 

>> Dependency Tags are: 
[(' ', 'pobj'), ('𝜖', 'nsubjpass'), ('placed', 'advcl'), ('  ', 'pobj'), ('production', 'attr'), ('production', 'conj'), (' ', 'attr'), (' ', 'nsubj'), ('contains', 'relcl'), (' ', 'dobj'), ('    ', 'pobj'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'pobj'), ('#', 'nmod'), ('3130006', 'appos'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'attr'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct')]

>> Bigrams: 
[[ , 𝜖], [𝜖, placed], [placed,   ], [  , production], [production, production], [production,  ], [ ,  ], [ , contains], [contains,  ], [ ,     ], [    , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›]]

>> Trigrams: 
[[ , 𝜖, placed], [𝜖, placed,   ], [placed,   , production], [  , production, production], [production, production,  ], [production,  ,  ], [ ,  , contains], [ , contains,  ], [contains,  ,     ], [ ,     , Prof.], [    , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›]]

>> Noun Phrases are: 
[everything, 𝜖, a production, a production, then everything, Prof. Jay R Dhamsaniya, (PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('Jay R Dhamsaniya', 'ORG'), ('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 136 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 137 =============================

How to apply rules to find FOLLOW of non terminal? 


>> Tokens are: 
[apply, rules, find, FOLLOW, non, terminal, ?] 

>> PoS Tags are: 
[('apply', 'VERB'), ('rules', 'NOUN'), ('find', 'VERB'), ('FOLLOW', 'PROPN'), ('non', 'ADJ'), ('terminal', 'NOUN'), ('?', 'PUNCT')] 

>> Dependency Tags are: 
[('apply', 'ROOT'), ('rules', 'dobj'), ('find', 'advcl'), ('FOLLOW', 'dobj'), ('non', 'amod'), ('terminal', 'pobj'), ('?', 'punct')]

>> Bigrams: 
[[apply, rules], [rules, find], [find, FOLLOW], [FOLLOW, non], [non, terminal], [terminal, ?]]

>> Trigrams: 
[[apply, rules, find], [rules, find, FOLLOW], [find, FOLLOW, non], [FOLLOW, non, terminal], [non, terminal, ?]]

>> Noun Phrases are: 
[rules, FOLLOW, non terminal]

>> Named Entities are: 
[]


============================ Sentence 138 =============================

        𝜖  𝜖      Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[        , 𝜖,  , 𝜖,      , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('        ', 'SPACE'), ('𝜖', 'VERB'), (' ', 'SPACE'), ('𝜖', 'PROPN'), ('     ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('        ', 'nsubj'), ('𝜖', 'dep'), (' ', 'advmod'), ('𝜖', 'prep'), ('     ', 'pobj'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'npadvmod'), ('#', 'nmod'), ('3130006', 'npadvmod'), ('(', 'punct'), ('PS', 'nsubj'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'dobj'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[        , 𝜖], [𝜖,  ], [ , 𝜖], [𝜖,      ], [     , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[        , 𝜖,  ], [𝜖,  , 𝜖], [ , 𝜖,      ], [𝜖,      , Prof.], [     , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 139 =============================

Rules to construct predictive parsing table For each production  of the grammar, do steps 2 and 3. 


>> Tokens are: 
[Rules, construct, predictive, parsing, table, production,  , grammar, ,, steps, 2, 3, .] 

>> PoS Tags are: 
[('Rules', 'NOUN'), ('construct', 'VERB'), ('predictive', 'ADJ'), ('parsing', 'NOUN'), ('table', 'NOUN'), ('production', 'NOUN'), (' ', 'SPACE'), ('grammar', 'NOUN'), (',', 'PUNCT'), ('steps', 'NOUN'), ('2', 'NUM'), ('3', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Rules', 'nsubj'), ('construct', 'ROOT'), ('predictive', 'amod'), ('parsing', 'compound'), ('table', 'dobj'), ('production', 'pobj'), (' ', 'pobj'), ('grammar', 'pobj'), (',', 'punct'), ('steps', 'dobj'), ('2', 'nummod'), ('3', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[Rules, construct], [construct, predictive], [predictive, parsing], [parsing, table], [table, production], [production,  ], [ , grammar], [grammar, ,], [,, steps], [steps, 2], [2, 3], [3, .]]

>> Trigrams: 
[[Rules, construct, predictive], [construct, predictive, parsing], [predictive, parsing, table], [parsing, table, production], [table, production,  ], [production,  , grammar], [ , grammar, ,], [grammar, ,, steps], [,, steps, 2], [steps, 2, 3], [2, 3, .]]

>> Noun Phrases are: 
[Rules, predictive parsing table, each production, the grammar, steps]

>> Named Entities are: 
[('2', 'CARDINAL')]


============================ Sentence 140 =============================

For each terminal  in , Add  to . 


>> Tokens are: 
[terminal,  , ,, Add,  , .] 

>> PoS Tags are: 
[('terminal', 'NOUN'), (' ', 'SPACE'), (',', 'PUNCT'), ('Add', 'VERB'), (' ', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('terminal', 'pobj'), (' ', 'pobj'), (',', 'punct'), ('Add', 'ROOT'), (' ', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[terminal,  ], [ , ,], [,, Add], [Add,  ], [ , .]]

>> Trigrams: 
[[terminal,  , ,], [ , ,, Add], [,, Add,  ], [Add,  , .]]

>> Noun Phrases are: 
[each terminal]

>> Named Entities are: 
[]


============================ Sentence 141 =============================

If  is in , Add  to  for each terminal  in . 


>> Tokens are: 
[ , ,, Add,  ,  , terminal,  , .] 

>> PoS Tags are: 
[(' ', 'SPACE'), (',', 'PUNCT'), ('Add', 'VERB'), (' ', 'SPACE'), (' ', 'SPACE'), ('terminal', 'NOUN'), (' ', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'nsubj'), (',', 'punct'), ('Add', 'ROOT'), (' ', 'dobj'), (' ', 'pobj'), ('terminal', 'amod'), (' ', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[ , ,], [,, Add], [Add,  ], [ ,  ], [ , terminal], [terminal,  ], [ , .]]

>> Trigrams: 
[[ , ,, Add], [,, Add,  ], [Add,  ,  ], [ ,  , terminal], [ , terminal,  ], [terminal,  , .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 142 =============================

If  is in , and  is in , add  to . 


>> Tokens are: 
[ , ,,  , ,, add,  , .] 

>> PoS Tags are: 
[(' ', 'SPACE'), (',', 'PUNCT'), (' ', 'SPACE'), (',', 'PUNCT'), ('add', 'VERB'), (' ', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'nsubj'), (',', 'punct'), (' ', 'nsubj'), (',', 'punct'), ('add', 'conj'), (' ', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[ , ,], [,,  ], [ , ,], [,, add], [add,  ], [ , .]]

>> Trigrams: 
[[ , ,,  ], [,,  , ,], [ , ,, add], [,, add,  ], [add,  , .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 143 =============================

Make each undefined entry of M be error. 


>> Tokens are: 
[undefined, entry, M, error, .] 

>> PoS Tags are: 
[('undefined', 'ADJ'), ('entry', 'NOUN'), ('M', 'NOUN'), ('error', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('undefined', 'amod'), ('entry', 'dobj'), ('M', 'pobj'), ('error', 'attr'), ('.', 'punct')]

>> Bigrams: 
[[undefined, entry], [entry, M], [M, error], [error, .]]

>> Trigrams: 
[[undefined, entry, M], [entry, M, error], [M, error, .]]

>> Noun Phrases are: 
[each undefined entry, M, error]

>> Named Entities are: 
[]


============================ Sentence 144 =============================

    Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[    , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('    ', 'compound'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'nsubj'), ('#', 'appos'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[    , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[    , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[    Prof. Jay R Dhamsaniya, (PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('Jay R Dhamsaniya', 'ORG'), ('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 145 =============================

Example-1: LL(1) parsing   Step 1: Not required   


>> Tokens are: 
[Example-1, :, LL(1, ), parsing,   , Step, 1, :, required,  ] 

>> PoS Tags are: 
[('Example-1', 'PROPN'), (':', 'PUNCT'), ('LL(1', 'PROPN'), (')', 'PUNCT'), ('parsing', 'VERB'), ('  ', 'SPACE'), ('Step', 'PROPN'), ('1', 'NUM'), (':', 'PUNCT'), ('required', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Example-1', 'nmod'), (':', 'punct'), ('LL(1', 'nsubj'), (')', 'punct'), ('parsing', 'acl'), ('  ', 'compound'), ('Step', 'dobj'), ('1', 'nummod'), (':', 'punct'), ('required', 'ROOT'), (' ', 'dobj')]

>> Bigrams: 
[[Example-1, :], [:, LL(1], [LL(1, )], [), parsing], [parsing,   ], [  , Step], [Step, 1], [1, :], [:, required], [required,  ]]

>> Trigrams: 
[[Example-1, :, LL(1], [:, LL(1, )], [LL(1, ), parsing], [), parsing,   ], [parsing,   , Step], [  , Step, 1], [Step, 1, :], [1, :, required], [:, required,  ]]

>> Noun Phrases are: 
[Example-1: LL(1,   Step]

>> Named Entities are: 
[('1', 'CARDINAL')]


============================ Sentence 146 =============================

Step 2: Compute FIRST First(S) 


>> Tokens are: 
[Step, 2, :, Compute, First(S, )] 

>> PoS Tags are: 
[('Step', 'NOUN'), ('2', 'NUM'), (':', 'PUNCT'), ('Compute', 'PROPN'), ('First(S', 'PROPN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('Step', 'ROOT'), ('2', 'nummod'), (':', 'punct'), ('Compute', 'compound'), ('First(S', 'appos'), (')', 'punct')]

>> Bigrams: 
[[Step, 2], [2, :], [:, Compute], [Compute, First(S], [First(S, )]]

>> Trigrams: 
[[Step, 2, :], [2, :, Compute], [:, Compute, First(S], [Compute, First(S, )]]

>> Noun Phrases are: 
[Step, Compute FIRST First(S]

>> Named Entities are: 
[('2', 'CARDINAL')]


============================ Sentence 147 =============================

SaBa  First(B) BbB 


>> Tokens are: 
[SaBa,  , First(B, ), BbB] 

>> PoS Tags are: 
[('S\uf0e0aBa', 'PROPN'), (' ', 'SPACE'), ('First(B', 'PROPN'), (')', 'PUNCT'), ('B\uf0e0bB', 'PUNCT')] 

>> Dependency Tags are: 
[('S\uf0e0aBa', 'ROOT'), (' ', 'dobj'), ('First(B', 'npadvmod'), (')', 'punct'), ('B\uf0e0bB', 'punct')]

>> Bigrams: 
[[SaBa,  ], [ , First(B], [First(B, )], [), BbB]]

>> Trigrams: 
[[SaBa,  , First(B], [ , First(B, )], [First(B, ), BbB]]

>> Noun Phrases are: 
[SaBa]

>> Named Entities are: 
[]


============================ Sentence 148 =============================

					B𝜖  SaBa 	BbB | ϵ 	 	S		a	B	a  	A		  	B		𝜖  	A		   


>> Tokens are: 
[					, B𝜖,  , SaBa, 	, BbB, |, ϵ, 	 	, S, 	, , 	, 	, B, 	,  	, 	, , 	  	, B, 	, , 	, 𝜖,  	, 	, , 	  ] 

>> PoS Tags are: 
[('\t\t\t\t\t', 'SPACE'), ('B\uf0e0𝜖', 'VERB'), (' ', 'SPACE'), ('S\uf0e0aBa', 'PROPN'), ('\t', 'SPACE'), ('B\uf0e0bB', 'PUNCT'), ('|', 'NOUN'), ('ϵ', 'NUM'), ('\t \t', 'SPACE'), ('S', 'PROPN'), ('\t', 'SPACE'), ('\uf0e0', 'PROPN'), ('\t', 'SPACE'), ('\t', 'SPACE'), ('B', 'PROPN'), ('\t', 'SPACE'), (' \t', 'SPACE'), ('\t', 'SPACE'), ('\uf0e0', 'NOUN'), ('\t  \t', 'SPACE'), ('B', 'PROPN'), ('\t', 'SPACE'), ('\uf0e0', 'PROPN'), ('\t', 'SPACE'), ('𝜖', 'PROPN'), (' \t', 'SPACE'), ('\t', 'SPACE'), ('\uf0e0', 'NOUN'), ('\t  ', 'SPACE')] 

>> Dependency Tags are: 
[('\t\t\t\t\t', 'meta'), ('B\uf0e0𝜖', 'nsubj'), (' ', 'compound'), ('S\uf0e0aBa', 'compound'), ('\t', 'nsubj'), ('B\uf0e0bB', 'punct'), ('|', 'npadvmod'), ('ϵ', 'punct'), ('\t \t', 'compound'), ('S', 'compound'), ('\t', 'compound'), ('\uf0e0', 'appos'), ('\t', 'nsubj'), ('\t', 'compound'), ('B', 'compound'), ('\t', 'appos'), (' \t', 'appos'), ('\t', 'compound'), ('\uf0e0', 'compound'), ('\t  \t', 'compound'), ('B', 'compound'), ('\t', 'appos'), ('\uf0e0', 'appos'), ('\t', 'appos'), ('𝜖', 'nmod'), (' \t', 'compound'), ('\t', 'compound'), ('\uf0e0', 'ROOT'), ('\t  ', 'punct')]

>> Bigrams: 
[[					, B𝜖], [B𝜖,  ], [ , SaBa], [SaBa, 	], [	, BbB], [BbB, |], [|, ϵ], [ϵ, 	 	], [	 	, S], [S, 	], [	, ], [, 	], [	, 	], [	, B], [B, 	], [	,  	], [ 	, 	], [	, ], [, 	  	], [	  	, B], [B, 	], [	, ], [, 	], [	, 𝜖], [𝜖,  	], [ 	, 	], [	, ], [, 	  ]]

>> Trigrams: 
[[					, B𝜖,  ], [B𝜖,  , SaBa], [ , SaBa, 	], [SaBa, 	, BbB], [	, BbB, |], [BbB, |, ϵ], [|, ϵ, 	 	], [ϵ, 	 	, S], [	 	, S, 	], [S, 	, ], [	, , 	], [, 	, 	], [	, 	, B], [	, B, 	], [B, 	,  	], [	,  	, 	], [ 	, 	, ], [	, , 	  	], [, 	  	, B], [	  	, B, 	], [B, 	, ], [	, , 	], [, 	, 𝜖], [	, 𝜖,  	], [𝜖,  	, 	], [ 	, 	, ], [	, , 	  ]]

>> Noun Phrases are: 
[	 	S	, ]

>> Named Entities are: 
[]


============================ Sentence 149 =============================

Rule 1 add  to  Rule 2 add  to  FIRST(B)={ b   , 𝜖 } 	NT	First  	S	{ a }  	B	{b,𝜖}   	B		b	B  	A		   


>> Tokens are: 
[Rule, 1, add,  ,  , Rule, 2, add,  ,  , FIRST(B)=, {, b,   , ,, 𝜖, }, 	, NT, 	,  	, S, 	, {, },  	, B, 	, {, b,𝜖, },   	, B, 	, , 	, b, 	, B,  	, 	, , 	  ] 

>> PoS Tags are: 
[('Rule', 'NOUN'), ('1', 'NUM'), ('add', 'VERB'), (' ', 'SPACE'), (' ', 'SPACE'), ('Rule', 'VERB'), ('2', 'NUM'), ('add', 'VERB'), (' ', 'SPACE'), (' ', 'SPACE'), ('FIRST(B)=', 'PROPN'), ('{', 'PUNCT'), ('b', 'NOUN'), ('  ', 'SPACE'), (',', 'PUNCT'), ('𝜖', 'X'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('NT', 'PROPN'), ('\t', 'SPACE'), (' \t', 'SPACE'), ('S', 'PROPN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('B', 'PROPN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('b,𝜖', 'NOUN'), ('}', 'PUNCT'), ('  \t', 'SPACE'), ('B', 'NOUN'), ('\t', 'SPACE'), ('\uf0e0', 'PROPN'), ('\t', 'SPACE'), ('b', 'PROPN'), ('\t', 'SPACE'), ('B', 'PROPN'), (' \t', 'SPACE'), ('\t', 'SPACE'), ('\uf0e0', 'NOUN'), ('\t  ', 'SPACE')] 

>> Dependency Tags are: 
[('Rule', 'nsubj'), ('1', 'nummod'), ('add', 'ROOT'), (' ', 'dobj'), (' ', 'pobj'), ('Rule', 'dep'), ('2', 'nummod'), ('add', 'advcl'), (' ', 'dobj'), (' ', 'pobj'), ('FIRST(B)=', 'dobj'), ('{', 'punct'), ('b', 'appos'), ('  ', 'appos'), (',', 'punct'), ('𝜖', 'dep'), ('}', 'punct'), ('\t', 'compound'), ('NT', 'compound'), ('\t', 'compound'), (' \t', 'compound'), ('S', 'compound'), ('\t', 'dobj'), ('{', 'punct'), ('}', 'punct'), (' \t', 'compound'), ('B', 'compound'), ('\t', 'appos'), ('{', 'punct'), ('b,𝜖', 'appos'), ('}', 'punct'), ('  \t', 'compound'), ('B', 'compound'), ('\t', 'compound'), ('\uf0e0', 'appos'), ('\t', 'compound'), ('b', 'appos'), ('\t', 'compound'), ('B', 'compound'), (' \t', 'compound'), ('\t', 'compound'), ('\uf0e0', 'appos'), ('\t  ', 'punct')]

>> Bigrams: 
[[Rule, 1], [1, add], [add,  ], [ ,  ], [ , Rule], [Rule, 2], [2, add], [add,  ], [ ,  ], [ , FIRST(B)=], [FIRST(B)=, {], [{, b], [b,   ], [  , ,], [,, 𝜖], [𝜖, }], [}, 	], [	, NT], [NT, 	], [	,  	], [ 	, S], [S, 	], [	, {], [{, }], [},  	], [ 	, B], [B, 	], [	, {], [{, b,𝜖], [b,𝜖, }], [},   	], [  	, B], [B, 	], [	, ], [, 	], [	, b], [b, 	], [	, B], [B,  	], [ 	, 	], [	, ], [, 	  ]]

>> Trigrams: 
[[Rule, 1, add], [1, add,  ], [add,  ,  ], [ ,  , Rule], [ , Rule, 2], [Rule, 2, add], [2, add,  ], [add,  ,  ], [ ,  , FIRST(B)=], [ , FIRST(B)=, {], [FIRST(B)=, {, b], [{, b,   ], [b,   , ,], [  , ,, 𝜖], [,, 𝜖, }], [𝜖, }, 	], [}, 	, NT], [	, NT, 	], [NT, 	,  	], [	,  	, S], [ 	, S, 	], [S, 	, {], [	, {, }], [{, },  	], [},  	, B], [ 	, B, 	], [B, 	, {], [	, {, b,𝜖], [{, b,𝜖, }], [b,𝜖, },   	], [},   	, B], [  	, B, 	], [B, 	, ], [	, , 	], [, 	, b], [	, b, 	], [b, 	, B], [	, B,  	], [B,  	, 	], [ 	, 	, ], [	, , 	  ]]

>> Noun Phrases are: 
[Rule, FIRST(B)=, b, b,𝜖,   	B	, 	b, 	B  	A	]

>> Named Entities are: 
[]


============================ Sentence 150 =============================

Rule 1 add  to   FIRST(S)={ a }     Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[Rule, 1, add,  ,   , FIRST(S)=, {, },     , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('Rule', 'NOUN'), ('1', 'NUM'), ('add', 'VERB'), (' ', 'SPACE'), ('  ', 'SPACE'), ('FIRST(S)=', 'PROPN'), ('{', 'PUNCT'), ('}', 'PUNCT'), ('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Rule', 'nsubj'), ('1', 'nummod'), ('add', 'ROOT'), (' ', 'dobj'), ('  ', 'pobj'), ('FIRST(S)=', 'punct'), ('{', 'punct'), ('}', 'punct'), ('    ', 'compound'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'npadvmod'), ('#', 'nmod'), ('3130006', 'appos'), ('(', 'punct'), ('PS', 'nsubj'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'parataxis'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'xcomp'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[Rule, 1], [1, add], [add,  ], [ ,   ], [  , FIRST(S)=], [FIRST(S)=, {], [{, }], [},     ], [    , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[Rule, 1, add], [1, add,  ], [add,  ,   ], [ ,   , FIRST(S)=], [  , FIRST(S)=, {], [FIRST(S)=, {, }], [{, },     ], [},     , Prof.], [    , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[Rule, PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 151 =============================

Example-1: LL(1) parsing   Step 2: Compute FOLLOW Follow(S) 


>> Tokens are: 
[Example-1, :, LL(1, ), parsing,   , Step, 2, :, Compute, FOLLOW, Follow(S, )] 

>> PoS Tags are: 
[('Example-1', 'PROPN'), (':', 'PUNCT'), ('LL(1', 'PROPN'), (')', 'PUNCT'), ('parsing', 'VERB'), ('  ', 'SPACE'), ('Step', 'PROPN'), ('2', 'NUM'), (':', 'PUNCT'), ('Compute', 'PROPN'), ('FOLLOW', 'PROPN'), ('Follow(S', 'PROPN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('Example-1', 'nmod'), (':', 'punct'), ('LL(1', 'ROOT'), (')', 'punct'), ('parsing', 'acl'), ('  ', 'compound'), ('Step', 'dobj'), ('2', 'nummod'), (':', 'punct'), ('Compute', 'compound'), ('FOLLOW', 'compound'), ('Follow(S', 'appos'), (')', 'punct')]

>> Bigrams: 
[[Example-1, :], [:, LL(1], [LL(1, )], [), parsing], [parsing,   ], [  , Step], [Step, 2], [2, :], [:, Compute], [Compute, FOLLOW], [FOLLOW, Follow(S], [Follow(S, )]]

>> Trigrams: 
[[Example-1, :, LL(1], [:, LL(1, )], [LL(1, ), parsing], [), parsing,   ], [parsing,   , Step], [  , Step, 2], [Step, 2, :], [2, :, Compute], [:, Compute, FOLLOW], [Compute, FOLLOW, Follow(S], [FOLLOW, Follow(S, )]]

>> Noun Phrases are: 
[Example-1: LL(1,   Step, Compute FOLLOW Follow(S]

>> Named Entities are: 
[('2', 'CARDINAL')]


============================ Sentence 152 =============================

  Follow(B) 


>> Tokens are: 
[  , Follow(B, )] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('Follow(B', 'NOUN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('Follow(B', 'appos'), (')', 'punct')]

>> Bigrams: 
[[  , Follow(B], [Follow(B, )]]

>> Trigrams: 
[[  , Follow(B, )]]

>> Noun Phrases are: 
[Follow(B]

>> Named Entities are: 
[]


============================ Sentence 153 =============================

SaBa 				BbB    


>> Tokens are: 
[SaBa, 				, BbB,   ] 

>> PoS Tags are: 
[('S\uf0e0aBa', 'PROPN'), ('\t\t\t\t', 'SPACE'), ('B\uf0e0bB', 'PUNCT'), ('  ', 'SPACE')] 

>> Dependency Tags are: 
[('S\uf0e0aBa', 'ROOT'), ('\t\t\t\t', 'npadvmod'), ('B\uf0e0bB', 'punct'), ('  ', 'appos')]

>> Bigrams: 
[[SaBa, 				], [				, BbB], [BbB,   ]]

>> Trigrams: 
[[SaBa, 				, BbB], [				, BbB,   ]]

>> Noun Phrases are: 
[SaBa]

>> Named Entities are: 
[('S\uf0e0aBa \t\t\t\t', 'LOC')]


============================ Sentence 154 =============================

SaBa 	BbB | ϵ 	 Follow(B)={ a   	B		b	B  Follow(S)={ $ }  	NT	First 	Follow  	S	{a}	{$} 	B	{b,𝜖}	{a}  	S 


>> Tokens are: 
[SaBa, 	, BbB, |, ϵ, 	 , Follow(B)=, {,   	, B, 	, , 	, b, 	, B,  , Follow(S)=, {, $, },  	, NT, 	, 	, Follow,  	, S, 	, {, }, 	, {, $, }, 	, B, 	, {, b,𝜖, }, 	, {, },  	, S] 

>> PoS Tags are: 
[('S\uf0e0aBa', 'PROPN'), ('\t', 'SPACE'), ('B\uf0e0bB', 'PUNCT'), ('|', 'NOUN'), ('ϵ', 'VERB'), ('\t ', 'SPACE'), ('Follow(B)=', 'NOUN'), ('{', 'PUNCT'), ('  \t', 'SPACE'), ('B', 'PROPN'), ('\t', 'SPACE'), ('\uf0e0', 'PROPN'), ('\t', 'SPACE'), ('b', 'PROPN'), ('\t', 'SPACE'), ('B', 'PROPN'), (' ', 'SPACE'), ('Follow(S)=', 'NOUN'), ('{', 'PUNCT'), ('$', 'SYM'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('NT', 'PROPN'), ('\t', 'SPACE'), ('\t', 'SPACE'), ('Follow', 'PROPN'), (' \t', 'SPACE'), ('S', 'PROPN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('$', 'SYM'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('B', 'PROPN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('b,𝜖', 'NOUN'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('S', 'PROPN')] 

>> Dependency Tags are: 
[('S\uf0e0aBa', 'compound'), ('\t', 'ROOT'), ('B\uf0e0bB', 'punct'), ('|', 'appos'), ('ϵ', 'appos'), ('\t ', 'amod'), ('Follow(B)=', 'appos'), ('{', 'punct'), ('  \t', 'compound'), ('B', 'compound'), ('\t', 'compound'), ('\uf0e0', 'compound'), ('\t', 'nmod'), ('b', 'prep'), ('\t', 'compound'), ('B', 'appos'), (' ', 'compound'), ('Follow(S)=', 'appos'), ('{', 'punct'), ('$', 'dep'), ('}', 'punct'), (' \t', 'appos'), ('NT', 'nmod'), ('\t', 'compound'), ('\t', 'compound'), ('Follow', 'compound'), (' \t', 'compound'), ('S', 'compound'), ('\t', 'appos'), ('{', 'punct'), ('}', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('$', 'nmod'), ('}', 'punct'), ('\t', 'compound'), ('B', 'compound'), ('\t', 'nmod'), ('{', 'punct'), ('b,𝜖', 'nmod'), ('}', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('}', 'punct'), (' \t', 'compound'), ('S', 'appos')]

>> Bigrams: 
[[SaBa, 	], [	, BbB], [BbB, |], [|, ϵ], [ϵ, 	 ], [	 , Follow(B)=], [Follow(B)=, {], [{,   	], [  	, B], [B, 	], [	, ], [, 	], [	, b], [b, 	], [	, B], [B,  ], [ , Follow(S)=], [Follow(S)=, {], [{, $], [$, }], [},  	], [ 	, NT], [NT, 	], [	, 	], [	, Follow], [Follow,  	], [ 	, S], [S, 	], [	, {], [{, }], [}, 	], [	, {], [{, $], [$, }], [}, 	], [	, B], [B, 	], [	, {], [{, b,𝜖], [b,𝜖, }], [}, 	], [	, {], [{, }], [},  	], [ 	, S]]

>> Trigrams: 
[[SaBa, 	, BbB], [	, BbB, |], [BbB, |, ϵ], [|, ϵ, 	 ], [ϵ, 	 , Follow(B)=], [	 , Follow(B)=, {], [Follow(B)=, {,   	], [{,   	, B], [  	, B, 	], [B, 	, ], [	, , 	], [, 	, b], [	, b, 	], [b, 	, B], [	, B,  ], [B,  , Follow(S)=], [ , Follow(S)=, {], [Follow(S)=, {, $], [{, $, }], [$, },  	], [},  	, NT], [ 	, NT, 	], [NT, 	, 	], [	, 	, Follow], [	, Follow,  	], [Follow,  	, S], [ 	, S, 	], [S, 	, {], [	, {, }], [{, }, 	], [}, 	, {], [	, {, $], [{, $, }], [$, }, 	], [}, 	, B], [	, B, 	], [B, 	, {], [	, {, b,𝜖], [{, b,𝜖, }], [b,𝜖, }, 	], [}, 	, {], [	, {, }], [{, },  	], [},  	, S]]

>> Noun Phrases are: 
[|, 	 Follow(B)=, a   	B		b	B,  Follow(S)=, a}  	S]

>> Named Entities are: 
[('Follow(S)=', 'ORG'), ('First', 'ORDINAL')]


============================ Sentence 155 =============================

		a	B	a  	A 			 


>> Tokens are: 
[	, , 	, 	, B, 	,  	, 	, , 		] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('\uf0e0', 'PROPN'), ('\t', 'SPACE'), ('\t', 'SPACE'), ('B', 'PROPN'), ('\t', 'SPACE'), (' \t', 'SPACE'), ('\t', 'SPACE'), ('\uf0e0', 'NOUN'), ('\t\t', 'SPACE')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('\uf0e0', 'compound'), ('\t', 'ROOT'), ('\t', 'compound'), ('B', 'compound'), ('\t', 'appos'), (' \t', 'appos'), ('\t', 'compound'), ('\uf0e0', 'appos'), ('\t\t', 'punct')]

>> Bigrams: 
[[	, ], [, 	], [	, 	], [	, B], [B, 	], [	,  	], [ 	, 	], [	, ], [, 		]]

>> Trigrams: 
[[	, , 	], [, 	, 	], [	, 	, B], [	, B, 	], [B, 	,  	], [	,  	, 	], [ 	, 	, ], [	, , 		]]

>> Noun Phrases are: 
[A 	]

>> Named Entities are: 
[]


============================ Sentence 156 =============================

B  Rule 3 Follow(A)=follow(B) 


>> Tokens are: 
[B,  , Rule, 3, Follow(A)=follow(B, )] 

>> PoS Tags are: 
[('B', 'PROPN'), (' ', 'SPACE'), ('Rule', 'VERB'), ('3', 'NUM'), ('Follow(A)=follow(B', 'PROPN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('B', 'compound'), (' ', 'nsubj'), ('Rule', 'ROOT'), ('3', 'nummod'), ('Follow(A)=follow(B', 'dobj'), (')', 'punct')]

>> Bigrams: 
[[B,  ], [ , Rule], [Rule, 3], [3, Follow(A)=follow(B], [Follow(A)=follow(B, )]]

>> Trigrams: 
[[B,  , Rule], [ , Rule, 3], [Rule, 3, Follow(A)=follow(B], [3, Follow(A)=follow(B, )]]

>> Noun Phrases are: 
[3 Follow(A)=follow(B]

>> Named Entities are: 
[]


============================ Sentence 157 =============================

	A			B	   


>> Tokens are: 
[	, 	, , 		, B, 	  ] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('\t', 'SPACE'), ('\uf0e0', 'NOUN'), ('\t\t', 'SPACE'), ('B', 'PROPN'), ('\t  ', 'SPACE')] 

>> Dependency Tags are: 
[('\t', 'nmod'), ('\t', 'compound'), ('\uf0e0', 'ROOT'), ('\t\t', 'compound'), ('B', 'appos'), ('\t  ', 'appos')]

>> Bigrams: 
[[	, 	], [	, ], [, 		], [		, B], [B, 	  ]]

>> Trigrams: 
[[	, 	, ], [	, , 		], [, 		, B], [		, B, 	  ]]

>> Noun Phrases are: 
[	A	, 		B]

>> Named Entities are: 
[]


============================ Sentence 158 =============================

Rule 2 


>> Tokens are: 
[Rule, 2] 

>> PoS Tags are: 
[('Rule', 'VERB'), ('2', 'NUM')] 

>> Dependency Tags are: 
[('Rule', 'ROOT'), ('2', 'nummod')]

>> Bigrams: 
[[Rule, 2]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 159 =============================

First(   Rule 1: Place $ in FOLLOW(S)    }    Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[(,   , Rule, 1, :, Place, $, FOLLOW(S, ),    , },    , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('(', 'PUNCT'), ('  ', 'SPACE'), ('Rule', 'PROPN'), ('1', 'NUM'), (':', 'PUNCT'), ('Place', 'VERB'), ('$', 'SYM'), ('FOLLOW(S', 'NOUN'), (')', 'PUNCT'), ('   ', 'SPACE'), ('}', 'PUNCT'), ('   ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('(', 'punct'), ('  ', 'dep'), ('Rule', 'appos'), ('1', 'nummod'), (':', 'punct'), ('Place', 'ROOT'), ('$', 'intj'), ('FOLLOW(S', 'pobj'), (')', 'punct'), ('   ', 'quantmod'), ('}', 'punct'), ('   ', 'nummod'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'npadvmod'), ('#', 'punct'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'nsubj'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'parataxis'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'dep'), ('‹#›', 'punct'), ('  ', 'appos'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'appos'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'dep'), ('  ', 'punct'), ('Unit', 'npadvmod'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[(,   ], [  , Rule], [Rule, 1], [1, :], [:, Place], [Place, $], [$, FOLLOW(S], [FOLLOW(S, )], [),    ], [   , }], [},    ], [   , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[(,   , Rule], [  , Rule, 1], [Rule, 1, :], [1, :, Place], [:, Place, $], [Place, $, FOLLOW(S], [$, FOLLOW(S, )], [FOLLOW(S, ),    ], [),    , }], [   , },    ], [},    , Prof.], [   , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[Rule, FOLLOW(S, PS, Unit, Prof. Dixita B Kagathara, #, (CD, Theory, I]

>> Named Entities are: 
[('Jay R Dhamsaniya', 'ORG'), ('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 160 =============================

Example-1: LL(1) parsing   Step 3: Prepare predictive parsing table      SaBa 


>> Tokens are: 
[Example-1, :, LL(1, ), parsing,   , Step, 3, :, Prepare, predictive, parsing, table,      , SaBa] 

>> PoS Tags are: 
[('Example-1', 'PROPN'), (':', 'PUNCT'), ('LL(1', 'PROPN'), (')', 'PUNCT'), ('parsing', 'VERB'), ('  ', 'SPACE'), ('Step', 'PROPN'), ('3', 'NUM'), (':', 'PUNCT'), ('Prepare', 'VERB'), ('predictive', 'ADJ'), ('parsing', 'VERB'), ('table', 'NOUN'), ('     ', 'SPACE'), ('S\uf0e0aBa', 'PROPN')] 

>> Dependency Tags are: 
[('Example-1', 'nmod'), (':', 'punct'), ('LL(1', 'ROOT'), (')', 'punct'), ('parsing', 'acl'), ('  ', 'compound'), ('Step', 'dobj'), ('3', 'nummod'), (':', 'punct'), ('Prepare', 'acl'), ('predictive', 'amod'), ('parsing', 'xcomp'), ('table', 'compound'), ('     ', 'compound'), ('S\uf0e0aBa', 'dobj')]

>> Bigrams: 
[[Example-1, :], [:, LL(1], [LL(1, )], [), parsing], [parsing,   ], [  , Step], [Step, 3], [3, :], [:, Prepare], [Prepare, predictive], [predictive, parsing], [parsing, table], [table,      ], [     , SaBa]]

>> Trigrams: 
[[Example-1, :, LL(1], [:, LL(1, )], [LL(1, ), parsing], [), parsing,   ], [parsing,   , Step], [  , Step, 3], [Step, 3, :], [3, :, Prepare], [:, Prepare, predictive], [Prepare, predictive, parsing], [predictive, parsing, table], [parsing, table,      ], [table,      , SaBa]]

>> Noun Phrases are: 
[Example-1: LL(1,   Step, table      SaBa]

>> Named Entities are: 
[('3', 'CARDINAL')]


============================ Sentence 161 =============================

a= 


>> Tokens are: 
[=] 

>> PoS Tags are: 
[('=', 'SYM')] 

>> Dependency Tags are: 
[('=', 'punct')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 162 =============================

FIRST(aBa)={ a } M[S,a]=SaBa   


>> Tokens are: 
[FIRST(aBa)=, {, }, M[S, ,, a]=SaBa,  ] 

>> PoS Tags are: 
[('FIRST(aBa)=', 'PROPN'), ('{', 'PUNCT'), ('}', 'PUNCT'), ('M[S', 'NOUN'), (',', 'PUNCT'), ('a]=S\uf0e0aBa', 'ADV'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('FIRST(aBa)=', 'ROOT'), ('{', 'punct'), ('}', 'punct'), ('M[S', 'appos'), (',', 'punct'), ('a]=S\uf0e0aBa', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[FIRST(aBa)=, {], [{, }], [}, M[S], [M[S, ,], [,, a]=SaBa], [a]=SaBa,  ]]

>> Trigrams: 
[[FIRST(aBa)=, {, }], [{, }, M[S], [}, M[S, ,], [M[S, ,, a]=SaBa], [,, a]=SaBa,  ]]

>> Noun Phrases are: 
[FIRST(aBa)=, a } M[S]

>> Named Entities are: 
[('FIRST(aBa)=', 'DATE')]


============================ Sentence 163 =============================

SaBa 	BbB | ϵ 	 	NT	First 	Follow  	S	{a}	{$} 	B	{b,𝜖}	{a}  	NT	Input Symbol		 		 


>> Tokens are: 
[SaBa, 	, BbB, |, ϵ, 	 	, NT, 	, 	, Follow,  	, S, 	, {, }, 	, {, $, }, 	, B, 	, {, b,𝜖, }, 	, {, },  	, NT, 	, Input, Symbol, 		 		] 

>> PoS Tags are: 
[('S\uf0e0aBa', 'PROPN'), ('\t', 'SPACE'), ('B\uf0e0bB', 'PUNCT'), ('|', 'NOUN'), ('ϵ', 'NUM'), ('\t \t', 'SPACE'), ('NT', 'PROPN'), ('\t', 'SPACE'), ('\t', 'SPACE'), ('Follow', 'PROPN'), (' \t', 'SPACE'), ('S', 'PROPN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('$', 'SYM'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('B', 'PROPN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('b,𝜖', 'NOUN'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('NT', 'PROPN'), ('\t', 'SPACE'), ('Input', 'PROPN'), ('Symbol', 'PROPN'), ('\t\t \t\t', 'SPACE')] 

>> Dependency Tags are: 
[('S\uf0e0aBa', 'compound'), ('\t', 'ROOT'), ('B\uf0e0bB', 'punct'), ('|', 'npadvmod'), ('ϵ', 'punct'), ('\t \t', 'compound'), ('NT', 'compound'), ('\t', 'compound'), ('\t', 'compound'), ('Follow', 'compound'), (' \t', 'compound'), ('S', 'compound'), ('\t', 'appos'), ('{', 'punct'), ('}', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('$', 'nmod'), ('}', 'punct'), ('\t', 'compound'), ('B', 'compound'), ('\t', 'nmod'), ('{', 'punct'), ('b,𝜖', 'nmod'), ('}', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('}', 'punct'), (' \t', 'nummod'), ('NT', 'compound'), ('\t', 'compound'), ('Input', 'compound'), ('Symbol', 'compound'), ('\t\t \t\t', 'appos')]

>> Bigrams: 
[[SaBa, 	], [	, BbB], [BbB, |], [|, ϵ], [ϵ, 	 	], [	 	, NT], [NT, 	], [	, 	], [	, Follow], [Follow,  	], [ 	, S], [S, 	], [	, {], [{, }], [}, 	], [	, {], [{, $], [$, }], [}, 	], [	, B], [B, 	], [	, {], [{, b,𝜖], [b,𝜖, }], [}, 	], [	, {], [{, }], [},  	], [ 	, NT], [NT, 	], [	, Input], [Input, Symbol], [Symbol, 		 		]]

>> Trigrams: 
[[SaBa, 	, BbB], [	, BbB, |], [BbB, |, ϵ], [|, ϵ, 	 	], [ϵ, 	 	, NT], [	 	, NT, 	], [NT, 	, 	], [	, 	, Follow], [	, Follow,  	], [Follow,  	, S], [ 	, S, 	], [S, 	, {], [	, {, }], [{, }, 	], [}, 	, {], [	, {, $], [{, $, }], [$, }, 	], [}, 	, B], [	, B, 	], [B, 	, {], [	, {, b,𝜖], [{, b,𝜖, }], [b,𝜖, }, 	], [}, 	, {], [	, {, }], [{, },  	], [},  	, NT], [ 	, NT, 	], [NT, 	, Input], [	, Input, Symbol], [Input, Symbol, 		 		]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('First', 'ORDINAL'), ('Input Symbol', 'PERSON')]


============================ Sentence 164 =============================

a	b	$ 	S	SaBa		 	B			  Rule: 2 A  a = first() M[A,a] = A      Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[	, b, 	, $, 	, S, 	, SaBa, 		 	, B, 			  , Rule, :, 2, A,  , =, (, ), M[A, ,, ], =, A,      , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('b', 'X'), ('\t', 'SPACE'), ('$', 'SYM'), ('\t', 'SPACE'), ('S', 'PROPN'), ('\t', 'SPACE'), ('S\uf0e0aBa', 'PROPN'), ('\t\t \t', 'SPACE'), ('B', 'PROPN'), ('\t\t\t  ', 'SPACE'), ('Rule', 'NOUN'), (':', 'PUNCT'), ('2', 'NUM'), ('A\uf0e0', 'NOUN'), (' ', 'SPACE'), ('=', 'PUNCT'), ('(', 'PUNCT'), (')', 'PUNCT'), ('M[A', 'INTJ'), (',', 'PUNCT'), (']', 'PUNCT'), ('=', 'PUNCT'), ('A\uf0e0', 'ADJ'), ('     ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('\t', 'dep'), ('b', 'prep'), ('\t', 'appos'), ('$', 'quantmod'), ('\t', 'compound'), ('S', 'compound'), ('\t', 'compound'), ('S\uf0e0aBa', 'compound'), ('\t\t \t', 'compound'), ('B', 'appos'), ('\t\t\t  ', 'compound'), ('Rule', 'appos'), (':', 'punct'), ('2', 'nummod'), ('A\uf0e0', 'appos'), (' ', 'prep'), ('=', 'punct'), ('(', 'punct'), (')', 'punct'), ('M[A', 'parataxis'), (',', 'punct'), (']', 'dep'), ('=', 'punct'), ('A\uf0e0', 'amod'), ('     ', 'compound'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'npadvmod'), ('#', 'nmod'), ('3130006', 'appos'), ('(', 'punct'), ('PS', 'nsubj'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'parataxis'), ('  ', 'nummod'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[	, b], [b, 	], [	, $], [$, 	], [	, S], [S, 	], [	, SaBa], [SaBa, 		 	], [		 	, B], [B, 			  ], [			  , Rule], [Rule, :], [:, 2], [2, A], [A,  ], [ , =], [=, (], [(, )], [), M[A], [M[A, ,], [,, ]], [], =], [=, A], [A,      ], [     , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[	, b, 	], [b, 	, $], [	, $, 	], [$, 	, S], [	, S, 	], [S, 	, SaBa], [	, SaBa, 		 	], [SaBa, 		 	, B], [		 	, B, 			  ], [B, 			  , Rule], [			  , Rule, :], [Rule, :, 2], [:, 2, A], [2, A,  ], [A,  , =], [ , =, (], [=, (, )], [(, ), M[A], [), M[A, ,], [M[A, ,, ]], [,, ], =], [], =, A], [=, A,      ], [A,      , Prof.], [     , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[$ 	S	SaBa		 	B, 			  Rule, 2 A, PS, Unit,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('2', 'CARDINAL'), ('first', 'ORDINAL'), ('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 165 =============================

Example-1: LL(1) parsing   Step 3: Prepare predictive parsing table      BbB a=FIRST(bB)={ b } M[B,b]=BbB   


>> Tokens are: 
[Example-1, :, LL(1, ), parsing,   , Step, 3, :, Prepare, predictive, parsing, table,      , BbB, =, FIRST(bB)=, {, b, }, M[B, ,, b]=BbB,  ] 

>> PoS Tags are: 
[('Example-1', 'PROPN'), (':', 'PUNCT'), ('LL(1', 'PROPN'), (')', 'PUNCT'), ('parsing', 'VERB'), ('  ', 'SPACE'), ('Step', 'PROPN'), ('3', 'NUM'), (':', 'PUNCT'), ('Prepare', 'VERB'), ('predictive', 'ADJ'), ('parsing', 'VERB'), ('table', 'NOUN'), ('     ', 'SPACE'), ('B\uf0e0bB', 'PUNCT'), ('=', 'PUNCT'), ('FIRST(bB)=', 'PROPN'), ('{', 'PUNCT'), ('b', 'X'), ('}', 'PUNCT'), ('M[B', 'NOUN'), (',', 'PUNCT'), ('b]=B\uf0e0bB', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Example-1', 'nmod'), (':', 'punct'), ('LL(1', 'ROOT'), (')', 'punct'), ('parsing', 'acl'), ('  ', 'compound'), ('Step', 'dobj'), ('3', 'nummod'), (':', 'punct'), ('Prepare', 'acl'), ('predictive', 'amod'), ('parsing', 'amod'), ('table', 'compound'), ('     ', 'dobj'), ('B\uf0e0bB', 'punct'), ('=', 'punct'), ('FIRST(bB)=', 'nmod'), ('{', 'punct'), ('b', 'nmod'), ('}', 'punct'), ('M[B', 'appos'), (',', 'punct'), ('b]=B\uf0e0bB', 'conj'), (' ', 'punct')]

>> Bigrams: 
[[Example-1, :], [:, LL(1], [LL(1, )], [), parsing], [parsing,   ], [  , Step], [Step, 3], [3, :], [:, Prepare], [Prepare, predictive], [predictive, parsing], [parsing, table], [table,      ], [     , BbB], [BbB, =], [=, FIRST(bB)=], [FIRST(bB)=, {], [{, b], [b, }], [}, M[B], [M[B, ,], [,, b]=BbB], [b]=BbB,  ]]

>> Trigrams: 
[[Example-1, :, LL(1], [:, LL(1, )], [LL(1, ), parsing], [), parsing,   ], [parsing,   , Step], [  , Step, 3], [Step, 3, :], [3, :, Prepare], [:, Prepare, predictive], [Prepare, predictive, parsing], [predictive, parsing, table], [parsing, table,      ], [table,      , BbB], [     , BbB, =], [BbB, =, FIRST(bB)=], [=, FIRST(bB)=, {], [FIRST(bB)=, {, b], [{, b, }], [b, }, M[B], [}, M[B, ,], [M[B, ,, b]=BbB], [,, b]=BbB,  ]]

>> Noun Phrases are: 
[Example-1: LL(1,   Step, a=FIRST(bB)={ b } M[B, b]=BbB]

>> Named Entities are: 
[('3', 'CARDINAL')]


============================ Sentence 166 =============================

SaBa 	BbB | ϵ 	 	NT	First 	Follow  	S	{a}	{$} 	B	{b,𝜖}	{a}  	NT	Input Symbol		 		 


>> Tokens are: 
[SaBa, 	, BbB, |, ϵ, 	 	, NT, 	, 	, Follow,  	, S, 	, {, }, 	, {, $, }, 	, B, 	, {, b,𝜖, }, 	, {, },  	, NT, 	, Input, Symbol, 		 		] 

>> PoS Tags are: 
[('S\uf0e0aBa', 'PROPN'), ('\t', 'SPACE'), ('B\uf0e0bB', 'PUNCT'), ('|', 'NOUN'), ('ϵ', 'NUM'), ('\t \t', 'SPACE'), ('NT', 'PROPN'), ('\t', 'SPACE'), ('\t', 'SPACE'), ('Follow', 'PROPN'), (' \t', 'SPACE'), ('S', 'PROPN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('$', 'SYM'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('B', 'PROPN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('b,𝜖', 'NOUN'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('NT', 'PROPN'), ('\t', 'SPACE'), ('Input', 'PROPN'), ('Symbol', 'PROPN'), ('\t\t \t\t', 'SPACE')] 

>> Dependency Tags are: 
[('S\uf0e0aBa', 'compound'), ('\t', 'ROOT'), ('B\uf0e0bB', 'punct'), ('|', 'npadvmod'), ('ϵ', 'punct'), ('\t \t', 'compound'), ('NT', 'compound'), ('\t', 'compound'), ('\t', 'compound'), ('Follow', 'compound'), (' \t', 'compound'), ('S', 'compound'), ('\t', 'appos'), ('{', 'punct'), ('}', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('$', 'nmod'), ('}', 'punct'), ('\t', 'compound'), ('B', 'compound'), ('\t', 'nmod'), ('{', 'punct'), ('b,𝜖', 'nmod'), ('}', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('}', 'punct'), (' \t', 'nummod'), ('NT', 'compound'), ('\t', 'compound'), ('Input', 'compound'), ('Symbol', 'compound'), ('\t\t \t\t', 'appos')]

>> Bigrams: 
[[SaBa, 	], [	, BbB], [BbB, |], [|, ϵ], [ϵ, 	 	], [	 	, NT], [NT, 	], [	, 	], [	, Follow], [Follow,  	], [ 	, S], [S, 	], [	, {], [{, }], [}, 	], [	, {], [{, $], [$, }], [}, 	], [	, B], [B, 	], [	, {], [{, b,𝜖], [b,𝜖, }], [}, 	], [	, {], [{, }], [},  	], [ 	, NT], [NT, 	], [	, Input], [Input, Symbol], [Symbol, 		 		]]

>> Trigrams: 
[[SaBa, 	, BbB], [	, BbB, |], [BbB, |, ϵ], [|, ϵ, 	 	], [ϵ, 	 	, NT], [	 	, NT, 	], [NT, 	, 	], [	, 	, Follow], [	, Follow,  	], [Follow,  	, S], [ 	, S, 	], [S, 	, {], [	, {, }], [{, }, 	], [}, 	, {], [	, {, $], [{, $, }], [$, }, 	], [}, 	, B], [	, B, 	], [B, 	, {], [	, {, b,𝜖], [{, b,𝜖, }], [b,𝜖, }, 	], [}, 	, {], [	, {, }], [{, },  	], [},  	, NT], [ 	, NT, 	], [NT, 	, Input], [	, Input, Symbol], [Input, Symbol, 		 		]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('First', 'ORDINAL'), ('Input Symbol', 'PERSON')]


============================ Sentence 167 =============================

a	b	$ 	S	SaBa		 	B		BbB	   


>> Tokens are: 
[	, b, 	, $, 	, S, 	, SaBa, 		 	, B, 		, BbB, 	  ] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('b', 'X'), ('\t', 'SPACE'), ('$', 'SYM'), ('\t', 'SPACE'), ('S', 'PROPN'), ('\t', 'SPACE'), ('S\uf0e0aBa', 'PROPN'), ('\t\t \t', 'SPACE'), ('B', 'PROPN'), ('\t\t', 'SPACE'), ('B\uf0e0bB', 'PUNCT'), ('\t  ', 'SPACE')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('b', 'prep'), ('\t', 'appos'), ('$', 'nmod'), ('\t', 'compound'), ('S', 'compound'), ('\t', 'compound'), ('S\uf0e0aBa', 'compound'), ('\t\t \t', 'compound'), ('B', 'appos'), ('\t\t', 'prep'), ('B\uf0e0bB', 'punct'), ('\t  ', 'punct')]

>> Bigrams: 
[[	, b], [b, 	], [	, $], [$, 	], [	, S], [S, 	], [	, SaBa], [SaBa, 		 	], [		 	, B], [B, 		], [		, BbB], [BbB, 	  ]]

>> Trigrams: 
[[	, b, 	], [b, 	, $], [	, $, 	], [$, 	, S], [	, S, 	], [S, 	, SaBa], [	, SaBa, 		 	], [SaBa, 		 	, B], [		 	, B, 		], [B, 		, BbB], [		, BbB, 	  ]]

>> Noun Phrases are: 
[$ 	S	SaBa		 	B]

>> Named Entities are: 
[]


============================ Sentence 168 =============================

Rule: 2 A  a = first() M[A,a] = A      Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[Rule, :, 2, A,  , =, (, ), M[A, ,, ], =, A,      , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('Rule', 'NOUN'), (':', 'PUNCT'), ('2', 'NUM'), ('A\uf0e0', 'NOUN'), (' ', 'SPACE'), ('=', 'PUNCT'), ('(', 'PUNCT'), (')', 'PUNCT'), ('M[A', 'INTJ'), (',', 'PUNCT'), (']', 'PUNCT'), ('=', 'PUNCT'), ('A\uf0e0', 'ADJ'), ('     ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Rule', 'dep'), (':', 'punct'), ('2', 'nummod'), ('A\uf0e0', 'appos'), (' ', 'prep'), ('=', 'punct'), ('(', 'punct'), (')', 'punct'), ('M[A', 'prep'), (',', 'punct'), (']', 'dep'), ('=', 'punct'), ('A\uf0e0', 'amod'), ('     ', 'compound'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'npadvmod'), ('#', 'nmod'), ('3130006', 'appos'), ('(', 'punct'), ('PS', 'nsubj'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'parataxis'), ('  ', 'nsubj'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'appos'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'appos'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[Rule, :], [:, 2], [2, A], [A,  ], [ , =], [=, (], [(, )], [), M[A], [M[A, ,], [,, ]], [], =], [=, A], [A,      ], [     , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[Rule, :, 2], [:, 2, A], [2, A,  ], [A,  , =], [ , =, (], [=, (, )], [(, ), M[A], [), M[A, ,], [M[A, ,, ]], [,, ], =], [], =, A], [=, A,      ], [A,      , Prof.], [     , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[2 A, PS, Unit, – Basic Probability,   Prof. Dixita B Kagathara, #, (CD, Unit, Theory, I]

>> Named Entities are: 
[('2', 'CARDINAL'), ('first', 'ORDINAL'), ('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 169 =============================

Example-1: LL(1) parsing   Step 3: Prepare predictive parsing table       


>> Tokens are: 
[Example-1, :, LL(1, ), parsing,   , Step, 3, :, Prepare, predictive, parsing, table,      ] 

>> PoS Tags are: 
[('Example-1', 'PROPN'), (':', 'PUNCT'), ('LL(1', 'PROPN'), (')', 'PUNCT'), ('parsing', 'VERB'), ('  ', 'SPACE'), ('Step', 'PROPN'), ('3', 'NUM'), (':', 'PUNCT'), ('Prepare', 'VERB'), ('predictive', 'ADJ'), ('parsing', 'VERB'), ('table', 'NOUN'), ('     ', 'SPACE')] 

>> Dependency Tags are: 
[('Example-1', 'nmod'), (':', 'punct'), ('LL(1', 'ROOT'), (')', 'punct'), ('parsing', 'acl'), ('  ', 'compound'), ('Step', 'dobj'), ('3', 'nummod'), (':', 'punct'), ('Prepare', 'acl'), ('predictive', 'amod'), ('parsing', 'advcl'), ('table', 'compound'), ('     ', 'dobj')]

>> Bigrams: 
[[Example-1, :], [:, LL(1], [LL(1, )], [), parsing], [parsing,   ], [  , Step], [Step, 3], [3, :], [:, Prepare], [Prepare, predictive], [predictive, parsing], [parsing, table], [table,      ]]

>> Trigrams: 
[[Example-1, :, LL(1], [:, LL(1, )], [LL(1, ), parsing], [), parsing,   ], [parsing,   , Step], [  , Step, 3], [Step, 3, :], [3, :, Prepare], [:, Prepare, predictive], [Prepare, predictive, parsing], [predictive, parsing, table], [parsing, table,      ]]

>> Noun Phrases are: 
[Example-1: LL(1,   Step]

>> Named Entities are: 
[('3', 'CARDINAL')]


============================ Sentence 170 =============================

Bϵ b=FOLLOW(B)={ a } M[B,a]=B𝜖    


>> Tokens are: 
[Bϵ, b, =, FOLLOW(B)=, {, }, M[B, ,, a]=B𝜖,   ] 

>> PoS Tags are: 
[('B\uf0e0ϵ', 'PROPN'), ('b', 'X'), ('=', 'SYM'), ('FOLLOW(B)=', 'PROPN'), ('{', 'PUNCT'), ('}', 'PUNCT'), ('M[B', 'NOUN'), (',', 'PUNCT'), ('a]=B\uf0e0𝜖', 'NOUN'), ('  ', 'SPACE')] 

>> Dependency Tags are: 
[('B\uf0e0ϵ', 'nmod'), ('b', 'meta'), ('=', 'punct'), ('FOLLOW(B)=', 'ROOT'), ('{', 'punct'), ('}', 'punct'), ('M[B', 'appos'), (',', 'punct'), ('a]=B\uf0e0𝜖', 'compound'), ('  ', 'appos')]

>> Bigrams: 
[[Bϵ, b], [b, =], [=, FOLLOW(B)=], [FOLLOW(B)=, {], [{, }], [}, M[B], [M[B, ,], [,, a]=B𝜖], [a]=B𝜖,   ]]

>> Trigrams: 
[[Bϵ, b, =], [b, =, FOLLOW(B)=], [=, FOLLOW(B)=, {], [FOLLOW(B)=, {, }], [{, }, M[B], [}, M[B, ,], [M[B, ,, a]=B𝜖], [,, a]=B𝜖,   ]]

>> Noun Phrases are: 
[Bϵ b=FOLLOW(B)=, a } M[B]

>> Named Entities are: 
[]


============================ Sentence 171 =============================

SaBa 	BbB | ϵ 	 	NT	First 	Follow  	S	{a}	{$} 	B	{b,𝜖}	{a}  	NT	Input Symbol		 		 


>> Tokens are: 
[SaBa, 	, BbB, |, ϵ, 	 	, NT, 	, 	, Follow,  	, S, 	, {, }, 	, {, $, }, 	, B, 	, {, b,𝜖, }, 	, {, },  	, NT, 	, Input, Symbol, 		 		] 

>> PoS Tags are: 
[('S\uf0e0aBa', 'PROPN'), ('\t', 'SPACE'), ('B\uf0e0bB', 'PUNCT'), ('|', 'NOUN'), ('ϵ', 'NUM'), ('\t \t', 'SPACE'), ('NT', 'PROPN'), ('\t', 'SPACE'), ('\t', 'SPACE'), ('Follow', 'PROPN'), (' \t', 'SPACE'), ('S', 'PROPN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('$', 'SYM'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('B', 'PROPN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('b,𝜖', 'NOUN'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('NT', 'PROPN'), ('\t', 'SPACE'), ('Input', 'PROPN'), ('Symbol', 'PROPN'), ('\t\t \t\t', 'SPACE')] 

>> Dependency Tags are: 
[('S\uf0e0aBa', 'compound'), ('\t', 'ROOT'), ('B\uf0e0bB', 'punct'), ('|', 'npadvmod'), ('ϵ', 'punct'), ('\t \t', 'compound'), ('NT', 'compound'), ('\t', 'compound'), ('\t', 'compound'), ('Follow', 'compound'), (' \t', 'compound'), ('S', 'compound'), ('\t', 'appos'), ('{', 'punct'), ('}', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('$', 'nmod'), ('}', 'punct'), ('\t', 'compound'), ('B', 'compound'), ('\t', 'nmod'), ('{', 'punct'), ('b,𝜖', 'nmod'), ('}', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('}', 'punct'), (' \t', 'nummod'), ('NT', 'compound'), ('\t', 'compound'), ('Input', 'compound'), ('Symbol', 'compound'), ('\t\t \t\t', 'appos')]

>> Bigrams: 
[[SaBa, 	], [	, BbB], [BbB, |], [|, ϵ], [ϵ, 	 	], [	 	, NT], [NT, 	], [	, 	], [	, Follow], [Follow,  	], [ 	, S], [S, 	], [	, {], [{, }], [}, 	], [	, {], [{, $], [$, }], [}, 	], [	, B], [B, 	], [	, {], [{, b,𝜖], [b,𝜖, }], [}, 	], [	, {], [{, }], [},  	], [ 	, NT], [NT, 	], [	, Input], [Input, Symbol], [Symbol, 		 		]]

>> Trigrams: 
[[SaBa, 	, BbB], [	, BbB, |], [BbB, |, ϵ], [|, ϵ, 	 	], [ϵ, 	 	, NT], [	 	, NT, 	], [NT, 	, 	], [	, 	, Follow], [	, Follow,  	], [Follow,  	, S], [ 	, S, 	], [S, 	, {], [	, {, }], [{, }, 	], [}, 	, {], [	, {, $], [{, $, }], [$, }, 	], [}, 	, B], [	, B, 	], [B, 	, {], [	, {, b,𝜖], [{, b,𝜖, }], [b,𝜖, }, 	], [}, 	, {], [	, {, }], [{, },  	], [},  	, NT], [ 	, NT, 	], [NT, 	, Input], [	, Input, Symbol], [Input, Symbol, 		 		]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('First', 'ORDINAL'), ('Input Symbol', 'PERSON')]


============================ Sentence 172 =============================

a	b	$ 	S	SaBa	Error	Error 	B	Bϵ	BbB	Error    


>> Tokens are: 
[	, b, 	, $, 	, S, 	, SaBa, 	, Error, 	, Error, 	, B, 	, Bϵ, 	, BbB, 	, Error,   ] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('b', 'X'), ('\t', 'SPACE'), ('$', 'SYM'), ('\t', 'SPACE'), ('S', 'PROPN'), ('\t', 'SPACE'), ('S\uf0e0aBa', 'PROPN'), ('\t', 'SPACE'), ('Error', 'PROPN'), ('\t', 'SPACE'), ('Error', 'PROPN'), ('\t', 'SPACE'), ('B', 'PROPN'), ('\t', 'SPACE'), ('B\uf0e0ϵ', 'PROPN'), ('\t', 'SPACE'), ('B\uf0e0bB', 'PUNCT'), ('\t', 'SPACE'), ('Error', 'PROPN'), ('  ', 'SPACE')] 

>> Dependency Tags are: 
[('\t', 'nmod'), ('b', 'prep'), ('\t', 'ROOT'), ('$', 'quantmod'), ('\t', 'compound'), ('S', 'nmod'), ('\t', 'nmod'), ('S\uf0e0aBa', 'compound'), ('\t', 'compound'), ('Error', 'compound'), ('\t', 'compound'), ('Error', 'compound'), ('\t', 'compound'), ('B', 'compound'), ('\t', 'compound'), ('B\uf0e0ϵ', 'compound'), ('\t', 'appos'), ('B\uf0e0bB', 'punct'), ('\t', 'compound'), ('Error', 'appos'), ('  ', 'appos')]

>> Bigrams: 
[[	, b], [b, 	], [	, $], [$, 	], [	, S], [S, 	], [	, SaBa], [SaBa, 	], [	, Error], [Error, 	], [	, Error], [Error, 	], [	, B], [B, 	], [	, Bϵ], [Bϵ, 	], [	, BbB], [BbB, 	], [	, Error], [Error,   ]]

>> Trigrams: 
[[	, b, 	], [b, 	, $], [	, $, 	], [$, 	, S], [	, S, 	], [S, 	, SaBa], [	, SaBa, 	], [SaBa, 	, Error], [	, Error, 	], [Error, 	, Error], [	, Error, 	], [Error, 	, B], [	, B, 	], [B, 	, Bϵ], [	, Bϵ, 	], [Bϵ, 	, BbB], [	, BbB, 	], [BbB, 	, Error], [	, Error,   ]]

>> Noun Phrases are: 
[	Error]

>> Named Entities are: 
[]


============================ Sentence 173 =============================

Rule: 3 A  b = follow(A) M[A,b] = A        Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[Rule, :, 3, A,  , b, =, follow(A, ), M[A, ,, b, ], =, A,        , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('Rule', 'NOUN'), (':', 'PUNCT'), ('3', 'NUM'), ('A\uf0e0', 'NOUN'), (' ', 'SPACE'), ('b', 'X'), ('=', 'SYM'), ('follow(A', 'NUM'), (')', 'PUNCT'), ('M[A', 'NOUN'), (',', 'PUNCT'), ('b', 'X'), (']', 'PUNCT'), ('=', 'PUNCT'), ('A\uf0e0', 'ADJ'), ('       ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Rule', 'npadvmod'), (':', 'punct'), ('3', 'nummod'), ('A\uf0e0', 'appos'), (' ', 'appos'), ('b', 'prep'), ('=', 'appos'), ('follow(A', 'prep'), (')', 'punct'), ('M[A', 'appos'), (',', 'punct'), ('b', 'prep'), (']', 'punct'), ('=', 'punct'), ('A\uf0e0', 'prep'), ('       ', 'compound'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'npadvmod'), ('#', 'nmod'), ('3130006', 'appos'), ('(', 'punct'), ('PS', 'nsubj'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'dobj'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[Rule, :], [:, 3], [3, A], [A,  ], [ , b], [b, =], [=, follow(A], [follow(A, )], [), M[A], [M[A, ,], [,, b], [b, ]], [], =], [=, A], [A,        ], [       , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[Rule, :, 3], [:, 3, A], [3, A,  ], [A,  , b], [ , b, =], [b, =, follow(A], [=, follow(A, )], [follow(A, ), M[A], [), M[A, ,], [M[A, ,, b], [,, b, ]], [b, ], =], [], =, A], [=, A,        ], [A,        , Prof.], [       , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[3 A, M[A, PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('3', 'CARDINAL'), ('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 174 =============================

Example-2: LL(1) parsing    Step 1: Not required   


>> Tokens are: 
[Example-2, :, LL(1, ), parsing,    , Step, 1, :, required,  ] 

>> PoS Tags are: 
[('Example-2', 'PROPN'), (':', 'PUNCT'), ('LL(1', 'PROPN'), (')', 'PUNCT'), ('parsing', 'VERB'), ('   ', 'SPACE'), ('Step', 'NOUN'), ('1', 'NUM'), (':', 'PUNCT'), ('required', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Example-2', 'ROOT'), (':', 'punct'), ('LL(1', 'appos'), (')', 'punct'), ('parsing', 'acl'), ('   ', 'nummod'), ('Step', 'dobj'), ('1', 'nummod'), (':', 'punct'), ('required', 'acl'), (' ', 'punct')]

>> Bigrams: 
[[Example-2, :], [:, LL(1], [LL(1, )], [), parsing], [parsing,    ], [   , Step], [Step, 1], [1, :], [:, required], [required,  ]]

>> Trigrams: 
[[Example-2, :, LL(1], [:, LL(1, )], [LL(1, ), parsing], [), parsing,    ], [parsing,    , Step], [   , Step, 1], [Step, 1, :], [1, :, required], [:, required,  ]]

>> Noun Phrases are: 
[Example-2, : LL(1,    Step]

>> Named Entities are: 
[('1', 'CARDINAL')]


============================ Sentence 175 =============================

Step 2: Compute FIRST First(S) 


>> Tokens are: 
[Step, 2, :, Compute, First(S, )] 

>> PoS Tags are: 
[('Step', 'NOUN'), ('2', 'NUM'), (':', 'PUNCT'), ('Compute', 'PROPN'), ('First(S', 'PROPN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('Step', 'ROOT'), ('2', 'nummod'), (':', 'punct'), ('Compute', 'compound'), ('First(S', 'appos'), (')', 'punct')]

>> Bigrams: 
[[Step, 2], [2, :], [:, Compute], [Compute, First(S], [First(S, )]]

>> Trigrams: 
[[Step, 2, :], [2, :, Compute], [:, Compute, First(S], [Compute, First(S, )]]

>> Noun Phrases are: 
[Step, Compute FIRST First(S]

>> Named Entities are: 
[('2', 'CARDINAL')]


============================ Sentence 176 =============================

SaB 


>> Tokens are: 
[SaB] 

>> PoS Tags are: 
[('S\uf0e0aB', 'X')] 

>> Dependency Tags are: 
[('S\uf0e0aB', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 177 =============================

					S𝜖   SaB | ϵ 


>> Tokens are: 
[					, S𝜖,   , SaB, |, ϵ] 

>> PoS Tags are: 
[('\t\t\t\t\t', 'SPACE'), ('S\uf0e0𝜖', 'NOUN'), ('  ', 'SPACE'), ('S\uf0e0aB', 'X'), ('|', 'ADV'), ('ϵ', 'NOUN')] 

>> Dependency Tags are: 
[('\t\t\t\t\t', 'amod'), ('S\uf0e0𝜖', 'ROOT'), ('  ', 'appos'), ('S\uf0e0aB', 'punct'), ('|', 'advmod'), ('ϵ', 'punct')]

>> Bigrams: 
[[					, S𝜖], [S𝜖,   ], [  , SaB], [SaB, |], [|, ϵ]]

>> Trigrams: 
[[					, S𝜖,   ], [S𝜖,   , SaB], [  , SaB, |], [SaB, |, ϵ]]

>> Noun Phrases are: 
[					S𝜖]

>> Named Entities are: 
[]


============================ Sentence 178 =============================

	BbC | ϵ CcS | ϵ 	 	S		𝜖  	A		   


>> Tokens are: 
[	, BbC, |, ϵ, CcS, |, ϵ, 	 	, S, 	, , 	, 𝜖,  	, 	, , 	  ] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('B\uf0e0bC', 'PUNCT'), ('|', 'NOUN'), ('ϵ', 'NOUN'), ('C\uf0e0cS', 'NUM'), ('|', 'NOUN'), ('ϵ', 'NUM'), ('\t \t', 'SPACE'), ('S', 'PROPN'), ('\t', 'SPACE'), ('\uf0e0', 'PROPN'), ('\t', 'SPACE'), ('𝜖', 'PROPN'), (' \t', 'SPACE'), ('\t', 'SPACE'), ('\uf0e0', 'NOUN'), ('\t  ', 'SPACE')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('B\uf0e0bC', 'punct'), ('|', 'nmod'), ('ϵ', 'npadvmod'), ('C\uf0e0cS', 'appos'), ('|', 'appos'), ('ϵ', 'punct'), ('\t \t', 'compound'), ('S', 'compound'), ('\t', 'compound'), ('\uf0e0', 'compound'), ('\t', 'appos'), ('𝜖', 'prep'), (' \t', 'compound'), ('\t', 'compound'), ('\uf0e0', 'appos'), ('\t  ', 'punct')]

>> Bigrams: 
[[	, BbC], [BbC, |], [|, ϵ], [ϵ, CcS], [CcS, |], [|, ϵ], [ϵ, 	 	], [	 	, S], [S, 	], [	, ], [, 	], [	, 𝜖], [𝜖,  	], [ 	, 	], [	, ], [, 	  ]]

>> Trigrams: 
[[	, BbC, |], [BbC, |, ϵ], [|, ϵ, CcS], [ϵ, CcS, |], [CcS, |, ϵ], [|, ϵ, 	 	], [ϵ, 	 	, S], [	 	, S, 	], [S, 	, ], [	, , 	], [, 	, 𝜖], [	, 𝜖,  	], [𝜖,  	, 	], [ 	, 	, ], [	, , 	  ]]

>> Noun Phrases are: 
[| ϵ CcS |,  	A	]

>> Named Entities are: 
[]


============================ Sentence 179 =============================

Rule 2 add  to  FIRST(S)={ a   , 𝜖 } 	NT	First  	S	{ a, 𝜖 }  	B	{b,𝜖}   	S 


>> Tokens are: 
[Rule, 2, add,  ,  , FIRST(S)=, {,   , ,, 𝜖, }, 	, NT, 	,  	, S, 	, {, ,, 𝜖, },  	, B, 	, {, b,𝜖, },   	, S] 

>> PoS Tags are: 
[('Rule', 'NOUN'), ('2', 'NUM'), ('add', 'VERB'), (' ', 'SPACE'), (' ', 'SPACE'), ('FIRST(S)=', 'X'), ('{', 'PUNCT'), ('  ', 'SPACE'), (',', 'PUNCT'), ('𝜖', 'X'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('NT', 'PROPN'), ('\t', 'SPACE'), (' \t', 'SPACE'), ('S', 'PROPN'), ('\t', 'SPACE'), ('{', 'PUNCT'), (',', 'PUNCT'), ('𝜖', 'NOUN'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('B', 'PROPN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('b,𝜖', 'NOUN'), ('}', 'PUNCT'), ('  \t', 'SPACE'), ('S', 'PROPN')] 

>> Dependency Tags are: 
[('Rule', 'nsubj'), ('2', 'nummod'), ('add', 'ROOT'), (' ', 'dobj'), (' ', 'pobj'), ('FIRST(S)=', 'intj'), ('{', 'punct'), ('  ', 'npadvmod'), (',', 'punct'), ('𝜖', 'prep'), ('}', 'punct'), ('\t', 'compound'), ('NT', 'compound'), ('\t', 'compound'), (' \t', 'compound'), ('S', 'compound'), ('\t', 'dobj'), ('{', 'punct'), (',', 'punct'), ('𝜖', 'nmod'), ('}', 'punct'), (' \t', 'compound'), ('B', 'compound'), ('\t', 'appos'), ('{', 'punct'), ('b,𝜖', 'appos'), ('}', 'punct'), ('  \t', 'compound'), ('S', 'appos')]

>> Bigrams: 
[[Rule, 2], [2, add], [add,  ], [ ,  ], [ , FIRST(S)=], [FIRST(S)=, {], [{,   ], [  , ,], [,, 𝜖], [𝜖, }], [}, 	], [	, NT], [NT, 	], [	,  	], [ 	, S], [S, 	], [	, {], [{, ,], [,, 𝜖], [𝜖, }], [},  	], [ 	, B], [B, 	], [	, {], [{, b,𝜖], [b,𝜖, }], [},   	], [  	, S]]

>> Trigrams: 
[[Rule, 2, add], [2, add,  ], [add,  ,  ], [ ,  , FIRST(S)=], [ , FIRST(S)=, {], [FIRST(S)=, {,   ], [{,   , ,], [  , ,, 𝜖], [,, 𝜖, }], [𝜖, }, 	], [}, 	, NT], [	, NT, 	], [NT, 	,  	], [	,  	, S], [ 	, S, 	], [S, 	, {], [	, {, ,], [{, ,, 𝜖], [,, 𝜖, }], [𝜖, },  	], [},  	, B], [ 	, B, 	], [B, 	, {], [	, {, b,𝜖], [{, b,𝜖, }], [b,𝜖, },   	], [},   	, S]]

>> Noun Phrases are: 
[Rule, {b,𝜖,   	S]

>> Named Entities are: 
[]


============================ Sentence 180 =============================

		a	B  	A		   


>> Tokens are: 
[	, , 	, 	, B,  	, 	, , 	  ] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('\uf0e0', 'PROPN'), ('\t', 'SPACE'), ('\t', 'SPACE'), ('B', 'PROPN'), (' \t', 'SPACE'), ('\t', 'SPACE'), ('\uf0e0', 'NOUN'), ('\t  ', 'SPACE')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('\uf0e0', 'compound'), ('\t', 'ROOT'), ('\t', 'compound'), ('B', 'compound'), (' \t', 'compound'), ('\t', 'compound'), ('\uf0e0', 'appos'), ('\t  ', 'punct')]

>> Bigrams: 
[[	, ], [, 	], [	, 	], [	, B], [B,  	], [ 	, 	], [	, ], [, 	  ]]

>> Trigrams: 
[[	, , 	], [, 	, 	], [	, 	, B], [	, B,  	], [B,  	, 	], [ 	, 	, ], [	, , 	  ]]

>> Noun Phrases are: 
[a	B  	A	]

>> Named Entities are: 
[]


============================ Sentence 181 =============================

Rule 1 add  to  	C	{c,𝜖}        


>> Tokens are: 
[Rule, 1, add,  ,  	, C, 	, {, c,𝜖, },       ] 

>> PoS Tags are: 
[('Rule', 'NOUN'), ('1', 'NUM'), ('add', 'VERB'), (' ', 'SPACE'), (' \t', 'SPACE'), ('C', 'PROPN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('c,𝜖', 'INTJ'), ('}', 'PUNCT'), ('      ', 'SPACE')] 

>> Dependency Tags are: 
[('Rule', 'nsubj'), ('1', 'nummod'), ('add', 'ROOT'), (' ', 'dobj'), (' \t', 'compound'), ('C', 'compound'), ('\t', 'pobj'), ('{', 'punct'), ('c,𝜖', 'nmod'), ('}', 'punct'), ('      ', 'appos')]

>> Bigrams: 
[[Rule, 1], [1, add], [add,  ], [ ,  	], [ 	, C], [C, 	], [	, {], [{, c,𝜖], [c,𝜖, }], [},       ]]

>> Trigrams: 
[[Rule, 1, add], [1, add,  ], [add,  ,  	], [ ,  	, C], [ 	, C, 	], [C, 	, {], [	, {, c,𝜖], [{, c,𝜖, }], [c,𝜖, },       ]]

>> Noun Phrases are: 
[Rule]

>> Named Entities are: 
[]


============================ Sentence 182 =============================

Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'nsubj'), ('#', 'appos'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[Prof. Jay R Dhamsaniya, (PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 183 =============================

Example-2: LL(1) parsing    Step 1: Not required   


>> Tokens are: 
[Example-2, :, LL(1, ), parsing,    , Step, 1, :, required,  ] 

>> PoS Tags are: 
[('Example-2', 'PROPN'), (':', 'PUNCT'), ('LL(1', 'PROPN'), (')', 'PUNCT'), ('parsing', 'VERB'), ('   ', 'SPACE'), ('Step', 'NOUN'), ('1', 'NUM'), (':', 'PUNCT'), ('required', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Example-2', 'ROOT'), (':', 'punct'), ('LL(1', 'appos'), (')', 'punct'), ('parsing', 'acl'), ('   ', 'nummod'), ('Step', 'dobj'), ('1', 'nummod'), (':', 'punct'), ('required', 'acl'), (' ', 'punct')]

>> Bigrams: 
[[Example-2, :], [:, LL(1], [LL(1, )], [), parsing], [parsing,    ], [   , Step], [Step, 1], [1, :], [:, required], [required,  ]]

>> Trigrams: 
[[Example-2, :, LL(1], [:, LL(1, )], [LL(1, ), parsing], [), parsing,    ], [parsing,    , Step], [   , Step, 1], [Step, 1, :], [1, :, required], [:, required,  ]]

>> Noun Phrases are: 
[Example-2, : LL(1,    Step]

>> Named Entities are: 
[('1', 'CARDINAL')]


============================ Sentence 184 =============================

Step 2: Compute FIRST First(B) BbC 


>> Tokens are: 
[Step, 2, :, Compute, First(B, ), BbC] 

>> PoS Tags are: 
[('Step', 'NOUN'), ('2', 'NUM'), (':', 'PUNCT'), ('Compute', 'PROPN'), ('First(B', 'PROPN'), (')', 'PUNCT'), ('B\uf0e0bC', 'PUNCT')] 

>> Dependency Tags are: 
[('Step', 'ROOT'), ('2', 'nummod'), (':', 'punct'), ('Compute', 'compound'), ('First(B', 'npadvmod'), (')', 'punct'), ('B\uf0e0bC', 'punct')]

>> Bigrams: 
[[Step, 2], [2, :], [:, Compute], [Compute, First(B], [First(B, )], [), BbC]]

>> Trigrams: 
[[Step, 2, :], [2, :, Compute], [:, Compute, First(B], [Compute, First(B, )], [First(B, ), BbC]]

>> Noun Phrases are: 
[Step, Compute FIRST]

>> Named Entities are: 
[('2', 'CARDINAL'), ('Compute FIRST First(B', 'ORG')]


============================ Sentence 185 =============================

					B𝜖   SaB | ϵ 


>> Tokens are: 
[					, B𝜖,   , SaB, |, ϵ] 

>> PoS Tags are: 
[('\t\t\t\t\t', 'SPACE'), ('B\uf0e0𝜖', 'NOUN'), ('  ', 'SPACE'), ('S\uf0e0aB', 'X'), ('|', 'ADV'), ('ϵ', 'NOUN')] 

>> Dependency Tags are: 
[('\t\t\t\t\t', 'nummod'), ('B\uf0e0𝜖', 'ROOT'), ('  ', 'appos'), ('S\uf0e0aB', 'punct'), ('|', 'advmod'), ('ϵ', 'punct')]

>> Bigrams: 
[[					, B𝜖], [B𝜖,   ], [  , SaB], [SaB, |], [|, ϵ]]

>> Trigrams: 
[[					, B𝜖,   ], [B𝜖,   , SaB], [  , SaB, |], [SaB, |, ϵ]]

>> Noun Phrases are: 
[					B𝜖]

>> Named Entities are: 
[]


============================ Sentence 186 =============================

	BbC | ϵ CcS | ϵ 	 	B		𝜖  	A		   


>> Tokens are: 
[	, BbC, |, ϵ, CcS, |, ϵ, 	 	, B, 	, , 	, 𝜖,  	, 	, , 	  ] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('B\uf0e0bC', 'PUNCT'), ('|', 'NOUN'), ('ϵ', 'NOUN'), ('C\uf0e0cS', 'NUM'), ('|', 'NOUN'), ('ϵ', 'NUM'), ('\t \t', 'SPACE'), ('B', 'PROPN'), ('\t', 'SPACE'), ('\uf0e0', 'PROPN'), ('\t', 'SPACE'), ('𝜖', 'PROPN'), (' \t', 'SPACE'), ('\t', 'SPACE'), ('\uf0e0', 'NOUN'), ('\t  ', 'SPACE')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('B\uf0e0bC', 'punct'), ('|', 'nmod'), ('ϵ', 'appos'), ('C\uf0e0cS', 'punct'), ('|', 'appos'), ('ϵ', 'punct'), ('\t \t', 'compound'), ('B', 'compound'), ('\t', 'compound'), ('\uf0e0', 'appos'), ('\t', 'conj'), ('𝜖', 'prep'), (' \t', 'compound'), ('\t', 'compound'), ('\uf0e0', 'appos'), ('\t  ', 'punct')]

>> Bigrams: 
[[	, BbC], [BbC, |], [|, ϵ], [ϵ, CcS], [CcS, |], [|, ϵ], [ϵ, 	 	], [	 	, B], [B, 	], [	, ], [, 	], [	, 𝜖], [𝜖,  	], [ 	, 	], [	, ], [, 	  ]]

>> Trigrams: 
[[	, BbC, |], [BbC, |, ϵ], [|, ϵ, CcS], [ϵ, CcS, |], [CcS, |, ϵ], [|, ϵ, 	 	], [ϵ, 	 	, B], [	 	, B, 	], [B, 	, ], [	, , 	], [, 	, 𝜖], [	, 𝜖,  	], [𝜖,  	, 	], [ 	, 	, ], [	, , 	  ]]

>> Noun Phrases are: 
[| ϵ, |, 	 	B	,  	A	]

>> Named Entities are: 
[]


============================ Sentence 187 =============================

Rule 2 add  to  FIRST(B)={ b   , 𝜖 } 	NT	First  	S	{ a, 𝜖 }  	B	{b,𝜖}  	B		b	C  	A		   


>> Tokens are: 
[Rule, 2, add,  ,  , FIRST(B)=, {, b,   , ,, 𝜖, }, 	, NT, 	,  	, S, 	, {, ,, 𝜖, },  	, B, 	, {, b,𝜖, },  	, B, 	, , 	, b, 	, C,  	, 	, , 	  ] 

>> PoS Tags are: 
[('Rule', 'NOUN'), ('2', 'NUM'), ('add', 'VERB'), (' ', 'SPACE'), (' ', 'SPACE'), ('FIRST(B)=', 'PROPN'), ('{', 'PUNCT'), ('b', 'NOUN'), ('  ', 'SPACE'), (',', 'PUNCT'), ('𝜖', 'X'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('NT', 'PROPN'), ('\t', 'SPACE'), (' \t', 'SPACE'), ('S', 'PROPN'), ('\t', 'SPACE'), ('{', 'PUNCT'), (',', 'PUNCT'), ('𝜖', 'NOUN'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('B', 'PROPN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('b,𝜖', 'NOUN'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('B', 'PROPN'), ('\t', 'SPACE'), ('\uf0e0', 'PROPN'), ('\t', 'SPACE'), ('b', 'PROPN'), ('\t', 'SPACE'), ('C', 'PROPN'), (' \t', 'SPACE'), ('\t', 'SPACE'), ('\uf0e0', 'NOUN'), ('\t  ', 'SPACE')] 

>> Dependency Tags are: 
[('Rule', 'nsubj'), ('2', 'nummod'), ('add', 'ROOT'), (' ', 'dobj'), (' ', 'pobj'), ('FIRST(B)=', 'dobj'), ('{', 'punct'), ('b', 'appos'), ('  ', 'appos'), (',', 'punct'), ('𝜖', 'prep'), ('}', 'punct'), ('\t', 'compound'), ('NT', 'compound'), ('\t', 'compound'), (' \t', 'compound'), ('S', 'compound'), ('\t', 'dobj'), ('{', 'punct'), (',', 'punct'), ('𝜖', 'appos'), ('}', 'punct'), (' \t', 'compound'), ('B', 'compound'), ('\t', 'appos'), ('{', 'punct'), ('b,𝜖', 'nmod'), ('}', 'punct'), (' \t', 'compound'), ('B', 'compound'), ('\t', 'appos'), ('\uf0e0', 'appos'), ('\t', 'compound'), ('b', 'appos'), ('\t', 'compound'), ('C', 'compound'), (' \t', 'compound'), ('\t', 'compound'), ('\uf0e0', 'appos'), ('\t  ', 'punct')]

>> Bigrams: 
[[Rule, 2], [2, add], [add,  ], [ ,  ], [ , FIRST(B)=], [FIRST(B)=, {], [{, b], [b,   ], [  , ,], [,, 𝜖], [𝜖, }], [}, 	], [	, NT], [NT, 	], [	,  	], [ 	, S], [S, 	], [	, {], [{, ,], [,, 𝜖], [𝜖, }], [},  	], [ 	, B], [B, 	], [	, {], [{, b,𝜖], [b,𝜖, }], [},  	], [ 	, B], [B, 	], [	, ], [, 	], [	, b], [b, 	], [	, C], [C,  	], [ 	, 	], [	, ], [, 	  ]]

>> Trigrams: 
[[Rule, 2, add], [2, add,  ], [add,  ,  ], [ ,  , FIRST(B)=], [ , FIRST(B)=, {], [FIRST(B)=, {, b], [{, b,   ], [b,   , ,], [  , ,, 𝜖], [,, 𝜖, }], [𝜖, }, 	], [}, 	, NT], [	, NT, 	], [NT, 	,  	], [	,  	, S], [ 	, S, 	], [S, 	, {], [	, {, ,], [{, ,, 𝜖], [,, 𝜖, }], [𝜖, },  	], [},  	, B], [ 	, B, 	], [B, 	, {], [	, {, b,𝜖], [{, b,𝜖, }], [b,𝜖, },  	], [},  	, B], [ 	, B, 	], [B, 	, ], [	, , 	], [, 	, b], [	, b, 	], [b, 	, C], [	, C,  	], [C,  	, 	], [ 	, 	, ], [	, , 	  ]]

>> Noun Phrases are: 
[Rule, FIRST(B)=, b, 𝜖, , 	b, 	C  	A	]

>> Named Entities are: 
[]


============================ Sentence 188 =============================

Rule 1 add  to  	C	{c,𝜖}        


>> Tokens are: 
[Rule, 1, add,  ,  	, C, 	, {, c,𝜖, },       ] 

>> PoS Tags are: 
[('Rule', 'NOUN'), ('1', 'NUM'), ('add', 'VERB'), (' ', 'SPACE'), (' \t', 'SPACE'), ('C', 'PROPN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('c,𝜖', 'INTJ'), ('}', 'PUNCT'), ('      ', 'SPACE')] 

>> Dependency Tags are: 
[('Rule', 'nsubj'), ('1', 'nummod'), ('add', 'ROOT'), (' ', 'dobj'), (' \t', 'compound'), ('C', 'compound'), ('\t', 'pobj'), ('{', 'punct'), ('c,𝜖', 'nmod'), ('}', 'punct'), ('      ', 'appos')]

>> Bigrams: 
[[Rule, 1], [1, add], [add,  ], [ ,  	], [ 	, C], [C, 	], [	, {], [{, c,𝜖], [c,𝜖, }], [},       ]]

>> Trigrams: 
[[Rule, 1, add], [1, add,  ], [add,  ,  	], [ ,  	, C], [ 	, C, 	], [C, 	, {], [	, {, c,𝜖], [{, c,𝜖, }], [c,𝜖, },       ]]

>> Noun Phrases are: 
[Rule]

>> Named Entities are: 
[]


============================ Sentence 189 =============================

Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'nsubj'), ('#', 'appos'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[Prof. Jay R Dhamsaniya, (PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 190 =============================

Example-2: LL(1) parsing    Step 1: Not required   


>> Tokens are: 
[Example-2, :, LL(1, ), parsing,    , Step, 1, :, required,  ] 

>> PoS Tags are: 
[('Example-2', 'PROPN'), (':', 'PUNCT'), ('LL(1', 'PROPN'), (')', 'PUNCT'), ('parsing', 'VERB'), ('   ', 'SPACE'), ('Step', 'NOUN'), ('1', 'NUM'), (':', 'PUNCT'), ('required', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Example-2', 'ROOT'), (':', 'punct'), ('LL(1', 'appos'), (')', 'punct'), ('parsing', 'acl'), ('   ', 'nummod'), ('Step', 'dobj'), ('1', 'nummod'), (':', 'punct'), ('required', 'acl'), (' ', 'punct')]

>> Bigrams: 
[[Example-2, :], [:, LL(1], [LL(1, )], [), parsing], [parsing,    ], [   , Step], [Step, 1], [1, :], [:, required], [required,  ]]

>> Trigrams: 
[[Example-2, :, LL(1], [:, LL(1, )], [LL(1, ), parsing], [), parsing,    ], [parsing,    , Step], [   , Step, 1], [Step, 1, :], [1, :, required], [:, required,  ]]

>> Noun Phrases are: 
[Example-2, : LL(1,    Step]

>> Named Entities are: 
[('1', 'CARDINAL')]


============================ Sentence 191 =============================

Step 2: Compute FIRST First(C) 


>> Tokens are: 
[Step, 2, :, Compute, First(C, )] 

>> PoS Tags are: 
[('Step', 'NOUN'), ('2', 'NUM'), (':', 'PUNCT'), ('Compute', 'PROPN'), ('First(C', 'PROPN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('Step', 'ROOT'), ('2', 'nummod'), (':', 'punct'), ('Compute', 'compound'), ('First(C', 'npadvmod'), (')', 'punct')]

>> Bigrams: 
[[Step, 2], [2, :], [:, Compute], [Compute, First(C], [First(C, )]]

>> Trigrams: 
[[Step, 2, :], [2, :, Compute], [:, Compute, First(C], [Compute, First(C, )]]

>> Noun Phrases are: 
[Step, Compute FIRST]

>> Named Entities are: 
[('2', 'CARDINAL'), ('FIRST', 'ORDINAL')]


============================ Sentence 192 =============================

CcS 					C𝜖   SaB | ϵ 


>> Tokens are: 
[CcS, 					, C𝜖,   , SaB, |, ϵ] 

>> PoS Tags are: 
[('C\uf0e0cS', 'PUNCT'), ('\t\t\t\t\t', 'SPACE'), ('C\uf0e0𝜖', 'NOUN'), ('  ', 'SPACE'), ('S\uf0e0aB', 'X'), ('|', 'ADV'), ('ϵ', 'NOUN')] 

>> Dependency Tags are: 
[('C\uf0e0cS', 'punct'), ('\t\t\t\t\t', 'compound'), ('C\uf0e0𝜖', 'ROOT'), ('  ', 'appos'), ('S\uf0e0aB', 'punct'), ('|', 'advmod'), ('ϵ', 'advmod')]

>> Bigrams: 
[[CcS, 					], [					, C𝜖], [C𝜖,   ], [  , SaB], [SaB, |], [|, ϵ]]

>> Trigrams: 
[[CcS, 					, C𝜖], [					, C𝜖,   ], [C𝜖,   , SaB], [  , SaB, |], [SaB, |, ϵ]]

>> Noun Phrases are: 
[CcS 					C𝜖]

>> Named Entities are: 
[]


============================ Sentence 193 =============================

	BbC | ϵ CcS | ϵ 	 	C		𝜖  	A		   


>> Tokens are: 
[	, BbC, |, ϵ, CcS, |, ϵ, 	 	, C, 	, , 	, 𝜖,  	, 	, , 	  ] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('B\uf0e0bC', 'PUNCT'), ('|', 'NOUN'), ('ϵ', 'NOUN'), ('C\uf0e0cS', 'NUM'), ('|', 'NOUN'), ('ϵ', 'NUM'), ('\t \t', 'SPACE'), ('C', 'PROPN'), ('\t', 'SPACE'), ('\uf0e0', 'PROPN'), ('\t', 'SPACE'), ('𝜖', 'PROPN'), (' \t', 'SPACE'), ('\t', 'SPACE'), ('\uf0e0', 'NOUN'), ('\t  ', 'SPACE')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('B\uf0e0bC', 'punct'), ('|', 'nmod'), ('ϵ', 'appos'), ('C\uf0e0cS', 'punct'), ('|', 'appos'), ('ϵ', 'punct'), ('\t \t', 'compound'), ('C', 'compound'), ('\t', 'compound'), ('\uf0e0', 'appos'), ('\t', 'conj'), ('𝜖', 'prep'), (' \t', 'compound'), ('\t', 'compound'), ('\uf0e0', 'appos'), ('\t  ', 'punct')]

>> Bigrams: 
[[	, BbC], [BbC, |], [|, ϵ], [ϵ, CcS], [CcS, |], [|, ϵ], [ϵ, 	 	], [	 	, C], [C, 	], [	, ], [, 	], [	, 𝜖], [𝜖,  	], [ 	, 	], [	, ], [, 	  ]]

>> Trigrams: 
[[	, BbC, |], [BbC, |, ϵ], [|, ϵ, CcS], [ϵ, CcS, |], [CcS, |, ϵ], [|, ϵ, 	 	], [ϵ, 	 	, C], [	 	, C, 	], [C, 	, ], [	, , 	], [, 	, 𝜖], [	, 𝜖,  	], [𝜖,  	, 	], [ 	, 	, ], [	, , 	  ]]

>> Noun Phrases are: 
[| ϵ, |, 	 	C	,  	A	]

>> Named Entities are: 
[]


============================ Sentence 194 =============================

Rule 2 add  to  FIRST(B)={ c   , 𝜖 } 	NT	First  	S	{ a, 𝜖 }  	B	{b,𝜖}  	C		c	S  	A		   


>> Tokens are: 
[Rule, 2, add,  ,  , FIRST(B)=, {, c,   , ,, 𝜖, }, 	, NT, 	,  	, S, 	, {, ,, 𝜖, },  	, B, 	, {, b,𝜖, },  	, C, 	, , 	, c, 	, S,  	, 	, , 	  ] 

>> PoS Tags are: 
[('Rule', 'NOUN'), ('2', 'NUM'), ('add', 'VERB'), (' ', 'SPACE'), (' ', 'SPACE'), ('FIRST(B)=', 'PROPN'), ('{', 'PUNCT'), ('c', 'NOUN'), ('  ', 'SPACE'), (',', 'PUNCT'), ('𝜖', 'X'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('NT', 'PROPN'), ('\t', 'SPACE'), (' \t', 'SPACE'), ('S', 'PROPN'), ('\t', 'SPACE'), ('{', 'PUNCT'), (',', 'PUNCT'), ('𝜖', 'NOUN'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('B', 'PROPN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('b,𝜖', 'NOUN'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('C', 'NOUN'), ('\t', 'SPACE'), ('\uf0e0', 'PROPN'), ('\t', 'SPACE'), ('c', 'PROPN'), ('\t', 'SPACE'), ('S', 'PROPN'), (' \t', 'SPACE'), ('\t', 'SPACE'), ('\uf0e0', 'NOUN'), ('\t  ', 'SPACE')] 

>> Dependency Tags are: 
[('Rule', 'nsubj'), ('2', 'nummod'), ('add', 'ROOT'), (' ', 'dobj'), (' ', 'pobj'), ('FIRST(B)=', 'dobj'), ('{', 'punct'), ('c', 'punct'), ('  ', 'appos'), (',', 'punct'), ('𝜖', 'prep'), ('}', 'punct'), ('\t', 'compound'), ('NT', 'compound'), ('\t', 'compound'), (' \t', 'compound'), ('S', 'compound'), ('\t', 'dobj'), ('{', 'punct'), (',', 'punct'), ('𝜖', 'appos'), ('}', 'punct'), (' \t', 'compound'), ('B', 'compound'), ('\t', 'appos'), ('{', 'punct'), ('b,𝜖', 'nmod'), ('}', 'punct'), (' \t', 'compound'), ('C', 'compound'), ('\t', 'compound'), ('\uf0e0', 'appos'), ('\t', 'compound'), ('c', 'relcl'), ('\t', 'compound'), ('S', 'compound'), (' \t', 'compound'), ('\t', 'compound'), ('\uf0e0', 'appos'), ('\t  ', 'punct')]

>> Bigrams: 
[[Rule, 2], [2, add], [add,  ], [ ,  ], [ , FIRST(B)=], [FIRST(B)=, {], [{, c], [c,   ], [  , ,], [,, 𝜖], [𝜖, }], [}, 	], [	, NT], [NT, 	], [	,  	], [ 	, S], [S, 	], [	, {], [{, ,], [,, 𝜖], [𝜖, }], [},  	], [ 	, B], [B, 	], [	, {], [{, b,𝜖], [b,𝜖, }], [},  	], [ 	, C], [C, 	], [	, ], [, 	], [	, c], [c, 	], [	, S], [S,  	], [ 	, 	], [	, ], [, 	  ]]

>> Trigrams: 
[[Rule, 2, add], [2, add,  ], [add,  ,  ], [ ,  , FIRST(B)=], [ , FIRST(B)=, {], [FIRST(B)=, {, c], [{, c,   ], [c,   , ,], [  , ,, 𝜖], [,, 𝜖, }], [𝜖, }, 	], [}, 	, NT], [	, NT, 	], [NT, 	,  	], [	,  	, S], [ 	, S, 	], [S, 	, {], [	, {, ,], [{, ,, 𝜖], [,, 𝜖, }], [𝜖, },  	], [},  	, B], [ 	, B, 	], [B, 	, {], [	, {, b,𝜖], [{, b,𝜖, }], [b,𝜖, },  	], [},  	, C], [ 	, C, 	], [C, 	, ], [	, , 	], [, 	, c], [	, c, 	], [c, 	, S], [	, S,  	], [S,  	, 	], [ 	, 	, ], [	, , 	  ]]

>> Noun Phrases are: 
[Rule, FIRST(B)=, 𝜖, {b,𝜖}  	C	, 	S  	A	]

>> Named Entities are: 
[]


============================ Sentence 195 =============================

Rule 1 add  to  	C	{c,𝜖}      Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[Rule, 1, add,  ,  	, C, 	, {, c,𝜖, },      , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('Rule', 'NOUN'), ('1', 'NUM'), ('add', 'VERB'), (' ', 'SPACE'), (' \t', 'SPACE'), ('C', 'PROPN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('c,𝜖', 'INTJ'), ('}', 'PUNCT'), ('     ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Rule', 'nsubj'), ('1', 'nummod'), ('add', 'ROOT'), (' ', 'dobj'), (' \t', 'compound'), ('C', 'compound'), ('\t', 'pobj'), ('{', 'punct'), ('c,𝜖', 'amod'), ('}', 'punct'), ('     ', 'appos'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'appos'), ('#', 'nmod'), ('3130006', 'appos'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'conj'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'dep'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'dep'), ('  ', 'punct'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'xcomp'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[Rule, 1], [1, add], [add,  ], [ ,  	], [ 	, C], [C, 	], [	, {], [{, c,𝜖], [c,𝜖, }], [},      ], [     , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[Rule, 1, add], [1, add,  ], [add,  ,  	], [ ,  	, C], [ 	, C, 	], [C, 	, {], [	, {, c,𝜖], [{, c,𝜖, }], [c,𝜖, },      ], [},      , Prof.], [     , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[Rule, Prof. Jay R Dhamsaniya, PS, Unit,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 196 =============================

Example-2: LL(1) parsing Step 2: Compute FOLLOW Follow(S)  CcS       BbC 					SaB       ={$} 	C		c	S  Follow(S)={ $ }  	NT	First 	Follow  	S	{a,𝜖}	{$} 	B	{b,𝜖}	{$} 	C	{c,𝜖}	{$}  	A 			B   


>> Tokens are: 
[Example-2, :, LL(1, ), parsing, Step, 2, :, Compute, FOLLOW, Follow(S, ),  , CcS,       , BbC, 					, SaB,       , =, {, $, }, 	, C, 	, , 	, c, 	, S,  , Follow(S)=, {, $, },  	, NT, 	, 	, Follow,  	, S, 	, {, a,𝜖, }, 	, {, $, }, 	, B, 	, {, b,𝜖, }, 	, {, $, }, 	, C, 	, {, c,𝜖, }, 	, {, $, },  	, 	, , 		, B,  ] 

>> PoS Tags are: 
[('Example-2', 'PROPN'), (':', 'PUNCT'), ('LL(1', 'PROPN'), (')', 'PUNCT'), ('parsing', 'VERB'), ('Step', 'NOUN'), ('2', 'NUM'), (':', 'PUNCT'), ('Compute', 'PROPN'), ('FOLLOW', 'PROPN'), ('Follow(S', 'PROPN'), (')', 'PUNCT'), (' ', 'SPACE'), ('C\uf0e0cS', 'PUNCT'), ('      ', 'SPACE'), ('B\uf0e0bC', 'PUNCT'), ('\t\t\t\t\t', 'SPACE'), ('S\uf0e0aB', 'ADP'), ('      ', 'SPACE'), ('=', 'SYM'), ('{', 'PUNCT'), ('$', 'SYM'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('C', 'PROPN'), ('\t', 'SPACE'), ('\uf0e0', 'PROPN'), ('\t', 'SPACE'), ('c', 'PROPN'), ('\t', 'SPACE'), ('S', 'PROPN'), (' ', 'SPACE'), ('Follow(S)=', 'NOUN'), ('{', 'PUNCT'), ('$', 'SYM'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('NT', 'PROPN'), ('\t', 'SPACE'), ('\t', 'SPACE'), ('Follow', 'PROPN'), (' \t', 'SPACE'), ('S', 'PROPN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('a,𝜖', 'PROPN'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('$', 'SYM'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('B', 'PROPN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('b,𝜖', 'NOUN'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('$', 'SYM'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('C', 'PROPN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('c,𝜖', 'INTJ'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('$', 'SYM'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('\t', 'SPACE'), ('\uf0e0', 'NOUN'), ('\t\t', 'SPACE'), ('B', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Example-2', 'nsubj'), (':', 'punct'), ('LL(1', 'appos'), (')', 'punct'), ('parsing', 'ROOT'), ('Step', 'dobj'), ('2', 'nummod'), (':', 'punct'), ('Compute', 'compound'), ('FOLLOW', 'compound'), ('Follow(S', 'appos'), (')', 'punct'), (' ', 'appos'), ('C\uf0e0cS', 'punct'), ('      ', 'dobj'), ('B\uf0e0bC', 'punct'), ('\t\t\t\t\t', 'advmod'), ('S\uf0e0aB', 'nmod'), ('      ', 'appos'), ('=', 'punct'), ('{', 'punct'), ('$', 'nmod'), ('}', 'punct'), ('\t', 'compound'), ('C', 'compound'), ('\t', 'compound'), ('\uf0e0', 'nmod'), ('\t', 'nmod'), ('c', 'dobj'), ('\t', 'compound'), ('S', 'ccomp'), (' ', 'prep'), ('Follow(S)=', 'ccomp'), ('{', 'punct'), ('$', 'dep'), ('}', 'punct'), (' \t', 'appos'), ('NT', 'appos'), ('\t', 'compound'), ('\t', 'compound'), ('Follow', 'compound'), (' \t', 'compound'), ('S', 'compound'), ('\t', 'dobj'), ('{', 'punct'), ('a,𝜖', 'nmod'), ('}', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('$', 'nmod'), ('}', 'punct'), ('\t', 'compound'), ('B', 'compound'), ('\t', 'appos'), ('{', 'punct'), ('b,𝜖', 'nmod'), ('}', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('$', 'nmod'), ('}', 'punct'), ('\t', 'compound'), ('C', 'compound'), ('\t', 'appos'), ('{', 'punct'), ('c,𝜖', 'nmod'), ('}', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('$', 'dep'), ('}', 'punct'), (' \t', 'nmod'), ('\t', 'compound'), ('\uf0e0', 'appos'), ('\t\t', 'compound'), ('B', 'compound'), (' ', 'punct')]

>> Bigrams: 
[[Example-2, :], [:, LL(1], [LL(1, )], [), parsing], [parsing, Step], [Step, 2], [2, :], [:, Compute], [Compute, FOLLOW], [FOLLOW, Follow(S], [Follow(S, )], [),  ], [ , CcS], [CcS,       ], [      , BbC], [BbC, 					], [					, SaB], [SaB,       ], [      , =], [=, {], [{, $], [$, }], [}, 	], [	, C], [C, 	], [	, ], [, 	], [	, c], [c, 	], [	, S], [S,  ], [ , Follow(S)=], [Follow(S)=, {], [{, $], [$, }], [},  	], [ 	, NT], [NT, 	], [	, 	], [	, Follow], [Follow,  	], [ 	, S], [S, 	], [	, {], [{, a,𝜖], [a,𝜖, }], [}, 	], [	, {], [{, $], [$, }], [}, 	], [	, B], [B, 	], [	, {], [{, b,𝜖], [b,𝜖, }], [}, 	], [	, {], [{, $], [$, }], [}, 	], [	, C], [C, 	], [	, {], [{, c,𝜖], [c,𝜖, }], [}, 	], [	, {], [{, $], [$, }], [},  	], [ 	, 	], [	, ], [, 		], [		, B], [B,  ]]

>> Trigrams: 
[[Example-2, :, LL(1], [:, LL(1, )], [LL(1, ), parsing], [), parsing, Step], [parsing, Step, 2], [Step, 2, :], [2, :, Compute], [:, Compute, FOLLOW], [Compute, FOLLOW, Follow(S], [FOLLOW, Follow(S, )], [Follow(S, ),  ], [),  , CcS], [ , CcS,       ], [CcS,       , BbC], [      , BbC, 					], [BbC, 					, SaB], [					, SaB,       ], [SaB,       , =], [      , =, {], [=, {, $], [{, $, }], [$, }, 	], [}, 	, C], [	, C, 	], [C, 	, ], [	, , 	], [, 	, c], [	, c, 	], [c, 	, S], [	, S,  ], [S,  , Follow(S)=], [ , Follow(S)=, {], [Follow(S)=, {, $], [{, $, }], [$, },  	], [},  	, NT], [ 	, NT, 	], [NT, 	, 	], [	, 	, Follow], [	, Follow,  	], [Follow,  	, S], [ 	, S, 	], [S, 	, {], [	, {, a,𝜖], [{, a,𝜖, }], [a,𝜖, }, 	], [}, 	, {], [	, {, $], [{, $, }], [$, }, 	], [}, 	, B], [	, B, 	], [B, 	, {], [	, {, b,𝜖], [{, b,𝜖, }], [b,𝜖, }, 	], [}, 	, {], [	, {, $], [{, $, }], [$, }, 	], [}, 	, C], [	, C, 	], [C, 	, {], [	, {, c,𝜖], [{, c,𝜖, }], [c,𝜖, }, 	], [}, 	, {], [	, {, $], [{, $, }], [$, },  	], [},  	, 	], [ 	, 	, ], [	, , 		], [, 		, B], [		, B,  ]]

>> Noun Phrases are: 
[Example-2, : LL(1, Step, Compute FOLLOW Follow(S, c, NT, $}  	A 	]

>> Named Entities are: 
[('2', 'CARDINAL'), ('Follow(S)=', 'ORG'), ('First', 'ORDINAL')]


============================ Sentence 197 =============================

Rule 3 Follow(A)=follow(B) Rule 1: Place $ in FOLLOW(S)    


>> Tokens are: 
[Rule, 3, Follow(A)=follow(B, ), Rule, 1, :, Place, $, FOLLOW(S, ),   ] 

>> PoS Tags are: 
[('Rule', 'VERB'), ('3', 'NUM'), ('Follow(A)=follow(B', 'NOUN'), (')', 'PUNCT'), ('Rule', 'VERB'), ('1', 'NUM'), (':', 'PUNCT'), ('Place', 'VERB'), ('$', 'SYM'), ('FOLLOW(S', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE')] 

>> Dependency Tags are: 
[('Rule', 'dep'), ('3', 'nummod'), ('Follow(A)=follow(B', 'dobj'), (')', 'punct'), ('Rule', 'appos'), ('1', 'nummod'), (':', 'punct'), ('Place', 'ROOT'), ('$', 'dobj'), ('FOLLOW(S', 'pobj'), (')', 'punct'), ('  ', 'dep')]

>> Bigrams: 
[[Rule, 3], [3, Follow(A)=follow(B], [Follow(A)=follow(B, )], [), Rule], [Rule, 1], [1, :], [:, Place], [Place, $], [$, FOLLOW(S], [FOLLOW(S, )], [),   ]]

>> Trigrams: 
[[Rule, 3, Follow(A)=follow(B], [3, Follow(A)=follow(B, )], [Follow(A)=follow(B, ), Rule], [), Rule, 1], [Rule, 1, :], [1, :, Place], [:, Place, $], [Place, $, FOLLOW(S], [$, FOLLOW(S, )], [FOLLOW(S, ),   ]]

>> Noun Phrases are: 
[3 Follow(A)=follow(B, FOLLOW(S]

>> Named Entities are: 
[]


============================ Sentence 198 =============================

SaB 


>> Tokens are: 
[SaB] 

>> PoS Tags are: 
[('S\uf0e0aB', 'X')] 

>> Dependency Tags are: 
[('S\uf0e0aB', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 199 =============================

| ϵ 


>> Tokens are: 
[|, ϵ] 

>> PoS Tags are: 
[('|', 'ADV'), ('ϵ', 'NOUN')] 

>> Dependency Tags are: 
[('|', 'ROOT'), ('ϵ', 'advmod')]

>> Bigrams: 
[[|, ϵ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 200 =============================

	BbC | ϵ CcS | ϵ 	 Follow(S)=Follow(C)  	B		b	C  	A 			B  Rule 3 Follow(A)=follow(B) Follow(C)=Follow(B)   ={$} 	S		a	B  	A 	 


>> Tokens are: 
[	, BbC, |, ϵ, CcS, |, ϵ, 	 , Follow(S)=Follow(C, ),  	, B, 	, , 	, b, 	, C,  	, 	, , 		, B,  , Rule, 3, Follow(A)=follow(B, ), Follow(C)=Follow(B, ),   , =, {, $, }, 	, S, 	, , 	, 	, B,  	, 	, ] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('B\uf0e0bC', 'PUNCT'), ('|', 'NOUN'), ('ϵ', 'NOUN'), ('C\uf0e0cS', 'NUM'), ('|', 'NOUN'), ('ϵ', 'PART'), ('\t ', 'SPACE'), ('Follow(S)=Follow(C', 'PROPN'), (')', 'PUNCT'), (' \t', 'SPACE'), ('B', 'PROPN'), ('\t', 'SPACE'), ('\uf0e0', 'PROPN'), ('\t', 'SPACE'), ('b', 'PROPN'), ('\t', 'SPACE'), ('C', 'PROPN'), (' \t', 'SPACE'), ('\t', 'SPACE'), ('\uf0e0', 'NOUN'), ('\t\t', 'SPACE'), ('B', 'PROPN'), (' ', 'SPACE'), ('Rule', 'VERB'), ('3', 'NUM'), ('Follow(A)=follow(B', 'PROPN'), (')', 'PUNCT'), ('Follow(C)=Follow(B', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('$', 'SYM'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('S', 'PROPN'), ('\t', 'SPACE'), ('\uf0e0', 'PROPN'), ('\t', 'SPACE'), ('\t', 'SPACE'), ('B', 'PROPN'), (' \t', 'SPACE'), ('\t', 'SPACE'), ('\uf0e0', 'NOUN')] 

>> Dependency Tags are: 
[('\t', 'nsubj'), ('B\uf0e0bC', 'punct'), ('|', 'nmod'), ('ϵ', 'appos'), ('C\uf0e0cS', 'punct'), ('|', 'appos'), ('ϵ', 'punct'), ('\t ', 'amod'), ('Follow(S)=Follow(C', 'npadvmod'), (')', 'punct'), (' \t', 'compound'), ('B', 'compound'), ('\t', 'compound'), ('\uf0e0', 'appos'), ('\t', 'compound'), ('b', 'appos'), ('\t', 'compound'), ('C', 'compound'), (' \t', 'compound'), ('\t', 'compound'), ('\uf0e0', 'appos'), ('\t\t', 'compound'), ('B', 'compound'), (' ', 'appos'), ('Rule', 'ROOT'), ('3', 'nummod'), ('Follow(A)=follow(B', 'nmod'), (')', 'punct'), ('Follow(C)=Follow(B', 'dobj'), (')', 'punct'), ('  ', 'dobj'), ('=', 'punct'), ('{', 'punct'), ('$', 'nmod'), ('}', 'punct'), ('\t', 'compound'), ('S', 'compound'), ('\t', 'compound'), ('\uf0e0', 'appos'), ('\t', 'conj'), ('\t', 'compound'), ('B', 'compound'), (' \t', 'compound'), ('\t', 'compound'), ('\uf0e0', 'appos')]

>> Bigrams: 
[[	, BbC], [BbC, |], [|, ϵ], [ϵ, CcS], [CcS, |], [|, ϵ], [ϵ, 	 ], [	 , Follow(S)=Follow(C], [Follow(S)=Follow(C, )], [),  	], [ 	, B], [B, 	], [	, ], [, 	], [	, b], [b, 	], [	, C], [C,  	], [ 	, 	], [	, ], [, 		], [		, B], [B,  ], [ , Rule], [Rule, 3], [3, Follow(A)=follow(B], [Follow(A)=follow(B, )], [), Follow(C)=Follow(B], [Follow(C)=Follow(B, )], [),   ], [  , =], [=, {], [{, $], [$, }], [}, 	], [	, S], [S, 	], [	, ], [, 	], [	, 	], [	, B], [B,  	], [ 	, 	], [	, ]]

>> Trigrams: 
[[	, BbC, |], [BbC, |, ϵ], [|, ϵ, CcS], [ϵ, CcS, |], [CcS, |, ϵ], [|, ϵ, 	 ], [ϵ, 	 , Follow(S)=Follow(C], [	 , Follow(S)=Follow(C, )], [Follow(S)=Follow(C, ),  	], [),  	, B], [ 	, B, 	], [B, 	, ], [	, , 	], [, 	, b], [	, b, 	], [b, 	, C], [	, C,  	], [C,  	, 	], [ 	, 	, ], [	, , 		], [, 		, B], [		, B,  ], [B,  , Rule], [ , Rule, 3], [Rule, 3, Follow(A)=follow(B], [3, Follow(A)=follow(B, )], [Follow(A)=follow(B, ), Follow(C)=Follow(B], [), Follow(C)=Follow(B, )], [Follow(C)=Follow(B, ),   ], [),   , =], [  , =, {], [=, {, $], [{, $, }], [$, }, 	], [}, 	, S], [	, S, 	], [S, 	, ], [	, , 	], [, 	, 	], [	, 	, B], [	, B,  	], [B,  	, 	], [ 	, 	, ]]

>> Noun Phrases are: 
[| ϵ, |,  	B	, 	b, 	C  	A 	, 3 Follow(A)=follow(B) Follow(C)=Follow(B, $} 	S	, a	B  	A 	]

>> Named Entities are: 
[]


============================ Sentence 201 =============================

		 


>> Tokens are: 
[		] 

>> PoS Tags are: 
[('\t\t', 'SPACE')] 

>> Dependency Tags are: 
[('\t\t', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 202 =============================

B  Rule 3 Follow(A)=follow(B) Follow(B)=Follow(S)   ={$}       Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara  #2170701 (CD)    


>> Tokens are: 
[B,  , Rule, 3, Follow(A)=follow(B, ), Follow(B)=Follow(S, ),   , =, {, $, },       , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara,  , #, 2170701, (, CD, ),   ] 

>> PoS Tags are: 
[('B', 'PROPN'), (' ', 'SPACE'), ('Rule', 'VERB'), ('3', 'NUM'), ('Follow(A)=follow(B', 'NOUN'), (')', 'PUNCT'), ('Follow(B)=Follow(S', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('$', 'SYM'), ('}', 'PUNCT'), ('      ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), (' ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE')] 

>> Dependency Tags are: 
[('B', 'compound'), (' ', 'nsubj'), ('Rule', 'ROOT'), ('3', 'nummod'), ('Follow(A)=follow(B', 'appos'), (')', 'punct'), ('Follow(B)=Follow(S', 'appos'), (')', 'punct'), ('  ', 'appos'), ('=', 'punct'), ('{', 'punct'), ('$', 'dep'), ('}', 'punct'), ('      ', 'appos'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'appos'), ('#', 'appos'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'nsubj'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'parataxis'), ('  ', 'nummod'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'appos'), ('‹#›', 'punct'), ('  ', 'appos'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), (' ', 'appos'), ('#', 'nmod'), ('2170701', 'npadvmod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos')]

>> Bigrams: 
[[B,  ], [ , Rule], [Rule, 3], [3, Follow(A)=follow(B], [Follow(A)=follow(B, )], [), Follow(B)=Follow(S], [Follow(B)=Follow(S, )], [),   ], [  , =], [=, {], [{, $], [$, }], [},       ], [      , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,  ], [ , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ]]

>> Trigrams: 
[[B,  , Rule], [ , Rule, 3], [Rule, 3, Follow(A)=follow(B], [3, Follow(A)=follow(B, )], [Follow(A)=follow(B, ), Follow(B)=Follow(S], [), Follow(B)=Follow(S, )], [Follow(B)=Follow(S, ),   ], [),   , =], [  , =, {], [=, {, $], [{, $, }], [$, },       ], [},       , Prof.], [      , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,  ], [Kagathara,  , #], [ , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ]]

>> Noun Phrases are: 
[3 Follow(A)=follow(B, Follow(B)=Follow(S, Prof. Jay R Dhamsaniya, PS, Unit, Basic Probability, Prof. Dixita B Kagathara, (CD]

>> Named Entities are: 
[('PS', 'ORG'), ('Dixita', 'PERSON'), ('Kagathara', 'PERSON')]


============================ Sentence 203 =============================

   Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'xcomp'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[Unit, Theory, I]

>> Named Entities are: 
[]


============================ Sentence 204 =============================

Example-2: LL(1) parsing    Step 3: Prepare predictive parsing table      SaB a=FIRST(aB)={ a } M[S,a]=SaB  	NT 


>> Tokens are: 
[Example-2, :, LL(1, ), parsing,    , Step, 3, :, Prepare, predictive, parsing, table,      , SaB, =, FIRST(aB)=, {, }, M[S, ,, a]=SaB,  	, NT] 

>> PoS Tags are: 
[('Example-2', 'PROPN'), (':', 'PUNCT'), ('LL(1', 'PROPN'), (')', 'PUNCT'), ('parsing', 'VERB'), ('   ', 'SPACE'), ('Step', 'NOUN'), ('3', 'NUM'), (':', 'PUNCT'), ('Prepare', 'VERB'), ('predictive', 'ADJ'), ('parsing', 'VERB'), ('table', 'NOUN'), ('     ', 'SPACE'), ('S\uf0e0aB', 'X'), ('=', 'PUNCT'), ('FIRST(aB)=', 'PROPN'), ('{', 'PUNCT'), ('}', 'PUNCT'), ('M[S', 'NOUN'), (',', 'PUNCT'), ('a]=S\uf0e0aB', 'PROPN'), (' \t', 'SPACE'), ('NT', 'PROPN')] 

>> Dependency Tags are: 
[('Example-2', 'nsubj'), (':', 'punct'), ('LL(1', 'appos'), (')', 'punct'), ('parsing', 'advcl'), ('   ', 'nummod'), ('Step', 'dobj'), ('3', 'nummod'), (':', 'punct'), ('Prepare', 'ROOT'), ('predictive', 'amod'), ('parsing', 'xcomp'), ('table', 'compound'), ('     ', 'dobj'), ('S\uf0e0aB', 'punct'), ('=', 'punct'), ('FIRST(aB)=', 'dobj'), ('{', 'punct'), ('}', 'punct'), ('M[S', 'appos'), (',', 'punct'), ('a]=S\uf0e0aB', 'appos'), (' \t', 'compound'), ('NT', 'appos')]

>> Bigrams: 
[[Example-2, :], [:, LL(1], [LL(1, )], [), parsing], [parsing,    ], [   , Step], [Step, 3], [3, :], [:, Prepare], [Prepare, predictive], [predictive, parsing], [parsing, table], [table,      ], [     , SaB], [SaB, =], [=, FIRST(aB)=], [FIRST(aB)=, {], [{, }], [}, M[S], [M[S, ,], [,, a]=SaB], [a]=SaB,  	], [ 	, NT]]

>> Trigrams: 
[[Example-2, :, LL(1], [:, LL(1, )], [LL(1, ), parsing], [), parsing,    ], [parsing,    , Step], [   , Step, 3], [Step, 3, :], [3, :, Prepare], [:, Prepare, predictive], [Prepare, predictive, parsing], [predictive, parsing, table], [parsing, table,      ], [table,      , SaB], [     , SaB, =], [SaB, =, FIRST(aB)=], [=, FIRST(aB)=, {], [FIRST(aB)=, {, }], [{, }, M[S], [}, M[S, ,], [M[S, ,, a]=SaB], [,, a]=SaB,  	], [a]=SaB,  	, NT]]

>> Noun Phrases are: 
[Example-2, : LL(1,    Step, a=FIRST(aB)=, a } M[S, a]=SaB,  	NT]

>> Named Entities are: 
[('3', 'CARDINAL'), ('a]=S\uf0e0aB', 'ORG')]


============================ Sentence 205 =============================

	Input Symbol			 		a	b	c	$ 	S	SaB			 	B				 	C				  Rule: 2 A  a = first() M[A,a] 


>> Tokens are: 
[	, Input, Symbol, 			 		, 	, b, 	, c, 	, $, 	, S, 	, SaB, 			 	, B, 				 	, C, 				  , Rule, :, 2, A,  , =, (, ), M[A, ,, ]] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('Input', 'PROPN'), ('Symbol', 'PROPN'), ('\t\t\t \t\t', 'SPACE'), ('\t', 'SPACE'), ('b', 'PROPN'), ('\t', 'SPACE'), ('c', 'NOUN'), ('\t', 'SPACE'), ('$', 'SYM'), ('\t', 'SPACE'), ('S', 'PROPN'), ('\t', 'SPACE'), ('S\uf0e0aB', 'PROPN'), ('\t\t\t \t', 'SPACE'), ('B', 'PROPN'), ('\t\t\t\t \t', 'SPACE'), ('C', 'PROPN'), ('\t\t\t\t  ', 'SPACE'), ('Rule', 'NOUN'), (':', 'PUNCT'), ('2', 'NUM'), ('A\uf0e0', 'NOUN'), (' ', 'SPACE'), ('=', 'PUNCT'), ('(', 'PUNCT'), (')', 'PUNCT'), ('M[A', 'INTJ'), (',', 'PUNCT'), (']', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('Input', 'compound'), ('Symbol', 'compound'), ('\t\t\t \t\t', 'ROOT'), ('\t', 'compound'), ('b', 'compound'), ('\t', 'nmod'), ('c', 'nmod'), ('\t', 'nmod'), ('$', 'nmod'), ('\t', 'compound'), ('S', 'compound'), ('\t', 'nmod'), ('S\uf0e0aB', 'punct'), ('\t\t\t \t', 'compound'), ('B', 'compound'), ('\t\t\t\t \t', 'appos'), ('C', 'compound'), ('\t\t\t\t  ', 'compound'), ('Rule', 'appos'), (':', 'punct'), ('2', 'nummod'), ('A\uf0e0', 'appos'), (' ', 'prep'), ('=', 'punct'), ('(', 'punct'), (')', 'punct'), ('M[A', 'appos'), (',', 'punct'), (']', 'punct')]

>> Bigrams: 
[[	, Input], [Input, Symbol], [Symbol, 			 		], [			 		, 	], [	, b], [b, 	], [	, c], [c, 	], [	, $], [$, 	], [	, S], [S, 	], [	, SaB], [SaB, 			 	], [			 	, B], [B, 				 	], [				 	, C], [C, 				  ], [				  , Rule], [Rule, :], [:, 2], [2, A], [A,  ], [ , =], [=, (], [(, )], [), M[A], [M[A, ,], [,, ]]]

>> Trigrams: 
[[	, Input, Symbol], [Input, Symbol, 			 		], [Symbol, 			 		, 	], [			 		, 	, b], [	, b, 	], [b, 	, c], [	, c, 	], [c, 	, $], [	, $, 	], [$, 	, S], [	, S, 	], [S, 	, SaB], [	, SaB, 			 	], [SaB, 			 	, B], [			 	, B, 				 	], [B, 				 	, C], [				 	, C, 				  ], [C, 				  , Rule], [				  , Rule, :], [Rule, :, 2], [:, 2, A], [2, A,  ], [A,  , =], [ , =, (], [=, (, )], [(, ), M[A], [), M[A, ,], [M[A, ,, ]]]

>> Noun Phrases are: 
[a	b	c	$ 	S	SaB			 	B				 	C				  Rule, 2 A]

>> Named Entities are: 
[('2', 'CARDINAL'), ('first', 'ORDINAL')]


============================ Sentence 206 =============================

= 


>> Tokens are: 
[=] 

>> PoS Tags are: 
[('=', 'PUNCT')] 

>> Dependency Tags are: 
[('=', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 207 =============================

A   SaB | ϵ 


>> Tokens are: 
[A,   , SaB, |, ϵ] 

>> PoS Tags are: 
[('A\uf0e0', 'ADV'), ('  ', 'SPACE'), ('S\uf0e0aB', 'X'), ('|', 'ADV'), ('ϵ', 'NOUN')] 

>> Dependency Tags are: 
[('A\uf0e0', 'ROOT'), ('  ', 'npadvmod'), ('S\uf0e0aB', 'prep'), ('|', 'npadvmod'), ('ϵ', 'advmod')]

>> Bigrams: 
[[A,   ], [  , SaB], [SaB, |], [|, ϵ]]

>> Trigrams: 
[[A,   , SaB], [  , SaB, |], [SaB, |, ϵ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 208 =============================

	BbC | ϵ CcS | ϵ 	 	NT	First 	Follow  	S	{a,𝜖}	{$} 	B	{b,𝜖}	{$} 	C	{c,𝜖}	{$}     Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[	, BbC, |, ϵ, CcS, |, ϵ, 	 	, NT, 	, 	, Follow,  	, S, 	, {, a,𝜖, }, 	, {, $, }, 	, B, 	, {, b,𝜖, }, 	, {, $, }, 	, C, 	, {, c,𝜖, }, 	, {, $, },     , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('B\uf0e0bC', 'PUNCT'), ('|', 'NOUN'), ('ϵ', 'NOUN'), ('C\uf0e0cS', 'NUM'), ('|', 'NOUN'), ('ϵ', 'NUM'), ('\t \t', 'SPACE'), ('NT', 'PROPN'), ('\t', 'SPACE'), ('\t', 'SPACE'), ('Follow', 'PROPN'), (' \t', 'SPACE'), ('S', 'PROPN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('a,𝜖', 'PROPN'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('$', 'SYM'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('B', 'PROPN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('b,𝜖', 'NOUN'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('$', 'SYM'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('C', 'PROPN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('c,𝜖', 'INTJ'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('$', 'SYM'), ('}', 'PUNCT'), ('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('\t', 'nmod'), ('B\uf0e0bC', 'punct'), ('|', 'nmod'), ('ϵ', 'appos'), ('C\uf0e0cS', 'punct'), ('|', 'appos'), ('ϵ', 'punct'), ('\t \t', 'compound'), ('NT', 'compound'), ('\t', 'compound'), ('\t', 'compound'), ('Follow', 'appos'), (' \t', 'compound'), ('S', 'compound'), ('\t', 'nsubj'), ('{', 'punct'), ('a,𝜖', 'nmod'), ('}', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('$', 'nmod'), ('}', 'punct'), ('\t', 'compound'), ('B', 'compound'), ('\t', 'appos'), ('{', 'punct'), ('b,𝜖', 'nmod'), ('}', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('$', 'nmod'), ('}', 'punct'), ('\t', 'compound'), ('C', 'compound'), ('\t', 'appos'), ('{', 'punct'), ('c,𝜖', 'nmod'), ('}', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('$', 'quantmod'), ('}', 'punct'), ('    ', 'appos'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'appos'), ('#', 'nmod'), ('3130006', 'appos'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'dobj'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[	, BbC], [BbC, |], [|, ϵ], [ϵ, CcS], [CcS, |], [|, ϵ], [ϵ, 	 	], [	 	, NT], [NT, 	], [	, 	], [	, Follow], [Follow,  	], [ 	, S], [S, 	], [	, {], [{, a,𝜖], [a,𝜖, }], [}, 	], [	, {], [{, $], [$, }], [}, 	], [	, B], [B, 	], [	, {], [{, b,𝜖], [b,𝜖, }], [}, 	], [	, {], [{, $], [$, }], [}, 	], [	, C], [C, 	], [	, {], [{, c,𝜖], [c,𝜖, }], [}, 	], [	, {], [{, $], [$, }], [},     ], [    , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[	, BbC, |], [BbC, |, ϵ], [|, ϵ, CcS], [ϵ, CcS, |], [CcS, |, ϵ], [|, ϵ, 	 	], [ϵ, 	 	, NT], [	 	, NT, 	], [NT, 	, 	], [	, 	, Follow], [	, Follow,  	], [Follow,  	, S], [ 	, S, 	], [S, 	, {], [	, {, a,𝜖], [{, a,𝜖, }], [a,𝜖, }, 	], [}, 	, {], [	, {, $], [{, $, }], [$, }, 	], [}, 	, B], [	, B, 	], [B, 	, {], [	, {, b,𝜖], [{, b,𝜖, }], [b,𝜖, }, 	], [}, 	, {], [	, {, $], [{, $, }], [$, }, 	], [}, 	, C], [	, C, 	], [C, 	, {], [	, {, c,𝜖], [{, c,𝜖, }], [c,𝜖, }, 	], [}, 	, {], [	, {, $], [{, $, }], [$, },     ], [},     , Prof.], [    , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[| ϵ, |, 	 	NT	First 	Follow, Prof. Jay R Dhamsaniya, (PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('First', 'ORDINAL'), ('Jay R Dhamsaniya', 'ORG'), ('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 209 =============================

Example-2: LL(1) parsing    Step 3: Prepare predictive parsing table      S𝜖 b=FOLLOW(S)={ $ } M[S,$]=S𝜖  	 


>> Tokens are: 
[Example-2, :, LL(1, ), parsing,    , Step, 3, :, Prepare, predictive, parsing, table,      , S𝜖, b, =, FOLLOW(S)=, {, $, }, M[S,$]=S𝜖,  	] 

>> PoS Tags are: 
[('Example-2', 'PROPN'), (':', 'PUNCT'), ('LL(1', 'PROPN'), (')', 'PUNCT'), ('parsing', 'VERB'), ('   ', 'SPACE'), ('Step', 'NOUN'), ('3', 'NUM'), (':', 'PUNCT'), ('Prepare', 'VERB'), ('predictive', 'ADJ'), ('parsing', 'VERB'), ('table', 'NOUN'), ('     ', 'SPACE'), ('S\uf0e0𝜖', 'NOUN'), ('b', 'X'), ('=', 'SYM'), ('FOLLOW(S)=', 'NOUN'), ('{', 'PUNCT'), ('$', 'SYM'), ('}', 'PUNCT'), ('M[S,$]=S\uf0e0𝜖', 'NOUN'), (' \t', 'SPACE')] 

>> Dependency Tags are: 
[('Example-2', 'nsubj'), (':', 'punct'), ('LL(1', 'appos'), (')', 'punct'), ('parsing', 'advcl'), ('   ', 'nummod'), ('Step', 'dobj'), ('3', 'nummod'), (':', 'punct'), ('Prepare', 'ROOT'), ('predictive', 'amod'), ('parsing', 'xcomp'), ('table', 'compound'), ('     ', 'dobj'), ('S\uf0e0𝜖', 'dep'), ('b', 'prep'), ('=', 'dative'), ('FOLLOW(S)=', 'dep'), ('{', 'punct'), ('$', 'nmod'), ('}', 'punct'), ('M[S,$]=S\uf0e0𝜖', 'appos'), (' \t', 'dep')]

>> Bigrams: 
[[Example-2, :], [:, LL(1], [LL(1, )], [), parsing], [parsing,    ], [   , Step], [Step, 3], [3, :], [:, Prepare], [Prepare, predictive], [predictive, parsing], [parsing, table], [table,      ], [     , S𝜖], [S𝜖, b], [b, =], [=, FOLLOW(S)=], [FOLLOW(S)=, {], [{, $], [$, }], [}, M[S,$]=S𝜖], [M[S,$]=S𝜖,  	]]

>> Trigrams: 
[[Example-2, :, LL(1], [:, LL(1, )], [LL(1, ), parsing], [), parsing,    ], [parsing,    , Step], [   , Step, 3], [Step, 3, :], [3, :, Prepare], [:, Prepare, predictive], [Prepare, predictive, parsing], [predictive, parsing, table], [parsing, table,      ], [table,      , S𝜖], [     , S𝜖, b], [S𝜖, b, =], [b, =, FOLLOW(S)=], [=, FOLLOW(S)=, {], [FOLLOW(S)=, {, $], [{, $, }], [$, }, M[S,$]=S𝜖], [}, M[S,$]=S𝜖,  	]]

>> Noun Phrases are: 
[Example-2, : LL(1,    Step, $ } M[S,$]=S𝜖]

>> Named Entities are: 
[('3', 'CARDINAL')]


============================ Sentence 210 =============================

NT 


>> Tokens are: 
[NT] 

>> PoS Tags are: 
[('NT', 'PROPN')] 

>> Dependency Tags are: 
[('NT', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[NT]

>> Named Entities are: 
[]


============================ Sentence 211 =============================

	Input Symbol			 		a	b	c	$ 	S	SaB			S𝜖 	B				 	C				   SaB | ϵ 


>> Tokens are: 
[	, Input, Symbol, 			 		, 	, b, 	, c, 	, $, 	, S, 	, SaB, 			, S𝜖, 	, B, 				 	, C, 				   , SaB, |, ϵ] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('Input', 'PROPN'), ('Symbol', 'PROPN'), ('\t\t\t \t\t', 'SPACE'), ('\t', 'SPACE'), ('b', 'PROPN'), ('\t', 'SPACE'), ('c', 'NOUN'), ('\t', 'SPACE'), ('$', 'SYM'), ('\t', 'SPACE'), ('S', 'PROPN'), ('\t', 'SPACE'), ('S\uf0e0aB', 'SYM'), ('\t\t\t', 'SPACE'), ('S\uf0e0𝜖', 'PROPN'), ('\t', 'SPACE'), ('B', 'PROPN'), ('\t\t\t\t \t', 'SPACE'), ('C', 'PROPN'), ('\t\t\t\t   ', 'SPACE'), ('S\uf0e0aB', 'PROPN'), ('|', 'NOUN'), ('ϵ', 'NOUN')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('Input', 'compound'), ('Symbol', 'compound'), ('\t\t\t \t\t', 'dep'), ('\t', 'compound'), ('b', 'compound'), ('\t', 'compound'), ('c', 'appos'), ('\t', 'nmod'), ('$', 'nmod'), ('\t', 'compound'), ('S', 'compound'), ('\t', 'dobj'), ('S\uf0e0aB', 'punct'), ('\t\t\t', 'compound'), ('S\uf0e0𝜖', 'compound'), ('\t', 'compound'), ('B', 'compound'), ('\t\t\t\t \t', 'appos'), ('C', 'appos'), ('\t\t\t\t   ', 'compound'), ('S\uf0e0aB', 'compound'), ('|', 'ROOT'), ('ϵ', 'advmod')]

>> Bigrams: 
[[	, Input], [Input, Symbol], [Symbol, 			 		], [			 		, 	], [	, b], [b, 	], [	, c], [c, 	], [	, $], [$, 	], [	, S], [S, 	], [	, SaB], [SaB, 			], [			, S𝜖], [S𝜖, 	], [	, B], [B, 				 	], [				 	, C], [C, 				   ], [				   , SaB], [SaB, |], [|, ϵ]]

>> Trigrams: 
[[	, Input, Symbol], [Input, Symbol, 			 		], [Symbol, 			 		, 	], [			 		, 	, b], [	, b, 	], [b, 	, c], [	, c, 	], [c, 	, $], [	, $, 	], [$, 	, S], [	, S, 	], [S, 	, SaB], [	, SaB, 			], [SaB, 			, S𝜖], [			, S𝜖, 	], [S𝜖, 	, B], [	, B, 				 	], [B, 				 	, C], [				 	, C, 				   ], [C, 				   , SaB], [				   , SaB, |], [SaB, |, ϵ]]

>> Noun Phrases are: 
[a	b	c, C]

>> Named Entities are: 
[]


============================ Sentence 212 =============================

	BbC | ϵ CcS | ϵ 	 	NT	First 	Follow  	S	{a}	{$} 	B	{b,𝜖}	{$} 	C	{c,𝜖}	{$}  Rule: 3 A  b = follow(A) M[A,b] = A     Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[	, BbC, |, ϵ, CcS, |, ϵ, 	 	, NT, 	, 	, Follow,  	, S, 	, {, }, 	, {, $, }, 	, B, 	, {, b,𝜖, }, 	, {, $, }, 	, C, 	, {, c,𝜖, }, 	, {, $, },  , Rule, :, 3, A,  , b, =, follow(A, ), M[A, ,, b, ], =, A,     , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('B\uf0e0bC', 'PUNCT'), ('|', 'NOUN'), ('ϵ', 'NOUN'), ('C\uf0e0cS', 'NUM'), ('|', 'NOUN'), ('ϵ', 'NUM'), ('\t \t', 'SPACE'), ('NT', 'PROPN'), ('\t', 'SPACE'), ('\t', 'SPACE'), ('Follow', 'PROPN'), (' \t', 'SPACE'), ('S', 'PROPN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('$', 'SYM'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('B', 'PROPN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('b,𝜖', 'NOUN'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('$', 'SYM'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('C', 'PROPN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('c,𝜖', 'INTJ'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('$', 'SYM'), ('}', 'PUNCT'), (' ', 'SPACE'), ('Rule', 'NOUN'), (':', 'PUNCT'), ('3', 'NUM'), ('A\uf0e0', 'NOUN'), (' ', 'SPACE'), ('b', 'X'), ('=', 'SYM'), ('follow(A', 'NUM'), (')', 'PUNCT'), ('M[A', 'NOUN'), (',', 'PUNCT'), ('b', 'X'), (']', 'PUNCT'), ('=', 'PUNCT'), ('A\uf0e0', 'ADV'), ('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('\t', 'nsubj'), ('B\uf0e0bC', 'punct'), ('|', 'nmod'), ('ϵ', 'appos'), ('C\uf0e0cS', 'punct'), ('|', 'appos'), ('ϵ', 'punct'), ('\t \t', 'compound'), ('NT', 'compound'), ('\t', 'compound'), ('\t', 'compound'), ('Follow', 'compound'), (' \t', 'compound'), ('S', 'compound'), ('\t', 'appos'), ('{', 'punct'), ('}', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('$', 'nmod'), ('}', 'punct'), ('\t', 'compound'), ('B', 'compound'), ('\t', 'nmod'), ('{', 'punct'), ('b,𝜖', 'nmod'), ('}', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('$', 'nmod'), ('}', 'punct'), ('\t', 'compound'), ('C', 'compound'), ('\t', 'appos'), ('{', 'punct'), ('c,𝜖', 'npadvmod'), ('}', 'punct'), ('\t', 'conj'), ('{', 'punct'), ('$', 'appos'), ('}', 'punct'), (' ', 'appos'), ('Rule', 'nsubj'), (':', 'punct'), ('3', 'nummod'), ('A\uf0e0', 'appos'), (' ', 'appos'), ('b', 'prep'), ('=', 'appos'), ('follow(A', 'prep'), (')', 'punct'), ('M[A', 'appos'), (',', 'punct'), ('b', 'prep'), (']', 'punct'), ('=', 'punct'), ('A\uf0e0', 'appos'), ('    ', 'compound'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'npadvmod'), ('#', 'nmod'), ('3130006', 'appos'), ('(', 'punct'), ('PS', 'nsubj'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'parataxis'), ('  ', 'conj'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'appos'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[	, BbC], [BbC, |], [|, ϵ], [ϵ, CcS], [CcS, |], [|, ϵ], [ϵ, 	 	], [	 	, NT], [NT, 	], [	, 	], [	, Follow], [Follow,  	], [ 	, S], [S, 	], [	, {], [{, }], [}, 	], [	, {], [{, $], [$, }], [}, 	], [	, B], [B, 	], [	, {], [{, b,𝜖], [b,𝜖, }], [}, 	], [	, {], [{, $], [$, }], [}, 	], [	, C], [C, 	], [	, {], [{, c,𝜖], [c,𝜖, }], [}, 	], [	, {], [{, $], [$, }], [},  ], [ , Rule], [Rule, :], [:, 3], [3, A], [A,  ], [ , b], [b, =], [=, follow(A], [follow(A, )], [), M[A], [M[A, ,], [,, b], [b, ]], [], =], [=, A], [A,     ], [    , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[	, BbC, |], [BbC, |, ϵ], [|, ϵ, CcS], [ϵ, CcS, |], [CcS, |, ϵ], [|, ϵ, 	 	], [ϵ, 	 	, NT], [	 	, NT, 	], [NT, 	, 	], [	, 	, Follow], [	, Follow,  	], [Follow,  	, S], [ 	, S, 	], [S, 	, {], [	, {, }], [{, }, 	], [}, 	, {], [	, {, $], [{, $, }], [$, }, 	], [}, 	, B], [	, B, 	], [B, 	, {], [	, {, b,𝜖], [{, b,𝜖, }], [b,𝜖, }, 	], [}, 	, {], [	, {, $], [{, $, }], [$, }, 	], [}, 	, C], [	, C, 	], [C, 	, {], [	, {, c,𝜖], [{, c,𝜖, }], [c,𝜖, }, 	], [}, 	, {], [	, {, $], [{, $, }], [$, },  ], [},  , Rule], [ , Rule, :], [Rule, :, 3], [:, 3, A], [3, A,  ], [A,  , b], [ , b, =], [b, =, follow(A], [=, follow(A, )], [follow(A, ), M[A], [), M[A, ,], [M[A, ,, b], [,, b, ]], [b, ], =], [], =, A], [=, A,     ], [A,     , Prof.], [    , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[| ϵ, |, 3 A, M[A, PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('First', 'ORDINAL'), ('3', 'CARDINAL'), ('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 213 =============================

Example-2: LL(1) parsing    Step 3: Prepare predictive parsing table      BbC a=FIRST(bC)={ b } M[B,b]=BbC  	NT	Input Symbol			 		a	b	c	$ 	S	SaB			S𝜖 	B 


>> Tokens are: 
[Example-2, :, LL(1, ), parsing,    , Step, 3, :, Prepare, predictive, parsing, table,      , BbC, =, FIRST(bC)=, {, b, }, M[B, ,, b]=BbC,  	, NT, 	, Input, Symbol, 			 		, 	, b, 	, c, 	, $, 	, S, 	, SaB, 			, S𝜖, 	, B] 

>> PoS Tags are: 
[('Example-2', 'PROPN'), (':', 'PUNCT'), ('LL(1', 'PROPN'), (')', 'PUNCT'), ('parsing', 'VERB'), ('   ', 'SPACE'), ('Step', 'NOUN'), ('3', 'NUM'), (':', 'PUNCT'), ('Prepare', 'VERB'), ('predictive', 'ADJ'), ('parsing', 'VERB'), ('table', 'NOUN'), ('     ', 'SPACE'), ('B\uf0e0bC', 'PUNCT'), ('=', 'PUNCT'), ('FIRST(bC)=', 'PROPN'), ('{', 'PUNCT'), ('b', 'NOUN'), ('}', 'PUNCT'), ('M[B', 'NOUN'), (',', 'PUNCT'), ('b]=B\uf0e0bC', 'PROPN'), (' \t', 'SPACE'), ('NT', 'PROPN'), ('\t', 'SPACE'), ('Input', 'PROPN'), ('Symbol', 'PROPN'), ('\t\t\t \t\t', 'SPACE'), ('\t', 'SPACE'), ('b', 'PROPN'), ('\t', 'SPACE'), ('c', 'NOUN'), ('\t', 'SPACE'), ('$', 'SYM'), ('\t', 'SPACE'), ('S', 'PROPN'), ('\t', 'SPACE'), ('S\uf0e0aB', 'SYM'), ('\t\t\t', 'SPACE'), ('S\uf0e0𝜖', 'PROPN'), ('\t', 'SPACE'), ('B', 'PROPN')] 

>> Dependency Tags are: 
[('Example-2', 'nsubj'), (':', 'punct'), ('LL(1', 'appos'), (')', 'punct'), ('parsing', 'advcl'), ('   ', 'nummod'), ('Step', 'dobj'), ('3', 'nummod'), (':', 'punct'), ('Prepare', 'ROOT'), ('predictive', 'amod'), ('parsing', 'xcomp'), ('table', 'compound'), ('     ', 'dobj'), ('B\uf0e0bC', 'punct'), ('=', 'punct'), ('FIRST(bC)=', 'nmod'), ('{', 'punct'), ('b', 'appos'), ('}', 'punct'), ('M[B', 'dobj'), (',', 'punct'), ('b]=B\uf0e0bC', 'compound'), (' \t', 'compound'), ('NT', 'compound'), ('\t', 'compound'), ('Input', 'compound'), ('Symbol', 'compound'), ('\t\t\t \t\t', 'appos'), ('\t', 'compound'), ('b', 'compound'), ('\t', 'compound'), ('c', 'appos'), ('\t', 'nmod'), ('$', 'nmod'), ('\t', 'compound'), ('S', 'compound'), ('\t', 'dobj'), ('S\uf0e0aB', 'punct'), ('\t\t\t', 'compound'), ('S\uf0e0𝜖', 'compound'), ('\t', 'compound'), ('B', 'appos')]

>> Bigrams: 
[[Example-2, :], [:, LL(1], [LL(1, )], [), parsing], [parsing,    ], [   , Step], [Step, 3], [3, :], [:, Prepare], [Prepare, predictive], [predictive, parsing], [parsing, table], [table,      ], [     , BbC], [BbC, =], [=, FIRST(bC)=], [FIRST(bC)=, {], [{, b], [b, }], [}, M[B], [M[B, ,], [,, b]=BbC], [b]=BbC,  	], [ 	, NT], [NT, 	], [	, Input], [Input, Symbol], [Symbol, 			 		], [			 		, 	], [	, b], [b, 	], [	, c], [c, 	], [	, $], [$, 	], [	, S], [S, 	], [	, SaB], [SaB, 			], [			, S𝜖], [S𝜖, 	], [	, B]]

>> Trigrams: 
[[Example-2, :, LL(1], [:, LL(1, )], [LL(1, ), parsing], [), parsing,    ], [parsing,    , Step], [   , Step, 3], [Step, 3, :], [3, :, Prepare], [:, Prepare, predictive], [Prepare, predictive, parsing], [predictive, parsing, table], [parsing, table,      ], [table,      , BbC], [     , BbC, =], [BbC, =, FIRST(bC)=], [=, FIRST(bC)=, {], [FIRST(bC)=, {, b], [{, b, }], [b, }, M[B], [}, M[B, ,], [M[B, ,, b]=BbC], [,, b]=BbC,  	], [b]=BbC,  	, NT], [ 	, NT, 	], [NT, 	, Input], [	, Input, Symbol], [Input, Symbol, 			 		], [Symbol, 			 		, 	], [			 		, 	, b], [	, b, 	], [b, 	, c], [	, c, 	], [c, 	, $], [	, $, 	], [$, 	, S], [	, S, 	], [S, 	, SaB], [	, SaB, 			], [SaB, 			, S𝜖], [			, S𝜖, 	], [S𝜖, 	, B]]

>> Noun Phrases are: 
[Example-2, : LL(1,    Step, b, a	b	c, 			S𝜖 	B]

>> Named Entities are: 
[('3', 'CARDINAL')]


============================ Sentence 214 =============================

		BbC		 	C				   SaB | ϵ 


>> Tokens are: 
[		, BbC, 		 	, C, 				   , SaB, |, ϵ] 

>> PoS Tags are: 
[('\t\t', 'SPACE'), ('B\uf0e0bC', 'PART'), ('\t\t \t', 'SPACE'), ('C', 'PROPN'), ('\t\t\t\t   ', 'SPACE'), ('S\uf0e0aB', 'PROPN'), ('|', 'ADV'), ('ϵ', 'NOUN')] 

>> Dependency Tags are: 
[('\t\t', 'nmod'), ('B\uf0e0bC', 'nummod'), ('\t\t \t', 'compound'), ('C', 'ROOT'), ('\t\t\t\t   ', 'compound'), ('S\uf0e0aB', 'appos'), ('|', 'advmod'), ('ϵ', 'appos')]

>> Bigrams: 
[[		, BbC], [BbC, 		 	], [		 	, C], [C, 				   ], [				   , SaB], [SaB, |], [|, ϵ]]

>> Trigrams: 
[[		, BbC, 		 	], [BbC, 		 	, C], [		 	, C, 				   ], [C, 				   , SaB], [				   , SaB, |], [SaB, |, ϵ]]

>> Noun Phrases are: 
[		BbC		 	C, 				   SaB, ϵ]

>> Named Entities are: 
[]


============================ Sentence 215 =============================

	BbC | ϵ CcS | ϵ 	 	NT	First 	Follow  	S	{a}	{$} 	B	{b,𝜖}	{$} 	C	{c,𝜖}	{$}   


>> Tokens are: 
[	, BbC, |, ϵ, CcS, |, ϵ, 	 	, NT, 	, 	, Follow,  	, S, 	, {, }, 	, {, $, }, 	, B, 	, {, b,𝜖, }, 	, {, $, }, 	, C, 	, {, c,𝜖, }, 	, {, $, },  ] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('B\uf0e0bC', 'PUNCT'), ('|', 'NOUN'), ('ϵ', 'NOUN'), ('C\uf0e0cS', 'NUM'), ('|', 'NOUN'), ('ϵ', 'NUM'), ('\t \t', 'SPACE'), ('NT', 'PROPN'), ('\t', 'SPACE'), ('\t', 'SPACE'), ('Follow', 'PROPN'), (' \t', 'SPACE'), ('S', 'PROPN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('$', 'SYM'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('B', 'PROPN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('b,𝜖', 'NOUN'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('$', 'SYM'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('C', 'PROPN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('c,𝜖', 'INTJ'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('$', 'SYM'), ('}', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('B\uf0e0bC', 'punct'), ('|', 'nmod'), ('ϵ', 'appos'), ('C\uf0e0cS', 'punct'), ('|', 'appos'), ('ϵ', 'punct'), ('\t \t', 'compound'), ('NT', 'compound'), ('\t', 'compound'), ('\t', 'compound'), ('Follow', 'compound'), (' \t', 'compound'), ('S', 'compound'), ('\t', 'appos'), ('{', 'punct'), ('}', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('$', 'nmod'), ('}', 'punct'), ('\t', 'compound'), ('B', 'compound'), ('\t', 'nmod'), ('{', 'punct'), ('b,𝜖', 'nmod'), ('}', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('$', 'nmod'), ('}', 'punct'), ('\t', 'compound'), ('C', 'compound'), ('\t', 'appos'), ('{', 'punct'), ('c,𝜖', 'npadvmod'), ('}', 'punct'), ('\t', 'conj'), ('{', 'punct'), ('$', 'appos'), ('}', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[	, BbC], [BbC, |], [|, ϵ], [ϵ, CcS], [CcS, |], [|, ϵ], [ϵ, 	 	], [	 	, NT], [NT, 	], [	, 	], [	, Follow], [Follow,  	], [ 	, S], [S, 	], [	, {], [{, }], [}, 	], [	, {], [{, $], [$, }], [}, 	], [	, B], [B, 	], [	, {], [{, b,𝜖], [b,𝜖, }], [}, 	], [	, {], [{, $], [$, }], [}, 	], [	, C], [C, 	], [	, {], [{, c,𝜖], [c,𝜖, }], [}, 	], [	, {], [{, $], [$, }], [},  ]]

>> Trigrams: 
[[	, BbC, |], [BbC, |, ϵ], [|, ϵ, CcS], [ϵ, CcS, |], [CcS, |, ϵ], [|, ϵ, 	 	], [ϵ, 	 	, NT], [	 	, NT, 	], [NT, 	, 	], [	, 	, Follow], [	, Follow,  	], [Follow,  	, S], [ 	, S, 	], [S, 	, {], [	, {, }], [{, }, 	], [}, 	, {], [	, {, $], [{, $, }], [$, }, 	], [}, 	, B], [	, B, 	], [B, 	, {], [	, {, b,𝜖], [{, b,𝜖, }], [b,𝜖, }, 	], [}, 	, {], [	, {, $], [{, $, }], [$, }, 	], [}, 	, C], [	, C, 	], [C, 	, {], [	, {, c,𝜖], [{, c,𝜖, }], [c,𝜖, }, 	], [}, 	, {], [	, {, $], [{, $, }], [$, },  ]]

>> Noun Phrases are: 
[| ϵ, |]

>> Named Entities are: 
[('First', 'ORDINAL')]


============================ Sentence 216 =============================

Rule: 2 A  a = first() M[A,a] = A     Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[Rule, :, 2, A,  , =, (, ), M[A, ,, ], =, A,     , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('Rule', 'NOUN'), (':', 'PUNCT'), ('2', 'NUM'), ('A\uf0e0', 'NOUN'), (' ', 'SPACE'), ('=', 'PUNCT'), ('(', 'PUNCT'), (')', 'PUNCT'), ('M[A', 'INTJ'), (',', 'PUNCT'), (']', 'PUNCT'), ('=', 'PUNCT'), ('A\uf0e0', 'ADV'), ('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Rule', 'nsubj'), (':', 'punct'), ('2', 'nummod'), ('A\uf0e0', 'appos'), (' ', 'prep'), ('=', 'punct'), ('(', 'punct'), (')', 'punct'), ('M[A', 'prep'), (',', 'punct'), (']', 'dep'), ('=', 'punct'), ('A\uf0e0', 'appos'), ('    ', 'compound'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'npadvmod'), ('#', 'nmod'), ('3130006', 'appos'), ('(', 'punct'), ('PS', 'nsubj'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'parataxis'), ('  ', 'nummod'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'appos'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[Rule, :], [:, 2], [2, A], [A,  ], [ , =], [=, (], [(, )], [), M[A], [M[A, ,], [,, ]], [], =], [=, A], [A,     ], [    , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[Rule, :, 2], [:, 2, A], [2, A,  ], [A,  , =], [ , =, (], [=, (, )], [(, ), M[A], [), M[A, ,], [M[A, ,, ]], [,, ], =], [], =, A], [=, A,     ], [A,     , Prof.], [    , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[Rule, 2 A, PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('2', 'CARDINAL'), ('first', 'ORDINAL'), ('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 217 =============================

Example-2: LL(1) parsing    Step 3: Prepare predictive parsing table      B𝜖 b=FOLLOW(B)={ $ } M[B,$]=B𝜖  	NT	Input Symbol			 		a	b	c	$ 	S	SaB			S𝜖 	B		BbC		 


>> Tokens are: 
[Example-2, :, LL(1, ), parsing,    , Step, 3, :, Prepare, predictive, parsing, table,      , B𝜖, b, =, FOLLOW(B)=, {, $, }, M[B,$]=B𝜖,  	, NT, 	, Input, Symbol, 			 		, 	, b, 	, c, 	, $, 	, S, 	, SaB, 			, S𝜖, 	, B, 		, BbC, 		] 

>> PoS Tags are: 
[('Example-2', 'PROPN'), (':', 'PUNCT'), ('LL(1', 'PROPN'), (')', 'PUNCT'), ('parsing', 'VERB'), ('   ', 'SPACE'), ('Step', 'NOUN'), ('3', 'NUM'), (':', 'PUNCT'), ('Prepare', 'VERB'), ('predictive', 'ADJ'), ('parsing', 'VERB'), ('table', 'NOUN'), ('     ', 'SPACE'), ('B\uf0e0𝜖', 'VERB'), ('b', 'X'), ('=', 'SYM'), ('FOLLOW(B)=', 'PROPN'), ('{', 'PUNCT'), ('$', 'SYM'), ('}', 'PUNCT'), ('M[B,$]=B\uf0e0𝜖', 'PROPN'), (' \t', 'SPACE'), ('NT', 'PROPN'), ('\t', 'SPACE'), ('Input', 'PROPN'), ('Symbol', 'PROPN'), ('\t\t\t \t\t', 'SPACE'), ('\t', 'SPACE'), ('b', 'PROPN'), ('\t', 'SPACE'), ('c', 'NOUN'), ('\t', 'SPACE'), ('$', 'SYM'), ('\t', 'SPACE'), ('S', 'PROPN'), ('\t', 'SPACE'), ('S\uf0e0aB', 'SYM'), ('\t\t\t', 'SPACE'), ('S\uf0e0𝜖', 'PROPN'), ('\t', 'SPACE'), ('B', 'PROPN'), ('\t\t', 'SPACE'), ('B\uf0e0bC', 'X'), ('\t\t', 'SPACE')] 

>> Dependency Tags are: 
[('Example-2', 'nsubj'), (':', 'punct'), ('LL(1', 'appos'), (')', 'punct'), ('parsing', 'advcl'), ('   ', 'nummod'), ('Step', 'dobj'), ('3', 'nummod'), (':', 'punct'), ('Prepare', 'ROOT'), ('predictive', 'amod'), ('parsing', 'xcomp'), ('table', 'compound'), ('     ', 'dobj'), ('B\uf0e0𝜖', 'dep'), ('b', 'meta'), ('=', 'punct'), ('FOLLOW(B)=', 'dep'), ('{', 'punct'), ('$', 'nmod'), ('}', 'punct'), ('M[B,$]=B\uf0e0𝜖', 'appos'), (' \t', 'nummod'), ('NT', 'appos'), ('\t', 'compound'), ('Input', 'compound'), ('Symbol', 'compound'), ('\t\t\t \t\t', 'dep'), ('\t', 'compound'), ('b', 'compound'), ('\t', 'nmod'), ('c', 'nmod'), ('\t', 'dobj'), ('$', 'nmod'), ('\t', 'compound'), ('S', 'compound'), ('\t', 'dobj'), ('S\uf0e0aB', 'punct'), ('\t\t\t', 'compound'), ('S\uf0e0𝜖', 'compound'), ('\t', 'compound'), ('B', 'appos'), ('\t\t', 'appos'), ('B\uf0e0bC', 'punct'), ('\t\t', 'prep')]

>> Bigrams: 
[[Example-2, :], [:, LL(1], [LL(1, )], [), parsing], [parsing,    ], [   , Step], [Step, 3], [3, :], [:, Prepare], [Prepare, predictive], [predictive, parsing], [parsing, table], [table,      ], [     , B𝜖], [B𝜖, b], [b, =], [=, FOLLOW(B)=], [FOLLOW(B)=, {], [{, $], [$, }], [}, M[B,$]=B𝜖], [M[B,$]=B𝜖,  	], [ 	, NT], [NT, 	], [	, Input], [Input, Symbol], [Symbol, 			 		], [			 		, 	], [	, b], [b, 	], [	, c], [c, 	], [	, $], [$, 	], [	, S], [S, 	], [	, SaB], [SaB, 			], [			, S𝜖], [S𝜖, 	], [	, B], [B, 		], [		, BbC], [BbC, 		]]

>> Trigrams: 
[[Example-2, :, LL(1], [:, LL(1, )], [LL(1, ), parsing], [), parsing,    ], [parsing,    , Step], [   , Step, 3], [Step, 3, :], [3, :, Prepare], [:, Prepare, predictive], [Prepare, predictive, parsing], [predictive, parsing, table], [parsing, table,      ], [table,      , B𝜖], [     , B𝜖, b], [B𝜖, b, =], [b, =, FOLLOW(B)=], [=, FOLLOW(B)=, {], [FOLLOW(B)=, {, $], [{, $, }], [$, }, M[B,$]=B𝜖], [}, M[B,$]=B𝜖,  	], [M[B,$]=B𝜖,  	, NT], [ 	, NT, 	], [NT, 	, Input], [	, Input, Symbol], [Input, Symbol, 			 		], [Symbol, 			 		, 	], [			 		, 	, b], [	, b, 	], [b, 	, c], [	, c, 	], [c, 	, $], [	, $, 	], [$, 	, S], [	, S, 	], [S, 	, SaB], [	, SaB, 			], [SaB, 			, S𝜖], [			, S𝜖, 	], [S𝜖, 	, B], [	, B, 		], [B, 		, BbC], [		, BbC, 		]]

>> Noun Phrases are: 
[Example-2, : LL(1,    Step, $ } M[B,$]=B𝜖,  	NT, 			S𝜖 	B]

>> Named Entities are: 
[('3', 'CARDINAL')]


============================ Sentence 218 =============================

B𝜖 	C				   SaB | ϵ 


>> Tokens are: 
[B𝜖, 	, C, 				   , SaB, |, ϵ] 

>> PoS Tags are: 
[('B\uf0e0𝜖', 'PROPN'), ('\t', 'SPACE'), ('C', 'PROPN'), ('\t\t\t\t   ', 'SPACE'), ('S\uf0e0aB', 'NUM'), ('|', 'ADV'), ('ϵ', 'NOUN')] 

>> Dependency Tags are: 
[('B\uf0e0𝜖', 'compound'), ('\t', 'compound'), ('C', 'dep'), ('\t\t\t\t   ', 'compound'), ('S\uf0e0aB', 'ROOT'), ('|', 'advmod'), ('ϵ', 'punct')]

>> Bigrams: 
[[B𝜖, 	], [	, C], [C, 				   ], [				   , SaB], [SaB, |], [|, ϵ]]

>> Trigrams: 
[[B𝜖, 	, C], [	, C, 				   ], [C, 				   , SaB], [				   , SaB, |], [SaB, |, ϵ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 219 =============================

	BbC | ϵ CcS | ϵ 	 	NT	First 	Follow  	S	{a}	{$} 	B	{b,𝜖}	{$} 	C	{c,𝜖}	{$}  Rule: 3 A  b = follow(A) M[A,b] = A     Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[	, BbC, |, ϵ, CcS, |, ϵ, 	 	, NT, 	, 	, Follow,  	, S, 	, {, }, 	, {, $, }, 	, B, 	, {, b,𝜖, }, 	, {, $, }, 	, C, 	, {, c,𝜖, }, 	, {, $, },  , Rule, :, 3, A,  , b, =, follow(A, ), M[A, ,, b, ], =, A,     , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('B\uf0e0bC', 'PUNCT'), ('|', 'NOUN'), ('ϵ', 'NOUN'), ('C\uf0e0cS', 'NUM'), ('|', 'NOUN'), ('ϵ', 'NUM'), ('\t \t', 'SPACE'), ('NT', 'PROPN'), ('\t', 'SPACE'), ('\t', 'SPACE'), ('Follow', 'PROPN'), (' \t', 'SPACE'), ('S', 'PROPN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('$', 'SYM'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('B', 'PROPN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('b,𝜖', 'NOUN'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('$', 'SYM'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('C', 'PROPN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('c,𝜖', 'INTJ'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('$', 'SYM'), ('}', 'PUNCT'), (' ', 'SPACE'), ('Rule', 'NOUN'), (':', 'PUNCT'), ('3', 'NUM'), ('A\uf0e0', 'NOUN'), (' ', 'SPACE'), ('b', 'X'), ('=', 'SYM'), ('follow(A', 'NUM'), (')', 'PUNCT'), ('M[A', 'NOUN'), (',', 'PUNCT'), ('b', 'X'), (']', 'PUNCT'), ('=', 'PUNCT'), ('A\uf0e0', 'ADV'), ('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('\t', 'nsubj'), ('B\uf0e0bC', 'punct'), ('|', 'nmod'), ('ϵ', 'appos'), ('C\uf0e0cS', 'punct'), ('|', 'appos'), ('ϵ', 'punct'), ('\t \t', 'compound'), ('NT', 'compound'), ('\t', 'compound'), ('\t', 'compound'), ('Follow', 'compound'), (' \t', 'compound'), ('S', 'compound'), ('\t', 'appos'), ('{', 'punct'), ('}', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('$', 'nmod'), ('}', 'punct'), ('\t', 'compound'), ('B', 'compound'), ('\t', 'nmod'), ('{', 'punct'), ('b,𝜖', 'nmod'), ('}', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('$', 'nmod'), ('}', 'punct'), ('\t', 'compound'), ('C', 'compound'), ('\t', 'appos'), ('{', 'punct'), ('c,𝜖', 'npadvmod'), ('}', 'punct'), ('\t', 'conj'), ('{', 'punct'), ('$', 'appos'), ('}', 'punct'), (' ', 'appos'), ('Rule', 'nsubj'), (':', 'punct'), ('3', 'nummod'), ('A\uf0e0', 'appos'), (' ', 'appos'), ('b', 'prep'), ('=', 'appos'), ('follow(A', 'prep'), (')', 'punct'), ('M[A', 'appos'), (',', 'punct'), ('b', 'prep'), (']', 'punct'), ('=', 'punct'), ('A\uf0e0', 'appos'), ('    ', 'compound'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'npadvmod'), ('#', 'nmod'), ('3130006', 'appos'), ('(', 'punct'), ('PS', 'nsubj'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'parataxis'), ('  ', 'conj'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'appos'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[	, BbC], [BbC, |], [|, ϵ], [ϵ, CcS], [CcS, |], [|, ϵ], [ϵ, 	 	], [	 	, NT], [NT, 	], [	, 	], [	, Follow], [Follow,  	], [ 	, S], [S, 	], [	, {], [{, }], [}, 	], [	, {], [{, $], [$, }], [}, 	], [	, B], [B, 	], [	, {], [{, b,𝜖], [b,𝜖, }], [}, 	], [	, {], [{, $], [$, }], [}, 	], [	, C], [C, 	], [	, {], [{, c,𝜖], [c,𝜖, }], [}, 	], [	, {], [{, $], [$, }], [},  ], [ , Rule], [Rule, :], [:, 3], [3, A], [A,  ], [ , b], [b, =], [=, follow(A], [follow(A, )], [), M[A], [M[A, ,], [,, b], [b, ]], [], =], [=, A], [A,     ], [    , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[	, BbC, |], [BbC, |, ϵ], [|, ϵ, CcS], [ϵ, CcS, |], [CcS, |, ϵ], [|, ϵ, 	 	], [ϵ, 	 	, NT], [	 	, NT, 	], [NT, 	, 	], [	, 	, Follow], [	, Follow,  	], [Follow,  	, S], [ 	, S, 	], [S, 	, {], [	, {, }], [{, }, 	], [}, 	, {], [	, {, $], [{, $, }], [$, }, 	], [}, 	, B], [	, B, 	], [B, 	, {], [	, {, b,𝜖], [{, b,𝜖, }], [b,𝜖, }, 	], [}, 	, {], [	, {, $], [{, $, }], [$, }, 	], [}, 	, C], [	, C, 	], [C, 	, {], [	, {, c,𝜖], [{, c,𝜖, }], [c,𝜖, }, 	], [}, 	, {], [	, {, $], [{, $, }], [$, },  ], [},  , Rule], [ , Rule, :], [Rule, :, 3], [:, 3, A], [3, A,  ], [A,  , b], [ , b, =], [b, =, follow(A], [=, follow(A, )], [follow(A, ), M[A], [), M[A, ,], [M[A, ,, b], [,, b, ]], [b, ], =], [], =, A], [=, A,     ], [A,     , Prof.], [    , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[| ϵ, |, 3 A, M[A, PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('First', 'ORDINAL'), ('3', 'CARDINAL'), ('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 220 =============================

Example-2: LL(1) parsing    Step 3: Prepare predictive parsing table      CcS a=FIRST(cS)={ c } M[C,c]=CcS  	 


>> Tokens are: 
[Example-2, :, LL(1, ), parsing,    , Step, 3, :, Prepare, predictive, parsing, table,      , CcS, =, FIRST(cS)=, {, c, }, M[C, ,, c]=CcS,  	] 

>> PoS Tags are: 
[('Example-2', 'PROPN'), (':', 'PUNCT'), ('LL(1', 'PROPN'), (')', 'PUNCT'), ('parsing', 'VERB'), ('   ', 'SPACE'), ('Step', 'NOUN'), ('3', 'NUM'), (':', 'PUNCT'), ('Prepare', 'VERB'), ('predictive', 'ADJ'), ('parsing', 'VERB'), ('table', 'NOUN'), ('     ', 'SPACE'), ('C\uf0e0cS', 'PUNCT'), ('=', 'PUNCT'), ('FIRST(cS)=', 'PROPN'), ('{', 'PUNCT'), ('c', 'NOUN'), ('}', 'PUNCT'), ('M[C', 'NOUN'), (',', 'PUNCT'), ('c]=C\uf0e0cS', 'PROPN'), (' \t', 'SPACE')] 

>> Dependency Tags are: 
[('Example-2', 'nsubj'), (':', 'punct'), ('LL(1', 'appos'), (')', 'punct'), ('parsing', 'advcl'), ('   ', 'nummod'), ('Step', 'dobj'), ('3', 'nummod'), (':', 'punct'), ('Prepare', 'ROOT'), ('predictive', 'amod'), ('parsing', 'xcomp'), ('table', 'compound'), ('     ', 'dobj'), ('C\uf0e0cS', 'punct'), ('=', 'punct'), ('FIRST(cS)=', 'nmod'), ('{', 'punct'), ('c', 'nmod'), ('}', 'punct'), ('M[C', 'pobj'), (',', 'punct'), ('c]=C\uf0e0cS', 'appos'), (' \t', 'dobj')]

>> Bigrams: 
[[Example-2, :], [:, LL(1], [LL(1, )], [), parsing], [parsing,    ], [   , Step], [Step, 3], [3, :], [:, Prepare], [Prepare, predictive], [predictive, parsing], [parsing, table], [table,      ], [     , CcS], [CcS, =], [=, FIRST(cS)=], [FIRST(cS)=, {], [{, c], [c, }], [}, M[C], [M[C, ,], [,, c]=CcS], [c]=CcS,  	]]

>> Trigrams: 
[[Example-2, :, LL(1], [:, LL(1, )], [LL(1, ), parsing], [), parsing,    ], [parsing,    , Step], [   , Step, 3], [Step, 3, :], [3, :, Prepare], [:, Prepare, predictive], [Prepare, predictive, parsing], [predictive, parsing, table], [parsing, table,      ], [table,      , CcS], [     , CcS, =], [CcS, =, FIRST(cS)=], [=, FIRST(cS)=, {], [FIRST(cS)=, {, c], [{, c, }], [c, }, M[C], [}, M[C, ,], [M[C, ,, c]=CcS], [,, c]=CcS,  	]]

>> Noun Phrases are: 
[Example-2, : LL(1,    Step, =FIRST(cS)={ c } M[C, c]=CcS]

>> Named Entities are: 
[('3', 'CARDINAL')]


============================ Sentence 221 =============================

NT	Input Symbol			 		a	b	c	$ 	S	SaB			S𝜖 	B		BbC		 


>> Tokens are: 
[NT, 	, Input, Symbol, 			 		, 	, b, 	, c, 	, $, 	, S, 	, SaB, 			, S𝜖, 	, B, 		, BbC, 		] 

>> PoS Tags are: 
[('NT', 'PROPN'), ('\t', 'SPACE'), ('Input', 'PROPN'), ('Symbol', 'PROPN'), ('\t\t\t \t\t', 'SPACE'), ('\t', 'SPACE'), ('b', 'PROPN'), ('\t', 'SPACE'), ('c', 'NOUN'), ('\t', 'SPACE'), ('$', 'SYM'), ('\t', 'SPACE'), ('S', 'PROPN'), ('\t', 'SPACE'), ('S\uf0e0aB', 'SYM'), ('\t\t\t', 'SPACE'), ('S\uf0e0𝜖', 'PROPN'), ('\t', 'SPACE'), ('B', 'PROPN'), ('\t\t', 'SPACE'), ('B\uf0e0bC', 'X'), ('\t\t', 'SPACE')] 

>> Dependency Tags are: 
[('NT', 'compound'), ('\t', 'compound'), ('Input', 'compound'), ('Symbol', 'compound'), ('\t\t\t \t\t', 'ROOT'), ('\t', 'compound'), ('b', 'compound'), ('\t', 'nmod'), ('c', 'nmod'), ('\t', 'dobj'), ('$', 'nmod'), ('\t', 'compound'), ('S', 'compound'), ('\t', 'dobj'), ('S\uf0e0aB', 'punct'), ('\t\t\t', 'compound'), ('S\uf0e0𝜖', 'compound'), ('\t', 'compound'), ('B', 'appos'), ('\t\t', 'appos'), ('B\uf0e0bC', 'punct'), ('\t\t', 'prep')]

>> Bigrams: 
[[NT, 	], [	, Input], [Input, Symbol], [Symbol, 			 		], [			 		, 	], [	, b], [b, 	], [	, c], [c, 	], [	, $], [$, 	], [	, S], [S, 	], [	, SaB], [SaB, 			], [			, S𝜖], [S𝜖, 	], [	, B], [B, 		], [		, BbC], [BbC, 		]]

>> Trigrams: 
[[NT, 	, Input], [	, Input, Symbol], [Input, Symbol, 			 		], [Symbol, 			 		, 	], [			 		, 	, b], [	, b, 	], [b, 	, c], [	, c, 	], [c, 	, $], [	, $, 	], [$, 	, S], [	, S, 	], [S, 	, SaB], [	, SaB, 			], [SaB, 			, S𝜖], [			, S𝜖, 	], [S𝜖, 	, B], [	, B, 		], [B, 		, BbC], [		, BbC, 		]]

>> Noun Phrases are: 
[			S𝜖 	B]

>> Named Entities are: 
[]


============================ Sentence 222 =============================

B𝜖 	C			CcS	   SaB | ϵ 


>> Tokens are: 
[B𝜖, 	, C, 			, CcS, 	   , SaB, |, ϵ] 

>> PoS Tags are: 
[('B\uf0e0𝜖', 'PROPN'), ('\t', 'SPACE'), ('C', 'PROPN'), ('\t\t\t', 'SPACE'), ('C\uf0e0cS', 'PUNCT'), ('\t   ', 'SPACE'), ('S\uf0e0aB', 'X'), ('|', 'NOUN'), ('ϵ', 'NOUN')] 

>> Dependency Tags are: 
[('B\uf0e0𝜖', 'compound'), ('\t', 'compound'), ('C', 'compound'), ('\t\t\t', 'nmod'), ('C\uf0e0cS', 'punct'), ('\t   ', 'ROOT'), ('S\uf0e0aB', 'punct'), ('|', 'advmod'), ('ϵ', 'punct')]

>> Bigrams: 
[[B𝜖, 	], [	, C], [C, 			], [			, CcS], [CcS, 	   ], [	   , SaB], [SaB, |], [|, ϵ]]

>> Trigrams: 
[[B𝜖, 	, C], [	, C, 			], [C, 			, CcS], [			, CcS, 	   ], [CcS, 	   , SaB], [	   , SaB, |], [SaB, |, ϵ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 223 =============================

	BbC | ϵ CcS | ϵ 	 	NT	First 	Follow  	S	{a}	{$} 	B	{b,𝜖}	{$} 	C	{c,𝜖}	{$}   


>> Tokens are: 
[	, BbC, |, ϵ, CcS, |, ϵ, 	 	, NT, 	, 	, Follow,  	, S, 	, {, }, 	, {, $, }, 	, B, 	, {, b,𝜖, }, 	, {, $, }, 	, C, 	, {, c,𝜖, }, 	, {, $, },  ] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('B\uf0e0bC', 'PUNCT'), ('|', 'NOUN'), ('ϵ', 'NOUN'), ('C\uf0e0cS', 'NUM'), ('|', 'NOUN'), ('ϵ', 'NUM'), ('\t \t', 'SPACE'), ('NT', 'PROPN'), ('\t', 'SPACE'), ('\t', 'SPACE'), ('Follow', 'PROPN'), (' \t', 'SPACE'), ('S', 'PROPN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('$', 'SYM'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('B', 'PROPN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('b,𝜖', 'NOUN'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('$', 'SYM'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('C', 'PROPN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('c,𝜖', 'INTJ'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('$', 'SYM'), ('}', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('B\uf0e0bC', 'punct'), ('|', 'nmod'), ('ϵ', 'appos'), ('C\uf0e0cS', 'punct'), ('|', 'appos'), ('ϵ', 'punct'), ('\t \t', 'compound'), ('NT', 'compound'), ('\t', 'compound'), ('\t', 'compound'), ('Follow', 'compound'), (' \t', 'compound'), ('S', 'compound'), ('\t', 'appos'), ('{', 'punct'), ('}', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('$', 'nmod'), ('}', 'punct'), ('\t', 'compound'), ('B', 'compound'), ('\t', 'nmod'), ('{', 'punct'), ('b,𝜖', 'nmod'), ('}', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('$', 'nmod'), ('}', 'punct'), ('\t', 'compound'), ('C', 'compound'), ('\t', 'appos'), ('{', 'punct'), ('c,𝜖', 'npadvmod'), ('}', 'punct'), ('\t', 'conj'), ('{', 'punct'), ('$', 'appos'), ('}', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[	, BbC], [BbC, |], [|, ϵ], [ϵ, CcS], [CcS, |], [|, ϵ], [ϵ, 	 	], [	 	, NT], [NT, 	], [	, 	], [	, Follow], [Follow,  	], [ 	, S], [S, 	], [	, {], [{, }], [}, 	], [	, {], [{, $], [$, }], [}, 	], [	, B], [B, 	], [	, {], [{, b,𝜖], [b,𝜖, }], [}, 	], [	, {], [{, $], [$, }], [}, 	], [	, C], [C, 	], [	, {], [{, c,𝜖], [c,𝜖, }], [}, 	], [	, {], [{, $], [$, }], [},  ]]

>> Trigrams: 
[[	, BbC, |], [BbC, |, ϵ], [|, ϵ, CcS], [ϵ, CcS, |], [CcS, |, ϵ], [|, ϵ, 	 	], [ϵ, 	 	, NT], [	 	, NT, 	], [NT, 	, 	], [	, 	, Follow], [	, Follow,  	], [Follow,  	, S], [ 	, S, 	], [S, 	, {], [	, {, }], [{, }, 	], [}, 	, {], [	, {, $], [{, $, }], [$, }, 	], [}, 	, B], [	, B, 	], [B, 	, {], [	, {, b,𝜖], [{, b,𝜖, }], [b,𝜖, }, 	], [}, 	, {], [	, {, $], [{, $, }], [$, }, 	], [}, 	, C], [	, C, 	], [C, 	, {], [	, {, c,𝜖], [{, c,𝜖, }], [c,𝜖, }, 	], [}, 	, {], [	, {, $], [{, $, }], [$, },  ]]

>> Noun Phrases are: 
[| ϵ, |]

>> Named Entities are: 
[('First', 'ORDINAL')]


============================ Sentence 224 =============================

Rule: 2 A  a = first() M[A,a] = A     Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[Rule, :, 2, A,  , =, (, ), M[A, ,, ], =, A,     , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('Rule', 'NOUN'), (':', 'PUNCT'), ('2', 'NUM'), ('A\uf0e0', 'NOUN'), (' ', 'SPACE'), ('=', 'PUNCT'), ('(', 'PUNCT'), (')', 'PUNCT'), ('M[A', 'INTJ'), (',', 'PUNCT'), (']', 'PUNCT'), ('=', 'PUNCT'), ('A\uf0e0', 'ADV'), ('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Rule', 'nsubj'), (':', 'punct'), ('2', 'nummod'), ('A\uf0e0', 'appos'), (' ', 'prep'), ('=', 'punct'), ('(', 'punct'), (')', 'punct'), ('M[A', 'prep'), (',', 'punct'), (']', 'dep'), ('=', 'punct'), ('A\uf0e0', 'appos'), ('    ', 'compound'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'npadvmod'), ('#', 'nmod'), ('3130006', 'appos'), ('(', 'punct'), ('PS', 'nsubj'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'parataxis'), ('  ', 'nummod'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'appos'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[Rule, :], [:, 2], [2, A], [A,  ], [ , =], [=, (], [(, )], [), M[A], [M[A, ,], [,, ]], [], =], [=, A], [A,     ], [    , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[Rule, :, 2], [:, 2, A], [2, A,  ], [A,  , =], [ , =, (], [=, (, )], [(, ), M[A], [), M[A, ,], [M[A, ,, ]], [,, ], =], [], =, A], [=, A,     ], [A,     , Prof.], [    , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[Rule, 2 A, PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('2', 'CARDINAL'), ('first', 'ORDINAL'), ('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 225 =============================

Example-2: LL(1) parsing    Step 3: Prepare predictive parsing table      C𝜖 b=FOLLOW(C)={ $ } M[C,$]=C𝜖  	NT	Input Symbol			 		a	b	c	$ 	S	SaB	Error	Error	S𝜖 	B	Error	BbB 


>> Tokens are: 
[Example-2, :, LL(1, ), parsing,    , Step, 3, :, Prepare, predictive, parsing, table,      , C𝜖, b, =, FOLLOW(C)=, {, $, }, M[C,$]=C𝜖,  	, NT, 	, Input, Symbol, 			 		, 	, b, 	, c, 	, $, 	, S, 	, SaB, 	, Error, 	, Error, 	, S𝜖, 	, B, 	, Error, 	, BbB] 

>> PoS Tags are: 
[('Example-2', 'PROPN'), (':', 'PUNCT'), ('LL(1', 'PROPN'), (')', 'PUNCT'), ('parsing', 'VERB'), ('   ', 'SPACE'), ('Step', 'NOUN'), ('3', 'NUM'), (':', 'PUNCT'), ('Prepare', 'VERB'), ('predictive', 'ADJ'), ('parsing', 'VERB'), ('table', 'NOUN'), ('     ', 'SPACE'), ('C\uf0e0𝜖', 'NOUN'), ('b', 'NOUN'), ('=', 'PUNCT'), ('FOLLOW(C)=', 'NUM'), ('{', 'PUNCT'), ('$', 'SYM'), ('}', 'PUNCT'), ('M[C,$]=C\uf0e0𝜖', 'NOUN'), (' \t', 'SPACE'), ('NT', 'PROPN'), ('\t', 'SPACE'), ('Input', 'PROPN'), ('Symbol', 'PROPN'), ('\t\t\t \t\t', 'SPACE'), ('\t', 'SPACE'), ('b', 'PROPN'), ('\t', 'SPACE'), ('c', 'NOUN'), ('\t', 'SPACE'), ('$', 'SYM'), ('\t', 'SPACE'), ('S', 'PROPN'), ('\t', 'SPACE'), ('S\uf0e0aB', 'PROPN'), ('\t', 'SPACE'), ('Error', 'PROPN'), ('\t', 'SPACE'), ('Error', 'PROPN'), ('\t', 'SPACE'), ('S\uf0e0𝜖', 'PROPN'), ('\t', 'SPACE'), ('B', 'PROPN'), ('\t', 'SPACE'), ('Error', 'PROPN'), ('\t', 'SPACE'), ('B\uf0e0bB', 'PUNCT')] 

>> Dependency Tags are: 
[('Example-2', 'nsubj'), (':', 'punct'), ('LL(1', 'appos'), (')', 'punct'), ('parsing', 'advcl'), ('   ', 'nummod'), ('Step', 'dobj'), ('3', 'nummod'), (':', 'punct'), ('Prepare', 'ROOT'), ('predictive', 'amod'), ('parsing', 'xcomp'), ('table', 'compound'), ('     ', 'compound'), ('C\uf0e0𝜖', 'dobj'), ('b', 'dative'), ('=', 'dobj'), ('FOLLOW(C)=', 'dep'), ('{', 'punct'), ('$', 'nmod'), ('}', 'punct'), ('M[C,$]=C\uf0e0𝜖', 'dative'), (' \t', 'dobj'), ('NT', 'npadvmod'), ('\t', 'compound'), ('Input', 'compound'), ('Symbol', 'compound'), ('\t\t\t \t\t', 'dative'), ('\t', 'compound'), ('b', 'compound'), ('\t', 'nmod'), ('c', 'punct'), ('\t', 'nmod'), ('$', 'nmod'), ('\t', 'compound'), ('S', 'compound'), ('\t', 'nmod'), ('S\uf0e0aB', 'cc'), ('\t', 'compound'), ('Error', 'compound'), ('\t', 'compound'), ('Error', 'compound'), ('\t', 'compound'), ('S\uf0e0𝜖', 'compound'), ('\t', 'compound'), ('B', 'compound'), ('\t', 'compound'), ('Error', 'compound'), ('\t', 'dobj'), ('B\uf0e0bB', 'punct')]

>> Bigrams: 
[[Example-2, :], [:, LL(1], [LL(1, )], [), parsing], [parsing,    ], [   , Step], [Step, 3], [3, :], [:, Prepare], [Prepare, predictive], [predictive, parsing], [parsing, table], [table,      ], [     , C𝜖], [C𝜖, b], [b, =], [=, FOLLOW(C)=], [FOLLOW(C)=, {], [{, $], [$, }], [}, M[C,$]=C𝜖], [M[C,$]=C𝜖,  	], [ 	, NT], [NT, 	], [	, Input], [Input, Symbol], [Symbol, 			 		], [			 		, 	], [	, b], [b, 	], [	, c], [c, 	], [	, $], [$, 	], [	, S], [S, 	], [	, SaB], [SaB, 	], [	, Error], [Error, 	], [	, Error], [Error, 	], [	, S𝜖], [S𝜖, 	], [	, B], [B, 	], [	, Error], [Error, 	], [	, BbB]]

>> Trigrams: 
[[Example-2, :, LL(1], [:, LL(1, )], [LL(1, ), parsing], [), parsing,    ], [parsing,    , Step], [   , Step, 3], [Step, 3, :], [3, :, Prepare], [:, Prepare, predictive], [Prepare, predictive, parsing], [predictive, parsing, table], [parsing, table,      ], [table,      , C𝜖], [     , C𝜖, b], [C𝜖, b, =], [b, =, FOLLOW(C)=], [=, FOLLOW(C)=, {], [FOLLOW(C)=, {, $], [{, $, }], [$, }, M[C,$]=C𝜖], [}, M[C,$]=C𝜖,  	], [M[C,$]=C𝜖,  	, NT], [ 	, NT, 	], [NT, 	, Input], [	, Input, Symbol], [Input, Symbol, 			 		], [Symbol, 			 		, 	], [			 		, 	, b], [	, b, 	], [b, 	, c], [	, c, 	], [c, 	, $], [	, $, 	], [$, 	, S], [	, S, 	], [S, 	, SaB], [	, SaB, 	], [SaB, 	, Error], [	, Error, 	], [Error, 	, Error], [	, Error, 	], [Error, 	, S𝜖], [	, S𝜖, 	], [S𝜖, 	, B], [	, B, 	], [B, 	, Error], [	, Error, 	], [Error, 	, BbB]]

>> Noun Phrases are: 
[Example-2, : LL(1,    Step, table      C𝜖, b, FOLLOW(C)={ $ } M[C,$]=C𝜖]

>> Named Entities are: 
[('3', 'CARDINAL')]


============================ Sentence 226 =============================

	Error	B𝜖 	C	Error	Error	CcS 


>> Tokens are: 
[	, Error, 	, B𝜖, 	, C, 	, Error, 	, Error, 	, CcS] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('Error', 'PROPN'), ('\t', 'SPACE'), ('B\uf0e0𝜖', 'VERB'), ('\t', 'SPACE'), ('C', 'PROPN'), ('\t', 'SPACE'), ('Error', 'PROPN'), ('\t', 'SPACE'), ('Error', 'PROPN'), ('\t', 'SPACE'), ('C\uf0e0cS', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('Error', 'compound'), ('\t', 'nsubj'), ('B\uf0e0𝜖', 'ROOT'), ('\t', 'compound'), ('C', 'compound'), ('\t', 'compound'), ('Error', 'compound'), ('\t', 'compound'), ('Error', 'compound'), ('\t', 'dobj'), ('C\uf0e0cS', 'punct')]

>> Bigrams: 
[[	, Error], [Error, 	], [	, B𝜖], [B𝜖, 	], [	, C], [C, 	], [	, Error], [Error, 	], [	, Error], [Error, 	], [	, CcS]]

>> Trigrams: 
[[	, Error, 	], [Error, 	, B𝜖], [	, B𝜖, 	], [B𝜖, 	, C], [	, C, 	], [C, 	, Error], [	, Error, 	], [Error, 	, Error], [	, Error, 	], [Error, 	, CcS]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 227 =============================

	C𝜖   SaB | ϵ 


>> Tokens are: 
[	, C𝜖,   , SaB, |, ϵ] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('C\uf0e0𝜖', 'PROPN'), ('  ', 'SPACE'), ('S\uf0e0aB', 'X'), ('|', 'ADV'), ('ϵ', 'NOUN')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('C\uf0e0𝜖', 'ROOT'), ('  ', 'appos'), ('S\uf0e0aB', 'punct'), ('|', 'advmod'), ('ϵ', 'appos')]

>> Bigrams: 
[[	, C𝜖], [C𝜖,   ], [  , SaB], [SaB, |], [|, ϵ]]

>> Trigrams: 
[[	, C𝜖,   ], [C𝜖,   , SaB], [  , SaB, |], [SaB, |, ϵ]]

>> Noun Phrases are: 
[	C𝜖, ϵ]

>> Named Entities are: 
[]


============================ Sentence 228 =============================

	BbC | ϵ CcS | ϵ 	 	NT	First 	Follow  	S	{a}	{$} 	B	{b,𝜖}	{$} 	C	{c,𝜖}	{$}  Rule: 3 A  b = follow(A) M[A,b] = 


>> Tokens are: 
[	, BbC, |, ϵ, CcS, |, ϵ, 	 	, NT, 	, 	, Follow,  	, S, 	, {, }, 	, {, $, }, 	, B, 	, {, b,𝜖, }, 	, {, $, }, 	, C, 	, {, c,𝜖, }, 	, {, $, },  , Rule, :, 3, A,  , b, =, follow(A, ), M[A, ,, b, ], =] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('B\uf0e0bC', 'PUNCT'), ('|', 'NOUN'), ('ϵ', 'NOUN'), ('C\uf0e0cS', 'NUM'), ('|', 'NOUN'), ('ϵ', 'NUM'), ('\t \t', 'SPACE'), ('NT', 'PROPN'), ('\t', 'SPACE'), ('\t', 'SPACE'), ('Follow', 'PROPN'), (' \t', 'SPACE'), ('S', 'PROPN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('$', 'SYM'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('B', 'PROPN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('b,𝜖', 'NOUN'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('$', 'SYM'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('C', 'PROPN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('c,𝜖', 'INTJ'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('$', 'SYM'), ('}', 'PUNCT'), (' ', 'SPACE'), ('Rule', 'NOUN'), (':', 'PUNCT'), ('3', 'NUM'), ('A\uf0e0', 'NOUN'), (' ', 'SPACE'), ('b', 'X'), ('=', 'SYM'), ('follow(A', 'NUM'), (')', 'PUNCT'), ('M[A', 'NOUN'), (',', 'PUNCT'), ('b', 'X'), (']', 'PUNCT'), ('=', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'nsubj'), ('B\uf0e0bC', 'punct'), ('|', 'nmod'), ('ϵ', 'appos'), ('C\uf0e0cS', 'punct'), ('|', 'appos'), ('ϵ', 'punct'), ('\t \t', 'compound'), ('NT', 'compound'), ('\t', 'compound'), ('\t', 'compound'), ('Follow', 'compound'), (' \t', 'compound'), ('S', 'compound'), ('\t', 'appos'), ('{', 'punct'), ('}', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('$', 'nmod'), ('}', 'punct'), ('\t', 'compound'), ('B', 'compound'), ('\t', 'nmod'), ('{', 'punct'), ('b,𝜖', 'nmod'), ('}', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('$', 'nmod'), ('}', 'punct'), ('\t', 'compound'), ('C', 'compound'), ('\t', 'appos'), ('{', 'punct'), ('c,𝜖', 'npadvmod'), ('}', 'punct'), ('\t', 'conj'), ('{', 'punct'), ('$', 'appos'), ('}', 'punct'), (' ', 'appos'), ('Rule', 'ROOT'), (':', 'punct'), ('3', 'nummod'), ('A\uf0e0', 'appos'), (' ', 'appos'), ('b', 'prep'), ('=', 'appos'), ('follow(A', 'prep'), (')', 'punct'), ('M[A', 'appos'), (',', 'punct'), ('b', 'prep'), (']', 'punct'), ('=', 'punct')]

>> Bigrams: 
[[	, BbC], [BbC, |], [|, ϵ], [ϵ, CcS], [CcS, |], [|, ϵ], [ϵ, 	 	], [	 	, NT], [NT, 	], [	, 	], [	, Follow], [Follow,  	], [ 	, S], [S, 	], [	, {], [{, }], [}, 	], [	, {], [{, $], [$, }], [}, 	], [	, B], [B, 	], [	, {], [{, b,𝜖], [b,𝜖, }], [}, 	], [	, {], [{, $], [$, }], [}, 	], [	, C], [C, 	], [	, {], [{, c,𝜖], [c,𝜖, }], [}, 	], [	, {], [{, $], [$, }], [},  ], [ , Rule], [Rule, :], [:, 3], [3, A], [A,  ], [ , b], [b, =], [=, follow(A], [follow(A, )], [), M[A], [M[A, ,], [,, b], [b, ]], [], =]]

>> Trigrams: 
[[	, BbC, |], [BbC, |, ϵ], [|, ϵ, CcS], [ϵ, CcS, |], [CcS, |, ϵ], [|, ϵ, 	 	], [ϵ, 	 	, NT], [	 	, NT, 	], [NT, 	, 	], [	, 	, Follow], [	, Follow,  	], [Follow,  	, S], [ 	, S, 	], [S, 	, {], [	, {, }], [{, }, 	], [}, 	, {], [	, {, $], [{, $, }], [$, }, 	], [}, 	, B], [	, B, 	], [B, 	, {], [	, {, b,𝜖], [{, b,𝜖, }], [b,𝜖, }, 	], [}, 	, {], [	, {, $], [{, $, }], [$, }, 	], [}, 	, C], [	, C, 	], [C, 	, {], [	, {, c,𝜖], [{, c,𝜖, }], [c,𝜖, }, 	], [}, 	, {], [	, {, $], [{, $, }], [$, },  ], [},  , Rule], [ , Rule, :], [Rule, :, 3], [:, 3, A], [3, A,  ], [A,  , b], [ , b, =], [b, =, follow(A], [=, follow(A, )], [follow(A, ), M[A], [), M[A, ,], [M[A, ,, b], [,, b, ]], [b, ], =]]

>> Noun Phrases are: 
[| ϵ, |, 3 A, M[A]

>> Named Entities are: 
[('First', 'ORDINAL'), ('3', 'CARDINAL')]


============================ Sentence 229 =============================

A           Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[A,           , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('A\uf0e0', 'ADV'), ('          ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('A\uf0e0', 'advmod'), ('          ', 'compound'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'npadvmod'), ('#', 'nmod'), ('3130006', 'appos'), ('(', 'punct'), ('PS', 'nsubj'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[A,           ], [          , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[A,           , Prof.], [          , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 230 =============================

Example-3: LL(1) parsing EE+T | T TT*F | F F(E) | id Step 1: Remove left recursion 	ETE’ 	E’+TE’ | ϵ 	TFT’ 	T’*FT’ | ϵ 	F(E) | id     Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[Example-3, :, LL(1, ), parsing, EE+T, |, T, TT*F, |, F, F(E, ), |, d, Step, 1, :, Remove, left, recursion, 	, ETE, ’, 	, E’+TE, ’, |, ϵ, 	, TFT, ’, 	, T’*FT, ’, |, ϵ, 	, F(E, ), |, d,     , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('Example-3', 'PROPN'), (':', 'PUNCT'), ('LL(1', 'PROPN'), (')', 'PUNCT'), ('parsing', 'VERB'), ('E\uf0e0E+T', 'PROPN'), ('|', 'NOUN'), ('T', 'PROPN'), ('T\uf0e0T*F', 'NOUN'), ('|', 'NOUN'), ('F', 'PROPN'), ('F\uf0e0(E', 'NOUN'), (')', 'PUNCT'), ('|', 'NOUN'), ('d', 'PROPN'), ('Step', 'NOUN'), ('1', 'NUM'), (':', 'PUNCT'), ('Remove', 'VERB'), ('left', 'VERB'), ('recursion', 'NOUN'), ('\t', 'SPACE'), ('E\uf0e0TE', 'PROPN'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('E’\uf0e0+TE', 'PROPN'), ('’', 'PUNCT'), ('|', 'NOUN'), ('ϵ', 'NOUN'), ('\t', 'SPACE'), ('T\uf0e0FT', 'VERB'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('T’\uf0e0*FT', 'NOUN'), ('’', 'PUNCT'), ('|', 'NOUN'), ('ϵ', 'NOUN'), ('\t', 'SPACE'), ('F\uf0e0(E', 'NOUN'), (')', 'PUNCT'), ('|', 'NOUN'), ('d', 'NOUN'), ('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Example-3', 'nsubj'), (':', 'punct'), ('LL(1', 'appos'), (')', 'punct'), ('parsing', 'acl'), ('E\uf0e0E+T', 'compound'), ('|', 'dobj'), ('T', 'compound'), ('T\uf0e0T*F', 'ccomp'), ('|', 'dobj'), ('F', 'compound'), ('F\uf0e0(E', 'dobj'), (')', 'punct'), ('|', 'punct'), ('d', 'compound'), ('Step', 'appos'), ('1', 'nummod'), (':', 'punct'), ('Remove', 'nsubj'), ('left', 'ROOT'), ('recursion', 'nmod'), ('\t', 'compound'), ('E\uf0e0TE', 'nmod'), ('’', 'punct'), ('\t', 'compound'), ('E’\uf0e0+TE', 'poss'), ('’', 'punct'), ('|', 'dobj'), ('ϵ', 'oprd'), ('\t', 'amod'), ('T\uf0e0FT', 'oprd'), ('’', 'punct'), ('\t', 'compound'), ('T’\uf0e0*FT', 'dobj'), ('’', 'punct'), ('|', 'appos'), ('ϵ', 'appos'), ('\t', 'compound'), ('F\uf0e0(E', 'appos'), (')', 'punct'), ('|', 'npadvmod'), ('d', 'meta'), ('    ', 'nummod'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'dep'), ('#', 'nmod'), ('3130006', 'appos'), ('(', 'punct'), ('PS', 'nsubj'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'advcl'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'dobj'), ('‹#›', 'punct'), ('  ', 'appos'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'appos'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'advcl'), ('  ', 'prt'), ('Unit', 'npadvmod'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[Example-3, :], [:, LL(1], [LL(1, )], [), parsing], [parsing, EE+T], [EE+T, |], [|, T], [T, TT*F], [TT*F, |], [|, F], [F, F(E], [F(E, )], [), |], [|, d], [d, Step], [Step, 1], [1, :], [:, Remove], [Remove, left], [left, recursion], [recursion, 	], [	, ETE], [ETE, ’], [’, 	], [	, E’+TE], [E’+TE, ’], [’, |], [|, ϵ], [ϵ, 	], [	, TFT], [TFT, ’], [’, 	], [	, T’*FT], [T’*FT, ’], [’, |], [|, ϵ], [ϵ, 	], [	, F(E], [F(E, )], [), |], [|, d], [d,     ], [    , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[Example-3, :, LL(1], [:, LL(1, )], [LL(1, ), parsing], [), parsing, EE+T], [parsing, EE+T, |], [EE+T, |, T], [|, T, TT*F], [T, TT*F, |], [TT*F, |, F], [|, F, F(E], [F, F(E, )], [F(E, ), |], [), |, d], [|, d, Step], [d, Step, 1], [Step, 1, :], [1, :, Remove], [:, Remove, left], [Remove, left, recursion], [left, recursion, 	], [recursion, 	, ETE], [	, ETE, ’], [ETE, ’, 	], [’, 	, E’+TE], [	, E’+TE, ’], [E’+TE, ’, |], [’, |, ϵ], [|, ϵ, 	], [ϵ, 	, TFT], [	, TFT, ’], [TFT, ’, 	], [’, 	, T’*FT], [	, T’*FT, ’], [T’*FT, ’, |], [’, |, ϵ], [|, ϵ, 	], [ϵ, 	, F(E], [	, F(E, )], [F(E, ), |], [), |, d], [|, d,     ], [d,     , Prof.], [    , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[Example-3, LL(1, EE+T |, |, F F(E, id Step, recursion 	ETE’ 	E’+TE’ |, ϵ, 	T’*FT, |, ϵ, 	F(E, PS, Unit, Basic Probability, Prof. Dixita B Kagathara, #, (CD, Theory, I]

>> Named Entities are: 
[('1', 'CARDINAL'), ('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 231 =============================

Example-3: LL(1) parsing Step 2: Compute FIRST First(E) ETE’   First(T) TFT’  First(F) F(E) 					Fid   ETE’ 	E’+TE’ | ϵ 	TFT’ 	T’*FT’ | ϵ 	F(E) | id  	E		T	E’  	A		Y1	Y2   


>> Tokens are: 
[Example-3, :, LL(1, ), parsing, Step, 2, :, Compute, First(E, ), ETE, ’,   , First(T, ), TFT, ’,  , First(F, ), F(E, ), 					, Fid,   , ETE, ’, 	, E’+TE, ’, |, ϵ, 	, TFT, ’, 	, T’*FT, ’, |, ϵ, 	, F(E, ), |, d,  	, E, 	, , 	, T, 	, E, ’,  	, 	, , 	, Y1, 	, Y2,  ] 

>> PoS Tags are: 
[('Example-3', 'PROPN'), (':', 'PUNCT'), ('LL(1', 'PROPN'), (')', 'PUNCT'), ('parsing', 'VERB'), ('Step', 'NOUN'), ('2', 'NUM'), (':', 'PUNCT'), ('Compute', 'PROPN'), ('First(E', 'PROPN'), (')', 'PUNCT'), ('E\uf0e0TE', 'PROPN'), ('’', 'PUNCT'), ('  ', 'SPACE'), ('First(T', 'PROPN'), (')', 'PUNCT'), ('T\uf0e0FT', 'ADP'), ('’', 'PUNCT'), (' ', 'SPACE'), ('First(F', 'PROPN'), (')', 'PUNCT'), ('F\uf0e0(E', 'NOUN'), (')', 'PUNCT'), ('\t\t\t\t\t', 'SPACE'), ('F\uf0e0id', 'PROPN'), ('  ', 'SPACE'), ('E\uf0e0TE', 'NOUN'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('E’\uf0e0+TE', 'PROPN'), ('’', 'PUNCT'), ('|', 'NOUN'), ('ϵ', 'NOUN'), ('\t', 'SPACE'), ('T\uf0e0FT', 'VERB'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('T’\uf0e0*FT', 'NOUN'), ('’', 'PUNCT'), ('|', 'NOUN'), ('ϵ', 'NOUN'), ('\t', 'SPACE'), ('F\uf0e0(E', 'NOUN'), (')', 'PUNCT'), ('|', 'NOUN'), ('d', 'PROPN'), (' \t', 'SPACE'), ('E', 'NOUN'), ('\t', 'SPACE'), ('\uf0e0', 'NOUN'), ('\t', 'SPACE'), ('T', 'PROPN'), ('\t', 'SPACE'), ('E', 'NOUN'), ('’', 'PUNCT'), (' \t', 'SPACE'), ('\t', 'SPACE'), ('\uf0e0', 'PROPN'), ('\t', 'SPACE'), ('Y1', 'PROPN'), ('\t', 'SPACE'), ('Y2', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Example-3', 'nmod'), (':', 'punct'), ('LL(1', 'appos'), (')', 'punct'), ('parsing', 'acl'), ('Step', 'dobj'), ('2', 'nummod'), (':', 'punct'), ('Compute', 'compound'), ('First(E', 'punct'), (')', 'punct'), ('E\uf0e0TE', 'ROOT'), ('’', 'punct'), ('  ', 'compound'), ('First(T', 'appos'), (')', 'punct'), ('T\uf0e0FT', 'prep'), ('’', 'punct'), (' ', 'nmod'), ('First(F', 'appos'), (')', 'punct'), ('F\uf0e0(E', 'appos'), (')', 'punct'), ('\t\t\t\t\t', 'advmod'), ('F\uf0e0id', 'compound'), ('  ', 'compound'), ('E\uf0e0TE', 'poss'), ('’', 'punct'), ('\t', 'compound'), ('E’\uf0e0+TE', 'nmod'), ('’', 'punct'), ('|', 'appos'), ('ϵ', 'punct'), ('\t', 'amod'), ('T\uf0e0FT', 'prep'), ('’', 'punct'), ('\t', 'compound'), ('T’\uf0e0*FT', 'poss'), ('’', 'punct'), ('|', 'appos'), ('ϵ', 'appos'), ('\t', 'compound'), ('F\uf0e0(E', 'appos'), (')', 'punct'), ('|', 'punct'), ('d', 'punct'), (' \t', 'nummod'), ('E', 'compound'), ('\t', 'compound'), ('\uf0e0', 'compound'), ('\t', 'compound'), ('T', 'compound'), ('\t', 'compound'), ('E', 'nmod'), ('’', 'punct'), (' \t', 'compound'), ('\t', 'compound'), ('\uf0e0', 'compound'), ('\t', 'compound'), ('Y1', 'compound'), ('\t', 'compound'), ('Y2', 'dative'), (' ', 'appos')]

>> Bigrams: 
[[Example-3, :], [:, LL(1], [LL(1, )], [), parsing], [parsing, Step], [Step, 2], [2, :], [:, Compute], [Compute, First(E], [First(E, )], [), ETE], [ETE, ’], [’,   ], [  , First(T], [First(T, )], [), TFT], [TFT, ’], [’,  ], [ , First(F], [First(F, )], [), F(E], [F(E, )], [), 					], [					, Fid], [Fid,   ], [  , ETE], [ETE, ’], [’, 	], [	, E’+TE], [E’+TE, ’], [’, |], [|, ϵ], [ϵ, 	], [	, TFT], [TFT, ’], [’, 	], [	, T’*FT], [T’*FT, ’], [’, |], [|, ϵ], [ϵ, 	], [	, F(E], [F(E, )], [), |], [|, d], [d,  	], [ 	, E], [E, 	], [	, ], [, 	], [	, T], [T, 	], [	, E], [E, ’], [’,  	], [ 	, 	], [	, ], [, 	], [	, Y1], [Y1, 	], [	, Y2], [Y2,  ]]

>> Trigrams: 
[[Example-3, :, LL(1], [:, LL(1, )], [LL(1, ), parsing], [), parsing, Step], [parsing, Step, 2], [Step, 2, :], [2, :, Compute], [:, Compute, First(E], [Compute, First(E, )], [First(E, ), ETE], [), ETE, ’], [ETE, ’,   ], [’,   , First(T], [  , First(T, )], [First(T, ), TFT], [), TFT, ’], [TFT, ’,  ], [’,  , First(F], [ , First(F, )], [First(F, ), F(E], [), F(E, )], [F(E, ), 					], [), 					, Fid], [					, Fid,   ], [Fid,   , ETE], [  , ETE, ’], [ETE, ’, 	], [’, 	, E’+TE], [	, E’+TE, ’], [E’+TE, ’, |], [’, |, ϵ], [|, ϵ, 	], [ϵ, 	, TFT], [	, TFT, ’], [TFT, ’, 	], [’, 	, T’*FT], [	, T’*FT, ’], [T’*FT, ’, |], [’, |, ϵ], [|, ϵ, 	], [ϵ, 	, F(E], [	, F(E, )], [F(E, ), |], [), |, d], [|, d,  	], [d,  	, E], [ 	, E, 	], [E, 	, ], [	, , 	], [, 	, T], [	, T, 	], [T, 	, E], [	, E, ’], [E, ’,  	], [’,  	, 	], [ 	, 	, ], [	, , 	], [, 	, Y1], [	, Y1, 	], [Y1, 	, Y2], [	, Y2,  ]]

>> Noun Phrases are: 
[: LL(1, Step, Compute FIRST,   First(T,  First(F, F(E, 					Fid   ETE’ 	E’+TE’ |, 	T’*FT’ |, ϵ, 	F(E,  	E		T	E’  	A		Y1	Y2]

>> Named Entities are: 
[('2', 'CARDINAL'), ('T\uf0e0FT’  ', 'WORK_OF_ART'), ('Y2', 'CARDINAL')]


============================ Sentence 232 =============================

Rule 3 First(A)=First(Y1) 


>> Tokens are: 
[Rule, 3, First(A)=First(Y1, )] 

>> PoS Tags are: 
[('Rule', 'VERB'), ('3', 'NUM'), ('First(A)=First(Y1', 'NOUN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('Rule', 'ROOT'), ('3', 'nummod'), ('First(A)=First(Y1', 'dobj'), (')', 'punct')]

>> Bigrams: 
[[Rule, 3], [3, First(A)=First(Y1], [First(A)=First(Y1, )]]

>> Trigrams: 
[[Rule, 3, First(A)=First(Y1], [3, First(A)=First(Y1, )]]

>> Noun Phrases are: 
[3 First(A)=First(Y1]

>> Named Entities are: 
[]


============================ Sentence 233 =============================

	T		F	T’  	A		Y1	Y2   


>> Tokens are: 
[	, T, 	, , 	, F, 	, T, ’,  	, 	, , 	, Y1, 	, Y2,  ] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('T', 'PROPN'), ('\t', 'SPACE'), ('\uf0e0', 'PROPN'), ('\t', 'SPACE'), ('F', 'PROPN'), ('\t', 'SPACE'), ('T', 'PROPN'), ('’', 'PUNCT'), (' \t', 'SPACE'), ('\t', 'SPACE'), ('\uf0e0', 'PROPN'), ('\t', 'SPACE'), ('Y1', 'PROPN'), ('\t', 'SPACE'), ('Y2', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('T', 'compound'), ('\t', 'compound'), ('\uf0e0', 'nmod'), ('\t', 'compound'), ('F', 'compound'), ('\t', 'compound'), ('T', 'nmod'), ('’', 'punct'), (' \t', 'compound'), ('\t', 'compound'), ('\uf0e0', 'nmod'), ('\t', 'compound'), ('Y1', 'compound'), ('\t', 'compound'), ('Y2', 'ROOT'), (' ', 'appos')]

>> Bigrams: 
[[	, T], [T, 	], [	, ], [, 	], [	, F], [F, 	], [	, T], [T, ’], [’,  	], [ 	, 	], [	, ], [, 	], [	, Y1], [Y1, 	], [	, Y2], [Y2,  ]]

>> Trigrams: 
[[	, T, 	], [T, 	, ], [	, , 	], [, 	, F], [	, F, 	], [F, 	, T], [	, T, ’], [T, ’,  	], [’,  	, 	], [ 	, 	, ], [	, , 	], [, 	, Y1], [	, Y1, 	], [Y1, 	, Y2], [	, Y2,  ]]

>> Noun Phrases are: 
[	T		F	T’  	A		Y1	Y2]

>> Named Entities are: 
[('Y2', 'CARDINAL')]


============================ Sentence 234 =============================

Rule 3 First(A)=First(Y1) FIRST(E)=FIRST(T) FIRST(T)=FIRST(F) 


>> Tokens are: 
[Rule, 3, First(A)=First(Y1, ), FIRST(E)=FIRST(T, ), FIRST(T)=FIRST(F, )] 

>> PoS Tags are: 
[('Rule', 'VERB'), ('3', 'NUM'), ('First(A)=First(Y1', 'NUM'), (')', 'PUNCT'), ('FIRST(E)=FIRST(T', 'PROPN'), (')', 'PUNCT'), ('FIRST(T)=FIRST(F', 'NOUN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('Rule', 'ROOT'), ('3', 'nummod'), ('First(A)=First(Y1', 'nmod'), (')', 'punct'), ('FIRST(E)=FIRST(T', 'dobj'), (')', 'punct'), ('FIRST(T)=FIRST(F', 'dobj'), (')', 'punct')]

>> Bigrams: 
[[Rule, 3], [3, First(A)=First(Y1], [First(A)=First(Y1, )], [), FIRST(E)=FIRST(T], [FIRST(E)=FIRST(T, )], [), FIRST(T)=FIRST(F], [FIRST(T)=FIRST(F, )]]

>> Trigrams: 
[[Rule, 3, First(A)=First(Y1], [3, First(A)=First(Y1, )], [First(A)=First(Y1, ), FIRST(E)=FIRST(T], [), FIRST(E)=FIRST(T, )], [FIRST(E)=FIRST(T, ), FIRST(T)=FIRST(F], [), FIRST(T)=FIRST(F, )]]

>> Noun Phrases are: 
[3 First(A)=First(Y1) FIRST(E)=FIRST(T, FIRST(T)=FIRST(F]

>> Named Entities are: 
[]


============================ Sentence 235 =============================

	F		(	E	)  	A 


>> Tokens are: 
[	, F, 	, , 	, (, 	, E, 	, ),  	] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('F', 'PROPN'), ('\t', 'SPACE'), ('\uf0e0', 'PROPN'), ('\t', 'SPACE'), ('(', 'PUNCT'), ('\t', 'SPACE'), ('E', 'PROPN'), ('\t', 'SPACE'), (')', 'PUNCT'), (' \t', 'SPACE')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('F', 'compound'), ('\t', 'nsubj'), ('\uf0e0', 'appos'), ('\t', 'ROOT'), ('(', 'punct'), ('\t', 'compound'), ('E', 'compound'), ('\t', 'appos'), (')', 'punct'), (' \t', 'compound')]

>> Bigrams: 
[[	, F], [F, 	], [	, ], [, 	], [	, (], [(, 	], [	, E], [E, 	], [	, )], [),  	]]

>> Trigrams: 
[[	, F, 	], [F, 	, ], [	, , 	], [, 	, (], [	, (, 	], [(, 	, E], [	, E, 	], [E, 	, )], [	, ),  	]]

>> Noun Phrases are: 
[,  	A]

>> Named Entities are: 
[]


============================ Sentence 236 =============================

		  	F		id  	A		   


>> Tokens are: 
[	, , 	  	, F, 	, , 	, d,  	, 	, , 	  ] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('\uf0e0', 'NOUN'), ('\t  \t', 'SPACE'), ('F', 'PROPN'), ('\t', 'SPACE'), ('\uf0e0', 'PROPN'), ('\t', 'SPACE'), ('d', 'PROPN'), (' \t', 'SPACE'), ('\t', 'SPACE'), ('\uf0e0', 'NOUN'), ('\t  ', 'SPACE')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('\uf0e0', 'compound'), ('\t  \t', 'compound'), ('F', 'compound'), ('\t', 'nsubj'), ('\uf0e0', 'appos'), ('\t', 'ROOT'), ('d', 'meta'), (' \t', 'nummod'), ('\t', 'compound'), ('\uf0e0', 'dobj'), ('\t  ', 'punct')]

>> Bigrams: 
[[	, ], [, 	  	], [	  	, F], [F, 	], [	, ], [, 	], [	, d], [d,  	], [ 	, 	], [	, ], [, 	  ]]

>> Trigrams: 
[[	, , 	  	], [, 	  	, F], [	  	, F, 	], [F, 	, ], [	, , 	], [, 	, d], [	, d,  	], [d,  	, 	], [ 	, 	, ], [	, , 	  ]]

>> Noun Phrases are: 
[, id  	A	]

>> Named Entities are: 
[]


============================ Sentence 237 =============================

Rule 1 add  to  Rule 1 add  to  FIRST(F)={ (   , id } 	NT	First  	E	{ (,id }  	E’	  	T	{ (,id }  	T’	  	F	{ (,id }     = {(, id } = {(, id }     


>> Tokens are: 
[Rule, 1, add,  ,  , Rule, 1, add,  ,  , FIRST(F)=, {, (,   , ,, d, }, 	, NT, 	,  	, E, 	, {, (, ,, d, },  	, E, ’, 	  	, T, 	, {, (, ,, d, },  	, T, ’, 	  	, F, 	, {, (, ,, d, },     , =, {, (, ,, d, }, =, {, (, ,, d, },    ] 

>> PoS Tags are: 
[('Rule', 'NOUN'), ('1', 'NUM'), ('add', 'VERB'), (' ', 'SPACE'), (' ', 'SPACE'), ('Rule', 'VERB'), ('1', 'NUM'), ('add', 'VERB'), (' ', 'SPACE'), (' ', 'SPACE'), ('FIRST(F)=', 'PROPN'), ('{', 'PUNCT'), ('(', 'PUNCT'), ('  ', 'SPACE'), (',', 'PUNCT'), ('d', 'X'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('NT', 'PROPN'), ('\t', 'SPACE'), (' \t', 'SPACE'), ('E', 'NOUN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('(', 'PUNCT'), (',', 'PUNCT'), ('d', 'NOUN'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('E', 'NOUN'), ('’', 'PUNCT'), ('\t  \t', 'SPACE'), ('T', 'PROPN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('(', 'PUNCT'), (',', 'PUNCT'), ('d', 'NOUN'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('T', 'NOUN'), ('’', 'PUNCT'), ('\t  \t', 'SPACE'), ('F', 'PROPN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('(', 'PUNCT'), (',', 'PUNCT'), ('d', 'X'), ('}', 'PUNCT'), ('    ', 'SPACE'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('(', 'PUNCT'), (',', 'PUNCT'), ('d', 'NOUN'), ('}', 'PUNCT'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('(', 'PUNCT'), (',', 'PUNCT'), ('d', 'NOUN'), ('}', 'PUNCT'), ('   ', 'SPACE')] 

>> Dependency Tags are: 
[('Rule', 'nsubj'), ('1', 'nummod'), ('add', 'ROOT'), (' ', 'dobj'), (' ', 'pobj'), ('Rule', 'dep'), ('1', 'nummod'), ('add', 'advcl'), (' ', 'dobj'), (' ', 'pobj'), ('FIRST(F)=', 'npadvmod'), ('{', 'punct'), ('(', 'punct'), ('  ', 'parataxis'), (',', 'punct'), ('d', 'conj'), ('}', 'punct'), ('\t', 'compound'), ('NT', 'compound'), ('\t', 'compound'), (' \t', 'compound'), ('E', 'compound'), ('\t', 'appos'), ('{', 'punct'), ('(', 'punct'), (',', 'punct'), ('d', 'nmod'), ('}', 'punct'), (' \t', 'compound'), ('E', 'nmod'), ('’', 'punct'), ('\t  \t', 'compound'), ('T', 'compound'), ('\t', 'appos'), ('{', 'punct'), ('(', 'punct'), (',', 'punct'), ('d', 'conj'), ('}', 'punct'), (' \t', 'compound'), ('T', 'nmod'), ('’', 'punct'), ('\t  \t', 'compound'), ('F', 'compound'), ('\t', 'conj'), ('{', 'punct'), ('(', 'punct'), (',', 'punct'), ('d', 'meta'), ('}', 'punct'), ('    ', 'appos'), ('=', 'punct'), ('{', 'punct'), ('(', 'punct'), (',', 'punct'), ('d', 'appos'), ('}', 'punct'), ('=', 'punct'), ('{', 'punct'), ('(', 'punct'), (',', 'punct'), ('d', 'dobj'), ('}', 'punct'), ('   ', 'punct')]

>> Bigrams: 
[[Rule, 1], [1, add], [add,  ], [ ,  ], [ , Rule], [Rule, 1], [1, add], [add,  ], [ ,  ], [ , FIRST(F)=], [FIRST(F)=, {], [{, (], [(,   ], [  , ,], [,, d], [d, }], [}, 	], [	, NT], [NT, 	], [	,  	], [ 	, E], [E, 	], [	, {], [{, (], [(, ,], [,, d], [d, }], [},  	], [ 	, E], [E, ’], [’, 	  	], [	  	, T], [T, 	], [	, {], [{, (], [(, ,], [,, d], [d, }], [},  	], [ 	, T], [T, ’], [’, 	  	], [	  	, F], [F, 	], [	, {], [{, (], [(, ,], [,, d], [d, }], [},     ], [    , =], [=, {], [{, (], [(, ,], [,, d], [d, }], [}, =], [=, {], [{, (], [(, ,], [,, d], [d, }], [},    ]]

>> Trigrams: 
[[Rule, 1, add], [1, add,  ], [add,  ,  ], [ ,  , Rule], [ , Rule, 1], [Rule, 1, add], [1, add,  ], [add,  ,  ], [ ,  , FIRST(F)=], [ , FIRST(F)=, {], [FIRST(F)=, {, (], [{, (,   ], [(,   , ,], [  , ,, d], [,, d, }], [d, }, 	], [}, 	, NT], [	, NT, 	], [NT, 	,  	], [	,  	, E], [ 	, E, 	], [E, 	, {], [	, {, (], [{, (, ,], [(, ,, d], [,, d, }], [d, },  	], [},  	, E], [ 	, E, ’], [E, ’, 	  	], [’, 	  	, T], [	  	, T, 	], [T, 	, {], [	, {, (], [{, (, ,], [(, ,, d], [,, d, }], [d, },  	], [},  	, T], [ 	, T, ’], [T, ’, 	  	], [’, 	  	, F], [	  	, F, 	], [F, 	, {], [	, {, (], [{, (, ,], [(, ,, d], [,, d, }], [d, },     ], [},     , =], [    , =, {], [=, {, (], [{, (, ,], [(, ,, d], [,, d, }], [d, }, =], [}, =, {], [=, {, (], [{, (, ,], [(, ,, d], [,, d, }], [d, },    ]]

>> Noun Phrases are: 
[Rule, id, (, id, (, id]

>> Named Entities are: 
[('First', 'ORDINAL')]


============================ Sentence 238 =============================

Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'nsubj'), ('#', 'appos'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[Prof. Jay R Dhamsaniya, (PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('Jay R Dhamsaniya', 'ORG'), ('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 239 =============================

Example-3: LL(1) parsing Step 2: Compute FIRST First(E’) E’+TE’    E’𝜖    	 


>> Tokens are: 
[Example-3, :, LL(1, ), parsing, Step, 2, :, Compute, First(E, ’, ), E’+TE, ’,    , E’𝜖,    	] 

>> PoS Tags are: 
[('Example-3', 'PROPN'), (':', 'PUNCT'), ('LL(1', 'PROPN'), (')', 'PUNCT'), ('parsing', 'VERB'), ('Step', 'NOUN'), ('2', 'NUM'), (':', 'PUNCT'), ('Compute', 'PROPN'), ('First(E', 'PROPN'), ('’', 'PUNCT'), (')', 'PUNCT'), ('E’\uf0e0+TE', 'PROPN'), ('’', 'PUNCT'), ('   ', 'SPACE'), ('E’\uf0e0𝜖', 'NOUN'), ('   \t', 'SPACE')] 

>> Dependency Tags are: 
[('Example-3', 'ROOT'), (':', 'punct'), ('LL(1', 'appos'), (')', 'punct'), ('parsing', 'acl'), ('Step', 'dobj'), ('2', 'nummod'), (':', 'punct'), ('Compute', 'compound'), ('First(E', 'punct'), ('’', 'punct'), (')', 'punct'), ('E’\uf0e0+TE', 'appos'), ('’', 'punct'), ('   ', 'compound'), ('E’\uf0e0𝜖', 'appos'), ('   \t', 'appos')]

>> Bigrams: 
[[Example-3, :], [:, LL(1], [LL(1, )], [), parsing], [parsing, Step], [Step, 2], [2, :], [:, Compute], [Compute, First(E], [First(E, ’], [’, )], [), E’+TE], [E’+TE, ’], [’,    ], [   , E’𝜖], [E’𝜖,    	]]

>> Trigrams: 
[[Example-3, :, LL(1], [:, LL(1, )], [LL(1, ), parsing], [), parsing, Step], [parsing, Step, 2], [Step, 2, :], [2, :, Compute], [:, Compute, First(E], [Compute, First(E, ’], [First(E, ’, )], [’, ), E’+TE], [), E’+TE, ’], [E’+TE, ’,    ], [’,    , E’𝜖], [   , E’𝜖,    	]]

>> Noun Phrases are: 
[Example-3, : LL(1, Step, Compute FIRST, E’+TE,    E’𝜖]

>> Named Entities are: 
[('2', 'CARDINAL')]


============================ Sentence 240 =============================

A		  	E’		  	 


>> Tokens are: 
[	, , 	  	, E, ’, 	, , 	  	] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('\uf0e0', 'NOUN'), ('\t  \t', 'SPACE'), ('E', 'PROPN'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('\uf0e0', 'NOUN'), ('\t  \t', 'SPACE')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('\uf0e0', 'compound'), ('\t  \t', 'compound'), ('E', 'nsubj'), ('’', 'punct'), ('\t', 'compound'), ('\uf0e0', 'appos'), ('\t  \t', 'ROOT')]

>> Bigrams: 
[[	, ], [, 	  	], [	  	, E], [E, ’], [’, 	], [	, ], [, 	  	]]

>> Trigrams: 
[[	, , 	  	], [, 	  	, E], [	  	, E, ’], [E, ’, 	], [’, 	, ], [	, , 	  	]]

>> Noun Phrases are: 
[A		  	E, 	]

>> Named Entities are: 
[]


============================ Sentence 241 =============================

A		   


>> Tokens are: 
[	, , 	  ] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('\uf0e0', 'NOUN'), ('\t  ', 'SPACE')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('\uf0e0', 'ROOT'), ('\t  ', 'punct')]

>> Bigrams: 
[[	, ], [, 	  ]]

>> Trigrams: 
[[	, , 	  ]]

>> Noun Phrases are: 
[A	]

>> Named Entities are: 
[]


============================ Sentence 242 =============================

Rule 1 add  to  Rule 2 add  to   


>> Tokens are: 
[Rule, 1, add,  ,  , Rule, 2, add,  ,  ] 

>> PoS Tags are: 
[('Rule', 'NOUN'), ('1', 'NUM'), ('add', 'VERB'), (' ', 'SPACE'), (' ', 'SPACE'), ('Rule', 'VERB'), ('2', 'NUM'), ('add', 'VERB'), (' ', 'SPACE'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Rule', 'nsubj'), ('1', 'nummod'), ('add', 'ROOT'), (' ', 'dobj'), (' ', 'pobj'), ('Rule', 'dep'), ('2', 'nummod'), ('add', 'advcl'), (' ', 'dobj'), (' ', 'pobj')]

>> Bigrams: 
[[Rule, 1], [1, add], [add,  ], [ ,  ], [ , Rule], [Rule, 2], [2, add], [add,  ], [ ,  ]]

>> Trigrams: 
[[Rule, 1, add], [1, add,  ], [add,  ,  ], [ ,  , Rule], [ , Rule, 2], [Rule, 2, add], [2, add,  ], [add,  ,  ]]

>> Noun Phrases are: 
[Rule]

>> Named Entities are: 
[]


============================ Sentence 243 =============================

FIRST(E’)={ + , 𝜖 } 	E’		+	T	E’  	NT	First  	E	{ (,id }  	E’	{ +, 𝜖 }  	T 


>> Tokens are: 
[FIRST(E’)=, {, +, ,, 𝜖, }, 	, E, ’, 	, , 	, +, 	, T, 	, E, ’,  	, NT, 	,  	, E, 	, {, (, ,, d, },  	, E, ’, 	, {, +, ,, 𝜖, },  	, T] 

>> PoS Tags are: 
[('FIRST(E’)=', 'ADV'), ('{', 'PUNCT'), ('+', 'CCONJ'), (',', 'PUNCT'), ('𝜖', 'X'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('E', 'NOUN'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('\uf0e0', 'NOUN'), ('\t', 'SPACE'), ('+', 'CCONJ'), ('\t', 'SPACE'), ('T', 'PROPN'), ('\t', 'SPACE'), ('E', 'NOUN'), ('’', 'PUNCT'), (' \t', 'SPACE'), ('NT', 'PROPN'), ('\t', 'SPACE'), (' \t', 'SPACE'), ('E', 'NOUN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('(', 'PUNCT'), (',', 'PUNCT'), ('d', 'NOUN'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('E', 'NOUN'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('+', 'CCONJ'), (',', 'PUNCT'), ('𝜖', 'NOUN'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('T', 'NOUN')] 

>> Dependency Tags are: 
[('FIRST(E’)=', 'advmod'), ('{', 'punct'), ('+', 'nmod'), (',', 'punct'), ('𝜖', 'nmod'), ('}', 'punct'), ('\t', 'compound'), ('E', 'appos'), ('’', 'punct'), ('\t', 'amod'), ('\uf0e0', 'appos'), ('\t', 'conj'), ('+', 'cc'), ('\t', 'compound'), ('T', 'compound'), ('\t', 'compound'), ('E', 'conj'), ('’', 'punct'), (' \t', 'appos'), ('NT', 'appos'), ('\t', 'compound'), (' \t', 'compound'), ('E', 'compound'), ('\t', 'ROOT'), ('{', 'punct'), ('(', 'punct'), (',', 'punct'), ('d', 'nmod'), ('}', 'punct'), (' \t', 'compound'), ('E', 'appos'), ('’', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('+', 'cc'), (',', 'punct'), ('𝜖', 'appos'), ('}', 'punct'), (' \t', 'compound'), ('T', 'appos')]

>> Bigrams: 
[[FIRST(E’)=, {], [{, +], [+, ,], [,, 𝜖], [𝜖, }], [}, 	], [	, E], [E, ’], [’, 	], [	, ], [, 	], [	, +], [+, 	], [	, T], [T, 	], [	, E], [E, ’], [’,  	], [ 	, NT], [NT, 	], [	,  	], [ 	, E], [E, 	], [	, {], [{, (], [(, ,], [,, d], [d, }], [},  	], [ 	, E], [E, ’], [’, 	], [	, {], [{, +], [+, ,], [,, 𝜖], [𝜖, }], [},  	], [ 	, T]]

>> Trigrams: 
[[FIRST(E’)=, {, +], [{, +, ,], [+, ,, 𝜖], [,, 𝜖, }], [𝜖, }, 	], [}, 	, E], [	, E, ’], [E, ’, 	], [’, 	, ], [	, , 	], [, 	, +], [	, +, 	], [+, 	, T], [	, T, 	], [T, 	, E], [	, E, ’], [E, ’,  	], [’,  	, NT], [ 	, NT, 	], [NT, 	,  	], [	,  	, E], [ 	, E, 	], [E, 	, {], [	, {, (], [{, (, ,], [(, ,, d], [,, d, }], [d, },  	], [},  	, E], [ 	, E, ’], [E, ’, 	], [’, 	, {], [	, {, +], [{, +, ,], [+, ,, 𝜖], [,, 𝜖, }], [𝜖, },  	], [},  	, T]]

>> Noun Phrases are: 
[	E, 	, NT, (,id }  	E, 𝜖,  	T]

>> Named Entities are: 
[('First', 'ORDINAL')]


============================ Sentence 244 =============================

	{ (,id }  	T’	  	F	{ (,id }  ETE’ 	E’+TE’ | ϵ 	TFT’ 	T’*FT’ | ϵ 	F(E) | id      Prof. Jay R Dhamsaniya #3130006 


>> Tokens are: 
[	, {, (, ,, d, },  	, T, ’, 	  	, F, 	, {, (, ,, d, },  , ETE, ’, 	, E’+TE, ’, |, ϵ, 	, TFT, ’, 	, T’*FT, ’, |, ϵ, 	, F(E, ), |, d,      , Prof., Jay, R, Dhamsaniya, #, 3130006] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('{', 'PUNCT'), ('(', 'PUNCT'), (',', 'PUNCT'), ('d', 'NOUN'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('T', 'NOUN'), ('’', 'PUNCT'), ('\t  \t', 'SPACE'), ('F', 'PROPN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('(', 'PUNCT'), (',', 'PUNCT'), ('d', 'NOUN'), ('}', 'PUNCT'), (' ', 'SPACE'), ('E\uf0e0TE', 'X'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('E’\uf0e0+TE', 'PROPN'), ('’', 'PUNCT'), ('|', 'NOUN'), ('ϵ', 'NOUN'), ('\t', 'SPACE'), ('T\uf0e0FT', 'VERB'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('T’\uf0e0*FT', 'NOUN'), ('’', 'PUNCT'), ('|', 'NOUN'), ('ϵ', 'NOUN'), ('\t', 'SPACE'), ('F\uf0e0(E', 'NOUN'), (')', 'PUNCT'), ('|', 'NOUN'), ('d', 'NOUN'), ('     ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('{', 'punct'), ('(', 'punct'), (',', 'punct'), ('d', 'meta'), ('}', 'punct'), (' \t', 'compound'), ('T', 'nmod'), ('’', 'punct'), ('\t  \t', 'compound'), ('F', 'compound'), ('\t', 'appos'), ('{', 'punct'), ('(', 'punct'), (',', 'punct'), ('d', 'conj'), ('}', 'punct'), (' ', 'punct'), ('E\uf0e0TE', 'appos'), ('’', 'punct'), ('\t', 'compound'), ('E’\uf0e0+TE', 'poss'), ('’', 'punct'), ('|', 'appos'), ('ϵ', 'punct'), ('\t', 'amod'), ('T\uf0e0FT', 'relcl'), ('’', 'punct'), ('\t', 'compound'), ('T’\uf0e0*FT', 'poss'), ('’', 'punct'), ('|', 'dobj'), ('ϵ', 'appos'), ('\t', 'compound'), ('F\uf0e0(E', 'appos'), (')', 'punct'), ('|', 'appos'), ('d', 'compound'), ('     ', 'appos'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'dative'), ('#', 'nmod'), ('3130006', 'appos')]

>> Bigrams: 
[[	, {], [{, (], [(, ,], [,, d], [d, }], [},  	], [ 	, T], [T, ’], [’, 	  	], [	  	, F], [F, 	], [	, {], [{, (], [(, ,], [,, d], [d, }], [},  ], [ , ETE], [ETE, ’], [’, 	], [	, E’+TE], [E’+TE, ’], [’, |], [|, ϵ], [ϵ, 	], [	, TFT], [TFT, ’], [’, 	], [	, T’*FT], [T’*FT, ’], [’, |], [|, ϵ], [ϵ, 	], [	, F(E], [F(E, )], [), |], [|, d], [d,      ], [     , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006]]

>> Trigrams: 
[[	, {, (], [{, (, ,], [(, ,, d], [,, d, }], [d, },  	], [},  	, T], [ 	, T, ’], [T, ’, 	  	], [’, 	  	, F], [	  	, F, 	], [F, 	, {], [	, {, (], [{, (, ,], [(, ,, d], [,, d, }], [d, },  ], [},  , ETE], [ , ETE, ’], [ETE, ’, 	], [’, 	, E’+TE], [	, E’+TE, ’], [E’+TE, ’, |], [’, |, ϵ], [|, ϵ, 	], [ϵ, 	, TFT], [	, TFT, ’], [TFT, ’, 	], [’, 	, T’*FT], [	, T’*FT, ’], [T’*FT, ’, |], [’, |, ϵ], [|, ϵ, 	], [ϵ, 	, F(E], [	, F(E, )], [F(E, ), |], [), |, d], [|, d,      ], [d,      , Prof.], [     , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006]]

>> Noun Phrases are: 
[id, 	E’+TE’ |, 	T’*FT’ |, ϵ, 	F(E, |, Prof. Jay R Dhamsaniya]

>> Named Entities are: 
[]


============================ Sentence 245 =============================

(PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[(, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('(', 'punct'), ('PS', 'nsubj'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'dobj'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 246 =============================

Example-3: LL(1) parsing Step 2: Compute FIRST First(T’) T’*FT’    T’𝜖    	A		  	T’		  	 


>> Tokens are: 
[Example-3, :, LL(1, ), parsing, Step, 2, :, Compute, First(T, ’, ), T’*FT, ’,    , T’𝜖,    	, 	, , 	  	, T, ’, 	, , 	  	] 

>> PoS Tags are: 
[('Example-3', 'PROPN'), (':', 'PUNCT'), ('LL(1', 'PROPN'), (')', 'PUNCT'), ('parsing', 'VERB'), ('Step', 'NOUN'), ('2', 'NUM'), (':', 'PUNCT'), ('Compute', 'PROPN'), ('First(T', 'PROPN'), ('’', 'PUNCT'), (')', 'PUNCT'), ('T’\uf0e0*FT', 'NOUN'), ('’', 'PUNCT'), ('   ', 'SPACE'), ('T’\uf0e0𝜖', 'NOUN'), ('   \t', 'SPACE'), ('\t', 'SPACE'), ('\uf0e0', 'NOUN'), ('\t  \t', 'SPACE'), ('T', 'PROPN'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('\uf0e0', 'NOUN'), ('\t  \t', 'SPACE')] 

>> Dependency Tags are: 
[('Example-3', 'ROOT'), (':', 'punct'), ('LL(1', 'appos'), (')', 'punct'), ('parsing', 'acl'), ('Step', 'dobj'), ('2', 'nummod'), (':', 'punct'), ('Compute', 'compound'), ('First(T', 'appos'), ('’', 'punct'), (')', 'punct'), ('T’\uf0e0*FT', 'appos'), ('’', 'punct'), ('   ', 'compound'), ('T’\uf0e0𝜖', 'appos'), ('   \t', 'appos'), ('\t', 'compound'), ('\uf0e0', 'compound'), ('\t  \t', 'compound'), ('T', 'appos'), ('’', 'punct'), ('\t', 'compound'), ('\uf0e0', 'appos'), ('\t  \t', 'punct')]

>> Bigrams: 
[[Example-3, :], [:, LL(1], [LL(1, )], [), parsing], [parsing, Step], [Step, 2], [2, :], [:, Compute], [Compute, First(T], [First(T, ’], [’, )], [), T’*FT], [T’*FT, ’], [’,    ], [   , T’𝜖], [T’𝜖,    	], [   	, 	], [	, ], [, 	  	], [	  	, T], [T, ’], [’, 	], [	, ], [, 	  	]]

>> Trigrams: 
[[Example-3, :, LL(1], [:, LL(1, )], [LL(1, ), parsing], [), parsing, Step], [parsing, Step, 2], [Step, 2, :], [2, :, Compute], [:, Compute, First(T], [Compute, First(T, ’], [First(T, ’, )], [’, ), T’*FT], [), T’*FT, ’], [T’*FT, ’,    ], [’,    , T’𝜖], [   , T’𝜖,    	], [T’𝜖,    	, 	], [   	, 	, ], [	, , 	  	], [, 	  	, T], [	  	, T, ’], [T, ’, 	], [’, 	, ], [	, , 	  	]]

>> Noun Phrases are: 
[Example-3, : LL(1, Step, Compute FIRST First(T, ) T’*FT,    T’𝜖, A		  	T, 	]

>> Named Entities are: 
[('2', 'CARDINAL'), ('Compute FIRST', 'ORG')]


============================ Sentence 247 =============================

A		   


>> Tokens are: 
[	, , 	  ] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('\uf0e0', 'NOUN'), ('\t  ', 'SPACE')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('\uf0e0', 'ROOT'), ('\t  ', 'punct')]

>> Bigrams: 
[[	, ], [, 	  ]]

>> Trigrams: 
[[	, , 	  ]]

>> Noun Phrases are: 
[A	]

>> Named Entities are: 
[]


============================ Sentence 248 =============================

Rule 1 add  to  Rule 2 add  to  FIRST(T’)={ * , 𝜖 } 	T’ 


>> Tokens are: 
[Rule, 1, add,  ,  , Rule, 2, add,  ,  , FIRST(T’)=, {, *, ,, 𝜖, }, 	, T, ’] 

>> PoS Tags are: 
[('Rule', 'NOUN'), ('1', 'NUM'), ('add', 'VERB'), (' ', 'SPACE'), (' ', 'SPACE'), ('Rule', 'VERB'), ('2', 'NUM'), ('add', 'VERB'), (' ', 'SPACE'), (' ', 'SPACE'), ('FIRST(T’)=', 'PROPN'), ('{', 'PUNCT'), ('*', 'PUNCT'), (',', 'PUNCT'), ('𝜖', 'NOUN'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('T', 'PROPN'), ('’', 'PUNCT')] 

>> Dependency Tags are: 
[('Rule', 'nsubj'), ('1', 'nummod'), ('add', 'ROOT'), (' ', 'dobj'), (' ', 'pobj'), ('Rule', 'dep'), ('2', 'nummod'), ('add', 'advcl'), (' ', 'dobj'), (' ', 'pobj'), ('FIRST(T’)=', 'npadvmod'), ('{', 'punct'), ('*', 'punct'), (',', 'punct'), ('𝜖', 'appos'), ('}', 'punct'), ('\t', 'compound'), ('T', 'appos'), ('’', 'punct')]

>> Bigrams: 
[[Rule, 1], [1, add], [add,  ], [ ,  ], [ , Rule], [Rule, 2], [2, add], [add,  ], [ ,  ], [ , FIRST(T’)=], [FIRST(T’)=, {], [{, *], [*, ,], [,, 𝜖], [𝜖, }], [}, 	], [	, T], [T, ’]]

>> Trigrams: 
[[Rule, 1, add], [1, add,  ], [add,  ,  ], [ ,  , Rule], [ , Rule, 2], [Rule, 2, add], [2, add,  ], [add,  ,  ], [ ,  , FIRST(T’)=], [ , FIRST(T’)=, {], [FIRST(T’)=, {, *], [{, *, ,], [*, ,, 𝜖], [,, 𝜖, }], [𝜖, }, 	], [}, 	, T], [	, T, ’]]

>> Noun Phrases are: 
[Rule, 𝜖, 	T]

>> Named Entities are: 
[]


============================ Sentence 249 =============================

		*	F	T’  	NT	First  	E	{ (,id }  	E’	{ +, 𝜖 }  	T 


>> Tokens are: 
[	, , 	, *, 	, F, 	, T, ’,  	, NT, 	,  	, E, 	, {, (, ,, d, },  	, E, ’, 	, {, +, ,, 𝜖, },  	, T] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('\uf0e0', 'NOUN'), ('\t', 'SPACE'), ('*', 'PUNCT'), ('\t', 'SPACE'), ('F', 'PROPN'), ('\t', 'SPACE'), ('T', 'PROPN'), ('’', 'PUNCT'), (' \t', 'SPACE'), ('NT', 'PROPN'), ('\t', 'SPACE'), (' \t', 'SPACE'), ('E', 'NOUN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('(', 'PUNCT'), (',', 'PUNCT'), ('d', 'NOUN'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('E', 'NOUN'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('+', 'CCONJ'), (',', 'PUNCT'), ('𝜖', 'NOUN'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('T', 'NOUN')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('\uf0e0', 'nmod'), ('\t', 'appos'), ('*', 'punct'), ('\t', 'compound'), ('F', 'compound'), ('\t', 'compound'), ('T', 'appos'), ('’', 'punct'), (' \t', 'appos'), ('NT', 'appos'), ('\t', 'compound'), (' \t', 'compound'), ('E', 'compound'), ('\t', 'ROOT'), ('{', 'punct'), ('(', 'punct'), (',', 'punct'), ('d', 'nmod'), ('}', 'punct'), (' \t', 'compound'), ('E', 'appos'), ('’', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('+', 'appos'), (',', 'punct'), ('𝜖', 'appos'), ('}', 'punct'), (' \t', 'compound'), ('T', 'appos')]

>> Bigrams: 
[[	, ], [, 	], [	, *], [*, 	], [	, F], [F, 	], [	, T], [T, ’], [’,  	], [ 	, NT], [NT, 	], [	,  	], [ 	, E], [E, 	], [	, {], [{, (], [(, ,], [,, d], [d, }], [},  	], [ 	, E], [E, ’], [’, 	], [	, {], [{, +], [+, ,], [,, 𝜖], [𝜖, }], [},  	], [ 	, T]]

>> Trigrams: 
[[	, , 	], [, 	, *], [	, *, 	], [*, 	, F], [	, F, 	], [F, 	, T], [	, T, ’], [T, ’,  	], [’,  	, NT], [ 	, NT, 	], [NT, 	,  	], [	,  	, E], [ 	, E, 	], [E, 	, {], [	, {, (], [{, (, ,], [(, ,, d], [,, d, }], [d, },  	], [},  	, E], [ 	, E, ’], [E, ’, 	], [’, 	, {], [	, {, +], [{, +, ,], [+, ,, 𝜖], [,, 𝜖, }], [𝜖, },  	], [},  	, T]]

>> Noun Phrases are: 
[*	F	T, NT, (,id }  	E, 𝜖,  	T]

>> Named Entities are: 
[('First', 'ORDINAL')]


============================ Sentence 250 =============================

	{ (,id }  	T’	{ *, 𝜖 }  	F	{ (,id }  ETE’ 	E’+TE’ | ϵ 	TFT’ 	T’*FT’ | ϵ 	F(E) | id      Prof. Jay R Dhamsaniya #3130006 


>> Tokens are: 
[	, {, (, ,, d, },  	, T, ’, 	, {, *, ,, 𝜖, },  	, F, 	, {, (, ,, d, },  , ETE, ’, 	, E’+TE, ’, |, ϵ, 	, TFT, ’, 	, T’*FT, ’, |, ϵ, 	, F(E, ), |, d,      , Prof., Jay, R, Dhamsaniya, #, 3130006] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('{', 'PUNCT'), ('(', 'PUNCT'), (',', 'PUNCT'), ('d', 'NOUN'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('T', 'NOUN'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('*', 'PUNCT'), (',', 'PUNCT'), ('𝜖', 'NOUN'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('F', 'PROPN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('(', 'PUNCT'), (',', 'PUNCT'), ('d', 'NOUN'), ('}', 'PUNCT'), (' ', 'SPACE'), ('E\uf0e0TE', 'X'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('E’\uf0e0+TE', 'PROPN'), ('’', 'PUNCT'), ('|', 'NOUN'), ('ϵ', 'NOUN'), ('\t', 'SPACE'), ('T\uf0e0FT', 'VERB'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('T’\uf0e0*FT', 'NOUN'), ('’', 'PUNCT'), ('|', 'NOUN'), ('ϵ', 'NOUN'), ('\t', 'SPACE'), ('F\uf0e0(E', 'NOUN'), (')', 'PUNCT'), ('|', 'NOUN'), ('d', 'NOUN'), ('     ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('{', 'punct'), ('(', 'punct'), (',', 'punct'), ('d', 'appos'), ('}', 'punct'), (' \t', 'compound'), ('T', 'appos'), ('’', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('*', 'punct'), (',', 'punct'), ('𝜖', 'appos'), ('}', 'punct'), (' \t', 'compound'), ('F', 'compound'), ('\t', 'appos'), ('{', 'punct'), ('(', 'punct'), (',', 'punct'), ('d', 'appos'), ('}', 'punct'), (' ', 'punct'), ('E\uf0e0TE', 'appos'), ('’', 'punct'), ('\t', 'compound'), ('E’\uf0e0+TE', 'poss'), ('’', 'punct'), ('|', 'appos'), ('ϵ', 'punct'), ('\t', 'amod'), ('T\uf0e0FT', 'relcl'), ('’', 'punct'), ('\t', 'compound'), ('T’\uf0e0*FT', 'poss'), ('’', 'punct'), ('|', 'dobj'), ('ϵ', 'appos'), ('\t', 'compound'), ('F\uf0e0(E', 'appos'), (')', 'punct'), ('|', 'appos'), ('d', 'compound'), ('     ', 'appos'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'dative'), ('#', 'nmod'), ('3130006', 'appos')]

>> Bigrams: 
[[	, {], [{, (], [(, ,], [,, d], [d, }], [},  	], [ 	, T], [T, ’], [’, 	], [	, {], [{, *], [*, ,], [,, 𝜖], [𝜖, }], [},  	], [ 	, F], [F, 	], [	, {], [{, (], [(, ,], [,, d], [d, }], [},  ], [ , ETE], [ETE, ’], [’, 	], [	, E’+TE], [E’+TE, ’], [’, |], [|, ϵ], [ϵ, 	], [	, TFT], [TFT, ’], [’, 	], [	, T’*FT], [T’*FT, ’], [’, |], [|, ϵ], [ϵ, 	], [	, F(E], [F(E, )], [), |], [|, d], [d,      ], [     , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006]]

>> Trigrams: 
[[	, {, (], [{, (, ,], [(, ,, d], [,, d, }], [d, },  	], [},  	, T], [ 	, T, ’], [T, ’, 	], [’, 	, {], [	, {, *], [{, *, ,], [*, ,, 𝜖], [,, 𝜖, }], [𝜖, },  	], [},  	, F], [ 	, F, 	], [F, 	, {], [	, {, (], [{, (, ,], [(, ,, d], [,, d, }], [d, },  ], [},  , ETE], [ , ETE, ’], [ETE, ’, 	], [’, 	, E’+TE], [	, E’+TE, ’], [E’+TE, ’, |], [’, |, ϵ], [|, ϵ, 	], [ϵ, 	, TFT], [	, TFT, ’], [TFT, ’, 	], [’, 	, T’*FT], [	, T’*FT, ’], [T’*FT, ’, |], [’, |, ϵ], [|, ϵ, 	], [ϵ, 	, F(E], [	, F(E, )], [F(E, ), |], [), |, d], [|, d,      ], [d,      , Prof.], [     , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006]]

>> Noun Phrases are: 
[(,id,  	T, 𝜖, id, 	E’+TE’ |, 	T’*FT’ |, ϵ, 	F(E, |, Prof. Jay R Dhamsaniya]

>> Named Entities are: 
[]


============================ Sentence 251 =============================

(PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[(, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('(', 'punct'), ('PS', 'nsubj'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'dobj'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 252 =============================

Example-3: LL(1) parsing Step 2: Compute FOLLOW FOLLOW(E)  F(E) 


>> Tokens are: 
[Example-3, :, LL(1, ), parsing, Step, 2, :, Compute, FOLLOW, FOLLOW(E, ),  , F(E, )] 

>> PoS Tags are: 
[('Example-3', 'PROPN'), (':', 'PUNCT'), ('LL(1', 'PROPN'), (')', 'PUNCT'), ('parsing', 'VERB'), ('Step', 'NOUN'), ('2', 'NUM'), (':', 'PUNCT'), ('Compute', 'PROPN'), ('FOLLOW', 'PROPN'), ('FOLLOW(E', 'ADV'), (')', 'PUNCT'), (' ', 'SPACE'), ('F\uf0e0(E', 'X'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('Example-3', 'ROOT'), (':', 'punct'), ('LL(1', 'appos'), (')', 'punct'), ('parsing', 'acl'), ('Step', 'dobj'), ('2', 'nummod'), (':', 'punct'), ('Compute', 'compound'), ('FOLLOW', 'npadvmod'), ('FOLLOW(E', 'appos'), (')', 'punct'), (' ', 'compound'), ('F\uf0e0(E', 'appos'), (')', 'punct')]

>> Bigrams: 
[[Example-3, :], [:, LL(1], [LL(1, )], [), parsing], [parsing, Step], [Step, 2], [2, :], [:, Compute], [Compute, FOLLOW], [FOLLOW, FOLLOW(E], [FOLLOW(E, )], [),  ], [ , F(E], [F(E, )]]

>> Trigrams: 
[[Example-3, :, LL(1], [:, LL(1, )], [LL(1, ), parsing], [), parsing, Step], [parsing, Step, 2], [Step, 2, :], [2, :, Compute], [:, Compute, FOLLOW], [Compute, FOLLOW, FOLLOW(E], [FOLLOW, FOLLOW(E, )], [FOLLOW(E, ),  ], [),  , F(E], [ , F(E, )]]

>> Noun Phrases are: 
[Example-3, : LL(1, Step]

>> Named Entities are: 
[('2', 'CARDINAL')]


============================ Sentence 253 =============================

	   	NT	First	Follow  	E	{ (,id }	{ $,) }  	E’	{ +, 𝜖 }	  	T	{ (,id }	  	T’ 


>> Tokens are: 
[	   	, NT, 	, 	, Follow,  	, E, 	, {, (, ,, d, }, 	, {, $, ,, ), },  	, E, ’, 	, {, +, ,, 𝜖, }, 	  	, T, 	, {, (, ,, d, }, 	  	, T, ’] 

>> PoS Tags are: 
[('\t   \t', 'SPACE'), ('NT', 'PROPN'), ('\t', 'SPACE'), ('\t', 'SPACE'), ('Follow', 'PROPN'), (' \t', 'SPACE'), ('E', 'NOUN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('(', 'PUNCT'), (',', 'PUNCT'), ('d', 'X'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('$', 'SYM'), (',', 'PUNCT'), (')', 'PUNCT'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('E', 'NOUN'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('+', 'CCONJ'), (',', 'PUNCT'), ('𝜖', 'VERB'), ('}', 'PUNCT'), ('\t  \t', 'SPACE'), ('T', 'PROPN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('(', 'PUNCT'), (',', 'PUNCT'), ('d', 'NOUN'), ('}', 'PUNCT'), ('\t  \t', 'SPACE'), ('T', 'NOUN'), ('’', 'PUNCT')] 

>> Dependency Tags are: 
[('\t   \t', 'ROOT'), ('NT', 'compound'), ('\t', 'compound'), ('\t', 'compound'), ('Follow', 'compound'), (' \t', 'compound'), ('E', 'compound'), ('\t', 'dobj'), ('{', 'punct'), ('(', 'punct'), (',', 'punct'), ('d', 'meta'), ('}', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('$', 'appos'), (',', 'punct'), (')', 'punct'), ('}', 'punct'), (' \t', 'compound'), ('E', 'appos'), ('’', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('+', 'appos'), (',', 'punct'), ('𝜖', 'appos'), ('}', 'punct'), ('\t  \t', 'compound'), ('T', 'compound'), ('\t', 'appos'), ('{', 'punct'), ('(', 'punct'), (',', 'punct'), ('d', 'meta'), ('}', 'punct'), ('\t  \t', 'compound'), ('T', 'appos'), ('’', 'punct')]

>> Bigrams: 
[[	   	, NT], [NT, 	], [	, 	], [	, Follow], [Follow,  	], [ 	, E], [E, 	], [	, {], [{, (], [(, ,], [,, d], [d, }], [}, 	], [	, {], [{, $], [$, ,], [,, )], [), }], [},  	], [ 	, E], [E, ’], [’, 	], [	, {], [{, +], [+, ,], [,, 𝜖], [𝜖, }], [}, 	  	], [	  	, T], [T, 	], [	, {], [{, (], [(, ,], [,, d], [d, }], [}, 	  	], [	  	, T], [T, ’]]

>> Trigrams: 
[[	   	, NT, 	], [NT, 	, 	], [	, 	, Follow], [	, Follow,  	], [Follow,  	, E], [ 	, E, 	], [E, 	, {], [	, {, (], [{, (, ,], [(, ,, d], [,, d, }], [d, }, 	], [}, 	, {], [	, {, $], [{, $, ,], [$, ,, )], [,, ), }], [), },  	], [},  	, E], [ 	, E, ’], [E, ’, 	], [’, 	, {], [	, {, +], [{, +, ,], [+, ,, 𝜖], [,, 𝜖, }], [𝜖, }, 	  	], [}, 	  	, T], [	  	, T, 	], [T, 	, {], [	, {, (], [{, (, ,], [(, ,, d], [,, d, }], [d, }, 	  	], [}, 	  	, T], [	  	, T, ’]]

>> Noun Phrases are: 
[ 	E, id }	  	T]

>> Named Entities are: 
[('First', 'ORDINAL')]


============================ Sentence 254 =============================

	{ *, 𝜖 }	  	F	{ (,id }	   


>> Tokens are: 
[	, {, *, ,, 𝜖, }, 	  	, F, 	, {, (, ,, d, }, 	  ] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('{', 'PUNCT'), ('*', 'PUNCT'), (',', 'PUNCT'), ('𝜖', 'NOUN'), ('}', 'PUNCT'), ('\t  \t', 'SPACE'), ('F', 'PROPN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('(', 'PUNCT'), (',', 'PUNCT'), ('d', 'NOUN'), ('}', 'PUNCT'), ('\t  ', 'SPACE')] 

>> Dependency Tags are: 
[('\t', 'nmod'), ('{', 'punct'), ('*', 'punct'), (',', 'punct'), ('𝜖', 'appos'), ('}', 'punct'), ('\t  \t', 'compound'), ('F', 'compound'), ('\t', 'ROOT'), ('{', 'punct'), ('(', 'punct'), (',', 'punct'), ('d', 'appos'), ('}', 'punct'), ('\t  ', 'punct')]

>> Bigrams: 
[[	, {], [{, *], [*, ,], [,, 𝜖], [𝜖, }], [}, 	  	], [	  	, F], [F, 	], [	, {], [{, (], [(, ,], [,, d], [d, }], [}, 	  ]]

>> Trigrams: 
[[	, {, *], [{, *, ,], [*, ,, 𝜖], [,, 𝜖, }], [𝜖, }, 	  	], [}, 	  	, F], [	  	, F, 	], [F, 	, {], [	, {, (], [{, (, ,], [(, ,, d], [,, d, }], [d, }, 	  ]]

>> Noun Phrases are: 
[𝜖, id]

>> Named Entities are: 
[]


============================ Sentence 255 =============================

Rule 1: Place $ in FOLLOW(E) FOLLOW(E)={ $, 


>> Tokens are: 
[Rule, 1, :, Place, $, FOLLOW(E, ), FOLLOW(E)=, {, $, ,] 

>> PoS Tags are: 
[('Rule', 'NOUN'), ('1', 'NUM'), (':', 'PUNCT'), ('Place', 'VERB'), ('$', 'SYM'), ('FOLLOW(E', 'ADJ'), (')', 'PUNCT'), ('FOLLOW(E)=', 'PROPN'), ('{', 'PUNCT'), ('$', 'SYM'), (',', 'PUNCT')] 

>> Dependency Tags are: 
[('Rule', 'dep'), ('1', 'nummod'), (':', 'punct'), ('Place', 'ROOT'), ('$', 'intj'), ('FOLLOW(E', 'pobj'), (')', 'punct'), ('FOLLOW(E)=', 'dobj'), ('{', 'punct'), ('$', 'appos'), (',', 'punct')]

>> Bigrams: 
[[Rule, 1], [1, :], [:, Place], [Place, $], [$, FOLLOW(E], [FOLLOW(E, )], [), FOLLOW(E)=], [FOLLOW(E)=, {], [{, $], [$, ,]]

>> Trigrams: 
[[Rule, 1, :], [1, :, Place], [:, Place, $], [Place, $, FOLLOW(E], [$, FOLLOW(E, )], [FOLLOW(E, ), FOLLOW(E)=], [), FOLLOW(E)=, {], [FOLLOW(E)=, {, $], [{, $, ,]]

>> Noun Phrases are: 
[FOLLOW(E)=]

>> Named Entities are: 
[]


============================ Sentence 256 =============================

	F 		(	E	)  	A 			B	  Rule 2  ) }  ETE’ 	E’+TE’ | ϵ 	TFT’ 	T’*FT’ | ϵ 	F(E) | id     Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[	, F, 	, , 	, (, 	, E, 	, ),  	, 	, , 		, B, 	  , Rule, 2,  , ), },  , ETE, ’, 	, E’+TE, ’, |, ϵ, 	, TFT, ’, 	, T’*FT, ’, |, ϵ, 	, F(E, ), |, d,     , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('F', 'PROPN'), ('\t', 'SPACE'), ('\uf0e0', 'PROPN'), ('\t', 'SPACE'), ('(', 'PUNCT'), ('\t', 'SPACE'), ('E', 'PROPN'), ('\t', 'SPACE'), (')', 'PUNCT'), (' \t', 'SPACE'), ('\t', 'SPACE'), ('\uf0e0', 'NOUN'), ('\t\t', 'SPACE'), ('B', 'PROPN'), ('\t  ', 'SPACE'), ('Rule', 'NOUN'), ('2', 'NUM'), (' ', 'SPACE'), (')', 'PUNCT'), ('}', 'PUNCT'), (' ', 'SPACE'), ('E\uf0e0TE', 'X'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('E’\uf0e0+TE', 'PROPN'), ('’', 'PUNCT'), ('|', 'NOUN'), ('ϵ', 'NOUN'), ('\t', 'SPACE'), ('T\uf0e0FT', 'VERB'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('T’\uf0e0*FT', 'NOUN'), ('’', 'PUNCT'), ('|', 'NOUN'), ('ϵ', 'NOUN'), ('\t', 'SPACE'), ('F\uf0e0(E', 'NOUN'), (')', 'PUNCT'), ('|', 'NOUN'), ('d', 'NOUN'), ('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('F', 'compound'), ('\t', 'nsubj'), ('\uf0e0', 'appos'), ('\t', 'conj'), ('(', 'punct'), ('\t', 'compound'), ('E', 'compound'), ('\t', 'appos'), (')', 'punct'), (' \t', 'compound'), ('\t', 'compound'), ('\uf0e0', 'appos'), ('\t\t', 'compound'), ('B', 'dobj'), ('\t  ', 'appos'), ('Rule', 'nsubj'), ('2', 'nummod'), (' ', 'dobj'), (')', 'punct'), ('}', 'punct'), (' ', 'appos'), ('E\uf0e0TE', 'conj'), ('’', 'punct'), ('\t', 'compound'), ('E’\uf0e0+TE', 'poss'), ('’', 'punct'), ('|', 'appos'), ('ϵ', 'punct'), ('\t', 'amod'), ('T\uf0e0FT', 'prep'), ('’', 'punct'), ('\t', 'compound'), ('T’\uf0e0*FT', 'dobj'), ('’', 'punct'), ('|', 'npadvmod'), ('ϵ', 'appos'), ('\t', 'compound'), ('F\uf0e0(E', 'appos'), (')', 'punct'), ('|', 'appos'), ('d', 'meta'), ('    ', 'nummod'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'appos'), ('#', 'nmod'), ('3130006', 'npadvmod'), ('(', 'punct'), ('PS', 'nsubj'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'parataxis'), ('  ', 'nummod'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'appos'), ('‹#›', 'punct'), ('  ', 'appos'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'appos'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'dep')]

>> Bigrams: 
[[	, F], [F, 	], [	, ], [, 	], [	, (], [(, 	], [	, E], [E, 	], [	, )], [),  	], [ 	, 	], [	, ], [, 		], [		, B], [B, 	  ], [	  , Rule], [Rule, 2], [2,  ], [ , )], [), }], [},  ], [ , ETE], [ETE, ’], [’, 	], [	, E’+TE], [E’+TE, ’], [’, |], [|, ϵ], [ϵ, 	], [	, TFT], [TFT, ’], [’, 	], [	, T’*FT], [T’*FT, ’], [’, |], [|, ϵ], [ϵ, 	], [	, F(E], [F(E, )], [), |], [|, d], [d,     ], [    , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[	, F, 	], [F, 	, ], [	, , 	], [, 	, (], [	, (, 	], [(, 	, E], [	, E, 	], [E, 	, )], [	, ),  	], [),  	, 	], [ 	, 	, ], [	, , 		], [, 		, B], [		, B, 	  ], [B, 	  , Rule], [	  , Rule, 2], [Rule, 2,  ], [2,  , )], [ , ), }], [), },  ], [},  , ETE], [ , ETE, ’], [ETE, ’, 	], [’, 	, E’+TE], [	, E’+TE, ’], [E’+TE, ’, |], [’, |, ϵ], [|, ϵ, 	], [ϵ, 	, TFT], [	, TFT, ’], [TFT, ’, 	], [’, 	, T’*FT], [	, T’*FT, ’], [T’*FT, ’, |], [’, |, ϵ], [|, ϵ, 	], [ϵ, 	, F(E], [	, F(E, )], [F(E, ), |], [), |, d], [|, d,     ], [d,     , Prof.], [    , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[,  	A 	, 		B, 	E’+TE’ |, 	T’*FT, ϵ, 	F(E, |, id     Prof. Jay R Dhamsaniya, PS, Unit, Basic Probability, Prof. Dixita B Kagathara, #, (CD, Unit, Theory, I]

>> Named Entities are: 
[('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 257 =============================

Example-3: LL(1) parsing Step 2: Compute FOLLOW FOLLOW(E’) ETE’    E’+TE’ 	  	NT	First	Follow  	E	{ (,id }	{ $,) }  	E’	{ +, 𝜖 }	{ $,) }  	T 


>> Tokens are: 
[Example-3, :, LL(1, ), parsing, Step, 2, :, Compute, FOLLOW, FOLLOW(E, ’, ), ETE, ’,    , E’+TE, ’, 	  	, NT, 	, 	, Follow,  	, E, 	, {, (, ,, d, }, 	, {, $, ,, ), },  	, E, ’, 	, {, +, ,, 𝜖, }, 	, {, $, ,, ), },  	, T] 

>> PoS Tags are: 
[('Example-3', 'PROPN'), (':', 'PUNCT'), ('LL(1', 'PROPN'), (')', 'PUNCT'), ('parsing', 'VERB'), ('Step', 'NOUN'), ('2', 'NUM'), (':', 'PUNCT'), ('Compute', 'PROPN'), ('FOLLOW', 'VERB'), ('FOLLOW(E', 'ADV'), ('’', 'PUNCT'), (')', 'PUNCT'), ('E\uf0e0TE', 'NOUN'), ('’', 'PUNCT'), ('   ', 'SPACE'), ('E’\uf0e0+TE', 'PROPN'), ('’', 'PUNCT'), ('\t  \t', 'SPACE'), ('NT', 'PROPN'), ('\t', 'SPACE'), ('\t', 'SPACE'), ('Follow', 'PROPN'), (' \t', 'SPACE'), ('E', 'NOUN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('(', 'PUNCT'), (',', 'PUNCT'), ('d', 'X'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('$', 'SYM'), (',', 'PUNCT'), (')', 'PUNCT'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('E', 'NOUN'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('+', 'CCONJ'), (',', 'PUNCT'), ('𝜖', 'X'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('$', 'SYM'), (',', 'PUNCT'), (')', 'PUNCT'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('T', 'NOUN')] 

>> Dependency Tags are: 
[('Example-3', 'nsubj'), (':', 'punct'), ('LL(1', 'appos'), (')', 'punct'), ('parsing', 'acl'), ('Step', 'dobj'), ('2', 'nummod'), (':', 'punct'), ('Compute', 'nsubj'), ('FOLLOW', 'compound'), ('FOLLOW(E', 'appos'), ('’', 'punct'), (')', 'punct'), ('E\uf0e0TE', 'appos'), ('’', 'punct'), ('   ', 'nummod'), ('E’\uf0e0+TE', 'nmod'), ('’', 'punct'), ('\t  \t', 'appos'), ('NT', 'compound'), ('\t', 'compound'), ('\t', 'compound'), ('Follow', 'nmod'), (' \t', 'compound'), ('E', 'compound'), ('\t', 'ROOT'), ('{', 'punct'), ('(', 'punct'), (',', 'punct'), ('d', 'meta'), ('}', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('$', 'appos'), (',', 'punct'), (')', 'punct'), ('}', 'punct'), (' \t', 'compound'), ('E', 'appos'), ('’', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('+', 'appos'), (',', 'punct'), ('𝜖', 'appos'), ('}', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('$', 'appos'), (',', 'punct'), (')', 'punct'), ('}', 'punct'), (' \t', 'compound'), ('T', 'appos')]

>> Bigrams: 
[[Example-3, :], [:, LL(1], [LL(1, )], [), parsing], [parsing, Step], [Step, 2], [2, :], [:, Compute], [Compute, FOLLOW], [FOLLOW, FOLLOW(E], [FOLLOW(E, ’], [’, )], [), ETE], [ETE, ’], [’,    ], [   , E’+TE], [E’+TE, ’], [’, 	  	], [	  	, NT], [NT, 	], [	, 	], [	, Follow], [Follow,  	], [ 	, E], [E, 	], [	, {], [{, (], [(, ,], [,, d], [d, }], [}, 	], [	, {], [{, $], [$, ,], [,, )], [), }], [},  	], [ 	, E], [E, ’], [’, 	], [	, {], [{, +], [+, ,], [,, 𝜖], [𝜖, }], [}, 	], [	, {], [{, $], [$, ,], [,, )], [), }], [},  	], [ 	, T]]

>> Trigrams: 
[[Example-3, :, LL(1], [:, LL(1, )], [LL(1, ), parsing], [), parsing, Step], [parsing, Step, 2], [Step, 2, :], [2, :, Compute], [:, Compute, FOLLOW], [Compute, FOLLOW, FOLLOW(E], [FOLLOW, FOLLOW(E, ’], [FOLLOW(E, ’, )], [’, ), ETE], [), ETE, ’], [ETE, ’,    ], [’,    , E’+TE], [   , E’+TE, ’], [E’+TE, ’, 	  	], [’, 	  	, NT], [	  	, NT, 	], [NT, 	, 	], [	, 	, Follow], [	, Follow,  	], [Follow,  	, E], [ 	, E, 	], [E, 	, {], [	, {, (], [{, (, ,], [(, ,, d], [,, d, }], [d, }, 	], [}, 	, {], [	, {, $], [{, $, ,], [$, ,, )], [,, ), }], [), },  	], [},  	, E], [ 	, E, ’], [E, ’, 	], [’, 	, {], [	, {, +], [{, +, ,], [+, ,, 𝜖], [,, 𝜖, }], [𝜖, }, 	], [}, 	, {], [	, {, $], [{, $, ,], [$, ,, )], [,, ), }], [), },  	], [},  	, T]]

>> Noun Phrases are: 
[Example-3, : LL(1, Step, Compute, ETE,  	E,  	T]

>> Named Entities are: 
[('2', 'CARDINAL'), ('First', 'ORDINAL')]


============================ Sentence 258 =============================

	{ (,id }	  	T’	{ *, 𝜖 }	  	F	{ (,id }	   


>> Tokens are: 
[	, {, (, ,, d, }, 	  	, T, ’, 	, {, *, ,, 𝜖, }, 	  	, F, 	, {, (, ,, d, }, 	  ] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('{', 'PUNCT'), ('(', 'PUNCT'), (',', 'PUNCT'), ('d', 'NOUN'), ('}', 'PUNCT'), ('\t  \t', 'SPACE'), ('T', 'NOUN'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('*', 'PUNCT'), (',', 'PUNCT'), ('𝜖', 'NOUN'), ('}', 'PUNCT'), ('\t  \t', 'SPACE'), ('F', 'PROPN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('(', 'PUNCT'), (',', 'PUNCT'), ('d', 'NOUN'), ('}', 'PUNCT'), ('\t  ', 'SPACE')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('{', 'punct'), ('(', 'punct'), (',', 'punct'), ('d', 'meta'), ('}', 'punct'), ('\t  \t', 'compound'), ('T', 'appos'), ('’', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('*', 'punct'), (',', 'punct'), ('𝜖', 'appos'), ('}', 'punct'), ('\t  \t', 'compound'), ('F', 'compound'), ('\t', 'appos'), ('{', 'punct'), ('(', 'punct'), (',', 'punct'), ('d', 'appos'), ('}', 'punct'), ('\t  ', 'punct')]

>> Bigrams: 
[[	, {], [{, (], [(, ,], [,, d], [d, }], [}, 	  	], [	  	, T], [T, ’], [’, 	], [	, {], [{, *], [*, ,], [,, 𝜖], [𝜖, }], [}, 	  	], [	  	, F], [F, 	], [	, {], [{, (], [(, ,], [,, d], [d, }], [}, 	  ]]

>> Trigrams: 
[[	, {, (], [{, (, ,], [(, ,, d], [,, d, }], [d, }, 	  	], [}, 	  	, T], [	  	, T, ’], [T, ’, 	], [’, 	, {], [	, {, *], [{, *, ,], [*, ,, 𝜖], [,, 𝜖, }], [𝜖, }, 	  	], [}, 	  	, F], [	  	, F, 	], [F, 	, {], [	, {, (], [{, (, ,], [(, ,, d], [,, d, }], [d, }, 	  ]]

>> Noun Phrases are: 
[(,id }	  	T, 𝜖, id]

>> Named Entities are: 
[]


============================ Sentence 259 =============================

FOLLOW(E’)={ $,) 


>> Tokens are: 
[FOLLOW(E’)=, {, $, ,, )] 

>> PoS Tags are: 
[('FOLLOW(E’)=', 'NOUN'), ('{', 'PUNCT'), ('$', 'SYM'), (',', 'PUNCT'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('FOLLOW(E’)=', 'ROOT'), ('{', 'punct'), ('$', 'appos'), (',', 'punct'), (')', 'punct')]

>> Bigrams: 
[[FOLLOW(E’)=, {], [{, $], [$, ,], [,, )]]

>> Trigrams: 
[[FOLLOW(E’)=, {, $], [{, $, ,], [$, ,, )]]

>> Noun Phrases are: 
[FOLLOW(E’)=]

>> Named Entities are: 
[]


============================ Sentence 260 =============================

	E 		T	E’  	A 			 


>> Tokens are: 
[	, E, 	, , 	, T, 	, E, ’,  	, 	, , 		] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('E', 'PROPN'), ('\t', 'SPACE'), ('\uf0e0', 'NOUN'), ('\t', 'SPACE'), ('T', 'PROPN'), ('\t', 'SPACE'), ('E', 'NOUN'), ('’', 'PUNCT'), (' \t', 'SPACE'), ('\t', 'SPACE'), ('\uf0e0', 'NOUN'), ('\t\t', 'SPACE')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('E', 'compound'), ('\t', 'compound'), ('\uf0e0', 'compound'), ('\t', 'compound'), ('T', 'compound'), ('\t', 'compound'), ('E', 'ROOT'), ('’', 'punct'), (' \t', 'compound'), ('\t', 'compound'), ('\uf0e0', 'appos'), ('\t\t', 'punct')]

>> Bigrams: 
[[	, E], [E, 	], [	, ], [, 	], [	, T], [T, 	], [	, E], [E, ’], [’,  	], [ 	, 	], [	, ], [, 		]]

>> Trigrams: 
[[	, E, 	], [E, 	, ], [	, , 	], [, 	, T], [	, T, 	], [T, 	, E], [	, E, ’], [E, ’,  	], [’,  	, 	], [ 	, 	, ], [	, , 		]]

>> Noun Phrases are: 
[	E 		T	E,  	A 	]

>> Named Entities are: 
[]


============================ Sentence 261 =============================

B  Rule 3   	E’		+T	E’  	A 			 


>> Tokens are: 
[B,  , Rule, 3,   	, E, ’, 	, , 	, +, T, 	, E, ’,  	, 	, , 		] 

>> PoS Tags are: 
[('B', 'PROPN'), (' ', 'SPACE'), ('Rule', 'VERB'), ('3', 'NUM'), ('  \t', 'SPACE'), ('E', 'NOUN'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('\uf0e0', 'NOUN'), ('\t', 'SPACE'), ('+', 'PROPN'), ('T', 'PROPN'), ('\t', 'SPACE'), ('E', 'NOUN'), ('’', 'PUNCT'), (' \t', 'SPACE'), ('\t', 'SPACE'), ('\uf0e0', 'NOUN'), ('\t\t', 'SPACE')] 

>> Dependency Tags are: 
[('B', 'compound'), (' ', 'nsubj'), ('Rule', 'ROOT'), ('3', 'compound'), ('  \t', 'compound'), ('E', 'dobj'), ('’', 'punct'), ('\t', 'amod'), ('\uf0e0', 'appos'), ('\t', 'dobj'), ('+', 'punct'), ('T', 'compound'), ('\t', 'compound'), ('E', 'appos'), ('’', 'punct'), (' \t', 'compound'), ('\t', 'compound'), ('\uf0e0', 'appos'), ('\t\t', 'punct')]

>> Bigrams: 
[[B,  ], [ , Rule], [Rule, 3], [3,   	], [  	, E], [E, ’], [’, 	], [	, ], [, 	], [	, +], [+, T], [T, 	], [	, E], [E, ’], [’,  	], [ 	, 	], [	, ], [, 		]]

>> Trigrams: 
[[B,  , Rule], [ , Rule, 3], [Rule, 3,   	], [3,   	, E], [  	, E, ’], [E, ’, 	], [’, 	, ], [	, , 	], [, 	, +], [	, +, T], [+, T, 	], [T, 	, E], [	, E, ’], [E, ’,  	], [’,  	, 	], [ 	, 	, ], [	, , 		]]

>> Noun Phrases are: 
[3   	E, 	, T	E,  	A 	]

>> Named Entities are: 
[]


============================ Sentence 262 =============================

B  Rule 3  ETE’ 	E’+TE’ | ϵ 	TFT’ 	T’*FT’ | ϵ 	F(E) | id  }     


>> Tokens are: 
[B,  , Rule, 3,  , ETE, ’, 	, E’+TE, ’, |, ϵ, 	, TFT, ’, 	, T’*FT, ’, |, ϵ, 	, F(E, ), |, d,  , },    ] 

>> PoS Tags are: 
[('B', 'PROPN'), (' ', 'SPACE'), ('Rule', 'VERB'), ('3', 'NUM'), (' ', 'SPACE'), ('E\uf0e0TE', 'X'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('E’\uf0e0+TE', 'PROPN'), ('’', 'PUNCT'), ('|', 'NOUN'), ('ϵ', 'NOUN'), ('\t', 'SPACE'), ('T\uf0e0FT', 'VERB'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('T’\uf0e0*FT', 'NOUN'), ('’', 'PUNCT'), ('|', 'NOUN'), ('ϵ', 'NOUN'), ('\t', 'SPACE'), ('F\uf0e0(E', 'NOUN'), (')', 'PUNCT'), ('|', 'NOUN'), ('d', 'NOUN'), (' ', 'SPACE'), ('}', 'PUNCT'), ('   ', 'SPACE')] 

>> Dependency Tags are: 
[('B', 'compound'), (' ', 'nsubj'), ('Rule', 'ROOT'), ('3', 'nummod'), (' ', 'dobj'), ('E\uf0e0TE', 'prep'), ('’', 'punct'), ('\t', 'compound'), ('E’\uf0e0+TE', 'appos'), ('’', 'punct'), ('|', 'appos'), ('ϵ', 'punct'), ('\t', 'amod'), ('T\uf0e0FT', 'parataxis'), ('’', 'punct'), ('\t', 'compound'), ('T’\uf0e0*FT', 'dobj'), ('’', 'punct'), ('|', 'npadvmod'), ('ϵ', 'appos'), ('\t', 'compound'), ('F\uf0e0(E', 'appos'), (')', 'punct'), ('|', 'appos'), ('d', 'conj'), (' ', 'punct'), ('}', 'punct'), ('   ', 'punct')]

>> Bigrams: 
[[B,  ], [ , Rule], [Rule, 3], [3,  ], [ , ETE], [ETE, ’], [’, 	], [	, E’+TE], [E’+TE, ’], [’, |], [|, ϵ], [ϵ, 	], [	, TFT], [TFT, ’], [’, 	], [	, T’*FT], [T’*FT, ’], [’, |], [|, ϵ], [ϵ, 	], [	, F(E], [F(E, )], [), |], [|, d], [d,  ], [ , }], [},    ]]

>> Trigrams: 
[[B,  , Rule], [ , Rule, 3], [Rule, 3,  ], [3,  , ETE], [ , ETE, ’], [ETE, ’, 	], [’, 	, E’+TE], [	, E’+TE, ’], [E’+TE, ’, |], [’, |, ϵ], [|, ϵ, 	], [ϵ, 	, TFT], [	, TFT, ’], [TFT, ’, 	], [’, 	, T’*FT], [	, T’*FT, ’], [T’*FT, ’, |], [’, |, ϵ], [|, ϵ, 	], [ϵ, 	, F(E], [	, F(E, )], [F(E, ), |], [), |, d], [|, d,  ], [d,  , }], [ , },    ]]

>> Noun Phrases are: 
[	E’+TE, |, 	T’*FT, ϵ, 	F(E, |, id]

>> Named Entities are: 
[]


============================ Sentence 263 =============================

Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'nsubj'), ('#', 'appos'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[Prof. Jay R Dhamsaniya, (PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('Jay R Dhamsaniya', 'ORG'), ('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 264 =============================

Example-3: LL(1) parsing Step 2: Compute FOLLOW FOLLOW(T) ETE’    	  	NT	First	Follow  	E	{ (,id }	{ $,) }  	E’	{ +, 𝜖 }	{ $,) }  	T 


>> Tokens are: 
[Example-3, :, LL(1, ), parsing, Step, 2, :, Compute, FOLLOW, FOLLOW(T, ), ETE, ’,    	  	, NT, 	, 	, Follow,  	, E, 	, {, (, ,, d, }, 	, {, $, ,, ), },  	, E, ’, 	, {, +, ,, 𝜖, }, 	, {, $, ,, ), },  	, T] 

>> PoS Tags are: 
[('Example-3', 'PROPN'), (':', 'PUNCT'), ('LL(1', 'PROPN'), (')', 'PUNCT'), ('parsing', 'VERB'), ('Step', 'NOUN'), ('2', 'NUM'), (':', 'PUNCT'), ('Compute', 'PROPN'), ('FOLLOW', 'PROPN'), ('FOLLOW(T', 'NUM'), (')', 'PUNCT'), ('E\uf0e0TE', 'PROPN'), ('’', 'PUNCT'), ('   \t  \t', 'SPACE'), ('NT', 'PROPN'), ('\t', 'SPACE'), ('\t', 'SPACE'), ('Follow', 'PROPN'), (' \t', 'SPACE'), ('E', 'NOUN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('(', 'PUNCT'), (',', 'PUNCT'), ('d', 'X'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('$', 'SYM'), (',', 'PUNCT'), (')', 'PUNCT'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('E', 'NOUN'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('+', 'CCONJ'), (',', 'PUNCT'), ('𝜖', 'X'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('$', 'SYM'), (',', 'PUNCT'), (')', 'PUNCT'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('T', 'NOUN')] 

>> Dependency Tags are: 
[('Example-3', 'ROOT'), (':', 'punct'), ('LL(1', 'appos'), (')', 'punct'), ('parsing', 'acl'), ('Step', 'dobj'), ('2', 'nummod'), (':', 'punct'), ('Compute', 'compound'), ('FOLLOW', 'appos'), ('FOLLOW(T', 'appos'), (')', 'punct'), ('E\uf0e0TE', 'appos'), ('’', 'punct'), ('   \t  \t', 'compound'), ('NT', 'nsubj'), ('\t', 'compound'), ('\t', 'appos'), ('Follow', 'compound'), (' \t', 'compound'), ('E', 'compound'), ('\t', 'appos'), ('{', 'punct'), ('(', 'punct'), (',', 'punct'), ('d', 'meta'), ('}', 'punct'), ('\t', 'conj'), ('{', 'punct'), ('$', 'appos'), (',', 'punct'), (')', 'punct'), ('}', 'punct'), (' \t', 'compound'), ('E', 'appos'), ('’', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('+', 'appos'), (',', 'punct'), ('𝜖', 'appos'), ('}', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('$', 'appos'), (',', 'punct'), (')', 'punct'), ('}', 'punct'), (' \t', 'compound'), ('T', 'appos')]

>> Bigrams: 
[[Example-3, :], [:, LL(1], [LL(1, )], [), parsing], [parsing, Step], [Step, 2], [2, :], [:, Compute], [Compute, FOLLOW], [FOLLOW, FOLLOW(T], [FOLLOW(T, )], [), ETE], [ETE, ’], [’,    	  	], [   	  	, NT], [NT, 	], [	, 	], [	, Follow], [Follow,  	], [ 	, E], [E, 	], [	, {], [{, (], [(, ,], [,, d], [d, }], [}, 	], [	, {], [{, $], [$, ,], [,, )], [), }], [},  	], [ 	, E], [E, ’], [’, 	], [	, {], [{, +], [+, ,], [,, 𝜖], [𝜖, }], [}, 	], [	, {], [{, $], [$, ,], [,, )], [), }], [},  	], [ 	, T]]

>> Trigrams: 
[[Example-3, :, LL(1], [:, LL(1, )], [LL(1, ), parsing], [), parsing, Step], [parsing, Step, 2], [Step, 2, :], [2, :, Compute], [:, Compute, FOLLOW], [Compute, FOLLOW, FOLLOW(T], [FOLLOW, FOLLOW(T, )], [FOLLOW(T, ), ETE], [), ETE, ’], [ETE, ’,    	  	], [’,    	  	, NT], [   	  	, NT, 	], [NT, 	, 	], [	, 	, Follow], [	, Follow,  	], [Follow,  	, E], [ 	, E, 	], [E, 	, {], [	, {, (], [{, (, ,], [(, ,, d], [,, d, }], [d, }, 	], [}, 	, {], [	, {, $], [{, $, ,], [$, ,, )], [,, ), }], [), },  	], [},  	, E], [ 	, E, ’], [E, ’, 	], [’, 	, {], [	, {, +], [{, +, ,], [+, ,, 𝜖], [,, 𝜖, }], [𝜖, }, 	], [}, 	, {], [	, {, $], [{, $, ,], [$, ,, )], [,, ), }], [), },  	], [},  	, T]]

>> Noun Phrases are: 
[Example-3, : LL(1, Step, Compute FOLLOW, ETE,    	  	NT,  	E,  	T]

>> Named Entities are: 
[('2', 'CARDINAL'), ('’    \t  \tNT\tFirst\tFollow', 'DATE')]


============================ Sentence 265 =============================

	{ (,id }	  	T’	{ *, 𝜖 }	  	F	{ (,id }	  FOLLOW(T)={ +, 	E 			T 


>> Tokens are: 
[	, {, (, ,, d, }, 	  	, T, ’, 	, {, *, ,, 𝜖, }, 	  	, F, 	, {, (, ,, d, }, 	  , FOLLOW(T)=, {, +, ,, 	, E, 	, , 		, T] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('{', 'PUNCT'), ('(', 'PUNCT'), (',', 'PUNCT'), ('d', 'NOUN'), ('}', 'PUNCT'), ('\t  \t', 'SPACE'), ('T', 'NOUN'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('*', 'PUNCT'), (',', 'PUNCT'), ('𝜖', 'NOUN'), ('}', 'PUNCT'), ('\t  \t', 'SPACE'), ('F', 'PROPN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('(', 'PUNCT'), (',', 'PUNCT'), ('d', 'NOUN'), ('}', 'PUNCT'), ('\t  ', 'SPACE'), ('FOLLOW(T)=', 'PUNCT'), ('{', 'PUNCT'), ('+', 'CCONJ'), (',', 'PUNCT'), ('\t', 'SPACE'), ('E', 'PROPN'), ('\t', 'SPACE'), ('\uf0e0', 'NOUN'), ('\t\t', 'SPACE'), ('T', 'PROPN')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('{', 'punct'), ('(', 'punct'), (',', 'punct'), ('d', 'meta'), ('}', 'punct'), ('\t  \t', 'compound'), ('T', 'appos'), ('’', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('*', 'punct'), (',', 'punct'), ('𝜖', 'appos'), ('}', 'punct'), ('\t  \t', 'compound'), ('F', 'compound'), ('\t', 'appos'), ('{', 'punct'), ('(', 'punct'), (',', 'punct'), ('d', 'appos'), ('}', 'punct'), ('\t  ', 'punct'), ('FOLLOW(T)=', 'appos'), ('{', 'punct'), ('+', 'intj'), (',', 'punct'), ('\t', 'compound'), ('E', 'compound'), ('\t', 'compound'), ('\uf0e0', 'appos'), ('\t\t', 'compound'), ('T', 'appos')]

>> Bigrams: 
[[	, {], [{, (], [(, ,], [,, d], [d, }], [}, 	  	], [	  	, T], [T, ’], [’, 	], [	, {], [{, *], [*, ,], [,, 𝜖], [𝜖, }], [}, 	  	], [	  	, F], [F, 	], [	, {], [{, (], [(, ,], [,, d], [d, }], [}, 	  ], [	  , FOLLOW(T)=], [FOLLOW(T)=, {], [{, +], [+, ,], [,, 	], [	, E], [E, 	], [	, ], [, 		], [		, T]]

>> Trigrams: 
[[	, {, (], [{, (, ,], [(, ,, d], [,, d, }], [d, }, 	  	], [}, 	  	, T], [	  	, T, ’], [T, ’, 	], [’, 	, {], [	, {, *], [{, *, ,], [*, ,, 𝜖], [,, 𝜖, }], [𝜖, }, 	  	], [}, 	  	, F], [	  	, F, 	], [F, 	, {], [	, {, (], [{, (, ,], [(, ,, d], [,, d, }], [d, }, 	  ], [}, 	  , FOLLOW(T)=], [	  , FOLLOW(T)=, {], [FOLLOW(T)=, {, +], [{, +, ,], [+, ,, 	], [,, 	, E], [	, E, 	], [E, 	, ], [	, , 		], [, 		, T]]

>> Noun Phrases are: 
[(,id }	  	T, 𝜖, id, 	E 	, 		T]

>> Named Entities are: 
[]


============================ Sentence 266 =============================

	E’  	A 			B	  $, )  	E			T 


>> Tokens are: 
[	, E, ’,  	, 	, , 		, B, 	  , $, ,, ),  	, E, 	, , 		, T] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('E', 'NOUN'), ('’', 'PUNCT'), (' \t', 'SPACE'), ('\t', 'SPACE'), ('\uf0e0', 'NOUN'), ('\t\t', 'SPACE'), ('B', 'PROPN'), ('\t  ', 'SPACE'), ('$', 'SYM'), (',', 'PUNCT'), (')', 'PUNCT'), (' \t', 'SPACE'), ('E', 'NOUN'), ('\t', 'SPACE'), ('\uf0e0', 'NOUN'), ('\t\t', 'SPACE'), ('T', 'PROPN')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('E', 'ROOT'), ('’', 'punct'), (' \t', 'compound'), ('\t', 'compound'), ('\uf0e0', 'appos'), ('\t\t', 'compound'), ('B', 'appos'), ('\t  ', 'appos'), ('$', 'appos'), (',', 'punct'), (')', 'punct'), (' \t', 'compound'), ('E', 'compound'), ('\t', 'compound'), ('\uf0e0', 'appos'), ('\t\t', 'compound'), ('T', 'appos')]

>> Bigrams: 
[[	, E], [E, ’], [’,  	], [ 	, 	], [	, ], [, 		], [		, B], [B, 	  ], [	  , $], [$, ,], [,, )], [),  	], [ 	, E], [E, 	], [	, ], [, 		], [		, T]]

>> Trigrams: 
[[	, E, ’], [E, ’,  	], [’,  	, 	], [ 	, 	, ], [	, , 		], [, 		, B], [		, B, 	  ], [B, 	  , $], [	  , $, ,], [$, ,, )], [,, ),  	], [),  	, E], [ 	, E, 	], [E, 	, ], [	, , 		], [, 		, T]]

>> Noun Phrases are: 
[	E,  	A 	, 		B,  	E	, 		T]

>> Named Entities are: 
[]


============================ Sentence 267 =============================

	E’  	A 			B	  Rule 3   


>> Tokens are: 
[	, E, ’,  	, 	, , 		, B, 	  , Rule, 3,  ] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('E', 'NOUN'), ('’', 'PUNCT'), (' \t', 'SPACE'), ('\t', 'SPACE'), ('\uf0e0', 'NOUN'), ('\t\t', 'SPACE'), ('B', 'PROPN'), ('\t  ', 'SPACE'), ('Rule', 'NOUN'), ('3', 'NUM'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('E', 'nsubj'), ('’', 'punct'), (' \t', 'compound'), ('\t', 'compound'), ('\uf0e0', 'appos'), ('\t\t', 'compound'), ('B', 'appos'), ('\t  ', 'advmod'), ('Rule', 'ROOT'), ('3', 'nummod'), (' ', 'punct')]

>> Bigrams: 
[[	, E], [E, ’], [’,  	], [ 	, 	], [	, ], [, 		], [		, B], [B, 	  ], [	  , Rule], [Rule, 3], [3,  ]]

>> Trigrams: 
[[	, E, ’], [E, ’,  	], [’,  	, 	], [ 	, 	, ], [	, , 		], [, 		, B], [		, B, 	  ], [B, 	  , Rule], [	  , Rule, 3], [Rule, 3,  ]]

>> Noun Phrases are: 
[	E,  	A 	, 		B]

>> Named Entities are: 
[]


============================ Sentence 268 =============================

Rule 2  ETE’ 	E’+TE’ | ϵ 	TFT’ 	T’*FT’ | ϵ 	F(E) | id     Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[Rule, 2,  , ETE, ’, 	, E’+TE, ’, |, ϵ, 	, TFT, ’, 	, T’*FT, ’, |, ϵ, 	, F(E, ), |, d,     , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('Rule', 'NOUN'), ('2', 'NUM'), (' ', 'SPACE'), ('E\uf0e0TE', 'X'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('E’\uf0e0+TE', 'PROPN'), ('’', 'PUNCT'), ('|', 'NOUN'), ('ϵ', 'NOUN'), ('\t', 'SPACE'), ('T\uf0e0FT', 'VERB'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('T’\uf0e0*FT', 'NOUN'), ('’', 'PUNCT'), ('|', 'NOUN'), ('ϵ', 'NOUN'), ('\t', 'SPACE'), ('F\uf0e0(E', 'NOUN'), (')', 'PUNCT'), ('|', 'NOUN'), ('d', 'NOUN'), ('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Rule', 'nmod'), ('2', 'nummod'), (' ', 'dobj'), ('E\uf0e0TE', 'prep'), ('’', 'punct'), ('\t', 'compound'), ('E’\uf0e0+TE', 'appos'), ('’', 'punct'), ('|', 'nsubj'), ('ϵ', 'appos'), ('\t', 'amod'), ('T\uf0e0FT', 'relcl'), ('’', 'punct'), ('\t', 'compound'), ('T’\uf0e0*FT', 'pobj'), ('’', 'punct'), ('|', 'appos'), ('ϵ', 'appos'), ('\t', 'compound'), ('F\uf0e0(E', 'appos'), (')', 'punct'), ('|', 'npadvmod'), ('d', 'meta'), ('    ', 'nummod'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'appos'), ('#', 'nmod'), ('3130006', 'appos'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'dobj'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[Rule, 2], [2,  ], [ , ETE], [ETE, ’], [’, 	], [	, E’+TE], [E’+TE, ’], [’, |], [|, ϵ], [ϵ, 	], [	, TFT], [TFT, ’], [’, 	], [	, T’*FT], [T’*FT, ’], [’, |], [|, ϵ], [ϵ, 	], [	, F(E], [F(E, )], [), |], [|, d], [d,     ], [    , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[Rule, 2,  ], [2,  , ETE], [ , ETE, ’], [ETE, ’, 	], [’, 	, E’+TE], [	, E’+TE, ’], [E’+TE, ’, |], [’, |, ϵ], [|, ϵ, 	], [ϵ, 	, TFT], [	, TFT, ’], [TFT, ’, 	], [’, 	, T’*FT], [	, T’*FT, ’], [T’*FT, ’, |], [’, |, ϵ], [|, ϵ, 	], [ϵ, 	, F(E], [	, F(E, )], [F(E, ), |], [), |, d], [|, d,     ], [d,     , Prof.], [    , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[	E’+TE, ϵ, ’ 	T’*FT, |, ϵ, 	F(E, | id     Prof. Jay R Dhamsaniya, (PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 269 =============================

Example-3: LL(1) parsing Step 2: Compute FOLLOW FOLLOW(T) E’+TE’  	NT	First	Follow  	E	{ (,id }	{ $,) }  	E’	{ +, 𝜖 }	{ $,) }  	T 


>> Tokens are: 
[Example-3, :, LL(1, ), parsing, Step, 2, :, Compute, FOLLOW, FOLLOW(T, ), E’+TE, ’,  	, NT, 	, 	, Follow,  	, E, 	, {, (, ,, d, }, 	, {, $, ,, ), },  	, E, ’, 	, {, +, ,, 𝜖, }, 	, {, $, ,, ), },  	, T] 

>> PoS Tags are: 
[('Example-3', 'PROPN'), (':', 'PUNCT'), ('LL(1', 'PROPN'), (')', 'PUNCT'), ('parsing', 'VERB'), ('Step', 'NOUN'), ('2', 'NUM'), (':', 'PUNCT'), ('Compute', 'PROPN'), ('FOLLOW', 'PROPN'), ('FOLLOW(T', 'NUM'), (')', 'PUNCT'), ('E’\uf0e0+TE', 'PROPN'), ('’', 'PART'), (' \t', 'SPACE'), ('NT', 'PROPN'), ('\t', 'SPACE'), ('\t', 'SPACE'), ('Follow', 'PROPN'), (' \t', 'SPACE'), ('E', 'NOUN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('(', 'PUNCT'), (',', 'PUNCT'), ('d', 'X'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('$', 'SYM'), (',', 'PUNCT'), (')', 'PUNCT'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('E', 'NOUN'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('+', 'CCONJ'), (',', 'PUNCT'), ('𝜖', 'X'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('$', 'SYM'), (',', 'PUNCT'), (')', 'PUNCT'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('T', 'NOUN')] 

>> Dependency Tags are: 
[('Example-3', 'ROOT'), (':', 'punct'), ('LL(1', 'appos'), (')', 'punct'), ('parsing', 'acl'), ('Step', 'dobj'), ('2', 'nummod'), (':', 'punct'), ('Compute', 'compound'), ('FOLLOW', 'appos'), ('FOLLOW(T', 'appos'), (')', 'punct'), ('E’\uf0e0+TE', 'appos'), ('’', 'punct'), (' \t', 'compound'), ('NT', 'appos'), ('\t', 'compound'), ('\t', 'compound'), ('Follow', 'compound'), (' \t', 'compound'), ('E', 'compound'), ('\t', 'appos'), ('{', 'punct'), ('(', 'punct'), (',', 'punct'), ('d', 'meta'), ('}', 'punct'), ('\t', 'conj'), ('{', 'punct'), ('$', 'appos'), (',', 'punct'), (')', 'punct'), ('}', 'punct'), (' \t', 'compound'), ('E', 'appos'), ('’', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('+', 'appos'), (',', 'punct'), ('𝜖', 'appos'), ('}', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('$', 'appos'), (',', 'punct'), (')', 'punct'), ('}', 'punct'), (' \t', 'compound'), ('T', 'appos')]

>> Bigrams: 
[[Example-3, :], [:, LL(1], [LL(1, )], [), parsing], [parsing, Step], [Step, 2], [2, :], [:, Compute], [Compute, FOLLOW], [FOLLOW, FOLLOW(T], [FOLLOW(T, )], [), E’+TE], [E’+TE, ’], [’,  	], [ 	, NT], [NT, 	], [	, 	], [	, Follow], [Follow,  	], [ 	, E], [E, 	], [	, {], [{, (], [(, ,], [,, d], [d, }], [}, 	], [	, {], [{, $], [$, ,], [,, )], [), }], [},  	], [ 	, E], [E, ’], [’, 	], [	, {], [{, +], [+, ,], [,, 𝜖], [𝜖, }], [}, 	], [	, {], [{, $], [$, ,], [,, )], [), }], [},  	], [ 	, T]]

>> Trigrams: 
[[Example-3, :, LL(1], [:, LL(1, )], [LL(1, ), parsing], [), parsing, Step], [parsing, Step, 2], [Step, 2, :], [2, :, Compute], [:, Compute, FOLLOW], [Compute, FOLLOW, FOLLOW(T], [FOLLOW, FOLLOW(T, )], [FOLLOW(T, ), E’+TE], [), E’+TE, ’], [E’+TE, ’,  	], [’,  	, NT], [ 	, NT, 	], [NT, 	, 	], [	, 	, Follow], [	, Follow,  	], [Follow,  	, E], [ 	, E, 	], [E, 	, {], [	, {, (], [{, (, ,], [(, ,, d], [,, d, }], [d, }, 	], [}, 	, {], [	, {, $], [{, $, ,], [$, ,, )], [,, ), }], [), },  	], [},  	, E], [ 	, E, ’], [E, ’, 	], [’, 	, {], [	, {, +], [{, +, ,], [+, ,, 𝜖], [,, 𝜖, }], [𝜖, }, 	], [}, 	, {], [	, {, $], [{, $, ,], [$, ,, )], [,, ), }], [), },  	], [},  	, T]]

>> Noun Phrases are: 
[Example-3, : LL(1, Step, Compute FOLLOW, E’+TE,  	NT,  	E,  	T]

>> Named Entities are: 
[('2', 'CARDINAL'), ('First', 'ORDINAL')]


============================ Sentence 270 =============================

	{ (,id }	{ +,$,) }  	T’	{ *, 𝜖 }	  	F	{ (,id }	  FOLLOW(T)={ +, 	E’ 		+	T	E’  	A 			B	  $, )   


>> Tokens are: 
[	, {, (, ,, d, }, 	, {, +, ,, $, ,, ), },  	, T, ’, 	, {, *, ,, 𝜖, }, 	  	, F, 	, {, (, ,, d, }, 	  , FOLLOW(T)=, {, +, ,, 	, E, ’, 	, , 	, +, 	, T, 	, E, ’,  	, 	, , 		, B, 	  , $, ,, ),  ] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('{', 'PUNCT'), ('(', 'PUNCT'), (',', 'PUNCT'), ('d', 'X'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('+', 'PROPN'), (',', 'PUNCT'), ('$', 'SYM'), (',', 'PUNCT'), (')', 'PUNCT'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('T', 'NOUN'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('*', 'PUNCT'), (',', 'PUNCT'), ('𝜖', 'NOUN'), ('}', 'PUNCT'), ('\t  \t', 'SPACE'), ('F', 'PROPN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('(', 'PUNCT'), (',', 'PUNCT'), ('d', 'NOUN'), ('}', 'PUNCT'), ('\t  ', 'SPACE'), ('FOLLOW(T)=', 'PUNCT'), ('{', 'PUNCT'), ('+', 'CCONJ'), (',', 'PUNCT'), ('\t', 'SPACE'), ('E', 'PROPN'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('\uf0e0', 'NOUN'), ('\t', 'SPACE'), ('+', 'CCONJ'), ('\t', 'SPACE'), ('T', 'PROPN'), ('\t', 'SPACE'), ('E', 'NOUN'), ('’', 'PUNCT'), (' \t', 'SPACE'), ('\t', 'SPACE'), ('\uf0e0', 'NOUN'), ('\t\t', 'SPACE'), ('B', 'PROPN'), ('\t  ', 'SPACE'), ('$', 'SYM'), (',', 'PUNCT'), (')', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('{', 'punct'), ('(', 'punct'), (',', 'punct'), ('d', 'meta'), ('}', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('+', 'appos'), (',', 'punct'), ('$', 'appos'), (',', 'punct'), (')', 'punct'), ('}', 'punct'), (' \t', 'compound'), ('T', 'appos'), ('’', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('*', 'punct'), (',', 'punct'), ('𝜖', 'appos'), ('}', 'punct'), ('\t  \t', 'compound'), ('F', 'compound'), ('\t', 'appos'), ('{', 'punct'), ('(', 'punct'), (',', 'punct'), ('d', 'appos'), ('}', 'punct'), ('\t  ', 'punct'), ('FOLLOW(T)=', 'appos'), ('{', 'punct'), ('+', 'intj'), (',', 'punct'), ('\t', 'compound'), ('E', 'appos'), ('’', 'punct'), ('\t', 'amod'), ('\uf0e0', 'appos'), ('\t', 'appos'), ('+', 'cc'), ('\t', 'compound'), ('T', 'compound'), ('\t', 'compound'), ('E', 'conj'), ('’', 'punct'), (' \t', 'compound'), ('\t', 'compound'), ('\uf0e0', 'appos'), ('\t\t', 'compound'), ('B', 'appos'), ('\t  ', 'appos'), ('$', 'appos'), (',', 'punct'), (')', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[	, {], [{, (], [(, ,], [,, d], [d, }], [}, 	], [	, {], [{, +], [+, ,], [,, $], [$, ,], [,, )], [), }], [},  	], [ 	, T], [T, ’], [’, 	], [	, {], [{, *], [*, ,], [,, 𝜖], [𝜖, }], [}, 	  	], [	  	, F], [F, 	], [	, {], [{, (], [(, ,], [,, d], [d, }], [}, 	  ], [	  , FOLLOW(T)=], [FOLLOW(T)=, {], [{, +], [+, ,], [,, 	], [	, E], [E, ’], [’, 	], [	, ], [, 	], [	, +], [+, 	], [	, T], [T, 	], [	, E], [E, ’], [’,  	], [ 	, 	], [	, ], [, 		], [		, B], [B, 	  ], [	  , $], [$, ,], [,, )], [),  ]]

>> Trigrams: 
[[	, {, (], [{, (, ,], [(, ,, d], [,, d, }], [d, }, 	], [}, 	, {], [	, {, +], [{, +, ,], [+, ,, $], [,, $, ,], [$, ,, )], [,, ), }], [), },  	], [},  	, T], [ 	, T, ’], [T, ’, 	], [’, 	, {], [	, {, *], [{, *, ,], [*, ,, 𝜖], [,, 𝜖, }], [𝜖, }, 	  	], [}, 	  	, F], [	  	, F, 	], [F, 	, {], [	, {, (], [{, (, ,], [(, ,, d], [,, d, }], [d, }, 	  ], [}, 	  , FOLLOW(T)=], [	  , FOLLOW(T)=, {], [FOLLOW(T)=, {, +], [{, +, ,], [+, ,, 	], [,, 	, E], [	, E, ’], [E, ’, 	], [’, 	, ], [	, , 	], [, 	, +], [	, +, 	], [+, 	, T], [	, T, 	], [T, 	, E], [	, E, ’], [E, ’,  	], [’,  	, 	], [ 	, 	, ], [	, , 		], [, 		, B], [		, B, 	  ], [B, 	  , $], [	  , $, ,], [$, ,, )], [,, ),  ]]

>> Noun Phrases are: 
[+,  	T, 𝜖, id, 	E, 	, 	T	E,  	A 	, 		B]

>> Named Entities are: 
[]


============================ Sentence 271 =============================

Rule 3   


>> Tokens are: 
[Rule, 3,  ] 

>> PoS Tags are: 
[('Rule', 'VERB'), ('3', 'NUM'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Rule', 'ROOT'), ('3', 'nummod'), (' ', 'dobj')]

>> Bigrams: 
[[Rule, 3], [3,  ]]

>> Trigrams: 
[[Rule, 3,  ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 272 =============================

Rule 2  	E’ 		+	T	E’  	A 			B	  ETE’ 	E’+TE’ | ϵ 	TFT’ 	T’*FT’ | ϵ 	F(E) | id  }     Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[Rule, 2,  	, E, ’, 	, , 	, +, 	, T, 	, E, ’,  	, 	, , 		, B, 	  , ETE, ’, 	, E’+TE, ’, |, ϵ, 	, TFT, ’, 	, T’*FT, ’, |, ϵ, 	, F(E, ), |, d,  , },     , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('Rule', 'VERB'), ('2', 'NUM'), (' \t', 'SPACE'), ('E', 'NOUN'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('\uf0e0', 'NOUN'), ('\t', 'SPACE'), ('+', 'CCONJ'), ('\t', 'SPACE'), ('T', 'PROPN'), ('\t', 'SPACE'), ('E', 'NOUN'), ('’', 'PUNCT'), (' \t', 'SPACE'), ('\t', 'SPACE'), ('\uf0e0', 'NOUN'), ('\t\t', 'SPACE'), ('B', 'PROPN'), ('\t  ', 'SPACE'), ('E\uf0e0TE', 'X'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('E’\uf0e0+TE', 'PROPN'), ('’', 'PUNCT'), ('|', 'NOUN'), ('ϵ', 'NOUN'), ('\t', 'SPACE'), ('T\uf0e0FT', 'VERB'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('T’\uf0e0*FT', 'NOUN'), ('’', 'PUNCT'), ('|', 'NOUN'), ('ϵ', 'NOUN'), ('\t', 'SPACE'), ('F\uf0e0(E', 'NOUN'), (')', 'PUNCT'), ('|', 'NOUN'), ('d', 'NOUN'), (' ', 'SPACE'), ('}', 'PUNCT'), ('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Rule', 'nmod'), ('2', 'nummod'), (' \t', 'compound'), ('E', 'dobj'), ('’', 'punct'), ('\t', 'amod'), ('\uf0e0', 'appos'), ('\t', 'nummod'), ('+', 'cc'), ('\t', 'compound'), ('T', 'compound'), ('\t', 'compound'), ('E', 'conj'), ('’', 'punct'), (' \t', 'compound'), ('\t', 'compound'), ('\uf0e0', 'nsubj'), ('\t\t', 'compound'), ('B', 'appos'), ('\t  ', 'det'), ('E\uf0e0TE', 'appos'), ('’', 'punct'), ('\t', 'compound'), ('E’\uf0e0+TE', 'poss'), ('’', 'punct'), ('|', 'appos'), ('ϵ', 'appos'), ('\t', 'amod'), ('T\uf0e0FT', 'appos'), ('’', 'punct'), ('\t', 'compound'), ('T’\uf0e0*FT', 'pobj'), ('’', 'punct'), ('|', 'appos'), ('ϵ', 'appos'), ('\t', 'compound'), ('F\uf0e0(E', 'appos'), (')', 'punct'), ('|', 'appos'), ('d', 'appos'), (' ', 'punct'), ('}', 'punct'), ('    ', 'appos'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'appos'), ('#', 'nmod'), ('3130006', 'appos'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'dobj'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[Rule, 2], [2,  	], [ 	, E], [E, ’], [’, 	], [	, ], [, 	], [	, +], [+, 	], [	, T], [T, 	], [	, E], [E, ’], [’,  	], [ 	, 	], [	, ], [, 		], [		, B], [B, 	  ], [	  , ETE], [ETE, ’], [’, 	], [	, E’+TE], [E’+TE, ’], [’, |], [|, ϵ], [ϵ, 	], [	, TFT], [TFT, ’], [’, 	], [	, T’*FT], [T’*FT, ’], [’, |], [|, ϵ], [ϵ, 	], [	, F(E], [F(E, )], [), |], [|, d], [d,  ], [ , }], [},     ], [    , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[Rule, 2,  	], [2,  	, E], [ 	, E, ’], [E, ’, 	], [’, 	, ], [	, , 	], [, 	, +], [	, +, 	], [+, 	, T], [	, T, 	], [T, 	, E], [	, E, ’], [E, ’,  	], [’,  	, 	], [ 	, 	, ], [	, , 		], [, 		, B], [		, B, 	  ], [B, 	  , ETE], [	  , ETE, ’], [ETE, ’, 	], [’, 	, E’+TE], [	, E’+TE, ’], [E’+TE, ’, |], [’, |, ϵ], [|, ϵ, 	], [ϵ, 	, TFT], [	, TFT, ’], [TFT, ’, 	], [’, 	, T’*FT], [	, T’*FT, ’], [T’*FT, ’, |], [’, |, ϵ], [|, ϵ, 	], [ϵ, 	, F(E], [	, F(E, )], [F(E, ), |], [), |, d], [|, d,  ], [d,  , }], [ , },     ], [},     , Prof.], [    , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[2  	E, 	, 		B, 	E’+TE’ |, ϵ, ’ 	T’*FT, |, ϵ, 	F(E, |, id, Prof. Jay R Dhamsaniya, (PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 273 =============================

Example-3: LL(1) parsing Step 2: Compute FOLLOW FOLLOW(T’) TFT’    T’*FT’ 	NT	First	Follow  	E	{ (,id }	{ $,) }  	E’	{ +, 𝜖 }	{ $,) }  	T 


>> Tokens are: 
[Example-3, :, LL(1, ), parsing, Step, 2, :, Compute, FOLLOW, FOLLOW(T, ’, ), TFT, ’,    , T’*FT, ’, 	, NT, 	, 	, Follow,  	, E, 	, {, (, ,, d, }, 	, {, $, ,, ), },  	, E, ’, 	, {, +, ,, 𝜖, }, 	, {, $, ,, ), },  	, T] 

>> PoS Tags are: 
[('Example-3', 'PROPN'), (':', 'PUNCT'), ('LL(1', 'PROPN'), (')', 'PUNCT'), ('parsing', 'VERB'), ('Step', 'NOUN'), ('2', 'NUM'), (':', 'PUNCT'), ('Compute', 'PROPN'), ('FOLLOW', 'PROPN'), ('FOLLOW(T', 'NOUN'), ('’', 'PUNCT'), (')', 'PUNCT'), ('T\uf0e0FT', 'NOUN'), ('’', 'PUNCT'), ('   ', 'SPACE'), ('T’\uf0e0*FT', 'NOUN'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('NT', 'PROPN'), ('\t', 'SPACE'), ('\t', 'SPACE'), ('Follow', 'PROPN'), (' \t', 'SPACE'), ('E', 'NOUN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('(', 'PUNCT'), (',', 'PUNCT'), ('d', 'X'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('$', 'SYM'), (',', 'PUNCT'), (')', 'PUNCT'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('E', 'NOUN'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('+', 'CCONJ'), (',', 'PUNCT'), ('𝜖', 'X'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('$', 'SYM'), (',', 'PUNCT'), (')', 'PUNCT'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('T', 'NOUN')] 

>> Dependency Tags are: 
[('Example-3', 'ROOT'), (':', 'punct'), ('LL(1', 'appos'), (')', 'punct'), ('parsing', 'acl'), ('Step', 'dobj'), ('2', 'nummod'), (':', 'punct'), ('Compute', 'compound'), ('FOLLOW', 'compound'), ('FOLLOW(T', 'appos'), ('’', 'punct'), (')', 'punct'), ('T\uf0e0FT', 'nmod'), ('’', 'punct'), ('   ', 'compound'), ('T’\uf0e0*FT', 'appos'), ('’', 'punct'), ('\t', 'compound'), ('NT', 'compound'), ('\t', 'compound'), ('\t', 'compound'), ('Follow', 'compound'), (' \t', 'compound'), ('E', 'compound'), ('\t', 'appos'), ('{', 'punct'), ('(', 'punct'), (',', 'punct'), ('d', 'meta'), ('}', 'punct'), ('\t', 'conj'), ('{', 'punct'), ('$', 'appos'), (',', 'punct'), (')', 'punct'), ('}', 'punct'), (' \t', 'compound'), ('E', 'appos'), ('’', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('+', 'cc'), (',', 'punct'), ('𝜖', 'amod'), ('}', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('$', 'appos'), (',', 'punct'), (')', 'punct'), ('}', 'punct'), (' \t', 'compound'), ('T', 'appos')]

>> Bigrams: 
[[Example-3, :], [:, LL(1], [LL(1, )], [), parsing], [parsing, Step], [Step, 2], [2, :], [:, Compute], [Compute, FOLLOW], [FOLLOW, FOLLOW(T], [FOLLOW(T, ’], [’, )], [), TFT], [TFT, ’], [’,    ], [   , T’*FT], [T’*FT, ’], [’, 	], [	, NT], [NT, 	], [	, 	], [	, Follow], [Follow,  	], [ 	, E], [E, 	], [	, {], [{, (], [(, ,], [,, d], [d, }], [}, 	], [	, {], [{, $], [$, ,], [,, )], [), }], [},  	], [ 	, E], [E, ’], [’, 	], [	, {], [{, +], [+, ,], [,, 𝜖], [𝜖, }], [}, 	], [	, {], [{, $], [$, ,], [,, )], [), }], [},  	], [ 	, T]]

>> Trigrams: 
[[Example-3, :, LL(1], [:, LL(1, )], [LL(1, ), parsing], [), parsing, Step], [parsing, Step, 2], [Step, 2, :], [2, :, Compute], [:, Compute, FOLLOW], [Compute, FOLLOW, FOLLOW(T], [FOLLOW, FOLLOW(T, ’], [FOLLOW(T, ’, )], [’, ), TFT], [), TFT, ’], [TFT, ’,    ], [’,    , T’*FT], [   , T’*FT, ’], [T’*FT, ’, 	], [’, 	, NT], [	, NT, 	], [NT, 	, 	], [	, 	, Follow], [	, Follow,  	], [Follow,  	, E], [ 	, E, 	], [E, 	, {], [	, {, (], [{, (, ,], [(, ,, d], [,, d, }], [d, }, 	], [}, 	, {], [	, {, $], [{, $, ,], [$, ,, )], [,, ), }], [), },  	], [},  	, E], [ 	, E, ’], [E, ’, 	], [’, 	, {], [	, {, +], [{, +, ,], [+, ,, 𝜖], [,, 𝜖, }], [𝜖, }, 	], [}, 	, {], [	, {, $], [{, $, ,], [$, ,, )], [,, ), }], [), },  	], [},  	, T]]

>> Noun Phrases are: 
[Example-3, : LL(1, Step, Compute FOLLOW FOLLOW(T, TFT’    T’*FT,  	E,  	T]

>> Named Entities are: 
[('2', 'CARDINAL'), ('’ \tNT', 'DATE'), ('First', 'ORDINAL')]


============================ Sentence 274 =============================

	{ (,id }	{ +,$,) }  	T’	{ *, 𝜖 }	{ +,$,) }  	F	{ (,id }	  FOLLOW(T’)={+ $,) 


>> Tokens are: 
[	, {, (, ,, d, }, 	, {, +, ,, $, ,, ), },  	, T, ’, 	, {, *, ,, 𝜖, }, 	, {, +, ,, $, ,, ), },  	, F, 	, {, (, ,, d, }, 	  , FOLLOW(T’)={+, $, ,, )] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('{', 'PUNCT'), ('(', 'PUNCT'), (',', 'PUNCT'), ('d', 'X'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('+', 'PROPN'), (',', 'PUNCT'), ('$', 'SYM'), (',', 'PUNCT'), (')', 'PUNCT'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('T', 'NOUN'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('*', 'PUNCT'), (',', 'PUNCT'), ('𝜖', 'ADJ'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('+', 'PROPN'), (',', 'PUNCT'), ('$', 'SYM'), (',', 'PUNCT'), (')', 'PUNCT'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('F', 'PROPN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('(', 'PUNCT'), (',', 'PUNCT'), ('d', 'NOUN'), ('}', 'PUNCT'), ('\t  ', 'SPACE'), ('FOLLOW(T’)={+', 'PROPN'), ('$', 'SYM'), (',', 'PUNCT'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('{', 'punct'), ('(', 'punct'), (',', 'punct'), ('d', 'meta'), ('}', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('+', 'appos'), (',', 'punct'), ('$', 'appos'), (',', 'punct'), (')', 'punct'), ('}', 'punct'), (' \t', 'compound'), ('T', 'appos'), ('’', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('*', 'punct'), (',', 'punct'), ('𝜖', 'appos'), ('}', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('+', 'appos'), (',', 'punct'), ('$', 'appos'), (',', 'punct'), (')', 'punct'), ('}', 'punct'), (' \t', 'compound'), ('F', 'compound'), ('\t', 'appos'), ('{', 'punct'), ('(', 'punct'), (',', 'punct'), ('d', 'appos'), ('}', 'punct'), ('\t  ', 'punct'), ('FOLLOW(T’)={+', 'appos'), ('$', 'appos'), (',', 'punct'), (')', 'punct')]

>> Bigrams: 
[[	, {], [{, (], [(, ,], [,, d], [d, }], [}, 	], [	, {], [{, +], [+, ,], [,, $], [$, ,], [,, )], [), }], [},  	], [ 	, T], [T, ’], [’, 	], [	, {], [{, *], [*, ,], [,, 𝜖], [𝜖, }], [}, 	], [	, {], [{, +], [+, ,], [,, $], [$, ,], [,, )], [), }], [},  	], [ 	, F], [F, 	], [	, {], [{, (], [(, ,], [,, d], [d, }], [}, 	  ], [	  , FOLLOW(T’)={+], [FOLLOW(T’)={+, $], [$, ,], [,, )]]

>> Trigrams: 
[[	, {, (], [{, (, ,], [(, ,, d], [,, d, }], [d, }, 	], [}, 	, {], [	, {, +], [{, +, ,], [+, ,, $], [,, $, ,], [$, ,, )], [,, ), }], [), },  	], [},  	, T], [ 	, T, ’], [T, ’, 	], [’, 	, {], [	, {, *], [{, *, ,], [*, ,, 𝜖], [,, 𝜖, }], [𝜖, }, 	], [}, 	, {], [	, {, +], [{, +, ,], [+, ,, $], [,, $, ,], [$, ,, )], [,, ), }], [), },  	], [},  	, F], [ 	, F, 	], [F, 	, {], [	, {, (], [{, (, ,], [(, ,, d], [,, d, }], [d, }, 	  ], [}, 	  , FOLLOW(T’)={+], [	  , FOLLOW(T’)={+, $], [FOLLOW(T’)={+, $, ,], [$, ,, )]]

>> Noun Phrases are: 
[+,  	T, +, id, FOLLOW(T’)={+]

>> Named Entities are: 
[]


============================ Sentence 275 =============================

	T		F	T’  	A 			 


>> Tokens are: 
[	, T, 	, , 	, F, 	, T, ’,  	, 	, , 		] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('T', 'PROPN'), ('\t', 'SPACE'), ('\uf0e0', 'PROPN'), ('\t', 'SPACE'), ('F', 'PROPN'), ('\t', 'SPACE'), ('T', 'PROPN'), ('’', 'PUNCT'), (' \t', 'SPACE'), ('\t', 'SPACE'), ('\uf0e0', 'NOUN'), ('\t\t', 'SPACE')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('T', 'compound'), ('\t', 'compound'), ('\uf0e0', 'nmod'), ('\t', 'compound'), ('F', 'compound'), ('\t', 'compound'), ('T', 'ROOT'), ('’', 'punct'), (' \t', 'compound'), ('\t', 'compound'), ('\uf0e0', 'appos'), ('\t\t', 'punct')]

>> Bigrams: 
[[	, T], [T, 	], [	, ], [, 	], [	, F], [F, 	], [	, T], [T, ’], [’,  	], [ 	, 	], [	, ], [, 		]]

>> Trigrams: 
[[	, T, 	], [T, 	, ], [	, , 	], [, 	, F], [	, F, 	], [F, 	, T], [	, T, ’], [T, ’,  	], [’,  	, 	], [ 	, 	, ], [	, , 		]]

>> Noun Phrases are: 
[	T		F	T,  	A 	]

>> Named Entities are: 
[]


============================ Sentence 276 =============================

B  Rule 3   	T’		*F	T’  	A 			 


>> Tokens are: 
[B,  , Rule, 3,   	, T, ’, 	, , 	, *, F, 	, T, ’,  	, 	, , 		] 

>> PoS Tags are: 
[('B', 'PROPN'), (' ', 'SPACE'), ('Rule', 'VERB'), ('3', 'NUM'), ('  \t', 'SPACE'), ('T', 'NOUN'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('\uf0e0', 'NOUN'), ('\t', 'SPACE'), ('*', 'PUNCT'), ('F', 'PROPN'), ('\t', 'SPACE'), ('T', 'PROPN'), ('’', 'PUNCT'), (' \t', 'SPACE'), ('\t', 'SPACE'), ('\uf0e0', 'NOUN'), ('\t\t', 'SPACE')] 

>> Dependency Tags are: 
[('B', 'compound'), (' ', 'nsubj'), ('Rule', 'ROOT'), ('3', 'nummod'), ('  \t', 'compound'), ('T', 'dobj'), ('’', 'punct'), ('\t', 'compound'), ('\uf0e0', 'dep'), ('\t', 'nmod'), ('*', 'punct'), ('F', 'compound'), ('\t', 'compound'), ('T', 'appos'), ('’', 'punct'), (' \t', 'compound'), ('\t', 'compound'), ('\uf0e0', 'appos'), ('\t\t', 'punct')]

>> Bigrams: 
[[B,  ], [ , Rule], [Rule, 3], [3,   	], [  	, T], [T, ’], [’, 	], [	, ], [, 	], [	, *], [*, F], [F, 	], [	, T], [T, ’], [’,  	], [ 	, 	], [	, ], [, 		]]

>> Trigrams: 
[[B,  , Rule], [ , Rule, 3], [Rule, 3,   	], [3,   	, T], [  	, T, ’], [T, ’, 	], [’, 	, ], [	, , 	], [, 	, *], [	, *, F], [*, F, 	], [F, 	, T], [	, T, ’], [T, ’,  	], [’,  	, 	], [ 	, 	, ], [	, , 		]]

>> Noun Phrases are: 
[3   	T, 		*F	T,  	A 	]

>> Named Entities are: 
[]


============================ Sentence 277 =============================

B  Rule 3  ETE’ 	E’+TE’ | ϵ 	TFT’ 	T’*FT’ | ϵ 	F(E) | id  }     


>> Tokens are: 
[B,  , Rule, 3,  , ETE, ’, 	, E’+TE, ’, |, ϵ, 	, TFT, ’, 	, T’*FT, ’, |, ϵ, 	, F(E, ), |, d,  , },    ] 

>> PoS Tags are: 
[('B', 'PROPN'), (' ', 'SPACE'), ('Rule', 'VERB'), ('3', 'NUM'), (' ', 'SPACE'), ('E\uf0e0TE', 'X'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('E’\uf0e0+TE', 'PROPN'), ('’', 'PUNCT'), ('|', 'NOUN'), ('ϵ', 'NOUN'), ('\t', 'SPACE'), ('T\uf0e0FT', 'VERB'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('T’\uf0e0*FT', 'NOUN'), ('’', 'PUNCT'), ('|', 'NOUN'), ('ϵ', 'NOUN'), ('\t', 'SPACE'), ('F\uf0e0(E', 'NOUN'), (')', 'PUNCT'), ('|', 'NOUN'), ('d', 'NOUN'), (' ', 'SPACE'), ('}', 'PUNCT'), ('   ', 'SPACE')] 

>> Dependency Tags are: 
[('B', 'compound'), (' ', 'nsubj'), ('Rule', 'ROOT'), ('3', 'nummod'), (' ', 'dobj'), ('E\uf0e0TE', 'prep'), ('’', 'punct'), ('\t', 'compound'), ('E’\uf0e0+TE', 'appos'), ('’', 'punct'), ('|', 'appos'), ('ϵ', 'punct'), ('\t', 'amod'), ('T\uf0e0FT', 'parataxis'), ('’', 'punct'), ('\t', 'compound'), ('T’\uf0e0*FT', 'dobj'), ('’', 'punct'), ('|', 'npadvmod'), ('ϵ', 'appos'), ('\t', 'compound'), ('F\uf0e0(E', 'appos'), (')', 'punct'), ('|', 'appos'), ('d', 'conj'), (' ', 'punct'), ('}', 'punct'), ('   ', 'punct')]

>> Bigrams: 
[[B,  ], [ , Rule], [Rule, 3], [3,  ], [ , ETE], [ETE, ’], [’, 	], [	, E’+TE], [E’+TE, ’], [’, |], [|, ϵ], [ϵ, 	], [	, TFT], [TFT, ’], [’, 	], [	, T’*FT], [T’*FT, ’], [’, |], [|, ϵ], [ϵ, 	], [	, F(E], [F(E, )], [), |], [|, d], [d,  ], [ , }], [},    ]]

>> Trigrams: 
[[B,  , Rule], [ , Rule, 3], [Rule, 3,  ], [3,  , ETE], [ , ETE, ’], [ETE, ’, 	], [’, 	, E’+TE], [	, E’+TE, ’], [E’+TE, ’, |], [’, |, ϵ], [|, ϵ, 	], [ϵ, 	, TFT], [	, TFT, ’], [TFT, ’, 	], [’, 	, T’*FT], [	, T’*FT, ’], [T’*FT, ’, |], [’, |, ϵ], [|, ϵ, 	], [ϵ, 	, F(E], [	, F(E, )], [F(E, ), |], [), |, d], [|, d,  ], [d,  , }], [ , },    ]]

>> Noun Phrases are: 
[	E’+TE, |, 	T’*FT, ϵ, 	F(E, |, id]

>> Named Entities are: 
[]


============================ Sentence 278 =============================

Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'nsubj'), ('#', 'appos'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[Prof. Jay R Dhamsaniya, (PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('Jay R Dhamsaniya', 'ORG'), ('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 279 =============================

Example-3: LL(1) parsing Step 2: Compute FOLLOW FOLLOW(F) 


>> Tokens are: 
[Example-3, :, LL(1, ), parsing, Step, 2, :, Compute, FOLLOW, FOLLOW(F, )] 

>> PoS Tags are: 
[('Example-3', 'PROPN'), (':', 'PUNCT'), ('LL(1', 'PROPN'), (')', 'PUNCT'), ('parsing', 'VERB'), ('Step', 'NOUN'), ('2', 'NUM'), (':', 'PUNCT'), ('Compute', 'PROPN'), ('FOLLOW', 'PROPN'), ('FOLLOW(F', 'ADV'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('Example-3', 'ROOT'), (':', 'punct'), ('LL(1', 'appos'), (')', 'punct'), ('parsing', 'acl'), ('Step', 'dobj'), ('2', 'nummod'), (':', 'punct'), ('Compute', 'compound'), ('FOLLOW', 'appos'), ('FOLLOW(F', 'nummod'), (')', 'punct')]

>> Bigrams: 
[[Example-3, :], [:, LL(1], [LL(1, )], [), parsing], [parsing, Step], [Step, 2], [2, :], [:, Compute], [Compute, FOLLOW], [FOLLOW, FOLLOW(F], [FOLLOW(F, )]]

>> Trigrams: 
[[Example-3, :, LL(1], [:, LL(1, )], [LL(1, ), parsing], [), parsing, Step], [parsing, Step, 2], [Step, 2, :], [2, :, Compute], [:, Compute, FOLLOW], [Compute, FOLLOW, FOLLOW(F], [FOLLOW, FOLLOW(F, )]]

>> Noun Phrases are: 
[Example-3, : LL(1, Step, Compute FOLLOW]

>> Named Entities are: 
[('2', 'CARDINAL')]


============================ Sentence 280 =============================

TFT’  	NT	First	Follow  	E	{ (,id }	{ $,) }  	E’	{ +, 𝜖 }	{ $,) }  	T 


>> Tokens are: 
[TFT, ’,  	, NT, 	, 	, Follow,  	, E, 	, {, (, ,, d, }, 	, {, $, ,, ), },  	, E, ’, 	, {, +, ,, 𝜖, }, 	, {, $, ,, ), },  	, T] 

>> PoS Tags are: 
[('T\uf0e0FT', 'NOUN'), ('’', 'PUNCT'), (' \t', 'SPACE'), ('NT', 'PROPN'), ('\t', 'SPACE'), ('\t', 'SPACE'), ('Follow', 'PROPN'), (' \t', 'SPACE'), ('E', 'NOUN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('(', 'PUNCT'), (',', 'PUNCT'), ('d', 'X'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('$', 'SYM'), (',', 'PUNCT'), (')', 'PUNCT'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('E', 'NOUN'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('+', 'CCONJ'), (',', 'PUNCT'), ('𝜖', 'X'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('$', 'SYM'), (',', 'PUNCT'), (')', 'PUNCT'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('T', 'NOUN')] 

>> Dependency Tags are: 
[('T\uf0e0FT', 'intj'), ('’', 'punct'), (' \t', 'nummod'), ('NT', 'nmod'), ('\t', 'compound'), ('\t', 'compound'), ('Follow', 'compound'), (' \t', 'compound'), ('E', 'compound'), ('\t', 'pobj'), ('{', 'punct'), ('(', 'punct'), (',', 'punct'), ('d', 'meta'), ('}', 'punct'), ('\t', 'conj'), ('{', 'punct'), ('$', 'appos'), (',', 'punct'), (')', 'punct'), ('}', 'punct'), (' \t', 'compound'), ('E', 'nmod'), ('’', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('+', 'cc'), (',', 'punct'), ('𝜖', 'amod'), ('}', 'punct'), ('\t', 'ROOT'), ('{', 'punct'), ('$', 'appos'), (',', 'punct'), (')', 'punct'), ('}', 'punct'), (' \t', 'compound'), ('T', 'appos')]

>> Bigrams: 
[[TFT, ’], [’,  	], [ 	, NT], [NT, 	], [	, 	], [	, Follow], [Follow,  	], [ 	, E], [E, 	], [	, {], [{, (], [(, ,], [,, d], [d, }], [}, 	], [	, {], [{, $], [$, ,], [,, )], [), }], [},  	], [ 	, E], [E, ’], [’, 	], [	, {], [{, +], [+, ,], [,, 𝜖], [𝜖, }], [}, 	], [	, {], [{, $], [$, ,], [,, )], [), }], [},  	], [ 	, T]]

>> Trigrams: 
[[TFT, ’,  	], [’,  	, NT], [ 	, NT, 	], [NT, 	, 	], [	, 	, Follow], [	, Follow,  	], [Follow,  	, E], [ 	, E, 	], [E, 	, {], [	, {, (], [{, (, ,], [(, ,, d], [,, d, }], [d, }, 	], [}, 	, {], [	, {, $], [{, $, ,], [$, ,, )], [,, ), }], [), },  	], [},  	, E], [ 	, E, ’], [E, ’, 	], [’, 	, {], [	, {, +], [{, +, ,], [+, ,, 𝜖], [,, 𝜖, }], [𝜖, }, 	], [}, 	, {], [	, {, $], [{, $, ,], [$, ,, )], [,, ), }], [), },  	], [},  	, T]]

>> Noun Phrases are: 
[ 	T]

>> Named Entities are: 
[('First', 'ORDINAL')]


============================ Sentence 281 =============================

	{ (,id }	{ +,$,) }  	T’	{ *, 𝜖 }	{ +,$,) }  	F	{ (,id }	   


>> Tokens are: 
[	, {, (, ,, d, }, 	, {, +, ,, $, ,, ), },  	, T, ’, 	, {, *, ,, 𝜖, }, 	, {, +, ,, $, ,, ), },  	, F, 	, {, (, ,, d, }, 	  ] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('{', 'PUNCT'), ('(', 'PUNCT'), (',', 'PUNCT'), ('d', 'X'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('+', 'PROPN'), (',', 'PUNCT'), ('$', 'SYM'), (',', 'PUNCT'), (')', 'PUNCT'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('T', 'NOUN'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('*', 'PUNCT'), (',', 'PUNCT'), ('𝜖', 'ADJ'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('+', 'PROPN'), (',', 'PUNCT'), ('$', 'SYM'), (',', 'PUNCT'), (')', 'PUNCT'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('F', 'PROPN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('(', 'PUNCT'), (',', 'PUNCT'), ('d', 'NOUN'), ('}', 'PUNCT'), ('\t  ', 'SPACE')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('{', 'punct'), ('(', 'punct'), (',', 'punct'), ('d', 'meta'), ('}', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('+', 'appos'), (',', 'punct'), ('$', 'appos'), (',', 'punct'), (')', 'punct'), ('}', 'punct'), (' \t', 'compound'), ('T', 'appos'), ('’', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('*', 'punct'), (',', 'punct'), ('𝜖', 'appos'), ('}', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('+', 'appos'), (',', 'punct'), ('$', 'appos'), (',', 'punct'), (')', 'punct'), ('}', 'punct'), (' \t', 'compound'), ('F', 'compound'), ('\t', 'appos'), ('{', 'punct'), ('(', 'punct'), (',', 'punct'), ('d', 'appos'), ('}', 'punct'), ('\t  ', 'punct')]

>> Bigrams: 
[[	, {], [{, (], [(, ,], [,, d], [d, }], [}, 	], [	, {], [{, +], [+, ,], [,, $], [$, ,], [,, )], [), }], [},  	], [ 	, T], [T, ’], [’, 	], [	, {], [{, *], [*, ,], [,, 𝜖], [𝜖, }], [}, 	], [	, {], [{, +], [+, ,], [,, $], [$, ,], [,, )], [), }], [},  	], [ 	, F], [F, 	], [	, {], [{, (], [(, ,], [,, d], [d, }], [}, 	  ]]

>> Trigrams: 
[[	, {, (], [{, (, ,], [(, ,, d], [,, d, }], [d, }, 	], [}, 	, {], [	, {, +], [{, +, ,], [+, ,, $], [,, $, ,], [$, ,, )], [,, ), }], [), },  	], [},  	, T], [ 	, T, ’], [T, ’, 	], [’, 	, {], [	, {, *], [{, *, ,], [*, ,, 𝜖], [,, 𝜖, }], [𝜖, }, 	], [}, 	, {], [	, {, +], [{, +, ,], [+, ,, $], [,, $, ,], [$, ,, )], [,, ), }], [), },  	], [},  	, F], [ 	, F, 	], [F, 	, {], [	, {, (], [{, (, ,], [(, ,, d], [,, d, }], [d, }, 	  ]]

>> Noun Phrases are: 
[+,  	T, +, id]

>> Named Entities are: 
[]


============================ Sentence 282 =============================

FOLLOW(F)={ *, 	T 			F	T’  	A 			B	   + ,$ , )  	T 


>> Tokens are: 
[FOLLOW(F)=, {, *, ,, 	, T, 	, , 		, F, 	, T, ’,  	, 	, , 		, B, 	   , +, ,, $, ,, ),  	, T] 

>> PoS Tags are: 
[('FOLLOW(F)=', 'PROPN'), ('{', 'PUNCT'), ('*', 'PUNCT'), (',', 'PUNCT'), ('\t', 'SPACE'), ('T', 'PROPN'), ('\t', 'SPACE'), ('\uf0e0', 'NOUN'), ('\t\t', 'SPACE'), ('F', 'PROPN'), ('\t', 'SPACE'), ('T', 'PROPN'), ('’', 'PUNCT'), (' \t', 'SPACE'), ('\t', 'SPACE'), ('\uf0e0', 'NOUN'), ('\t\t', 'SPACE'), ('B', 'PROPN'), ('\t   ', 'SPACE'), ('+', 'ADV'), (',', 'PUNCT'), ('$', 'SYM'), (',', 'PUNCT'), (')', 'PUNCT'), (' \t', 'SPACE'), ('T', 'NOUN')] 

>> Dependency Tags are: 
[('FOLLOW(F)=', 'dep'), ('{', 'punct'), ('*', 'punct'), (',', 'punct'), ('\t', 'compound'), ('T', 'compound'), ('\t', 'compound'), ('\uf0e0', 'appos'), ('\t\t', 'compound'), ('F', 'compound'), ('\t', 'compound'), ('T', 'appos'), ('’', 'punct'), (' \t', 'compound'), ('\t', 'compound'), ('\uf0e0', 'nmod'), ('\t\t', 'compound'), ('B', 'compound'), ('\t   ', 'ROOT'), ('+', 'nummod'), (',', 'punct'), ('$', 'appos'), (',', 'punct'), (')', 'punct'), (' \t', 'compound'), ('T', 'appos')]

>> Bigrams: 
[[FOLLOW(F)=, {], [{, *], [*, ,], [,, 	], [	, T], [T, 	], [	, ], [, 		], [		, F], [F, 	], [	, T], [T, ’], [’,  	], [ 	, 	], [	, ], [, 		], [		, B], [B, 	   ], [	   , +], [+, ,], [,, $], [$, ,], [,, )], [),  	], [ 	, T]]

>> Trigrams: 
[[FOLLOW(F)=, {, *], [{, *, ,], [*, ,, 	], [,, 	, T], [	, T, 	], [T, 	, ], [	, , 		], [, 		, F], [		, F, 	], [F, 	, T], [	, T, ’], [T, ’,  	], [’,  	, 	], [ 	, 	, ], [	, , 		], [, 		, B], [		, B, 	   ], [B, 	   , +], [	   , +, ,], [+, ,, $], [,, $, ,], [$, ,, )], [,, ),  	], [),  	, T]]

>> Noun Phrases are: 
[	T 	, 		F	T,  	T]

>> Named Entities are: 
[]


============================ Sentence 283 =============================

			F	T’  	A 			B	   


>> Tokens are: 
[	, , 		, F, 	, T, ’,  	, 	, , 		, B, 	  ] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('\uf0e0', 'NOUN'), ('\t\t', 'SPACE'), ('F', 'PROPN'), ('\t', 'SPACE'), ('T', 'PROPN'), ('’', 'PUNCT'), (' \t', 'SPACE'), ('\t', 'SPACE'), ('\uf0e0', 'NOUN'), ('\t\t', 'SPACE'), ('B', 'PROPN'), ('\t  ', 'SPACE')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('\uf0e0', 'ROOT'), ('\t\t', 'compound'), ('F', 'compound'), ('\t', 'compound'), ('T', 'appos'), ('’', 'punct'), (' \t', 'compound'), ('\t', 'compound'), ('\uf0e0', 'appos'), ('\t\t', 'compound'), ('B', 'appos'), ('\t  ', 'appos')]

>> Bigrams: 
[[	, ], [, 		], [		, F], [F, 	], [	, T], [T, ’], [’,  	], [ 	, 	], [	, ], [, 		], [		, B], [B, 	  ]]

>> Trigrams: 
[[	, , 		], [, 		, F], [		, F, 	], [F, 	, T], [	, T, ’], [T, ’,  	], [’,  	, 	], [ 	, 	, ], [	, , 		], [, 		, B], [		, B, 	  ]]

>> Noun Phrases are: 
[	, 		F	T,  	A 	, 		B]

>> Named Entities are: 
[]


============================ Sentence 284 =============================

Rule 3   


>> Tokens are: 
[Rule, 3,  ] 

>> PoS Tags are: 
[('Rule', 'NOUN'), ('3', 'NUM'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Rule', 'ROOT'), ('3', 'nummod'), (' ', 'punct')]

>> Bigrams: 
[[Rule, 3], [3,  ]]

>> Trigrams: 
[[Rule, 3,  ]]

>> Noun Phrases are: 
[Rule]

>> Named Entities are: 
[]


============================ Sentence 285 =============================

Rule 2  ETE’ 	E’+TE’ | ϵ 	TFT’ 	T’*FT’ | ϵ 	F(E) | id     Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[Rule, 2,  , ETE, ’, 	, E’+TE, ’, |, ϵ, 	, TFT, ’, 	, T’*FT, ’, |, ϵ, 	, F(E, ), |, d,     , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('Rule', 'NOUN'), ('2', 'NUM'), (' ', 'SPACE'), ('E\uf0e0TE', 'X'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('E’\uf0e0+TE', 'PROPN'), ('’', 'PUNCT'), ('|', 'NOUN'), ('ϵ', 'NOUN'), ('\t', 'SPACE'), ('T\uf0e0FT', 'VERB'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('T’\uf0e0*FT', 'NOUN'), ('’', 'PUNCT'), ('|', 'NOUN'), ('ϵ', 'NOUN'), ('\t', 'SPACE'), ('F\uf0e0(E', 'NOUN'), (')', 'PUNCT'), ('|', 'NOUN'), ('d', 'NOUN'), ('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Rule', 'nmod'), ('2', 'nummod'), (' ', 'dobj'), ('E\uf0e0TE', 'prep'), ('’', 'punct'), ('\t', 'compound'), ('E’\uf0e0+TE', 'appos'), ('’', 'punct'), ('|', 'nsubj'), ('ϵ', 'appos'), ('\t', 'amod'), ('T\uf0e0FT', 'relcl'), ('’', 'punct'), ('\t', 'compound'), ('T’\uf0e0*FT', 'pobj'), ('’', 'punct'), ('|', 'appos'), ('ϵ', 'appos'), ('\t', 'compound'), ('F\uf0e0(E', 'appos'), (')', 'punct'), ('|', 'npadvmod'), ('d', 'meta'), ('    ', 'nummod'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'appos'), ('#', 'nmod'), ('3130006', 'appos'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'dobj'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[Rule, 2], [2,  ], [ , ETE], [ETE, ’], [’, 	], [	, E’+TE], [E’+TE, ’], [’, |], [|, ϵ], [ϵ, 	], [	, TFT], [TFT, ’], [’, 	], [	, T’*FT], [T’*FT, ’], [’, |], [|, ϵ], [ϵ, 	], [	, F(E], [F(E, )], [), |], [|, d], [d,     ], [    , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[Rule, 2,  ], [2,  , ETE], [ , ETE, ’], [ETE, ’, 	], [’, 	, E’+TE], [	, E’+TE, ’], [E’+TE, ’, |], [’, |, ϵ], [|, ϵ, 	], [ϵ, 	, TFT], [	, TFT, ’], [TFT, ’, 	], [’, 	, T’*FT], [	, T’*FT, ’], [T’*FT, ’, |], [’, |, ϵ], [|, ϵ, 	], [ϵ, 	, F(E], [	, F(E, )], [F(E, ), |], [), |, d], [|, d,     ], [d,     , Prof.], [    , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[	E’+TE, ϵ, ’ 	T’*FT, |, ϵ, 	F(E, | id     Prof. Jay R Dhamsaniya, (PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 286 =============================

Example-3: LL(1) parsing Step 2: Compute FOLLOW FOLLOW(F) T’*FT’    	   	NT	First	Follow  	E	{ (,id }	{ $,) }  	E’	{ +, 𝜖 }	{ $,) }  	T 


>> Tokens are: 
[Example-3, :, LL(1, ), parsing, Step, 2, :, Compute, FOLLOW, FOLLOW(F, ), T’*FT, ’,    	   	, NT, 	, 	, Follow,  	, E, 	, {, (, ,, d, }, 	, {, $, ,, ), },  	, E, ’, 	, {, +, ,, 𝜖, }, 	, {, $, ,, ), },  	, T] 

>> PoS Tags are: 
[('Example-3', 'PROPN'), (':', 'PUNCT'), ('LL(1', 'PROPN'), (')', 'PUNCT'), ('parsing', 'VERB'), ('Step', 'NOUN'), ('2', 'NUM'), (':', 'PUNCT'), ('Compute', 'PROPN'), ('FOLLOW', 'PROPN'), ('FOLLOW(F', 'PROPN'), (')', 'PUNCT'), ('T’\uf0e0*FT', 'NOUN'), ('’', 'PART'), ('   \t   \t', 'SPACE'), ('NT', 'PROPN'), ('\t', 'SPACE'), ('\t', 'SPACE'), ('Follow', 'PROPN'), (' \t', 'SPACE'), ('E', 'NOUN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('(', 'PUNCT'), (',', 'PUNCT'), ('d', 'X'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('$', 'SYM'), (',', 'PUNCT'), (')', 'PUNCT'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('E', 'NOUN'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('+', 'CCONJ'), (',', 'PUNCT'), ('𝜖', 'X'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('$', 'SYM'), (',', 'PUNCT'), (')', 'PUNCT'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('T', 'NOUN')] 

>> Dependency Tags are: 
[('Example-3', 'ROOT'), (':', 'punct'), ('LL(1', 'appos'), (')', 'punct'), ('parsing', 'acl'), ('Step', 'dobj'), ('2', 'nummod'), (':', 'punct'), ('Compute', 'compound'), ('FOLLOW', 'appos'), ('FOLLOW(F', 'nummod'), (')', 'punct'), ('T’\uf0e0*FT', 'conj'), ('’', 'punct'), ('   \t   \t', 'compound'), ('NT', 'appos'), ('\t', 'compound'), ('\t', 'compound'), ('Follow', 'compound'), (' \t', 'compound'), ('E', 'compound'), ('\t', 'appos'), ('{', 'punct'), ('(', 'punct'), (',', 'punct'), ('d', 'meta'), ('}', 'punct'), ('\t', 'conj'), ('{', 'punct'), ('$', 'appos'), (',', 'punct'), (')', 'punct'), ('}', 'punct'), (' \t', 'compound'), ('E', 'appos'), ('’', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('+', 'appos'), (',', 'punct'), ('𝜖', 'appos'), ('}', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('$', 'appos'), (',', 'punct'), (')', 'punct'), ('}', 'punct'), (' \t', 'compound'), ('T', 'appos')]

>> Bigrams: 
[[Example-3, :], [:, LL(1], [LL(1, )], [), parsing], [parsing, Step], [Step, 2], [2, :], [:, Compute], [Compute, FOLLOW], [FOLLOW, FOLLOW(F], [FOLLOW(F, )], [), T’*FT], [T’*FT, ’], [’,    	   	], [   	   	, NT], [NT, 	], [	, 	], [	, Follow], [Follow,  	], [ 	, E], [E, 	], [	, {], [{, (], [(, ,], [,, d], [d, }], [}, 	], [	, {], [{, $], [$, ,], [,, )], [), }], [},  	], [ 	, E], [E, ’], [’, 	], [	, {], [{, +], [+, ,], [,, 𝜖], [𝜖, }], [}, 	], [	, {], [{, $], [$, ,], [,, )], [), }], [},  	], [ 	, T]]

>> Trigrams: 
[[Example-3, :, LL(1], [:, LL(1, )], [LL(1, ), parsing], [), parsing, Step], [parsing, Step, 2], [Step, 2, :], [2, :, Compute], [:, Compute, FOLLOW], [Compute, FOLLOW, FOLLOW(F], [FOLLOW, FOLLOW(F, )], [FOLLOW(F, ), T’*FT], [), T’*FT, ’], [T’*FT, ’,    	   	], [’,    	   	, NT], [   	   	, NT, 	], [NT, 	, 	], [	, 	, Follow], [	, Follow,  	], [Follow,  	, E], [ 	, E, 	], [E, 	, {], [	, {, (], [{, (, ,], [(, ,, d], [,, d, }], [d, }, 	], [}, 	, {], [	, {, $], [{, $, ,], [$, ,, )], [,, ), }], [), },  	], [},  	, E], [ 	, E, ’], [E, ’, 	], [’, 	, {], [	, {, +], [{, +, ,], [+, ,, 𝜖], [,, 𝜖, }], [𝜖, }, 	], [}, 	, {], [	, {, $], [{, $, ,], [$, ,, )], [,, ), }], [), },  	], [},  	, T]]

>> Noun Phrases are: 
[Example-3, : LL(1, Step, Compute FOLLOW, T’*FT,    	   	NT,  	E,  	T]

>> Named Entities are: 
[('2', 'CARDINAL'), ('First', 'ORDINAL')]


============================ Sentence 287 =============================

	{ (,id }	{ +,$,) }  	T’	{ *, 𝜖 }	{ +,$,) }  	F	{ (,id }	{*,+,$,)}   


>> Tokens are: 
[	, {, (, ,, d, }, 	, {, +, ,, $, ,, ), },  	, T, ’, 	, {, *, ,, 𝜖, }, 	, {, +, ,, $, ,, ), },  	, F, 	, {, (, ,, d, }, 	, {, *, ,, +, ,, $, ,, ), },  ] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('{', 'PUNCT'), ('(', 'PUNCT'), (',', 'PUNCT'), ('d', 'X'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('+', 'PROPN'), (',', 'PUNCT'), ('$', 'SYM'), (',', 'PUNCT'), (')', 'PUNCT'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('T', 'NOUN'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('*', 'PUNCT'), (',', 'PUNCT'), ('𝜖', 'ADJ'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('+', 'PROPN'), (',', 'PUNCT'), ('$', 'SYM'), (',', 'PUNCT'), (')', 'PUNCT'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('F', 'PROPN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('(', 'PUNCT'), (',', 'PUNCT'), ('d', 'X'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('*', 'PUNCT'), (',', 'PUNCT'), ('+', 'ADJ'), (',', 'PUNCT'), ('$', 'SYM'), (',', 'PUNCT'), (')', 'PUNCT'), ('}', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('{', 'punct'), ('(', 'punct'), (',', 'punct'), ('d', 'meta'), ('}', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('+', 'appos'), (',', 'punct'), ('$', 'appos'), (',', 'punct'), (')', 'punct'), ('}', 'punct'), (' \t', 'compound'), ('T', 'appos'), ('’', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('*', 'punct'), (',', 'punct'), ('𝜖', 'appos'), ('}', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('+', 'appos'), (',', 'punct'), ('$', 'appos'), (',', 'punct'), (')', 'punct'), ('}', 'punct'), (' \t', 'compound'), ('F', 'compound'), ('\t', 'appos'), ('{', 'punct'), ('(', 'punct'), (',', 'punct'), ('d', 'meta'), ('}', 'punct'), ('\t', 'conj'), ('{', 'punct'), ('*', 'punct'), (',', 'punct'), ('+', 'appos'), (',', 'punct'), ('$', 'appos'), (',', 'punct'), (')', 'punct'), ('}', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[	, {], [{, (], [(, ,], [,, d], [d, }], [}, 	], [	, {], [{, +], [+, ,], [,, $], [$, ,], [,, )], [), }], [},  	], [ 	, T], [T, ’], [’, 	], [	, {], [{, *], [*, ,], [,, 𝜖], [𝜖, }], [}, 	], [	, {], [{, +], [+, ,], [,, $], [$, ,], [,, )], [), }], [},  	], [ 	, F], [F, 	], [	, {], [{, (], [(, ,], [,, d], [d, }], [}, 	], [	, {], [{, *], [*, ,], [,, +], [+, ,], [,, $], [$, ,], [,, )], [), }], [},  ]]

>> Trigrams: 
[[	, {, (], [{, (, ,], [(, ,, d], [,, d, }], [d, }, 	], [}, 	, {], [	, {, +], [{, +, ,], [+, ,, $], [,, $, ,], [$, ,, )], [,, ), }], [), },  	], [},  	, T], [ 	, T, ’], [T, ’, 	], [’, 	, {], [	, {, *], [{, *, ,], [*, ,, 𝜖], [,, 𝜖, }], [𝜖, }, 	], [}, 	, {], [	, {, +], [{, +, ,], [+, ,, $], [,, $, ,], [$, ,, )], [,, ), }], [), },  	], [},  	, F], [ 	, F, 	], [F, 	, {], [	, {, (], [{, (, ,], [(, ,, d], [,, d, }], [d, }, 	], [}, 	, {], [	, {, *], [{, *, ,], [*, ,, +], [,, +, ,], [+, ,, $], [,, $, ,], [$, ,, )], [,, ), }], [), },  ]]

>> Noun Phrases are: 
[+,  	T, +]

>> Named Entities are: 
[]


============================ Sentence 288 =============================

FOLLOW(F)={ *,+, 	T’ 


>> Tokens are: 
[FOLLOW(F)=, {, *, ,, +, ,, 	, T, ’] 

>> PoS Tags are: 
[('FOLLOW(F)=', 'PROPN'), ('{', 'PUNCT'), ('*', 'PUNCT'), (',', 'PUNCT'), ('+', 'CCONJ'), (',', 'PUNCT'), ('\t', 'SPACE'), ('T', 'PROPN'), ('’', 'PUNCT')] 

>> Dependency Tags are: 
[('FOLLOW(F)=', 'ROOT'), ('{', 'punct'), ('*', 'punct'), (',', 'punct'), ('+', 'appos'), (',', 'punct'), ('\t', 'compound'), ('T', 'appos'), ('’', 'punct')]

>> Bigrams: 
[[FOLLOW(F)=, {], [{, *], [*, ,], [,, +], [+, ,], [,, 	], [	, T], [T, ’]]

>> Trigrams: 
[[FOLLOW(F)=, {, *], [{, *, ,], [*, ,, +], [,, +, ,], [+, ,, 	], [,, 	, T], [	, T, ’]]

>> Noun Phrases are: 
[FOLLOW(F)=, 	T]

>> Named Entities are: 
[]


============================ Sentence 289 =============================

		*	F	T’  	A 			B	  $, )   


>> Tokens are: 
[	, , 	, *, 	, F, 	, T, ’,  	, 	, , 		, B, 	  , $, ,, ),  ] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('\uf0e0', 'NOUN'), ('\t', 'SPACE'), ('*', 'PUNCT'), ('\t', 'SPACE'), ('F', 'PROPN'), ('\t', 'SPACE'), ('T', 'PROPN'), ('’', 'PUNCT'), (' \t', 'SPACE'), ('\t', 'SPACE'), ('\uf0e0', 'NOUN'), ('\t\t', 'SPACE'), ('B', 'PROPN'), ('\t  ', 'SPACE'), ('$', 'SYM'), (',', 'PUNCT'), (')', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('\uf0e0', 'ROOT'), ('\t', 'appos'), ('*', 'punct'), ('\t', 'compound'), ('F', 'compound'), ('\t', 'compound'), ('T', 'appos'), ('’', 'punct'), (' \t', 'compound'), ('\t', 'compound'), ('\uf0e0', 'appos'), ('\t\t', 'compound'), ('B', 'appos'), ('\t  ', 'appos'), ('$', 'appos'), (',', 'punct'), (')', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[	, ], [, 	], [	, *], [*, 	], [	, F], [F, 	], [	, T], [T, ’], [’,  	], [ 	, 	], [	, ], [, 		], [		, B], [B, 	  ], [	  , $], [$, ,], [,, )], [),  ]]

>> Trigrams: 
[[	, , 	], [, 	, *], [	, *, 	], [*, 	, F], [	, F, 	], [F, 	, T], [	, T, ’], [T, ’,  	], [’,  	, 	], [ 	, 	, ], [	, , 		], [, 		, B], [		, B, 	  ], [B, 	  , $], [	  , $, ,], [$, ,, )], [,, ),  ]]

>> Noun Phrases are: 
[	, *	F	T,  	A 	, 		B]

>> Named Entities are: 
[]


============================ Sentence 290 =============================

Rule 3   


>> Tokens are: 
[Rule, 3,  ] 

>> PoS Tags are: 
[('Rule', 'VERB'), ('3', 'NUM'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Rule', 'ROOT'), ('3', 'nummod'), (' ', 'dobj')]

>> Bigrams: 
[[Rule, 3], [3,  ]]

>> Trigrams: 
[[Rule, 3,  ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 291 =============================

Rule 2  	T’ 


>> Tokens are: 
[Rule, 2,  	, T, ’] 

>> PoS Tags are: 
[('Rule', 'VERB'), ('2', 'NUM'), (' \t', 'SPACE'), ('T', 'NOUN'), ('’', 'PUNCT')] 

>> Dependency Tags are: 
[('Rule', 'ROOT'), ('2', 'nummod'), (' \t', 'compound'), ('T', 'dobj'), ('’', 'punct')]

>> Bigrams: 
[[Rule, 2], [2,  	], [ 	, T], [T, ’]]

>> Trigrams: 
[[Rule, 2,  	], [2,  	, T], [ 	, T, ’]]

>> Noun Phrases are: 
[2  	T]

>> Named Entities are: 
[]


============================ Sentence 292 =============================

		*	F	T’  	A 			B	  ETE’ 	E’+TE’ | ϵ 	TFT’ 	T’*FT’ | ϵ 	F(E) | id  }     Prof. Jay R Dhamsaniya #3130006 


>> Tokens are: 
[	, , 	, *, 	, F, 	, T, ’,  	, 	, , 		, B, 	  , ETE, ’, 	, E’+TE, ’, |, ϵ, 	, TFT, ’, 	, T’*FT, ’, |, ϵ, 	, F(E, ), |, d,  , },     , Prof., Jay, R, Dhamsaniya, #, 3130006] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('\uf0e0', 'NOUN'), ('\t', 'SPACE'), ('*', 'PUNCT'), ('\t', 'SPACE'), ('F', 'PROPN'), ('\t', 'SPACE'), ('T', 'PROPN'), ('’', 'PUNCT'), (' \t', 'SPACE'), ('\t', 'SPACE'), ('\uf0e0', 'NOUN'), ('\t\t', 'SPACE'), ('B', 'PROPN'), ('\t  ', 'SPACE'), ('E\uf0e0TE', 'X'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('E’\uf0e0+TE', 'PROPN'), ('’', 'PUNCT'), ('|', 'NOUN'), ('ϵ', 'NOUN'), ('\t', 'SPACE'), ('T\uf0e0FT', 'VERB'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('T’\uf0e0*FT', 'NOUN'), ('’', 'PUNCT'), ('|', 'NOUN'), ('ϵ', 'NOUN'), ('\t', 'SPACE'), ('F\uf0e0(E', 'NOUN'), (')', 'PUNCT'), ('|', 'NOUN'), ('d', 'NOUN'), (' ', 'SPACE'), ('}', 'PUNCT'), ('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('\uf0e0', 'nmod'), ('\t', 'appos'), ('*', 'punct'), ('\t', 'compound'), ('F', 'compound'), ('\t', 'compound'), ('T', 'appos'), ('’', 'punct'), (' \t', 'compound'), ('\t', 'compound'), ('\uf0e0', 'appos'), ('\t\t', 'compound'), ('B', 'appos'), ('\t  ', 'det'), ('E\uf0e0TE', 'appos'), ('’', 'punct'), ('\t', 'compound'), ('E’\uf0e0+TE', 'appos'), ('’', 'punct'), ('|', 'npadvmod'), ('ϵ', 'appos'), ('\t', 'amod'), ('T\uf0e0FT', 'prep'), ('’', 'punct'), ('\t', 'compound'), ('T’\uf0e0*FT', 'pobj'), ('’', 'punct'), ('|', 'appos'), ('ϵ', 'appos'), ('\t', 'compound'), ('F\uf0e0(E', 'appos'), (')', 'punct'), ('|', 'npadvmod'), ('d', 'ROOT'), (' ', 'punct'), ('}', 'punct'), ('    ', 'relcl'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'dative'), ('#', 'nmod'), ('3130006', 'appos')]

>> Bigrams: 
[[	, ], [, 	], [	, *], [*, 	], [	, F], [F, 	], [	, T], [T, ’], [’,  	], [ 	, 	], [	, ], [, 		], [		, B], [B, 	  ], [	  , ETE], [ETE, ’], [’, 	], [	, E’+TE], [E’+TE, ’], [’, |], [|, ϵ], [ϵ, 	], [	, TFT], [TFT, ’], [’, 	], [	, T’*FT], [T’*FT, ’], [’, |], [|, ϵ], [ϵ, 	], [	, F(E], [F(E, )], [), |], [|, d], [d,  ], [ , }], [},     ], [    , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006]]

>> Trigrams: 
[[	, , 	], [, 	, *], [	, *, 	], [*, 	, F], [	, F, 	], [F, 	, T], [	, T, ’], [T, ’,  	], [’,  	, 	], [ 	, 	, ], [	, , 		], [, 		, B], [		, B, 	  ], [B, 	  , ETE], [	  , ETE, ’], [ETE, ’, 	], [’, 	, E’+TE], [	, E’+TE, ’], [E’+TE, ’, |], [’, |, ϵ], [|, ϵ, 	], [ϵ, 	, TFT], [	, TFT, ’], [TFT, ’, 	], [’, 	, T’*FT], [	, T’*FT, ’], [T’*FT, ’, |], [’, |, ϵ], [|, ϵ, 	], [ϵ, 	, F(E], [	, F(E, )], [F(E, ), |], [), |, d], [|, d,  ], [d,  , }], [ , },     ], [},     , Prof.], [    , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006]]

>> Noun Phrases are: 
[*	F	T,  	A 	, 		B, 	E’+TE, ϵ, ’ 	T’*FT, |, ϵ, 	F(E, Prof. Jay R Dhamsaniya]

>> Named Entities are: 
[]


============================ Sentence 293 =============================

(PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[(, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('(', 'punct'), ('PS', 'nsubj'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'dobj'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 294 =============================

Example-3: LL(1) parsing Step 3: 


>> Tokens are: 
[Example-3, :, LL(1, ), parsing, Step, 3, :] 

>> PoS Tags are: 
[('Example-3', 'PROPN'), (':', 'PUNCT'), ('LL(1', 'PROPN'), (')', 'PUNCT'), ('parsing', 'VERB'), ('Step', 'NOUN'), ('3', 'NUM'), (':', 'PUNCT')] 

>> Dependency Tags are: 
[('Example-3', 'ROOT'), (':', 'punct'), ('LL(1', 'appos'), (')', 'punct'), ('parsing', 'acl'), ('Step', 'dobj'), ('3', 'nummod'), (':', 'punct')]

>> Bigrams: 
[[Example-3, :], [:, LL(1], [LL(1, )], [), parsing], [parsing, Step], [Step, 3], [3, :]]

>> Trigrams: 
[[Example-3, :, LL(1], [:, LL(1, )], [LL(1, ), parsing], [), parsing, Step], [parsing, Step, 3], [Step, 3, :]]

>> Noun Phrases are: 
[Example-3, : LL(1, Step]

>> Named Entities are: 
[('3', 'CARDINAL')]


============================ Sentence 295 =============================

Construct predictive parsing table        ETE’ a=FIRST(TE’)={ (,id } M[E,(]=ETE’ M[E,id]=ETE’  	NT	First	Follow  	E	{ (,id }	{ $,) }  	E’	{ +, 𝜖 }	{ $,) }  	T 


>> Tokens are: 
[Construct, predictive, parsing, table,        , ETE, ’, =, FIRST(TE’)=, {, (, ,, d, }, M[E,(]=ETE, ’, M[E, ,, id]=ETE, ’,  	, NT, 	, 	, Follow,  	, E, 	, {, (, ,, d, }, 	, {, $, ,, ), },  	, E, ’, 	, {, +, ,, 𝜖, }, 	, {, $, ,, ), },  	, T] 

>> PoS Tags are: 
[('Construct', 'VERB'), ('predictive', 'ADJ'), ('parsing', 'VERB'), ('table', 'NOUN'), ('       ', 'SPACE'), ('E\uf0e0TE', 'NOUN'), ('’', 'PUNCT'), ('=', 'SYM'), ('FIRST(TE’)=', 'PROPN'), ('{', 'PUNCT'), ('(', 'PUNCT'), (',', 'PUNCT'), ('d', 'X'), ('}', 'PUNCT'), ('M[E,(]=E\uf0e0TE', 'PROPN'), ('’', 'PUNCT'), ('M[E', 'NOUN'), (',', 'PUNCT'), ('id]=E\uf0e0TE', 'NOUN'), ('’', 'PART'), (' \t', 'SPACE'), ('NT', 'PROPN'), ('\t', 'SPACE'), ('\t', 'SPACE'), ('Follow', 'PROPN'), (' \t', 'SPACE'), ('E', 'NOUN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('(', 'PUNCT'), (',', 'PUNCT'), ('d', 'X'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('$', 'SYM'), (',', 'PUNCT'), (')', 'PUNCT'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('E', 'NOUN'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('+', 'CCONJ'), (',', 'PUNCT'), ('𝜖', 'X'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('$', 'SYM'), (',', 'PUNCT'), (')', 'PUNCT'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('T', 'NOUN')] 

>> Dependency Tags are: 
[('Construct', 'ROOT'), ('predictive', 'amod'), ('parsing', 'compound'), ('table', 'compound'), ('       ', 'compound'), ('E\uf0e0TE', 'dobj'), ('’', 'punct'), ('=', 'punct'), ('FIRST(TE’)=', 'dobj'), ('{', 'punct'), ('(', 'punct'), (',', 'punct'), ('d', 'nmod'), ('}', 'punct'), ('M[E,(]=E\uf0e0TE', 'nmod'), ('’', 'punct'), ('M[E', 'conj'), (',', 'punct'), ('id]=E\uf0e0TE', 'conj'), ('’', 'punct'), (' \t', 'compound'), ('NT', 'prep'), ('\t', 'compound'), ('\t', 'compound'), ('Follow', 'compound'), (' \t', 'compound'), ('E', 'compound'), ('\t', 'dobj'), ('{', 'punct'), ('(', 'punct'), (',', 'punct'), ('d', 'meta'), ('}', 'punct'), ('\t', 'conj'), ('{', 'punct'), ('$', 'appos'), (',', 'punct'), (')', 'punct'), ('}', 'punct'), (' \t', 'compound'), ('E', 'dobj'), ('’', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('+', 'cc'), (',', 'punct'), ('𝜖', 'conj'), ('}', 'punct'), ('\t', 'dobj'), ('{', 'punct'), ('$', 'appos'), (',', 'punct'), (')', 'punct'), ('}', 'punct'), (' \t', 'compound'), ('T', 'dative')]

>> Bigrams: 
[[Construct, predictive], [predictive, parsing], [parsing, table], [table,        ], [       , ETE], [ETE, ’], [’, =], [=, FIRST(TE’)=], [FIRST(TE’)=, {], [{, (], [(, ,], [,, d], [d, }], [}, M[E,(]=ETE], [M[E,(]=ETE, ’], [’, M[E], [M[E, ,], [,, id]=ETE], [id]=ETE, ’], [’,  	], [ 	, NT], [NT, 	], [	, 	], [	, Follow], [Follow,  	], [ 	, E], [E, 	], [	, {], [{, (], [(, ,], [,, d], [d, }], [}, 	], [	, {], [{, $], [$, ,], [,, )], [), }], [},  	], [ 	, E], [E, ’], [’, 	], [	, {], [{, +], [+, ,], [,, 𝜖], [𝜖, }], [}, 	], [	, {], [{, $], [$, ,], [,, )], [), }], [},  	], [ 	, T]]

>> Trigrams: 
[[Construct, predictive, parsing], [predictive, parsing, table], [parsing, table,        ], [table,        , ETE], [       , ETE, ’], [ETE, ’, =], [’, =, FIRST(TE’)=], [=, FIRST(TE’)=, {], [FIRST(TE’)=, {, (], [{, (, ,], [(, ,, d], [,, d, }], [d, }, M[E,(]=ETE], [}, M[E,(]=ETE, ’], [M[E,(]=ETE, ’, M[E], [’, M[E, ,], [M[E, ,, id]=ETE], [,, id]=ETE, ’], [id]=ETE, ’,  	], [’,  	, NT], [ 	, NT, 	], [NT, 	, 	], [	, 	, Follow], [	, Follow,  	], [Follow,  	, E], [ 	, E, 	], [E, 	, {], [	, {, (], [{, (, ,], [(, ,, d], [,, d, }], [d, }, 	], [}, 	, {], [	, {, $], [{, $, ,], [$, ,, )], [,, ), }], [), },  	], [},  	, E], [ 	, E, ’], [E, ’, 	], [’, 	, {], [	, {, +], [{, +, ,], [+, ,, 𝜖], [,, 𝜖, }], [𝜖, }, 	], [}, 	, {], [	, {, $], [{, $, ,], [$, ,, )], [,, ), }], [), },  	], [},  	, T]]

>> Noun Phrases are: 
[predictive parsing table        ETE, a=FIRST(TE’)=, id } M[E,(]=ETE’ M[E, id]=ETE,  	E,  	T]

>> Named Entities are: 
[('Construct', 'ORG'), ('First', 'ORDINAL')]


============================ Sentence 296 =============================

	{ (,id }	{ +,$,) }  	T’	{ *, 𝜖 }	{ +,$,) }  	F	{ (,id }	{*,+,$,)}   


>> Tokens are: 
[	, {, (, ,, d, }, 	, {, +, ,, $, ,, ), },  	, T, ’, 	, {, *, ,, 𝜖, }, 	, {, +, ,, $, ,, ), },  	, F, 	, {, (, ,, d, }, 	, {, *, ,, +, ,, $, ,, ), },  ] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('{', 'PUNCT'), ('(', 'PUNCT'), (',', 'PUNCT'), ('d', 'X'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('+', 'PROPN'), (',', 'PUNCT'), ('$', 'SYM'), (',', 'PUNCT'), (')', 'PUNCT'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('T', 'NOUN'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('*', 'PUNCT'), (',', 'PUNCT'), ('𝜖', 'ADJ'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('+', 'PROPN'), (',', 'PUNCT'), ('$', 'SYM'), (',', 'PUNCT'), (')', 'PUNCT'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('F', 'PROPN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('(', 'PUNCT'), (',', 'PUNCT'), ('d', 'X'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('*', 'PUNCT'), (',', 'PUNCT'), ('+', 'ADJ'), (',', 'PUNCT'), ('$', 'SYM'), (',', 'PUNCT'), (')', 'PUNCT'), ('}', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('{', 'punct'), ('(', 'punct'), (',', 'punct'), ('d', 'meta'), ('}', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('+', 'appos'), (',', 'punct'), ('$', 'appos'), (',', 'punct'), (')', 'punct'), ('}', 'punct'), (' \t', 'compound'), ('T', 'appos'), ('’', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('*', 'punct'), (',', 'punct'), ('𝜖', 'appos'), ('}', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('+', 'appos'), (',', 'punct'), ('$', 'appos'), (',', 'punct'), (')', 'punct'), ('}', 'punct'), (' \t', 'compound'), ('F', 'compound'), ('\t', 'appos'), ('{', 'punct'), ('(', 'punct'), (',', 'punct'), ('d', 'meta'), ('}', 'punct'), ('\t', 'conj'), ('{', 'punct'), ('*', 'punct'), (',', 'punct'), ('+', 'appos'), (',', 'punct'), ('$', 'appos'), (',', 'punct'), (')', 'punct'), ('}', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[	, {], [{, (], [(, ,], [,, d], [d, }], [}, 	], [	, {], [{, +], [+, ,], [,, $], [$, ,], [,, )], [), }], [},  	], [ 	, T], [T, ’], [’, 	], [	, {], [{, *], [*, ,], [,, 𝜖], [𝜖, }], [}, 	], [	, {], [{, +], [+, ,], [,, $], [$, ,], [,, )], [), }], [},  	], [ 	, F], [F, 	], [	, {], [{, (], [(, ,], [,, d], [d, }], [}, 	], [	, {], [{, *], [*, ,], [,, +], [+, ,], [,, $], [$, ,], [,, )], [), }], [},  ]]

>> Trigrams: 
[[	, {, (], [{, (, ,], [(, ,, d], [,, d, }], [d, }, 	], [}, 	, {], [	, {, +], [{, +, ,], [+, ,, $], [,, $, ,], [$, ,, )], [,, ), }], [), },  	], [},  	, T], [ 	, T, ’], [T, ’, 	], [’, 	, {], [	, {, *], [{, *, ,], [*, ,, 𝜖], [,, 𝜖, }], [𝜖, }, 	], [}, 	, {], [	, {, +], [{, +, ,], [+, ,, $], [,, $, ,], [$, ,, )], [,, ), }], [), },  	], [},  	, F], [ 	, F, 	], [F, 	, {], [	, {, (], [{, (, ,], [(, ,, d], [,, d, }], [d, }, 	], [}, 	, {], [	, {, *], [{, *, ,], [*, ,, +], [,, +, ,], [+, ,, $], [,, $, ,], [$, ,, )], [,, ), }], [), },  ]]

>> Noun Phrases are: 
[+,  	T, +]

>> Named Entities are: 
[]


============================ Sentence 297 =============================

Rule: 2 A  a = first() M[A,a] = A  	NT	Input Symbol					 		id	+	*	(	)	$ 	E	ETE’			ETE’		 	E’						 	T						 	 


>> Tokens are: 
[Rule, :, 2, A,  , =, (, ), M[A, ,, ], =, A,  	, NT, 	, Input, Symbol, 					 		, d, 	, +, 	, *, 	, (, 	, ), 	, $, 	, E, 	, ETE, ’, 			, ETE, ’, 		 	, E, ’, 						 	, T, 						 	] 

>> PoS Tags are: 
[('Rule', 'NOUN'), (':', 'PUNCT'), ('2', 'NUM'), ('A\uf0e0', 'NOUN'), (' ', 'SPACE'), ('=', 'PUNCT'), ('(', 'PUNCT'), (')', 'PUNCT'), ('M[A', 'INTJ'), (',', 'PUNCT'), (']', 'PUNCT'), ('=', 'PUNCT'), ('A\uf0e0', 'X'), (' \t', 'SPACE'), ('NT', 'PROPN'), ('\t', 'SPACE'), ('Input', 'PROPN'), ('Symbol', 'PROPN'), ('\t\t\t\t\t \t\t', 'SPACE'), ('d', 'PROPN'), ('\t', 'SPACE'), ('+', 'CCONJ'), ('\t', 'SPACE'), ('*', 'PUNCT'), ('\t', 'SPACE'), ('(', 'PUNCT'), ('\t', 'SPACE'), (')', 'PUNCT'), ('\t', 'SPACE'), ('$', 'SYM'), ('\t', 'SPACE'), ('E', 'PROPN'), ('\t', 'SPACE'), ('E\uf0e0TE', 'NOUN'), ('’', 'PUNCT'), ('\t\t\t', 'SPACE'), ('E\uf0e0TE', 'NOUN'), ('’', 'PUNCT'), ('\t\t \t', 'SPACE'), ('E', 'NOUN'), ('’', 'PUNCT'), ('\t\t\t\t\t\t \t', 'SPACE'), ('T', 'PROPN'), ('\t\t\t\t\t\t \t', 'SPACE')] 

>> Dependency Tags are: 
[('Rule', 'ROOT'), (':', 'punct'), ('2', 'nummod'), ('A\uf0e0', 'appos'), (' ', 'prep'), ('=', 'punct'), ('(', 'punct'), (')', 'punct'), ('M[A', 'appos'), (',', 'punct'), (']', 'dep'), ('=', 'punct'), ('A\uf0e0', 'appos'), (' \t', 'appos'), ('NT', 'appos'), ('\t', 'compound'), ('Input', 'compound'), ('Symbol', 'nsubj'), ('\t\t\t\t\t \t\t', 'acl'), ('d', 'compound'), ('\t', 'appos'), ('+', 'cc'), ('\t', 'conj'), ('*', 'punct'), ('\t', 'appos'), ('(', 'punct'), ('\t', 'appos'), (')', 'punct'), ('\t', 'appos'), ('$', 'punct'), ('\t', 'nmod'), ('E', 'nmod'), ('\t', 'nmod'), ('E\uf0e0TE', 'nmod'), ('’', 'punct'), ('\t\t\t', 'nmod'), ('E\uf0e0TE', 'nmod'), ('’', 'punct'), ('\t\t \t', 'nmod'), ('E', 'nmod'), ('’', 'punct'), ('\t\t\t\t\t\t \t', 'compound'), ('T', 'compound'), ('\t\t\t\t\t\t \t', 'appos')]

>> Bigrams: 
[[Rule, :], [:, 2], [2, A], [A,  ], [ , =], [=, (], [(, )], [), M[A], [M[A, ,], [,, ]], [], =], [=, A], [A,  	], [ 	, NT], [NT, 	], [	, Input], [Input, Symbol], [Symbol, 					 		], [					 		, d], [d, 	], [	, +], [+, 	], [	, *], [*, 	], [	, (], [(, 	], [	, )], [), 	], [	, $], [$, 	], [	, E], [E, 	], [	, ETE], [ETE, ’], [’, 			], [			, ETE], [ETE, ’], [’, 		 	], [		 	, E], [E, ’], [’, 						 	], [						 	, T], [T, 						 	]]

>> Trigrams: 
[[Rule, :, 2], [:, 2, A], [2, A,  ], [A,  , =], [ , =, (], [=, (, )], [(, ), M[A], [), M[A, ,], [M[A, ,, ]], [,, ], =], [], =, A], [=, A,  	], [A,  	, NT], [ 	, NT, 	], [NT, 	, Input], [	, Input, Symbol], [Input, Symbol, 					 		], [Symbol, 					 		, d], [					 		, d, 	], [d, 	, +], [	, +, 	], [+, 	, *], [	, *, 	], [*, 	, (], [	, (, 	], [(, 	, )], [	, ), 	], [), 	, $], [	, $, 	], [$, 	, E], [	, E, 	], [E, 	, ETE], [	, ETE, ’], [ETE, ’, 			], [’, 			, ETE], [			, ETE, ’], [ETE, ’, 		 	], [’, 		 	, E], [		 	, E, ’], [E, ’, 						 	], [’, 						 	, T], [						 	, T, 						 	]]

>> Noun Phrases are: 
[Rule, 2 A, NT, 	Input Symbol]

>> Named Entities are: 
[('2', 'CARDINAL'), ('first', 'ORDINAL'), ('Input Symbol', 'PERSON'), ('E\uf0e0TE', 'ORG')]


============================ Sentence 298 =============================

T’						 	F						    ETE’ 	E’+TE’ | ϵ 	TFT’ 	T’*FT’ | ϵ 	F(E) | id     Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[T, ’, 						 	, F, 						    , ETE, ’, 	, E’+TE, ’, |, ϵ, 	, TFT, ’, 	, T’*FT, ’, |, ϵ, 	, F(E, ), |, d,     , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('T', 'PROPN'), ('’', 'PUNCT'), ('\t\t\t\t\t\t \t', 'SPACE'), ('F', 'PROPN'), ('\t\t\t\t\t\t    ', 'SPACE'), ('E\uf0e0TE', 'NOUN'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('E’\uf0e0+TE', 'PROPN'), ('’', 'PUNCT'), ('|', 'NOUN'), ('ϵ', 'NOUN'), ('\t', 'SPACE'), ('T\uf0e0FT', 'VERB'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('T’\uf0e0*FT', 'NOUN'), ('’', 'PUNCT'), ('|', 'NOUN'), ('ϵ', 'NOUN'), ('\t', 'SPACE'), ('F\uf0e0(E', 'NOUN'), (')', 'PUNCT'), ('|', 'NOUN'), ('d', 'NOUN'), ('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('T', 'nmod'), ('’', 'punct'), ('\t\t\t\t\t\t \t', 'compound'), ('F', 'compound'), ('\t\t\t\t\t\t    ', 'compound'), ('E\uf0e0TE', 'poss'), ('’', 'punct'), ('\t', 'compound'), ('E’\uf0e0+TE', 'poss'), ('’', 'punct'), ('|', 'nsubj'), ('ϵ', 'appos'), ('\t', 'amod'), ('T\uf0e0FT', 'prep'), ('’', 'punct'), ('\t', 'compound'), ('T’\uf0e0*FT', 'pobj'), ('’', 'punct'), ('|', 'appos'), ('ϵ', 'appos'), ('\t', 'compound'), ('F\uf0e0(E', 'appos'), (')', 'punct'), ('|', 'npadvmod'), ('d', 'meta'), ('    ', 'nummod'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'appos'), ('#', 'nmod'), ('3130006', 'appos'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'dobj'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[T, ’], [’, 						 	], [						 	, F], [F, 						    ], [						    , ETE], [ETE, ’], [’, 	], [	, E’+TE], [E’+TE, ’], [’, |], [|, ϵ], [ϵ, 	], [	, TFT], [TFT, ’], [’, 	], [	, T’*FT], [T’*FT, ’], [’, |], [|, ϵ], [ϵ, 	], [	, F(E], [F(E, )], [), |], [|, d], [d,     ], [    , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[T, ’, 						 	], [’, 						 	, F], [						 	, F, 						    ], [F, 						    , ETE], [						    , ETE, ’], [ETE, ’, 	], [’, 	, E’+TE], [	, E’+TE, ’], [E’+TE, ’, |], [’, |, ϵ], [|, ϵ, 	], [ϵ, 	, TFT], [	, TFT, ’], [TFT, ’, 	], [’, 	, T’*FT], [	, T’*FT, ’], [T’*FT, ’, |], [’, |, ϵ], [|, ϵ, 	], [ϵ, 	, F(E], [	, F(E, )], [F(E, ), |], [), |, d], [|, d,     ], [d,     , Prof.], [    , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[T’						 	F						    ETE’ 	E’+TE’ |, ϵ, ’ 	T’*FT, |, ϵ, 	F(E, | id     Prof. Jay R Dhamsaniya, (PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('F\t\t\t\t\t\t    E\uf0e0TE’ \tE’\uf0e0+TE’', 'ORG'), ('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 299 =============================

Example-3: LL(1) parsing Step 3: 


>> Tokens are: 
[Example-3, :, LL(1, ), parsing, Step, 3, :] 

>> PoS Tags are: 
[('Example-3', 'PROPN'), (':', 'PUNCT'), ('LL(1', 'PROPN'), (')', 'PUNCT'), ('parsing', 'VERB'), ('Step', 'NOUN'), ('3', 'NUM'), (':', 'PUNCT')] 

>> Dependency Tags are: 
[('Example-3', 'ROOT'), (':', 'punct'), ('LL(1', 'appos'), (')', 'punct'), ('parsing', 'acl'), ('Step', 'dobj'), ('3', 'nummod'), (':', 'punct')]

>> Bigrams: 
[[Example-3, :], [:, LL(1], [LL(1, )], [), parsing], [parsing, Step], [Step, 3], [3, :]]

>> Trigrams: 
[[Example-3, :, LL(1], [:, LL(1, )], [LL(1, ), parsing], [), parsing, Step], [parsing, Step, 3], [Step, 3, :]]

>> Noun Phrases are: 
[Example-3, : LL(1, Step]

>> Named Entities are: 
[('3', 'CARDINAL')]


============================ Sentence 300 =============================

Construct predictive parsing table        E’+TE’ a=FIRST(+TE’)={ + } M[E’,+]=E’+TE’  	NT	Input Symbol					 		 


>> Tokens are: 
[Construct, predictive, parsing, table,        , E’+TE, ’, =, FIRST(+TE’)=, {, +, }, M[E’,+]=E’+TE, ’,  	, NT, 	, Input, Symbol, 					 		] 

>> PoS Tags are: 
[('Construct', 'VERB'), ('predictive', 'ADJ'), ('parsing', 'VERB'), ('table', 'NOUN'), ('       ', 'SPACE'), ('E’\uf0e0+TE', 'PROPN'), ('’', 'PART'), ('=', 'SYM'), ('FIRST(+TE’)=', 'PROPN'), ('{', 'PUNCT'), ('+', 'SYM'), ('}', 'PUNCT'), ('M[E’,+]=E’\uf0e0+TE', 'PROPN'), ('’', 'PART'), (' \t', 'SPACE'), ('NT', 'PROPN'), ('\t', 'SPACE'), ('Input', 'PROPN'), ('Symbol', 'PROPN'), ('\t\t\t\t\t \t\t', 'SPACE')] 

>> Dependency Tags are: 
[('Construct', 'ROOT'), ('predictive', 'amod'), ('parsing', 'amod'), ('table', 'dobj'), ('       ', 'compound'), ('E’\uf0e0+TE', 'appos'), ('’', 'punct'), ('=', 'punct'), ('FIRST(+TE’)=', 'nmod'), ('{', 'punct'), ('+', 'cc'), ('}', 'punct'), ('M[E’,+]=E’\uf0e0+TE', 'dobj'), ('’', 'punct'), (' \t', 'compound'), ('NT', 'nmod'), ('\t', 'compound'), ('Input', 'compound'), ('Symbol', 'nsubj'), ('\t\t\t\t\t \t\t', 'xcomp')]

>> Bigrams: 
[[Construct, predictive], [predictive, parsing], [parsing, table], [table,        ], [       , E’+TE], [E’+TE, ’], [’, =], [=, FIRST(+TE’)=], [FIRST(+TE’)=, {], [{, +], [+, }], [}, M[E’,+]=E’+TE], [M[E’,+]=E’+TE, ’], [’,  	], [ 	, NT], [NT, 	], [	, Input], [Input, Symbol], [Symbol, 					 		]]

>> Trigrams: 
[[Construct, predictive, parsing], [predictive, parsing, table], [parsing, table,        ], [table,        , E’+TE], [       , E’+TE, ’], [E’+TE, ’, =], [’, =, FIRST(+TE’)=], [=, FIRST(+TE’)=, {], [FIRST(+TE’)=, {, +], [{, +, }], [+, }, M[E’,+]=E’+TE], [}, M[E’,+]=E’+TE, ’], [M[E’,+]=E’+TE, ’,  	], [’,  	, NT], [ 	, NT, 	], [NT, 	, Input], [	, Input, Symbol], [Input, Symbol, 					 		]]

>> Noun Phrases are: 
[predictive parsing table,        E’+TE, a=FIRST(+TE’)={ + } M[E’,+]=E’+TE,  	NT	Input Symbol]

>> Named Entities are: 
[('Construct', 'ORG'), ('Input Symbol', 'PERSON')]


============================ Sentence 301 =============================

id	+	*	(	)	$ 	E	ETE’			ETE’		 	E’		E’+TE’				 	T						 	T’						 	F						  Rule: 2 A  a = first() M[A,a] = A   	NT	First	Follow  	E	{ (,id }	{ $,) }  	E’	{ +, 𝜖 }	{ $,) }  	T 


>> Tokens are: 
[d, 	, +, 	, *, 	, (, 	, ), 	, $, 	, E, 	, ETE, ’, 			, ETE, ’, 		 	, E, ’, 		, E’+TE, ’, 				 	, T, 						 	, T, ’, 						 	, F, 						  , Rule, :, 2, A,  , =, (, ), M[A, ,, ], =, A,   	, NT, 	, 	, Follow,  	, E, 	, {, (, ,, d, }, 	, {, $, ,, ), },  	, E, ’, 	, {, +, ,, 𝜖, }, 	, {, $, ,, ), },  	, T] 

>> PoS Tags are: 
[('d', 'PROPN'), ('\t', 'SPACE'), ('+', 'CCONJ'), ('\t', 'SPACE'), ('*', 'PUNCT'), ('\t', 'SPACE'), ('(', 'PUNCT'), ('\t', 'SPACE'), (')', 'PUNCT'), ('\t', 'SPACE'), ('$', 'SYM'), ('\t', 'SPACE'), ('E', 'PROPN'), ('\t', 'SPACE'), ('E\uf0e0TE', 'NOUN'), ('’', 'PUNCT'), ('\t\t\t', 'SPACE'), ('E\uf0e0TE', 'NOUN'), ('’', 'PUNCT'), ('\t\t \t', 'SPACE'), ('E', 'NOUN'), ('’', 'PUNCT'), ('\t\t', 'SPACE'), ('E’\uf0e0+TE', 'PROPN'), ('’', 'PART'), ('\t\t\t\t \t', 'SPACE'), ('T', 'NOUN'), ('\t\t\t\t\t\t \t', 'SPACE'), ('T', 'PROPN'), ('’', 'PUNCT'), ('\t\t\t\t\t\t \t', 'SPACE'), ('F', 'PROPN'), ('\t\t\t\t\t\t  ', 'SPACE'), ('Rule', 'NOUN'), (':', 'PUNCT'), ('2', 'NUM'), ('A\uf0e0', 'NOUN'), (' ', 'SPACE'), ('=', 'PUNCT'), ('(', 'PUNCT'), (')', 'PUNCT'), ('M[A', 'INTJ'), (',', 'PUNCT'), (']', 'PUNCT'), ('=', 'PUNCT'), ('A\uf0e0', 'INTJ'), ('  \t', 'SPACE'), ('NT', 'PROPN'), ('\t', 'SPACE'), ('\t', 'SPACE'), ('Follow', 'PROPN'), (' \t', 'SPACE'), ('E', 'NOUN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('(', 'PUNCT'), (',', 'PUNCT'), ('d', 'X'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('$', 'SYM'), (',', 'PUNCT'), (')', 'PUNCT'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('E', 'NOUN'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('+', 'CCONJ'), (',', 'PUNCT'), ('𝜖', 'X'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('$', 'SYM'), (',', 'PUNCT'), (')', 'PUNCT'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('T', 'NOUN')] 

>> Dependency Tags are: 
[('d', 'compound'), ('\t', 'appos'), ('+', 'cc'), ('\t', 'conj'), ('*', 'punct'), ('\t', 'appos'), ('(', 'punct'), ('\t', 'appos'), (')', 'punct'), ('\t', 'nmod'), ('$', 'punct'), ('\t', 'nmod'), ('E', 'nmod'), ('\t', 'nmod'), ('E\uf0e0TE', 'nmod'), ('’', 'punct'), ('\t\t\t', 'nmod'), ('E\uf0e0TE', 'nmod'), ('’', 'punct'), ('\t\t \t', 'compound'), ('E', 'appos'), ('’', 'punct'), ('\t\t', 'prep'), ('E’\uf0e0+TE', 'poss'), ('’', 'case'), ('\t\t\t\t \t', 'compound'), ('T', 'compound'), ('\t\t\t\t\t\t \t', 'compound'), ('T', 'nmod'), ('’', 'punct'), ('\t\t\t\t\t\t \t', 'compound'), ('F', 'compound'), ('\t\t\t\t\t\t  ', 'intj'), ('Rule', 'ROOT'), (':', 'punct'), ('2', 'nummod'), ('A\uf0e0', 'appos'), (' ', 'prep'), ('=', 'punct'), ('(', 'punct'), (')', 'punct'), ('M[A', 'acl'), (',', 'punct'), (']', 'punct'), ('=', 'punct'), ('A\uf0e0', 'appos'), ('  \t', 'compound'), ('NT', 'compound'), ('\t', 'compound'), ('\t', 'compound'), ('Follow', 'compound'), (' \t', 'compound'), ('E', 'compound'), ('\t', 'appos'), ('{', 'punct'), ('(', 'punct'), (',', 'punct'), ('d', 'meta'), ('}', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('$', 'appos'), (',', 'punct'), (')', 'punct'), ('}', 'punct'), (' \t', 'compound'), ('E', 'appos'), ('’', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('+', 'appos'), (',', 'punct'), ('𝜖', 'appos'), ('}', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('$', 'appos'), (',', 'punct'), (')', 'punct'), ('}', 'punct'), (' \t', 'compound'), ('T', 'appos')]

>> Bigrams: 
[[d, 	], [	, +], [+, 	], [	, *], [*, 	], [	, (], [(, 	], [	, )], [), 	], [	, $], [$, 	], [	, E], [E, 	], [	, ETE], [ETE, ’], [’, 			], [			, ETE], [ETE, ’], [’, 		 	], [		 	, E], [E, ’], [’, 		], [		, E’+TE], [E’+TE, ’], [’, 				 	], [				 	, T], [T, 						 	], [						 	, T], [T, ’], [’, 						 	], [						 	, F], [F, 						  ], [						  , Rule], [Rule, :], [:, 2], [2, A], [A,  ], [ , =], [=, (], [(, )], [), M[A], [M[A, ,], [,, ]], [], =], [=, A], [A,   	], [  	, NT], [NT, 	], [	, 	], [	, Follow], [Follow,  	], [ 	, E], [E, 	], [	, {], [{, (], [(, ,], [,, d], [d, }], [}, 	], [	, {], [{, $], [$, ,], [,, )], [), }], [},  	], [ 	, E], [E, ’], [’, 	], [	, {], [{, +], [+, ,], [,, 𝜖], [𝜖, }], [}, 	], [	, {], [{, $], [$, ,], [,, )], [), }], [},  	], [ 	, T]]

>> Trigrams: 
[[d, 	, +], [	, +, 	], [+, 	, *], [	, *, 	], [*, 	, (], [	, (, 	], [(, 	, )], [	, ), 	], [), 	, $], [	, $, 	], [$, 	, E], [	, E, 	], [E, 	, ETE], [	, ETE, ’], [ETE, ’, 			], [’, 			, ETE], [			, ETE, ’], [ETE, ’, 		 	], [’, 		 	, E], [		 	, E, ’], [E, ’, 		], [’, 		, E’+TE], [		, E’+TE, ’], [E’+TE, ’, 				 	], [’, 				 	, T], [				 	, T, 						 	], [T, 						 	, T], [						 	, T, ’], [T, ’, 						 	], [’, 						 	, F], [						 	, F, 						  ], [F, 						  , Rule], [						  , Rule, :], [Rule, :, 2], [:, 2, A], [2, A,  ], [A,  , =], [ , =, (], [=, (, )], [(, ), M[A], [), M[A, ,], [M[A, ,, ]], [,, ], =], [], =, A], [=, A,   	], [A,   	, NT], [  	, NT, 	], [NT, 	, 	], [	, 	, Follow], [	, Follow,  	], [Follow,  	, E], [ 	, E, 	], [E, 	, {], [	, {, (], [{, (, ,], [(, ,, d], [,, d, }], [d, }, 	], [}, 	, {], [	, {, $], [{, $, ,], [$, ,, )], [,, ), }], [), },  	], [},  	, E], [ 	, E, ’], [E, ’, 	], [’, 	, {], [	, {, +], [{, +, ,], [+, ,, 𝜖], [,, 𝜖, }], [𝜖, }, 	], [}, 	, {], [	, {, $], [{, $, ,], [$, ,, )], [,, ), }], [), },  	], [},  	, T]]

>> Noun Phrases are: 
[	E	ETE’			ETE’		 	E, 2 A,  	E,  	T]

>> Named Entities are: 
[('E\uf0e0TE', 'ORG'), ('2', 'CARDINAL'), ('first', 'ORDINAL'), ('First', 'ORDINAL')]


============================ Sentence 302 =============================

	{ (,id }	{ +,$,) }  	T’	{ *, 𝜖 }	{ +,$,) }  	F	{ (,id }	{*,+,$,)}  ETE’ 	E’+TE’ | ϵ 	TFT’ 	T’*FT’ | ϵ 	F(E) | id     Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[	, {, (, ,, d, }, 	, {, +, ,, $, ,, ), },  	, T, ’, 	, {, *, ,, 𝜖, }, 	, {, +, ,, $, ,, ), },  	, F, 	, {, (, ,, d, }, 	, {, *, ,, +, ,, $, ,, ), },  , ETE, ’, 	, E’+TE, ’, |, ϵ, 	, TFT, ’, 	, T’*FT, ’, |, ϵ, 	, F(E, ), |, d,     , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('{', 'PUNCT'), ('(', 'PUNCT'), (',', 'PUNCT'), ('d', 'X'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('+', 'PROPN'), (',', 'PUNCT'), ('$', 'SYM'), (',', 'PUNCT'), (')', 'PUNCT'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('T', 'NOUN'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('*', 'PUNCT'), (',', 'PUNCT'), ('𝜖', 'ADJ'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('+', 'PROPN'), (',', 'PUNCT'), ('$', 'SYM'), (',', 'PUNCT'), (')', 'PUNCT'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('F', 'PROPN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('(', 'PUNCT'), (',', 'PUNCT'), ('d', 'X'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('*', 'PUNCT'), (',', 'PUNCT'), ('+', 'ADJ'), (',', 'PUNCT'), ('$', 'SYM'), (',', 'PUNCT'), (')', 'PUNCT'), ('}', 'PUNCT'), (' ', 'SPACE'), ('E\uf0e0TE', 'X'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('E’\uf0e0+TE', 'PROPN'), ('’', 'PUNCT'), ('|', 'NOUN'), ('ϵ', 'NOUN'), ('\t', 'SPACE'), ('T\uf0e0FT', 'VERB'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('T’\uf0e0*FT', 'NOUN'), ('’', 'PUNCT'), ('|', 'NOUN'), ('ϵ', 'NOUN'), ('\t', 'SPACE'), ('F\uf0e0(E', 'NOUN'), (')', 'PUNCT'), ('|', 'NOUN'), ('d', 'NOUN'), ('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('\t', 'nsubj'), ('{', 'punct'), ('(', 'punct'), (',', 'punct'), ('d', 'meta'), ('}', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('+', 'appos'), (',', 'punct'), ('$', 'appos'), (',', 'punct'), (')', 'punct'), ('}', 'punct'), (' \t', 'compound'), ('T', 'appos'), ('’', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('*', 'punct'), (',', 'punct'), ('𝜖', 'appos'), ('}', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('+', 'appos'), (',', 'punct'), ('$', 'appos'), (',', 'punct'), (')', 'punct'), ('}', 'punct'), (' \t', 'compound'), ('F', 'compound'), ('\t', 'appos'), ('{', 'punct'), ('(', 'punct'), (',', 'punct'), ('d', 'meta'), ('}', 'punct'), ('\t', 'conj'), ('{', 'punct'), ('*', 'punct'), (',', 'punct'), ('+', 'appos'), (',', 'punct'), ('$', 'appos'), (',', 'punct'), (')', 'punct'), ('}', 'punct'), (' ', 'appos'), ('E\uf0e0TE', 'appos'), ('’', 'punct'), ('\t', 'compound'), ('E’\uf0e0+TE', 'poss'), ('’', 'punct'), ('|', 'appos'), ('ϵ', 'punct'), ('\t', 'amod'), ('T\uf0e0FT', 'relcl'), ('’', 'punct'), ('\t', 'compound'), ('T’\uf0e0*FT', 'poss'), ('’', 'punct'), ('|', 'dobj'), ('ϵ', 'appos'), ('\t', 'compound'), ('F\uf0e0(E', 'appos'), (')', 'punct'), ('|', 'appos'), ('d', 'meta'), ('    ', 'nummod'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'appos'), ('#', 'nmod'), ('3130006', 'appos'), ('(', 'punct'), ('PS', 'nsubj'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'parataxis'), ('  ', 'appos'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'appos'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'dep')]

>> Bigrams: 
[[	, {], [{, (], [(, ,], [,, d], [d, }], [}, 	], [	, {], [{, +], [+, ,], [,, $], [$, ,], [,, )], [), }], [},  	], [ 	, T], [T, ’], [’, 	], [	, {], [{, *], [*, ,], [,, 𝜖], [𝜖, }], [}, 	], [	, {], [{, +], [+, ,], [,, $], [$, ,], [,, )], [), }], [},  	], [ 	, F], [F, 	], [	, {], [{, (], [(, ,], [,, d], [d, }], [}, 	], [	, {], [{, *], [*, ,], [,, +], [+, ,], [,, $], [$, ,], [,, )], [), }], [},  ], [ , ETE], [ETE, ’], [’, 	], [	, E’+TE], [E’+TE, ’], [’, |], [|, ϵ], [ϵ, 	], [	, TFT], [TFT, ’], [’, 	], [	, T’*FT], [T’*FT, ’], [’, |], [|, ϵ], [ϵ, 	], [	, F(E], [F(E, )], [), |], [|, d], [d,     ], [    , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[	, {, (], [{, (, ,], [(, ,, d], [,, d, }], [d, }, 	], [}, 	, {], [	, {, +], [{, +, ,], [+, ,, $], [,, $, ,], [$, ,, )], [,, ), }], [), },  	], [},  	, T], [ 	, T, ’], [T, ’, 	], [’, 	, {], [	, {, *], [{, *, ,], [*, ,, 𝜖], [,, 𝜖, }], [𝜖, }, 	], [}, 	, {], [	, {, +], [{, +, ,], [+, ,, $], [,, $, ,], [$, ,, )], [,, ), }], [), },  	], [},  	, F], [ 	, F, 	], [F, 	, {], [	, {, (], [{, (, ,], [(, ,, d], [,, d, }], [d, }, 	], [}, 	, {], [	, {, *], [{, *, ,], [*, ,, +], [,, +, ,], [+, ,, $], [,, $, ,], [$, ,, )], [,, ), }], [), },  ], [},  , ETE], [ , ETE, ’], [ETE, ’, 	], [’, 	, E’+TE], [	, E’+TE, ’], [E’+TE, ’, |], [’, |, ϵ], [|, ϵ, 	], [ϵ, 	, TFT], [	, TFT, ’], [TFT, ’, 	], [’, 	, T’*FT], [	, T’*FT, ’], [T’*FT, ’, |], [’, |, ϵ], [|, ϵ, 	], [ϵ, 	, F(E], [	, F(E, )], [F(E, ), |], [), |, d], [|, d,     ], [d,     , Prof.], [    , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[+,  	T, +, 	E’+TE’ |, 	T’*FT’ |, ϵ, 	F(E, |, id     Prof. Jay R Dhamsaniya, PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 303 =============================

Example-3: LL(1) parsing Step 3: 


>> Tokens are: 
[Example-3, :, LL(1, ), parsing, Step, 3, :] 

>> PoS Tags are: 
[('Example-3', 'PROPN'), (':', 'PUNCT'), ('LL(1', 'PROPN'), (')', 'PUNCT'), ('parsing', 'VERB'), ('Step', 'NOUN'), ('3', 'NUM'), (':', 'PUNCT')] 

>> Dependency Tags are: 
[('Example-3', 'ROOT'), (':', 'punct'), ('LL(1', 'appos'), (')', 'punct'), ('parsing', 'acl'), ('Step', 'dobj'), ('3', 'nummod'), (':', 'punct')]

>> Bigrams: 
[[Example-3, :], [:, LL(1], [LL(1, )], [), parsing], [parsing, Step], [Step, 3], [3, :]]

>> Trigrams: 
[[Example-3, :, LL(1], [:, LL(1, )], [LL(1, ), parsing], [), parsing, Step], [parsing, Step, 3], [Step, 3, :]]

>> Noun Phrases are: 
[Example-3, : LL(1, Step]

>> Named Entities are: 
[('3', 'CARDINAL')]


============================ Sentence 304 =============================

Construct predictive parsing table        E’𝜖 b=FOLLOW(E’)={ $,) } M[E’,$]=E’𝜖 M[E’,)]=E’𝜖  	NT	Input Symbol					 		 


>> Tokens are: 
[Construct, predictive, parsing, table,        , E’𝜖, b, =, FOLLOW(E’)=, {, $, ,, ), }, M[E’,$]=E’𝜖, M[E’,)]=E’𝜖,  	, NT, 	, Input, Symbol, 					 		] 

>> PoS Tags are: 
[('Construct', 'VERB'), ('predictive', 'ADJ'), ('parsing', 'VERB'), ('table', 'NOUN'), ('       ', 'SPACE'), ('E’\uf0e0𝜖', 'NOUN'), ('b', 'NOUN'), ('=', 'PUNCT'), ('FOLLOW(E’)=', 'NOUN'), ('{', 'PUNCT'), ('$', 'SYM'), (',', 'PUNCT'), (')', 'PUNCT'), ('}', 'PUNCT'), ('M[E’,$]=E’\uf0e0𝜖', 'PROPN'), ('M[E’,)]=E’\uf0e0𝜖', 'PUNCT'), (' \t', 'SPACE'), ('NT', 'PROPN'), ('\t', 'SPACE'), ('Input', 'PROPN'), ('Symbol', 'PROPN'), ('\t\t\t\t\t \t\t', 'SPACE')] 

>> Dependency Tags are: 
[('Construct', 'ROOT'), ('predictive', 'amod'), ('parsing', 'amod'), ('table', 'dobj'), ('       ', 'compound'), ('E’\uf0e0𝜖', 'npadvmod'), ('b', 'prep'), ('=', 'punct'), ('FOLLOW(E’)=', 'dobj'), ('{', 'punct'), ('$', 'appos'), (',', 'punct'), (')', 'punct'), ('}', 'punct'), ('M[E’,$]=E’\uf0e0𝜖', 'appos'), ('M[E’,)]=E’\uf0e0𝜖', 'punct'), (' \t', 'compound'), ('NT', 'nmod'), ('\t', 'compound'), ('Input', 'compound'), ('Symbol', 'nsubj'), ('\t\t\t\t\t \t\t', 'ccomp')]

>> Bigrams: 
[[Construct, predictive], [predictive, parsing], [parsing, table], [table,        ], [       , E’𝜖], [E’𝜖, b], [b, =], [=, FOLLOW(E’)=], [FOLLOW(E’)=, {], [{, $], [$, ,], [,, )], [), }], [}, M[E’,$]=E’𝜖], [M[E’,$]=E’𝜖, M[E’,)]=E’𝜖], [M[E’,)]=E’𝜖,  	], [ 	, NT], [NT, 	], [	, Input], [Input, Symbol], [Symbol, 					 		]]

>> Trigrams: 
[[Construct, predictive, parsing], [predictive, parsing, table], [parsing, table,        ], [table,        , E’𝜖], [       , E’𝜖, b], [E’𝜖, b, =], [b, =, FOLLOW(E’)=], [=, FOLLOW(E’)=, {], [FOLLOW(E’)=, {, $], [{, $, ,], [$, ,, )], [,, ), }], [), }, M[E’,$]=E’𝜖], [}, M[E’,$]=E’𝜖, M[E’,)]=E’𝜖], [M[E’,$]=E’𝜖, M[E’,)]=E’𝜖,  	], [M[E’,)]=E’𝜖,  	, NT], [ 	, NT, 	], [NT, 	, Input], [	, Input, Symbol], [Input, Symbol, 					 		]]

>> Noun Phrases are: 
[predictive parsing table, FOLLOW(E’)=, M[E’,$]=E’𝜖,  	NT	Input Symbol]

>> Named Entities are: 
[('Construct', 'ORG'), ('M[E’,$]=E’\uf0e0𝜖', 'PERSON'), ('Input Symbol', 'PERSON')]


============================ Sentence 305 =============================

id	+	*	(	)	$ 	E	ETE’			ETE’		 	E’		E’+TE’			E’𝜖	E’𝜖 	T						 	T’						 	F						  Rule: 3 A  b = follow(A) M[A,b] = A    	NT	First	Follow  	E	{ (,id }	{ $,) }  	E’	{ +, 𝜖 }	{ $,) }  	T 


>> Tokens are: 
[d, 	, +, 	, *, 	, (, 	, ), 	, $, 	, E, 	, ETE, ’, 			, ETE, ’, 		 	, E, ’, 		, E’+TE, ’, 			, E’𝜖, 	, E’𝜖, 	, T, 						 	, T, ’, 						 	, F, 						  , Rule, :, 3, A,  , b, =, follow(A, ), M[A, ,, b, ], =, A,    	, NT, 	, 	, Follow,  	, E, 	, {, (, ,, d, }, 	, {, $, ,, ), },  	, E, ’, 	, {, +, ,, 𝜖, }, 	, {, $, ,, ), },  	, T] 

>> PoS Tags are: 
[('d', 'PROPN'), ('\t', 'SPACE'), ('+', 'CCONJ'), ('\t', 'SPACE'), ('*', 'PUNCT'), ('\t', 'SPACE'), ('(', 'PUNCT'), ('\t', 'SPACE'), (')', 'PUNCT'), ('\t', 'SPACE'), ('$', 'SYM'), ('\t', 'SPACE'), ('E', 'PROPN'), ('\t', 'SPACE'), ('E\uf0e0TE', 'NOUN'), ('’', 'PUNCT'), ('\t\t\t', 'SPACE'), ('E\uf0e0TE', 'NOUN'), ('’', 'PUNCT'), ('\t\t \t', 'SPACE'), ('E', 'NOUN'), ('’', 'PUNCT'), ('\t\t', 'SPACE'), ('E’\uf0e0+TE', 'PROPN'), ('’', 'PART'), ('\t\t\t', 'SPACE'), ('E’\uf0e0𝜖', 'NOUN'), ('\t', 'SPACE'), ('E’\uf0e0𝜖', 'NOUN'), ('\t', 'SPACE'), ('T', 'NOUN'), ('\t\t\t\t\t\t \t', 'SPACE'), ('T', 'PROPN'), ('’', 'PUNCT'), ('\t\t\t\t\t\t \t', 'SPACE'), ('F', 'PROPN'), ('\t\t\t\t\t\t  ', 'SPACE'), ('Rule', 'NOUN'), (':', 'PUNCT'), ('3', 'NUM'), ('A\uf0e0', 'NOUN'), (' ', 'SPACE'), ('b', 'X'), ('=', 'SYM'), ('follow(A', 'NUM'), (')', 'PUNCT'), ('M[A', 'NOUN'), (',', 'PUNCT'), ('b', 'X'), (']', 'PUNCT'), ('=', 'PUNCT'), ('A\uf0e0', 'NOUN'), ('   \t', 'SPACE'), ('NT', 'PROPN'), ('\t', 'SPACE'), ('\t', 'SPACE'), ('Follow', 'PROPN'), (' \t', 'SPACE'), ('E', 'NOUN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('(', 'PUNCT'), (',', 'PUNCT'), ('d', 'X'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('$', 'SYM'), (',', 'PUNCT'), (')', 'PUNCT'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('E', 'NOUN'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('+', 'CCONJ'), (',', 'PUNCT'), ('𝜖', 'X'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('$', 'SYM'), (',', 'PUNCT'), (')', 'PUNCT'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('T', 'NOUN')] 

>> Dependency Tags are: 
[('d', 'compound'), ('\t', 'appos'), ('+', 'cc'), ('\t', 'conj'), ('*', 'punct'), ('\t', 'appos'), ('(', 'punct'), ('\t', 'appos'), (')', 'punct'), ('\t', 'nmod'), ('$', 'punct'), ('\t', 'nmod'), ('E', 'nmod'), ('\t', 'nmod'), ('E\uf0e0TE', 'nmod'), ('’', 'punct'), ('\t\t\t', 'nmod'), ('E\uf0e0TE', 'nmod'), ('’', 'punct'), ('\t\t \t', 'compound'), ('E', 'appos'), ('’', 'punct'), ('\t\t', 'prep'), ('E’\uf0e0+TE', 'poss'), ('’', 'case'), ('\t\t\t', 'compound'), ('E’\uf0e0𝜖', 'compound'), ('\t', 'compound'), ('E’\uf0e0𝜖', 'compound'), ('\t', 'compound'), ('T', 'compound'), ('\t\t\t\t\t\t \t', 'compound'), ('T', 'nmod'), ('’', 'punct'), ('\t\t\t\t\t\t \t', 'compound'), ('F', 'compound'), ('\t\t\t\t\t\t  ', 'intj'), ('Rule', 'ROOT'), (':', 'punct'), ('3', 'nummod'), ('A\uf0e0', 'appos'), (' ', 'appos'), ('b', 'prep'), ('=', 'appos'), ('follow(A', 'prep'), (')', 'punct'), ('M[A', 'appos'), (',', 'punct'), ('b', 'prep'), (']', 'punct'), ('=', 'punct'), ('A\uf0e0', 'appos'), ('   \t', 'npadvmod'), ('NT', 'compound'), ('\t', 'compound'), ('\t', 'compound'), ('Follow', 'compound'), (' \t', 'compound'), ('E', 'compound'), ('\t', 'appos'), ('{', 'punct'), ('(', 'punct'), (',', 'punct'), ('d', 'meta'), ('}', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('$', 'appos'), (',', 'punct'), (')', 'punct'), ('}', 'punct'), (' \t', 'compound'), ('E', 'appos'), ('’', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('+', 'appos'), (',', 'punct'), ('𝜖', 'appos'), ('}', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('$', 'appos'), (',', 'punct'), (')', 'punct'), ('}', 'punct'), (' \t', 'compound'), ('T', 'appos')]

>> Bigrams: 
[[d, 	], [	, +], [+, 	], [	, *], [*, 	], [	, (], [(, 	], [	, )], [), 	], [	, $], [$, 	], [	, E], [E, 	], [	, ETE], [ETE, ’], [’, 			], [			, ETE], [ETE, ’], [’, 		 	], [		 	, E], [E, ’], [’, 		], [		, E’+TE], [E’+TE, ’], [’, 			], [			, E’𝜖], [E’𝜖, 	], [	, E’𝜖], [E’𝜖, 	], [	, T], [T, 						 	], [						 	, T], [T, ’], [’, 						 	], [						 	, F], [F, 						  ], [						  , Rule], [Rule, :], [:, 3], [3, A], [A,  ], [ , b], [b, =], [=, follow(A], [follow(A, )], [), M[A], [M[A, ,], [,, b], [b, ]], [], =], [=, A], [A,    	], [   	, NT], [NT, 	], [	, 	], [	, Follow], [Follow,  	], [ 	, E], [E, 	], [	, {], [{, (], [(, ,], [,, d], [d, }], [}, 	], [	, {], [{, $], [$, ,], [,, )], [), }], [},  	], [ 	, E], [E, ’], [’, 	], [	, {], [{, +], [+, ,], [,, 𝜖], [𝜖, }], [}, 	], [	, {], [{, $], [$, ,], [,, )], [), }], [},  	], [ 	, T]]

>> Trigrams: 
[[d, 	, +], [	, +, 	], [+, 	, *], [	, *, 	], [*, 	, (], [	, (, 	], [(, 	, )], [	, ), 	], [), 	, $], [	, $, 	], [$, 	, E], [	, E, 	], [E, 	, ETE], [	, ETE, ’], [ETE, ’, 			], [’, 			, ETE], [			, ETE, ’], [ETE, ’, 		 	], [’, 		 	, E], [		 	, E, ’], [E, ’, 		], [’, 		, E’+TE], [		, E’+TE, ’], [E’+TE, ’, 			], [’, 			, E’𝜖], [			, E’𝜖, 	], [E’𝜖, 	, E’𝜖], [	, E’𝜖, 	], [E’𝜖, 	, T], [	, T, 						 	], [T, 						 	, T], [						 	, T, ’], [T, ’, 						 	], [’, 						 	, F], [						 	, F, 						  ], [F, 						  , Rule], [						  , Rule, :], [Rule, :, 3], [:, 3, A], [3, A,  ], [A,  , b], [ , b, =], [b, =, follow(A], [=, follow(A, )], [follow(A, ), M[A], [), M[A, ,], [M[A, ,, b], [,, b, ]], [b, ], =], [], =, A], [=, A,    	], [A,    	, NT], [   	, NT, 	], [NT, 	, 	], [	, 	, Follow], [	, Follow,  	], [Follow,  	, E], [ 	, E, 	], [E, 	, {], [	, {, (], [{, (, ,], [(, ,, d], [,, d, }], [d, }, 	], [}, 	, {], [	, {, $], [{, $, ,], [$, ,, )], [,, ), }], [), },  	], [},  	, E], [ 	, E, ’], [E, ’, 	], [’, 	, {], [	, {, +], [{, +, ,], [+, ,, 𝜖], [,, 𝜖, }], [𝜖, }, 	], [}, 	, {], [	, {, $], [{, $, ,], [$, ,, )], [,, ), }], [), },  	], [},  	, T]]

>> Noun Phrases are: 
[	E	ETE’			ETE’		 	E, 3 A, M[A, A,  	E,  	T]

>> Named Entities are: 
[('E\uf0e0TE', 'ORG'), ('E’\uf0e0𝜖', 'ORG'), ('3', 'CARDINAL'), ('First', 'ORDINAL')]


============================ Sentence 306 =============================

	{ (,id }	{ +,$,) }  	T’	{ *, 𝜖 }	{ +,$,) }  	F	{ (,id }	{*,+,$,)}  ETE’ 	E’+TE’ | ϵ 	TFT’ 	T’*FT’ | ϵ 	F(E) | id     Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[	, {, (, ,, d, }, 	, {, +, ,, $, ,, ), },  	, T, ’, 	, {, *, ,, 𝜖, }, 	, {, +, ,, $, ,, ), },  	, F, 	, {, (, ,, d, }, 	, {, *, ,, +, ,, $, ,, ), },  , ETE, ’, 	, E’+TE, ’, |, ϵ, 	, TFT, ’, 	, T’*FT, ’, |, ϵ, 	, F(E, ), |, d,     , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('{', 'PUNCT'), ('(', 'PUNCT'), (',', 'PUNCT'), ('d', 'X'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('+', 'PROPN'), (',', 'PUNCT'), ('$', 'SYM'), (',', 'PUNCT'), (')', 'PUNCT'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('T', 'NOUN'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('*', 'PUNCT'), (',', 'PUNCT'), ('𝜖', 'ADJ'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('+', 'PROPN'), (',', 'PUNCT'), ('$', 'SYM'), (',', 'PUNCT'), (')', 'PUNCT'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('F', 'PROPN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('(', 'PUNCT'), (',', 'PUNCT'), ('d', 'X'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('*', 'PUNCT'), (',', 'PUNCT'), ('+', 'ADJ'), (',', 'PUNCT'), ('$', 'SYM'), (',', 'PUNCT'), (')', 'PUNCT'), ('}', 'PUNCT'), (' ', 'SPACE'), ('E\uf0e0TE', 'X'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('E’\uf0e0+TE', 'PROPN'), ('’', 'PUNCT'), ('|', 'NOUN'), ('ϵ', 'NOUN'), ('\t', 'SPACE'), ('T\uf0e0FT', 'VERB'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('T’\uf0e0*FT', 'NOUN'), ('’', 'PUNCT'), ('|', 'NOUN'), ('ϵ', 'NOUN'), ('\t', 'SPACE'), ('F\uf0e0(E', 'NOUN'), (')', 'PUNCT'), ('|', 'NOUN'), ('d', 'NOUN'), ('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('\t', 'nsubj'), ('{', 'punct'), ('(', 'punct'), (',', 'punct'), ('d', 'meta'), ('}', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('+', 'appos'), (',', 'punct'), ('$', 'appos'), (',', 'punct'), (')', 'punct'), ('}', 'punct'), (' \t', 'compound'), ('T', 'appos'), ('’', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('*', 'punct'), (',', 'punct'), ('𝜖', 'appos'), ('}', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('+', 'appos'), (',', 'punct'), ('$', 'appos'), (',', 'punct'), (')', 'punct'), ('}', 'punct'), (' \t', 'compound'), ('F', 'compound'), ('\t', 'appos'), ('{', 'punct'), ('(', 'punct'), (',', 'punct'), ('d', 'meta'), ('}', 'punct'), ('\t', 'conj'), ('{', 'punct'), ('*', 'punct'), (',', 'punct'), ('+', 'appos'), (',', 'punct'), ('$', 'appos'), (',', 'punct'), (')', 'punct'), ('}', 'punct'), (' ', 'appos'), ('E\uf0e0TE', 'appos'), ('’', 'punct'), ('\t', 'compound'), ('E’\uf0e0+TE', 'poss'), ('’', 'punct'), ('|', 'appos'), ('ϵ', 'punct'), ('\t', 'amod'), ('T\uf0e0FT', 'relcl'), ('’', 'punct'), ('\t', 'compound'), ('T’\uf0e0*FT', 'poss'), ('’', 'punct'), ('|', 'dobj'), ('ϵ', 'appos'), ('\t', 'compound'), ('F\uf0e0(E', 'appos'), (')', 'punct'), ('|', 'appos'), ('d', 'meta'), ('    ', 'nummod'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'appos'), ('#', 'nmod'), ('3130006', 'appos'), ('(', 'punct'), ('PS', 'nsubj'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'parataxis'), ('  ', 'appos'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'appos'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'dep')]

>> Bigrams: 
[[	, {], [{, (], [(, ,], [,, d], [d, }], [}, 	], [	, {], [{, +], [+, ,], [,, $], [$, ,], [,, )], [), }], [},  	], [ 	, T], [T, ’], [’, 	], [	, {], [{, *], [*, ,], [,, 𝜖], [𝜖, }], [}, 	], [	, {], [{, +], [+, ,], [,, $], [$, ,], [,, )], [), }], [},  	], [ 	, F], [F, 	], [	, {], [{, (], [(, ,], [,, d], [d, }], [}, 	], [	, {], [{, *], [*, ,], [,, +], [+, ,], [,, $], [$, ,], [,, )], [), }], [},  ], [ , ETE], [ETE, ’], [’, 	], [	, E’+TE], [E’+TE, ’], [’, |], [|, ϵ], [ϵ, 	], [	, TFT], [TFT, ’], [’, 	], [	, T’*FT], [T’*FT, ’], [’, |], [|, ϵ], [ϵ, 	], [	, F(E], [F(E, )], [), |], [|, d], [d,     ], [    , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[	, {, (], [{, (, ,], [(, ,, d], [,, d, }], [d, }, 	], [}, 	, {], [	, {, +], [{, +, ,], [+, ,, $], [,, $, ,], [$, ,, )], [,, ), }], [), },  	], [},  	, T], [ 	, T, ’], [T, ’, 	], [’, 	, {], [	, {, *], [{, *, ,], [*, ,, 𝜖], [,, 𝜖, }], [𝜖, }, 	], [}, 	, {], [	, {, +], [{, +, ,], [+, ,, $], [,, $, ,], [$, ,, )], [,, ), }], [), },  	], [},  	, F], [ 	, F, 	], [F, 	, {], [	, {, (], [{, (, ,], [(, ,, d], [,, d, }], [d, }, 	], [}, 	, {], [	, {, *], [{, *, ,], [*, ,, +], [,, +, ,], [+, ,, $], [,, $, ,], [$, ,, )], [,, ), }], [), },  ], [},  , ETE], [ , ETE, ’], [ETE, ’, 	], [’, 	, E’+TE], [	, E’+TE, ’], [E’+TE, ’, |], [’, |, ϵ], [|, ϵ, 	], [ϵ, 	, TFT], [	, TFT, ’], [TFT, ’, 	], [’, 	, T’*FT], [	, T’*FT, ’], [T’*FT, ’, |], [’, |, ϵ], [|, ϵ, 	], [ϵ, 	, F(E], [	, F(E, )], [F(E, ), |], [), |, d], [|, d,     ], [d,     , Prof.], [    , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[+,  	T, +, 	E’+TE’ |, 	T’*FT’ |, ϵ, 	F(E, |, id     Prof. Jay R Dhamsaniya, PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 307 =============================

Example-3: LL(1) parsing Step 3: 


>> Tokens are: 
[Example-3, :, LL(1, ), parsing, Step, 3, :] 

>> PoS Tags are: 
[('Example-3', 'PROPN'), (':', 'PUNCT'), ('LL(1', 'PROPN'), (')', 'PUNCT'), ('parsing', 'VERB'), ('Step', 'NOUN'), ('3', 'NUM'), (':', 'PUNCT')] 

>> Dependency Tags are: 
[('Example-3', 'ROOT'), (':', 'punct'), ('LL(1', 'appos'), (')', 'punct'), ('parsing', 'acl'), ('Step', 'dobj'), ('3', 'nummod'), (':', 'punct')]

>> Bigrams: 
[[Example-3, :], [:, LL(1], [LL(1, )], [), parsing], [parsing, Step], [Step, 3], [3, :]]

>> Trigrams: 
[[Example-3, :, LL(1], [:, LL(1, )], [LL(1, ), parsing], [), parsing, Step], [parsing, Step, 3], [Step, 3, :]]

>> Noun Phrases are: 
[Example-3, : LL(1, Step]

>> Named Entities are: 
[('3', 'CARDINAL')]


============================ Sentence 308 =============================

Construct predictive parsing table        TFT’ a=FIRST(FT’)={ (,id } M[T,(]=TFT’ M[T,id]=TFT’   	NT	Input Symbol					 		 


>> Tokens are: 
[Construct, predictive, parsing, table,        , TFT, ’, =, FIRST(FT’)=, {, (, ,, d, }, M[T,(]=TFT, ’, M[T, ,, id]=TFT, ’,   	, NT, 	, Input, Symbol, 					 		] 

>> PoS Tags are: 
[('Construct', 'VERB'), ('predictive', 'ADJ'), ('parsing', 'VERB'), ('table', 'NOUN'), ('       ', 'SPACE'), ('T\uf0e0FT', 'NOUN'), ('’', 'PUNCT'), ('=', 'SYM'), ('FIRST(FT’)=', 'NOUN'), ('{', 'PUNCT'), ('(', 'PUNCT'), (',', 'PUNCT'), ('d', 'X'), ('}', 'PUNCT'), ('M[T,(]=T\uf0e0FT', 'PROPN'), ('’', 'PUNCT'), ('M[T', 'NOUN'), (',', 'PUNCT'), ('id]=T\uf0e0FT', 'NOUN'), ('’', 'PUNCT'), ('  \t', 'SPACE'), ('NT', 'PROPN'), ('\t', 'SPACE'), ('Input', 'PROPN'), ('Symbol', 'PROPN'), ('\t\t\t\t\t \t\t', 'SPACE')] 

>> Dependency Tags are: 
[('Construct', 'ROOT'), ('predictive', 'amod'), ('parsing', 'amod'), ('table', 'dobj'), ('       ', 'dobj'), ('T\uf0e0FT', 'prep'), ('’', 'punct'), ('=', 'compound'), ('FIRST(FT’)=', 'pobj'), ('{', 'punct'), ('(', 'punct'), (',', 'punct'), ('d', 'nmod'), ('}', 'punct'), ('M[T,(]=T\uf0e0FT', 'nmod'), ('’', 'punct'), ('M[T', 'appos'), (',', 'punct'), ('id]=T\uf0e0FT', 'dobj'), ('’', 'punct'), ('  \t', 'compound'), ('NT', 'appos'), ('\t', 'compound'), ('Input', 'compound'), ('Symbol', 'nsubj'), ('\t\t\t\t\t \t\t', 'xcomp')]

>> Bigrams: 
[[Construct, predictive], [predictive, parsing], [parsing, table], [table,        ], [       , TFT], [TFT, ’], [’, =], [=, FIRST(FT’)=], [FIRST(FT’)=, {], [{, (], [(, ,], [,, d], [d, }], [}, M[T,(]=TFT], [M[T,(]=TFT, ’], [’, M[T], [M[T, ,], [,, id]=TFT], [id]=TFT, ’], [’,   	], [  	, NT], [NT, 	], [	, Input], [Input, Symbol], [Symbol, 					 		]]

>> Trigrams: 
[[Construct, predictive, parsing], [predictive, parsing, table], [parsing, table,        ], [table,        , TFT], [       , TFT, ’], [TFT, ’, =], [’, =, FIRST(FT’)=], [=, FIRST(FT’)=, {], [FIRST(FT’)=, {, (], [{, (, ,], [(, ,, d], [,, d, }], [d, }, M[T,(]=TFT], [}, M[T,(]=TFT, ’], [M[T,(]=TFT, ’, M[T], [’, M[T, ,], [M[T, ,, id]=TFT], [,, id]=TFT, ’], [id]=TFT, ’,   	], [’,   	, NT], [  	, NT, 	], [NT, 	, Input], [	, Input, Symbol], [Input, Symbol, 					 		]]

>> Noun Phrases are: 
[predictive parsing table, ’ a=FIRST(FT’)=, (,id } M[T,(]=TFT’ M[T, id]=TFT,   	NT, 	Input Symbol]

>> Named Entities are: 
[('Construct', 'ORG'), ('’   \tNT', 'WORK_OF_ART'), ('Input Symbol', 'PERSON')]


============================ Sentence 309 =============================

id	+	*	(	)	$ 	E	ETE’			ETE’		 	E’		E’+TE’			E’𝜖	E’𝜖 	T	TFT’			TFT’		 	T’						 	F						    	NT	First	Follow  	E	{ (,id }	{ $,) }  	E’	{ +, 𝜖 }	{ $,) }  	T 


>> Tokens are: 
[d, 	, +, 	, *, 	, (, 	, ), 	, $, 	, E, 	, ETE, ’, 			, ETE, ’, 		 	, E, ’, 		, E’+TE, ’, 			, E’𝜖, 	, E’𝜖, 	, T, 	, TFT, ’, 			, TFT, ’, 		 	, T, ’, 						 	, F, 						    	, NT, 	, 	, Follow,  	, E, 	, {, (, ,, d, }, 	, {, $, ,, ), },  	, E, ’, 	, {, +, ,, 𝜖, }, 	, {, $, ,, ), },  	, T] 

>> PoS Tags are: 
[('d', 'PROPN'), ('\t', 'SPACE'), ('+', 'CCONJ'), ('\t', 'SPACE'), ('*', 'PUNCT'), ('\t', 'SPACE'), ('(', 'PUNCT'), ('\t', 'SPACE'), (')', 'PUNCT'), ('\t', 'SPACE'), ('$', 'SYM'), ('\t', 'SPACE'), ('E', 'PROPN'), ('\t', 'SPACE'), ('E\uf0e0TE', 'NOUN'), ('’', 'PUNCT'), ('\t\t\t', 'SPACE'), ('E\uf0e0TE', 'NOUN'), ('’', 'PUNCT'), ('\t\t \t', 'SPACE'), ('E', 'NOUN'), ('’', 'PUNCT'), ('\t\t', 'SPACE'), ('E’\uf0e0+TE', 'PROPN'), ('’', 'PART'), ('\t\t\t', 'SPACE'), ('E’\uf0e0𝜖', 'NOUN'), ('\t', 'SPACE'), ('E’\uf0e0𝜖', 'NOUN'), ('\t', 'SPACE'), ('T', 'PROPN'), ('\t', 'SPACE'), ('T\uf0e0FT', 'VERB'), ('’', 'PUNCT'), ('\t\t\t', 'SPACE'), ('T\uf0e0FT', 'NOUN'), ('’', 'PUNCT'), ('\t\t \t', 'SPACE'), ('T', 'NOUN'), ('’', 'PUNCT'), ('\t\t\t\t\t\t \t', 'SPACE'), ('F', 'PROPN'), ('\t\t\t\t\t\t    \t', 'SPACE'), ('NT', 'PROPN'), ('\t', 'SPACE'), ('\t', 'SPACE'), ('Follow', 'PROPN'), (' \t', 'SPACE'), ('E', 'NOUN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('(', 'PUNCT'), (',', 'PUNCT'), ('d', 'X'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('$', 'SYM'), (',', 'PUNCT'), (')', 'PUNCT'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('E', 'NOUN'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('+', 'CCONJ'), (',', 'PUNCT'), ('𝜖', 'X'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('$', 'SYM'), (',', 'PUNCT'), (')', 'PUNCT'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('T', 'NOUN')] 

>> Dependency Tags are: 
[('d', 'compound'), ('\t', 'appos'), ('+', 'cc'), ('\t', 'conj'), ('*', 'punct'), ('\t', 'appos'), ('(', 'punct'), ('\t', 'appos'), (')', 'punct'), ('\t', 'appos'), ('$', 'punct'), ('\t', 'nmod'), ('E', 'nmod'), ('\t', 'nmod'), ('E\uf0e0TE', 'nmod'), ('’', 'punct'), ('\t\t\t', 'nmod'), ('E\uf0e0TE', 'nmod'), ('’', 'punct'), ('\t\t \t', 'compound'), ('E', 'appos'), ('’', 'punct'), ('\t\t', 'prep'), ('E’\uf0e0+TE', 'poss'), ('’', 'case'), ('\t\t\t', 'compound'), ('E’\uf0e0𝜖', 'compound'), ('\t', 'compound'), ('E’\uf0e0𝜖', 'compound'), ('\t', 'compound'), ('T', 'compound'), ('\t', 'compound'), ('T\uf0e0FT', 'nmod'), ('’', 'punct'), ('\t\t\t', 'compound'), ('T\uf0e0FT', 'nmod'), ('’', 'punct'), ('\t\t \t', 'nmod'), ('T', 'nmod'), ('’', 'punct'), ('\t\t\t\t\t\t \t', 'compound'), ('F', 'compound'), ('\t\t\t\t\t\t    \t', 'compound'), ('NT', 'appos'), ('\t', 'compound'), ('\t', 'compound'), ('Follow', 'nmod'), (' \t', 'compound'), ('E', 'compound'), ('\t', 'ROOT'), ('{', 'punct'), ('(', 'punct'), (',', 'punct'), ('d', 'meta'), ('}', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('$', 'appos'), (',', 'punct'), (')', 'punct'), ('}', 'punct'), (' \t', 'compound'), ('E', 'appos'), ('’', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('+', 'appos'), (',', 'punct'), ('𝜖', 'appos'), ('}', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('$', 'appos'), (',', 'punct'), (')', 'punct'), ('}', 'punct'), (' \t', 'compound'), ('T', 'appos')]

>> Bigrams: 
[[d, 	], [	, +], [+, 	], [	, *], [*, 	], [	, (], [(, 	], [	, )], [), 	], [	, $], [$, 	], [	, E], [E, 	], [	, ETE], [ETE, ’], [’, 			], [			, ETE], [ETE, ’], [’, 		 	], [		 	, E], [E, ’], [’, 		], [		, E’+TE], [E’+TE, ’], [’, 			], [			, E’𝜖], [E’𝜖, 	], [	, E’𝜖], [E’𝜖, 	], [	, T], [T, 	], [	, TFT], [TFT, ’], [’, 			], [			, TFT], [TFT, ’], [’, 		 	], [		 	, T], [T, ’], [’, 						 	], [						 	, F], [F, 						    	], [						    	, NT], [NT, 	], [	, 	], [	, Follow], [Follow,  	], [ 	, E], [E, 	], [	, {], [{, (], [(, ,], [,, d], [d, }], [}, 	], [	, {], [{, $], [$, ,], [,, )], [), }], [},  	], [ 	, E], [E, ’], [’, 	], [	, {], [{, +], [+, ,], [,, 𝜖], [𝜖, }], [}, 	], [	, {], [{, $], [$, ,], [,, )], [), }], [},  	], [ 	, T]]

>> Trigrams: 
[[d, 	, +], [	, +, 	], [+, 	, *], [	, *, 	], [*, 	, (], [	, (, 	], [(, 	, )], [	, ), 	], [), 	, $], [	, $, 	], [$, 	, E], [	, E, 	], [E, 	, ETE], [	, ETE, ’], [ETE, ’, 			], [’, 			, ETE], [			, ETE, ’], [ETE, ’, 		 	], [’, 		 	, E], [		 	, E, ’], [E, ’, 		], [’, 		, E’+TE], [		, E’+TE, ’], [E’+TE, ’, 			], [’, 			, E’𝜖], [			, E’𝜖, 	], [E’𝜖, 	, E’𝜖], [	, E’𝜖, 	], [E’𝜖, 	, T], [	, T, 	], [T, 	, TFT], [	, TFT, ’], [TFT, ’, 			], [’, 			, TFT], [			, TFT, ’], [TFT, ’, 		 	], [’, 		 	, T], [		 	, T, ’], [T, ’, 						 	], [’, 						 	, F], [						 	, F, 						    	], [F, 						    	, NT], [						    	, NT, 	], [NT, 	, 	], [	, 	, Follow], [	, Follow,  	], [Follow,  	, E], [ 	, E, 	], [E, 	, {], [	, {, (], [{, (, ,], [(, ,, d], [,, d, }], [d, }, 	], [}, 	, {], [	, {, $], [{, $, ,], [$, ,, )], [,, ), }], [), },  	], [},  	, E], [ 	, E, ’], [E, ’, 	], [’, 	, {], [	, {, +], [{, +, ,], [+, ,, 𝜖], [,, 𝜖, }], [𝜖, }, 	], [}, 	, {], [	, {, $], [{, $, ,], [$, ,, )], [,, ), }], [), },  	], [},  	, T]]

>> Noun Phrases are: 
[	E	ETE’			ETE’		 	E, E’+TE’			E’𝜖	E’𝜖 	T	TFT’			TFT’		 	T’						 	F						    	NT,  	E,  	T]

>> Named Entities are: 
[('E\uf0e0TE', 'ORG'), ('F\t\t\t\t\t\t    \t', 'PERSON'), ('First', 'ORDINAL')]


============================ Sentence 310 =============================

	{ (,id }	{ +,$,) }  	T’	{ *, 𝜖 }	{ +,$,) }  	F	{ (,id }	{*,+,$,)}  ETE’ 	E’+TE’ | ϵ 	TFT’ 	T’*FT’ | ϵ 	F(E) | id   


>> Tokens are: 
[	, {, (, ,, d, }, 	, {, +, ,, $, ,, ), },  	, T, ’, 	, {, *, ,, 𝜖, }, 	, {, +, ,, $, ,, ), },  	, F, 	, {, (, ,, d, }, 	, {, *, ,, +, ,, $, ,, ), },  , ETE, ’, 	, E’+TE, ’, |, ϵ, 	, TFT, ’, 	, T’*FT, ’, |, ϵ, 	, F(E, ), |, d,  ] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('{', 'PUNCT'), ('(', 'PUNCT'), (',', 'PUNCT'), ('d', 'X'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('+', 'PROPN'), (',', 'PUNCT'), ('$', 'SYM'), (',', 'PUNCT'), (')', 'PUNCT'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('T', 'NOUN'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('*', 'PUNCT'), (',', 'PUNCT'), ('𝜖', 'ADJ'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('+', 'PROPN'), (',', 'PUNCT'), ('$', 'SYM'), (',', 'PUNCT'), (')', 'PUNCT'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('F', 'PROPN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('(', 'PUNCT'), (',', 'PUNCT'), ('d', 'X'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('*', 'PUNCT'), (',', 'PUNCT'), ('+', 'ADJ'), (',', 'PUNCT'), ('$', 'SYM'), (',', 'PUNCT'), (')', 'PUNCT'), ('}', 'PUNCT'), (' ', 'SPACE'), ('E\uf0e0TE', 'X'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('E’\uf0e0+TE', 'PROPN'), ('’', 'PUNCT'), ('|', 'NOUN'), ('ϵ', 'NOUN'), ('\t', 'SPACE'), ('T\uf0e0FT', 'VERB'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('T’\uf0e0*FT', 'NOUN'), ('’', 'PUNCT'), ('|', 'NOUN'), ('ϵ', 'NOUN'), ('\t', 'SPACE'), ('F\uf0e0(E', 'NOUN'), (')', 'PUNCT'), ('|', 'NOUN'), ('d', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('{', 'punct'), ('(', 'punct'), (',', 'punct'), ('d', 'meta'), ('}', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('+', 'appos'), (',', 'punct'), ('$', 'appos'), (',', 'punct'), (')', 'punct'), ('}', 'punct'), (' \t', 'compound'), ('T', 'appos'), ('’', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('*', 'punct'), (',', 'punct'), ('𝜖', 'appos'), ('}', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('+', 'appos'), (',', 'punct'), ('$', 'appos'), (',', 'punct'), (')', 'punct'), ('}', 'punct'), (' \t', 'compound'), ('F', 'compound'), ('\t', 'appos'), ('{', 'punct'), ('(', 'punct'), (',', 'punct'), ('d', 'meta'), ('}', 'punct'), ('\t', 'conj'), ('{', 'punct'), ('*', 'punct'), (',', 'punct'), ('+', 'appos'), (',', 'punct'), ('$', 'appos'), (',', 'punct'), (')', 'punct'), ('}', 'punct'), (' ', 'appos'), ('E\uf0e0TE', 'appos'), ('’', 'punct'), ('\t', 'compound'), ('E’\uf0e0+TE', 'poss'), ('’', 'punct'), ('|', 'appos'), ('ϵ', 'punct'), ('\t', 'amod'), ('T\uf0e0FT', 'relcl'), ('’', 'punct'), ('\t', 'compound'), ('T’\uf0e0*FT', 'poss'), ('’', 'punct'), ('|', 'dobj'), ('ϵ', 'appos'), ('\t', 'compound'), ('F\uf0e0(E', 'appos'), (')', 'punct'), ('|', 'appos'), ('d', 'appos'), (' ', 'punct')]

>> Bigrams: 
[[	, {], [{, (], [(, ,], [,, d], [d, }], [}, 	], [	, {], [{, +], [+, ,], [,, $], [$, ,], [,, )], [), }], [},  	], [ 	, T], [T, ’], [’, 	], [	, {], [{, *], [*, ,], [,, 𝜖], [𝜖, }], [}, 	], [	, {], [{, +], [+, ,], [,, $], [$, ,], [,, )], [), }], [},  	], [ 	, F], [F, 	], [	, {], [{, (], [(, ,], [,, d], [d, }], [}, 	], [	, {], [{, *], [*, ,], [,, +], [+, ,], [,, $], [$, ,], [,, )], [), }], [},  ], [ , ETE], [ETE, ’], [’, 	], [	, E’+TE], [E’+TE, ’], [’, |], [|, ϵ], [ϵ, 	], [	, TFT], [TFT, ’], [’, 	], [	, T’*FT], [T’*FT, ’], [’, |], [|, ϵ], [ϵ, 	], [	, F(E], [F(E, )], [), |], [|, d], [d,  ]]

>> Trigrams: 
[[	, {, (], [{, (, ,], [(, ,, d], [,, d, }], [d, }, 	], [}, 	, {], [	, {, +], [{, +, ,], [+, ,, $], [,, $, ,], [$, ,, )], [,, ), }], [), },  	], [},  	, T], [ 	, T, ’], [T, ’, 	], [’, 	, {], [	, {, *], [{, *, ,], [*, ,, 𝜖], [,, 𝜖, }], [𝜖, }, 	], [}, 	, {], [	, {, +], [{, +, ,], [+, ,, $], [,, $, ,], [$, ,, )], [,, ), }], [), },  	], [},  	, F], [ 	, F, 	], [F, 	, {], [	, {, (], [{, (, ,], [(, ,, d], [,, d, }], [d, }, 	], [}, 	, {], [	, {, *], [{, *, ,], [*, ,, +], [,, +, ,], [+, ,, $], [,, $, ,], [$, ,, )], [,, ), }], [), },  ], [},  , ETE], [ , ETE, ’], [ETE, ’, 	], [’, 	, E’+TE], [	, E’+TE, ’], [E’+TE, ’, |], [’, |, ϵ], [|, ϵ, 	], [ϵ, 	, TFT], [	, TFT, ’], [TFT, ’, 	], [’, 	, T’*FT], [	, T’*FT, ’], [T’*FT, ’, |], [’, |, ϵ], [|, ϵ, 	], [ϵ, 	, F(E], [	, F(E, )], [F(E, ), |], [), |, d], [|, d,  ]]

>> Noun Phrases are: 
[+,  	T, +, 	E’+TE’ |, 	T’*FT’ |, ϵ, 	F(E, |, id]

>> Named Entities are: 
[]


============================ Sentence 311 =============================

Rule: 2 A  a = first() M[A,a] = 


>> Tokens are: 
[Rule, :, 2, A,  , =, (, ), M[A, ,, ], =] 

>> PoS Tags are: 
[('Rule', 'NOUN'), (':', 'PUNCT'), ('2', 'NUM'), ('A\uf0e0', 'NOUN'), (' ', 'SPACE'), ('=', 'PUNCT'), ('(', 'PUNCT'), (')', 'PUNCT'), ('M[A', 'INTJ'), (',', 'PUNCT'), (']', 'PUNCT'), ('=', 'PUNCT')] 

>> Dependency Tags are: 
[('Rule', 'ROOT'), (':', 'punct'), ('2', 'nummod'), ('A\uf0e0', 'appos'), (' ', 'prep'), ('=', 'punct'), ('(', 'punct'), (')', 'punct'), ('M[A', 'prep'), (',', 'punct'), (']', 'punct'), ('=', 'punct')]

>> Bigrams: 
[[Rule, :], [:, 2], [2, A], [A,  ], [ , =], [=, (], [(, )], [), M[A], [M[A, ,], [,, ]], [], =]]

>> Trigrams: 
[[Rule, :, 2], [:, 2, A], [2, A,  ], [A,  , =], [ , =, (], [=, (, )], [(, ), M[A], [), M[A, ,], [M[A, ,, ]], [,, ], =]]

>> Noun Phrases are: 
[Rule, 2 A]

>> Named Entities are: 
[('2', 'CARDINAL'), ('first', 'ORDINAL')]


============================ Sentence 312 =============================

A     Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[A,     , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('A\uf0e0', 'ADV'), ('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('A\uf0e0', 'advmod'), ('    ', 'compound'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'npadvmod'), ('#', 'nmod'), ('3130006', 'appos'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[A,     ], [    , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[A,     , Prof.], [    , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[(PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 313 =============================

Example-3: LL(1) parsing Step 3: 


>> Tokens are: 
[Example-3, :, LL(1, ), parsing, Step, 3, :] 

>> PoS Tags are: 
[('Example-3', 'PROPN'), (':', 'PUNCT'), ('LL(1', 'PROPN'), (')', 'PUNCT'), ('parsing', 'VERB'), ('Step', 'NOUN'), ('3', 'NUM'), (':', 'PUNCT')] 

>> Dependency Tags are: 
[('Example-3', 'ROOT'), (':', 'punct'), ('LL(1', 'appos'), (')', 'punct'), ('parsing', 'acl'), ('Step', 'dobj'), ('3', 'nummod'), (':', 'punct')]

>> Bigrams: 
[[Example-3, :], [:, LL(1], [LL(1, )], [), parsing], [parsing, Step], [Step, 3], [3, :]]

>> Trigrams: 
[[Example-3, :, LL(1], [:, LL(1, )], [LL(1, ), parsing], [), parsing, Step], [parsing, Step, 3], [Step, 3, :]]

>> Noun Phrases are: 
[Example-3, : LL(1, Step]

>> Named Entities are: 
[('3', 'CARDINAL')]


============================ Sentence 314 =============================

Construct predictive parsing table        T’*FT’ a=FIRST(*FT’)={ * } M[T’,*]=T’*FT’  	NT	Input Symbol					 		id	+	*	(	)	$ 	E	ETE’			ETE’		 	E’		E’+TE’			E’𝜖	E’𝜖 	T	TFT’			TFT’		 	T’			T’*FT’			 	F						  Rule: 2 A  a = first() M[A,a] = A   	NT	First	Follow  	E	{ (,id }	{ $,) }  	E’	{ +, 𝜖 }	{ $,) }  	T 


>> Tokens are: 
[Construct, predictive, parsing, table,        , T’*FT, ’, =, FIRST(*FT’)=, {, *, }, M[T’,*]=T’*FT, ’,  	, NT, 	, Input, Symbol, 					 		, d, 	, +, 	, *, 	, (, 	, ), 	, $, 	, E, 	, ETE, ’, 			, ETE, ’, 		 	, E, ’, 		, E’+TE, ’, 			, E’𝜖, 	, E’𝜖, 	, T, 	, TFT, ’, 			, TFT, ’, 		 	, T, ’, 			, T’*FT, ’, 			 	, F, 						  , Rule, :, 2, A,  , =, (, ), M[A, ,, ], =, A,   	, NT, 	, 	, Follow,  	, E, 	, {, (, ,, d, }, 	, {, $, ,, ), },  	, E, ’, 	, {, +, ,, 𝜖, }, 	, {, $, ,, ), },  	, T] 

>> PoS Tags are: 
[('Construct', 'VERB'), ('predictive', 'ADJ'), ('parsing', 'VERB'), ('table', 'NOUN'), ('       ', 'SPACE'), ('T’\uf0e0*FT', 'NOUN'), ('’', 'PUNCT'), ('=', 'SYM'), ('FIRST(*FT’)=', 'PROPN'), ('{', 'PUNCT'), ('*', 'SYM'), ('}', 'PUNCT'), ('M[T’,*]=T’\uf0e0*FT', 'NOUN'), ('’', 'PUNCT'), (' \t', 'SPACE'), ('NT', 'PROPN'), ('\t', 'SPACE'), ('Input', 'PROPN'), ('Symbol', 'PROPN'), ('\t\t\t\t\t \t\t', 'SPACE'), ('d', 'PROPN'), ('\t', 'SPACE'), ('+', 'CCONJ'), ('\t', 'SPACE'), ('*', 'PUNCT'), ('\t', 'SPACE'), ('(', 'PUNCT'), ('\t', 'SPACE'), (')', 'PUNCT'), ('\t', 'SPACE'), ('$', 'SYM'), ('\t', 'SPACE'), ('E', 'PROPN'), ('\t', 'SPACE'), ('E\uf0e0TE', 'NOUN'), ('’', 'PUNCT'), ('\t\t\t', 'SPACE'), ('E\uf0e0TE', 'NOUN'), ('’', 'PUNCT'), ('\t\t \t', 'SPACE'), ('E', 'NOUN'), ('’', 'PUNCT'), ('\t\t', 'SPACE'), ('E’\uf0e0+TE', 'PROPN'), ('’', 'PART'), ('\t\t\t', 'SPACE'), ('E’\uf0e0𝜖', 'NOUN'), ('\t', 'SPACE'), ('E’\uf0e0𝜖', 'NOUN'), ('\t', 'SPACE'), ('T', 'PROPN'), ('\t', 'SPACE'), ('T\uf0e0FT', 'VERB'), ('’', 'PUNCT'), ('\t\t\t', 'SPACE'), ('T\uf0e0FT', 'NOUN'), ('’', 'PUNCT'), ('\t\t \t', 'SPACE'), ('T', 'NOUN'), ('’', 'PUNCT'), ('\t\t\t', 'SPACE'), ('T’\uf0e0*FT', 'NOUN'), ('’', 'PART'), ('\t\t\t \t', 'SPACE'), ('F', 'NOUN'), ('\t\t\t\t\t\t  ', 'SPACE'), ('Rule', 'NOUN'), (':', 'PUNCT'), ('2', 'NUM'), ('A\uf0e0', 'NOUN'), (' ', 'SPACE'), ('=', 'PUNCT'), ('(', 'PUNCT'), (')', 'PUNCT'), ('M[A', 'INTJ'), (',', 'PUNCT'), (']', 'PUNCT'), ('=', 'PUNCT'), ('A\uf0e0', 'INTJ'), ('  \t', 'SPACE'), ('NT', 'PROPN'), ('\t', 'SPACE'), ('\t', 'SPACE'), ('Follow', 'PROPN'), (' \t', 'SPACE'), ('E', 'NOUN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('(', 'PUNCT'), (',', 'PUNCT'), ('d', 'X'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('$', 'SYM'), (',', 'PUNCT'), (')', 'PUNCT'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('E', 'NOUN'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('+', 'CCONJ'), (',', 'PUNCT'), ('𝜖', 'X'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('$', 'SYM'), (',', 'PUNCT'), (')', 'PUNCT'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('T', 'NOUN')] 

>> Dependency Tags are: 
[('Construct', 'ROOT'), ('predictive', 'amod'), ('parsing', 'compound'), ('table', 'dobj'), ('       ', 'compound'), ('T’\uf0e0*FT', 'dobj'), ('’', 'punct'), ('=', 'punct'), ('FIRST(*FT’)=', 'dobj'), ('{', 'punct'), ('*', 'punct'), ('}', 'punct'), ('M[T’,*]=T’\uf0e0*FT', 'appos'), ('’', 'punct'), (' \t', 'compound'), ('NT', 'nmod'), ('\t', 'compound'), ('Input', 'compound'), ('Symbol', 'nsubj'), ('\t\t\t\t\t \t\t', 'relcl'), ('d', 'compound'), ('\t', 'dobj'), ('+', 'cc'), ('\t', 'conj'), ('*', 'punct'), ('\t', 'appos'), ('(', 'punct'), ('\t', 'appos'), (')', 'punct'), ('\t', 'dep'), ('$', 'prep'), ('\t', 'nmod'), ('E', 'nmod'), ('\t', 'nmod'), ('E\uf0e0TE', 'nmod'), ('’', 'punct'), ('\t\t\t', 'nmod'), ('E\uf0e0TE', 'nmod'), ('’', 'punct'), ('\t\t \t', 'compound'), ('E', 'appos'), ('’', 'punct'), ('\t\t', 'prep'), ('E’\uf0e0+TE', 'appos'), ('’', 'case'), ('\t\t\t', 'compound'), ('E’\uf0e0𝜖', 'compound'), ('\t', 'compound'), ('E’\uf0e0𝜖', 'compound'), ('\t', 'compound'), ('T', 'compound'), ('\t', 'compound'), ('T\uf0e0FT', 'prep'), ('’', 'punct'), ('\t\t\t', 'amod'), ('T\uf0e0FT', 'nmod'), ('’', 'punct'), ('\t\t \t', 'nmod'), ('T', 'nmod'), ('’', 'punct'), ('\t\t\t', 'compound'), ('T’\uf0e0*FT', 'poss'), ('’', 'case'), ('\t\t\t \t', 'compound'), ('F', 'compound'), ('\t\t\t\t\t\t  ', 'compound'), ('Rule', 'pobj'), (':', 'punct'), ('2', 'nummod'), ('A\uf0e0', 'appos'), (' ', 'prep'), ('=', 'punct'), ('(', 'punct'), (')', 'punct'), ('M[A', 'intj'), (',', 'punct'), (']', 'dep'), ('=', 'punct'), ('A\uf0e0', 'dobj'), ('  \t', 'nummod'), ('NT', 'compound'), ('\t', 'compound'), ('\t', 'compound'), ('Follow', 'nmod'), (' \t', 'compound'), ('E', 'compound'), ('\t', 'dobj'), ('{', 'punct'), ('(', 'punct'), (',', 'punct'), ('d', 'meta'), ('}', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('$', 'appos'), (',', 'punct'), (')', 'punct'), ('}', 'punct'), (' \t', 'compound'), ('E', 'appos'), ('’', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('+', 'appos'), (',', 'punct'), ('𝜖', 'prep'), ('}', 'punct'), ('\t', 'dobj'), ('{', 'punct'), ('$', 'appos'), (',', 'punct'), (')', 'punct'), ('}', 'punct'), (' \t', 'compound'), ('T', 'dative')]

>> Bigrams: 
[[Construct, predictive], [predictive, parsing], [parsing, table], [table,        ], [       , T’*FT], [T’*FT, ’], [’, =], [=, FIRST(*FT’)=], [FIRST(*FT’)=, {], [{, *], [*, }], [}, M[T’,*]=T’*FT], [M[T’,*]=T’*FT, ’], [’,  	], [ 	, NT], [NT, 	], [	, Input], [Input, Symbol], [Symbol, 					 		], [					 		, d], [d, 	], [	, +], [+, 	], [	, *], [*, 	], [	, (], [(, 	], [	, )], [), 	], [	, $], [$, 	], [	, E], [E, 	], [	, ETE], [ETE, ’], [’, 			], [			, ETE], [ETE, ’], [’, 		 	], [		 	, E], [E, ’], [’, 		], [		, E’+TE], [E’+TE, ’], [’, 			], [			, E’𝜖], [E’𝜖, 	], [	, E’𝜖], [E’𝜖, 	], [	, T], [T, 	], [	, TFT], [TFT, ’], [’, 			], [			, TFT], [TFT, ’], [’, 		 	], [		 	, T], [T, ’], [’, 			], [			, T’*FT], [T’*FT, ’], [’, 			 	], [			 	, F], [F, 						  ], [						  , Rule], [Rule, :], [:, 2], [2, A], [A,  ], [ , =], [=, (], [(, )], [), M[A], [M[A, ,], [,, ]], [], =], [=, A], [A,   	], [  	, NT], [NT, 	], [	, 	], [	, Follow], [Follow,  	], [ 	, E], [E, 	], [	, {], [{, (], [(, ,], [,, d], [d, }], [}, 	], [	, {], [{, $], [$, ,], [,, )], [), }], [},  	], [ 	, E], [E, ’], [’, 	], [	, {], [{, +], [+, ,], [,, 𝜖], [𝜖, }], [}, 	], [	, {], [{, $], [$, ,], [,, )], [), }], [},  	], [ 	, T]]

>> Trigrams: 
[[Construct, predictive, parsing], [predictive, parsing, table], [parsing, table,        ], [table,        , T’*FT], [       , T’*FT, ’], [T’*FT, ’, =], [’, =, FIRST(*FT’)=], [=, FIRST(*FT’)=, {], [FIRST(*FT’)=, {, *], [{, *, }], [*, }, M[T’,*]=T’*FT], [}, M[T’,*]=T’*FT, ’], [M[T’,*]=T’*FT, ’,  	], [’,  	, NT], [ 	, NT, 	], [NT, 	, Input], [	, Input, Symbol], [Input, Symbol, 					 		], [Symbol, 					 		, d], [					 		, d, 	], [d, 	, +], [	, +, 	], [+, 	, *], [	, *, 	], [*, 	, (], [	, (, 	], [(, 	, )], [	, ), 	], [), 	, $], [	, $, 	], [$, 	, E], [	, E, 	], [E, 	, ETE], [	, ETE, ’], [ETE, ’, 			], [’, 			, ETE], [			, ETE, ’], [ETE, ’, 		 	], [’, 		 	, E], [		 	, E, ’], [E, ’, 		], [’, 		, E’+TE], [		, E’+TE, ’], [E’+TE, ’, 			], [’, 			, E’𝜖], [			, E’𝜖, 	], [E’𝜖, 	, E’𝜖], [	, E’𝜖, 	], [E’𝜖, 	, T], [	, T, 	], [T, 	, TFT], [	, TFT, ’], [TFT, ’, 			], [’, 			, TFT], [			, TFT, ’], [TFT, ’, 		 	], [’, 		 	, T], [		 	, T, ’], [T, ’, 			], [’, 			, T’*FT], [			, T’*FT, ’], [T’*FT, ’, 			 	], [’, 			 	, F], [			 	, F, 						  ], [F, 						  , Rule], [						  , Rule, :], [Rule, :, 2], [:, 2, A], [2, A,  ], [A,  , =], [ , =, (], [=, (, )], [(, ), M[A], [), M[A, ,], [M[A, ,, ]], [,, ], =], [], =, A], [=, A,   	], [A,   	, NT], [  	, NT, 	], [NT, 	, 	], [	, 	, Follow], [	, Follow,  	], [Follow,  	, E], [ 	, E, 	], [E, 	, {], [	, {, (], [{, (, ,], [(, ,, d], [,, d, }], [d, }, 	], [}, 	, {], [	, {, $], [{, $, ,], [$, ,, )], [,, ), }], [), },  	], [},  	, E], [ 	, E, ’], [E, ’, 	], [’, 	, {], [	, {, +], [{, +, ,], [+, ,, 𝜖], [,, 𝜖, }], [𝜖, }, 	], [}, 	, {], [	, {, $], [{, $, ,], [$, ,, )], [,, ), }], [), },  	], [},  	, T]]

>> Noun Phrases are: 
[predictive parsing table,        T’*FT, a=FIRST(*FT’)=, * } M[T’,*]=T’*FT,  	NT	Input Symbol, 	E	ETE’			ETE’		 	E, E’+TE, ’			TFT’		 	T’			T’*FT’			 	F						  Rule, 2 A,  	E,  	T]

>> Named Entities are: 
[('Construct', 'ORG'), ('Input Symbol', 'PERSON'), ('E\uf0e0TE', 'ORG'), ('2', 'CARDINAL'), ('first', 'ORDINAL'), ('First', 'ORDINAL')]


============================ Sentence 315 =============================

	{ (,id }	{ +,$,) }  	T’	{ *, 𝜖 }	{ +,$,) }  	F	{ (,id }	{*,+,$,)}  ETE’ 	E’+TE’ | ϵ 	TFT’ 	T’*FT’ | ϵ 	F(E) | id     Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[	, {, (, ,, d, }, 	, {, +, ,, $, ,, ), },  	, T, ’, 	, {, *, ,, 𝜖, }, 	, {, +, ,, $, ,, ), },  	, F, 	, {, (, ,, d, }, 	, {, *, ,, +, ,, $, ,, ), },  , ETE, ’, 	, E’+TE, ’, |, ϵ, 	, TFT, ’, 	, T’*FT, ’, |, ϵ, 	, F(E, ), |, d,     , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('{', 'PUNCT'), ('(', 'PUNCT'), (',', 'PUNCT'), ('d', 'X'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('+', 'PROPN'), (',', 'PUNCT'), ('$', 'SYM'), (',', 'PUNCT'), (')', 'PUNCT'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('T', 'NOUN'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('*', 'PUNCT'), (',', 'PUNCT'), ('𝜖', 'ADJ'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('+', 'PROPN'), (',', 'PUNCT'), ('$', 'SYM'), (',', 'PUNCT'), (')', 'PUNCT'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('F', 'PROPN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('(', 'PUNCT'), (',', 'PUNCT'), ('d', 'X'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('*', 'PUNCT'), (',', 'PUNCT'), ('+', 'ADJ'), (',', 'PUNCT'), ('$', 'SYM'), (',', 'PUNCT'), (')', 'PUNCT'), ('}', 'PUNCT'), (' ', 'SPACE'), ('E\uf0e0TE', 'X'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('E’\uf0e0+TE', 'PROPN'), ('’', 'PUNCT'), ('|', 'NOUN'), ('ϵ', 'NOUN'), ('\t', 'SPACE'), ('T\uf0e0FT', 'VERB'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('T’\uf0e0*FT', 'NOUN'), ('’', 'PUNCT'), ('|', 'NOUN'), ('ϵ', 'NOUN'), ('\t', 'SPACE'), ('F\uf0e0(E', 'NOUN'), (')', 'PUNCT'), ('|', 'NOUN'), ('d', 'NOUN'), ('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('\t', 'nsubj'), ('{', 'punct'), ('(', 'punct'), (',', 'punct'), ('d', 'meta'), ('}', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('+', 'appos'), (',', 'punct'), ('$', 'appos'), (',', 'punct'), (')', 'punct'), ('}', 'punct'), (' \t', 'compound'), ('T', 'appos'), ('’', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('*', 'punct'), (',', 'punct'), ('𝜖', 'appos'), ('}', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('+', 'appos'), (',', 'punct'), ('$', 'appos'), (',', 'punct'), (')', 'punct'), ('}', 'punct'), (' \t', 'compound'), ('F', 'compound'), ('\t', 'appos'), ('{', 'punct'), ('(', 'punct'), (',', 'punct'), ('d', 'meta'), ('}', 'punct'), ('\t', 'conj'), ('{', 'punct'), ('*', 'punct'), (',', 'punct'), ('+', 'appos'), (',', 'punct'), ('$', 'appos'), (',', 'punct'), (')', 'punct'), ('}', 'punct'), (' ', 'appos'), ('E\uf0e0TE', 'appos'), ('’', 'punct'), ('\t', 'compound'), ('E’\uf0e0+TE', 'poss'), ('’', 'punct'), ('|', 'appos'), ('ϵ', 'punct'), ('\t', 'amod'), ('T\uf0e0FT', 'relcl'), ('’', 'punct'), ('\t', 'compound'), ('T’\uf0e0*FT', 'poss'), ('’', 'punct'), ('|', 'dobj'), ('ϵ', 'appos'), ('\t', 'compound'), ('F\uf0e0(E', 'appos'), (')', 'punct'), ('|', 'appos'), ('d', 'meta'), ('    ', 'nummod'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'appos'), ('#', 'nmod'), ('3130006', 'appos'), ('(', 'punct'), ('PS', 'nsubj'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'parataxis'), ('  ', 'appos'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'appos'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'dep')]

>> Bigrams: 
[[	, {], [{, (], [(, ,], [,, d], [d, }], [}, 	], [	, {], [{, +], [+, ,], [,, $], [$, ,], [,, )], [), }], [},  	], [ 	, T], [T, ’], [’, 	], [	, {], [{, *], [*, ,], [,, 𝜖], [𝜖, }], [}, 	], [	, {], [{, +], [+, ,], [,, $], [$, ,], [,, )], [), }], [},  	], [ 	, F], [F, 	], [	, {], [{, (], [(, ,], [,, d], [d, }], [}, 	], [	, {], [{, *], [*, ,], [,, +], [+, ,], [,, $], [$, ,], [,, )], [), }], [},  ], [ , ETE], [ETE, ’], [’, 	], [	, E’+TE], [E’+TE, ’], [’, |], [|, ϵ], [ϵ, 	], [	, TFT], [TFT, ’], [’, 	], [	, T’*FT], [T’*FT, ’], [’, |], [|, ϵ], [ϵ, 	], [	, F(E], [F(E, )], [), |], [|, d], [d,     ], [    , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[	, {, (], [{, (, ,], [(, ,, d], [,, d, }], [d, }, 	], [}, 	, {], [	, {, +], [{, +, ,], [+, ,, $], [,, $, ,], [$, ,, )], [,, ), }], [), },  	], [},  	, T], [ 	, T, ’], [T, ’, 	], [’, 	, {], [	, {, *], [{, *, ,], [*, ,, 𝜖], [,, 𝜖, }], [𝜖, }, 	], [}, 	, {], [	, {, +], [{, +, ,], [+, ,, $], [,, $, ,], [$, ,, )], [,, ), }], [), },  	], [},  	, F], [ 	, F, 	], [F, 	, {], [	, {, (], [{, (, ,], [(, ,, d], [,, d, }], [d, }, 	], [}, 	, {], [	, {, *], [{, *, ,], [*, ,, +], [,, +, ,], [+, ,, $], [,, $, ,], [$, ,, )], [,, ), }], [), },  ], [},  , ETE], [ , ETE, ’], [ETE, ’, 	], [’, 	, E’+TE], [	, E’+TE, ’], [E’+TE, ’, |], [’, |, ϵ], [|, ϵ, 	], [ϵ, 	, TFT], [	, TFT, ’], [TFT, ’, 	], [’, 	, T’*FT], [	, T’*FT, ’], [T’*FT, ’, |], [’, |, ϵ], [|, ϵ, 	], [ϵ, 	, F(E], [	, F(E, )], [F(E, ), |], [), |, d], [|, d,     ], [d,     , Prof.], [    , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[+,  	T, +, 	E’+TE’ |, 	T’*FT’ |, ϵ, 	F(E, |, id     Prof. Jay R Dhamsaniya, PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 316 =============================

Example-3: LL(1) parsing Step 3: 


>> Tokens are: 
[Example-3, :, LL(1, ), parsing, Step, 3, :] 

>> PoS Tags are: 
[('Example-3', 'PROPN'), (':', 'PUNCT'), ('LL(1', 'PROPN'), (')', 'PUNCT'), ('parsing', 'VERB'), ('Step', 'NOUN'), ('3', 'NUM'), (':', 'PUNCT')] 

>> Dependency Tags are: 
[('Example-3', 'ROOT'), (':', 'punct'), ('LL(1', 'appos'), (')', 'punct'), ('parsing', 'acl'), ('Step', 'dobj'), ('3', 'nummod'), (':', 'punct')]

>> Bigrams: 
[[Example-3, :], [:, LL(1], [LL(1, )], [), parsing], [parsing, Step], [Step, 3], [3, :]]

>> Trigrams: 
[[Example-3, :, LL(1], [:, LL(1, )], [LL(1, ), parsing], [), parsing, Step], [parsing, Step, 3], [Step, 3, :]]

>> Noun Phrases are: 
[Example-3, : LL(1, Step]

>> Named Entities are: 
[('3', 'CARDINAL')]


============================ Sentence 317 =============================

Construct predictive parsing table       T’𝜖 b=FOLLOW(T’)={ +,$,) } 


>> Tokens are: 
[Construct, predictive, parsing, table,       , T’𝜖, b, =, FOLLOW(T’)=, {, +, ,, $, ,, ), }] 

>> PoS Tags are: 
[('Construct', 'VERB'), ('predictive', 'ADJ'), ('parsing', 'VERB'), ('table', 'NOUN'), ('      ', 'SPACE'), ('T’\uf0e0𝜖', 'NOUN'), ('b', 'NOUN'), ('=', 'PUNCT'), ('FOLLOW(T’)=', 'PROPN'), ('{', 'PUNCT'), ('+', 'PROPN'), (',', 'PUNCT'), ('$', 'SYM'), (',', 'PUNCT'), (')', 'PUNCT'), ('}', 'PUNCT')] 

>> Dependency Tags are: 
[('Construct', 'ROOT'), ('predictive', 'amod'), ('parsing', 'xcomp'), ('table', 'compound'), ('      ', 'dobj'), ('T’\uf0e0𝜖', 'npadvmod'), ('b', 'prep'), ('=', 'punct'), ('FOLLOW(T’)=', 'dobj'), ('{', 'punct'), ('+', 'appos'), (',', 'punct'), ('$', 'appos'), (',', 'punct'), (')', 'punct'), ('}', 'punct')]

>> Bigrams: 
[[Construct, predictive], [predictive, parsing], [parsing, table], [table,       ], [      , T’𝜖], [T’𝜖, b], [b, =], [=, FOLLOW(T’)=], [FOLLOW(T’)=, {], [{, +], [+, ,], [,, $], [$, ,], [,, )], [), }]]

>> Trigrams: 
[[Construct, predictive, parsing], [predictive, parsing, table], [parsing, table,       ], [table,       , T’𝜖], [      , T’𝜖, b], [T’𝜖, b, =], [b, =, FOLLOW(T’)=], [=, FOLLOW(T’)=, {], [FOLLOW(T’)=, {, +], [{, +, ,], [+, ,, $], [,, $, ,], [$, ,, )], [,, ), }]]

>> Noun Phrases are: 
[=FOLLOW(T’)=, +]

>> Named Entities are: 
[('Construct', 'ORG')]


============================ Sentence 318 =============================

M[T’,+]=T’𝜖 M[T’,$]=T’𝜖 M[T’,)]=T’𝜖  	NT	Input Symbol					 		id	+	*	(	) 


>> Tokens are: 
[M[T’,+]=T’𝜖, M[T’,$]=T’𝜖, M[T’,)]=T’𝜖,  	, NT, 	, Input, Symbol, 					 		, d, 	, +, 	, *, 	, (, 	, )] 

>> PoS Tags are: 
[('M[T’,+]=T’\uf0e0𝜖', 'NOUN'), ('M[T’,$]=T’\uf0e0𝜖', 'NOUN'), ('M[T’,)]=T’\uf0e0𝜖', 'NUM'), (' \t', 'SPACE'), ('NT', 'PROPN'), ('\t', 'SPACE'), ('Input', 'PROPN'), ('Symbol', 'PROPN'), ('\t\t\t\t\t \t\t', 'SPACE'), ('d', 'PROPN'), ('\t', 'SPACE'), ('+', 'CCONJ'), ('\t', 'SPACE'), ('*', 'PUNCT'), ('\t', 'SPACE'), ('(', 'PUNCT'), ('\t', 'SPACE'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('M[T’,+]=T’\uf0e0𝜖', 'compound'), ('M[T’,$]=T’\uf0e0𝜖', 'npadvmod'), ('M[T’,)]=T’\uf0e0𝜖', 'punct'), (' \t', 'nummod'), ('NT', 'nmod'), ('\t', 'compound'), ('Input', 'compound'), ('Symbol', 'nsubj'), ('\t\t\t\t\t \t\t', 'ROOT'), ('d', 'compound'), ('\t', 'dobj'), ('+', 'cc'), ('\t', 'conj'), ('*', 'punct'), ('\t', 'appos'), ('(', 'punct'), ('\t', 'appos'), (')', 'punct')]

>> Bigrams: 
[[M[T’,+]=T’𝜖, M[T’,$]=T’𝜖], [M[T’,$]=T’𝜖, M[T’,)]=T’𝜖], [M[T’,)]=T’𝜖,  	], [ 	, NT], [NT, 	], [	, Input], [Input, Symbol], [Symbol, 					 		], [					 		, d], [d, 	], [	, +], [+, 	], [	, *], [*, 	], [	, (], [(, 	], [	, )]]

>> Trigrams: 
[[M[T’,+]=T’𝜖, M[T’,$]=T’𝜖, M[T’,)]=T’𝜖], [M[T’,$]=T’𝜖, M[T’,)]=T’𝜖,  	], [M[T’,)]=T’𝜖,  	, NT], [ 	, NT, 	], [NT, 	, Input], [	, Input, Symbol], [Input, Symbol, 					 		], [Symbol, 					 		, d], [					 		, d, 	], [d, 	, +], [	, +, 	], [+, 	, *], [	, *, 	], [*, 	, (], [	, (, 	], [(, 	, )]]

>> Noun Phrases are: 
[ 	NT	Input Symbol]

>> Named Entities are: 
[('M[T’,$]=T’\uf0e0𝜖', 'PERSON'), ('Input Symbol', 'PERSON')]


============================ Sentence 319 =============================

	$ 	E	ETE’			ETE’		 	E’		E’+TE’			E’𝜖	E’𝜖 	T	TFT’			TFT’		 	T’		T’𝜖 


>> Tokens are: 
[	, $, 	, E, 	, ETE, ’, 			, ETE, ’, 		 	, E, ’, 		, E’+TE, ’, 			, E’𝜖, 	, E’𝜖, 	, T, 	, TFT, ’, 			, TFT, ’, 		 	, T, ’, 		, T’𝜖] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('$', 'SYM'), ('\t', 'SPACE'), ('E', 'PROPN'), ('\t', 'SPACE'), ('E\uf0e0TE', 'NOUN'), ('’', 'PUNCT'), ('\t\t\t', 'SPACE'), ('E\uf0e0TE', 'NOUN'), ('’', 'PUNCT'), ('\t\t \t', 'SPACE'), ('E', 'NOUN'), ('’', 'PUNCT'), ('\t\t', 'SPACE'), ('E’\uf0e0+TE', 'PROPN'), ('’', 'PART'), ('\t\t\t', 'SPACE'), ('E’\uf0e0𝜖', 'NOUN'), ('\t', 'SPACE'), ('E’\uf0e0𝜖', 'NOUN'), ('\t', 'SPACE'), ('T', 'PROPN'), ('\t', 'SPACE'), ('T\uf0e0FT', 'VERB'), ('’', 'PUNCT'), ('\t\t\t', 'SPACE'), ('T\uf0e0FT', 'NOUN'), ('’', 'PUNCT'), ('\t\t \t', 'SPACE'), ('T', 'NOUN'), ('’', 'PUNCT'), ('\t\t', 'SPACE'), ('T’\uf0e0𝜖', 'NOUN')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('$', 'punct'), ('\t', 'nmod'), ('E', 'nmod'), ('\t', 'nmod'), ('E\uf0e0TE', 'nmod'), ('’', 'punct'), ('\t\t\t', 'nmod'), ('E\uf0e0TE', 'nmod'), ('’', 'punct'), ('\t\t \t', 'compound'), ('E', 'appos'), ('’', 'punct'), ('\t\t', 'prep'), ('E’\uf0e0+TE', 'poss'), ('’', 'case'), ('\t\t\t', 'compound'), ('E’\uf0e0𝜖', 'compound'), ('\t', 'compound'), ('E’\uf0e0𝜖', 'compound'), ('\t', 'compound'), ('T', 'compound'), ('\t', 'compound'), ('T\uf0e0FT', 'nmod'), ('’', 'punct'), ('\t\t\t', 'nmod'), ('T\uf0e0FT', 'nmod'), ('’', 'punct'), ('\t\t \t', 'compound'), ('T', 'appos'), ('’', 'punct'), ('\t\t', 'appos'), ('T’\uf0e0𝜖', 'appos')]

>> Bigrams: 
[[	, $], [$, 	], [	, E], [E, 	], [	, ETE], [ETE, ’], [’, 			], [			, ETE], [ETE, ’], [’, 		 	], [		 	, E], [E, ’], [’, 		], [		, E’+TE], [E’+TE, ’], [’, 			], [			, E’𝜖], [E’𝜖, 	], [	, E’𝜖], [E’𝜖, 	], [	, T], [T, 	], [	, TFT], [TFT, ’], [’, 			], [			, TFT], [TFT, ’], [’, 		 	], [		 	, T], [T, ’], [’, 		], [		, T’𝜖]]

>> Trigrams: 
[[	, $, 	], [$, 	, E], [	, E, 	], [E, 	, ETE], [	, ETE, ’], [ETE, ’, 			], [’, 			, ETE], [			, ETE, ’], [ETE, ’, 		 	], [’, 		 	, E], [		 	, E, ’], [E, ’, 		], [’, 		, E’+TE], [		, E’+TE, ’], [E’+TE, ’, 			], [’, 			, E’𝜖], [			, E’𝜖, 	], [E’𝜖, 	, E’𝜖], [	, E’𝜖, 	], [E’𝜖, 	, T], [	, T, 	], [T, 	, TFT], [	, TFT, ’], [TFT, ’, 			], [’, 			, TFT], [			, TFT, ’], [TFT, ’, 		 	], [’, 		 	, T], [		 	, T, ’], [T, ’, 		], [’, 		, T’𝜖]]

>> Noun Phrases are: 
[	E	ETE’			ETE’		 	E, E’+TE’			E’𝜖	E’𝜖 	T	TFT’			TFT’		 	T, T’𝜖]

>> Named Entities are: 
[('E\uf0e0TE', 'ORG')]


============================ Sentence 320 =============================

	T’*FT’		 


>> Tokens are: 
[	, T’*FT, ’, 		] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('T’\uf0e0*FT', 'NOUN'), ('’', 'PUNCT'), ('\t\t', 'SPACE')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('T’\uf0e0*FT', 'ROOT'), ('’', 'punct'), ('\t\t', 'prep')]

>> Bigrams: 
[[	, T’*FT], [T’*FT, ’], [’, 		]]

>> Trigrams: 
[[	, T’*FT, ’], [T’*FT, ’, 		]]

>> Noun Phrases are: 
[	T’*FT]

>> Named Entities are: 
[('’\t\t', 'WORK_OF_ART')]


============================ Sentence 321 =============================

T’𝜖 


>> Tokens are: 
[T’𝜖] 

>> PoS Tags are: 
[('T’\uf0e0𝜖', 'NOUN')] 

>> Dependency Tags are: 
[('T’\uf0e0𝜖', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[T’𝜖]

>> Named Entities are: 
[]


============================ Sentence 322 =============================

	T’𝜖 	F						  Rule: 3 A  b = follow(A) M[A,b] = A     	NT	First	Follow  	E	{ (,id }	{ $,) }  	E’	{ +, 𝜖 }	{ $,) }  	T 


>> Tokens are: 
[	, T’𝜖, 	, F, 						  , Rule, :, 3, A,  , b, =, follow(A, ), M[A, ,, b, ], =, A,     	, NT, 	, 	, Follow,  	, E, 	, {, (, ,, d, }, 	, {, $, ,, ), },  	, E, ’, 	, {, +, ,, 𝜖, }, 	, {, $, ,, ), },  	, T] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('T’\uf0e0𝜖', 'NOUN'), ('\t', 'SPACE'), ('F', 'PROPN'), ('\t\t\t\t\t\t  ', 'SPACE'), ('Rule', 'NOUN'), (':', 'PUNCT'), ('3', 'NUM'), ('A\uf0e0', 'NOUN'), (' ', 'SPACE'), ('b', 'X'), ('=', 'SYM'), ('follow(A', 'NUM'), (')', 'PUNCT'), ('M[A', 'NOUN'), (',', 'PUNCT'), ('b', 'X'), (']', 'PUNCT'), ('=', 'PUNCT'), ('A\uf0e0', 'ADV'), ('    \t', 'SPACE'), ('NT', 'PROPN'), ('\t', 'SPACE'), ('\t', 'SPACE'), ('Follow', 'PROPN'), (' \t', 'SPACE'), ('E', 'NOUN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('(', 'PUNCT'), (',', 'PUNCT'), ('d', 'X'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('$', 'SYM'), (',', 'PUNCT'), (')', 'PUNCT'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('E', 'NOUN'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('+', 'CCONJ'), (',', 'PUNCT'), ('𝜖', 'X'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('$', 'SYM'), (',', 'PUNCT'), (')', 'PUNCT'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('T', 'NOUN')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('T’\uf0e0𝜖', 'dep'), ('\t', 'compound'), ('F', 'compound'), ('\t\t\t\t\t\t  ', 'intj'), ('Rule', 'dep'), (':', 'punct'), ('3', 'nummod'), ('A\uf0e0', 'appos'), (' ', 'appos'), ('b', 'prep'), ('=', 'appos'), ('follow(A', 'prep'), (')', 'punct'), ('M[A', 'appos'), (',', 'punct'), ('b', 'prep'), (']', 'punct'), ('=', 'punct'), ('A\uf0e0', 'appos'), ('    \t', 'ROOT'), ('NT', 'compound'), ('\t', 'compound'), ('\t', 'compound'), ('Follow', 'compound'), (' \t', 'compound'), ('E', 'compound'), ('\t', 'nsubj'), ('{', 'punct'), ('(', 'punct'), (',', 'punct'), ('d', 'meta'), ('}', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('$', 'appos'), (',', 'punct'), (')', 'punct'), ('}', 'punct'), (' \t', 'compound'), ('E', 'appos'), ('’', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('+', 'appos'), (',', 'punct'), ('𝜖', 'appos'), ('}', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('$', 'appos'), (',', 'punct'), (')', 'punct'), ('}', 'punct'), (' \t', 'compound'), ('T', 'appos')]

>> Bigrams: 
[[	, T’𝜖], [T’𝜖, 	], [	, F], [F, 						  ], [						  , Rule], [Rule, :], [:, 3], [3, A], [A,  ], [ , b], [b, =], [=, follow(A], [follow(A, )], [), M[A], [M[A, ,], [,, b], [b, ]], [], =], [=, A], [A,     	], [    	, NT], [NT, 	], [	, 	], [	, Follow], [Follow,  	], [ 	, E], [E, 	], [	, {], [{, (], [(, ,], [,, d], [d, }], [}, 	], [	, {], [{, $], [$, ,], [,, )], [), }], [},  	], [ 	, E], [E, ’], [’, 	], [	, {], [{, +], [+, ,], [,, 𝜖], [𝜖, }], [}, 	], [	, {], [{, $], [$, ,], [,, )], [), }], [},  	], [ 	, T]]

>> Trigrams: 
[[	, T’𝜖, 	], [T’𝜖, 	, F], [	, F, 						  ], [F, 						  , Rule], [						  , Rule, :], [Rule, :, 3], [:, 3, A], [3, A,  ], [A,  , b], [ , b, =], [b, =, follow(A], [=, follow(A, )], [follow(A, ), M[A], [), M[A, ,], [M[A, ,, b], [,, b, ]], [b, ], =], [], =, A], [=, A,     	], [A,     	, NT], [    	, NT, 	], [NT, 	, 	], [	, 	, Follow], [	, Follow,  	], [Follow,  	, E], [ 	, E, 	], [E, 	, {], [	, {, (], [{, (, ,], [(, ,, d], [,, d, }], [d, }, 	], [}, 	, {], [	, {, $], [{, $, ,], [$, ,, )], [,, ), }], [), },  	], [},  	, E], [ 	, E, ’], [E, ’, 	], [’, 	, {], [	, {, +], [{, +, ,], [+, ,, 𝜖], [,, 𝜖, }], [𝜖, }, 	], [}, 	, {], [	, {, $], [{, $, ,], [$, ,, )], [,, ), }], [), },  	], [},  	, T]]

>> Noun Phrases are: 
[3 A, M[A,  	E,  	T]

>> Named Entities are: 
[('3', 'CARDINAL'), ('First', 'ORDINAL')]


============================ Sentence 323 =============================

	{ (,id }	{ +,$,) }  	T’	{ *, 𝜖 }	{ +,$,) }  	F	{ (,id }	{*,+,$,)}  ETE’ 	E’+TE’ | ϵ 	TFT’ 	T’*FT’ | ϵ 	F(E) | id     Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[	, {, (, ,, d, }, 	, {, +, ,, $, ,, ), },  	, T, ’, 	, {, *, ,, 𝜖, }, 	, {, +, ,, $, ,, ), },  	, F, 	, {, (, ,, d, }, 	, {, *, ,, +, ,, $, ,, ), },  , ETE, ’, 	, E’+TE, ’, |, ϵ, 	, TFT, ’, 	, T’*FT, ’, |, ϵ, 	, F(E, ), |, d,     , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('{', 'PUNCT'), ('(', 'PUNCT'), (',', 'PUNCT'), ('d', 'X'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('+', 'PROPN'), (',', 'PUNCT'), ('$', 'SYM'), (',', 'PUNCT'), (')', 'PUNCT'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('T', 'NOUN'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('*', 'PUNCT'), (',', 'PUNCT'), ('𝜖', 'ADJ'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('+', 'PROPN'), (',', 'PUNCT'), ('$', 'SYM'), (',', 'PUNCT'), (')', 'PUNCT'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('F', 'PROPN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('(', 'PUNCT'), (',', 'PUNCT'), ('d', 'X'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('*', 'PUNCT'), (',', 'PUNCT'), ('+', 'ADJ'), (',', 'PUNCT'), ('$', 'SYM'), (',', 'PUNCT'), (')', 'PUNCT'), ('}', 'PUNCT'), (' ', 'SPACE'), ('E\uf0e0TE', 'X'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('E’\uf0e0+TE', 'PROPN'), ('’', 'PUNCT'), ('|', 'NOUN'), ('ϵ', 'NOUN'), ('\t', 'SPACE'), ('T\uf0e0FT', 'VERB'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('T’\uf0e0*FT', 'NOUN'), ('’', 'PUNCT'), ('|', 'NOUN'), ('ϵ', 'NOUN'), ('\t', 'SPACE'), ('F\uf0e0(E', 'NOUN'), (')', 'PUNCT'), ('|', 'NOUN'), ('d', 'NOUN'), ('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('\t', 'nsubj'), ('{', 'punct'), ('(', 'punct'), (',', 'punct'), ('d', 'meta'), ('}', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('+', 'appos'), (',', 'punct'), ('$', 'appos'), (',', 'punct'), (')', 'punct'), ('}', 'punct'), (' \t', 'compound'), ('T', 'appos'), ('’', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('*', 'punct'), (',', 'punct'), ('𝜖', 'appos'), ('}', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('+', 'appos'), (',', 'punct'), ('$', 'appos'), (',', 'punct'), (')', 'punct'), ('}', 'punct'), (' \t', 'compound'), ('F', 'compound'), ('\t', 'appos'), ('{', 'punct'), ('(', 'punct'), (',', 'punct'), ('d', 'meta'), ('}', 'punct'), ('\t', 'conj'), ('{', 'punct'), ('*', 'punct'), (',', 'punct'), ('+', 'appos'), (',', 'punct'), ('$', 'appos'), (',', 'punct'), (')', 'punct'), ('}', 'punct'), (' ', 'appos'), ('E\uf0e0TE', 'appos'), ('’', 'punct'), ('\t', 'compound'), ('E’\uf0e0+TE', 'poss'), ('’', 'punct'), ('|', 'appos'), ('ϵ', 'punct'), ('\t', 'amod'), ('T\uf0e0FT', 'relcl'), ('’', 'punct'), ('\t', 'compound'), ('T’\uf0e0*FT', 'poss'), ('’', 'punct'), ('|', 'dobj'), ('ϵ', 'appos'), ('\t', 'compound'), ('F\uf0e0(E', 'appos'), (')', 'punct'), ('|', 'appos'), ('d', 'meta'), ('    ', 'nummod'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'appos'), ('#', 'nmod'), ('3130006', 'appos'), ('(', 'punct'), ('PS', 'nsubj'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'parataxis'), ('  ', 'appos'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'appos'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'dep')]

>> Bigrams: 
[[	, {], [{, (], [(, ,], [,, d], [d, }], [}, 	], [	, {], [{, +], [+, ,], [,, $], [$, ,], [,, )], [), }], [},  	], [ 	, T], [T, ’], [’, 	], [	, {], [{, *], [*, ,], [,, 𝜖], [𝜖, }], [}, 	], [	, {], [{, +], [+, ,], [,, $], [$, ,], [,, )], [), }], [},  	], [ 	, F], [F, 	], [	, {], [{, (], [(, ,], [,, d], [d, }], [}, 	], [	, {], [{, *], [*, ,], [,, +], [+, ,], [,, $], [$, ,], [,, )], [), }], [},  ], [ , ETE], [ETE, ’], [’, 	], [	, E’+TE], [E’+TE, ’], [’, |], [|, ϵ], [ϵ, 	], [	, TFT], [TFT, ’], [’, 	], [	, T’*FT], [T’*FT, ’], [’, |], [|, ϵ], [ϵ, 	], [	, F(E], [F(E, )], [), |], [|, d], [d,     ], [    , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[	, {, (], [{, (, ,], [(, ,, d], [,, d, }], [d, }, 	], [}, 	, {], [	, {, +], [{, +, ,], [+, ,, $], [,, $, ,], [$, ,, )], [,, ), }], [), },  	], [},  	, T], [ 	, T, ’], [T, ’, 	], [’, 	, {], [	, {, *], [{, *, ,], [*, ,, 𝜖], [,, 𝜖, }], [𝜖, }, 	], [}, 	, {], [	, {, +], [{, +, ,], [+, ,, $], [,, $, ,], [$, ,, )], [,, ), }], [), },  	], [},  	, F], [ 	, F, 	], [F, 	, {], [	, {, (], [{, (, ,], [(, ,, d], [,, d, }], [d, }, 	], [}, 	, {], [	, {, *], [{, *, ,], [*, ,, +], [,, +, ,], [+, ,, $], [,, $, ,], [$, ,, )], [,, ), }], [), },  ], [},  , ETE], [ , ETE, ’], [ETE, ’, 	], [’, 	, E’+TE], [	, E’+TE, ’], [E’+TE, ’, |], [’, |, ϵ], [|, ϵ, 	], [ϵ, 	, TFT], [	, TFT, ’], [TFT, ’, 	], [’, 	, T’*FT], [	, T’*FT, ’], [T’*FT, ’, |], [’, |, ϵ], [|, ϵ, 	], [ϵ, 	, F(E], [	, F(E, )], [F(E, ), |], [), |, d], [|, d,     ], [d,     , Prof.], [    , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[+,  	T, +, 	E’+TE’ |, 	T’*FT’ |, ϵ, 	F(E, |, id     Prof. Jay R Dhamsaniya, PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 324 =============================

Example-3: LL(1) parsing Step 3: Construct predictive parsing table         F(E) a=FIRST((E))={ ( } M[F,(]=F(E)  	NT	Input Symbol					 		id	+	*	(	)	$ 	E	ETE’			ETE’		 	E’		E’+TE’			E’𝜖	E’𝜖 	T	TFT’			TFT’		 	T’		T’𝜖 


>> Tokens are: 
[Example-3, :, LL(1, ), parsing, Step, 3, :, Construct, predictive, parsing, table,         , F(E, ), =, FIRST((E))=, {, (, }, M[F,(]=F(E, ),  	, NT, 	, Input, Symbol, 					 		, d, 	, +, 	, *, 	, (, 	, ), 	, $, 	, E, 	, ETE, ’, 			, ETE, ’, 		 	, E, ’, 		, E’+TE, ’, 			, E’𝜖, 	, E’𝜖, 	, T, 	, TFT, ’, 			, TFT, ’, 		 	, T, ’, 		, T’𝜖] 

>> PoS Tags are: 
[('Example-3', 'PROPN'), (':', 'PUNCT'), ('LL(1', 'PROPN'), (')', 'PUNCT'), ('parsing', 'VERB'), ('Step', 'NOUN'), ('3', 'NUM'), (':', 'PUNCT'), ('Construct', 'VERB'), ('predictive', 'ADJ'), ('parsing', 'VERB'), ('table', 'NOUN'), ('        ', 'SPACE'), ('F\uf0e0(E', 'NOUN'), (')', 'PUNCT'), ('=', 'SYM'), ('FIRST((E))=', 'X'), ('{', 'PUNCT'), ('(', 'PUNCT'), ('}', 'PUNCT'), ('M[F,(]=F\uf0e0(E', 'PROPN'), (')', 'PUNCT'), (' \t', 'SPACE'), ('NT', 'PROPN'), ('\t', 'SPACE'), ('Input', 'PROPN'), ('Symbol', 'PROPN'), ('\t\t\t\t\t \t\t', 'SPACE'), ('d', 'PROPN'), ('\t', 'SPACE'), ('+', 'CCONJ'), ('\t', 'SPACE'), ('*', 'PUNCT'), ('\t', 'SPACE'), ('(', 'PUNCT'), ('\t', 'SPACE'), (')', 'PUNCT'), ('\t', 'SPACE'), ('$', 'SYM'), ('\t', 'SPACE'), ('E', 'PROPN'), ('\t', 'SPACE'), ('E\uf0e0TE', 'NOUN'), ('’', 'PUNCT'), ('\t\t\t', 'SPACE'), ('E\uf0e0TE', 'NOUN'), ('’', 'PUNCT'), ('\t\t \t', 'SPACE'), ('E', 'NOUN'), ('’', 'PUNCT'), ('\t\t', 'SPACE'), ('E’\uf0e0+TE', 'PROPN'), ('’', 'PART'), ('\t\t\t', 'SPACE'), ('E’\uf0e0𝜖', 'NOUN'), ('\t', 'SPACE'), ('E’\uf0e0𝜖', 'NOUN'), ('\t', 'SPACE'), ('T', 'PROPN'), ('\t', 'SPACE'), ('T\uf0e0FT', 'VERB'), ('’', 'PUNCT'), ('\t\t\t', 'SPACE'), ('T\uf0e0FT', 'NOUN'), ('’', 'PUNCT'), ('\t\t \t', 'SPACE'), ('T', 'NOUN'), ('’', 'PUNCT'), ('\t\t', 'SPACE'), ('T’\uf0e0𝜖', 'NOUN')] 

>> Dependency Tags are: 
[('Example-3', 'nsubj'), (':', 'punct'), ('LL(1', 'appos'), (')', 'punct'), ('parsing', 'acl'), ('Step', 'dobj'), ('3', 'nummod'), (':', 'punct'), ('Construct', 'ROOT'), ('predictive', 'advmod'), ('parsing', 'amod'), ('table', 'compound'), ('        ', 'compound'), ('F\uf0e0(E', 'dobj'), (')', 'punct'), ('=', 'punct'), ('FIRST((E))=', 'dep'), ('{', 'punct'), ('(', 'punct'), ('}', 'punct'), ('M[F,(]=F\uf0e0(E', 'appos'), (')', 'punct'), (' \t', 'nummod'), ('NT', 'appos'), ('\t', 'compound'), ('Input', 'compound'), ('Symbol', 'nsubj'), ('\t\t\t\t\t \t\t', 'relcl'), ('d', 'compound'), ('\t', 'dobj'), ('+', 'cc'), ('\t', 'conj'), ('*', 'punct'), ('\t', 'appos'), ('(', 'punct'), ('\t', 'appos'), (')', 'punct'), ('\t', 'dep'), ('$', 'prep'), ('\t', 'nmod'), ('E', 'nmod'), ('\t', 'nmod'), ('E\uf0e0TE', 'nmod'), ('’', 'punct'), ('\t\t\t', 'nmod'), ('E\uf0e0TE', 'nmod'), ('’', 'punct'), ('\t\t \t', 'compound'), ('E', 'appos'), ('’', 'punct'), ('\t\t', 'prep'), ('E’\uf0e0+TE', 'poss'), ('’', 'case'), ('\t\t\t', 'compound'), ('E’\uf0e0𝜖', 'compound'), ('\t', 'compound'), ('E’\uf0e0𝜖', 'compound'), ('\t', 'compound'), ('T', 'compound'), ('\t', 'compound'), ('T\uf0e0FT', 'nmod'), ('’', 'punct'), ('\t\t\t', 'nmod'), ('T\uf0e0FT', 'nmod'), ('’', 'punct'), ('\t\t \t', 'compound'), ('T', 'dep'), ('’', 'punct'), ('\t\t', 'prep'), ('T’\uf0e0𝜖', 'punct')]

>> Bigrams: 
[[Example-3, :], [:, LL(1], [LL(1, )], [), parsing], [parsing, Step], [Step, 3], [3, :], [:, Construct], [Construct, predictive], [predictive, parsing], [parsing, table], [table,         ], [        , F(E], [F(E, )], [), =], [=, FIRST((E))=], [FIRST((E))=, {], [{, (], [(, }], [}, M[F,(]=F(E], [M[F,(]=F(E, )], [),  	], [ 	, NT], [NT, 	], [	, Input], [Input, Symbol], [Symbol, 					 		], [					 		, d], [d, 	], [	, +], [+, 	], [	, *], [*, 	], [	, (], [(, 	], [	, )], [), 	], [	, $], [$, 	], [	, E], [E, 	], [	, ETE], [ETE, ’], [’, 			], [			, ETE], [ETE, ’], [’, 		 	], [		 	, E], [E, ’], [’, 		], [		, E’+TE], [E’+TE, ’], [’, 			], [			, E’𝜖], [E’𝜖, 	], [	, E’𝜖], [E’𝜖, 	], [	, T], [T, 	], [	, TFT], [TFT, ’], [’, 			], [			, TFT], [TFT, ’], [’, 		 	], [		 	, T], [T, ’], [’, 		], [		, T’𝜖]]

>> Trigrams: 
[[Example-3, :, LL(1], [:, LL(1, )], [LL(1, ), parsing], [), parsing, Step], [parsing, Step, 3], [Step, 3, :], [3, :, Construct], [:, Construct, predictive], [Construct, predictive, parsing], [predictive, parsing, table], [parsing, table,         ], [table,         , F(E], [        , F(E, )], [F(E, ), =], [), =, FIRST((E))=], [=, FIRST((E))=, {], [FIRST((E))=, {, (], [{, (, }], [(, }, M[F,(]=F(E], [}, M[F,(]=F(E, )], [M[F,(]=F(E, ),  	], [),  	, NT], [ 	, NT, 	], [NT, 	, Input], [	, Input, Symbol], [Input, Symbol, 					 		], [Symbol, 					 		, d], [					 		, d, 	], [d, 	, +], [	, +, 	], [+, 	, *], [	, *, 	], [*, 	, (], [	, (, 	], [(, 	, )], [	, ), 	], [), 	, $], [	, $, 	], [$, 	, E], [	, E, 	], [E, 	, ETE], [	, ETE, ’], [ETE, ’, 			], [’, 			, ETE], [			, ETE, ’], [ETE, ’, 		 	], [’, 		 	, E], [		 	, E, ’], [E, ’, 		], [’, 		, E’+TE], [		, E’+TE, ’], [E’+TE, ’, 			], [’, 			, E’𝜖], [			, E’𝜖, 	], [E’𝜖, 	, E’𝜖], [	, E’𝜖, 	], [E’𝜖, 	, T], [	, T, 	], [T, 	, TFT], [	, TFT, ’], [TFT, ’, 			], [’, 			, TFT], [			, TFT, ’], [TFT, ’, 		 	], [’, 		 	, T], [		 	, T, ’], [T, ’, 		], [’, 		, T’𝜖]]

>> Noun Phrases are: 
[Example-3, : LL(1, Step, parsing table         F(E, ( } M[F,(]=F(E,  	NT, 	Input Symbol, 	E	ETE’			ETE’		 	E]

>> Named Entities are: 
[('3', 'CARDINAL'), ('Construct', 'ORG'), ('Input Symbol', 'PERSON'), ('E\uf0e0TE', 'ORG')]


============================ Sentence 325 =============================

	T’*FT’		 


>> Tokens are: 
[	, T’*FT, ’, 		] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('T’\uf0e0*FT', 'NOUN'), ('’', 'PUNCT'), ('\t\t', 'SPACE')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('T’\uf0e0*FT', 'ROOT'), ('’', 'punct'), ('\t\t', 'prep')]

>> Bigrams: 
[[	, T’*FT], [T’*FT, ’], [’, 		]]

>> Trigrams: 
[[	, T’*FT, ’], [T’*FT, ’, 		]]

>> Noun Phrases are: 
[	T’*FT]

>> Named Entities are: 
[('’\t\t', 'WORK_OF_ART')]


============================ Sentence 326 =============================

T’𝜖 


>> Tokens are: 
[T’𝜖] 

>> PoS Tags are: 
[('T’\uf0e0𝜖', 'NOUN')] 

>> Dependency Tags are: 
[('T’\uf0e0𝜖', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[T’𝜖]

>> Named Entities are: 
[]


============================ Sentence 327 =============================

	T’𝜖 	F				F(E) 


>> Tokens are: 
[	, T’𝜖, 	, F, 				, F(E, )] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('T’\uf0e0𝜖', 'NOUN'), ('\t', 'SPACE'), ('F', 'PROPN'), ('\t\t\t\t', 'SPACE'), ('F\uf0e0(E', 'NOUN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('T’\uf0e0𝜖', 'dep'), ('\t', 'compound'), ('F', 'compound'), ('\t\t\t\t', 'compound'), ('F\uf0e0(E', 'ROOT'), (')', 'punct')]

>> Bigrams: 
[[	, T’𝜖], [T’𝜖, 	], [	, F], [F, 				], [				, F(E], [F(E, )]]

>> Trigrams: 
[[	, T’𝜖, 	], [T’𝜖, 	, F], [	, F, 				], [F, 				, F(E], [				, F(E, )]]

>> Noun Phrases are: 
[	T’𝜖 	F				F(E]

>> Named Entities are: 
[('F\t\t\t\t', 'PRODUCT')]


============================ Sentence 328 =============================

		  Rule: 2 A  a = first() M[A,a] = A   	NT	First	Follow  	E	{ (,id }	{ $,) }  	E’	{ +, 𝜖 }	{ $,) }  	T	{ (,id }	{ +,$,) }  	T’ 


>> Tokens are: 
[		  , Rule, :, 2, A,  , =, (, ), M[A, ,, ], =, A,   	, NT, 	, 	, Follow,  	, E, 	, {, (, ,, d, }, 	, {, $, ,, ), },  	, E, ’, 	, {, +, ,, 𝜖, }, 	, {, $, ,, ), },  	, T, 	, {, (, ,, d, }, 	, {, +, ,, $, ,, ), },  	, T, ’] 

>> PoS Tags are: 
[('\t\t  ', 'SPACE'), ('Rule', 'NOUN'), (':', 'PUNCT'), ('2', 'NUM'), ('A\uf0e0', 'NOUN'), (' ', 'SPACE'), ('=', 'PUNCT'), ('(', 'PUNCT'), (')', 'PUNCT'), ('M[A', 'INTJ'), (',', 'PUNCT'), (']', 'PUNCT'), ('=', 'PUNCT'), ('A\uf0e0', 'INTJ'), ('  \t', 'SPACE'), ('NT', 'PROPN'), ('\t', 'SPACE'), ('\t', 'SPACE'), ('Follow', 'PROPN'), (' \t', 'SPACE'), ('E', 'NOUN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('(', 'PUNCT'), (',', 'PUNCT'), ('d', 'X'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('$', 'SYM'), (',', 'PUNCT'), (')', 'PUNCT'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('E', 'NOUN'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('+', 'CCONJ'), (',', 'PUNCT'), ('𝜖', 'X'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('$', 'SYM'), (',', 'PUNCT'), (')', 'PUNCT'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('T', 'NOUN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('(', 'PUNCT'), (',', 'PUNCT'), ('d', 'X'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('+', 'PROPN'), (',', 'PUNCT'), ('$', 'SYM'), (',', 'PUNCT'), (')', 'PUNCT'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('T', 'NOUN'), ('’', 'PUNCT')] 

>> Dependency Tags are: 
[('\t\t  ', 'compound'), ('Rule', 'ROOT'), (':', 'punct'), ('2', 'nummod'), ('A\uf0e0', 'appos'), (' ', 'prep'), ('=', 'punct'), ('(', 'punct'), (')', 'punct'), ('M[A', 'prep'), (',', 'punct'), (']', 'punct'), ('=', 'punct'), ('A\uf0e0', 'appos'), ('  \t', 'nummod'), ('NT', 'compound'), ('\t', 'compound'), ('\t', 'compound'), ('Follow', 'compound'), (' \t', 'compound'), ('E', 'compound'), ('\t', 'appos'), ('{', 'punct'), ('(', 'punct'), (',', 'punct'), ('d', 'meta'), ('}', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('$', 'appos'), (',', 'punct'), (')', 'punct'), ('}', 'punct'), (' \t', 'compound'), ('E', 'appos'), ('’', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('+', 'appos'), (',', 'punct'), ('𝜖', 'appos'), ('}', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('$', 'appos'), (',', 'punct'), (')', 'punct'), ('}', 'punct'), (' \t', 'compound'), ('T', 'appos'), ('\t', 'appos'), ('{', 'punct'), ('(', 'punct'), (',', 'punct'), ('d', 'appos'), ('}', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('+', 'appos'), (',', 'punct'), ('$', 'appos'), (',', 'punct'), (')', 'punct'), ('}', 'punct'), (' \t', 'compound'), ('T', 'appos'), ('’', 'punct')]

>> Bigrams: 
[[		  , Rule], [Rule, :], [:, 2], [2, A], [A,  ], [ , =], [=, (], [(, )], [), M[A], [M[A, ,], [,, ]], [], =], [=, A], [A,   	], [  	, NT], [NT, 	], [	, 	], [	, Follow], [Follow,  	], [ 	, E], [E, 	], [	, {], [{, (], [(, ,], [,, d], [d, }], [}, 	], [	, {], [{, $], [$, ,], [,, )], [), }], [},  	], [ 	, E], [E, ’], [’, 	], [	, {], [{, +], [+, ,], [,, 𝜖], [𝜖, }], [}, 	], [	, {], [{, $], [$, ,], [,, )], [), }], [},  	], [ 	, T], [T, 	], [	, {], [{, (], [(, ,], [,, d], [d, }], [}, 	], [	, {], [{, +], [+, ,], [,, $], [$, ,], [,, )], [), }], [},  	], [ 	, T], [T, ’]]

>> Trigrams: 
[[		  , Rule, :], [Rule, :, 2], [:, 2, A], [2, A,  ], [A,  , =], [ , =, (], [=, (, )], [(, ), M[A], [), M[A, ,], [M[A, ,, ]], [,, ], =], [], =, A], [=, A,   	], [A,   	, NT], [  	, NT, 	], [NT, 	, 	], [	, 	, Follow], [	, Follow,  	], [Follow,  	, E], [ 	, E, 	], [E, 	, {], [	, {, (], [{, (, ,], [(, ,, d], [,, d, }], [d, }, 	], [}, 	, {], [	, {, $], [{, $, ,], [$, ,, )], [,, ), }], [), },  	], [},  	, E], [ 	, E, ’], [E, ’, 	], [’, 	, {], [	, {, +], [{, +, ,], [+, ,, 𝜖], [,, 𝜖, }], [𝜖, }, 	], [}, 	, {], [	, {, $], [{, $, ,], [$, ,, )], [,, ), }], [), },  	], [},  	, T], [ 	, T, 	], [T, 	, {], [	, {, (], [{, (, ,], [(, ,, d], [,, d, }], [d, }, 	], [}, 	, {], [	, {, +], [{, +, ,], [+, ,, $], [,, $, ,], [$, ,, )], [,, ), }], [), },  	], [},  	, T], [ 	, T, ’]]

>> Noun Phrases are: 
[		  Rule, 2 A,  	E,  	T, +,  	T]

>> Named Entities are: 
[('2', 'CARDINAL'), ('first', 'ORDINAL'), ('First', 'ORDINAL')]


============================ Sentence 329 =============================

	{ *, 𝜖 }	{ +,$,) }  	F	{ (,id }	{*,+,$,)}  ETE’ 	E’+TE’ | ϵ 	TFT’ 	T’*FT’ | ϵ 	F(E) | id     Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[	, {, *, ,, 𝜖, }, 	, {, +, ,, $, ,, ), },  	, F, 	, {, (, ,, d, }, 	, {, *, ,, +, ,, $, ,, ), },  , ETE, ’, 	, E’+TE, ’, |, ϵ, 	, TFT, ’, 	, T’*FT, ’, |, ϵ, 	, F(E, ), |, d,     , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('{', 'PUNCT'), ('*', 'PUNCT'), (',', 'PUNCT'), ('𝜖', 'ADJ'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('+', 'PROPN'), (',', 'PUNCT'), ('$', 'SYM'), (',', 'PUNCT'), (')', 'PUNCT'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('F', 'PROPN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('(', 'PUNCT'), (',', 'PUNCT'), ('d', 'X'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('*', 'PUNCT'), (',', 'PUNCT'), ('+', 'ADJ'), (',', 'PUNCT'), ('$', 'SYM'), (',', 'PUNCT'), (')', 'PUNCT'), ('}', 'PUNCT'), (' ', 'SPACE'), ('E\uf0e0TE', 'X'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('E’\uf0e0+TE', 'PROPN'), ('’', 'PUNCT'), ('|', 'NOUN'), ('ϵ', 'NOUN'), ('\t', 'SPACE'), ('T\uf0e0FT', 'VERB'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('T’\uf0e0*FT', 'NOUN'), ('’', 'PUNCT'), ('|', 'NOUN'), ('ϵ', 'NOUN'), ('\t', 'SPACE'), ('F\uf0e0(E', 'NOUN'), (')', 'PUNCT'), ('|', 'NOUN'), ('d', 'NOUN'), ('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('\t', 'nmod'), ('{', 'punct'), ('*', 'punct'), (',', 'punct'), ('𝜖', 'appos'), ('}', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('+', 'appos'), (',', 'punct'), ('$', 'appos'), (',', 'punct'), (')', 'punct'), ('}', 'punct'), (' \t', 'compound'), ('F', 'compound'), ('\t', 'nsubj'), ('{', 'punct'), ('(', 'punct'), (',', 'punct'), ('d', 'appos'), ('}', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('*', 'punct'), (',', 'punct'), ('+', 'appos'), (',', 'punct'), ('$', 'appos'), (',', 'punct'), (')', 'punct'), ('}', 'punct'), (' ', 'appos'), ('E\uf0e0TE', 'appos'), ('’', 'punct'), ('\t', 'compound'), ('E’\uf0e0+TE', 'poss'), ('’', 'punct'), ('|', 'appos'), ('ϵ', 'punct'), ('\t', 'amod'), ('T\uf0e0FT', 'prep'), ('’', 'punct'), ('\t', 'compound'), ('T’\uf0e0*FT', 'poss'), ('’', 'punct'), ('|', 'pobj'), ('ϵ', 'appos'), ('\t', 'compound'), ('F\uf0e0(E', 'appos'), (')', 'punct'), ('|', 'appos'), ('d', 'meta'), ('    ', 'nummod'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'appos'), ('#', 'nmod'), ('3130006', 'appos'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'dobj'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[	, {], [{, *], [*, ,], [,, 𝜖], [𝜖, }], [}, 	], [	, {], [{, +], [+, ,], [,, $], [$, ,], [,, )], [), }], [},  	], [ 	, F], [F, 	], [	, {], [{, (], [(, ,], [,, d], [d, }], [}, 	], [	, {], [{, *], [*, ,], [,, +], [+, ,], [,, $], [$, ,], [,, )], [), }], [},  ], [ , ETE], [ETE, ’], [’, 	], [	, E’+TE], [E’+TE, ’], [’, |], [|, ϵ], [ϵ, 	], [	, TFT], [TFT, ’], [’, 	], [	, T’*FT], [T’*FT, ’], [’, |], [|, ϵ], [ϵ, 	], [	, F(E], [F(E, )], [), |], [|, d], [d,     ], [    , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[	, {, *], [{, *, ,], [*, ,, 𝜖], [,, 𝜖, }], [𝜖, }, 	], [}, 	, {], [	, {, +], [{, +, ,], [+, ,, $], [,, $, ,], [$, ,, )], [,, ), }], [), },  	], [},  	, F], [ 	, F, 	], [F, 	, {], [	, {, (], [{, (, ,], [(, ,, d], [,, d, }], [d, }, 	], [}, 	, {], [	, {, *], [{, *, ,], [*, ,, +], [,, +, ,], [+, ,, $], [,, $, ,], [$, ,, )], [,, ), }], [), },  ], [},  , ETE], [ , ETE, ’], [ETE, ’, 	], [’, 	, E’+TE], [	, E’+TE, ’], [E’+TE, ’, |], [’, |, ϵ], [|, ϵ, 	], [ϵ, 	, TFT], [	, TFT, ’], [TFT, ’, 	], [’, 	, T’*FT], [	, T’*FT, ’], [T’*FT, ’, |], [’, |, ϵ], [|, ϵ, 	], [ϵ, 	, F(E], [	, F(E, )], [F(E, ), |], [), |, d], [|, d,     ], [d,     , Prof.], [    , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[+, 	E’+TE’ |, 	T’*FT’ |, ϵ, |, id     Prof. Jay R Dhamsaniya, PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 330 =============================

Example-3: LL(1) parsing Step 3: 


>> Tokens are: 
[Example-3, :, LL(1, ), parsing, Step, 3, :] 

>> PoS Tags are: 
[('Example-3', 'PROPN'), (':', 'PUNCT'), ('LL(1', 'PROPN'), (')', 'PUNCT'), ('parsing', 'VERB'), ('Step', 'NOUN'), ('3', 'NUM'), (':', 'PUNCT')] 

>> Dependency Tags are: 
[('Example-3', 'ROOT'), (':', 'punct'), ('LL(1', 'appos'), (')', 'punct'), ('parsing', 'acl'), ('Step', 'dobj'), ('3', 'nummod'), (':', 'punct')]

>> Bigrams: 
[[Example-3, :], [:, LL(1], [LL(1, )], [), parsing], [parsing, Step], [Step, 3], [3, :]]

>> Trigrams: 
[[Example-3, :, LL(1], [:, LL(1, )], [LL(1, ), parsing], [), parsing, Step], [parsing, Step, 3], [Step, 3, :]]

>> Noun Phrases are: 
[Example-3, : LL(1, Step]

>> Named Entities are: 
[('3', 'CARDINAL')]


============================ Sentence 331 =============================

Construct predictive parsing table         Fid a=FIRST(id)={ id } M[F,id]=Fid  	NT	Input Symbol					 		 


>> Tokens are: 
[Construct, predictive, parsing, table,         , Fid, =, FIRST(id)=, {, d, }, M[F, ,, id]=Fid,  	, NT, 	, Input, Symbol, 					 		] 

>> PoS Tags are: 
[('Construct', 'VERB'), ('predictive', 'ADJ'), ('parsing', 'VERB'), ('table', 'NOUN'), ('        ', 'SPACE'), ('F\uf0e0id', 'PROPN'), ('=', 'SYM'), ('FIRST(id)=', 'NOUN'), ('{', 'PUNCT'), ('d', 'NOUN'), ('}', 'PUNCT'), ('M[F', 'NOUN'), (',', 'PUNCT'), ('id]=F\uf0e0id', 'PROPN'), (' \t', 'SPACE'), ('NT', 'PROPN'), ('\t', 'SPACE'), ('Input', 'PROPN'), ('Symbol', 'PROPN'), ('\t\t\t\t\t \t\t', 'SPACE')] 

>> Dependency Tags are: 
[('Construct', 'ROOT'), ('predictive', 'amod'), ('parsing', 'compound'), ('table', 'compound'), ('        ', 'compound'), ('F\uf0e0id', 'dobj'), ('=', 'punct'), ('FIRST(id)=', 'dobj'), ('{', 'punct'), ('d', 'appos'), ('}', 'punct'), ('M[F', 'dobj'), (',', 'punct'), ('id]=F\uf0e0id', 'conj'), (' \t', 'compound'), ('NT', 'appos'), ('\t', 'compound'), ('Input', 'compound'), ('Symbol', 'nsubj'), ('\t\t\t\t\t \t\t', 'conj')]

>> Bigrams: 
[[Construct, predictive], [predictive, parsing], [parsing, table], [table,         ], [        , Fid], [Fid, =], [=, FIRST(id)=], [FIRST(id)=, {], [{, d], [d, }], [}, M[F], [M[F, ,], [,, id]=Fid], [id]=Fid,  	], [ 	, NT], [NT, 	], [	, Input], [Input, Symbol], [Symbol, 					 		]]

>> Trigrams: 
[[Construct, predictive, parsing], [predictive, parsing, table], [parsing, table,         ], [table,         , Fid], [        , Fid, =], [Fid, =, FIRST(id)=], [=, FIRST(id)=, {], [FIRST(id)=, {, d], [{, d, }], [d, }, M[F], [}, M[F, ,], [M[F, ,, id]=Fid], [,, id]=Fid,  	], [id]=Fid,  	, NT], [ 	, NT, 	], [NT, 	, Input], [	, Input, Symbol], [Input, Symbol, 					 		]]

>> Noun Phrases are: 
[predictive parsing table         Fid, a=FIRST(id)=, { id, M[F, id]=Fid,  	NT, 	Input Symbol]

>> Named Entities are: 
[('Construct', 'ORG'), ('Input Symbol', 'PERSON')]


============================ Sentence 332 =============================

id	+	*	(	)	$ 	E	ETE’			ETE’		 	E’		E’+TE’			E’𝜖	E’𝜖 	T	TFT’			TFT’		 	T’		T’𝜖	T’*FT’		 


>> Tokens are: 
[d, 	, +, 	, *, 	, (, 	, ), 	, $, 	, E, 	, ETE, ’, 			, ETE, ’, 		 	, E, ’, 		, E’+TE, ’, 			, E’𝜖, 	, E’𝜖, 	, T, 	, TFT, ’, 			, TFT, ’, 		 	, T, ’, 		, T’𝜖, 	, T’*FT, ’, 		] 

>> PoS Tags are: 
[('d', 'PROPN'), ('\t', 'SPACE'), ('+', 'CCONJ'), ('\t', 'SPACE'), ('*', 'PUNCT'), ('\t', 'SPACE'), ('(', 'PUNCT'), ('\t', 'SPACE'), (')', 'PUNCT'), ('\t', 'SPACE'), ('$', 'SYM'), ('\t', 'SPACE'), ('E', 'PROPN'), ('\t', 'SPACE'), ('E\uf0e0TE', 'NOUN'), ('’', 'PUNCT'), ('\t\t\t', 'SPACE'), ('E\uf0e0TE', 'NOUN'), ('’', 'PUNCT'), ('\t\t \t', 'SPACE'), ('E', 'NOUN'), ('’', 'PUNCT'), ('\t\t', 'SPACE'), ('E’\uf0e0+TE', 'PROPN'), ('’', 'PART'), ('\t\t\t', 'SPACE'), ('E’\uf0e0𝜖', 'NOUN'), ('\t', 'SPACE'), ('E’\uf0e0𝜖', 'NOUN'), ('\t', 'SPACE'), ('T', 'PROPN'), ('\t', 'SPACE'), ('T\uf0e0FT', 'VERB'), ('’', 'PUNCT'), ('\t\t\t', 'SPACE'), ('T\uf0e0FT', 'NOUN'), ('’', 'PUNCT'), ('\t\t \t', 'SPACE'), ('T', 'NOUN'), ('’', 'PUNCT'), ('\t\t', 'SPACE'), ('T’\uf0e0𝜖', 'NOUN'), ('\t', 'SPACE'), ('T’\uf0e0*FT', 'NOUN'), ('’', 'PUNCT'), ('\t\t', 'SPACE')] 

>> Dependency Tags are: 
[('d', 'compound'), ('\t', 'appos'), ('+', 'cc'), ('\t', 'conj'), ('*', 'punct'), ('\t', 'appos'), ('(', 'punct'), ('\t', 'appos'), (')', 'punct'), ('\t', 'appos'), ('$', 'punct'), ('\t', 'nmod'), ('E', 'nmod'), ('\t', 'nmod'), ('E\uf0e0TE', 'nmod'), ('’', 'punct'), ('\t\t\t', 'nmod'), ('E\uf0e0TE', 'nmod'), ('’', 'punct'), ('\t\t \t', 'compound'), ('E', 'appos'), ('’', 'punct'), ('\t\t', 'prep'), ('E’\uf0e0+TE', 'poss'), ('’', 'case'), ('\t\t\t', 'compound'), ('E’\uf0e0𝜖', 'compound'), ('\t', 'compound'), ('E’\uf0e0𝜖', 'compound'), ('\t', 'compound'), ('T', 'compound'), ('\t', 'compound'), ('T\uf0e0FT', 'nmod'), ('’', 'punct'), ('\t\t\t', 'nmod'), ('T\uf0e0FT', 'nmod'), ('’', 'punct'), ('\t\t \t', 'compound'), ('T', 'appos'), ('’', 'punct'), ('\t\t', 'prep'), ('T’\uf0e0𝜖', 'advmod'), ('\t', 'compound'), ('T’\uf0e0*FT', 'ROOT'), ('’', 'punct'), ('\t\t', 'prep')]

>> Bigrams: 
[[d, 	], [	, +], [+, 	], [	, *], [*, 	], [	, (], [(, 	], [	, )], [), 	], [	, $], [$, 	], [	, E], [E, 	], [	, ETE], [ETE, ’], [’, 			], [			, ETE], [ETE, ’], [’, 		 	], [		 	, E], [E, ’], [’, 		], [		, E’+TE], [E’+TE, ’], [’, 			], [			, E’𝜖], [E’𝜖, 	], [	, E’𝜖], [E’𝜖, 	], [	, T], [T, 	], [	, TFT], [TFT, ’], [’, 			], [			, TFT], [TFT, ’], [’, 		 	], [		 	, T], [T, ’], [’, 		], [		, T’𝜖], [T’𝜖, 	], [	, T’*FT], [T’*FT, ’], [’, 		]]

>> Trigrams: 
[[d, 	, +], [	, +, 	], [+, 	, *], [	, *, 	], [*, 	, (], [	, (, 	], [(, 	, )], [	, ), 	], [), 	, $], [	, $, 	], [$, 	, E], [	, E, 	], [E, 	, ETE], [	, ETE, ’], [ETE, ’, 			], [’, 			, ETE], [			, ETE, ’], [ETE, ’, 		 	], [’, 		 	, E], [		 	, E, ’], [E, ’, 		], [’, 		, E’+TE], [		, E’+TE, ’], [E’+TE, ’, 			], [’, 			, E’𝜖], [			, E’𝜖, 	], [E’𝜖, 	, E’𝜖], [	, E’𝜖, 	], [E’𝜖, 	, T], [	, T, 	], [T, 	, TFT], [	, TFT, ’], [TFT, ’, 			], [’, 			, TFT], [			, TFT, ’], [TFT, ’, 		 	], [’, 		 	, T], [		 	, T, ’], [T, ’, 		], [’, 		, T’𝜖], [		, T’𝜖, 	], [T’𝜖, 	, T’*FT], [	, T’*FT, ’], [T’*FT, ’, 		]]

>> Noun Phrases are: 
[	E	ETE’			ETE’		 	E, E’+TE’			E’𝜖	E’𝜖 	T	TFT’			TFT’		 	T]

>> Named Entities are: 
[('E\uf0e0TE', 'ORG'), ('’\t\t', 'WORK_OF_ART')]


============================ Sentence 333 =============================

T’𝜖 


>> Tokens are: 
[T’𝜖] 

>> PoS Tags are: 
[('T’\uf0e0𝜖', 'NOUN')] 

>> Dependency Tags are: 
[('T’\uf0e0𝜖', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[T’𝜖]

>> Named Entities are: 
[]


============================ Sentence 334 =============================

	T’𝜖 	F	Fid			F(E) 


>> Tokens are: 
[	, T’𝜖, 	, F, 	, Fid, 			, F(E, )] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('T’\uf0e0𝜖', 'NOUN'), ('\t', 'SPACE'), ('F', 'PROPN'), ('\t', 'SPACE'), ('F\uf0e0id', 'PROPN'), ('\t\t\t', 'SPACE'), ('F\uf0e0(E', 'NOUN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('T’\uf0e0𝜖', 'ROOT'), ('\t', 'compound'), ('F', 'compound'), ('\t', 'compound'), ('F\uf0e0id', 'compound'), ('\t\t\t', 'compound'), ('F\uf0e0(E', 'appos'), (')', 'punct')]

>> Bigrams: 
[[	, T’𝜖], [T’𝜖, 	], [	, F], [F, 	], [	, Fid], [Fid, 			], [			, F(E], [F(E, )]]

>> Trigrams: 
[[	, T’𝜖, 	], [T’𝜖, 	, F], [	, F, 	], [F, 	, Fid], [	, Fid, 			], [Fid, 			, F(E], [			, F(E, )]]

>> Noun Phrases are: 
[	T’𝜖, 	F	Fid			F(E]

>> Named Entities are: 
[]


============================ Sentence 335 =============================

		  Rule: 2 A  a = first() M[A,a] = A   	NT	First	Follow  	E	{ (,id }	{ $,) }  	E’	{ +, 𝜖 }	{ $,) }  	T 


>> Tokens are: 
[		  , Rule, :, 2, A,  , =, (, ), M[A, ,, ], =, A,   	, NT, 	, 	, Follow,  	, E, 	, {, (, ,, d, }, 	, {, $, ,, ), },  	, E, ’, 	, {, +, ,, 𝜖, }, 	, {, $, ,, ), },  	, T] 

>> PoS Tags are: 
[('\t\t  ', 'SPACE'), ('Rule', 'NOUN'), (':', 'PUNCT'), ('2', 'NUM'), ('A\uf0e0', 'NOUN'), (' ', 'SPACE'), ('=', 'PUNCT'), ('(', 'PUNCT'), (')', 'PUNCT'), ('M[A', 'INTJ'), (',', 'PUNCT'), (']', 'PUNCT'), ('=', 'PUNCT'), ('A\uf0e0', 'INTJ'), ('  \t', 'SPACE'), ('NT', 'PROPN'), ('\t', 'SPACE'), ('\t', 'SPACE'), ('Follow', 'PROPN'), (' \t', 'SPACE'), ('E', 'NOUN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('(', 'PUNCT'), (',', 'PUNCT'), ('d', 'X'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('$', 'SYM'), (',', 'PUNCT'), (')', 'PUNCT'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('E', 'NOUN'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('+', 'CCONJ'), (',', 'PUNCT'), ('𝜖', 'X'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('$', 'SYM'), (',', 'PUNCT'), (')', 'PUNCT'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('T', 'NOUN')] 

>> Dependency Tags are: 
[('\t\t  ', 'compound'), ('Rule', 'ROOT'), (':', 'punct'), ('2', 'nummod'), ('A\uf0e0', 'appos'), (' ', 'prep'), ('=', 'punct'), ('(', 'punct'), (')', 'punct'), ('M[A', 'prep'), (',', 'punct'), (']', 'punct'), ('=', 'punct'), ('A\uf0e0', 'appos'), ('  \t', 'nummod'), ('NT', 'compound'), ('\t', 'compound'), ('\t', 'compound'), ('Follow', 'compound'), (' \t', 'compound'), ('E', 'compound'), ('\t', 'appos'), ('{', 'punct'), ('(', 'punct'), (',', 'punct'), ('d', 'meta'), ('}', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('$', 'appos'), (',', 'punct'), (')', 'punct'), ('}', 'punct'), (' \t', 'compound'), ('E', 'appos'), ('’', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('+', 'appos'), (',', 'punct'), ('𝜖', 'appos'), ('}', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('$', 'appos'), (',', 'punct'), (')', 'punct'), ('}', 'punct'), (' \t', 'compound'), ('T', 'appos')]

>> Bigrams: 
[[		  , Rule], [Rule, :], [:, 2], [2, A], [A,  ], [ , =], [=, (], [(, )], [), M[A], [M[A, ,], [,, ]], [], =], [=, A], [A,   	], [  	, NT], [NT, 	], [	, 	], [	, Follow], [Follow,  	], [ 	, E], [E, 	], [	, {], [{, (], [(, ,], [,, d], [d, }], [}, 	], [	, {], [{, $], [$, ,], [,, )], [), }], [},  	], [ 	, E], [E, ’], [’, 	], [	, {], [{, +], [+, ,], [,, 𝜖], [𝜖, }], [}, 	], [	, {], [{, $], [$, ,], [,, )], [), }], [},  	], [ 	, T]]

>> Trigrams: 
[[		  , Rule, :], [Rule, :, 2], [:, 2, A], [2, A,  ], [A,  , =], [ , =, (], [=, (, )], [(, ), M[A], [), M[A, ,], [M[A, ,, ]], [,, ], =], [], =, A], [=, A,   	], [A,   	, NT], [  	, NT, 	], [NT, 	, 	], [	, 	, Follow], [	, Follow,  	], [Follow,  	, E], [ 	, E, 	], [E, 	, {], [	, {, (], [{, (, ,], [(, ,, d], [,, d, }], [d, }, 	], [}, 	, {], [	, {, $], [{, $, ,], [$, ,, )], [,, ), }], [), },  	], [},  	, E], [ 	, E, ’], [E, ’, 	], [’, 	, {], [	, {, +], [{, +, ,], [+, ,, 𝜖], [,, 𝜖, }], [𝜖, }, 	], [}, 	, {], [	, {, $], [{, $, ,], [$, ,, )], [,, ), }], [), },  	], [},  	, T]]

>> Noun Phrases are: 
[		  Rule, 2 A,  	E,  	T]

>> Named Entities are: 
[('2', 'CARDINAL'), ('first', 'ORDINAL'), ('First', 'ORDINAL')]


============================ Sentence 336 =============================

	{ (,id }	{ +,$,) }  	T’	{ *, 𝜖 }	{ +,$,) }  	F	{ (,id }	{*,+,$,)}  ETE’ 	E’+TE’ | ϵ 	TFT’ 	T’*FT’ | ϵ 	F(E) | id     Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[	, {, (, ,, d, }, 	, {, +, ,, $, ,, ), },  	, T, ’, 	, {, *, ,, 𝜖, }, 	, {, +, ,, $, ,, ), },  	, F, 	, {, (, ,, d, }, 	, {, *, ,, +, ,, $, ,, ), },  , ETE, ’, 	, E’+TE, ’, |, ϵ, 	, TFT, ’, 	, T’*FT, ’, |, ϵ, 	, F(E, ), |, d,     , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('{', 'PUNCT'), ('(', 'PUNCT'), (',', 'PUNCT'), ('d', 'X'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('+', 'PROPN'), (',', 'PUNCT'), ('$', 'SYM'), (',', 'PUNCT'), (')', 'PUNCT'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('T', 'NOUN'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('*', 'PUNCT'), (',', 'PUNCT'), ('𝜖', 'ADJ'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('+', 'PROPN'), (',', 'PUNCT'), ('$', 'SYM'), (',', 'PUNCT'), (')', 'PUNCT'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('F', 'PROPN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('(', 'PUNCT'), (',', 'PUNCT'), ('d', 'X'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('*', 'PUNCT'), (',', 'PUNCT'), ('+', 'ADJ'), (',', 'PUNCT'), ('$', 'SYM'), (',', 'PUNCT'), (')', 'PUNCT'), ('}', 'PUNCT'), (' ', 'SPACE'), ('E\uf0e0TE', 'X'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('E’\uf0e0+TE', 'PROPN'), ('’', 'PUNCT'), ('|', 'NOUN'), ('ϵ', 'NOUN'), ('\t', 'SPACE'), ('T\uf0e0FT', 'VERB'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('T’\uf0e0*FT', 'NOUN'), ('’', 'PUNCT'), ('|', 'NOUN'), ('ϵ', 'NOUN'), ('\t', 'SPACE'), ('F\uf0e0(E', 'NOUN'), (')', 'PUNCT'), ('|', 'NOUN'), ('d', 'NOUN'), ('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('\t', 'nsubj'), ('{', 'punct'), ('(', 'punct'), (',', 'punct'), ('d', 'meta'), ('}', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('+', 'appos'), (',', 'punct'), ('$', 'appos'), (',', 'punct'), (')', 'punct'), ('}', 'punct'), (' \t', 'compound'), ('T', 'appos'), ('’', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('*', 'punct'), (',', 'punct'), ('𝜖', 'appos'), ('}', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('+', 'appos'), (',', 'punct'), ('$', 'appos'), (',', 'punct'), (')', 'punct'), ('}', 'punct'), (' \t', 'compound'), ('F', 'compound'), ('\t', 'appos'), ('{', 'punct'), ('(', 'punct'), (',', 'punct'), ('d', 'meta'), ('}', 'punct'), ('\t', 'conj'), ('{', 'punct'), ('*', 'punct'), (',', 'punct'), ('+', 'appos'), (',', 'punct'), ('$', 'appos'), (',', 'punct'), (')', 'punct'), ('}', 'punct'), (' ', 'appos'), ('E\uf0e0TE', 'appos'), ('’', 'punct'), ('\t', 'compound'), ('E’\uf0e0+TE', 'poss'), ('’', 'punct'), ('|', 'appos'), ('ϵ', 'punct'), ('\t', 'amod'), ('T\uf0e0FT', 'relcl'), ('’', 'punct'), ('\t', 'compound'), ('T’\uf0e0*FT', 'poss'), ('’', 'punct'), ('|', 'dobj'), ('ϵ', 'appos'), ('\t', 'compound'), ('F\uf0e0(E', 'appos'), (')', 'punct'), ('|', 'appos'), ('d', 'meta'), ('    ', 'nummod'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'appos'), ('#', 'nmod'), ('3130006', 'appos'), ('(', 'punct'), ('PS', 'nsubj'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'parataxis'), ('  ', 'appos'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'appos'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'dep')]

>> Bigrams: 
[[	, {], [{, (], [(, ,], [,, d], [d, }], [}, 	], [	, {], [{, +], [+, ,], [,, $], [$, ,], [,, )], [), }], [},  	], [ 	, T], [T, ’], [’, 	], [	, {], [{, *], [*, ,], [,, 𝜖], [𝜖, }], [}, 	], [	, {], [{, +], [+, ,], [,, $], [$, ,], [,, )], [), }], [},  	], [ 	, F], [F, 	], [	, {], [{, (], [(, ,], [,, d], [d, }], [}, 	], [	, {], [{, *], [*, ,], [,, +], [+, ,], [,, $], [$, ,], [,, )], [), }], [},  ], [ , ETE], [ETE, ’], [’, 	], [	, E’+TE], [E’+TE, ’], [’, |], [|, ϵ], [ϵ, 	], [	, TFT], [TFT, ’], [’, 	], [	, T’*FT], [T’*FT, ’], [’, |], [|, ϵ], [ϵ, 	], [	, F(E], [F(E, )], [), |], [|, d], [d,     ], [    , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[	, {, (], [{, (, ,], [(, ,, d], [,, d, }], [d, }, 	], [}, 	, {], [	, {, +], [{, +, ,], [+, ,, $], [,, $, ,], [$, ,, )], [,, ), }], [), },  	], [},  	, T], [ 	, T, ’], [T, ’, 	], [’, 	, {], [	, {, *], [{, *, ,], [*, ,, 𝜖], [,, 𝜖, }], [𝜖, }, 	], [}, 	, {], [	, {, +], [{, +, ,], [+, ,, $], [,, $, ,], [$, ,, )], [,, ), }], [), },  	], [},  	, F], [ 	, F, 	], [F, 	, {], [	, {, (], [{, (, ,], [(, ,, d], [,, d, }], [d, }, 	], [}, 	, {], [	, {, *], [{, *, ,], [*, ,, +], [,, +, ,], [+, ,, $], [,, $, ,], [$, ,, )], [,, ), }], [), },  ], [},  , ETE], [ , ETE, ’], [ETE, ’, 	], [’, 	, E’+TE], [	, E’+TE, ’], [E’+TE, ’, |], [’, |, ϵ], [|, ϵ, 	], [ϵ, 	, TFT], [	, TFT, ’], [TFT, ’, 	], [’, 	, T’*FT], [	, T’*FT, ’], [T’*FT, ’, |], [’, |, ϵ], [|, ϵ, 	], [ϵ, 	, F(E], [	, F(E, )], [F(E, ), |], [), |, d], [|, d,     ], [d,     , Prof.], [    , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[+,  	T, +, 	E’+TE’ |, 	T’*FT’ |, ϵ, 	F(E, |, id     Prof. Jay R Dhamsaniya, PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 337 =============================

Example-3: LL(1) parsing Step 4: Make each undefined entry of table be Error  	NT	Input Symbol					 		id	+	*	(	) 


>> Tokens are: 
[Example-3, :, LL(1, ), parsing, Step, 4, :, undefined, entry, table, Error,  	, NT, 	, Input, Symbol, 					 		, d, 	, +, 	, *, 	, (, 	, )] 

>> PoS Tags are: 
[('Example-3', 'PROPN'), (':', 'PUNCT'), ('LL(1', 'PROPN'), (')', 'PUNCT'), ('parsing', 'VERB'), ('Step', 'NOUN'), ('4', 'NUM'), (':', 'PUNCT'), ('undefined', 'ADJ'), ('entry', 'NOUN'), ('table', 'NOUN'), ('Error', 'PROPN'), (' \t', 'SPACE'), ('NT', 'PROPN'), ('\t', 'SPACE'), ('Input', 'PROPN'), ('Symbol', 'PROPN'), ('\t\t\t\t\t \t\t', 'SPACE'), ('d', 'PROPN'), ('\t', 'SPACE'), ('+', 'CCONJ'), ('\t', 'SPACE'), ('*', 'PUNCT'), ('\t', 'SPACE'), ('(', 'PUNCT'), ('\t', 'SPACE'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('Example-3', 'nsubj'), (':', 'punct'), ('LL(1', 'appos'), (')', 'punct'), ('parsing', 'acl'), ('Step', 'dobj'), ('4', 'nummod'), (':', 'punct'), ('undefined', 'amod'), ('entry', 'nsubj'), ('table', 'pobj'), ('Error', 'compound'), (' \t', 'compound'), ('NT', 'nsubj'), ('\t', 'compound'), ('Input', 'compound'), ('Symbol', 'nsubj'), ('\t\t\t\t\t \t\t', 'ccomp'), ('d', 'compound'), ('\t', 'dobj'), ('+', 'cc'), ('\t', 'conj'), ('*', 'punct'), ('\t', 'appos'), ('(', 'punct'), ('\t', 'appos'), (')', 'punct')]

>> Bigrams: 
[[Example-3, :], [:, LL(1], [LL(1, )], [), parsing], [parsing, Step], [Step, 4], [4, :], [:, undefined], [undefined, entry], [entry, table], [table, Error], [Error,  	], [ 	, NT], [NT, 	], [	, Input], [Input, Symbol], [Symbol, 					 		], [					 		, d], [d, 	], [	, +], [+, 	], [	, *], [*, 	], [	, (], [(, 	], [	, )]]

>> Trigrams: 
[[Example-3, :, LL(1], [:, LL(1, )], [LL(1, ), parsing], [), parsing, Step], [parsing, Step, 4], [Step, 4, :], [4, :, undefined], [:, undefined, entry], [undefined, entry, table], [entry, table, Error], [table, Error,  	], [Error,  	, NT], [ 	, NT, 	], [NT, 	, Input], [	, Input, Symbol], [Input, Symbol, 					 		], [Symbol, 					 		, d], [					 		, d, 	], [d, 	, +], [	, +, 	], [+, 	, *], [	, *, 	], [*, 	, (], [	, (, 	], [(, 	, )]]

>> Noun Phrases are: 
[Example-3, : LL(1, Step, each undefined entry, table, Error  	NT, 	Input Symbol]

>> Named Entities are: 
[('4', 'CARDINAL'), ('Input Symbol', 'PERSON')]


============================ Sentence 338 =============================

	$ 	E	ETE’	Error	Error	ETE’	Error	Error 	E’	Error	E’+TE’	Error	Error	E’𝜖	E’𝜖 	T	TFT’	Error	Error	TFT’	Error	Error 	T’	Error	T’𝜖	T’*FT’	Error	T’𝜖	T’𝜖 	F	Fid	Error	Error	F(E) 


>> Tokens are: 
[	, $, 	, E, 	, ETE, ’, 	, Error, 	, Error, 	, ETE, ’, 	, Error, 	, Error, 	, E, ’, 	, Error, 	, E’+TE, ’, 	, Error, 	, Error, 	, E’𝜖, 	, E’𝜖, 	, T, 	, TFT, ’, 	, Error, 	, Error, 	, TFT, ’, 	, Error, 	, Error, 	, T, ’, 	, Error, 	, T’𝜖, 	, T’*FT, ’, 	, Error, 	, T’𝜖, 	, T’𝜖, 	, F, 	, Fid, 	, Error, 	, Error, 	, F(E, )] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('$', 'SYM'), ('\t', 'SPACE'), ('E', 'PROPN'), ('\t', 'SPACE'), ('E\uf0e0TE', 'X'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('Error', 'PROPN'), ('\t', 'SPACE'), ('Error', 'PROPN'), ('\t', 'SPACE'), ('E\uf0e0TE', 'PROPN'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('Error', 'PROPN'), ('\t', 'SPACE'), ('Error', 'PROPN'), ('\t', 'SPACE'), ('E', 'PROPN'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('Error', 'PROPN'), ('\t', 'SPACE'), ('E’\uf0e0+TE', 'PROPN'), ('’', 'PART'), ('\t', 'SPACE'), ('Error', 'PROPN'), ('\t', 'SPACE'), ('Error', 'PROPN'), ('\t', 'SPACE'), ('E’\uf0e0𝜖', 'NOUN'), ('\t', 'SPACE'), ('E’\uf0e0𝜖', 'NOUN'), ('\t', 'SPACE'), ('T', 'PROPN'), ('\t', 'SPACE'), ('T\uf0e0FT', 'VERB'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('Error', 'PROPN'), ('\t', 'SPACE'), ('Error', 'PROPN'), ('\t', 'SPACE'), ('T\uf0e0FT', 'VERB'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('Error', 'PROPN'), ('\t', 'SPACE'), ('Error', 'PROPN'), ('\t', 'SPACE'), ('T', 'PROPN'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('Error', 'PROPN'), ('\t', 'SPACE'), ('T’\uf0e0𝜖', 'VERB'), ('\t', 'SPACE'), ('T’\uf0e0*FT', 'NOUN'), ('’', 'PART'), ('\t', 'SPACE'), ('Error', 'PROPN'), ('\t', 'SPACE'), ('T’\uf0e0𝜖', 'VERB'), ('\t', 'SPACE'), ('T’\uf0e0𝜖', 'NOUN'), ('\t', 'SPACE'), ('F', 'PROPN'), ('\t', 'SPACE'), ('F\uf0e0id', 'PROPN'), ('\t', 'SPACE'), ('Error', 'PROPN'), ('\t', 'SPACE'), ('Error', 'PROPN'), ('\t', 'SPACE'), ('F\uf0e0(E', 'PROPN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('$', 'nmod'), ('\t', 'nmod'), ('E', 'nmod'), ('\t', 'nmod'), ('E\uf0e0TE', 'nmod'), ('’', 'punct'), ('\t', 'compound'), ('Error', 'nmod'), ('\t', 'compound'), ('Error', 'nmod'), ('\t', 'nmod'), ('E\uf0e0TE', 'cc'), ('’', 'punct'), ('\t', 'compound'), ('Error', 'compound'), ('\t', 'compound'), ('Error', 'nmod'), ('\t', 'nmod'), ('E', 'appos'), ('’', 'punct'), ('\t', 'compound'), ('Error', 'compound'), ('\t', 'compound'), ('E’\uf0e0+TE', 'appos'), ('’', 'punct'), ('\t', 'compound'), ('Error', 'compound'), ('\t', 'compound'), ('Error', 'compound'), ('\t', 'compound'), ('E’\uf0e0𝜖', 'conj'), ('\t', 'compound'), ('E’\uf0e0𝜖', 'appos'), ('\t', 'compound'), ('T', 'conj'), ('\t', 'nsubj'), ('T\uf0e0FT', 'prep'), ('’', 'punct'), ('\t', 'compound'), ('Error', 'compound'), ('\t', 'compound'), ('Error', 'compound'), ('\t', 'nsubj'), ('T\uf0e0FT', 'conj'), ('’', 'punct'), ('\t', 'compound'), ('Error', 'compound'), ('\t', 'compound'), ('Error', 'compound'), ('\t', 'compound'), ('T', 'pobj'), ('’', 'punct'), ('\t', 'compound'), ('Error', 'compound'), ('\t', 'compound'), ('T’\uf0e0𝜖', 'appos'), ('\t', 'compound'), ('T’\uf0e0*FT', 'conj'), ('’', 'punct'), ('\t', 'compound'), ('Error', 'compound'), ('\t', 'compound'), ('T’\uf0e0𝜖', 'appos'), ('\t', 'compound'), ('T’\uf0e0𝜖', 'appos'), ('\t', 'compound'), ('F', 'compound'), ('\t', 'compound'), ('F\uf0e0id', 'compound'), ('\t', 'compound'), ('Error', 'compound'), ('\t', 'compound'), ('Error', 'compound'), ('\t', 'compound'), ('F\uf0e0(E', 'appos'), (')', 'punct')]

>> Bigrams: 
[[	, $], [$, 	], [	, E], [E, 	], [	, ETE], [ETE, ’], [’, 	], [	, Error], [Error, 	], [	, Error], [Error, 	], [	, ETE], [ETE, ’], [’, 	], [	, Error], [Error, 	], [	, Error], [Error, 	], [	, E], [E, ’], [’, 	], [	, Error], [Error, 	], [	, E’+TE], [E’+TE, ’], [’, 	], [	, Error], [Error, 	], [	, Error], [Error, 	], [	, E’𝜖], [E’𝜖, 	], [	, E’𝜖], [E’𝜖, 	], [	, T], [T, 	], [	, TFT], [TFT, ’], [’, 	], [	, Error], [Error, 	], [	, Error], [Error, 	], [	, TFT], [TFT, ’], [’, 	], [	, Error], [Error, 	], [	, Error], [Error, 	], [	, T], [T, ’], [’, 	], [	, Error], [Error, 	], [	, T’𝜖], [T’𝜖, 	], [	, T’*FT], [T’*FT, ’], [’, 	], [	, Error], [Error, 	], [	, T’𝜖], [T’𝜖, 	], [	, T’𝜖], [T’𝜖, 	], [	, F], [F, 	], [	, Fid], [Fid, 	], [	, Error], [Error, 	], [	, Error], [Error, 	], [	, F(E], [F(E, )]]

>> Trigrams: 
[[	, $, 	], [$, 	, E], [	, E, 	], [E, 	, ETE], [	, ETE, ’], [ETE, ’, 	], [’, 	, Error], [	, Error, 	], [Error, 	, Error], [	, Error, 	], [Error, 	, ETE], [	, ETE, ’], [ETE, ’, 	], [’, 	, Error], [	, Error, 	], [Error, 	, Error], [	, Error, 	], [Error, 	, E], [	, E, ’], [E, ’, 	], [’, 	, Error], [	, Error, 	], [Error, 	, E’+TE], [	, E’+TE, ’], [E’+TE, ’, 	], [’, 	, Error], [	, Error, 	], [Error, 	, Error], [	, Error, 	], [Error, 	, E’𝜖], [	, E’𝜖, 	], [E’𝜖, 	, E’𝜖], [	, E’𝜖, 	], [E’𝜖, 	, T], [	, T, 	], [T, 	, TFT], [	, TFT, ’], [TFT, ’, 	], [’, 	, Error], [	, Error, 	], [Error, 	, Error], [	, Error, 	], [Error, 	, TFT], [	, TFT, ’], [TFT, ’, 	], [’, 	, Error], [	, Error, 	], [Error, 	, Error], [	, Error, 	], [Error, 	, T], [	, T, ’], [T, ’, 	], [’, 	, Error], [	, Error, 	], [Error, 	, T’𝜖], [	, T’𝜖, 	], [T’𝜖, 	, T’*FT], [	, T’*FT, ’], [T’*FT, ’, 	], [’, 	, Error], [	, Error, 	], [Error, 	, T’𝜖], [	, T’𝜖, 	], [T’𝜖, 	, T’𝜖], [	, T’𝜖, 	], [T’𝜖, 	, F], [	, F, 	], [F, 	, Fid], [	, Fid, 	], [Fid, 	, Error], [	, Error, 	], [Error, 	, Error], [	, Error, 	], [Error, 	, F(E], [	, F(E, )]]

>> Noun Phrases are: 
[$ 	E	ETE’	Error	Error	ETE’	Error	Error 	E, 	Error	E’+TE, 	Error	Error	E’𝜖, 	E’𝜖, 	T, ’	Error	Error 	T, 	T’*FT, 	T’𝜖, 	F	Fid	Error	Error	F(E]

>> Named Entities are: 
[('’\tError\tT’\uf0e0𝜖\tT’\uf0e0𝜖', 'WORK_OF_ART')]


============================ Sentence 339 =============================

	Error	Error     Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[	, Error, 	, Error,     , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('Error', 'PROPN'), ('\t', 'SPACE'), ('Error', 'PROPN'), ('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('Error', 'nmod'), ('\t', 'compound'), ('Error', 'npadvmod'), ('    ', 'compound'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'appos'), ('#', 'nmod'), ('3130006', 'appos'), ('(', 'punct'), ('PS', 'nsubj'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'dobj'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[	, Error], [Error, 	], [	, Error], [Error,     ], [    , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[	, Error, 	], [Error, 	, Error], [	, Error,     ], [Error,     , Prof.], [    , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[    Prof. Jay R Dhamsaniya, PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('Jay R Dhamsaniya', 'ORG'), ('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 340 =============================

Example-3: LL(1) parsing Step 4: Parse the string : id + id * id $  	STACK	INPUT	OUTPUT  	E$	id+id*id$	  	TE’$	id+id*id$	ETE’  	FT’E’$	id+id*id$	TFT’  	idT’E’$	id+id*id$ 


>> Tokens are: 
[Example-3, :, LL(1, ), parsing, Step, 4, :, Parse, string, :, d, +, d, *, d, $,  	, STACK, 	, INPUT, 	, OUTPUT,  	, E$, 	, id+id*id$, 	  	, TE’$, 	, id+id*id$, 	, ETE, ’,  	, FT’E’$, 	, id+id*id$, 	, TFT, ’,  	, idT’E’$, 	, id+id*id$] 

>> PoS Tags are: 
[('Example-3', 'PROPN'), (':', 'PUNCT'), ('LL(1', 'PROPN'), (')', 'PUNCT'), ('parsing', 'VERB'), ('Step', 'NOUN'), ('4', 'NUM'), (':', 'PUNCT'), ('Parse', 'VERB'), ('string', 'NOUN'), (':', 'PUNCT'), ('d', 'NOUN'), ('+', 'SYM'), ('d', 'NOUN'), ('*', 'NOUN'), ('d', 'NOUN'), ('$', 'SYM'), (' \t', 'SPACE'), ('STACK', 'NOUN'), ('\t', 'SPACE'), ('INPUT', 'PROPN'), ('\t', 'SPACE'), ('OUTPUT', 'PROPN'), (' \t', 'SPACE'), ('E$', 'NOUN'), ('\t', 'SPACE'), ('id+id*id$', 'VERB'), ('\t  \t', 'SPACE'), ('TE’$', 'PROPN'), ('\t', 'SPACE'), ('id+id*id$', 'VERB'), ('\t', 'SPACE'), ('E\uf0e0TE', 'NOUN'), ('’', 'PUNCT'), (' \t', 'SPACE'), ('FT’E’$', 'PROPN'), ('\t', 'SPACE'), ('id+id*id$', 'VERB'), ('\t', 'SPACE'), ('T\uf0e0FT', 'NOUN'), ('’', 'PUNCT'), (' \t', 'SPACE'), ('idT’E’$', 'PROPN'), ('\t', 'SPACE'), ('id+id*id$', 'VERB')] 

>> Dependency Tags are: 
[('Example-3', 'nsubj'), (':', 'punct'), ('LL(1', 'appos'), (')', 'punct'), ('parsing', 'acl'), ('Step', 'dobj'), ('4', 'nummod'), (':', 'punct'), ('Parse', 'appos'), ('string', 'dobj'), (':', 'punct'), ('d', 'appos'), ('+', 'cc'), ('d', 'prep'), ('*', 'punct'), ('d', 'quantmod'), ('$', 'nmod'), (' \t', 'compound'), ('STACK', 'nmod'), ('\t', 'compound'), ('INPUT', 'nmod'), ('\t', 'amod'), ('OUTPUT', 'appos'), (' \t', 'compound'), ('E$', 'appos'), ('\t', 'nsubj'), ('id+id*id$', 'compound'), ('\t  \t', 'conj'), ('TE’$', 'punct'), ('\t', 'conj'), ('id+id*id$', 'ROOT'), ('\t', 'nmod'), ('E\uf0e0TE', 'dobj'), ('’', 'punct'), (' \t', 'compound'), ('FT’E’$', 'prep'), ('\t', 'nsubj'), ('id+id*id$', 'ccomp'), ('\t', 'amod'), ('T\uf0e0FT', 'nmod'), ('’', 'punct'), (' \t', 'compound'), ('idT’E’$', 'appos'), ('\t', 'nsubj'), ('id+id*id$', 'ccomp')]

>> Bigrams: 
[[Example-3, :], [:, LL(1], [LL(1, )], [), parsing], [parsing, Step], [Step, 4], [4, :], [:, Parse], [Parse, string], [string, :], [:, d], [d, +], [+, d], [d, *], [*, d], [d, $], [$,  	], [ 	, STACK], [STACK, 	], [	, INPUT], [INPUT, 	], [	, OUTPUT], [OUTPUT,  	], [ 	, E$], [E$, 	], [	, id+id*id$], [id+id*id$, 	  	], [	  	, TE’$], [TE’$, 	], [	, id+id*id$], [id+id*id$, 	], [	, ETE], [ETE, ’], [’,  	], [ 	, FT’E’$], [FT’E’$, 	], [	, id+id*id$], [id+id*id$, 	], [	, TFT], [TFT, ’], [’,  	], [ 	, idT’E’$], [idT’E’$, 	], [	, id+id*id$]]

>> Trigrams: 
[[Example-3, :, LL(1], [:, LL(1, )], [LL(1, ), parsing], [), parsing, Step], [parsing, Step, 4], [Step, 4, :], [4, :, Parse], [:, Parse, string], [Parse, string, :], [string, :, d], [:, d, +], [d, +, d], [+, d, *], [d, *, d], [*, d, $], [d, $,  	], [$,  	, STACK], [ 	, STACK, 	], [STACK, 	, INPUT], [	, INPUT, 	], [INPUT, 	, OUTPUT], [	, OUTPUT,  	], [OUTPUT,  	, E$], [ 	, E$, 	], [E$, 	, id+id*id$], [	, id+id*id$, 	  	], [id+id*id$, 	  	, TE’$], [	  	, TE’$, 	], [TE’$, 	, id+id*id$], [	, id+id*id$, 	], [id+id*id$, 	, ETE], [	, ETE, ’], [ETE, ’,  	], [’,  	, FT’E’$], [ 	, FT’E’$, 	], [FT’E’$, 	, id+id*id$], [	, id+id*id$, 	], [id+id*id$, 	, TFT], [	, TFT, ’], [TFT, ’,  	], [’,  	, idT’E’$], [ 	, idT’E’$, 	], [idT’E’$, 	, id+id*id$]]

>> Noun Phrases are: 
[Example-3, : LL(1, Step, the string, id, * id $  	STACK	INPUT	OUTPUT,  	E$, 	ETE,  	idT’E’$]

>> Named Entities are: 
[('4', 'CARDINAL'), ('STACK', 'ORG'), ('INPUT', 'ORG'), ('OUTPUT', 'ORG')]


============================ Sentence 341 =============================

	Fid  	T’E’$	+id*id$	  	+TE’$	+id*id$	E’+TE’  	E’$	+id*id$	T’𝜖  	idT’E’$	id$	Fid  	TE’$ 


>> Tokens are: 
[	, Fid,  	, T’E’$, 	, +, id*id$, 	  	, +, TE’$, 	, +, id*id$, 	, E’+TE, ’,  	, E’$, 	, +, id*id$, 	, T’𝜖,  	, idT’E’$, 	, id$, 	, Fid,  	, TE’$] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('F\uf0e0id', 'PROPN'), (' \t', 'SPACE'), ('T’E’$', 'PROPN'), ('\t', 'SPACE'), ('+', 'PROPN'), ('id*id$', 'PROPN'), ('\t  \t', 'SPACE'), ('+', 'CCONJ'), ('TE’$', 'CCONJ'), ('\t', 'SPACE'), ('+', 'PROPN'), ('id*id$', 'PROPN'), ('\t', 'SPACE'), ('E’\uf0e0+TE', 'PROPN'), ('’', 'PART'), (' \t', 'SPACE'), ('E’$', 'PROPN'), ('\t', 'SPACE'), ('+', 'PROPN'), ('id*id$', 'PROPN'), ('\t', 'SPACE'), ('T’\uf0e0𝜖', 'NOUN'), (' \t', 'SPACE'), ('idT’E’$', 'PROPN'), ('\t', 'SPACE'), ('id$', 'PROPN'), ('\t', 'SPACE'), ('F\uf0e0id', 'PROPN'), (' \t', 'SPACE'), ('TE’$', 'PROPN')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('F\uf0e0id', 'nmod'), (' \t', 'compound'), ('T’E’$', 'compound'), ('\t', 'nmod'), ('+', 'cc'), ('id*id$', 'compound'), ('\t  \t', 'ROOT'), ('+', 'punct'), ('TE’$', 'punct'), ('\t', 'nmod'), ('+', 'cc'), ('id*id$', 'conj'), ('\t', 'compound'), ('E’\uf0e0+TE', 'nmod'), ('’', 'punct'), (' \t', 'nmod'), ('E’$', 'compound'), ('\t', 'nmod'), ('+', 'cc'), ('id*id$', 'compound'), ('\t', 'compound'), ('T’\uf0e0𝜖', 'compound'), (' \t', 'compound'), ('idT’E’$', 'appos'), ('\t', 'nmod'), ('id$', 'nmod'), ('\t', 'compound'), ('F\uf0e0id', 'compound'), (' \t', 'appos'), ('TE’$', 'punct')]

>> Bigrams: 
[[	, Fid], [Fid,  	], [ 	, T’E’$], [T’E’$, 	], [	, +], [+, id*id$], [id*id$, 	  	], [	  	, +], [+, TE’$], [TE’$, 	], [	, +], [+, id*id$], [id*id$, 	], [	, E’+TE], [E’+TE, ’], [’,  	], [ 	, E’$], [E’$, 	], [	, +], [+, id*id$], [id*id$, 	], [	, T’𝜖], [T’𝜖,  	], [ 	, idT’E’$], [idT’E’$, 	], [	, id$], [id$, 	], [	, Fid], [Fid,  	], [ 	, TE’$]]

>> Trigrams: 
[[	, Fid,  	], [Fid,  	, T’E’$], [ 	, T’E’$, 	], [T’E’$, 	, +], [	, +, id*id$], [+, id*id$, 	  	], [id*id$, 	  	, +], [	  	, +, TE’$], [+, TE’$, 	], [TE’$, 	, +], [	, +, id*id$], [+, id*id$, 	], [id*id$, 	, E’+TE], [	, E’+TE, ’], [E’+TE, ’,  	], [’,  	, E’$], [ 	, E’$, 	], [E’$, 	, +], [	, +, id*id$], [+, id*id$, 	], [id*id$, 	, T’𝜖], [	, T’𝜖,  	], [T’𝜖,  	, idT’E’$], [ 	, idT’E’$, 	], [idT’E’$, 	, id$], [	, id$, 	], [id$, 	, Fid], [	, Fid,  	], [Fid,  	, TE’$]]

>> Noun Phrases are: 
[	+id*id$	E’+TE’  	E’$	+id*id$	T’𝜖  	idT’E’$]

>> Named Entities are: 
[]


============================ Sentence 342 =============================

	id*id$	  	T’E’$	$	  	FT’E’$ 


>> Tokens are: 
[	, id*id$, 	  	, T’E’$, 	, $, 	  	, FT’E’$] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('id*id$', 'NOUN'), ('\t  \t', 'SPACE'), ('T’E’$', 'PROPN'), ('\t', 'SPACE'), ('$', 'SYM'), ('\t  \t', 'SPACE'), ('FT’E’$', 'PROPN')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('id*id$', 'compound'), ('\t  \t', 'compound'), ('T’E’$', 'compound'), ('\t', 'ROOT'), ('$', 'nmod'), ('\t  \t', 'appos'), ('FT’E’$', 'prep')]

>> Bigrams: 
[[	, id*id$], [id*id$, 	  	], [	  	, T’E’$], [T’E’$, 	], [	, $], [$, 	  	], [	  	, FT’E’$]]

>> Trigrams: 
[[	, id*id$, 	  	], [id*id$, 	  	, T’E’$], [	  	, T’E’$, 	], [T’E’$, 	, $], [	, $, 	  	], [$, 	  	, FT’E’$]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 343 =============================

	id*id$	TFT’  	E’$	$	T’𝜖  	FT’E’$ 


>> Tokens are: 
[	, id*id$, 	, TFT, ’,  	, E’$, 	, $, 	, T’𝜖,  	, FT’E’$] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('id*id$', 'PROPN'), ('\t', 'SPACE'), ('T\uf0e0FT', 'NOUN'), ('’', 'PUNCT'), (' \t', 'SPACE'), ('E’$', 'NOUN'), ('\t', 'SPACE'), ('$', 'SYM'), ('\t', 'SPACE'), ('T’\uf0e0𝜖', 'NOUN'), (' \t', 'SPACE'), ('FT’E’$', 'PROPN')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('id*id$', 'compound'), ('\t', 'nsubj'), ('T\uf0e0FT', 'ROOT'), ('’', 'punct'), (' \t', 'nmod'), ('E’$', 'nmod'), ('\t', 'pobj'), ('$', 'nmod'), ('\t', 'appos'), ('T’\uf0e0𝜖', 'appos'), (' \t', 'dobj'), ('FT’E’$', 'prep')]

>> Bigrams: 
[[	, id*id$], [id*id$, 	], [	, TFT], [TFT, ’], [’,  	], [ 	, E’$], [E’$, 	], [	, $], [$, 	], [	, T’𝜖], [T’𝜖,  	], [ 	, FT’E’$]]

>> Trigrams: 
[[	, id*id$, 	], [id*id$, 	, TFT], [	, TFT, ’], [TFT, ’,  	], [’,  	, E’$], [ 	, E’$, 	], [E’$, 	, $], [	, $, 	], [$, 	, T’𝜖], [	, T’𝜖,  	], [T’𝜖,  	, FT’E’$]]

>> Noun Phrases are: 
[	id*id$	TFT, T’𝜖]

>> Named Entities are: 
[]


============================ Sentence 344 =============================

	id$	  	$	$	E’𝜖  	*FT’E’$	*id$	T*FT’  	T’E’$ 


>> Tokens are: 
[	, id$, 	  	, $, 	, $, 	, E’𝜖,  	, *, FT’E’$, 	, *, id$, 	, T*FT, ’,  	, T’E’$] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('id$', 'PROPN'), ('\t  \t', 'SPACE'), ('$', 'SYM'), ('\t', 'SPACE'), ('$', 'SYM'), ('\t', 'SPACE'), ('E’\uf0e0𝜖', 'NOUN'), (' \t', 'SPACE'), ('*', 'PUNCT'), ('FT’E’$', 'PROPN'), ('\t', 'SPACE'), ('*', 'PUNCT'), ('id$', 'PROPN'), ('\t', 'SPACE'), ('T\uf0e0*FT', 'PROPN'), ('’', 'PART'), (' \t', 'SPACE'), ('T’E’$', 'NOUN')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('id$', 'nsubj'), ('\t  \t', 'ROOT'), ('$', 'nmod'), ('\t', 'appos'), ('$', 'nmod'), ('\t', 'compound'), ('E’\uf0e0𝜖', 'compound'), (' \t', 'appos'), ('*', 'punct'), ('FT’E’$', 'prep'), ('\t', 'appos'), ('*', 'punct'), ('id$', 'appos'), ('\t', 'nmod'), ('T\uf0e0*FT', 'appos'), ('’', 'punct'), (' \t', 'compound'), ('T’E’$', 'appos')]

>> Bigrams: 
[[	, id$], [id$, 	  	], [	  	, $], [$, 	], [	, $], [$, 	], [	, E’𝜖], [E’𝜖,  	], [ 	, *], [*, FT’E’$], [FT’E’$, 	], [	, *], [*, id$], [id$, 	], [	, T*FT], [T*FT, ’], [’,  	], [ 	, T’E’$]]

>> Trigrams: 
[[	, id$, 	  	], [id$, 	  	, $], [	  	, $, 	], [$, 	, $], [	, $, 	], [$, 	, E’𝜖], [	, E’𝜖,  	], [E’𝜖,  	, *], [ 	, *, FT’E’$], [*, FT’E’$, 	], [FT’E’$, 	, *], [	, *, id$], [*, id$, 	], [id$, 	, T*FT], [	, T*FT, ’], [T*FT, ’,  	], [’,  	, T’E’$]]

>> Noun Phrases are: 
[	id$, *id$, 	T*FT,  	T’E’$]

>> Named Entities are: 
[('T\uf0e0*FT', 'ORG')]


============================ Sentence 345 =============================

	*id$	  	idT’E’$	id*id$	Fid                                              	NT	Input Symbol					 		 


>> Tokens are: 
[	, *, id$, 	  	, idT’E’$, 	, id*id$, 	, Fid,                                              	, NT, 	, Input, Symbol, 					 		] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('*', 'PUNCT'), ('id$', 'PROPN'), ('\t  \t', 'SPACE'), ('idT’E’$', 'PROPN'), ('\t', 'SPACE'), ('id*id$', 'PROPN'), ('\t', 'SPACE'), ('F\uf0e0id', 'PROPN'), ('                                             \t', 'SPACE'), ('NT', 'PROPN'), ('\t', 'SPACE'), ('Input', 'PROPN'), ('Symbol', 'PROPN'), ('\t\t\t\t\t \t\t', 'SPACE')] 

>> Dependency Tags are: 
[('\t', 'nsubj'), ('*', 'punct'), ('id$', 'compound'), ('\t  \t', 'compound'), ('idT’E’$', 'compound'), ('\t', 'compound'), ('id*id$', 'compound'), ('\t', 'compound'), ('F\uf0e0id', 'appos'), ('                                             \t', 'ROOT'), ('NT', 'npadvmod'), ('\t', 'compound'), ('Input', 'compound'), ('Symbol', 'nsubj'), ('\t\t\t\t\t \t\t', 'ccomp')]

>> Bigrams: 
[[	, *], [*, id$], [id$, 	  	], [	  	, idT’E’$], [idT’E’$, 	], [	, id*id$], [id*id$, 	], [	, Fid], [Fid,                                              	], [                                             	, NT], [NT, 	], [	, Input], [Input, Symbol], [Symbol, 					 		]]

>> Trigrams: 
[[	, *, id$], [*, id$, 	  	], [id$, 	  	, idT’E’$], [	  	, idT’E’$, 	], [idT’E’$, 	, id*id$], [	, id*id$, 	], [id*id$, 	, Fid], [	, Fid,                                              	], [Fid,                                              	, NT], [                                             	, NT, 	], [NT, 	, Input], [	, Input, Symbol], [Input, Symbol, 					 		]]

>> Noun Phrases are: 
[*id$	  	idT’E’$	id*id$	Fid, 	Input Symbol]

>> Named Entities are: 
[('Input Symbol', 'PERSON')]


============================ Sentence 346 =============================

id	+	*	(	)	$ 	E	ETE’	Error	Error	ETE’	Error	Error 	E’	Error	E’+TE’	Error	Error	E’𝜖	E’𝜖 	T 


>> Tokens are: 
[d, 	, +, 	, *, 	, (, 	, ), 	, $, 	, E, 	, ETE, ’, 	, Error, 	, Error, 	, ETE, ’, 	, Error, 	, Error, 	, E, ’, 	, Error, 	, E’+TE, ’, 	, Error, 	, Error, 	, E’𝜖, 	, E’𝜖, 	, T] 

>> PoS Tags are: 
[('d', 'PROPN'), ('\t', 'SPACE'), ('+', 'CCONJ'), ('\t', 'SPACE'), ('*', 'PUNCT'), ('\t', 'SPACE'), ('(', 'PUNCT'), ('\t', 'SPACE'), (')', 'PUNCT'), ('\t', 'SPACE'), ('$', 'SYM'), ('\t', 'SPACE'), ('E', 'PROPN'), ('\t', 'SPACE'), ('E\uf0e0TE', 'X'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('Error', 'PROPN'), ('\t', 'SPACE'), ('Error', 'PROPN'), ('\t', 'SPACE'), ('E\uf0e0TE', 'PROPN'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('Error', 'PROPN'), ('\t', 'SPACE'), ('Error', 'PROPN'), ('\t', 'SPACE'), ('E', 'PROPN'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('Error', 'PROPN'), ('\t', 'SPACE'), ('E’\uf0e0+TE', 'PROPN'), ('’', 'PART'), ('\t', 'SPACE'), ('Error', 'PROPN'), ('\t', 'SPACE'), ('Error', 'PROPN'), ('\t', 'SPACE'), ('E’\uf0e0𝜖', 'NOUN'), ('\t', 'SPACE'), ('E’\uf0e0𝜖', 'NOUN'), ('\t', 'SPACE'), ('T', 'PROPN')] 

>> Dependency Tags are: 
[('d', 'compound'), ('\t', 'appos'), ('+', 'cc'), ('\t', 'conj'), ('*', 'punct'), ('\t', 'appos'), ('(', 'punct'), ('\t', 'appos'), (')', 'punct'), ('\t', 'appos'), ('$', 'punct'), ('\t', 'nmod'), ('E', 'nmod'), ('\t', 'nmod'), ('E\uf0e0TE', 'appos'), ('’', 'punct'), ('\t', 'compound'), ('Error', 'nmod'), ('\t', 'compound'), ('Error', 'nmod'), ('\t', 'nmod'), ('E\uf0e0TE', 'prep'), ('’', 'punct'), ('\t', 'compound'), ('Error', 'compound'), ('\t', 'compound'), ('Error', 'nmod'), ('\t', 'nmod'), ('E', 'conj'), ('’', 'punct'), ('\t', 'compound'), ('Error', 'compound'), ('\t', 'compound'), ('E’\uf0e0+TE', 'appos'), ('’', 'punct'), ('\t', 'compound'), ('Error', 'compound'), ('\t', 'compound'), ('Error', 'compound'), ('\t', 'compound'), ('E’\uf0e0𝜖', 'appos'), ('\t', 'compound'), ('E’\uf0e0𝜖', 'appos'), ('\t', 'compound'), ('T', 'appos')]

>> Bigrams: 
[[d, 	], [	, +], [+, 	], [	, *], [*, 	], [	, (], [(, 	], [	, )], [), 	], [	, $], [$, 	], [	, E], [E, 	], [	, ETE], [ETE, ’], [’, 	], [	, Error], [Error, 	], [	, Error], [Error, 	], [	, ETE], [ETE, ’], [’, 	], [	, Error], [Error, 	], [	, Error], [Error, 	], [	, E], [E, ’], [’, 	], [	, Error], [Error, 	], [	, E’+TE], [E’+TE, ’], [’, 	], [	, Error], [Error, 	], [	, Error], [Error, 	], [	, E’𝜖], [E’𝜖, 	], [	, E’𝜖], [E’𝜖, 	], [	, T]]

>> Trigrams: 
[[d, 	, +], [	, +, 	], [+, 	, *], [	, *, 	], [*, 	, (], [	, (, 	], [(, 	, )], [	, ), 	], [), 	, $], [	, $, 	], [$, 	, E], [	, E, 	], [E, 	, ETE], [	, ETE, ’], [ETE, ’, 	], [’, 	, Error], [	, Error, 	], [Error, 	, Error], [	, Error, 	], [Error, 	, ETE], [	, ETE, ’], [ETE, ’, 	], [’, 	, Error], [	, Error, 	], [Error, 	, Error], [	, Error, 	], [Error, 	, E], [	, E, ’], [E, ’, 	], [’, 	, Error], [	, Error, 	], [Error, 	, E’+TE], [	, E’+TE, ’], [E’+TE, ’, 	], [’, 	, Error], [	, Error, 	], [Error, 	, Error], [	, Error, 	], [Error, 	, E’𝜖], [	, E’𝜖, 	], [E’𝜖, 	, E’𝜖], [	, E’𝜖, 	], [E’𝜖, 	, T]]

>> Noun Phrases are: 
[	Error	Error 	E, 	Error	E’+TE, 	Error	Error	E’𝜖, 	E’𝜖, 	T]

>> Named Entities are: 
[]


============================ Sentence 347 =============================

	TFT’	Error	Error	TFT’	Error	Error 	T’	Error	T’𝜖	T’*FT’	Error	T’𝜖	T’𝜖 


>> Tokens are: 
[	, TFT, ’, 	, Error, 	, Error, 	, TFT, ’, 	, Error, 	, Error, 	, T, ’, 	, Error, 	, T’𝜖, 	, T’*FT, ’, 	, Error, 	, T’𝜖, 	, T’𝜖] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('T\uf0e0FT', 'VERB'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('Error', 'PROPN'), ('\t', 'SPACE'), ('Error', 'PROPN'), ('\t', 'SPACE'), ('T\uf0e0FT', 'VERB'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('Error', 'PROPN'), ('\t', 'SPACE'), ('Error', 'PROPN'), ('\t', 'SPACE'), ('T', 'PROPN'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('Error', 'PROPN'), ('\t', 'SPACE'), ('T’\uf0e0𝜖', 'VERB'), ('\t', 'SPACE'), ('T’\uf0e0*FT', 'NOUN'), ('’', 'PART'), ('\t', 'SPACE'), ('Error', 'PROPN'), ('\t', 'SPACE'), ('T’\uf0e0𝜖', 'VERB'), ('\t', 'SPACE'), ('T’\uf0e0𝜖', 'NOUN')] 

>> Dependency Tags are: 
[('\t', 'nsubj'), ('T\uf0e0FT', 'dobj'), ('’', 'punct'), ('\t', 'compound'), ('Error', 'compound'), ('\t', 'compound'), ('Error', 'compound'), ('\t', 'nsubj'), ('T\uf0e0FT', 'ROOT'), ('’', 'punct'), ('\t', 'compound'), ('Error', 'compound'), ('\t', 'compound'), ('Error', 'compound'), ('\t', 'compound'), ('T', 'pobj'), ('’', 'punct'), ('\t', 'compound'), ('Error', 'compound'), ('\t', 'conj'), ('T’\uf0e0𝜖', 'appos'), ('\t', 'compound'), ('T’\uf0e0*FT', 'conj'), ('’', 'punct'), ('\t', 'compound'), ('Error', 'compound'), ('\t', 'appos'), ('T’\uf0e0𝜖', 'appos'), ('\t', 'conj'), ('T’\uf0e0𝜖', 'appos')]

>> Bigrams: 
[[	, TFT], [TFT, ’], [’, 	], [	, Error], [Error, 	], [	, Error], [Error, 	], [	, TFT], [TFT, ’], [’, 	], [	, Error], [Error, 	], [	, Error], [Error, 	], [	, T], [T, ’], [’, 	], [	, Error], [Error, 	], [	, T’𝜖], [T’𝜖, 	], [	, T’*FT], [T’*FT, ’], [’, 	], [	, Error], [Error, 	], [	, T’𝜖], [T’𝜖, 	], [	, T’𝜖]]

>> Trigrams: 
[[	, TFT, ’], [TFT, ’, 	], [’, 	, Error], [	, Error, 	], [Error, 	, Error], [	, Error, 	], [Error, 	, TFT], [	, TFT, ’], [TFT, ’, 	], [’, 	, Error], [	, Error, 	], [Error, 	, Error], [	, Error, 	], [Error, 	, T], [	, T, ’], [T, ’, 	], [’, 	, Error], [	, Error, 	], [Error, 	, T’𝜖], [	, T’𝜖, 	], [T’𝜖, 	, T’*FT], [	, T’*FT, ’], [T’*FT, ’, 	], [’, 	, Error], [	, Error, 	], [Error, 	, T’𝜖], [	, T’𝜖, 	], [T’𝜖, 	, T’𝜖]]

>> Noun Phrases are: 
[’	Error	Error 	T, 	T’*FT, T’𝜖]

>> Named Entities are: 
[('’\tError\tT’\uf0e0𝜖\tT’\uf0e0𝜖', 'WORK_OF_ART')]


============================ Sentence 348 =============================

	F	Fid	Error	Error	F(E) 


>> Tokens are: 
[	, F, 	, Fid, 	, Error, 	, Error, 	, F(E, )] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('F', 'PROPN'), ('\t', 'SPACE'), ('F\uf0e0id', 'PROPN'), ('\t', 'SPACE'), ('Error', 'PROPN'), ('\t', 'SPACE'), ('Error', 'PROPN'), ('\t', 'SPACE'), ('F\uf0e0(E', 'PROPN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('F', 'compound'), ('\t', 'compound'), ('F\uf0e0id', 'compound'), ('\t', 'compound'), ('Error', 'compound'), ('\t', 'compound'), ('Error', 'compound'), ('\t', 'compound'), ('F\uf0e0(E', 'ROOT'), (')', 'punct')]

>> Bigrams: 
[[	, F], [F, 	], [	, Fid], [Fid, 	], [	, Error], [Error, 	], [	, Error], [Error, 	], [	, F(E], [F(E, )]]

>> Trigrams: 
[[	, F, 	], [F, 	, Fid], [	, Fid, 	], [Fid, 	, Error], [	, Error, 	], [Error, 	, Error], [	, Error, 	], [Error, 	, F(E], [	, F(E, )]]

>> Noun Phrases are: 
[	F	Fid	Error	Error	F(E]

>> Named Entities are: 
[]


============================ Sentence 349 =============================

	Error	Error     Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#› 


>> Tokens are: 
[	, Error, 	, Error,     , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('Error', 'PROPN'), ('\t', 'SPACE'), ('Error', 'PROPN'), ('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('Error', 'nmod'), ('\t', 'compound'), ('Error', 'npadvmod'), ('    ', 'compound'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'appos'), ('#', 'nmod'), ('3130006', 'appos'), ('(', 'punct'), ('PS', 'nsubj'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'dobj'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct')]

>> Bigrams: 
[[	, Error], [Error, 	], [	, Error], [Error,     ], [    , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›]]

>> Trigrams: 
[[	, Error, 	], [Error, 	, Error], [	, Error,     ], [Error,     , Prof.], [    , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›]]

>> Noun Phrases are: 
[    Prof. Jay R Dhamsaniya, PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('Jay R Dhamsaniya', 'ORG'), ('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 350 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 351 =============================

Parsing methods Parsing Top down parsing Bottom up parsing (Shift reduce) Back tracking Parsing without backtracking (predictive parsing) LR parsing Operator precedence LALR   


>> Tokens are: 
[Parsing, methods, Parsing, parsing, parsing, (, Shift, reduce, ), tracking, Parsing, backtracking, (, predictive, parsing, ), LR, parsing, Operator, precedence, LALR,  ] 

>> PoS Tags are: 
[('Parsing', 'VERB'), ('methods', 'NOUN'), ('Parsing', 'VERB'), ('parsing', 'VERB'), ('parsing', 'VERB'), ('(', 'PUNCT'), ('Shift', 'NOUN'), ('reduce', 'VERB'), (')', 'PUNCT'), ('tracking', 'VERB'), ('Parsing', 'VERB'), ('backtracking', 'VERB'), ('(', 'PUNCT'), ('predictive', 'ADJ'), ('parsing', 'NOUN'), (')', 'PUNCT'), ('LR', 'PROPN'), ('parsing', 'VERB'), ('Operator', 'PROPN'), ('precedence', 'NOUN'), ('LALR', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Parsing', 'ROOT'), ('methods', 'dobj'), ('Parsing', 'acl'), ('parsing', 'acl'), ('parsing', 'ccomp'), ('(', 'punct'), ('Shift', 'nsubj'), ('reduce', 'parataxis'), (')', 'punct'), ('tracking', 'advcl'), ('Parsing', 'dobj'), ('backtracking', 'pcomp'), ('(', 'punct'), ('predictive', 'amod'), ('parsing', 'dobj'), (')', 'punct'), ('LR', 'npadvmod'), ('parsing', 'conj'), ('Operator', 'compound'), ('precedence', 'compound'), ('LALR', 'dobj'), (' ', 'punct')]

>> Bigrams: 
[[Parsing, methods], [methods, Parsing], [Parsing, parsing], [parsing, parsing], [parsing, (], [(, Shift], [Shift, reduce], [reduce, )], [), tracking], [tracking, Parsing], [Parsing, backtracking], [backtracking, (], [(, predictive], [predictive, parsing], [parsing, )], [), LR], [LR, parsing], [parsing, Operator], [Operator, precedence], [precedence, LALR], [LALR,  ]]

>> Trigrams: 
[[Parsing, methods, Parsing], [methods, Parsing, parsing], [Parsing, parsing, parsing], [parsing, parsing, (], [parsing, (, Shift], [(, Shift, reduce], [Shift, reduce, )], [reduce, ), tracking], [), tracking, Parsing], [tracking, Parsing, backtracking], [Parsing, backtracking, (], [backtracking, (, predictive], [(, predictive, parsing], [predictive, parsing, )], [parsing, ), LR], [), LR, parsing], [LR, parsing, Operator], [parsing, Operator, precedence], [Operator, precedence, LALR], [precedence, LALR,  ]]

>> Noun Phrases are: 
[methods, Top, Bottom, Shift, predictive parsing, Operator precedence LALR]

>> Named Entities are: 
[('Bottom', 'PERSON')]


============================ Sentence 352 =============================

CLR  SLR   


>> Tokens are: 
[CLR,  , SLR,  ] 

>> PoS Tags are: 
[('CLR', 'PROPN'), (' ', 'SPACE'), ('SLR', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('CLR', 'ROOT'), (' ', 'appos'), ('SLR', 'compound'), (' ', 'appos')]

>> Bigrams: 
[[CLR,  ], [ , SLR], [SLR,  ]]

>> Trigrams: 
[[CLR,  , SLR], [ , SLR,  ]]

>> Noun Phrases are: 
[CLR]

>> Named Entities are: 
[('CLR', 'ORG'), ('SLR', 'ORG')]


============================ Sentence 353 =============================

Recursive  descent  LL(1)        


>> Tokens are: 
[Recursive,  , descent,  , LL(1, ),       ] 

>> PoS Tags are: 
[('Recursive', 'PROPN'), (' ', 'SPACE'), ('descent', 'NOUN'), (' ', 'SPACE'), ('LL(1', 'NOUN'), (')', 'PUNCT'), ('      ', 'SPACE')] 

>> Dependency Tags are: 
[('Recursive', 'compound'), (' ', 'poss'), ('descent', 'appos'), (' ', 'compound'), ('LL(1', 'appos'), (')', 'punct'), ('      ', 'ROOT')]

>> Bigrams: 
[[Recursive,  ], [ , descent], [descent,  ], [ , LL(1], [LL(1, )], [),       ]]

>> Trigrams: 
[[Recursive,  , descent], [ , descent,  ], [descent,  , LL(1], [ , LL(1, )], [LL(1, ),       ]]

>> Noun Phrases are: 
[descent,  LL(1]

>> Named Entities are: 
[]


============================ Sentence 354 =============================

Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara   


>> Tokens are: 
[Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara,  ] 

>> PoS Tags are: 
[('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'nsubj'), ('#', 'appos'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'dep'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'ROOT'), ('‹#›', 'punct'), ('  ', 'appos'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), (' ', 'punct')]

>> Bigrams: 
[[Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,  ]]

>> Trigrams: 
[[Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,  ]]

>> Noun Phrases are: 
[Prof. Jay R Dhamsaniya, (PS, Unit, Prof. Dixita B Kagathara]

>> Named Entities are: 
[('PS', 'ORG'), ('Dixita', 'PERSON'), ('Kagathara', 'PERSON')]


============================ Sentence 355 =============================

#2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[#, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('#', 'nmod'), ('2170701', 'nsubj'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[(CD, Unit, Theory, I]

>> Named Entities are: 
[]


============================ Sentence 356 =============================

Recursive descent parsing A top down parsing that executes a set of recursive procedure to process the input without backtracking is called recursive descent parser. 


>> Tokens are: 
[Recursive, descent, parsing, parsing, executes, set, recursive, procedure, process, input, backtracking, called, recursive, descent, parser, .] 

>> PoS Tags are: 
[('Recursive', 'ADJ'), ('descent', 'NOUN'), ('parsing', 'VERB'), ('parsing', 'VERB'), ('executes', 'VERB'), ('set', 'NOUN'), ('recursive', 'ADJ'), ('procedure', 'NOUN'), ('process', 'VERB'), ('input', 'NOUN'), ('backtracking', 'NOUN'), ('called', 'VERB'), ('recursive', 'ADJ'), ('descent', 'NOUN'), ('parser', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Recursive', 'compound'), ('descent', 'nsubjpass'), ('parsing', 'acl'), ('parsing', 'acl'), ('executes', 'ccomp'), ('set', 'dobj'), ('recursive', 'amod'), ('procedure', 'pobj'), ('process', 'advcl'), ('input', 'dobj'), ('backtracking', 'pcomp'), ('called', 'ROOT'), ('recursive', 'amod'), ('descent', 'compound'), ('parser', 'oprd'), ('.', 'punct')]

>> Bigrams: 
[[Recursive, descent], [descent, parsing], [parsing, parsing], [parsing, executes], [executes, set], [set, recursive], [recursive, procedure], [procedure, process], [process, input], [input, backtracking], [backtracking, called], [called, recursive], [recursive, descent], [descent, parser], [parser, .]]

>> Trigrams: 
[[Recursive, descent, parsing], [descent, parsing, parsing], [parsing, parsing, executes], [parsing, executes, set], [executes, set, recursive], [set, recursive, procedure], [recursive, procedure, process], [procedure, process, input], [process, input, backtracking], [input, backtracking, called], [backtracking, called, recursive], [called, recursive, descent], [recursive, descent, parser], [descent, parser, .]]

>> Noun Phrases are: 
[Recursive descent, A top, a set, recursive procedure, the input, backtracking, recursive descent parser]

>> Named Entities are: 
[]


============================ Sentence 357 =============================

There is a procedure for each non terminal in the grammar. 


>> Tokens are: 
[procedure, non, terminal, grammar, .] 

>> PoS Tags are: 
[('procedure', 'NOUN'), ('non', 'ADJ'), ('terminal', 'NOUN'), ('grammar', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('procedure', 'attr'), ('non', 'amod'), ('terminal', 'pobj'), ('grammar', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[procedure, non], [non, terminal], [terminal, grammar], [grammar, .]]

>> Trigrams: 
[[procedure, non, terminal], [non, terminal, grammar], [terminal, grammar, .]]

>> Noun Phrases are: 
[a procedure, each non terminal, the grammar]

>> Named Entities are: 
[]


============================ Sentence 358 =============================

Consider RHS of any production rule as definition of the procedure. 


>> Tokens are: 
[Consider, RHS, production, rule, definition, procedure, .] 

>> PoS Tags are: 
[('Consider', 'VERB'), ('RHS', 'PROPN'), ('production', 'NOUN'), ('rule', 'NOUN'), ('definition', 'NOUN'), ('procedure', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Consider', 'ROOT'), ('RHS', 'dobj'), ('production', 'compound'), ('rule', 'pobj'), ('definition', 'pobj'), ('procedure', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Consider, RHS], [RHS, production], [production, rule], [rule, definition], [definition, procedure], [procedure, .]]

>> Trigrams: 
[[Consider, RHS, production], [RHS, production, rule], [production, rule, definition], [rule, definition, procedure], [definition, procedure, .]]

>> Noun Phrases are: 
[RHS, any production rule, definition, the procedure]

>> Named Entities are: 
[('RHS', 'NORP')]


============================ Sentence 359 =============================

As it reads expected input symbol, it advances input pointer to next position. 


>> Tokens are: 
[reads, expected, input, symbol, ,, advances, input, pointer, position, .] 

>> PoS Tags are: 
[('reads', 'VERB'), ('expected', 'VERB'), ('input', 'NOUN'), ('symbol', 'NOUN'), (',', 'PUNCT'), ('advances', 'VERB'), ('input', 'NOUN'), ('pointer', 'NOUN'), ('position', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('reads', 'advcl'), ('expected', 'advcl'), ('input', 'compound'), ('symbol', 'dobj'), (',', 'punct'), ('advances', 'ROOT'), ('input', 'compound'), ('pointer', 'dobj'), ('position', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[reads, expected], [expected, input], [input, symbol], [symbol, ,], [,, advances], [advances, input], [input, pointer], [pointer, position], [position, .]]

>> Trigrams: 
[[reads, expected, input], [expected, input, symbol], [input, symbol, ,], [symbol, ,, advances], [,, advances, input], [advances, input, pointer], [input, pointer, position], [pointer, position, .]]

>> Noun Phrases are: 
[it, input symbol, it, input pointer, next position]

>> Named Entities are: 
[]


============================ Sentence 360 =============================

    Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[    , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('    ', 'compound'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'nsubj'), ('#', 'appos'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[    , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[    , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[    Prof. Jay R Dhamsaniya, (PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('Jay R Dhamsaniya', 'ORG'), ('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 361 =============================

Example: Recursive descent parsing Procedure E { 	If lookahead=num  	{ 		Match(num); 		T(); 	} 	Else 		Error(); 


>> Tokens are: 
[Example, :, Recursive, descent, parsing, Procedure, E, {, 	, lookahead, =, num,  	, {, 		, Match(num, ), ;, 		, T, (, ), ;, 	, }, 	, 		, Error, (, ), ;] 

>> PoS Tags are: 
[('Example', 'NOUN'), (':', 'PUNCT'), ('Recursive', 'ADJ'), ('descent', 'NOUN'), ('parsing', 'VERB'), ('Procedure', 'PROPN'), ('E', 'PROPN'), ('{', 'PUNCT'), ('\t', 'SPACE'), ('lookahead', 'ADJ'), ('=', 'SYM'), ('num', 'NOUN'), (' \t', 'SPACE'), ('{', 'PUNCT'), ('\t\t', 'SPACE'), ('Match(num', 'PROPN'), (')', 'PUNCT'), (';', 'PUNCT'), ('\t\t', 'SPACE'), ('T', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), (';', 'PUNCT'), ('\t', 'SPACE'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('\t\t', 'SPACE'), ('Error', 'PROPN'), ('(', 'PUNCT'), (')', 'PUNCT'), (';', 'PUNCT')] 

>> Dependency Tags are: 
[('Example', 'ROOT'), (':', 'punct'), ('Recursive', 'compound'), ('descent', 'appos'), ('parsing', 'acl'), ('Procedure', 'compound'), ('E', 'dobj'), ('{', 'punct'), ('\t', 'appos'), ('lookahead', 'advcl'), ('=', 'punct'), ('num', 'dobj'), (' \t', 'dobj'), ('{', 'punct'), ('\t\t', 'prep'), ('Match(num', 'pobj'), (')', 'punct'), (';', 'punct'), ('\t\t', 'compound'), ('T', 'appos'), ('(', 'punct'), (')', 'punct'), (';', 'punct'), ('\t', 'nmod'), ('}', 'punct'), ('\t', 'compound'), ('\t\t', 'prep'), ('Error', 'conj'), ('(', 'punct'), (')', 'punct'), (';', 'punct')]

>> Bigrams: 
[[Example, :], [:, Recursive], [Recursive, descent], [descent, parsing], [parsing, Procedure], [Procedure, E], [E, {], [{, 	], [	, lookahead], [lookahead, =], [=, num], [num,  	], [ 	, {], [{, 		], [		, Match(num], [Match(num, )], [), ;], [;, 		], [		, T], [T, (], [(, )], [), ;], [;, 	], [	, }], [}, 	], [	, 		], [		, Error], [Error, (], [(, )], [), ;]]

>> Trigrams: 
[[Example, :, Recursive], [:, Recursive, descent], [Recursive, descent, parsing], [descent, parsing, Procedure], [parsing, Procedure, E], [Procedure, E, {], [E, {, 	], [{, 	, lookahead], [	, lookahead, =], [lookahead, =, num], [=, num,  	], [num,  	, {], [ 	, {, 		], [{, 		, Match(num], [		, Match(num, )], [Match(num, ), ;], [), ;, 		], [;, 		, T], [		, T, (], [T, (, )], [(, ), ;], [), ;, 	], [;, 	, }], [	, }, 	], [}, 	, 		], [	, 		, Error], [		, Error, (], [Error, (, )], [(, ), ;]]

>> Noun Phrases are: 
[Example, Recursive descent, Procedure E, =num, Match(num, 		T, 	Else]

>> Named Entities are: 
[]


============================ Sentence 362 =============================

	If lookahead=$ 	{ 		Declare success; 	} 	Else 		Error(); }  Procedure T { 	If lookahead=’*’  	{ 		Match(‘*’); 		If lookahead=num  		{ 			Match(num); 			T(); 		} 		Else 			Error();   	} 	Else 		NULL } Proceduce Match(token t) { 


>> Tokens are: 
[	, lookahead=$, 	, {, 		, Declare, success, ;, 	, }, 	, 		, Error, (, ), ;, },  , Procedure, T, {, 	, lookahead=, ’, *, ’,  	, {, 		, Match, (, ‘, *, ’, ), ;, 		, lookahead, =, num,  		, {, 			, Match(num, ), ;, 			, T, (, ), ;, 		, }, 		, 			, Error, (, ), ;,   	, }, 	, 		, NULL, }, Proceduce, Match(token, t, ), {] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('lookahead=$', 'PROPN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('\t\t', 'SPACE'), ('Declare', 'VERB'), ('success', 'NOUN'), (';', 'PUNCT'), ('\t', 'SPACE'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('\t\t', 'SPACE'), ('Error', 'PROPN'), ('(', 'PUNCT'), (')', 'PUNCT'), (';', 'PUNCT'), ('}', 'PUNCT'), (' ', 'SPACE'), ('Procedure', 'NOUN'), ('T', 'PROPN'), ('{', 'PUNCT'), ('\t', 'SPACE'), ('lookahead=', 'PROPN'), ('’', 'PART'), ('*', 'PUNCT'), ('’', 'PUNCT'), (' \t', 'SPACE'), ('{', 'PUNCT'), ('\t\t', 'SPACE'), ('Match', 'NOUN'), ('(', 'PUNCT'), ('‘', 'PUNCT'), ('*', 'PUNCT'), ('’', 'PUNCT'), (')', 'PUNCT'), (';', 'PUNCT'), ('\t\t', 'SPACE'), ('lookahead', 'VERB'), ('=', 'SYM'), ('num', 'NOUN'), (' \t\t', 'SPACE'), ('{', 'PUNCT'), ('\t\t\t', 'SPACE'), ('Match(num', 'PROPN'), (')', 'PUNCT'), (';', 'PUNCT'), ('\t\t\t', 'SPACE'), ('T', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), (';', 'PUNCT'), ('\t\t', 'SPACE'), ('}', 'PUNCT'), ('\t\t', 'SPACE'), ('\t\t\t', 'SPACE'), ('Error', 'PROPN'), ('(', 'PUNCT'), (')', 'PUNCT'), (';', 'PUNCT'), ('\xa0 \t', 'SPACE'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('\t\t', 'SPACE'), ('NULL', 'PROPN'), ('}', 'PUNCT'), ('Proceduce', 'PROPN'), ('Match(token', 'PROPN'), ('t', 'NOUN'), (')', 'PUNCT'), ('{', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'nsubj'), ('lookahead=$', 'compound'), ('\t', 'nsubj'), ('{', 'punct'), ('\t\t', 'appos'), ('Declare', 'advcl'), ('success', 'dobj'), (';', 'punct'), ('\t', 'nmod'), ('}', 'punct'), ('\t', 'compound'), ('\t\t', 'prep'), ('Error', 'conj'), ('(', 'punct'), (')', 'punct'), (';', 'punct'), ('}', 'punct'), (' ', 'punct'), ('Procedure', 'compound'), ('T', 'appos'), ('{', 'punct'), ('\t', 'appos'), ('lookahead=', 'pobj'), ('’', 'prep'), ('*', 'punct'), ('’', 'punct'), (' \t', 'oprd'), ('{', 'punct'), ('\t\t', 'prep'), ('Match', 'appos'), ('(', 'punct'), ('‘', 'punct'), ('*', 'punct'), ('’', 'punct'), (')', 'punct'), (';', 'punct'), ('\t\t', 'appos'), ('lookahead', 'advcl'), ('=', 'punct'), ('num', 'amod'), (' \t\t', 'dobj'), ('{', 'punct'), ('\t\t\t', 'npadvmod'), ('Match(num', 'npadvmod'), (')', 'punct'), (';', 'punct'), ('\t\t\t', 'compound'), ('T', 'conj'), ('(', 'punct'), (')', 'punct'), (';', 'punct'), ('\t\t', 'appos'), ('}', 'punct'), ('\t\t', 'nmod'), ('\t\t\t', 'compound'), ('Error', 'ROOT'), ('(', 'punct'), (')', 'punct'), (';', 'punct'), ('\xa0 \t', 'appos'), ('}', 'punct'), ('\t', 'compound'), ('\t\t', 'nmod'), ('NULL', 'appos'), ('}', 'punct'), ('Proceduce', 'compound'), ('Match(token', 'compound'), ('t', 'appos'), (')', 'punct'), ('{', 'punct')]

>> Bigrams: 
[[	, lookahead=$], [lookahead=$, 	], [	, {], [{, 		], [		, Declare], [Declare, success], [success, ;], [;, 	], [	, }], [}, 	], [	, 		], [		, Error], [Error, (], [(, )], [), ;], [;, }], [},  ], [ , Procedure], [Procedure, T], [T, {], [{, 	], [	, lookahead=], [lookahead=, ’], [’, *], [*, ’], [’,  	], [ 	, {], [{, 		], [		, Match], [Match, (], [(, ‘], [‘, *], [*, ’], [’, )], [), ;], [;, 		], [		, lookahead], [lookahead, =], [=, num], [num,  		], [ 		, {], [{, 			], [			, Match(num], [Match(num, )], [), ;], [;, 			], [			, T], [T, (], [(, )], [), ;], [;, 		], [		, }], [}, 		], [		, 			], [			, Error], [Error, (], [(, )], [), ;], [;,   	], [  	, }], [}, 	], [	, 		], [		, NULL], [NULL, }], [}, Proceduce], [Proceduce, Match(token], [Match(token, t], [t, )], [), {]]

>> Trigrams: 
[[	, lookahead=$, 	], [lookahead=$, 	, {], [	, {, 		], [{, 		, Declare], [		, Declare, success], [Declare, success, ;], [success, ;, 	], [;, 	, }], [	, }, 	], [}, 	, 		], [	, 		, Error], [		, Error, (], [Error, (, )], [(, ), ;], [), ;, }], [;, },  ], [},  , Procedure], [ , Procedure, T], [Procedure, T, {], [T, {, 	], [{, 	, lookahead=], [	, lookahead=, ’], [lookahead=, ’, *], [’, *, ’], [*, ’,  	], [’,  	, {], [ 	, {, 		], [{, 		, Match], [		, Match, (], [Match, (, ‘], [(, ‘, *], [‘, *, ’], [*, ’, )], [’, ), ;], [), ;, 		], [;, 		, lookahead], [		, lookahead, =], [lookahead, =, num], [=, num,  		], [num,  		, {], [ 		, {, 			], [{, 			, Match(num], [			, Match(num, )], [Match(num, ), ;], [), ;, 			], [;, 			, T], [			, T, (], [T, (, )], [(, ), ;], [), ;, 		], [;, 		, }], [		, }, 		], [}, 		, 			], [		, 			, Error], [			, Error, (], [Error, (, )], [(, ), ;], [), ;,   	], [;,   	, }], [  	, }, 	], [}, 	, 		], [	, 		, NULL], [		, NULL, }], [NULL, }, Proceduce], [}, Proceduce, Match(token], [Proceduce, Match(token, t], [Match(token, t, )], [t, ), {]]

>> Noun Phrases are: 
[success, 	Else, Procedure T, lookahead=, Match, 			T, 	Else, 		NULL, Proceduce Match(token t]

>> Named Entities are: 
[('Declare', 'ORG')]


============================ Sentence 363 =============================

	If lookahead=t 


>> Tokens are: 
[	, lookahead, =, t] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('lookahead', 'NOUN'), ('=', 'SYM'), ('t', 'NOUN')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('lookahead', 'advcl'), ('=', 'dobj'), ('t', 'npadvmod')]

>> Bigrams: 
[[	, lookahead], [lookahead, =], [=, t]]

>> Trigrams: 
[[	, lookahead, =], [lookahead, =, t]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 364 =============================

	lookahead=next_token; 	Else 		Error(); } Procedure Error { 	Print(“Error”); } 	 	 


>> Tokens are: 
[	, lookahead, =, next_token, ;, 	, 		, Error, (, ), ;, }, Procedure, Error, {, 	, Print(“Error, ”, ), ;, }, 	 	] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('lookahead', 'VERB'), ('=', 'SYM'), ('next_token', 'PROPN'), (';', 'PUNCT'), ('\t', 'SPACE'), ('\t\t', 'SPACE'), ('Error', 'PROPN'), ('(', 'PUNCT'), (')', 'PUNCT'), (';', 'PUNCT'), ('}', 'PUNCT'), ('Procedure', 'PROPN'), ('Error', 'PROPN'), ('{', 'PUNCT'), ('\t', 'SPACE'), ('Print(“Error', 'NOUN'), ('”', 'PUNCT'), (')', 'PUNCT'), (';', 'PUNCT'), ('}', 'PUNCT'), ('\t \t', 'SPACE')] 

>> Dependency Tags are: 
[('\t', 'nsubj'), ('lookahead', 'ROOT'), ('=', 'punct'), ('next_token', 'ccomp'), (';', 'punct'), ('\t', 'compound'), ('\t\t', 'compound'), ('Error', 'appos'), ('(', 'punct'), (')', 'punct'), (';', 'punct'), ('}', 'punct'), ('Procedure', 'compound'), ('Error', 'appos'), ('{', 'punct'), ('\t', 'compound'), ('Print(“Error', 'appos'), ('”', 'punct'), (')', 'punct'), (';', 'punct'), ('}', 'punct'), ('\t \t', 'appos')]

>> Bigrams: 
[[	, lookahead], [lookahead, =], [=, next_token], [next_token, ;], [;, 	], [	, 		], [		, Error], [Error, (], [(, )], [), ;], [;, }], [}, Procedure], [Procedure, Error], [Error, {], [{, 	], [	, Print(“Error], [Print(“Error, ”], [”, )], [), ;], [;, }], [}, 	 	]]

>> Trigrams: 
[[	, lookahead, =], [lookahead, =, next_token], [=, next_token, ;], [next_token, ;, 	], [;, 	, 		], [	, 		, Error], [		, Error, (], [Error, (, )], [(, ), ;], [), ;, }], [;, }, Procedure], [}, Procedure, Error], [Procedure, Error, {], [Error, {, 	], [{, 	, Print(“Error], [	, Print(“Error, ”], [Print(“Error, ”, )], [”, ), ;], [), ;, }], [;, }, 	 	]]

>> Noun Phrases are: 
[		Error, } Procedure Error, 	Print(“Error]

>> Named Entities are: 
[]


============================ Sentence 365 =============================

E  	T 	3	*	4	$   num T num * T | 𝜖  Success    Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[E,  	, T, 	, 3, 	, *, 	, 4, 	, $,   , num, T, num, *, T, |, 𝜖,  , Success,    , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('E\uf0e0', 'NOUN'), (' \t', 'SPACE'), ('T\uf0e0', 'VERB'), ('\t', 'SPACE'), ('3', 'NUM'), ('\t', 'SPACE'), ('*', 'PUNCT'), ('\t', 'SPACE'), ('4', 'NUM'), ('\t', 'SPACE'), ('$', 'SYM'), ('  ', 'SPACE'), ('num', 'NOUN'), ('T', 'NOUN'), ('num', 'NOUN'), ('*', 'PUNCT'), ('T', 'NOUN'), ('|', 'NOUN'), ('𝜖', 'ADP'), (' ', 'SPACE'), ('Success', 'NOUN'), ('   ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('E\uf0e0', 'npadvmod'), (' \t', 'nsubj'), ('T\uf0e0', 'ccomp'), ('\t', 'dobj'), ('3', 'nummod'), ('\t', 'conj'), ('*', 'punct'), ('\t', 'appos'), ('4', 'nummod'), ('\t', 'dobj'), ('$', 'nmod'), ('  ', 'dobj'), ('num', 'npadvmod'), ('T', 'compound'), ('num', 'npadvmod'), ('*', 'punct'), ('T', 'compound'), ('|', 'npadvmod'), ('𝜖', 'prep'), (' ', 'npadvmod'), ('Success', 'compound'), ('   ', 'compound'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'npadvmod'), ('#', 'nmod'), ('3130006', 'npadvmod'), ('(', 'punct'), ('PS', 'nsubj'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'parataxis'), ('  ', 'nummod'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[E,  	], [ 	, T], [T, 	], [	, 3], [3, 	], [	, *], [*, 	], [	, 4], [4, 	], [	, $], [$,   ], [  , num], [num, T], [T, num], [num, *], [*, T], [T, |], [|, 𝜖], [𝜖,  ], [ , Success], [Success,    ], [   , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[E,  	, T], [ 	, T, 	], [T, 	, 3], [	, 3, 	], [3, 	, *], [	, *, 	], [*, 	, 4], [	, 4, 	], [4, 	, $], [	, $,   ], [$,   , num], [  , num, T], [num, T, num], [T, num, *], [num, *, T], [*, T, |], [T, |, 𝜖], [|, 𝜖,  ], [𝜖,  , Success], [ , Success,    ], [Success,    , Prof.], [   , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[PS, Unit, – Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('Success', 'ORG'), ('Jay R Dhamsaniya', 'ORG'), ('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 366 =============================

Example: Recursive descent parsing Procedure E { 	If lookahead=num  	{ 		Match(num); 		T(); 	} 	Else 		Error(); 


>> Tokens are: 
[Example, :, Recursive, descent, parsing, Procedure, E, {, 	, lookahead, =, num,  	, {, 		, Match(num, ), ;, 		, T, (, ), ;, 	, }, 	, 		, Error, (, ), ;] 

>> PoS Tags are: 
[('Example', 'NOUN'), (':', 'PUNCT'), ('Recursive', 'ADJ'), ('descent', 'NOUN'), ('parsing', 'VERB'), ('Procedure', 'PROPN'), ('E', 'PROPN'), ('{', 'PUNCT'), ('\t', 'SPACE'), ('lookahead', 'ADJ'), ('=', 'SYM'), ('num', 'NOUN'), (' \t', 'SPACE'), ('{', 'PUNCT'), ('\t\t', 'SPACE'), ('Match(num', 'PROPN'), (')', 'PUNCT'), (';', 'PUNCT'), ('\t\t', 'SPACE'), ('T', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), (';', 'PUNCT'), ('\t', 'SPACE'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('\t\t', 'SPACE'), ('Error', 'PROPN'), ('(', 'PUNCT'), (')', 'PUNCT'), (';', 'PUNCT')] 

>> Dependency Tags are: 
[('Example', 'ROOT'), (':', 'punct'), ('Recursive', 'compound'), ('descent', 'appos'), ('parsing', 'acl'), ('Procedure', 'compound'), ('E', 'dobj'), ('{', 'punct'), ('\t', 'appos'), ('lookahead', 'advcl'), ('=', 'punct'), ('num', 'dobj'), (' \t', 'dobj'), ('{', 'punct'), ('\t\t', 'prep'), ('Match(num', 'pobj'), (')', 'punct'), (';', 'punct'), ('\t\t', 'compound'), ('T', 'appos'), ('(', 'punct'), (')', 'punct'), (';', 'punct'), ('\t', 'nmod'), ('}', 'punct'), ('\t', 'compound'), ('\t\t', 'prep'), ('Error', 'conj'), ('(', 'punct'), (')', 'punct'), (';', 'punct')]

>> Bigrams: 
[[Example, :], [:, Recursive], [Recursive, descent], [descent, parsing], [parsing, Procedure], [Procedure, E], [E, {], [{, 	], [	, lookahead], [lookahead, =], [=, num], [num,  	], [ 	, {], [{, 		], [		, Match(num], [Match(num, )], [), ;], [;, 		], [		, T], [T, (], [(, )], [), ;], [;, 	], [	, }], [}, 	], [	, 		], [		, Error], [Error, (], [(, )], [), ;]]

>> Trigrams: 
[[Example, :, Recursive], [:, Recursive, descent], [Recursive, descent, parsing], [descent, parsing, Procedure], [parsing, Procedure, E], [Procedure, E, {], [E, {, 	], [{, 	, lookahead], [	, lookahead, =], [lookahead, =, num], [=, num,  	], [num,  	, {], [ 	, {, 		], [{, 		, Match(num], [		, Match(num, )], [Match(num, ), ;], [), ;, 		], [;, 		, T], [		, T, (], [T, (, )], [(, ), ;], [), ;, 	], [;, 	, }], [	, }, 	], [}, 	, 		], [	, 		, Error], [		, Error, (], [Error, (, )], [(, ), ;]]

>> Noun Phrases are: 
[Example, Recursive descent, Procedure E, =num, Match(num, 		T, 	Else]

>> Named Entities are: 
[]


============================ Sentence 367 =============================

	If lookahead=$ 	{ 		Declare success; 	} 	Else 		Error(); }  Procedure T { 	If lookahead=’*’  	{ 		Match(‘*’); 		If lookahead=num  		{ 			Match(num); 			T(); 		} 		Else 			Error();   	} 	Else 		NULL } Proceduce Match(token t) { 


>> Tokens are: 
[	, lookahead=$, 	, {, 		, Declare, success, ;, 	, }, 	, 		, Error, (, ), ;, },  , Procedure, T, {, 	, lookahead=, ’, *, ’,  	, {, 		, Match, (, ‘, *, ’, ), ;, 		, lookahead, =, num,  		, {, 			, Match(num, ), ;, 			, T, (, ), ;, 		, }, 		, 			, Error, (, ), ;,   	, }, 	, 		, NULL, }, Proceduce, Match(token, t, ), {] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('lookahead=$', 'PROPN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('\t\t', 'SPACE'), ('Declare', 'VERB'), ('success', 'NOUN'), (';', 'PUNCT'), ('\t', 'SPACE'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('\t\t', 'SPACE'), ('Error', 'PROPN'), ('(', 'PUNCT'), (')', 'PUNCT'), (';', 'PUNCT'), ('}', 'PUNCT'), (' ', 'SPACE'), ('Procedure', 'NOUN'), ('T', 'PROPN'), ('{', 'PUNCT'), ('\t', 'SPACE'), ('lookahead=', 'PROPN'), ('’', 'PART'), ('*', 'PUNCT'), ('’', 'PUNCT'), (' \t', 'SPACE'), ('{', 'PUNCT'), ('\t\t', 'SPACE'), ('Match', 'NOUN'), ('(', 'PUNCT'), ('‘', 'PUNCT'), ('*', 'PUNCT'), ('’', 'PUNCT'), (')', 'PUNCT'), (';', 'PUNCT'), ('\t\t', 'SPACE'), ('lookahead', 'VERB'), ('=', 'SYM'), ('num', 'NOUN'), (' \t\t', 'SPACE'), ('{', 'PUNCT'), ('\t\t\t', 'SPACE'), ('Match(num', 'PROPN'), (')', 'PUNCT'), (';', 'PUNCT'), ('\t\t\t', 'SPACE'), ('T', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), (';', 'PUNCT'), ('\t\t', 'SPACE'), ('}', 'PUNCT'), ('\t\t', 'SPACE'), ('\t\t\t', 'SPACE'), ('Error', 'PROPN'), ('(', 'PUNCT'), (')', 'PUNCT'), (';', 'PUNCT'), ('\xa0 \t', 'SPACE'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('\t\t', 'SPACE'), ('NULL', 'PROPN'), ('}', 'PUNCT'), ('Proceduce', 'PROPN'), ('Match(token', 'PROPN'), ('t', 'NOUN'), (')', 'PUNCT'), ('{', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'nsubj'), ('lookahead=$', 'compound'), ('\t', 'nsubj'), ('{', 'punct'), ('\t\t', 'appos'), ('Declare', 'advcl'), ('success', 'dobj'), (';', 'punct'), ('\t', 'nmod'), ('}', 'punct'), ('\t', 'compound'), ('\t\t', 'prep'), ('Error', 'conj'), ('(', 'punct'), (')', 'punct'), (';', 'punct'), ('}', 'punct'), (' ', 'punct'), ('Procedure', 'compound'), ('T', 'appos'), ('{', 'punct'), ('\t', 'appos'), ('lookahead=', 'pobj'), ('’', 'prep'), ('*', 'punct'), ('’', 'punct'), (' \t', 'oprd'), ('{', 'punct'), ('\t\t', 'prep'), ('Match', 'appos'), ('(', 'punct'), ('‘', 'punct'), ('*', 'punct'), ('’', 'punct'), (')', 'punct'), (';', 'punct'), ('\t\t', 'appos'), ('lookahead', 'advcl'), ('=', 'punct'), ('num', 'amod'), (' \t\t', 'dobj'), ('{', 'punct'), ('\t\t\t', 'npadvmod'), ('Match(num', 'npadvmod'), (')', 'punct'), (';', 'punct'), ('\t\t\t', 'compound'), ('T', 'conj'), ('(', 'punct'), (')', 'punct'), (';', 'punct'), ('\t\t', 'appos'), ('}', 'punct'), ('\t\t', 'nmod'), ('\t\t\t', 'compound'), ('Error', 'ROOT'), ('(', 'punct'), (')', 'punct'), (';', 'punct'), ('\xa0 \t', 'appos'), ('}', 'punct'), ('\t', 'compound'), ('\t\t', 'nmod'), ('NULL', 'appos'), ('}', 'punct'), ('Proceduce', 'compound'), ('Match(token', 'compound'), ('t', 'appos'), (')', 'punct'), ('{', 'punct')]

>> Bigrams: 
[[	, lookahead=$], [lookahead=$, 	], [	, {], [{, 		], [		, Declare], [Declare, success], [success, ;], [;, 	], [	, }], [}, 	], [	, 		], [		, Error], [Error, (], [(, )], [), ;], [;, }], [},  ], [ , Procedure], [Procedure, T], [T, {], [{, 	], [	, lookahead=], [lookahead=, ’], [’, *], [*, ’], [’,  	], [ 	, {], [{, 		], [		, Match], [Match, (], [(, ‘], [‘, *], [*, ’], [’, )], [), ;], [;, 		], [		, lookahead], [lookahead, =], [=, num], [num,  		], [ 		, {], [{, 			], [			, Match(num], [Match(num, )], [), ;], [;, 			], [			, T], [T, (], [(, )], [), ;], [;, 		], [		, }], [}, 		], [		, 			], [			, Error], [Error, (], [(, )], [), ;], [;,   	], [  	, }], [}, 	], [	, 		], [		, NULL], [NULL, }], [}, Proceduce], [Proceduce, Match(token], [Match(token, t], [t, )], [), {]]

>> Trigrams: 
[[	, lookahead=$, 	], [lookahead=$, 	, {], [	, {, 		], [{, 		, Declare], [		, Declare, success], [Declare, success, ;], [success, ;, 	], [;, 	, }], [	, }, 	], [}, 	, 		], [	, 		, Error], [		, Error, (], [Error, (, )], [(, ), ;], [), ;, }], [;, },  ], [},  , Procedure], [ , Procedure, T], [Procedure, T, {], [T, {, 	], [{, 	, lookahead=], [	, lookahead=, ’], [lookahead=, ’, *], [’, *, ’], [*, ’,  	], [’,  	, {], [ 	, {, 		], [{, 		, Match], [		, Match, (], [Match, (, ‘], [(, ‘, *], [‘, *, ’], [*, ’, )], [’, ), ;], [), ;, 		], [;, 		, lookahead], [		, lookahead, =], [lookahead, =, num], [=, num,  		], [num,  		, {], [ 		, {, 			], [{, 			, Match(num], [			, Match(num, )], [Match(num, ), ;], [), ;, 			], [;, 			, T], [			, T, (], [T, (, )], [(, ), ;], [), ;, 		], [;, 		, }], [		, }, 		], [}, 		, 			], [		, 			, Error], [			, Error, (], [Error, (, )], [(, ), ;], [), ;,   	], [;,   	, }], [  	, }, 	], [}, 	, 		], [	, 		, NULL], [		, NULL, }], [NULL, }, Proceduce], [}, Proceduce, Match(token], [Proceduce, Match(token, t], [Match(token, t, )], [t, ), {]]

>> Noun Phrases are: 
[success, 	Else, Procedure T, lookahead=, Match, 			T, 	Else, 		NULL, Proceduce Match(token t]

>> Named Entities are: 
[('Declare', 'ORG')]


============================ Sentence 368 =============================

	If lookahead=t 


>> Tokens are: 
[	, lookahead, =, t] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('lookahead', 'NOUN'), ('=', 'SYM'), ('t', 'NOUN')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('lookahead', 'advcl'), ('=', 'dobj'), ('t', 'npadvmod')]

>> Bigrams: 
[[	, lookahead], [lookahead, =], [=, t]]

>> Trigrams: 
[[	, lookahead, =], [lookahead, =, t]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 369 =============================

	lookahead=next_token; 	Else 		Error(); } Procedure Error { 	Print(“Error”); } 	 	 


>> Tokens are: 
[	, lookahead, =, next_token, ;, 	, 		, Error, (, ), ;, }, Procedure, Error, {, 	, Print(“Error, ”, ), ;, }, 	 	] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('lookahead', 'VERB'), ('=', 'SYM'), ('next_token', 'PROPN'), (';', 'PUNCT'), ('\t', 'SPACE'), ('\t\t', 'SPACE'), ('Error', 'PROPN'), ('(', 'PUNCT'), (')', 'PUNCT'), (';', 'PUNCT'), ('}', 'PUNCT'), ('Procedure', 'PROPN'), ('Error', 'PROPN'), ('{', 'PUNCT'), ('\t', 'SPACE'), ('Print(“Error', 'NOUN'), ('”', 'PUNCT'), (')', 'PUNCT'), (';', 'PUNCT'), ('}', 'PUNCT'), ('\t \t', 'SPACE')] 

>> Dependency Tags are: 
[('\t', 'nsubj'), ('lookahead', 'ROOT'), ('=', 'punct'), ('next_token', 'ccomp'), (';', 'punct'), ('\t', 'compound'), ('\t\t', 'compound'), ('Error', 'appos'), ('(', 'punct'), (')', 'punct'), (';', 'punct'), ('}', 'punct'), ('Procedure', 'compound'), ('Error', 'appos'), ('{', 'punct'), ('\t', 'compound'), ('Print(“Error', 'appos'), ('”', 'punct'), (')', 'punct'), (';', 'punct'), ('}', 'punct'), ('\t \t', 'appos')]

>> Bigrams: 
[[	, lookahead], [lookahead, =], [=, next_token], [next_token, ;], [;, 	], [	, 		], [		, Error], [Error, (], [(, )], [), ;], [;, }], [}, Procedure], [Procedure, Error], [Error, {], [{, 	], [	, Print(“Error], [Print(“Error, ”], [”, )], [), ;], [;, }], [}, 	 	]]

>> Trigrams: 
[[	, lookahead, =], [lookahead, =, next_token], [=, next_token, ;], [next_token, ;, 	], [;, 	, 		], [	, 		, Error], [		, Error, (], [Error, (, )], [(, ), ;], [), ;, }], [;, }, Procedure], [}, Procedure, Error], [Procedure, Error, {], [Error, {, 	], [{, 	, Print(“Error], [	, Print(“Error, ”], [Print(“Error, ”, )], [”, ), ;], [), ;, }], [;, }, 	 	]]

>> Noun Phrases are: 
[		Error, } Procedure Error, 	Print(“Error]

>> Named Entities are: 
[]


============================ Sentence 370 =============================

E  	T num T num 


>> Tokens are: 
[E,  	, T, num, T, num] 

>> PoS Tags are: 
[('E\uf0e0', 'NOUN'), (' \t', 'SPACE'), ('T\uf0e0', 'VERB'), ('num', 'ADJ'), ('T', 'NOUN'), ('num', 'NOUN')] 

>> Dependency Tags are: 
[('E\uf0e0', 'meta'), (' \t', 'nsubj'), ('T\uf0e0', 'ROOT'), ('num', 'amod'), ('T', 'compound'), ('num', 'dobj')]

>> Bigrams: 
[[E,  	], [ 	, T], [T, num], [num, T], [T, num]]

>> Trigrams: 
[[E,  	, T], [ 	, T, num], [T, num, T], [num, T, num]]

>> Noun Phrases are: 
[num T num]

>> Named Entities are: 
[]


============================ Sentence 371 =============================

* T | 𝜖 Success 	3	4	*	$  Error 	3	*	4	$     Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#› 


>> Tokens are: 
[*, T, |, 𝜖, Success, 	, 3, 	, 4, 	, *, 	, $,  , Error, 	, 3, 	, *, 	, 4, 	, $,     , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›] 

>> PoS Tags are: 
[('*', 'PUNCT'), ('T', 'NOUN'), ('|', 'NOUN'), ('𝜖', 'PROPN'), ('Success', 'PROPN'), ('\t', 'SPACE'), ('3', 'NUM'), ('\t', 'SPACE'), ('4', 'NUM'), ('\t', 'SPACE'), ('*', 'PUNCT'), ('\t', 'SPACE'), ('$', 'SYM'), (' ', 'SPACE'), ('Error', 'PROPN'), ('\t', 'SPACE'), ('3', 'PROPN'), ('\t', 'SPACE'), ('*', 'PUNCT'), ('\t', 'SPACE'), ('4', 'NUM'), ('\t', 'SPACE'), ('$', 'SYM'), ('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X')] 

>> Dependency Tags are: 
[('*', 'punct'), ('T', 'compound'), ('|', 'npadvmod'), ('𝜖', 'prep'), ('Success', 'compound'), ('\t', 'nmod'), ('3', 'nummod'), ('\t', 'nmod'), ('4', 'nummod'), ('\t', 'pobj'), ('*', 'punct'), ('\t', 'nmod'), ('$', 'nmod'), (' ', 'compound'), ('Error', 'compound'), ('\t', 'appos'), ('3', 'nummod'), ('\t', 'appos'), ('*', 'punct'), ('\t', 'appos'), ('4', 'appos'), ('\t', 'appos'), ('$', 'quantmod'), ('    ', 'appos'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'appos'), ('#', 'nmod'), ('3130006', 'appos'), ('(', 'punct'), ('PS', 'nsubj'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'dobj'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct')]

>> Bigrams: 
[[*, T], [T, |], [|, 𝜖], [𝜖, Success], [Success, 	], [	, 3], [3, 	], [	, 4], [4, 	], [	, *], [*, 	], [	, $], [$,  ], [ , Error], [Error, 	], [	, 3], [3, 	], [	, *], [*, 	], [	, 4], [4, 	], [	, $], [$,     ], [    , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›]]

>> Trigrams: 
[[*, T, |], [T, |, 𝜖], [|, 𝜖, Success], [𝜖, Success, 	], [Success, 	, 3], [	, 3, 	], [3, 	, 4], [	, 4, 	], [4, 	, *], [	, *, 	], [*, 	, $], [	, $,  ], [$,  , Error], [ , Error, 	], [Error, 	, 3], [	, 3, 	], [3, 	, *], [	, *, 	], [*, 	, 4], [	, 4, 	], [4, 	, $], [	, $,     ], [$,     , Prof.], [    , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›]]

>> Noun Phrases are: 
[Prof. Jay R Dhamsaniya, PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('Jay R Dhamsaniya', 'ORG'), ('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 372 =============================

 Parsing Methods Parsing Top down parsing Bottom up parsing (Shift reduce) Back tracking Parsing without backtracking (predictive Parsing) LR parsing Operator precedence LALR   


>> Tokens are: 
[ , Parsing, Methods, Parsing, parsing, parsing, (, Shift, reduce, ), tracking, Parsing, backtracking, (, predictive, Parsing, ), LR, parsing, Operator, precedence, LALR,  ] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('Parsing', 'PROPN'), ('Methods', 'PROPN'), ('Parsing', 'VERB'), ('parsing', 'VERB'), ('parsing', 'VERB'), ('(', 'PUNCT'), ('Shift', 'NOUN'), ('reduce', 'VERB'), (')', 'PUNCT'), ('tracking', 'VERB'), ('Parsing', 'VERB'), ('backtracking', 'VERB'), ('(', 'PUNCT'), ('predictive', 'ADJ'), ('Parsing', 'PROPN'), (')', 'PUNCT'), ('LR', 'PROPN'), ('parsing', 'VERB'), ('Operator', 'PROPN'), ('precedence', 'NOUN'), ('LALR', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'compound'), ('Parsing', 'compound'), ('Methods', 'dep'), ('Parsing', 'acl'), ('parsing', 'acl'), ('parsing', 'ccomp'), ('(', 'punct'), ('Shift', 'nsubj'), ('reduce', 'ccomp'), (')', 'punct'), ('tracking', 'ROOT'), ('Parsing', 'dobj'), ('backtracking', 'pcomp'), ('(', 'punct'), ('predictive', 'amod'), ('Parsing', 'nmod'), (')', 'punct'), ('LR', 'nsubj'), ('parsing', 'parataxis'), ('Operator', 'compound'), ('precedence', 'compound'), ('LALR', 'dobj'), (' ', 'punct')]

>> Bigrams: 
[[ , Parsing], [Parsing, Methods], [Methods, Parsing], [Parsing, parsing], [parsing, parsing], [parsing, (], [(, Shift], [Shift, reduce], [reduce, )], [), tracking], [tracking, Parsing], [Parsing, backtracking], [backtracking, (], [(, predictive], [predictive, Parsing], [Parsing, )], [), LR], [LR, parsing], [parsing, Operator], [Operator, precedence], [precedence, LALR], [LALR,  ]]

>> Trigrams: 
[[ , Parsing, Methods], [Parsing, Methods, Parsing], [Methods, Parsing, parsing], [Parsing, parsing, parsing], [parsing, parsing, (], [parsing, (, Shift], [(, Shift, reduce], [Shift, reduce, )], [reduce, ), tracking], [), tracking, Parsing], [tracking, Parsing, backtracking], [Parsing, backtracking, (], [backtracking, (, predictive], [(, predictive, Parsing], [predictive, Parsing, )], [Parsing, ), LR], [), LR, parsing], [LR, parsing, Operator], [parsing, Operator, precedence], [Operator, precedence, LALR], [precedence, LALR,  ]]

>> Noun Phrases are: 
[Top, Bottom, Shift, predictive Parsing) LR, Operator precedence LALR]

>> Named Entities are: 
[('Bottom', 'PERSON')]


============================ Sentence 373 =============================

CLR  SLR   


>> Tokens are: 
[CLR,  , SLR,  ] 

>> PoS Tags are: 
[('CLR', 'PROPN'), (' ', 'SPACE'), ('SLR', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('CLR', 'ROOT'), (' ', 'appos'), ('SLR', 'compound'), (' ', 'appos')]

>> Bigrams: 
[[CLR,  ], [ , SLR], [SLR,  ]]

>> Trigrams: 
[[CLR,  , SLR], [ , SLR,  ]]

>> Noun Phrases are: 
[CLR]

>> Named Entities are: 
[('CLR', 'ORG'), ('SLR', 'ORG')]


============================ Sentence 374 =============================

Recursive  descent  LL(1)        


>> Tokens are: 
[Recursive,  , descent,  , LL(1, ),       ] 

>> PoS Tags are: 
[('Recursive', 'PROPN'), (' ', 'SPACE'), ('descent', 'NOUN'), (' ', 'SPACE'), ('LL(1', 'NOUN'), (')', 'PUNCT'), ('      ', 'SPACE')] 

>> Dependency Tags are: 
[('Recursive', 'compound'), (' ', 'poss'), ('descent', 'appos'), (' ', 'compound'), ('LL(1', 'appos'), (')', 'punct'), ('      ', 'ROOT')]

>> Bigrams: 
[[Recursive,  ], [ , descent], [descent,  ], [ , LL(1], [LL(1, )], [),       ]]

>> Trigrams: 
[[Recursive,  , descent], [ , descent,  ], [descent,  , LL(1], [ , LL(1, )], [LL(1, ),       ]]

>> Noun Phrases are: 
[descent,  LL(1]

>> Named Entities are: 
[]


============================ Sentence 375 =============================

Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara   


>> Tokens are: 
[Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara,  ] 

>> PoS Tags are: 
[('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'nsubj'), ('#', 'appos'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'dep'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'ROOT'), ('‹#›', 'punct'), ('  ', 'appos'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), (' ', 'punct')]

>> Bigrams: 
[[Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,  ]]

>> Trigrams: 
[[Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,  ]]

>> Noun Phrases are: 
[Prof. Jay R Dhamsaniya, (PS, Unit, Prof. Dixita B Kagathara]

>> Named Entities are: 
[('PS', 'ORG'), ('Dixita', 'PERSON'), ('Kagathara', 'PERSON')]


============================ Sentence 376 =============================

#2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[#, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('#', 'nmod'), ('2170701', 'nsubj'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[(CD, Unit, Theory, I]

>> Named Entities are: 
[]


============================ Sentence 377 =============================

Handle & Handle pruning Handle: A “handle” of a string is a substring of the string that matches the right side of a production, and whose reduction to the non terminal of the production is one step along the reverse of rightmost derivation. 


>> Tokens are: 
[Handle, &, Handle, pruning, Handle, :, “, handle, ”, string, substring, string, matches, right, production, ,, reduction, non, terminal, production, step, reverse, rightmost, derivation, .] 

>> PoS Tags are: 
[('Handle', 'PROPN'), ('&', 'CCONJ'), ('Handle', 'PROPN'), ('pruning', 'VERB'), ('Handle', 'NOUN'), (':', 'PUNCT'), ('“', 'PUNCT'), ('handle', 'NOUN'), ('”', 'PUNCT'), ('string', 'NOUN'), ('substring', 'NOUN'), ('string', 'NOUN'), ('matches', 'VERB'), ('right', 'ADJ'), ('production', 'NOUN'), (',', 'PUNCT'), ('reduction', 'NOUN'), ('non', 'ADJ'), ('terminal', 'NOUN'), ('production', 'NOUN'), ('step', 'NOUN'), ('reverse', 'NOUN'), ('rightmost', 'NOUN'), ('derivation', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Handle', 'npadvmod'), ('&', 'cc'), ('Handle', 'conj'), ('pruning', 'ccomp'), ('Handle', 'dobj'), (':', 'punct'), ('“', 'punct'), ('handle', 'nsubj'), ('”', 'punct'), ('string', 'pobj'), ('substring', 'attr'), ('string', 'pobj'), ('matches', 'relcl'), ('right', 'amod'), ('production', 'pobj'), (',', 'punct'), ('reduction', 'nsubj'), ('non', 'amod'), ('terminal', 'pobj'), ('production', 'pobj'), ('step', 'attr'), ('reverse', 'pobj'), ('rightmost', 'compound'), ('derivation', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Handle, &], [&, Handle], [Handle, pruning], [pruning, Handle], [Handle, :], [:, “], [“, handle], [handle, ”], [”, string], [string, substring], [substring, string], [string, matches], [matches, right], [right, production], [production, ,], [,, reduction], [reduction, non], [non, terminal], [terminal, production], [production, step], [step, reverse], [reverse, rightmost], [rightmost, derivation], [derivation, .]]

>> Trigrams: 
[[Handle, &, Handle], [&, Handle, pruning], [Handle, pruning, Handle], [pruning, Handle, :], [Handle, :, “], [:, “, handle], [“, handle, ”], [handle, ”, string], [”, string, substring], [string, substring, string], [substring, string, matches], [string, matches, right], [matches, right, production], [right, production, ,], [production, ,, reduction], [,, reduction, non], [reduction, non, terminal], [non, terminal, production], [terminal, production, step], [production, step, reverse], [step, reverse, rightmost], [reverse, rightmost, derivation], [rightmost, derivation, .]]

>> Noun Phrases are: 
[Handle, a string, a substring, the string, the right side, a production, whose reduction, the non terminal, the production, one step, the reverse, rightmost derivation]

>> Named Entities are: 
[('one', 'CARDINAL')]


============================ Sentence 378 =============================

Handle pruning: The process of discovering a handle and reducing it to appropriate left hand side non terminal is known as handle pruning. 


>> Tokens are: 
[Handle, pruning, :, process, discovering, handle, reducing, appropriate, left, hand, non, terminal, known, handle, pruning, .] 

>> PoS Tags are: 
[('Handle', 'PROPN'), ('pruning', 'VERB'), (':', 'PUNCT'), ('process', 'NOUN'), ('discovering', 'VERB'), ('handle', 'NOUN'), ('reducing', 'VERB'), ('appropriate', 'ADJ'), ('left', 'ADJ'), ('hand', 'NOUN'), ('non', 'ADJ'), ('terminal', 'NOUN'), ('known', 'VERB'), ('handle', 'VERB'), ('pruning', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Handle', 'compound'), ('pruning', 'ccomp'), (':', 'punct'), ('process', 'nsubjpass'), ('discovering', 'pcomp'), ('handle', 'dobj'), ('reducing', 'conj'), ('appropriate', 'advcl'), ('left', 'amod'), ('hand', 'nmod'), ('non', 'amod'), ('terminal', 'dobj'), ('known', 'ROOT'), ('handle', 'pcomp'), ('pruning', 'pcomp'), ('.', 'punct')]

>> Bigrams: 
[[Handle, pruning], [pruning, :], [:, process], [process, discovering], [discovering, handle], [handle, reducing], [reducing, appropriate], [appropriate, left], [left, hand], [hand, non], [non, terminal], [terminal, known], [known, handle], [handle, pruning], [pruning, .]]

>> Trigrams: 
[[Handle, pruning, :], [pruning, :, process], [:, process, discovering], [process, discovering, handle], [discovering, handle, reducing], [handle, reducing, appropriate], [reducing, appropriate, left], [appropriate, left, hand], [left, hand, non], [hand, non, terminal], [non, terminal, known], [terminal, known, handle], [known, handle, pruning], [handle, pruning, .]]

>> Noun Phrases are: 
[The process, a handle, it, left hand side non terminal]

>> Named Entities are: 
[]


============================ Sentence 379 =============================

 EE+E EE*E Eid String: id1+id2*id3 	Right sentential form	Handle	Production  	id1+id2*id3	id1	Eid   	E+id2*id3 


>> Tokens are: 
[ , EE+E, EE*E, Eid, String, :, id1+id2*id3, 	, Right, sentential, form, 	, Handle, 	, Production,  	, id1+id2*id3, 	, id1, 	, Eid,   	, E+id2*id3] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('E\uf0e0E+E', 'VERB'), ('E\uf0e0E*E', 'NOUN'), ('E\uf0e0id', 'NOUN'), ('String', 'PROPN'), (':', 'PUNCT'), ('id1+id2*id3', 'NOUN'), ('\t', 'SPACE'), ('Right', 'ADP'), ('sentential', 'ADJ'), ('form', 'NOUN'), ('\t', 'SPACE'), ('Handle', 'PROPN'), ('\t', 'SPACE'), ('Production', 'PROPN'), (' \t', 'SPACE'), ('id1+id2*id3', 'NOUN'), ('\t', 'SPACE'), ('id1', 'ADV'), ('\t', 'SPACE'), ('E\uf0e0id', 'NOUN'), ('  \t', 'SPACE'), ('E+id2*id3', 'NOUN')] 

>> Dependency Tags are: 
[(' ', 'nsubj'), ('E\uf0e0E+E', 'ROOT'), ('E\uf0e0E*E', 'compound'), ('E\uf0e0id', 'compound'), ('String', 'dobj'), (':', 'punct'), ('id1+id2*id3', 'compound'), ('\t', 'appos'), ('Right', 'prep'), ('sentential', 'amod'), ('form', 'appos'), ('\t', 'compound'), ('Handle', 'compound'), ('\t', 'compound'), ('Production', 'appos'), (' \t', 'compound'), ('id1+id2*id3', 'appos'), ('\t', 'compound'), ('id1', 'advmod'), ('\t', 'compound'), ('E\uf0e0id', 'dobj'), ('  \t', 'nummod'), ('E+id2*id3', 'dobj')]

>> Bigrams: 
[[ , EE+E], [EE+E, EE*E], [EE*E, Eid], [Eid, String], [String, :], [:, id1+id2*id3], [id1+id2*id3, 	], [	, Right], [Right, sentential], [sentential, form], [form, 	], [	, Handle], [Handle, 	], [	, Production], [Production,  	], [ 	, id1+id2*id3], [id1+id2*id3, 	], [	, id1], [id1, 	], [	, Eid], [Eid,   	], [  	, E+id2*id3]]

>> Trigrams: 
[[ , EE+E, EE*E], [EE+E, EE*E, Eid], [EE*E, Eid, String], [Eid, String, :], [String, :, id1+id2*id3], [:, id1+id2*id3, 	], [id1+id2*id3, 	, Right], [	, Right, sentential], [Right, sentential, form], [sentential, form, 	], [form, 	, Handle], [	, Handle, 	], [Handle, 	, Production], [	, Production,  	], [Production,  	, id1+id2*id3], [ 	, id1+id2*id3, 	], [id1+id2*id3, 	, id1], [	, id1, 	], [id1, 	, Eid], [	, Eid,   	], [Eid,   	, E+id2*id3]]

>> Noun Phrases are: 
[EE*E Eid String, sentential form, 	Handle	Production,  	id1+id2*id3, 	id1	Eid, E+id2*id3]

>> Named Entities are: 
[]


============================ Sentence 380 =============================

	id2	Eid  	E+E*id3	id3	Eid  	E+E*E 


>> Tokens are: 
[	, id2, 	, Eid,  	, E+E*id3, 	, id3, 	, Eid,  	, E+E*E] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('id2', 'NOUN'), ('\t', 'SPACE'), ('E\uf0e0id', 'PROPN'), (' \t', 'SPACE'), ('E+E*id3', 'NOUN'), ('\t', 'SPACE'), ('id3', 'VERB'), ('\t', 'SPACE'), ('E\uf0e0id', 'PROPN'), (' \t', 'SPACE'), ('E+E*E', 'VERB')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('id2', 'dep'), ('\t', 'compound'), ('E\uf0e0id', 'compound'), (' \t', 'appos'), ('E+E*id3', 'conj'), ('\t', 'nsubj'), ('id3', 'ROOT'), ('\t', 'compound'), ('E\uf0e0id', 'dobj'), (' \t', 'appos'), ('E+E*E', 'ccomp')]

>> Bigrams: 
[[	, id2], [id2, 	], [	, Eid], [Eid,  	], [ 	, E+E*id3], [E+E*id3, 	], [	, id3], [id3, 	], [	, Eid], [Eid,  	], [ 	, E+E*E]]

>> Trigrams: 
[[	, id2, 	], [id2, 	, Eid], [	, Eid,  	], [Eid,  	, E+E*id3], [ 	, E+E*id3, 	], [E+E*id3, 	, id3], [	, id3, 	], [id3, 	, Eid], [	, Eid,  	], [Eid,  	, E+E*E]]

>> Noun Phrases are: 
[	Eid]

>> Named Entities are: 
[]


============================ Sentence 381 =============================

	E*E	EE*E  	E+E	E+E	EE+E   	E		                 Rightmost Derivation E E+E E+E*E E+E*id3 E+id2*id3 id1+id2*id3    Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#› 


>> Tokens are: 
[	, E*E, 	, EE*E,  	, E+E, 	, E+E, 	, EE+E,   	, E, 		                 , Rightmost, Derivation, E, E+E, E+E*E, E+E*id3, E+id2*id3, id1+id2*id3,    , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('E*E', 'NOUN'), ('\t', 'SPACE'), ('E\uf0e0E*E', 'VERB'), (' \t', 'SPACE'), ('E+E', 'NOUN'), ('\t', 'SPACE'), ('E+E', 'NOUN'), ('\t', 'SPACE'), ('E\uf0e0E+E', 'VERB'), ('  \t', 'SPACE'), ('E', 'NOUN'), ('\t\t                 ', 'SPACE'), ('Rightmost', 'PROPN'), ('Derivation', 'PROPN'), ('E', 'NOUN'), ('E+E', 'NOUN'), ('E+E*E', 'NOUN'), ('E+E*id3', 'VERB'), ('E+id2*id3', 'NOUN'), ('id1+id2*id3', 'NOUN'), ('   ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('E*E', 'compound'), ('\t', 'nsubj'), ('E\uf0e0E*E', 'nmod'), (' \t', 'compound'), ('E+E', 'compound'), ('\t', 'compound'), ('E+E', 'compound'), ('\t', 'nsubj'), ('E\uf0e0E+E', 'ccomp'), ('  \t', 'compound'), ('E', 'dobj'), ('\t\t                 ', 'compound'), ('Rightmost', 'compound'), ('Derivation', 'compound'), ('E', 'compound'), ('E+E', 'nsubj'), ('E+E*E', 'relcl'), ('E+E*id3', 'compound'), ('E+id2*id3', 'compound'), ('id1+id2*id3', 'dobj'), ('   ', 'nummod'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'npadvmod'), ('#', 'nmod'), ('3130006', 'appos'), ('(', 'punct'), ('PS', 'nsubj'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'parataxis'), ('  ', 'dep'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct')]

>> Bigrams: 
[[	, E*E], [E*E, 	], [	, EE*E], [EE*E,  	], [ 	, E+E], [E+E, 	], [	, E+E], [E+E, 	], [	, EE+E], [EE+E,   	], [  	, E], [E, 		                 ], [		                 , Rightmost], [Rightmost, Derivation], [Derivation, E], [E, E+E], [E+E, E+E*E], [E+E*E, E+E*id3], [E+E*id3, E+id2*id3], [E+id2*id3, id1+id2*id3], [id1+id2*id3,    ], [   , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›]]

>> Trigrams: 
[[	, E*E, 	], [E*E, 	, EE*E], [	, EE*E,  	], [EE*E,  	, E+E], [ 	, E+E, 	], [E+E, 	, E+E], [	, E+E, 	], [E+E, 	, EE+E], [	, EE+E,   	], [EE+E,   	, E], [  	, E, 		                 ], [E, 		                 , Rightmost], [		                 , Rightmost, Derivation], [Rightmost, Derivation, E], [Derivation, E, E+E], [E, E+E, E+E*E], [E+E, E+E*E, E+E*id3], [E+E*E, E+E*id3, E+id2*id3], [E+E*id3, E+id2*id3, id1+id2*id3], [E+id2*id3, id1+id2*id3,    ], [id1+id2*id3,    , Prof.], [   , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›]]

>> Noun Phrases are: 
[  	E, 		                 Rightmost Derivation E E+E, E+E*id3 E+id2*id3 id1+id2*id3, PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('Jay R Dhamsaniya', 'ORG'), ('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 382 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 383 =============================

Shift reduce parser The shift reduce parser performs following basic operations: Shift: Moving of the symbols from input buffer onto the stack, this action is called shift. 


>> Tokens are: 
[Shift, reduce, parser, shift, reduce, parser, performs, following, basic, operations, :, Shift, :, Moving, symbols, input, buffer, stack, ,, action, called, shift, .] 

>> PoS Tags are: 
[('Shift', 'PROPN'), ('reduce', 'VERB'), ('parser', 'NOUN'), ('shift', 'NOUN'), ('reduce', 'VERB'), ('parser', 'NOUN'), ('performs', 'VERB'), ('following', 'VERB'), ('basic', 'ADJ'), ('operations', 'NOUN'), (':', 'PUNCT'), ('Shift', 'VERB'), (':', 'PUNCT'), ('Moving', 'VERB'), ('symbols', 'NOUN'), ('input', 'NOUN'), ('buffer', 'NOUN'), ('stack', 'NOUN'), (',', 'PUNCT'), ('action', 'NOUN'), ('called', 'VERB'), ('shift', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Shift', 'nsubj'), ('reduce', 'ccomp'), ('parser', 'dobj'), ('shift', 'nsubj'), ('reduce', 'conj'), ('parser', 'compound'), ('performs', 'dobj'), ('following', 'prep'), ('basic', 'amod'), ('operations', 'pobj'), (':', 'punct'), ('Shift', 'ccomp'), (':', 'punct'), ('Moving', 'appos'), ('symbols', 'pobj'), ('input', 'compound'), ('buffer', 'pobj'), ('stack', 'pobj'), (',', 'punct'), ('action', 'nsubjpass'), ('called', 'ROOT'), ('shift', 'oprd'), ('.', 'punct')]

>> Bigrams: 
[[Shift, reduce], [reduce, parser], [parser, shift], [shift, reduce], [reduce, parser], [parser, performs], [performs, following], [following, basic], [basic, operations], [operations, :], [:, Shift], [Shift, :], [:, Moving], [Moving, symbols], [symbols, input], [input, buffer], [buffer, stack], [stack, ,], [,, action], [action, called], [called, shift], [shift, .]]

>> Trigrams: 
[[Shift, reduce, parser], [reduce, parser, shift], [parser, shift, reduce], [shift, reduce, parser], [reduce, parser, performs], [parser, performs, following], [performs, following, basic], [following, basic, operations], [basic, operations, :], [operations, :, Shift], [:, Shift, :], [Shift, :, Moving], [:, Moving, symbols], [Moving, symbols, input], [symbols, input, buffer], [input, buffer, stack], [buffer, stack, ,], [stack, ,, action], [,, action, called], [action, called, shift], [called, shift, .]]

>> Noun Phrases are: 
[Shift, parser, The shift, basic operations, the symbols, input buffer, the stack, this action, shift]

>> Named Entities are: 
[]


============================ Sentence 384 =============================

Reduce: If handle appears on the top of the stack then reduction of it by appropriate rule is done. 


>> Tokens are: 
[Reduce, :, handle, appears, stack, reduction, appropriate, rule, .] 

>> PoS Tags are: 
[('Reduce', 'VERB'), (':', 'PUNCT'), ('handle', 'NOUN'), ('appears', 'VERB'), ('stack', 'NOUN'), ('reduction', 'NOUN'), ('appropriate', 'ADJ'), ('rule', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Reduce', 'ROOT'), (':', 'punct'), ('handle', 'nsubj'), ('appears', 'advcl'), ('stack', 'pobj'), ('reduction', 'nsubjpass'), ('appropriate', 'amod'), ('rule', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Reduce, :], [:, handle], [handle, appears], [appears, stack], [stack, reduction], [reduction, appropriate], [appropriate, rule], [rule, .]]

>> Trigrams: 
[[Reduce, :, handle], [:, handle, appears], [handle, appears, stack], [appears, stack, reduction], [stack, reduction, appropriate], [reduction, appropriate, rule], [appropriate, rule, .]]

>> Noun Phrases are: 
[handle, the top, the stack, reduction, it, appropriate rule]

>> Named Entities are: 
[]


============================ Sentence 385 =============================

This action is called reduce action. 


>> Tokens are: 
[action, called, reduce, action, .] 

>> PoS Tags are: 
[('action', 'NOUN'), ('called', 'VERB'), ('reduce', 'VERB'), ('action', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('action', 'nsubjpass'), ('called', 'ROOT'), ('reduce', 'xcomp'), ('action', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[action, called], [called, reduce], [reduce, action], [action, .]]

>> Trigrams: 
[[action, called, reduce], [called, reduce, action], [reduce, action, .]]

>> Noun Phrases are: 
[This action, action]

>> Named Entities are: 
[]


============================ Sentence 386 =============================

Accept: If stack contains start symbol only and input buffer is empty at the same time then that action is called accept. 


>> Tokens are: 
[Accept, :, stack, contains, start, symbol, input, buffer, time, action, called, accept, .] 

>> PoS Tags are: 
[('Accept', 'VERB'), (':', 'PUNCT'), ('stack', 'NOUN'), ('contains', 'VERB'), ('start', 'VERB'), ('symbol', 'NOUN'), ('input', 'NOUN'), ('buffer', 'NOUN'), ('time', 'NOUN'), ('action', 'NOUN'), ('called', 'VERB'), ('accept', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Accept', 'ROOT'), (':', 'punct'), ('stack', 'nsubj'), ('contains', 'advcl'), ('start', 'ccomp'), ('symbol', 'dobj'), ('input', 'compound'), ('buffer', 'nsubj'), ('time', 'pobj'), ('action', 'nsubjpass'), ('called', 'ccomp'), ('accept', 'oprd'), ('.', 'punct')]

>> Bigrams: 
[[Accept, :], [:, stack], [stack, contains], [contains, start], [start, symbol], [symbol, input], [input, buffer], [buffer, time], [time, action], [action, called], [called, accept], [accept, .]]

>> Trigrams: 
[[Accept, :, stack], [:, stack, contains], [stack, contains, start], [contains, start, symbol], [start, symbol, input], [symbol, input, buffer], [input, buffer, time], [buffer, time, action], [time, action, called], [action, called, accept], [called, accept, .]]

>> Noun Phrases are: 
[stack, symbol, input buffer, the same time, that action]

>> Named Entities are: 
[]


============================ Sentence 387 =============================

Error: 


>> Tokens are: 
[Error, :] 

>> PoS Tags are: 
[('Error', 'NOUN'), (':', 'PUNCT')] 

>> Dependency Tags are: 
[('Error', 'ROOT'), (':', 'punct')]

>> Bigrams: 
[[Error, :]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Error]

>> Named Entities are: 
[]


============================ Sentence 388 =============================

A situation in which parser cannot either shift or reduce the symbols, it cannot even perform accept action then it is called error action. 


>> Tokens are: 
[situation, parser, shift, reduce, symbols, ,, perform, accept, action, called, error, action, .] 

>> PoS Tags are: 
[('situation', 'NOUN'), ('parser', 'NOUN'), ('shift', 'VERB'), ('reduce', 'VERB'), ('symbols', 'NOUN'), (',', 'PUNCT'), ('perform', 'VERB'), ('accept', 'VERB'), ('action', 'NOUN'), ('called', 'VERB'), ('error', 'NOUN'), ('action', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('situation', 'dep'), ('parser', 'pobj'), ('shift', 'relcl'), ('reduce', 'conj'), ('symbols', 'dobj'), (',', 'punct'), ('perform', 'ccomp'), ('accept', 'xcomp'), ('action', 'dobj'), ('called', 'ROOT'), ('error', 'compound'), ('action', 'oprd'), ('.', 'punct')]

>> Bigrams: 
[[situation, parser], [parser, shift], [shift, reduce], [reduce, symbols], [symbols, ,], [,, perform], [perform, accept], [accept, action], [action, called], [called, error], [error, action], [action, .]]

>> Trigrams: 
[[situation, parser, shift], [parser, shift, reduce], [shift, reduce, symbols], [reduce, symbols, ,], [symbols, ,, perform], [,, perform, accept], [perform, accept, action], [accept, action, called], [action, called, error], [called, error, action], [error, action, .]]

>> Noun Phrases are: 
[parser, the symbols, it, action, it, error action]

>> Named Entities are: 
[]


============================ Sentence 389 =============================

    Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[    , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('    ', 'nummod'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'nsubj'), ('#', 'appos'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[    , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[    , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[    Prof. Jay R Dhamsaniya, (PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('Jay R Dhamsaniya', 'ORG'), ('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 390 =============================

Example: Shift reduce parser 	Stack 	Input Buffer	Action  	$	id+id*id$	Shift    	$id	+id*id$	Reduce Fid  	$F	+id*id$	Reduce TF  	$T	+id*id$	Reduce ET  	$E	+id*id$	Shift   	$E+	id*id$	Shift   	$E+id	*id$ 


>> Tokens are: 
[Example, :, Shift, reduce, parser, 	, Stack, 	, Input, Buffer, 	, Action,  	, $, 	, id+id*id$, 	, Shift,    	, $, d, 	, +, id*id$, 	, Reduce, Fid,  	, $, F, 	, +, id*id$, 	, Reduce, TF,  	, $, T, 	, +, id*id$, 	, Reduce, ET,  	, $, E, 	, +, id*id$, 	, Shift,   	, $, E+, 	, id*id$, 	, Shift,   	, $, E+id, 	, *, id$] 

>> PoS Tags are: 
[('Example', 'NOUN'), (':', 'PUNCT'), ('Shift', 'NOUN'), ('reduce', 'VERB'), ('parser', 'NOUN'), ('\t', 'SPACE'), ('Stack', 'PROPN'), ('\t', 'SPACE'), ('Input', 'PROPN'), ('Buffer', 'PROPN'), ('\t', 'SPACE'), ('Action', 'PROPN'), (' \t', 'SPACE'), ('$', 'PROPN'), ('\t', 'SPACE'), ('id+id*id$', 'VERB'), ('\t', 'SPACE'), ('Shift', 'PROPN'), ('   \t', 'SPACE'), ('$', 'SYM'), ('d', 'PROPN'), ('\t', 'SPACE'), ('+', 'PROPN'), ('id*id$', 'PROPN'), ('\t', 'SPACE'), ('Reduce', 'PROPN'), ('F\uf0e0id', 'PROPN'), (' \t', 'SPACE'), ('$', 'SYM'), ('F', 'PROPN'), ('\t', 'SPACE'), ('+', 'PROPN'), ('id*id$', 'PROPN'), ('\t', 'SPACE'), ('Reduce', 'PROPN'), ('T\uf0e0F', 'PRON'), (' \t', 'SPACE'), ('$', 'SYM'), ('T', 'NOUN'), ('\t', 'SPACE'), ('+', 'PROPN'), ('id*id$', 'NOUN'), ('\t', 'SPACE'), ('Reduce', 'VERB'), ('E\uf0e0T', 'PROPN'), (' \t', 'SPACE'), ('$', 'PROPN'), ('E', 'NOUN'), ('\t', 'SPACE'), ('+', 'PROPN'), ('id*id$', 'PROPN'), ('\t', 'SPACE'), ('Shift', 'PROPN'), ('  \t', 'SPACE'), ('$', 'SYM'), ('E+', 'NOUN'), ('\t', 'SPACE'), ('id*id$', 'NOUN'), ('\t', 'SPACE'), ('Shift', 'PROPN'), ('  \t', 'SPACE'), ('$', 'SYM'), ('E+id', 'PROPN'), ('\t', 'SPACE'), ('*', 'PUNCT'), ('id$', 'PROPN')] 

>> Dependency Tags are: 
[('Example', 'dep'), (':', 'punct'), ('Shift', 'nsubj'), ('reduce', 'ROOT'), ('parser', 'amod'), ('\t', 'compound'), ('Stack', 'compound'), ('\t', 'compound'), ('Input', 'compound'), ('Buffer', 'compound'), ('\t', 'compound'), ('Action', 'nsubj'), (' \t', 'nmod'), ('$', 'nmod'), ('\t', 'appos'), ('id+id*id$', 'compound'), ('\t', 'compound'), ('Shift', 'dobj'), ('   \t', 'nummod'), ('$', 'nmod'), ('d', 'advcl'), ('\t', 'nmod'), ('+', 'cc'), ('id*id$', 'conj'), ('\t', 'nsubj'), ('Reduce', 'relcl'), ('F\uf0e0id', 'dobj'), (' \t', 'compound'), ('$', 'compound'), ('F', 'compound'), ('\t', 'dobj'), ('+', 'cc'), ('id*id$', 'conj'), ('\t', 'nsubj'), ('Reduce', 'relcl'), ('T\uf0e0F', 'dobj'), (' \t', 'nmod'), ('$', 'nmod'), ('T', 'compound'), ('\t', 'dobj'), ('+', 'cc'), ('id*id$', 'compound'), ('\t', 'nsubj'), ('Reduce', 'ccomp'), ('E\uf0e0T', 'dative'), (' \t', 'nmod'), ('$', 'nmod'), ('E', 'compound'), ('\t', 'dobj'), ('+', 'nummod'), ('id*id$', 'conj'), ('\t', 'compound'), ('Shift', 'dobj'), ('  \t', 'compound'), ('$', 'nmod'), ('E+', 'appos'), ('\t', 'compound'), ('id*id$', 'appos'), ('\t', 'compound'), ('Shift', 'dative'), ('  \t', 'dobj'), ('$', 'nmod'), ('E+id', 'appos'), ('\t', 'appos'), ('*', 'punct'), ('id$', 'dobj')]

>> Bigrams: 
[[Example, :], [:, Shift], [Shift, reduce], [reduce, parser], [parser, 	], [	, Stack], [Stack, 	], [	, Input], [Input, Buffer], [Buffer, 	], [	, Action], [Action,  	], [ 	, $], [$, 	], [	, id+id*id$], [id+id*id$, 	], [	, Shift], [Shift,    	], [   	, $], [$, d], [d, 	], [	, +], [+, id*id$], [id*id$, 	], [	, Reduce], [Reduce, Fid], [Fid,  	], [ 	, $], [$, F], [F, 	], [	, +], [+, id*id$], [id*id$, 	], [	, Reduce], [Reduce, TF], [TF,  	], [ 	, $], [$, T], [T, 	], [	, +], [+, id*id$], [id*id$, 	], [	, Reduce], [Reduce, ET], [ET,  	], [ 	, $], [$, E], [E, 	], [	, +], [+, id*id$], [id*id$, 	], [	, Shift], [Shift,   	], [  	, $], [$, E+], [E+, 	], [	, id*id$], [id*id$, 	], [	, Shift], [Shift,   	], [  	, $], [$, E+id], [E+id, 	], [	, *], [*, id$]]

>> Trigrams: 
[[Example, :, Shift], [:, Shift, reduce], [Shift, reduce, parser], [reduce, parser, 	], [parser, 	, Stack], [	, Stack, 	], [Stack, 	, Input], [	, Input, Buffer], [Input, Buffer, 	], [Buffer, 	, Action], [	, Action,  	], [Action,  	, $], [ 	, $, 	], [$, 	, id+id*id$], [	, id+id*id$, 	], [id+id*id$, 	, Shift], [	, Shift,    	], [Shift,    	, $], [   	, $, d], [$, d, 	], [d, 	, +], [	, +, id*id$], [+, id*id$, 	], [id*id$, 	, Reduce], [	, Reduce, Fid], [Reduce, Fid,  	], [Fid,  	, $], [ 	, $, F], [$, F, 	], [F, 	, +], [	, +, id*id$], [+, id*id$, 	], [id*id$, 	, Reduce], [	, Reduce, TF], [Reduce, TF,  	], [TF,  	, $], [ 	, $, T], [$, T, 	], [T, 	, +], [	, +, id*id$], [+, id*id$, 	], [id*id$, 	, Reduce], [	, Reduce, ET], [Reduce, ET,  	], [ET,  	, $], [ 	, $, E], [$, E, 	], [E, 	, +], [	, +, id*id$], [+, id*id$, 	], [id*id$, 	, Shift], [	, Shift,   	], [Shift,   	, $], [  	, $, E+], [$, E+, 	], [E+, 	, id*id$], [	, id*id$, 	], [id*id$, 	, Shift], [	, Shift,   	], [Shift,   	, $], [  	, $, E+id], [$, E+id, 	], [E+id, 	, *], [	, *, id$]]

>> Noun Phrases are: 
[Shift, 	Stack 	Input Buffer	Action, Fid, id*id$, TF, ET, id*id$, 	Shift,   	$E+, 	id*id$, 	Shift, $E+id, *id$]

>> Named Entities are: 
[('Input Buffer', 'PERSON'), ('F', 'MONEY'), ('Reduce T\uf0e0F', 'PERSON'), ('T', 'MONEY'), ('E\uf0e0T', 'ORG'), ('E+id', 'MONEY')]


============================ Sentence 391 =============================

	Reduce Fid  	$E+F	*id$	Reduce TF  	$E+T	*id$	Shift   	$E+T* 


>> Tokens are: 
[	, Reduce, Fid,  	, $, E+F, 	, *, id$, 	, Reduce, TF,  	, $, E+T, 	, *, id$, 	, Shift,   	, $, E+T, *] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('Reduce', 'PROPN'), ('F\uf0e0id', 'PROPN'), (' \t', 'SPACE'), ('$', 'NOUN'), ('E+F', 'NOUN'), ('\t', 'SPACE'), ('*', 'PUNCT'), ('id$', 'PROPN'), ('\t', 'SPACE'), ('Reduce', 'PROPN'), ('T\uf0e0F', 'PRON'), (' \t', 'SPACE'), ('$', 'NOUN'), ('E+T', 'VERB'), ('\t', 'SPACE'), ('*', 'PUNCT'), ('id$', 'PROPN'), ('\t', 'SPACE'), ('Shift', 'PROPN'), ('  \t', 'SPACE'), ('$', 'NOUN'), ('E+T', 'PROPN'), ('*', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'nsubj'), ('Reduce', 'nmod'), ('F\uf0e0id', 'compound'), (' \t', 'dobj'), ('$', 'dobj'), ('E+F', 'nmod'), ('\t', 'nmod'), ('*', 'punct'), ('id$', 'ROOT'), ('\t', 'nsubj'), ('Reduce', 'appos'), ('T\uf0e0F', 'dobj'), (' \t', 'nmod'), ('$', 'oprd'), ('E+T', 'punct'), ('\t', 'appos'), ('*', 'punct'), ('id$', 'dep'), ('\t', 'compound'), ('Shift', 'appos'), ('  \t', 'appos'), ('$', 'appos'), ('E+T', 'punct'), ('*', 'punct')]

>> Bigrams: 
[[	, Reduce], [Reduce, Fid], [Fid,  	], [ 	, $], [$, E+F], [E+F, 	], [	, *], [*, id$], [id$, 	], [	, Reduce], [Reduce, TF], [TF,  	], [ 	, $], [$, E+T], [E+T, 	], [	, *], [*, id$], [id$, 	], [	, Shift], [Shift,   	], [  	, $], [$, E+T], [E+T, *]]

>> Trigrams: 
[[	, Reduce, Fid], [Reduce, Fid,  	], [Fid,  	, $], [ 	, $, E+F], [$, E+F, 	], [E+F, 	, *], [	, *, id$], [*, id$, 	], [id$, 	, Reduce], [	, Reduce, TF], [Reduce, TF,  	], [TF,  	, $], [ 	, $, E+T], [$, E+T, 	], [E+T, 	, *], [	, *, id$], [*, id$, 	], [id$, 	, Shift], [	, Shift,   	], [Shift,   	, $], [  	, $, E+T], [$, E+T, *]]

>> Noun Phrases are: 
[$, 	Reduce, TF,  	$, *id$	Shift, $]

>> Named Entities are: 
[('Reduce T\uf0e0F', 'PERSON')]


============================ Sentence 392 =============================

	id$	Shift   	$E+T*id	$	Reduce Fid   	$E+T*F	$	Reduce TT*F   	$E+T	$	Reduce EE+T  	$E	$	Accept                                               Grammar: EE+T | T TT*F | F Fid String: id+id*id    Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#› 


>> Tokens are: 
[	, id$, 	, Shift,   	, $, E+T*id, 	, $, 	, Reduce, Fid,   	, $, E+T*F, 	, $, 	, Reduce, TT*F,   	, $, E+T, 	, $, 	, Reduce, EE+T,  	, $, E, 	, $, 	, Accept,                                               , Grammar, :, EE+T, |, T, TT*F, |, F, Fid, String, :, id+id*id,    , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('id$', 'PROPN'), ('\t', 'SPACE'), ('Shift', 'PROPN'), ('  \t', 'SPACE'), ('$', 'SYM'), ('E+T*id', 'NOUN'), ('\t', 'SPACE'), ('$', 'SYM'), ('\t', 'SPACE'), ('Reduce', 'PROPN'), ('F\uf0e0id', 'PROPN'), ('  \t', 'SPACE'), ('$', 'SYM'), ('E+T*F', 'NOUN'), ('\t', 'SPACE'), ('$', 'SYM'), ('\t', 'SPACE'), ('Reduce', 'PROPN'), ('T\uf0e0T*F', 'VERB'), ('  \t', 'SPACE'), ('$', 'NOUN'), ('E+T', 'VERB'), ('\t', 'SPACE'), ('$', 'SYM'), ('\t', 'SPACE'), ('Reduce', 'PROPN'), ('E\uf0e0E+T', 'PROPN'), (' \t', 'SPACE'), ('$', 'PROPN'), ('E', 'NOUN'), ('\t', 'SPACE'), ('$', 'PROPN'), ('\t', 'SPACE'), ('Accept', 'PROPN'), ('                                              ', 'SPACE'), ('Grammar', 'PROPN'), (':', 'PUNCT'), ('E\uf0e0E+T', 'NOUN'), ('|', 'NOUN'), ('T', 'PROPN'), ('T\uf0e0T*F', 'NOUN'), ('|', 'NOUN'), ('F', 'PROPN'), ('F\uf0e0id', 'PROPN'), ('String', 'PROPN'), (':', 'PUNCT'), ('id+id*id', 'NOUN'), ('   ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('id$', 'nmod'), ('\t', 'compound'), ('Shift', 'nsubj'), ('  \t', 'appos'), ('$', 'nmod'), ('E+T*id', 'appos'), ('\t', 'appos'), ('$', 'nmod'), ('\t', 'appos'), ('Reduce', 'ccomp'), ('F\uf0e0id', 'dobj'), ('  \t', 'nmod'), ('$', 'nmod'), ('E+T*F', 'dobj'), ('\t', 'nsubj'), ('$', 'nmod'), ('\t', 'compound'), ('Reduce', 'appos'), ('T\uf0e0T*F', 'ccomp'), ('  \t', 'compound'), ('$', 'dobj'), ('E+T', 'punct'), ('\t', 'nsubj'), ('$', 'nmod'), ('\t', 'appos'), ('Reduce', 'dobj'), ('E\uf0e0E+T', 'dobj'), (' \t', 'nmod'), ('$', 'nmod'), ('E', 'compound'), ('\t', 'dobj'), ('$', 'nmod'), ('\t', 'nsubj'), ('Accept', 'dep'), ('                                              ', 'dobj'), ('Grammar', 'dobj'), (':', 'punct'), ('E\uf0e0E+T', 'compound'), ('|', 'npadvmod'), ('T', 'compound'), ('T\uf0e0T*F', 'appos'), ('|', 'dobj'), ('F', 'compound'), ('F\uf0e0id', 'compound'), ('String', 'nsubj'), (':', 'punct'), ('id+id*id', 'compound'), ('   ', 'nummod'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'appos'), ('#', 'nmod'), ('3130006', 'npadvmod'), ('(', 'punct'), ('PS', 'nsubj'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'parataxis'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'appos'), ('‹#›', 'punct'), ('  ', 'appos'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'appos'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct')]

>> Bigrams: 
[[	, id$], [id$, 	], [	, Shift], [Shift,   	], [  	, $], [$, E+T*id], [E+T*id, 	], [	, $], [$, 	], [	, Reduce], [Reduce, Fid], [Fid,   	], [  	, $], [$, E+T*F], [E+T*F, 	], [	, $], [$, 	], [	, Reduce], [Reduce, TT*F], [TT*F,   	], [  	, $], [$, E+T], [E+T, 	], [	, $], [$, 	], [	, Reduce], [Reduce, EE+T], [EE+T,  	], [ 	, $], [$, E], [E, 	], [	, $], [$, 	], [	, Accept], [Accept,                                               ], [                                              , Grammar], [Grammar, :], [:, EE+T], [EE+T, |], [|, T], [T, TT*F], [TT*F, |], [|, F], [F, Fid], [Fid, String], [String, :], [:, id+id*id], [id+id*id,    ], [   , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›]]

>> Trigrams: 
[[	, id$, 	], [id$, 	, Shift], [	, Shift,   	], [Shift,   	, $], [  	, $, E+T*id], [$, E+T*id, 	], [E+T*id, 	, $], [	, $, 	], [$, 	, Reduce], [	, Reduce, Fid], [Reduce, Fid,   	], [Fid,   	, $], [  	, $, E+T*F], [$, E+T*F, 	], [E+T*F, 	, $], [	, $, 	], [$, 	, Reduce], [	, Reduce, TT*F], [Reduce, TT*F,   	], [TT*F,   	, $], [  	, $, E+T], [$, E+T, 	], [E+T, 	, $], [	, $, 	], [$, 	, Reduce], [	, Reduce, EE+T], [Reduce, EE+T,  	], [EE+T,  	, $], [ 	, $, E], [$, E, 	], [E, 	, $], [	, $, 	], [$, 	, Accept], [	, Accept,                                               ], [Accept,                                               , Grammar], [                                              , Grammar, :], [Grammar, :, EE+T], [:, EE+T, |], [EE+T, |, T], [|, T, TT*F], [T, TT*F, |], [TT*F, |, F], [|, F, Fid], [F, Fid, String], [Fid, String, :], [String, :, id+id*id], [:, id+id*id,    ], [id+id*id,    , Prof.], [   , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›]]

>> Noun Phrases are: 
[	id$	Shift, $E+T*id, Fid,   	$E+T*F, $	Reduce,   	$, 	$	Reduce, EE+T, Grammar, T TT*F, |, id+id*id    Prof. Jay R Dhamsaniya, PS, Unit, Basic Probability, Prof. Dixita B Kagathara, #, (CD, Unit, Theory, I]

>> Named Entities are: 
[('$E+T*F', 'PERSON'), ('Jay R Dhamsaniya', 'ORG'), ('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 393 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 394 =============================

Viable Prefix 


>> Tokens are: 
[Viable, Prefix] 

>> PoS Tags are: 
[('Viable', 'PROPN'), ('Prefix', 'PROPN')] 

>> Dependency Tags are: 
[('Viable', 'compound'), ('Prefix', 'ROOT')]

>> Bigrams: 
[[Viable, Prefix]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Viable Prefix]

>> Named Entities are: 
[]


============================ Sentence 395 =============================

The set of prefixes of right sentential forms that can appear on the stack of a shift-reduce parser are called viable prefixes. 


>> Tokens are: 
[set, prefixes, right, sentential, forms, appear, stack, shift, -, reduce, parser, called, viable, prefixes, .] 

>> PoS Tags are: 
[('set', 'NOUN'), ('prefixes', 'NOUN'), ('right', 'ADJ'), ('sentential', 'ADJ'), ('forms', 'NOUN'), ('appear', 'VERB'), ('stack', 'NOUN'), ('shift', 'NOUN'), ('-', 'PUNCT'), ('reduce', 'NOUN'), ('parser', 'NOUN'), ('called', 'VERB'), ('viable', 'ADJ'), ('prefixes', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('set', 'nsubjpass'), ('prefixes', 'pobj'), ('right', 'amod'), ('sentential', 'amod'), ('forms', 'pobj'), ('appear', 'relcl'), ('stack', 'pobj'), ('shift', 'npadvmod'), ('-', 'punct'), ('reduce', 'compound'), ('parser', 'pobj'), ('called', 'ROOT'), ('viable', 'amod'), ('prefixes', 'oprd'), ('.', 'punct')]

>> Bigrams: 
[[set, prefixes], [prefixes, right], [right, sentential], [sentential, forms], [forms, appear], [appear, stack], [stack, shift], [shift, -], [-, reduce], [reduce, parser], [parser, called], [called, viable], [viable, prefixes], [prefixes, .]]

>> Trigrams: 
[[set, prefixes, right], [prefixes, right, sentential], [right, sentential, forms], [sentential, forms, appear], [forms, appear, stack], [appear, stack, shift], [stack, shift, -], [shift, -, reduce], [-, reduce, parser], [reduce, parser, called], [parser, called, viable], [called, viable, prefixes], [viable, prefixes, .]]

>> Noun Phrases are: 
[The set, prefixes, right sentential forms, the stack, a shift-reduce parser, viable prefixes]

>> Named Entities are: 
[]


============================ Sentence 396 =============================

    Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#› 


>> Tokens are: 
[    , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›] 

>> PoS Tags are: 
[('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X')] 

>> Dependency Tags are: 
[('    ', 'compound'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'nsubj'), ('#', 'appos'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct')]

>> Bigrams: 
[[    , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›]]

>> Trigrams: 
[[    , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›]]

>> Noun Phrases are: 
[    Prof. Jay R Dhamsaniya, (PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('Jay R Dhamsaniya', 'ORG'), ('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 397 =============================

 Parsing Methods Parsing Top down parsing Bottom up parsing (Shift reduce) Back tracking Parsing without backtracking (predictive Parsing) LR parsing Operator precedence LALR   


>> Tokens are: 
[ , Parsing, Methods, Parsing, parsing, parsing, (, Shift, reduce, ), tracking, Parsing, backtracking, (, predictive, Parsing, ), LR, parsing, Operator, precedence, LALR,  ] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('Parsing', 'PROPN'), ('Methods', 'PROPN'), ('Parsing', 'VERB'), ('parsing', 'VERB'), ('parsing', 'VERB'), ('(', 'PUNCT'), ('Shift', 'NOUN'), ('reduce', 'VERB'), (')', 'PUNCT'), ('tracking', 'VERB'), ('Parsing', 'VERB'), ('backtracking', 'VERB'), ('(', 'PUNCT'), ('predictive', 'ADJ'), ('Parsing', 'PROPN'), (')', 'PUNCT'), ('LR', 'PROPN'), ('parsing', 'VERB'), ('Operator', 'PROPN'), ('precedence', 'NOUN'), ('LALR', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'compound'), ('Parsing', 'compound'), ('Methods', 'dep'), ('Parsing', 'acl'), ('parsing', 'acl'), ('parsing', 'ccomp'), ('(', 'punct'), ('Shift', 'nsubj'), ('reduce', 'ccomp'), (')', 'punct'), ('tracking', 'ROOT'), ('Parsing', 'dobj'), ('backtracking', 'pcomp'), ('(', 'punct'), ('predictive', 'amod'), ('Parsing', 'nmod'), (')', 'punct'), ('LR', 'nsubj'), ('parsing', 'parataxis'), ('Operator', 'compound'), ('precedence', 'compound'), ('LALR', 'dobj'), (' ', 'punct')]

>> Bigrams: 
[[ , Parsing], [Parsing, Methods], [Methods, Parsing], [Parsing, parsing], [parsing, parsing], [parsing, (], [(, Shift], [Shift, reduce], [reduce, )], [), tracking], [tracking, Parsing], [Parsing, backtracking], [backtracking, (], [(, predictive], [predictive, Parsing], [Parsing, )], [), LR], [LR, parsing], [parsing, Operator], [Operator, precedence], [precedence, LALR], [LALR,  ]]

>> Trigrams: 
[[ , Parsing, Methods], [Parsing, Methods, Parsing], [Methods, Parsing, parsing], [Parsing, parsing, parsing], [parsing, parsing, (], [parsing, (, Shift], [(, Shift, reduce], [Shift, reduce, )], [reduce, ), tracking], [), tracking, Parsing], [tracking, Parsing, backtracking], [Parsing, backtracking, (], [backtracking, (, predictive], [(, predictive, Parsing], [predictive, Parsing, )], [Parsing, ), LR], [), LR, parsing], [LR, parsing, Operator], [parsing, Operator, precedence], [Operator, precedence, LALR], [precedence, LALR,  ]]

>> Noun Phrases are: 
[Top, Bottom, Shift, predictive Parsing) LR, Operator precedence LALR]

>> Named Entities are: 
[('Bottom', 'PERSON')]


============================ Sentence 398 =============================

CLR  SLR   


>> Tokens are: 
[CLR,  , SLR,  ] 

>> PoS Tags are: 
[('CLR', 'PROPN'), (' ', 'SPACE'), ('SLR', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('CLR', 'ROOT'), (' ', 'appos'), ('SLR', 'compound'), (' ', 'appos')]

>> Bigrams: 
[[CLR,  ], [ , SLR], [SLR,  ]]

>> Trigrams: 
[[CLR,  , SLR], [ , SLR,  ]]

>> Noun Phrases are: 
[CLR]

>> Named Entities are: 
[('CLR', 'ORG'), ('SLR', 'ORG')]


============================ Sentence 399 =============================

Recursive  descent  LL(1)        


>> Tokens are: 
[Recursive,  , descent,  , LL(1, ),       ] 

>> PoS Tags are: 
[('Recursive', 'PROPN'), (' ', 'SPACE'), ('descent', 'NOUN'), (' ', 'SPACE'), ('LL(1', 'NOUN'), (')', 'PUNCT'), ('      ', 'SPACE')] 

>> Dependency Tags are: 
[('Recursive', 'compound'), (' ', 'poss'), ('descent', 'appos'), (' ', 'compound'), ('LL(1', 'appos'), (')', 'punct'), ('      ', 'ROOT')]

>> Bigrams: 
[[Recursive,  ], [ , descent], [descent,  ], [ , LL(1], [LL(1, )], [),       ]]

>> Trigrams: 
[[Recursive,  , descent], [ , descent,  ], [descent,  , LL(1], [ , LL(1, )], [LL(1, ),       ]]

>> Noun Phrases are: 
[descent,  LL(1]

>> Named Entities are: 
[]


============================ Sentence 400 =============================

Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara   


>> Tokens are: 
[Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara,  ] 

>> PoS Tags are: 
[('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'nsubj'), ('#', 'appos'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'dep'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'ROOT'), ('‹#›', 'punct'), ('  ', 'appos'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), (' ', 'punct')]

>> Bigrams: 
[[Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,  ]]

>> Trigrams: 
[[Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,  ]]

>> Noun Phrases are: 
[Prof. Jay R Dhamsaniya, (PS, Unit, Prof. Dixita B Kagathara]

>> Named Entities are: 
[('PS', 'ORG'), ('Dixita', 'PERSON'), ('Kagathara', 'PERSON')]


============================ Sentence 401 =============================

#2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#› 


>> Tokens are: 
[#, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›] 

>> PoS Tags are: 
[('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X')] 

>> Dependency Tags are: 
[('#', 'nmod'), ('2170701', 'nsubj'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct')]

>> Bigrams: 
[[#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›]]

>> Trigrams: 
[[#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›]]

>> Noun Phrases are: 
[(CD, Unit, Theory, I]

>> Named Entities are: 
[]


============================ Sentence 402 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 403 =============================

Operator precedence parsing Operator Grammar: 


>> Tokens are: 
[Operator, precedence, parsing, Operator, Grammar, :] 

>> PoS Tags are: 
[('Operator', 'NOUN'), ('precedence', 'NOUN'), ('parsing', 'VERB'), ('Operator', 'PROPN'), ('Grammar', 'PROPN'), (':', 'PUNCT')] 

>> Dependency Tags are: 
[('Operator', 'compound'), ('precedence', 'nsubj'), ('parsing', 'ROOT'), ('Operator', 'compound'), ('Grammar', 'dobj'), (':', 'punct')]

>> Bigrams: 
[[Operator, precedence], [precedence, parsing], [parsing, Operator], [Operator, Grammar], [Grammar, :]]

>> Trigrams: 
[[Operator, precedence, parsing], [precedence, parsing, Operator], [parsing, Operator, Grammar], [Operator, Grammar, :]]

>> Noun Phrases are: 
[Operator precedence, Operator Grammar]

>> Named Entities are: 
[('Grammar', 'PERSON')]


============================ Sentence 404 =============================

A Grammar in which there is no Є in RHS of any production or no adjacent non terminals is called operator  grammar. 


>> Tokens are: 
[Grammar, Є, RHS, production, adjacent, non, terminals, called, operator,  , grammar, .] 

>> PoS Tags are: 
[('Grammar', 'PROPN'), ('Є', 'PROPN'), ('RHS', 'PROPN'), ('production', 'NOUN'), ('adjacent', 'ADJ'), ('non', 'ADJ'), ('terminals', 'NOUN'), ('called', 'VERB'), ('operator', 'NOUN'), (' ', 'SPACE'), ('grammar', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Grammar', 'nsubjpass'), ('Є', 'attr'), ('RHS', 'pobj'), ('production', 'pobj'), ('adjacent', 'amod'), ('non', 'amod'), ('terminals', 'nsubjpass'), ('called', 'ROOT'), ('operator', 'compound'), (' ', 'compound'), ('grammar', 'oprd'), ('.', 'punct')]

>> Bigrams: 
[[Grammar, Є], [Є, RHS], [RHS, production], [production, adjacent], [adjacent, non], [non, terminals], [terminals, called], [called, operator], [operator,  ], [ , grammar], [grammar, .]]

>> Trigrams: 
[[Grammar, Є, RHS], [Є, RHS, production], [RHS, production, adjacent], [production, adjacent, non], [adjacent, non, terminals], [non, terminals, called], [terminals, called, operator], [called, operator,  ], [operator,  , grammar], [ , grammar, .]]

>> Noun Phrases are: 
[A Grammar, no Є, RHS, any production, no adjacent non terminals, operator  grammar]

>> Named Entities are: 
[('Grammar', 'PERSON'), ('RHS', 'NORP')]


============================ Sentence 405 =============================

Example: 


>> Tokens are: 
[Example, :] 

>> PoS Tags are: 
[('Example', 'NOUN'), (':', 'PUNCT')] 

>> Dependency Tags are: 
[('Example', 'ROOT'), (':', 'punct')]

>> Bigrams: 
[[Example, :]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Example]

>> Named Entities are: 
[]


============================ Sentence 406 =============================

	E EAE | (E) | id 		A + | * | - Above grammar is not operator grammar because right side EAE has consecutive non terminals. 


>> Tokens are: 
[	, E, EAE, |, (, E, ), |, d, 		, A, +, |, *, |, -, grammar, operator, grammar, right, EAE, consecutive, non, terminals, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('E\uf0e0', 'ADJ'), ('EAE', 'PROPN'), ('|', 'NOUN'), ('(', 'PUNCT'), ('E', 'NOUN'), (')', 'PUNCT'), ('|', 'NOUN'), ('d', 'NOUN'), ('\t\t', 'SPACE'), ('A\uf0e0', 'ADV'), ('+', 'ADV'), ('|', 'ADV'), ('*', 'PUNCT'), ('|', 'NOUN'), ('-', 'PUNCT'), ('grammar', 'NOUN'), ('operator', 'NOUN'), ('grammar', 'NOUN'), ('right', 'ADJ'), ('EAE', 'PROPN'), ('consecutive', 'ADJ'), ('non', 'ADJ'), ('terminals', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('E\uf0e0', 'compound'), ('EAE', 'appos'), ('|', 'advmod'), ('(', 'punct'), ('E', 'appos'), (')', 'punct'), ('|', 'appos'), ('d', 'nsubj'), ('\t\t', 'nmod'), ('A\uf0e0', 'amod'), ('+', 'prep'), ('|', 'advmod'), ('*', 'punct'), ('|', 'npadvmod'), ('-', 'punct'), ('grammar', 'nsubj'), ('operator', 'compound'), ('grammar', 'attr'), ('right', 'amod'), ('EAE', 'nsubj'), ('consecutive', 'amod'), ('non', 'amod'), ('terminals', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[	, E], [E, EAE], [EAE, |], [|, (], [(, E], [E, )], [), |], [|, d], [d, 		], [		, A], [A, +], [+, |], [|, *], [*, |], [|, -], [-, grammar], [grammar, operator], [operator, grammar], [grammar, right], [right, EAE], [EAE, consecutive], [consecutive, non], [non, terminals], [terminals, .]]

>> Trigrams: 
[[	, E, EAE], [E, EAE, |], [EAE, |, (], [|, (, E], [(, E, )], [E, ), |], [), |, d], [|, d, 		], [d, 		, A], [		, A, +], [A, +, |], [+, |, *], [|, *, |], [*, |, -], [|, -, grammar], [-, grammar, operator], [grammar, operator, grammar], [operator, grammar, right], [grammar, right, EAE], [right, EAE, consecutive], [EAE, consecutive, non], [consecutive, non, terminals], [non, terminals, .]]

>> Noun Phrases are: 
[E EAE, (E, |, operator grammar, right side EAE, consecutive non terminals]

>> Named Entities are: 
[('EAE', 'ORG'), ('EAE', 'ORG')]


============================ Sentence 407 =============================

In operator precedence parsing we define following disjoint relations:  	Relation 	Meaning  	a<.b 


>> Tokens are: 
[operator, precedence, parsing, define, following, disjoint, relations, :,  	, Relation, 	, Meaning,  	, a<.b] 

>> PoS Tags are: 
[('operator', 'NOUN'), ('precedence', 'NOUN'), ('parsing', 'VERB'), ('define', 'VERB'), ('following', 'VERB'), ('disjoint', 'NOUN'), ('relations', 'NOUN'), (':', 'PUNCT'), (' \t', 'SPACE'), ('Relation', 'PROPN'), ('\t', 'SPACE'), ('Meaning', 'VERB'), (' \t', 'SPACE'), ('a<.b', 'PROPN')] 

>> Dependency Tags are: 
[('operator', 'compound'), ('precedence', 'nsubj'), ('parsing', 'pcomp'), ('define', 'ccomp'), ('following', 'xcomp'), ('disjoint', 'compound'), ('relations', 'dobj'), (':', 'punct'), (' \t', 'compound'), ('Relation', 'compound'), ('\t', 'nsubj'), ('Meaning', 'ROOT'), (' \t', 'compound'), ('a<.b', 'dobj')]

>> Bigrams: 
[[operator, precedence], [precedence, parsing], [parsing, define], [define, following], [following, disjoint], [disjoint, relations], [relations, :], [:,  	], [ 	, Relation], [Relation, 	], [	, Meaning], [Meaning,  	], [ 	, a<.b]]

>> Trigrams: 
[[operator, precedence, parsing], [precedence, parsing, define], [parsing, define, following], [define, following, disjoint], [following, disjoint, relations], [disjoint, relations, :], [relations, :,  	], [:,  	, Relation], [ 	, Relation, 	], [Relation, 	, Meaning], [	, Meaning,  	], [Meaning,  	, a<.b]]

>> Noun Phrases are: 
[operator precedence, we, disjoint relations,  	a<.b]

>> Named Entities are: 
[]


============================ Sentence 408 =============================

	a “yields precedence to” b  	a= 


>> Tokens are: 
[	, “, yields, precedence, ”, b,  	, =] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('“', 'PUNCT'), ('yields', 'NOUN'), ('precedence', 'NOUN'), ('”', 'PUNCT'), ('b', 'NOUN'), (' \t', 'SPACE'), ('=', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'nsubj'), ('“', 'punct'), ('yields', 'ROOT'), ('precedence', 'advmod'), ('”', 'punct'), ('b', 'punct'), (' \t', 'appos'), ('=', 'punct')]

>> Bigrams: 
[[	, “], [“, yields], [yields, precedence], [precedence, ”], [”, b], [b,  	], [ 	, =]]

>> Trigrams: 
[[	, “, yields], [“, yields, precedence], [yields, precedence, ”], [precedence, ”, b], [”, b,  	], [b,  	, =]]

>> Noun Phrases are: 
[	a “yields]

>> Named Entities are: 
[]


============================ Sentence 409 =============================

b 


>> Tokens are: 
[b] 

>> PoS Tags are: 
[('b', 'X')] 

>> Dependency Tags are: 
[('b', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 410 =============================

	a “has the same precedence as” b  	a.>b	a “takes precedence over” b     Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[	, “, precedence, ”, b,  	, a.>b, 	, “, takes, precedence, ”, b,     , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('“', 'PUNCT'), ('precedence', 'NOUN'), ('”', 'PUNCT'), ('b', 'NOUN'), (' \t', 'SPACE'), ('a.>b', 'NOUN'), ('\t', 'SPACE'), ('“', 'PUNCT'), ('takes', 'VERB'), ('precedence', 'NOUN'), ('”', 'PUNCT'), ('b', 'PROPN'), ('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('\t', 'nsubj'), ('“', 'punct'), ('precedence', 'dobj'), ('”', 'punct'), ('b', 'meta'), (' \t', 'nummod'), ('a.>b', 'dep'), ('\t', 'dobj'), ('“', 'punct'), ('takes', 'ccomp'), ('precedence', 'dobj'), ('”', 'punct'), ('b', 'meta'), ('    ', 'compound'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'dative'), ('#', 'npadvmod'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'conj'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[	, “], [“, precedence], [precedence, ”], [”, b], [b,  	], [ 	, a.>b], [a.>b, 	], [	, “], [“, takes], [takes, precedence], [precedence, ”], [”, b], [b,     ], [    , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[	, “, precedence], [“, precedence, ”], [precedence, ”, b], [”, b,  	], [b,  	, a.>b], [ 	, a.>b, 	], [a.>b, 	, “], [	, “, takes], [“, takes, precedence], [takes, precedence, ”], [precedence, ”, b], [”, b,     ], [b,     , Prof.], [    , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[the same precedence, precedence, b     Prof. Jay R Dhamsaniya, (PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 411 =============================

Precedence & associativity of operators 	Operator	Precedence	Associative 	↑	1	right  	*, /	2	left 	+, -	3	left     Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) 


>> Tokens are: 
[Precedence, &, associativity, operators, 	, Operator, 	, Precedence, 	, Associative, 	, ↑, 	, 1, 	, right,  	, *, ,, /, 	, 2, 	, left, 	, +, ,, -, 	, 3, 	, left,     , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, )] 

>> PoS Tags are: 
[('Precedence', 'PROPN'), ('&', 'CCONJ'), ('associativity', 'NOUN'), ('operators', 'NOUN'), ('\t', 'SPACE'), ('Operator', 'PROPN'), ('\t', 'SPACE'), ('Precedence', 'PROPN'), ('\t', 'SPACE'), ('Associative', 'PROPN'), ('\t', 'SPACE'), ('↑', 'PROPN'), ('\t', 'SPACE'), ('1', 'NUM'), ('\t', 'SPACE'), ('right', 'NOUN'), (' \t', 'SPACE'), ('*', 'PUNCT'), (',', 'PUNCT'), ('/', 'SYM'), ('\t', 'SPACE'), ('2', 'NUM'), ('\t', 'SPACE'), ('left', 'VERB'), ('\t', 'SPACE'), ('+', 'ADV'), (',', 'PUNCT'), ('-', 'PUNCT'), ('\t', 'SPACE'), ('3', 'NUM'), ('\t', 'SPACE'), ('left', 'VERB'), ('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('Precedence', 'nmod'), ('&', 'cc'), ('associativity', 'conj'), ('operators', 'pobj'), ('\t', 'compound'), ('Operator', 'compound'), ('\t', 'compound'), ('Precedence', 'compound'), ('\t', 'compound'), ('Associative', 'compound'), ('\t', 'compound'), ('↑', 'nmod'), ('\t', 'nmod'), ('1', 'nummod'), ('\t', 'appos'), ('right', 'compound'), (' \t', 'appos'), ('*', 'punct'), (',', 'punct'), ('/', 'punct'), ('\t', 'nmod'), ('2', 'nummod'), ('\t', 'nsubj'), ('left', 'ccomp'), ('\t', 'dobj'), ('+', 'oprd'), (',', 'punct'), ('-', 'punct'), ('\t', 'nmod'), ('3', 'nummod'), ('\t', 'nsubj'), ('left', 'ROOT'), ('    ', 'compound'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'dobj'), ('#', 'nmod'), ('3130006', 'npadvmod'), ('(', 'punct'), ('PS', 'nsubj'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'parataxis'), ('  ', 'dobj'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'appos'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'appos'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'dep'), ('Unit', 'npadvmod'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'xcomp'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct')]

>> Bigrams: 
[[Precedence, &], [&, associativity], [associativity, operators], [operators, 	], [	, Operator], [Operator, 	], [	, Precedence], [Precedence, 	], [	, Associative], [Associative, 	], [	, ↑], [↑, 	], [	, 1], [1, 	], [	, right], [right,  	], [ 	, *], [*, ,], [,, /], [/, 	], [	, 2], [2, 	], [	, left], [left, 	], [	, +], [+, ,], [,, -], [-, 	], [	, 3], [3, 	], [	, left], [left,     ], [    , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )]]

>> Trigrams: 
[[Precedence, &, associativity], [&, associativity, operators], [associativity, operators, 	], [operators, 	, Operator], [	, Operator, 	], [Operator, 	, Precedence], [	, Precedence, 	], [Precedence, 	, Associative], [	, Associative, 	], [Associative, 	, ↑], [	, ↑, 	], [↑, 	, 1], [	, 1, 	], [1, 	, right], [	, right,  	], [right,  	, *], [ 	, *, ,], [*, ,, /], [,, /, 	], [/, 	, 2], [	, 2, 	], [2, 	, left], [	, left, 	], [left, 	, +], [	, +, ,], [+, ,, -], [,, -, 	], [-, 	, 3], [	, 3, 	], [3, 	, left], [	, left,     ], [left,     , Prof.], [    , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )]]

>> Noun Phrases are: 
[operators,     Prof. Jay R Dhamsaniya, PS, Unit, Basic Probability, Prof. Dixita B Kagathara, #, (CD, Theory, I]

>> Named Entities are: 
[('Precedence &', 'ORG'), ('3', 'CARDINAL'), ('Jay R Dhamsaniya', 'ORG'), ('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 412 =============================

‹#›   


>> Tokens are: 
[‹#›,  ] 

>> PoS Tags are: 
[('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('‹#›', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[‹#›,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 413 =============================

Steps of operator precedence parsing Find Leading and trailing of non terminal Establish relation Creation of table Parse the string 


>> Tokens are: 
[Steps, operator, precedence, parsing, Find, Leading, trailing, non, terminal, Establish, relation, Creation, table, Parse, string] 

>> PoS Tags are: 
[('Steps', 'NOUN'), ('operator', 'NOUN'), ('precedence', 'NOUN'), ('parsing', 'VERB'), ('Find', 'VERB'), ('Leading', 'VERB'), ('trailing', 'NOUN'), ('non', 'ADJ'), ('terminal', 'ADJ'), ('Establish', 'PROPN'), ('relation', 'NOUN'), ('Creation', 'PROPN'), ('table', 'NOUN'), ('Parse', 'VERB'), ('string', 'NOUN')] 

>> Dependency Tags are: 
[('Steps', 'ROOT'), ('operator', 'compound'), ('precedence', 'pobj'), ('parsing', 'acl'), ('Find', 'xcomp'), ('Leading', 'dobj'), ('trailing', 'conj'), ('non', 'amod'), ('terminal', 'amod'), ('Establish', 'compound'), ('relation', 'compound'), ('Creation', 'pobj'), ('table', 'pobj'), ('Parse', 'appos'), ('string', 'appos')]

>> Bigrams: 
[[Steps, operator], [operator, precedence], [precedence, parsing], [parsing, Find], [Find, Leading], [Leading, trailing], [trailing, non], [non, terminal], [terminal, Establish], [Establish, relation], [relation, Creation], [Creation, table], [table, Parse], [Parse, string]]

>> Trigrams: 
[[Steps, operator, precedence], [operator, precedence, parsing], [precedence, parsing, Find], [parsing, Find, Leading], [Find, Leading, trailing], [Leading, trailing, non], [trailing, non, terminal], [non, terminal, Establish], [terminal, Establish, relation], [Establish, relation, Creation], [relation, Creation, table], [Creation, table, Parse], [table, Parse, string]]

>> Noun Phrases are: 
[Steps, operator precedence, trailing, non terminal Establish relation Creation, table, the string]

>> Named Entities are: 
[('Find Leading', 'PERSON'), ('Establish', 'NORP'), ('Parse', 'ORG')]


============================ Sentence 414 =============================

    Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[    , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('    ', 'nummod'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'nsubj'), ('#', 'appos'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[    , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[    , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[    Prof. Jay R Dhamsaniya, (PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 415 =============================

Leading & Trailing Leading:- Leading of a non terminal is the first terminal or operator in production of that non terminal. 


>> Tokens are: 
[Leading, &, Trailing, Leading:-, Leading, non, terminal, terminal, operator, production, non, terminal, .] 

>> PoS Tags are: 
[('Leading', 'VERB'), ('&', 'CCONJ'), ('Trailing', 'PROPN'), ('Leading:-', 'NOUN'), ('Leading', 'VERB'), ('non', 'ADJ'), ('terminal', 'NOUN'), ('terminal', 'NOUN'), ('operator', 'NOUN'), ('production', 'NOUN'), ('non', 'ADJ'), ('terminal', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Leading', 'amod'), ('&', 'cc'), ('Trailing', 'conj'), ('Leading:-', 'nsubj'), ('Leading', 'acl'), ('non', 'amod'), ('terminal', 'pobj'), ('terminal', 'attr'), ('operator', 'conj'), ('production', 'pobj'), ('non', 'amod'), ('terminal', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Leading, &], [&, Trailing], [Trailing, Leading:-], [Leading:-, Leading], [Leading, non], [non, terminal], [terminal, terminal], [terminal, operator], [operator, production], [production, non], [non, terminal], [terminal, .]]

>> Trigrams: 
[[Leading, &, Trailing], [&, Trailing, Leading:-], [Trailing, Leading:-, Leading], [Leading:-, Leading, non], [Leading, non, terminal], [non, terminal, terminal], [terminal, terminal, operator], [terminal, operator, production], [operator, production, non], [production, non, terminal], [non, terminal, .]]

>> Noun Phrases are: 
[Leading & Trailing Leading:-, a non terminal, the first terminal, operator, production, that non terminal]

>> Named Entities are: 
[('Leading & Trailing', 'ORG'), ('first', 'ORDINAL')]


============================ Sentence 416 =============================

Trailing:- Trailing of a non terminal is the last terminal or operator in production of that non terminal. 


>> Tokens are: 
[Trailing:-, Trailing, non, terminal, terminal, operator, production, non, terminal, .] 

>> PoS Tags are: 
[('Trailing:-', 'NOUN'), ('Trailing', 'VERB'), ('non', 'ADJ'), ('terminal', 'NOUN'), ('terminal', 'NOUN'), ('operator', 'NOUN'), ('production', 'NOUN'), ('non', 'ADJ'), ('terminal', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Trailing:-', 'nsubj'), ('Trailing', 'acl'), ('non', 'amod'), ('terminal', 'pobj'), ('terminal', 'attr'), ('operator', 'conj'), ('production', 'pobj'), ('non', 'amod'), ('terminal', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Trailing:-, Trailing], [Trailing, non], [non, terminal], [terminal, terminal], [terminal, operator], [operator, production], [production, non], [non, terminal], [terminal, .]]

>> Trigrams: 
[[Trailing:-, Trailing, non], [Trailing, non, terminal], [non, terminal, terminal], [terminal, terminal, operator], [terminal, operator, production], [operator, production, non], [production, non, terminal], [non, terminal, .]]

>> Noun Phrases are: 
[Trailing:-, a non terminal, the last terminal, operator, production, that non terminal]

>> Named Entities are: 
[]


============================ Sentence 417 =============================

Example: 	EE+T | T 		TT*F | F 		Fid  	 


>> Tokens are: 
[Example, :, 	, EE+T, |, T, 		, TT*F, |, F, 		, Fid,  	] 

>> PoS Tags are: 
[('Example', 'NOUN'), (':', 'PUNCT'), ('\t', 'SPACE'), ('E\uf0e0E+T', 'PROPN'), ('|', 'NOUN'), ('T', 'NOUN'), ('\t\t', 'SPACE'), ('T\uf0e0T*F', 'PROPN'), ('|', 'NOUN'), ('F', 'PROPN'), ('\t\t', 'SPACE'), ('F\uf0e0id', 'PROPN'), (' \t', 'SPACE')] 

>> Dependency Tags are: 
[('Example', 'ROOT'), (':', 'punct'), ('\t', 'compound'), ('E\uf0e0E+T', 'compound'), ('|', 'appos'), ('T', 'compound'), ('\t\t', 'relcl'), ('T\uf0e0T*F', 'appos'), ('|', 'nmod'), ('F', 'compound'), ('\t\t', 'compound'), ('F\uf0e0id', 'dobj'), (' \t', 'appos')]

>> Bigrams: 
[[Example, :], [:, 	], [	, EE+T], [EE+T, |], [|, T], [T, 		], [		, TT*F], [TT*F, |], [|, F], [F, 		], [		, Fid], [Fid,  	]]

>> Trigrams: 
[[Example, :, 	], [:, 	, EE+T], [	, EE+T, |], [EE+T, |, T], [|, T, 		], [T, 		, TT*F], [		, TT*F, |], [TT*F, |, F], [|, F, 		], [F, 		, Fid], [		, Fid,  	]]

>> Noun Phrases are: 
[Example, 	EE+T |, TT*F, F 		Fid]

>> Named Entities are: 
[]


============================ Sentence 418 =============================

Non terminal 	Leading	Trailing  	E	{+,*,id}	{+,*,id}  	T 


>> Tokens are: 
[Non, terminal, 	, Leading, 	, Trailing,  	, E, 	, {, +, ,, *, ,, d, }, 	, {, +, ,, *, ,, d, },  	, T] 

>> PoS Tags are: 
[('Non', 'PROPN'), ('terminal', 'NOUN'), ('\t', 'SPACE'), ('Leading', 'PROPN'), ('\t', 'SPACE'), ('Trailing', 'VERB'), (' \t', 'SPACE'), ('E', 'NOUN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('+', 'NOUN'), (',', 'PUNCT'), ('*', 'PUNCT'), (',', 'PUNCT'), ('d', 'X'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('+', 'NOUN'), (',', 'PUNCT'), ('*', 'PUNCT'), (',', 'PUNCT'), ('d', 'NOUN'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('T', 'NOUN')] 

>> Dependency Tags are: 
[('Non', 'compound'), ('terminal', 'amod'), ('\t', 'compound'), ('Leading', 'compound'), ('\t', 'nmod'), ('Trailing', 'amod'), (' \t', 'compound'), ('E', 'compound'), ('\t', 'ROOT'), ('{', 'punct'), ('+', 'appos'), (',', 'punct'), ('*', 'punct'), (',', 'punct'), ('d', 'appos'), ('}', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('+', 'appos'), (',', 'punct'), ('*', 'punct'), (',', 'punct'), ('d', 'appos'), ('}', 'punct'), (' \t', 'compound'), ('T', 'appos')]

>> Bigrams: 
[[Non, terminal], [terminal, 	], [	, Leading], [Leading, 	], [	, Trailing], [Trailing,  	], [ 	, E], [E, 	], [	, {], [{, +], [+, ,], [,, *], [*, ,], [,, d], [d, }], [}, 	], [	, {], [{, +], [+, ,], [,, *], [*, ,], [,, d], [d, }], [},  	], [ 	, T]]

>> Trigrams: 
[[Non, terminal, 	], [terminal, 	, Leading], [	, Leading, 	], [Leading, 	, Trailing], [	, Trailing,  	], [Trailing,  	, E], [ 	, E, 	], [E, 	, {], [	, {, +], [{, +, ,], [+, ,, *], [,, *, ,], [*, ,, d], [,, d, }], [d, }, 	], [}, 	, {], [	, {, +], [{, +, ,], [+, ,, *], [,, *, ,], [*, ,, d], [,, d, }], [d, },  	], [},  	, T]]

>> Noun Phrases are: 
[+, +, id,  	T]

>> Named Entities are: 
[]


============================ Sentence 419 =============================

	{*,id}	{*,id}  	F	{id}	{id}           Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[	, {, *, ,, d, }, 	, {, *, ,, d, },  	, F, 	, {, d, }, 	, {, d, },           , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('{', 'PUNCT'), ('*', 'PUNCT'), (',', 'PUNCT'), ('d', 'X'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('*', 'PUNCT'), (',', 'PUNCT'), ('d', 'NOUN'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('F', 'PROPN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('d', 'PROPN'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('d', 'NOUN'), ('}', 'PUNCT'), ('          ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('\t', 'nsubj'), ('{', 'punct'), ('*', 'punct'), (',', 'punct'), ('d', 'appos'), ('}', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('*', 'punct'), (',', 'punct'), ('d', 'appos'), ('}', 'punct'), (' \t', 'compound'), ('F', 'compound'), ('\t', 'appos'), ('{', 'punct'), ('d', 'appos'), ('}', 'punct'), ('\t', 'conj'), ('{', 'punct'), ('d', 'appos'), ('}', 'punct'), ('          ', 'compound'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'appos'), ('#', 'nmod'), ('3130006', 'appos'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'dobj'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[	, {], [{, *], [*, ,], [,, d], [d, }], [}, 	], [	, {], [{, *], [*, ,], [,, d], [d, }], [},  	], [ 	, F], [F, 	], [	, {], [{, d], [d, }], [}, 	], [	, {], [{, d], [d, }], [},           ], [          , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[	, {, *], [{, *, ,], [*, ,, d], [,, d, }], [d, }, 	], [}, 	, {], [	, {, *], [{, *, ,], [*, ,, d], [,, d, }], [d, },  	], [},  	, F], [ 	, F, 	], [F, 	, {], [	, {, d], [{, d, }], [d, }, 	], [}, 	, {], [	, {, d], [{, d, }], [d, },           ], [},           , Prof.], [          , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[id, id, id,           Prof. Jay R Dhamsaniya, PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 420 =============================

Rules to establish a relation For a = b, , where  is  or a single non terminal   


>> Tokens are: 
[Rules, establish, relation, =, b, ,, ,,  ,  , single, non, terminal,  ] 

>> PoS Tags are: 
[('Rules', 'NOUN'), ('establish', 'VERB'), ('relation', 'NOUN'), ('=', 'NOUN'), ('b', 'NOUN'), (',', 'PUNCT'), (',', 'PUNCT'), (' ', 'SPACE'), (' ', 'SPACE'), ('single', 'ADJ'), ('non', 'ADJ'), ('terminal', 'ADJ'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Rules', 'nsubj'), ('establish', 'ROOT'), ('relation', 'dobj'), ('=', 'compound'), ('b', 'pobj'), (',', 'punct'), (',', 'punct'), (' ', 'nsubj'), (' ', 'attr'), ('single', 'amod'), ('non', 'amod'), ('terminal', 'conj'), (' ', 'punct')]

>> Bigrams: 
[[Rules, establish], [establish, relation], [relation, =], [=, b], [b, ,], [,, ,], [,,  ], [ ,  ], [ , single], [single, non], [non, terminal], [terminal,  ]]

>> Trigrams: 
[[Rules, establish, relation], [establish, relation, =], [relation, =, b], [=, b, ,], [b, ,, ,], [,, ,,  ], [,,  ,  ], [ ,  , single], [ , single, non], [single, non, terminal], [non, terminal,  ]]

>> Noun Phrases are: 
[Rules, a relation, a = b]

>> Named Entities are: 
[]


============================ Sentence 421 =============================

[e.g.-- : (E)] a <.b 


>> Tokens are: 
[[, e.g.--, :, (, E, ), ], <, .b] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('e.g.--', 'X'), (':', 'PUNCT'), ('(', 'PUNCT'), ('E', 'NOUN'), (')', 'PUNCT'), (']', 'PUNCT'), ('<', 'X'), ('.b', 'PUNCT')] 

>> Dependency Tags are: 
[('[', 'punct'), ('e.g.--', 'dep'), (':', 'punct'), ('(', 'punct'), ('E', 'ROOT'), (')', 'punct'), (']', 'punct'), ('<', 'dep'), ('.b', 'punct')]

>> Bigrams: 
[[[, e.g.--], [e.g.--, :], [:, (], [(, E], [E, )], [), ]], [], <], [<, .b]]

>> Trigrams: 
[[[, e.g.--, :], [e.g.--, :, (], [:, (, E], [(, E, )], [E, ), ]], [), ], <], [], <, .b]]

>> Noun Phrases are: 
[[e.g.-- : (E]

>> Named Entities are: 
[]


============================ Sentence 422 =============================

[e.g.-- : +T] a .>b 


>> Tokens are: 
[[, e.g.--, :, +, T, ], .>b] 

>> PoS Tags are: 
[('[', 'X'), ('e.g.--', 'X'), (':', 'PUNCT'), ('+', 'PUNCT'), ('T', 'NOUN'), (']', 'PUNCT'), ('.>b', 'NOUN')] 

>> Dependency Tags are: 
[('[', 'punct'), ('e.g.--', 'dep'), (':', 'punct'), ('+', 'ROOT'), ('T', 'npadvmod'), (']', 'punct'), ('.>b', 'punct')]

>> Bigrams: 
[[[, e.g.--], [e.g.--, :], [:, +], [+, T], [T, ]], [], .>b]]

>> Trigrams: 
[[[, e.g.--, :], [e.g.--, :, +], [:, +, T], [+, T, ]], [T, ], .>b]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 423 =============================

[e.g.-- : E+] $ <. 


>> Tokens are: 
[[, e.g.--, :, E+, ], $, <, .] 

>> PoS Tags are: 
[('[', 'X'), ('e.g.--', 'X'), (':', 'PUNCT'), ('E+', 'ADJ'), (']', 'PUNCT'), ('$', 'SYM'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('[', 'dep'), ('e.g.--', 'dep'), (':', 'punct'), ('E+', 'ROOT'), (']', 'punct'), ('$', 'nmod'), ('<', 'npadvmod'), ('.', 'punct')]

>> Bigrams: 
[[[, e.g.--], [e.g.--, :], [:, E+], [E+, ]], [], $], [$, <], [<, .]]

>> Trigrams: 
[[[, e.g.--, :], [e.g.--, :, E+], [:, E+, ]], [E+, ], $], [], $, <], [$, <, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 424 =============================

Leading (start symbol) 


>> Tokens are: 
[Leading, (, start, symbol, )] 

>> PoS Tags are: 
[('Leading', 'VERB'), ('(', 'PUNCT'), ('start', 'VERB'), ('symbol', 'NOUN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('Leading', 'ROOT'), ('(', 'punct'), ('start', 'parataxis'), ('symbol', 'dobj'), (')', 'punct')]

>> Bigrams: 
[[Leading, (], [(, start], [start, symbol], [symbol, )]]

>> Trigrams: 
[[Leading, (, start], [(, start, symbol], [start, symbol, )]]

>> Noun Phrases are: 
[symbol]

>> Named Entities are: 
[]


============================ Sentence 425 =============================

Trailing (start symbol) . 


>> Tokens are: 
[Trailing, (, start, symbol, ), .] 

>> PoS Tags are: 
[('Trailing', 'NOUN'), ('(', 'PUNCT'), ('start', 'VERB'), ('symbol', 'NOUN'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Trailing', 'ROOT'), ('(', 'punct'), ('start', 'parataxis'), ('symbol', 'dobj'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Trailing, (], [(, start], [start, symbol], [symbol, )], [), .]]

>> Trigrams: 
[[Trailing, (, start], [(, start, symbol], [start, symbol, )], [symbol, ), .]]

>> Noun Phrases are: 
[Trailing, symbol]

>> Named Entities are: 
[]


============================ Sentence 426 =============================

> $      Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[>, $,      , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('>', 'PUNCT'), ('$', 'SYM'), ('     ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('>', 'dep'), ('$', 'quantmod'), ('     ', 'nsubj'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'appos'), ('#', 'nmod'), ('3130006', 'appos'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'dobj'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[>, $], [$,      ], [     , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[>, $,      ], [$,      , Prof.], [     , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[Prof. Jay R Dhamsaniya, (PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 427 =============================

Example: Operator precedence parsing       a <.b 


>> Tokens are: 
[Example, :, Operator, precedence, parsing,       , <, .b] 

>> PoS Tags are: 
[('Example', 'NOUN'), (':', 'PUNCT'), ('Operator', 'NOUN'), ('precedence', 'NOUN'), ('parsing', 'VERB'), ('      ', 'SPACE'), ('<', 'X'), ('.b', 'PUNCT')] 

>> Dependency Tags are: 
[('Example', 'ROOT'), (':', 'punct'), ('Operator', 'compound'), ('precedence', 'nsubj'), ('parsing', 'acl'), ('      ', 'dobj'), ('<', 'dep'), ('.b', 'punct')]

>> Bigrams: 
[[Example, :], [:, Operator], [Operator, precedence], [precedence, parsing], [parsing,       ], [      , <], [<, .b]]

>> Trigrams: 
[[Example, :, Operator], [:, Operator, precedence], [Operator, precedence, parsing], [precedence, parsing,       ], [parsing,       , <], [      , <, .b]]

>> Noun Phrases are: 
[Example, Operator precedence]

>> Named Entities are: 
[]


============================ Sentence 428 =============================

    	Nonterminal 	Leading	Trailing  	E	{+,*,id}	{+,*,id}  	T 


>> Tokens are: 
[    	, Nonterminal, 	, Leading, 	, Trailing,  	, E, 	, {, +, ,, *, ,, d, }, 	, {, +, ,, *, ,, d, },  	, T] 

>> PoS Tags are: 
[('    \t', 'SPACE'), ('Nonterminal', 'PROPN'), ('\t', 'SPACE'), ('Leading', 'PROPN'), ('\t', 'SPACE'), ('Trailing', 'VERB'), (' \t', 'SPACE'), ('E', 'NOUN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('+', 'NOUN'), (',', 'PUNCT'), ('*', 'PUNCT'), (',', 'PUNCT'), ('d', 'X'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('+', 'NOUN'), (',', 'PUNCT'), ('*', 'PUNCT'), (',', 'PUNCT'), ('d', 'NOUN'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('T', 'NOUN')] 

>> Dependency Tags are: 
[('    \t', 'compound'), ('Nonterminal', 'compound'), ('\t', 'compound'), ('Leading', 'compound'), ('\t', 'compound'), ('Trailing', 'acl'), (' \t', 'compound'), ('E', 'compound'), ('\t', 'dobj'), ('{', 'punct'), ('+', 'cc'), (',', 'punct'), ('*', 'punct'), (',', 'punct'), ('d', 'meta'), ('}', 'punct'), ('\t', 'ROOT'), ('{', 'punct'), ('+', 'appos'), (',', 'punct'), ('*', 'punct'), (',', 'punct'), ('d', 'appos'), ('}', 'punct'), (' \t', 'compound'), ('T', 'appos')]

>> Bigrams: 
[[    	, Nonterminal], [Nonterminal, 	], [	, Leading], [Leading, 	], [	, Trailing], [Trailing,  	], [ 	, E], [E, 	], [	, {], [{, +], [+, ,], [,, *], [*, ,], [,, d], [d, }], [}, 	], [	, {], [{, +], [+, ,], [,, *], [*, ,], [,, d], [d, }], [},  	], [ 	, T]]

>> Trigrams: 
[[    	, Nonterminal, 	], [Nonterminal, 	, Leading], [	, Leading, 	], [Leading, 	, Trailing], [	, Trailing,  	], [Trailing,  	, E], [ 	, E, 	], [E, 	, {], [	, {, +], [{, +, ,], [+, ,, *], [,, *, ,], [*, ,, d], [,, d, }], [d, }, 	], [}, 	, {], [	, {, +], [{, +, ,], [+, ,, *], [,, *, ,], [*, ,, d], [,, d, }], [d, },  	], [},  	, T]]

>> Noun Phrases are: 
[+, id,  	T]

>> Named Entities are: 
[]


============================ Sentence 429 =============================

	{*,id}	{*,id}  	F	{id}	{id}   


>> Tokens are: 
[	, {, *, ,, d, }, 	, {, *, ,, d, },  	, F, 	, {, d, }, 	, {, d, },  ] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('{', 'PUNCT'), ('*', 'PUNCT'), (',', 'PUNCT'), ('d', 'X'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('*', 'PUNCT'), (',', 'PUNCT'), ('d', 'NOUN'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('F', 'PROPN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('d', 'PROPN'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('d', 'NOUN'), ('}', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('{', 'punct'), ('*', 'punct'), (',', 'punct'), ('d', 'appos'), ('}', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('*', 'punct'), (',', 'punct'), ('d', 'appos'), ('}', 'punct'), (' \t', 'compound'), ('F', 'compound'), ('\t', 'appos'), ('{', 'punct'), ('d', 'appos'), ('}', 'punct'), ('\t', 'conj'), ('{', 'punct'), ('d', 'appos'), ('}', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[	, {], [{, *], [*, ,], [,, d], [d, }], [}, 	], [	, {], [{, *], [*, ,], [,, d], [d, }], [},  	], [ 	, F], [F, 	], [	, {], [{, d], [d, }], [}, 	], [	, {], [{, d], [d, }], [},  ]]

>> Trigrams: 
[[	, {, *], [{, *, ,], [*, ,, d], [,, d, }], [d, }, 	], [}, 	, {], [	, {, *], [{, *, ,], [*, ,, d], [,, d, }], [d, },  	], [},  	, F], [ 	, F, 	], [F, 	, {], [	, {, d], [{, d, }], [d, }, 	], [}, 	, {], [	, {, d], [{, d, }], [d, },  ]]

>> Noun Phrases are: 
[id, id, id]

>> Named Entities are: 
[]


============================ Sentence 430 =============================

Step 1: Find Leading & Trailing of NT   


>> Tokens are: 
[Step, 1, :, Find, Leading, &, Trailing, NT,  ] 

>> PoS Tags are: 
[('Step', 'NOUN'), ('1', 'NUM'), (':', 'PUNCT'), ('Find', 'VERB'), ('Leading', 'VERB'), ('&', 'CCONJ'), ('Trailing', 'PROPN'), ('NT', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Step', 'dep'), ('1', 'nummod'), (':', 'punct'), ('Find', 'ROOT'), ('Leading', 'dobj'), ('&', 'cc'), ('Trailing', 'conj'), ('NT', 'pobj'), (' ', 'punct')]

>> Bigrams: 
[[Step, 1], [1, :], [:, Find], [Find, Leading], [Leading, &], [&, Trailing], [Trailing, NT], [NT,  ]]

>> Trigrams: 
[[Step, 1, :], [1, :, Find], [:, Find, Leading], [Find, Leading, &], [Leading, &, Trailing], [&, Trailing, NT], [Trailing, NT,  ]]

>> Noun Phrases are: 
[Trailing, NT]

>> Named Entities are: 
[('1', 'CARDINAL'), ('Find Leading & Trailing', 'ORG')]


============================ Sentence 431 =============================

Step 2: Establish Relation   


>> Tokens are: 
[Step, 2, :, Establish, Relation,  ] 

>> PoS Tags are: 
[('Step', 'NOUN'), ('2', 'NUM'), (':', 'PUNCT'), ('Establish', 'PROPN'), ('Relation', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Step', 'dep'), ('2', 'nummod'), (':', 'punct'), ('Establish', 'ROOT'), ('Relation', 'dobj'), (' ', 'punct')]

>> Bigrams: 
[[Step, 2], [2, :], [:, Establish], [Establish, Relation], [Relation,  ]]

>> Trigrams: 
[[Step, 2, :], [2, :, Establish], [:, Establish, Relation], [Establish, Relation,  ]]

>> Noun Phrases are: 
[Step 2: Establish, Relation]

>> Named Entities are: 
[('2', 'CARDINAL'), ('Establish Relation  ', 'ORG')]


============================ Sentence 432 =============================

E E	 Step3: Creation of Table  	 	+	* 


>> Tokens are: 
[E, E, 	 , Step3, :, Creation, Table,  	 	, +, 	, *] 

>> PoS Tags are: 
[('E\uf0e0', 'ADJ'), ('E', 'NOUN'), ('\t ', 'SPACE'), ('Step3', 'NOUN'), (':', 'PUNCT'), ('Creation', 'NOUN'), ('Table', 'PROPN'), (' \t \t', 'SPACE'), ('+', 'NOUN'), ('\t', 'SPACE'), ('*', 'PUNCT')] 

>> Dependency Tags are: 
[('E\uf0e0', 'amod'), ('E', 'compound'), ('\t ', 'compound'), ('Step3', 'ROOT'), (':', 'punct'), ('Creation', 'appos'), ('Table', 'pobj'), (' \t \t', 'appos'), ('+', 'punct'), ('\t', 'appos'), ('*', 'punct')]

>> Bigrams: 
[[E, E], [E, 	 ], [	 , Step3], [Step3, :], [:, Creation], [Creation, Table], [Table,  	 	], [ 	 	, +], [+, 	], [	, *]]

>> Trigrams: 
[[E, E, 	 ], [E, 	 , Step3], [	 , Step3, :], [Step3, :, Creation], [:, Creation, Table], [Creation, Table,  	 	], [Table,  	 	, +], [ 	 	, +, 	], [+, 	, *]]

>> Noun Phrases are: 
[E E	 Step3, Creation, Table]

>> Named Entities are: 
[('Creation of Table  \t \t', 'ORG')]


============================ Sentence 433 =============================

	id	$  	+	. 


>> Tokens are: 
[	, d, 	, $,  	, +, 	, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('d', 'PROPN'), ('\t', 'SPACE'), ('$', 'SYM'), (' \t', 'SPACE'), ('+', 'PROPN'), ('\t', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'nmod'), ('d', 'compound'), ('\t', 'ROOT'), ('$', 'nmod'), (' \t', 'appos'), ('+', 'prep'), ('\t', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[	, d], [d, 	], [	, $], [$,  	], [ 	, +], [+, 	], [	, .]]

>> Trigrams: 
[[	, d, 	], [d, 	, $], [	, $,  	], [$,  	, +], [ 	, +, 	], [+, 	, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 434 =============================

> 


>> Tokens are: 
[>] 

>> PoS Tags are: 
[('>', 'X')] 

>> Dependency Tags are: 
[('>', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 435 =============================

	<. 


>> Tokens are: 
[	, <, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('<', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[	, <], [<, .]]

>> Trigrams: 
[[	, <, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 436 =============================

	<. 


>> Tokens are: 
[	, <, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('<', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[	, <], [<, .]]

>> Trigrams: 
[[	, <, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 437 =============================

	. 


>> Tokens are: 
[	, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[	, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 438 =============================

> 


>> Tokens are: 
[>] 

>> PoS Tags are: 
[('>', 'X')] 

>> Dependency Tags are: 
[('>', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 439 =============================

	*	. 


>> Tokens are: 
[	, *, 	, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('*', 'PUNCT'), ('\t', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('*', 'punct'), ('\t', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[	, *], [*, 	], [	, .]]

>> Trigrams: 
[[	, *, 	], [*, 	, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 440 =============================

>	. 


>> Tokens are: 
[>, 	, .] 

>> PoS Tags are: 
[('>', 'X'), ('\t', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('>', 'dep'), ('\t', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[>, 	], [	, .]]

>> Trigrams: 
[[>, 	, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 441 =============================

>	<. 


>> Tokens are: 
[>, 	, <, .] 

>> PoS Tags are: 
[('>', 'X'), ('\t', 'SPACE'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('>', 'dep'), ('\t', 'ROOT'), ('<', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[>, 	], [	, <], [<, .]]

>> Trigrams: 
[[>, 	, <], [	, <, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 442 =============================

	. 


>> Tokens are: 
[	, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[	, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 443 =============================

> 


>> Tokens are: 
[>] 

>> PoS Tags are: 
[('>', 'X')] 

>> Dependency Tags are: 
[('>', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 444 =============================

	id	. 


>> Tokens are: 
[	, d, 	, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('d', 'PROPN'), ('\t', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('d', 'compound'), ('\t', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[	, d], [d, 	], [	, .]]

>> Trigrams: 
[[	, d, 	], [d, 	, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 445 =============================

> 


>> Tokens are: 
[>] 

>> PoS Tags are: 
[('>', 'X')] 

>> Dependency Tags are: 
[('>', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 446 =============================

	.>	 	. 


>> Tokens are: 
[	, ., >, 	 	, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('.', 'PUNCT'), ('>', 'X'), ('\t\xa0\t', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('.', 'punct'), ('>', 'nmod'), ('\t\xa0\t', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[	, .], [., >], [>, 	 	], [	 	, .]]

>> Trigrams: 
[[	, ., >], [., >, 	 	], [>, 	 	, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 447 =============================

> 


>> Tokens are: 
[>] 

>> PoS Tags are: 
[('>', 'X')] 

>> Dependency Tags are: 
[('>', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 448 =============================

	$	<. 


>> Tokens are: 
[	, $, 	, <, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('$', 'SYM'), ('\t', 'SPACE'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('$', 'nmod'), ('\t', 'appos'), ('<', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[	, $], [$, 	], [	, <], [<, .]]

>> Trigrams: 
[[	, $, 	], [$, 	, <], [	, <, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 449 =============================

	<. 


>> Tokens are: 
[	, <, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('<', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[	, <], [<, .]]

>> Trigrams: 
[[	, <, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 450 =============================

	<. 


>> Tokens are: 
[	, <, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('<', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[	, <], [<, .]]

>> Trigrams: 
[[	, <, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 451 =============================

	   	 				  	 				  	 				                   +T	 | T	 T T *F	 | F	 F id    Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[	   	 				  	 				  	 				                   , +, T, 	 , |, T, 	 , T, T, *, F, 	 , |, F, 	 , F, d,    , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('\t\xa0  \t \t\t\t\t  \t \t\t\t\t  \t \t\t\t\t                   ', 'SPACE'), ('+', 'SYM'), ('T', 'PROPN'), ('\t ', 'SPACE'), ('|', 'NOUN'), ('T', 'NOUN'), ('\t ', 'SPACE'), ('T\uf0e0', 'VERB'), ('T', 'PROPN'), ('*', 'PROPN'), ('F', 'PROPN'), ('\t ', 'SPACE'), ('|', 'NOUN'), ('F', 'PROPN'), ('\t ', 'SPACE'), ('F\uf0e0', 'VERB'), ('d', 'NUM'), ('   ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('\t\xa0  \t \t\t\t\t  \t \t\t\t\t  \t \t\t\t\t                   ', 'nmod'), ('+', 'cc'), ('T', 'compound'), ('\t ', 'npadvmod'), ('|', 'advmod'), ('T', 'nsubj'), ('\t ', 'ccomp'), ('T\uf0e0', 'xcomp'), ('T', 'compound'), ('*', 'punct'), ('F', 'compound'), ('\t ', 'compound'), ('|', 'npadvmod'), ('F', 'compound'), ('\t ', 'nsubj'), ('F\uf0e0', 'ccomp'), ('d', 'quantmod'), ('   ', 'nummod'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'dobj'), ('#', 'nmod'), ('3130006', 'npadvmod'), ('(', 'punct'), ('PS', 'nsubj'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'parataxis'), ('  ', 'conj'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'appos'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[	   	 				  	 				  	 				                   , +], [+, T], [T, 	 ], [	 , |], [|, T], [T, 	 ], [	 , T], [T, T], [T, *], [*, F], [F, 	 ], [	 , |], [|, F], [F, 	 ], [	 , F], [F, d], [d,    ], [   , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[	   	 				  	 				  	 				                   , +, T], [+, T, 	 ], [T, 	 , |], [	 , |, T], [|, T, 	 ], [T, 	 , T], [	 , T, T], [T, T, *], [T, *, F], [*, F, 	 ], [F, 	 , |], [	 , |, F], [|, F, 	 ], [F, 	 , F], [	 , F, d], [F, d,    ], [d,    , Prof.], [   , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[T, id    Prof. Jay R Dhamsaniya, PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #, (CD, Unit, Theory, I]

>> Named Entities are: 
[('Jay R Dhamsaniya', 'ORG'), ('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 452 =============================

Example: Operator precedence parsing       a .>b 


>> Tokens are: 
[Example, :, Operator, precedence, parsing,       , .>b] 

>> PoS Tags are: 
[('Example', 'NOUN'), (':', 'PUNCT'), ('Operator', 'NOUN'), ('precedence', 'NOUN'), ('parsing', 'VERB'), ('      ', 'SPACE'), ('.>b', 'NOUN')] 

>> Dependency Tags are: 
[('Example', 'ROOT'), (':', 'punct'), ('Operator', 'compound'), ('precedence', 'appos'), ('parsing', 'acl'), ('      ', 'dobj'), ('.>b', 'appos')]

>> Bigrams: 
[[Example, :], [:, Operator], [Operator, precedence], [precedence, parsing], [parsing,       ], [      , .>b]]

>> Trigrams: 
[[Example, :, Operator], [:, Operator, precedence], [Operator, precedence, parsing], [precedence, parsing,       ], [parsing,       , .>b]]

>> Noun Phrases are: 
[Example, Operator precedence, a .>b]

>> Named Entities are: 
[]


============================ Sentence 453 =============================

    	Nonterminal 	Leading	Trailing  	E	{+,*,id}	{+,*,id}  	T 


>> Tokens are: 
[    	, Nonterminal, 	, Leading, 	, Trailing,  	, E, 	, {, +, ,, *, ,, d, }, 	, {, +, ,, *, ,, d, },  	, T] 

>> PoS Tags are: 
[('    \t', 'SPACE'), ('Nonterminal', 'PROPN'), ('\t', 'SPACE'), ('Leading', 'PROPN'), ('\t', 'SPACE'), ('Trailing', 'VERB'), (' \t', 'SPACE'), ('E', 'NOUN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('+', 'NOUN'), (',', 'PUNCT'), ('*', 'PUNCT'), (',', 'PUNCT'), ('d', 'X'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('+', 'NOUN'), (',', 'PUNCT'), ('*', 'PUNCT'), (',', 'PUNCT'), ('d', 'NOUN'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('T', 'NOUN')] 

>> Dependency Tags are: 
[('    \t', 'npadvmod'), ('Nonterminal', 'compound'), ('\t', 'compound'), ('Leading', 'compound'), ('\t', 'compound'), ('Trailing', 'ROOT'), (' \t', 'compound'), ('E', 'compound'), ('\t', 'dobj'), ('{', 'punct'), ('+', 'cc'), (',', 'punct'), ('*', 'punct'), (',', 'punct'), ('d', 'meta'), ('}', 'punct'), ('\t', 'conj'), ('{', 'punct'), ('+', 'cc'), (',', 'punct'), ('*', 'punct'), (',', 'punct'), ('d', 'conj'), ('}', 'punct'), (' \t', 'compound'), ('T', 'appos')]

>> Bigrams: 
[[    	, Nonterminal], [Nonterminal, 	], [	, Leading], [Leading, 	], [	, Trailing], [Trailing,  	], [ 	, E], [E, 	], [	, {], [{, +], [+, ,], [,, *], [*, ,], [,, d], [d, }], [}, 	], [	, {], [{, +], [+, ,], [,, *], [*, ,], [,, d], [d, }], [},  	], [ 	, T]]

>> Trigrams: 
[[    	, Nonterminal, 	], [Nonterminal, 	, Leading], [	, Leading, 	], [Leading, 	, Trailing], [	, Trailing,  	], [Trailing,  	, E], [ 	, E, 	], [E, 	, {], [	, {, +], [{, +, ,], [+, ,, *], [,, *, ,], [*, ,, d], [,, d, }], [d, }, 	], [}, 	, {], [	, {, +], [{, +, ,], [+, ,, *], [,, *, ,], [*, ,, d], [,, d, }], [d, },  	], [},  	, T]]

>> Noun Phrases are: 
[,*,id,  	T]

>> Named Entities are: 
[]


============================ Sentence 454 =============================

	{*,id}	{*,id}  	F	{id}	{id}  Step2: Establish Relation   


>> Tokens are: 
[	, {, *, ,, d, }, 	, {, *, ,, d, },  	, F, 	, {, d, }, 	, {, d, },  , Step2, :, Establish, Relation,  ] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('{', 'PUNCT'), ('*', 'PUNCT'), (',', 'PUNCT'), ('d', 'X'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('*', 'PUNCT'), (',', 'PUNCT'), ('d', 'NOUN'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('F', 'PROPN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('d', 'PROPN'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('d', 'NOUN'), ('}', 'PUNCT'), (' ', 'SPACE'), ('Step2', 'ADP'), (':', 'PUNCT'), ('Establish', 'PROPN'), ('Relation', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('\t', 'nsubj'), ('{', 'punct'), ('*', 'punct'), (',', 'punct'), ('d', 'appos'), ('}', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('*', 'punct'), (',', 'punct'), ('d', 'appos'), ('}', 'punct'), (' \t', 'compound'), ('F', 'compound'), ('\t', 'appos'), ('{', 'punct'), ('d', 'appos'), ('}', 'punct'), ('\t', 'conj'), ('{', 'punct'), ('d', 'appos'), ('}', 'punct'), (' ', 'prep'), ('Step2', 'ROOT'), (':', 'punct'), ('Establish', 'compound'), ('Relation', 'npadvmod'), (' ', 'punct')]

>> Bigrams: 
[[	, {], [{, *], [*, ,], [,, d], [d, }], [}, 	], [	, {], [{, *], [*, ,], [,, d], [d, }], [},  	], [ 	, F], [F, 	], [	, {], [{, d], [d, }], [}, 	], [	, {], [{, d], [d, }], [},  ], [ , Step2], [Step2, :], [:, Establish], [Establish, Relation], [Relation,  ]]

>> Trigrams: 
[[	, {, *], [{, *, ,], [*, ,, d], [,, d, }], [d, }, 	], [}, 	, {], [	, {, *], [{, *, ,], [*, ,, d], [,, d, }], [d, },  	], [},  	, F], [ 	, F, 	], [F, 	, {], [	, {, d], [{, d, }], [d, }, 	], [}, 	, {], [	, {, d], [{, d, }], [d, },  ], [},  , Step2], [ , Step2, :], [Step2, :, Establish], [:, Establish, Relation], [Establish, Relation,  ]]

>> Noun Phrases are: 
[id, id, id]

>> Named Entities are: 
[('Step2', 'PERSON'), ('Establish Relation', 'ORG')]


============================ Sentence 455 =============================

E  Step3: Creation of Table  	 	+	*	id	$  	+	. 


>> Tokens are: 
[E,  , Step3, :, Creation, Table,  	 	, +, 	, *, 	, d, 	, $,  	, +, 	, .] 

>> PoS Tags are: 
[('E\uf0e0', 'ADJ'), (' ', 'SPACE'), ('Step3', 'NOUN'), (':', 'PUNCT'), ('Creation', 'NOUN'), ('Table', 'PROPN'), (' \t \t', 'SPACE'), ('+', 'NOUN'), ('\t', 'SPACE'), ('*', 'PUNCT'), ('\t', 'SPACE'), ('d', 'PROPN'), ('\t', 'SPACE'), ('$', 'SYM'), (' \t', 'SPACE'), ('+', 'PROPN'), ('\t', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('E\uf0e0', 'amod'), (' ', 'compound'), ('Step3', 'ROOT'), (':', 'punct'), ('Creation', 'appos'), ('Table', 'pobj'), (' \t \t', 'appos'), ('+', 'punct'), ('\t', 'appos'), ('*', 'punct'), ('\t', 'relcl'), ('d', 'oprd'), ('\t', 'appos'), ('$', 'nmod'), (' \t', 'appos'), ('+', 'prep'), ('\t', 'oprd'), ('.', 'punct')]

>> Bigrams: 
[[E,  ], [ , Step3], [Step3, :], [:, Creation], [Creation, Table], [Table,  	 	], [ 	 	, +], [+, 	], [	, *], [*, 	], [	, d], [d, 	], [	, $], [$,  	], [ 	, +], [+, 	], [	, .]]

>> Trigrams: 
[[E,  , Step3], [ , Step3, :], [Step3, :, Creation], [:, Creation, Table], [Creation, Table,  	 	], [Table,  	 	, +], [ 	 	, +, 	], [+, 	, *], [	, *, 	], [*, 	, d], [	, d, 	], [d, 	, $], [	, $,  	], [$,  	, +], [ 	, +, 	], [+, 	, .]]

>> Noun Phrases are: 
[E  Step3, Creation, Table, d]

>> Named Entities are: 
[('Creation of Table  \t \t', 'ORG')]


============================ Sentence 456 =============================

> 


>> Tokens are: 
[>] 

>> PoS Tags are: 
[('>', 'X')] 

>> Dependency Tags are: 
[('>', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 457 =============================

	<. 


>> Tokens are: 
[	, <, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('<', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[	, <], [<, .]]

>> Trigrams: 
[[	, <, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 458 =============================

	<. 


>> Tokens are: 
[	, <, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('<', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[	, <], [<, .]]

>> Trigrams: 
[[	, <, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 459 =============================

	. 


>> Tokens are: 
[	, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[	, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 460 =============================

> 


>> Tokens are: 
[>] 

>> PoS Tags are: 
[('>', 'X')] 

>> Dependency Tags are: 
[('>', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 461 =============================

	*	. 


>> Tokens are: 
[	, *, 	, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('*', 'PUNCT'), ('\t', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('*', 'punct'), ('\t', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[	, *], [*, 	], [	, .]]

>> Trigrams: 
[[	, *, 	], [*, 	, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 462 =============================

>	. 


>> Tokens are: 
[>, 	, .] 

>> PoS Tags are: 
[('>', 'X'), ('\t', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('>', 'dep'), ('\t', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[>, 	], [	, .]]

>> Trigrams: 
[[>, 	, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 463 =============================

>	<. 


>> Tokens are: 
[>, 	, <, .] 

>> PoS Tags are: 
[('>', 'X'), ('\t', 'SPACE'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('>', 'dep'), ('\t', 'ROOT'), ('<', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[>, 	], [	, <], [<, .]]

>> Trigrams: 
[[>, 	, <], [	, <, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 464 =============================

	. 


>> Tokens are: 
[	, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[	, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 465 =============================

> 


>> Tokens are: 
[>] 

>> PoS Tags are: 
[('>', 'X')] 

>> Dependency Tags are: 
[('>', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 466 =============================

	id	. 


>> Tokens are: 
[	, d, 	, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('d', 'PROPN'), ('\t', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('d', 'compound'), ('\t', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[	, d], [d, 	], [	, .]]

>> Trigrams: 
[[	, d, 	], [d, 	, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 467 =============================

> 


>> Tokens are: 
[>] 

>> PoS Tags are: 
[('>', 'X')] 

>> Dependency Tags are: 
[('>', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 468 =============================

	.>	 	. 


>> Tokens are: 
[	, ., >, 	 	, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('.', 'PUNCT'), ('>', 'X'), ('\t\xa0\t', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('.', 'punct'), ('>', 'nmod'), ('\t\xa0\t', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[	, .], [., >], [>, 	 	], [	 	, .]]

>> Trigrams: 
[[	, ., >], [., >, 	 	], [>, 	 	, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 469 =============================

> 


>> Tokens are: 
[>] 

>> PoS Tags are: 
[('>', 'X')] 

>> Dependency Tags are: 
[('>', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 470 =============================

	$	<. 


>> Tokens are: 
[	, $, 	, <, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('$', 'SYM'), ('\t', 'SPACE'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('$', 'nmod'), ('\t', 'appos'), ('<', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[	, $], [$, 	], [	, <], [<, .]]

>> Trigrams: 
[[	, $, 	], [$, 	, <], [	, <, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 471 =============================

	<. 


>> Tokens are: 
[	, <, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('<', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[	, <], [<, .]]

>> Trigrams: 
[[	, <, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 472 =============================

	<. 


>> Tokens are: 
[	, <, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('<', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[	, <], [<, .]]

>> Trigrams: 
[[	, <, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 473 =============================

	   	 				  	 				  	 				                E+ T| T	 T  T*	 F| F	 F id Step 1: Find Leading & Trailing of NT     Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[	   	 				  	 				  	 				                , E+, T|, T, 	 , T,  , T, *, 	 , F|, F, 	 , F, d, Step, 1, :, Find, Leading, &, Trailing, NT,     , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('\t\xa0  \t \t\t\t\t  \t \t\t\t\t  \t \t\t\t\t                ', 'SPACE'), ('E+', 'ADJ'), ('T|', 'NOUN'), ('T', 'NOUN'), ('\t ', 'SPACE'), ('T\uf0e0', 'VERB'), (' ', 'SPACE'), ('T', 'PROPN'), ('*', 'PROPN'), ('\t ', 'SPACE'), ('F|', 'ADJ'), ('F', 'PROPN'), ('\t ', 'SPACE'), ('F\uf0e0', 'VERB'), ('d', 'ADJ'), ('Step', 'NOUN'), ('1', 'NUM'), (':', 'PUNCT'), ('Find', 'VERB'), ('Leading', 'VERB'), ('&', 'CCONJ'), ('Trailing', 'PROPN'), ('NT', 'PROPN'), ('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('\t\xa0  \t \t\t\t\t  \t \t\t\t\t  \t \t\t\t\t                ', 'compound'), ('E+', 'amod'), ('T|', 'compound'), ('T', 'nsubj'), ('\t ', 'nsubj'), ('T\uf0e0', 'xcomp'), (' ', 'dobj'), ('T', 'conj'), ('*', 'punct'), ('\t ', 'compound'), ('F|', 'compound'), ('F', 'compound'), ('\t ', 'nsubj'), ('F\uf0e0', 'advcl'), ('d', 'compound'), ('Step', 'dobj'), ('1', 'nummod'), (':', 'punct'), ('Find', 'acl'), ('Leading', 'dobj'), ('&', 'cc'), ('Trailing', 'conj'), ('NT', 'nmod'), ('    ', 'compound'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'pobj'), ('#', 'npadvmod'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'npadvmod'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[	   	 				  	 				  	 				                , E+], [E+, T|], [T|, T], [T, 	 ], [	 , T], [T,  ], [ , T], [T, *], [*, 	 ], [	 , F|], [F|, F], [F, 	 ], [	 , F], [F, d], [d, Step], [Step, 1], [1, :], [:, Find], [Find, Leading], [Leading, &], [&, Trailing], [Trailing, NT], [NT,     ], [    , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[	   	 				  	 				  	 				                , E+, T|], [E+, T|, T], [T|, T, 	 ], [T, 	 , T], [	 , T,  ], [T,  , T], [ , T, *], [T, *, 	 ], [*, 	 , F|], [	 , F|, F], [F|, F, 	 ], [F, 	 , F], [	 , F, d], [F, d, Step], [d, Step, 1], [Step, 1, :], [1, :, Find], [:, Find, Leading], [Find, Leading, &], [Leading, &, Trailing], [&, Trailing, NT], [Trailing, NT,     ], [NT,     , Prof.], [    , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[	   	 				  	 				  	 				                E+ T| T, T, i, d Step, Trailing, NT     Prof. Jay R Dhamsaniya, (PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('1', 'CARDINAL'), ('Find Leading & Trailing', 'ORG'), ('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 474 =============================

Example: Operator precedence parsing  	Nonterminal 	Leading	Trailing  	E	{+,*,id}	{+,*,id}  	T 


>> Tokens are: 
[Example, :, Operator, precedence, parsing,  	, Nonterminal, 	, Leading, 	, Trailing,  	, E, 	, {, +, ,, *, ,, d, }, 	, {, +, ,, *, ,, d, },  	, T] 

>> PoS Tags are: 
[('Example', 'NOUN'), (':', 'PUNCT'), ('Operator', 'NOUN'), ('precedence', 'NOUN'), ('parsing', 'VERB'), (' \t', 'SPACE'), ('Nonterminal', 'PROPN'), ('\t', 'SPACE'), ('Leading', 'PROPN'), ('\t', 'SPACE'), ('Trailing', 'VERB'), (' \t', 'SPACE'), ('E', 'NOUN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('+', 'NOUN'), (',', 'PUNCT'), ('*', 'PUNCT'), (',', 'PUNCT'), ('d', 'X'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('+', 'NOUN'), (',', 'PUNCT'), ('*', 'PUNCT'), (',', 'PUNCT'), ('d', 'NOUN'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('T', 'NOUN')] 

>> Dependency Tags are: 
[('Example', 'ROOT'), (':', 'punct'), ('Operator', 'compound'), ('precedence', 'appos'), ('parsing', 'acl'), (' \t', 'compound'), ('Nonterminal', 'compound'), ('\t', 'compound'), ('Leading', 'compound'), ('\t', 'nsubj'), ('Trailing', 'ccomp'), (' \t', 'compound'), ('E', 'compound'), ('\t', 'dobj'), ('{', 'punct'), ('+', 'prep'), (',', 'punct'), ('*', 'punct'), (',', 'punct'), ('d', 'meta'), ('}', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('+', 'cc'), (',', 'punct'), ('*', 'punct'), (',', 'punct'), ('d', 'appos'), ('}', 'punct'), (' \t', 'compound'), ('T', 'appos')]

>> Bigrams: 
[[Example, :], [:, Operator], [Operator, precedence], [precedence, parsing], [parsing,  	], [ 	, Nonterminal], [Nonterminal, 	], [	, Leading], [Leading, 	], [	, Trailing], [Trailing,  	], [ 	, E], [E, 	], [	, {], [{, +], [+, ,], [,, *], [*, ,], [,, d], [d, }], [}, 	], [	, {], [{, +], [+, ,], [,, *], [*, ,], [,, d], [d, }], [},  	], [ 	, T]]

>> Trigrams: 
[[Example, :, Operator], [:, Operator, precedence], [Operator, precedence, parsing], [precedence, parsing,  	], [parsing,  	, Nonterminal], [ 	, Nonterminal, 	], [Nonterminal, 	, Leading], [	, Leading, 	], [Leading, 	, Trailing], [	, Trailing,  	], [Trailing,  	, E], [ 	, E, 	], [E, 	, {], [	, {, +], [{, +, ,], [+, ,, *], [,, *, ,], [*, ,, d], [,, d, }], [d, }, 	], [}, 	, {], [	, {, +], [{, +, ,], [+, ,, *], [,, *, ,], [*, ,, d], [,, d, }], [d, },  	], [},  	, T]]

>> Noun Phrases are: 
[Example, Operator precedence, id,  	T]

>> Named Entities are: 
[]


============================ Sentence 475 =============================

	{*,id}	{*,id}  	F	{id}	{id}   


>> Tokens are: 
[	, {, *, ,, d, }, 	, {, *, ,, d, },  	, F, 	, {, d, }, 	, {, d, },  ] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('{', 'PUNCT'), ('*', 'PUNCT'), (',', 'PUNCT'), ('d', 'X'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('*', 'PUNCT'), (',', 'PUNCT'), ('d', 'NOUN'), ('}', 'PUNCT'), (' \t', 'SPACE'), ('F', 'PROPN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('d', 'PROPN'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('d', 'NOUN'), ('}', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('{', 'punct'), ('*', 'punct'), (',', 'punct'), ('d', 'appos'), ('}', 'punct'), ('\t', 'appos'), ('{', 'punct'), ('*', 'punct'), (',', 'punct'), ('d', 'appos'), ('}', 'punct'), (' \t', 'compound'), ('F', 'compound'), ('\t', 'appos'), ('{', 'punct'), ('d', 'appos'), ('}', 'punct'), ('\t', 'conj'), ('{', 'punct'), ('d', 'appos'), ('}', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[	, {], [{, *], [*, ,], [,, d], [d, }], [}, 	], [	, {], [{, *], [*, ,], [,, d], [d, }], [},  	], [ 	, F], [F, 	], [	, {], [{, d], [d, }], [}, 	], [	, {], [{, d], [d, }], [},  ]]

>> Trigrams: 
[[	, {, *], [{, *, ,], [*, ,, d], [,, d, }], [d, }, 	], [}, 	, {], [	, {, *], [{, *, ,], [*, ,, d], [,, d, }], [d, },  	], [},  	, F], [ 	, F, 	], [F, 	, {], [	, {, d], [{, d, }], [d, }, 	], [}, 	, {], [	, {, d], [{, d, }], [d, },  ]]

>> Noun Phrases are: 
[id, id, id]

>> Named Entities are: 
[]


============================ Sentence 476 =============================

Step 2: Establish Relation   


>> Tokens are: 
[Step, 2, :, Establish, Relation,  ] 

>> PoS Tags are: 
[('Step', 'NOUN'), ('2', 'NUM'), (':', 'PUNCT'), ('Establish', 'PROPN'), ('Relation', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Step', 'nsubj'), ('2', 'nummod'), (':', 'punct'), ('Establish', 'ROOT'), ('Relation', 'dobj'), (' ', 'punct')]

>> Bigrams: 
[[Step, 2], [2, :], [:, Establish], [Establish, Relation], [Relation,  ]]

>> Trigrams: 
[[Step, 2, :], [2, :, Establish], [:, Establish, Relation], [Establish, Relation,  ]]

>> Noun Phrases are: 
[Step, Relation]

>> Named Entities are: 
[('2', 'CARDINAL'), ('Establish Relation', 'ORG')]


============================ Sentence 477 =============================

E   


>> Tokens are: 
[E,  ] 

>> PoS Tags are: 
[('E\uf0e0', 'ADV'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('E\uf0e0', 'amod'), (' ', 'ROOT')]

>> Bigrams: 
[[E,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 478 =============================

Step 3: Creation of Table  	 	+	* 


>> Tokens are: 
[Step, 3, :, Creation, Table,  	 	, +, 	, *] 

>> PoS Tags are: 
[('Step', 'NOUN'), ('3', 'NUM'), (':', 'PUNCT'), ('Creation', 'NOUN'), ('Table', 'PROPN'), (' \t \t', 'SPACE'), ('+', 'NOUN'), ('\t', 'SPACE'), ('*', 'PUNCT')] 

>> Dependency Tags are: 
[('Step', 'ROOT'), ('3', 'nummod'), (':', 'punct'), ('Creation', 'appos'), ('Table', 'pobj'), (' \t \t', 'appos'), ('+', 'intj'), ('\t', 'conj'), ('*', 'punct')]

>> Bigrams: 
[[Step, 3], [3, :], [:, Creation], [Creation, Table], [Table,  	 	], [ 	 	, +], [+, 	], [	, *]]

>> Trigrams: 
[[Step, 3, :], [3, :, Creation], [:, Creation, Table], [Creation, Table,  	 	], [Table,  	 	, +], [ 	 	, +, 	], [+, 	, *]]

>> Noun Phrases are: 
[Step, Creation, Table]

>> Named Entities are: 
[('3', 'CARDINAL'), ('Creation of Table  \t \t', 'ORG')]


============================ Sentence 479 =============================

	id	$  	+	. 


>> Tokens are: 
[	, d, 	, $,  	, +, 	, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('d', 'PROPN'), ('\t', 'SPACE'), ('$', 'SYM'), (' \t', 'SPACE'), ('+', 'PROPN'), ('\t', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'nmod'), ('d', 'compound'), ('\t', 'ROOT'), ('$', 'nmod'), (' \t', 'appos'), ('+', 'prep'), ('\t', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[	, d], [d, 	], [	, $], [$,  	], [ 	, +], [+, 	], [	, .]]

>> Trigrams: 
[[	, d, 	], [d, 	, $], [	, $,  	], [$,  	, +], [ 	, +, 	], [+, 	, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 480 =============================

> 


>> Tokens are: 
[>] 

>> PoS Tags are: 
[('>', 'X')] 

>> Dependency Tags are: 
[('>', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 481 =============================

	<. 


>> Tokens are: 
[	, <, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('<', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[	, <], [<, .]]

>> Trigrams: 
[[	, <, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 482 =============================

	<. 


>> Tokens are: 
[	, <, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('<', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[	, <], [<, .]]

>> Trigrams: 
[[	, <, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 483 =============================

	. 


>> Tokens are: 
[	, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[	, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 484 =============================

> 


>> Tokens are: 
[>] 

>> PoS Tags are: 
[('>', 'X')] 

>> Dependency Tags are: 
[('>', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 485 =============================

	*	. 


>> Tokens are: 
[	, *, 	, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('*', 'PUNCT'), ('\t', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('*', 'punct'), ('\t', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[	, *], [*, 	], [	, .]]

>> Trigrams: 
[[	, *, 	], [*, 	, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 486 =============================

>	. 


>> Tokens are: 
[>, 	, .] 

>> PoS Tags are: 
[('>', 'X'), ('\t', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('>', 'dep'), ('\t', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[>, 	], [	, .]]

>> Trigrams: 
[[>, 	, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 487 =============================

>	<. 


>> Tokens are: 
[>, 	, <, .] 

>> PoS Tags are: 
[('>', 'X'), ('\t', 'SPACE'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('>', 'dep'), ('\t', 'ROOT'), ('<', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[>, 	], [	, <], [<, .]]

>> Trigrams: 
[[>, 	, <], [	, <, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 488 =============================

	. 


>> Tokens are: 
[	, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[	, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 489 =============================

> 


>> Tokens are: 
[>] 

>> PoS Tags are: 
[('>', 'X')] 

>> Dependency Tags are: 
[('>', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 490 =============================

	id	. 


>> Tokens are: 
[	, d, 	, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('d', 'PROPN'), ('\t', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('d', 'compound'), ('\t', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[	, d], [d, 	], [	, .]]

>> Trigrams: 
[[	, d, 	], [d, 	, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 491 =============================

> 


>> Tokens are: 
[>] 

>> PoS Tags are: 
[('>', 'X')] 

>> Dependency Tags are: 
[('>', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 492 =============================

	.>	 	. 


>> Tokens are: 
[	, ., >, 	 	, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('.', 'PUNCT'), ('>', 'X'), ('\t\xa0\t', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('.', 'punct'), ('>', 'nmod'), ('\t\xa0\t', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[	, .], [., >], [>, 	 	], [	 	, .]]

>> Trigrams: 
[[	, ., >], [., >, 	 	], [>, 	 	, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 493 =============================

> 


>> Tokens are: 
[>] 

>> PoS Tags are: 
[('>', 'X')] 

>> Dependency Tags are: 
[('>', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 494 =============================

	$	<. 


>> Tokens are: 
[	, $, 	, <, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('$', 'SYM'), ('\t', 'SPACE'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('$', 'nmod'), ('\t', 'appos'), ('<', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[	, $], [$, 	], [	, <], [<, .]]

>> Trigrams: 
[[	, $, 	], [$, 	, <], [	, <, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 495 =============================

	<. 


>> Tokens are: 
[	, <, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('<', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[	, <], [<, .]]

>> Trigrams: 
[[	, <, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 496 =============================

	<. 


>> Tokens are: 
[	, <, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('<', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[	, <], [<, .]]

>> Trigrams: 
[[	, <, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 497 =============================

	   	 				  	 				  	 				        E+ 


>> Tokens are: 
[	   	 				  	 				  	 				        , E+] 

>> PoS Tags are: 
[('\t\xa0  \t \t\t\t\t  \t \t\t\t\t  \t \t\t\t\t        ', 'SPACE'), ('E+', 'NOUN')] 

>> Dependency Tags are: 
[('\t\xa0  \t \t\t\t\t  \t \t\t\t\t  \t \t\t\t\t        ', 'ROOT'), ('E+', 'punct')]

>> Bigrams: 
[[	   	 				  	 				  	 				        , E+]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 498 =============================

T| T	 T  T*	 F| F	 F id    Step 1: Find Leading & Trailing of NT  $<. 


>> Tokens are: 
[T|, T, 	 , T,  , T, *, 	 , F|, F, 	 , F, d,    , Step, 1, :, Find, Leading, &, Trailing, NT,  , $, <, .] 

>> PoS Tags are: 
[('T|', 'NOUN'), ('T', 'NOUN'), ('\t ', 'SPACE'), ('T\uf0e0', 'VERB'), (' ', 'SPACE'), ('T', 'PROPN'), ('*', 'PROPN'), ('\t ', 'SPACE'), ('F|', 'ADJ'), ('F', 'PROPN'), ('\t ', 'SPACE'), ('F\uf0e0', 'VERB'), ('d', 'NUM'), ('   ', 'SPACE'), ('Step', 'NOUN'), ('1', 'NUM'), (':', 'PUNCT'), ('Find', 'VERB'), ('Leading', 'VERB'), ('&', 'CCONJ'), ('Trailing', 'PROPN'), ('NT', 'PROPN'), (' ', 'SPACE'), ('$', 'SYM'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('T|', 'compound'), ('T', 'nsubj'), ('\t ', 'aux'), ('T\uf0e0', 'xcomp'), (' ', 'dobj'), ('T', 'conj'), ('*', 'punct'), ('\t ', 'compound'), ('F|', 'compound'), ('F', 'compound'), ('\t ', 'nsubj'), ('F\uf0e0', 'ccomp'), ('d', 'quantmod'), ('   ', 'nummod'), ('Step', 'npadvmod'), ('1', 'nummod'), (':', 'punct'), ('Find', 'ROOT'), ('Leading', 'dobj'), ('&', 'cc'), ('Trailing', 'conj'), ('NT', 'pobj'), (' ', 'dobj'), ('$', 'nmod'), ('<', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[T|, T], [T, 	 ], [	 , T], [T,  ], [ , T], [T, *], [*, 	 ], [	 , F|], [F|, F], [F, 	 ], [	 , F], [F, d], [d,    ], [   , Step], [Step, 1], [1, :], [:, Find], [Find, Leading], [Leading, &], [&, Trailing], [Trailing, NT], [NT,  ], [ , $], [$, <], [<, .]]

>> Trigrams: 
[[T|, T, 	 ], [T, 	 , T], [	 , T,  ], [T,  , T], [ , T, *], [T, *, 	 ], [*, 	 , F|], [	 , F|, F], [F|, F, 	 ], [F, 	 , F], [	 , F, d], [F, d,    ], [d,    , Step], [   , Step, 1], [Step, 1, :], [1, :, Find], [:, Find, Leading], [Find, Leading, &], [Leading, &, Trailing], [&, Trailing, NT], [Trailing, NT,  ], [NT,  , $], [ , $, <], [$, <, .]]

>> Noun Phrases are: 
[T| T, Trailing, NT]

>> Named Entities are: 
[('1', 'CARDINAL'), ('Find Leading & Trailing', 'ORG')]


============================ Sentence 499 =============================

Leading (start symbol) $ <. 


>> Tokens are: 
[Leading, (, start, symbol, ), $, <, .] 

>> PoS Tags are: 
[('Leading', 'VERB'), ('(', 'PUNCT'), ('start', 'VERB'), ('symbol', 'NOUN'), (')', 'PUNCT'), ('$', 'SYM'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Leading', 'ROOT'), ('(', 'punct'), ('start', 'parataxis'), ('symbol', 'dobj'), (')', 'punct'), ('$', 'nmod'), ('<', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Leading, (], [(, start], [start, symbol], [symbol, )], [), $], [$, <], [<, .]]

>> Trigrams: 
[[Leading, (, start], [(, start, symbol], [start, symbol, )], [symbol, ), $], [), $, <], [$, <, .]]

>> Noun Phrases are: 
[symbol]

>> Named Entities are: 
[]


============================ Sentence 500 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 501 =============================

Trailing (start symbol) . 


>> Tokens are: 
[Trailing, (, start, symbol, ), .] 

>> PoS Tags are: 
[('Trailing', 'VERB'), ('(', 'PUNCT'), ('start', 'VERB'), ('symbol', 'NOUN'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Trailing', 'ROOT'), ('(', 'punct'), ('start', 'parataxis'), ('symbol', 'dobj'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Trailing, (], [(, start], [start, symbol], [symbol, )], [), .]]

>> Trigrams: 
[[Trailing, (, start], [(, start, symbol], [start, symbol, )], [symbol, ), .]]

>> Noun Phrases are: 
[symbol]

>> Named Entities are: 
[]


============================ Sentence 502 =============================

> $      Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[>, $,      , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('>', 'PUNCT'), ('$', 'SYM'), ('     ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('>', 'dep'), ('$', 'quantmod'), ('     ', 'nsubj'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'appos'), ('#', 'nmod'), ('3130006', 'appos'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'dobj'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[>, $], [$,      ], [     , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[>, $,      ], [$,      , Prof.], [     , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[Prof. Jay R Dhamsaniya, (PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 503 =============================

Example: Operator precedence parsing  Assign precedence operator between terminals String:  id+id*id	 $ id+id*id $ $ <. 


>> Tokens are: 
[Example, :, Operator, precedence, parsing,  , Assign, precedence, operator, terminals, String, :,  , id+id*id, 	 , $, id+id*id, $, $, <, .] 

>> PoS Tags are: 
[('Example', 'NOUN'), (':', 'PUNCT'), ('Operator', 'NOUN'), ('precedence', 'NOUN'), ('parsing', 'VERB'), (' ', 'SPACE'), ('Assign', 'PROPN'), ('precedence', 'NOUN'), ('operator', 'NOUN'), ('terminals', 'NOUN'), ('String', 'NOUN'), (':', 'PUNCT'), (' ', 'SPACE'), ('id+id*id', 'NOUN'), ('\t ', 'SPACE'), ('$', 'SYM'), ('id+id*id', 'NOUN'), ('$', 'SYM'), ('$', 'SYM'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Example', 'ROOT'), (':', 'punct'), ('Operator', 'compound'), ('precedence', 'nsubj'), ('parsing', 'acl'), (' ', 'compound'), ('Assign', 'compound'), ('precedence', 'compound'), ('operator', 'dobj'), ('terminals', 'compound'), ('String', 'pobj'), (':', 'punct'), (' ', 'dep'), ('id+id*id', 'nsubj'), ('\t ', 'conj'), ('$', 'nmod'), ('id+id*id', 'npadvmod'), ('$', 'nmod'), ('$', 'nmod'), ('<', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[Example, :], [:, Operator], [Operator, precedence], [precedence, parsing], [parsing,  ], [ , Assign], [Assign, precedence], [precedence, operator], [operator, terminals], [terminals, String], [String, :], [:,  ], [ , id+id*id], [id+id*id, 	 ], [	 , $], [$, id+id*id], [id+id*id, $], [$, $], [$, <], [<, .]]

>> Trigrams: 
[[Example, :, Operator], [:, Operator, precedence], [Operator, precedence, parsing], [precedence, parsing,  ], [parsing,  , Assign], [ , Assign, precedence], [Assign, precedence, operator], [precedence, operator, terminals], [operator, terminals, String], [terminals, String, :], [String, :,  ], [:,  , id+id*id], [ , id+id*id, 	 ], [id+id*id, 	 , $], [	 , $, id+id*id], [$, id+id*id, $], [id+id*id, $, $], [$, $, <], [$, <, .]]

>> Noun Phrases are: 
[Example, Operator precedence,  Assign precedence operator, terminals String, id+id*id]

>> Named Entities are: 
[('$ id+id*id $ $', 'MONEY')]


============================ Sentence 504 =============================

id+id*id$ $ <. 


>> Tokens are: 
[id+id*id$, $, <, .] 

>> PoS Tags are: 
[('id+id*id$', 'VERB'), ('$', 'SYM'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('id+id*id$', 'ROOT'), ('$', 'nmod'), ('<', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[id+id*id$, $], [$, <], [<, .]]

>> Trigrams: 
[[id+id*id$, $, <], [$, <, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 505 =============================

id .> +id*id$ $ <. 


>> Tokens are: 
[d, ., >, +, id*id$, $, <, .] 

>> PoS Tags are: 
[('d', 'NOUN'), ('.', 'PUNCT'), ('>', 'PUNCT'), ('+', 'SYM'), ('id*id$', 'VERB'), ('$', 'SYM'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('d', 'nsubj'), ('.', 'punct'), ('>', 'punct'), ('+', 'punct'), ('id*id$', 'ROOT'), ('$', 'nmod'), ('<', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[d, .], [., >], [>, +], [+, id*id$], [id*id$, $], [$, <], [<, .]]

>> Trigrams: 
[[d, ., >], [., >, +], [>, +, id*id$], [+, id*id$, $], [id*id$, $, <], [$, <, .]]

>> Noun Phrases are: 
[id]

>> Named Entities are: 
[]


============================ Sentence 506 =============================

id .> + <. 


>> Tokens are: 
[d, ., >, +, <, .] 

>> PoS Tags are: 
[('d', 'NOUN'), ('.', 'PUNCT'), ('>', 'X'), ('+', 'SYM'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('d', 'ROOT'), ('.', 'punct'), ('>', 'appos'), ('+', 'punct'), ('<', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[d, .], [., >], [>, +], [+, <], [<, .]]

>> Trigrams: 
[[d, ., >], [., >, +], [>, +, <], [+, <, .]]

>> Noun Phrases are: 
[id]

>> Named Entities are: 
[]


============================ Sentence 507 =============================

 id*id$ $ <. 


>> Tokens are: 
[ , id*id$, $, <, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('id*id$', 'VERB'), ('$', 'SYM'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'nsubj'), ('id*id$', 'ROOT'), ('$', 'nmod'), ('<', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[ , id*id$], [id*id$, $], [$, <], [<, .]]

>> Trigrams: 
[[ , id*id$, $], [id*id$, $, <], [$, <, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 508 =============================

id .> + <. 


>> Tokens are: 
[d, ., >, +, <, .] 

>> PoS Tags are: 
[('d', 'NOUN'), ('.', 'PUNCT'), ('>', 'X'), ('+', 'SYM'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('d', 'ROOT'), ('.', 'punct'), ('>', 'appos'), ('+', 'punct'), ('<', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[d, .], [., >], [>, +], [+, <], [<, .]]

>> Trigrams: 
[[d, ., >], [., >, +], [>, +, <], [+, <, .]]

>> Noun Phrases are: 
[id]

>> Named Entities are: 
[]


============================ Sentence 509 =============================

 id .> *id$ $ <. 


>> Tokens are: 
[ , d, ., >, *, id$, $, <, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('d', 'NOUN'), ('.', 'PUNCT'), ('>', 'PUNCT'), ('*', 'PUNCT'), ('id$', 'VERB'), ('$', 'SYM'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'dep'), ('d', 'ROOT'), ('.', 'punct'), ('>', 'punct'), ('*', 'punct'), ('id$', 'prep'), ('$', 'nmod'), ('<', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[ , d], [d, .], [., >], [>, *], [*, id$], [id$, $], [$, <], [<, .]]

>> Trigrams: 
[[ , d, .], [d, ., >], [., >, *], [>, *, id$], [*, id$, $], [id$, $, <], [$, <, .]]

>> Noun Phrases are: 
[ id]

>> Named Entities are: 
[]


============================ Sentence 510 =============================

id .> + <. 


>> Tokens are: 
[d, ., >, +, <, .] 

>> PoS Tags are: 
[('d', 'NOUN'), ('.', 'PUNCT'), ('>', 'X'), ('+', 'SYM'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('d', 'ROOT'), ('.', 'punct'), ('>', 'appos'), ('+', 'punct'), ('<', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[d, .], [., >], [>, +], [+, <], [<, .]]

>> Trigrams: 
[[d, ., >], [., >, +], [>, +, <], [+, <, .]]

>> Noun Phrases are: 
[id]

>> Named Entities are: 
[]


============================ Sentence 511 =============================

 id .> *<. 


>> Tokens are: 
[ , d, ., >, *, <, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('d', 'NOUN'), ('.', 'PUNCT'), ('>', 'PUNCT'), ('*', 'PUNCT'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'dep'), ('d', 'ROOT'), ('.', 'punct'), ('>', 'punct'), ('*', 'punct'), ('<', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[ , d], [d, .], [., >], [>, *], [*, <], [<, .]]

>> Trigrams: 
[[ , d, .], [d, ., >], [., >, *], [>, *, <], [*, <, .]]

>> Noun Phrases are: 
[ id]

>> Named Entities are: 
[]


============================ Sentence 512 =============================

id$ $ <. 


>> Tokens are: 
[id$, $, <, .] 

>> PoS Tags are: 
[('id$', 'VERB'), ('$', 'SYM'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('id$', 'ROOT'), ('$', 'nmod'), ('<', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[id$, $], [$, <], [<, .]]

>> Trigrams: 
[[id$, $, <], [$, <, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 513 =============================

id .> + <. 


>> Tokens are: 
[d, ., >, +, <, .] 

>> PoS Tags are: 
[('d', 'NOUN'), ('.', 'PUNCT'), ('>', 'X'), ('+', 'SYM'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('d', 'ROOT'), ('.', 'punct'), ('>', 'appos'), ('+', 'punct'), ('<', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[d, .], [., >], [>, +], [+, <], [<, .]]

>> Trigrams: 
[[d, ., >], [., >, +], [>, +, <], [+, <, .]]

>> Noun Phrases are: 
[id]

>> Named Entities are: 
[]


============================ Sentence 514 =============================

 id .> *<. 


>> Tokens are: 
[ , d, ., >, *, <, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('d', 'NOUN'), ('.', 'PUNCT'), ('>', 'PUNCT'), ('*', 'PUNCT'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'dep'), ('d', 'dep'), ('.', 'punct'), ('>', 'punct'), ('*', 'punct'), ('<', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[ , d], [d, .], [., >], [>, *], [*, <], [<, .]]

>> Trigrams: 
[[ , d, .], [d, ., >], [., >, *], [>, *, <], [*, <, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 515 =============================

id .> $  	 	+	*	id	$  	+	. 


>> Tokens are: 
[d, ., >, $,  	 	, +, 	, *, 	, d, 	, $,  	, +, 	, .] 

>> PoS Tags are: 
[('d', 'NOUN'), ('.', 'PUNCT'), ('>', 'PUNCT'), ('$', 'SYM'), (' \t \t', 'SPACE'), ('+', 'NOUN'), ('\t', 'SPACE'), ('*', 'PUNCT'), ('\t', 'SPACE'), ('d', 'PROPN'), ('\t', 'SPACE'), ('$', 'SYM'), (' \t', 'SPACE'), ('+', 'PROPN'), ('\t', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('d', 'ROOT'), ('.', 'punct'), ('>', 'punct'), ('$', 'nmod'), (' \t \t', 'appos'), ('+', 'punct'), ('\t', 'conj'), ('*', 'punct'), ('\t', 'prep'), ('d', 'oprd'), ('\t', 'appos'), ('$', 'nmod'), (' \t', 'appos'), ('+', 'punct'), ('\t', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[d, .], [., >], [>, $], [$,  	 	], [ 	 	, +], [+, 	], [	, *], [*, 	], [	, d], [d, 	], [	, $], [$,  	], [ 	, +], [+, 	], [	, .]]

>> Trigrams: 
[[d, ., >], [., >, $], [>, $,  	 	], [$,  	 	, +], [ 	 	, +, 	], [+, 	, *], [	, *, 	], [*, 	, d], [	, d, 	], [d, 	, $], [	, $,  	], [$,  	, +], [ 	, +, 	], [+, 	, .]]

>> Noun Phrases are: 
[id, d]

>> Named Entities are: 
[]


============================ Sentence 516 =============================

> 


>> Tokens are: 
[>] 

>> PoS Tags are: 
[('>', 'X')] 

>> Dependency Tags are: 
[('>', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 517 =============================

	<. 


>> Tokens are: 
[	, <, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('<', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[	, <], [<, .]]

>> Trigrams: 
[[	, <, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 518 =============================

	<. 


>> Tokens are: 
[	, <, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('<', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[	, <], [<, .]]

>> Trigrams: 
[[	, <, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 519 =============================

	. 


>> Tokens are: 
[	, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[	, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 520 =============================

> 


>> Tokens are: 
[>] 

>> PoS Tags are: 
[('>', 'X')] 

>> Dependency Tags are: 
[('>', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 521 =============================

	*	. 


>> Tokens are: 
[	, *, 	, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('*', 'PUNCT'), ('\t', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('*', 'punct'), ('\t', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[	, *], [*, 	], [	, .]]

>> Trigrams: 
[[	, *, 	], [*, 	, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 522 =============================

>	. 


>> Tokens are: 
[>, 	, .] 

>> PoS Tags are: 
[('>', 'X'), ('\t', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('>', 'dep'), ('\t', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[>, 	], [	, .]]

>> Trigrams: 
[[>, 	, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 523 =============================

>	<. 


>> Tokens are: 
[>, 	, <, .] 

>> PoS Tags are: 
[('>', 'X'), ('\t', 'SPACE'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('>', 'dep'), ('\t', 'ROOT'), ('<', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[>, 	], [	, <], [<, .]]

>> Trigrams: 
[[>, 	, <], [	, <, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 524 =============================

	. 


>> Tokens are: 
[	, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[	, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 525 =============================

> 


>> Tokens are: 
[>] 

>> PoS Tags are: 
[('>', 'X')] 

>> Dependency Tags are: 
[('>', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 526 =============================

	id	. 


>> Tokens are: 
[	, d, 	, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('d', 'PROPN'), ('\t', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('d', 'compound'), ('\t', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[	, d], [d, 	], [	, .]]

>> Trigrams: 
[[	, d, 	], [d, 	, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 527 =============================

> 


>> Tokens are: 
[>] 

>> PoS Tags are: 
[('>', 'X')] 

>> Dependency Tags are: 
[('>', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 528 =============================

	.>	 	. 


>> Tokens are: 
[	, ., >, 	 	, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('.', 'PUNCT'), ('>', 'X'), ('\t\xa0\t', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('.', 'punct'), ('>', 'nmod'), ('\t\xa0\t', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[	, .], [., >], [>, 	 	], [	 	, .]]

>> Trigrams: 
[[	, ., >], [., >, 	 	], [>, 	 	, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 529 =============================

> 


>> Tokens are: 
[>] 

>> PoS Tags are: 
[('>', 'X')] 

>> Dependency Tags are: 
[('>', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 530 =============================

	$	<. 


>> Tokens are: 
[	, $, 	, <, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('$', 'SYM'), ('\t', 'SPACE'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('$', 'nmod'), ('\t', 'appos'), ('<', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[	, $], [$, 	], [	, <], [<, .]]

>> Trigrams: 
[[	, $, 	], [$, 	, <], [	, <, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 531 =============================

	<. 


>> Tokens are: 
[	, <, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('<', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[	, <], [<, .]]

>> Trigrams: 
[[	, <, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 532 =============================

	<. 


>> Tokens are: 
[	, <, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('<', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[	, <], [<, .]]

>> Trigrams: 
[[	, <, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 533 =============================

	   Step 4: Parse the string using precedence table      


>> Tokens are: 
[	   , Step, 4, :, Parse, string, precedence, table,     ] 

>> PoS Tags are: 
[('\t\xa0  ', 'SPACE'), ('Step', 'NOUN'), ('4', 'NUM'), (':', 'PUNCT'), ('Parse', 'VERB'), ('string', 'NOUN'), ('precedence', 'NOUN'), ('table', 'NOUN'), ('    ', 'SPACE')] 

>> Dependency Tags are: 
[('\t\xa0  ', 'compound'), ('Step', 'ROOT'), ('4', 'nummod'), (':', 'punct'), ('Parse', 'appos'), ('string', 'dobj'), ('precedence', 'compound'), ('table', 'dobj'), ('    ', 'appos')]

>> Bigrams: 
[[	   , Step], [Step, 4], [4, :], [:, Parse], [Parse, string], [string, precedence], [precedence, table], [table,     ]]

>> Trigrams: 
[[	   , Step, 4], [Step, 4, :], [4, :, Parse], [:, Parse, string], [Parse, string, precedence], [string, precedence, table], [precedence, table,     ]]

>> Noun Phrases are: 
[	   Step, the string, precedence table]

>> Named Entities are: 
[('4', 'CARDINAL')]


============================ Sentence 534 =============================

Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'nsubj'), ('#', 'appos'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[Prof. Jay R Dhamsaniya, (PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 535 =============================

Example: Operator precedence parsing 	$ <. 


>> Tokens are: 
[Example, :, Operator, precedence, parsing, 	, $, <, .] 

>> PoS Tags are: 
[('Example', 'NOUN'), (':', 'PUNCT'), ('Operator', 'NOUN'), ('precedence', 'NOUN'), ('parsing', 'VERB'), ('\t', 'SPACE'), ('$', 'SYM'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Example', 'ROOT'), (':', 'punct'), ('Operator', 'compound'), ('precedence', 'appos'), ('parsing', 'acl'), ('\t', 'dobj'), ('$', 'nmod'), ('<', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Example, :], [:, Operator], [Operator, precedence], [precedence, parsing], [parsing, 	], [	, $], [$, <], [<, .]]

>> Trigrams: 
[[Example, :, Operator], [:, Operator, precedence], [Operator, precedence, parsing], [precedence, parsing, 	], [parsing, 	, $], [	, $, <], [$, <, .]]

>> Noun Phrases are: 
[Example, Operator precedence]

>> Named Entities are: 
[]


============================ Sentence 536 =============================

Id .> + <. 


>> Tokens are: 
[d, ., >, +, <, .] 

>> PoS Tags are: 
[('d', 'NOUN'), ('.', 'PUNCT'), ('>', 'X'), ('+', 'SYM'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('d', 'ROOT'), ('.', 'punct'), ('>', 'npadvmod'), ('+', 'punct'), ('<', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[d, .], [., >], [>, +], [+, <], [<, .]]

>> Trigrams: 
[[d, ., >], [., >, +], [>, +, <], [+, <, .]]

>> Noun Phrases are: 
[Id]

>> Named Entities are: 
[]


============================ Sentence 537 =============================

Id .> * <. 


>> Tokens are: 
[d, ., >, *, <, .] 

>> PoS Tags are: 
[('d', 'NOUN'), ('.', 'PUNCT'), ('>', 'PUNCT'), ('*', 'PUNCT'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('d', 'dep'), ('.', 'punct'), ('>', 'punct'), ('*', 'punct'), ('<', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[d, .], [., >], [>, *], [*, <], [<, .]]

>> Trigrams: 
[[d, ., >], [., >, *], [>, *, <], [*, <, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 538 =============================

Id .> 


>> Tokens are: 
[d, ., >] 

>> PoS Tags are: 
[('d', 'NOUN'), ('.', 'PUNCT'), ('>', 'PUNCT')] 

>> Dependency Tags are: 
[('d', 'ROOT'), ('.', 'punct'), ('>', 'punct')]

>> Bigrams: 
[[d, .], [., >]]

>> Trigrams: 
[[d, ., >]]

>> Noun Phrases are: 
[Id]

>> Named Entities are: 
[]


============================ Sentence 539 =============================

$	Handle id is obtained between <. 


>> Tokens are: 
[$, 	, Handle, d, obtained, <, .] 

>> PoS Tags are: 
[('$', 'PUNCT'), ('\t', 'SPACE'), ('Handle', 'PROPN'), ('d', 'NOUN'), ('obtained', 'VERB'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('$', 'nmod'), ('\t', 'compound'), ('Handle', 'nsubjpass'), ('d', 'nsubjpass'), ('obtained', 'ROOT'), ('<', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[$, 	], [	, Handle], [Handle, d], [d, obtained], [obtained, <], [<, .]]

>> Trigrams: 
[[$, 	, Handle], [	, Handle, d], [Handle, d, obtained], [d, obtained, <], [obtained, <, .]]

>> Noun Phrases are: 
[$	Handle, i, d]

>> Named Entities are: 
[]


============================ Sentence 540 =============================

and . 


>> Tokens are: 
[.] 

>> PoS Tags are: 
[('.', 'PUNCT')] 

>> Dependency Tags are: 
[('.', 'punct')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 541 =============================

> 


>> Tokens are: 
[>] 

>> PoS Tags are: 
[('>', 'X')] 

>> Dependency Tags are: 
[('>', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 542 =============================

Reduce this by Fid  	$ F + <. 


>> Tokens are: 
[Reduce, Fid,  	, $, F, +, <, .] 

>> PoS Tags are: 
[('Reduce', 'VERB'), ('F\uf0e0id', 'PROPN'), (' \t', 'SPACE'), ('$', 'SYM'), ('F', 'NOUN'), ('+', 'ADP'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Reduce', 'ROOT'), ('F\uf0e0id', 'nmod'), (' \t', 'nmod'), ('$', 'nmod'), ('F', 'pobj'), ('+', 'prep'), ('<', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Reduce, Fid], [Fid,  	], [ 	, $], [$, F], [F, +], [+, <], [<, .]]

>> Trigrams: 
[[Reduce, Fid,  	], [Fid,  	, $], [ 	, $, F], [$, F, +], [F, +, <], [+, <, .]]

>> Noun Phrases are: 
[Fid  	$ F]

>> Named Entities are: 
[('F', 'MONEY')]


============================ Sentence 543 =============================

Id .> * <. 


>> Tokens are: 
[d, ., >, *, <, .] 

>> PoS Tags are: 
[('d', 'NOUN'), ('.', 'PUNCT'), ('>', 'PUNCT'), ('*', 'PUNCT'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('d', 'dep'), ('.', 'punct'), ('>', 'punct'), ('*', 'punct'), ('<', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[d, .], [., >], [>, *], [*, <], [<, .]]

>> Trigrams: 
[[d, ., >], [., >, *], [>, *, <], [*, <, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 544 =============================

Id .> 


>> Tokens are: 
[d, ., >] 

>> PoS Tags are: 
[('d', 'NOUN'), ('.', 'PUNCT'), ('>', 'PUNCT')] 

>> Dependency Tags are: 
[('d', 'ROOT'), ('.', 'punct'), ('>', 'punct')]

>> Bigrams: 
[[d, .], [., >]]

>> Trigrams: 
[[d, ., >]]

>> Noun Phrases are: 
[Id]

>> Named Entities are: 
[]


============================ Sentence 545 =============================

$	Handle id is obtained between <. 


>> Tokens are: 
[$, 	, Handle, d, obtained, <, .] 

>> PoS Tags are: 
[('$', 'PUNCT'), ('\t', 'SPACE'), ('Handle', 'PROPN'), ('d', 'NOUN'), ('obtained', 'VERB'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('$', 'nmod'), ('\t', 'compound'), ('Handle', 'nsubjpass'), ('d', 'nsubjpass'), ('obtained', 'ROOT'), ('<', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[$, 	], [	, Handle], [Handle, d], [d, obtained], [obtained, <], [<, .]]

>> Trigrams: 
[[$, 	, Handle], [	, Handle, d], [Handle, d, obtained], [d, obtained, <], [obtained, <, .]]

>> Noun Phrases are: 
[$	Handle, i, d]

>> Named Entities are: 
[]


============================ Sentence 546 =============================

and . 


>> Tokens are: 
[.] 

>> PoS Tags are: 
[('.', 'PUNCT')] 

>> Dependency Tags are: 
[('.', 'punct')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 547 =============================

> 


>> Tokens are: 
[>] 

>> PoS Tags are: 
[('>', 'X')] 

>> Dependency Tags are: 
[('>', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 548 =============================

Reduce this by Fid  	$ F + F * <. 


>> Tokens are: 
[Reduce, Fid,  	, $, F, +, F, *, <, .] 

>> PoS Tags are: 
[('Reduce', 'VERB'), ('F\uf0e0id', 'PROPN'), (' \t', 'SPACE'), ('$', 'SYM'), ('F', 'PROPN'), ('+', 'SYM'), ('F', 'PROPN'), ('*', 'PUNCT'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Reduce', 'ROOT'), ('F\uf0e0id', 'nmod'), (' \t', 'nmod'), ('$', 'nmod'), ('F', 'nmod'), ('+', 'compound'), ('F', 'pobj'), ('*', 'punct'), ('<', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Reduce, Fid], [Fid,  	], [ 	, $], [$, F], [F, +], [+, F], [F, *], [*, <], [<, .]]

>> Trigrams: 
[[Reduce, Fid,  	], [Fid,  	, $], [ 	, $, F], [$, F, +], [F, +, F], [+, F, *], [F, *, <], [*, <, .]]

>> Noun Phrases are: 
[Fid  	$ F + F]

>> Named Entities are: 
[('F', 'MONEY')]


============================ Sentence 549 =============================

Id .> 


>> Tokens are: 
[d, ., >] 

>> PoS Tags are: 
[('d', 'NOUN'), ('.', 'PUNCT'), ('>', 'PUNCT')] 

>> Dependency Tags are: 
[('d', 'ROOT'), ('.', 'punct'), ('>', 'punct')]

>> Bigrams: 
[[d, .], [., >]]

>> Trigrams: 
[[d, ., >]]

>> Noun Phrases are: 
[Id]

>> Named Entities are: 
[]


============================ Sentence 550 =============================

$	Handle id is obtained between <. 


>> Tokens are: 
[$, 	, Handle, d, obtained, <, .] 

>> PoS Tags are: 
[('$', 'PUNCT'), ('\t', 'SPACE'), ('Handle', 'PROPN'), ('d', 'NOUN'), ('obtained', 'VERB'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('$', 'nmod'), ('\t', 'compound'), ('Handle', 'nsubjpass'), ('d', 'nsubjpass'), ('obtained', 'ROOT'), ('<', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[$, 	], [	, Handle], [Handle, d], [d, obtained], [obtained, <], [<, .]]

>> Trigrams: 
[[$, 	, Handle], [	, Handle, d], [Handle, d, obtained], [d, obtained, <], [obtained, <, .]]

>> Noun Phrases are: 
[$	Handle, i, d]

>> Named Entities are: 
[]


============================ Sentence 551 =============================

and . 


>> Tokens are: 
[.] 

>> PoS Tags are: 
[('.', 'PUNCT')] 

>> Dependency Tags are: 
[('.', 'punct')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 552 =============================

> 


>> Tokens are: 
[>] 

>> PoS Tags are: 
[('>', 'X')] 

>> Dependency Tags are: 
[('>', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 553 =============================

Reduce this by Fid  	$ F + F * F $	Perform appropriate reductions of all nonterminals. 


>> Tokens are: 
[Reduce, Fid,  	, $, F, +, F, *, F, $, 	, Perform, appropriate, reductions, nonterminals, .] 

>> PoS Tags are: 
[('Reduce', 'AUX'), ('F\uf0e0id', 'PROPN'), (' \t', 'SPACE'), ('$', 'SYM'), ('F', 'PROPN'), ('+', 'SYM'), ('F', 'PROPN'), ('*', 'PROPN'), ('F', 'PROPN'), ('$', 'PROPN'), ('\t', 'SPACE'), ('Perform', 'VERB'), ('appropriate', 'ADJ'), ('reductions', 'NOUN'), ('nonterminals', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Reduce', 'aux'), ('F\uf0e0id', 'nmod'), (' \t', 'nmod'), ('$', 'nmod'), ('F', 'nmod'), ('+', 'punct'), ('F', 'nmod'), ('*', 'punct'), ('F', 'nmod'), ('$', 'nmod'), ('\t', 'pobj'), ('Perform', 'ROOT'), ('appropriate', 'amod'), ('reductions', 'dobj'), ('nonterminals', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Reduce, Fid], [Fid,  	], [ 	, $], [$, F], [F, +], [+, F], [F, *], [*, F], [F, $], [$, 	], [	, Perform], [Perform, appropriate], [appropriate, reductions], [reductions, nonterminals], [nonterminals, .]]

>> Trigrams: 
[[Reduce, Fid,  	], [Fid,  	, $], [ 	, $, F], [$, F, +], [F, +, F], [+, F, *], [F, *, F], [*, F, $], [F, $, 	], [$, 	, Perform], [	, Perform, appropriate], [Perform, appropriate, reductions], [appropriate, reductions, nonterminals], [reductions, nonterminals, .]]

>> Noun Phrases are: 
[appropriate reductions, all nonterminals]

>> Named Entities are: 
[('F', 'MONEY')]


============================ Sentence 554 =============================

 	$ E + T * F $	Remove all non terminals. 


>> Tokens are: 
[ 	, $, E, +, T, *, F, $, 	, Remove, non, terminals, .] 

>> PoS Tags are: 
[(' \t', 'SPACE'), ('$', 'SYM'), ('E', 'NOUN'), ('+', 'ADJ'), ('T', 'PROPN'), ('*', 'PUNCT'), ('F', 'PROPN'), ('$', 'PROPN'), ('\t', 'SPACE'), ('Remove', 'PROPN'), ('non', 'ADJ'), ('terminals', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' \t', 'nmod'), ('$', 'nmod'), ('E', 'ROOT'), ('+', 'prep'), ('T', 'nmod'), ('*', 'punct'), ('F', 'nmod'), ('$', 'nmod'), ('\t', 'compound'), ('Remove', 'appos'), ('non', 'amod'), ('terminals', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[ 	, $], [$, E], [E, +], [+, T], [T, *], [*, F], [F, $], [$, 	], [	, Remove], [Remove, non], [non, terminals], [terminals, .]]

>> Trigrams: 
[[ 	, $, E], [$, E, +], [E, +, T], [+, T, *], [T, *, F], [*, F, $], [F, $, 	], [$, 	, Remove], [	, Remove, non], [Remove, non, terminals], [non, terminals, .]]

>> Noun Phrases are: 
[ 	$ E, T * F $	Remove, all non terminals]

>> Named Entities are: 
[]


============================ Sentence 555 =============================

 	$  +  *  $	Place relation between  operators  	$ <. 


>> Tokens are: 
[ 	, $,  , +,  , *,  , $, 	, Place, relation,  , operators,  	, $, <, .] 

>> PoS Tags are: 
[(' \t', 'SPACE'), ('$', 'SYM'), (' ', 'SPACE'), ('+', 'SYM'), (' ', 'SPACE'), ('*', 'PUNCT'), (' ', 'SPACE'), ('$', 'SYM'), ('\t', 'SPACE'), ('Place', 'PROPN'), ('relation', 'NOUN'), (' ', 'SPACE'), ('operators', 'NOUN'), (' \t', 'SPACE'), ('$', 'SYM'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' \t', 'nmod'), ('$', 'nmod'), (' ', 'ROOT'), ('+', 'punct'), (' ', 'appos'), ('*', 'punct'), (' ', 'appos'), ('$', 'nmod'), ('\t', 'compound'), ('Place', 'compound'), ('relation', 'conj'), (' ', 'pobj'), ('operators', 'appos'), (' \t', 'appos'), ('$', 'nmod'), ('<', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[ 	, $], [$,  ], [ , +], [+,  ], [ , *], [*,  ], [ , $], [$, 	], [	, Place], [Place, relation], [relation,  ], [ , operators], [operators,  	], [ 	, $], [$, <], [<, .]]

>> Trigrams: 
[[ 	, $,  ], [$,  , +], [ , +,  ], [+,  , *], [ , *,  ], [*,  , $], [ , $, 	], [$, 	, Place], [	, Place, relation], [Place, relation,  ], [relation,  , operators], [ , operators,  	], [operators,  	, $], [ 	, $, <], [$, <, .]]

>> Noun Phrases are: 
[$	Place relation, operators]

>> Named Entities are: 
[]


============================ Sentence 556 =============================

+ <. 


>> Tokens are: 
[+, <, .] 

>> PoS Tags are: 
[('+', 'ADV'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('+', 'ROOT'), ('<', 'npadvmod'), ('.', 'punct')]

>> Bigrams: 
[[+, <], [<, .]]

>> Trigrams: 
[[+, <, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 557 =============================

* >$	The * operator is surrounded by <. 


>> Tokens are: 
[*, >, $, 	, *, operator, surrounded, <, .] 

>> PoS Tags are: 
[('*', 'PUNCT'), ('>', 'PUNCT'), ('$', 'PUNCT'), ('\t', 'SPACE'), ('*', 'PUNCT'), ('operator', 'NOUN'), ('surrounded', 'VERB'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('*', 'punct'), ('>', 'nmod'), ('$', 'nmod'), ('\t', 'nsubjpass'), ('*', 'punct'), ('operator', 'nsubjpass'), ('surrounded', 'ROOT'), ('<', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[*, >], [>, $], [$, 	], [	, *], [*, operator], [operator, surrounded], [surrounded, <], [<, .]]

>> Trigrams: 
[[*, >, $], [>, $, 	], [$, 	, *], [	, *, operator], [*, operator, surrounded], [operator, surrounded, <], [surrounded, <, .]]

>> Noun Phrases are: 
[The * operator]

>> Named Entities are: 
[]


============================ Sentence 558 =============================

and . 


>> Tokens are: 
[.] 

>> PoS Tags are: 
[('.', 'PUNCT')] 

>> Dependency Tags are: 
[('.', 'punct')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 559 =============================

>. 


>> Tokens are: 
[>, .] 

>> PoS Tags are: 
[('>', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('>', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[>, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 560 =============================

This indicates * becomes handle so reduce by TT*F.  	$ <. 


>> Tokens are: 
[indicates, *, handle, reduce, TT*F.,  	, $, <, .] 

>> PoS Tags are: 
[('indicates', 'VERB'), ('*', 'PUNCT'), ('handle', 'VERB'), ('reduce', 'VERB'), ('T\uf0e0T*F.', 'NOUN'), (' \t', 'SPACE'), ('$', 'SYM'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('indicates', 'ROOT'), ('*', 'punct'), ('handle', 'acomp'), ('reduce', 'advcl'), ('T\uf0e0T*F.', 'compound'), (' \t', 'pobj'), ('$', 'nmod'), ('<', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[indicates, *], [*, handle], [handle, reduce], [reduce, TT*F.], [TT*F.,  	], [ 	, $], [$, <], [<, .]]

>> Trigrams: 
[[indicates, *, handle], [*, handle, reduce], [handle, reduce, TT*F.], [reduce, TT*F.,  	], [TT*F.,  	, $], [ 	, $, <], [$, <, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('T\uf0e0T*F.', 'ORG')]


============================ Sentence 561 =============================

+ >$	+ becomes handle. 


>> Tokens are: 
[+, >, $, 	, +, handle, .] 

>> PoS Tags are: 
[('+', 'SYM'), ('>', 'PUNCT'), ('$', 'PUNCT'), ('\t', 'SPACE'), ('+', 'CCONJ'), ('handle', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('+', 'advmod'), ('>', 'nmod'), ('$', 'nmod'), ('\t', 'nsubj'), ('+', 'punct'), ('handle', 'acomp'), ('.', 'punct')]

>> Bigrams: 
[[+, >], [>, $], [$, 	], [	, +], [+, handle], [handle, .]]

>> Trigrams: 
[[+, >, $], [>, $, 	], [$, 	, +], [	, +, handle], [+, handle, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 562 =============================

Hence reduce by EE+T.    	$  $	Parsing Done           Step 4: Parse the string using precedence table   


>> Tokens are: 
[reduce, EE+T.,    	, $,  , $, 	, Parsing,           , Step, 4, :, Parse, string, precedence, table,  ] 

>> PoS Tags are: 
[('reduce', 'VERB'), ('E\uf0e0E+T.', 'NOUN'), ('   \t', 'SPACE'), ('$', 'SYM'), (' ', 'SPACE'), ('$', 'SYM'), ('\t', 'SPACE'), ('Parsing', 'PROPN'), ('          ', 'SPACE'), ('Step', 'NOUN'), ('4', 'NUM'), (':', 'PUNCT'), ('Parse', 'VERB'), ('string', 'NOUN'), ('precedence', 'NOUN'), ('table', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('reduce', 'ROOT'), ('E\uf0e0E+T.', 'pobj'), ('   \t', 'dobj'), ('$', 'nmod'), (' ', 'nmod'), ('$', 'nmod'), ('\t', 'compound'), ('Parsing', 'nsubj'), ('          ', 'compound'), ('Step', 'dobj'), ('4', 'nummod'), (':', 'punct'), ('Parse', 'advcl'), ('string', 'dobj'), ('precedence', 'compound'), ('table', 'dobj'), (' ', 'punct')]

>> Bigrams: 
[[reduce, EE+T.], [EE+T.,    	], [   	, $], [$,  ], [ , $], [$, 	], [	, Parsing], [Parsing,           ], [          , Step], [Step, 4], [4, :], [:, Parse], [Parse, string], [string, precedence], [precedence, table], [table,  ]]

>> Trigrams: 
[[reduce, EE+T.,    	], [EE+T.,    	, $], [   	, $,  ], [$,  , $], [ , $, 	], [$, 	, Parsing], [	, Parsing,           ], [Parsing,           , Step], [          , Step, 4], [Step, 4, :], [4, :, Parse], [:, Parse, string], [Parse, string, precedence], [string, precedence, table], [precedence, table,  ]]

>> Noun Phrases are: 
[EE+T., $	Parsing,           Step, the string, precedence table]

>> Named Entities are: 
[('4', 'CARDINAL')]


============================ Sentence 563 =============================

Scan the input string until first . 


>> Tokens are: 
[Scan, input, string, .] 

>> PoS Tags are: 
[('Scan', 'PROPN'), ('input', 'NOUN'), ('string', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Scan', 'ROOT'), ('input', 'compound'), ('string', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Scan, input], [input, string], [string, .]]

>> Trigrams: 
[[Scan, input, string], [input, string, .]]

>> Noun Phrases are: 
[Scan, the input string]

>> Named Entities are: 
[('Scan', 'NORP'), ('first', 'ORDINAL')]


============================ Sentence 564 =============================

> is encountered. 


>> Tokens are: 
[>, encountered, .] 

>> PoS Tags are: 
[('>', 'PUNCT'), ('encountered', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('>', 'nsubjpass'), ('encountered', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[>, encountered], [encountered, .]]

>> Trigrams: 
[[>, encountered, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 565 =============================

Scan backward until <. is encountered. 


>> Tokens are: 
[Scan, backward, <, ., encountered, .] 

>> PoS Tags are: 
[('Scan', 'ADJ'), ('backward', 'ADV'), ('<', 'X'), ('.', 'PUNCT'), ('encountered', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Scan', 'nsubjpass'), ('backward', 'advmod'), ('<', 'pobj'), ('.', 'punct'), ('encountered', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Scan, backward], [backward, <], [<, .], [., encountered], [encountered, .]]

>> Trigrams: 
[[Scan, backward, <], [backward, <, .], [<, ., encountered], [., encountered, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('Scan', 'NORP')]


============================ Sentence 566 =============================

The handle is string between <. and  . 


>> Tokens are: 
[handle, string, <, .,  , .] 

>> PoS Tags are: 
[('handle', 'NOUN'), ('string', 'NOUN'), ('<', 'PRON'), ('.', 'PUNCT'), (' ', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('handle', 'nsubj'), ('string', 'acomp'), ('<', 'pobj'), ('.', 'punct'), (' ', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[handle, string], [string, <], [<, .], [.,  ], [ , .]]

>> Trigrams: 
[[handle, string, <], [string, <, .], [<, .,  ], [.,  , .]]

>> Noun Phrases are: 
[The handle, <]

>> Named Entities are: 
[]


============================ Sentence 567 =============================

>     


>> Tokens are: 
[>,    ] 

>> PoS Tags are: 
[('>', 'PUNCT'), ('   ', 'SPACE')] 

>> Dependency Tags are: 
[('>', 'quantmod'), ('   ', 'ROOT')]

>> Bigrams: 
[[>,    ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 568 =============================

Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#› 


>> Tokens are: 
[Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›] 

>> PoS Tags are: 
[('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X')] 

>> Dependency Tags are: 
[('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'nsubj'), ('#', 'appos'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct')]

>> Bigrams: 
[[Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›]]

>> Trigrams: 
[[Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›]]

>> Noun Phrases are: 
[Prof. Jay R Dhamsaniya, (PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('Jay R Dhamsaniya', 'ORG'), ('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 569 =============================

 Operator precedence function Algorithm for constructing precedence functions Create functions  and  for each  that is terminal or . 


>> Tokens are: 
[ , Operator, precedence, function, Algorithm, constructing, precedence, functions, Create, functions,  ,  ,  , terminal, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('Operator', 'NOUN'), ('precedence', 'NOUN'), ('function', 'NOUN'), ('Algorithm', 'PROPN'), ('constructing', 'VERB'), ('precedence', 'NOUN'), ('functions', 'NOUN'), ('Create', 'PROPN'), ('functions', 'NOUN'), (' ', 'SPACE'), (' ', 'SPACE'), (' ', 'SPACE'), ('terminal', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'compound'), ('Operator', 'compound'), ('precedence', 'compound'), ('function', 'ROOT'), ('Algorithm', 'npadvmod'), ('constructing', 'pcomp'), ('precedence', 'compound'), ('functions', 'dobj'), ('Create', 'compound'), ('functions', 'compound'), (' ', 'dobj'), (' ', 'conj'), (' ', 'pobj'), ('terminal', 'acomp'), ('.', 'punct')]

>> Bigrams: 
[[ , Operator], [Operator, precedence], [precedence, function], [function, Algorithm], [Algorithm, constructing], [constructing, precedence], [precedence, functions], [functions, Create], [Create, functions], [functions,  ], [ ,  ], [ ,  ], [ , terminal], [terminal, .]]

>> Trigrams: 
[[ , Operator, precedence], [Operator, precedence, function], [precedence, function, Algorithm], [function, Algorithm, constructing], [Algorithm, constructing, precedence], [constructing, precedence, functions], [precedence, functions, Create], [functions, Create, functions], [Create, functions,  ], [functions,  ,  ], [ ,  ,  ], [ ,  , terminal], [ , terminal, .]]

>> Noun Phrases are: 
[ Operator precedence function, precedence functions]

>> Named Entities are: 
[('Create', 'ORG')]


============================ Sentence 570 =============================

Partition the symbols in as many as groups possible, in such a way that  and  are in the same group if . 


>> Tokens are: 
[Partition, symbols, groups, possible, ,, way,  ,  , group, .] 

>> PoS Tags are: 
[('Partition', 'VERB'), ('symbols', 'NOUN'), ('groups', 'NOUN'), ('possible', 'ADJ'), (',', 'PUNCT'), ('way', 'NOUN'), (' ', 'SPACE'), (' ', 'SPACE'), ('group', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Partition', 'ROOT'), ('symbols', 'dobj'), ('groups', 'pobj'), ('possible', 'amod'), (',', 'punct'), ('way', 'pobj'), (' ', 'nsubj'), (' ', 'conj'), ('group', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Partition, symbols], [symbols, groups], [groups, possible], [possible, ,], [,, way], [way,  ], [ ,  ], [ , group], [group, .]]

>> Trigrams: 
[[Partition, symbols, groups], [symbols, groups, possible], [groups, possible, ,], [possible, ,, way], [,, way,  ], [way,  ,  ], [ ,  , group], [ , group, .]]

>> Noun Phrases are: 
[the symbols, groups, such a way, the same group]

>> Named Entities are: 
[]


============================ Sentence 571 =============================

Create a directed graph whose nodes are in the groups, next for each symbols do:  if , place an edge from the group of  to the group of  if , place an edge from the group of  to the group of   


>> Tokens are: 
[Create, directed, graph, nodes, groups, ,, symbols, :,  , ,, place, edge, group,  , group,  , ,, place, edge, group,  , group,  ] 

>> PoS Tags are: 
[('Create', 'VERB'), ('directed', 'VERB'), ('graph', 'NOUN'), ('nodes', 'NOUN'), ('groups', 'NOUN'), (',', 'PUNCT'), ('symbols', 'NOUN'), (':', 'PUNCT'), (' ', 'SPACE'), (',', 'PUNCT'), ('place', 'VERB'), ('edge', 'NOUN'), ('group', 'NOUN'), (' ', 'SPACE'), ('group', 'NOUN'), (' ', 'SPACE'), (',', 'PUNCT'), ('place', 'VERB'), ('edge', 'NOUN'), ('group', 'NOUN'), (' ', 'SPACE'), ('group', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Create', 'ROOT'), ('directed', 'amod'), ('graph', 'dobj'), ('nodes', 'nsubj'), ('groups', 'pobj'), (',', 'punct'), ('symbols', 'nsubj'), (':', 'punct'), (' ', 'dobj'), (',', 'punct'), ('place', 'advcl'), ('edge', 'dobj'), ('group', 'pobj'), (' ', 'pobj'), ('group', 'pobj'), (' ', 'pobj'), (',', 'punct'), ('place', 'advcl'), ('edge', 'dobj'), ('group', 'pobj'), (' ', 'pobj'), ('group', 'pobj'), (' ', 'pobj')]

>> Bigrams: 
[[Create, directed], [directed, graph], [graph, nodes], [nodes, groups], [groups, ,], [,, symbols], [symbols, :], [:,  ], [ , ,], [,, place], [place, edge], [edge, group], [group,  ], [ , group], [group,  ], [ , ,], [,, place], [place, edge], [edge, group], [group,  ], [ , group], [group,  ]]

>> Trigrams: 
[[Create, directed, graph], [directed, graph, nodes], [graph, nodes, groups], [nodes, groups, ,], [groups, ,, symbols], [,, symbols, :], [symbols, :,  ], [:,  , ,], [ , ,, place], [,, place, edge], [place, edge, group], [edge, group,  ], [group,  , group], [ , group,  ], [group,  , ,], [ , ,, place], [,, place, edge], [place, edge, group], [edge, group,  ], [group,  , group], [ , group,  ]]

>> Noun Phrases are: 
[a directed graph, whose nodes, the groups, each symbols, an edge, the group, the group, an edge, the group, the group]

>> Named Entities are: 
[]


============================ Sentence 572 =============================

If the constructed graph has a cycle then no precedence functions exist. 


>> Tokens are: 
[constructed, graph, cycle, precedence, functions, exist, .] 

>> PoS Tags are: 
[('constructed', 'VERB'), ('graph', 'NOUN'), ('cycle', 'NOUN'), ('precedence', 'NOUN'), ('functions', 'NOUN'), ('exist', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('constructed', 'amod'), ('graph', 'nsubj'), ('cycle', 'dobj'), ('precedence', 'compound'), ('functions', 'nsubj'), ('exist', 'relcl'), ('.', 'punct')]

>> Bigrams: 
[[constructed, graph], [graph, cycle], [cycle, precedence], [precedence, functions], [functions, exist], [exist, .]]

>> Trigrams: 
[[constructed, graph, cycle], [graph, cycle, precedence], [cycle, precedence, functions], [precedence, functions, exist], [functions, exist, .]]

>> Noun Phrases are: 
[the constructed graph, a cycle, no precedence functions]

>> Named Entities are: 
[]


============================ Sentence 573 =============================

When there are no cycles collect the length of the longest paths from the groups of  and respectively. 


>> Tokens are: 
[cycles, collect, length, longest, paths, groups,  , respectively, .] 

>> PoS Tags are: 
[('cycles', 'NOUN'), ('collect', 'VERB'), ('length', 'NOUN'), ('longest', 'ADJ'), ('paths', 'NOUN'), ('groups', 'NOUN'), (' ', 'SPACE'), ('respectively', 'ADV'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('cycles', 'attr'), ('collect', 'ROOT'), ('length', 'dobj'), ('longest', 'amod'), ('paths', 'pobj'), ('groups', 'pobj'), (' ', 'pobj'), ('respectively', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[cycles, collect], [collect, length], [length, longest], [longest, paths], [paths, groups], [groups,  ], [ , respectively], [respectively, .]]

>> Trigrams: 
[[cycles, collect, length], [collect, length, longest], [length, longest, paths], [longest, paths, groups], [paths, groups,  ], [groups,  , respectively], [ , respectively, .]]

>> Noun Phrases are: 
[no cycles, the length, the longest paths, the groups]

>> Named Entities are: 
[]


============================ Sentence 574 =============================

    Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#› 


>> Tokens are: 
[    , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›] 

>> PoS Tags are: 
[('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X')] 

>> Dependency Tags are: 
[('    ', 'nmod'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'nsubj'), ('#', 'appos'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct')]

>> Bigrams: 
[[    , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›]]

>> Trigrams: 
[[    , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›]]

>> Noun Phrases are: 
[    Prof. Jay R Dhamsaniya, (PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('Jay R Dhamsaniya', 'ORG'), ('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 575 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 576 =============================

Operator precedence function Create functions fa and ga for each a that is terminal or $. 


>> Tokens are: 
[Operator, precedence, function, Create, functions, fa, ga, terminal, $, .] 

>> PoS Tags are: 
[('Operator', 'NOUN'), ('precedence', 'NOUN'), ('function', 'NOUN'), ('Create', 'PROPN'), ('functions', 'NOUN'), ('fa', 'X'), ('ga', 'VERB'), ('terminal', 'ADJ'), ('$', 'SYM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Operator', 'compound'), ('precedence', 'compound'), ('function', 'compound'), ('Create', 'compound'), ('functions', 'compound'), ('fa', 'ROOT'), ('ga', 'conj'), ('terminal', 'acomp'), ('$', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[Operator, precedence], [precedence, function], [function, Create], [Create, functions], [functions, fa], [fa, ga], [ga, terminal], [terminal, $], [$, .]]

>> Trigrams: 
[[Operator, precedence, function], [precedence, function, Create], [function, Create, functions], [Create, functions, fa], [functions, fa, ga], [fa, ga, terminal], [ga, terminal, $], [terminal, $, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 577 =============================

	 				  	 


>> Tokens are: 
[	 				  	] 

>> PoS Tags are: 
[('\t \t\t\t\t  \t', 'SPACE')] 

>> Dependency Tags are: 
[('\t \t\t\t\t  \t', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 578 =============================

E E+T | T 	T T*F | F	F id f+ f* fid f$ g+ g* gid g$    Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#› 


>> Tokens are: 
[E, E+T, |, T, 	, T, T*F, |, F, 	, F, d, f+, f, *, fid, f$, g+, g, *, gid, g$,    , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›] 

>> PoS Tags are: 
[('E\uf0e0', 'ADJ'), ('E+T', 'NOUN'), ('|', 'NOUN'), ('T', 'NOUN'), ('\t', 'SPACE'), ('T\uf0e0', 'VERB'), ('T*F', 'NOUN'), ('|', 'NOUN'), ('F', 'PROPN'), ('\t', 'SPACE'), ('F\uf0e0', 'VERB'), ('d', 'PROPN'), ('f+', 'PUNCT'), ('f', 'X'), ('*', 'PUNCT'), ('fid', 'NOUN'), ('f$', 'X'), ('g+', 'NOUN'), ('g', 'DET'), ('*', 'PUNCT'), ('gid', 'NOUN'), ('g$', 'NOUN'), ('   ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X')] 

>> Dependency Tags are: 
[('E\uf0e0', 'advmod'), ('E+T', 'pobj'), ('|', 'npadvmod'), ('T', 'compound'), ('\t', 'nsubj'), ('T\uf0e0', 'advcl'), ('T*F', 'compound'), ('|', 'dobj'), ('F', 'compound'), ('\t', 'nsubj'), ('F\uf0e0', 'ccomp'), ('d', 'dobj'), ('f+', 'punct'), ('f', 'dep'), ('*', 'punct'), ('fid', 'dep'), ('f$', 'dep'), ('g+', 'dep'), ('g', 'dep'), ('*', 'punct'), ('gid', 'amod'), ('g$', 'quantmod'), ('   ', 'nummod'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'dative'), ('#', 'nmod'), ('3130006', 'appos'), ('(', 'punct'), ('PS', 'nsubj'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'parataxis'), ('  ', 'dep'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct')]

>> Bigrams: 
[[E, E+T], [E+T, |], [|, T], [T, 	], [	, T], [T, T*F], [T*F, |], [|, F], [F, 	], [	, F], [F, d], [d, f+], [f+, f], [f, *], [*, fid], [fid, f$], [f$, g+], [g+, g], [g, *], [*, gid], [gid, g$], [g$,    ], [   , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›]]

>> Trigrams: 
[[E, E+T, |], [E+T, |, T], [|, T, 	], [T, 	, T], [	, T, T*F], [T, T*F, |], [T*F, |, F], [|, F, 	], [F, 	, F], [	, F, d], [F, d, f+], [d, f+, f], [f+, f, *], [f, *, fid], [*, fid, f$], [fid, f$, g+], [f$, g+, g], [g+, g, *], [g, *, gid], [*, gid, g$], [gid, g$,    ], [g$,    , Prof.], [   , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›]]

>> Noun Phrases are: 
[E+T, T*F |, id, g+ g* gid g$    Prof. Jay R Dhamsaniya, PS, Unit, – Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('Jay R Dhamsaniya', 'ORG'), ('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 579 =============================

 Operator precedence function Partition the symbols in as many as groups possible, in such a way that fa and gb are in the same group 


>> Tokens are: 
[ , Operator, precedence, function, Partition, symbols, groups, possible, ,, way, fa, gb, group] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('Operator', 'NOUN'), ('precedence', 'NOUN'), ('function', 'NOUN'), ('Partition', 'PROPN'), ('symbols', 'NOUN'), ('groups', 'NOUN'), ('possible', 'ADJ'), (',', 'PUNCT'), ('way', 'NOUN'), ('fa', 'X'), ('gb', 'INTJ'), ('group', 'NOUN')] 

>> Dependency Tags are: 
[(' ', 'compound'), ('Operator', 'compound'), ('precedence', 'nsubj'), ('function', 'ROOT'), ('Partition', 'dobj'), ('symbols', 'appos'), ('groups', 'pobj'), ('possible', 'amod'), (',', 'punct'), ('way', 'pobj'), ('fa', 'nsubj'), ('gb', 'conj'), ('group', 'pobj')]

>> Bigrams: 
[[ , Operator], [Operator, precedence], [precedence, function], [function, Partition], [Partition, symbols], [symbols, groups], [groups, possible], [possible, ,], [,, way], [way, fa], [fa, gb], [gb, group]]

>> Trigrams: 
[[ , Operator, precedence], [Operator, precedence, function], [precedence, function, Partition], [function, Partition, symbols], [Partition, symbols, groups], [symbols, groups, possible], [groups, possible, ,], [possible, ,, way], [,, way, fa], [way, fa, gb], [fa, gb, group]]

>> Noun Phrases are: 
[Operator precedence, Partition, the symbols, groups, such a way, the same group]

>> Named Entities are: 
[]


============================ Sentence 580 =============================

if a = b.  f+ f* fid f$ g+ g* gid g$ 	 	+	* 


>> Tokens are: 
[=, b.,  , f+, f, *, fid, f$, g+, g, *, gid, g$, 	 	, +, 	, *] 

>> PoS Tags are: 
[('=', 'PUNCT'), ('b.', 'NOUN'), (' ', 'SPACE'), ('f+', 'X'), ('f', 'X'), ('*', 'PUNCT'), ('fid', 'NOUN'), ('f$', 'X'), ('g+', 'NOUN'), ('g', 'DET'), ('*', 'PUNCT'), ('gid', 'NOUN'), ('g$', 'NOUN'), ('\t \t', 'SPACE'), ('+', 'CCONJ'), ('\t', 'SPACE'), ('*', 'PUNCT')] 

>> Dependency Tags are: 
[('=', 'punct'), ('b.', 'dep'), (' ', 'appos'), ('f+', 'punct'), ('f', 'punct'), ('*', 'punct'), ('fid', 'ROOT'), ('f$', 'dobj'), ('g+', 'dep'), ('g', 'punct'), ('*', 'punct'), ('gid', 'dep'), ('g$', 'punct'), ('\t \t', 'appos'), ('+', 'punct'), ('\t', 'conj'), ('*', 'punct')]

>> Bigrams: 
[[=, b.], [b.,  ], [ , f+], [f+, f], [f, *], [*, fid], [fid, f$], [f$, g+], [g+, g], [g, *], [*, gid], [gid, g$], [g$, 	 	], [	 	, +], [+, 	], [	, *]]

>> Trigrams: 
[[=, b.,  ], [b.,  , f+], [ , f+, f], [f+, f, *], [f, *, fid], [*, fid, f$], [fid, f$, g+], [f$, g+, g], [g+, g, *], [g, *, gid], [*, gid, g$], [gid, g$, 	 	], [g$, 	 	, +], [	 	, +, 	], [+, 	, *]]

>> Noun Phrases are: 
[if a = b.  f+ f* fid]

>> Named Entities are: 
[]


============================ Sentence 581 =============================

	id	$  	+	. 


>> Tokens are: 
[	, d, 	, $,  	, +, 	, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('d', 'PROPN'), ('\t', 'SPACE'), ('$', 'SYM'), (' \t', 'SPACE'), ('+', 'PROPN'), ('\t', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'nmod'), ('d', 'compound'), ('\t', 'ROOT'), ('$', 'nmod'), (' \t', 'appos'), ('+', 'prep'), ('\t', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[	, d], [d, 	], [	, $], [$,  	], [ 	, +], [+, 	], [	, .]]

>> Trigrams: 
[[	, d, 	], [d, 	, $], [	, $,  	], [$,  	, +], [ 	, +, 	], [+, 	, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 582 =============================

> 


>> Tokens are: 
[>] 

>> PoS Tags are: 
[('>', 'X')] 

>> Dependency Tags are: 
[('>', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 583 =============================

	<. 


>> Tokens are: 
[	, <, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('<', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[	, <], [<, .]]

>> Trigrams: 
[[	, <, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 584 =============================

	<. 


>> Tokens are: 
[	, <, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('<', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[	, <], [<, .]]

>> Trigrams: 
[[	, <, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 585 =============================

	. 


>> Tokens are: 
[	, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[	, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 586 =============================

> 


>> Tokens are: 
[>] 

>> PoS Tags are: 
[('>', 'X')] 

>> Dependency Tags are: 
[('>', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 587 =============================

	*	. 


>> Tokens are: 
[	, *, 	, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('*', 'PUNCT'), ('\t', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('*', 'punct'), ('\t', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[	, *], [*, 	], [	, .]]

>> Trigrams: 
[[	, *, 	], [*, 	, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 588 =============================

>	. 


>> Tokens are: 
[>, 	, .] 

>> PoS Tags are: 
[('>', 'X'), ('\t', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('>', 'dep'), ('\t', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[>, 	], [	, .]]

>> Trigrams: 
[[>, 	, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 589 =============================

>	<. 


>> Tokens are: 
[>, 	, <, .] 

>> PoS Tags are: 
[('>', 'X'), ('\t', 'SPACE'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('>', 'dep'), ('\t', 'ROOT'), ('<', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[>, 	], [	, <], [<, .]]

>> Trigrams: 
[[>, 	, <], [	, <, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 590 =============================

	. 


>> Tokens are: 
[	, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[	, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 591 =============================

> 


>> Tokens are: 
[>] 

>> PoS Tags are: 
[('>', 'X')] 

>> Dependency Tags are: 
[('>', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 592 =============================

	id	. 


>> Tokens are: 
[	, d, 	, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('d', 'PROPN'), ('\t', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('d', 'compound'), ('\t', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[	, d], [d, 	], [	, .]]

>> Trigrams: 
[[	, d, 	], [d, 	, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 593 =============================

> 


>> Tokens are: 
[>] 

>> PoS Tags are: 
[('>', 'X')] 

>> Dependency Tags are: 
[('>', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 594 =============================

	.>	 	. 


>> Tokens are: 
[	, ., >, 	 	, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('.', 'PUNCT'), ('>', 'X'), ('\t\xa0\t', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('.', 'punct'), ('>', 'nmod'), ('\t\xa0\t', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[	, .], [., >], [>, 	 	], [	 	, .]]

>> Trigrams: 
[[	, ., >], [., >, 	 	], [>, 	 	, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 595 =============================

> 


>> Tokens are: 
[>] 

>> PoS Tags are: 
[('>', 'X')] 

>> Dependency Tags are: 
[('>', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 596 =============================

	$	<. 


>> Tokens are: 
[	, $, 	, <, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('$', 'SYM'), ('\t', 'SPACE'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('$', 'nmod'), ('\t', 'appos'), ('<', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[	, $], [$, 	], [	, <], [<, .]]

>> Trigrams: 
[[	, $, 	], [$, 	, <], [	, <, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 597 =============================

	<. 


>> Tokens are: 
[	, <, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('<', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[	, <], [<, .]]

>> Trigrams: 
[[	, <, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 598 =============================

	<. 


>> Tokens are: 
[	, <, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('<', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[	, <], [<, .]]

>> Trigrams: 
[[	, <, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 599 =============================

	   	 				  	 				  	 				  .     


>> Tokens are: 
[	   	 				  	 				  	 				  , .,    ] 

>> PoS Tags are: 
[('\t\xa0  \t \t\t\t\t  \t \t\t\t\t  \t \t\t\t\t  ', 'SPACE'), ('.', 'PUNCT'), ('   ', 'SPACE')] 

>> Dependency Tags are: 
[('\t\xa0  \t \t\t\t\t  \t \t\t\t\t  \t \t\t\t\t  ', 'quantmod'), ('.', 'punct'), ('   ', 'ROOT')]

>> Bigrams: 
[[	   	 				  	 				  	 				  , .], [.,    ]]

>> Trigrams: 
[[	   	 				  	 				  	 				  , .,    ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 600 =============================

Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#› 


>> Tokens are: 
[Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›] 

>> PoS Tags are: 
[('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X')] 

>> Dependency Tags are: 
[('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'nsubj'), ('#', 'appos'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct')]

>> Bigrams: 
[[Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›]]

>> Trigrams: 
[[Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›]]

>> Noun Phrases are: 
[Prof. Jay R Dhamsaniya, (PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('Jay R Dhamsaniya', 'ORG'), ('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 601 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 602 =============================

Operator precedence function if a <· b, place an edge from the group of gb to the group of fa    if a ·> b, place an edge from the group of fa to the group of gb   f+ f* fid f$ g+ g* gid g$ f+ . 


>> Tokens are: 
[Operator, precedence, function, <, ·, b, ,, place, edge, group, gb, group, fa,    , ·, >, b, ,, place, edge, group, fa, group, gb,   , f+, f, *, fid, f$, g+, g, *, gid, g$, f+, .] 

>> PoS Tags are: 
[('Operator', 'NOUN'), ('precedence', 'NOUN'), ('function', 'NOUN'), ('<', 'X'), ('·', 'PUNCT'), ('b', 'NOUN'), (',', 'PUNCT'), ('place', 'VERB'), ('edge', 'NOUN'), ('group', 'NOUN'), ('gb', 'NOUN'), ('group', 'NOUN'), ('fa', 'NOUN'), ('   ', 'SPACE'), ('·', 'PUNCT'), ('>', 'X'), ('b', 'NOUN'), (',', 'PUNCT'), ('place', 'VERB'), ('edge', 'NOUN'), ('group', 'NOUN'), ('fa', 'NOUN'), ('group', 'NOUN'), ('gb', 'NOUN'), ('  ', 'SPACE'), ('f+', 'PUNCT'), ('f', 'X'), ('*', 'PUNCT'), ('fid', 'NOUN'), ('f$', 'X'), ('g+', 'NOUN'), ('g', 'DET'), ('*', 'PUNCT'), ('gid', 'NOUN'), ('g$', 'NOUN'), ('f+', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Operator', 'compound'), ('precedence', 'compound'), ('function', 'nsubj'), ('<', 'dep'), ('·', 'punct'), ('b', 'meta'), (',', 'punct'), ('place', 'advcl'), ('edge', 'dobj'), ('group', 'pobj'), ('gb', 'pobj'), ('group', 'pobj'), ('fa', 'pobj'), ('   ', 'pobj'), ('·', 'punct'), ('>', 'punct'), ('b', 'prep'), (',', 'punct'), ('place', 'advcl'), ('edge', 'dobj'), ('group', 'pobj'), ('fa', 'pobj'), ('group', 'pobj'), ('gb', 'pobj'), ('  ', 'appos'), ('f+', 'punct'), ('f', 'meta'), ('*', 'punct'), ('fid', 'ROOT'), ('f$', 'dobj'), ('g+', 'dobj'), ('g', 'punct'), ('*', 'punct'), ('gid', 'amod'), ('g$', 'dobj'), ('f+', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Operator, precedence], [precedence, function], [function, <], [<, ·], [·, b], [b, ,], [,, place], [place, edge], [edge, group], [group, gb], [gb, group], [group, fa], [fa,    ], [   , ·], [·, >], [>, b], [b, ,], [,, place], [place, edge], [edge, group], [group, fa], [fa, group], [group, gb], [gb,   ], [  , f+], [f+, f], [f, *], [*, fid], [fid, f$], [f$, g+], [g+, g], [g, *], [*, gid], [gid, g$], [g$, f+], [f+, .]]

>> Trigrams: 
[[Operator, precedence, function], [precedence, function, <], [function, <, ·], [<, ·, b], [·, b, ,], [b, ,, place], [,, place, edge], [place, edge, group], [edge, group, gb], [group, gb, group], [gb, group, fa], [group, fa,    ], [fa,    , ·], [   , ·, >], [·, >, b], [>, b, ,], [b, ,, place], [,, place, edge], [place, edge, group], [edge, group, fa], [group, fa, group], [fa, group, gb], [group, gb,   ], [gb,   , f+], [  , f+, f], [f+, f, *], [f, *, fid], [*, fid, f$], [fid, f$, g+], [f$, g+, g], [g+, g, *], [g, *, gid], [*, gid, g$], [gid, g$, f+], [g$, f+, .]]

>> Noun Phrases are: 
[Operator precedence function, an edge, the group, gb, the group, fa, an edge, the group, fa, the group, gb, g+, * gid g$]

>> Named Entities are: 
[]


============================ Sentence 603 =============================

> g+ f+  g+ f* . 


>> Tokens are: 
[>, g+, f+, , g+, f, *, .] 

>> PoS Tags are: 
[('>', 'X'), ('g+', 'PUNCT'), ('f+', 'PUNCT'), ('\uf0e0', 'PROPN'), ('g+', 'NOUN'), ('f', 'X'), ('*', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('>', 'nmod'), ('g+', 'ROOT'), ('f+', 'punct'), ('\uf0e0', 'compound'), ('g+', 'appos'), ('f', 'punct'), ('*', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[>, g+], [g+, f+], [f+, ], [, g+], [g+, f], [f, *], [*, .]]

>> Trigrams: 
[[>, g+, f+], [g+, f+, ], [f+, , g+], [, g+, f], [g+, f, *], [f, *, .]]

>> Noun Phrases are: 
[f+  g+]

>> Named Entities are: 
[]


============================ Sentence 604 =============================

> g+ f*  g+ fid . 


>> Tokens are: 
[>, g+, f, *, , g+, fid, .] 

>> PoS Tags are: 
[('>', 'X'), ('g+', 'PUNCT'), ('f', 'X'), ('*', 'PUNCT'), ('\uf0e0', 'NOUN'), ('g+', 'NOUN'), ('fid', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('>', 'dep'), ('g+', 'dep'), ('f', 'dep'), ('*', 'punct'), ('\uf0e0', 'compound'), ('g+', 'nsubj'), ('fid', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[>, g+], [g+, f], [f, *], [*, ], [, g+], [g+, fid], [fid, .]]

>> Trigrams: 
[[>, g+, f], [g+, f, *], [f, *, ], [*, , g+], [, g+, fid], [g+, fid, .]]

>> Noun Phrases are: 
[ g+]

>> Named Entities are: 
[]


============================ Sentence 605 =============================

> g+ fid  g+ f$ <. 


>> Tokens are: 
[>, g+, fid, , g+, f$, <, .] 

>> PoS Tags are: 
[('>', 'X'), ('g+', 'NOUN'), ('fid', 'NOUN'), ('\uf0e0', 'NOUN'), ('g+', 'NOUN'), ('f$', 'X'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('>', 'dep'), ('g+', 'punct'), ('fid', 'compound'), ('\uf0e0', 'appos'), ('g+', 'nsubj'), ('f$', 'ROOT'), ('<', 'dep'), ('.', 'punct')]

>> Bigrams: 
[[>, g+], [g+, fid], [fid, ], [, g+], [g+, f$], [f$, <], [<, .]]

>> Trigrams: 
[[>, g+, fid], [g+, fid, ], [fid, , g+], [, g+, f$], [g+, f$, <], [f$, <, .]]

>> Noun Phrases are: 
[fid ]

>> Named Entities are: 
[]


============================ Sentence 606 =============================

g+ f$  g+ 	 	+	*	id	$  	+	. 


>> Tokens are: 
[g+, f$, , g+, 	 	, +, 	, *, 	, d, 	, $,  	, +, 	, .] 

>> PoS Tags are: 
[('g+', 'VERB'), ('f$', 'NUM'), ('\uf0df', 'NOUN'), ('g+', 'X'), ('\t \t', 'SPACE'), ('+', 'CCONJ'), ('\t', 'SPACE'), ('*', 'PUNCT'), ('\t', 'SPACE'), ('d', 'PROPN'), ('\t', 'SPACE'), ('$', 'SYM'), (' \t', 'SPACE'), ('+', 'PROPN'), ('\t', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('g+', 'ROOT'), ('f$', 'compound'), ('\uf0df', 'appos'), ('g+', 'dobj'), ('\t \t', 'appos'), ('+', 'cc'), ('\t', 'conj'), ('*', 'punct'), ('\t', 'appos'), ('d', 'oprd'), ('\t', 'appos'), ('$', 'nmod'), (' \t', 'appos'), ('+', 'appos'), ('\t', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[g+, f$], [f$, ], [, g+], [g+, 	 	], [	 	, +], [+, 	], [	, *], [*, 	], [	, d], [d, 	], [	, $], [$,  	], [ 	, +], [+, 	], [	, .]]

>> Trigrams: 
[[g+, f$, ], [f$, , g+], [, g+, 	 	], [g+, 	 	, +], [	 	, +, 	], [+, 	, *], [	, *, 	], [*, 	, d], [	, d, 	], [d, 	, $], [	, $,  	], [$,  	, +], [ 	, +, 	], [+, 	, .]]

>> Noun Phrases are: 
[f$ , d, +]

>> Named Entities are: 
[]


============================ Sentence 607 =============================

> 


>> Tokens are: 
[>] 

>> PoS Tags are: 
[('>', 'X')] 

>> Dependency Tags are: 
[('>', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 608 =============================

	<. 


>> Tokens are: 
[	, <, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('<', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[	, <], [<, .]]

>> Trigrams: 
[[	, <, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 609 =============================

	<. 


>> Tokens are: 
[	, <, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('<', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[	, <], [<, .]]

>> Trigrams: 
[[	, <, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 610 =============================

	. 


>> Tokens are: 
[	, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[	, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 611 =============================

> 


>> Tokens are: 
[>] 

>> PoS Tags are: 
[('>', 'X')] 

>> Dependency Tags are: 
[('>', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 612 =============================

	*	. 


>> Tokens are: 
[	, *, 	, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('*', 'PUNCT'), ('\t', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('*', 'punct'), ('\t', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[	, *], [*, 	], [	, .]]

>> Trigrams: 
[[	, *, 	], [*, 	, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 613 =============================

>	. 


>> Tokens are: 
[>, 	, .] 

>> PoS Tags are: 
[('>', 'X'), ('\t', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('>', 'dep'), ('\t', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[>, 	], [	, .]]

>> Trigrams: 
[[>, 	, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 614 =============================

>	<. 


>> Tokens are: 
[>, 	, <, .] 

>> PoS Tags are: 
[('>', 'X'), ('\t', 'SPACE'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('>', 'dep'), ('\t', 'ROOT'), ('<', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[>, 	], [	, <], [<, .]]

>> Trigrams: 
[[>, 	, <], [	, <, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 615 =============================

	. 


>> Tokens are: 
[	, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[	, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 616 =============================

> 


>> Tokens are: 
[>] 

>> PoS Tags are: 
[('>', 'X')] 

>> Dependency Tags are: 
[('>', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 617 =============================

	id	. 


>> Tokens are: 
[	, d, 	, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('d', 'PROPN'), ('\t', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('d', 'compound'), ('\t', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[	, d], [d, 	], [	, .]]

>> Trigrams: 
[[	, d, 	], [d, 	, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 618 =============================

> 


>> Tokens are: 
[>] 

>> PoS Tags are: 
[('>', 'X')] 

>> Dependency Tags are: 
[('>', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 619 =============================

	.>	 	. 


>> Tokens are: 
[	, ., >, 	 	, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('.', 'PUNCT'), ('>', 'X'), ('\t\xa0\t', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('.', 'punct'), ('>', 'nmod'), ('\t\xa0\t', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[	, .], [., >], [>, 	 	], [	 	, .]]

>> Trigrams: 
[[	, ., >], [., >, 	 	], [>, 	 	, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 620 =============================

> 


>> Tokens are: 
[>] 

>> PoS Tags are: 
[('>', 'X')] 

>> Dependency Tags are: 
[('>', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 621 =============================

	$	<. 


>> Tokens are: 
[	, $, 	, <, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('$', 'SYM'), ('\t', 'SPACE'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('$', 'nmod'), ('\t', 'appos'), ('<', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[	, $], [$, 	], [	, <], [<, .]]

>> Trigrams: 
[[	, $, 	], [$, 	, <], [	, <, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 622 =============================

	<. 


>> Tokens are: 
[	, <, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('<', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[	, <], [<, .]]

>> Trigrams: 
[[	, <, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 623 =============================

	<. 


>> Tokens are: 
[	, <, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('<', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[	, <], [<, .]]

>> Trigrams: 
[[	, <, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 624 =============================

	   	 				  	 				  	 				  f g    Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#› 


>> Tokens are: 
[	   	 				  	 				  	 				  , f, g,    , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›] 

>> PoS Tags are: 
[('\t\xa0  \t \t\t\t\t  \t \t\t\t\t  \t \t\t\t\t  ', 'SPACE'), ('f', 'X'), ('g', 'NOUN'), ('   ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X')] 

>> Dependency Tags are: 
[('\t\xa0  \t \t\t\t\t  \t \t\t\t\t  \t \t\t\t\t  ', 'quantmod'), ('f', 'quantmod'), ('g', 'quantmod'), ('   ', 'nummod'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'nsubj'), ('#', 'appos'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct')]

>> Bigrams: 
[[	   	 				  	 				  	 				  , f], [f, g], [g,    ], [   , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›]]

>> Trigrams: 
[[	   	 				  	 				  	 				  , f, g], [f, g,    ], [g,    , Prof.], [   , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›]]

>> Noun Phrases are: 
[	   	 				  	 				  	 				  f g    Prof. Jay R Dhamsaniya, (PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('Jay R Dhamsaniya', 'ORG'), ('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 625 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 626 =============================

Operator precedence function if a <· b, place an edge from the group of gb to the group of fa    if a ·> b, place an edge from the group of fa to the group of gb   f+ f* fid f$ g+ g* gid g$ f+ <. 


>> Tokens are: 
[Operator, precedence, function, <, ·, b, ,, place, edge, group, gb, group, fa,    , ·, >, b, ,, place, edge, group, fa, group, gb,   , f+, f, *, fid, f$, g+, g, *, gid, g$, f+, <, .] 

>> PoS Tags are: 
[('Operator', 'NOUN'), ('precedence', 'NOUN'), ('function', 'NOUN'), ('<', 'X'), ('·', 'PUNCT'), ('b', 'NOUN'), (',', 'PUNCT'), ('place', 'VERB'), ('edge', 'NOUN'), ('group', 'NOUN'), ('gb', 'NOUN'), ('group', 'NOUN'), ('fa', 'NOUN'), ('   ', 'SPACE'), ('·', 'PUNCT'), ('>', 'X'), ('b', 'NOUN'), (',', 'PUNCT'), ('place', 'VERB'), ('edge', 'NOUN'), ('group', 'NOUN'), ('fa', 'NOUN'), ('group', 'NOUN'), ('gb', 'NOUN'), ('  ', 'SPACE'), ('f+', 'PUNCT'), ('f', 'X'), ('*', 'PUNCT'), ('fid', 'NOUN'), ('f$', 'X'), ('g+', 'NOUN'), ('g', 'DET'), ('*', 'PUNCT'), ('gid', 'ADJ'), ('g$', 'NOUN'), ('f+', 'PUNCT'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Operator', 'compound'), ('precedence', 'compound'), ('function', 'nsubj'), ('<', 'dep'), ('·', 'punct'), ('b', 'meta'), (',', 'punct'), ('place', 'advcl'), ('edge', 'dobj'), ('group', 'pobj'), ('gb', 'pobj'), ('group', 'pobj'), ('fa', 'pobj'), ('   ', 'pobj'), ('·', 'punct'), ('>', 'punct'), ('b', 'prep'), (',', 'punct'), ('place', 'advcl'), ('edge', 'dobj'), ('group', 'pobj'), ('fa', 'pobj'), ('group', 'pobj'), ('gb', 'pobj'), ('  ', 'appos'), ('f+', 'punct'), ('f', 'meta'), ('*', 'punct'), ('fid', 'ROOT'), ('f$', 'dobj'), ('g+', 'dep'), ('g', 'punct'), ('*', 'punct'), ('gid', 'amod'), ('g$', 'dobj'), ('f+', 'punct'), ('<', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[Operator, precedence], [precedence, function], [function, <], [<, ·], [·, b], [b, ,], [,, place], [place, edge], [edge, group], [group, gb], [gb, group], [group, fa], [fa,    ], [   , ·], [·, >], [>, b], [b, ,], [,, place], [place, edge], [edge, group], [group, fa], [fa, group], [group, gb], [gb,   ], [  , f+], [f+, f], [f, *], [*, fid], [fid, f$], [f$, g+], [g+, g], [g, *], [*, gid], [gid, g$], [g$, f+], [f+, <], [<, .]]

>> Trigrams: 
[[Operator, precedence, function], [precedence, function, <], [function, <, ·], [<, ·, b], [·, b, ,], [b, ,, place], [,, place, edge], [place, edge, group], [edge, group, gb], [group, gb, group], [gb, group, fa], [group, fa,    ], [fa,    , ·], [   , ·, >], [·, >, b], [>, b, ,], [b, ,, place], [,, place, edge], [place, edge, group], [edge, group, fa], [group, fa, group], [fa, group, gb], [group, gb,   ], [gb,   , f+], [  , f+, f], [f+, f, *], [f, *, fid], [*, fid, f$], [fid, f$, g+], [f$, g+, g], [g+, g, *], [g, *, gid], [*, gid, g$], [gid, g$, f+], [g$, f+, <], [f+, <, .]]

>> Noun Phrases are: 
[Operator precedence function, an edge, the group, gb, the group, fa, an edge, the group, fa, the group, gb, * gid g$]

>> Named Entities are: 
[]


============================ Sentence 627 =============================

g* f+  g* f* . 


>> Tokens are: 
[g, *, f+, , g, *, f, *, .] 

>> PoS Tags are: 
[('g', 'X'), ('*', 'PUNCT'), ('f+', 'PUNCT'), ('\uf0df', 'PROPN'), ('g', 'X'), ('*', 'PUNCT'), ('f', 'X'), ('*', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('g', 'meta'), ('*', 'punct'), ('f+', 'punct'), ('\uf0df', 'ROOT'), ('g', 'nmod'), ('*', 'punct'), ('f', 'punct'), ('*', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[g, *], [*, f+], [f+, ], [, g], [g, *], [*, f], [f, *], [*, .]]

>> Trigrams: 
[[g, *, f+], [*, f+, ], [f+, , g], [, g, *], [g, *, f], [*, f, *], [f, *, .]]

>> Noun Phrases are: 
[g* f+ ]

>> Named Entities are: 
[]


============================ Sentence 628 =============================

> g* f*  g* fid . 


>> Tokens are: 
[>, g, *, f, *, , g, *, fid, .] 

>> PoS Tags are: 
[('>', 'X'), ('g', 'NOUN'), ('*', 'PUNCT'), ('f', 'X'), ('*', 'PUNCT'), ('\uf0e0', 'NOUN'), ('g', 'NOUN'), ('*', 'PUNCT'), ('fid', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('>', 'nmod'), ('g', 'meta'), ('*', 'punct'), ('f', 'dep'), ('*', 'punct'), ('\uf0e0', 'quantmod'), ('g', 'dep'), ('*', 'punct'), ('fid', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[>, g], [g, *], [*, f], [f, *], [*, ], [, g], [g, *], [*, fid], [fid, .]]

>> Trigrams: 
[[>, g, *], [g, *, f], [*, f, *], [f, *, ], [*, , g], [, g, *], [g, *, fid], [*, fid, .]]

>> Noun Phrases are: 
[> g* f*  g* fid]

>> Named Entities are: 
[]


============================ Sentence 629 =============================

> g* fid  g* f$ <. 


>> Tokens are: 
[>, g, *, fid, , g, *, f$, <, .] 

>> PoS Tags are: 
[('>', 'X'), ('g', 'NOUN'), ('*', 'PUNCT'), ('fid', 'NOUN'), ('\uf0e0', 'PROPN'), ('g', 'NUM'), ('*', 'SYM'), ('f$', 'NOUN'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('>', 'nmod'), ('g', 'dep'), ('*', 'punct'), ('fid', 'compound'), ('\uf0e0', 'appos'), ('g', 'appos'), ('*', 'punct'), ('f$', 'dep'), ('<', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[>, g], [g, *], [*, fid], [fid, ], [, g], [g, *], [*, f$], [f$, <], [<, .]]

>> Trigrams: 
[[>, g, *], [g, *, fid], [*, fid, ], [fid, , g], [, g, *], [g, *, f$], [*, f$, <], [f$, <, .]]

>> Noun Phrases are: 
[* fid ]

>> Named Entities are: 
[]


============================ Sentence 630 =============================

g* f$  g* 	 	+	*	id	$  	+	. 


>> Tokens are: 
[g, *, f$, , g, *, 	 	, +, 	, *, 	, d, 	, $,  	, +, 	, .] 

>> PoS Tags are: 
[('g', 'X'), ('*', 'PUNCT'), ('f$', 'NOUN'), ('\uf0df', 'NOUN'), ('g', 'X'), ('*', 'PUNCT'), ('\t \t', 'SPACE'), ('+', 'CCONJ'), ('\t', 'SPACE'), ('*', 'PUNCT'), ('\t', 'SPACE'), ('d', 'PROPN'), ('\t', 'SPACE'), ('$', 'SYM'), (' \t', 'SPACE'), ('+', 'PROPN'), ('\t', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('g', 'meta'), ('*', 'punct'), ('f$', 'punct'), ('\uf0df', 'nmod'), ('g', 'meta'), ('*', 'punct'), ('\t \t', 'ROOT'), ('+', 'cc'), ('\t', 'conj'), ('*', 'punct'), ('\t', 'acl'), ('d', 'appos'), ('\t', 'appos'), ('$', 'nmod'), (' \t', 'appos'), ('+', 'appos'), ('\t', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[g, *], [*, f$], [f$, ], [, g], [g, *], [*, 	 	], [	 	, +], [+, 	], [	, *], [*, 	], [	, d], [d, 	], [	, $], [$,  	], [ 	, +], [+, 	], [	, .]]

>> Trigrams: 
[[g, *, f$], [*, f$, ], [f$, , g], [, g, *], [g, *, 	 	], [*, 	 	, +], [	 	, +, 	], [+, 	, *], [	, *, 	], [*, 	, d], [	, d, 	], [d, 	, $], [	, $,  	], [$,  	, +], [ 	, +, 	], [+, 	, .]]

>> Noun Phrases are: 
[d, +]

>> Named Entities are: 
[]


============================ Sentence 631 =============================

> 


>> Tokens are: 
[>] 

>> PoS Tags are: 
[('>', 'X')] 

>> Dependency Tags are: 
[('>', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 632 =============================

	<. 


>> Tokens are: 
[	, <, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('<', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[	, <], [<, .]]

>> Trigrams: 
[[	, <, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 633 =============================

	<. 


>> Tokens are: 
[	, <, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('<', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[	, <], [<, .]]

>> Trigrams: 
[[	, <, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 634 =============================

	. 


>> Tokens are: 
[	, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[	, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 635 =============================

> 


>> Tokens are: 
[>] 

>> PoS Tags are: 
[('>', 'X')] 

>> Dependency Tags are: 
[('>', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 636 =============================

	*	. 


>> Tokens are: 
[	, *, 	, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('*', 'PUNCT'), ('\t', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('*', 'punct'), ('\t', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[	, *], [*, 	], [	, .]]

>> Trigrams: 
[[	, *, 	], [*, 	, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 637 =============================

>	. 


>> Tokens are: 
[>, 	, .] 

>> PoS Tags are: 
[('>', 'X'), ('\t', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('>', 'dep'), ('\t', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[>, 	], [	, .]]

>> Trigrams: 
[[>, 	, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 638 =============================

>	<. 


>> Tokens are: 
[>, 	, <, .] 

>> PoS Tags are: 
[('>', 'X'), ('\t', 'SPACE'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('>', 'dep'), ('\t', 'ROOT'), ('<', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[>, 	], [	, <], [<, .]]

>> Trigrams: 
[[>, 	, <], [	, <, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 639 =============================

	. 


>> Tokens are: 
[	, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[	, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 640 =============================

> 


>> Tokens are: 
[>] 

>> PoS Tags are: 
[('>', 'X')] 

>> Dependency Tags are: 
[('>', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 641 =============================

	id	. 


>> Tokens are: 
[	, d, 	, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('d', 'PROPN'), ('\t', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('d', 'compound'), ('\t', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[	, d], [d, 	], [	, .]]

>> Trigrams: 
[[	, d, 	], [d, 	, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 642 =============================

> 


>> Tokens are: 
[>] 

>> PoS Tags are: 
[('>', 'X')] 

>> Dependency Tags are: 
[('>', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 643 =============================

	.>	 	. 


>> Tokens are: 
[	, ., >, 	 	, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('.', 'PUNCT'), ('>', 'X'), ('\t\xa0\t', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('.', 'punct'), ('>', 'nmod'), ('\t\xa0\t', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[	, .], [., >], [>, 	 	], [	 	, .]]

>> Trigrams: 
[[	, ., >], [., >, 	 	], [>, 	 	, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 644 =============================

> 


>> Tokens are: 
[>] 

>> PoS Tags are: 
[('>', 'X')] 

>> Dependency Tags are: 
[('>', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 645 =============================

	$	<. 


>> Tokens are: 
[	, $, 	, <, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('$', 'SYM'), ('\t', 'SPACE'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('$', 'nmod'), ('\t', 'appos'), ('<', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[	, $], [$, 	], [	, <], [<, .]]

>> Trigrams: 
[[	, $, 	], [$, 	, <], [	, <, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 646 =============================

	<. 


>> Tokens are: 
[	, <, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('<', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[	, <], [<, .]]

>> Trigrams: 
[[	, <, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 647 =============================

	<. 


>> Tokens are: 
[	, <, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('<', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[	, <], [<, .]]

>> Trigrams: 
[[	, <, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 648 =============================

	   	 				  	 				  	 				  f g    Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#› 


>> Tokens are: 
[	   	 				  	 				  	 				  , f, g,    , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›] 

>> PoS Tags are: 
[('\t\xa0  \t \t\t\t\t  \t \t\t\t\t  \t \t\t\t\t  ', 'SPACE'), ('f', 'X'), ('g', 'NOUN'), ('   ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X')] 

>> Dependency Tags are: 
[('\t\xa0  \t \t\t\t\t  \t \t\t\t\t  \t \t\t\t\t  ', 'quantmod'), ('f', 'quantmod'), ('g', 'quantmod'), ('   ', 'nummod'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'nsubj'), ('#', 'appos'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct')]

>> Bigrams: 
[[	   	 				  	 				  	 				  , f], [f, g], [g,    ], [   , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›]]

>> Trigrams: 
[[	   	 				  	 				  	 				  , f, g], [f, g,    ], [g,    , Prof.], [   , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›]]

>> Noun Phrases are: 
[	   	 				  	 				  	 				  f g    Prof. Jay R Dhamsaniya, (PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('Jay R Dhamsaniya', 'ORG'), ('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 649 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 650 =============================

Operator precedence function if a <· b, place an edge from the group of gb to the group of fa    if a ·> b, place an edge from the group of fa to the group of gb  f+ f* fid f$ g+ g* gid g$ f+ <. 


>> Tokens are: 
[Operator, precedence, function, <, ·, b, ,, place, edge, group, gb, group, fa,    , ·, >, b, ,, place, edge, group, fa, group, gb,  , f+, f, *, fid, f$, g+, g, *, gid, g$, f+, <, .] 

>> PoS Tags are: 
[('Operator', 'NOUN'), ('precedence', 'NOUN'), ('function', 'NOUN'), ('<', 'X'), ('·', 'PUNCT'), ('b', 'NOUN'), (',', 'PUNCT'), ('place', 'VERB'), ('edge', 'NOUN'), ('group', 'NOUN'), ('gb', 'NOUN'), ('group', 'NOUN'), ('fa', 'NOUN'), ('   ', 'SPACE'), ('·', 'PUNCT'), ('>', 'X'), ('b', 'NOUN'), (',', 'PUNCT'), ('place', 'VERB'), ('edge', 'NOUN'), ('group', 'NOUN'), ('fa', 'NOUN'), ('group', 'NOUN'), ('gb', 'PRON'), (' ', 'SPACE'), ('f+', 'X'), ('f', 'X'), ('*', 'PUNCT'), ('fid', 'NOUN'), ('f$', 'X'), ('g+', 'NOUN'), ('g', 'DET'), ('*', 'PUNCT'), ('gid', 'ADJ'), ('g$', 'NOUN'), ('f+', 'PUNCT'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Operator', 'compound'), ('precedence', 'compound'), ('function', 'ROOT'), ('<', 'dep'), ('·', 'punct'), ('b', 'meta'), (',', 'punct'), ('place', 'advcl'), ('edge', 'dobj'), ('group', 'pobj'), ('gb', 'pobj'), ('group', 'pobj'), ('fa', 'pobj'), ('   ', 'pobj'), ('·', 'punct'), ('>', 'punct'), ('b', 'prep'), (',', 'punct'), ('place', 'advcl'), ('edge', 'dobj'), ('group', 'pobj'), ('fa', 'pobj'), ('group', 'pobj'), ('gb', 'nmod'), (' ', 'pobj'), ('f+', 'punct'), ('f', 'punct'), ('*', 'punct'), ('fid', 'dep'), ('f$', 'dobj'), ('g+', 'dep'), ('g', 'punct'), ('*', 'punct'), ('gid', 'amod'), ('g$', 'appos'), ('f+', 'punct'), ('<', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[Operator, precedence], [precedence, function], [function, <], [<, ·], [·, b], [b, ,], [,, place], [place, edge], [edge, group], [group, gb], [gb, group], [group, fa], [fa,    ], [   , ·], [·, >], [>, b], [b, ,], [,, place], [place, edge], [edge, group], [group, fa], [fa, group], [group, gb], [gb,  ], [ , f+], [f+, f], [f, *], [*, fid], [fid, f$], [f$, g+], [g+, g], [g, *], [*, gid], [gid, g$], [g$, f+], [f+, <], [<, .]]

>> Trigrams: 
[[Operator, precedence, function], [precedence, function, <], [function, <, ·], [<, ·, b], [·, b, ,], [b, ,, place], [,, place, edge], [place, edge, group], [edge, group, gb], [group, gb, group], [gb, group, fa], [group, fa,    ], [fa,    , ·], [   , ·, >], [·, >, b], [>, b, ,], [b, ,, place], [,, place, edge], [place, edge, group], [edge, group, fa], [group, fa, group], [fa, group, gb], [group, gb,  ], [gb,  , f+], [ , f+, f], [f+, f, *], [f, *, fid], [*, fid, f$], [fid, f$, g+], [f$, g+, g], [g+, g, *], [g, *, gid], [*, gid, g$], [gid, g$, f+], [g$, f+, <], [f+, <, .]]

>> Noun Phrases are: 
[Operator precedence function, an edge, the group, gb, the group, fa, an edge, the group, fa, the group, g+ g* gid g$]

>> Named Entities are: 
[]


============================ Sentence 651 =============================

gid f+  gid f* <. 


>> Tokens are: 
[gid, f+, , gid, f, *, <, .] 

>> PoS Tags are: 
[('gid', 'PROPN'), ('f+', 'PUNCT'), ('\uf0df', 'VERB'), ('gid', 'NOUN'), ('f', 'X'), ('*', 'PUNCT'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('gid', 'nsubj'), ('f+', 'punct'), ('\uf0df', 'ROOT'), ('gid', 'nsubj'), ('f', 'punct'), ('*', 'punct'), ('<', 'nsubj'), ('.', 'punct')]

>> Bigrams: 
[[gid, f+], [f+, ], [, gid], [gid, f], [f, *], [*, <], [<, .]]

>> Trigrams: 
[[gid, f+, ], [f+, , gid], [, gid, f], [gid, f, *], [f, *, <], [*, <, .]]

>> Noun Phrases are: 
[gid, gid]

>> Named Entities are: 
[]


============================ Sentence 652 =============================

gid f*  gid f$ <. 


>> Tokens are: 
[gid, f, *, , gid, f$, <, .] 

>> PoS Tags are: 
[('gid', 'NOUN'), ('f', 'X'), ('*', 'PUNCT'), ('\uf0df', 'VERB'), ('gid', 'ADJ'), ('f$', 'X'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('gid', 'dep'), ('f', 'meta'), ('*', 'punct'), ('\uf0df', 'ROOT'), ('gid', 'advmod'), ('f$', 'punct'), ('<', 'npadvmod'), ('.', 'punct')]

>> Bigrams: 
[[gid, f], [f, *], [*, ], [, gid], [gid, f$], [f$, <], [<, .]]

>> Trigrams: 
[[gid, f, *], [f, *, ], [*, , gid], [, gid, f$], [gid, f$, <], [f$, <, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 653 =============================

gid f$  gid 	 	+	*	id	$  	+	. 


>> Tokens are: 
[gid, f$, , gid, 	 	, +, 	, *, 	, d, 	, $,  	, +, 	, .] 

>> PoS Tags are: 
[('gid', 'ADJ'), ('f$', 'NUM'), ('\uf0df', 'NOUN'), ('gid', 'ADJ'), ('\t \t', 'SPACE'), ('+', 'CCONJ'), ('\t', 'SPACE'), ('*', 'PUNCT'), ('\t', 'SPACE'), ('d', 'PROPN'), ('\t', 'SPACE'), ('$', 'SYM'), (' \t', 'SPACE'), ('+', 'PROPN'), ('\t', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('gid', 'amod'), ('f$', 'punct'), ('\uf0df', 'nmod'), ('gid', 'amod'), ('\t \t', 'ROOT'), ('+', 'cc'), ('\t', 'appos'), ('*', 'punct'), ('\t', 'acl'), ('d', 'appos'), ('\t', 'appos'), ('$', 'nmod'), (' \t', 'appos'), ('+', 'appos'), ('\t', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[gid, f$], [f$, ], [, gid], [gid, 	 	], [	 	, +], [+, 	], [	, *], [*, 	], [	, d], [d, 	], [	, $], [$,  	], [ 	, +], [+, 	], [	, .]]

>> Trigrams: 
[[gid, f$, ], [f$, , gid], [, gid, 	 	], [gid, 	 	, +], [	 	, +, 	], [+, 	, *], [	, *, 	], [*, 	, d], [	, d, 	], [d, 	, $], [	, $,  	], [$,  	, +], [ 	, +, 	], [+, 	, .]]

>> Noun Phrases are: 
[id, +]

>> Named Entities are: 
[]


============================ Sentence 654 =============================

> 


>> Tokens are: 
[>] 

>> PoS Tags are: 
[('>', 'X')] 

>> Dependency Tags are: 
[('>', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 655 =============================

	<. 


>> Tokens are: 
[	, <, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('<', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[	, <], [<, .]]

>> Trigrams: 
[[	, <, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 656 =============================

	<. 


>> Tokens are: 
[	, <, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('<', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[	, <], [<, .]]

>> Trigrams: 
[[	, <, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 657 =============================

	. 


>> Tokens are: 
[	, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[	, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 658 =============================

> 


>> Tokens are: 
[>] 

>> PoS Tags are: 
[('>', 'X')] 

>> Dependency Tags are: 
[('>', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 659 =============================

	*	. 


>> Tokens are: 
[	, *, 	, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('*', 'PUNCT'), ('\t', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('*', 'punct'), ('\t', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[	, *], [*, 	], [	, .]]

>> Trigrams: 
[[	, *, 	], [*, 	, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 660 =============================

>	. 


>> Tokens are: 
[>, 	, .] 

>> PoS Tags are: 
[('>', 'X'), ('\t', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('>', 'dep'), ('\t', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[>, 	], [	, .]]

>> Trigrams: 
[[>, 	, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 661 =============================

>	<. 


>> Tokens are: 
[>, 	, <, .] 

>> PoS Tags are: 
[('>', 'X'), ('\t', 'SPACE'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('>', 'dep'), ('\t', 'ROOT'), ('<', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[>, 	], [	, <], [<, .]]

>> Trigrams: 
[[>, 	, <], [	, <, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 662 =============================

	. 


>> Tokens are: 
[	, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[	, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 663 =============================

> 


>> Tokens are: 
[>] 

>> PoS Tags are: 
[('>', 'X')] 

>> Dependency Tags are: 
[('>', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 664 =============================

	id	. 


>> Tokens are: 
[	, d, 	, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('d', 'PROPN'), ('\t', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('d', 'compound'), ('\t', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[	, d], [d, 	], [	, .]]

>> Trigrams: 
[[	, d, 	], [d, 	, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 665 =============================

> 


>> Tokens are: 
[>] 

>> PoS Tags are: 
[('>', 'X')] 

>> Dependency Tags are: 
[('>', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 666 =============================

	.>	 	. 


>> Tokens are: 
[	, ., >, 	 	, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('.', 'PUNCT'), ('>', 'X'), ('\t\xa0\t', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('.', 'punct'), ('>', 'nmod'), ('\t\xa0\t', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[	, .], [., >], [>, 	 	], [	 	, .]]

>> Trigrams: 
[[	, ., >], [., >, 	 	], [>, 	 	, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 667 =============================

> 


>> Tokens are: 
[>] 

>> PoS Tags are: 
[('>', 'X')] 

>> Dependency Tags are: 
[('>', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 668 =============================

	$	<. 


>> Tokens are: 
[	, $, 	, <, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('$', 'SYM'), ('\t', 'SPACE'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('$', 'nmod'), ('\t', 'appos'), ('<', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[	, $], [$, 	], [	, <], [<, .]]

>> Trigrams: 
[[	, $, 	], [$, 	, <], [	, <, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 669 =============================

	<. 


>> Tokens are: 
[	, <, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('<', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[	, <], [<, .]]

>> Trigrams: 
[[	, <, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 670 =============================

	<. 


>> Tokens are: 
[	, <, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('<', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[	, <], [<, .]]

>> Trigrams: 
[[	, <, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 671 =============================

	   	 				  	 				  	 				  f g    Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#› 


>> Tokens are: 
[	   	 				  	 				  	 				  , f, g,    , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›] 

>> PoS Tags are: 
[('\t\xa0  \t \t\t\t\t  \t \t\t\t\t  \t \t\t\t\t  ', 'SPACE'), ('f', 'X'), ('g', 'NOUN'), ('   ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X')] 

>> Dependency Tags are: 
[('\t\xa0  \t \t\t\t\t  \t \t\t\t\t  \t \t\t\t\t  ', 'quantmod'), ('f', 'quantmod'), ('g', 'quantmod'), ('   ', 'nummod'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'nsubj'), ('#', 'appos'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct')]

>> Bigrams: 
[[	   	 				  	 				  	 				  , f], [f, g], [g,    ], [   , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›]]

>> Trigrams: 
[[	   	 				  	 				  	 				  , f, g], [f, g,    ], [g,    , Prof.], [   , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›]]

>> Noun Phrases are: 
[	   	 				  	 				  	 				  f g    Prof. Jay R Dhamsaniya, (PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('Jay R Dhamsaniya', 'ORG'), ('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 672 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 673 =============================

Operator precedence function if a <· b, place an edge from the group of gb to the group of fa    if a ·> b, place an edge from the group of fa to the group of gb  f+ f* fid g+ g* gid 	 	+	*	id	$  	+	. 


>> Tokens are: 
[Operator, precedence, function, <, ·, b, ,, place, edge, group, gb, group, fa,    , ·, >, b, ,, place, edge, group, fa, group, gb,  , f+, f, *, fid, g+, g, *, gid, 	 	, +, 	, *, 	, d, 	, $,  	, +, 	, .] 

>> PoS Tags are: 
[('Operator', 'NOUN'), ('precedence', 'NOUN'), ('function', 'NOUN'), ('<', 'X'), ('·', 'PUNCT'), ('b', 'NOUN'), (',', 'PUNCT'), ('place', 'VERB'), ('edge', 'NOUN'), ('group', 'NOUN'), ('gb', 'NOUN'), ('group', 'NOUN'), ('fa', 'NOUN'), ('   ', 'SPACE'), ('·', 'PUNCT'), ('>', 'X'), ('b', 'NOUN'), (',', 'PUNCT'), ('place', 'VERB'), ('edge', 'NOUN'), ('group', 'NOUN'), ('fa', 'NOUN'), ('group', 'NOUN'), ('gb', 'PRON'), (' ', 'SPACE'), ('f+', 'X'), ('f', 'X'), ('*', 'PUNCT'), ('fid', 'NOUN'), ('g+', 'NOUN'), ('g', 'X'), ('*', 'PUNCT'), ('gid', 'ADJ'), ('\t \t', 'SPACE'), ('+', 'CCONJ'), ('\t', 'SPACE'), ('*', 'PUNCT'), ('\t', 'SPACE'), ('d', 'PROPN'), ('\t', 'SPACE'), ('$', 'SYM'), (' \t', 'SPACE'), ('+', 'PROPN'), ('\t', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Operator', 'compound'), ('precedence', 'compound'), ('function', 'ROOT'), ('<', 'dep'), ('·', 'punct'), ('b', 'meta'), (',', 'punct'), ('place', 'advcl'), ('edge', 'dobj'), ('group', 'pobj'), ('gb', 'pobj'), ('group', 'pobj'), ('fa', 'pobj'), ('   ', 'pobj'), ('·', 'punct'), ('>', 'punct'), ('b', 'prep'), (',', 'punct'), ('place', 'advcl'), ('edge', 'dobj'), ('group', 'pobj'), ('fa', 'pobj'), ('group', 'pobj'), ('gb', 'nmod'), (' ', 'pobj'), ('f+', 'punct'), ('f', 'meta'), ('*', 'punct'), ('fid', 'compound'), ('g+', 'punct'), ('g', 'punct'), ('*', 'punct'), ('gid', 'amod'), ('\t \t', 'appos'), ('+', 'cc'), ('\t', 'conj'), ('*', 'punct'), ('\t', 'appos'), ('d', 'oprd'), ('\t', 'appos'), ('$', 'nmod'), (' \t', 'appos'), ('+', 'prep'), ('\t', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Operator, precedence], [precedence, function], [function, <], [<, ·], [·, b], [b, ,], [,, place], [place, edge], [edge, group], [group, gb], [gb, group], [group, fa], [fa,    ], [   , ·], [·, >], [>, b], [b, ,], [,, place], [place, edge], [edge, group], [group, fa], [fa, group], [group, gb], [gb,  ], [ , f+], [f+, f], [f, *], [*, fid], [fid, g+], [g+, g], [g, *], [*, gid], [gid, 	 	], [	 	, +], [+, 	], [	, *], [*, 	], [	, d], [d, 	], [	, $], [$,  	], [ 	, +], [+, 	], [	, .]]

>> Trigrams: 
[[Operator, precedence, function], [precedence, function, <], [function, <, ·], [<, ·, b], [·, b, ,], [b, ,, place], [,, place, edge], [place, edge, group], [edge, group, gb], [group, gb, group], [gb, group, fa], [group, fa,    ], [fa,    , ·], [   , ·, >], [·, >, b], [>, b, ,], [b, ,, place], [,, place, edge], [place, edge, group], [edge, group, fa], [group, fa, group], [fa, group, gb], [group, gb,  ], [gb,  , f+], [ , f+, f], [f+, f, *], [f, *, fid], [*, fid, g+], [fid, g+, g], [g+, g, *], [g, *, gid], [*, gid, 	 	], [gid, 	 	, +], [	 	, +, 	], [+, 	, *], [	, *, 	], [*, 	, d], [	, d, 	], [d, 	, $], [	, $,  	], [$,  	, +], [ 	, +, 	], [+, 	, .]]

>> Noun Phrases are: 
[Operator precedence function, an edge, the group, gb, the group, fa, an edge, the group, fa, the group, d]

>> Named Entities are: 
[]


============================ Sentence 674 =============================

> 


>> Tokens are: 
[>] 

>> PoS Tags are: 
[('>', 'X')] 

>> Dependency Tags are: 
[('>', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 675 =============================

	<. 


>> Tokens are: 
[	, <, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('<', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[	, <], [<, .]]

>> Trigrams: 
[[	, <, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 676 =============================

	<. 


>> Tokens are: 
[	, <, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('<', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[	, <], [<, .]]

>> Trigrams: 
[[	, <, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 677 =============================

	. 


>> Tokens are: 
[	, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[	, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 678 =============================

> 


>> Tokens are: 
[>] 

>> PoS Tags are: 
[('>', 'X')] 

>> Dependency Tags are: 
[('>', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 679 =============================

	*	. 


>> Tokens are: 
[	, *, 	, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('*', 'PUNCT'), ('\t', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('*', 'punct'), ('\t', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[	, *], [*, 	], [	, .]]

>> Trigrams: 
[[	, *, 	], [*, 	, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 680 =============================

>	. 


>> Tokens are: 
[>, 	, .] 

>> PoS Tags are: 
[('>', 'X'), ('\t', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('>', 'dep'), ('\t', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[>, 	], [	, .]]

>> Trigrams: 
[[>, 	, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 681 =============================

>	<. 


>> Tokens are: 
[>, 	, <, .] 

>> PoS Tags are: 
[('>', 'X'), ('\t', 'SPACE'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('>', 'dep'), ('\t', 'ROOT'), ('<', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[>, 	], [	, <], [<, .]]

>> Trigrams: 
[[>, 	, <], [	, <, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 682 =============================

	. 


>> Tokens are: 
[	, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[	, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 683 =============================

> 


>> Tokens are: 
[>] 

>> PoS Tags are: 
[('>', 'X')] 

>> Dependency Tags are: 
[('>', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 684 =============================

	id	. 


>> Tokens are: 
[	, d, 	, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('d', 'PROPN'), ('\t', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('d', 'compound'), ('\t', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[	, d], [d, 	], [	, .]]

>> Trigrams: 
[[	, d, 	], [d, 	, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 685 =============================

> 


>> Tokens are: 
[>] 

>> PoS Tags are: 
[('>', 'X')] 

>> Dependency Tags are: 
[('>', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 686 =============================

	.>	 	. 


>> Tokens are: 
[	, ., >, 	 	, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('.', 'PUNCT'), ('>', 'X'), ('\t\xa0\t', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('.', 'punct'), ('>', 'nmod'), ('\t\xa0\t', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[	, .], [., >], [>, 	 	], [	 	, .]]

>> Trigrams: 
[[	, ., >], [., >, 	 	], [>, 	 	, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 687 =============================

> 


>> Tokens are: 
[>] 

>> PoS Tags are: 
[('>', 'X')] 

>> Dependency Tags are: 
[('>', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 688 =============================

	$	<. 


>> Tokens are: 
[	, $, 	, <, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('$', 'SYM'), ('\t', 'SPACE'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('$', 'nmod'), ('\t', 'appos'), ('<', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[	, $], [$, 	], [	, <], [<, .]]

>> Trigrams: 
[[	, $, 	], [$, 	, <], [	, <, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 689 =============================

	<. 


>> Tokens are: 
[	, <, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('<', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[	, <], [<, .]]

>> Trigrams: 
[[	, <, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 690 =============================

	<. 


>> Tokens are: 
[	, <, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('<', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[	, <], [<, .]]

>> Trigrams: 
[[	, <, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 691 =============================

	   	 				  	 				  	 				  f+ <. 


>> Tokens are: 
[	   	 				  	 				  	 				  , f+, <, .] 

>> PoS Tags are: 
[('\t\xa0  \t \t\t\t\t  \t \t\t\t\t  \t \t\t\t\t  ', 'SPACE'), ('f+', 'PUNCT'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t\xa0  \t \t\t\t\t  \t \t\t\t\t  \t \t\t\t\t  ', 'nummod'), ('f+', 'punct'), ('<', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[	   	 				  	 				  	 				  , f+], [f+, <], [<, .]]

>> Trigrams: 
[[	   	 				  	 				  	 				  , f+, <], [f+, <, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 692 =============================

g$ f+  g$ f* <. 


>> Tokens are: 
[g$, f+, , g$, f, *, <, .] 

>> PoS Tags are: 
[('g$', 'NOUN'), ('f+', 'PUNCT'), ('\uf0e0', 'PROPN'), ('g$', 'NOUN'), ('f', 'X'), ('*', 'PUNCT'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('g$', 'ROOT'), ('f+', 'punct'), ('\uf0e0', 'appos'), ('g$', 'appos'), ('f', 'appos'), ('*', 'punct'), ('<', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[g$, f+], [f+, ], [, g$], [g$, f], [f, *], [*, <], [<, .]]

>> Trigrams: 
[[g$, f+, ], [f+, , g$], [, g$, f], [g$, f, *], [f, *, <], [*, <, .]]

>> Noun Phrases are: 
[g$, , g$]

>> Named Entities are: 
[]


============================ Sentence 693 =============================

g$ f*  g$ fid <. 


>> Tokens are: 
[g$, f, *, , g$, fid, <, .] 

>> PoS Tags are: 
[('g$', 'NOUN'), ('f', 'PUNCT'), ('*', 'PUNCT'), ('\uf0e0', 'NOUN'), ('g$', 'NOUN'), ('fid', 'VERB'), ('<', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('g$', 'dep'), ('f', 'punct'), ('*', 'punct'), ('\uf0e0', 'nmod'), ('g$', 'nsubj'), ('fid', 'ROOT'), ('<', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[g$, f], [f, *], [*, ], [, g$], [g$, fid], [fid, <], [<, .]]

>> Trigrams: 
[[g$, f, *], [f, *, ], [*, , g$], [, g$, fid], [g$, fid, <], [fid, <, .]]

>> Noun Phrases are: 
[ g$]

>> Named Entities are: 
[]


============================ Sentence 694 =============================

g$ fid  g$ f g f$ g$    Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[g$, fid, , g$, f, g, f$, g$,    , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('g$', 'NOUN'), ('fid', 'NOUN'), ('\uf0e0', 'PROPN'), ('g$', 'NOUN'), ('f', 'X'), ('g', 'DET'), ('f$', 'NUM'), ('g$', 'NOUN'), ('   ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('g$', 'punct'), ('fid', 'ROOT'), ('\uf0e0', 'dobj'), ('g$', 'npadvmod'), ('f', 'dep'), ('g', 'det'), ('f$', 'compound'), ('g$', 'compound'), ('   ', 'nummod'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'dobj'), ('#', 'dobj'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'nsubj'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'parataxis'), ('  ', 'dobj'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'dobj'), ('‹#›', 'punct'), ('  ', 'appos'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'appos'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'nsubj'), ('\uf077', 'ccomp'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[g$, fid], [fid, ], [, g$], [g$, f], [f, g], [g, f$], [f$, g$], [g$,    ], [   , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[g$, fid, ], [fid, , g$], [, g$, f], [g$, f, g], [f, g, f$], [g, f$, g$], [f$, g$,    ], [g$,    , Prof.], [   , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[g$ fid, , f g f$ g$    Prof. Jay R Dhamsaniya, PS, Unit, – Basic Probability, Prof. Dixita B Kagathara, #, (CD, Unit, Theory, I]

>> Named Entities are: 
[('Jay R Dhamsaniya', 'ORG'), ('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 695 =============================

Operator precedence function 	 	+	*	id	$  	f 	2			  	 g 


>> Tokens are: 
[Operator, precedence, function, 	 	, +, 	, *, 	, d, 	, $,  	, f, 	, 2, 			  	 , g] 

>> PoS Tags are: 
[('Operator', 'NOUN'), ('precedence', 'NOUN'), ('function', 'NOUN'), ('\t \t', 'SPACE'), ('+', 'CCONJ'), ('\t', 'SPACE'), ('*', 'PUNCT'), ('\t', 'SPACE'), ('d', 'PROPN'), ('\t', 'SPACE'), ('$', 'SYM'), (' \t', 'SPACE'), ('f', 'PART'), ('\t', 'SPACE'), ('2', 'NUM'), ('\t\t\t  \t ', 'SPACE'), ('g', 'NOUN')] 

>> Dependency Tags are: 
[('Operator', 'compound'), ('precedence', 'compound'), ('function', 'compound'), ('\t \t', 'ROOT'), ('+', 'cc'), ('\t', 'conj'), ('*', 'punct'), ('\t', 'prep'), ('d', 'appos'), ('\t', 'appos'), ('$', 'nmod'), (' \t', 'appos'), ('f', 'appos'), ('\t', 'appos'), ('2', 'nummod'), ('\t\t\t  \t ', 'npadvmod'), ('g', 'appos')]

>> Bigrams: 
[[Operator, precedence], [precedence, function], [function, 	 	], [	 	, +], [+, 	], [	, *], [*, 	], [	, d], [d, 	], [	, $], [$,  	], [ 	, f], [f, 	], [	, 2], [2, 			  	 ], [			  	 , g]]

>> Trigrams: 
[[Operator, precedence, function], [precedence, function, 	 	], [function, 	 	, +], [	 	, +, 	], [+, 	, *], [	, *, 	], [*, 	, d], [	, d, 	], [d, 	, $], [	, $,  	], [$,  	, f], [ 	, f, 	], [f, 	, 2], [	, 2, 			  	 ], [2, 			  	 , g]]

>> Noun Phrases are: 
[id, g]

>> Named Entities are: 
[]


============================ Sentence 696 =============================

				   f+ f* fid f$ g+ g* gid g$ 


>> Tokens are: 
[				   , f+, f, *, fid, f$, g+, g, *, gid, g$] 

>> PoS Tags are: 
[('\t\t\t\t   ', 'SPACE'), ('f+', 'PUNCT'), ('f', 'X'), ('*', 'PUNCT'), ('fid', 'NOUN'), ('f$', 'X'), ('g+', 'NOUN'), ('g', 'X'), ('*', 'PUNCT'), ('gid', 'ADJ'), ('g$', 'NOUN')] 

>> Dependency Tags are: 
[('\t\t\t\t   ', 'dep'), ('f+', 'punct'), ('f', 'dep'), ('*', 'punct'), ('fid', 'ROOT'), ('f$', 'dobj'), ('g+', 'punct'), ('g', 'punct'), ('*', 'punct'), ('gid', 'dobj'), ('g$', 'punct')]

>> Bigrams: 
[[				   , f+], [f+, f], [f, *], [*, fid], [fid, f$], [f$, g+], [g+, g], [g, *], [*, gid], [gid, g$]]

>> Trigrams: 
[[				   , f+, f], [f+, f, *], [f, *, fid], [*, fid, f$], [fid, f$, g+], [f$, g+, g], [g+, g, *], [g, *, gid], [*, gid, g$]]

>> Noun Phrases are: 
[				   f+ f* fid]

>> Named Entities are: 
[]


============================ Sentence 697 =============================

If the constructed graph has a cycle then no precedence functions exist. 


>> Tokens are: 
[constructed, graph, cycle, precedence, functions, exist, .] 

>> PoS Tags are: 
[('constructed', 'VERB'), ('graph', 'NOUN'), ('cycle', 'NOUN'), ('precedence', 'NOUN'), ('functions', 'NOUN'), ('exist', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('constructed', 'amod'), ('graph', 'nsubj'), ('cycle', 'dobj'), ('precedence', 'compound'), ('functions', 'nsubj'), ('exist', 'relcl'), ('.', 'punct')]

>> Bigrams: 
[[constructed, graph], [graph, cycle], [cycle, precedence], [precedence, functions], [functions, exist], [exist, .]]

>> Trigrams: 
[[constructed, graph, cycle], [graph, cycle, precedence], [cycle, precedence, functions], [precedence, functions, exist], [functions, exist, .]]

>> Noun Phrases are: 
[the constructed graph, a cycle, no precedence functions]

>> Named Entities are: 
[]


============================ Sentence 698 =============================

When there are no cycles collect the length of the longest paths from the groups of fa and gb respectively. 


>> Tokens are: 
[cycles, collect, length, longest, paths, groups, fa, gb, respectively, .] 

>> PoS Tags are: 
[('cycles', 'NOUN'), ('collect', 'VERB'), ('length', 'NOUN'), ('longest', 'ADJ'), ('paths', 'NOUN'), ('groups', 'NOUN'), ('fa', 'NOUN'), ('gb', 'VERB'), ('respectively', 'ADV'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('cycles', 'attr'), ('collect', 'ROOT'), ('length', 'dobj'), ('longest', 'amod'), ('paths', 'pobj'), ('groups', 'pobj'), ('fa', 'pobj'), ('gb', 'conj'), ('respectively', 'advmod'), ('.', 'punct')]

>> Bigrams: 
[[cycles, collect], [collect, length], [length, longest], [longest, paths], [paths, groups], [groups, fa], [fa, gb], [gb, respectively], [respectively, .]]

>> Trigrams: 
[[cycles, collect, length], [collect, length, longest], [length, longest, paths], [longest, paths, groups], [paths, groups, fa], [groups, fa, gb], [fa, gb, respectively], [gb, respectively, .]]

>> Noun Phrases are: 
[no cycles, the length, the longest paths, the groups, fa]

>> Named Entities are: 
[]


============================ Sentence 699 =============================

    Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#› 


>> Tokens are: 
[    , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›] 

>> PoS Tags are: 
[('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X')] 

>> Dependency Tags are: 
[('    ', 'nummod'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'nsubj'), ('#', 'appos'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct')]

>> Bigrams: 
[[    , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›]]

>> Trigrams: 
[[    , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›]]

>> Noun Phrases are: 
[    Prof. Jay R Dhamsaniya, (PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('Jay R Dhamsaniya', 'ORG'), ('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 700 =============================

 Operator precedence function 	 	+	*	id	$  	f 	2			  	  


>> Tokens are: 
[ , Operator, precedence, function, 	 	, +, 	, *, 	, d, 	, $,  	, f, 	, 2, 			  	 ] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('Operator', 'NOUN'), ('precedence', 'NOUN'), ('function', 'NOUN'), ('\t \t', 'SPACE'), ('+', 'CCONJ'), ('\t', 'SPACE'), ('*', 'PUNCT'), ('\t', 'SPACE'), ('d', 'PROPN'), ('\t', 'SPACE'), ('$', 'SYM'), (' \t', 'SPACE'), ('f', 'PART'), ('\t', 'SPACE'), ('2', 'NUM'), ('\t\t\t  \t ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'compound'), ('Operator', 'compound'), ('precedence', 'compound'), ('function', 'compound'), ('\t \t', 'ROOT'), ('+', 'cc'), ('\t', 'appos'), ('*', 'punct'), ('\t', 'appos'), ('d', 'appos'), ('\t', 'appos'), ('$', 'nmod'), (' \t', 'appos'), ('f', 'appos'), ('\t', 'appos'), ('2', 'nummod'), ('\t\t\t  \t ', 'appos')]

>> Bigrams: 
[[ , Operator], [Operator, precedence], [precedence, function], [function, 	 	], [	 	, +], [+, 	], [	, *], [*, 	], [	, d], [d, 	], [	, $], [$,  	], [ 	, f], [f, 	], [	, 2], [2, 			  	 ]]

>> Trigrams: 
[[ , Operator, precedence], [Operator, precedence, function], [precedence, function, 	 	], [function, 	 	, +], [	 	, +, 	], [+, 	, *], [	, *, 	], [*, 	, d], [	, d, 	], [d, 	, $], [	, $,  	], [$,  	, f], [ 	, f, 	], [f, 	, 2], [	, 2, 			  	 ]]

>> Noun Phrases are: 
[id]

>> Named Entities are: 
[]


============================ Sentence 701 =============================

g 


>> Tokens are: 
[g] 

>> PoS Tags are: 
[('g', 'PROPN')] 

>> Dependency Tags are: 
[('g', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[g]

>> Named Entities are: 
[]


============================ Sentence 702 =============================

	1			   f+ f* fid f$ g+ g* gid g$    Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#› 


>> Tokens are: 
[	, 1, 			   , f+, f, *, fid, f$, g+, g, *, gid, g$,    , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('1', 'NUM'), ('\t\t\t   ', 'SPACE'), ('f+', 'PUNCT'), ('f', 'X'), ('*', 'PUNCT'), ('fid', 'NOUN'), ('f$', 'X'), ('g+', 'NOUN'), ('g', 'DET'), ('*', 'PUNCT'), ('gid', 'NOUN'), ('g$', 'NOUN'), ('   ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X')] 

>> Dependency Tags are: 
[('\t', 'nmod'), ('1', 'nummod'), ('\t\t\t   ', 'nsubj'), ('f+', 'punct'), ('f', 'appos'), ('*', 'punct'), ('fid', 'advcl'), ('f$', 'dobj'), ('g+', 'dep'), ('g', 'punct'), ('*', 'punct'), ('gid', 'amod'), ('g$', 'quantmod'), ('   ', 'nummod'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'dobj'), ('#', 'punct'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'nsubj'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'parataxis'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'appos'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'appos'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct')]

>> Bigrams: 
[[	, 1], [1, 			   ], [			   , f+], [f+, f], [f, *], [*, fid], [fid, f$], [f$, g+], [g+, g], [g, *], [*, gid], [gid, g$], [g$,    ], [   , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›]]

>> Trigrams: 
[[	, 1, 			   ], [1, 			   , f+], [			   , f+, f], [f+, f, *], [f, *, fid], [*, fid, f$], [fid, f$, g+], [f$, g+, g], [g+, g, *], [g, *, gid], [*, gid, g$], [gid, g$,    ], [g$,    , Prof.], [   , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›]]

>> Noun Phrases are: 
[* gid g$    Prof. Jay R Dhamsaniya, PS, Unit, Basic Probability, Prof. Dixita B Kagathara, #, (CD, Unit, Theory, I]

>> Named Entities are: 
[('Jay R Dhamsaniya', 'ORG'), ('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 703 =============================

 Operator precedence function 	 	+	*	id	$  	f 	2	4		  	 g	1			   f+ f* fid f$ g+ g* gid g$    Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#› 


>> Tokens are: 
[ , Operator, precedence, function, 	 	, +, 	, *, 	, d, 	, $,  	, f, 	, 2, 	, 4, 		  	 , g, 	, 1, 			   , f+, f, *, fid, f$, g+, g, *, gid, g$,    , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('Operator', 'NOUN'), ('precedence', 'NOUN'), ('function', 'NOUN'), ('\t \t', 'SPACE'), ('+', 'CCONJ'), ('\t', 'SPACE'), ('*', 'PUNCT'), ('\t', 'SPACE'), ('d', 'PROPN'), ('\t', 'SPACE'), ('$', 'SYM'), (' \t', 'SPACE'), ('f', 'PART'), ('\t', 'SPACE'), ('2', 'NUM'), ('\t', 'SPACE'), ('4', 'NUM'), ('\t\t  \t ', 'SPACE'), ('g', 'PROPN'), ('\t', 'SPACE'), ('1', 'NUM'), ('\t\t\t   ', 'SPACE'), ('f+', 'PUNCT'), ('f', 'X'), ('*', 'PUNCT'), ('fid', 'NOUN'), ('f$', 'X'), ('g+', 'NOUN'), ('g', 'DET'), ('*', 'PUNCT'), ('gid', 'NOUN'), ('g$', 'NOUN'), ('   ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X')] 

>> Dependency Tags are: 
[(' ', 'compound'), ('Operator', 'compound'), ('precedence', 'compound'), ('function', 'compound'), ('\t \t', 'nsubj'), ('+', 'cc'), ('\t', 'appos'), ('*', 'punct'), ('\t', 'appos'), ('d', 'appos'), ('\t', 'appos'), ('$', 'nmod'), (' \t', 'appos'), ('f', 'appos'), ('\t', 'nmod'), ('2', 'nummod'), ('\t', 'quantmod'), ('4', 'nummod'), ('\t\t  \t ', 'compound'), ('g', 'appos'), ('\t', 'nmod'), ('1', 'nummod'), ('\t\t\t   ', 'appos'), ('f+', 'punct'), ('f', 'appos'), ('*', 'punct'), ('fid', 'advcl'), ('f$', 'dobj'), ('g+', 'dep'), ('g', 'punct'), ('*', 'punct'), ('gid', 'amod'), ('g$', 'quantmod'), ('   ', 'nummod'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'dobj'), ('#', 'punct'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'nsubj'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'parataxis'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'appos'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'appos'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct')]

>> Bigrams: 
[[ , Operator], [Operator, precedence], [precedence, function], [function, 	 	], [	 	, +], [+, 	], [	, *], [*, 	], [	, d], [d, 	], [	, $], [$,  	], [ 	, f], [f, 	], [	, 2], [2, 	], [	, 4], [4, 		  	 ], [		  	 , g], [g, 	], [	, 1], [1, 			   ], [			   , f+], [f+, f], [f, *], [*, fid], [fid, f$], [f$, g+], [g+, g], [g, *], [*, gid], [gid, g$], [g$,    ], [   , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›]]

>> Trigrams: 
[[ , Operator, precedence], [Operator, precedence, function], [precedence, function, 	 	], [function, 	 	, +], [	 	, +, 	], [+, 	, *], [	, *, 	], [*, 	, d], [	, d, 	], [d, 	, $], [	, $,  	], [$,  	, f], [ 	, f, 	], [f, 	, 2], [	, 2, 	], [2, 	, 4], [	, 4, 		  	 ], [4, 		  	 , g], [		  	 , g, 	], [g, 	, 1], [	, 1, 			   ], [1, 			   , f+], [			   , f+, f], [f+, f, *], [f, *, fid], [*, fid, f$], [fid, f$, g+], [f$, g+, g], [g+, g, *], [g, *, gid], [*, gid, g$], [gid, g$,    ], [g$,    , Prof.], [   , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›]]

>> Noun Phrases are: 
[id, 	2	4		  	 g, * gid g$    Prof. Jay R Dhamsaniya, PS, Unit, Basic Probability, Prof. Dixita B Kagathara, #, (CD, Unit, Theory, I]

>> Named Entities are: 
[('2', 'CARDINAL'), ('4', 'CARDINAL'), ('1', 'CARDINAL'), ('Jay R Dhamsaniya', 'ORG'), ('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 704 =============================

 Operator precedence function  	 	+	* 


>> Tokens are: 
[ , Operator, precedence, function,  	 	, +, 	, *] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('Operator', 'NOUN'), ('precedence', 'NOUN'), ('function', 'NOUN'), (' \t \t', 'SPACE'), ('+', 'NOUN'), ('\t', 'SPACE'), ('*', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'compound'), ('Operator', 'compound'), ('precedence', 'compound'), ('function', 'ROOT'), (' \t \t', 'nummod'), ('+', 'punct'), ('\t', 'appos'), ('*', 'punct')]

>> Bigrams: 
[[ , Operator], [Operator, precedence], [precedence, function], [function,  	 	], [ 	 	, +], [+, 	], [	, *]]

>> Trigrams: 
[[ , Operator, precedence], [Operator, precedence, function], [precedence, function,  	 	], [function,  	 	, +], [ 	 	, +, 	], [+, 	, *]]

>> Noun Phrases are: 
[ Operator precedence function]

>> Named Entities are: 
[]


============================ Sentence 705 =============================

	id	$  	f 	2	4		  	 g	1	3		   f+ f* fid f$ g+ g* gid g$    Prof. Jay R Dhamsaniya 


>> Tokens are: 
[	, d, 	, $,  	, f, 	, 2, 	, 4, 		  	 , g, 	, 1, 	, 3, 		   , f+, f, *, fid, f$, g+, g, *, gid, g$,    , Prof., Jay, R, Dhamsaniya] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('d', 'PROPN'), ('\t', 'SPACE'), ('$', 'SYM'), (' \t', 'SPACE'), ('f', 'PART'), ('\t', 'SPACE'), ('2', 'NUM'), ('\t', 'SPACE'), ('4', 'NUM'), ('\t\t  \t ', 'SPACE'), ('g', 'PROPN'), ('\t', 'SPACE'), ('1', 'NUM'), ('\t', 'SPACE'), ('3', 'NUM'), ('\t\t   ', 'SPACE'), ('f+', 'PUNCT'), ('f', 'X'), ('*', 'PUNCT'), ('fid', 'NOUN'), ('f$', 'X'), ('g+', 'NOUN'), ('g', 'DET'), ('*', 'PUNCT'), ('gid', 'NOUN'), ('g$', 'NOUN'), ('   ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN')] 

>> Dependency Tags are: 
[('\t', 'nmod'), ('d', 'compound'), ('\t', 'nsubj'), ('$', 'nmod'), (' \t', 'appos'), ('f', 'punct'), ('\t', 'nmod'), ('2', 'nummod'), ('\t', 'quantmod'), ('4', 'nummod'), ('\t\t  \t ', 'nmod'), ('g', 'appos'), ('\t', 'nmod'), ('1', 'nummod'), ('\t', 'compound'), ('3', 'nummod'), ('\t\t   ', 'appos'), ('f+', 'punct'), ('f', 'punct'), ('*', 'punct'), ('fid', 'ROOT'), ('f$', 'dobj'), ('g+', 'dep'), ('g', 'punct'), ('*', 'punct'), ('gid', 'amod'), ('g$', 'quantmod'), ('   ', 'nummod'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'dobj')]

>> Bigrams: 
[[	, d], [d, 	], [	, $], [$,  	], [ 	, f], [f, 	], [	, 2], [2, 	], [	, 4], [4, 		  	 ], [		  	 , g], [g, 	], [	, 1], [1, 	], [	, 3], [3, 		   ], [		   , f+], [f+, f], [f, *], [*, fid], [fid, f$], [f$, g+], [g+, g], [g, *], [*, gid], [gid, g$], [g$,    ], [   , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya]]

>> Trigrams: 
[[	, d, 	], [d, 	, $], [	, $,  	], [$,  	, f], [ 	, f, 	], [f, 	, 2], [	, 2, 	], [2, 	, 4], [	, 4, 		  	 ], [4, 		  	 , g], [		  	 , g, 	], [g, 	, 1], [	, 1, 	], [1, 	, 3], [	, 3, 		   ], [3, 		   , f+], [		   , f+, f], [f+, f, *], [f, *, fid], [*, fid, f$], [fid, f$, g+], [f$, g+, g], [g+, g, *], [g, *, gid], [*, gid, g$], [gid, g$,    ], [g$,    , Prof.], [   , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya]]

>> Noun Phrases are: 
[	2	4		  	 g, * gid g$    Prof. Jay R Dhamsaniya]

>> Named Entities are: 
[('2', 'CARDINAL'), ('4', 'CARDINAL'), ('1', 'CARDINAL'), ('Jay R Dhamsaniya', 'ORG')]


============================ Sentence 706 =============================

#3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#› 


>> Tokens are: 
[#, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›] 

>> PoS Tags are: 
[('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X')] 

>> Dependency Tags are: 
[('#', 'npadvmod'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'npadvmod'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct')]

>> Bigrams: 
[[#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›]]

>> Trigrams: 
[[#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›]]

>> Noun Phrases are: 
[(PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 707 =============================

 Operator precedence function 	 	+	*	id	$  	f 	2	4	4	  	 g	1	3		   f+ f* fid f$ g+ g* gid g$    Prof. Jay R Dhamsaniya 


>> Tokens are: 
[ , Operator, precedence, function, 	 	, +, 	, *, 	, d, 	, $,  	, f, 	, 2, 	, 4, 	, 4, 	  	 , g, 	, 1, 	, 3, 		   , f+, f, *, fid, f$, g+, g, *, gid, g$,    , Prof., Jay, R, Dhamsaniya] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('Operator', 'NOUN'), ('precedence', 'NOUN'), ('function', 'NOUN'), ('\t \t', 'SPACE'), ('+', 'CCONJ'), ('\t', 'SPACE'), ('*', 'PUNCT'), ('\t', 'SPACE'), ('d', 'PROPN'), ('\t', 'SPACE'), ('$', 'SYM'), (' \t', 'SPACE'), ('f', 'PART'), ('\t', 'SPACE'), ('2', 'NUM'), ('\t', 'SPACE'), ('4', 'NUM'), ('\t', 'SPACE'), ('4', 'NUM'), ('\t  \t ', 'SPACE'), ('g', 'PROPN'), ('\t', 'SPACE'), ('1', 'NUM'), ('\t', 'SPACE'), ('3', 'NUM'), ('\t\t   ', 'SPACE'), ('f+', 'PUNCT'), ('f', 'X'), ('*', 'PUNCT'), ('fid', 'NOUN'), ('f$', 'X'), ('g+', 'NOUN'), ('g', 'DET'), ('*', 'PUNCT'), ('gid', 'NOUN'), ('g$', 'NOUN'), ('   ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN')] 

>> Dependency Tags are: 
[(' ', 'compound'), ('Operator', 'compound'), ('precedence', 'compound'), ('function', 'compound'), ('\t \t', 'nsubj'), ('+', 'cc'), ('\t', 'appos'), ('*', 'punct'), ('\t', 'appos'), ('d', 'appos'), ('\t', 'appos'), ('$', 'nmod'), (' \t', 'appos'), ('f', 'appos'), ('\t', 'nmod'), ('2', 'nummod'), ('\t', 'nmod'), ('4', 'nummod'), ('\t', 'appos'), ('4', 'nummod'), ('\t  \t ', 'ROOT'), ('g', 'dobj'), ('\t', 'nmod'), ('1', 'nummod'), ('\t', 'compound'), ('3', 'nummod'), ('\t\t   ', 'dobj'), ('f+', 'punct'), ('f', 'punct'), ('*', 'punct'), ('fid', 'dep'), ('f$', 'dobj'), ('g+', 'dep'), ('g', 'punct'), ('*', 'punct'), ('gid', 'amod'), ('g$', 'quantmod'), ('   ', 'nummod'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'npadvmod')]

>> Bigrams: 
[[ , Operator], [Operator, precedence], [precedence, function], [function, 	 	], [	 	, +], [+, 	], [	, *], [*, 	], [	, d], [d, 	], [	, $], [$,  	], [ 	, f], [f, 	], [	, 2], [2, 	], [	, 4], [4, 	], [	, 4], [4, 	  	 ], [	  	 , g], [g, 	], [	, 1], [1, 	], [	, 3], [3, 		   ], [		   , f+], [f+, f], [f, *], [*, fid], [fid, f$], [f$, g+], [g+, g], [g, *], [*, gid], [gid, g$], [g$,    ], [   , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya]]

>> Trigrams: 
[[ , Operator, precedence], [Operator, precedence, function], [precedence, function, 	 	], [function, 	 	, +], [	 	, +, 	], [+, 	, *], [	, *, 	], [*, 	, d], [	, d, 	], [d, 	, $], [	, $,  	], [$,  	, f], [ 	, f, 	], [f, 	, 2], [	, 2, 	], [2, 	, 4], [	, 4, 	], [4, 	, 4], [	, 4, 	  	 ], [4, 	  	 , g], [	  	 , g, 	], [g, 	, 1], [	, 1, 	], [1, 	, 3], [	, 3, 		   ], [3, 		   , f+], [		   , f+, f], [f+, f, *], [f, *, fid], [*, fid, f$], [fid, f$, g+], [f$, g+, g], [g+, g, *], [g, *, gid], [*, gid, g$], [gid, g$,    ], [g$,    , Prof.], [   , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya]]

>> Noun Phrases are: 
[id, g]

>> Named Entities are: 
[('Jay R Dhamsaniya', 'ORG')]


============================ Sentence 708 =============================

#3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#› 


>> Tokens are: 
[#, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›] 

>> PoS Tags are: 
[('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X')] 

>> Dependency Tags are: 
[('#', 'npadvmod'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'npadvmod'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct')]

>> Bigrams: 
[[#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›]]

>> Trigrams: 
[[#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›]]

>> Noun Phrases are: 
[(PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 709 =============================

 Operator precedence function 	 	+	*	id	$  	f 	2	4	4	  	 g	1	3	5	   f+ f* fid 


>> Tokens are: 
[ , Operator, precedence, function, 	 	, +, 	, *, 	, d, 	, $,  	, f, 	, 2, 	, 4, 	, 4, 	  	 , g, 	, 1, 	, 3, 	, 5, 	   , f+, f, *, fid] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('Operator', 'NOUN'), ('precedence', 'NOUN'), ('function', 'NOUN'), ('\t \t', 'SPACE'), ('+', 'CCONJ'), ('\t', 'SPACE'), ('*', 'PUNCT'), ('\t', 'SPACE'), ('d', 'PROPN'), ('\t', 'SPACE'), ('$', 'SYM'), (' \t', 'SPACE'), ('f', 'PART'), ('\t', 'SPACE'), ('2', 'NUM'), ('\t', 'SPACE'), ('4', 'NUM'), ('\t', 'SPACE'), ('4', 'NUM'), ('\t  \t ', 'SPACE'), ('g', 'PROPN'), ('\t', 'SPACE'), ('1', 'NUM'), ('\t', 'SPACE'), ('3', 'NUM'), ('\t', 'SPACE'), ('5', 'NUM'), ('\t   ', 'SPACE'), ('f+', 'PUNCT'), ('f', 'X'), ('*', 'PUNCT'), ('fid', 'NOUN')] 

>> Dependency Tags are: 
[(' ', 'compound'), ('Operator', 'compound'), ('precedence', 'compound'), ('function', 'compound'), ('\t \t', 'nsubj'), ('+', 'cc'), ('\t', 'appos'), ('*', 'punct'), ('\t', 'appos'), ('d', 'appos'), ('\t', 'appos'), ('$', 'nmod'), (' \t', 'appos'), ('f', 'appos'), ('\t', 'nmod'), ('2', 'nummod'), ('\t', 'nmod'), ('4', 'nummod'), ('\t', 'appos'), ('4', 'nummod'), ('\t  \t ', 'ROOT'), ('g', 'dobj'), ('\t', 'nmod'), ('1', 'nummod'), ('\t', 'nmod'), ('3', 'nummod'), ('\t', 'nmod'), ('5', 'nummod'), ('\t   ', 'dobj'), ('f+', 'punct'), ('f', 'appos'), ('*', 'punct'), ('fid', 'conj')]

>> Bigrams: 
[[ , Operator], [Operator, precedence], [precedence, function], [function, 	 	], [	 	, +], [+, 	], [	, *], [*, 	], [	, d], [d, 	], [	, $], [$,  	], [ 	, f], [f, 	], [	, 2], [2, 	], [	, 4], [4, 	], [	, 4], [4, 	  	 ], [	  	 , g], [g, 	], [	, 1], [1, 	], [	, 3], [3, 	], [	, 5], [5, 	   ], [	   , f+], [f+, f], [f, *], [*, fid]]

>> Trigrams: 
[[ , Operator, precedence], [Operator, precedence, function], [precedence, function, 	 	], [function, 	 	, +], [	 	, +, 	], [+, 	, *], [	, *, 	], [*, 	, d], [	, d, 	], [d, 	, $], [	, $,  	], [$,  	, f], [ 	, f, 	], [f, 	, 2], [	, 2, 	], [2, 	, 4], [	, 4, 	], [4, 	, 4], [	, 4, 	  	 ], [4, 	  	 , g], [	  	 , g, 	], [g, 	, 1], [	, 1, 	], [1, 	, 3], [	, 3, 	], [3, 	, 5], [	, 5, 	   ], [5, 	   , f+], [	   , f+, f], [f+, f, *], [f, *, fid]]

>> Noun Phrases are: 
[id, g, * fid]

>> Named Entities are: 
[]


============================ Sentence 710 =============================

f$ g+ g* gid g$    Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#› 


>> Tokens are: 
[f$, g+, g, *, gid, g$,    , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›] 

>> PoS Tags are: 
[('f$', 'X'), ('g+', 'NOUN'), ('g', 'DET'), ('*', 'PUNCT'), ('gid', 'NOUN'), ('g$', 'NOUN'), ('   ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X')] 

>> Dependency Tags are: 
[('f$', 'compound'), ('g+', 'dep'), ('g', 'dep'), ('*', 'punct'), ('gid', 'amod'), ('g$', 'quantmod'), ('   ', 'nummod'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'nsubj'), ('#', 'npadvmod'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct')]

>> Bigrams: 
[[f$, g+], [g+, g], [g, *], [*, gid], [gid, g$], [g$,    ], [   , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›]]

>> Trigrams: 
[[f$, g+, g], [g+, g, *], [g, *, gid], [*, gid, g$], [gid, g$,    ], [g$,    , Prof.], [   , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›]]

>> Noun Phrases are: 
[f$ g+ g* gid g$    Prof. Jay R Dhamsaniya, (PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('Jay R Dhamsaniya', 'ORG'), ('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 711 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 712 =============================

Operator precedence function  	 	+	* 


>> Tokens are: 
[Operator, precedence, function,  	 	, +, 	, *] 

>> PoS Tags are: 
[('Operator', 'NOUN'), ('precedence', 'NOUN'), ('function', 'NOUN'), (' \t \t', 'SPACE'), ('+', 'NOUN'), ('\t', 'SPACE'), ('*', 'PUNCT')] 

>> Dependency Tags are: 
[('Operator', 'compound'), ('precedence', 'compound'), ('function', 'ROOT'), (' \t \t', 'nummod'), ('+', 'punct'), ('\t', 'appos'), ('*', 'punct')]

>> Bigrams: 
[[Operator, precedence], [precedence, function], [function,  	 	], [ 	 	, +], [+, 	], [	, *]]

>> Trigrams: 
[[Operator, precedence, function], [precedence, function,  	 	], [function,  	 	, +], [ 	 	, +, 	], [+, 	, *]]

>> Noun Phrases are: 
[Operator precedence function]

>> Named Entities are: 
[]


============================ Sentence 713 =============================

	id	$  	f 	2	4	4	0  	 g	1	3	5	0  f+ f* fid f$ g+ g* gid g$      Prof. Jay R Dhamsaniya 


>> Tokens are: 
[	, d, 	, $,  	, f, 	, 2, 	, 4, 	, 4, 	, 0,  	 , g, 	, 1, 	, 3, 	, 5, 	, 0,  , f+, f, *, fid, f$, g+, g, *, gid, g$,      , Prof., Jay, R, Dhamsaniya] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('d', 'PROPN'), ('\t', 'SPACE'), ('$', 'SYM'), (' \t', 'SPACE'), ('f', 'PART'), ('\t', 'SPACE'), ('2', 'NUM'), ('\t', 'SPACE'), ('4', 'NUM'), ('\t', 'SPACE'), ('4', 'NUM'), ('\t', 'SPACE'), ('0', 'NUM'), (' \t ', 'SPACE'), ('g', 'PROPN'), ('\t', 'SPACE'), ('1', 'NUM'), ('\t', 'SPACE'), ('3', 'NUM'), ('\t', 'SPACE'), ('5', 'NUM'), ('\t', 'SPACE'), ('0', 'NUM'), (' ', 'SPACE'), ('f+', 'X'), ('f', 'X'), ('*', 'PUNCT'), ('fid', 'NOUN'), ('f$', 'X'), ('g+', 'NOUN'), ('g', 'DET'), ('*', 'PUNCT'), ('gid', 'NOUN'), ('g$', 'NOUN'), ('     ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN')] 

>> Dependency Tags are: 
[('\t', 'nmod'), ('d', 'compound'), ('\t', 'nsubj'), ('$', 'nmod'), (' \t', 'appos'), ('f', 'punct'), ('\t', 'nmod'), ('2', 'nummod'), ('\t', 'conj'), ('4', 'nummod'), ('\t', 'conj'), ('4', 'nummod'), ('\t', 'nmod'), ('0', 'punct'), (' \t ', 'compound'), ('g', 'appos'), ('\t', 'nmod'), ('1', 'nummod'), ('\t', 'nmod'), ('3', 'nummod'), ('\t', 'conj'), ('5', 'nummod'), ('\t', 'dobj'), ('0', 'punct'), (' ', 'appos'), ('f+', 'punct'), ('f', 'appos'), ('*', 'punct'), ('fid', 'acl'), ('f$', 'compound'), ('g+', 'ROOT'), ('g', 'punct'), ('*', 'punct'), ('gid', 'amod'), ('g$', 'punct'), ('     ', 'compound'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'appos')]

>> Bigrams: 
[[	, d], [d, 	], [	, $], [$,  	], [ 	, f], [f, 	], [	, 2], [2, 	], [	, 4], [4, 	], [	, 4], [4, 	], [	, 0], [0,  	 ], [ 	 , g], [g, 	], [	, 1], [1, 	], [	, 3], [3, 	], [	, 5], [5, 	], [	, 0], [0,  ], [ , f+], [f+, f], [f, *], [*, fid], [fid, f$], [f$, g+], [g+, g], [g, *], [*, gid], [gid, g$], [g$,      ], [     , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya]]

>> Trigrams: 
[[	, d, 	], [d, 	, $], [	, $,  	], [$,  	, f], [ 	, f, 	], [f, 	, 2], [	, 2, 	], [2, 	, 4], [	, 4, 	], [4, 	, 4], [	, 4, 	], [4, 	, 0], [	, 0,  	 ], [0,  	 , g], [ 	 , g, 	], [g, 	, 1], [	, 1, 	], [1, 	, 3], [	, 3, 	], [3, 	, 5], [	, 5, 	], [5, 	, 0], [	, 0,  ], [0,  , f+], [ , f+, f], [f+, f, *], [f, *, fid], [*, fid, f$], [fid, f$, g+], [f$, g+, g], [g+, g, *], [g, *, gid], [*, gid, g$], [gid, g$,      ], [g$,      , Prof.], [     , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya]]

>> Noun Phrases are: 
[	2	4	4	0  	 g, * gid g$      Prof. Jay R Dhamsaniya]

>> Named Entities are: 
[]


============================ Sentence 714 =============================

#3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#› 


>> Tokens are: 
[#, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›] 

>> PoS Tags are: 
[('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X')] 

>> Dependency Tags are: 
[('#', 'npadvmod'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'npadvmod'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct')]

>> Bigrams: 
[[#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›]]

>> Trigrams: 
[[#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›]]

>> Noun Phrases are: 
[(PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 715 =============================

 Parsing Methods Parsing Top down parsing Bottom up parsing (Shift reduce) Back tracking Parsing without backtracking (predictive Parsing) LR parsing Operator precedence LALR   


>> Tokens are: 
[ , Parsing, Methods, Parsing, parsing, parsing, (, Shift, reduce, ), tracking, Parsing, backtracking, (, predictive, Parsing, ), LR, parsing, Operator, precedence, LALR,  ] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('Parsing', 'PROPN'), ('Methods', 'PROPN'), ('Parsing', 'VERB'), ('parsing', 'VERB'), ('parsing', 'VERB'), ('(', 'PUNCT'), ('Shift', 'NOUN'), ('reduce', 'VERB'), (')', 'PUNCT'), ('tracking', 'VERB'), ('Parsing', 'VERB'), ('backtracking', 'VERB'), ('(', 'PUNCT'), ('predictive', 'ADJ'), ('Parsing', 'PROPN'), (')', 'PUNCT'), ('LR', 'PROPN'), ('parsing', 'VERB'), ('Operator', 'PROPN'), ('precedence', 'NOUN'), ('LALR', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'compound'), ('Parsing', 'compound'), ('Methods', 'dep'), ('Parsing', 'acl'), ('parsing', 'acl'), ('parsing', 'ccomp'), ('(', 'punct'), ('Shift', 'nsubj'), ('reduce', 'ccomp'), (')', 'punct'), ('tracking', 'ROOT'), ('Parsing', 'dobj'), ('backtracking', 'pcomp'), ('(', 'punct'), ('predictive', 'amod'), ('Parsing', 'nmod'), (')', 'punct'), ('LR', 'nsubj'), ('parsing', 'parataxis'), ('Operator', 'compound'), ('precedence', 'compound'), ('LALR', 'dobj'), (' ', 'punct')]

>> Bigrams: 
[[ , Parsing], [Parsing, Methods], [Methods, Parsing], [Parsing, parsing], [parsing, parsing], [parsing, (], [(, Shift], [Shift, reduce], [reduce, )], [), tracking], [tracking, Parsing], [Parsing, backtracking], [backtracking, (], [(, predictive], [predictive, Parsing], [Parsing, )], [), LR], [LR, parsing], [parsing, Operator], [Operator, precedence], [precedence, LALR], [LALR,  ]]

>> Trigrams: 
[[ , Parsing, Methods], [Parsing, Methods, Parsing], [Methods, Parsing, parsing], [Parsing, parsing, parsing], [parsing, parsing, (], [parsing, (, Shift], [(, Shift, reduce], [Shift, reduce, )], [reduce, ), tracking], [), tracking, Parsing], [tracking, Parsing, backtracking], [Parsing, backtracking, (], [backtracking, (, predictive], [(, predictive, Parsing], [predictive, Parsing, )], [Parsing, ), LR], [), LR, parsing], [LR, parsing, Operator], [parsing, Operator, precedence], [Operator, precedence, LALR], [precedence, LALR,  ]]

>> Noun Phrases are: 
[Top, Bottom, Shift, predictive Parsing) LR, Operator precedence LALR]

>> Named Entities are: 
[('Bottom', 'PERSON')]


============================ Sentence 716 =============================

CLR  SLR   


>> Tokens are: 
[CLR,  , SLR,  ] 

>> PoS Tags are: 
[('CLR', 'PROPN'), (' ', 'SPACE'), ('SLR', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('CLR', 'ROOT'), (' ', 'appos'), ('SLR', 'compound'), (' ', 'appos')]

>> Bigrams: 
[[CLR,  ], [ , SLR], [SLR,  ]]

>> Trigrams: 
[[CLR,  , SLR], [ , SLR,  ]]

>> Noun Phrases are: 
[CLR]

>> Named Entities are: 
[('CLR', 'ORG'), ('SLR', 'ORG')]


============================ Sentence 717 =============================

Recursive  descent  LL(1)        


>> Tokens are: 
[Recursive,  , descent,  , LL(1, ),       ] 

>> PoS Tags are: 
[('Recursive', 'PROPN'), (' ', 'SPACE'), ('descent', 'NOUN'), (' ', 'SPACE'), ('LL(1', 'NOUN'), (')', 'PUNCT'), ('      ', 'SPACE')] 

>> Dependency Tags are: 
[('Recursive', 'compound'), (' ', 'poss'), ('descent', 'appos'), (' ', 'compound'), ('LL(1', 'appos'), (')', 'punct'), ('      ', 'ROOT')]

>> Bigrams: 
[[Recursive,  ], [ , descent], [descent,  ], [ , LL(1], [LL(1, )], [),       ]]

>> Trigrams: 
[[Recursive,  , descent], [ , descent,  ], [descent,  , LL(1], [ , LL(1, )], [LL(1, ),       ]]

>> Noun Phrases are: 
[descent,  LL(1]

>> Named Entities are: 
[]


============================ Sentence 718 =============================

Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara   


>> Tokens are: 
[Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara,  ] 

>> PoS Tags are: 
[('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'nsubj'), ('#', 'appos'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'dep'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'ROOT'), ('‹#›', 'punct'), ('  ', 'appos'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), (' ', 'punct')]

>> Bigrams: 
[[Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,  ]]

>> Trigrams: 
[[Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,  ]]

>> Noun Phrases are: 
[Prof. Jay R Dhamsaniya, (PS, Unit, Prof. Dixita B Kagathara]

>> Named Entities are: 
[('PS', 'ORG'), ('Dixita', 'PERSON'), ('Kagathara', 'PERSON')]


============================ Sentence 719 =============================

#2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›  LR parser LR parsing is most efficient method of bottom up parsing which can be used to parse large class of context free grammar. 


>> Tokens are: 
[#, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  , LR, parser, LR, parsing, efficient, method, parsing, parse, large, class, context, free, grammar, .] 

>> PoS Tags are: 
[('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE'), ('LR', 'PROPN'), ('parser', 'NOUN'), ('LR', 'PROPN'), ('parsing', 'NOUN'), ('efficient', 'ADJ'), ('method', 'NOUN'), ('parsing', 'VERB'), ('parse', 'VERB'), ('large', 'ADJ'), ('class', 'NOUN'), ('context', 'NOUN'), ('free', 'ADJ'), ('grammar', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('#', 'nmod'), ('2170701', 'nsubj'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'xcomp'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'dep'), ('LR', 'compound'), ('parser', 'compound'), ('LR', 'compound'), ('parsing', 'nsubj'), ('efficient', 'amod'), ('method', 'attr'), ('parsing', 'acl'), ('parse', 'xcomp'), ('large', 'amod'), ('class', 'dobj'), ('context', 'npadvmod'), ('free', 'amod'), ('grammar', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ], [ , LR], [LR, parser], [parser, LR], [LR, parsing], [parsing, efficient], [efficient, method], [method, parsing], [parsing, parse], [parse, large], [large, class], [class, context], [context, free], [free, grammar], [grammar, .]]

>> Trigrams: 
[[#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ], [‹#›,  , LR], [ , LR, parser], [LR, parser, LR], [parser, LR, parsing], [LR, parsing, efficient], [parsing, efficient, method], [efficient, method, parsing], [method, parsing, parse], [parsing, parse, large], [parse, large, class], [large, class, context], [class, context, free], [context, free, grammar], [free, grammar, .]]

>> Noun Phrases are: 
[(CD, Unit, Theory, I, LR parser LR parsing, most efficient method, large class, context free grammar]

>> Named Entities are: 
[]


============================ Sentence 720 =============================

The technique is called LR(k) parsing:   The “L” is for left to right scanning of input symbol,   


>> Tokens are: 
[technique, called, LR(k, ), parsing, :,   , “, L, ”, left, right, scanning, input, symbol, ,,  ] 

>> PoS Tags are: 
[('technique', 'NOUN'), ('called', 'VERB'), ('LR(k', 'PROPN'), (')', 'PUNCT'), ('parsing', 'VERB'), (':', 'PUNCT'), ('  ', 'SPACE'), ('“', 'PUNCT'), ('L', 'NOUN'), ('”', 'PUNCT'), ('left', 'ADJ'), ('right', 'ADJ'), ('scanning', 'NOUN'), ('input', 'NOUN'), ('symbol', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('technique', 'nsubjpass'), ('called', 'ccomp'), ('LR(k', 'oprd'), (')', 'punct'), ('parsing', 'oprd'), (':', 'punct'), ('  ', 'oprd'), ('“', 'punct'), ('L', 'appos'), ('”', 'punct'), ('left', 'pobj'), ('right', 'amod'), ('scanning', 'pobj'), ('input', 'compound'), ('symbol', 'pobj'), (',', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[technique, called], [called, LR(k], [LR(k, )], [), parsing], [parsing, :], [:,   ], [  , “], [“, L], [L, ”], [”, left], [left, right], [right, scanning], [scanning, input], [input, symbol], [symbol, ,], [,,  ]]

>> Trigrams: 
[[technique, called, LR(k], [called, LR(k, )], [LR(k, ), parsing], [), parsing, :], [parsing, :,   ], [:,   , “], [  , “, L], [“, L, ”], [L, ”, left], [”, left, right], [left, right, scanning], [right, scanning, input], [scanning, input, symbol], [input, symbol, ,], [symbol, ,,  ]]

>> Noun Phrases are: 
[The technique, LR(k, The “L, right scanning, input symbol]

>> Named Entities are: 
[]


============================ Sentence 721 =============================

The “R” for constructing right most derivation in reverse,   


>> Tokens are: 
[“, R, ”, constructing, right, derivation, reverse, ,,  ] 

>> PoS Tags are: 
[('“', 'PUNCT'), ('R', 'NOUN'), ('”', 'PUNCT'), ('constructing', 'VERB'), ('right', 'ADV'), ('derivation', 'NOUN'), ('reverse', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('“', 'punct'), ('R', 'ROOT'), ('”', 'punct'), ('constructing', 'pcomp'), ('right', 'advmod'), ('derivation', 'dobj'), ('reverse', 'pobj'), (',', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[“, R], [R, ”], [”, constructing], [constructing, right], [right, derivation], [derivation, reverse], [reverse, ,], [,,  ]]

>> Trigrams: 
[[“, R, ”], [R, ”, constructing], [”, constructing, right], [constructing, right, derivation], [right, derivation, reverse], [derivation, reverse, ,], [reverse, ,,  ]]

>> Noun Phrases are: 
[The “R, right most derivation, reverse]

>> Named Entities are: 
[]


============================ Sentence 722 =============================

The “k” for the number of input symbols of look ahead that are used in making parsing decision. 


>> Tokens are: 
[“, k, ”, number, input, symbols, look, ahead, making, parsing, decision, .] 

>> PoS Tags are: 
[('“', 'PUNCT'), ('k', 'NOUN'), ('”', 'PUNCT'), ('number', 'NOUN'), ('input', 'NOUN'), ('symbols', 'NOUN'), ('look', 'NOUN'), ('ahead', 'ADV'), ('making', 'VERB'), ('parsing', 'VERB'), ('decision', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('“', 'punct'), ('k', 'ROOT'), ('”', 'punct'), ('number', 'pobj'), ('input', 'compound'), ('symbols', 'pobj'), ('look', 'pcomp'), ('ahead', 'advmod'), ('making', 'pcomp'), ('parsing', 'xcomp'), ('decision', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[“, k], [k, ”], [”, number], [number, input], [input, symbols], [symbols, look], [look, ahead], [ahead, making], [making, parsing], [parsing, decision], [decision, .]]

>> Trigrams: 
[[“, k, ”], [k, ”, number], [”, number, input], [number, input, symbols], [input, symbols, look], [symbols, look, ahead], [look, ahead, making], [ahead, making, parsing], [making, parsing, decision], [parsing, decision, .]]

>> Noun Phrases are: 
[The “k, the number, input symbols, look, decision]

>> Named Entities are: 
[]


============================ Sentence 723 =============================

 LR parsing program INPUT OUTPUT 	a	+	b	$	  	X 	Y 	Z 	$  Parsing Table Action Goto 


>> Tokens are: 
[ , LR, parsing, program, INPUT, OUTPUT, 	, 	, +, 	, b, 	, $, 	  	, X, 	, Y, 	, Z, 	, $,  , Parsing, Table, Action, Goto] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('LR', 'PROPN'), ('parsing', 'VERB'), ('program', 'NOUN'), ('INPUT', 'PROPN'), ('OUTPUT', 'PROPN'), ('\t', 'SPACE'), ('\t', 'SPACE'), ('+', 'CCONJ'), ('\t', 'SPACE'), ('b', 'PROPN'), ('\t', 'SPACE'), ('$', 'SYM'), ('\t  \t', 'SPACE'), ('X', 'PROPN'), ('\t', 'SPACE'), ('Y', 'PROPN'), ('\t', 'SPACE'), ('Z', 'PROPN'), ('\t', 'SPACE'), ('$', 'SYM'), (' ', 'SPACE'), ('Parsing', 'VERB'), ('Table', 'PROPN'), ('Action', 'PROPN'), ('Goto', 'PROPN')] 

>> Dependency Tags are: 
[(' ', 'nmod'), ('LR', 'npadvmod'), ('parsing', 'compound'), ('program', 'compound'), ('INPUT', 'compound'), ('OUTPUT', 'compound'), ('\t', 'ROOT'), ('\t', 'appos'), ('+', 'cc'), ('\t', 'conj'), ('b', 'appos'), ('\t', 'appos'), ('$', 'nmod'), ('\t  \t', 'appos'), ('X', 'nmod'), ('\t', 'compound'), ('Y', 'compound'), ('\t', 'compound'), ('Z', 'compound'), ('\t', 'appos'), ('$', 'nmod'), (' ', 'appos'), ('Parsing', 'advcl'), ('Table', 'compound'), ('Action', 'compound'), ('Goto', 'dobj')]

>> Bigrams: 
[[ , LR], [LR, parsing], [parsing, program], [program, INPUT], [INPUT, OUTPUT], [OUTPUT, 	], [	, 	], [	, +], [+, 	], [	, b], [b, 	], [	, $], [$, 	  	], [	  	, X], [X, 	], [	, Y], [Y, 	], [	, Z], [Z, 	], [	, $], [$,  ], [ , Parsing], [Parsing, Table], [Table, Action], [Action, Goto]]

>> Trigrams: 
[[ , LR, parsing], [LR, parsing, program], [parsing, program, INPUT], [program, INPUT, OUTPUT], [INPUT, OUTPUT, 	], [OUTPUT, 	, 	], [	, 	, +], [	, +, 	], [+, 	, b], [	, b, 	], [b, 	, $], [	, $, 	  	], [$, 	  	, X], [	  	, X, 	], [X, 	, Y], [	, Y, 	], [Y, 	, Z], [	, Z, 	], [Z, 	, $], [	, $,  ], [$,  , Parsing], [ , Parsing, Table], [Parsing, Table, Action], [Table, Action, Goto]]

>> Noun Phrases are: 
[b, Table Action Goto]

>> Named Entities are: 
[('INPUT', 'ORG')]


============================ Sentence 724 =============================

   Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#› 


>> Tokens are: 
[   , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›] 

>> PoS Tags are: 
[('   ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X')] 

>> Dependency Tags are: 
[('   ', 'compound'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'nsubj'), ('#', 'appos'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct')]

>> Bigrams: 
[[   , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›]]

>> Trigrams: 
[[   , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›]]

>> Noun Phrases are: 
[   Prof. Jay R Dhamsaniya, (PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('Jay R Dhamsaniya', 'ORG'), ('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 725 =============================

 Parsing Methods Parsing Top down parsing Bottom up parsing (Shift reduce) Back tracking Parsing without backtracking (predictive parsing) LR parsing Operator precedence LALR   


>> Tokens are: 
[ , Parsing, Methods, Parsing, parsing, parsing, (, Shift, reduce, ), tracking, Parsing, backtracking, (, predictive, parsing, ), LR, parsing, Operator, precedence, LALR,  ] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('Parsing', 'PROPN'), ('Methods', 'PROPN'), ('Parsing', 'VERB'), ('parsing', 'VERB'), ('parsing', 'VERB'), ('(', 'PUNCT'), ('Shift', 'NOUN'), ('reduce', 'VERB'), (')', 'PUNCT'), ('tracking', 'VERB'), ('Parsing', 'VERB'), ('backtracking', 'VERB'), ('(', 'PUNCT'), ('predictive', 'ADJ'), ('parsing', 'NOUN'), (')', 'PUNCT'), ('LR', 'PROPN'), ('parsing', 'VERB'), ('Operator', 'PROPN'), ('precedence', 'NOUN'), ('LALR', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'compound'), ('Parsing', 'compound'), ('Methods', 'dep'), ('Parsing', 'acl'), ('parsing', 'acl'), ('parsing', 'ccomp'), ('(', 'punct'), ('Shift', 'nsubj'), ('reduce', 'ccomp'), (')', 'punct'), ('tracking', 'ROOT'), ('Parsing', 'dobj'), ('backtracking', 'pcomp'), ('(', 'punct'), ('predictive', 'amod'), ('parsing', 'dobj'), (')', 'punct'), ('LR', 'npadvmod'), ('parsing', 'advcl'), ('Operator', 'compound'), ('precedence', 'compound'), ('LALR', 'dobj'), (' ', 'punct')]

>> Bigrams: 
[[ , Parsing], [Parsing, Methods], [Methods, Parsing], [Parsing, parsing], [parsing, parsing], [parsing, (], [(, Shift], [Shift, reduce], [reduce, )], [), tracking], [tracking, Parsing], [Parsing, backtracking], [backtracking, (], [(, predictive], [predictive, parsing], [parsing, )], [), LR], [LR, parsing], [parsing, Operator], [Operator, precedence], [precedence, LALR], [LALR,  ]]

>> Trigrams: 
[[ , Parsing, Methods], [Parsing, Methods, Parsing], [Methods, Parsing, parsing], [Parsing, parsing, parsing], [parsing, parsing, (], [parsing, (, Shift], [(, Shift, reduce], [Shift, reduce, )], [reduce, ), tracking], [), tracking, Parsing], [tracking, Parsing, backtracking], [Parsing, backtracking, (], [backtracking, (, predictive], [(, predictive, parsing], [predictive, parsing, )], [parsing, ), LR], [), LR, parsing], [LR, parsing, Operator], [parsing, Operator, precedence], [Operator, precedence, LALR], [precedence, LALR,  ]]

>> Noun Phrases are: 
[Top, Bottom, Shift, predictive parsing, Operator precedence LALR]

>> Named Entities are: 
[('Bottom', 'PERSON')]


============================ Sentence 726 =============================

CLR  SLR   


>> Tokens are: 
[CLR,  , SLR,  ] 

>> PoS Tags are: 
[('CLR', 'PROPN'), (' ', 'SPACE'), ('SLR', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('CLR', 'ROOT'), (' ', 'appos'), ('SLR', 'compound'), (' ', 'appos')]

>> Bigrams: 
[[CLR,  ], [ , SLR], [SLR,  ]]

>> Trigrams: 
[[CLR,  , SLR], [ , SLR,  ]]

>> Noun Phrases are: 
[CLR]

>> Named Entities are: 
[('CLR', 'ORG'), ('SLR', 'ORG')]


============================ Sentence 727 =============================

Recursive  descent  LL(1)        


>> Tokens are: 
[Recursive,  , descent,  , LL(1, ),       ] 

>> PoS Tags are: 
[('Recursive', 'PROPN'), (' ', 'SPACE'), ('descent', 'NOUN'), (' ', 'SPACE'), ('LL(1', 'NOUN'), (')', 'PUNCT'), ('      ', 'SPACE')] 

>> Dependency Tags are: 
[('Recursive', 'compound'), (' ', 'poss'), ('descent', 'appos'), (' ', 'compound'), ('LL(1', 'appos'), (')', 'punct'), ('      ', 'ROOT')]

>> Bigrams: 
[[Recursive,  ], [ , descent], [descent,  ], [ , LL(1], [LL(1, )], [),       ]]

>> Trigrams: 
[[Recursive,  , descent], [ , descent,  ], [descent,  , LL(1], [ , LL(1, )], [LL(1, ),       ]]

>> Noun Phrases are: 
[descent,  LL(1]

>> Named Entities are: 
[]


============================ Sentence 728 =============================

Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara   


>> Tokens are: 
[Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara,  ] 

>> PoS Tags are: 
[('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'nsubj'), ('#', 'appos'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'dep'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'ROOT'), ('‹#›', 'punct'), ('  ', 'appos'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), (' ', 'punct')]

>> Bigrams: 
[[Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,  ]]

>> Trigrams: 
[[Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,  ]]

>> Noun Phrases are: 
[Prof. Jay R Dhamsaniya, (PS, Unit, Prof. Dixita B Kagathara]

>> Named Entities are: 
[('PS', 'ORG'), ('Dixita', 'PERSON'), ('Kagathara', 'PERSON')]


============================ Sentence 729 =============================

#2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[#, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('#', 'nmod'), ('2170701', 'nsubj'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'xcomp'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[(CD, Unit, Theory, I]

>> Named Entities are: 
[]


============================ Sentence 730 =============================

Computation of closure & go to function X 


>> Tokens are: 
[Computation, closure, &, function, X] 

>> PoS Tags are: 
[('Computation', 'NOUN'), ('closure', 'NOUN'), ('&', 'CCONJ'), ('function', 'VERB'), ('X\uf0e0', 'PUNCT')] 

>> Dependency Tags are: 
[('Computation', 'ROOT'), ('closure', 'pobj'), ('&', 'cc'), ('function', 'advcl'), ('X\uf0e0', 'punct')]

>> Bigrams: 
[[Computation, closure], [closure, &], [&, function], [function, X]]

>> Trigrams: 
[[Computation, closure, &], [closure, &, function], [&, function, X]]

>> Noun Phrases are: 
[Computation, closure]

>> Named Entities are: 
[]


============================ Sentence 731 =============================

Xb  Closure(I): 		X  X b Goto(I,X) 		 


>> Tokens are: 
[Xb,  , Closure(I, ):, 		, X,  , X, b, Goto(I, ,, X, ), 		] 

>> PoS Tags are: 
[('Xb', 'PROPN'), (' ', 'SPACE'), ('Closure(I', 'PROPN'), ('):', 'PUNCT'), ('\t\t', 'SPACE'), ('X\uf0e0', 'X'), (' ', 'SPACE'), ('X', 'NOUN'), ('b', 'PROPN'), ('Goto(I', 'PROPN'), (',', 'PUNCT'), ('X', 'NOUN'), (')', 'PUNCT'), ('\t\t', 'SPACE')] 

>> Dependency Tags are: 
[('Xb', 'ROOT'), (' ', 'compound'), ('Closure(I', 'appos'), ('):', 'punct'), ('\t\t', 'prep'), ('X\uf0e0', 'punct'), (' ', 'nmod'), ('X', 'appos'), ('b', 'compound'), ('Goto(I', 'appos'), (',', 'punct'), ('X', 'appos'), (')', 'punct'), ('\t\t', 'punct')]

>> Bigrams: 
[[Xb,  ], [ , Closure(I], [Closure(I, ):], [):, 		], [		, X], [X,  ], [ , X], [X, b], [b, Goto(I], [Goto(I, ,], [,, X], [X, )], [), 		]]

>> Trigrams: 
[[Xb,  , Closure(I], [ , Closure(I, ):], [Closure(I, ):, 		], [):, 		, X], [		, X,  ], [X,  , X], [ , X, b], [X, b, Goto(I], [b, Goto(I, ,], [Goto(I, ,, X], [,, X, )], [X, ), 		]]

>> Noun Phrases are: 
[Xb,  Closure(I,  X, b Goto(I, X]

>> Named Entities are: 
[]


============================ Sentence 732 =============================

X X b	  . . 


>> Tokens are: 
[X, X, b, 	  , ., .] 

>> PoS Tags are: 
[('X\uf0e0', 'AUX'), ('X', 'NOUN'), ('b', 'NOUN'), ('\t  ', 'SPACE'), ('.', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('X\uf0e0', 'nmod'), ('X', 'ROOT'), ('b', 'appos'), ('\t  ', 'appos'), ('.', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[X, X], [X, b], [b, 	  ], [	  , .], [., .]]

>> Trigrams: 
[[X, X, b], [X, b, 	  ], [b, 	  , .], [	  , ., .]]

>> Noun Phrases are: 
[X X, b]

>> Named Entities are: 
[]


============================ Sentence 733 =============================

    


>> Tokens are: 
[   ] 

>> PoS Tags are: 
[('   ', 'SPACE')] 

>> Dependency Tags are: 
[('   ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 734 =============================

Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›  Steps to construct SLR parser Construct Canonical set of LR(0) items 


>> Tokens are: 
[Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  , Steps, construct, SLR, parser, Construct, Canonical, set, LR(0, ), items] 

>> PoS Tags are: 
[('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'VERB'), (' ', 'SPACE'), ('Steps', 'NOUN'), ('construct', 'VERB'), ('SLR', 'PROPN'), ('parser', 'NOUN'), ('Construct', 'PROPN'), ('Canonical', 'PROPN'), ('set', 'NOUN'), ('LR(0', 'PROPN'), (')', 'PUNCT'), ('items', 'NOUN')] 

>> Dependency Tags are: 
[('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'nsubj'), ('#', 'appos'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'nsubj'), ('Steps', 'advcl'), ('construct', 'acl'), ('SLR', 'compound'), ('parser', 'compound'), ('Construct', 'compound'), ('Canonical', 'nmod'), ('set', 'appos'), ('LR(0', 'pobj'), (')', 'punct'), ('items', 'dobj')]

>> Bigrams: 
[[Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ], [ , Steps], [Steps, construct], [construct, SLR], [SLR, parser], [parser, Construct], [Construct, Canonical], [Canonical, set], [set, LR(0], [LR(0, )], [), items]]

>> Trigrams: 
[[Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ], [‹#›,  , Steps], [ , Steps, construct], [Steps, construct, SLR], [construct, SLR, parser], [SLR, parser, Construct], [parser, Construct, Canonical], [Construct, Canonical, set], [Canonical, set, LR(0], [set, LR(0, )], [LR(0, ), items]]

>> Noun Phrases are: 
[Prof. Jay R Dhamsaniya, (PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I, set, LR(0]

>> Named Entities are: 
[('Jay R Dhamsaniya', 'ORG'), ('PS', 'ORG'), ('Dixita', 'PERSON'), ('SLR', 'ORG'), ('Construct Canonical', 'ORG')]


============================ Sentence 735 =============================

Construct SLR parsing table Parse the input string     Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[Construct, SLR, parsing, table, Parse, input, string,     , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('Construct', 'PROPN'), ('SLR', 'NOUN'), ('parsing', 'VERB'), ('table', 'NOUN'), ('Parse', 'PROPN'), ('input', 'NOUN'), ('string', 'VERB'), ('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Construct', 'compound'), ('SLR', 'nsubj'), ('parsing', 'acl'), ('table', 'compound'), ('Parse', 'dobj'), ('input', 'nsubj'), ('string', 'ccomp'), ('    ', 'compound'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'dobj'), ('#', 'appos'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[Construct, SLR], [SLR, parsing], [parsing, table], [table, Parse], [Parse, input], [input, string], [string,     ], [    , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[Construct, SLR, parsing], [SLR, parsing, table], [parsing, table, Parse], [table, Parse, input], [Parse, input, string], [input, string,     ], [string,     , Prof.], [    , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[Construct SLR, table Parse, the input,     Prof. Jay R Dhamsaniya, (PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('Construct', 'ORG'), ('SLR', 'ORG'), ('Parse', 'ORG'), ('Jay R Dhamsaniya', 'ORG'), ('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 736 =============================

Example: SLR(1)- simple LR S  


>> Tokens are: 
[Example, :, SLR(1)-, simple, LR, S, ] 

>> PoS Tags are: 
[('Example', 'NOUN'), (':', 'PUNCT'), ('SLR(1)-', 'VERB'), ('simple', 'ADJ'), ('LR', 'PROPN'), ('S', 'PROPN'), ('\uf0e0', 'PROPN')] 

>> Dependency Tags are: 
[('Example', 'ROOT'), (':', 'punct'), ('SLR(1)-', 'det'), ('simple', 'amod'), ('LR', 'compound'), ('S', 'compound'), ('\uf0e0', 'appos')]

>> Bigrams: 
[[Example, :], [:, SLR(1)-], [SLR(1)-, simple], [simple, LR], [LR, S], [S, ]]

>> Trigrams: 
[[Example, :, SLR(1)-], [:, SLR(1)-, simple], [SLR(1)-, simple, LR], [simple, LR, S], [LR, S, ]]

>> Noun Phrases are: 
[Example, SLR(1)- simple LR S ]

>> Named Entities are: 
[('SLR(1)-', 'CARDINAL'), ('LR S \uf0e0', 'ORG')]


============================ Sentence 737 =============================

AA A  aA | b S’.S S. AA A. aA A. b  S’ S.  S 


>> Tokens are: 
[AA, , aA, |, b, S’.S, S., AA, A., aA, A., b,  , S’, S.,  , S] 

>> PoS Tags are: 
[('AA', 'PROPN'), ('\uf0e0', 'NOUN'), ('aA', 'PROPN'), ('|', 'NOUN'), ('b', 'X'), ('S’\uf0e0.S', 'NUM'), ('S\uf0e0.', 'PROPN'), ('AA', 'PROPN'), ('A\uf0e0.', 'NOUN'), ('aA', 'PROPN'), ('A\uf0e0.', 'NOUN'), ('b', 'ADP'), (' ', 'SPACE'), ('S’\uf0e0', 'PROPN'), ('S.', 'PROPN'), (' ', 'SPACE'), ('S\uf0e0', 'PROPN')] 

>> Dependency Tags are: 
[('AA', 'compound'), ('\uf0e0', 'ROOT'), ('aA', 'appos'), ('|', 'appos'), ('b', 'punct'), ('S’\uf0e0.S', 'compound'), ('S\uf0e0.', 'compound'), ('AA', 'compound'), ('A\uf0e0.', 'compound'), ('aA', 'compound'), ('A\uf0e0.', 'appos'), ('b', 'prep'), (' ', 'appos'), ('S’\uf0e0', 'nmod'), ('S.', 'appos'), (' ', 'punct'), ('S\uf0e0', 'npadvmod')]

>> Bigrams: 
[[AA, ], [, aA], [aA, |], [|, b], [b, S’.S], [S’.S, S.], [S., AA], [AA, A.], [A., aA], [aA, A.], [A., b], [b,  ], [ , S’], [S’, S.], [S.,  ], [ , S]]

>> Trigrams: 
[[AA, , aA], [, aA, |], [aA, |, b], [|, b, S’.S], [b, S’.S, S.], [S’.S, S., AA], [S., AA, A.], [AA, A., aA], [A., aA, A.], [aA, A., b], [A., b,  ], [b,  , S’], [ , S’, S.], [S’, S.,  ], [S.,  , S]]

>> Noun Phrases are: 
[AA A , aA, |, S’.S S. AA A. aA A., S’ S.]

>> Named Entities are: 
[('S’\uf0e0 S.  ', 'PERSON')]


============================ Sentence 738 =============================

A . 


>> Tokens are: 
[.] 

>> PoS Tags are: 
[('.', 'PUNCT')] 

>> Dependency Tags are: 
[('.', 'punct')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[A]

>> Named Entities are: 
[]


============================ Sentence 739 =============================

A A. aA A. b  A. aA A. b  A a . 


>> Tokens are: 
[A., aA, A., b,  , A., aA, A., b,  , A, .] 

>> PoS Tags are: 
[('A\uf0e0.', 'NOUN'), ('aA', 'PROPN'), ('A\uf0e0.', 'NOUN'), ('b', 'ADP'), (' ', 'SPACE'), ('A\uf0e0.', 'NOUN'), ('aA', 'PROPN'), ('A\uf0e0.', 'NOUN'), ('b', 'ADP'), (' ', 'SPACE'), ('A\uf0e0', 'ADV'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('A\uf0e0.', 'compound'), ('aA', 'compound'), ('A\uf0e0.', 'ROOT'), ('b', 'prep'), (' ', 'nmod'), ('A\uf0e0.', 'compound'), ('aA', 'compound'), ('A\uf0e0.', 'pobj'), ('b', 'prep'), (' ', 'pobj'), ('A\uf0e0', 'advmod'), ('.', 'punct')]

>> Bigrams: 
[[A., aA], [aA, A.], [A., b], [b,  ], [ , A.], [A., aA], [aA, A.], [A., b], [b,  ], [ , A], [A, .]]

>> Trigrams: 
[[A., aA, A.], [aA, A., b], [A., b,  ], [b,  , A.], [ , A., aA], [A., aA, A.], [aA, A., b], [A., b,  ], [b,  , A], [ , A, .]]

>> Noun Phrases are: 
[A A. aA A.,  A. aA A.]

>> Named Entities are: 
[]


============================ Sentence 740 =============================

A A b.  A. aA A. b  A a . 


>> Tokens are: 
[A, b.,  , A., aA, A., b,  , A, .] 

>> PoS Tags are: 
[('A\uf0e0', 'ADJ'), ('b.', 'NOUN'), (' ', 'SPACE'), ('A\uf0e0.', 'NOUN'), ('aA', 'PROPN'), ('A\uf0e0.', 'NOUN'), ('b', 'ADP'), (' ', 'SPACE'), ('A\uf0e0', 'ADV'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('A\uf0e0', 'nmod'), ('b.', 'nmod'), (' ', 'nummod'), ('A\uf0e0.', 'compound'), ('aA', 'compound'), ('A\uf0e0.', 'ROOT'), ('b', 'prep'), (' ', 'pobj'), ('A\uf0e0', 'advmod'), ('.', 'punct')]

>> Bigrams: 
[[A, b.], [b.,  ], [ , A.], [A., aA], [aA, A.], [A., b], [b,  ], [ , A], [A, .]]

>> Trigrams: 
[[A, b.,  ], [b.,  , A.], [ , A., aA], [A., aA, A.], [aA, A., b], [A., b,  ], [b,  , A], [ , A, .]]

>> Noun Phrases are: 
[A A b.  A. aA A.]

>> Named Entities are: 
[]


============================ Sentence 741 =============================

A A b.  A. aA A. b  A a . 


>> Tokens are: 
[A, b.,  , A., aA, A., b,  , A, .] 

>> PoS Tags are: 
[('A\uf0e0', 'ADJ'), ('b.', 'NOUN'), (' ', 'SPACE'), ('A\uf0e0.', 'NOUN'), ('aA', 'PROPN'), ('A\uf0e0.', 'NOUN'), ('b', 'ADP'), (' ', 'SPACE'), ('A\uf0e0', 'ADV'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('A\uf0e0', 'nmod'), ('b.', 'nmod'), (' ', 'nummod'), ('A\uf0e0.', 'compound'), ('aA', 'compound'), ('A\uf0e0.', 'ROOT'), ('b', 'prep'), (' ', 'pobj'), ('A\uf0e0', 'advmod'), ('.', 'punct')]

>> Bigrams: 
[[A, b.], [b.,  ], [ , A.], [A., aA], [aA, A.], [A., b], [b,  ], [ , A], [A, .]]

>> Trigrams: 
[[A, b.,  ], [b.,  , A.], [ , A., aA], [A., aA, A.], [aA, A., b], [A., b,  ], [b,  , A], [ , A, .]]

>> Noun Phrases are: 
[A A b.  A. aA A.]

>> Named Entities are: 
[]


============================ Sentence 742 =============================

A A b.  S AA .   


>> Tokens are: 
[A, b.,  , S, AA, .,  ] 

>> PoS Tags are: 
[('A\uf0e0', 'ADV'), ('b.', 'NOUN'), (' ', 'SPACE'), ('S\uf0e0', 'PROPN'), ('AA', 'PROPN'), ('.', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('A\uf0e0', 'ROOT'), ('b.', 'npadvmod'), (' ', 'nummod'), ('S\uf0e0', 'compound'), ('AA', 'npadvmod'), ('.', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[A, b.], [b.,  ], [ , S], [S, AA], [AA, .], [.,  ]]

>> Trigrams: 
[[A, b.,  ], [b.,  , S], [ , S, AA], [S, AA, .], [AA, .,  ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 743 =============================

A aA . 


>> Tokens are: 
[A, aA, .] 

>> PoS Tags are: 
[('A\uf0e0', 'ADJ'), ('aA', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('A\uf0e0', 'amod'), ('aA', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[A, aA], [aA, .]]

>> Trigrams: 
[[A, aA, .]]

>> Noun Phrases are: 
[A aA]

>> Named Entities are: 
[]


============================ Sentence 744 =============================

    3 6 5 3 3 4 4 4           Augmented grammar  LR(0) item set     Prof. Jay R Dhamsaniya 


>> Tokens are: 
[    , 3, 6, 5, 3, 3, 4, 4, 4,           , Augmented, grammar,  , LR(0, ), item, set,     , Prof., Jay, R, Dhamsaniya] 

>> PoS Tags are: 
[('    ', 'SPACE'), ('3', 'NUM'), ('6', 'NUM'), ('5', 'NUM'), ('3', 'NUM'), ('3', 'NUM'), ('4', 'NUM'), ('4', 'NUM'), ('4', 'NUM'), ('          ', 'SPACE'), ('Augmented', 'PROPN'), ('grammar', 'NOUN'), (' ', 'SPACE'), ('LR(0', 'ADJ'), (')', 'PUNCT'), ('item', 'NOUN'), ('set', 'VERB'), ('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN')] 

>> Dependency Tags are: 
[('    ', 'quantmod'), ('3', 'nummod'), ('6', 'appos'), ('5', 'appos'), ('3', 'appos'), ('3', 'appos'), ('4', 'appos'), ('4', 'nummod'), ('4', 'nummod'), ('          ', 'nmod'), ('Augmented', 'amod'), ('grammar', 'nmod'), (' ', 'nmod'), ('LR(0', 'nmod'), (')', 'punct'), ('item', 'nsubj'), ('set', 'ROOT'), ('    ', 'nummod'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'dative')]

>> Bigrams: 
[[    , 3], [3, 6], [6, 5], [5, 3], [3, 3], [3, 4], [4, 4], [4, 4], [4,           ], [          , Augmented], [Augmented, grammar], [grammar,  ], [ , LR(0], [LR(0, )], [), item], [item, set], [set,     ], [    , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya]]

>> Trigrams: 
[[    , 3, 6], [3, 6, 5], [6, 5, 3], [5, 3, 3], [3, 3, 4], [3, 4, 4], [4, 4, 4], [4, 4,           ], [4,           , Augmented], [          , Augmented, grammar], [Augmented, grammar,  ], [grammar,  , LR(0], [ , LR(0, )], [LR(0, ), item], [), item, set], [item, set,     ], [set,     , Prof.], [    , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya]]

>> Noun Phrases are: 
[    3 6 5 3 3 4 4 4           Augmented grammar  LR(0) item,     Prof. Jay R Dhamsaniya]

>> Named Entities are: 
[('Jay R Dhamsaniya', 'ORG')]


============================ Sentence 745 =============================

#3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[#, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('#', 'npadvmod'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'npadvmod'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[(PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 746 =============================

Rules to construct SLR parsing table Construct , the collection of sets of LR(0) items for  Stateis constructed from . 


>> Tokens are: 
[Rules, construct, SLR, parsing, table, Construct, ,, collection, sets, LR(0, ), items,  , Stateis, constructed, .] 

>> PoS Tags are: 
[('Rules', 'NOUN'), ('construct', 'VERB'), ('SLR', 'NOUN'), ('parsing', 'VERB'), ('table', 'NOUN'), ('Construct', 'PROPN'), (',', 'PUNCT'), ('collection', 'NOUN'), ('sets', 'NOUN'), ('LR(0', 'NOUN'), (')', 'PUNCT'), ('items', 'NOUN'), (' ', 'SPACE'), ('Stateis', 'PROPN'), ('constructed', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Rules', 'nsubj'), ('construct', 'ROOT'), ('SLR', 'compound'), ('parsing', 'advcl'), ('table', 'compound'), ('Construct', 'dobj'), (',', 'punct'), ('collection', 'appos'), ('sets', 'pobj'), ('LR(0', 'pobj'), (')', 'punct'), ('items', 'pobj'), (' ', 'pobj'), ('Stateis', 'nsubj'), ('constructed', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[Rules, construct], [construct, SLR], [SLR, parsing], [parsing, table], [table, Construct], [Construct, ,], [,, collection], [collection, sets], [sets, LR(0], [LR(0, )], [), items], [items,  ], [ , Stateis], [Stateis, constructed], [constructed, .]]

>> Trigrams: 
[[Rules, construct, SLR], [construct, SLR, parsing], [SLR, parsing, table], [parsing, table, Construct], [table, Construct, ,], [Construct, ,, collection], [,, collection, sets], [collection, sets, LR(0], [sets, LR(0, )], [LR(0, ), items], [), items,  ], [items,  , Stateis], [ , Stateis, constructed], [Stateis, constructed, .]]

>> Noun Phrases are: 
[Rules, table Construct, the collection, sets, LR(0, items, Stateis]

>> Named Entities are: 
[('SLR', 'ORG'), ('Construct', 'ORG'), ('Stateis', 'PERSON')]


============================ Sentence 747 =============================

The parsing actions for state  are determined as follow : If is in  and GOTO  , then set to “shift j”. 


>> Tokens are: 
[parsing, actions, state,  , determined, follow, :,  , GOTO,  , ,, set, “, shift, j, ”, .] 

>> PoS Tags are: 
[('parsing', 'VERB'), ('actions', 'NOUN'), ('state', 'NOUN'), (' ', 'SPACE'), ('determined', 'VERB'), ('follow', 'NOUN'), (':', 'PUNCT'), ('\xa0', 'SPACE'), ('GOTO', 'PROPN'), ('\xa0', 'SPACE'), (',', 'PUNCT'), ('set', 'VERB'), ('“', 'PUNCT'), ('shift', 'VERB'), ('j', 'NOUN'), ('”', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('parsing', 'amod'), ('actions', 'nsubjpass'), ('state', 'compound'), (' ', 'pobj'), ('determined', 'ROOT'), ('follow', 'pobj'), (':', 'punct'), ('\xa0', 'pobj'), ('GOTO', 'compound'), ('\xa0', 'conj'), (',', 'punct'), ('set', 'advcl'), ('“', 'punct'), ('shift', 'xcomp'), ('j', 'dobj'), ('”', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[parsing, actions], [actions, state], [state,  ], [ , determined], [determined, follow], [follow, :], [:,  ], [ , GOTO], [GOTO,  ], [ , ,], [,, set], [set, “], [“, shift], [shift, j], [j, ”], [”, .]]

>> Trigrams: 
[[parsing, actions, state], [actions, state,  ], [state,  , determined], [ , determined, follow], [determined, follow, :], [follow, :,  ], [:,  , GOTO], [ , GOTO,  ], [GOTO,  , ,], [ , ,, set], [,, set, “], [set, “, shift], [“, shift, j], [shift, j, ”], [j, ”, .]]

>> Noun Phrases are: 
[The parsing actions, follow, j]

>> Named Entities are: 
[]


============================ Sentence 748 =============================

Here a must be terminal. 


>> Tokens are: 
[terminal, .] 

>> PoS Tags are: 
[('terminal', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('terminal', 'acomp'), ('.', 'punct')]

>> Bigrams: 
[[terminal, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 749 =============================

If is in , then set to “reduce A ” for all a in ; here A may not be S’. 


>> Tokens are: 
[,, set, “, reduce, A, ”, ;, S, ’, .] 

>> PoS Tags are: 
[(',', 'PUNCT'), ('set', 'VERB'), ('“', 'PUNCT'), ('reduce', 'VERB'), ('A\uf0e0', 'ADV'), ('”', 'PUNCT'), (';', 'PUNCT'), ('S', 'PROPN'), ('’', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(',', 'punct'), ('set', 'dep'), ('“', 'punct'), ('reduce', 'xcomp'), ('A\uf0e0', 'dobj'), ('”', 'punct'), (';', 'punct'), ('S', 'attr'), ('’', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[,, set], [set, “], [“, reduce], [reduce, A], [A, ”], [”, ;], [;, S], [S, ’], [’, .]]

>> Trigrams: 
[[,, set, “], [set, “, reduce], [“, reduce, A], [reduce, A, ”], [A, ”, ;], [”, ;, S], [;, S, ’], [S, ’, .]]

>> Noun Phrases are: 
[all a in, A, S]

>> Named Entities are: 
[]


============================ Sentence 750 =============================

If is in , then set action to “accept”. 


>> Tokens are: 
[,, set, action, “, accept, ”, .] 

>> PoS Tags are: 
[(',', 'PUNCT'), ('set', 'VERB'), ('action', 'NOUN'), ('“', 'PUNCT'), ('accept', 'VERB'), ('”', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(',', 'punct'), ('set', 'ROOT'), ('action', 'dobj'), ('“', 'punct'), ('accept', 'relcl'), ('”', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[,, set], [set, action], [action, “], [“, accept], [accept, ”], [”, .]]

>> Trigrams: 
[[,, set, action], [set, action, “], [action, “, accept], [“, accept, ”], [accept, ”, .]]

>> Noun Phrases are: 
[action]

>> Named Entities are: 
[]


============================ Sentence 751 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 752 =============================

The goto transitions for state i are constructed for all non terminals A using the All entries not defined by rules 2 and 3 are made error. 


>> Tokens are: 
[goto, transitions, state, constructed, non, terminals, entries, defined, rules, 2, 3, error, .] 

>> PoS Tags are: 
[('goto', 'NOUN'), ('transitions', 'NOUN'), ('state', 'NOUN'), ('constructed', 'VERB'), ('non', 'ADJ'), ('terminals', 'NOUN'), ('entries', 'NOUN'), ('defined', 'VERB'), ('rules', 'NOUN'), ('2', 'NUM'), ('3', 'NUM'), ('error', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('goto', 'compound'), ('transitions', 'nsubjpass'), ('state', 'pobj'), ('constructed', 'ROOT'), ('non', 'amod'), ('terminals', 'pobj'), ('entries', 'dobj'), ('defined', 'acl'), ('rules', 'pobj'), ('2', 'nummod'), ('3', 'conj'), ('error', 'oprd'), ('.', 'punct')]

>> Bigrams: 
[[goto, transitions], [transitions, state], [state, constructed], [constructed, non], [non, terminals], [terminals, entries], [entries, defined], [defined, rules], [rules, 2], [2, 3], [3, error], [error, .]]

>> Trigrams: 
[[goto, transitions, state], [transitions, state, constructed], [state, constructed, non], [constructed, non, terminals], [non, terminals, entries], [terminals, entries, defined], [entries, defined, rules], [defined, rules, 2], [rules, 2, 3], [2, 3, error], [3, error, .]]

>> Noun Phrases are: 
[The goto transitions, state, i, all non terminals, the All entries, rules, error]

>> Named Entities are: 
[('2', 'CARDINAL'), ('3', 'CARDINAL')]


============================ Sentence 753 =============================

     Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[     , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('     ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('     ', 'compound'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'nsubj'), ('#', 'appos'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[     , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[     , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[     Prof. Jay R Dhamsaniya, (PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 754 =============================

Example: SLR(1)- simple LR 		Action			Go to	 	Item set	a	b 


>> Tokens are: 
[Example, :, SLR(1)-, simple, LR, 		, Action, 			, 	 	, Item, set, 	, 	, b] 

>> PoS Tags are: 
[('Example', 'NOUN'), (':', 'PUNCT'), ('SLR(1)-', 'VERB'), ('simple', 'ADJ'), ('LR', 'PROPN'), ('\t\t', 'SPACE'), ('Action', 'PROPN'), ('\t\t\t', 'SPACE'), ('\t \t', 'SPACE'), ('Item', 'PROPN'), ('set', 'VERB'), ('\t', 'SPACE'), ('\t', 'SPACE'), ('b', 'PROPN')] 

>> Dependency Tags are: 
[('Example', 'dep'), (':', 'punct'), ('SLR(1)-', 'nummod'), ('simple', 'amod'), ('LR', 'compound'), ('\t\t', 'compound'), ('Action', 'compound'), ('\t\t\t', 'nsubj'), ('\t \t', 'compound'), ('Item', 'nsubj'), ('set', 'advcl'), ('\t', 'dobj'), ('\t', 'ccomp'), ('b', 'prep')]

>> Bigrams: 
[[Example, :], [:, SLR(1)-], [SLR(1)-, simple], [simple, LR], [LR, 		], [		, Action], [Action, 			], [			, 	 	], [	 	, Item], [Item, set], [set, 	], [	, 	], [	, b]]

>> Trigrams: 
[[Example, :, SLR(1)-], [:, SLR(1)-, simple], [SLR(1)-, simple, LR], [simple, LR, 		], [LR, 		, Action], [		, Action, 			], [Action, 			, 	 	], [			, 	 	, Item], [	 	, Item, set], [Item, set, 	], [set, 	, 	], [	, 	, b]]

>> Noun Phrases are: 
[to	 	Item]

>> Named Entities are: 
[('SLR(1)-', 'CARDINAL'), ('Item', 'PERSON')]


============================ Sentence 755 =============================

	$	S	A 	0 


>> Tokens are: 
[	, $, 	, S, 	, 	, 0] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('$', 'SYM'), ('\t', 'SPACE'), ('S', 'PROPN'), ('\t', 'SPACE'), ('\t', 'SPACE'), ('0', 'NUM')] 

>> Dependency Tags are: 
[('\t', 'nmod'), ('$', 'nmod'), ('\t', 'compound'), ('S', 'compound'), ('\t', 'nmod'), ('\t', 'ROOT'), ('0', 'punct')]

>> Bigrams: 
[[	, $], [$, 	], [	, S], [S, 	], [	, 	], [	, 0]]

>> Trigrams: 
[[	, $, 	], [$, 	, S], [	, S, 	], [S, 	, 	], [	, 	, 0]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 756 =============================

	S3 	S4		1	2 	1			Accept 		 	2	S3 	S4 			5 


>> Tokens are: 
[	, S3, 	, S4, 		, 1, 	, 2, 	, 1, 			, Accept, 		 	, 2, 	, S3, 	, S4, 			, 5] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('S3', 'PROPN'), ('\t', 'SPACE'), ('S4', 'PROPN'), ('\t\t', 'SPACE'), ('1', 'NUM'), ('\t', 'SPACE'), ('2', 'NUM'), ('\t', 'SPACE'), ('1', 'NUM'), ('\t\t\t', 'SPACE'), ('Accept', 'PROPN'), ('\t\t \t', 'SPACE'), ('2', 'NUM'), ('\t', 'SPACE'), ('S3', 'PROPN'), ('\t', 'SPACE'), ('S4', 'PROPN'), ('\t\t\t', 'SPACE'), ('5', 'NUM')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('S3', 'nmod'), ('\t', 'compound'), ('S4', 'ROOT'), ('\t\t', 'nmod'), ('1', 'nummod'), ('\t', 'nmod'), ('2', 'prep'), ('\t', 'conj'), ('1', 'nummod'), ('\t\t\t', 'compound'), ('Accept', 'compound'), ('\t\t \t', 'compound'), ('2', 'appos'), ('\t', 'compound'), ('S3', 'appos'), ('\t', 'compound'), ('S4', 'compound'), ('\t\t\t', 'appos'), ('5', 'nummod')]

>> Bigrams: 
[[	, S3], [S3, 	], [	, S4], [S4, 		], [		, 1], [1, 	], [	, 2], [2, 	], [	, 1], [1, 			], [			, Accept], [Accept, 		 	], [		 	, 2], [2, 	], [	, S3], [S3, 	], [	, S4], [S4, 			], [			, 5]]

>> Trigrams: 
[[	, S3, 	], [S3, 	, S4], [	, S4, 		], [S4, 		, 1], [		, 1, 	], [1, 	, 2], [	, 2, 	], [2, 	, 1], [	, 1, 			], [1, 			, Accept], [			, Accept, 		 	], [Accept, 		 	, 2], [		 	, 2, 	], [2, 	, S3], [	, S3, 	], [S3, 	, S4], [	, S4, 			], [S4, 			, 5]]

>> Noun Phrases are: 
[	S3 	S4, 	S3]

>> Named Entities are: 
[('1', 'CARDINAL'), ('5', 'CARDINAL')]


============================ Sentence 757 =============================

	3	S3 	S4 			6 	4	R3 	R3	R3		 	5			R1 		 	6	R2 	R2 	R2 		  S’. S S. AA A. aA A. b   


>> Tokens are: 
[	, 3, 	, S3, 	, S4, 			, 6, 	, 4, 	, R3, 	, R3, 	, R3, 		 	, 5, 			, R1, 		 	, 6, 	, R2, 	, R2, 	, R2, 		  , S’., S, S., AA, A., aA, A., b,  ] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('3', 'NUM'), ('\t', 'SPACE'), ('S3', 'PROPN'), ('\t', 'SPACE'), ('S4', 'PROPN'), ('\t\t\t', 'SPACE'), ('6', 'NUM'), ('\t', 'SPACE'), ('4', 'NUM'), ('\t', 'SPACE'), ('R3', 'PROPN'), ('\t', 'SPACE'), ('R3', 'PROPN'), ('\t', 'SPACE'), ('R3', 'PROPN'), ('\t\t \t', 'SPACE'), ('5', 'NUM'), ('\t\t\t', 'SPACE'), ('R1', 'NOUN'), ('\t\t \t', 'SPACE'), ('6', 'NUM'), ('\t', 'SPACE'), ('R2', 'PROPN'), ('\t', 'SPACE'), ('R2', 'PROPN'), ('\t', 'SPACE'), ('R2', 'PROPN'), ('\t\t  ', 'SPACE'), ('S’\uf0e0.', 'PROPN'), ('S', 'PROPN'), ('S\uf0e0.', 'PROPN'), ('AA', 'PROPN'), ('A\uf0e0.', 'NOUN'), ('aA', 'PROPN'), ('A\uf0e0.', 'NOUN'), ('b', 'ADP'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('\t', 'nmod'), ('3', 'nummod'), ('\t', 'compound'), ('S3', 'nmod'), ('\t', 'compound'), ('S4', 'appos'), ('\t\t\t', 'appos'), ('6', 'nummod'), ('\t', 'nmod'), ('4', 'nummod'), ('\t', 'compound'), ('R3', 'compound'), ('\t', 'compound'), ('R3', 'compound'), ('\t', 'compound'), ('R3', 'nsubj'), ('\t\t \t', 'nmod'), ('5', 'nummod'), ('\t\t\t', 'compound'), ('R1', 'dep'), ('\t\t \t', 'appos'), ('6', 'nummod'), ('\t', 'compound'), ('R2', 'compound'), ('\t', 'compound'), ('R2', 'compound'), ('\t', 'compound'), ('R2', 'compound'), ('\t\t  ', 'nsubj'), ('S’\uf0e0.', 'nmod'), ('S', 'compound'), ('S\uf0e0.', 'compound'), ('AA', 'compound'), ('A\uf0e0.', 'compound'), ('aA', 'compound'), ('A\uf0e0.', 'ROOT'), ('b', 'prep'), (' ', 'nummod')]

>> Bigrams: 
[[	, 3], [3, 	], [	, S3], [S3, 	], [	, S4], [S4, 			], [			, 6], [6, 	], [	, 4], [4, 	], [	, R3], [R3, 	], [	, R3], [R3, 	], [	, R3], [R3, 		 	], [		 	, 5], [5, 			], [			, R1], [R1, 		 	], [		 	, 6], [6, 	], [	, R2], [R2, 	], [	, R2], [R2, 	], [	, R2], [R2, 		  ], [		  , S’.], [S’., S], [S, S.], [S., AA], [AA, A.], [A., aA], [aA, A.], [A., b], [b,  ]]

>> Trigrams: 
[[	, 3, 	], [3, 	, S3], [	, S3, 	], [S3, 	, S4], [	, S4, 			], [S4, 			, 6], [			, 6, 	], [6, 	, 4], [	, 4, 	], [4, 	, R3], [	, R3, 	], [R3, 	, R3], [	, R3, 	], [R3, 	, R3], [	, R3, 		 	], [R3, 		 	, 5], [		 	, 5, 			], [5, 			, R1], [			, R1, 		 	], [R1, 		 	, 6], [		 	, 6, 	], [6, 	, R2], [	, R2, 	], [R2, 	, R2], [	, R2, 	], [R2, 	, R2], [	, R2, 		  ], [R2, 		  , S’.], [		  , S’., S], [S’., S, S.], [S, S., AA], [S., AA, A.], [AA, A., aA], [A., aA, A.], [aA, A., b], [A., b,  ]]

>> Noun Phrases are: 
[	S4]

>> Named Entities are: 
[('S\uf0e0. AA A\uf0e0.', 'PERSON')]


============================ Sentence 758 =============================

S’ S.  S A . 


>> Tokens are: 
[S’, S.,  , S, .] 

>> PoS Tags are: 
[('S’\uf0e0', 'PROPN'), ('S.', 'PROPN'), (' ', 'SPACE'), ('S\uf0e0', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('S’\uf0e0', 'nmod'), ('S.', 'nmod'), (' ', 'punct'), ('S\uf0e0', 'npadvmod'), ('.', 'punct')]

>> Bigrams: 
[[S’, S.], [S.,  ], [ , S], [S, .]]

>> Trigrams: 
[[S’, S.,  ], [S.,  , S], [ , S, .]]

>> Noun Phrases are: 
[S’ S.  S A]

>> Named Entities are: 
[('S’\uf0e0 S.  ', 'PERSON')]


============================ Sentence 759 =============================

A A. aA A. b  A. aA A. b  A a . 


>> Tokens are: 
[A., aA, A., b,  , A., aA, A., b,  , A, .] 

>> PoS Tags are: 
[('A\uf0e0.', 'NOUN'), ('aA', 'PROPN'), ('A\uf0e0.', 'NOUN'), ('b', 'ADP'), (' ', 'SPACE'), ('A\uf0e0.', 'NOUN'), ('aA', 'PROPN'), ('A\uf0e0.', 'NOUN'), ('b', 'ADP'), (' ', 'SPACE'), ('A\uf0e0', 'ADV'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('A\uf0e0.', 'compound'), ('aA', 'compound'), ('A\uf0e0.', 'ROOT'), ('b', 'prep'), (' ', 'nmod'), ('A\uf0e0.', 'compound'), ('aA', 'compound'), ('A\uf0e0.', 'pobj'), ('b', 'prep'), (' ', 'pobj'), ('A\uf0e0', 'advmod'), ('.', 'punct')]

>> Bigrams: 
[[A., aA], [aA, A.], [A., b], [b,  ], [ , A.], [A., aA], [aA, A.], [A., b], [b,  ], [ , A], [A, .]]

>> Trigrams: 
[[A., aA, A.], [aA, A., b], [A., b,  ], [b,  , A.], [ , A., aA], [A., aA, A.], [aA, A., b], [A., b,  ], [b,  , A], [ , A, .]]

>> Noun Phrases are: 
[A A. aA A.,  A. aA A.]

>> Named Entities are: 
[]


============================ Sentence 760 =============================

A A b.  A. aA A. b  A a . 


>> Tokens are: 
[A, b.,  , A., aA, A., b,  , A, .] 

>> PoS Tags are: 
[('A\uf0e0', 'ADJ'), ('b.', 'NOUN'), (' ', 'SPACE'), ('A\uf0e0.', 'NOUN'), ('aA', 'PROPN'), ('A\uf0e0.', 'NOUN'), ('b', 'ADP'), (' ', 'SPACE'), ('A\uf0e0', 'ADV'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('A\uf0e0', 'nmod'), ('b.', 'nmod'), (' ', 'nummod'), ('A\uf0e0.', 'compound'), ('aA', 'compound'), ('A\uf0e0.', 'ROOT'), ('b', 'prep'), (' ', 'pobj'), ('A\uf0e0', 'advmod'), ('.', 'punct')]

>> Bigrams: 
[[A, b.], [b.,  ], [ , A.], [A., aA], [aA, A.], [A., b], [b,  ], [ , A], [A, .]]

>> Trigrams: 
[[A, b.,  ], [b.,  , A.], [ , A., aA], [A., aA, A.], [aA, A., b], [A., b,  ], [b,  , A], [ , A, .]]

>> Noun Phrases are: 
[A A b.  A. aA A.]

>> Named Entities are: 
[]


============================ Sentence 761 =============================

A A b.  A. aA A. b  A a . 


>> Tokens are: 
[A, b.,  , A., aA, A., b,  , A, .] 

>> PoS Tags are: 
[('A\uf0e0', 'ADJ'), ('b.', 'NOUN'), (' ', 'SPACE'), ('A\uf0e0.', 'NOUN'), ('aA', 'PROPN'), ('A\uf0e0.', 'NOUN'), ('b', 'ADP'), (' ', 'SPACE'), ('A\uf0e0', 'ADV'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('A\uf0e0', 'nmod'), ('b.', 'nmod'), (' ', 'nummod'), ('A\uf0e0.', 'compound'), ('aA', 'compound'), ('A\uf0e0.', 'ROOT'), ('b', 'prep'), (' ', 'pobj'), ('A\uf0e0', 'advmod'), ('.', 'punct')]

>> Bigrams: 
[[A, b.], [b.,  ], [ , A.], [A., aA], [aA, A.], [A., b], [b,  ], [ , A], [A, .]]

>> Trigrams: 
[[A, b.,  ], [b.,  , A.], [ , A., aA], [A., aA, A.], [aA, A., b], [A., b,  ], [b,  , A], [ , A, .]]

>> Noun Phrases are: 
[A A b.  A. aA A.]

>> Named Entities are: 
[]


============================ Sentence 762 =============================

A A b.  S AA .   


>> Tokens are: 
[A, b.,  , S, AA, .,  ] 

>> PoS Tags are: 
[('A\uf0e0', 'ADV'), ('b.', 'NOUN'), (' ', 'SPACE'), ('S\uf0e0', 'PROPN'), ('AA', 'PROPN'), ('.', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('A\uf0e0', 'ROOT'), ('b.', 'npadvmod'), (' ', 'nummod'), ('S\uf0e0', 'compound'), ('AA', 'npadvmod'), ('.', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[A, b.], [b.,  ], [ , S], [S, AA], [AA, .], [.,  ]]

>> Trigrams: 
[[A, b.,  ], [b.,  , S], [ , S, AA], [S, AA, .], [AA, .,  ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 763 =============================

A aA . 


>> Tokens are: 
[A, aA, .] 

>> PoS Tags are: 
[('A\uf0e0', 'ADJ'), ('aA', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('A\uf0e0', 'amod'), ('aA', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[A, aA], [aA, .]]

>> Trigrams: 
[[A, aA, .]]

>> Noun Phrases are: 
[A aA]

>> Named Entities are: 
[]


============================ Sentence 764 =============================

    3 6 5 3 3 4 4 4           S  AA 


>> Tokens are: 
[    , 3, 6, 5, 3, 3, 4, 4, 4,           , S, , AA] 

>> PoS Tags are: 
[('    ', 'SPACE'), ('3', 'NUM'), ('6', 'NUM'), ('5', 'NUM'), ('3', 'NUM'), ('3', 'NUM'), ('4', 'NUM'), ('4', 'NUM'), ('4', 'NUM'), ('          ', 'SPACE'), ('S', 'NOUN'), ('\uf0e0', 'PROPN'), ('AA', 'PROPN')] 

>> Dependency Tags are: 
[('    ', 'ROOT'), ('3', 'nummod'), ('6', 'appos'), ('5', 'appos'), ('3', 'appos'), ('3', 'appos'), ('4', 'appos'), ('4', 'appos'), ('4', 'nummod'), ('          ', 'compound'), ('S', 'compound'), ('\uf0e0', 'appos'), ('AA', 'punct')]

>> Bigrams: 
[[    , 3], [3, 6], [6, 5], [5, 3], [3, 3], [3, 4], [4, 4], [4, 4], [4,           ], [          , S], [S, ], [, AA]]

>> Trigrams: 
[[    , 3, 6], [3, 6, 5], [6, 5, 3], [5, 3, 3], [3, 3, 4], [3, 4, 4], [4, 4, 4], [4, 4,           ], [4,           , S], [          , S, ], [S, , AA]]

>> Noun Phrases are: 
[4           S ]

>> Named Entities are: 
[]


============================ Sentence 765 =============================

A  aA | b                        Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#› 


>> Tokens are: 
[, aA, |, b,                        , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›] 

>> PoS Tags are: 
[('\uf0e0', 'NOUN'), ('aA', 'PROPN'), ('|', 'NOUN'), ('b', 'X'), ('                       ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X')] 

>> Dependency Tags are: 
[('\uf0e0', 'nsubj'), ('aA', 'appos'), ('|', 'appos'), ('b', 'meta'), ('                       ', 'compound'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'appos'), ('#', 'nmod'), ('3130006', 'appos'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'dobj'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct')]

>> Bigrams: 
[[, aA], [aA, |], [|, b], [b,                        ], [                       , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›]]

>> Trigrams: 
[[, aA, |], [aA, |, b], [|, b,                        ], [b,                        , Prof.], [                       , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›]]

>> Noun Phrases are: 
[, aA, |, b                        Prof. Jay R Dhamsaniya, (PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 766 =============================

 Parsing Methods Parsing Top down parsing Bottom up parsing (Shift reduce) Back tracking Parsing without backtracking (predictive Parsing) LR parsing Operator precedence LALR   


>> Tokens are: 
[ , Parsing, Methods, Parsing, parsing, parsing, (, Shift, reduce, ), tracking, Parsing, backtracking, (, predictive, Parsing, ), LR, parsing, Operator, precedence, LALR,  ] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('Parsing', 'PROPN'), ('Methods', 'PROPN'), ('Parsing', 'VERB'), ('parsing', 'VERB'), ('parsing', 'VERB'), ('(', 'PUNCT'), ('Shift', 'NOUN'), ('reduce', 'VERB'), (')', 'PUNCT'), ('tracking', 'VERB'), ('Parsing', 'VERB'), ('backtracking', 'VERB'), ('(', 'PUNCT'), ('predictive', 'ADJ'), ('Parsing', 'PROPN'), (')', 'PUNCT'), ('LR', 'PROPN'), ('parsing', 'VERB'), ('Operator', 'PROPN'), ('precedence', 'NOUN'), ('LALR', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'compound'), ('Parsing', 'compound'), ('Methods', 'dep'), ('Parsing', 'acl'), ('parsing', 'acl'), ('parsing', 'ccomp'), ('(', 'punct'), ('Shift', 'nsubj'), ('reduce', 'ccomp'), (')', 'punct'), ('tracking', 'ROOT'), ('Parsing', 'dobj'), ('backtracking', 'pcomp'), ('(', 'punct'), ('predictive', 'amod'), ('Parsing', 'nmod'), (')', 'punct'), ('LR', 'nsubj'), ('parsing', 'parataxis'), ('Operator', 'compound'), ('precedence', 'compound'), ('LALR', 'dobj'), (' ', 'punct')]

>> Bigrams: 
[[ , Parsing], [Parsing, Methods], [Methods, Parsing], [Parsing, parsing], [parsing, parsing], [parsing, (], [(, Shift], [Shift, reduce], [reduce, )], [), tracking], [tracking, Parsing], [Parsing, backtracking], [backtracking, (], [(, predictive], [predictive, Parsing], [Parsing, )], [), LR], [LR, parsing], [parsing, Operator], [Operator, precedence], [precedence, LALR], [LALR,  ]]

>> Trigrams: 
[[ , Parsing, Methods], [Parsing, Methods, Parsing], [Methods, Parsing, parsing], [Parsing, parsing, parsing], [parsing, parsing, (], [parsing, (, Shift], [(, Shift, reduce], [Shift, reduce, )], [reduce, ), tracking], [), tracking, Parsing], [tracking, Parsing, backtracking], [Parsing, backtracking, (], [backtracking, (, predictive], [(, predictive, Parsing], [predictive, Parsing, )], [Parsing, ), LR], [), LR, parsing], [LR, parsing, Operator], [parsing, Operator, precedence], [Operator, precedence, LALR], [precedence, LALR,  ]]

>> Noun Phrases are: 
[Top, Bottom, Shift, predictive Parsing) LR, Operator precedence LALR]

>> Named Entities are: 
[('Bottom', 'PERSON')]


============================ Sentence 767 =============================

CLR  SLR   


>> Tokens are: 
[CLR,  , SLR,  ] 

>> PoS Tags are: 
[('CLR', 'PROPN'), (' ', 'SPACE'), ('SLR', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('CLR', 'ROOT'), (' ', 'appos'), ('SLR', 'compound'), (' ', 'appos')]

>> Bigrams: 
[[CLR,  ], [ , SLR], [SLR,  ]]

>> Trigrams: 
[[CLR,  , SLR], [ , SLR,  ]]

>> Noun Phrases are: 
[CLR]

>> Named Entities are: 
[('CLR', 'ORG'), ('SLR', 'ORG')]


============================ Sentence 768 =============================

Recursive  descent  LL(1)        


>> Tokens are: 
[Recursive,  , descent,  , LL(1, ),       ] 

>> PoS Tags are: 
[('Recursive', 'PROPN'), (' ', 'SPACE'), ('descent', 'NOUN'), (' ', 'SPACE'), ('LL(1', 'NOUN'), (')', 'PUNCT'), ('      ', 'SPACE')] 

>> Dependency Tags are: 
[('Recursive', 'compound'), (' ', 'poss'), ('descent', 'appos'), (' ', 'compound'), ('LL(1', 'appos'), (')', 'punct'), ('      ', 'ROOT')]

>> Bigrams: 
[[Recursive,  ], [ , descent], [descent,  ], [ , LL(1], [LL(1, )], [),       ]]

>> Trigrams: 
[[Recursive,  , descent], [ , descent,  ], [descent,  , LL(1], [ , LL(1, )], [LL(1, ),       ]]

>> Noun Phrases are: 
[descent,  LL(1]

>> Named Entities are: 
[]


============================ Sentence 769 =============================

Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara   


>> Tokens are: 
[Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara,  ] 

>> PoS Tags are: 
[('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'nsubj'), ('#', 'appos'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'dep'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'ROOT'), ('‹#›', 'punct'), ('  ', 'appos'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), (' ', 'punct')]

>> Bigrams: 
[[Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,  ]]

>> Trigrams: 
[[Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,  ]]

>> Noun Phrases are: 
[Prof. Jay R Dhamsaniya, (PS, Unit, Prof. Dixita B Kagathara]

>> Named Entities are: 
[('PS', 'ORG'), ('Dixita', 'PERSON'), ('Kagathara', 'PERSON')]


============================ Sentence 770 =============================

#2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[#, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('#', 'nmod'), ('2170701', 'nsubj'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[(CD, Unit, Theory, I]

>> Named Entities are: 
[]


============================ Sentence 771 =============================

How to calculate look ahead? 


>> Tokens are: 
[calculate, look, ahead, ?] 

>> PoS Tags are: 
[('calculate', 'VERB'), ('look', 'VERB'), ('ahead', 'ADV'), ('?', 'PUNCT')] 

>> Dependency Tags are: 
[('calculate', 'ROOT'), ('look', 'dobj'), ('ahead', 'advmod'), ('?', 'punct')]

>> Bigrams: 
[[calculate, look], [look, ahead], [ahead, ?]]

>> Trigrams: 
[[calculate, look, ahead], [look, ahead, ?]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 772 =============================

How to calculate look ahead? 


>> Tokens are: 
[calculate, look, ahead, ?] 

>> PoS Tags are: 
[('calculate', 'VERB'), ('look', 'VERB'), ('ahead', 'ADV'), ('?', 'PUNCT')] 

>> Dependency Tags are: 
[('calculate', 'ROOT'), ('look', 'dobj'), ('ahead', 'advmod'), ('?', 'punct')]

>> Bigrams: 
[[calculate, look], [look, ahead], [ahead, ?]]

>> Trigrams: 
[[calculate, look, ahead], [look, ahead, ?]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 773 =============================

SCC C cC | d Closure(I) 


>> Tokens are: 
[SCC, C, cC, |, d, Closure(I, )] 

>> PoS Tags are: 
[('S\uf0e0CC', 'NOUN'), ('C\uf0e0', 'NOUN'), ('cC', 'NOUN'), ('|', 'VERB'), ('d', 'X'), ('Closure(I', 'X'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('S\uf0e0CC', 'compound'), ('C\uf0e0', 'compound'), ('cC', 'nsubj'), ('|', 'ROOT'), ('d', 'dobj'), ('Closure(I', 'intj'), (')', 'punct')]

>> Bigrams: 
[[SCC, C], [C, cC], [cC, |], [|, d], [d, Closure(I], [Closure(I, )]]

>> Trigrams: 
[[SCC, C, cC], [C, cC, |], [cC, |, d], [|, d, Closure(I], [d, Closure(I, )]]

>> Noun Phrases are: 
[SCC C cC]

>> Named Entities are: 
[('cC', 'ORG')]


============================ Sentence 774 =============================

	S’.S,$ 	S.CC, 	C.cC, 	C.d,   	S’			. 


>> Tokens are: 
[	, S’.S,$, 	, S.CC, ,, 	, C.cC, ,, 	, C.d, ,,   	, S, ’, 	, , 		, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('S’\uf0e0.S,$', 'PROPN'), ('\t', 'SPACE'), ('S\uf0e0.CC', 'PROPN'), (',', 'PUNCT'), ('\t', 'SPACE'), ('C\uf0e0.cC', 'PROPN'), (',', 'PUNCT'), ('\t', 'SPACE'), ('C\uf0e0.d', 'PROPN'), (',', 'PUNCT'), ('  \t', 'SPACE'), ('S', 'NOUN'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('\uf0e0', 'NOUN'), ('\t\t', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('S’\uf0e0.S,$', 'compound'), ('\t', 'nsubj'), ('S\uf0e0.CC', 'dep'), (',', 'punct'), ('\t', 'compound'), ('C\uf0e0.cC', 'ROOT'), (',', 'punct'), ('\t', 'compound'), ('C\uf0e0.d', 'npadvmod'), (',', 'punct'), ('  \t', 'compound'), ('S', 'poss'), ('’', 'punct'), ('\t', 'amod'), ('\uf0e0', 'appos'), ('\t\t', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[	, S’.S,$], [S’.S,$, 	], [	, S.CC], [S.CC, ,], [,, 	], [	, C.cC], [C.cC, ,], [,, 	], [	, C.d], [C.d, ,], [,,   	], [  	, S], [S, ’], [’, 	], [	, ], [, 		], [		, .]]

>> Trigrams: 
[[	, S’.S,$, 	], [S’.S,$, 	, S.CC], [	, S.CC, ,], [S.CC, ,, 	], [,, 	, C.cC], [	, C.cC, ,], [C.cC, ,, 	], [,, 	, C.d], [	, C.d, ,], [C.d, ,,   	], [,,   	, S], [  	, S, ’], [S, ’, 	], [’, 	, ], [	, , 		], [, 		, .]]

>> Noun Phrases are: 
[	S’.S,$ 	S.CC, 	C.cC,   	S’	]

>> Named Entities are: 
[('S’\uf0e0.S,$', 'GPE'), ('S\uf0e0.CC', 'GPE')]


============================ Sentence 775 =============================

	S		,	$ 	A			. 


>> Tokens are: 
[	, S, 		, ,, 	, $, 	, 	, , 		, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('S', 'PROPN'), ('\t\t', 'SPACE'), (',', 'PUNCT'), ('\t', 'SPACE'), ('$', 'SYM'), ('\t', 'SPACE'), ('\t', 'SPACE'), ('\uf0e0', 'NOUN'), ('\t\t', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('S', 'compound'), ('\t\t', 'ROOT'), (',', 'punct'), ('\t', 'appos'), ('$', 'punct'), ('\t', 'nmod'), ('\t', 'compound'), ('\uf0e0', 'compound'), ('\t\t', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[	, S], [S, 		], [		, ,], [,, 	], [	, $], [$, 	], [	, 	], [	, ], [, 		], [		, .]]

>> Trigrams: 
[[	, S, 		], [S, 		, ,], [		, ,, 	], [,, 	, $], [	, $, 	], [$, 	, 	], [	, 	, ], [	, , 		], [, 		, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 776 =============================

	X		,	     $ 	S			. 


>> Tokens are: 
[	, X, 		, ,, 	     , $, 	, S, 	, , 		, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('X', 'PROPN'), ('\t\t', 'SPACE'), (',', 'PUNCT'), ('\t     ', 'SPACE'), ('$', 'SYM'), ('\t', 'SPACE'), ('S', 'PROPN'), ('\t', 'SPACE'), ('\uf0e0', 'PROPN'), ('\t\t', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('X', 'compound'), ('\t\t', 'ROOT'), (',', 'punct'), ('\t     ', 'appos'), ('$', 'nmod'), ('\t', 'compound'), ('S', 'compound'), ('\t', 'compound'), ('\uf0e0', 'compound'), ('\t\t', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[	, X], [X, 		], [		, ,], [,, 	     ], [	     , $], [$, 	], [	, S], [S, 	], [	, ], [, 		], [		, .]]

>> Trigrams: 
[[	, X, 		], [X, 		, ,], [		, ,, 	     ], [,, 	     , $], [	     , $, 	], [$, 	, S], [	, S, 	], [S, 	, ], [	, , 		], [, 		, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 777 =============================

	C	C	,	$ 	A			. 


>> Tokens are: 
[	, C, 	, C, 	, ,, 	, $, 	, 	, , 		, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('C', 'PROPN'), ('\t', 'SPACE'), ('C', 'PROPN'), ('\t', 'SPACE'), (',', 'PUNCT'), ('\t', 'SPACE'), ('$', 'SYM'), ('\t', 'SPACE'), ('\t', 'SPACE'), ('\uf0e0', 'NOUN'), ('\t\t', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('C', 'compound'), ('\t', 'compound'), ('C', 'compound'), ('\t', 'ROOT'), (',', 'punct'), ('\t', 'nmod'), ('$', 'punct'), ('\t', 'nmod'), ('\t', 'compound'), ('\uf0e0', 'compound'), ('\t\t', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[	, C], [C, 	], [	, C], [C, 	], [	, ,], [,, 	], [	, $], [$, 	], [	, 	], [	, ], [, 		], [		, .]]

>> Trigrams: 
[[	, C, 	], [C, 	, C], [	, C, 	], [C, 	, ,], [	, ,, 	], [,, 	, $], [	, $, 	], [$, 	, 	], [	, 	, ], [	, , 		], [, 		, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 778 =============================

	X		,	     c|d 


>> Tokens are: 
[	, X, 		, ,, 	     , c|d] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('X', 'PROPN'), ('\t\t', 'SPACE'), (',', 'PUNCT'), ('\t     ', 'SPACE'), ('c|d', 'X')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('X', 'compound'), ('\t\t', 'ROOT'), (',', 'punct'), ('\t     ', 'appos'), ('c|d', 'punct')]

>> Bigrams: 
[[	, X], [X, 		], [		, ,], [,, 	     ], [	     , c|d]]

>> Trigrams: 
[[	, X, 		], [X, 		, ,], [		, ,, 	     ], [,, 	     , c|d]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 779 =============================

c|d    Prof. Jay R Dhamsaniya 


>> Tokens are: 
[c|d,    , Prof., Jay, R, Dhamsaniya] 

>> PoS Tags are: 
[('c|d', 'NUM'), ('   ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN')] 

>> Dependency Tags are: 
[('c|d', 'ROOT'), ('   ', 'nummod'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'npadvmod')]

>> Bigrams: 
[[c|d,    ], [   , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya]]

>> Trigrams: 
[[c|d,    , Prof.], [   , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('Jay R Dhamsaniya', 'ORG')]


============================ Sentence 780 =============================

#3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[#, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('#', 'nmod'), ('3130006', 'ROOT'), ('(', 'punct'), ('PS', 'nsubj'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'relcl'), ('  ', 'advmod'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'appos'), ('  ', 'advmod'), ('Unit', 'npadvmod'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Theory, I]

>> Named Entities are: 
[('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 781 =============================

Example: CLR(1)- canonical LR S  


>> Tokens are: 
[Example, :, CLR(1)-, canonical, LR, S, ] 

>> PoS Tags are: 
[('Example', 'NOUN'), (':', 'PUNCT'), ('CLR(1)-', 'NOUN'), ('canonical', 'ADJ'), ('LR', 'PROPN'), ('S', 'PROPN'), ('\uf0e0', 'PROPN')] 

>> Dependency Tags are: 
[('Example', 'ROOT'), (':', 'punct'), ('CLR(1)-', 'compound'), ('canonical', 'amod'), ('LR', 'compound'), ('S', 'compound'), ('\uf0e0', 'appos')]

>> Bigrams: 
[[Example, :], [:, CLR(1)-], [CLR(1)-, canonical], [canonical, LR], [LR, S], [S, ]]

>> Trigrams: 
[[Example, :, CLR(1)-], [:, CLR(1)-, canonical], [CLR(1)-, canonical, LR], [canonical, LR, S], [LR, S, ]]

>> Noun Phrases are: 
[Example, CLR(1)- canonical LR S ]

>> Named Entities are: 
[('LR S \uf0e0', 'ORG')]


============================ Sentence 782 =============================

AA 


>> Tokens are: 
[AA] 

>> PoS Tags are: 
[('AA', 'PROPN')] 

>> Dependency Tags are: 
[('AA', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[AA]

>> Named Entities are: 
[]


============================ Sentence 783 =============================

A  aA | b S’.S,$ S.AA,$  A.aA, a|b 


>> Tokens are: 
[, aA, |, b, S’.S,$, S.AA,$,  , A.aA, ,, a|b] 

>> PoS Tags are: 
[('\uf0e0', 'NOUN'), ('aA', 'PROPN'), ('|', 'NOUN'), ('b', 'ADP'), ('S’\uf0e0.S,$', 'PROPN'), ('S\uf0e0.AA,$', 'NOUN'), (' ', 'SPACE'), ('A\uf0e0.aA', 'PROPN'), (',', 'PUNCT'), ('a|b', 'PROPN')] 

>> Dependency Tags are: 
[('\uf0e0', 'nmod'), ('aA', 'appos'), ('|', 'appos'), ('b', 'prep'), ('S’\uf0e0.S,$', 'compound'), ('S\uf0e0.AA,$', 'appos'), (' ', 'prep'), ('A\uf0e0.aA', 'ROOT'), (',', 'punct'), ('a|b', 'punct')]

>> Bigrams: 
[[, aA], [aA, |], [|, b], [b, S’.S,$], [S’.S,$, S.AA,$], [S.AA,$,  ], [ , A.aA], [A.aA, ,], [,, a|b]]

>> Trigrams: 
[[, aA, |], [aA, |, b], [|, b, S’.S,$], [b, S’.S,$, S.AA,$], [S’.S,$, S.AA,$,  ], [S.AA,$,  , A.aA], [ , A.aA, ,], [A.aA, ,, a|b]]

>> Noun Phrases are: 
[aA, |, S’.S,$ S.AA,$]

>> Named Entities are: 
[('S’\uf0e0.S,$ S\uf0e0.AA,$', 'PERSON')]


============================ Sentence 784 =============================

A.b, a|b  S’ S., $  S A.A,$ A.aA, $ A. b, $  A.aA ,a|b 


>> Tokens are: 
[A.b, ,, a|b,  , S’, S., ,, $,  , S, A.A,$, A.aA, ,, $, A., b, ,, $,  , A.aA, ,, a|b] 

>> PoS Tags are: 
[('A\uf0e0.b', 'PROPN'), (',', 'PUNCT'), ('a|b', 'PROPN'), (' ', 'SPACE'), ('S’\uf0e0', 'PROPN'), ('S.', 'PROPN'), (',', 'PUNCT'), ('$', 'SYM'), (' ', 'SPACE'), ('S\uf0e0', 'PROPN'), ('A.A,$', 'PROPN'), ('A\uf0e0.aA', 'PROPN'), (',', 'PUNCT'), ('$', 'SYM'), ('A\uf0e0.', 'NOUN'), ('b', 'NOUN'), (',', 'PUNCT'), ('$', 'SYM'), (' ', 'SPACE'), ('A\uf0e0.aA', 'PROPN'), (',', 'PUNCT'), ('a|b', 'PROPN')] 

>> Dependency Tags are: 
[('A\uf0e0.b', 'nmod'), (',', 'punct'), ('a|b', 'npadvmod'), (' ', 'appos'), ('S’\uf0e0', 'compound'), ('S.', 'ROOT'), (',', 'punct'), ('$', 'nmod'), (' ', 'compound'), ('S\uf0e0', 'compound'), ('A.A,$', 'compound'), ('A\uf0e0.aA', 'appos'), (',', 'punct'), ('$', 'nmod'), ('A\uf0e0.', 'compound'), ('b', 'appos'), (',', 'punct'), ('$', 'nmod'), (' ', 'compound'), ('A\uf0e0.aA', 'appos'), (',', 'punct'), ('a|b', 'punct')]

>> Bigrams: 
[[A.b, ,], [,, a|b], [a|b,  ], [ , S’], [S’, S.], [S., ,], [,, $], [$,  ], [ , S], [S, A.A,$], [A.A,$, A.aA], [A.aA, ,], [,, $], [$, A.], [A., b], [b, ,], [,, $], [$,  ], [ , A.aA], [A.aA, ,], [,, a|b]]

>> Trigrams: 
[[A.b, ,, a|b], [,, a|b,  ], [a|b,  , S’], [ , S’, S.], [S’, S., ,], [S., ,, $], [,, $,  ], [$,  , S], [ , S, A.A,$], [S, A.A,$, A.aA], [A.A,$, A.aA, ,], [A.aA, ,, $], [,, $, A.], [$, A., b], [A., b, ,], [b, ,, $], [,, $,  ], [$,  , A.aA], [ , A.aA, ,], [A.aA, ,, a|b]]

>> Noun Phrases are: 
[A.b, a|b  S’ S., $  S A.A,$ A.aA, $ A. b, $  A.aA]

>> Named Entities are: 
[('A\uf0e0.b', 'PERSON'), ('S’\uf0e0 S.', 'PERSON')]


============================ Sentence 785 =============================

A. b, a|b    


>> Tokens are: 
[A., b, ,, a|b,   ] 

>> PoS Tags are: 
[('A\uf0e0.', 'NOUN'), ('b', 'NOUN'), (',', 'PUNCT'), ('a|b', 'X'), ('  ', 'SPACE')] 

>> Dependency Tags are: 
[('A\uf0e0.', 'compound'), ('b', 'ROOT'), (',', 'punct'), ('a|b', 'appos'), ('  ', 'punct')]

>> Bigrams: 
[[A., b], [b, ,], [,, a|b], [a|b,   ]]

>> Trigrams: 
[[A., b, ,], [b, ,, a|b], [,, a|b,   ]]

>> Noun Phrases are: 
[A. b]

>> Named Entities are: 
[]


============================ Sentence 786 =============================

Aa. 


>> Tokens are: 
[Aa, .] 

>> PoS Tags are: 
[('A\uf0e0a', 'INTJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('A\uf0e0a', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Aa, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 787 =============================

A, a|b 


>> Tokens are: 
[,, a|b] 

>> PoS Tags are: 
[(',', 'PUNCT'), ('a|b', 'PROPN')] 

>> Dependency Tags are: 
[(',', 'punct'), ('a|b', 'punct')]

>> Bigrams: 
[[,, a|b]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 788 =============================

A b., a|b  A. aA,$ A. b, $  A a.A,$ 


>> Tokens are: 
[A, b., ,, a|b,  , A., aA,$, A., b, ,, $,  , A, a., A,$] 

>> PoS Tags are: 
[('A\uf0e0', 'INTJ'), ('b.', 'NOUN'), (',', 'PUNCT'), ('a|b', 'X'), (' ', 'SPACE'), ('A\uf0e0.', 'NOUN'), ('aA,$', 'NOUN'), ('A\uf0e0.', 'NOUN'), ('b', 'NOUN'), (',', 'PUNCT'), ('$', 'SYM'), (' ', 'SPACE'), ('A\uf0e0', 'ADJ'), ('a.', 'NOUN'), ('A,$', 'NOUN')] 

>> Dependency Tags are: 
[('A\uf0e0', 'compound'), ('b.', 'ROOT'), (',', 'punct'), ('a|b', 'appos'), (' ', 'compound'), ('A\uf0e0.', 'compound'), ('aA,$', 'compound'), ('A\uf0e0.', 'compound'), ('b', 'appos'), (',', 'punct'), ('$', 'nmod'), (' ', 'appos'), ('A\uf0e0', 'prep'), ('a.', 'compound'), ('A,$', 'appos')]

>> Bigrams: 
[[A, b.], [b., ,], [,, a|b], [a|b,  ], [ , A.], [A., aA,$], [aA,$, A.], [A., b], [b, ,], [,, $], [$,  ], [ , A], [A, a.], [a., A,$]]

>> Trigrams: 
[[A, b., ,], [b., ,, a|b], [,, a|b,  ], [a|b,  , A.], [ , A., aA,$], [A., aA,$, A.], [aA,$, A., b], [A., b, ,], [b, ,, $], [,, $,  ], [$,  , A], [ , A, a.], [A, a., A,$]]

>> Noun Phrases are: 
[A b.,  A. aA,$ A. b, a.A,$]

>> Named Entities are: 
[]


============================ Sentence 789 =============================

A 


>> Tokens are: 
[A] 

>> PoS Tags are: 
[('A\uf0e0', 'INTJ')] 

>> Dependency Tags are: 
[('A\uf0e0', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 790 =============================

b. ,$  A.aA , a|b 


>> Tokens are: 
[b., ,, $,  , A.aA, ,, a|b] 

>> PoS Tags are: 
[('b.', 'NOUN'), (',', 'PUNCT'), ('$', 'SYM'), (' ', 'SPACE'), ('A\uf0e0.aA', 'PROPN'), (',', 'PUNCT'), ('a|b', 'PROPN')] 

>> Dependency Tags are: 
[('b.', 'ROOT'), (',', 'punct'), ('$', 'nmod'), (' ', 'compound'), ('A\uf0e0.aA', 'appos'), (',', 'punct'), ('a|b', 'punct')]

>> Bigrams: 
[[b., ,], [,, $], [$,  ], [ , A.aA], [A.aA, ,], [,, a|b]]

>> Trigrams: 
[[b., ,, $], [,, $,  ], [$,  , A.aA], [ , A.aA, ,], [A.aA, ,, a|b]]

>> Noun Phrases are: 
[b., $  A.aA]

>> Named Entities are: 
[]


============================ Sentence 791 =============================

A.b , a|b 


>> Tokens are: 
[A.b, ,, a|b] 

>> PoS Tags are: 
[('A\uf0e0.b', 'PROPN'), (',', 'PUNCT'), ('a|b', 'X')] 

>> Dependency Tags are: 
[('A\uf0e0.b', 'ROOT'), (',', 'punct'), ('a|b', 'appos')]

>> Bigrams: 
[[A.b, ,], [,, a|b]]

>> Trigrams: 
[[A.b, ,, a|b]]

>> Noun Phrases are: 
[A.b]

>> Named Entities are: 
[('A\uf0e0.b', 'PERSON')]


============================ Sentence 792 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 793 =============================

A a.A , a|b 


>> Tokens are: 
[A, a., ,, a|b] 

>> PoS Tags are: 
[('A\uf0e0', 'ADJ'), ('a.', 'NOUN'), (',', 'PUNCT'), ('a|b', 'PROPN')] 

>> Dependency Tags are: 
[('A\uf0e0', 'amod'), ('a.', 'compound'), (',', 'punct'), ('a|b', 'punct')]

>> Bigrams: 
[[A, a.], [a., ,], [,, a|b]]

>> Trigrams: 
[[A, a., ,], [a., ,, a|b]]

>> Noun Phrases are: 
[A a.A]

>> Named Entities are: 
[]


============================ Sentence 794 =============================

A b., a|b   


>> Tokens are: 
[A, b., ,, a|b,  ] 

>> PoS Tags are: 
[('A\uf0e0', 'INTJ'), ('b.', 'NOUN'), (',', 'PUNCT'), ('a|b', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('A\uf0e0', 'compound'), ('b.', 'ROOT'), (',', 'punct'), ('a|b', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[A, b.], [b., ,], [,, a|b], [a|b,  ]]

>> Trigrams: 
[[A, b., ,], [b., ,, a|b], [,, a|b,  ]]

>> Noun Phrases are: 
[A b.]

>> Named Entities are: 
[]


============================ Sentence 795 =============================

S AA. ,$   A 


>> Tokens are: 
[S, AA, ., ,, $,   , A] 

>> PoS Tags are: 
[('S\uf0e0', 'PROPN'), ('AA', 'PROPN'), ('.', 'PUNCT'), (',', 'PUNCT'), ('$', 'SYM'), ('  ', 'SPACE'), ('A\uf0e0', 'ADV')] 

>> Dependency Tags are: 
[('S\uf0e0', 'compound'), ('AA', 'ROOT'), ('.', 'punct'), (',', 'punct'), ('$', 'nmod'), ('  ', 'appos'), ('A\uf0e0', 'advmod')]

>> Bigrams: 
[[S, AA], [AA, .], [., ,], [,, $], [$,   ], [  , A]]

>> Trigrams: 
[[S, AA, .], [AA, ., ,], [., ,, $], [,, $,   ], [$,   , A]]

>> Noun Phrases are: 
[S AA]

>> Named Entities are: 
[]


============================ Sentence 796 =============================

aA.,a|b     3 8 5 6 3 7 4 4           Augmented grammar A aA.,$  9 A. aA,$ A. b, $  A a.A,$ 


>> Tokens are: 
[aA.,a|b,     , 3, 8, 5, 6, 3, 7, 4, 4,           , Augmented, grammar, A, aA.,$,  , 9, A., aA,$, A., b, ,, $,  , A, a., A,$] 

>> PoS Tags are: 
[('aA.,a|b', 'PUNCT'), ('    ', 'SPACE'), ('3', 'NUM'), ('8', 'NUM'), ('5', 'NUM'), ('6', 'NUM'), ('3', 'NUM'), ('7', 'NUM'), ('4', 'NUM'), ('4', 'NUM'), ('          ', 'SPACE'), ('Augmented', 'PROPN'), ('grammar', 'NOUN'), ('A\uf0e0', 'ADP'), ('aA.,$', 'ADV'), (' ', 'SPACE'), ('9', 'NUM'), ('A\uf0e0.', 'NOUN'), ('aA,$', 'NOUN'), ('A\uf0e0.', 'NOUN'), ('b', 'NOUN'), (',', 'PUNCT'), ('$', 'SYM'), (' ', 'SPACE'), ('A\uf0e0', 'ADJ'), ('a.', 'NOUN'), ('A,$', 'NOUN')] 

>> Dependency Tags are: 
[('aA.,a|b', 'punct'), ('    ', 'nmod'), ('3', 'nummod'), ('8', 'compound'), ('5', 'compound'), ('6', 'appos'), ('3', 'nummod'), ('7', 'appos'), ('4', 'compound'), ('4', 'nummod'), ('          ', 'nmod'), ('Augmented', 'compound'), ('grammar', 'ROOT'), ('A\uf0e0', 'advmod'), ('aA.,$', 'prep'), (' ', 'appos'), ('9', 'nummod'), ('A\uf0e0.', 'compound'), ('aA,$', 'compound'), ('A\uf0e0.', 'compound'), ('b', 'appos'), (',', 'punct'), ('$', 'nmod'), (' ', 'npadvmod'), ('A\uf0e0', 'amod'), ('a.', 'compound'), ('A,$', 'appos')]

>> Bigrams: 
[[aA.,a|b,     ], [    , 3], [3, 8], [8, 5], [5, 6], [6, 3], [3, 7], [7, 4], [4, 4], [4,           ], [          , Augmented], [Augmented, grammar], [grammar, A], [A, aA.,$], [aA.,$,  ], [ , 9], [9, A.], [A., aA,$], [aA,$, A.], [A., b], [b, ,], [,, $], [$,  ], [ , A], [A, a.], [a., A,$]]

>> Trigrams: 
[[aA.,a|b,     , 3], [    , 3, 8], [3, 8, 5], [8, 5, 6], [5, 6, 3], [6, 3, 7], [3, 7, 4], [7, 4, 4], [4, 4,           ], [4,           , Augmented], [          , Augmented, grammar], [Augmented, grammar, A], [grammar, A, aA.,$], [A, aA.,$,  ], [aA.,$,  , 9], [ , 9, A.], [9, A., aA,$], [A., aA,$, A.], [aA,$, A., b], [A., b, ,], [b, ,, $], [,, $,  ], [$,  , A], [ , A, a.], [A, a., A,$]]

>> Noun Phrases are: 
[aA.,a|b     3 8 5 6 3 7 4 4           Augmented grammar, 9 A. aA,$ A. b, $  A a.A,$]

>> Named Entities are: 
[('aA.,a|b', 'CARDINAL'), ('9', 'CARDINAL')]


============================ Sentence 797 =============================

A b. ,S  6 7     LR(1) item set     Prof. Jay R Dhamsaniya 


>> Tokens are: 
[A, b., ,, S,  , 6, 7,     , LR(1, ), item, set,     , Prof., Jay, R, Dhamsaniya] 

>> PoS Tags are: 
[('A\uf0e0', 'INTJ'), ('b.', 'NOUN'), (',', 'PUNCT'), ('S', 'PROPN'), (' ', 'SPACE'), ('6', 'NUM'), ('7', 'NUM'), ('    ', 'SPACE'), ('LR(1', 'NUM'), (')', 'PUNCT'), ('item', 'NOUN'), ('set', 'VERB'), ('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN')] 

>> Dependency Tags are: 
[('A\uf0e0', 'advmod'), ('b.', 'nmod'), (',', 'punct'), ('S', 'nmod'), (' ', 'nmod'), ('6', 'compound'), ('7', 'nummod'), ('    ', 'nmod'), ('LR(1', 'nmod'), (')', 'punct'), ('item', 'nsubj'), ('set', 'ROOT'), ('    ', 'nummod'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'dobj')]

>> Bigrams: 
[[A, b.], [b., ,], [,, S], [S,  ], [ , 6], [6, 7], [7,     ], [    , LR(1], [LR(1, )], [), item], [item, set], [set,     ], [    , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya]]

>> Trigrams: 
[[A, b., ,], [b., ,, S], [,, S,  ], [S,  , 6], [ , 6, 7], [6, 7,     ], [7,     , LR(1], [    , LR(1, )], [LR(1, ), item], [), item, set], [item, set,     ], [set,     , Prof.], [    , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya]]

>> Noun Phrases are: 
[A b. ,S  6 7     LR(1) item,     Prof. Jay R Dhamsaniya]

>> Named Entities are: 
[('6 7', 'CARDINAL'), ('Jay R Dhamsaniya', 'ORG')]


============================ Sentence 798 =============================

#3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[#, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('#', 'npadvmod'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'npadvmod'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[(PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 799 =============================

Example: CLR(1)- canonical LR S  


>> Tokens are: 
[Example, :, CLR(1)-, canonical, LR, S, ] 

>> PoS Tags are: 
[('Example', 'NOUN'), (':', 'PUNCT'), ('CLR(1)-', 'NOUN'), ('canonical', 'ADJ'), ('LR', 'PROPN'), ('S', 'PROPN'), ('\uf0e0', 'PROPN')] 

>> Dependency Tags are: 
[('Example', 'ROOT'), (':', 'punct'), ('CLR(1)-', 'compound'), ('canonical', 'amod'), ('LR', 'compound'), ('S', 'compound'), ('\uf0e0', 'appos')]

>> Bigrams: 
[[Example, :], [:, CLR(1)-], [CLR(1)-, canonical], [canonical, LR], [LR, S], [S, ]]

>> Trigrams: 
[[Example, :, CLR(1)-], [:, CLR(1)-, canonical], [CLR(1)-, canonical, LR], [canonical, LR, S], [LR, S, ]]

>> Noun Phrases are: 
[Example, CLR(1)- canonical LR S ]

>> Named Entities are: 
[('LR S \uf0e0', 'ORG')]


============================ Sentence 800 =============================

AA 


>> Tokens are: 
[AA] 

>> PoS Tags are: 
[('AA', 'PROPN')] 

>> Dependency Tags are: 
[('AA', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[AA]

>> Named Entities are: 
[]


============================ Sentence 801 =============================

A  aA | b S’.S,$ S.AA,$  A.aA, a|b 


>> Tokens are: 
[, aA, |, b, S’.S,$, S.AA,$,  , A.aA, ,, a|b] 

>> PoS Tags are: 
[('\uf0e0', 'NOUN'), ('aA', 'PROPN'), ('|', 'NOUN'), ('b', 'ADP'), ('S’\uf0e0.S,$', 'PROPN'), ('S\uf0e0.AA,$', 'NOUN'), (' ', 'SPACE'), ('A\uf0e0.aA', 'PROPN'), (',', 'PUNCT'), ('a|b', 'PROPN')] 

>> Dependency Tags are: 
[('\uf0e0', 'nmod'), ('aA', 'appos'), ('|', 'appos'), ('b', 'prep'), ('S’\uf0e0.S,$', 'compound'), ('S\uf0e0.AA,$', 'appos'), (' ', 'prep'), ('A\uf0e0.aA', 'ROOT'), (',', 'punct'), ('a|b', 'punct')]

>> Bigrams: 
[[, aA], [aA, |], [|, b], [b, S’.S,$], [S’.S,$, S.AA,$], [S.AA,$,  ], [ , A.aA], [A.aA, ,], [,, a|b]]

>> Trigrams: 
[[, aA, |], [aA, |, b], [|, b, S’.S,$], [b, S’.S,$, S.AA,$], [S’.S,$, S.AA,$,  ], [S.AA,$,  , A.aA], [ , A.aA, ,], [A.aA, ,, a|b]]

>> Noun Phrases are: 
[aA, |, S’.S,$ S.AA,$]

>> Named Entities are: 
[('S’\uf0e0.S,$ S\uf0e0.AA,$', 'PERSON')]


============================ Sentence 802 =============================

A.b, a|b  S’ S., $  S A.A,$ A.aA, $ A. b, $  A.aA ,a|b 


>> Tokens are: 
[A.b, ,, a|b,  , S’, S., ,, $,  , S, A.A,$, A.aA, ,, $, A., b, ,, $,  , A.aA, ,, a|b] 

>> PoS Tags are: 
[('A\uf0e0.b', 'PROPN'), (',', 'PUNCT'), ('a|b', 'PROPN'), (' ', 'SPACE'), ('S’\uf0e0', 'PROPN'), ('S.', 'PROPN'), (',', 'PUNCT'), ('$', 'SYM'), (' ', 'SPACE'), ('S\uf0e0', 'PROPN'), ('A.A,$', 'PROPN'), ('A\uf0e0.aA', 'PROPN'), (',', 'PUNCT'), ('$', 'SYM'), ('A\uf0e0.', 'NOUN'), ('b', 'NOUN'), (',', 'PUNCT'), ('$', 'SYM'), (' ', 'SPACE'), ('A\uf0e0.aA', 'PROPN'), (',', 'PUNCT'), ('a|b', 'PROPN')] 

>> Dependency Tags are: 
[('A\uf0e0.b', 'nmod'), (',', 'punct'), ('a|b', 'npadvmod'), (' ', 'appos'), ('S’\uf0e0', 'compound'), ('S.', 'ROOT'), (',', 'punct'), ('$', 'nmod'), (' ', 'compound'), ('S\uf0e0', 'compound'), ('A.A,$', 'compound'), ('A\uf0e0.aA', 'appos'), (',', 'punct'), ('$', 'nmod'), ('A\uf0e0.', 'compound'), ('b', 'appos'), (',', 'punct'), ('$', 'nmod'), (' ', 'compound'), ('A\uf0e0.aA', 'appos'), (',', 'punct'), ('a|b', 'punct')]

>> Bigrams: 
[[A.b, ,], [,, a|b], [a|b,  ], [ , S’], [S’, S.], [S., ,], [,, $], [$,  ], [ , S], [S, A.A,$], [A.A,$, A.aA], [A.aA, ,], [,, $], [$, A.], [A., b], [b, ,], [,, $], [$,  ], [ , A.aA], [A.aA, ,], [,, a|b]]

>> Trigrams: 
[[A.b, ,, a|b], [,, a|b,  ], [a|b,  , S’], [ , S’, S.], [S’, S., ,], [S., ,, $], [,, $,  ], [$,  , S], [ , S, A.A,$], [S, A.A,$, A.aA], [A.A,$, A.aA, ,], [A.aA, ,, $], [,, $, A.], [$, A., b], [A., b, ,], [b, ,, $], [,, $,  ], [$,  , A.aA], [ , A.aA, ,], [A.aA, ,, a|b]]

>> Noun Phrases are: 
[A.b, a|b  S’ S., $  S A.A,$ A.aA, $ A. b, $  A.aA]

>> Named Entities are: 
[('A\uf0e0.b', 'PERSON'), ('S’\uf0e0 S.', 'PERSON')]


============================ Sentence 803 =============================

A. b, a|b    


>> Tokens are: 
[A., b, ,, a|b,   ] 

>> PoS Tags are: 
[('A\uf0e0.', 'NOUN'), ('b', 'NOUN'), (',', 'PUNCT'), ('a|b', 'X'), ('  ', 'SPACE')] 

>> Dependency Tags are: 
[('A\uf0e0.', 'compound'), ('b', 'ROOT'), (',', 'punct'), ('a|b', 'appos'), ('  ', 'punct')]

>> Bigrams: 
[[A., b], [b, ,], [,, a|b], [a|b,   ]]

>> Trigrams: 
[[A., b, ,], [b, ,, a|b], [,, a|b,   ]]

>> Noun Phrases are: 
[A. b]

>> Named Entities are: 
[]


============================ Sentence 804 =============================

Aa. 


>> Tokens are: 
[Aa, .] 

>> PoS Tags are: 
[('A\uf0e0a', 'INTJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('A\uf0e0a', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Aa, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 805 =============================

A, a|b 


>> Tokens are: 
[,, a|b] 

>> PoS Tags are: 
[(',', 'PUNCT'), ('a|b', 'PROPN')] 

>> Dependency Tags are: 
[(',', 'punct'), ('a|b', 'punct')]

>> Bigrams: 
[[,, a|b]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 806 =============================

A b., a|b  A. aA,$ A. b, $  A a.A,$ 


>> Tokens are: 
[A, b., ,, a|b,  , A., aA,$, A., b, ,, $,  , A, a., A,$] 

>> PoS Tags are: 
[('A\uf0e0', 'INTJ'), ('b.', 'NOUN'), (',', 'PUNCT'), ('a|b', 'X'), (' ', 'SPACE'), ('A\uf0e0.', 'NOUN'), ('aA,$', 'NOUN'), ('A\uf0e0.', 'NOUN'), ('b', 'NOUN'), (',', 'PUNCT'), ('$', 'SYM'), (' ', 'SPACE'), ('A\uf0e0', 'ADJ'), ('a.', 'NOUN'), ('A,$', 'NOUN')] 

>> Dependency Tags are: 
[('A\uf0e0', 'compound'), ('b.', 'ROOT'), (',', 'punct'), ('a|b', 'appos'), (' ', 'compound'), ('A\uf0e0.', 'compound'), ('aA,$', 'compound'), ('A\uf0e0.', 'compound'), ('b', 'appos'), (',', 'punct'), ('$', 'nmod'), (' ', 'appos'), ('A\uf0e0', 'prep'), ('a.', 'compound'), ('A,$', 'appos')]

>> Bigrams: 
[[A, b.], [b., ,], [,, a|b], [a|b,  ], [ , A.], [A., aA,$], [aA,$, A.], [A., b], [b, ,], [,, $], [$,  ], [ , A], [A, a.], [a., A,$]]

>> Trigrams: 
[[A, b., ,], [b., ,, a|b], [,, a|b,  ], [a|b,  , A.], [ , A., aA,$], [A., aA,$, A.], [aA,$, A., b], [A., b, ,], [b, ,, $], [,, $,  ], [$,  , A], [ , A, a.], [A, a., A,$]]

>> Noun Phrases are: 
[A b.,  A. aA,$ A. b, a.A,$]

>> Named Entities are: 
[]


============================ Sentence 807 =============================

A 


>> Tokens are: 
[A] 

>> PoS Tags are: 
[('A\uf0e0', 'INTJ')] 

>> Dependency Tags are: 
[('A\uf0e0', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 808 =============================

b. ,S  A.aA , a|b 


>> Tokens are: 
[b., ,, S,  , A.aA, ,, a|b] 

>> PoS Tags are: 
[('b.', 'NOUN'), (',', 'PUNCT'), ('S', 'PROPN'), (' ', 'SPACE'), ('A\uf0e0.aA', 'PROPN'), (',', 'PUNCT'), ('a|b', 'PROPN')] 

>> Dependency Tags are: 
[('b.', 'ROOT'), (',', 'punct'), ('S', 'compound'), (' ', 'compound'), ('A\uf0e0.aA', 'npadvmod'), (',', 'punct'), ('a|b', 'punct')]

>> Bigrams: 
[[b., ,], [,, S], [S,  ], [ , A.aA], [A.aA, ,], [,, a|b]]

>> Trigrams: 
[[b., ,, S], [,, S,  ], [S,  , A.aA], [ , A.aA, ,], [A.aA, ,, a|b]]

>> Noun Phrases are: 
[b.]

>> Named Entities are: 
[]


============================ Sentence 809 =============================

A.b , a|b 


>> Tokens are: 
[A.b, ,, a|b] 

>> PoS Tags are: 
[('A\uf0e0.b', 'PROPN'), (',', 'PUNCT'), ('a|b', 'X')] 

>> Dependency Tags are: 
[('A\uf0e0.b', 'ROOT'), (',', 'punct'), ('a|b', 'appos')]

>> Bigrams: 
[[A.b, ,], [,, a|b]]

>> Trigrams: 
[[A.b, ,, a|b]]

>> Noun Phrases are: 
[A.b]

>> Named Entities are: 
[('A\uf0e0.b', 'PERSON')]


============================ Sentence 810 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 811 =============================

A a.A , a|b 


>> Tokens are: 
[A, a., ,, a|b] 

>> PoS Tags are: 
[('A\uf0e0', 'ADJ'), ('a.', 'NOUN'), (',', 'PUNCT'), ('a|b', 'PROPN')] 

>> Dependency Tags are: 
[('A\uf0e0', 'amod'), ('a.', 'compound'), (',', 'punct'), ('a|b', 'punct')]

>> Bigrams: 
[[A, a.], [a., ,], [,, a|b]]

>> Trigrams: 
[[A, a., ,], [a., ,, a|b]]

>> Noun Phrases are: 
[A a.A]

>> Named Entities are: 
[]


============================ Sentence 812 =============================

A b., a|b   


>> Tokens are: 
[A, b., ,, a|b,  ] 

>> PoS Tags are: 
[('A\uf0e0', 'INTJ'), ('b.', 'NOUN'), (',', 'PUNCT'), ('a|b', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('A\uf0e0', 'compound'), ('b.', 'ROOT'), (',', 'punct'), ('a|b', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[A, b.], [b., ,], [,, a|b], [a|b,  ]]

>> Trigrams: 
[[A, b., ,], [b., ,, a|b], [,, a|b,  ]]

>> Noun Phrases are: 
[A b.]

>> Named Entities are: 
[]


============================ Sentence 813 =============================

S AA. ,$   A 


>> Tokens are: 
[S, AA, ., ,, $,   , A] 

>> PoS Tags are: 
[('S\uf0e0', 'PROPN'), ('AA', 'PROPN'), ('.', 'PUNCT'), (',', 'PUNCT'), ('$', 'SYM'), ('  ', 'SPACE'), ('A\uf0e0', 'ADV')] 

>> Dependency Tags are: 
[('S\uf0e0', 'compound'), ('AA', 'ROOT'), ('.', 'punct'), (',', 'punct'), ('$', 'nmod'), ('  ', 'appos'), ('A\uf0e0', 'advmod')]

>> Bigrams: 
[[S, AA], [AA, .], [., ,], [,, $], [$,   ], [  , A]]

>> Trigrams: 
[[S, AA, .], [AA, ., ,], [., ,, $], [,, $,   ], [$,   , A]]

>> Noun Phrases are: 
[S AA]

>> Named Entities are: 
[]


============================ Sentence 814 =============================

aA.,a|b     3 8 5 6 3 7 4 4           A aA.,$  9 	Item set	Action			Go to	 		a	b	$	S	A 	0 


>> Tokens are: 
[aA.,a|b,     , 3, 8, 5, 6, 3, 7, 4, 4,           , A, aA.,$,  , 9, 	, Item, set, 	, Action, 			, 	 		, 	, b, 	, $, 	, S, 	, 	, 0] 

>> PoS Tags are: 
[('aA.,a|b', 'PUNCT'), ('    ', 'SPACE'), ('3', 'NUM'), ('8', 'NUM'), ('5', 'NUM'), ('6', 'NUM'), ('3', 'NUM'), ('7', 'NUM'), ('4', 'NUM'), ('4', 'NUM'), ('          ', 'SPACE'), ('A\uf0e0', 'ADV'), ('aA.,$', 'ADV'), (' ', 'SPACE'), ('9', 'NUM'), ('\t', 'SPACE'), ('Item', 'PROPN'), ('set', 'VERB'), ('\t', 'SPACE'), ('Action', 'PROPN'), ('\t\t\t', 'SPACE'), ('\t \t\t', 'SPACE'), ('\t', 'SPACE'), ('b', 'PROPN'), ('\t', 'SPACE'), ('$', 'SYM'), ('\t', 'SPACE'), ('S', 'PROPN'), ('\t', 'SPACE'), ('\t', 'SPACE'), ('0', 'NUM')] 

>> Dependency Tags are: 
[('aA.,a|b', 'dep'), ('    ', 'nmod'), ('3', 'nummod'), ('8', 'compound'), ('5', 'compound'), ('6', 'appos'), ('3', 'nummod'), ('7', 'appos'), ('4', 'nummod'), ('4', 'nummod'), ('          ', 'dep'), ('A\uf0e0', 'prep'), ('aA.,$', 'npadvmod'), (' ', 'nmod'), ('9', 'nummod'), ('\t', 'compound'), ('Item', 'nsubj'), ('set', 'ROOT'), ('\t', 'compound'), ('Action', 'compound'), ('\t\t\t', 'nsubj'), ('\t \t\t', 'pobj'), ('\t', 'nmod'), ('b', 'nmod'), ('\t', 'nmod'), ('$', 'nmod'), ('\t', 'compound'), ('S', 'compound'), ('\t', 'nmod'), ('\t', 'dobj'), ('0', 'punct')]

>> Bigrams: 
[[aA.,a|b,     ], [    , 3], [3, 8], [8, 5], [5, 6], [6, 3], [3, 7], [7, 4], [4, 4], [4,           ], [          , A], [A, aA.,$], [aA.,$,  ], [ , 9], [9, 	], [	, Item], [Item, set], [set, 	], [	, Action], [Action, 			], [			, 	 		], [	 		, 	], [	, b], [b, 	], [	, $], [$, 	], [	, S], [S, 	], [	, 	], [	, 0]]

>> Trigrams: 
[[aA.,a|b,     , 3], [    , 3, 8], [3, 8, 5], [8, 5, 6], [5, 6, 3], [6, 3, 7], [3, 7, 4], [7, 4, 4], [4, 4,           ], [4,           , A], [          , A, aA.,$], [A, aA.,$,  ], [aA.,$,  , 9], [ , 9, 	], [9, 	, Item], [	, Item, set], [Item, set, 	], [set, 	, Action], [	, Action, 			], [Action, 			, 	 		], [			, 	 		, 	], [	 		, 	, b], [	, b, 	], [b, 	, $], [	, $, 	], [$, 	, S], [	, S, 	], [S, 	, 	], [	, 	, 0]]

>> Noun Phrases are: 
[ 9 	Item]

>> Named Entities are: 
[('aA.,a|b', 'CARDINAL'), ('9', 'CARDINAL')]


============================ Sentence 815 =============================

	S3	S4		1	2 	1			Accept		 	2	S6	S7			5 	3	S3	S4			8 	4	R3	R3			 	5			R1		 	6	S6	S7			9 	7			R3		 	8	R2	R2			 	9			R2		  A. aA,$ A. b, $  A a.A,$ 


>> Tokens are: 
[	, S3, 	, S4, 		, 1, 	, 2, 	, 1, 			, Accept, 		 	, 2, 	, S6, 	, S7, 			, 5, 	, 3, 	, S3, 	, S4, 			, 8, 	, 4, 	, R3, 	, R3, 			 	, 5, 			, R1, 		 	, 6, 	, S6, 	, S7, 			, 9, 	, 7, 			, R3, 		 	, 8, 	, R2, 	, R2, 			 	, 9, 			, R2, 		  , A., aA,$, A., b, ,, $,  , A, a., A,$] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('S3', 'PROPN'), ('\t', 'SPACE'), ('S4', 'PROPN'), ('\t\t', 'SPACE'), ('1', 'NUM'), ('\t', 'SPACE'), ('2', 'NUM'), ('\t', 'SPACE'), ('1', 'NUM'), ('\t\t\t', 'SPACE'), ('Accept', 'PROPN'), ('\t\t \t', 'SPACE'), ('2', 'NUM'), ('\t', 'SPACE'), ('S6', 'PROPN'), ('\t', 'SPACE'), ('S7', 'PROPN'), ('\t\t\t', 'SPACE'), ('5', 'NUM'), ('\t', 'SPACE'), ('3', 'NUM'), ('\t', 'SPACE'), ('S3', 'PROPN'), ('\t', 'SPACE'), ('S4', 'PROPN'), ('\t\t\t', 'SPACE'), ('8', 'NUM'), ('\t', 'SPACE'), ('4', 'NUM'), ('\t', 'SPACE'), ('R3', 'PROPN'), ('\t', 'SPACE'), ('R3', 'PROPN'), ('\t\t\t \t', 'SPACE'), ('5', 'NUM'), ('\t\t\t', 'SPACE'), ('R1', 'NOUN'), ('\t\t \t', 'SPACE'), ('6', 'NUM'), ('\t', 'SPACE'), ('S6', 'PROPN'), ('\t', 'SPACE'), ('S7', 'PROPN'), ('\t\t\t', 'SPACE'), ('9', 'NUM'), ('\t', 'SPACE'), ('7', 'NUM'), ('\t\t\t', 'SPACE'), ('R3', 'NOUN'), ('\t\t \t', 'SPACE'), ('8', 'NUM'), ('\t', 'SPACE'), ('R2', 'PROPN'), ('\t', 'SPACE'), ('R2', 'PROPN'), ('\t\t\t \t', 'SPACE'), ('9', 'NUM'), ('\t\t\t', 'SPACE'), ('R2', 'PROPN'), ('\t\t  ', 'SPACE'), ('A\uf0e0.', 'NOUN'), ('aA,$', 'NOUN'), ('A\uf0e0.', 'NOUN'), ('b', 'NOUN'), (',', 'PUNCT'), ('$', 'SYM'), (' ', 'SPACE'), ('A\uf0e0', 'ADJ'), ('a.', 'NOUN'), ('A,$', 'NOUN')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('S3', 'nmod'), ('\t', 'compound'), ('S4', 'nmod'), ('\t\t', 'nmod'), ('1', 'nummod'), ('\t', 'nmod'), ('2', 'prep'), ('\t', 'conj'), ('1', 'nummod'), ('\t\t\t', 'compound'), ('Accept', 'compound'), ('\t\t \t', 'compound'), ('2', 'nummod'), ('\t', 'compound'), ('S6', 'compound'), ('\t', 'compound'), ('S7', 'nmod'), ('\t\t\t', 'appos'), ('5', 'nummod'), ('\t', 'nmod'), ('3', 'nummod'), ('\t', 'compound'), ('S3', 'nmod'), ('\t', 'compound'), ('S4', 'compound'), ('\t\t\t', 'appos'), ('8', 'nummod'), ('\t', 'nmod'), ('4', 'nummod'), ('\t', 'compound'), ('R3', 'nmod'), ('\t', 'nmod'), ('R3', 'nmod'), ('\t\t\t \t', 'compound'), ('5', 'nummod'), ('\t\t\t', 'compound'), ('R1', 'compound'), ('\t\t \t', 'appos'), ('6', 'nummod'), ('\t', 'compound'), ('S6', 'compound'), ('\t', 'compound'), ('S7', 'ROOT'), ('\t\t\t', 'appos'), ('9', 'nummod'), ('\t', 'nmod'), ('7', 'nummod'), ('\t\t\t', 'compound'), ('R3', 'compound'), ('\t\t \t', 'appos'), ('8', 'nummod'), ('\t', 'nmod'), ('R2', 'nmod'), ('\t', 'nmod'), ('R2', 'nmod'), ('\t\t\t \t', 'nmod'), ('9', 'nummod'), ('\t\t\t', 'compound'), ('R2', 'compound'), ('\t\t  ', 'compound'), ('A\uf0e0.', 'compound'), ('aA,$', 'compound'), ('A\uf0e0.', 'compound'), ('b', 'appos'), (',', 'punct'), ('$', 'nmod'), (' ', 'appos'), ('A\uf0e0', 'prep'), ('a.', 'compound'), ('A,$', 'appos')]

>> Bigrams: 
[[	, S3], [S3, 	], [	, S4], [S4, 		], [		, 1], [1, 	], [	, 2], [2, 	], [	, 1], [1, 			], [			, Accept], [Accept, 		 	], [		 	, 2], [2, 	], [	, S6], [S6, 	], [	, S7], [S7, 			], [			, 5], [5, 	], [	, 3], [3, 	], [	, S3], [S3, 	], [	, S4], [S4, 			], [			, 8], [8, 	], [	, 4], [4, 	], [	, R3], [R3, 	], [	, R3], [R3, 			 	], [			 	, 5], [5, 			], [			, R1], [R1, 		 	], [		 	, 6], [6, 	], [	, S6], [S6, 	], [	, S7], [S7, 			], [			, 9], [9, 	], [	, 7], [7, 			], [			, R3], [R3, 		 	], [		 	, 8], [8, 	], [	, R2], [R2, 	], [	, R2], [R2, 			 	], [			 	, 9], [9, 			], [			, R2], [R2, 		  ], [		  , A.], [A., aA,$], [aA,$, A.], [A., b], [b, ,], [,, $], [$,  ], [ , A], [A, a.], [a., A,$]]

>> Trigrams: 
[[	, S3, 	], [S3, 	, S4], [	, S4, 		], [S4, 		, 1], [		, 1, 	], [1, 	, 2], [	, 2, 	], [2, 	, 1], [	, 1, 			], [1, 			, Accept], [			, Accept, 		 	], [Accept, 		 	, 2], [		 	, 2, 	], [2, 	, S6], [	, S6, 	], [S6, 	, S7], [	, S7, 			], [S7, 			, 5], [			, 5, 	], [5, 	, 3], [	, 3, 	], [3, 	, S3], [	, S3, 	], [S3, 	, S4], [	, S4, 			], [S4, 			, 8], [			, 8, 	], [8, 	, 4], [	, 4, 	], [4, 	, R3], [	, R3, 	], [R3, 	, R3], [	, R3, 			 	], [R3, 			 	, 5], [			 	, 5, 			], [5, 			, R1], [			, R1, 		 	], [R1, 		 	, 6], [		 	, 6, 	], [6, 	, S6], [	, S6, 	], [S6, 	, S7], [	, S7, 			], [S7, 			, 9], [			, 9, 	], [9, 	, 7], [	, 7, 			], [7, 			, R3], [			, R3, 		 	], [R3, 		 	, 8], [		 	, 8, 	], [8, 	, R2], [	, R2, 	], [R2, 	, R2], [	, R2, 			 	], [R2, 			 	, 9], [			 	, 9, 			], [9, 			, R2], [			, R2, 		  ], [R2, 		  , A.], [		  , A., aA,$], [A., aA,$, A.], [aA,$, A., b], [A., b, ,], [b, ,, $], [,, $,  ], [$,  , A], [ , A, a.], [A, a., A,$]]

>> Noun Phrases are: 
[	S3	S4		1	2 	1			Accept		 	2	S6	S7			5 	3	S3	S4			8 	4	R3	R3			 	5			R1		 	6	S6	S7, 	R2	R2			 	9			R2		  A. aA,$ A. b, a.A,$]

>> Named Entities are: 
[('1', 'CARDINAL'), ('S6', 'CARDINAL'), ('8', 'CARDINAL'), ('R1', 'CARDINAL'), ('S6', 'CARDINAL'), ('R3', 'CARDINAL')]


============================ Sentence 816 =============================

A 


>> Tokens are: 
[A] 

>> PoS Tags are: 
[('A\uf0e0', 'INTJ')] 

>> Dependency Tags are: 
[('A\uf0e0', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 817 =============================

b. ,S  6 7                            Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#› 


>> Tokens are: 
[b., ,, S,  , 6, 7,                            , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›] 

>> PoS Tags are: 
[('b.', 'NOUN'), (',', 'PUNCT'), ('S', 'PROPN'), (' ', 'SPACE'), ('6', 'NUM'), ('7', 'NUM'), ('                           ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X')] 

>> Dependency Tags are: 
[('b.', 'intj'), (',', 'punct'), ('S', 'nmod'), (' ', 'conj'), ('6', 'compound'), ('7', 'nummod'), ('                           ', 'compound'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'appos'), ('#', 'nmod'), ('3130006', 'appos'), ('(', 'punct'), ('PS', 'nsubj'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'parataxis'), ('  ', 'nummod'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'appos'), ('‹#›', 'punct'), ('  ', 'appos'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct')]

>> Bigrams: 
[[b., ,], [,, S], [S,  ], [ , 6], [6, 7], [7,                            ], [                           , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›]]

>> Trigrams: 
[[b., ,, S], [,, S,  ], [S,  , 6], [ , 6, 7], [6, 7,                            ], [7,                            , Prof.], [                           , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›]]

>> Noun Phrases are: 
[6 7                            Prof. Jay R Dhamsaniya, PS, Unit, Basic Probability, Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('6 7', 'CARDINAL'), ('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 818 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 819 =============================

Parsing Methods Parsing Top down parsing Bottom up parsing (Shift reduce) Back tracking Parsing without backtracking (predictive Parsing) LR parsing Operator precedence LALR   


>> Tokens are: 
[Parsing, Methods, Parsing, parsing, parsing, (, Shift, reduce, ), tracking, Parsing, backtracking, (, predictive, Parsing, ), LR, parsing, Operator, precedence, LALR,  ] 

>> PoS Tags are: 
[('Parsing', 'PROPN'), ('Methods', 'PROPN'), ('Parsing', 'VERB'), ('parsing', 'VERB'), ('parsing', 'VERB'), ('(', 'PUNCT'), ('Shift', 'NOUN'), ('reduce', 'VERB'), (')', 'PUNCT'), ('tracking', 'VERB'), ('Parsing', 'VERB'), ('backtracking', 'VERB'), ('(', 'PUNCT'), ('predictive', 'ADJ'), ('Parsing', 'PROPN'), (')', 'PUNCT'), ('LR', 'PROPN'), ('parsing', 'VERB'), ('Operator', 'PROPN'), ('precedence', 'NOUN'), ('LALR', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Parsing', 'compound'), ('Methods', 'nsubj'), ('Parsing', 'ROOT'), ('parsing', 'advcl'), ('parsing', 'ccomp'), ('(', 'punct'), ('Shift', 'nsubj'), ('reduce', 'parataxis'), (')', 'punct'), ('tracking', 'advcl'), ('Parsing', 'dobj'), ('backtracking', 'pcomp'), ('(', 'punct'), ('predictive', 'amod'), ('Parsing', 'nmod'), (')', 'punct'), ('LR', 'nsubj'), ('parsing', 'parataxis'), ('Operator', 'compound'), ('precedence', 'compound'), ('LALR', 'dobj'), (' ', 'punct')]

>> Bigrams: 
[[Parsing, Methods], [Methods, Parsing], [Parsing, parsing], [parsing, parsing], [parsing, (], [(, Shift], [Shift, reduce], [reduce, )], [), tracking], [tracking, Parsing], [Parsing, backtracking], [backtracking, (], [(, predictive], [predictive, Parsing], [Parsing, )], [), LR], [LR, parsing], [parsing, Operator], [Operator, precedence], [precedence, LALR], [LALR,  ]]

>> Trigrams: 
[[Parsing, Methods, Parsing], [Methods, Parsing, parsing], [Parsing, parsing, parsing], [parsing, parsing, (], [parsing, (, Shift], [(, Shift, reduce], [Shift, reduce, )], [reduce, ), tracking], [), tracking, Parsing], [tracking, Parsing, backtracking], [Parsing, backtracking, (], [backtracking, (, predictive], [(, predictive, Parsing], [predictive, Parsing, )], [Parsing, ), LR], [), LR, parsing], [LR, parsing, Operator], [parsing, Operator, precedence], [Operator, precedence, LALR], [precedence, LALR,  ]]

>> Noun Phrases are: 
[Parsing Methods, Top, Bottom, Shift, predictive Parsing) LR, Operator precedence LALR]

>> Named Entities are: 
[('Bottom', 'PERSON')]


============================ Sentence 820 =============================

CLR  SLR   


>> Tokens are: 
[CLR,  , SLR,  ] 

>> PoS Tags are: 
[('CLR', 'PROPN'), (' ', 'SPACE'), ('SLR', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('CLR', 'ROOT'), (' ', 'appos'), ('SLR', 'compound'), (' ', 'appos')]

>> Bigrams: 
[[CLR,  ], [ , SLR], [SLR,  ]]

>> Trigrams: 
[[CLR,  , SLR], [ , SLR,  ]]

>> Noun Phrases are: 
[CLR]

>> Named Entities are: 
[('CLR', 'ORG'), ('SLR', 'ORG')]


============================ Sentence 821 =============================

Recursive  descent  LL(1)        


>> Tokens are: 
[Recursive,  , descent,  , LL(1, ),       ] 

>> PoS Tags are: 
[('Recursive', 'PROPN'), (' ', 'SPACE'), ('descent', 'NOUN'), (' ', 'SPACE'), ('LL(1', 'NOUN'), (')', 'PUNCT'), ('      ', 'SPACE')] 

>> Dependency Tags are: 
[('Recursive', 'compound'), (' ', 'poss'), ('descent', 'appos'), (' ', 'compound'), ('LL(1', 'appos'), (')', 'punct'), ('      ', 'ROOT')]

>> Bigrams: 
[[Recursive,  ], [ , descent], [descent,  ], [ , LL(1], [LL(1, )], [),       ]]

>> Trigrams: 
[[Recursive,  , descent], [ , descent,  ], [descent,  , LL(1], [ , LL(1, )], [LL(1, ),       ]]

>> Noun Phrases are: 
[descent,  LL(1]

>> Named Entities are: 
[]


============================ Sentence 822 =============================

Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara   


>> Tokens are: 
[Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara,  ] 

>> PoS Tags are: 
[('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'nsubj'), ('#', 'appos'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'dep'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'ROOT'), ('‹#›', 'punct'), ('  ', 'appos'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), (' ', 'punct')]

>> Bigrams: 
[[Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,  ]]

>> Trigrams: 
[[Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,  ]]

>> Noun Phrases are: 
[Prof. Jay R Dhamsaniya, (PS, Unit, Prof. Dixita B Kagathara]

>> Named Entities are: 
[('PS', 'ORG'), ('Dixita', 'PERSON'), ('Kagathara', 'PERSON')]


============================ Sentence 823 =============================

#2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›  A aA.,a|b Example: LALR(1)- look ahead LR S  


>> Tokens are: 
[#, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  , A, aA.,a|b, Example, :, LALR(1)-, look, ahead, LR, S, ] 

>> PoS Tags are: 
[('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE'), ('A\uf0e0', 'ADV'), ('aA.,a|b', 'ADJ'), ('Example', 'NOUN'), (':', 'PUNCT'), ('LALR(1)-', 'DET'), ('look', 'VERB'), ('ahead', 'ADV'), ('LR', 'PROPN'), ('S', 'PROPN'), ('\uf0e0', 'PROPN')] 

>> Dependency Tags are: 
[('#', 'nmod'), ('2170701', 'nsubj'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'xcomp'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'dobj'), ('A\uf0e0', 'advmod'), ('aA.,a|b', 'punct'), ('Example', 'npadvmod'), (':', 'punct'), ('LALR(1)-', 'punct'), ('look', 'dep'), ('ahead', 'advmod'), ('LR', 'compound'), ('S', 'compound'), ('\uf0e0', 'appos')]

>> Bigrams: 
[[#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ], [ , A], [A, aA.,a|b], [aA.,a|b, Example], [Example, :], [:, LALR(1)-], [LALR(1)-, look], [look, ahead], [ahead, LR], [LR, S], [S, ]]

>> Trigrams: 
[[#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ], [‹#›,  , A], [ , A, aA.,a|b], [A, aA.,a|b, Example], [aA.,a|b, Example, :], [Example, :, LALR(1)-], [:, LALR(1)-, look], [LALR(1)-, look, ahead], [look, ahead, LR], [ahead, LR, S], [LR, S, ]]

>> Noun Phrases are: 
[(CD, Unit, Theory, I, LR S ]

>> Named Entities are: 
[('aA.,a|b', 'CARDINAL'), ('LR S \uf0e0', 'ORG')]


============================ Sentence 824 =============================

AA 


>> Tokens are: 
[AA] 

>> PoS Tags are: 
[('AA', 'PROPN')] 

>> Dependency Tags are: 
[('AA', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[AA]

>> Named Entities are: 
[]


============================ Sentence 825 =============================

A  aA | b S’.S,$ S.AA,$  A.aA, a|b 


>> Tokens are: 
[, aA, |, b, S’.S,$, S.AA,$,  , A.aA, ,, a|b] 

>> PoS Tags are: 
[('\uf0e0', 'NOUN'), ('aA', 'PROPN'), ('|', 'NOUN'), ('b', 'ADP'), ('S’\uf0e0.S,$', 'PROPN'), ('S\uf0e0.AA,$', 'NOUN'), (' ', 'SPACE'), ('A\uf0e0.aA', 'PROPN'), (',', 'PUNCT'), ('a|b', 'PROPN')] 

>> Dependency Tags are: 
[('\uf0e0', 'nmod'), ('aA', 'appos'), ('|', 'appos'), ('b', 'prep'), ('S’\uf0e0.S,$', 'compound'), ('S\uf0e0.AA,$', 'appos'), (' ', 'prep'), ('A\uf0e0.aA', 'ROOT'), (',', 'punct'), ('a|b', 'punct')]

>> Bigrams: 
[[, aA], [aA, |], [|, b], [b, S’.S,$], [S’.S,$, S.AA,$], [S.AA,$,  ], [ , A.aA], [A.aA, ,], [,, a|b]]

>> Trigrams: 
[[, aA, |], [aA, |, b], [|, b, S’.S,$], [b, S’.S,$, S.AA,$], [S’.S,$, S.AA,$,  ], [S.AA,$,  , A.aA], [ , A.aA, ,], [A.aA, ,, a|b]]

>> Noun Phrases are: 
[aA, |, S’.S,$ S.AA,$]

>> Named Entities are: 
[('S’\uf0e0.S,$ S\uf0e0.AA,$', 'PERSON')]


============================ Sentence 826 =============================

A.b, a|b  S’ S., $  S A.A,$ A.aA, $ A. b, $  A.aA ,a|b 


>> Tokens are: 
[A.b, ,, a|b,  , S’, S., ,, $,  , S, A.A,$, A.aA, ,, $, A., b, ,, $,  , A.aA, ,, a|b] 

>> PoS Tags are: 
[('A\uf0e0.b', 'PROPN'), (',', 'PUNCT'), ('a|b', 'PROPN'), (' ', 'SPACE'), ('S’\uf0e0', 'PROPN'), ('S.', 'PROPN'), (',', 'PUNCT'), ('$', 'SYM'), (' ', 'SPACE'), ('S\uf0e0', 'PROPN'), ('A.A,$', 'PROPN'), ('A\uf0e0.aA', 'PROPN'), (',', 'PUNCT'), ('$', 'SYM'), ('A\uf0e0.', 'NOUN'), ('b', 'NOUN'), (',', 'PUNCT'), ('$', 'SYM'), (' ', 'SPACE'), ('A\uf0e0.aA', 'PROPN'), (',', 'PUNCT'), ('a|b', 'PROPN')] 

>> Dependency Tags are: 
[('A\uf0e0.b', 'nmod'), (',', 'punct'), ('a|b', 'npadvmod'), (' ', 'appos'), ('S’\uf0e0', 'compound'), ('S.', 'ROOT'), (',', 'punct'), ('$', 'nmod'), (' ', 'compound'), ('S\uf0e0', 'compound'), ('A.A,$', 'compound'), ('A\uf0e0.aA', 'appos'), (',', 'punct'), ('$', 'nmod'), ('A\uf0e0.', 'compound'), ('b', 'appos'), (',', 'punct'), ('$', 'nmod'), (' ', 'compound'), ('A\uf0e0.aA', 'appos'), (',', 'punct'), ('a|b', 'punct')]

>> Bigrams: 
[[A.b, ,], [,, a|b], [a|b,  ], [ , S’], [S’, S.], [S., ,], [,, $], [$,  ], [ , S], [S, A.A,$], [A.A,$, A.aA], [A.aA, ,], [,, $], [$, A.], [A., b], [b, ,], [,, $], [$,  ], [ , A.aA], [A.aA, ,], [,, a|b]]

>> Trigrams: 
[[A.b, ,, a|b], [,, a|b,  ], [a|b,  , S’], [ , S’, S.], [S’, S., ,], [S., ,, $], [,, $,  ], [$,  , S], [ , S, A.A,$], [S, A.A,$, A.aA], [A.A,$, A.aA, ,], [A.aA, ,, $], [,, $, A.], [$, A., b], [A., b, ,], [b, ,, $], [,, $,  ], [$,  , A.aA], [ , A.aA, ,], [A.aA, ,, a|b]]

>> Noun Phrases are: 
[A.b, a|b  S’ S., $  S A.A,$ A.aA, $ A. b, $  A.aA]

>> Named Entities are: 
[('A\uf0e0.b', 'PERSON'), ('S’\uf0e0 S.', 'PERSON')]


============================ Sentence 827 =============================

A. b, a|b    


>> Tokens are: 
[A., b, ,, a|b,   ] 

>> PoS Tags are: 
[('A\uf0e0.', 'NOUN'), ('b', 'NOUN'), (',', 'PUNCT'), ('a|b', 'X'), ('  ', 'SPACE')] 

>> Dependency Tags are: 
[('A\uf0e0.', 'compound'), ('b', 'ROOT'), (',', 'punct'), ('a|b', 'appos'), ('  ', 'punct')]

>> Bigrams: 
[[A., b], [b, ,], [,, a|b], [a|b,   ]]

>> Trigrams: 
[[A., b, ,], [b, ,, a|b], [,, a|b,   ]]

>> Noun Phrases are: 
[A. b]

>> Named Entities are: 
[]


============================ Sentence 828 =============================

Aa. 


>> Tokens are: 
[Aa, .] 

>> PoS Tags are: 
[('A\uf0e0a', 'INTJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('A\uf0e0a', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Aa, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 829 =============================

A, a|b 


>> Tokens are: 
[,, a|b] 

>> PoS Tags are: 
[(',', 'PUNCT'), ('a|b', 'PROPN')] 

>> Dependency Tags are: 
[(',', 'punct'), ('a|b', 'punct')]

>> Bigrams: 
[[,, a|b]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 830 =============================

A b., a|b  A. aA,$ A. b, $  A a.A,$ 


>> Tokens are: 
[A, b., ,, a|b,  , A., aA,$, A., b, ,, $,  , A, a., A,$] 

>> PoS Tags are: 
[('A\uf0e0', 'INTJ'), ('b.', 'NOUN'), (',', 'PUNCT'), ('a|b', 'X'), (' ', 'SPACE'), ('A\uf0e0.', 'NOUN'), ('aA,$', 'NOUN'), ('A\uf0e0.', 'NOUN'), ('b', 'NOUN'), (',', 'PUNCT'), ('$', 'SYM'), (' ', 'SPACE'), ('A\uf0e0', 'ADJ'), ('a.', 'NOUN'), ('A,$', 'NOUN')] 

>> Dependency Tags are: 
[('A\uf0e0', 'compound'), ('b.', 'ROOT'), (',', 'punct'), ('a|b', 'appos'), (' ', 'compound'), ('A\uf0e0.', 'compound'), ('aA,$', 'compound'), ('A\uf0e0.', 'compound'), ('b', 'appos'), (',', 'punct'), ('$', 'nmod'), (' ', 'appos'), ('A\uf0e0', 'prep'), ('a.', 'compound'), ('A,$', 'appos')]

>> Bigrams: 
[[A, b.], [b., ,], [,, a|b], [a|b,  ], [ , A.], [A., aA,$], [aA,$, A.], [A., b], [b, ,], [,, $], [$,  ], [ , A], [A, a.], [a., A,$]]

>> Trigrams: 
[[A, b., ,], [b., ,, a|b], [,, a|b,  ], [a|b,  , A.], [ , A., aA,$], [A., aA,$, A.], [aA,$, A., b], [A., b, ,], [b, ,, $], [,, $,  ], [$,  , A], [ , A, a.], [A, a., A,$]]

>> Noun Phrases are: 
[A b.,  A. aA,$ A. b, a.A,$]

>> Named Entities are: 
[]


============================ Sentence 831 =============================

A 


>> Tokens are: 
[A] 

>> PoS Tags are: 
[('A\uf0e0', 'INTJ')] 

>> Dependency Tags are: 
[('A\uf0e0', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 832 =============================

b. ,$  A.aA , a|b 


>> Tokens are: 
[b., ,, $,  , A.aA, ,, a|b] 

>> PoS Tags are: 
[('b.', 'NOUN'), (',', 'PUNCT'), ('$', 'SYM'), (' ', 'SPACE'), ('A\uf0e0.aA', 'PROPN'), (',', 'PUNCT'), ('a|b', 'PROPN')] 

>> Dependency Tags are: 
[('b.', 'ROOT'), (',', 'punct'), ('$', 'nmod'), (' ', 'compound'), ('A\uf0e0.aA', 'appos'), (',', 'punct'), ('a|b', 'punct')]

>> Bigrams: 
[[b., ,], [,, $], [$,  ], [ , A.aA], [A.aA, ,], [,, a|b]]

>> Trigrams: 
[[b., ,, $], [,, $,  ], [$,  , A.aA], [ , A.aA, ,], [A.aA, ,, a|b]]

>> Noun Phrases are: 
[b., $  A.aA]

>> Named Entities are: 
[]


============================ Sentence 833 =============================

A.b , a|b 


>> Tokens are: 
[A.b, ,, a|b] 

>> PoS Tags are: 
[('A\uf0e0.b', 'PROPN'), (',', 'PUNCT'), ('a|b', 'X')] 

>> Dependency Tags are: 
[('A\uf0e0.b', 'ROOT'), (',', 'punct'), ('a|b', 'appos')]

>> Bigrams: 
[[A.b, ,], [,, a|b]]

>> Trigrams: 
[[A.b, ,, a|b]]

>> Noun Phrases are: 
[A.b]

>> Named Entities are: 
[('A\uf0e0.b', 'PERSON')]


============================ Sentence 834 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 835 =============================

A a.A , a|b 


>> Tokens are: 
[A, a., ,, a|b] 

>> PoS Tags are: 
[('A\uf0e0', 'ADJ'), ('a.', 'NOUN'), (',', 'PUNCT'), ('a|b', 'PROPN')] 

>> Dependency Tags are: 
[('A\uf0e0', 'amod'), ('a.', 'compound'), (',', 'punct'), ('a|b', 'punct')]

>> Bigrams: 
[[A, a.], [a., ,], [,, a|b]]

>> Trigrams: 
[[A, a., ,], [a., ,, a|b]]

>> Noun Phrases are: 
[A a.A]

>> Named Entities are: 
[]


============================ Sentence 836 =============================

A b., a|b   


>> Tokens are: 
[A, b., ,, a|b,  ] 

>> PoS Tags are: 
[('A\uf0e0', 'INTJ'), ('b.', 'NOUN'), (',', 'PUNCT'), ('a|b', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('A\uf0e0', 'compound'), ('b.', 'ROOT'), (',', 'punct'), ('a|b', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[A, b.], [b., ,], [,, a|b], [a|b,  ]]

>> Trigrams: 
[[A, b., ,], [b., ,, a|b], [,, a|b,  ]]

>> Noun Phrases are: 
[A b.]

>> Named Entities are: 
[]


============================ Sentence 837 =============================

S AA. ,$       3 8 5 6 3 7 4 4           A aA.,$  9 A. aA,$ A. b, 


>> Tokens are: 
[S, AA, ., ,, $,       , 3, 8, 5, 6, 3, 7, 4, 4,           , A, aA.,$,  , 9, A., aA,$, A., b, ,] 

>> PoS Tags are: 
[('S\uf0e0', 'PROPN'), ('AA', 'PROPN'), ('.', 'PUNCT'), (',', 'PUNCT'), ('$', 'SYM'), ('      ', 'SPACE'), ('3', 'NUM'), ('8', 'NUM'), ('5', 'NUM'), ('6', 'NUM'), ('3', 'NUM'), ('7', 'NUM'), ('4', 'NUM'), ('4', 'NUM'), ('          ', 'SPACE'), ('A\uf0e0', 'ADV'), ('aA.,$', 'ADV'), (' ', 'SPACE'), ('9', 'NUM'), ('A\uf0e0.', 'NOUN'), ('aA,$', 'NOUN'), ('A\uf0e0.', 'NOUN'), ('b', 'NOUN'), (',', 'PUNCT')] 

>> Dependency Tags are: 
[('S\uf0e0', 'compound'), ('AA', 'ROOT'), ('.', 'punct'), (',', 'punct'), ('$', 'nmod'), ('      ', 'appos'), ('3', 'nummod'), ('8', 'compound'), ('5', 'appos'), ('6', 'nummod'), ('3', 'appos'), ('7', 'appos'), ('4', 'appos'), ('4', 'nummod'), ('          ', 'appos'), ('A\uf0e0', 'advmod'), ('aA.,$', 'advmod'), (' ', 'appos'), ('9', 'nummod'), ('A\uf0e0.', 'compound'), ('aA,$', 'compound'), ('A\uf0e0.', 'compound'), ('b', 'appos'), (',', 'punct')]

>> Bigrams: 
[[S, AA], [AA, .], [., ,], [,, $], [$,       ], [      , 3], [3, 8], [8, 5], [5, 6], [6, 3], [3, 7], [7, 4], [4, 4], [4,           ], [          , A], [A, aA.,$], [aA.,$,  ], [ , 9], [9, A.], [A., aA,$], [aA,$, A.], [A., b], [b, ,]]

>> Trigrams: 
[[S, AA, .], [AA, ., ,], [., ,, $], [,, $,       ], [$,       , 3], [      , 3, 8], [3, 8, 5], [8, 5, 6], [5, 6, 3], [6, 3, 7], [3, 7, 4], [7, 4, 4], [4, 4,           ], [4,           , A], [          , A, aA.,$], [A, aA.,$,  ], [aA.,$,  , 9], [ , 9, A.], [9, A., aA,$], [A., aA,$, A.], [aA,$, A., b], [A., b, ,]]

>> Noun Phrases are: 
[S AA, 9 A. aA,$ A. b]

>> Named Entities are: 
[('3 8 5 6 3 7 4 4', 'DATE'), ('9', 'CARDINAL')]


============================ Sentence 838 =============================

$  A a.A,$ 


>> Tokens are: 
[$,  , A, a., A,$] 

>> PoS Tags are: 
[('$', 'SYM'), (' ', 'SPACE'), ('A\uf0e0', 'ADJ'), ('a.', 'NOUN'), ('A,$', 'NOUN')] 

>> Dependency Tags are: 
[('$', 'nmod'), (' ', 'npadvmod'), ('A\uf0e0', 'amod'), ('a.', 'compound'), ('A,$', 'ROOT')]

>> Bigrams: 
[[$,  ], [ , A], [A, a.], [a., A,$]]

>> Trigrams: 
[[$,  , A], [ , A, a.], [A, a., A,$]]

>> Noun Phrases are: 
[$  A a.A,$]

>> Named Entities are: 
[]


============================ Sentence 839 =============================

A 


>> Tokens are: 
[A] 

>> PoS Tags are: 
[('A\uf0e0', 'INTJ')] 

>> Dependency Tags are: 
[('A\uf0e0', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 840 =============================

b. ,$  6 7                       CLR  36 A.aA , a|b|$ A. b, a|b|$   


>> Tokens are: 
[b., ,, $,  , 6, 7,                       , CLR,  , 36, A.aA, ,, a|b|$, A., b, ,, a|b|$,  ] 

>> PoS Tags are: 
[('b.', 'NOUN'), (',', 'PUNCT'), ('$', 'SYM'), (' ', 'SPACE'), ('6', 'NUM'), ('7', 'NUM'), ('                      ', 'SPACE'), ('CLR', 'NOUN'), (' ', 'SPACE'), ('36', 'NUM'), ('A\uf0e0.aA', 'PROPN'), (',', 'PUNCT'), ('a|b|$', 'NOUN'), ('A\uf0e0.', 'NOUN'), ('b', 'NOUN'), (',', 'PUNCT'), ('a|b|$', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('b.', 'ROOT'), (',', 'punct'), ('$', 'nmod'), (' ', 'appos'), ('6', 'nummod'), ('7', 'nummod'), ('                      ', 'nummod'), ('CLR', 'appos'), (' ', 'appos'), ('36', 'nummod'), ('A\uf0e0.aA', 'dobj'), (',', 'punct'), ('a|b|$', 'compound'), ('A\uf0e0.', 'compound'), ('b', 'appos'), (',', 'punct'), ('a|b|$', 'appos'), (' ', 'punct')]

>> Bigrams: 
[[b., ,], [,, $], [$,  ], [ , 6], [6, 7], [7,                       ], [                      , CLR], [CLR,  ], [ , 36], [36, A.aA], [A.aA, ,], [,, a|b|$], [a|b|$, A.], [A., b], [b, ,], [,, a|b|$], [a|b|$,  ]]

>> Trigrams: 
[[b., ,, $], [,, $,  ], [$,  , 6], [ , 6, 7], [6, 7,                       ], [7,                       , CLR], [                      , CLR,  ], [CLR,  , 36], [ , 36, A.aA], [36, A.aA, ,], [A.aA, ,, a|b|$], [,, a|b|$, A.], [a|b|$, A., b], [A., b, ,], [b, ,, a|b|$], [,, a|b|$,  ]]

>> Noun Phrases are: 
[b., 7                       CLR, 36 A.aA, a|b|$ A. b]

>> Named Entities are: 
[('36', 'CARDINAL')]


============================ Sentence 841 =============================

Aa. 


>> Tokens are: 
[Aa, .] 

>> PoS Tags are: 
[('A\uf0e0a', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('A\uf0e0a', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Aa, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 842 =============================

A, a|b|$ A b., a|b|$  47 


>> Tokens are: 
[,, a|b|$, A, b., ,, a|b|$,  , 47] 

>> PoS Tags are: 
[(',', 'PUNCT'), ('a|b|$', 'VERB'), ('A\uf0e0', 'ADV'), ('b.', 'NOUN'), (',', 'PUNCT'), ('a|b|$', 'VERB'), (' ', 'SPACE'), ('47', 'NUM')] 

>> Dependency Tags are: 
[(',', 'punct'), ('a|b|$', 'compound'), ('A\uf0e0', 'compound'), ('b.', 'ROOT'), (',', 'punct'), ('a|b|$', 'compound'), (' ', 'conj'), ('47', 'nummod')]

>> Bigrams: 
[[,, a|b|$], [a|b|$, A], [A, b.], [b., ,], [,, a|b|$], [a|b|$,  ], [ , 47]]

>> Trigrams: 
[[,, a|b|$, A], [a|b|$, A, b.], [A, b., ,], [b., ,, a|b|$], [,, a|b|$,  ], [a|b|$,  , 47]]

>> Noun Phrases are: 
[A, a|b|$ A b.]

>> Named Entities are: 
[('47', 'CARDINAL')]


============================ Sentence 843 =============================

A aA.,a|b|$  89    Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[A, aA.,a|b|$,  , 89,    , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('A\uf0e0', 'ADV'), ('aA.,a|b|$', 'PROPN'), (' ', 'SPACE'), ('89', 'NUM'), ('   ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('A\uf0e0', 'advmod'), ('aA.,a|b|$', 'npadvmod'), (' ', 'npadvmod'), ('89', 'nummod'), ('   ', 'nummod'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'appos'), ('#', 'nmod'), ('3130006', 'appos'), ('(', 'punct'), ('PS', 'npadvmod'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[A, aA.,a|b|$], [aA.,a|b|$,  ], [ , 89], [89,    ], [   , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[A, aA.,a|b|$,  ], [aA.,a|b|$,  , 89], [ , 89,    ], [89,    , Prof.], [   , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[89    Prof. Jay R Dhamsaniya, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('89', 'CARDINAL'), ('Jay R Dhamsaniya', 'ORG'), ('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 844 =============================

Example: LALR(1)- look ahead LR  	Item set	Action			Go to	 		a	b	$	S	A 	0 


>> Tokens are: 
[Example, :, LALR(1)-, look, ahead, LR,  	, Item, set, 	, Action, 			, 	 		, 	, b, 	, $, 	, S, 	, 	, 0] 

>> PoS Tags are: 
[('Example', 'NOUN'), (':', 'PUNCT'), ('LALR(1)-', 'PUNCT'), ('look', 'VERB'), ('ahead', 'ADV'), ('LR', 'PROPN'), (' \t', 'SPACE'), ('Item', 'PROPN'), ('set', 'VERB'), ('\t', 'SPACE'), ('Action', 'PROPN'), ('\t\t\t', 'SPACE'), ('\t \t\t', 'SPACE'), ('\t', 'SPACE'), ('b', 'PROPN'), ('\t', 'SPACE'), ('$', 'SYM'), ('\t', 'SPACE'), ('S', 'PROPN'), ('\t', 'SPACE'), ('\t', 'SPACE'), ('0', 'NUM')] 

>> Dependency Tags are: 
[('Example', 'nsubj'), (':', 'punct'), ('LALR(1)-', 'punct'), ('look', 'nmod'), ('ahead', 'advmod'), ('LR', 'compound'), (' \t', 'compound'), ('Item', 'nsubj'), ('set', 'acl'), ('\t', 'compound'), ('Action', 'compound'), ('\t\t\t', 'dobj'), ('\t \t\t', 'pobj'), ('\t', 'nmod'), ('b', 'nmod'), ('\t', 'nmod'), ('$', 'nmod'), ('\t', 'compound'), ('S', 'compound'), ('\t', 'nmod'), ('\t', 'dobj'), ('0', 'punct')]

>> Bigrams: 
[[Example, :], [:, LALR(1)-], [LALR(1)-, look], [look, ahead], [ahead, LR], [LR,  	], [ 	, Item], [Item, set], [set, 	], [	, Action], [Action, 			], [			, 	 		], [	 		, 	], [	, b], [b, 	], [	, $], [$, 	], [	, S], [S, 	], [	, 	], [	, 0]]

>> Trigrams: 
[[Example, :, LALR(1)-], [:, LALR(1)-, look], [LALR(1)-, look, ahead], [look, ahead, LR], [ahead, LR,  	], [LR,  	, Item], [ 	, Item, set], [Item, set, 	], [set, 	, Action], [	, Action, 			], [Action, 			, 	 		], [			, 	 		, 	], [	 		, 	, b], [	, b, 	], [b, 	, $], [	, $, 	], [$, 	, S], [	, S, 	], [S, 	, 	], [	, 	, 0]]

>> Noun Phrases are: 
[Example, LR  	Item]

>> Named Entities are: 
[('Item', 'PERSON')]


============================ Sentence 845 =============================

	S3	S4		1	2 	1			Accept		 	2	S6	S7			5 	3	S3	S4			8 	4	R3	R3			 	5			R1		 	6	S6	S7			9 	7			R3		 	8	R2	R2			 	9			R2		   	Item set	Action			Go to	 		a	b	$	S	A 	0	S36	S47 


>> Tokens are: 
[	, S3, 	, S4, 		, 1, 	, 2, 	, 1, 			, Accept, 		 	, 2, 	, S6, 	, S7, 			, 5, 	, 3, 	, S3, 	, S4, 			, 8, 	, 4, 	, R3, 	, R3, 			 	, 5, 			, R1, 		 	, 6, 	, S6, 	, S7, 			, 9, 	, 7, 			, R3, 		 	, 8, 	, R2, 	, R2, 			 	, 9, 			, R2, 		   	, Item, set, 	, Action, 			, 	 		, 	, b, 	, $, 	, S, 	, 	, 0, 	, S36, 	, S47] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('S3', 'PROPN'), ('\t', 'SPACE'), ('S4', 'PROPN'), ('\t\t', 'SPACE'), ('1', 'NUM'), ('\t', 'SPACE'), ('2', 'NUM'), ('\t', 'SPACE'), ('1', 'NUM'), ('\t\t\t', 'SPACE'), ('Accept', 'PROPN'), ('\t\t \t', 'SPACE'), ('2', 'NUM'), ('\t', 'SPACE'), ('S6', 'PROPN'), ('\t', 'SPACE'), ('S7', 'PROPN'), ('\t\t\t', 'SPACE'), ('5', 'NUM'), ('\t', 'SPACE'), ('3', 'NUM'), ('\t', 'SPACE'), ('S3', 'PROPN'), ('\t', 'SPACE'), ('S4', 'PROPN'), ('\t\t\t', 'SPACE'), ('8', 'NUM'), ('\t', 'SPACE'), ('4', 'NUM'), ('\t', 'SPACE'), ('R3', 'PROPN'), ('\t', 'SPACE'), ('R3', 'PROPN'), ('\t\t\t \t', 'SPACE'), ('5', 'NUM'), ('\t\t\t', 'SPACE'), ('R1', 'NOUN'), ('\t\t \t', 'SPACE'), ('6', 'NUM'), ('\t', 'SPACE'), ('S6', 'PROPN'), ('\t', 'SPACE'), ('S7', 'PROPN'), ('\t\t\t', 'SPACE'), ('9', 'NUM'), ('\t', 'SPACE'), ('7', 'NUM'), ('\t\t\t', 'SPACE'), ('R3', 'NOUN'), ('\t\t \t', 'SPACE'), ('8', 'NUM'), ('\t', 'SPACE'), ('R2', 'PROPN'), ('\t', 'SPACE'), ('R2', 'PROPN'), ('\t\t\t \t', 'SPACE'), ('9', 'NUM'), ('\t\t\t', 'SPACE'), ('R2', 'PROPN'), ('\t\t   \t', 'SPACE'), ('Item', 'PROPN'), ('set', 'VERB'), ('\t', 'SPACE'), ('Action', 'PROPN'), ('\t\t\t', 'SPACE'), ('\t \t\t', 'SPACE'), ('\t', 'SPACE'), ('b', 'PROPN'), ('\t', 'SPACE'), ('$', 'SYM'), ('\t', 'SPACE'), ('S', 'PROPN'), ('\t', 'SPACE'), ('\t', 'SPACE'), ('0', 'NUM'), ('\t', 'SPACE'), ('S36', 'PROPN'), ('\t', 'SPACE'), ('S47', 'PROPN')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('S3', 'nmod'), ('\t', 'compound'), ('S4', 'nmod'), ('\t\t', 'nmod'), ('1', 'nummod'), ('\t', 'nmod'), ('2', 'prep'), ('\t', 'conj'), ('1', 'nummod'), ('\t\t\t', 'compound'), ('Accept', 'compound'), ('\t\t \t', 'compound'), ('2', 'nummod'), ('\t', 'compound'), ('S6', 'compound'), ('\t', 'compound'), ('S7', 'nmod'), ('\t\t\t', 'appos'), ('5', 'nummod'), ('\t', 'nmod'), ('3', 'nummod'), ('\t', 'compound'), ('S3', 'nmod'), ('\t', 'compound'), ('S4', 'compound'), ('\t\t\t', 'appos'), ('8', 'nummod'), ('\t', 'nmod'), ('4', 'nummod'), ('\t', 'compound'), ('R3', 'nmod'), ('\t', 'nmod'), ('R3', 'nmod'), ('\t\t\t \t', 'compound'), ('5', 'nummod'), ('\t\t\t', 'compound'), ('R1', 'compound'), ('\t\t \t', 'appos'), ('6', 'nummod'), ('\t', 'compound'), ('S6', 'compound'), ('\t', 'compound'), ('S7', 'nsubj'), ('\t\t\t', 'appos'), ('9', 'nummod'), ('\t', 'nmod'), ('7', 'nummod'), ('\t\t\t', 'compound'), ('R3', 'compound'), ('\t\t \t', 'appos'), ('8', 'nummod'), ('\t', 'nmod'), ('R2', 'nmod'), ('\t', 'nmod'), ('R2', 'nmod'), ('\t\t\t \t', 'nmod'), ('9', 'nummod'), ('\t\t\t', 'compound'), ('R2', 'compound'), ('\t\t   \t', 'compound'), ('Item', 'nsubj'), ('set', 'advcl'), ('\t', 'compound'), ('Action', 'compound'), ('\t\t\t', 'nsubj'), ('\t \t\t', 'pobj'), ('\t', 'compound'), ('b', 'nmod'), ('\t', 'nmod'), ('$', 'nmod'), ('\t', 'compound'), ('S', 'compound'), ('\t', 'nmod'), ('\t', 'nmod'), ('0', 'punct'), ('\t', 'compound'), ('S36', 'compound'), ('\t', 'compound'), ('S47', 'npadvmod')]

>> Bigrams: 
[[	, S3], [S3, 	], [	, S4], [S4, 		], [		, 1], [1, 	], [	, 2], [2, 	], [	, 1], [1, 			], [			, Accept], [Accept, 		 	], [		 	, 2], [2, 	], [	, S6], [S6, 	], [	, S7], [S7, 			], [			, 5], [5, 	], [	, 3], [3, 	], [	, S3], [S3, 	], [	, S4], [S4, 			], [			, 8], [8, 	], [	, 4], [4, 	], [	, R3], [R3, 	], [	, R3], [R3, 			 	], [			 	, 5], [5, 			], [			, R1], [R1, 		 	], [		 	, 6], [6, 	], [	, S6], [S6, 	], [	, S7], [S7, 			], [			, 9], [9, 	], [	, 7], [7, 			], [			, R3], [R3, 		 	], [		 	, 8], [8, 	], [	, R2], [R2, 	], [	, R2], [R2, 			 	], [			 	, 9], [9, 			], [			, R2], [R2, 		   	], [		   	, Item], [Item, set], [set, 	], [	, Action], [Action, 			], [			, 	 		], [	 		, 	], [	, b], [b, 	], [	, $], [$, 	], [	, S], [S, 	], [	, 	], [	, 0], [0, 	], [	, S36], [S36, 	], [	, S47]]

>> Trigrams: 
[[	, S3, 	], [S3, 	, S4], [	, S4, 		], [S4, 		, 1], [		, 1, 	], [1, 	, 2], [	, 2, 	], [2, 	, 1], [	, 1, 			], [1, 			, Accept], [			, Accept, 		 	], [Accept, 		 	, 2], [		 	, 2, 	], [2, 	, S6], [	, S6, 	], [S6, 	, S7], [	, S7, 			], [S7, 			, 5], [			, 5, 	], [5, 	, 3], [	, 3, 	], [3, 	, S3], [	, S3, 	], [S3, 	, S4], [	, S4, 			], [S4, 			, 8], [			, 8, 	], [8, 	, 4], [	, 4, 	], [4, 	, R3], [	, R3, 	], [R3, 	, R3], [	, R3, 			 	], [R3, 			 	, 5], [			 	, 5, 			], [5, 			, R1], [			, R1, 		 	], [R1, 		 	, 6], [		 	, 6, 	], [6, 	, S6], [	, S6, 	], [S6, 	, S7], [	, S7, 			], [S7, 			, 9], [			, 9, 	], [9, 	, 7], [	, 7, 			], [7, 			, R3], [			, R3, 		 	], [R3, 		 	, 8], [		 	, 8, 	], [8, 	, R2], [	, R2, 	], [R2, 	, R2], [	, R2, 			 	], [R2, 			 	, 9], [			 	, 9, 			], [9, 			, R2], [			, R2, 		   	], [R2, 		   	, Item], [		   	, Item, set], [Item, set, 	], [set, 	, Action], [	, Action, 			], [Action, 			, 	 		], [			, 	 		, 	], [	 		, 	, b], [	, b, 	], [b, 	, $], [	, $, 	], [$, 	, S], [	, S, 	], [S, 	, 	], [	, 	, 0], [	, 0, 	], [0, 	, S36], [	, S36, 	], [S36, 	, S47]]

>> Noun Phrases are: 
[	S3	S4		1	2 	1			Accept		 	2	S6	S7			5 	3	S3	S4			8 	4	R3	R3			 	5			R1		 	6	S6	S7, 	R2	R2			 	9			R2		   	Item]

>> Named Entities are: 
[('1', 'CARDINAL'), ('S6', 'CARDINAL'), ('8', 'CARDINAL'), ('R1', 'CARDINAL'), ('S6', 'CARDINAL'), ('R3', 'CARDINAL'), ('Item', 'PERSON')]


============================ Sentence 846 =============================

		1	2 	1			Accept		 	2	S36	S47			5 	36	S36	S47			89 	47	R3	R3	R3 		 	5			R1		 	89	R2	R2	R2 		 						   


>> Tokens are: 
[		, 1, 	, 2, 	, 1, 			, Accept, 		 	, 2, 	, S36, 	, S47, 			, 5, 	, 36, 	, S36, 	, S47, 			, 89, 	, 47, 	, R3, 	, R3, 	, R3, 		 	, 5, 			, R1, 		 	, 89, 	, R2, 	, R2, 	, R2, 		 						  ] 

>> PoS Tags are: 
[('\t\t', 'SPACE'), ('1', 'NUM'), ('\t', 'SPACE'), ('2', 'NUM'), ('\t', 'SPACE'), ('1', 'NUM'), ('\t\t\t', 'SPACE'), ('Accept', 'PROPN'), ('\t\t \t', 'SPACE'), ('2', 'NUM'), ('\t', 'SPACE'), ('S36', 'PROPN'), ('\t', 'SPACE'), ('S47', 'PROPN'), ('\t\t\t', 'SPACE'), ('5', 'NUM'), ('\t', 'SPACE'), ('36', 'NUM'), ('\t', 'SPACE'), ('S36', 'PROPN'), ('\t', 'SPACE'), ('S47', 'PROPN'), ('\t\t\t', 'SPACE'), ('89', 'NUM'), ('\t', 'SPACE'), ('47', 'NUM'), ('\t', 'SPACE'), ('R3', 'PROPN'), ('\t', 'SPACE'), ('R3', 'PROPN'), ('\t', 'SPACE'), ('R3', 'PROPN'), ('\t\t \t', 'SPACE'), ('5', 'NUM'), ('\t\t\t', 'SPACE'), ('R1', 'NOUN'), ('\t\t \t', 'SPACE'), ('89', 'NUM'), ('\t', 'SPACE'), ('R2', 'PROPN'), ('\t', 'SPACE'), ('R2', 'PROPN'), ('\t', 'SPACE'), ('R2', 'PROPN'), ('\t\t \t\t\t\t\t\t  ', 'SPACE')] 

>> Dependency Tags are: 
[('\t\t', 'nmod'), ('1', 'nummod'), ('\t', 'nmod'), ('2', 'prep'), ('\t', 'appos'), ('1', 'nummod'), ('\t\t\t', 'compound'), ('Accept', 'compound'), ('\t\t \t', 'compound'), ('2', 'appos'), ('\t', 'compound'), ('S36', 'compound'), ('\t', 'compound'), ('S47', 'compound'), ('\t\t\t', 'appos'), ('5', 'nummod'), ('\t', 'appos'), ('36', 'nummod'), ('\t', 'compound'), ('S36', 'compound'), ('\t', 'compound'), ('S47', 'compound'), ('\t\t\t', 'appos'), ('89', 'nummod'), ('\t', 'conj'), ('47', 'nummod'), ('\t', 'compound'), ('R3', 'compound'), ('\t', 'compound'), ('R3', 'compound'), ('\t', 'compound'), ('R3', 'nsubj'), ('\t\t \t', 'nmod'), ('5', 'nummod'), ('\t\t\t', 'compound'), ('R1', 'nsubj'), ('\t\t \t', 'nmod'), ('89', 'nummod'), ('\t', 'compound'), ('R2', 'compound'), ('\t', 'compound'), ('R2', 'compound'), ('\t', 'compound'), ('R2', 'ROOT'), ('\t\t \t\t\t\t\t\t  ', 'punct')]

>> Bigrams: 
[[		, 1], [1, 	], [	, 2], [2, 	], [	, 1], [1, 			], [			, Accept], [Accept, 		 	], [		 	, 2], [2, 	], [	, S36], [S36, 	], [	, S47], [S47, 			], [			, 5], [5, 	], [	, 36], [36, 	], [	, S36], [S36, 	], [	, S47], [S47, 			], [			, 89], [89, 	], [	, 47], [47, 	], [	, R3], [R3, 	], [	, R3], [R3, 	], [	, R3], [R3, 		 	], [		 	, 5], [5, 			], [			, R1], [R1, 		 	], [		 	, 89], [89, 	], [	, R2], [R2, 	], [	, R2], [R2, 	], [	, R2], [R2, 		 						  ]]

>> Trigrams: 
[[		, 1, 	], [1, 	, 2], [	, 2, 	], [2, 	, 1], [	, 1, 			], [1, 			, Accept], [			, Accept, 		 	], [Accept, 		 	, 2], [		 	, 2, 	], [2, 	, S36], [	, S36, 	], [S36, 	, S47], [	, S47, 			], [S47, 			, 5], [			, 5, 	], [5, 	, 36], [	, 36, 	], [36, 	, S36], [	, S36, 	], [S36, 	, S47], [	, S47, 			], [S47, 			, 89], [			, 89, 	], [89, 	, 47], [	, 47, 	], [47, 	, R3], [	, R3, 	], [R3, 	, R3], [	, R3, 	], [R3, 	, R3], [	, R3, 		 	], [R3, 		 	, 5], [		 	, 5, 			], [5, 			, R1], [			, R1, 		 	], [R1, 		 	, 89], [		 	, 89, 	], [89, 	, R2], [	, R2, 	], [R2, 	, R2], [	, R2, 	], [R2, 	, R2], [	, R2, 		 						  ]]

>> Noun Phrases are: 
[		1	2 	1			Accept		 	2	S36	S47			5 	36	S36	S47			89 	47	R3	R3	R3]

>> Named Entities are: 
[('1', 'CARDINAL'), ('5', 'CARDINAL'), ('36', 'CARDINAL'), ('47', 'DATE'), ('R2\tR2\t', 'FAC')]


============================ Sentence 847 =============================

CLR Parsing Table LALR Parsing Table     Prof. Jay R Dhamsaniya #3130006 (PS)    


>> Tokens are: 
[CLR, Parsing, Table, LALR, Parsing, Table,     , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   ] 

>> PoS Tags are: 
[('CLR', 'PROPN'), ('Parsing', 'VERB'), ('Table', 'PROPN'), ('LALR', 'PROPN'), ('Parsing', 'VERB'), ('Table', 'PROPN'), ('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE')] 

>> Dependency Tags are: 
[('CLR', 'compound'), ('Parsing', 'compound'), ('Table', 'compound'), ('LALR', 'npadvmod'), ('Parsing', 'compound'), ('Table', 'compound'), ('    ', 'compound'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'ROOT'), ('#', 'appos'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos')]

>> Bigrams: 
[[CLR, Parsing], [Parsing, Table], [Table, LALR], [LALR, Parsing], [Parsing, Table], [Table,     ], [    , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ]]

>> Trigrams: 
[[CLR, Parsing, Table], [Parsing, Table, LALR], [Table, LALR, Parsing], [LALR, Parsing, Table], [Parsing, Table,     ], [Table,     , Prof.], [    , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ]]

>> Noun Phrases are: 
[CLR Parsing Table LALR Parsing Table     Prof. Jay R Dhamsaniya, (PS]

>> Named Entities are: 
[('CLR Parsing Table LALR Parsing Table', 'ORG'), ('Jay R Dhamsaniya', 'ORG'), ('PS', 'ORG')]


============================ Sentence 848 =============================

   Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (I) ‹#›   


>> Tokens are: 
[,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, ), ‹#›,  ] 

>> PoS Tags are: 
[('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('\uf077', 'dep'), ('  ', 'dobj'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, )], [(, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, I]

>> Named Entities are: 
[('Dixita', 'PERSON')]


============================ Sentence 849 =============================

Thank You                                       /docProps/thumbnail.jpeg 


>> Tokens are: 
[Thank,                                       , /docProps, /, thumbnail.jpeg] 

>> PoS Tags are: 
[('Thank', 'VERB'), ('                                      ', 'SPACE'), ('/docProps', 'X'), ('/', 'SYM'), ('thumbnail.jpeg', 'NOUN')] 

>> Dependency Tags are: 
[('Thank', 'ROOT'), ('                                      ', 'dobj'), ('/docProps', 'punct'), ('/', 'punct'), ('thumbnail.jpeg', 'dobj')]

>> Bigrams: 
[[Thank,                                       ], [                                      , /docProps], [/docProps, /], [/, thumbnail.jpeg]]

>> Trigrams: 
[[Thank,                                       , /docProps], [                                      , /docProps, /], [/docProps, /, thumbnail.jpeg]]

>> Noun Phrases are: 
[You, thumbnail.jpeg]

>> Named Entities are: 
[]
