

========================== Sentence 1 ===========================

 AI-8 Comparison of Various Algorithms Complexities 

Tokens are: 
>> ['AI', '-8', 'Comparison', 'of', 'Various', 'Algorithms', 'Complexities'] 

 UPOS tags are: 
>> [('AI', 'AUX'), ('-8', 'NUM'), ('Comparison', 'NOUN'), ('of', 'ADP'), ('Various', 'ADJ'), ('Algorithms', 'NOUN'), ('Complexities', 'NOUN')] 

 XPOS tags are: 
>> [('AI', 'VBZ'), ('-8', 'CD'), ('Comparison', 'NN'), ('of', 'IN'), ('Various', 'JJ'), ('Algorithms', 'NNS'), ('Complexities', 'NNS')] 

 Lemmas are: 
>> [('AI', 'be'), ('-8', '-8'), ('Comparison', 'Comparison'), ('of', 'of'), ('Various', 'various'), ('Algorithms', 'algorithm'), ('Complexities', 'complexity')] 

 Dependency tags are: 
>> [(('AI', 'Comparison'), 'cop'), (('-8', 'Comparison'), 'nummod'), (('Comparison', 'root'), 'root'), (('of', 'Complexities'), 'case'), (('Various', 'Complexities'), 'amod'), (('Algorithms', 'Complexities'), 'compound'), (('Complexities', 'Comparison'), 'nmod')]

 Named Entities are: 
>> []

========================== Sentence 2 ===========================

 Let us see the performance of algorithms based on various criteria − 	Criterion 	Breadth First 	Depth First 	Bidirectional 	Uniform Cost 	Interactive Deepening  	Time 	bd 	bm 	bd/2 	bd 	bd  	Space 	bd 	bm 	bd/2 	bd 	bd  	Optimality 	Yes 	No 	Yes 	Yes 	Yes  	Completeness 	Yes 	No 	Yes 	Yes 	Yes   Informed (Heuristic) Search Strategies 

Tokens are: 
>> ['Let', 'us', 'see', 'the', 'performance', 'of', 'algorithms', 'based', 'on', 'various', 'criteria', '−', 'Criterion', 'Breadth', 'First', 'Depth', 'First', 'Bidirectional', 'Uniform', 'Cost', 'Interactive', 'Deepening', 'Time', 'bd', 'bm', 'bd', '/', '2', 'bd', 'bd', 'Space', 'bd', 'bm', 'bd', '/', '2', 'bd', 'bd', 'Optimality', 'Yes', 'No', 'Yes', 'Yes', 'Yes', 'Completeness', 'Yes', 'No', 'Yes', 'Yes', 'Yes', 'Informed', '(', 'Heuristic', ')', 'Search', 'Strategies'] 

 UPOS tags are: 
>> [('Let', 'VERB'), ('us', 'PRON'), ('see', 'VERB'), ('the', 'DET'), ('performance', 'NOUN'), ('of', 'ADP'), ('algorithms', 'NOUN'), ('based', 'VERB'), ('on', 'ADP'), ('various', 'ADJ'), ('criteria', 'NOUN'), ('−', 'PUNCT'), ('Criterion', 'NOUN'), ('Breadth', 'NOUN'), ('First', 'ADJ'), ('Depth', 'NOUN'), ('First', 'ADJ'), ('Bidirectional', 'ADJ'), ('Uniform', 'ADJ'), ('Cost', 'NOUN'), ('Interactive', 'ADJ'), ('Deepening', 'NOUN'), ('Time', 'NOUN'), ('bd', 'NOUN'), ('bm', 'NOUN'), ('bd', 'NOUN'), ('/', 'SYM'), ('2', 'NUM'), ('bd', 'NOUN'), ('bd', 'NOUN'), ('Space', 'NOUN'), ('bd', 'NOUN'), ('bm', 'NOUN'), ('bd', 'NOUN'), ('/', 'SYM'), ('2', 'NUM'), ('bd', 'NOUN'), ('bd', 'NOUN'), ('Optimality', 'NOUN'), ('Yes', 'INTJ'), ('No', 'DET'), ('Yes', 'INTJ'), ('Yes', 'INTJ'), ('Yes', 'INTJ'), ('Completeness', 'NOUN'), ('Yes', 'INTJ'), ('No', 'DET'), ('Yes', 'INTJ'), ('Yes', 'INTJ'), ('Yes', 'INTJ'), ('Informed', 'VERB'), ('(', 'PUNCT'), ('Heuristic', 'NOUN'), (')', 'PUNCT'), ('Search', 'NOUN'), ('Strategies', 'NOUN')] 

 XPOS tags are: 
>> [('Let', 'VB'), ('us', 'PRP'), ('see', 'VB'), ('the', 'DT'), ('performance', 'NN'), ('of', 'IN'), ('algorithms', 'NNS'), ('based', 'VBN'), ('on', 'IN'), ('various', 'JJ'), ('criteria', 'NNS'), ('−', ','), ('Criterion', 'NN'), ('Breadth', 'NN'), ('First', 'JJ'), ('Depth', 'NN'), ('First', 'JJ'), ('Bidirectional', 'JJ'), ('Uniform', 'JJ'), ('Cost', 'NN'), ('Interactive', 'JJ'), ('Deepening', 'NN'), ('Time', 'NN'), ('bd', 'NN'), ('bm', 'NN'), ('bd', 'NN'), ('/', ','), ('2', 'CD'), ('bd', 'NN'), ('bd', 'NN'), ('Space', 'NN'), ('bd', 'NN'), ('bm', 'NN'), ('bd', 'NN'), ('/', ','), ('2', 'CD'), ('bd', 'NN'), ('bd', 'NN'), ('Optimality', 'NN'), ('Yes', 'UH'), ('No', 'DT'), ('Yes', 'UH'), ('Yes', 'UH'), ('Yes', 'UH'), ('Completeness', 'NN'), ('Yes', 'UH'), ('No', 'DT'), ('Yes', 'UH'), ('Yes', 'UH'), ('Yes', 'UH'), ('Informed', 'VBN'), ('(', '-LRB-'), ('Heuristic', 'NN'), (')', '-RRB-'), ('Search', 'NN'), ('Strategies', 'NNS')] 

 Lemmas are: 
>> [('Let', 'let'), ('us', 'we'), ('see', 'see'), ('the', 'the'), ('performance', 'performance'), ('of', 'of'), ('algorithms', 'algorithm'), ('based', 'base'), ('on', 'on'), ('various', 'various'), ('criteria', 'criterion'), ('−', "''"), ('Criterion', 'criterion'), ('Breadth', 'breadth'), ('First', 'first'), ('Depth', 'depth'), ('First', 'first'), ('Bidirectional', 'bidirectional'), ('Uniform', 'uniform'), ('Cost', 'Cost'), ('Interactive', 'interactive'), ('Deepening', 'deepening'), ('Time', 'time'), ('bd', 'bd'), ('bm', 'bm'), ('bd', 'bd'), ('/', '/'), ('2', '2'), ('bd', 'bd'), ('bd', 'bd'), ('Space', 'space'), ('bd', 'bd'), ('bm', 'bm'), ('bd', 'bd'), ('/', '/'), ('2', '2'), ('bd', 'bd'), ('bd', 'bd'), ('Optimality', 'optimality'), ('Yes', 'yes'), ('No', 'no'), ('Yes', 'yes'), ('Yes', 'yes'), ('Yes', 'yes'), ('Completeness', 'completeness'), ('Yes', 'yes'), ('No', 'no'), ('Yes', 'yes'), ('Yes', 'yes'), ('Yes', 'yes'), ('Informed', 'inform'), ('(', '('), ('Heuristic', 'heuristic'), (')', ')'), ('Search', 'search'), ('Strategies', 'strategy')] 

 Dependency tags are: 
>> [(('Let', 'root'), 'root'), (('us', 'Let'), 'obj'), (('see', 'Let'), 'xcomp'), (('the', 'performance'), 'det'), (('performance', 'see'), 'obj'), (('of', 'algorithms'), 'case'), (('algorithms', 'performance'), 'nmod'), (('based', 'algorithms'), 'acl'), (('on', 'criteria'), 'case'), (('various', 'criteria'), 'amod'), (('criteria', 'based'), 'obl'), (('−', 'Breadth'), 'punct'), (('Criterion', 'Breadth'), 'compound'), (('Breadth', 'criteria'), 'conj'), (('First', 'Depth'), 'amod'), (('Depth', 'Breadth'), 'compound'), (('First', 'Cost'), 'amod'), (('Bidirectional', 'Cost'), 'amod'), (('Uniform', 'Cost'), 'amod'), (('Cost', 'Time'), 'compound'), (('Interactive', 'Time'), 'amod'), (('Deepening', 'Time'), 'compound'), (('Time', 'Depth'), 'conj'), (('bd', 'Time'), 'compound'), (('bm', 'bd'), 'compound'), (('bd', 'Time'), 'compound'), (('/', '2'), 'case'), (('2', 'bd'), 'nummod'), (('bd', 'bd'), 'compound'), (('bd', 'bd'), 'compound'), (('Space', 'bd'), 'compound'), (('bd', 'Time'), 'conj'), (('bm', 'Optimality'), 'compound'), (('bd', 'bd'), 'compound'), (('/', '2'), 'punct'), (('2', 'bd'), 'nummod'), (('bd', 'Optimality'), 'compound'), (('bd', 'Optimality'), 'compound'), (('Optimality', 'bd'), 'conj'), (('Yes', 'Completeness'), 'discourse'), (('No', 'Completeness'), 'det'), (('Yes', 'Completeness'), 'discourse'), (('Yes', 'Completeness'), 'discourse'), (('Yes', 'Completeness'), 'discourse'), (('Completeness', 'Optimality'), 'parataxis'), (('Yes', 'Strategies'), 'discourse'), (('No', 'Strategies'), 'det'), (('Yes', 'Strategies'), 'discourse'), (('Yes', 'Strategies'), 'discourse'), (('Yes', 'Strategies'), 'discourse'), (('Informed', 'Strategies'), 'amod'), (('(', 'Heuristic'), 'punct'), (('Heuristic', 'Strategies'), 'compound'), ((')', 'Heuristic'), 'punct'), (('Search', 'Strategies'), 'compound'), (('Strategies', 'Completeness'), 'parataxis')]

 Named Entities are: 
>> []

========================== Sentence 3 ===========================

 To solve large problems with large number of possible states, problem-specific knowledge needs to be added to increase the efficiency of search algorithms. 

Tokens are: 
>> ['To', 'solve', 'large', 'problems', 'with', 'large', 'number', 'of', 'possible', 'states', ',', 'problem-specific', 'knowledge', 'needs', 'to', 'be', 'added', 'to', 'increase', 'the', 'efficiency', 'of', 'search', 'algorithms', '.'] 

 UPOS tags are: 
>> [('To', 'PART'), ('solve', 'VERB'), ('large', 'ADJ'), ('problems', 'NOUN'), ('with', 'ADP'), ('large', 'ADJ'), ('number', 'NOUN'), ('of', 'ADP'), ('possible', 'ADJ'), ('states', 'NOUN'), (',', 'PUNCT'), ('problem-specific', 'ADJ'), ('knowledge', 'NOUN'), ('needs', 'VERB'), ('to', 'PART'), ('be', 'AUX'), ('added', 'VERB'), ('to', 'PART'), ('increase', 'VERB'), ('the', 'DET'), ('efficiency', 'NOUN'), ('of', 'ADP'), ('search', 'NOUN'), ('algorithms', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('To', 'TO'), ('solve', 'VB'), ('large', 'JJ'), ('problems', 'NNS'), ('with', 'IN'), ('large', 'JJ'), ('number', 'NN'), ('of', 'IN'), ('possible', 'JJ'), ('states', 'NNS'), (',', ','), ('problem-specific', 'JJ'), ('knowledge', 'NN'), ('needs', 'VBZ'), ('to', 'TO'), ('be', 'VB'), ('added', 'VBN'), ('to', 'TO'), ('increase', 'VB'), ('the', 'DT'), ('efficiency', 'NN'), ('of', 'IN'), ('search', 'NN'), ('algorithms', 'NNS'), ('.', '.')] 

 Lemmas are: 
>> [('To', 'to'), ('solve', 'solve'), ('large', 'large'), ('problems', 'problem'), ('with', 'with'), ('large', 'large'), ('number', 'number'), ('of', 'of'), ('possible', 'possible'), ('states', 'state'), (',', ','), ('problem-specific', 'problem-specific'), ('knowledge', 'knowledge'), ('needs', 'need'), ('to', 'to'), ('be', 'be'), ('added', 'add'), ('to', 'to'), ('increase', 'increase'), ('the', 'the'), ('efficiency', 'efficiency'), ('of', 'of'), ('search', 'search'), ('algorithms', 'algorithm'), ('.', '.')] 

 Dependency tags are: 
>> [(('To', 'solve'), 'mark'), (('solve', 'needs'), 'advcl'), (('large', 'problems'), 'amod'), (('problems', 'solve'), 'obj'), (('with', 'number'), 'case'), (('large', 'number'), 'amod'), (('number', 'problems'), 'nmod'), (('of', 'states'), 'case'), (('possible', 'states'), 'amod'), (('states', 'number'), 'nmod'), ((',', 'needs'), 'punct'), (('problem-specific', 'knowledge'), 'amod'), (('knowledge', 'needs'), 'nsubj'), (('needs', 'root'), 'root'), (('to', 'added'), 'mark'), (('be', 'added'), 'aux:pass'), (('added', 'needs'), 'xcomp'), (('to', 'increase'), 'mark'), (('increase', 'added'), 'xcomp'), (('the', 'efficiency'), 'det'), (('efficiency', 'increase'), 'obj'), (('of', 'algorithms'), 'case'), (('search', 'algorithms'), 'compound'), (('algorithms', 'efficiency'), 'nmod'), (('.', 'needs'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 4 ===========================

 Heuristic Evaluation Functions 

Tokens are: 
>> ['Heuristic', 'Evaluation', 'Functions'] 

 UPOS tags are: 
>> [('Heuristic', 'ADJ'), ('Evaluation', 'NOUN'), ('Functions', 'NOUN')] 

 XPOS tags are: 
>> [('Heuristic', 'JJ'), ('Evaluation', 'NN'), ('Functions', 'NNS')] 

 Lemmas are: 
>> [('Heuristic', 'heuristic'), ('Evaluation', 'evaluation'), ('Functions', 'function')] 

 Dependency tags are: 
>> [(('Heuristic', 'Functions'), 'amod'), (('Evaluation', 'Functions'), 'compound'), (('Functions', 'root'), 'root')]

 Named Entities are: 
>> []

========================== Sentence 5 ===========================

 They calculate the cost of optimal path between two states. 

Tokens are: 
>> ['They', 'calculate', 'the', 'cost', 'of', 'optimal', 'path', 'between', 'two', 'states', '.'] 

 UPOS tags are: 
>> [('They', 'PRON'), ('calculate', 'VERB'), ('the', 'DET'), ('cost', 'NOUN'), ('of', 'ADP'), ('optimal', 'ADJ'), ('path', 'NOUN'), ('between', 'ADP'), ('two', 'NUM'), ('states', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('They', 'PRP'), ('calculate', 'VBP'), ('the', 'DT'), ('cost', 'NN'), ('of', 'IN'), ('optimal', 'JJ'), ('path', 'NN'), ('between', 'IN'), ('two', 'CD'), ('states', 'NNS'), ('.', '.')] 

 Lemmas are: 
>> [('They', 'they'), ('calculate', 'calculate'), ('the', 'the'), ('cost', 'cost'), ('of', 'of'), ('optimal', 'optimal'), ('path', 'path'), ('between', 'between'), ('two', 'two'), ('states', 'state'), ('.', '.')] 

 Dependency tags are: 
>> [(('They', 'calculate'), 'nsubj'), (('calculate', 'root'), 'root'), (('the', 'cost'), 'det'), (('cost', 'calculate'), 'obj'), (('of', 'path'), 'case'), (('optimal', 'path'), 'amod'), (('path', 'cost'), 'nmod'), (('between', 'states'), 'case'), (('two', 'states'), 'nummod'), (('states', 'path'), 'nmod'), (('.', 'calculate'), 'punct')]

 Named Entities are: 
>> [('two', 'CARDINAL')]

========================== Sentence 6 ===========================

 A heuristic function for sliding-tiles games is computed by counting number of moves that each tile makes from its goal state and adding these number of moves for all tiles. 

Tokens are: 
>> ['A', 'heuristic', 'function', 'for', 'sliding', '-', 'tiles', 'games', 'is', 'computed', 'by', 'counting', 'number', 'of', 'moves', 'that', 'each', 'tile', 'makes', 'from', 'its', 'goal', 'state', 'and', 'adding', 'these', 'number', 'of', 'moves', 'for', 'all', 'tiles', '.'] 

 UPOS tags are: 
>> [('A', 'DET'), ('heuristic', 'ADJ'), ('function', 'NOUN'), ('for', 'ADP'), ('sliding', 'NOUN'), ('-', 'PUNCT'), ('tiles', 'NOUN'), ('games', 'NOUN'), ('is', 'AUX'), ('computed', 'VERB'), ('by', 'SCONJ'), ('counting', 'VERB'), ('number', 'NOUN'), ('of', 'ADP'), ('moves', 'NOUN'), ('that', 'PRON'), ('each', 'DET'), ('tile', 'NOUN'), ('makes', 'VERB'), ('from', 'ADP'), ('its', 'PRON'), ('goal', 'NOUN'), ('state', 'NOUN'), ('and', 'CCONJ'), ('adding', 'VERB'), ('these', 'DET'), ('number', 'NOUN'), ('of', 'ADP'), ('moves', 'NOUN'), ('for', 'ADP'), ('all', 'DET'), ('tiles', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('A', 'DT'), ('heuristic', 'JJ'), ('function', 'NN'), ('for', 'IN'), ('sliding', 'NN'), ('-', 'HYPH'), ('tiles', 'NNS'), ('games', 'NNS'), ('is', 'VBZ'), ('computed', 'VBN'), ('by', 'IN'), ('counting', 'VBG'), ('number', 'NN'), ('of', 'IN'), ('moves', 'NNS'), ('that', 'WDT'), ('each', 'DT'), ('tile', 'NN'), ('makes', 'VBZ'), ('from', 'IN'), ('its', 'PRP$'), ('goal', 'NN'), ('state', 'NN'), ('and', 'CC'), ('adding', 'VBG'), ('these', 'DT'), ('number', 'NN'), ('of', 'IN'), ('moves', 'NNS'), ('for', 'IN'), ('all', 'DT'), ('tiles', 'NNS'), ('.', '.')] 

 Lemmas are: 
>> [('A', 'a'), ('heuristic', 'heuristic'), ('function', 'function'), ('for', 'for'), ('sliding', 'slide'), ('-', '-'), ('tiles', 'tile'), ('games', 'game'), ('is', 'be'), ('computed', 'compute'), ('by', 'by'), ('counting', 'count'), ('number', 'number'), ('of', 'of'), ('moves', 'move'), ('that', 'that'), ('each', 'each'), ('tile', 'tile'), ('makes', 'make'), ('from', 'from'), ('its', 'its'), ('goal', 'goal'), ('state', 'state'), ('and', 'and'), ('adding', 'add'), ('these', 'this'), ('number', 'number'), ('of', 'of'), ('moves', 'move'), ('for', 'for'), ('all', 'all'), ('tiles', 'tile'), ('.', '.')] 

 Dependency tags are: 
>> [(('A', 'function'), 'det'), (('heuristic', 'function'), 'amod'), (('function', 'computed'), 'nsubj:pass'), (('for', 'games'), 'case'), (('sliding', 'tiles'), 'compound'), (('-', 'tiles'), 'punct'), (('tiles', 'games'), 'compound'), (('games', 'function'), 'nmod'), (('is', 'computed'), 'aux:pass'), (('computed', 'root'), 'root'), (('by', 'counting'), 'mark'), (('counting', 'computed'), 'advcl'), (('number', 'counting'), 'obj'), (('of', 'moves'), 'case'), (('moves', 'number'), 'nmod'), (('that', 'makes'), 'obj'), (('each', 'tile'), 'det'), (('tile', 'makes'), 'nsubj'), (('makes', 'moves'), 'acl:relcl'), (('from', 'state'), 'case'), (('its', 'state'), 'nmod:poss'), (('goal', 'state'), 'compound'), (('state', 'makes'), 'obl'), (('and', 'adding'), 'cc'), (('adding', 'makes'), 'conj'), (('these', 'number'), 'det'), (('number', 'adding'), 'obj'), (('of', 'moves'), 'case'), (('moves', 'number'), 'nmod'), (('for', 'tiles'), 'case'), (('all', 'tiles'), 'det'), (('tiles', 'adding'), 'obl'), (('.', 'computed'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 7 ===========================

 Pure Heuristic Search 

Tokens are: 
>> ['Pure', 'Heuristic', 'Search'] 

 UPOS tags are: 
>> [('Pure', 'ADJ'), ('Heuristic', 'ADJ'), ('Search', 'NOUN')] 

 XPOS tags are: 
>> [('Pure', 'JJ'), ('Heuristic', 'JJ'), ('Search', 'NN')] 

 Lemmas are: 
>> [('Pure', 'pure'), ('Heuristic', 'heuristic'), ('Search', 'search')] 

 Dependency tags are: 
>> [(('Pure', 'Search'), 'amod'), (('Heuristic', 'Search'), 'amod'), (('Search', 'root'), 'root')]

 Named Entities are: 
>> []

========================== Sentence 8 ===========================

 It expands nodes in the order of their heuristic values. 

Tokens are: 
>> ['It', 'expands', 'nodes', 'in', 'the', 'order', 'of', 'their', 'heuristic', 'values', '.'] 

 UPOS tags are: 
>> [('It', 'PRON'), ('expands', 'VERB'), ('nodes', 'NOUN'), ('in', 'ADP'), ('the', 'DET'), ('order', 'NOUN'), ('of', 'ADP'), ('their', 'PRON'), ('heuristic', 'ADJ'), ('values', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('It', 'PRP'), ('expands', 'VBZ'), ('nodes', 'NNS'), ('in', 'IN'), ('the', 'DT'), ('order', 'NN'), ('of', 'IN'), ('their', 'PRP$'), ('heuristic', 'JJ'), ('values', 'NNS'), ('.', '.')] 

 Lemmas are: 
>> [('It', 'it'), ('expands', 'expand'), ('nodes', 'node'), ('in', 'in'), ('the', 'the'), ('order', 'order'), ('of', 'of'), ('their', 'they'), ('heuristic', 'heuristic'), ('values', 'value'), ('.', '.')] 

 Dependency tags are: 
>> [(('It', 'expands'), 'nsubj'), (('expands', 'root'), 'root'), (('nodes', 'expands'), 'obj'), (('in', 'order'), 'case'), (('the', 'order'), 'det'), (('order', 'expands'), 'obl'), (('of', 'values'), 'case'), (('their', 'values'), 'nmod:poss'), (('heuristic', 'values'), 'amod'), (('values', 'order'), 'nmod'), (('.', 'expands'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 9 ===========================

 It creates two lists, a closed list for the already expanded nodes and an open list for the created but unexpanded nodes. 

Tokens are: 
>> ['It', 'creates', 'two', 'lists', ',', 'a', 'closed', 'list', 'for', 'the', 'already', 'expanded', 'nodes', 'and', 'an', 'open', 'list', 'for', 'the', 'created', 'but', 'unexpanded', 'nodes', '.'] 

 UPOS tags are: 
>> [('It', 'PRON'), ('creates', 'VERB'), ('two', 'NUM'), ('lists', 'NOUN'), (',', 'PUNCT'), ('a', 'DET'), ('closed', 'VERB'), ('list', 'NOUN'), ('for', 'ADP'), ('the', 'DET'), ('already', 'ADV'), ('expanded', 'VERB'), ('nodes', 'NOUN'), ('and', 'CCONJ'), ('an', 'DET'), ('open', 'ADJ'), ('list', 'NOUN'), ('for', 'ADP'), ('the', 'DET'), ('created', 'VERB'), ('but', 'CCONJ'), ('unexpanded', 'ADJ'), ('nodes', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('It', 'PRP'), ('creates', 'VBZ'), ('two', 'CD'), ('lists', 'NNS'), (',', ','), ('a', 'DT'), ('closed', 'VBN'), ('list', 'NN'), ('for', 'IN'), ('the', 'DT'), ('already', 'RB'), ('expanded', 'VBN'), ('nodes', 'NNS'), ('and', 'CC'), ('an', 'DT'), ('open', 'JJ'), ('list', 'NN'), ('for', 'IN'), ('the', 'DT'), ('created', 'VBN'), ('but', 'CC'), ('unexpanded', 'JJ'), ('nodes', 'NNS'), ('.', '.')] 

 Lemmas are: 
>> [('It', 'it'), ('creates', 'create'), ('two', 'two'), ('lists', 'list'), (',', ','), ('a', 'a'), ('closed', 'close'), ('list', 'list'), ('for', 'for'), ('the', 'the'), ('already', 'already'), ('expanded', 'expand'), ('nodes', 'node'), ('and', 'and'), ('an', 'a'), ('open', 'open'), ('list', 'list'), ('for', 'for'), ('the', 'the'), ('created', 'create'), ('but', 'but'), ('unexpanded', 'unexpanded'), ('nodes', 'node'), ('.', '.')] 

 Dependency tags are: 
>> [(('It', 'creates'), 'nsubj'), (('creates', 'root'), 'root'), (('two', 'lists'), 'nummod'), (('lists', 'creates'), 'obj'), ((',', 'list'), 'punct'), (('a', 'list'), 'det'), (('closed', 'list'), 'amod'), (('list', 'lists'), 'appos'), (('for', 'nodes'), 'case'), (('the', 'nodes'), 'det'), (('already', 'expanded'), 'advmod'), (('expanded', 'nodes'), 'amod'), (('nodes', 'list'), 'nmod'), (('and', 'list'), 'cc'), (('an', 'list'), 'det'), (('open', 'list'), 'amod'), (('list', 'nodes'), 'conj'), (('for', 'nodes'), 'case'), (('the', 'nodes'), 'det'), (('created', 'nodes'), 'amod'), (('but', 'unexpanded'), 'cc'), (('unexpanded', 'created'), 'conj'), (('nodes', 'list'), 'nmod'), (('.', 'creates'), 'punct')]

 Named Entities are: 
>> [('two', 'CARDINAL')]

========================== Sentence 10 ===========================

 In each iteration, a node with a minimum heuristic value is expanded, all its child nodes are created and placed in the closed list. 

Tokens are: 
>> ['In', 'each', 'iteration', ',', 'a', 'node', 'with', 'a', 'minimum', 'heuristic', 'value', 'is', 'expanded', ',', 'all', 'its', 'child', 'nodes', 'are', 'created', 'and', 'placed', 'in', 'the', 'closed', 'list', '.'] 

 UPOS tags are: 
>> [('In', 'ADP'), ('each', 'DET'), ('iteration', 'NOUN'), (',', 'PUNCT'), ('a', 'DET'), ('node', 'NOUN'), ('with', 'ADP'), ('a', 'DET'), ('minimum', 'ADJ'), ('heuristic', 'ADJ'), ('value', 'NOUN'), ('is', 'AUX'), ('expanded', 'VERB'), (',', 'PUNCT'), ('all', 'PRON'), ('its', 'PRON'), ('child', 'NOUN'), ('nodes', 'NOUN'), ('are', 'AUX'), ('created', 'VERB'), ('and', 'CCONJ'), ('placed', 'VERB'), ('in', 'ADP'), ('the', 'DET'), ('closed', 'VERB'), ('list', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('In', 'IN'), ('each', 'DT'), ('iteration', 'NN'), (',', ','), ('a', 'DT'), ('node', 'NN'), ('with', 'IN'), ('a', 'DT'), ('minimum', 'JJ'), ('heuristic', 'JJ'), ('value', 'NN'), ('is', 'VBZ'), ('expanded', 'VBN'), (',', ','), ('all', 'PDT'), ('its', 'PRP$'), ('child', 'NN'), ('nodes', 'NNS'), ('are', 'VBP'), ('created', 'VBN'), ('and', 'CC'), ('placed', 'VBN'), ('in', 'IN'), ('the', 'DT'), ('closed', 'VBN'), ('list', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('In', 'in'), ('each', 'each'), ('iteration', 'iteration'), (',', ','), ('a', 'a'), ('node', 'node'), ('with', 'with'), ('a', 'a'), ('minimum', 'minimum'), ('heuristic', 'heuristic'), ('value', 'value'), ('is', 'be'), ('expanded', 'expand'), (',', ','), ('all', 'all'), ('its', 'its'), ('child', 'child'), ('nodes', 'node'), ('are', 'be'), ('created', 'create'), ('and', 'and'), ('placed', 'place'), ('in', 'in'), ('the', 'the'), ('closed', 'close'), ('list', 'list'), ('.', '.')] 

 Dependency tags are: 
>> [(('In', 'iteration'), 'case'), (('each', 'iteration'), 'det'), (('iteration', 'expanded'), 'obl'), ((',', 'expanded'), 'punct'), (('a', 'node'), 'det'), (('node', 'expanded'), 'nsubj:pass'), (('with', 'value'), 'case'), (('a', 'value'), 'det'), (('minimum', 'value'), 'amod'), (('heuristic', 'value'), 'amod'), (('value', 'node'), 'nmod'), (('is', 'expanded'), 'aux:pass'), (('expanded', 'root'), 'root'), ((',', 'created'), 'punct'), (('all', 'nodes'), 'det:predet'), (('its', 'nodes'), 'nmod:poss'), (('child', 'nodes'), 'compound'), (('nodes', 'created'), 'nsubj:pass'), (('are', 'created'), 'aux:pass'), (('created', 'expanded'), 'conj'), (('and', 'placed'), 'cc'), (('placed', 'created'), 'conj'), (('in', 'list'), 'case'), (('the', 'list'), 'det'), (('closed', 'list'), 'amod'), (('list', 'placed'), 'obl'), (('.', 'expanded'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 11 ===========================

 Then, the heuristic function is applied to the child nodes and they are placed in the open list according to their heuristic value. 

Tokens are: 
>> ['Then', ',', 'the', 'heuristic', 'function', 'is', 'applied', 'to', 'the', 'child', 'nodes', 'and', 'they', 'are', 'placed', 'in', 'the', 'open', 'list', 'according', 'to', 'their', 'heuristic', 'value', '.'] 

 UPOS tags are: 
>> [('Then', 'ADV'), (',', 'PUNCT'), ('the', 'DET'), ('heuristic', 'ADJ'), ('function', 'NOUN'), ('is', 'AUX'), ('applied', 'VERB'), ('to', 'ADP'), ('the', 'DET'), ('child', 'NOUN'), ('nodes', 'NOUN'), ('and', 'CCONJ'), ('they', 'PRON'), ('are', 'AUX'), ('placed', 'VERB'), ('in', 'ADP'), ('the', 'DET'), ('open', 'ADJ'), ('list', 'NOUN'), ('according', 'VERB'), ('to', 'ADP'), ('their', 'PRON'), ('heuristic', 'ADJ'), ('value', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Then', 'RB'), (',', ','), ('the', 'DT'), ('heuristic', 'JJ'), ('function', 'NN'), ('is', 'VBZ'), ('applied', 'VBN'), ('to', 'IN'), ('the', 'DT'), ('child', 'NN'), ('nodes', 'NNS'), ('and', 'CC'), ('they', 'PRP'), ('are', 'VBP'), ('placed', 'VBN'), ('in', 'IN'), ('the', 'DT'), ('open', 'JJ'), ('list', 'NN'), ('according', 'VBG'), ('to', 'IN'), ('their', 'PRP$'), ('heuristic', 'JJ'), ('value', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('Then', 'then'), (',', ','), ('the', 'the'), ('heuristic', 'heuristic'), ('function', 'function'), ('is', 'be'), ('applied', 'apply'), ('to', 'to'), ('the', 'the'), ('child', 'child'), ('nodes', 'node'), ('and', 'and'), ('they', 'they'), ('are', 'be'), ('placed', 'place'), ('in', 'in'), ('the', 'the'), ('open', 'open'), ('list', 'list'), ('according', 'accord'), ('to', 'to'), ('their', 'they'), ('heuristic', 'heuristic'), ('value', 'value'), ('.', '.')] 

 Dependency tags are: 
>> [(('Then', 'applied'), 'advmod'), ((',', 'applied'), 'punct'), (('the', 'function'), 'det'), (('heuristic', 'function'), 'amod'), (('function', 'applied'), 'nsubj:pass'), (('is', 'applied'), 'aux:pass'), (('applied', 'root'), 'root'), (('to', 'nodes'), 'case'), (('the', 'nodes'), 'det'), (('child', 'nodes'), 'compound'), (('nodes', 'applied'), 'obl'), (('and', 'placed'), 'cc'), (('they', 'placed'), 'nsubj:pass'), (('are', 'placed'), 'aux:pass'), (('placed', 'applied'), 'conj'), (('in', 'list'), 'case'), (('the', 'list'), 'det'), (('open', 'list'), 'amod'), (('list', 'placed'), 'obl'), (('according', 'value'), 'case'), (('to', 'according'), 'fixed'), (('their', 'value'), 'nmod:poss'), (('heuristic', 'value'), 'amod'), (('value', 'placed'), 'obl'), (('.', 'applied'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 12 ===========================

 The shorter paths are saved and the longer ones are disposed. 

Tokens are: 
>> ['The', 'shorter', 'paths', 'are', 'saved', 'and', 'the', 'longer', 'ones', 'are', 'disposed', '.'] 

 UPOS tags are: 
>> [('The', 'DET'), ('shorter', 'ADJ'), ('paths', 'NOUN'), ('are', 'AUX'), ('saved', 'VERB'), ('and', 'CCONJ'), ('the', 'DET'), ('longer', 'ADJ'), ('ones', 'NOUN'), ('are', 'AUX'), ('disposed', 'VERB'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('The', 'DT'), ('shorter', 'JJR'), ('paths', 'NNS'), ('are', 'VBP'), ('saved', 'VBN'), ('and', 'CC'), ('the', 'DT'), ('longer', 'JJR'), ('ones', 'NNS'), ('are', 'VBP'), ('disposed', 'VBN'), ('.', '.')] 

 Lemmas are: 
>> [('The', 'the'), ('shorter', 'short'), ('paths', 'path'), ('are', 'be'), ('saved', 'save'), ('and', 'and'), ('the', 'the'), ('longer', 'long'), ('ones', 'one'), ('are', 'be'), ('disposed', 'dispose'), ('.', '.')] 

 Dependency tags are: 
>> [(('The', 'paths'), 'det'), (('shorter', 'paths'), 'amod'), (('paths', 'saved'), 'nsubj:pass'), (('are', 'saved'), 'aux:pass'), (('saved', 'root'), 'root'), (('and', 'disposed'), 'cc'), (('the', 'ones'), 'det'), (('longer', 'ones'), 'amod'), (('ones', 'disposed'), 'nsubj:pass'), (('are', 'disposed'), 'aux:pass'), (('disposed', 'saved'), 'conj'), (('.', 'saved'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 13 ===========================

 A * Search 

Tokens are: 
>> ['A', '*', 'Search'] 

 UPOS tags are: 
>> [('A', 'SYM'), ('*', 'PUNCT'), ('Search', 'NOUN')] 

 XPOS tags are: 
>> [('A', 'SYM'), ('*', 'NFP'), ('Search', 'NN')] 

 Lemmas are: 
>> [('A', 'a'), ('*', '*'), ('Search', 'search')] 

 Dependency tags are: 
>> [(('A', 'Search'), 'nummod'), (('*', 'Search'), 'punct'), (('Search', 'root'), 'root')]

 Named Entities are: 
>> []

========================== Sentence 14 ===========================

 It is best-known form of Best First search. 

Tokens are: 
>> ['It', 'is', 'best-known', 'form', 'of', 'Best', 'First', 'search', '.'] 

 UPOS tags are: 
>> [('It', 'PRON'), ('is', 'AUX'), ('best-known', 'ADJ'), ('form', 'NOUN'), ('of', 'ADP'), ('Best', 'ADJ'), ('First', 'ADJ'), ('search', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('It', 'PRP'), ('is', 'VBZ'), ('best-known', 'JJS'), ('form', 'NN'), ('of', 'IN'), ('Best', 'JJS'), ('First', 'JJ'), ('search', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('It', 'it'), ('is', 'be'), ('best-known', 'well-known'), ('form', 'form'), ('of', 'of'), ('Best', 'good'), ('First', 'first'), ('search', 'search'), ('.', '.')] 

 Dependency tags are: 
>> [(('It', 'form'), 'nsubj'), (('is', 'form'), 'cop'), (('best-known', 'form'), 'amod'), (('form', 'root'), 'root'), (('of', 'search'), 'case'), (('Best', 'search'), 'amod'), (('First', 'search'), 'amod'), (('search', 'form'), 'nmod'), (('.', 'form'), 'punct')]

 Named Entities are: 
>> [('Best First', 'ORG')]

========================== Sentence 15 ===========================

 It avoids expanding paths that are already expensive, but expands most promising paths first. 

Tokens are: 
>> ['It', 'avoids', 'expanding', 'paths', 'that', 'are', 'already', 'expensive', ',', 'but', 'expands', 'most', 'promising', 'paths', 'first', '.'] 

 UPOS tags are: 
>> [('It', 'PRON'), ('avoids', 'VERB'), ('expanding', 'VERB'), ('paths', 'NOUN'), ('that', 'PRON'), ('are', 'AUX'), ('already', 'ADV'), ('expensive', 'ADJ'), (',', 'PUNCT'), ('but', 'CCONJ'), ('expands', 'VERB'), ('most', 'ADV'), ('promising', 'ADJ'), ('paths', 'NOUN'), ('first', 'ADV'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('It', 'PRP'), ('avoids', 'VBZ'), ('expanding', 'VBG'), ('paths', 'NNS'), ('that', 'WDT'), ('are', 'VBP'), ('already', 'RB'), ('expensive', 'JJ'), (',', ','), ('but', 'CC'), ('expands', 'VBZ'), ('most', 'RBS'), ('promising', 'JJ'), ('paths', 'NNS'), ('first', 'RB'), ('.', '.')] 

 Lemmas are: 
>> [('It', 'it'), ('avoids', 'avoid'), ('expanding', 'expand'), ('paths', 'path'), ('that', 'that'), ('are', 'be'), ('already', 'already'), ('expensive', 'expensive'), (',', ','), ('but', 'but'), ('expands', 'expand'), ('most', 'most'), ('promising', 'promising'), ('paths', 'path'), ('first', 'first'), ('.', '.')] 

 Dependency tags are: 
>> [(('It', 'avoids'), 'nsubj'), (('avoids', 'root'), 'root'), (('expanding', 'avoids'), 'xcomp'), (('paths', 'expanding'), 'obj'), (('that', 'expensive'), 'nsubj'), (('are', 'expensive'), 'cop'), (('already', 'expensive'), 'advmod'), (('expensive', 'paths'), 'acl:relcl'), ((',', 'expands'), 'punct'), (('but', 'expands'), 'cc'), (('expands', 'avoids'), 'conj'), (('most', 'promising'), 'advmod'), (('promising', 'paths'), 'amod'), (('paths', 'expands'), 'obj'), (('first', 'expands'), 'advmod'), (('.', 'avoids'), 'punct')]

 Named Entities are: 
>> [('first', 'ORDINAL')]

========================== Sentence 16 ===========================

 f(n) = g(n) + h(n), where · g(n) the cost (so far) to reach the node · h(n) estimated cost to get from the node to the goal · f(n) estimated total cost of path through n to goal. 

Tokens are: 
>> ['f(', 'n', ')', '=', 'g', '(', 'n', ')', '+', 'h(', 'n', ')', ',', 'where', '·', 'g', '(', 'n', ')', 'the', 'cost', '(', 'so', 'far', ')', 'to', 'reach', 'the', 'node', '·', 'h(', 'n', ')', 'estimated', 'cost', 'to', 'get', 'from', 'the', 'node', 'to', 'the', 'goal', '·', 'f', '(', 'n', ')', 'estimated', 'total', 'cost', 'of', 'path', 'through', 'n', 'to', 'goal', '.'] 

 UPOS tags are: 
>> [('f(', 'X'), ('n', 'NOUN'), (')', 'PUNCT'), ('=', 'SYM'), ('g', 'NOUN'), ('(', 'PUNCT'), ('n', 'NOUN'), (')', 'PUNCT'), ('+', 'SYM'), ('h(', 'NUM'), ('n', 'NOUN'), (')', 'PUNCT'), (',', 'PUNCT'), ('where', 'SCONJ'), ('·', 'PUNCT'), ('g', 'NOUN'), ('(', 'PUNCT'), ('n', 'NOUN'), (')', 'PUNCT'), ('the', 'DET'), ('cost', 'NOUN'), ('(', 'PUNCT'), ('so', 'ADV'), ('far', 'ADV'), (')', 'PUNCT'), ('to', 'PART'), ('reach', 'VERB'), ('the', 'DET'), ('node', 'NOUN'), ('·', 'PUNCT'), ('h(', 'NUM'), ('n', 'NOUN'), (')', 'PUNCT'), ('estimated', 'VERB'), ('cost', 'NOUN'), ('to', 'PART'), ('get', 'VERB'), ('from', 'ADP'), ('the', 'DET'), ('node', 'NOUN'), ('to', 'ADP'), ('the', 'DET'), ('goal', 'NOUN'), ('·', 'PUNCT'), ('f', 'PROPN'), ('(', 'PUNCT'), ('n', 'NOUN'), (')', 'PUNCT'), ('estimated', 'VERB'), ('total', 'ADJ'), ('cost', 'NOUN'), ('of', 'ADP'), ('path', 'NOUN'), ('through', 'ADP'), ('n', 'NOUN'), ('to', 'ADP'), ('goal', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('f(', 'FW'), ('n', 'NN'), (')', '-RRB-'), ('=', 'SYM'), ('g', 'NNS'), ('(', '-LRB-'), ('n', 'NN'), (')', '-RRB-'), ('+', 'SYM'), ('h(', 'CD'), ('n', 'NN'), (')', '-RRB-'), (',', ','), ('where', 'WRB'), ('·', ':'), ('g', 'NNS'), ('(', '-LRB-'), ('n', 'NN'), (')', '-RRB-'), ('the', 'DT'), ('cost', 'NN'), ('(', '-LRB-'), ('so', 'RB'), ('far', 'RB'), (')', '-RRB-'), ('to', 'TO'), ('reach', 'VB'), ('the', 'DT'), ('node', 'NN'), ('·', ','), ('h(', 'CD'), ('n', 'NN'), (')', '-RRB-'), ('estimated', 'VBN'), ('cost', 'NN'), ('to', 'TO'), ('get', 'VB'), ('from', 'IN'), ('the', 'DT'), ('node', 'NN'), ('to', 'IN'), ('the', 'DT'), ('goal', 'NN'), ('·', ','), ('f', 'NNP'), ('(', '-LRB-'), ('n', 'NN'), (')', '-RRB-'), ('estimated', 'VBD'), ('total', 'JJ'), ('cost', 'NN'), ('of', 'IN'), ('path', 'NN'), ('through', 'IN'), ('n', 'NN'), ('to', 'IN'), ('goal', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('f(', 'f('), ('n', 'n'), (')', ')'), ('=', '='), ('g', 'gram'), ('(', '('), ('n', 'n'), (')', ')'), ('+', '+'), ('h(', 'h('), ('n', 'n'), (')', ')'), (',', ','), ('where', 'where'), ('·', '·'), ('g', 'gram'), ('(', '('), ('n', 'n'), (')', ')'), ('the', 'the'), ('cost', 'cost'), ('(', '('), ('so', 'so'), ('far', 'far'), (')', ')'), ('to', 'to'), ('reach', 'reach'), ('the', 'the'), ('node', 'node'), ('·', '·'), ('h(', 'h('), ('n', 'n'), (')', ')'), ('estimated', 'estimate'), ('cost', 'cost'), ('to', 'to'), ('get', 'get'), ('from', 'from'), ('the', 'the'), ('node', 'node'), ('to', 'to'), ('the', 'the'), ('goal', 'goal'), ('·', '·'), ('f', 'for'), ('(', '('), ('n', 'n'), (')', ')'), ('estimated', 'estimate'), ('total', 'total'), ('cost', 'cost'), ('of', 'of'), ('path', 'path'), ('through', 'through'), ('n', 'n'), ('to', 'to'), ('goal', 'goal'), ('.', '.')] 

 Dependency tags are: 
>> [(('f(', 'n'), 'compound'), (('n', '='), 'nsubj'), ((')', 'n'), 'punct'), (('=', 'root'), 'root'), (('g', '='), 'obj'), (('(', 'n'), 'punct'), (('n', 'g'), 'appos'), ((')', 'n'), 'punct'), (('+', 'n'), 'cc'), (('h(', 'n'), 'nummod'), (('n', 'g'), 'conj'), ((')', 'n'), 'punct'), ((',', 'cost'), 'punct'), (('where', 'cost'), 'mark'), (('·', 'where'), 'punct'), (('g', 'cost'), 'compound'), (('(', 'n'), 'punct'), (('n', 'g'), 'appos'), ((')', 'n'), 'punct'), (('the', 'cost'), 'det'), (('cost', 'g'), 'conj'), (('(', 'far'), 'punct'), (('so', 'far'), 'advmod'), (('far', 'cost'), 'amod'), ((')', 'far'), 'punct'), (('to', 'reach'), 'mark'), (('reach', '='), 'advcl'), (('the', 'node'), 'det'), (('node', 'reach'), 'obj'), (('·', 'n'), 'punct'), (('h(', 'n'), 'nummod'), (('n', 'node'), 'appos'), ((')', 'n'), 'punct'), (('estimated', 'cost'), 'amod'), (('cost', '='), 'parataxis'), (('to', 'get'), 'mark'), (('get', 'cost'), 'acl'), (('from', 'node'), 'case'), (('the', 'node'), 'det'), (('node', 'get'), 'obl'), (('to', 'goal'), 'case'), (('the', 'goal'), 'det'), (('goal', 'node'), 'nmod'), (('·', 'estimated'), 'punct'), (('f', 'n'), 'case'), (('(', 'n'), 'punct'), (('n', 'goal'), 'appos'), ((')', 'n'), 'punct'), (('estimated', 'cost'), 'acl'), (('total', 'cost'), 'amod'), (('cost', 'estimated'), 'obj'), (('of', 'path'), 'case'), (('path', 'cost'), 'nmod'), (('through', 'n'), 'case'), (('n', 'cost'), 'nmod'), (('to', 'goal'), 'case'), (('goal', 'n'), 'nmod'), (('.', '='), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 17 ===========================

 It is implemented using priority queue by increasing f(n). 

Tokens are: 
>> ['It', 'is', 'implemented', 'using', 'priority', 'queue', 'by', 'increasing', 'f(', 'n', ')', '.'] 

 UPOS tags are: 
>> [('It', 'PRON'), ('is', 'AUX'), ('implemented', 'VERB'), ('using', 'VERB'), ('priority', 'NOUN'), ('queue', 'NOUN'), ('by', 'SCONJ'), ('increasing', 'VERB'), ('f(', 'NOUN'), ('n', 'NOUN'), (')', 'PUNCT'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('It', 'PRP'), ('is', 'VBZ'), ('implemented', 'VBN'), ('using', 'VBG'), ('priority', 'NN'), ('queue', 'NN'), ('by', 'IN'), ('increasing', 'VBG'), ('f(', 'NN'), ('n', 'NN'), (')', '-RRB-'), ('.', '.')] 

 Lemmas are: 
>> [('It', 'it'), ('is', 'be'), ('implemented', 'implement'), ('using', 'use'), ('priority', 'priority'), ('queue', 'queue'), ('by', 'by'), ('increasing', 'increase'), ('f(', 'f('), ('n', 'n'), (')', ')'), ('.', '.')] 

 Dependency tags are: 
>> [(('It', 'implemented'), 'nsubj:pass'), (('is', 'implemented'), 'aux:pass'), (('implemented', 'root'), 'root'), (('using', 'implemented'), 'xcomp'), (('priority', 'queue'), 'compound'), (('queue', 'using'), 'obj'), (('by', 'increasing'), 'mark'), (('increasing', 'using'), 'advcl'), (('f(', 'n'), 'compound'), (('n', 'increasing'), 'obj'), ((')', 'implemented'), 'punct'), (('.', 'implemented'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 18 ===========================

 Greedy Best First Search 

Tokens are: 
>> ['Greedy', 'Best', 'First', 'Search'] 

 UPOS tags are: 
>> [('Greedy', 'ADJ'), ('Best', 'ADJ'), ('First', 'ADJ'), ('Search', 'NOUN')] 

 XPOS tags are: 
>> [('Greedy', 'JJ'), ('Best', 'JJS'), ('First', 'JJ'), ('Search', 'NN')] 

 Lemmas are: 
>> [('Greedy', 'Greedy'), ('Best', 'good'), ('First', 'first'), ('Search', 'search')] 

 Dependency tags are: 
>> [(('Greedy', 'Search'), 'amod'), (('Best', 'Search'), 'amod'), (('First', 'Search'), 'amod'), (('Search', 'root'), 'root')]

 Named Entities are: 
>> []

========================== Sentence 19 ===========================

 It expands the node that is estimated to be closest to goal. 

Tokens are: 
>> ['It', 'expands', 'the', 'node', 'that', 'is', 'estimated', 'to', 'be', 'closest', 'to', 'goal', '.'] 

 UPOS tags are: 
>> [('It', 'PRON'), ('expands', 'VERB'), ('the', 'DET'), ('node', 'NOUN'), ('that', 'PRON'), ('is', 'AUX'), ('estimated', 'VERB'), ('to', 'PART'), ('be', 'AUX'), ('closest', 'ADJ'), ('to', 'ADP'), ('goal', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('It', 'PRP'), ('expands', 'VBZ'), ('the', 'DT'), ('node', 'NN'), ('that', 'WDT'), ('is', 'VBZ'), ('estimated', 'VBN'), ('to', 'TO'), ('be', 'VB'), ('closest', 'JJS'), ('to', 'IN'), ('goal', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('It', 'it'), ('expands', 'expand'), ('the', 'the'), ('node', 'node'), ('that', 'that'), ('is', 'be'), ('estimated', 'estimate'), ('to', 'to'), ('be', 'be'), ('closest', 'close'), ('to', 'to'), ('goal', 'goal'), ('.', '.')] 

 Dependency tags are: 
>> [(('It', 'expands'), 'nsubj'), (('expands', 'root'), 'root'), (('the', 'node'), 'det'), (('node', 'expands'), 'obj'), (('that', 'estimated'), 'nsubj:pass'), (('is', 'estimated'), 'aux:pass'), (('estimated', 'node'), 'acl:relcl'), (('to', 'closest'), 'mark'), (('be', 'closest'), 'cop'), (('closest', 'estimated'), 'xcomp'), (('to', 'goal'), 'case'), (('goal', 'closest'), 'obl'), (('.', 'expands'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 20 ===========================

 It expands nodes based on f(n) = h(n). 

Tokens are: 
>> ['It', 'expands', 'nodes', 'based', 'on', 'f(', 'n', ')', '=', 'h(', 'n', ')', '.'] 

 UPOS tags are: 
>> [('It', 'PRON'), ('expands', 'VERB'), ('nodes', 'NOUN'), ('based', 'VERB'), ('on', 'ADP'), ('f(', 'NOUN'), ('n', 'NOUN'), (')', 'PUNCT'), ('=', 'SYM'), ('h(', 'NUM'), ('n', 'NOUN'), (')', 'PUNCT'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('It', 'PRP'), ('expands', 'VBZ'), ('nodes', 'NNS'), ('based', 'VBN'), ('on', 'IN'), ('f(', 'NN'), ('n', 'NN'), (')', '-RRB-'), ('=', 'SYM'), ('h(', 'CD'), ('n', 'NN'), (')', '-RRB-'), ('.', '.')] 

 Lemmas are: 
>> [('It', 'it'), ('expands', 'expand'), ('nodes', 'node'), ('based', 'base'), ('on', 'on'), ('f(', 'f('), ('n', 'n'), (')', ')'), ('=', '='), ('h(', 'h('), ('n', 'n'), (')', ')'), ('.', '.')] 

 Dependency tags are: 
>> [(('It', 'expands'), 'nsubj'), (('expands', 'root'), 'root'), (('nodes', 'expands'), 'obj'), (('based', 'nodes'), 'acl'), (('on', 'n'), 'case'), (('f(', 'n'), 'compound'), (('n', 'based'), 'obl'), ((')', 'n'), 'punct'), (('=', 'expands'), 'parataxis'), (('h(', 'n'), 'nummod'), (('n', '='), 'obj'), ((')', '='), 'punct'), (('.', 'expands'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 21 ===========================

 It is implemented using priority queue. 

Tokens are: 
>> ['It', 'is', 'implemented', 'using', 'priority', 'queue', '.'] 

 UPOS tags are: 
>> [('It', 'PRON'), ('is', 'AUX'), ('implemented', 'VERB'), ('using', 'VERB'), ('priority', 'NOUN'), ('queue', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('It', 'PRP'), ('is', 'VBZ'), ('implemented', 'VBN'), ('using', 'VBG'), ('priority', 'NN'), ('queue', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('It', 'it'), ('is', 'be'), ('implemented', 'implement'), ('using', 'use'), ('priority', 'priority'), ('queue', 'queue'), ('.', '.')] 

 Dependency tags are: 
>> [(('It', 'implemented'), 'nsubj:pass'), (('is', 'implemented'), 'aux:pass'), (('implemented', 'root'), 'root'), (('using', 'implemented'), 'xcomp'), (('priority', 'queue'), 'compound'), (('queue', 'using'), 'obj'), (('.', 'implemented'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 22 ===========================

 Disadvantage − 

Tokens are: 
>> ['Disadvantage', '−'] 

 UPOS tags are: 
>> [('Disadvantage', 'NOUN'), ('−', 'PUNCT')] 

 XPOS tags are: 
>> [('Disadvantage', 'NN'), ('−', '.')] 

 Lemmas are: 
>> [('Disadvantage', 'disadvantage'), ('−', "''")] 

 Dependency tags are: 
>> [(('Disadvantage', 'root'), 'root'), (('−', 'Disadvantage'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 23 ===========================

 It can get stuck in loops. 

Tokens are: 
>> ['It', 'can', 'get', 'stuck', 'in', 'loops', '.'] 

 UPOS tags are: 
>> [('It', 'PRON'), ('can', 'AUX'), ('get', 'AUX'), ('stuck', 'VERB'), ('in', 'ADP'), ('loops', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('It', 'PRP'), ('can', 'MD'), ('get', 'VB'), ('stuck', 'VBN'), ('in', 'IN'), ('loops', 'NNS'), ('.', '.')] 

 Lemmas are: 
>> [('It', 'it'), ('can', 'can'), ('get', 'get'), ('stuck', 'stick'), ('in', 'in'), ('loops', 'loop'), ('.', '.')] 

 Dependency tags are: 
>> [(('It', 'stuck'), 'nsubj:pass'), (('can', 'stuck'), 'aux'), (('get', 'stuck'), 'aux:pass'), (('stuck', 'root'), 'root'), (('in', 'loops'), 'case'), (('loops', 'stuck'), 'obl'), (('.', 'stuck'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 24 ===========================

 It is not optimal. 

Tokens are: 
>> ['It', 'is', 'not', 'optimal', '.'] 

 UPOS tags are: 
>> [('It', 'PRON'), ('is', 'AUX'), ('not', 'PART'), ('optimal', 'ADJ'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('It', 'PRP'), ('is', 'VBZ'), ('not', 'RB'), ('optimal', 'JJ'), ('.', '.')] 

 Lemmas are: 
>> [('It', 'it'), ('is', 'be'), ('not', 'not'), ('optimal', 'optimal'), ('.', '.')] 

 Dependency tags are: 
>> [(('It', 'optimal'), 'nsubj'), (('is', 'optimal'), 'cop'), (('not', 'optimal'), 'advmod'), (('optimal', 'root'), 'root'), (('.', 'optimal'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 25 ===========================

 Local Search Algorithms 

Tokens are: 
>> ['Local', 'Search', 'Algorithms'] 

 UPOS tags are: 
>> [('Local', 'ADJ'), ('Search', 'NOUN'), ('Algorithms', 'NOUN')] 

 XPOS tags are: 
>> [('Local', 'JJ'), ('Search', 'NN'), ('Algorithms', 'NNS')] 

 Lemmas are: 
>> [('Local', 'local'), ('Search', 'search'), ('Algorithms', 'algorithm')] 

 Dependency tags are: 
>> [(('Local', 'Algorithms'), 'amod'), (('Search', 'Algorithms'), 'compound'), (('Algorithms', 'root'), 'root')]

 Named Entities are: 
>> []

========================== Sentence 26 ===========================

 They start from a prospective solution and then move to a neighboring solution. 

Tokens are: 
>> ['They', 'start', 'from', 'a', 'prospective', 'solution', 'and', 'then', 'move', 'to', 'a', 'neighboring', 'solution', '.'] 

 UPOS tags are: 
>> [('They', 'PRON'), ('start', 'VERB'), ('from', 'ADP'), ('a', 'DET'), ('prospective', 'ADJ'), ('solution', 'NOUN'), ('and', 'CCONJ'), ('then', 'ADV'), ('move', 'VERB'), ('to', 'ADP'), ('a', 'DET'), ('neighboring', 'VERB'), ('solution', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('They', 'PRP'), ('start', 'VBP'), ('from', 'IN'), ('a', 'DT'), ('prospective', 'JJ'), ('solution', 'NN'), ('and', 'CC'), ('then', 'RB'), ('move', 'VBP'), ('to', 'IN'), ('a', 'DT'), ('neighboring', 'VBG'), ('solution', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('They', 'they'), ('start', 'start'), ('from', 'from'), ('a', 'a'), ('prospective', 'prospective'), ('solution', 'solution'), ('and', 'and'), ('then', 'then'), ('move', 'move'), ('to', 'to'), ('a', 'a'), ('neighboring', 'neighbor'), ('solution', 'solution'), ('.', '.')] 

 Dependency tags are: 
>> [(('They', 'start'), 'nsubj'), (('start', 'root'), 'root'), (('from', 'solution'), 'case'), (('a', 'solution'), 'det'), (('prospective', 'solution'), 'amod'), (('solution', 'start'), 'obl'), (('and', 'move'), 'cc'), (('then', 'move'), 'advmod'), (('move', 'start'), 'conj'), (('to', 'solution'), 'case'), (('a', 'solution'), 'det'), (('neighboring', 'solution'), 'amod'), (('solution', 'move'), 'obl'), (('.', 'start'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 27 ===========================

 They can return a valid solution even if it is interrupted at any time before they end. 

Tokens are: 
>> ['They', 'can', 'return', 'a', 'valid', 'solution', 'even', 'if', 'it', 'is', 'interrupted', 'at', 'any', 'time', 'before', 'they', 'end', '.'] 

 UPOS tags are: 
>> [('They', 'PRON'), ('can', 'AUX'), ('return', 'VERB'), ('a', 'DET'), ('valid', 'ADJ'), ('solution', 'NOUN'), ('even', 'ADV'), ('if', 'SCONJ'), ('it', 'PRON'), ('is', 'AUX'), ('interrupted', 'VERB'), ('at', 'ADP'), ('any', 'DET'), ('time', 'NOUN'), ('before', 'SCONJ'), ('they', 'PRON'), ('end', 'VERB'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('They', 'PRP'), ('can', 'MD'), ('return', 'VB'), ('a', 'DT'), ('valid', 'JJ'), ('solution', 'NN'), ('even', 'RB'), ('if', 'IN'), ('it', 'PRP'), ('is', 'VBZ'), ('interrupted', 'VBN'), ('at', 'IN'), ('any', 'DT'), ('time', 'NN'), ('before', 'IN'), ('they', 'PRP'), ('end', 'VBP'), ('.', '.')] 

 Lemmas are: 
>> [('They', 'they'), ('can', 'can'), ('return', 'return'), ('a', 'a'), ('valid', 'valid'), ('solution', 'solution'), ('even', 'even'), ('if', 'if'), ('it', 'it'), ('is', 'be'), ('interrupted', 'interrupt'), ('at', 'at'), ('any', 'any'), ('time', 'time'), ('before', 'before'), ('they', 'they'), ('end', 'end'), ('.', '.')] 

 Dependency tags are: 
>> [(('They', 'return'), 'nsubj'), (('can', 'return'), 'aux'), (('return', 'root'), 'root'), (('a', 'solution'), 'det'), (('valid', 'solution'), 'amod'), (('solution', 'return'), 'obj'), (('even', 'interrupted'), 'advmod'), (('if', 'interrupted'), 'mark'), (('it', 'interrupted'), 'nsubj:pass'), (('is', 'interrupted'), 'aux:pass'), (('interrupted', 'return'), 'advcl'), (('at', 'time'), 'case'), (('any', 'time'), 'det'), (('time', 'interrupted'), 'obl'), (('before', 'end'), 'mark'), (('they', 'end'), 'nsubj'), (('end', 'interrupted'), 'advcl'), (('.', 'return'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 28 ===========================

 Hill-Climbing Search 

Tokens are: 
>> ['Hill', '-', 'Climbing', 'Search'] 

 UPOS tags are: 
>> [('Hill', 'PROPN'), ('-', 'PUNCT'), ('Climbing', 'NOUN'), ('Search', 'NOUN')] 

 XPOS tags are: 
>> [('Hill', 'NNP'), ('-', 'HYPH'), ('Climbing', 'NN'), ('Search', 'NN')] 

 Lemmas are: 
>> [('Hill', 'Hill'), ('-', '-'), ('Climbing', 'climbing'), ('Search', 'search')] 

 Dependency tags are: 
>> [(('Hill', 'Climbing'), 'compound'), (('-', 'Climbing'), 'punct'), (('Climbing', 'Search'), 'compound'), (('Search', 'root'), 'root')]

 Named Entities are: 
>> []

========================== Sentence 29 ===========================

 It is an iterative algorithm that starts with an arbitrary solution to a problem and attempts to find a better solution by changing a single element of the solution incrementally. 

Tokens are: 
>> ['It', 'is', 'an', 'iterative', 'algorithm', 'that', 'starts', 'with', 'an', 'arbitrary', 'solution', 'to', 'a', 'problem', 'and', 'attempts', 'to', 'find', 'a', 'better', 'solution', 'by', 'changing', 'a', 'single', 'element', 'of', 'the', 'solution', 'incrementally', '.'] 

 UPOS tags are: 
>> [('It', 'PRON'), ('is', 'AUX'), ('an', 'DET'), ('iterative', 'ADJ'), ('algorithm', 'NOUN'), ('that', 'PRON'), ('starts', 'VERB'), ('with', 'ADP'), ('an', 'DET'), ('arbitrary', 'ADJ'), ('solution', 'NOUN'), ('to', 'ADP'), ('a', 'DET'), ('problem', 'NOUN'), ('and', 'CCONJ'), ('attempts', 'NOUN'), ('to', 'PART'), ('find', 'VERB'), ('a', 'DET'), ('better', 'ADJ'), ('solution', 'NOUN'), ('by', 'SCONJ'), ('changing', 'VERB'), ('a', 'DET'), ('single', 'ADJ'), ('element', 'NOUN'), ('of', 'ADP'), ('the', 'DET'), ('solution', 'NOUN'), ('incrementally', 'ADV'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('It', 'PRP'), ('is', 'VBZ'), ('an', 'DT'), ('iterative', 'JJ'), ('algorithm', 'NN'), ('that', 'WDT'), ('starts', 'VBZ'), ('with', 'IN'), ('an', 'DT'), ('arbitrary', 'JJ'), ('solution', 'NN'), ('to', 'IN'), ('a', 'DT'), ('problem', 'NN'), ('and', 'CC'), ('attempts', 'NNS'), ('to', 'TO'), ('find', 'VB'), ('a', 'DT'), ('better', 'JJR'), ('solution', 'NN'), ('by', 'IN'), ('changing', 'VBG'), ('a', 'DT'), ('single', 'JJ'), ('element', 'NN'), ('of', 'IN'), ('the', 'DT'), ('solution', 'NN'), ('incrementally', 'RB'), ('.', '.')] 

 Lemmas are: 
>> [('It', 'it'), ('is', 'be'), ('an', 'a'), ('iterative', 'iterative'), ('algorithm', 'algorithm'), ('that', 'that'), ('starts', 'start'), ('with', 'with'), ('an', 'a'), ('arbitrary', 'arbitrary'), ('solution', 'solution'), ('to', 'to'), ('a', 'a'), ('problem', 'problem'), ('and', 'and'), ('attempts', 'attempt'), ('to', 'to'), ('find', 'find'), ('a', 'a'), ('better', 'good'), ('solution', 'solution'), ('by', 'by'), ('changing', 'change'), ('a', 'a'), ('single', 'single'), ('element', 'element'), ('of', 'of'), ('the', 'the'), ('solution', 'solution'), ('incrementally', 'incrementally'), ('.', '.')] 

 Dependency tags are: 
>> [(('It', 'algorithm'), 'nsubj'), (('is', 'algorithm'), 'cop'), (('an', 'algorithm'), 'det'), (('iterative', 'algorithm'), 'amod'), (('algorithm', 'root'), 'root'), (('that', 'starts'), 'nsubj'), (('starts', 'algorithm'), 'acl:relcl'), (('with', 'solution'), 'case'), (('an', 'solution'), 'det'), (('arbitrary', 'solution'), 'amod'), (('solution', 'starts'), 'obl'), (('to', 'problem'), 'case'), (('a', 'problem'), 'det'), (('problem', 'solution'), 'nmod'), (('and', 'attempts'), 'cc'), (('attempts', 'problem'), 'conj'), (('to', 'find'), 'mark'), (('find', 'attempts'), 'acl'), (('a', 'solution'), 'det'), (('better', 'solution'), 'amod'), (('solution', 'find'), 'obj'), (('by', 'changing'), 'mark'), (('changing', 'find'), 'advcl'), (('a', 'element'), 'det'), (('single', 'element'), 'amod'), (('element', 'changing'), 'obj'), (('of', 'solution'), 'case'), (('the', 'solution'), 'det'), (('solution', 'element'), 'nmod'), (('incrementally', 'changing'), 'advmod'), (('.', 'algorithm'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 30 ===========================

 If the change produces a better solution, an incremental change is taken as a new solution. 

Tokens are: 
>> ['If', 'the', 'change', 'produces', 'a', 'better', 'solution', ',', 'an', 'incremental', 'change', 'is', 'taken', 'as', 'a', 'new', 'solution', '.'] 

 UPOS tags are: 
>> [('If', 'SCONJ'), ('the', 'DET'), ('change', 'NOUN'), ('produces', 'VERB'), ('a', 'DET'), ('better', 'ADJ'), ('solution', 'NOUN'), (',', 'PUNCT'), ('an', 'DET'), ('incremental', 'ADJ'), ('change', 'NOUN'), ('is', 'AUX'), ('taken', 'VERB'), ('as', 'ADP'), ('a', 'DET'), ('new', 'ADJ'), ('solution', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('If', 'IN'), ('the', 'DT'), ('change', 'NN'), ('produces', 'VBZ'), ('a', 'DT'), ('better', 'JJR'), ('solution', 'NN'), (',', ','), ('an', 'DT'), ('incremental', 'JJ'), ('change', 'NN'), ('is', 'VBZ'), ('taken', 'VBN'), ('as', 'IN'), ('a', 'DT'), ('new', 'JJ'), ('solution', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('If', 'if'), ('the', 'the'), ('change', 'change'), ('produces', 'produce'), ('a', 'a'), ('better', 'good'), ('solution', 'solution'), (',', ','), ('an', 'a'), ('incremental', 'incremental'), ('change', 'change'), ('is', 'be'), ('taken', 'take'), ('as', 'as'), ('a', 'a'), ('new', 'new'), ('solution', 'solution'), ('.', '.')] 

 Dependency tags are: 
>> [(('If', 'produces'), 'mark'), (('the', 'change'), 'det'), (('change', 'produces'), 'nsubj'), (('produces', 'taken'), 'advcl'), (('a', 'solution'), 'det'), (('better', 'solution'), 'amod'), (('solution', 'produces'), 'obj'), ((',', 'taken'), 'punct'), (('an', 'change'), 'det'), (('incremental', 'change'), 'amod'), (('change', 'taken'), 'nsubj:pass'), (('is', 'taken'), 'aux:pass'), (('taken', 'root'), 'root'), (('as', 'solution'), 'case'), (('a', 'solution'), 'det'), (('new', 'solution'), 'amod'), (('solution', 'taken'), 'obl'), (('.', 'taken'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 31 ===========================

 This process is repeated until there are no further improvements. 

Tokens are: 
>> ['This', 'process', 'is', 'repeated', 'until', 'there', 'are', 'no', 'further', 'improvements', '.'] 

 UPOS tags are: 
>> [('This', 'DET'), ('process', 'NOUN'), ('is', 'AUX'), ('repeated', 'VERB'), ('until', 'SCONJ'), ('there', 'PRON'), ('are', 'VERB'), ('no', 'DET'), ('further', 'ADJ'), ('improvements', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('This', 'DT'), ('process', 'NN'), ('is', 'VBZ'), ('repeated', 'VBN'), ('until', 'IN'), ('there', 'EX'), ('are', 'VBP'), ('no', 'DT'), ('further', 'JJ'), ('improvements', 'NNS'), ('.', '.')] 

 Lemmas are: 
>> [('This', 'this'), ('process', 'process'), ('is', 'be'), ('repeated', 'repeat'), ('until', 'until'), ('there', 'there'), ('are', 'be'), ('no', 'no'), ('further', 'further'), ('improvements', 'improvement'), ('.', '.')] 

 Dependency tags are: 
>> [(('This', 'process'), 'det'), (('process', 'repeated'), 'nsubj:pass'), (('is', 'repeated'), 'aux:pass'), (('repeated', 'root'), 'root'), (('until', 'are'), 'mark'), (('there', 'are'), 'expl'), (('are', 'repeated'), 'advcl'), (('no', 'improvements'), 'det'), (('further', 'improvements'), 'amod'), (('improvements', 'are'), 'nsubj'), (('.', 'repeated'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 32 ===========================

 function Hill-Climbing (problem), returns a state that is a local maximum. 

Tokens are: 
>> ['function', 'Hill-', 'Climbing', '(', 'problem', ')', ',', 'returns', 'a', 'state', 'that', 'is', 'a', 'local', 'maximum', '.'] 

 UPOS tags are: 
>> [('function', 'NOUN'), ('Hill-', 'PROPN'), ('Climbing', 'PROPN'), ('(', 'PUNCT'), ('problem', 'NOUN'), (')', 'PUNCT'), (',', 'PUNCT'), ('returns', 'VERB'), ('a', 'DET'), ('state', 'NOUN'), ('that', 'PRON'), ('is', 'AUX'), ('a', 'DET'), ('local', 'ADJ'), ('maximum', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('function', 'NN'), ('Hill-', 'NNP'), ('Climbing', 'NNP'), ('(', '-LRB-'), ('problem', 'NN'), (')', '-RRB-'), (',', ','), ('returns', 'VBZ'), ('a', 'DT'), ('state', 'NN'), ('that', 'WDT'), ('is', 'VBZ'), ('a', 'DT'), ('local', 'JJ'), ('maximum', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('function', 'function'), ('Hill-', 'Hill-'), ('Climbing', 'Climbing'), ('(', '('), ('problem', 'problem'), (')', ')'), (',', ','), ('returns', 'return'), ('a', 'a'), ('state', 'state'), ('that', 'that'), ('is', 'be'), ('a', 'a'), ('local', 'local'), ('maximum', 'maximum'), ('.', '.')] 

 Dependency tags are: 
>> [(('function', 'returns'), 'nsubj'), (('Hill-', 'function'), 'flat'), (('Climbing', 'Hill-'), 'flat'), (('(', 'problem'), 'punct'), (('problem', 'Hill-'), 'appos'), ((')', 'problem'), 'punct'), ((',', 'returns'), 'punct'), (('returns', 'root'), 'root'), (('a', 'state'), 'det'), (('state', 'returns'), 'obj'), (('that', 'maximum'), 'nsubj'), (('is', 'maximum'), 'cop'), (('a', 'maximum'), 'det'), (('local', 'maximum'), 'amod'), (('maximum', 'state'), 'acl:relcl'), (('.', 'returns'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 33 ===========================

 inputs: problem, a problem local variables: current, a node                  neighbor, a node current <-Make_Node(Initial-State[problem]) loop    do neighbor <- a highest_valued successor of current       if Value[neighbor] ≤ Value[current] then       return State[current]       current <- neighbor				   	 end  Disadvantage − 

Tokens are: 
>> ['inputs', ':', 'problem', ',', 'a', 'problem', 'local', 'variables', ':', 'current', ',', 'a', 'node', 'neighbor', ',', 'a', 'node', 'current', '<-', 'Make_Node', '(', 'Initial', '-', 'State', '[', 'problem', ']', ')', 'loop', 'do', 'neighbor', '<-', 'a', 'highest_valued', 'successor', 'of', 'current', 'if', 'Value', '[', 'neighbor', ']', '≤', 'Value', '[', 'current', ']', 'then', 'return', 'State', '[', 'current', ']', 'current', '<-', 'neighbor', 'end', 'Disadvantage', '−'] 

 UPOS tags are: 
>> [('inputs', 'NOUN'), (':', 'PUNCT'), ('problem', 'NOUN'), (',', 'PUNCT'), ('a', 'DET'), ('problem', 'NOUN'), ('local', 'ADJ'), ('variables', 'NOUN'), (':', 'PUNCT'), ('current', 'ADJ'), (',', 'PUNCT'), ('a', 'DET'), ('node', 'NOUN'), ('neighbor', 'NOUN'), (',', 'PUNCT'), ('a', 'DET'), ('node', 'NOUN'), ('current', 'ADJ'), ('<-', 'PUNCT'), ('Make_Node', 'PROPN'), ('(', 'PUNCT'), ('Initial', 'ADJ'), ('-', 'PUNCT'), ('State', 'PROPN'), ('[', 'PUNCT'), ('problem', 'NOUN'), (']', 'PUNCT'), (')', 'PUNCT'), ('loop', 'NOUN'), ('do', 'AUX'), ('neighbor', 'NOUN'), ('<-', 'PUNCT'), ('a', 'DET'), ('highest_valued', 'ADJ'), ('successor', 'NOUN'), ('of', 'ADP'), ('current', 'ADJ'), ('if', 'SCONJ'), ('Value', 'NOUN'), ('[', 'PUNCT'), ('neighbor', 'NOUN'), (']', 'PUNCT'), ('≤', 'NOUN'), ('Value', 'NOUN'), ('[', 'PUNCT'), ('current', 'ADJ'), (']', 'PUNCT'), ('then', 'ADV'), ('return', 'VERB'), ('State', 'NOUN'), ('[', 'PUNCT'), ('current', 'ADJ'), (']', 'PUNCT'), ('current', 'ADJ'), ('<-', 'PUNCT'), ('neighbor', 'NOUN'), ('end', 'NOUN'), ('Disadvantage', 'NOUN'), ('−', 'PUNCT')] 

 XPOS tags are: 
>> [('inputs', 'NNS'), (':', ':'), ('problem', 'NN'), (',', ','), ('a', 'DT'), ('problem', 'NN'), ('local', 'JJ'), ('variables', 'NNS'), (':', ':'), ('current', 'JJ'), (',', ','), ('a', 'DT'), ('node', 'NN'), ('neighbor', 'NN'), (',', ','), ('a', 'DT'), ('node', 'NN'), ('current', 'JJ'), ('<-', 'NFP'), ('Make_Node', 'NNP'), ('(', '-LRB-'), ('Initial', 'JJ'), ('-', 'HYPH'), ('State', 'NNP'), ('[', '-LRB-'), ('problem', 'NN'), (']', '-RRB-'), (')', '-RRB-'), ('loop', 'NN'), ('do', 'VBP'), ('neighbor', 'NN'), ('<-', 'NFP'), ('a', 'DT'), ('highest_valued', 'JJS'), ('successor', 'NN'), ('of', 'IN'), ('current', 'JJ'), ('if', 'IN'), ('Value', 'NN'), ('[', '-LRB-'), ('neighbor', 'NN'), (']', '-RRB-'), ('≤', 'NN'), ('Value', 'NN'), ('[', '-LRB-'), ('current', 'JJ'), (']', '-RRB-'), ('then', 'RB'), ('return', 'VB'), ('State', 'NN'), ('[', '-LRB-'), ('current', 'JJ'), (']', '-RRB-'), ('current', 'JJ'), ('<-', 'NFP'), ('neighbor', 'NN'), ('end', 'NN'), ('Disadvantage', 'NN'), ('−', '.')] 

 Lemmas are: 
>> [('inputs', 'input'), (':', ':'), ('problem', 'problem'), (',', ','), ('a', 'a'), ('problem', 'problem'), ('local', 'local'), ('variables', 'variable'), (':', ':'), ('current', 'current'), (',', ','), ('a', 'a'), ('node', 'node'), ('neighbor', 'neighbor'), (',', ','), ('a', 'a'), ('node', 'node'), ('current', 'current'), ('<-', '<-'), ('Make_Node', 'Make_Node'), ('(', '('), ('Initial', 'Initial'), ('-', '-'), ('State', 'State'), ('[', '['), ('problem', 'problem'), (']', ']'), (')', ')'), ('loop', 'loop'), ('do', 'do'), ('neighbor', 'neighbor'), ('<-', '<-'), ('a', 'a'), ('highest_valued', 'highest_valued'), ('successor', 'successor'), ('of', 'of'), ('current', 'current'), ('if', 'if'), ('Value', 'value'), ('[', '['), ('neighbor', 'neighbor'), (']', ']'), ('≤', '≤'), ('Value', 'value'), ('[', '['), ('current', 'current'), (']', ']'), ('then', 'then'), ('return', 'return'), ('State', 'state'), ('[', '['), ('current', 'current'), (']', ']'), ('current', 'current'), ('<-', '<-'), ('neighbor', 'neighbor'), ('end', 'end'), ('Disadvantage', 'disadvantage'), ('−', "''")] 

 Dependency tags are: 
>> [(('inputs', 'root'), 'root'), ((':', 'inputs'), 'punct'), (('problem', 'inputs'), 'appos'), ((',', 'problem'), 'punct'), (('a', 'problem'), 'det'), (('problem', 'problem'), 'appos'), (('local', 'variables'), 'amod'), (('variables', 'problem'), 'conj'), ((':', 'problem'), 'punct'), (('current', 'neighbor'), 'amod'), ((',', 'neighbor'), 'punct'), (('a', 'neighbor'), 'det'), (('node', 'neighbor'), 'compound'), (('neighbor', 'problem'), 'conj'), ((',', 'node'), 'punct'), (('a', 'node'), 'det'), (('node', 'neighbor'), 'appos'), (('current', 'node'), 'amod'), (('<-', 'Make_Node'), 'punct'), (('Make_Node', 'problem'), 'conj'), (('(', 'problem'), 'punct'), (('Initial', 'State'), 'amod'), (('-', 'State'), 'punct'), (('State', 'Make_Node'), 'appos'), (('[', 'problem'), 'punct'), (('problem', 'Make_Node'), 'appos'), ((']', 'problem'), 'punct'), ((')', 'problem'), 'punct'), (('loop', 'problem'), 'conj'), (('do', 'neighbor'), 'aux'), (('neighbor', 'inputs'), 'parataxis'), (('<-', 'successor'), 'punct'), (('a', 'successor'), 'det'), (('highest_valued', 'successor'), 'amod'), (('successor', 'problem'), 'conj'), (('of', 'current'), 'case'), (('current', 'successor'), 'nmod'), (('if', 'Value'), 'mark'), (('Value', 'successor'), 'nmod'), (('[', 'neighbor'), 'punct'), (('neighbor', 'Value'), 'compound'), ((']', 'neighbor'), 'punct'), (('≤', 'Value'), 'compound'), (('Value', 'Value'), 'conj'), (('[', 'current'), 'punct'), (('current', 'Value'), 'amod'), ((']', 'current'), 'punct'), (('then', 'return'), 'advmod'), (('return', 'inputs'), 'parataxis'), (('State', 'Disadvantage'), 'compound'), (('[', 'current'), 'punct'), (('current', 'current'), 'amod'), ((']', 'current'), 'punct'), (('current', 'Disadvantage'), 'amod'), (('<-', 'Disadvantage'), 'punct'), (('neighbor', 'Disadvantage'), 'compound'), (('end', 'Disadvantage'), 'compound'), (('Disadvantage', 'return'), 'obj'), (('−', 'inputs'), 'punct')]

 Named Entities are: 
>> [('Make_Node', 'ORG'), ('State', 'ORG')]

========================== Sentence 34 ===========================

 This algorithm is neither complete, nor optimal. 

Tokens are: 
>> ['This', 'algorithm', 'is', 'neither', 'complete', ',', 'nor', 'optimal', '.'] 

 UPOS tags are: 
>> [('This', 'DET'), ('algorithm', 'NOUN'), ('is', 'AUX'), ('neither', 'CCONJ'), ('complete', 'ADJ'), (',', 'PUNCT'), ('nor', 'CCONJ'), ('optimal', 'ADJ'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('This', 'DT'), ('algorithm', 'NN'), ('is', 'VBZ'), ('neither', 'CC'), ('complete', 'JJ'), (',', ','), ('nor', 'CC'), ('optimal', 'JJ'), ('.', '.')] 

 Lemmas are: 
>> [('This', 'this'), ('algorithm', 'algorithm'), ('is', 'be'), ('neither', 'neither'), ('complete', 'complete'), (',', ','), ('nor', 'nor'), ('optimal', 'optimal'), ('.', '.')] 

 Dependency tags are: 
>> [(('This', 'algorithm'), 'det'), (('algorithm', 'complete'), 'nsubj'), (('is', 'complete'), 'cop'), (('neither', 'complete'), 'cc:preconj'), (('complete', 'root'), 'root'), ((',', 'optimal'), 'punct'), (('nor', 'optimal'), 'cc'), (('optimal', 'complete'), 'conj'), (('.', 'complete'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 35 ===========================

 Local Beam Search 

Tokens are: 
>> ['Local', 'Beam', 'Search'] 

 UPOS tags are: 
>> [('Local', 'ADJ'), ('Beam', 'NOUN'), ('Search', 'NOUN')] 

 XPOS tags are: 
>> [('Local', 'JJ'), ('Beam', 'NN'), ('Search', 'NN')] 

 Lemmas are: 
>> [('Local', 'local'), ('Beam', 'beam'), ('Search', 'search')] 

 Dependency tags are: 
>> [(('Local', 'Search'), 'amod'), (('Beam', 'Search'), 'compound'), (('Search', 'root'), 'root')]

 Named Entities are: 
>> []

========================== Sentence 36 ===========================

 In this algorithm, it holds k number of states at any given time. 

Tokens are: 
>> ['In', 'this', 'algorithm', ',', 'it', 'holds', 'k', 'number', 'of', 'states', 'at', 'any', 'given', 'time', '.'] 

 UPOS tags are: 
>> [('In', 'ADP'), ('this', 'DET'), ('algorithm', 'NOUN'), (',', 'PUNCT'), ('it', 'PRON'), ('holds', 'VERB'), ('k', 'NUM'), ('number', 'NOUN'), ('of', 'ADP'), ('states', 'NOUN'), ('at', 'ADP'), ('any', 'DET'), ('given', 'VERB'), ('time', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('In', 'IN'), ('this', 'DT'), ('algorithm', 'NN'), (',', ','), ('it', 'PRP'), ('holds', 'VBZ'), ('k', 'CD'), ('number', 'NN'), ('of', 'IN'), ('states', 'NNS'), ('at', 'IN'), ('any', 'DT'), ('given', 'VBN'), ('time', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('In', 'in'), ('this', 'this'), ('algorithm', 'algorithm'), (',', ','), ('it', 'it'), ('holds', 'hold'), ('k', 'k'), ('number', 'number'), ('of', 'of'), ('states', 'state'), ('at', 'at'), ('any', 'any'), ('given', 'give'), ('time', 'time'), ('.', '.')] 

 Dependency tags are: 
>> [(('In', 'algorithm'), 'case'), (('this', 'algorithm'), 'det'), (('algorithm', 'holds'), 'obl'), ((',', 'holds'), 'punct'), (('it', 'holds'), 'nsubj'), (('holds', 'root'), 'root'), (('k', 'number'), 'nummod'), (('number', 'holds'), 'obj'), (('of', 'states'), 'case'), (('states', 'number'), 'nmod'), (('at', 'time'), 'case'), (('any', 'time'), 'det'), (('given', 'time'), 'amod'), (('time', 'holds'), 'obl'), (('.', 'holds'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 37 ===========================

 At the start, these states are generated randomly. 

Tokens are: 
>> ['At', 'the', 'start', ',', 'these', 'states', 'are', 'generated', 'randomly', '.'] 

 UPOS tags are: 
>> [('At', 'ADP'), ('the', 'DET'), ('start', 'NOUN'), (',', 'PUNCT'), ('these', 'DET'), ('states', 'NOUN'), ('are', 'AUX'), ('generated', 'VERB'), ('randomly', 'ADV'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('At', 'IN'), ('the', 'DT'), ('start', 'NN'), (',', ','), ('these', 'DT'), ('states', 'NNS'), ('are', 'VBP'), ('generated', 'VBN'), ('randomly', 'RB'), ('.', '.')] 

 Lemmas are: 
>> [('At', 'at'), ('the', 'the'), ('start', 'start'), (',', ','), ('these', 'this'), ('states', 'state'), ('are', 'be'), ('generated', 'generate'), ('randomly', 'randomly'), ('.', '.')] 

 Dependency tags are: 
>> [(('At', 'start'), 'case'), (('the', 'start'), 'det'), (('start', 'generated'), 'obl'), ((',', 'generated'), 'punct'), (('these', 'states'), 'det'), (('states', 'generated'), 'nsubj:pass'), (('are', 'generated'), 'aux:pass'), (('generated', 'root'), 'root'), (('randomly', 'generated'), 'advmod'), (('.', 'generated'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 38 ===========================

 The successors of these k states are computed with the help of objective function. 

Tokens are: 
>> ['The', 'successors', 'of', 'these', 'k', 'states', 'are', 'computed', 'with', 'the', 'help', 'of', 'objective', 'function', '.'] 

 UPOS tags are: 
>> [('The', 'DET'), ('successors', 'NOUN'), ('of', 'ADP'), ('these', 'DET'), ('k', 'NUM'), ('states', 'NOUN'), ('are', 'AUX'), ('computed', 'VERB'), ('with', 'ADP'), ('the', 'DET'), ('help', 'NOUN'), ('of', 'ADP'), ('objective', 'ADJ'), ('function', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('The', 'DT'), ('successors', 'NNS'), ('of', 'IN'), ('these', 'DT'), ('k', 'CD'), ('states', 'NNS'), ('are', 'VBP'), ('computed', 'VBN'), ('with', 'IN'), ('the', 'DT'), ('help', 'NN'), ('of', 'IN'), ('objective', 'JJ'), ('function', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('The', 'the'), ('successors', 'successor'), ('of', 'of'), ('these', 'this'), ('k', 'k'), ('states', 'state'), ('are', 'be'), ('computed', 'compute'), ('with', 'with'), ('the', 'the'), ('help', 'help'), ('of', 'of'), ('objective', 'objective'), ('function', 'function'), ('.', '.')] 

 Dependency tags are: 
>> [(('The', 'successors'), 'det'), (('successors', 'computed'), 'nsubj:pass'), (('of', 'states'), 'case'), (('these', 'states'), 'det'), (('k', 'states'), 'nummod'), (('states', 'successors'), 'nmod'), (('are', 'computed'), 'aux:pass'), (('computed', 'root'), 'root'), (('with', 'help'), 'case'), (('the', 'help'), 'det'), (('help', 'computed'), 'obl'), (('of', 'function'), 'case'), (('objective', 'function'), 'amod'), (('function', 'help'), 'nmod'), (('.', 'computed'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 39 ===========================

 If any of these successors is the maximum value of the objective function, then the algorithm stops. 

Tokens are: 
>> ['If', 'any', 'of', 'these', 'successors', 'is', 'the', 'maximum', 'value', 'of', 'the', 'objective', 'function', ',', 'then', 'the', 'algorithm', 'stops', '.'] 

 UPOS tags are: 
>> [('If', 'SCONJ'), ('any', 'DET'), ('of', 'ADP'), ('these', 'DET'), ('successors', 'NOUN'), ('is', 'AUX'), ('the', 'DET'), ('maximum', 'ADJ'), ('value', 'NOUN'), ('of', 'ADP'), ('the', 'DET'), ('objective', 'ADJ'), ('function', 'NOUN'), (',', 'PUNCT'), ('then', 'ADV'), ('the', 'DET'), ('algorithm', 'NOUN'), ('stops', 'VERB'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('If', 'IN'), ('any', 'DT'), ('of', 'IN'), ('these', 'DT'), ('successors', 'NNS'), ('is', 'VBZ'), ('the', 'DT'), ('maximum', 'JJ'), ('value', 'NN'), ('of', 'IN'), ('the', 'DT'), ('objective', 'JJ'), ('function', 'NN'), (',', ','), ('then', 'RB'), ('the', 'DT'), ('algorithm', 'NN'), ('stops', 'VBZ'), ('.', '.')] 

 Lemmas are: 
>> [('If', 'if'), ('any', 'any'), ('of', 'of'), ('these', 'this'), ('successors', 'successor'), ('is', 'be'), ('the', 'the'), ('maximum', 'maximum'), ('value', 'value'), ('of', 'of'), ('the', 'the'), ('objective', 'objective'), ('function', 'function'), (',', ','), ('then', 'then'), ('the', 'the'), ('algorithm', 'algorithm'), ('stops', 'stop'), ('.', '.')] 

 Dependency tags are: 
>> [(('If', 'value'), 'mark'), (('any', 'value'), 'nsubj'), (('of', 'successors'), 'case'), (('these', 'successors'), 'det'), (('successors', 'any'), 'nmod'), (('is', 'value'), 'cop'), (('the', 'value'), 'det'), (('maximum', 'value'), 'amod'), (('value', 'stops'), 'advcl'), (('of', 'function'), 'case'), (('the', 'function'), 'det'), (('objective', 'function'), 'amod'), (('function', 'value'), 'nmod'), ((',', 'stops'), 'punct'), (('then', 'stops'), 'advmod'), (('the', 'algorithm'), 'det'), (('algorithm', 'stops'), 'nsubj'), (('stops', 'root'), 'root'), (('.', 'stops'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 40 ===========================

 Otherwise the (initial k states and k number of successors of the states = 2k) states are placed in a pool. 

Tokens are: 
>> ['Otherwise', 'the', '(', 'initial', 'k', 'states', 'and', 'k', 'number', 'of', 'successors', 'of', 'the', 'states', '=', '2', 'k', ')', 'states', 'are', 'placed', 'in', 'a', 'pool', '.'] 

 UPOS tags are: 
>> [('Otherwise', 'ADV'), ('the', 'DET'), ('(', 'PUNCT'), ('initial', 'ADJ'), ('k', 'NUM'), ('states', 'NOUN'), ('and', 'CCONJ'), ('k', 'NUM'), ('number', 'NOUN'), ('of', 'ADP'), ('successors', 'NOUN'), ('of', 'ADP'), ('the', 'DET'), ('states', 'NOUN'), ('=', 'SYM'), ('2', 'NUM'), ('k', 'NUM'), (')', 'PUNCT'), ('states', 'NOUN'), ('are', 'AUX'), ('placed', 'VERB'), ('in', 'ADP'), ('a', 'DET'), ('pool', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Otherwise', 'RB'), ('the', 'DT'), ('(', '-LRB-'), ('initial', 'JJ'), ('k', 'CD'), ('states', 'NNS'), ('and', 'CC'), ('k', 'CD'), ('number', 'NN'), ('of', 'IN'), ('successors', 'NNS'), ('of', 'IN'), ('the', 'DT'), ('states', 'NNS'), ('=', 'SYM'), ('2', 'CD'), ('k', 'CD'), (')', '-RRB-'), ('states', 'NNS'), ('are', 'VBP'), ('placed', 'VBN'), ('in', 'IN'), ('a', 'DT'), ('pool', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('Otherwise', 'otherwise'), ('the', 'the'), ('(', '('), ('initial', 'initial'), ('k', 'k'), ('states', 'state'), ('and', 'and'), ('k', 'k'), ('number', 'number'), ('of', 'of'), ('successors', 'successor'), ('of', 'of'), ('the', 'the'), ('states', 'state'), ('=', '='), ('2', '2'), ('k', 'k'), (')', ')'), ('states', 'state'), ('are', 'be'), ('placed', 'place'), ('in', 'in'), ('a', 'a'), ('pool', 'pool'), ('.', '.')] 

 Dependency tags are: 
>> [(('Otherwise', 'placed'), 'advmod'), (('the', 'states'), 'det'), (('(', 'states'), 'punct'), (('initial', 'k'), 'amod'), (('k', 'states'), 'nummod'), (('states', 'placed'), 'nsubj:pass'), (('and', 'number'), 'cc'), (('k', 'number'), 'nummod'), (('number', 'states'), 'conj'), (('of', 'successors'), 'case'), (('successors', 'number'), 'nmod'), (('of', 'states'), 'case'), (('the', 'states'), 'det'), (('states', 'successors'), 'nmod'), (('=', 'states'), 'acl'), (('2', 'k'), 'compound'), (('k', '='), 'obj'), ((')', '='), 'punct'), (('states', 'placed'), 'nsubj:pass'), (('are', 'placed'), 'aux:pass'), (('placed', 'root'), 'root'), (('in', 'pool'), 'case'), (('a', 'pool'), 'det'), (('pool', 'placed'), 'obl'), (('.', 'placed'), 'punct')]

 Named Entities are: 
>> [('2', 'CARDINAL')]

========================== Sentence 41 ===========================

 The pool is then sorted numerically. 

Tokens are: 
>> ['The', 'pool', 'is', 'then', 'sorted', 'numerically', '.'] 

 UPOS tags are: 
>> [('The', 'DET'), ('pool', 'NOUN'), ('is', 'AUX'), ('then', 'ADV'), ('sorted', 'VERB'), ('numerically', 'ADV'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('The', 'DT'), ('pool', 'NN'), ('is', 'VBZ'), ('then', 'RB'), ('sorted', 'VBN'), ('numerically', 'RB'), ('.', '.')] 

 Lemmas are: 
>> [('The', 'the'), ('pool', 'pool'), ('is', 'be'), ('then', 'then'), ('sorted', 'sort'), ('numerically', 'numerically'), ('.', '.')] 

 Dependency tags are: 
>> [(('The', 'pool'), 'det'), (('pool', 'sorted'), 'nsubj:pass'), (('is', 'sorted'), 'aux:pass'), (('then', 'sorted'), 'advmod'), (('sorted', 'root'), 'root'), (('numerically', 'sorted'), 'advmod'), (('.', 'sorted'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 42 ===========================

 The highest k states are selected as new initial states. 

Tokens are: 
>> ['The', 'highest', 'k', 'states', 'are', 'selected', 'as', 'new', 'initial', 'states', '.'] 

 UPOS tags are: 
>> [('The', 'DET'), ('highest', 'ADJ'), ('k', 'NUM'), ('states', 'NOUN'), ('are', 'AUX'), ('selected', 'VERB'), ('as', 'ADP'), ('new', 'ADJ'), ('initial', 'ADJ'), ('states', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('The', 'DT'), ('highest', 'JJS'), ('k', 'CD'), ('states', 'NNS'), ('are', 'VBP'), ('selected', 'VBN'), ('as', 'IN'), ('new', 'JJ'), ('initial', 'JJ'), ('states', 'NNS'), ('.', '.')] 

 Lemmas are: 
>> [('The', 'the'), ('highest', 'high'), ('k', 'k'), ('states', 'state'), ('are', 'be'), ('selected', 'select'), ('as', 'as'), ('new', 'new'), ('initial', 'initial'), ('states', 'state'), ('.', '.')] 

 Dependency tags are: 
>> [(('The', 'states'), 'det'), (('highest', 'k'), 'amod'), (('k', 'states'), 'nummod'), (('states', 'selected'), 'nsubj:pass'), (('are', 'selected'), 'aux:pass'), (('selected', 'root'), 'root'), (('as', 'states'), 'case'), (('new', 'states'), 'amod'), (('initial', 'states'), 'amod'), (('states', 'selected'), 'obl'), (('.', 'selected'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 43 ===========================

 This process continues until a maximum value is reached. 

Tokens are: 
>> ['This', 'process', 'continues', 'until', 'a', 'maximum', 'value', 'is', 'reached', '.'] 

 UPOS tags are: 
>> [('This', 'DET'), ('process', 'NOUN'), ('continues', 'VERB'), ('until', 'SCONJ'), ('a', 'DET'), ('maximum', 'ADJ'), ('value', 'NOUN'), ('is', 'AUX'), ('reached', 'VERB'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('This', 'DT'), ('process', 'NN'), ('continues', 'VBZ'), ('until', 'IN'), ('a', 'DT'), ('maximum', 'JJ'), ('value', 'NN'), ('is', 'VBZ'), ('reached', 'VBN'), ('.', '.')] 

 Lemmas are: 
>> [('This', 'this'), ('process', 'process'), ('continues', 'continue'), ('until', 'until'), ('a', 'a'), ('maximum', 'maximum'), ('value', 'value'), ('is', 'be'), ('reached', 'reach'), ('.', '.')] 

 Dependency tags are: 
>> [(('This', 'process'), 'det'), (('process', 'continues'), 'nsubj'), (('continues', 'root'), 'root'), (('until', 'reached'), 'mark'), (('a', 'value'), 'det'), (('maximum', 'value'), 'amod'), (('value', 'reached'), 'nsubj:pass'), (('is', 'reached'), 'aux:pass'), (('reached', 'continues'), 'advcl'), (('.', 'continues'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 44 ===========================

 function BeamSearch( problem, k), returns a solution state. 

Tokens are: 
>> ['function', 'BeamSearch', '(', 'problem', ',', 'k', ')', ',', 'returns', 'a', 'solution', 'state', '.'] 

 UPOS tags are: 
>> [('function', 'NOUN'), ('BeamSearch', 'PROPN'), ('(', 'PUNCT'), ('problem', 'NOUN'), (',', 'PUNCT'), ('k', 'NUM'), (')', 'PUNCT'), (',', 'PUNCT'), ('returns', 'VERB'), ('a', 'DET'), ('solution', 'NOUN'), ('state', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('function', 'NN'), ('BeamSearch', 'NNP'), ('(', '-LRB-'), ('problem', 'NN'), (',', ','), ('k', 'CD'), (')', '-RRB-'), (',', ','), ('returns', 'VBZ'), ('a', 'DT'), ('solution', 'NN'), ('state', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('function', 'function'), ('BeamSearch', 'BeamSearch'), ('(', '('), ('problem', 'problem'), (',', ','), ('k', 'k'), (')', ')'), (',', ','), ('returns', 'return'), ('a', 'a'), ('solution', 'solution'), ('state', 'state'), ('.', '.')] 

 Dependency tags are: 
>> [(('function', 'returns'), 'nsubj'), (('BeamSearch', 'returns'), 'nsubj'), (('(', 'problem'), 'punct'), (('problem', 'BeamSearch'), 'appos'), ((',', 'k'), 'punct'), (('k', 'problem'), 'dep'), ((')', 'problem'), 'punct'), ((',', 'returns'), 'punct'), (('returns', 'root'), 'root'), (('a', 'state'), 'det'), (('solution', 'state'), 'compound'), (('state', 'returns'), 'obj'), (('.', 'returns'), 'punct')]

 Named Entities are: 
>> [('BeamSearch', 'ORG')]

========================== Sentence 45 ===========================

 start with k randomly generated states loop    generate all successors of all k states    if any of the states = solution, then return the state    else select the k best successors end  Simulated Annealing Annealing is the process of heating and cooling a metal to change its internal structure for modifying its physical properties. 

Tokens are: 
>> ['start', 'with', 'k', 'randomly', 'generated', 'states', 'loop', 'generate', 'all', 'successors', 'of', 'all', 'k', 'states', 'if', 'any', 'of', 'the', 'states', '=', 'solution', ',', 'then', 'return', 'the', 'state', 'else', 'select', 'the', 'k', 'best', 'successors', 'end', 'Simulated', 'Annealing', 'Annealing', 'is', 'the', 'process', 'of', 'heating', 'and', 'cooling', 'a', 'metal', 'to', 'change', 'its', 'internal', 'structure', 'for', 'modifying', 'its', 'physical', 'properties', '.'] 

 UPOS tags are: 
>> [('start', 'VERB'), ('with', 'ADP'), ('k', 'NUM'), ('randomly', 'ADV'), ('generated', 'VERB'), ('states', 'NOUN'), ('loop', 'NOUN'), ('generate', 'VERB'), ('all', 'DET'), ('successors', 'NOUN'), ('of', 'ADP'), ('all', 'DET'), ('k', 'NUM'), ('states', 'NOUN'), ('if', 'SCONJ'), ('any', 'DET'), ('of', 'ADP'), ('the', 'DET'), ('states', 'NOUN'), ('=', 'PUNCT'), ('solution', 'NOUN'), (',', 'PUNCT'), ('then', 'ADV'), ('return', 'VERB'), ('the', 'DET'), ('state', 'NOUN'), ('else', 'ADV'), ('select', 'VERB'), ('the', 'DET'), ('k', 'NUM'), ('best', 'ADJ'), ('successors', 'NOUN'), ('end', 'NOUN'), ('Simulated', 'VERB'), ('Annealing', 'NOUN'), ('Annealing', 'NOUN'), ('is', 'AUX'), ('the', 'DET'), ('process', 'NOUN'), ('of', 'SCONJ'), ('heating', 'NOUN'), ('and', 'CCONJ'), ('cooling', 'VERB'), ('a', 'DET'), ('metal', 'NOUN'), ('to', 'PART'), ('change', 'VERB'), ('its', 'PRON'), ('internal', 'ADJ'), ('structure', 'NOUN'), ('for', 'SCONJ'), ('modifying', 'VERB'), ('its', 'PRON'), ('physical', 'ADJ'), ('properties', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('start', 'VB'), ('with', 'IN'), ('k', 'CD'), ('randomly', 'RB'), ('generated', 'VBN'), ('states', 'NNS'), ('loop', 'NN'), ('generate', 'VB'), ('all', 'DT'), ('successors', 'NNS'), ('of', 'IN'), ('all', 'DT'), ('k', 'CD'), ('states', 'NNS'), ('if', 'IN'), ('any', 'DT'), ('of', 'IN'), ('the', 'DT'), ('states', 'NNS'), ('=', ','), ('solution', 'NN'), (',', ','), ('then', 'RB'), ('return', 'VB'), ('the', 'DT'), ('state', 'NN'), ('else', 'RB'), ('select', 'VB'), ('the', 'DT'), ('k', 'CD'), ('best', 'JJS'), ('successors', 'NNS'), ('end', 'NN'), ('Simulated', 'VBN'), ('Annealing', 'NN'), ('Annealing', 'NN'), ('is', 'VBZ'), ('the', 'DT'), ('process', 'NN'), ('of', 'IN'), ('heating', 'NN'), ('and', 'CC'), ('cooling', 'VBG'), ('a', 'DT'), ('metal', 'NN'), ('to', 'TO'), ('change', 'VB'), ('its', 'PRP$'), ('internal', 'JJ'), ('structure', 'NN'), ('for', 'IN'), ('modifying', 'VBG'), ('its', 'PRP$'), ('physical', 'JJ'), ('properties', 'NNS'), ('.', '.')] 

 Lemmas are: 
>> [('start', 'start'), ('with', 'with'), ('k', 'k'), ('randomly', 'randomly'), ('generated', 'generate'), ('states', 'state'), ('loop', 'loop'), ('generate', 'generate'), ('all', 'all'), ('successors', 'successor'), ('of', 'of'), ('all', 'all'), ('k', 'k'), ('states', 'state'), ('if', 'if'), ('any', 'any'), ('of', 'of'), ('the', 'the'), ('states', 'state'), ('=', '='), ('solution', 'solution'), (',', ','), ('then', 'then'), ('return', 'return'), ('the', 'the'), ('state', 'state'), ('else', 'else'), ('select', 'select'), ('the', 'the'), ('k', 'k'), ('best', 'good'), ('successors', 'successor'), ('end', 'end'), ('Simulated', 'simulate'), ('Annealing', 'annealing'), ('Annealing', 'annealing'), ('is', 'be'), ('the', 'the'), ('process', 'process'), ('of', 'of'), ('heating', 'heating'), ('and', 'and'), ('cooling', 'cool'), ('a', 'a'), ('metal', 'metal'), ('to', 'to'), ('change', 'change'), ('its', 'its'), ('internal', 'internal'), ('structure', 'structure'), ('for', 'for'), ('modifying', 'modify'), ('its', 'its'), ('physical', 'physical'), ('properties', 'property'), ('.', '.')] 

 Dependency tags are: 
>> [(('start', 'root'), 'root'), (('with', 'loop'), 'case'), (('k', 'loop'), 'nummod'), (('randomly', 'generated'), 'advmod'), (('generated', 'loop'), 'amod'), (('states', 'loop'), 'compound'), (('loop', 'start'), 'obl'), (('generate', 'start'), 'parataxis'), (('all', 'successors'), 'det'), (('successors', 'generate'), 'obj'), (('of', 'states'), 'case'), (('all', 'k'), 'det'), (('k', 'states'), 'nummod'), (('states', 'successors'), 'nmod'), (('if', 'process'), 'mark'), (('any', 'process'), 'nsubj'), (('of', 'states'), 'case'), (('the', 'states'), 'det'), (('states', 'any'), 'nmod'), (('=', 'start'), 'punct'), (('solution', 'any'), 'nmod'), ((',', 'return'), 'punct'), (('then', 'return'), 'advmod'), (('return', 'generate'), 'conj'), (('the', 'state'), 'det'), (('state', 'return'), 'obj'), (('else', 'select'), 'advmod'), (('select', 'return'), 'xcomp'), (('the', 'end'), 'det'), (('k', 'end'), 'nummod'), (('best', 'end'), 'amod'), (('successors', 'end'), 'compound'), (('end', 'select'), 'obj'), (('Simulated', 'Annealing'), 'amod'), (('Annealing', 'Annealing'), 'compound'), (('Annealing', 'end'), 'nmod'), (('is', 'process'), 'cop'), (('the', 'process'), 'det'), (('process', 'return'), 'conj'), (('of', 'heating'), 'case'), (('heating', 'process'), 'nmod'), (('and', 'cooling'), 'cc'), (('cooling', 'heating'), 'conj'), (('a', 'metal'), 'det'), (('metal', 'cooling'), 'obj'), (('to', 'change'), 'mark'), (('change', 'cooling'), 'advcl'), (('its', 'structure'), 'nmod:poss'), (('internal', 'structure'), 'amod'), (('structure', 'change'), 'obj'), (('for', 'modifying'), 'mark'), (('modifying', 'change'), 'advcl'), (('its', 'properties'), 'nmod:poss'), (('physical', 'properties'), 'amod'), (('properties', 'modifying'), 'obj'), (('.', 'start'), 'punct')]

 Named Entities are: 
>> [('Simulated Annealing Annealing', 'ORG')]

========================== Sentence 46 ===========================

 When the metal cools, its new structure is seized, and the metal retains its newly obtained properties. 

Tokens are: 
>> ['When', 'the', 'metal', 'cools', ',', 'its', 'new', 'structure', 'is', 'seized', ',', 'and', 'the', 'metal', 'retains', 'its', 'newly', 'obtained', 'properties', '.'] 

 UPOS tags are: 
>> [('When', 'SCONJ'), ('the', 'DET'), ('metal', 'NOUN'), ('cools', 'VERB'), (',', 'PUNCT'), ('its', 'PRON'), ('new', 'ADJ'), ('structure', 'NOUN'), ('is', 'AUX'), ('seized', 'VERB'), (',', 'PUNCT'), ('and', 'CCONJ'), ('the', 'DET'), ('metal', 'NOUN'), ('retains', 'VERB'), ('its', 'PRON'), ('newly', 'ADV'), ('obtained', 'VERB'), ('properties', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('When', 'WRB'), ('the', 'DT'), ('metal', 'NN'), ('cools', 'VBZ'), (',', ','), ('its', 'PRP$'), ('new', 'JJ'), ('structure', 'NN'), ('is', 'VBZ'), ('seized', 'VBN'), (',', ','), ('and', 'CC'), ('the', 'DT'), ('metal', 'NN'), ('retains', 'VBZ'), ('its', 'PRP$'), ('newly', 'RB'), ('obtained', 'VBN'), ('properties', 'NNS'), ('.', '.')] 

 Lemmas are: 
>> [('When', 'when'), ('the', 'the'), ('metal', 'metal'), ('cools', 'cool'), (',', ','), ('its', 'its'), ('new', 'new'), ('structure', 'structure'), ('is', 'be'), ('seized', 'seize'), (',', ','), ('and', 'and'), ('the', 'the'), ('metal', 'metal'), ('retains', 'retain'), ('its', 'its'), ('newly', 'newly'), ('obtained', 'obtain'), ('properties', 'property'), ('.', '.')] 

 Dependency tags are: 
>> [(('When', 'cools'), 'mark'), (('the', 'metal'), 'det'), (('metal', 'cools'), 'nsubj'), (('cools', 'seized'), 'advcl'), ((',', 'seized'), 'punct'), (('its', 'structure'), 'nmod:poss'), (('new', 'structure'), 'amod'), (('structure', 'seized'), 'nsubj:pass'), (('is', 'seized'), 'aux:pass'), (('seized', 'root'), 'root'), ((',', 'retains'), 'punct'), (('and', 'retains'), 'cc'), (('the', 'metal'), 'det'), (('metal', 'retains'), 'nsubj'), (('retains', 'seized'), 'conj'), (('its', 'properties'), 'nmod:poss'), (('newly', 'obtained'), 'advmod'), (('obtained', 'properties'), 'amod'), (('properties', 'retains'), 'obj'), (('.', 'seized'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 47 ===========================

 In simulated annealing process, the temperature is kept variable. 

Tokens are: 
>> ['In', 'simulated', 'annealing', 'process', ',', 'the', 'temperature', 'is', 'kept', 'variable', '.'] 

 UPOS tags are: 
>> [('In', 'ADP'), ('simulated', 'VERB'), ('annealing', 'NOUN'), ('process', 'NOUN'), (',', 'PUNCT'), ('the', 'DET'), ('temperature', 'NOUN'), ('is', 'AUX'), ('kept', 'VERB'), ('variable', 'ADJ'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('In', 'IN'), ('simulated', 'VBN'), ('annealing', 'NN'), ('process', 'NN'), (',', ','), ('the', 'DT'), ('temperature', 'NN'), ('is', 'VBZ'), ('kept', 'VBN'), ('variable', 'JJ'), ('.', '.')] 

 Lemmas are: 
>> [('In', 'in'), ('simulated', 'simulate'), ('annealing', 'annealing'), ('process', 'process'), (',', ','), ('the', 'the'), ('temperature', 'temperature'), ('is', 'be'), ('kept', 'keep'), ('variable', 'variable'), ('.', '.')] 

 Dependency tags are: 
>> [(('In', 'process'), 'case'), (('simulated', 'process'), 'amod'), (('annealing', 'process'), 'compound'), (('process', 'kept'), 'obl'), ((',', 'kept'), 'punct'), (('the', 'temperature'), 'det'), (('temperature', 'kept'), 'nsubj:pass'), (('is', 'kept'), 'aux:pass'), (('kept', 'root'), 'root'), (('variable', 'kept'), 'xcomp'), (('.', 'kept'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 48 ===========================

 We initially set the temperature high and then allow it to ‘cool' slowly as the algorithm proceeds. 

Tokens are: 
>> ['We', 'initially', 'set', 'the', 'temperature', 'high', 'and', 'then', 'allow', 'it', 'to', '‘', 'cool', "'", 'slowly', 'as', 'the', 'algorithm', 'proceeds', '.'] 

 UPOS tags are: 
>> [('We', 'PRON'), ('initially', 'ADV'), ('set', 'VERB'), ('the', 'DET'), ('temperature', 'NOUN'), ('high', 'ADJ'), ('and', 'CCONJ'), ('then', 'ADV'), ('allow', 'VERB'), ('it', 'PRON'), ('to', 'PART'), ('‘', 'PUNCT'), ('cool', 'VERB'), ("'", 'PUNCT'), ('slowly', 'ADV'), ('as', 'SCONJ'), ('the', 'DET'), ('algorithm', 'NOUN'), ('proceeds', 'VERB'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('We', 'PRP'), ('initially', 'RB'), ('set', 'VBD'), ('the', 'DT'), ('temperature', 'NN'), ('high', 'JJ'), ('and', 'CC'), ('then', 'RB'), ('allow', 'VBP'), ('it', 'PRP'), ('to', 'TO'), ('‘', '``'), ('cool', 'VB'), ("'", "''"), ('slowly', 'RB'), ('as', 'IN'), ('the', 'DT'), ('algorithm', 'NN'), ('proceeds', 'VBZ'), ('.', '.')] 

 Lemmas are: 
>> [('We', 'we'), ('initially', 'initially'), ('set', 'set'), ('the', 'the'), ('temperature', 'temperature'), ('high', 'high'), ('and', 'and'), ('then', 'then'), ('allow', 'allow'), ('it', 'it'), ('to', 'to'), ('‘', "'"), ('cool', 'cool'), ("'", "'"), ('slowly', 'slowly'), ('as', 'as'), ('the', 'the'), ('algorithm', 'algorithm'), ('proceeds', 'proceed'), ('.', '.')] 

 Dependency tags are: 
>> [(('We', 'set'), 'nsubj'), (('initially', 'set'), 'advmod'), (('set', 'root'), 'root'), (('the', 'temperature'), 'det'), (('temperature', 'set'), 'obj'), (('high', 'set'), 'xcomp'), (('and', 'allow'), 'cc'), (('then', 'allow'), 'advmod'), (('allow', 'set'), 'conj'), (('it', 'allow'), 'obj'), (('to', 'cool'), 'mark'), (('‘', 'cool'), 'punct'), (('cool', 'allow'), 'xcomp'), (("'", 'cool'), 'punct'), (('slowly', 'cool'), 'advmod'), (('as', 'proceeds'), 'mark'), (('the', 'algorithm'), 'det'), (('algorithm', 'proceeds'), 'nsubj'), (('proceeds', 'cool'), 'advcl'), (('.', 'set'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 49 ===========================

 When the temperature is high, the algorithm is allowed to accept worse solutions with high frequency. 

Tokens are: 
>> ['When', 'the', 'temperature', 'is', 'high', ',', 'the', 'algorithm', 'is', 'allowed', 'to', 'accept', 'worse', 'solutions', 'with', 'high', 'frequency', '.'] 

 UPOS tags are: 
>> [('When', 'SCONJ'), ('the', 'DET'), ('temperature', 'NOUN'), ('is', 'AUX'), ('high', 'ADJ'), (',', 'PUNCT'), ('the', 'DET'), ('algorithm', 'NOUN'), ('is', 'AUX'), ('allowed', 'VERB'), ('to', 'PART'), ('accept', 'VERB'), ('worse', 'ADJ'), ('solutions', 'NOUN'), ('with', 'ADP'), ('high', 'ADJ'), ('frequency', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('When', 'WRB'), ('the', 'DT'), ('temperature', 'NN'), ('is', 'VBZ'), ('high', 'JJ'), (',', ','), ('the', 'DT'), ('algorithm', 'NN'), ('is', 'VBZ'), ('allowed', 'VBN'), ('to', 'TO'), ('accept', 'VB'), ('worse', 'JJR'), ('solutions', 'NNS'), ('with', 'IN'), ('high', 'JJ'), ('frequency', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('When', 'when'), ('the', 'the'), ('temperature', 'temperature'), ('is', 'be'), ('high', 'high'), (',', ','), ('the', 'the'), ('algorithm', 'algorithm'), ('is', 'be'), ('allowed', 'allow'), ('to', 'to'), ('accept', 'accept'), ('worse', 'bad'), ('solutions', 'solution'), ('with', 'with'), ('high', 'high'), ('frequency', 'frequency'), ('.', '.')] 

 Dependency tags are: 
>> [(('When', 'high'), 'mark'), (('the', 'temperature'), 'det'), (('temperature', 'high'), 'nsubj'), (('is', 'high'), 'cop'), (('high', 'allowed'), 'advcl'), ((',', 'allowed'), 'punct'), (('the', 'algorithm'), 'det'), (('algorithm', 'allowed'), 'nsubj:pass'), (('is', 'allowed'), 'aux:pass'), (('allowed', 'root'), 'root'), (('to', 'accept'), 'mark'), (('accept', 'allowed'), 'xcomp'), (('worse', 'solutions'), 'amod'), (('solutions', 'accept'), 'obj'), (('with', 'frequency'), 'case'), (('high', 'frequency'), 'amod'), (('frequency', 'solutions'), 'nmod'), (('.', 'allowed'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 50 ===========================

 Start · Initialize k = 0; L = integer number of variables; · From i → j, search the performance difference Δ. · If Δ <= 0 then accept else if exp(-Δ/T(k)) > random(0,1) then accept; · Repeat steps 1 and 2 for L(k) steps. 

Tokens are: 
>> ['Start', '·', 'Initialize', 'k', '=', '0', ';', 'L', '=', 'integer', 'number', 'of', 'variables', ';', '·', 'From', 'i', '→', 'j', ',', 'search', 'the', 'performance', 'difference', 'Δ.', '·', 'If', 'Δ', '<=', '0', 'then', 'accept', 'else', 'if', 'exp', '(', '-', 'Δ/T', '(', 'k', ')', ')', '>', 'random', '(', '0,1', ')', 'then', 'accept', ';', '·', 'Repeat', 'steps', '1', 'and', '2', 'for', 'L(', 'k', ')', 'steps', '.'] 

 UPOS tags are: 
>> [('Start', 'VERB'), ('·', 'PUNCT'), ('Initialize', 'VERB'), ('k', 'NUM'), ('=', 'SYM'), ('0', 'NUM'), (';', 'PUNCT'), ('L', 'NOUN'), ('=', 'SYM'), ('integer', 'NOUN'), ('number', 'NOUN'), ('of', 'ADP'), ('variables', 'NOUN'), (';', 'PUNCT'), ('·', 'PUNCT'), ('From', 'ADP'), ('i', 'PRON'), ('→', 'PUNCT'), ('j', 'NOUN'), (',', 'PUNCT'), ('search', 'VERB'), ('the', 'DET'), ('performance', 'NOUN'), ('difference', 'NOUN'), ('Δ.', 'PUNCT'), ('·', 'PUNCT'), ('If', 'SCONJ'), ('Δ', 'NOUN'), ('<=', 'SYM'), ('0', 'NUM'), ('then', 'ADV'), ('accept', 'VERB'), ('else', 'ADV'), ('if', 'SCONJ'), ('exp', 'NOUN'), ('(', 'PUNCT'), ('-', 'SYM'), ('Δ/T', 'NOUN'), ('(', 'PUNCT'), ('k', 'NUM'), (')', 'PUNCT'), (')', 'PUNCT'), ('>', 'PUNCT'), ('random', 'ADJ'), ('(', 'PUNCT'), ('0,1', 'NUM'), (')', 'PUNCT'), ('then', 'ADV'), ('accept', 'VERB'), (';', 'PUNCT'), ('·', 'PUNCT'), ('Repeat', 'VERB'), ('steps', 'NOUN'), ('1', 'NUM'), ('and', 'CCONJ'), ('2', 'NUM'), ('for', 'ADP'), ('L(', 'NUM'), ('k', 'NUM'), (')', 'PUNCT'), ('steps', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Start', 'VB'), ('·', 'NFP'), ('Initialize', 'VB'), ('k', 'CD'), ('=', 'SYM'), ('0', 'CD'), (';', ','), ('L', 'NN'), ('=', 'SYM'), ('integer', 'NN'), ('number', 'NN'), ('of', 'IN'), ('variables', 'NNS'), (';', ','), ('·', 'NFP'), ('From', 'IN'), ('i', 'PRP'), ('→', 'NFP'), ('j', 'NN'), (',', ','), ('search', 'VB'), ('the', 'DT'), ('performance', 'NN'), ('difference', 'NN'), ('Δ.', ','), ('·', 'NFP'), ('If', 'IN'), ('Δ', 'NN'), ('<=', 'SYM'), ('0', 'CD'), ('then', 'RB'), ('accept', 'VB'), ('else', 'RB'), ('if', 'IN'), ('exp', 'NN'), ('(', '-LRB-'), ('-', 'SYM'), ('Δ/T', 'NN'), ('(', '-LRB-'), ('k', 'CD'), (')', '-RRB-'), (')', '-RRB-'), ('>', '-RRB-'), ('random', 'JJ'), ('(', '-LRB-'), ('0,1', 'LS'), (')', '-RRB-'), ('then', 'RB'), ('accept', 'VB'), (';', ','), ('·', 'NFP'), ('Repeat', 'VB'), ('steps', 'NNS'), ('1', 'CD'), ('and', 'CC'), ('2', 'CD'), ('for', 'IN'), ('L(', 'CD'), ('k', 'CD'), (')', '-RRB-'), ('steps', 'NNS'), ('.', '.')] 

 Lemmas are: 
>> [('Start', 'start'), ('·', '·'), ('Initialize', 'initialize'), ('k', 'k'), ('=', '='), ('0', '0'), (';', ';'), ('L', 'L'), ('=', '='), ('integer', 'integer'), ('number', 'number'), ('of', 'of'), ('variables', 'variable'), (';', ';'), ('·', '·'), ('From', 'from'), ('i', 'I'), ('→', "''"), ('j', 'j'), (',', ','), ('search', 'search'), ('the', 'the'), ('performance', 'performance'), ('difference', 'difference'), ('Δ.', 'Δ.'), ('·', '·'), ('If', 'if'), ('Δ', 'δ'), ('<=', '<='), ('0', '0'), ('then', 'then'), ('accept', 'accept'), ('else', 'else'), ('if', 'if'), ('exp', 'exp'), ('(', '('), ('-', '-'), ('Δ/T', 'δ/t'), ('(', '('), ('k', 'k'), (')', ')'), (')', ')'), ('>', '>'), ('random', 'random'), ('(', '('), ('0,1', '0,1'), (')', ')'), ('then', 'then'), ('accept', 'accept'), (';', ';'), ('·', '·'), ('Repeat', 'repeat'), ('steps', 'step'), ('1', '1'), ('and', 'and'), ('2', '2'), ('for', 'for'), ('L(', 'L('), ('k', 'k'), (')', ')'), ('steps', 'step'), ('.', '.')] 

 Dependency tags are: 
>> [(('Start', 'root'), 'root'), (('·', 'Start'), 'punct'), (('Initialize', 'Start'), 'parataxis'), (('k', 'Initialize'), 'obj'), (('=', 'Initialize'), 'xcomp'), (('0', '='), 'obj'), ((';', 'Initialize'), 'punct'), (('L', '='), 'nsubj'), (('=', 'Start'), 'parataxis'), (('integer', 'number'), 'compound'), (('number', '='), 'obj'), (('of', 'variables'), 'case'), (('variables', 'number'), 'nmod'), ((';', 'Start'), 'punct'), (('·', 'search'), 'punct'), (('From', 'i'), 'case'), (('i', 'search'), 'obl'), (('→', 'i'), 'punct'), (('j', 'search'), 'obl'), ((',', 'search'), 'punct'), (('search', 'Start'), 'parataxis'), (('the', 'difference'), 'det'), (('performance', 'difference'), 'compound'), (('difference', 'search'), 'obj'), (('Δ.', 'search'), 'punct'), (('·', 'accept'), 'punct'), (('If', 'Δ'), 'mark'), (('Δ', 'accept'), 'nsubj'), (('<=', 'Δ'), 'nummod'), (('0', '<='), 'nummod'), (('then', 'accept'), 'advmod'), (('accept', 'search'), 'parataxis'), (('else', 'accept'), 'advmod'), (('if', 'exp'), 'mark'), (('exp', 'accept'), 'obl'), (('(', 'Δ/T'), 'punct'), (('-', 'Δ/T'), 'case'), (('Δ/T', 'exp'), 'nmod'), (('(', 'k'), 'punct'), (('k', 'Δ/T'), 'nummod'), ((')', 'k'), 'punct'), ((')', 'k'), 'punct'), (('>', 'k'), 'punct'), (('random', 'exp'), 'amod'), (('(', '0,1'), 'punct'), (('0,1', 'accept'), 'nummod'), ((')', '0,1'), 'punct'), (('then', 'accept'), 'advmod'), (('accept', 'random'), 'parataxis'), ((';', 'Repeat'), 'punct'), (('·', 'Repeat'), 'punct'), (('Repeat', 'accept'), 'parataxis'), (('steps', 'Repeat'), 'obj'), (('1', 'steps'), 'nummod'), (('and', '2'), 'cc'), (('2', 'steps'), 'conj'), (('for', 'k'), 'case'), (('L(', 'k'), 'compound'), (('k', '2'), 'nmod'), ((')', 'k'), 'punct'), (('steps', 'Repeat'), 'obl'), (('.', 'Start'), 'punct')]

 Named Entities are: 
>> [('1', 'CARDINAL'), ('2', 'CARDINAL')]

========================== Sentence 51 ===========================

 · k = k + 1; Repeat steps 1 through 4 till the criteria is met. 

Tokens are: 
>> ['·', 'k', '=', 'k', '+', '1', ';', 'Repeat', 'steps', '1', 'through', '4', 'till', 'the', 'criteria', 'is', 'met', '.'] 

 UPOS tags are: 
>> [('·', 'PUNCT'), ('k', 'NUM'), ('=', 'SYM'), ('k', 'NUM'), ('+', 'SYM'), ('1', 'NUM'), (';', 'PUNCT'), ('Repeat', 'VERB'), ('steps', 'NOUN'), ('1', 'NUM'), ('through', 'ADP'), ('4', 'NUM'), ('till', 'SCONJ'), ('the', 'DET'), ('criteria', 'NOUN'), ('is', 'AUX'), ('met', 'VERB'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('·', 'NFP'), ('k', 'CD'), ('=', 'SYM'), ('k', 'CD'), ('+', 'SYM'), ('1', 'CD'), (';', ','), ('Repeat', 'VB'), ('steps', 'NNS'), ('1', 'CD'), ('through', 'IN'), ('4', 'CD'), ('till', 'IN'), ('the', 'DT'), ('criteria', 'NN'), ('is', 'VBZ'), ('met', 'VBN'), ('.', '.')] 

 Lemmas are: 
>> [('·', '·'), ('k', 'k'), ('=', '='), ('k', 'k'), ('+', '+'), ('1', '1'), (';', ';'), ('Repeat', 'repeat'), ('steps', 'step'), ('1', '1'), ('through', 'through'), ('4', '4'), ('till', 'till'), ('the', 'the'), ('criteria', 'criterion'), ('is', 'be'), ('met', 'meet'), ('.', '.')] 

 Dependency tags are: 
>> [(('·', '='), 'punct'), (('k', '='), 'nsubj'), (('=', 'root'), 'root'), (('k', '='), 'obj'), (('+', '1'), 'case'), (('1', 'k'), 'conj'), ((';', '='), 'punct'), (('Repeat', '='), 'parataxis'), (('steps', 'Repeat'), 'obj'), (('1', 'steps'), 'nummod'), (('through', '4'), 'case'), (('4', 'Repeat'), 'obl'), (('till', 'met'), 'mark'), (('the', 'criteria'), 'det'), (('criteria', 'met'), 'nsubj:pass'), (('is', 'met'), 'aux:pass'), (('met', 'Repeat'), 'advcl'), (('.', '='), 'punct')]

 Named Entities are: 
>> [('1', 'CARDINAL'), ('1', 'CARDINAL'), ('4', 'CARDINAL')]

========================== Sentence 52 ===========================

 End Travelling Salesman Problem 

Tokens are: 
>> ['End', 'Travelling', 'Salesman', 'Problem'] 

 UPOS tags are: 
>> [('End', 'NOUN'), ('Travelling', 'NOUN'), ('Salesman', 'NOUN'), ('Problem', 'NOUN')] 

 XPOS tags are: 
>> [('End', 'NN'), ('Travelling', 'NN'), ('Salesman', 'NN'), ('Problem', 'NN')] 

 Lemmas are: 
>> [('End', 'end'), ('Travelling', 'travel'), ('Salesman', 'salesman'), ('Problem', 'problem')] 

 Dependency tags are: 
>> [(('End', 'Travelling'), 'compound'), (('Travelling', 'Problem'), 'compound'), (('Salesman', 'Problem'), 'compound'), (('Problem', 'root'), 'root')]

 Named Entities are: 
>> []

========================== Sentence 53 ===========================

 In this algorithm, the objective is to find a low-cost tour that starts from a city, visits all cities en-route exactly once and ends at the same starting city. 

Tokens are: 
>> ['In', 'this', 'algorithm', ',', 'the', 'objective', 'is', 'to', 'find', 'a', 'low', '-', 'cost', 'tour', 'that', 'starts', 'from', 'a', 'city', ',', 'visits', 'all', 'cities', 'en-route', 'exactly', 'once', 'and', 'ends', 'at', 'the', 'same', 'starting', 'city', '.'] 

 UPOS tags are: 
>> [('In', 'ADP'), ('this', 'DET'), ('algorithm', 'NOUN'), (',', 'PUNCT'), ('the', 'DET'), ('objective', 'NOUN'), ('is', 'VERB'), ('to', 'PART'), ('find', 'VERB'), ('a', 'DET'), ('low', 'ADJ'), ('-', 'PUNCT'), ('cost', 'NOUN'), ('tour', 'NOUN'), ('that', 'PRON'), ('starts', 'VERB'), ('from', 'ADP'), ('a', 'DET'), ('city', 'NOUN'), (',', 'PUNCT'), ('visits', 'VERB'), ('all', 'DET'), ('cities', 'NOUN'), ('en-route', 'ADV'), ('exactly', 'ADV'), ('once', 'ADV'), ('and', 'CCONJ'), ('ends', 'VERB'), ('at', 'ADP'), ('the', 'DET'), ('same', 'ADJ'), ('starting', 'NOUN'), ('city', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('In', 'IN'), ('this', 'DT'), ('algorithm', 'NN'), (',', ','), ('the', 'DT'), ('objective', 'NN'), ('is', 'VBZ'), ('to', 'TO'), ('find', 'VB'), ('a', 'DT'), ('low', 'JJ'), ('-', 'HYPH'), ('cost', 'NN'), ('tour', 'NN'), ('that', 'WDT'), ('starts', 'VBZ'), ('from', 'IN'), ('a', 'DT'), ('city', 'NN'), (',', ','), ('visits', 'VBZ'), ('all', 'DT'), ('cities', 'NNS'), ('en-route', 'RB'), ('exactly', 'RB'), ('once', 'RB'), ('and', 'CC'), ('ends', 'VBZ'), ('at', 'IN'), ('the', 'DT'), ('same', 'JJ'), ('starting', 'NN'), ('city', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('In', 'in'), ('this', 'this'), ('algorithm', 'algorithm'), (',', ','), ('the', 'the'), ('objective', 'objective'), ('is', 'be'), ('to', 'to'), ('find', 'find'), ('a', 'a'), ('low', 'low'), ('-', '-'), ('cost', 'cost'), ('tour', 'tour'), ('that', 'that'), ('starts', 'start'), ('from', 'from'), ('a', 'a'), ('city', 'city'), (',', ','), ('visits', 'visit'), ('all', 'all'), ('cities', 'city'), ('en-route', 'en-route'), ('exactly', 'exactly'), ('once', 'once'), ('and', 'and'), ('ends', 'end'), ('at', 'at'), ('the', 'the'), ('same', 'same'), ('starting', 'starting'), ('city', 'city'), ('.', '.')] 

 Dependency tags are: 
>> [(('In', 'algorithm'), 'case'), (('this', 'algorithm'), 'det'), (('algorithm', 'find'), 'obl'), ((',', 'is'), 'punct'), (('the', 'objective'), 'det'), (('objective', 'is'), 'nsubj'), (('is', 'root'), 'root'), (('to', 'find'), 'mark'), (('find', 'is'), 'ccomp'), (('a', 'tour'), 'det'), (('low', 'cost'), 'amod'), (('-', 'cost'), 'punct'), (('cost', 'tour'), 'compound'), (('tour', 'find'), 'obj'), (('that', 'starts'), 'nsubj'), (('starts', 'tour'), 'acl:relcl'), (('from', 'city'), 'case'), (('a', 'city'), 'det'), (('city', 'starts'), 'obl'), ((',', 'visits'), 'punct'), (('visits', 'find'), 'conj'), (('all', 'cities'), 'det'), (('cities', 'visits'), 'obj'), (('en-route', 'visits'), 'advmod'), (('exactly', 'once'), 'advmod'), (('once', 'visits'), 'advmod'), (('and', 'ends'), 'cc'), (('ends', 'visits'), 'conj'), (('at', 'city'), 'case'), (('the', 'city'), 'det'), (('same', 'city'), 'amod'), (('starting', 'city'), 'compound'), (('city', 'ends'), 'obl'), (('.', 'is'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 54 ===========================

 Start    Find out all (n -1)! 

Tokens are: 
>> ['Start', 'Find', 'out', 'all', '(', 'n', '-', '1', ')', '!'] 

 UPOS tags are: 
>> [('Start', 'VERB'), ('Find', 'VERB'), ('out', 'ADP'), ('all', 'DET'), ('(', 'PUNCT'), ('n', 'NOUN'), ('-', 'SYM'), ('1', 'NUM'), (')', 'PUNCT'), ('!', 'PUNCT')] 

 XPOS tags are: 
>> [('Start', 'VB'), ('Find', 'VB'), ('out', 'RP'), ('all', 'DT'), ('(', '-LRB-'), ('n', 'NN'), ('-', 'SYM'), ('1', 'CD'), (')', '-RRB-'), ('!', '.')] 

 Lemmas are: 
>> [('Start', 'start'), ('Find', 'find'), ('out', 'out'), ('all', 'all'), ('(', '('), ('n', 'n'), ('-', '-'), ('1', '1'), (')', ')'), ('!', '!')] 

 Dependency tags are: 
>> [(('Start', 'root'), 'root'), (('Find', 'Start'), 'xcomp'), (('out', 'Find'), 'compound:prt'), (('all', 'Find'), 'obj'), (('(', 'n'), 'punct'), (('n', 'all'), 'appos'), (('-', '1'), 'case'), (('1', 'n'), 'nmod'), ((')', 'n'), 'punct'), (('!', 'Start'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 55 ===========================

 Possible solutions, where n is the total number of cities. 

Tokens are: 
>> ['Possible', 'solutions', ',', 'where', 'n', 'is', 'the', 'total', 'number', 'of', 'cities', '.'] 

 UPOS tags are: 
>> [('Possible', 'ADJ'), ('solutions', 'NOUN'), (',', 'PUNCT'), ('where', 'SCONJ'), ('n', 'NOUN'), ('is', 'AUX'), ('the', 'DET'), ('total', 'ADJ'), ('number', 'NOUN'), ('of', 'ADP'), ('cities', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Possible', 'JJ'), ('solutions', 'NNS'), (',', ','), ('where', 'WRB'), ('n', 'NN'), ('is', 'VBZ'), ('the', 'DT'), ('total', 'JJ'), ('number', 'NN'), ('of', 'IN'), ('cities', 'NNS'), ('.', '.')] 

 Lemmas are: 
>> [('Possible', 'possible'), ('solutions', 'solution'), (',', ','), ('where', 'where'), ('n', 'n'), ('is', 'be'), ('the', 'the'), ('total', 'total'), ('number', 'number'), ('of', 'of'), ('cities', 'city'), ('.', '.')] 

 Dependency tags are: 
>> [(('Possible', 'solutions'), 'amod'), (('solutions', 'root'), 'root'), ((',', 'solutions'), 'punct'), (('where', 'number'), 'mark'), (('n', 'number'), 'nsubj'), (('is', 'number'), 'cop'), (('the', 'number'), 'det'), (('total', 'number'), 'amod'), (('number', 'solutions'), 'acl:relcl'), (('of', 'cities'), 'case'), (('cities', 'number'), 'nmod'), (('.', 'solutions'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 56 ===========================

 Determine the minimum cost by finding out the cost of each of these (n -1)! solutions. 

Tokens are: 
>> ['Determine', 'the', 'minimum', 'cost', 'by', 'finding', 'out', 'the', 'cost', 'of', 'each', 'of', 'these', '(', 'n', '-', '1', ')', '!', 'solutions', '.'] 

 UPOS tags are: 
>> [('Determine', 'VERB'), ('the', 'DET'), ('minimum', 'ADJ'), ('cost', 'NOUN'), ('by', 'SCONJ'), ('finding', 'VERB'), ('out', 'ADP'), ('the', 'DET'), ('cost', 'NOUN'), ('of', 'ADP'), ('each', 'DET'), ('of', 'ADP'), ('these', 'PRON'), ('(', 'PUNCT'), ('n', 'NOUN'), ('-', 'SYM'), ('1', 'NUM'), (')', 'PUNCT'), ('!', 'PUNCT'), ('solutions', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Determine', 'VB'), ('the', 'DT'), ('minimum', 'JJ'), ('cost', 'NN'), ('by', 'IN'), ('finding', 'VBG'), ('out', 'RP'), ('the', 'DT'), ('cost', 'NN'), ('of', 'IN'), ('each', 'DT'), ('of', 'IN'), ('these', 'DT'), ('(', '-LRB-'), ('n', 'NN'), ('-', 'SYM'), ('1', 'CD'), (')', '-RRB-'), ('!', '.'), ('solutions', 'NNS'), ('.', '.')] 

 Lemmas are: 
>> [('Determine', 'determine'), ('the', 'the'), ('minimum', 'minimum'), ('cost', 'cost'), ('by', 'by'), ('finding', 'find'), ('out', 'out'), ('the', 'the'), ('cost', 'cost'), ('of', 'of'), ('each', 'each'), ('of', 'of'), ('these', 'this'), ('(', '('), ('n', 'n'), ('-', '-'), ('1', '1'), (')', ')'), ('!', '!'), ('solutions', 'solution'), ('.', '.')] 

 Dependency tags are: 
>> [(('Determine', 'root'), 'root'), (('the', 'cost'), 'det'), (('minimum', 'cost'), 'amod'), (('cost', 'Determine'), 'obj'), (('by', 'finding'), 'mark'), (('finding', 'Determine'), 'advcl'), (('out', 'finding'), 'compound:prt'), (('the', 'cost'), 'det'), (('cost', 'finding'), 'obj'), (('of', 'each'), 'case'), (('each', 'cost'), 'nmod'), (('of', 'these'), 'case'), (('these', 'each'), 'nmod'), (('(', 'n'), 'punct'), (('n', 'solutions'), 'compound'), (('-', '1'), 'case'), (('1', 'n'), 'nmod'), ((')', 'n'), 'punct'), (('!', 'solutions'), 'punct'), (('solutions', 'Determine'), 'parataxis'), (('.', 'Determine'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 57 ===========================

 Finally, keep the one with the minimum cost. 

Tokens are: 
>> ['Finally', ',', 'keep', 'the', 'one', 'with', 'the', 'minimum', 'cost', '.'] 

 UPOS tags are: 
>> [('Finally', 'ADV'), (',', 'PUNCT'), ('keep', 'VERB'), ('the', 'DET'), ('one', 'NOUN'), ('with', 'ADP'), ('the', 'DET'), ('minimum', 'ADJ'), ('cost', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Finally', 'RB'), (',', ','), ('keep', 'VB'), ('the', 'DT'), ('one', 'NN'), ('with', 'IN'), ('the', 'DT'), ('minimum', 'JJ'), ('cost', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('Finally', 'finally'), (',', ','), ('keep', 'keep'), ('the', 'the'), ('one', 'one'), ('with', 'with'), ('the', 'the'), ('minimum', 'minimum'), ('cost', 'cost'), ('.', '.')] 

 Dependency tags are: 
>> [(('Finally', 'keep'), 'advmod'), ((',', 'keep'), 'punct'), (('keep', 'root'), 'root'), (('the', 'one'), 'det'), (('one', 'keep'), 'obj'), (('with', 'cost'), 'case'), (('the', 'cost'), 'det'), (('minimum', 'cost'), 'amod'), (('cost', 'keep'), 'obl'), (('.', 'keep'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 58 ===========================

 end 

Tokens are: 
>> ['end'] 

 UPOS tags are: 
>> [('end', 'NOUN')] 

 XPOS tags are: 
>> [('end', 'NN')] 

 Lemmas are: 
>> [('end', 'end')] 

 Dependency tags are: 
>> [(('end', 'root'), 'root')]

 Named Entities are: 
>> []