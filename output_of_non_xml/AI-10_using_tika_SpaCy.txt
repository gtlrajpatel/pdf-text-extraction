				 *** Text Processing using Spacy *** 


============================ Sentence 1 =============================

AI-10 The membership functions work on fuzzy sets of variables. 


>> Tokens are: 
[AI-10, membership, functions, work, fuzzy, sets, variables, .] 

>> PoS Tags are: 
[('AI-10', 'NUM'), ('membership', 'NOUN'), ('functions', 'NOUN'), ('work', 'VERB'), ('fuzzy', 'ADJ'), ('sets', 'NOUN'), ('variables', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('AI-10', 'dep'), ('membership', 'compound'), ('functions', 'nsubj'), ('work', 'ROOT'), ('fuzzy', 'amod'), ('sets', 'pobj'), ('variables', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[AI-10, membership], [membership, functions], [functions, work], [work, fuzzy], [fuzzy, sets], [sets, variables], [variables, .]]

>> Trigrams: 
[[AI-10, membership, functions], [membership, functions, work], [functions, work, fuzzy], [work, fuzzy, sets], [fuzzy, sets, variables], [sets, variables, .]]

>> Noun Phrases are: 
[The membership functions, fuzzy sets, variables]

>> Named Entities are: 
[('AI-10', 'PRODUCT')]


============================ Sentence 2 =============================

Membership Function Membership functions allow you to quantify linguistic term and represent a fuzzy set graphically. 


>> Tokens are: 
[Membership, Function, Membership, functions, allow, quantify, linguistic, term, represent, fuzzy, set, graphically, .] 

>> PoS Tags are: 
[('Membership', 'NOUN'), ('Function', 'PROPN'), ('Membership', 'PROPN'), ('functions', 'NOUN'), ('allow', 'VERB'), ('quantify', 'VERB'), ('linguistic', 'ADJ'), ('term', 'NOUN'), ('represent', 'VERB'), ('fuzzy', 'ADJ'), ('set', 'NOUN'), ('graphically', 'ADV'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Membership', 'compound'), ('Function', 'compound'), ('Membership', 'compound'), ('functions', 'nsubj'), ('allow', 'ROOT'), ('quantify', 'ccomp'), ('linguistic', 'amod'), ('term', 'dobj'), ('represent', 'conj'), ('fuzzy', 'amod'), ('set', 'dobj'), ('graphically', 'advmod'), ('.', 'punct')]

>> Bigrams: 
[[Membership, Function], [Function, Membership], [Membership, functions], [functions, allow], [allow, quantify], [quantify, linguistic], [linguistic, term], [term, represent], [represent, fuzzy], [fuzzy, set], [set, graphically], [graphically, .]]

>> Trigrams: 
[[Membership, Function, Membership], [Function, Membership, functions], [Membership, functions, allow], [functions, allow, quantify], [allow, quantify, linguistic], [quantify, linguistic, term], [linguistic, term, represent], [term, represent, fuzzy], [represent, fuzzy, set], [fuzzy, set, graphically], [set, graphically, .]]

>> Noun Phrases are: 
[Membership Function Membership functions, you, linguistic term, a fuzzy set]

>> Named Entities are: 
[]


============================ Sentence 3 =============================

A membership function for a fuzzy set A on the universe of discourse X is defined as μA:X → [0,1]. 


>> Tokens are: 
[membership, function, fuzzy, set, universe, discourse, X, defined, μA, :X, →, [, 0,1, ], .] 

>> PoS Tags are: 
[('membership', 'NOUN'), ('function', 'NOUN'), ('fuzzy', 'ADJ'), ('set', 'NOUN'), ('universe', 'NOUN'), ('discourse', 'NOUN'), ('X', 'PROPN'), ('defined', 'VERB'), ('μA', 'PROPN'), (':X', 'PUNCT'), ('→', 'SYM'), ('[', 'PUNCT'), ('0,1', 'NUM'), (']', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('membership', 'compound'), ('function', 'nsubjpass'), ('fuzzy', 'amod'), ('set', 'pobj'), ('universe', 'pobj'), ('discourse', 'compound'), ('X', 'pobj'), ('defined', 'ROOT'), ('μA', 'pobj'), (':X', 'punct'), ('→', 'punct'), ('[', 'punct'), ('0,1', 'appos'), (']', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[membership, function], [function, fuzzy], [fuzzy, set], [set, universe], [universe, discourse], [discourse, X], [X, defined], [defined, μA], [μA, :X], [:X, →], [→, [], [[, 0,1], [0,1, ]], [], .]]

>> Trigrams: 
[[membership, function, fuzzy], [function, fuzzy, set], [fuzzy, set, universe], [set, universe, discourse], [universe, discourse, X], [discourse, X, defined], [X, defined, μA], [defined, μA, :X], [μA, :X, →], [:X, →, [], [→, [, 0,1], [[, 0,1, ]], [0,1, ], .]]

>> Noun Phrases are: 
[A membership function, a fuzzy set, A, the universe, discourse X, μA]

>> Named Entities are: 
[('μA', 'ORG')]


============================ Sentence 4 =============================

Here, each element of X is mapped to a value between 0 and 1. 


>> Tokens are: 
[,, element, X, mapped, value, 0, 1, .] 

>> PoS Tags are: 
[(',', 'PUNCT'), ('element', 'NOUN'), ('X', 'NOUN'), ('mapped', 'VERB'), ('value', 'NOUN'), ('0', 'NUM'), ('1', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(',', 'punct'), ('element', 'nsubjpass'), ('X', 'pobj'), ('mapped', 'ROOT'), ('value', 'pobj'), ('0', 'pobj'), ('1', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[,, element], [element, X], [X, mapped], [mapped, value], [value, 0], [0, 1], [1, .]]

>> Trigrams: 
[[,, element, X], [element, X, mapped], [X, mapped, value], [mapped, value, 0], [value, 0, 1], [0, 1, .]]

>> Noun Phrases are: 
[each element, X, a value]

>> Named Entities are: 
[]


============================ Sentence 5 =============================

It is called membership value or degree of membership. 


>> Tokens are: 
[called, membership, value, degree, membership, .] 

>> PoS Tags are: 
[('called', 'VERB'), ('membership', 'NOUN'), ('value', 'NOUN'), ('degree', 'NOUN'), ('membership', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('called', 'ROOT'), ('membership', 'compound'), ('value', 'oprd'), ('degree', 'conj'), ('membership', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[called, membership], [membership, value], [value, degree], [degree, membership], [membership, .]]

>> Trigrams: 
[[called, membership, value], [membership, value, degree], [value, degree, membership], [degree, membership, .]]

>> Noun Phrases are: 
[It, membership value, degree, membership]

>> Named Entities are: 
[]


============================ Sentence 6 =============================

It quantifies the degree of membership of the element in X to the fuzzy set A. · x axis represents the universe of discourse. · 


>> Tokens are: 
[quantifies, degree, membership, element, X, fuzzy, set, A., ·, x, axis, represents, universe, discourse, ., ·] 

>> PoS Tags are: 
[('quantifies', 'VERB'), ('degree', 'NOUN'), ('membership', 'NOUN'), ('element', 'NOUN'), ('X', 'PRON'), ('fuzzy', 'ADJ'), ('set', 'VERB'), ('A.', 'NOUN'), ('·', 'PUNCT'), ('x', 'SYM'), ('axis', 'NOUN'), ('represents', 'VERB'), ('universe', 'NOUN'), ('discourse', 'NOUN'), ('.', 'PUNCT'), ('·', 'PUNCT')] 

>> Dependency Tags are: 
[('quantifies', 'ROOT'), ('degree', 'dobj'), ('membership', 'pobj'), ('element', 'pobj'), ('X', 'pobj'), ('fuzzy', 'amod'), ('set', 'amod'), ('A.', 'pobj'), ('·', 'punct'), ('x', 'punct'), ('axis', 'nsubj'), ('represents', 'ccomp'), ('universe', 'dobj'), ('discourse', 'pobj'), ('.', 'punct'), ('·', 'punct')]

>> Bigrams: 
[[quantifies, degree], [degree, membership], [membership, element], [element, X], [X, fuzzy], [fuzzy, set], [set, A.], [A., ·], [·, x], [x, axis], [axis, represents], [represents, universe], [universe, discourse], [discourse, .], [., ·]]

>> Trigrams: 
[[quantifies, degree, membership], [degree, membership, element], [membership, element, X], [element, X, fuzzy], [X, fuzzy, set], [fuzzy, set, A.], [set, A., ·], [A., ·, x], [·, x, axis], [x, axis, represents], [axis, represents, universe], [represents, universe, discourse], [universe, discourse, .], [discourse, ., ·]]

>> Noun Phrases are: 
[It, the degree, membership, the element, X, the fuzzy set A., axis, the universe, discourse]

>> Named Entities are: 
[]


============================ Sentence 7 =============================

y axis represents the degrees of membership in the [0, 1] interval. 


>> Tokens are: 
[y, axis, represents, degrees, membership, [, 0, ,, 1, ], interval, .] 

>> PoS Tags are: 
[('y', 'DET'), ('axis', 'NOUN'), ('represents', 'VERB'), ('degrees', 'NOUN'), ('membership', 'NOUN'), ('[', 'PUNCT'), ('0', 'NUM'), (',', 'PUNCT'), ('1', 'NUM'), (']', 'PUNCT'), ('interval', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('y', 'det'), ('axis', 'nsubj'), ('represents', 'ROOT'), ('degrees', 'dobj'), ('membership', 'pobj'), ('[', 'punct'), ('0', 'quantmod'), (',', 'punct'), ('1', 'nummod'), (']', 'nummod'), ('interval', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[y, axis], [axis, represents], [represents, degrees], [degrees, membership], [membership, [], [[, 0], [0, ,], [,, 1], [1, ]], [], interval], [interval, .]]

>> Trigrams: 
[[y, axis, represents], [axis, represents, degrees], [represents, degrees, membership], [degrees, membership, [], [membership, [, 0], [[, 0, ,], [0, ,, 1], [,, 1, ]], [1, ], interval], [], interval, .]]

>> Noun Phrases are: 
[y axis, the degrees, membership, the [0, 1] interval]

>> Named Entities are: 
[('0', 'CARDINAL'), ('1', 'CARDINAL')]


============================ Sentence 8 =============================

There can be multiple membership functions applicable to fuzzify a numerical value. 


>> Tokens are: 
[multiple, membership, functions, applicable, fuzzify, numerical, value, .] 

>> PoS Tags are: 
[('multiple', 'ADJ'), ('membership', 'NOUN'), ('functions', 'NOUN'), ('applicable', 'ADJ'), ('fuzzify', 'VERB'), ('numerical', 'ADJ'), ('value', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('multiple', 'amod'), ('membership', 'compound'), ('functions', 'attr'), ('applicable', 'amod'), ('fuzzify', 'xcomp'), ('numerical', 'amod'), ('value', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[multiple, membership], [membership, functions], [functions, applicable], [applicable, fuzzify], [fuzzify, numerical], [numerical, value], [value, .]]

>> Trigrams: 
[[multiple, membership, functions], [membership, functions, applicable], [functions, applicable, fuzzify], [applicable, fuzzify, numerical], [fuzzify, numerical, value], [numerical, value, .]]

>> Noun Phrases are: 
[multiple membership functions, a numerical value]

>> Named Entities are: 
[]


============================ Sentence 9 =============================

Simple membership functions are used as use of complex functions does not add more precision in the output. 


>> Tokens are: 
[Simple, membership, functions, use, complex, functions, add, precision, output, .] 

>> PoS Tags are: 
[('Simple', 'ADJ'), ('membership', 'NOUN'), ('functions', 'NOUN'), ('use', 'NOUN'), ('complex', 'ADJ'), ('functions', 'NOUN'), ('add', 'VERB'), ('precision', 'NOUN'), ('output', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Simple', 'amod'), ('membership', 'compound'), ('functions', 'nsubjpass'), ('use', 'pobj'), ('complex', 'amod'), ('functions', 'pobj'), ('add', 'conj'), ('precision', 'dobj'), ('output', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Simple, membership], [membership, functions], [functions, use], [use, complex], [complex, functions], [functions, add], [add, precision], [precision, output], [output, .]]

>> Trigrams: 
[[Simple, membership, functions], [membership, functions, use], [functions, use, complex], [use, complex, functions], [complex, functions, add], [functions, add, precision], [add, precision, output], [precision, output, .]]

>> Noun Phrases are: 
[Simple membership functions, use, complex functions, more precision, the output]

>> Named Entities are: 
[]


============================ Sentence 10 =============================

All membership functions for LP, MP, S, MN, and LN are shown as below −   


>> Tokens are: 
[membership, functions, LP, ,, MP, ,, S, ,, MN, ,, LN, shown, −,  ] 

>> PoS Tags are: 
[('membership', 'NOUN'), ('functions', 'NOUN'), ('LP', 'PROPN'), (',', 'PUNCT'), ('MP', 'PROPN'), (',', 'PUNCT'), ('S', 'PROPN'), (',', 'PUNCT'), ('MN', 'PROPN'), (',', 'PUNCT'), ('LN', 'PROPN'), ('shown', 'VERB'), ('−', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('membership', 'compound'), ('functions', 'nsubjpass'), ('LP', 'pobj'), (',', 'punct'), ('MP', 'conj'), (',', 'punct'), ('S', 'conj'), (',', 'punct'), ('MN', 'conj'), (',', 'punct'), ('LN', 'conj'), ('shown', 'ROOT'), ('−', 'pobj'), (' ', 'punct')]

>> Bigrams: 
[[membership, functions], [functions, LP], [LP, ,], [,, MP], [MP, ,], [,, S], [S, ,], [,, MN], [MN, ,], [,, LN], [LN, shown], [shown, −], [−,  ]]

>> Trigrams: 
[[membership, functions, LP], [functions, LP, ,], [LP, ,, MP], [,, MP, ,], [MP, ,, S], [,, S, ,], [S, ,, MN], [,, MN, ,], [MN, ,, LN], [,, LN, shown], [LN, shown, −], [shown, −,  ]]

>> Noun Phrases are: 
[All membership functions, LP, MP, S, MN, LN, −]

>> Named Entities are: 
[('MN', 'ORG'), ('LN', 'GPE')]


============================ Sentence 11 =============================

The triangular membership function shapes are most common among various other membership function shapes such as trapezoidal, singleton, and Gaussian. 


>> Tokens are: 
[triangular, membership, function, shapes, common, membership, function, shapes, trapezoidal, ,, singleton, ,, Gaussian, .] 

>> PoS Tags are: 
[('triangular', 'ADJ'), ('membership', 'NOUN'), ('function', 'NOUN'), ('shapes', 'NOUN'), ('common', 'ADJ'), ('membership', 'NOUN'), ('function', 'NOUN'), ('shapes', 'NOUN'), ('trapezoidal', 'NOUN'), (',', 'PUNCT'), ('singleton', 'NOUN'), (',', 'PUNCT'), ('Gaussian', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('triangular', 'amod'), ('membership', 'compound'), ('function', 'compound'), ('shapes', 'nsubj'), ('common', 'acomp'), ('membership', 'compound'), ('function', 'compound'), ('shapes', 'pobj'), ('trapezoidal', 'pobj'), (',', 'punct'), ('singleton', 'conj'), (',', 'punct'), ('Gaussian', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[triangular, membership], [membership, function], [function, shapes], [shapes, common], [common, membership], [membership, function], [function, shapes], [shapes, trapezoidal], [trapezoidal, ,], [,, singleton], [singleton, ,], [,, Gaussian], [Gaussian, .]]

>> Trigrams: 
[[triangular, membership, function], [membership, function, shapes], [function, shapes, common], [shapes, common, membership], [common, membership, function], [membership, function, shapes], [function, shapes, trapezoidal], [shapes, trapezoidal, ,], [trapezoidal, ,, singleton], [,, singleton, ,], [singleton, ,, Gaussian], [,, Gaussian, .]]

>> Noun Phrases are: 
[The triangular membership function shapes, various other membership function shapes, trapezoidal, singleton, Gaussian]

>> Named Entities are: 
[('Gaussian', 'PERSON')]


============================ Sentence 12 =============================

Here, the input to 5-level fuzzifier varies from -10 volts to +10 volts. 


>> Tokens are: 
[,, input, 5, -, level, fuzzifier, varies, -10, volts, +10, volts, .] 

>> PoS Tags are: 
[(',', 'PUNCT'), ('input', 'NOUN'), ('5', 'NUM'), ('-', 'PUNCT'), ('level', 'NOUN'), ('fuzzifier', 'NOUN'), ('varies', 'VERB'), ('-10', 'PROPN'), ('volts', 'NOUN'), ('+10', 'VERB'), ('volts', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(',', 'punct'), ('input', 'nsubj'), ('5', 'nummod'), ('-', 'punct'), ('level', 'compound'), ('fuzzifier', 'pobj'), ('varies', 'ROOT'), ('-10', 'compound'), ('volts', 'pobj'), ('+10', 'advcl'), ('volts', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[,, input], [input, 5], [5, -], [-, level], [level, fuzzifier], [fuzzifier, varies], [varies, -10], [-10, volts], [volts, +10], [+10, volts], [volts, .]]

>> Trigrams: 
[[,, input, 5], [input, 5, -], [5, -, level], [-, level, fuzzifier], [level, fuzzifier, varies], [fuzzifier, varies, -10], [varies, -10, volts], [-10, volts, +10], [volts, +10, volts], [+10, volts, .]]

>> Noun Phrases are: 
[the input, 5-level fuzzifier, -10 volts, volts]

>> Named Entities are: 
[('5', 'CARDINAL')]


============================ Sentence 13 =============================

Hence the corresponding output also changes. 


>> Tokens are: 
[corresponding, output, changes, .] 

>> PoS Tags are: 
[('corresponding', 'ADJ'), ('output', 'NOUN'), ('changes', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('corresponding', 'amod'), ('output', 'nsubj'), ('changes', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[corresponding, output], [output, changes], [changes, .]]

>> Trigrams: 
[[corresponding, output, changes], [output, changes, .]]

>> Noun Phrases are: 
[the corresponding output]

>> Named Entities are: 
[]


============================ Sentence 14 =============================

Example of a Fuzzy Logic System Let us consider an air conditioning system with 5-level fuzzy logic system. 


>> Tokens are: 
[Example, Fuzzy, Logic, System, Let, consider, air, conditioning, system, 5, -, level, fuzzy, logic, system, .] 

>> PoS Tags are: 
[('Example', 'NOUN'), ('Fuzzy', 'PROPN'), ('Logic', 'PROPN'), ('System', 'PROPN'), ('Let', 'VERB'), ('consider', 'VERB'), ('air', 'NOUN'), ('conditioning', 'NOUN'), ('system', 'NOUN'), ('5', 'NUM'), ('-', 'PUNCT'), ('level', 'NOUN'), ('fuzzy', 'ADJ'), ('logic', 'NOUN'), ('system', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Example', 'nsubj'), ('Fuzzy', 'compound'), ('Logic', 'compound'), ('System', 'pobj'), ('Let', 'ROOT'), ('consider', 'ccomp'), ('air', 'compound'), ('conditioning', 'compound'), ('system', 'dobj'), ('5', 'nummod'), ('-', 'punct'), ('level', 'nmod'), ('fuzzy', 'amod'), ('logic', 'compound'), ('system', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Example, Fuzzy], [Fuzzy, Logic], [Logic, System], [System, Let], [Let, consider], [consider, air], [air, conditioning], [conditioning, system], [system, 5], [5, -], [-, level], [level, fuzzy], [fuzzy, logic], [logic, system], [system, .]]

>> Trigrams: 
[[Example, Fuzzy, Logic], [Fuzzy, Logic, System], [Logic, System, Let], [System, Let, consider], [Let, consider, air], [consider, air, conditioning], [air, conditioning, system], [conditioning, system, 5], [system, 5, -], [5, -, level], [-, level, fuzzy], [level, fuzzy, logic], [fuzzy, logic, system], [logic, system, .]]

>> Noun Phrases are: 
[Example, a Fuzzy Logic System, us, an air conditioning system, 5-level fuzzy logic system]

>> Named Entities are: 
[('5', 'CARDINAL')]


============================ Sentence 15 =============================

This system adjusts the temperature of air conditioner by comparing the room temperature and the target temperature value. 


>> Tokens are: 
[system, adjusts, temperature, air, conditioner, comparing, room, temperature, target, temperature, value, .] 

>> PoS Tags are: 
[('system', 'NOUN'), ('adjusts', 'VERB'), ('temperature', 'NOUN'), ('air', 'NOUN'), ('conditioner', 'NOUN'), ('comparing', 'VERB'), ('room', 'NOUN'), ('temperature', 'NOUN'), ('target', 'NOUN'), ('temperature', 'NOUN'), ('value', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('system', 'nsubj'), ('adjusts', 'ROOT'), ('temperature', 'dobj'), ('air', 'compound'), ('conditioner', 'pobj'), ('comparing', 'pcomp'), ('room', 'compound'), ('temperature', 'dobj'), ('target', 'compound'), ('temperature', 'compound'), ('value', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[system, adjusts], [adjusts, temperature], [temperature, air], [air, conditioner], [conditioner, comparing], [comparing, room], [room, temperature], [temperature, target], [target, temperature], [temperature, value], [value, .]]

>> Trigrams: 
[[system, adjusts, temperature], [adjusts, temperature, air], [temperature, air, conditioner], [air, conditioner, comparing], [conditioner, comparing, room], [comparing, room, temperature], [room, temperature, target], [temperature, target, temperature], [target, temperature, value], [temperature, value, .]]

>> Noun Phrases are: 
[This system, the temperature, air conditioner, the room temperature, the target temperature value]

>> Named Entities are: 
[]


============================ Sentence 16 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 17 =============================

Algorithm · Define linguistic Variables and terms (start) · 


>> Tokens are: 
[Algorithm, ·, Define, linguistic, Variables, terms, (, start, ), ·] 

>> PoS Tags are: 
[('Algorithm', 'PROPN'), ('·', 'PUNCT'), ('Define', 'PROPN'), ('linguistic', 'ADJ'), ('Variables', 'PROPN'), ('terms', 'NOUN'), ('(', 'PUNCT'), ('start', 'VERB'), (')', 'PUNCT'), ('·', 'PUNCT')] 

>> Dependency Tags are: 
[('Algorithm', 'nmod'), ('·', 'punct'), ('Define', 'nmod'), ('linguistic', 'amod'), ('Variables', 'ROOT'), ('terms', 'conj'), ('(', 'punct'), ('start', 'parataxis'), (')', 'punct'), ('·', 'punct')]

>> Bigrams: 
[[Algorithm, ·], [·, Define], [Define, linguistic], [linguistic, Variables], [Variables, terms], [terms, (], [(, start], [start, )], [), ·]]

>> Trigrams: 
[[Algorithm, ·, Define], [·, Define, linguistic], [Define, linguistic, Variables], [linguistic, Variables, terms], [Variables, terms, (], [terms, (, start], [(, start, )], [start, ), ·]]

>> Noun Phrases are: 
[Algorithm · Define linguistic Variables, terms]

>> Named Entities are: 
[]


============================ Sentence 18 =============================

Construct membership functions for them. 


>> Tokens are: 
[Construct, membership, functions, .] 

>> PoS Tags are: 
[('Construct', 'VERB'), ('membership', 'NOUN'), ('functions', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Construct', 'ROOT'), ('membership', 'compound'), ('functions', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Construct, membership], [membership, functions], [functions, .]]

>> Trigrams: 
[[Construct, membership, functions], [membership, functions, .]]

>> Noun Phrases are: 
[membership functions, them]

>> Named Entities are: 
[('Construct', 'ORG')]


============================ Sentence 19 =============================

(start) · 


>> Tokens are: 
[(, start, ), ·] 

>> PoS Tags are: 
[('(', 'PUNCT'), ('start', 'VERB'), (')', 'PUNCT'), ('·', 'PUNCT')] 

>> Dependency Tags are: 
[('(', 'punct'), ('start', 'ROOT'), (')', 'punct'), ('·', 'punct')]

>> Bigrams: 
[[(, start], [start, )], [), ·]]

>> Trigrams: 
[[(, start, )], [start, ), ·]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 20 =============================

Construct knowledge base of rules (start) · Convert crisp data into fuzzy data sets using membership functions. 


>> Tokens are: 
[Construct, knowledge, base, rules, (, start, ), ·, Convert, crisp, data, fuzzy, data, sets, membership, functions, .] 

>> PoS Tags are: 
[('Construct', 'VERB'), ('knowledge', 'NOUN'), ('base', 'NOUN'), ('rules', 'NOUN'), ('(', 'PUNCT'), ('start', 'VERB'), (')', 'PUNCT'), ('·', 'PUNCT'), ('Convert', 'VERB'), ('crisp', 'ADJ'), ('data', 'NOUN'), ('fuzzy', 'ADJ'), ('data', 'NOUN'), ('sets', 'NOUN'), ('membership', 'NOUN'), ('functions', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Construct', 'ROOT'), ('knowledge', 'compound'), ('base', 'dobj'), ('rules', 'pobj'), ('(', 'punct'), ('start', 'parataxis'), (')', 'punct'), ('·', 'punct'), ('Convert', 'conj'), ('crisp', 'amod'), ('data', 'dobj'), ('fuzzy', 'amod'), ('data', 'compound'), ('sets', 'pobj'), ('membership', 'compound'), ('functions', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Construct, knowledge], [knowledge, base], [base, rules], [rules, (], [(, start], [start, )], [), ·], [·, Convert], [Convert, crisp], [crisp, data], [data, fuzzy], [fuzzy, data], [data, sets], [sets, membership], [membership, functions], [functions, .]]

>> Trigrams: 
[[Construct, knowledge, base], [knowledge, base, rules], [base, rules, (], [rules, (, start], [(, start, )], [start, ), ·], [), ·, Convert], [·, Convert, crisp], [Convert, crisp, data], [crisp, data, fuzzy], [data, fuzzy, data], [fuzzy, data, sets], [data, sets, membership], [sets, membership, functions], [membership, functions, .]]

>> Noun Phrases are: 
[knowledge base, rules, crisp data, fuzzy data sets, membership functions]

>> Named Entities are: 
[('Construct', 'ORG'), ('Convert', 'PERSON')]


============================ Sentence 21 =============================

(fuzzification) · 


>> Tokens are: 
[(, fuzzification, ), ·] 

>> PoS Tags are: 
[('(', 'PUNCT'), ('fuzzification', 'NOUN'), (')', 'PUNCT'), ('·', 'PUNCT')] 

>> Dependency Tags are: 
[('(', 'punct'), ('fuzzification', 'ROOT'), (')', 'punct'), ('·', 'punct')]

>> Bigrams: 
[[(, fuzzification], [fuzzification, )], [), ·]]

>> Trigrams: 
[[(, fuzzification, )], [fuzzification, ), ·]]

>> Noun Phrases are: 
[(fuzzification]

>> Named Entities are: 
[]


============================ Sentence 22 =============================

Evaluate rules in the rule base. 


>> Tokens are: 
[Evaluate, rules, rule, base, .] 

>> PoS Tags are: 
[('Evaluate', 'PROPN'), ('rules', 'NOUN'), ('rule', 'NOUN'), ('base', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Evaluate', 'ROOT'), ('rules', 'dobj'), ('rule', 'compound'), ('base', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Evaluate, rules], [rules, rule], [rule, base], [base, .]]

>> Trigrams: 
[[Evaluate, rules, rule], [rules, rule, base], [rule, base, .]]

>> Noun Phrases are: 
[Evaluate, rules, the rule base]

>> Named Entities are: 
[('Evaluate', 'PERSON')]


============================ Sentence 23 =============================

(Inference Engine) · 


>> Tokens are: 
[(, Inference, Engine, ), ·] 

>> PoS Tags are: 
[('(', 'PUNCT'), ('Inference', 'PROPN'), ('Engine', 'PROPN'), (')', 'PUNCT'), ('·', 'PUNCT')] 

>> Dependency Tags are: 
[('(', 'punct'), ('Inference', 'compound'), ('Engine', 'ROOT'), (')', 'punct'), ('·', 'punct')]

>> Bigrams: 
[[(, Inference], [Inference, Engine], [Engine, )], [), ·]]

>> Trigrams: 
[[(, Inference, Engine], [Inference, Engine, )], [Engine, ), ·]]

>> Noun Phrases are: 
[(Inference Engine]

>> Named Entities are: 
[('Inference Engine', 'ORG')]


============================ Sentence 24 =============================

Combine results from each rule. 


>> Tokens are: 
[Combine, results, rule, .] 

>> PoS Tags are: 
[('Combine', 'PROPN'), ('results', 'VERB'), ('rule', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Combine', 'nsubj'), ('results', 'ROOT'), ('rule', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Combine, results], [results, rule], [rule, .]]

>> Trigrams: 
[[Combine, results, rule], [results, rule, .]]

>> Noun Phrases are: 
[Combine, each rule]

>> Named Entities are: 
[('Combine', 'PERSON')]


============================ Sentence 25 =============================

(Inference Engine) · 


>> Tokens are: 
[(, Inference, Engine, ), ·] 

>> PoS Tags are: 
[('(', 'PUNCT'), ('Inference', 'PROPN'), ('Engine', 'PROPN'), (')', 'PUNCT'), ('·', 'PUNCT')] 

>> Dependency Tags are: 
[('(', 'punct'), ('Inference', 'compound'), ('Engine', 'ROOT'), (')', 'punct'), ('·', 'punct')]

>> Bigrams: 
[[(, Inference], [Inference, Engine], [Engine, )], [), ·]]

>> Trigrams: 
[[(, Inference, Engine], [Inference, Engine, )], [Engine, ), ·]]

>> Noun Phrases are: 
[(Inference Engine]

>> Named Entities are: 
[('Inference Engine', 'ORG')]


============================ Sentence 26 =============================

Convert output data into non-fuzzy values. 


>> Tokens are: 
[Convert, output, data, non, -, fuzzy, values, .] 

>> PoS Tags are: 
[('Convert', 'VERB'), ('output', 'NOUN'), ('data', 'NOUN'), ('non', 'ADJ'), ('-', 'ADJ'), ('fuzzy', 'ADJ'), ('values', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Convert', 'ROOT'), ('output', 'compound'), ('data', 'dobj'), ('non', 'amod'), ('-', 'amod'), ('fuzzy', 'amod'), ('values', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Convert, output], [output, data], [data, non], [non, -], [-, fuzzy], [fuzzy, values], [values, .]]

>> Trigrams: 
[[Convert, output, data], [output, data, non], [data, non, -], [non, -, fuzzy], [-, fuzzy, values], [fuzzy, values, .]]

>> Noun Phrases are: 
[output data, non-fuzzy values]

>> Named Entities are: 
[('Convert', 'PERSON')]


============================ Sentence 27 =============================

(defuzzification) Development Step 1 


>> Tokens are: 
[(, defuzzification, ), Development, Step, 1] 

>> PoS Tags are: 
[('(', 'PUNCT'), ('defuzzification', 'NOUN'), (')', 'PUNCT'), ('Development', 'NOUN'), ('Step', 'PROPN'), ('1', 'NUM')] 

>> Dependency Tags are: 
[('(', 'punct'), ('defuzzification', 'ROOT'), (')', 'punct'), ('Development', 'compound'), ('Step', 'appos'), ('1', 'nummod')]

>> Bigrams: 
[[(, defuzzification], [defuzzification, )], [), Development], [Development, Step], [Step, 1]]

>> Trigrams: 
[[(, defuzzification, )], [defuzzification, ), Development], [), Development, Step], [Development, Step, 1]]

>> Noun Phrases are: 
[(defuzzification, Development Step]

>> Named Entities are: 
[('1', 'CARDINAL')]


============================ Sentence 28 =============================

− Define linguistic variables and terms Linguistic variables are input and output variables in the form of simple words or sentences. 


>> Tokens are: 
[−, Define, linguistic, variables, terms, Linguistic, variables, input, output, variables, form, simple, words, sentences, .] 

>> PoS Tags are: 
[('−', 'PROPN'), ('Define', 'PROPN'), ('linguistic', 'ADJ'), ('variables', 'NOUN'), ('terms', 'NOUN'), ('Linguistic', 'ADJ'), ('variables', 'NOUN'), ('input', 'NOUN'), ('output', 'NOUN'), ('variables', 'NOUN'), ('form', 'NOUN'), ('simple', 'ADJ'), ('words', 'NOUN'), ('sentences', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('−', 'nmod'), ('Define', 'nmod'), ('linguistic', 'amod'), ('variables', 'nsubj'), ('terms', 'conj'), ('Linguistic', 'amod'), ('variables', 'nsubj'), ('input', 'nmod'), ('output', 'conj'), ('variables', 'attr'), ('form', 'pobj'), ('simple', 'amod'), ('words', 'pobj'), ('sentences', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[−, Define], [Define, linguistic], [linguistic, variables], [variables, terms], [terms, Linguistic], [Linguistic, variables], [variables, input], [input, output], [output, variables], [variables, form], [form, simple], [simple, words], [words, sentences], [sentences, .]]

>> Trigrams: 
[[−, Define, linguistic], [Define, linguistic, variables], [linguistic, variables, terms], [variables, terms, Linguistic], [terms, Linguistic, variables], [Linguistic, variables, input], [variables, input, output], [input, output, variables], [output, variables, form], [variables, form, simple], [form, simple, words], [simple, words, sentences], [words, sentences, .]]

>> Noun Phrases are: 
[− Define linguistic variables, terms, Linguistic variables, input and output variables, the form, simple words, sentences]

>> Named Entities are: 
[('− Define', 'PERSON')]


============================ Sentence 29 =============================

For room temperature, cold, warm, hot, etc., are linguistic terms. 


>> Tokens are: 
[room, temperature, ,, cold, ,, warm, ,, hot, ,, etc, ., ,, linguistic, terms, .] 

>> PoS Tags are: 
[('room', 'NOUN'), ('temperature', 'NOUN'), (',', 'PUNCT'), ('cold', 'ADJ'), (',', 'PUNCT'), ('warm', 'ADJ'), (',', 'PUNCT'), ('hot', 'ADJ'), (',', 'PUNCT'), ('etc', 'X'), ('.', 'X'), (',', 'PUNCT'), ('linguistic', 'ADJ'), ('terms', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('room', 'compound'), ('temperature', 'pobj'), (',', 'punct'), ('cold', 'amod'), (',', 'punct'), ('warm', 'conj'), (',', 'punct'), ('hot', 'conj'), (',', 'punct'), ('etc', 'conj'), ('.', 'appos'), (',', 'punct'), ('linguistic', 'amod'), ('terms', 'attr'), ('.', 'punct')]

>> Bigrams: 
[[room, temperature], [temperature, ,], [,, cold], [cold, ,], [,, warm], [warm, ,], [,, hot], [hot, ,], [,, etc], [etc, .], [., ,], [,, linguistic], [linguistic, terms], [terms, .]]

>> Trigrams: 
[[room, temperature, ,], [temperature, ,, cold], [,, cold, ,], [cold, ,, warm], [,, warm, ,], [warm, ,, hot], [,, hot, ,], [hot, ,, etc], [,, etc, .], [etc, ., ,], [., ,, linguistic], [,, linguistic, terms], [linguistic, terms, .]]

>> Noun Phrases are: 
[room temperature, linguistic terms]

>> Named Entities are: 
[]


============================ Sentence 30 =============================

Temperature (t) = {very-cold, cold, warm, very-warm, hot} Every member of this set is a linguistic term and it can cover some portion of overall temperature values. 


>> Tokens are: 
[Temperature, (, t, ), =, {, -, cold, ,, cold, ,, warm, ,, -, warm, ,, hot, }, member, set, linguistic, term, cover, portion, overall, temperature, values, .] 

>> PoS Tags are: 
[('Temperature', 'NOUN'), ('(', 'PUNCT'), ('t', 'NOUN'), (')', 'PUNCT'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('-', 'PUNCT'), ('cold', 'ADJ'), (',', 'PUNCT'), ('cold', 'ADJ'), (',', 'PUNCT'), ('warm', 'ADJ'), (',', 'PUNCT'), ('-', 'PUNCT'), ('warm', 'ADJ'), (',', 'PUNCT'), ('hot', 'ADJ'), ('}', 'PUNCT'), ('member', 'NOUN'), ('set', 'NOUN'), ('linguistic', 'ADJ'), ('term', 'NOUN'), ('cover', 'VERB'), ('portion', 'NOUN'), ('overall', 'ADJ'), ('temperature', 'NOUN'), ('values', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Temperature', 'nsubj'), ('(', 'punct'), ('t', 'appos'), (')', 'punct'), ('=', 'appos'), ('{', 'punct'), ('-', 'punct'), ('cold', 'amod'), (',', 'punct'), ('cold', 'amod'), (',', 'punct'), ('warm', 'amod'), (',', 'punct'), ('-', 'punct'), ('warm', 'amod'), (',', 'punct'), ('hot', 'amod'), ('}', 'punct'), ('member', 'appos'), ('set', 'pobj'), ('linguistic', 'amod'), ('term', 'attr'), ('cover', 'conj'), ('portion', 'dobj'), ('overall', 'amod'), ('temperature', 'compound'), ('values', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Temperature, (], [(, t], [t, )], [), =], [=, {], [{, -], [-, cold], [cold, ,], [,, cold], [cold, ,], [,, warm], [warm, ,], [,, -], [-, warm], [warm, ,], [,, hot], [hot, }], [}, member], [member, set], [set, linguistic], [linguistic, term], [term, cover], [cover, portion], [portion, overall], [overall, temperature], [temperature, values], [values, .]]

>> Trigrams: 
[[Temperature, (, t], [(, t, )], [t, ), =], [), =, {], [=, {, -], [{, -, cold], [-, cold, ,], [cold, ,, cold], [,, cold, ,], [cold, ,, warm], [,, warm, ,], [warm, ,, -], [,, -, warm], [-, warm, ,], [warm, ,, hot], [,, hot, }], [hot, }, member], [}, member, set], [member, set, linguistic], [set, linguistic, term], [linguistic, term, cover], [term, cover, portion], [cover, portion, overall], [portion, overall, temperature], [overall, temperature, values], [temperature, values, .]]

>> Noun Phrases are: 
[Temperature, t, Every member, this set, a linguistic term, it, some portion, overall temperature values]

>> Named Entities are: 
[]


============================ Sentence 31 =============================

Step 2 − Construct membership functions for them The membership functions of temperature variable are as shown −  Step3 − Construct knowledge base rules Create a matrix of room temperature values versus target temperature values that an air conditioning system is expected to provide. 


>> Tokens are: 
[Step, 2, −, Construct, membership, functions, membership, functions, temperature, variable, shown, −,  , Step3, −, Construct, knowledge, base, rules, Create, matrix, room, temperature, values, versus, target, temperature, values, air, conditioning, system, expected, provide, .] 

>> PoS Tags are: 
[('Step', 'NOUN'), ('2', 'NUM'), ('−', 'PROPN'), ('Construct', 'PROPN'), ('membership', 'NOUN'), ('functions', 'NOUN'), ('membership', 'NOUN'), ('functions', 'NOUN'), ('temperature', 'NOUN'), ('variable', 'NOUN'), ('shown', 'VERB'), ('−', 'PROPN'), (' ', 'SPACE'), ('Step3', 'NOUN'), ('−', 'PROPN'), ('Construct', 'PROPN'), ('knowledge', 'NOUN'), ('base', 'NOUN'), ('rules', 'NOUN'), ('Create', 'VERB'), ('matrix', 'NOUN'), ('room', 'NOUN'), ('temperature', 'NOUN'), ('values', 'NOUN'), ('versus', 'ADP'), ('target', 'NOUN'), ('temperature', 'NOUN'), ('values', 'NOUN'), ('air', 'NOUN'), ('conditioning', 'NOUN'), ('system', 'NOUN'), ('expected', 'VERB'), ('provide', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Step', 'nmod'), ('2', 'nummod'), ('−', 'compound'), ('Construct', 'compound'), ('membership', 'compound'), ('functions', 'nsubj'), ('membership', 'compound'), ('functions', 'nsubj'), ('temperature', 'compound'), ('variable', 'pobj'), ('shown', 'advcl'), ('−', 'compound'), (' ', 'compound'), ('Step3', 'compound'), ('−', 'compound'), ('Construct', 'compound'), ('knowledge', 'compound'), ('base', 'compound'), ('rules', 'nsubj'), ('Create', 'ccomp'), ('matrix', 'dobj'), ('room', 'compound'), ('temperature', 'compound'), ('values', 'pobj'), ('versus', 'prep'), ('target', 'compound'), ('temperature', 'compound'), ('values', 'pobj'), ('air', 'compound'), ('conditioning', 'compound'), ('system', 'nsubjpass'), ('expected', 'relcl'), ('provide', 'xcomp'), ('.', 'punct')]

>> Bigrams: 
[[Step, 2], [2, −], [−, Construct], [Construct, membership], [membership, functions], [functions, membership], [membership, functions], [functions, temperature], [temperature, variable], [variable, shown], [shown, −], [−,  ], [ , Step3], [Step3, −], [−, Construct], [Construct, knowledge], [knowledge, base], [base, rules], [rules, Create], [Create, matrix], [matrix, room], [room, temperature], [temperature, values], [values, versus], [versus, target], [target, temperature], [temperature, values], [values, air], [air, conditioning], [conditioning, system], [system, expected], [expected, provide], [provide, .]]

>> Trigrams: 
[[Step, 2, −], [2, −, Construct], [−, Construct, membership], [Construct, membership, functions], [membership, functions, membership], [functions, membership, functions], [membership, functions, temperature], [functions, temperature, variable], [temperature, variable, shown], [variable, shown, −], [shown, −,  ], [−,  , Step3], [ , Step3, −], [Step3, −, Construct], [−, Construct, knowledge], [Construct, knowledge, base], [knowledge, base, rules], [base, rules, Create], [rules, Create, matrix], [Create, matrix, room], [matrix, room, temperature], [room, temperature, values], [temperature, values, versus], [values, versus, target], [versus, target, temperature], [target, temperature, values], [temperature, values, air], [values, air, conditioning], [air, conditioning, system], [conditioning, system, expected], [system, expected, provide], [expected, provide, .]]

>> Noun Phrases are: 
[Step 2 − Construct membership functions, them, The membership functions, temperature variable, −  Step3 − Construct knowledge base rules, a matrix, room temperature values, target temperature values, an air conditioning system]

>> Named Entities are: 
[('2', 'CARDINAL'), ('Construct', 'ORG'), ('−', 'GPE'), ('− Construct', 'PERSON')]


============================ Sentence 32 =============================

	RoomTemp. 


>> Tokens are: 
[	, RoomTemp, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('RoomTemp', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('RoomTemp', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[	, RoomTemp], [RoomTemp, .]]

>> Trigrams: 
[[	, RoomTemp, .]]

>> Noun Phrases are: 
[	RoomTemp]

>> Named Entities are: 
[('RoomTemp', 'ORG')]


============================ Sentence 33 =============================

/Target 


>> Tokens are: 
[/Target] 

>> PoS Tags are: 
[('/Target', 'PUNCT')] 

>> Dependency Tags are: 
[('/Target', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 34 =============================

	Very_Cold 	Cold 	Warm 	Hot 	Very_Hot  	Very_Cold 	No_Change 	Heat 	Heat 	Heat 	Heat  	Cold 	Cool 	No_Change 	Heat 	Heat 	Heat  	Warm 	Cool 	Cool 	No_Change 	Heat 	Heat  	Hot 	Cool 	Cool 	Cool 	No_Change 	Heat  	Very_Hot 


>> Tokens are: 
[	, Very_Cold, 	, Cold, 	, Warm, 	, Hot, 	, Very_Hot,  	, Very_Cold, 	, No_Change, 	, Heat, 	, Heat, 	, Heat, 	, Heat,  	, Cold, 	, Cool, 	, No_Change, 	, Heat, 	, Heat, 	, Heat,  	, Warm, 	, Cool, 	, Cool, 	, No_Change, 	, Heat, 	, Heat,  	, Hot, 	, Cool, 	, Cool, 	, Cool, 	, No_Change, 	, Heat,  	, Very_Hot] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('Very_Cold', 'NOUN'), ('\t', 'SPACE'), ('Cold', 'PROPN'), ('\t', 'SPACE'), ('Warm', 'PROPN'), ('\t', 'SPACE'), ('Hot', 'PROPN'), ('\t', 'SPACE'), ('Very_Hot', 'PROPN'), (' \t', 'SPACE'), ('Very_Cold', 'NOUN'), ('\t', 'SPACE'), ('No_Change', 'NOUN'), ('\t', 'SPACE'), ('Heat', 'PROPN'), ('\t', 'SPACE'), ('Heat', 'PROPN'), ('\t', 'SPACE'), ('Heat', 'PROPN'), ('\t', 'SPACE'), ('Heat', 'PROPN'), (' \t', 'SPACE'), ('Cold', 'PROPN'), ('\t', 'SPACE'), ('Cool', 'PROPN'), ('\t', 'SPACE'), ('No_Change', 'NOUN'), ('\t', 'SPACE'), ('Heat', 'PROPN'), ('\t', 'SPACE'), ('Heat', 'PROPN'), ('\t', 'SPACE'), ('Heat', 'PROPN'), (' \t', 'SPACE'), ('Warm', 'PROPN'), ('\t', 'SPACE'), ('Cool', 'PROPN'), ('\t', 'SPACE'), ('Cool', 'PROPN'), ('\t', 'SPACE'), ('No_Change', 'NOUN'), ('\t', 'SPACE'), ('Heat', 'PROPN'), ('\t', 'SPACE'), ('Heat', 'PROPN'), (' \t', 'SPACE'), ('Hot', 'PROPN'), ('\t', 'SPACE'), ('Cool', 'PROPN'), ('\t', 'SPACE'), ('Cool', 'PROPN'), ('\t', 'SPACE'), ('Cool', 'PROPN'), ('\t', 'SPACE'), ('No_Change', 'NOUN'), ('\t', 'SPACE'), ('Heat', 'PROPN'), (' \t', 'SPACE'), ('Very_Hot', 'PROPN')] 

>> Dependency Tags are: 
[('\t', 'amod'), ('Very_Cold', 'ROOT'), ('\t', 'compound'), ('Cold', 'compound'), ('\t', 'compound'), ('Warm', 'compound'), ('\t', 'compound'), ('Hot', 'compound'), ('\t', 'compound'), ('Very_Hot', 'appos'), (' \t', 'compound'), ('Very_Cold', 'appos'), ('\t', 'compound'), ('No_Change', 'appos'), ('\t', 'compound'), ('Heat', 'compound'), ('\t', 'compound'), ('Heat', 'compound'), ('\t', 'compound'), ('Heat', 'compound'), ('\t', 'compound'), ('Heat', 'appos'), (' \t', 'compound'), ('Cold', 'compound'), ('\t', 'compound'), ('Cool', 'compound'), ('\t', 'compound'), ('No_Change', 'ccomp'), ('\t', 'compound'), ('Heat', 'compound'), ('\t', 'compound'), ('Heat', 'compound'), ('\t', 'compound'), ('Heat', 'compound'), (' \t', 'compound'), ('Warm', 'compound'), ('\t', 'compound'), ('Cool', 'compound'), ('\t', 'compound'), ('Cool', 'compound'), ('\t', 'compound'), ('No_Change', 'ccomp'), ('\t', 'compound'), ('Heat', 'compound'), ('\t', 'compound'), ('Heat', 'ccomp'), (' \t', 'compound'), ('Hot', 'compound'), ('\t', 'appos'), ('Cool', 'compound'), ('\t', 'compound'), ('Cool', 'compound'), ('\t', 'compound'), ('Cool', 'compound'), ('\t', 'compound'), ('No_Change', 'ccomp'), ('\t', 'compound'), ('Heat', 'appos'), (' \t', 'appos'), ('Very_Hot', 'punct')]

>> Bigrams: 
[[	, Very_Cold], [Very_Cold, 	], [	, Cold], [Cold, 	], [	, Warm], [Warm, 	], [	, Hot], [Hot, 	], [	, Very_Hot], [Very_Hot,  	], [ 	, Very_Cold], [Very_Cold, 	], [	, No_Change], [No_Change, 	], [	, Heat], [Heat, 	], [	, Heat], [Heat, 	], [	, Heat], [Heat, 	], [	, Heat], [Heat,  	], [ 	, Cold], [Cold, 	], [	, Cool], [Cool, 	], [	, No_Change], [No_Change, 	], [	, Heat], [Heat, 	], [	, Heat], [Heat, 	], [	, Heat], [Heat,  	], [ 	, Warm], [Warm, 	], [	, Cool], [Cool, 	], [	, Cool], [Cool, 	], [	, No_Change], [No_Change, 	], [	, Heat], [Heat, 	], [	, Heat], [Heat,  	], [ 	, Hot], [Hot, 	], [	, Cool], [Cool, 	], [	, Cool], [Cool, 	], [	, Cool], [Cool, 	], [	, No_Change], [No_Change, 	], [	, Heat], [Heat,  	], [ 	, Very_Hot]]

>> Trigrams: 
[[	, Very_Cold, 	], [Very_Cold, 	, Cold], [	, Cold, 	], [Cold, 	, Warm], [	, Warm, 	], [Warm, 	, Hot], [	, Hot, 	], [Hot, 	, Very_Hot], [	, Very_Hot,  	], [Very_Hot,  	, Very_Cold], [ 	, Very_Cold, 	], [Very_Cold, 	, No_Change], [	, No_Change, 	], [No_Change, 	, Heat], [	, Heat, 	], [Heat, 	, Heat], [	, Heat, 	], [Heat, 	, Heat], [	, Heat, 	], [Heat, 	, Heat], [	, Heat,  	], [Heat,  	, Cold], [ 	, Cold, 	], [Cold, 	, Cool], [	, Cool, 	], [Cool, 	, No_Change], [	, No_Change, 	], [No_Change, 	, Heat], [	, Heat, 	], [Heat, 	, Heat], [	, Heat, 	], [Heat, 	, Heat], [	, Heat,  	], [Heat,  	, Warm], [ 	, Warm, 	], [Warm, 	, Cool], [	, Cool, 	], [Cool, 	, Cool], [	, Cool, 	], [Cool, 	, No_Change], [	, No_Change, 	], [No_Change, 	, Heat], [	, Heat, 	], [Heat, 	, Heat], [	, Heat,  	], [Heat,  	, Hot], [ 	, Hot, 	], [Hot, 	, Cool], [	, Cool, 	], [Cool, 	, Cool], [	, Cool, 	], [Cool, 	, Cool], [	, Cool, 	], [Cool, 	, No_Change], [	, No_Change, 	], [No_Change, 	, Heat], [	, Heat,  	], [Heat,  	, Very_Hot]]

>> Noun Phrases are: 
[	Very_Cold, 	Cold 	Warm 	Hot 	Very_Hot,  	Very_Cold, 	No_Change, 	Heat 	Heat 	Heat 	Heat, 	Heat]

>> Named Entities are: 
[]


============================ Sentence 35 =============================

	Cool 	Cool 	Cool 	Cool 	No_Change   Build a set of rules into the knowledge base in the form of IF-THEN-ELSE structures. 


>> Tokens are: 
[	, Cool, 	, Cool, 	, Cool, 	, Cool, 	, No_Change,   , Build, set, rules, knowledge, base, form, -, -, structures, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('Cool', 'PROPN'), ('\t', 'SPACE'), ('Cool', 'PROPN'), ('\t', 'SPACE'), ('Cool', 'PROPN'), ('\t', 'SPACE'), ('Cool', 'PROPN'), ('\t', 'SPACE'), ('No_Change', 'NOUN'), ('  ', 'SPACE'), ('Build', 'PROPN'), ('set', 'NOUN'), ('rules', 'NOUN'), ('knowledge', 'NOUN'), ('base', 'NOUN'), ('form', 'NOUN'), ('-', 'PUNCT'), ('-', 'PUNCT'), ('structures', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('Cool', 'compound'), ('\t', 'compound'), ('Cool', 'compound'), ('\t', 'compound'), ('Cool', 'compound'), ('\t', 'compound'), ('Cool', 'compound'), ('\t', 'compound'), ('No_Change', 'ROOT'), ('  ', 'appos'), ('Build', 'dep'), ('set', 'appos'), ('rules', 'pobj'), ('knowledge', 'compound'), ('base', 'pobj'), ('form', 'pobj'), ('-', 'punct'), ('-', 'punct'), ('structures', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[	, Cool], [Cool, 	], [	, Cool], [Cool, 	], [	, Cool], [Cool, 	], [	, Cool], [Cool, 	], [	, No_Change], [No_Change,   ], [  , Build], [Build, set], [set, rules], [rules, knowledge], [knowledge, base], [base, form], [form, -], [-, -], [-, structures], [structures, .]]

>> Trigrams: 
[[	, Cool, 	], [Cool, 	, Cool], [	, Cool, 	], [Cool, 	, Cool], [	, Cool, 	], [Cool, 	, Cool], [	, Cool, 	], [Cool, 	, No_Change], [	, No_Change,   ], [No_Change,   , Build], [  , Build, set], [Build, set, rules], [set, rules, knowledge], [rules, knowledge, base], [knowledge, base, form], [base, form, -], [form, -, -], [-, -, structures], [-, structures, .]]

>> Noun Phrases are: 
[	Cool 	Cool 	Cool 	Cool 	No_Change, a set, rules, the knowledge base, the form, THEN-ELSE]

>> Named Entities are: 
[]


============================ Sentence 36 =============================

	Sr. 


>> Tokens are: 
[	, Sr, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('Sr', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('Sr', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[	, Sr], [Sr, .]]

>> Trigrams: 
[[	, Sr, .]]

>> Noun Phrases are: 
[	Sr]

>> Named Entities are: 
[]


============================ Sentence 37 =============================

No. 


>> Tokens are: 
[.] 

>> PoS Tags are: 
[('.', 'PUNCT')] 

>> Dependency Tags are: 
[('.', 'punct')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 38 =============================

	Condition 	Action  	1 	IF temperature=(Cold OR Very_Cold) AND target= 


>> Tokens are: 
[	, Condition, 	, Action,  	, 1, 	, temperature=(Cold, Very_Cold, ), target, =] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('Condition', 'PROPN'), ('\t', 'SPACE'), ('Action', 'PROPN'), (' \t', 'SPACE'), ('1', 'NUM'), ('\t', 'SPACE'), ('temperature=(Cold', 'PROPN'), ('Very_Cold', 'NOUN'), (')', 'PUNCT'), ('target', 'VERB'), ('=', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('Condition', 'compound'), ('\t', 'compound'), ('Action', 'compound'), (' \t', 'dep'), ('1', 'nummod'), ('\t', 'amod'), ('temperature=(Cold', 'pobj'), ('Very_Cold', 'conj'), (')', 'punct'), ('target', 'ROOT'), ('=', 'punct')]

>> Bigrams: 
[[	, Condition], [Condition, 	], [	, Action], [Action,  	], [ 	, 1], [1, 	], [	, temperature=(Cold], [temperature=(Cold, Very_Cold], [Very_Cold, )], [), target], [target, =]]

>> Trigrams: 
[[	, Condition, 	], [Condition, 	, Action], [	, Action,  	], [Action,  	, 1], [ 	, 1, 	], [1, 	, temperature=(Cold], [	, temperature=(Cold, Very_Cold], [temperature=(Cold, Very_Cold, )], [Very_Cold, ), target], [), target, =]]

>> Noun Phrases are: 
[temperature=(Cold, Very_Cold]

>> Named Entities are: 
[('1', 'CARDINAL')]


============================ Sentence 39 =============================

Warm THEN 	Heat  	2 


>> Tokens are: 
[Warm, 	, Heat,  	, 2] 

>> PoS Tags are: 
[('Warm', 'PROPN'), ('\t', 'SPACE'), ('Heat', 'PROPN'), (' \t', 'SPACE'), ('2', 'NUM')] 

>> Dependency Tags are: 
[('Warm', 'npadvmod'), ('\t', 'compound'), ('Heat', 'compound'), (' \t', 'ROOT'), ('2', 'nummod')]

>> Bigrams: 
[[Warm, 	], [	, Heat], [Heat,  	], [ 	, 2]]

>> Trigrams: 
[[Warm, 	, Heat], [	, Heat,  	], [Heat,  	, 2]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('2', 'CARDINAL')]


============================ Sentence 40 =============================

	IF temperature=(Hot OR Very_Hot) AND target= 


>> Tokens are: 
[	, temperature=(Hot, Very_Hot, ), target, =] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('temperature=(Hot', 'PROPN'), ('Very_Hot', 'PROPN'), (')', 'PUNCT'), ('target', 'VERB'), ('=', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('temperature=(Hot', 'pobj'), ('Very_Hot', 'conj'), (')', 'punct'), ('target', 'conj'), ('=', 'punct')]

>> Bigrams: 
[[	, temperature=(Hot], [temperature=(Hot, Very_Hot], [Very_Hot, )], [), target], [target, =]]

>> Trigrams: 
[[	, temperature=(Hot, Very_Hot], [temperature=(Hot, Very_Hot, )], [Very_Hot, ), target], [), target, =]]

>> Noun Phrases are: 
[IF, temperature=(Hot, Very_Hot]

>> Named Entities are: 
[]


============================ Sentence 41 =============================

Warm THEN 	Cool  	3 


>> Tokens are: 
[Warm, 	, Cool,  	, 3] 

>> PoS Tags are: 
[('Warm', 'PROPN'), ('\t', 'SPACE'), ('Cool', 'PROPN'), (' \t', 'SPACE'), ('3', 'NUM')] 

>> Dependency Tags are: 
[('Warm', 'amod'), ('\t', 'compound'), ('Cool', 'dobj'), (' \t', 'ROOT'), ('3', 'nummod')]

>> Bigrams: 
[[Warm, 	], [	, Cool], [Cool,  	], [ 	, 3]]

>> Trigrams: 
[[Warm, 	, Cool], [	, Cool,  	], [Cool,  	, 3]]

>> Noun Phrases are: 
[	Cool]

>> Named Entities are: 
[('3', 'CARDINAL')]


============================ Sentence 42 =============================

	IF (temperature=Warm) AND (target=Warm) 


>> Tokens are: 
[	, (, temperature, =, Warm, ), (, target, =, Warm, )] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('(', 'PUNCT'), ('temperature', 'NOUN'), ('=', 'PUNCT'), ('Warm', 'ADJ'), (')', 'PUNCT'), ('(', 'PUNCT'), ('target', 'NOUN'), ('=', 'PUNCT'), ('Warm', 'PROPN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'amod'), ('(', 'punct'), ('temperature', 'nsubj'), ('=', 'punct'), ('Warm', 'ROOT'), (')', 'punct'), ('(', 'punct'), ('target', 'dep'), ('=', 'punct'), ('Warm', 'conj'), (')', 'punct')]

>> Bigrams: 
[[	, (], [(, temperature], [temperature, =], [=, Warm], [Warm, )], [), (], [(, target], [target, =], [=, Warm], [Warm, )]]

>> Trigrams: 
[[	, (, temperature], [(, temperature, =], [temperature, =, Warm], [=, Warm, )], [Warm, ), (], [), (, target], [(, target, =], [target, =, Warm], [=, Warm, )]]

>> Noun Phrases are: 
[	IF (temperature, (target=Warm]

>> Named Entities are: 
[]


============================ Sentence 43 =============================

THEN 	No_Change   Step 4 


>> Tokens are: 
[	, No_Change,   , Step, 4] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('No_Change', 'VERB'), ('  ', 'SPACE'), ('Step', 'NOUN'), ('4', 'NUM')] 

>> Dependency Tags are: 
[('\t', 'nsubj'), ('No_Change', 'ROOT'), ('  ', 'dobj'), ('Step', 'npadvmod'), ('4', 'nummod')]

>> Bigrams: 
[[	, No_Change], [No_Change,   ], [  , Step], [Step, 4]]

>> Trigrams: 
[[	, No_Change,   ], [No_Change,   , Step], [  , Step, 4]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('4', 'CARDINAL')]


============================ Sentence 44 =============================

− Obtain fuzzy value 


>> Tokens are: 
[−, Obtain, fuzzy, value] 

>> PoS Tags are: 
[('−', 'NOUN'), ('Obtain', 'PROPN'), ('fuzzy', 'ADJ'), ('value', 'NOUN')] 

>> Dependency Tags are: 
[('−', 'compound'), ('Obtain', 'nmod'), ('fuzzy', 'amod'), ('value', 'ROOT')]

>> Bigrams: 
[[−, Obtain], [Obtain, fuzzy], [fuzzy, value]]

>> Trigrams: 
[[−, Obtain, fuzzy], [Obtain, fuzzy, value]]

>> Noun Phrases are: 
[− Obtain fuzzy value]

>> Named Entities are: 
[]


============================ Sentence 45 =============================

Fuzzy set operations perform evaluation of rules. 


>> Tokens are: 
[Fuzzy, set, operations, perform, evaluation, rules, .] 

>> PoS Tags are: 
[('Fuzzy', 'PROPN'), ('set', 'VERB'), ('operations', 'NOUN'), ('perform', 'VERB'), ('evaluation', 'NOUN'), ('rules', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Fuzzy', 'nsubj'), ('set', 'amod'), ('operations', 'nsubj'), ('perform', 'ROOT'), ('evaluation', 'dobj'), ('rules', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Fuzzy, set], [set, operations], [operations, perform], [perform, evaluation], [evaluation, rules], [rules, .]]

>> Trigrams: 
[[Fuzzy, set, operations], [set, operations, perform], [operations, perform, evaluation], [perform, evaluation, rules], [evaluation, rules, .]]

>> Noun Phrases are: 
[Fuzzy, evaluation, rules]

>> Named Entities are: 
[('Fuzzy', 'PERSON')]


============================ Sentence 46 =============================

The operations used for OR and AND are Max and Min respectively. 


>> Tokens are: 
[operations, Max, Min, respectively, .] 

>> PoS Tags are: 
[('operations', 'NOUN'), ('Max', 'PROPN'), ('Min', 'PROPN'), ('respectively', 'ADV'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('operations', 'nsubj'), ('Max', 'attr'), ('Min', 'conj'), ('respectively', 'advmod'), ('.', 'punct')]

>> Bigrams: 
[[operations, Max], [Max, Min], [Min, respectively], [respectively, .]]

>> Trigrams: 
[[operations, Max, Min], [Max, Min, respectively], [Min, respectively, .]]

>> Noun Phrases are: 
[The operations, Max, Min]

>> Named Entities are: 
[('Max', 'PERSON')]


============================ Sentence 47 =============================

Combine all results of evaluation to form a final result. 


>> Tokens are: 
[Combine, results, evaluation, form, final, result, .] 

>> PoS Tags are: 
[('Combine', 'PROPN'), ('results', 'NOUN'), ('evaluation', 'NOUN'), ('form', 'VERB'), ('final', 'ADJ'), ('result', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Combine', 'ROOT'), ('results', 'dobj'), ('evaluation', 'pobj'), ('form', 'advcl'), ('final', 'amod'), ('result', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Combine, results], [results, evaluation], [evaluation, form], [form, final], [final, result], [result, .]]

>> Trigrams: 
[[Combine, results, evaluation], [results, evaluation, form], [evaluation, form, final], [form, final, result], [final, result, .]]

>> Noun Phrases are: 
[Combine, all results, evaluation, a final result]

>> Named Entities are: 
[]


============================ Sentence 48 =============================

This result is a fuzzy value. 


>> Tokens are: 
[result, fuzzy, value, .] 

>> PoS Tags are: 
[('result', 'NOUN'), ('fuzzy', 'ADJ'), ('value', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('result', 'nsubj'), ('fuzzy', 'amod'), ('value', 'attr'), ('.', 'punct')]

>> Bigrams: 
[[result, fuzzy], [fuzzy, value], [value, .]]

>> Trigrams: 
[[result, fuzzy, value], [fuzzy, value, .]]

>> Noun Phrases are: 
[This result, a fuzzy value]

>> Named Entities are: 
[]


============================ Sentence 49 =============================

Step 5 − Perform defuzzification Defuzzification is then performed according to membership function for output variable. 


>> Tokens are: 
[Step, 5, −, Perform, defuzzification, Defuzzification, performed, according, membership, function, output, variable, .] 

>> PoS Tags are: 
[('Step', 'NOUN'), ('5', 'NUM'), ('−', 'NOUN'), ('Perform', 'NOUN'), ('defuzzification', 'NOUN'), ('Defuzzification', 'NOUN'), ('performed', 'VERB'), ('according', 'VERB'), ('membership', 'NOUN'), ('function', 'NOUN'), ('output', 'NOUN'), ('variable', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Step', 'nmod'), ('5', 'nummod'), ('−', 'compound'), ('Perform', 'compound'), ('defuzzification', 'compound'), ('Defuzzification', 'nsubjpass'), ('performed', 'ROOT'), ('according', 'prep'), ('membership', 'compound'), ('function', 'pobj'), ('output', 'compound'), ('variable', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Step, 5], [5, −], [−, Perform], [Perform, defuzzification], [defuzzification, Defuzzification], [Defuzzification, performed], [performed, according], [according, membership], [membership, function], [function, output], [output, variable], [variable, .]]

>> Trigrams: 
[[Step, 5, −], [5, −, Perform], [−, Perform, defuzzification], [Perform, defuzzification, Defuzzification], [defuzzification, Defuzzification, performed], [Defuzzification, performed, according], [performed, according, membership], [according, membership, function], [membership, function, output], [function, output, variable], [output, variable, .]]

>> Noun Phrases are: 
[Step 5 − Perform defuzzification Defuzzification, membership function, output variable]

>> Named Entities are: 
[('5', 'CARDINAL')]


============================ Sentence 50 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 51 =============================

Application Areas of Fuzzy Logic The key application areas of fuzzy logic are as given − Automotive Systems · Automatic Gearboxes · Four-Wheel Steering · Vehicle environment control Consumer Electronic Goods · Hi-Fi Systems · Photocopiers · 


>> Tokens are: 
[Application, Areas, Fuzzy, Logic, key, application, areas, fuzzy, logic, given, −, Automotive, Systems, ·, Automatic, Gearboxes, ·, -, Wheel, Steering, ·, Vehicle, environment, control, Consumer, Electronic, Goods, ·, Hi, -, Fi, Systems, ·, Photocopiers, ·] 

>> PoS Tags are: 
[('Application', 'PROPN'), ('Areas', 'PROPN'), ('Fuzzy', 'PROPN'), ('Logic', 'PROPN'), ('key', 'ADJ'), ('application', 'NOUN'), ('areas', 'NOUN'), ('fuzzy', 'ADJ'), ('logic', 'NOUN'), ('given', 'VERB'), ('−', 'PROPN'), ('Automotive', 'PROPN'), ('Systems', 'PROPN'), ('·', 'PUNCT'), ('Automatic', 'ADJ'), ('Gearboxes', 'NOUN'), ('·', 'PUNCT'), ('-', 'PUNCT'), ('Wheel', 'PROPN'), ('Steering', 'PROPN'), ('·', 'PUNCT'), ('Vehicle', 'PROPN'), ('environment', 'NOUN'), ('control', 'VERB'), ('Consumer', 'PROPN'), ('Electronic', 'PROPN'), ('Goods', 'PROPN'), ('·', 'PUNCT'), ('Hi', 'PROPN'), ('-', 'PUNCT'), ('Fi', 'PROPN'), ('Systems', 'PROPN'), ('·', 'PUNCT'), ('Photocopiers', 'PROPN'), ('·', 'PUNCT')] 

>> Dependency Tags are: 
[('Application', 'compound'), ('Areas', 'nsubj'), ('Fuzzy', 'compound'), ('Logic', 'pobj'), ('key', 'amod'), ('application', 'compound'), ('areas', 'appos'), ('fuzzy', 'amod'), ('logic', 'pobj'), ('given', 'advcl'), ('−', 'compound'), ('Automotive', 'compound'), ('Systems', 'dative'), ('·', 'punct'), ('Automatic', 'amod'), ('Gearboxes', 'appos'), ('·', 'punct'), ('-', 'punct'), ('Wheel', 'compound'), ('Steering', 'nmod'), ('·', 'punct'), ('Vehicle', 'compound'), ('environment', 'nsubj'), ('control', 'ccomp'), ('Consumer', 'compound'), ('Electronic', 'compound'), ('Goods', 'dobj'), ('·', 'punct'), ('Hi', 'compound'), ('-', 'punct'), ('Fi', 'compound'), ('Systems', 'nmod'), ('·', 'punct'), ('Photocopiers', 'appos'), ('·', 'punct')]

>> Bigrams: 
[[Application, Areas], [Areas, Fuzzy], [Fuzzy, Logic], [Logic, key], [key, application], [application, areas], [areas, fuzzy], [fuzzy, logic], [logic, given], [given, −], [−, Automotive], [Automotive, Systems], [Systems, ·], [·, Automatic], [Automatic, Gearboxes], [Gearboxes, ·], [·, -], [-, Wheel], [Wheel, Steering], [Steering, ·], [·, Vehicle], [Vehicle, environment], [environment, control], [control, Consumer], [Consumer, Electronic], [Electronic, Goods], [Goods, ·], [·, Hi], [Hi, -], [-, Fi], [Fi, Systems], [Systems, ·], [·, Photocopiers], [Photocopiers, ·]]

>> Trigrams: 
[[Application, Areas, Fuzzy], [Areas, Fuzzy, Logic], [Fuzzy, Logic, key], [Logic, key, application], [key, application, areas], [application, areas, fuzzy], [areas, fuzzy, logic], [fuzzy, logic, given], [logic, given, −], [given, −, Automotive], [−, Automotive, Systems], [Automotive, Systems, ·], [Systems, ·, Automatic], [·, Automatic, Gearboxes], [Automatic, Gearboxes, ·], [Gearboxes, ·, -], [·, -, Wheel], [-, Wheel, Steering], [Wheel, Steering, ·], [Steering, ·, Vehicle], [·, Vehicle, environment], [Vehicle, environment, control], [environment, control, Consumer], [control, Consumer, Electronic], [Consumer, Electronic, Goods], [Electronic, Goods, ·], [Goods, ·, Hi], [·, Hi, -], [Hi, -, Fi], [-, Fi, Systems], [Fi, Systems, ·], [Systems, ·, Photocopiers], [·, Photocopiers, ·]]

>> Noun Phrases are: 
[Application Areas, Fuzzy Logic, The key application areas, fuzzy logic, − Automotive Systems, · Automatic Gearboxes, · Vehicle environment, Consumer Electronic Goods, · Hi-Fi Systems · Photocopiers]

>> Named Entities are: 
[('− Automotive Systems', 'ORG'), ('Automatic Gearboxes', 'PERSON'), ('Four-Wheel Steering', 'ORG'), ('Vehicle', 'PERSON'), ('Consumer Electronic Goods', 'ORG')]


============================ Sentence 52 =============================

Still and Video Cameras · Television Domestic Goods · Microwave Ovens · Refrigerators · Toasters · Vacuum Cleaners · Washing Machines Environment Control · Air Conditioners/Dryers/Heaters · 


>> Tokens are: 
[Video, Cameras, ·, Television, Domestic, Goods, ·, Microwave, Ovens, ·, Refrigerators, ·, Toasters, ·, Vacuum, Cleaners, ·, Washing, Machines, Environment, Control, ·, Air, Conditioners, /, Dryers, /, Heaters, ·] 

>> PoS Tags are: 
[('Video', 'PROPN'), ('Cameras', 'PROPN'), ('·', 'PUNCT'), ('Television', 'PROPN'), ('Domestic', 'PROPN'), ('Goods', 'PROPN'), ('·', 'PUNCT'), ('Microwave', 'PROPN'), ('Ovens', 'NOUN'), ('·', 'PUNCT'), ('Refrigerators', 'NOUN'), ('·', 'PUNCT'), ('Toasters', 'PROPN'), ('·', 'PUNCT'), ('Vacuum', 'PROPN'), ('Cleaners', 'PROPN'), ('·', 'PUNCT'), ('Washing', 'PROPN'), ('Machines', 'PROPN'), ('Environment', 'PROPN'), ('Control', 'PROPN'), ('·', 'PUNCT'), ('Air', 'PROPN'), ('Conditioners', 'PROPN'), ('/', 'SYM'), ('Dryers', 'PROPN'), ('/', 'SYM'), ('Heaters', 'PROPN'), ('·', 'PUNCT')] 

>> Dependency Tags are: 
[('Video', 'compound'), ('Cameras', 'conj'), ('·', 'punct'), ('Television', 'compound'), ('Domestic', 'compound'), ('Goods', 'appos'), ('·', 'punct'), ('Microwave', 'compound'), ('Ovens', 'nmod'), ('·', 'punct'), ('Refrigerators', 'appos'), ('·', 'punct'), ('Toasters', 'ROOT'), ('·', 'punct'), ('Vacuum', 'compound'), ('Cleaners', 'appos'), ('·', 'punct'), ('Washing', 'compound'), ('Machines', 'compound'), ('Environment', 'compound'), ('Control', 'appos'), ('·', 'punct'), ('Air', 'compound'), ('Conditioners', 'nmod'), ('/', 'punct'), ('Dryers', 'nmod'), ('/', 'punct'), ('Heaters', 'nmod'), ('·', 'punct')]

>> Bigrams: 
[[Video, Cameras], [Cameras, ·], [·, Television], [Television, Domestic], [Domestic, Goods], [Goods, ·], [·, Microwave], [Microwave, Ovens], [Ovens, ·], [·, Refrigerators], [Refrigerators, ·], [·, Toasters], [Toasters, ·], [·, Vacuum], [Vacuum, Cleaners], [Cleaners, ·], [·, Washing], [Washing, Machines], [Machines, Environment], [Environment, Control], [Control, ·], [·, Air], [Air, Conditioners], [Conditioners, /], [/, Dryers], [Dryers, /], [/, Heaters], [Heaters, ·]]

>> Trigrams: 
[[Video, Cameras, ·], [Cameras, ·, Television], [·, Television, Domestic], [Television, Domestic, Goods], [Domestic, Goods, ·], [Goods, ·, Microwave], [·, Microwave, Ovens], [Microwave, Ovens, ·], [Ovens, ·, Refrigerators], [·, Refrigerators, ·], [Refrigerators, ·, Toasters], [·, Toasters, ·], [Toasters, ·, Vacuum], [·, Vacuum, Cleaners], [Vacuum, Cleaners, ·], [Cleaners, ·, Washing], [·, Washing, Machines], [Washing, Machines, Environment], [Machines, Environment, Control], [Environment, Control, ·], [Control, ·, Air], [·, Air, Conditioners], [Air, Conditioners, /], [Conditioners, /, Dryers], [/, Dryers, /], [Dryers, /, Heaters], [/, Heaters, ·]]

>> Noun Phrases are: 
[· Television Domestic Goods, · Refrigerators, Vacuum Cleaners, · Washing Machines Environment Control]

>> Named Entities are: 
[('Video Cameras', 'ORG'), ('Microwave Ovens', 'PERSON'), ('Vacuum Cleaners', 'PERSON'), ('Washing Machines', 'ORG'), ('Air Conditioners/Dryers/Heaters', 'ORG')]


============================ Sentence 53 =============================

Humidifiers Advantages of FLSs · Mathematical concepts within fuzzy reasoning are very simple. 


>> Tokens are: 
[Humidifiers, Advantages, FLSs, ·, Mathematical, concepts, fuzzy, reasoning, simple, .] 

>> PoS Tags are: 
[('Humidifiers', 'PROPN'), ('Advantages', 'PROPN'), ('FLSs', 'PROPN'), ('·', 'PUNCT'), ('Mathematical', 'PROPN'), ('concepts', 'NOUN'), ('fuzzy', 'ADJ'), ('reasoning', 'NOUN'), ('simple', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Humidifiers', 'compound'), ('Advantages', 'nsubj'), ('FLSs', 'pobj'), ('·', 'punct'), ('Mathematical', 'amod'), ('concepts', 'nsubj'), ('fuzzy', 'amod'), ('reasoning', 'pobj'), ('simple', 'acomp'), ('.', 'punct')]

>> Bigrams: 
[[Humidifiers, Advantages], [Advantages, FLSs], [FLSs, ·], [·, Mathematical], [Mathematical, concepts], [concepts, fuzzy], [fuzzy, reasoning], [reasoning, simple], [simple, .]]

>> Trigrams: 
[[Humidifiers, Advantages, FLSs], [Advantages, FLSs, ·], [FLSs, ·, Mathematical], [·, Mathematical, concepts], [Mathematical, concepts, fuzzy], [concepts, fuzzy, reasoning], [fuzzy, reasoning, simple], [reasoning, simple, .]]

>> Noun Phrases are: 
[Humidifiers Advantages, FLSs, · Mathematical concepts, fuzzy reasoning]

>> Named Entities are: 
[('Humidifiers Advantages', 'PERSON'), ('Mathematical', 'PERSON')]


============================ Sentence 54 =============================

· You can modify a FLS by just adding or deleting rules due to flexibility of fuzzy logic. · 


>> Tokens are: 
[·, modify, FLS, adding, deleting, rules, flexibility, fuzzy, logic, ., ·] 

>> PoS Tags are: 
[('·', 'PUNCT'), ('modify', 'VERB'), ('FLS', 'PROPN'), ('adding', 'VERB'), ('deleting', 'VERB'), ('rules', 'NOUN'), ('flexibility', 'NOUN'), ('fuzzy', 'ADJ'), ('logic', 'NOUN'), ('.', 'PUNCT'), ('·', 'PUNCT')] 

>> Dependency Tags are: 
[('·', 'punct'), ('modify', 'ROOT'), ('FLS', 'dobj'), ('adding', 'pcomp'), ('deleting', 'conj'), ('rules', 'dobj'), ('flexibility', 'pobj'), ('fuzzy', 'amod'), ('logic', 'pobj'), ('.', 'punct'), ('·', 'punct')]

>> Bigrams: 
[[·, modify], [modify, FLS], [FLS, adding], [adding, deleting], [deleting, rules], [rules, flexibility], [flexibility, fuzzy], [fuzzy, logic], [logic, .], [., ·]]

>> Trigrams: 
[[·, modify, FLS], [modify, FLS, adding], [FLS, adding, deleting], [adding, deleting, rules], [deleting, rules, flexibility], [rules, flexibility, fuzzy], [flexibility, fuzzy, logic], [fuzzy, logic, .], [logic, ., ·]]

>> Noun Phrases are: 
[You, a FLS, rules, flexibility, fuzzy logic]

>> Named Entities are: 
[('FLS', 'ORG')]


============================ Sentence 55 =============================

Fuzzy logic Systems can take imprecise, distorted, noisy input information. 


>> Tokens are: 
[Fuzzy, logic, Systems, imprecise, ,, distorted, ,, noisy, input, information, .] 

>> PoS Tags are: 
[('Fuzzy', 'ADJ'), ('logic', 'NOUN'), ('Systems', 'PROPN'), ('imprecise', 'NOUN'), (',', 'PUNCT'), ('distorted', 'VERB'), (',', 'PUNCT'), ('noisy', 'ADJ'), ('input', 'NOUN'), ('information', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Fuzzy', 'amod'), ('logic', 'compound'), ('Systems', 'nsubj'), ('imprecise', 'dobj'), (',', 'punct'), ('distorted', 'amod'), (',', 'punct'), ('noisy', 'amod'), ('input', 'compound'), ('information', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Fuzzy, logic], [logic, Systems], [Systems, imprecise], [imprecise, ,], [,, distorted], [distorted, ,], [,, noisy], [noisy, input], [input, information], [information, .]]

>> Trigrams: 
[[Fuzzy, logic, Systems], [logic, Systems, imprecise], [Systems, imprecise, ,], [imprecise, ,, distorted], [,, distorted, ,], [distorted, ,, noisy], [,, noisy, input], [noisy, input, information], [input, information, .]]

>> Noun Phrases are: 
[Fuzzy logic Systems, imprecise, distorted, noisy input information]

>> Named Entities are: 
[('Fuzzy', 'PERSON')]


============================ Sentence 56 =============================

· FLSs are easy to construct and understand. 


>> Tokens are: 
[·, FLSs, easy, construct, understand, .] 

>> PoS Tags are: 
[('·', 'PUNCT'), ('FLSs', 'NOUN'), ('easy', 'ADJ'), ('construct', 'VERB'), ('understand', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('·', 'punct'), ('FLSs', 'nsubj'), ('easy', 'acomp'), ('construct', 'xcomp'), ('understand', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[·, FLSs], [FLSs, easy], [easy, construct], [construct, understand], [understand, .]]

>> Trigrams: 
[[·, FLSs, easy], [FLSs, easy, construct], [easy, construct, understand], [construct, understand, .]]

>> Noun Phrases are: 
[FLSs]

>> Named Entities are: 
[]


============================ Sentence 57 =============================

· 


>> Tokens are: 
[·] 

>> PoS Tags are: 
[('·', 'PUNCT')] 

>> Dependency Tags are: 
[('·', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 58 =============================

Fuzzy logic is a solution to complex problems in all fields of life, including medicine, as it resembles human reasoning and decision making. 


>> Tokens are: 
[Fuzzy, logic, solution, complex, problems, fields, life, ,, including, medicine, ,, resembles, human, reasoning, decision, making, .] 

>> PoS Tags are: 
[('Fuzzy', 'ADJ'), ('logic', 'NOUN'), ('solution', 'NOUN'), ('complex', 'ADJ'), ('problems', 'NOUN'), ('fields', 'NOUN'), ('life', 'NOUN'), (',', 'PUNCT'), ('including', 'VERB'), ('medicine', 'NOUN'), (',', 'PUNCT'), ('resembles', 'VERB'), ('human', 'ADJ'), ('reasoning', 'NOUN'), ('decision', 'NOUN'), ('making', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Fuzzy', 'amod'), ('logic', 'nsubj'), ('solution', 'attr'), ('complex', 'amod'), ('problems', 'pobj'), ('fields', 'pobj'), ('life', 'pobj'), (',', 'punct'), ('including', 'prep'), ('medicine', 'pobj'), (',', 'punct'), ('resembles', 'advcl'), ('human', 'amod'), ('reasoning', 'dobj'), ('decision', 'compound'), ('making', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[Fuzzy, logic], [logic, solution], [solution, complex], [complex, problems], [problems, fields], [fields, life], [life, ,], [,, including], [including, medicine], [medicine, ,], [,, resembles], [resembles, human], [human, reasoning], [reasoning, decision], [decision, making], [making, .]]

>> Trigrams: 
[[Fuzzy, logic, solution], [logic, solution, complex], [solution, complex, problems], [complex, problems, fields], [problems, fields, life], [fields, life, ,], [life, ,, including], [,, including, medicine], [including, medicine, ,], [medicine, ,, resembles], [,, resembles, human], [resembles, human, reasoning], [human, reasoning, decision], [reasoning, decision, making], [decision, making, .]]

>> Noun Phrases are: 
[Fuzzy logic, a solution, complex problems, all fields, life, medicine, it, human reasoning, decision making]

>> Named Entities are: 
[('Fuzzy', 'PERSON')]


============================ Sentence 59 =============================

Disadvantages of FLSs · There is no systematic approach to fuzzy system designing. 


>> Tokens are: 
[Disadvantages, FLSs, ·, systematic, approach, fuzzy, system, designing, .] 

>> PoS Tags are: 
[('Disadvantages', 'NOUN'), ('FLSs', 'PROPN'), ('·', 'PUNCT'), ('systematic', 'ADJ'), ('approach', 'NOUN'), ('fuzzy', 'ADJ'), ('system', 'NOUN'), ('designing', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Disadvantages', 'nsubj'), ('FLSs', 'pobj'), ('·', 'punct'), ('systematic', 'amod'), ('approach', 'attr'), ('fuzzy', 'amod'), ('system', 'compound'), ('designing', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Disadvantages, FLSs], [FLSs, ·], [·, systematic], [systematic, approach], [approach, fuzzy], [fuzzy, system], [system, designing], [designing, .]]

>> Trigrams: 
[[Disadvantages, FLSs, ·], [FLSs, ·, systematic], [·, systematic, approach], [systematic, approach, fuzzy], [approach, fuzzy, system], [fuzzy, system, designing], [system, designing, .]]

>> Noun Phrases are: 
[Disadvantages, FLSs, no systematic approach, fuzzy system designing]

>> Named Entities are: 
[]


============================ Sentence 60 =============================

· They are understandable only when simple. 


>> Tokens are: 
[·, understandable, simple, .] 

>> PoS Tags are: 
[('·', 'PUNCT'), ('understandable', 'ADJ'), ('simple', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('·', 'punct'), ('understandable', 'acomp'), ('simple', 'advcl'), ('.', 'punct')]

>> Bigrams: 
[[·, understandable], [understandable, simple], [simple, .]]

>> Trigrams: 
[[·, understandable, simple], [understandable, simple, .]]

>> Noun Phrases are: 
[They]

>> Named Entities are: 
[]


============================ Sentence 61 =============================

· They are suitable for the problems which do not need high accuracy. 


>> Tokens are: 
[·, suitable, problems, need, high, accuracy, .] 

>> PoS Tags are: 
[('·', 'PUNCT'), ('suitable', 'ADJ'), ('problems', 'NOUN'), ('need', 'VERB'), ('high', 'ADJ'), ('accuracy', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('·', 'punct'), ('suitable', 'acomp'), ('problems', 'pobj'), ('need', 'relcl'), ('high', 'amod'), ('accuracy', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[·, suitable], [suitable, problems], [problems, need], [need, high], [high, accuracy], [accuracy, .]]

>> Trigrams: 
[[·, suitable, problems], [suitable, problems, need], [problems, need, high], [need, high, accuracy], [high, accuracy, .]]

>> Noun Phrases are: 
[They, the problems, high accuracy]

>> Named Entities are: 
[]
