				 *** Text Processing using Spacy *** 


============================ Sentence 1 =============================

PowerPoint Presentation  Unit – 3 Parsing Theory (II) dixita.kagathara@darshan.ac.in +91 - 97277 47317 (CE Department) 


>> Tokens are: 
[PowerPoint, Presentation,  , Unit, –, 3, Parsing, Theory, (, II, ), dixita.kagathara@darshan.ac.in, +91, -, 97277, 47317, (, CE, Department, )] 

>> PoS Tags are: 
[('PowerPoint', 'PROPN'), ('Presentation', 'PROPN'), (' ', 'SPACE'), ('Unit', 'PROPN'), ('–', 'PUNCT'), ('3', 'NUM'), ('Parsing', 'PROPN'), ('Theory', 'PROPN'), ('(', 'PUNCT'), ('II', 'PROPN'), (')', 'PUNCT'), ('dixita.kagathara@darshan.ac.in', 'VERB'), ('+91', 'NOUN'), ('-', 'PUNCT'), ('97277', 'NUM'), ('47317', 'NUM'), ('(', 'PUNCT'), ('CE', 'PROPN'), ('Department', 'PROPN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('PowerPoint', 'compound'), ('Presentation', 'ROOT'), (' ', 'compound'), ('Unit', 'appos'), ('–', 'punct'), ('3', 'nummod'), ('Parsing', 'compound'), ('Theory', 'appos'), ('(', 'punct'), ('II', 'appos'), (')', 'punct'), ('dixita.kagathara@darshan.ac.in', 'appos'), ('+91', 'appos'), ('-', 'punct'), ('97277', 'dobj'), ('47317', 'nummod'), ('(', 'punct'), ('CE', 'compound'), ('Department', 'appos'), (')', 'punct')]

>> Bigrams: 
[[PowerPoint, Presentation], [Presentation,  ], [ , Unit], [Unit, –], [–, 3], [3, Parsing], [Parsing, Theory], [Theory, (], [(, II], [II, )], [), dixita.kagathara@darshan.ac.in], [dixita.kagathara@darshan.ac.in, +91], [+91, -], [-, 97277], [97277, 47317], [47317, (], [(, CE], [CE, Department], [Department, )]]

>> Trigrams: 
[[PowerPoint, Presentation,  ], [Presentation,  , Unit], [ , Unit, –], [Unit, –, 3], [–, 3, Parsing], [3, Parsing, Theory], [Parsing, Theory, (], [Theory, (, II], [(, II, )], [II, ), dixita.kagathara@darshan.ac.in], [), dixita.kagathara@darshan.ac.in, +91], [dixita.kagathara@darshan.ac.in, +91, -], [+91, -, 97277], [-, 97277, 47317], [97277, 47317, (], [47317, (, CE], [(, CE, Department], [CE, Department, )]]

>> Noun Phrases are: 
[PowerPoint Presentation,  Unit, 3 Parsing Theory, II, +91, (CE Department]

>> Named Entities are: 
[('CE Department)', 'ORG')]


============================ Sentence 2 =============================

Computer Engineering Department Prof. Dixita B. Kagathara Compiler Design (CD) GTU # 2170701   Darshan Institute of Engineering & Technology, Rajkot     Looping Topics to be covered   


>> Tokens are: 
[Computer, Engineering, Department, Prof., Dixita, B., Kagathara, Compiler, Design, (, CD, ), GTU, #, 2170701,   , Darshan, Institute, Engineering, &, Technology, ,, Rajkot,    , , Looping, Topics, covered,  ] 

>> PoS Tags are: 
[('Computer', 'PROPN'), ('Engineering', 'PROPN'), ('Department', 'PROPN'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B.', 'PROPN'), ('Kagathara', 'PROPN'), ('Compiler', 'PROPN'), ('Design', 'PROPN'), ('(', 'PUNCT'), ('CD', 'PROPN'), (')', 'PUNCT'), ('GTU', 'NOUN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('  ', 'SPACE'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('Engineering', 'PROPN'), ('&', 'CCONJ'), ('Technology', 'PROPN'), (',', 'PUNCT'), ('Rajkot', 'PROPN'), ('   ', 'SPACE'), ('\uf050', 'PROPN'), ('Looping', 'VERB'), ('Topics', 'PROPN'), ('covered', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Computer', 'compound'), ('Engineering', 'compound'), ('Department', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B.', 'compound'), ('Kagathara', 'compound'), ('Compiler', 'compound'), ('Design', 'ROOT'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('GTU', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('  ', 'appos'), ('Darshan', 'compound'), ('Institute', 'appos'), ('Engineering', 'pobj'), ('&', 'cc'), ('Technology', 'conj'), (',', 'punct'), ('Rajkot', 'appos'), ('   ', 'appos'), ('\uf050', 'appos'), ('Looping', 'advcl'), ('Topics', 'dobj'), ('covered', 'ccomp'), (' ', 'punct')]

>> Bigrams: 
[[Computer, Engineering], [Engineering, Department], [Department, Prof.], [Prof., Dixita], [Dixita, B.], [B., Kagathara], [Kagathara, Compiler], [Compiler, Design], [Design, (], [(, CD], [CD, )], [), GTU], [GTU, #], [#, 2170701], [2170701,   ], [  , Darshan], [Darshan, Institute], [Institute, Engineering], [Engineering, &], [&, Technology], [Technology, ,], [,, Rajkot], [Rajkot,    ], [   , ], [, Looping], [Looping, Topics], [Topics, covered], [covered,  ]]

>> Trigrams: 
[[Computer, Engineering, Department], [Engineering, Department, Prof.], [Department, Prof., Dixita], [Prof., Dixita, B.], [Dixita, B., Kagathara], [B., Kagathara, Compiler], [Kagathara, Compiler, Design], [Compiler, Design, (], [Design, (, CD], [(, CD, )], [CD, ), GTU], [), GTU, #], [GTU, #, 2170701], [#, 2170701,   ], [2170701,   , Darshan], [  , Darshan, Institute], [Darshan, Institute, Engineering], [Institute, Engineering, &], [Engineering, &, Technology], [&, Technology, ,], [Technology, ,, Rajkot], [,, Rajkot,    ], [Rajkot,    , ], [   , , Looping], [, Looping, Topics], [Looping, Topics, covered], [Topics, covered,  ]]

>> Noun Phrases are: 
[Computer Engineering Department Prof. Dixita B. Kagathara Compiler Design, CD, GTU, Darshan Institute, Engineering, Technology, Rajkot, , Topics]

>> Named Entities are: 
[('Dixita B.', 'PERSON'), ('Darshan Institute of Engineering & Technology', 'ORG'), ('Looping Topics', 'ORG')]


============================ Sentence 3 =============================

Syntax directed definitions Synthesized attributes Inherited attribute Dependency graph Evaluation order Construction of syntax tree   


>> Tokens are: 
[Syntax, directed, definitions, Synthesized, attributes, Inherited, attribute, Dependency, graph, Evaluation, order, Construction, syntax, tree,  ] 

>> PoS Tags are: 
[('Syntax', 'PROPN'), ('directed', 'VERB'), ('definitions', 'NOUN'), ('Synthesized', 'VERB'), ('attributes', 'NOUN'), ('Inherited', 'PROPN'), ('attribute', 'VERB'), ('Dependency', 'PROPN'), ('graph', 'NOUN'), ('Evaluation', 'NOUN'), ('order', 'NOUN'), ('Construction', 'NOUN'), ('syntax', 'NOUN'), ('tree', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Syntax', 'nsubj'), ('directed', 'amod'), ('definitions', 'nsubj'), ('Synthesized', 'amod'), ('attributes', 'ROOT'), ('Inherited', 'amod'), ('attribute', 'relcl'), ('Dependency', 'compound'), ('graph', 'compound'), ('Evaluation', 'compound'), ('order', 'conj'), ('Construction', 'appos'), ('syntax', 'compound'), ('tree', 'pobj'), (' ', 'punct')]

>> Bigrams: 
[[Syntax, directed], [directed, definitions], [definitions, Synthesized], [Synthesized, attributes], [attributes, Inherited], [Inherited, attribute], [attribute, Dependency], [Dependency, graph], [graph, Evaluation], [Evaluation, order], [order, Construction], [Construction, syntax], [syntax, tree], [tree,  ]]

>> Trigrams: 
[[Syntax, directed, definitions], [directed, definitions, Synthesized], [definitions, Synthesized, attributes], [Synthesized, attributes, Inherited], [attributes, Inherited, attribute], [Inherited, attribute, Dependency], [attribute, Dependency, graph], [Dependency, graph, Evaluation], [graph, Evaluation, order], [Evaluation, order, Construction], [order, Construction, syntax], [Construction, syntax, tree], [syntax, tree,  ]]

>> Noun Phrases are: 
[Syntax, Dependency graph Evaluation order, Construction, syntax tree]

>> Named Entities are: 
[('Syntax', 'ORG'), ('Synthesized', 'PERSON')]


============================ Sentence 4 =============================

Bottom up evaluation of S-attributed definitions L-Attributed definitions Translation scheme              Syntax directed definitions 


>> Tokens are: 
[evaluation, S, -, attributed, definitions, L, -, Attributed, definitions, Translation, scheme,              , Syntax, directed, definitions] 

>> PoS Tags are: 
[('evaluation', 'NOUN'), ('S', 'PROPN'), ('-', 'PUNCT'), ('attributed', 'VERB'), ('definitions', 'NOUN'), ('L', 'NOUN'), ('-', 'PUNCT'), ('Attributed', 'VERB'), ('definitions', 'NOUN'), ('Translation', 'NOUN'), ('scheme', 'NOUN'), ('             ', 'SPACE'), ('Syntax', 'PROPN'), ('directed', 'VERB'), ('definitions', 'NOUN')] 

>> Dependency Tags are: 
[('evaluation', 'nsubj'), ('S', 'npadvmod'), ('-', 'punct'), ('attributed', 'amod'), ('definitions', 'pobj'), ('L', 'npadvmod'), ('-', 'punct'), ('Attributed', 'amod'), ('definitions', 'compound'), ('Translation', 'compound'), ('scheme', 'ROOT'), ('             ', 'compound'), ('Syntax', 'nsubj'), ('directed', 'ccomp'), ('definitions', 'dobj')]

>> Bigrams: 
[[evaluation, S], [S, -], [-, attributed], [attributed, definitions], [definitions, L], [L, -], [-, Attributed], [Attributed, definitions], [definitions, Translation], [Translation, scheme], [scheme,              ], [             , Syntax], [Syntax, directed], [directed, definitions]]

>> Trigrams: 
[[evaluation, S, -], [S, -, attributed], [-, attributed, definitions], [attributed, definitions, L], [definitions, L, -], [L, -, Attributed], [-, Attributed, definitions], [Attributed, definitions, Translation], [definitions, Translation, scheme], [Translation, scheme,              ], [scheme,              , Syntax], [             , Syntax, directed], [Syntax, directed, definitions]]

>> Noun Phrases are: 
[Bottom up evaluation, S-attributed definitions,              Syntax, definitions]

>> Named Entities are: 
[('L-Attributed', 'GPE'), ('Syntax', 'ORG')]


============================ Sentence 5 =============================

       Syntax directed definitions Syntax directed definition is a generalization of context free grammar in which each grammar symbol has an associated set of attributes. 


>> Tokens are: 
[       , Syntax, directed, definitions, Syntax, directed, definition, generalization, context, free, grammar, grammar, symbol, associated, set, attributes, .] 

>> PoS Tags are: 
[('       ', 'SPACE'), ('Syntax', 'PROPN'), ('directed', 'VERB'), ('definitions', 'NOUN'), ('Syntax', 'PROPN'), ('directed', 'VERB'), ('definition', 'NOUN'), ('generalization', 'NOUN'), ('context', 'NOUN'), ('free', 'ADJ'), ('grammar', 'NOUN'), ('grammar', 'NOUN'), ('symbol', 'NOUN'), ('associated', 'ADJ'), ('set', 'NOUN'), ('attributes', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('       ', 'dep'), ('Syntax', 'nsubj'), ('directed', 'csubj'), ('definitions', 'dobj'), ('Syntax', 'nsubj'), ('directed', 'relcl'), ('definition', 'dobj'), ('generalization', 'attr'), ('context', 'npadvmod'), ('free', 'amod'), ('grammar', 'pobj'), ('grammar', 'compound'), ('symbol', 'nsubj'), ('associated', 'amod'), ('set', 'dobj'), ('attributes', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[       , Syntax], [Syntax, directed], [directed, definitions], [definitions, Syntax], [Syntax, directed], [directed, definition], [definition, generalization], [generalization, context], [context, free], [free, grammar], [grammar, grammar], [grammar, symbol], [symbol, associated], [associated, set], [set, attributes], [attributes, .]]

>> Trigrams: 
[[       , Syntax, directed], [Syntax, directed, definitions], [directed, definitions, Syntax], [definitions, Syntax, directed], [Syntax, directed, definition], [directed, definition, generalization], [definition, generalization, context], [generalization, context, free], [context, free, grammar], [free, grammar, grammar], [grammar, grammar, symbol], [grammar, symbol, associated], [symbol, associated, set], [associated, set, attributes], [set, attributes, .]]

>> Noun Phrases are: 
[Syntax, definitions, Syntax, definition, a generalization, context free grammar, each grammar symbol, an associated set, attributes]

>> Named Entities are: 
[('Syntax', 'ORG'), ('Syntax', 'ORG')]


============================ Sentence 6 =============================

The attributes can be a number, type, memory location, return type etc…. 


>> Tokens are: 
[attributes, number, ,, type, ,, memory, location, ,, return, type, etc, …, .] 

>> PoS Tags are: 
[('attributes', 'NOUN'), ('number', 'NOUN'), (',', 'PUNCT'), ('type', 'NOUN'), (',', 'PUNCT'), ('memory', 'NOUN'), ('location', 'NOUN'), (',', 'PUNCT'), ('return', 'NOUN'), ('type', 'NOUN'), ('etc', 'X'), ('…', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('attributes', 'nsubj'), ('number', 'attr'), (',', 'punct'), ('type', 'conj'), (',', 'punct'), ('memory', 'compound'), ('location', 'conj'), (',', 'punct'), ('return', 'compound'), ('type', 'compound'), ('etc', 'appos'), ('…', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[attributes, number], [number, ,], [,, type], [type, ,], [,, memory], [memory, location], [location, ,], [,, return], [return, type], [type, etc], [etc, …], […, .]]

>> Trigrams: 
[[attributes, number, ,], [number, ,, type], [,, type, ,], [type, ,, memory], [,, memory, location], [memory, location, ,], [location, ,, return], [,, return, type], [return, type, etc], [type, etc, …], [etc, …, .]]

>> Noun Phrases are: 
[The attributes, a number, type, memory location]

>> Named Entities are: 
[]


============================ Sentence 7 =============================

Types of attributes are:  Synthesized attribute  Inherited attribute  E. Value Type Memory location Return Type     


>> Tokens are: 
[Types, attributes, :,  , Synthesized, attribute,  , Inherited, attribute,  , E., Value, Type, Memory, location, Return, Type,    ] 

>> PoS Tags are: 
[('Types', 'NOUN'), ('attributes', 'NOUN'), (':', 'PUNCT'), (' ', 'SPACE'), ('Synthesized', 'VERB'), ('attribute', 'NOUN'), (' ', 'SPACE'), ('Inherited', 'VERB'), ('attribute', 'NOUN'), (' ', 'SPACE'), ('E.', 'PROPN'), ('Value', 'PROPN'), ('Type', 'PROPN'), ('Memory', 'PROPN'), ('location', 'NOUN'), ('Return', 'PROPN'), ('Type', 'PROPN'), ('   ', 'SPACE')] 

>> Dependency Tags are: 
[('Types', 'nsubj'), ('attributes', 'pobj'), (':', 'punct'), (' ', 'attr'), ('Synthesized', 'amod'), ('attribute', 'nsubj'), (' ', 'nmod'), ('Inherited', 'amod'), ('attribute', 'ROOT'), (' ', 'compound'), ('E.', 'compound'), ('Value', 'compound'), ('Type', 'compound'), ('Memory', 'compound'), ('location', 'dobj'), ('Return', 'compound'), ('Type', 'appos'), ('   ', 'punct')]

>> Bigrams: 
[[Types, attributes], [attributes, :], [:,  ], [ , Synthesized], [Synthesized, attribute], [attribute,  ], [ , Inherited], [Inherited, attribute], [attribute,  ], [ , E.], [E., Value], [Value, Type], [Type, Memory], [Memory, location], [location, Return], [Return, Type], [Type,    ]]

>> Trigrams: 
[[Types, attributes, :], [attributes, :,  ], [:,  , Synthesized], [ , Synthesized, attribute], [Synthesized, attribute,  ], [attribute,  , Inherited], [ , Inherited, attribute], [Inherited, attribute,  ], [attribute,  , E.], [ , E., Value], [E., Value, Type], [Value, Type, Memory], [Type, Memory, location], [Memory, location, Return], [location, Return, Type], [Return, Type,    ]]

>> Noun Phrases are: 
[Types, attributes,  E. Value Type Memory location, Return Type]

>> Named Entities are: 
[]


============================ Sentence 8 =============================

Prof. 


>> Tokens are: 
[Prof.] 

>> PoS Tags are: 
[('Prof.', 'PROPN')] 

>> Dependency Tags are: 
[('Prof.', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Prof.]

>> Named Entities are: 
[]


============================ Sentence 9 =============================

Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (II) ‹#›  Synthesized attributes  Value of synthesized attribute at a node can be computed from the value of attributes at the children of that node in the parse tree. 


>> Tokens are: 
[Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, II, ), ‹#›,  , Synthesized, attributes,  , Value, synthesized, attribute, node, computed, value, attributes, children, node, parse, tree, .] 

>> PoS Tags are: 
[('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'PROPN'), ('(', 'PUNCT'), ('II', 'PROPN'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE'), ('Synthesized', 'VERB'), ('attributes', 'VERB'), (' ', 'SPACE'), ('Value', 'PROPN'), ('synthesized', 'VERB'), ('attribute', 'NOUN'), ('node', 'NOUN'), ('computed', 'VERB'), ('value', 'NOUN'), ('attributes', 'NOUN'), ('children', 'NOUN'), ('node', 'NOUN'), ('parse', 'NOUN'), ('tree', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'npadvmod'), ('#', 'appos'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), ('II', 'appos'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'nsubj'), ('Synthesized', 'nsubj'), ('attributes', 'nsubjpass'), (' ', 'compound'), ('Value', 'dobj'), ('synthesized', 'amod'), ('attribute', 'pobj'), ('node', 'pobj'), ('computed', 'ROOT'), ('value', 'pobj'), ('attributes', 'pobj'), ('children', 'pobj'), ('node', 'pobj'), ('parse', 'compound'), ('tree', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, II], [II, )], [), ‹#›], [‹#›,  ], [ , Synthesized], [Synthesized, attributes], [attributes,  ], [ , Value], [Value, synthesized], [synthesized, attribute], [attribute, node], [node, computed], [computed, value], [value, attributes], [attributes, children], [children, node], [node, parse], [parse, tree], [tree, .]]

>> Trigrams: 
[[Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, II], [(, II, )], [II, ), ‹#›], [), ‹#›,  ], [‹#›,  , Synthesized], [ , Synthesized, attributes], [Synthesized, attributes,  ], [attributes,  , Value], [ , Value, synthesized], [Value, synthesized, attribute], [synthesized, attribute, node], [attribute, node, computed], [node, computed, value], [computed, value, attributes], [value, attributes, children], [attributes, children, node], [children, node, parse], [node, parse, tree], [parse, tree, .]]

>> Noun Phrases are: 
[(PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, II,  Value, synthesized attribute, a node, the value, attributes, the children, that node, the parse tree]

>> Named Entities are: 
[('Jay R Dhamsaniya', 'ORG'), ('PS', 'ORG'), ('Dixita', 'PERSON'), ('Synthesized', 'ORG')]


============================ Sentence 10 =============================

A syntax directed definition that uses synthesized attribute exclusively is said to be S-attribute definition. 


>> Tokens are: 
[syntax, directed, definition, uses, synthesized, attribute, exclusively, said, S, -, attribute, definition, .] 

>> PoS Tags are: 
[('syntax', 'NOUN'), ('directed', 'VERB'), ('definition', 'NOUN'), ('uses', 'VERB'), ('synthesized', 'VERB'), ('attribute', 'NOUN'), ('exclusively', 'ADV'), ('said', 'VERB'), ('S', 'NOUN'), ('-', 'PUNCT'), ('attribute', 'NOUN'), ('definition', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('syntax', 'npadvmod'), ('directed', 'amod'), ('definition', 'nsubjpass'), ('uses', 'relcl'), ('synthesized', 'amod'), ('attribute', 'dobj'), ('exclusively', 'advmod'), ('said', 'ROOT'), ('S', 'compound'), ('-', 'punct'), ('attribute', 'compound'), ('definition', 'attr'), ('.', 'punct')]

>> Bigrams: 
[[syntax, directed], [directed, definition], [definition, uses], [uses, synthesized], [synthesized, attribute], [attribute, exclusively], [exclusively, said], [said, S], [S, -], [-, attribute], [attribute, definition], [definition, .]]

>> Trigrams: 
[[syntax, directed, definition], [directed, definition, uses], [definition, uses, synthesized], [uses, synthesized, attribute], [synthesized, attribute, exclusively], [attribute, exclusively, said], [exclusively, said, S], [said, S, -], [S, -, attribute], [-, attribute, definition], [attribute, definition, .]]

>> Noun Phrases are: 
[A syntax directed definition, synthesized attribute, S-attribute definition]

>> Named Entities are: 
[]


============================ Sentence 11 =============================

Example: Syntax directed definition of simple desk calculator   	Production 	Semantic rules 	L  En	Print (E.val) 


>> Tokens are: 
[Example, :, Syntax, directed, definition, simple, desk, calculator,   	, Production, 	, Semantic, rules, 	, L, , En, 	, Print, (, E.val, )] 

>> PoS Tags are: 
[('Example', 'NOUN'), (':', 'PUNCT'), ('Syntax', 'PROPN'), ('directed', 'VERB'), ('definition', 'NOUN'), ('simple', 'ADJ'), ('desk', 'NOUN'), ('calculator', 'NOUN'), ('  \t', 'SPACE'), ('Production', 'PROPN'), ('\t', 'SPACE'), ('Semantic', 'PROPN'), ('rules', 'VERB'), ('\t', 'SPACE'), ('L', 'PROPN'), ('\uf0e0', 'PROPN'), ('En', 'PROPN'), ('\t', 'SPACE'), ('Print', 'PROPN'), ('(', 'PUNCT'), ('E.val', 'NOUN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('Example', 'npadvmod'), (':', 'punct'), ('Syntax', 'nsubj'), ('directed', 'ROOT'), ('definition', 'dobj'), ('simple', 'amod'), ('desk', 'compound'), ('calculator', 'pobj'), ('  \t', 'compound'), ('Production', 'compound'), ('\t', 'compound'), ('Semantic', 'amod'), ('rules', 'compound'), ('\t', 'compound'), ('L', 'compound'), ('\uf0e0', 'compound'), ('En', 'compound'), ('\t', 'compound'), ('Print', 'nmod'), ('(', 'punct'), ('E.val', 'dobj'), (')', 'punct')]

>> Bigrams: 
[[Example, :], [:, Syntax], [Syntax, directed], [directed, definition], [definition, simple], [simple, desk], [desk, calculator], [calculator,   	], [  	, Production], [Production, 	], [	, Semantic], [Semantic, rules], [rules, 	], [	, L], [L, ], [, En], [En, 	], [	, Print], [Print, (], [(, E.val], [E.val, )]]

>> Trigrams: 
[[Example, :, Syntax], [:, Syntax, directed], [Syntax, directed, definition], [directed, definition, simple], [definition, simple, desk], [simple, desk, calculator], [desk, calculator,   	], [calculator,   	, Production], [  	, Production, 	], [Production, 	, Semantic], [	, Semantic, rules], [Semantic, rules, 	], [rules, 	, L], [	, L, ], [L, , En], [, En, 	], [En, 	, Print], [	, Print, (], [Print, (, E.val], [(, E.val, )]]

>> Noun Phrases are: 
[Syntax, definition, simple desk calculator,   	Production 	Semantic rules 	L  En	Print (E.val]

>> Named Entities are: 
[('Syntax', 'ORG')]


============================ Sentence 12 =============================

	E  E1+T	E.val = E1.val + T.val 	E  T 


>> Tokens are: 
[	, E, , E1+T, 	, E.val, =, E1.val, +, T.val, 	, E, , T] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('E', 'PROPN'), ('\uf0e0', 'PROPN'), ('E1+T', 'PROPN'), ('\t', 'SPACE'), ('E.val', 'PROPN'), ('=', 'X'), ('E1.val', 'PROPN'), ('+', 'CCONJ'), ('T.val', 'PROPN'), ('\t', 'SPACE'), ('E', 'PROPN'), ('\uf0e0', 'NOUN'), ('T', 'NOUN')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('E', 'compound'), ('\uf0e0', 'ROOT'), ('E1+T', 'compound'), ('\t', 'compound'), ('E.val', 'appos'), ('=', 'appos'), ('E1.val', 'appos'), ('+', 'cc'), ('T.val', 'conj'), ('\t', 'compound'), ('E', 'compound'), ('\uf0e0', 'compound'), ('T', 'appos')]

>> Bigrams: 
[[	, E], [E, ], [, E1+T], [E1+T, 	], [	, E.val], [E.val, =], [=, E1.val], [E1.val, +], [+, T.val], [T.val, 	], [	, E], [E, ], [, T]]

>> Trigrams: 
[[	, E, ], [E, , E1+T], [, E1+T, 	], [E1+T, 	, E.val], [	, E.val, =], [E.val, =, E1.val], [=, E1.val, +], [E1.val, +, T.val], [+, T.val, 	], [T.val, 	, E], [	, E, ], [E, , T]]

>> Noun Phrases are: 
[	E , E1+T	E.val, E1.val, T.val, 	E  T]

>> Named Entities are: 
[]


============================ Sentence 13 =============================

	E.val = 


>> Tokens are: 
[	, E.val, =] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('E.val', 'NOUN'), ('=', 'X')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('E.val', 'ROOT'), ('=', 'punct')]

>> Bigrams: 
[[	, E.val], [E.val, =]]

>> Trigrams: 
[[	, E.val, =]]

>> Noun Phrases are: 
[	E.val]

>> Named Entities are: 
[]


============================ Sentence 14 =============================

T.val 


>> Tokens are: 
[T.val] 

>> PoS Tags are: 
[('T.val', 'NOUN')] 

>> Dependency Tags are: 
[('T.val', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[T.val]

>> Named Entities are: 
[]


============================ Sentence 15 =============================

	T  T1*F	T.val = T1.val * F.val 	T  F	T.val 


>> Tokens are: 
[	, T, , T1*F, 	, T.val, =, T1.val, *, F.val, 	, T, , F, 	, T.val] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('T', 'PROPN'), ('\uf0e0', 'NOUN'), ('T1*F', 'PROPN'), ('\t', 'SPACE'), ('T.val', 'PROPN'), ('=', 'SYM'), ('T1.val', 'PROPN'), ('*', 'PUNCT'), ('F.val', 'PROPN'), ('\t', 'SPACE'), ('T', 'PROPN'), ('\uf0e0', 'NOUN'), ('F', 'PROPN'), ('\t', 'SPACE'), ('T.val', 'PROPN')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('T', 'compound'), ('\uf0e0', 'dep'), ('T1*F', 'appos'), ('\t', 'compound'), ('T.val', 'nmod'), ('=', 'punct'), ('T1.val', 'ROOT'), ('*', 'punct'), ('F.val', 'compound'), ('\t', 'compound'), ('T', 'compound'), ('\uf0e0', 'compound'), ('F', 'compound'), ('\t', 'compound'), ('T.val', 'appos')]

>> Bigrams: 
[[	, T], [T, ], [, T1*F], [T1*F, 	], [	, T.val], [T.val, =], [=, T1.val], [T1.val, *], [*, F.val], [F.val, 	], [	, T], [T, ], [, F], [F, 	], [	, T.val]]

>> Trigrams: 
[[	, T, ], [T, , T1*F], [, T1*F, 	], [T1*F, 	, T.val], [	, T.val, =], [T.val, =, T1.val], [=, T1.val, *], [T1.val, *, F.val], [*, F.val, 	], [F.val, 	, T], [	, T, ], [T, , F], [, F, 	], [F, 	, T.val]]

>> Noun Phrases are: 
[T1*F, F.val 	T  F	T.val]

>> Named Entities are: 
[]


============================ Sentence 16 =============================

= F.val 	F  (E)	F.val = E.val 


>> Tokens are: 
[=, F.val, 	, F, , (, E, ), 	, F.val, =, E.val] 

>> PoS Tags are: 
[('=', 'PUNCT'), ('F.val', 'NOUN'), ('\t', 'SPACE'), ('F', 'PROPN'), ('\uf0e0', 'PROPN'), ('(', 'PUNCT'), ('E', 'NOUN'), (')', 'PUNCT'), ('\t', 'SPACE'), ('F.val', 'PROPN'), ('=', 'SYM'), ('E.val', 'NOUN')] 

>> Dependency Tags are: 
[('=', 'compound'), ('F.val', 'compound'), ('\t', 'compound'), ('F', 'compound'), ('\uf0e0', 'ROOT'), ('(', 'punct'), ('E', 'appos'), (')', 'punct'), ('\t', 'compound'), ('F.val', 'appos'), ('=', 'punct'), ('E.val', 'appos')]

>> Bigrams: 
[[=, F.val], [F.val, 	], [	, F], [F, ], [, (], [(, E], [E, )], [), 	], [	, F.val], [F.val, =], [=, E.val]]

>> Trigrams: 
[[=, F.val, 	], [F.val, 	, F], [	, F, ], [F, , (], [, (, E], [(, E, )], [E, ), 	], [), 	, F.val], [	, F.val, =], [F.val, =, E.val]]

>> Noun Phrases are: 
[= F.val 	F , (E, 	F.val, = E.val]

>> Named Entities are: 
[]


============================ Sentence 17 =============================

	F  digit	F.val = digit.lexval             


>> Tokens are: 
[	, F, , digit, 	, F.val, =, digit.lexval,            ] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('F', 'PROPN'), ('\uf0e0', 'NOUN'), ('digit', 'NOUN'), ('\t', 'SPACE'), ('F.val', 'PROPN'), ('=', 'SYM'), ('digit.lexval', 'NOUN'), ('           ', 'SPACE')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('F', 'compound'), ('\uf0e0', 'compound'), ('digit', 'ROOT'), ('\t', 'compound'), ('F.val', 'dobj'), ('=', 'punct'), ('digit.lexval', 'dobj'), ('           ', 'punct')]

>> Bigrams: 
[[	, F], [F, ], [, digit], [digit, 	], [	, F.val], [F.val, =], [=, digit.lexval], [digit.lexval,            ]]

>> Trigrams: 
[[	, F, ], [F, , digit], [, digit, 	], [digit, 	, F.val], [	, F.val, =], [F.val, =, digit.lexval], [=, digit.lexval,            ]]

>> Noun Phrases are: 
[	F  digit, 	F.val, = digit.lexval]

>> Named Entities are: 
[]


============================ Sentence 18 =============================

Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (II) ‹#›   


>> Tokens are: 
[Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, II, ), ‹#›,  ] 

>> PoS Tags are: 
[('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'PROPN'), ('(', 'PUNCT'), ('II', 'PROPN'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'nsubj'), ('#', 'appos'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), ('II', 'appos'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, II], [II, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, II], [(, II, )], [II, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[Prof. Jay R Dhamsaniya, (PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, II]

>> Named Entities are: 
[('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 19 =============================

Example: Synthesized attributes  L E.val=19  n + T.val=15  E.val=15  * 


>> Tokens are: 
[Example, :, Synthesized, attributes,  , L, E.val=19,  , n, +, T.val=15,  , E.val=15,  , *] 

>> PoS Tags are: 
[('Example', 'NOUN'), (':', 'PUNCT'), ('Synthesized', 'VERB'), ('attributes', 'VERB'), (' ', 'SPACE'), ('L', 'PROPN'), ('E.val=19', 'PROPN'), (' ', 'SPACE'), ('n', 'CCONJ'), ('+', 'CCONJ'), ('T.val=15', 'PROPN'), (' ', 'SPACE'), ('E.val=15', 'PROPN'), (' ', 'SPACE'), ('*', 'PUNCT')] 

>> Dependency Tags are: 
[('Example', 'dep'), (':', 'punct'), ('Synthesized', 'amod'), ('attributes', 'ROOT'), (' ', 'compound'), ('L', 'nmod'), ('E.val=19', 'dobj'), (' ', 'appos'), ('n', 'cc'), ('+', 'cc'), ('T.val=15', 'dobj'), (' ', 'punct'), ('E.val=15', 'dobj'), (' ', 'nummod'), ('*', 'punct')]

>> Bigrams: 
[[Example, :], [:, Synthesized], [Synthesized, attributes], [attributes,  ], [ , L], [L, E.val=19], [E.val=19,  ], [ , n], [n, +], [+, T.val=15], [T.val=15,  ], [ , E.val=15], [E.val=15,  ], [ , *]]

>> Trigrams: 
[[Example, :, Synthesized], [:, Synthesized, attributes], [Synthesized, attributes,  ], [attributes,  , L], [ , L, E.val=19], [L, E.val=19,  ], [E.val=19,  , n], [ , n, +], [n, +, T.val=15], [+, T.val=15,  ], [T.val=15,  , E.val=15], [ , E.val=15,  ], [E.val=15,  , *]]

>> Noun Phrases are: 
[ L E.val=19, T.val=15, E.val=15]

>> Named Entities are: 
[]


============================ Sentence 20 =============================

F.val=3 T.val=3 


>> Tokens are: 
[F.val=3, T.val=3] 

>> PoS Tags are: 
[('F.val=3', 'PROPN'), ('T.val=3', 'PUNCT')] 

>> Dependency Tags are: 
[('F.val=3', 'ROOT'), ('T.val=3', 'punct')]

>> Bigrams: 
[[F.val=3, T.val=3]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[F.val=3]

>> Named Entities are: 
[]


============================ Sentence 21 =============================

digit.lexval=3 F.val=4 T.val=4 digit.lexval=4 F.val=5  digit.lexval=5  	Production 	Semantic rules  	L  En	Print (E.val) 


>> Tokens are: 
[digit.lexval=3, F.val=4, T.val=4, digit.lexval=4, F.val=5,  , digit.lexval=5,  	, Production, 	, Semantic, rules,  	, L, , En, 	, Print, (, E.val, )] 

>> PoS Tags are: 
[('digit.lexval=3', 'X'), ('F.val=4', 'PROPN'), ('T.val=4', 'NOUN'), ('digit.lexval=4', 'PUNCT'), ('F.val=5', 'PROPN'), (' ', 'SPACE'), ('digit.lexval=5', 'PROPN'), (' \t', 'SPACE'), ('Production', 'PROPN'), ('\t', 'SPACE'), ('Semantic', 'PROPN'), ('rules', 'VERB'), (' \t', 'SPACE'), ('L', 'PROPN'), ('\uf0e0', 'PROPN'), ('En', 'PROPN'), ('\t', 'SPACE'), ('Print', 'PROPN'), ('(', 'PUNCT'), ('E.val', 'NOUN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('digit.lexval=3', 'quantmod'), ('F.val=4', 'compound'), ('T.val=4', 'nmod'), ('digit.lexval=4', 'punct'), ('F.val=5', 'appos'), (' ', 'punct'), ('digit.lexval=5', 'advmod'), (' \t', 'compound'), ('Production', 'compound'), ('\t', 'compound'), ('Semantic', 'amod'), ('rules', 'ROOT'), (' \t', 'compound'), ('L', 'compound'), ('\uf0e0', 'dobj'), ('En', 'compound'), ('\t', 'compound'), ('Print', 'nmod'), ('(', 'punct'), ('E.val', 'appos'), (')', 'punct')]

>> Bigrams: 
[[digit.lexval=3, F.val=4], [F.val=4, T.val=4], [T.val=4, digit.lexval=4], [digit.lexval=4, F.val=5], [F.val=5,  ], [ , digit.lexval=5], [digit.lexval=5,  	], [ 	, Production], [Production, 	], [	, Semantic], [Semantic, rules], [rules,  	], [ 	, L], [L, ], [, En], [En, 	], [	, Print], [Print, (], [(, E.val], [E.val, )]]

>> Trigrams: 
[[digit.lexval=3, F.val=4, T.val=4], [F.val=4, T.val=4, digit.lexval=4], [T.val=4, digit.lexval=4, F.val=5], [digit.lexval=4, F.val=5,  ], [F.val=5,  , digit.lexval=5], [ , digit.lexval=5,  	], [digit.lexval=5,  	, Production], [ 	, Production, 	], [Production, 	, Semantic], [	, Semantic, rules], [Semantic, rules,  	], [rules,  	, L], [ 	, L, ], [L, , En], [, En, 	], [En, 	, Print], [	, Print, (], [Print, (, E.val], [(, E.val, )]]

>> Noun Phrases are: 
[F.val=5,  	L , En	Print (E.val]

>> Named Entities are: 
[]


============================ Sentence 22 =============================

	E  E1+T	E.Val = E1.val + T.val 	E  T	E.Val 


>> Tokens are: 
[	, E, , E1+T, 	, E.Val, =, E1.val, +, T.val, 	, E, , T, 	, E.Val] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('E', 'PROPN'), ('\uf0e0', 'PROPN'), ('E1+T', 'PROPN'), ('\t', 'SPACE'), ('E.Val', 'PROPN'), ('=', 'SYM'), ('E1.val', 'PROPN'), ('+', 'CCONJ'), ('T.val', 'PROPN'), ('\t', 'SPACE'), ('E', 'PROPN'), ('\uf0e0', 'NOUN'), ('T', 'NOUN'), ('\t', 'SPACE'), ('E.Val', 'PROPN')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('E', 'compound'), ('\uf0e0', 'ROOT'), ('E1+T', 'compound'), ('\t', 'compound'), ('E.Val', 'appos'), ('=', 'punct'), ('E1.val', 'appos'), ('+', 'cc'), ('T.val', 'conj'), ('\t', 'compound'), ('E', 'compound'), ('\uf0e0', 'appos'), ('T', 'compound'), ('\t', 'compound'), ('E.Val', 'appos')]

>> Bigrams: 
[[	, E], [E, ], [, E1+T], [E1+T, 	], [	, E.Val], [E.Val, =], [=, E1.val], [E1.val, +], [+, T.val], [T.val, 	], [	, E], [E, ], [, T], [T, 	], [	, E.Val]]

>> Trigrams: 
[[	, E, ], [E, , E1+T], [, E1+T, 	], [E1+T, 	, E.Val], [	, E.Val, =], [E.Val, =, E1.val], [=, E1.val, +], [E1.val, +, T.val], [+, T.val, 	], [T.val, 	, E], [	, E, ], [E, , T], [, T, 	], [T, 	, E.Val]]

>> Noun Phrases are: 
[	E , E1+T	E.Val, = E1.val, T.val, 	E , T	E.Val]

>> Named Entities are: 
[]


============================ Sentence 23 =============================

= T.val 


>> Tokens are: 
[=, T.val] 

>> PoS Tags are: 
[('=', 'SYM'), ('T.val', 'NOUN')] 

>> Dependency Tags are: 
[('=', 'punct'), ('T.val', 'ROOT')]

>> Bigrams: 
[[=, T.val]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[= T.val]

>> Named Entities are: 
[]


============================ Sentence 24 =============================

	T  T1*F 


>> Tokens are: 
[	, T, , T1*F] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('T', 'PROPN'), ('\uf0e0', 'NOUN'), ('T1*F', 'PROPN')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('T', 'compound'), ('\uf0e0', 'ROOT'), ('T1*F', 'appos')]

>> Bigrams: 
[[	, T], [T, ], [, T1*F]]

>> Trigrams: 
[[	, T, ], [T, , T1*F]]

>> Noun Phrases are: 
[	T , T1*F]

>> Named Entities are: 
[]


============================ Sentence 25 =============================

	T.Val = T1.val * F.val 	T  F	T.Val = F.val 	F  (E)	F.Val = E.val 


>> Tokens are: 
[	, T.Val, =, T1.val, *, F.val, 	, T, , F, 	, T.Val, =, F.val, 	, F, , (, E, ), 	, F.Val, =, E.val] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('T.Val', 'PROPN'), ('=', 'SYM'), ('T1.val', 'PROPN'), ('*', 'PUNCT'), ('F.val', 'PROPN'), ('\t', 'SPACE'), ('T', 'PROPN'), ('\uf0e0', 'NOUN'), ('F', 'PROPN'), ('\t', 'SPACE'), ('T.Val', 'PROPN'), ('=', 'SYM'), ('F.val', 'PROPN'), ('\t', 'SPACE'), ('F', 'PROPN'), ('\uf0e0', 'PROPN'), ('(', 'PUNCT'), ('E', 'NOUN'), (')', 'PUNCT'), ('\t', 'SPACE'), ('F.Val', 'PROPN'), ('=', 'SYM'), ('E.val', 'PROPN')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('T.Val', 'nmod'), ('=', 'punct'), ('T1.val', 'ROOT'), ('*', 'punct'), ('F.val', 'compound'), ('\t', 'compound'), ('T', 'compound'), ('\uf0e0', 'compound'), ('F', 'compound'), ('\t', 'compound'), ('T.Val', 'compound'), ('=', 'compound'), ('F.val', 'appos'), ('\t', 'compound'), ('F', 'compound'), ('\uf0e0', 'appos'), ('(', 'punct'), ('E', 'appos'), (')', 'punct'), ('\t', 'compound'), ('F.Val', 'appos'), ('=', 'punct'), ('E.val', 'appos')]

>> Bigrams: 
[[	, T.Val], [T.Val, =], [=, T1.val], [T1.val, *], [*, F.val], [F.val, 	], [	, T], [T, ], [, F], [F, 	], [	, T.Val], [T.Val, =], [=, F.val], [F.val, 	], [	, F], [F, ], [, (], [(, E], [E, )], [), 	], [	, F.Val], [F.Val, =], [=, E.val]]

>> Trigrams: 
[[	, T.Val, =], [T.Val, =, T1.val], [=, T1.val, *], [T1.val, *, F.val], [*, F.val, 	], [F.val, 	, T], [	, T, ], [T, , F], [, F, 	], [F, 	, T.Val], [	, T.Val, =], [T.Val, =, F.val], [=, F.val, 	], [F.val, 	, F], [	, F, ], [F, , (], [, (, E], [(, E, )], [E, ), 	], [), 	, F.Val], [	, F.Val, =], [F.Val, =, E.val]]

>> Noun Phrases are: 
[	T.Val = T1.val, F.val 	T  F	T.Val = F.val, 	F , (E, 	F.Val, = E.val]

>> Named Entities are: 
[]


============================ Sentence 26 =============================

	F  digit	F.Val = digit . 


>> Tokens are: 
[	, F, , digit, 	, F.Val, =, digit, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('F', 'PROPN'), ('\uf0e0', 'NOUN'), ('digit', 'NOUN'), ('\t', 'SPACE'), ('F.Val', 'PROPN'), ('=', 'SYM'), ('digit', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('F', 'compound'), ('\uf0e0', 'compound'), ('digit', 'nmod'), ('\t', 'compound'), ('F.Val', 'appos'), ('=', 'punct'), ('digit', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[	, F], [F, ], [, digit], [digit, 	], [	, F.Val], [F.Val, =], [=, digit], [digit, .]]

>> Trigrams: 
[[	, F, ], [F, , digit], [, digit, 	], [digit, 	, F.Val], [	, F.Val, =], [F.Val, =, digit], [=, digit, .]]

>> Noun Phrases are: 
[	F.Val]

>> Named Entities are: 
[]


============================ Sentence 27 =============================

lexval   


>> Tokens are: 
[lexval,  ] 

>> PoS Tags are: 
[('lexval', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('lexval', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[lexval,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[lexval]

>> Named Entities are: 
[]


============================ Sentence 28 =============================

Annotated parse tree for 3*5+4n parse tree showing the value of the attributes at each node is called Annotated parse tree   


>> Tokens are: 
[Annotated, parse, tree, 3, *, 5, +, 4n, parse, tree, showing, value, attributes, node, called, Annotated, parse, tree,  ] 

>> PoS Tags are: 
[('Annotated', 'ADJ'), ('parse', 'NOUN'), ('tree', 'NOUN'), ('3', 'NUM'), ('*', 'SYM'), ('5', 'NUM'), ('+', 'NUM'), ('4n', 'NUM'), ('parse', 'NOUN'), ('tree', 'NOUN'), ('showing', 'VERB'), ('value', 'NOUN'), ('attributes', 'NOUN'), ('node', 'NOUN'), ('called', 'VERB'), ('Annotated', 'ADJ'), ('parse', 'NOUN'), ('tree', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Annotated', 'amod'), ('parse', 'compound'), ('tree', 'nsubjpass'), ('3', 'pobj'), ('*', 'punct'), ('5', 'prep'), ('+', 'pobj'), ('4n', 'compound'), ('parse', 'compound'), ('tree', 'nsubj'), ('showing', 'acl'), ('value', 'dobj'), ('attributes', 'pobj'), ('node', 'pobj'), ('called', 'ROOT'), ('Annotated', 'amod'), ('parse', 'compound'), ('tree', 'oprd'), (' ', 'punct')]

>> Bigrams: 
[[Annotated, parse], [parse, tree], [tree, 3], [3, *], [*, 5], [5, +], [+, 4n], [4n, parse], [parse, tree], [tree, showing], [showing, value], [value, attributes], [attributes, node], [node, called], [called, Annotated], [Annotated, parse], [parse, tree], [tree,  ]]

>> Trigrams: 
[[Annotated, parse, tree], [parse, tree, 3], [tree, 3, *], [3, *, 5], [*, 5, +], [5, +, 4n], [+, 4n, parse], [4n, parse, tree], [parse, tree, showing], [tree, showing, value], [showing, value, attributes], [value, attributes, node], [attributes, node, called], [node, called, Annotated], [called, Annotated, parse], [Annotated, parse, tree], [parse, tree,  ]]

>> Noun Phrases are: 
[Annotated parse tree, 4n parse tree, the value, the attributes, each node, Annotated parse tree]

>> Named Entities are: 
[('3', 'CARDINAL'), ('5', 'CARDINAL'), ('Annotated', 'ORG')]


============================ Sentence 29 =============================

The process of computing the attribute values at the node is called annotating or decorating the parse tree String: 3*5+4n;    Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (II) ‹#›   


>> Tokens are: 
[process, computing, attribute, values, node, called, annotating, decorating, parse, tree, String, :, 3, *, 5, +, 4n, ;,    , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, II, ), ‹#›,  ] 

>> PoS Tags are: 
[('process', 'NOUN'), ('computing', 'VERB'), ('attribute', 'NOUN'), ('values', 'NOUN'), ('node', 'NOUN'), ('called', 'VERB'), ('annotating', 'ADJ'), ('decorating', 'VERB'), ('parse', 'NOUN'), ('tree', 'NOUN'), ('String', 'NOUN'), (':', 'PUNCT'), ('3', 'NUM'), ('*', 'SYM'), ('5', 'NUM'), ('+', 'NOUN'), ('4n', 'NUM'), (';', 'PUNCT'), ('   ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'PROPN'), ('(', 'PUNCT'), ('II', 'PROPN'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('process', 'nsubjpass'), ('computing', 'pcomp'), ('attribute', 'compound'), ('values', 'dobj'), ('node', 'pobj'), ('called', 'ccomp'), ('annotating', 'oprd'), ('decorating', 'conj'), ('parse', 'compound'), ('tree', 'compound'), ('String', 'dobj'), (':', 'punct'), ('3', 'appos'), ('*', 'punct'), ('5', 'prep'), ('+', 'prep'), ('4n', 'oprd'), (';', 'punct'), ('   ', 'nummod'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'conj'), ('#', 'nmod'), ('3130006', 'appos'), ('(', 'punct'), ('PS', 'nsubj'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'parataxis'), ('  ', 'oprd'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'appos'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'xcomp'), ('Theory', 'dobj'), ('(', 'punct'), ('II', 'appos'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[process, computing], [computing, attribute], [attribute, values], [values, node], [node, called], [called, annotating], [annotating, decorating], [decorating, parse], [parse, tree], [tree, String], [String, :], [:, 3], [3, *], [*, 5], [5, +], [+, 4n], [4n, ;], [;,    ], [   , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, II], [II, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[process, computing, attribute], [computing, attribute, values], [attribute, values, node], [values, node, called], [node, called, annotating], [called, annotating, decorating], [annotating, decorating, parse], [decorating, parse, tree], [parse, tree, String], [tree, String, :], [String, :, 3], [:, 3, *], [3, *, 5], [*, 5, +], [5, +, 4n], [+, 4n, ;], [4n, ;,    ], [;,    , Prof.], [   , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, II], [(, II, )], [II, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[The process, the attribute values, the node, the parse tree String, PS, Unit, Basic Probability, ‹#›,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, II]

>> Named Entities are: 
[('3', 'CARDINAL'), ('5', 'CARDINAL'), ('Jay R Dhamsaniya', 'ORG'), ('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 30 =============================

Exercise Draw Annotated Parse tree for following: 7+3*2n (3+4)*(5+6)n     Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (II) ‹#›   


>> Tokens are: 
[Exercise, Draw, Annotated, Parse, tree, following, :, 7, +, 3, *, 2n, (, 3, +, 4)*(5, +, 6)n,     , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, II, ), ‹#›,  ] 

>> PoS Tags are: 
[('Exercise', 'PROPN'), ('Draw', 'PROPN'), ('Annotated', 'ADJ'), ('Parse', 'PROPN'), ('tree', 'NOUN'), ('following', 'VERB'), (':', 'PUNCT'), ('7', 'NUM'), ('+', 'SYM'), ('3', 'NUM'), ('*', 'SYM'), ('2n', 'NUM'), ('(', 'PUNCT'), ('3', 'NUM'), ('+', 'SYM'), ('4)*(5', 'NUM'), ('+', 'SYM'), ('6)n', 'NUM'), ('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'PROPN'), ('(', 'PUNCT'), ('II', 'PROPN'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Exercise', 'compound'), ('Draw', 'compound'), ('Annotated', 'amod'), ('Parse', 'compound'), ('tree', 'nsubj'), ('following', 'pcomp'), (':', 'punct'), ('7', 'nummod'), ('+', 'cc'), ('3', 'nummod'), ('*', 'punct'), ('2n', 'dobj'), ('(', 'punct'), ('3', 'appos'), ('+', 'cc'), ('4)*(5', 'nummod'), ('+', 'punct'), ('6)n', 'conj'), ('    ', 'nummod'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'dative'), ('#', 'npadvmod'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), ('II', 'appos'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[Exercise, Draw], [Draw, Annotated], [Annotated, Parse], [Parse, tree], [tree, following], [following, :], [:, 7], [7, +], [+, 3], [3, *], [*, 2n], [2n, (], [(, 3], [3, +], [+, 4)*(5], [4)*(5, +], [+, 6)n], [6)n,     ], [    , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, II], [II, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[Exercise, Draw, Annotated], [Draw, Annotated, Parse], [Annotated, Parse, tree], [Parse, tree, following], [tree, following, :], [following, :, 7], [:, 7, +], [7, +, 3], [+, 3, *], [3, *, 2n], [*, 2n, (], [2n, (, 3], [(, 3, +], [3, +, 4)*(5], [+, 4)*(5, +], [4)*(5, +, 6)n], [+, 6)n,     ], [6)n,     , Prof.], [    , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, II], [(, II, )], [II, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[Exercise Draw Annotated Parse tree,     Prof. Jay R Dhamsaniya, (PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, II]

>> Named Entities are: 
[('7+3', 'CARDINAL'), ('2n', 'CARDINAL'), ('3+4)*(5', 'QUANTITY'), ('Jay R Dhamsaniya', 'ORG'), ('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 31 =============================

Syntax directed definition to translates arithmetic expressions from infix to prefix notation  	Production 	Semantic rules 	LE	Print(E.val) 


>> Tokens are: 
[Syntax, directed, definition, translates, arithmetic, expressions, infix, prefix, notation,  	, Production, 	, Semantic, rules, 	, LE, 	, Print(E.val, )] 

>> PoS Tags are: 
[('Syntax', 'PROPN'), ('directed', 'VERB'), ('definition', 'NOUN'), ('translates', 'VERB'), ('arithmetic', 'ADJ'), ('expressions', 'NOUN'), ('infix', 'NOUN'), ('prefix', 'VERB'), ('notation', 'NOUN'), (' \t', 'SPACE'), ('Production', 'PROPN'), ('\t', 'SPACE'), ('Semantic', 'PROPN'), ('rules', 'VERB'), ('\t', 'SPACE'), ('L\uf0e0E', 'PROPN'), ('\t', 'SPACE'), ('Print(E.val', 'NOUN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('Syntax', 'nsubj'), ('directed', 'ROOT'), ('definition', 'dobj'), ('translates', 'pcomp'), ('arithmetic', 'amod'), ('expressions', 'dobj'), ('infix', 'pobj'), ('prefix', 'advcl'), ('notation', 'dobj'), (' \t', 'compound'), ('Production', 'appos'), ('\t', 'compound'), ('Semantic', 'amod'), ('rules', 'dobj'), ('\t', 'compound'), ('L\uf0e0E', 'compound'), ('\t', 'compound'), ('Print(E.val', 'appos'), (')', 'punct')]

>> Bigrams: 
[[Syntax, directed], [directed, definition], [definition, translates], [translates, arithmetic], [arithmetic, expressions], [expressions, infix], [infix, prefix], [prefix, notation], [notation,  	], [ 	, Production], [Production, 	], [	, Semantic], [Semantic, rules], [rules, 	], [	, LE], [LE, 	], [	, Print(E.val], [Print(E.val, )]]

>> Trigrams: 
[[Syntax, directed, definition], [directed, definition, translates], [definition, translates, arithmetic], [translates, arithmetic, expressions], [arithmetic, expressions, infix], [expressions, infix, prefix], [infix, prefix, notation], [prefix, notation,  	], [notation,  	, Production], [ 	, Production, 	], [Production, 	, Semantic], [	, Semantic, rules], [Semantic, rules, 	], [rules, 	, LE], [	, LE, 	], [LE, 	, Print(E.val], [	, Print(E.val, )]]

>> Noun Phrases are: 
[Syntax, definition, arithmetic expressions, infix, notation,  	Production, 	LE	Print(E.val]

>> Named Entities are: 
[('Syntax', 'ORG')]


============================ Sentence 32 =============================

	EE+T	E.val=’+’ E.val T.val 	EE-T	E.val=’-‘ E.val T.val 	ET	E.val= T.val 	TT*F	T.val=’*’ T.val F.val 	TT/F	T.val=’/’ T.val F.val 	TF	T.val= F.val 	FF^P	F.val=’^’ F.val P.val 


>> Tokens are: 
[	, EE+T, 	, E.val=’+, ’, E.val, T.val, 	, EE, -, T, 	, E.val=’-, ‘, E.val, T.val, 	, ET, 	, E.val=, T.val, 	, TT*F, 	, T.val=, ’, *, ’, T.val, F.val, 	, TT, /, F, 	, T.val=’/, ’, T.val, F.val, 	, TF, 	, T.val=, F.val, 	, FF^P, 	, F.val=’^, ’, F.val, P.val] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('E\uf0e0E+T', 'NOUN'), ('\t', 'SPACE'), ('E.val=’+', 'NOUN'), ('’', 'PUNCT'), ('E.val', 'PROPN'), ('T.val', 'NOUN'), ('\t', 'SPACE'), ('E\uf0e0E', 'PROPN'), ('-', 'PUNCT'), ('T', 'PROPN'), ('\t', 'SPACE'), ('E.val=’-', 'VERB'), ('‘', 'PUNCT'), ('E.val', 'NOUN'), ('T.val', 'NOUN'), ('\t', 'SPACE'), ('E\uf0e0T', 'PROPN'), ('\t', 'SPACE'), ('E.val=', 'PROPN'), ('T.val', 'PROPN'), ('\t', 'SPACE'), ('T\uf0e0T*F', 'VERB'), ('\t', 'SPACE'), ('T.val=', 'PROPN'), ('’', 'PUNCT'), ('*', 'PUNCT'), ('’', 'PUNCT'), ('T.val', 'PROPN'), ('F.val', 'PROPN'), ('\t', 'SPACE'), ('T\uf0e0T', 'PROPN'), ('/', 'SYM'), ('F', 'PROPN'), ('\t', 'SPACE'), ('T.val=’/', 'PROPN'), ('’', 'PART'), ('T.val', 'PROPN'), ('F.val', 'PROPN'), ('\t', 'SPACE'), ('T\uf0e0F', 'PROPN'), ('\t', 'SPACE'), ('T.val=', 'VERB'), ('F.val', 'PROPN'), ('\t', 'SPACE'), ('F\uf0e0F^P', 'PROPN'), ('\t', 'SPACE'), ('F.val=’^', 'NOUN'), ('’', 'PUNCT'), ('F.val', 'PROPN'), ('P.val', 'PROPN')] 

>> Dependency Tags are: 
[('\t', 'nmod'), ('E\uf0e0E+T', 'cc'), ('\t', 'conj'), ('E.val=’+', 'prep'), ('’', 'punct'), ('E.val', 'compound'), ('T.val', 'pobj'), ('\t', 'compound'), ('E\uf0e0E', 'compound'), ('-', 'punct'), ('T', 'compound'), ('\t', 'nsubj'), ('E.val=’-', 'ROOT'), ('‘', 'punct'), ('E.val', 'compound'), ('T.val', 'compound'), ('\t', 'nmod'), ('E\uf0e0T', 'nmod'), ('\t', 'nsubj'), ('E.val=', 'punct'), ('T.val', 'compound'), ('\t', 'conj'), ('T\uf0e0T*F', 'ccomp'), ('\t', 'compound'), ('T.val=', 'dobj'), ('’', 'punct'), ('*', 'punct'), ('’', 'punct'), ('T.val', 'compound'), ('F.val', 'nmod'), ('\t', 'nmod'), ('T\uf0e0T', 'nmod'), ('/', 'punct'), ('F', 'nmod'), ('\t', 'nmod'), ('T.val=’/', 'nmod'), ('’', 'punct'), ('T.val', 'compound'), ('F.val', 'compound'), ('\t', 'compound'), ('T\uf0e0F', 'compound'), ('\t', 'nsubj'), ('T.val=', 'ccomp'), ('F.val', 'compound'), ('\t', 'compound'), ('F\uf0e0F^P', 'compound'), ('\t', 'compound'), ('F.val=’^', 'dobj'), ('’', 'punct'), ('F.val', 'compound'), ('P.val', 'appos')]

>> Bigrams: 
[[	, EE+T], [EE+T, 	], [	, E.val=’+], [E.val=’+, ’], [’, E.val], [E.val, T.val], [T.val, 	], [	, EE], [EE, -], [-, T], [T, 	], [	, E.val=’-], [E.val=’-, ‘], [‘, E.val], [E.val, T.val], [T.val, 	], [	, ET], [ET, 	], [	, E.val=], [E.val=, T.val], [T.val, 	], [	, TT*F], [TT*F, 	], [	, T.val=], [T.val=, ’], [’, *], [*, ’], [’, T.val], [T.val, F.val], [F.val, 	], [	, TT], [TT, /], [/, F], [F, 	], [	, T.val=’/], [T.val=’/, ’], [’, T.val], [T.val, F.val], [F.val, 	], [	, TF], [TF, 	], [	, T.val=], [T.val=, F.val], [F.val, 	], [	, FF^P], [FF^P, 	], [	, F.val=’^], [F.val=’^, ’], [’, F.val], [F.val, P.val]]

>> Trigrams: 
[[	, EE+T, 	], [EE+T, 	, E.val=’+], [	, E.val=’+, ’], [E.val=’+, ’, E.val], [’, E.val, T.val], [E.val, T.val, 	], [T.val, 	, EE], [	, EE, -], [EE, -, T], [-, T, 	], [T, 	, E.val=’-], [	, E.val=’-, ‘], [E.val=’-, ‘, E.val], [‘, E.val, T.val], [E.val, T.val, 	], [T.val, 	, ET], [	, ET, 	], [ET, 	, E.val=], [	, E.val=, T.val], [E.val=, T.val, 	], [T.val, 	, TT*F], [	, TT*F, 	], [TT*F, 	, T.val=], [	, T.val=, ’], [T.val=, ’, *], [’, *, ’], [*, ’, T.val], [’, T.val, F.val], [T.val, F.val, 	], [F.val, 	, TT], [	, TT, /], [TT, /, F], [/, F, 	], [F, 	, T.val=’/], [	, T.val=’/, ’], [T.val=’/, ’, T.val], [’, T.val, F.val], [T.val, F.val, 	], [F.val, 	, TF], [	, TF, 	], [TF, 	, T.val=], [	, T.val=, F.val], [T.val=, F.val, 	], [F.val, 	, FF^P], [	, FF^P, 	], [FF^P, 	, F.val=’^], [	, F.val=’^, ’], [F.val=’^, ’, F.val], [’, F.val, P.val]]

>> Noun Phrases are: 
[E.val T.val, 	T.val=, F.val 	FF^P	F.val=’^, ’ F.val P.val]

>> Named Entities are: 
[('T\uf0e0F', 'ORG')]


============================ Sentence 33 =============================

	FP	F.val= P.val 	P(E) 


>> Tokens are: 
[	, FP, 	, F.val=, P.val, 	, P(E, )] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('F\uf0e0P', 'PROPN'), ('\t', 'SPACE'), ('F.val=', 'NOUN'), ('P.val', 'NOUN'), ('\t', 'SPACE'), ('P\uf0e0(E', 'X'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('F\uf0e0P', 'compound'), ('\t', 'ROOT'), ('F.val=', 'compound'), ('P.val', 'compound'), ('\t', 'appos'), ('P\uf0e0(E', 'punct'), (')', 'punct')]

>> Bigrams: 
[[	, FP], [FP, 	], [	, F.val=], [F.val=, P.val], [P.val, 	], [	, P(E], [P(E, )]]

>> Trigrams: 
[[	, FP, 	], [FP, 	, F.val=], [	, F.val=, P.val], [F.val=, P.val, 	], [P.val, 	, P(E], [	, P(E, )]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 34 =============================

	P.val= E.val 	Pdigit	P.val=digit.lexval                Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (II) ‹#› 


>> Tokens are: 
[	, P.val=, E.val, 	, Pdigit, 	, P.val, =, digit.lexval,                , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, II, ), ‹#›] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('P.val=', 'NOUN'), ('E.val', 'PROPN'), ('\t', 'SPACE'), ('P\uf0e0digit', 'PROPN'), ('\t', 'SPACE'), ('P.val', 'PROPN'), ('=', 'SYM'), ('digit.lexval', 'NOUN'), ('               ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'PROPN'), ('(', 'PUNCT'), ('II', 'PROPN'), (')', 'PUNCT'), ('‹#›', 'X')] 

>> Dependency Tags are: 
[('\t', 'dep'), ('P.val=', 'compound'), ('E.val', 'compound'), ('\t', 'compound'), ('P\uf0e0digit', 'compound'), ('\t', 'compound'), ('P.val', 'dobj'), ('=', 'dep'), ('digit.lexval', 'ROOT'), ('               ', 'nummod'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'dative'), ('#', 'npadvmod'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'advcl'), ('  ', 'conj'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'acl'), ('  ', 'conj'), ('Unit', 'npadvmod'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'acl'), ('Theory', 'dobj'), ('(', 'punct'), ('II', 'appos'), (')', 'punct'), ('‹#›', 'punct')]

>> Bigrams: 
[[	, P.val=], [P.val=, E.val], [E.val, 	], [	, Pdigit], [Pdigit, 	], [	, P.val], [P.val, =], [=, digit.lexval], [digit.lexval,                ], [               , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, II], [II, )], [), ‹#›]]

>> Trigrams: 
[[	, P.val=, E.val], [P.val=, E.val, 	], [E.val, 	, Pdigit], [	, Pdigit, 	], [Pdigit, 	, P.val], [	, P.val, =], [P.val, =, digit.lexval], [=, digit.lexval,                ], [digit.lexval,                , Prof.], [               , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, II], [(, II, )], [II, ), ‹#›]]

>> Noun Phrases are: 
[P.val= E.val 	Pdigit	P.val,                Prof. Jay R Dhamsaniya, (PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Theory, II]

>> Named Entities are: 
[('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 35 =============================

 Inherited attribute An inherited value at a node in a parse tree is computed from the value of attributes at the parent and/or siblings of the node. 


>> Tokens are: 
[ , Inherited, attribute, inherited, value, node, parse, tree, computed, value, attributes, parent, and/or, siblings, node, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('Inherited', 'VERB'), ('attribute', 'VERB'), ('inherited', 'VERB'), ('value', 'NOUN'), ('node', 'NOUN'), ('parse', 'NOUN'), ('tree', 'NOUN'), ('computed', 'VERB'), ('value', 'NOUN'), ('attributes', 'NOUN'), ('parent', 'NOUN'), ('and/or', 'CCONJ'), ('siblings', 'NOUN'), ('node', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'compound'), ('Inherited', 'nsubj'), ('attribute', 'nsubjpass'), ('inherited', 'amod'), ('value', 'dobj'), ('node', 'pobj'), ('parse', 'compound'), ('tree', 'pobj'), ('computed', 'ROOT'), ('value', 'pobj'), ('attributes', 'pobj'), ('parent', 'pobj'), ('and/or', 'cc'), ('siblings', 'conj'), ('node', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[ , Inherited], [Inherited, attribute], [attribute, inherited], [inherited, value], [value, node], [node, parse], [parse, tree], [tree, computed], [computed, value], [value, attributes], [attributes, parent], [parent, and/or], [and/or, siblings], [siblings, node], [node, .]]

>> Trigrams: 
[[ , Inherited, attribute], [Inherited, attribute, inherited], [attribute, inherited, value], [inherited, value, node], [value, node, parse], [node, parse, tree], [parse, tree, computed], [tree, computed, value], [computed, value, attributes], [value, attributes, parent], [attributes, parent, and/or], [parent, and/or, siblings], [and/or, siblings, node], [siblings, node, .]]

>> Noun Phrases are: 
[An inherited value, a node, a parse tree, the value, attributes, the parent, siblings, the node]

>> Named Entities are: 
[]


============================ Sentence 36 =============================

        Symbol T is associated with a synthesized attribute type. 


>> Tokens are: 
[        , Symbol, T, associated, synthesized, attribute, type, .] 

>> PoS Tags are: 
[('        ', 'SPACE'), ('Symbol', 'NOUN'), ('T', 'PROPN'), ('associated', 'VERB'), ('synthesized', 'VERB'), ('attribute', 'NOUN'), ('type', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('        ', 'compound'), ('Symbol', 'compound'), ('T', 'nsubjpass'), ('associated', 'ROOT'), ('synthesized', 'amod'), ('attribute', 'compound'), ('type', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[        , Symbol], [Symbol, T], [T, associated], [associated, synthesized], [synthesized, attribute], [attribute, type], [type, .]]

>> Trigrams: 
[[        , Symbol, T], [Symbol, T, associated], [T, associated, synthesized], [associated, synthesized, attribute], [synthesized, attribute, type], [attribute, type, .]]

>> Noun Phrases are: 
[        Symbol T, a synthesized attribute type]

>> Named Entities are: 
[]


============================ Sentence 37 =============================

Symbol L is associated with an inherited attribute in. 


>> Tokens are: 
[Symbol, L, associated, inherited, attribute, .] 

>> PoS Tags are: 
[('Symbol', 'PROPN'), ('L', 'PROPN'), ('associated', 'VERB'), ('inherited', 'VERB'), ('attribute', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Symbol', 'compound'), ('L', 'nsubjpass'), ('associated', 'ROOT'), ('inherited', 'amod'), ('attribute', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Symbol, L], [L, associated], [associated, inherited], [inherited, attribute], [attribute, .]]

>> Trigrams: 
[[Symbol, L, associated], [L, associated, inherited], [associated, inherited, attribute], [inherited, attribute, .]]

>> Noun Phrases are: 
[Symbol L, an inherited attribute]

>> Named Entities are: 
[('Symbol L', 'ORG')]


============================ Sentence 38 =============================

   	Production	Semantic rules 	D → T L	L.in = 


>> Tokens are: 
[   	, Production, 	, Semantic, rules, 	, D, →, T, L, 	, L.in, =] 

>> PoS Tags are: 
[('   \t', 'SPACE'), ('Production', 'NOUN'), ('\t', 'SPACE'), ('Semantic', 'PROPN'), ('rules', 'VERB'), ('\t', 'SPACE'), ('D', 'PROPN'), ('→', 'SYM'), ('T', 'PROPN'), ('L', 'PROPN'), ('\t', 'SPACE'), ('L.in', 'PROPN'), ('=', 'SYM')] 

>> Dependency Tags are: 
[('   \t', 'nummod'), ('Production', 'compound'), ('\t', 'compound'), ('Semantic', 'amod'), ('rules', 'ROOT'), ('\t', 'compound'), ('D', 'appos'), ('→', 'punct'), ('T', 'compound'), ('L', 'compound'), ('\t', 'appos'), ('L.in', 'appos'), ('=', 'punct')]

>> Bigrams: 
[[   	, Production], [Production, 	], [	, Semantic], [Semantic, rules], [rules, 	], [	, D], [D, →], [→, T], [T, L], [L, 	], [	, L.in], [L.in, =]]

>> Trigrams: 
[[   	, Production, 	], [Production, 	, Semantic], [	, Semantic, rules], [Semantic, rules, 	], [rules, 	, D], [	, D, →], [D, →, T], [→, T, L], [T, L, 	], [L, 	, L.in], [	, L.in, =]]

>> Noun Phrases are: 
[	D, L.in]

>> Named Entities are: 
[]


============================ Sentence 39 =============================

T.type 	T → int		T.type = integer 	T → real		T.type = real 	L → L1 , id	L1.in = L.in,   addtype(id.entry,L.in) 


>> Tokens are: 
[T.type, 	, T, →, int, 		, T.type, =, integer, 	, T, →, real, 		, T.type, =, real, 	, L, →, L1, ,, d, 	, L1.in, =, L.in, ,,   , addtype(id.entry, ,, L.in, )] 

>> PoS Tags are: 
[('T.type', 'PROPN'), ('\t', 'SPACE'), ('T', 'PROPN'), ('→', 'SYM'), ('int', 'NOUN'), ('\t\t', 'SPACE'), ('T.type', 'PROPN'), ('=', 'SYM'), ('integer', 'VERB'), ('\t', 'SPACE'), ('T', 'PROPN'), ('→', 'SYM'), ('real', 'ADV'), ('\t\t', 'SPACE'), ('T.type', 'PROPN'), ('=', 'PUNCT'), ('real', 'PROPN'), ('\t', 'SPACE'), ('L', 'PROPN'), ('→', 'SYM'), ('L1', 'PROPN'), (',', 'PUNCT'), ('d', 'PROPN'), ('\t', 'SPACE'), ('L1.in', 'PROPN'), ('=', 'PUNCT'), ('L.in', 'PROPN'), (',', 'PUNCT'), ('  ', 'SPACE'), ('addtype(id.entry', 'NOUN'), (',', 'PUNCT'), ('L.in', 'PROPN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('T.type', 'compound'), ('\t', 'compound'), ('T', 'nsubj'), ('→', 'punct'), ('int', 'appos'), ('\t\t', 'compound'), ('T.type', 'appos'), ('=', 'advmod'), ('integer', 'ccomp'), ('\t', 'compound'), ('T', 'dobj'), ('→', 'punct'), ('real', 'amod'), ('\t\t', 'dobj'), ('T.type', 'dobj'), ('=', 'punct'), ('real', 'amod'), ('\t', 'compound'), ('L', 'nmod'), ('→', 'punct'), ('L1', 'dobj'), (',', 'punct'), ('d', 'conj'), ('\t', 'compound'), ('L1.in', 'dep'), ('=', 'punct'), ('L.in', 'ROOT'), (',', 'punct'), ('  ', 'compound'), ('addtype(id.entry', 'conj'), (',', 'punct'), ('L.in', 'npadvmod'), (')', 'punct')]

>> Bigrams: 
[[T.type, 	], [	, T], [T, →], [→, int], [int, 		], [		, T.type], [T.type, =], [=, integer], [integer, 	], [	, T], [T, →], [→, real], [real, 		], [		, T.type], [T.type, =], [=, real], [real, 	], [	, L], [L, →], [→, L1], [L1, ,], [,, d], [d, 	], [	, L1.in], [L1.in, =], [=, L.in], [L.in, ,], [,,   ], [  , addtype(id.entry], [addtype(id.entry, ,], [,, L.in], [L.in, )]]

>> Trigrams: 
[[T.type, 	, T], [	, T, →], [T, →, int], [→, int, 		], [int, 		, T.type], [		, T.type, =], [T.type, =, integer], [=, integer, 	], [integer, 	, T], [	, T, →], [T, →, real], [→, real, 		], [real, 		, T.type], [		, T.type, =], [T.type, =, real], [=, real, 	], [real, 	, L], [	, L, →], [L, →, L1], [→, L1, ,], [L1, ,, d], [,, d, 	], [d, 	, L1.in], [	, L1.in, =], [L1.in, =, L.in], [=, L.in, ,], [L.in, ,,   ], [,,   , addtype(id.entry], [  , addtype(id.entry, ,], [addtype(id.entry, ,, L.in], [,, L.in, )]]

>> Noun Phrases are: 
[T.type 	T, int, 		T.type, 	T, T.type, = real 	L → L1,   addtype(id.entry]

>> Named Entities are: 
[('L1.in', 'PERSON')]


============================ Sentence 40 =============================

	L → id	addtype(id.entry,L.in)       Syntax directed definition with inherited attribute L.in    Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (II) ‹#›   


>> Tokens are: 
[	, L, →, d, 	, addtype(id.entry, ,, L.in, ),       , Syntax, directed, definition, inherited, attribute, L.in,    , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, II, ), ‹#›,  ] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('L', 'PROPN'), ('→', 'SYM'), ('d', 'PROPN'), ('\t', 'SPACE'), ('addtype(id.entry', 'PROPN'), (',', 'PUNCT'), ('L.in', 'PROPN'), (')', 'PUNCT'), ('      ', 'SPACE'), ('Syntax', 'PROPN'), ('directed', 'VERB'), ('definition', 'NOUN'), ('inherited', 'VERB'), ('attribute', 'NOUN'), ('L.in', 'PROPN'), ('   ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'PROPN'), ('(', 'PUNCT'), ('II', 'PROPN'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('L', 'nsubj'), ('→', 'punct'), ('d', 'compound'), ('\t', 'compound'), ('addtype(id.entry', 'appos'), (',', 'punct'), ('L.in', 'npadvmod'), (')', 'punct'), ('      ', 'compound'), ('Syntax', 'nsubj'), ('directed', 'ROOT'), ('definition', 'dobj'), ('inherited', 'amod'), ('attribute', 'pobj'), ('L.in', 'npadvmod'), ('   ', 'nummod'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'npadvmod'), ('#', 'nmod'), ('3130006', 'npadvmod'), ('(', 'punct'), ('PS', 'nsubj'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'parataxis'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'appos'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'appos'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'dep'), ('  ', 'punct'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'xcomp'), ('Theory', 'dobj'), ('(', 'punct'), ('II', 'appos'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[	, L], [L, →], [→, d], [d, 	], [	, addtype(id.entry], [addtype(id.entry, ,], [,, L.in], [L.in, )], [),       ], [      , Syntax], [Syntax, directed], [directed, definition], [definition, inherited], [inherited, attribute], [attribute, L.in], [L.in,    ], [   , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, II], [II, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[	, L, →], [L, →, d], [→, d, 	], [d, 	, addtype(id.entry], [	, addtype(id.entry, ,], [addtype(id.entry, ,, L.in], [,, L.in, )], [L.in, ),       ], [),       , Syntax], [      , Syntax, directed], [Syntax, directed, definition], [directed, definition, inherited], [definition, inherited, attribute], [inherited, attribute, L.in], [attribute, L.in,    ], [L.in,    , Prof.], [   , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, II], [(, II, )], [II, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[	L, i, d	addtype(id.entry,       Syntax, definition, inherited attribute, PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #, (CD, Unit, Theory, II]

>> Named Entities are: 
[('Syntax', 'ORG'), ('Jay R Dhamsaniya', 'ORG'), ('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 41 =============================

Example: Inherited attribute Example: Pass data types to all identifier real id1,id2,id3  	Production	Semantic rules 	D → T L	L.in = 


>> Tokens are: 
[Example, :, Inherited, attribute, Example, :, Pass, data, types, identifier, real, id1,id2,id3,  	, Production, 	, Semantic, rules, 	, D, →, T, L, 	, L.in, =] 

>> PoS Tags are: 
[('Example', 'NOUN'), (':', 'PUNCT'), ('Inherited', 'PROPN'), ('attribute', 'VERB'), ('Example', 'NOUN'), (':', 'PUNCT'), ('Pass', 'PROPN'), ('data', 'NOUN'), ('types', 'NOUN'), ('identifier', 'ADJ'), ('real', 'ADJ'), ('id1,id2,id3', 'NOUN'), (' \t', 'SPACE'), ('Production', 'PROPN'), ('\t', 'SPACE'), ('Semantic', 'PROPN'), ('rules', 'VERB'), ('\t', 'SPACE'), ('D', 'PROPN'), ('→', 'SYM'), ('T', 'PROPN'), ('L', 'PROPN'), ('\t', 'SPACE'), ('L.in', 'PROPN'), ('=', 'SYM')] 

>> Dependency Tags are: 
[('Example', 'dep'), (':', 'punct'), ('Inherited', 'nsubj'), ('attribute', 'ROOT'), ('Example', 'dobj'), (':', 'punct'), ('Pass', 'compound'), ('data', 'compound'), ('types', 'dobj'), ('identifier', 'amod'), ('real', 'amod'), ('id1,id2,id3', 'nmod'), (' \t', 'compound'), ('Production', 'compound'), ('\t', 'compound'), ('Semantic', 'compound'), ('rules', 'pobj'), ('\t', 'compound'), ('D', 'appos'), ('→', 'punct'), ('T', 'compound'), ('L', 'compound'), ('\t', 'appos'), ('L.in', 'npadvmod'), ('=', 'punct')]

>> Bigrams: 
[[Example, :], [:, Inherited], [Inherited, attribute], [attribute, Example], [Example, :], [:, Pass], [Pass, data], [data, types], [types, identifier], [identifier, real], [real, id1,id2,id3], [id1,id2,id3,  	], [ 	, Production], [Production, 	], [	, Semantic], [Semantic, rules], [rules, 	], [	, D], [D, →], [→, T], [T, L], [L, 	], [	, L.in], [L.in, =]]

>> Trigrams: 
[[Example, :, Inherited], [:, Inherited, attribute], [Inherited, attribute, Example], [attribute, Example, :], [Example, :, Pass], [:, Pass, data], [Pass, data, types], [data, types, identifier], [types, identifier, real], [identifier, real, id1,id2,id3], [real, id1,id2,id3,  	], [id1,id2,id3,  	, Production], [ 	, Production, 	], [Production, 	, Semantic], [	, Semantic, rules], [Semantic, rules, 	], [rules, 	, D], [	, D, →], [D, →, T], [→, T, L], [T, L, 	], [L, 	, L.in], [	, L.in, =]]

>> Noun Phrases are: 
[Inherited, Example, Pass data types, 	D]

>> Named Entities are: 
[]


============================ Sentence 42 =============================

T.type 


>> Tokens are: 
[T.type] 

>> PoS Tags are: 
[('T.type', 'PROPN')] 

>> Dependency Tags are: 
[('T.type', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[T.type]

>> Named Entities are: 
[]


============================ Sentence 43 =============================

	T → int		T.type = integer 	T → real		T.type = real 	L → L1 , id	L1.in = L.in,   addtype(id.entry,L.in) 


>> Tokens are: 
[	, T, →, int, 		, T.type, =, integer, 	, T, →, real, 		, T.type, =, real, 	, L, →, L1, ,, d, 	, L1.in, =, L.in, ,,   , addtype(id.entry, ,, L.in, )] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('T', 'PROPN'), ('→', 'SYM'), ('int', 'NOUN'), ('\t\t', 'SPACE'), ('T.type', 'PROPN'), ('=', 'SYM'), ('integer', 'VERB'), ('\t', 'SPACE'), ('T', 'PROPN'), ('→', 'SYM'), ('real', 'ADV'), ('\t\t', 'SPACE'), ('T.type', 'PROPN'), ('=', 'PUNCT'), ('real', 'PROPN'), ('\t', 'SPACE'), ('L', 'PROPN'), ('→', 'SYM'), ('L1', 'PROPN'), (',', 'PUNCT'), ('d', 'PROPN'), ('\t', 'SPACE'), ('L1.in', 'PROPN'), ('=', 'PUNCT'), ('L.in', 'PROPN'), (',', 'PUNCT'), ('  ', 'SPACE'), ('addtype(id.entry', 'NOUN'), (',', 'PUNCT'), ('L.in', 'PROPN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('T', 'nsubj'), ('→', 'punct'), ('int', 'appos'), ('\t\t', 'compound'), ('T.type', 'appos'), ('=', 'advmod'), ('integer', 'ccomp'), ('\t', 'compound'), ('T', 'dobj'), ('→', 'punct'), ('real', 'amod'), ('\t\t', 'dobj'), ('T.type', 'dobj'), ('=', 'punct'), ('real', 'amod'), ('\t', 'compound'), ('L', 'nmod'), ('→', 'punct'), ('L1', 'dobj'), (',', 'punct'), ('d', 'conj'), ('\t', 'compound'), ('L1.in', 'dep'), ('=', 'punct'), ('L.in', 'ROOT'), (',', 'punct'), ('  ', 'compound'), ('addtype(id.entry', 'conj'), (',', 'punct'), ('L.in', 'npadvmod'), (')', 'punct')]

>> Bigrams: 
[[	, T], [T, →], [→, int], [int, 		], [		, T.type], [T.type, =], [=, integer], [integer, 	], [	, T], [T, →], [→, real], [real, 		], [		, T.type], [T.type, =], [=, real], [real, 	], [	, L], [L, →], [→, L1], [L1, ,], [,, d], [d, 	], [	, L1.in], [L1.in, =], [=, L.in], [L.in, ,], [,,   ], [  , addtype(id.entry], [addtype(id.entry, ,], [,, L.in], [L.in, )]]

>> Trigrams: 
[[	, T, →], [T, →, int], [→, int, 		], [int, 		, T.type], [		, T.type, =], [T.type, =, integer], [=, integer, 	], [integer, 	, T], [	, T, →], [T, →, real], [→, real, 		], [real, 		, T.type], [		, T.type, =], [T.type, =, real], [=, real, 	], [real, 	, L], [	, L, →], [L, →, L1], [→, L1, ,], [L1, ,, d], [,, d, 	], [d, 	, L1.in], [	, L1.in, =], [L1.in, =, L.in], [=, L.in, ,], [L.in, ,,   ], [,,   , addtype(id.entry], [  , addtype(id.entry, ,], [addtype(id.entry, ,, L.in], [,, L.in, )]]

>> Noun Phrases are: 
[	T, int, 		T.type, 	T, T.type, = real 	L → L1,   addtype(id.entry]

>> Named Entities are: 
[('L1.in', 'PERSON')]


============================ Sentence 44 =============================

	L → id	addtype(id.entry,L.in)   


>> Tokens are: 
[	, L, →, d, 	, addtype(id.entry, ,, L.in, ),  ] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('L', 'PROPN'), ('→', 'SYM'), ('d', 'PROPN'), ('\t', 'SPACE'), ('addtype(id.entry', 'PROPN'), (',', 'PUNCT'), ('L.in', 'PROPN'), (')', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('L', 'ROOT'), ('→', 'punct'), ('d', 'compound'), ('\t', 'compound'), ('addtype(id.entry', 'appos'), (',', 'punct'), ('L.in', 'npadvmod'), (')', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[	, L], [L, →], [→, d], [d, 	], [	, addtype(id.entry], [addtype(id.entry, ,], [,, L.in], [L.in, )], [),  ]]

>> Trigrams: 
[[	, L, →], [L, →, d], [→, d, 	], [d, 	, addtype(id.entry], [	, addtype(id.entry, ,], [addtype(id.entry, ,, L.in], [,, L.in, )], [L.in, ),  ]]

>> Noun Phrases are: 
[	L, i, d	addtype(id.entry]

>> Named Entities are: 
[]


============================ Sentence 45 =============================

D  T.type=real   


>> Tokens are: 
[D,  , T.type, =, real,  ] 

>> PoS Tags are: 
[('D', 'PROPN'), (' ', 'SPACE'), ('T.type', 'PROPN'), ('=', 'PUNCT'), ('real', 'ADJ'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('D', 'nmod'), (' ', 'compound'), ('T.type', 'nsubj'), ('=', 'punct'), ('real', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[D,  ], [ , T.type], [T.type, =], [=, real], [real,  ]]

>> Trigrams: 
[[D,  , T.type], [ , T.type, =], [T.type, =, real], [=, real,  ]]

>> Noun Phrases are: 
[D  T.type]

>> Named Entities are: 
[]


============================ Sentence 46 =============================

L real   


>> Tokens are: 
[L, real,  ] 

>> PoS Tags are: 
[('L', 'NOUN'), ('real', 'ADJ'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('L', 'nmod'), ('real', 'amod'), (' ', 'ROOT')]

>> Bigrams: 
[[L, real], [real,  ]]

>> Trigrams: 
[[L, real,  ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 47 =============================

T  L.in=real ,  L1 L.in=real id ,  L1 L.in=real id id  id3 id2 id1 DTL L → L1 , id L →  id    Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (II) ‹#›   


>> Tokens are: 
[T,  , L.in, =, real, ,,  , L1, L.in, =, real, d, ,,  , L1, L.in, =, real, d, d,  , id3, id2, id1, DTL, L, →, L1, ,, d, L, →,  , d,    , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, II, ), ‹#›,  ] 

>> PoS Tags are: 
[('T', 'NOUN'), (' ', 'SPACE'), ('L.in', 'PROPN'), ('=', 'SYM'), ('real', 'ADV'), (',', 'PUNCT'), (' ', 'SPACE'), ('L1', 'PROPN'), ('L.in', 'PROPN'), ('=', 'SYM'), ('real', 'ADJ'), ('d', 'PROPN'), (',', 'PUNCT'), (' ', 'SPACE'), ('L1', 'PROPN'), ('L.in', 'PROPN'), ('=', 'SYM'), ('real', 'ADJ'), ('d', 'NOUN'), ('d', 'NOUN'), (' ', 'SPACE'), ('id3', 'VERB'), ('id2', 'NOUN'), ('id1', 'ADV'), ('D\uf0e0TL', 'INTJ'), ('L', 'NOUN'), ('→', 'SYM'), ('L1', 'PROPN'), (',', 'PUNCT'), ('d', 'PROPN'), ('L', 'NOUN'), ('→', 'SYM'), (' ', 'SPACE'), ('d', 'NUM'), ('   ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'PROPN'), ('(', 'PUNCT'), ('II', 'PROPN'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('T', 'compound'), (' ', 'npadvmod'), ('L.in', 'npadvmod'), ('=', 'advmod'), ('real', 'advmod'), (',', 'punct'), (' ', 'npadvmod'), ('L1', 'compound'), ('L.in', 'appos'), ('=', 'punct'), ('real', 'amod'), ('d', 'appos'), (',', 'punct'), (' ', 'compound'), ('L1', 'compound'), ('L.in', 'npadvmod'), ('=', 'punct'), ('real', 'amod'), ('d', 'dobj'), ('d', 'appos'), (' ', 'nsubj'), ('id3', 'relcl'), ('id2', 'dobj'), ('id1', 'punct'), ('D\uf0e0TL', 'nmod'), ('L', 'nmod'), ('→', 'punct'), ('L1', 'attr'), (',', 'punct'), ('d', 'compound'), ('L', 'appos'), ('→', 'punct'), (' ', 'nsubj'), ('d', 'quantmod'), ('   ', 'nummod'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'pobj'), ('#', 'nmod'), ('3130006', 'appos'), ('(', 'punct'), ('PS', 'nsubj'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'parataxis'), ('  ', 'conj'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'appos'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), ('II', 'appos'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[T,  ], [ , L.in], [L.in, =], [=, real], [real, ,], [,,  ], [ , L1], [L1, L.in], [L.in, =], [=, real], [real, d], [d, ,], [,,  ], [ , L1], [L1, L.in], [L.in, =], [=, real], [real, d], [d, d], [d,  ], [ , id3], [id3, id2], [id2, id1], [id1, DTL], [DTL, L], [L, →], [→, L1], [L1, ,], [,, d], [d, L], [L, →], [→,  ], [ , d], [d,    ], [   , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, II], [II, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[T,  , L.in], [ , L.in, =], [L.in, =, real], [=, real, ,], [real, ,,  ], [,,  , L1], [ , L1, L.in], [L1, L.in, =], [L.in, =, real], [=, real, d], [real, d, ,], [d, ,,  ], [,,  , L1], [ , L1, L.in], [L1, L.in, =], [L.in, =, real], [=, real, d], [real, d, d], [d, d,  ], [d,  , id3], [ , id3, id2], [id3, id2, id1], [id2, id1, DTL], [id1, DTL, L], [DTL, L, →], [L, →, L1], [→, L1, ,], [L1, ,, d], [,, d, L], [d, L, →], [L, →,  ], [→,  , d], [ , d,    ], [d,    , Prof.], [   , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, II], [(, II, )], [II, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[L1 L.in, real id, d, id, id2, DTL L → L1, id L, id    Prof. Jay R Dhamsaniya, PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, II]

>> Named Entities are: 
[('Jay R Dhamsaniya', 'ORG'), ('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 48 =============================

Dependency graph        Dependency graph The directed graph that represents the interdependencies between synthesized and inherited attribute at nodes in the parse tree is called dependency graph. 


>> Tokens are: 
[Dependency, graph,        , Dependency, graph, directed, graph, represents, interdependencies, synthesized, inherited, attribute, nodes, parse, tree, called, dependency, graph, .] 

>> PoS Tags are: 
[('Dependency', 'PROPN'), ('graph', 'NOUN'), ('       ', 'SPACE'), ('Dependency', 'PROPN'), ('graph', 'NOUN'), ('directed', 'VERB'), ('graph', 'NOUN'), ('represents', 'VERB'), ('interdependencies', 'NOUN'), ('synthesized', 'VERB'), ('inherited', 'VERB'), ('attribute', 'NOUN'), ('nodes', 'NOUN'), ('parse', 'NOUN'), ('tree', 'NOUN'), ('called', 'VERB'), ('dependency', 'NOUN'), ('graph', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Dependency', 'compound'), ('graph', 'nmod'), ('       ', 'compound'), ('Dependency', 'compound'), ('graph', 'nsubj'), ('directed', 'amod'), ('graph', 'appos'), ('represents', 'relcl'), ('interdependencies', 'dobj'), ('synthesized', 'nsubjpass'), ('inherited', 'conj'), ('attribute', 'dobj'), ('nodes', 'pobj'), ('parse', 'compound'), ('tree', 'pobj'), ('called', 'ROOT'), ('dependency', 'compound'), ('graph', 'oprd'), ('.', 'punct')]

>> Bigrams: 
[[Dependency, graph], [graph,        ], [       , Dependency], [Dependency, graph], [graph, directed], [directed, graph], [graph, represents], [represents, interdependencies], [interdependencies, synthesized], [synthesized, inherited], [inherited, attribute], [attribute, nodes], [nodes, parse], [parse, tree], [tree, called], [called, dependency], [dependency, graph], [graph, .]]

>> Trigrams: 
[[Dependency, graph,        ], [graph,        , Dependency], [       , Dependency, graph], [Dependency, graph, directed], [graph, directed, graph], [directed, graph, represents], [graph, represents, interdependencies], [represents, interdependencies, synthesized], [interdependencies, synthesized, inherited], [synthesized, inherited, attribute], [inherited, attribute, nodes], [attribute, nodes, parse], [nodes, parse, tree], [parse, tree, called], [tree, called, dependency], [called, dependency, graph], [dependency, graph, .]]

>> Noun Phrases are: 
[Dependency graph        Dependency graph, The directed graph, the interdependencies, attribute, nodes, the parse tree, dependency graph]

>> Named Entities are: 
[]


============================ Sentence 49 =============================

For the rule XYZ the semantic action is given by X.x=f(Y.y, Z.z) then synthesized attribute X.x depends on attributes Y.y and Z.z. 


>> Tokens are: 
[rule, XYZ, semantic, action, given, X.x, =, f(Y.y, ,, Z.z, ), synthesized, attribute, X.x, depends, attributes, Y.y, Z.z, .] 

>> PoS Tags are: 
[('rule', 'NOUN'), ('X\uf0e0YZ', 'PROPN'), ('semantic', 'ADJ'), ('action', 'NOUN'), ('given', 'VERB'), ('X.x', 'PROPN'), ('=', 'SYM'), ('f(Y.y', 'PROPN'), (',', 'PUNCT'), ('Z.z', 'PROPN'), (')', 'PUNCT'), ('synthesized', 'VERB'), ('attribute', 'NOUN'), ('X.x', 'PROPN'), ('depends', 'VERB'), ('attributes', 'NOUN'), ('Y.y', 'PROPN'), ('Z.z', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('rule', 'pobj'), ('X\uf0e0YZ', 'pobj'), ('semantic', 'amod'), ('action', 'nsubjpass'), ('given', 'ROOT'), ('X.x', 'nmod'), ('=', 'punct'), ('f(Y.y', 'pobj'), (',', 'punct'), ('Z.z', 'appos'), (')', 'punct'), ('synthesized', 'amod'), ('attribute', 'compound'), ('X.x', 'nsubj'), ('depends', 'conj'), ('attributes', 'pobj'), ('Y.y', 'appos'), ('Z.z', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[rule, XYZ], [XYZ, semantic], [semantic, action], [action, given], [given, X.x], [X.x, =], [=, f(Y.y], [f(Y.y, ,], [,, Z.z], [Z.z, )], [), synthesized], [synthesized, attribute], [attribute, X.x], [X.x, depends], [depends, attributes], [attributes, Y.y], [Y.y, Z.z], [Z.z, .]]

>> Trigrams: 
[[rule, XYZ, semantic], [XYZ, semantic, action], [semantic, action, given], [action, given, X.x], [given, X.x, =], [X.x, =, f(Y.y], [=, f(Y.y, ,], [f(Y.y, ,, Z.z], [,, Z.z, )], [Z.z, ), synthesized], [), synthesized, attribute], [synthesized, attribute, X.x], [attribute, X.x, depends], [X.x, depends, attributes], [depends, attributes, Y.y], [attributes, Y.y, Z.z], [Y.y, Z.z, .]]

>> Noun Phrases are: 
[the rule, XYZ, the semantic action, X.x=f(Y.y, Z.z, then synthesized attribute X.x, attributes, Y.y, Z.z]

>> Named Entities are: 
[('X\uf0e0YZ', 'ORG'), ('Y.y', 'ORG')]


============================ Sentence 50 =============================

The basic idea behind dependency graphs is for a compiler to look for various kinds of dependency among statements to prevent their execution in wrong order. 


>> Tokens are: 
[basic, idea, dependency, graphs, compiler, look, kinds, dependency, statements, prevent, execution, wrong, order, .] 

>> PoS Tags are: 
[('basic', 'ADJ'), ('idea', 'NOUN'), ('dependency', 'NOUN'), ('graphs', 'NOUN'), ('compiler', 'NOUN'), ('look', 'VERB'), ('kinds', 'NOUN'), ('dependency', 'NOUN'), ('statements', 'NOUN'), ('prevent', 'VERB'), ('execution', 'NOUN'), ('wrong', 'ADJ'), ('order', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('basic', 'amod'), ('idea', 'nsubj'), ('dependency', 'compound'), ('graphs', 'pobj'), ('compiler', 'nsubj'), ('look', 'advcl'), ('kinds', 'pobj'), ('dependency', 'pobj'), ('statements', 'pobj'), ('prevent', 'acl'), ('execution', 'dobj'), ('wrong', 'amod'), ('order', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[basic, idea], [idea, dependency], [dependency, graphs], [graphs, compiler], [compiler, look], [look, kinds], [kinds, dependency], [dependency, statements], [statements, prevent], [prevent, execution], [execution, wrong], [wrong, order], [order, .]]

>> Trigrams: 
[[basic, idea, dependency], [idea, dependency, graphs], [dependency, graphs, compiler], [graphs, compiler, look], [compiler, look, kinds], [look, kinds, dependency], [kinds, dependency, statements], [dependency, statements, prevent], [statements, prevent, execution], [prevent, execution, wrong], [execution, wrong, order], [wrong, order, .]]

>> Noun Phrases are: 
[The basic idea, dependency graphs, a compiler, various kinds, dependency, statements, their execution, wrong order]

>> Named Entities are: 
[]


============================ Sentence 51 =============================

    Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (II) ‹#›   


>> Tokens are: 
[    , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, II, ), ‹#›,  ] 

>> PoS Tags are: 
[('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'PROPN'), ('(', 'PUNCT'), ('II', 'PROPN'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('    ', 'nummod'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'nsubj'), ('#', 'appos'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), ('II', 'appos'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[    , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, II], [II, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[    , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, II], [(, II, )], [II, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[    Prof. Jay R Dhamsaniya, (PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, II]

>> Named Entities are: 
[('Jay R Dhamsaniya', 'ORG'), ('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 52 =============================

Algorithm : Dependency graph for each node n in the parse tree do 	for each attribute a of the grammar symbol at n do 		 


>> Tokens are: 
[Algorithm, :, Dependency, graph, node, n, parse, tree, 	, attribute, grammar, symbol, n, 		] 

>> PoS Tags are: 
[('Algorithm', 'PROPN'), (':', 'PUNCT'), ('Dependency', 'PROPN'), ('graph', 'NOUN'), ('node', 'NOUN'), ('n', 'CCONJ'), ('parse', 'NOUN'), ('tree', 'NOUN'), ('\t', 'SPACE'), ('attribute', 'NOUN'), ('grammar', 'NOUN'), ('symbol', 'NOUN'), ('n', 'CCONJ'), ('\t\t', 'SPACE')] 

>> Dependency Tags are: 
[('Algorithm', 'nsubj'), (':', 'punct'), ('Dependency', 'compound'), ('graph', 'appos'), ('node', 'pobj'), ('n', 'cc'), ('parse', 'compound'), ('tree', 'pobj'), ('\t', 'dobj'), ('attribute', 'pobj'), ('grammar', 'compound'), ('symbol', 'pobj'), ('n', 'cc'), ('\t\t', 'punct')]

>> Bigrams: 
[[Algorithm, :], [:, Dependency], [Dependency, graph], [graph, node], [node, n], [n, parse], [parse, tree], [tree, 	], [	, attribute], [attribute, grammar], [grammar, symbol], [symbol, n], [n, 		]]

>> Trigrams: 
[[Algorithm, :, Dependency], [:, Dependency, graph], [Dependency, graph, node], [graph, node, n], [node, n, parse], [n, parse, tree], [parse, tree, 	], [tree, 	, attribute], [	, attribute, grammar], [attribute, grammar, symbol], [grammar, symbol, n], [symbol, n, 		]]

>> Noun Phrases are: 
[Algorithm, Dependency graph, each node, the parse tree, each attribute, the grammar symbol]

>> Named Entities are: 
[]


============================ Sentence 53 =============================

Construct a node in the dependency graph for a; for each node n in the parse tree do 	for each semantic rule b=f(c1,c2,…..,ck) 


>> Tokens are: 
[Construct, node, dependency, graph, ;, node, n, parse, tree, 	, semantic, rule, b, =, f(c1,c2,, …, .., ,ck, )] 

>> PoS Tags are: 
[('Construct', 'VERB'), ('node', 'NOUN'), ('dependency', 'NOUN'), ('graph', 'NOUN'), (';', 'PUNCT'), ('node', 'NOUN'), ('n', 'CCONJ'), ('parse', 'NOUN'), ('tree', 'NOUN'), ('\t', 'SPACE'), ('semantic', 'ADJ'), ('rule', 'NOUN'), ('b', 'X'), ('=', 'PUNCT'), ('f(c1,c2,', 'NUM'), ('…', 'PUNCT'), ('..', 'PUNCT'), (',ck', 'PUNCT'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('Construct', 'ROOT'), ('node', 'dobj'), ('dependency', 'compound'), ('graph', 'pobj'), (';', 'punct'), ('node', 'pobj'), ('n', 'cc'), ('parse', 'compound'), ('tree', 'pobj'), ('\t', 'dobj'), ('semantic', 'amod'), ('rule', 'pobj'), ('b', 'punct'), ('=', 'appos'), ('f(c1,c2,', 'nummod'), ('…', 'punct'), ('..', 'punct'), (',ck', 'punct'), (')', 'punct')]

>> Bigrams: 
[[Construct, node], [node, dependency], [dependency, graph], [graph, ;], [;, node], [node, n], [n, parse], [parse, tree], [tree, 	], [	, semantic], [semantic, rule], [rule, b], [b, =], [=, f(c1,c2,], [f(c1,c2,, …], […, ..], [.., ,ck], [,ck, )]]

>> Trigrams: 
[[Construct, node, dependency], [node, dependency, graph], [dependency, graph, ;], [graph, ;, node], [;, node, n], [node, n, parse], [n, parse, tree], [parse, tree, 	], [tree, 	, semantic], [	, semantic, rule], [semantic, rule, b], [rule, b, =], [b, =, f(c1,c2,], [=, f(c1,c2,, …], [f(c1,c2,, …, ..], […, .., ,ck], [.., ,ck, )]]

>> Noun Phrases are: 
[a node, the dependency graph, each node, the parse tree, each semantic rule]

>> Named Entities are: 
[('Construct', 'ORG')]


============================ Sentence 54 =============================

		associated with the production used at n do 	for i=1 to k do 		construct an edge from the node for Ci to the node for b;      Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)       


>> Tokens are: 
[		, associated, production, n, 	, i=1, k, 		, construct, edge, node, Ci, node, b, ;,      , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   ] 

>> PoS Tags are: 
[('\t\t', 'SPACE'), ('associated', 'VERB'), ('production', 'NOUN'), ('n', 'CCONJ'), ('\t', 'SPACE'), ('i=1', 'PRON'), ('k', 'X'), ('\t\t', 'SPACE'), ('construct', 'VERB'), ('edge', 'NOUN'), ('node', 'NOUN'), ('Ci', 'PROPN'), ('node', 'NOUN'), ('b', 'NOUN'), (';', 'PUNCT'), ('     ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE')] 

>> Dependency Tags are: 
[('\t\t', 'nsubj'), ('associated', 'acl'), ('production', 'pobj'), ('n', 'cc'), ('\t', 'dobj'), ('i=1', 'pobj'), ('k', 'punct'), ('\t\t', 'nsubj'), ('construct', 'xcomp'), ('edge', 'dobj'), ('node', 'pobj'), ('Ci', 'pobj'), ('node', 'pobj'), ('b', 'pobj'), (';', 'punct'), ('     ', 'compound'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'dobj'), ('#', 'nmod'), ('3130006', 'appos'), ('(', 'punct'), ('PS', 'nsubj'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'parataxis'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'appos'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'appos'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'punct')]

>> Bigrams: 
[[		, associated], [associated, production], [production, n], [n, 	], [	, i=1], [i=1, k], [k, 		], [		, construct], [construct, edge], [edge, node], [node, Ci], [Ci, node], [node, b], [b, ;], [;,      ], [     , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ]]

>> Trigrams: 
[[		, associated, production], [associated, production, n], [production, n, 	], [n, 	, i=1], [	, i=1, k], [i=1, k, 		], [k, 		, construct], [		, construct, edge], [construct, edge, node], [edge, node, Ci], [node, Ci, node], [Ci, node, b], [node, b, ;], [b, ;,      ], [;,      , Prof.], [     , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ]]

>> Noun Phrases are: 
[the production, i=1, an edge, the node, Ci, the node, b,      Prof. Jay R Dhamsaniya, PS, Unit, Basic Probability, Prof. Dixita B Kagathara, #, (CD]

>> Named Entities are: 
[('Ci', 'PERSON'), ('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 55 =============================

Unit 


>> Tokens are: 
[Unit] 

>> PoS Tags are: 
[('Unit', 'NOUN')] 

>> Dependency Tags are: 
[('Unit', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Unit]

>> Named Entities are: 
[]


============================ Sentence 56 =============================

3 


>> Tokens are: 
[3] 

>> PoS Tags are: 
[('3', 'NUM')] 

>> Dependency Tags are: 
[('3', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 57 =============================

– Parsing Theory (II) ‹#›   


>> Tokens are: 
[–, Parsing, Theory, (, II, ), ‹#›,  ] 

>> PoS Tags are: 
[('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'PROPN'), ('(', 'PUNCT'), ('II', 'PROPN'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('–', 'punct'), ('Parsing', 'csubj'), ('Theory', 'dobj'), ('(', 'punct'), ('II', 'appos'), (')', 'punct'), ('‹#›', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[–, Parsing], [Parsing, Theory], [Theory, (], [(, II], [II, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, II], [(, II, )], [II, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[Theory, II]

>> Named Entities are: 
[]


============================ Sentence 58 =============================

Example: Dependency graph Example: EE1+E2  	Production 	Semantic rules  	EE1+E2	E.val = E1.val+E2.val 


>> Tokens are: 
[Example, :, Dependency, graph, Example, :, EE1+E2,  	, Production, 	, Semantic, rules,  	, EE1+E2, 	, E.val, =, E1.val+E2.val] 

>> PoS Tags are: 
[('Example', 'NOUN'), (':', 'PUNCT'), ('Dependency', 'PROPN'), ('graph', 'NOUN'), ('Example', 'NOUN'), (':', 'PUNCT'), ('E\uf0e0E1+E2', 'NUM'), (' \t', 'SPACE'), ('Production', 'PROPN'), ('\t', 'SPACE'), ('Semantic', 'PROPN'), ('rules', 'VERB'), (' \t', 'SPACE'), ('E\uf0e0E1+E2', 'PROPN'), ('\t', 'SPACE'), ('E.val', 'NOUN'), ('=', 'SYM'), ('E1.val+E2.val', 'NOUN')] 

>> Dependency Tags are: 
[('Example', 'npadvmod'), (':', 'punct'), ('Dependency', 'compound'), ('graph', 'compound'), ('Example', 'appos'), (':', 'punct'), ('E\uf0e0E1+E2', 'compound'), (' \t', 'compound'), ('Production', 'compound'), ('\t', 'compound'), ('Semantic', 'nsubj'), ('rules', 'ccomp'), (' \t', 'nmod'), ('E\uf0e0E1+E2', 'appos'), ('\t', 'compound'), ('E.val', 'dobj'), ('=', 'punct'), ('E1.val+E2.val', 'ROOT')]

>> Bigrams: 
[[Example, :], [:, Dependency], [Dependency, graph], [graph, Example], [Example, :], [:, EE1+E2], [EE1+E2,  	], [ 	, Production], [Production, 	], [	, Semantic], [Semantic, rules], [rules,  	], [ 	, EE1+E2], [EE1+E2, 	], [	, E.val], [E.val, =], [=, E1.val+E2.val]]

>> Trigrams: 
[[Example, :, Dependency], [:, Dependency, graph], [Dependency, graph, Example], [graph, Example, :], [Example, :, EE1+E2], [:, EE1+E2,  	], [EE1+E2,  	, Production], [ 	, Production, 	], [Production, 	, Semantic], [	, Semantic, rules], [Semantic, rules,  	], [rules,  	, EE1+E2], [ 	, EE1+E2, 	], [EE1+E2, 	, E.val], [	, E.val, =], [E.val, =, E1.val+E2.val]]

>> Noun Phrases are: 
[Dependency graph Example, EE1+E2  	Production 	Semantic, EE1+E2]

>> Named Entities are: 
[('E\uf0e0E1+E2', 'ORG'), ('E\uf0e0E1+E2', 'ORG')]


============================ Sentence 59 =============================

		     val val val E E1 E2 +  is synthesized from  and  Parse tree Dependency graph The edges to E.val from E1.val and E2.val shows that E.val is depends on E1.val and E2.val    Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (II) ‹#›   


>> Tokens are: 
[		     , val, val, val, E, E1, E2, +,  , synthesized,  ,  , Parse, tree, Dependency, graph, edges, E.val, E1.val, E2.val, shows, E.val, depends, E1.val, E2.val,    , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, II, ), ‹#›,  ] 

>> PoS Tags are: 
[('\t\t     ', 'SPACE'), ('val', 'NOUN'), ('val', 'NOUN'), ('val', 'NOUN'), ('E', 'NOUN'), ('E1', 'PROPN'), ('E2', 'PROPN'), ('+', 'SYM'), (' ', 'SPACE'), ('synthesized', 'VERB'), (' ', 'SPACE'), (' ', 'SPACE'), ('Parse', 'NOUN'), ('tree', 'NOUN'), ('Dependency', 'PROPN'), ('graph', 'NOUN'), ('edges', 'NOUN'), ('E.val', 'NOUN'), ('E1.val', 'ADJ'), ('E2.val', 'NOUN'), ('shows', 'NOUN'), ('E.val', 'NOUN'), ('depends', 'VERB'), ('E1.val', 'ADJ'), ('E2.val', 'NOUN'), ('   ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'PROPN'), ('(', 'PUNCT'), ('II', 'PROPN'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('\t\t     ', 'meta'), ('val', 'compound'), ('val', 'compound'), ('val', 'compound'), ('E', 'compound'), ('E1', 'compound'), ('E2', 'nsubjpass'), ('+', 'cc'), (' ', 'conj'), ('synthesized', 'ROOT'), (' ', 'pobj'), (' ', 'compound'), ('Parse', 'compound'), ('tree', 'compound'), ('Dependency', 'compound'), ('graph', 'conj'), ('edges', 'dobj'), ('E.val', 'pobj'), ('E1.val', 'amod'), ('E2.val', 'conj'), ('shows', 'pobj'), ('E.val', 'nsubj'), ('depends', 'acomp'), ('E1.val', 'amod'), ('E2.val', 'conj'), ('   ', 'conj'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'pobj'), ('#', 'npadvmod'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'advcl'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'advcl'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), ('II', 'appos'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[		     , val], [val, val], [val, val], [val, E], [E, E1], [E1, E2], [E2, +], [+,  ], [ , synthesized], [synthesized,  ], [ ,  ], [ , Parse], [Parse, tree], [tree, Dependency], [Dependency, graph], [graph, edges], [edges, E.val], [E.val, E1.val], [E1.val, E2.val], [E2.val, shows], [shows, E.val], [E.val, depends], [depends, E1.val], [E1.val, E2.val], [E2.val,    ], [   , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, II], [II, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[		     , val, val], [val, val, val], [val, val, E], [val, E, E1], [E, E1, E2], [E1, E2, +], [E2, +,  ], [+,  , synthesized], [ , synthesized,  ], [synthesized,  ,  ], [ ,  , Parse], [ , Parse, tree], [Parse, tree, Dependency], [tree, Dependency, graph], [Dependency, graph, edges], [graph, edges, E.val], [edges, E.val, E1.val], [E.val, E1.val, E2.val], [E1.val, E2.val, shows], [E2.val, shows, E.val], [shows, E.val, depends], [E.val, depends, E1.val], [depends, E1.val, E2.val], [E1.val, E2.val,    ], [E2.val,    , Prof.], [   , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, II], [(, II, )], [II, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[val val val E E1 E2,  Parse tree Dependency graph, The edges, E.val, E1.val and E2.val shows, E.val, E1.val and E2.val    Prof. Jay R Dhamsaniya, (PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, II]

>> Named Entities are: 
[('Parse', 'ORG'), ('Jay R Dhamsaniya', 'ORG'), ('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 60 =============================

Evaluation order A topological sort of a directed acyclic graph is any ordering of the nodes of the graph such that edges go from nodes earlier in the ordering to later nodes. 


>> Tokens are: 
[Evaluation, order, topological, sort, directed, acyclic, graph, ordering, nodes, graph, edges, nodes, earlier, ordering, later, nodes, .] 

>> PoS Tags are: 
[('Evaluation', 'NOUN'), ('order', 'NOUN'), ('topological', 'ADJ'), ('sort', 'NOUN'), ('directed', 'VERB'), ('acyclic', 'ADJ'), ('graph', 'NOUN'), ('ordering', 'NOUN'), ('nodes', 'NOUN'), ('graph', 'NOUN'), ('edges', 'NOUN'), ('nodes', 'NOUN'), ('earlier', 'ADV'), ('ordering', 'NOUN'), ('later', 'ADJ'), ('nodes', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Evaluation', 'compound'), ('order', 'nsubj'), ('topological', 'amod'), ('sort', 'nsubj'), ('directed', 'amod'), ('acyclic', 'amod'), ('graph', 'pobj'), ('ordering', 'attr'), ('nodes', 'pobj'), ('graph', 'pobj'), ('edges', 'nsubj'), ('nodes', 'pobj'), ('earlier', 'advmod'), ('ordering', 'pobj'), ('later', 'amod'), ('nodes', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Evaluation, order], [order, topological], [topological, sort], [sort, directed], [directed, acyclic], [acyclic, graph], [graph, ordering], [ordering, nodes], [nodes, graph], [graph, edges], [edges, nodes], [nodes, earlier], [earlier, ordering], [ordering, later], [later, nodes], [nodes, .]]

>> Trigrams: 
[[Evaluation, order, topological], [order, topological, sort], [topological, sort, directed], [sort, directed, acyclic], [directed, acyclic, graph], [acyclic, graph, ordering], [graph, ordering, nodes], [ordering, nodes, graph], [nodes, graph, edges], [graph, edges, nodes], [edges, nodes, earlier], [nodes, earlier, ordering], [earlier, ordering, later], [ordering, later, nodes], [later, nodes, .]]

>> Noun Phrases are: 
[Evaluation order, A topological sort, a directed acyclic graph, any ordering, the nodes, the graph, edges, nodes, the ordering, later nodes]

>> Named Entities are: 
[]


============================ Sentence 61 =============================

If is an edge from  to  then   appears before  in the ordering. 


>> Tokens are: 
[edge,  ,  ,   , appears,  , ordering, .] 

>> PoS Tags are: 
[('edge', 'NOUN'), (' ', 'SPACE'), (' ', 'SPACE'), ('  ', 'SPACE'), ('appears', 'VERB'), (' ', 'SPACE'), ('ordering', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('edge', 'nsubj'), (' ', 'pobj'), (' ', 'pobj'), ('  ', 'nsubj'), ('appears', 'ROOT'), (' ', 'pobj'), ('ordering', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[edge,  ], [ ,  ], [ ,   ], [  , appears], [appears,  ], [ , ordering], [ordering, .]]

>> Trigrams: 
[[edge,  ,  ], [ ,  ,   ], [ ,   , appears], [  , appears,  ], [appears,  , ordering], [ , ordering, .]]

>> Noun Phrases are: 
[an edge, the ordering]

>> Named Entities are: 
[]


============================ Sentence 62 =============================

D  T.type=real  real  L.in=real ,  L.in=real L.in=real id3 id2 id1 ,  1 2 3 4 5 6 7    Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (II) ‹#›   


>> Tokens are: 
[D,  , T.type, =, real,  , real,  , L.in, =, real, ,,  , L.in, =, real, L.in, =, real, id3, id2, id1, ,,  , 1, 2, 3, 4, 5, 6, 7,    , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, II, ), ‹#›,  ] 

>> PoS Tags are: 
[('D', 'NOUN'), (' ', 'SPACE'), ('T.type', 'PROPN'), ('=', 'PUNCT'), ('real', 'ADJ'), (' ', 'SPACE'), ('real', 'ADJ'), (' ', 'SPACE'), ('L.in', 'PROPN'), ('=', 'SYM'), ('real', 'ADJ'), (',', 'PUNCT'), (' ', 'SPACE'), ('L.in', 'PROPN'), ('=', 'SYM'), ('real', 'ADV'), ('L.in', 'PROPN'), ('=', 'SYM'), ('real', 'ADJ'), ('id3', 'NOUN'), ('id2', 'NOUN'), ('id1', 'ADV'), (',', 'PUNCT'), (' ', 'SPACE'), ('1', 'NUM'), ('2', 'NUM'), ('3', 'NUM'), ('4', 'NUM'), ('5', 'NUM'), ('6', 'NUM'), ('7', 'NUM'), ('   ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'PROPN'), ('(', 'PUNCT'), ('II', 'PROPN'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('D', 'nmod'), (' ', 'nmod'), ('T.type', 'quantmod'), ('=', 'punct'), ('real', 'amod'), (' ', 'nmod'), ('real', 'amod'), (' ', 'appos'), ('L.in', 'npadvmod'), ('=', 'punct'), ('real', 'amod'), (',', 'punct'), (' ', 'nmod'), ('L.in', 'nmod'), ('=', 'punct'), ('real', 'amod'), ('L.in', 'npadvmod'), ('=', 'punct'), ('real', 'advmod'), ('id3', 'compound'), ('id2', 'appos'), ('id1', 'advmod'), (',', 'punct'), (' ', 'appos'), ('1', 'compound'), ('2', 'appos'), ('3', 'quantmod'), ('4', 'quantmod'), ('5', 'quantmod'), ('6', 'quantmod'), ('7', 'nummod'), ('   ', 'nummod'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'nsubj'), ('#', 'appos'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), ('II', 'appos'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[D,  ], [ , T.type], [T.type, =], [=, real], [real,  ], [ , real], [real,  ], [ , L.in], [L.in, =], [=, real], [real, ,], [,,  ], [ , L.in], [L.in, =], [=, real], [real, L.in], [L.in, =], [=, real], [real, id3], [id3, id2], [id2, id1], [id1, ,], [,,  ], [ , 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7,    ], [   , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, II], [II, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[D,  , T.type], [ , T.type, =], [T.type, =, real], [=, real,  ], [real,  , real], [ , real,  ], [real,  , L.in], [ , L.in, =], [L.in, =, real], [=, real, ,], [real, ,,  ], [,,  , L.in], [ , L.in, =], [L.in, =, real], [=, real, L.in], [real, L.in, =], [L.in, =, real], [=, real, id3], [real, id3, id2], [id3, id2, id1], [id2, id1, ,], [id1, ,,  ], [,,  , 1], [ , 1, 2], [1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6], [5, 6, 7], [6, 7,    ], [7,    , Prof.], [   , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, II], [(, II, )], [II, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[L.in=real ,  L.in=real L.in=real id3 id2, (PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, II]

>> Named Entities are: 
[('Jay R Dhamsaniya', 'ORG'), ('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 63 =============================

Construction of syntax tree        Construction of syntax tree Following functions are used to create the nodes of the syntax tree. 


>> Tokens are: 
[Construction, syntax, tree,        , Construction, syntax, tree, Following, functions, create, nodes, syntax, tree, .] 

>> PoS Tags are: 
[('Construction', 'NOUN'), ('syntax', 'NOUN'), ('tree', 'NOUN'), ('       ', 'SPACE'), ('Construction', 'NOUN'), ('syntax', 'NOUN'), ('tree', 'NOUN'), ('Following', 'VERB'), ('functions', 'NOUN'), ('create', 'VERB'), ('nodes', 'NOUN'), ('syntax', 'NOUN'), ('tree', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Construction', 'nsubjpass'), ('syntax', 'compound'), ('tree', 'pobj'), ('       ', 'compound'), ('Construction', 'appos'), ('syntax', 'compound'), ('tree', 'pobj'), ('Following', 'prep'), ('functions', 'pobj'), ('create', 'xcomp'), ('nodes', 'dobj'), ('syntax', 'compound'), ('tree', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Construction, syntax], [syntax, tree], [tree,        ], [       , Construction], [Construction, syntax], [syntax, tree], [tree, Following], [Following, functions], [functions, create], [create, nodes], [nodes, syntax], [syntax, tree], [tree, .]]

>> Trigrams: 
[[Construction, syntax, tree], [syntax, tree,        ], [tree,        , Construction], [       , Construction, syntax], [Construction, syntax, tree], [syntax, tree, Following], [tree, Following, functions], [Following, functions, create], [functions, create, nodes], [create, nodes, syntax], [nodes, syntax, tree], [syntax, tree, .]]

>> Noun Phrases are: 
[Construction, syntax tree,        Construction, syntax tree, functions, the nodes, the syntax tree]

>> Named Entities are: 
[]


============================ Sentence 64 =============================

Mknode (op,left,right): creates an operator node with label op and two fields containing pointers to left and right. 


>> Tokens are: 
[Mknode, (, op, ,, left, ,, right, ):, creates, operator, node, label, op, fields, containing, pointers, left, right, .] 

>> PoS Tags are: 
[('Mknode', 'PROPN'), ('(', 'PUNCT'), ('op', 'NOUN'), (',', 'PUNCT'), ('left', 'VERB'), (',', 'PUNCT'), ('right', 'INTJ'), ('):', 'PUNCT'), ('creates', 'VERB'), ('operator', 'NOUN'), ('node', 'NOUN'), ('label', 'NOUN'), ('op', 'NOUN'), ('fields', 'NOUN'), ('containing', 'VERB'), ('pointers', 'NOUN'), ('left', 'VERB'), ('right', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Mknode', 'nsubj'), ('(', 'punct'), ('op', 'appos'), (',', 'punct'), ('left', 'conj'), (',', 'punct'), ('right', 'intj'), ('):', 'punct'), ('creates', 'ROOT'), ('operator', 'compound'), ('node', 'dobj'), ('label', 'compound'), ('op', 'pobj'), ('fields', 'conj'), ('containing', 'acl'), ('pointers', 'dobj'), ('left', 'xcomp'), ('right', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[Mknode, (], [(, op], [op, ,], [,, left], [left, ,], [,, right], [right, ):], [):, creates], [creates, operator], [operator, node], [node, label], [label, op], [op, fields], [fields, containing], [containing, pointers], [pointers, left], [left, right], [right, .]]

>> Trigrams: 
[[Mknode, (, op], [(, op, ,], [op, ,, left], [,, left, ,], [left, ,, right], [,, right, ):], [right, ):, creates], [):, creates, operator], [creates, operator, node], [operator, node, label], [node, label, op], [label, op, fields], [op, fields, containing], [fields, containing, pointers], [containing, pointers, left], [pointers, left, right], [left, right, .]]

>> Noun Phrases are: 
[Mknode, op, an operator node, label op, two fields, pointers]

>> Named Entities are: 
[('two', 'CARDINAL')]


============================ Sentence 65 =============================

Mkleaf (id, entry): creates an identifier node with label id and a field containing entry, a pointer to the symbol table entry for the identifier. 


>> Tokens are: 
[Mkleaf, (, d, ,, entry, ):, creates, identifier, node, label, d, field, containing, entry, ,, pointer, symbol, table, entry, identifier, .] 

>> PoS Tags are: 
[('Mkleaf', 'PROPN'), ('(', 'PUNCT'), ('d', 'PROPN'), (',', 'PUNCT'), ('entry', 'NOUN'), ('):', 'PUNCT'), ('creates', 'VERB'), ('identifier', 'ADJ'), ('node', 'NOUN'), ('label', 'NOUN'), ('d', 'NOUN'), ('field', 'NOUN'), ('containing', 'VERB'), ('entry', 'NOUN'), (',', 'PUNCT'), ('pointer', 'NOUN'), ('symbol', 'NOUN'), ('table', 'NOUN'), ('entry', 'NOUN'), ('identifier', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Mkleaf', 'nsubj'), ('(', 'punct'), ('d', 'appos'), (',', 'punct'), ('entry', 'appos'), ('):', 'punct'), ('creates', 'ROOT'), ('identifier', 'amod'), ('node', 'dobj'), ('label', 'pobj'), ('d', 'dep'), ('field', 'conj'), ('containing', 'acl'), ('entry', 'dobj'), (',', 'punct'), ('pointer', 'appos'), ('symbol', 'compound'), ('table', 'compound'), ('entry', 'pobj'), ('identifier', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Mkleaf, (], [(, d], [d, ,], [,, entry], [entry, ):], [):, creates], [creates, identifier], [identifier, node], [node, label], [label, d], [d, field], [field, containing], [containing, entry], [entry, ,], [,, pointer], [pointer, symbol], [symbol, table], [table, entry], [entry, identifier], [identifier, .]]

>> Trigrams: 
[[Mkleaf, (, d], [(, d, ,], [d, ,, entry], [,, entry, ):], [entry, ):, creates], [):, creates, identifier], [creates, identifier, node], [identifier, node, label], [node, label, d], [label, d, field], [d, field, containing], [field, containing, entry], [containing, entry, ,], [entry, ,, pointer], [,, pointer, symbol], [pointer, symbol, table], [symbol, table, entry], [table, entry, identifier], [entry, identifier, .]]

>> Noun Phrases are: 
[Mkleaf, id, entry, an identifier node, label, entry, a pointer, the symbol table entry]

>> Named Entities are: 
[('Mkleaf', 'PERSON')]


============================ Sentence 66 =============================

Mkleaf (num, val): creates a number node with label num and a field containing val, the value of the number. 


>> Tokens are: 
[Mkleaf, (, num, ,, val, ):, creates, number, node, label, num, field, containing, val, ,, value, number, .] 

>> PoS Tags are: 
[('Mkleaf', 'PROPN'), ('(', 'PUNCT'), ('num', 'NOUN'), (',', 'PUNCT'), ('val', 'NOUN'), ('):', 'PUNCT'), ('creates', 'VERB'), ('number', 'NOUN'), ('node', 'NOUN'), ('label', 'NOUN'), ('num', 'NOUN'), ('field', 'NOUN'), ('containing', 'VERB'), ('val', 'NOUN'), (',', 'PUNCT'), ('value', 'NOUN'), ('number', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Mkleaf', 'nsubj'), ('(', 'punct'), ('num', 'appos'), (',', 'punct'), ('val', 'npadvmod'), ('):', 'punct'), ('creates', 'ROOT'), ('number', 'compound'), ('node', 'dobj'), ('label', 'compound'), ('num', 'pobj'), ('field', 'conj'), ('containing', 'acl'), ('val', 'dobj'), (',', 'punct'), ('value', 'appos'), ('number', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Mkleaf, (], [(, num], [num, ,], [,, val], [val, ):], [):, creates], [creates, number], [number, node], [node, label], [label, num], [num, field], [field, containing], [containing, val], [val, ,], [,, value], [value, number], [number, .]]

>> Trigrams: 
[[Mkleaf, (, num], [(, num, ,], [num, ,, val], [,, val, ):], [val, ):, creates], [):, creates, number], [creates, number, node], [number, node, label], [node, label, num], [label, num, field], [num, field, containing], [field, containing, val], [containing, val, ,], [val, ,, value], [,, value, number], [value, number, .]]

>> Noun Phrases are: 
[Mkleaf, num, a number node, label num, a field, val, the value, the number]

>> Named Entities are: 
[('Mkleaf', 'PERSON')]


============================ Sentence 67 =============================

    Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (II) ‹#›   


>> Tokens are: 
[    , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, II, ), ‹#›,  ] 

>> PoS Tags are: 
[('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'PROPN'), ('(', 'PUNCT'), ('II', 'PROPN'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('    ', 'nummod'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'nsubj'), ('#', 'appos'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), ('II', 'appos'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[    , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, II], [II, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[    , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, II], [(, II, )], [II, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[    Prof. Jay R Dhamsaniya, (PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, II]

>> Named Entities are: 
[('Jay R Dhamsaniya', 'ORG'), ('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 68 =============================

Construction of syntax tree for expressions Example: construct syntax tree for a-4+c 


>> Tokens are: 
[Construction, syntax, tree, expressions, Example, :, construct, syntax, tree, a-4+c] 

>> PoS Tags are: 
[('Construction', 'NOUN'), ('syntax', 'NOUN'), ('tree', 'NOUN'), ('expressions', 'NOUN'), ('Example', 'NOUN'), (':', 'PUNCT'), ('construct', 'VERB'), ('syntax', 'NOUN'), ('tree', 'NOUN'), ('a-4+c', 'NOUN')] 

>> Dependency Tags are: 
[('Construction', 'nsubj'), ('syntax', 'compound'), ('tree', 'pobj'), ('expressions', 'compound'), ('Example', 'pobj'), (':', 'punct'), ('construct', 'ROOT'), ('syntax', 'compound'), ('tree', 'dobj'), ('a-4+c', 'pobj')]

>> Bigrams: 
[[Construction, syntax], [syntax, tree], [tree, expressions], [expressions, Example], [Example, :], [:, construct], [construct, syntax], [syntax, tree], [tree, a-4+c]]

>> Trigrams: 
[[Construction, syntax, tree], [syntax, tree, expressions], [tree, expressions, Example], [expressions, Example, :], [Example, :, construct], [:, construct, syntax], [construct, syntax, tree], [syntax, tree, a-4+c]]

>> Noun Phrases are: 
[Construction, syntax tree, expressions Example, syntax tree, a-4+c]

>> Named Entities are: 
[]


============================ Sentence 69 =============================

P1: mkleaf(id, entry for a); P2: mkleaf(num, 4); P3: mknode(‘-‘,p1,p2); P4: mkleaf(id, entry for c); P5: mknode(‘+’,p3,p4);  	id	  	Num 	4  	id	  	-		  P1 P2 P3 P4 P5 	+		  Entry for a Entry for c    Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (II) ‹#› 


>> Tokens are: 
[P1, :, mkleaf(id, ,, entry, ), ;, P2, :, mkleaf(num, ,, 4, ), ;, P3, :, mknode(‘-‘,p1,p2, ), ;, P4, :, mkleaf(id, ,, entry, c, ), ;, P5, :, mknode(‘+’,p3,p4, ), ;,  	, d, 	  	, Num, 	, 4,  	, d, 	  	, -, 		  , P1, P2, P3, P4, P5, 	, +, 		  , Entry, Entry, c,    , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, II, ), ‹#›] 

>> PoS Tags are: 
[('P1', 'NOUN'), (':', 'PUNCT'), ('mkleaf(id', 'PROPN'), (',', 'PUNCT'), ('entry', 'NOUN'), (')', 'PUNCT'), (';', 'PUNCT'), ('P2', 'PROPN'), (':', 'PUNCT'), ('mkleaf(num', 'NOUN'), (',', 'PUNCT'), ('4', 'NUM'), (')', 'PUNCT'), (';', 'PUNCT'), ('P3', 'PROPN'), (':', 'PUNCT'), ('mknode(‘-‘,p1,p2', 'PROPN'), (')', 'PUNCT'), (';', 'PUNCT'), ('P4', 'PROPN'), (':', 'PUNCT'), ('mkleaf(id', 'PROPN'), (',', 'PUNCT'), ('entry', 'NOUN'), ('c', 'NOUN'), (')', 'PUNCT'), (';', 'PUNCT'), ('P5', 'PROPN'), (':', 'PUNCT'), ('mknode(‘+’,p3,p4', 'NOUN'), (')', 'PUNCT'), (';', 'PUNCT'), (' \t', 'SPACE'), ('d', 'PROPN'), ('\t  \t', 'SPACE'), ('Num', 'PROPN'), ('\t', 'SPACE'), ('4', 'NUM'), (' \t', 'SPACE'), ('d', 'NOUN'), ('\t  \t', 'SPACE'), ('-', 'PUNCT'), ('\t\t  ', 'SPACE'), ('P1', 'PROPN'), ('P2', 'PROPN'), ('P3', 'VERB'), ('P4', 'PROPN'), ('P5', 'PROPN'), ('\t', 'SPACE'), ('+', 'CCONJ'), ('\t\t  ', 'SPACE'), ('Entry', 'PROPN'), ('Entry', 'NOUN'), ('c', 'DET'), ('   ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'PROPN'), ('(', 'PUNCT'), ('II', 'PROPN'), (')', 'PUNCT'), ('‹#›', 'X')] 

>> Dependency Tags are: 
[('P1', 'nsubj'), (':', 'punct'), ('mkleaf(id', 'appos'), (',', 'punct'), ('entry', 'appos'), (')', 'punct'), (';', 'punct'), ('P2', 'appos'), (':', 'punct'), ('mkleaf(num', 'appos'), (',', 'punct'), ('4', 'appos'), (')', 'punct'), (';', 'punct'), ('P3', 'conj'), (':', 'punct'), ('mknode(‘-‘,p1,p2', 'appos'), (')', 'punct'), (';', 'punct'), ('P4', 'conj'), (':', 'punct'), ('mkleaf(id', 'appos'), (',', 'punct'), ('entry', 'appos'), ('c', 'pobj'), (')', 'punct'), (';', 'punct'), ('P5', 'appos'), (':', 'punct'), ('mknode(‘+’,p3,p4', 'appos'), (')', 'punct'), (';', 'punct'), (' \t', 'nmod'), ('d', 'compound'), ('\t  \t', 'compound'), ('Num', 'compound'), ('\t', 'appos'), ('4', 'punct'), (' \t', 'appos'), ('d', 'compound'), ('\t  \t', 'compound'), ('-', 'punct'), ('\t\t  ', 'compound'), ('P1', 'compound'), ('P2', 'nsubj'), ('P3', 'conj'), ('P4', 'compound'), ('P5', 'compound'), ('\t', 'dobj'), ('+', 'nummod'), ('\t\t  ', 'compound'), ('Entry', 'appos'), ('Entry', 'pobj'), ('c', 'quantmod'), ('   ', 'nummod'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'pobj'), ('#', 'nmod'), ('3130006', 'npadvmod'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), ('II', 'appos'), (')', 'punct'), ('‹#›', 'punct')]

>> Bigrams: 
[[P1, :], [:, mkleaf(id], [mkleaf(id, ,], [,, entry], [entry, )], [), ;], [;, P2], [P2, :], [:, mkleaf(num], [mkleaf(num, ,], [,, 4], [4, )], [), ;], [;, P3], [P3, :], [:, mknode(‘-‘,p1,p2], [mknode(‘-‘,p1,p2, )], [), ;], [;, P4], [P4, :], [:, mkleaf(id], [mkleaf(id, ,], [,, entry], [entry, c], [c, )], [), ;], [;, P5], [P5, :], [:, mknode(‘+’,p3,p4], [mknode(‘+’,p3,p4, )], [), ;], [;,  	], [ 	, d], [d, 	  	], [	  	, Num], [Num, 	], [	, 4], [4,  	], [ 	, d], [d, 	  	], [	  	, -], [-, 		  ], [		  , P1], [P1, P2], [P2, P3], [P3, P4], [P4, P5], [P5, 	], [	, +], [+, 		  ], [		  , Entry], [Entry, Entry], [Entry, c], [c,    ], [   , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, II], [II, )], [), ‹#›]]

>> Trigrams: 
[[P1, :, mkleaf(id], [:, mkleaf(id, ,], [mkleaf(id, ,, entry], [,, entry, )], [entry, ), ;], [), ;, P2], [;, P2, :], [P2, :, mkleaf(num], [:, mkleaf(num, ,], [mkleaf(num, ,, 4], [,, 4, )], [4, ), ;], [), ;, P3], [;, P3, :], [P3, :, mknode(‘-‘,p1,p2], [:, mknode(‘-‘,p1,p2, )], [mknode(‘-‘,p1,p2, ), ;], [), ;, P4], [;, P4, :], [P4, :, mkleaf(id], [:, mkleaf(id, ,], [mkleaf(id, ,, entry], [,, entry, c], [entry, c, )], [c, ), ;], [), ;, P5], [;, P5, :], [P5, :, mknode(‘+’,p3,p4], [:, mknode(‘+’,p3,p4, )], [mknode(‘+’,p3,p4, ), ;], [), ;,  	], [;,  	, d], [ 	, d, 	  	], [d, 	  	, Num], [	  	, Num, 	], [Num, 	, 4], [	, 4,  	], [4,  	, d], [ 	, d, 	  	], [d, 	  	, -], [	  	, -, 		  ], [-, 		  , P1], [		  , P1, P2], [P1, P2, P3], [P2, P3, P4], [P3, P4, P5], [P4, P5, 	], [P5, 	, +], [	, +, 		  ], [+, 		  , Entry], [		  , Entry, Entry], [Entry, Entry, c], [Entry, c,    ], [c,    , Prof.], [   , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, II], [(, II, )], [II, ), ‹#›]]

>> Noun Phrases are: 
[P1, mkleaf(id, entry, P2, mkleaf(num, P3, mknode(‘-‘,p1,p2, P4, mkleaf(id, entry, c, P5, mknode(‘+’,p3,p4,  	id	  	Num 	4  	id	  	-		  P1 P2, 		  Entry, a Entry, c    Prof. Jay R Dhamsaniya, (PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, II]

>> Named Entities are: 
[('4', 'CARDINAL'), ('P3', 'CARDINAL'), ('Jay R Dhamsaniya', 'ORG'), ('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 70 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 71 =============================

Bottom up evaluation of  S-attributed definitions        Bottom up evaluation of S-attributed definitions S-attributed definition is one such class of syntax directed definition with synthesized attributes only. 


>> Tokens are: 
[evaluation,  , S, -, attributed, definitions,        , evaluation, S, -, attributed, definitions, S, -, attributed, definition, class, syntax, directed, definition, synthesized, attributes, .] 

>> PoS Tags are: 
[('evaluation', 'NOUN'), (' ', 'SPACE'), ('S', 'PROPN'), ('-', 'PUNCT'), ('attributed', 'VERB'), ('definitions', 'NOUN'), ('       ', 'SPACE'), ('evaluation', 'NOUN'), ('S', 'PROPN'), ('-', 'PUNCT'), ('attributed', 'VERB'), ('definitions', 'NOUN'), ('S', 'PROPN'), ('-', 'PUNCT'), ('attributed', 'VERB'), ('definition', 'NOUN'), ('class', 'NOUN'), ('syntax', 'NOUN'), ('directed', 'VERB'), ('definition', 'NOUN'), ('synthesized', 'VERB'), ('attributes', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('evaluation', 'nsubj'), (' ', 'nmod'), ('S', 'npadvmod'), ('-', 'punct'), ('attributed', 'amod'), ('definitions', 'pobj'), ('       ', 'compound'), ('evaluation', 'appos'), ('S', 'npadvmod'), ('-', 'punct'), ('attributed', 'amod'), ('definitions', 'nmod'), ('S', 'npadvmod'), ('-', 'punct'), ('attributed', 'amod'), ('definition', 'pobj'), ('class', 'attr'), ('syntax', 'npadvmod'), ('directed', 'amod'), ('definition', 'pobj'), ('synthesized', 'amod'), ('attributes', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[evaluation,  ], [ , S], [S, -], [-, attributed], [attributed, definitions], [definitions,        ], [       , evaluation], [evaluation, S], [S, -], [-, attributed], [attributed, definitions], [definitions, S], [S, -], [-, attributed], [attributed, definition], [definition, class], [class, syntax], [syntax, directed], [directed, definition], [definition, synthesized], [synthesized, attributes], [attributes, .]]

>> Trigrams: 
[[evaluation,  , S], [ , S, -], [S, -, attributed], [-, attributed, definitions], [attributed, definitions,        ], [definitions,        , evaluation], [       , evaluation, S], [evaluation, S, -], [S, -, attributed], [-, attributed, definitions], [attributed, definitions, S], [definitions, S, -], [S, -, attributed], [-, attributed, definition], [attributed, definition, class], [definition, class, syntax], [class, syntax, directed], [syntax, directed, definition], [directed, definition, synthesized], [definition, synthesized, attributes], [synthesized, attributes, .]]

>> Noun Phrases are: 
[Bottom up evaluation,  S-attributed definitions, evaluation, S-attributed definitions S-attributed definition, one such class, syntax directed definition, synthesized attributes]

>> Named Entities are: 
[('one', 'CARDINAL')]


============================ Sentence 72 =============================

Synthesized attributes can be evaluated using bottom up parser only. 


>> Tokens are: 
[Synthesized, attributes, evaluated, parser, .] 

>> PoS Tags are: 
[('Synthesized', 'VERB'), ('attributes', 'NOUN'), ('evaluated', 'VERB'), ('parser', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Synthesized', 'amod'), ('attributes', 'nsubjpass'), ('evaluated', 'ROOT'), ('parser', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Synthesized, attributes], [attributes, evaluated], [evaluated, parser], [parser, .]]

>> Trigrams: 
[[Synthesized, attributes, evaluated], [attributes, evaluated, parser], [evaluated, parser, .]]

>> Noun Phrases are: 
[Synthesized attributes, bottom, parser]

>> Named Entities are: 
[('Synthesized', 'ORG')]


============================ Sentence 73 =============================

Synthesized attributes on the parser stack Consider the production AXYZ and associated semantic action is A.a=f(X.x, Y.y, Z.z)  	State 	Value 


>> Tokens are: 
[Synthesized, attributes, parser, stack, Consider, production, AXYZ, associated, semantic, action, A.a, =, f(X.x, ,, Y.y, ,, Z.z, ),  	, State, 	, Value] 

>> PoS Tags are: 
[('Synthesized', 'VERB'), ('attributes', 'NOUN'), ('parser', 'ADJ'), ('stack', 'NOUN'), ('Consider', 'VERB'), ('production', 'NOUN'), ('A\uf0e0XYZ', 'NUM'), ('associated', 'ADJ'), ('semantic', 'ADJ'), ('action', 'NOUN'), ('A.a', 'PROPN'), ('=', 'SYM'), ('f(X.x', 'PROPN'), (',', 'PUNCT'), ('Y.y', 'PROPN'), (',', 'PUNCT'), ('Z.z', 'PROPN'), (')', 'PUNCT'), (' \t', 'SPACE'), ('State', 'PROPN'), ('\t', 'SPACE'), ('Value', 'PROPN')] 

>> Dependency Tags are: 
[('Synthesized', 'amod'), ('attributes', 'nsubj'), ('parser', 'amod'), ('stack', 'pobj'), ('Consider', 'ROOT'), ('production', 'dobj'), ('A\uf0e0XYZ', 'nummod'), ('associated', 'amod'), ('semantic', 'amod'), ('action', 'conj'), ('A.a', 'nmod'), ('=', 'punct'), ('f(X.x', 'attr'), (',', 'punct'), ('Y.y', 'conj'), (',', 'punct'), ('Z.z', 'appos'), (')', 'punct'), (' \t', 'compound'), ('State', 'compound'), ('\t', 'compound'), ('Value', 'appos')]

>> Bigrams: 
[[Synthesized, attributes], [attributes, parser], [parser, stack], [stack, Consider], [Consider, production], [production, AXYZ], [AXYZ, associated], [associated, semantic], [semantic, action], [action, A.a], [A.a, =], [=, f(X.x], [f(X.x, ,], [,, Y.y], [Y.y, ,], [,, Z.z], [Z.z, )], [),  	], [ 	, State], [State, 	], [	, Value]]

>> Trigrams: 
[[Synthesized, attributes, parser], [attributes, parser, stack], [parser, stack, Consider], [stack, Consider, production], [Consider, production, AXYZ], [production, AXYZ, associated], [AXYZ, associated, semantic], [associated, semantic, action], [semantic, action, A.a], [action, A.a, =], [A.a, =, f(X.x], [=, f(X.x, ,], [f(X.x, ,, Y.y], [,, Y.y, ,], [Y.y, ,, Z.z], [,, Z.z, )], [Z.z, ),  	], [),  	, State], [ 	, State, 	], [State, 	, Value]]

>> Noun Phrases are: 
[Synthesized attributes, the parser stack, the production, associated semantic action, A.a=f(X.x, Y.y, Z.z,  	State 	Value]

>> Named Entities are: 
[('Synthesized', 'ORG'), ('A\uf0e0XYZ', 'CARDINAL'), ('Y.y', 'ORG')]


============================ Sentence 74 =============================

 		 		 		  top Before reduction 	State 	Value 


>> Tokens are: 
[ 		 		 		  , reduction, 	, State, 	, Value] 

>> PoS Tags are: 
[(' \t\t \t\t \t\t  ', 'SPACE'), ('reduction', 'NOUN'), ('\t', 'SPACE'), ('State', 'PROPN'), ('\t', 'SPACE'), ('Value', 'PROPN')] 

>> Dependency Tags are: 
[(' \t\t \t\t \t\t  ', 'amod'), ('reduction', 'compound'), ('\t', 'compound'), ('State', 'compound'), ('\t', 'compound'), ('Value', 'pobj')]

>> Bigrams: 
[[ 		 		 		  , reduction], [reduction, 	], [	, State], [State, 	], [	, Value]]

>> Trigrams: 
[[ 		 		 		  , reduction, 	], [reduction, 	, State], [	, State, 	], [State, 	, Value]]

>> Noun Phrases are: 
[ 		 		 		  top, reduction 	State 	Value]

>> Named Entities are: 
[('State', 'ORG')]


============================ Sentence 75 =============================

 		 		 		  top After reduction top-1 top-2      Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (II) ‹#› 


>> Tokens are: 
[ 		 		 		  , reduction, top-1, top-2,      , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, II, ), ‹#›] 

>> PoS Tags are: 
[(' \t\t \t\t \t\t  ', 'SPACE'), ('reduction', 'NOUN'), ('top-1', 'NOUN'), ('top-2', 'NUM'), ('     ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'PROPN'), ('(', 'PUNCT'), ('II', 'PROPN'), (')', 'PUNCT'), ('‹#›', 'X')] 

>> Dependency Tags are: 
[(' \t\t \t\t \t\t  ', 'amod'), ('reduction', 'pobj'), ('top-1', 'punct'), ('top-2', 'punct'), ('     ', 'compound'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'dative'), ('#', 'nmod'), ('3130006', 'appos'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), ('II', 'appos'), (')', 'punct'), ('‹#›', 'punct')]

>> Bigrams: 
[[ 		 		 		  , reduction], [reduction, top-1], [top-1, top-2], [top-2,      ], [     , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, II], [II, )], [), ‹#›]]

>> Trigrams: 
[[ 		 		 		  , reduction, top-1], [reduction, top-1, top-2], [top-1, top-2,      ], [top-2,      , Prof.], [     , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, II], [(, II, )], [II, ), ‹#›]]

>> Noun Phrases are: 
[ 		 		 		  top, reduction,      Prof. Jay R Dhamsaniya, (PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, II]

>> Named Entities are: 
[('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 76 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 77 =============================

Bottom up evaluation of S-attributed definitions  	Production 	Semantic rules 	L  En	Print (val[top]) 


>> Tokens are: 
[evaluation, S, -, attributed, definitions,  	, Production, 	, Semantic, rules, 	, L, , En, 	, Print, (, val[top, ], )] 

>> PoS Tags are: 
[('evaluation', 'NOUN'), ('S', 'PROPN'), ('-', 'PUNCT'), ('attributed', 'VERB'), ('definitions', 'NOUN'), (' \t', 'SPACE'), ('Production', 'PROPN'), ('\t', 'SPACE'), ('Semantic', 'PROPN'), ('rules', 'VERB'), ('\t', 'SPACE'), ('L', 'PROPN'), ('\uf0e0', 'PROPN'), ('En', 'PROPN'), ('\t', 'SPACE'), ('Print', 'PROPN'), ('(', 'PUNCT'), ('val[top', 'PROPN'), (']', 'PUNCT'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('evaluation', 'ROOT'), ('S', 'npadvmod'), ('-', 'punct'), ('attributed', 'amod'), ('definitions', 'nmod'), (' \t', 'compound'), ('Production', 'compound'), ('\t', 'compound'), ('Semantic', 'amod'), ('rules', 'compound'), ('\t', 'compound'), ('L', 'compound'), ('\uf0e0', 'compound'), ('En', 'compound'), ('\t', 'compound'), ('Print', 'pobj'), ('(', 'punct'), ('val[top', 'appos'), (']', 'punct'), (')', 'punct')]

>> Bigrams: 
[[evaluation, S], [S, -], [-, attributed], [attributed, definitions], [definitions,  	], [ 	, Production], [Production, 	], [	, Semantic], [Semantic, rules], [rules, 	], [	, L], [L, ], [, En], [En, 	], [	, Print], [Print, (], [(, val[top], [val[top, ]], [], )]]

>> Trigrams: 
[[evaluation, S, -], [S, -, attributed], [-, attributed, definitions], [attributed, definitions,  	], [definitions,  	, Production], [ 	, Production, 	], [Production, 	, Semantic], [	, Semantic, rules], [Semantic, rules, 	], [rules, 	, L], [	, L, ], [L, , En], [, En, 	], [En, 	, Print], [	, Print, (], [Print, (, val[top], [(, val[top, ]], [val[top, ], )]]

>> Noun Phrases are: 
[Bottom up evaluation, S-attributed definitions  	Production 	Semantic rules 	L  En	Print, val[top]

>> Named Entities are: 
[]


============================ Sentence 78 =============================

	E  E1+T	val[top]=val[top-2] + val[top] 	E  T	 	T  T1*F	val[top]=val[top-2] * val[top] 


>> Tokens are: 
[	, E, , E1+T, 	, val[top]=val[top-2, ], +, val[top, ], 	, E, , T, 	 	, T, , T1*F, 	, val[top]=val[top-2, ], *, val[top, ]] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('E', 'PROPN'), ('\uf0e0', 'PROPN'), ('E1+T', 'PROPN'), ('\t', 'SPACE'), ('val[top]=val[top-2', 'PROPN'), (']', 'PUNCT'), ('+', 'SYM'), ('val[top', 'ADP'), (']', 'PUNCT'), ('\t', 'SPACE'), ('E', 'PROPN'), ('\uf0e0', 'NOUN'), ('T', 'NOUN'), ('\t \t', 'SPACE'), ('T', 'PROPN'), ('\uf0e0', 'PROPN'), ('T1*F', 'PROPN'), ('\t', 'SPACE'), ('val[top]=val[top-2', 'NOUN'), (']', 'PUNCT'), ('*', 'PUNCT'), ('val[top', 'PROPN'), (']', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('E', 'compound'), ('\uf0e0', 'ROOT'), ('E1+T', 'compound'), ('\t', 'appos'), ('val[top]=val[top-2', 'appos'), (']', 'punct'), ('+', 'cc'), ('val[top', 'appos'), (']', 'punct'), ('\t', 'compound'), ('E', 'compound'), ('\uf0e0', 'appos'), ('T', 'compound'), ('\t \t', 'compound'), ('T', 'appos'), ('\uf0e0', 'appos'), ('T1*F', 'compound'), ('\t', 'compound'), ('val[top]=val[top-2', 'appos'), (']', 'punct'), ('*', 'punct'), ('val[top', 'appos'), (']', 'punct')]

>> Bigrams: 
[[	, E], [E, ], [, E1+T], [E1+T, 	], [	, val[top]=val[top-2], [val[top]=val[top-2, ]], [], +], [+, val[top], [val[top, ]], [], 	], [	, E], [E, ], [, T], [T, 	 	], [	 	, T], [T, ], [, T1*F], [T1*F, 	], [	, val[top]=val[top-2], [val[top]=val[top-2, ]], [], *], [*, val[top], [val[top, ]]]

>> Trigrams: 
[[	, E, ], [E, , E1+T], [, E1+T, 	], [E1+T, 	, val[top]=val[top-2], [	, val[top]=val[top-2, ]], [val[top]=val[top-2, ], +], [], +, val[top], [+, val[top, ]], [val[top, ], 	], [], 	, E], [	, E, ], [E, , T], [, T, 	 	], [T, 	 	, T], [	 	, T, ], [T, , T1*F], [, T1*F, 	], [T1*F, 	, val[top]=val[top-2], [	, val[top]=val[top-2, ]], [val[top]=val[top-2, ], *], [], *, val[top], [*, val[top, ]]]

>> Noun Phrases are: 
[	E , val[top]=val[top-2, 	E , T	 	T, , T1*F	val[top]=val[top-2, * val[top]

>> Named Entities are: 
[]


============================ Sentence 79 =============================

	T  F	 	F  (E)	val[top]=val[top-2] - val[top] 	F  digit	  	Input	State	Val	Production Used  	3*5n 


>> Tokens are: 
[	, T, , F, 	 	, F, , (, E, ), 	, val[top]=val[top-2, ], -, val[top, ], 	, F, , digit, 	  	, Input, 	, State, 	, Val, 	, Production,  	, 3, *, 5n] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('T', 'PROPN'), ('\uf0e0', 'NOUN'), ('F', 'PROPN'), ('\t \t', 'SPACE'), ('F', 'PROPN'), ('\uf0e0', 'PROPN'), ('(', 'PUNCT'), ('E', 'NOUN'), (')', 'PUNCT'), ('\t', 'SPACE'), ('val[top]=val[top-2', 'NOUN'), (']', 'PUNCT'), ('-', 'PUNCT'), ('val[top', 'PROPN'), (']', 'PUNCT'), ('\t', 'SPACE'), ('F', 'PROPN'), ('\uf0e0', 'NOUN'), ('digit', 'NOUN'), ('\t  \t', 'SPACE'), ('Input', 'PROPN'), ('\t', 'SPACE'), ('State', 'PROPN'), ('\t', 'SPACE'), ('Val', 'PROPN'), ('\t', 'SPACE'), ('Production', 'PROPN'), (' \t', 'SPACE'), ('3', 'NUM'), ('*', 'SYM'), ('5n', 'NUM')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('T', 'compound'), ('\uf0e0', 'dep'), ('F', 'compound'), ('\t \t', 'compound'), ('F', 'compound'), ('\uf0e0', 'appos'), ('(', 'punct'), ('E', 'appos'), (')', 'punct'), ('\t', 'compound'), ('val[top]=val[top-2', 'appos'), (']', 'punct'), ('-', 'punct'), ('val[top', 'dep'), (']', 'punct'), ('\t', 'compound'), ('F', 'compound'), ('\uf0e0', 'compound'), ('digit', 'conj'), ('\t  \t', 'compound'), ('Input', 'compound'), ('\t', 'compound'), ('State', 'compound'), ('\t', 'compound'), ('Val', 'compound'), ('\t', 'compound'), ('Production', 'nsubj'), (' \t', 'dobj'), ('3', 'nummod'), ('*', 'punct'), ('5n', 'punct')]

>> Bigrams: 
[[	, T], [T, ], [, F], [F, 	 	], [	 	, F], [F, ], [, (], [(, E], [E, )], [), 	], [	, val[top]=val[top-2], [val[top]=val[top-2, ]], [], -], [-, val[top], [val[top, ]], [], 	], [	, F], [F, ], [, digit], [digit, 	  	], [	  	, Input], [Input, 	], [	, State], [State, 	], [	, Val], [Val, 	], [	, Production], [Production,  	], [ 	, 3], [3, *], [*, 5n]]

>> Trigrams: 
[[	, T, ], [T, , F], [, F, 	 	], [F, 	 	, F], [	 	, F, ], [F, , (], [, (, E], [(, E, )], [E, ), 	], [), 	, val[top]=val[top-2], [	, val[top]=val[top-2, ]], [val[top]=val[top-2, ], -], [], -, val[top], [-, val[top, ]], [val[top, ], 	], [], 	, F], [	, F, ], [F, , digit], [, digit, 	  	], [digit, 	  	, Input], [	  	, Input, 	], [Input, 	, State], [	, State, 	], [State, 	, Val], [	, Val, 	], [Val, 	, Production], [	, Production,  	], [Production,  	, 3], [ 	, 3, *], [3, *, 5n]]

>> Noun Phrases are: 
[F	 	F , (E, 	val[top]=val[top-2, 	  	Input	State	Val	Production]

>> Named Entities are: 
[('3', 'CARDINAL'), ('5n', 'CARDINAL')]


============================ Sentence 80 =============================

	-	-	  	*5n 


>> Tokens are: 
[	, -, 	, -, 	  	, *, 5n] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('-', 'PUNCT'), ('\t', 'SPACE'), ('-', 'PUNCT'), ('\t  \t', 'SPACE'), ('*', 'PUNCT'), ('5n', 'NUM')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('-', 'punct'), ('\t', 'compound'), ('-', 'punct'), ('\t  \t', 'ROOT'), ('*', 'punct'), ('5n', 'punct')]

>> Bigrams: 
[[	, -], [-, 	], [	, -], [-, 	  	], [	  	, *], [*, 5n]]

>> Trigrams: 
[[	, -, 	], [-, 	, -], [	, -, 	  	], [-, 	  	, *], [	  	, *, 5n]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('5n', 'CARDINAL')]


============================ Sentence 81 =============================

	3	3	  	*5n 


>> Tokens are: 
[	, 3, 	, 3, 	  	, *, 5n] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('3', 'NUM'), ('\t', 'SPACE'), ('3', 'NUM'), ('\t  \t', 'SPACE'), ('*', 'PUNCT'), ('5n', 'NUM')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('3', 'nummod'), ('\t', 'conj'), ('3', 'compound'), ('\t  \t', 'appos'), ('*', 'punct'), ('5n', 'punct')]

>> Bigrams: 
[[	, 3], [3, 	], [	, 3], [3, 	  	], [	  	, *], [*, 5n]]

>> Trigrams: 
[[	, 3, 	], [3, 	, 3], [	, 3, 	  	], [3, 	  	, *], [	  	, *, 5n]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('3', 'CARDINAL'), ('5n', 'CARDINAL')]


============================ Sentence 82 =============================

	F	3	Fdigit  	*5n 


>> Tokens are: 
[	, F, 	, 3, 	, Fdigit,  	, *, 5n] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('F', 'PROPN'), ('\t', 'SPACE'), ('3', 'NUM'), ('\t', 'SPACE'), ('F\uf0e0digit', 'PUNCT'), (' \t', 'SPACE'), ('*', 'PUNCT'), ('5n', 'NUM')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('F', 'compound'), ('\t', 'ROOT'), ('3', 'nummod'), ('\t', 'appos'), ('F\uf0e0digit', 'punct'), (' \t', 'appos'), ('*', 'punct'), ('5n', 'punct')]

>> Bigrams: 
[[	, F], [F, 	], [	, 3], [3, 	], [	, Fdigit], [Fdigit,  	], [ 	, *], [*, 5n]]

>> Trigrams: 
[[	, F, 	], [F, 	, 3], [	, 3, 	], [3, 	, Fdigit], [	, Fdigit,  	], [Fdigit,  	, *], [ 	, *, 5n]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('5n', 'CARDINAL')]


============================ Sentence 83 =============================

	T	3	TF  	5n 


>> Tokens are: 
[	, T, 	, 3, 	, TF,  	, 5n] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('T', 'NOUN'), ('\t', 'SPACE'), ('3', 'NUM'), ('\t', 'SPACE'), ('T\uf0e0F', 'PRON'), (' \t', 'SPACE'), ('5n', 'NUM')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('T', 'compound'), ('\t', 'nsubj'), ('3', 'nummod'), ('\t', 'ROOT'), ('T\uf0e0F', 'dep'), (' \t', 'compound'), ('5n', 'appos')]

>> Bigrams: 
[[	, T], [T, 	], [	, 3], [3, 	], [	, TF], [TF,  	], [ 	, 5n]]

>> Trigrams: 
[[	, T, 	], [T, 	, 3], [	, 3, 	], [3, 	, TF], [	, TF,  	], [TF,  	, 5n]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('T\uf0e0F', 'ORG'), ('5n', 'CARDINAL')]


============================ Sentence 84 =============================

	T* 


>> Tokens are: 
[	, T, *] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('T', 'PROPN'), ('*', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('T', 'ROOT'), ('*', 'punct')]

>> Bigrams: 
[[	, T], [T, *]]

>> Trigrams: 
[[	, T, *]]

>> Noun Phrases are: 
[	T]

>> Named Entities are: 
[]


============================ Sentence 85 =============================

	3	  	n	T*5	3,5	  	n	T*F 


>> Tokens are: 
[	, 3, 	  	, n, 	, T*5, 	, 3,5, 	  	, n, 	, T*F] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('3', 'NUM'), ('\t  \t', 'SPACE'), ('n', 'CCONJ'), ('\t', 'SPACE'), ('T*5', 'PROPN'), ('\t', 'SPACE'), ('3,5', 'NUM'), ('\t  \t', 'SPACE'), ('n', 'CCONJ'), ('\t', 'SPACE'), ('T*F', 'PROPN')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('3', 'nummod'), ('\t  \t', 'appos'), ('n', 'cc'), ('\t', 'compound'), ('T*5', 'conj'), ('\t', 'compound'), ('3,5', 'nummod'), ('\t  \t', 'appos'), ('n', 'cc'), ('\t', 'conj'), ('T*F', 'punct')]

>> Bigrams: 
[[	, 3], [3, 	  	], [	  	, n], [n, 	], [	, T*5], [T*5, 	], [	, 3,5], [3,5, 	  	], [	  	, n], [n, 	], [	, T*F]]

>> Trigrams: 
[[	, 3, 	  	], [3, 	  	, n], [	  	, n, 	], [n, 	, T*5], [	, T*5, 	], [T*5, 	, 3,5], [	, 3,5, 	  	], [3,5, 	  	, n], [	  	, n, 	], [n, 	, T*F]]

>> Noun Phrases are: 
[	T*5]

>> Named Entities are: 
[('T*5', 'GPE'), ('T*F', 'GPE')]


============================ Sentence 86 =============================

	3,5	Fdigit  	n	T	15	TT1*F  	n	E	15	ET  		En	15	  		L	15	L  


>> Tokens are: 
[	, 3,5, 	, Fdigit,  	, n, 	, T, 	, 15, 	, TT1*F,  	, n, 	, E, 	, 15, 	, ET,  		, En, 	, 15, 	  		, L, 	, 15, 	, L, ] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('3,5', 'NUM'), ('\t', 'SPACE'), ('F\uf0e0digit', 'PUNCT'), (' \t', 'SPACE'), ('n', 'CCONJ'), ('\t', 'SPACE'), ('T', 'PROPN'), ('\t', 'SPACE'), ('15', 'NUM'), ('\t', 'SPACE'), ('T\uf0e0T1*F', 'PROPN'), (' \t', 'SPACE'), ('n', 'CCONJ'), ('\t', 'SPACE'), ('E', 'PROPN'), ('\t', 'SPACE'), ('15', 'NUM'), ('\t', 'SPACE'), ('E\uf0e0T', 'NOUN'), (' \t\t', 'SPACE'), ('En', 'PROPN'), ('\t', 'SPACE'), ('15', 'NUM'), ('\t  \t\t', 'SPACE'), ('L', 'PROPN'), ('\t', 'SPACE'), ('15', 'PROPN'), ('\t', 'SPACE'), ('L', 'PROPN'), ('\uf0e0', 'NOUN')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('3,5', 'compound'), ('\t', 'nmod'), ('F\uf0e0digit', 'punct'), (' \t', 'appos'), ('n', 'cc'), ('\t', 'compound'), ('T', 'compound'), ('\t', 'conj'), ('15', 'nummod'), ('\t', 'nmod'), ('T\uf0e0T1*F', 'nmod'), (' \t', 'nmod'), ('n', 'cc'), ('\t', 'conj'), ('E', 'compound'), ('\t', 'conj'), ('15', 'nummod'), ('\t', 'amod'), ('E\uf0e0T', 'appos'), (' \t\t', 'punct'), ('En', 'compound'), ('\t', 'nmod'), ('15', 'nummod'), ('\t  \t\t', 'compound'), ('L', 'compound'), ('\t', 'appos'), ('15', 'nummod'), ('\t', 'compound'), ('L', 'compound'), ('\uf0e0', 'ROOT')]

>> Bigrams: 
[[	, 3,5], [3,5, 	], [	, Fdigit], [Fdigit,  	], [ 	, n], [n, 	], [	, T], [T, 	], [	, 15], [15, 	], [	, TT1*F], [TT1*F,  	], [ 	, n], [n, 	], [	, E], [E, 	], [	, 15], [15, 	], [	, ET], [ET,  		], [ 		, En], [En, 	], [	, 15], [15, 	  		], [	  		, L], [L, 	], [	, 15], [15, 	], [	, L], [L, ]]

>> Trigrams: 
[[	, 3,5, 	], [3,5, 	, Fdigit], [	, Fdigit,  	], [Fdigit,  	, n], [ 	, n, 	], [n, 	, T], [	, T, 	], [T, 	, 15], [	, 15, 	], [15, 	, TT1*F], [	, TT1*F,  	], [TT1*F,  	, n], [ 	, n, 	], [n, 	, E], [	, E, 	], [E, 	, 15], [	, 15, 	], [15, 	, ET], [	, ET,  		], [ET,  		, En], [ 		, En, 	], [En, 	, 15], [	, 15, 	  		], [15, 	  		, L], [	  		, L, 	], [L, 	, 15], [	, 15, 	], [15, 	, L], [	, L, ]]

>> Noun Phrases are: 
[	ET]

>> Named Entities are: 
[('3,5', 'CARDINAL'), ('15', 'CARDINAL'), ('E\uf0e0T', 'ORG')]


============================ Sentence 87 =============================

En                                    Implementation of a desk calculator with bottom  up parser   


>> Tokens are: 
[En,                                    , Implementation, desk, calculator,  , parser,  ] 

>> PoS Tags are: 
[('En', 'PROPN'), ('                                   ', 'SPACE'), ('Implementation', 'NOUN'), ('desk', 'NOUN'), ('calculator', 'NOUN'), (' ', 'SPACE'), ('parser', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('En', 'nmod'), ('                                   ', 'pobj'), ('Implementation', 'nsubj'), ('desk', 'compound'), ('calculator', 'pobj'), (' ', 'pobj'), ('parser', 'amod'), (' ', 'ROOT')]

>> Bigrams: 
[[En,                                    ], [                                   , Implementation], [Implementation, desk], [desk, calculator], [calculator,  ], [ , parser], [parser,  ]]

>> Trigrams: 
[[En,                                    , Implementation], [                                   , Implementation, desk], [Implementation, desk, calculator], [desk, calculator,  ], [calculator,  , parser], [ , parser,  ]]

>> Noun Phrases are: 
[En                                    Implementation, a desk calculator]

>> Named Entities are: 
[]


============================ Sentence 88 =============================

Move made by translator    Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (II) ‹#›   


>> Tokens are: 
[translator,    , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, II, ), ‹#›,  ] 

>> PoS Tags are: 
[('translator', 'NOUN'), ('   ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'PROPN'), ('(', 'PUNCT'), ('II', 'PROPN'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('translator', 'compound'), ('   ', 'nummod'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'pobj'), ('#', 'nmod'), ('3130006', 'npadvmod'), ('(', 'punct'), ('PS', 'nsubj'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'parataxis'), ('  ', 'appos'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'appos'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'appos'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), ('II', 'appos'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[translator,    ], [   , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, II], [II, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[translator,    , Prof.], [   , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, II], [(, II, )], [II, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[Move, translator    Prof. Jay R Dhamsaniya, PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #, (CD, Unit, Theory, II]

>> Named Entities are: 
[('Jay R Dhamsaniya', 'ORG'), ('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 89 =============================

L-Attributed definitions        L-Attributed definitions 


>> Tokens are: 
[L, -, Attributed, definitions,        , L, -, Attributed, definitions] 

>> PoS Tags are: 
[('L', 'NOUN'), ('-', 'PUNCT'), ('Attributed', 'VERB'), ('definitions', 'NOUN'), ('       ', 'SPACE'), ('L', 'NOUN'), ('-', 'PUNCT'), ('Attributed', 'VERB'), ('definitions', 'NOUN')] 

>> Dependency Tags are: 
[('L', 'npadvmod'), ('-', 'punct'), ('Attributed', 'amod'), ('definitions', 'ROOT'), ('       ', 'nmod'), ('L', 'compound'), ('-', 'punct'), ('Attributed', 'amod'), ('definitions', 'appos')]

>> Bigrams: 
[[L, -], [-, Attributed], [Attributed, definitions], [definitions,        ], [       , L], [L, -], [-, Attributed], [Attributed, definitions]]

>> Trigrams: 
[[L, -, Attributed], [-, Attributed, definitions], [Attributed, definitions,        ], [definitions,        , L], [       , L, -], [L, -, Attributed], [-, Attributed, definitions]]

>> Noun Phrases are: 
[L-Attributed definitions,        L-Attributed definitions]

>> Named Entities are: 
[]


============================ Sentence 90 =============================

A syntax directed definition is L-attributed if each inherited attribute of , , on the right side of depends only on: The attributes of the symbols j-1to the left of  in the production and The inherited attribute of A. Example:       Above syntax directed definition is not L-attributed because the inherited attribute Q.i of the grammar symbol Q depends on the attribute R.s of the grammar symbol to its right. 


>> Tokens are: 
[syntax, directed, definition, L, -, attributed, inherited, attribute, ,, ,, right, depends, :, attributes, symbols, j-1to, left,  , production, inherited, attribute, A., Example, :,       , syntax, directed, definition, L, -, attributed, inherited, attribute, Q.i, grammar, symbol, Q, depends, attribute, R.s, grammar, symbol, right, .] 

>> PoS Tags are: 
[('syntax', 'NOUN'), ('directed', 'VERB'), ('definition', 'NOUN'), ('L', 'NOUN'), ('-', 'PUNCT'), ('attributed', 'VERB'), ('inherited', 'VERB'), ('attribute', 'NOUN'), (',', 'PUNCT'), (',', 'PUNCT'), ('right', 'ADJ'), ('depends', 'VERB'), (':', 'PUNCT'), ('attributes', 'NOUN'), ('symbols', 'NOUN'), ('j-1to', 'PROPN'), ('left', 'NOUN'), (' ', 'SPACE'), ('production', 'NOUN'), ('inherited', 'VERB'), ('attribute', 'NOUN'), ('A.', 'NOUN'), ('Example', 'NOUN'), (':', 'PUNCT'), ('      ', 'SPACE'), ('syntax', 'NOUN'), ('directed', 'VERB'), ('definition', 'NOUN'), ('L', 'NOUN'), ('-', 'PUNCT'), ('attributed', 'VERB'), ('inherited', 'VERB'), ('attribute', 'NOUN'), ('Q.i', 'PROPN'), ('grammar', 'NOUN'), ('symbol', 'NOUN'), ('Q', 'PROPN'), ('depends', 'VERB'), ('attribute', 'NOUN'), ('R.s', 'PROPN'), ('grammar', 'NOUN'), ('symbol', 'NOUN'), ('right', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('syntax', 'npadvmod'), ('directed', 'amod'), ('definition', 'nsubj'), ('L', 'npadvmod'), ('-', 'punct'), ('attributed', 'acomp'), ('inherited', 'amod'), ('attribute', 'advcl'), (',', 'punct'), (',', 'punct'), ('right', 'amod'), ('depends', 'conj'), (':', 'punct'), ('attributes', 'nsubj'), ('symbols', 'pobj'), ('j-1to', 'appos'), ('left', 'appos'), (' ', 'pobj'), ('production', 'pobj'), ('inherited', 'amod'), ('attribute', 'conj'), ('A.', 'compound'), ('Example', 'pobj'), (':', 'punct'), ('      ', 'appos'), ('syntax', 'npadvmod'), ('directed', 'amod'), ('definition', 'pobj'), ('L', 'npadvmod'), ('-', 'punct'), ('attributed', 'acomp'), ('inherited', 'amod'), ('attribute', 'nsubj'), ('Q.i', 'appos'), ('grammar', 'compound'), ('symbol', 'compound'), ('Q', 'pobj'), ('depends', 'advcl'), ('attribute', 'pobj'), ('R.s', 'appos'), ('grammar', 'compound'), ('symbol', 'pobj'), ('right', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[syntax, directed], [directed, definition], [definition, L], [L, -], [-, attributed], [attributed, inherited], [inherited, attribute], [attribute, ,], [,, ,], [,, right], [right, depends], [depends, :], [:, attributes], [attributes, symbols], [symbols, j-1to], [j-1to, left], [left,  ], [ , production], [production, inherited], [inherited, attribute], [attribute, A.], [A., Example], [Example, :], [:,       ], [      , syntax], [syntax, directed], [directed, definition], [definition, L], [L, -], [-, attributed], [attributed, inherited], [inherited, attribute], [attribute, Q.i], [Q.i, grammar], [grammar, symbol], [symbol, Q], [Q, depends], [depends, attribute], [attribute, R.s], [R.s, grammar], [grammar, symbol], [symbol, right], [right, .]]

>> Trigrams: 
[[syntax, directed, definition], [directed, definition, L], [definition, L, -], [L, -, attributed], [-, attributed, inherited], [attributed, inherited, attribute], [inherited, attribute, ,], [attribute, ,, ,], [,, ,, right], [,, right, depends], [right, depends, :], [depends, :, attributes], [:, attributes, symbols], [attributes, symbols, j-1to], [symbols, j-1to, left], [j-1to, left,  ], [left,  , production], [ , production, inherited], [production, inherited, attribute], [inherited, attribute, A.], [attribute, A., Example], [A., Example, :], [Example, :,       ], [:,       , syntax], [      , syntax, directed], [syntax, directed, definition], [directed, definition, L], [definition, L, -], [L, -, attributed], [-, attributed, inherited], [attributed, inherited, attribute], [inherited, attribute, Q.i], [attribute, Q.i, grammar], [Q.i, grammar, symbol], [grammar, symbol, Q], [symbol, Q, depends], [Q, depends, attribute], [depends, attribute, R.s], [attribute, R.s, grammar], [R.s, grammar, symbol], [grammar, symbol, right], [symbol, right, .]]

>> Noun Phrases are: 
[A syntax directed definition, the right side, The attributes, the symbols, j-1to, the left, the production, The inherited attribute, A. Example, syntax directed definition, the inherited attribute, Q.i, the grammar symbol Q, the attribute, R.s, the grammar symbol, its right]

>> Named Entities are: 
[('A. Example:', 'ORG')]


============================ Sentence 91 =============================

 	Production	Semantic Rules 	A LM	L.i:=l(A.i) M.i=m(L.s) A.s=f(M.s) 


>> Tokens are: 
[ 	, Production, 	, Semantic, Rules, 	, A, LM, 	, L.i:=l(A.i, ), M.i, =, m(L.s, ), A.s, =, f(M.s, )] 

>> PoS Tags are: 
[(' \t', 'SPACE'), ('Production', 'PROPN'), ('\t', 'SPACE'), ('Semantic', 'PROPN'), ('Rules', 'PROPN'), ('\t', 'SPACE'), ('A\uf0e0', 'ADV'), ('LM', 'PROPN'), ('\t', 'SPACE'), ('L.i:=l(A.i', 'PROPN'), (')', 'PUNCT'), ('M.i', 'PROPN'), ('=', 'SYM'), ('m(L.s', 'PROPN'), (')', 'PUNCT'), ('A.s', 'PROPN'), ('=', 'SYM'), ('f(M.s', 'PROPN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[(' \t', 'compound'), ('Production', 'compound'), ('\t', 'nsubj'), ('Semantic', 'compound'), ('Rules', 'compound'), ('\t', 'nsubj'), ('A\uf0e0', 'appos'), ('LM', 'compound'), ('\t', 'compound'), ('L.i:=l(A.i', 'appos'), (')', 'punct'), ('M.i', 'npadvmod'), ('=', 'punct'), ('m(L.s', 'ROOT'), (')', 'punct'), ('A.s', 'dep'), ('=', 'punct'), ('f(M.s', 'appos'), (')', 'punct')]

>> Bigrams: 
[[ 	, Production], [Production, 	], [	, Semantic], [Semantic, Rules], [Rules, 	], [	, A], [A, LM], [LM, 	], [	, L.i:=l(A.i], [L.i:=l(A.i, )], [), M.i], [M.i, =], [=, m(L.s], [m(L.s, )], [), A.s], [A.s, =], [=, f(M.s], [f(M.s, )]]

>> Trigrams: 
[[ 	, Production, 	], [Production, 	, Semantic], [	, Semantic, Rules], [Semantic, Rules, 	], [Rules, 	, A], [	, A, LM], [A, LM, 	], [LM, 	, L.i:=l(A.i], [	, L.i:=l(A.i, )], [L.i:=l(A.i, ), M.i], [), M.i, =], [M.i, =, m(L.s], [=, m(L.s, )], [m(L.s, ), A.s], [), A.s, =], [A.s, =, f(M.s], [=, f(M.s, )]]

>> Noun Phrases are: 
[LM	L.i:=l(A.i, A.s=f(M.s]

>> Named Entities are: 
[]


============================ Sentence 92 =============================

	A QR  	R.i=r(A.i) Q.i=q(R.s) 


>> Tokens are: 
[	, A, QR,  	, R.i, =, r(A.i, ), Q.i, =, q(R.s, )] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('A\uf0e0', 'VERB'), ('QR', 'PROPN'), ('\xa0\t', 'SPACE'), ('R.i', 'PROPN'), ('=', 'SYM'), ('r(A.i', 'VERB'), (')', 'PUNCT'), ('Q.i', 'PROPN'), ('=', 'PROPN'), ('q(R.s', 'PROPN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'nsubj'), ('A\uf0e0', 'nsubj'), ('QR', 'nmod'), ('\xa0\t', 'amod'), ('R.i', 'nmod'), ('=', 'punct'), ('r(A.i', 'ROOT'), (')', 'punct'), ('Q.i', 'compound'), ('=', 'compound'), ('q(R.s', 'appos'), (')', 'punct')]

>> Bigrams: 
[[	, A], [A, QR], [QR,  	], [ 	, R.i], [R.i, =], [=, r(A.i], [r(A.i, )], [), Q.i], [Q.i, =], [=, q(R.s], [q(R.s, )]]

>> Trigrams: 
[[	, A, QR], [A, QR,  	], [QR,  	, R.i], [ 	, R.i, =], [R.i, =, r(A.i], [=, r(A.i, )], [r(A.i, ), Q.i], [), Q.i, =], [Q.i, =, q(R.s], [=, q(R.s, )]]

>> Noun Phrases are: 
[Q.i=q(R.s]

>> Named Entities are: 
[]


============================ Sentence 93 =============================

 A.s=f(Q.s)   


>> Tokens are: 
[ , A.s, =, f(Q.s, ),  ] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('A.s', 'PROPN'), ('=', 'SYM'), ('f(Q.s', 'PROPN'), (')', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'nmod'), ('A.s', 'nmod'), ('=', 'punct'), ('f(Q.s', 'ROOT'), (')', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[ , A.s], [A.s, =], [=, f(Q.s], [f(Q.s, )], [),  ]]

>> Trigrams: 
[[ , A.s, =], [A.s, =, f(Q.s], [=, f(Q.s, )], [f(Q.s, ),  ]]

>> Noun Phrases are: 
[ A.s=f(Q.s]

>> Named Entities are: 
[]


============================ Sentence 94 =============================

L- Attributed   


>> Tokens are: 
[L-, Attributed,  ] 

>> PoS Tags are: 
[('L-', 'X'), ('Attributed\uf061', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('L-', 'det'), ('Attributed\uf061', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[L-, Attributed], [Attributed,  ]]

>> Trigrams: 
[[L-, Attributed,  ]]

>> Noun Phrases are: 
[L- Attributed]

>> Named Entities are: 
[]


============================ Sentence 95 =============================

Not L- Attributed   


>> Tokens are: 
[L-, Attributed,  ] 

>> PoS Tags are: 
[('L-', 'PROPN'), ('Attributed\uf072', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('L-', 'ROOT'), ('Attributed\uf072', 'npadvmod'), (' ', 'nummod')]

>> Bigrams: 
[[L-, Attributed], [Attributed,  ]]

>> Trigrams: 
[[L-, Attributed,  ]]

>> Noun Phrases are: 
[Not L-]

>> Named Entities are: 
[]


============================ Sentence 96 =============================

AXYZ     Prof. Jay R Dhamsaniya #3130006 (PS)    


>> Tokens are: 
[AXYZ,     , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   ] 

>> PoS Tags are: 
[('A\uf0e0XYZ', 'NUM'), ('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE')] 

>> Dependency Tags are: 
[('A\uf0e0XYZ', 'punct'), ('    ', 'compound'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'ROOT'), ('#', 'appos'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos')]

>> Bigrams: 
[[AXYZ,     ], [    , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ]]

>> Trigrams: 
[[AXYZ,     , Prof.], [    , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ]]

>> Noun Phrases are: 
[AXYZ     Prof. Jay R Dhamsaniya, (PS]

>> Named Entities are: 
[('A\uf0e0XYZ', 'CARDINAL'), ('Jay R Dhamsaniya', 'ORG'), ('PS', 'ORG')]


============================ Sentence 97 =============================

   Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (II) ‹#› 


>> Tokens are: 
[,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, II, ), ‹#›] 

>> PoS Tags are: 
[('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'PROPN'), ('(', 'PUNCT'), ('II', 'PROPN'), (')', 'PUNCT'), ('‹#›', 'X')] 

>> Dependency Tags are: 
[('\uf077', 'dep'), ('  ', 'dobj'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), ('II', 'appos'), (')', 'punct'), ('‹#›', 'punct')]

>> Bigrams: 
[[,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, II], [II, )], [), ‹#›]]

>> Trigrams: 
[[,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, II], [(, II, )], [II, ), ‹#›]]

>> Noun Phrases are: 
[Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, II]

>> Named Entities are: 
[('Dixita', 'PERSON')]


============================ Sentence 98 =============================

 Translation scheme        Bottom up evaluation of S-attributed definitions Translation scheme is a context free grammar in which attributes are associated with the grammar symbols and semantic actions enclosed between braces { } are inserted within the right sides of productions. 


>> Tokens are: 
[ , Translation, scheme,        , evaluation, S, -, attributed, definitions, Translation, scheme, context, free, grammar, attributes, associated, grammar, symbols, semantic, actions, enclosed, braces, {, }, inserted, right, sides, productions, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('Translation', 'NOUN'), ('scheme', 'NOUN'), ('       ', 'SPACE'), ('evaluation', 'NOUN'), ('S', 'PROPN'), ('-', 'PUNCT'), ('attributed', 'VERB'), ('definitions', 'NOUN'), ('Translation', 'NOUN'), ('scheme', 'NOUN'), ('context', 'NOUN'), ('free', 'ADJ'), ('grammar', 'NOUN'), ('attributes', 'NOUN'), ('associated', 'VERB'), ('grammar', 'NOUN'), ('symbols', 'NOUN'), ('semantic', 'ADJ'), ('actions', 'NOUN'), ('enclosed', 'VERB'), ('braces', 'NOUN'), ('{', 'PUNCT'), ('}', 'PUNCT'), ('inserted', 'VERB'), ('right', 'ADJ'), ('sides', 'NOUN'), ('productions', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'compound'), ('Translation', 'compound'), ('scheme', 'nsubj'), ('       ', 'compound'), ('evaluation', 'appos'), ('S', 'npadvmod'), ('-', 'punct'), ('attributed', 'amod'), ('definitions', 'compound'), ('Translation', 'compound'), ('scheme', 'pobj'), ('context', 'npadvmod'), ('free', 'amod'), ('grammar', 'attr'), ('attributes', 'nsubjpass'), ('associated', 'relcl'), ('grammar', 'compound'), ('symbols', 'pobj'), ('semantic', 'amod'), ('actions', 'conj'), ('enclosed', 'acl'), ('braces', 'pobj'), ('{', 'punct'), ('}', 'punct'), ('inserted', 'ccomp'), ('right', 'amod'), ('sides', 'pobj'), ('productions', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[ , Translation], [Translation, scheme], [scheme,        ], [       , evaluation], [evaluation, S], [S, -], [-, attributed], [attributed, definitions], [definitions, Translation], [Translation, scheme], [scheme, context], [context, free], [free, grammar], [grammar, attributes], [attributes, associated], [associated, grammar], [grammar, symbols], [symbols, semantic], [semantic, actions], [actions, enclosed], [enclosed, braces], [braces, {], [{, }], [}, inserted], [inserted, right], [right, sides], [sides, productions], [productions, .]]

>> Trigrams: 
[[ , Translation, scheme], [Translation, scheme,        ], [scheme,        , evaluation], [       , evaluation, S], [evaluation, S, -], [S, -, attributed], [-, attributed, definitions], [attributed, definitions, Translation], [definitions, Translation, scheme], [Translation, scheme, context], [scheme, context, free], [context, free, grammar], [free, grammar, attributes], [grammar, attributes, associated], [attributes, associated, grammar], [associated, grammar, symbols], [grammar, symbols, semantic], [symbols, semantic, actions], [semantic, actions, enclosed], [actions, enclosed, braces], [enclosed, braces, {], [braces, {, }], [{, }, inserted], [}, inserted, right], [inserted, right, sides], [right, sides, productions], [sides, productions, .]]

>> Noun Phrases are: 
[ Translation scheme,        Bottom, evaluation, S-attributed definitions Translation scheme, a context free grammar, attributes, the grammar symbols, semantic actions, braces, the right sides, productions]

>> Named Entities are: 
[]


============================ Sentence 99 =============================

Attributes are used to evaluate the expression along the process of parsing. 


>> Tokens are: 
[Attributes, evaluate, expression, process, parsing, .] 

>> PoS Tags are: 
[('Attributes', 'NOUN'), ('evaluate', 'VERB'), ('expression', 'NOUN'), ('process', 'NOUN'), ('parsing', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Attributes', 'nsubjpass'), ('evaluate', 'xcomp'), ('expression', 'dobj'), ('process', 'pobj'), ('parsing', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Attributes, evaluate], [evaluate, expression], [expression, process], [process, parsing], [parsing, .]]

>> Trigrams: 
[[Attributes, evaluate, expression], [evaluate, expression, process], [expression, process, parsing], [process, parsing, .]]

>> Noun Phrases are: 
[Attributes, the expression, the process]

>> Named Entities are: 
[]


============================ Sentence 100 =============================

During the process of parsing the evaluation of attribute takes place by consulting the semantic action enclosed in { }. 


>> Tokens are: 
[process, parsing, evaluation, attribute, takes, place, consulting, semantic, action, enclosed, {, }, .] 

>> PoS Tags are: 
[('process', 'NOUN'), ('parsing', 'VERB'), ('evaluation', 'NOUN'), ('attribute', 'NOUN'), ('takes', 'VERB'), ('place', 'NOUN'), ('consulting', 'VERB'), ('semantic', 'ADJ'), ('action', 'NOUN'), ('enclosed', 'VERB'), ('{', 'PUNCT'), ('}', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('process', 'pobj'), ('parsing', 'pcomp'), ('evaluation', 'dobj'), ('attribute', 'pobj'), ('takes', 'ROOT'), ('place', 'dobj'), ('consulting', 'pcomp'), ('semantic', 'amod'), ('action', 'dobj'), ('enclosed', 'acl'), ('{', 'punct'), ('}', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[process, parsing], [parsing, evaluation], [evaluation, attribute], [attribute, takes], [takes, place], [place, consulting], [consulting, semantic], [semantic, action], [action, enclosed], [enclosed, {], [{, }], [}, .]]

>> Trigrams: 
[[process, parsing, evaluation], [parsing, evaluation, attribute], [evaluation, attribute, takes], [attribute, takes, place], [takes, place, consulting], [place, consulting, semantic], [consulting, semantic, action], [semantic, action, enclosed], [action, enclosed, {], [enclosed, {, }], [{, }, .]]

>> Noun Phrases are: 
[the process, the evaluation, attribute, place, the semantic action]

>> Named Entities are: 
[]


============================ Sentence 101 =============================

A translation scheme generates the output by executing the semantic actions in an ordered manner. 


>> Tokens are: 
[translation, scheme, generates, output, executing, semantic, actions, ordered, manner, .] 

>> PoS Tags are: 
[('translation', 'NOUN'), ('scheme', 'NOUN'), ('generates', 'VERB'), ('output', 'NOUN'), ('executing', 'VERB'), ('semantic', 'ADJ'), ('actions', 'NOUN'), ('ordered', 'ADJ'), ('manner', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('translation', 'compound'), ('scheme', 'nsubj'), ('generates', 'ROOT'), ('output', 'dobj'), ('executing', 'pcomp'), ('semantic', 'amod'), ('actions', 'dobj'), ('ordered', 'amod'), ('manner', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[translation, scheme], [scheme, generates], [generates, output], [output, executing], [executing, semantic], [semantic, actions], [actions, ordered], [ordered, manner], [manner, .]]

>> Trigrams: 
[[translation, scheme, generates], [scheme, generates, output], [generates, output, executing], [output, executing, semantic], [executing, semantic, actions], [semantic, actions, ordered], [actions, ordered, manner], [ordered, manner, .]]

>> Noun Phrases are: 
[A translation scheme, the output, the semantic actions, an ordered manner]

>> Named Entities are: 
[]


============================ Sentence 102 =============================

This process uses the depth first traversal. 


>> Tokens are: 
[process, uses, depth, traversal, .] 

>> PoS Tags are: 
[('process', 'NOUN'), ('uses', 'VERB'), ('depth', 'NOUN'), ('traversal', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('process', 'nsubj'), ('uses', 'ROOT'), ('depth', 'nmod'), ('traversal', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[process, uses], [uses, depth], [depth, traversal], [traversal, .]]

>> Trigrams: 
[[process, uses, depth], [uses, depth, traversal], [depth, traversal, .]]

>> Noun Phrases are: 
[This process, the depth first traversal]

>> Named Entities are: 
[('first', 'ORDINAL')]


============================ Sentence 103 =============================

    


>> Tokens are: 
[   ] 

>> PoS Tags are: 
[('   ', 'SPACE')] 

>> Dependency Tags are: 
[('   ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 104 =============================

Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (II) ‹#›   


>> Tokens are: 
[Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, II, ), ‹#›,  ] 

>> PoS Tags are: 
[('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'PROPN'), ('(', 'PUNCT'), ('II', 'PROPN'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'nsubj'), ('#', 'appos'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'nsubj'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), ('II', 'appos'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, II], [II, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, II], [(, II, )], [II, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[Prof. Jay R Dhamsaniya, (PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #2170701 (CD, Unit, Theory, II]

>> Named Entities are: 
[('Jay R Dhamsaniya', 'ORG'), ('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 105 =============================

Example: Translation scheme (Infix to postfix notation) ETR R addop R1 | 𝜖 T num    String: 9-5+2 E   T   


>> Tokens are: 
[Example, :, Translation, scheme, (, Infix, postfix, notation, ), ETR, R, addop, R1, |, 𝜖, T, num,    , String, :, 9, -, 5, +, 2, E,   , T,  ] 

>> PoS Tags are: 
[('Example', 'NOUN'), (':', 'PUNCT'), ('Translation', 'NOUN'), ('scheme', 'NOUN'), ('(', 'PUNCT'), ('Infix', 'NOUN'), ('postfix', 'VERB'), ('notation', 'NOUN'), (')', 'PUNCT'), ('E\uf0e0TR', 'PROPN'), ('R\uf0e0', 'VERB'), ('addop', 'ADJ'), ('R1', 'NOUN'), ('|', 'ADV'), ('𝜖', 'ADP'), ('T\uf0e0', 'VERB'), ('num', 'ADJ'), ('   ', 'SPACE'), ('String', 'NOUN'), (':', 'PUNCT'), ('9', 'NUM'), ('-', 'SYM'), ('5', 'NUM'), ('+', 'SYM'), ('2', 'NUM'), ('E', 'NOUN'), ('  ', 'SPACE'), ('T', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Example', 'dep'), (':', 'punct'), ('Translation', 'compound'), ('scheme', 'nsubj'), ('(', 'punct'), ('Infix', 'appos'), ('postfix', 'relcl'), ('notation', 'dobj'), (')', 'punct'), ('E\uf0e0TR', 'compound'), ('R\uf0e0', 'appos'), ('addop', 'advmod'), ('R1', 'appos'), ('|', 'advmod'), ('𝜖', 'prep'), ('T\uf0e0', 'ROOT'), ('num', 'amod'), ('   ', 'nummod'), ('String', 'dobj'), (':', 'punct'), ('9', 'nummod'), ('-', 'punct'), ('5', 'prep'), ('+', 'cc'), ('2', 'nummod'), ('E', 'appos'), ('  ', 'appos'), ('T', 'compound'), (' ', 'npadvmod')]

>> Bigrams: 
[[Example, :], [:, Translation], [Translation, scheme], [scheme, (], [(, Infix], [Infix, postfix], [postfix, notation], [notation, )], [), ETR], [ETR, R], [R, addop], [addop, R1], [R1, |], [|, 𝜖], [𝜖, T], [T, num], [num,    ], [   , String], [String, :], [:, 9], [9, -], [-, 5], [5, +], [+, 2], [2, E], [E,   ], [  , T], [T,  ]]

>> Trigrams: 
[[Example, :, Translation], [:, Translation, scheme], [Translation, scheme, (], [scheme, (, Infix], [(, Infix, postfix], [Infix, postfix, notation], [postfix, notation, )], [notation, ), ETR], [), ETR, R], [ETR, R, addop], [R, addop, R1], [addop, R1, |], [R1, |, 𝜖], [|, 𝜖, T], [𝜖, T, num], [T, num,    ], [num,    , String], [   , String, :], [String, :, 9], [:, 9, -], [9, -, 5], [-, 5, +], [5, +, 2], [+, 2, E], [2, E,   ], [E,   , T], [  , T,  ]]

>> Noun Phrases are: 
[Example: Translation scheme, Infix, notation, R1, num    String, 9-5+2 E]

>> Named Entities are: 
[('E\uf0e0TR', 'ORG'), ('R1', 'CARDINAL'), ('9', 'CARDINAL')]


============================ Sentence 106 =============================

R -  R 𝜖 9  {Print(9)}   


>> Tokens are: 
[R, -,  , R, 𝜖, 9,  , {, Print(9, ), },  ] 

>> PoS Tags are: 
[('R', 'NOUN'), ('-', 'PUNCT'), (' ', 'SPACE'), ('R', 'NOUN'), ('𝜖', 'PROPN'), ('9', 'NUM'), (' ', 'SPACE'), ('{', 'PUNCT'), ('Print(9', 'NOUN'), (')', 'PUNCT'), ('}', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('R', 'compound'), ('-', 'punct'), (' ', 'compound'), ('R', 'compound'), ('𝜖', 'ROOT'), ('9', 'nummod'), (' ', 'appos'), ('{', 'punct'), ('Print(9', 'appos'), (')', 'punct'), ('}', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[R, -], [-,  ], [ , R], [R, 𝜖], [𝜖, 9], [9,  ], [ , {], [{, Print(9], [Print(9, )], [), }], [},  ]]

>> Trigrams: 
[[R, -,  ], [-,  , R], [ , R, 𝜖], [R, 𝜖, 9], [𝜖, 9,  ], [9,  , {], [ , {, Print(9], [{, Print(9, )], [Print(9, ), }], [), },  ]]

>> Noun Phrases are: 
[R -  R 𝜖, Print(9]

>> Named Entities are: 
[('9', 'CARDINAL')]


============================ Sentence 107 =============================

T  {Print(-)}  5  {Print(5)}  +  R T  {Print(+)}  2  {Print(2)}  Postfix=95-2+ Now, Perform Depth first traversal    Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara #2170701 (CD)      Unit 3 – Parsing Theory (II) ‹#›   


>> Tokens are: 
[T,  , {, Print(-, ), },  , 5,  , {, Print(5, ), },  , +,  , R, T,  , {, Print(+, ), },  , 2,  , {, Print(2, ), },  , Postfix=95, -, 2, +, ,, Perform, Depth, traversal,    , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara, #, 2170701, (, CD, ),   , ,   , Unit, 3, –, Parsing, Theory, (, II, ), ‹#›,  ] 

>> PoS Tags are: 
[('T', 'PROPN'), (' ', 'SPACE'), ('{', 'PUNCT'), ('Print(-', 'NOUN'), (')', 'PUNCT'), ('}', 'PUNCT'), (' ', 'SPACE'), ('5', 'NUM'), (' ', 'SPACE'), ('{', 'PUNCT'), ('Print(5', 'NOUN'), (')', 'PUNCT'), ('}', 'PUNCT'), (' ', 'SPACE'), ('+', 'PUNCT'), (' ', 'SPACE'), ('R', 'NOUN'), ('T', 'PROPN'), (' ', 'SPACE'), ('{', 'PUNCT'), ('Print(+', 'NOUN'), (')', 'PUNCT'), ('}', 'PUNCT'), (' ', 'SPACE'), ('2', 'NUM'), (' ', 'SPACE'), ('{', 'PUNCT'), ('Print(2', 'NOUN'), (')', 'PUNCT'), ('}', 'PUNCT'), (' ', 'SPACE'), ('Postfix=95', 'PROPN'), ('-', 'PUNCT'), ('2', 'NUM'), ('+', 'NUM'), (',', 'PUNCT'), ('Perform', 'VERB'), ('Depth', 'NOUN'), ('traversal', 'NOUN'), ('   ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('3', 'NUM'), ('–', 'PUNCT'), ('Parsing', 'VERB'), ('Theory', 'PROPN'), ('(', 'PUNCT'), ('II', 'PROPN'), (')', 'PUNCT'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('T', 'compound'), (' ', 'nsubj'), ('{', 'punct'), ('Print(-', 'appos'), (')', 'punct'), ('}', 'punct'), (' ', 'ROOT'), ('5', 'nummod'), (' ', 'dobj'), ('{', 'punct'), ('Print(5', 'appos'), (')', 'punct'), ('}', 'punct'), (' ', 'appos'), ('+', 'punct'), (' ', 'compound'), ('R', 'compound'), ('T', 'appos'), (' ', 'appos'), ('{', 'punct'), ('Print(+', 'appos'), (')', 'punct'), ('}', 'punct'), (' ', 'prep'), ('2', 'nummod'), (' ', 'pobj'), ('{', 'punct'), ('Print(2', 'appos'), (')', 'punct'), ('}', 'punct'), (' ', 'conj'), ('Postfix=95', 'npadvmod'), ('-', 'punct'), ('2', 'nummod'), ('+', 'cc'), (',', 'punct'), ('Perform', 'conj'), ('Depth', 'dobj'), ('traversal', 'compound'), ('   ', 'amod'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'dobj'), ('#', 'nmod'), ('3130006', 'npadvmod'), ('(', 'punct'), ('PS', 'nsubj'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'parataxis'), ('  ', 'conj'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'appos'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('#', 'appos'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'conj'), ('  ', 'conj'), ('Unit', 'appos'), ('3', 'nummod'), ('–', 'punct'), ('Parsing', 'advcl'), ('Theory', 'dobj'), ('(', 'punct'), ('II', 'appos'), (')', 'punct'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[T,  ], [ , {], [{, Print(-], [Print(-, )], [), }], [},  ], [ , 5], [5,  ], [ , {], [{, Print(5], [Print(5, )], [), }], [},  ], [ , +], [+,  ], [ , R], [R, T], [T,  ], [ , {], [{, Print(+], [Print(+, )], [), }], [},  ], [ , 2], [2,  ], [ , {], [{, Print(2], [Print(2, )], [), }], [},  ], [ , Postfix=95], [Postfix=95, -], [-, 2], [2, +], [+, ,], [,, Perform], [Perform, Depth], [Depth, traversal], [traversal,    ], [   , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara, #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 3], [3, –], [–, Parsing], [Parsing, Theory], [Theory, (], [(, II], [II, )], [), ‹#›], [‹#›,  ]]

>> Trigrams: 
[[T,  , {], [ , {, Print(-], [{, Print(-, )], [Print(-, ), }], [), },  ], [},  , 5], [ , 5,  ], [5,  , {], [ , {, Print(5], [{, Print(5, )], [Print(5, ), }], [), },  ], [},  , +], [ , +,  ], [+,  , R], [ , R, T], [R, T,  ], [T,  , {], [ , {, Print(+], [{, Print(+, )], [Print(+, ), }], [), },  ], [},  , 2], [ , 2,  ], [2,  , {], [ , {, Print(2], [{, Print(2, )], [Print(2, ), }], [), },  ], [},  , Postfix=95], [ , Postfix=95, -], [Postfix=95, -, 2], [-, 2, +], [2, +, ,], [+, ,, Perform], [,, Perform, Depth], [Perform, Depth, traversal], [Depth, traversal,    ], [traversal,    , Prof.], [   , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara, #], [Kagathara, #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 3], [Unit, 3, –], [3, –, Parsing], [–, Parsing, Theory], [Parsing, Theory, (], [Theory, (, II], [(, II, )], [II, ), ‹#›], [), ‹#›,  ]]

>> Noun Phrases are: 
[Print(-, Print(5,  R T, {Print(+, Print(2, Depth, first traversal    Prof. Jay R Dhamsaniya, PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, #, (CD, Unit, Theory, II]

>> Named Entities are: 
[('5', 'CARDINAL'), ('2', 'CARDINAL'), ('Perform Depth', 'PERSON'), ('first', 'ORDINAL'), ('Jay R Dhamsaniya', 'ORG'), ('PS', 'ORG'), ('Dixita', 'PERSON')]


============================ Sentence 108 =============================

Thank You                                       /docProps/thumbnail.jpeg 


>> Tokens are: 
[Thank,                                       , /docProps, /, thumbnail.jpeg] 

>> PoS Tags are: 
[('Thank', 'VERB'), ('                                      ', 'SPACE'), ('/docProps', 'X'), ('/', 'SYM'), ('thumbnail.jpeg', 'NOUN')] 

>> Dependency Tags are: 
[('Thank', 'ROOT'), ('                                      ', 'dobj'), ('/docProps', 'punct'), ('/', 'punct'), ('thumbnail.jpeg', 'dobj')]

>> Bigrams: 
[[Thank,                                       ], [                                      , /docProps], [/docProps, /], [/, thumbnail.jpeg]]

>> Trigrams: 
[[Thank,                                       , /docProps], [                                      , /docProps, /], [/docProps, /, thumbnail.jpeg]]

>> Noun Phrases are: 
[You, thumbnail.jpeg]

>> Named Entities are: 
[]
