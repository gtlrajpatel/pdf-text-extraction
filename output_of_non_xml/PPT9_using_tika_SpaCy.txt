				 *** Text Processing using Spacy *** 


============================ Sentence 1 =============================

PowerPoint Presentation  Unit – 2 Lexical Analyzer dixita.kagathara@darshan.ac.in +91 - 97277 47317 (CE Department) 


>> Tokens are: 
[PowerPoint, Presentation,  , Unit, –, 2, Lexical, Analyzer, dixita.kagathara@darshan.ac.in, +91, -, 97277, 47317, (, CE, Department, )] 

>> PoS Tags are: 
[('PowerPoint', 'PROPN'), ('Presentation', 'PROPN'), (' ', 'SPACE'), ('Unit', 'PROPN'), ('–', 'PUNCT'), ('2', 'NUM'), ('Lexical', 'PROPN'), ('Analyzer', 'PROPN'), ('dixita.kagathara@darshan.ac.in', 'PROPN'), ('+91', 'NOUN'), ('-', 'PUNCT'), ('97277', 'NUM'), ('47317', 'NUM'), ('(', 'PUNCT'), ('CE', 'PROPN'), ('Department', 'PROPN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('PowerPoint', 'compound'), ('Presentation', 'ROOT'), (' ', 'compound'), ('Unit', 'appos'), ('–', 'punct'), ('2', 'nummod'), ('Lexical', 'compound'), ('Analyzer', 'appos'), ('dixita.kagathara@darshan.ac.in', 'nummod'), ('+91', 'appos'), ('-', 'punct'), ('97277', 'appos'), ('47317', 'nummod'), ('(', 'punct'), ('CE', 'compound'), ('Department', 'appos'), (')', 'punct')]

>> Bigrams: 
[[PowerPoint, Presentation], [Presentation,  ], [ , Unit], [Unit, –], [–, 2], [2, Lexical], [Lexical, Analyzer], [Analyzer, dixita.kagathara@darshan.ac.in], [dixita.kagathara@darshan.ac.in, +91], [+91, -], [-, 97277], [97277, 47317], [47317, (], [(, CE], [CE, Department], [Department, )]]

>> Trigrams: 
[[PowerPoint, Presentation,  ], [Presentation,  , Unit], [ , Unit, –], [Unit, –, 2], [–, 2, Lexical], [2, Lexical, Analyzer], [Lexical, Analyzer, dixita.kagathara@darshan.ac.in], [Analyzer, dixita.kagathara@darshan.ac.in, +91], [dixita.kagathara@darshan.ac.in, +91, -], [+91, -, 97277], [-, 97277, 47317], [97277, 47317, (], [47317, (, CE], [(, CE, Department], [CE, Department, )]]

>> Noun Phrases are: 
[PowerPoint Presentation,  Unit, 2 Lexical Analyzer, +91, (CE Department]

>> Named Entities are: 
[('CE Department)', 'ORG')]


============================ Sentence 2 =============================

Computer Engineering Department Prof. Dixita B. Kagathara Compiler Design (CD) GTU # 2170701   Darshan Institute of Engineering & Technology, Rajkot     Looping Topics to be covered  Interaction of scanner & parser Token, Pattern & Lexemes Input buffering Specification of tokens Regular expression & Regular definition Transition diagram Hard coding & automatic generation lexical analyzers Finite automata Regular expression to NFA using Thompson's rule Conversion from NFA to DFA using subset construction method DFA optimization Conversion from regular expression to DFA            Interaction with Scanner & Parser        Interaction of scanner & parser Upon receiving a “Get next token” command from parser, the lexical analyzer reads the input character until it can identify the next token. 


>> Tokens are: 
[Computer, Engineering, Department, Prof., Dixita, B., Kagathara, Compiler, Design, (, CD, ), GTU, #, 2170701,   , Darshan, Institute, Engineering, &, Technology, ,, Rajkot,    , , Looping, Topics, covered,  , Interaction, scanner, &, parser, Token, ,, Pattern, &, Lexemes, Input, buffering, Specification, tokens, Regular, expression, &, Regular, definition, Transition, diagram, Hard, coding, &, automatic, generation, lexical, analyzers, Finite, automata, Regular, expression, NFA, Thompson, rule, Conversion, NFA, DFA, subset, construction, method, DFA, optimization, Conversion, regular, expression, DFA,            , Interaction, Scanner, &, Parser,        , Interaction, scanner, &, parser, receiving, “, token, ”, command, parser, ,, lexical, analyzer, reads, input, character, identify, token, .] 

>> PoS Tags are: 
[('Computer', 'PROPN'), ('Engineering', 'PROPN'), ('Department', 'PROPN'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B.', 'PROPN'), ('Kagathara', 'PROPN'), ('Compiler', 'PROPN'), ('Design', 'PROPN'), ('(', 'PUNCT'), ('CD', 'PROPN'), (')', 'PUNCT'), ('GTU', 'NOUN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('  ', 'SPACE'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('Engineering', 'PROPN'), ('&', 'CCONJ'), ('Technology', 'PROPN'), (',', 'PUNCT'), ('Rajkot', 'PROPN'), ('   ', 'SPACE'), ('\uf050', 'PROPN'), ('Looping', 'VERB'), ('Topics', 'PROPN'), ('covered', 'VERB'), (' ', 'SPACE'), ('Interaction', 'PROPN'), ('scanner', 'NOUN'), ('&', 'CCONJ'), ('parser', 'NOUN'), ('Token', 'VERB'), (',', 'PUNCT'), ('Pattern', 'PROPN'), ('&', 'CCONJ'), ('Lexemes', 'PROPN'), ('Input', 'PROPN'), ('buffering', 'VERB'), ('Specification', 'PROPN'), ('tokens', 'NOUN'), ('Regular', 'ADJ'), ('expression', 'NOUN'), ('&', 'CCONJ'), ('Regular', 'ADJ'), ('definition', 'NOUN'), ('Transition', 'NOUN'), ('diagram', 'NOUN'), ('Hard', 'PROPN'), ('coding', 'NOUN'), ('&', 'CCONJ'), ('automatic', 'ADJ'), ('generation', 'NOUN'), ('lexical', 'ADJ'), ('analyzers', 'NOUN'), ('Finite', 'PROPN'), ('automata', 'NOUN'), ('Regular', 'ADJ'), ('expression', 'NOUN'), ('NFA', 'PROPN'), ('Thompson', 'PROPN'), ('rule', 'NOUN'), ('Conversion', 'PROPN'), ('NFA', 'PROPN'), ('DFA', 'VERB'), ('subset', 'NOUN'), ('construction', 'NOUN'), ('method', 'NOUN'), ('DFA', 'NOUN'), ('optimization', 'NOUN'), ('Conversion', 'PROPN'), ('regular', 'ADJ'), ('expression', 'NOUN'), ('DFA', 'PROPN'), ('           ', 'SPACE'), ('Interaction', 'PROPN'), ('Scanner', 'PROPN'), ('&', 'CCONJ'), ('Parser', 'PROPN'), ('       ', 'SPACE'), ('Interaction', 'PROPN'), ('scanner', 'NOUN'), ('&', 'CCONJ'), ('parser', 'NOUN'), ('receiving', 'VERB'), ('“', 'PUNCT'), ('token', 'ADJ'), ('”', 'PUNCT'), ('command', 'NOUN'), ('parser', 'NOUN'), (',', 'PUNCT'), ('lexical', 'ADJ'), ('analyzer', 'NOUN'), ('reads', 'VERB'), ('input', 'NOUN'), ('character', 'NOUN'), ('identify', 'VERB'), ('token', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Computer', 'compound'), ('Engineering', 'compound'), ('Department', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B.', 'compound'), ('Kagathara', 'compound'), ('Compiler', 'compound'), ('Design', 'nsubjpass'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('GTU', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('  ', 'appos'), ('Darshan', 'compound'), ('Institute', 'appos'), ('Engineering', 'pobj'), ('&', 'cc'), ('Technology', 'conj'), (',', 'punct'), ('Rajkot', 'appos'), ('   ', 'appos'), ('\uf050', 'appos'), ('Looping', 'advcl'), ('Topics', 'dobj'), ('covered', 'ROOT'), (' ', 'prep'), ('Interaction', 'oprd'), ('scanner', 'pobj'), ('&', 'cc'), ('parser', 'conj'), ('Token', 'conj'), (',', 'punct'), ('Pattern', 'conj'), ('&', 'cc'), ('Lexemes', 'compound'), ('Input', 'conj'), ('buffering', 'advcl'), ('Specification', 'dobj'), ('tokens', 'nmod'), ('Regular', 'compound'), ('expression', 'pobj'), ('&', 'cc'), ('Regular', 'amod'), ('definition', 'compound'), ('Transition', 'compound'), ('diagram', 'compound'), ('Hard', 'compound'), ('coding', 'conj'), ('&', 'cc'), ('automatic', 'amod'), ('generation', 'conj'), ('lexical', 'amod'), ('analyzers', 'nsubj'), ('Finite', 'advcl'), ('automata', 'nmod'), ('Regular', 'amod'), ('expression', 'dobj'), ('NFA', 'pobj'), ('Thompson', 'poss'), ('rule', 'compound'), ('Conversion', 'dobj'), ('NFA', 'pobj'), ('DFA', 'pobj'), ('subset', 'compound'), ('construction', 'compound'), ('method', 'compound'), ('DFA', 'compound'), ('optimization', 'compound'), ('Conversion', 'dobj'), ('regular', 'amod'), ('expression', 'pobj'), ('DFA', 'compound'), ('           ', 'compound'), ('Interaction', 'pobj'), ('Scanner', 'pobj'), ('&', 'cc'), ('Parser', 'conj'), ('       ', 'compound'), ('Interaction', 'pobj'), ('scanner', 'pobj'), ('&', 'cc'), ('parser', 'conj'), ('receiving', 'pcomp'), ('“', 'punct'), ('token', 'amod'), ('”', 'punct'), ('command', 'dobj'), ('parser', 'pobj'), (',', 'punct'), ('lexical', 'amod'), ('analyzer', 'nsubj'), ('reads', 'acl'), ('input', 'compound'), ('character', 'dobj'), ('identify', 'advcl'), ('token', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Computer, Engineering], [Engineering, Department], [Department, Prof.], [Prof., Dixita], [Dixita, B.], [B., Kagathara], [Kagathara, Compiler], [Compiler, Design], [Design, (], [(, CD], [CD, )], [), GTU], [GTU, #], [#, 2170701], [2170701,   ], [  , Darshan], [Darshan, Institute], [Institute, Engineering], [Engineering, &], [&, Technology], [Technology, ,], [,, Rajkot], [Rajkot,    ], [   , ], [, Looping], [Looping, Topics], [Topics, covered], [covered,  ], [ , Interaction], [Interaction, scanner], [scanner, &], [&, parser], [parser, Token], [Token, ,], [,, Pattern], [Pattern, &], [&, Lexemes], [Lexemes, Input], [Input, buffering], [buffering, Specification], [Specification, tokens], [tokens, Regular], [Regular, expression], [expression, &], [&, Regular], [Regular, definition], [definition, Transition], [Transition, diagram], [diagram, Hard], [Hard, coding], [coding, &], [&, automatic], [automatic, generation], [generation, lexical], [lexical, analyzers], [analyzers, Finite], [Finite, automata], [automata, Regular], [Regular, expression], [expression, NFA], [NFA, Thompson], [Thompson, rule], [rule, Conversion], [Conversion, NFA], [NFA, DFA], [DFA, subset], [subset, construction], [construction, method], [method, DFA], [DFA, optimization], [optimization, Conversion], [Conversion, regular], [regular, expression], [expression, DFA], [DFA,            ], [           , Interaction], [Interaction, Scanner], [Scanner, &], [&, Parser], [Parser,        ], [       , Interaction], [Interaction, scanner], [scanner, &], [&, parser], [parser, receiving], [receiving, “], [“, token], [token, ”], [”, command], [command, parser], [parser, ,], [,, lexical], [lexical, analyzer], [analyzer, reads], [reads, input], [input, character], [character, identify], [identify, token], [token, .]]

>> Trigrams: 
[[Computer, Engineering, Department], [Engineering, Department, Prof.], [Department, Prof., Dixita], [Prof., Dixita, B.], [Dixita, B., Kagathara], [B., Kagathara, Compiler], [Kagathara, Compiler, Design], [Compiler, Design, (], [Design, (, CD], [(, CD, )], [CD, ), GTU], [), GTU, #], [GTU, #, 2170701], [#, 2170701,   ], [2170701,   , Darshan], [  , Darshan, Institute], [Darshan, Institute, Engineering], [Institute, Engineering, &], [Engineering, &, Technology], [&, Technology, ,], [Technology, ,, Rajkot], [,, Rajkot,    ], [Rajkot,    , ], [   , , Looping], [, Looping, Topics], [Looping, Topics, covered], [Topics, covered,  ], [covered,  , Interaction], [ , Interaction, scanner], [Interaction, scanner, &], [scanner, &, parser], [&, parser, Token], [parser, Token, ,], [Token, ,, Pattern], [,, Pattern, &], [Pattern, &, Lexemes], [&, Lexemes, Input], [Lexemes, Input, buffering], [Input, buffering, Specification], [buffering, Specification, tokens], [Specification, tokens, Regular], [tokens, Regular, expression], [Regular, expression, &], [expression, &, Regular], [&, Regular, definition], [Regular, definition, Transition], [definition, Transition, diagram], [Transition, diagram, Hard], [diagram, Hard, coding], [Hard, coding, &], [coding, &, automatic], [&, automatic, generation], [automatic, generation, lexical], [generation, lexical, analyzers], [lexical, analyzers, Finite], [analyzers, Finite, automata], [Finite, automata, Regular], [automata, Regular, expression], [Regular, expression, NFA], [expression, NFA, Thompson], [NFA, Thompson, rule], [Thompson, rule, Conversion], [rule, Conversion, NFA], [Conversion, NFA, DFA], [NFA, DFA, subset], [DFA, subset, construction], [subset, construction, method], [construction, method, DFA], [method, DFA, optimization], [DFA, optimization, Conversion], [optimization, Conversion, regular], [Conversion, regular, expression], [regular, expression, DFA], [expression, DFA,            ], [DFA,            , Interaction], [           , Interaction, Scanner], [Interaction, Scanner, &], [Scanner, &, Parser], [&, Parser,        ], [Parser,        , Interaction], [       , Interaction, scanner], [Interaction, scanner, &], [scanner, &, parser], [&, parser, receiving], [parser, receiving, “], [receiving, “, token], [“, token, ”], [token, ”, command], [”, command, parser], [command, parser, ,], [parser, ,, lexical], [,, lexical, analyzer], [lexical, analyzer, reads], [analyzer, reads, input], [reads, input, character], [input, character, identify], [character, identify, token], [identify, token, .]]

>> Noun Phrases are: 
[Computer Engineering Department Prof. Dixita B. Kagathara Compiler Design, CD, GTU, Darshan Institute, Engineering, Technology, Rajkot, , Topics, Interaction, scanner, parser, Pattern, Lexemes Input, Specification, tokens Regular expression, Regular definition Transition diagram Hard coding, automatic generation, lexical analyzers, automata Regular expression, NFA, Thompson's rule Conversion, NFA, subset construction method DFA optimization Conversion, regular expression, DFA            Interaction, Scanner, Parser,        Interaction, scanner, parser, next token” command, parser, the lexical analyzer, the input character, it, the next token]

>> Named Entities are: 
[('Dixita B.', 'PERSON'), ('Darshan Institute of Engineering & Technology', 'ORG'), ('Looping Topics', 'ORG'), ('Token, Pattern & Lexemes Input', 'ORG'), ('NFA', 'ORG'), ('Thompson', 'ORG'), ('Conversion', 'ORG'), ('NFA', 'ORG'), ('DFA', 'ORG'), ('DFA', 'ORG'), ('Conversion', 'ORG'), ('DFA            Interaction with Scanner & Parser        Interaction', 'ORG')]


============================ Sentence 3 =============================

Lexical analyzer also stripping out comments and white space in the form of blanks, tabs, and newline characters from the source program. 


>> Tokens are: 
[Lexical, analyzer, stripping, comments, white, space, form, blanks, ,, tabs, ,, newline, characters, source, program, .] 

>> PoS Tags are: 
[('Lexical', 'ADJ'), ('analyzer', 'NOUN'), ('stripping', 'VERB'), ('comments', 'NOUN'), ('white', 'ADJ'), ('space', 'NOUN'), ('form', 'NOUN'), ('blanks', 'NOUN'), (',', 'PUNCT'), ('tabs', 'NOUN'), (',', 'PUNCT'), ('newline', 'VERB'), ('characters', 'NOUN'), ('source', 'NOUN'), ('program', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Lexical', 'compound'), ('analyzer', 'nsubj'), ('stripping', 'ROOT'), ('comments', 'dobj'), ('white', 'amod'), ('space', 'conj'), ('form', 'pobj'), ('blanks', 'pobj'), (',', 'punct'), ('tabs', 'conj'), (',', 'punct'), ('newline', 'amod'), ('characters', 'conj'), ('source', 'compound'), ('program', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Lexical, analyzer], [analyzer, stripping], [stripping, comments], [comments, white], [white, space], [space, form], [form, blanks], [blanks, ,], [,, tabs], [tabs, ,], [,, newline], [newline, characters], [characters, source], [source, program], [program, .]]

>> Trigrams: 
[[Lexical, analyzer, stripping], [analyzer, stripping, comments], [stripping, comments, white], [comments, white, space], [white, space, form], [space, form, blanks], [form, blanks, ,], [blanks, ,, tabs], [,, tabs, ,], [tabs, ,, newline], [,, newline, characters], [newline, characters, source], [characters, source, program], [source, program, .]]

>> Noun Phrases are: 
[Lexical analyzer, comments, white space, the form, blanks, tabs, newline characters, the source program]

>> Named Entities are: 
[]


============================ Sentence 4 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 5 =============================

Lexical Analyzer Symbol Table Parser Token Get next token Source Program    Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›   


>> Tokens are: 
[Lexical, Analyzer, Symbol, Table, Parser, Token, token, Source, Program,    , Prof., Dixita, B, Kagathara,   , #, 2170701, (, CD, ),   , ,   , Unit, 2, –, Lexical, Analyzer, ‹#›,  ] 

>> PoS Tags are: 
[('Lexical', 'PROPN'), ('Analyzer', 'PROPN'), ('Symbol', 'PROPN'), ('Table', 'PROPN'), ('Parser', 'PROPN'), ('Token', 'VERB'), ('token', 'ADJ'), ('Source', 'PROPN'), ('Program', 'PROPN'), ('   ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('  ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'PROPN'), ('Analyzer', 'PROPN'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Lexical', 'compound'), ('Analyzer', 'compound'), ('Symbol', 'compound'), ('Table', 'compound'), ('Parser', 'compound'), ('Token', 'compound'), ('token', 'amod'), ('Source', 'nmod'), ('Program', 'nmod'), ('   ', 'nummod'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'dobj'), ('  ', 'npadvmod'), ('#', 'nmod'), ('2170701', 'npadvmod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'punct'), ('Unit', 'appos'), ('2', 'nummod'), ('–', 'punct'), ('Lexical', 'compound'), ('Analyzer', 'npadvmod'), ('‹#›', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[Lexical, Analyzer], [Analyzer, Symbol], [Symbol, Table], [Table, Parser], [Parser, Token], [Token, token], [token, Source], [Source, Program], [Program,    ], [   , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,   ], [  , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 2], [2, –], [–, Lexical], [Lexical, Analyzer], [Analyzer, ‹#›], [‹#›,  ]]

>> Trigrams: 
[[Lexical, Analyzer, Symbol], [Analyzer, Symbol, Table], [Symbol, Table, Parser], [Table, Parser, Token], [Parser, Token, token], [Token, token, Source], [token, Source, Program], [Source, Program,    ], [Program,    , Prof.], [   , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,   ], [Kagathara,   , #], [  , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 2], [Unit, 2, –], [2, –, Lexical], [–, Lexical, Analyzer], [Lexical, Analyzer, ‹#›], [Analyzer, ‹#›,  ]]

>> Noun Phrases are: 
[token Source Program    Prof. Dixita B Kagathara, (CD, Unit]

>> Named Entities are: 
[('Source Program', 'ORG'), ('Dixita', 'PERSON'), ('Kagathara', 'PERSON')]


============================ Sentence 6 =============================

Why to separate lexical analysis & parsing? 


>> Tokens are: 
[separate, lexical, analysis, &, parsing, ?] 

>> PoS Tags are: 
[('separate', 'VERB'), ('lexical', 'ADJ'), ('analysis', 'NOUN'), ('&', 'CCONJ'), ('parsing', 'NOUN'), ('?', 'PUNCT')] 

>> Dependency Tags are: 
[('separate', 'ROOT'), ('lexical', 'amod'), ('analysis', 'dobj'), ('&', 'cc'), ('parsing', 'conj'), ('?', 'punct')]

>> Bigrams: 
[[separate, lexical], [lexical, analysis], [analysis, &], [&, parsing], [parsing, ?]]

>> Trigrams: 
[[separate, lexical, analysis], [lexical, analysis, &], [analysis, &, parsing], [&, parsing, ?]]

>> Noun Phrases are: 
[lexical analysis, parsing]

>> Named Entities are: 
[]


============================ Sentence 7 =============================

Simplicity in design. 


>> Tokens are: 
[Simplicity, design, .] 

>> PoS Tags are: 
[('Simplicity', 'NOUN'), ('design', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Simplicity', 'ROOT'), ('design', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Simplicity, design], [design, .]]

>> Trigrams: 
[[Simplicity, design, .]]

>> Noun Phrases are: 
[Simplicity, design]

>> Named Entities are: 
[]


============================ Sentence 8 =============================

Improves compiler efficiency. 


>> Tokens are: 
[Improves, compiler, efficiency, .] 

>> PoS Tags are: 
[('Improves', 'VERB'), ('compiler', 'NOUN'), ('efficiency', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Improves', 'ROOT'), ('compiler', 'compound'), ('efficiency', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Improves, compiler], [compiler, efficiency], [efficiency, .]]

>> Trigrams: 
[[Improves, compiler, efficiency], [compiler, efficiency, .]]

>> Noun Phrases are: 
[compiler efficiency]

>> Named Entities are: 
[]


============================ Sentence 9 =============================

Enhance compiler portability. 


>> Tokens are: 
[Enhance, compiler, portability, .] 

>> PoS Tags are: 
[('Enhance', 'VERB'), ('compiler', 'NOUN'), ('portability', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Enhance', 'ROOT'), ('compiler', 'compound'), ('portability', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Enhance, compiler], [compiler, portability], [portability, .]]

>> Trigrams: 
[[Enhance, compiler, portability], [compiler, portability, .]]

>> Noun Phrases are: 
[compiler portability]

>> Named Entities are: 
[]


============================ Sentence 10 =============================

    Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Token, Pattern & Lexemes        Token, Pattern & Lexemes  Sequence of character having a collective meaning is known as token. 


>> Tokens are: 
[    , Prof., Dixita, B, Kagathara,   , #, 2170701, (, CD, ),   , ,   , Unit, 2, –, Lexical, Analyzer, ‹#›,  , Token, ,, Pattern, &, Lexemes,        , Token, ,, Pattern, &, Lexemes,  , Sequence, character, having, collective, meaning, known, token, .] 

>> PoS Tags are: 
[('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('  ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'PROPN'), ('Analyzer', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE'), ('Token', 'VERB'), (',', 'PUNCT'), ('Pattern', 'PROPN'), ('&', 'CCONJ'), ('Lexemes', 'PROPN'), ('       ', 'SPACE'), ('Token', 'VERB'), (',', 'PUNCT'), ('Pattern', 'PROPN'), ('&', 'CCONJ'), ('Lexemes', 'PROPN'), (' ', 'SPACE'), ('Sequence', 'PROPN'), ('character', 'NOUN'), ('having', 'VERB'), ('collective', 'ADJ'), ('meaning', 'NOUN'), ('known', 'VERB'), ('token', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('    ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'nsubj'), ('  ', 'appos'), ('#', 'nmod'), ('2170701', 'npadvmod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'dobj'), ('Unit', 'appos'), ('2', 'nummod'), ('–', 'punct'), ('Lexical', 'compound'), ('Analyzer', 'nsubj'), ('‹#›', 'punct'), (' ', 'appos'), ('Token', 'nmod'), (',', 'punct'), ('Pattern', 'conj'), ('&', 'cc'), ('Lexemes', 'conj'), ('       ', 'punct'), ('Token', 'conj'), (',', 'punct'), ('Pattern', 'conj'), ('&', 'cc'), ('Lexemes', 'conj'), (' ', 'punct'), ('Sequence', 'nsubj'), ('character', 'pobj'), ('having', 'ROOT'), ('collective', 'amod'), ('meaning', 'dobj'), ('known', 'ccomp'), ('token', 'amod'), ('.', 'punct')]

>> Bigrams: 
[[    , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,   ], [  , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 2], [2, –], [–, Lexical], [Lexical, Analyzer], [Analyzer, ‹#›], [‹#›,  ], [ , Token], [Token, ,], [,, Pattern], [Pattern, &], [&, Lexemes], [Lexemes,        ], [       , Token], [Token, ,], [,, Pattern], [Pattern, &], [&, Lexemes], [Lexemes,  ], [ , Sequence], [Sequence, character], [character, having], [having, collective], [collective, meaning], [meaning, known], [known, token], [token, .]]

>> Trigrams: 
[[    , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,   ], [Kagathara,   , #], [  , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 2], [Unit, 2, –], [2, –, Lexical], [–, Lexical, Analyzer], [Lexical, Analyzer, ‹#›], [Analyzer, ‹#›,  ], [‹#›,  , Token], [ , Token, ,], [Token, ,, Pattern], [,, Pattern, &], [Pattern, &, Lexemes], [&, Lexemes,        ], [Lexemes,        , Token], [       , Token, ,], [Token, ,, Pattern], [,, Pattern, &], [Pattern, &, Lexemes], [&, Lexemes,  ], [Lexemes,  , Sequence], [ , Sequence, character], [Sequence, character, having], [character, having, collective], [having, collective, meaning], [collective, meaning, known], [meaning, known, token], [known, token, .]]

>> Noun Phrases are: 
[    Prof. Dixita B Kagathara, (CD, Unit, Lexical Analyzer, character, a collective meaning]

>> Named Entities are: 
[('Dixita', 'PERSON'), ('Kagathara', 'PERSON'), ('Token, Pattern & Lexemes        Token', 'ORG'), ('Pattern & Lexemes', 'ORG')]


============================ Sentence 11 =============================

Categories of Tokens: Identifier Keyword Operator Special symbol Constant    


>> Tokens are: 
[Categories, Tokens, :, Identifier, Keyword, Operator, Special, symbol, Constant,   ] 

>> PoS Tags are: 
[('Categories', 'NOUN'), ('Tokens', 'PROPN'), (':', 'PUNCT'), ('Identifier', 'PROPN'), ('Keyword', 'PROPN'), ('Operator', 'PROPN'), ('Special', 'ADJ'), ('symbol', 'NOUN'), ('Constant', 'ADJ'), ('  ', 'SPACE')] 

>> Dependency Tags are: 
[('Categories', 'nsubj'), ('Tokens', 'pobj'), (':', 'punct'), ('Identifier', 'compound'), ('Keyword', 'nmod'), ('Operator', 'nmod'), ('Special', 'amod'), ('symbol', 'appos'), ('Constant', 'amod'), ('  ', 'ROOT')]

>> Bigrams: 
[[Categories, Tokens], [Tokens, :], [:, Identifier], [Identifier, Keyword], [Keyword, Operator], [Operator, Special], [Special, symbol], [symbol, Constant], [Constant,   ]]

>> Trigrams: 
[[Categories, Tokens, :], [Tokens, :, Identifier], [:, Identifier, Keyword], [Identifier, Keyword, Operator], [Keyword, Operator, Special], [Operator, Special, symbol], [Special, symbol, Constant], [symbol, Constant,   ]]

>> Noun Phrases are: 
[Categories, Tokens, Identifier Keyword Operator Special symbol]

>> Named Entities are: 
[('Constant', 'GPE')]


============================ Sentence 12 =============================

The set of rules called pattern associated with a token. 


>> Tokens are: 
[set, rules, called, pattern, associated, token, .] 

>> PoS Tags are: 
[('set', 'NOUN'), ('rules', 'NOUN'), ('called', 'VERB'), ('pattern', 'NOUN'), ('associated', 'VERB'), ('token', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('set', 'ROOT'), ('rules', 'pobj'), ('called', 'acl'), ('pattern', 'oprd'), ('associated', 'acl'), ('token', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[set, rules], [rules, called], [called, pattern], [pattern, associated], [associated, token], [token, .]]

>> Trigrams: 
[[set, rules, called], [rules, called, pattern], [called, pattern, associated], [pattern, associated, token], [associated, token, .]]

>> Noun Phrases are: 
[The set, rules, pattern, a token]

>> Named Entities are: 
[]


============================ Sentence 13 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 14 =============================

Example: “non-empty sequence of digits”,  “letter followed by letters and digits”     


>> Tokens are: 
[Example, :, “, non, -, sequence, digits, ”, ,,  , “, letter, followed, letters, digits, ”,    ] 

>> PoS Tags are: 
[('Example', 'NOUN'), (':', 'PUNCT'), ('“', 'PUNCT'), ('non', 'ADJ'), ('-', 'ADJ'), ('sequence', 'NOUN'), ('digits', 'NOUN'), ('”', 'PUNCT'), (',', 'PUNCT'), (' ', 'SPACE'), ('“', 'PUNCT'), ('letter', 'NOUN'), ('followed', 'VERB'), ('letters', 'NOUN'), ('digits', 'NOUN'), ('”', 'PUNCT'), ('   ', 'SPACE')] 

>> Dependency Tags are: 
[('Example', 'dep'), (':', 'punct'), ('“', 'punct'), ('non', 'amod'), ('-', 'amod'), ('sequence', 'ROOT'), ('digits', 'pobj'), ('”', 'punct'), (',', 'punct'), (' ', 'nmod'), ('“', 'punct'), ('letter', 'conj'), ('followed', 'acl'), ('letters', 'pobj'), ('digits', 'conj'), ('”', 'punct'), ('   ', 'punct')]

>> Bigrams: 
[[Example, :], [:, “], [“, non], [non, -], [-, sequence], [sequence, digits], [digits, ”], [”, ,], [,,  ], [ , “], [“, letter], [letter, followed], [followed, letters], [letters, digits], [digits, ”], [”,    ]]

>> Trigrams: 
[[Example, :, “], [:, “, non], [“, non, -], [non, -, sequence], [-, sequence, digits], [sequence, digits, ”], [digits, ”, ,], [”, ,,  ], [,,  , “], [ , “, letter], [“, letter, followed], [letter, followed, letters], [followed, letters, digits], [letters, digits, ”], [digits, ”,    ]]

>> Noun Phrases are: 
[Example: “non-empty sequence, digits,  “letter, letters, digits]

>> Named Entities are: 
[]


============================ Sentence 15 =============================

The sequence of character in a source program matched with a pattern for a token is called lexeme. 


>> Tokens are: 
[sequence, character, source, program, matched, pattern, token, called, lexeme, .] 

>> PoS Tags are: 
[('sequence', 'NOUN'), ('character', 'NOUN'), ('source', 'NOUN'), ('program', 'NOUN'), ('matched', 'VERB'), ('pattern', 'NOUN'), ('token', 'NOUN'), ('called', 'VERB'), ('lexeme', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('sequence', 'nsubjpass'), ('character', 'pobj'), ('source', 'compound'), ('program', 'pobj'), ('matched', 'acl'), ('pattern', 'pobj'), ('token', 'pobj'), ('called', 'ROOT'), ('lexeme', 'oprd'), ('.', 'punct')]

>> Bigrams: 
[[sequence, character], [character, source], [source, program], [program, matched], [matched, pattern], [pattern, token], [token, called], [called, lexeme], [lexeme, .]]

>> Trigrams: 
[[sequence, character, source], [character, source, program], [source, program, matched], [program, matched, pattern], [matched, pattern, token], [pattern, token, called], [token, called, lexeme], [called, lexeme, .]]

>> Noun Phrases are: 
[The sequence, character, a source program, a pattern, a token, lexeme]

>> Named Entities are: 
[]


============================ Sentence 16 =============================

Example:  Rate,  DIET, count, Flag   


>> Tokens are: 
[Example, :,  , Rate, ,,  , DIET, ,, count, ,, Flag,  ] 

>> PoS Tags are: 
[('Example', 'NOUN'), (':', 'PUNCT'), (' ', 'SPACE'), ('Rate', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('DIET', 'PROPN'), (',', 'PUNCT'), ('count', 'NOUN'), (',', 'PUNCT'), ('Flag', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Example', 'ROOT'), (':', 'punct'), (' ', 'compound'), ('Rate', 'appos'), (',', 'punct'), (' ', 'compound'), ('DIET', 'appos'), (',', 'punct'), ('count', 'conj'), (',', 'punct'), ('Flag', 'conj'), (' ', 'nummod')]

>> Bigrams: 
[[Example, :], [:,  ], [ , Rate], [Rate, ,], [,,  ], [ , DIET], [DIET, ,], [,, count], [count, ,], [,, Flag], [Flag,  ]]

>> Trigrams: 
[[Example, :,  ], [:,  , Rate], [ , Rate, ,], [Rate, ,,  ], [,,  , DIET], [ , DIET, ,], [DIET, ,, count], [,, count, ,], [count, ,, Flag], [,, Flag,  ]]

>> Noun Phrases are: 
[Example,  Rate,  DIET, count, Flag]

>> Named Entities are: 
[('Flag', 'PERSON')]


============================ Sentence 17 =============================

Token Pattern Lexemes     Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›   


>> Tokens are: 
[Token, Pattern, Lexemes,     , Prof., Dixita, B, Kagathara,   , #, 2170701, (, CD, ),   , ,   , Unit, 2, –, Lexical, Analyzer, ‹#›,  ] 

>> PoS Tags are: 
[('Token', 'PROPN'), ('Pattern', 'PROPN'), ('Lexemes', 'PROPN'), ('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('  ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'PROPN'), ('Analyzer', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Token', 'compound'), ('Pattern', 'compound'), ('Lexemes', 'nsubj'), ('    ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('  ', 'prep'), ('#', 'nmod'), ('2170701', 'appos'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'dep'), ('  ', 'dobj'), ('Unit', 'appos'), ('2', 'nummod'), ('–', 'punct'), ('Lexical', 'compound'), ('Analyzer', 'ROOT'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[Token, Pattern], [Pattern, Lexemes], [Lexemes,     ], [    , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,   ], [  , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 2], [2, –], [–, Lexical], [Lexical, Analyzer], [Analyzer, ‹#›], [‹#›,  ]]

>> Trigrams: 
[[Token, Pattern, Lexemes], [Pattern, Lexemes,     ], [Lexemes,     , Prof.], [    , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,   ], [Kagathara,   , #], [  , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 2], [Unit, 2, –], [2, –, Lexical], [–, Lexical, Analyzer], [Lexical, Analyzer, ‹#›], [Analyzer, ‹#›,  ]]

>> Noun Phrases are: 
[Token Pattern Lexemes,     Prof. Dixita B Kagathara, (CD, Unit]

>> Named Entities are: 
[('Dixita', 'PERSON'), ('Kagathara', 'PERSON')]


============================ Sentence 18 =============================

Example: Token, Pattern & Lexemes Example: total = sum + 45 Tokens: 


>> Tokens are: 
[Example, :, Token, ,, Pattern, &, Lexemes, Example, :, total, =, sum, +, 45, Tokens, :] 

>> PoS Tags are: 
[('Example', 'NOUN'), (':', 'PUNCT'), ('Token', 'ADJ'), (',', 'PUNCT'), ('Pattern', 'PROPN'), ('&', 'CCONJ'), ('Lexemes', 'PROPN'), ('Example', 'PROPN'), (':', 'PUNCT'), ('total', 'ADJ'), ('=', 'SYM'), ('sum', 'NOUN'), ('+', 'SYM'), ('45', 'NUM'), ('Tokens', 'NOUN'), (':', 'PUNCT')] 

>> Dependency Tags are: 
[('Example', 'ROOT'), (':', 'punct'), ('Token', 'amod'), (',', 'punct'), ('Pattern', 'conj'), ('&', 'cc'), ('Lexemes', 'conj'), ('Example', 'appos'), (':', 'punct'), ('total', 'amod'), ('=', 'compound'), ('sum', 'appos'), ('+', 'appos'), ('45', 'nummod'), ('Tokens', 'appos'), (':', 'punct')]

>> Bigrams: 
[[Example, :], [:, Token], [Token, ,], [,, Pattern], [Pattern, &], [&, Lexemes], [Lexemes, Example], [Example, :], [:, total], [total, =], [=, sum], [sum, +], [+, 45], [45, Tokens], [Tokens, :]]

>> Trigrams: 
[[Example, :, Token], [:, Token, ,], [Token, ,, Pattern], [,, Pattern, &], [Pattern, &, Lexemes], [&, Lexemes, Example], [Lexemes, Example, :], [Example, :, total], [:, total, =], [total, =, sum], [=, sum, +], [sum, +, 45], [+, 45, Tokens], [45, Tokens, :]]

>> Noun Phrases are: 
[Example, Token, Pattern & Lexemes Example, total = sum, 45 Tokens]

>> Named Entities are: 
[('Token, Pattern & Lexemes Example', 'ORG')]


============================ Sentence 19 =============================

	total 		 	= 	 	sum 	 	+ 	 	45   


>> Tokens are: 
[	, total, 		 	, =, 	 	, sum, 	 	, +, 	 	, 45,  ] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('total', 'NOUN'), ('\t\t \t', 'SPACE'), ('=', 'SYM'), ('\t \t', 'SPACE'), ('sum', 'NOUN'), ('\t \t', 'SPACE'), ('+', 'CCONJ'), ('\t \t', 'SPACE'), ('45', 'NUM'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('\t', 'amod'), ('total', 'ROOT'), ('\t\t \t', 'dobj'), ('=', 'punct'), ('\t \t', 'conj'), ('sum', 'compound'), ('\t \t', 'conj'), ('+', 'cc'), ('\t \t', 'appos'), ('45', 'nummod'), (' ', 'appos')]

>> Bigrams: 
[[	, total], [total, 		 	], [		 	, =], [=, 	 	], [	 	, sum], [sum, 	 	], [	 	, +], [+, 	 	], [	 	, 45], [45,  ]]

>> Trigrams: 
[[	, total, 		 	], [total, 		 	, =], [		 	, =, 	 	], [=, 	 	, sum], [	 	, sum, 	 	], [sum, 	 	, +], [	 	, +, 	 	], [+, 	 	, 45], [	 	, 45,  ]]

>> Noun Phrases are: 
[	total]

>> Named Entities are: 
[]


============================ Sentence 20 =============================

Lexemes 	Lexemes of identifier: total, sum 	Lexemes of operator: =, + 	Lexemes of constant: 45   


>> Tokens are: 
[Lexemes, 	, Lexemes, identifier, :, total, ,, sum, 	, Lexemes, operator, :, =, ,, +, 	, Lexemes, constant, :, 45,  ] 

>> PoS Tags are: 
[('Lexemes', 'PROPN'), ('\t', 'SPACE'), ('Lexemes', 'PROPN'), ('identifier', 'ADJ'), (':', 'PUNCT'), ('total', 'ADJ'), (',', 'PUNCT'), ('sum', 'NOUN'), ('\t', 'SPACE'), ('Lexemes', 'PROPN'), ('operator', 'NOUN'), (':', 'PUNCT'), ('=', 'PUNCT'), (',', 'PUNCT'), ('+', 'CCONJ'), ('\t', 'SPACE'), ('Lexemes', 'PROPN'), ('constant', 'ADJ'), (':', 'PUNCT'), ('45', 'NUM'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Lexemes', 'compound'), ('\t', 'compound'), ('Lexemes', 'ROOT'), ('identifier', 'pobj'), (':', 'punct'), ('total', 'amod'), (',', 'punct'), ('sum', 'compound'), ('\t', 'compound'), ('Lexemes', 'appos'), ('operator', 'pobj'), (':', 'punct'), ('=', 'punct'), (',', 'punct'), ('+', 'cc'), ('\t', 'compound'), ('Lexemes', 'appos'), ('constant', 'pobj'), (':', 'punct'), ('45', 'nummod'), (' ', 'appos')]

>> Bigrams: 
[[Lexemes, 	], [	, Lexemes], [Lexemes, identifier], [identifier, :], [:, total], [total, ,], [,, sum], [sum, 	], [	, Lexemes], [Lexemes, operator], [operator, :], [:, =], [=, ,], [,, +], [+, 	], [	, Lexemes], [Lexemes, constant], [constant, :], [:, 45], [45,  ]]

>> Trigrams: 
[[Lexemes, 	, Lexemes], [	, Lexemes, identifier], [Lexemes, identifier, :], [identifier, :, total], [:, total, ,], [total, ,, sum], [,, sum, 	], [sum, 	, Lexemes], [	, Lexemes, operator], [Lexemes, operator, :], [operator, :, =], [:, =, ,], [=, ,, +], [,, +, 	], [+, 	, Lexemes], [	, Lexemes, constant], [Lexemes, constant, :], [constant, :, 45], [:, 45,  ]]

>> Noun Phrases are: 
[Lexemes 	Lexemes, total, sum 	Lexemes, operator, 	Lexemes]

>> Named Entities are: 
[('Lexemes', 'PERSON'), ('45', 'CARDINAL')]


============================ Sentence 21 =============================

Identifier1 


>> Tokens are: 
[Identifier1] 

>> PoS Tags are: 
[('Identifier1', 'PROPN')] 

>> Dependency Tags are: 
[('Identifier1', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Identifier1]

>> Named Entities are: 
[]


============================ Sentence 22 =============================

Operator1 


>> Tokens are: 
[Operator1] 

>> PoS Tags are: 
[('Operator1', 'PUNCT')] 

>> Dependency Tags are: 
[('Operator1', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 23 =============================

Identifier2 


>> Tokens are: 
[Identifier2] 

>> PoS Tags are: 
[('Identifier2', 'X')] 

>> Dependency Tags are: 
[('Identifier2', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 24 =============================

Operator2 


>> Tokens are: 
[Operator2] 

>> PoS Tags are: 
[('Operator2', 'PUNCT')] 

>> Dependency Tags are: 
[('Operator2', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 25 =============================

Constant1   


>> Tokens are: 
[Constant1,  ] 

>> PoS Tags are: 
[('Constant1', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Constant1', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[Constant1,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Constant1]

>> Named Entities are: 
[]


============================ Sentence 26 =============================

Tokens    Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›   


>> Tokens are: 
[Tokens,    , Prof., Dixita, B, Kagathara,   , #, 2170701, (, CD, ),   , ,   , Unit, 2, –, Lexical, Analyzer, ‹#›,  ] 

>> PoS Tags are: 
[('Tokens', 'PROPN'), ('   ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('  ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'PROPN'), ('Analyzer', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Tokens', 'compound'), ('   ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'nsubj'), ('  ', 'appos'), ('#', 'nmod'), ('2170701', 'npadvmod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'dep'), ('  ', 'dobj'), ('Unit', 'appos'), ('2', 'nummod'), ('–', 'punct'), ('Lexical', 'compound'), ('Analyzer', 'ROOT'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[Tokens,    ], [   , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,   ], [  , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 2], [2, –], [–, Lexical], [Lexical, Analyzer], [Analyzer, ‹#›], [‹#›,  ]]

>> Trigrams: 
[[Tokens,    , Prof.], [   , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,   ], [Kagathara,   , #], [  , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 2], [Unit, 2, –], [2, –, Lexical], [–, Lexical, Analyzer], [Lexical, Analyzer, ‹#›], [Analyzer, ‹#›,  ]]

>> Noun Phrases are: 
[Tokens    Prof. Dixita B Kagathara, (CD, Unit]

>> Named Entities are: 
[('Tokens', 'PERSON'), ('Dixita', 'PERSON'), ('Kagathara', 'PERSON')]


============================ Sentence 27 =============================

Input buffering        Input buffering There are mainly two techniques for input buffering: Buffer pairs Sentinels    


>> Tokens are: 
[Input, buffering,        , Input, buffering, mainly, techniques, input, buffering, :, Buffer, pairs, Sentinels,   ] 

>> PoS Tags are: 
[('Input', 'NOUN'), ('buffering', 'VERB'), ('       ', 'SPACE'), ('Input', 'NOUN'), ('buffering', 'VERB'), ('mainly', 'ADV'), ('techniques', 'NOUN'), ('input', 'NOUN'), ('buffering', 'NOUN'), (':', 'PUNCT'), ('Buffer', 'PROPN'), ('pairs', 'VERB'), ('Sentinels', 'PROPN'), ('  ', 'SPACE')] 

>> Dependency Tags are: 
[('Input', 'nsubj'), ('buffering', 'acl'), ('       ', 'compound'), ('Input', 'dobj'), ('buffering', 'acl'), ('mainly', 'advmod'), ('techniques', 'attr'), ('input', 'compound'), ('buffering', 'pobj'), (':', 'punct'), ('Buffer', 'nsubj'), ('pairs', 'ROOT'), ('Sentinels', 'dobj'), ('  ', 'punct')]

>> Bigrams: 
[[Input, buffering], [buffering,        ], [       , Input], [Input, buffering], [buffering, mainly], [mainly, techniques], [techniques, input], [input, buffering], [buffering, :], [:, Buffer], [Buffer, pairs], [pairs, Sentinels], [Sentinels,   ]]

>> Trigrams: 
[[Input, buffering,        ], [buffering,        , Input], [       , Input, buffering], [Input, buffering, mainly], [buffering, mainly, techniques], [mainly, techniques, input], [techniques, input, buffering], [input, buffering, :], [buffering, :, Buffer], [:, Buffer, pairs], [Buffer, pairs, Sentinels], [pairs, Sentinels,   ]]

>> Noun Phrases are: 
[Input,        Input, two techniques, input buffering, Buffer, Sentinels]

>> Named Entities are: 
[('two', 'CARDINAL'), ('Buffer', 'PERSON')]


============================ Sentence 28 =============================

The lexical analysis scans the input string from left to right one character at a time. 


>> Tokens are: 
[lexical, analysis, scans, input, string, left, right, character, time, .] 

>> PoS Tags are: 
[('lexical', 'ADJ'), ('analysis', 'NOUN'), ('scans', 'VERB'), ('input', 'NOUN'), ('string', 'NOUN'), ('left', 'ADJ'), ('right', 'ADJ'), ('character', 'NOUN'), ('time', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('lexical', 'amod'), ('analysis', 'nsubj'), ('scans', 'ROOT'), ('input', 'compound'), ('string', 'dobj'), ('left', 'pcomp'), ('right', 'amod'), ('character', 'pobj'), ('time', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[lexical, analysis], [analysis, scans], [scans, input], [input, string], [string, left], [left, right], [right, character], [character, time], [time, .]]

>> Trigrams: 
[[lexical, analysis, scans], [analysis, scans, input], [scans, input, string], [input, string, left], [string, left, right], [left, right, character], [right, character, time], [character, time, .]]

>> Noun Phrases are: 
[The lexical analysis, the input string, right one character, a time]

>> Named Entities are: 
[]


============================ Sentence 29 =============================

Buffer divided into two N-character halves, where N is the number of character on one disk block. 


>> Tokens are: 
[Buffer, divided, N, -, character, halves, ,, N, number, character, disk, block, .] 

>> PoS Tags are: 
[('Buffer', 'PROPN'), ('divided', 'VERB'), ('N', 'NUM'), ('-', 'PUNCT'), ('character', 'NOUN'), ('halves', 'NOUN'), (',', 'PUNCT'), ('N', 'PRON'), ('number', 'NOUN'), ('character', 'NOUN'), ('disk', 'NOUN'), ('block', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Buffer', 'nsubj'), ('divided', 'ROOT'), ('N', 'nummod'), ('-', 'punct'), ('character', 'compound'), ('halves', 'pobj'), (',', 'punct'), ('N', 'nsubj'), ('number', 'attr'), ('character', 'pobj'), ('disk', 'compound'), ('block', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Buffer, divided], [divided, N], [N, -], [-, character], [character, halves], [halves, ,], [,, N], [N, number], [number, character], [character, disk], [disk, block], [block, .]]

>> Trigrams: 
[[Buffer, divided, N], [divided, N, -], [N, -, character], [-, character, halves], [character, halves, ,], [halves, ,, N], [,, N, number], [N, number, character], [number, character, disk], [character, disk, block], [disk, block, .]]

>> Noun Phrases are: 
[Buffer, two N-character halves, N, the number, character, one disk block]

>> Named Entities are: 
[('Buffer', 'PERSON'), ('two', 'CARDINAL'), ('N', 'ORG')]


============================ Sentence 30 =============================

 :  :  : E :  : = :  : Mi : * :  : : C: * : * : 2 :  eof :  :  : Buffer Pair    Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Buffer pairs Pointer Lexeme Begin, marks the beginning of the current lexeme. 


>> Tokens are: 
[ , :,  , :,  , :, E, :,  , :, =, :,  , :, Mi, :, *, :,  , :, :, C, :, *, :, *, :, 2, :,  , eof, :,  , :,  , :, Buffer, Pair,    , Prof., Dixita, B, Kagathara,   , #, 2170701, (, CD, ),   , ,   , Unit, 2, –, Lexical, Analyzer, ‹#›,  , Buffer, pairs, Pointer, Lexeme, Begin, ,, marks, beginning, current, lexeme, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), (':', 'PUNCT'), (' ', 'SPACE'), (':', 'PUNCT'), (' ', 'SPACE'), (':', 'PUNCT'), ('E', 'NOUN'), (':', 'PUNCT'), (' ', 'SPACE'), (':', 'PUNCT'), ('=', 'X'), (':', 'PUNCT'), (' ', 'SPACE'), (':', 'PUNCT'), ('Mi', 'PROPN'), (':', 'PUNCT'), ('*', 'PUNCT'), (':', 'PUNCT'), (' ', 'SPACE'), (':', 'PUNCT'), (':', 'PUNCT'), ('C', 'NOUN'), (':', 'PUNCT'), ('*', 'PUNCT'), (':', 'PUNCT'), ('*', 'PUNCT'), (':', 'PUNCT'), ('2', 'NUM'), (':', 'PUNCT'), (' ', 'SPACE'), ('eof', 'X'), (':', 'PUNCT'), (' ', 'SPACE'), (':', 'PUNCT'), (' ', 'SPACE'), (':', 'PUNCT'), ('Buffer', 'PROPN'), ('Pair', 'PROPN'), ('   ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('  ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'PROPN'), ('Analyzer', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE'), ('Buffer', 'PROPN'), ('pairs', 'VERB'), ('Pointer', 'PROPN'), ('Lexeme', 'PROPN'), ('Begin', 'PROPN'), (',', 'PUNCT'), ('marks', 'VERB'), ('beginning', 'NOUN'), ('current', 'ADJ'), ('lexeme', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'nsubj'), (':', 'punct'), (' ', 'appos'), (':', 'punct'), (' ', 'appos'), (':', 'punct'), ('E', 'appos'), (':', 'punct'), (' ', 'appos'), (':', 'punct'), ('=', 'appos'), (':', 'punct'), (' ', 'appos'), (':', 'punct'), ('Mi', 'appos'), (':', 'punct'), ('*', 'punct'), (':', 'punct'), (' ', 'appos'), (':', 'punct'), (':', 'punct'), ('C', 'appos'), (':', 'punct'), ('*', 'punct'), (':', 'punct'), ('*', 'punct'), (':', 'punct'), ('2', 'appos'), (':', 'punct'), (' ', 'quantmod'), ('eof', 'appos'), (':', 'punct'), (' ', 'appos'), (':', 'punct'), (' ', 'appos'), (':', 'punct'), ('Buffer', 'compound'), ('Pair', 'appos'), ('   ', 'nummod'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('  ', 'prep'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'dobj'), ('Unit', 'appos'), ('2', 'nummod'), ('–', 'punct'), ('Lexical', 'compound'), ('Analyzer', 'appos'), ('‹#›', 'punct'), (' ', 'appos'), ('Buffer', 'nsubj'), ('pairs', 'ccomp'), ('Pointer', 'compound'), ('Lexeme', 'compound'), ('Begin', 'dobj'), (',', 'punct'), ('marks', 'ROOT'), ('beginning', 'dobj'), ('current', 'amod'), ('lexeme', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[ , :], [:,  ], [ , :], [:,  ], [ , :], [:, E], [E, :], [:,  ], [ , :], [:, =], [=, :], [:,  ], [ , :], [:, Mi], [Mi, :], [:, *], [*, :], [:,  ], [ , :], [:, :], [:, C], [C, :], [:, *], [*, :], [:, *], [*, :], [:, 2], [2, :], [:,  ], [ , eof], [eof, :], [:,  ], [ , :], [:,  ], [ , :], [:, Buffer], [Buffer, Pair], [Pair,    ], [   , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,   ], [  , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 2], [2, –], [–, Lexical], [Lexical, Analyzer], [Analyzer, ‹#›], [‹#›,  ], [ , Buffer], [Buffer, pairs], [pairs, Pointer], [Pointer, Lexeme], [Lexeme, Begin], [Begin, ,], [,, marks], [marks, beginning], [beginning, current], [current, lexeme], [lexeme, .]]

>> Trigrams: 
[[ , :,  ], [:,  , :], [ , :,  ], [:,  , :], [ , :, E], [:, E, :], [E, :,  ], [:,  , :], [ , :, =], [:, =, :], [=, :,  ], [:,  , :], [ , :, Mi], [:, Mi, :], [Mi, :, *], [:, *, :], [*, :,  ], [:,  , :], [ , :, :], [:, :, C], [:, C, :], [C, :, *], [:, *, :], [*, :, *], [:, *, :], [*, :, 2], [:, 2, :], [2, :,  ], [:,  , eof], [ , eof, :], [eof, :,  ], [:,  , :], [ , :,  ], [:,  , :], [ , :, Buffer], [:, Buffer, Pair], [Buffer, Pair,    ], [Pair,    , Prof.], [   , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,   ], [Kagathara,   , #], [  , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 2], [Unit, 2, –], [2, –, Lexical], [–, Lexical, Analyzer], [Lexical, Analyzer, ‹#›], [Analyzer, ‹#›,  ], [‹#›,  , Buffer], [ , Buffer, pairs], [Buffer, pairs, Pointer], [pairs, Pointer, Lexeme], [Pointer, Lexeme, Begin], [Lexeme, Begin, ,], [Begin, ,, marks], [,, marks, beginning], [marks, beginning, current], [beginning, current, lexeme], [current, lexeme, .]]

>> Noun Phrases are: 
[E, Mi, : C, Buffer Pair,    Prof. Dixita B Kagathara, (CD, Unit, – Lexical Analyzer, Buffer, Pointer Lexeme Begin, the beginning, the current lexeme]

>> Named Entities are: 
[('2', 'CARDINAL'), ('Dixita', 'PERSON'), ('Kagathara', 'PERSON'), ('Buffer', 'PERSON'), ('Pointer Lexeme Begin', 'PERSON')]


============================ Sentence 31 =============================

Pointer Forward, scans ahead until a pattern match is found. 


>> Tokens are: 
[Pointer, Forward, ,, scans, ahead, pattern, match, found, .] 

>> PoS Tags are: 
[('Pointer', 'PROPN'), ('Forward', 'PROPN'), (',', 'PUNCT'), ('scans', 'VERB'), ('ahead', 'ADV'), ('pattern', 'NOUN'), ('match', 'NOUN'), ('found', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Pointer', 'compound'), ('Forward', 'nsubj'), (',', 'punct'), ('scans', 'ROOT'), ('ahead', 'advmod'), ('pattern', 'compound'), ('match', 'nsubjpass'), ('found', 'advcl'), ('.', 'punct')]

>> Bigrams: 
[[Pointer, Forward], [Forward, ,], [,, scans], [scans, ahead], [ahead, pattern], [pattern, match], [match, found], [found, .]]

>> Trigrams: 
[[Pointer, Forward, ,], [Forward, ,, scans], [,, scans, ahead], [scans, ahead, pattern], [ahead, pattern, match], [pattern, match, found], [match, found, .]]

>> Noun Phrases are: 
[Pointer Forward, a pattern match]

>> Named Entities are: 
[('Pointer Forward', 'PERSON')]


============================ Sentence 32 =============================

Once the next lexeme is determined, forward is set to character at its right end. 


>> Tokens are: 
[lexeme, determined, ,, forward, set, character, right, end, .] 

>> PoS Tags are: 
[('lexeme', 'NOUN'), ('determined', 'VERB'), (',', 'PUNCT'), ('forward', 'ADV'), ('set', 'VERB'), ('character', 'VERB'), ('right', 'ADJ'), ('end', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('lexeme', 'nsubjpass'), ('determined', 'advcl'), (',', 'punct'), ('forward', 'advmod'), ('set', 'ROOT'), ('character', 'xcomp'), ('right', 'amod'), ('end', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[lexeme, determined], [determined, ,], [,, forward], [forward, set], [set, character], [character, right], [right, end], [end, .]]

>> Trigrams: 
[[lexeme, determined, ,], [determined, ,, forward], [,, forward, set], [forward, set, character], [set, character, right], [character, right, end], [right, end, .]]

>> Noun Phrases are: 
[the next lexeme, its right end]

>> Named Entities are: 
[]


============================ Sentence 33 =============================

Lexeme Begin is set to the character immediately after the lexeme just found. 


>> Tokens are: 
[Lexeme, Begin, set, character, immediately, lexeme, found, .] 

>> PoS Tags are: 
[('Lexeme', 'PROPN'), ('Begin', 'PROPN'), ('set', 'VERB'), ('character', 'NOUN'), ('immediately', 'ADV'), ('lexeme', 'NOUN'), ('found', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Lexeme', 'compound'), ('Begin', 'nsubjpass'), ('set', 'ROOT'), ('character', 'pobj'), ('immediately', 'advmod'), ('lexeme', 'nsubj'), ('found', 'advcl'), ('.', 'punct')]

>> Bigrams: 
[[Lexeme, Begin], [Begin, set], [set, character], [character, immediately], [immediately, lexeme], [lexeme, found], [found, .]]

>> Trigrams: 
[[Lexeme, Begin, set], [Begin, set, character], [set, character, immediately], [character, immediately, lexeme], [immediately, lexeme, found], [lexeme, found, .]]

>> Noun Phrases are: 
[Lexeme Begin, the character, the lexeme]

>> Named Entities are: 
[('Lexeme Begin', 'ORG')]


============================ Sentence 34 =============================

If forward pointer is at the end of first buffer half then second is filled with N input character. 


>> Tokens are: 
[forward, pointer, end, buffer, half, second, filled, N, input, character, .] 

>> PoS Tags are: 
[('forward', 'ADJ'), ('pointer', 'NOUN'), ('end', 'NOUN'), ('buffer', 'NOUN'), ('half', 'ADV'), ('second', 'ADJ'), ('filled', 'VERB'), ('N', 'PROPN'), ('input', 'NOUN'), ('character', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('forward', 'amod'), ('pointer', 'nsubj'), ('end', 'pobj'), ('buffer', 'pobj'), ('half', 'dep'), ('second', 'nsubjpass'), ('filled', 'ROOT'), ('N', 'punct'), ('input', 'compound'), ('character', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[forward, pointer], [pointer, end], [end, buffer], [buffer, half], [half, second], [second, filled], [filled, N], [N, input], [input, character], [character, .]]

>> Trigrams: 
[[forward, pointer, end], [pointer, end, buffer], [end, buffer, half], [buffer, half, second], [half, second, filled], [second, filled, N], [filled, N, input], [N, input, character], [input, character, .]]

>> Noun Phrases are: 
[forward pointer, the end, first buffer, input character]

>> Named Entities are: 
[('first', 'ORDINAL'), ('second', 'ORDINAL'), ('N', 'GPE')]


============================ Sentence 35 =============================

If forward pointer is at the end of second buffer half then first is filled with N input character. 


>> Tokens are: 
[forward, pointer, end, second, buffer, half, filled, N, input, character, .] 

>> PoS Tags are: 
[('forward', 'ADJ'), ('pointer', 'NOUN'), ('end', 'NOUN'), ('second', 'ADJ'), ('buffer', 'NOUN'), ('half', 'ADV'), ('filled', 'VERB'), ('N', 'PROPN'), ('input', 'NOUN'), ('character', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('forward', 'amod'), ('pointer', 'nsubj'), ('end', 'pobj'), ('second', 'amod'), ('buffer', 'pobj'), ('half', 'dep'), ('filled', 'ROOT'), ('N', 'punct'), ('input', 'compound'), ('character', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[forward, pointer], [pointer, end], [end, second], [second, buffer], [buffer, half], [half, filled], [filled, N], [N, input], [input, character], [character, .]]

>> Trigrams: 
[[forward, pointer, end], [pointer, end, second], [end, second, buffer], [second, buffer, half], [buffer, half, filled], [half, filled, N], [filled, N, input], [N, input, character], [input, character, .]]

>> Noun Phrases are: 
[forward pointer, the end, second buffer, input character]

>> Named Entities are: 
[('second', 'ORDINAL'), ('half', 'CARDINAL'), ('first', 'ORDINAL'), ('N', 'GPE')]


============================ Sentence 36 =============================

 :  :  : E :  : = :  : Mi : * :  : : C: * : * : 2 :  eof :  :  :        forward       lexeme_beginnig        forward : C: * : * : 2 :  eof :  :  :    Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Buffer pairs Code to advance forward pointer 	if forward at end of first half then begin 		reload second half; 		forward := forward + 1; 	end 	else if forward at end of second half then begin 		reload first half; 		move forward to beginning of first half; 	end 	else forward := forward + 1;  :  :  : E :  : = :  : Mi : * :  : : C: * : * : 2 :  eof :  :  :        forward       lexeme_beginnig        forward        forward : C: * : * : 2 :  eof :  :  :    Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›   


>> Tokens are: 
[ , :,  , :,  , :, E, :,  , :, =, :,  , :, Mi, :, *, :,  , :, :, C, :, *, :, *, :, 2, :,  , eof, :,  , :,  , :,        , forward,       , lexeme_beginnig,        , forward, :, C, :, *, :, *, :, 2, :,  , eof, :,  , :,  , :,    , Prof., Dixita, B, Kagathara,   , #, 2170701, (, CD, ),   , ,   , Unit, 2, –, Lexical, Analyzer, ‹#›,  , Buffer, pairs, Code, advance, forward, pointer, 	, forward, end, half, begin, 		, reload, second, half, ;, 		, forward, :, =, forward, +, 1, ;, 	, end, 	, forward, end, second, half, begin, 		, reload, half, ;, 		, forward, beginning, half, ;, 	, end, 	, forward, :, =, forward, +, 1, ;,  , :,  , :,  , :, E, :,  , :, =, :,  , :, Mi, :, *, :,  , :, :, C, :, *, :, *, :, 2, :,  , eof, :,  , :,  , :,        , forward,       , lexeme_beginnig,        , forward,        , forward, :, C, :, *, :, *, :, 2, :,  , eof, :,  , :,  , :,    , Prof., Dixita, B, Kagathara,   , #, 2170701, (, CD, ),   , ,   , Unit, 2, –, Lexical, Analyzer, ‹#›,  ] 

>> PoS Tags are: 
[(' ', 'SPACE'), (':', 'PUNCT'), (' ', 'SPACE'), (':', 'PUNCT'), (' ', 'SPACE'), (':', 'PUNCT'), ('E', 'NOUN'), (':', 'PUNCT'), (' ', 'SPACE'), (':', 'PUNCT'), ('=', 'X'), (':', 'PUNCT'), (' ', 'SPACE'), (':', 'PUNCT'), ('Mi', 'PROPN'), (':', 'PUNCT'), ('*', 'PUNCT'), (':', 'PUNCT'), (' ', 'SPACE'), (':', 'PUNCT'), (':', 'PUNCT'), ('C', 'NOUN'), (':', 'PUNCT'), ('*', 'PUNCT'), (':', 'PUNCT'), ('*', 'PUNCT'), (':', 'PUNCT'), ('2', 'NUM'), (':', 'PUNCT'), (' ', 'SPACE'), ('eof', 'X'), (':', 'PUNCT'), (' ', 'SPACE'), (':', 'PUNCT'), (' ', 'SPACE'), (':', 'PUNCT'), ('       ', 'SPACE'), ('forward', 'ADV'), ('      ', 'SPACE'), ('lexeme_beginnig', 'PROPN'), ('       ', 'SPACE'), ('forward', 'ADV'), (':', 'PUNCT'), ('C', 'NOUN'), (':', 'PUNCT'), ('*', 'PUNCT'), (':', 'PUNCT'), ('*', 'PUNCT'), (':', 'PUNCT'), ('2', 'NUM'), (':', 'PUNCT'), (' ', 'SPACE'), ('eof', 'X'), (':', 'PUNCT'), (' ', 'SPACE'), (':', 'PUNCT'), (' ', 'SPACE'), (':', 'PUNCT'), ('   ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('  ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'PROPN'), ('Analyzer', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE'), ('Buffer', 'PROPN'), ('pairs', 'VERB'), ('Code', 'PROPN'), ('advance', 'VERB'), ('forward', 'ADV'), ('pointer', 'NOUN'), ('\t', 'SPACE'), ('forward', 'ADV'), ('end', 'NOUN'), ('half', 'NOUN'), ('begin', 'VERB'), ('\t\t', 'SPACE'), ('reload', 'ADV'), ('second', 'ADJ'), ('half', 'NOUN'), (';', 'PUNCT'), ('\t\t', 'SPACE'), ('forward', 'ADV'), (':', 'PUNCT'), ('=', 'PUNCT'), ('forward', 'ADV'), ('+', 'NUM'), ('1', 'NUM'), (';', 'PUNCT'), ('\t', 'SPACE'), ('end', 'VERB'), ('\t', 'SPACE'), ('forward', 'ADV'), ('end', 'NOUN'), ('second', 'ADJ'), ('half', 'NOUN'), ('begin', 'VERB'), ('\t\t', 'SPACE'), ('reload', 'ADV'), ('half', 'NOUN'), (';', 'PUNCT'), ('\t\t', 'SPACE'), ('forward', 'ADV'), ('beginning', 'NOUN'), ('half', 'NOUN'), (';', 'PUNCT'), ('\t', 'SPACE'), ('end', 'VERB'), ('\t', 'SPACE'), ('forward', 'ADV'), (':', 'PUNCT'), ('=', 'PUNCT'), ('forward', 'ADV'), ('+', 'NUM'), ('1', 'NUM'), (';', 'PUNCT'), (' ', 'SPACE'), (':', 'PUNCT'), (' ', 'SPACE'), (':', 'PUNCT'), (' ', 'SPACE'), (':', 'PUNCT'), ('E', 'NOUN'), (':', 'PUNCT'), (' ', 'SPACE'), (':', 'PUNCT'), ('=', 'X'), (':', 'PUNCT'), (' ', 'SPACE'), (':', 'PUNCT'), ('Mi', 'PROPN'), (':', 'PUNCT'), ('*', 'PUNCT'), (':', 'PUNCT'), (' ', 'SPACE'), (':', 'PUNCT'), (':', 'PUNCT'), ('C', 'NOUN'), (':', 'PUNCT'), ('*', 'PUNCT'), (':', 'PUNCT'), ('*', 'PUNCT'), (':', 'PUNCT'), ('2', 'NUM'), (':', 'PUNCT'), (' ', 'SPACE'), ('eof', 'X'), (':', 'PUNCT'), (' ', 'SPACE'), (':', 'PUNCT'), (' ', 'SPACE'), (':', 'PUNCT'), ('       ', 'SPACE'), ('forward', 'ADV'), ('      ', 'SPACE'), ('lexeme_beginnig', 'PROPN'), ('       ', 'SPACE'), ('forward', 'ADV'), ('       ', 'SPACE'), ('forward', 'ADV'), (':', 'PUNCT'), ('C', 'NOUN'), (':', 'PUNCT'), ('*', 'PUNCT'), (':', 'PUNCT'), ('*', 'PUNCT'), (':', 'PUNCT'), ('2', 'NUM'), (':', 'PUNCT'), (' ', 'SPACE'), ('eof', 'X'), (':', 'PUNCT'), (' ', 'SPACE'), (':', 'PUNCT'), (' ', 'SPACE'), (':', 'PUNCT'), ('   ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('  ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'PROPN'), ('Analyzer', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'dep'), (':', 'punct'), (' ', 'appos'), (':', 'punct'), (' ', 'appos'), (':', 'punct'), ('E', 'appos'), (':', 'punct'), (' ', 'appos'), (':', 'punct'), ('=', 'appos'), (':', 'punct'), (' ', 'appos'), (':', 'punct'), ('Mi', 'appos'), (':', 'punct'), ('*', 'punct'), (':', 'punct'), (' ', 'appos'), (':', 'punct'), (':', 'punct'), ('C', 'appos'), (':', 'punct'), ('*', 'punct'), (':', 'punct'), ('*', 'punct'), (':', 'punct'), ('2', 'appos'), (':', 'punct'), (' ', 'quantmod'), ('eof', 'appos'), (':', 'punct'), (' ', 'appos'), (':', 'punct'), (' ', 'appos'), (':', 'punct'), ('       ', 'appos'), ('forward', 'advmod'), ('      ', 'compound'), ('lexeme_beginnig', 'compound'), ('       ', 'appos'), ('forward', 'advmod'), (':', 'punct'), ('C', 'meta'), (':', 'punct'), ('*', 'punct'), (':', 'punct'), ('*', 'punct'), (':', 'punct'), ('2', 'appos'), (':', 'punct'), (' ', 'appos'), ('eof', 'appos'), (':', 'punct'), (' ', 'appos'), (':', 'punct'), (' ', 'appos'), (':', 'punct'), ('   ', 'nummod'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('  ', 'appos'), ('#', 'nmod'), ('2170701', 'appos'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'nsubj'), ('\uf077', 'ccomp'), ('  ', 'dobj'), ('Unit', 'appos'), ('2', 'nummod'), ('–', 'punct'), ('Lexical', 'compound'), ('Analyzer', 'nmod'), ('‹#›', 'punct'), (' ', 'appos'), ('Buffer', 'nsubj'), ('pairs', 'ccomp'), ('Code', 'dobj'), ('advance', 'advcl'), ('forward', 'advmod'), ('pointer', 'compound'), ('\t', 'dobj'), ('forward', 'advmod'), ('end', 'pobj'), ('half', 'pobj'), ('begin', 'advcl'), ('\t\t', 'advmod'), ('reload', 'advmod'), ('second', 'amod'), ('half', 'npadvmod'), (';', 'punct'), ('\t\t', 'npadvmod'), ('forward', 'advmod'), (':', 'punct'), ('=', 'appos'), ('forward', 'advmod'), ('+', 'appos'), ('1', 'nummod'), (';', 'punct'), ('\t', 'nsubj'), ('end', 'ccomp'), ('\t', 'dobj'), ('forward', 'advmod'), ('end', 'pobj'), ('second', 'amod'), ('half', 'pobj'), ('begin', 'ccomp'), ('\t\t', 'xcomp'), ('reload', 'advmod'), ('half', 'npadvmod'), (';', 'punct'), ('\t\t', 'nsubj'), ('forward', 'advmod'), ('beginning', 'pobj'), ('half', 'pobj'), (';', 'punct'), ('\t', 'nsubj'), ('end', 'ccomp'), ('\t', 'dobj'), ('forward', 'advmod'), (':', 'punct'), ('=', 'punct'), ('forward', 'advmod'), ('+', 'cc'), ('1', 'advmod'), (';', 'punct'), (' ', 'dobj'), (':', 'punct'), (' ', 'appos'), (':', 'punct'), (' ', 'appos'), (':', 'punct'), ('E', 'appos'), (':', 'punct'), (' ', 'appos'), (':', 'punct'), ('=', 'dep'), (':', 'punct'), (' ', 'nsubj'), (':', 'punct'), ('Mi', 'dep'), (':', 'punct'), ('*', 'punct'), (':', 'punct'), (' ', 'appos'), (':', 'punct'), (':', 'punct'), ('C', 'dep'), (':', 'punct'), ('*', 'punct'), (':', 'punct'), ('*', 'punct'), (':', 'punct'), ('2', 'appos'), (':', 'punct'), (' ', 'appos'), ('eof', 'appos'), (':', 'punct'), (' ', 'appos'), (':', 'punct'), (' ', 'appos'), (':', 'punct'), ('       ', 'nummod'), ('forward', 'advmod'), ('      ', 'compound'), ('lexeme_beginnig', 'compound'), ('       ', 'appos'), ('forward', 'advmod'), ('       ', 'npadvmod'), ('forward', 'advmod'), (':', 'punct'), ('C', 'dep'), (':', 'punct'), ('*', 'punct'), (':', 'punct'), ('*', 'punct'), (':', 'punct'), ('2', 'appos'), (':', 'punct'), (' ', 'appos'), ('eof', 'appos'), (':', 'punct'), (' ', 'appos'), (':', 'punct'), (' ', 'appos'), (':', 'punct'), ('   ', 'nummod'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('  ', 'prep'), ('#', 'nmod'), ('2170701', 'appos'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'nsubj'), ('\uf077', 'dep'), ('  ', 'dobj'), ('Unit', 'appos'), ('2', 'nummod'), ('–', 'punct'), ('Lexical', 'compound'), ('Analyzer', 'ROOT'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[ , :], [:,  ], [ , :], [:,  ], [ , :], [:, E], [E, :], [:,  ], [ , :], [:, =], [=, :], [:,  ], [ , :], [:, Mi], [Mi, :], [:, *], [*, :], [:,  ], [ , :], [:, :], [:, C], [C, :], [:, *], [*, :], [:, *], [*, :], [:, 2], [2, :], [:,  ], [ , eof], [eof, :], [:,  ], [ , :], [:,  ], [ , :], [:,        ], [       , forward], [forward,       ], [      , lexeme_beginnig], [lexeme_beginnig,        ], [       , forward], [forward, :], [:, C], [C, :], [:, *], [*, :], [:, *], [*, :], [:, 2], [2, :], [:,  ], [ , eof], [eof, :], [:,  ], [ , :], [:,  ], [ , :], [:,    ], [   , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,   ], [  , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 2], [2, –], [–, Lexical], [Lexical, Analyzer], [Analyzer, ‹#›], [‹#›,  ], [ , Buffer], [Buffer, pairs], [pairs, Code], [Code, advance], [advance, forward], [forward, pointer], [pointer, 	], [	, forward], [forward, end], [end, half], [half, begin], [begin, 		], [		, reload], [reload, second], [second, half], [half, ;], [;, 		], [		, forward], [forward, :], [:, =], [=, forward], [forward, +], [+, 1], [1, ;], [;, 	], [	, end], [end, 	], [	, forward], [forward, end], [end, second], [second, half], [half, begin], [begin, 		], [		, reload], [reload, half], [half, ;], [;, 		], [		, forward], [forward, beginning], [beginning, half], [half, ;], [;, 	], [	, end], [end, 	], [	, forward], [forward, :], [:, =], [=, forward], [forward, +], [+, 1], [1, ;], [;,  ], [ , :], [:,  ], [ , :], [:,  ], [ , :], [:, E], [E, :], [:,  ], [ , :], [:, =], [=, :], [:,  ], [ , :], [:, Mi], [Mi, :], [:, *], [*, :], [:,  ], [ , :], [:, :], [:, C], [C, :], [:, *], [*, :], [:, *], [*, :], [:, 2], [2, :], [:,  ], [ , eof], [eof, :], [:,  ], [ , :], [:,  ], [ , :], [:,        ], [       , forward], [forward,       ], [      , lexeme_beginnig], [lexeme_beginnig,        ], [       , forward], [forward,        ], [       , forward], [forward, :], [:, C], [C, :], [:, *], [*, :], [:, *], [*, :], [:, 2], [2, :], [:,  ], [ , eof], [eof, :], [:,  ], [ , :], [:,  ], [ , :], [:,    ], [   , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,   ], [  , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 2], [2, –], [–, Lexical], [Lexical, Analyzer], [Analyzer, ‹#›], [‹#›,  ]]

>> Trigrams: 
[[ , :,  ], [:,  , :], [ , :,  ], [:,  , :], [ , :, E], [:, E, :], [E, :,  ], [:,  , :], [ , :, =], [:, =, :], [=, :,  ], [:,  , :], [ , :, Mi], [:, Mi, :], [Mi, :, *], [:, *, :], [*, :,  ], [:,  , :], [ , :, :], [:, :, C], [:, C, :], [C, :, *], [:, *, :], [*, :, *], [:, *, :], [*, :, 2], [:, 2, :], [2, :,  ], [:,  , eof], [ , eof, :], [eof, :,  ], [:,  , :], [ , :,  ], [:,  , :], [ , :,        ], [:,        , forward], [       , forward,       ], [forward,       , lexeme_beginnig], [      , lexeme_beginnig,        ], [lexeme_beginnig,        , forward], [       , forward, :], [forward, :, C], [:, C, :], [C, :, *], [:, *, :], [*, :, *], [:, *, :], [*, :, 2], [:, 2, :], [2, :,  ], [:,  , eof], [ , eof, :], [eof, :,  ], [:,  , :], [ , :,  ], [:,  , :], [ , :,    ], [:,    , Prof.], [   , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,   ], [Kagathara,   , #], [  , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 2], [Unit, 2, –], [2, –, Lexical], [–, Lexical, Analyzer], [Lexical, Analyzer, ‹#›], [Analyzer, ‹#›,  ], [‹#›,  , Buffer], [ , Buffer, pairs], [Buffer, pairs, Code], [pairs, Code, advance], [Code, advance, forward], [advance, forward, pointer], [forward, pointer, 	], [pointer, 	, forward], [	, forward, end], [forward, end, half], [end, half, begin], [half, begin, 		], [begin, 		, reload], [		, reload, second], [reload, second, half], [second, half, ;], [half, ;, 		], [;, 		, forward], [		, forward, :], [forward, :, =], [:, =, forward], [=, forward, +], [forward, +, 1], [+, 1, ;], [1, ;, 	], [;, 	, end], [	, end, 	], [end, 	, forward], [	, forward, end], [forward, end, second], [end, second, half], [second, half, begin], [half, begin, 		], [begin, 		, reload], [		, reload, half], [reload, half, ;], [half, ;, 		], [;, 		, forward], [		, forward, beginning], [forward, beginning, half], [beginning, half, ;], [half, ;, 	], [;, 	, end], [	, end, 	], [end, 	, forward], [	, forward, :], [forward, :, =], [:, =, forward], [=, forward, +], [forward, +, 1], [+, 1, ;], [1, ;,  ], [;,  , :], [ , :,  ], [:,  , :], [ , :,  ], [:,  , :], [ , :, E], [:, E, :], [E, :,  ], [:,  , :], [ , :, =], [:, =, :], [=, :,  ], [:,  , :], [ , :, Mi], [:, Mi, :], [Mi, :, *], [:, *, :], [*, :,  ], [:,  , :], [ , :, :], [:, :, C], [:, C, :], [C, :, *], [:, *, :], [*, :, *], [:, *, :], [*, :, 2], [:, 2, :], [2, :,  ], [:,  , eof], [ , eof, :], [eof, :,  ], [:,  , :], [ , :,  ], [:,  , :], [ , :,        ], [:,        , forward], [       , forward,       ], [forward,       , lexeme_beginnig], [      , lexeme_beginnig,        ], [lexeme_beginnig,        , forward], [       , forward,        ], [forward,        , forward], [       , forward, :], [forward, :, C], [:, C, :], [C, :, *], [:, *, :], [*, :, *], [:, *, :], [*, :, 2], [:, 2, :], [2, :,  ], [:,  , eof], [ , eof, :], [eof, :,  ], [:,  , :], [ , :,  ], [:,  , :], [ , :,    ], [:,    , Prof.], [   , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,   ], [Kagathara,   , #], [  , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 2], [Unit, 2, –], [2, –, Lexical], [–, Lexical, Analyzer], [Lexical, Analyzer, ‹#›], [Analyzer, ‹#›,  ]]

>> Noun Phrases are: 
[E, Mi, : C,    Prof. Dixita B Kagathara, (CD, Unit, Lexical Analyzer ‹#›  Buffer, Code, end, first half, end, second half, beginning, first half, E,    Prof. Dixita B Kagathara, (CD, Unit]

>> Named Entities are: 
[('2', 'CARDINAL'), ('2', 'CARDINAL'), ('Dixita', 'PERSON'), ('Kagathara', 'PERSON'), ('Buffer', 'PERSON'), ('end of first half', 'DATE'), ('half', 'CARDINAL'), ('half', 'CARDINAL'), ('2', 'CARDINAL'), ('2', 'CARDINAL'), ('Dixita', 'PERSON'), ('Kagathara', 'PERSON')]


============================ Sentence 37 =============================

Sentinels   


>> Tokens are: 
[Sentinels,  ] 

>> PoS Tags are: 
[('Sentinels', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Sentinels', 'ROOT'), (' ', 'nummod')]

>> Bigrams: 
[[Sentinels,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Sentinels]

>> Named Entities are: 
[]


============================ Sentence 38 =============================

In buffer pairs we must check, each time we move the forward pointer that we have not moved off one of the buffers. 


>> Tokens are: 
[buffer, pairs, check, ,, time, forward, pointer, moved, buffers, .] 

>> PoS Tags are: 
[('buffer', 'NOUN'), ('pairs', 'NOUN'), ('check', 'VERB'), (',', 'PUNCT'), ('time', 'NOUN'), ('forward', 'ADJ'), ('pointer', 'NOUN'), ('moved', 'VERB'), ('buffers', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('buffer', 'compound'), ('pairs', 'pobj'), ('check', 'ROOT'), (',', 'punct'), ('time', 'npadvmod'), ('forward', 'amod'), ('pointer', 'dobj'), ('moved', 'relcl'), ('buffers', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[buffer, pairs], [pairs, check], [check, ,], [,, time], [time, forward], [forward, pointer], [pointer, moved], [moved, buffers], [buffers, .]]

>> Trigrams: 
[[buffer, pairs, check], [pairs, check, ,], [check, ,, time], [,, time, forward], [time, forward, pointer], [forward, pointer, moved], [pointer, moved, buffers], [moved, buffers, .]]

>> Noun Phrases are: 
[buffer pairs, we, we, the forward pointer, we, the buffers]

>> Named Entities are: 
[('one', 'CARDINAL')]


============================ Sentence 39 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 40 =============================

Thus, for each character read, we make two tests. 


>> Tokens are: 
[,, character, read, ,, tests, .] 

>> PoS Tags are: 
[(',', 'PUNCT'), ('character', 'NOUN'), ('read', 'VERB'), (',', 'PUNCT'), ('tests', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(',', 'punct'), ('character', 'nsubj'), ('read', 'advcl'), (',', 'punct'), ('tests', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[,, character], [character, read], [read, ,], [,, tests], [tests, .]]

>> Trigrams: 
[[,, character, read], [character, read, ,], [read, ,, tests], [,, tests, .]]

>> Noun Phrases are: 
[each character, we, two tests]

>> Named Entities are: 
[('two', 'CARDINAL')]


============================ Sentence 41 =============================

We can combine the buffer-end test with the test for the current character. 


>> Tokens are: 
[combine, buffer, -, end, test, test, current, character, .] 

>> PoS Tags are: 
[('combine', 'VERB'), ('buffer', 'NOUN'), ('-', 'PUNCT'), ('end', 'NOUN'), ('test', 'NOUN'), ('test', 'NOUN'), ('current', 'ADJ'), ('character', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('combine', 'ROOT'), ('buffer', 'compound'), ('-', 'punct'), ('end', 'compound'), ('test', 'dobj'), ('test', 'pobj'), ('current', 'amod'), ('character', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[combine, buffer], [buffer, -], [-, end], [end, test], [test, test], [test, current], [current, character], [character, .]]

>> Trigrams: 
[[combine, buffer, -], [buffer, -, end], [-, end, test], [end, test, test], [test, test, current], [test, current, character], [current, character, .]]

>> Noun Phrases are: 
[We, the buffer-end test, the test, the current character]

>> Named Entities are: 
[]


============================ Sentence 42 =============================

We can reduce the two tests to one if we extend each buffer to hold a sentinel character at the end. 


>> Tokens are: 
[reduce, tests, extend, buffer, hold, sentinel, character, end, .] 

>> PoS Tags are: 
[('reduce', 'VERB'), ('tests', 'NOUN'), ('extend', 'VERB'), ('buffer', 'NOUN'), ('hold', 'VERB'), ('sentinel', 'ADJ'), ('character', 'NOUN'), ('end', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('reduce', 'ROOT'), ('tests', 'dobj'), ('extend', 'advcl'), ('buffer', 'dobj'), ('hold', 'xcomp'), ('sentinel', 'compound'), ('character', 'dobj'), ('end', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[reduce, tests], [tests, extend], [extend, buffer], [buffer, hold], [hold, sentinel], [sentinel, character], [character, end], [end, .]]

>> Trigrams: 
[[reduce, tests, extend], [tests, extend, buffer], [extend, buffer, hold], [buffer, hold, sentinel], [hold, sentinel, character], [sentinel, character, end], [character, end, .]]

>> Noun Phrases are: 
[We, the two tests, we, each buffer, a sentinel character, the end]

>> Named Entities are: 
[('two', 'CARDINAL')]


============================ Sentence 43 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 44 =============================

The sentinel is a special character that cannot be part of the source program, and a natural choice is the character EOF. 


>> Tokens are: 
[sentinel, special, character, source, program, ,, natural, choice, character, EOF, .] 

>> PoS Tags are: 
[('sentinel', 'NOUN'), ('special', 'ADJ'), ('character', 'NOUN'), ('source', 'NOUN'), ('program', 'NOUN'), (',', 'PUNCT'), ('natural', 'ADJ'), ('choice', 'NOUN'), ('character', 'NOUN'), ('EOF', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('sentinel', 'nsubj'), ('special', 'amod'), ('character', 'attr'), ('source', 'compound'), ('program', 'pobj'), (',', 'punct'), ('natural', 'amod'), ('choice', 'nsubj'), ('character', 'compound'), ('EOF', 'attr'), ('.', 'punct')]

>> Bigrams: 
[[sentinel, special], [special, character], [character, source], [source, program], [program, ,], [,, natural], [natural, choice], [choice, character], [character, EOF], [EOF, .]]

>> Trigrams: 
[[sentinel, special, character], [special, character, source], [character, source, program], [source, program, ,], [program, ,, natural], [,, natural, choice], [natural, choice, character], [choice, character, EOF], [character, EOF, .]]

>> Noun Phrases are: 
[The sentinel, a special character, part, the source program, a natural choice, the character EOF]

>> Named Entities are: 
[]


============================ Sentence 45 =============================

 :  : E :  : = :  : Mi : * : eof  : C: * : * : 2 :  eof : : eof        forward       lexeme_beginnig    Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›   


>> Tokens are: 
[ , :,  , :, E, :,  , :, =, :,  , :, Mi, :, *, :, eof,  , :, C, :, *, :, *, :, 2, :,  , eof, :, :, eof,        , forward,       , lexeme_beginnig,    , Prof., Dixita, B, Kagathara,   , #, 2170701, (, CD, ),   , ,   , Unit, 2, –, Lexical, Analyzer, ‹#›,  ] 

>> PoS Tags are: 
[(' ', 'SPACE'), (':', 'PUNCT'), (' ', 'SPACE'), (':', 'PUNCT'), ('E', 'NOUN'), (':', 'PUNCT'), (' ', 'SPACE'), (':', 'PUNCT'), ('=', 'X'), (':', 'PUNCT'), (' ', 'SPACE'), (':', 'PUNCT'), ('Mi', 'PROPN'), (':', 'PUNCT'), ('*', 'PUNCT'), (':', 'PUNCT'), ('eof', 'ADJ'), (' ', 'SPACE'), (':', 'PUNCT'), ('C', 'NOUN'), (':', 'PUNCT'), ('*', 'PUNCT'), (':', 'PUNCT'), ('*', 'PUNCT'), (':', 'PUNCT'), ('2', 'NUM'), (':', 'PUNCT'), (' ', 'SPACE'), ('eof', 'X'), (':', 'PUNCT'), (':', 'PUNCT'), ('eof', 'NUM'), ('       ', 'SPACE'), ('forward', 'ADV'), ('      ', 'SPACE'), ('lexeme_beginnig', 'NUM'), ('   ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('  ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'PROPN'), ('Analyzer', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'nsubj'), (':', 'punct'), (' ', 'appos'), (':', 'punct'), ('E', 'appos'), (':', 'punct'), (' ', 'appos'), (':', 'punct'), ('=', 'appos'), (':', 'punct'), (' ', 'appos'), (':', 'punct'), ('Mi', 'appos'), (':', 'punct'), ('*', 'punct'), (':', 'punct'), ('eof', 'amod'), (' ', 'dep'), (':', 'punct'), ('C', 'appos'), (':', 'punct'), ('*', 'punct'), (':', 'punct'), ('*', 'punct'), (':', 'punct'), ('2', 'appos'), (':', 'punct'), (' ', 'quantmod'), ('eof', 'appos'), (':', 'punct'), (':', 'punct'), ('eof', 'nmod'), ('       ', 'nummod'), ('forward', 'advmod'), ('      ', 'compound'), ('lexeme_beginnig', 'compound'), ('   ', 'nummod'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('  ', 'prep'), ('#', 'nmod'), ('2170701', 'appos'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('2', 'nummod'), ('–', 'punct'), ('Lexical', 'compound'), ('Analyzer', 'npadvmod'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[ , :], [:,  ], [ , :], [:, E], [E, :], [:,  ], [ , :], [:, =], [=, :], [:,  ], [ , :], [:, Mi], [Mi, :], [:, *], [*, :], [:, eof], [eof,  ], [ , :], [:, C], [C, :], [:, *], [*, :], [:, *], [*, :], [:, 2], [2, :], [:,  ], [ , eof], [eof, :], [:, :], [:, eof], [eof,        ], [       , forward], [forward,       ], [      , lexeme_beginnig], [lexeme_beginnig,    ], [   , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,   ], [  , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 2], [2, –], [–, Lexical], [Lexical, Analyzer], [Analyzer, ‹#›], [‹#›,  ]]

>> Trigrams: 
[[ , :,  ], [:,  , :], [ , :, E], [:, E, :], [E, :,  ], [:,  , :], [ , :, =], [:, =, :], [=, :,  ], [:,  , :], [ , :, Mi], [:, Mi, :], [Mi, :, *], [:, *, :], [*, :, eof], [:, eof,  ], [eof,  , :], [ , :, C], [:, C, :], [C, :, *], [:, *, :], [*, :, *], [:, *, :], [*, :, 2], [:, 2, :], [2, :,  ], [:,  , eof], [ , eof, :], [eof, :, :], [:, :, eof], [:, eof,        ], [eof,        , forward], [       , forward,       ], [forward,       , lexeme_beginnig], [      , lexeme_beginnig,    ], [lexeme_beginnig,    , Prof.], [   , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,   ], [Kagathara,   , #], [  , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 2], [Unit, 2, –], [2, –, Lexical], [–, Lexical, Analyzer], [Lexical, Analyzer, ‹#›], [Analyzer, ‹#›,  ]]

>> Noun Phrases are: 
[E, Mi, eof  : C, eof        forward       lexeme_beginnig    Prof. Dixita B Kagathara, (CD, Unit]

>> Named Entities are: 
[('2', 'CARDINAL'), ('Dixita', 'PERSON'), ('Kagathara', 'PERSON')]


============================ Sentence 46 =============================

Sentinels  forward  := forward + 1; 	if forward  = eof then begin 		if forward at end of first half then begin 			reload second half; 			forward  := forward + 1; 		end	 		else if forward at the second half then begin 			reload first half; 			move forward to beginning of first half; 		end 		else terminate lexical analysis; 	end  :  : E :  : = :  : Mi : * : : C: * : * : 2 :  eof : : eof       lexeme_beginnig        forward eof        forward        forward : C: * : * : 2 :  eof : : eof    Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Specification of tokens        Strings and languages  	Term	Definition  	Prefix of s	A string obtained by removing zero or more trailing symbol of string S. e.g.--.-, ban is prefix of banana. 


>> Tokens are: 
[Sentinels,  , forward,  , :, =, forward, +, 1, ;, 	, forward,  , =, eof, begin, 		, forward, end, half, begin, 			, reload, second, half, ;, 			, forward,  , :, =, forward, +, 1, ;, 		, end, 	 		, forward, second, half, begin, 			, reload, half, ;, 			, forward, beginning, half, ;, 		, end, 		, terminate, lexical, analysis, ;, 	, end,  , :,  , :, E, :,  , :, =, :,  , :, Mi, :, *, :, :, C, :, *, :, *, :, 2, :,  , eof, :, :, eof,       , lexeme_beginnig,        , forward, eof,        , forward,        , forward, :, C, :, *, :, *, :, 2, :,  , eof, :, :, eof,    , Prof., Dixita, B, Kagathara,   , #, 2170701, (, CD, ),   , ,   , Unit, 2, –, Lexical, Analyzer, ‹#›,  , Specification, tokens,        , Strings, languages,  	, Term, 	, Definition,  	, Prefix, s, 	, string, obtained, removing, zero, trailing, symbol, string, S., e.g.--.-, ,, ban, prefix, banana, .] 

>> PoS Tags are: 
[('Sentinels', 'NOUN'), (' ', 'SPACE'), ('forward', 'ADV'), (' ', 'SPACE'), (':', 'PUNCT'), ('=', 'PUNCT'), ('forward', 'ADV'), ('+', 'NUM'), ('1', 'NUM'), (';', 'PUNCT'), ('\t', 'SPACE'), ('forward', 'ADV'), (' ', 'SPACE'), ('=', 'SYM'), ('eof', 'ADV'), ('begin', 'VERB'), ('\t\t', 'SPACE'), ('forward', 'ADV'), ('end', 'NOUN'), ('half', 'NOUN'), ('begin', 'VERB'), ('\t\t\t', 'SPACE'), ('reload', 'NOUN'), ('second', 'ADJ'), ('half', 'NOUN'), (';', 'PUNCT'), ('\t\t\t', 'SPACE'), ('forward', 'ADV'), (' ', 'SPACE'), (':', 'PUNCT'), ('=', 'PUNCT'), ('forward', 'ADV'), ('+', 'NUM'), ('1', 'NUM'), (';', 'PUNCT'), ('\t\t', 'SPACE'), ('end', 'VERB'), ('\t \t\t', 'SPACE'), ('forward', 'ADV'), ('second', 'ADJ'), ('half', 'NOUN'), ('begin', 'VERB'), ('\t\t\t', 'SPACE'), ('reload', 'NOUN'), ('half', 'NOUN'), (';', 'PUNCT'), ('\t\t\t', 'SPACE'), ('forward', 'ADV'), ('beginning', 'NOUN'), ('half', 'NOUN'), (';', 'PUNCT'), ('\t\t', 'SPACE'), ('end', 'NOUN'), ('\t\t', 'SPACE'), ('terminate', 'VERB'), ('lexical', 'ADJ'), ('analysis', 'NOUN'), (';', 'PUNCT'), ('\t', 'SPACE'), ('end', 'VERB'), (' ', 'SPACE'), (':', 'PUNCT'), (' ', 'SPACE'), (':', 'PUNCT'), ('E', 'NOUN'), (':', 'PUNCT'), (' ', 'SPACE'), (':', 'PUNCT'), ('=', 'X'), (':', 'PUNCT'), (' ', 'SPACE'), (':', 'PUNCT'), ('Mi', 'PROPN'), (':', 'PUNCT'), ('*', 'PUNCT'), (':', 'PUNCT'), (':', 'PUNCT'), ('C', 'NOUN'), (':', 'PUNCT'), ('*', 'PUNCT'), (':', 'PUNCT'), ('*', 'PUNCT'), (':', 'PUNCT'), ('2', 'NUM'), (':', 'PUNCT'), (' ', 'SPACE'), ('eof', 'X'), (':', 'PUNCT'), (':', 'PUNCT'), ('eof', 'NOUN'), ('      ', 'SPACE'), ('lexeme_beginnig', 'PROPN'), ('       ', 'SPACE'), ('forward', 'ADV'), ('eof', 'NUM'), ('       ', 'SPACE'), ('forward', 'ADV'), ('       ', 'SPACE'), ('forward', 'ADV'), (':', 'PUNCT'), ('C', 'NOUN'), (':', 'PUNCT'), ('*', 'PUNCT'), (':', 'PUNCT'), ('*', 'PUNCT'), (':', 'PUNCT'), ('2', 'NUM'), (':', 'PUNCT'), (' ', 'SPACE'), ('eof', 'X'), (':', 'PUNCT'), (':', 'PUNCT'), ('eof', 'NUM'), ('   ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('  ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'PROPN'), ('Analyzer', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE'), ('Specification', 'PROPN'), ('tokens', 'NOUN'), ('       ', 'SPACE'), ('Strings', 'PROPN'), ('languages', 'VERB'), (' \t', 'SPACE'), ('Term', 'PROPN'), ('\t', 'SPACE'), ('Definition', 'PROPN'), (' \t', 'SPACE'), ('Prefix', 'PROPN'), ('s', 'PROPN'), ('\t', 'SPACE'), ('string', 'NOUN'), ('obtained', 'VERB'), ('removing', 'VERB'), ('zero', 'NUM'), ('trailing', 'VERB'), ('symbol', 'NOUN'), ('string', 'NOUN'), ('S.', 'PROPN'), ('e.g.--.-', 'PROPN'), (',', 'PUNCT'), ('ban', 'NOUN'), ('prefix', 'NOUN'), ('banana', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Sentinels', 'nsubj'), (' ', 'appos'), ('forward', 'advmod'), (' ', 'appos'), (':', 'punct'), ('=', 'appos'), ('forward', 'advmod'), ('+', 'appos'), ('1', 'nummod'), (';', 'punct'), ('\t', 'appos'), ('forward', 'advmod'), (' ', 'advcl'), ('=', 'punct'), ('eof', 'appos'), ('begin', 'ccomp'), ('\t\t', 'dobj'), ('forward', 'advmod'), ('end', 'pobj'), ('half', 'pobj'), ('begin', 'conj'), ('\t\t\t', 'compound'), ('reload', 'dobj'), ('second', 'amod'), ('half', 'npadvmod'), (';', 'punct'), ('\t\t\t', 'npadvmod'), ('forward', 'advmod'), (' ', 'appos'), (':', 'punct'), ('=', 'punct'), ('forward', 'advmod'), ('+', 'cc'), ('1', 'advmod'), (';', 'punct'), ('\t\t', 'nsubj'), ('end', 'ccomp'), ('\t \t\t', 'advmod'), ('forward', 'advmod'), ('second', 'amod'), ('half', 'pobj'), ('begin', 'advcl'), ('\t\t\t', 'dobj'), ('reload', 'npadvmod'), ('half', 'npadvmod'), (';', 'punct'), ('\t\t\t', 'nsubj'), ('forward', 'advmod'), ('beginning', 'pobj'), ('half', 'pobj'), (';', 'punct'), ('\t\t', 'nsubj'), ('end', 'nsubj'), ('\t\t', 'nsubj'), ('terminate', 'conj'), ('lexical', 'amod'), ('analysis', 'dobj'), (';', 'punct'), ('\t', 'nsubj'), ('end', 'dep'), (' ', 'dobj'), (':', 'punct'), (' ', 'dep'), (':', 'punct'), ('E', 'appos'), (':', 'punct'), (' ', 'appos'), (':', 'punct'), ('=', 'dep'), (':', 'punct'), (' ', 'dobj'), (':', 'punct'), ('Mi', 'dep'), (':', 'punct'), ('*', 'punct'), (':', 'punct'), (':', 'punct'), ('C', 'dep'), (':', 'punct'), ('*', 'punct'), (':', 'punct'), ('*', 'punct'), (':', 'punct'), ('2', 'appos'), (':', 'punct'), (' ', 'appos'), ('eof', 'appos'), (':', 'punct'), (':', 'punct'), ('eof', 'compound'), ('      ', 'compound'), ('lexeme_beginnig', 'compound'), ('       ', 'appos'), ('forward', 'advmod'), ('eof', 'amod'), ('       ', 'npadvmod'), ('forward', 'advmod'), ('       ', 'appos'), ('forward', 'advmod'), (':', 'punct'), ('C', 'appos'), (':', 'punct'), ('*', 'punct'), (':', 'punct'), ('*', 'punct'), (':', 'punct'), ('2', 'appos'), (':', 'punct'), (' ', 'appos'), ('eof', 'appos'), (':', 'punct'), (':', 'punct'), ('eof', 'nummod'), ('   ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('  ', 'prep'), ('#', 'nmod'), ('2170701', 'appos'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'nsubj'), ('\uf077', 'ccomp'), ('  ', 'dep'), ('Unit', 'appos'), ('2', 'nummod'), ('–', 'punct'), ('Lexical', 'compound'), ('Analyzer', 'nsubj'), ('‹#›', 'punct'), (' ', 'appos'), ('Specification', 'appos'), ('tokens', 'compound'), ('       ', 'compound'), ('Strings', 'pobj'), ('languages', 'conj'), (' \t', 'compound'), ('Term', 'compound'), ('\t', 'compound'), ('Definition', 'compound'), (' \t', 'compound'), ('Prefix', 'dobj'), ('s', 'pobj'), ('\t', 'compound'), ('string', 'pobj'), ('obtained', 'acl'), ('removing', 'pcomp'), ('zero', 'nummod'), ('trailing', 'amod'), ('symbol', 'dobj'), ('string', 'pobj'), ('S.', 'compound'), ('e.g.--.-', 'appos'), (',', 'punct'), ('ban', 'appos'), ('prefix', 'attr'), ('banana', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Sentinels,  ], [ , forward], [forward,  ], [ , :], [:, =], [=, forward], [forward, +], [+, 1], [1, ;], [;, 	], [	, forward], [forward,  ], [ , =], [=, eof], [eof, begin], [begin, 		], [		, forward], [forward, end], [end, half], [half, begin], [begin, 			], [			, reload], [reload, second], [second, half], [half, ;], [;, 			], [			, forward], [forward,  ], [ , :], [:, =], [=, forward], [forward, +], [+, 1], [1, ;], [;, 		], [		, end], [end, 	 		], [	 		, forward], [forward, second], [second, half], [half, begin], [begin, 			], [			, reload], [reload, half], [half, ;], [;, 			], [			, forward], [forward, beginning], [beginning, half], [half, ;], [;, 		], [		, end], [end, 		], [		, terminate], [terminate, lexical], [lexical, analysis], [analysis, ;], [;, 	], [	, end], [end,  ], [ , :], [:,  ], [ , :], [:, E], [E, :], [:,  ], [ , :], [:, =], [=, :], [:,  ], [ , :], [:, Mi], [Mi, :], [:, *], [*, :], [:, :], [:, C], [C, :], [:, *], [*, :], [:, *], [*, :], [:, 2], [2, :], [:,  ], [ , eof], [eof, :], [:, :], [:, eof], [eof,       ], [      , lexeme_beginnig], [lexeme_beginnig,        ], [       , forward], [forward, eof], [eof,        ], [       , forward], [forward,        ], [       , forward], [forward, :], [:, C], [C, :], [:, *], [*, :], [:, *], [*, :], [:, 2], [2, :], [:,  ], [ , eof], [eof, :], [:, :], [:, eof], [eof,    ], [   , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,   ], [  , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 2], [2, –], [–, Lexical], [Lexical, Analyzer], [Analyzer, ‹#›], [‹#›,  ], [ , Specification], [Specification, tokens], [tokens,        ], [       , Strings], [Strings, languages], [languages,  	], [ 	, Term], [Term, 	], [	, Definition], [Definition,  	], [ 	, Prefix], [Prefix, s], [s, 	], [	, string], [string, obtained], [obtained, removing], [removing, zero], [zero, trailing], [trailing, symbol], [symbol, string], [string, S.], [S., e.g.--.-], [e.g.--.-, ,], [,, ban], [ban, prefix], [prefix, banana], [banana, .]]

>> Trigrams: 
[[Sentinels,  , forward], [ , forward,  ], [forward,  , :], [ , :, =], [:, =, forward], [=, forward, +], [forward, +, 1], [+, 1, ;], [1, ;, 	], [;, 	, forward], [	, forward,  ], [forward,  , =], [ , =, eof], [=, eof, begin], [eof, begin, 		], [begin, 		, forward], [		, forward, end], [forward, end, half], [end, half, begin], [half, begin, 			], [begin, 			, reload], [			, reload, second], [reload, second, half], [second, half, ;], [half, ;, 			], [;, 			, forward], [			, forward,  ], [forward,  , :], [ , :, =], [:, =, forward], [=, forward, +], [forward, +, 1], [+, 1, ;], [1, ;, 		], [;, 		, end], [		, end, 	 		], [end, 	 		, forward], [	 		, forward, second], [forward, second, half], [second, half, begin], [half, begin, 			], [begin, 			, reload], [			, reload, half], [reload, half, ;], [half, ;, 			], [;, 			, forward], [			, forward, beginning], [forward, beginning, half], [beginning, half, ;], [half, ;, 		], [;, 		, end], [		, end, 		], [end, 		, terminate], [		, terminate, lexical], [terminate, lexical, analysis], [lexical, analysis, ;], [analysis, ;, 	], [;, 	, end], [	, end,  ], [end,  , :], [ , :,  ], [:,  , :], [ , :, E], [:, E, :], [E, :,  ], [:,  , :], [ , :, =], [:, =, :], [=, :,  ], [:,  , :], [ , :, Mi], [:, Mi, :], [Mi, :, *], [:, *, :], [*, :, :], [:, :, C], [:, C, :], [C, :, *], [:, *, :], [*, :, *], [:, *, :], [*, :, 2], [:, 2, :], [2, :,  ], [:,  , eof], [ , eof, :], [eof, :, :], [:, :, eof], [:, eof,       ], [eof,       , lexeme_beginnig], [      , lexeme_beginnig,        ], [lexeme_beginnig,        , forward], [       , forward, eof], [forward, eof,        ], [eof,        , forward], [       , forward,        ], [forward,        , forward], [       , forward, :], [forward, :, C], [:, C, :], [C, :, *], [:, *, :], [*, :, *], [:, *, :], [*, :, 2], [:, 2, :], [2, :,  ], [:,  , eof], [ , eof, :], [eof, :, :], [:, :, eof], [:, eof,    ], [eof,    , Prof.], [   , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,   ], [Kagathara,   , #], [  , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 2], [Unit, 2, –], [2, –, Lexical], [–, Lexical, Analyzer], [Lexical, Analyzer, ‹#›], [Analyzer, ‹#›,  ], [‹#›,  , Specification], [ , Specification, tokens], [Specification, tokens,        ], [tokens,        , Strings], [       , Strings, languages], [Strings, languages,  	], [languages,  	, Term], [ 	, Term, 	], [Term, 	, Definition], [	, Definition,  	], [Definition,  	, Prefix], [ 	, Prefix, s], [Prefix, s, 	], [s, 	, string], [	, string, obtained], [string, obtained, removing], [obtained, removing, zero], [removing, zero, trailing], [zero, trailing, symbol], [trailing, symbol, string], [symbol, string, S.], [string, S., e.g.--.-], [S., e.g.--.-, ,], [e.g.--.-, ,, ban], [,, ban, prefix], [ban, prefix, banana], [prefix, banana, .]]

>> Noun Phrases are: 
[Sentinels, end, first half, 			reload, the second half, beginning, first half, 		end, lexical analysis, E, C, eof    Prof. Dixita B Kagathara, (CD, Unit, Lexical Analyzer, Specification, tokens        Strings,  	Term	Definition  	Prefix, s, 	A string, zero or more trailing symbol, string, S. e.g.--.-, ban, prefix, banana]

>> Named Entities are: 
[('end of first half', 'DATE'), ('the second half', 'DATE'), ('2', 'CARDINAL'), ('2', 'CARDINAL'), ('Dixita', 'PERSON'), ('Kagathara', 'PERSON'), ('zero', 'CARDINAL'), ('S. e.g.--.-', 'PERSON')]


============================ Sentence 47 =============================

 	Suffix of S	 


>> Tokens are: 
[ 	, Suffix, S, 	] 

>> PoS Tags are: 
[(' \t', 'SPACE'), ('Suffix', 'NOUN'), ('S', 'PROPN'), ('\t', 'SPACE')] 

>> Dependency Tags are: 
[(' \t', 'compound'), ('Suffix', 'ROOT'), ('S', 'compound'), ('\t', 'pobj')]

>> Bigrams: 
[[ 	, Suffix], [Suffix, S], [S, 	]]

>> Trigrams: 
[[ 	, Suffix, S], [Suffix, S, 	]]

>> Noun Phrases are: 
[ 	Suffix]

>> Named Entities are: 
[]


============================ Sentence 48 =============================

A string obtained by removing zero or more leading symbol of string S. e.g.--.-, nana is suffix of banana. 


>> Tokens are: 
[string, obtained, removing, zero, leading, symbol, string, S., e.g.--.-, ,, nana, suffix, banana, .] 

>> PoS Tags are: 
[('string', 'NOUN'), ('obtained', 'VERB'), ('removing', 'VERB'), ('zero', 'NUM'), ('leading', 'ADJ'), ('symbol', 'NOUN'), ('string', 'NOUN'), ('S.', 'PROPN'), ('e.g.--.-', 'PROPN'), (',', 'PUNCT'), ('nana', 'NOUN'), ('suffix', 'NOUN'), ('banana', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('string', 'nsubj'), ('obtained', 'acl'), ('removing', 'pcomp'), ('zero', 'nummod'), ('leading', 'amod'), ('symbol', 'dobj'), ('string', 'pobj'), ('S.', 'compound'), ('e.g.--.-', 'appos'), (',', 'punct'), ('nana', 'nsubj'), ('suffix', 'acomp'), ('banana', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[string, obtained], [obtained, removing], [removing, zero], [zero, leading], [leading, symbol], [symbol, string], [string, S.], [S., e.g.--.-], [e.g.--.-, ,], [,, nana], [nana, suffix], [suffix, banana], [banana, .]]

>> Trigrams: 
[[string, obtained, removing], [obtained, removing, zero], [removing, zero, leading], [zero, leading, symbol], [leading, symbol, string], [symbol, string, S.], [string, S., e.g.--.-], [S., e.g.--.-, ,], [e.g.--.-, ,, nana], [,, nana, suffix], [nana, suffix, banana], [suffix, banana, .]]

>> Noun Phrases are: 
[A string, zero or more leading symbol, string, S. e.g.--.-, nana, banana]

>> Named Entities are: 
[('zero', 'CARDINAL'), ('S. e.g.--.-', 'PERSON')]


============================ Sentence 49 =============================

 	Sub string of S	A string obtained by removing prefix and suffix from S. e.g.--.-, nan is substring of banana  	Proper prefix, suffix and substring of S	Any nonempty string x that is respectively proper prefix, suffix or substring of S, such that s≠x. 


>> Tokens are: 
[ 	, Sub, string, S, 	, string, obtained, removing, prefix, suffix, S., e.g.--.-, ,, nan, substring, banana,  	, Proper, prefix, ,, suffix, substring, S, 	, nonempty, string, x, respectively, proper, prefix, ,, suffix, substring, S, ,, s≠x, .] 

>> PoS Tags are: 
[(' \t', 'SPACE'), ('Sub', 'NOUN'), ('string', 'NOUN'), ('S', 'PROPN'), ('\t', 'SPACE'), ('string', 'NOUN'), ('obtained', 'VERB'), ('removing', 'VERB'), ('prefix', 'NOUN'), ('suffix', 'NOUN'), ('S.', 'PROPN'), ('e.g.--.-', 'PROPN'), (',', 'PUNCT'), ('nan', 'PROPN'), ('substring', 'NOUN'), ('banana', 'NOUN'), (' \t', 'SPACE'), ('Proper', 'ADJ'), ('prefix', 'NOUN'), (',', 'PUNCT'), ('suffix', 'NOUN'), ('substring', 'NOUN'), ('S', 'PROPN'), ('\t', 'SPACE'), ('nonempty', 'ADJ'), ('string', 'NOUN'), ('x', 'PUNCT'), ('respectively', 'ADV'), ('proper', 'ADJ'), ('prefix', 'NOUN'), (',', 'PUNCT'), ('suffix', 'NOUN'), ('substring', 'NOUN'), ('S', 'PROPN'), (',', 'PUNCT'), ('s≠x', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' \t', 'nummod'), ('Sub', 'compound'), ('string', 'nsubj'), ('S', 'compound'), ('\t', 'compound'), ('string', 'pobj'), ('obtained', 'acl'), ('removing', 'pcomp'), ('prefix', 'dobj'), ('suffix', 'conj'), ('S.', 'pobj'), ('e.g.--.-', 'punct'), (',', 'punct'), ('nan', 'nsubj'), ('substring', 'ROOT'), ('banana', 'compound'), (' \t', 'nummod'), ('Proper', 'amod'), ('prefix', 'pobj'), (',', 'punct'), ('suffix', 'conj'), ('substring', 'conj'), ('S', 'compound'), ('\t', 'pobj'), ('nonempty', 'amod'), ('string', 'npadvmod'), ('x', 'punct'), ('respectively', 'advmod'), ('proper', 'amod'), ('prefix', 'attr'), (',', 'punct'), ('suffix', 'conj'), ('substring', 'conj'), ('S', 'pobj'), (',', 'punct'), ('s≠x', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[ 	, Sub], [Sub, string], [string, S], [S, 	], [	, string], [string, obtained], [obtained, removing], [removing, prefix], [prefix, suffix], [suffix, S.], [S., e.g.--.-], [e.g.--.-, ,], [,, nan], [nan, substring], [substring, banana], [banana,  	], [ 	, Proper], [Proper, prefix], [prefix, ,], [,, suffix], [suffix, substring], [substring, S], [S, 	], [	, nonempty], [nonempty, string], [string, x], [x, respectively], [respectively, proper], [proper, prefix], [prefix, ,], [,, suffix], [suffix, substring], [substring, S], [S, ,], [,, s≠x], [s≠x, .]]

>> Trigrams: 
[[ 	, Sub, string], [Sub, string, S], [string, S, 	], [S, 	, string], [	, string, obtained], [string, obtained, removing], [obtained, removing, prefix], [removing, prefix, suffix], [prefix, suffix, S.], [suffix, S., e.g.--.-], [S., e.g.--.-, ,], [e.g.--.-, ,, nan], [,, nan, substring], [nan, substring, banana], [substring, banana,  	], [banana,  	, Proper], [ 	, Proper, prefix], [Proper, prefix, ,], [prefix, ,, suffix], [,, suffix, substring], [suffix, substring, S], [substring, S, 	], [S, 	, nonempty], [	, nonempty, string], [nonempty, string, x], [string, x, respectively], [x, respectively, proper], [respectively, proper, prefix], [proper, prefix, ,], [prefix, ,, suffix], [,, suffix, substring], [suffix, substring, S], [substring, S, ,], [S, ,, s≠x], [,, s≠x, .]]

>> Noun Phrases are: 
[ 	Sub string, S	A string, prefix, suffix, S., nan, banana  	Proper prefix, suffix, substring, proper prefix, suffix, substring, S]

>> Named Entities are: 
[]


============================ Sentence 50 =============================

 	Subsequence of S	A string obtained by removing zero or more not necessarily contiguous symbol from S. e.g.--.-, baaa is subsequence of banana. 


>> Tokens are: 
[ 	, Subsequence, S, 	, string, obtained, removing, zero, necessarily, contiguous, symbol, S., e.g.--.-, ,, baaa, subsequence, banana, .] 

>> PoS Tags are: 
[(' \t', 'SPACE'), ('Subsequence', 'NOUN'), ('S', 'PROPN'), ('\t', 'SPACE'), ('string', 'NOUN'), ('obtained', 'VERB'), ('removing', 'VERB'), ('zero', 'NUM'), ('necessarily', 'ADV'), ('contiguous', 'ADJ'), ('symbol', 'NOUN'), ('S.', 'PROPN'), ('e.g.--.-', 'PROPN'), (',', 'PUNCT'), ('baaa', 'NOUN'), ('subsequence', 'NOUN'), ('banana', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' \t', 'nummod'), ('Subsequence', 'nsubj'), ('S', 'compound'), ('\t', 'compound'), ('string', 'pobj'), ('obtained', 'acl'), ('removing', 'pcomp'), ('zero', 'dobj'), ('necessarily', 'nmod'), ('contiguous', 'amod'), ('symbol', 'dobj'), ('S.', 'pobj'), ('e.g.--.-', 'punct'), (',', 'punct'), ('baaa', 'nsubj'), ('subsequence', 'attr'), ('banana', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[ 	, Subsequence], [Subsequence, S], [S, 	], [	, string], [string, obtained], [obtained, removing], [removing, zero], [zero, necessarily], [necessarily, contiguous], [contiguous, symbol], [symbol, S.], [S., e.g.--.-], [e.g.--.-, ,], [,, baaa], [baaa, subsequence], [subsequence, banana], [banana, .]]

>> Trigrams: 
[[ 	, Subsequence, S], [Subsequence, S, 	], [S, 	, string], [	, string, obtained], [string, obtained, removing], [obtained, removing, zero], [removing, zero, necessarily], [zero, necessarily, contiguous], [necessarily, contiguous, symbol], [contiguous, symbol, S.], [symbol, S., e.g.--.-], [S., e.g.--.-, ,], [e.g.--.-, ,, baaa], [,, baaa, subsequence], [baaa, subsequence, banana], [subsequence, banana, .]]

>> Noun Phrases are: 
[ 	Subsequence, S	A string, contiguous symbol, S., baaa, subsequence, banana]

>> Named Entities are: 
[('zero', 'CARDINAL'), ('S. e.g.--.-', 'PERSON')]


============================ Sentence 51 =============================

    Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›   


>> Tokens are: 
[    , Prof., Dixita, B, Kagathara,   , #, 2170701, (, CD, ),   , ,   , Unit, 2, –, Lexical, Analyzer, ‹#›,  ] 

>> PoS Tags are: 
[('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('  ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'PROPN'), ('Analyzer', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('    ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'nsubj'), ('  ', 'appos'), ('#', 'nmod'), ('2170701', 'npadvmod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'dep'), ('  ', 'dobj'), ('Unit', 'appos'), ('2', 'nummod'), ('–', 'punct'), ('Lexical', 'compound'), ('Analyzer', 'ROOT'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[    , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,   ], [  , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 2], [2, –], [–, Lexical], [Lexical, Analyzer], [Analyzer, ‹#›], [‹#›,  ]]

>> Trigrams: 
[[    , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,   ], [Kagathara,   , #], [  , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 2], [Unit, 2, –], [2, –, Lexical], [–, Lexical, Analyzer], [Lexical, Analyzer, ‹#›], [Analyzer, ‹#›,  ]]

>> Noun Phrases are: 
[    Prof. Dixita B Kagathara, (CD, Unit]

>> Named Entities are: 
[('Dixita', 'PERSON'), ('Kagathara', 'PERSON')]


============================ Sentence 52 =============================

Exercise Write prefix, suffix, substring, proper prefix, proper suffix and subsequence of following string: 	String: Compiler     Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Operations on languages  	Operation 


>> Tokens are: 
[Exercise, Write, prefix, ,, suffix, ,, substring, ,, proper, prefix, ,, proper, suffix, subsequence, following, string, :, 	, String, :, Compiler,     , Prof., Dixita, B, Kagathara,   , #, 2170701, (, CD, ),   , ,   , Unit, 2, –, Lexical, Analyzer, ‹#›,  , Operations, languages,  	, Operation] 

>> PoS Tags are: 
[('Exercise', 'PROPN'), ('Write', 'PROPN'), ('prefix', 'NOUN'), (',', 'PUNCT'), ('suffix', 'NOUN'), (',', 'PUNCT'), ('substring', 'NOUN'), (',', 'PUNCT'), ('proper', 'ADJ'), ('prefix', 'NOUN'), (',', 'PUNCT'), ('proper', 'ADJ'), ('suffix', 'NOUN'), ('subsequence', 'NOUN'), ('following', 'VERB'), ('string', 'NOUN'), (':', 'PUNCT'), ('\t', 'SPACE'), ('String', 'NOUN'), (':', 'PUNCT'), ('Compiler', 'PROPN'), ('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('  ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'PROPN'), ('Analyzer', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE'), ('Operations', 'PROPN'), ('languages', 'NOUN'), (' \t', 'SPACE'), ('Operation', 'PROPN')] 

>> Dependency Tags are: 
[('Exercise', 'compound'), ('Write', 'compound'), ('prefix', 'nsubj'), (',', 'punct'), ('suffix', 'conj'), (',', 'punct'), ('substring', 'conj'), (',', 'punct'), ('proper', 'amod'), ('prefix', 'conj'), (',', 'punct'), ('proper', 'amod'), ('suffix', 'conj'), ('subsequence', 'conj'), ('following', 'pcomp'), ('string', 'dobj'), (':', 'punct'), ('\t', 'compound'), ('String', 'appos'), (':', 'punct'), ('Compiler', 'appos'), ('    ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('  ', 'appos'), ('#', 'nmod'), ('2170701', 'appos'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'dep'), ('  ', 'dobj'), ('Unit', 'appos'), ('2', 'nummod'), ('–', 'punct'), ('Lexical', 'compound'), ('Analyzer', 'ROOT'), ('‹#›', 'punct'), (' ', 'compound'), ('Operations', 'appos'), ('languages', 'pobj'), (' \t', 'compound'), ('Operation', 'appos')]

>> Bigrams: 
[[Exercise, Write], [Write, prefix], [prefix, ,], [,, suffix], [suffix, ,], [,, substring], [substring, ,], [,, proper], [proper, prefix], [prefix, ,], [,, proper], [proper, suffix], [suffix, subsequence], [subsequence, following], [following, string], [string, :], [:, 	], [	, String], [String, :], [:, Compiler], [Compiler,     ], [    , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,   ], [  , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 2], [2, –], [–, Lexical], [Lexical, Analyzer], [Analyzer, ‹#›], [‹#›,  ], [ , Operations], [Operations, languages], [languages,  	], [ 	, Operation]]

>> Trigrams: 
[[Exercise, Write, prefix], [Write, prefix, ,], [prefix, ,, suffix], [,, suffix, ,], [suffix, ,, substring], [,, substring, ,], [substring, ,, proper], [,, proper, prefix], [proper, prefix, ,], [prefix, ,, proper], [,, proper, suffix], [proper, suffix, subsequence], [suffix, subsequence, following], [subsequence, following, string], [following, string, :], [string, :, 	], [:, 	, String], [	, String, :], [String, :, Compiler], [:, Compiler,     ], [Compiler,     , Prof.], [    , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,   ], [Kagathara,   , #], [  , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 2], [Unit, 2, –], [2, –, Lexical], [–, Lexical, Analyzer], [Lexical, Analyzer, ‹#›], [Analyzer, ‹#›,  ], [‹#›,  , Operations], [ , Operations, languages], [Operations, languages,  	], [languages,  	, Operation]]

>> Noun Phrases are: 
[Exercise Write prefix, suffix, substring, proper prefix, proper suffix, subsequence, string, 	String, Compiler,     Prof. Dixita B Kagathara, (CD, Unit,  Operations, languages,  	Operation]

>> Named Entities are: 
[('Exercise Write', 'PERSON'), ('Dixita', 'PERSON'), ('Kagathara', 'PERSON')]


============================ Sentence 53 =============================

	 


>> Tokens are: 
[	] 

>> PoS Tags are: 
[('\t', 'SPACE')] 

>> Dependency Tags are: 
[('\t', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 54 =============================

Definition 


>> Tokens are: 
[Definition] 

>> PoS Tags are: 
[('Definition', 'PROPN')] 

>> Dependency Tags are: 
[('Definition', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Definition]

>> Named Entities are: 
[]


============================ Sentence 55 =============================

 	Union of L and M Written L U M	  	Concatenation of L and M Written LM	  	Kleene closure of L  Written L∗	  	Positive closure of L  Written L+	     Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Regular Expression & Regular Definition        Regular expression 


>> Tokens are: 
[ 	, Union, L, M, Written, L, U, M, 	  	, Concatenation, L, M, Written, LM, 	  	, Kleene, closure, L,  , Written, L∗, 	  	, Positive, closure, L,  , Written, L+, 	     , Prof., Dixita, B, Kagathara,   , #, 2170701, (, CD, ),   , ,   , Unit, 2, –, Lexical, Analyzer, ‹#›,  , Regular, Expression, &, Regular, Definition,        , Regular, expression] 

>> PoS Tags are: 
[(' \t', 'SPACE'), ('Union', 'PROPN'), ('L', 'PROPN'), ('M', 'PROPN'), ('Written', 'PROPN'), ('L', 'NOUN'), ('U', 'NOUN'), ('M', 'PROPN'), ('\t  \t', 'SPACE'), ('Concatenation', 'PROPN'), ('L', 'PROPN'), ('M', 'PROPN'), ('Written', 'PROPN'), ('LM', 'PROPN'), ('\t  \t', 'SPACE'), ('Kleene', 'PROPN'), ('closure', 'NOUN'), ('L', 'NOUN'), (' ', 'SPACE'), ('Written', 'PROPN'), ('L∗', 'PROPN'), ('\t  \t', 'SPACE'), ('Positive', 'ADJ'), ('closure', 'NOUN'), ('L', 'NOUN'), (' ', 'SPACE'), ('Written', 'VERB'), ('L+', 'NOUN'), ('\t     ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('  ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'PROPN'), ('Analyzer', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE'), ('Regular', 'PROPN'), ('Expression', 'PROPN'), ('&', 'CCONJ'), ('Regular', 'PROPN'), ('Definition', 'PROPN'), ('       ', 'SPACE'), ('Regular', 'ADJ'), ('expression', 'NOUN')] 

>> Dependency Tags are: 
[(' \t', 'compound'), ('Union', 'nsubj'), ('L', 'pobj'), ('M', 'compound'), ('Written', 'compound'), ('L', 'compound'), ('U', 'compound'), ('M', 'compound'), ('\t  \t', 'compound'), ('Concatenation', 'conj'), ('L', 'pobj'), ('M', 'compound'), ('Written', 'compound'), ('LM', 'compound'), ('\t  \t', 'compound'), ('Kleene', 'conj'), ('closure', 'conj'), ('L', 'compound'), (' ', 'amod'), ('Written', 'compound'), ('L∗', 'pobj'), ('\t  \t', 'compound'), ('Positive', 'amod'), ('closure', 'pobj'), ('L', 'nmod'), (' ', 'compound'), ('Written', 'compound'), ('L+', 'compound'), ('\t     ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'pobj'), ('  ', 'punct'), ('#', 'nmod'), ('2170701', 'appos'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'dep'), ('  ', 'dobj'), ('Unit', 'appos'), ('2', 'nummod'), ('–', 'punct'), ('Lexical', 'compound'), ('Analyzer', 'ROOT'), ('‹#›', 'punct'), (' ', 'appos'), ('Regular', 'compound'), ('Expression', 'appos'), ('&', 'cc'), ('Regular', 'conj'), ('Definition', 'conj'), ('       ', 'compound'), ('Regular', 'compound'), ('expression', 'appos')]

>> Bigrams: 
[[ 	, Union], [Union, L], [L, M], [M, Written], [Written, L], [L, U], [U, M], [M, 	  	], [	  	, Concatenation], [Concatenation, L], [L, M], [M, Written], [Written, LM], [LM, 	  	], [	  	, Kleene], [Kleene, closure], [closure, L], [L,  ], [ , Written], [Written, L∗], [L∗, 	  	], [	  	, Positive], [Positive, closure], [closure, L], [L,  ], [ , Written], [Written, L+], [L+, 	     ], [	     , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,   ], [  , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 2], [2, –], [–, Lexical], [Lexical, Analyzer], [Analyzer, ‹#›], [‹#›,  ], [ , Regular], [Regular, Expression], [Expression, &], [&, Regular], [Regular, Definition], [Definition,        ], [       , Regular], [Regular, expression]]

>> Trigrams: 
[[ 	, Union, L], [Union, L, M], [L, M, Written], [M, Written, L], [Written, L, U], [L, U, M], [U, M, 	  	], [M, 	  	, Concatenation], [	  	, Concatenation, L], [Concatenation, L, M], [L, M, Written], [M, Written, LM], [Written, LM, 	  	], [LM, 	  	, Kleene], [	  	, Kleene, closure], [Kleene, closure, L], [closure, L,  ], [L,  , Written], [ , Written, L∗], [Written, L∗, 	  	], [L∗, 	  	, Positive], [	  	, Positive, closure], [Positive, closure, L], [closure, L,  ], [L,  , Written], [ , Written, L+], [Written, L+, 	     ], [L+, 	     , Prof.], [	     , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,   ], [Kagathara,   , #], [  , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 2], [Unit, 2, –], [2, –, Lexical], [–, Lexical, Analyzer], [Lexical, Analyzer, ‹#›], [Analyzer, ‹#›,  ], [‹#›,  , Regular], [ , Regular, Expression], [Regular, Expression, &], [Expression, &, Regular], [&, Regular, Definition], [Regular, Definition,        ], [Definition,        , Regular], [       , Regular, expression]]

>> Noun Phrases are: 
[ 	Union, L, M Written L U M	  	Concatenation, L, M Written LM	  	Kleene, closure, L  Written L∗, 	  	Positive closure, L  Written L+	     Prof. Dixita B Kagathara, (CD, Unit, Regular Expression, Regular, Definition,        Regular expression]

>> Named Entities are: 
[('Union of L and M Written', 'ORG'), ('Dixita', 'PERSON'), ('Kagathara', 'PERSON'), ('Regular Expression & Regular Definition        Regular', 'ORG')]


============================ Sentence 56 =============================

A regular expression is a sequence of characters that define a pattern. 


>> Tokens are: 
[regular, expression, sequence, characters, define,  , pattern, .] 

>> PoS Tags are: 
[('regular', 'ADJ'), ('expression', 'NOUN'), ('sequence', 'NOUN'), ('characters', 'NOUN'), ('define', 'VERB'), ('\xa0', 'SPACE'), ('pattern', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('regular', 'amod'), ('expression', 'nsubj'), ('sequence', 'attr'), ('characters', 'pobj'), ('define', 'relcl'), ('\xa0', 'compound'), ('pattern', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[regular, expression], [expression, sequence], [sequence, characters], [characters, define], [define,  ], [ , pattern], [pattern, .]]

>> Trigrams: 
[[regular, expression, sequence], [expression, sequence, characters], [sequence, characters, define], [characters, define,  ], [define,  , pattern], [ , pattern, .]]

>> Noun Phrases are: 
[A regular expression, a sequence, characters, a pattern]

>> Named Entities are: 
[]


============================ Sentence 57 =============================

Notational shorthand's One or more instances:  + Zero or more instances:  * Zero or one instances:  ? 


>> Tokens are: 
[Notational, shorthand, instances, :,  , +, Zero, instances, :,  , *, Zero, instances, :,  , ?] 

>> PoS Tags are: 
[('Notational', 'ADJ'), ('shorthand', 'NOUN'), ('instances', 'NOUN'), (':', 'PUNCT'), (' ', 'SPACE'), ('+', 'NUM'), ('Zero', 'PROPN'), ('instances', 'NOUN'), (':', 'PUNCT'), (' ', 'SPACE'), ('*', 'PUNCT'), ('Zero', 'PROPN'), ('instances', 'NOUN'), (':', 'PUNCT'), (' ', 'SPACE'), ('?', 'PUNCT')] 

>> Dependency Tags are: 
[('Notational', 'amod'), ('shorthand', 'poss'), ('instances', 'ROOT'), (':', 'punct'), (' ', 'appos'), ('+', 'cc'), ('Zero', 'appos'), ('instances', 'appos'), (':', 'punct'), (' ', 'appos'), ('*', 'punct'), ('Zero', 'appos'), ('instances', 'conj'), (':', 'punct'), (' ', 'appos'), ('?', 'punct')]

>> Bigrams: 
[[Notational, shorthand], [shorthand, instances], [instances, :], [:,  ], [ , +], [+, Zero], [Zero, instances], [instances, :], [:,  ], [ , *], [*, Zero], [Zero, instances], [instances, :], [:,  ], [ , ?]]

>> Trigrams: 
[[Notational, shorthand, instances], [shorthand, instances, :], [instances, :,  ], [:,  , +], [ , +, Zero], [+, Zero, instances], [Zero, instances, :], [instances, :,  ], [:,  , *], [ , *, Zero], [*, Zero, instances], [Zero, instances, :], [instances, :,  ], [:,  , ?]]

>> Noun Phrases are: 
[Notational shorthand's One or more instances, Zero, instances, Zero, instances]

>> Named Entities are: 
[('One', 'CARDINAL'), ('Zero', 'CARDINAL'), ('one', 'CARDINAL')]


============================ Sentence 58 =============================

Alphabets: Σ     Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›   


>> Tokens are: 
[Alphabets, :, Σ,     , Prof., Dixita, B, Kagathara,   , #, 2170701, (, CD, ),   , ,   , Unit, 2, –, Lexical, Analyzer, ‹#›,  ] 

>> PoS Tags are: 
[('Alphabets', 'PROPN'), (':', 'PUNCT'), ('Σ', 'PROPN'), ('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('  ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'PROPN'), ('Analyzer', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Alphabets', 'nsubj'), (':', 'punct'), ('Σ', 'compound'), ('    ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('  ', 'punct'), ('#', 'nmod'), ('2170701', 'appos'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'dep'), ('  ', 'punct'), ('Unit', 'appos'), ('2', 'nummod'), ('–', 'punct'), ('Lexical', 'compound'), ('Analyzer', 'ROOT'), ('‹#›', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[Alphabets, :], [:, Σ], [Σ,     ], [    , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,   ], [  , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 2], [2, –], [–, Lexical], [Lexical, Analyzer], [Analyzer, ‹#›], [‹#›,  ]]

>> Trigrams: 
[[Alphabets, :, Σ], [:, Σ,     ], [Σ,     , Prof.], [    , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,   ], [Kagathara,   , #], [  , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 2], [Unit, 2, –], [2, –, Lexical], [–, Lexical, Analyzer], [Lexical, Analyzer, ‹#›], [Analyzer, ‹#›,  ]]

>> Noun Phrases are: 
[Alphabets, Σ     Prof. Dixita B Kagathara, (CD, Unit]

>> Named Entities are: 
[('Dixita', 'PERSON'), ('Kagathara', 'PERSON')]


============================ Sentence 59 =============================

Rules to define regular expression is a regular expression that denotes , the set containing empty string. 


>> Tokens are: 
[Rules, define, regular, expression, regular, expression, denotes, ,, set, containing, string, .] 

>> PoS Tags are: 
[('Rules', 'NOUN'), ('define', 'VERB'), ('regular', 'ADJ'), ('expression', 'NOUN'), ('regular', 'ADJ'), ('expression', 'NOUN'), ('denotes', 'NOUN'), (',', 'PUNCT'), ('set', 'NOUN'), ('containing', 'VERB'), ('string', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Rules', 'nsubj'), ('define', 'relcl'), ('regular', 'amod'), ('expression', 'dobj'), ('regular', 'amod'), ('expression', 'attr'), ('denotes', 'relcl'), (',', 'punct'), ('set', 'nsubj'), ('containing', 'advcl'), ('string', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Rules, define], [define, regular], [regular, expression], [expression, regular], [regular, expression], [expression, denotes], [denotes, ,], [,, set], [set, containing], [containing, string], [string, .]]

>> Trigrams: 
[[Rules, define, regular], [define, regular, expression], [regular, expression, regular], [expression, regular, expression], [regular, expression, denotes], [expression, denotes, ,], [denotes, ,, set], [,, set, containing], [set, containing, string], [containing, string, .]]

>> Noun Phrases are: 
[Rules, regular expression, a regular expression, the set, empty string]

>> Named Entities are: 
[]


============================ Sentence 60 =============================

If   is a symbol in then  is a regular expression,  Suppose and are regular expression denoting the languages and . 


>> Tokens are: 
[  , symbol,  , regular, expression, ,,  , Suppose, regular, expression, denoting, languages, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('symbol', 'NOUN'), (' ', 'SPACE'), ('regular', 'ADJ'), ('expression', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('Suppose', 'VERB'), ('regular', 'ADJ'), ('expression', 'NOUN'), ('denoting', 'VERB'), ('languages', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'nsubj'), ('symbol', 'attr'), (' ', 'nsubj'), ('regular', 'amod'), ('expression', 'attr'), (',', 'punct'), (' ', 'nsubj'), ('Suppose', 'ROOT'), ('regular', 'amod'), ('expression', 'attr'), ('denoting', 'acl'), ('languages', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[  , symbol], [symbol,  ], [ , regular], [regular, expression], [expression, ,], [,,  ], [ , Suppose], [Suppose, regular], [regular, expression], [expression, denoting], [denoting, languages], [languages, .]]

>> Trigrams: 
[[  , symbol,  ], [symbol,  , regular], [ , regular, expression], [regular, expression, ,], [expression, ,,  ], [,,  , Suppose], [ , Suppose, regular], [Suppose, regular, expression], [regular, expression, denoting], [expression, denoting, languages], [denoting, languages, .]]

>> Noun Phrases are: 
[a symbol, a regular expression, regular expression, the languages]

>> Named Entities are: 
[]


============================ Sentence 61 =============================

Then,  is a regular expression denoting    is a regular expression denoting  * is a regular expression denoting   is a regular expression denoting   The language denoted by regular expression is said to be a regular set. 


>> Tokens are: 
[,,  , regular, expression, denoting,    , regular, expression, denoting,  , *, regular, expression, denoting,   , regular, expression, denoting,   , language, denoted, regular, expression, said, regular, set, .] 

>> PoS Tags are: 
[(',', 'PUNCT'), (' ', 'SPACE'), ('regular', 'ADJ'), ('expression', 'NOUN'), ('denoting', 'VERB'), ('   ', 'SPACE'), ('regular', 'ADJ'), ('expression', 'NOUN'), ('denoting', 'VERB'), (' ', 'SPACE'), ('*', 'PUNCT'), ('regular', 'ADJ'), ('expression', 'NOUN'), ('denoting', 'VERB'), ('  ', 'SPACE'), ('regular', 'ADJ'), ('expression', 'NOUN'), ('denoting', 'VERB'), ('  ', 'SPACE'), ('language', 'NOUN'), ('denoted', 'VERB'), ('regular', 'ADJ'), ('expression', 'NOUN'), ('said', 'VERB'), ('regular', 'ADJ'), ('set', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(',', 'punct'), (' ', 'nsubj'), ('regular', 'amod'), ('expression', 'attr'), ('denoting', 'acl'), ('   ', 'dobj'), ('regular', 'amod'), ('expression', 'attr'), ('denoting', 'acl'), (' ', 'dobj'), ('*', 'punct'), ('regular', 'amod'), ('expression', 'attr'), ('denoting', 'acl'), ('  ', 'dobj'), ('regular', 'amod'), ('expression', 'attr'), ('denoting', 'acl'), ('  ', 'dobj'), ('language', 'nsubjpass'), ('denoted', 'acl'), ('regular', 'amod'), ('expression', 'pobj'), ('said', 'conj'), ('regular', 'amod'), ('set', 'attr'), ('.', 'punct')]

>> Bigrams: 
[[,,  ], [ , regular], [regular, expression], [expression, denoting], [denoting,    ], [   , regular], [regular, expression], [expression, denoting], [denoting,  ], [ , *], [*, regular], [regular, expression], [expression, denoting], [denoting,   ], [  , regular], [regular, expression], [expression, denoting], [denoting,   ], [  , language], [language, denoted], [denoted, regular], [regular, expression], [expression, said], [said, regular], [regular, set], [set, .]]

>> Trigrams: 
[[,,  , regular], [ , regular, expression], [regular, expression, denoting], [expression, denoting,    ], [denoting,    , regular], [   , regular, expression], [regular, expression, denoting], [expression, denoting,  ], [denoting,  , *], [ , *, regular], [*, regular, expression], [regular, expression, denoting], [expression, denoting,   ], [denoting,   , regular], [  , regular, expression], [regular, expression, denoting], [expression, denoting,   ], [denoting,   , language], [  , language, denoted], [language, denoted, regular], [denoted, regular, expression], [regular, expression, said], [expression, said, regular], [said, regular, set], [regular, set, .]]

>> Noun Phrases are: 
[a regular expression, a regular expression, a regular expression, a regular expression, The language, regular expression, a regular set]

>> Named Entities are: 
[]


============================ Sentence 62 =============================

    Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Regular expression L = Zero or More Occurrences of a =    * a* a  aaa  aa aaaa aaaaa….. 


>> Tokens are: 
[    , Prof., Dixita, B, Kagathara,   , #, 2170701, (, CD, ),   , ,   , Unit, 2, –, Lexical, Analyzer, ‹#›,  , Regular, expression, L, =, Zero, Occurrences, =,    , *, *,  , aaa,  , aa, aaaa, aaaaa, …, ..] 

>> PoS Tags are: 
[('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('  ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'PROPN'), ('Analyzer', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE'), ('Regular', 'ADJ'), ('expression', 'NOUN'), ('L', 'NOUN'), ('=', 'SYM'), ('Zero', 'PROPN'), ('Occurrences', 'PROPN'), ('=', 'SYM'), ('   ', 'SPACE'), ('*', 'PUNCT'), ('*', 'PUNCT'), (' ', 'SPACE'), ('aaa', 'NOUN'), (' ', 'SPACE'), ('aa', 'NOUN'), ('aaaa', 'NOUN'), ('aaaaa', 'NOUN'), ('…', 'PUNCT'), ('..', 'PUNCT')] 

>> Dependency Tags are: 
[('    ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'nsubj'), ('  ', 'appos'), ('#', 'nmod'), ('2170701', 'npadvmod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('2', 'nummod'), ('–', 'punct'), ('Lexical', 'compound'), ('Analyzer', 'npadvmod'), ('‹#›', 'punct'), (' ', 'appos'), ('Regular', 'amod'), ('expression', 'appos'), ('L', 'appos'), ('=', 'punct'), ('Zero', 'appos'), ('Occurrences', 'appos'), ('=', 'punct'), ('   ', 'pobj'), ('*', 'punct'), ('*', 'punct'), (' ', 'compound'), ('aaa', 'npadvmod'), (' ', 'nmod'), ('aa', 'compound'), ('aaaa', 'compound'), ('aaaaa', 'pobj'), ('…', 'punct'), ('..', 'punct')]

>> Bigrams: 
[[    , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,   ], [  , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 2], [2, –], [–, Lexical], [Lexical, Analyzer], [Analyzer, ‹#›], [‹#›,  ], [ , Regular], [Regular, expression], [expression, L], [L, =], [=, Zero], [Zero, Occurrences], [Occurrences, =], [=,    ], [   , *], [*, *], [*,  ], [ , aaa], [aaa,  ], [ , aa], [aa, aaaa], [aaaa, aaaaa], [aaaaa, …], […, ..]]

>> Trigrams: 
[[    , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,   ], [Kagathara,   , #], [  , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 2], [Unit, 2, –], [2, –, Lexical], [–, Lexical, Analyzer], [Lexical, Analyzer, ‹#›], [Analyzer, ‹#›,  ], [‹#›,  , Regular], [ , Regular, expression], [Regular, expression, L], [expression, L, =], [L, =, Zero], [=, Zero, Occurrences], [Zero, Occurrences, =], [Occurrences, =,    ], [=,    , *], [   , *, *], [*, *,  ], [*,  , aaa], [ , aaa,  ], [aaa,  , aa], [ , aa, aaaa], [aa, aaaa, aaaaa], [aaaa, aaaaa, …], [aaaaa, …, ..]]

>> Noun Phrases are: 
[    Prof. Dixita B Kagathara, (CD, Unit, Regular expression, L, Zero, Occurrences, * a* a  aaa  aa aaaa aaaaa]

>> Named Entities are: 
[('Dixita', 'PERSON'), ('Kagathara', 'PERSON'), ('Zero', 'CARDINAL')]


============================ Sentence 63 =============================

 Infinite ….. 


>> Tokens are: 
[ , Infinite, …, ..] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('Infinite', 'PROPN'), ('…', 'PUNCT'), ('..', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'compound'), ('Infinite', 'ROOT'), ('…', 'punct'), ('..', 'punct')]

>> Bigrams: 
[[ , Infinite], [Infinite, …], […, ..]]

>> Trigrams: 
[[ , Infinite, …], [Infinite, …, ..]]

>> Noun Phrases are: 
[ Infinite]

>> Named Entities are: 
[]


============================ Sentence 64 =============================

𝜖    Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Regular expression L = One or More Occurrences of a =   +  a+ a  aaa  aa aaaa aaaaa….. 


>> Tokens are: 
[𝜖,    , Prof., Dixita, B, Kagathara,   , #, 2170701, (, CD, ),   , ,   , Unit, 2, –, Lexical, Analyzer, ‹#›,  , Regular, expression, L, =, Occurrences, =,   , +,  , a+,  , aaa,  , aa, aaaa, aaaaa, …, ..] 

>> PoS Tags are: 
[('𝜖', 'X'), ('   ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('  ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'PROPN'), ('Analyzer', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE'), ('Regular', 'ADJ'), ('expression', 'NOUN'), ('L', 'NOUN'), ('=', 'SYM'), ('Occurrences', 'PROPN'), ('=', 'SYM'), ('  ', 'SPACE'), ('+', 'ADP'), (' ', 'SPACE'), ('a+', 'PUNCT'), (' ', 'SPACE'), ('aaa', 'NOUN'), (' ', 'SPACE'), ('aa', 'NOUN'), ('aaaa', 'NOUN'), ('aaaaa', 'NOUN'), ('…', 'PUNCT'), ('..', 'PUNCT')] 

>> Dependency Tags are: 
[('𝜖', 'meta'), ('   ', 'nummod'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'pobj'), ('  ', 'npadvmod'), ('#', 'nmod'), ('2170701', 'npadvmod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'nsubj'), ('\uf077', 'ROOT'), ('  ', 'punct'), ('Unit', 'appos'), ('2', 'nummod'), ('–', 'punct'), ('Lexical', 'compound'), ('Analyzer', 'npadvmod'), ('‹#›', 'punct'), (' ', 'appos'), ('Regular', 'amod'), ('expression', 'appos'), ('L', 'appos'), ('=', 'punct'), ('Occurrences', 'appos'), ('=', 'pobj'), ('  ', 'pobj'), ('+', 'punct'), (' ', 'appos'), ('a+', 'punct'), (' ', 'compound'), ('aaa', 'npadvmod'), (' ', 'nmod'), ('aa', 'compound'), ('aaaa', 'compound'), ('aaaaa', 'appos'), ('…', 'punct'), ('..', 'punct')]

>> Bigrams: 
[[𝜖,    ], [   , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,   ], [  , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 2], [2, –], [–, Lexical], [Lexical, Analyzer], [Analyzer, ‹#›], [‹#›,  ], [ , Regular], [Regular, expression], [expression, L], [L, =], [=, Occurrences], [Occurrences, =], [=,   ], [  , +], [+,  ], [ , a+], [a+,  ], [ , aaa], [aaa,  ], [ , aa], [aa, aaaa], [aaaa, aaaaa], [aaaaa, …], […, ..]]

>> Trigrams: 
[[𝜖,    , Prof.], [   , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,   ], [Kagathara,   , #], [  , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 2], [Unit, 2, –], [2, –, Lexical], [–, Lexical, Analyzer], [Lexical, Analyzer, ‹#›], [Analyzer, ‹#›,  ], [‹#›,  , Regular], [ , Regular, expression], [Regular, expression, L], [expression, L, =], [L, =, Occurrences], [=, Occurrences, =], [Occurrences, =,   ], [=,   , +], [  , +,  ], [+,  , a+], [ , a+,  ], [a+,  , aaa], [ , aaa,  ], [aaa,  , aa], [ , aa, aaaa], [aa, aaaa, aaaaa], [aaaa, aaaaa, …], [aaaaa, …, ..]]

>> Noun Phrases are: 
[   Prof. Dixita B Kagathara, (CD, Unit, Regular expression, L, Occurrences, a  aaa  aa aaaa aaaaa]

>> Named Entities are: 
[('Dixita', 'PERSON'), ('Kagathara', 'PERSON'), ('One', 'CARDINAL')]


============================ Sentence 65 =============================

 Infinite …..    Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Precedence and associativity of operators 	Operator	Precedence	Associative 	Kleene *	1	left 	Concatenation	2	left 	Union 	|	3	left     Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›   


>> Tokens are: 
[ , Infinite, …, ..,    , Prof., Dixita, B, Kagathara,   , #, 2170701, (, CD, ),   , ,   , Unit, 2, –, Lexical, Analyzer, ‹#›,  , Precedence, associativity, operators, 	, Operator, 	, Precedence, 	, Associative, 	, Kleene, *, 	, 1, 	, left, 	, Concatenation, 	, 2, 	, left, 	, Union, 	, |, 	, 3, 	, left,     , Prof., Dixita, B, Kagathara,   , #, 2170701, (, CD, ),   , ,   , Unit, 2, –, Lexical, Analyzer, ‹#›,  ] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('Infinite', 'PROPN'), ('…', 'PUNCT'), ('..', 'PUNCT'), ('   ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('  ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'PROPN'), ('Analyzer', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE'), ('Precedence', 'NOUN'), ('associativity', 'NOUN'), ('operators', 'NOUN'), ('\t', 'SPACE'), ('Operator', 'PROPN'), ('\t', 'SPACE'), ('Precedence', 'PROPN'), ('\t', 'SPACE'), ('Associative', 'PROPN'), ('\t', 'SPACE'), ('Kleene', 'PROPN'), ('*', 'PUNCT'), ('\t', 'SPACE'), ('1', 'NUM'), ('\t', 'SPACE'), ('left', 'VERB'), ('\t', 'SPACE'), ('Concatenation', 'PROPN'), ('\t', 'SPACE'), ('2', 'PROPN'), ('\t', 'SPACE'), ('left', 'VERB'), ('\t', 'SPACE'), ('Union', 'PROPN'), ('\t', 'SPACE'), ('|', 'NOUN'), ('\t', 'SPACE'), ('3', 'NUM'), ('\t', 'SPACE'), ('left', 'VERB'), ('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('  ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'PROPN'), ('Analyzer', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'compound'), ('Infinite', 'nsubj'), ('…', 'punct'), ('..', 'punct'), ('   ', 'nummod'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('  ', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'dep'), ('  ', 'dobj'), ('Unit', 'appos'), ('2', 'nummod'), ('–', 'punct'), ('Lexical', 'compound'), ('Analyzer', 'nsubj'), ('‹#›', 'punct'), (' ', 'appos'), ('Precedence', 'appos'), ('associativity', 'conj'), ('operators', 'pobj'), ('\t', 'compound'), ('Operator', 'compound'), ('\t', 'compound'), ('Precedence', 'compound'), ('\t', 'compound'), ('Associative', 'compound'), ('\t', 'compound'), ('Kleene', 'appos'), ('*', 'punct'), ('\t', 'nmod'), ('1', 'nummod'), ('\t', 'appos'), ('left', 'ccomp'), ('\t', 'compound'), ('Concatenation', 'compound'), ('\t', 'dobj'), ('2', 'nummod'), ('\t', 'nsubj'), ('left', 'ccomp'), ('\t', 'compound'), ('Union', 'compound'), ('\t', 'compound'), ('|', 'npadvmod'), ('\t', 'nmod'), ('3', 'nummod'), ('\t', 'nsubj'), ('left', 'ROOT'), ('    ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'dobj'), ('  ', 'advcl'), ('#', 'nmod'), ('2170701', 'npadvmod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'advcl'), ('  ', 'punct'), ('Unit', 'appos'), ('2', 'nummod'), ('–', 'punct'), ('Lexical', 'compound'), ('Analyzer', 'npadvmod'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[ , Infinite], [Infinite, …], […, ..], [..,    ], [   , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,   ], [  , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 2], [2, –], [–, Lexical], [Lexical, Analyzer], [Analyzer, ‹#›], [‹#›,  ], [ , Precedence], [Precedence, associativity], [associativity, operators], [operators, 	], [	, Operator], [Operator, 	], [	, Precedence], [Precedence, 	], [	, Associative], [Associative, 	], [	, Kleene], [Kleene, *], [*, 	], [	, 1], [1, 	], [	, left], [left, 	], [	, Concatenation], [Concatenation, 	], [	, 2], [2, 	], [	, left], [left, 	], [	, Union], [Union, 	], [	, |], [|, 	], [	, 3], [3, 	], [	, left], [left,     ], [    , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,   ], [  , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 2], [2, –], [–, Lexical], [Lexical, Analyzer], [Analyzer, ‹#›], [‹#›,  ]]

>> Trigrams: 
[[ , Infinite, …], [Infinite, …, ..], […, ..,    ], [..,    , Prof.], [   , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,   ], [Kagathara,   , #], [  , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 2], [Unit, 2, –], [2, –, Lexical], [–, Lexical, Analyzer], [Lexical, Analyzer, ‹#›], [Analyzer, ‹#›,  ], [‹#›,  , Precedence], [ , Precedence, associativity], [Precedence, associativity, operators], [associativity, operators, 	], [operators, 	, Operator], [	, Operator, 	], [Operator, 	, Precedence], [	, Precedence, 	], [Precedence, 	, Associative], [	, Associative, 	], [Associative, 	, Kleene], [	, Kleene, *], [Kleene, *, 	], [*, 	, 1], [	, 1, 	], [1, 	, left], [	, left, 	], [left, 	, Concatenation], [	, Concatenation, 	], [Concatenation, 	, 2], [	, 2, 	], [2, 	, left], [	, left, 	], [left, 	, Union], [	, Union, 	], [Union, 	, |], [	, |, 	], [|, 	, 3], [	, 3, 	], [3, 	, left], [	, left,     ], [left,     , Prof.], [    , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,   ], [Kagathara,   , #], [  , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 2], [Unit, 2, –], [2, –, Lexical], [–, Lexical, Analyzer], [Lexical, Analyzer, ‹#›], [Analyzer, ‹#›,  ]]

>> Noun Phrases are: 
[ Infinite, ..    Prof. Dixita B Kagathara, #2170701 (CD, Unit, Precedence, associativity, operators, 	Operator	Precedence	Associative 	Kleene,     Prof. Dixita B Kagathara, (CD, Unit]

>> Named Entities are: 
[('Dixita', 'PERSON'), ('Kagathara', 'PERSON'), ('1', 'CARDINAL'), ('3', 'CARDINAL'), ('Dixita', 'PERSON'), ('Kagathara', 'PERSON')]


============================ Sentence 66 =============================

Regular expression examples 0 or 1 	 0 or 11 or 111   


>> Tokens are: 
[Regular, expression, examples, 0, 1, 	 , 0, 11, 111,  ] 

>> PoS Tags are: 
[('Regular', 'ADJ'), ('expression', 'NOUN'), ('examples', 'NOUN'), ('0', 'NUM'), ('1', 'NUM'), ('\t ', 'SPACE'), ('0', 'NUM'), ('11', 'NUM'), ('111', 'NUM'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Regular', 'amod'), ('expression', 'compound'), ('examples', 'ROOT'), ('0', 'punct'), ('1', 'nummod'), ('\t ', 'conj'), ('0', 'punct'), ('11', 'conj'), ('111', 'conj'), (' ', 'nummod')]

>> Bigrams: 
[[Regular, expression], [expression, examples], [examples, 0], [0, 1], [1, 	 ], [	 , 0], [0, 11], [11, 111], [111,  ]]

>> Trigrams: 
[[Regular, expression, examples], [expression, examples, 0], [examples, 0, 1], [0, 1, 	 ], [1, 	 , 0], [	 , 0, 11], [0, 11, 111], [11, 111,  ]]

>> Noun Phrases are: 
[Regular expression examples]

>> Named Entities are: 
[('0', 'CARDINAL'), ('0', 'CARDINAL'), ('11', 'CARDINAL'), ('111', 'CARDINAL')]


============================ Sentence 67 =============================

String having zero or more a.   


>> Tokens are: 
[String, having, zero, a.,  ] 

>> PoS Tags are: 
[('String', 'NOUN'), ('having', 'VERB'), ('zero', 'NUM'), ('a.', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('String', 'ROOT'), ('having', 'acl'), ('zero', 'nummod'), ('a.', 'dobj'), (' ', 'punct')]

>> Bigrams: 
[[String, having], [having, zero], [zero, a.], [a.,  ]]

>> Trigrams: 
[[String, having, zero], [having, zero, a.], [zero, a.,  ]]

>> Noun Phrases are: 
[String, zero or more a.]

>> Named Entities are: 
[('zero', 'CARDINAL')]


============================ Sentence 68 =============================

String having one or more a.   


>> Tokens are: 
[String, having, a.,  ] 

>> PoS Tags are: 
[('String', 'NOUN'), ('having', 'VERB'), ('a.', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('String', 'ROOT'), ('having', 'xcomp'), ('a.', 'dobj'), (' ', 'punct')]

>> Bigrams: 
[[String, having], [having, a.], [a.,  ]]

>> Trigrams: 
[[String, having, a.], [having, a.,  ]]

>> Noun Phrases are: 
[String, one or more a.]

>> Named Entities are: 
[('one', 'CARDINAL')]


============================ Sentence 69 =============================

Regular expression over  that represent all string of length 3. 


>> Tokens are: 
[Regular, expression,  , represent, string, length, 3, .] 

>> PoS Tags are: 
[('Regular', 'ADJ'), ('expression', 'NOUN'), (' ', 'SPACE'), ('represent', 'VERB'), ('string', 'NOUN'), ('length', 'NOUN'), ('3', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Regular', 'amod'), ('expression', 'ROOT'), (' ', 'pobj'), ('represent', 'relcl'), ('string', 'dobj'), ('length', 'pobj'), ('3', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[Regular, expression], [expression,  ], [ , represent], [represent, string], [string, length], [length, 3], [3, .]]

>> Trigrams: 
[[Regular, expression,  ], [expression,  , represent], [ , represent, string], [represent, string, length], [string, length, 3], [length, 3, .]]

>> Noun Phrases are: 
[Regular expression, all string, length]

>> Named Entities are: 
[('3', 'CARDINAL')]


============================ Sentence 70 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 71 =============================

All binary string               +    Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›   


>> Tokens are: 
[binary, string,               , +,    , Prof., Dixita, B, Kagathara,   , #, 2170701, (, CD, ),   , ,   , Unit, 2, –, Lexical, Analyzer, ‹#›,  ] 

>> PoS Tags are: 
[('binary', 'ADJ'), ('string', 'NOUN'), ('              ', 'SPACE'), ('+', 'SYM'), ('   ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('  ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'PROPN'), ('Analyzer', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('binary', 'amod'), ('string', 'npadvmod'), ('              ', 'nummod'), ('+', 'punct'), ('   ', 'nummod'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('  ', 'prep'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'dep'), ('  ', 'punct'), ('Unit', 'appos'), ('2', 'nummod'), ('–', 'punct'), ('Lexical', 'compound'), ('Analyzer', 'ROOT'), ('‹#›', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[binary, string], [string,               ], [              , +], [+,    ], [   , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,   ], [  , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 2], [2, –], [–, Lexical], [Lexical, Analyzer], [Analyzer, ‹#›], [‹#›,  ]]

>> Trigrams: 
[[binary, string,               ], [string,               , +], [              , +,    ], [+,    , Prof.], [   , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,   ], [Kagathara,   , #], [  , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 2], [Unit, 2, –], [2, –, Lexical], [–, Lexical, Analyzer], [Lexical, Analyzer, ‹#›], [Analyzer, ‹#›,  ]]

>> Noun Phrases are: 
[+    Prof. Dixita B Kagathara, (CD, Unit]

>> Named Entities are: 
[('Dixita', 'PERSON'), ('Kagathara', 'PERSON')]


============================ Sentence 72 =============================

Regular expression examples 0 or more occurrence of either a or b or both  1 or more occurrence of either a or b or both  Binary no. 


>> Tokens are: 
[Regular, expression, examples, 0, occurrence, b,  , 1, occurrence, b,  , Binary, .] 

>> PoS Tags are: 
[('Regular', 'ADJ'), ('expression', 'NOUN'), ('examples', 'NOUN'), ('0', 'NUM'), ('occurrence', 'NOUN'), ('b', 'NUM'), (' ', 'SPACE'), ('1', 'NUM'), ('occurrence', 'NOUN'), ('b', 'NUM'), (' ', 'SPACE'), ('Binary', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Regular', 'amod'), ('expression', 'compound'), ('examples', 'ROOT'), ('0', 'punct'), ('occurrence', 'conj'), ('b', 'conj'), (' ', 'nmod'), ('1', 'nummod'), ('occurrence', 'conj'), ('b', 'conj'), (' ', 'conj'), ('Binary', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[Regular, expression], [expression, examples], [examples, 0], [0, occurrence], [occurrence, b], [b,  ], [ , 1], [1, occurrence], [occurrence, b], [b,  ], [ , Binary], [Binary, .]]

>> Trigrams: 
[[Regular, expression, examples], [expression, examples, 0], [examples, 0, occurrence], [0, occurrence, b], [occurrence, b,  ], [b,  , 1], [ , 1, occurrence], [1, occurrence, b], [occurrence, b,  ], [b,  , Binary], [ , Binary, .]]

>> Noun Phrases are: 
[Regular expression examples, more occurrence, both  1 or more occurrence, Binary]

>> Named Entities are: 
[('1', 'CARDINAL')]


============================ Sentence 73 =============================

ends with 0   


>> Tokens are: 
[ends, 0,  ] 

>> PoS Tags are: 
[('ends', 'VERB'), ('0', 'NUM'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('ends', 'ROOT'), ('0', 'pobj'), (' ', 'punct')]

>> Bigrams: 
[[ends, 0], [0,  ]]

>> Trigrams: 
[[ends, 0,  ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 74 =============================

Binary no. ends with 1  Binary no. 


>> Tokens are: 
[Binary, ., ends, 1,  , Binary, .] 

>> PoS Tags are: 
[('Binary', 'PROPN'), ('.', 'PUNCT'), ('ends', 'VERB'), ('1', 'NUM'), (' ', 'SPACE'), ('Binary', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Binary', 'nsubj'), ('.', 'punct'), ('ends', 'ROOT'), ('1', 'nummod'), (' ', 'pobj'), ('Binary', 'npadvmod'), ('.', 'punct')]

>> Bigrams: 
[[Binary, .], [., ends], [ends, 1], [1,  ], [ , Binary], [Binary, .]]

>> Trigrams: 
[[Binary, ., ends], [., ends, 1], [ends, 1,  ], [1,  , Binary], [ , Binary, .]]

>> Noun Phrases are: 
[Binary]

>> Named Entities are: 
[]


============================ Sentence 75 =============================

starts and ends with 1  String starts and ends with same character           +  *           Prof. Dixita B Kagathara   #2170701 (CD)    


>> Tokens are: 
[starts, ends, 1,  , String, starts, ends, character,           , +,  , *,           , Prof., Dixita, B, Kagathara,   , #, 2170701, (, CD, ),   ] 

>> PoS Tags are: 
[('starts', 'VERB'), ('ends', 'VERB'), ('1', 'NUM'), (' ', 'SPACE'), ('String', 'NOUN'), ('starts', 'NOUN'), ('ends', 'VERB'), ('character', 'NOUN'), ('          ', 'SPACE'), ('+', 'SYM'), (' ', 'SPACE'), ('*', 'PUNCT'), ('          ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('  ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE')] 

>> Dependency Tags are: 
[('starts', 'ROOT'), ('ends', 'conj'), ('1', 'nummod'), (' ', 'compound'), ('String', 'compound'), ('starts', 'pobj'), ('ends', 'conj'), ('character', 'pobj'), ('          ', 'dobj'), ('+', 'npadvmod'), (' ', 'npadvmod'), ('*', 'punct'), ('          ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'dobj'), ('  ', 'prep'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos')]

>> Bigrams: 
[[starts, ends], [ends, 1], [1,  ], [ , String], [String, starts], [starts, ends], [ends, character], [character,           ], [          , +], [+,  ], [ , *], [*,           ], [          , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,   ], [  , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ]]

>> Trigrams: 
[[starts, ends, 1], [ends, 1,  ], [1,  , String], [ , String, starts], [String, starts, ends], [starts, ends, character], [ends, character,           ], [character,           , +], [          , +,  ], [+,  , *], [ , *,           ], [*,           , Prof.], [          , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,   ], [Kagathara,   , #], [  , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ]]

>> Noun Phrases are: 
[1  String starts, same character, *           Prof. Dixita B Kagathara, (CD]

>> Named Entities are: 
[('1', 'CARDINAL'), ('Dixita', 'PERSON'), ('Kagathara', 'PERSON')]


============================ Sentence 76 =============================

   Unit 2 – Lexical Analyzer ‹#›   


>> Tokens are: 
[,   , Unit, 2, –, Lexical, Analyzer, ‹#›,  ] 

>> PoS Tags are: 
[('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'PROPN'), ('Analyzer', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('\uf077', 'dep'), ('  ', 'dobj'), ('Unit', 'appos'), ('2', 'nummod'), ('–', 'punct'), ('Lexical', 'compound'), ('Analyzer', 'ROOT'), ('‹#›', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[,   ], [  , Unit], [Unit, 2], [2, –], [–, Lexical], [Lexical, Analyzer], [Analyzer, ‹#›], [‹#›,  ]]

>> Trigrams: 
[[,   , Unit], [  , Unit, 2], [Unit, 2, –], [2, –, Lexical], [–, Lexical, Analyzer], [Lexical, Analyzer, ‹#›], [Analyzer, ‹#›,  ]]

>> Noun Phrases are: 
[Unit]

>> Named Entities are: 
[]


============================ Sentence 77 =============================

Regular expression examples All string of a and b starting with a   String of 0 and 1 ends with 00    


>> Tokens are: 
[Regular, expression, examples, string, b, starting,   , String, 0, 1, ends, 00,   ] 

>> PoS Tags are: 
[('Regular', 'ADJ'), ('expression', 'NOUN'), ('examples', 'VERB'), ('string', 'NOUN'), ('b', 'X'), ('starting', 'VERB'), ('  ', 'SPACE'), ('String', 'NOUN'), ('0', 'NUM'), ('1', 'NUM'), ('ends', 'VERB'), ('00', 'NUM'), ('  ', 'SPACE')] 

>> Dependency Tags are: 
[('Regular', 'amod'), ('expression', 'compound'), ('examples', 'ROOT'), ('string', 'dobj'), ('b', 'conj'), ('starting', 'acl'), ('  ', 'nummod'), ('String', 'pobj'), ('0', 'pobj'), ('1', 'nsubj'), ('ends', 'conj'), ('00', 'nummod'), ('  ', 'pobj')]

>> Bigrams: 
[[Regular, expression], [expression, examples], [examples, string], [string, b], [b, starting], [starting,   ], [  , String], [String, 0], [0, 1], [1, ends], [ends, 00], [00,   ]]

>> Trigrams: 
[[Regular, expression, examples], [expression, examples, string], [examples, string, b], [string, b, starting], [b, starting,   ], [starting,   , String], [  , String, 0], [String, 0, 1], [0, 1, ends], [1, ends, 00], [ends, 00,   ]]

>> Noun Phrases are: 
[All string, a   String]

>> Named Entities are: 
[('0', 'CARDINAL'), ('1', 'CARDINAL'), ('00', 'CARDINAL')]


============================ Sentence 78 =============================

String ends with abb    String starts with 1 and ends with 0   All binary string with at least 3 characters and 3rd character should be zero   


>> Tokens are: 
[String, ends, abb,    , String, starts, 1, ends, 0,   , binary, string, 3, characters, 3rd, character, zero,  ] 

>> PoS Tags are: 
[('String', 'NOUN'), ('ends', 'VERB'), ('abb', 'NOUN'), ('   ', 'SPACE'), ('String', 'NOUN'), ('starts', 'VERB'), ('1', 'NUM'), ('ends', 'VERB'), ('0', 'NUM'), ('  ', 'SPACE'), ('binary', 'ADJ'), ('string', 'NOUN'), ('3', 'NUM'), ('characters', 'NOUN'), ('3rd', 'ADJ'), ('character', 'NOUN'), ('zero', 'NUM'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('String', 'nsubj'), ('ends', 'ROOT'), ('abb', 'compound'), ('   ', 'nummod'), ('String', 'nsubj'), ('starts', 'ccomp'), ('1', 'pobj'), ('ends', 'conj'), ('0', 'nummod'), ('  ', 'pobj'), ('binary', 'amod'), ('string', 'dobj'), ('3', 'nummod'), ('characters', 'pobj'), ('3rd', 'amod'), ('character', 'conj'), ('zero', 'attr'), (' ', 'punct')]

>> Bigrams: 
[[String, ends], [ends, abb], [abb,    ], [   , String], [String, starts], [starts, 1], [1, ends], [ends, 0], [0,   ], [  , binary], [binary, string], [string, 3], [3, characters], [characters, 3rd], [3rd, character], [character, zero], [zero,  ]]

>> Trigrams: 
[[String, ends, abb], [ends, abb,    ], [abb,    , String], [   , String, starts], [String, starts, 1], [starts, 1, ends], [1, ends, 0], [ends, 0,   ], [0,   , binary], [  , binary, string], [binary, string, 3], [string, 3, characters], [3, characters, 3rd], [characters, 3rd, character], [3rd, character, zero], [character, zero,  ]]

>> Noun Phrases are: 
[String, abb    String, All binary string, at least 3 characters, 3rd character]

>> Named Entities are: 
[('1', 'CARDINAL'), ('0', 'CARDINAL'), ('at least 3', 'CARDINAL'), ('3rd', 'ORDINAL'), ('zero', 'CARDINAL')]


============================ Sentence 79 =============================

Language which consist of exactly two b’s over the set    … * …  …  …  …  …     Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›   


>> Tokens are: 
[Language, consist, exactly, b, set,    , …, *, …,  , …,  , …,  , …,  , …,     , Prof., Dixita, B, Kagathara,   , #, 2170701, (, CD, ),   , ,   , Unit, 2, –, Lexical, Analyzer, ‹#›,  ] 

>> PoS Tags are: 
[('Language', 'NOUN'), ('consist', 'VERB'), ('exactly', 'ADV'), ('b', 'NOUN'), ('set', 'NOUN'), ('   ', 'SPACE'), ('…', 'PUNCT'), ('*', 'PUNCT'), ('…', 'PUNCT'), (' ', 'SPACE'), ('…', 'PUNCT'), (' ', 'SPACE'), ('…', 'PUNCT'), (' ', 'SPACE'), ('…', 'PUNCT'), (' ', 'SPACE'), ('…', 'PUNCT'), ('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('  ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'PROPN'), ('Analyzer', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Language', 'nsubj'), ('consist', 'relcl'), ('exactly', 'advmod'), ('b', 'pobj'), ('set', 'amod'), ('   ', 'pobj'), ('…', 'punct'), ('*', 'punct'), ('…', 'punct'), (' ', 'appos'), ('…', 'punct'), (' ', 'appos'), ('…', 'punct'), (' ', 'appos'), ('…', 'punct'), (' ', 'appos'), ('…', 'punct'), ('    ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('  ', 'appos'), ('#', 'nmod'), ('2170701', 'npadvmod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'dep'), ('  ', 'dobj'), ('Unit', 'appos'), ('2', 'nummod'), ('–', 'punct'), ('Lexical', 'compound'), ('Analyzer', 'ROOT'), ('‹#›', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[Language, consist], [consist, exactly], [exactly, b], [b, set], [set,    ], [   , …], […, *], [*, …], […,  ], [ , …], […,  ], [ , …], […,  ], [ , …], […,  ], [ , …], […,     ], [    , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,   ], [  , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 2], [2, –], [–, Lexical], [Lexical, Analyzer], [Analyzer, ‹#›], [‹#›,  ]]

>> Trigrams: 
[[Language, consist, exactly], [consist, exactly, b], [exactly, b, set], [b, set,    ], [set,    , …], [   , …, *], […, *, …], [*, …,  ], […,  , …], [ , …,  ], […,  , …], [ , …,  ], […,  , …], [ , …,  ], […,  , …], [ , …,     ], […,     , Prof.], [    , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,   ], [Kagathara,   , #], [  , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 2], [Unit, 2, –], [2, –, Lexical], [–, Lexical, Analyzer], [Lexical, Analyzer, ‹#›], [Analyzer, ‹#›,  ]]

>> Noun Phrases are: 
[Language, exactly two b,     Prof. Dixita B Kagathara, (CD, Unit]

>> Named Entities are: 
[('two', 'CARDINAL'), ('Dixita', 'PERSON'), ('Kagathara', 'PERSON')]


============================ Sentence 80 =============================

Regular expression examples The language with  such that 3rd character from right end of the string is always a.   


>> Tokens are: 
[Regular, expression, examples, language,  , 3rd, character, right, end, string, a.,  ] 

>> PoS Tags are: 
[('Regular', 'ADJ'), ('expression', 'NOUN'), ('examples', 'VERB'), ('language', 'NOUN'), (' ', 'SPACE'), ('3rd', 'ADJ'), ('character', 'NOUN'), ('right', 'ADJ'), ('end', 'NOUN'), ('string', 'NOUN'), ('a.', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Regular', 'amod'), ('expression', 'compound'), ('examples', 'nsubj'), ('language', 'dobj'), (' ', 'pobj'), ('3rd', 'amod'), ('character', 'appos'), ('right', 'amod'), ('end', 'pobj'), ('string', 'pobj'), ('a.', 'attr'), (' ', 'punct')]

>> Bigrams: 
[[Regular, expression], [expression, examples], [examples, language], [language,  ], [ , 3rd], [3rd, character], [character, right], [right, end], [end, string], [string, a.], [a.,  ]]

>> Trigrams: 
[[Regular, expression, examples], [expression, examples, language], [examples, language,  ], [language,  , 3rd], [ , 3rd, character], [3rd, character, right], [character, right, end], [right, end, string], [end, string, a.], [string, a.,  ]]

>> Noun Phrases are: 
[The language, such that 3rd character, right end, the string, a.]

>> Named Entities are: 
[('3rd', 'ORDINAL')]


============================ Sentence 81 =============================

Any no. of  followed by any no. of  followed by any no. of   String should contain at least three   String should contain exactly two   Length of string should be at least 1 and at most 3   


>> Tokens are: 
[.,  , followed, .,  , followed, .,   , String, contain,   , String, contain, exactly,   , Length, string, 1, 3,  ] 

>> PoS Tags are: 
[('.', 'PUNCT'), (' ', 'SPACE'), ('followed', 'VERB'), ('.', 'NOUN'), (' ', 'SPACE'), ('followed', 'VERB'), ('.', 'NOUN'), ('  ', 'SPACE'), ('String', 'PROPN'), ('contain', 'VERB'), ('  ', 'SPACE'), ('String', 'NOUN'), ('contain', 'VERB'), ('exactly', 'ADV'), ('  ', 'SPACE'), ('Length', 'PROPN'), ('string', 'NOUN'), ('1', 'NUM'), ('3', 'NUM'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('.', 'punct'), (' ', 'pobj'), ('followed', 'advcl'), ('.', 'pobj'), (' ', 'pobj'), ('followed', 'advcl'), ('.', 'pobj'), ('  ', 'pobj'), ('String', 'nsubj'), ('contain', 'ROOT'), ('  ', 'nummod'), ('String', 'nsubj'), ('contain', 'conj'), ('exactly', 'advmod'), ('  ', 'dobj'), ('Length', 'nsubj'), ('string', 'pobj'), ('1', 'conj'), ('3', 'nummod'), (' ', 'punct')]

>> Bigrams: 
[[.,  ], [ , followed], [followed, .], [.,  ], [ , followed], [followed, .], [.,   ], [  , String], [String, contain], [contain,   ], [  , String], [String, contain], [contain, exactly], [exactly,   ], [  , Length], [Length, string], [string, 1], [1, 3], [3,  ]]

>> Trigrams: 
[[.,  , followed], [ , followed, .], [followed, .,  ], [.,  , followed], [ , followed, .], [followed, .,   ], [.,   , String], [  , String, contain], [String, contain,   ], [contain,   , String], [  , String, contain], [String, contain, exactly], [contain, exactly,   ], [exactly,   , Length], [  , Length, string], [Length, string, 1], [string, 1, 3], [1, 3,  ]]

>> Noun Phrases are: 
[any no, ., any no, ., String, at least three   String, Length, string]

>> Named Entities are: 
[('at least three', 'CARDINAL'), ('two', 'CARDINAL'), ('at least 1', 'CARDINAL')]


============================ Sentence 82 =============================

No. of zero should be multiple of 3   …  …  …. 


>> Tokens are: 
[., zero, multiple, 3,   , …,  , …,  , …, .] 

>> PoS Tags are: 
[('.', 'PROPN'), ('zero', 'NUM'), ('multiple', 'ADJ'), ('3', 'NUM'), ('  ', 'SPACE'), ('…', 'PUNCT'), (' ', 'SPACE'), ('…', 'PUNCT'), (' ', 'SPACE'), ('…', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('.', 'punct'), ('zero', 'pobj'), ('multiple', 'attr'), ('3', 'nummod'), ('  ', 'pobj'), ('…', 'punct'), (' ', 'attr'), ('…', 'punct'), (' ', 'appos'), ('…', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[., zero], [zero, multiple], [multiple, 3], [3,   ], [  , …], […,  ], [ , …], […,  ], [ , …], […, .]]

>> Trigrams: 
[[., zero, multiple], [zero, multiple, 3], [multiple, 3,   ], [3,   , …], [  , …,  ], […,  , …], [ , …,  ], […,  , …], [ , …, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('zero', 'CARDINAL'), ('3', 'CARDINAL')]


============================ Sentence 83 =============================

 …. 


>> Tokens are: 
[ , …, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('…', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'ROOT'), ('…', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[ , …], […, .]]

>> Trigrams: 
[[ , …, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 84 =============================

 …. 


>> Tokens are: 
[ , …, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('…', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'ROOT'), ('…', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[ , …], […, .]]

>> Trigrams: 
[[ , …, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 85 =============================

 …. 


>> Tokens are: 
[ , …, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('…', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'ROOT'), ('…', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[ , …], […, .]]

>> Trigrams: 
[[ , …, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 86 =============================

    Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›   


>> Tokens are: 
[    , Prof., Dixita, B, Kagathara,   , #, 2170701, (, CD, ),   , ,   , Unit, 2, –, Lexical, Analyzer, ‹#›,  ] 

>> PoS Tags are: 
[('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('  ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'PROPN'), ('Analyzer', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('    ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'nsubj'), ('  ', 'appos'), ('#', 'nmod'), ('2170701', 'npadvmod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'dep'), ('  ', 'dobj'), ('Unit', 'appos'), ('2', 'nummod'), ('–', 'punct'), ('Lexical', 'compound'), ('Analyzer', 'ROOT'), ('‹#›', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[    , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,   ], [  , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 2], [2, –], [–, Lexical], [Lexical, Analyzer], [Analyzer, ‹#›], [‹#›,  ]]

>> Trigrams: 
[[    , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,   ], [Kagathara,   , #], [  , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 2], [Unit, 2, –], [2, –, Lexical], [–, Lexical, Analyzer], [Lexical, Analyzer, ‹#›], [Analyzer, ‹#›,  ]]

>> Noun Phrases are: 
[    Prof. Dixita B Kagathara, (CD, Unit]

>> Named Entities are: 
[('Dixita', 'PERSON'), ('Kagathara', 'PERSON')]


============================ Sentence 87 =============================

Regular expression examples The language with  where  should be multiple of 3   


>> Tokens are: 
[Regular, expression, examples, language,  ,  , multiple, 3,  ] 

>> PoS Tags are: 
[('Regular', 'ADJ'), ('expression', 'NOUN'), ('examples', 'VERB'), ('language', 'NOUN'), (' ', 'SPACE'), (' ', 'SPACE'), ('multiple', 'ADJ'), ('3', 'NUM'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Regular', 'amod'), ('expression', 'compound'), ('examples', 'ROOT'), ('language', 'dobj'), (' ', 'pobj'), (' ', 'nsubj'), ('multiple', 'attr'), ('3', 'pobj'), (' ', 'punct')]

>> Bigrams: 
[[Regular, expression], [expression, examples], [examples, language], [language,  ], [ ,  ], [ , multiple], [multiple, 3], [3,  ]]

>> Trigrams: 
[[Regular, expression, examples], [expression, examples, language], [examples, language,  ], [language,  ,  ], [ ,  , multiple], [ , multiple, 3], [multiple, 3,  ]]

>> Noun Phrases are: 
[The language]

>> Named Entities are: 
[('3', 'CARDINAL')]


============================ Sentence 88 =============================

Even no. of 0  String should have odd length  String should have even length  String start with 0 and has odd length  String start with 1 and has even length   


>> Tokens are: 
[., 0,  , String, odd, length,  , String, length,  , String, start, 0, odd, length,  , String, start, 1, length,  ] 

>> PoS Tags are: 
[('.', 'NOUN'), ('0', 'NUM'), (' ', 'SPACE'), ('String', 'NOUN'), ('odd', 'ADJ'), ('length', 'NOUN'), (' ', 'SPACE'), ('String', 'NOUN'), ('length', 'VERB'), (' ', 'SPACE'), ('String', 'NOUN'), ('start', 'VERB'), ('0', 'NUM'), ('odd', 'ADJ'), ('length', 'NOUN'), (' ', 'SPACE'), ('String', 'NOUN'), ('start', 'VERB'), ('1', 'NUM'), ('length', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('.', 'punct'), ('0', 'pobj'), (' ', 'compound'), ('String', 'nsubj'), ('odd', 'amod'), ('length', 'compound'), (' ', 'compound'), ('String', 'dobj'), ('length', 'amod'), (' ', 'compound'), ('String', 'nsubj'), ('start', 'dep'), ('0', 'pobj'), ('odd', 'amod'), ('length', 'compound'), (' ', 'compound'), ('String', 'nsubj'), ('start', 'dobj'), ('1', 'pobj'), ('length', 'conj'), (' ', 'dobj')]

>> Bigrams: 
[[., 0], [0,  ], [ , String], [String, odd], [odd, length], [length,  ], [ , String], [String, length], [length,  ], [ , String], [String, start], [start, 0], [0, odd], [odd, length], [length,  ], [ , String], [String, start], [start, 1], [1, length], [length,  ]]

>> Trigrams: 
[[., 0,  ], [0,  , String], [ , String, odd], [String, odd, length], [odd, length,  ], [length,  , String], [ , String, length], [String, length,  ], [length,  , String], [ , String, start], [String, start, 0], [start, 0, odd], [0, odd, length], [odd, length,  ], [length,  , String], [ , String, start], [String, start, 1], [start, 1, length], [1, length,  ]]

>> Noun Phrases are: 
[ String, odd length  String, even length  String, odd length  String]

>> Named Entities are: 
[('1', 'CARDINAL')]


============================ Sentence 89 =============================

All string begins or ends with 00 or 11     …. 


>> Tokens are: 
[string, begins, ends, 00, 11,     , …, .] 

>> PoS Tags are: 
[('string', 'NOUN'), ('begins', 'VERB'), ('ends', 'VERB'), ('00', 'NUM'), ('11', 'NUM'), ('    ', 'SPACE'), ('…', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('string', 'nsubj'), ('begins', 'ROOT'), ('ends', 'conj'), ('00', 'nummod'), ('11', 'conj'), ('    ', 'pobj'), ('…', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[string, begins], [begins, ends], [ends, 00], [00, 11], [11,     ], [    , …], […, .]]

>> Trigrams: 
[[string, begins, ends], [begins, ends, 00], [ends, 00, 11], [00, 11,     ], [11,     , …], [    , …, .]]

>> Noun Phrases are: 
[All string]

>> Named Entities are: 
[('00', 'CARDINAL'), ('11     ', 'CARDINAL')]


============================ Sentence 90 =============================

 …. 


>> Tokens are: 
[ , …, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('…', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'ROOT'), ('…', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[ , …], […, .]]

>> Trigrams: 
[[ , …, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 91 =============================

 …. 


>> Tokens are: 
[ , …, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('…', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'ROOT'), ('…', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[ , …], […, .]]

>> Trigrams: 
[[ , …, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 92 =============================

 …. 


>> Tokens are: 
[ , …, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('…', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'ROOT'), ('…', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[ , …], […, .]]

>> Trigrams: 
[[ , …, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 93 =============================

 …. 


>> Tokens are: 
[ , …, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('…', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'ROOT'), ('…', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[ , …], […, .]]

>> Trigrams: 
[[ , …, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 94 =============================

      Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›   


>> Tokens are: 
[      , Prof., Dixita, B, Kagathara,   , #, 2170701, (, CD, ),   , ,   , Unit, 2, –, Lexical, Analyzer, ‹#›,  ] 

>> PoS Tags are: 
[('      ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('  ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'PROPN'), ('Analyzer', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('      ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'nsubj'), ('  ', 'appos'), ('#', 'nmod'), ('2170701', 'npadvmod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'dep'), ('  ', 'dobj'), ('Unit', 'appos'), ('2', 'nummod'), ('–', 'punct'), ('Lexical', 'compound'), ('Analyzer', 'ROOT'), ('‹#›', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[      , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,   ], [  , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 2], [2, –], [–, Lexical], [Lexical, Analyzer], [Analyzer, ‹#›], [‹#›,  ]]

>> Trigrams: 
[[      , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,   ], [Kagathara,   , #], [  , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 2], [Unit, 2, –], [2, –, Lexical], [–, Lexical, Analyzer], [Lexical, Analyzer, ‹#›], [Analyzer, ‹#›,  ]]

>> Noun Phrases are: 
[      Prof. Dixita B Kagathara, (CD, Unit]

>> Named Entities are: 
[('Dixita', 'PERSON'), ('Kagathara', 'PERSON')]


============================ Sentence 95 =============================

Regular expression examples Language of all string containing both 11 and 00 as substring   String ending with 1 and not contain 00   Language of C identifier               Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›   


>> Tokens are: 
[Regular, expression, examples, Language, string, containing, 11, 00, substring,   , String, ending, 1, contain, 00,   , Language, C, identifier,               , Prof., Dixita, B, Kagathara,   , #, 2170701, (, CD, ),   , ,   , Unit, 2, –, Lexical, Analyzer, ‹#›,  ] 

>> PoS Tags are: 
[('Regular', 'ADJ'), ('expression', 'NOUN'), ('examples', 'VERB'), ('Language', 'NOUN'), ('string', 'NOUN'), ('containing', 'VERB'), ('11', 'NUM'), ('00', 'NUM'), ('substring', 'VERB'), ('  ', 'SPACE'), ('String', 'NOUN'), ('ending', 'VERB'), ('1', 'NUM'), ('contain', 'VERB'), ('00', 'NUM'), ('  ', 'SPACE'), ('Language', 'PROPN'), ('C', 'NOUN'), ('identifier', 'ADJ'), ('              ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('  ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'PROPN'), ('Analyzer', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Regular', 'amod'), ('expression', 'compound'), ('examples', 'nsubj'), ('Language', 'dobj'), ('string', 'pobj'), ('containing', 'acl'), ('11', 'dobj'), ('00', 'conj'), ('substring', 'pcomp'), ('  ', 'dobj'), ('String', 'dobj'), ('ending', 'acl'), ('1', 'pobj'), ('contain', 'conj'), ('00', 'nummod'), ('  ', 'dobj'), ('Language', 'dobj'), ('C', 'pobj'), ('identifier', 'amod'), ('              ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'dobj'), ('  ', 'appos'), ('#', 'nmod'), ('2170701', 'npadvmod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'dep'), ('  ', 'dobj'), ('Unit', 'appos'), ('2', 'nummod'), ('–', 'punct'), ('Lexical', 'compound'), ('Analyzer', 'ROOT'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[Regular, expression], [expression, examples], [examples, Language], [Language, string], [string, containing], [containing, 11], [11, 00], [00, substring], [substring,   ], [  , String], [String, ending], [ending, 1], [1, contain], [contain, 00], [00,   ], [  , Language], [Language, C], [C, identifier], [identifier,               ], [              , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,   ], [  , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 2], [2, –], [–, Lexical], [Lexical, Analyzer], [Analyzer, ‹#›], [‹#›,  ]]

>> Trigrams: 
[[Regular, expression, examples], [expression, examples, Language], [examples, Language, string], [Language, string, containing], [string, containing, 11], [containing, 11, 00], [11, 00, substring], [00, substring,   ], [substring,   , String], [  , String, ending], [String, ending, 1], [ending, 1, contain], [1, contain, 00], [contain, 00,   ], [00,   , Language], [  , Language, C], [Language, C, identifier], [C, identifier,               ], [identifier,               , Prof.], [              , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,   ], [Kagathara,   , #], [  , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 2], [Unit, 2, –], [2, –, Lexical], [–, Lexical, Analyzer], [Lexical, Analyzer, ‹#›], [Analyzer, ‹#›,  ]]

>> Noun Phrases are: 
[Language, all string, String, Language, C, identifier               Prof. Dixita B Kagathara, (CD, Unit]

>> Named Entities are: 
[('11', 'CARDINAL'), ('00', 'CARDINAL'), ('Dixita', 'PERSON'), ('Kagathara', 'PERSON')]


============================ Sentence 96 =============================

Regular definition A regular definition gives names to certain regular expressions and uses those names in other regular expressions. 


>> Tokens are: 
[Regular, definition, regular, definition, gives, names, certain, regular, expressions, uses, names, regular, expressions, .] 

>> PoS Tags are: 
[('Regular', 'ADJ'), ('definition', 'NOUN'), ('regular', 'ADJ'), ('definition', 'NOUN'), ('gives', 'VERB'), ('names', 'NOUN'), ('certain', 'ADJ'), ('regular', 'ADJ'), ('expressions', 'NOUN'), ('uses', 'VERB'), ('names', 'NOUN'), ('regular', 'ADJ'), ('expressions', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Regular', 'amod'), ('definition', 'nsubj'), ('regular', 'amod'), ('definition', 'nsubj'), ('gives', 'ROOT'), ('names', 'dobj'), ('certain', 'amod'), ('regular', 'amod'), ('expressions', 'pobj'), ('uses', 'conj'), ('names', 'dobj'), ('regular', 'amod'), ('expressions', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Regular, definition], [definition, regular], [regular, definition], [definition, gives], [gives, names], [names, certain], [certain, regular], [regular, expressions], [expressions, uses], [uses, names], [names, regular], [regular, expressions], [expressions, .]]

>> Trigrams: 
[[Regular, definition, regular], [definition, regular, definition], [regular, definition, gives], [definition, gives, names], [gives, names, certain], [names, certain, regular], [certain, regular, expressions], [regular, expressions, uses], [expressions, uses, names], [uses, names, regular], [names, regular, expressions], [regular, expressions, .]]

>> Noun Phrases are: 
[Regular definition, A regular definition, names, certain regular expressions, those names, other regular expressions]

>> Named Entities are: 
[]


============================ Sentence 97 =============================

Regular definition is a sequence of definitions of the form:   ……  	Where  is a distinct name & is a regular expression. 


>> Tokens are: 
[Regular, definition, sequence, definitions, form, :,   , …, …,  	,  , distinct, &, regular, expression, .] 

>> PoS Tags are: 
[('Regular', 'ADJ'), ('definition', 'NOUN'), ('sequence', 'NOUN'), ('definitions', 'NOUN'), ('form', 'NOUN'), (':', 'PUNCT'), ('  ', 'SPACE'), ('…', 'PUNCT'), ('…', 'PUNCT'), (' \t', 'SPACE'), (' ', 'SPACE'), ('distinct', 'ADJ'), ('&', 'CCONJ'), ('regular', 'ADJ'), ('expression', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Regular', 'amod'), ('definition', 'nsubj'), ('sequence', 'attr'), ('definitions', 'pobj'), ('form', 'pobj'), (':', 'punct'), ('  ', 'appos'), ('…', 'punct'), ('…', 'punct'), (' \t', 'appos'), (' ', 'nsubj'), ('distinct', 'amod'), ('&', 'cc'), ('regular', 'amod'), ('expression', 'attr'), ('.', 'punct')]

>> Bigrams: 
[[Regular, definition], [definition, sequence], [sequence, definitions], [definitions, form], [form, :], [:,   ], [  , …], […, …], […,  	], [ 	,  ], [ , distinct], [distinct, &], [&, regular], [regular, expression], [expression, .]]

>> Trigrams: 
[[Regular, definition, sequence], [definition, sequence, definitions], [sequence, definitions, form], [definitions, form, :], [form, :,   ], [:,   , …], [  , …, …], […, …,  	], […,  	,  ], [ 	,  , distinct], [ , distinct, &], [distinct, &, regular], [&, regular, expression], [regular, expression, .]]

>> Noun Phrases are: 
[Regular definition, a sequence, definitions, the form, a distinct name, a regular expression]

>> Named Entities are: 
[]


============================ Sentence 98 =============================

Example: Regular definition for identifier 	letter  A|B|C|………..|Z|a|b|…… 


>> Tokens are: 
[Example, :, Regular, definition, identifier, 	, letter, , A|B|C|, …, …, …, .., |Z|a|b|, …, …] 

>> PoS Tags are: 
[('Example', 'NOUN'), (':', 'PUNCT'), ('Regular', 'ADJ'), ('definition', 'NOUN'), ('identifier', 'ADJ'), ('\t', 'SPACE'), ('letter', 'NOUN'), ('\uf0e0', 'NOUN'), ('A|B|C|', 'NOUN'), ('…', 'PUNCT'), ('…', 'PUNCT'), ('…', 'PUNCT'), ('..', 'PUNCT'), ('|Z|a|b|', 'PROPN'), ('…', 'PUNCT'), ('…', 'PUNCT')] 

>> Dependency Tags are: 
[('Example', 'ROOT'), (':', 'punct'), ('Regular', 'amod'), ('definition', 'appos'), ('identifier', 'amod'), ('\t', 'compound'), ('letter', 'compound'), ('\uf0e0', 'compound'), ('A|B|C|', 'pobj'), ('…', 'punct'), ('…', 'punct'), ('…', 'appos'), ('..', 'punct'), ('|Z|a|b|', 'appos'), ('…', 'punct'), ('…', 'punct')]

>> Bigrams: 
[[Example, :], [:, Regular], [Regular, definition], [definition, identifier], [identifier, 	], [	, letter], [letter, ], [, A|B|C|], [A|B|C|, …], […, …], […, …], […, ..], [.., |Z|a|b|], [|Z|a|b|, …], […, …]]

>> Trigrams: 
[[Example, :, Regular], [:, Regular, definition], [Regular, definition, identifier], [definition, identifier, 	], [identifier, 	, letter], [	, letter, ], [letter, , A|B|C|], [, A|B|C|, …], [A|B|C|, …, …], […, …, …], […, …, ..], […, .., |Z|a|b|], [.., |Z|a|b|, …], [|Z|a|b|, …, …]]

>> Noun Phrases are: 
[Example, Regular definition, identifier 	letter  A|B|C|, ..|Z|a|b|]

>> Named Entities are: 
[]


============================ Sentence 99 =============================

…..|z 


>> Tokens are: 
[…, .., |z] 

>> PoS Tags are: 
[('…', 'PUNCT'), ('..', 'PUNCT'), ('|z', 'PROPN')] 

>> Dependency Tags are: 
[('…', 'punct'), ('..', 'punct'), ('|z', 'ROOT')]

>> Bigrams: 
[[…, ..], [.., |z]]

>> Trigrams: 
[[…, .., |z]]

>> Noun Phrases are: 
[…..|z]

>> Named Entities are: 
[]


============================ Sentence 100 =============================

	digit  0|1|…….|9| 


>> Tokens are: 
[	, digit, , 0|1|, …, …, .|9|] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('digit', 'NOUN'), ('\uf0e0', 'NOUN'), ('0|1|', 'X'), ('…', 'PUNCT'), ('…', 'PUNCT'), ('.|9|', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'amod'), ('digit', 'compound'), ('\uf0e0', 'dep'), ('0|1|', 'dobj'), ('…', 'punct'), ('…', 'ROOT'), ('.|9|', 'punct')]

>> Bigrams: 
[[	, digit], [digit, ], [, 0|1|], [0|1|, …], […, …], […, .|9|]]

>> Trigrams: 
[[	, digit, ], [digit, , 0|1|], [, 0|1|, …], [0|1|, …, …], […, …, .|9|]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 101 =============================

	id letter (letter | digit)*     Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›   


>> Tokens are: 
[	, id, letter, (, letter, |, digit, ), *,     , Prof., Dixita, B, Kagathara,   , #, 2170701, (, CD, ),   , ,   , Unit, 2, –, Lexical, Analyzer, ‹#›,  ] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('id\uf0e0', 'NOUN'), ('letter', 'NOUN'), ('(', 'PUNCT'), ('letter', 'NOUN'), ('|', 'NOUN'), ('digit', 'NOUN'), (')', 'PUNCT'), ('*', 'PUNCT'), ('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('  ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'PROPN'), ('Analyzer', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('id\uf0e0', 'compound'), ('letter', 'nsubj'), ('(', 'punct'), ('letter', 'compound'), ('|', 'compound'), ('digit', 'appos'), (')', 'punct'), ('*', 'punct'), ('    ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('  ', 'appos'), ('#', 'nmod'), ('2170701', 'appos'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'dep'), ('  ', 'dobj'), ('Unit', 'appos'), ('2', 'nummod'), ('–', 'punct'), ('Lexical', 'compound'), ('Analyzer', 'ROOT'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[	, id], [id, letter], [letter, (], [(, letter], [letter, |], [|, digit], [digit, )], [), *], [*,     ], [    , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,   ], [  , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 2], [2, –], [–, Lexical], [Lexical, Analyzer], [Analyzer, ‹#›], [‹#›,  ]]

>> Trigrams: 
[[	, id, letter], [id, letter, (], [letter, (, letter], [(, letter, |], [letter, |, digit], [|, digit, )], [digit, ), *], [), *,     ], [*,     , Prof.], [    , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,   ], [Kagathara,   , #], [  , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 2], [Unit, 2, –], [2, –, Lexical], [–, Lexical, Analyzer], [Lexical, Analyzer, ‹#›], [Analyzer, ‹#›,  ]]

>> Noun Phrases are: 
[	id letter, letter | digit,     Prof. Dixita B Kagathara, (CD, Unit]

>> Named Entities are: 
[('Dixita', 'PERSON'), ('Kagathara', 'PERSON')]


============================ Sentence 102 =============================

Regular definition example Example: Unsigned Pascal numbers	 	3 	5280 	39.37 6.336E4 1.894E-4 2.56E+7 Regular Definition 	digit  0|1|…..|9 


>> Tokens are: 
[Regular, definition, example, Example, :, Unsigned, Pascal, numbers, 	 	, 3, 	, 5280, 	, 39.37, 6.336E4, 1.894E-4, 2.56E+7, Regular, Definition, 	, digit, , 0|1|, …, .., |9] 

>> PoS Tags are: 
[('Regular', 'ADJ'), ('definition', 'NOUN'), ('example', 'NOUN'), ('Example', 'NOUN'), (':', 'PUNCT'), ('Unsigned', 'ADJ'), ('Pascal', 'ADJ'), ('numbers', 'NOUN'), ('\t \t', 'SPACE'), ('3', 'NUM'), ('\t', 'SPACE'), ('5280', 'NUM'), ('\t', 'SPACE'), ('39.37', 'NUM'), ('6.336E4', 'NUM'), ('1.894E-4', 'NOUN'), ('2.56E+7', 'NUM'), ('Regular', 'PROPN'), ('Definition', 'PROPN'), ('\t', 'SPACE'), ('digit', 'NOUN'), ('\uf0e0', 'NOUN'), ('0|1|', 'NUM'), ('…', 'PUNCT'), ('..', 'PUNCT'), ('|9', 'PROPN')] 

>> Dependency Tags are: 
[('Regular', 'amod'), ('definition', 'compound'), ('example', 'compound'), ('Example', 'ROOT'), (':', 'punct'), ('Unsigned', 'amod'), ('Pascal', 'amod'), ('numbers', 'nsubj'), ('\t \t', 'appos'), ('3', 'appos'), ('\t', 'appos'), ('5280', 'nummod'), ('\t', 'conj'), ('39.37', 'compound'), ('6.336E4', 'appos'), ('1.894E-4', 'prep'), ('2.56E+7', 'nummod'), ('Regular', 'compound'), ('Definition', 'compound'), ('\t', 'compound'), ('digit', 'compound'), ('\uf0e0', 'appos'), ('0|1|', 'appos'), ('…', 'punct'), ('..', 'punct'), ('|9', 'punct')]

>> Bigrams: 
[[Regular, definition], [definition, example], [example, Example], [Example, :], [:, Unsigned], [Unsigned, Pascal], [Pascal, numbers], [numbers, 	 	], [	 	, 3], [3, 	], [	, 5280], [5280, 	], [	, 39.37], [39.37, 6.336E4], [6.336E4, 1.894E-4], [1.894E-4, 2.56E+7], [2.56E+7, Regular], [Regular, Definition], [Definition, 	], [	, digit], [digit, ], [, 0|1|], [0|1|, …], […, ..], [.., |9]]

>> Trigrams: 
[[Regular, definition, example], [definition, example, Example], [example, Example, :], [Example, :, Unsigned], [:, Unsigned, Pascal], [Unsigned, Pascal, numbers], [Pascal, numbers, 	 	], [numbers, 	 	, 3], [	 	, 3, 	], [3, 	, 5280], [	, 5280, 	], [5280, 	, 39.37], [	, 39.37, 6.336E4], [39.37, 6.336E4, 1.894E-4], [6.336E4, 1.894E-4, 2.56E+7], [1.894E-4, 2.56E+7, Regular], [2.56E+7, Regular, Definition], [Regular, Definition, 	], [Definition, 	, digit], [	, digit, ], [digit, , 0|1|], [, 0|1|, …], [0|1|, …, ..], […, .., |9]]

>> Noun Phrases are: 
[Regular definition example Example, Unsigned Pascal numbers, 2.56E+7 Regular Definition 	digit ]

>> Named Entities are: 
[('3', 'CARDINAL'), ('|9', 'CARDINAL')]


============================ Sentence 103 =============================

	digits  digit digit* 	optional_fraction  .digits | 𝜖 	optional_exponent  (E(+|-|𝜖)digits)|𝜖 	num  digits 


>> Tokens are: 
[	, digits, , digit, digit, *, 	, optional_fraction, , .digits, |, 𝜖, 	, optional_exponent, , (, E(+|-|𝜖)digits)|𝜖, 	, num, , digits] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('digits', 'NOUN'), ('\uf0e0', 'NOUN'), ('digit', 'NOUN'), ('digit', 'NOUN'), ('*', 'PUNCT'), ('\t', 'SPACE'), ('optional_fraction', 'PROPN'), ('\uf0e0', 'NOUN'), ('.digits', 'NOUN'), ('|', 'NOUN'), ('𝜖', 'PROPN'), ('\t', 'SPACE'), ('optional_exponent', 'PROPN'), ('\uf0e0', 'NOUN'), ('(', 'PUNCT'), ('E(+|-|𝜖)digits)|𝜖', 'PROPN'), ('\t', 'SPACE'), ('num', 'NOUN'), ('\uf0e0', 'NOUN'), ('digits', 'NOUN')] 

>> Dependency Tags are: 
[('\t', 'amod'), ('digits', 'ROOT'), ('\uf0e0', 'compound'), ('digit', 'compound'), ('digit', 'appos'), ('*', 'punct'), ('\t', 'compound'), ('optional_fraction', 'compound'), ('\uf0e0', 'appos'), ('.digits', 'punct'), ('|', 'appos'), ('𝜖', 'appos'), ('\t', 'nmod'), ('optional_exponent', 'compound'), ('\uf0e0', 'appos'), ('(', 'punct'), ('E(+|-|𝜖)digits)|𝜖', 'compound'), ('\t', 'compound'), ('num', 'compound'), ('\uf0e0', 'compound'), ('digits', 'parataxis')]

>> Bigrams: 
[[	, digits], [digits, ], [, digit], [digit, digit], [digit, *], [*, 	], [	, optional_fraction], [optional_fraction, ], [, .digits], [.digits, |], [|, 𝜖], [𝜖, 	], [	, optional_exponent], [optional_exponent, ], [, (], [(, E(+|-|𝜖)digits)|𝜖], [E(+|-|𝜖)digits)|𝜖, 	], [	, num], [num, ], [, digits]]

>> Trigrams: 
[[	, digits, ], [digits, , digit], [, digit, digit], [digit, digit, *], [digit, *, 	], [*, 	, optional_fraction], [	, optional_fraction, ], [optional_fraction, , .digits], [, .digits, |], [.digits, |, 𝜖], [|, 𝜖, 	], [𝜖, 	, optional_exponent], [	, optional_exponent, ], [optional_exponent, , (], [, (, E(+|-|𝜖)digits)|𝜖], [(, E(+|-|𝜖)digits)|𝜖, 	], [E(+|-|𝜖)digits)|𝜖, 	, num], [	, num, ], [num, , digits]]

>> Noun Phrases are: 
[	digits,  digit digit, 	optional_fraction , |, 𝜖, 	optional_exponent ]

>> Named Entities are: 
[]


============================ Sentence 104 =============================

optional_fraction optional_exponent       Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Transition Diagram        Transition Diagram A stylized flowchart is called transition diagram. 


>> Tokens are: 
[optional_fraction, optional_exponent,       , Prof., Dixita, B, Kagathara,   , #, 2170701, (, CD, ),   , ,   , Unit, 2, –, Lexical, Analyzer, ‹#›,  , Transition, Diagram,        , Transition, Diagram, stylized, flowchart, called, transition, diagram, .] 

>> PoS Tags are: 
[('optional_fraction', 'NOUN'), ('optional_exponent', 'ADJ'), ('      ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('  ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'PROPN'), ('Analyzer', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE'), ('Transition', 'PROPN'), ('Diagram', 'PROPN'), ('       ', 'SPACE'), ('Transition', 'PROPN'), ('Diagram', 'PROPN'), ('stylized', 'VERB'), ('flowchart', 'NOUN'), ('called', 'VERB'), ('transition', 'NOUN'), ('diagram', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('optional_fraction', 'nmod'), ('optional_exponent', 'amod'), ('      ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'nsubj'), ('  ', 'appos'), ('#', 'nmod'), ('2170701', 'npadvmod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'dep'), ('  ', 'dobj'), ('Unit', 'appos'), ('2', 'nummod'), ('–', 'punct'), ('Lexical', 'compound'), ('Analyzer', 'nsubjpass'), ('‹#›', 'punct'), (' ', 'appos'), ('Transition', 'compound'), ('Diagram', 'appos'), ('       ', 'compound'), ('Transition', 'compound'), ('Diagram', 'appos'), ('stylized', 'amod'), ('flowchart', 'nsubjpass'), ('called', 'ROOT'), ('transition', 'compound'), ('diagram', 'oprd'), ('.', 'punct')]

>> Bigrams: 
[[optional_fraction, optional_exponent], [optional_exponent,       ], [      , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,   ], [  , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 2], [2, –], [–, Lexical], [Lexical, Analyzer], [Analyzer, ‹#›], [‹#›,  ], [ , Transition], [Transition, Diagram], [Diagram,        ], [       , Transition], [Transition, Diagram], [Diagram, stylized], [stylized, flowchart], [flowchart, called], [called, transition], [transition, diagram], [diagram, .]]

>> Trigrams: 
[[optional_fraction, optional_exponent,       ], [optional_exponent,       , Prof.], [      , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,   ], [Kagathara,   , #], [  , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 2], [Unit, 2, –], [2, –, Lexical], [–, Lexical, Analyzer], [Lexical, Analyzer, ‹#›], [Analyzer, ‹#›,  ], [‹#›,  , Transition], [ , Transition, Diagram], [Transition, Diagram,        ], [Diagram,        , Transition], [       , Transition, Diagram], [Transition, Diagram, stylized], [Diagram, stylized, flowchart], [stylized, flowchart, called], [flowchart, called, transition], [called, transition, diagram], [transition, diagram, .]]

>> Noun Phrases are: 
[optional_fraction optional_exponent       Prof. Dixita B Kagathara, (CD, Unit, Transition Diagram,        Transition Diagram, A stylized flowchart, transition diagram]

>> Named Entities are: 
[('Dixita', 'PERSON'), ('Kagathara', 'PERSON'), ('Transition Diagram        Transition Diagram', 'ORG')]


============================ Sentence 105 =============================

  is a state  is a transition   is a start state   is a final state    Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Transition Diagram : Relational operator  <     2  3  4  5  8  7  = other > = other = > return (relop,LE) return (relop,NE) return (relop,LT) return (relop,GE) return (relop,GT) return (relop,EQ) 


>> Tokens are: 
[  , state,  , transition,   , start, state,   , final, state,    , Prof., Dixita, B, Kagathara,   , #, 2170701, (, CD, ),   , ,   , Unit, 2, –, Lexical, Analyzer, ‹#›,  , Transition, Diagram, :, Relational, operator,  , <,     , 2,  , 3,  , 4,  , 5,  , 8,  , 7,  , =, >, =, =, >, return, (, relop, ,, LE, ), return, (, relop, ,, NE, ), return, (, relop, ,, LT, ), return, (, relop, ,, GE, ), return, (, relop, ,, GT, ), return, (, relop, ,, EQ, )] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('state', 'NOUN'), (' ', 'SPACE'), ('transition', 'NOUN'), ('  ', 'SPACE'), ('start', 'NOUN'), ('state', 'NOUN'), ('  ', 'SPACE'), ('final', 'ADJ'), ('state', 'NOUN'), ('   ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('  ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'PROPN'), ('Analyzer', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE'), ('Transition', 'PROPN'), ('Diagram', 'PROPN'), (':', 'PUNCT'), ('Relational', 'ADJ'), ('operator', 'NOUN'), (' ', 'SPACE'), ('<', 'X'), ('    ', 'SPACE'), ('2', 'NUM'), (' ', 'SPACE'), ('3', 'NUM'), (' ', 'SPACE'), ('4', 'NUM'), (' ', 'SPACE'), ('5', 'NUM'), (' ', 'SPACE'), ('8', 'NUM'), (' ', 'SPACE'), ('7', 'NUM'), (' ', 'SPACE'), ('=', 'ADV'), ('>', 'X'), ('=', 'PUNCT'), ('=', 'SYM'), ('>', 'X'), ('return', 'NOUN'), ('(', 'PUNCT'), ('relop', 'NOUN'), (',', 'PUNCT'), ('LE', 'PROPN'), (')', 'PUNCT'), ('return', 'NOUN'), ('(', 'PUNCT'), ('relop', 'NOUN'), (',', 'PUNCT'), ('NE', 'PROPN'), (')', 'PUNCT'), ('return', 'NOUN'), ('(', 'PUNCT'), ('relop', 'NOUN'), (',', 'PUNCT'), ('LT', 'NOUN'), (')', 'PUNCT'), ('return', 'NOUN'), ('(', 'PUNCT'), ('relop', 'NOUN'), (',', 'PUNCT'), ('GE', 'PROPN'), (')', 'PUNCT'), ('return', 'NOUN'), ('(', 'PUNCT'), ('relop', 'NOUN'), (',', 'PUNCT'), ('GT', 'NOUN'), (')', 'PUNCT'), ('return', 'NOUN'), ('(', 'PUNCT'), ('relop', 'NOUN'), (',', 'PUNCT'), ('EQ', 'PROPN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'nsubj'), ('state', 'attr'), (' ', 'nsubj'), ('transition', 'compound'), ('  ', 'nsubj'), ('start', 'compound'), ('state', 'attr'), ('  ', 'nsubj'), ('final', 'amod'), ('state', 'nmod'), ('   ', 'nummod'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'attr'), ('  ', 'npadvmod'), ('#', 'nmod'), ('2170701', 'npadvmod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'advcl'), ('  ', 'punct'), ('Unit', 'appos'), ('2', 'nummod'), ('–', 'punct'), ('Lexical', 'compound'), ('Analyzer', 'nsubj'), ('‹#›', 'punct'), (' ', 'appos'), ('Transition', 'compound'), ('Diagram', 'appos'), (':', 'punct'), ('Relational', 'compound'), ('operator', 'appos'), (' ', 'appos'), ('<', 'appos'), ('    ', 'nmod'), ('2', 'nummod'), (' ', 'appos'), ('3', 'nummod'), (' ', 'appos'), ('4', 'nummod'), (' ', 'appos'), ('5', 'nummod'), (' ', 'appos'), ('8', 'appos'), (' ', 'appos'), ('7', 'nummod'), (' ', 'appos'), ('=', 'punct'), ('>', 'punct'), ('=', 'advmod'), ('=', 'punct'), ('>', 'appos'), ('return', 'appos'), ('(', 'punct'), ('relop', 'nmod'), (',', 'punct'), ('LE', 'nmod'), (')', 'punct'), ('return', 'appos'), ('(', 'punct'), ('relop', 'nmod'), (',', 'punct'), ('NE', 'conj'), (')', 'punct'), ('return', 'attr'), ('(', 'punct'), ('relop', 'nmod'), (',', 'punct'), ('LT', 'npadvmod'), (')', 'punct'), ('return', 'appos'), ('(', 'punct'), ('relop', 'advmod'), (',', 'punct'), ('GE', 'npadvmod'), (')', 'punct'), ('return', 'attr'), ('(', 'punct'), ('relop', 'intj'), (',', 'punct'), ('GT', 'npadvmod'), (')', 'punct'), ('return', 'conj'), ('(', 'punct'), ('relop', 'intj'), (',', 'punct'), ('EQ', 'npadvmod'), (')', 'punct')]

>> Bigrams: 
[[  , state], [state,  ], [ , transition], [transition,   ], [  , start], [start, state], [state,   ], [  , final], [final, state], [state,    ], [   , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,   ], [  , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 2], [2, –], [–, Lexical], [Lexical, Analyzer], [Analyzer, ‹#›], [‹#›,  ], [ , Transition], [Transition, Diagram], [Diagram, :], [:, Relational], [Relational, operator], [operator,  ], [ , <], [<,     ], [    , 2], [2,  ], [ , 3], [3,  ], [ , 4], [4,  ], [ , 5], [5,  ], [ , 8], [8,  ], [ , 7], [7,  ], [ , =], [=, >], [>, =], [=, =], [=, >], [>, return], [return, (], [(, relop], [relop, ,], [,, LE], [LE, )], [), return], [return, (], [(, relop], [relop, ,], [,, NE], [NE, )], [), return], [return, (], [(, relop], [relop, ,], [,, LT], [LT, )], [), return], [return, (], [(, relop], [relop, ,], [,, GE], [GE, )], [), return], [return, (], [(, relop], [relop, ,], [,, GT], [GT, )], [), return], [return, (], [(, relop], [relop, ,], [,, EQ], [EQ, )]]

>> Trigrams: 
[[  , state,  ], [state,  , transition], [ , transition,   ], [transition,   , start], [  , start, state], [start, state,   ], [state,   , final], [  , final, state], [final, state,    ], [state,    , Prof.], [   , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,   ], [Kagathara,   , #], [  , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 2], [Unit, 2, –], [2, –, Lexical], [–, Lexical, Analyzer], [Lexical, Analyzer, ‹#›], [Analyzer, ‹#›,  ], [‹#›,  , Transition], [ , Transition, Diagram], [Transition, Diagram, :], [Diagram, :, Relational], [:, Relational, operator], [Relational, operator,  ], [operator,  , <], [ , <,     ], [<,     , 2], [    , 2,  ], [2,  , 3], [ , 3,  ], [3,  , 4], [ , 4,  ], [4,  , 5], [ , 5,  ], [5,  , 8], [ , 8,  ], [8,  , 7], [ , 7,  ], [7,  , =], [ , =, >], [=, >, =], [>, =, =], [=, =, >], [=, >, return], [>, return, (], [return, (, relop], [(, relop, ,], [relop, ,, LE], [,, LE, )], [LE, ), return], [), return, (], [return, (, relop], [(, relop, ,], [relop, ,, NE], [,, NE, )], [NE, ), return], [), return, (], [return, (, relop], [(, relop, ,], [relop, ,, LT], [,, LT, )], [LT, ), return], [), return, (], [return, (, relop], [(, relop, ,], [relop, ,, GE], [,, GE, )], [GE, ), return], [), return, (], [return, (, relop], [(, relop, ,], [relop, ,, GT], [,, GT, )], [GT, ), return], [), return, (], [return, (, relop], [(, relop, ,], [relop, ,, EQ], [,, EQ, )]]

>> Noun Phrases are: 
[a state, a start state, a final state    Prof. Dixita B Kagathara, (CD, Unit, Lexical Analyzer, Transition Diagram, Relational operator, relop,LE) return, relop,NE) return, relop,LT) return, return, return]

>> Named Entities are: 
[('Dixita', 'PERSON'), ('Kagathara', 'PERSON'), ('3', 'CARDINAL'), ('4', 'CARDINAL'), ('8', 'CARDINAL'), ('NE', 'GPE'), ('GE', 'ORG'), ('EQ', 'GPE')]


============================ Sentence 106 =============================

   Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Transition diagram : Unsigned number   8  other digit      digit digit digit +or - digit digit E . start E digit 	3 	5280 	39.37 1.894 E - 4 2.56 E + 7 45 E + 6 96 E 2    Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›   


>> Tokens are: 
[   , Prof., Dixita, B, Kagathara,   , #, 2170701, (, CD, ),   , ,   , Unit, 2, –, Lexical, Analyzer, ‹#›,  , Transition, diagram, :, Unsigned, number,   , 8,  , digit,      , digit, digit, digit, +, -, digit, digit, E, ., start, E, digit, 	, 3, 	, 5280, 	, 39.37, 1.894, E, -, 4, 2.56, E, +, 7, 45, E, +, 6, 96, E, 2,    , Prof., Dixita, B, Kagathara,   , #, 2170701, (, CD, ),   , ,   , Unit, 2, –, Lexical, Analyzer, ‹#›,  ] 

>> PoS Tags are: 
[('   ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('  ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'PROPN'), ('Analyzer', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE'), ('Transition', 'NOUN'), ('diagram', 'NOUN'), (':', 'PUNCT'), ('Unsigned', 'ADJ'), ('number', 'NOUN'), ('  ', 'SPACE'), ('8', 'NUM'), (' ', 'SPACE'), ('digit', 'NOUN'), ('     ', 'SPACE'), ('digit', 'NOUN'), ('digit', 'NOUN'), ('digit', 'NOUN'), ('+', 'CCONJ'), ('-', 'PUNCT'), ('digit', 'NOUN'), ('digit', 'NOUN'), ('E', 'NOUN'), ('.', 'PROPN'), ('start', 'VERB'), ('E', 'NOUN'), ('digit', 'NOUN'), ('\t', 'SPACE'), ('3', 'NUM'), ('\t', 'SPACE'), ('5280', 'NUM'), ('\t', 'SPACE'), ('39.37', 'NUM'), ('1.894', 'NUM'), ('E', 'NOUN'), ('-', 'PUNCT'), ('4', 'NUM'), ('2.56', 'NUM'), ('E', 'NOUN'), ('+', 'CCONJ'), ('7', 'NUM'), ('45', 'NUM'), ('E', 'NOUN'), ('+', 'CCONJ'), ('6', 'NUM'), ('96', 'NUM'), ('E', 'NOUN'), ('2', 'NUM'), ('   ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('  ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'PROPN'), ('Analyzer', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('   ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'nsubj'), ('  ', 'appos'), ('#', 'nmod'), ('2170701', 'npadvmod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'dep'), ('  ', 'dobj'), ('Unit', 'appos'), ('2', 'nummod'), ('–', 'punct'), ('Lexical', 'compound'), ('Analyzer', 'nmod'), ('‹#›', 'punct'), (' ', 'appos'), ('Transition', 'compound'), ('diagram', 'nsubj'), (':', 'punct'), ('Unsigned', 'amod'), ('number', 'appos'), ('  ', 'appos'), ('8', 'nummod'), (' ', 'appos'), ('digit', 'nmod'), ('     ', 'compound'), ('digit', 'compound'), ('digit', 'compound'), ('digit', 'appos'), ('+', 'punct'), ('-', 'punct'), ('digit', 'compound'), ('digit', 'compound'), ('E', 'conj'), ('.', 'appos'), ('start', 'ROOT'), ('E', 'compound'), ('digit', 'dobj'), ('\t', 'appos'), ('3', 'nummod'), ('\t', 'dobj'), ('5280', 'nummod'), ('\t', 'appos'), ('39.37', 'nummod'), ('1.894', 'nummod'), ('E', 'appos'), ('-', 'punct'), ('4', 'nummod'), ('2.56', 'nummod'), ('E', 'appos'), ('+', 'appos'), ('7', 'compound'), ('45', 'nummod'), ('E', 'appos'), ('+', 'appos'), ('6', 'compound'), ('96', 'nummod'), ('E', 'appos'), ('2', 'compound'), ('   ', 'nummod'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('  ', 'npadvmod'), ('#', 'nmod'), ('2170701', 'npadvmod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'advcl'), ('  ', 'punct'), ('Unit', 'appos'), ('2', 'nummod'), ('–', 'punct'), ('Lexical', 'compound'), ('Analyzer', 'npadvmod'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[   , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,   ], [  , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 2], [2, –], [–, Lexical], [Lexical, Analyzer], [Analyzer, ‹#›], [‹#›,  ], [ , Transition], [Transition, diagram], [diagram, :], [:, Unsigned], [Unsigned, number], [number,   ], [  , 8], [8,  ], [ , digit], [digit,      ], [     , digit], [digit, digit], [digit, digit], [digit, +], [+, -], [-, digit], [digit, digit], [digit, E], [E, .], [., start], [start, E], [E, digit], [digit, 	], [	, 3], [3, 	], [	, 5280], [5280, 	], [	, 39.37], [39.37, 1.894], [1.894, E], [E, -], [-, 4], [4, 2.56], [2.56, E], [E, +], [+, 7], [7, 45], [45, E], [E, +], [+, 6], [6, 96], [96, E], [E, 2], [2,    ], [   , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,   ], [  , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 2], [2, –], [–, Lexical], [Lexical, Analyzer], [Analyzer, ‹#›], [‹#›,  ]]

>> Trigrams: 
[[   , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,   ], [Kagathara,   , #], [  , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 2], [Unit, 2, –], [2, –, Lexical], [–, Lexical, Analyzer], [Lexical, Analyzer, ‹#›], [Analyzer, ‹#›,  ], [‹#›,  , Transition], [ , Transition, diagram], [Transition, diagram, :], [diagram, :, Unsigned], [:, Unsigned, number], [Unsigned, number,   ], [number,   , 8], [  , 8,  ], [8,  , digit], [ , digit,      ], [digit,      , digit], [     , digit, digit], [digit, digit, digit], [digit, digit, +], [digit, +, -], [+, -, digit], [-, digit, digit], [digit, digit, E], [digit, E, .], [E, ., start], [., start, E], [start, E, digit], [E, digit, 	], [digit, 	, 3], [	, 3, 	], [3, 	, 5280], [	, 5280, 	], [5280, 	, 39.37], [	, 39.37, 1.894], [39.37, 1.894, E], [1.894, E, -], [E, -, 4], [-, 4, 2.56], [4, 2.56, E], [2.56, E, +], [E, +, 7], [+, 7, 45], [7, 45, E], [45, E, +], [E, +, 6], [+, 6, 96], [6, 96, E], [96, E, 2], [E, 2,    ], [2,    , Prof.], [   , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,   ], [Kagathara,   , #], [  , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 2], [Unit, 2, –], [2, –, Lexical], [–, Lexical, Analyzer], [Lexical, Analyzer, ‹#›], [Analyzer, ‹#›,  ]]

>> Noun Phrases are: 
[   Prof. Dixita B Kagathara, (CD, Unit, Unsigned number, other digit      digit digit digit, - digit digit E, ., E digit, 39.37 1.894 E, 4 2.56 E, 7 45 E, 6 96 E, 2    Prof. Dixita B Kagathara, (CD, Unit]

>> Named Entities are: 
[('Dixita', 'PERSON'), ('Kagathara', 'PERSON'), ('8', 'CARDINAL'), ('3', 'CARDINAL'), ('Dixita', 'PERSON'), ('Kagathara', 'PERSON')]


============================ Sentence 107 =============================

Hard coding & automatic generation Lexical analyzers        Hard coding and automatic generation lexical analyzers Lexical analysis is about identifying the pattern from the input. 


>> Tokens are: 
[Hard, coding, &, automatic, generation, Lexical, analyzers,        , Hard, coding, automatic, generation, lexical, analyzers, Lexical, analysis, identifying, pattern, input, .] 

>> PoS Tags are: 
[('Hard', 'ADJ'), ('coding', 'NOUN'), ('&', 'CCONJ'), ('automatic', 'ADJ'), ('generation', 'NOUN'), ('Lexical', 'PROPN'), ('analyzers', 'NOUN'), ('       ', 'SPACE'), ('Hard', 'ADJ'), ('coding', 'NOUN'), ('automatic', 'ADJ'), ('generation', 'NOUN'), ('lexical', 'ADJ'), ('analyzers', 'NOUN'), ('Lexical', 'ADJ'), ('analysis', 'NOUN'), ('identifying', 'VERB'), ('pattern', 'NOUN'), ('input', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Hard', 'amod'), ('coding', 'nmod'), ('&', 'cc'), ('automatic', 'amod'), ('generation', 'conj'), ('Lexical', 'compound'), ('analyzers', 'nsubj'), ('       ', 'nmod'), ('Hard', 'amod'), ('coding', 'nmod'), ('automatic', 'amod'), ('generation', 'conj'), ('lexical', 'amod'), ('analyzers', 'appos'), ('Lexical', 'amod'), ('analysis', 'appos'), ('identifying', 'pcomp'), ('pattern', 'dobj'), ('input', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Hard, coding], [coding, &], [&, automatic], [automatic, generation], [generation, Lexical], [Lexical, analyzers], [analyzers,        ], [       , Hard], [Hard, coding], [coding, automatic], [automatic, generation], [generation, lexical], [lexical, analyzers], [analyzers, Lexical], [Lexical, analysis], [analysis, identifying], [identifying, pattern], [pattern, input], [input, .]]

>> Trigrams: 
[[Hard, coding, &], [coding, &, automatic], [&, automatic, generation], [automatic, generation, Lexical], [generation, Lexical, analyzers], [Lexical, analyzers,        ], [analyzers,        , Hard], [       , Hard, coding], [Hard, coding, automatic], [coding, automatic, generation], [automatic, generation, lexical], [generation, lexical, analyzers], [lexical, analyzers, Lexical], [analyzers, Lexical, analysis], [Lexical, analysis, identifying], [analysis, identifying, pattern], [identifying, pattern, input], [pattern, input, .]]

>> Noun Phrases are: 
[Hard coding & automatic generation Lexical analyzers,        Hard coding and automatic generation lexical analyzers, Lexical analysis, the pattern, the input]

>> Named Entities are: 
[]


============================ Sentence 108 =============================

To recognize the pattern, transition diagram is constructed. 


>> Tokens are: 
[recognize, pattern, ,, transition, diagram, constructed, .] 

>> PoS Tags are: 
[('recognize', 'VERB'), ('pattern', 'NOUN'), (',', 'PUNCT'), ('transition', 'NOUN'), ('diagram', 'NOUN'), ('constructed', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('recognize', 'advcl'), ('pattern', 'dobj'), (',', 'punct'), ('transition', 'compound'), ('diagram', 'nsubjpass'), ('constructed', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[recognize, pattern], [pattern, ,], [,, transition], [transition, diagram], [diagram, constructed], [constructed, .]]

>> Trigrams: 
[[recognize, pattern, ,], [pattern, ,, transition], [,, transition, diagram], [transition, diagram, constructed], [diagram, constructed, .]]

>> Noun Phrases are: 
[the pattern, transition diagram]

>> Named Entities are: 
[]


============================ Sentence 109 =============================

It is known as hard coding lexical analyzer. 


>> Tokens are: 
[known, hard, coding, lexical, analyzer, .] 

>> PoS Tags are: 
[('known', 'VERB'), ('hard', 'ADJ'), ('coding', 'VERB'), ('lexical', 'ADJ'), ('analyzer', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('known', 'ROOT'), ('hard', 'advmod'), ('coding', 'amod'), ('lexical', 'amod'), ('analyzer', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[known, hard], [hard, coding], [coding, lexical], [lexical, analyzer], [analyzer, .]]

>> Trigrams: 
[[known, hard, coding], [hard, coding, lexical], [coding, lexical, analyzer], [lexical, analyzer, .]]

>> Noun Phrases are: 
[It, hard coding lexical analyzer]

>> Named Entities are: 
[]


============================ Sentence 110 =============================

Example: to represent identifier in ‘C’, the first character must be letter and other characters are either letter or digits. 


>> Tokens are: 
[Example, :, represent, identifier, ‘, C, ’, ,, character, letter, characters, letter, digits, .] 

>> PoS Tags are: 
[('Example', 'NOUN'), (':', 'PUNCT'), ('represent', 'VERB'), ('identifier', 'ADJ'), ('‘', 'PUNCT'), ('C', 'NOUN'), ('’', 'PUNCT'), (',', 'PUNCT'), ('character', 'NOUN'), ('letter', 'NOUN'), ('characters', 'NOUN'), ('letter', 'NOUN'), ('digits', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Example', 'nsubj'), (':', 'punct'), ('represent', 'acl'), ('identifier', 'advmod'), ('‘', 'punct'), ('C', 'pobj'), ('’', 'punct'), (',', 'punct'), ('character', 'nsubj'), ('letter', 'attr'), ('characters', 'conj'), ('letter', 'attr'), ('digits', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[Example, :], [:, represent], [represent, identifier], [identifier, ‘], [‘, C], [C, ’], [’, ,], [,, character], [character, letter], [letter, characters], [characters, letter], [letter, digits], [digits, .]]

>> Trigrams: 
[[Example, :, represent], [:, represent, identifier], [represent, identifier, ‘], [identifier, ‘, C], [‘, C, ’], [C, ’, ,], [’, ,, character], [,, character, letter], [character, letter, characters], [letter, characters, letter], [characters, letter, digits], [letter, digits, .]]

>> Noun Phrases are: 
[Example, ‘C, the first character, letter, other characters, either letter, digits]

>> Named Entities are: 
[('first', 'ORDINAL')]


============================ Sentence 111 =============================

To recognize this pattern, hard coding lexical analyzer will work with a transition diagram. 


>> Tokens are: 
[recognize, pattern, ,, hard, coding, lexical, analyzer, work, transition, diagram, .] 

>> PoS Tags are: 
[('recognize', 'VERB'), ('pattern', 'NOUN'), (',', 'PUNCT'), ('hard', 'ADJ'), ('coding', 'VERB'), ('lexical', 'ADJ'), ('analyzer', 'NOUN'), ('work', 'VERB'), ('transition', 'NOUN'), ('diagram', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('recognize', 'advcl'), ('pattern', 'dobj'), (',', 'punct'), ('hard', 'advmod'), ('coding', 'amod'), ('lexical', 'amod'), ('analyzer', 'nsubj'), ('work', 'ROOT'), ('transition', 'compound'), ('diagram', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[recognize, pattern], [pattern, ,], [,, hard], [hard, coding], [coding, lexical], [lexical, analyzer], [analyzer, work], [work, transition], [transition, diagram], [diagram, .]]

>> Trigrams: 
[[recognize, pattern, ,], [pattern, ,, hard], [,, hard, coding], [hard, coding, lexical], [coding, lexical, analyzer], [lexical, analyzer, work], [analyzer, work, transition], [work, transition, diagram], [transition, diagram, .]]

>> Noun Phrases are: 
[this pattern, hard coding lexical analyzer, a transition diagram]

>> Named Entities are: 
[]


============================ Sentence 112 =============================

The automatic generation lexical analyzer takes special notation as input. 


>> Tokens are: 
[automatic, generation, lexical, analyzer, takes, special, notation, input, .] 

>> PoS Tags are: 
[('automatic', 'ADJ'), ('generation', 'NOUN'), ('lexical', 'ADJ'), ('analyzer', 'NOUN'), ('takes', 'VERB'), ('special', 'ADJ'), ('notation', 'NOUN'), ('input', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('automatic', 'amod'), ('generation', 'nmod'), ('lexical', 'amod'), ('analyzer', 'nsubj'), ('takes', 'ROOT'), ('special', 'amod'), ('notation', 'dobj'), ('input', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[automatic, generation], [generation, lexical], [lexical, analyzer], [analyzer, takes], [takes, special], [special, notation], [notation, input], [input, .]]

>> Trigrams: 
[[automatic, generation, lexical], [generation, lexical, analyzer], [lexical, analyzer, takes], [analyzer, takes, special], [takes, special, notation], [special, notation, input], [notation, input, .]]

>> Noun Phrases are: 
[The automatic generation lexical analyzer, special notation, input]

>> Named Entities are: 
[]


============================ Sentence 113 =============================

For example, lex compiler tool will take regular expression as input and finds out the pattern matching to that regular expression. 


>> Tokens are: 
[example, ,, lex, compiler, tool, regular, expression, input, finds, pattern, matching, regular, expression, .] 

>> PoS Tags are: 
[('example', 'NOUN'), (',', 'PUNCT'), ('lex', 'NOUN'), ('compiler', 'NOUN'), ('tool', 'NOUN'), ('regular', 'ADJ'), ('expression', 'NOUN'), ('input', 'NOUN'), ('finds', 'VERB'), ('pattern', 'NOUN'), ('matching', 'VERB'), ('regular', 'ADJ'), ('expression', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('example', 'pobj'), (',', 'punct'), ('lex', 'compound'), ('compiler', 'compound'), ('tool', 'nsubj'), ('regular', 'amod'), ('expression', 'dobj'), ('input', 'pobj'), ('finds', 'conj'), ('pattern', 'dobj'), ('matching', 'acl'), ('regular', 'amod'), ('expression', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[example, ,], [,, lex], [lex, compiler], [compiler, tool], [tool, regular], [regular, expression], [expression, input], [input, finds], [finds, pattern], [pattern, matching], [matching, regular], [regular, expression], [expression, .]]

>> Trigrams: 
[[example, ,, lex], [,, lex, compiler], [lex, compiler, tool], [compiler, tool, regular], [tool, regular, expression], [regular, expression, input], [expression, input, finds], [input, finds, pattern], [finds, pattern, matching], [pattern, matching, regular], [matching, regular, expression], [regular, expression, .]]

>> Noun Phrases are: 
[example, lex compiler tool, regular expression, input, the pattern, that regular expression]

>> Named Entities are: 
[]


============================ Sentence 114 =============================

  2 3 Start   


>> Tokens are: 
[  , 2, 3, Start,  ] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('2', 'NUM'), ('3', 'NUM'), ('Start', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'quantmod'), ('2', 'compound'), ('3', 'nummod'), ('Start', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[  , 2], [2, 3], [3, Start], [Start,  ]]

>> Trigrams: 
[[  , 2, 3], [2, 3, Start], [3, Start,  ]]

>> Noun Phrases are: 
[  2 3 Start]

>> Named Entities are: 
[('2 3', 'CARDINAL')]


============================ Sentence 115 =============================

Letter or digit Letter 1    Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›   


>> Tokens are: 
[Letter, digit, Letter, 1,    , Prof., Dixita, B, Kagathara,   , #, 2170701, (, CD, ),   , ,   , Unit, 2, –, Lexical, Analyzer, ‹#›,  ] 

>> PoS Tags are: 
[('Letter', 'NOUN'), ('digit', 'VERB'), ('Letter', 'PROPN'), ('1', 'NUM'), ('   ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('  ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'PROPN'), ('Analyzer', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Letter', 'nsubj'), ('digit', 'compound'), ('Letter', 'conj'), ('1', 'compound'), ('   ', 'nummod'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('  ', 'prep'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'dep'), ('  ', 'dobj'), ('Unit', 'appos'), ('2', 'nummod'), ('–', 'punct'), ('Lexical', 'compound'), ('Analyzer', 'ROOT'), ('‹#›', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[Letter, digit], [digit, Letter], [Letter, 1], [1,    ], [   , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,   ], [  , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 2], [2, –], [–, Lexical], [Lexical, Analyzer], [Analyzer, ‹#›], [‹#›,  ]]

>> Trigrams: 
[[Letter, digit, Letter], [digit, Letter, 1], [Letter, 1,    ], [1,    , Prof.], [   , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,   ], [Kagathara,   , #], [  , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 2], [Unit, 2, –], [2, –, Lexical], [–, Lexical, Analyzer], [Lexical, Analyzer, ‹#›], [Analyzer, ‹#›,  ]]

>> Noun Phrases are: 
[Letter, digit Letter, 1    Prof. Dixita B Kagathara, (CD, Unit]

>> Named Entities are: 
[('Dixita', 'PERSON'), ('Kagathara', 'PERSON')]


============================ Sentence 116 =============================

Finite Automata        Finite Automata Finite Automata are recognizers. 


>> Tokens are: 
[Finite, Automata,        , Finite, Automata, Finite, Automata, recognizers, .] 

>> PoS Tags are: 
[('Finite', 'PROPN'), ('Automata', 'PROPN'), ('       ', 'SPACE'), ('Finite', 'PROPN'), ('Automata', 'PROPN'), ('Finite', 'PROPN'), ('Automata', 'PROPN'), ('recognizers', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Finite', 'compound'), ('Automata', 'compound'), ('       ', 'compound'), ('Finite', 'compound'), ('Automata', 'compound'), ('Finite', 'compound'), ('Automata', 'nsubj'), ('recognizers', 'attr'), ('.', 'punct')]

>> Bigrams: 
[[Finite, Automata], [Automata,        ], [       , Finite], [Finite, Automata], [Automata, Finite], [Finite, Automata], [Automata, recognizers], [recognizers, .]]

>> Trigrams: 
[[Finite, Automata,        ], [Automata,        , Finite], [       , Finite, Automata], [Finite, Automata, Finite], [Automata, Finite, Automata], [Finite, Automata, recognizers], [Automata, recognizers, .]]

>> Noun Phrases are: 
[Finite Automata        Finite Automata Finite Automata, recognizers]

>> Named Entities are: 
[]


============================ Sentence 117 =============================

FA simply say “Yes” or “No” about each possible input string. 


>> Tokens are: 
[FA, simply, “, Yes, ”, “, ”, possible, input, string, .] 

>> PoS Tags are: 
[('FA', 'PROPN'), ('simply', 'ADV'), ('“', 'PUNCT'), ('Yes', 'INTJ'), ('”', 'PUNCT'), ('“', 'PUNCT'), ('”', 'PUNCT'), ('possible', 'ADJ'), ('input', 'NOUN'), ('string', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('FA', 'nsubj'), ('simply', 'advmod'), ('“', 'punct'), ('Yes', 'intj'), ('”', 'punct'), ('“', 'punct'), ('”', 'punct'), ('possible', 'amod'), ('input', 'compound'), ('string', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[FA, simply], [simply, “], [“, Yes], [Yes, ”], [”, “], [“, ”], [”, possible], [possible, input], [input, string], [string, .]]

>> Trigrams: 
[[FA, simply, “], [simply, “, Yes], [“, Yes, ”], [Yes, ”, “], [”, “, ”], [“, ”, possible], [”, possible, input], [possible, input, string], [input, string, .]]

>> Noun Phrases are: 
[FA, each possible input string]

>> Named Entities are: 
[]


============================ Sentence 118 =============================

Finite Automata is a mathematical model consist of:  Set of states   Set of input symbol    


>> Tokens are: 
[Finite, Automata, mathematical, model, consist, :,  , Set, states,   , Set, input, symbol,   ] 

>> PoS Tags are: 
[('Finite', 'PROPN'), ('Automata', 'PROPN'), ('mathematical', 'ADJ'), ('model', 'NOUN'), ('consist', 'NOUN'), (':', 'PUNCT'), (' ', 'SPACE'), ('Set', 'NOUN'), ('states', 'NOUN'), ('  ', 'SPACE'), ('Set', 'PROPN'), ('input', 'NOUN'), ('symbol', 'NOUN'), ('  ', 'SPACE')] 

>> Dependency Tags are: 
[('Finite', 'compound'), ('Automata', 'nsubj'), ('mathematical', 'amod'), ('model', 'compound'), ('consist', 'attr'), (':', 'punct'), (' ', 'pobj'), ('Set', 'dep'), ('states', 'pobj'), ('  ', 'nmod'), ('Set', 'npadvmod'), ('input', 'compound'), ('symbol', 'pobj'), ('  ', 'punct')]

>> Bigrams: 
[[Finite, Automata], [Automata, mathematical], [mathematical, model], [model, consist], [consist, :], [:,  ], [ , Set], [Set, states], [states,   ], [  , Set], [Set, input], [input, symbol], [symbol,   ]]

>> Trigrams: 
[[Finite, Automata, mathematical], [Automata, mathematical, model], [mathematical, model, consist], [model, consist, :], [consist, :,  ], [:,  , Set], [ , Set, states], [Set, states,   ], [states,   , Set], [  , Set, input], [Set, input, symbol], [input, symbol,   ]]

>> Noun Phrases are: 
[Finite Automata, a mathematical model consist, states, input symbol]

>> Named Entities are: 
[('Automata', 'ORG')]


============================ Sentence 119 =============================

A transition function move   


>> Tokens are: 
[transition, function,  ] 

>> PoS Tags are: 
[('transition', 'NOUN'), ('function', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('transition', 'compound'), ('function', 'compound'), (' ', 'punct')]

>> Bigrams: 
[[transition, function], [function,  ]]

>> Trigrams: 
[[transition, function,  ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 120 =============================

Initial state   Final states or accepting states      Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Types of finite automata Types of finite automata are:   


>> Tokens are: 
[Initial, state,   , Final, states, accepting, states,      , Prof., Dixita, B, Kagathara,   , #, 2170701, (, CD, ),   , ,   , Unit, 2, –, Lexical, Analyzer, ‹#›,  , Types, finite, automata, Types, finite, automata, :,  ] 

>> PoS Tags are: 
[('Initial', 'ADJ'), ('state', 'NOUN'), ('  ', 'SPACE'), ('Final', 'ADJ'), ('states', 'NOUN'), ('accepting', 'VERB'), ('states', 'NOUN'), ('     ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('  ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'PROPN'), ('Analyzer', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE'), ('Types', 'PROPN'), ('finite', 'ADJ'), ('automata', 'NOUN'), ('Types', 'NOUN'), ('finite', 'ADJ'), ('automata', 'NOUN'), (':', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Initial', 'amod'), ('state', 'compound'), ('  ', 'appos'), ('Final', 'amod'), ('states', 'nsubj'), ('accepting', 'conj'), ('states', 'compound'), ('     ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'dobj'), ('  ', 'prep'), ('#', 'nmod'), ('2170701', 'appos'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'punct'), ('Unit', 'appos'), ('2', 'nummod'), ('–', 'punct'), ('Lexical', 'compound'), ('Analyzer', 'nsubj'), ('‹#›', 'punct'), (' ', 'punct'), ('Types', 'appos'), ('finite', 'amod'), ('automata', 'compound'), ('Types', 'pobj'), ('finite', 'amod'), ('automata', 'pobj'), (':', 'punct'), (' ', 'attr')]

>> Bigrams: 
[[Initial, state], [state,   ], [  , Final], [Final, states], [states, accepting], [accepting, states], [states,      ], [     , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,   ], [  , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 2], [2, –], [–, Lexical], [Lexical, Analyzer], [Analyzer, ‹#›], [‹#›,  ], [ , Types], [Types, finite], [finite, automata], [automata, Types], [Types, finite], [finite, automata], [automata, :], [:,  ]]

>> Trigrams: 
[[Initial, state,   ], [state,   , Final], [  , Final, states], [Final, states, accepting], [states, accepting, states], [accepting, states,      ], [states,      , Prof.], [     , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,   ], [Kagathara,   , #], [  , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 2], [Unit, 2, –], [2, –, Lexical], [–, Lexical, Analyzer], [Lexical, Analyzer, ‹#›], [Analyzer, ‹#›,  ], [‹#›,  , Types], [ , Types, finite], [Types, finite, automata], [finite, automata, Types], [automata, Types, finite], [Types, finite, automata], [finite, automata, :], [automata, :,  ]]

>> Noun Phrases are: 
[Initial state   Final states, states      Prof. Dixita B Kagathara, (CD, Unit, Lexical Analyzer, Types, finite automata Types, finite automata]

>> Named Entities are: 
[('Dixita', 'PERSON'), ('Kagathara', 'PERSON'), ('Types', 'PERSON')]


============================ Sentence 121 =============================

Nondeterministic finite automata (NFA): There are no restrictions on the edges leaving a state. 


>> Tokens are: 
[Nondeterministic, finite,  , automata, (, NFA, ):, restrictions, edges, leaving, state, .] 

>> PoS Tags are: 
[('Nondeterministic', 'ADJ'), ('finite', 'NOUN'), ('\xa0', 'SPACE'), ('automata', 'NOUN'), ('(', 'PUNCT'), ('NFA', 'PROPN'), ('):', 'PUNCT'), ('restrictions', 'NOUN'), ('edges', 'NOUN'), ('leaving', 'VERB'), ('state', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Nondeterministic', 'amod'), ('finite', 'ccomp'), ('\xa0', 'compound'), ('automata', 'dobj'), ('(', 'punct'), ('NFA', 'appos'), ('):', 'punct'), ('restrictions', 'attr'), ('edges', 'pobj'), ('leaving', 'acl'), ('state', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Nondeterministic, finite], [finite,  ], [ , automata], [automata, (], [(, NFA], [NFA, ):], [):, restrictions], [restrictions, edges], [edges, leaving], [leaving, state], [state, .]]

>> Trigrams: 
[[Nondeterministic, finite,  ], [finite,  , automata], [ , automata, (], [automata, (, NFA], [(, NFA, ):], [NFA, ):, restrictions], [):, restrictions, edges], [restrictions, edges, leaving], [edges, leaving, state], [leaving, state, .]]

>> Noun Phrases are: 
[ automata, NFA, no restrictions, the edges, a state]

>> Named Entities are: 
[]


============================ Sentence 122 =============================

There can be several with the same symbol as label and some edges can be labeled with . 


>> Tokens are: 
[symbol, label, edges, labeled, .] 

>> PoS Tags are: 
[('symbol', 'NOUN'), ('label', 'NOUN'), ('edges', 'NOUN'), ('labeled', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('symbol', 'pobj'), ('label', 'pobj'), ('edges', 'nsubjpass'), ('labeled', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[symbol, label], [label, edges], [edges, labeled], [labeled, .]]

>> Trigrams: 
[[symbol, label, edges], [label, edges, labeled], [edges, labeled, .]]

>> Noun Phrases are: 
[the same symbol, label, some edges]

>> Named Entities are: 
[]


============================ Sentence 123 =============================

 1 2 3 4 a b b  a b 1 2 3 4 a b b  a a a b DFA NFA b Deterministic finite automata  


>> Tokens are: 
[ , 1, 2, 3, 4, b, b,  , b, 1, 2, 3, 4, b, b,  , b, DFA, NFA, b, Deterministic, finite, automata,  ] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('1', 'NUM'), ('2', 'NUM'), ('3', 'NUM'), ('4', 'NUM'), ('b', 'NOUN'), ('b', 'X'), (' ', 'SPACE'), ('b', 'NOUN'), ('1', 'NUM'), ('2', 'NUM'), ('3', 'NUM'), ('4', 'NUM'), ('b', 'NOUN'), ('b', 'X'), (' ', 'SPACE'), ('b', 'X'), ('DFA', 'PROPN'), ('NFA', 'PROPN'), ('b', 'NOUN'), ('Deterministic', 'ADJ'), ('finite', 'ADJ'), ('automata', 'NOUN'), ('\xa0', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT'), ('1', 'compound'), ('2', 'nummod'), ('3', 'npadvmod'), ('4', 'appos'), ('b', 'npadvmod'), ('b', 'appos'), (' ', 'appos'), ('b', 'quantmod'), ('1', 'compound'), ('2', 'compound'), ('3', 'compound'), ('4', 'appos'), ('b', 'npadvmod'), ('b', 'appos'), (' ', 'appos'), ('b', 'appos'), ('DFA', 'compound'), ('NFA', 'appos'), ('b', 'prep'), ('Deterministic', 'amod'), ('finite', 'compound'), ('automata', 'compound'), ('\xa0', 'appos')]

>> Bigrams: 
[[ , 1], [1, 2], [2, 3], [3, 4], [4, b], [b, b], [b,  ], [ , b], [b, 1], [1, 2], [2, 3], [3, 4], [4, b], [b, b], [b,  ], [ , b], [b, DFA], [DFA, NFA], [NFA, b], [b, Deterministic], [Deterministic, finite], [finite, automata], [automata,  ]]

>> Trigrams: 
[[ , 1, 2], [1, 2, 3], [2, 3, 4], [3, 4, b], [4, b, b], [b, b,  ], [b,  , b], [ , b, 1], [b, 1, 2], [1, 2, 3], [2, 3, 4], [3, 4, b], [4, b, b], [b, b,  ], [b,  , b], [ , b, DFA], [b, DFA, NFA], [DFA, NFA, b], [NFA, b, Deterministic], [b, Deterministic, finite], [Deterministic, finite, automata], [finite, automata,  ]]

>> Noun Phrases are: 
[DFA NFA]

>> Named Entities are: 
[]


============================ Sentence 124 =============================

(DFA): have for each state exactly one edge leaving out for each symbol. 


>> Tokens are: 
[(, DFA, ):, state, exactly, edge, leaving, symbol, .] 

>> PoS Tags are: 
[('(', 'PUNCT'), ('DFA', 'PROPN'), ('):', 'PUNCT'), ('state', 'NOUN'), ('exactly', 'ADV'), ('edge', 'NOUN'), ('leaving', 'VERB'), ('symbol', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('(', 'punct'), ('DFA', 'ROOT'), ('):', 'punct'), ('state', 'pobj'), ('exactly', 'advmod'), ('edge', 'appos'), ('leaving', 'acl'), ('symbol', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[(, DFA], [DFA, ):], [):, state], [state, exactly], [exactly, edge], [edge, leaving], [leaving, symbol], [symbol, .]]

>> Trigrams: 
[[(, DFA, ):], [DFA, ):, state], [):, state, exactly], [state, exactly, edge], [exactly, edge, leaving], [edge, leaving, symbol], [leaving, symbol, .]]

>> Noun Phrases are: 
[(DFA, each state, exactly one edge, each symbol]

>> Named Entities are: 
[('one', 'CARDINAL')]


============================ Sentence 125 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 126 =============================

DFA NFA    Prof. Dixita B Kagathara  #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Regular expression to NFA using Thompson's rule        Regular expression to NFA using Thompson's rule For  , construct the NFA     For  in , construct the NFA      𝜖 start    a start For regular expression       Ex: ab      start N(s) N(t) 1 2 3 a b     Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Regular expression to NFA using Thompson's rule For regular expression        Ex: (a|b)       start N(s) N(t)     𝜖 𝜖 𝜖 𝜖 1 2 5 3 4 6 a b 𝜖 𝜖 𝜖 𝜖   


>> Tokens are: 
[DFA, NFA,    , Prof., Dixita, B, Kagathara,  , #, 2170701, (, CD, ),   , ,   , Unit, 2, –, Lexical, Analyzer, ‹#›,  , Regular, expression, NFA, Thompson, rule,        , Regular, expression, NFA, Thompson, rule,  , ,, construct, NFA,     ,  , ,, construct, NFA,      , 𝜖, start,    , start, regular, expression,       , Ex, :, ab,      , start, N(s, ), N(t, ), 1, 2, 3, b,     , Prof., Dixita, B, Kagathara,   , #, 2170701, (, CD, ),   , ,   , Unit, 2, –, Lexical, Analyzer, ‹#›,  , Regular, expression, NFA, Thompson, rule, regular, expression,        , Ex, :, (, a|b, ),       , start, N(s, ), N(t, ),     , 𝜖, 𝜖, 𝜖, 𝜖, 1, 2, 5, 3, 4, 6, b, 𝜖, 𝜖, 𝜖, 𝜖,  ] 

>> PoS Tags are: 
[('DFA', 'PROPN'), ('NFA', 'PROPN'), ('   ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), (' ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'PROPN'), ('Analyzer', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE'), ('Regular', 'ADJ'), ('expression', 'NOUN'), ('NFA', 'PROPN'), ('Thompson', 'PROPN'), ('rule', 'NOUN'), ('       ', 'SPACE'), ('Regular', 'ADJ'), ('expression', 'NOUN'), ('NFA', 'PROPN'), ('Thompson', 'PROPN'), ('rule', 'NOUN'), (' ', 'SPACE'), (',', 'PUNCT'), ('construct', 'VERB'), ('NFA', 'PROPN'), ('    ', 'SPACE'), (' ', 'SPACE'), (',', 'PUNCT'), ('construct', 'VERB'), ('NFA', 'PROPN'), ('     ', 'SPACE'), ('𝜖', 'PROPN'), ('start', 'VERB'), ('   ', 'SPACE'), ('start', 'NOUN'), ('regular', 'ADJ'), ('expression', 'NOUN'), ('      ', 'SPACE'), ('Ex', 'NOUN'), (':', 'PUNCT'), ('ab', 'ADP'), ('     ', 'SPACE'), ('start', 'VERB'), ('N(s', 'INTJ'), (')', 'PUNCT'), ('N(t', 'PUNCT'), (')', 'PUNCT'), ('1', 'NUM'), ('2', 'NUM'), ('3', 'NUM'), ('b', 'X'), ('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('  ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'PROPN'), ('Analyzer', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE'), ('Regular', 'ADJ'), ('expression', 'NOUN'), ('NFA', 'PROPN'), ('Thompson', 'PROPN'), ('rule', 'NOUN'), ('regular', 'ADJ'), ('expression', 'NOUN'), ('       ', 'SPACE'), ('Ex', 'NOUN'), (':', 'PUNCT'), ('(', 'PUNCT'), ('a|b', 'NOUN'), (')', 'PUNCT'), ('      ', 'SPACE'), ('start', 'VERB'), ('N(s', 'INTJ'), (')', 'PUNCT'), ('N(t', 'PUNCT'), (')', 'PUNCT'), ('    ', 'SPACE'), ('𝜖', 'NOUN'), ('𝜖', 'NOUN'), ('𝜖', 'NOUN'), ('𝜖', 'ADV'), ('1', 'NUM'), ('2', 'NUM'), ('5', 'NUM'), ('3', 'NUM'), ('4', 'NUM'), ('6', 'NUM'), ('b', 'NOUN'), ('𝜖', 'PROPN'), ('𝜖', 'X'), ('𝜖', 'X'), ('𝜖', 'ADP'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('DFA', 'compound'), ('NFA', 'nmod'), ('   ', 'nummod'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'nsubj'), (' ', 'appos'), ('#', 'nmod'), ('2170701', 'npadvmod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'dobj'), ('Unit', 'appos'), ('2', 'nummod'), ('–', 'punct'), ('Lexical', 'compound'), ('Analyzer', 'nsubj'), ('‹#›', 'punct'), (' ', 'appos'), ('Regular', 'amod'), ('expression', 'appos'), ('NFA', 'pobj'), ('Thompson', 'poss'), ('rule', 'nmod'), ('       ', 'compound'), ('Regular', 'amod'), ('expression', 'dobj'), ('NFA', 'pobj'), ('Thompson', 'poss'), ('rule', 'dobj'), (' ', 'pobj'), (',', 'punct'), ('construct', 'ccomp'), ('NFA', 'dobj'), ('    ', 'dobj'), (' ', 'pobj'), (',', 'punct'), ('construct', 'conj'), ('NFA', 'compound'), ('     ', 'compound'), ('𝜖', 'dobj'), ('start', 'ccomp'), ('   ', 'dobj'), ('start', 'npadvmod'), ('regular', 'amod'), ('expression', 'pobj'), ('      ', 'nsubj'), ('Ex', 'ccomp'), (':', 'punct'), ('ab', 'prep'), ('     ', 'pobj'), ('start', 'ccomp'), ('N(s', 'punct'), (')', 'punct'), ('N(t', 'punct'), (')', 'punct'), ('1', 'compound'), ('2', 'compound'), ('3', 'dobj'), ('b', 'prep'), ('    ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'dobj'), ('  ', 'prep'), ('#', 'nmod'), ('2170701', 'npadvmod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'conj'), ('  ', 'punct'), ('Unit', 'appos'), ('2', 'nummod'), ('–', 'punct'), ('Lexical', 'compound'), ('Analyzer', 'nsubj'), ('‹#›', 'punct'), (' ', 'appos'), ('Regular', 'amod'), ('expression', 'appos'), ('NFA', 'pobj'), ('Thompson', 'poss'), ('rule', 'dobj'), ('regular', 'amod'), ('expression', 'pobj'), ('       ', 'appos'), ('Ex', 'appos'), (':', 'punct'), ('(', 'punct'), ('a|b', 'appos'), (')', 'punct'), ('      ', 'appos'), ('start', 'ROOT'), ('N(s', 'intj'), (')', 'punct'), ('N(t', 'punct'), (')', 'punct'), ('    ', 'nsubj'), ('𝜖', 'dep'), ('𝜖', 'dep'), ('𝜖', 'dep'), ('𝜖', 'quantmod'), ('1', 'quantmod'), ('2', 'compound'), ('5', 'nummod'), ('3', 'appos'), ('4', 'npadvmod'), ('6', 'dep'), ('b', 'npadvmod'), ('𝜖', 'dep'), ('𝜖', 'dep'), ('𝜖', 'dep'), ('𝜖', 'prep'), (' ', 'pobj')]

>> Bigrams: 
[[DFA, NFA], [NFA,    ], [   , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,  ], [ , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 2], [2, –], [–, Lexical], [Lexical, Analyzer], [Analyzer, ‹#›], [‹#›,  ], [ , Regular], [Regular, expression], [expression, NFA], [NFA, Thompson], [Thompson, rule], [rule,        ], [       , Regular], [Regular, expression], [expression, NFA], [NFA, Thompson], [Thompson, rule], [rule,  ], [ , ,], [,, construct], [construct, NFA], [NFA,     ], [    ,  ], [ , ,], [,, construct], [construct, NFA], [NFA,      ], [     , 𝜖], [𝜖, start], [start,    ], [   , start], [start, regular], [regular, expression], [expression,       ], [      , Ex], [Ex, :], [:, ab], [ab,      ], [     , start], [start, N(s], [N(s, )], [), N(t], [N(t, )], [), 1], [1, 2], [2, 3], [3, b], [b,     ], [    , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,   ], [  , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 2], [2, –], [–, Lexical], [Lexical, Analyzer], [Analyzer, ‹#›], [‹#›,  ], [ , Regular], [Regular, expression], [expression, NFA], [NFA, Thompson], [Thompson, rule], [rule, regular], [regular, expression], [expression,        ], [       , Ex], [Ex, :], [:, (], [(, a|b], [a|b, )], [),       ], [      , start], [start, N(s], [N(s, )], [), N(t], [N(t, )], [),     ], [    , 𝜖], [𝜖, 𝜖], [𝜖, 𝜖], [𝜖, 𝜖], [𝜖, 1], [1, 2], [2, 5], [5, 3], [3, 4], [4, 6], [6, b], [b, 𝜖], [𝜖, 𝜖], [𝜖, 𝜖], [𝜖, 𝜖], [𝜖,  ]]

>> Trigrams: 
[[DFA, NFA,    ], [NFA,    , Prof.], [   , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,  ], [Kagathara,  , #], [ , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 2], [Unit, 2, –], [2, –, Lexical], [–, Lexical, Analyzer], [Lexical, Analyzer, ‹#›], [Analyzer, ‹#›,  ], [‹#›,  , Regular], [ , Regular, expression], [Regular, expression, NFA], [expression, NFA, Thompson], [NFA, Thompson, rule], [Thompson, rule,        ], [rule,        , Regular], [       , Regular, expression], [Regular, expression, NFA], [expression, NFA, Thompson], [NFA, Thompson, rule], [Thompson, rule,  ], [rule,  , ,], [ , ,, construct], [,, construct, NFA], [construct, NFA,     ], [NFA,     ,  ], [    ,  , ,], [ , ,, construct], [,, construct, NFA], [construct, NFA,      ], [NFA,      , 𝜖], [     , 𝜖, start], [𝜖, start,    ], [start,    , start], [   , start, regular], [start, regular, expression], [regular, expression,       ], [expression,       , Ex], [      , Ex, :], [Ex, :, ab], [:, ab,      ], [ab,      , start], [     , start, N(s], [start, N(s, )], [N(s, ), N(t], [), N(t, )], [N(t, ), 1], [), 1, 2], [1, 2, 3], [2, 3, b], [3, b,     ], [b,     , Prof.], [    , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,   ], [Kagathara,   , #], [  , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 2], [Unit, 2, –], [2, –, Lexical], [–, Lexical, Analyzer], [Lexical, Analyzer, ‹#›], [Analyzer, ‹#›,  ], [‹#›,  , Regular], [ , Regular, expression], [Regular, expression, NFA], [expression, NFA, Thompson], [NFA, Thompson, rule], [Thompson, rule, regular], [rule, regular, expression], [regular, expression,        ], [expression,        , Ex], [       , Ex, :], [Ex, :, (], [:, (, a|b], [(, a|b, )], [a|b, ),       ], [),       , start], [      , start, N(s], [start, N(s, )], [N(s, ), N(t], [), N(t, )], [N(t, ),     ], [),     , 𝜖], [    , 𝜖, 𝜖], [𝜖, 𝜖, 𝜖], [𝜖, 𝜖, 𝜖], [𝜖, 𝜖, 1], [𝜖, 1, 2], [1, 2, 5], [2, 5, 3], [5, 3, 4], [3, 4, 6], [4, 6, b], [6, b, 𝜖], [b, 𝜖, 𝜖], [𝜖, 𝜖, 𝜖], [𝜖, 𝜖, 𝜖], [𝜖, 𝜖,  ]]

>> Noun Phrases are: 
[DFA NFA    Prof. Dixita B Kagathara, (CD, Unit, Lexical Analyzer, Regular expression, NFA, Thompson's rule        Regular expression, NFA, Thompson's rule, the NFA, the NFA      𝜖, regular expression,     Prof. Dixita B Kagathara, (CD, Unit, Lexical Analyzer, Regular expression, NFA, Thompson's rule, regular expression, Ex, a|b]

>> Named Entities are: 
[('Dixita', 'PERSON'), ('Kagathara', 'PERSON'), ('NFA', 'ORG'), ('Thompson', 'ORG'), ('NFA', 'ORG'), ('Thompson', 'ORG'), ('1 2 3', 'CARDINAL'), ('Dixita', 'PERSON'), ('Kagathara', 'PERSON'), ('NFA', 'ORG'), ('Thompson', 'ORG'), ('N(s', 'ORG')]


============================ Sentence 127 =============================

For regular expression *        


>> Tokens are: 
[regular, expression, *,       ] 

>> PoS Tags are: 
[('regular', 'ADJ'), ('expression', 'NOUN'), ('*', 'PUNCT'), ('      ', 'SPACE')] 

>> Dependency Tags are: 
[('regular', 'amod'), ('expression', 'pobj'), ('*', 'punct'), ('      ', 'pobj')]

>> Bigrams: 
[[regular, expression], [expression, *], [*,       ]]

>> Trigrams: 
[[regular, expression, *], [expression, *,       ]]

>> Noun Phrases are: 
[regular expression]

>> Named Entities are: 
[]


============================ Sentence 128 =============================

Ex: a*     start N(s)   𝜖 𝜖 𝜖 𝜖 1   𝜖 𝜖 𝜖 𝜖 2 3     Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Regular expression to NFA using Thompson's rule a*b      b*ab   1  𝜖 𝜖 𝜖 2 3     1  𝜖 𝜖 𝜖 𝜖 2 3   5       Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›   


>> Tokens are: 
[Ex, :, *,     , start, N(s, ),   , 𝜖, 𝜖, 𝜖, 𝜖, 1,   , 𝜖, 𝜖, 𝜖, 𝜖, 2, 3,     , Prof., Dixita, B, Kagathara,   , #, 2170701, (, CD, ),   , ,   , Unit, 2, –, Lexical, Analyzer, ‹#›,  , Regular, expression, NFA, Thompson, rule, a*b,      , b*ab,   , 1,  , 𝜖, 𝜖, 𝜖, 2, 3,     , 1,  , 𝜖, 𝜖, 𝜖, 𝜖, 2, 3,   , 5,       , Prof., Dixita, B, Kagathara,   , #, 2170701, (, CD, ),   , ,   , Unit, 2, –, Lexical, Analyzer, ‹#›,  ] 

>> PoS Tags are: 
[('Ex', 'NOUN'), (':', 'PUNCT'), ('*', 'PUNCT'), ('    ', 'SPACE'), ('start', 'VERB'), ('N(s', 'INTJ'), (')', 'PUNCT'), ('  ', 'SPACE'), ('𝜖', 'ADP'), ('𝜖', 'X'), ('𝜖', 'X'), ('𝜖', 'ADV'), ('1', 'NUM'), ('  ', 'SPACE'), ('𝜖', 'ADP'), ('𝜖', 'X'), ('𝜖', 'X'), ('𝜖', 'VERB'), ('2', 'NUM'), ('3', 'NUM'), ('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('  ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'PROPN'), ('Analyzer', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE'), ('Regular', 'ADJ'), ('expression', 'NOUN'), ('NFA', 'PROPN'), ('Thompson', 'PROPN'), ('rule', 'NOUN'), ('a*b', 'PROPN'), ('     ', 'SPACE'), ('b*ab', 'NOUN'), ('  ', 'SPACE'), ('1', 'NUM'), (' ', 'SPACE'), ('𝜖', 'ADP'), ('𝜖', 'NOUN'), ('𝜖', 'VERB'), ('2', 'NUM'), ('3', 'NUM'), ('    ', 'SPACE'), ('1', 'NUM'), (' ', 'SPACE'), ('𝜖', 'ADP'), ('𝜖', 'NOUN'), ('𝜖', 'X'), ('𝜖', 'VERB'), ('2', 'NUM'), ('3', 'NUM'), ('  ', 'SPACE'), ('5', 'NUM'), ('      ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('  ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'PROPN'), ('Analyzer', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Ex', 'nsubj'), (':', 'punct'), ('*', 'punct'), ('    ', 'nsubj'), ('start', 'appos'), ('N(s', 'punct'), (')', 'punct'), ('  ', 'dep'), ('𝜖', 'prep'), ('𝜖', 'advcl'), ('𝜖', 'nmod'), ('𝜖', 'advmod'), ('1', 'nummod'), ('  ', 'npadvmod'), ('𝜖', 'prep'), ('𝜖', 'advcl'), ('𝜖', 'nmod'), ('𝜖', 'quantmod'), ('2', 'compound'), ('3', 'nummod'), ('    ', 'quantmod'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'nsubj'), ('  ', 'appos'), ('#', 'nmod'), ('2170701', 'npadvmod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'dobj'), ('Unit', 'appos'), ('2', 'nummod'), ('–', 'punct'), ('Lexical', 'compound'), ('Analyzer', 'nsubj'), ('‹#›', 'punct'), (' ', 'appos'), ('Regular', 'amod'), ('expression', 'appos'), ('NFA', 'pobj'), ('Thompson', 'poss'), ('rule', 'dobj'), ('a*b', 'compound'), ('     ', 'appos'), ('b*ab', 'appos'), ('  ', 'appos'), ('1', 'nummod'), (' ', 'appos'), ('𝜖', 'dep'), ('𝜖', 'advmod'), ('𝜖', 'conj'), ('2', 'compound'), ('3', 'nummod'), ('    ', 'pobj'), ('1', 'nummod'), (' ', 'nsubj'), ('𝜖', 'advcl'), ('𝜖', 'advmod'), ('𝜖', 'advmod'), ('𝜖', 'quantmod'), ('2', 'compound'), ('3', 'nummod'), ('  ', 'npadvmod'), ('5', 'nummod'), ('      ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'dobj'), ('  ', 'prep'), ('#', 'nmod'), ('2170701', 'npadvmod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'advcl'), ('  ', 'punct'), ('Unit', 'appos'), ('2', 'nummod'), ('–', 'punct'), ('Lexical', 'compound'), ('Analyzer', 'ROOT'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[Ex, :], [:, *], [*,     ], [    , start], [start, N(s], [N(s, )], [),   ], [  , 𝜖], [𝜖, 𝜖], [𝜖, 𝜖], [𝜖, 𝜖], [𝜖, 1], [1,   ], [  , 𝜖], [𝜖, 𝜖], [𝜖, 𝜖], [𝜖, 𝜖], [𝜖, 2], [2, 3], [3,     ], [    , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,   ], [  , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 2], [2, –], [–, Lexical], [Lexical, Analyzer], [Analyzer, ‹#›], [‹#›,  ], [ , Regular], [Regular, expression], [expression, NFA], [NFA, Thompson], [Thompson, rule], [rule, a*b], [a*b,      ], [     , b*ab], [b*ab,   ], [  , 1], [1,  ], [ , 𝜖], [𝜖, 𝜖], [𝜖, 𝜖], [𝜖, 2], [2, 3], [3,     ], [    , 1], [1,  ], [ , 𝜖], [𝜖, 𝜖], [𝜖, 𝜖], [𝜖, 𝜖], [𝜖, 2], [2, 3], [3,   ], [  , 5], [5,       ], [      , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,   ], [  , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 2], [2, –], [–, Lexical], [Lexical, Analyzer], [Analyzer, ‹#›], [‹#›,  ]]

>> Trigrams: 
[[Ex, :, *], [:, *,     ], [*,     , start], [    , start, N(s], [start, N(s, )], [N(s, ),   ], [),   , 𝜖], [  , 𝜖, 𝜖], [𝜖, 𝜖, 𝜖], [𝜖, 𝜖, 𝜖], [𝜖, 𝜖, 1], [𝜖, 1,   ], [1,   , 𝜖], [  , 𝜖, 𝜖], [𝜖, 𝜖, 𝜖], [𝜖, 𝜖, 𝜖], [𝜖, 𝜖, 2], [𝜖, 2, 3], [2, 3,     ], [3,     , Prof.], [    , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,   ], [Kagathara,   , #], [  , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 2], [Unit, 2, –], [2, –, Lexical], [–, Lexical, Analyzer], [Lexical, Analyzer, ‹#›], [Analyzer, ‹#›,  ], [‹#›,  , Regular], [ , Regular, expression], [Regular, expression, NFA], [expression, NFA, Thompson], [NFA, Thompson, rule], [Thompson, rule, a*b], [rule, a*b,      ], [a*b,      , b*ab], [     , b*ab,   ], [b*ab,   , 1], [  , 1,  ], [1,  , 𝜖], [ , 𝜖, 𝜖], [𝜖, 𝜖, 𝜖], [𝜖, 𝜖, 2], [𝜖, 2, 3], [2, 3,     ], [3,     , 1], [    , 1,  ], [1,  , 𝜖], [ , 𝜖, 𝜖], [𝜖, 𝜖, 𝜖], [𝜖, 𝜖, 𝜖], [𝜖, 𝜖, 2], [𝜖, 2, 3], [2, 3,   ], [3,   , 5], [  , 5,       ], [5,       , Prof.], [      , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,   ], [Kagathara,   , #], [  , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 2], [Unit, 2, –], [2, –, Lexical], [–, Lexical, Analyzer], [Lexical, Analyzer, ‹#›], [Analyzer, ‹#›,  ]]

>> Noun Phrases are: 
[Ex, (CD, Unit, Lexical Analyzer, Regular expression, NFA, Thompson's rule, b*ab, 𝜖 2 3   5       Prof. Dixita B Kagathara, (CD, Unit]

>> Named Entities are: 
[('N(s', 'ORG'), ('1', 'CARDINAL'), ('2 3', 'CARDINAL'), ('Dixita', 'PERSON'), ('Kagathara', 'PERSON'), ('NFA', 'ORG'), ('Thompson', 'ORG'), ('a*b      ', 'PERSON'), ('1', 'CARDINAL'), ('2 3', 'CARDINAL'), ('Dixita', 'PERSON'), ('Kagathara', 'PERSON')]


============================ Sentence 129 =============================

Exercise Convert following regular expression to NFA: abba bb(a) 


>> Tokens are: 
[Exercise, Convert, following, regular, expression, NFA, :, abba, bb(a, )] 

>> PoS Tags are: 
[('Exercise', 'PROPN'), ('Convert', 'PROPN'), ('following', 'VERB'), ('regular', 'ADJ'), ('expression', 'NOUN'), ('NFA', 'PROPN'), (':', 'PUNCT'), ('abba', 'NOUN'), ('bb(a', 'PUNCT'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('Exercise', 'compound'), ('Convert', 'ROOT'), ('following', 'prep'), ('regular', 'amod'), ('expression', 'pobj'), ('NFA', 'pobj'), (':', 'punct'), ('abba', 'prep'), ('bb(a', 'punct'), (')', 'punct')]

>> Bigrams: 
[[Exercise, Convert], [Convert, following], [following, regular], [regular, expression], [expression, NFA], [NFA, :], [:, abba], [abba, bb(a], [bb(a, )]]

>> Trigrams: 
[[Exercise, Convert, following], [Convert, following, regular], [following, regular, expression], [regular, expression, NFA], [expression, NFA, :], [NFA, :, abba], [:, abba, bb(a], [abba, bb(a, )]]

>> Noun Phrases are: 
[Exercise Convert, regular expression, NFA]

>> Named Entities are: 
[('Exercise Convert', 'PERSON')]


============================ Sentence 130 =============================

* (a|b) 


>> Tokens are: 
[*, (, a|b, )] 

>> PoS Tags are: 
[('*', 'PUNCT'), ('(', 'PUNCT'), ('a|b', 'X'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('*', 'punct'), ('(', 'punct'), ('a|b', 'ROOT'), (')', 'punct')]

>> Bigrams: 
[[*, (], [(, a|b], [a|b, )]]

>> Trigrams: 
[[*, (, a|b], [(, a|b, )]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 131 =============================

* a* | b* a(a)*ab  aa*+ bb* (a+b)*abb 10(0+1)*1 (a+b)*a(a+b) (0+1)*010(0+1)* (010+00)*(10) 


>> Tokens are: 
[*, *, |, b, *, a(a)*ab,  , aa*+, bb, *, (, a+b)*abb, 10(0, +, 1)*1, (, a+b)*a(a+b, ), (, 0, +, 1)*010(0, +, 1, ), *, (, 010, +, 00)*(10, )] 

>> PoS Tags are: 
[('*', 'PUNCT'), ('*', 'NOUN'), ('|', 'NOUN'), ('b', 'NOUN'), ('*', 'PUNCT'), ('a(a)*ab', 'ADV'), (' ', 'SPACE'), ('aa*+', 'NOUN'), ('bb', 'ADP'), ('*', 'PROPN'), ('(', 'PUNCT'), ('a+b)*abb', 'NUM'), ('10(0', 'NOUN'), ('+', 'CCONJ'), ('1)*1', 'NUM'), ('(', 'PUNCT'), ('a+b)*a(a+b', 'PROPN'), (')', 'PUNCT'), ('(', 'PUNCT'), ('0', 'NUM'), ('+', 'CCONJ'), ('1)*010(0', 'NUM'), ('+', 'SYM'), ('1', 'NUM'), (')', 'PUNCT'), ('*', 'PUNCT'), ('(', 'PUNCT'), ('010', 'NUM'), ('+', 'NUM'), ('00)*(10', 'NUM'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('*', 'punct'), ('*', 'punct'), ('|', 'compound'), ('b', 'meta'), ('*', 'punct'), ('a(a)*ab', 'appos'), (' ', 'compound'), ('aa*+', 'compound'), ('bb', 'advmod'), ('*', 'punct'), ('(', 'punct'), ('a+b)*abb', 'compound'), ('10(0', 'appos'), ('+', 'cc'), ('1)*1', 'nummod'), ('(', 'punct'), ('a+b)*a(a+b', 'appos'), (')', 'punct'), ('(', 'punct'), ('0', 'appos'), ('+', 'cc'), ('1)*010(0', 'appos'), ('+', 'punct'), ('1', 'appos'), (')', 'punct'), ('*', 'punct'), ('(', 'punct'), ('010', 'ROOT'), ('+', 'prep'), ('00)*(10', 'punct'), (')', 'punct')]

>> Bigrams: 
[[*, *], [*, |], [|, b], [b, *], [*, a(a)*ab], [a(a)*ab,  ], [ , aa*+], [aa*+, bb], [bb, *], [*, (], [(, a+b)*abb], [a+b)*abb, 10(0], [10(0, +], [+, 1)*1], [1)*1, (], [(, a+b)*a(a+b], [a+b)*a(a+b, )], [), (], [(, 0], [0, +], [+, 1)*010(0], [1)*010(0, +], [+, 1], [1, )], [), *], [*, (], [(, 010], [010, +], [+, 00)*(10], [00)*(10, )]]

>> Trigrams: 
[[*, *, |], [*, |, b], [|, b, *], [b, *, a(a)*ab], [*, a(a)*ab,  ], [a(a)*ab,  , aa*+], [ , aa*+, bb], [aa*+, bb, *], [bb, *, (], [*, (, a+b)*abb], [(, a+b)*abb, 10(0], [a+b)*abb, 10(0, +], [10(0, +, 1)*1], [+, 1)*1, (], [1)*1, (, a+b)*a(a+b], [(, a+b)*a(a+b, )], [a+b)*a(a+b, ), (], [), (, 0], [(, 0, +], [0, +, 1)*010(0], [+, 1)*010(0, +], [1)*010(0, +, 1], [+, 1, )], [1, ), *], [), *, (], [*, (, 010], [(, 010, +], [010, +, 00)*(10], [+, 00)*(10, )]]

>> Noun Phrases are: 
[a+b)*abb 10(0, a+b)*a(a+b]

>> Named Entities are: 
[('010', 'CARDINAL')]


============================ Sentence 132 =============================

* 100(1)*00(0+1)*     Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Conversion from NFA to DFA using subset construction method        Subset construction algorithm 


>> Tokens are: 
[*, 100(1)*00(0, +, 1, ), *,     , Prof., Dixita, B, Kagathara,   , #, 2170701, (, CD, ),   , ,   , Unit, 2, –, Lexical, Analyzer, ‹#›,  , Conversion, NFA, DFA, subset, construction, method,        , Subset, construction, algorithm] 

>> PoS Tags are: 
[('*', 'PUNCT'), ('100(1)*00(0', 'NOUN'), ('+', 'SYM'), ('1', 'NUM'), (')', 'PUNCT'), ('*', 'PUNCT'), ('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('  ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'PROPN'), ('Analyzer', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE'), ('Conversion', 'PROPN'), ('NFA', 'PROPN'), ('DFA', 'VERB'), ('subset', 'NOUN'), ('construction', 'NOUN'), ('method', 'NOUN'), ('       ', 'SPACE'), ('Subset', 'PROPN'), ('construction', 'NOUN'), ('algorithm', 'NOUN')] 

>> Dependency Tags are: 
[('*', 'punct'), ('100(1)*00(0', 'nsubj'), ('+', 'appos'), ('1', 'nummod'), (')', 'punct'), ('*', 'punct'), ('    ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('  ', 'prep'), ('#', 'nmod'), ('2170701', 'appos'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'dep'), ('  ', 'punct'), ('Unit', 'appos'), ('2', 'nummod'), ('–', 'punct'), ('Lexical', 'compound'), ('Analyzer', 'ROOT'), ('‹#›', 'punct'), (' ', 'compound'), ('Conversion', 'appos'), ('NFA', 'pobj'), ('DFA', 'pobj'), ('subset', 'compound'), ('construction', 'compound'), ('method', 'compound'), ('       ', 'compound'), ('Subset', 'compound'), ('construction', 'compound'), ('algorithm', 'punct')]

>> Bigrams: 
[[*, 100(1)*00(0], [100(1)*00(0, +], [+, 1], [1, )], [), *], [*,     ], [    , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,   ], [  , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 2], [2, –], [–, Lexical], [Lexical, Analyzer], [Analyzer, ‹#›], [‹#›,  ], [ , Conversion], [Conversion, NFA], [NFA, DFA], [DFA, subset], [subset, construction], [construction, method], [method,        ], [       , Subset], [Subset, construction], [construction, algorithm]]

>> Trigrams: 
[[*, 100(1)*00(0, +], [100(1)*00(0, +, 1], [+, 1, )], [1, ), *], [), *,     ], [*,     , Prof.], [    , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,   ], [Kagathara,   , #], [  , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 2], [Unit, 2, –], [2, –, Lexical], [–, Lexical, Analyzer], [Lexical, Analyzer, ‹#›], [Analyzer, ‹#›,  ], [‹#›,  , Conversion], [ , Conversion, NFA], [Conversion, NFA, DFA], [NFA, DFA, subset], [DFA, subset, construction], [subset, construction, method], [construction, method,        ], [method,        , Subset], [       , Subset, construction], [Subset, construction, algorithm]]

>> Noun Phrases are: 
[* 100(1)*00(0, *     Prof. Dixita B Kagathara, (CD, Unit,  Conversion, NFA]

>> Named Entities are: 
[('Dixita', 'PERSON'), ('Kagathara', 'PERSON'), ('NFA', 'ORG'), ('DFA', 'ORG')]


============================ Sentence 133 =============================

Input: An NFA . 


>> Tokens are: 
[Input, :, NFA, .] 

>> PoS Tags are: 
[('Input', 'NOUN'), (':', 'PUNCT'), ('NFA', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Input', 'ROOT'), (':', 'punct'), ('NFA', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[Input, :], [:, NFA], [NFA, .]]

>> Trigrams: 
[[Input, :, NFA], [:, NFA, .]]

>> Noun Phrases are: 
[Input, An NFA]

>> Named Entities are: 
[('Input', 'ORG')]


============================ Sentence 134 =============================

Output: A DFA   


>> Tokens are: 
[Output, :, DFA,  ] 

>> PoS Tags are: 
[('Output', 'NOUN'), (':', 'PUNCT'), ('DFA', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Output', 'ROOT'), (':', 'punct'), ('DFA', 'appos'), (' ', 'prep')]

>> Bigrams: 
[[Output, :], [:, DFA], [DFA,  ]]

>> Trigrams: 
[[Output, :, DFA], [:, DFA,  ]]

>> Noun Phrases are: 
[Output, A DFA]

>> Named Entities are: 
[('DFA', 'ORG')]


============================ Sentence 135 =============================

D accepting the same language. 


>> Tokens are: 
[D, accepting, language, .] 

>> PoS Tags are: 
[('D', 'NOUN'), ('accepting', 'VERB'), ('language', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('D', 'ROOT'), ('accepting', 'acl'), ('language', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[D, accepting], [accepting, language], [language, .]]

>> Trigrams: 
[[D, accepting, language], [accepting, language, .]]

>> Noun Phrases are: 
[D, the same language]

>> Named Entities are: 
[]


============================ Sentence 136 =============================

Method: Algorithm construct a transition table  for D. 


>> Tokens are: 
[Method, :, Algorithm, construct, transition, table,  , D.] 

>> PoS Tags are: 
[('Method', 'NOUN'), (':', 'PUNCT'), ('Algorithm', 'PROPN'), ('construct', 'VERB'), ('transition', 'NOUN'), ('table', 'NOUN'), (' ', 'SPACE'), ('D.', 'PROPN')] 

>> Dependency Tags are: 
[('Method', 'ROOT'), (':', 'punct'), ('Algorithm', 'nsubj'), ('construct', 'acl'), ('transition', 'compound'), ('table', 'dobj'), (' ', 'appos'), ('D.', 'pobj')]

>> Bigrams: 
[[Method, :], [:, Algorithm], [Algorithm, construct], [construct, transition], [transition, table], [table,  ], [ , D.]]

>> Trigrams: 
[[Method, :, Algorithm], [:, Algorithm, construct], [Algorithm, construct, transition], [construct, transition, table], [transition, table,  ], [table,  , D.]]

>> Noun Phrases are: 
[Method, Algorithm, a transition table, D.]

>> Named Entities are: 
[('D.', 'NORP')]


============================ Sentence 137 =============================

We use the following operation: 


>> Tokens are: 
[use, following, operation, :] 

>> PoS Tags are: 
[('use', 'VERB'), ('following', 'VERB'), ('operation', 'NOUN'), (':', 'PUNCT')] 

>> Dependency Tags are: 
[('use', 'ROOT'), ('following', 'amod'), ('operation', 'dobj'), (':', 'punct')]

>> Bigrams: 
[[use, following], [following, operation], [operation, :]]

>> Trigrams: 
[[use, following, operation], [following, operation, :]]

>> Noun Phrases are: 
[We, the following operation]

>> Named Entities are: 
[]


============================ Sentence 138 =============================

 	OPERATION 


>> Tokens are: 
[ 	, OPERATION] 

>> PoS Tags are: 
[(' \t', 'SPACE'), ('OPERATION', 'PROPN')] 

>> Dependency Tags are: 
[(' \t', 'compound'), ('OPERATION', 'ROOT')]

>> Bigrams: 
[[ 	, OPERATION]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[ 	OPERATION]

>> Named Entities are: 
[]


============================ Sentence 139 =============================

	DESCRIPTION  		Set of NFA states reachable from NFA state  on – transition alone.  		 


>> Tokens are: 
[	, DESCRIPTION,  		, Set, NFA, states, reachable, NFA, state,  , –, transition, .,  		] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('DESCRIPTION', 'NOUN'), (' \t\t', 'SPACE'), ('Set', 'PROPN'), ('NFA', 'PROPN'), ('states', 'NOUN'), ('reachable', 'ADJ'), ('NFA', 'PROPN'), ('state', 'NOUN'), (' ', 'SPACE'), ('–', 'PUNCT'), ('transition', 'NOUN'), ('.', 'PUNCT'), (' \t\t', 'SPACE')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('DESCRIPTION', 'ROOT'), (' \t\t', 'nummod'), ('Set', 'amod'), ('NFA', 'compound'), ('states', 'pobj'), ('reachable', 'amod'), ('NFA', 'compound'), ('state', 'pobj'), (' ', 'appos'), ('–', 'punct'), ('transition', 'pobj'), ('.', 'punct'), (' \t\t', 'punct')]

>> Bigrams: 
[[	, DESCRIPTION], [DESCRIPTION,  		], [ 		, Set], [Set, NFA], [NFA, states], [states, reachable], [reachable, NFA], [NFA, state], [state,  ], [ , –], [–, transition], [transition, .], [.,  		]]

>> Trigrams: 
[[	, DESCRIPTION,  		], [DESCRIPTION,  		, Set], [ 		, Set, NFA], [Set, NFA, states], [NFA, states, reachable], [states, reachable, NFA], [reachable, NFA, state], [NFA, state,  ], [state,  , –], [ , –, transition], [–, transition, .], [transition, .,  		]]

>> Noun Phrases are: 
[	DESCRIPTION, NFA states, NFA state, transition]

>> Named Entities are: 
[('NFA', 'ORG')]


============================ Sentence 140 =============================

Set of NFA states reachable from some NFA state  in  on – transition alone. 


>> Tokens are: 
[Set, NFA, states, reachable, NFA, state,  ,  , –, transition, .] 

>> PoS Tags are: 
[('Set', 'ADJ'), ('NFA', 'PROPN'), ('states', 'NOUN'), ('reachable', 'ADJ'), ('NFA', 'PROPN'), ('state', 'NOUN'), (' ', 'SPACE'), (' ', 'SPACE'), ('–', 'PUNCT'), ('transition', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Set', 'nsubj'), ('NFA', 'compound'), ('states', 'pobj'), ('reachable', 'ROOT'), ('NFA', 'compound'), ('state', 'pobj'), (' ', 'appos'), (' ', 'pobj'), ('–', 'punct'), ('transition', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Set, NFA], [NFA, states], [states, reachable], [reachable, NFA], [NFA, state], [state,  ], [ ,  ], [ , –], [–, transition], [transition, .]]

>> Trigrams: 
[[Set, NFA, states], [NFA, states, reachable], [states, reachable, NFA], [reachable, NFA, state], [NFA, state,  ], [state,  ,  ], [ ,  , –], [ , –, transition], [–, transition, .]]

>> Noun Phrases are: 
[NFA states, some NFA state, transition]

>> Named Entities are: 
[('NFA', 'ORG')]


============================ Sentence 141 =============================

 		 


>> Tokens are: 
[ 		] 

>> PoS Tags are: 
[(' \t\t', 'SPACE')] 

>> Dependency Tags are: 
[(' \t\t', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 142 =============================

Set of NFA states to which there is a transition on input symbol  from some NFA state  in . 


>> Tokens are: 
[Set, NFA, states, transition, input, symbol,  , NFA, state,  , .] 

>> PoS Tags are: 
[('Set', 'ADJ'), ('NFA', 'PROPN'), ('states', 'NOUN'), ('transition', 'NOUN'), ('input', 'NOUN'), ('symbol', 'NOUN'), (' ', 'SPACE'), ('NFA', 'PROPN'), ('state', 'NOUN'), (' ', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Set', 'nsubj'), ('NFA', 'pobj'), ('states', 'ROOT'), ('transition', 'attr'), ('input', 'compound'), ('symbol', 'compound'), (' ', 'pobj'), ('NFA', 'compound'), ('state', 'pobj'), (' ', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[Set, NFA], [NFA, states], [states, transition], [transition, input], [input, symbol], [symbol,  ], [ , NFA], [NFA, state], [state,  ], [ , .]]

>> Trigrams: 
[[Set, NFA, states], [NFA, states, transition], [states, transition, input], [transition, input, symbol], [input, symbol,  ], [symbol,  , NFA], [ , NFA, state], [NFA, state,  ], [state,  , .]]

>> Noun Phrases are: 
[NFA, a transition, some NFA state]

>> Named Entities are: 
[('NFA', 'ORG')]


============================ Sentence 143 =============================

    Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›   


>> Tokens are: 
[    , Prof., Dixita, B, Kagathara,   , #, 2170701, (, CD, ),   , ,   , Unit, 2, –, Lexical, Analyzer, ‹#›,  ] 

>> PoS Tags are: 
[('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('  ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'PROPN'), ('Analyzer', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('    ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'nsubj'), ('  ', 'appos'), ('#', 'nmod'), ('2170701', 'npadvmod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'dep'), ('  ', 'dobj'), ('Unit', 'appos'), ('2', 'nummod'), ('–', 'punct'), ('Lexical', 'compound'), ('Analyzer', 'ROOT'), ('‹#›', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[    , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,   ], [  , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 2], [2, –], [–, Lexical], [Lexical, Analyzer], [Analyzer, ‹#›], [‹#›,  ]]

>> Trigrams: 
[[    , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,   ], [Kagathara,   , #], [  , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 2], [Unit, 2, –], [2, –, Lexical], [–, Lexical, Analyzer], [Lexical, Analyzer, ‹#›], [Analyzer, ‹#›,  ]]

>> Noun Phrases are: 
[    Prof. Dixita B Kagathara, (CD, Unit]

>> Named Entities are: 
[('Dixita', 'PERSON'), ('Kagathara', 'PERSON')]


============================ Sentence 144 =============================

Subset construction algorithm initially  be the only state in and it is unmarked; while there is unmarked states T in   do begin 	mark ; 		for each input symbol    do begin 			 			if    is not in  then 				add    as unmarked state to  			 		end 	end     Prof. Dixita B Kagathara 


>> Tokens are: 
[Subset, construction, algorithm, initially,  , state, unmarked, ;, unmarked, states, T,   , begin, 	, mark, ;, 		, input, symbol,    , begin, 			 			,    ,  , 				, add,    , unmarked, state,  			 		, end, 	, end,     , Prof., Dixita, B, Kagathara] 

>> PoS Tags are: 
[('Subset', 'NOUN'), ('construction', 'NOUN'), ('algorithm', 'NOUN'), ('initially', 'ADV'), (' ', 'SPACE'), ('state', 'NOUN'), ('unmarked', 'ADJ'), (';', 'PUNCT'), ('unmarked', 'ADJ'), ('states', 'NOUN'), ('T', 'PROPN'), ('  ', 'SPACE'), ('begin', 'VERB'), ('\t', 'SPACE'), ('mark', 'NOUN'), (';', 'PUNCT'), ('\t\t', 'SPACE'), ('input', 'NOUN'), ('symbol', 'NOUN'), ('   ', 'SPACE'), ('begin', 'VERB'), ('\t\t\t \t\t\t', 'SPACE'), ('   ', 'SPACE'), (' ', 'SPACE'), ('\t\t\t\t', 'SPACE'), ('add', 'VERB'), ('   ', 'SPACE'), ('unmarked', 'ADJ'), ('state', 'NOUN'), (' \t\t\t \t\t', 'SPACE'), ('end', 'NOUN'), ('\t', 'SPACE'), ('end', 'VERB'), ('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN')] 

>> Dependency Tags are: 
[('Subset', 'compound'), ('construction', 'nsubj'), ('algorithm', 'advmod'), ('initially', 'advmod'), (' ', 'nsubj'), ('state', 'attr'), ('unmarked', 'acomp'), (';', 'punct'), ('unmarked', 'amod'), ('states', 'attr'), ('T', 'attr'), ('  ', 'pobj'), ('begin', 'dep'), ('\t', 'compound'), ('mark', 'dobj'), (';', 'punct'), ('\t\t', 'nsubj'), ('input', 'compound'), ('symbol', 'pobj'), ('   ', 'nummod'), ('begin', 'ROOT'), ('\t\t\t \t\t\t', 'dobj'), ('   ', 'nsubj'), (' ', 'pobj'), ('\t\t\t\t', 'nsubj'), ('add', 'conj'), ('   ', 'dobj'), ('unmarked', 'amod'), ('state', 'pobj'), (' \t\t\t \t\t', 'nummod'), ('end', 'pobj'), ('\t', 'pobj'), ('end', 'conj'), ('    ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'dobj')]

>> Bigrams: 
[[Subset, construction], [construction, algorithm], [algorithm, initially], [initially,  ], [ , state], [state, unmarked], [unmarked, ;], [;, unmarked], [unmarked, states], [states, T], [T,   ], [  , begin], [begin, 	], [	, mark], [mark, ;], [;, 		], [		, input], [input, symbol], [symbol,    ], [   , begin], [begin, 			 			], [			 			,    ], [   ,  ], [ , 				], [				, add], [add,    ], [   , unmarked], [unmarked, state], [state,  			 		], [ 			 		, end], [end, 	], [	, end], [end,     ], [    , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara]]

>> Trigrams: 
[[Subset, construction, algorithm], [construction, algorithm, initially], [algorithm, initially,  ], [initially,  , state], [ , state, unmarked], [state, unmarked, ;], [unmarked, ;, unmarked], [;, unmarked, states], [unmarked, states, T], [states, T,   ], [T,   , begin], [  , begin, 	], [begin, 	, mark], [	, mark, ;], [mark, ;, 		], [;, 		, input], [		, input, symbol], [input, symbol,    ], [symbol,    , begin], [   , begin, 			 			], [begin, 			 			,    ], [			 			,    ,  ], [   ,  , 				], [ , 				, add], [				, add,    ], [add,    , unmarked], [   , unmarked, state], [unmarked, state,  			 		], [state,  			 		, end], [ 			 		, end, 	], [end, 	, end], [	, end,     ], [end,     , Prof.], [    , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara]]

>> Noun Phrases are: 
[Subset construction, the only state, it, unmarked states, T, 	mark, each input symbol, unmarked state,  			 		end,     Prof. Dixita B Kagathara]

>> Named Entities are: 
[('Subset', 'ORG'), ('Dixita', 'PERSON'), ('Kagathara', 'PERSON')]


============================ Sentence 145 =============================

  #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Conversion from NFA to DFA  1 (a|b) 


>> Tokens are: 
[  , #, 2170701, (, CD, ),   , ,   , Unit, 2, –, Lexical, Analyzer, ‹#›,  , Conversion, NFA, DFA,  , 1, (, a|b, )] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'PROPN'), ('Analyzer', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE'), ('Conversion', 'PROPN'), ('NFA', 'PROPN'), ('DFA', 'PROPN'), (' ', 'SPACE'), ('1', 'NUM'), ('(', 'PUNCT'), ('a|b', 'X'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'dep'), ('#', 'nmod'), ('2170701', 'npadvmod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('2', 'nummod'), ('–', 'punct'), ('Lexical', 'compound'), ('Analyzer', 'npadvmod'), ('‹#›', 'punct'), (' ', 'compound'), ('Conversion', 'appos'), ('NFA', 'pobj'), ('DFA', 'advcl'), (' ', 'dobj'), ('1', 'npadvmod'), ('(', 'punct'), ('a|b', 'parataxis'), (')', 'punct')]

>> Bigrams: 
[[  , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 2], [2, –], [–, Lexical], [Lexical, Analyzer], [Analyzer, ‹#›], [‹#›,  ], [ , Conversion], [Conversion, NFA], [NFA, DFA], [DFA,  ], [ , 1], [1, (], [(, a|b], [a|b, )]]

>> Trigrams: 
[[  , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 2], [Unit, 2, –], [2, –, Lexical], [–, Lexical, Analyzer], [Lexical, Analyzer, ‹#›], [Analyzer, ‹#›,  ], [‹#›,  , Conversion], [ , Conversion, NFA], [Conversion, NFA, DFA], [NFA, DFA,  ], [DFA,  , 1], [ , 1, (], [1, (, a|b], [(, a|b, )]]

>> Noun Phrases are: 
[(CD, Unit,  Conversion, NFA]

>> Named Entities are: 
[('1', 'CARDINAL')]


============================ Sentence 146 =============================

* abb 2 5 3 4 6 7 8 9 0 10 𝜖 a b 𝜖 a b b  𝜖 𝜖 𝜖 𝜖 𝜖 𝜖    Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Conversion from NFA to DFA 1 2 5 3 4 6 7 8 9 0 𝜖 a b 𝜖 a b b 𝜖 𝜖 𝜖 𝜖 𝜖 𝜖 10   {0, 1, 7, 2, 4} ---- 


>> Tokens are: 
[*, abb, 2, 5, 3, 4, 6, 7, 8, 9, 0, 10, 𝜖, b, 𝜖, b, b,  , 𝜖, 𝜖, 𝜖, 𝜖, 𝜖, 𝜖,    , Prof., Dixita, B, Kagathara,   , #, 2170701, (, CD, ),   , ,   , Unit, 2, –, Lexical, Analyzer, ‹#›,  , Conversion, NFA, DFA, 1, 2, 5, 3, 4, 6, 7, 8, 9, 0, 𝜖, b, 𝜖, b, b, 𝜖, 𝜖, 𝜖, 𝜖, 𝜖, 𝜖, 10,   , {, 0, ,, 1, ,, 7, ,, 2, ,, 4, }, ----] 

>> PoS Tags are: 
[('*', 'PUNCT'), ('abb', 'NOUN'), ('2', 'NUM'), ('5', 'NUM'), ('3', 'NUM'), ('4', 'NUM'), ('6', 'NUM'), ('7', 'NUM'), ('8', 'NUM'), ('9', 'NUM'), ('0', 'NUM'), ('10', 'NUM'), ('𝜖', 'NOUN'), ('b', 'NOUN'), ('𝜖', 'NOUN'), ('b', 'NOUN'), ('b', 'X'), (' ', 'SPACE'), ('𝜖', 'PROPN'), ('𝜖', 'NOUN'), ('𝜖', 'X'), ('𝜖', 'X'), ('𝜖', 'X'), ('𝜖', 'ADV'), ('   ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('  ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'PROPN'), ('Analyzer', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE'), ('Conversion', 'PROPN'), ('NFA', 'PROPN'), ('DFA', 'PROPN'), ('1', 'NUM'), ('2', 'NUM'), ('5', 'NUM'), ('3', 'NUM'), ('4', 'NUM'), ('6', 'NUM'), ('7', 'NUM'), ('8', 'NUM'), ('9', 'NUM'), ('0', 'NUM'), ('𝜖', 'NOUN'), ('b', 'NOUN'), ('𝜖', 'NOUN'), ('b', 'NOUN'), ('b', 'NOUN'), ('𝜖', 'PROPN'), ('𝜖', 'X'), ('𝜖', 'X'), ('𝜖', 'X'), ('𝜖', 'X'), ('𝜖', 'ADV'), ('10', 'NUM'), ('  ', 'SPACE'), ('{', 'PUNCT'), ('0', 'NUM'), (',', 'PUNCT'), ('1', 'NUM'), (',', 'PUNCT'), ('7', 'NUM'), (',', 'PUNCT'), ('2', 'NUM'), (',', 'PUNCT'), ('4', 'NUM'), ('}', 'PUNCT'), ('----', 'PUNCT')] 

>> Dependency Tags are: 
[('*', 'punct'), ('abb', 'quantmod'), ('2', 'appos'), ('5', 'appos'), ('3', 'appos'), ('4', 'appos'), ('6', 'appos'), ('7', 'appos'), ('8', 'appos'), ('9', 'appos'), ('0', 'compound'), ('10', 'nummod'), ('𝜖', 'quantmod'), ('b', 'compound'), ('𝜖', 'nsubj'), ('b', 'compound'), ('b', 'punct'), (' ', 'nsubj'), ('𝜖', 'prep'), ('𝜖', 'advmod'), ('𝜖', 'prep'), ('𝜖', 'nmod'), ('𝜖', 'nmod'), ('𝜖', 'nmod'), ('   ', 'nummod'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('  ', 'prep'), ('#', 'nmod'), ('2170701', 'npadvmod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'punct'), ('Unit', 'appos'), ('2', 'nummod'), ('–', 'punct'), ('Lexical', 'compound'), ('Analyzer', 'npadvmod'), ('‹#›', 'punct'), (' ', 'compound'), ('Conversion', 'appos'), ('NFA', 'pobj'), ('DFA', 'pobj'), ('1', 'nummod'), ('2', 'compound'), ('5', 'nummod'), ('3', 'nummod'), ('4', 'nummod'), ('6', 'nummod'), ('7', 'nummod'), ('8', 'nummod'), ('9', 'nummod'), ('0', 'nummod'), ('𝜖', 'dep'), ('b', 'compound'), ('𝜖', 'dep'), ('b', 'compound'), ('b', 'attr'), ('𝜖', 'pobj'), ('𝜖', 'dep'), ('𝜖', 'dep'), ('𝜖', 'dep'), ('𝜖', 'dep'), ('𝜖', 'dep'), ('10', 'nummod'), ('  ', 'npadvmod'), ('{', 'punct'), ('0', 'appos'), (',', 'punct'), ('1', 'appos'), (',', 'punct'), ('7', 'appos'), (',', 'punct'), ('2', 'appos'), (',', 'punct'), ('4', 'appos'), ('}', 'punct'), ('----', 'punct')]

>> Bigrams: 
[[*, abb], [abb, 2], [2, 5], [5, 3], [3, 4], [4, 6], [6, 7], [7, 8], [8, 9], [9, 0], [0, 10], [10, 𝜖], [𝜖, b], [b, 𝜖], [𝜖, b], [b, b], [b,  ], [ , 𝜖], [𝜖, 𝜖], [𝜖, 𝜖], [𝜖, 𝜖], [𝜖, 𝜖], [𝜖, 𝜖], [𝜖,    ], [   , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,   ], [  , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 2], [2, –], [–, Lexical], [Lexical, Analyzer], [Analyzer, ‹#›], [‹#›,  ], [ , Conversion], [Conversion, NFA], [NFA, DFA], [DFA, 1], [1, 2], [2, 5], [5, 3], [3, 4], [4, 6], [6, 7], [7, 8], [8, 9], [9, 0], [0, 𝜖], [𝜖, b], [b, 𝜖], [𝜖, b], [b, b], [b, 𝜖], [𝜖, 𝜖], [𝜖, 𝜖], [𝜖, 𝜖], [𝜖, 𝜖], [𝜖, 𝜖], [𝜖, 10], [10,   ], [  , {], [{, 0], [0, ,], [,, 1], [1, ,], [,, 7], [7, ,], [,, 2], [2, ,], [,, 4], [4, }], [}, ----]]

>> Trigrams: 
[[*, abb, 2], [abb, 2, 5], [2, 5, 3], [5, 3, 4], [3, 4, 6], [4, 6, 7], [6, 7, 8], [7, 8, 9], [8, 9, 0], [9, 0, 10], [0, 10, 𝜖], [10, 𝜖, b], [𝜖, b, 𝜖], [b, 𝜖, b], [𝜖, b, b], [b, b,  ], [b,  , 𝜖], [ , 𝜖, 𝜖], [𝜖, 𝜖, 𝜖], [𝜖, 𝜖, 𝜖], [𝜖, 𝜖, 𝜖], [𝜖, 𝜖, 𝜖], [𝜖, 𝜖,    ], [𝜖,    , Prof.], [   , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,   ], [Kagathara,   , #], [  , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 2], [Unit, 2, –], [2, –, Lexical], [–, Lexical, Analyzer], [Lexical, Analyzer, ‹#›], [Analyzer, ‹#›,  ], [‹#›,  , Conversion], [ , Conversion, NFA], [Conversion, NFA, DFA], [NFA, DFA, 1], [DFA, 1, 2], [1, 2, 5], [2, 5, 3], [5, 3, 4], [3, 4, 6], [4, 6, 7], [6, 7, 8], [7, 8, 9], [8, 9, 0], [9, 0, 𝜖], [0, 𝜖, b], [𝜖, b, 𝜖], [b, 𝜖, b], [𝜖, b, b], [b, b, 𝜖], [b, 𝜖, 𝜖], [𝜖, 𝜖, 𝜖], [𝜖, 𝜖, 𝜖], [𝜖, 𝜖, 𝜖], [𝜖, 𝜖, 𝜖], [𝜖, 𝜖, 10], [𝜖, 10,   ], [10,   , {], [  , {, 0], [{, 0, ,], [0, ,, 1], [,, 1, ,], [1, ,, 7], [,, 7, ,], [7, ,, 2], [,, 2, ,], [2, ,, 4], [,, 4, }], [4, }, ----]]

>> Noun Phrases are: 
[* abb 2 5 3 4 6 7 8 9 0 10 𝜖 a b 𝜖, 𝜖 𝜖 𝜖    Prof. Dixita B Kagathara, (CD, Unit,  Conversion, NFA, DFA, a b b, 𝜖]

>> Named Entities are: 
[('2 5 3 4', 'DATE'), ('Dixita', 'PERSON'), ('Kagathara', 'PERSON'), ('10', 'CARDINAL'), ('0', 'DATE'), ('1', 'DATE'), ('7', 'DATE'), ('2', 'DATE'), ('4', 'CARDINAL')]


============================ Sentence 147 =============================

A 𝜖- Closure(0)=    =  {0,1,2,4,7}    Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Conversion from NFA to DFA 1 2 5 3 4 6 7 8 9 0 𝜖 a b 𝜖 a b b 𝜖 𝜖 𝜖 𝜖 𝜖 𝜖 A= {0, 1, 2, 4, 7} Move(A,a) = {3,8} 𝜖- Closure(Move(A,a)) = {3, 6, 7, 1, 2, 4, 8} ---- 


>> Tokens are: 
[𝜖-, Closure(0)=,    , =,  , {, 0,1,2,4,7, },    , Prof., Dixita, B, Kagathara,   , #, 2170701, (, CD, ),   , ,   , Unit, 2, –, Lexical, Analyzer, ‹#›,  , Conversion, NFA, DFA, 1, 2, 5, 3, 4, 6, 7, 8, 9, 0, 𝜖, b, 𝜖, b, b, 𝜖, 𝜖, 𝜖, 𝜖, 𝜖, 𝜖, A=, {, 0, ,, 1, ,, 2, ,, 4, ,, 7, }, Move(A, ,, ), =, {, 3,8, }, 𝜖-, Closure(Move(A, ,, ), ), =, {, 3, ,, 6, ,, 7, ,, 1, ,, 2, ,, 4, ,, 8, }, ----] 

>> PoS Tags are: 
[('𝜖-', 'X'), ('Closure(0)=', 'ADJ'), ('   ', 'SPACE'), ('=', 'SYM'), (' ', 'SPACE'), ('{', 'PUNCT'), ('0,1,2,4,7', 'NOUN'), ('}', 'PUNCT'), ('   ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('  ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'PROPN'), ('Analyzer', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE'), ('Conversion', 'PROPN'), ('NFA', 'PROPN'), ('DFA', 'PROPN'), ('1', 'NUM'), ('2', 'NUM'), ('5', 'NUM'), ('3', 'NUM'), ('4', 'NUM'), ('6', 'NUM'), ('7', 'NUM'), ('8', 'NUM'), ('9', 'NUM'), ('0', 'NUM'), ('𝜖', 'NOUN'), ('b', 'NOUN'), ('𝜖', 'NOUN'), ('b', 'NOUN'), ('b', 'NOUN'), ('𝜖', 'PROPN'), ('𝜖', 'X'), ('𝜖', 'X'), ('𝜖', 'X'), ('𝜖', 'X'), ('𝜖', 'X'), ('A=', 'PROPN'), ('{', 'PUNCT'), ('0', 'NUM'), (',', 'PUNCT'), ('1', 'NUM'), (',', 'PUNCT'), ('2', 'NUM'), (',', 'PUNCT'), ('4', 'NUM'), (',', 'PUNCT'), ('7', 'NUM'), ('}', 'PUNCT'), ('Move(A', 'PROPN'), (',', 'PUNCT'), (')', 'PUNCT'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('3,8', 'NUM'), ('}', 'PUNCT'), ('𝜖-', 'PROPN'), ('Closure(Move(A', 'NUM'), (',', 'PUNCT'), (')', 'PUNCT'), (')', 'PUNCT'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('3', 'NUM'), (',', 'PUNCT'), ('6', 'NUM'), (',', 'PUNCT'), ('7', 'NUM'), (',', 'PUNCT'), ('1', 'NUM'), (',', 'PUNCT'), ('2', 'NUM'), (',', 'PUNCT'), ('4', 'NUM'), (',', 'PUNCT'), ('8', 'NUM'), ('}', 'PUNCT'), ('----', 'PUNCT')] 

>> Dependency Tags are: 
[('𝜖-', 'nmod'), ('Closure(0)=', 'amod'), ('   ', 'pobj'), ('=', 'punct'), (' ', 'nsubj'), ('{', 'punct'), ('0,1,2,4,7', 'quantmod'), ('}', 'punct'), ('   ', 'appos'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('  ', 'prep'), ('#', 'nmod'), ('2170701', 'appos'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('2', 'nummod'), ('–', 'punct'), ('Lexical', 'compound'), ('Analyzer', 'npadvmod'), ('‹#›', 'punct'), (' ', 'compound'), ('Conversion', 'appos'), ('NFA', 'pobj'), ('DFA', 'pobj'), ('1', 'nummod'), ('2', 'compound'), ('5', 'nummod'), ('3', 'nummod'), ('4', 'nummod'), ('6', 'nummod'), ('7', 'nummod'), ('8', 'nummod'), ('9', 'nummod'), ('0', 'nummod'), ('𝜖', 'dep'), ('b', 'compound'), ('𝜖', 'dep'), ('b', 'compound'), ('b', 'dep'), ('𝜖', 'pobj'), ('𝜖', 'dep'), ('𝜖', 'dep'), ('𝜖', 'dep'), ('𝜖', 'dep'), ('𝜖', 'det'), ('A=', 'dep'), ('{', 'punct'), ('0', 'appos'), (',', 'punct'), ('1', 'appos'), (',', 'punct'), ('2', 'appos'), (',', 'punct'), ('4', 'appos'), (',', 'punct'), ('7', 'appos'), ('}', 'punct'), ('Move(A', 'appos'), (',', 'punct'), (')', 'punct'), ('=', 'appos'), ('{', 'punct'), ('3,8', 'appos'), ('}', 'punct'), ('𝜖-', 'compound'), ('Closure(Move(A', 'appos'), (',', 'punct'), (')', 'punct'), (')', 'punct'), ('=', 'appos'), ('{', 'punct'), ('3', 'appos'), (',', 'punct'), ('6', 'appos'), (',', 'punct'), ('7', 'appos'), (',', 'punct'), ('1', 'appos'), (',', 'punct'), ('2', 'appos'), (',', 'punct'), ('4', 'appos'), (',', 'punct'), ('8', 'appos'), ('}', 'punct'), ('----', 'punct')]

>> Bigrams: 
[[𝜖-, Closure(0)=], [Closure(0)=,    ], [   , =], [=,  ], [ , {], [{, 0,1,2,4,7], [0,1,2,4,7, }], [},    ], [   , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,   ], [  , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 2], [2, –], [–, Lexical], [Lexical, Analyzer], [Analyzer, ‹#›], [‹#›,  ], [ , Conversion], [Conversion, NFA], [NFA, DFA], [DFA, 1], [1, 2], [2, 5], [5, 3], [3, 4], [4, 6], [6, 7], [7, 8], [8, 9], [9, 0], [0, 𝜖], [𝜖, b], [b, 𝜖], [𝜖, b], [b, b], [b, 𝜖], [𝜖, 𝜖], [𝜖, 𝜖], [𝜖, 𝜖], [𝜖, 𝜖], [𝜖, 𝜖], [𝜖, A=], [A=, {], [{, 0], [0, ,], [,, 1], [1, ,], [,, 2], [2, ,], [,, 4], [4, ,], [,, 7], [7, }], [}, Move(A], [Move(A, ,], [,, )], [), =], [=, {], [{, 3,8], [3,8, }], [}, 𝜖-], [𝜖-, Closure(Move(A], [Closure(Move(A, ,], [,, )], [), )], [), =], [=, {], [{, 3], [3, ,], [,, 6], [6, ,], [,, 7], [7, ,], [,, 1], [1, ,], [,, 2], [2, ,], [,, 4], [4, ,], [,, 8], [8, }], [}, ----]]

>> Trigrams: 
[[𝜖-, Closure(0)=,    ], [Closure(0)=,    , =], [   , =,  ], [=,  , {], [ , {, 0,1,2,4,7], [{, 0,1,2,4,7, }], [0,1,2,4,7, },    ], [},    , Prof.], [   , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,   ], [Kagathara,   , #], [  , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 2], [Unit, 2, –], [2, –, Lexical], [–, Lexical, Analyzer], [Lexical, Analyzer, ‹#›], [Analyzer, ‹#›,  ], [‹#›,  , Conversion], [ , Conversion, NFA], [Conversion, NFA, DFA], [NFA, DFA, 1], [DFA, 1, 2], [1, 2, 5], [2, 5, 3], [5, 3, 4], [3, 4, 6], [4, 6, 7], [6, 7, 8], [7, 8, 9], [8, 9, 0], [9, 0, 𝜖], [0, 𝜖, b], [𝜖, b, 𝜖], [b, 𝜖, b], [𝜖, b, b], [b, b, 𝜖], [b, 𝜖, 𝜖], [𝜖, 𝜖, 𝜖], [𝜖, 𝜖, 𝜖], [𝜖, 𝜖, 𝜖], [𝜖, 𝜖, 𝜖], [𝜖, 𝜖, A=], [𝜖, A=, {], [A=, {, 0], [{, 0, ,], [0, ,, 1], [,, 1, ,], [1, ,, 2], [,, 2, ,], [2, ,, 4], [,, 4, ,], [4, ,, 7], [,, 7, }], [7, }, Move(A], [}, Move(A, ,], [Move(A, ,, )], [,, ), =], [), =, {], [=, {, 3,8], [{, 3,8, }], [3,8, }, 𝜖-], [}, 𝜖-, Closure(Move(A], [𝜖-, Closure(Move(A, ,], [Closure(Move(A, ,, )], [,, ), )], [), ), =], [), =, {], [=, {, 3], [{, 3, ,], [3, ,, 6], [,, 6, ,], [6, ,, 7], [,, 7, ,], [7, ,, 1], [,, 1, ,], [1, ,, 2], [,, 2, ,], [2, ,, 4], [,, 4, ,], [4, ,, 8], [,, 8, }], [8, }, ----]]

>> Noun Phrases are: 
[Prof. Dixita B Kagathara, (CD, Unit,  Conversion, NFA, DFA, 𝜖, Move(A]

>> Named Entities are: 
[('0,1,2,4,7', 'CARDINAL'), ('Dixita', 'PERSON'), ('Kagathara', 'PERSON'), ('0', 'DATE'), ('1', 'CARDINAL'), ('2', 'DATE'), ('4', 'DATE'), ('7', 'CARDINAL'), ('3,8', 'CARDINAL'), ('Closure(Move(A', 'ORG'), ('3', 'CARDINAL'), ('6', 'DATE'), ('7', 'DATE'), ('1', 'DATE'), ('2', 'DATE'), ('4', 'DATE'), ('8', 'CARDINAL')]


============================ Sentence 148 =============================

B    = {1,2,3,4,6,7,8}       10  	States 


>> Tokens are: 
[B,    , =, {, 1,2,3,4,6,7,8, },       , 10,  	, States] 

>> PoS Tags are: 
[('B', 'NOUN'), ('   ', 'SPACE'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('1,2,3,4,6,7,8', 'NUM'), ('}', 'PUNCT'), ('      ', 'SPACE'), ('10', 'NUM'), (' \t', 'SPACE'), ('States', 'NOUN')] 

>> Dependency Tags are: 
[('B', 'ROOT'), ('   ', 'appos'), ('=', 'punct'), ('{', 'punct'), ('1,2,3,4,6,7,8', 'dep'), ('}', 'punct'), ('      ', 'nmod'), ('10', 'nummod'), (' \t', 'compound'), ('States', 'appos')]

>> Bigrams: 
[[B,    ], [   , =], [=, {], [{, 1,2,3,4,6,7,8], [1,2,3,4,6,7,8, }], [},       ], [      , 10], [10,  	], [ 	, States]]

>> Trigrams: 
[[B,    , =], [   , =, {], [=, {, 1,2,3,4,6,7,8], [{, 1,2,3,4,6,7,8, }], [1,2,3,4,6,7,8, },       ], [},       , 10], [      , 10,  	], [10,  	, States]]

>> Noun Phrases are: 
[B, {1,2,3,4,6,7,8}       10  	States]

>> Named Entities are: 
[]


============================ Sentence 149 =============================

	a	b  	A = {0,1,2,4,7}	B	  	B = {1,2,3,4,6,7,8}		      Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Conversion from NFA to DFA  1 2 5 3 4 6 7 8 0 𝜖 a b 𝜖 a b b 𝜖 𝜖 𝜖 𝜖 𝜖 


>> Tokens are: 
[	, 	, b,  	, =, {, 0,1,2,4,7, }, 	, B, 	  	, B, =, {, 1,2,3,4,6,7,8, }, 		      , Prof., Dixita, B, Kagathara,   , #, 2170701, (, CD, ),   , ,   , Unit, 2, –, Lexical, Analyzer, ‹#›,  , Conversion, NFA, DFA,  , 1, 2, 5, 3, 4, 6, 7, 8, 0, 𝜖, b, 𝜖, b, b, 𝜖, 𝜖, 𝜖, 𝜖, 𝜖] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('\t', 'SPACE'), ('b', 'X'), (' \t', 'SPACE'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('0,1,2,4,7', 'NOUN'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('B', 'PROPN'), ('\t  \t', 'SPACE'), ('B', 'PROPN'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('1,2,3,4,6,7,8', 'NUM'), ('}', 'PUNCT'), ('\t\t      ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('  ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'PROPN'), ('Analyzer', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE'), ('Conversion', 'PROPN'), ('NFA', 'PROPN'), ('DFA', 'PROPN'), (' ', 'SPACE'), ('1', 'NUM'), ('2', 'NUM'), ('5', 'NUM'), ('3', 'NUM'), ('4', 'NUM'), ('6', 'NUM'), ('7', 'NUM'), ('8', 'NUM'), ('0', 'NUM'), ('𝜖', 'NOUN'), ('b', 'NOUN'), ('𝜖', 'NOUN'), ('b', 'NOUN'), ('b', 'NOUN'), ('𝜖', 'PROPN'), ('𝜖', 'X'), ('𝜖', 'X'), ('𝜖', 'X'), ('𝜖', 'X')] 

>> Dependency Tags are: 
[('\t', 'nsubj'), ('\t', 'appos'), ('b', 'punct'), (' \t', 'compound'), ('=', 'punct'), ('{', 'punct'), ('0,1,2,4,7', 'nmod'), ('}', 'punct'), ('\t', 'compound'), ('B', 'compound'), ('\t  \t', 'compound'), ('B', 'appos'), ('=', 'punct'), ('{', 'punct'), ('1,2,3,4,6,7,8', 'dep'), ('}', 'punct'), ('\t\t      ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('  ', 'appos'), ('#', 'nmod'), ('2170701', 'appos'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('2', 'nummod'), ('–', 'punct'), ('Lexical', 'compound'), ('Analyzer', 'npadvmod'), ('‹#›', 'punct'), (' ', 'compound'), ('Conversion', 'appos'), ('NFA', 'pobj'), ('DFA', 'advcl'), (' ', 'dobj'), ('1', 'compound'), ('2', 'compound'), ('5', 'appos'), ('3', 'nummod'), ('4', 'nummod'), ('6', 'nummod'), ('7', 'nummod'), ('8', 'nummod'), ('0', 'nummod'), ('𝜖', 'dobj'), ('b', 'compound'), ('𝜖', 'dep'), ('b', 'compound'), ('b', 'dep'), ('𝜖', 'pobj'), ('𝜖', 'dep'), ('𝜖', 'dep'), ('𝜖', 'dep'), ('𝜖', 'dep')]

>> Bigrams: 
[[	, 	], [	, b], [b,  	], [ 	, =], [=, {], [{, 0,1,2,4,7], [0,1,2,4,7, }], [}, 	], [	, B], [B, 	  	], [	  	, B], [B, =], [=, {], [{, 1,2,3,4,6,7,8], [1,2,3,4,6,7,8, }], [}, 		      ], [		      , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,   ], [  , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 2], [2, –], [–, Lexical], [Lexical, Analyzer], [Analyzer, ‹#›], [‹#›,  ], [ , Conversion], [Conversion, NFA], [NFA, DFA], [DFA,  ], [ , 1], [1, 2], [2, 5], [5, 3], [3, 4], [4, 6], [6, 7], [7, 8], [8, 0], [0, 𝜖], [𝜖, b], [b, 𝜖], [𝜖, b], [b, b], [b, 𝜖], [𝜖, 𝜖], [𝜖, 𝜖], [𝜖, 𝜖], [𝜖, 𝜖]]

>> Trigrams: 
[[	, 	, b], [	, b,  	], [b,  	, =], [ 	, =, {], [=, {, 0,1,2,4,7], [{, 0,1,2,4,7, }], [0,1,2,4,7, }, 	], [}, 	, B], [	, B, 	  	], [B, 	  	, B], [	  	, B, =], [B, =, {], [=, {, 1,2,3,4,6,7,8], [{, 1,2,3,4,6,7,8, }], [1,2,3,4,6,7,8, }, 		      ], [}, 		      , Prof.], [		      , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,   ], [Kagathara,   , #], [  , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 2], [Unit, 2, –], [2, –, Lexical], [–, Lexical, Analyzer], [Lexical, Analyzer, ‹#›], [Analyzer, ‹#›,  ], [‹#›,  , Conversion], [ , Conversion, NFA], [Conversion, NFA, DFA], [NFA, DFA,  ], [DFA,  , 1], [ , 1, 2], [1, 2, 5], [2, 5, 3], [5, 3, 4], [3, 4, 6], [4, 6, 7], [6, 7, 8], [7, 8, 0], [8, 0, 𝜖], [0, 𝜖, b], [𝜖, b, 𝜖], [b, 𝜖, b], [𝜖, b, b], [b, b, 𝜖], [b, 𝜖, 𝜖], [𝜖, 𝜖, 𝜖], [𝜖, 𝜖, 𝜖], [𝜖, 𝜖, 𝜖]]

>> Noun Phrases are: 
[ 	A = {0,1,2,4,7}	B	  	B, 1,2,3,4,6,7,8}		      Prof. Dixita B Kagathara, (CD, Unit,  Conversion, NFA, 𝜖, 𝜖]

>> Named Entities are: 
[('0,1,2,4,7', 'DATE'), ('Dixita', 'PERSON'), ('Kagathara', 'PERSON'), ('1 2 5', 'DATE')]


============================ Sentence 150 =============================

𝜖 A= {0, 1, 2, 4, 7}  Move(A,b) =  {5} 𝜖- Closure(Move(A,b)) =  {5, 6, 7, 1, 2, 4} ---- C    = {1,2,4,5,6,7}      10  9 	States	a	b  	A = {0,1,2,4,7}	B	C  	B = {1,2,3,4,6,7,8}		  	C = {1,2,4,5,6,7}		      Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Conversion from NFA to DFA 1 2 5 3 4 6 7 8 0 𝜖 a b 𝜖 a b 𝜖 𝜖 𝜖 𝜖 𝜖 𝜖 B = {1, 2, 3, 4, 6, 7, 8} Move(B,a) = {3,8} 𝜖- 


>> Tokens are: 
[𝜖, A=, {, 0, ,, 1, ,, 2, ,, 4, ,, 7, },  , Move(A, ,, b, ), =,  , {, 5, }, 𝜖-, Closure(Move(A, ,, b, ), ), =,  , {, 5, ,, 6, ,, 7, ,, 1, ,, 2, ,, 4, }, ----, C,    , =, {, 1,2,4,5,6,7, },      , 10,  , 9, 	, States, 	, 	, b,  	, =, {, 0,1,2,4,7, }, 	, B, 	, C,  	, B, =, {, 1,2,3,4,6,7,8, }, 		  	, C, =, {, 1,2,4,5,6,7, }, 		      , Prof., Dixita, B, Kagathara,   , #, 2170701, (, CD, ),   , ,   , Unit, 2, –, Lexical, Analyzer, ‹#›,  , Conversion, NFA, DFA, 1, 2, 5, 3, 4, 6, 7, 8, 0, 𝜖, b, 𝜖, b, 𝜖, 𝜖, 𝜖, 𝜖, 𝜖, 𝜖, B, =, {, 1, ,, 2, ,, 3, ,, 4, ,, 6, ,, 7, ,, 8, }, Move(B, ,, ), =, {, 3,8, }, 𝜖-] 

>> PoS Tags are: 
[('𝜖', 'X'), ('A=', 'PROPN'), ('{', 'PUNCT'), ('0', 'NUM'), (',', 'PUNCT'), ('1', 'NUM'), (',', 'PUNCT'), ('2', 'NUM'), (',', 'PUNCT'), ('4', 'NUM'), (',', 'PUNCT'), ('7', 'NUM'), ('}', 'PUNCT'), (' ', 'SPACE'), ('Move(A', 'PROPN'), (',', 'PUNCT'), ('b', 'X'), (')', 'PUNCT'), ('=', 'X'), (' ', 'SPACE'), ('{', 'PUNCT'), ('5', 'NUM'), ('}', 'PUNCT'), ('𝜖-', 'PROPN'), ('Closure(Move(A', 'NUM'), (',', 'PUNCT'), ('b', 'X'), (')', 'PUNCT'), (')', 'PUNCT'), ('=', 'PUNCT'), (' ', 'SPACE'), ('{', 'PUNCT'), ('5', 'NUM'), (',', 'PUNCT'), ('6', 'NUM'), (',', 'PUNCT'), ('7', 'NUM'), (',', 'PUNCT'), ('1', 'NUM'), (',', 'PUNCT'), ('2', 'NUM'), (',', 'PUNCT'), ('4', 'NUM'), ('}', 'PUNCT'), ('----', 'PUNCT'), ('C', 'NOUN'), ('   ', 'SPACE'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('1,2,4,5,6,7', 'NUM'), ('}', 'PUNCT'), ('     ', 'SPACE'), ('10', 'NUM'), (' ', 'SPACE'), ('9', 'NUM'), ('\t', 'SPACE'), ('States', 'PROPN'), ('\t', 'SPACE'), ('\t', 'SPACE'), ('b', 'X'), (' \t', 'SPACE'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('0,1,2,4,7', 'NOUN'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('B', 'PROPN'), ('\t', 'SPACE'), ('C', 'PROPN'), (' \t', 'SPACE'), ('B', 'NOUN'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('1,2,3,4,6,7,8', 'NUM'), ('}', 'PUNCT'), ('\t\t  \t', 'SPACE'), ('C', 'NOUN'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('1,2,4,5,6,7', 'NUM'), ('}', 'PUNCT'), ('\t\t      ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('  ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'PROPN'), ('Analyzer', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE'), ('Conversion', 'PROPN'), ('NFA', 'PROPN'), ('DFA', 'PROPN'), ('1', 'NUM'), ('2', 'NUM'), ('5', 'NUM'), ('3', 'NUM'), ('4', 'NUM'), ('6', 'NUM'), ('7', 'NUM'), ('8', 'NUM'), ('0', 'NUM'), ('𝜖', 'NOUN'), ('b', 'NOUN'), ('𝜖', 'NOUN'), ('b', 'NOUN'), ('𝜖', 'NOUN'), ('𝜖', 'X'), ('𝜖', 'X'), ('𝜖', 'X'), ('𝜖', 'X'), ('𝜖', 'PROPN'), ('B', 'NOUN'), ('=', 'SYM'), ('{', 'PUNCT'), ('1', 'NUM'), (',', 'PUNCT'), ('2', 'NUM'), (',', 'PUNCT'), ('3', 'NUM'), (',', 'PUNCT'), ('4', 'NUM'), (',', 'PUNCT'), ('6', 'NUM'), (',', 'PUNCT'), ('7', 'NUM'), (',', 'PUNCT'), ('8', 'NUM'), ('}', 'PUNCT'), ('Move(B', 'PROPN'), (',', 'PUNCT'), (')', 'PUNCT'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('3,8', 'NUM'), ('}', 'PUNCT'), ('𝜖-', 'X')] 

>> Dependency Tags are: 
[('𝜖', 'dep'), ('A=', 'pobj'), ('{', 'punct'), ('0', 'appos'), (',', 'punct'), ('1', 'appos'), (',', 'punct'), ('2', 'appos'), (',', 'punct'), ('4', 'appos'), (',', 'punct'), ('7', 'appos'), ('}', 'punct'), (' ', 'appos'), ('Move(A', 'compound'), (',', 'punct'), ('b', 'appos'), (')', 'punct'), ('=', 'punct'), (' ', 'meta'), ('{', 'punct'), ('5', 'appos'), ('}', 'punct'), ('𝜖-', 'appos'), ('Closure(Move(A', 'appos'), (',', 'punct'), ('b', 'appos'), (')', 'punct'), (')', 'punct'), ('=', 'punct'), (' ', 'nsubj'), ('{', 'punct'), ('5', 'appos'), (',', 'punct'), ('6', 'appos'), (',', 'punct'), ('7', 'appos'), (',', 'punct'), ('1', 'appos'), (',', 'punct'), ('2', 'appos'), (',', 'punct'), ('4', 'appos'), ('}', 'punct'), ('----', 'punct'), ('C', 'appos'), ('   ', 'nummod'), ('=', 'punct'), ('{', 'punct'), ('1,2,4,5,6,7', 'nmod'), ('}', 'punct'), ('     ', 'appos'), ('10', 'quantmod'), (' ', 'compound'), ('9', 'nummod'), ('\t', 'compound'), ('States', 'compound'), ('\t', 'appos'), ('\t', 'appos'), ('b', 'punct'), (' \t', 'nmod'), ('=', 'punct'), ('{', 'punct'), ('0,1,2,4,7', 'nmod'), ('}', 'punct'), ('\t', 'compound'), ('B', 'compound'), ('\t', 'compound'), ('C', 'compound'), (' \t', 'compound'), ('B', 'appos'), ('=', 'punct'), ('{', 'punct'), ('1,2,3,4,6,7,8', 'appos'), ('}', 'punct'), ('\t\t  \t', 'appos'), ('C', 'appos'), ('=', 'punct'), ('{', 'punct'), ('1,2,4,5,6,7', 'nmod'), ('}', 'punct'), ('\t\t      ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('  ', 'appos'), ('#', 'nmod'), ('2170701', 'appos'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('2', 'nummod'), ('–', 'punct'), ('Lexical', 'compound'), ('Analyzer', 'npadvmod'), ('‹#›', 'punct'), (' ', 'compound'), ('Conversion', 'appos'), ('NFA', 'pobj'), ('DFA', 'pobj'), ('1', 'nummod'), ('2', 'compound'), ('5', 'nummod'), ('3', 'nummod'), ('4', 'nummod'), ('6', 'nummod'), ('7', 'nummod'), ('8', 'nummod'), ('0', 'nummod'), ('𝜖', 'dep'), ('b', 'compound'), ('𝜖', 'dep'), ('b', 'nmod'), ('𝜖', 'nmod'), ('𝜖', 'nmod'), ('𝜖', 'nmod'), ('𝜖', 'nmod'), ('𝜖', 'nmod'), ('𝜖', 'nmod'), ('B', 'dep'), ('=', 'punct'), ('{', 'punct'), ('1', 'appos'), (',', 'punct'), ('2', 'appos'), (',', 'punct'), ('3', 'appos'), (',', 'punct'), ('4', 'appos'), (',', 'punct'), ('6', 'appos'), (',', 'punct'), ('7', 'appos'), (',', 'punct'), ('8', 'appos'), ('}', 'punct'), ('Move(B', 'appos'), (',', 'punct'), (')', 'punct'), ('=', 'dep'), ('{', 'punct'), ('3,8', 'appos'), ('}', 'punct'), ('𝜖-', 'appos')]

>> Bigrams: 
[[𝜖, A=], [A=, {], [{, 0], [0, ,], [,, 1], [1, ,], [,, 2], [2, ,], [,, 4], [4, ,], [,, 7], [7, }], [},  ], [ , Move(A], [Move(A, ,], [,, b], [b, )], [), =], [=,  ], [ , {], [{, 5], [5, }], [}, 𝜖-], [𝜖-, Closure(Move(A], [Closure(Move(A, ,], [,, b], [b, )], [), )], [), =], [=,  ], [ , {], [{, 5], [5, ,], [,, 6], [6, ,], [,, 7], [7, ,], [,, 1], [1, ,], [,, 2], [2, ,], [,, 4], [4, }], [}, ----], [----, C], [C,    ], [   , =], [=, {], [{, 1,2,4,5,6,7], [1,2,4,5,6,7, }], [},      ], [     , 10], [10,  ], [ , 9], [9, 	], [	, States], [States, 	], [	, 	], [	, b], [b,  	], [ 	, =], [=, {], [{, 0,1,2,4,7], [0,1,2,4,7, }], [}, 	], [	, B], [B, 	], [	, C], [C,  	], [ 	, B], [B, =], [=, {], [{, 1,2,3,4,6,7,8], [1,2,3,4,6,7,8, }], [}, 		  	], [		  	, C], [C, =], [=, {], [{, 1,2,4,5,6,7], [1,2,4,5,6,7, }], [}, 		      ], [		      , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,   ], [  , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 2], [2, –], [–, Lexical], [Lexical, Analyzer], [Analyzer, ‹#›], [‹#›,  ], [ , Conversion], [Conversion, NFA], [NFA, DFA], [DFA, 1], [1, 2], [2, 5], [5, 3], [3, 4], [4, 6], [6, 7], [7, 8], [8, 0], [0, 𝜖], [𝜖, b], [b, 𝜖], [𝜖, b], [b, 𝜖], [𝜖, 𝜖], [𝜖, 𝜖], [𝜖, 𝜖], [𝜖, 𝜖], [𝜖, 𝜖], [𝜖, B], [B, =], [=, {], [{, 1], [1, ,], [,, 2], [2, ,], [,, 3], [3, ,], [,, 4], [4, ,], [,, 6], [6, ,], [,, 7], [7, ,], [,, 8], [8, }], [}, Move(B], [Move(B, ,], [,, )], [), =], [=, {], [{, 3,8], [3,8, }], [}, 𝜖-]]

>> Trigrams: 
[[𝜖, A=, {], [A=, {, 0], [{, 0, ,], [0, ,, 1], [,, 1, ,], [1, ,, 2], [,, 2, ,], [2, ,, 4], [,, 4, ,], [4, ,, 7], [,, 7, }], [7, },  ], [},  , Move(A], [ , Move(A, ,], [Move(A, ,, b], [,, b, )], [b, ), =], [), =,  ], [=,  , {], [ , {, 5], [{, 5, }], [5, }, 𝜖-], [}, 𝜖-, Closure(Move(A], [𝜖-, Closure(Move(A, ,], [Closure(Move(A, ,, b], [,, b, )], [b, ), )], [), ), =], [), =,  ], [=,  , {], [ , {, 5], [{, 5, ,], [5, ,, 6], [,, 6, ,], [6, ,, 7], [,, 7, ,], [7, ,, 1], [,, 1, ,], [1, ,, 2], [,, 2, ,], [2, ,, 4], [,, 4, }], [4, }, ----], [}, ----, C], [----, C,    ], [C,    , =], [   , =, {], [=, {, 1,2,4,5,6,7], [{, 1,2,4,5,6,7, }], [1,2,4,5,6,7, },      ], [},      , 10], [     , 10,  ], [10,  , 9], [ , 9, 	], [9, 	, States], [	, States, 	], [States, 	, 	], [	, 	, b], [	, b,  	], [b,  	, =], [ 	, =, {], [=, {, 0,1,2,4,7], [{, 0,1,2,4,7, }], [0,1,2,4,7, }, 	], [}, 	, B], [	, B, 	], [B, 	, C], [	, C,  	], [C,  	, B], [ 	, B, =], [B, =, {], [=, {, 1,2,3,4,6,7,8], [{, 1,2,3,4,6,7,8, }], [1,2,3,4,6,7,8, }, 		  	], [}, 		  	, C], [		  	, C, =], [C, =, {], [=, {, 1,2,4,5,6,7], [{, 1,2,4,5,6,7, }], [1,2,4,5,6,7, }, 		      ], [}, 		      , Prof.], [		      , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,   ], [Kagathara,   , #], [  , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 2], [Unit, 2, –], [2, –, Lexical], [–, Lexical, Analyzer], [Lexical, Analyzer, ‹#›], [Analyzer, ‹#›,  ], [‹#›,  , Conversion], [ , Conversion, NFA], [Conversion, NFA, DFA], [NFA, DFA, 1], [DFA, 1, 2], [1, 2, 5], [2, 5, 3], [5, 3, 4], [3, 4, 6], [4, 6, 7], [6, 7, 8], [7, 8, 0], [8, 0, 𝜖], [0, 𝜖, b], [𝜖, b, 𝜖], [b, 𝜖, b], [𝜖, b, 𝜖], [b, 𝜖, 𝜖], [𝜖, 𝜖, 𝜖], [𝜖, 𝜖, 𝜖], [𝜖, 𝜖, 𝜖], [𝜖, 𝜖, 𝜖], [𝜖, 𝜖, B], [𝜖, B, =], [B, =, {], [=, {, 1], [{, 1, ,], [1, ,, 2], [,, 2, ,], [2, ,, 3], [,, 3, ,], [3, ,, 4], [,, 4, ,], [4, ,, 6], [,, 6, ,], [6, ,, 7], [,, 7, ,], [7, ,, 8], [,, 8, }], [8, }, Move(B], [}, Move(B, ,], [Move(B, ,, )], [,, ), =], [), =, {], [=, {, 3,8], [{, 3,8, }], [3,8, }, 𝜖-]]

>> Noun Phrases are: 
[A=, 𝜖-, C,  	A = {0,1,2,4,7}	B	C  	B, C, 1,2,4,5,6,7}		      Prof. Dixita B Kagathara, (CD, Unit,  Conversion, NFA, DFA, Move(B]

>> Named Entities are: 
[('0', 'DATE'), ('1', 'CARDINAL'), ('2', 'DATE'), ('4', 'DATE'), ('7', 'CARDINAL'), ('Move(A', 'GPE'), ('Closure(Move(A', 'ORG'), ('5', 'DATE'), ('6', 'DATE'), ('7', 'DATE'), ('1', 'DATE'), ('2', 'DATE'), ('4', 'CARDINAL'), ('1,2,4,5,6,7', 'CARDINAL'), ('0,1,2,4,7', 'DATE'), ('1,2,4,5,6,7', 'DATE'), ('Dixita', 'PERSON'), ('Kagathara', 'PERSON'), ('1', 'CARDINAL'), ('2', 'DATE'), ('3', 'DATE'), ('4', 'DATE'), ('6', 'DATE'), ('7', 'DATE'), ('8', 'CARDINAL'), ('Move(B', 'ORG'), ('3,8', 'CARDINAL')]


============================ Sentence 151 =============================

Closure(Move(B,a)) = {3, 6, 7, 1, 2, 4, 8} ---- 


>> Tokens are: 
[Closure(Move(B, ,, ), ), =, {, 3, ,, 6, ,, 7, ,, 1, ,, 2, ,, 4, ,, 8, }, ----] 

>> PoS Tags are: 
[('Closure(Move(B', 'PROPN'), (',', 'PUNCT'), (')', 'PUNCT'), (')', 'PUNCT'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('3', 'NUM'), (',', 'PUNCT'), ('6', 'NUM'), (',', 'PUNCT'), ('7', 'NUM'), (',', 'PUNCT'), ('1', 'NUM'), (',', 'PUNCT'), ('2', 'NUM'), (',', 'PUNCT'), ('4', 'NUM'), (',', 'PUNCT'), ('8', 'NUM'), ('}', 'PUNCT'), ('----', 'PUNCT')] 

>> Dependency Tags are: 
[('Closure(Move(B', 'ROOT'), (',', 'punct'), (')', 'punct'), (')', 'punct'), ('=', 'appos'), ('{', 'punct'), ('3', 'appos'), (',', 'punct'), ('6', 'appos'), (',', 'punct'), ('7', 'appos'), (',', 'punct'), ('1', 'appos'), (',', 'punct'), ('2', 'appos'), (',', 'punct'), ('4', 'appos'), (',', 'punct'), ('8', 'appos'), ('}', 'punct'), ('----', 'punct')]

>> Bigrams: 
[[Closure(Move(B, ,], [,, )], [), )], [), =], [=, {], [{, 3], [3, ,], [,, 6], [6, ,], [,, 7], [7, ,], [,, 1], [1, ,], [,, 2], [2, ,], [,, 4], [4, ,], [,, 8], [8, }], [}, ----]]

>> Trigrams: 
[[Closure(Move(B, ,, )], [,, ), )], [), ), =], [), =, {], [=, {, 3], [{, 3, ,], [3, ,, 6], [,, 6, ,], [6, ,, 7], [,, 7, ,], [7, ,, 1], [,, 1, ,], [1, ,, 2], [,, 2, ,], [2, ,, 4], [,, 4, ,], [4, ,, 8], [,, 8, }], [8, }, ----]]

>> Noun Phrases are: 
[Closure(Move(B]

>> Named Entities are: 
[('3', 'CARDINAL'), ('6', 'DATE'), ('7', 'DATE'), ('1', 'DATE'), ('2', 'DATE'), ('4', 'DATE'), ('8', 'CARDINAL')]


============================ Sentence 152 =============================

B    = {1,2,3,4,6,7,8}      b 10  9 	States	a	b  	A = {0,1,2,4,7}	B	C  	B = {1,2,3,4,6,7,8}	B	  	C = {1,2,4,5,6,7}		      Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Conversion from NFA to DFA  1 2 5 3 4 6 7 8 0 𝜖 a b 𝜖 a b 𝜖 𝜖 𝜖 𝜖 𝜖 𝜖 B= {1, 2, 3, 4, 6, 7, 8} Move(B,b) = {5,9} 𝜖- 


>> Tokens are: 
[B,    , =, {, 1,2,3,4,6,7,8, },      , b, 10,  , 9, 	, States, 	, 	, b,  	, =, {, 0,1,2,4,7, }, 	, B, 	, C,  	, B, =, {, 1,2,3,4,6,7,8, }, 	, B, 	  	, C, =, {, 1,2,4,5,6,7, }, 		      , Prof., Dixita, B, Kagathara,   , #, 2170701, (, CD, ),   , ,   , Unit, 2, –, Lexical, Analyzer, ‹#›,  , Conversion, NFA, DFA,  , 1, 2, 5, 3, 4, 6, 7, 8, 0, 𝜖, b, 𝜖, b, 𝜖, 𝜖, 𝜖, 𝜖, 𝜖, 𝜖, B=, {, 1, ,, 2, ,, 3, ,, 4, ,, 6, ,, 7, ,, 8, }, Move(B, ,, b, ), =, {, 5,9, }, 𝜖-] 

>> PoS Tags are: 
[('B', 'NOUN'), ('   ', 'SPACE'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('1,2,3,4,6,7,8', 'NUM'), ('}', 'PUNCT'), ('     ', 'SPACE'), ('b', 'NOUN'), ('10', 'NUM'), (' ', 'SPACE'), ('9', 'NUM'), ('\t', 'SPACE'), ('States', 'PROPN'), ('\t', 'SPACE'), ('\t', 'SPACE'), ('b', 'X'), (' \t', 'SPACE'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('0,1,2,4,7', 'NOUN'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('B', 'PROPN'), ('\t', 'SPACE'), ('C', 'PROPN'), (' \t', 'SPACE'), ('B', 'NOUN'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('1,2,3,4,6,7,8', 'NUM'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('B', 'PROPN'), ('\t  \t', 'SPACE'), ('C', 'NOUN'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('1,2,4,5,6,7', 'NUM'), ('}', 'PUNCT'), ('\t\t      ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('  ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'PROPN'), ('Analyzer', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE'), ('Conversion', 'PROPN'), ('NFA', 'PROPN'), ('DFA', 'PROPN'), (' ', 'SPACE'), ('1', 'NUM'), ('2', 'NUM'), ('5', 'NUM'), ('3', 'NUM'), ('4', 'NUM'), ('6', 'NUM'), ('7', 'NUM'), ('8', 'NUM'), ('0', 'NUM'), ('𝜖', 'NOUN'), ('b', 'NOUN'), ('𝜖', 'NOUN'), ('b', 'NOUN'), ('𝜖', 'NOUN'), ('𝜖', 'X'), ('𝜖', 'X'), ('𝜖', 'X'), ('𝜖', 'X'), ('𝜖', 'X'), ('B=', 'NOUN'), ('{', 'PUNCT'), ('1', 'NUM'), (',', 'PUNCT'), ('2', 'NUM'), (',', 'PUNCT'), ('3', 'NUM'), (',', 'PUNCT'), ('4', 'NUM'), (',', 'PUNCT'), ('6', 'NUM'), (',', 'PUNCT'), ('7', 'NUM'), (',', 'PUNCT'), ('8', 'NUM'), ('}', 'PUNCT'), ('Move(B', 'PROPN'), (',', 'PUNCT'), ('b', 'X'), (')', 'PUNCT'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('5,9', 'NUM'), ('}', 'PUNCT'), ('𝜖-', 'X')] 

>> Dependency Tags are: 
[('B', 'meta'), ('   ', 'appos'), ('=', 'punct'), ('{', 'punct'), ('1,2,3,4,6,7,8', 'dep'), ('}', 'punct'), ('     ', 'appos'), ('b', 'prep'), ('10', 'quantmod'), (' ', 'quantmod'), ('9', 'nummod'), ('\t', 'compound'), ('States', 'compound'), ('\t', 'nsubj'), ('\t', 'appos'), ('b', 'punct'), (' \t', 'compound'), ('=', 'punct'), ('{', 'punct'), ('0,1,2,4,7', 'nmod'), ('}', 'punct'), ('\t', 'compound'), ('B', 'compound'), ('\t', 'compound'), ('C', 'compound'), (' \t', 'compound'), ('B', 'appos'), ('=', 'punct'), ('{', 'punct'), ('1,2,3,4,6,7,8', 'nmod'), ('}', 'punct'), ('\t', 'compound'), ('B', 'compound'), ('\t  \t', 'compound'), ('C', 'appos'), ('=', 'punct'), ('{', 'punct'), ('1,2,4,5,6,7', 'nmod'), ('}', 'punct'), ('\t\t      ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('  ', 'appos'), ('#', 'nmod'), ('2170701', 'appos'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('2', 'nummod'), ('–', 'punct'), ('Lexical', 'compound'), ('Analyzer', 'npadvmod'), ('‹#›', 'punct'), (' ', 'compound'), ('Conversion', 'appos'), ('NFA', 'pobj'), ('DFA', 'advcl'), (' ', 'dobj'), ('1', 'compound'), ('2', 'compound'), ('5', 'appos'), ('3', 'nummod'), ('4', 'nummod'), ('6', 'nummod'), ('7', 'nummod'), ('8', 'nummod'), ('0', 'nummod'), ('𝜖', 'dobj'), ('b', 'compound'), ('𝜖', 'dep'), ('b', 'compound'), ('𝜖', 'dep'), ('𝜖', 'dep'), ('𝜖', 'dep'), ('𝜖', 'dep'), ('𝜖', 'dep'), ('𝜖', 'dep'), ('B=', 'pobj'), ('{', 'punct'), ('1', 'appos'), (',', 'punct'), ('2', 'appos'), (',', 'punct'), ('3', 'appos'), (',', 'punct'), ('4', 'appos'), (',', 'punct'), ('6', 'appos'), (',', 'punct'), ('7', 'appos'), (',', 'punct'), ('8', 'appos'), ('}', 'punct'), ('Move(B', 'appos'), (',', 'punct'), ('b', 'appos'), (')', 'punct'), ('=', 'dep'), ('{', 'punct'), ('5,9', 'appos'), ('}', 'punct'), ('𝜖-', 'appos')]

>> Bigrams: 
[[B,    ], [   , =], [=, {], [{, 1,2,3,4,6,7,8], [1,2,3,4,6,7,8, }], [},      ], [     , b], [b, 10], [10,  ], [ , 9], [9, 	], [	, States], [States, 	], [	, 	], [	, b], [b,  	], [ 	, =], [=, {], [{, 0,1,2,4,7], [0,1,2,4,7, }], [}, 	], [	, B], [B, 	], [	, C], [C,  	], [ 	, B], [B, =], [=, {], [{, 1,2,3,4,6,7,8], [1,2,3,4,6,7,8, }], [}, 	], [	, B], [B, 	  	], [	  	, C], [C, =], [=, {], [{, 1,2,4,5,6,7], [1,2,4,5,6,7, }], [}, 		      ], [		      , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,   ], [  , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 2], [2, –], [–, Lexical], [Lexical, Analyzer], [Analyzer, ‹#›], [‹#›,  ], [ , Conversion], [Conversion, NFA], [NFA, DFA], [DFA,  ], [ , 1], [1, 2], [2, 5], [5, 3], [3, 4], [4, 6], [6, 7], [7, 8], [8, 0], [0, 𝜖], [𝜖, b], [b, 𝜖], [𝜖, b], [b, 𝜖], [𝜖, 𝜖], [𝜖, 𝜖], [𝜖, 𝜖], [𝜖, 𝜖], [𝜖, 𝜖], [𝜖, B=], [B=, {], [{, 1], [1, ,], [,, 2], [2, ,], [,, 3], [3, ,], [,, 4], [4, ,], [,, 6], [6, ,], [,, 7], [7, ,], [,, 8], [8, }], [}, Move(B], [Move(B, ,], [,, b], [b, )], [), =], [=, {], [{, 5,9], [5,9, }], [}, 𝜖-]]

>> Trigrams: 
[[B,    , =], [   , =, {], [=, {, 1,2,3,4,6,7,8], [{, 1,2,3,4,6,7,8, }], [1,2,3,4,6,7,8, },      ], [},      , b], [     , b, 10], [b, 10,  ], [10,  , 9], [ , 9, 	], [9, 	, States], [	, States, 	], [States, 	, 	], [	, 	, b], [	, b,  	], [b,  	, =], [ 	, =, {], [=, {, 0,1,2,4,7], [{, 0,1,2,4,7, }], [0,1,2,4,7, }, 	], [}, 	, B], [	, B, 	], [B, 	, C], [	, C,  	], [C,  	, B], [ 	, B, =], [B, =, {], [=, {, 1,2,3,4,6,7,8], [{, 1,2,3,4,6,7,8, }], [1,2,3,4,6,7,8, }, 	], [}, 	, B], [	, B, 	  	], [B, 	  	, C], [	  	, C, =], [C, =, {], [=, {, 1,2,4,5,6,7], [{, 1,2,4,5,6,7, }], [1,2,4,5,6,7, }, 		      ], [}, 		      , Prof.], [		      , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,   ], [Kagathara,   , #], [  , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 2], [Unit, 2, –], [2, –, Lexical], [–, Lexical, Analyzer], [Lexical, Analyzer, ‹#›], [Analyzer, ‹#›,  ], [‹#›,  , Conversion], [ , Conversion, NFA], [Conversion, NFA, DFA], [NFA, DFA,  ], [DFA,  , 1], [ , 1, 2], [1, 2, 5], [2, 5, 3], [5, 3, 4], [3, 4, 6], [4, 6, 7], [6, 7, 8], [7, 8, 0], [8, 0, 𝜖], [0, 𝜖, b], [𝜖, b, 𝜖], [b, 𝜖, b], [𝜖, b, 𝜖], [b, 𝜖, 𝜖], [𝜖, 𝜖, 𝜖], [𝜖, 𝜖, 𝜖], [𝜖, 𝜖, 𝜖], [𝜖, 𝜖, 𝜖], [𝜖, 𝜖, B=], [𝜖, B=, {], [B=, {, 1], [{, 1, ,], [1, ,, 2], [,, 2, ,], [2, ,, 3], [,, 3, ,], [3, ,, 4], [,, 4, ,], [4, ,, 6], [,, 6, ,], [6, ,, 7], [,, 7, ,], [7, ,, 8], [,, 8, }], [8, }, Move(B], [}, Move(B, ,], [Move(B, ,, b], [,, b, )], [b, ), =], [), =, {], [=, {, 5,9], [{, 5,9, }], [5,9, }, 𝜖-]]

>> Noun Phrases are: 
[ 	A = {0,1,2,4,7}	B	C  	B, 1,2,3,4,6,7,8}	B	  	C, 1,2,4,5,6,7}		      Prof. Dixita B Kagathara, (CD, Unit,  Conversion, NFA, 𝜖, B=, } Move(B]

>> Named Entities are: 
[('0,1,2,4,7', 'DATE'), ('1,2,4,5,6,7', 'DATE'), ('Dixita', 'PERSON'), ('Kagathara', 'PERSON'), ('1 2 5', 'DATE'), ('1', 'DATE'), ('2', 'DATE'), ('3', 'DATE'), ('4', 'DATE'), ('6', 'DATE'), ('7', 'DATE'), ('8', 'CARDINAL'), ('Move(B', 'ORG'), ('5,9', 'CARDINAL')]


============================ Sentence 153 =============================

Closure(Move(B,b)) = {5, 6, 7, 1, 2, 4, 9} ---- 


>> Tokens are: 
[Closure(Move(B, ,, b, ), ), =, {, 5, ,, 6, ,, 7, ,, 1, ,, 2, ,, 4, ,, 9, }, ----] 

>> PoS Tags are: 
[('Closure(Move(B', 'PROPN'), (',', 'PUNCT'), ('b', 'X'), (')', 'PUNCT'), (')', 'PUNCT'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('5', 'NUM'), (',', 'PUNCT'), ('6', 'NUM'), (',', 'PUNCT'), ('7', 'NUM'), (',', 'PUNCT'), ('1', 'NUM'), (',', 'PUNCT'), ('2', 'NUM'), (',', 'PUNCT'), ('4', 'NUM'), (',', 'PUNCT'), ('9', 'NUM'), ('}', 'PUNCT'), ('----', 'PUNCT')] 

>> Dependency Tags are: 
[('Closure(Move(B', 'ROOT'), (',', 'punct'), ('b', 'appos'), (')', 'punct'), (')', 'punct'), ('=', 'appos'), ('{', 'punct'), ('5', 'appos'), (',', 'punct'), ('6', 'appos'), (',', 'punct'), ('7', 'appos'), (',', 'punct'), ('1', 'appos'), (',', 'punct'), ('2', 'appos'), (',', 'punct'), ('4', 'appos'), (',', 'punct'), ('9', 'appos'), ('}', 'punct'), ('----', 'punct')]

>> Bigrams: 
[[Closure(Move(B, ,], [,, b], [b, )], [), )], [), =], [=, {], [{, 5], [5, ,], [,, 6], [6, ,], [,, 7], [7, ,], [,, 1], [1, ,], [,, 2], [2, ,], [,, 4], [4, ,], [,, 9], [9, }], [}, ----]]

>> Trigrams: 
[[Closure(Move(B, ,, b], [,, b, )], [b, ), )], [), ), =], [), =, {], [=, {, 5], [{, 5, ,], [5, ,, 6], [,, 6, ,], [6, ,, 7], [,, 7, ,], [7, ,, 1], [,, 1, ,], [1, ,, 2], [,, 2, ,], [2, ,, 4], [,, 4, ,], [4, ,, 9], [,, 9, }], [9, }, ----]]

>> Noun Phrases are: 
[Closure(Move(B]

>> Named Entities are: 
[('5', 'DATE'), ('6', 'DATE'), ('7', 'DATE'), ('1', 'DATE'), ('2', 'DATE'), ('4', 'DATE'), ('9', 'CARDINAL')]


============================ Sentence 154 =============================

D    = {1,2,4,5,6,7,9}      b 10  9 	States	a	b  	A = {0,1,2,4,7}	B	C  	B = {1,2,3,4,6,7,8}	B	D  	C = {1,2,4,5,6,7}		  	 


>> Tokens are: 
[D,    , =, {, 1,2,4,5,6,7,9, },      , b, 10,  , 9, 	, States, 	, 	, b,  	, =, {, 0,1,2,4,7, }, 	, B, 	, C,  	, B, =, {, 1,2,3,4,6,7,8, }, 	, B, 	, D,  	, C, =, {, 1,2,4,5,6,7, }, 		  	] 

>> PoS Tags are: 
[('D', 'NOUN'), ('   ', 'SPACE'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('1,2,4,5,6,7,9', 'NUM'), ('}', 'PUNCT'), ('     ', 'SPACE'), ('b', 'NOUN'), ('10', 'NUM'), (' ', 'SPACE'), ('9', 'NUM'), ('\t', 'SPACE'), ('States', 'PROPN'), ('\t', 'SPACE'), ('\t', 'SPACE'), ('b', 'X'), (' \t', 'SPACE'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('0,1,2,4,7', 'NOUN'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('B', 'PROPN'), ('\t', 'SPACE'), ('C', 'PROPN'), (' \t', 'SPACE'), ('B', 'NOUN'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('1,2,3,4,6,7,8', 'NUM'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('B', 'PROPN'), ('\t', 'SPACE'), ('D', 'PROPN'), (' \t', 'SPACE'), ('C', 'NOUN'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('1,2,4,5,6,7', 'NUM'), ('}', 'PUNCT'), ('\t\t  \t', 'SPACE')] 

>> Dependency Tags are: 
[('D', 'npadvmod'), ('   ', 'npadvmod'), ('=', 'punct'), ('{', 'punct'), ('1,2,4,5,6,7,9', 'dep'), ('}', 'punct'), ('     ', 'ROOT'), ('b', 'appos'), ('10', 'quantmod'), (' ', 'quantmod'), ('9', 'nummod'), ('\t', 'compound'), ('States', 'compound'), ('\t', 'appos'), ('\t', 'appos'), ('b', 'prep'), (' \t', 'compound'), ('=', 'punct'), ('{', 'punct'), ('0,1,2,4,7', 'nmod'), ('}', 'punct'), ('\t', 'compound'), ('B', 'compound'), ('\t', 'compound'), ('C', 'compound'), (' \t', 'compound'), ('B', 'appos'), ('=', 'punct'), ('{', 'punct'), ('1,2,3,4,6,7,8', 'dep'), ('}', 'punct'), ('\t', 'compound'), ('B', 'nmod'), ('\t', 'compound'), ('D', 'nmod'), (' \t', 'compound'), ('C', 'appos'), ('=', 'punct'), ('{', 'punct'), ('1,2,4,5,6,7', 'appos'), ('}', 'punct'), ('\t\t  \t', 'appos')]

>> Bigrams: 
[[D,    ], [   , =], [=, {], [{, 1,2,4,5,6,7,9], [1,2,4,5,6,7,9, }], [},      ], [     , b], [b, 10], [10,  ], [ , 9], [9, 	], [	, States], [States, 	], [	, 	], [	, b], [b,  	], [ 	, =], [=, {], [{, 0,1,2,4,7], [0,1,2,4,7, }], [}, 	], [	, B], [B, 	], [	, C], [C,  	], [ 	, B], [B, =], [=, {], [{, 1,2,3,4,6,7,8], [1,2,3,4,6,7,8, }], [}, 	], [	, B], [B, 	], [	, D], [D,  	], [ 	, C], [C, =], [=, {], [{, 1,2,4,5,6,7], [1,2,4,5,6,7, }], [}, 		  	]]

>> Trigrams: 
[[D,    , =], [   , =, {], [=, {, 1,2,4,5,6,7,9], [{, 1,2,4,5,6,7,9, }], [1,2,4,5,6,7,9, },      ], [},      , b], [     , b, 10], [b, 10,  ], [10,  , 9], [ , 9, 	], [9, 	, States], [	, States, 	], [States, 	, 	], [	, 	, b], [	, b,  	], [b,  	, =], [ 	, =, {], [=, {, 0,1,2,4,7], [{, 0,1,2,4,7, }], [0,1,2,4,7, }, 	], [}, 	, B], [	, B, 	], [B, 	, C], [	, C,  	], [C,  	, B], [ 	, B, =], [B, =, {], [=, {, 1,2,3,4,6,7,8], [{, 1,2,3,4,6,7,8, }], [1,2,3,4,6,7,8, }, 	], [}, 	, B], [	, B, 	], [B, 	, D], [	, D,  	], [D,  	, C], [ 	, C, =], [C, =, {], [=, {, 1,2,4,5,6,7], [{, 1,2,4,5,6,7, }], [1,2,4,5,6,7, }, 		  	]]

>> Noun Phrases are: 
[b,  	A = {0,1,2,4,7}	B	C  	B, 1,2,3,4,6,7,8}	B	D  	C]

>> Named Entities are: 
[('1,2,4,5,6,7,9', 'DATE'), ('0,1,2,4,7', 'DATE'), ('1,2,4,5,6,7', 'DATE')]


============================ Sentence 155 =============================

D = {1,2,4,5,6,7,9}		      Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Conversion from NFA to DFA 1 2 5 3 4 6 7 8 0 𝜖 a b 𝜖 a b 𝜖 𝜖 𝜖 𝜖 𝜖 𝜖 Move(C,a) = {3,8} 𝜖- 


>> Tokens are: 
[D, =, {, 1,2,4,5,6,7,9, }, 		      , Prof., Dixita, B, Kagathara,   , #, 2170701, (, CD, ),   , ,   , Unit, 2, –, Lexical, Analyzer, ‹#›,  , Conversion, NFA, DFA, 1, 2, 5, 3, 4, 6, 7, 8, 0, 𝜖, b, 𝜖, b, 𝜖, 𝜖, 𝜖, 𝜖, 𝜖, 𝜖, Move(C, ,, ), =, {, 3,8, }, 𝜖-] 

>> PoS Tags are: 
[('D', 'NOUN'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('1,2,4,5,6,7,9', 'NUM'), ('}', 'PUNCT'), ('\t\t      ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('  ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'PROPN'), ('Analyzer', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE'), ('Conversion', 'PROPN'), ('NFA', 'PROPN'), ('DFA', 'PROPN'), ('1', 'NUM'), ('2', 'NUM'), ('5', 'NUM'), ('3', 'NUM'), ('4', 'NUM'), ('6', 'NUM'), ('7', 'NUM'), ('8', 'NUM'), ('0', 'NUM'), ('𝜖', 'NOUN'), ('b', 'NOUN'), ('𝜖', 'NOUN'), ('b', 'NOUN'), ('𝜖', 'NOUN'), ('𝜖', 'X'), ('𝜖', 'X'), ('𝜖', 'X'), ('𝜖', 'X'), ('𝜖', 'X'), ('Move(C', 'PROPN'), (',', 'PUNCT'), (')', 'PUNCT'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('3,8', 'NUM'), ('}', 'PUNCT'), ('𝜖-', 'PROPN')] 

>> Dependency Tags are: 
[('D', 'nsubj'), ('=', 'punct'), ('{', 'punct'), ('1,2,4,5,6,7,9', 'nmod'), ('}', 'punct'), ('\t\t      ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('  ', 'prep'), ('#', 'nmod'), ('2170701', 'appos'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('2', 'nummod'), ('–', 'punct'), ('Lexical', 'compound'), ('Analyzer', 'npadvmod'), ('‹#›', 'punct'), (' ', 'compound'), ('Conversion', 'appos'), ('NFA', 'pobj'), ('DFA', 'pobj'), ('1', 'nummod'), ('2', 'compound'), ('5', 'nummod'), ('3', 'nummod'), ('4', 'nummod'), ('6', 'nummod'), ('7', 'nummod'), ('8', 'nummod'), ('0', 'nummod'), ('𝜖', 'dep'), ('b', 'compound'), ('𝜖', 'dep'), ('b', 'compound'), ('𝜖', 'dep'), ('𝜖', 'nmod'), ('𝜖', 'nmod'), ('𝜖', 'nmod'), ('𝜖', 'nmod'), ('𝜖', 'compound'), ('Move(C', 'dep'), (',', 'punct'), (')', 'punct'), ('=', 'appos'), ('{', 'punct'), ('3,8', 'appos'), ('}', 'punct'), ('𝜖-', 'appos')]

>> Bigrams: 
[[D, =], [=, {], [{, 1,2,4,5,6,7,9], [1,2,4,5,6,7,9, }], [}, 		      ], [		      , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,   ], [  , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 2], [2, –], [–, Lexical], [Lexical, Analyzer], [Analyzer, ‹#›], [‹#›,  ], [ , Conversion], [Conversion, NFA], [NFA, DFA], [DFA, 1], [1, 2], [2, 5], [5, 3], [3, 4], [4, 6], [6, 7], [7, 8], [8, 0], [0, 𝜖], [𝜖, b], [b, 𝜖], [𝜖, b], [b, 𝜖], [𝜖, 𝜖], [𝜖, 𝜖], [𝜖, 𝜖], [𝜖, 𝜖], [𝜖, 𝜖], [𝜖, Move(C], [Move(C, ,], [,, )], [), =], [=, {], [{, 3,8], [3,8, }], [}, 𝜖-]]

>> Trigrams: 
[[D, =, {], [=, {, 1,2,4,5,6,7,9], [{, 1,2,4,5,6,7,9, }], [1,2,4,5,6,7,9, }, 		      ], [}, 		      , Prof.], [		      , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,   ], [Kagathara,   , #], [  , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 2], [Unit, 2, –], [2, –, Lexical], [–, Lexical, Analyzer], [Lexical, Analyzer, ‹#›], [Analyzer, ‹#›,  ], [‹#›,  , Conversion], [ , Conversion, NFA], [Conversion, NFA, DFA], [NFA, DFA, 1], [DFA, 1, 2], [1, 2, 5], [2, 5, 3], [5, 3, 4], [3, 4, 6], [4, 6, 7], [6, 7, 8], [7, 8, 0], [8, 0, 𝜖], [0, 𝜖, b], [𝜖, b, 𝜖], [b, 𝜖, b], [𝜖, b, 𝜖], [b, 𝜖, 𝜖], [𝜖, 𝜖, 𝜖], [𝜖, 𝜖, 𝜖], [𝜖, 𝜖, 𝜖], [𝜖, 𝜖, 𝜖], [𝜖, 𝜖, Move(C], [𝜖, Move(C, ,], [Move(C, ,, )], [,, ), =], [), =, {], [=, {, 3,8], [{, 3,8, }], [3,8, }, 𝜖-]]

>> Noun Phrases are: 
[D, 1,2,4,5,6,7,9}		      Prof. Dixita B Kagathara, (CD, Unit,  Conversion, NFA, DFA, 𝜖-]

>> Named Entities are: 
[('1,2,4,5,6,7,9', 'DATE'), ('Dixita', 'PERSON'), ('Kagathara', 'PERSON'), ('Move(C', 'ORG'), ('3,8', 'CARDINAL')]


============================ Sentence 156 =============================

Closure(Move(C,a)) = {3, 6, 7, 1, 2, 4, 8} ---- 


>> Tokens are: 
[Closure(Move(C, ,, ), ), =, {, 3, ,, 6, ,, 7, ,, 1, ,, 2, ,, 4, ,, 8, }, ----] 

>> PoS Tags are: 
[('Closure(Move(C', 'PROPN'), (',', 'PUNCT'), (')', 'PUNCT'), (')', 'PUNCT'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('3', 'NUM'), (',', 'PUNCT'), ('6', 'NUM'), (',', 'PUNCT'), ('7', 'NUM'), (',', 'PUNCT'), ('1', 'NUM'), (',', 'PUNCT'), ('2', 'NUM'), (',', 'PUNCT'), ('4', 'NUM'), (',', 'PUNCT'), ('8', 'NUM'), ('}', 'PUNCT'), ('----', 'PUNCT')] 

>> Dependency Tags are: 
[('Closure(Move(C', 'ROOT'), (',', 'punct'), (')', 'punct'), (')', 'punct'), ('=', 'appos'), ('{', 'punct'), ('3', 'appos'), (',', 'punct'), ('6', 'appos'), (',', 'punct'), ('7', 'appos'), (',', 'punct'), ('1', 'appos'), (',', 'punct'), ('2', 'appos'), (',', 'punct'), ('4', 'appos'), (',', 'punct'), ('8', 'appos'), ('}', 'punct'), ('----', 'punct')]

>> Bigrams: 
[[Closure(Move(C, ,], [,, )], [), )], [), =], [=, {], [{, 3], [3, ,], [,, 6], [6, ,], [,, 7], [7, ,], [,, 1], [1, ,], [,, 2], [2, ,], [,, 4], [4, ,], [,, 8], [8, }], [}, ----]]

>> Trigrams: 
[[Closure(Move(C, ,, )], [,, ), )], [), ), =], [), =, {], [=, {, 3], [{, 3, ,], [3, ,, 6], [,, 6, ,], [6, ,, 7], [,, 7, ,], [7, ,, 1], [,, 1, ,], [1, ,, 2], [,, 2, ,], [2, ,, 4], [,, 4, ,], [4, ,, 8], [,, 8, }], [8, }, ----]]

>> Noun Phrases are: 
[Closure(Move(C]

>> Named Entities are: 
[('Closure(Move(C', 'ORG'), ('3', 'CARDINAL'), ('6', 'DATE'), ('7', 'DATE'), ('1', 'DATE'), ('2', 'DATE'), ('4', 'DATE'), ('8', 'CARDINAL')]


============================ Sentence 157 =============================

B = {1,2,3,4,6,7,8}      C= {1, 2, 4, 5, 6 ,7} b 10  9 	States	a	b  	A = {0,1,2,4,7}	B	C  	B = {1,2,3,4,6,7,8}	B	D  	C = {1,2,4,5,6,7}	B	  	D = {1,2,4,5,6,7,9}		      Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Conversion from NFA to DFA 1 2 5 3 4 6 7 8 0 𝜖 a b 𝜖 a b b 𝜖 𝜖 𝜖 𝜖 𝜖 𝜖 Move(C,b) =  {5} 𝜖- 


>> Tokens are: 
[B, =, {, 1,2,3,4,6,7,8, },      , C=, {, 1, ,, 2, ,, 4, ,, 5, ,, 6, ,, 7, }, b, 10,  , 9, 	, States, 	, 	, b,  	, =, {, 0,1,2,4,7, }, 	, B, 	, C,  	, B, =, {, 1,2,3,4,6,7,8, }, 	, B, 	, D,  	, C, =, {, 1,2,4,5,6,7, }, 	, B, 	  	, D, =, {, 1,2,4,5,6,7,9, }, 		      , Prof., Dixita, B, Kagathara,   , #, 2170701, (, CD, ),   , ,   , Unit, 2, –, Lexical, Analyzer, ‹#›,  , Conversion, NFA, DFA, 1, 2, 5, 3, 4, 6, 7, 8, 0, 𝜖, b, 𝜖, b, b, 𝜖, 𝜖, 𝜖, 𝜖, 𝜖, 𝜖, Move(C, ,, b, ), =,  , {, 5, }, 𝜖-] 

>> PoS Tags are: 
[('B', 'NOUN'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('1,2,3,4,6,7,8', 'NUM'), ('}', 'PUNCT'), ('     ', 'SPACE'), ('C=', 'NOUN'), ('{', 'PUNCT'), ('1', 'NUM'), (',', 'PUNCT'), ('2', 'NUM'), (',', 'PUNCT'), ('4', 'NUM'), (',', 'PUNCT'), ('5', 'NUM'), (',', 'PUNCT'), ('6', 'NUM'), (',', 'PUNCT'), ('7', 'NUM'), ('}', 'PUNCT'), ('b', 'SYM'), ('10', 'NUM'), (' ', 'SPACE'), ('9', 'NUM'), ('\t', 'SPACE'), ('States', 'PROPN'), ('\t', 'SPACE'), ('\t', 'SPACE'), ('b', 'X'), (' \t', 'SPACE'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('0,1,2,4,7', 'NOUN'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('B', 'PROPN'), ('\t', 'SPACE'), ('C', 'PROPN'), (' \t', 'SPACE'), ('B', 'NOUN'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('1,2,3,4,6,7,8', 'NUM'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('B', 'PROPN'), ('\t', 'SPACE'), ('D', 'PROPN'), (' \t', 'SPACE'), ('C', 'NOUN'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('1,2,4,5,6,7', 'NUM'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('B', 'PROPN'), ('\t  \t', 'SPACE'), ('D', 'PROPN'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('1,2,4,5,6,7,9', 'NUM'), ('}', 'PUNCT'), ('\t\t      ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('  ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'PROPN'), ('Analyzer', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE'), ('Conversion', 'PROPN'), ('NFA', 'PROPN'), ('DFA', 'PROPN'), ('1', 'NUM'), ('2', 'NUM'), ('5', 'NUM'), ('3', 'NUM'), ('4', 'NUM'), ('6', 'NUM'), ('7', 'NUM'), ('8', 'NUM'), ('0', 'NUM'), ('𝜖', 'NOUN'), ('b', 'NOUN'), ('𝜖', 'NOUN'), ('b', 'NOUN'), ('b', 'NOUN'), ('𝜖', 'PROPN'), ('𝜖', 'X'), ('𝜖', 'X'), ('𝜖', 'X'), ('𝜖', 'X'), ('𝜖', 'X'), ('Move(C', 'PROPN'), (',', 'PUNCT'), ('b', 'X'), (')', 'PUNCT'), ('=', 'X'), (' ', 'SPACE'), ('{', 'PUNCT'), ('5', 'NUM'), ('}', 'PUNCT'), ('𝜖-', 'PROPN')] 

>> Dependency Tags are: 
[('B', 'dep'), ('=', 'punct'), ('{', 'punct'), ('1,2,3,4,6,7,8', 'nmod'), ('}', 'punct'), ('     ', 'compound'), ('C=', 'appos'), ('{', 'punct'), ('1', 'nummod'), (',', 'punct'), ('2', 'nummod'), (',', 'punct'), ('4', 'nummod'), (',', 'punct'), ('5', 'nummod'), (',', 'punct'), ('6', 'nummod'), (',', 'punct'), ('7', 'nummod'), ('}', 'punct'), ('b', 'prep'), ('10', 'quantmod'), (' ', 'quantmod'), ('9', 'nummod'), ('\t', 'compound'), ('States', 'compound'), ('\t', 'appos'), ('\t', 'appos'), ('b', 'punct'), (' \t', 'compound'), ('=', 'punct'), ('{', 'punct'), ('0,1,2,4,7', 'nmod'), ('}', 'punct'), ('\t', 'compound'), ('B', 'compound'), ('\t', 'compound'), ('C', 'compound'), (' \t', 'compound'), ('B', 'appos'), ('=', 'punct'), ('{', 'punct'), ('1,2,3,4,6,7,8', 'nmod'), ('}', 'punct'), ('\t', 'compound'), ('B', 'nmod'), ('\t', 'compound'), ('D', 'nmod'), (' \t', 'compound'), ('C', 'appos'), ('=', 'punct'), ('{', 'punct'), ('1,2,4,5,6,7', 'nmod'), ('}', 'punct'), ('\t', 'compound'), ('B', 'compound'), ('\t  \t', 'compound'), ('D', 'appos'), ('=', 'punct'), ('{', 'punct'), ('1,2,4,5,6,7,9', 'nmod'), ('}', 'punct'), ('\t\t      ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('  ', 'prep'), ('#', 'nmod'), ('2170701', 'appos'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'nsubj'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('2', 'nummod'), ('–', 'punct'), ('Lexical', 'compound'), ('Analyzer', 'npadvmod'), ('‹#›', 'punct'), (' ', 'compound'), ('Conversion', 'appos'), ('NFA', 'pobj'), ('DFA', 'pobj'), ('1', 'nummod'), ('2', 'compound'), ('5', 'nummod'), ('3', 'nummod'), ('4', 'nummod'), ('6', 'nummod'), ('7', 'nummod'), ('8', 'nummod'), ('0', 'nummod'), ('𝜖', 'dep'), ('b', 'compound'), ('𝜖', 'dep'), ('b', 'compound'), ('b', 'attr'), ('𝜖', 'pobj'), ('𝜖', 'nmod'), ('𝜖', 'nmod'), ('𝜖', 'nmod'), ('𝜖', 'nmod'), ('𝜖', 'compound'), ('Move(C', 'dep'), (',', 'punct'), ('b', 'appos'), (')', 'punct'), ('=', 'punct'), (' ', 'appos'), ('{', 'punct'), ('5', 'appos'), ('}', 'punct'), ('𝜖-', 'prep')]

>> Bigrams: 
[[B, =], [=, {], [{, 1,2,3,4,6,7,8], [1,2,3,4,6,7,8, }], [},      ], [     , C=], [C=, {], [{, 1], [1, ,], [,, 2], [2, ,], [,, 4], [4, ,], [,, 5], [5, ,], [,, 6], [6, ,], [,, 7], [7, }], [}, b], [b, 10], [10,  ], [ , 9], [9, 	], [	, States], [States, 	], [	, 	], [	, b], [b,  	], [ 	, =], [=, {], [{, 0,1,2,4,7], [0,1,2,4,7, }], [}, 	], [	, B], [B, 	], [	, C], [C,  	], [ 	, B], [B, =], [=, {], [{, 1,2,3,4,6,7,8], [1,2,3,4,6,7,8, }], [}, 	], [	, B], [B, 	], [	, D], [D,  	], [ 	, C], [C, =], [=, {], [{, 1,2,4,5,6,7], [1,2,4,5,6,7, }], [}, 	], [	, B], [B, 	  	], [	  	, D], [D, =], [=, {], [{, 1,2,4,5,6,7,9], [1,2,4,5,6,7,9, }], [}, 		      ], [		      , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,   ], [  , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 2], [2, –], [–, Lexical], [Lexical, Analyzer], [Analyzer, ‹#›], [‹#›,  ], [ , Conversion], [Conversion, NFA], [NFA, DFA], [DFA, 1], [1, 2], [2, 5], [5, 3], [3, 4], [4, 6], [6, 7], [7, 8], [8, 0], [0, 𝜖], [𝜖, b], [b, 𝜖], [𝜖, b], [b, b], [b, 𝜖], [𝜖, 𝜖], [𝜖, 𝜖], [𝜖, 𝜖], [𝜖, 𝜖], [𝜖, 𝜖], [𝜖, Move(C], [Move(C, ,], [,, b], [b, )], [), =], [=,  ], [ , {], [{, 5], [5, }], [}, 𝜖-]]

>> Trigrams: 
[[B, =, {], [=, {, 1,2,3,4,6,7,8], [{, 1,2,3,4,6,7,8, }], [1,2,3,4,6,7,8, },      ], [},      , C=], [     , C=, {], [C=, {, 1], [{, 1, ,], [1, ,, 2], [,, 2, ,], [2, ,, 4], [,, 4, ,], [4, ,, 5], [,, 5, ,], [5, ,, 6], [,, 6, ,], [6, ,, 7], [,, 7, }], [7, }, b], [}, b, 10], [b, 10,  ], [10,  , 9], [ , 9, 	], [9, 	, States], [	, States, 	], [States, 	, 	], [	, 	, b], [	, b,  	], [b,  	, =], [ 	, =, {], [=, {, 0,1,2,4,7], [{, 0,1,2,4,7, }], [0,1,2,4,7, }, 	], [}, 	, B], [	, B, 	], [B, 	, C], [	, C,  	], [C,  	, B], [ 	, B, =], [B, =, {], [=, {, 1,2,3,4,6,7,8], [{, 1,2,3,4,6,7,8, }], [1,2,3,4,6,7,8, }, 	], [}, 	, B], [	, B, 	], [B, 	, D], [	, D,  	], [D,  	, C], [ 	, C, =], [C, =, {], [=, {, 1,2,4,5,6,7], [{, 1,2,4,5,6,7, }], [1,2,4,5,6,7, }, 	], [}, 	, B], [	, B, 	  	], [B, 	  	, D], [	  	, D, =], [D, =, {], [=, {, 1,2,4,5,6,7,9], [{, 1,2,4,5,6,7,9, }], [1,2,4,5,6,7,9, }, 		      ], [}, 		      , Prof.], [		      , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,   ], [Kagathara,   , #], [  , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 2], [Unit, 2, –], [2, –, Lexical], [–, Lexical, Analyzer], [Lexical, Analyzer, ‹#›], [Analyzer, ‹#›,  ], [‹#›,  , Conversion], [ , Conversion, NFA], [Conversion, NFA, DFA], [NFA, DFA, 1], [DFA, 1, 2], [1, 2, 5], [2, 5, 3], [5, 3, 4], [3, 4, 6], [4, 6, 7], [6, 7, 8], [7, 8, 0], [8, 0, 𝜖], [0, 𝜖, b], [𝜖, b, 𝜖], [b, 𝜖, b], [𝜖, b, b], [b, b, 𝜖], [b, 𝜖, 𝜖], [𝜖, 𝜖, 𝜖], [𝜖, 𝜖, 𝜖], [𝜖, 𝜖, 𝜖], [𝜖, 𝜖, 𝜖], [𝜖, 𝜖, Move(C], [𝜖, Move(C, ,], [Move(C, ,, b], [,, b, )], [b, ), =], [), =,  ], [=,  , {], [ , {, 5], [{, 5, }], [5, }, 𝜖-]]

>> Noun Phrases are: 
[1,2,3,4,6,7,8}      C=,  	A = {0,1,2,4,7}	B	C  	B, 1,2,3,4,6,7,8}	B	D  	C, {1,2,4,5,6,7}	B	  	D, 1,2,4,5,6,7,9}		      Prof. Dixita B Kagathara, (CD, Unit,  Conversion, NFA, DFA, a b b, 𝜖]

>> Named Entities are: 
[('1', 'DATE'), ('4', 'DATE'), ('5', 'DATE'), ('6', 'DATE'), ('7', 'CARDINAL'), ('0,1,2,4,7', 'DATE'), ('1,2,4,5,6,7', 'DATE'), ('1,2,4,5,6,7,9', 'DATE'), ('Dixita', 'PERSON'), ('Kagathara', 'PERSON'), ('Move(C', 'ORG')]


============================ Sentence 158 =============================

Closure(Move(C,b))=  {5, 6, 7, 1, 2, 4} ---- C    = {1,2,4,5,6,7}      C= {1, 2, 4, 5, 6, 7} 10  9 	States	a	b  	A = {0,1,2,4,7}	B	C  	B = {1,2,3,4,6,7,8}	B	D  	C = {1,2,4,5,6,7}	B	C  	D = {1,2,4,5,6,7,9}		      Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Conversion from NFA to DFA 1 2 5 3 4 6 7 8 0 𝜖 a b 𝜖 a b b 𝜖 𝜖 𝜖 𝜖 𝜖 𝜖 Move(D,a) = {3,8} 𝜖- 


>> Tokens are: 
[Closure(Move(C, ,, b))=,  , {, 5, ,, 6, ,, 7, ,, 1, ,, 2, ,, 4, }, ----, C,    , =, {, 1,2,4,5,6,7, },      , C=, {, 1, ,, 2, ,, 4, ,, 5, ,, 6, ,, 7, }, 10,  , 9, 	, States, 	, 	, b,  	, =, {, 0,1,2,4,7, }, 	, B, 	, C,  	, B, =, {, 1,2,3,4,6,7,8, }, 	, B, 	, D,  	, C, =, {, 1,2,4,5,6,7, }, 	, B, 	, C,  	, D, =, {, 1,2,4,5,6,7,9, }, 		      , Prof., Dixita, B, Kagathara,   , #, 2170701, (, CD, ),   , ,   , Unit, 2, –, Lexical, Analyzer, ‹#›,  , Conversion, NFA, DFA, 1, 2, 5, 3, 4, 6, 7, 8, 0, 𝜖, b, 𝜖, b, b, 𝜖, 𝜖, 𝜖, 𝜖, 𝜖, 𝜖, Move(D, ,, ), =, {, 3,8, }, 𝜖-] 

>> PoS Tags are: 
[('Closure(Move(C', 'PROPN'), (',', 'PUNCT'), ('b))=', 'PROPN'), (' ', 'SPACE'), ('{', 'PUNCT'), ('5', 'NUM'), (',', 'PUNCT'), ('6', 'NUM'), (',', 'PUNCT'), ('7', 'NUM'), (',', 'PUNCT'), ('1', 'NUM'), (',', 'PUNCT'), ('2', 'NUM'), (',', 'PUNCT'), ('4', 'NUM'), ('}', 'PUNCT'), ('----', 'PUNCT'), ('C', 'NOUN'), ('   ', 'SPACE'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('1,2,4,5,6,7', 'NUM'), ('}', 'PUNCT'), ('     ', 'SPACE'), ('C=', 'NOUN'), ('{', 'PUNCT'), ('1', 'NUM'), (',', 'PUNCT'), ('2', 'NUM'), (',', 'PUNCT'), ('4', 'NUM'), (',', 'PUNCT'), ('5', 'NUM'), (',', 'PUNCT'), ('6', 'NUM'), (',', 'PUNCT'), ('7', 'NUM'), ('}', 'PUNCT'), ('10', 'NUM'), (' ', 'SPACE'), ('9', 'NUM'), ('\t', 'SPACE'), ('States', 'PROPN'), ('\t', 'SPACE'), ('\t', 'SPACE'), ('b', 'X'), (' \t', 'SPACE'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('0,1,2,4,7', 'NOUN'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('B', 'PROPN'), ('\t', 'SPACE'), ('C', 'PROPN'), (' \t', 'SPACE'), ('B', 'NOUN'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('1,2,3,4,6,7,8', 'NUM'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('B', 'PROPN'), ('\t', 'SPACE'), ('D', 'PROPN'), (' \t', 'SPACE'), ('C', 'NOUN'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('1,2,4,5,6,7', 'NUM'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('B', 'PROPN'), ('\t', 'SPACE'), ('C', 'PROPN'), (' \t', 'SPACE'), ('D', 'PROPN'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('1,2,4,5,6,7,9', 'NUM'), ('}', 'PUNCT'), ('\t\t      ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('  ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'PROPN'), ('Analyzer', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE'), ('Conversion', 'PROPN'), ('NFA', 'PROPN'), ('DFA', 'PROPN'), ('1', 'NUM'), ('2', 'NUM'), ('5', 'NUM'), ('3', 'NUM'), ('4', 'NUM'), ('6', 'NUM'), ('7', 'NUM'), ('8', 'NUM'), ('0', 'NUM'), ('𝜖', 'NOUN'), ('b', 'NOUN'), ('𝜖', 'NOUN'), ('b', 'NOUN'), ('b', 'NOUN'), ('𝜖', 'PROPN'), ('𝜖', 'X'), ('𝜖', 'X'), ('𝜖', 'X'), ('𝜖', 'X'), ('𝜖', 'PROPN'), ('Move(D', 'PROPN'), (',', 'PUNCT'), (')', 'PUNCT'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('3,8', 'NUM'), ('}', 'PUNCT'), ('𝜖-', 'PROPN')] 

>> Dependency Tags are: 
[('Closure(Move(C', 'nmod'), (',', 'punct'), ('b))=', 'npadvmod'), (' ', 'nummod'), ('{', 'punct'), ('5', 'appos'), (',', 'punct'), ('6', 'nummod'), (',', 'punct'), ('7', 'nummod'), (',', 'punct'), ('1', 'nummod'), (',', 'punct'), ('2', 'nummod'), (',', 'punct'), ('4', 'nummod'), ('}', 'punct'), ('----', 'punct'), ('C', 'appos'), ('   ', 'nummod'), ('=', 'punct'), ('{', 'punct'), ('1,2,4,5,6,7', 'nmod'), ('}', 'punct'), ('     ', 'compound'), ('C=', 'appos'), ('{', 'punct'), ('1', 'nummod'), (',', 'punct'), ('2', 'nummod'), (',', 'punct'), ('4', 'nummod'), (',', 'punct'), ('5', 'nummod'), (',', 'punct'), ('6', 'nummod'), (',', 'punct'), ('7', 'nummod'), ('}', 'punct'), ('10', 'quantmod'), (' ', 'quantmod'), ('9', 'nummod'), ('\t', 'compound'), ('States', 'compound'), ('\t', 'appos'), ('\t', 'appos'), ('b', 'punct'), (' \t', 'compound'), ('=', 'punct'), ('{', 'punct'), ('0,1,2,4,7', 'nmod'), ('}', 'punct'), ('\t', 'compound'), ('B', 'compound'), ('\t', 'compound'), ('C', 'compound'), (' \t', 'compound'), ('B', 'appos'), ('=', 'punct'), ('{', 'punct'), ('1,2,3,4,6,7,8', 'dep'), ('}', 'punct'), ('\t', 'compound'), ('B', 'nmod'), ('\t', 'compound'), ('D', 'appos'), (' \t', 'compound'), ('C', 'nsubj'), ('=', 'punct'), ('{', 'punct'), ('1,2,4,5,6,7', 'nmod'), ('}', 'punct'), ('\t', 'compound'), ('B', 'compound'), ('\t', 'compound'), ('C', 'compound'), (' \t', 'compound'), ('D', 'appos'), ('=', 'punct'), ('{', 'punct'), ('1,2,4,5,6,7,9', 'nmod'), ('}', 'punct'), ('\t\t      ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('  ', 'punct'), ('#', 'nmod'), ('2170701', 'appos'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('2', 'nummod'), ('–', 'punct'), ('Lexical', 'compound'), ('Analyzer', 'npadvmod'), ('‹#›', 'punct'), (' ', 'compound'), ('Conversion', 'appos'), ('NFA', 'pobj'), ('DFA', 'pobj'), ('1', 'nummod'), ('2', 'compound'), ('5', 'nummod'), ('3', 'nummod'), ('4', 'nummod'), ('6', 'nummod'), ('7', 'nummod'), ('8', 'nummod'), ('0', 'nummod'), ('𝜖', 'dep'), ('b', 'compound'), ('𝜖', 'dep'), ('b', 'compound'), ('b', 'prep'), ('𝜖', 'pobj'), ('𝜖', 'nmod'), ('𝜖', 'nmod'), ('𝜖', 'nmod'), ('𝜖', 'nmod'), ('𝜖', 'compound'), ('Move(D', 'attr'), (',', 'punct'), (')', 'punct'), ('=', 'appos'), ('{', 'punct'), ('3,8', 'appos'), ('}', 'punct'), ('𝜖-', 'punct')]

>> Bigrams: 
[[Closure(Move(C, ,], [,, b))=], [b))=,  ], [ , {], [{, 5], [5, ,], [,, 6], [6, ,], [,, 7], [7, ,], [,, 1], [1, ,], [,, 2], [2, ,], [,, 4], [4, }], [}, ----], [----, C], [C,    ], [   , =], [=, {], [{, 1,2,4,5,6,7], [1,2,4,5,6,7, }], [},      ], [     , C=], [C=, {], [{, 1], [1, ,], [,, 2], [2, ,], [,, 4], [4, ,], [,, 5], [5, ,], [,, 6], [6, ,], [,, 7], [7, }], [}, 10], [10,  ], [ , 9], [9, 	], [	, States], [States, 	], [	, 	], [	, b], [b,  	], [ 	, =], [=, {], [{, 0,1,2,4,7], [0,1,2,4,7, }], [}, 	], [	, B], [B, 	], [	, C], [C,  	], [ 	, B], [B, =], [=, {], [{, 1,2,3,4,6,7,8], [1,2,3,4,6,7,8, }], [}, 	], [	, B], [B, 	], [	, D], [D,  	], [ 	, C], [C, =], [=, {], [{, 1,2,4,5,6,7], [1,2,4,5,6,7, }], [}, 	], [	, B], [B, 	], [	, C], [C,  	], [ 	, D], [D, =], [=, {], [{, 1,2,4,5,6,7,9], [1,2,4,5,6,7,9, }], [}, 		      ], [		      , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,   ], [  , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 2], [2, –], [–, Lexical], [Lexical, Analyzer], [Analyzer, ‹#›], [‹#›,  ], [ , Conversion], [Conversion, NFA], [NFA, DFA], [DFA, 1], [1, 2], [2, 5], [5, 3], [3, 4], [4, 6], [6, 7], [7, 8], [8, 0], [0, 𝜖], [𝜖, b], [b, 𝜖], [𝜖, b], [b, b], [b, 𝜖], [𝜖, 𝜖], [𝜖, 𝜖], [𝜖, 𝜖], [𝜖, 𝜖], [𝜖, 𝜖], [𝜖, Move(D], [Move(D, ,], [,, )], [), =], [=, {], [{, 3,8], [3,8, }], [}, 𝜖-]]

>> Trigrams: 
[[Closure(Move(C, ,, b))=], [,, b))=,  ], [b))=,  , {], [ , {, 5], [{, 5, ,], [5, ,, 6], [,, 6, ,], [6, ,, 7], [,, 7, ,], [7, ,, 1], [,, 1, ,], [1, ,, 2], [,, 2, ,], [2, ,, 4], [,, 4, }], [4, }, ----], [}, ----, C], [----, C,    ], [C,    , =], [   , =, {], [=, {, 1,2,4,5,6,7], [{, 1,2,4,5,6,7, }], [1,2,4,5,6,7, },      ], [},      , C=], [     , C=, {], [C=, {, 1], [{, 1, ,], [1, ,, 2], [,, 2, ,], [2, ,, 4], [,, 4, ,], [4, ,, 5], [,, 5, ,], [5, ,, 6], [,, 6, ,], [6, ,, 7], [,, 7, }], [7, }, 10], [}, 10,  ], [10,  , 9], [ , 9, 	], [9, 	, States], [	, States, 	], [States, 	, 	], [	, 	, b], [	, b,  	], [b,  	, =], [ 	, =, {], [=, {, 0,1,2,4,7], [{, 0,1,2,4,7, }], [0,1,2,4,7, }, 	], [}, 	, B], [	, B, 	], [B, 	, C], [	, C,  	], [C,  	, B], [ 	, B, =], [B, =, {], [=, {, 1,2,3,4,6,7,8], [{, 1,2,3,4,6,7,8, }], [1,2,3,4,6,7,8, }, 	], [}, 	, B], [	, B, 	], [B, 	, D], [	, D,  	], [D,  	, C], [ 	, C, =], [C, =, {], [=, {, 1,2,4,5,6,7], [{, 1,2,4,5,6,7, }], [1,2,4,5,6,7, }, 	], [}, 	, B], [	, B, 	], [B, 	, C], [	, C,  	], [C,  	, D], [ 	, D, =], [D, =, {], [=, {, 1,2,4,5,6,7,9], [{, 1,2,4,5,6,7,9, }], [1,2,4,5,6,7,9, }, 		      ], [}, 		      , Prof.], [		      , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,   ], [Kagathara,   , #], [  , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 2], [Unit, 2, –], [2, –, Lexical], [–, Lexical, Analyzer], [Lexical, Analyzer, ‹#›], [Analyzer, ‹#›,  ], [‹#›,  , Conversion], [ , Conversion, NFA], [Conversion, NFA, DFA], [NFA, DFA, 1], [DFA, 1, 2], [1, 2, 5], [2, 5, 3], [5, 3, 4], [3, 4, 6], [4, 6, 7], [6, 7, 8], [7, 8, 0], [8, 0, 𝜖], [0, 𝜖, b], [𝜖, b, 𝜖], [b, 𝜖, b], [𝜖, b, b], [b, b, 𝜖], [b, 𝜖, 𝜖], [𝜖, 𝜖, 𝜖], [𝜖, 𝜖, 𝜖], [𝜖, 𝜖, 𝜖], [𝜖, 𝜖, 𝜖], [𝜖, 𝜖, Move(D], [𝜖, Move(D, ,], [Move(D, ,, )], [,, ), =], [), =, {], [=, {, 3,8], [{, 3,8, }], [3,8, }, 𝜖-]]

>> Noun Phrases are: 
[C, {1,2,4,5,6,7}      C=,  	A = {0,1,2,4,7}	B	C  	B, 1,2,3,4,6,7,8}	B	D, 1,2,4,5,6,7}	B	C  	D, 1,2,4,5,6,7,9}		      Prof. Dixita B Kagathara, (CD, Unit,  Conversion, NFA, DFA, 𝜖, 𝜖 𝜖 𝜖 𝜖 𝜖 Move(D]

>> Named Entities are: 
[('Closure(Move(C', 'ORG'), ('5', 'DATE'), ('6', 'DATE'), ('7', 'DATE'), ('1', 'DATE'), ('2', 'DATE'), ('4', 'CARDINAL'), ('1,2,4,5,6,7', 'CARDINAL'), ('1', 'DATE'), ('4', 'DATE'), ('5', 'DATE'), ('6', 'DATE'), ('7', 'CARDINAL'), ('0,1,2,4,7', 'DATE'), ('1,2,4,5,6,7', 'DATE'), ('1,2,4,5,6,7,9', 'DATE'), ('Dixita', 'PERSON'), ('Kagathara', 'PERSON'), ('Move(D', 'ORG'), ('3,8', 'CARDINAL')]


============================ Sentence 159 =============================

Closure(Move(D,a)) = {3, 6, 7, 1, 2, 4, 8} ---- 


>> Tokens are: 
[Closure(Move(D, ,, ), ), =, {, 3, ,, 6, ,, 7, ,, 1, ,, 2, ,, 4, ,, 8, }, ----] 

>> PoS Tags are: 
[('Closure(Move(D', 'PROPN'), (',', 'PUNCT'), (')', 'PUNCT'), (')', 'PUNCT'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('3', 'NUM'), (',', 'PUNCT'), ('6', 'NUM'), (',', 'PUNCT'), ('7', 'NUM'), (',', 'PUNCT'), ('1', 'NUM'), (',', 'PUNCT'), ('2', 'NUM'), (',', 'PUNCT'), ('4', 'NUM'), (',', 'PUNCT'), ('8', 'NUM'), ('}', 'PUNCT'), ('----', 'PUNCT')] 

>> Dependency Tags are: 
[('Closure(Move(D', 'ROOT'), (',', 'punct'), (')', 'punct'), (')', 'punct'), ('=', 'appos'), ('{', 'punct'), ('3', 'appos'), (',', 'punct'), ('6', 'appos'), (',', 'punct'), ('7', 'appos'), (',', 'punct'), ('1', 'appos'), (',', 'punct'), ('2', 'appos'), (',', 'punct'), ('4', 'appos'), (',', 'punct'), ('8', 'appos'), ('}', 'punct'), ('----', 'punct')]

>> Bigrams: 
[[Closure(Move(D, ,], [,, )], [), )], [), =], [=, {], [{, 3], [3, ,], [,, 6], [6, ,], [,, 7], [7, ,], [,, 1], [1, ,], [,, 2], [2, ,], [,, 4], [4, ,], [,, 8], [8, }], [}, ----]]

>> Trigrams: 
[[Closure(Move(D, ,, )], [,, ), )], [), ), =], [), =, {], [=, {, 3], [{, 3, ,], [3, ,, 6], [,, 6, ,], [6, ,, 7], [,, 7, ,], [7, ,, 1], [,, 1, ,], [1, ,, 2], [,, 2, ,], [2, ,, 4], [,, 4, ,], [4, ,, 8], [,, 8, }], [8, }, ----]]

>> Noun Phrases are: 
[Closure(Move(D]

>> Named Entities are: 
[('3', 'CARDINAL'), ('6', 'DATE'), ('7', 'DATE'), ('1', 'DATE'), ('2', 'DATE'), ('4', 'DATE'), ('8', 'CARDINAL')]


============================ Sentence 160 =============================

B    = {1,2,3,4,6,7,8}      D= {1, 2, 4, 5, 6, 7, 9} 10  9 	States	a	b  	A = {0,1,2,4,7}	B	C  	B = {1,2,3,4,6,7,8}	B	D  	C = {1,2,4,5,6,7}	B	C  	D = {1,2,4,5,6,7,9}	B	      Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Conversion from NFA to DFA 1 2 5 3 4 6 7 8 0 𝜖 a b 𝜖 a b b 𝜖 𝜖 𝜖 𝜖 𝜖 𝜖 Move(D,b) = {5,10} 


>> Tokens are: 
[B,    , =, {, 1,2,3,4,6,7,8, },      , D=, {, 1, ,, 2, ,, 4, ,, 5, ,, 6, ,, 7, ,, 9, }, 10,  , 9, 	, States, 	, 	, b,  	, =, {, 0,1,2,4,7, }, 	, B, 	, C,  	, B, =, {, 1,2,3,4,6,7,8, }, 	, B, 	, D,  	, C, =, {, 1,2,4,5,6,7, }, 	, B, 	, C,  	, D, =, {, 1,2,4,5,6,7,9, }, 	, B, 	      , Prof., Dixita, B, Kagathara,   , #, 2170701, (, CD, ),   , ,   , Unit, 2, –, Lexical, Analyzer, ‹#›,  , Conversion, NFA, DFA, 1, 2, 5, 3, 4, 6, 7, 8, 0, 𝜖, b, 𝜖, b, b, 𝜖, 𝜖, 𝜖, 𝜖, 𝜖, 𝜖, Move(D, ,, b, ), =, {, 5,10, }] 

>> PoS Tags are: 
[('B', 'NOUN'), ('   ', 'SPACE'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('1,2,3,4,6,7,8', 'NUM'), ('}', 'PUNCT'), ('     ', 'SPACE'), ('D=', 'PROPN'), ('{', 'PUNCT'), ('1', 'NUM'), (',', 'PUNCT'), ('2', 'NUM'), (',', 'PUNCT'), ('4', 'NUM'), (',', 'PUNCT'), ('5', 'NUM'), (',', 'PUNCT'), ('6', 'NUM'), (',', 'PUNCT'), ('7', 'NUM'), (',', 'PUNCT'), ('9', 'NUM'), ('}', 'PUNCT'), ('10', 'NUM'), (' ', 'SPACE'), ('9', 'NUM'), ('\t', 'SPACE'), ('States', 'PROPN'), ('\t', 'SPACE'), ('\t', 'SPACE'), ('b', 'X'), (' \t', 'SPACE'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('0,1,2,4,7', 'NOUN'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('B', 'PROPN'), ('\t', 'SPACE'), ('C', 'PROPN'), (' \t', 'SPACE'), ('B', 'NOUN'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('1,2,3,4,6,7,8', 'NUM'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('B', 'PROPN'), ('\t', 'SPACE'), ('D', 'PROPN'), (' \t', 'SPACE'), ('C', 'NOUN'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('1,2,4,5,6,7', 'NUM'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('B', 'PROPN'), ('\t', 'SPACE'), ('C', 'PROPN'), (' \t', 'SPACE'), ('D', 'PROPN'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('1,2,4,5,6,7,9', 'NUM'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('B', 'PROPN'), ('\t      ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('  ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'PROPN'), ('Analyzer', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE'), ('Conversion', 'PROPN'), ('NFA', 'PROPN'), ('DFA', 'PROPN'), ('1', 'NUM'), ('2', 'NUM'), ('5', 'NUM'), ('3', 'NUM'), ('4', 'NUM'), ('6', 'NUM'), ('7', 'NUM'), ('8', 'NUM'), ('0', 'NUM'), ('𝜖', 'NOUN'), ('b', 'NOUN'), ('𝜖', 'NOUN'), ('b', 'NOUN'), ('b', 'NOUN'), ('𝜖', 'PROPN'), ('𝜖', 'X'), ('𝜖', 'X'), ('𝜖', 'X'), ('𝜖', 'X'), ('𝜖', 'PROPN'), ('Move(D', 'PROPN'), (',', 'PUNCT'), ('b', 'X'), (')', 'PUNCT'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('5,10', 'NUM'), ('}', 'PUNCT')] 

>> Dependency Tags are: 
[('B', 'nsubj'), ('   ', 'appos'), ('=', 'punct'), ('{', 'punct'), ('1,2,3,4,6,7,8', 'dep'), ('}', 'punct'), ('     ', 'appos'), ('D=', 'appos'), ('{', 'punct'), ('1', 'appos'), (',', 'punct'), ('2', 'appos'), (',', 'punct'), ('4', 'appos'), (',', 'punct'), ('5', 'appos'), (',', 'punct'), ('6', 'appos'), (',', 'punct'), ('7', 'appos'), (',', 'punct'), ('9', 'appos'), ('}', 'punct'), ('10', 'quantmod'), (' ', 'quantmod'), ('9', 'appos'), ('\t', 'compound'), ('States', 'compound'), ('\t', 'appos'), ('\t', 'appos'), ('b', 'prep'), (' \t', 'compound'), ('=', 'punct'), ('{', 'punct'), ('0,1,2,4,7', 'nmod'), ('}', 'punct'), ('\t', 'compound'), ('B', 'compound'), ('\t', 'compound'), ('C', 'compound'), (' \t', 'compound'), ('B', 'appos'), ('=', 'punct'), ('{', 'punct'), ('1,2,3,4,6,7,8', 'nmod'), ('}', 'punct'), ('\t', 'compound'), ('B', 'nmod'), ('\t', 'compound'), ('D', 'nmod'), (' \t', 'compound'), ('C', 'appos'), ('=', 'punct'), ('{', 'punct'), ('1,2,4,5,6,7', 'nmod'), ('}', 'punct'), ('\t', 'compound'), ('B', 'compound'), ('\t', 'compound'), ('C', 'compound'), (' \t', 'compound'), ('D', 'appos'), ('=', 'punct'), ('{', 'punct'), ('1,2,4,5,6,7,9', 'nmod'), ('}', 'punct'), ('\t', 'compound'), ('B', 'compound'), ('\t      ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('  ', 'prep'), ('#', 'nmod'), ('2170701', 'appos'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'dep'), ('  ', 'dobj'), ('Unit', 'appos'), ('2', 'nummod'), ('–', 'punct'), ('Lexical', 'compound'), ('Analyzer', 'nsubj'), ('‹#›', 'punct'), (' ', 'compound'), ('Conversion', 'appos'), ('NFA', 'pobj'), ('DFA', 'pobj'), ('1', 'nummod'), ('2', 'compound'), ('5', 'nummod'), ('3', 'nummod'), ('4', 'nummod'), ('6', 'nummod'), ('7', 'nummod'), ('8', 'nummod'), ('0', 'punct'), ('𝜖', 'ROOT'), ('b', 'npadvmod'), ('𝜖', 'npadvmod'), ('b', 'compound'), ('b', 'npadvmod'), ('𝜖', 'pobj'), ('𝜖', 'dep'), ('𝜖', 'dep'), ('𝜖', 'nmod'), ('𝜖', 'nmod'), ('𝜖', 'compound'), ('Move(D', 'npadvmod'), (',', 'punct'), ('b', 'appos'), (')', 'punct'), ('=', 'punct'), ('{', 'punct'), ('5,10', 'appos'), ('}', 'punct')]

>> Bigrams: 
[[B,    ], [   , =], [=, {], [{, 1,2,3,4,6,7,8], [1,2,3,4,6,7,8, }], [},      ], [     , D=], [D=, {], [{, 1], [1, ,], [,, 2], [2, ,], [,, 4], [4, ,], [,, 5], [5, ,], [,, 6], [6, ,], [,, 7], [7, ,], [,, 9], [9, }], [}, 10], [10,  ], [ , 9], [9, 	], [	, States], [States, 	], [	, 	], [	, b], [b,  	], [ 	, =], [=, {], [{, 0,1,2,4,7], [0,1,2,4,7, }], [}, 	], [	, B], [B, 	], [	, C], [C,  	], [ 	, B], [B, =], [=, {], [{, 1,2,3,4,6,7,8], [1,2,3,4,6,7,8, }], [}, 	], [	, B], [B, 	], [	, D], [D,  	], [ 	, C], [C, =], [=, {], [{, 1,2,4,5,6,7], [1,2,4,5,6,7, }], [}, 	], [	, B], [B, 	], [	, C], [C,  	], [ 	, D], [D, =], [=, {], [{, 1,2,4,5,6,7,9], [1,2,4,5,6,7,9, }], [}, 	], [	, B], [B, 	      ], [	      , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,   ], [  , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 2], [2, –], [–, Lexical], [Lexical, Analyzer], [Analyzer, ‹#›], [‹#›,  ], [ , Conversion], [Conversion, NFA], [NFA, DFA], [DFA, 1], [1, 2], [2, 5], [5, 3], [3, 4], [4, 6], [6, 7], [7, 8], [8, 0], [0, 𝜖], [𝜖, b], [b, 𝜖], [𝜖, b], [b, b], [b, 𝜖], [𝜖, 𝜖], [𝜖, 𝜖], [𝜖, 𝜖], [𝜖, 𝜖], [𝜖, 𝜖], [𝜖, Move(D], [Move(D, ,], [,, b], [b, )], [), =], [=, {], [{, 5,10], [5,10, }]]

>> Trigrams: 
[[B,    , =], [   , =, {], [=, {, 1,2,3,4,6,7,8], [{, 1,2,3,4,6,7,8, }], [1,2,3,4,6,7,8, },      ], [},      , D=], [     , D=, {], [D=, {, 1], [{, 1, ,], [1, ,, 2], [,, 2, ,], [2, ,, 4], [,, 4, ,], [4, ,, 5], [,, 5, ,], [5, ,, 6], [,, 6, ,], [6, ,, 7], [,, 7, ,], [7, ,, 9], [,, 9, }], [9, }, 10], [}, 10,  ], [10,  , 9], [ , 9, 	], [9, 	, States], [	, States, 	], [States, 	, 	], [	, 	, b], [	, b,  	], [b,  	, =], [ 	, =, {], [=, {, 0,1,2,4,7], [{, 0,1,2,4,7, }], [0,1,2,4,7, }, 	], [}, 	, B], [	, B, 	], [B, 	, C], [	, C,  	], [C,  	, B], [ 	, B, =], [B, =, {], [=, {, 1,2,3,4,6,7,8], [{, 1,2,3,4,6,7,8, }], [1,2,3,4,6,7,8, }, 	], [}, 	, B], [	, B, 	], [B, 	, D], [	, D,  	], [D,  	, C], [ 	, C, =], [C, =, {], [=, {, 1,2,4,5,6,7], [{, 1,2,4,5,6,7, }], [1,2,4,5,6,7, }, 	], [}, 	, B], [	, B, 	], [B, 	, C], [	, C,  	], [C,  	, D], [ 	, D, =], [D, =, {], [=, {, 1,2,4,5,6,7,9], [{, 1,2,4,5,6,7,9, }], [1,2,4,5,6,7,9, }, 	], [}, 	, B], [	, B, 	      ], [B, 	      , Prof.], [	      , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,   ], [Kagathara,   , #], [  , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 2], [Unit, 2, –], [2, –, Lexical], [–, Lexical, Analyzer], [Lexical, Analyzer, ‹#›], [Analyzer, ‹#›,  ], [‹#›,  , Conversion], [ , Conversion, NFA], [Conversion, NFA, DFA], [NFA, DFA, 1], [DFA, 1, 2], [1, 2, 5], [2, 5, 3], [5, 3, 4], [3, 4, 6], [4, 6, 7], [6, 7, 8], [7, 8, 0], [8, 0, 𝜖], [0, 𝜖, b], [𝜖, b, 𝜖], [b, 𝜖, b], [𝜖, b, b], [b, b, 𝜖], [b, 𝜖, 𝜖], [𝜖, 𝜖, 𝜖], [𝜖, 𝜖, 𝜖], [𝜖, 𝜖, 𝜖], [𝜖, 𝜖, 𝜖], [𝜖, 𝜖, Move(D], [𝜖, Move(D, ,], [Move(D, ,, b], [,, b, )], [b, ), =], [), =, {], [=, {, 5,10], [{, 5,10, }]]

>> Noun Phrases are: 
[B, D=,  	A = {0,1,2,4,7}	B	C  	B, 1,2,3,4,6,7,8}	B	D  	C, 1,2,4,5,6,7}	B	C  	D, {1,2,4,5,6,7,9}	B	      Prof. Dixita B Kagathara, (CD, Unit,  Conversion, NFA, DFA, 𝜖]

>> Named Entities are: 
[('1', 'CARDINAL'), ('4', 'DATE'), ('5', 'DATE'), ('6', 'DATE'), ('7', 'DATE'), ('9', 'CARDINAL'), ('0,1,2,4,7', 'DATE'), ('1,2,4,5,6,7', 'DATE'), ('1,2,4,5,6,7,9', 'DATE'), ('Dixita', 'PERSON'), ('Kagathara', 'PERSON'), ('Move(D', 'ORG')]


============================ Sentence 161 =============================

𝜖- 


>> Tokens are: 
[𝜖-] 

>> PoS Tags are: 
[('𝜖-', 'PROPN')] 

>> Dependency Tags are: 
[('𝜖-', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[𝜖-]

>> Named Entities are: 
[]


============================ Sentence 162 =============================

Closure(Move(D,b)) = {5, 6, 7, 1, 2, 4, 10} ---- 


>> Tokens are: 
[Closure(Move(D, ,, b, ), ), =, {, 5, ,, 6, ,, 7, ,, 1, ,, 2, ,, 4, ,, 10, }, ----] 

>> PoS Tags are: 
[('Closure(Move(D', 'X'), (',', 'PUNCT'), ('b', 'X'), (')', 'PUNCT'), (')', 'PUNCT'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('5', 'NUM'), (',', 'PUNCT'), ('6', 'NUM'), (',', 'PUNCT'), ('7', 'NUM'), (',', 'PUNCT'), ('1', 'NUM'), (',', 'PUNCT'), ('2', 'NUM'), (',', 'PUNCT'), ('4', 'NUM'), (',', 'PUNCT'), ('10', 'NUM'), ('}', 'PUNCT'), ('----', 'PUNCT')] 

>> Dependency Tags are: 
[('Closure(Move(D', 'ROOT'), (',', 'punct'), ('b', 'appos'), (')', 'punct'), (')', 'punct'), ('=', 'appos'), ('{', 'punct'), ('5', 'appos'), (',', 'punct'), ('6', 'npadvmod'), (',', 'punct'), ('7', 'appos'), (',', 'punct'), ('1', 'appos'), (',', 'punct'), ('2', 'appos'), (',', 'punct'), ('4', 'appos'), (',', 'punct'), ('10', 'appos'), ('}', 'punct'), ('----', 'punct')]

>> Bigrams: 
[[Closure(Move(D, ,], [,, b], [b, )], [), )], [), =], [=, {], [{, 5], [5, ,], [,, 6], [6, ,], [,, 7], [7, ,], [,, 1], [1, ,], [,, 2], [2, ,], [,, 4], [4, ,], [,, 10], [10, }], [}, ----]]

>> Trigrams: 
[[Closure(Move(D, ,, b], [,, b, )], [b, ), )], [), ), =], [), =, {], [=, {, 5], [{, 5, ,], [5, ,, 6], [,, 6, ,], [6, ,, 7], [,, 7, ,], [7, ,, 1], [,, 1, ,], [1, ,, 2], [,, 2, ,], [2, ,, 4], [,, 4, ,], [4, ,, 10], [,, 10, }], [10, }, ----]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('5', 'DATE'), ('6', 'DATE'), ('7', 'DATE'), ('1', 'DATE'), ('2', 'DATE'), ('4', 'DATE'), ('10', 'CARDINAL')]


============================ Sentence 163 =============================

E    = {1,2,4,5,6,7,10}      D= {1, 2, 4, 5, 6, 7, 9} 10  9 	States	a	b  	A = {0,1,2,4,7}	B	C  	B = {1,2,3,4,6,7,8}	B	D  	C = {1,2,4,5,6,7}	B	C  	D = {1,2,4,5,6,7,9}	B	E  	E = {1,2,4,5,6,7,10}		      Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Conversion from NFA to DFA 1 2 5 3 4 6 7 8 0 𝜖 a b 𝜖 a b b 𝜖 𝜖 𝜖 𝜖 𝜖 𝜖 Move(E,a) = {3,8} 𝜖- Closure(Move(E,a)) = 


>> Tokens are: 
[E,    , =, {, 1,2,4,5,6,7,10, },      , D=, {, 1, ,, 2, ,, 4, ,, 5, ,, 6, ,, 7, ,, 9, }, 10,  , 9, 	, States, 	, 	, b,  	, =, {, 0,1,2,4,7, }, 	, B, 	, C,  	, B, =, {, 1,2,3,4,6,7,8, }, 	, B, 	, D,  	, C, =, {, 1,2,4,5,6,7, }, 	, B, 	, C,  	, D, =, {, 1,2,4,5,6,7,9, }, 	, B, 	, E,  	, E, =, {, 1,2,4,5,6,7,10, }, 		      , Prof., Dixita, B, Kagathara,   , #, 2170701, (, CD, ),   , ,   , Unit, 2, –, Lexical, Analyzer, ‹#›,  , Conversion, NFA, DFA, 1, 2, 5, 3, 4, 6, 7, 8, 0, 𝜖, b, 𝜖, b, b, 𝜖, 𝜖, 𝜖, 𝜖, 𝜖, 𝜖, Move(E, ,, ), =, {, 3,8, }, 𝜖-, Closure(Move(E, ,, ), ), =] 

>> PoS Tags are: 
[('E', 'NOUN'), ('   ', 'SPACE'), ('=', 'NUM'), ('{', 'PUNCT'), ('1,2,4,5,6,7,10', 'NUM'), ('}', 'PUNCT'), ('     ', 'SPACE'), ('D=', 'PROPN'), ('{', 'PUNCT'), ('1', 'NUM'), (',', 'PUNCT'), ('2', 'NUM'), (',', 'PUNCT'), ('4', 'NUM'), (',', 'PUNCT'), ('5', 'NUM'), (',', 'PUNCT'), ('6', 'NUM'), (',', 'PUNCT'), ('7', 'NUM'), (',', 'PUNCT'), ('9', 'NUM'), ('}', 'PUNCT'), ('10', 'NUM'), (' ', 'SPACE'), ('9', 'NUM'), ('\t', 'SPACE'), ('States', 'PROPN'), ('\t', 'SPACE'), ('\t', 'SPACE'), ('b', 'X'), (' \t', 'SPACE'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('0,1,2,4,7', 'NOUN'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('B', 'PROPN'), ('\t', 'SPACE'), ('C', 'PROPN'), (' \t', 'SPACE'), ('B', 'NOUN'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('1,2,3,4,6,7,8', 'NUM'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('B', 'PROPN'), ('\t', 'SPACE'), ('D', 'PROPN'), (' \t', 'SPACE'), ('C', 'NOUN'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('1,2,4,5,6,7', 'NUM'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('B', 'PROPN'), ('\t', 'SPACE'), ('C', 'PROPN'), (' \t', 'SPACE'), ('D', 'PROPN'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('1,2,4,5,6,7,9', 'NUM'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('B', 'PROPN'), ('\t', 'SPACE'), ('E', 'NOUN'), (' \t', 'SPACE'), ('E', 'NOUN'), ('=', 'PROPN'), ('{', 'PUNCT'), ('1,2,4,5,6,7,10', 'NUM'), ('}', 'PUNCT'), ('\t\t      ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('  ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'PROPN'), ('Analyzer', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE'), ('Conversion', 'PROPN'), ('NFA', 'PROPN'), ('DFA', 'PROPN'), ('1', 'NUM'), ('2', 'NUM'), ('5', 'NUM'), ('3', 'NUM'), ('4', 'NUM'), ('6', 'NUM'), ('7', 'NUM'), ('8', 'NUM'), ('0', 'NUM'), ('𝜖', 'NOUN'), ('b', 'NOUN'), ('𝜖', 'NOUN'), ('b', 'NOUN'), ('b', 'NOUN'), ('𝜖', 'PROPN'), ('𝜖', 'X'), ('𝜖', 'X'), ('𝜖', 'X'), ('𝜖', 'X'), ('𝜖', 'X'), ('Move(E', 'PROPN'), (',', 'PUNCT'), (')', 'PUNCT'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('3,8', 'NUM'), ('}', 'PUNCT'), ('𝜖-', 'X'), ('Closure(Move(E', 'PROPN'), (',', 'PUNCT'), (')', 'PUNCT'), (')', 'PUNCT'), ('=', 'PUNCT')] 

>> Dependency Tags are: 
[('E', 'quantmod'), ('   ', 'appos'), ('=', 'punct'), ('{', 'punct'), ('1,2,4,5,6,7,10', 'nummod'), ('}', 'punct'), ('     ', 'compound'), ('D=', 'nsubj'), ('{', 'punct'), ('1', 'appos'), (',', 'punct'), ('2', 'nummod'), (',', 'punct'), ('4', 'appos'), (',', 'punct'), ('5', 'appos'), (',', 'punct'), ('6', 'appos'), (',', 'punct'), ('7', 'appos'), (',', 'punct'), ('9', 'appos'), ('}', 'punct'), ('10', 'quantmod'), (' ', 'quantmod'), ('9', 'nummod'), ('\t', 'compound'), ('States', 'compound'), ('\t', 'nsubj'), ('\t', 'appos'), ('b', 'punct'), (' \t', 'compound'), ('=', 'punct'), ('{', 'punct'), ('0,1,2,4,7', 'nmod'), ('}', 'punct'), ('\t', 'compound'), ('B', 'compound'), ('\t', 'compound'), ('C', 'compound'), (' \t', 'compound'), ('B', 'appos'), ('=', 'punct'), ('{', 'punct'), ('1,2,3,4,6,7,8', 'dep'), ('}', 'punct'), ('\t', 'compound'), ('B', 'nmod'), ('\t', 'compound'), ('D', 'appos'), (' \t', 'compound'), ('C', 'appos'), ('=', 'punct'), ('{', 'punct'), ('1,2,4,5,6,7', 'nmod'), ('}', 'punct'), ('\t', 'compound'), ('B', 'compound'), ('\t', 'compound'), ('C', 'compound'), (' \t', 'compound'), ('D', 'appos'), ('=', 'punct'), ('{', 'punct'), ('1,2,4,5,6,7,9', 'appos'), ('}', 'punct'), ('\t', 'compound'), ('B', 'compound'), ('\t', 'nmod'), ('E', 'nmod'), (' \t', 'amod'), ('E', 'appos'), ('=', 'appos'), ('{', 'punct'), ('1,2,4,5,6,7,10', 'nmod'), ('}', 'punct'), ('\t\t      ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('  ', 'appos'), ('#', 'nmod'), ('2170701', 'appos'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('2', 'nummod'), ('–', 'punct'), ('Lexical', 'compound'), ('Analyzer', 'npadvmod'), ('‹#›', 'punct'), (' ', 'compound'), ('Conversion', 'appos'), ('NFA', 'pobj'), ('DFA', 'pobj'), ('1', 'nummod'), ('2', 'compound'), ('5', 'nummod'), ('3', 'nummod'), ('4', 'nummod'), ('6', 'nummod'), ('7', 'nummod'), ('8', 'nummod'), ('0', 'nummod'), ('𝜖', 'dep'), ('b', 'compound'), ('𝜖', 'dep'), ('b', 'compound'), ('b', 'dep'), ('𝜖', 'pobj'), ('𝜖', 'nmod'), ('𝜖', 'nmod'), ('𝜖', 'nmod'), ('𝜖', 'nmod'), ('𝜖', 'det'), ('Move(E', 'dep'), (',', 'punct'), (')', 'punct'), ('=', 'appos'), ('{', 'punct'), ('3,8', 'appos'), ('}', 'punct'), ('𝜖-', 'prep'), ('Closure(Move(E', 'appos'), (',', 'punct'), (')', 'punct'), (')', 'punct'), ('=', 'dep')]

>> Bigrams: 
[[E,    ], [   , =], [=, {], [{, 1,2,4,5,6,7,10], [1,2,4,5,6,7,10, }], [},      ], [     , D=], [D=, {], [{, 1], [1, ,], [,, 2], [2, ,], [,, 4], [4, ,], [,, 5], [5, ,], [,, 6], [6, ,], [,, 7], [7, ,], [,, 9], [9, }], [}, 10], [10,  ], [ , 9], [9, 	], [	, States], [States, 	], [	, 	], [	, b], [b,  	], [ 	, =], [=, {], [{, 0,1,2,4,7], [0,1,2,4,7, }], [}, 	], [	, B], [B, 	], [	, C], [C,  	], [ 	, B], [B, =], [=, {], [{, 1,2,3,4,6,7,8], [1,2,3,4,6,7,8, }], [}, 	], [	, B], [B, 	], [	, D], [D,  	], [ 	, C], [C, =], [=, {], [{, 1,2,4,5,6,7], [1,2,4,5,6,7, }], [}, 	], [	, B], [B, 	], [	, C], [C,  	], [ 	, D], [D, =], [=, {], [{, 1,2,4,5,6,7,9], [1,2,4,5,6,7,9, }], [}, 	], [	, B], [B, 	], [	, E], [E,  	], [ 	, E], [E, =], [=, {], [{, 1,2,4,5,6,7,10], [1,2,4,5,6,7,10, }], [}, 		      ], [		      , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,   ], [  , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 2], [2, –], [–, Lexical], [Lexical, Analyzer], [Analyzer, ‹#›], [‹#›,  ], [ , Conversion], [Conversion, NFA], [NFA, DFA], [DFA, 1], [1, 2], [2, 5], [5, 3], [3, 4], [4, 6], [6, 7], [7, 8], [8, 0], [0, 𝜖], [𝜖, b], [b, 𝜖], [𝜖, b], [b, b], [b, 𝜖], [𝜖, 𝜖], [𝜖, 𝜖], [𝜖, 𝜖], [𝜖, 𝜖], [𝜖, 𝜖], [𝜖, Move(E], [Move(E, ,], [,, )], [), =], [=, {], [{, 3,8], [3,8, }], [}, 𝜖-], [𝜖-, Closure(Move(E], [Closure(Move(E, ,], [,, )], [), )], [), =]]

>> Trigrams: 
[[E,    , =], [   , =, {], [=, {, 1,2,4,5,6,7,10], [{, 1,2,4,5,6,7,10, }], [1,2,4,5,6,7,10, },      ], [},      , D=], [     , D=, {], [D=, {, 1], [{, 1, ,], [1, ,, 2], [,, 2, ,], [2, ,, 4], [,, 4, ,], [4, ,, 5], [,, 5, ,], [5, ,, 6], [,, 6, ,], [6, ,, 7], [,, 7, ,], [7, ,, 9], [,, 9, }], [9, }, 10], [}, 10,  ], [10,  , 9], [ , 9, 	], [9, 	, States], [	, States, 	], [States, 	, 	], [	, 	, b], [	, b,  	], [b,  	, =], [ 	, =, {], [=, {, 0,1,2,4,7], [{, 0,1,2,4,7, }], [0,1,2,4,7, }, 	], [}, 	, B], [	, B, 	], [B, 	, C], [	, C,  	], [C,  	, B], [ 	, B, =], [B, =, {], [=, {, 1,2,3,4,6,7,8], [{, 1,2,3,4,6,7,8, }], [1,2,3,4,6,7,8, }, 	], [}, 	, B], [	, B, 	], [B, 	, D], [	, D,  	], [D,  	, C], [ 	, C, =], [C, =, {], [=, {, 1,2,4,5,6,7], [{, 1,2,4,5,6,7, }], [1,2,4,5,6,7, }, 	], [}, 	, B], [	, B, 	], [B, 	, C], [	, C,  	], [C,  	, D], [ 	, D, =], [D, =, {], [=, {, 1,2,4,5,6,7,9], [{, 1,2,4,5,6,7,9, }], [1,2,4,5,6,7,9, }, 	], [}, 	, B], [	, B, 	], [B, 	, E], [	, E,  	], [E,  	, E], [ 	, E, =], [E, =, {], [=, {, 1,2,4,5,6,7,10], [{, 1,2,4,5,6,7,10, }], [1,2,4,5,6,7,10, }, 		      ], [}, 		      , Prof.], [		      , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,   ], [Kagathara,   , #], [  , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 2], [Unit, 2, –], [2, –, Lexical], [–, Lexical, Analyzer], [Lexical, Analyzer, ‹#›], [Analyzer, ‹#›,  ], [‹#›,  , Conversion], [ , Conversion, NFA], [Conversion, NFA, DFA], [NFA, DFA, 1], [DFA, 1, 2], [1, 2, 5], [2, 5, 3], [5, 3, 4], [3, 4, 6], [4, 6, 7], [6, 7, 8], [7, 8, 0], [8, 0, 𝜖], [0, 𝜖, b], [𝜖, b, 𝜖], [b, 𝜖, b], [𝜖, b, b], [b, b, 𝜖], [b, 𝜖, 𝜖], [𝜖, 𝜖, 𝜖], [𝜖, 𝜖, 𝜖], [𝜖, 𝜖, 𝜖], [𝜖, 𝜖, 𝜖], [𝜖, 𝜖, Move(E], [𝜖, Move(E, ,], [Move(E, ,, )], [,, ), =], [), =, {], [=, {, 3,8], [{, 3,8, }], [3,8, }, 𝜖-], [}, 𝜖-, Closure(Move(E], [𝜖-, Closure(Move(E, ,], [Closure(Move(E, ,, )], [,, ), )], [), ), =]]

>> Noun Phrases are: 
[1,2,4,5,6,7,10}      D=,  	A = {0,1,2,4,7}	B	C  	B, 1,2,3,4,6,7,8}	B	D,  	C, 1,2,4,5,6,7}	B	C  	D, }	B	E  	E, =, 1,2,4,5,6,7,10}		      Prof. Dixita B Kagathara, (CD, Unit,  Conversion, NFA, DFA, 𝜖, Closure(Move(E]

>> Named Entities are: 
[('1,2,4,5,6,7,10', 'CARDINAL'), ('1', 'CARDINAL'), ('4', 'DATE'), ('5', 'DATE'), ('6', 'DATE'), ('7', 'DATE'), ('9', 'CARDINAL'), ('0,1,2,4,7', 'DATE'), ('1,2,4,5,6,7', 'DATE'), ('1,2,4,5,6,7,10', 'CARDINAL'), ('Dixita', 'PERSON'), ('Kagathara', 'PERSON'), ('Move(E', 'GPE'), ('3,8', 'CARDINAL')]


============================ Sentence 164 =============================

{3, 6, 7, 1, 2, 4, 8} ---- 


>> Tokens are: 
[{, 3, ,, 6, ,, 7, ,, 1, ,, 2, ,, 4, ,, 8, }, ----] 

>> PoS Tags are: 
[('{', 'PUNCT'), ('3', 'NUM'), (',', 'PUNCT'), ('6', 'NUM'), (',', 'PUNCT'), ('7', 'NUM'), (',', 'PUNCT'), ('1', 'NUM'), (',', 'PUNCT'), ('2', 'NUM'), (',', 'PUNCT'), ('4', 'NUM'), (',', 'PUNCT'), ('8', 'NUM'), ('}', 'PUNCT'), ('----', 'PUNCT')] 

>> Dependency Tags are: 
[('{', 'punct'), ('3', 'ROOT'), (',', 'punct'), ('6', 'npadvmod'), (',', 'punct'), ('7', 'appos'), (',', 'punct'), ('1', 'nummod'), (',', 'punct'), ('2', 'nummod'), (',', 'punct'), ('4', 'appos'), (',', 'punct'), ('8', 'npadvmod'), ('}', 'punct'), ('----', 'punct')]

>> Bigrams: 
[[{, 3], [3, ,], [,, 6], [6, ,], [,, 7], [7, ,], [,, 1], [1, ,], [,, 2], [2, ,], [,, 4], [4, ,], [,, 8], [8, }], [}, ----]]

>> Trigrams: 
[[{, 3, ,], [3, ,, 6], [,, 6, ,], [6, ,, 7], [,, 7, ,], [7, ,, 1], [,, 1, ,], [1, ,, 2], [,, 2, ,], [2, ,, 4], [,, 4, ,], [4, ,, 8], [,, 8, }], [8, }, ----]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('3', 'CARDINAL'), ('6', 'DATE'), ('7', 'DATE'), ('1', 'DATE'), ('2', 'DATE'), ('4', 'DATE'), ('8', 'CARDINAL')]


============================ Sentence 165 =============================

B    = {1,2,3,4,6,7,8}      E= {1, 2, 4, 5, 6, 7, 10} 10  9 	States	a	b  	A = {0,1,2,4,7}	B	C  	B = {1,2,3,4,6,7,8}	B	D  	C = {1,2,4,5,6,7}	B	C  	D = {1,2,4,5,6,7,9}	B	E  	E = {1,2,4,5,6,7,10}	B	      Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Conversion from NFA to DFA  1 2 5 3 4 6 7 8 0 𝜖 a b 𝜖 a b b 𝜖 𝜖 𝜖 𝜖 𝜖 𝜖 Move(E,b)=  {5} 𝜖- Closure(Move(E,b))=  {5,6,7,1,2,4} ---- C    = {1,2,4,5,6,7} 	States	a	b  	A = {0,1,2,4,7}	B	C       	B = {1,2,3,4,6,7,8}	B	D  	C = {1,2,4,5,6,7}	B	C   E= {1, 2, 4, 5, 6, 7, 10} 	D = {1,2,4,5,6,7,9}	B	E  	E = {1,2,4,5,6,7,10}	B	C   10  9     Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Conversion from NFA to DFA    a b a b a    b a b b a Transition Table DFA Note:   


>> Tokens are: 
[B,    , =, {, 1,2,3,4,6,7,8, },      , E=, {, 1, ,, 2, ,, 4, ,, 5, ,, 6, ,, 7, ,, 10, }, 10,  , 9, 	, States, 	, 	, b,  	, =, {, 0,1,2,4,7, }, 	, B, 	, C,  	, B, =, {, 1,2,3,4,6,7,8, }, 	, B, 	, D,  	, C, =, {, 1,2,4,5,6,7, }, 	, B, 	, C,  	, D, =, {, 1,2,4,5,6,7,9, }, 	, B, 	, E,  	, E, =, {, 1,2,4,5,6,7,10, }, 	, B, 	      , Prof., Dixita, B, Kagathara,   , #, 2170701, (, CD, ),   , ,   , Unit, 2, –, Lexical, Analyzer, ‹#›,  , Conversion, NFA, DFA,  , 1, 2, 5, 3, 4, 6, 7, 8, 0, 𝜖, b, 𝜖, b, b, 𝜖, 𝜖, 𝜖, 𝜖, 𝜖, 𝜖, Move(E, ,, b)=,  , {, 5, }, 𝜖-, Closure(Move(E, ,, b))=,  , {, 5,6,7,1,2,4, }, ----, C,    , =, {, 1,2,4,5,6,7, }, 	, States, 	, 	, b,  	, =, {, 0,1,2,4,7, }, 	, B, 	, C,       	, B, =, {, 1,2,3,4,6,7,8, }, 	, B, 	, D,  	, C, =, {, 1,2,4,5,6,7, }, 	, B, 	, C,   , E=, {, 1, ,, 2, ,, 4, ,, 5, ,, 6, ,, 7, ,, 10, }, 	, D, =, {, 1,2,4,5,6,7,9, }, 	, B, 	, E,  	, E, =, {, 1,2,4,5,6,7,10, }, 	, B, 	, C,   , 10,  , 9,     , Prof., Dixita, B, Kagathara,   , #, 2170701, (, CD, ),   , ,   , Unit, 2, –, Lexical, Analyzer, ‹#›,  , Conversion, NFA, DFA,    , b, b,    , b, b, b, Transition, Table, DFA, Note, :,  ] 

>> PoS Tags are: 
[('B', 'NOUN'), ('   ', 'SPACE'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('1,2,3,4,6,7,8', 'NUM'), ('}', 'PUNCT'), ('     ', 'SPACE'), ('E=', 'NOUN'), ('{', 'PUNCT'), ('1', 'NUM'), (',', 'PUNCT'), ('2', 'NUM'), (',', 'PUNCT'), ('4', 'NUM'), (',', 'PUNCT'), ('5', 'NUM'), (',', 'PUNCT'), ('6', 'NUM'), (',', 'PUNCT'), ('7', 'NUM'), (',', 'PUNCT'), ('10', 'NUM'), ('}', 'PUNCT'), ('10', 'NUM'), (' ', 'SPACE'), ('9', 'NUM'), ('\t', 'SPACE'), ('States', 'PROPN'), ('\t', 'SPACE'), ('\t', 'SPACE'), ('b', 'X'), (' \t', 'SPACE'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('0,1,2,4,7', 'NOUN'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('B', 'PROPN'), ('\t', 'SPACE'), ('C', 'PROPN'), (' \t', 'SPACE'), ('B', 'NOUN'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('1,2,3,4,6,7,8', 'NUM'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('B', 'PROPN'), ('\t', 'SPACE'), ('D', 'PROPN'), (' \t', 'SPACE'), ('C', 'NOUN'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('1,2,4,5,6,7', 'NUM'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('B', 'PROPN'), ('\t', 'SPACE'), ('C', 'PROPN'), (' \t', 'SPACE'), ('D', 'PROPN'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('1,2,4,5,6,7,9', 'NUM'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('B', 'PROPN'), ('\t', 'SPACE'), ('E', 'NOUN'), (' \t', 'SPACE'), ('E', 'NOUN'), ('=', 'PROPN'), ('{', 'PUNCT'), ('1,2,4,5,6,7,10', 'NUM'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('B', 'PROPN'), ('\t      ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('  ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'PROPN'), ('Analyzer', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE'), ('Conversion', 'PROPN'), ('NFA', 'PROPN'), ('DFA', 'PROPN'), (' ', 'SPACE'), ('1', 'NUM'), ('2', 'NUM'), ('5', 'NUM'), ('3', 'NUM'), ('4', 'NUM'), ('6', 'NUM'), ('7', 'NUM'), ('8', 'NUM'), ('0', 'NUM'), ('𝜖', 'NOUN'), ('b', 'NOUN'), ('𝜖', 'NOUN'), ('b', 'NOUN'), ('b', 'NOUN'), ('𝜖', 'PROPN'), ('𝜖', 'X'), ('𝜖', 'X'), ('𝜖', 'X'), ('𝜖', 'X'), ('𝜖', 'X'), ('Move(E', 'NOUN'), (',', 'PUNCT'), ('b)=', 'X'), (' ', 'SPACE'), ('{', 'PUNCT'), ('5', 'NUM'), ('}', 'PUNCT'), ('𝜖-', 'X'), ('Closure(Move(E', 'NOUN'), (',', 'PUNCT'), ('b))=', 'PROPN'), (' ', 'SPACE'), ('{', 'PUNCT'), ('5,6,7,1,2,4', 'PROPN'), ('}', 'PUNCT'), ('----', 'PUNCT'), ('C', 'NOUN'), ('   ', 'SPACE'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('1,2,4,5,6,7', 'NUM'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('States', 'PROPN'), ('\t', 'SPACE'), ('\t', 'SPACE'), ('b', 'X'), (' \t', 'SPACE'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('0,1,2,4,7', 'NOUN'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('B', 'PROPN'), ('\t', 'SPACE'), ('C', 'PROPN'), ('      \t', 'SPACE'), ('B', 'PROPN'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('1,2,3,4,6,7,8', 'NUM'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('B', 'PROPN'), ('\t', 'SPACE'), ('D', 'PROPN'), (' \t', 'SPACE'), ('C', 'NOUN'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('1,2,4,5,6,7', 'NUM'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('B', 'PROPN'), ('\t', 'SPACE'), ('C', 'PROPN'), ('  ', 'SPACE'), ('E=', 'NOUN'), ('{', 'PUNCT'), ('1', 'NUM'), (',', 'PUNCT'), ('2', 'NUM'), (',', 'PUNCT'), ('4', 'NUM'), (',', 'PUNCT'), ('5', 'NUM'), (',', 'PUNCT'), ('6', 'NUM'), (',', 'PUNCT'), ('7', 'NUM'), (',', 'PUNCT'), ('10', 'NUM'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('D', 'PROPN'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('1,2,4,5,6,7,9', 'NUM'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('B', 'PROPN'), ('\t', 'SPACE'), ('E', 'NOUN'), (' \t', 'SPACE'), ('E', 'NOUN'), ('=', 'PROPN'), ('{', 'PUNCT'), ('1,2,4,5,6,7,10', 'NUM'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('B', 'PROPN'), ('\t', 'SPACE'), ('C', 'PROPN'), ('  ', 'SPACE'), ('10', 'NUM'), (' ', 'SPACE'), ('9', 'NUM'), ('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('  ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'PROPN'), ('Analyzer', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE'), ('Conversion', 'PROPN'), ('NFA', 'PROPN'), ('DFA', 'VERB'), ('   ', 'SPACE'), ('b', 'NOUN'), ('b', 'NOUN'), ('   ', 'SPACE'), ('b', 'NOUN'), ('b', 'NOUN'), ('b', 'NOUN'), ('Transition', 'PROPN'), ('Table', 'NOUN'), ('DFA', 'NOUN'), ('Note', 'NOUN'), (':', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('B', 'quantmod'), ('   ', 'appos'), ('=', 'quantmod'), ('{', 'punct'), ('1,2,3,4,6,7,8', 'dep'), ('}', 'punct'), ('     ', 'compound'), ('E=', 'quantmod'), ('{', 'punct'), ('1', 'nmod'), (',', 'punct'), ('2', 'nummod'), (',', 'punct'), ('4', 'nummod'), (',', 'punct'), ('5', 'nummod'), (',', 'punct'), ('6', 'nummod'), (',', 'punct'), ('7', 'nummod'), (',', 'punct'), ('10', 'nummod'), ('}', 'punct'), ('10', 'quantmod'), (' ', 'quantmod'), ('9', 'nummod'), ('\t', 'compound'), ('States', 'compound'), ('\t', 'nsubj'), ('\t', 'appos'), ('b', 'punct'), (' \t', 'compound'), ('=', 'punct'), ('{', 'punct'), ('0,1,2,4,7', 'nmod'), ('}', 'punct'), ('\t', 'compound'), ('B', 'compound'), ('\t', 'compound'), ('C', 'compound'), (' \t', 'compound'), ('B', 'appos'), ('=', 'punct'), ('{', 'punct'), ('1,2,3,4,6,7,8', 'dep'), ('}', 'punct'), ('\t', 'compound'), ('B', 'nmod'), ('\t', 'compound'), ('D', 'appos'), (' \t', 'compound'), ('C', 'appos'), ('=', 'punct'), ('{', 'punct'), ('1,2,4,5,6,7', 'nmod'), ('}', 'punct'), ('\t', 'compound'), ('B', 'compound'), ('\t', 'compound'), ('C', 'compound'), (' \t', 'compound'), ('D', 'appos'), ('=', 'punct'), ('{', 'punct'), ('1,2,4,5,6,7,9', 'appos'), ('}', 'punct'), ('\t', 'compound'), ('B', 'compound'), ('\t', 'nmod'), ('E', 'nmod'), (' \t', 'amod'), ('E', 'appos'), ('=', 'punct'), ('{', 'punct'), ('1,2,4,5,6,7,10', 'nmod'), ('}', 'punct'), ('\t', 'compound'), ('B', 'compound'), ('\t      ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('  ', 'dep'), ('#', 'nmod'), ('2170701', 'npadvmod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'dep'), ('  ', 'conj'), ('Unit', 'appos'), ('2', 'nummod'), ('–', 'punct'), ('Lexical', 'compound'), ('Analyzer', 'nsubj'), ('‹#›', 'punct'), (' ', 'compound'), ('Conversion', 'appos'), ('NFA', 'pobj'), ('DFA', 'advcl'), (' ', 'dobj'), ('1', 'compound'), ('2', 'compound'), ('5', 'appos'), ('3', 'nummod'), ('4', 'appos'), ('6', 'appos'), ('7', 'appos'), ('8', 'punct'), ('0', 'appos'), ('𝜖', 'dep'), ('b', 'npadvmod'), ('𝜖', 'npadvmod'), ('b', 'compound'), ('b', 'npadvmod'), ('𝜖', 'pobj'), ('𝜖', 'dep'), ('𝜖', 'dep'), ('𝜖', 'nmod'), ('𝜖', 'nmod'), ('𝜖', 'compound'), ('Move(E', 'npadvmod'), (',', 'punct'), ('b)=', 'npadvmod'), (' ', 'dep'), ('{', 'punct'), ('5', 'appos'), ('}', 'punct'), ('𝜖-', 'appos'), ('Closure(Move(E', 'npadvmod'), (',', 'punct'), ('b))=', 'npadvmod'), (' ', 'nummod'), ('{', 'punct'), ('5,6,7,1,2,4', 'appos'), ('}', 'punct'), ('----', 'punct'), ('C', 'appos'), ('   ', 'nummod'), ('=', 'appos'), ('{', 'punct'), ('1,2,4,5,6,7', 'appos'), ('}', 'punct'), ('\t', 'compound'), ('States', 'compound'), ('\t', 'appos'), ('\t', 'appos'), ('b', 'punct'), (' \t', 'compound'), ('=', 'punct'), ('{', 'punct'), ('0,1,2,4,7', 'nmod'), ('}', 'punct'), ('\t', 'compound'), ('B', 'compound'), ('\t', 'compound'), ('C', 'compound'), ('      \t', 'compound'), ('B', 'appos'), ('=', 'punct'), ('{', 'punct'), ('1,2,3,4,6,7,8', 'nmod'), ('}', 'punct'), ('\t', 'compound'), ('B', 'nmod'), ('\t', 'compound'), ('D', 'nmod'), (' \t', 'compound'), ('C', 'appos'), ('=', 'punct'), ('{', 'punct'), ('1,2,4,5,6,7', 'nummod'), ('}', 'punct'), ('\t', 'compound'), ('B', 'compound'), ('\t', 'compound'), ('C', 'compound'), ('  ', 'compound'), ('E=', 'npadvmod'), ('{', 'punct'), ('1', 'appos'), (',', 'punct'), ('2', 'appos'), (',', 'punct'), ('4', 'appos'), (',', 'punct'), ('5', 'appos'), (',', 'punct'), ('6', 'appos'), (',', 'punct'), ('7', 'appos'), (',', 'punct'), ('10', 'nummod'), ('}', 'punct'), ('\t', 'compound'), ('D', 'nsubj'), ('=', 'punct'), ('{', 'punct'), ('1,2,4,5,6,7,9', 'appos'), ('}', 'punct'), ('\t', 'compound'), ('B', 'compound'), ('\t', 'nmod'), ('E', 'nmod'), (' \t', 'amod'), ('E', 'appos'), ('=', 'punct'), ('{', 'punct'), ('1,2,4,5,6,7,10', 'nmod'), ('}', 'punct'), ('\t', 'compound'), ('B', 'compound'), ('\t', 'compound'), ('C', 'appos'), ('  ', 'dep'), ('10', 'nummod'), (' ', 'npadvmod'), ('9', 'nummod'), ('    ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('  ', 'prep'), ('#', 'nmod'), ('2170701', 'npadvmod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'advcl'), ('  ', 'punct'), ('Unit', 'appos'), ('2', 'nummod'), ('–', 'punct'), ('Lexical', 'compound'), ('Analyzer', 'ROOT'), ('‹#›', 'punct'), (' ', 'compound'), ('Conversion', 'appos'), ('NFA', 'pobj'), ('DFA', 'relcl'), ('   ', 'dobj'), ('b', 'appos'), ('b', 'appos'), ('   ', 'appos'), ('b', 'prep'), ('b', 'quantmod'), ('b', 'appos'), ('Transition', 'compound'), ('Table', 'compound'), ('DFA', 'compound'), ('Note', 'appos'), (':', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[B,    ], [   , =], [=, {], [{, 1,2,3,4,6,7,8], [1,2,3,4,6,7,8, }], [},      ], [     , E=], [E=, {], [{, 1], [1, ,], [,, 2], [2, ,], [,, 4], [4, ,], [,, 5], [5, ,], [,, 6], [6, ,], [,, 7], [7, ,], [,, 10], [10, }], [}, 10], [10,  ], [ , 9], [9, 	], [	, States], [States, 	], [	, 	], [	, b], [b,  	], [ 	, =], [=, {], [{, 0,1,2,4,7], [0,1,2,4,7, }], [}, 	], [	, B], [B, 	], [	, C], [C,  	], [ 	, B], [B, =], [=, {], [{, 1,2,3,4,6,7,8], [1,2,3,4,6,7,8, }], [}, 	], [	, B], [B, 	], [	, D], [D,  	], [ 	, C], [C, =], [=, {], [{, 1,2,4,5,6,7], [1,2,4,5,6,7, }], [}, 	], [	, B], [B, 	], [	, C], [C,  	], [ 	, D], [D, =], [=, {], [{, 1,2,4,5,6,7,9], [1,2,4,5,6,7,9, }], [}, 	], [	, B], [B, 	], [	, E], [E,  	], [ 	, E], [E, =], [=, {], [{, 1,2,4,5,6,7,10], [1,2,4,5,6,7,10, }], [}, 	], [	, B], [B, 	      ], [	      , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,   ], [  , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 2], [2, –], [–, Lexical], [Lexical, Analyzer], [Analyzer, ‹#›], [‹#›,  ], [ , Conversion], [Conversion, NFA], [NFA, DFA], [DFA,  ], [ , 1], [1, 2], [2, 5], [5, 3], [3, 4], [4, 6], [6, 7], [7, 8], [8, 0], [0, 𝜖], [𝜖, b], [b, 𝜖], [𝜖, b], [b, b], [b, 𝜖], [𝜖, 𝜖], [𝜖, 𝜖], [𝜖, 𝜖], [𝜖, 𝜖], [𝜖, 𝜖], [𝜖, Move(E], [Move(E, ,], [,, b)=], [b)=,  ], [ , {], [{, 5], [5, }], [}, 𝜖-], [𝜖-, Closure(Move(E], [Closure(Move(E, ,], [,, b))=], [b))=,  ], [ , {], [{, 5,6,7,1,2,4], [5,6,7,1,2,4, }], [}, ----], [----, C], [C,    ], [   , =], [=, {], [{, 1,2,4,5,6,7], [1,2,4,5,6,7, }], [}, 	], [	, States], [States, 	], [	, 	], [	, b], [b,  	], [ 	, =], [=, {], [{, 0,1,2,4,7], [0,1,2,4,7, }], [}, 	], [	, B], [B, 	], [	, C], [C,       	], [      	, B], [B, =], [=, {], [{, 1,2,3,4,6,7,8], [1,2,3,4,6,7,8, }], [}, 	], [	, B], [B, 	], [	, D], [D,  	], [ 	, C], [C, =], [=, {], [{, 1,2,4,5,6,7], [1,2,4,5,6,7, }], [}, 	], [	, B], [B, 	], [	, C], [C,   ], [  , E=], [E=, {], [{, 1], [1, ,], [,, 2], [2, ,], [,, 4], [4, ,], [,, 5], [5, ,], [,, 6], [6, ,], [,, 7], [7, ,], [,, 10], [10, }], [}, 	], [	, D], [D, =], [=, {], [{, 1,2,4,5,6,7,9], [1,2,4,5,6,7,9, }], [}, 	], [	, B], [B, 	], [	, E], [E,  	], [ 	, E], [E, =], [=, {], [{, 1,2,4,5,6,7,10], [1,2,4,5,6,7,10, }], [}, 	], [	, B], [B, 	], [	, C], [C,   ], [  , 10], [10,  ], [ , 9], [9,     ], [    , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,   ], [  , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 2], [2, –], [–, Lexical], [Lexical, Analyzer], [Analyzer, ‹#›], [‹#›,  ], [ , Conversion], [Conversion, NFA], [NFA, DFA], [DFA,    ], [   , b], [b, b], [b,    ], [   , b], [b, b], [b, b], [b, Transition], [Transition, Table], [Table, DFA], [DFA, Note], [Note, :], [:,  ]]

>> Trigrams: 
[[B,    , =], [   , =, {], [=, {, 1,2,3,4,6,7,8], [{, 1,2,3,4,6,7,8, }], [1,2,3,4,6,7,8, },      ], [},      , E=], [     , E=, {], [E=, {, 1], [{, 1, ,], [1, ,, 2], [,, 2, ,], [2, ,, 4], [,, 4, ,], [4, ,, 5], [,, 5, ,], [5, ,, 6], [,, 6, ,], [6, ,, 7], [,, 7, ,], [7, ,, 10], [,, 10, }], [10, }, 10], [}, 10,  ], [10,  , 9], [ , 9, 	], [9, 	, States], [	, States, 	], [States, 	, 	], [	, 	, b], [	, b,  	], [b,  	, =], [ 	, =, {], [=, {, 0,1,2,4,7], [{, 0,1,2,4,7, }], [0,1,2,4,7, }, 	], [}, 	, B], [	, B, 	], [B, 	, C], [	, C,  	], [C,  	, B], [ 	, B, =], [B, =, {], [=, {, 1,2,3,4,6,7,8], [{, 1,2,3,4,6,7,8, }], [1,2,3,4,6,7,8, }, 	], [}, 	, B], [	, B, 	], [B, 	, D], [	, D,  	], [D,  	, C], [ 	, C, =], [C, =, {], [=, {, 1,2,4,5,6,7], [{, 1,2,4,5,6,7, }], [1,2,4,5,6,7, }, 	], [}, 	, B], [	, B, 	], [B, 	, C], [	, C,  	], [C,  	, D], [ 	, D, =], [D, =, {], [=, {, 1,2,4,5,6,7,9], [{, 1,2,4,5,6,7,9, }], [1,2,4,5,6,7,9, }, 	], [}, 	, B], [	, B, 	], [B, 	, E], [	, E,  	], [E,  	, E], [ 	, E, =], [E, =, {], [=, {, 1,2,4,5,6,7,10], [{, 1,2,4,5,6,7,10, }], [1,2,4,5,6,7,10, }, 	], [}, 	, B], [	, B, 	      ], [B, 	      , Prof.], [	      , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,   ], [Kagathara,   , #], [  , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 2], [Unit, 2, –], [2, –, Lexical], [–, Lexical, Analyzer], [Lexical, Analyzer, ‹#›], [Analyzer, ‹#›,  ], [‹#›,  , Conversion], [ , Conversion, NFA], [Conversion, NFA, DFA], [NFA, DFA,  ], [DFA,  , 1], [ , 1, 2], [1, 2, 5], [2, 5, 3], [5, 3, 4], [3, 4, 6], [4, 6, 7], [6, 7, 8], [7, 8, 0], [8, 0, 𝜖], [0, 𝜖, b], [𝜖, b, 𝜖], [b, 𝜖, b], [𝜖, b, b], [b, b, 𝜖], [b, 𝜖, 𝜖], [𝜖, 𝜖, 𝜖], [𝜖, 𝜖, 𝜖], [𝜖, 𝜖, 𝜖], [𝜖, 𝜖, 𝜖], [𝜖, 𝜖, Move(E], [𝜖, Move(E, ,], [Move(E, ,, b)=], [,, b)=,  ], [b)=,  , {], [ , {, 5], [{, 5, }], [5, }, 𝜖-], [}, 𝜖-, Closure(Move(E], [𝜖-, Closure(Move(E, ,], [Closure(Move(E, ,, b))=], [,, b))=,  ], [b))=,  , {], [ , {, 5,6,7,1,2,4], [{, 5,6,7,1,2,4, }], [5,6,7,1,2,4, }, ----], [}, ----, C], [----, C,    ], [C,    , =], [   , =, {], [=, {, 1,2,4,5,6,7], [{, 1,2,4,5,6,7, }], [1,2,4,5,6,7, }, 	], [}, 	, States], [	, States, 	], [States, 	, 	], [	, 	, b], [	, b,  	], [b,  	, =], [ 	, =, {], [=, {, 0,1,2,4,7], [{, 0,1,2,4,7, }], [0,1,2,4,7, }, 	], [}, 	, B], [	, B, 	], [B, 	, C], [	, C,       	], [C,       	, B], [      	, B, =], [B, =, {], [=, {, 1,2,3,4,6,7,8], [{, 1,2,3,4,6,7,8, }], [1,2,3,4,6,7,8, }, 	], [}, 	, B], [	, B, 	], [B, 	, D], [	, D,  	], [D,  	, C], [ 	, C, =], [C, =, {], [=, {, 1,2,4,5,6,7], [{, 1,2,4,5,6,7, }], [1,2,4,5,6,7, }, 	], [}, 	, B], [	, B, 	], [B, 	, C], [	, C,   ], [C,   , E=], [  , E=, {], [E=, {, 1], [{, 1, ,], [1, ,, 2], [,, 2, ,], [2, ,, 4], [,, 4, ,], [4, ,, 5], [,, 5, ,], [5, ,, 6], [,, 6, ,], [6, ,, 7], [,, 7, ,], [7, ,, 10], [,, 10, }], [10, }, 	], [}, 	, D], [	, D, =], [D, =, {], [=, {, 1,2,4,5,6,7,9], [{, 1,2,4,5,6,7,9, }], [1,2,4,5,6,7,9, }, 	], [}, 	, B], [	, B, 	], [B, 	, E], [	, E,  	], [E,  	, E], [ 	, E, =], [E, =, {], [=, {, 1,2,4,5,6,7,10], [{, 1,2,4,5,6,7,10, }], [1,2,4,5,6,7,10, }, 	], [}, 	, B], [	, B, 	], [B, 	, C], [	, C,   ], [C,   , 10], [  , 10,  ], [10,  , 9], [ , 9,     ], [9,     , Prof.], [    , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,   ], [Kagathara,   , #], [  , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 2], [Unit, 2, –], [2, –, Lexical], [–, Lexical, Analyzer], [Lexical, Analyzer, ‹#›], [Analyzer, ‹#›,  ], [‹#›,  , Conversion], [ , Conversion, NFA], [Conversion, NFA, DFA], [NFA, DFA,    ], [DFA,    , b], [   , b, b], [b, b,    ], [b,    , b], [   , b, b], [b, b, b], [b, b, Transition], [b, Transition, Table], [Transition, Table, DFA], [Table, DFA, Note], [DFA, Note, :], [Note, :,  ]]

>> Noun Phrases are: 
[ 	A = {0,1,2,4,7}	B	C  	B, 1,2,3,4,6,7,8}	B	D,  	C, 1,2,4,5,6,7}	B	C  	D, }	B	E  	E, 1,2,4,5,6,7,10}	B	      Prof. Dixita B Kagathara, (CD, Unit,  Conversion, NFA, 𝜖, 5,6,7,1,2,4, C, b  	A = {0,1,2,4,7}	B	C       	B, 1,2,3,4,6,7,8}	B	D  	C, }	B	E  	E, 1,2,4,5,6,7,10}	B	C, 9     Prof. Dixita B Kagathara, (CD, Unit,  Conversion, NFA, a b, a b, a b b, a Transition Table DFA Note]

>> Named Entities are: 
[('1', 'DATE'), ('4', 'DATE'), ('5', 'DATE'), ('6', 'DATE'), ('7', 'DATE'), ('10', 'CARDINAL'), ('0,1,2,4,7', 'DATE'), ('1,2,4,5,6,7', 'DATE'), ('1,2,4,5,6,7,10', 'CARDINAL'), ('Dixita', 'PERSON'), ('Kagathara', 'PERSON'), ('1 2 5', 'DATE'), ('Move(E', 'GPE'), ('5', 'CARDINAL'), ('1,2,4,5,6,7', 'DATE'), ('States', 'GPE'), ('0,1,2,4,7', 'DATE'), ('1,2,4,5,6,7', 'DATE'), ('4', 'DATE'), ('5', 'DATE'), ('6', 'DATE'), ('7', 'DATE'), ('10', 'CARDINAL'), ('1,2,4,5,6,7,10', 'CARDINAL'), ('10', 'CARDINAL'), ('9', 'CARDINAL'), ('Dixita', 'PERSON'), ('Kagathara', 'PERSON'), ('NFA', 'ORG')]


============================ Sentence 166 =============================

Accepting state in NFA is 10 10 is element of E   


>> Tokens are: 
[Accepting, state, NFA, 10, 10, element, E,  ] 

>> PoS Tags are: 
[('Accepting', 'VERB'), ('state', 'NOUN'), ('NFA', 'PROPN'), ('10', 'NUM'), ('10', 'NUM'), ('element', 'NOUN'), ('E', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Accepting', 'csubj'), ('state', 'dobj'), ('NFA', 'pobj'), ('10', 'nummod'), ('10', 'attr'), ('element', 'attr'), ('E', 'pobj'), (' ', 'punct')]

>> Bigrams: 
[[Accepting, state], [state, NFA], [NFA, 10], [10, 10], [10, element], [element, E], [E,  ]]

>> Trigrams: 
[[Accepting, state, NFA], [state, NFA, 10], [NFA, 10, 10], [10, 10, element], [10, element, E], [element, E,  ]]

>> Noun Phrases are: 
[state, NFA, element, E]

>> Named Entities are: 
[('NFA', 'ORG'), ('10 10', 'CARDINAL')]


============================ Sentence 167 =============================

So, E is acceptance state in DFA 	States 


>> Tokens are: 
[,, E, acceptance, state, DFA, 	, States] 

>> PoS Tags are: 
[(',', 'PUNCT'), ('E', 'NOUN'), ('acceptance', 'NOUN'), ('state', 'NOUN'), ('DFA', 'PROPN'), ('\t', 'SPACE'), ('States', 'PROPN')] 

>> Dependency Tags are: 
[(',', 'punct'), ('E', 'nsubj'), ('acceptance', 'compound'), ('state', 'attr'), ('DFA', 'compound'), ('\t', 'compound'), ('States', 'pobj')]

>> Bigrams: 
[[,, E], [E, acceptance], [acceptance, state], [state, DFA], [DFA, 	], [	, States]]

>> Trigrams: 
[[,, E, acceptance], [E, acceptance, state], [acceptance, state, DFA], [state, DFA, 	], [DFA, 	, States]]

>> Noun Phrases are: 
[E, acceptance state, DFA 	States]

>> Named Entities are: 
[('States', 'GPE')]


============================ Sentence 168 =============================

	a	b  	A = {0,1,2,4,7}	B	C  	B = {1,2,3,4,6,7,8}	B	D  	C = {1,2,4,5,6,7}	B	C  	D = {1,2,4,5,6,7,9}	B	E  	E = {1,2,4,5,6,7,10}	B	C     Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›   


>> Tokens are: 
[	, 	, b,  	, =, {, 0,1,2,4,7, }, 	, B, 	, C,  	, B, =, {, 1,2,3,4,6,7,8, }, 	, B, 	, D,  	, C, =, {, 1,2,4,5,6,7, }, 	, B, 	, C,  	, D, =, {, 1,2,4,5,6,7,9, }, 	, B, 	, E,  	, E, =, {, 1,2,4,5,6,7,10, }, 	, B, 	, C,     , Prof., Dixita, B, Kagathara,   , #, 2170701, (, CD, ),   , ,   , Unit, 2, –, Lexical, Analyzer, ‹#›,  ] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('\t', 'SPACE'), ('b', 'X'), (' \t', 'SPACE'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('0,1,2,4,7', 'NOUN'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('B', 'PROPN'), ('\t', 'SPACE'), ('C', 'PROPN'), (' \t', 'SPACE'), ('B', 'NOUN'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('1,2,3,4,6,7,8', 'NUM'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('B', 'PROPN'), ('\t', 'SPACE'), ('D', 'PROPN'), (' \t', 'SPACE'), ('C', 'NOUN'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('1,2,4,5,6,7', 'NUM'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('B', 'PROPN'), ('\t', 'SPACE'), ('C', 'PROPN'), (' \t', 'SPACE'), ('D', 'PROPN'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('1,2,4,5,6,7,9', 'NUM'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('B', 'PROPN'), ('\t', 'SPACE'), ('E', 'NOUN'), (' \t', 'SPACE'), ('E', 'NOUN'), ('=', 'PROPN'), ('{', 'PUNCT'), ('1,2,4,5,6,7,10', 'NUM'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('B', 'PROPN'), ('\t', 'SPACE'), ('C', 'PROPN'), ('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('  ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'PROPN'), ('Analyzer', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('\t', 'nsubj'), ('\t', 'appos'), ('b', 'punct'), (' \t', 'compound'), ('=', 'punct'), ('{', 'punct'), ('0,1,2,4,7', 'nmod'), ('}', 'punct'), ('\t', 'compound'), ('B', 'compound'), ('\t', 'compound'), ('C', 'compound'), (' \t', 'compound'), ('B', 'appos'), ('=', 'punct'), ('{', 'punct'), ('1,2,3,4,6,7,8', 'dep'), ('}', 'punct'), ('\t', 'compound'), ('B', 'nmod'), ('\t', 'compound'), ('D', 'appos'), (' \t', 'compound'), ('C', 'appos'), ('=', 'punct'), ('{', 'punct'), ('1,2,4,5,6,7', 'nmod'), ('}', 'punct'), ('\t', 'compound'), ('B', 'compound'), ('\t', 'compound'), ('C', 'compound'), (' \t', 'compound'), ('D', 'appos'), ('=', 'appos'), ('{', 'punct'), ('1,2,4,5,6,7,9', 'appos'), ('}', 'punct'), ('\t', 'compound'), ('B', 'compound'), ('\t', 'nmod'), ('E', 'nmod'), (' \t', 'amod'), ('E', 'appos'), ('=', 'appos'), ('{', 'punct'), ('1,2,4,5,6,7,10', 'nmod'), ('}', 'punct'), ('\t', 'compound'), ('B', 'compound'), ('\t', 'compound'), ('C', 'nmod'), ('    ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('  ', 'appos'), ('#', 'nmod'), ('2170701', 'appos'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('2', 'nummod'), ('–', 'punct'), ('Lexical', 'compound'), ('Analyzer', 'npadvmod'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[	, 	], [	, b], [b,  	], [ 	, =], [=, {], [{, 0,1,2,4,7], [0,1,2,4,7, }], [}, 	], [	, B], [B, 	], [	, C], [C,  	], [ 	, B], [B, =], [=, {], [{, 1,2,3,4,6,7,8], [1,2,3,4,6,7,8, }], [}, 	], [	, B], [B, 	], [	, D], [D,  	], [ 	, C], [C, =], [=, {], [{, 1,2,4,5,6,7], [1,2,4,5,6,7, }], [}, 	], [	, B], [B, 	], [	, C], [C,  	], [ 	, D], [D, =], [=, {], [{, 1,2,4,5,6,7,9], [1,2,4,5,6,7,9, }], [}, 	], [	, B], [B, 	], [	, E], [E,  	], [ 	, E], [E, =], [=, {], [{, 1,2,4,5,6,7,10], [1,2,4,5,6,7,10, }], [}, 	], [	, B], [B, 	], [	, C], [C,     ], [    , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,   ], [  , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 2], [2, –], [–, Lexical], [Lexical, Analyzer], [Analyzer, ‹#›], [‹#›,  ]]

>> Trigrams: 
[[	, 	, b], [	, b,  	], [b,  	, =], [ 	, =, {], [=, {, 0,1,2,4,7], [{, 0,1,2,4,7, }], [0,1,2,4,7, }, 	], [}, 	, B], [	, B, 	], [B, 	, C], [	, C,  	], [C,  	, B], [ 	, B, =], [B, =, {], [=, {, 1,2,3,4,6,7,8], [{, 1,2,3,4,6,7,8, }], [1,2,3,4,6,7,8, }, 	], [}, 	, B], [	, B, 	], [B, 	, D], [	, D,  	], [D,  	, C], [ 	, C, =], [C, =, {], [=, {, 1,2,4,5,6,7], [{, 1,2,4,5,6,7, }], [1,2,4,5,6,7, }, 	], [}, 	, B], [	, B, 	], [B, 	, C], [	, C,  	], [C,  	, D], [ 	, D, =], [D, =, {], [=, {, 1,2,4,5,6,7,9], [{, 1,2,4,5,6,7,9, }], [1,2,4,5,6,7,9, }, 	], [}, 	, B], [	, B, 	], [B, 	, E], [	, E,  	], [E,  	, E], [ 	, E, =], [E, =, {], [=, {, 1,2,4,5,6,7,10], [{, 1,2,4,5,6,7,10, }], [1,2,4,5,6,7,10, }, 	], [}, 	, B], [	, B, 	], [B, 	, C], [	, C,     ], [C,     , Prof.], [    , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,   ], [Kagathara,   , #], [  , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 2], [Unit, 2, –], [2, –, Lexical], [–, Lexical, Analyzer], [Lexical, Analyzer, ‹#›], [Analyzer, ‹#›,  ]]

>> Noun Phrases are: 
[ 	A = {0,1,2,4,7}	B	C  	B, 1,2,3,4,6,7,8}	B	D,  	C, 1,2,4,5,6,7}	B	C  	D, }	B	E  	E, =, 1,2,4,5,6,7,10}	B	C     Prof. Dixita B Kagathara, (CD, Unit]

>> Named Entities are: 
[('0,1,2,4,7', 'DATE'), ('1,2,4,5,6,7', 'DATE'), ('1,2,4,5,6,7,10', 'CARDINAL'), ('Dixita', 'PERSON'), ('Kagathara', 'PERSON')]


============================ Sentence 169 =============================

Exercise Convert following regular expression to DFA using subset construction method:  (a+b)*a(a+b) (a+b)*ab*a     Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›   


>> Tokens are: 
[Exercise, Convert, following, regular, expression, DFA, subset, construction, method, :,  , (, a+b)*a(a+b, ), (, a+b)*ab*a,     , Prof., Dixita, B, Kagathara,   , #, 2170701, (, CD, ),   , ,   , Unit, 2, –, Lexical, Analyzer, ‹#›,  ] 

>> PoS Tags are: 
[('Exercise', 'PROPN'), ('Convert', 'PROPN'), ('following', 'VERB'), ('regular', 'ADJ'), ('expression', 'NOUN'), ('DFA', 'NOUN'), ('subset', 'NOUN'), ('construction', 'NOUN'), ('method', 'NOUN'), (':', 'PUNCT'), (' ', 'SPACE'), ('(', 'PUNCT'), ('a+b)*a(a+b', 'PROPN'), (')', 'PUNCT'), ('(', 'PUNCT'), ('a+b)*ab*a', 'ADV'), ('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('  ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'PROPN'), ('Analyzer', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Exercise', 'compound'), ('Convert', 'nsubj'), ('following', 'prep'), ('regular', 'amod'), ('expression', 'pobj'), ('DFA', 'pobj'), ('subset', 'compound'), ('construction', 'compound'), ('method', 'dobj'), (':', 'punct'), (' ', 'appos'), ('(', 'punct'), ('a+b)*a(a+b', 'appos'), (')', 'punct'), ('(', 'punct'), ('a+b)*ab*a', 'advmod'), ('    ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('  ', 'prep'), ('#', 'nmod'), ('2170701', 'npadvmod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'conj'), ('  ', 'punct'), ('Unit', 'appos'), ('2', 'nummod'), ('–', 'punct'), ('Lexical', 'compound'), ('Analyzer', 'dobj'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[Exercise, Convert], [Convert, following], [following, regular], [regular, expression], [expression, DFA], [DFA, subset], [subset, construction], [construction, method], [method, :], [:,  ], [ , (], [(, a+b)*a(a+b], [a+b)*a(a+b, )], [), (], [(, a+b)*ab*a], [a+b)*ab*a,     ], [    , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,   ], [  , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 2], [2, –], [–, Lexical], [Lexical, Analyzer], [Analyzer, ‹#›], [‹#›,  ]]

>> Trigrams: 
[[Exercise, Convert, following], [Convert, following, regular], [following, regular, expression], [regular, expression, DFA], [expression, DFA, subset], [DFA, subset, construction], [subset, construction, method], [construction, method, :], [method, :,  ], [:,  , (], [ , (, a+b)*a(a+b], [(, a+b)*a(a+b, )], [a+b)*a(a+b, ), (], [), (, a+b)*ab*a], [(, a+b)*ab*a,     ], [a+b)*ab*a,     , Prof.], [    , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,   ], [Kagathara,   , #], [  , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 2], [Unit, 2, –], [2, –, Lexical], [–, Lexical, Analyzer], [Lexical, Analyzer, ‹#›], [Analyzer, ‹#›,  ]]

>> Noun Phrases are: 
[Exercise Convert, regular expression, DFA, subset construction method, a+b)*a(a+b, (a+b)*ab*a     Prof. Dixita B Kagathara, (CD, Unit, – Lexical Analyzer]

>> Named Entities are: 
[('Exercise Convert', 'PERSON'), ('DFA', 'ORG'), ('Dixita', 'PERSON'), ('Kagathara', 'PERSON')]


============================ Sentence 170 =============================

DFA optimization        DFA optimization Construct an initial partition  of the set of states with two groups: the accepting states  and the non-accepting states . 


>> Tokens are: 
[DFA, optimization,        , DFA, optimization, Construct, initial, partition,  , set, states, groups, :, accepting, states,  , non, -, accepting, states, .] 

>> PoS Tags are: 
[('DFA', 'NOUN'), ('optimization', 'NOUN'), ('       ', 'SPACE'), ('DFA', 'NOUN'), ('optimization', 'NOUN'), ('Construct', 'VERB'), ('initial', 'ADJ'), ('partition', 'NOUN'), (' ', 'SPACE'), ('set', 'NOUN'), ('states', 'NOUN'), ('groups', 'NOUN'), (':', 'PUNCT'), ('accepting', 'VERB'), ('states', 'NOUN'), (' ', 'SPACE'), ('non', 'ADJ'), ('-', 'ADJ'), ('accepting', 'VERB'), ('states', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('DFA', 'compound'), ('optimization', 'nsubj'), ('       ', 'compound'), ('DFA', 'compound'), ('optimization', 'appos'), ('Construct', 'ROOT'), ('initial', 'amod'), ('partition', 'dobj'), (' ', 'appos'), ('set', 'pobj'), ('states', 'pobj'), ('groups', 'pobj'), (':', 'punct'), ('accepting', 'amod'), ('states', 'dep'), (' ', 'appos'), ('non', 'amod'), ('-', 'amod'), ('accepting', 'amod'), ('states', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[DFA, optimization], [optimization,        ], [       , DFA], [DFA, optimization], [optimization, Construct], [Construct, initial], [initial, partition], [partition,  ], [ , set], [set, states], [states, groups], [groups, :], [:, accepting], [accepting, states], [states,  ], [ , non], [non, -], [-, accepting], [accepting, states], [states, .]]

>> Trigrams: 
[[DFA, optimization,        ], [optimization,        , DFA], [       , DFA, optimization], [DFA, optimization, Construct], [optimization, Construct, initial], [Construct, initial, partition], [initial, partition,  ], [partition,  , set], [ , set, states], [set, states, groups], [states, groups, :], [groups, :, accepting], [:, accepting, states], [accepting, states,  ], [states,  , non], [ , non, -], [non, -, accepting], [-, accepting, states], [accepting, states, .]]

>> Noun Phrases are: 
[DFA optimization,        DFA optimization, an initial partition, the set, states, two groups, the non-accepting states]

>> Named Entities are: 
[('Construct', 'ORG'), ('two', 'CARDINAL')]


============================ Sentence 171 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 172 =============================

Apply the repartition procedure to  to construct a new partition . 


>> Tokens are: 
[Apply, repartition, procedure,  , construct, new, partition, .] 

>> PoS Tags are: 
[('Apply', 'VERB'), ('repartition', 'NOUN'), ('procedure', 'NOUN'), (' ', 'SPACE'), ('construct', 'VERB'), ('new', 'ADJ'), ('partition', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Apply', 'ROOT'), ('repartition', 'compound'), ('procedure', 'dobj'), (' ', 'pobj'), ('construct', 'advcl'), ('new', 'amod'), ('partition', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Apply, repartition], [repartition, procedure], [procedure,  ], [ , construct], [construct, new], [new, partition], [partition, .]]

>> Trigrams: 
[[Apply, repartition, procedure], [repartition, procedure,  ], [procedure,  , construct], [ , construct, new], [construct, new, partition], [new, partition, .]]

>> Noun Phrases are: 
[the repartition procedure, a new partition]

>> Named Entities are: 
[]


============================ Sentence 173 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 174 =============================

If , let and continue with step (4). 


>> Tokens are: 
[,, let, continue, step, (, 4, ), .] 

>> PoS Tags are: 
[(',', 'PUNCT'), ('let', 'VERB'), ('continue', 'VERB'), ('step', 'NOUN'), ('(', 'PUNCT'), ('4', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(',', 'punct'), ('let', 'ROOT'), ('continue', 'conj'), ('step', 'pobj'), ('(', 'punct'), ('4', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[,, let], [let, continue], [continue, step], [step, (], [(, 4], [4, )], [), .]]

>> Trigrams: 
[[,, let, continue], [let, continue, step], [continue, step, (], [step, (, 4], [(, 4, )], [4, ), .]]

>> Noun Phrases are: 
[step]

>> Named Entities are: 
[('4', 'CARDINAL')]


============================ Sentence 175 =============================

Otherwise, repeat step (2)    with . 


>> Tokens are: 
[,, repeat, step, (, 2, ),    , .] 

>> PoS Tags are: 
[(',', 'PUNCT'), ('repeat', 'NOUN'), ('step', 'NOUN'), ('(', 'PUNCT'), ('2', 'X'), (')', 'PUNCT'), ('   ', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(',', 'punct'), ('repeat', 'compound'), ('step', 'ROOT'), ('(', 'punct'), ('2', 'appos'), (')', 'punct'), ('   ', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[,, repeat], [repeat, step], [step, (], [(, 2], [2, )], [),    ], [   , .]]

>> Trigrams: 
[[,, repeat, step], [repeat, step, (], [step, (, 2], [(, 2, )], [2, ),    ], [),    , .]]

>> Noun Phrases are: 
[Otherwise, repeat step]

>> Named Entities are: 
[('2', 'CARDINAL')]


============================ Sentence 176 =============================

		for each group  of  do begin  			partition  into subgroups such that two states  and  				of  are in the same subgroup if and only if for all  				input symbols , states  and  have transitions on  				to states in the same group of . 


>> Tokens are: 
[		, group,  ,  , begin,  			, partition,  , subgroups, states,  ,  				,  , subgroup,  				, input, symbols, ,, states,  ,  , transitions,  				, states, group, .] 

>> PoS Tags are: 
[('\t\t', 'SPACE'), ('group', 'NOUN'), (' ', 'SPACE'), (' ', 'SPACE'), ('begin', 'VERB'), (' \t\t\t', 'SPACE'), ('partition', 'NOUN'), (' ', 'SPACE'), ('subgroups', 'NOUN'), ('states', 'NOUN'), (' ', 'SPACE'), (' \t\t\t\t', 'SPACE'), (' ', 'SPACE'), ('subgroup', 'NOUN'), (' \t\t\t\t', 'SPACE'), ('input', 'NOUN'), ('symbols', 'NOUN'), (',', 'PUNCT'), ('states', 'VERB'), (' ', 'SPACE'), (' ', 'SPACE'), ('transitions', 'NOUN'), (' \t\t\t\t', 'SPACE'), ('states', 'NOUN'), ('group', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t\t', 'dep'), ('group', 'pobj'), (' ', 'appos'), (' ', 'pobj'), ('begin', 'ROOT'), (' \t\t\t', 'nummod'), ('partition', 'dobj'), (' ', 'appos'), ('subgroups', 'pobj'), ('states', 'nsubj'), (' ', 'punct'), (' \t\t\t\t', 'conj'), (' ', 'pobj'), ('subgroup', 'pobj'), (' \t\t\t\t', 'compound'), ('input', 'compound'), ('symbols', 'pobj'), (',', 'punct'), ('states', 'nsubj'), (' ', 'dobj'), (' ', 'conj'), ('transitions', 'dobj'), (' \t\t\t\t', 'pobj'), ('states', 'pobj'), ('group', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[		, group], [group,  ], [ ,  ], [ , begin], [begin,  			], [ 			, partition], [partition,  ], [ , subgroups], [subgroups, states], [states,  ], [ ,  				], [ 				,  ], [ , subgroup], [subgroup,  				], [ 				, input], [input, symbols], [symbols, ,], [,, states], [states,  ], [ ,  ], [ , transitions], [transitions,  				], [ 				, states], [states, group], [group, .]]

>> Trigrams: 
[[		, group,  ], [group,  ,  ], [ ,  , begin], [ , begin,  			], [begin,  			, partition], [ 			, partition,  ], [partition,  , subgroups], [ , subgroups, states], [subgroups, states,  ], [states,  ,  				], [ ,  				,  ], [ 				,  , subgroup], [ , subgroup,  				], [subgroup,  				, input], [ 				, input, symbols], [input, symbols, ,], [symbols, ,, states], [,, states,  ], [states,  ,  ], [ ,  , transitions], [ , transitions,  				], [transitions,  				, states], [ 				, states, group], [states, group, .]]

>> Noun Phrases are: 
[each group,  			partition, subgroups, two states, the same subgroup, all  				input symbols, transitions, states, the same group]

>> Named Entities are: 
[('two', 'CARDINAL')]


============================ Sentence 177 =============================

 			replace  in  by the set of all subgroups formed. 


>> Tokens are: 
[ 			, replace,  ,  , set, subgroups, formed, .] 

>> PoS Tags are: 
[(' \t\t\t', 'SPACE'), ('replace', 'VERB'), (' ', 'SPACE'), (' ', 'SPACE'), ('set', 'NOUN'), ('subgroups', 'NOUN'), ('formed', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' \t\t\t', 'nsubj'), ('replace', 'ROOT'), (' ', 'dobj'), (' ', 'pobj'), ('set', 'pobj'), ('subgroups', 'pobj'), ('formed', 'acl'), ('.', 'punct')]

>> Bigrams: 
[[ 			, replace], [replace,  ], [ ,  ], [ , set], [set, subgroups], [subgroups, formed], [formed, .]]

>> Trigrams: 
[[ 			, replace,  ], [replace,  ,  ], [ ,  , set], [ , set, subgroups], [set, subgroups, formed], [subgroups, formed, .]]

>> Noun Phrases are: 
[the set, all subgroups]

>> Named Entities are: 
[]


============================ Sentence 178 =============================

end     Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  DFA optimization Choose one state in each group of the partition  as the representative for that group. 


>> Tokens are: 
[end,     , Prof., Dixita, B, Kagathara,   , #, 2170701, (, CD, ),   , ,   , Unit, 2, –, Lexical, Analyzer, ‹#›,  , DFA, optimization, Choose, state, group, partition,  , representative, group, .] 

>> PoS Tags are: 
[('end', 'VERB'), ('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('  ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'PROPN'), ('Analyzer', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE'), ('DFA', 'NOUN'), ('optimization', 'NOUN'), ('Choose', 'VERB'), ('state', 'NOUN'), ('group', 'NOUN'), ('partition', 'NOUN'), (' ', 'SPACE'), ('representative', 'NOUN'), ('group', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('end', 'advcl'), ('    ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'dobj'), ('  ', 'prep'), ('#', 'nmod'), ('2170701', 'npadvmod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'punct'), ('Unit', 'appos'), ('2', 'nummod'), ('–', 'punct'), ('Lexical', 'compound'), ('Analyzer', 'nsubj'), ('‹#›', 'punct'), (' ', 'compound'), ('DFA', 'compound'), ('optimization', 'appos'), ('Choose', 'ROOT'), ('state', 'dobj'), ('group', 'pobj'), ('partition', 'pobj'), (' ', 'appos'), ('representative', 'pobj'), ('group', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[end,     ], [    , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,   ], [  , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 2], [2, –], [–, Lexical], [Lexical, Analyzer], [Analyzer, ‹#›], [‹#›,  ], [ , DFA], [DFA, optimization], [optimization, Choose], [Choose, state], [state, group], [group, partition], [partition,  ], [ , representative], [representative, group], [group, .]]

>> Trigrams: 
[[end,     , Prof.], [    , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,   ], [Kagathara,   , #], [  , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 2], [Unit, 2, –], [2, –, Lexical], [–, Lexical, Analyzer], [Lexical, Analyzer, ‹#›], [Analyzer, ‹#›,  ], [‹#›,  , DFA], [ , DFA, optimization], [DFA, optimization, Choose], [optimization, Choose, state], [Choose, state, group], [state, group, partition], [group, partition,  ], [partition,  , representative], [ , representative, group], [representative, group, .]]

>> Noun Phrases are: 
[    Prof. Dixita B Kagathara, (CD, Unit, Lexical Analyzer,  DFA optimization, one state, each group, the partition, the representative, that group]

>> Named Entities are: 
[('Dixita', 'PERSON'), ('Kagathara', 'PERSON'), ('one', 'CARDINAL')]


============================ Sentence 179 =============================

The representatives will be the states of . 


>> Tokens are: 
[representatives, states, .] 

>> PoS Tags are: 
[('representatives', 'NOUN'), ('states', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('representatives', 'nsubj'), ('states', 'attr'), ('.', 'punct')]

>> Bigrams: 
[[representatives, states], [states, .]]

>> Trigrams: 
[[representatives, states, .]]

>> Noun Phrases are: 
[The representatives, the states]

>> Named Entities are: 
[]


============================ Sentence 180 =============================

Let s be a representative state, and suppose on input a there is a transition of  from  to . 


>> Tokens are: 
[Let, s, representative, state, ,, suppose, input, transition,  ,  , .] 

>> PoS Tags are: 
[('Let', 'VERB'), ('s', 'PRON'), ('representative', 'ADJ'), ('state', 'NOUN'), (',', 'PUNCT'), ('suppose', 'VERB'), ('input', 'NOUN'), ('transition', 'NOUN'), (' ', 'SPACE'), (' ', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Let', 'ROOT'), ('s', 'nsubj'), ('representative', 'amod'), ('state', 'attr'), (',', 'punct'), ('suppose', 'conj'), ('input', 'pobj'), ('transition', 'attr'), (' ', 'pobj'), (' ', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Let, s], [s, representative], [representative, state], [state, ,], [,, suppose], [suppose, input], [input, transition], [transition,  ], [ ,  ], [ , .]]

>> Trigrams: 
[[Let, s, representative], [s, representative, state], [representative, state, ,], [state, ,, suppose], [,, suppose, input], [suppose, input, transition], [input, transition,  ], [transition,  ,  ], [ ,  , .]]

>> Noun Phrases are: 
[s, a representative state, input, a transition]

>> Named Entities are: 
[]


============================ Sentence 181 =============================

Let  be the representative of s group. 


>> Tokens are: 
[Let,  , representative, s, group, .] 

>> PoS Tags are: 
[('Let', 'VERB'), (' ', 'SPACE'), ('representative', 'NOUN'), ('s', 'PRON'), ('group', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Let', 'ROOT'), (' ', 'nsubj'), ('representative', 'attr'), ('s', 'poss'), ('group', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Let,  ], [ , representative], [representative, s], [s, group], [group, .]]

>> Trigrams: 
[[Let,  , representative], [ , representative, s], [representative, s, group], [s, group, .]]

>> Noun Phrases are: 
[the representative, s group]

>> Named Entities are: 
[]


============================ Sentence 182 =============================

Then  has a transition from  to  on . 


>> Tokens are: 
[ , transition,  ,  , .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('transition', 'NOUN'), (' ', 'SPACE'), (' ', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'nsubj'), ('transition', 'dobj'), (' ', 'pobj'), (' ', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[ , transition], [transition,  ], [ ,  ], [ , .]]

>> Trigrams: 
[[ , transition,  ], [transition,  ,  ], [ ,  , .]]

>> Noun Phrases are: 
[a transition]

>> Named Entities are: 
[]


============================ Sentence 183 =============================

Let the start state of  be the representative of the group containing start state  of , and let the accepting states of  be the representatives that are in . 


>> Tokens are: 
[Let, start, state,  , representative, group, containing, start, state,  , ,, let, accepting, states,  , representatives, .] 

>> PoS Tags are: 
[('Let', 'VERB'), ('start', 'ADJ'), ('state', 'NOUN'), (' ', 'SPACE'), ('representative', 'NOUN'), ('group', 'NOUN'), ('containing', 'VERB'), ('start', 'NOUN'), ('state', 'NOUN'), (' ', 'SPACE'), (',', 'PUNCT'), ('let', 'VERB'), ('accepting', 'VERB'), ('states', 'NOUN'), (' ', 'SPACE'), ('representatives', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Let', 'ROOT'), ('start', 'amod'), ('state', 'nsubj'), (' ', 'pobj'), ('representative', 'attr'), ('group', 'pobj'), ('containing', 'acl'), ('start', 'compound'), ('state', 'dobj'), (' ', 'dobj'), (',', 'punct'), ('let', 'conj'), ('accepting', 'amod'), ('states', 'nsubj'), (' ', 'pobj'), ('representatives', 'attr'), ('.', 'punct')]

>> Bigrams: 
[[Let, start], [start, state], [state,  ], [ , representative], [representative, group], [group, containing], [containing, start], [start, state], [state,  ], [ , ,], [,, let], [let, accepting], [accepting, states], [states,  ], [ , representatives], [representatives, .]]

>> Trigrams: 
[[Let, start, state], [start, state,  ], [state,  , representative], [ , representative, group], [representative, group, containing], [group, containing, start], [containing, start, state], [start, state,  ], [state,  , ,], [ , ,, let], [,, let, accepting], [let, accepting, states], [accepting, states,  ], [states,  , representatives], [ , representatives, .]]

>> Noun Phrases are: 
[the start state, the representative, the group, start state, the accepting states, the representatives]

>> Named Entities are: 
[]


============================ Sentence 184 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 185 =============================

If  has a dead state , then remove  from . 


>> Tokens are: 
[ , dead, state, ,, remove,  , .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('dead', 'ADJ'), ('state', 'NOUN'), (',', 'PUNCT'), ('remove', 'VERB'), (' ', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'nsubj'), ('dead', 'amod'), ('state', 'dobj'), (',', 'punct'), ('remove', 'ROOT'), (' ', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[ , dead], [dead, state], [state, ,], [,, remove], [remove,  ], [ , .]]

>> Trigrams: 
[[ , dead, state], [dead, state, ,], [state, ,, remove], [,, remove,  ], [remove,  , .]]

>> Noun Phrases are: 
[a dead state]

>> Named Entities are: 
[]


============================ Sentence 186 =============================

Also remove any state not reachable from the start state. 


>> Tokens are: 
[remove, state, reachable, start, state, .] 

>> PoS Tags are: 
[('remove', 'VERB'), ('state', 'NOUN'), ('reachable', 'ADJ'), ('start', 'NOUN'), ('state', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('remove', 'ROOT'), ('state', 'dobj'), ('reachable', 'oprd'), ('start', 'compound'), ('state', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[remove, state], [state, reachable], [reachable, start], [start, state], [state, .]]

>> Trigrams: 
[[remove, state, reachable], [state, reachable, start], [reachable, start, state], [start, state, .]]

>> Noun Phrases are: 
[any state, the start state]

>> Named Entities are: 
[]


============================ Sentence 187 =============================

    Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  DFA optimization 


>> Tokens are: 
[    , Prof., Dixita, B, Kagathara,   , #, 2170701, (, CD, ),   , ,   , Unit, 2, –, Lexical, Analyzer, ‹#›,  , DFA, optimization] 

>> PoS Tags are: 
[('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('  ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'PROPN'), ('Analyzer', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE'), ('DFA', 'NOUN'), ('optimization', 'NOUN')] 

>> Dependency Tags are: 
[('    ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'nsubj'), ('  ', 'appos'), ('#', 'nmod'), ('2170701', 'npadvmod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'dep'), ('  ', 'dobj'), ('Unit', 'appos'), ('2', 'nummod'), ('–', 'punct'), ('Lexical', 'compound'), ('Analyzer', 'ROOT'), ('‹#›', 'punct'), (' ', 'appos'), ('DFA', 'compound'), ('optimization', 'appos')]

>> Bigrams: 
[[    , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,   ], [  , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 2], [2, –], [–, Lexical], [Lexical, Analyzer], [Analyzer, ‹#›], [‹#›,  ], [ , DFA], [DFA, optimization]]

>> Trigrams: 
[[    , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,   ], [Kagathara,   , #], [  , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 2], [Unit, 2, –], [2, –, Lexical], [–, Lexical, Analyzer], [Lexical, Analyzer, ‹#›], [Analyzer, ‹#›,  ], [‹#›,  , DFA], [ , DFA, optimization]]

>> Noun Phrases are: 
[    Prof. Dixita B Kagathara, (CD, Unit, DFA optimization]

>> Named Entities are: 
[('Dixita', 'PERSON'), ('Kagathara', 'PERSON')]


============================ Sentence 188 =============================

Now no more splitting is possible. 


>> Tokens are: 
[splitting, possible, .] 

>> PoS Tags are: 
[('splitting', 'NOUN'), ('possible', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('splitting', 'nsubj'), ('possible', 'acomp'), ('.', 'punct')]

>> Bigrams: 
[[splitting, possible], [possible, .]]

>> Trigrams: 
[[splitting, possible, .]]

>> Noun Phrases are: 
[no more splitting]

>> Named Entities are: 
[]


============================ Sentence 189 =============================

If we chose A as the representative for group (AC), then we obtain reduced transition table    	A 	B	C  	B	B	D  	C 	B	C  	D 	B	E 


>> Tokens are: 
[chose, representative, group, (, AC, ), ,, obtain, reduced, transition, table,    	, 	, B, 	, C,  	, B, 	, B, 	, D,  	, C, 	, B, 	, C,  	, D, 	, B, 	, E] 

>> PoS Tags are: 
[('chose', 'VERB'), ('representative', 'NOUN'), ('group', 'NOUN'), ('(', 'PUNCT'), ('AC', 'PROPN'), (')', 'PUNCT'), (',', 'PUNCT'), ('obtain', 'VERB'), ('reduced', 'VERB'), ('transition', 'NOUN'), ('table', 'NOUN'), ('   \t', 'SPACE'), ('\t', 'SPACE'), ('B', 'PROPN'), ('\t', 'SPACE'), ('C', 'PROPN'), (' \t', 'SPACE'), ('B', 'PROPN'), ('\t', 'SPACE'), ('B', 'PROPN'), ('\t', 'SPACE'), ('D', 'PROPN'), (' \t', 'SPACE'), ('C', 'PROPN'), ('\t', 'SPACE'), ('B', 'PROPN'), ('\t', 'SPACE'), ('C', 'PROPN'), (' \t', 'SPACE'), ('D', 'NOUN'), ('\t', 'SPACE'), ('B', 'PROPN'), ('\t', 'SPACE'), ('E', 'NOUN')] 

>> Dependency Tags are: 
[('chose', 'advcl'), ('representative', 'pobj'), ('group', 'pobj'), ('(', 'punct'), ('AC', 'appos'), (')', 'punct'), (',', 'punct'), ('obtain', 'ROOT'), ('reduced', 'amod'), ('transition', 'compound'), ('table', 'dobj'), ('   \t', 'dep'), ('\t', 'compound'), ('B', 'compound'), ('\t', 'compound'), ('C', 'compound'), (' \t', 'compound'), ('B', 'compound'), ('\t', 'compound'), ('B', 'nmod'), ('\t', 'compound'), ('D', 'nsubj'), (' \t', 'compound'), ('C', 'compound'), ('\t', 'compound'), ('B', 'compound'), ('\t', 'compound'), ('C', 'nmod'), (' \t', 'compound'), ('D', 'compound'), ('\t', 'compound'), ('B', 'compound'), ('\t', 'nmod'), ('E', 'appos')]

>> Bigrams: 
[[chose, representative], [representative, group], [group, (], [(, AC], [AC, )], [), ,], [,, obtain], [obtain, reduced], [reduced, transition], [transition, table], [table,    	], [   	, 	], [	, B], [B, 	], [	, C], [C,  	], [ 	, B], [B, 	], [	, B], [B, 	], [	, D], [D,  	], [ 	, C], [C, 	], [	, B], [B, 	], [	, C], [C,  	], [ 	, D], [D, 	], [	, B], [B, 	], [	, E]]

>> Trigrams: 
[[chose, representative, group], [representative, group, (], [group, (, AC], [(, AC, )], [AC, ), ,], [), ,, obtain], [,, obtain, reduced], [obtain, reduced, transition], [reduced, transition, table], [transition, table,    	], [table,    	, 	], [   	, 	, B], [	, B, 	], [B, 	, C], [	, C,  	], [C,  	, B], [ 	, B, 	], [B, 	, B], [	, B, 	], [B, 	, D], [	, D,  	], [D,  	, C], [ 	, C, 	], [C, 	, B], [	, B, 	], [B, 	, C], [	, C,  	], [C,  	, D], [ 	, D, 	], [D, 	, B], [	, B, 	], [B, 	, E]]

>> Noun Phrases are: 
[we, the representative, group, AC, we, reduced transition table, A 	B	C  	B	B	D,  	C 	B	C  	D 	B	E]

>> Named Entities are: 
[('AC', 'ORG')]


============================ Sentence 190 =============================

 	E 	B	C  	States	a	b   Nonaccepting States    


>> Tokens are: 
[ 	, E, 	, B, 	, C,  	, States, 	, 	, b,   , Nonaccepting, States,   ] 

>> PoS Tags are: 
[(' \t', 'SPACE'), ('E', 'PROPN'), ('\t', 'SPACE'), ('B', 'PROPN'), ('\t', 'SPACE'), ('C', 'PROPN'), (' \t', 'SPACE'), ('States', 'PROPN'), ('\t', 'SPACE'), ('\t', 'SPACE'), ('b', 'NOUN'), ('  ', 'SPACE'), ('Nonaccepting', 'PROPN'), ('States', 'PROPN'), ('  ', 'SPACE')] 

>> Dependency Tags are: 
[(' \t', 'amod'), ('E', 'compound'), ('\t', 'compound'), ('B', 'compound'), ('\t', 'compound'), ('C', 'compound'), (' \t', 'compound'), ('States', 'compound'), ('\t', 'ROOT'), ('\t', 'appos'), ('b', 'prep'), ('  ', 'appos'), ('Nonaccepting', 'compound'), ('States', 'appos'), ('  ', 'appos')]

>> Bigrams: 
[[ 	, E], [E, 	], [	, B], [B, 	], [	, C], [C,  	], [ 	, States], [States, 	], [	, 	], [	, b], [b,   ], [  , Nonaccepting], [Nonaccepting, States], [States,   ]]

>> Trigrams: 
[[ 	, E, 	], [E, 	, B], [	, B, 	], [B, 	, C], [	, C,  	], [C,  	, States], [ 	, States, 	], [States, 	, 	], [	, 	, b], [	, b,   ], [b,   , Nonaccepting], [  , Nonaccepting, States], [Nonaccepting, States,   ]]

>> Noun Phrases are: 
[Nonaccepting States]

>> Named Entities are: 
[('Nonaccepting States', 'GPE')]


============================ Sentence 191 =============================

Accepting States           	A 	B	 


>> Tokens are: 
[Accepting, States,           	, 	, B, 	] 

>> PoS Tags are: 
[('Accepting', 'VERB'), ('States', 'PROPN'), ('          \t', 'SPACE'), ('\t', 'SPACE'), ('B', 'PROPN'), ('\t', 'SPACE')] 

>> Dependency Tags are: 
[('Accepting', 'csubj'), ('States', 'dobj'), ('          \t', 'ROOT'), ('\t', 'compound'), ('B', 'compound'), ('\t', 'dative')]

>> Bigrams: 
[[Accepting, States], [States,           	], [          	, 	], [	, B], [B, 	]]

>> Trigrams: 
[[Accepting, States,           	], [States,           	, 	], [          	, 	, B], [	, B, 	]]

>> Noun Phrases are: 
[States]

>> Named Entities are: 
[]


============================ Sentence 192 =============================

A  	B	B	D  	D 	B	E  	E 	B	A  	States	a	b  Optimized Transition Table       Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Conversion from regular expression to DFA        Rules to compute nullable, firstpos, lastpos nullable(n) 


>> Tokens are: 
[ 	, B, 	, B, 	, D,  	, D, 	, B, 	, E,  	, E, 	, B, 	,  	, States, 	, 	, b,  , Optimized, Transition, Table,       , Prof., Dixita, B, Kagathara,   , #, 2170701, (, CD, ),   , ,   , Unit, 2, –, Lexical, Analyzer, ‹#›,  , Conversion, regular, expression, DFA,        , Rules, compute, nullable, ,, firstpos, ,, lastpos, nullable(n, )] 

>> PoS Tags are: 
[(' \t', 'SPACE'), ('B', 'PROPN'), ('\t', 'SPACE'), ('B', 'PROPN'), ('\t', 'SPACE'), ('D', 'PROPN'), (' \t', 'SPACE'), ('D', 'NOUN'), ('\t', 'SPACE'), ('B', 'PROPN'), ('\t', 'SPACE'), ('E', 'NOUN'), (' \t', 'SPACE'), ('E', 'PROPN'), ('\t', 'SPACE'), ('B', 'PROPN'), ('\t', 'SPACE'), (' \t', 'SPACE'), ('States', 'PROPN'), ('\t', 'SPACE'), ('\t', 'SPACE'), ('b', 'ADP'), (' ', 'SPACE'), ('Optimized', 'VERB'), ('Transition', 'NOUN'), ('Table', 'PROPN'), ('      ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('  ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'PROPN'), ('Analyzer', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE'), ('Conversion', 'PROPN'), ('regular', 'ADJ'), ('expression', 'NOUN'), ('DFA', 'PROPN'), ('       ', 'SPACE'), ('Rules', 'PROPN'), ('compute', 'VERB'), ('nullable', 'ADJ'), (',', 'PUNCT'), ('firstpos', 'NOUN'), (',', 'PUNCT'), ('lastpos', 'NOUN'), ('nullable(n', 'INTJ'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[(' \t', 'compound'), ('B', 'compound'), ('\t', 'compound'), ('B', 'nmod'), ('\t', 'nmod'), ('D', 'dative'), (' \t', 'amod'), ('D', 'compound'), ('\t', 'compound'), ('B', 'compound'), ('\t', 'compound'), ('E', 'compound'), (' \t', 'compound'), ('E', 'compound'), ('\t', 'compound'), ('B', 'compound'), ('\t', 'appos'), (' \t', 'nummod'), ('States', 'compound'), ('\t', 'nsubj'), ('\t', 'appos'), ('b', 'prep'), (' ', 'pobj'), ('Optimized', 'compound'), ('Transition', 'compound'), ('Table', 'compound'), ('      ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('  ', 'appos'), ('#', 'nmod'), ('2170701', 'appos'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('2', 'nummod'), ('–', 'punct'), ('Lexical', 'compound'), ('Analyzer', 'npadvmod'), ('‹#›', 'punct'), (' ', 'compound'), ('Conversion', 'appos'), ('regular', 'amod'), ('expression', 'pobj'), ('DFA', 'nmod'), ('       ', 'compound'), ('Rules', 'pobj'), ('compute', 'advcl'), ('nullable', 'dobj'), (',', 'punct'), ('firstpos', 'conj'), (',', 'punct'), ('lastpos', 'compound'), ('nullable(n', 'dep'), (')', 'punct')]

>> Bigrams: 
[[ 	, B], [B, 	], [	, B], [B, 	], [	, D], [D,  	], [ 	, D], [D, 	], [	, B], [B, 	], [	, E], [E,  	], [ 	, E], [E, 	], [	, B], [B, 	], [	,  	], [ 	, States], [States, 	], [	, 	], [	, b], [b,  ], [ , Optimized], [Optimized, Transition], [Transition, Table], [Table,       ], [      , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,   ], [  , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 2], [2, –], [–, Lexical], [Lexical, Analyzer], [Analyzer, ‹#›], [‹#›,  ], [ , Conversion], [Conversion, regular], [regular, expression], [expression, DFA], [DFA,        ], [       , Rules], [Rules, compute], [compute, nullable], [nullable, ,], [,, firstpos], [firstpos, ,], [,, lastpos], [lastpos, nullable(n], [nullable(n, )]]

>> Trigrams: 
[[ 	, B, 	], [B, 	, B], [	, B, 	], [B, 	, D], [	, D,  	], [D,  	, D], [ 	, D, 	], [D, 	, B], [	, B, 	], [B, 	, E], [	, E,  	], [E,  	, E], [ 	, E, 	], [E, 	, B], [	, B, 	], [B, 	,  	], [	,  	, States], [ 	, States, 	], [States, 	, 	], [	, 	, b], [	, b,  ], [b,  , Optimized], [ , Optimized, Transition], [Optimized, Transition, Table], [Transition, Table,       ], [Table,       , Prof.], [      , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,   ], [Kagathara,   , #], [  , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 2], [Unit, 2, –], [2, –, Lexical], [–, Lexical, Analyzer], [Lexical, Analyzer, ‹#›], [Analyzer, ‹#›,  ], [‹#›,  , Conversion], [ , Conversion, regular], [Conversion, regular, expression], [regular, expression, DFA], [expression, DFA,        ], [DFA,        , Rules], [       , Rules, compute], [Rules, compute, nullable], [compute, nullable, ,], [nullable, ,, firstpos], [,, firstpos, ,], [firstpos, ,, lastpos], [,, lastpos, nullable(n], [lastpos, nullable(n, )]]

>> Noun Phrases are: 
[ 	B	B	D, Optimized Transition Table       Prof. Dixita B Kagathara, (CD, Unit,  Conversion, regular expression, DFA        Rules, firstpos]

>> Named Entities are: 
[('Dixita', 'PERSON'), ('Kagathara', 'PERSON'), ('Conversion', 'ORG')]


============================ Sentence 193 =============================

The subtree at node  generates languages including the empty string. 


>> Tokens are: 
[subtree, node,  , generates, languages, including, string, .] 

>> PoS Tags are: 
[('subtree', 'NOUN'), ('node', 'NOUN'), (' ', 'SPACE'), ('generates', 'VERB'), ('languages', 'NOUN'), ('including', 'VERB'), ('string', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('subtree', 'nsubj'), ('node', 'compound'), (' ', 'pobj'), ('generates', 'ROOT'), ('languages', 'dobj'), ('including', 'prep'), ('string', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[subtree, node], [node,  ], [ , generates], [generates, languages], [languages, including], [including, string], [string, .]]

>> Trigrams: 
[[subtree, node,  ], [node,  , generates], [ , generates, languages], [generates, languages, including], [languages, including, string], [including, string, .]]

>> Noun Phrases are: 
[The subtree, languages, the empty string]

>> Named Entities are: 
[]


============================ Sentence 194 =============================

firstpos(n) The set of positions that can match the first symbol of a string generated by the subtree at node  lastpos(n) 


>> Tokens are: 
[firstpos(n, ), set, positions, match, symbol, string, generated, subtree, node,  , lastpos(n, )] 

>> PoS Tags are: 
[('firstpos(n', 'X'), (')', 'PUNCT'), ('set', 'NOUN'), ('positions', 'NOUN'), ('match', 'VERB'), ('symbol', 'NOUN'), ('string', 'NOUN'), ('generated', 'VERB'), ('subtree', 'NOUN'), ('node', 'NOUN'), (' ', 'SPACE'), ('lastpos(n', 'PROPN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('firstpos(n', 'ROOT'), (')', 'punct'), ('set', 'appos'), ('positions', 'pobj'), ('match', 'relcl'), ('symbol', 'dobj'), ('string', 'pobj'), ('generated', 'acl'), ('subtree', 'pobj'), ('node', 'nmod'), (' ', 'nummod'), ('lastpos(n', 'pobj'), (')', 'punct')]

>> Bigrams: 
[[firstpos(n, )], [), set], [set, positions], [positions, match], [match, symbol], [symbol, string], [string, generated], [generated, subtree], [subtree, node], [node,  ], [ , lastpos(n], [lastpos(n, )]]

>> Trigrams: 
[[firstpos(n, ), set], [), set, positions], [set, positions, match], [positions, match, symbol], [match, symbol, string], [symbol, string, generated], [string, generated, subtree], [generated, subtree, node], [subtree, node,  ], [node,  , lastpos(n], [ , lastpos(n, )]]

>> Noun Phrases are: 
[The set, positions, the first symbol, a string, the subtree, node  lastpos(n]

>> Named Entities are: 
[('first', 'ORDINAL')]


============================ Sentence 195 =============================

The set of positions that can match the last symbol of a string generated be the subtree at node  followpos(i)   


>> Tokens are: 
[set, positions, match, symbol, string, generated, subtree, node,  , followpos(i, ),  ] 

>> PoS Tags are: 
[('set', 'NOUN'), ('positions', 'NOUN'), ('match', 'VERB'), ('symbol', 'NOUN'), ('string', 'NOUN'), ('generated', 'VERB'), ('subtree', 'NOUN'), ('node', 'NOUN'), (' ', 'SPACE'), ('followpos(i', 'PROPN'), (')', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('set', 'nsubj'), ('positions', 'pobj'), ('match', 'relcl'), ('symbol', 'dobj'), ('string', 'pobj'), ('generated', 'acl'), ('subtree', 'attr'), ('node', 'compound'), (' ', 'compound'), ('followpos(i', 'pobj'), (')', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[set, positions], [positions, match], [match, symbol], [symbol, string], [string, generated], [generated, subtree], [subtree, node], [node,  ], [ , followpos(i], [followpos(i, )], [),  ]]

>> Trigrams: 
[[set, positions, match], [positions, match, symbol], [match, symbol, string], [symbol, string, generated], [string, generated, subtree], [generated, subtree, node], [subtree, node,  ], [node,  , followpos(i], [ , followpos(i, )], [followpos(i, ),  ]]

>> Noun Phrases are: 
[The set, positions, the last symbol, a string, the subtree, node  followpos(i]

>> Named Entities are: 
[]


============================ Sentence 196 =============================

The set of positions that can follow position  in the tree. 


>> Tokens are: 
[set, positions, follow, position,  , tree, .] 

>> PoS Tags are: 
[('set', 'NOUN'), ('positions', 'NOUN'), ('follow', 'VERB'), ('position', 'NOUN'), (' ', 'SPACE'), ('tree', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('set', 'ROOT'), ('positions', 'pobj'), ('follow', 'relcl'), ('position', 'dobj'), (' ', 'dobj'), ('tree', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[set, positions], [positions, follow], [follow, position], [position,  ], [ , tree], [tree, .]]

>> Trigrams: 
[[set, positions, follow], [positions, follow, position], [follow, position,  ], [position,  , tree], [ , tree, .]]

>> Noun Phrases are: 
[The set, positions, position, the tree]

>> Named Entities are: 
[]


============================ Sentence 197 =============================

    Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›   


>> Tokens are: 
[    , Prof., Dixita, B, Kagathara,   , #, 2170701, (, CD, ),   , ,   , Unit, 2, –, Lexical, Analyzer, ‹#›,  ] 

>> PoS Tags are: 
[('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('  ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'PROPN'), ('Analyzer', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('    ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'nsubj'), ('  ', 'appos'), ('#', 'nmod'), ('2170701', 'npadvmod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'dep'), ('  ', 'dobj'), ('Unit', 'appos'), ('2', 'nummod'), ('–', 'punct'), ('Lexical', 'compound'), ('Analyzer', 'ROOT'), ('‹#›', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[    , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,   ], [  , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 2], [2, –], [–, Lexical], [Lexical, Analyzer], [Analyzer, ‹#›], [‹#›,  ]]

>> Trigrams: 
[[    , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,   ], [Kagathara,   , #], [  , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 2], [Unit, 2, –], [2, –, Lexical], [–, Lexical, Analyzer], [Lexical, Analyzer, ‹#›], [Analyzer, ‹#›,  ]]

>> Noun Phrases are: 
[    Prof. Dixita B Kagathara, (CD, Unit]

>> Named Entities are: 
[('Dixita', 'PERSON'), ('Kagathara', 'PERSON')]


============================ Sentence 198 =============================

Rules to compute nullable, firstpos, lastpos 	Node n	nullable(n)	firstpos(n)	lastpos(n) 


>> Tokens are: 
[Rules, compute, nullable, ,, firstpos, ,, lastpos, 	, Node, n, 	, nullable(n, ), 	, firstpos(n, ), 	, lastpos(n, )] 

>> PoS Tags are: 
[('Rules', 'NOUN'), ('compute', 'VERB'), ('nullable', 'ADJ'), (',', 'PUNCT'), ('firstpos', 'NOUN'), (',', 'PUNCT'), ('lastpos', 'NOUN'), ('\t', 'SPACE'), ('Node', 'PROPN'), ('n', 'CCONJ'), ('\t', 'SPACE'), ('nullable(n', 'PROPN'), (')', 'PUNCT'), ('\t', 'SPACE'), ('firstpos(n', 'PROPN'), (')', 'PUNCT'), ('\t', 'SPACE'), ('lastpos(n', 'PROPN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('Rules', 'nsubj'), ('compute', 'ROOT'), ('nullable', 'dobj'), (',', 'punct'), ('firstpos', 'conj'), (',', 'punct'), ('lastpos', 'compound'), ('\t', 'compound'), ('Node', 'dobj'), ('n', 'cc'), ('\t', 'compound'), ('nullable(n', 'conj'), (')', 'punct'), ('\t', 'compound'), ('firstpos(n', 'appos'), (')', 'punct'), ('\t', 'compound'), ('lastpos(n', 'appos'), (')', 'punct')]

>> Bigrams: 
[[Rules, compute], [compute, nullable], [nullable, ,], [,, firstpos], [firstpos, ,], [,, lastpos], [lastpos, 	], [	, Node], [Node, n], [n, 	], [	, nullable(n], [nullable(n, )], [), 	], [	, firstpos(n], [firstpos(n, )], [), 	], [	, lastpos(n], [lastpos(n, )]]

>> Trigrams: 
[[Rules, compute, nullable], [compute, nullable, ,], [nullable, ,, firstpos], [,, firstpos, ,], [firstpos, ,, lastpos], [,, lastpos, 	], [lastpos, 	, Node], [	, Node, n], [Node, n, 	], [n, 	, nullable(n], [	, nullable(n, )], [nullable(n, ), 	], [), 	, firstpos(n], [	, firstpos(n, )], [firstpos(n, ), 	], [), 	, lastpos(n], [	, lastpos(n, )]]

>> Noun Phrases are: 
[Rules, firstpos, lastpos 	Node, 	nullable(n, 	firstpos(n, 	lastpos(n]

>> Named Entities are: 
[]


============================ Sentence 199 =============================

 	A leaf labeled by 	 


>> Tokens are: 
[ 	, leaf, labeled, 	] 

>> PoS Tags are: 
[(' \t', 'SPACE'), ('leaf', 'NOUN'), ('labeled', 'VERB'), ('\t', 'SPACE')] 

>> Dependency Tags are: 
[(' \t', 'nummod'), ('leaf', 'ROOT'), ('labeled', 'acl'), ('\t', 'pobj')]

>> Bigrams: 
[[ 	, leaf], [leaf, labeled], [labeled, 	]]

>> Trigrams: 
[[ 	, leaf, labeled], [leaf, labeled, 	]]

>> Noun Phrases are: 
[ 	A leaf]

>> Named Entities are: 
[]


============================ Sentence 200 =============================

true		  	 


>> Tokens are: 
[true, 		  	] 

>> PoS Tags are: 
[('true', 'ADJ'), ('\t\t  \t', 'SPACE')] 

>> Dependency Tags are: 
[('true', 'amod'), ('\t\t  \t', 'ROOT')]

>> Bigrams: 
[[true, 		  	]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 201 =============================

A leaf with position 	false		  		nullable(c1) or nullable(c2) 


>> Tokens are: 
[leaf, position, 	, false, 		  		, nullable(c1, ), nullable(c2, )] 

>> PoS Tags are: 
[('leaf', 'NOUN'), ('position', 'NOUN'), ('\t', 'SPACE'), ('false', 'ADJ'), ('\t\t  \t\t', 'SPACE'), ('nullable(c1', 'PROPN'), (')', 'PUNCT'), ('nullable(c2', 'NOUN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('leaf', 'ROOT'), ('position', 'pobj'), ('\t', 'appos'), ('false', 'amod'), ('\t\t  \t\t', 'punct'), ('nullable(c1', 'appos'), (')', 'punct'), ('nullable(c2', 'conj'), (')', 'punct')]

>> Bigrams: 
[[leaf, position], [position, 	], [	, false], [false, 		  		], [		  		, nullable(c1], [nullable(c1, )], [), nullable(c2], [nullable(c2, )]]

>> Trigrams: 
[[leaf, position, 	], [position, 	, false], [	, false, 		  		], [false, 		  		, nullable(c1], [		  		, nullable(c1, )], [nullable(c1, ), nullable(c2], [), nullable(c2, )]]

>> Noun Phrases are: 
[A leaf, position, false		  		nullable(c1, nullable(c2]

>> Named Entities are: 
[]


============================ Sentence 202 =============================

	firstpos(c1)    firstpos(c2) 


>> Tokens are: 
[	, firstpos(c1, ),  , ,  , firstpos(c2, )] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('firstpos(c1', 'NOUN'), (')', 'PUNCT'), (' ', 'SPACE'), ('\uf0c8', 'NOUN'), (' ', 'SPACE'), ('firstpos(c2', 'NOUN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'amod'), ('firstpos(c1', 'ROOT'), (')', 'punct'), (' ', 'appos'), ('\uf0c8', 'compound'), (' ', 'compound'), ('firstpos(c2', 'appos'), (')', 'punct')]

>> Bigrams: 
[[	, firstpos(c1], [firstpos(c1, )], [),  ], [ , ], [,  ], [ , firstpos(c2], [firstpos(c2, )]]

>> Trigrams: 
[[	, firstpos(c1, )], [firstpos(c1, ),  ], [),  , ], [ , ,  ], [,  , firstpos(c2], [ , firstpos(c2, )]]

>> Noun Phrases are: 
[	firstpos(c1,   firstpos(c2]

>> Named Entities are: 
[]


============================ Sentence 203 =============================

	lastpos(c1)    lastpos(c2)  		nullable(c1)  and nullable(c2) 


>> Tokens are: 
[	, lastpos(c1, ),  , ,  , lastpos(c2, ),  		, nullable(c1, ),  , nullable(c2, )] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('lastpos(c1', 'NOUN'), (')', 'PUNCT'), (' ', 'SPACE'), ('\uf0c8', 'NOUN'), (' ', 'SPACE'), ('lastpos(c2', 'NOUN'), (')', 'PUNCT'), (' \t\t', 'SPACE'), ('nullable(c1', 'X'), (')', 'PUNCT'), (' ', 'SPACE'), ('nullable(c2', 'NOUN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'amod'), ('lastpos(c1', 'ROOT'), (')', 'punct'), (' ', 'compound'), ('\uf0c8', 'compound'), (' ', 'nsubj'), ('lastpos(c2', 'appos'), (')', 'punct'), (' \t\t', 'punct'), ('nullable(c1', 'amod'), (')', 'punct'), (' ', 'nsubj'), ('nullable(c2', 'conj'), (')', 'punct')]

>> Bigrams: 
[[	, lastpos(c1], [lastpos(c1, )], [),  ], [ , ], [,  ], [ , lastpos(c2], [lastpos(c2, )], [),  		], [ 		, nullable(c1], [nullable(c1, )], [),  ], [ , nullable(c2], [nullable(c2, )]]

>> Trigrams: 
[[	, lastpos(c1, )], [lastpos(c1, ),  ], [),  , ], [ , ,  ], [,  , lastpos(c2], [ , lastpos(c2, )], [lastpos(c2, ),  		], [),  		, nullable(c1], [ 		, nullable(c1, )], [nullable(c1, ),  ], [),  , nullable(c2], [ , nullable(c2, )]]

>> Noun Phrases are: 
[	lastpos(c1,    lastpos(c2, nullable(c2]

>> Named Entities are: 
[]


============================ Sentence 204 =============================

	if  (nullable(c1))  thenfirstpos(c1)  firstpos(c2) else  firstpos(c1) 


>> Tokens are: 
[	,  , (, nullable(c1, ), ),  , thenfirstpos(c1, ), , firstpos(c2, ),  , firstpos(c1, )] 

>> PoS Tags are: 
[('\t', 'SPACE'), (' ', 'SPACE'), ('(', 'PUNCT'), ('nullable(c1', 'INTJ'), (')', 'PUNCT'), (')', 'PUNCT'), (' ', 'SPACE'), ('thenfirstpos(c1', 'NOUN'), (')', 'PUNCT'), ('\uf0c8', 'NOUN'), ('firstpos(c2', 'NOUN'), (')', 'PUNCT'), (' ', 'SPACE'), ('firstpos(c1', 'NOUN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), (' ', 'nsubj'), ('(', 'punct'), ('nullable(c1', 'intj'), (')', 'punct'), (')', 'punct'), (' ', 'advcl'), ('thenfirstpos(c1', 'dobj'), (')', 'punct'), ('\uf0c8', 'compound'), ('firstpos(c2', 'dobj'), (')', 'punct'), (' ', 'compound'), ('firstpos(c1', 'appos'), (')', 'punct')]

>> Bigrams: 
[[	,  ], [ , (], [(, nullable(c1], [nullable(c1, )], [), )], [),  ], [ , thenfirstpos(c1], [thenfirstpos(c1, )], [), ], [, firstpos(c2], [firstpos(c2, )], [),  ], [ , firstpos(c1], [firstpos(c1, )]]

>> Trigrams: 
[[	,  , (], [ , (, nullable(c1], [(, nullable(c1, )], [nullable(c1, ), )], [), ),  ], [),  , thenfirstpos(c1], [ , thenfirstpos(c1, )], [thenfirstpos(c1, ), ], [), , firstpos(c2], [, firstpos(c2, )], [firstpos(c2, ),  ], [),  , firstpos(c1], [ , firstpos(c1, )]]

>> Noun Phrases are: 
[thenfirstpos(c1,  firstpos(c2, else  firstpos(c1]

>> Named Entities are: 
[]


============================ Sentence 205 =============================

	if  (nullable(c2)) then  lastpos(c1)  lastpos(c2) else lastpos(c2)  		true	firstpos(c1) 


>> Tokens are: 
[	,  , (, nullable(c2, ), ),  , lastpos(c1, ), , lastpos(c2, ), lastpos(c2, ),  		, true, 	, firstpos(c1, )] 

>> PoS Tags are: 
[('\t', 'SPACE'), (' ', 'SPACE'), ('(', 'PUNCT'), ('nullable(c2', 'INTJ'), (')', 'PUNCT'), (')', 'PUNCT'), (' ', 'SPACE'), ('lastpos(c1', 'NOUN'), (')', 'PUNCT'), ('\uf0c8', 'NOUN'), ('lastpos(c2', 'NOUN'), (')', 'PUNCT'), ('lastpos(c2', 'VERB'), (')', 'PUNCT'), (' \t\t', 'SPACE'), ('true', 'ADJ'), ('\t', 'SPACE'), ('firstpos(c1', 'NOUN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'nsubj'), (' ', 'pobj'), ('(', 'punct'), ('nullable(c2', 'appos'), (')', 'punct'), (')', 'punct'), (' ', 'nsubj'), ('lastpos(c1', 'appos'), (')', 'punct'), ('\uf0c8', 'compound'), ('lastpos(c2', 'conj'), (')', 'punct'), ('lastpos(c2', 'advcl'), (')', 'punct'), (' \t\t', 'ROOT'), ('true', 'amod'), ('\t', 'amod'), ('firstpos(c1', 'dobj'), (')', 'punct')]

>> Bigrams: 
[[	,  ], [ , (], [(, nullable(c2], [nullable(c2, )], [), )], [),  ], [ , lastpos(c1], [lastpos(c1, )], [), ], [, lastpos(c2], [lastpos(c2, )], [), lastpos(c2], [lastpos(c2, )], [),  		], [ 		, true], [true, 	], [	, firstpos(c1], [firstpos(c1, )]]

>> Trigrams: 
[[	,  , (], [ , (, nullable(c2], [(, nullable(c2, )], [nullable(c2, ), )], [), ),  ], [),  , lastpos(c1], [ , lastpos(c1, )], [lastpos(c1, ), ], [), , lastpos(c2], [, lastpos(c2, )], [lastpos(c2, ), lastpos(c2], [), lastpos(c2, )], [lastpos(c2, ),  		], [),  		, true], [ 		, true, 	], [true, 	, firstpos(c1], [	, firstpos(c1, )]]

>> Noun Phrases are: 
[lastpos(c1,  lastpos(c2, true	firstpos(c1]

>> Named Entities are: 
[]


============================ Sentence 206 =============================

	lastpos(c1)   n c1 c2 n  n  c1 c2 c1    Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›   


>> Tokens are: 
[	, lastpos(c1, ),   , n, c1, c2, n,  , n,  , c1, c2, c1,    , Prof., Dixita, B, Kagathara,   , #, 2170701, (, CD, ),   , ,   , Unit, 2, –, Lexical, Analyzer, ‹#›,  ] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('lastpos(c1', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('n', 'CCONJ'), ('c1', 'PROPN'), ('c2', 'PROPN'), ('n', 'CCONJ'), (' ', 'SPACE'), ('n', 'CCONJ'), (' ', 'SPACE'), ('c1', 'PROPN'), ('c2', 'PROPN'), ('c1', 'NOUN'), ('   ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('  ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'PROPN'), ('Analyzer', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('\t', 'amod'), ('lastpos(c1', 'nsubj'), (')', 'punct'), ('  ', 'appos'), ('n', 'cc'), ('c1', 'appos'), ('c2', 'appos'), ('n', 'cc'), (' ', 'appos'), ('n', 'cc'), (' ', 'appos'), ('c1', 'appos'), ('c2', 'compound'), ('c1', 'nmod'), ('   ', 'nummod'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('  ', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'dep'), ('  ', 'punct'), ('Unit', 'appos'), ('2', 'nummod'), ('–', 'punct'), ('Lexical', 'compound'), ('Analyzer', 'ROOT'), ('‹#›', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[	, lastpos(c1], [lastpos(c1, )], [),   ], [  , n], [n, c1], [c1, c2], [c2, n], [n,  ], [ , n], [n,  ], [ , c1], [c1, c2], [c2, c1], [c1,    ], [   , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,   ], [  , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 2], [2, –], [–, Lexical], [Lexical, Analyzer], [Analyzer, ‹#›], [‹#›,  ]]

>> Trigrams: 
[[	, lastpos(c1, )], [lastpos(c1, ),   ], [),   , n], [  , n, c1], [n, c1, c2], [c1, c2, n], [c2, n,  ], [n,  , n], [ , n,  ], [n,  , c1], [ , c1, c2], [c1, c2, c1], [c2, c1,    ], [c1,    , Prof.], [   , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,   ], [Kagathara,   , #], [  , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 2], [Unit, 2, –], [2, –, Lexical], [–, Lexical, Analyzer], [Lexical, Analyzer, ‹#›], [Analyzer, ‹#›,  ]]

>> Noun Phrases are: 
[	lastpos(c1, c1, c2, c1, c2 c1    Prof. Dixita B Kagathara, (CD, Unit]

>> Named Entities are: 
[('Dixita', 'PERSON'), ('Kagathara', 'PERSON')]


============================ Sentence 207 =============================

Rules to compute followpos If n is concatenation node with left child c1 and right child c2 and i is a position in lastpos(c1), then all position in firstpos(c2) are in followpos(i)   


>> Tokens are: 
[Rules, compute, followpos, n, concatenation, node, left, child, c1, right, child, c2, position, lastpos(c1, ), ,, position, firstpos(c2, ), followpos(i, ),  ] 

>> PoS Tags are: 
[('Rules', 'NOUN'), ('compute', 'VERB'), ('followpos', 'NOUN'), ('n', 'CCONJ'), ('concatenation', 'NOUN'), ('node', 'NOUN'), ('left', 'ADJ'), ('child', 'NOUN'), ('c1', 'PROPN'), ('right', 'ADJ'), ('child', 'NOUN'), ('c2', 'NOUN'), ('position', 'NOUN'), ('lastpos(c1', 'NOUN'), (')', 'PUNCT'), (',', 'PUNCT'), ('position', 'NOUN'), ('firstpos(c2', 'NOUN'), (')', 'PUNCT'), ('followpos(i', 'PROPN'), (')', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Rules', 'nsubj'), ('compute', 'ROOT'), ('followpos', 'dobj'), ('n', 'advcl'), ('concatenation', 'compound'), ('node', 'attr'), ('left', 'amod'), ('child', 'compound'), ('c1', 'pobj'), ('right', 'amod'), ('child', 'conj'), ('c2', 'dobj'), ('position', 'attr'), ('lastpos(c1', 'pobj'), (')', 'punct'), (',', 'punct'), ('position', 'nsubj'), ('firstpos(c2', 'pobj'), (')', 'punct'), ('followpos(i', 'pobj'), (')', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[Rules, compute], [compute, followpos], [followpos, n], [n, concatenation], [concatenation, node], [node, left], [left, child], [child, c1], [c1, right], [right, child], [child, c2], [c2, position], [position, lastpos(c1], [lastpos(c1, )], [), ,], [,, position], [position, firstpos(c2], [firstpos(c2, )], [), followpos(i], [followpos(i, )], [),  ]]

>> Trigrams: 
[[Rules, compute, followpos], [compute, followpos, n], [followpos, n, concatenation], [n, concatenation, node], [concatenation, node, left], [node, left, child], [left, child, c1], [child, c1, right], [c1, right, child], [right, child, c2], [child, c2, position], [c2, position, lastpos(c1], [position, lastpos(c1, )], [lastpos(c1, ), ,], [), ,, position], [,, position, firstpos(c2], [position, firstpos(c2, )], [firstpos(c2, ), followpos(i], [), followpos(i, )], [followpos(i, ),  ]]

>> Noun Phrases are: 
[Rules, followpos, concatenation node, left child c1, right child, c2, i, a position, lastpos(c1, all position, firstpos(c2, followpos(i]

>> Named Entities are: 
[]


============================ Sentence 208 =============================

If n is * node and i is position in lastpos(n), then all position in firstpos(n) are in followpos(i)     Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Conversion from regular expression to DFA     . 


>> Tokens are: 
[n, *, node, position, lastpos(n, ), ,, position, firstpos(n, ), followpos(i, ),     , Prof., Dixita, B, Kagathara,   , #, 2170701, (, CD, ),   , ,   , Unit, 2, –, Lexical, Analyzer, ‹#›,  , Conversion, regular, expression, DFA,     , .] 

>> PoS Tags are: 
[('n', 'CCONJ'), ('*', 'PUNCT'), ('node', 'ADJ'), ('position', 'NOUN'), ('lastpos(n', 'PROPN'), (')', 'PUNCT'), (',', 'PUNCT'), ('position', 'NOUN'), ('firstpos(n', 'PROPN'), (')', 'PUNCT'), ('followpos(i', 'NOUN'), (')', 'PUNCT'), ('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('  ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'PROPN'), ('Analyzer', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE'), ('Conversion', 'PROPN'), ('regular', 'ADJ'), ('expression', 'NOUN'), ('DFA', 'VERB'), ('    ', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('n', 'nsubj'), ('*', 'punct'), ('node', 'acomp'), ('position', 'attr'), ('lastpos(n', 'pobj'), (')', 'punct'), (',', 'punct'), ('position', 'nsubj'), ('firstpos(n', 'pobj'), (')', 'punct'), ('followpos(i', 'pobj'), (')', 'punct'), ('    ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'attr'), ('  ', 'prep'), ('#', 'nmod'), ('2170701', 'npadvmod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'conj'), ('  ', 'punct'), ('Unit', 'appos'), ('2', 'nummod'), ('–', 'punct'), ('Lexical', 'compound'), ('Analyzer', 'attr'), ('‹#›', 'punct'), (' ', 'compound'), ('Conversion', 'appos'), ('regular', 'amod'), ('expression', 'pobj'), ('DFA', 'advcl'), ('    ', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[n, *], [*, node], [node, position], [position, lastpos(n], [lastpos(n, )], [), ,], [,, position], [position, firstpos(n], [firstpos(n, )], [), followpos(i], [followpos(i, )], [),     ], [    , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,   ], [  , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 2], [2, –], [–, Lexical], [Lexical, Analyzer], [Analyzer, ‹#›], [‹#›,  ], [ , Conversion], [Conversion, regular], [regular, expression], [expression, DFA], [DFA,     ], [    , .]]

>> Trigrams: 
[[n, *, node], [*, node, position], [node, position, lastpos(n], [position, lastpos(n, )], [lastpos(n, ), ,], [), ,, position], [,, position, firstpos(n], [position, firstpos(n, )], [firstpos(n, ), followpos(i], [), followpos(i, )], [followpos(i, ),     ], [),     , Prof.], [    , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,   ], [Kagathara,   , #], [  , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 2], [Unit, 2, –], [2, –, Lexical], [–, Lexical, Analyzer], [Lexical, Analyzer, ‹#›], [Analyzer, ‹#›,  ], [‹#›,  , Conversion], [ , Conversion, regular], [Conversion, regular, expression], [regular, expression, DFA], [expression, DFA,     ], [DFA,     , .]]

>> Noun Phrases are: 
[i, position, lastpos(n, all position, firstpos(n, followpos(i,     Prof. Dixita B Kagathara, (CD, Unit, – Lexical Analyzer,  Conversion, regular expression]

>> Named Entities are: 
[('Dixita', 'PERSON'), ('Kagathara', 'PERSON'), ('Conversion', 'ORG')]


============================ Sentence 209 =============================

   . . . 


>> Tokens are: 
[   , ., ., .] 

>> PoS Tags are: 
[('   ', 'SPACE'), ('.', 'PUNCT'), ('.', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('   ', 'ROOT'), ('.', 'punct'), ('.', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[   , .], [., .], [., .]]

>> Trigrams: 
[[   , ., .], [., ., .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 210 =============================

   (a|b) 


>> Tokens are: 
[   , (, a|b, )] 

>> PoS Tags are: 
[('   ', 'SPACE'), ('(', 'PUNCT'), ('a|b', 'X'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('   ', 'ROOT'), ('(', 'punct'), ('a|b', 'prep'), (')', 'punct')]

>> Bigrams: 
[[   , (], [(, a|b], [a|b, )]]

>> Trigrams: 
[[   , (, a|b], [(, a|b, )]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 211 =============================

* abb 


>> Tokens are: 
[*, abb] 

>> PoS Tags are: 
[('*', 'PUNCT'), ('abb', 'NOUN')] 

>> Dependency Tags are: 
[('*', 'punct'), ('abb', 'ROOT')]

>> Bigrams: 
[[*, abb]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[* abb]

>> Named Entities are: 
[]


============================ Sentence 212 =============================

     


>> Tokens are: 
[    ] 

>> PoS Tags are: 
[('    ', 'SPACE')] 

>> Dependency Tags are: 
[('    ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 213 =============================

# Step 2: Nullable node   


>> Tokens are: 
[#, Step, 2, :, Nullable, node,  ] 

>> PoS Tags are: 
[('#', 'NOUN'), ('Step', 'NOUN'), ('2', 'NUM'), (':', 'PUNCT'), ('Nullable', 'ADJ'), ('node', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('#', 'compound'), ('Step', 'ROOT'), ('2', 'nummod'), (':', 'punct'), ('Nullable', 'amod'), ('node', 'appos'), (' ', 'punct')]

>> Bigrams: 
[[#, Step], [Step, 2], [2, :], [:, Nullable], [Nullable, node], [node,  ]]

>> Trigrams: 
[[#, Step, 2], [Step, 2, :], [2, :, Nullable], [:, Nullable, node], [Nullable, node,  ]]

>> Noun Phrases are: 
[# Step, Nullable node]

>> Named Entities are: 
[('2', 'CARDINAL')]


============================ Sentence 214 =============================

Here, * is only nullable node   


>> Tokens are: 
[,, *, nullable, node,  ] 

>> PoS Tags are: 
[(',', 'PUNCT'), ('*', 'NOUN'), ('nullable', 'ADJ'), ('node', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[(',', 'punct'), ('*', 'nsubj'), ('nullable', 'amod'), ('node', 'attr'), (' ', 'punct')]

>> Bigrams: 
[[,, *], [*, nullable], [nullable, node], [node,  ]]

>> Trigrams: 
[[,, *, nullable], [*, nullable, node], [nullable, node,  ]]

>> Noun Phrases are: 
[*, only nullable node]

>> Named Entities are: 
[]


============================ Sentence 215 =============================

Step 1: Construct Syntax Tree    Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Conversion from regular expression to DFA     . 


>> Tokens are: 
[Step, 1, :, Construct, Syntax, Tree,    , Prof., Dixita, B, Kagathara,   , #, 2170701, (, CD, ),   , ,   , Unit, 2, –, Lexical, Analyzer, ‹#›,  , Conversion, regular, expression, DFA,     , .] 

>> PoS Tags are: 
[('Step', 'NOUN'), ('1', 'NUM'), (':', 'PUNCT'), ('Construct', 'PROPN'), ('Syntax', 'PROPN'), ('Tree', 'PROPN'), ('   ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('  ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'PROPN'), ('Analyzer', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE'), ('Conversion', 'PROPN'), ('regular', 'ADJ'), ('expression', 'NOUN'), ('DFA', 'VERB'), ('    ', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Step', 'nsubj'), ('1', 'nummod'), (':', 'punct'), ('Construct', 'compound'), ('Syntax', 'compound'), ('Tree', 'nmod'), ('   ', 'nummod'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('  ', 'prep'), ('#', 'nmod'), ('2170701', 'appos'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'punct'), ('Unit', 'appos'), ('2', 'nummod'), ('–', 'punct'), ('Lexical', 'compound'), ('Analyzer', 'npadvmod'), ('‹#›', 'punct'), (' ', 'compound'), ('Conversion', 'appos'), ('regular', 'amod'), ('expression', 'pobj'), ('DFA', 'advcl'), ('    ', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Step, 1], [1, :], [:, Construct], [Construct, Syntax], [Syntax, Tree], [Tree,    ], [   , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,   ], [  , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 2], [2, –], [–, Lexical], [Lexical, Analyzer], [Analyzer, ‹#›], [‹#›,  ], [ , Conversion], [Conversion, regular], [regular, expression], [expression, DFA], [DFA,     ], [    , .]]

>> Trigrams: 
[[Step, 1, :], [1, :, Construct], [:, Construct, Syntax], [Construct, Syntax, Tree], [Syntax, Tree,    ], [Tree,    , Prof.], [   , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,   ], [Kagathara,   , #], [  , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 2], [Unit, 2, –], [2, –, Lexical], [–, Lexical, Analyzer], [Lexical, Analyzer, ‹#›], [Analyzer, ‹#›,  ], [‹#›,  , Conversion], [ , Conversion, regular], [Conversion, regular, expression], [regular, expression, DFA], [expression, DFA,     ], [DFA,     , .]]

>> Noun Phrases are: 
[Step, Construct Syntax Tree    Prof. Dixita B Kagathara, (CD, Unit,  Conversion, regular expression]

>> Named Entities are: 
[('1', 'CARDINAL'), ('Construct Syntax Tree', 'ORG'), ('Dixita', 'PERSON'), ('Kagathara', 'PERSON'), ('Conversion', 'ORG')]


============================ Sentence 216 =============================

       . 


>> Tokens are: 
[       , .] 

>> PoS Tags are: 
[('       ', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('       ', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[       , .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 217 =============================

  . 


>> Tokens are: 
[  , .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[  , .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 218 =============================

  . 


>> Tokens are: 
[  , .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[  , .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 219 =============================

      Step 3: Calculate firstpos Firstpos   


>> Tokens are: 
[      , Step, 3, :, Calculate, firstpos, Firstpos,  ] 

>> PoS Tags are: 
[('      ', 'SPACE'), ('Step', 'NOUN'), ('3', 'NUM'), (':', 'PUNCT'), ('Calculate', 'VERB'), ('firstpos', 'NOUN'), ('Firstpos', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('      ', 'compound'), ('Step', 'ROOT'), ('3', 'nummod'), (':', 'punct'), ('Calculate', 'compound'), ('firstpos', 'appos'), ('Firstpos', 'appos'), (' ', 'punct')]

>> Bigrams: 
[[      , Step], [Step, 3], [3, :], [:, Calculate], [Calculate, firstpos], [firstpos, Firstpos], [Firstpos,  ]]

>> Trigrams: 
[[      , Step, 3], [Step, 3, :], [3, :, Calculate], [:, Calculate, firstpos], [Calculate, firstpos, Firstpos], [firstpos, Firstpos,  ]]

>> Noun Phrases are: 
[      Step, Calculate firstpos, Firstpos]

>> Named Entities are: 
[('3', 'CARDINAL'), ('Calculate', 'ORG'), ('Firstpos', 'PERSON')]


============================ Sentence 220 =============================

A leaf with position   n c1 c2 firstpos(c1)  firstpos(c2)  n c1 firstpos(c1)   n c1 c2       if  (nullable(c1))  thenfirstpos(c1)  firstpos(c2) else  firstpos(c1)    Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Conversion from regular expression to DFA     . 


>> Tokens are: 
[leaf, position,   , n, c1, c2, firstpos(c1, ), , firstpos(c2, ),  , n, c1, firstpos(c1, ),   , n, c1, c2,       ,  , (, nullable(c1, ), ),  , thenfirstpos(c1, ), , firstpos(c2, ),  , firstpos(c1, ),    , Prof., Dixita, B, Kagathara,   , #, 2170701, (, CD, ),   , ,   , Unit, 2, –, Lexical, Analyzer, ‹#›,  , Conversion, regular, expression, DFA,     , .] 

>> PoS Tags are: 
[('leaf', 'NOUN'), ('position', 'NOUN'), ('  ', 'SPACE'), ('n', 'CCONJ'), ('c1', 'PROPN'), ('c2', 'PROPN'), ('firstpos(c1', 'NOUN'), (')', 'PUNCT'), ('\uf0c8', 'NOUN'), ('firstpos(c2', 'NOUN'), (')', 'PUNCT'), (' ', 'SPACE'), ('n', 'CCONJ'), ('c1', 'PROPN'), ('firstpos(c1', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('n', 'CCONJ'), ('c1', 'NOUN'), ('c2', 'NUM'), ('      ', 'SPACE'), (' ', 'SPACE'), ('(', 'PUNCT'), ('nullable(c1', 'INTJ'), (')', 'PUNCT'), (')', 'PUNCT'), (' ', 'SPACE'), ('thenfirstpos(c1', 'NOUN'), (')', 'PUNCT'), ('\uf0c8', 'NOUN'), ('firstpos(c2', 'NOUN'), (')', 'PUNCT'), (' ', 'SPACE'), ('firstpos(c1', 'NOUN'), (')', 'PUNCT'), ('   ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('  ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'PROPN'), ('Analyzer', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE'), ('Conversion', 'PROPN'), ('regular', 'ADJ'), ('expression', 'NOUN'), ('DFA', 'VERB'), ('    ', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('leaf', 'nsubj'), ('position', 'compound'), ('  ', 'pobj'), ('n', 'cc'), ('c1', 'compound'), ('c2', 'compound'), ('firstpos(c1', 'appos'), (')', 'punct'), ('\uf0c8', 'compound'), ('firstpos(c2', 'appos'), (')', 'punct'), (' ', 'nmod'), ('n', 'cc'), ('c1', 'appos'), ('firstpos(c1', 'appos'), (')', 'punct'), ('  ', 'appos'), ('n', 'cc'), ('c1', 'appos'), ('c2', 'compound'), ('      ', 'appos'), (' ', 'nsubj'), ('(', 'punct'), ('nullable(c1', 'intj'), (')', 'punct'), (')', 'punct'), (' ', 'compound'), ('thenfirstpos(c1', 'appos'), (')', 'punct'), ('\uf0c8', 'compound'), ('firstpos(c2', 'appos'), (')', 'punct'), (' ', 'compound'), ('firstpos(c1', 'appos'), (')', 'punct'), ('   ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('  ', 'appos'), ('#', 'nmod'), ('2170701', 'appos'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('2', 'nummod'), ('–', 'punct'), ('Lexical', 'compound'), ('Analyzer', 'npadvmod'), ('‹#›', 'punct'), (' ', 'compound'), ('Conversion', 'appos'), ('regular', 'amod'), ('expression', 'pobj'), ('DFA', 'advcl'), ('    ', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[leaf, position], [position,   ], [  , n], [n, c1], [c1, c2], [c2, firstpos(c1], [firstpos(c1, )], [), ], [, firstpos(c2], [firstpos(c2, )], [),  ], [ , n], [n, c1], [c1, firstpos(c1], [firstpos(c1, )], [),   ], [  , n], [n, c1], [c1, c2], [c2,       ], [      ,  ], [ , (], [(, nullable(c1], [nullable(c1, )], [), )], [),  ], [ , thenfirstpos(c1], [thenfirstpos(c1, )], [), ], [, firstpos(c2], [firstpos(c2, )], [),  ], [ , firstpos(c1], [firstpos(c1, )], [),    ], [   , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,   ], [  , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 2], [2, –], [–, Lexical], [Lexical, Analyzer], [Analyzer, ‹#›], [‹#›,  ], [ , Conversion], [Conversion, regular], [regular, expression], [expression, DFA], [DFA,     ], [    , .]]

>> Trigrams: 
[[leaf, position,   ], [position,   , n], [  , n, c1], [n, c1, c2], [c1, c2, firstpos(c1], [c2, firstpos(c1, )], [firstpos(c1, ), ], [), , firstpos(c2], [, firstpos(c2, )], [firstpos(c2, ),  ], [),  , n], [ , n, c1], [n, c1, firstpos(c1], [c1, firstpos(c1, )], [firstpos(c1, ),   ], [),   , n], [  , n, c1], [n, c1, c2], [c1, c2,       ], [c2,       ,  ], [      ,  , (], [ , (, nullable(c1], [(, nullable(c1, )], [nullable(c1, ), )], [), ),  ], [),  , thenfirstpos(c1], [ , thenfirstpos(c1, )], [thenfirstpos(c1, ), ], [), , firstpos(c2], [, firstpos(c2, )], [firstpos(c2, ),  ], [),  , firstpos(c1], [ , firstpos(c1, )], [firstpos(c1, ),    ], [),    , Prof.], [   , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,   ], [Kagathara,   , #], [  , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 2], [Unit, 2, –], [2, –, Lexical], [–, Lexical, Analyzer], [Lexical, Analyzer, ‹#›], [Analyzer, ‹#›,  ], [‹#›,  , Conversion], [ , Conversion, regular], [Conversion, regular, expression], [regular, expression, DFA], [expression, DFA,     ], [DFA,     , .]]

>> Noun Phrases are: 
[A leaf, c1 c2 firstpos(c1,  firstpos(c2, c1, c1, if  (nullable(c1))  thenfirstpos(c1,  firstpos(c2, else  firstpos(c1,    Prof. Dixita B Kagathara, (CD, Unit,  Conversion, regular expression]

>> Named Entities are: 
[('Dixita', 'PERSON'), ('Kagathara', 'PERSON'), ('Conversion', 'ORG')]


============================ Sentence 221 =============================

             . 


>> Tokens are: 
[             , .] 

>> PoS Tags are: 
[('             ', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('             ', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[             , .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 222 =============================

    . 


>> Tokens are: 
[    , .] 

>> PoS Tags are: 
[('    ', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('    ', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[    , .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 223 =============================

    . 


>> Tokens are: 
[    , .] 

>> PoS Tags are: 
[('    ', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('    ', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[    , .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 224 =============================

        Step 3: Calculate lastpos        Lastpos   


>> Tokens are: 
[        , Step, 3, :, Calculate, lastpos,        , Lastpos,  ] 

>> PoS Tags are: 
[('        ', 'SPACE'), ('Step', 'NOUN'), ('3', 'NUM'), (':', 'PUNCT'), ('Calculate', 'PROPN'), ('lastpos', 'NOUN'), ('       ', 'SPACE'), ('Lastpos', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('        ', 'compound'), ('Step', 'dep'), ('3', 'nummod'), (':', 'punct'), ('Calculate', 'compound'), ('lastpos', 'ROOT'), ('       ', 'compound'), ('Lastpos', 'dobj'), (' ', 'punct')]

>> Bigrams: 
[[        , Step], [Step, 3], [3, :], [:, Calculate], [Calculate, lastpos], [lastpos,        ], [       , Lastpos], [Lastpos,  ]]

>> Trigrams: 
[[        , Step, 3], [Step, 3, :], [3, :, Calculate], [:, Calculate, lastpos], [Calculate, lastpos,        ], [lastpos,        , Lastpos], [       , Lastpos,  ]]

>> Noun Phrases are: 
[        Step 3: Calculate lastpos,        Lastpos]

>> Named Entities are: 
[('3', 'CARDINAL')]


============================ Sentence 225 =============================

A leaf with position   n c1 c2 if  (nullable(c2)) then  lastpos(c1)  lastpos(c2) else lastpos(c2)  n c1 lastpos(c1) 


>> Tokens are: 
[leaf, position,   , n, c1, c2,  , (, nullable(c2, ), ),  , lastpos(c1, ), , lastpos(c2, ), lastpos(c2, ),  , n, c1, lastpos(c1, )] 

>> PoS Tags are: 
[('leaf', 'NOUN'), ('position', 'NOUN'), ('  ', 'SPACE'), ('n', 'CCONJ'), ('c1', 'NOUN'), ('c2', 'PROPN'), (' ', 'SPACE'), ('(', 'PUNCT'), ('nullable(c2', 'INTJ'), (')', 'PUNCT'), (')', 'PUNCT'), (' ', 'SPACE'), ('lastpos(c1', 'NOUN'), (')', 'PUNCT'), ('\uf0c8', 'NOUN'), ('lastpos(c2', 'NOUN'), (')', 'PUNCT'), ('lastpos(c2', 'VERB'), (')', 'PUNCT'), (' ', 'SPACE'), ('n', 'CCONJ'), ('c1', 'PROPN'), ('lastpos(c1', 'NOUN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('leaf', 'nsubj'), ('position', 'compound'), ('  ', 'pobj'), ('n', 'cc'), ('c1', 'appos'), ('c2', 'appos'), (' ', 'pobj'), ('(', 'punct'), ('nullable(c2', 'intj'), (')', 'punct'), (')', 'punct'), (' ', 'nsubj'), ('lastpos(c1', 'appos'), (')', 'punct'), ('\uf0c8', 'compound'), ('lastpos(c2', 'conj'), (')', 'punct'), ('lastpos(c2', 'ROOT'), (')', 'punct'), (' ', 'dobj'), ('n', 'cc'), ('c1', 'conj'), ('lastpos(c1', 'conj'), (')', 'punct')]

>> Bigrams: 
[[leaf, position], [position,   ], [  , n], [n, c1], [c1, c2], [c2,  ], [ , (], [(, nullable(c2], [nullable(c2, )], [), )], [),  ], [ , lastpos(c1], [lastpos(c1, )], [), ], [, lastpos(c2], [lastpos(c2, )], [), lastpos(c2], [lastpos(c2, )], [),  ], [ , n], [n, c1], [c1, lastpos(c1], [lastpos(c1, )]]

>> Trigrams: 
[[leaf, position,   ], [position,   , n], [  , n, c1], [n, c1, c2], [c1, c2,  ], [c2,  , (], [ , (, nullable(c2], [(, nullable(c2, )], [nullable(c2, ), )], [), ),  ], [),  , lastpos(c1], [ , lastpos(c1, )], [lastpos(c1, ), ], [), , lastpos(c2], [, lastpos(c2, )], [lastpos(c2, ), lastpos(c2], [), lastpos(c2, )], [lastpos(c2, ),  ], [),  , n], [ , n, c1], [n, c1, lastpos(c1], [c1, lastpos(c1, )]]

>> Noun Phrases are: 
[A leaf, c1, c2, lastpos(c1,  lastpos(c2, c1, lastpos(c1]

>> Named Entities are: 
[]


============================ Sentence 226 =============================

  n c1 c2 lastpos(c1)  lastpos(c2)    Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Conversion from regular expression to DFA 	Position 	followpos      . 


>> Tokens are: 
[  , n, c1, c2, lastpos(c1, ), , lastpos(c2, ),    , Prof., Dixita, B, Kagathara,   , #, 2170701, (, CD, ),   , ,   , Unit, 2, –, Lexical, Analyzer, ‹#›,  , Conversion, regular, expression, DFA, 	, Position, 	, followpos,      , .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('n', 'CCONJ'), ('c1', 'PROPN'), ('c2', 'PROPN'), ('lastpos(c1', 'NOUN'), (')', 'PUNCT'), ('\uf0c8', 'NOUN'), ('lastpos(c2', 'NOUN'), (')', 'PUNCT'), ('   ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('  ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'PROPN'), ('Analyzer', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE'), ('Conversion', 'PROPN'), ('regular', 'ADJ'), ('expression', 'NOUN'), ('DFA', 'PROPN'), ('\t', 'SPACE'), ('Position', 'PROPN'), ('\t', 'SPACE'), ('followpos', 'VERB'), ('     ', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'nsubj'), ('n', 'cc'), ('c1', 'nmod'), ('c2', 'compound'), ('lastpos(c1', 'appos'), (')', 'punct'), ('\uf0c8', 'compound'), ('lastpos(c2', 'conj'), (')', 'punct'), ('   ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('  ', 'appos'), ('#', 'nmod'), ('2170701', 'appos'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'dep'), ('  ', 'punct'), ('Unit', 'appos'), ('2', 'nummod'), ('–', 'punct'), ('Lexical', 'compound'), ('Analyzer', 'nsubj'), ('‹#›', 'punct'), (' ', 'compound'), ('Conversion', 'appos'), ('regular', 'amod'), ('expression', 'pobj'), ('DFA', 'compound'), ('\t', 'compound'), ('Position', 'compound'), ('\t', 'pobj'), ('followpos', 'ROOT'), ('     ', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[  , n], [n, c1], [c1, c2], [c2, lastpos(c1], [lastpos(c1, )], [), ], [, lastpos(c2], [lastpos(c2, )], [),    ], [   , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,   ], [  , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 2], [2, –], [–, Lexical], [Lexical, Analyzer], [Analyzer, ‹#›], [‹#›,  ], [ , Conversion], [Conversion, regular], [regular, expression], [expression, DFA], [DFA, 	], [	, Position], [Position, 	], [	, followpos], [followpos,      ], [     , .]]

>> Trigrams: 
[[  , n, c1], [n, c1, c2], [c1, c2, lastpos(c1], [c2, lastpos(c1, )], [lastpos(c1, ), ], [), , lastpos(c2], [, lastpos(c2, )], [lastpos(c2, ),    ], [),    , Prof.], [   , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,   ], [Kagathara,   , #], [  , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 2], [Unit, 2, –], [2, –, Lexical], [–, Lexical, Analyzer], [Lexical, Analyzer, ‹#›], [Analyzer, ‹#›,  ], [‹#›,  , Conversion], [ , Conversion, regular], [Conversion, regular, expression], [regular, expression, DFA], [expression, DFA, 	], [DFA, 	, Position], [	, Position, 	], [Position, 	, followpos], [	, followpos,      ], [followpos,      , .]]

>> Noun Phrases are: 
[c1 c2 lastpos(c1,  lastpos(c2,    Prof. Dixita B Kagathara, (CD, Unit,  Conversion, regular expression]

>> Named Entities are: 
[('Dixita', 'PERSON'), ('Kagathara', 'PERSON'), ('Conversion', 'ORG')]


============================ Sentence 227 =============================

             . 


>> Tokens are: 
[             , .] 

>> PoS Tags are: 
[('             ', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('             ', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[             , .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 228 =============================

    . 


>> Tokens are: 
[    , .] 

>> PoS Tags are: 
[('    ', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('    ', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[    , .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 229 =============================

    . 


>> Tokens are: 
[    , .] 

>> PoS Tags are: 
[('    ', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('    ', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[    , .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 230 =============================

        Step 4: 


>> Tokens are: 
[        , Step, 4, :] 

>> PoS Tags are: 
[('        ', 'SPACE'), ('Step', 'NOUN'), ('4', 'NUM'), (':', 'PUNCT')] 

>> Dependency Tags are: 
[('        ', 'compound'), ('Step', 'ROOT'), ('4', 'nummod'), (':', 'punct')]

>> Bigrams: 
[[        , Step], [Step, 4], [4, :]]

>> Trigrams: 
[[        , Step, 4], [Step, 4, :]]

>> Noun Phrases are: 
[        Step]

>> Named Entities are: 
[('4', 'CARDINAL')]


============================ Sentence 231 =============================

Calculate followpos        	5	6    . 


>> Tokens are: 
[Calculate, followpos,        	, 5, 	, 6,    , .] 

>> PoS Tags are: 
[('Calculate', 'VERB'), ('followpos', 'VERB'), ('       \t', 'SPACE'), ('5', 'NUM'), ('\t', 'SPACE'), ('6', 'NUM'), ('   ', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Calculate', 'nsubj'), ('followpos', 'ROOT'), ('       \t', 'compound'), ('5', 'dobj'), ('\t', 'dobj'), ('6', 'nummod'), ('   ', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Calculate, followpos], [followpos,        	], [       	, 5], [5, 	], [	, 6], [6,    ], [   , .]]

>> Trigrams: 
[[Calculate, followpos,        	], [followpos,        	, 5], [       	, 5, 	], [5, 	, 6], [	, 6,    ], [6,    , .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 232 =============================

       Firstpos Lastpos     Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Conversion from regular expression to DFA  	Position 	followpos      . 


>> Tokens are: 
[       , Firstpos, Lastpos,     , Prof., Dixita, B, Kagathara,   , #, 2170701, (, CD, ),   , ,   , Unit, 2, –, Lexical, Analyzer, ‹#›,  , Conversion, regular, expression, DFA,  	, Position, 	, followpos,      , .] 

>> PoS Tags are: 
[('       ', 'SPACE'), ('Firstpos', 'PROPN'), ('Lastpos', 'PROPN'), ('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('  ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'PROPN'), ('Analyzer', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE'), ('Conversion', 'PROPN'), ('regular', 'ADJ'), ('expression', 'NOUN'), ('DFA', 'PROPN'), (' \t', 'SPACE'), ('Position', 'PROPN'), ('\t', 'SPACE'), ('followpos', 'NOUN'), ('     ', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('       ', 'compound'), ('Firstpos', 'compound'), ('Lastpos', 'nmod'), ('    ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'nsubj'), ('  ', 'appos'), ('#', 'nmod'), ('2170701', 'npadvmod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('2', 'nummod'), ('–', 'punct'), ('Lexical', 'compound'), ('Analyzer', 'npadvmod'), ('‹#›', 'punct'), (' ', 'compound'), ('Conversion', 'appos'), ('regular', 'amod'), ('expression', 'pobj'), ('DFA', 'compound'), (' \t', 'compound'), ('Position', 'compound'), ('\t', 'nsubj'), ('followpos', 'advcl'), ('     ', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[       , Firstpos], [Firstpos, Lastpos], [Lastpos,     ], [    , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,   ], [  , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 2], [2, –], [–, Lexical], [Lexical, Analyzer], [Analyzer, ‹#›], [‹#›,  ], [ , Conversion], [Conversion, regular], [regular, expression], [expression, DFA], [DFA,  	], [ 	, Position], [Position, 	], [	, followpos], [followpos,      ], [     , .]]

>> Trigrams: 
[[       , Firstpos, Lastpos], [Firstpos, Lastpos,     ], [Lastpos,     , Prof.], [    , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,   ], [Kagathara,   , #], [  , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 2], [Unit, 2, –], [2, –, Lexical], [–, Lexical, Analyzer], [Lexical, Analyzer, ‹#›], [Analyzer, ‹#›,  ], [‹#›,  , Conversion], [ , Conversion, regular], [Conversion, regular, expression], [regular, expression, DFA], [expression, DFA,  	], [DFA,  	, Position], [ 	, Position, 	], [Position, 	, followpos], [	, followpos,      ], [followpos,      , .]]

>> Noun Phrases are: 
[       Firstpos Lastpos     Prof. Dixita B Kagathara, (CD, Unit,  Conversion, regular expression]

>> Named Entities are: 
[('Dixita', 'PERSON'), ('Kagathara', 'PERSON'), ('Conversion', 'ORG'), ('DFA', 'ORG')]


============================ Sentence 233 =============================

             . 


>> Tokens are: 
[             , .] 

>> PoS Tags are: 
[('             ', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('             ', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[             , .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 234 =============================

    . 


>> Tokens are: 
[    , .] 

>> PoS Tags are: 
[('    ', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('    ', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[    , .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 235 =============================

    . 


>> Tokens are: 
[    , .] 

>> PoS Tags are: 
[('    ', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('    ', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[    , .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 236 =============================

        Step 4: 


>> Tokens are: 
[        , Step, 4, :] 

>> PoS Tags are: 
[('        ', 'SPACE'), ('Step', 'NOUN'), ('4', 'NUM'), (':', 'PUNCT')] 

>> Dependency Tags are: 
[('        ', 'compound'), ('Step', 'ROOT'), ('4', 'nummod'), (':', 'punct')]

>> Bigrams: 
[[        , Step], [Step, 4], [4, :]]

>> Trigrams: 
[[        , Step, 4], [Step, 4, :]]

>> Noun Phrases are: 
[        Step]

>> Named Entities are: 
[('4', 'CARDINAL')]


============================ Sentence 237 =============================

Calculate followpos        	5	6    . 


>> Tokens are: 
[Calculate, followpos,        	, 5, 	, 6,    , .] 

>> PoS Tags are: 
[('Calculate', 'VERB'), ('followpos', 'VERB'), ('       \t', 'SPACE'), ('5', 'NUM'), ('\t', 'SPACE'), ('6', 'NUM'), ('   ', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Calculate', 'nsubj'), ('followpos', 'ROOT'), ('       \t', 'compound'), ('5', 'dobj'), ('\t', 'dobj'), ('6', 'nummod'), ('   ', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[Calculate, followpos], [followpos,        	], [       	, 5], [5, 	], [	, 6], [6,    ], [   , .]]

>> Trigrams: 
[[Calculate, followpos,        	], [followpos,        	, 5], [       	, 5, 	], [5, 	, 6], [	, 6,    ], [6,    , .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 238 =============================

       	4	5     Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Conversion from regular expression to DFA  	Position 	followpos      . 


>> Tokens are: 
[       	, 4, 	, 5,     , Prof., Dixita, B, Kagathara,   , #, 2170701, (, CD, ),   , ,   , Unit, 2, –, Lexical, Analyzer, ‹#›,  , Conversion, regular, expression, DFA,  	, Position, 	, followpos,      , .] 

>> PoS Tags are: 
[('       \t', 'SPACE'), ('4', 'NUM'), ('\t', 'SPACE'), ('5', 'NUM'), ('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('  ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'PROPN'), ('Analyzer', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE'), ('Conversion', 'PROPN'), ('regular', 'ADJ'), ('expression', 'NOUN'), ('DFA', 'PROPN'), (' \t', 'SPACE'), ('Position', 'PROPN'), ('\t', 'SPACE'), ('followpos', 'NOUN'), ('     ', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('       \t', 'quantmod'), ('4', 'nummod'), ('\t', 'nmod'), ('5', 'nummod'), ('    ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'nsubj'), ('  ', 'appos'), ('#', 'nmod'), ('2170701', 'npadvmod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('2', 'nummod'), ('–', 'punct'), ('Lexical', 'compound'), ('Analyzer', 'npadvmod'), ('‹#›', 'punct'), (' ', 'compound'), ('Conversion', 'appos'), ('regular', 'amod'), ('expression', 'pobj'), ('DFA', 'compound'), (' \t', 'compound'), ('Position', 'compound'), ('\t', 'nsubj'), ('followpos', 'advcl'), ('     ', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[       	, 4], [4, 	], [	, 5], [5,     ], [    , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,   ], [  , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 2], [2, –], [–, Lexical], [Lexical, Analyzer], [Analyzer, ‹#›], [‹#›,  ], [ , Conversion], [Conversion, regular], [regular, expression], [expression, DFA], [DFA,  	], [ 	, Position], [Position, 	], [	, followpos], [followpos,      ], [     , .]]

>> Trigrams: 
[[       	, 4, 	], [4, 	, 5], [	, 5,     ], [5,     , Prof.], [    , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,   ], [Kagathara,   , #], [  , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 2], [Unit, 2, –], [2, –, Lexical], [–, Lexical, Analyzer], [Lexical, Analyzer, ‹#›], [Analyzer, ‹#›,  ], [‹#›,  , Conversion], [ , Conversion, regular], [Conversion, regular, expression], [regular, expression, DFA], [expression, DFA,  	], [DFA,  	, Position], [ 	, Position, 	], [Position, 	, followpos], [	, followpos,      ], [followpos,      , .]]

>> Noun Phrases are: 
[       	4	5     Prof. Dixita B Kagathara, (CD, Unit,  Conversion, regular expression]

>> Named Entities are: 
[('Dixita', 'PERSON'), ('Kagathara', 'PERSON'), ('Conversion', 'ORG'), ('DFA', 'ORG')]


============================ Sentence 239 =============================

             . 


>> Tokens are: 
[             , .] 

>> PoS Tags are: 
[('             ', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('             ', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[             , .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 240 =============================

    . 


>> Tokens are: 
[    , .] 

>> PoS Tags are: 
[('    ', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('    ', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[    , .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 241 =============================

    . 


>> Tokens are: 
[    , .] 

>> PoS Tags are: 
[('    ', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('    ', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[    , .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 242 =============================

        Step 4: 


>> Tokens are: 
[        , Step, 4, :] 

>> PoS Tags are: 
[('        ', 'SPACE'), ('Step', 'NOUN'), ('4', 'NUM'), (':', 'PUNCT')] 

>> Dependency Tags are: 
[('        ', 'compound'), ('Step', 'ROOT'), ('4', 'nummod'), (':', 'punct')]

>> Bigrams: 
[[        , Step], [Step, 4], [4, :]]

>> Trigrams: 
[[        , Step, 4], [Step, 4, :]]

>> Noun Phrases are: 
[        Step]

>> Named Entities are: 
[('4', 'CARDINAL')]


============================ Sentence 243 =============================

Calculate followpos        	5	6    . 


>> Tokens are: 
[Calculate, followpos,        	, 5, 	, 6,    , .] 

>> PoS Tags are: 
[('Calculate', 'VERB'), ('followpos', 'VERB'), ('       \t', 'SPACE'), ('5', 'NUM'), ('\t', 'SPACE'), ('6', 'NUM'), ('   ', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Calculate', 'nsubj'), ('followpos', 'ROOT'), ('       \t', 'compound'), ('5', 'dobj'), ('\t', 'dobj'), ('6', 'nummod'), ('   ', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[Calculate, followpos], [followpos,        	], [       	, 5], [5, 	], [	, 6], [6,    ], [   , .]]

>> Trigrams: 
[[Calculate, followpos,        	], [followpos,        	, 5], [       	, 5, 	], [5, 	, 6], [	, 6,    ], [6,    , .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 244 =============================

       	4	5  	3	4   


>> Tokens are: 
[       	, 4, 	, 5,  	, 3, 	, 4,  ] 

>> PoS Tags are: 
[('       \t', 'SPACE'), ('4', 'NUM'), ('\t', 'SPACE'), ('5', 'NUM'), (' \t', 'SPACE'), ('3', 'NUM'), ('\t', 'SPACE'), ('4', 'NUM'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('       \t', 'quantmod'), ('4', 'nummod'), ('\t', 'ROOT'), ('5', 'nummod'), (' \t', 'appos'), ('3', 'nummod'), ('\t', 'appos'), ('4', 'nummod'), (' ', 'appos')]

>> Bigrams: 
[[       	, 4], [4, 	], [	, 5], [5,  	], [ 	, 3], [3, 	], [	, 4], [4,  ]]

>> Trigrams: 
[[       	, 4, 	], [4, 	, 5], [	, 5,  	], [5,  	, 3], [ 	, 3, 	], [3, 	, 4], [	, 4,  ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('3', 'CARDINAL')]


============================ Sentence 245 =============================

Firstpos Lastpos     Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Conversion from regular expression to DFA  	Position 	followpos      . 


>> Tokens are: 
[Firstpos, Lastpos,     , Prof., Dixita, B, Kagathara,   , #, 2170701, (, CD, ),   , ,   , Unit, 2, –, Lexical, Analyzer, ‹#›,  , Conversion, regular, expression, DFA,  	, Position, 	, followpos,      , .] 

>> PoS Tags are: 
[('Firstpos', 'PROPN'), ('Lastpos', 'PROPN'), ('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('  ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'PROPN'), ('Analyzer', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE'), ('Conversion', 'PROPN'), ('regular', 'ADJ'), ('expression', 'NOUN'), ('DFA', 'PROPN'), (' \t', 'SPACE'), ('Position', 'PROPN'), ('\t', 'SPACE'), ('followpos', 'NOUN'), ('     ', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Firstpos', 'compound'), ('Lastpos', 'nmod'), ('    ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'nsubj'), ('  ', 'appos'), ('#', 'nmod'), ('2170701', 'npadvmod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('2', 'nummod'), ('–', 'punct'), ('Lexical', 'compound'), ('Analyzer', 'npadvmod'), ('‹#›', 'punct'), (' ', 'compound'), ('Conversion', 'appos'), ('regular', 'amod'), ('expression', 'pobj'), ('DFA', 'compound'), (' \t', 'compound'), ('Position', 'compound'), ('\t', 'nsubj'), ('followpos', 'advcl'), ('     ', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Firstpos, Lastpos], [Lastpos,     ], [    , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,   ], [  , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 2], [2, –], [–, Lexical], [Lexical, Analyzer], [Analyzer, ‹#›], [‹#›,  ], [ , Conversion], [Conversion, regular], [regular, expression], [expression, DFA], [DFA,  	], [ 	, Position], [Position, 	], [	, followpos], [followpos,      ], [     , .]]

>> Trigrams: 
[[Firstpos, Lastpos,     ], [Lastpos,     , Prof.], [    , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,   ], [Kagathara,   , #], [  , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 2], [Unit, 2, –], [2, –, Lexical], [–, Lexical, Analyzer], [Lexical, Analyzer, ‹#›], [Analyzer, ‹#›,  ], [‹#›,  , Conversion], [ , Conversion, regular], [Conversion, regular, expression], [regular, expression, DFA], [expression, DFA,  	], [DFA,  	, Position], [ 	, Position, 	], [Position, 	, followpos], [	, followpos,      ], [followpos,      , .]]

>> Noun Phrases are: 
[Firstpos Lastpos     Prof. Dixita B Kagathara, (CD, Unit,  Conversion, regular expression]

>> Named Entities are: 
[('Dixita', 'PERSON'), ('Kagathara', 'PERSON'), ('Conversion', 'ORG'), ('DFA', 'ORG')]


============================ Sentence 246 =============================

             . 


>> Tokens are: 
[             , .] 

>> PoS Tags are: 
[('             ', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('             ', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[             , .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 247 =============================

    . 


>> Tokens are: 
[    , .] 

>> PoS Tags are: 
[('    ', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('    ', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[    , .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 248 =============================

    . 


>> Tokens are: 
[    , .] 

>> PoS Tags are: 
[('    ', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('    ', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[    , .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 249 =============================

        Step 4: 


>> Tokens are: 
[        , Step, 4, :] 

>> PoS Tags are: 
[('        ', 'SPACE'), ('Step', 'NOUN'), ('4', 'NUM'), (':', 'PUNCT')] 

>> Dependency Tags are: 
[('        ', 'compound'), ('Step', 'ROOT'), ('4', 'nummod'), (':', 'punct')]

>> Bigrams: 
[[        , Step], [Step, 4], [4, :]]

>> Trigrams: 
[[        , Step, 4], [Step, 4, :]]

>> Noun Phrases are: 
[        Step]

>> Named Entities are: 
[('4', 'CARDINAL')]


============================ Sentence 250 =============================

Calculate followpos        	5	6    . 


>> Tokens are: 
[Calculate, followpos,        	, 5, 	, 6,    , .] 

>> PoS Tags are: 
[('Calculate', 'VERB'), ('followpos', 'VERB'), ('       \t', 'SPACE'), ('5', 'NUM'), ('\t', 'SPACE'), ('6', 'NUM'), ('   ', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Calculate', 'nsubj'), ('followpos', 'ROOT'), ('       \t', 'compound'), ('5', 'dobj'), ('\t', 'dobj'), ('6', 'nummod'), ('   ', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Calculate, followpos], [followpos,        	], [       	, 5], [5, 	], [	, 6], [6,    ], [   , .]]

>> Trigrams: 
[[Calculate, followpos,        	], [followpos,        	, 5], [       	, 5, 	], [5, 	, 6], [	, 6,    ], [6,    , .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 251 =============================

    	4	5  	3	4  	2	3  	1	3   


>> Tokens are: 
[    	, 4, 	, 5,  	, 3, 	, 4,  	, 2, 	, 3,  	, 1, 	, 3,  ] 

>> PoS Tags are: 
[('    \t', 'SPACE'), ('4', 'NUM'), ('\t', 'SPACE'), ('5', 'NUM'), (' \t', 'SPACE'), ('3', 'NUM'), ('\t', 'SPACE'), ('4', 'NUM'), (' \t', 'SPACE'), ('2', 'NUM'), ('\t', 'SPACE'), ('3', 'NUM'), (' \t', 'SPACE'), ('1', 'NUM'), ('\t', 'SPACE'), ('3', 'NUM'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('    \t', 'quantmod'), ('4', 'nummod'), ('\t', 'nmod'), ('5', 'quantmod'), (' \t', 'compound'), ('3', 'nummod'), ('\t', 'ROOT'), ('4', 'quantmod'), (' \t', 'compound'), ('2', 'appos'), ('\t', 'appos'), ('3', 'punct'), (' \t', 'nmod'), ('1', 'nummod'), ('\t', 'appos'), ('3', 'nummod'), (' ', 'appos')]

>> Bigrams: 
[[    	, 4], [4, 	], [	, 5], [5,  	], [ 	, 3], [3, 	], [	, 4], [4,  	], [ 	, 2], [2, 	], [	, 3], [3,  	], [ 	, 1], [1, 	], [	, 3], [3,  ]]

>> Trigrams: 
[[    	, 4, 	], [4, 	, 5], [	, 5,  	], [5,  	, 3], [ 	, 3, 	], [3, 	, 4], [	, 4,  	], [4,  	, 2], [ 	, 2, 	], [2, 	, 3], [	, 3,  	], [3,  	, 1], [ 	, 1, 	], [1, 	, 3], [	, 3,  ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('3', 'CARDINAL'), ('2', 'CARDINAL'), ('1', 'CARDINAL')]


============================ Sentence 252 =============================

Firstpos Lastpos          Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Conversion from regular expression to DFA  	Position 	followpos      . 


>> Tokens are: 
[Firstpos, Lastpos,          , Prof., Dixita, B, Kagathara,   , #, 2170701, (, CD, ),   , ,   , Unit, 2, –, Lexical, Analyzer, ‹#›,  , Conversion, regular, expression, DFA,  	, Position, 	, followpos,      , .] 

>> PoS Tags are: 
[('Firstpos', 'PROPN'), ('Lastpos', 'PROPN'), ('         ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('  ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'PROPN'), ('Analyzer', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE'), ('Conversion', 'PROPN'), ('regular', 'ADJ'), ('expression', 'NOUN'), ('DFA', 'PROPN'), (' \t', 'SPACE'), ('Position', 'PROPN'), ('\t', 'SPACE'), ('followpos', 'NOUN'), ('     ', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Firstpos', 'compound'), ('Lastpos', 'nmod'), ('         ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'nsubj'), ('  ', 'appos'), ('#', 'nmod'), ('2170701', 'npadvmod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('2', 'nummod'), ('–', 'punct'), ('Lexical', 'compound'), ('Analyzer', 'npadvmod'), ('‹#›', 'punct'), (' ', 'compound'), ('Conversion', 'appos'), ('regular', 'amod'), ('expression', 'pobj'), ('DFA', 'compound'), (' \t', 'compound'), ('Position', 'compound'), ('\t', 'nsubj'), ('followpos', 'advcl'), ('     ', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Firstpos, Lastpos], [Lastpos,          ], [         , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,   ], [  , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 2], [2, –], [–, Lexical], [Lexical, Analyzer], [Analyzer, ‹#›], [‹#›,  ], [ , Conversion], [Conversion, regular], [regular, expression], [expression, DFA], [DFA,  	], [ 	, Position], [Position, 	], [	, followpos], [followpos,      ], [     , .]]

>> Trigrams: 
[[Firstpos, Lastpos,          ], [Lastpos,          , Prof.], [         , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,   ], [Kagathara,   , #], [  , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 2], [Unit, 2, –], [2, –, Lexical], [–, Lexical, Analyzer], [Lexical, Analyzer, ‹#›], [Analyzer, ‹#›,  ], [‹#›,  , Conversion], [ , Conversion, regular], [Conversion, regular, expression], [regular, expression, DFA], [expression, DFA,  	], [DFA,  	, Position], [ 	, Position, 	], [Position, 	, followpos], [	, followpos,      ], [followpos,      , .]]

>> Noun Phrases are: 
[Firstpos Lastpos          Prof. Dixita B Kagathara, (CD, Unit,  Conversion, regular expression]

>> Named Entities are: 
[('Dixita', 'PERSON'), ('Kagathara', 'PERSON'), ('Conversion', 'ORG'), ('DFA', 'ORG')]


============================ Sentence 253 =============================

             . 


>> Tokens are: 
[             , .] 

>> PoS Tags are: 
[('             ', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('             ', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[             , .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 254 =============================

    . 


>> Tokens are: 
[    , .] 

>> PoS Tags are: 
[('    ', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('    ', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[    , .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 255 =============================

    . 


>> Tokens are: 
[    , .] 

>> PoS Tags are: 
[('    ', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('    ', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[    , .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 256 =============================

        Step 4: 


>> Tokens are: 
[        , Step, 4, :] 

>> PoS Tags are: 
[('        ', 'SPACE'), ('Step', 'NOUN'), ('4', 'NUM'), (':', 'PUNCT')] 

>> Dependency Tags are: 
[('        ', 'compound'), ('Step', 'ROOT'), ('4', 'nummod'), (':', 'punct')]

>> Bigrams: 
[[        , Step], [Step, 4], [4, :]]

>> Trigrams: 
[[        , Step, 4], [Step, 4, :]]

>> Noun Phrases are: 
[        Step]

>> Named Entities are: 
[('4', 'CARDINAL')]


============================ Sentence 257 =============================

Calculate followpos        	5	6   	4	5  	3	4  	2	3  	1	3    * 1,2, 1,2, Firstpos Lastpos          Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Conversion from regular expression to DFA Initial state =  of root = {1,2,3} ----- 


>> Tokens are: 
[Calculate, followpos,        	, 5, 	, 6,   	, 4, 	, 5,  	, 3, 	, 4,  	, 2, 	, 3,  	, 1, 	, 3,    , *, 1,2, ,, 1,2, ,, Firstpos, Lastpos,          , Prof., Dixita, B, Kagathara,   , #, 2170701, (, CD, ),   , ,   , Unit, 2, –, Lexical, Analyzer, ‹#›,  , Conversion, regular, expression, DFA, Initial, state, =,  , root, =, {, 1,2,3, }, -----] 

>> PoS Tags are: 
[('Calculate', 'VERB'), ('followpos', 'VERB'), ('       \t', 'SPACE'), ('5', 'NUM'), ('\t', 'SPACE'), ('6', 'NUM'), ('  \t', 'SPACE'), ('4', 'NUM'), ('\t', 'SPACE'), ('5', 'NUM'), (' \t', 'SPACE'), ('3', 'NUM'), ('\t', 'SPACE'), ('4', 'NUM'), (' \t', 'SPACE'), ('2', 'NUM'), ('\t', 'SPACE'), ('3', 'NUM'), (' \t', 'SPACE'), ('1', 'NUM'), ('\t', 'SPACE'), ('3', 'NUM'), ('   ', 'SPACE'), ('*', 'SYM'), ('1,2', 'NUM'), (',', 'PUNCT'), ('1,2', 'NUM'), (',', 'PUNCT'), ('Firstpos', 'PROPN'), ('Lastpos', 'PROPN'), ('         ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('  ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'PROPN'), ('Analyzer', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE'), ('Conversion', 'PROPN'), ('regular', 'ADJ'), ('expression', 'NOUN'), ('DFA', 'PROPN'), ('Initial', 'ADJ'), ('state', 'NOUN'), ('=', 'PUNCT'), (' ', 'SPACE'), ('root', 'NOUN'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('1,2,3', 'NUM'), ('}', 'PUNCT'), ('-----', 'PUNCT')] 

>> Dependency Tags are: 
[('Calculate', 'nsubj'), ('followpos', 'dep'), ('       \t', 'compound'), ('5', 'dobj'), ('\t', 'dobj'), ('6', 'quantmod'), ('  \t', 'compound'), ('4', 'appos'), ('\t', 'quantmod'), ('5', 'quantmod'), (' \t', 'compound'), ('3', 'ccomp'), ('\t', 'dobj'), ('4', 'quantmod'), (' \t', 'compound'), ('2', 'appos'), ('\t', 'dobj'), ('3', 'quantmod'), (' \t', 'compound'), ('1', 'ccomp'), ('\t', 'dobj'), ('3', 'compound'), ('   ', 'appos'), ('*', 'punct'), ('1,2', 'appos'), (',', 'punct'), ('1,2', 'appos'), (',', 'punct'), ('Firstpos', 'compound'), ('Lastpos', 'nmod'), ('         ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('  ', 'ccomp'), ('#', 'nmod'), ('2170701', 'npadvmod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'advcl'), ('  ', 'punct'), ('Unit', 'appos'), ('2', 'nummod'), ('–', 'punct'), ('Lexical', 'compound'), ('Analyzer', 'ROOT'), ('‹#›', 'punct'), (' ', 'compound'), ('Conversion', 'appos'), ('regular', 'amod'), ('expression', 'pobj'), ('DFA', 'nmod'), ('Initial', 'amod'), ('state', 'pobj'), ('=', 'punct'), (' ', 'appos'), ('root', 'pobj'), ('=', 'punct'), ('{', 'punct'), ('1,2,3', 'appos'), ('}', 'punct'), ('-----', 'punct')]

>> Bigrams: 
[[Calculate, followpos], [followpos,        	], [       	, 5], [5, 	], [	, 6], [6,   	], [  	, 4], [4, 	], [	, 5], [5,  	], [ 	, 3], [3, 	], [	, 4], [4,  	], [ 	, 2], [2, 	], [	, 3], [3,  	], [ 	, 1], [1, 	], [	, 3], [3,    ], [   , *], [*, 1,2], [1,2, ,], [,, 1,2], [1,2, ,], [,, Firstpos], [Firstpos, Lastpos], [Lastpos,          ], [         , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,   ], [  , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 2], [2, –], [–, Lexical], [Lexical, Analyzer], [Analyzer, ‹#›], [‹#›,  ], [ , Conversion], [Conversion, regular], [regular, expression], [expression, DFA], [DFA, Initial], [Initial, state], [state, =], [=,  ], [ , root], [root, =], [=, {], [{, 1,2,3], [1,2,3, }], [}, -----]]

>> Trigrams: 
[[Calculate, followpos,        	], [followpos,        	, 5], [       	, 5, 	], [5, 	, 6], [	, 6,   	], [6,   	, 4], [  	, 4, 	], [4, 	, 5], [	, 5,  	], [5,  	, 3], [ 	, 3, 	], [3, 	, 4], [	, 4,  	], [4,  	, 2], [ 	, 2, 	], [2, 	, 3], [	, 3,  	], [3,  	, 1], [ 	, 1, 	], [1, 	, 3], [	, 3,    ], [3,    , *], [   , *, 1,2], [*, 1,2, ,], [1,2, ,, 1,2], [,, 1,2, ,], [1,2, ,, Firstpos], [,, Firstpos, Lastpos], [Firstpos, Lastpos,          ], [Lastpos,          , Prof.], [         , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,   ], [Kagathara,   , #], [  , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 2], [Unit, 2, –], [2, –, Lexical], [–, Lexical, Analyzer], [Lexical, Analyzer, ‹#›], [Analyzer, ‹#›,  ], [‹#›,  , Conversion], [ , Conversion, regular], [Conversion, regular, expression], [regular, expression, DFA], [expression, DFA, Initial], [DFA, Initial, state], [Initial, state, =], [state, =,  ], [=,  , root], [ , root, =], [root, =, {], [=, {, 1,2,3], [{, 1,2,3, }], [1,2,3, }, -----]]

>> Noun Phrases are: 
[Firstpos Lastpos          Prof. Dixita B Kagathara, (CD, Unit,  Conversion, regular expression, DFA Initial state, root]

>> Named Entities are: 
[('6', 'CARDINAL'), ('5', 'CARDINAL'), ('3', 'CARDINAL'), ('2', 'CARDINAL'), ('1', 'CARDINAL'), ('1,2, 1,2', 'DATE'), ('Firstpos Lastpos', 'PERSON'), ('Dixita', 'PERSON'), ('Kagathara', 'PERSON'), ('Conversion', 'ORG'), ('DFA Initial', 'ORG'), ('1,2,3', 'DATE')]


============================ Sentence 258 =============================

A State A δ( (1,2,3),a) = followpos(1) 


>> Tokens are: 
[State, δ, (, (, 1,2,3),a, ), =, followpos(1, )] 

>> PoS Tags are: 
[('State', 'NOUN'), ('δ', 'NOUN'), ('(', 'PUNCT'), ('(', 'PUNCT'), ('1,2,3),a', 'NUM'), (')', 'PUNCT'), ('=', 'PUNCT'), ('followpos(1', 'PROPN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('State', 'compound'), ('δ', 'nummod'), ('(', 'punct'), ('(', 'punct'), ('1,2,3),a', 'appos'), (')', 'punct'), ('=', 'punct'), ('followpos(1', 'ROOT'), (')', 'punct')]

>> Bigrams: 
[[State, δ], [δ, (], [(, (], [(, 1,2,3),a], [1,2,3),a, )], [), =], [=, followpos(1], [followpos(1, )]]

>> Trigrams: 
[[State, δ, (], [δ, (, (], [(, (, 1,2,3),a], [(, 1,2,3),a, )], [1,2,3),a, ), =], [), =, followpos(1], [=, followpos(1, )]]

>> Noun Phrases are: 
[A State A δ( (1,2,3),a) = followpos(1]

>> Named Entities are: 
[('A State A', 'WORK_OF_ART')]


============================ Sentence 259 =============================

U followpos(3) 


>> Tokens are: 
[U, followpos(3, )] 

>> PoS Tags are: 
[('U', 'NOUN'), ('followpos(3', 'NOUN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('U', 'compound'), ('followpos(3', 'ROOT'), (')', 'punct')]

>> Bigrams: 
[[U, followpos(3], [followpos(3, )]]

>> Trigrams: 
[[U, followpos(3, )]]

>> Noun Phrases are: 
[U followpos(3]

>> Named Entities are: 
[]


============================ Sentence 260 =============================

		=(1,2,3) 


>> Tokens are: 
[		, =(, 1,2,3, )] 

>> PoS Tags are: 
[('\t\t', 'SPACE'), ('=(', 'NOUN'), ('1,2,3', 'NUM'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('\t\t', 'ROOT'), ('=(', 'pobj'), ('1,2,3', 'advmod'), (')', 'punct')]

>> Bigrams: 
[[		, =(], [=(, 1,2,3], [1,2,3, )]]

>> Trigrams: 
[[		, =(, 1,2,3], [=(, 1,2,3, )]]

>> Noun Phrases are: 
[=(]

>> Named Entities are: 
[]


============================ Sentence 261 =============================

U (4) = {1,2,3,4} ----- 


>> Tokens are: 
[U, (, 4, ), =, {, 1,2,3,4, }, -----] 

>> PoS Tags are: 
[('U', 'NOUN'), ('(', 'PUNCT'), ('4', 'NUM'), (')', 'PUNCT'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('1,2,3,4', 'NUM'), ('}', 'PUNCT'), ('-----', 'PUNCT')] 

>> Dependency Tags are: 
[('U', 'ROOT'), ('(', 'punct'), ('4', 'appos'), (')', 'punct'), ('=', 'punct'), ('{', 'punct'), ('1,2,3,4', 'appos'), ('}', 'punct'), ('-----', 'punct')]

>> Bigrams: 
[[U, (], [(, 4], [4, )], [), =], [=, {], [{, 1,2,3,4], [1,2,3,4, }], [}, -----]]

>> Trigrams: 
[[U, (, 4], [(, 4, )], [4, ), =], [), =, {], [=, {, 1,2,3,4], [{, 1,2,3,4, }], [1,2,3,4, }, -----]]

>> Noun Phrases are: 
[U]

>> Named Entities are: 
[('1,2,3,4', 'DATE')]


============================ Sentence 262 =============================

B  δ( (1,2,3),b) = followpos(2)  		=(1,2,3) ----- 


>> Tokens are: 
[B,  , δ, (, (, 1,2,3),b, ), =, followpos(2, ),  		, =(, 1,2,3, ), -----] 

>> PoS Tags are: 
[('B', 'NOUN'), (' ', 'SPACE'), ('δ', 'PROPN'), ('(', 'PUNCT'), ('(', 'PUNCT'), ('1,2,3),b', 'NUM'), (')', 'PUNCT'), ('=', 'PUNCT'), ('followpos(2', 'PROPN'), (')', 'PUNCT'), (' \t\t', 'SPACE'), ('=(', 'NOUN'), ('1,2,3', 'NUM'), (')', 'PUNCT'), ('-----', 'PUNCT')] 

>> Dependency Tags are: 
[('B', 'nsubj'), (' ', 'appos'), ('δ', 'punct'), ('(', 'punct'), ('(', 'punct'), ('1,2,3),b', 'appos'), (')', 'punct'), ('=', 'punct'), ('followpos(2', 'appos'), (')', 'punct'), (' \t\t', 'ROOT'), ('=(', 'dobj'), ('1,2,3', 'nummod'), (')', 'punct'), ('-----', 'punct')]

>> Bigrams: 
[[B,  ], [ , δ], [δ, (], [(, (], [(, 1,2,3),b], [1,2,3),b, )], [), =], [=, followpos(2], [followpos(2, )], [),  		], [ 		, =(], [=(, 1,2,3], [1,2,3, )], [), -----]]

>> Trigrams: 
[[B,  , δ], [ , δ, (], [δ, (, (], [(, (, 1,2,3),b], [(, 1,2,3),b, )], [1,2,3),b, ), =], [), =, followpos(2], [=, followpos(2, )], [followpos(2, ),  		], [),  		, =(], [ 		, =(, 1,2,3], [=(, 1,2,3, )], [1,2,3, ), -----]]

>> Noun Phrases are: 
[B, followpos(2, =(]

>> Named Entities are: 
[('1,2,3),b', 'CARDINAL')]


============================ Sentence 263 =============================

A  	Position 	followpos  	5	6  	4	5  	3	4  	2	1,2,3  	1	1,2,3  	States 


>> Tokens are: 
[ 	, Position, 	, followpos,  	, 5, 	, 6,  	, 4, 	, 5,  	, 3, 	, 4,  	, 2, 	, 1,2,3,  	, 1, 	, 1,2,3,  	, States] 

>> PoS Tags are: 
[(' \t', 'SPACE'), ('Position', 'PROPN'), ('\t', 'SPACE'), ('followpos', 'NOUN'), (' \t', 'SPACE'), ('5', 'NUM'), ('\t', 'SPACE'), ('6', 'NUM'), (' \t', 'SPACE'), ('4', 'NUM'), ('\t', 'SPACE'), ('5', 'NUM'), (' \t', 'SPACE'), ('3', 'NUM'), ('\t', 'SPACE'), ('4', 'NUM'), (' \t', 'SPACE'), ('2', 'NUM'), ('\t', 'SPACE'), ('1,2,3', 'NUM'), (' \t', 'SPACE'), ('1', 'NUM'), ('\t', 'SPACE'), ('1,2,3', 'NUM'), (' \t', 'SPACE'), ('States', 'NOUN')] 

>> Dependency Tags are: 
[(' \t', 'compound'), ('Position', 'compound'), ('\t', 'nsubj'), ('followpos', 'dep'), (' \t', 'nmod'), ('5', 'nummod'), ('\t', 'dobj'), ('6', 'nummod'), (' \t', 'nmod'), ('4', 'nummod'), ('\t', 'nmod'), ('5', 'quantmod'), (' \t', 'compound'), ('3', 'nummod'), ('\t', 'ccomp'), ('4', 'quantmod'), (' \t', 'compound'), ('2', 'appos'), ('\t', 'nmod'), ('1,2,3', 'nummod'), (' \t', 'nmod'), ('1', 'nummod'), ('\t', 'amod'), ('1,2,3', 'compound'), (' \t', 'compound'), ('States', 'ROOT')]

>> Bigrams: 
[[ 	, Position], [Position, 	], [	, followpos], [followpos,  	], [ 	, 5], [5, 	], [	, 6], [6,  	], [ 	, 4], [4, 	], [	, 5], [5,  	], [ 	, 3], [3, 	], [	, 4], [4,  	], [ 	, 2], [2, 	], [	, 1,2,3], [1,2,3,  	], [ 	, 1], [1, 	], [	, 1,2,3], [1,2,3,  	], [ 	, States]]

>> Trigrams: 
[[ 	, Position, 	], [Position, 	, followpos], [	, followpos,  	], [followpos,  	, 5], [ 	, 5, 	], [5, 	, 6], [	, 6,  	], [6,  	, 4], [ 	, 4, 	], [4, 	, 5], [	, 5,  	], [5,  	, 3], [ 	, 3, 	], [3, 	, 4], [	, 4,  	], [4,  	, 2], [ 	, 2, 	], [2, 	, 1,2,3], [	, 1,2,3,  	], [1,2,3,  	, 1], [ 	, 1, 	], [1, 	, 1,2,3], [	, 1,2,3,  	], [1,2,3,  	, States]]

>> Noun Phrases are: 
[A  	Position 	followpos  	5	6  	4	5  	3	4  	2	1,2,3  	1	1,2,3  	States]

>> Named Entities are: 
[('5', 'CARDINAL'), ('4', 'CARDINAL'), ('3', 'CARDINAL'), ('2', 'CARDINAL'), ('1', 'CARDINAL')]


============================ Sentence 264 =============================

	a	b  	A={1,2,3}	B	A  	B={1,2,3,4}		        


>> Tokens are: 
[	, 	, b,  	, A={1,2,3, }, 	, B, 	,  	, B={1,2,3,4, }, 		       ] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('\t', 'SPACE'), ('b', 'ADP'), (' \t', 'SPACE'), ('A={1,2,3', 'NOUN'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('B', 'PROPN'), ('\t', 'SPACE'), (' \t', 'SPACE'), ('B={1,2,3,4', 'PROPN'), ('}', 'PUNCT'), ('\t\t       ', 'SPACE')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('\t', 'appos'), ('b', 'prep'), (' \t', 'nummod'), ('A={1,2,3', 'pobj'), ('}', 'punct'), ('\t', 'compound'), ('B', 'compound'), ('\t', 'appos'), (' \t', 'nmod'), ('B={1,2,3,4', 'appos'), ('}', 'punct'), ('\t\t       ', 'punct')]

>> Bigrams: 
[[	, 	], [	, b], [b,  	], [ 	, A={1,2,3], [A={1,2,3, }], [}, 	], [	, B], [B, 	], [	,  	], [ 	, B={1,2,3,4], [B={1,2,3,4, }], [}, 		       ]]

>> Trigrams: 
[[	, 	, b], [	, b,  	], [b,  	, A={1,2,3], [ 	, A={1,2,3, }], [A={1,2,3, }, 	], [}, 	, B], [	, B, 	], [B, 	,  	], [	,  	, B={1,2,3,4], [ 	, B={1,2,3,4, }], [B={1,2,3,4, }, 		       ]]

>> Noun Phrases are: 
[ 	A={1,2,3, A  	B={1,2,3,4]

>> Named Entities are: 
[]


============================ Sentence 265 =============================

Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Conversion from regular expression to DFA State B δ( (1,2,3,4),a) = followpos(1) 


>> Tokens are: 
[Prof., Dixita, B, Kagathara,   , #, 2170701, (, CD, ),   , ,   , Unit, 2, –, Lexical, Analyzer, ‹#›,  , Conversion, regular, expression, DFA, State, B, δ, (, (, 1,2,3,4),a, ), =, followpos(1, )] 

>> PoS Tags are: 
[('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('  ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'PROPN'), ('Analyzer', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE'), ('Conversion', 'PROPN'), ('regular', 'ADJ'), ('expression', 'NOUN'), ('DFA', 'PROPN'), ('State', 'PROPN'), ('B', 'PROPN'), ('δ', 'PROPN'), ('(', 'PUNCT'), ('(', 'PUNCT'), ('1,2,3,4),a', 'PROPN'), (')', 'PUNCT'), ('=', 'PUNCT'), ('followpos(1', 'PROPN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'nsubj'), ('  ', 'appos'), ('#', 'nmod'), ('2170701', 'npadvmod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'dobj'), ('Unit', 'appos'), ('2', 'nummod'), ('–', 'punct'), ('Lexical', 'compound'), ('Analyzer', 'nsubj'), ('‹#›', 'punct'), (' ', 'compound'), ('Conversion', 'appos'), ('regular', 'amod'), ('expression', 'pobj'), ('DFA', 'compound'), ('State', 'compound'), ('B', 'compound'), ('δ', 'pobj'), ('(', 'punct'), ('(', 'punct'), ('1,2,3,4),a', 'appos'), (')', 'punct'), ('=', 'punct'), ('followpos(1', 'ROOT'), (')', 'punct')]

>> Bigrams: 
[[Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,   ], [  , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 2], [2, –], [–, Lexical], [Lexical, Analyzer], [Analyzer, ‹#›], [‹#›,  ], [ , Conversion], [Conversion, regular], [regular, expression], [expression, DFA], [DFA, State], [State, B], [B, δ], [δ, (], [(, (], [(, 1,2,3,4),a], [1,2,3,4),a, )], [), =], [=, followpos(1], [followpos(1, )]]

>> Trigrams: 
[[Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,   ], [Kagathara,   , #], [  , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 2], [Unit, 2, –], [2, –, Lexical], [–, Lexical, Analyzer], [Lexical, Analyzer, ‹#›], [Analyzer, ‹#›,  ], [‹#›,  , Conversion], [ , Conversion, regular], [Conversion, regular, expression], [regular, expression, DFA], [expression, DFA, State], [DFA, State, B], [State, B, δ], [B, δ, (], [δ, (, (], [(, (, 1,2,3,4),a], [(, 1,2,3,4),a, )], [1,2,3,4),a, ), =], [), =, followpos(1], [=, followpos(1, )]]

>> Noun Phrases are: 
[Prof. Dixita B Kagathara, (CD, Unit, – Lexical Analyzer,  Conversion, regular expression, DFA State B δ, ( (1,2,3,4),a]

>> Named Entities are: 
[('Dixita', 'PERSON'), ('Kagathara', 'PERSON'), ('Conversion', 'ORG'), ('DFA State B', 'ORG')]


============================ Sentence 266 =============================

U followpos(3) 


>> Tokens are: 
[U, followpos(3, )] 

>> PoS Tags are: 
[('U', 'NOUN'), ('followpos(3', 'NOUN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('U', 'compound'), ('followpos(3', 'ROOT'), (')', 'punct')]

>> Bigrams: 
[[U, followpos(3], [followpos(3, )]]

>> Trigrams: 
[[U, followpos(3, )]]

>> Noun Phrases are: 
[U followpos(3]

>> Named Entities are: 
[]


============================ Sentence 267 =============================

		=(1,2,3) 


>> Tokens are: 
[		, =(, 1,2,3, )] 

>> PoS Tags are: 
[('\t\t', 'SPACE'), ('=(', 'NOUN'), ('1,2,3', 'NUM'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('\t\t', 'ROOT'), ('=(', 'pobj'), ('1,2,3', 'advmod'), (')', 'punct')]

>> Bigrams: 
[[		, =(], [=(, 1,2,3], [1,2,3, )]]

>> Trigrams: 
[[		, =(, 1,2,3], [=(, 1,2,3, )]]

>> Noun Phrases are: 
[=(]

>> Named Entities are: 
[]


============================ Sentence 268 =============================

U (4) = {1,2,3,4} ----- 


>> Tokens are: 
[U, (, 4, ), =, {, 1,2,3,4, }, -----] 

>> PoS Tags are: 
[('U', 'NOUN'), ('(', 'PUNCT'), ('4', 'NUM'), (')', 'PUNCT'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('1,2,3,4', 'NUM'), ('}', 'PUNCT'), ('-----', 'PUNCT')] 

>> Dependency Tags are: 
[('U', 'ROOT'), ('(', 'punct'), ('4', 'appos'), (')', 'punct'), ('=', 'punct'), ('{', 'punct'), ('1,2,3,4', 'appos'), ('}', 'punct'), ('-----', 'punct')]

>> Bigrams: 
[[U, (], [(, 4], [4, )], [), =], [=, {], [{, 1,2,3,4], [1,2,3,4, }], [}, -----]]

>> Trigrams: 
[[U, (, 4], [(, 4, )], [4, ), =], [), =, {], [=, {, 1,2,3,4], [{, 1,2,3,4, }], [1,2,3,4, }, -----]]

>> Noun Phrases are: 
[U]

>> Named Entities are: 
[('1,2,3,4', 'DATE')]


============================ Sentence 269 =============================

B  δ( (1,2,3,4),b) = followpos(2) U followpos(4)  		=(1,2,3) 


>> Tokens are: 
[B,  , δ, (, (, 1,2,3,4),b, ), =, followpos(2, ), U, followpos(4, ),  		, =(, 1,2,3, )] 

>> PoS Tags are: 
[('B', 'NOUN'), (' ', 'SPACE'), ('δ', 'PROPN'), ('(', 'PUNCT'), ('(', 'PUNCT'), ('1,2,3,4),b', 'PROPN'), (')', 'PUNCT'), ('=', 'PUNCT'), ('followpos(2', 'PROPN'), (')', 'PUNCT'), ('U', 'PROPN'), ('followpos(4', 'PROPN'), (')', 'PUNCT'), (' \t\t', 'SPACE'), ('=(', 'NOUN'), ('1,2,3', 'NUM'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('B', 'nsubj'), (' ', 'appos'), ('δ', 'punct'), ('(', 'punct'), ('(', 'punct'), ('1,2,3,4),b', 'appos'), (')', 'punct'), ('=', 'punct'), ('followpos(2', 'appos'), (')', 'punct'), ('U', 'compound'), ('followpos(4', 'appos'), (')', 'punct'), (' \t\t', 'ROOT'), ('=(', 'dative'), ('1,2,3', 'nummod'), (')', 'punct')]

>> Bigrams: 
[[B,  ], [ , δ], [δ, (], [(, (], [(, 1,2,3,4),b], [1,2,3,4),b, )], [), =], [=, followpos(2], [followpos(2, )], [), U], [U, followpos(4], [followpos(4, )], [),  		], [ 		, =(], [=(, 1,2,3], [1,2,3, )]]

>> Trigrams: 
[[B,  , δ], [ , δ, (], [δ, (, (], [(, (, 1,2,3,4),b], [(, 1,2,3,4),b, )], [1,2,3,4),b, ), =], [), =, followpos(2], [=, followpos(2, )], [followpos(2, ), U], [), U, followpos(4], [U, followpos(4, )], [followpos(4, ),  		], [),  		, =(], [ 		, =(, 1,2,3], [=(, 1,2,3, )]]

>> Noun Phrases are: 
[B, ( (1,2,3,4),b, followpos(2, U followpos(4, =(]

>> Named Entities are: 
[('=(1,2,3', 'DATE')]


============================ Sentence 270 =============================

U (5) = {1,2,3,5} ----- 


>> Tokens are: 
[U, (, 5, ), =, {, 1,2,3,5, }, -----] 

>> PoS Tags are: 
[('U', 'NOUN'), ('(', 'PUNCT'), ('5', 'NUM'), (')', 'PUNCT'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('1,2,3,5', 'NUM'), ('}', 'PUNCT'), ('-----', 'PUNCT')] 

>> Dependency Tags are: 
[('U', 'ROOT'), ('(', 'punct'), ('5', 'appos'), (')', 'punct'), ('=', 'punct'), ('{', 'punct'), ('1,2,3,5', 'appos'), ('}', 'punct'), ('-----', 'punct')]

>> Bigrams: 
[[U, (], [(, 5], [5, )], [), =], [=, {], [{, 1,2,3,5], [1,2,3,5, }], [}, -----]]

>> Trigrams: 
[[U, (, 5], [(, 5, )], [5, ), =], [), =, {], [=, {, 1,2,3,5], [{, 1,2,3,5, }], [1,2,3,5, }, -----]]

>> Noun Phrases are: 
[U]

>> Named Entities are: 
[]


============================ Sentence 271 =============================

C State C δ 


>> Tokens are: 
[C, State, C, δ] 

>> PoS Tags are: 
[('C', 'PROPN'), ('State', 'NOUN'), ('C', 'NOUN'), ('δ', 'NOUN')] 

>> Dependency Tags are: 
[('C', 'compound'), ('State', 'compound'), ('C', 'compound'), ('δ', 'ROOT')]

>> Bigrams: 
[[C, State], [State, C], [C, δ]]

>> Trigrams: 
[[C, State, C], [State, C, δ]]

>> Noun Phrases are: 
[C State C δ]

>> Named Entities are: 
[]


============================ Sentence 272 =============================

( (1,2,3,5),a) = followpos(1) 


>> Tokens are: 
[(, (, 1,2,3,5),a, ), =, followpos(1, )] 

>> PoS Tags are: 
[('(', 'PUNCT'), ('(', 'PUNCT'), ('1,2,3,5),a', 'PROPN'), (')', 'PUNCT'), ('=', 'PUNCT'), ('followpos(1', 'PROPN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('(', 'punct'), ('(', 'punct'), ('1,2,3,5),a', 'dep'), (')', 'punct'), ('=', 'punct'), ('followpos(1', 'ROOT'), (')', 'punct')]

>> Bigrams: 
[[(, (], [(, 1,2,3,5),a], [1,2,3,5),a, )], [), =], [=, followpos(1], [followpos(1, )]]

>> Trigrams: 
[[(, (, 1,2,3,5),a], [(, 1,2,3,5),a, )], [1,2,3,5),a, ), =], [), =, followpos(1], [=, followpos(1, )]]

>> Noun Phrases are: 
[( (1,2,3,5),a) = followpos(1]

>> Named Entities are: 
[('1,2,3,5),a', 'CARDINAL')]


============================ Sentence 273 =============================

U followpos(3) 


>> Tokens are: 
[U, followpos(3, )] 

>> PoS Tags are: 
[('U', 'NOUN'), ('followpos(3', 'NOUN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('U', 'compound'), ('followpos(3', 'ROOT'), (')', 'punct')]

>> Bigrams: 
[[U, followpos(3], [followpos(3, )]]

>> Trigrams: 
[[U, followpos(3, )]]

>> Noun Phrases are: 
[U followpos(3]

>> Named Entities are: 
[]


============================ Sentence 274 =============================

		=(1,2,3) 


>> Tokens are: 
[		, =(, 1,2,3, )] 

>> PoS Tags are: 
[('\t\t', 'SPACE'), ('=(', 'NOUN'), ('1,2,3', 'NUM'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('\t\t', 'ROOT'), ('=(', 'pobj'), ('1,2,3', 'advmod'), (')', 'punct')]

>> Bigrams: 
[[		, =(], [=(, 1,2,3], [1,2,3, )]]

>> Trigrams: 
[[		, =(, 1,2,3], [=(, 1,2,3, )]]

>> Noun Phrases are: 
[=(]

>> Named Entities are: 
[]


============================ Sentence 275 =============================

U (4) = {1,2,3,4} ----- 


>> Tokens are: 
[U, (, 4, ), =, {, 1,2,3,4, }, -----] 

>> PoS Tags are: 
[('U', 'NOUN'), ('(', 'PUNCT'), ('4', 'NUM'), (')', 'PUNCT'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('1,2,3,4', 'NUM'), ('}', 'PUNCT'), ('-----', 'PUNCT')] 

>> Dependency Tags are: 
[('U', 'ROOT'), ('(', 'punct'), ('4', 'appos'), (')', 'punct'), ('=', 'punct'), ('{', 'punct'), ('1,2,3,4', 'appos'), ('}', 'punct'), ('-----', 'punct')]

>> Bigrams: 
[[U, (], [(, 4], [4, )], [), =], [=, {], [{, 1,2,3,4], [1,2,3,4, }], [}, -----]]

>> Trigrams: 
[[U, (, 4], [(, 4, )], [4, ), =], [), =, {], [=, {, 1,2,3,4], [{, 1,2,3,4, }], [1,2,3,4, }, -----]]

>> Noun Phrases are: 
[U]

>> Named Entities are: 
[('1,2,3,4', 'DATE')]


============================ Sentence 276 =============================

B  δ( (1,2,3,5),b) = followpos(2) U followpos(5)  		=(1,2,3) 


>> Tokens are: 
[B,  , δ, (, (, 1,2,3,5),b, ), =, followpos(2, ), U, followpos(5, ),  		, =(, 1,2,3, )] 

>> PoS Tags are: 
[('B', 'NOUN'), (' ', 'SPACE'), ('δ', 'PROPN'), ('(', 'PUNCT'), ('(', 'PUNCT'), ('1,2,3,5),b', 'NUM'), (')', 'PUNCT'), ('=', 'PUNCT'), ('followpos(2', 'PROPN'), (')', 'PUNCT'), ('U', 'PROPN'), ('followpos(5', 'PROPN'), (')', 'PUNCT'), (' \t\t', 'SPACE'), ('=(', 'NOUN'), ('1,2,3', 'NUM'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('B', 'nsubj'), (' ', 'appos'), ('δ', 'punct'), ('(', 'punct'), ('(', 'punct'), ('1,2,3,5),b', 'appos'), (')', 'punct'), ('=', 'punct'), ('followpos(2', 'appos'), (')', 'punct'), ('U', 'appos'), ('followpos(5', 'appos'), (')', 'punct'), (' \t\t', 'ROOT'), ('=(', 'dative'), ('1,2,3', 'nummod'), (')', 'punct')]

>> Bigrams: 
[[B,  ], [ , δ], [δ, (], [(, (], [(, 1,2,3,5),b], [1,2,3,5),b, )], [), =], [=, followpos(2], [followpos(2, )], [), U], [U, followpos(5], [followpos(5, )], [),  		], [ 		, =(], [=(, 1,2,3], [1,2,3, )]]

>> Trigrams: 
[[B,  , δ], [ , δ, (], [δ, (, (], [(, (, 1,2,3,5),b], [(, 1,2,3,5),b, )], [1,2,3,5),b, ), =], [), =, followpos(2], [=, followpos(2, )], [followpos(2, ), U], [), U, followpos(5], [U, followpos(5, )], [followpos(5, ),  		], [),  		, =(], [ 		, =(, 1,2,3], [=(, 1,2,3, )]]

>> Noun Phrases are: 
[B, followpos(2, U, followpos(5, =(]

>> Named Entities are: 
[('=(1,2,3', 'DATE')]


============================ Sentence 277 =============================

U (6) = {1,2,3,6} ----- 


>> Tokens are: 
[U, (, 6, ), =, {, 1,2,3,6, }, -----] 

>> PoS Tags are: 
[('U', 'NOUN'), ('(', 'PUNCT'), ('6', 'NUM'), (')', 'PUNCT'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('1,2,3,6', 'NUM'), ('}', 'PUNCT'), ('-----', 'PUNCT')] 

>> Dependency Tags are: 
[('U', 'ROOT'), ('(', 'punct'), ('6', 'appos'), (')', 'punct'), ('=', 'punct'), ('{', 'punct'), ('1,2,3,6', 'appos'), ('}', 'punct'), ('-----', 'punct')]

>> Bigrams: 
[[U, (], [(, 6], [6, )], [), =], [=, {], [{, 1,2,3,6], [1,2,3,6, }], [}, -----]]

>> Trigrams: 
[[U, (, 6], [(, 6, )], [6, ), =], [), =, {], [=, {, 1,2,3,6], [{, 1,2,3,6, }], [1,2,3,6, }, -----]]

>> Noun Phrases are: 
[U]

>> Named Entities are: 
[('6', 'CARDINAL'), ('1,2,3,6', 'DATE')]


============================ Sentence 278 =============================

D  	Position 	followpos  	5	6  	4	5  	3	4  	2	1,2,3  	1	1,2,3  	States	a	b  	A={1,2,3}	B	A  	B={1,2,3,4}	B	C  	C={1,2,3,5}	B	D      	D={1,2,3,6 


>> Tokens are: 
[D,  	, Position, 	, followpos,  	, 5, 	, 6,  	, 4, 	, 5,  	, 3, 	, 4,  	, 2, 	, 1,2,3,  	, 1, 	, 1,2,3,  	, States, 	, 	, b,  	, A={1,2,3, }, 	, B, 	,  	, B={1,2,3,4, }, 	, B, 	, C,  	, C={1,2,3,5, }, 	, B, 	, D,      	, D={1,2,3,6] 

>> PoS Tags are: 
[('D', 'NOUN'), (' \t', 'SPACE'), ('Position', 'PROPN'), ('\t', 'SPACE'), ('followpos', 'NOUN'), (' \t', 'SPACE'), ('5', 'NUM'), ('\t', 'SPACE'), ('6', 'NUM'), (' \t', 'SPACE'), ('4', 'NUM'), ('\t', 'SPACE'), ('5', 'NUM'), (' \t', 'SPACE'), ('3', 'NUM'), ('\t', 'SPACE'), ('4', 'NUM'), (' \t', 'SPACE'), ('2', 'NUM'), ('\t', 'SPACE'), ('1,2,3', 'NUM'), (' \t', 'SPACE'), ('1', 'NUM'), ('\t', 'SPACE'), ('1,2,3', 'NUM'), (' \t', 'SPACE'), ('States', 'NOUN'), ('\t', 'SPACE'), ('\t', 'SPACE'), ('b', 'ADP'), (' \t', 'SPACE'), ('A={1,2,3', 'NOUN'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('B', 'PROPN'), ('\t', 'SPACE'), (' \t', 'SPACE'), ('B={1,2,3,4', 'ADJ'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('B', 'PROPN'), ('\t', 'SPACE'), ('C', 'PROPN'), (' \t', 'SPACE'), ('C={1,2,3,5', 'PROPN'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('B', 'PROPN'), ('\t', 'SPACE'), ('D', 'PROPN'), ('     \t', 'SPACE'), ('D={1,2,3,6', 'X')] 

>> Dependency Tags are: 
[('D', 'dep'), (' \t', 'compound'), ('Position', 'compound'), ('\t', 'nsubj'), ('followpos', 'dep'), (' \t', 'nmod'), ('5', 'nummod'), ('\t', 'dobj'), ('6', 'nummod'), (' \t', 'nmod'), ('4', 'nummod'), ('\t', 'nmod'), ('5', 'quantmod'), (' \t', 'compound'), ('3', 'nummod'), ('\t', 'ccomp'), ('4', 'quantmod'), (' \t', 'compound'), ('2', 'appos'), ('\t', 'nmod'), ('1,2,3', 'nummod'), (' \t', 'nmod'), ('1', 'nummod'), ('\t', 'amod'), ('1,2,3', 'compound'), (' \t', 'compound'), ('States', 'compound'), ('\t', 'ROOT'), ('\t', 'appos'), ('b', 'punct'), (' \t', 'nummod'), ('A={1,2,3', 'pobj'), ('}', 'punct'), ('\t', 'compound'), ('B', 'compound'), ('\t', 'appos'), (' \t', 'nmod'), ('B={1,2,3,4', 'nmod'), ('}', 'punct'), ('\t', 'compound'), ('B', 'compound'), ('\t', 'nmod'), ('C', 'nmod'), (' \t', 'compound'), ('C={1,2,3,5', 'nmod'), ('}', 'punct'), ('\t', 'compound'), ('B', 'compound'), ('\t', 'compound'), ('D', 'compound'), ('     \t', 'appos'), ('D={1,2,3,6', 'appos')]

>> Bigrams: 
[[D,  	], [ 	, Position], [Position, 	], [	, followpos], [followpos,  	], [ 	, 5], [5, 	], [	, 6], [6,  	], [ 	, 4], [4, 	], [	, 5], [5,  	], [ 	, 3], [3, 	], [	, 4], [4,  	], [ 	, 2], [2, 	], [	, 1,2,3], [1,2,3,  	], [ 	, 1], [1, 	], [	, 1,2,3], [1,2,3,  	], [ 	, States], [States, 	], [	, 	], [	, b], [b,  	], [ 	, A={1,2,3], [A={1,2,3, }], [}, 	], [	, B], [B, 	], [	,  	], [ 	, B={1,2,3,4], [B={1,2,3,4, }], [}, 	], [	, B], [B, 	], [	, C], [C,  	], [ 	, C={1,2,3,5], [C={1,2,3,5, }], [}, 	], [	, B], [B, 	], [	, D], [D,      	], [     	, D={1,2,3,6]]

>> Trigrams: 
[[D,  	, Position], [ 	, Position, 	], [Position, 	, followpos], [	, followpos,  	], [followpos,  	, 5], [ 	, 5, 	], [5, 	, 6], [	, 6,  	], [6,  	, 4], [ 	, 4, 	], [4, 	, 5], [	, 5,  	], [5,  	, 3], [ 	, 3, 	], [3, 	, 4], [	, 4,  	], [4,  	, 2], [ 	, 2, 	], [2, 	, 1,2,3], [	, 1,2,3,  	], [1,2,3,  	, 1], [ 	, 1, 	], [1, 	, 1,2,3], [	, 1,2,3,  	], [1,2,3,  	, States], [ 	, States, 	], [States, 	, 	], [	, 	, b], [	, b,  	], [b,  	, A={1,2,3], [ 	, A={1,2,3, }], [A={1,2,3, }, 	], [}, 	, B], [	, B, 	], [B, 	,  	], [	,  	, B={1,2,3,4], [ 	, B={1,2,3,4, }], [B={1,2,3,4, }, 	], [}, 	, B], [	, B, 	], [B, 	, C], [	, C,  	], [C,  	, C={1,2,3,5], [ 	, C={1,2,3,5, }], [C={1,2,3,5, }, 	], [}, 	, B], [	, B, 	], [B, 	, D], [	, D,      	], [D,      	, D={1,2,3,6]]

>> Noun Phrases are: 
[ 	A={1,2,3]

>> Named Entities are: 
[('5', 'CARDINAL'), ('4', 'CARDINAL'), ('3', 'CARDINAL'), ('2', 'CARDINAL'), ('1', 'CARDINAL')]


============================ Sentence 279 =============================

}		      


>> Tokens are: 
[}, 		     ] 

>> PoS Tags are: 
[('}', 'PUNCT'), ('\t\t     ', 'SPACE')] 

>> Dependency Tags are: 
[('}', 'punct'), ('\t\t     ', 'ROOT')]

>> Bigrams: 
[[}, 		     ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 280 =============================

Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Conversion from regular expression to DFA State D δ( (1,2,3,6),a) = followpos(1) 


>> Tokens are: 
[Prof., Dixita, B, Kagathara,   , #, 2170701, (, CD, ),   , ,   , Unit, 2, –, Lexical, Analyzer, ‹#›,  , Conversion, regular, expression, DFA, State, D, δ, (, (, 1,2,3,6),a, ), =, followpos(1, )] 

>> PoS Tags are: 
[('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('  ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'PROPN'), ('Analyzer', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE'), ('Conversion', 'PROPN'), ('regular', 'ADJ'), ('expression', 'NOUN'), ('DFA', 'PROPN'), ('State', 'NOUN'), ('D', 'NOUN'), ('δ', 'DET'), ('(', 'PUNCT'), ('(', 'PUNCT'), ('1,2,3,6),a', 'PROPN'), (')', 'PUNCT'), ('=', 'PUNCT'), ('followpos(1', 'PROPN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'nsubj'), ('  ', 'appos'), ('#', 'nmod'), ('2170701', 'npadvmod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'dobj'), ('Unit', 'appos'), ('2', 'nummod'), ('–', 'punct'), ('Lexical', 'compound'), ('Analyzer', 'nsubj'), ('‹#›', 'punct'), (' ', 'compound'), ('Conversion', 'appos'), ('regular', 'amod'), ('expression', 'pobj'), ('DFA', 'compound'), ('State', 'compound'), ('D', 'pobj'), ('δ', 'appos'), ('(', 'punct'), ('(', 'punct'), ('1,2,3,6),a', 'appos'), (')', 'punct'), ('=', 'punct'), ('followpos(1', 'ROOT'), (')', 'punct')]

>> Bigrams: 
[[Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,   ], [  , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 2], [2, –], [–, Lexical], [Lexical, Analyzer], [Analyzer, ‹#›], [‹#›,  ], [ , Conversion], [Conversion, regular], [regular, expression], [expression, DFA], [DFA, State], [State, D], [D, δ], [δ, (], [(, (], [(, 1,2,3,6),a], [1,2,3,6),a, )], [), =], [=, followpos(1], [followpos(1, )]]

>> Trigrams: 
[[Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,   ], [Kagathara,   , #], [  , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 2], [Unit, 2, –], [2, –, Lexical], [–, Lexical, Analyzer], [Lexical, Analyzer, ‹#›], [Analyzer, ‹#›,  ], [‹#›,  , Conversion], [ , Conversion, regular], [Conversion, regular, expression], [regular, expression, DFA], [expression, DFA, State], [DFA, State, D], [State, D, δ], [D, δ, (], [δ, (, (], [(, (, 1,2,3,6),a], [(, 1,2,3,6),a, )], [1,2,3,6),a, ), =], [), =, followpos(1], [=, followpos(1, )]]

>> Noun Phrases are: 
[Prof. Dixita B Kagathara, (CD, Unit, – Lexical Analyzer,  Conversion, regular expression, DFA State D, 1,2,3,6),a]

>> Named Entities are: 
[('Dixita', 'PERSON'), ('Kagathara', 'PERSON'), ('Conversion', 'ORG'), ('DFA State D', 'ORG')]


============================ Sentence 281 =============================

U followpos(3) 


>> Tokens are: 
[U, followpos(3, )] 

>> PoS Tags are: 
[('U', 'NOUN'), ('followpos(3', 'NOUN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('U', 'compound'), ('followpos(3', 'ROOT'), (')', 'punct')]

>> Bigrams: 
[[U, followpos(3], [followpos(3, )]]

>> Trigrams: 
[[U, followpos(3, )]]

>> Noun Phrases are: 
[U followpos(3]

>> Named Entities are: 
[]


============================ Sentence 282 =============================

		=(1,2,3) 


>> Tokens are: 
[		, =(, 1,2,3, )] 

>> PoS Tags are: 
[('\t\t', 'SPACE'), ('=(', 'NOUN'), ('1,2,3', 'NUM'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('\t\t', 'ROOT'), ('=(', 'pobj'), ('1,2,3', 'advmod'), (')', 'punct')]

>> Bigrams: 
[[		, =(], [=(, 1,2,3], [1,2,3, )]]

>> Trigrams: 
[[		, =(, 1,2,3], [=(, 1,2,3, )]]

>> Noun Phrases are: 
[=(]

>> Named Entities are: 
[]


============================ Sentence 283 =============================

U (4) = {1,2,3,4} ----- 


>> Tokens are: 
[U, (, 4, ), =, {, 1,2,3,4, }, -----] 

>> PoS Tags are: 
[('U', 'NOUN'), ('(', 'PUNCT'), ('4', 'NUM'), (')', 'PUNCT'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('1,2,3,4', 'NUM'), ('}', 'PUNCT'), ('-----', 'PUNCT')] 

>> Dependency Tags are: 
[('U', 'ROOT'), ('(', 'punct'), ('4', 'appos'), (')', 'punct'), ('=', 'punct'), ('{', 'punct'), ('1,2,3,4', 'appos'), ('}', 'punct'), ('-----', 'punct')]

>> Bigrams: 
[[U, (], [(, 4], [4, )], [), =], [=, {], [{, 1,2,3,4], [1,2,3,4, }], [}, -----]]

>> Trigrams: 
[[U, (, 4], [(, 4, )], [4, ), =], [), =, {], [=, {, 1,2,3,4], [{, 1,2,3,4, }], [1,2,3,4, }, -----]]

>> Noun Phrases are: 
[U]

>> Named Entities are: 
[('1,2,3,4', 'DATE')]


============================ Sentence 284 =============================

B  δ( (1,2,3,6),b) = followpos(2) 


>> Tokens are: 
[B,  , δ, (, (, 1,2,3,6),b, ), =, followpos(2, )] 

>> PoS Tags are: 
[('B', 'NOUN'), (' ', 'SPACE'), ('δ', 'PROPN'), ('(', 'PUNCT'), ('(', 'PUNCT'), ('1,2,3,6),b', 'PROPN'), (')', 'PUNCT'), ('=', 'PUNCT'), ('followpos(2', 'PROPN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('B', 'ROOT'), (' ', 'appos'), ('δ', 'punct'), ('(', 'punct'), ('(', 'punct'), ('1,2,3,6),b', 'appos'), (')', 'punct'), ('=', 'punct'), ('followpos(2', 'appos'), (')', 'punct')]

>> Bigrams: 
[[B,  ], [ , δ], [δ, (], [(, (], [(, 1,2,3,6),b], [1,2,3,6),b, )], [), =], [=, followpos(2], [followpos(2, )]]

>> Trigrams: 
[[B,  , δ], [ , δ, (], [δ, (, (], [(, (, 1,2,3,6),b], [(, 1,2,3,6),b, )], [1,2,3,6),b, ), =], [), =, followpos(2], [=, followpos(2, )]]

>> Noun Phrases are: 
[B, ( (1,2,3,6),b, followpos(2]

>> Named Entities are: 
[]


============================ Sentence 285 =============================

  		=(1,2,3)   


>> Tokens are: 
[  		, =(, 1,2,3, ),  ] 

>> PoS Tags are: 
[('  \t\t', 'SPACE'), ('=(', 'NOUN'), ('1,2,3', 'NUM'), (')', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('  \t\t', 'meta'), ('=(', 'ROOT'), ('1,2,3', 'nummod'), (')', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[  		, =(], [=(, 1,2,3], [1,2,3, )], [),  ]]

>> Trigrams: 
[[  		, =(, 1,2,3], [=(, 1,2,3, )], [1,2,3, ),  ]]

>> Noun Phrases are: 
[  		=(]

>> Named Entities are: 
[]


============================ Sentence 286 =============================

----- 


>> Tokens are: 
[-----] 

>> PoS Tags are: 
[('-----', 'PUNCT')] 

>> Dependency Tags are: 
[('-----', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 287 =============================

A  	Position 	followpos  	5	6  	4	5  	3	4  	2	1,2,3  	1	1,2,3  	States 


>> Tokens are: 
[ 	, Position, 	, followpos,  	, 5, 	, 6,  	, 4, 	, 5,  	, 3, 	, 4,  	, 2, 	, 1,2,3,  	, 1, 	, 1,2,3,  	, States] 

>> PoS Tags are: 
[(' \t', 'SPACE'), ('Position', 'PROPN'), ('\t', 'SPACE'), ('followpos', 'NOUN'), (' \t', 'SPACE'), ('5', 'NUM'), ('\t', 'SPACE'), ('6', 'NUM'), (' \t', 'SPACE'), ('4', 'NUM'), ('\t', 'SPACE'), ('5', 'NUM'), (' \t', 'SPACE'), ('3', 'NUM'), ('\t', 'SPACE'), ('4', 'NUM'), (' \t', 'SPACE'), ('2', 'NUM'), ('\t', 'SPACE'), ('1,2,3', 'NUM'), (' \t', 'SPACE'), ('1', 'NUM'), ('\t', 'SPACE'), ('1,2,3', 'NUM'), (' \t', 'SPACE'), ('States', 'NOUN')] 

>> Dependency Tags are: 
[(' \t', 'compound'), ('Position', 'compound'), ('\t', 'compound'), ('followpos', 'nmod'), (' \t', 'nmod'), ('5', 'nummod'), ('\t', 'dobj'), ('6', 'nummod'), (' \t', 'nmod'), ('4', 'nummod'), ('\t', 'nmod'), ('5', 'quantmod'), (' \t', 'compound'), ('3', 'nummod'), ('\t', 'ccomp'), ('4', 'quantmod'), (' \t', 'compound'), ('2', 'appos'), ('\t', 'nmod'), ('1,2,3', 'nummod'), (' \t', 'nmod'), ('1', 'nummod'), ('\t', 'amod'), ('1,2,3', 'compound'), (' \t', 'compound'), ('States', 'ROOT')]

>> Bigrams: 
[[ 	, Position], [Position, 	], [	, followpos], [followpos,  	], [ 	, 5], [5, 	], [	, 6], [6,  	], [ 	, 4], [4, 	], [	, 5], [5,  	], [ 	, 3], [3, 	], [	, 4], [4,  	], [ 	, 2], [2, 	], [	, 1,2,3], [1,2,3,  	], [ 	, 1], [1, 	], [	, 1,2,3], [1,2,3,  	], [ 	, States]]

>> Trigrams: 
[[ 	, Position, 	], [Position, 	, followpos], [	, followpos,  	], [followpos,  	, 5], [ 	, 5, 	], [5, 	, 6], [	, 6,  	], [6,  	, 4], [ 	, 4, 	], [4, 	, 5], [	, 5,  	], [5,  	, 3], [ 	, 3, 	], [3, 	, 4], [	, 4,  	], [4,  	, 2], [ 	, 2, 	], [2, 	, 1,2,3], [	, 1,2,3,  	], [1,2,3,  	, 1], [ 	, 1, 	], [1, 	, 1,2,3], [	, 1,2,3,  	], [1,2,3,  	, States]]

>> Noun Phrases are: 
[A  	Position 	followpos  	5	6  	4	5  	3	4  	2	1,2,3  	1	1,2,3  	States]

>> Named Entities are: 
[('5', 'CARDINAL'), ('4', 'CARDINAL'), ('3', 'CARDINAL'), ('2', 'CARDINAL'), ('1', 'CARDINAL')]


============================ Sentence 288 =============================

	a	b  	A={1,2,3}	B	A  	B={1,2,3,4}	B	C  	C={1,2,3,5}	B	D  	D={1,2,3,6}	B	A    A B C D a b b  b a a b a DFA    Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Conversion from regular expression to DFA Construct DFA for following regular expression: (c | d)*c#     Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›   


>> Tokens are: 
[	, 	, b,  	, A={1,2,3, }, 	, B, 	,  	, B={1,2,3,4, }, 	, B, 	, C,  	, C={1,2,3,5, }, 	, B, 	, D,  	, D={1,2,3,6, }, 	, B, 	,    , B, C, D, b, b,  , b, b, DFA,    , Prof., Dixita, B, Kagathara,   , #, 2170701, (, CD, ),   , ,   , Unit, 2, –, Lexical, Analyzer, ‹#›,  , Conversion, regular, expression, DFA, Construct, DFA, following, regular, expression, :, (, c, |, d)*c, #,     , Prof., Dixita, B, Kagathara,   , #, 2170701, (, CD, ),   , ,   , Unit, 2, –, Lexical, Analyzer, ‹#›,  ] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('\t', 'SPACE'), ('b', 'ADP'), (' \t', 'SPACE'), ('A={1,2,3', 'NOUN'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('B', 'PROPN'), ('\t', 'SPACE'), (' \t', 'SPACE'), ('B={1,2,3,4', 'ADJ'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('B', 'PROPN'), ('\t', 'SPACE'), ('C', 'PROPN'), (' \t', 'SPACE'), ('C={1,2,3,5', 'PROPN'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('B', 'PROPN'), ('\t', 'SPACE'), ('D', 'PROPN'), (' \t', 'SPACE'), ('D={1,2,3,6', 'PROPN'), ('}', 'PUNCT'), ('\t', 'SPACE'), ('B', 'PROPN'), ('\t', 'SPACE'), ('   ', 'SPACE'), ('B', 'NOUN'), ('C', 'NOUN'), ('D', 'PROPN'), ('b', 'NOUN'), ('b', 'X'), (' ', 'SPACE'), ('b', 'NOUN'), ('b', 'NOUN'), ('DFA', 'PROPN'), ('   ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('  ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'PROPN'), ('Analyzer', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE'), ('Conversion', 'PROPN'), ('regular', 'ADJ'), ('expression', 'NOUN'), ('DFA', 'PROPN'), ('Construct', 'NOUN'), ('DFA', 'PROPN'), ('following', 'VERB'), ('regular', 'ADJ'), ('expression', 'NOUN'), (':', 'PUNCT'), ('(', 'PUNCT'), ('c', 'X'), ('|', 'NOUN'), ('d)*c', 'NOUN'), ('#', 'SYM'), ('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('  ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'PROPN'), ('Analyzer', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('\t', 'nsubj'), ('\t', 'appos'), ('b', 'prep'), (' \t', 'nummod'), ('A={1,2,3', 'pobj'), ('}', 'punct'), ('\t', 'compound'), ('B', 'compound'), ('\t', 'appos'), (' \t', 'nmod'), ('B={1,2,3,4', 'nmod'), ('}', 'punct'), ('\t', 'compound'), ('B', 'compound'), ('\t', 'nmod'), ('C', 'nmod'), (' \t', 'nmod'), ('C={1,2,3,5', 'nmod'), ('}', 'punct'), ('\t', 'compound'), ('B', 'nmod'), ('\t', 'nmod'), ('D', 'appos'), (' \t', 'nmod'), ('D={1,2,3,6', 'nmod'), ('}', 'punct'), ('\t', 'compound'), ('B', 'compound'), ('\t', 'appos'), ('   ', 'pobj'), ('B', 'compound'), ('C', 'compound'), ('D', 'appos'), ('b', 'compound'), ('b', 'appos'), (' ', 'appos'), ('b', 'appos'), ('b', 'appos'), ('DFA', 'compound'), ('   ', 'nummod'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('  ', 'appos'), ('#', 'nmod'), ('2170701', 'appos'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('2', 'nummod'), ('–', 'punct'), ('Lexical', 'compound'), ('Analyzer', 'npadvmod'), ('‹#›', 'punct'), (' ', 'compound'), ('Conversion', 'appos'), ('regular', 'amod'), ('expression', 'pobj'), ('DFA', 'compound'), ('Construct', 'compound'), ('DFA', 'pobj'), ('following', 'pcomp'), ('regular', 'amod'), ('expression', 'dobj'), (':', 'punct'), ('(', 'punct'), ('c', 'det'), ('|', 'npadvmod'), ('d)*c', 'appos'), ('#', 'nmod'), ('    ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), ('  ', 'dep'), ('#', 'nmod'), ('2170701', 'npadvmod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'advcl'), ('  ', 'conj'), ('Unit', 'appos'), ('2', 'nummod'), ('–', 'punct'), ('Lexical', 'compound'), ('Analyzer', 'npadvmod'), ('‹#›', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[	, 	], [	, b], [b,  	], [ 	, A={1,2,3], [A={1,2,3, }], [}, 	], [	, B], [B, 	], [	,  	], [ 	, B={1,2,3,4], [B={1,2,3,4, }], [}, 	], [	, B], [B, 	], [	, C], [C,  	], [ 	, C={1,2,3,5], [C={1,2,3,5, }], [}, 	], [	, B], [B, 	], [	, D], [D,  	], [ 	, D={1,2,3,6], [D={1,2,3,6, }], [}, 	], [	, B], [B, 	], [	,    ], [   , B], [B, C], [C, D], [D, b], [b, b], [b,  ], [ , b], [b, b], [b, DFA], [DFA,    ], [   , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,   ], [  , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 2], [2, –], [–, Lexical], [Lexical, Analyzer], [Analyzer, ‹#›], [‹#›,  ], [ , Conversion], [Conversion, regular], [regular, expression], [expression, DFA], [DFA, Construct], [Construct, DFA], [DFA, following], [following, regular], [regular, expression], [expression, :], [:, (], [(, c], [c, |], [|, d)*c], [d)*c, #], [#,     ], [    , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,   ], [  , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 2], [2, –], [–, Lexical], [Lexical, Analyzer], [Analyzer, ‹#›], [‹#›,  ]]

>> Trigrams: 
[[	, 	, b], [	, b,  	], [b,  	, A={1,2,3], [ 	, A={1,2,3, }], [A={1,2,3, }, 	], [}, 	, B], [	, B, 	], [B, 	,  	], [	,  	, B={1,2,3,4], [ 	, B={1,2,3,4, }], [B={1,2,3,4, }, 	], [}, 	, B], [	, B, 	], [B, 	, C], [	, C,  	], [C,  	, C={1,2,3,5], [ 	, C={1,2,3,5, }], [C={1,2,3,5, }, 	], [}, 	, B], [	, B, 	], [B, 	, D], [	, D,  	], [D,  	, D={1,2,3,6], [ 	, D={1,2,3,6, }], [D={1,2,3,6, }, 	], [}, 	, B], [	, B, 	], [B, 	,    ], [	,    , B], [   , B, C], [B, C, D], [C, D, b], [D, b, b], [b, b,  ], [b,  , b], [ , b, b], [b, b, DFA], [b, DFA,    ], [DFA,    , Prof.], [   , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,   ], [Kagathara,   , #], [  , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 2], [Unit, 2, –], [2, –, Lexical], [–, Lexical, Analyzer], [Lexical, Analyzer, ‹#›], [Analyzer, ‹#›,  ], [‹#›,  , Conversion], [ , Conversion, regular], [Conversion, regular, expression], [regular, expression, DFA], [expression, DFA, Construct], [DFA, Construct, DFA], [Construct, DFA, following], [DFA, following, regular], [following, regular, expression], [regular, expression, :], [expression, :, (], [:, (, c], [(, c, |], [c, |, d)*c], [|, d)*c, #], [d)*c, #,     ], [#,     , Prof.], [    , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,   ], [Kagathara,   , #], [  , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 2], [Unit, 2, –], [2, –, Lexical], [–, Lexical, Analyzer], [Lexical, Analyzer, ‹#›], [Analyzer, ‹#›,  ]]

>> Noun Phrases are: 
[ 	A={1,2,3, A  	B={1,2,3,4}	B	C  	C={1,2,3,5}	B	D, A    A B C D, b, a a b, a DFA    Prof. Dixita B Kagathara, (CD, Unit,  Conversion, regular expression, DFA Construct DFA, regular expression, c | d)*c, #     Prof. Dixita B Kagathara, (CD, Unit]

>> Named Entities are: 
[('DFA', 'ORG'), ('Dixita', 'PERSON'), ('Kagathara', 'PERSON'), ('Conversion', 'ORG'), ('Dixita', 'PERSON'), ('Kagathara', 'PERSON')]


============================ Sentence 289 =============================

Thank You                                      /docProps/thumbnail.jpeg 


>> Tokens are: 
[Thank,                                      , /docProps, /, thumbnail.jpeg] 

>> PoS Tags are: 
[('Thank', 'VERB'), ('                                     ', 'SPACE'), ('/docProps', 'PUNCT'), ('/', 'SYM'), ('thumbnail.jpeg', 'NOUN')] 

>> Dependency Tags are: 
[('Thank', 'ROOT'), ('                                     ', 'npadvmod'), ('/docProps', 'punct'), ('/', 'punct'), ('thumbnail.jpeg', 'punct')]

>> Bigrams: 
[[Thank,                                      ], [                                     , /docProps], [/docProps, /], [/, thumbnail.jpeg]]

>> Trigrams: 
[[Thank,                                      , /docProps], [                                     , /docProps, /], [/docProps, /, thumbnail.jpeg]]

>> Noun Phrases are: 
[You]

>> Named Entities are: 
[]
