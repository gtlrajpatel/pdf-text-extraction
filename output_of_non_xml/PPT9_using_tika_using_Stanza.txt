

========================== Sentence 1 ===========================

 Power 

Tokens are: 
>> ['Power'] 

 UPOS tags are: 
>> [('Power', 'NOUN')] 

 XPOS tags are: 
>> [('Power', 'NN')] 

 Lemmas are: 
>> [('Power', 'power')] 

 Dependency tags are: 
>> [(('Power', 'root'), 'root')]

 Named Entities are: 
>> []

========================== Sentence 2 ===========================

 Point Presentation  Unit – 2 Lexical Analyzer dixita.kagathara@darshan.ac.in +91 - 97277 47317 (CE Department) Computer Engineering Department Prof. Dixita B. Kagathara Compiler Design (CD) GTU # 2170701   Darshan Institute of Engineering & Technology, Rajkot     Looping Topics to be covered  Interaction of scanner & parser Token, Pattern & Lexemes Input buffering Specification of tokens Regular expression & Regular definition Transition diagram Hard coding & automatic generation lexical analyzers Finite automata Regular expression to NFA using Thompson's rule Conversion from NFA to DFA using subset construction method DFA optimization Conversion from regular expression to DFA            Interaction with Scanner & Parser        Interaction of scanner & parser Upon receiving a “Get next token” command from parser, the lexical analyzer reads the input character until it can identify the next token. 

Tokens are: 
>> ['Point', 'Presentation', 'Unit', '–', '2', 'Lexical', 'Analyzer', 'dixita.kagathara@darshan.ac.in', '+91', '-', '97277', '47317', '(', 'CE', 'Department', ')', 'Computer', 'Engineering', 'Department', 'Prof.', 'Dixita', 'B.', 'Kagathara', 'Compiler', 'Design', '(', 'CD', ')', 'GTU', '#', '2170701', 'Darshan', 'Institute', 'of', 'Engineering', '&', 'Technology', ',', 'Rajkot', '\uf050', 'Looping', 'Topics', 'to', 'be', 'covered', 'Interaction', 'of', 'scanner', '&', 'parser', 'Token', ',', 'Pattern', '&', 'Lexemes', 'Input', 'buffering', 'Specification', 'of', 'tokens', 'Regular', 'expression', '&', 'Regular', 'definition', 'Transition', 'diagram', 'Hard', 'coding', '&', 'automatic', 'generation', 'lexical', 'analyzers', 'Finite', 'automata', 'Regular', 'expression', 'to', 'NFA', 'using', 'Thompson', "'s", 'rule', 'Conversion', 'from', 'NFA', 'to', 'DFA', 'using', 'subset', 'construction', 'method', 'DFA', 'optimization', 'Conversion', 'from', 'regular', 'expression', 'to', 'DFA', 'Interaction', 'with', 'Scanner', '&', 'Parser', 'Interaction', 'of', 'scanner', '&', 'parser', 'Upon', 'receiving', 'a', '“', 'Get', 'next', 'token', '”', 'command', 'from', 'parser', ',', 'the', 'lexical', 'analyzer', 'reads', 'the', 'input', 'character', 'until', 'it', 'can', 'identify', 'the', 'next', 'token', '.'] 

 UPOS tags are: 
>> [('Point', 'NOUN'), ('Presentation', 'NOUN'), ('Unit', 'NOUN'), ('–', 'PUNCT'), ('2', 'NUM'), ('Lexical', 'ADJ'), ('Analyzer', 'NOUN'), ('dixita.kagathara@darshan.ac.in', 'X'), ('+91', 'NUM'), ('-', 'SYM'), ('97277', 'NUM'), ('47317', 'NUM'), ('(', 'PUNCT'), ('CE', 'PROPN'), ('Department', 'PROPN'), (')', 'PUNCT'), ('Computer', 'PROPN'), ('Engineering', 'PROPN'), ('Department', 'PROPN'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B.', 'PROPN'), ('Kagathara', 'PROPN'), ('Compiler', 'PROPN'), ('Design', 'PROPN'), ('(', 'PUNCT'), ('CD', 'PROPN'), (')', 'PUNCT'), ('GTU', 'NOUN'), ('#', 'SYM'), ('2170701', 'NUM'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('of', 'ADP'), ('Engineering', 'NOUN'), ('&', 'CCONJ'), ('Technology', 'NOUN'), (',', 'PUNCT'), ('Rajkot', 'PROPN'), ('\uf050', 'PUNCT'), ('Looping', 'NOUN'), ('Topics', 'PROPN'), ('to', 'PART'), ('be', 'AUX'), ('covered', 'VERB'), ('Interaction', 'NOUN'), ('of', 'ADP'), ('scanner', 'NOUN'), ('&', 'CCONJ'), ('parser', 'NOUN'), ('Token', 'NOUN'), (',', 'PUNCT'), ('Pattern', 'NOUN'), ('&', 'CCONJ'), ('Lexemes', 'PROPN'), ('Input', 'NOUN'), ('buffering', 'NOUN'), ('Specification', 'NOUN'), ('of', 'ADP'), ('tokens', 'NOUN'), ('Regular', 'ADJ'), ('expression', 'NOUN'), ('&', 'CCONJ'), ('Regular', 'ADJ'), ('definition', 'NOUN'), ('Transition', 'NOUN'), ('diagram', 'NOUN'), ('Hard', 'ADJ'), ('coding', 'NOUN'), ('&', 'CCONJ'), ('automatic', 'ADJ'), ('generation', 'NOUN'), ('lexical', 'ADJ'), ('analyzers', 'NOUN'), ('Finite', 'ADJ'), ('automata', 'ADJ'), ('Regular', 'ADJ'), ('expression', 'NOUN'), ('to', 'ADP'), ('NFA', 'PROPN'), ('using', 'VERB'), ('Thompson', 'PROPN'), ("'s", 'PART'), ('rule', 'NOUN'), ('Conversion', 'NOUN'), ('from', 'ADP'), ('NFA', 'PROPN'), ('to', 'ADP'), ('DFA', 'PROPN'), ('using', 'VERB'), ('subset', 'NOUN'), ('construction', 'NOUN'), ('method', 'NOUN'), ('DFA', 'NOUN'), ('optimization', 'NOUN'), ('Conversion', 'NOUN'), ('from', 'ADP'), ('regular', 'ADJ'), ('expression', 'NOUN'), ('to', 'ADP'), ('DFA', 'NOUN'), ('Interaction', 'NOUN'), ('with', 'ADP'), ('Scanner', 'NOUN'), ('&', 'CCONJ'), ('Parser', 'NOUN'), ('Interaction', 'NOUN'), ('of', 'ADP'), ('scanner', 'NOUN'), ('&', 'CCONJ'), ('parser', 'NOUN'), ('Upon', 'SCONJ'), ('receiving', 'VERB'), ('a', 'DET'), ('“', 'PUNCT'), ('Get', 'VERB'), ('next', 'ADJ'), ('token', 'NOUN'), ('”', 'PUNCT'), ('command', 'NOUN'), ('from', 'ADP'), ('parser', 'NOUN'), (',', 'PUNCT'), ('the', 'DET'), ('lexical', 'ADJ'), ('analyzer', 'NOUN'), ('reads', 'VERB'), ('the', 'DET'), ('input', 'NOUN'), ('character', 'NOUN'), ('until', 'SCONJ'), ('it', 'PRON'), ('can', 'AUX'), ('identify', 'VERB'), ('the', 'DET'), ('next', 'ADJ'), ('token', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Point', 'NN'), ('Presentation', 'NN'), ('Unit', 'NN'), ('–', ','), ('2', 'CD'), ('Lexical', 'JJ'), ('Analyzer', 'NN'), ('dixita.kagathara@darshan.ac.in', 'ADD'), ('+91', 'CD'), ('-', 'SYM'), ('97277', 'CD'), ('47317', 'CD'), ('(', '-LRB-'), ('CE', 'NNP'), ('Department', 'NNP'), (')', '-RRB-'), ('Computer', 'NNP'), ('Engineering', 'NNP'), ('Department', 'NNP'), ('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B.', 'NNP'), ('Kagathara', 'NNP'), ('Compiler', 'NNP'), ('Design', 'NNP'), ('(', '-LRB-'), ('CD', 'NNP'), (')', '-RRB-'), ('GTU', 'NN'), ('#', 'NN'), ('2170701', 'CD'), ('Darshan', 'NNP'), ('Institute', 'NNP'), ('of', 'IN'), ('Engineering', 'NN'), ('&', 'CC'), ('Technology', 'NN'), (',', ','), ('Rajkot', 'NNP'), ('\uf050', ','), ('Looping', 'NN'), ('Topics', 'NNPS'), ('to', 'TO'), ('be', 'VB'), ('covered', 'VBN'), ('Interaction', 'NN'), ('of', 'IN'), ('scanner', 'NN'), ('&', 'CC'), ('parser', 'NN'), ('Token', 'NN'), (',', ','), ('Pattern', 'NN'), ('&', 'CC'), ('Lexemes', 'NNP'), ('Input', 'NN'), ('buffering', 'NN'), ('Specification', 'NN'), ('of', 'IN'), ('tokens', 'NNS'), ('Regular', 'JJ'), ('expression', 'NN'), ('&', 'CC'), ('Regular', 'JJ'), ('definition', 'NN'), ('Transition', 'NN'), ('diagram', 'NN'), ('Hard', 'JJ'), ('coding', 'NN'), ('&', 'CC'), ('automatic', 'JJ'), ('generation', 'NN'), ('lexical', 'JJ'), ('analyzers', 'NNS'), ('Finite', 'JJ'), ('automata', 'JJ'), ('Regular', 'JJ'), ('expression', 'NN'), ('to', 'IN'), ('NFA', 'NNP'), ('using', 'VBG'), ('Thompson', 'NNP'), ("'s", 'POS'), ('rule', 'NN'), ('Conversion', 'NN'), ('from', 'IN'), ('NFA', 'NNP'), ('to', 'IN'), ('DFA', 'NNP'), ('using', 'VBG'), ('subset', 'NN'), ('construction', 'NN'), ('method', 'NN'), ('DFA', 'NN'), ('optimization', 'NN'), ('Conversion', 'NN'), ('from', 'IN'), ('regular', 'JJ'), ('expression', 'NN'), ('to', 'IN'), ('DFA', 'NN'), ('Interaction', 'NN'), ('with', 'IN'), ('Scanner', 'NN'), ('&', 'CC'), ('Parser', 'NN'), ('Interaction', 'NN'), ('of', 'IN'), ('scanner', 'NN'), ('&', 'CC'), ('parser', 'NN'), ('Upon', 'IN'), ('receiving', 'VBG'), ('a', 'DT'), ('“', '``'), ('Get', 'VB'), ('next', 'JJ'), ('token', 'NN'), ('”', "''"), ('command', 'NN'), ('from', 'IN'), ('parser', 'NN'), (',', ','), ('the', 'DT'), ('lexical', 'JJ'), ('analyzer', 'NN'), ('reads', 'VBZ'), ('the', 'DT'), ('input', 'NN'), ('character', 'NN'), ('until', 'IN'), ('it', 'PRP'), ('can', 'MD'), ('identify', 'VB'), ('the', 'DT'), ('next', 'JJ'), ('token', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('Point', 'point'), ('Presentation', 'presentation'), ('Unit', 'unit'), ('–', '-'), ('2', '2'), ('Lexical', 'lexical'), ('Analyzer', 'analyzer'), ('dixita.kagathara@darshan.ac.in', 'dixita.kagathara@darshan.ac.in'), ('+91', '+91'), ('-', '-'), ('97277', '97277'), ('47317', '47317'), ('(', '('), ('CE', 'CE'), ('Department', 'Department'), (')', ')'), ('Computer', 'Computer'), ('Engineering', 'Engineering'), ('Department', 'Department'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B.', 'B.'), ('Kagathara', 'Kagathara'), ('Compiler', 'Compiler'), ('Design', 'Design'), ('(', '('), ('CD', 'CD'), (')', ')'), ('GTU', 'gtu'), ('#', '#'), ('2170701', '2170701'), ('Darshan', 'Darshan'), ('Institute', 'Institute'), ('of', 'of'), ('Engineering', 'Engineering'), ('&', '&'), ('Technology', 'technology'), (',', ','), ('Rajkot', 'Rajkot'), ('\uf050', "''"), ('Looping', 'looping'), ('Topics', 'topic'), ('to', 'to'), ('be', 'be'), ('covered', 'cover'), ('Interaction', 'interaction'), ('of', 'of'), ('scanner', 'scanner'), ('&', '&'), ('parser', 'parser'), ('Token', 'token'), (',', ','), ('Pattern', 'pattern'), ('&', '&'), ('Lexemes', 'Lexemes'), ('Input', 'input'), ('buffering', 'buffering'), ('Specification', 'specification'), ('of', 'of'), ('tokens', 'token'), ('Regular', 'regular'), ('expression', 'expression'), ('&', '&'), ('Regular', 'regular'), ('definition', 'definition'), ('Transition', 'Transition'), ('diagram', 'diagram'), ('Hard', 'hard'), ('coding', 'coding'), ('&', '&'), ('automatic', 'automatic'), ('generation', 'generation'), ('lexical', 'lexical'), ('analyzers', 'analyzer'), ('Finite', 'Finite'), ('automata', 'automata'), ('Regular', 'regular'), ('expression', 'expression'), ('to', 'to'), ('NFA', 'NFA'), ('using', 'use'), ('Thompson', 'Thompson'), ("'s", "'s"), ('rule', 'rule'), ('Conversion', 'conversion'), ('from', 'from'), ('NFA', 'NFA'), ('to', 'to'), ('DFA', 'DFA'), ('using', 'use'), ('subset', 'subset'), ('construction', 'construction'), ('method', 'method'), ('DFA', 'dfa'), ('optimization', 'optimization'), ('Conversion', 'conversion'), ('from', 'from'), ('regular', 'regular'), ('expression', 'expression'), ('to', 'to'), ('DFA', 'dfa'), ('Interaction', 'interaction'), ('with', 'with'), ('Scanner', 'scanner'), ('&', '&'), ('Parser', 'parser'), ('Interaction', 'interaction'), ('of', 'of'), ('scanner', 'scanner'), ('&', '&'), ('parser', 'parser'), ('Upon', 'upon'), ('receiving', 'receive'), ('a', 'a'), ('“', "''"), ('Get', 'get'), ('next', 'next'), ('token', 'token'), ('”', "''"), ('command', 'command'), ('from', 'from'), ('parser', 'parser'), (',', ','), ('the', 'the'), ('lexical', 'lexical'), ('analyzer', 'analyzer'), ('reads', 'read'), ('the', 'the'), ('input', 'input'), ('character', 'character'), ('until', 'until'), ('it', 'it'), ('can', 'can'), ('identify', 'identify'), ('the', 'the'), ('next', 'next'), ('token', 'token'), ('.', '.')] 

 Dependency tags are: 
>> [(('Point', 'Presentation'), 'compound'), (('Presentation', 'Unit'), 'compound'), (('Unit', 'root'), 'root'), (('–', 'Unit'), 'punct'), (('2', 'Analyzer'), 'nummod'), (('Lexical', 'Analyzer'), 'amod'), (('Analyzer', 'Unit'), 'conj'), (('dixita.kagathara@darshan.ac.in', 'Analyzer'), 'appos'), (('+91', '47317'), 'compound'), (('-', '97277'), 'case'), (('97277', '+91'), 'nmod'), (('47317', 'Department'), 'dep'), (('(', 'Department'), 'punct'), (('CE', 'Department'), 'compound'), (('Department', 'Analyzer'), 'appos'), ((')', 'Department'), 'punct'), (('Computer', 'Department'), 'compound'), (('Engineering', 'Department'), 'compound'), (('Department', 'Unit'), 'conj'), (('Prof.', 'Unit'), 'conj'), (('Dixita', 'Prof.'), 'compound'), (('B.', 'Design'), 'compound'), (('Kagathara', 'Design'), 'compound'), (('Compiler', 'Design'), 'compound'), (('Design', 'Prof.'), 'conj'), (('(', 'CD'), 'punct'), (('CD', 'Design'), 'appos'), ((')', 'CD'), 'punct'), (('GTU', 'Institute'), 'compound'), (('#', 'Institute'), 'compound'), (('2170701', '#'), 'nummod'), (('Darshan', 'Institute'), 'compound'), (('Institute', 'Unit'), 'conj'), (('of', 'Engineering'), 'case'), (('Engineering', 'Institute'), 'nmod'), (('&', 'Technology'), 'cc'), (('Technology', 'Engineering'), 'conj'), ((',', 'Rajkot'), 'punct'), (('Rajkot', 'Engineering'), 'conj'), (('\uf050', 'Rajkot'), 'punct'), (('Looping', 'Topics'), 'compound'), (('Topics', 'Institute'), 'conj'), (('to', 'covered'), 'mark'), (('be', 'covered'), 'aux:pass'), (('covered', 'Topics'), 'acl'), (('Interaction', 'covered'), 'obj'), (('of', 'Token'), 'case'), (('scanner', 'Token'), 'compound'), (('&', 'parser'), 'cc'), (('parser', 'scanner'), 'conj'), (('Token', 'Interaction'), 'nmod'), ((',', 'Specification'), 'punct'), (('Pattern', 'Specification'), 'compound'), (('&', 'Lexemes'), 'cc'), (('Lexemes', 'Pattern'), 'conj'), (('Input', 'Specification'), 'compound'), (('buffering', 'Specification'), 'compound'), (('Specification', 'Token'), 'conj'), (('of', 'tokens'), 'case'), (('tokens', 'Specification'), 'nmod'), (('Regular', 'expression'), 'amod'), (('expression', 'tokens'), 'conj'), (('&', 'diagram'), 'cc'), (('Regular', 'diagram'), 'amod'), (('definition', 'Transition'), 'compound'), (('Transition', 'diagram'), 'compound'), (('diagram', 'tokens'), 'conj'), (('Hard', 'analyzers'), 'amod'), (('coding', 'analyzers'), 'compound'), (('&', 'analyzers'), 'cc'), (('automatic', 'generation'), 'amod'), (('generation', 'analyzers'), 'compound'), (('lexical', 'analyzers'), 'amod'), (('analyzers', 'expression'), 'compound'), (('Finite', 'expression'), 'amod'), (('automata', 'expression'), 'amod'), (('Regular', 'expression'), 'amod'), (('expression', 'Unit'), 'conj'), (('to', 'NFA'), 'case'), (('NFA', 'expression'), 'nmod'), (('using', 'expression'), 'acl'), (('Thompson', 'Conversion'), 'nmod:poss'), (("'s", 'Thompson'), 'case'), (('rule', 'Conversion'), 'compound'), (('Conversion', 'using'), 'obj'), (('from', 'NFA'), 'case'), (('NFA', 'Conversion'), 'nmod'), (('to', 'DFA'), 'case'), (('DFA', 'Conversion'), 'nmod'), (('using', 'using'), 'advcl'), (('subset', 'method'), 'compound'), (('construction', 'method'), 'compound'), (('method', 'using'), 'obj'), (('DFA', 'Conversion'), 'compound'), (('optimization', 'Conversion'), 'compound'), (('Conversion', 'using'), 'obj'), (('from', 'expression'), 'case'), (('regular', 'expression'), 'amod'), (('expression', 'Conversion'), 'nmod'), (('to', 'Interaction'), 'case'), (('DFA', 'Interaction'), 'compound'), (('Interaction', 'expression'), 'nmod'), (('with', 'Interaction'), 'case'), (('Scanner', 'Interaction'), 'compound'), (('&', 'Parser'), 'cc'), (('Parser', 'Scanner'), 'conj'), (('Interaction', 'Interaction'), 'nmod'), (('of', 'scanner'), 'case'), (('scanner', 'Interaction'), 'nmod'), (('&', 'parser'), 'cc'), (('parser', 'scanner'), 'conj'), (('Upon', 'receiving'), 'mark'), (('receiving', 'Interaction'), 'acl'), (('a', 'command'), 'det'), (('“', 'Get'), 'punct'), (('Get', 'command'), 'compound'), (('next', 'token'), 'amod'), (('token', 'Get'), 'obj'), (('”', 'Get'), 'punct'), (('command', 'receiving'), 'obj'), (('from', 'parser'), 'case'), (('parser', 'command'), 'nmod'), ((',', 'reads'), 'punct'), (('the', 'analyzer'), 'det'), (('lexical', 'analyzer'), 'amod'), (('analyzer', 'reads'), 'nsubj'), (('reads', 'Get'), 'parataxis'), (('the', 'character'), 'det'), (('input', 'character'), 'compound'), (('character', 'reads'), 'obj'), (('until', 'identify'), 'mark'), (('it', 'identify'), 'nsubj'), (('can', 'identify'), 'aux'), (('identify', 'reads'), 'advcl'), (('the', 'token'), 'det'), (('next', 'token'), 'amod'), (('token', 'identify'), 'obj'), (('.', 'reads'), 'punct')]

 Named Entities are: 
>> [('2', 'CARDINAL'), ('Dixita B. Kagathara Compiler Design', 'ORG'), ('2170701', 'CARDINAL'), ('Darshan Institute of Engineering & Technology', 'ORG'), ('Rajkot', 'GPE'), ('NFA', 'ORG'), ('Thompson', 'ORG'), ('NFA', 'ORG')]

========================== Sentence 3 ===========================

 Lexical analyzer also stripping out comments and white space in the form of blanks, tabs, and newline characters from the source program. 

Tokens are: 
>> ['Lexical', 'analyzer', 'also', 'stripping', 'out', 'comments', 'and', 'white', 'space', 'in', 'the', 'form', 'of', 'blanks', ',', 'tabs', ',', 'and', 'newline', 'characters', 'from', 'the', 'source', 'program', '.'] 

 UPOS tags are: 
>> [('Lexical', 'ADJ'), ('analyzer', 'NOUN'), ('also', 'ADV'), ('stripping', 'VERB'), ('out', 'ADP'), ('comments', 'NOUN'), ('and', 'CCONJ'), ('white', 'ADJ'), ('space', 'NOUN'), ('in', 'ADP'), ('the', 'DET'), ('form', 'NOUN'), ('of', 'ADP'), ('blanks', 'NOUN'), (',', 'PUNCT'), ('tabs', 'NOUN'), (',', 'PUNCT'), ('and', 'CCONJ'), ('newline', 'NOUN'), ('characters', 'NOUN'), ('from', 'ADP'), ('the', 'DET'), ('source', 'NOUN'), ('program', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Lexical', 'JJ'), ('analyzer', 'NN'), ('also', 'RB'), ('stripping', 'VBG'), ('out', 'RP'), ('comments', 'NNS'), ('and', 'CC'), ('white', 'JJ'), ('space', 'NN'), ('in', 'IN'), ('the', 'DT'), ('form', 'NN'), ('of', 'IN'), ('blanks', 'NNS'), (',', ','), ('tabs', 'NNS'), (',', ','), ('and', 'CC'), ('newline', 'NN'), ('characters', 'NNS'), ('from', 'IN'), ('the', 'DT'), ('source', 'NN'), ('program', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('Lexical', 'lexical'), ('analyzer', 'analyzer'), ('also', 'also'), ('stripping', 'strip'), ('out', 'out'), ('comments', 'comment'), ('and', 'and'), ('white', 'white'), ('space', 'space'), ('in', 'in'), ('the', 'the'), ('form', 'form'), ('of', 'of'), ('blanks', 'blank'), (',', ','), ('tabs', 'tabs'), (',', ','), ('and', 'and'), ('newline', 'newline'), ('characters', 'character'), ('from', 'from'), ('the', 'the'), ('source', 'source'), ('program', 'program'), ('.', '.')] 

 Dependency tags are: 
>> [(('Lexical', 'analyzer'), 'amod'), (('analyzer', 'stripping'), 'nsubj'), (('also', 'stripping'), 'advmod'), (('stripping', 'root'), 'root'), (('out', 'stripping'), 'compound:prt'), (('comments', 'stripping'), 'obj'), (('and', 'space'), 'cc'), (('white', 'space'), 'amod'), (('space', 'comments'), 'conj'), (('in', 'form'), 'case'), (('the', 'form'), 'det'), (('form', 'stripping'), 'obl'), (('of', 'blanks'), 'case'), (('blanks', 'form'), 'nmod'), ((',', 'tabs'), 'punct'), (('tabs', 'blanks'), 'conj'), ((',', 'characters'), 'punct'), (('and', 'characters'), 'cc'), (('newline', 'characters'), 'compound'), (('characters', 'blanks'), 'conj'), (('from', 'program'), 'case'), (('the', 'program'), 'det'), (('source', 'program'), 'compound'), (('program', 'characters'), 'nmod'), (('.', 'stripping'), 'punct')]

 Named Entities are: 
>> [('Lexical', 'ORG')]

========================== Sentence 4 ===========================

 Lexical Analyzer Symbol Table Parser Token 

Tokens are: 
>> ['Lexical', 'Analyzer', 'Symbol', 'Table', 'Parser', 'Token'] 

 UPOS tags are: 
>> [('Lexical', 'ADJ'), ('Analyzer', 'NOUN'), ('Symbol', 'NOUN'), ('Table', 'NOUN'), ('Parser', 'NOUN'), ('Token', 'NOUN')] 

 XPOS tags are: 
>> [('Lexical', 'JJ'), ('Analyzer', 'NN'), ('Symbol', 'NN'), ('Table', 'NN'), ('Parser', 'NN'), ('Token', 'NN')] 

 Lemmas are: 
>> [('Lexical', 'lexical'), ('Analyzer', 'analyzer'), ('Symbol', 'symbol'), ('Table', 'table'), ('Parser', 'parser'), ('Token', 'token')] 

 Dependency tags are: 
>> [(('Lexical', 'Analyzer'), 'amod'), (('Analyzer', 'Table'), 'compound'), (('Symbol', 'Table'), 'compound'), (('Table', 'Token'), 'compound'), (('Parser', 'Token'), 'compound'), (('Token', 'root'), 'root')]

 Named Entities are: 
>> []

========================== Sentence 5 ===========================

 Get next token Source Program    Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#› 

Tokens are: 
>> ['Get', 'next', 'token', 'Source', 'Program', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '2', '–', 'Lexical', 'Analyzer', '‹#›'] 

 UPOS tags are: 
>> [('Get', 'VERB'), ('next', 'ADJ'), ('token', 'NOUN'), ('Source', 'NOUN'), ('Program', 'NOUN'), ('Prof.', 'NOUN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'ADJ'), ('Analyzer', 'NOUN'), ('‹#›', 'NOUN')] 

 XPOS tags are: 
>> [('Get', 'VB'), ('next', 'JJ'), ('token', 'NN'), ('Source', 'NN'), ('Program', 'NN'), ('Prof.', 'NN'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('2', 'CD'), ('–', ':'), ('Lexical', 'JJ'), ('Analyzer', 'NN'), ('‹#›', 'NN')] 

 Lemmas are: 
>> [('Get', 'get'), ('next', 'next'), ('token', 'token'), ('Source', 'source'), ('Program', 'program'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('2', '2'), ('–', '-'), ('Lexical', 'lexical'), ('Analyzer', 'analyzer'), ('‹#›', '‹#›')] 

 Dependency tags are: 
>> [(('Get', 'root'), 'root'), (('next', 'Program'), 'amod'), (('token', 'Source'), 'compound'), (('Source', 'Program'), 'compound'), (('Program', 'Get'), 'obj'), (('Prof.', 'Program'), 'compound'), (('Dixita', 'Kagathara'), 'compound'), (('B', 'Kagathara'), 'compound'), (('Kagathara', '#'), 'compound'), (('#', 'Get'), 'parataxis'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', '#'), 'appos'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', 'Get'), 'parataxis'), (('2', 'Unit'), 'nummod'), (('–', 'Get'), 'punct'), (('Lexical', 'Analyzer'), 'amod'), (('Analyzer', '‹#›'), 'compound'), (('‹#›', 'Get'), 'parataxis')]

 Named Entities are: 
>> [('2170701', 'CARDINAL'), ('2', 'CARDINAL')]

========================== Sentence 6 ===========================

 Why to separate lexical analysis & parsing? 

Tokens are: 
>> ['Why', 'to', 'separate', 'lexical', 'analysis', '&', 'parsing', '?'] 

 UPOS tags are: 
>> [('Why', 'ADV'), ('to', 'PART'), ('separate', 'VERB'), ('lexical', 'ADJ'), ('analysis', 'NOUN'), ('&', 'CCONJ'), ('parsing', 'NOUN'), ('?', 'PUNCT')] 

 XPOS tags are: 
>> [('Why', 'WRB'), ('to', 'TO'), ('separate', 'VB'), ('lexical', 'JJ'), ('analysis', 'NN'), ('&', 'CC'), ('parsing', 'NN'), ('?', '.')] 

 Lemmas are: 
>> [('Why', 'why'), ('to', 'to'), ('separate', 'separate'), ('lexical', 'lexical'), ('analysis', 'analysis'), ('&', '&'), ('parsing', 'parsing'), ('?', '?')] 

 Dependency tags are: 
>> [(('Why', 'separate'), 'advmod'), (('to', 'separate'), 'mark'), (('separate', 'root'), 'root'), (('lexical', 'analysis'), 'amod'), (('analysis', 'separate'), 'obj'), (('&', 'parsing'), 'cc'), (('parsing', 'analysis'), 'conj'), (('?', 'separate'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 7 ===========================

 Simplicity in design. 

Tokens are: 
>> ['Simplicity', 'in', 'design', '.'] 

 UPOS tags are: 
>> [('Simplicity', 'NOUN'), ('in', 'ADP'), ('design', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Simplicity', 'NN'), ('in', 'IN'), ('design', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('Simplicity', 'simplicity'), ('in', 'in'), ('design', 'design'), ('.', '.')] 

 Dependency tags are: 
>> [(('Simplicity', 'root'), 'root'), (('in', 'design'), 'case'), (('design', 'Simplicity'), 'nmod'), (('.', 'Simplicity'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 8 ===========================

 Improves compiler efficiency. 

Tokens are: 
>> ['Improves', 'compiler', 'efficiency', '.'] 

 UPOS tags are: 
>> [('Improves', 'VERB'), ('compiler', 'NOUN'), ('efficiency', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Improves', 'VBZ'), ('compiler', 'NN'), ('efficiency', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('Improves', 'improve'), ('compiler', 'compiler'), ('efficiency', 'efficiency'), ('.', '.')] 

 Dependency tags are: 
>> [(('Improves', 'root'), 'root'), (('compiler', 'efficiency'), 'compound'), (('efficiency', 'Improves'), 'obj'), (('.', 'Improves'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 9 ===========================

 Enhance compiler portability. 

Tokens are: 
>> ['Enhance', 'compiler', 'portability', '.'] 

 UPOS tags are: 
>> [('Enhance', 'VERB'), ('compiler', 'NOUN'), ('portability', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Enhance', 'VB'), ('compiler', 'NN'), ('portability', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('Enhance', 'enhance'), ('compiler', 'compiler'), ('portability', 'portability'), ('.', '.')] 

 Dependency tags are: 
>> [(('Enhance', 'root'), 'root'), (('compiler', 'portability'), 'compound'), (('portability', 'Enhance'), 'obj'), (('.', 'Enhance'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 10 ===========================

 Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Token, Pattern & Lexemes        Token, Pattern & Lexemes  Sequence of character having a collective meaning is known as token. 

Tokens are: 
>> ['Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '2', '–', 'Lexical', 'Analyzer', '‹#›', 'Token', ',', 'Pattern', '&', 'Lexemes', 'Token', ',', 'Pattern', '&', 'Lexemes', 'Sequence', 'of', 'character', 'having', 'a', 'collective', 'meaning', 'is', 'known', 'as', 'token', '.'] 

 UPOS tags are: 
>> [('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'ADJ'), ('Analyzer', 'NOUN'), ('‹#›', 'NOUN'), ('Token', 'NOUN'), (',', 'PUNCT'), ('Pattern', 'NOUN'), ('&', 'CCONJ'), ('Lexemes', 'NOUN'), ('Token', 'NOUN'), (',', 'PUNCT'), ('Pattern', 'NOUN'), ('&', 'CCONJ'), ('Lexemes', 'NOUN'), ('Sequence', 'NOUN'), ('of', 'ADP'), ('character', 'NOUN'), ('having', 'VERB'), ('a', 'DET'), ('collective', 'ADJ'), ('meaning', 'NOUN'), ('is', 'AUX'), ('known', 'VERB'), ('as', 'ADP'), ('token', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('2', 'CD'), ('–', ':'), ('Lexical', 'JJ'), ('Analyzer', 'NN'), ('‹#›', 'NN'), ('Token', 'NN'), (',', ','), ('Pattern', 'NN'), ('&', 'CC'), ('Lexemes', 'NN'), ('Token', 'NN'), (',', ','), ('Pattern', 'NN'), ('&', 'CC'), ('Lexemes', 'NN'), ('Sequence', 'NN'), ('of', 'IN'), ('character', 'NN'), ('having', 'VBG'), ('a', 'DT'), ('collective', 'JJ'), ('meaning', 'NN'), ('is', 'VBZ'), ('known', 'VBN'), ('as', 'IN'), ('token', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('2', '2'), ('–', '-'), ('Lexical', 'lexical'), ('Analyzer', 'analyzer'), ('‹#›', '‹#›'), ('Token', 'token'), (',', ','), ('Pattern', 'pattern'), ('&', '&'), ('Lexemes', 'lexeme'), ('Token', 'token'), (',', ','), ('Pattern', 'pattern'), ('&', '&'), ('Lexemes', 'lexeme'), ('Sequence', 'sequence'), ('of', 'of'), ('character', 'character'), ('having', 'have'), ('a', 'a'), ('collective', 'collective'), ('meaning', 'meaning'), ('is', 'be'), ('known', 'know'), ('as', 'as'), ('token', 'token'), ('.', '.')] 

 Dependency tags are: 
>> [(('Prof.', 'known'), 'nsubj:pass'), (('Dixita', 'Prof.'), 'flat'), (('B', 'Prof.'), 'flat'), (('Kagathara', 'Prof.'), 'flat'), (('#', 'known'), 'nsubj:pass'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', 'Unit'), 'compound'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', 'Prof.'), 'list'), (('2', 'Unit'), 'nummod'), (('–', 'Prof.'), 'punct'), (('Lexical', 'Analyzer'), 'amod'), (('Analyzer', 'Prof.'), 'list'), (('‹#›', 'Token'), 'compound'), (('Token', 'known'), 'nsubj:pass'), ((',', 'Token'), 'punct'), (('Pattern', 'Token'), 'compound'), (('&', 'Lexemes'), 'cc'), (('Lexemes', 'Pattern'), 'conj'), (('Token', 'Token'), 'conj'), ((',', 'Sequence'), 'punct'), (('Pattern', 'Sequence'), 'compound'), (('&', 'Lexemes'), 'cc'), (('Lexemes', 'Pattern'), 'conj'), (('Sequence', 'Prof.'), 'appos'), (('of', 'character'), 'case'), (('character', 'Sequence'), 'nmod'), (('having', 'Sequence'), 'acl'), (('a', 'meaning'), 'det'), (('collective', 'meaning'), 'amod'), (('meaning', 'having'), 'obj'), (('is', 'known'), 'aux:pass'), (('known', 'root'), 'root'), (('as', 'token'), 'case'), (('token', 'known'), 'obl'), (('.', 'known'), 'punct')]

 Named Entities are: 
>> [('#2170701', 'CARDINAL'), ('2', 'CARDINAL')]

========================== Sentence 11 ===========================

 Categories of Tokens: Identifier Keyword Operator Special symbol Constant 

Tokens are: 
>> ['Categories', 'of', 'Tokens', ':', 'Identifier', 'Keyword', 'Operator', 'Special', 'symbol', 'Constant'] 

 UPOS tags are: 
>> [('Categories', 'NOUN'), ('of', 'ADP'), ('Tokens', 'NOUN'), (':', 'PUNCT'), ('Identifier', 'NOUN'), ('Keyword', 'NOUN'), ('Operator', 'NOUN'), ('Special', 'ADJ'), ('symbol', 'NOUN'), ('Constant', 'NOUN')] 

 XPOS tags are: 
>> [('Categories', 'NNS'), ('of', 'IN'), ('Tokens', 'NNS'), (':', ':'), ('Identifier', 'NN'), ('Keyword', 'NN'), ('Operator', 'NN'), ('Special', 'JJ'), ('symbol', 'NN'), ('Constant', 'NN')] 

 Lemmas are: 
>> [('Categories', 'category'), ('of', 'of'), ('Tokens', 'tokens'), (':', ':'), ('Identifier', 'identifier'), ('Keyword', 'keyword'), ('Operator', 'Operator'), ('Special', 'special'), ('symbol', 'symbol'), ('Constant', 'constant')] 

 Dependency tags are: 
>> [(('Categories', 'root'), 'root'), (('of', 'Tokens'), 'case'), (('Tokens', 'Categories'), 'nmod'), ((':', 'Categories'), 'punct'), (('Identifier', 'Operator'), 'compound'), (('Keyword', 'Operator'), 'compound'), (('Operator', 'Constant'), 'compound'), (('Special', 'Constant'), 'amod'), (('symbol', 'Constant'), 'compound'), (('Constant', 'Categories'), 'appos')]

 Named Entities are: 
>> []

========================== Sentence 12 ===========================

 The set of rules called pattern associated with a token. 

Tokens are: 
>> ['The', 'set', 'of', 'rules', 'called', 'pattern', 'associated', 'with', 'a', 'token', '.'] 

 UPOS tags are: 
>> [('The', 'DET'), ('set', 'NOUN'), ('of', 'ADP'), ('rules', 'NOUN'), ('called', 'VERB'), ('pattern', 'NOUN'), ('associated', 'VERB'), ('with', 'ADP'), ('a', 'DET'), ('token', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('The', 'DT'), ('set', 'NN'), ('of', 'IN'), ('rules', 'NNS'), ('called', 'VBD'), ('pattern', 'NN'), ('associated', 'VBN'), ('with', 'IN'), ('a', 'DT'), ('token', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('The', 'the'), ('set', 'set'), ('of', 'of'), ('rules', 'rule'), ('called', 'call'), ('pattern', 'pattern'), ('associated', 'associate'), ('with', 'with'), ('a', 'a'), ('token', 'token'), ('.', '.')] 

 Dependency tags are: 
>> [(('The', 'set'), 'det'), (('set', 'called'), 'nsubj'), (('of', 'rules'), 'case'), (('rules', 'set'), 'nmod'), (('called', 'root'), 'root'), (('pattern', 'called'), 'obj'), (('associated', 'pattern'), 'acl'), (('with', 'token'), 'case'), (('a', 'token'), 'det'), (('token', 'associated'), 'obl'), (('.', 'called'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 13 ===========================

 Example: “non-empty sequence of digits”,  “letter followed by letters and digits” 

Tokens are: 
>> ['Example', ':', '“', 'non-empty', 'sequence', 'of', 'digits', '”', ',', '“', 'letter', 'followed', 'by', 'letters', 'and', 'digits', '”'] 

 UPOS tags are: 
>> [('Example', 'NOUN'), (':', 'PUNCT'), ('“', 'PUNCT'), ('non-empty', 'ADJ'), ('sequence', 'NOUN'), ('of', 'ADP'), ('digits', 'NOUN'), ('”', 'PUNCT'), (',', 'PUNCT'), ('“', 'PUNCT'), ('letter', 'NOUN'), ('followed', 'VERB'), ('by', 'ADP'), ('letters', 'NOUN'), ('and', 'CCONJ'), ('digits', 'NOUN'), ('”', 'PUNCT')] 

 XPOS tags are: 
>> [('Example', 'NN'), (':', ':'), ('“', '``'), ('non-empty', 'JJ'), ('sequence', 'NN'), ('of', 'IN'), ('digits', 'NNS'), ('”', "''"), (',', ','), ('“', '``'), ('letter', 'NN'), ('followed', 'VBN'), ('by', 'IN'), ('letters', 'NNS'), ('and', 'CC'), ('digits', 'NNS'), ('”', "''")] 

 Lemmas are: 
>> [('Example', 'example'), (':', ':'), ('“', "''"), ('non-empty', 'non-empty'), ('sequence', 'sequence'), ('of', 'of'), ('digits', 'digit'), ('”', "''"), (',', ','), ('“', "''"), ('letter', 'letter'), ('followed', 'follow'), ('by', 'by'), ('letters', 'letter'), ('and', 'and'), ('digits', 'digit'), ('”', "''")] 

 Dependency tags are: 
>> [(('Example', 'root'), 'root'), ((':', 'Example'), 'punct'), (('“', 'sequence'), 'punct'), (('non-empty', 'sequence'), 'amod'), (('sequence', 'Example'), 'appos'), (('of', 'digits'), 'case'), (('digits', 'sequence'), 'nmod'), (('”', 'sequence'), 'punct'), ((',', 'letter'), 'punct'), (('“', 'letter'), 'punct'), (('letter', 'sequence'), 'appos'), (('followed', 'letter'), 'acl'), (('by', 'letters'), 'case'), (('letters', 'followed'), 'obl'), (('and', 'digits'), 'cc'), (('digits', 'letters'), 'conj'), (('”', 'letter'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 14 ===========================

 The sequence of character in a source program matched with a pattern for a token is called lexeme. 

Tokens are: 
>> ['The', 'sequence', 'of', 'character', 'in', 'a', 'source', 'program', 'matched', 'with', 'a', 'pattern', 'for', 'a', 'token', 'is', 'called', 'lexeme', '.'] 

 UPOS tags are: 
>> [('The', 'DET'), ('sequence', 'NOUN'), ('of', 'ADP'), ('character', 'NOUN'), ('in', 'ADP'), ('a', 'DET'), ('source', 'NOUN'), ('program', 'NOUN'), ('matched', 'VERB'), ('with', 'ADP'), ('a', 'DET'), ('pattern', 'NOUN'), ('for', 'ADP'), ('a', 'DET'), ('token', 'NOUN'), ('is', 'AUX'), ('called', 'VERB'), ('lexeme', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('The', 'DT'), ('sequence', 'NN'), ('of', 'IN'), ('character', 'NN'), ('in', 'IN'), ('a', 'DT'), ('source', 'NN'), ('program', 'NN'), ('matched', 'VBN'), ('with', 'IN'), ('a', 'DT'), ('pattern', 'NN'), ('for', 'IN'), ('a', 'DT'), ('token', 'NN'), ('is', 'VBZ'), ('called', 'VBN'), ('lexeme', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('The', 'the'), ('sequence', 'sequence'), ('of', 'of'), ('character', 'character'), ('in', 'in'), ('a', 'a'), ('source', 'source'), ('program', 'program'), ('matched', 'match'), ('with', 'with'), ('a', 'a'), ('pattern', 'pattern'), ('for', 'for'), ('a', 'a'), ('token', 'token'), ('is', 'be'), ('called', 'call'), ('lexeme', 'lexeme'), ('.', '.')] 

 Dependency tags are: 
>> [(('The', 'sequence'), 'det'), (('sequence', 'called'), 'nsubj:pass'), (('of', 'character'), 'case'), (('character', 'sequence'), 'nmod'), (('in', 'program'), 'case'), (('a', 'program'), 'det'), (('source', 'program'), 'compound'), (('program', 'sequence'), 'nmod'), (('matched', 'program'), 'acl'), (('with', 'pattern'), 'case'), (('a', 'pattern'), 'det'), (('pattern', 'matched'), 'obl'), (('for', 'token'), 'case'), (('a', 'token'), 'det'), (('token', 'pattern'), 'nmod'), (('is', 'called'), 'aux:pass'), (('called', 'root'), 'root'), (('lexeme', 'called'), 'xcomp'), (('.', 'called'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 15 ===========================

 Example:  Rate,  DIET, count, Flag  Token Pattern Lexemes     Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Example: Token, Pattern & Lexemes Example: total = sum + 45 Tokens: 	total 		 	= 	 	sum 	 	+ 	 	45  Lexemes 	Lexemes of identifier: total, sum 	Lexemes of operator: =, + 	Lexemes of constant: 45  Identifier 

Tokens are: 
>> ['Example', ':', 'Rate', ',', 'DIET', ',', 'count', ',', 'Flag', 'Token', 'Pattern', 'Lexemes', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '2', '–', 'Lexical', 'Analyzer', '‹#›', 'Example', ':', 'Token', ',', 'Pattern', '&', 'Lexemes', 'Example', ':', 'total', '=', 'sum', '+', '45', 'Tokens', ':', 'total', '=', 'sum', '+', '45', 'Lexemes', 'Lexemes', 'of', 'identifier', ':', 'total', ',', 'sum', 'Lexemes', 'of', 'operator', ':', '=', ',', '+', 'Lexemes', 'of', 'constant', ':', '45', 'Identifier'] 

 UPOS tags are: 
>> [('Example', 'NOUN'), (':', 'PUNCT'), ('Rate', 'NOUN'), (',', 'PUNCT'), ('DIET', 'NOUN'), (',', 'PUNCT'), ('count', 'NOUN'), (',', 'PUNCT'), ('Flag', 'NOUN'), ('Token', 'NOUN'), ('Pattern', 'NOUN'), ('Lexemes', 'NOUN'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'ADJ'), ('Analyzer', 'NOUN'), ('‹#›', 'NOUN'), ('Example', 'NOUN'), (':', 'PUNCT'), ('Token', 'NOUN'), (',', 'PUNCT'), ('Pattern', 'NOUN'), ('&', 'CCONJ'), ('Lexemes', 'NOUN'), ('Example', 'NOUN'), (':', 'PUNCT'), ('total', 'NOUN'), ('=', 'SYM'), ('sum', 'NOUN'), ('+', 'SYM'), ('45', 'NUM'), ('Tokens', 'NOUN'), (':', 'PUNCT'), ('total', 'ADJ'), ('=', 'SYM'), ('sum', 'NOUN'), ('+', 'SYM'), ('45', 'NUM'), ('Lexemes', 'NOUN'), ('Lexemes', 'NOUN'), ('of', 'ADP'), ('identifier', 'NOUN'), (':', 'PUNCT'), ('total', 'ADJ'), (',', 'PUNCT'), ('sum', 'NOUN'), ('Lexemes', 'NOUN'), ('of', 'ADP'), ('operator', 'NOUN'), (':', 'PUNCT'), ('=', 'SYM'), (',', 'PUNCT'), ('+', 'SYM'), ('Lexemes', 'NOUN'), ('of', 'ADP'), ('constant', 'ADJ'), (':', 'PUNCT'), ('45', 'NUM'), ('Identifier', 'NOUN')] 

 XPOS tags are: 
>> [('Example', 'NN'), (':', ':'), ('Rate', 'NN'), (',', ','), ('DIET', 'NN'), (',', ','), ('count', 'NN'), (',', ','), ('Flag', 'NN'), ('Token', 'NN'), ('Pattern', 'NN'), ('Lexemes', 'NN'), ('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('2', 'CD'), ('–', ':'), ('Lexical', 'JJ'), ('Analyzer', 'NN'), ('‹#›', 'NN'), ('Example', 'NN'), (':', ':'), ('Token', 'NN'), (',', ','), ('Pattern', 'NN'), ('&', 'CC'), ('Lexemes', 'NN'), ('Example', 'NN'), (':', ':'), ('total', 'NN'), ('=', 'SYM'), ('sum', 'NN'), ('+', 'SYM'), ('45', 'CD'), ('Tokens', 'NNS'), (':', ':'), ('total', 'JJ'), ('=', 'SYM'), ('sum', 'NN'), ('+', 'SYM'), ('45', 'CD'), ('Lexemes', 'NN'), ('Lexemes', 'NNS'), ('of', 'IN'), ('identifier', 'NN'), (':', ':'), ('total', 'JJ'), (',', ','), ('sum', 'NN'), ('Lexemes', 'NNS'), ('of', 'IN'), ('operator', 'NN'), (':', ':'), ('=', 'SYM'), (',', ','), ('+', 'SYM'), ('Lexemes', 'NNS'), ('of', 'IN'), ('constant', 'JJ'), (':', ':'), ('45', 'CD'), ('Identifier', 'NN')] 

 Lemmas are: 
>> [('Example', 'example'), (':', ':'), ('Rate', 'rate'), (',', ','), ('DIET', 'diet'), (',', ','), ('count', 'count'), (',', ','), ('Flag', 'Flag'), ('Token', 'token'), ('Pattern', 'pattern'), ('Lexemes', 'lexeme'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('2', '2'), ('–', '-'), ('Lexical', 'lexical'), ('Analyzer', 'analyzer'), ('‹#›', '‹#›'), ('Example', 'example'), (':', ':'), ('Token', 'token'), (',', ','), ('Pattern', 'pattern'), ('&', '&'), ('Lexemes', 'lexeme'), ('Example', 'example'), (':', ':'), ('total', 'total'), ('=', '='), ('sum', 'sum'), ('+', '+'), ('45', '45'), ('Tokens', 'tokens'), (':', ':'), ('total', 'total'), ('=', '='), ('sum', 'sum'), ('+', '+'), ('45', '45'), ('Lexemes', 'lexeme'), ('Lexemes', 'lexeme'), ('of', 'of'), ('identifier', 'identifier'), (':', ':'), ('total', 'total'), (',', ','), ('sum', 'sum'), ('Lexemes', 'lexeme'), ('of', 'of'), ('operator', 'operator'), (':', ':'), ('=', '='), (',', ','), ('+', '+'), ('Lexemes', 'lexeme'), ('of', 'of'), ('constant', 'constant'), (':', ':'), ('45', '45'), ('Identifier', 'identifier')] 

 Dependency tags are: 
>> [(('Example', 'root'), 'root'), ((':', 'Example'), 'punct'), (('Rate', 'Example'), 'appos'), ((',', 'DIET'), 'punct'), (('DIET', 'Rate'), 'conj'), ((',', 'count'), 'punct'), (('count', 'Rate'), 'conj'), ((',', 'Pattern'), 'punct'), (('Flag', 'Token'), 'compound'), (('Token', 'Pattern'), 'compound'), (('Pattern', 'Rate'), 'conj'), (('Lexemes', 'Rate'), 'conj'), (('Prof.', 'Rate'), 'conj'), (('Dixita', 'Kagathara'), 'compound'), (('B', 'Kagathara'), 'compound'), (('Kagathara', 'Rate'), 'conj'), (('#', 'Rate'), 'conj'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', '#'), 'appos'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', 'Rate'), 'conj'), (('2', 'Unit'), 'nummod'), (('–', 'Analyzer'), 'punct'), (('Lexical', 'Analyzer'), 'amod'), (('Analyzer', 'Rate'), 'conj'), (('‹#›', 'Analyzer'), 'compound'), (('Example', 'Rate'), 'conj'), ((':', 'Example'), 'punct'), (('Token', 'Example'), 'appos'), ((',', 'Pattern'), 'punct'), (('Pattern', 'Token'), 'conj'), (('&', 'Lexemes'), 'cc'), (('Lexemes', 'Pattern'), 'conj'), (('Example', 'Rate'), 'conj'), ((':', 'Rate'), 'punct'), (('total', '='), 'nsubj'), (('=', 'Rate'), 'parataxis'), (('sum', '='), 'obj'), (('+', 'Tokens'), 'cc'), (('45', 'Tokens'), 'nummod'), (('Tokens', '='), 'obj'), ((':', '='), 'punct'), (('total', '='), 'nsubj'), (('=', 'Rate'), 'parataxis'), (('sum', '='), 'obj'), (('+', 'Lexemes'), 'cc'), (('45', 'Lexemes'), 'nummod'), (('Lexemes', 'Lexemes'), 'compound'), (('Lexemes', '='), 'obj'), (('of', 'identifier'), 'case'), (('identifier', 'Lexemes'), 'nmod'), ((':', 'Lexemes'), 'punct'), (('total', 'Lexemes'), 'amod'), ((',', 'Lexemes'), 'punct'), (('sum', 'Lexemes'), 'compound'), (('Lexemes', 'Rate'), 'conj'), (('of', 'operator'), 'case'), (('operator', 'Lexemes'), 'nmod'), ((':', '='), 'punct'), (('=', 'Lexemes'), 'appos'), ((',', 'Lexemes'), 'punct'), (('+', 'Lexemes'), 'cc'), (('Lexemes', '='), 'conj'), (('of', 'constant'), 'case'), (('constant', 'Lexemes'), 'nmod'), ((':', 'Identifier'), 'punct'), (('45', 'Identifier'), 'nummod'), (('Identifier', 'Lexemes'), 'nmod')]

 Named Entities are: 
>> [('2170701', 'CARDINAL'), ('2', 'CARDINAL'), ('45', 'CARDINAL'), ('45', 'CARDINAL'), ('45', 'CARDINAL')]

========================== Sentence 16 ===========================

 1 Operator1 Identifier2 Operator2 Constant1  Tokens    Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Input buffering        Input buffering 

Tokens are: 
>> ['1', 'Operator', '1', 'Identifier2', 'Operator2', 'Constant', '1', 'Tokens', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '2', '–', 'Lexical', 'Analyzer', '‹#›', 'Input', 'buffering', 'Input', 'buffering'] 

 UPOS tags are: 
>> [('1', 'NUM'), ('Operator', 'PROPN'), ('1', 'NUM'), ('Identifier2', 'PROPN'), ('Operator2', 'PROPN'), ('Constant', 'ADJ'), ('1', 'NUM'), ('Tokens', 'NOUN'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'ADJ'), ('Analyzer', 'NOUN'), ('‹#›', 'NOUN'), ('Input', 'NOUN'), ('buffering', 'NOUN'), ('Input', 'NOUN'), ('buffering', 'NOUN')] 

 XPOS tags are: 
>> [('1', 'LS'), ('Operator', 'NNP'), ('1', 'CD'), ('Identifier2', 'NNP'), ('Operator2', 'NNP'), ('Constant', 'JJ'), ('1', 'CD'), ('Tokens', 'NNS'), ('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('2', 'CD'), ('–', ':'), ('Lexical', 'JJ'), ('Analyzer', 'NN'), ('‹#›', 'NN'), ('Input', 'NN'), ('buffering', 'NN'), ('Input', 'NN'), ('buffering', 'NN')] 

 Lemmas are: 
>> [('1', '1'), ('Operator', 'Operator'), ('1', '1'), ('Identifier2', 'Identifier2'), ('Operator2', 'Operator2'), ('Constant', 'constant'), ('1', '1'), ('Tokens', 'tokens'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('2', '2'), ('–', '-'), ('Lexical', 'lexical'), ('Analyzer', 'analyzer'), ('‹#›', '‹#›'), ('Input', 'input'), ('buffering', 'buffering'), ('Input', 'input'), ('buffering', 'buffering')] 

 Dependency tags are: 
>> [(('1', 'Operator'), 'nummod'), (('Operator', 'root'), 'root'), (('1', 'Operator'), 'nummod'), (('Identifier2', 'Operator'), 'flat'), (('Operator2', 'Operator'), 'list'), (('Constant', 'Tokens'), 'amod'), (('1', 'Tokens'), 'nummod'), (('Tokens', 'Operator'), 'list'), (('Prof.', 'Tokens'), 'compound'), (('Dixita', 'Kagathara'), 'compound'), (('B', 'Kagathara'), 'compound'), (('Kagathara', '#'), 'compound'), (('#', 'Operator'), 'list'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', '#'), 'appos'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', '#'), 'appos'), (('2', 'Unit'), 'nummod'), (('–', 'Analyzer'), 'punct'), (('Lexical', 'Analyzer'), 'amod'), (('Analyzer', 'Operator'), 'list'), (('‹#›', 'Analyzer'), 'compound'), (('Input', 'buffering'), 'compound'), (('buffering', 'buffering'), 'compound'), (('Input', 'buffering'), 'compound'), (('buffering', 'Operator'), 'list')]

 Named Entities are: 
>> [('1', 'CARDINAL'), ('1', 'CARDINAL'), ('2', 'CARDINAL')]

========================== Sentence 17 ===========================

 There are mainly two techniques for input buffering: Buffer pairs Sentinels 

Tokens are: 
>> ['There', 'are', 'mainly', 'two', 'techniques', 'for', 'input', 'buffering', ':', 'Buffer', 'pairs', 'Sentinels'] 

 UPOS tags are: 
>> [('There', 'PRON'), ('are', 'VERB'), ('mainly', 'ADV'), ('two', 'NUM'), ('techniques', 'NOUN'), ('for', 'ADP'), ('input', 'NOUN'), ('buffering', 'NOUN'), (':', 'PUNCT'), ('Buffer', 'NOUN'), ('pairs', 'NOUN'), ('Sentinels', 'NOUN')] 

 XPOS tags are: 
>> [('There', 'EX'), ('are', 'VBP'), ('mainly', 'RB'), ('two', 'CD'), ('techniques', 'NNS'), ('for', 'IN'), ('input', 'NN'), ('buffering', 'NN'), (':', ':'), ('Buffer', 'NN'), ('pairs', 'NNS'), ('Sentinels', 'NNS')] 

 Lemmas are: 
>> [('There', 'there'), ('are', 'be'), ('mainly', 'mainly'), ('two', 'two'), ('techniques', 'technique'), ('for', 'for'), ('input', 'input'), ('buffering', 'buffering'), (':', ':'), ('Buffer', 'buffer'), ('pairs', 'pair'), ('Sentinels', 'sentinel')] 

 Dependency tags are: 
>> [(('There', 'are'), 'expl'), (('are', 'root'), 'root'), (('mainly', 'are'), 'advmod'), (('two', 'techniques'), 'nummod'), (('techniques', 'are'), 'nsubj'), (('for', 'buffering'), 'case'), (('input', 'buffering'), 'compound'), (('buffering', 'techniques'), 'nmod'), ((':', 'Sentinels'), 'punct'), (('Buffer', 'Sentinels'), 'compound'), (('pairs', 'Sentinels'), 'compound'), (('Sentinels', 'are'), 'parataxis')]

 Named Entities are: 
>> [('two', 'CARDINAL')]

========================== Sentence 18 ===========================

 The lexical analysis scans the input string from left to right one character at a time. 

Tokens are: 
>> ['The', 'lexical', 'analysis', 'scans', 'the', 'input', 'string', 'from', 'left', 'to', 'right', 'one', 'character', 'at', 'a', 'time', '.'] 

 UPOS tags are: 
>> [('The', 'DET'), ('lexical', 'ADJ'), ('analysis', 'NOUN'), ('scans', 'VERB'), ('the', 'DET'), ('input', 'NOUN'), ('string', 'NOUN'), ('from', 'ADP'), ('left', 'VERB'), ('to', 'ADP'), ('right', 'ADJ'), ('one', 'NUM'), ('character', 'NOUN'), ('at', 'ADP'), ('a', 'DET'), ('time', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('The', 'DT'), ('lexical', 'JJ'), ('analysis', 'NN'), ('scans', 'VBZ'), ('the', 'DT'), ('input', 'NN'), ('string', 'NN'), ('from', 'IN'), ('left', 'VBN'), ('to', 'IN'), ('right', 'JJ'), ('one', 'CD'), ('character', 'NN'), ('at', 'IN'), ('a', 'DT'), ('time', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('The', 'the'), ('lexical', 'lexical'), ('analysis', 'analysis'), ('scans', 'scan'), ('the', 'the'), ('input', 'input'), ('string', 'string'), ('from', 'from'), ('left', 'leave'), ('to', 'to'), ('right', 'right'), ('one', 'one'), ('character', 'character'), ('at', 'at'), ('a', 'a'), ('time', 'time'), ('.', '.')] 

 Dependency tags are: 
>> [(('The', 'analysis'), 'det'), (('lexical', 'analysis'), 'amod'), (('analysis', 'scans'), 'nsubj'), (('scans', 'root'), 'root'), (('the', 'string'), 'det'), (('input', 'string'), 'compound'), (('string', 'scans'), 'obj'), (('from', 'left'), 'case'), (('left', 'string'), 'acl'), (('to', 'character'), 'case'), (('right', 'character'), 'amod'), (('one', 'character'), 'nummod'), (('character', 'left'), 'obl'), (('at', 'time'), 'case'), (('a', 'time'), 'det'), (('time', 'left'), 'obl'), (('.', 'scans'), 'punct')]

 Named Entities are: 
>> [('one', 'CARDINAL')]

========================== Sentence 19 ===========================

 Buffer divided into two N-character halves, where N is the number of character on one disk block.  :  :  : E :  : = :  : Mi : * :  : : C: * : * : 2 :  eof :  :  : Buffer Pair    Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Buffer pairs Pointer Lexeme Begin, marks the beginning of the current lexeme. 

Tokens are: 
>> ['Buffer', 'divided', 'into', 'two', 'N-character', 'halves', ',', 'where', 'N', 'is', 'the', 'number', 'of', 'character', 'on', 'one', 'disk', 'block', '.', ':', ':', ':', 'E', ':', ':', '=', ':', ':', 'Mi', ':', '*', ':', ':', ':', 'C', ':', '*', ':', '*', ':', '2', ':', 'eof', ':', ':', ':', 'Buffer', 'Pair', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '2', '–', 'Lexical', 'Analyzer', '‹#›', 'Buffer', 'pairs', 'Pointer', 'Lexeme', 'Begin', ',', 'marks', 'the', 'beginning', 'of', 'the', 'current', 'lexeme', '.'] 

 UPOS tags are: 
>> [('Buffer', 'NOUN'), ('divided', 'VERB'), ('into', 'ADP'), ('two', 'NUM'), ('N-character', 'PROPN'), ('halves', 'NOUN'), (',', 'PUNCT'), ('where', 'SCONJ'), ('N', 'PROPN'), ('is', 'AUX'), ('the', 'DET'), ('number', 'NOUN'), ('of', 'ADP'), ('character', 'NOUN'), ('on', 'ADP'), ('one', 'NUM'), ('disk', 'NOUN'), ('block', 'NOUN'), ('.', 'PUNCT'), (':', 'PUNCT'), (':', 'PUNCT'), (':', 'PUNCT'), ('E', 'NOUN'), (':', 'PUNCT'), (':', 'PUNCT'), ('=', 'PUNCT'), (':', 'PUNCT'), (':', 'PUNCT'), ('Mi', 'NOUN'), (':', 'PUNCT'), ('*', 'PUNCT'), (':', 'PUNCT'), (':', 'PUNCT'), (':', 'PUNCT'), ('C', 'NOUN'), (':', 'PUNCT'), ('*', 'PUNCT'), (':', 'PUNCT'), ('*', 'PUNCT'), (':', 'PUNCT'), ('2', 'NUM'), (':', 'PUNCT'), ('eof', 'NOUN'), (':', 'PUNCT'), (':', 'PUNCT'), (':', 'PUNCT'), ('Buffer', 'NOUN'), ('Pair', 'NOUN'), ('Prof.', 'NOUN'), ('Dixita', 'PROPN'), ('B', 'X'), ('Kagathara', 'X'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'ADJ'), ('Analyzer', 'NOUN'), ('‹#›', 'NOUN'), ('Buffer', 'NOUN'), ('pairs', 'NOUN'), ('Pointer', 'NOUN'), ('Lexeme', 'NOUN'), ('Begin', 'NOUN'), (',', 'PUNCT'), ('marks', 'VERB'), ('the', 'DET'), ('beginning', 'NOUN'), ('of', 'ADP'), ('the', 'DET'), ('current', 'ADJ'), ('lexeme', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Buffer', 'NN'), ('divided', 'VBN'), ('into', 'IN'), ('two', 'CD'), ('N-character', 'NNP'), ('halves', 'NNS'), (',', ','), ('where', 'WRB'), ('N', 'NNP'), ('is', 'VBZ'), ('the', 'DT'), ('number', 'NN'), ('of', 'IN'), ('character', 'NN'), ('on', 'IN'), ('one', 'CD'), ('disk', 'NN'), ('block', 'NN'), ('.', '.'), (':', ':'), (':', ':'), (':', ':'), ('E', 'NN'), (':', ':'), (':', ':'), ('=', 'NFP'), (':', ':'), (':', ':'), ('Mi', 'NN'), (':', ':'), ('*', 'NFP'), (':', ':'), (':', ':'), (':', ':'), ('C', 'NN'), (':', ':'), ('*', 'NFP'), (':', ':'), ('*', 'NFP'), (':', ':'), ('2', 'CD'), (':', ':'), ('eof', 'NN'), (':', ':'), (':', ':'), (':', ':'), ('Buffer', 'NN'), ('Pair', 'NN'), ('Prof.', 'NN'), ('Dixita', 'NNP'), ('B', 'GW'), ('Kagathara', 'GW'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('2', 'CD'), ('–', ','), ('Lexical', 'JJ'), ('Analyzer', 'NN'), ('‹#›', 'NN'), ('Buffer', 'NN'), ('pairs', 'NNS'), ('Pointer', 'NN'), ('Lexeme', 'NN'), ('Begin', 'NN'), (',', ','), ('marks', 'VBZ'), ('the', 'DT'), ('beginning', 'NN'), ('of', 'IN'), ('the', 'DT'), ('current', 'JJ'), ('lexeme', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('Buffer', 'buffer'), ('divided', 'divide'), ('into', 'into'), ('two', 'two'), ('N-character', 'N-character'), ('halves', 'halve'), (',', ','), ('where', 'where'), ('N', 'N'), ('is', 'be'), ('the', 'the'), ('number', 'number'), ('of', 'of'), ('character', 'character'), ('on', 'on'), ('one', 'one'), ('disk', 'disk'), ('block', 'block'), ('.', '.'), (':', ':'), (':', ':'), (':', ':'), ('E', 'e'), (':', ':'), (':', ':'), ('=', '='), (':', ':'), (':', ':'), ('Mi', 'mi'), (':', ':'), ('*', '*'), (':', ':'), (':', ':'), (':', ':'), ('C', 'c'), (':', ':'), ('*', '*'), (':', ':'), ('*', '*'), (':', ':'), ('2', '2'), (':', ':'), ('eof', 'eof'), (':', ':'), (':', ':'), (':', ':'), ('Buffer', 'buffer'), ('Pair', 'pair'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('2', '2'), ('–', '-'), ('Lexical', 'lexical'), ('Analyzer', 'analyzer'), ('‹#›', '‹#›'), ('Buffer', 'buffer'), ('pairs', 'pair'), ('Pointer', 'pointer'), ('Lexeme', 'lexeme'), ('Begin', 'begin'), (',', ','), ('marks', 'mark'), ('the', 'the'), ('beginning', 'beginning'), ('of', 'of'), ('the', 'the'), ('current', 'current'), ('lexeme', 'lexeme'), ('.', '.')] 

 Dependency tags are: 
>> [(('Buffer', 'root'), 'root'), (('divided', 'Buffer'), 'acl'), (('into', 'halves'), 'case'), (('two', 'halves'), 'nummod'), (('N-character', 'halves'), 'compound'), (('halves', 'divided'), 'obl'), ((',', 'number'), 'punct'), (('where', 'number'), 'mark'), (('N', 'number'), 'nsubj'), (('is', 'number'), 'cop'), (('the', 'number'), 'det'), (('number', 'halves'), 'acl:relcl'), (('of', 'character'), 'case'), (('character', 'number'), 'nmod'), (('on', 'block'), 'case'), (('one', 'block'), 'nummod'), (('disk', 'block'), 'compound'), (('block', 'number'), 'nmod'), (('.', 'Buffer'), 'punct'), ((':', 'Buffer'), 'punct'), ((':', 'E'), 'punct'), ((':', 'E'), 'punct'), (('E', 'Buffer'), 'parataxis'), ((':', 'E'), 'punct'), ((':', 'E'), 'punct'), (('=', 'E'), 'punct'), ((':', 'Mi'), 'punct'), ((':', 'Mi'), 'punct'), (('Mi', 'E'), 'appos'), ((':', 'Mi'), 'punct'), (('*', 'Mi'), 'punct'), ((':', 'Mi'), 'punct'), ((':', 'C'), 'punct'), ((':', 'C'), 'punct'), (('C', 'Mi'), 'appos'), ((':', 'C'), 'punct'), (('*', 'C'), 'punct'), ((':', 'C'), 'punct'), (('*', 'C'), 'punct'), ((':', 'eof'), 'punct'), (('2', 'eof'), 'appos'), ((':', 'eof'), 'punct'), (('eof', 'C'), 'appos'), ((':', 'eof'), 'punct'), ((':', 'eof'), 'punct'), ((':', 'Pair'), 'punct'), (('Buffer', 'Pair'), 'compound'), (('Pair', 'eof'), 'appos'), (('Prof.', 'Pair'), 'compound'), (('Dixita', 'Pair'), 'compound'), (('B', '#'), 'compound'), (('Kagathara', '#'), 'nummod'), (('#', 'Pair'), 'appos'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', '#'), 'appos'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', '#'), 'appos'), (('2', 'Unit'), 'nummod'), (('–', 'Analyzer'), 'punct'), (('Lexical', 'Analyzer'), 'amod'), (('Analyzer', 'Unit'), 'appos'), (('‹#›', 'pairs'), 'compound'), (('Buffer', 'pairs'), 'compound'), (('pairs', 'Analyzer'), 'appos'), (('Pointer', 'Lexeme'), 'compound'), (('Lexeme', 'pairs'), 'appos'), (('Begin', 'Lexeme'), 'amod'), ((',', 'marks'), 'punct'), (('marks', 'Analyzer'), 'parataxis'), (('the', 'beginning'), 'det'), (('beginning', 'marks'), 'obj'), (('of', 'lexeme'), 'case'), (('the', 'lexeme'), 'det'), (('current', 'lexeme'), 'amod'), (('lexeme', 'beginning'), 'nmod'), (('.', 'marks'), 'punct')]

 Named Entities are: 
>> [('two', 'CARDINAL'), ('N-character', 'ORG'), ('one', 'CARDINAL'), ('2', 'CARDINAL'), ('#2170701', 'CARDINAL'), ('2', 'CARDINAL')]

========================== Sentence 20 ===========================

 Pointer Forward, scans ahead until a pattern match is found. 

Tokens are: 
>> ['Pointer', 'Forward', ',', 'scans', 'ahead', 'until', 'a', 'pattern', 'match', 'is', 'found', '.'] 

 UPOS tags are: 
>> [('Pointer', 'NOUN'), ('Forward', 'ADV'), (',', 'PUNCT'), ('scans', 'NOUN'), ('ahead', 'ADV'), ('until', 'SCONJ'), ('a', 'DET'), ('pattern', 'NOUN'), ('match', 'NOUN'), ('is', 'AUX'), ('found', 'VERB'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Pointer', 'NN'), ('Forward', 'RB'), (',', ','), ('scans', 'NNS'), ('ahead', 'RB'), ('until', 'IN'), ('a', 'DT'), ('pattern', 'NN'), ('match', 'NN'), ('is', 'VBZ'), ('found', 'VBN'), ('.', '.')] 

 Lemmas are: 
>> [('Pointer', 'pointer'), ('Forward', 'forward'), (',', ','), ('scans', 'scan'), ('ahead', 'ahead'), ('until', 'until'), ('a', 'a'), ('pattern', 'pattern'), ('match', 'match'), ('is', 'be'), ('found', 'find'), ('.', '.')] 

 Dependency tags are: 
>> [(('Pointer', 'root'), 'root'), (('Forward', 'Pointer'), 'advmod'), ((',', 'Pointer'), 'punct'), (('scans', 'Pointer'), 'parataxis'), (('ahead', 'scans'), 'advmod'), (('until', 'found'), 'mark'), (('a', 'match'), 'det'), (('pattern', 'match'), 'compound'), (('match', 'found'), 'nsubj:pass'), (('is', 'found'), 'aux:pass'), (('found', 'Pointer'), 'advcl'), (('.', 'Pointer'), 'punct')]

 Named Entities are: 
>> [('Pointer Forward', 'ORG')]

========================== Sentence 21 ===========================

 Once the next lexeme is determined, forward is set to character at its right end. 

Tokens are: 
>> ['Once', 'the', 'next', 'lexeme', 'is', 'determined', ',', 'forward', 'is', 'set', 'to', 'character', 'at', 'its', 'right', 'end', '.'] 

 UPOS tags are: 
>> [('Once', 'SCONJ'), ('the', 'DET'), ('next', 'ADJ'), ('lexeme', 'NOUN'), ('is', 'AUX'), ('determined', 'VERB'), (',', 'PUNCT'), ('forward', 'ADV'), ('is', 'AUX'), ('set', 'VERB'), ('to', 'ADP'), ('character', 'NOUN'), ('at', 'ADP'), ('its', 'PRON'), ('right', 'ADJ'), ('end', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Once', 'IN'), ('the', 'DT'), ('next', 'JJ'), ('lexeme', 'NN'), ('is', 'VBZ'), ('determined', 'VBN'), (',', ','), ('forward', 'RB'), ('is', 'VBZ'), ('set', 'VBN'), ('to', 'IN'), ('character', 'NN'), ('at', 'IN'), ('its', 'PRP$'), ('right', 'JJ'), ('end', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('Once', 'once'), ('the', 'the'), ('next', 'next'), ('lexeme', 'lexeme'), ('is', 'be'), ('determined', 'determine'), (',', ','), ('forward', 'forward'), ('is', 'be'), ('set', 'set'), ('to', 'to'), ('character', 'character'), ('at', 'at'), ('its', 'its'), ('right', 'right'), ('end', 'end'), ('.', '.')] 

 Dependency tags are: 
>> [(('Once', 'determined'), 'mark'), (('the', 'lexeme'), 'det'), (('next', 'lexeme'), 'amod'), (('lexeme', 'determined'), 'nsubj:pass'), (('is', 'determined'), 'aux:pass'), (('determined', 'set'), 'advcl'), ((',', 'set'), 'punct'), (('forward', 'set'), 'advmod'), (('is', 'set'), 'aux:pass'), (('set', 'root'), 'root'), (('to', 'character'), 'case'), (('character', 'set'), 'obl'), (('at', 'end'), 'case'), (('its', 'end'), 'nmod:poss'), (('right', 'end'), 'amod'), (('end', 'set'), 'obl'), (('.', 'set'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 22 ===========================

 Lexeme Begin is set to the character immediately after the lexeme just found. 

Tokens are: 
>> ['Lexeme', 'Begin', 'is', 'set', 'to', 'the', 'character', 'immediately', 'after', 'the', 'lexeme', 'just', 'found', '.'] 

 UPOS tags are: 
>> [('Lexeme', 'NOUN'), ('Begin', 'NOUN'), ('is', 'AUX'), ('set', 'VERB'), ('to', 'ADP'), ('the', 'DET'), ('character', 'NOUN'), ('immediately', 'ADV'), ('after', 'SCONJ'), ('the', 'DET'), ('lexeme', 'NOUN'), ('just', 'ADV'), ('found', 'VERB'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Lexeme', 'NN'), ('Begin', 'NN'), ('is', 'VBZ'), ('set', 'VBN'), ('to', 'IN'), ('the', 'DT'), ('character', 'NN'), ('immediately', 'RB'), ('after', 'IN'), ('the', 'DT'), ('lexeme', 'NN'), ('just', 'RB'), ('found', 'VBN'), ('.', '.')] 

 Lemmas are: 
>> [('Lexeme', 'lexeme'), ('Begin', 'begin'), ('is', 'be'), ('set', 'set'), ('to', 'to'), ('the', 'the'), ('character', 'character'), ('immediately', 'immediately'), ('after', 'after'), ('the', 'the'), ('lexeme', 'lexeme'), ('just', 'just'), ('found', 'find'), ('.', '.')] 

 Dependency tags are: 
>> [(('Lexeme', 'Begin'), 'compound'), (('Begin', 'set'), 'nsubj:pass'), (('is', 'set'), 'aux:pass'), (('set', 'root'), 'root'), (('to', 'character'), 'case'), (('the', 'character'), 'det'), (('character', 'set'), 'obl'), (('immediately', 'set'), 'advmod'), (('after', 'found'), 'mark'), (('the', 'lexeme'), 'det'), (('lexeme', 'found'), 'nsubj'), (('just', 'found'), 'advmod'), (('found', 'set'), 'advcl'), (('.', 'set'), 'punct')]

 Named Entities are: 
>> [('Lexeme Begin', 'PERSON')]

========================== Sentence 23 ===========================

 If forward pointer is at the end of first buffer half then second is filled with N input character. 

Tokens are: 
>> ['If', 'forward', 'pointer', 'is', 'at', 'the', 'end', 'of', 'first', 'buffer', 'half', 'then', 'second', 'is', 'filled', 'with', 'N', 'input', 'character', '.'] 

 UPOS tags are: 
>> [('If', 'SCONJ'), ('forward', 'ADJ'), ('pointer', 'NOUN'), ('is', 'AUX'), ('at', 'ADP'), ('the', 'DET'), ('end', 'NOUN'), ('of', 'ADP'), ('first', 'ADJ'), ('buffer', 'NOUN'), ('half', 'NOUN'), ('then', 'ADV'), ('second', 'ADV'), ('is', 'AUX'), ('filled', 'VERB'), ('with', 'ADP'), ('N', 'PROPN'), ('input', 'NOUN'), ('character', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('If', 'IN'), ('forward', 'JJ'), ('pointer', 'NN'), ('is', 'VBZ'), ('at', 'IN'), ('the', 'DT'), ('end', 'NN'), ('of', 'IN'), ('first', 'JJ'), ('buffer', 'NN'), ('half', 'NN'), ('then', 'RB'), ('second', 'RB'), ('is', 'VBZ'), ('filled', 'VBN'), ('with', 'IN'), ('N', 'NNP'), ('input', 'NN'), ('character', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('If', 'if'), ('forward', 'forward'), ('pointer', 'pointer'), ('is', 'be'), ('at', 'at'), ('the', 'the'), ('end', 'end'), ('of', 'of'), ('first', 'first'), ('buffer', 'buffer'), ('half', 'half'), ('then', 'then'), ('second', 'second'), ('is', 'be'), ('filled', 'fill'), ('with', 'with'), ('N', 'N'), ('input', 'input'), ('character', 'character'), ('.', '.')] 

 Dependency tags are: 
>> [(('If', 'end'), 'mark'), (('forward', 'pointer'), 'amod'), (('pointer', 'end'), 'nsubj'), (('is', 'end'), 'cop'), (('at', 'end'), 'case'), (('the', 'end'), 'det'), (('end', 'filled'), 'advcl'), (('of', 'half'), 'case'), (('first', 'buffer'), 'amod'), (('buffer', 'half'), 'compound'), (('half', 'end'), 'nmod'), (('then', 'filled'), 'advmod'), (('second', 'filled'), 'advmod'), (('is', 'filled'), 'aux:pass'), (('filled', 'root'), 'root'), (('with', 'character'), 'case'), (('N', 'character'), 'compound'), (('input', 'character'), 'compound'), (('character', 'filled'), 'obl'), (('.', 'filled'), 'punct')]

 Named Entities are: 
>> [('first', 'ORDINAL'), ('half', 'CARDINAL'), ('second', 'ORDINAL')]

========================== Sentence 24 ===========================

 If forward pointer is at the end of second buffer half then first is filled with N input character.  :  :  : E :  : = :  : Mi : * :  : : C: * : * : 2 :  eof :  :  :        forward       lexeme_beginnig        forward : C: * : * : 2 :  eof :  :  :    Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Buffer pairs Code to advance forward pointer 	if forward at end of first half then begin 		reload second half; 		forward := forward + 1; 	end 	else if forward at end of second half then begin 		reload first half; 		move forward to beginning of first half; 	end 	else forward := forward + 1;  :  :  : E :  : = :  : Mi : * :  : : C: * : * : 2 :  eof :  :  :        forward       lexeme_beginnig        forward        forward : C: * : * : 2 :  eof :  :  :    Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Sentinels 

Tokens are: 
>> ['If', 'forward', 'pointer', 'is', 'at', 'the', 'end', 'of', 'second', 'buffer', 'half', 'then', 'first', 'is', 'filled', 'with', 'N', 'input', 'character', '.', ':', ':', ':', 'E', ':', ':', '=', ':', ':', 'Mi', ':', '*', ':', ':', ':', 'C', ':', '*', ':', '*', ':', '2', ':', 'eof', ':', ':', ':', 'forward', 'lexeme_beginnig', 'forward', ':', 'C', ':', '*', ':', '*', ':', '2', ':', 'eof', ':', ':', ':', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '2', '–', 'Lexical', 'Analyzer', '‹#›', 'Buffer', 'pairs', 'Code', 'to', 'advance', 'forward', 'pointer', 'if', 'forward', 'at', 'end', 'of', 'first', 'half', 'then', 'begin', 'reload', 'second', 'half', ';', 'forward', ':=', 'forward', '+', '1', ';', 'end', 'else', 'if', 'forward', 'at', 'end', 'of', 'second', 'half', 'then', 'begin', 'reload', 'first', 'half', ';', 'move', 'forward', 'to', 'beginning', 'of', 'first', 'half', ';', 'end', 'else', 'forward', ':=', 'forward', '+', '1', ';', ':', ':', ':', 'E', ':', ':', '=', ':', ':', 'Mi', ':', '*', ':', ':', ':', 'C', ':', '*', ':', '*', ':', '2', ':', 'eof', ':', ':', ':', 'forward', 'lexeme_beginnig', 'forward', 'forward', ':', 'C', ':', '*', ':', '*', ':', '2', ':', 'eof', ':', ':', ':', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '2', '–', 'Lexical', 'Analyzer', '‹#›', 'Sentinels'] 

 UPOS tags are: 
>> [('If', 'SCONJ'), ('forward', 'ADJ'), ('pointer', 'NOUN'), ('is', 'AUX'), ('at', 'ADP'), ('the', 'DET'), ('end', 'NOUN'), ('of', 'ADP'), ('second', 'ADJ'), ('buffer', 'NOUN'), ('half', 'NOUN'), ('then', 'ADV'), ('first', 'ADV'), ('is', 'AUX'), ('filled', 'VERB'), ('with', 'ADP'), ('N', 'PROPN'), ('input', 'NOUN'), ('character', 'NOUN'), ('.', 'PUNCT'), (':', 'PUNCT'), (':', 'PUNCT'), (':', 'PUNCT'), ('E', 'NOUN'), (':', 'PUNCT'), (':', 'PUNCT'), ('=', 'PUNCT'), (':', 'PUNCT'), (':', 'PUNCT'), ('Mi', 'NOUN'), (':', 'PUNCT'), ('*', 'PUNCT'), (':', 'PUNCT'), (':', 'PUNCT'), (':', 'PUNCT'), ('C', 'NOUN'), (':', 'PUNCT'), ('*', 'PUNCT'), (':', 'PUNCT'), ('*', 'PUNCT'), (':', 'PUNCT'), ('2', 'NUM'), (':', 'PUNCT'), ('eof', 'NOUN'), (':', 'PUNCT'), (':', 'PUNCT'), (':', 'PUNCT'), ('forward', 'ADJ'), ('lexeme_beginnig', 'NOUN'), ('forward', 'ADV'), (':', 'PUNCT'), ('C', 'NOUN'), (':', 'PUNCT'), ('*', 'PUNCT'), (':', 'PUNCT'), ('*', 'PUNCT'), (':', 'PUNCT'), ('2', 'NUM'), (':', 'PUNCT'), ('eof', 'NOUN'), (':', 'PUNCT'), (':', 'PUNCT'), (':', 'PUNCT'), ('Prof.', 'NOUN'), ('Dixita', 'PROPN'), ('B', 'NOUN'), ('Kagathara', 'NOUN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'ADJ'), ('Analyzer', 'NOUN'), ('‹#›', 'NOUN'), ('Buffer', 'NOUN'), ('pairs', 'NOUN'), ('Code', 'NOUN'), ('to', 'PART'), ('advance', 'VERB'), ('forward', 'ADJ'), ('pointer', 'NOUN'), ('if', 'SCONJ'), ('forward', 'ADV'), ('at', 'ADP'), ('end', 'NOUN'), ('of', 'ADP'), ('first', 'ADJ'), ('half', 'NOUN'), ('then', 'ADV'), ('begin', 'VERB'), ('reload', 'VERB'), ('second', 'ADJ'), ('half', 'NOUN'), (';', 'PUNCT'), ('forward', 'ADV'), (':=', 'SYM'), ('forward', 'ADV'), ('+', 'SYM'), ('1', 'NUM'), (';', 'PUNCT'), ('end', 'NOUN'), ('else', 'ADV'), ('if', 'SCONJ'), ('forward', 'ADV'), ('at', 'ADP'), ('end', 'NOUN'), ('of', 'ADP'), ('second', 'ADJ'), ('half', 'NOUN'), ('then', 'ADV'), ('begin', 'VERB'), ('reload', 'VERB'), ('first', 'ADJ'), ('half', 'NOUN'), (';', 'PUNCT'), ('move', 'VERB'), ('forward', 'ADV'), ('to', 'ADP'), ('beginning', 'NOUN'), ('of', 'ADP'), ('first', 'ADJ'), ('half', 'NOUN'), (';', 'PUNCT'), ('end', 'NOUN'), ('else', 'ADV'), ('forward', 'ADV'), (':=', 'SYM'), ('forward', 'ADV'), ('+', 'SYM'), ('1', 'NUM'), (';', 'PUNCT'), (':', 'PUNCT'), (':', 'PUNCT'), (':', 'PUNCT'), ('E', 'NOUN'), (':', 'PUNCT'), (':', 'PUNCT'), ('=', 'PUNCT'), (':', 'PUNCT'), (':', 'PUNCT'), ('Mi', 'NOUN'), (':', 'PUNCT'), ('*', 'PUNCT'), (':', 'PUNCT'), (':', 'PUNCT'), (':', 'PUNCT'), ('C', 'NOUN'), (':', 'PUNCT'), ('*', 'PUNCT'), (':', 'PUNCT'), ('*', 'PUNCT'), (':', 'PUNCT'), ('2', 'NUM'), (':', 'PUNCT'), ('eof', 'NOUN'), (':', 'PUNCT'), (':', 'PUNCT'), (':', 'PUNCT'), ('forward', 'ADJ'), ('lexeme_beginnig', 'NOUN'), ('forward', 'ADV'), ('forward', 'ADV'), (':', 'PUNCT'), ('C', 'NOUN'), (':', 'PUNCT'), ('*', 'PUNCT'), (':', 'PUNCT'), ('*', 'PUNCT'), (':', 'PUNCT'), ('2', 'NUM'), (':', 'PUNCT'), ('eof', 'NOUN'), (':', 'PUNCT'), (':', 'PUNCT'), (':', 'PUNCT'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'ADJ'), ('Analyzer', 'NOUN'), ('‹#›', 'NOUN'), ('Sentinels', 'NOUN')] 

 XPOS tags are: 
>> [('If', 'IN'), ('forward', 'JJ'), ('pointer', 'NN'), ('is', 'VBZ'), ('at', 'IN'), ('the', 'DT'), ('end', 'NN'), ('of', 'IN'), ('second', 'JJ'), ('buffer', 'NN'), ('half', 'NN'), ('then', 'RB'), ('first', 'RB'), ('is', 'VBZ'), ('filled', 'VBN'), ('with', 'IN'), ('N', 'NNP'), ('input', 'NN'), ('character', 'NN'), ('.', '.'), (':', ':'), (':', ':'), (':', ':'), ('E', 'NN'), (':', ':'), (':', ':'), ('=', 'NFP'), (':', ':'), (':', ':'), ('Mi', 'NN'), (':', ':'), ('*', 'NFP'), (':', ':'), (':', ':'), (':', ':'), ('C', 'NN'), (':', ':'), ('*', 'NFP'), (':', ':'), ('*', 'NFP'), (':', ':'), ('2', 'CD'), (':', ':'), ('eof', 'NN'), (':', ':'), (':', ':'), (':', ':'), ('forward', 'JJ'), ('lexeme_beginnig', 'NN'), ('forward', 'RB'), (':', ':'), ('C', 'NN'), (':', ':'), ('*', 'NFP'), (':', ':'), ('*', 'NFP'), (':', ':'), ('2', 'CD'), (':', ':'), ('eof', 'NN'), (':', ':'), (':', ':'), (':', ':'), ('Prof.', 'NN'), ('Dixita', 'NNP'), ('B', 'NN'), ('Kagathara', 'NN'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('2', 'CD'), ('–', ','), ('Lexical', 'JJ'), ('Analyzer', 'NN'), ('‹#›', 'NN'), ('Buffer', 'NN'), ('pairs', 'NNS'), ('Code', 'NN'), ('to', 'TO'), ('advance', 'VB'), ('forward', 'JJ'), ('pointer', 'NN'), ('if', 'IN'), ('forward', 'RB'), ('at', 'IN'), ('end', 'NN'), ('of', 'IN'), ('first', 'JJ'), ('half', 'NN'), ('then', 'RB'), ('begin', 'VB'), ('reload', 'VB'), ('second', 'JJ'), ('half', 'NN'), (';', ','), ('forward', 'RB'), (':=', 'NFP'), ('forward', 'RB'), ('+', 'SYM'), ('1', 'CD'), (';', ','), ('end', 'NN'), ('else', 'RB'), ('if', 'IN'), ('forward', 'RB'), ('at', 'IN'), ('end', 'NN'), ('of', 'IN'), ('second', 'JJ'), ('half', 'NN'), ('then', 'RB'), ('begin', 'VB'), ('reload', 'VB'), ('first', 'JJ'), ('half', 'NN'), (';', ','), ('move', 'VB'), ('forward', 'RB'), ('to', 'IN'), ('beginning', 'NN'), ('of', 'IN'), ('first', 'JJ'), ('half', 'NN'), (';', ','), ('end', 'NN'), ('else', 'RB'), ('forward', 'RB'), (':=', 'NFP'), ('forward', 'RB'), ('+', 'SYM'), ('1', 'CD'), (';', ','), (':', ':'), (':', ':'), (':', ':'), ('E', 'NN'), (':', ':'), (':', ':'), ('=', 'NFP'), (':', ':'), (':', ':'), ('Mi', 'NN'), (':', ':'), ('*', 'NFP'), (':', ':'), (':', ':'), (':', ':'), ('C', 'NN'), (':', ':'), ('*', 'NFP'), (':', ':'), ('*', 'NFP'), (':', ':'), ('2', 'CD'), (':', ':'), ('eof', 'NN'), (':', ':'), (':', ':'), (':', ':'), ('forward', 'JJ'), ('lexeme_beginnig', 'NN'), ('forward', 'RB'), ('forward', 'RB'), (':', ':'), ('C', 'NN'), (':', ':'), ('*', 'NFP'), (':', ':'), ('*', 'NFP'), (':', ':'), ('2', 'CD'), (':', ':'), ('eof', 'NN'), (':', ':'), (':', ':'), (':', ':'), ('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('2', 'CD'), ('–', ','), ('Lexical', 'JJ'), ('Analyzer', 'NN'), ('‹#›', 'NN'), ('Sentinels', 'NNS')] 

 Lemmas are: 
>> [('If', 'if'), ('forward', 'forward'), ('pointer', 'pointer'), ('is', 'be'), ('at', 'at'), ('the', 'the'), ('end', 'end'), ('of', 'of'), ('second', 'second'), ('buffer', 'buffer'), ('half', 'half'), ('then', 'then'), ('first', 'first'), ('is', 'be'), ('filled', 'fill'), ('with', 'with'), ('N', 'N'), ('input', 'input'), ('character', 'character'), ('.', '.'), (':', ':'), (':', ':'), (':', ':'), ('E', 'e'), (':', ':'), (':', ':'), ('=', '='), (':', ':'), (':', ':'), ('Mi', 'mi'), (':', ':'), ('*', '*'), (':', ':'), (':', ':'), (':', ':'), ('C', 'c'), (':', ':'), ('*', '*'), (':', ':'), ('*', '*'), (':', ':'), ('2', '2'), (':', ':'), ('eof', 'eof'), (':', ':'), (':', ':'), (':', ':'), ('forward', 'forward'), ('lexeme_beginnig', 'lexeme_beginnig'), ('forward', 'forward'), (':', ':'), ('C', 'c'), (':', ':'), ('*', '*'), (':', ':'), ('*', '*'), (':', ':'), ('2', '2'), (':', ':'), ('eof', 'eof'), (':', ':'), (':', ':'), (':', ':'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('2', '2'), ('–', '-'), ('Lexical', 'lexical'), ('Analyzer', 'analyzer'), ('‹#›', '‹#›'), ('Buffer', 'buffer'), ('pairs', 'pair'), ('Code', 'code'), ('to', 'to'), ('advance', 'advance'), ('forward', 'forward'), ('pointer', 'pointer'), ('if', 'if'), ('forward', 'forward'), ('at', 'at'), ('end', 'end'), ('of', 'of'), ('first', 'first'), ('half', 'half'), ('then', 'then'), ('begin', 'begin'), ('reload', 'reload'), ('second', 'second'), ('half', 'half'), (';', ';'), ('forward', 'forward'), (':=', ':='), ('forward', 'forward'), ('+', '+'), ('1', '1'), (';', ';'), ('end', 'end'), ('else', 'else'), ('if', 'if'), ('forward', 'forward'), ('at', 'at'), ('end', 'end'), ('of', 'of'), ('second', 'second'), ('half', 'half'), ('then', 'then'), ('begin', 'begin'), ('reload', 'reload'), ('first', 'first'), ('half', 'half'), (';', ';'), ('move', 'move'), ('forward', 'forward'), ('to', 'to'), ('beginning', 'beginning'), ('of', 'of'), ('first', 'first'), ('half', 'half'), (';', ';'), ('end', 'end'), ('else', 'else'), ('forward', 'forward'), (':=', ':='), ('forward', 'forward'), ('+', '+'), ('1', '1'), (';', ';'), (':', ':'), (':', ':'), (':', ':'), ('E', 'e'), (':', ':'), (':', ':'), ('=', '='), (':', ':'), (':', ':'), ('Mi', 'mi'), (':', ':'), ('*', '*'), (':', ':'), (':', ':'), (':', ':'), ('C', 'c'), (':', ':'), ('*', '*'), (':', ':'), ('*', '*'), (':', ':'), ('2', '2'), (':', ':'), ('eof', 'eof'), (':', ':'), (':', ':'), (':', ':'), ('forward', 'forward'), ('lexeme_beginnig', 'lexeme_beginnig'), ('forward', 'forward'), ('forward', 'forward'), (':', ':'), ('C', 'c'), (':', ':'), ('*', '*'), (':', ':'), ('*', '*'), (':', ':'), ('2', '2'), (':', ':'), ('eof', 'eof'), (':', ':'), (':', ':'), (':', ':'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('2', '2'), ('–', '-'), ('Lexical', 'lexical'), ('Analyzer', 'analyzer'), ('‹#›', '‹#›'), ('Sentinels', 'sentinel')] 

 Dependency tags are: 
>> [(('If', 'end'), 'mark'), (('forward', 'pointer'), 'amod'), (('pointer', 'end'), 'nsubj'), (('is', 'end'), 'cop'), (('at', 'end'), 'case'), (('the', 'end'), 'det'), (('end', 'filled'), 'advcl'), (('of', 'half'), 'case'), (('second', 'buffer'), 'amod'), (('buffer', 'half'), 'compound'), (('half', 'end'), 'nmod'), (('then', 'filled'), 'advmod'), (('first', 'filled'), 'advmod'), (('is', 'filled'), 'aux:pass'), (('filled', 'root'), 'root'), (('with', 'character'), 'case'), (('N', 'character'), 'compound'), (('input', 'character'), 'compound'), (('character', 'filled'), 'obl'), (('.', 'filled'), 'punct'), ((':', 'filled'), 'punct'), ((':', 'E'), 'punct'), ((':', 'E'), 'punct'), (('E', 'filled'), 'dep'), ((':', 'E'), 'punct'), ((':', 'E'), 'punct'), (('=', 'E'), 'punct'), ((':', 'Mi'), 'punct'), ((':', 'Mi'), 'punct'), (('Mi', 'filled'), 'dep'), ((':', 'Mi'), 'punct'), (('*', 'Mi'), 'punct'), ((':', 'Mi'), 'punct'), ((':', 'C'), 'punct'), ((':', 'C'), 'punct'), (('C', 'Mi'), 'dep'), ((':', 'C'), 'punct'), (('*', 'C'), 'punct'), ((':', 'C'), 'punct'), (('*', 'C'), 'punct'), ((':', 'eof'), 'punct'), (('2', 'C'), 'dep'), ((':', 'eof'), 'punct'), (('eof', 'C'), 'dep'), ((':', 'eof'), 'punct'), ((':', 'eof'), 'punct'), ((':', 'lexeme_beginnig'), 'punct'), (('forward', 'lexeme_beginnig'), 'amod'), (('lexeme_beginnig', 'eof'), 'appos'), (('forward', 'lexeme_beginnig'), 'advmod'), ((':', 'lexeme_beginnig'), 'punct'), (('C', 'lexeme_beginnig'), 'appos'), ((':', 'C'), 'punct'), (('*', 'C'), 'punct'), ((':', 'C'), 'punct'), (('*', 'C'), 'punct'), ((':', 'eof'), 'punct'), (('2', 'eof'), 'nummod'), ((':', 'eof'), 'punct'), (('eof', 'C'), 'dep'), ((':', 'eof'), 'punct'), ((':', 'eof'), 'punct'), ((':', 'eof'), 'punct'), (('Prof.', 'B'), 'compound'), (('Dixita', 'B'), 'compound'), (('B', 'Kagathara'), 'compound'), (('Kagathara', '#'), 'compound'), (('#', 'filled'), 'parataxis'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', '#'), 'appos'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', 'CD'), 'conj'), (('2', 'Unit'), 'nummod'), (('–', 'Unit'), 'punct'), (('Lexical', 'Analyzer'), 'amod'), (('Analyzer', 'Buffer'), 'compound'), (('‹#›', 'Buffer'), 'compound'), (('Buffer', 'pairs'), 'compound'), (('pairs', 'Code'), 'compound'), (('Code', 'filled'), 'parataxis'), (('to', 'advance'), 'mark'), (('advance', 'Code'), 'acl'), (('forward', 'pointer'), 'amod'), (('pointer', 'advance'), 'obj'), (('if', 'forward'), 'mark'), (('forward', 'end'), 'advmod'), (('at', 'end'), 'case'), (('end', 'advance'), 'obl'), (('of', 'half'), 'case'), (('first', 'half'), 'amod'), (('half', 'end'), 'nmod'), (('then', 'begin'), 'advmod'), (('begin', 'filled'), 'conj'), (('reload', 'begin'), 'parataxis'), (('second', 'half'), 'amod'), (('half', 'reload'), 'obj'), ((';', 'begin'), 'punct'), (('forward', 'forward'), 'advmod'), ((':=', 'forward'), 'dep'), (('forward', 'begin'), 'advmod'), (('+', '1'), 'cc'), (('1', 'forward'), 'conj'), ((';', 'forward'), 'punct'), (('end', 'begin'), 'nsubj'), (('else', 'end'), 'advmod'), (('if', 'forward'), 'mark'), (('forward', 'end'), 'advcl'), (('at', 'end'), 'case'), (('end', 'forward'), 'obl'), (('of', 'half'), 'case'), (('second', 'half'), 'amod'), (('half', 'end'), 'nmod'), (('then', 'begin'), 'advmod'), (('begin', 'move'), 'parataxis'), (('reload', 'begin'), 'parataxis'), (('first', 'half'), 'amod'), (('half', 'reload'), 'obj'), ((';', 'move'), 'punct'), (('move', 'filled'), 'parataxis'), (('forward', 'move'), 'advmod'), (('to', 'beginning'), 'case'), (('beginning', 'move'), 'obl'), (('of', 'half'), 'case'), (('first', 'half'), 'amod'), (('half', 'beginning'), 'nmod'), ((';', 'end'), 'punct'), (('end', 'move'), 'dep'), (('else', 'end'), 'advmod'), (('forward', 'end'), 'advmod'), ((':=', 'forward'), 'punct'), (('forward', 'end'), 'advmod'), (('+', '1'), 'cc'), (('1', 'forward'), 'conj'), ((';', 'forward'), 'punct'), ((':', 'E'), 'punct'), ((':', 'E'), 'punct'), ((':', 'E'), 'punct'), (('E', '1'), 'appos'), ((':', 'E'), 'punct'), ((':', 'E'), 'punct'), (('=', 'E'), 'punct'), ((':', 'Mi'), 'punct'), ((':', 'Mi'), 'punct'), (('Mi', 'E'), 'dep'), ((':', 'Mi'), 'punct'), (('*', 'Mi'), 'punct'), ((':', 'Mi'), 'punct'), ((':', 'C'), 'punct'), ((':', 'C'), 'punct'), (('C', 'Mi'), 'appos'), ((':', 'C'), 'punct'), (('*', 'C'), 'punct'), ((':', 'C'), 'punct'), (('*', 'C'), 'punct'), ((':', 'eof'), 'punct'), (('2', 'C'), 'nummod'), ((':', 'eof'), 'punct'), (('eof', '2'), 'appos'), ((':', 'eof'), 'punct'), ((':', 'eof'), 'punct'), ((':', 'lexeme_beginnig'), 'punct'), (('forward', 'lexeme_beginnig'), 'amod'), (('lexeme_beginnig', 'eof'), 'appos'), (('forward', 'lexeme_beginnig'), 'advmod'), (('forward', 'lexeme_beginnig'), 'advmod'), ((':', 'C'), 'punct'), (('C', 'lexeme_beginnig'), 'appos'), ((':', 'C'), 'punct'), (('*', 'C'), 'punct'), ((':', 'C'), 'punct'), (('*', 'C'), 'punct'), ((':', 'eof'), 'punct'), (('2', 'C'), 'nummod'), ((':', 'eof'), 'punct'), (('eof', '2'), 'appos'), ((':', 'eof'), 'punct'), ((':', 'eof'), 'punct'), ((':', 'Prof.'), 'punct'), (('Prof.', 'Kagathara'), 'compound'), (('Dixita', 'Kagathara'), 'compound'), (('B', 'Kagathara'), 'compound'), (('Kagathara', '#'), 'compound'), (('#', 'eof'), 'appos'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', '#'), 'appos'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', '#'), 'appos'), (('2', 'Unit'), 'nummod'), (('–', 'Sentinels'), 'punct'), (('Lexical', 'Analyzer'), 'amod'), (('Analyzer', 'Sentinels'), 'compound'), (('‹#›', 'Sentinels'), 'compound'), (('Sentinels', 'Unit'), 'appos')]

 Named Entities are: 
>> [('second', 'ORDINAL'), ('half', 'CARDINAL'), ('first', 'ORDINAL'), ('Mi', 'PERSON'), ('2', 'CARDINAL'), ('2', 'CARDINAL'), ('2170701', 'CARDINAL'), ('2', 'CARDINAL'), ('first half', 'DATE'), ('second half', 'DATE'), ('1', 'CARDINAL'), ('end of second half', 'TIME'), ('first half', 'TIME'), ('first', 'ORDINAL'), ('+ 1', 'CARDINAL'), ('2', 'CARDINAL'), ('2', 'CARDINAL'), ('#2170701', 'CARDINAL'), ('2', 'CARDINAL')]

========================== Sentence 25 ===========================

 In buffer pairs we must check, each time we move the forward pointer that we have not moved off one of the buffers. 

Tokens are: 
>> ['In', 'buffer', 'pairs', 'we', 'must', 'check', ',', 'each', 'time', 'we', 'move', 'the', 'forward', 'pointer', 'that', 'we', 'have', 'not', 'moved', 'off', 'one', 'of', 'the', 'buffers', '.'] 

 UPOS tags are: 
>> [('In', 'ADP'), ('buffer', 'NOUN'), ('pairs', 'NOUN'), ('we', 'PRON'), ('must', 'AUX'), ('check', 'VERB'), (',', 'PUNCT'), ('each', 'DET'), ('time', 'NOUN'), ('we', 'PRON'), ('move', 'VERB'), ('the', 'DET'), ('forward', 'ADJ'), ('pointer', 'NOUN'), ('that', 'PRON'), ('we', 'PRON'), ('have', 'AUX'), ('not', 'PART'), ('moved', 'VERB'), ('off', 'ADP'), ('one', 'NUM'), ('of', 'ADP'), ('the', 'DET'), ('buffers', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('In', 'IN'), ('buffer', 'NN'), ('pairs', 'NNS'), ('we', 'PRP'), ('must', 'MD'), ('check', 'VB'), (',', ','), ('each', 'DT'), ('time', 'NN'), ('we', 'PRP'), ('move', 'VBP'), ('the', 'DT'), ('forward', 'JJ'), ('pointer', 'NN'), ('that', 'WDT'), ('we', 'PRP'), ('have', 'VBP'), ('not', 'RB'), ('moved', 'VBN'), ('off', 'RP'), ('one', 'CD'), ('of', 'IN'), ('the', 'DT'), ('buffers', 'NNS'), ('.', '.')] 

 Lemmas are: 
>> [('In', 'in'), ('buffer', 'buffer'), ('pairs', 'pair'), ('we', 'we'), ('must', 'must'), ('check', 'check'), (',', ','), ('each', 'each'), ('time', 'time'), ('we', 'we'), ('move', 'move'), ('the', 'the'), ('forward', 'forward'), ('pointer', 'pointer'), ('that', 'that'), ('we', 'we'), ('have', 'have'), ('not', 'not'), ('moved', 'move'), ('off', 'off'), ('one', 'one'), ('of', 'of'), ('the', 'the'), ('buffers', 'buffer'), ('.', '.')] 

 Dependency tags are: 
>> [(('In', 'pairs'), 'case'), (('buffer', 'pairs'), 'compound'), (('pairs', 'check'), 'obl'), (('we', 'check'), 'nsubj'), (('must', 'check'), 'aux'), (('check', 'root'), 'root'), ((',', 'check'), 'punct'), (('each', 'time'), 'det'), (('time', 'check'), 'obl:tmod'), (('we', 'move'), 'nsubj'), (('move', 'time'), 'acl:relcl'), (('the', 'pointer'), 'det'), (('forward', 'pointer'), 'amod'), (('pointer', 'move'), 'obj'), (('that', 'moved'), 'obj'), (('we', 'moved'), 'nsubj'), (('have', 'moved'), 'aux'), (('not', 'moved'), 'advmod'), (('moved', 'pointer'), 'acl:relcl'), (('off', 'moved'), 'compound:prt'), (('one', 'moved'), 'obj'), (('of', 'buffers'), 'case'), (('the', 'buffers'), 'det'), (('buffers', 'one'), 'nmod'), (('.', 'check'), 'punct')]

 Named Entities are: 
>> [('one', 'CARDINAL')]

========================== Sentence 26 ===========================

 Thus, for each character read, we make two tests. 

Tokens are: 
>> ['Thus', ',', 'for', 'each', 'character', 'read', ',', 'we', 'make', 'two', 'tests', '.'] 

 UPOS tags are: 
>> [('Thus', 'ADV'), (',', 'PUNCT'), ('for', 'ADP'), ('each', 'DET'), ('character', 'NOUN'), ('read', 'VERB'), (',', 'PUNCT'), ('we', 'PRON'), ('make', 'VERB'), ('two', 'NUM'), ('tests', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Thus', 'RB'), (',', ','), ('for', 'IN'), ('each', 'DT'), ('character', 'NN'), ('read', 'VBN'), (',', ','), ('we', 'PRP'), ('make', 'VBP'), ('two', 'CD'), ('tests', 'NNS'), ('.', '.')] 

 Lemmas are: 
>> [('Thus', 'thus'), (',', ','), ('for', 'for'), ('each', 'each'), ('character', 'character'), ('read', 'read'), (',', ','), ('we', 'we'), ('make', 'make'), ('two', 'two'), ('tests', 'test'), ('.', '.')] 

 Dependency tags are: 
>> [(('Thus', 'make'), 'advmod'), ((',', 'make'), 'punct'), (('for', 'read'), 'mark'), (('each', 'character'), 'det'), (('character', 'read'), 'nsubj'), (('read', 'make'), 'advcl'), ((',', 'make'), 'punct'), (('we', 'make'), 'nsubj'), (('make', 'root'), 'root'), (('two', 'tests'), 'nummod'), (('tests', 'make'), 'obj'), (('.', 'make'), 'punct')]

 Named Entities are: 
>> [('two', 'CARDINAL')]

========================== Sentence 27 ===========================

 We can combine the buffer-end test with the test for the current character. 

Tokens are: 
>> ['We', 'can', 'combine', 'the', 'buffer', '-', 'end', 'test', 'with', 'the', 'test', 'for', 'the', 'current', 'character', '.'] 

 UPOS tags are: 
>> [('We', 'PRON'), ('can', 'AUX'), ('combine', 'VERB'), ('the', 'DET'), ('buffer', 'NOUN'), ('-', 'PUNCT'), ('end', 'NOUN'), ('test', 'NOUN'), ('with', 'ADP'), ('the', 'DET'), ('test', 'NOUN'), ('for', 'ADP'), ('the', 'DET'), ('current', 'ADJ'), ('character', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('We', 'PRP'), ('can', 'MD'), ('combine', 'VB'), ('the', 'DT'), ('buffer', 'NN'), ('-', 'HYPH'), ('end', 'NN'), ('test', 'NN'), ('with', 'IN'), ('the', 'DT'), ('test', 'NN'), ('for', 'IN'), ('the', 'DT'), ('current', 'JJ'), ('character', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('We', 'we'), ('can', 'can'), ('combine', 'combine'), ('the', 'the'), ('buffer', 'buffer'), ('-', '-'), ('end', 'end'), ('test', 'test'), ('with', 'with'), ('the', 'the'), ('test', 'test'), ('for', 'for'), ('the', 'the'), ('current', 'current'), ('character', 'character'), ('.', '.')] 

 Dependency tags are: 
>> [(('We', 'combine'), 'nsubj'), (('can', 'combine'), 'aux'), (('combine', 'root'), 'root'), (('the', 'test'), 'det'), (('buffer', 'end'), 'compound'), (('-', 'end'), 'punct'), (('end', 'test'), 'compound'), (('test', 'combine'), 'obj'), (('with', 'test'), 'case'), (('the', 'test'), 'det'), (('test', 'combine'), 'obl'), (('for', 'character'), 'case'), (('the', 'character'), 'det'), (('current', 'character'), 'amod'), (('character', 'test'), 'nmod'), (('.', 'combine'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 28 ===========================

 We can reduce the two tests to one if we extend each buffer to hold a sentinel character at the end. 

Tokens are: 
>> ['We', 'can', 'reduce', 'the', 'two', 'tests', 'to', 'one', 'if', 'we', 'extend', 'each', 'buffer', 'to', 'hold', 'a', 'sentinel', 'character', 'at', 'the', 'end', '.'] 

 UPOS tags are: 
>> [('We', 'PRON'), ('can', 'AUX'), ('reduce', 'VERB'), ('the', 'DET'), ('two', 'NUM'), ('tests', 'NOUN'), ('to', 'ADP'), ('one', 'NUM'), ('if', 'SCONJ'), ('we', 'PRON'), ('extend', 'VERB'), ('each', 'DET'), ('buffer', 'NOUN'), ('to', 'PART'), ('hold', 'VERB'), ('a', 'DET'), ('sentinel', 'ADJ'), ('character', 'NOUN'), ('at', 'ADP'), ('the', 'DET'), ('end', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('We', 'PRP'), ('can', 'MD'), ('reduce', 'VB'), ('the', 'DT'), ('two', 'CD'), ('tests', 'NNS'), ('to', 'IN'), ('one', 'CD'), ('if', 'IN'), ('we', 'PRP'), ('extend', 'VBP'), ('each', 'DT'), ('buffer', 'NN'), ('to', 'TO'), ('hold', 'VB'), ('a', 'DT'), ('sentinel', 'JJ'), ('character', 'NN'), ('at', 'IN'), ('the', 'DT'), ('end', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('We', 'we'), ('can', 'can'), ('reduce', 'reduce'), ('the', 'the'), ('two', 'two'), ('tests', 'test'), ('to', 'to'), ('one', 'one'), ('if', 'if'), ('we', 'we'), ('extend', 'extend'), ('each', 'each'), ('buffer', 'buffer'), ('to', 'to'), ('hold', 'hold'), ('a', 'a'), ('sentinel', 'sentinel'), ('character', 'character'), ('at', 'at'), ('the', 'the'), ('end', 'end'), ('.', '.')] 

 Dependency tags are: 
>> [(('We', 'reduce'), 'nsubj'), (('can', 'reduce'), 'aux'), (('reduce', 'root'), 'root'), (('the', 'tests'), 'det'), (('two', 'tests'), 'nummod'), (('tests', 'reduce'), 'obj'), (('to', 'one'), 'case'), (('one', 'reduce'), 'obl'), (('if', 'extend'), 'mark'), (('we', 'extend'), 'nsubj'), (('extend', 'reduce'), 'advcl'), (('each', 'buffer'), 'det'), (('buffer', 'extend'), 'obj'), (('to', 'hold'), 'mark'), (('hold', 'extend'), 'advcl'), (('a', 'character'), 'det'), (('sentinel', 'character'), 'amod'), (('character', 'hold'), 'obj'), (('at', 'end'), 'case'), (('the', 'end'), 'det'), (('end', 'hold'), 'obl'), (('.', 'reduce'), 'punct')]

 Named Entities are: 
>> [('two', 'CARDINAL')]

========================== Sentence 29 ===========================

 The sentinel is a special character that cannot be part of the source program, and a natural choice is the character EOF.  :  : E :  : = :  : Mi : * : eof  : C: * : * : 2 :  eof : : eof        forward       lexeme_beginnig    Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Sentinels  forward  := forward + 1; 	if forward  = eof then begin 		if forward at end of first half then begin 			reload second half; 			forward  := forward + 1; 		end	 		else if forward at the second half then begin 			reload first half; 			move forward to beginning of first half; 		end 		else terminate lexical analysis; 	end  :  : E :  : = :  : Mi : * : : C: * : * : 2 :  eof : : eof       lexeme_beginnig        forward eof        forward        forward : C: * : * : 2 :  eof : : eof    Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Specification of tokens        Strings and languages  	Term	Definition  	Prefix of s	A string obtained by removing zero or more trailing symbol of string S. e.g.---.-, ban is prefix of banana. 

Tokens are: 
>> ['The', 'sentinel', 'is', 'a', 'special', 'character', 'that', 'cannot', 'be', 'part', 'of', 'the', 'source', 'program', ',', 'and', 'a', 'natural', 'choice', 'is', 'the', 'character', 'EOF', '.', ':', ':', 'E', ':', ':', '=', ':', ':', 'Mi', ':', '*', ':', 'eof', ':', 'C', ':', '*', ':', '*', ':', '2', ':', 'eof', ':', ':', 'eof', 'forward', 'lexeme_beginnig', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '2', '–', 'Lexical', 'Analyzer', '‹#›', 'Sentinels', 'forward', ':=', 'forward', '+', '1', ';', 'if', 'forward', '=', 'eof', 'then', 'begin', 'if', 'forward', 'at', 'end', 'of', 'first', 'half', 'then', 'begin', 'reload', 'second', 'half', ';', 'forward', ':=', 'forward', '+', '1', ';', 'end', 'else', 'if', 'forward', 'at', 'the', 'second', 'half', 'then', 'begin', 'reload', 'first', 'half', ';', 'move', 'forward', 'to', 'beginning', 'of', 'first', 'half', ';', 'end', 'else', 'terminate', 'lexical', 'analysis', ';', 'end', ':', ':', 'E', ':', ':', '=', ':', ':', 'Mi', ':', '*', ':', ':', 'C', ':', '*', ':', '*', ':', '2', ':', 'eof', ':', ':', 'eof', 'lexeme_beginnig', 'forward', 'eof', 'forward', 'forward', ':', 'C', ':', '*', ':', '*', ':', '2', ':', 'eof', ':', ':', 'eof', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '2', '–', 'Lexical', 'Analyzer', '‹#›', 'Specification', 'of', 'tokens', 'Strings', 'and', 'languages', 'Term', 'Definition', 'Prefix', 'of', 's', 'A', 'string', 'obtained', 'by', 'removing', 'zero', 'or', 'more', 'trailing', 'symbol', 'of', 'string', 'S.', 'e.g.', '---.', '-', ',', 'ban', 'is', 'prefix', 'of', 'banana', '.'] 

 UPOS tags are: 
>> [('The', 'DET'), ('sentinel', 'NOUN'), ('is', 'AUX'), ('a', 'DET'), ('special', 'ADJ'), ('character', 'NOUN'), ('that', 'PRON'), ('cannot', 'AUX'), ('be', 'AUX'), ('part', 'NOUN'), ('of', 'ADP'), ('the', 'DET'), ('source', 'NOUN'), ('program', 'NOUN'), (',', 'PUNCT'), ('and', 'CCONJ'), ('a', 'DET'), ('natural', 'ADJ'), ('choice', 'NOUN'), ('is', 'AUX'), ('the', 'DET'), ('character', 'NOUN'), ('EOF', 'NOUN'), ('.', 'PUNCT'), (':', 'PUNCT'), (':', 'PUNCT'), ('E', 'NOUN'), (':', 'PUNCT'), (':', 'PUNCT'), ('=', 'SYM'), (':', 'PUNCT'), (':', 'PUNCT'), ('Mi', 'NOUN'), (':', 'PUNCT'), ('*', 'PUNCT'), (':', 'PUNCT'), ('eof', 'NOUN'), (':', 'PUNCT'), ('C', 'NOUN'), (':', 'PUNCT'), ('*', 'PUNCT'), (':', 'PUNCT'), ('*', 'PUNCT'), (':', 'PUNCT'), ('2', 'NUM'), (':', 'PUNCT'), ('eof', 'NOUN'), (':', 'PUNCT'), (':', 'PUNCT'), ('eof', 'NOUN'), ('forward', 'ADJ'), ('lexeme_beginnig', 'NOUN'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'ADJ'), ('Analyzer', 'NOUN'), ('‹#›', 'NOUN'), ('Sentinels', 'NOUN'), ('forward', 'ADV'), (':=', 'SYM'), ('forward', 'ADV'), ('+', 'SYM'), ('1', 'NUM'), (';', 'PUNCT'), ('if', 'SCONJ'), ('forward', 'ADV'), ('=', 'SYM'), ('eof', 'NOUN'), ('then', 'ADV'), ('begin', 'VERB'), ('if', 'SCONJ'), ('forward', 'ADV'), ('at', 'ADP'), ('end', 'NOUN'), ('of', 'ADP'), ('first', 'ADJ'), ('half', 'NOUN'), ('then', 'ADV'), ('begin', 'VERB'), ('reload', 'VERB'), ('second', 'ADJ'), ('half', 'NOUN'), (';', 'PUNCT'), ('forward', 'ADV'), (':=', 'SYM'), ('forward', 'ADV'), ('+', 'SYM'), ('1', 'NUM'), (';', 'PUNCT'), ('end', 'NOUN'), ('else', 'ADV'), ('if', 'SCONJ'), ('forward', 'ADV'), ('at', 'ADP'), ('the', 'DET'), ('second', 'ADJ'), ('half', 'NOUN'), ('then', 'ADV'), ('begin', 'VERB'), ('reload', 'VERB'), ('first', 'ADJ'), ('half', 'NOUN'), (';', 'PUNCT'), ('move', 'VERB'), ('forward', 'ADV'), ('to', 'ADP'), ('beginning', 'NOUN'), ('of', 'ADP'), ('first', 'ADJ'), ('half', 'NOUN'), (';', 'PUNCT'), ('end', 'NOUN'), ('else', 'ADV'), ('terminate', 'VERB'), ('lexical', 'ADJ'), ('analysis', 'NOUN'), (';', 'PUNCT'), ('end', 'NOUN'), (':', 'PUNCT'), (':', 'PUNCT'), ('E', 'NOUN'), (':', 'PUNCT'), (':', 'PUNCT'), ('=', 'SYM'), (':', 'PUNCT'), (':', 'PUNCT'), ('Mi', 'NOUN'), (':', 'PUNCT'), ('*', 'PUNCT'), (':', 'PUNCT'), (':', 'PUNCT'), ('C', 'NOUN'), (':', 'PUNCT'), ('*', 'PUNCT'), (':', 'PUNCT'), ('*', 'PUNCT'), (':', 'PUNCT'), ('2', 'NUM'), (':', 'PUNCT'), ('eof', 'NOUN'), (':', 'PUNCT'), (':', 'PUNCT'), ('eof', 'NOUN'), ('lexeme_beginnig', 'NOUN'), ('forward', 'ADJ'), ('eof', 'NOUN'), ('forward', 'ADV'), ('forward', 'ADV'), (':', 'PUNCT'), ('C', 'NOUN'), (':', 'PUNCT'), ('*', 'PUNCT'), (':', 'PUNCT'), ('*', 'PUNCT'), (':', 'PUNCT'), ('2', 'NUM'), (':', 'PUNCT'), ('eof', 'NOUN'), (':', 'PUNCT'), (':', 'PUNCT'), ('eof', 'NOUN'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'PUNCT'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'SYM'), ('Lexical', 'ADJ'), ('Analyzer', 'NOUN'), ('‹#›', 'NOUN'), ('Specification', 'NOUN'), ('of', 'ADP'), ('tokens', 'NOUN'), ('Strings', 'NOUN'), ('and', 'CCONJ'), ('languages', 'NOUN'), ('Term', 'PROPN'), ('Definition', 'PROPN'), ('Prefix', 'PROPN'), ('of', 'ADP'), ('s', 'PART'), ('A', 'DET'), ('string', 'NOUN'), ('obtained', 'VERB'), ('by', 'SCONJ'), ('removing', 'VERB'), ('zero', 'NUM'), ('or', 'CCONJ'), ('more', 'ADV'), ('trailing', 'VERB'), ('symbol', 'NOUN'), ('of', 'ADP'), ('string', 'NOUN'), ('S.', 'NOUN'), ('e.g.', 'ADV'), ('---.', 'NOUN'), ('-', 'PUNCT'), (',', 'PUNCT'), ('ban', 'NOUN'), ('is', 'AUX'), ('prefix', 'NOUN'), ('of', 'ADP'), ('banana', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('The', 'DT'), ('sentinel', 'NN'), ('is', 'VBZ'), ('a', 'DT'), ('special', 'JJ'), ('character', 'NN'), ('that', 'WDT'), ('cannot', 'MD'), ('be', 'VB'), ('part', 'NN'), ('of', 'IN'), ('the', 'DT'), ('source', 'NN'), ('program', 'NN'), (',', ','), ('and', 'CC'), ('a', 'DT'), ('natural', 'JJ'), ('choice', 'NN'), ('is', 'VBZ'), ('the', 'DT'), ('character', 'NN'), ('EOF', 'NN'), ('.', '.'), (':', ':'), (':', ':'), ('E', 'NN'), (':', ':'), (':', ':'), ('=', 'SYM'), (':', ':'), (':', ':'), ('Mi', 'NN'), (':', ':'), ('*', 'NFP'), (':', ':'), ('eof', 'NN'), (':', ':'), ('C', 'NN'), (':', ':'), ('*', 'NFP'), (':', ':'), ('*', 'NFP'), (':', ':'), ('2', 'CD'), (':', ':'), ('eof', 'NN'), (':', ':'), (':', ':'), ('eof', 'NN'), ('forward', 'JJ'), ('lexeme_beginnig', 'NN'), ('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('2', 'CD'), ('–', ':'), ('Lexical', 'JJ'), ('Analyzer', 'NN'), ('‹#›', 'NN'), ('Sentinels', 'NNS'), ('forward', 'RB'), (':=', 'SYM'), ('forward', 'RB'), ('+', 'SYM'), ('1', 'CD'), (';', ':'), ('if', 'IN'), ('forward', 'RB'), ('=', 'SYM'), ('eof', 'NN'), ('then', 'RB'), ('begin', 'VB'), ('if', 'IN'), ('forward', 'RB'), ('at', 'IN'), ('end', 'NN'), ('of', 'IN'), ('first', 'JJ'), ('half', 'NN'), ('then', 'RB'), ('begin', 'VB'), ('reload', 'VB'), ('second', 'JJ'), ('half', 'NN'), (';', ':'), ('forward', 'RB'), (':=', 'SYM'), ('forward', 'RB'), ('+', 'SYM'), ('1', 'CD'), (';', ':'), ('end', 'NN'), ('else', 'RB'), ('if', 'IN'), ('forward', 'RB'), ('at', 'IN'), ('the', 'DT'), ('second', 'JJ'), ('half', 'NN'), ('then', 'RB'), ('begin', 'VB'), ('reload', 'VB'), ('first', 'JJ'), ('half', 'NN'), (';', ':'), ('move', 'VB'), ('forward', 'RB'), ('to', 'IN'), ('beginning', 'NN'), ('of', 'IN'), ('first', 'JJ'), ('half', 'NN'), (';', ':'), ('end', 'NN'), ('else', 'RB'), ('terminate', 'VB'), ('lexical', 'JJ'), ('analysis', 'NN'), (';', ':'), ('end', 'NN'), (':', ':'), (':', ':'), ('E', 'NN'), (':', ':'), (':', ':'), ('=', 'SYM'), (':', ':'), (':', ':'), ('Mi', 'NN'), (':', ':'), ('*', 'NFP'), (':', ':'), (':', ':'), ('C', 'NN'), (':', ':'), ('*', 'NFP'), (':', ':'), ('*', 'NFP'), (':', ':'), ('2', 'CD'), (':', ':'), ('eof', 'NN'), (':', ':'), (':', ':'), ('eof', 'NN'), ('lexeme_beginnig', 'NN'), ('forward', 'JJ'), ('eof', 'NN'), ('forward', 'RB'), ('forward', 'RB'), (':', ':'), ('C', 'NN'), (':', ':'), ('*', 'NFP'), (':', ':'), ('*', 'NFP'), (':', ':'), ('2', 'CD'), (':', ':'), ('eof', 'NN'), (':', ':'), (':', ':'), ('eof', 'NN'), ('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', ','), ('Unit', 'NN'), ('2', 'CD'), ('–', 'SYM'), ('Lexical', 'JJ'), ('Analyzer', 'NN'), ('‹#›', 'NN'), ('Specification', 'NN'), ('of', 'IN'), ('tokens', 'NNS'), ('Strings', 'NNS'), ('and', 'CC'), ('languages', 'NNS'), ('Term', 'NNP'), ('Definition', 'NNP'), ('Prefix', 'NNP'), ('of', 'IN'), ('s', 'POS'), ('A', 'DT'), ('string', 'NN'), ('obtained', 'VBN'), ('by', 'IN'), ('removing', 'VBG'), ('zero', 'CD'), ('or', 'CC'), ('more', 'RBR'), ('trailing', 'VBG'), ('symbol', 'NN'), ('of', 'IN'), ('string', 'NN'), ('S.', 'NN'), ('e.g.', 'FW'), ('---.', 'NN'), ('-', ':'), (',', ','), ('ban', 'NN'), ('is', 'VBZ'), ('prefix', 'NN'), ('of', 'IN'), ('banana', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('The', 'the'), ('sentinel', 'sentinel'), ('is', 'be'), ('a', 'a'), ('special', 'special'), ('character', 'character'), ('that', 'that'), ('cannot', 'cannot'), ('be', 'be'), ('part', 'part'), ('of', 'of'), ('the', 'the'), ('source', 'source'), ('program', 'program'), (',', ','), ('and', 'and'), ('a', 'a'), ('natural', 'natural'), ('choice', 'choice'), ('is', 'be'), ('the', 'the'), ('character', 'character'), ('EOF', 'eof'), ('.', '.'), (':', ':'), (':', ':'), ('E', 'e'), (':', ':'), (':', ':'), ('=', '='), (':', ':'), (':', ':'), ('Mi', 'mi'), (':', ':'), ('*', '*'), (':', ':'), ('eof', 'eof'), (':', ':'), ('C', 'c'), (':', ':'), ('*', '*'), (':', ':'), ('*', '*'), (':', ':'), ('2', '2'), (':', ':'), ('eof', 'eof'), (':', ':'), (':', ':'), ('eof', 'eof'), ('forward', 'forward'), ('lexeme_beginnig', 'lexeme_beginnig'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('2', '2'), ('–', '-'), ('Lexical', 'lexical'), ('Analyzer', 'analyzer'), ('‹#›', '‹#›'), ('Sentinels', 'sentinel'), ('forward', 'forward'), (':=', ':='), ('forward', 'forward'), ('+', '+'), ('1', '1'), (';', ';'), ('if', 'if'), ('forward', 'forward'), ('=', '='), ('eof', 'eof'), ('then', 'then'), ('begin', 'begin'), ('if', 'if'), ('forward', 'forward'), ('at', 'at'), ('end', 'end'), ('of', 'of'), ('first', 'first'), ('half', 'half'), ('then', 'then'), ('begin', 'begin'), ('reload', 'reload'), ('second', 'second'), ('half', 'half'), (';', ';'), ('forward', 'forward'), (':=', ':='), ('forward', 'forward'), ('+', '+'), ('1', '1'), (';', ';'), ('end', 'end'), ('else', 'else'), ('if', 'if'), ('forward', 'forward'), ('at', 'at'), ('the', 'the'), ('second', 'second'), ('half', 'half'), ('then', 'then'), ('begin', 'begin'), ('reload', 'reload'), ('first', 'first'), ('half', 'half'), (';', ';'), ('move', 'move'), ('forward', 'forward'), ('to', 'to'), ('beginning', 'beginning'), ('of', 'of'), ('first', 'first'), ('half', 'half'), (';', ';'), ('end', 'end'), ('else', 'else'), ('terminate', 'terminate'), ('lexical', 'lexical'), ('analysis', 'analysis'), (';', ';'), ('end', 'end'), (':', ':'), (':', ':'), ('E', 'e'), (':', ':'), (':', ':'), ('=', '='), (':', ':'), (':', ':'), ('Mi', 'mi'), (':', ':'), ('*', '*'), (':', ':'), (':', ':'), ('C', 'c'), (':', ':'), ('*', '*'), (':', ':'), ('*', '*'), (':', ':'), ('2', '2'), (':', ':'), ('eof', 'eof'), (':', ':'), (':', ':'), ('eof', 'eof'), ('lexeme_beginnig', 'lexeme_beginnig'), ('forward', 'forward'), ('eof', 'eof'), ('forward', 'forward'), ('forward', 'forward'), (':', ':'), ('C', 'c'), (':', ':'), ('*', '*'), (':', ':'), ('*', '*'), (':', ':'), ('2', '2'), (':', ':'), ('eof', 'eof'), (':', ':'), (':', ':'), ('eof', 'eof'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', "''"), ('Unit', 'unit'), ('2', '2'), ('–', '-'), ('Lexical', 'lexical'), ('Analyzer', 'analyzer'), ('‹#›', '‹#›'), ('Specification', 'specification'), ('of', 'of'), ('tokens', 'token'), ('Strings', 'string'), ('and', 'and'), ('languages', 'language'), ('Term', 'term'), ('Definition', 'Definition'), ('Prefix', 'Prefix'), ('of', 'of'), ('s', "'s"), ('A', 'a'), ('string', 'string'), ('obtained', 'obtain'), ('by', 'by'), ('removing', 'remove'), ('zero', 'zero'), ('or', 'or'), ('more', 'more'), ('trailing', 'trail'), ('symbol', 'symbol'), ('of', 'of'), ('string', 'string'), ('S.', 'S.'), ('e.g.', 'e.g.'), ('---.', '---.'), ('-', '-'), (',', ','), ('ban', 'ban'), ('is', 'be'), ('prefix', 'prefix'), ('of', 'of'), ('banana', 'banana'), ('.', '.')] 

 Dependency tags are: 
>> [(('The', 'sentinel'), 'det'), (('sentinel', 'character'), 'nsubj'), (('is', 'character'), 'cop'), (('a', 'character'), 'det'), (('special', 'character'), 'amod'), (('character', 'root'), 'root'), (('that', 'part'), 'nsubj'), (('cannot', 'part'), 'aux'), (('be', 'part'), 'cop'), (('part', 'character'), 'acl:relcl'), (('of', 'program'), 'case'), (('the', 'program'), 'det'), (('source', 'program'), 'compound'), (('program', 'part'), 'nmod'), ((',', 'EOF'), 'punct'), (('and', 'EOF'), 'cc'), (('a', 'choice'), 'det'), (('natural', 'choice'), 'amod'), (('choice', 'EOF'), 'nsubj'), (('is', 'EOF'), 'cop'), (('the', 'EOF'), 'det'), (('character', 'EOF'), 'compound'), (('EOF', 'character'), 'conj'), (('.', 'EOF'), 'punct'), ((':', 'E'), 'punct'), ((':', 'E'), 'punct'), (('E', 'character'), 'dep'), ((':', 'E'), 'punct'), ((':', '='), 'punct'), (('=', 'E'), 'parataxis'), ((':', '='), 'punct'), ((':', 'Mi'), 'punct'), (('Mi', '='), 'dep'), ((':', 'Mi'), 'punct'), (('*', 'Mi'), 'punct'), ((':', 'eof'), 'punct'), (('eof', 'Mi'), 'dep'), ((':', 'eof'), 'punct'), (('C', 'eof'), 'dep'), ((':', 'C'), 'punct'), (('*', 'C'), 'punct'), ((':', 'character'), 'punct'), (('*', '2'), 'punct'), ((':', '2'), 'punct'), (('2', 'C'), 'dep'), ((':', '2'), 'punct'), (('eof', '2'), 'dep'), ((':', 'eof'), 'punct'), ((':', 'eof'), 'punct'), (('eof', 'lexeme_beginnig'), 'compound'), (('forward', 'lexeme_beginnig'), 'amod'), (('lexeme_beginnig', 'character'), 'parataxis'), (('Prof.', 'lexeme_beginnig'), 'compound'), (('Dixita', 'Kagathara'), 'compound'), (('B', 'Kagathara'), 'compound'), (('Kagathara', '#'), 'compound'), (('#', 'lexeme_beginnig'), 'compound'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', 'Unit'), 'compound'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', 'character'), 'conj'), (('2', 'Unit'), 'nummod'), (('–', 'character'), 'punct'), (('Lexical', 'Analyzer'), 'amod'), (('Analyzer', 'character'), 'conj'), (('‹#›', 'Sentinels'), 'compound'), (('Sentinels', 'Analyzer'), 'conj'), (('forward', ':='), 'advmod'), ((':=', 'character'), 'parataxis'), (('forward', ':='), 'advmod'), (('+', '1'), 'cc'), (('1', 'forward'), 'dep'), ((';', '='), 'punct'), (('if', '='), 'mark'), (('forward', '='), 'advmod'), (('=', '='), 'advcl'), (('eof', '='), 'obj'), (('then', 'begin'), 'advmod'), (('begin', '='), 'conj'), (('if', 'forward'), 'mark'), (('forward', 'begin'), 'advmod'), (('at', 'end'), 'case'), (('end', 'begin'), 'obl'), (('of', 'half'), 'case'), (('first', 'half'), 'amod'), (('half', 'end'), 'nmod'), (('then', 'begin'), 'advmod'), (('begin', 'begin'), 'conj'), (('reload', 'begin'), 'xcomp'), (('second', 'half'), 'amod'), (('half', 'reload'), 'obj'), ((';', 'forward'), 'punct'), (('forward', 'reload'), 'advmod'), ((':=', 'forward'), 'advmod'), (('forward', 'forward'), 'advmod'), (('+', '1'), 'cc'), (('1', ':='), 'conj'), ((';', 'end'), 'punct'), (('end', 'begin'), 'nsubj'), (('else', 'end'), 'advmod'), (('if', 'forward'), 'mark'), (('forward', 'begin'), 'advcl'), (('at', 'half'), 'case'), (('the', 'half'), 'det'), (('second', 'half'), 'amod'), (('half', 'forward'), 'obl'), (('then', 'begin'), 'advmod'), (('begin', 'character'), 'parataxis'), (('reload', 'begin'), 'xcomp'), (('first', 'half'), 'amod'), (('half', 'reload'), 'obj'), ((';', 'move'), 'punct'), (('move', 'begin'), 'conj'), (('forward', 'move'), 'advmod'), (('to', 'beginning'), 'case'), (('beginning', 'move'), 'obl'), (('of', 'half'), 'case'), (('first', 'half'), 'amod'), (('half', 'beginning'), 'nmod'), ((';', 'terminate'), 'punct'), (('end', 'terminate'), 'nsubj'), (('else', 'end'), 'advmod'), (('terminate', 'move'), 'parataxis'), (('lexical', 'analysis'), 'amod'), (('analysis', 'terminate'), 'obj'), ((';', 'end'), 'punct'), (('end', 'terminate'), 'dep'), ((':', 'end'), 'punct'), ((':', 'E'), 'punct'), (('E', 'end'), 'dep'), ((':', 'E'), 'punct'), ((':', '='), 'punct'), (('=', 'E'), 'parataxis'), ((':', '='), 'punct'), ((':', 'Mi'), 'punct'), (('Mi', '='), 'dep'), ((':', 'Mi'), 'punct'), (('*', 'Mi'), 'punct'), ((':', 'Mi'), 'punct'), ((':', 'C'), 'punct'), (('C', 'Mi'), 'dep'), ((':', 'C'), 'punct'), (('*', 'C'), 'punct'), ((':', 'C'), 'punct'), (('*', '2'), 'punct'), ((':', '2'), 'punct'), (('2', 'C'), 'dep'), ((':', '2'), 'punct'), (('eof', '2'), 'dep'), ((':', 'eof'), 'punct'), ((':', 'lexeme_beginnig'), 'punct'), (('eof', 'lexeme_beginnig'), 'compound'), (('lexeme_beginnig', 'eof'), 'compound'), (('forward', 'eof'), 'amod'), (('eof', 'eof'), 'appos'), (('forward', 'forward'), 'advmod'), (('forward', 'eof'), 'advmod'), ((':', 'C'), 'punct'), (('C', 'eof'), 'dep'), ((':', 'C'), 'punct'), (('*', 'C'), 'punct'), ((':', 'C'), 'punct'), (('*', '2'), 'punct'), ((':', '2'), 'punct'), (('2', 'C'), 'dep'), ((':', '2'), 'punct'), (('eof', '2'), 'dep'), ((':', 'eof'), 'punct'), ((':', 'eof'), 'punct'), (('eof', 'Prof.'), 'compound'), (('Prof.', 'eof'), 'compound'), (('Dixita', 'Kagathara'), 'compound'), (('B', 'Kagathara'), 'compound'), (('Kagathara', 'Prof.'), 'compound'), (('#', 'Prof.'), 'compound'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', '#'), 'appos'), ((')', 'CD'), 'punct'), (('\uf077', 'CD'), 'punct'), (('Unit', 'Kagathara'), 'compound'), (('2', 'Unit'), 'nummod'), (('–', 'Analyzer'), 'case'), (('Lexical', 'Analyzer'), 'amod'), (('Analyzer', 'Specification'), 'compound'), (('‹#›', 'Specification'), 'compound'), (('Specification', 'Unit'), 'nmod'), (('of', 'tokens'), 'case'), (('tokens', 'Specification'), 'nmod'), (('Strings', 'Specification'), 'nmod'), (('and', 'Definition'), 'cc'), (('languages', 'Definition'), 'compound'), (('Term', 'Definition'), 'compound'), (('Definition', 'Prefix'), 'compound'), (('Prefix', 'Specification'), 'conj'), (('of', 'string'), 'case'), (('s', 'Prefix'), 'case'), (('A', 'string'), 'det'), (('string', 'Prefix'), 'nmod'), (('obtained', 'string'), 'acl'), (('by', 'removing'), 'mark'), (('removing', 'obtained'), 'advcl'), (('zero', 'symbol'), 'nummod'), (('or', 'more'), 'cc'), (('more', 'zero'), 'conj'), (('trailing', 'symbol'), 'amod'), (('symbol', 'removing'), 'obj'), (('of', 'string'), 'case'), (('string', 'symbol'), 'nmod'), (('S.', 'string'), 'nummod'), (('e.g.', '---.'), 'advmod'), (('---.', 'string'), 'appos'), (('-', '---.'), 'punct'), ((',', 'prefix'), 'punct'), (('ban', 'prefix'), 'nsubj'), (('is', 'prefix'), 'cop'), (('prefix', '---.'), 'acl:relcl'), (('of', 'banana'), 'case'), (('banana', 'prefix'), 'nmod'), (('.', 'character'), 'punct')]

 Named Entities are: 
>> [('Mi', 'PERSON'), ('2', 'CARDINAL'), ('#2170701', 'CARDINAL'), ('2', 'CARDINAL'), ('first half', 'DATE'), ('second half', 'DATE'), ('1', 'CARDINAL'), ('the second half', 'TIME'), ('first half', 'DATE'), ('first', 'ORDINAL'), ('2', 'CARDINAL'), ('2', 'CARDINAL'), ('2170701', 'CARDINAL'), ('2', 'CARDINAL'), ('zero', 'CARDINAL')]

========================== Sentence 30 ===========================

 Suffix of S	A string obtained by removing zero or more leading symbol of string S. e.g.---.-, nana is suffix of banana. 

Tokens are: 
>> ['Suffix', 'of', 'S', 'A', 'string', 'obtained', 'by', 'removing', 'zero', 'or', 'more', 'leading', 'symbol', 'of', 'string', 'S.', 'e.g.', '---.', '-', ',', 'nana', 'is', 'suffix', 'of', 'banana', '.'] 

 UPOS tags are: 
>> [('Suffix', 'NOUN'), ('of', 'ADP'), ('S', 'PART'), ('A', 'DET'), ('string', 'NOUN'), ('obtained', 'VERB'), ('by', 'SCONJ'), ('removing', 'VERB'), ('zero', 'NUM'), ('or', 'CCONJ'), ('more', 'ADV'), ('leading', 'VERB'), ('symbol', 'NOUN'), ('of', 'ADP'), ('string', 'NOUN'), ('S.', 'NOUN'), ('e.g.', 'ADV'), ('---.', 'NOUN'), ('-', 'PUNCT'), (',', 'PUNCT'), ('nana', 'NOUN'), ('is', 'AUX'), ('suffix', 'NOUN'), ('of', 'ADP'), ('banana', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Suffix', 'NN'), ('of', 'IN'), ('S', 'POS'), ('A', 'DT'), ('string', 'NN'), ('obtained', 'VBN'), ('by', 'IN'), ('removing', 'VBG'), ('zero', 'CD'), ('or', 'CC'), ('more', 'RBR'), ('leading', 'VBG'), ('symbol', 'NN'), ('of', 'IN'), ('string', 'NN'), ('S.', 'NN'), ('e.g.', 'FW'), ('---.', 'NN'), ('-', ','), (',', ','), ('nana', 'NN'), ('is', 'VBZ'), ('suffix', 'NN'), ('of', 'IN'), ('banana', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('Suffix', 'suffix'), ('of', 'of'), ('S', "'s"), ('A', 'a'), ('string', 'string'), ('obtained', 'obtain'), ('by', 'by'), ('removing', 'remove'), ('zero', 'zero'), ('or', 'or'), ('more', 'more'), ('leading', 'lead'), ('symbol', 'symbol'), ('of', 'of'), ('string', 'string'), ('S.', 'S.'), ('e.g.', 'e.g.'), ('---.', '---.'), ('-', '-'), (',', ','), ('nana', 'nana'), ('is', 'be'), ('suffix', 'suffix'), ('of', 'of'), ('banana', 'banana'), ('.', '.')] 

 Dependency tags are: 
>> [(('Suffix', 'suffix'), 'nsubj'), (('of', 'string'), 'case'), (('S', 'of'), 'case'), (('A', 'string'), 'det'), (('string', 'Suffix'), 'nmod'), (('obtained', 'string'), 'acl'), (('by', 'removing'), 'mark'), (('removing', 'obtained'), 'advcl'), (('zero', 'symbol'), 'nummod'), (('or', 'more'), 'cc'), (('more', 'zero'), 'conj'), (('leading', 'symbol'), 'amod'), (('symbol', 'removing'), 'obj'), (('of', 'string'), 'case'), (('string', 'symbol'), 'nmod'), (('S.', 'string'), 'flat'), (('e.g.', '---.'), 'advmod'), (('---.', 'string'), 'appos'), (('-', 'suffix'), 'punct'), ((',', 'suffix'), 'punct'), (('nana', 'suffix'), 'nsubj'), (('is', 'suffix'), 'cop'), (('suffix', 'root'), 'root'), (('of', 'banana'), 'case'), (('banana', 'suffix'), 'nmod'), (('.', 'suffix'), 'punct')]

 Named Entities are: 
>> [('zero', 'CARDINAL')]

========================== Sentence 31 ===========================

 Sub string of S	A string obtained by removing prefix and suffix from S. e.g.---.-, nan is substring of banana  	Proper prefix, suffix and substring of S	Any nonempty string x that is respectively proper prefix, suffix or substring of S, such that s≠x. 

Tokens are: 
>> ['Sub', 'string', 'of', 'S', 'A', 'string', 'obtained', 'by', 'removing', 'prefix', 'and', 'suffix', 'from', 'S.', 'e.g.', '---.', '-', ',', 'nan', 'is', 'substring', 'of', 'banana', 'Proper', 'prefix', ',', 'suffix', 'and', 'substring', 'of', 'S', 'Any', 'nonempty', 'string', 'x', 'that', 'is', 'respectively', 'proper', 'prefix', ',', 'suffix', 'or', 'substring', 'of', 'S', ',', 'such', 'that', 's≠x', '.'] 

 UPOS tags are: 
>> [('Sub', 'ADJ'), ('string', 'NOUN'), ('of', 'ADP'), ('S', 'PART'), ('A', 'DET'), ('string', 'NOUN'), ('obtained', 'VERB'), ('by', 'SCONJ'), ('removing', 'VERB'), ('prefix', 'NOUN'), ('and', 'CCONJ'), ('suffix', 'NOUN'), ('from', 'ADP'), ('S.', 'PROPN'), ('e.g.', 'ADV'), ('---.', 'NOUN'), ('-', 'PUNCT'), (',', 'PUNCT'), ('nan', 'NOUN'), ('is', 'AUX'), ('substring', 'NOUN'), ('of', 'ADP'), ('banana', 'NOUN'), ('Proper', 'ADJ'), ('prefix', 'NOUN'), (',', 'PUNCT'), ('suffix', 'NOUN'), ('and', 'CCONJ'), ('substring', 'NOUN'), ('of', 'ADP'), ('S', 'PART'), ('Any', 'DET'), ('nonempty', 'ADJ'), ('string', 'NOUN'), ('x', 'NOUN'), ('that', 'PRON'), ('is', 'AUX'), ('respectively', 'ADV'), ('proper', 'ADJ'), ('prefix', 'NOUN'), (',', 'PUNCT'), ('suffix', 'NOUN'), ('or', 'CCONJ'), ('substring', 'NOUN'), ('of', 'ADP'), ('S', 'NOUN'), (',', 'PUNCT'), ('such', 'ADJ'), ('that', 'DET'), ('s≠x', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Sub', 'JJ'), ('string', 'NN'), ('of', 'IN'), ('S', 'POS'), ('A', 'DT'), ('string', 'NN'), ('obtained', 'VBN'), ('by', 'IN'), ('removing', 'VBG'), ('prefix', 'NN'), ('and', 'CC'), ('suffix', 'NN'), ('from', 'IN'), ('S.', 'NNP'), ('e.g.', 'FW'), ('---.', 'NN'), ('-', ','), (',', ','), ('nan', 'NN'), ('is', 'VBZ'), ('substring', 'NN'), ('of', 'IN'), ('banana', 'NN'), ('Proper', 'JJ'), ('prefix', 'NN'), (',', ','), ('suffix', 'NN'), ('and', 'CC'), ('substring', 'NN'), ('of', 'IN'), ('S', 'POS'), ('Any', 'DT'), ('nonempty', 'JJ'), ('string', 'NN'), ('x', 'NN'), ('that', 'WDT'), ('is', 'VBZ'), ('respectively', 'RB'), ('proper', 'JJ'), ('prefix', 'NN'), (',', ','), ('suffix', 'NN'), ('or', 'CC'), ('substring', 'NN'), ('of', 'IN'), ('S', 'NN'), (',', ','), ('such', 'JJ'), ('that', 'DT'), ('s≠x', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('Sub', 'sub'), ('string', 'string'), ('of', 'of'), ('S', "'s"), ('A', 'a'), ('string', 'string'), ('obtained', 'obtain'), ('by', 'by'), ('removing', 'remove'), ('prefix', 'prefix'), ('and', 'and'), ('suffix', 'suffix'), ('from', 'from'), ('S.', 'S.'), ('e.g.', 'e.g.'), ('---.', '---.'), ('-', '-'), (',', ','), ('nan', 'nan'), ('is', 'be'), ('substring', 'substring'), ('of', 'of'), ('banana', 'banana'), ('Proper', 'properlyper'), ('prefix', 'prefix'), (',', ','), ('suffix', 'suffix'), ('and', 'and'), ('substring', 'substring'), ('of', 'of'), ('S', "'s"), ('Any', 'any'), ('nonempty', 'nonempty'), ('string', 'string'), ('x', 'x'), ('that', 'that'), ('is', 'be'), ('respectively', 'respectively'), ('proper', 'proper'), ('prefix', 'prefix'), (',', ','), ('suffix', 'suffix'), ('or', 'or'), ('substring', 'substring'), ('of', 'of'), ('S', 's'), (',', ','), ('such', 'such'), ('that', 'that'), ('s≠x', 's≠x'), ('.', '.')] 

 Dependency tags are: 
>> [(('Sub', 'string'), 'amod'), (('string', 'substring'), 'nsubj'), (('of', 'string'), 'case'), (('S', 'of'), 'case'), (('A', 'string'), 'det'), (('string', 'string'), 'nmod'), (('obtained', 'string'), 'acl'), (('by', 'removing'), 'mark'), (('removing', 'obtained'), 'advcl'), (('prefix', 'removing'), 'obj'), (('and', 'suffix'), 'cc'), (('suffix', 'prefix'), 'conj'), (('from', 'S.'), 'case'), (('S.', 'removing'), 'obl'), (('e.g.', '---.'), 'advmod'), (('---.', 'S.'), 'appos'), (('-', 'string'), 'punct'), ((',', 'substring'), 'punct'), (('nan', 'substring'), 'nsubj'), (('is', 'substring'), 'cop'), (('substring', 'root'), 'root'), (('of', 'prefix'), 'case'), (('banana', 'prefix'), 'compound'), (('Proper', 'prefix'), 'amod'), (('prefix', 'substring'), 'nmod'), ((',', 'suffix'), 'punct'), (('suffix', 'prefix'), 'conj'), (('and', 'substring'), 'cc'), (('substring', 'prefix'), 'conj'), (('of', 'x'), 'case'), (('S', 'of'), 'case'), (('Any', 'x'), 'det'), (('nonempty', 'x'), 'amod'), (('string', 'x'), 'compound'), (('x', 'prefix'), 'nmod'), (('that', 'prefix'), 'nsubj'), (('is', 'prefix'), 'cop'), (('respectively', 'prefix'), 'advmod'), (('proper', 'prefix'), 'amod'), (('prefix', 'x'), 'acl:relcl'), ((',', 'suffix'), 'punct'), (('suffix', 'prefix'), 'conj'), (('or', 'substring'), 'cc'), (('substring', 'prefix'), 'conj'), (('of', 'S'), 'case'), (('S', 'substring'), 'nmod'), ((',', 'prefix'), 'punct'), (('such', 's≠x'), 'case'), (('that', 's≠x'), 'det'), (('s≠x', 'prefix'), 'nmod'), (('.', 'substring'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 32 ===========================

 Subsequence of S	A string obtained by removing zero or more not necessarily contiguous symbol from S. e.g.---.-, baaa is subsequence of banana. 

Tokens are: 
>> ['Subsequence', 'of', 'S', 'A', 'string', 'obtained', 'by', 'removing', 'zero', 'or', 'more', 'not', 'necessarily', 'contiguous', 'symbol', 'from', 'S.', 'e.g.', '---.', '-', ',', 'baaa', 'is', 'subsequence', 'of', 'banana', '.'] 

 UPOS tags are: 
>> [('Subsequence', 'NOUN'), ('of', 'ADP'), ('S', 'PART'), ('A', 'DET'), ('string', 'NOUN'), ('obtained', 'VERB'), ('by', 'SCONJ'), ('removing', 'VERB'), ('zero', 'NUM'), ('or', 'CCONJ'), ('more', 'ADV'), ('not', 'PART'), ('necessarily', 'ADV'), ('contiguous', 'ADJ'), ('symbol', 'NOUN'), ('from', 'ADP'), ('S.', 'PROPN'), ('e.g.', 'ADV'), ('---.', 'NOUN'), ('-', 'PUNCT'), (',', 'PUNCT'), ('baaa', 'PROPN'), ('is', 'AUX'), ('subsequence', 'NOUN'), ('of', 'ADP'), ('banana', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Subsequence', 'NN'), ('of', 'IN'), ('S', 'POS'), ('A', 'DT'), ('string', 'NN'), ('obtained', 'VBN'), ('by', 'IN'), ('removing', 'VBG'), ('zero', 'CD'), ('or', 'CC'), ('more', 'RBR'), ('not', 'RB'), ('necessarily', 'RB'), ('contiguous', 'JJ'), ('symbol', 'NN'), ('from', 'IN'), ('S.', 'NNP'), ('e.g.', 'FW'), ('---.', 'NN'), ('-', ','), (',', ','), ('baaa', 'NNP'), ('is', 'VBZ'), ('subsequence', 'NN'), ('of', 'IN'), ('banana', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('Subsequence', 'subsequence'), ('of', 'of'), ('S', "'s"), ('A', 'a'), ('string', 'string'), ('obtained', 'obtain'), ('by', 'by'), ('removing', 'remove'), ('zero', 'zero'), ('or', 'or'), ('more', 'more'), ('not', 'not'), ('necessarily', 'necessarily'), ('contiguous', 'contiguous'), ('symbol', 'symbol'), ('from', 'from'), ('S.', 'S.'), ('e.g.', 'e.g.'), ('---.', '---.'), ('-', '-'), (',', ','), ('baaa', 'baaa'), ('is', 'be'), ('subsequence', 'subsequence'), ('of', 'of'), ('banana', 'banana'), ('.', '.')] 

 Dependency tags are: 
>> [(('Subsequence', 'subsequence'), 'nsubj'), (('of', 'string'), 'case'), (('S', 'of'), 'case'), (('A', 'string'), 'det'), (('string', 'Subsequence'), 'nmod'), (('obtained', 'string'), 'acl'), (('by', 'removing'), 'mark'), (('removing', 'obtained'), 'advcl'), (('zero', 'symbol'), 'nummod'), (('or', 'more'), 'cc'), (('more', 'zero'), 'conj'), (('not', 'contiguous'), 'advmod'), (('necessarily', 'contiguous'), 'advmod'), (('contiguous', 'symbol'), 'amod'), (('symbol', 'removing'), 'obj'), (('from', 'S.'), 'case'), (('S.', 'symbol'), 'nmod'), (('e.g.', '---.'), 'advmod'), (('---.', 'S.'), 'appos'), (('-', 'subsequence'), 'punct'), ((',', 'subsequence'), 'punct'), (('baaa', 'subsequence'), 'nsubj'), (('is', 'subsequence'), 'cop'), (('subsequence', 'root'), 'root'), (('of', 'banana'), 'case'), (('banana', 'subsequence'), 'nmod'), (('.', 'subsequence'), 'punct')]

 Named Entities are: 
>> [('zero', 'CARDINAL')]

========================== Sentence 33 ===========================

 Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Exercise Write prefix, suffix, substring, proper prefix, proper suffix and subsequence of following string: 	String: Compiler     Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Operations on languages  	Operation	Definition  	Union of L and M Written L U M	  	Concatenation of L and M Written LM	  	Kleene closure of L  Written L∗	  	Positive closure of L  Written L+	     Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Regular Expression & Regular Definition        Regular expression 

Tokens are: 
>> ['Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '2', '–', 'Lexical', 'Analyzer', '‹#›', 'Exercise', 'Write', 'prefix', ',', 'suffix', ',', 'substring', ',', 'proper', 'prefix', ',', 'proper', 'suffix', 'and', 'subsequence', 'of', 'following', 'string', ':', 'String', ':', 'Compiler', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '2', '–', 'Lexical', 'Analyzer', '‹#›', 'Operations', 'on', 'languages', 'Operation', 'Definition', 'Union', 'of', 'L', 'and', 'M', 'Written', 'L', 'U', 'M', 'Concatenation', 'of', 'L', 'and', 'M', 'Written', 'LM', 'Kleene', 'closure', 'of', 'L', 'Written', 'L∗', 'Positive', 'closure', 'of', 'L', 'Written', 'L+', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '2', '–', 'Lexical', 'Analyzer', '‹#›', 'Regular', 'Expression', '&', 'Regular', 'Definition', 'Regular', 'expression'] 

 UPOS tags are: 
>> [('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'ADJ'), ('Analyzer', 'NOUN'), ('‹#›', 'NOUN'), ('Exercise', 'PROPN'), ('Write', 'PROPN'), ('prefix', 'NOUN'), (',', 'PUNCT'), ('suffix', 'NOUN'), (',', 'PUNCT'), ('substring', 'NOUN'), (',', 'PUNCT'), ('proper', 'ADJ'), ('prefix', 'NOUN'), (',', 'PUNCT'), ('proper', 'ADJ'), ('suffix', 'NOUN'), ('and', 'CCONJ'), ('subsequence', 'NOUN'), ('of', 'ADP'), ('following', 'VERB'), ('string', 'NOUN'), (':', 'PUNCT'), ('String', 'NOUN'), (':', 'PUNCT'), ('Compiler', 'PROPN'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'ADJ'), ('Analyzer', 'PROPN'), ('‹#›', 'PROPN'), ('Operations', 'PROPN'), ('on', 'ADP'), ('languages', 'NOUN'), ('Operation', 'PROPN'), ('Definition', 'PROPN'), ('Union', 'PROPN'), ('of', 'ADP'), ('L', 'PROPN'), ('and', 'CCONJ'), ('M', 'PROPN'), ('Written', 'VERB'), ('L', 'PROPN'), ('U', 'PROPN'), ('M', 'PROPN'), ('Concatenation', 'PROPN'), ('of', 'ADP'), ('L', 'PROPN'), ('and', 'CCONJ'), ('M', 'PROPN'), ('Written', 'VERB'), ('LM', 'PROPN'), ('Kleene', 'PROPN'), ('closure', 'NOUN'), ('of', 'ADP'), ('L', 'PROPN'), ('Written', 'VERB'), ('L∗', 'PROPN'), ('Positive', 'ADJ'), ('closure', 'NOUN'), ('of', 'ADP'), ('L', 'PROPN'), ('Written', 'VERB'), ('L+', 'PROPN'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'ADJ'), ('Analyzer', 'NOUN'), ('‹#›', 'PUNCT'), ('Regular', 'ADJ'), ('Expression', 'NOUN'), ('&', 'CCONJ'), ('Regular', 'ADJ'), ('Definition', 'NOUN'), ('Regular', 'ADJ'), ('expression', 'NOUN')] 

 XPOS tags are: 
>> [('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('2', 'CD'), ('–', ':'), ('Lexical', 'JJ'), ('Analyzer', 'NN'), ('‹#›', 'NN'), ('Exercise', 'NNP'), ('Write', 'NNP'), ('prefix', 'NN'), (',', ','), ('suffix', 'NN'), (',', ','), ('substring', 'NN'), (',', ','), ('proper', 'JJ'), ('prefix', 'NN'), (',', ','), ('proper', 'JJ'), ('suffix', 'NN'), ('and', 'CC'), ('subsequence', 'NN'), ('of', 'IN'), ('following', 'VBG'), ('string', 'NN'), (':', ':'), ('String', 'NN'), (':', ':'), ('Compiler', 'NNP'), ('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('2', 'CD'), ('–', ':'), ('Lexical', 'JJ'), ('Analyzer', 'NNP'), ('‹#›', 'NNP'), ('Operations', 'NNPS'), ('on', 'IN'), ('languages', 'NNS'), ('Operation', 'NNP'), ('Definition', 'NNP'), ('Union', 'NNP'), ('of', 'IN'), ('L', 'NNP'), ('and', 'CC'), ('M', 'NNP'), ('Written', 'VBN'), ('L', 'NNP'), ('U', 'NNP'), ('M', 'NNP'), ('Concatenation', 'NNP'), ('of', 'IN'), ('L', 'NNP'), ('and', 'CC'), ('M', 'NNP'), ('Written', 'VBN'), ('LM', 'NNP'), ('Kleene', 'NNP'), ('closure', 'NN'), ('of', 'IN'), ('L', 'NNP'), ('Written', 'VBN'), ('L∗', 'NNP'), ('Positive', 'JJ'), ('closure', 'NN'), ('of', 'IN'), ('L', 'NNP'), ('Written', 'VBN'), ('L+', 'NNP'), ('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('2', 'CD'), ('–', ':'), ('Lexical', 'JJ'), ('Analyzer', 'NN'), ('‹#›', ','), ('Regular', 'JJ'), ('Expression', 'NN'), ('&', 'CC'), ('Regular', 'JJ'), ('Definition', 'NN'), ('Regular', 'JJ'), ('expression', 'NN')] 

 Lemmas are: 
>> [('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('2', '2'), ('–', '-'), ('Lexical', 'lexical'), ('Analyzer', 'analyzer'), ('‹#›', '‹#›'), ('Exercise', 'Exercise'), ('Write', 'Write'), ('prefix', 'prefix'), (',', ','), ('suffix', 'suffix'), (',', ','), ('substring', 'substring'), (',', ','), ('proper', 'proper'), ('prefix', 'prefix'), (',', ','), ('proper', 'proper'), ('suffix', 'suffix'), ('and', 'and'), ('subsequence', 'subsequence'), ('of', 'of'), ('following', 'follow'), ('string', 'string'), (':', ':'), ('String', 'string'), (':', ':'), ('Compiler', 'Compiler'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('2', '2'), ('–', '-'), ('Lexical', 'lexical'), ('Analyzer', 'Analyzer'), ('‹#›', '‹#›'), ('Operations', 'Operation'), ('on', 'on'), ('languages', 'language'), ('Operation', 'Operation'), ('Definition', 'Definition'), ('Union', 'Union'), ('of', 'of'), ('L', 'L'), ('and', 'and'), ('M', 'M'), ('Written', 'write'), ('L', 'L'), ('U', 'U'), ('M', 'M'), ('Concatenation', 'Concatenation'), ('of', 'of'), ('L', 'L'), ('and', 'and'), ('M', 'M'), ('Written', 'write'), ('LM', 'LM'), ('Kleene', 'Kleene'), ('closure', 'closure'), ('of', 'of'), ('L', 'L'), ('Written', 'write'), ('L∗', 'L∗'), ('Positive', 'positive'), ('closure', 'closure'), ('of', 'of'), ('L', 'L'), ('Written', 'write'), ('L+', 'L+'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('2', '2'), ('–', '-'), ('Lexical', 'lexical'), ('Analyzer', 'analyzer'), ('‹#›', '‹#›'), ('Regular', 'regular'), ('Expression', 'expression'), ('&', '&'), ('Regular', 'regular'), ('Definition', 'Definition'), ('Regular', 'regular'), ('expression', 'expression')] 

 Dependency tags are: 
>> [(('Prof.', 'root'), 'root'), (('Dixita', 'Prof.'), 'flat'), (('B', '#'), 'compound'), (('Kagathara', '#'), 'compound'), (('#', 'Prof.'), 'appos'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', 'Unit'), 'dep'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', '#'), 'appos'), (('2', 'Unit'), 'dep'), (('–', 'Analyzer'), 'punct'), (('Lexical', 'Analyzer'), 'amod'), (('Analyzer', 'prefix'), 'compound'), (('‹#›', 'prefix'), 'compound'), (('Exercise', 'prefix'), 'compound'), (('Write', 'prefix'), 'compound'), (('prefix', '#'), 'conj'), ((',', 'suffix'), 'punct'), (('suffix', 'prefix'), 'conj'), ((',', 'substring'), 'punct'), (('substring', 'prefix'), 'conj'), ((',', 'prefix'), 'punct'), (('proper', 'prefix'), 'amod'), (('prefix', 'prefix'), 'conj'), ((',', 'suffix'), 'punct'), (('proper', 'suffix'), 'amod'), (('suffix', '#'), 'conj'), (('and', 'subsequence'), 'cc'), (('subsequence', '#'), 'conj'), (('of', 'string'), 'case'), (('following', 'string'), 'amod'), (('string', 'subsequence'), 'nmod'), ((':', 'String'), 'punct'), (('String', 'Prof.'), 'appos'), ((':', 'String'), 'punct'), (('Compiler', 'String'), 'dep'), (('Prof.', '#'), 'compound'), (('Dixita', '#'), 'compound'), (('B', '#'), 'compound'), (('Kagathara', '#'), 'compound'), (('#', 'String'), 'appos'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', '#'), 'appos'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', '#'), 'appos'), (('2', 'Unit'), 'nummod'), (('–', 'Operations'), 'punct'), (('Lexical', 'Operations'), 'amod'), (('Analyzer', 'Operations'), 'compound'), (('‹#›', 'Operations'), 'compound'), (('Operations', 'Prof.'), 'conj'), (('on', 'languages'), 'case'), (('languages', 'Operations'), 'nmod'), (('Operation', 'Union'), 'compound'), (('Definition', 'Union'), 'compound'), (('Union', 'Operations'), 'nmod'), (('of', 'L'), 'case'), (('L', 'Union'), 'nmod'), (('and', 'M'), 'cc'), (('M', 'L'), 'conj'), (('Written', 'Concatenation'), 'amod'), (('L', 'U'), 'compound'), (('U', 'M'), 'compound'), (('M', 'Concatenation'), 'compound'), (('Concatenation', 'Prof.'), 'conj'), (('of', 'L'), 'case'), (('L', 'Concatenation'), 'nmod'), (('and', 'M'), 'cc'), (('M', 'L'), 'conj'), (('Written', 'closure'), 'amod'), (('LM', 'closure'), 'compound'), (('Kleene', 'LM'), 'flat'), (('closure', 'Concatenation'), 'nmod'), (('of', 'closure'), 'case'), (('L', 'L∗'), 'compound'), (('Written', 'L∗'), 'amod'), (('L∗', 'closure'), 'compound'), (('Positive', 'closure'), 'amod'), (('closure', 'closure'), 'nmod'), (('of', 'L+'), 'case'), (('L', 'L+'), 'compound'), (('Written', 'L+'), 'amod'), (('L+', 'closure'), 'nmod'), (('Prof.', 'Kagathara'), 'compound'), (('Dixita', 'Kagathara'), 'compound'), (('B', 'Kagathara'), 'compound'), (('Kagathara', '#'), 'compound'), (('#', 'L+'), 'appos'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', '#'), 'appos'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', '#'), 'appos'), (('2', 'Unit'), 'nummod'), (('–', 'Analyzer'), 'punct'), (('Lexical', 'Analyzer'), 'amod'), (('Analyzer', 'Unit'), 'appos'), (('‹#›', 'Analyzer'), 'punct'), (('Regular', 'Expression'), 'amod'), (('Expression', 'Analyzer'), 'appos'), (('&', 'expression'), 'cc'), (('Regular', 'Definition'), 'amod'), (('Definition', 'expression'), 'compound'), (('Regular', 'expression'), 'amod'), (('expression', 'Analyzer'), 'conj')]

 Named Entities are: 
>> [('2170701', 'CARDINAL'), ('2', 'CARDINAL'), ('2170701', 'CARDINAL'), ('2', 'CARDINAL'), ('Operation\tDefinition  \tUnion of L', 'WORK_OF_ART'), ('LM\t  \tKleene', 'PERSON'), ('2', 'CARDINAL')]

========================== Sentence 34 ===========================

 A regular expression is a sequence of characters that define a pattern. 

Tokens are: 
>> ['A', 'regular', 'expression', 'is', 'a', 'sequence', 'of', 'characters', 'that', 'define', 'a', 'pattern', '.'] 

 UPOS tags are: 
>> [('A', 'DET'), ('regular', 'ADJ'), ('expression', 'NOUN'), ('is', 'AUX'), ('a', 'DET'), ('sequence', 'NOUN'), ('of', 'ADP'), ('characters', 'NOUN'), ('that', 'PRON'), ('define', 'VERB'), ('a', 'DET'), ('pattern', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('A', 'DT'), ('regular', 'JJ'), ('expression', 'NN'), ('is', 'VBZ'), ('a', 'DT'), ('sequence', 'NN'), ('of', 'IN'), ('characters', 'NNS'), ('that', 'WDT'), ('define', 'VBP'), ('a', 'DT'), ('pattern', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('A', 'a'), ('regular', 'regular'), ('expression', 'expression'), ('is', 'be'), ('a', 'a'), ('sequence', 'sequence'), ('of', 'of'), ('characters', 'character'), ('that', 'that'), ('define', 'define'), ('a', 'a'), ('pattern', 'pattern'), ('.', '.')] 

 Dependency tags are: 
>> [(('A', 'expression'), 'det'), (('regular', 'expression'), 'amod'), (('expression', 'sequence'), 'nsubj'), (('is', 'sequence'), 'cop'), (('a', 'sequence'), 'det'), (('sequence', 'root'), 'root'), (('of', 'characters'), 'case'), (('characters', 'sequence'), 'nmod'), (('that', 'define'), 'nsubj'), (('define', 'characters'), 'acl:relcl'), (('a', 'pattern'), 'det'), (('pattern', 'define'), 'obj'), (('.', 'sequence'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 35 ===========================

 Notational shorthand's 

Tokens are: 
>> ['Notational', 'shorthand', "'s"] 

 UPOS tags are: 
>> [('Notational', 'ADJ'), ('shorthand', 'NOUN'), ("'s", 'PART')] 

 XPOS tags are: 
>> [('Notational', 'JJ'), ('shorthand', 'NN'), ("'s", 'POS')] 

 Lemmas are: 
>> [('Notational', 'notational'), ('shorthand', 'shorthand'), ("'s", "'s")] 

 Dependency tags are: 
>> [(('Notational', 'shorthand'), 'amod'), (('shorthand', 'root'), 'root'), (("'s", 'shorthand'), 'case')]

 Named Entities are: 
>> []

========================== Sentence 36 ===========================

 One or more instances:  + Zero or more instances:  * Zero or one instances:  ? 

Tokens are: 
>> ['One', 'or', 'more', 'instances', ':', '+', 'Zero', 'or', 'more', 'instances', ':', '*', 'Zero', 'or', 'one', 'instances', ':', '?'] 

 UPOS tags are: 
>> [('One', 'NUM'), ('or', 'CCONJ'), ('more', 'ADJ'), ('instances', 'NOUN'), (':', 'PUNCT'), ('+', 'SYM'), ('Zero', 'NUM'), ('or', 'CCONJ'), ('more', 'ADJ'), ('instances', 'NOUN'), (':', 'PUNCT'), ('*', 'PUNCT'), ('Zero', 'PROPN'), ('or', 'CCONJ'), ('one', 'NUM'), ('instances', 'NOUN'), (':', 'PUNCT'), ('?', 'PUNCT')] 

 XPOS tags are: 
>> [('One', 'CD'), ('or', 'CC'), ('more', 'JJR'), ('instances', 'NNS'), (':', ':'), ('+', 'SYM'), ('Zero', 'CD'), ('or', 'CC'), ('more', 'JJR'), ('instances', 'NNS'), (':', ':'), ('*', 'NFP'), ('Zero', 'NNP'), ('or', 'CC'), ('one', 'CD'), ('instances', 'NNS'), (':', ':'), ('?', '.')] 

 Lemmas are: 
>> [('One', 'one'), ('or', 'or'), ('more', 'more'), ('instances', 'instance'), (':', ':'), ('+', '+'), ('Zero', 'Zero'), ('or', 'or'), ('more', 'more'), ('instances', 'instance'), (':', ':'), ('*', '*'), ('Zero', 'Zero'), ('or', 'or'), ('one', 'one'), ('instances', 'instance'), (':', ':'), ('?', '?')] 

 Dependency tags are: 
>> [(('One', 'instances'), 'nummod'), (('or', 'more'), 'cc'), (('more', 'One'), 'conj'), (('instances', 'root'), 'root'), ((':', 'instances'), 'punct'), (('+', 'Zero'), 'advmod'), (('Zero', 'instances'), 'nummod'), (('or', 'more'), 'cc'), (('more', 'Zero'), 'conj'), (('instances', 'instances'), 'appos'), ((':', 'instances'), 'punct'), (('*', 'instances'), 'punct'), (('Zero', 'instances'), 'compound'), (('or', 'one'), 'cc'), (('one', 'Zero'), 'conj'), (('instances', 'instances'), 'conj'), ((':', 'instances'), 'punct'), (('?', 'instances'), 'punct')]

 Named Entities are: 
>> [('One', 'CARDINAL'), ('Zero', 'CARDINAL'), ('Zero', 'CARDINAL'), ('one', 'CARDINAL')]

========================== Sentence 37 ===========================

 Alphabets: Σ     Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Rules to define regular expression is a regular expression that denotes , the set containing empty string. 

Tokens are: 
>> ['Alphabets', ':', 'Σ', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '2', '–', 'Lexical', 'Analyzer', '‹#›', 'Rules', 'to', 'define', 'regular', 'expression', 'is', 'a', 'regular', 'expression', 'that', 'denotes', ',', 'the', 'set', 'containing', 'empty', 'string', '.'] 

 UPOS tags are: 
>> [('Alphabets', 'NOUN'), (':', 'PUNCT'), ('Σ', 'NOUN'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'ADJ'), ('Analyzer', 'NOUN'), ('‹#›', 'NOUN'), ('Rules', 'NOUN'), ('to', 'PART'), ('define', 'VERB'), ('regular', 'ADJ'), ('expression', 'NOUN'), ('is', 'AUX'), ('a', 'DET'), ('regular', 'ADJ'), ('expression', 'NOUN'), ('that', 'PRON'), ('denotes', 'VERB'), (',', 'PUNCT'), ('the', 'DET'), ('set', 'NOUN'), ('containing', 'VERB'), ('empty', 'ADJ'), ('string', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Alphabets', 'NNS'), (':', ':'), ('Σ', 'NN'), ('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('2', 'CD'), ('–', ':'), ('Lexical', 'JJ'), ('Analyzer', 'NN'), ('‹#›', 'NN'), ('Rules', 'NNS'), ('to', 'TO'), ('define', 'VB'), ('regular', 'JJ'), ('expression', 'NN'), ('is', 'VBZ'), ('a', 'DT'), ('regular', 'JJ'), ('expression', 'NN'), ('that', 'WDT'), ('denotes', 'VBZ'), (',', ','), ('the', 'DT'), ('set', 'NN'), ('containing', 'VBG'), ('empty', 'JJ'), ('string', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('Alphabets', 'alphabet'), (':', ':'), ('Σ', 'σ'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('2', '2'), ('–', '-'), ('Lexical', 'lexical'), ('Analyzer', 'analyzer'), ('‹#›', '‹#›'), ('Rules', 'rule'), ('to', 'to'), ('define', 'define'), ('regular', 'regular'), ('expression', 'expression'), ('is', 'be'), ('a', 'a'), ('regular', 'regular'), ('expression', 'expression'), ('that', 'that'), ('denotes', 'denote'), (',', ','), ('the', 'the'), ('set', 'set'), ('containing', 'contain'), ('empty', 'empty'), ('string', 'string'), ('.', '.')] 

 Dependency tags are: 
>> [(('Alphabets', 'expression'), 'nsubj'), ((':', 'Alphabets'), 'punct'), (('Σ', 'expression'), 'nsubj'), (('Prof.', 'expression'), 'nsubj'), (('Dixita', 'Kagathara'), 'compound'), (('B', 'Kagathara'), 'compound'), (('Kagathara', 'Prof.'), 'flat'), (('#', 'Prof.'), 'appos'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', '#'), 'appos'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', '#'), 'appos'), (('2', 'Unit'), 'nummod'), (('–', 'Alphabets'), 'punct'), (('Lexical', 'Analyzer'), 'amod'), (('Analyzer', 'Rules'), 'compound'), (('‹#›', 'Rules'), 'compound'), (('Rules', 'expression'), 'nsubj'), (('to', 'define'), 'mark'), (('define', 'Rules'), 'acl'), (('regular', 'expression'), 'amod'), (('expression', 'define'), 'obj'), (('is', 'expression'), 'cop'), (('a', 'expression'), 'det'), (('regular', 'expression'), 'amod'), (('expression', 'root'), 'root'), (('that', 'denotes'), 'nsubj'), (('denotes', 'expression'), 'acl:relcl'), ((',', 'set'), 'punct'), (('the', 'set'), 'det'), (('set', 'denotes'), 'obj'), (('containing', 'set'), 'acl'), (('empty', 'string'), 'amod'), (('string', 'containing'), 'obj'), (('.', 'expression'), 'punct')]

 Named Entities are: 
>> [('2', 'CARDINAL')]

========================== Sentence 38 ===========================

 If   is a symbol in then  is a regular expression,  Suppose and are regular expression denoting the languages and . 

Tokens are: 
>> ['If', 'is', 'a', 'symbol', 'in', 'then', 'is', 'a', 'regular', 'expression', ',', 'Suppose', 'and', 'are', 'regular', 'expression', 'denoting', 'the', 'languages', 'and', '.'] 

 UPOS tags are: 
>> [('If', 'SCONJ'), ('is', 'AUX'), ('a', 'DET'), ('symbol', 'NOUN'), ('in', 'ADP'), ('then', 'ADV'), ('is', 'AUX'), ('a', 'DET'), ('regular', 'ADJ'), ('expression', 'NOUN'), (',', 'PUNCT'), ('Suppose', 'VERB'), ('and', 'CCONJ'), ('are', 'AUX'), ('regular', 'ADJ'), ('expression', 'NOUN'), ('denoting', 'VERB'), ('the', 'DET'), ('languages', 'NOUN'), ('and', 'CCONJ'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('If', 'IN'), ('is', 'VBZ'), ('a', 'DT'), ('symbol', 'NN'), ('in', 'IN'), ('then', 'RB'), ('is', 'VBZ'), ('a', 'DT'), ('regular', 'JJ'), ('expression', 'NN'), (',', ','), ('Suppose', 'VB'), ('and', 'CC'), ('are', 'VBP'), ('regular', 'JJ'), ('expression', 'NN'), ('denoting', 'VBG'), ('the', 'DT'), ('languages', 'NNS'), ('and', 'CC'), ('.', '.')] 

 Lemmas are: 
>> [('If', 'if'), ('is', 'be'), ('a', 'a'), ('symbol', 'symbol'), ('in', 'in'), ('then', 'then'), ('is', 'be'), ('a', 'a'), ('regular', 'regular'), ('expression', 'expression'), (',', ','), ('Suppose', 'suppose'), ('and', 'and'), ('are', 'be'), ('regular', 'regular'), ('expression', 'expression'), ('denoting', 'denote'), ('the', 'the'), ('languages', 'language'), ('and', 'and'), ('.', '.')] 

 Dependency tags are: 
>> [(('If', 'expression'), 'mark'), (('is', 'expression'), 'cop'), (('a', 'symbol'), 'det'), (('symbol', 'expression'), 'nsubj'), (('in', 'then'), 'case'), (('then', 'symbol'), 'nmod'), (('is', 'expression'), 'cop'), (('a', 'expression'), 'det'), (('regular', 'expression'), 'amod'), (('expression', 'Suppose'), 'advcl'), ((',', 'Suppose'), 'punct'), (('Suppose', 'root'), 'root'), (('and', 'expression'), 'cc'), (('are', 'expression'), 'cop'), (('regular', 'expression'), 'amod'), (('expression', 'Suppose'), 'conj'), (('denoting', 'expression'), 'acl'), (('the', 'languages'), 'det'), (('languages', 'denoting'), 'obj'), (('and', 'expression'), 'cc'), (('.', 'Suppose'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 39 ===========================

 Then,  is a regular expression denoting    is a regular expression denoting  * is a regular expression denoting   is a regular expression denoting 

Tokens are: 
>> ['Then', ',', 'is', 'a', 'regular', 'expression', 'denoting', 'is', 'a', 'regular', 'expression', 'denoting', '*', 'is', 'a', 'regular', 'expression', 'denoting', 'is', 'a', 'regular', 'expression', 'denoting'] 

 UPOS tags are: 
>> [('Then', 'ADV'), (',', 'PUNCT'), ('is', 'AUX'), ('a', 'DET'), ('regular', 'ADJ'), ('expression', 'NOUN'), ('denoting', 'VERB'), ('is', 'AUX'), ('a', 'DET'), ('regular', 'ADJ'), ('expression', 'NOUN'), ('denoting', 'VERB'), ('*', 'PUNCT'), ('is', 'AUX'), ('a', 'DET'), ('regular', 'ADJ'), ('expression', 'NOUN'), ('denoting', 'VERB'), ('is', 'AUX'), ('a', 'DET'), ('regular', 'ADJ'), ('expression', 'NOUN'), ('denoting', 'VERB')] 

 XPOS tags are: 
>> [('Then', 'RB'), (',', ','), ('is', 'VBZ'), ('a', 'DT'), ('regular', 'JJ'), ('expression', 'NN'), ('denoting', 'VBG'), ('is', 'VBZ'), ('a', 'DT'), ('regular', 'JJ'), ('expression', 'NN'), ('denoting', 'VBG'), ('*', 'NFP'), ('is', 'VBZ'), ('a', 'DT'), ('regular', 'JJ'), ('expression', 'NN'), ('denoting', 'VBG'), ('is', 'VBZ'), ('a', 'DT'), ('regular', 'JJ'), ('expression', 'NN'), ('denoting', 'VBG')] 

 Lemmas are: 
>> [('Then', 'then'), (',', ','), ('is', 'be'), ('a', 'a'), ('regular', 'regular'), ('expression', 'expression'), ('denoting', 'denote'), ('is', 'be'), ('a', 'a'), ('regular', 'regular'), ('expression', 'expression'), ('denoting', 'denote'), ('*', '*'), ('is', 'be'), ('a', 'a'), ('regular', 'regular'), ('expression', 'expression'), ('denoting', 'denote'), ('is', 'be'), ('a', 'a'), ('regular', 'regular'), ('expression', 'expression'), ('denoting', 'denote')] 

 Dependency tags are: 
>> [(('Then', 'expression'), 'advmod'), ((',', 'expression'), 'punct'), (('is', 'expression'), 'cop'), (('a', 'expression'), 'det'), (('regular', 'expression'), 'amod'), (('expression', 'expression'), 'nsubj'), (('denoting', 'expression'), 'acl'), (('is', 'expression'), 'cop'), (('a', 'expression'), 'det'), (('regular', 'expression'), 'amod'), (('expression', 'root'), 'root'), (('denoting', 'expression'), 'acl'), (('*', 'expression'), 'punct'), (('is', 'expression'), 'cop'), (('a', 'expression'), 'det'), (('regular', 'expression'), 'amod'), (('expression', 'expression'), 'parataxis'), (('denoting', 'expression'), 'acl'), (('is', 'expression'), 'cop'), (('a', 'expression'), 'det'), (('regular', 'expression'), 'amod'), (('expression', 'expression'), 'acl'), (('denoting', 'expression'), 'acl')]

 Named Entities are: 
>> []

========================== Sentence 40 ===========================

 The language denoted by regular expression is said to be a regular set. 

Tokens are: 
>> ['The', 'language', 'denoted', 'by', 'regular', 'expression', 'is', 'said', 'to', 'be', 'a', 'regular', 'set', '.'] 

 UPOS tags are: 
>> [('The', 'DET'), ('language', 'NOUN'), ('denoted', 'VERB'), ('by', 'ADP'), ('regular', 'ADJ'), ('expression', 'NOUN'), ('is', 'AUX'), ('said', 'VERB'), ('to', 'PART'), ('be', 'AUX'), ('a', 'DET'), ('regular', 'ADJ'), ('set', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('The', 'DT'), ('language', 'NN'), ('denoted', 'VBN'), ('by', 'IN'), ('regular', 'JJ'), ('expression', 'NN'), ('is', 'VBZ'), ('said', 'VBN'), ('to', 'TO'), ('be', 'VB'), ('a', 'DT'), ('regular', 'JJ'), ('set', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('The', 'the'), ('language', 'language'), ('denoted', 'denote'), ('by', 'by'), ('regular', 'regular'), ('expression', 'expression'), ('is', 'be'), ('said', 'say'), ('to', 'to'), ('be', 'be'), ('a', 'a'), ('regular', 'regular'), ('set', 'set'), ('.', '.')] 

 Dependency tags are: 
>> [(('The', 'language'), 'det'), (('language', 'said'), 'nsubj:pass'), (('denoted', 'language'), 'acl'), (('by', 'expression'), 'case'), (('regular', 'expression'), 'amod'), (('expression', 'denoted'), 'obl'), (('is', 'said'), 'aux:pass'), (('said', 'root'), 'root'), (('to', 'set'), 'mark'), (('be', 'set'), 'cop'), (('a', 'set'), 'det'), (('regular', 'set'), 'amod'), (('set', 'said'), 'xcomp'), (('.', 'said'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 41 ===========================

 Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Regular expression L = Zero or More Occurrences of a =    * a* a  aaa  aa aaaa aaaaa….. 

Tokens are: 
>> ['Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '2', '–', 'Lexical', 'Analyzer', '‹#›', 'Regular', 'expression', 'L', '=', 'Zero', 'or', 'More', 'Occurrences', 'of', 'a', '=', '*', 'a*', 'a', 'aaa', 'aa', 'aaaa', 'aaaaa', '…..'] 

 UPOS tags are: 
>> [('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'ADJ'), ('Analyzer', 'NOUN'), ('‹#›', 'NOUN'), ('Regular', 'ADJ'), ('expression', 'NOUN'), ('L', 'NOUN'), ('=', 'PUNCT'), ('Zero', 'NUM'), ('or', 'CCONJ'), ('More', 'ADJ'), ('Occurrences', 'NOUN'), ('of', 'ADP'), ('a', 'NOUN'), ('=', 'PUNCT'), ('*', 'PUNCT'), ('a*', 'NOUN'), ('a', 'DET'), ('aaa', 'NOUN'), ('aa', 'NOUN'), ('aaaa', 'NOUN'), ('aaaaa', 'NOUN'), ('…..', 'PUNCT')] 

 XPOS tags are: 
>> [('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('2', 'CD'), ('–', ','), ('Lexical', 'JJ'), ('Analyzer', 'NN'), ('‹#›', 'NN'), ('Regular', 'JJ'), ('expression', 'NN'), ('L', 'NN'), ('=', ','), ('Zero', 'CD'), ('or', 'CC'), ('More', 'JJR'), ('Occurrences', 'NNS'), ('of', 'IN'), ('a', 'NN'), ('=', ','), ('*', 'NFP'), ('a*', 'NN'), ('a', 'DT'), ('aaa', 'NN'), ('aa', 'NN'), ('aaaa', 'NN'), ('aaaaa', 'NN'), ('…..', '.')] 

 Lemmas are: 
>> [('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('2', '2'), ('–', '-'), ('Lexical', 'lexical'), ('Analyzer', 'analyzer'), ('‹#›', '‹#›'), ('Regular', 'regular'), ('expression', 'expression'), ('L', 'L'), ('=', '='), ('Zero', 'Zero'), ('or', 'or'), ('More', 'more'), ('Occurrences', 'occurrence'), ('of', 'of'), ('a', 'a'), ('=', '='), ('*', '*'), ('a*', 'a*'), ('a', 'a'), ('aaa', 'aaa'), ('aa', 'a'), ('aaaa', 'aaaa'), ('aaaaa', 'aaaaa'), ('…..', '…..')] 

 Dependency tags are: 
>> [(('Prof.', 'root'), 'root'), (('Dixita', 'Prof.'), 'flat'), (('B', 'Prof.'), 'flat'), (('Kagathara', 'Prof.'), 'flat'), (('#', 'Prof.'), 'list'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', 'Unit'), 'compound'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', 'Prof.'), 'list'), (('2', 'Unit'), 'nummod'), (('–', 'Unit'), 'punct'), (('Lexical', 'Analyzer'), 'amod'), (('Analyzer', 'Prof.'), 'list'), (('‹#›', 'Analyzer'), 'appos'), (('Regular', 'L'), 'amod'), (('expression', 'L'), 'compound'), (('L', 'Analyzer'), 'appos'), (('=', 'Prof.'), 'punct'), (('Zero', 'Occurrences'), 'nummod'), (('or', 'More'), 'cc'), (('More', 'Zero'), 'conj'), (('Occurrences', 'Prof.'), 'list'), (('of', 'a'), 'case'), (('a', 'Occurrences'), 'nmod'), (('=', 'a*'), 'punct'), (('*', 'a*'), 'punct'), (('a*', 'Prof.'), 'list'), (('a', 'aaa'), 'det'), (('aaa', 'a*'), 'obj'), (('aa', 'aaaaa'), 'compound'), (('aaaa', 'aaaaa'), 'compound'), (('aaaaa', 'aaa'), 'appos'), (('…..', 'a*'), 'punct')]

 Named Entities are: 
>> [('2170701', 'CARDINAL')]

========================== Sentence 42 ===========================

 Infinite ….. 𝜖    Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Regular expression L = One or More Occurrences of a =   +  a+ a  aaa  aa aaaa aaaaa….. 

Tokens are: 
>> ['Infinite', '…..', '𝜖', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '2', '–', 'Lexical', 'Analyzer', '‹#›', 'Regular', 'expression', 'L', '=', 'One', 'or', 'More', 'Occurrences', 'of', 'a', '=', '+', 'a+', 'a', 'aaa', 'aa', 'aaaa', 'aaaaa', '…..'] 

 UPOS tags are: 
>> [('Infinite', 'ADJ'), ('…..', 'NOUN'), ('𝜖', 'NOUN'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'ADJ'), ('Analyzer', 'NOUN'), ('‹#›', 'NOUN'), ('Regular', 'ADJ'), ('expression', 'NOUN'), ('L', 'NOUN'), ('=', 'PUNCT'), ('One', 'NUM'), ('or', 'CCONJ'), ('More', 'ADJ'), ('Occurrences', 'NOUN'), ('of', 'ADP'), ('a', 'DET'), ('=', 'SYM'), ('+', 'SYM'), ('a+', 'ADP'), ('a', 'DET'), ('aaa', 'NOUN'), ('aa', 'NOUN'), ('aaaa', 'NOUN'), ('aaaaa', 'NOUN'), ('…..', 'PUNCT')] 

 XPOS tags are: 
>> [('Infinite', 'JJ'), ('…..', 'NN'), ('𝜖', 'NN'), ('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('2', 'CD'), ('–', ','), ('Lexical', 'JJ'), ('Analyzer', 'NN'), ('‹#›', 'NN'), ('Regular', 'JJ'), ('expression', 'NN'), ('L', 'NN'), ('=', ','), ('One', 'CD'), ('or', 'CC'), ('More', 'JJR'), ('Occurrences', 'NNS'), ('of', 'IN'), ('a', 'DT'), ('=', 'SYM'), ('+', 'SYM'), ('a+', 'IN'), ('a', 'DT'), ('aaa', 'NN'), ('aa', 'NN'), ('aaaa', 'NN'), ('aaaaa', 'NN'), ('…..', '.')] 

 Lemmas are: 
>> [('Infinite', 'infinite'), ('…..', '…..'), ('𝜖', '𝜖'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('2', '2'), ('–', '-'), ('Lexical', 'lexical'), ('Analyzer', 'analyzer'), ('‹#›', '‹#›'), ('Regular', 'regular'), ('expression', 'expression'), ('L', 'L'), ('=', '='), ('One', 'one'), ('or', 'or'), ('More', 'more'), ('Occurrences', 'occurrence'), ('of', 'of'), ('a', 'a'), ('=', '='), ('+', '+'), ('a+', 'a+'), ('a', 'a'), ('aaa', 'aaa'), ('aa', 'a'), ('aaaa', 'aaaa'), ('aaaaa', 'aaaaa'), ('…..', '…..')] 

 Dependency tags are: 
>> [(('Infinite', '…..'), 'amod'), (('…..', '𝜖'), 'compound'), (('𝜖', 'root'), 'root'), (('Prof.', '𝜖'), 'flat'), (('Dixita', '#'), 'compound'), (('B', '#'), 'compound'), (('Kagathara', '#'), 'compound'), (('#', 'Prof.'), 'list'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', '#'), 'appos'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', '#'), 'appos'), (('2', 'Unit'), 'nummod'), (('–', 'Unit'), 'punct'), (('Lexical', 'Analyzer'), 'amod'), (('Analyzer', 'Unit'), 'appos'), (('‹#›', 'L'), 'compound'), (('Regular', 'L'), 'amod'), (('expression', 'L'), 'compound'), (('L', 'Analyzer'), 'appos'), (('=', 'Occurrences'), 'punct'), (('One', 'Occurrences'), 'nummod'), (('or', 'More'), 'cc'), (('More', 'One'), 'conj'), (('Occurrences', '𝜖'), 'list'), (('of', '='), 'case'), (('a', '='), 'det'), (('=', 'Occurrences'), 'nmod'), (('+', '='), 'advmod'), (('a+', 'aaa'), 'case'), (('a', 'aaa'), 'det'), (('aaa', '='), 'obl'), (('aa', 'aaaaa'), 'compound'), (('aaaa', 'aaaaa'), 'compound'), (('aaaaa', 'aaa'), 'appos'), (('…..', 'aaaaa'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 43 ===========================

 Infinite …..    Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Precedence and associativity of operators 	Operator	Precedence	Associative 	Kleene *	1	left 	Concatenation	2	left 	Union 	|	3	left     Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Regular expression examples 0 or 1 	 0 or 11 or 111  String having zero or more a. 

Tokens are: 
>> ['Infinite', '…..', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '2', '–', 'Lexical', 'Analyzer', '‹#›', 'Precedence', 'and', 'associativity', 'of', 'operators', 'Operator', 'Precedence', 'Associative', 'Kleene', '*', '1', 'left', 'Concatenation', '2', 'left', 'Union', '|', '3', 'left', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '2', '–', 'Lexical', 'Analyzer', '‹#›', 'Regular', 'expression', 'examples', '0', 'or', '1', '0', 'or', '11', 'or', '111', 'String', 'having', 'zero', 'or', 'more', 'a.'] 

 UPOS tags are: 
>> [('Infinite', 'ADJ'), ('…..', 'PUNCT'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'ADJ'), ('Analyzer', 'NOUN'), ('‹#›', 'NOUN'), ('Precedence', 'NOUN'), ('and', 'CCONJ'), ('associativity', 'NOUN'), ('of', 'ADP'), ('operators', 'NOUN'), ('Operator', 'PROPN'), ('Precedence', 'PROPN'), ('Associative', 'ADJ'), ('Kleene', 'PROPN'), ('*', 'PUNCT'), ('1', 'NUM'), ('left', 'VERB'), ('Concatenation', 'PROPN'), ('2', 'NUM'), ('left', 'VERB'), ('Union', 'NOUN'), ('|', 'PUNCT'), ('3', 'NUM'), ('left', 'VERB'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'ADJ'), ('Analyzer', 'NOUN'), ('‹#›', 'PUNCT'), ('Regular', 'ADJ'), ('expression', 'NOUN'), ('examples', 'NOUN'), ('0', 'NUM'), ('or', 'CCONJ'), ('1', 'NUM'), ('0', 'NUM'), ('or', 'CCONJ'), ('11', 'NUM'), ('or', 'CCONJ'), ('111', 'NUM'), ('String', 'NOUN'), ('having', 'VERB'), ('zero', 'NUM'), ('or', 'CCONJ'), ('more', 'ADV'), ('a.', 'NOUN')] 

 XPOS tags are: 
>> [('Infinite', 'JJ'), ('…..', ','), ('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('2', 'CD'), ('–', ':'), ('Lexical', 'JJ'), ('Analyzer', 'NN'), ('‹#›', 'NN'), ('Precedence', 'NN'), ('and', 'CC'), ('associativity', 'NN'), ('of', 'IN'), ('operators', 'NNS'), ('Operator', 'NNP'), ('Precedence', 'NNP'), ('Associative', 'NNP'), ('Kleene', 'NNP'), ('*', 'NFP'), ('1', 'CD'), ('left', 'VBN'), ('Concatenation', 'NNP'), ('2', 'CD'), ('left', 'VBN'), ('Union', 'NN'), ('|', ':'), ('3', 'CD'), ('left', 'VBN'), ('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('2', 'CD'), ('–', ':'), ('Lexical', 'JJ'), ('Analyzer', 'NN'), ('‹#›', ','), ('Regular', 'JJ'), ('expression', 'NN'), ('examples', 'NNS'), ('0', 'CD'), ('or', 'CC'), ('1', 'CD'), ('0', 'CD'), ('or', 'CC'), ('11', 'CD'), ('or', 'CC'), ('111', 'CD'), ('String', 'NN'), ('having', 'VBG'), ('zero', 'CD'), ('or', 'CC'), ('more', 'RBR'), ('a.', 'NN')] 

 Lemmas are: 
>> [('Infinite', 'infinite'), ('…..', '…..'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('2', '2'), ('–', '-'), ('Lexical', 'lexical'), ('Analyzer', 'analyzer'), ('‹#›', '‹#›'), ('Precedence', 'precedence'), ('and', 'and'), ('associativity', 'associativity'), ('of', 'of'), ('operators', 'operator'), ('Operator', 'Operator'), ('Precedence', 'Precedence'), ('Associative', 'associative'), ('Kleene', 'Kleene'), ('*', '*'), ('1', '1'), ('left', 'leave'), ('Concatenation', 'Concatenation'), ('2', '2'), ('left', 'leave'), ('Union', 'union'), ('|', '|'), ('3', '3'), ('left', 'leave'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('2', '2'), ('–', '-'), ('Lexical', 'lexical'), ('Analyzer', 'analyzer'), ('‹#›', '‹#›'), ('Regular', 'regular'), ('expression', 'expression'), ('examples', 'example'), ('0', '0'), ('or', 'or'), ('1', '1'), ('0', '0'), ('or', 'or'), ('11', '11'), ('or', 'or'), ('111', '111'), ('String', 'string'), ('having', 'have'), ('zero', 'zero'), ('or', 'or'), ('more', 'more'), ('a.', 'a.')] 

 Dependency tags are: 
>> [(('Infinite', 'Prof.'), 'amod'), (('…..', 'Prof.'), 'punct'), (('Prof.', 'root'), 'root'), (('Dixita', 'Prof.'), 'flat'), (('B', 'Prof.'), 'flat'), (('Kagathara', 'Prof.'), 'flat'), (('#', 'Prof.'), 'appos'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', 'Unit'), 'compound'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', 'Prof.'), 'appos'), (('2', 'Unit'), 'dep'), (('–', 'Analyzer'), 'punct'), (('Lexical', 'Analyzer'), 'amod'), (('Analyzer', 'Prof.'), 'conj'), (('‹#›', 'Precedence'), 'compound'), (('Precedence', 'Prof.'), 'conj'), (('and', 'associativity'), 'cc'), (('associativity', 'Precedence'), 'conj'), (('of', 'Operator'), 'case'), (('operators', 'Operator'), 'compound'), (('Operator', 'Precedence'), 'nmod'), (('Precedence', 'Kleene'), 'compound'), (('Associative', 'Kleene'), 'amod'), (('Kleene', 'Operator'), 'appos'), (('*', '1'), 'punct'), (('1', 'left'), 'dep'), (('left', 'Prof.'), 'parataxis'), (('Concatenation', 'Union'), 'compound'), (('2', 'Union'), 'nummod'), (('left', 'Union'), 'amod'), (('Union', 'left'), 'obj'), (('|', 'Prof.'), 'punct'), (('3', 'Prof.'), 'dep'), (('left', 'Prof.'), 'parataxis'), (('Prof.', 'left'), 'obj'), (('Dixita', 'B'), 'compound'), (('B', 'Prof.'), 'flat'), (('Kagathara', 'Prof.'), 'flat'), (('#', 'left'), 'obj'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', 'Unit'), 'appos'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', 'Prof.'), 'list'), (('2', 'Unit'), 'nummod'), (('–', 'Analyzer'), 'punct'), (('Lexical', 'Analyzer'), 'amod'), (('Analyzer', 'Prof.'), 'conj'), (('‹#›', 'examples'), 'punct'), (('Regular', 'examples'), 'amod'), (('expression', 'examples'), 'compound'), (('examples', 'Analyzer'), 'appos'), (('0', 'examples'), 'nummod'), (('or', '1'), 'cc'), (('1', '0'), 'conj'), (('0', 'examples'), 'nummod'), (('or', '11'), 'cc'), (('11', '0'), 'conj'), (('or', '111'), 'cc'), (('111', '11'), 'conj'), (('String', 'examples'), 'conj'), (('having', 'String'), 'acl'), (('zero', 'a.'), 'nummod'), (('or', 'more'), 'cc'), (('more', 'zero'), 'conj'), (('a.', 'having'), 'obj')]

 Named Entities are: 
>> [('2', 'CARDINAL'), ('1', 'CARDINAL'), ('2', 'CARDINAL'), ('2170701', 'CARDINAL'), ('2', 'CARDINAL'), ('0', 'CARDINAL'), ('1', 'CARDINAL'), ('0', 'CARDINAL'), ('11', 'CARDINAL'), ('zero', 'CARDINAL')]

========================== Sentence 44 ===========================

 String having one or more a. 

Tokens are: 
>> ['String', 'having', 'one', 'or', 'more', 'a.'] 

 UPOS tags are: 
>> [('String', 'NOUN'), ('having', 'VERB'), ('one', 'NUM'), ('or', 'CCONJ'), ('more', 'ADJ'), ('a.', 'NOUN')] 

 XPOS tags are: 
>> [('String', 'NN'), ('having', 'VBG'), ('one', 'CD'), ('or', 'CC'), ('more', 'JJR'), ('a.', 'NN')] 

 Lemmas are: 
>> [('String', 'string'), ('having', 'have'), ('one', 'one'), ('or', 'or'), ('more', 'more'), ('a.', 'a.')] 

 Dependency tags are: 
>> [(('String', 'root'), 'root'), (('having', 'String'), 'acl'), (('one', 'a.'), 'nummod'), (('or', 'more'), 'cc'), (('more', 'one'), 'conj'), (('a.', 'having'), 'obj')]

 Named Entities are: 
>> [('one', 'CARDINAL')]

========================== Sentence 45 ===========================

 Regular expression over  that represent all string of length 3. 

Tokens are: 
>> ['Regular', 'expression', 'over', 'that', 'represent', 'all', 'string', 'of', 'length', '3', '.'] 

 UPOS tags are: 
>> [('Regular', 'ADJ'), ('expression', 'NOUN'), ('over', 'ADP'), ('that', 'PRON'), ('represent', 'VERB'), ('all', 'DET'), ('string', 'NOUN'), ('of', 'ADP'), ('length', 'NOUN'), ('3', 'NUM'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Regular', 'JJ'), ('expression', 'NN'), ('over', 'IN'), ('that', 'WDT'), ('represent', 'VBP'), ('all', 'DT'), ('string', 'NN'), ('of', 'IN'), ('length', 'NN'), ('3', 'CD'), ('.', '.')] 

 Lemmas are: 
>> [('Regular', 'regular'), ('expression', 'expression'), ('over', 'over'), ('that', 'that'), ('represent', 'represent'), ('all', 'all'), ('string', 'string'), ('of', 'of'), ('length', 'length'), ('3', '3'), ('.', '.')] 

 Dependency tags are: 
>> [(('Regular', 'expression'), 'amod'), (('expression', 'root'), 'root'), (('over', 'that'), 'case'), (('that', 'expression'), 'nmod'), (('represent', 'expression'), 'acl:relcl'), (('all', 'string'), 'det'), (('string', 'represent'), 'obj'), (('of', 'length'), 'case'), (('length', 'string'), 'nmod'), (('3', 'length'), 'nummod'), (('.', 'expression'), 'punct')]

 Named Entities are: 
>> [('3', 'CARDINAL')]

========================== Sentence 46 ===========================

 All binary string               +    Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Regular expression examples 0 or more occurrence of either a or b or both  1 or more occurrence of either a or b or both  Binary no. 

Tokens are: 
>> ['All', 'binary', 'string', '+', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '2', '–', 'Lexical', 'Analyzer', '‹#›', 'Regular', 'expression', 'examples', '0', 'or', 'more', 'occurrence', 'of', 'either', 'a', 'or', 'b', 'or', 'both', '1', 'or', 'more', 'occurrence', 'of', 'either', 'a', 'or', 'b', 'or', 'both', 'Binary', 'no', '.'] 

 UPOS tags are: 
>> [('All', 'DET'), ('binary', 'ADJ'), ('string', 'NOUN'), ('+', 'SYM'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'ADJ'), ('Analyzer', 'NOUN'), ('‹#›', 'NOUN'), ('Regular', 'ADJ'), ('expression', 'NOUN'), ('examples', 'NOUN'), ('0', 'NUM'), ('or', 'CCONJ'), ('more', 'ADJ'), ('occurrence', 'NOUN'), ('of', 'ADP'), ('either', 'CCONJ'), ('a', 'DET'), ('or', 'CCONJ'), ('b', 'NUM'), ('or', 'CCONJ'), ('both', 'DET'), ('1', 'NUM'), ('or', 'CCONJ'), ('more', 'ADJ'), ('occurrence', 'NOUN'), ('of', 'ADP'), ('either', 'CCONJ'), ('a', 'DET'), ('or', 'CCONJ'), ('b', 'NOUN'), ('or', 'CCONJ'), ('both', 'CCONJ'), ('Binary', 'ADJ'), ('no', 'INTJ'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('All', 'DT'), ('binary', 'JJ'), ('string', 'NN'), ('+', 'SYM'), ('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('2', 'CD'), ('–', ':'), ('Lexical', 'JJ'), ('Analyzer', 'NN'), ('‹#›', 'NN'), ('Regular', 'JJ'), ('expression', 'NN'), ('examples', 'NNS'), ('0', 'CD'), ('or', 'CC'), ('more', 'JJR'), ('occurrence', 'NN'), ('of', 'IN'), ('either', 'CC'), ('a', 'DT'), ('or', 'CC'), ('b', 'CD'), ('or', 'CC'), ('both', 'DT'), ('1', 'CD'), ('or', 'CC'), ('more', 'JJR'), ('occurrence', 'NN'), ('of', 'IN'), ('either', 'CC'), ('a', 'DT'), ('or', 'CC'), ('b', 'NN'), ('or', 'CC'), ('both', 'CC'), ('Binary', 'JJ'), ('no', 'UH'), ('.', '.')] 

 Lemmas are: 
>> [('All', 'all'), ('binary', 'binary'), ('string', 'string'), ('+', '+'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('2', '2'), ('–', '-'), ('Lexical', 'lexical'), ('Analyzer', 'analyzer'), ('‹#›', '‹#›'), ('Regular', 'regular'), ('expression', 'expression'), ('examples', 'example'), ('0', '0'), ('or', 'or'), ('more', 'more'), ('occurrence', 'occurrence'), ('of', 'of'), ('either', 'either'), ('a', 'a'), ('or', 'or'), ('b', 'b'), ('or', 'or'), ('both', 'both'), ('1', '1'), ('or', 'or'), ('more', 'more'), ('occurrence', 'occurrence'), ('of', 'of'), ('either', 'either'), ('a', 'a'), ('or', 'or'), ('b', 'b'), ('or', 'or'), ('both', 'both'), ('Binary', 'binary'), ('no', 'no'), ('.', '.')] 

 Dependency tags are: 
>> [(('All', 'string'), 'det'), (('binary', 'string'), 'amod'), (('string', 'root'), 'root'), (('+', 'Prof.'), 'cc'), (('Prof.', 'string'), 'conj'), (('Dixita', 'Kagathara'), 'compound'), (('B', 'Kagathara'), 'compound'), (('Kagathara', '#'), 'compound'), (('#', 'string'), 'appos'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', '#'), 'appos'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', 'string'), 'appos'), (('2', 'Unit'), 'nummod'), (('–', 'string'), 'punct'), (('Lexical', 'Analyzer'), 'amod'), (('Analyzer', 'string'), 'conj'), (('‹#›', 'examples'), 'compound'), (('Regular', 'examples'), 'amod'), (('expression', 'examples'), 'compound'), (('examples', 'Analyzer'), 'appos'), (('0', 'occurrence'), 'nummod'), (('or', 'more'), 'cc'), (('more', '0'), 'conj'), (('occurrence', 'string'), 'conj'), (('of', 'occurrence'), 'case'), (('either', 'a'), 'cc:preconj'), (('a', 'occurrence'), 'det'), (('or', 'b'), 'cc'), (('b', 'a'), 'conj'), (('or', 'both'), 'cc'), (('both', '1'), 'conj'), (('1', 'occurrence'), 'nummod'), (('or', 'more'), 'cc'), (('more', '1'), 'conj'), (('occurrence', 'occurrence'), 'nmod'), (('of', 'a'), 'case'), (('either', 'a'), 'cc:preconj'), (('a', 'occurrence'), 'nmod'), (('or', 'b'), 'cc'), (('b', 'a'), 'conj'), (('or', 'Binary'), 'cc'), (('both', 'Binary'), 'det'), (('Binary', 'a'), 'conj'), (('no', 'Binary'), 'discourse'), (('.', 'occurrence'), 'punct')]

 Named Entities are: 
>> [('2', 'CARDINAL'), ('1', 'CARDINAL')]

========================== Sentence 47 ===========================

 ends with 0  Binary no. 

Tokens are: 
>> ['ends', 'with', '0', 'Binary', 'no', '.'] 

 UPOS tags are: 
>> [('ends', 'VERB'), ('with', 'ADP'), ('0', 'NUM'), ('Binary', 'ADJ'), ('no', 'INTJ'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('ends', 'VBZ'), ('with', 'IN'), ('0', 'CD'), ('Binary', 'JJ'), ('no', 'UH'), ('.', '.')] 

 Lemmas are: 
>> [('ends', 'end'), ('with', 'with'), ('0', '0'), ('Binary', 'binary'), ('no', 'no'), ('.', '.')] 

 Dependency tags are: 
>> [(('ends', 'root'), 'root'), (('with', 'Binary'), 'case'), (('0', 'Binary'), 'nummod'), (('Binary', 'ends'), 'obl'), (('no', 'ends'), 'discourse'), (('.', 'ends'), 'punct')]

 Named Entities are: 
>> [('0', 'CARDINAL')]

========================== Sentence 48 ===========================

 ends with 1  Binary no. 

Tokens are: 
>> ['ends', 'with', '1', 'Binary', 'no', '.'] 

 UPOS tags are: 
>> [('ends', 'VERB'), ('with', 'ADP'), ('1', 'NUM'), ('Binary', 'ADJ'), ('no', 'INTJ'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('ends', 'VBZ'), ('with', 'IN'), ('1', 'CD'), ('Binary', 'JJ'), ('no', 'UH'), ('.', '.')] 

 Lemmas are: 
>> [('ends', 'end'), ('with', 'with'), ('1', '1'), ('Binary', 'binary'), ('no', 'no'), ('.', '.')] 

 Dependency tags are: 
>> [(('ends', 'root'), 'root'), (('with', 'Binary'), 'case'), (('1', 'Binary'), 'nummod'), (('Binary', 'ends'), 'obl'), (('no', 'ends'), 'discourse'), (('.', 'ends'), 'punct')]

 Named Entities are: 
>> [('1', 'CARDINAL')]

========================== Sentence 49 ===========================

 starts and ends with 1  String starts and ends with same character           +  *           Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Regular expression examples 

Tokens are: 
>> ['starts', 'and', 'ends', 'with', '1', 'String', 'starts', 'and', 'ends', 'with', 'same', 'character', '+', '*', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '2', '–', 'Lexical', 'Analyzer', '‹#›', 'Regular', 'expression', 'examples'] 

 UPOS tags are: 
>> [('starts', 'VERB'), ('and', 'CCONJ'), ('ends', 'VERB'), ('with', 'ADP'), ('1', 'NUM'), ('String', 'NOUN'), ('starts', 'NOUN'), ('and', 'CCONJ'), ('ends', 'VERB'), ('with', 'ADP'), ('same', 'ADJ'), ('character', 'NOUN'), ('+', 'SYM'), ('*', 'PUNCT'), ('Prof.', 'NOUN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'ADJ'), ('Analyzer', 'NOUN'), ('‹#›', 'NOUN'), ('Regular', 'ADJ'), ('expression', 'NOUN'), ('examples', 'NOUN')] 

 XPOS tags are: 
>> [('starts', 'VBZ'), ('and', 'CC'), ('ends', 'VBZ'), ('with', 'IN'), ('1', 'CD'), ('String', 'NN'), ('starts', 'NNS'), ('and', 'CC'), ('ends', 'VBZ'), ('with', 'IN'), ('same', 'JJ'), ('character', 'NN'), ('+', 'SYM'), ('*', 'NFP'), ('Prof.', 'NN'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('2', 'CD'), ('–', ':'), ('Lexical', 'JJ'), ('Analyzer', 'NN'), ('‹#›', 'NN'), ('Regular', 'JJ'), ('expression', 'NN'), ('examples', 'NNS')] 

 Lemmas are: 
>> [('starts', 'start'), ('and', 'and'), ('ends', 'end'), ('with', 'with'), ('1', '1'), ('String', 'string'), ('starts', 'start'), ('and', 'and'), ('ends', 'end'), ('with', 'with'), ('same', 'same'), ('character', 'character'), ('+', '+'), ('*', '*'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('2', '2'), ('–', '-'), ('Lexical', 'lexical'), ('Analyzer', 'analyzer'), ('‹#›', '‹#›'), ('Regular', 'regular'), ('expression', 'expression'), ('examples', 'example')] 

 Dependency tags are: 
>> [(('starts', 'root'), 'root'), (('and', 'ends'), 'cc'), (('ends', 'starts'), 'conj'), (('with', 'starts'), 'case'), (('1', 'starts'), 'nummod'), (('String', 'starts'), 'compound'), (('starts', 'ends'), 'obl'), (('and', 'ends'), 'cc'), (('ends', 'starts'), 'conj'), (('with', 'character'), 'case'), (('same', 'character'), 'amod'), (('character', 'ends'), 'obl'), (('+', 'Prof.'), 'cc'), (('*', 'Prof.'), 'punct'), (('Prof.', 'character'), 'conj'), (('Dixita', 'Kagathara'), 'compound'), (('B', 'Kagathara'), 'compound'), (('Kagathara', '#'), 'compound'), (('#', 'character'), 'appos'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', '#'), 'appos'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', '#'), 'appos'), (('2', 'Unit'), 'nummod'), (('–', 'Analyzer'), 'punct'), (('Lexical', 'Analyzer'), 'amod'), (('Analyzer', 'examples'), 'compound'), (('‹#›', 'examples'), 'compound'), (('Regular', 'examples'), 'amod'), (('expression', 'examples'), 'compound'), (('examples', 'Unit'), 'appos')]

 Named Entities are: 
>> [('1  String', 'WORK_OF_ART'), ('2', 'CARDINAL')]

========================== Sentence 50 ===========================

 All string of a and b starting with a   String of 0 and 1 ends with 00   String ends with abb    String starts with 1 and ends with 0   All binary string with at least 3 characters and 3rd character should be zero  Language which consist of exactly two b’s over the set    … * …  …  …  …  …     Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Regular expression examples 

Tokens are: 
>> ['All', 'string', 'of', 'a', 'and', 'b', 'starting', 'with', 'a', 'String', 'of', '0', 'and', '1', 'ends', 'with', '00', 'String', 'ends', 'with', 'abb', 'String', 'starts', 'with', '1', 'and', 'ends', 'with', '0', 'All', 'binary', 'string', 'with', 'at', 'least', '3', 'characters', 'and', '3rd', 'character', 'should', 'be', 'zero', 'Language', 'which', 'consist', 'of', 'exactly', 'two', 'b’s', 'over', 'the', 'set', '…', '*', '…', '…', '…', '…', '…', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '2', '–', 'Lexical', 'Analyzer', '‹#›', 'Regular', 'expression', 'examples'] 

 UPOS tags are: 
>> [('All', 'DET'), ('string', 'NOUN'), ('of', 'ADP'), ('a', 'DET'), ('and', 'CCONJ'), ('b', 'NOUN'), ('starting', 'NOUN'), ('with', 'ADP'), ('a', 'DET'), ('String', 'NOUN'), ('of', 'ADP'), ('0', 'NUM'), ('and', 'CCONJ'), ('1', 'NUM'), ('ends', 'NOUN'), ('with', 'ADP'), ('00', 'NUM'), ('String', 'NOUN'), ('ends', 'NOUN'), ('with', 'ADP'), ('abb', 'NOUN'), ('String', 'PROPN'), ('starts', 'VERB'), ('with', 'ADP'), ('1', 'NUM'), ('and', 'CCONJ'), ('ends', 'NOUN'), ('with', 'ADP'), ('0', 'NUM'), ('All', 'DET'), ('binary', 'ADJ'), ('string', 'NOUN'), ('with', 'ADP'), ('at', 'ADP'), ('least', 'ADJ'), ('3', 'NUM'), ('characters', 'NOUN'), ('and', 'CCONJ'), ('3rd', 'ADJ'), ('character', 'NOUN'), ('should', 'AUX'), ('be', 'AUX'), ('zero', 'ADJ'), ('Language', 'NOUN'), ('which', 'PRON'), ('consist', 'VERB'), ('of', 'ADP'), ('exactly', 'ADV'), ('two', 'NUM'), ('b’s', 'NOUN'), ('over', 'ADP'), ('the', 'DET'), ('set', 'NOUN'), ('…', 'PUNCT'), ('*', 'PUNCT'), ('…', 'PUNCT'), ('…', 'PUNCT'), ('…', 'PUNCT'), ('…', 'PUNCT'), ('…', 'PUNCT'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'ADJ'), ('Analyzer', 'NOUN'), ('‹#›', 'NOUN'), ('Regular', 'ADJ'), ('expression', 'NOUN'), ('examples', 'NOUN')] 

 XPOS tags are: 
>> [('All', 'DT'), ('string', 'NN'), ('of', 'IN'), ('a', 'DT'), ('and', 'CC'), ('b', 'NN'), ('starting', 'NN'), ('with', 'IN'), ('a', 'DT'), ('String', 'NN'), ('of', 'IN'), ('0', 'CD'), ('and', 'CC'), ('1', 'CD'), ('ends', 'NNS'), ('with', 'IN'), ('00', 'CD'), ('String', 'NN'), ('ends', 'NNS'), ('with', 'IN'), ('abb', 'NN'), ('String', 'NNP'), ('starts', 'VBZ'), ('with', 'IN'), ('1', 'CD'), ('and', 'CC'), ('ends', 'NNS'), ('with', 'IN'), ('0', 'CD'), ('All', 'DT'), ('binary', 'JJ'), ('string', 'NN'), ('with', 'IN'), ('at', 'IN'), ('least', 'JJS'), ('3', 'CD'), ('characters', 'NNS'), ('and', 'CC'), ('3rd', 'JJ'), ('character', 'NN'), ('should', 'MD'), ('be', 'VB'), ('zero', 'JJ'), ('Language', 'NN'), ('which', 'WDT'), ('consist', 'VBP'), ('of', 'IN'), ('exactly', 'RB'), ('two', 'CD'), ('b’s', 'NNS'), ('over', 'IN'), ('the', 'DT'), ('set', 'NN'), ('…', ':'), ('*', 'NFP'), ('…', ':'), ('…', ':'), ('…', ':'), ('…', ':'), ('…', ':'), ('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('2', 'CD'), ('–', ':'), ('Lexical', 'JJ'), ('Analyzer', 'NN'), ('‹#›', 'NN'), ('Regular', 'JJ'), ('expression', 'NN'), ('examples', 'NNS')] 

 Lemmas are: 
>> [('All', 'all'), ('string', 'string'), ('of', 'of'), ('a', 'a'), ('and', 'and'), ('b', 'b'), ('starting', 'starting'), ('with', 'with'), ('a', 'a'), ('String', 'string'), ('of', 'of'), ('0', '0'), ('and', 'and'), ('1', '1'), ('ends', 'end'), ('with', 'with'), ('00', '00'), ('String', 'string'), ('ends', 'end'), ('with', 'with'), ('abb', 'abb'), ('String', 'String'), ('starts', 'start'), ('with', 'with'), ('1', '1'), ('and', 'and'), ('ends', 'end'), ('with', 'with'), ('0', '0'), ('All', 'all'), ('binary', 'binary'), ('string', 'string'), ('with', 'with'), ('at', 'at'), ('least', 'least'), ('3', '3'), ('characters', 'character'), ('and', 'and'), ('3rd', '3rd'), ('character', 'character'), ('should', 'should'), ('be', 'be'), ('zero', 'zero'), ('Language', 'language'), ('which', 'which'), ('consist', 'consist'), ('of', 'of'), ('exactly', 'exactly'), ('two', 'two'), ('b’s', 'b’s'), ('over', 'over'), ('the', 'the'), ('set', 'set'), ('…', '…'), ('*', '*'), ('…', '…'), ('…', '…'), ('…', '…'), ('…', '…'), ('…', '…'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('2', '2'), ('–', '-'), ('Lexical', 'lexical'), ('Analyzer', 'analyzer'), ('‹#›', '‹#›'), ('Regular', 'regular'), ('expression', 'expression'), ('examples', 'example')] 

 Dependency tags are: 
>> [(('All', 'string'), 'det'), (('string', 'starts'), 'nsubj'), (('of', 'starting'), 'case'), (('a', 'starting'), 'det'), (('and', 'b'), 'cc'), (('b', 'a'), 'conj'), (('starting', 'string'), 'nmod'), (('with', 'String'), 'case'), (('a', 'String'), 'det'), (('String', 'starting'), 'nmod'), (('of', 'ends'), 'case'), (('0', 'ends'), 'nummod'), (('and', '1'), 'cc'), (('1', '0'), 'conj'), (('ends', 'String'), 'nmod'), (('with', 'ends'), 'case'), (('00', 'ends'), 'nummod'), (('String', 'ends'), 'compound'), (('ends', 'ends'), 'nmod'), (('with', 'String'), 'case'), (('abb', 'String'), 'compound'), (('String', 'ends'), 'nmod'), (('starts', 'root'), 'root'), (('with', '1'), 'case'), (('1', 'starts'), 'obl'), (('and', 'ends'), 'cc'), (('ends', '1'), 'conj'), (('with', 'string'), 'case'), (('0', 'string'), 'nummod'), (('All', 'string'), 'det'), (('binary', 'string'), 'amod'), (('string', 'starts'), 'obl'), (('with', 'characters'), 'case'), (('at', 'least'), 'case'), (('least', '3'), 'nmod'), (('3', 'characters'), 'nummod'), (('characters', 'string'), 'nmod'), (('and', 'character'), 'cc'), (('3rd', 'character'), 'amod'), (('character', 'characters'), 'conj'), (('should', 'Language'), 'aux'), (('be', 'Language'), 'cop'), (('zero', 'Language'), 'amod'), (('Language', 'starts'), 'conj'), (('which', 'consist'), 'nsubj'), (('consist', 'Language'), 'acl:relcl'), (('of', 'b’s'), 'case'), (('exactly', 'two'), 'advmod'), (('two', 'b’s'), 'nummod'), (('b’s', 'consist'), 'obl'), (('over', 'set'), 'case'), (('the', 'set'), 'det'), (('set', 'b’s'), 'nmod'), (('…', 'b’s'), 'punct'), (('*', 'set'), 'punct'), (('…', 'Prof.'), 'punct'), (('…', 'Prof.'), 'punct'), (('…', 'Prof.'), 'punct'), (('…', 'Prof.'), 'punct'), (('…', 'Prof.'), 'punct'), (('Prof.', 'b’s'), 'appos'), (('Dixita', 'Prof.'), 'flat'), (('B', 'Prof.'), 'flat'), (('Kagathara', '#'), 'compound'), (('#', 'Prof.'), 'appos'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', 'Prof.'), 'appos'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', 'Prof.'), 'appos'), (('2', 'Unit'), 'nummod'), (('–', 'examples'), 'punct'), (('Lexical', 'Analyzer'), 'amod'), (('Analyzer', 'examples'), 'compound'), (('‹#›', 'examples'), 'compound'), (('Regular', 'examples'), 'amod'), (('expression', 'examples'), 'compound'), (('examples', 'Prof.'), 'appos')]

 Named Entities are: 
>> [('a   String of 0', 'WORK_OF_ART'), ('1', 'CARDINAL'), ('1', 'CARDINAL'), ('at least 3', 'CARDINAL'), ('3rd', 'ORDINAL'), ('zero', 'CARDINAL'), ('two', 'CARDINAL')]

========================== Sentence 51 ===========================

 The language with  such that 3rd character from right end of the string is always a. 

Tokens are: 
>> ['The', 'language', 'with', 'such', 'that', '3rd', 'character', 'from', 'right', 'end', 'of', 'the', 'string', 'is', 'always', 'a.'] 

 UPOS tags are: 
>> [('The', 'DET'), ('language', 'NOUN'), ('with', 'ADP'), ('such', 'DET'), ('that', 'DET'), ('3rd', 'ADJ'), ('character', 'NOUN'), ('from', 'ADP'), ('right', 'ADJ'), ('end', 'NOUN'), ('of', 'ADP'), ('the', 'DET'), ('string', 'NOUN'), ('is', 'AUX'), ('always', 'ADV'), ('a.', 'PUNCT')] 

 XPOS tags are: 
>> [('The', 'DT'), ('language', 'NN'), ('with', 'IN'), ('such', 'PDT'), ('that', 'DT'), ('3rd', 'JJ'), ('character', 'NN'), ('from', 'IN'), ('right', 'JJ'), ('end', 'NN'), ('of', 'IN'), ('the', 'DT'), ('string', 'NN'), ('is', 'VBZ'), ('always', 'RB'), ('a.', '.')] 

 Lemmas are: 
>> [('The', 'the'), ('language', 'language'), ('with', 'with'), ('such', 'such'), ('that', 'that'), ('3rd', '3rd'), ('character', 'character'), ('from', 'from'), ('right', 'right'), ('end', 'end'), ('of', 'of'), ('the', 'the'), ('string', 'string'), ('is', 'be'), ('always', 'always'), ('a.', 'a.')] 

 Dependency tags are: 
>> [(('The', 'language'), 'det'), (('language', 'is'), 'nsubj'), (('with', 'character'), 'case'), (('such', 'character'), 'det:predet'), (('that', 'character'), 'det'), (('3rd', 'character'), 'amod'), (('character', 'language'), 'nmod'), (('from', 'end'), 'case'), (('right', 'end'), 'amod'), (('end', 'character'), 'nmod'), (('of', 'string'), 'case'), (('the', 'string'), 'det'), (('string', 'end'), 'nmod'), (('is', 'root'), 'root'), (('always', 'is'), 'advmod'), (('a.', 'is'), 'punct')]

 Named Entities are: 
>> [('3rd', 'ORDINAL')]

========================== Sentence 52 ===========================

 Any no. of  followed by any no. of  followed by any no. of   String should contain at least three   String should contain exactly two   Length of string should be at least 1 and at most 3  No. of zero should be multiple of 3   …  …  ….  ….  ….  ….     Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Regular expression examples 

Tokens are: 
>> ['Any', 'no', '.', 'of', 'followed', 'by', 'any', 'no', '.', 'of', 'followed', 'by', 'any', 'no.', 'of', 'String', 'should', 'contain', 'at', 'least', 'three', 'String', 'should', 'contain', 'exactly', 'two', 'Length', 'of', 'string', 'should', 'be', 'at', 'least', '1', 'and', 'at', 'most', '3', 'No.', 'of', 'zero', 'should', 'be', 'multiple', 'of', '3', '…', '…', '….', '….', '….', '….', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '2', '–', 'Lexical', 'Analyzer', '‹#›', 'Regular', 'expression', 'examples'] 

 UPOS tags are: 
>> [('Any', 'DET'), ('no', 'DET'), ('.', 'PUNCT'), ('of', 'ADP'), ('followed', 'VERB'), ('by', 'ADP'), ('any', 'DET'), ('no', 'DET'), ('.', 'PUNCT'), ('of', 'ADP'), ('followed', 'VERB'), ('by', 'ADP'), ('any', 'DET'), ('no.', 'NOUN'), ('of', 'ADP'), ('String', 'PROPN'), ('should', 'AUX'), ('contain', 'VERB'), ('at', 'ADP'), ('least', 'ADJ'), ('three', 'NUM'), ('String', 'PROPN'), ('should', 'AUX'), ('contain', 'VERB'), ('exactly', 'ADV'), ('two', 'NUM'), ('Length', 'NOUN'), ('of', 'ADP'), ('string', 'NOUN'), ('should', 'AUX'), ('be', 'AUX'), ('at', 'ADP'), ('least', 'ADJ'), ('1', 'NUM'), ('and', 'CCONJ'), ('at', 'ADP'), ('most', 'ADJ'), ('3', 'NUM'), ('No.', 'NOUN'), ('of', 'ADP'), ('zero', 'NOUN'), ('should', 'AUX'), ('be', 'AUX'), ('multiple', 'ADJ'), ('of', 'ADP'), ('3', 'NUM'), ('…', 'PUNCT'), ('…', 'PUNCT'), ('….', 'NOUN'), ('….', 'NOUN'), ('….', 'NOUN'), ('….', 'PUNCT'), ('Prof.', 'NOUN'), ('Dixita', 'PROPN'), ('B', 'NOUN'), ('Kagathara', 'NOUN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'PUNCT'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'ADJ'), ('Analyzer', 'NOUN'), ('‹#›', 'NOUN'), ('Regular', 'ADJ'), ('expression', 'NOUN'), ('examples', 'NOUN')] 

 XPOS tags are: 
>> [('Any', 'DT'), ('no', 'DT'), ('.', '.'), ('of', 'IN'), ('followed', 'VBN'), ('by', 'IN'), ('any', 'DT'), ('no', 'DT'), ('.', '.'), ('of', 'IN'), ('followed', 'VBN'), ('by', 'IN'), ('any', 'DT'), ('no.', 'NN'), ('of', 'IN'), ('String', 'NNP'), ('should', 'MD'), ('contain', 'VB'), ('at', 'IN'), ('least', 'JJS'), ('three', 'CD'), ('String', 'NNP'), ('should', 'MD'), ('contain', 'VB'), ('exactly', 'RB'), ('two', 'CD'), ('Length', 'NN'), ('of', 'IN'), ('string', 'NN'), ('should', 'MD'), ('be', 'VB'), ('at', 'IN'), ('least', 'JJS'), ('1', 'CD'), ('and', 'CC'), ('at', 'IN'), ('most', 'JJS'), ('3', 'CD'), ('No.', 'NN'), ('of', 'IN'), ('zero', 'NN'), ('should', 'MD'), ('be', 'VB'), ('multiple', 'JJ'), ('of', 'IN'), ('3', 'CD'), ('…', ':'), ('…', ','), ('….', 'NN'), ('….', 'NN'), ('….', 'NN'), ('….', ','), ('Prof.', 'NN'), ('Dixita', 'NNP'), ('B', 'NN'), ('Kagathara', 'NN'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', ','), ('Unit', 'NN'), ('2', 'CD'), ('–', ':'), ('Lexical', 'JJ'), ('Analyzer', 'NN'), ('‹#›', 'NN'), ('Regular', 'JJ'), ('expression', 'NN'), ('examples', 'NNS')] 

 Lemmas are: 
>> [('Any', 'any'), ('no', 'no'), ('.', '.'), ('of', 'of'), ('followed', 'follow'), ('by', 'by'), ('any', 'any'), ('no', 'no'), ('.', '.'), ('of', 'of'), ('followed', 'follow'), ('by', 'by'), ('any', 'any'), ('no.', 'no.'), ('of', 'of'), ('String', 'String'), ('should', 'should'), ('contain', 'contain'), ('at', 'at'), ('least', 'least'), ('three', 'three'), ('String', 'String'), ('should', 'should'), ('contain', 'contain'), ('exactly', 'exactly'), ('two', 'two'), ('Length', 'length'), ('of', 'of'), ('string', 'string'), ('should', 'should'), ('be', 'be'), ('at', 'at'), ('least', 'least'), ('1', '1'), ('and', 'and'), ('at', 'at'), ('most', 'most'), ('3', '3'), ('No.', 'no.'), ('of', 'of'), ('zero', 'zero'), ('should', 'should'), ('be', 'be'), ('multiple', 'multiple'), ('of', 'of'), ('3', '3'), ('…', '…'), ('…', '…'), ('….', '..'), ('….', '..'), ('….', '..'), ('….', '..'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', "''"), ('Unit', 'unit'), ('2', '2'), ('–', '-'), ('Lexical', 'lexical'), ('Analyzer', 'analyzer'), ('‹#›', '‹#›'), ('Regular', 'regular'), ('expression', 'expression'), ('examples', 'example')] 

 Dependency tags are: 
>> [(('Any', 'contain'), 'nsubj'), (('no', 'contain'), 'nsubj'), (('.', 'no'), 'punct'), (('of', 'followed'), 'mark'), (('followed', 'no'), 'acl'), (('by', 'no'), 'case'), (('any', 'followed'), 'obl'), (('no', 'followed'), 'obl'), (('.', 'followed'), 'punct'), (('of', 'followed'), 'mark'), (('followed', 'followed'), 'advcl'), (('by', 'no.'), 'case'), (('any', 'no.'), 'det'), (('no.', 'followed'), 'obl'), (('of', 'String'), 'case'), (('String', 'no.'), 'nmod'), (('should', 'contain'), 'aux'), (('contain', 'root'), 'root'), (('at', 'least'), 'case'), (('least', 'three'), 'nmod'), (('three', 'String'), 'nummod'), (('String', 'contain'), 'nsubj'), (('should', 'contain'), 'aux'), (('contain', 'contain'), 'ccomp'), (('exactly', 'two'), 'advmod'), (('two', 'Length'), 'nummod'), (('Length', 'contain'), 'obj'), (('of', 'string'), 'case'), (('string', 'Length'), 'nmod'), (('should', '1'), 'aux'), (('be', '1'), 'cop'), (('at', 'least'), 'case'), (('least', '1'), 'nmod'), (('1', 'contain'), 'obj'), (('and', 'multiple'), 'cc'), (('at', '3'), 'case'), (('most', 'No.'), 'amod'), (('3', 'No.'), 'nummod'), (('No.', 'multiple'), 'nsubj'), (('of', 'zero'), 'case'), (('zero', 'No.'), 'nmod'), (('should', 'multiple'), 'aux'), (('be', 'multiple'), 'cop'), (('multiple', '1'), 'conj'), (('of', '3'), 'case'), (('3', 'multiple'), 'obl'), (('…', 'multiple'), 'punct'), (('…', 'multiple'), 'punct'), (('….', '….'), 'compound'), (('….', '….'), 'compound'), (('….', 'multiple'), 'obl'), (('….', '….'), 'punct'), (('Prof.', 'B'), 'compound'), (('Dixita', 'B'), 'compound'), (('B', '#'), 'compound'), (('Kagathara', '#'), 'compound'), (('#', '….'), 'appos'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', '#'), 'appos'), ((')', 'CD'), 'punct'), (('\uf077', 'CD'), 'punct'), (('Unit', '#'), 'appos'), (('2', 'Unit'), 'nummod'), (('–', 'examples'), 'punct'), (('Lexical', 'Analyzer'), 'amod'), (('Analyzer', 'examples'), 'compound'), (('‹#›', 'examples'), 'compound'), (('Regular', 'examples'), 'amod'), (('expression', 'examples'), 'compound'), (('examples', 'Unit'), 'appos')]

 Named Entities are: 
>> [('at least three', 'CARDINAL'), ('two', 'CARDINAL'), ('at least 1', 'CARDINAL'), ('3', 'CARDINAL'), ('zero', 'CARDINAL'), ('3', 'CARDINAL'), ('2', 'CARDINAL')]

========================== Sentence 53 ===========================

 The language with  where  should be multiple of 3  Even no. of 0  String should have odd length  String should have even length  String start with 0 and has odd length  String start with 1 and has even length  All string begins or ends with 00 or 11     ….  ….  ….  ….  ….       Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Regular expression examples Language of all string containing both 11 and 00 as substring   String ending with 1 and not contain 00   Language of C identifier               Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Regular definition A regular definition gives names to certain regular expressions and uses those names in other regular expressions. 

Tokens are: 
>> ['The', 'language', 'with', 'where', 'should', 'be', 'multiple', 'of', '3', 'Even', 'no', '.', 'of', '0', 'String', 'should', 'have', 'odd', 'length', 'String', 'should', 'have', 'even', 'length', 'String', 'start', 'with', '0', 'and', 'has', 'odd', 'length', 'String', 'start', 'with', '1', 'and', 'has', 'even', 'length', 'All', 'string', 'begins', 'or', 'ends', 'with', '00', 'or', '11', '….', '….', '….', '….', '….', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '2', '–', 'Lexical', 'Analyzer', '‹#›', 'Regular', 'expression', 'examples', 'Language', 'of', 'all', 'string', 'containing', 'both', '11', 'and', '00', 'as', 'substring', 'String', 'ending', 'with', '1', 'and', 'not', 'contain', '00', 'Language', 'of', 'C', 'identifier', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '2', '–', 'Lexical', 'Analyzer', '‹#›', 'Regular', 'definition', 'A', 'regular', 'definition', 'gives', 'names', 'to', 'certain', 'regular', 'expressions', 'and', 'uses', 'those', 'names', 'in', 'other', 'regular', 'expressions', '.'] 

 UPOS tags are: 
>> [('The', 'DET'), ('language', 'NOUN'), ('with', 'ADP'), ('where', 'SCONJ'), ('should', 'AUX'), ('be', 'AUX'), ('multiple', 'ADJ'), ('of', 'ADP'), ('3', 'NUM'), ('Even', 'ADV'), ('no', 'DET'), ('.', 'PUNCT'), ('of', 'ADP'), ('0', 'NUM'), ('String', 'NOUN'), ('should', 'AUX'), ('have', 'VERB'), ('odd', 'ADJ'), ('length', 'NOUN'), ('String', 'NOUN'), ('should', 'AUX'), ('have', 'VERB'), ('even', 'ADV'), ('length', 'NOUN'), ('String', 'NOUN'), ('start', 'NOUN'), ('with', 'ADP'), ('0', 'NUM'), ('and', 'CCONJ'), ('has', 'VERB'), ('odd', 'ADJ'), ('length', 'NOUN'), ('String', 'NOUN'), ('start', 'NOUN'), ('with', 'ADP'), ('1', 'NUM'), ('and', 'CCONJ'), ('has', 'VERB'), ('even', 'ADV'), ('length', 'NOUN'), ('All', 'DET'), ('string', 'NOUN'), ('begins', 'NOUN'), ('or', 'CCONJ'), ('ends', 'NOUN'), ('with', 'ADP'), ('00', 'NUM'), ('or', 'CCONJ'), ('11', 'NUM'), ('….', 'SYM'), ('….', 'SYM'), ('….', 'SYM'), ('….', 'NOUN'), ('….', 'PUNCT'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'PROPN'), (')', 'PUNCT'), ('\uf077', 'PUNCT'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'SYM'), ('Lexical', 'ADJ'), ('Analyzer', 'NOUN'), ('‹#›', 'ADP'), ('Regular', 'ADJ'), ('expression', 'NOUN'), ('examples', 'NOUN'), ('Language', 'NOUN'), ('of', 'ADP'), ('all', 'DET'), ('string', 'NOUN'), ('containing', 'VERB'), ('both', 'CCONJ'), ('11', 'NUM'), ('and', 'CCONJ'), ('00', 'NUM'), ('as', 'ADP'), ('substring', 'NOUN'), ('String', 'PROPN'), ('ending', 'VERB'), ('with', 'ADP'), ('1', 'NUM'), ('and', 'CCONJ'), ('not', 'PART'), ('contain', 'VERB'), ('00', 'NUM'), ('Language', 'PROPN'), ('of', 'ADP'), ('C', 'PROPN'), ('identifier', 'NOUN'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'PROPN'), (')', 'PUNCT'), ('\uf077', 'PUNCT'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'SYM'), ('Lexical', 'ADJ'), ('Analyzer', 'PROPN'), ('‹#›', 'ADP'), ('Regular', 'ADJ'), ('definition', 'NOUN'), ('A', 'DET'), ('regular', 'ADJ'), ('definition', 'NOUN'), ('gives', 'VERB'), ('names', 'NOUN'), ('to', 'ADP'), ('certain', 'ADJ'), ('regular', 'ADJ'), ('expressions', 'NOUN'), ('and', 'CCONJ'), ('uses', 'VERB'), ('those', 'DET'), ('names', 'NOUN'), ('in', 'ADP'), ('other', 'ADJ'), ('regular', 'ADJ'), ('expressions', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('The', 'DT'), ('language', 'NN'), ('with', 'IN'), ('where', 'WRB'), ('should', 'MD'), ('be', 'VB'), ('multiple', 'JJ'), ('of', 'IN'), ('3', 'CD'), ('Even', 'RB'), ('no', 'DT'), ('.', '.'), ('of', 'IN'), ('0', 'CD'), ('String', 'NN'), ('should', 'MD'), ('have', 'VB'), ('odd', 'JJ'), ('length', 'NN'), ('String', 'NN'), ('should', 'MD'), ('have', 'VB'), ('even', 'RB'), ('length', 'NN'), ('String', 'NN'), ('start', 'NN'), ('with', 'IN'), ('0', 'CD'), ('and', 'CC'), ('has', 'VBZ'), ('odd', 'JJ'), ('length', 'NN'), ('String', 'NN'), ('start', 'NN'), ('with', 'IN'), ('1', 'CD'), ('and', 'CC'), ('has', 'VBZ'), ('even', 'RB'), ('length', 'NN'), ('All', 'DT'), ('string', 'NN'), ('begins', 'NNS'), ('or', 'CC'), ('ends', 'NNS'), ('with', 'IN'), ('00', 'CD'), ('or', 'CC'), ('11', 'CD'), ('….', 'SYM'), ('….', 'SYM'), ('….', 'SYM'), ('….', 'NN'), ('….', ','), ('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NNP'), (')', '-RRB-'), ('\uf077', ','), ('Unit', 'NN'), ('2', 'CD'), ('–', 'SYM'), ('Lexical', 'JJ'), ('Analyzer', 'NN'), ('‹#›', 'IN'), ('Regular', 'JJ'), ('expression', 'NN'), ('examples', 'NNS'), ('Language', 'NN'), ('of', 'IN'), ('all', 'DT'), ('string', 'NN'), ('containing', 'VBG'), ('both', 'CC'), ('11', 'CD'), ('and', 'CC'), ('00', 'CD'), ('as', 'IN'), ('substring', 'NN'), ('String', 'NNP'), ('ending', 'VBG'), ('with', 'IN'), ('1', 'CD'), ('and', 'CC'), ('not', 'RB'), ('contain', 'VB'), ('00', 'CD'), ('Language', 'NNP'), ('of', 'IN'), ('C', 'NNP'), ('identifier', 'NN'), ('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NNP'), (')', '-RRB-'), ('\uf077', ','), ('Unit', 'NN'), ('2', 'CD'), ('–', 'SYM'), ('Lexical', 'NNP'), ('Analyzer', 'NNP'), ('‹#›', 'IN'), ('Regular', 'JJ'), ('definition', 'NN'), ('A', 'DT'), ('regular', 'JJ'), ('definition', 'NN'), ('gives', 'VBZ'), ('names', 'NNS'), ('to', 'IN'), ('certain', 'JJ'), ('regular', 'JJ'), ('expressions', 'NNS'), ('and', 'CC'), ('uses', 'VBZ'), ('those', 'DT'), ('names', 'NNS'), ('in', 'IN'), ('other', 'JJ'), ('regular', 'JJ'), ('expressions', 'NNS'), ('.', '.')] 

 Lemmas are: 
>> [('The', 'the'), ('language', 'language'), ('with', 'with'), ('where', 'where'), ('should', 'should'), ('be', 'be'), ('multiple', 'multiple'), ('of', 'of'), ('3', '3'), ('Even', 'even'), ('no', 'no'), ('.', '.'), ('of', 'of'), ('0', '0'), ('String', 'string'), ('should', 'should'), ('have', 'have'), ('odd', 'odd'), ('length', 'length'), ('String', 'string'), ('should', 'should'), ('have', 'have'), ('even', 'even'), ('length', 'length'), ('String', 'string'), ('start', 'start'), ('with', 'with'), ('0', '0'), ('and', 'and'), ('has', 'have'), ('odd', 'odd'), ('length', 'length'), ('String', 'string'), ('start', 'start'), ('with', 'with'), ('1', '1'), ('and', 'and'), ('has', 'have'), ('even', 'even'), ('length', 'length'), ('All', 'all'), ('string', 'string'), ('begins', 'begin'), ('or', 'or'), ('ends', 'end'), ('with', 'with'), ('00', '00'), ('or', 'or'), ('11', '11'), ('….', '..'), ('….', '..'), ('….', '..'), ('….', '..'), ('….', '..'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'CD'), (')', ')'), ('\uf077', "''"), ('Unit', 'unit'), ('2', '2'), ('–', '-'), ('Lexical', 'lexical'), ('Analyzer', 'analyzer'), ('‹#›', '‹#›'), ('Regular', 'regular'), ('expression', 'expression'), ('examples', 'example'), ('Language', 'language'), ('of', 'of'), ('all', 'all'), ('string', 'string'), ('containing', 'contain'), ('both', 'both'), ('11', '11'), ('and', 'and'), ('00', '00'), ('as', 'as'), ('substring', 'substring'), ('String', 'String'), ('ending', 'end'), ('with', 'with'), ('1', '1'), ('and', 'and'), ('not', 'not'), ('contain', 'contain'), ('00', '00'), ('Language', 'Language'), ('of', 'of'), ('C', 'C'), ('identifier', 'identifier'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'CD'), (')', ')'), ('\uf077', "''"), ('Unit', 'unit'), ('2', '2'), ('–', '-'), ('Lexical', 'lexical'), ('Analyzer', 'Analyzer'), ('‹#›', '‹#›'), ('Regular', 'regular'), ('definition', 'definition'), ('A', 'a'), ('regular', 'regular'), ('definition', 'definition'), ('gives', 'give'), ('names', 'name'), ('to', 'to'), ('certain', 'certain'), ('regular', 'regular'), ('expressions', 'expression'), ('and', 'and'), ('uses', 'use'), ('those', 'that'), ('names', 'name'), ('in', 'in'), ('other', 'other'), ('regular', 'regular'), ('expressions', 'expression'), ('.', '.')] 

 Dependency tags are: 
>> [(('The', 'language'), 'det'), (('language', 'have'), 'nsubj'), (('with', 'where'), 'case'), (('where', 'multiple'), 'mark'), (('should', 'multiple'), 'aux'), (('be', 'multiple'), 'cop'), (('multiple', 'language'), 'acl:relcl'), (('of', '3'), 'case'), (('3', 'multiple'), 'obl'), (('Even', 'no'), 'advmod'), (('no', 'multiple'), 'advmod'), (('.', 'have'), 'punct'), (('of', 'String'), 'case'), (('0', 'String'), 'nummod'), (('String', 'have'), 'nsubj'), (('should', 'have'), 'aux'), (('have', 'root'), 'root'), (('odd', 'String'), 'amod'), (('length', 'String'), 'compound'), (('String', 'have'), 'obj'), (('should', 'have'), 'aux'), (('have', 'have'), 'ccomp'), (('even', 'length'), 'advmod'), (('length', 'String'), 'compound'), (('String', 'start'), 'compound'), (('start', 'have'), 'obj'), (('with', '0'), 'case'), (('0', 'start'), 'nmod'), (('and', 'has'), 'cc'), (('has', 'have'), 'conj'), (('odd', 'start'), 'amod'), (('length', 'start'), 'compound'), (('String', 'start'), 'compound'), (('start', 'has'), 'obj'), (('with', '1'), 'case'), (('1', 'start'), 'nmod'), (('and', 'has'), 'cc'), (('has', 'has'), 'conj'), (('even', 'length'), 'advmod'), (('length', 'has'), 'obj'), (('All', 'begins'), 'det'), (('string', 'begins'), 'compound'), (('begins', 'length'), 'appos'), (('or', 'ends'), 'cc'), (('ends', 'begins'), 'conj'), (('with', '….'), 'case'), (('00', '….'), 'nummod'), (('or', '11'), 'cc'), (('11', '00'), 'conj'), (('….', 'begins'), 'nmod'), (('….', '….'), 'compound'), (('….', '….'), 'compound'), (('….', 'begins'), 'conj'), (('….', 'Prof.'), 'punct'), (('Prof.', '….'), 'appos'), (('Dixita', 'Prof.'), 'flat'), (('B', 'Prof.'), 'flat'), (('Kagathara', 'Prof.'), 'flat'), (('#', 'Prof.'), 'dep'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', '#'), 'appos'), ((')', 'CD'), 'punct'), (('\uf077', 'CD'), 'punct'), (('Unit', 'Prof.'), 'conj'), (('2', 'Unit'), 'nummod'), (('–', 'Lexical'), 'case'), (('Lexical', 'Analyzer'), 'amod'), (('Analyzer', 'Unit'), 'nmod'), (('‹#›', 'examples'), 'case'), (('Regular', 'examples'), 'amod'), (('expression', 'examples'), 'compound'), (('examples', 'Language'), 'compound'), (('Language', 'Analyzer'), 'nmod'), (('of', 'string'), 'case'), (('all', 'string'), 'det'), (('string', 'Language'), 'nmod'), (('containing', 'string'), 'acl'), (('both', '11'), 'cc:preconj'), (('11', 'containing'), 'obj'), (('and', '00'), 'cc'), (('00', '11'), 'conj'), (('as', 'String'), 'case'), (('substring', 'String'), 'compound'), (('String', '11'), 'nmod'), (('ending', 'String'), 'acl'), (('with', '1'), 'case'), (('1', 'ending'), 'obl'), (('and', 'contain'), 'cc'), (('not', 'contain'), 'advmod'), (('contain', 'ending'), 'conj'), (('00', 'Language'), 'nummod'), (('Language', 'contain'), 'obj'), (('of', 'C'), 'case'), (('C', 'Language'), 'nmod'), (('identifier', 'Language'), 'nmod'), (('Prof.', 'contain'), 'obj'), (('Dixita', 'Prof.'), 'flat'), (('B', 'Prof.'), 'flat'), (('Kagathara', 'Prof.'), 'flat'), (('#', 'Prof.'), 'appos'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', 'Prof.'), 'appos'), ((')', 'CD'), 'punct'), (('\uf077', 'CD'), 'punct'), (('Unit', 'identifier'), 'appos'), (('2', 'Unit'), 'nummod'), (('–', 'Analyzer'), 'case'), (('Lexical', 'Analyzer'), 'amod'), (('Analyzer', 'Unit'), 'nmod'), (('‹#›', 'definition'), 'case'), (('Regular', 'definition'), 'amod'), (('definition', 'gives'), 'obl'), (('A', 'definition'), 'det'), (('regular', 'definition'), 'amod'), (('definition', 'gives'), 'nsubj'), (('gives', 'Unit'), 'acl:relcl'), (('names', 'gives'), 'obj'), (('to', 'expressions'), 'case'), (('certain', 'expressions'), 'amod'), (('regular', 'expressions'), 'amod'), (('expressions', 'gives'), 'obl'), (('and', 'uses'), 'cc'), (('uses', 'gives'), 'conj'), (('those', 'names'), 'det'), (('names', 'uses'), 'obj'), (('in', 'expressions'), 'case'), (('other', 'expressions'), 'amod'), (('regular', 'expressions'), 'amod'), (('expressions', 'uses'), 'obl'), (('.', 'have'), 'punct')]

 Named Entities are: 
>> [('3', 'CARDINAL'), ('0', 'CARDINAL'), ('1', 'CARDINAL'), ('00 or 11', 'CARDINAL'), ('2', 'CARDINAL'), ('11', 'CARDINAL'), ('1', 'CARDINAL'), ('2', 'CARDINAL')]

========================== Sentence 54 ===========================

 Regular definition is a sequence of definitions of the form:   …… 

Tokens are: 
>> ['Regular', 'definition', 'is', 'a', 'sequence', 'of', 'definitions', 'of', 'the', 'form', ':', '……'] 

 UPOS tags are: 
>> [('Regular', 'ADJ'), ('definition', 'NOUN'), ('is', 'AUX'), ('a', 'DET'), ('sequence', 'NOUN'), ('of', 'ADP'), ('definitions', 'NOUN'), ('of', 'ADP'), ('the', 'DET'), ('form', 'NOUN'), (':', 'PUNCT'), ('……', 'PUNCT')] 

 XPOS tags are: 
>> [('Regular', 'JJ'), ('definition', 'NN'), ('is', 'VBZ'), ('a', 'DT'), ('sequence', 'NN'), ('of', 'IN'), ('definitions', 'NNS'), ('of', 'IN'), ('the', 'DT'), ('form', 'NN'), (':', ':'), ('……', 'NFP')] 

 Lemmas are: 
>> [('Regular', 'regular'), ('definition', 'definition'), ('is', 'be'), ('a', 'a'), ('sequence', 'sequence'), ('of', 'of'), ('definitions', 'definition'), ('of', 'of'), ('the', 'the'), ('form', 'form'), (':', ':'), ('……', '……')] 

 Dependency tags are: 
>> [(('Regular', 'definition'), 'amod'), (('definition', 'sequence'), 'nsubj'), (('is', 'sequence'), 'cop'), (('a', 'sequence'), 'det'), (('sequence', 'root'), 'root'), (('of', 'definitions'), 'case'), (('definitions', 'sequence'), 'nmod'), (('of', 'form'), 'case'), (('the', 'form'), 'det'), (('form', 'definitions'), 'nmod'), ((':', 'sequence'), 'punct'), (('……', 'sequence'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 55 ===========================

 Where  is a distinct name & is a regular expression. 

Tokens are: 
>> ['Where', 'is', 'a', 'distinct', 'name', '&', 'is', 'a', 'regular', 'expression', '.'] 

 UPOS tags are: 
>> [('Where', 'ADV'), ('is', 'AUX'), ('a', 'DET'), ('distinct', 'ADJ'), ('name', 'NOUN'), ('&', 'CCONJ'), ('is', 'AUX'), ('a', 'DET'), ('regular', 'ADJ'), ('expression', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Where', 'WRB'), ('is', 'VBZ'), ('a', 'DT'), ('distinct', 'JJ'), ('name', 'NN'), ('&', 'CC'), ('is', 'VBZ'), ('a', 'DT'), ('regular', 'JJ'), ('expression', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('Where', 'where'), ('is', 'be'), ('a', 'a'), ('distinct', 'distinct'), ('name', 'name'), ('&', '&'), ('is', 'be'), ('a', 'a'), ('regular', 'regular'), ('expression', 'expression'), ('.', '.')] 

 Dependency tags are: 
>> [(('Where', 'root'), 'root'), (('is', 'Where'), 'cop'), (('a', 'name'), 'det'), (('distinct', 'name'), 'amod'), (('name', 'Where'), 'nsubj'), (('&', 'expression'), 'cc'), (('is', 'expression'), 'cop'), (('a', 'expression'), 'det'), (('regular', 'expression'), 'amod'), (('expression', 'Where'), 'conj'), (('.', 'Where'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 56 ===========================

 Example: Regular definition for identifier 	letter  A|B|C|………..|Z|a|b|………..|z 	digit  0|1|…….|9| 	id letter (letter | digit)* 

Tokens are: 
>> ['Example', ':', 'Regular', 'definition', 'for', 'identifier', 'letter', '\uf0e0', 'A|B|', 'C', '|………..|', 'Z|a|b|………..', '|z', 'digit', '\uf0e0', '0', '|1', '|…….|9', '|', 'id\uf0e0', 'letter', '(', 'letter', '|', 'digit', ')', '*'] 

 UPOS tags are: 
>> [('Example', 'NOUN'), (':', 'PUNCT'), ('Regular', 'ADJ'), ('definition', 'NOUN'), ('for', 'ADP'), ('identifier', 'NOUN'), ('letter', 'NOUN'), ('\uf0e0', 'PUNCT'), ('A|B|', 'NOUN'), ('C', 'X'), ('|………..|', 'PUNCT'), ('Z|a|b|………..', 'X'), ('|z', 'X'), ('digit', 'X'), ('\uf0e0', 'X'), ('0', 'NUM'), ('|1', 'PUNCT'), ('|…….|9', 'PUNCT'), ('|', 'PUNCT'), ('id\uf0e0', 'PUNCT'), ('letter', 'NOUN'), ('(', 'PUNCT'), ('letter', 'NOUN'), ('|', 'PUNCT'), ('digit', 'NOUN'), (')', 'PUNCT'), ('*', 'PUNCT')] 

 XPOS tags are: 
>> [('Example', 'NN'), (':', ':'), ('Regular', 'JJ'), ('definition', 'NN'), ('for', 'IN'), ('identifier', 'NN'), ('letter', 'NN'), ('\uf0e0', '-LRB-'), ('A|B|', 'GW'), ('C', 'GW'), ('|………..|', 'NFP'), ('Z|a|b|………..', 'GW'), ('|z', 'GW'), ('digit', 'GW'), ('\uf0e0', 'GW'), ('0', 'CD'), ('|1', ':'), ('|…….|9', 'NFP'), ('|', 'NFP'), ('id\uf0e0', 'NFP'), ('letter', 'NN'), ('(', '-LRB-'), ('letter', 'NN'), ('|', 'NFP'), ('digit', 'NN'), (')', '-RRB-'), ('*', 'NFP')] 

 Lemmas are: 
>> [('Example', 'example'), (':', ':'), ('Regular', 'regular'), ('definition', 'definition'), ('for', 'for'), ('identifier', 'identifier'), ('letter', 'letter'), ('\uf0e0', "''"), ('A|B|', 'a|b|'), ('C', 'c'), ('|………..|', '|………..|'), ('Z|a|b|………..', 'z|a|b|………..'), ('|z', '|z'), ('digit', 'digit'), ('\uf0e0', '\uf0e0'), ('0', '0'), ('|1', '|1'), ('|…….|9', '|…….|9'), ('|', '|'), ('id\uf0e0', 'id\uf0e0'), ('letter', 'letter'), ('(', '('), ('letter', 'letter'), ('|', '|'), ('digit', 'digit'), (')', ')'), ('*', '*')] 

 Dependency tags are: 
>> [(('Example', 'root'), 'root'), ((':', 'Example'), 'punct'), (('Regular', 'definition'), 'amod'), (('definition', 'Example'), 'appos'), (('for', 'letter'), 'case'), (('identifier', 'letter'), 'compound'), (('letter', 'definition'), 'nmod'), (('\uf0e0', 'A|B|'), 'punct'), (('A|B|', 'letter'), 'appos'), (('C', 'A|B|'), 'goeswith'), (('|………..|', 'A|B|'), 'punct'), (('Z|a|b|………..', 'A|B|'), 'goeswith'), (('|z', 'A|B|'), 'goeswith'), (('digit', 'A|B|'), 'goeswith'), (('\uf0e0', 'A|B|'), 'goeswith'), (('0', 'A|B|'), 'nummod'), (('|1', 'A|B|'), 'punct'), (('|…….|9', 'A|B|'), 'punct'), (('|', 'A|B|'), 'punct'), (('id\uf0e0', 'letter'), 'punct'), (('letter', 'Example'), 'parataxis'), (('(', 'letter'), 'punct'), (('letter', 'letter'), 'appos'), (('|', 'digit'), 'punct'), (('digit', 'letter'), 'appos'), ((')', 'letter'), 'punct'), (('*', 'Example'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 57 ===========================

 Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Regular definition example Example: Unsigned Pascal numbers	 	3 	5280 	39.37 6.336E4 1.894E-4 2.56E+7 Regular Definition 	digit  0|1|…..|9 	digits  digit digit* 	optional_fraction  .digits | 𝜖 	optional_exponent  (E(+|-|𝜖)digits)|𝜖 	num  digits optional_fraction optional_exponent       Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Transition Diagram        Transition Diagram 

Tokens are: 
>> ['Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '2', '–', 'Lexical', 'Analyzer', '‹#›', 'Regular', 'definition', 'example', 'Example', ':', 'Unsigned', 'Pascal', 'numbers', '3', '5280', '39.37', '6.336E4', '1.894E', '-4', '2.56E', '+7', 'Regular', 'Definition', 'digit', '\uf0e0', '0', '|1', '|', '…..|9', 'digits', '\uf0e0', 'digit', 'digit*', 'optional_fraction', '\uf0e0', '.', 'digits', '|', '𝜖', 'optional_exponent', '\uf0e0', '(', 'E', '(', '+|-|𝜖', ')', 'digits', ')', '|𝜖', 'num', '\uf0e0', 'digits', 'optional_fraction', 'optional_exponent', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '2', '–', 'Lexical', 'Analyzer', '‹#›', 'Transition', 'Diagram', 'Transition', 'Diagram'] 

 UPOS tags are: 
>> [('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'PROPN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'ADJ'), ('Analyzer', 'PROPN'), ('‹#›', 'PROPN'), ('Regular', 'ADJ'), ('definition', 'NOUN'), ('example', 'NOUN'), ('Example', 'NOUN'), (':', 'PUNCT'), ('Unsigned', 'PROPN'), ('Pascal', 'PROPN'), ('numbers', 'NOUN'), ('3', 'NUM'), ('5280', 'NUM'), ('39.37', 'NUM'), ('6.336E4', 'NUM'), ('1.894E', 'NUM'), ('-4', 'NUM'), ('2.56E', 'NUM'), ('+7', 'NUM'), ('Regular', 'ADJ'), ('Definition', 'NOUN'), ('digit', 'NOUN'), ('\uf0e0', 'NOUN'), ('0', 'NUM'), ('|1', 'SYM'), ('|', 'PUNCT'), ('…..|9', 'PUNCT'), ('digits', 'NOUN'), ('\uf0e0', 'PUNCT'), ('digit', 'NOUN'), ('digit*', 'NOUN'), ('optional_fraction', 'NOUN'), ('\uf0e0', 'NOUN'), ('.', 'PUNCT'), ('digits', 'NOUN'), ('|', 'PUNCT'), ('𝜖', 'PUNCT'), ('optional_exponent', 'PROPN'), ('\uf0e0', 'PUNCT'), ('(', 'PUNCT'), ('E', 'NOUN'), ('(', 'PUNCT'), ('+|-|𝜖', 'PUNCT'), (')', 'PUNCT'), ('digits', 'NOUN'), (')', 'PUNCT'), ('|𝜖', 'NOUN'), ('num', 'NOUN'), ('\uf0e0', 'PUNCT'), ('digits', 'NOUN'), ('optional_fraction', 'NOUN'), ('optional_exponent', 'NOUN'), ('Prof.', 'NOUN'), ('Dixita', 'PROPN'), ('B', 'PUNCT'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'ADJ'), ('Analyzer', 'NOUN'), ('‹#›', 'NOUN'), ('Transition', 'NOUN'), ('Diagram', 'NOUN'), ('Transition', 'NOUN'), ('Diagram', 'NOUN')] 

 XPOS tags are: 
>> [('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NNP'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('2', 'CD'), ('–', ':'), ('Lexical', 'JJ'), ('Analyzer', 'NNP'), ('‹#›', 'NNP'), ('Regular', 'JJ'), ('definition', 'NN'), ('example', 'NN'), ('Example', 'NN'), (':', ':'), ('Unsigned', 'NNP'), ('Pascal', 'NNP'), ('numbers', 'NNS'), ('3', 'CD'), ('5280', 'CD'), ('39.37', 'CD'), ('6.336E4', 'CD'), ('1.894E', 'CD'), ('-4', 'CD'), ('2.56E', 'CD'), ('+7', 'CD'), ('Regular', 'JJ'), ('Definition', 'NN'), ('digit', 'NN'), ('\uf0e0', 'NN'), ('0', 'CD'), ('|1', 'SYM'), ('|', 'NFP'), ('…..|9', ','), ('digits', 'NNS'), ('\uf0e0', ','), ('digit', 'NN'), ('digit*', 'NN'), ('optional_fraction', 'NN'), ('\uf0e0', 'NN'), ('.', '.'), ('digits', 'NNS'), ('|', 'NFP'), ('𝜖', '-LRB-'), ('optional_exponent', 'NNP'), ('\uf0e0', '-RRB-'), ('(', '-LRB-'), ('E', 'NN'), ('(', '-LRB-'), ('+|-|𝜖', 'NFP'), (')', '-RRB-'), ('digits', 'NNS'), (')', '-RRB-'), ('|𝜖', 'NN'), ('num', 'NN'), ('\uf0e0', ','), ('digits', 'NNS'), ('optional_fraction', 'NN'), ('optional_exponent', 'NN'), ('Prof.', 'NN'), ('Dixita', 'NNP'), ('B', ','), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('2', 'CD'), ('–', ':'), ('Lexical', 'JJ'), ('Analyzer', 'NN'), ('‹#›', 'NN'), ('Transition', 'NN'), ('Diagram', 'NN'), ('Transition', 'NN'), ('Diagram', 'NN')] 

 Lemmas are: 
>> [('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'CD'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('2', '2'), ('–', '-'), ('Lexical', 'lexical'), ('Analyzer', 'Analyzer'), ('‹#›', '‹#›'), ('Regular', 'regular'), ('definition', 'definition'), ('example', 'example'), ('Example', 'example'), (':', ':'), ('Unsigned', 'Unsigned'), ('Pascal', 'Pascal'), ('numbers', 'number'), ('3', '3'), ('5280', '5280'), ('39.37', '39.37'), ('6.336E4', '6.336e4'), ('1.894E', '1.894e'), ('-4', '-4'), ('2.56E', '2.56E'), ('+7', '+7'), ('Regular', 'regular'), ('Definition', 'Definition'), ('digit', 'digit'), ('\uf0e0', '\uf0e0'), ('0', '0'), ('|1', '|1'), ('|', '|'), ('…..|9', '…..|9'), ('digits', 'digit'), ('\uf0e0', "''"), ('digit', 'digit'), ('digit*', 'digit*'), ('optional_fraction', 'optional_fraction'), ('\uf0e0', '\uf0e0'), ('.', '.'), ('digits', 'digit'), ('|', '|'), ('𝜖', "''"), ('optional_exponent', 'optional_exponent'), ('\uf0e0', "''"), ('(', '('), ('E', 'e'), ('(', '('), ('+|-|𝜖', '+|-|𝜖'), (')', ')'), ('digits', 'digit'), (')', ')'), ('|𝜖', '|𝜖'), ('num', 'num'), ('\uf0e0', "''"), ('digits', 'digit'), ('optional_fraction', 'optional_fraction'), ('optional_exponent', 'optional_exponent'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('2', '2'), ('–', '-'), ('Lexical', 'lexical'), ('Analyzer', 'analyzer'), ('‹#›', '‹#›'), ('Transition', 'Transition'), ('Diagram', 'diagram'), ('Transition', 'Transition'), ('Diagram', 'diagram')] 

 Dependency tags are: 
>> [(('Prof.', 'root'), 'root'), (('Dixita', 'Prof.'), 'flat'), (('B', 'Prof.'), 'flat'), (('Kagathara', 'Prof.'), 'flat'), (('#', 'Prof.'), 'appos'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', '#'), 'appos'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', 'Prof.'), 'appos'), (('2', 'Unit'), 'dep'), (('–', 'Unit'), 'punct'), (('Lexical', 'Analyzer'), 'amod'), (('Analyzer', 'Prof.'), 'list'), (('‹#›', 'Prof.'), 'appos'), (('Regular', 'definition'), 'amod'), (('definition', 'Example'), 'compound'), (('example', 'Example'), 'compound'), (('Example', 'Prof.'), 'appos'), ((':', 'Example'), 'punct'), (('Unsigned', 'numbers'), 'compound'), (('Pascal', 'numbers'), 'compound'), (('numbers', 'Prof.'), 'appos'), (('3', 'numbers'), 'dep'), (('5280', 'numbers'), 'nummod'), (('39.37', 'numbers'), 'dep'), (('6.336E4', 'numbers'), 'appos'), (('1.894E', 'numbers'), 'appos'), (('-4', 'Prof.'), 'dep'), (('2.56E', '1.894E'), 'nummod'), (('+7', 'digit'), 'nummod'), (('Regular', 'digit'), 'amod'), (('Definition', 'digit'), 'compound'), (('digit', 'Prof.'), 'appos'), (('\uf0e0', 'Prof.'), 'appos'), (('0', '|1'), 'nummod'), (('|1', 'Prof.'), 'parataxis'), (('|', 'Prof.'), 'punct'), (('…..|9', 'digits'), 'punct'), (('digits', 'Prof.'), 'appos'), (('\uf0e0', 'digits'), 'punct'), (('digit', 'Prof.'), 'appos'), (('digit*', 'Prof.'), 'appos'), (('optional_fraction', '\uf0e0'), 'compound'), (('\uf0e0', 'digit*'), 'appos'), (('.', 'Prof.'), 'punct'), (('digits', 'Prof.'), 'parataxis'), (('|', 'digits'), 'punct'), (('𝜖', 'optional_exponent'), 'punct'), (('optional_exponent', 'digits'), 'appos'), (('\uf0e0', 'optional_exponent'), 'punct'), (('(', 'digits'), 'punct'), (('E', 'optional_exponent'), 'dep'), (('(', 'digits'), 'punct'), (('+|-|𝜖', 'digits'), 'punct'), ((')', 'digits'), 'punct'), (('digits', 'E'), 'appos'), ((')', 'digits'), 'punct'), (('|𝜖', 'num'), 'compound'), (('num', 'digits'), 'appos'), (('\uf0e0', 'num'), 'punct'), (('digits', 'num'), 'compound'), (('optional_fraction', 'optional_exponent'), 'compound'), (('optional_exponent', 'digits'), 'compound'), (('Prof.', 'Dixita'), 'compound'), (('Dixita', 'optional_exponent'), 'flat'), (('B', 'Dixita'), 'punct'), (('Kagathara', 'Dixita'), 'appos'), (('#', 'Dixita'), 'appos'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', '#'), 'appos'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', 'Dixita'), 'appos'), (('2', 'Unit'), 'nummod'), (('–', 'Diagram'), 'punct'), (('Lexical', 'Analyzer'), 'amod'), (('Analyzer', 'Diagram'), 'compound'), (('‹#›', 'Diagram'), 'compound'), (('Transition', 'Diagram'), 'compound'), (('Diagram', 'Diagram'), 'compound'), (('Transition', 'Diagram'), 'compound'), (('Diagram', 'Unit'), 'appos')]

 Named Entities are: 
>> [('2170701', 'CARDINAL'), ('2', 'CARDINAL'), ('2', 'CARDINAL')]

========================== Sentence 58 ===========================

 A stylized flowchart is called transition diagram. 

Tokens are: 
>> ['A', 'stylized', 'flowchart', 'is', 'called', 'transition', 'diagram', '.'] 

 UPOS tags are: 
>> [('A', 'DET'), ('stylized', 'VERB'), ('flowchart', 'NOUN'), ('is', 'AUX'), ('called', 'VERB'), ('transition', 'NOUN'), ('diagram', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('A', 'DT'), ('stylized', 'VBN'), ('flowchart', 'NN'), ('is', 'VBZ'), ('called', 'VBN'), ('transition', 'NN'), ('diagram', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('A', 'a'), ('stylized', 'stylize'), ('flowchart', 'flowchart'), ('is', 'be'), ('called', 'call'), ('transition', 'transition'), ('diagram', 'diagram'), ('.', '.')] 

 Dependency tags are: 
>> [(('A', 'flowchart'), 'det'), (('stylized', 'flowchart'), 'amod'), (('flowchart', 'called'), 'nsubj:pass'), (('is', 'called'), 'aux:pass'), (('called', 'root'), 'root'), (('transition', 'diagram'), 'compound'), (('diagram', 'called'), 'obj'), (('.', 'called'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 59 ===========================

 is a state  is a transition   is a start state   is a final state    Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Transition Diagram : Relational operator  <     2  3  4  5  8  7  = other > = other = > return (relop,LE) return (relop,NE) return (relop,LT) return (relop,GE) return (relop,GT) return (relop,EQ)    Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Transition diagram : Unsigned number   8  other digit      digit digit digit +or - digit digit E . start E digit 	3 	5280 	39.37 1.894 E - 4 2.56 E + 7 45 E + 6 96 E 2    Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Hard coding & automatic generation Lexical analyzers        Hard coding and automatic generation lexical analyzers Lexical analysis is about identifying the pattern from the input. 

Tokens are: 
>> ['is', 'a', 'state', 'is', 'a', 'transition', 'is', 'a', 'start', 'state', 'is', 'a', 'final', 'state', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '2', '–', 'Lexical', 'Analyzer', '‹#›', 'Transition', 'Diagram', ':', 'Relational', 'operator', '<', '2', '3', '4', '5', '8', '7', '=', 'other', '>', '=', 'other', '=', '>', 'return', '(', 'relop', ',', 'LE', ')', 'return', '(', 'relop', ',', 'NE', ')', 'return', '(', 'relop', ',', 'LT', ')', 'return', '(', 'relop', ',', 'GE', ')', 'return', '(', 'relop', ',', 'GT', ')', 'return', '(', 'relop', ',', 'EQ', ')', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '2', '–', 'Lexical', 'Analyzer', '‹#›', 'Transition', 'diagram', ':', 'Unsigned', 'number', '8', 'other', 'digit', 'digit', 'digit', 'digit', '+', 'or', '-', 'digit', 'digit', 'E', '.', 'start', 'E', 'digit', '3', '5280', '39.37', '1.894', 'E', '-', '4', '2.56', 'E', '+', '7', '45', 'E', '+', '6', '96', 'E', '2', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '2', '–', 'Lexical', 'Analyzer', '‹#›', 'Hard', 'coding', '&', 'automatic', 'generation', 'Lexical', 'analyzers', 'Hard', 'coding', 'and', 'automatic', 'generation', 'lexical', 'analyzers', 'Lexical', 'analysis', 'is', 'about', 'identifying', 'the', 'pattern', 'from', 'the', 'input', '.'] 

 UPOS tags are: 
>> [('is', 'AUX'), ('a', 'DET'), ('state', 'NOUN'), ('is', 'AUX'), ('a', 'DET'), ('transition', 'NOUN'), ('is', 'AUX'), ('a', 'DET'), ('start', 'NOUN'), ('state', 'NOUN'), ('is', 'AUX'), ('a', 'DET'), ('final', 'ADJ'), ('state', 'NOUN'), ('Prof.', 'NOUN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'ADJ'), ('Analyzer', 'NOUN'), ('‹#›', 'NOUN'), ('Transition', 'NOUN'), ('Diagram', 'NOUN'), (':', 'PUNCT'), ('Relational', 'ADJ'), ('operator', 'NOUN'), ('<', 'PUNCT'), ('2', 'NUM'), ('3', 'NUM'), ('4', 'NUM'), ('5', 'NUM'), ('8', 'NUM'), ('7', 'NUM'), ('=', 'SYM'), ('other', 'ADJ'), ('>', 'PUNCT'), ('=', 'PUNCT'), ('other', 'ADJ'), ('=', 'SYM'), ('>', 'PUNCT'), ('return', 'NOUN'), ('(', 'PUNCT'), ('relop', 'PROPN'), (',', 'PUNCT'), ('LE', 'PROPN'), (')', 'PUNCT'), ('return', 'NOUN'), ('(', 'PUNCT'), ('relop', 'PROPN'), (',', 'PUNCT'), ('NE', 'NOUN'), (')', 'PUNCT'), ('return', 'NOUN'), ('(', 'PUNCT'), ('relop', 'NOUN'), (',', 'PUNCT'), ('LT', 'NOUN'), (')', 'PUNCT'), ('return', 'NOUN'), ('(', 'PUNCT'), ('relop', 'NOUN'), (',', 'PUNCT'), ('GE', 'NOUN'), (')', 'PUNCT'), ('return', 'NOUN'), ('(', 'PUNCT'), ('relop', 'PROPN'), (',', 'PUNCT'), ('GT', 'NOUN'), (')', 'PUNCT'), ('return', 'NOUN'), ('(', 'PUNCT'), ('relop', 'PROPN'), (',', 'PUNCT'), ('EQ', 'NOUN'), (')', 'PUNCT'), ('Prof.', 'NOUN'), ('Dixita', 'PROPN'), ('B', 'NOUN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'ADJ'), ('Analyzer', 'NOUN'), ('‹#›', 'NOUN'), ('Transition', 'NOUN'), ('diagram', 'NOUN'), (':', 'PUNCT'), ('Unsigned', 'VERB'), ('number', 'NOUN'), ('8', 'NUM'), ('other', 'ADJ'), ('digit', 'NOUN'), ('digit', 'NOUN'), ('digit', 'NOUN'), ('digit', 'NOUN'), ('+', 'SYM'), ('or', 'CCONJ'), ('-', 'SYM'), ('digit', 'NOUN'), ('digit', 'NOUN'), ('E', 'NOUN'), ('.', 'PUNCT'), ('start', 'NOUN'), ('E', 'NOUN'), ('digit', 'NOUN'), ('3', 'NUM'), ('5280', 'NUM'), ('39.37', 'NUM'), ('1.894', 'NUM'), ('E', 'NOUN'), ('-', 'SYM'), ('4', 'NUM'), ('2.56', 'NUM'), ('E', 'NOUN'), ('+', 'SYM'), ('7', 'NUM'), ('45', 'NUM'), ('E', 'NOUN'), ('+', 'SYM'), ('6', 'NUM'), ('96', 'NUM'), ('E', 'NOUN'), ('2', 'NUM'), ('Prof.', 'NOUN'), ('Dixita', 'PROPN'), ('B', 'NOUN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'PUNCT'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'ADJ'), ('Analyzer', 'NOUN'), ('‹#›', 'ADP'), ('Hard', 'ADJ'), ('coding', 'NOUN'), ('&', 'CCONJ'), ('automatic', 'ADJ'), ('generation', 'NOUN'), ('Lexical', 'ADJ'), ('analyzers', 'NOUN'), ('Hard', 'ADJ'), ('coding', 'NOUN'), ('and', 'CCONJ'), ('automatic', 'ADJ'), ('generation', 'NOUN'), ('lexical', 'ADJ'), ('analyzers', 'NOUN'), ('Lexical', 'ADJ'), ('analysis', 'NOUN'), ('is', 'AUX'), ('about', 'SCONJ'), ('identifying', 'VERB'), ('the', 'DET'), ('pattern', 'NOUN'), ('from', 'ADP'), ('the', 'DET'), ('input', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('is', 'VBZ'), ('a', 'DT'), ('state', 'NN'), ('is', 'VBZ'), ('a', 'DT'), ('transition', 'NN'), ('is', 'VBZ'), ('a', 'DT'), ('start', 'NN'), ('state', 'NN'), ('is', 'VBZ'), ('a', 'DT'), ('final', 'JJ'), ('state', 'NN'), ('Prof.', 'NN'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('2', 'CD'), ('–', ':'), ('Lexical', 'JJ'), ('Analyzer', 'NN'), ('‹#›', 'NN'), ('Transition', 'NN'), ('Diagram', 'NN'), (':', ':'), ('Relational', 'JJ'), ('operator', 'NN'), ('<', '-LRB-'), ('2', 'CD'), ('3', 'CD'), ('4', 'CD'), ('5', 'CD'), ('8', 'CD'), ('7', 'CD'), ('=', 'SYM'), ('other', 'JJ'), ('>', '-RRB-'), ('=', ','), ('other', 'JJ'), ('=', 'SYM'), ('>', '-RRB-'), ('return', 'NN'), ('(', '-LRB-'), ('relop', 'NNP'), (',', ','), ('LE', 'NNP'), (')', '-RRB-'), ('return', 'NN'), ('(', '-LRB-'), ('relop', 'NNP'), (',', ','), ('NE', 'NN'), (')', '-RRB-'), ('return', 'NN'), ('(', '-LRB-'), ('relop', 'NN'), (',', ','), ('LT', 'NN'), (')', '-RRB-'), ('return', 'NN'), ('(', '-LRB-'), ('relop', 'NN'), (',', ','), ('GE', 'NN'), (')', '-RRB-'), ('return', 'NN'), ('(', '-LRB-'), ('relop', 'NNP'), (',', ','), ('GT', 'NN'), (')', '-RRB-'), ('return', 'NN'), ('(', '-LRB-'), ('relop', 'NNP'), (',', ','), ('EQ', 'NN'), (')', '-RRB-'), ('Prof.', 'NN'), ('Dixita', 'NNP'), ('B', 'NN'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('2', 'CD'), ('–', ':'), ('Lexical', 'JJ'), ('Analyzer', 'NN'), ('‹#›', 'NN'), ('Transition', 'NN'), ('diagram', 'NN'), (':', ':'), ('Unsigned', 'VBN'), ('number', 'NN'), ('8', 'CD'), ('other', 'JJ'), ('digit', 'NN'), ('digit', 'NN'), ('digit', 'NN'), ('digit', 'NN'), ('+', 'SYM'), ('or', 'CC'), ('-', 'SYM'), ('digit', 'NN'), ('digit', 'NN'), ('E', 'NN'), ('.', '.'), ('start', 'NN'), ('E', 'NN'), ('digit', 'NN'), ('3', 'CD'), ('5280', 'CD'), ('39.37', 'CD'), ('1.894', 'CD'), ('E', 'NN'), ('-', 'SYM'), ('4', 'CD'), ('2.56', 'CD'), ('E', 'NN'), ('+', 'SYM'), ('7', 'CD'), ('45', 'CD'), ('E', 'NN'), ('+', 'SYM'), ('6', 'CD'), ('96', 'CD'), ('E', 'NN'), ('2', 'CD'), ('Prof.', 'NN'), ('Dixita', 'NNP'), ('B', 'NN'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', ','), ('Unit', 'NN'), ('2', 'CD'), ('–', ':'), ('Lexical', 'JJ'), ('Analyzer', 'NN'), ('‹#›', 'IN'), ('Hard', 'JJ'), ('coding', 'NN'), ('&', 'CC'), ('automatic', 'JJ'), ('generation', 'NN'), ('Lexical', 'JJ'), ('analyzers', 'NNS'), ('Hard', 'JJ'), ('coding', 'NN'), ('and', 'CC'), ('automatic', 'JJ'), ('generation', 'NN'), ('lexical', 'JJ'), ('analyzers', 'NNS'), ('Lexical', 'JJ'), ('analysis', 'NN'), ('is', 'VBZ'), ('about', 'IN'), ('identifying', 'VBG'), ('the', 'DT'), ('pattern', 'NN'), ('from', 'IN'), ('the', 'DT'), ('input', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('is', 'be'), ('a', 'a'), ('state', 'state'), ('is', 'be'), ('a', 'a'), ('transition', 'transition'), ('is', 'be'), ('a', 'a'), ('start', 'start'), ('state', 'state'), ('is', 'be'), ('a', 'a'), ('final', 'final'), ('state', 'state'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('2', '2'), ('–', '-'), ('Lexical', 'lexical'), ('Analyzer', 'analyzer'), ('‹#›', '‹#›'), ('Transition', 'Transition'), ('Diagram', 'diagram'), (':', ':'), ('Relational', 'Relational'), ('operator', 'operator'), ('<', '<'), ('2', '2'), ('3', '3'), ('4', '4'), ('5', '5'), ('8', '8'), ('7', '7'), ('=', '='), ('other', 'other'), ('>', '>'), ('=', '='), ('other', 'other'), ('=', '='), ('>', '>'), ('return', 'return'), ('(', '('), ('relop', 'relop'), (',', ','), ('LE', 'LE'), (')', ')'), ('return', 'return'), ('(', '('), ('relop', 'relop'), (',', ','), ('NE', 'ne'), (')', ')'), ('return', 'return'), ('(', '('), ('relop', 'relop'), (',', ','), ('LT', 'lt'), (')', ')'), ('return', 'return'), ('(', '('), ('relop', 'relop'), (',', ','), ('GE', 'GE'), (')', ')'), ('return', 'return'), ('(', '('), ('relop', 'relop'), (',', ','), ('GT', 'gt'), (')', ')'), ('return', 'return'), ('(', '('), ('relop', 'relop'), (',', ','), ('EQ', 'eq'), (')', ')'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'b'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('2', '2'), ('–', '-'), ('Lexical', 'lexical'), ('Analyzer', 'analyzer'), ('‹#›', '‹#›'), ('Transition', 'Transition'), ('diagram', 'diagram'), (':', ':'), ('Unsigned', 'unsign'), ('number', 'number'), ('8', '8'), ('other', 'other'), ('digit', 'digit'), ('digit', 'digit'), ('digit', 'digit'), ('digit', 'digit'), ('+', '+'), ('or', 'or'), ('-', '-'), ('digit', 'digit'), ('digit', 'digit'), ('E', 'e'), ('.', '.'), ('start', 'start'), ('E', 'e'), ('digit', 'digit'), ('3', '3'), ('5280', '5280'), ('39.37', '39.37'), ('1.894', '1.894'), ('E', 'e'), ('-', '-'), ('4', '4'), ('2.56', '2.56'), ('E', 'e'), ('+', '+'), ('7', '7'), ('45', '45'), ('E', 'e'), ('+', '+'), ('6', '6'), ('96', '96'), ('E', 'e'), ('2', '2'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'b'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', "''"), ('Unit', 'unit'), ('2', '2'), ('–', '-'), ('Lexical', 'lexical'), ('Analyzer', 'analyzer'), ('‹#›', '‹#›'), ('Hard', 'hard'), ('coding', 'coding'), ('&', '&'), ('automatic', 'automatic'), ('generation', 'generation'), ('Lexical', 'lexical'), ('analyzers', 'analyzer'), ('Hard', 'hard'), ('coding', 'coding'), ('and', 'and'), ('automatic', 'automatic'), ('generation', 'generation'), ('lexical', 'lexical'), ('analyzers', 'analyzer'), ('Lexical', 'lexical'), ('analysis', 'analysis'), ('is', 'be'), ('about', 'about'), ('identifying', 'identify'), ('the', 'the'), ('pattern', 'pattern'), ('from', 'from'), ('the', 'the'), ('input', 'input'), ('.', '.')] 

 Dependency tags are: 
>> [(('is', '#'), 'cop'), (('a', 'state'), 'det'), (('state', 'is'), 'nsubj'), (('is', 'transition'), 'cop'), (('a', 'transition'), 'det'), (('transition', '#'), 'nsubj'), (('is', 'state'), 'cop'), (('a', 'state'), 'det'), (('start', 'state'), 'compound'), (('state', 'root'), 'root'), (('is', '#'), 'cop'), (('a', 'Prof.'), 'det'), (('final', 'Prof.'), 'amod'), (('state', 'Prof.'), 'compound'), (('Prof.', '#'), 'compound'), (('Dixita', '#'), 'compound'), (('B', '#'), 'compound'), (('Kagathara', '#'), 'compound'), (('#', 'state'), 'nmod'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', 'Unit'), 'compound'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', '#'), 'conj'), (('2', 'Unit'), 'nummod'), (('–', 'Unit'), 'punct'), (('Lexical', 'Analyzer'), 'amod'), (('Analyzer', 'Unit'), 'compound'), (('‹#›', 'Diagram'), 'compound'), (('Transition', 'Diagram'), 'compound'), (('Diagram', '#'), 'conj'), ((':', 'Diagram'), 'punct'), (('Relational', 'operator'), 'amod'), (('operator', 'Diagram'), 'appos'), (('<', 'operator'), 'punct'), (('2', 'operator'), 'dep'), (('3', '4'), 'compound'), (('4', '5'), 'compound'), (('5', '8'), 'compound'), (('8', '7'), 'compound'), (('7', '='), 'nummod'), (('=', 'operator'), 'parataxis'), (('other', '='), 'obj'), (('>', '='), 'punct'), (('=', '='), 'punct'), (('other', '='), 'nsubj'), (('=', 'Prof.'), 'conj'), (('>', 'return'), 'punct'), (('return', '='), 'obj'), (('(', 'relop'), 'punct'), (('relop', 'return'), 'dep'), ((',', 'LE'), 'punct'), (('LE', 'relop'), 'conj'), ((')', 'LE'), 'punct'), (('return', 'return'), 'conj'), (('(', 'relop'), 'punct'), (('relop', 'return'), 'dep'), ((',', 'NE'), 'punct'), (('NE', 'relop'), 'dep'), ((')', 'NE'), 'punct'), (('return', 'return'), 'conj'), (('(', 'relop'), 'punct'), (('relop', 'return'), 'dep'), ((',', 'LT'), 'punct'), (('LT', 'relop'), 'conj'), ((')', 'LT'), 'punct'), (('return', 'return'), 'conj'), (('(', 'relop'), 'punct'), (('relop', 'return'), 'dep'), ((',', 'GE'), 'punct'), (('GE', 'relop'), 'conj'), ((')', 'GE'), 'punct'), (('return', 'return'), 'conj'), (('(', 'relop'), 'punct'), (('relop', 'return'), 'dep'), ((',', 'GT'), 'punct'), (('GT', 'relop'), 'conj'), ((')', 'GT'), 'punct'), (('return', 'return'), 'conj'), (('(', 'relop'), 'punct'), (('relop', 'return'), 'dep'), ((',', 'EQ'), 'punct'), (('EQ', 'relop'), 'dep'), ((')', 'relop'), 'punct'), (('Prof.', 'B'), 'compound'), (('Dixita', 'B'), 'compound'), (('B', '#'), 'compound'), (('Kagathara', '#'), 'compound'), (('#', 'relop'), 'conj'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', '#'), 'appos'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', '#'), 'appos'), (('2', 'Unit'), 'nummod'), (('–', 'Analyzer'), 'punct'), (('Lexical', 'Analyzer'), 'amod'), (('Analyzer', 'diagram'), 'compound'), (('‹#›', 'diagram'), 'compound'), (('Transition', 'diagram'), 'compound'), (('diagram', 'Unit'), 'appos'), ((':', 'number'), 'punct'), (('Unsigned', 'number'), 'amod'), (('number', 'diagram'), 'appos'), (('8', 'number'), 'nummod'), (('other', 'digit'), 'amod'), (('digit', 'number'), 'compound'), (('digit', 'number'), 'compound'), (('digit', 'digit'), 'compound'), (('digit', 'number'), 'conj'), (('+', 'digit'), 'cc'), (('or', 'digit'), 'cc'), (('-', 'digit'), 'punct'), (('digit', 'digit'), 'compound'), (('digit', 'digit'), 'conj'), (('E', 'digit'), 'appos'), (('.', 'E'), 'punct'), (('start', 'E'), 'compound'), (('E', 'start'), 'compound'), (('digit', 'E'), 'dep'), (('3', 'digit'), 'nummod'), (('5280', '1.894'), 'compound'), (('39.37', 'digit'), 'nummod'), (('1.894', 'digit'), 'nummod'), (('E', 'digit'), 'appos'), (('-', 'E'), 'punct'), (('4', 'E'), 'nummod'), (('2.56', 'E'), 'nummod'), (('E', 'E'), 'appos'), (('+', 'E'), 'cc'), (('7', 'E'), 'nummod'), (('45', 'E'), 'nummod'), (('E', 'E'), 'conj'), (('+', 'E'), 'cc'), (('6', 'E'), 'nummod'), (('96', 'E'), 'nummod'), (('E', 'E'), 'appos'), (('2', 'B'), 'nummod'), (('Prof.', 'B'), 'compound'), (('Dixita', 'Kagathara'), 'compound'), (('B', '#'), 'compound'), (('Kagathara', 'E'), 'compound'), (('#', 'E'), 'compound'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', '#'), 'appos'), ((')', 'CD'), 'punct'), (('\uf077', 'CD'), 'punct'), (('Unit', 'Kagathara'), 'appos'), (('2', 'Unit'), 'nummod'), (('–', 'Unit'), 'punct'), (('Lexical', 'Analyzer'), 'amod'), (('Analyzer', 'Unit'), 'appos'), (('‹#›', 'coding'), 'case'), (('Hard', 'coding'), 'amod'), (('coding', 'Analyzer'), 'nmod'), (('&', 'analyzers'), 'cc'), (('automatic', 'analyzers'), 'amod'), (('generation', 'analyzers'), 'compound'), (('Lexical', 'analyzers'), 'amod'), (('analyzers', 'Analyzer'), 'nmod'), (('Hard', 'coding'), 'amod'), (('coding', 'coding'), 'conj'), (('and', 'analysis'), 'cc'), (('automatic', 'analyzers'), 'amod'), (('generation', 'analyzers'), 'compound'), (('lexical', 'analyzers'), 'amod'), (('analyzers', 'analysis'), 'compound'), (('Lexical', 'analysis'), 'amod'), (('analysis', 'coding'), 'conj'), (('is', 'identifying'), 'cop'), (('about', 'identifying'), 'mark'), (('identifying', 'analyzers'), 'acl'), (('the', 'pattern'), 'det'), (('pattern', 'identifying'), 'obj'), (('from', 'input'), 'case'), (('the', 'input'), 'det'), (('input', 'pattern'), 'nmod'), (('.', 'identifying'), 'punct')]

 Named Entities are: 
>> [('2170701', 'CARDINAL'), ('2', 'CARDINAL'), ('3', 'CARDINAL'), ('8  7', 'CARDINAL'), ('2', 'CARDINAL'), ('8', 'CARDINAL'), ('2170701', 'CARDINAL'), ('2', 'CARDINAL')]

========================== Sentence 60 ===========================

 To recognize the pattern, transition diagram is constructed. 

Tokens are: 
>> ['To', 'recognize', 'the', 'pattern', ',', 'transition', 'diagram', 'is', 'constructed', '.'] 

 UPOS tags are: 
>> [('To', 'PART'), ('recognize', 'VERB'), ('the', 'DET'), ('pattern', 'NOUN'), (',', 'PUNCT'), ('transition', 'NOUN'), ('diagram', 'NOUN'), ('is', 'AUX'), ('constructed', 'VERB'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('To', 'TO'), ('recognize', 'VB'), ('the', 'DT'), ('pattern', 'NN'), (',', ','), ('transition', 'NN'), ('diagram', 'NN'), ('is', 'VBZ'), ('constructed', 'VBN'), ('.', '.')] 

 Lemmas are: 
>> [('To', 'to'), ('recognize', 'recognize'), ('the', 'the'), ('pattern', 'pattern'), (',', ','), ('transition', 'transition'), ('diagram', 'diagram'), ('is', 'be'), ('constructed', 'construct'), ('.', '.')] 

 Dependency tags are: 
>> [(('To', 'recognize'), 'mark'), (('recognize', 'constructed'), 'advcl'), (('the', 'pattern'), 'det'), (('pattern', 'recognize'), 'obj'), ((',', 'constructed'), 'punct'), (('transition', 'diagram'), 'compound'), (('diagram', 'constructed'), 'nsubj:pass'), (('is', 'constructed'), 'aux:pass'), (('constructed', 'root'), 'root'), (('.', 'constructed'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 61 ===========================

 It is known as hard coding lexical analyzer. 

Tokens are: 
>> ['It', 'is', 'known', 'as', 'hard', 'coding', 'lexical', 'analyzer', '.'] 

 UPOS tags are: 
>> [('It', 'PRON'), ('is', 'AUX'), ('known', 'VERB'), ('as', 'ADP'), ('hard', 'ADV'), ('coding', 'VERB'), ('lexical', 'ADJ'), ('analyzer', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('It', 'PRP'), ('is', 'VBZ'), ('known', 'VBN'), ('as', 'IN'), ('hard', 'RB'), ('coding', 'VBG'), ('lexical', 'JJ'), ('analyzer', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('It', 'it'), ('is', 'be'), ('known', 'know'), ('as', 'as'), ('hard', 'hard'), ('coding', 'code'), ('lexical', 'lexical'), ('analyzer', 'analyzer'), ('.', '.')] 

 Dependency tags are: 
>> [(('It', 'known'), 'nsubj:pass'), (('is', 'known'), 'aux:pass'), (('known', 'root'), 'root'), (('as', 'coding'), 'mark'), (('hard', 'coding'), 'advmod'), (('coding', 'known'), 'advcl'), (('lexical', 'analyzer'), 'amod'), (('analyzer', 'coding'), 'obj'), (('.', 'known'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 62 ===========================

 Example: to represent identifier in ‘C’, the first character must be letter and other characters are either letter or digits. 

Tokens are: 
>> ['Example', ':', 'to', 'represent', 'identifier', 'in', '‘', 'C', '’', ',', 'the', 'first', 'character', 'must', 'be', 'letter', 'and', 'other', 'characters', 'are', 'either', 'letter', 'or', 'digits', '.'] 

 UPOS tags are: 
>> [('Example', 'NOUN'), (':', 'PUNCT'), ('to', 'PART'), ('represent', 'VERB'), ('identifier', 'NOUN'), ('in', 'ADP'), ('‘', 'PUNCT'), ('C', 'PROPN'), ('’', 'PUNCT'), (',', 'PUNCT'), ('the', 'DET'), ('first', 'ADJ'), ('character', 'NOUN'), ('must', 'AUX'), ('be', 'AUX'), ('letter', 'NOUN'), ('and', 'CCONJ'), ('other', 'ADJ'), ('characters', 'NOUN'), ('are', 'AUX'), ('either', 'CCONJ'), ('letter', 'NOUN'), ('or', 'CCONJ'), ('digits', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Example', 'NN'), (':', ':'), ('to', 'TO'), ('represent', 'VB'), ('identifier', 'NN'), ('in', 'IN'), ('‘', '``'), ('C', 'NNP'), ('’', "''"), (',', ','), ('the', 'DT'), ('first', 'JJ'), ('character', 'NN'), ('must', 'MD'), ('be', 'VB'), ('letter', 'NN'), ('and', 'CC'), ('other', 'JJ'), ('characters', 'NNS'), ('are', 'VBP'), ('either', 'CC'), ('letter', 'NN'), ('or', 'CC'), ('digits', 'NNS'), ('.', '.')] 

 Lemmas are: 
>> [('Example', 'example'), (':', ':'), ('to', 'to'), ('represent', 'represent'), ('identifier', 'identifier'), ('in', 'in'), ('‘', "'"), ('C', 'C'), ('’', "'"), (',', ','), ('the', 'the'), ('first', 'first'), ('character', 'character'), ('must', 'must'), ('be', 'be'), ('letter', 'letter'), ('and', 'and'), ('other', 'other'), ('characters', 'character'), ('are', 'be'), ('either', 'either'), ('letter', 'letter'), ('or', 'or'), ('digits', 'digit'), ('.', '.')] 

 Dependency tags are: 
>> [(('Example', 'root'), 'root'), ((':', 'Example'), 'punct'), (('to', 'represent'), 'mark'), (('represent', 'letter'), 'advcl'), (('identifier', 'represent'), 'obj'), (('in', 'C'), 'case'), (('‘', 'C'), 'punct'), (('C', 'identifier'), 'nmod'), (('’', 'C'), 'punct'), ((',', 'letter'), 'punct'), (('the', 'character'), 'det'), (('first', 'character'), 'amod'), (('character', 'letter'), 'nsubj'), (('must', 'letter'), 'aux'), (('be', 'letter'), 'cop'), (('letter', 'Example'), 'appos'), (('and', 'letter'), 'cc'), (('other', 'characters'), 'amod'), (('characters', 'letter'), 'nsubj'), (('are', 'letter'), 'cop'), (('either', 'letter'), 'cc:preconj'), (('letter', 'letter'), 'conj'), (('or', 'digits'), 'cc'), (('digits', 'letter'), 'conj'), (('.', 'Example'), 'punct')]

 Named Entities are: 
>> [('first', 'ORDINAL')]

========================== Sentence 63 ===========================

 To recognize this pattern, hard coding lexical analyzer will work with a transition diagram. 

Tokens are: 
>> ['To', 'recognize', 'this', 'pattern', ',', 'hard', 'coding', 'lexical', 'analyzer', 'will', 'work', 'with', 'a', 'transition', 'diagram', '.'] 

 UPOS tags are: 
>> [('To', 'PART'), ('recognize', 'VERB'), ('this', 'DET'), ('pattern', 'NOUN'), (',', 'PUNCT'), ('hard', 'ADJ'), ('coding', 'VERB'), ('lexical', 'ADJ'), ('analyzer', 'NOUN'), ('will', 'AUX'), ('work', 'VERB'), ('with', 'ADP'), ('a', 'DET'), ('transition', 'NOUN'), ('diagram', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('To', 'TO'), ('recognize', 'VB'), ('this', 'DT'), ('pattern', 'NN'), (',', ','), ('hard', 'JJ'), ('coding', 'VBG'), ('lexical', 'JJ'), ('analyzer', 'NN'), ('will', 'MD'), ('work', 'VB'), ('with', 'IN'), ('a', 'DT'), ('transition', 'NN'), ('diagram', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('To', 'to'), ('recognize', 'recognize'), ('this', 'this'), ('pattern', 'pattern'), (',', ','), ('hard', 'hard'), ('coding', 'code'), ('lexical', 'lexical'), ('analyzer', 'analyzer'), ('will', 'will'), ('work', 'work'), ('with', 'with'), ('a', 'a'), ('transition', 'transition'), ('diagram', 'diagram'), ('.', '.')] 

 Dependency tags are: 
>> [(('To', 'recognize'), 'mark'), (('recognize', 'work'), 'advcl'), (('this', 'pattern'), 'det'), (('pattern', 'recognize'), 'obj'), ((',', 'work'), 'punct'), (('hard', 'analyzer'), 'amod'), (('coding', 'analyzer'), 'amod'), (('lexical', 'analyzer'), 'amod'), (('analyzer', 'work'), 'nsubj'), (('will', 'work'), 'aux'), (('work', 'root'), 'root'), (('with', 'diagram'), 'case'), (('a', 'diagram'), 'det'), (('transition', 'diagram'), 'compound'), (('diagram', 'work'), 'obl'), (('.', 'work'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 64 ===========================

 The automatic generation lexical analyzer takes special notation as input. 

Tokens are: 
>> ['The', 'automatic', 'generation', 'lexical', 'analyzer', 'takes', 'special', 'notation', 'as', 'input', '.'] 

 UPOS tags are: 
>> [('The', 'DET'), ('automatic', 'ADJ'), ('generation', 'NOUN'), ('lexical', 'ADJ'), ('analyzer', 'NOUN'), ('takes', 'VERB'), ('special', 'ADJ'), ('notation', 'NOUN'), ('as', 'ADP'), ('input', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('The', 'DT'), ('automatic', 'JJ'), ('generation', 'NN'), ('lexical', 'JJ'), ('analyzer', 'NN'), ('takes', 'VBZ'), ('special', 'JJ'), ('notation', 'NN'), ('as', 'IN'), ('input', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('The', 'the'), ('automatic', 'automatic'), ('generation', 'generation'), ('lexical', 'lexical'), ('analyzer', 'analyzer'), ('takes', 'take'), ('special', 'special'), ('notation', 'notation'), ('as', 'as'), ('input', 'input'), ('.', '.')] 

 Dependency tags are: 
>> [(('The', 'analyzer'), 'det'), (('automatic', 'generation'), 'amod'), (('generation', 'analyzer'), 'compound'), (('lexical', 'analyzer'), 'amod'), (('analyzer', 'takes'), 'nsubj'), (('takes', 'root'), 'root'), (('special', 'notation'), 'amod'), (('notation', 'takes'), 'obj'), (('as', 'input'), 'case'), (('input', 'takes'), 'obl'), (('.', 'takes'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 65 ===========================

 For example, lex compiler tool will take regular expression as input and finds out the pattern matching to that regular expression. 

Tokens are: 
>> ['For', 'example', ',', 'lex', 'compiler', 'tool', 'will', 'take', 'regular', 'expression', 'as', 'input', 'and', 'finds', 'out', 'the', 'pattern', 'matching', 'to', 'that', 'regular', 'expression', '.'] 

 UPOS tags are: 
>> [('For', 'ADP'), ('example', 'NOUN'), (',', 'PUNCT'), ('lex', 'NOUN'), ('compiler', 'NOUN'), ('tool', 'NOUN'), ('will', 'AUX'), ('take', 'VERB'), ('regular', 'ADJ'), ('expression', 'NOUN'), ('as', 'ADP'), ('input', 'NOUN'), ('and', 'CCONJ'), ('finds', 'VERB'), ('out', 'ADP'), ('the', 'DET'), ('pattern', 'NOUN'), ('matching', 'VERB'), ('to', 'ADP'), ('that', 'DET'), ('regular', 'ADJ'), ('expression', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('For', 'IN'), ('example', 'NN'), (',', ','), ('lex', 'NN'), ('compiler', 'NN'), ('tool', 'NN'), ('will', 'MD'), ('take', 'VB'), ('regular', 'JJ'), ('expression', 'NN'), ('as', 'IN'), ('input', 'NN'), ('and', 'CC'), ('finds', 'VBZ'), ('out', 'RP'), ('the', 'DT'), ('pattern', 'NN'), ('matching', 'VBG'), ('to', 'IN'), ('that', 'DT'), ('regular', 'JJ'), ('expression', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('For', 'for'), ('example', 'example'), (',', ','), ('lex', 'lex'), ('compiler', 'compiler'), ('tool', 'tool'), ('will', 'will'), ('take', 'take'), ('regular', 'regular'), ('expression', 'expression'), ('as', 'as'), ('input', 'input'), ('and', 'and'), ('finds', 'find'), ('out', 'out'), ('the', 'the'), ('pattern', 'pattern'), ('matching', 'match'), ('to', 'to'), ('that', 'that'), ('regular', 'regular'), ('expression', 'expression'), ('.', '.')] 

 Dependency tags are: 
>> [(('For', 'example'), 'case'), (('example', 'take'), 'obl'), ((',', 'take'), 'punct'), (('lex', 'tool'), 'compound'), (('compiler', 'tool'), 'compound'), (('tool', 'take'), 'nsubj'), (('will', 'take'), 'aux'), (('take', 'root'), 'root'), (('regular', 'expression'), 'amod'), (('expression', 'take'), 'obj'), (('as', 'input'), 'case'), (('input', 'take'), 'obl'), (('and', 'finds'), 'cc'), (('finds', 'take'), 'conj'), (('out', 'finds'), 'compound:prt'), (('the', 'pattern'), 'det'), (('pattern', 'finds'), 'obj'), (('matching', 'pattern'), 'acl'), (('to', 'expression'), 'case'), (('that', 'expression'), 'det'), (('regular', 'expression'), 'amod'), (('expression', 'matching'), 'obl'), (('.', 'take'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 66 ===========================

 2 3 Start  Letter or digit Letter 1    Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Finite Automata        Finite Automata Finite Automata are recognizers. 

Tokens are: 
>> ['2', '3', 'Start', 'Letter', 'or', 'digit', 'Letter', '1', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '2', '–', 'Lexical', 'Analyzer', '‹#›', 'Finite', 'Automata', 'Finite', 'Automata', 'Finite', 'Automata', 'are', 'recognizers', '.'] 

 UPOS tags are: 
>> [('2', 'NUM'), ('3', 'NUM'), ('Start', 'NOUN'), ('Letter', 'NOUN'), ('or', 'CCONJ'), ('digit', 'NOUN'), ('Letter', 'NOUN'), ('1', 'NUM'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'ADJ'), ('Analyzer', 'NOUN'), ('‹#›', 'NOUN'), ('Finite', 'ADJ'), ('Automata', 'NOUN'), ('Finite', 'ADJ'), ('Automata', 'PROPN'), ('Finite', 'ADJ'), ('Automata', 'PROPN'), ('are', 'AUX'), ('recognizers', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('2', 'CD'), ('3', 'CD'), ('Start', 'NN'), ('Letter', 'NN'), ('or', 'CC'), ('digit', 'NN'), ('Letter', 'NN'), ('1', 'CD'), ('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('2', 'CD'), ('–', ':'), ('Lexical', 'JJ'), ('Analyzer', 'NN'), ('‹#›', 'NN'), ('Finite', 'JJ'), ('Automata', 'NN'), ('Finite', 'JJ'), ('Automata', 'NNP'), ('Finite', 'JJ'), ('Automata', 'NNP'), ('are', 'VBP'), ('recognizers', 'NNS'), ('.', '.')] 

 Lemmas are: 
>> [('2', '2'), ('3', '3'), ('Start', 'start'), ('Letter', 'letter'), ('or', 'or'), ('digit', 'digit'), ('Letter', 'letter'), ('1', '1'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('2', '2'), ('–', '-'), ('Lexical', 'lexical'), ('Analyzer', 'analyzer'), ('‹#›', '‹#›'), ('Finite', 'Finite'), ('Automata', 'automata'), ('Finite', 'Finite'), ('Automata', 'Automata'), ('Finite', 'Finite'), ('Automata', 'Automata'), ('are', 'be'), ('recognizers', 'recognizer'), ('.', '.')] 

 Dependency tags are: 
>> [(('2', 'Letter'), 'nummod'), (('3', 'Start'), 'nummod'), (('Start', 'Letter'), 'compound'), (('Letter', 'recognizers'), 'nsubj'), (('or', 'Letter'), 'cc'), (('digit', 'Letter'), 'compound'), (('Letter', 'Letter'), 'conj'), (('1', 'Letter'), 'nummod'), (('Prof.', 'Kagathara'), 'compound'), (('Dixita', 'Kagathara'), 'compound'), (('B', 'Kagathara'), 'compound'), (('Kagathara', 'Letter'), 'conj'), (('#', 'Letter'), 'appos'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', '#'), 'appos'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', 'Letter'), 'appos'), (('2', 'Unit'), 'nummod'), (('–', 'recognizers'), 'punct'), (('Lexical', 'Analyzer'), 'amod'), (('Analyzer', 'recognizers'), 'nsubj'), (('‹#›', 'Automata'), 'compound'), (('Finite', 'Automata'), 'amod'), (('Automata', 'Automata'), 'compound'), (('Finite', 'Automata'), 'amod'), (('Automata', 'Automata'), 'compound'), (('Finite', 'Automata'), 'amod'), (('Automata', 'recognizers'), 'nsubj'), (('are', 'recognizers'), 'cop'), (('recognizers', 'root'), 'root'), (('.', 'recognizers'), 'punct')]

 Named Entities are: 
>> [('2', 'CARDINAL'), ('3', 'CARDINAL'), ('1', 'CARDINAL'), ('#2170701', 'CARDINAL'), ('2', 'CARDINAL')]

========================== Sentence 67 ===========================

 FA simply say “Yes” or “No” about each possible input string. 

Tokens are: 
>> ['FA', 'simply', 'say', '“', 'Yes', '”', 'or', '“', 'No', '”', 'about', 'each', 'possible', 'input', 'string', '.'] 

 UPOS tags are: 
>> [('FA', 'PROPN'), ('simply', 'ADV'), ('say', 'VERB'), ('“', 'PUNCT'), ('Yes', 'INTJ'), ('”', 'PUNCT'), ('or', 'CCONJ'), ('“', 'PUNCT'), ('No', 'INTJ'), ('”', 'PUNCT'), ('about', 'ADP'), ('each', 'DET'), ('possible', 'ADJ'), ('input', 'NOUN'), ('string', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('FA', 'NNP'), ('simply', 'RB'), ('say', 'VB'), ('“', '``'), ('Yes', 'UH'), ('”', "''"), ('or', 'CC'), ('“', '``'), ('No', 'UH'), ('”', "''"), ('about', 'IN'), ('each', 'DT'), ('possible', 'JJ'), ('input', 'NN'), ('string', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('FA', 'FA'), ('simply', 'simply'), ('say', 'say'), ('“', "''"), ('Yes', 'yes'), ('”', "''"), ('or', 'or'), ('“', "''"), ('No', 'no'), ('”', "''"), ('about', 'about'), ('each', 'each'), ('possible', 'possible'), ('input', 'input'), ('string', 'string'), ('.', '.')] 

 Dependency tags are: 
>> [(('FA', 'say'), 'nsubj'), (('simply', 'say'), 'advmod'), (('say', 'root'), 'root'), (('“', 'Yes'), 'punct'), (('Yes', 'say'), 'obj'), (('”', 'Yes'), 'punct'), (('or', 'No'), 'cc'), (('“', 'No'), 'punct'), (('No', 'Yes'), 'conj'), (('”', 'No'), 'punct'), (('about', 'string'), 'case'), (('each', 'string'), 'det'), (('possible', 'string'), 'amod'), (('input', 'string'), 'compound'), (('string', 'say'), 'obl'), (('.', 'say'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 68 ===========================

 Finite Automata is a mathematical model consist of:  Set of states 

Tokens are: 
>> ['Finite', 'Automata', 'is', 'a', 'mathematical', 'model', 'consist', 'of', ':', 'Set', 'of', 'states'] 

 UPOS tags are: 
>> [('Finite', 'ADJ'), ('Automata', 'PROPN'), ('is', 'AUX'), ('a', 'DET'), ('mathematical', 'ADJ'), ('model', 'NOUN'), ('consist', 'VERB'), ('of', 'ADP'), (':', 'PUNCT'), ('Set', 'NOUN'), ('of', 'ADP'), ('states', 'NOUN')] 

 XPOS tags are: 
>> [('Finite', 'JJ'), ('Automata', 'NNP'), ('is', 'VBZ'), ('a', 'DT'), ('mathematical', 'JJ'), ('model', 'NN'), ('consist', 'VB'), ('of', 'IN'), (':', ':'), ('Set', 'NN'), ('of', 'IN'), ('states', 'NNS')] 

 Lemmas are: 
>> [('Finite', 'Finite'), ('Automata', 'Automata'), ('is', 'be'), ('a', 'a'), ('mathematical', 'mathematical'), ('model', 'model'), ('consist', 'consist'), ('of', 'of'), (':', ':'), ('Set', 'set'), ('of', 'of'), ('states', 'state')] 

 Dependency tags are: 
>> [(('Finite', 'Automata'), 'amod'), (('Automata', 'model'), 'nsubj'), (('is', 'model'), 'cop'), (('a', 'model'), 'det'), (('mathematical', 'model'), 'amod'), (('model', 'root'), 'root'), (('consist', 'model'), 'acl'), (('of', 'Set'), 'case'), ((':', 'Set'), 'punct'), (('Set', 'consist'), 'obl'), (('of', 'states'), 'case'), (('states', 'Set'), 'nmod')]

 Named Entities are: 
>> [('Finite Automata', 'ORG')]

========================== Sentence 69 ===========================

 Set of input symbol   A transition function move  Initial state   Final states or accepting states      Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Types of finite automata Types of finite automata are:  Nondeterministic finite automata (NFA): 

Tokens are: 
>> ['Set', 'of', 'input', 'symbol', 'A', 'transition', 'function', 'move', 'Initial', 'state', 'Final', 'states', 'or', 'accepting', 'states', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '2', '–', 'Lexical', 'Analyzer', '‹#›', 'Types', 'of', 'finite', 'automata', 'Types', 'of', 'finite', 'automata', 'are', ':', 'Nondeterministic', 'finite', 'automata', '(', 'NFA', ')', ':'] 

 UPOS tags are: 
>> [('Set', 'NOUN'), ('of', 'ADP'), ('input', 'NOUN'), ('symbol', 'NOUN'), ('A', 'DET'), ('transition', 'NOUN'), ('function', 'NOUN'), ('move', 'VERB'), ('Initial', 'ADJ'), ('state', 'NOUN'), ('Final', 'ADJ'), ('states', 'NOUN'), ('or', 'CCONJ'), ('accepting', 'VERB'), ('states', 'NOUN'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'ADJ'), ('Analyzer', 'NOUN'), ('‹#›', 'NOUN'), ('Types', 'NOUN'), ('of', 'ADP'), ('finite', 'ADJ'), ('automata', 'NOUN'), ('Types', 'NOUN'), ('of', 'ADP'), ('finite', 'ADJ'), ('automata', 'NOUN'), ('are', 'AUX'), (':', 'PUNCT'), ('Nondeterministic', 'ADJ'), ('finite', 'ADJ'), ('automata', 'NOUN'), ('(', 'PUNCT'), ('NFA', 'NOUN'), (')', 'PUNCT'), (':', 'PUNCT')] 

 XPOS tags are: 
>> [('Set', 'NN'), ('of', 'IN'), ('input', 'NN'), ('symbol', 'NN'), ('A', 'DT'), ('transition', 'NN'), ('function', 'NN'), ('move', 'VB'), ('Initial', 'JJ'), ('state', 'NN'), ('Final', 'JJ'), ('states', 'NNS'), ('or', 'CC'), ('accepting', 'VBG'), ('states', 'NNS'), ('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('2', 'CD'), ('–', ':'), ('Lexical', 'JJ'), ('Analyzer', 'NN'), ('‹#›', 'NN'), ('Types', 'NNS'), ('of', 'IN'), ('finite', 'JJ'), ('automata', 'NN'), ('Types', 'NNS'), ('of', 'IN'), ('finite', 'JJ'), ('automata', 'NN'), ('are', 'VBP'), (':', ':'), ('Nondeterministic', 'JJ'), ('finite', 'JJ'), ('automata', 'NN'), ('(', '-LRB-'), ('NFA', 'NN'), (')', '-RRB-'), (':', ':')] 

 Lemmas are: 
>> [('Set', 'set'), ('of', 'of'), ('input', 'input'), ('symbol', 'symbol'), ('A', 'a'), ('transition', 'transition'), ('function', 'function'), ('move', 'move'), ('Initial', 'Initial'), ('state', 'state'), ('Final', 'final'), ('states', 'state'), ('or', 'or'), ('accepting', 'accept'), ('states', 'state'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('2', '2'), ('–', '-'), ('Lexical', 'lexical'), ('Analyzer', 'analyzer'), ('‹#›', '‹#›'), ('Types', 'type'), ('of', 'of'), ('finite', 'finite'), ('automata', 'automata'), ('Types', 'type'), ('of', 'of'), ('finite', 'finite'), ('automata', 'automata'), ('are', 'be'), (':', ':'), ('Nondeterministic', 'Nondeterministic'), ('finite', 'finite'), ('automata', 'automata'), ('(', '('), ('NFA', 'nfa'), (')', ')'), (':', ':')] 

 Dependency tags are: 
>> [(('Set', 'root'), 'root'), (('of', 'symbol'), 'case'), (('input', 'symbol'), 'compound'), (('symbol', 'Set'), 'nmod'), (('A', 'function'), 'det'), (('transition', 'function'), 'compound'), (('function', 'move'), 'nsubj'), (('move', 'Set'), 'parataxis'), (('Initial', 'states'), 'amod'), (('state', 'states'), 'compound'), (('Final', 'states'), 'amod'), (('states', 'move'), 'obj'), (('or', 'accepting'), 'cc'), (('accepting', 'move'), 'conj'), (('states', 'accepting'), 'obj'), (('Prof.', 'states'), 'compound'), (('Dixita', 'Prof.'), 'flat'), (('B', 'Prof.'), 'flat'), (('Kagathara', 'Prof.'), 'flat'), (('#', 'Prof.'), 'appos'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', '#'), 'appos'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', '#'), 'appos'), (('2', 'Unit'), 'nummod'), (('–', 'move'), 'punct'), (('Lexical', 'Analyzer'), 'amod'), (('Analyzer', 'Types'), 'compound'), (('‹#›', 'Types'), 'compound'), (('Types', 'move'), 'conj'), (('of', 'Types'), 'case'), (('finite', 'Types'), 'amod'), (('automata', 'Types'), 'compound'), (('Types', 'Types'), 'nmod'), (('of', 'automata'), 'case'), (('finite', 'automata'), 'amod'), (('automata', 'Types'), 'nmod'), (('are', 'automata'), 'cop'), ((':', 'automata'), 'punct'), (('Nondeterministic', 'automata'), 'amod'), (('finite', 'automata'), 'amod'), (('automata', 'Set'), 'parataxis'), (('(', 'NFA'), 'punct'), (('NFA', 'automata'), 'appos'), ((')', 'NFA'), 'punct'), ((':', 'automata'), 'punct')]

 Named Entities are: 
>> [('2', 'CARDINAL')]

========================== Sentence 70 ===========================

 There are no restrictions on the edges leaving a state. 

Tokens are: 
>> ['There', 'are', 'no', 'restrictions', 'on', 'the', 'edges', 'leaving', 'a', 'state', '.'] 

 UPOS tags are: 
>> [('There', 'PRON'), ('are', 'VERB'), ('no', 'DET'), ('restrictions', 'NOUN'), ('on', 'ADP'), ('the', 'DET'), ('edges', 'NOUN'), ('leaving', 'VERB'), ('a', 'DET'), ('state', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('There', 'EX'), ('are', 'VBP'), ('no', 'DT'), ('restrictions', 'NNS'), ('on', 'IN'), ('the', 'DT'), ('edges', 'NNS'), ('leaving', 'VBG'), ('a', 'DT'), ('state', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('There', 'there'), ('are', 'be'), ('no', 'no'), ('restrictions', 'restriction'), ('on', 'on'), ('the', 'the'), ('edges', 'edge'), ('leaving', 'leave'), ('a', 'a'), ('state', 'state'), ('.', '.')] 

 Dependency tags are: 
>> [(('There', 'are'), 'expl'), (('are', 'root'), 'root'), (('no', 'restrictions'), 'det'), (('restrictions', 'are'), 'nsubj'), (('on', 'edges'), 'case'), (('the', 'edges'), 'det'), (('edges', 'restrictions'), 'nmod'), (('leaving', 'edges'), 'acl'), (('a', 'state'), 'det'), (('state', 'leaving'), 'obj'), (('.', 'are'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 71 ===========================

 There can be several with the same symbol as label and some edges can be labeled with . 

Tokens are: 
>> ['There', 'can', 'be', 'several', 'with', 'the', 'same', 'symbol', 'as', 'label', 'and', 'some', 'edges', 'can', 'be', 'labeled', 'with', '.'] 

 UPOS tags are: 
>> [('There', 'PRON'), ('can', 'AUX'), ('be', 'VERB'), ('several', 'ADJ'), ('with', 'ADP'), ('the', 'DET'), ('same', 'ADJ'), ('symbol', 'NOUN'), ('as', 'ADP'), ('label', 'NOUN'), ('and', 'CCONJ'), ('some', 'DET'), ('edges', 'NOUN'), ('can', 'AUX'), ('be', 'AUX'), ('labeled', 'VERB'), ('with', 'ADP'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('There', 'EX'), ('can', 'MD'), ('be', 'VB'), ('several', 'JJ'), ('with', 'IN'), ('the', 'DT'), ('same', 'JJ'), ('symbol', 'NN'), ('as', 'IN'), ('label', 'NN'), ('and', 'CC'), ('some', 'DT'), ('edges', 'NNS'), ('can', 'MD'), ('be', 'VB'), ('labeled', 'VBN'), ('with', 'IN'), ('.', '.')] 

 Lemmas are: 
>> [('There', 'there'), ('can', 'can'), ('be', 'be'), ('several', 'several'), ('with', 'with'), ('the', 'the'), ('same', 'same'), ('symbol', 'symbol'), ('as', 'as'), ('label', 'label'), ('and', 'and'), ('some', 'some'), ('edges', 'edge'), ('can', 'can'), ('be', 'be'), ('labeled', 'label'), ('with', 'with'), ('.', '.')] 

 Dependency tags are: 
>> [(('There', 'be'), 'expl'), (('can', 'be'), 'aux'), (('be', 'root'), 'root'), (('several', 'be'), 'nsubj'), (('with', 'symbol'), 'case'), (('the', 'symbol'), 'det'), (('same', 'symbol'), 'amod'), (('symbol', 'several'), 'obl'), (('as', 'label'), 'case'), (('label', 'symbol'), 'nmod'), (('and', 'labeled'), 'cc'), (('some', 'edges'), 'det'), (('edges', 'labeled'), 'nsubj:pass'), (('can', 'labeled'), 'aux'), (('be', 'labeled'), 'aux:pass'), (('labeled', 'be'), 'conj'), (('with', 'labeled'), 'obl'), (('.', 'be'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 72 ===========================

 1 2 3 4 a b b  a b 1 2 3 4 a b b  a a a b DFA NFA b Deterministic finite automata (DFA): have for each state exactly one edge leaving out for each symbol. 

Tokens are: 
>> ['1', '2', '3', '4', 'a', 'b', 'b', 'a', 'b', '1', '2', '3', '4', 'a', 'b', 'b', 'a', 'a', 'a', 'b', 'DFA', 'NFA', 'b', 'Deterministic', 'finite', 'automata', '(', 'DFA', ')', ':', 'have', 'for', 'each', 'state', 'exactly', 'one', 'edge', 'leaving', 'out', 'for', 'each', 'symbol', '.'] 

 UPOS tags are: 
>> [('1', 'NUM'), ('2', 'NUM'), ('3', 'NUM'), ('4', 'NUM'), ('a', 'DET'), ('b', 'NUM'), ('b', 'NUM'), ('a', 'DET'), ('b', 'NOUN'), ('1', 'NUM'), ('2', 'NUM'), ('3', 'NUM'), ('4', 'NUM'), ('a', 'DET'), ('b', 'NOUN'), ('b', 'NOUN'), ('a', 'DET'), ('a', 'DET'), ('a', 'DET'), ('b', 'NOUN'), ('DFA', 'NOUN'), ('NFA', 'NOUN'), ('b', 'NOUN'), ('Deterministic', 'ADJ'), ('finite', 'ADJ'), ('automata', 'NOUN'), ('(', 'PUNCT'), ('DFA', 'NOUN'), (')', 'PUNCT'), (':', 'PUNCT'), ('have', 'VERB'), ('for', 'ADP'), ('each', 'DET'), ('state', 'NOUN'), ('exactly', 'ADV'), ('one', 'NUM'), ('edge', 'NOUN'), ('leaving', 'VERB'), ('out', 'ADP'), ('for', 'ADP'), ('each', 'DET'), ('symbol', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('1', 'LS'), ('2', 'LS'), ('3', 'LS'), ('4', 'LS'), ('a', 'DT'), ('b', 'CD'), ('b', 'CD'), ('a', 'DT'), ('b', 'NN'), ('1', 'CD'), ('2', 'CD'), ('3', 'CD'), ('4', 'CD'), ('a', 'DT'), ('b', 'NN'), ('b', 'NN'), ('a', 'DT'), ('a', 'DT'), ('a', 'DT'), ('b', 'NN'), ('DFA', 'NN'), ('NFA', 'NN'), ('b', 'NN'), ('Deterministic', 'JJ'), ('finite', 'JJ'), ('automata', 'NN'), ('(', '-LRB-'), ('DFA', 'NN'), (')', '-RRB-'), (':', ':'), ('have', 'VB'), ('for', 'IN'), ('each', 'DT'), ('state', 'NN'), ('exactly', 'RB'), ('one', 'CD'), ('edge', 'NN'), ('leaving', 'VBG'), ('out', 'RP'), ('for', 'IN'), ('each', 'DT'), ('symbol', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('1', '1'), ('2', '2'), ('3', '3'), ('4', '4'), ('a', 'a'), ('b', 'b'), ('b', 'b'), ('a', 'a'), ('b', 'b'), ('1', '1'), ('2', '2'), ('3', '3'), ('4', '4'), ('a', 'a'), ('b', 'b'), ('b', 'b'), ('a', 'a'), ('a', 'a'), ('a', 'a'), ('b', 'b'), ('DFA', 'dfa'), ('NFA', 'nfa'), ('b', 'b'), ('Deterministic', 'Deterministic'), ('finite', 'finite'), ('automata', 'automata'), ('(', '('), ('DFA', 'dfa'), (')', ')'), (':', ':'), ('have', 'have'), ('for', 'for'), ('each', 'each'), ('state', 'state'), ('exactly', 'exactly'), ('one', 'one'), ('edge', 'edge'), ('leaving', 'leave'), ('out', 'out'), ('for', 'for'), ('each', 'each'), ('symbol', 'symbol'), ('.', '.')] 

 Dependency tags are: 
>> [(('1', '2'), 'compound'), (('2', '3'), 'compound'), (('3', '4'), 'compound'), (('4', 'b'), 'nummod'), (('a', 'b'), 'det'), (('b', 'b'), 'compound'), (('b', 'b'), 'nummod'), (('a', 'b'), 'det'), (('b', 'root'), 'root'), (('1', 'b'), 'nummod'), (('2', '3'), 'compound'), (('3', 'b'), 'nummod'), (('4', 'b'), 'nummod'), (('a', 'b'), 'det'), (('b', 'b'), 'compound'), (('b', 'b'), 'appos'), (('a', 'automata'), 'det'), (('a', 'automata'), 'det'), (('a', 'automata'), 'det'), (('b', 'DFA'), 'compound'), (('DFA', 'automata'), 'compound'), (('NFA', 'automata'), 'compound'), (('b', 'automata'), 'compound'), (('Deterministic', 'automata'), 'amod'), (('finite', 'automata'), 'amod'), (('automata', 'b'), 'conj'), (('(', 'DFA'), 'punct'), (('DFA', 'automata'), 'appos'), ((')', 'DFA'), 'punct'), ((':', 'have'), 'punct'), (('have', 'automata'), 'parataxis'), (('for', 'state'), 'case'), (('each', 'state'), 'det'), (('state', 'have'), 'obl'), (('exactly', 'one'), 'advmod'), (('one', 'edge'), 'nummod'), (('edge', 'have'), 'obj'), (('leaving', 'edge'), 'acl'), (('out', 'leaving'), 'compound:prt'), (('for', 'symbol'), 'case'), (('each', 'symbol'), 'det'), (('symbol', 'leaving'), 'obl'), (('.', 'have'), 'punct')]

 Named Entities are: 
>> [('one', 'CARDINAL')]

========================== Sentence 73 ===========================

 DFA NFA    Prof. Dixita B Kagathara  #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Regular expression to NFA using Thompson's rule        Regular expression to NFA using Thompson's rule For  , construct the NFA     For  in , construct the NFA      𝜖 start    a start For regular expression       Ex: ab      start N(s) N(t) 1 2 3 a b     Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Regular expression to NFA using Thompson's rule For regular expression        Ex: (a|b)       start N(s) N(t)     𝜖 𝜖 𝜖 𝜖 1 2 5 3 4 6 a b 𝜖 𝜖 𝜖 𝜖  For regular expression *       Ex: a*     start N(s)   𝜖 𝜖 𝜖 𝜖 1   𝜖 𝜖 𝜖 𝜖 2 3     Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Regular expression to NFA using Thompson's rule a*b      b*ab   1  𝜖 𝜖 𝜖 2 3     1  𝜖 𝜖 𝜖 𝜖 2 3   5       Prof. 

Tokens are: 
>> ['DFA', 'NFA', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '2', '–', 'Lexical', 'Analyzer', '‹#›', 'Regular', 'expression', 'to', 'NFA', 'using', 'Thompson', "'s", 'rule', 'Regular', 'expression', 'to', 'NFA', 'using', 'Thompson', "'s", 'rule', 'For', ',', 'construct', 'the', 'NFA', 'For', 'in', ',', 'construct', 'the', 'NFA', '𝜖', 'start', 'a', 'start', 'For', 'regular', 'expression', 'Ex', ':', 'ab', 'start', 'N', '(', 's', ')', 'N', '(', 't', ')', '1', '2', '3', 'a', 'b', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '2', '–', 'Lexical', 'Analyzer', '‹#›', 'Regular', 'expression', 'to', 'NFA', 'using', 'Thompson', "'s", 'rule', 'For', 'regular', 'expression', 'Ex', ':', '(', 'a|b', ')', 'start', 'N', '(', 's', ')', 'N', '(', 't', ')', '𝜖', '𝜖', '𝜖', '𝜖', '1', '2', '5', '3', '4', '6', 'a', 'b', '𝜖', '𝜖', '𝜖', '𝜖', 'For', 'regular', 'expression', '*', 'Ex', ':', 'a*', 'start', 'N', '(', 's', ')', '𝜖', '𝜖', '𝜖', '𝜖', '1', '𝜖', '𝜖', '𝜖', '𝜖', '2', '3', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '2', '–', 'Lexical', 'Analyzer', '‹#›', 'Regular', 'expression', 'to', 'NFA', 'using', 'Thompson', "'s", 'rule', 'a*b', 'b*ab', '1', '𝜖', '𝜖', '𝜖', '2', '3', '1', '𝜖', '𝜖', '𝜖', '𝜖', '2', '3', '5', 'Prof', '.'] 

 UPOS tags are: 
>> [('DFA', 'PROPN'), ('NFA', 'PROPN'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'ADJ'), ('Analyzer', 'NOUN'), ('‹#›', 'NOUN'), ('Regular', 'ADJ'), ('expression', 'NOUN'), ('to', 'ADP'), ('NFA', 'PROPN'), ('using', 'VERB'), ('Thompson', 'PROPN'), ("'s", 'PART'), ('rule', 'NOUN'), ('Regular', 'ADJ'), ('expression', 'NOUN'), ('to', 'ADP'), ('NFA', 'PROPN'), ('using', 'VERB'), ('Thompson', 'PROPN'), ("'s", 'PART'), ('rule', 'NOUN'), ('For', 'ADP'), (',', 'PUNCT'), ('construct', 'VERB'), ('the', 'DET'), ('NFA', 'PROPN'), ('For', 'ADP'), ('in', 'ADV'), (',', 'PUNCT'), ('construct', 'VERB'), ('the', 'DET'), ('NFA', 'PROPN'), ('𝜖', 'NOUN'), ('start', 'VERB'), ('a', 'DET'), ('start', 'NOUN'), ('For', 'ADP'), ('regular', 'ADJ'), ('expression', 'NOUN'), ('Ex', 'NOUN'), (':', 'PUNCT'), ('ab', 'NOUN'), ('start', 'NOUN'), ('N', 'PROPN'), ('(', 'PUNCT'), ('s', 'ADJ'), (')', 'PUNCT'), ('N', 'NOUN'), ('(', 'PUNCT'), ('t', 'NUM'), (')', 'PUNCT'), ('1', 'NUM'), ('2', 'NUM'), ('3', 'NUM'), ('a', 'DET'), ('b', 'NOUN'), ('Prof.', 'NOUN'), ('Dixita', 'PROPN'), ('B', 'NOUN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'ADJ'), ('Analyzer', 'NOUN'), ('‹#›', 'NOUN'), ('Regular', 'ADJ'), ('expression', 'NOUN'), ('to', 'ADP'), ('NFA', 'PROPN'), ('using', 'VERB'), ('Thompson', 'PROPN'), ("'s", 'PART'), ('rule', 'NOUN'), ('For', 'ADP'), ('regular', 'ADJ'), ('expression', 'NOUN'), ('Ex', 'NOUN'), (':', 'PUNCT'), ('(', 'PUNCT'), ('a|b', 'NOUN'), (')', 'PUNCT'), ('start', 'NOUN'), ('N', 'PROPN'), ('(', 'PUNCT'), ('s', 'ADJ'), (')', 'PUNCT'), ('N', 'NOUN'), ('(', 'PUNCT'), ('t', 'NOUN'), (')', 'PUNCT'), ('𝜖', 'NOUN'), ('𝜖', 'NOUN'), ('𝜖', 'NOUN'), ('𝜖', 'NOUN'), ('1', 'NUM'), ('2', 'NUM'), ('5', 'NUM'), ('3', 'NUM'), ('4', 'NUM'), ('6', 'NUM'), ('a', 'DET'), ('b', 'NOUN'), ('𝜖', 'NOUN'), ('𝜖', 'NOUN'), ('𝜖', 'NOUN'), ('𝜖', 'NOUN'), ('For', 'ADP'), ('regular', 'ADJ'), ('expression', 'NOUN'), ('*', 'PUNCT'), ('Ex', 'NOUN'), (':', 'PUNCT'), ('a*', 'NOUN'), ('start', 'NOUN'), ('N', 'NOUN'), ('(', 'PUNCT'), ('s', 'NOUN'), (')', 'PUNCT'), ('𝜖', 'PRON'), ('𝜖', 'NOUN'), ('𝜖', 'NOUN'), ('𝜖', 'NOUN'), ('1', 'NUM'), ('𝜖', 'NOUN'), ('𝜖', 'NOUN'), ('𝜖', 'NOUN'), ('𝜖', 'NOUN'), ('2', 'NUM'), ('3', 'NUM'), ('Prof.', 'NOUN'), ('Dixita', 'NOUN'), ('B', 'NOUN'), ('Kagathara', 'NOUN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NOUN'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'ADJ'), ('Analyzer', 'NOUN'), ('‹#›', 'NOUN'), ('Regular', 'ADJ'), ('expression', 'NOUN'), ('to', 'ADP'), ('NFA', 'PROPN'), ('using', 'VERB'), ('Thompson', 'PROPN'), ("'s", 'PART'), ('rule', 'NOUN'), ('a*b', 'NOUN'), ('b*ab', 'VERB'), ('1', 'NUM'), ('𝜖', 'NOUN'), ('𝜖', 'NOUN'), ('𝜖', 'NOUN'), ('2', 'NUM'), ('3', 'NUM'), ('1', 'NUM'), ('𝜖', 'NOUN'), ('𝜖', 'NOUN'), ('𝜖', 'NOUN'), ('𝜖', 'NOUN'), ('2', 'NUM'), ('3', 'NUM'), ('5', 'NUM'), ('Prof', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('DFA', 'NNP'), ('NFA', 'NNP'), ('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('2', 'CD'), ('–', ','), ('Lexical', 'JJ'), ('Analyzer', 'NN'), ('‹#›', 'NN'), ('Regular', 'JJ'), ('expression', 'NN'), ('to', 'IN'), ('NFA', 'NNP'), ('using', 'VBG'), ('Thompson', 'NNP'), ("'s", 'POS'), ('rule', 'NN'), ('Regular', 'JJ'), ('expression', 'NN'), ('to', 'IN'), ('NFA', 'NNP'), ('using', 'VBG'), ('Thompson', 'NNP'), ("'s", 'POS'), ('rule', 'NN'), ('For', 'IN'), (',', ','), ('construct', 'VB'), ('the', 'DT'), ('NFA', 'NNP'), ('For', 'IN'), ('in', 'RB'), (',', ','), ('construct', 'VB'), ('the', 'DT'), ('NFA', 'NNP'), ('𝜖', 'NN'), ('start', 'VB'), ('a', 'DT'), ('start', 'NN'), ('For', 'IN'), ('regular', 'JJ'), ('expression', 'NN'), ('Ex', 'NN'), (':', ':'), ('ab', 'NN'), ('start', 'NN'), ('N', 'NNP'), ('(', '-LRB-'), ('s', 'AFX'), (')', '-RRB-'), ('N', 'NN'), ('(', '-LRB-'), ('t', 'LS'), (')', '-RRB-'), ('1', 'CD'), ('2', 'CD'), ('3', 'CD'), ('a', 'DT'), ('b', 'NN'), ('Prof.', 'NN'), ('Dixita', 'NNP'), ('B', 'NN'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('2', 'CD'), ('–', ','), ('Lexical', 'JJ'), ('Analyzer', 'NN'), ('‹#›', 'NN'), ('Regular', 'JJ'), ('expression', 'NN'), ('to', 'IN'), ('NFA', 'NNP'), ('using', 'VBG'), ('Thompson', 'NNP'), ("'s", 'POS'), ('rule', 'NN'), ('For', 'IN'), ('regular', 'JJ'), ('expression', 'NN'), ('Ex', 'NN'), (':', ':'), ('(', '-LRB-'), ('a|b', 'NN'), (')', '-RRB-'), ('start', 'NN'), ('N', 'NNP'), ('(', '-LRB-'), ('s', 'AFX'), (')', '-RRB-'), ('N', 'NN'), ('(', '-LRB-'), ('t', 'NN'), (')', '-RRB-'), ('𝜖', 'NN'), ('𝜖', 'NN'), ('𝜖', 'NN'), ('𝜖', 'NN'), ('1', 'CD'), ('2', 'CD'), ('5', 'CD'), ('3', 'CD'), ('4', 'CD'), ('6', 'CD'), ('a', 'DT'), ('b', 'NN'), ('𝜖', 'NN'), ('𝜖', 'NN'), ('𝜖', 'NN'), ('𝜖', 'NN'), ('For', 'IN'), ('regular', 'JJ'), ('expression', 'NN'), ('*', 'NFP'), ('Ex', 'NN'), (':', ':'), ('a*', 'NN'), ('start', 'NN'), ('N', 'NN'), ('(', '-LRB-'), ('s', 'NN'), (')', '-RRB-'), ('𝜖', 'PRP'), ('𝜖', 'NN'), ('𝜖', 'NN'), ('𝜖', 'NN'), ('1', 'CD'), ('𝜖', 'NN'), ('𝜖', 'NN'), ('𝜖', 'NN'), ('𝜖', 'NN'), ('2', 'CD'), ('3', 'CD'), ('Prof.', 'NN'), ('Dixita', 'NN'), ('B', 'NN'), ('Kagathara', 'NN'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'NN'), ('Unit', 'NN'), ('2', 'CD'), ('–', ','), ('Lexical', 'JJ'), ('Analyzer', 'NN'), ('‹#›', 'NN'), ('Regular', 'JJ'), ('expression', 'NN'), ('to', 'IN'), ('NFA', 'NNP'), ('using', 'VBG'), ('Thompson', 'NNP'), ("'s", 'POS'), ('rule', 'NN'), ('a*b', 'NN'), ('b*ab', 'VB'), ('1', 'CD'), ('𝜖', 'NN'), ('𝜖', 'NN'), ('𝜖', 'NN'), ('2', 'CD'), ('3', 'CD'), ('1', 'CD'), ('𝜖', 'NN'), ('𝜖', 'NN'), ('𝜖', 'NN'), ('𝜖', 'NN'), ('2', 'CD'), ('3', 'CD'), ('5', 'CD'), ('Prof', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('DFA', 'DFA'), ('NFA', 'NFA'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('2', '2'), ('–', '-'), ('Lexical', 'lexical'), ('Analyzer', 'analyzer'), ('‹#›', '‹#›'), ('Regular', 'regular'), ('expression', 'expression'), ('to', 'to'), ('NFA', 'NFA'), ('using', 'use'), ('Thompson', 'Thompson'), ("'s", "'s"), ('rule', 'rule'), ('Regular', 'regular'), ('expression', 'expression'), ('to', 'to'), ('NFA', 'NFA'), ('using', 'use'), ('Thompson', 'Thompson'), ("'s", "'s"), ('rule', 'rule'), ('For', 'for'), (',', ','), ('construct', 'construct'), ('the', 'the'), ('NFA', 'NFA'), ('For', 'for'), ('in', 'in'), (',', ','), ('construct', 'construct'), ('the', 'the'), ('NFA', 'NFA'), ('𝜖', '𝜖'), ('start', 'start'), ('a', 'a'), ('start', 'start'), ('For', 'for'), ('regular', 'regular'), ('expression', 'expression'), ('Ex', 'ex'), (':', ':'), ('ab', 'ab'), ('start', 'start'), ('N', 'N'), ('(', '('), ('s', 's'), (')', ')'), ('N', 'N'), ('(', '('), ('t', 't'), (')', ')'), ('1', '1'), ('2', '2'), ('3', '3'), ('a', 'a'), ('b', 'b'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'b'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('2', '2'), ('–', '-'), ('Lexical', 'lexical'), ('Analyzer', 'analyzer'), ('‹#›', '‹#›'), ('Regular', 'regular'), ('expression', 'expression'), ('to', 'to'), ('NFA', 'NFA'), ('using', 'use'), ('Thompson', 'Thompson'), ("'s", "'s"), ('rule', 'rule'), ('For', 'for'), ('regular', 'regular'), ('expression', 'expression'), ('Ex', 'ex'), (':', ':'), ('(', '('), ('a|b', 'a|b'), (')', ')'), ('start', 'start'), ('N', 'N'), ('(', '('), ('s', 's'), (')', ')'), ('N', 'N'), ('(', '('), ('t', 't'), (')', ')'), ('𝜖', '𝜖'), ('𝜖', '𝜖'), ('𝜖', '𝜖'), ('𝜖', '𝜖'), ('1', '1'), ('2', '2'), ('5', '5'), ('3', '3'), ('4', '4'), ('6', '6'), ('a', 'a'), ('b', 'b'), ('𝜖', '𝜖'), ('𝜖', '𝜖'), ('𝜖', '𝜖'), ('𝜖', '𝜖'), ('For', 'for'), ('regular', 'regular'), ('expression', 'expression'), ('*', '*'), ('Ex', 'ex'), (':', ':'), ('a*', 'a*'), ('start', 'start'), ('N', 'N'), ('(', '('), ('s', 's'), (')', ')'), ('𝜖', '𝜖'), ('𝜖', '𝜖'), ('𝜖', '𝜖'), ('𝜖', '𝜖'), ('1', '1'), ('𝜖', '𝜖'), ('𝜖', '𝜖'), ('𝜖', '𝜖'), ('𝜖', '𝜖'), ('2', '2'), ('3', '3'), ('Prof.', 'Prof.'), ('Dixita', 'dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('2', '2'), ('–', '-'), ('Lexical', 'lexical'), ('Analyzer', 'analyzer'), ('‹#›', '‹#›'), ('Regular', 'regular'), ('expression', 'expression'), ('to', 'to'), ('NFA', 'NFA'), ('using', 'use'), ('Thompson', 'Thompson'), ("'s", "'s"), ('rule', 'rule'), ('a*b', 'a*b'), ('b*ab', 'b*ab'), ('1', '1'), ('𝜖', '𝜖'), ('𝜖', '𝜖'), ('𝜖', '𝜖'), ('2', '2'), ('3', '3'), ('1', '1'), ('𝜖', '𝜖'), ('𝜖', '𝜖'), ('𝜖', '𝜖'), ('𝜖', '𝜖'), ('2', '2'), ('3', '3'), ('5', '5'), ('Prof', 'prof'), ('.', '.')] 

 Dependency tags are: 
>> [(('DFA', 'root'), 'root'), (('NFA', 'DFA'), 'flat'), (('Prof.', 'NFA'), 'flat'), (('Dixita', 'Prof.'), 'flat'), (('B', '#'), 'compound'), (('Kagathara', '#'), 'compound'), (('#', 'Unit'), 'compound'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', 'Unit'), 'dep'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', 'Prof.'), 'appos'), (('2', 'Unit'), 'nummod'), (('–', 'Unit'), 'punct'), (('Lexical', 'Analyzer'), 'amod'), (('Analyzer', 'expression'), 'compound'), (('‹#›', 'expression'), 'compound'), (('Regular', 'expression'), 'amod'), (('expression', '#'), 'conj'), (('to', 'NFA'), 'case'), (('NFA', 'expression'), 'nmod'), (('using', 'expression'), 'acl'), (('Thompson', 'rule'), 'nmod:poss'), (("'s", 'Thompson'), 'case'), (('rule', 'expression'), 'compound'), (('Regular', 'expression'), 'amod'), (('expression', 'using'), 'obj'), (('to', 'NFA'), 'case'), (('NFA', 'using'), 'obl'), (('using', 'expression'), 'acl'), (('Thompson', 'rule'), 'nmod:poss'), (("'s", 'Thompson'), 'case'), (('rule', 'using'), 'obj'), (('For', 'construct'), 'obl'), ((',', 'construct'), 'punct'), (('construct', 'NFA'), 'conj'), (('the', 'NFA'), 'det'), (('NFA', 'construct'), 'obj'), (('For', 'in'), 'case'), (('in', 'construct'), 'obl'), ((',', 'construct'), 'punct'), (('construct', 'construct'), 'conj'), (('the', '𝜖'), 'det'), (('NFA', '𝜖'), 'compound'), (('𝜖', 'start'), 'obj'), (('start', 'construct'), 'xcomp'), (('a', 'start'), 'det'), (('start', 'start'), 'obj'), (('For', 'Ex'), 'case'), (('regular', 'Ex'), 'amod'), (('expression', 'Ex'), 'compound'), (('Ex', 'start'), 'nmod'), ((':', 'N'), 'punct'), (('ab', 'start'), 'compound'), (('start', 'N'), 'compound'), (('N', 'Ex'), 'appos'), (('(', 'N'), 'punct'), (('s', 'N'), 'amod'), ((')', 'N'), 'punct'), (('N', 'N'), 'conj'), (('(', 't'), 'punct'), (('t', 'N'), 'nummod'), ((')', 't'), 'punct'), (('1', '2'), 'compound'), (('2', '3'), 'compound'), (('3', 'b'), 'nummod'), (('a', 'b'), 'det'), (('b', 'Prof.'), 'compound'), (('Prof.', 'B'), 'compound'), (('Dixita', 'B'), 'compound'), (('B', '#'), 'compound'), (('Kagathara', '#'), 'compound'), (('#', 'N'), 'compound'), (('2170701', 'CD'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', 'Unit'), 'compound'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', '#'), 'appos'), (('2', 'Unit'), 'nummod'), (('–', 'Unit'), 'punct'), (('Lexical', 'Analyzer'), 'amod'), (('Analyzer', 'expression'), 'compound'), (('‹#›', 'expression'), 'compound'), (('Regular', 'expression'), 'amod'), (('expression', 'Unit'), 'conj'), (('to', 'NFA'), 'case'), (('NFA', 'using'), 'obl'), (('using', 'expression'), 'acl'), (('Thompson', 'rule'), 'nmod:poss'), (("'s", 'Thompson'), 'case'), (('rule', 'using'), 'obj'), (('For', 'Ex'), 'case'), (('regular', 'Ex'), 'amod'), (('expression', 'Ex'), 'compound'), (('Ex', 'rule'), 'nmod'), ((':', 'a|b'), 'punct'), (('(', 'a|b'), 'punct'), (('a|b', 'N'), 'dep'), ((')', 'a|b'), 'punct'), (('start', 'N'), 'compound'), (('N', 'Ex'), 'conj'), (('(', 'N'), 'punct'), (('s', 'N'), 'amod'), ((')', 'N'), 'punct'), (('N', 'N'), 'compound'), (('(', 't'), 'punct'), (('t', 'N'), 'appos'), ((')', 't'), 'punct'), (('𝜖', '𝜖'), 'compound'), (('𝜖', 't'), 'nmod'), (('𝜖', '𝜖'), 'compound'), (('𝜖', '𝜖'), 'compound'), (('1', '5'), 'compound'), (('2', '5'), 'compound'), (('5', '3'), 'compound'), (('3', '4'), 'compound'), (('4', '6'), 'compound'), (('6', 'b'), 'nummod'), (('a', 'b'), 'det'), (('b', '𝜖'), 'compound'), (('𝜖', '𝜖'), 'compound'), (('𝜖', '𝜖'), 'compound'), (('𝜖', '𝜖'), 'compound'), (('𝜖', 'b'), 'nmod'), (('For', 'expression'), 'case'), (('regular', 'expression'), 'amod'), (('expression', '𝜖'), 'nmod'), (('*', 'Ex'), 'punct'), (('Ex', '𝜖'), 'nsubj'), ((':', 'N'), 'punct'), (('a*', 'N'), 'compound'), (('start', 'N'), 'compound'), (('N', 'Ex'), 'appos'), (('(', 's'), 'punct'), (('s', 'N'), 'appos'), ((')', 's'), 'punct'), (('𝜖', '𝜖'), 'nsubj'), (('𝜖', '𝜖'), 'nsubj'), (('𝜖', '𝜖'), 'det'), (('𝜖', '𝜖'), 'det'), (('1', '𝜖'), 'nummod'), (('𝜖', '𝜖'), 'compound'), (('𝜖', '𝜖'), 'nsubj'), (('𝜖', '𝜖'), 'case'), (('𝜖', 'Prof.'), 'det'), (('2', 'B'), 'nummod'), (('3', 'B'), 'nummod'), (('Prof.', 'B'), 'compound'), (('Dixita', 'B'), 'compound'), (('B', '#'), 'compound'), (('Kagathara', '#'), 'compound'), (('#', 'N'), 'nmod'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', '#'), 'appos'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'compound'), (('Unit', '#'), 'appos'), (('2', 'Unit'), 'nummod'), (('–', 'Unit'), 'punct'), (('Lexical', 'Analyzer'), 'amod'), (('Analyzer', 'expression'), 'compound'), (('‹#›', 'expression'), 'compound'), (('Regular', 'expression'), 'amod'), (('expression', 'Unit'), 'appos'), (('to', 'NFA'), 'case'), (('NFA', 'expression'), 'nmod'), (('using', 'expression'), 'acl'), (('Thompson', 'rule'), 'nmod:poss'), (("'s", 'Thompson'), 'case'), (('rule', 'using'), 'obj'), (('a*b', 'b*ab'), 'obj'), (('b*ab', 'using'), 'obj'), (('1', '𝜖'), 'nummod'), (('𝜖', '𝜖'), 'compound'), (('𝜖', 'b*ab'), 'obj'), (('𝜖', 'b*ab'), 'obj'), (('2', '𝜖'), 'nummod'), (('3', '𝜖'), 'nummod'), (('1', '𝜖'), 'nummod'), (('𝜖', '𝜖'), 'obj'), (('𝜖', '𝜖'), 'case'), (('𝜖', '𝜖'), 'nmod'), (('𝜖', 'Prof'), 'compound'), (('2', '5'), 'compound'), (('3', '5'), 'compound'), (('5', 'Prof'), 'nummod'), (('Prof', '𝜖'), 'nmod'), (('.', 'Analyzer'), 'punct')]

 Named Entities are: 
>> [('2', 'CARDINAL'), ('Thompson', 'PERSON'), ('NFA', 'ORG'), ('Thompson', 'PERSON'), ('NFA', 'ORG'), ('2170701', 'CARDINAL'), ('2', 'CARDINAL'), ('Thompson', 'PERSON')]

========================== Sentence 74 ===========================

 Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Exercise Convert following regular expression to NFA: abba bb(a)* (a|b)* a* | b* a(a)*ab  aa*+ bb* (a+b)*abb 10(0+1)*1 (a+b)*a(a+b) (0+1)*010(0+1)* (010+00)*(10)* 100(1)*00(0+1)*     Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Conversion from NFA to DFA using subset construction method        Subset construction algorithm Input: An NFA . Output: A DFA  D accepting the same language. 

Tokens are: 
>> ['Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '2', '–', 'Lexical', 'Analyzer', '‹#›', 'Exercise', 'Convert', 'following', 'regular', 'expression', 'to', 'NFA', ':', 'abba', 'bb', '(', 'a', ')', '*', '(', 'a|b', ')', '*', 'a*', '|', 'b*', 'a(', 'a', ')', '*', 'ab', 'aa', '*+', 'bb*', '(', 'a+b', ')', '*', 'abb', '10', '(', '0', '+1)', '*1', '(', 'a+b', ')', '*', 'a', '(', 'a+', 'b', ')', '(', '0', '+1)', '*010', '(', '0+1', ')', '*', '(', '010+00', ')', '*', '(', '10', ')', '*', '100', '(', '1', ')', '*', '00', '(', '0+1', ')', '*', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '2', '–', 'Lexical', 'Analyzer', '‹#›', 'Conversion', 'from', 'NFA', 'to', 'DFA', 'using', 'subset', 'construction', 'method', 'Subset', 'construction', 'algorithm', 'Input', ':', 'An', 'NFA', '.', 'Output', ':', 'A', 'DFA', 'D', 'accepting', 'the', 'same', 'language', '.'] 

 UPOS tags are: 
>> [('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'ADJ'), ('Analyzer', 'NOUN'), ('‹#›', 'NOUN'), ('Exercise', 'PROPN'), ('Convert', 'VERB'), ('following', 'VERB'), ('regular', 'ADJ'), ('expression', 'NOUN'), ('to', 'ADP'), ('NFA', 'NOUN'), (':', 'PUNCT'), ('abba', 'NOUN'), ('bb', 'NOUN'), ('(', 'PUNCT'), ('a', 'NUM'), (')', 'PUNCT'), ('*', 'PUNCT'), ('(', 'PUNCT'), ('a|b', 'NOUN'), (')', 'PUNCT'), ('*', 'PUNCT'), ('a*', 'NOUN'), ('|', 'PUNCT'), ('b*', 'NOUN'), ('a(', 'PUNCT'), ('a', 'NOUN'), (')', 'PUNCT'), ('*', 'PUNCT'), ('ab', 'NOUN'), ('aa', 'NOUN'), ('*+', 'PUNCT'), ('bb*', 'NOUN'), ('(', 'PUNCT'), ('a+b', 'NOUN'), (')', 'PUNCT'), ('*', 'PUNCT'), ('abb', 'NOUN'), ('10', 'NUM'), ('(', 'PUNCT'), ('0', 'NUM'), ('+1)', 'NUM'), ('*1', 'NUM'), ('(', 'PUNCT'), ('a+b', 'NOUN'), (')', 'PUNCT'), ('*', 'PUNCT'), ('a', 'DET'), ('(', 'PUNCT'), ('a+', 'NOUN'), ('b', 'NUM'), (')', 'PUNCT'), ('(', 'PUNCT'), ('0', 'NUM'), ('+1)', 'NUM'), ('*010', 'NUM'), ('(', 'PUNCT'), ('0+1', 'NUM'), (')', 'PUNCT'), ('*', 'PUNCT'), ('(', 'PUNCT'), ('010+00', 'NUM'), (')', 'PUNCT'), ('*', 'PUNCT'), ('(', 'PUNCT'), ('10', 'NUM'), (')', 'PUNCT'), ('*', 'PUNCT'), ('100', 'NUM'), ('(', 'PUNCT'), ('1', 'NUM'), (')', 'PUNCT'), ('*', 'PUNCT'), ('00', 'NUM'), ('(', 'PUNCT'), ('0+1', 'NUM'), (')', 'PUNCT'), ('*', 'PUNCT'), ('Prof.', 'NOUN'), ('Dixita', 'PROPN'), ('B', 'NOUN'), ('Kagathara', 'NOUN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'ADJ'), ('Analyzer', 'NOUN'), ('‹#›', 'NOUN'), ('Conversion', 'NOUN'), ('from', 'ADP'), ('NFA', 'NOUN'), ('to', 'ADP'), ('DFA', 'NOUN'), ('using', 'VERB'), ('subset', 'NOUN'), ('construction', 'NOUN'), ('method', 'NOUN'), ('Subset', 'NOUN'), ('construction', 'NOUN'), ('algorithm', 'NOUN'), ('Input', 'NOUN'), (':', 'PUNCT'), ('An', 'DET'), ('NFA', 'NOUN'), ('.', 'PUNCT'), ('Output', 'NOUN'), (':', 'PUNCT'), ('A', 'DET'), ('DFA', 'NOUN'), ('D', 'NOUN'), ('accepting', 'VERB'), ('the', 'DET'), ('same', 'ADJ'), ('language', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('2', 'CD'), ('–', ','), ('Lexical', 'JJ'), ('Analyzer', 'NN'), ('‹#›', 'NN'), ('Exercise', 'NNP'), ('Convert', 'VB'), ('following', 'VBG'), ('regular', 'JJ'), ('expression', 'NN'), ('to', 'IN'), ('NFA', 'NN'), (':', ':'), ('abba', 'NN'), ('bb', 'NN'), ('(', '-LRB-'), ('a', 'CD'), (')', '-RRB-'), ('*', 'NFP'), ('(', '-LRB-'), ('a|b', 'NN'), (')', '-RRB-'), ('*', 'NFP'), ('a*', 'NN'), ('|', ','), ('b*', 'NN'), ('a(', '-LRB-'), ('a', 'NN'), (')', '-RRB-'), ('*', 'NFP'), ('ab', 'NN'), ('aa', 'NN'), ('*+', 'NFP'), ('bb*', 'NN'), ('(', '-LRB-'), ('a+b', 'NN'), (')', '-RRB-'), ('*', 'NFP'), ('abb', 'NN'), ('10', 'CD'), ('(', '-LRB-'), ('0', 'CD'), ('+1)', 'CD'), ('*1', 'CD'), ('(', '-LRB-'), ('a+b', 'NN'), (')', '-RRB-'), ('*', 'NFP'), ('a', 'DT'), ('(', '-LRB-'), ('a+', 'NN'), ('b', 'CD'), (')', '-RRB-'), ('(', '-LRB-'), ('0', 'CD'), ('+1)', 'CD'), ('*010', 'CD'), ('(', '-LRB-'), ('0+1', 'CD'), (')', '-RRB-'), ('*', 'NFP'), ('(', '-LRB-'), ('010+00', 'CD'), (')', '-RRB-'), ('*', 'NFP'), ('(', '-LRB-'), ('10', 'CD'), (')', '-RRB-'), ('*', 'NFP'), ('100', 'CD'), ('(', '-LRB-'), ('1', 'CD'), (')', '-RRB-'), ('*', 'NFP'), ('00', 'CD'), ('(', '-LRB-'), ('0+1', 'CD'), (')', '-RRB-'), ('*', 'NFP'), ('Prof.', 'NN'), ('Dixita', 'NNP'), ('B', 'NN'), ('Kagathara', 'NN'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('2', 'CD'), ('–', ','), ('Lexical', 'JJ'), ('Analyzer', 'NN'), ('‹#›', 'NN'), ('Conversion', 'NN'), ('from', 'IN'), ('NFA', 'NN'), ('to', 'IN'), ('DFA', 'NN'), ('using', 'VBG'), ('subset', 'NN'), ('construction', 'NN'), ('method', 'NN'), ('Subset', 'NN'), ('construction', 'NN'), ('algorithm', 'NN'), ('Input', 'NN'), (':', ':'), ('An', 'DT'), ('NFA', 'NN'), ('.', '.'), ('Output', 'NN'), (':', ':'), ('A', 'DT'), ('DFA', 'NN'), ('D', 'NN'), ('accepting', 'VBG'), ('the', 'DT'), ('same', 'JJ'), ('language', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('2', '2'), ('–', '-'), ('Lexical', 'lexical'), ('Analyzer', 'analyzer'), ('‹#›', '‹#›'), ('Exercise', 'Exercise'), ('Convert', 'convert'), ('following', 'follow'), ('regular', 'regular'), ('expression', 'expression'), ('to', 'to'), ('NFA', 'nfa'), (':', ':'), ('abba', 'abba'), ('bb', 'bb'), ('(', '('), ('a', 'a'), (')', ')'), ('*', '*'), ('(', '('), ('a|b', 'a|b'), (')', ')'), ('*', '*'), ('a*', 'a*'), ('|', '|'), ('b*', 'b*'), ('a(', 'a('), ('a', 'a'), (')', ')'), ('*', '*'), ('ab', 'ab'), ('aa', 'a'), ('*+', '*+'), ('bb*', 'bb*'), ('(', '('), ('a+b', 'a+b'), (')', ')'), ('*', '*'), ('abb', 'abb'), ('10', '10'), ('(', '('), ('0', '0'), ('+1)', '+1)'), ('*1', '*1'), ('(', '('), ('a+b', 'a+b'), (')', ')'), ('*', '*'), ('a', 'a'), ('(', '('), ('a+', 'a+'), ('b', 'b'), (')', ')'), ('(', '('), ('0', '0'), ('+1)', '+1)'), ('*010', '*010'), ('(', '('), ('0+1', '0+1'), (')', ')'), ('*', '*'), ('(', '('), ('010+00', '010+00'), (')', ')'), ('*', '*'), ('(', '('), ('10', '10'), (')', ')'), ('*', '*'), ('100', '100'), ('(', '('), ('1', '1'), (')', ')'), ('*', '*'), ('00', '00'), ('(', '('), ('0+1', '0+1'), (')', ')'), ('*', '*'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('2', '2'), ('–', '-'), ('Lexical', 'lexical'), ('Analyzer', 'analyzer'), ('‹#›', '‹#›'), ('Conversion', 'conversion'), ('from', 'from'), ('NFA', 'nfa'), ('to', 'to'), ('DFA', 'dfa'), ('using', 'use'), ('subset', 'subset'), ('construction', 'construction'), ('method', 'method'), ('Subset', 'subset'), ('construction', 'construction'), ('algorithm', 'algorithm'), ('Input', 'input'), (':', ':'), ('An', 'a'), ('NFA', 'nfa'), ('.', '.'), ('Output', 'output'), (':', ':'), ('A', 'a'), ('DFA', 'dfa'), ('D', 'd'), ('accepting', 'accept'), ('the', 'the'), ('same', 'same'), ('language', 'language'), ('.', '.')] 

 Dependency tags are: 
>> [(('Dixita', 'Kagathara'), 'compound'), (('B', 'Kagathara'), 'compound'), (('Kagathara', '#'), 'compound'), (('#', 'root'), 'root'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', '#'), 'appos'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', '#'), 'appos'), (('2', 'Unit'), 'nummod'), (('–', 'Unit'), 'punct'), (('Lexical', 'Analyzer'), 'amod'), (('Analyzer', 'Exercise'), 'compound'), (('‹#›', 'Exercise'), 'compound'), (('Exercise', 'Convert'), 'nsubj'), (('Convert', '#'), 'parataxis'), (('following', 'expression'), 'amod'), (('regular', 'expression'), 'amod'), (('expression', 'Convert'), 'obj'), (('to', 'NFA'), 'case'), (('NFA', 'expression'), 'nmod'), ((':', 'bb'), 'punct'), (('abba', 'bb'), 'compound'), (('bb', 'expression'), 'appos'), (('(', 'a'), 'punct'), (('a', 'bb'), 'dep'), ((')', 'a'), 'punct'), (('*', 'a|b'), 'punct'), (('(', 'a|b'), 'punct'), (('a|b', 'bb'), 'dep'), ((')', 'a|b'), 'punct'), (('*', 'a*'), 'punct'), (('a*', 'bb'), 'conj'), (('|', 'a*'), 'punct'), (('b*', 'a*'), 'appos'), (('a(', 'a'), 'punct'), (('a', 'a*'), 'appos'), ((')', 'a'), 'punct'), (('*', 'aa'), 'punct'), (('ab', '#'), 'conj'), (('aa', '#'), 'conj'), (('*+', 'bb*'), 'punct'), (('bb*', 'bb'), 'conj'), (('(', 'a+b'), 'punct'), (('a+b', 'bb*'), 'appos'), ((')', 'a+b'), 'punct'), (('*', 'abb'), 'punct'), (('abb', 'bb'), 'conj'), (('10', 'abb'), 'nummod'), (('(', 'a+b'), 'punct'), (('0', '+1)'), 'compound'), (('+1)', '*1'), 'compound'), (('*1', 'a+b'), 'nummod'), (('(', 'a+b'), 'punct'), (('a+b', 'abb'), 'appos'), ((')', 'a+b'), 'punct'), (('*', 'b'), 'punct'), (('a', 'b'), 'det'), (('(', 'b'), 'punct'), (('a+', 'b'), 'compound'), (('b', '#'), 'appos'), ((')', 'b'), 'punct'), (('(', '*010'), 'punct'), (('0', '*010'), 'compound'), (('+1)', '*010'), 'compound'), (('*010', '#'), 'appos'), (('(', '0+1'), 'punct'), (('0+1', '+1)'), 'compound'), ((')', '0+1'), 'punct'), (('*', '010+00'), 'punct'), (('(', '010+00'), 'punct'), (('010+00', '0+1'), 'compound'), ((')', '010+00'), 'punct'), (('*', '10'), 'punct'), (('(', '10'), 'punct'), (('10', '100'), 'compound'), ((')', '10'), 'punct'), (('*', '1'), 'punct'), (('100', '1'), 'compound'), (('(', '1'), 'punct'), (('1', '00'), 'compound'), ((')', '1'), 'punct'), (('*', '0+1'), 'punct'), (('00', 'Prof.'), 'nummod'), (('(', '0+1'), 'punct'), (('0+1', '00'), 'compound'), ((')', '0+1'), 'punct'), (('*', 'B'), 'punct'), (('Prof.', 'B'), 'compound'), (('Dixita', 'B'), 'compound'), (('B', '#'), 'conj'), (('Kagathara', '#'), 'compound'), (('#', 'B'), 'compound'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', '#'), 'appos'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', '#'), 'appos'), (('2', 'Unit'), 'nummod'), (('–', 'Unit'), 'punct'), (('Lexical', 'Analyzer'), 'amod'), (('Analyzer', 'Conversion'), 'compound'), (('‹#›', 'Conversion'), 'compound'), (('Conversion', 'Unit'), 'appos'), (('from', 'NFA'), 'case'), (('NFA', 'Conversion'), 'nmod'), (('to', 'DFA'), 'case'), (('DFA', 'Conversion'), 'nmod'), (('using', 'Conversion'), 'acl'), (('subset', 'method'), 'compound'), (('construction', 'method'), 'compound'), (('method', 'using'), 'obj'), (('Subset', 'Input'), 'compound'), (('construction', 'algorithm'), 'compound'), (('algorithm', 'Input'), 'compound'), (('Input', 'using'), 'obj'), ((':', 'Input'), 'punct'), (('An', 'NFA'), 'det'), (('NFA', 'Input'), 'appos'), (('.', 'NFA'), 'punct'), (('Output', 'Input'), 'appos'), ((':', 'D'), 'punct'), (('A', 'D'), 'det'), (('DFA', 'D'), 'compound'), (('D', 'Output'), 'appos'), (('accepting', 'D'), 'acl'), (('the', 'language'), 'det'), (('same', 'language'), 'amod'), (('language', 'accepting'), 'obj'), (('.', '#'), 'punct')]

 Named Entities are: 
>> [('Dixita B Kagathara', 'ORG'), ('2170701', 'CARDINAL'), ('2', 'CARDINAL'), ('2', 'CARDINAL')]

========================== Sentence 75 ===========================

 Method: Algorithm construct a transition table  for D. 

Tokens are: 
>> ['Method', ':', 'Algorithm', 'construct', 'a', 'transition', 'table', 'for', 'D.'] 

 UPOS tags are: 
>> [('Method', 'NOUN'), (':', 'PUNCT'), ('Algorithm', 'NOUN'), ('construct', 'VERB'), ('a', 'DET'), ('transition', 'NOUN'), ('table', 'NOUN'), ('for', 'ADP'), ('D.', 'PROPN')] 

 XPOS tags are: 
>> [('Method', 'NN'), (':', ':'), ('Algorithm', 'NN'), ('construct', 'VB'), ('a', 'DT'), ('transition', 'NN'), ('table', 'NN'), ('for', 'IN'), ('D.', 'NNP')] 

 Lemmas are: 
>> [('Method', 'method'), (':', ':'), ('Algorithm', 'algorithm'), ('construct', 'construct'), ('a', 'a'), ('transition', 'transition'), ('table', 'table'), ('for', 'for'), ('D.', 'D.')] 

 Dependency tags are: 
>> [(('Method', 'root'), 'root'), ((':', 'Method'), 'punct'), (('Algorithm', 'construct'), 'nsubj'), (('construct', 'Method'), 'appos'), (('a', 'table'), 'det'), (('transition', 'table'), 'compound'), (('table', 'construct'), 'obj'), (('for', 'D.'), 'case'), (('D.', 'table'), 'nmod')]

 Named Entities are: 
>> []

========================== Sentence 76 ===========================

 We use the following operation:  	OPERATION	DESCRIPTION 

Tokens are: 
>> ['We', 'use', 'the', 'following', 'operation', ':', 'OPERATION', 'DESCRIPTION'] 

 UPOS tags are: 
>> [('We', 'PRON'), ('use', 'VERB'), ('the', 'DET'), ('following', 'VERB'), ('operation', 'NOUN'), (':', 'PUNCT'), ('OPERATION', 'NOUN'), ('DESCRIPTION', 'NOUN')] 

 XPOS tags are: 
>> [('We', 'PRP'), ('use', 'VBP'), ('the', 'DT'), ('following', 'VBG'), ('operation', 'NN'), (':', ':'), ('OPERATION', 'NN'), ('DESCRIPTION', 'NN')] 

 Lemmas are: 
>> [('We', 'we'), ('use', 'use'), ('the', 'the'), ('following', 'follow'), ('operation', 'operation'), (':', ':'), ('OPERATION', 'operation'), ('DESCRIPTION', 'description')] 

 Dependency tags are: 
>> [(('We', 'use'), 'nsubj'), (('use', 'root'), 'root'), (('the', 'operation'), 'det'), (('following', 'operation'), 'amod'), (('operation', 'use'), 'obj'), ((':', 'DESCRIPTION'), 'punct'), (('OPERATION', 'DESCRIPTION'), 'compound'), (('DESCRIPTION', 'use'), 'parataxis')]

 Named Entities are: 
>> []

========================== Sentence 77 ===========================

 Set of NFA states reachable from NFA state  on – transition alone. 

Tokens are: 
>> ['Set', 'of', 'NFA', 'states', 'reachable', 'from', 'NFA', 'state', 'on', '–', 'transition', 'alone', '.'] 

 UPOS tags are: 
>> [('Set', 'NOUN'), ('of', 'ADP'), ('NFA', 'PROPN'), ('states', 'NOUN'), ('reachable', 'ADJ'), ('from', 'ADP'), ('NFA', 'PROPN'), ('state', 'NOUN'), ('on', 'ADP'), ('–', 'PUNCT'), ('transition', 'NOUN'), ('alone', 'ADV'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Set', 'NN'), ('of', 'IN'), ('NFA', 'NNP'), ('states', 'NNS'), ('reachable', 'JJ'), ('from', 'IN'), ('NFA', 'NNP'), ('state', 'NN'), ('on', 'IN'), ('–', ':'), ('transition', 'NN'), ('alone', 'RB'), ('.', '.')] 

 Lemmas are: 
>> [('Set', 'set'), ('of', 'of'), ('NFA', 'NFA'), ('states', 'state'), ('reachable', 'reachable'), ('from', 'from'), ('NFA', 'NFA'), ('state', 'state'), ('on', 'on'), ('–', '-'), ('transition', 'transition'), ('alone', 'alone'), ('.', '.')] 

 Dependency tags are: 
>> [(('Set', 'root'), 'root'), (('of', 'states'), 'case'), (('NFA', 'states'), 'compound'), (('states', 'Set'), 'nmod'), (('reachable', 'Set'), 'amod'), (('from', 'state'), 'case'), (('NFA', 'state'), 'compound'), (('state', 'reachable'), 'obl'), (('on', 'transition'), 'case'), (('–', 'transition'), 'punct'), (('transition', 'Set'), 'nmod'), (('alone', 'transition'), 'advmod'), (('.', 'Set'), 'punct')]

 Named Entities are: 
>> [('NFA', 'ORG'), ('NFA', 'ORG')]

========================== Sentence 78 ===========================

 Set of NFA states reachable from some NFA state  in  on – transition alone. 

Tokens are: 
>> ['Set', 'of', 'NFA', 'states', 'reachable', 'from', 'some', 'NFA', 'state', 'in', 'on', '–', 'transition', 'alone', '.'] 

 UPOS tags are: 
>> [('Set', 'NOUN'), ('of', 'ADP'), ('NFA', 'PROPN'), ('states', 'NOUN'), ('reachable', 'ADJ'), ('from', 'ADP'), ('some', 'DET'), ('NFA', 'PROPN'), ('state', 'NOUN'), ('in', 'ADP'), ('on', 'ADP'), ('–', 'PUNCT'), ('transition', 'NOUN'), ('alone', 'ADV'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Set', 'NN'), ('of', 'IN'), ('NFA', 'NNP'), ('states', 'NNS'), ('reachable', 'JJ'), ('from', 'IN'), ('some', 'DT'), ('NFA', 'NNP'), ('state', 'NN'), ('in', 'IN'), ('on', 'IN'), ('–', ':'), ('transition', 'NN'), ('alone', 'RB'), ('.', '.')] 

 Lemmas are: 
>> [('Set', 'set'), ('of', 'of'), ('NFA', 'NFA'), ('states', 'state'), ('reachable', 'reachable'), ('from', 'from'), ('some', 'some'), ('NFA', 'NFA'), ('state', 'state'), ('in', 'in'), ('on', 'on'), ('–', '-'), ('transition', 'transition'), ('alone', 'alone'), ('.', '.')] 

 Dependency tags are: 
>> [(('Set', 'root'), 'root'), (('of', 'states'), 'case'), (('NFA', 'states'), 'compound'), (('states', 'Set'), 'nmod'), (('reachable', 'Set'), 'amod'), (('from', 'state'), 'case'), (('some', 'state'), 'det'), (('NFA', 'state'), 'compound'), (('state', 'reachable'), 'obl'), (('in', 'on'), 'case'), (('on', 'transition'), 'case'), (('–', 'transition'), 'punct'), (('transition', 'reachable'), 'obl'), (('alone', 'transition'), 'advmod'), (('.', 'Set'), 'punct')]

 Named Entities are: 
>> [('NFA', 'ORG'), ('NFA', 'ORG')]

========================== Sentence 79 ===========================

 Set of NFA states to which there is a transition on input symbol  from some NFA state  in .     Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Subset construction algorithm initially  be the only state in and it is unmarked; while there is unmarked states T in   do begin 	mark ; 		for each input symbol    do begin 			 			if    is not in  then 				add    as unmarked state to  			 		end 	end     Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Conversion from NFA to DFA  1 (a|b) * abb 2 5 3 4 6 7 8 9 0 10 𝜖 a b 𝜖 a b b  𝜖 𝜖 𝜖 𝜖 𝜖 𝜖    Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Conversion from NFA to DFA 1 2 5 3 4 6 7 8 9 0 𝜖 a b 𝜖 a b b 𝜖 𝜖 𝜖 𝜖 𝜖 𝜖 10   {0, 1, 7, 2, 4} ---- A 𝜖- Closure(0)=    =  {0,1,2,4,7}    Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Conversion from NFA to DFA 1 2 5 3 4 6 7 8 9 0 𝜖 a b 𝜖 a b b 𝜖 𝜖 𝜖 𝜖 𝜖 𝜖 A= {0, 1, 2, 4, 7} Move(A,a) = {3,8} 𝜖- Closure(Move(A,a)) = {3, 6, 7, 1, 2, 4, 8} ---- B    = {1,2,3,4,6,7,8}       10  	States	a	b  	A = {0,1,2,4,7}	B	  	B = {1,2,3,4,6,7,8}		      Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Conversion from NFA to DFA  1 2 5 3 4 6 7 8 0 𝜖 a b 𝜖 a b b 𝜖 𝜖 𝜖 𝜖 𝜖 𝜖 A= {0, 1, 2, 4, 7}  Move(A,b) =  {5} 𝜖- Closure(Move(A,b)) =  {5, 6, 7, 1, 2, 4} ---- C    = {1,2,4,5,6,7}      10  9 	States	a	b  	A = {0,1,2,4,7}	B	C  	B = {1,2,3,4,6,7,8}		  	C = {1,2,4,5,6,7}		      Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Conversion from NFA to DFA 1 2 5 3 4 6 7 8 0 𝜖 a b 𝜖 a b 𝜖 𝜖 𝜖 𝜖 𝜖 𝜖 B = {1, 2, 3, 4, 6, 7, 8} Move(B,a) = {3,8} 𝜖- Closure(Move(B,a)) = {3, 6, 7, 1, 2, 4, 8} ---- 

Tokens are: 
>> ['Set', 'of', 'NFA', 'states', 'to', 'which', 'there', 'is', 'a', 'transition', 'on', 'input', 'symbol', 'from', 'some', 'NFA', 'state', 'in', '.', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '2', '–', 'Lexical', 'Analyzer', '‹#›', 'Subset', 'construction', 'algorithm', 'initially', 'be', 'the', 'only', 'state', 'in', 'and', 'it', 'is', 'unmarked', ';', 'while', 'there', 'is', 'unmarked', 'states', 'T', 'in', 'do', 'begin', 'mark', ';', 'for', 'each', 'input', 'symbol', 'do', 'begin', 'if', 'is', 'not', 'in', 'then', 'add', 'as', 'unmarked', 'state', 'to', 'end', 'end', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '2', '–', 'Lexical', 'Analyzer', '‹#›', 'Conversion', 'from', 'NFA', 'to', 'DFA', '1', '(', 'a|b', ')', '*', 'abb', '2', '5', '3', '4', '6', '7', '8', '9', '0', '10', '𝜖', 'a', 'b', '𝜖', 'a', 'b', 'b', '𝜖', '𝜖', '𝜖', '𝜖', '𝜖', '𝜖', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '2', '–', 'Lexical', 'Analyzer', '‹#›', 'Conversion', 'from', 'NFA', 'to', 'DFA', '1', '2', '5', '3', '4', '6', '7', '8', '9', '0', '𝜖', 'a', 'b', '𝜖', 'a', 'b', 'b', '𝜖', '𝜖', '𝜖', '𝜖', '𝜖', '𝜖', '10', '{', '0', ',', '1', ',', '7', ',', '2', ',', '4', '}', '----', 'A', '𝜖-', 'Closure', '(', '0', ')', '=', '=', '{', '0,1,2,4,7', '}', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '2', '–', 'Lexical', 'Analyzer', '‹#›', 'Conversion', 'from', 'NFA', 'to', 'DFA', '1', '2', '5', '3', '4', '6', '7', '8', '9', '0', '𝜖', 'a', 'b', '𝜖', 'a', 'b', 'b', '𝜖', '𝜖', '𝜖', '𝜖', '𝜖', '𝜖', 'A=', '{', '0', ',', '1', ',', '2', ',', '4', ',', '7', '}', 'Move', '(', 'A', ',', 'a', ')', '=', '{', '3,8', '}', '𝜖-', 'Closure', '(', 'Move', '(', 'A', ',', 'a', ')', ')', '=', '{', '3', ',', '6', ',', '7', ',', '1', ',', '2', ',', '4', ',', '8', '}', '----', 'B', '=', '{', '1,2,3,', '4,6,7,8', '}', '10', 'States', 'a', 'b', 'A', '=', '{', '0', ',', '1,2,', '4,7', '}', 'B', 'B', '=', '{', '1,2,3,', '4,', '6,7,8', '}', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '2', '–', 'Lexical', 'Analyzer', '‹#›', 'Conversion', 'from', 'NFA', 'to', 'DFA', '1', '2', '5', '3', '4', '6', '7', '8', '0', '𝜖', 'a', 'b', '𝜖', 'a', 'b', 'b', '𝜖', '𝜖', '𝜖', '𝜖', '𝜖', '𝜖', 'A=', '{', '0', ',', '1', ',', '2', ',', '4', ',', '7', '}', 'Move', '(', 'A', ',', 'b', ')', '=', '{', '5', '}', '𝜖-', 'Closure', '(', 'Move', '(', 'A', ',', 'b', ')', ')', '=', '{', '5', ',', '6', ',', '7', ',', '1', ',', '2', ',', '4', '}', '----', 'C', '=', '{', '1,2,4,5,6,7', '}', '10', '9', 'States', 'a', 'b', 'A', '=', '{', '0', ',', '1,2,', '4,7', '}', 'B', 'C', 'B', '=', '{', '1,2,3,', '4,', '6,7,8', '}', 'C', '=', '{', '1,2,4,5,6,7', '}', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '2', '–', 'Lexical', 'Analyzer', '‹#›', 'Conversion', 'from', 'NFA', 'to', 'DFA', '1', '2', '5', '3', '4', '6', '7', '8', '0', '𝜖', 'a', 'b', '𝜖', 'a', 'b', '𝜖', '𝜖', '𝜖', '𝜖', '𝜖', '𝜖', 'B', '=', '{', '1', ',', '2', ',', '3', ',', '4', ',', '6', ',', '7', ',', '8', '}', 'Move', '(', 'B', ',', 'a', ')', '=', '{', '3,8', '}', '𝜖-', 'Closure', '(', 'Move', '(', 'B', ',', 'a', ')', ')', '=', '{', '3', ',', '6', ',', '7', ',', '1', ',', '2', ',', '4', ',', '8', '}', '----'] 

 UPOS tags are: 
>> [('Set', 'VERB'), ('of', 'ADP'), ('NFA', 'PROPN'), ('states', 'NOUN'), ('to', 'ADP'), ('which', 'PRON'), ('there', 'PRON'), ('is', 'VERB'), ('a', 'DET'), ('transition', 'NOUN'), ('on', 'ADP'), ('input', 'NOUN'), ('symbol', 'NOUN'), ('from', 'ADP'), ('some', 'DET'), ('NFA', 'PROPN'), ('state', 'NOUN'), ('in', 'ADP'), ('.', 'PUNCT'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'PROPN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'ADJ'), ('Analyzer', 'PROPN'), ('‹#›', 'NOUN'), ('Subset', 'NOUN'), ('construction', 'NOUN'), ('algorithm', 'NOUN'), ('initially', 'ADV'), ('be', 'AUX'), ('the', 'DET'), ('only', 'ADJ'), ('state', 'NOUN'), ('in', 'ADP'), ('and', 'CCONJ'), ('it', 'PRON'), ('is', 'AUX'), ('unmarked', 'ADJ'), (';', 'PUNCT'), ('while', 'SCONJ'), ('there', 'PRON'), ('is', 'VERB'), ('unmarked', 'ADJ'), ('states', 'NOUN'), ('T', 'NOUN'), ('in', 'ADP'), ('do', 'AUX'), ('begin', 'VERB'), ('mark', 'NOUN'), (';', 'PUNCT'), ('for', 'ADP'), ('each', 'DET'), ('input', 'NOUN'), ('symbol', 'NOUN'), ('do', 'AUX'), ('begin', 'VERB'), ('if', 'SCONJ'), ('is', 'AUX'), ('not', 'PART'), ('in', 'ADP'), ('then', 'ADV'), ('add', 'VERB'), ('as', 'ADP'), ('unmarked', 'ADJ'), ('state', 'NOUN'), ('to', 'ADP'), ('end', 'NOUN'), ('end', 'NOUN'), ('Prof.', 'NOUN'), ('Dixita', 'PROPN'), ('B', 'NOUN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'ADJ'), ('Analyzer', 'NOUN'), ('‹#›', 'NOUN'), ('Conversion', 'NOUN'), ('from', 'ADP'), ('NFA', 'NOUN'), ('to', 'ADP'), ('DFA', 'NOUN'), ('1', 'NUM'), ('(', 'PUNCT'), ('a|b', 'NOUN'), (')', 'PUNCT'), ('*', 'PUNCT'), ('abb', 'NOUN'), ('2', 'NUM'), ('5', 'NUM'), ('3', 'NUM'), ('4', 'NUM'), ('6', 'NUM'), ('7', 'NUM'), ('8', 'NUM'), ('9', 'NUM'), ('0', 'NUM'), ('10', 'NUM'), ('𝜖', 'NOUN'), ('a', 'DET'), ('b', 'NOUN'), ('𝜖', 'NOUN'), ('a', 'DET'), ('b', 'NOUN'), ('b', 'NOUN'), ('𝜖', 'NOUN'), ('𝜖', 'NOUN'), ('𝜖', 'NOUN'), ('𝜖', 'NOUN'), ('𝜖', 'NOUN'), ('𝜖', 'NOUN'), ('Prof.', 'NOUN'), ('Dixita', 'NOUN'), ('B', 'NOUN'), ('Kagathara', 'NOUN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'PUNCT'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'ADJ'), ('Analyzer', 'NOUN'), ('‹#›', 'NOUN'), ('Conversion', 'NOUN'), ('from', 'ADP'), ('NFA', 'NOUN'), ('to', 'ADP'), ('DFA', 'NOUN'), ('1', 'NUM'), ('2', 'NUM'), ('5', 'NUM'), ('3', 'NUM'), ('4', 'NUM'), ('6', 'NUM'), ('7', 'NUM'), ('8', 'NUM'), ('9', 'NUM'), ('0', 'NUM'), ('𝜖', 'NOUN'), ('a', 'NOUN'), ('b', 'NOUN'), ('𝜖', 'NOUN'), ('a', 'NOUN'), ('b', 'NOUN'), ('b', 'NOUN'), ('𝜖', 'NOUN'), ('𝜖', 'NOUN'), ('𝜖', 'NOUN'), ('𝜖', 'NOUN'), ('𝜖', 'NOUN'), ('𝜖', 'NOUN'), ('10', 'NUM'), ('{', 'PUNCT'), ('0', 'NUM'), (',', 'PUNCT'), ('1', 'NUM'), (',', 'PUNCT'), ('7', 'NUM'), (',', 'PUNCT'), ('2', 'NUM'), (',', 'PUNCT'), ('4', 'NUM'), ('}', 'PUNCT'), ('----', 'PUNCT'), ('A', 'DET'), ('𝜖-', 'NOUN'), ('Closure', 'NOUN'), ('(', 'PUNCT'), ('0', 'NUM'), (')', 'PUNCT'), ('=', 'SYM'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('0,1,2,4,7', 'NUM'), ('}', 'PUNCT'), ('Prof.', 'NOUN'), ('Dixita', 'NOUN'), ('B', 'NOUN'), ('Kagathara', 'NOUN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'ADJ'), ('Analyzer', 'NOUN'), ('‹#›', 'NOUN'), ('Conversion', 'NOUN'), ('from', 'ADP'), ('NFA', 'NOUN'), ('to', 'ADP'), ('DFA', 'NOUN'), ('1', 'NUM'), ('2', 'NUM'), ('5', 'NUM'), ('3', 'NUM'), ('4', 'NUM'), ('6', 'NUM'), ('7', 'NUM'), ('8', 'NUM'), ('9', 'NUM'), ('0', 'NUM'), ('𝜖', 'NOUN'), ('a', 'NOUN'), ('b', 'NOUN'), ('𝜖', 'NOUN'), ('a', 'NOUN'), ('b', 'NOUN'), ('b', 'NOUN'), ('𝜖', 'NOUN'), ('𝜖', 'NOUN'), ('𝜖', 'NOUN'), ('𝜖', 'NOUN'), ('𝜖', 'NOUN'), ('𝜖', 'NOUN'), ('A=', 'NOUN'), ('{', 'PUNCT'), ('0', 'NUM'), (',', 'PUNCT'), ('1', 'NUM'), (',', 'PUNCT'), ('2', 'NUM'), (',', 'PUNCT'), ('4', 'NUM'), (',', 'PUNCT'), ('7', 'NUM'), ('}', 'PUNCT'), ('Move', 'NOUN'), ('(', 'PUNCT'), ('A', 'NOUN'), (',', 'PUNCT'), ('a', 'NOUN'), (')', 'PUNCT'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('3,8', 'NUM'), ('}', 'PUNCT'), ('𝜖-', 'NOUN'), ('Closure', 'NOUN'), ('(', 'PUNCT'), ('Move', 'NOUN'), ('(', 'PUNCT'), ('A', 'NOUN'), (',', 'PUNCT'), ('a', 'NOUN'), (')', 'PUNCT'), (')', 'PUNCT'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('3', 'NUM'), (',', 'PUNCT'), ('6', 'NUM'), (',', 'PUNCT'), ('7', 'NUM'), (',', 'PUNCT'), ('1', 'NUM'), (',', 'PUNCT'), ('2', 'NUM'), (',', 'PUNCT'), ('4', 'NUM'), (',', 'PUNCT'), ('8', 'NUM'), ('}', 'NOUN'), ('----', 'PUNCT'), ('B', 'NOUN'), ('=', 'SYM'), ('{', 'PUNCT'), ('1,2,3,', 'NUM'), ('4,6,7,8', 'NUM'), ('}', 'PUNCT'), ('10', 'NUM'), ('States', 'PROPN'), ('a', 'NOUN'), ('b', 'NOUN'), ('A', 'NOUN'), ('=', 'SYM'), ('{', 'PUNCT'), ('0', 'NUM'), (',', 'PUNCT'), ('1,2,', 'NUM'), ('4,7', 'NUM'), ('}', 'PUNCT'), ('B', 'NUM'), ('B', 'NOUN'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('1,2,3,', 'NUM'), ('4,', 'NUM'), ('6,7,8', 'NUM'), ('}', 'PUNCT'), ('Prof.', 'NOUN'), ('Dixita', 'PROPN'), ('B', 'NOUN'), ('Kagathara', 'NOUN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'ADJ'), ('Analyzer', 'NOUN'), ('‹#›', 'NOUN'), ('Conversion', 'NOUN'), ('from', 'ADP'), ('NFA', 'NOUN'), ('to', 'ADP'), ('DFA', 'NOUN'), ('1', 'NUM'), ('2', 'NUM'), ('5', 'NUM'), ('3', 'NUM'), ('4', 'NUM'), ('6', 'NUM'), ('7', 'NUM'), ('8', 'NUM'), ('0', 'NUM'), ('𝜖', 'NOUN'), ('a', 'NOUN'), ('b', 'NOUN'), ('𝜖', 'NOUN'), ('a', 'NOUN'), ('b', 'NOUN'), ('b', 'NOUN'), ('𝜖', 'NOUN'), ('𝜖', 'NOUN'), ('𝜖', 'NOUN'), ('𝜖', 'NOUN'), ('𝜖', 'NOUN'), ('𝜖', 'NOUN'), ('A=', 'NOUN'), ('{', 'PUNCT'), ('0', 'NUM'), (',', 'PUNCT'), ('1', 'NUM'), (',', 'PUNCT'), ('2', 'NUM'), (',', 'PUNCT'), ('4', 'NUM'), (',', 'PUNCT'), ('7', 'NUM'), ('}', 'PUNCT'), ('Move', 'NOUN'), ('(', 'PUNCT'), ('A', 'NOUN'), (',', 'PUNCT'), ('b', 'NUM'), (')', 'PUNCT'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('5', 'NUM'), ('}', 'PUNCT'), ('𝜖-', 'NOUN'), ('Closure', 'NOUN'), ('(', 'PUNCT'), ('Move', 'NOUN'), ('(', 'PUNCT'), ('A', 'NOUN'), (',', 'PUNCT'), ('b', 'NUM'), (')', 'PUNCT'), (')', 'PUNCT'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('5', 'NUM'), (',', 'PUNCT'), ('6', 'NUM'), (',', 'PUNCT'), ('7', 'NUM'), (',', 'PUNCT'), ('1', 'NUM'), (',', 'PUNCT'), ('2', 'NUM'), (',', 'PUNCT'), ('4', 'NUM'), ('}', 'NOUN'), ('----', 'PUNCT'), ('C', 'NOUN'), ('=', 'SYM'), ('{', 'PUNCT'), ('1,2,4,5,6,7', 'NUM'), ('}', 'PUNCT'), ('10', 'NUM'), ('9', 'NUM'), ('States', 'PROPN'), ('a', 'NOUN'), ('b', 'NUM'), ('A', 'NOUN'), ('=', 'SYM'), ('{', 'PUNCT'), ('0', 'NUM'), (',', 'PUNCT'), ('1,2,', 'NUM'), ('4,7', 'NUM'), ('}', 'PUNCT'), ('B', 'NUM'), ('C', 'NOUN'), ('B', 'NOUN'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('1,2,3,', 'NUM'), ('4,', 'NUM'), ('6,7,8', 'NUM'), ('}', 'PUNCT'), ('C', 'NOUN'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('1,2,4,5,6,7', 'NUM'), ('}', 'PUNCT'), ('Prof.', 'NOUN'), ('Dixita', 'NOUN'), ('B', 'NOUN'), ('Kagathara', 'NOUN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'ADJ'), ('Analyzer', 'NOUN'), ('‹#›', 'NOUN'), ('Conversion', 'NOUN'), ('from', 'ADP'), ('NFA', 'NOUN'), ('to', 'ADP'), ('DFA', 'NOUN'), ('1', 'NUM'), ('2', 'NUM'), ('5', 'NUM'), ('3', 'NUM'), ('4', 'NUM'), ('6', 'NUM'), ('7', 'NUM'), ('8', 'NUM'), ('0', 'NUM'), ('𝜖', 'NOUN'), ('a', 'NOUN'), ('b', 'NOUN'), ('𝜖', 'NOUN'), ('a', 'NOUN'), ('b', 'NOUN'), ('𝜖', 'NOUN'), ('𝜖', 'NOUN'), ('𝜖', 'NOUN'), ('𝜖', 'NOUN'), ('𝜖', 'NOUN'), ('𝜖', 'NOUN'), ('B', 'NOUN'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('1', 'NUM'), (',', 'PUNCT'), ('2', 'NUM'), (',', 'PUNCT'), ('3', 'NUM'), (',', 'PUNCT'), ('4', 'NUM'), (',', 'PUNCT'), ('6', 'NUM'), (',', 'PUNCT'), ('7', 'NUM'), (',', 'PUNCT'), ('8', 'NUM'), ('}', 'PUNCT'), ('Move', 'NOUN'), ('(', 'PUNCT'), ('B', 'NOUN'), (',', 'PUNCT'), ('a', 'NOUN'), (')', 'PUNCT'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('3,8', 'NUM'), ('}', 'PUNCT'), ('𝜖-', 'NOUN'), ('Closure', 'NOUN'), ('(', 'PUNCT'), ('Move', 'NOUN'), ('(', 'PUNCT'), ('B', 'NOUN'), (',', 'PUNCT'), ('a', 'NOUN'), (')', 'PUNCT'), (')', 'PUNCT'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('3', 'NUM'), (',', 'PUNCT'), ('6', 'NUM'), (',', 'PUNCT'), ('7', 'NUM'), (',', 'PUNCT'), ('1', 'NUM'), (',', 'PUNCT'), ('2', 'NUM'), (',', 'PUNCT'), ('4', 'NUM'), (',', 'PUNCT'), ('8', 'NUM'), ('}', 'NOUN'), ('----', 'PUNCT')] 

 XPOS tags are: 
>> [('Set', 'VBN'), ('of', 'IN'), ('NFA', 'NNP'), ('states', 'NNS'), ('to', 'IN'), ('which', 'WDT'), ('there', 'EX'), ('is', 'VBZ'), ('a', 'DT'), ('transition', 'NN'), ('on', 'IN'), ('input', 'NN'), ('symbol', 'NN'), ('from', 'IN'), ('some', 'DT'), ('NFA', 'NNP'), ('state', 'NN'), ('in', 'IN'), ('.', '.'), ('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NNP'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('2', 'CD'), ('–', ':'), ('Lexical', 'JJ'), ('Analyzer', 'NNP'), ('‹#›', 'NN'), ('Subset', 'NN'), ('construction', 'NN'), ('algorithm', 'NN'), ('initially', 'RB'), ('be', 'VB'), ('the', 'DT'), ('only', 'JJ'), ('state', 'NN'), ('in', 'IN'), ('and', 'CC'), ('it', 'PRP'), ('is', 'VBZ'), ('unmarked', 'JJ'), (';', ','), ('while', 'IN'), ('there', 'EX'), ('is', 'VBZ'), ('unmarked', 'JJ'), ('states', 'NNS'), ('T', 'NN'), ('in', 'IN'), ('do', 'VB'), ('begin', 'VB'), ('mark', 'NN'), (';', ','), ('for', 'IN'), ('each', 'DT'), ('input', 'NN'), ('symbol', 'NN'), ('do', 'VBP'), ('begin', 'VB'), ('if', 'IN'), ('is', 'VBZ'), ('not', 'RB'), ('in', 'IN'), ('then', 'RB'), ('add', 'VB'), ('as', 'IN'), ('unmarked', 'JJ'), ('state', 'NN'), ('to', 'IN'), ('end', 'NN'), ('end', 'NN'), ('Prof.', 'NN'), ('Dixita', 'NNP'), ('B', 'NN'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('2', 'CD'), ('–', ','), ('Lexical', 'JJ'), ('Analyzer', 'NN'), ('‹#›', 'NN'), ('Conversion', 'NN'), ('from', 'IN'), ('NFA', 'NN'), ('to', 'IN'), ('DFA', 'NN'), ('1', 'CD'), ('(', '-LRB-'), ('a|b', 'NN'), (')', '-RRB-'), ('*', 'NFP'), ('abb', 'NN'), ('2', 'CD'), ('5', 'CD'), ('3', 'CD'), ('4', 'CD'), ('6', 'CD'), ('7', 'CD'), ('8', 'CD'), ('9', 'CD'), ('0', 'CD'), ('10', 'CD'), ('𝜖', 'NN'), ('a', 'DT'), ('b', 'NN'), ('𝜖', 'NN'), ('a', 'DT'), ('b', 'NN'), ('b', 'NN'), ('𝜖', 'NN'), ('𝜖', 'NN'), ('𝜖', 'NN'), ('𝜖', 'NN'), ('𝜖', 'NN'), ('𝜖', 'NN'), ('Prof.', 'NN'), ('Dixita', 'NN'), ('B', 'NN'), ('Kagathara', 'NN'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', ','), ('Unit', 'NN'), ('2', 'CD'), ('–', ','), ('Lexical', 'JJ'), ('Analyzer', 'NN'), ('‹#›', 'NN'), ('Conversion', 'NN'), ('from', 'IN'), ('NFA', 'NN'), ('to', 'IN'), ('DFA', 'NN'), ('1', 'CD'), ('2', 'CD'), ('5', 'CD'), ('3', 'CD'), ('4', 'CD'), ('6', 'CD'), ('7', 'CD'), ('8', 'CD'), ('9', 'CD'), ('0', 'CD'), ('𝜖', 'NN'), ('a', 'NN'), ('b', 'NN'), ('𝜖', 'NN'), ('a', 'NN'), ('b', 'NN'), ('b', 'NN'), ('𝜖', 'NN'), ('𝜖', 'NN'), ('𝜖', 'NN'), ('𝜖', 'NN'), ('𝜖', 'NN'), ('𝜖', 'NN'), ('10', 'CD'), ('{', ','), ('0', 'CD'), (',', ','), ('1', 'CD'), (',', ','), ('7', 'CD'), (',', ','), ('2', 'CD'), (',', ','), ('4', 'CD'), ('}', ','), ('----', ','), ('A', 'DT'), ('𝜖-', 'NN'), ('Closure', 'NN'), ('(', '-LRB-'), ('0', 'CD'), (')', '-RRB-'), ('=', 'SYM'), ('=', ','), ('{', 'NFP'), ('0,1,2,4,7', 'CD'), ('}', ','), ('Prof.', 'NN'), ('Dixita', 'NN'), ('B', 'NN'), ('Kagathara', 'NN'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('2', 'CD'), ('–', ','), ('Lexical', 'JJ'), ('Analyzer', 'NN'), ('‹#›', 'NN'), ('Conversion', 'NN'), ('from', 'IN'), ('NFA', 'NN'), ('to', 'IN'), ('DFA', 'NN'), ('1', 'CD'), ('2', 'CD'), ('5', 'CD'), ('3', 'CD'), ('4', 'CD'), ('6', 'CD'), ('7', 'CD'), ('8', 'CD'), ('9', 'CD'), ('0', 'CD'), ('𝜖', 'NN'), ('a', 'NN'), ('b', 'NN'), ('𝜖', 'NN'), ('a', 'NN'), ('b', 'NN'), ('b', 'NN'), ('𝜖', 'NN'), ('𝜖', 'NN'), ('𝜖', 'NN'), ('𝜖', 'NN'), ('𝜖', 'NN'), ('𝜖', 'NN'), ('A=', 'NN'), ('{', ','), ('0', 'CD'), (',', ','), ('1', 'CD'), (',', ','), ('2', 'CD'), (',', ','), ('4', 'CD'), (',', ','), ('7', 'CD'), ('}', ','), ('Move', 'NN'), ('(', '-LRB-'), ('A', 'NN'), (',', ','), ('a', 'NN'), (')', '-RRB-'), ('=', ','), ('{', 'NFP'), ('3,8', 'CD'), ('}', ','), ('𝜖-', 'NN'), ('Closure', 'NN'), ('(', '-LRB-'), ('Move', 'NN'), ('(', '-LRB-'), ('A', 'NN'), (',', ','), ('a', 'NN'), (')', '-RRB-'), (')', '-RRB-'), ('=', ','), ('{', 'NFP'), ('3', 'CD'), (',', ','), ('6', 'CD'), (',', ','), ('7', 'CD'), (',', ','), ('1', 'CD'), (',', ','), ('2', 'CD'), (',', ','), ('4', 'CD'), (',', ','), ('8', 'CD'), ('}', 'NN'), ('----', ','), ('B', 'NN'), ('=', 'SYM'), ('{', ','), ('1,2,3,', 'CD'), ('4,6,7,8', 'CD'), ('}', ','), ('10', 'CD'), ('States', 'NNPS'), ('a', 'NN'), ('b', 'NN'), ('A', 'NN'), ('=', 'SYM'), ('{', ','), ('0', 'CD'), (',', ','), ('1,2,', 'CD'), ('4,7', 'CD'), ('}', ','), ('B', 'CD'), ('B', 'NN'), ('=', ','), ('{', ','), ('1,2,3,', 'CD'), ('4,', 'CD'), ('6,7,8', 'CD'), ('}', ','), ('Prof.', 'NN'), ('Dixita', 'NNP'), ('B', 'NN'), ('Kagathara', 'NN'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('2', 'CD'), ('–', ','), ('Lexical', 'JJ'), ('Analyzer', 'NN'), ('‹#›', 'NN'), ('Conversion', 'NN'), ('from', 'IN'), ('NFA', 'NN'), ('to', 'IN'), ('DFA', 'NN'), ('1', 'CD'), ('2', 'CD'), ('5', 'CD'), ('3', 'CD'), ('4', 'CD'), ('6', 'CD'), ('7', 'CD'), ('8', 'CD'), ('0', 'CD'), ('𝜖', 'NN'), ('a', 'NN'), ('b', 'NN'), ('𝜖', 'NN'), ('a', 'NN'), ('b', 'NN'), ('b', 'NN'), ('𝜖', 'NN'), ('𝜖', 'NN'), ('𝜖', 'NN'), ('𝜖', 'NN'), ('𝜖', 'NN'), ('𝜖', 'NN'), ('A=', 'NN'), ('{', ','), ('0', 'CD'), (',', ','), ('1', 'CD'), (',', ','), ('2', 'CD'), (',', ','), ('4', 'CD'), (',', ','), ('7', 'CD'), ('}', ','), ('Move', 'NN'), ('(', '-LRB-'), ('A', 'NN'), (',', ','), ('b', 'CD'), (')', '-RRB-'), ('=', ','), ('{', 'NFP'), ('5', 'CD'), ('}', ','), ('𝜖-', 'NN'), ('Closure', 'NN'), ('(', '-LRB-'), ('Move', 'NN'), ('(', '-LRB-'), ('A', 'NN'), (',', ','), ('b', 'LS'), (')', '-RRB-'), (')', '-RRB-'), ('=', ','), ('{', ','), ('5', 'CD'), (',', ','), ('6', 'CD'), (',', ','), ('7', 'CD'), (',', ','), ('1', 'CD'), (',', ','), ('2', 'CD'), (',', ','), ('4', 'CD'), ('}', 'NN'), ('----', ','), ('C', 'NN'), ('=', 'SYM'), ('{', ','), ('1,2,4,5,6,7', 'CD'), ('}', ','), ('10', 'CD'), ('9', 'CD'), ('States', 'NNPS'), ('a', 'NN'), ('b', 'CD'), ('A', 'NN'), ('=', 'SYM'), ('{', ','), ('0', 'CD'), (',', ','), ('1,2,', 'CD'), ('4,7', 'CD'), ('}', ','), ('B', 'CD'), ('C', 'NN'), ('B', 'NN'), ('=', ','), ('{', ','), ('1,2,3,', 'CD'), ('4,', 'CD'), ('6,7,8', 'CD'), ('}', ','), ('C', 'NN'), ('=', ','), ('{', ','), ('1,2,4,5,6,7', 'CD'), ('}', ','), ('Prof.', 'NN'), ('Dixita', 'NN'), ('B', 'NN'), ('Kagathara', 'NN'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('2', 'CD'), ('–', ','), ('Lexical', 'JJ'), ('Analyzer', 'NN'), ('‹#›', 'NN'), ('Conversion', 'NN'), ('from', 'IN'), ('NFA', 'NN'), ('to', 'IN'), ('DFA', 'NN'), ('1', 'CD'), ('2', 'CD'), ('5', 'CD'), ('3', 'CD'), ('4', 'CD'), ('6', 'CD'), ('7', 'CD'), ('8', 'CD'), ('0', 'CD'), ('𝜖', 'NN'), ('a', 'NN'), ('b', 'NN'), ('𝜖', 'NN'), ('a', 'NN'), ('b', 'NN'), ('𝜖', 'NN'), ('𝜖', 'NN'), ('𝜖', 'NN'), ('𝜖', 'NN'), ('𝜖', 'NN'), ('𝜖', 'NN'), ('B', 'NN'), ('=', ','), ('{', ','), ('1', 'CD'), (',', ','), ('2', 'CD'), (',', ','), ('3', 'CD'), (',', ','), ('4', 'CD'), (',', ','), ('6', 'CD'), (',', ','), ('7', 'CD'), (',', ','), ('8', 'CD'), ('}', ','), ('Move', 'NN'), ('(', '-LRB-'), ('B', 'NN'), (',', ','), ('a', 'NN'), (')', '-RRB-'), ('=', ','), ('{', ','), ('3,8', 'CD'), ('}', ','), ('𝜖-', 'NN'), ('Closure', 'NN'), ('(', '-LRB-'), ('Move', 'NN'), ('(', '-LRB-'), ('B', 'NN'), (',', ','), ('a', 'NN'), (')', '-RRB-'), (')', '-RRB-'), ('=', ','), ('{', ','), ('3', 'CD'), (',', ','), ('6', 'CD'), (',', ','), ('7', 'CD'), (',', ','), ('1', 'CD'), (',', ','), ('2', 'CD'), (',', ','), ('4', 'CD'), (',', ','), ('8', 'CD'), ('}', 'NN'), ('----', '.')] 

 Lemmas are: 
>> [('Set', 'set'), ('of', 'of'), ('NFA', 'NFA'), ('states', 'state'), ('to', 'to'), ('which', 'which'), ('there', 'there'), ('is', 'be'), ('a', 'a'), ('transition', 'transition'), ('on', 'on'), ('input', 'input'), ('symbol', 'symbol'), ('from', 'from'), ('some', 'some'), ('NFA', 'NFA'), ('state', 'state'), ('in', 'in'), ('.', '.'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'CD'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('2', '2'), ('–', '-'), ('Lexical', 'lexical'), ('Analyzer', 'Analyzer'), ('‹#›', '‹#›'), ('Subset', 'subset'), ('construction', 'construction'), ('algorithm', 'algorithm'), ('initially', 'initially'), ('be', 'be'), ('the', 'the'), ('only', 'only'), ('state', 'state'), ('in', 'in'), ('and', 'and'), ('it', 'it'), ('is', 'be'), ('unmarked', 'unmarked'), (';', ';'), ('while', 'while'), ('there', 'there'), ('is', 'be'), ('unmarked', 'unmarked'), ('states', 'state'), ('T', 'T'), ('in', 'in'), ('do', 'do'), ('begin', 'begin'), ('mark', 'mark'), (';', ';'), ('for', 'for'), ('each', 'each'), ('input', 'input'), ('symbol', 'symbol'), ('do', 'do'), ('begin', 'begin'), ('if', 'if'), ('is', 'be'), ('not', 'not'), ('in', 'in'), ('then', 'then'), ('add', 'add'), ('as', 'as'), ('unmarked', 'unmarked'), ('state', 'state'), ('to', 'to'), ('end', 'end'), ('end', 'end'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'b'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('2', '2'), ('–', '-'), ('Lexical', 'lexical'), ('Analyzer', 'analyzer'), ('‹#›', '‹#›'), ('Conversion', 'conversion'), ('from', 'from'), ('NFA', 'nfa'), ('to', 'to'), ('DFA', 'dfa'), ('1', '1'), ('(', '('), ('a|b', 'a|b'), (')', ')'), ('*', '*'), ('abb', 'abb'), ('2', '2'), ('5', '5'), ('3', '3'), ('4', '4'), ('6', '6'), ('7', '7'), ('8', '8'), ('9', '9'), ('0', '0'), ('10', '10'), ('𝜖', '𝜖'), ('a', 'a'), ('b', 'b'), ('𝜖', '𝜖'), ('a', 'a'), ('b', 'b'), ('b', 'b'), ('𝜖', '𝜖'), ('𝜖', '𝜖'), ('𝜖', '𝜖'), ('𝜖', '𝜖'), ('𝜖', '𝜖'), ('𝜖', '𝜖'), ('Prof.', 'Prof.'), ('Dixita', 'dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', "''"), ('Unit', 'unit'), ('2', '2'), ('–', '-'), ('Lexical', 'lexical'), ('Analyzer', 'analyzer'), ('‹#›', '‹#›'), ('Conversion', 'conversion'), ('from', 'from'), ('NFA', 'nfa'), ('to', 'to'), ('DFA', 'dfa'), ('1', '1'), ('2', '2'), ('5', '5'), ('3', '3'), ('4', '4'), ('6', '6'), ('7', '7'), ('8', '8'), ('9', '9'), ('0', '0'), ('𝜖', '𝜖'), ('a', 'a'), ('b', 'b'), ('𝜖', '𝜖'), ('a', 'a'), ('b', 'b'), ('b', 'b'), ('𝜖', '𝜖'), ('𝜖', '𝜖'), ('𝜖', '𝜖'), ('𝜖', '𝜖'), ('𝜖', '𝜖'), ('𝜖', '𝜖'), ('10', '10'), ('{', '{'), ('0', '0'), (',', ','), ('1', '1'), (',', ','), ('7', '7'), (',', ','), ('2', '2'), (',', ','), ('4', '4'), ('}', '}'), ('----', '----'), ('A', 'a'), ('𝜖-', '𝜖-'), ('Closure', 'closure'), ('(', '('), ('0', '0'), (')', ')'), ('=', '='), ('=', '='), ('{', '{'), ('0,1,2,4,7', '012247'), ('}', '}'), ('Prof.', 'Prof.'), ('Dixita', 'dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('2', '2'), ('–', '-'), ('Lexical', 'lexical'), ('Analyzer', 'analyzer'), ('‹#›', '‹#›'), ('Conversion', 'conversion'), ('from', 'from'), ('NFA', 'nfa'), ('to', 'to'), ('DFA', 'dfa'), ('1', '1'), ('2', '2'), ('5', '5'), ('3', '3'), ('4', '4'), ('6', '6'), ('7', '7'), ('8', '8'), ('9', '9'), ('0', '0'), ('𝜖', '𝜖'), ('a', 'a'), ('b', 'b'), ('𝜖', '𝜖'), ('a', 'a'), ('b', 'b'), ('b', 'b'), ('𝜖', '𝜖'), ('𝜖', '𝜖'), ('𝜖', '𝜖'), ('𝜖', '𝜖'), ('𝜖', '𝜖'), ('𝜖', '𝜖'), ('A=', 'a='), ('{', '{'), ('0', '0'), (',', ','), ('1', '1'), (',', ','), ('2', '2'), (',', ','), ('4', '4'), (',', ','), ('7', '7'), ('}', '}'), ('Move', 'move'), ('(', '('), ('A', 'a'), (',', ','), ('a', 'a'), (')', ')'), ('=', '='), ('{', '{'), ('3,8', '3,8'), ('}', '}'), ('𝜖-', '𝜖-'), ('Closure', 'closure'), ('(', '('), ('Move', 'move'), ('(', '('), ('A', 'a'), (',', ','), ('a', 'a'), (')', ')'), (')', ')'), ('=', '='), ('{', '{'), ('3', '3'), (',', ','), ('6', '6'), (',', ','), ('7', '7'), (',', ','), ('1', '1'), (',', ','), ('2', '2'), (',', ','), ('4', '4'), (',', ','), ('8', '8'), ('}', '}'), ('----', '----'), ('B', 'b'), ('=', '='), ('{', '{'), ('1,2,3,', '1223'), ('4,6,7,8', '46778'), ('}', '}'), ('10', '10'), ('States', 'State'), ('a', 'a'), ('b', 'b'), ('A', 'a'), ('=', '='), ('{', '{'), ('0', '0'), (',', ','), ('1,2,', '122'), ('4,7', '4,7'), ('}', '}'), ('B', 'b'), ('B', 'b'), ('=', '='), ('{', '{'), ('1,2,3,', '1223'), ('4,', '4,'), ('6,7,8', '6778'), ('}', '}'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('2', '2'), ('–', '-'), ('Lexical', 'lexical'), ('Analyzer', 'analyzer'), ('‹#›', '‹#›'), ('Conversion', 'conversion'), ('from', 'from'), ('NFA', 'nfa'), ('to', 'to'), ('DFA', 'dfa'), ('1', '1'), ('2', '2'), ('5', '5'), ('3', '3'), ('4', '4'), ('6', '6'), ('7', '7'), ('8', '8'), ('0', '0'), ('𝜖', '𝜖'), ('a', 'a'), ('b', 'b'), ('𝜖', '𝜖'), ('a', 'a'), ('b', 'b'), ('b', 'b'), ('𝜖', '𝜖'), ('𝜖', '𝜖'), ('𝜖', '𝜖'), ('𝜖', '𝜖'), ('𝜖', '𝜖'), ('𝜖', '𝜖'), ('A=', 'a='), ('{', '{'), ('0', '0'), (',', ','), ('1', '1'), (',', ','), ('2', '2'), (',', ','), ('4', '4'), (',', ','), ('7', '7'), ('}', '}'), ('Move', 'move'), ('(', '('), ('A', 'a'), (',', ','), ('b', 'b'), (')', ')'), ('=', '='), ('{', '{'), ('5', '5'), ('}', '}'), ('𝜖-', '𝜖-'), ('Closure', 'closure'), ('(', '('), ('Move', 'move'), ('(', '('), ('A', 'a'), (',', ','), ('b', 'b'), (')', ')'), (')', ')'), ('=', '='), ('{', '{'), ('5', '5'), (',', ','), ('6', '6'), (',', ','), ('7', '7'), (',', ','), ('1', '1'), (',', ','), ('2', '2'), (',', ','), ('4', '4'), ('}', '}'), ('----', '----'), ('C', 'c'), ('=', '='), ('{', '{'), ('1,2,4,5,6,7', '1224567'), ('}', '}'), ('10', '10'), ('9', '9'), ('States', 'State'), ('a', 'a'), ('b', 'b'), ('A', 'a'), ('=', '='), ('{', '{'), ('0', '0'), (',', ','), ('1,2,', '122'), ('4,7', '4,7'), ('}', '}'), ('B', 'b'), ('C', 'c'), ('B', 'b'), ('=', '='), ('{', '{'), ('1,2,3,', '1223'), ('4,', '4,'), ('6,7,8', '6778'), ('}', '}'), ('C', 'c'), ('=', '='), ('{', '{'), ('1,2,4,5,6,7', '1224567'), ('}', '}'), ('Prof.', 'Prof.'), ('Dixita', 'dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('2', '2'), ('–', '-'), ('Lexical', 'lexical'), ('Analyzer', 'analyzer'), ('‹#›', '‹#›'), ('Conversion', 'conversion'), ('from', 'from'), ('NFA', 'nfa'), ('to', 'to'), ('DFA', 'dfa'), ('1', '1'), ('2', '2'), ('5', '5'), ('3', '3'), ('4', '4'), ('6', '6'), ('7', '7'), ('8', '8'), ('0', '0'), ('𝜖', '𝜖'), ('a', 'a'), ('b', 'b'), ('𝜖', '𝜖'), ('a', 'a'), ('b', 'b'), ('𝜖', '𝜖'), ('𝜖', '𝜖'), ('𝜖', '𝜖'), ('𝜖', '𝜖'), ('𝜖', '𝜖'), ('𝜖', '𝜖'), ('B', 'b'), ('=', '='), ('{', '{'), ('1', '1'), (',', ','), ('2', '2'), (',', ','), ('3', '3'), (',', ','), ('4', '4'), (',', ','), ('6', '6'), (',', ','), ('7', '7'), (',', ','), ('8', '8'), ('}', '}'), ('Move', 'move'), ('(', '('), ('B', 'b'), (',', ','), ('a', 'a'), (')', ')'), ('=', '='), ('{', '{'), ('3,8', '3,8'), ('}', '}'), ('𝜖-', '𝜖-'), ('Closure', 'closure'), ('(', '('), ('Move', 'move'), ('(', '('), ('B', 'b'), (',', ','), ('a', 'a'), (')', ')'), (')', ')'), ('=', '='), ('{', '{'), ('3', '3'), (',', ','), ('6', '6'), (',', ','), ('7', '7'), (',', ','), ('1', '1'), (',', ','), ('2', '2'), (',', ','), ('4', '4'), (',', ','), ('8', '8'), ('}', '}'), ('----', '----')] 

 Dependency tags are: 
>> [(('Set', 'root'), 'root'), (('of', 'states'), 'case'), (('NFA', 'states'), 'compound'), (('states', 'Set'), 'obl'), (('to', 'which'), 'case'), (('which', 'is'), 'obl'), (('there', 'is'), 'expl'), (('is', 'states'), 'acl:relcl'), (('a', 'transition'), 'det'), (('transition', 'is'), 'nsubj'), (('on', 'symbol'), 'case'), (('input', 'symbol'), 'compound'), (('symbol', 'transition'), 'nmod'), (('from', 'state'), 'case'), (('some', 'state'), 'det'), (('NFA', 'state'), 'compound'), (('state', 'symbol'), 'nmod'), (('in', 'state'), 'case'), (('.', 'in'), 'punct'), (('Prof.', 'in'), 'compound'), (('Dixita', 'Prof.'), 'flat'), (('B', 'Kagathara'), 'compound'), (('Kagathara', '#'), 'compound'), (('#', 'Set'), 'obl'), (('2170701', 'CD'), 'dep'), (('(', 'CD'), 'punct'), (('CD', 'Unit'), 'dep'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', 'is'), 'parataxis'), (('2', 'Unit'), 'nummod'), (('–', 'Unit'), 'punct'), (('Lexical', 'Analyzer'), 'amod'), (('Analyzer', 'Subset'), 'compound'), (('‹#›', 'Subset'), 'compound'), (('Subset', 'construction'), 'compound'), (('construction', 'algorithm'), 'compound'), (('algorithm', 'state'), 'nsubj'), (('initially', 'state'), 'advmod'), (('be', 'state'), 'cop'), (('the', 'state'), 'det'), (('only', 'state'), 'amod'), (('state', 'is'), 'parataxis'), (('in', 'state'), 'nmod'), (('and', 'unmarked'), 'cc'), (('it', 'unmarked'), 'nsubj'), (('is', 'unmarked'), 'cop'), (('unmarked', 'state'), 'conj'), ((';', 'is'), 'punct'), (('while', 'is'), 'mark'), (('there', 'is'), 'expl'), (('is', 'state'), 'advcl'), (('unmarked', 'states'), 'amod'), (('states', 'is'), 'nsubj'), (('T', 'begin'), 'obj'), (('in', 'begin'), 'mark'), (('do', 'begin'), 'aux'), (('begin', 'states'), 'acl:relcl'), (('mark', 'begin'), 'obj'), ((';', 'begin'), 'punct'), (('for', 'symbol'), 'case'), (('each', 'symbol'), 'det'), (('input', 'symbol'), 'compound'), (('symbol', 'add'), 'nsubj'), (('do', 'begin'), 'aux'), (('begin', 'is'), 'conj'), (('if', 'add'), 'mark'), (('is', 'add'), 'aux'), (('not', 'add'), 'advmod'), (('in', 'add'), 'case'), (('then', 'add'), 'advmod'), (('add', 'begin'), 'advcl'), (('as', 'state'), 'case'), (('unmarked', 'state'), 'amod'), (('state', 'add'), 'obl'), (('to', 'end'), 'case'), (('end', 'end'), 'compound'), (('end', 'add'), 'obl'), (('Prof.', 'add'), 'obl'), (('Dixita', 'B'), 'compound'), (('B', '#'), 'compound'), (('Kagathara', '#'), 'compound'), (('#', 'add'), 'obl'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', 'Unit'), 'dep'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', '#'), 'conj'), (('2', 'Unit'), 'nummod'), (('–', 'Analyzer'), 'punct'), (('Lexical', 'Analyzer'), 'amod'), (('Analyzer', 'Set'), 'conj'), (('‹#›', 'Conversion'), 'compound'), (('Conversion', 'Analyzer'), 'conj'), (('from', 'NFA'), 'case'), (('NFA', 'Conversion'), 'nmod'), (('to', 'DFA'), 'case'), (('DFA', 'NFA'), 'nmod'), (('1', 'DFA'), 'nummod'), (('(', 'a|b'), 'punct'), (('a|b', 'DFA'), 'dep'), ((')', 'a|b'), 'punct'), (('*', 'abb'), 'punct'), (('abb', 'Set'), 'conj'), (('2', 'abb'), 'dep'), (('5', 'abb'), 'dep'), (('3', 'abb'), 'dep'), (('4', '6'), 'compound'), (('6', '7'), 'compound'), (('7', '8'), 'compound'), (('8', '0'), 'compound'), (('9', '0'), 'compound'), (('0', '𝜖'), 'nummod'), (('10', '𝜖'), 'nummod'), (('𝜖', '𝜖'), 'compound'), (('a', '𝜖'), 'det'), (('b', '𝜖'), 'compound'), (('𝜖', 'b'), 'conj'), (('a', 'b'), 'det'), (('b', 'b'), 'compound'), (('b', '𝜖'), 'compound'), (('𝜖', '𝜖'), 'compound'), (('𝜖', '𝜖'), 'compound'), (('𝜖', '𝜖'), 'compound'), (('𝜖', '𝜖'), 'compound'), (('𝜖', '𝜖'), 'compound'), (('𝜖', 'Prof.'), 'compound'), (('Prof.', 'B'), 'compound'), (('Dixita', 'B'), 'compound'), (('B', '#'), 'compound'), (('Kagathara', '#'), 'compound'), (('#', 'is'), 'parataxis'), (('2170701', 'CD'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', 'B'), 'dep'), ((')', 'CD'), 'punct'), (('\uf077', 'CD'), 'punct'), (('Unit', '#'), 'conj'), (('2', 'CD'), 'dep'), (('–', 'Analyzer'), 'punct'), (('Lexical', 'Analyzer'), 'amod'), (('Analyzer', 'is'), 'parataxis'), (('‹#›', 'Conversion'), 'compound'), (('Conversion', 'Analyzer'), 'conj'), (('from', 'NFA'), 'case'), (('NFA', 'Conversion'), 'nmod'), (('to', 'DFA'), 'case'), (('DFA', 'NFA'), 'nmod'), (('1', 'DFA'), 'nummod'), (('2', 'DFA'), 'nummod'), (('5', 'DFA'), 'nummod'), (('3', '4'), 'compound'), (('4', '6'), 'compound'), (('6', '8'), 'compound'), (('7', '8'), 'compound'), (('8', '9'), 'compound'), (('9', '0'), 'compound'), (('0', '𝜖'), 'nummod'), (('𝜖', 'b'), 'compound'), (('a', 'b'), 'compound'), (('b', '𝜖'), 'compound'), (('𝜖', 'b'), 'compound'), (('a', 'b'), 'compound'), (('b', 'b'), 'compound'), (('b', '𝜖'), 'compound'), (('𝜖', '𝜖'), 'compound'), (('𝜖', '𝜖'), 'compound'), (('𝜖', '𝜖'), 'compound'), (('𝜖', '𝜖'), 'compound'), (('𝜖', '𝜖'), 'compound'), (('𝜖', '0'), 'compound'), (('10', '0'), 'compound'), (('{', '0'), 'punct'), (('0', 'Set'), 'dep'), ((',', '0'), 'punct'), (('1', '7'), 'compound'), ((',', '7'), 'punct'), (('7', '2'), 'compound'), ((',', '2'), 'punct'), (('2', '4'), 'compound'), ((',', '4'), 'punct'), (('4', '𝜖'), 'dep'), (('}', '='), 'punct'), (('----', 'Closure'), 'punct'), (('A', 'Closure'), 'det'), (('𝜖-', 'Closure'), 'compound'), (('Closure', 'is'), 'parataxis'), (('(', '0'), 'punct'), (('0', '='), 'nummod'), ((')', '0'), 'punct'), (('=', 'is'), 'parataxis'), (('=', 'Set'), 'parataxis'), (('{', '0,1,2,4,7'), 'punct'), (('0,1,2,4,7', 'Prof.'), 'compound'), (('}', 'Prof.'), 'punct'), (('Prof.', 'B'), 'compound'), (('Dixita', 'B'), 'compound'), (('B', '#'), 'compound'), (('Kagathara', '#'), 'compound'), (('#', '='), 'compound'), (('2170701', '#'), 'compound'), (('(', 'CD'), 'punct'), (('CD', 'Analyzer'), 'dep'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', 'B'), 'conj'), (('2', 'Unit'), 'nummod'), (('–', 'Analyzer'), 'punct'), (('Lexical', 'Analyzer'), 'amod'), (('Analyzer', 'Unit'), 'compound'), (('‹#›', 'Conversion'), 'compound'), (('Conversion', 'Analyzer'), 'conj'), (('from', 'NFA'), 'case'), (('NFA', 'Conversion'), 'nmod'), (('to', 'DFA'), 'case'), (('DFA', 'Conversion'), 'nmod'), (('1', 'DFA'), 'nummod'), (('2', 'DFA'), 'nummod'), (('5', 'DFA'), 'nummod'), (('3', '4'), 'compound'), (('4', '6'), 'compound'), (('6', '8'), 'compound'), (('7', '8'), 'compound'), (('8', '0'), 'compound'), (('9', '0'), 'compound'), (('0', '𝜖'), 'nummod'), (('𝜖', 'DFA'), 'conj'), (('a', 'b'), 'compound'), (('b', '𝜖'), 'compound'), (('𝜖', 'b'), 'compound'), (('a', 'b'), 'compound'), (('b', 'b'), 'compound'), (('b', 'A='), 'compound'), (('𝜖', '𝜖'), 'compound'), (('𝜖', '𝜖'), 'compound'), (('𝜖', '𝜖'), 'compound'), (('𝜖', '𝜖'), 'compound'), (('𝜖', '𝜖'), 'compound'), (('𝜖', 'A='), 'compound'), (('A=', '𝜖'), 'compound'), (('{', 'A='), 'punct'), (('0', 'A='), 'nummod'), ((',', '0'), 'punct'), (('1', '2'), 'compound'), ((',', 'Move'), 'punct'), (('2', 'Move'), 'nummod'), ((',', '4'), 'punct'), (('4', '7'), 'compound'), ((',', '7'), 'punct'), (('7', 'a'), 'nummod'), (('}', 'Move'), 'punct'), (('Move', 'A='), 'compound'), (('(', 'a'), 'punct'), (('A', 'a'), 'compound'), ((',', 'a'), 'punct'), (('a', 'Move'), 'dep'), ((')', 'A'), 'punct'), (('=', 'A='), 'punct'), (('{', '3,8'), 'punct'), (('3,8', '𝜖-'), 'compound'), (('}', 'Closure'), 'punct'), (('𝜖-', 'Closure'), 'compound'), (('Closure', 'Move'), 'compound'), (('(', 'Move'), 'punct'), (('Move', 'Closure'), 'dep'), (('(', 'a'), 'punct'), (('A', 'Move'), 'dep'), ((',', 'a'), 'punct'), (('a', 'A'), 'dep'), ((')', 'a'), 'punct'), ((')', 'A'), 'punct'), (('=', 'Set'), 'parataxis'), (('{', 'Closure'), 'punct'), (('3', '6'), 'compound'), ((',', 'Closure'), 'punct'), (('6', '='), 'nummod'), ((',', '='), 'punct'), (('7', '}'), 'nummod'), ((',', 'Closure'), 'punct'), (('1', '}'), 'nummod'), ((',', '}'), 'punct'), (('2', '}'), 'nummod'), ((',', '}'), 'punct'), (('4', '}'), 'nummod'), ((',', '}'), 'punct'), (('8', '}'), 'nummod'), (('}', '='), 'dep'), (('----', 'Set'), 'punct'), (('B', '='), 'nsubj'), (('=', 'Set'), 'conj'), (('{', '='), 'punct'), (('1,2,3,', '='), 'nummod'), (('4,6,7,8', '='), 'nummod'), (('}', 'States'), 'punct'), (('10', 'States'), 'nummod'), (('States', '='), 'obj'), (('a', 'b'), 'compound'), (('b', 'States'), 'conj'), (('A', '='), 'nsubj'), (('=', '='), 'parataxis'), (('{', '='), 'punct'), (('0', '='), 'nummod'), ((',', '0'), 'punct'), (('1,2,', '4,7'), 'compound'), (('4,7', 'B'), 'nummod'), (('}', 'B'), 'punct'), (('B', 'B'), 'nummod'), (('B', 'b'), 'conj'), (('=', '='), 'punct'), (('{', '='), 'punct'), (('1,2,3,', '6,7,8'), 'compound'), (('4,', '6,7,8'), 'compound'), (('6,7,8', 'B'), 'nummod'), (('}', '#'), 'punct'), (('Prof.', 'B'), 'compound'), (('Dixita', 'B'), 'compound'), (('B', '6,7,8'), 'compound'), (('Kagathara', '#'), 'compound'), (('#', 'B'), 'compound'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', 'Unit'), 'compound'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', '#'), 'parataxis'), (('2', 'Unit'), 'nummod'), (('–', 'Analyzer'), 'punct'), (('Lexical', 'Analyzer'), 'amod'), (('Analyzer', 'Unit'), 'compound'), (('‹#›', 'Conversion'), 'compound'), (('Conversion', 'Analyzer'), 'conj'), (('from', 'NFA'), 'case'), (('NFA', 'Conversion'), 'nmod'), (('to', 'DFA'), 'case'), (('DFA', 'Conversion'), 'nmod'), (('1', 'DFA'), 'nummod'), (('2', 'DFA'), 'nummod'), (('5', 'DFA'), 'nummod'), (('3', '4'), 'compound'), (('4', '𝜖'), 'nummod'), (('6', '8'), 'compound'), (('7', '8'), 'compound'), (('8', '0'), 'compound'), (('0', '𝜖'), 'nummod'), (('𝜖', 'DFA'), 'conj'), (('a', 'b'), 'compound'), (('b', '𝜖'), 'compound'), (('𝜖', 'b'), 'compound'), (('a', 'b'), 'compound'), (('b', 'b'), 'compound'), (('b', 'A='), 'compound'), (('𝜖', 'A='), 'compound'), (('𝜖', '𝜖'), 'compound'), (('𝜖', '𝜖'), 'compound'), (('𝜖', '𝜖'), 'compound'), (('𝜖', '𝜖'), 'compound'), (('𝜖', 'A='), 'compound'), (('A=', '𝜖'), 'compound'), (('{', 'A='), 'punct'), (('0', 'A='), 'nummod'), ((',', 'A='), 'punct'), (('1', 'Move'), 'nummod'), ((',', 'Move'), 'punct'), (('2', '4'), 'compound'), ((',', 'Move'), 'punct'), (('4', '7'), 'compound'), ((',', '7'), 'punct'), (('7', 'A='), 'nummod'), (('}', 'Move'), 'punct'), (('Move', 'A='), 'compound'), (('(', 'b'), 'punct'), (('A', 'b'), 'compound'), ((',', 'b'), 'punct'), (('b', 'Move'), 'dep'), ((')', 'A'), 'punct'), (('=', 'A='), 'punct'), (('{', '5'), 'punct'), (('5', '𝜖-'), 'nummod'), (('}', 'Closure'), 'punct'), (('𝜖-', 'Closure'), 'compound'), (('Closure', 'Move'), 'conj'), (('(', 'Move'), 'punct'), (('Move', 'Closure'), 'dep'), (('(', 'A'), 'punct'), (('A', 'Move'), 'dep'), ((',', 'b'), 'punct'), (('b', 'A'), 'nummod'), ((')', 'b'), 'punct'), ((')', 'A'), 'punct'), (('=', 'Closure'), 'punct'), (('{', 'Closure'), 'punct'), (('5', 'Closure'), 'nummod'), ((',', '5'), 'punct'), (('6', '}'), 'nummod'), ((',', '6'), 'punct'), (('7', '}'), 'nummod'), ((',', '}'), 'punct'), (('1', '}'), 'nummod'), ((',', '}'), 'punct'), (('2', '}'), 'nummod'), ((',', '}'), 'punct'), (('4', '}'), 'nummod'), (('}', '5'), 'conj'), (('----', '}'), 'punct'), (('C', '='), 'nsubj'), (('=', '}'), 'parataxis'), (('{', '='), 'punct'), (('1,2,4,5,6,7', '='), 'nummod'), (('}', '='), 'punct'), (('10', 'States'), 'nummod'), (('9', 'States'), 'nummod'), (('States', '='), 'compound'), (('a', 'A'), 'compound'), (('b', 'A'), 'nummod'), (('A', '='), 'nsubj'), (('=', 'States'), 'parataxis'), (('{', '='), 'punct'), (('0', '='), 'nummod'), ((',', '='), 'punct'), (('1,2,', 'B'), 'nummod'), (('4,7', 'B'), 'nummod'), (('}', 'B'), 'punct'), (('B', 'C'), 'nummod'), (('C', 'B'), 'compound'), (('B', '='), 'nsubj'), (('=', 'B'), 'punct'), (('{', 'B'), 'punct'), (('1,2,3,', 'C'), 'nummod'), (('4,', '6,7,8'), 'compound'), (('6,7,8', 'C'), 'nummod'), (('}', '6,7,8'), 'punct'), (('C', 'B'), 'appos'), (('=', 'C'), 'punct'), (('{', 'C'), 'punct'), (('1,2,4,5,6,7', 'C'), 'nummod'), (('}', '1,2,4,5,6,7'), 'punct'), (('Prof.', '1,2,4,5,6,7'), 'compound'), (('Dixita', 'B'), 'compound'), (('B', 'Prof.'), 'compound'), (('Kagathara', 'B'), 'compound'), (('#', 'B'), 'compound'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', '#'), 'appos'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', '#'), 'appos'), (('2', 'Unit'), 'nummod'), (('–', 'Unit'), 'punct'), (('Lexical', 'Analyzer'), 'amod'), (('Analyzer', 'Unit'), 'compound'), (('‹#›', 'Conversion'), 'compound'), (('Conversion', 'Analyzer'), 'appos'), (('from', 'NFA'), 'case'), (('NFA', 'Conversion'), 'nmod'), (('to', 'DFA'), 'case'), (('DFA', 'Conversion'), 'nmod'), (('1', '𝜖'), 'nummod'), (('2', '𝜖'), 'nummod'), (('5', '𝜖'), 'nummod'), (('3', '𝜖'), 'nummod'), (('4', '𝜖'), 'nummod'), (('6', '𝜖'), 'nummod'), (('7', '0'), 'compound'), (('8', '0'), 'compound'), (('0', '𝜖'), 'nummod'), (('𝜖', 'DFA'), 'appos'), (('a', '𝜖'), 'compound'), (('b', '𝜖'), 'compound'), (('𝜖', '𝜖'), 'compound'), (('a', 'b'), 'compound'), (('b', 'b'), 'compound'), (('𝜖', '𝜖'), 'compound'), (('𝜖', 'b'), 'compound'), (('𝜖', 'B'), 'compound'), (('𝜖', 'B'), 'compound'), (('𝜖', 'B'), 'compound'), (('𝜖', 'B'), 'compound'), (('B', '𝜖'), 'appos'), (('=', '𝜖'), 'punct'), (('{', '1'), 'punct'), (('1', 'B'), 'nummod'), ((',', 'B'), 'punct'), (('2', 'B'), 'nummod'), ((',', 'B'), 'punct'), (('3', '1'), 'compound'), ((',', 'B'), 'punct'), (('4', '2'), 'compound'), ((',', '3'), 'punct'), (('6', '7'), 'compound'), ((',', '4'), 'punct'), (('7', '4'), 'compound'), ((',', '8'), 'punct'), (('8', '7'), 'compound'), (('}', 'Move'), 'punct'), (('Move', '4'), 'appos'), (('(', 'B'), 'punct'), (('B', 'Move'), 'appos'), ((',', 'a'), 'punct'), (('a', 'B'), 'appos'), ((')', 'B'), 'punct'), (('=', 'B'), 'punct'), (('{', 'Closure'), 'punct'), (('3,8', 'Closure'), 'nummod'), (('}', 'Closure'), 'punct'), (('𝜖-', 'Closure'), 'compound'), (('Closure', 'Move'), 'appos'), (('(', 'Move'), 'punct'), (('Move', 'Closure'), 'appos'), (('(', 'B'), 'punct'), (('B', 'Move'), 'appos'), ((',', 'a'), 'punct'), (('a', 'B'), 'appos'), ((')', 'B'), 'punct'), ((')', 'B'), 'punct'), (('=', 'Move'), 'punct'), (('{', 'B'), 'punct'), (('3', 'Closure'), 'nummod'), ((',', '3'), 'punct'), (('6', '1'), 'compound'), ((',', '3'), 'punct'), (('7', '3'), 'conj'), ((',', '6'), 'punct'), (('1', '7'), 'appos'), ((',', '2'), 'punct'), (('2', '1'), 'appos'), ((',', '2'), 'punct'), (('4', '2'), 'appos'), ((',', '4'), 'punct'), (('8', '}'), 'nummod'), (('}', '4'), 'appos'), (('----', '}'), 'punct')]

 Named Entities are: 
>> [('NFA', 'ORG'), ('NFA', 'ORG'), ('2170701', 'CARDINAL'), ('2', 'CARDINAL'), ('2170701', 'CARDINAL'), ('2', 'CARDINAL')]

========================== Sentence 80 ===========================

 B    = {1,2,3,4,6,7,8}      b 10  9 	States	a	b  	A = {0,1,2,4,7}	B	C  	B = {1,2,3,4,6,7,8}	B	  	C = {1,2,4,5,6,7}		      Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Conversion from NFA to DFA  1 2 5 3 4 6 7 8 0 𝜖 a b 𝜖 a b 𝜖 𝜖 𝜖 𝜖 𝜖 𝜖 B= {1, 2, 3, 4, 6, 7, 8} Move(B,b) = {5,9} 𝜖- Closure(Move(B,b)) = {5, 6, 7, 1, 2, 4, 9} ---- 

Tokens are: 
>> ['B', '=', '{', '1,2,3,', '4,6,7,8', '}', 'b', '10', '9', 'States', 'a', 'b', 'A', '=', '{', '0', ',', '1,2,', '4,7', '}', 'B', 'C', 'B', '=', '{', '1,2,3,', '4,', '6,7,8', '}', 'B', 'C', '=', '{', '1,2,4,5,6,7', '}', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '2', '–', 'Lexical', 'Analyzer', '‹#›', 'Conversion', 'from', 'NFA', 'to', 'DFA', '1', '2', '5', '3', '4', '6', '7', '8', '0', '𝜖', 'a', 'b', '𝜖', 'a', 'b', '𝜖', '𝜖', '𝜖', '𝜖', '𝜖', '𝜖', 'B=', '{', '1', ',', '2', ',', '3', ',', '4', ',', '6', ',', '7', ',', '8', '}', 'Move', '(', 'B', ',', 'b', ')', '=', '{', '5,9', '}', '𝜖-', 'Closure', '(', 'Move', '(', 'B', ',', 'b', ')', ')', '=', '{', '5', ',', '6', ',', '7', ',', '1', ',', '2', ',', '4', ',', '9', '}', '----'] 

 UPOS tags are: 
>> [('B', 'PROPN'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('1,2,3,', 'NUM'), ('4,6,7,8', 'NUM'), ('}', 'PUNCT'), ('b', 'NOUN'), ('10', 'NUM'), ('9', 'NUM'), ('States', 'PROPN'), ('a', 'NOUN'), ('b', 'NOUN'), ('A', 'NOUN'), ('=', 'SYM'), ('{', 'PUNCT'), ('0', 'NUM'), (',', 'PUNCT'), ('1,2,', 'NUM'), ('4,7', 'NUM'), ('}', 'PUNCT'), ('B', 'NUM'), ('C', 'NOUN'), ('B', 'NOUN'), ('=', 'SYM'), ('{', 'PUNCT'), ('1,2,3,', 'NUM'), ('4,', 'NUM'), ('6,7,8', 'NUM'), ('}', 'PUNCT'), ('B', 'NUM'), ('C', 'NOUN'), ('=', 'SYM'), ('{', 'PUNCT'), ('1,2,4,5,6,7', 'NUM'), ('}', 'PUNCT'), ('Prof.', 'NOUN'), ('Dixita', 'PROPN'), ('B', 'NOUN'), ('Kagathara', 'NOUN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'ADJ'), ('Analyzer', 'NOUN'), ('‹#›', 'NOUN'), ('Conversion', 'NOUN'), ('from', 'ADP'), ('NFA', 'NOUN'), ('to', 'ADP'), ('DFA', 'NOUN'), ('1', 'NUM'), ('2', 'NUM'), ('5', 'NUM'), ('3', 'NUM'), ('4', 'NUM'), ('6', 'NUM'), ('7', 'NUM'), ('8', 'NUM'), ('0', 'NUM'), ('𝜖', 'NOUN'), ('a', 'NOUN'), ('b', 'NOUN'), ('𝜖', 'NOUN'), ('a', 'NOUN'), ('b', 'NOUN'), ('𝜖', 'NOUN'), ('𝜖', 'NOUN'), ('𝜖', 'NOUN'), ('𝜖', 'NOUN'), ('𝜖', 'NOUN'), ('𝜖', 'NOUN'), ('B=', 'NOUN'), ('{', 'PUNCT'), ('1', 'NUM'), (',', 'PUNCT'), ('2', 'NUM'), (',', 'PUNCT'), ('3', 'NUM'), (',', 'PUNCT'), ('4', 'NUM'), (',', 'PUNCT'), ('6', 'NUM'), (',', 'PUNCT'), ('7', 'NUM'), (',', 'PUNCT'), ('8', 'NUM'), ('}', 'PUNCT'), ('Move', 'NOUN'), ('(', 'PUNCT'), ('B', 'NOUN'), (',', 'PUNCT'), ('b', 'NUM'), (')', 'PUNCT'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('5,9', 'NUM'), ('}', 'PUNCT'), ('𝜖-', 'NOUN'), ('Closure', 'NOUN'), ('(', 'PUNCT'), ('Move', 'NOUN'), ('(', 'PUNCT'), ('B', 'NOUN'), (',', 'PUNCT'), ('b', 'NUM'), (')', 'PUNCT'), (')', 'PUNCT'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('5', 'NUM'), (',', 'PUNCT'), ('6', 'NUM'), (',', 'PUNCT'), ('7', 'NUM'), (',', 'PUNCT'), ('1', 'NUM'), (',', 'PUNCT'), ('2', 'NUM'), (',', 'PUNCT'), ('4', 'NUM'), (',', 'PUNCT'), ('9', 'NUM'), ('}', 'NOUN'), ('----', 'PUNCT')] 

 XPOS tags are: 
>> [('B', 'NNP'), ('=', ','), ('{', 'NFP'), ('1,2,3,', 'CD'), ('4,6,7,8', 'CD'), ('}', ':'), ('b', 'NN'), ('10', 'CD'), ('9', 'CD'), ('States', 'NNPS'), ('a', 'NN'), ('b', 'NN'), ('A', 'NN'), ('=', 'SYM'), ('{', ','), ('0', 'CD'), (',', ','), ('1,2,', 'CD'), ('4,7', 'CD'), ('}', ','), ('B', 'CD'), ('C', 'NN'), ('B', 'NN'), ('=', 'SYM'), ('{', 'NFP'), ('1,2,3,', 'CD'), ('4,', 'CD'), ('6,7,8', 'CD'), ('}', '-LRB-'), ('B', 'CD'), ('C', 'NN'), ('=', 'SYM'), ('{', 'NFP'), ('1,2,4,5,6,7', 'CD'), ('}', '-LRB-'), ('Prof.', 'NN'), ('Dixita', 'NNP'), ('B', 'NN'), ('Kagathara', 'NN'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('2', 'CD'), ('–', ':'), ('Lexical', 'JJ'), ('Analyzer', 'NN'), ('‹#›', 'NN'), ('Conversion', 'NN'), ('from', 'IN'), ('NFA', 'NN'), ('to', 'IN'), ('DFA', 'NN'), ('1', 'CD'), ('2', 'CD'), ('5', 'CD'), ('3', 'CD'), ('4', 'CD'), ('6', 'CD'), ('7', 'CD'), ('8', 'CD'), ('0', 'CD'), ('𝜖', 'NN'), ('a', 'NN'), ('b', 'NN'), ('𝜖', 'NN'), ('a', 'NN'), ('b', 'NN'), ('𝜖', 'NN'), ('𝜖', 'NN'), ('𝜖', 'NN'), ('𝜖', 'NN'), ('𝜖', 'NN'), ('𝜖', 'NN'), ('B=', 'NN'), ('{', ','), ('1', 'CD'), (',', ','), ('2', 'CD'), (',', ','), ('3', 'CD'), (',', ','), ('4', 'CD'), (',', ','), ('6', 'CD'), (',', ','), ('7', 'CD'), (',', ','), ('8', 'CD'), ('}', ','), ('Move', 'NN'), ('(', '-LRB-'), ('B', 'NN'), (',', ','), ('b', 'CD'), (')', '-RRB-'), ('=', ','), ('{', 'NFP'), ('5,9', 'CD'), ('}', ','), ('𝜖-', 'NN'), ('Closure', 'NN'), ('(', '-LRB-'), ('Move', 'NN'), ('(', '-LRB-'), ('B', 'NN'), (',', ','), ('b', 'CD'), (')', '-RRB-'), (')', '-RRB-'), ('=', ','), ('{', ','), ('5', 'CD'), (',', ','), ('6', 'CD'), (',', ','), ('7', 'CD'), (',', ','), ('1', 'CD'), (',', ','), ('2', 'CD'), (',', ','), ('4', 'CD'), (',', ','), ('9', 'CD'), ('}', 'NN'), ('----', ',')] 

 Lemmas are: 
>> [('B', 'B'), ('=', '='), ('{', '{'), ('1,2,3,', '1223'), ('4,6,7,8', '46778'), ('}', '}'), ('b', 'b'), ('10', '10'), ('9', '9'), ('States', 'State'), ('a', 'a'), ('b', 'b'), ('A', 'a'), ('=', '='), ('{', '{'), ('0', '0'), (',', ','), ('1,2,', '122'), ('4,7', '4,7'), ('}', '}'), ('B', 'b'), ('C', 'c'), ('B', 'b'), ('=', '='), ('{', '{'), ('1,2,3,', '1223'), ('4,', '4,'), ('6,7,8', '6778'), ('}', '}'), ('B', 'b'), ('C', 'c'), ('=', '='), ('{', '{'), ('1,2,4,5,6,7', '1224567'), ('}', '}'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('2', '2'), ('–', '-'), ('Lexical', 'lexical'), ('Analyzer', 'analyzer'), ('‹#›', '‹#›'), ('Conversion', 'conversion'), ('from', 'from'), ('NFA', 'nfa'), ('to', 'to'), ('DFA', 'dfa'), ('1', '1'), ('2', '2'), ('5', '5'), ('3', '3'), ('4', '4'), ('6', '6'), ('7', '7'), ('8', '8'), ('0', '0'), ('𝜖', '𝜖'), ('a', 'a'), ('b', 'b'), ('𝜖', '𝜖'), ('a', 'a'), ('b', 'b'), ('𝜖', '𝜖'), ('𝜖', '𝜖'), ('𝜖', '𝜖'), ('𝜖', '𝜖'), ('𝜖', '𝜖'), ('𝜖', '𝜖'), ('B=', 'b='), ('{', '{'), ('1', '1'), (',', ','), ('2', '2'), (',', ','), ('3', '3'), (',', ','), ('4', '4'), (',', ','), ('6', '6'), (',', ','), ('7', '7'), (',', ','), ('8', '8'), ('}', '}'), ('Move', 'move'), ('(', '('), ('B', 'b'), (',', ','), ('b', 'b'), (')', ')'), ('=', '='), ('{', '{'), ('5,9', '5,9'), ('}', '}'), ('𝜖-', '𝜖-'), ('Closure', 'closure'), ('(', '('), ('Move', 'move'), ('(', '('), ('B', 'b'), (',', ','), ('b', 'b'), (')', ')'), (')', ')'), ('=', '='), ('{', '{'), ('5', '5'), (',', ','), ('6', '6'), (',', ','), ('7', '7'), (',', ','), ('1', '1'), (',', ','), ('2', '2'), (',', ','), ('4', '4'), (',', ','), ('9', '9'), ('}', '}'), ('----', '----')] 

 Dependency tags are: 
>> [(('B', 'root'), 'root'), (('=', 'B'), 'punct'), (('{', 'B'), 'punct'), (('1,2,3,', 'B'), 'nummod'), (('4,6,7,8', 'b'), 'nummod'), (('}', 'b'), 'punct'), (('b', 'B'), 'appos'), (('10', 'States'), 'nummod'), (('9', 'States'), 'nummod'), (('States', 'b'), 'appos'), (('a', 'b'), 'compound'), (('b', 'b'), 'conj'), (('A', '='), 'nsubj'), (('=', 'b'), 'conj'), (('{', '='), 'punct'), (('0', '='), 'nummod'), ((',', '0'), 'punct'), (('1,2,', '0'), 'compound'), (('4,7', '0'), 'conj'), (('}', '='), 'punct'), (('B', 'C'), 'nummod'), (('C', 'B'), 'compound'), (('B', '='), 'nsubj'), (('=', 'B'), 'parataxis'), (('{', '='), 'punct'), (('1,2,3,', '='), 'nummod'), (('4,', '6,7,8'), 'compound'), (('6,7,8', '1,2,3,'), 'nummod'), (('}', 'C'), 'punct'), (('B', 'C'), 'nummod'), (('C', '='), 'compound'), (('=', '='), 'parataxis'), (('{', '='), 'punct'), (('1,2,4,5,6,7', '='), 'nummod'), (('}', 'Prof.'), 'punct'), (('Prof.', '='), 'appos'), (('Dixita', 'B'), 'compound'), (('B', 'Prof.'), 'appos'), (('Kagathara', '#'), 'compound'), (('#', 'B'), 'appos'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', 'Unit'), 'appos'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', '#'), 'appos'), (('2', 'Unit'), 'nummod'), (('–', 'Unit'), 'punct'), (('Lexical', 'Analyzer'), 'amod'), (('Analyzer', 'Unit'), 'appos'), (('‹#›', 'Conversion'), 'compound'), (('Conversion', 'Analyzer'), 'appos'), (('from', 'NFA'), 'case'), (('NFA', 'Conversion'), 'nmod'), (('to', 'DFA'), 'case'), (('DFA', 'Conversion'), 'nmod'), (('1', 'DFA'), 'nummod'), (('2', 'DFA'), 'nummod'), (('5', 'DFA'), 'nummod'), (('3', '𝜖'), 'nummod'), (('4', '𝜖'), 'nummod'), (('6', '0'), 'compound'), (('7', '0'), 'compound'), (('8', '0'), 'compound'), (('0', '𝜖'), 'nummod'), (('𝜖', 'DFA'), 'appos'), (('a', '𝜖'), 'compound'), (('b', '𝜖'), 'compound'), (('𝜖', '𝜖'), 'compound'), (('a', 'b'), 'compound'), (('b', '𝜖'), 'compound'), (('𝜖', '𝜖'), 'compound'), (('𝜖', 'b'), 'compound'), (('𝜖', 'B='), 'appos'), (('𝜖', '𝜖'), 'compound'), (('𝜖', 'B='), 'appos'), (('𝜖', 'B='), 'appos'), (('B=', '𝜖'), 'appos'), (('{', 'B='), 'punct'), (('1', 'B='), 'nummod'), ((',', 'B='), 'punct'), (('2', 'B='), 'nummod'), ((',', 'B='), 'punct'), (('3', 'B='), 'nummod'), ((',', '3'), 'punct'), (('4', '3'), 'compound'), ((',', '4'), 'punct'), (('6', '4'), 'compound'), ((',', '7'), 'punct'), (('7', '6'), 'compound'), ((',', '8'), 'punct'), (('8', '7'), 'compound'), (('}', 'Move'), 'punct'), (('Move', '6'), 'appos'), (('(', 'B'), 'punct'), (('B', 'Move'), 'appos'), ((',', 'b'), 'punct'), (('b', 'B'), 'appos'), ((')', 'B'), 'punct'), (('=', 'Move'), 'punct'), (('{', 'Closure'), 'punct'), (('5,9', 'Closure'), 'nummod'), (('}', 'Closure'), 'punct'), (('𝜖-', 'Closure'), 'compound'), (('Closure', 'Move'), 'appos'), (('(', 'Move'), 'punct'), (('Move', 'Closure'), 'appos'), (('(', 'B'), 'punct'), (('B', 'Move'), 'appos'), ((',', 'b'), 'punct'), (('b', 'B'), 'nummod'), ((')', 'B'), 'punct'), ((')', 'B'), 'punct'), (('=', 'Move'), 'punct'), (('{', '5'), 'punct'), (('5', '6'), 'compound'), ((',', '5'), 'punct'), (('6', '7'), 'nummod'), ((',', '7'), 'punct'), (('7', '1'), 'nummod'), ((',', '1'), 'punct'), (('1', '2'), 'nummod'), ((',', '2'), 'punct'), (('2', '4'), 'compound'), ((',', '2'), 'punct'), (('4', '}'), 'nummod'), ((',', '}'), 'punct'), (('9', '}'), 'nummod'), (('}', '='), 'appos'), (('----', '}'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 81 ===========================

 D    = {1,2,4,5,6,7,9}      b 10  9 	States	a	b  	A = {0,1,2,4,7}	B	C  	B = {1,2,3,4,6,7,8}	B	D  	C = {1,2,4,5,6,7}		  	D = {1,2,4,5,6,7,9}		      Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Conversion from NFA to DFA 1 2 5 3 4 6 7 8 0 𝜖 a b 𝜖 a b 𝜖 𝜖 𝜖 𝜖 𝜖 𝜖 Move(C,a) = {3,8} 𝜖- Closure(Move(C,a)) = {3, 6, 7, 1, 2, 4, 8} ---- B = {1,2,3,4,6,7,8}      C= {1, 2, 4, 5, 6 ,7} b 10  9 	States	a	b  	A = {0,1,2,4,7}	B	C  	B = {1,2,3,4,6,7,8}	B	D  	C = {1,2,4,5,6,7}	B	  	D = {1,2,4,5,6,7,9}		      Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Conversion from NFA to DFA 1 2 5 3 4 6 7 8 0 𝜖 a b 𝜖 a b b 𝜖 𝜖 𝜖 𝜖 𝜖 𝜖 Move(C,b) =  {5} 𝜖- Closure(Move(C,b))=  {5, 6, 7, 1, 2, 4} ---- C    = {1,2,4,5,6,7}      C= {1, 2, 4, 5, 6, 7} 10  9 	States	a	b  	A = {0,1,2,4,7}	B	C  	B = {1,2,3,4,6,7,8}	B	D  	C = {1,2,4,5,6,7}	B	C  	D = {1,2,4,5,6,7,9}		      Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Conversion from NFA to DFA 1 2 5 3 4 6 7 8 0 𝜖 a b 𝜖 a b b 𝜖 𝜖 𝜖 𝜖 𝜖 𝜖 Move(D,a) = {3,8} 𝜖- Closure(Move(D,a)) = {3, 6, 7, 1, 2, 4, 8} ---- B    = {1,2,3,4,6,7,8}      D= {1, 2, 4, 5, 6, 7, 9} 10  9 	States	a	b  	A = {0,1,2,4,7}	B	C  	B = {1,2,3,4,6,7,8}	B	D  	C = {1,2,4,5,6,7}	B	C  	D = {1,2,4,5,6,7,9}	B	      Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Conversion from NFA to DFA 1 2 5 3 4 6 7 8 0 𝜖 a b 𝜖 a b b 𝜖 𝜖 𝜖 𝜖 𝜖 𝜖 Move(D,b) = {5,10} 𝜖- Closure(Move(D,b)) = {5, 6, 7, 1, 2, 4, 10} ---- E    = {1,2,4,5,6,7,10}      D= {1, 2, 4, 5, 6, 7, 9} 10  9 	States	a	b  	A = {0,1,2,4,7}	B	C  	B = {1,2,3,4,6,7,8}	B	D  	C = {1,2,4,5,6,7}	B	C  	D = {1,2,4,5,6,7,9}	B	E  	E = {1,2,4,5,6,7,10}		      Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Conversion from NFA to DFA 1 2 5 3 4 6 7 8 0 𝜖 a b 𝜖 a b b 𝜖 𝜖 𝜖 𝜖 𝜖 𝜖 Move(E,a) = {3,8} 𝜖- Closure(Move(E,a)) = {3, 6, 7, 1, 2, 4, 8} ---- B    = {1,2,3,4,6,7,8}      E= {1, 2, 4, 5, 6, 7, 10} 10  9 	States	a	b  	A = {0,1,2,4,7}	B	C  	B = {1,2,3,4,6,7,8}	B	D  	C = {1,2,4,5,6,7}	B	C  	D = {1,2,4,5,6,7,9}	B	E  	E = {1,2,4,5,6,7,10}	B	      Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Conversion from NFA to DFA  1 2 5 3 4 6 7 8 0 𝜖 a b 𝜖 a b b 𝜖 𝜖 𝜖 𝜖 𝜖 𝜖 Move(E,b)= 

Tokens are: 
>> ['D', '=', '{', '1,2,4,5,6,7,9', '}', 'b', '10', '9', 'States', 'a', 'b', 'A', '=', '{', '0', ',', '1,2,', '4,7', '}', 'B', 'C', 'B', '=', '{', '1,2,3,', '4,', '6,', '7,8', '}', 'B', 'D', 'C', '=', '{', '1,2,4,', '5', ',', '6,7', '}', 'D', '=', '{', '1,2,4,5,6,7,9', '}', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '2', '–', 'Lexical', 'Analyzer', '‹#›', 'Conversion', 'from', 'NFA', 'to', 'DFA', '1', '2', '5', '3', '4', '6', '7', '8', '0', '𝜖', 'a', 'b', '𝜖', 'a', 'b', '𝜖', '𝜖', '𝜖', '𝜖', '𝜖', '𝜖', 'Move', '(', 'C', ',', 'a', ')', '=', '{', '3,8', '}', '𝜖-', 'Closure', '(', 'Move', '(', 'C', ',', 'a', ')', ')', '=', '{', '3', ',', '6', ',', '7', ',', '1', ',', '2', ',', '4', ',', '8', '}', '----', 'B', '=', '{', '1,2,3,', '4,', '6,7,8', '}', 'C=', '{', '1', ',', '2', ',', '4', ',', '5', ',', '6', ',7', '}', 'b', '10', '9', 'States', 'a', 'b', 'A', '=', '{', '0', ',', '1,2,', '4,7', '}', 'B', 'C', 'B', '=', '{', '1,2,3,', '4,', '6,', '7,8', '}', 'B', 'D', 'C', '=', '{', '1,2,4,', '5', ',', '6,7', '}', 'B', 'D', '=', '{', '1,2,4,5,6,7,9', '}', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '2', '–', 'Lexical', 'Analyzer', '‹#›', 'Conversion', 'from', 'NFA', 'to', 'DFA', '1', '2', '5', '3', '4', '6', '7', '8', '0', '𝜖', 'a', 'b', '𝜖', 'a', 'b', 'b', '𝜖', '𝜖', '𝜖', '𝜖', '𝜖', '𝜖', 'Move', '(', 'C', ',', 'b', ')', '=', '{', '5', '}', '𝜖-', 'Closure', '(', 'Move', '(', 'C', ',', 'b', ')', ')', '=', '{', '5', ',', '6', ',', '7', ',', '1', ',', '2', ',', '4', '}', '----', 'C', '=', '{', '1,2,4,5,', '6,7', '}', 'C=', '{', '1', ',', '2', ',', '4', ',', '5', ',', '6', ',', '7', '}', '10', '9', 'States', 'a', 'b', 'A', '=', '{', '0', ',', '1,2,', '4,7', '}', 'B', 'C', 'B', '=', '{', '1,2,3,', '4,', '6,', '7,8', '}', 'B', 'D', 'C', '=', '{', '1,2,4,', '5', ',', '6,7', '}', 'B', 'C', 'D', '=', '{', '1,2,4,5,6,7,9', '}', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '2', '–', 'Lexical', 'Analyzer', '‹#›', 'Conversion', 'from', 'NFA', 'to', 'DFA', '1', '2', '5', '3', '4', '6', '7', '8', '0', '𝜖', 'a', 'b', '𝜖', 'a', 'b', 'b', '𝜖', '𝜖', '𝜖', '𝜖', '𝜖', '𝜖', 'Move', '(', 'D', ',', 'a', ')', '=', '{', '3,8', '}', '𝜖-', 'Closure', '(', 'Move', '(', 'D', ',', 'a', ')', ')', '=', '{', '3', ',', '6', ',', '7', ',', '1', ',', '2', ',', '4', ',', '8', '}', '----', 'B', '=', '{', '1,2,3,', '4,', '6,7,8', '}', 'D=', '{', '1', ',', '2', ',', '4', ',', '5', ',', '6', ',', '7', ',', '9', '}', '10', '9', 'States', 'a', 'b', 'A', '=', '{', '0', ',', '1,2,', '4,7', '}', 'B', 'C', 'B', '=', '{', '1,2,3,', '4,', '6,', '7,8', '}', 'B', 'D', 'C', '=', '{', '1,2,4,', '5', ',', '6,7', '}', 'B', 'C', 'D', '=', '{', '1,2,4,5,6,7,9', '}', 'B', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '2', '–', 'Lexical', 'Analyzer', '‹#›', 'Conversion', 'from', 'NFA', 'to', 'DFA', '1', '2', '5', '3', '4', '6', '7', '8', '0', '𝜖', 'a', 'b', '𝜖', 'a', 'b', 'b', '𝜖', '𝜖', '𝜖', '𝜖', '𝜖', '𝜖', 'Move', '(', 'D', ',', 'b', ')', '=', '{', '5,10', '}', '𝜖-', 'Closure', '(', 'Move', '(', 'D', ',', 'b', ')', ')', '=', '{', '5', ',', '6', ',', '7', ',', '1', ',', '2', ',', '4', ',', '10', '}', '----', 'E', '=', '{', '1,2,4,5,6,7,10', '}', 'D=', '{', '1', ',', '2', ',', '4', ',', '5', ',', '6', ',', '7', ',', '9', '}', '10', '9', 'States', 'a', 'b', 'A', '=', '{', '0', ',', '1,2,', '4,7', '}', 'B', 'C', 'B', '=', '{', '1,2,3,', '4,', '6,', '7,8', '}', 'B', 'D', 'C', '=', '{', '1,2,4,', '5', ',', '6,7', '}', 'B', 'C', 'D', '=', '{', '1,2,4,5,6,7,9', '}', 'B', 'E', 'E', '=', '{', '1,2,4,5,6,7,10', '}', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '2', '–', 'Lexical', 'Analyzer', '‹#›', 'Conversion', 'from', 'NFA', 'to', 'DFA', '1', '2', '5', '3', '4', '6', '7', '8', '0', '𝜖', 'a', 'b', '𝜖', 'a', 'b', 'b', '𝜖', '𝜖', '𝜖', '𝜖', '𝜖', '𝜖', 'Move', '(', 'E', ',', 'a', ')', '=', '{', '3,8', '}', '𝜖-', 'Closure', '(', 'Move', '(', 'E', ',', 'a', ')', ')', '=', '{', '3', ',', '6', ',', '7', ',', '1', ',', '2', ',', '4', ',', '8', '}', '----', 'B', '=', '{', '1,2,3,', '4,', '6,7,8', '}', 'E=', '{', '1', ',', '2', ',', '4', ',', '5', ',', '6', ',', '7', ',', '10', '}', '10', '9', 'States', 'a', 'b', 'A', '=', '{', '0', ',', '1,2,', '4,7', '}', 'B', 'C', 'B', '=', '{', '1,2,3,', '4,', '6,', '7,8', '}', 'B', 'D', 'C', '=', '{', '1,2,4,', '5', ',', '6,7', '}', 'B', 'C', 'D', '=', '{', '1,2,4,5,6,7,9', '}', 'B', 'E', 'E', '=', '{', '1,2,4,5,6,7,10', '}', 'B', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '2', '–', 'Lexical', 'Analyzer', '‹#›', 'Conversion', 'from', 'NFA', 'to', 'DFA', '1', '2', '5', '3', '4', '6', '7', '8', '0', '𝜖', 'a', 'b', '𝜖', 'a', 'b', 'b', '𝜖', '𝜖', '𝜖', '𝜖', '𝜖', '𝜖', 'Move', '(', 'E', ',', 'b', ')', '='] 

 UPOS tags are: 
>> [('D', 'PROPN'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('1,2,4,5,6,7,9', 'NUM'), ('}', 'PUNCT'), ('b', 'NOUN'), ('10', 'NUM'), ('9', 'NUM'), ('States', 'PROPN'), ('a', 'NOUN'), ('b', 'NOUN'), ('A', 'NOUN'), ('=', 'SYM'), ('{', 'SYM'), ('0', 'NUM'), (',', 'PUNCT'), ('1,2,', 'NUM'), ('4,7', 'NUM'), ('}', 'SYM'), ('B', 'NUM'), ('C', 'NOUN'), ('B', 'NOUN'), ('=', 'SYM'), ('{', 'SYM'), ('1,2,3,', 'NUM'), ('4,', 'NUM'), ('6,', 'NUM'), ('7,8', 'NUM'), ('}', 'PUNCT'), ('B', 'NUM'), ('D', 'NOUN'), ('C', 'NOUN'), ('=', 'SYM'), ('{', 'PUNCT'), ('1,2,4,', 'NUM'), ('5', 'NUM'), (',', 'PUNCT'), ('6,7', 'NUM'), ('}', 'PUNCT'), ('D', 'NOUN'), ('=', 'SYM'), ('{', 'PUNCT'), ('1,2,4,5,6,7,9', 'NUM'), ('}', 'PUNCT'), ('Prof.', 'NOUN'), ('Dixita', 'PROPN'), ('B', 'NOUN'), ('Kagathara', 'NOUN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'ADJ'), ('Analyzer', 'NOUN'), ('‹#›', 'NOUN'), ('Conversion', 'NOUN'), ('from', 'ADP'), ('NFA', 'NOUN'), ('to', 'ADP'), ('DFA', 'NOUN'), ('1', 'NUM'), ('2', 'NUM'), ('5', 'NUM'), ('3', 'NUM'), ('4', 'NUM'), ('6', 'NUM'), ('7', 'NUM'), ('8', 'NUM'), ('0', 'NUM'), ('𝜖', 'NOUN'), ('a', 'NOUN'), ('b', 'NOUN'), ('𝜖', 'NOUN'), ('a', 'NOUN'), ('b', 'NOUN'), ('𝜖', 'NOUN'), ('𝜖', 'X'), ('𝜖', 'X'), ('𝜖', 'NOUN'), ('𝜖', 'NOUN'), ('𝜖', 'PUNCT'), ('Move', 'NOUN'), ('(', 'PUNCT'), ('C', 'NOUN'), (',', 'PUNCT'), ('a', 'NOUN'), (')', 'PUNCT'), ('=', 'SYM'), ('{', 'PUNCT'), ('3,8', 'NUM'), ('}', 'PUNCT'), ('𝜖-', 'NOUN'), ('Closure', 'NOUN'), ('(', 'PUNCT'), ('Move', 'NOUN'), ('(', 'PUNCT'), ('C', 'NOUN'), (',', 'PUNCT'), ('a', 'NUM'), (')', 'PUNCT'), (')', 'PUNCT'), ('=', 'SYM'), ('{', 'PUNCT'), ('3', 'NUM'), (',', 'PUNCT'), ('6', 'NUM'), (',', 'PUNCT'), ('7', 'NUM'), (',', 'PUNCT'), ('1', 'NUM'), (',', 'PUNCT'), ('2', 'NUM'), (',', 'PUNCT'), ('4', 'NUM'), (',', 'PUNCT'), ('8', 'NUM'), ('}', 'PUNCT'), ('----', 'SYM'), ('B', 'NOUN'), ('=', 'SYM'), ('{', 'SYM'), ('1,2,3,', 'NUM'), ('4,', 'NUM'), ('6,7,8', 'NUM'), ('}', 'PUNCT'), ('C=', 'NOUN'), ('{', 'PUNCT'), ('1', 'NUM'), (',', 'PUNCT'), ('2', 'NUM'), (',', 'PUNCT'), ('4', 'NUM'), (',', 'PUNCT'), ('5', 'NUM'), (',', 'PUNCT'), ('6', 'NUM'), (',7', 'NOUN'), ('}', 'PUNCT'), ('b', 'NOUN'), ('10', 'NUM'), ('9', 'NUM'), ('States', 'PROPN'), ('a', 'NOUN'), ('b', 'NOUN'), ('A', 'NOUN'), ('=', 'SYM'), ('{', 'SYM'), ('0', 'NUM'), (',', 'PUNCT'), ('1,2,', 'NUM'), ('4,7', 'NUM'), ('}', 'SYM'), ('B', 'NUM'), ('C', 'NOUN'), ('B', 'NOUN'), ('=', 'SYM'), ('{', 'SYM'), ('1,2,3,', 'NUM'), ('4,', 'NUM'), ('6,', 'NUM'), ('7,8', 'NUM'), ('}', 'SYM'), ('B', 'NUM'), ('D', 'NOUN'), ('C', 'NOUN'), ('=', 'SYM'), ('{', 'PUNCT'), ('1,2,4,', 'NUM'), ('5', 'NUM'), (',', 'PUNCT'), ('6,7', 'NUM'), ('}', 'PUNCT'), ('B', 'NUM'), ('D', 'NOUN'), ('=', 'SYM'), ('{', 'PUNCT'), ('1,2,4,5,6,7,9', 'NUM'), ('}', 'PUNCT'), ('Prof.', 'NOUN'), ('Dixita', 'PROPN'), ('B', 'NOUN'), ('Kagathara', 'NOUN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'ADJ'), ('Analyzer', 'NOUN'), ('‹#›', 'NOUN'), ('Conversion', 'NOUN'), ('from', 'ADP'), ('NFA', 'NOUN'), ('to', 'ADP'), ('DFA', 'NOUN'), ('1', 'NUM'), ('2', 'NUM'), ('5', 'NUM'), ('3', 'NUM'), ('4', 'NUM'), ('6', 'NUM'), ('7', 'NUM'), ('8', 'NUM'), ('0', 'NUM'), ('𝜖', 'NOUN'), ('a', 'NOUN'), ('b', 'NOUN'), ('𝜖', 'NOUN'), ('a', 'NOUN'), ('b', 'NOUN'), ('b', 'NOUN'), ('𝜖', 'PUNCT'), ('𝜖', 'X'), ('𝜖', 'X'), ('𝜖', 'NOUN'), ('𝜖', 'NOUN'), ('𝜖', 'NOUN'), ('Move', 'NOUN'), ('(', 'PUNCT'), ('C', 'NOUN'), (',', 'PUNCT'), ('b', 'NUM'), (')', 'PUNCT'), ('=', 'SYM'), ('{', 'PUNCT'), ('5', 'NUM'), ('}', 'PUNCT'), ('𝜖-', 'NUM'), ('Closure', 'NOUN'), ('(', 'PUNCT'), ('Move', 'NOUN'), ('(', 'PUNCT'), ('C', 'NOUN'), (',', 'PUNCT'), ('b', 'NOUN'), (')', 'PUNCT'), (')', 'PUNCT'), ('=', 'SYM'), ('{', 'PUNCT'), ('5', 'NUM'), (',', 'PUNCT'), ('6', 'NUM'), (',', 'PUNCT'), ('7', 'NUM'), (',', 'PUNCT'), ('1', 'NUM'), (',', 'PUNCT'), ('2', 'NUM'), (',', 'PUNCT'), ('4', 'NUM'), ('}', 'PUNCT'), ('----', 'SYM'), ('C', 'NOUN'), ('=', 'SYM'), ('{', 'SYM'), ('1,2,4,5,', 'NUM'), ('6,7', 'NUM'), ('}', 'SYM'), ('C=', 'NOUN'), ('{', 'PUNCT'), ('1', 'NUM'), (',', 'PUNCT'), ('2', 'NUM'), (',', 'PUNCT'), ('4', 'NUM'), (',', 'PUNCT'), ('5', 'NUM'), (',', 'PUNCT'), ('6', 'NUM'), (',', 'PUNCT'), ('7', 'NUM'), ('}', 'PUNCT'), ('10', 'NUM'), ('9', 'NUM'), ('States', 'PROPN'), ('a', 'NOUN'), ('b', 'NOUN'), ('A', 'NOUN'), ('=', 'SYM'), ('{', 'SYM'), ('0', 'NUM'), (',', 'PUNCT'), ('1,2,', 'NUM'), ('4,7', 'NUM'), ('}', 'SYM'), ('B', 'NUM'), ('C', 'NOUN'), ('B', 'NOUN'), ('=', 'SYM'), ('{', 'SYM'), ('1,2,3,', 'NUM'), ('4,', 'NUM'), ('6,', 'NUM'), ('7,8', 'NUM'), ('}', 'SYM'), ('B', 'NUM'), ('D', 'NOUN'), ('C', 'NOUN'), ('=', 'SYM'), ('{', 'PUNCT'), ('1,2,4,', 'NUM'), ('5', 'NUM'), (',', 'PUNCT'), ('6,7', 'NUM'), ('}', 'PUNCT'), ('B', 'NUM'), ('C', 'NOUN'), ('D', 'NOUN'), ('=', 'SYM'), ('{', 'PUNCT'), ('1,2,4,5,6,7,9', 'NUM'), ('}', 'PUNCT'), ('Prof.', 'NOUN'), ('Dixita', 'PROPN'), ('B', 'NOUN'), ('Kagathara', 'NOUN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'ADJ'), ('Analyzer', 'NOUN'), ('‹#›', 'NOUN'), ('Conversion', 'NOUN'), ('from', 'ADP'), ('NFA', 'NOUN'), ('to', 'ADP'), ('DFA', 'NOUN'), ('1', 'NUM'), ('2', 'NUM'), ('5', 'NUM'), ('3', 'NUM'), ('4', 'NUM'), ('6', 'NUM'), ('7', 'NUM'), ('8', 'NUM'), ('0', 'NUM'), ('𝜖', 'NOUN'), ('a', 'DET'), ('b', 'NOUN'), ('𝜖', 'NOUN'), ('a', 'NOUN'), ('b', 'NOUN'), ('b', 'NOUN'), ('𝜖', 'PUNCT'), ('𝜖', 'X'), ('𝜖', 'X'), ('𝜖', 'X'), ('𝜖', 'PUNCT'), ('𝜖', 'PUNCT'), ('Move', 'NOUN'), ('(', 'PUNCT'), ('D', 'NOUN'), (',', 'PUNCT'), ('a', 'NUM'), (')', 'PUNCT'), ('=', 'SYM'), ('{', 'PUNCT'), ('3,8', 'NUM'), ('}', 'PUNCT'), ('𝜖-', 'NOUN'), ('Closure', 'NOUN'), ('(', 'PUNCT'), ('Move', 'NOUN'), ('(', 'PUNCT'), ('D', 'NOUN'), (',', 'PUNCT'), ('a', 'NOUN'), (')', 'PUNCT'), (')', 'PUNCT'), ('=', 'SYM'), ('{', 'PUNCT'), ('3', 'NUM'), (',', 'PUNCT'), ('6', 'NUM'), (',', 'PUNCT'), ('7', 'NUM'), (',', 'PUNCT'), ('1', 'NUM'), (',', 'PUNCT'), ('2', 'NUM'), (',', 'PUNCT'), ('4', 'NUM'), (',', 'PUNCT'), ('8', 'NUM'), ('}', 'PUNCT'), ('----', 'SYM'), ('B', 'NOUN'), ('=', 'SYM'), ('{', 'SYM'), ('1,2,3,', 'NUM'), ('4,', 'NUM'), ('6,7,8', 'NUM'), ('}', 'PUNCT'), ('D=', 'NUM'), ('{', 'PUNCT'), ('1', 'NUM'), (',', 'PUNCT'), ('2', 'NUM'), (',', 'PUNCT'), ('4', 'NUM'), (',', 'PUNCT'), ('5', 'NUM'), (',', 'PUNCT'), ('6', 'NUM'), (',', 'PUNCT'), ('7', 'NUM'), (',', 'PUNCT'), ('9', 'NUM'), ('}', 'SYM'), ('10', 'NUM'), ('9', 'NUM'), ('States', 'PROPN'), ('a', 'NOUN'), ('b', 'NOUN'), ('A', 'NOUN'), ('=', 'SYM'), ('{', 'SYM'), ('0', 'NUM'), (',', 'PUNCT'), ('1,2,', 'NUM'), ('4,7', 'NUM'), ('}', 'SYM'), ('B', 'NUM'), ('C', 'NOUN'), ('B', 'NOUN'), ('=', 'SYM'), ('{', 'SYM'), ('1,2,3,', 'NUM'), ('4,', 'NUM'), ('6,', 'NUM'), ('7,8', 'NUM'), ('}', 'SYM'), ('B', 'NUM'), ('D', 'NOUN'), ('C', 'NOUN'), ('=', 'SYM'), ('{', 'PUNCT'), ('1,2,4,', 'NUM'), ('5', 'NUM'), (',', 'PUNCT'), ('6,7', 'NUM'), ('}', 'PUNCT'), ('B', 'NUM'), ('C', 'NOUN'), ('D', 'NOUN'), ('=', 'SYM'), ('{', 'PUNCT'), ('1,2,4,5,6,7,9', 'NUM'), ('}', 'PUNCT'), ('B', 'NOUN'), ('Prof.', 'NOUN'), ('Dixita', 'PROPN'), ('B', 'NOUN'), ('Kagathara', 'NOUN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'ADJ'), ('Analyzer', 'NOUN'), ('‹#›', 'NOUN'), ('Conversion', 'NOUN'), ('from', 'ADP'), ('NFA', 'NOUN'), ('to', 'ADP'), ('DFA', 'NOUN'), ('1', 'NUM'), ('2', 'NUM'), ('5', 'NUM'), ('3', 'NUM'), ('4', 'NUM'), ('6', 'NUM'), ('7', 'NUM'), ('8', 'NUM'), ('0', 'NUM'), ('𝜖', 'NOUN'), ('a', 'DET'), ('b', 'NOUN'), ('𝜖', 'NOUN'), ('a', 'NOUN'), ('b', 'NOUN'), ('b', 'NOUN'), ('𝜖', 'PUNCT'), ('𝜖', 'X'), ('𝜖', 'X'), ('𝜖', 'X'), ('𝜖', 'PUNCT'), ('𝜖', 'PUNCT'), ('Move', 'NOUN'), ('(', 'PUNCT'), ('D', 'NOUN'), (',', 'PUNCT'), ('b', 'NUM'), (')', 'PUNCT'), ('=', 'SYM'), ('{', 'PUNCT'), ('5,10', 'NUM'), ('}', 'PUNCT'), ('𝜖-', 'NOUN'), ('Closure', 'NOUN'), ('(', 'PUNCT'), ('Move', 'NOUN'), ('(', 'PUNCT'), ('D', 'NOUN'), (',', 'PUNCT'), ('b', 'NOUN'), (')', 'PUNCT'), (')', 'PUNCT'), ('=', 'SYM'), ('{', 'PUNCT'), ('5', 'NUM'), (',', 'PUNCT'), ('6', 'NUM'), (',', 'PUNCT'), ('7', 'NUM'), (',', 'PUNCT'), ('1', 'NUM'), (',', 'PUNCT'), ('2', 'NUM'), (',', 'PUNCT'), ('4', 'NUM'), (',', 'PUNCT'), ('10', 'NUM'), ('}', 'NOUN'), ('----', 'SYM'), ('E', 'NOUN'), ('=', 'SYM'), ('{', 'SYM'), ('1,2,4,5,6,7,10', 'NUM'), ('}', 'PUNCT'), ('D=', 'SYM'), ('{', 'PUNCT'), ('1', 'NUM'), (',', 'PUNCT'), ('2', 'NUM'), (',', 'PUNCT'), ('4', 'NUM'), (',', 'PUNCT'), ('5', 'NUM'), (',', 'PUNCT'), ('6', 'NUM'), (',', 'PUNCT'), ('7', 'NUM'), (',', 'PUNCT'), ('9', 'NUM'), ('}', 'SYM'), ('10', 'NUM'), ('9', 'NUM'), ('States', 'PROPN'), ('a', 'NOUN'), ('b', 'NOUN'), ('A', 'NOUN'), ('=', 'SYM'), ('{', 'SYM'), ('0', 'NUM'), (',', 'PUNCT'), ('1,2,', 'NUM'), ('4,7', 'NUM'), ('}', 'SYM'), ('B', 'NUM'), ('C', 'NOUN'), ('B', 'NOUN'), ('=', 'SYM'), ('{', 'SYM'), ('1,2,3,', 'NUM'), ('4,', 'NUM'), ('6,', 'NUM'), ('7,8', 'NUM'), ('}', 'SYM'), ('B', 'NUM'), ('D', 'NOUN'), ('C', 'NOUN'), ('=', 'SYM'), ('{', 'PUNCT'), ('1,2,4,', 'NUM'), ('5', 'NUM'), (',', 'PUNCT'), ('6,7', 'NUM'), ('}', 'SYM'), ('B', 'NUM'), ('C', 'NOUN'), ('D', 'NOUN'), ('=', 'SYM'), ('{', 'SYM'), ('1,2,4,5,6,7,9', 'NUM'), ('}', 'PUNCT'), ('B', 'NOUN'), ('E', 'NOUN'), ('E', 'NOUN'), ('=', 'SYM'), ('{', 'PUNCT'), ('1,2,4,5,6,7,10', 'NUM'), ('}', 'PUNCT'), ('Prof.', 'NOUN'), ('Dixita', 'NOUN'), ('B', 'NOUN'), ('Kagathara', 'NOUN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'ADJ'), ('Analyzer', 'NOUN'), ('‹#›', 'NOUN'), ('Conversion', 'NOUN'), ('from', 'ADP'), ('NFA', 'NOUN'), ('to', 'ADP'), ('DFA', 'NOUN'), ('1', 'NUM'), ('2', 'NUM'), ('5', 'NUM'), ('3', 'NUM'), ('4', 'NUM'), ('6', 'NUM'), ('7', 'NUM'), ('8', 'NUM'), ('0', 'NUM'), ('𝜖', 'NOUN'), ('a', 'DET'), ('b', 'NOUN'), ('𝜖', 'NOUN'), ('a', 'DET'), ('b', 'NOUN'), ('b', 'NOUN'), ('𝜖', 'NOUN'), ('𝜖', 'NOUN'), ('𝜖', 'NOUN'), ('𝜖', 'NOUN'), ('𝜖', 'PUNCT'), ('𝜖', 'PUNCT'), ('Move', 'NOUN'), ('(', 'PUNCT'), ('E', 'NOUN'), (',', 'PUNCT'), ('a', 'NUM'), (')', 'PUNCT'), ('=', 'SYM'), ('{', 'PUNCT'), ('3,8', 'NUM'), ('}', 'PUNCT'), ('𝜖-', 'NOUN'), ('Closure', 'NOUN'), ('(', 'PUNCT'), ('Move', 'NOUN'), ('(', 'PUNCT'), ('E', 'NOUN'), (',', 'PUNCT'), ('a', 'NOUN'), (')', 'PUNCT'), (')', 'PUNCT'), ('=', 'SYM'), ('{', 'PUNCT'), ('3', 'NUM'), (',', 'PUNCT'), ('6', 'NUM'), (',', 'PUNCT'), ('7', 'NUM'), (',', 'PUNCT'), ('1', 'NUM'), (',', 'PUNCT'), ('2', 'NUM'), (',', 'PUNCT'), ('4', 'NUM'), (',', 'PUNCT'), ('8', 'NUM'), ('}', 'NOUN'), ('----', 'SYM'), ('B', 'NUM'), ('=', 'SYM'), ('{', 'SYM'), ('1,2,3,', 'NUM'), ('4,', 'NUM'), ('6,7,8', 'NUM'), ('}', 'PUNCT'), ('E=', 'NOUN'), ('{', 'SYM'), ('1', 'NUM'), (',', 'PUNCT'), ('2', 'NUM'), (',', 'PUNCT'), ('4', 'NUM'), (',', 'PUNCT'), ('5', 'NUM'), (',', 'PUNCT'), ('6', 'NUM'), (',', 'PUNCT'), ('7', 'NUM'), (',', 'PUNCT'), ('10', 'NUM'), ('}', 'SYM'), ('10', 'NUM'), ('9', 'NUM'), ('States', 'PROPN'), ('a', 'DET'), ('b', 'NOUN'), ('A', 'NOUN'), ('=', 'SYM'), ('{', 'SYM'), ('0', 'NUM'), (',', 'PUNCT'), ('1,2,', 'NUM'), ('4,7', 'NUM'), ('}', 'SYM'), ('B', 'NUM'), ('C', 'NOUN'), ('B', 'NOUN'), ('=', 'SYM'), ('{', 'SYM'), ('1,2,3,', 'NUM'), ('4,', 'NUM'), ('6,', 'NUM'), ('7,8', 'NUM'), ('}', 'SYM'), ('B', 'NUM'), ('D', 'NOUN'), ('C', 'NOUN'), ('=', 'SYM'), ('{', 'PUNCT'), ('1,2,4,', 'NUM'), ('5', 'NUM'), (',', 'PUNCT'), ('6,7', 'NUM'), ('}', 'SYM'), ('B', 'NUM'), ('C', 'NOUN'), ('D', 'NOUN'), ('=', 'SYM'), ('{', 'SYM'), ('1,2,4,5,6,7,9', 'NUM'), ('}', 'PUNCT'), ('B', 'NOUN'), ('E', 'NOUN'), ('E', 'NOUN'), ('=', 'SYM'), ('{', 'PUNCT'), ('1,2,4,5,6,7,10', 'NUM'), ('}', 'PUNCT'), ('B', 'NOUN'), ('Prof.', 'NOUN'), ('Dixita', 'NOUN'), ('B', 'NOUN'), ('Kagathara', 'NOUN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'ADJ'), ('Analyzer', 'NOUN'), ('‹#›', 'NOUN'), ('Conversion', 'NOUN'), ('from', 'ADP'), ('NFA', 'NOUN'), ('to', 'ADP'), ('DFA', 'NOUN'), ('1', 'NUM'), ('2', 'NUM'), ('5', 'NUM'), ('3', 'NUM'), ('4', 'NUM'), ('6', 'NUM'), ('7', 'NUM'), ('8', 'NUM'), ('0', 'NUM'), ('𝜖', 'NOUN'), ('a', 'DET'), ('b', 'NOUN'), ('𝜖', 'NOUN'), ('a', 'DET'), ('b', 'NOUN'), ('b', 'NOUN'), ('𝜖', 'NOUN'), ('𝜖', 'NOUN'), ('𝜖', 'NOUN'), ('𝜖', 'NOUN'), ('𝜖', 'PUNCT'), ('𝜖', 'PUNCT'), ('Move', 'NOUN'), ('(', 'PUNCT'), ('E', 'NOUN'), (',', 'PUNCT'), ('b', 'NOUN'), (')', 'PUNCT'), ('=', 'PUNCT')] 

 XPOS tags are: 
>> [('D', 'NNP'), ('=', ','), ('{', 'NFP'), ('1,2,4,5,6,7,9', 'CD'), ('}', ':'), ('b', 'NN'), ('10', 'CD'), ('9', 'CD'), ('States', 'NNPS'), ('a', 'NN'), ('b', 'NN'), ('A', 'NN'), ('=', 'SYM'), ('{', 'SYM'), ('0', 'CD'), (',', ','), ('1,2,', 'CD'), ('4,7', 'CD'), ('}', 'SYM'), ('B', 'CD'), ('C', 'NN'), ('B', 'NN'), ('=', 'SYM'), ('{', 'SYM'), ('1,2,3,', 'CD'), ('4,', 'CD'), ('6,', 'CD'), ('7,8', 'CD'), ('}', ':'), ('B', 'CD'), ('D', 'NN'), ('C', 'NN'), ('=', 'SYM'), ('{', 'NFP'), ('1,2,4,', 'CD'), ('5', 'CD'), (',', ','), ('6,7', 'CD'), ('}', ':'), ('D', 'NN'), ('=', 'SYM'), ('{', 'NFP'), ('1,2,4,5,6,7,9', 'CD'), ('}', ':'), ('Prof.', 'NN'), ('Dixita', 'NNP'), ('B', 'NN'), ('Kagathara', 'NN'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('2', 'CD'), ('–', ':'), ('Lexical', 'JJ'), ('Analyzer', 'NN'), ('‹#›', 'NN'), ('Conversion', 'NN'), ('from', 'IN'), ('NFA', 'NN'), ('to', 'IN'), ('DFA', 'NN'), ('1', 'CD'), ('2', 'CD'), ('5', 'CD'), ('3', 'CD'), ('4', 'CD'), ('6', 'CD'), ('7', 'CD'), ('8', 'CD'), ('0', 'CD'), ('𝜖', 'NN'), ('a', 'NN'), ('b', 'NN'), ('𝜖', 'NN'), ('a', 'NN'), ('b', 'NN'), ('𝜖', 'NN'), ('𝜖', 'FW'), ('𝜖', 'FW'), ('𝜖', 'NN'), ('𝜖', 'NN'), ('𝜖', ','), ('Move', 'NN'), ('(', '-LRB-'), ('C', 'NN'), (',', ','), ('a', 'NN'), (')', '-RRB-'), ('=', 'SYM'), ('{', 'NFP'), ('3,8', 'CD'), ('}', '-LRB-'), ('𝜖-', 'NN'), ('Closure', 'NN'), ('(', '-LRB-'), ('Move', 'NN'), ('(', '-LRB-'), ('C', 'NN'), (',', ','), ('a', 'LS'), (')', '-RRB-'), (')', '-RRB-'), ('=', 'SYM'), ('{', 'NFP'), ('3', 'CD'), (',', ','), ('6', 'CD'), (',', ','), ('7', 'CD'), (',', ','), ('1', 'CD'), (',', ','), ('2', 'CD'), (',', ','), ('4', 'CD'), (',', ','), ('8', 'CD'), ('}', ','), ('----', 'SYM'), ('B', 'NN'), ('=', 'SYM'), ('{', 'SYM'), ('1,2,3,', 'CD'), ('4,', 'CD'), ('6,7,8', 'CD'), ('}', ':'), ('C=', 'NN'), ('{', ','), ('1', 'CD'), (',', ','), ('2', 'CD'), (',', ','), ('4', 'CD'), (',', ','), ('5', 'CD'), (',', ','), ('6', 'CD'), (',7', 'NN'), ('}', ','), ('b', 'NN'), ('10', 'CD'), ('9', 'CD'), ('States', 'NNPS'), ('a', 'NN'), ('b', 'NN'), ('A', 'NN'), ('=', 'SYM'), ('{', 'SYM'), ('0', 'CD'), (',', ','), ('1,2,', 'CD'), ('4,7', 'CD'), ('}', 'SYM'), ('B', 'CD'), ('C', 'NN'), ('B', 'NN'), ('=', 'SYM'), ('{', 'SYM'), ('1,2,3,', 'CD'), ('4,', 'CD'), ('6,', 'CD'), ('7,8', 'CD'), ('}', 'SYM'), ('B', 'CD'), ('D', 'NN'), ('C', 'NN'), ('=', 'SYM'), ('{', 'NFP'), ('1,2,4,', 'CD'), ('5', 'CD'), (',', ','), ('6,7', 'CD'), ('}', ','), ('B', 'CD'), ('D', 'NN'), ('=', 'SYM'), ('{', 'NFP'), ('1,2,4,5,6,7,9', 'CD'), ('}', ':'), ('Prof.', 'NN'), ('Dixita', 'NNP'), ('B', 'NN'), ('Kagathara', 'NN'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('2', 'CD'), ('–', ':'), ('Lexical', 'JJ'), ('Analyzer', 'NN'), ('‹#›', 'NN'), ('Conversion', 'NN'), ('from', 'IN'), ('NFA', 'NN'), ('to', 'IN'), ('DFA', 'NN'), ('1', 'CD'), ('2', 'CD'), ('5', 'CD'), ('3', 'CD'), ('4', 'CD'), ('6', 'CD'), ('7', 'CD'), ('8', 'CD'), ('0', 'CD'), ('𝜖', 'NN'), ('a', 'NN'), ('b', 'NN'), ('𝜖', 'NN'), ('a', 'NN'), ('b', 'NN'), ('b', 'NN'), ('𝜖', ','), ('𝜖', 'FW'), ('𝜖', 'FW'), ('𝜖', 'NN'), ('𝜖', 'NN'), ('𝜖', 'NN'), ('Move', 'NN'), ('(', '-LRB-'), ('C', 'NN'), (',', ','), ('b', 'CD'), (')', '-RRB-'), ('=', 'SYM'), ('{', 'NFP'), ('5', 'CD'), ('}', '-RRB-'), ('𝜖-', 'CD'), ('Closure', 'NN'), ('(', '-LRB-'), ('Move', 'NN'), ('(', '-LRB-'), ('C', 'NN'), (',', ','), ('b', 'NN'), (')', '-RRB-'), (')', '-RRB-'), ('=', 'SYM'), ('{', 'NFP'), ('5', 'CD'), (',', ','), ('6', 'CD'), (',', ','), ('7', 'CD'), (',', ','), ('1', 'CD'), (',', ','), ('2', 'CD'), (',', ','), ('4', 'CD'), ('}', ','), ('----', 'SYM'), ('C', 'NN'), ('=', 'SYM'), ('{', 'SYM'), ('1,2,4,5,', 'CD'), ('6,7', 'CD'), ('}', 'SYM'), ('C=', 'NN'), ('{', ','), ('1', 'CD'), (',', ','), ('2', 'CD'), (',', ','), ('4', 'CD'), (',', ','), ('5', 'CD'), (',', ','), ('6', 'CD'), (',', ','), ('7', 'CD'), ('}', ','), ('10', 'CD'), ('9', 'CD'), ('States', 'NNPS'), ('a', 'NN'), ('b', 'NN'), ('A', 'NN'), ('=', 'SYM'), ('{', 'SYM'), ('0', 'CD'), (',', ','), ('1,2,', 'CD'), ('4,7', 'CD'), ('}', 'SYM'), ('B', 'CD'), ('C', 'NN'), ('B', 'NN'), ('=', 'SYM'), ('{', 'SYM'), ('1,2,3,', 'CD'), ('4,', 'CD'), ('6,', 'CD'), ('7,8', 'CD'), ('}', 'SYM'), ('B', 'CD'), ('D', 'NN'), ('C', 'NN'), ('=', 'SYM'), ('{', 'NFP'), ('1,2,4,', 'CD'), ('5', 'CD'), (',', ','), ('6,7', 'CD'), ('}', ','), ('B', 'CD'), ('C', 'NN'), ('D', 'NN'), ('=', 'SYM'), ('{', 'NFP'), ('1,2,4,5,6,7,9', 'CD'), ('}', ':'), ('Prof.', 'NN'), ('Dixita', 'NNP'), ('B', 'NN'), ('Kagathara', 'NN'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('2', 'CD'), ('–', ':'), ('Lexical', 'JJ'), ('Analyzer', 'NN'), ('‹#›', 'NN'), ('Conversion', 'NN'), ('from', 'IN'), ('NFA', 'NN'), ('to', 'IN'), ('DFA', 'NN'), ('1', 'CD'), ('2', 'CD'), ('5', 'CD'), ('3', 'CD'), ('4', 'CD'), ('6', 'CD'), ('7', 'CD'), ('8', 'CD'), ('0', 'CD'), ('𝜖', 'NN'), ('a', 'DT'), ('b', 'NN'), ('𝜖', 'NN'), ('a', 'NN'), ('b', 'NN'), ('b', 'NN'), ('𝜖', ','), ('𝜖', 'FW'), ('𝜖', 'FW'), ('𝜖', 'FW'), ('𝜖', ','), ('𝜖', ','), ('Move', 'NN'), ('(', '-LRB-'), ('D', 'NN'), (',', ','), ('a', 'LS'), (')', '-RRB-'), ('=', 'SYM'), ('{', 'NFP'), ('3,8', 'CD'), ('}', 'NFP'), ('𝜖-', 'NN'), ('Closure', 'NN'), ('(', '-LRB-'), ('Move', 'NN'), ('(', '-LRB-'), ('D', 'NN'), (',', ','), ('a', 'NN'), (')', '-RRB-'), (')', '-RRB-'), ('=', 'SYM'), ('{', 'NFP'), ('3', 'CD'), (',', ','), ('6', 'CD'), (',', ','), ('7', 'CD'), (',', ','), ('1', 'CD'), (',', ','), ('2', 'CD'), (',', ','), ('4', 'CD'), (',', ','), ('8', 'CD'), ('}', ','), ('----', 'SYM'), ('B', 'NN'), ('=', 'SYM'), ('{', 'SYM'), ('1,2,3,', 'CD'), ('4,', 'CD'), ('6,7,8', 'CD'), ('}', ','), ('D=', 'CD'), ('{', ':'), ('1', 'CD'), (',', ','), ('2', 'CD'), (',', ','), ('4', 'CD'), (',', ','), ('5', 'CD'), (',', ','), ('6', 'CD'), (',', ','), ('7', 'CD'), (',', ','), ('9', 'CD'), ('}', 'SYM'), ('10', 'CD'), ('9', 'CD'), ('States', 'NNPS'), ('a', 'NN'), ('b', 'NN'), ('A', 'NN'), ('=', 'SYM'), ('{', 'SYM'), ('0', 'CD'), (',', ','), ('1,2,', 'CD'), ('4,7', 'CD'), ('}', 'SYM'), ('B', 'CD'), ('C', 'NN'), ('B', 'NN'), ('=', 'SYM'), ('{', 'SYM'), ('1,2,3,', 'CD'), ('4,', 'CD'), ('6,', 'CD'), ('7,8', 'CD'), ('}', 'SYM'), ('B', 'CD'), ('D', 'NN'), ('C', 'NN'), ('=', 'SYM'), ('{', 'NFP'), ('1,2,4,', 'CD'), ('5', 'CD'), (',', ','), ('6,7', 'CD'), ('}', ','), ('B', 'CD'), ('C', 'NN'), ('D', 'NN'), ('=', 'SYM'), ('{', 'NFP'), ('1,2,4,5,6,7,9', 'CD'), ('}', '-LRB-'), ('B', 'NN'), ('Prof.', 'NN'), ('Dixita', 'NNP'), ('B', 'NN'), ('Kagathara', 'NN'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('2', 'CD'), ('–', ':'), ('Lexical', 'JJ'), ('Analyzer', 'NN'), ('‹#›', 'NN'), ('Conversion', 'NN'), ('from', 'IN'), ('NFA', 'NN'), ('to', 'IN'), ('DFA', 'NN'), ('1', 'CD'), ('2', 'CD'), ('5', 'CD'), ('3', 'CD'), ('4', 'CD'), ('6', 'CD'), ('7', 'CD'), ('8', 'CD'), ('0', 'CD'), ('𝜖', 'NN'), ('a', 'DT'), ('b', 'NN'), ('𝜖', 'NN'), ('a', 'NN'), ('b', 'NN'), ('b', 'NN'), ('𝜖', ','), ('𝜖', 'FW'), ('𝜖', 'FW'), ('𝜖', 'FW'), ('𝜖', ','), ('𝜖', ','), ('Move', 'NN'), ('(', '-LRB-'), ('D', 'NN'), (',', ','), ('b', 'CD'), (')', '-RRB-'), ('=', 'SYM'), ('{', 'NFP'), ('5,10', 'CD'), ('}', '-RRB-'), ('𝜖-', 'NN'), ('Closure', 'NN'), ('(', '-LRB-'), ('Move', 'NN'), ('(', '-LRB-'), ('D', 'NN'), (',', ','), ('b', 'NN'), (')', '-RRB-'), (')', '-RRB-'), ('=', 'SYM'), ('{', 'NFP'), ('5', 'CD'), (',', ','), ('6', 'CD'), (',', ','), ('7', 'CD'), (',', ','), ('1', 'CD'), (',', ','), ('2', 'CD'), (',', ','), ('4', 'CD'), (',', ','), ('10', 'CD'), ('}', 'NN'), ('----', 'SYM'), ('E', 'NN'), ('=', 'SYM'), ('{', 'SYM'), ('1,2,4,5,6,7,10', 'CD'), ('}', '-LRB-'), ('D=', 'SYM'), ('{', ','), ('1', 'CD'), (',', ','), ('2', 'CD'), (',', ','), ('4', 'CD'), (',', ','), ('5', 'CD'), (',', ','), ('6', 'CD'), (',', ','), ('7', 'CD'), (',', ','), ('9', 'CD'), ('}', 'SYM'), ('10', 'CD'), ('9', 'CD'), ('States', 'NNPS'), ('a', 'NN'), ('b', 'NN'), ('A', 'NN'), ('=', 'SYM'), ('{', 'SYM'), ('0', 'CD'), (',', ','), ('1,2,', 'CD'), ('4,7', 'CD'), ('}', 'SYM'), ('B', 'CD'), ('C', 'NN'), ('B', 'NN'), ('=', 'SYM'), ('{', 'SYM'), ('1,2,3,', 'CD'), ('4,', 'CD'), ('6,', 'CD'), ('7,8', 'CD'), ('}', 'SYM'), ('B', 'CD'), ('D', 'NN'), ('C', 'NN'), ('=', 'SYM'), ('{', ':'), ('1,2,4,', 'CD'), ('5', 'CD'), (',', ','), ('6,7', 'CD'), ('}', 'SYM'), ('B', 'CD'), ('C', 'NN'), ('D', 'NN'), ('=', 'SYM'), ('{', 'SYM'), ('1,2,4,5,6,7,9', 'CD'), ('}', '-LRB-'), ('B', 'NN'), ('E', 'NN'), ('E', 'NN'), ('=', 'SYM'), ('{', 'NFP'), ('1,2,4,5,6,7,10', 'CD'), ('}', '-LRB-'), ('Prof.', 'NN'), ('Dixita', 'NN'), ('B', 'NN'), ('Kagathara', 'NN'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('2', 'CD'), ('–', ':'), ('Lexical', 'JJ'), ('Analyzer', 'NN'), ('‹#›', 'NN'), ('Conversion', 'NN'), ('from', 'IN'), ('NFA', 'NN'), ('to', 'IN'), ('DFA', 'NN'), ('1', 'CD'), ('2', 'CD'), ('5', 'CD'), ('3', 'CD'), ('4', 'CD'), ('6', 'CD'), ('7', 'CD'), ('8', 'CD'), ('0', 'CD'), ('𝜖', 'NN'), ('a', 'DT'), ('b', 'NN'), ('𝜖', 'NN'), ('a', 'DT'), ('b', 'NN'), ('b', 'NN'), ('𝜖', 'NN'), ('𝜖', 'NN'), ('𝜖', 'NN'), ('𝜖', 'NN'), ('𝜖', ','), ('𝜖', ','), ('Move', 'NN'), ('(', '-LRB-'), ('E', 'NN'), (',', ','), ('a', 'LS'), (')', '-RRB-'), ('=', 'SYM'), ('{', 'NFP'), ('3,8', 'CD'), ('}', ','), ('𝜖-', 'NN'), ('Closure', 'NN'), ('(', '-LRB-'), ('Move', 'NN'), ('(', '-LRB-'), ('E', 'NN'), (',', ','), ('a', 'NN'), (')', '-RRB-'), (')', '-RRB-'), ('=', 'SYM'), ('{', ','), ('3', 'CD'), (',', ','), ('6', 'CD'), (',', ','), ('7', 'CD'), (',', ','), ('1', 'CD'), (',', ','), ('2', 'CD'), (',', ','), ('4', 'CD'), (',', ','), ('8', 'CD'), ('}', 'NN'), ('----', 'SYM'), ('B', 'CD'), ('=', 'SYM'), ('{', 'SYM'), ('1,2,3,', 'CD'), ('4,', 'CD'), ('6,7,8', 'CD'), ('}', ','), ('E=', 'NN'), ('{', 'SYM'), ('1', 'CD'), (',', ','), ('2', 'CD'), (',', ','), ('4', 'CD'), (',', ','), ('5', 'CD'), (',', ','), ('6', 'CD'), (',', ','), ('7', 'CD'), (',', ','), ('10', 'CD'), ('}', 'SYM'), ('10', 'CD'), ('9', 'CD'), ('States', 'NNPS'), ('a', 'DT'), ('b', 'NN'), ('A', 'NN'), ('=', 'SYM'), ('{', 'SYM'), ('0', 'CD'), (',', ','), ('1,2,', 'CD'), ('4,7', 'CD'), ('}', 'SYM'), ('B', 'CD'), ('C', 'NN'), ('B', 'NN'), ('=', 'SYM'), ('{', 'SYM'), ('1,2,3,', 'CD'), ('4,', 'CD'), ('6,', 'CD'), ('7,8', 'CD'), ('}', 'SYM'), ('B', 'CD'), ('D', 'NN'), ('C', 'NN'), ('=', 'SYM'), ('{', ':'), ('1,2,4,', 'CD'), ('5', 'CD'), (',', ','), ('6,7', 'CD'), ('}', 'SYM'), ('B', 'CD'), ('C', 'NN'), ('D', 'NN'), ('=', 'SYM'), ('{', 'SYM'), ('1,2,4,5,6,7,9', 'CD'), ('}', '-LRB-'), ('B', 'NN'), ('E', 'NN'), ('E', 'NN'), ('=', 'SYM'), ('{', ':'), ('1,2,4,5,6,7,10', 'CD'), ('}', '-LRB-'), ('B', 'NN'), ('Prof.', 'NN'), ('Dixita', 'NN'), ('B', 'NN'), ('Kagathara', 'NN'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('2', 'CD'), ('–', ':'), ('Lexical', 'JJ'), ('Analyzer', 'NN'), ('‹#›', 'NN'), ('Conversion', 'NN'), ('from', 'IN'), ('NFA', 'NN'), ('to', 'IN'), ('DFA', 'NN'), ('1', 'CD'), ('2', 'CD'), ('5', 'CD'), ('3', 'CD'), ('4', 'CD'), ('6', 'CD'), ('7', 'CD'), ('8', 'CD'), ('0', 'CD'), ('𝜖', 'NN'), ('a', 'DT'), ('b', 'NN'), ('𝜖', 'NN'), ('a', 'DT'), ('b', 'NN'), ('b', 'NN'), ('𝜖', 'NN'), ('𝜖', 'NN'), ('𝜖', 'NN'), ('𝜖', 'NN'), ('𝜖', ','), ('𝜖', ','), ('Move', 'NN'), ('(', '-LRB-'), ('E', 'NN'), (',', ','), ('b', 'NN'), (')', '-RRB-'), ('=', ',')] 

 Lemmas are: 
>> [('D', 'D'), ('=', '='), ('{', '{'), ('1,2,4,5,6,7,9', '1224567,9'), ('}', '}'), ('b', 'b'), ('10', '10'), ('9', '9'), ('States', 'State'), ('a', 'a'), ('b', 'b'), ('A', 'a'), ('=', '='), ('{', '{'), ('0', '0'), (',', ','), ('1,2,', '122'), ('4,7', '4,7'), ('}', '}'), ('B', 'b'), ('C', 'c'), ('B', 'b'), ('=', '='), ('{', '{'), ('1,2,3,', '1223'), ('4,', '4,'), ('6,', '6,'), ('7,8', '7,8'), ('}', '}'), ('B', 'b'), ('D', 'd'), ('C', 'c'), ('=', '='), ('{', '{'), ('1,2,4,', '1224'), ('5', '5'), (',', ','), ('6,7', '6,7'), ('}', '}'), ('D', 'd'), ('=', '='), ('{', '{'), ('1,2,4,5,6,7,9', '1224567,9'), ('}', '}'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('2', '2'), ('–', '-'), ('Lexical', 'lexical'), ('Analyzer', 'analyzer'), ('‹#›', '‹#›'), ('Conversion', 'conversion'), ('from', 'from'), ('NFA', 'nfa'), ('to', 'to'), ('DFA', 'dfa'), ('1', '1'), ('2', '2'), ('5', '5'), ('3', '3'), ('4', '4'), ('6', '6'), ('7', '7'), ('8', '8'), ('0', '0'), ('𝜖', '𝜖'), ('a', 'a'), ('b', 'b'), ('𝜖', '𝜖'), ('a', 'a'), ('b', 'b'), ('𝜖', '𝜖'), ('𝜖', '𝜖'), ('𝜖', '𝜖'), ('𝜖', '𝜖'), ('𝜖', '𝜖'), ('𝜖', "''"), ('Move', 'move'), ('(', '('), ('C', 'c'), (',', ','), ('a', 'a'), (')', ')'), ('=', '='), ('{', '{'), ('3,8', '3,8'), ('}', '}'), ('𝜖-', '𝜖-'), ('Closure', 'closure'), ('(', '('), ('Move', 'move'), ('(', '('), ('C', 'c'), (',', ','), ('a', 'a'), (')', ')'), (')', ')'), ('=', '='), ('{', '{'), ('3', '3'), (',', ','), ('6', '6'), (',', ','), ('7', '7'), (',', ','), ('1', '1'), (',', ','), ('2', '2'), (',', ','), ('4', '4'), (',', ','), ('8', '8'), ('}', '}'), ('----', '----'), ('B', 'b'), ('=', '='), ('{', '{'), ('1,2,3,', '1223'), ('4,', '4,'), ('6,7,8', '6778'), ('}', '}'), ('C=', 'c='), ('{', '{'), ('1', '1'), (',', ','), ('2', '2'), (',', ','), ('4', '4'), (',', ','), ('5', '5'), (',', ','), ('6', '6'), (',7', ',7'), ('}', '}'), ('b', 'b'), ('10', '10'), ('9', '9'), ('States', 'State'), ('a', 'a'), ('b', 'b'), ('A', 'a'), ('=', '='), ('{', '{'), ('0', '0'), (',', ','), ('1,2,', '122'), ('4,7', '4,7'), ('}', '}'), ('B', 'b'), ('C', 'c'), ('B', 'b'), ('=', '='), ('{', '{'), ('1,2,3,', '1223'), ('4,', '4,'), ('6,', '6,'), ('7,8', '7,8'), ('}', '}'), ('B', 'b'), ('D', 'd'), ('C', 'c'), ('=', '='), ('{', '{'), ('1,2,4,', '1224'), ('5', '5'), (',', ','), ('6,7', '6,7'), ('}', '}'), ('B', 'b'), ('D', 'd'), ('=', '='), ('{', '{'), ('1,2,4,5,6,7,9', '1224567,9'), ('}', '}'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('2', '2'), ('–', '-'), ('Lexical', 'lexical'), ('Analyzer', 'analyzer'), ('‹#›', '‹#›'), ('Conversion', 'conversion'), ('from', 'from'), ('NFA', 'nfa'), ('to', 'to'), ('DFA', 'dfa'), ('1', '1'), ('2', '2'), ('5', '5'), ('3', '3'), ('4', '4'), ('6', '6'), ('7', '7'), ('8', '8'), ('0', '0'), ('𝜖', '𝜖'), ('a', 'a'), ('b', 'b'), ('𝜖', '𝜖'), ('a', 'a'), ('b', 'b'), ('b', 'b'), ('𝜖', "''"), ('𝜖', '𝜖'), ('𝜖', '𝜖'), ('𝜖', '𝜖'), ('𝜖', '𝜖'), ('𝜖', '𝜖'), ('Move', 'move'), ('(', '('), ('C', 'c'), (',', ','), ('b', 'b'), (')', ')'), ('=', '='), ('{', '{'), ('5', '5'), ('}', '}'), ('𝜖-', '𝜖-'), ('Closure', 'closure'), ('(', '('), ('Move', 'move'), ('(', '('), ('C', 'c'), (',', ','), ('b', 'b'), (')', ')'), (')', ')'), ('=', '='), ('{', '{'), ('5', '5'), (',', ','), ('6', '6'), (',', ','), ('7', '7'), (',', ','), ('1', '1'), (',', ','), ('2', '2'), (',', ','), ('4', '4'), ('}', '}'), ('----', '----'), ('C', 'c'), ('=', '='), ('{', '{'), ('1,2,4,5,', '12245,'), ('6,7', '6,7'), ('}', '}'), ('C=', 'c='), ('{', '{'), ('1', '1'), (',', ','), ('2', '2'), (',', ','), ('4', '4'), (',', ','), ('5', '5'), (',', ','), ('6', '6'), (',', ','), ('7', '7'), ('}', '}'), ('10', '10'), ('9', '9'), ('States', 'State'), ('a', 'a'), ('b', 'b'), ('A', 'a'), ('=', '='), ('{', '{'), ('0', '0'), (',', ','), ('1,2,', '122'), ('4,7', '4,7'), ('}', '}'), ('B', 'b'), ('C', 'c'), ('B', 'b'), ('=', '='), ('{', '{'), ('1,2,3,', '1223'), ('4,', '4,'), ('6,', '6,'), ('7,8', '7,8'), ('}', '}'), ('B', 'b'), ('D', 'd'), ('C', 'c'), ('=', '='), ('{', '{'), ('1,2,4,', '1224'), ('5', '5'), (',', ','), ('6,7', '6,7'), ('}', '}'), ('B', 'b'), ('C', 'c'), ('D', 'd'), ('=', '='), ('{', '{'), ('1,2,4,5,6,7,9', '1224567,9'), ('}', '}'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('2', '2'), ('–', '-'), ('Lexical', 'lexical'), ('Analyzer', 'analyzer'), ('‹#›', '‹#›'), ('Conversion', 'conversion'), ('from', 'from'), ('NFA', 'nfa'), ('to', 'to'), ('DFA', 'dfa'), ('1', '1'), ('2', '2'), ('5', '5'), ('3', '3'), ('4', '4'), ('6', '6'), ('7', '7'), ('8', '8'), ('0', '0'), ('𝜖', '𝜖'), ('a', 'a'), ('b', 'b'), ('𝜖', '𝜖'), ('a', 'a'), ('b', 'b'), ('b', 'b'), ('𝜖', "''"), ('𝜖', '𝜖'), ('𝜖', '𝜖'), ('𝜖', '𝜖'), ('𝜖', "''"), ('𝜖', "''"), ('Move', 'move'), ('(', '('), ('D', 'd'), (',', ','), ('a', 'a'), (')', ')'), ('=', '='), ('{', '{'), ('3,8', '3,8'), ('}', '}'), ('𝜖-', '𝜖-'), ('Closure', 'closure'), ('(', '('), ('Move', 'move'), ('(', '('), ('D', 'd'), (',', ','), ('a', 'a'), (')', ')'), (')', ')'), ('=', '='), ('{', '{'), ('3', '3'), (',', ','), ('6', '6'), (',', ','), ('7', '7'), (',', ','), ('1', '1'), (',', ','), ('2', '2'), (',', ','), ('4', '4'), (',', ','), ('8', '8'), ('}', '}'), ('----', '----'), ('B', 'b'), ('=', '='), ('{', '{'), ('1,2,3,', '1223'), ('4,', '4,'), ('6,7,8', '6778'), ('}', '}'), ('D=', 'd='), ('{', '{'), ('1', '1'), (',', ','), ('2', '2'), (',', ','), ('4', '4'), (',', ','), ('5', '5'), (',', ','), ('6', '6'), (',', ','), ('7', '7'), (',', ','), ('9', '9'), ('}', '}'), ('10', '10'), ('9', '9'), ('States', 'State'), ('a', 'a'), ('b', 'b'), ('A', 'a'), ('=', '='), ('{', '{'), ('0', '0'), (',', ','), ('1,2,', '122'), ('4,7', '4,7'), ('}', '}'), ('B', 'b'), ('C', 'c'), ('B', 'b'), ('=', '='), ('{', '{'), ('1,2,3,', '1223'), ('4,', '4,'), ('6,', '6,'), ('7,8', '7,8'), ('}', '}'), ('B', 'b'), ('D', 'd'), ('C', 'c'), ('=', '='), ('{', '{'), ('1,2,4,', '1224'), ('5', '5'), (',', ','), ('6,7', '6,7'), ('}', '}'), ('B', 'b'), ('C', 'c'), ('D', 'd'), ('=', '='), ('{', '{'), ('1,2,4,5,6,7,9', '1224567,9'), ('}', '}'), ('B', 'b'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('2', '2'), ('–', '-'), ('Lexical', 'lexical'), ('Analyzer', 'analyzer'), ('‹#›', '‹#›'), ('Conversion', 'conversion'), ('from', 'from'), ('NFA', 'nfa'), ('to', 'to'), ('DFA', 'dfa'), ('1', '1'), ('2', '2'), ('5', '5'), ('3', '3'), ('4', '4'), ('6', '6'), ('7', '7'), ('8', '8'), ('0', '0'), ('𝜖', '𝜖'), ('a', 'a'), ('b', 'b'), ('𝜖', '𝜖'), ('a', 'a'), ('b', 'b'), ('b', 'b'), ('𝜖', "''"), ('𝜖', '𝜖'), ('𝜖', '𝜖'), ('𝜖', '𝜖'), ('𝜖', "''"), ('𝜖', "''"), ('Move', 'move'), ('(', '('), ('D', 'd'), (',', ','), ('b', 'b'), (')', ')'), ('=', '='), ('{', '{'), ('5,10', '5100'), ('}', '}'), ('𝜖-', '𝜖-'), ('Closure', 'closure'), ('(', '('), ('Move', 'move'), ('(', '('), ('D', 'd'), (',', ','), ('b', 'b'), (')', ')'), (')', ')'), ('=', '='), ('{', '{'), ('5', '5'), (',', ','), ('6', '6'), (',', ','), ('7', '7'), (',', ','), ('1', '1'), (',', ','), ('2', '2'), (',', ','), ('4', '4'), (',', ','), ('10', '10'), ('}', '}'), ('----', '----'), ('E', 'e'), ('=', '='), ('{', '{'), ('1,2,4,5,6,7,10', '1224566,10'), ('}', '}'), ('D=', 'd='), ('{', '{'), ('1', '1'), (',', ','), ('2', '2'), (',', ','), ('4', '4'), (',', ','), ('5', '5'), (',', ','), ('6', '6'), (',', ','), ('7', '7'), (',', ','), ('9', '9'), ('}', '}'), ('10', '10'), ('9', '9'), ('States', 'State'), ('a', 'a'), ('b', 'b'), ('A', 'a'), ('=', '='), ('{', '{'), ('0', '0'), (',', ','), ('1,2,', '122'), ('4,7', '4,7'), ('}', '}'), ('B', 'b'), ('C', 'c'), ('B', 'b'), ('=', '='), ('{', '{'), ('1,2,3,', '1223'), ('4,', '4,'), ('6,', '6,'), ('7,8', '7,8'), ('}', '}'), ('B', 'b'), ('D', 'd'), ('C', 'c'), ('=', '='), ('{', '{'), ('1,2,4,', '1224'), ('5', '5'), (',', ','), ('6,7', '6,7'), ('}', '}'), ('B', 'b'), ('C', 'c'), ('D', 'd'), ('=', '='), ('{', '{'), ('1,2,4,5,6,7,9', '1224567,9'), ('}', '}'), ('B', 'b'), ('E', 'e'), ('E', 'e'), ('=', '='), ('{', '{'), ('1,2,4,5,6,7,10', '1224566,10'), ('}', '}'), ('Prof.', 'Prof.'), ('Dixita', 'dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('2', '2'), ('–', '-'), ('Lexical', 'lexical'), ('Analyzer', 'analyzer'), ('‹#›', '‹#›'), ('Conversion', 'conversion'), ('from', 'from'), ('NFA', 'nfa'), ('to', 'to'), ('DFA', 'dfa'), ('1', '1'), ('2', '2'), ('5', '5'), ('3', '3'), ('4', '4'), ('6', '6'), ('7', '7'), ('8', '8'), ('0', '0'), ('𝜖', '𝜖'), ('a', 'a'), ('b', 'b'), ('𝜖', '𝜖'), ('a', 'a'), ('b', 'b'), ('b', 'b'), ('𝜖', '𝜖'), ('𝜖', '𝜖'), ('𝜖', '𝜖'), ('𝜖', '𝜖'), ('𝜖', "''"), ('𝜖', "''"), ('Move', 'move'), ('(', '('), ('E', 'e'), (',', ','), ('a', 'a'), (')', ')'), ('=', '='), ('{', '{'), ('3,8', '3,8'), ('}', '}'), ('𝜖-', '𝜖-'), ('Closure', 'closure'), ('(', '('), ('Move', 'move'), ('(', '('), ('E', 'e'), (',', ','), ('a', 'a'), (')', ')'), (')', ')'), ('=', '='), ('{', '{'), ('3', '3'), (',', ','), ('6', '6'), (',', ','), ('7', '7'), (',', ','), ('1', '1'), (',', ','), ('2', '2'), (',', ','), ('4', '4'), (',', ','), ('8', '8'), ('}', '}'), ('----', '----'), ('B', 'b'), ('=', '='), ('{', '{'), ('1,2,3,', '1223'), ('4,', '4,'), ('6,7,8', '6778'), ('}', '}'), ('E=', 'e='), ('{', '{'), ('1', '1'), (',', ','), ('2', '2'), (',', ','), ('4', '4'), (',', ','), ('5', '5'), (',', ','), ('6', '6'), (',', ','), ('7', '7'), (',', ','), ('10', '10'), ('}', '}'), ('10', '10'), ('9', '9'), ('States', 'State'), ('a', 'a'), ('b', 'b'), ('A', 'a'), ('=', '='), ('{', '{'), ('0', '0'), (',', ','), ('1,2,', '122'), ('4,7', '4,7'), ('}', '}'), ('B', 'b'), ('C', 'c'), ('B', 'b'), ('=', '='), ('{', '{'), ('1,2,3,', '1223'), ('4,', '4,'), ('6,', '6,'), ('7,8', '7,8'), ('}', '}'), ('B', 'b'), ('D', 'd'), ('C', 'c'), ('=', '='), ('{', '{'), ('1,2,4,', '1224'), ('5', '5'), (',', ','), ('6,7', '6,7'), ('}', '}'), ('B', 'b'), ('C', 'c'), ('D', 'd'), ('=', '='), ('{', '{'), ('1,2,4,5,6,7,9', '1224567,9'), ('}', '}'), ('B', 'b'), ('E', 'e'), ('E', 'e'), ('=', '='), ('{', '{'), ('1,2,4,5,6,7,10', '1224566,10'), ('}', '}'), ('B', 'b'), ('Prof.', 'Prof.'), ('Dixita', 'dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('2', '2'), ('–', '-'), ('Lexical', 'lexical'), ('Analyzer', 'analyzer'), ('‹#›', '‹#›'), ('Conversion', 'conversion'), ('from', 'from'), ('NFA', 'nfa'), ('to', 'to'), ('DFA', 'dfa'), ('1', '1'), ('2', '2'), ('5', '5'), ('3', '3'), ('4', '4'), ('6', '6'), ('7', '7'), ('8', '8'), ('0', '0'), ('𝜖', '𝜖'), ('a', 'a'), ('b', 'b'), ('𝜖', '𝜖'), ('a', 'a'), ('b', 'b'), ('b', 'b'), ('𝜖', '𝜖'), ('𝜖', '𝜖'), ('𝜖', '𝜖'), ('𝜖', '𝜖'), ('𝜖', "''"), ('𝜖', "''"), ('Move', 'move'), ('(', '('), ('E', 'e'), (',', ','), ('b', 'b'), (')', ')'), ('=', '=')] 

 Dependency tags are: 
>> [(('D', 'root'), 'root'), (('=', 'D'), 'punct'), (('{', 'D'), 'punct'), (('1,2,4,5,6,7,9', 'D'), 'nummod'), (('}', 'b'), 'punct'), (('b', '1,2,4,5,6,7,9'), 'nmod'), (('10', 'States'), 'nummod'), (('9', 'States'), 'nummod'), (('States', 'b'), 'conj'), (('a', 'b'), 'compound'), (('b', 'States'), 'conj'), (('A', 'b'), 'punct'), (('=', 'b'), 'conj'), (('{', '0'), 'dep'), (('0', '='), 'dep'), ((',', '0'), 'punct'), (('1,2,', '0'), 'dep'), (('4,7', '0'), 'dep'), (('}', 'B'), 'dep'), (('B', 'C'), 'dep'), (('C', 'B'), 'compound'), (('B', '='), 'nsubj'), (('=', 'b'), 'conj'), (('{', '4,'), 'dep'), (('1,2,3,', '4,'), 'dep'), (('4,', '0'), 'dep'), (('6,', '7,8'), 'dep'), (('7,8', '4,'), 'dep'), (('}', 'D'), 'punct'), (('B', 'D'), 'dep'), (('D', '='), 'dep'), (('C', '='), 'nsubj'), (('=', 'D'), 'conj'), (('{', '5'), 'punct'), (('1,2,4,', '5'), 'dep'), (('5', '='), 'dep'), ((',', '6,7'), 'punct'), (('6,7', '5'), 'dep'), (('}', '='), 'punct'), (('D', '='), 'nsubj'), (('=', 'b'), 'flat:foreign'), (('{', '='), 'punct'), (('1,2,4,5,6,7,9', 'Prof.'), 'dep'), (('}', 'Prof.'), 'punct'), (('Prof.', 'B'), 'compound'), (('Dixita', 'B'), 'compound'), (('B', '#'), 'compound'), (('Kagathara', '#'), 'compound'), (('#', 'CD'), 'compound'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', 'Analyzer'), 'dep'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', '='), 'dep'), (('2', 'CD'), 'dep'), (('–', 'Analyzer'), 'punct'), (('Lexical', 'Analyzer'), 'amod'), (('Analyzer', 'b'), 'conj'), (('‹#›', 'Conversion'), 'compound'), (('Conversion', 'Analyzer'), 'conj'), (('from', 'NFA'), 'case'), (('NFA', 'Conversion'), 'nmod'), (('to', 'DFA'), 'case'), (('DFA', 'NFA'), 'nmod'), (('1', 'DFA'), 'dep'), (('2', 'DFA'), 'dep'), (('5', 'DFA'), 'dep'), (('3', 'DFA'), 'dep'), (('4', '6'), 'dep'), (('6', '8'), 'compound'), (('7', '8'), 'compound'), (('8', 'Analyzer'), 'dep'), (('0', 'Unit'), 'dep'), (('𝜖', 'b'), 'compound'), (('a', 'b'), 'compound'), (('b', 'Analyzer'), 'conj'), (('𝜖', 'b'), 'compound'), (('a', 'b'), 'compound'), (('b', '𝜖'), 'compound'), (('𝜖', '𝜖'), 'compound'), (('𝜖', '𝜖'), 'compound'), (('𝜖', '𝜖'), 'compound'), (('𝜖', '𝜖'), 'compound'), (('𝜖', 'Unit'), 'conj'), (('𝜖', '𝜖'), 'punct'), (('Move', 'b'), 'conj'), (('(', 'C'), 'punct'), (('C', 'Closure'), 'dep'), ((',', 'a'), 'punct'), (('a', 'C'), 'dep'), ((')', 'a'), 'punct'), (('=', '3,8'), 'punct'), (('{', 'b'), 'punct'), (('3,8', 'Closure'), 'dep'), (('}', 'b'), 'punct'), (('𝜖-', 'Closure'), 'compound'), (('Closure', 'D'), 'conj'), (('(', 'C'), 'punct'), (('Move', 'C'), 'conj'), (('(', 'a'), 'punct'), (('C', 'D'), 'conj'), ((',', 'a'), 'punct'), (('a', 'C'), 'dep'), ((')', 'a'), 'punct'), ((')', 'a'), 'punct'), (('=', 'b'), 'conj'), (('{', '3'), 'punct'), (('3', 'b'), 'dep'), ((',', '6'), 'punct'), (('6', '3'), 'conj'), ((',', '7'), 'punct'), (('7', 'b'), 'conj'), ((',', '1'), 'punct'), (('1', '7'), 'dep'), ((',', '2'), 'punct'), (('2', '1'), 'conj'), ((',', '4'), 'punct'), (('4', '8'), 'dep'), ((',', '8'), 'punct'), (('8', '2'), 'dep'), (('}', '4'), 'punct'), (('----', 'B'), 'cc'), (('B', '='), 'nsubj'), (('=', '='), 'conj'), (('{', '4,'), 'advmod'), (('1,2,3,', '4,'), 'compound'), (('4,', 'C='), 'dep'), (('6,7,8', 'C='), 'dep'), (('}', 'C='), 'punct'), (('C=', 'b'), 'conj'), (('{', '1'), 'punct'), (('1', 'b'), 'conj'), ((',', '2'), 'punct'), (('2', '1'), 'conj'), ((',', '4'), 'punct'), (('4', '5'), 'dep'), ((',', '5'), 'punct'), (('5', '6'), 'dep'), ((',', '6'), 'punct'), (('6', ',7'), 'dep'), ((',7', '='), 'dep'), (('}', 'b'), 'punct'), (('b', 'b'), 'conj'), (('10', 'States'), 'nummod'), (('9', 'States'), 'nummod'), (('States', 'b'), 'compound'), (('a', 'b'), 'compound'), (('b', 'b'), 'dep'), (('A', '='), 'nsubj'), (('=', 'b'), 'conj'), (('{', '='), 'dep'), (('0', '{'), 'dep'), ((',', '4,7'), 'punct'), (('1,2,', '4,7'), 'compound'), (('4,7', 'B'), 'compound'), (('}', 'B'), 'compound'), (('B', 'b'), 'conj'), (('C', 'B'), 'dep'), (('B', '='), 'nsubj'), (('=', '='), 'advcl'), (('{', '='), 'dep'), (('1,2,3,', '7,8'), 'compound'), (('4,', '7,8'), 'compound'), (('6,', '7,8'), 'compound'), (('7,8', 'D'), 'nummod'), (('}', 'B'), 'compound'), (('B', 'D'), 'nummod'), (('D', '='), 'nsubj'), (('C', 'D'), 'conj'), (('=', 'b'), 'conj'), (('{', '5'), 'punct'), (('1,2,4,', '5'), 'compound'), (('5', '='), 'dep'), ((',', '6,7'), 'punct'), (('6,7', 'b'), 'conj'), (('}', 'B'), 'punct'), (('B', 'D'), 'nummod'), (('D', 'b'), 'conj'), (('=', '='), 'conj'), (('{', '1,2,4,5,6,7,9'), 'punct'), (('1,2,4,5,6,7,9', 'Prof.'), 'dep'), (('}', 'D'), 'punct'), (('Prof.', '#'), 'compound'), (('Dixita', 'B'), 'compound'), (('B', '#'), 'compound'), (('Kagathara', '#'), 'compound'), (('#', 'CD'), 'compound'), (('2170701', '#'), 'compound'), (('(', 'CD'), 'punct'), (('CD', 'D'), 'conj'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', 'CD'), 'conj'), (('2', 'D'), 'dep'), (('–', 'b'), 'punct'), (('Lexical', 'Analyzer'), 'amod'), (('Analyzer', 'D'), 'conj'), (('‹#›', 'Analyzer'), 'compound'), (('Conversion', 'Analyzer'), 'conj'), (('from', 'NFA'), 'case'), (('NFA', 'Conversion'), 'nmod'), (('to', 'DFA'), 'case'), (('DFA', '1'), 'compound'), (('1', '5'), 'compound'), (('2', '5'), 'compound'), (('5', '3'), 'nmod'), (('3', '4'), 'nmod'), (('4', '6'), 'compound'), (('6', '7'), 'compound'), (('7', '8'), 'compound'), (('8', 'b'), 'nummod'), (('0', 'b'), 'nummod'), (('𝜖', 'Move'), 'compound'), (('a', 'b'), 'compound'), (('b', 'b'), 'compound'), (('𝜖', 'b'), 'compound'), (('a', 'b'), 'compound'), (('b', 'b'), 'compound'), (('b', 'Analyzer'), 'conj'), (('𝜖', '='), 'punct'), (('𝜖', '𝜖'), 'compound'), (('𝜖', '='), 'conj'), (('𝜖', '𝜖'), 'compound'), (('𝜖', 'D'), 'conj'), (('𝜖', 'Move'), 'compound'), (('Move', 'C'), 'nsubj'), (('(', 'C'), 'punct'), (('C', '='), 'dep'), ((',', 'b'), 'punct'), (('b', 'C'), 'dep'), ((')', 'C'), 'punct'), (('=', 'b'), 'conj'), (('{', '5'), 'punct'), (('5', '𝜖-'), 'compound'), (('}', '5'), 'punct'), (('𝜖-', 'Closure'), 'nummod'), (('Closure', '='), 'nsubj'), (('(', 'C'), 'punct'), (('Move', 'C'), 'compound'), (('(', 'C'), 'punct'), (('C', '5'), 'conj'), ((',', 'b'), 'punct'), (('b', 'C'), 'conj'), ((')', 'C'), 'punct'), ((')', 'C'), 'punct'), (('=', '='), 'conj'), (('{', '5'), 'punct'), (('5', '='), 'dep'), ((',', '6'), 'punct'), (('6', '5'), 'conj'), ((',', '7'), 'punct'), (('7', '5'), 'conj'), ((',', '1'), 'punct'), (('1', '5'), 'conj'), ((',', '2'), 'punct'), (('2', '5'), 'conj'), ((',', '4'), 'punct'), (('4', '2'), 'conj'), (('}', '1'), 'punct'), (('----', 'C'), 'cc'), (('C', '='), 'nsubj'), (('=', '6'), 'conj'), (('{', '6,7'), 'compound'), (('1,2,4,5,', '6,7'), 'compound'), (('6,7', '1'), 'dep'), (('}', 'C='), 'compound'), (('C=', '6,7'), 'compound'), (('{', '1'), 'punct'), (('1', '='), 'dep'), ((',', '2'), 'punct'), (('2', '='), 'dep'), ((',', '4'), 'punct'), (('4', '1'), 'conj'), ((',', '5'), 'punct'), (('5', '='), 'dep'), ((',', '6'), 'punct'), (('6', '2'), 'conj'), ((',', '7'), 'punct'), (('7', '5'), 'conj'), (('}', '10'), 'punct'), (('10', '9'), 'compound'), (('9', 'States'), 'nummod'), (('States', '='), 'nsubj'), (('a', 'b'), 'compound'), (('b', 'States'), 'compound'), (('A', '='), 'nsubj'), (('=', 'D'), 'conj'), (('{', '='), 'advmod'), (('0', '='), 'nummod'), ((',', '4,7'), 'punct'), (('1,2,', '4,7'), 'compound'), (('4,7', 'B'), 'compound'), (('}', 'B'), 'compound'), (('B', '0'), 'compound'), (('C', 'B'), 'compound'), (('B', '='), 'nsubj'), (('=', 'D'), 'conj'), (('{', '='), 'dep'), (('1,2,3,', '6,'), 'compound'), (('4,', '7,8'), 'compound'), (('6,', '7,8'), 'compound'), (('7,8', 'D'), 'nummod'), (('}', 'B'), 'compound'), (('B', 'D'), 'nummod'), (('D', '='), 'nsubj'), (('C', '='), 'nsubj'), (('=', '='), 'advcl'), (('{', '5'), 'punct'), (('1,2,4,', '5'), 'compound'), (('5', '6,7'), 'dep'), ((',', '6,7'), 'punct'), (('6,7', 'B'), 'dep'), (('}', 'B'), 'punct'), (('B', 'C'), 'nummod'), (('C', '='), 'nsubj'), (('D', '='), 'nsubj'), (('=', '='), 'conj'), (('{', '1,2,4,5,6,7,9'), 'punct'), (('1,2,4,5,6,7,9', '='), 'nummod'), (('}', 'Prof.'), 'punct'), (('Prof.', '#'), 'compound'), (('Dixita', 'B'), 'compound'), (('B', '#'), 'compound'), (('Kagathara', '#'), 'compound'), (('#', 'CD'), 'compound'), (('2170701', '#'), 'compound'), (('(', 'CD'), 'punct'), (('CD', 'Unit'), 'compound'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', '='), 'nsubj'), (('2', 'Unit'), 'nummod'), (('–', 'Analyzer'), 'punct'), (('Lexical', 'Analyzer'), 'amod'), (('Analyzer', 'Unit'), 'compound'), (('‹#›', 'Analyzer'), 'compound'), (('Conversion', 'Analyzer'), 'conj'), (('from', 'NFA'), 'case'), (('NFA', 'Conversion'), 'nmod'), (('to', 'DFA'), 'case'), (('DFA', 'NFA'), 'nmod'), (('1', 'DFA'), 'dep'), (('2', '5'), 'compound'), (('5', '3'), 'nmod'), (('3', '4'), 'nmod'), (('4', '6'), 'compound'), (('6', '8'), 'compound'), (('7', '8'), 'compound'), (('8', 'DFA'), 'dep'), (('0', '8'), 'compound'), (('𝜖', 'DFA'), 'conj'), (('a', '𝜖'), 'det'), (('b', '='), 'compound'), (('𝜖', 'b'), 'compound'), (('a', 'b'), 'compound'), (('b', 'b'), 'compound'), (('b', '='), 'dep'), (('𝜖', '6'), 'punct'), (('𝜖', '='), 'dep'), (('𝜖', '𝜖'), 'compound'), (('𝜖', 'DFA'), 'conj'), (('𝜖', 'D'), 'punct'), (('𝜖', 'Analyzer'), 'punct'), (('Move', '='), 'nsubj'), (('(', 'a'), 'punct'), (('D', 'a'), 'dep'), ((',', 'a'), 'punct'), (('a', '='), 'nummod'), ((')', 'a'), 'punct'), (('=', 'D'), 'conj'), (('{', '3,8'), 'punct'), (('3,8', '='), 'nummod'), (('}', 'Closure'), 'punct'), (('𝜖-', 'Closure'), 'compound'), (('Closure', '='), 'nsubj'), (('(', 'D'), 'punct'), (('Move', 'D'), 'compound'), (('(', 'D'), 'punct'), (('D', '='), 'dep'), ((',', 'a'), 'punct'), (('a', 'D'), 'conj'), ((')', 'D'), 'punct'), ((')', 'D'), 'punct'), (('=', '='), 'advcl'), (('{', '3'), 'punct'), (('3', 'Closure'), 'dep'), ((',', '6'), 'punct'), (('6', '3'), 'conj'), ((',', '7'), 'punct'), (('7', '3'), 'conj'), ((',', '1'), 'punct'), (('1', '6'), 'conj'), ((',', '2'), 'punct'), (('2', '6'), 'conj'), ((',', '4'), 'punct'), (('4', '6'), 'conj'), ((',', '8'), 'punct'), (('8', '2'), 'conj'), (('}', 'D='), 'punct'), (('----', 'B'), 'cc'), (('B', '='), 'nsubj'), (('=', '='), 'parataxis'), (('{', '4,'), 'compound'), (('1,2,3,', '4,'), 'compound'), (('4,', '='), 'dep'), (('6,7,8', '4,'), 'compound'), (('}', 'D='), 'punct'), (('D=', '4,'), 'conj'), (('{', '1'), 'punct'), (('1', '='), 'dep'), ((',', '2'), 'punct'), (('2', 'D='), 'conj'), ((',', '4'), 'punct'), (('4', '1'), 'conj'), ((',', '5'), 'punct'), (('5', '1'), 'conj'), ((',', '6'), 'punct'), (('6', '7'), 'compound'), ((',', '7'), 'punct'), (('7', '1'), 'conj'), ((',', '10'), 'punct'), (('9', '10'), 'compound'), (('}', '10'), 'compound'), (('10', 'b'), 'nummod'), (('9', '10'), 'compound'), (('States', '5'), 'dep'), (('a', 'b'), 'compound'), (('b', '='), 'nsubj'), (('A', '='), 'nsubj'), (('=', 'States'), 'parataxis'), (('{', '='), 'dep'), (('0', '='), 'nummod'), ((',', '4,7'), 'punct'), (('1,2,', '4,7'), 'compound'), (('4,7', 'B'), 'compound'), (('}', 'B'), 'compound'), (('B', 'C'), 'nummod'), (('C', '='), 'compound'), (('B', '='), 'nsubj'), (('=', '='), 'parataxis'), (('{', '='), 'dep'), (('1,2,3,', '='), 'nummod'), (('4,', '7,8'), 'compound'), (('6,', '7,8'), 'compound'), (('7,8', 'D'), 'nummod'), (('}', 'B'), 'compound'), (('B', 'D'), 'nummod'), (('D', '='), 'nsubj'), (('C', '='), 'nsubj'), (('=', '='), 'parataxis'), (('{', '5'), 'punct'), (('1,2,4,', '5'), 'compound'), (('5', '='), 'nummod'), ((',', '6,7'), 'punct'), (('6,7', 'C'), 'nummod'), (('}', 'B'), 'punct'), (('B', '='), 'dep'), (('C', '='), 'nsubj'), (('D', '='), 'nsubj'), (('=', '='), 'conj'), (('{', '='), 'punct'), (('1,2,4,5,6,7,9', '='), 'nummod'), (('}', 'B'), 'punct'), (('B', 'Prof.'), 'compound'), (('Prof.', 'B'), 'compound'), (('Dixita', 'B'), 'compound'), (('B', '#'), 'compound'), (('Kagathara', '#'), 'compound'), (('#', '='), 'compound'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', 'Unit'), 'compound'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', '#'), 'conj'), (('2', 'Unit'), 'nummod'), (('–', 'Analyzer'), 'punct'), (('Lexical', 'Analyzer'), 'amod'), (('Analyzer', 'Unit'), 'compound'), (('‹#›', 'Analyzer'), 'compound'), (('Conversion', 'Analyzer'), 'conj'), (('from', 'NFA'), 'case'), (('NFA', 'Conversion'), 'nmod'), (('to', 'DFA'), 'case'), (('DFA', 'NFA'), 'nmod'), (('1', 'DFA'), 'dep'), (('2', '5'), 'compound'), (('5', 'DFA'), 'dep'), (('3', '4'), 'nmod'), (('4', '6'), 'compound'), (('6', '8'), 'compound'), (('7', '8'), 'compound'), (('8', '5'), 'nmod'), (('0', '8'), 'compound'), (('𝜖', '𝜖'), 'compound'), (('a', '𝜖'), 'det'), (('b', '𝜖'), 'compound'), (('𝜖', 'b'), 'compound'), (('a', 'b'), 'compound'), (('b', 'b'), 'compound'), (('b', '𝜖'), 'compound'), (('𝜖', 'b'), 'punct'), (('𝜖', '𝜖'), 'compound'), (('𝜖', 'Move'), 'compound'), (('𝜖', '𝜖'), 'compound'), (('𝜖', '𝜖'), 'punct'), (('𝜖', '𝜖'), 'punct'), (('Move', '='), 'nsubj'), (('(', 'D'), 'punct'), (('D', '='), 'dep'), ((',', 'b'), 'punct'), (('b', 'D'), 'dep'), ((')', 'D'), 'punct'), (('=', 'Analyzer'), 'parataxis'), (('{', '5,10'), 'punct'), (('5,10', '='), 'nummod'), (('}', '5,10'), 'punct'), (('𝜖-', 'Closure'), 'compound'), (('Closure', '='), 'nsubj'), (('(', 'Move'), 'punct'), (('Move', 'D'), 'compound'), (('(', 'D'), 'punct'), (('D', '='), 'dep'), ((',', 'b'), 'punct'), (('b', 'D'), 'conj'), ((')', 'b'), 'punct'), ((')', 'D'), 'punct'), (('=', '='), 'advcl'), (('{', '5'), 'punct'), (('5', '='), 'dep'), ((',', '6'), 'punct'), (('6', '5'), 'conj'), ((',', '7'), 'punct'), (('7', '5'), 'conj'), ((',', '1'), 'punct'), (('1', '5'), 'conj'), ((',', '2'), 'punct'), (('2', '5'), 'conj'), ((',', '4'), 'punct'), (('4', '5'), 'conj'), ((',', '10'), 'punct'), (('10', '}'), 'nummod'), (('}', 'D='), 'conj'), (('----', 'E'), 'cc'), (('E', '='), 'dep'), (('=', '5'), 'conj'), (('{', '='), 'dep'), (('1,2,4,5,6,7,10', '='), 'nummod'), (('}', 'D='), 'punct'), (('D=', '='), 'dep'), (('{', 'D='), 'punct'), (('1', '='), 'dep'), ((',', '2'), 'punct'), (('2', '1'), 'conj'), ((',', '4'), 'punct'), (('4', '1'), 'conj'), ((',', '5'), 'punct'), (('5', '1'), 'conj'), ((',', '6'), 'punct'), (('6', '7'), 'compound'), ((',', '7'), 'punct'), (('7', '5'), 'compound'), ((',', 'States'), 'punct'), (('9', 'States'), 'nummod'), (('}', '9'), 'advmod'), (('10', '9'), 'compound'), (('9', 'States'), 'nummod'), (('States', '5'), 'dep'), (('a', 'b'), 'compound'), (('b', 'States'), 'compound'), (('A', '='), 'nsubj'), (('=', 'b'), 'parataxis'), (('{', '='), 'dep'), (('0', '='), 'nummod'), ((',', '4,7'), 'punct'), (('1,2,', '4,7'), 'compound'), (('4,7', 'C'), 'nummod'), (('}', 'B'), 'compound'), (('B', 'C'), 'nummod'), (('C', '='), 'compound'), (('B', 'C'), 'nsubj'), (('=', '='), 'parataxis'), (('{', '='), 'dep'), (('1,2,3,', '='), 'nummod'), (('4,', '7,8'), 'compound'), (('6,', '7,8'), 'compound'), (('7,8', '='), 'dep'), (('}', 'B'), 'compound'), (('B', 'D'), 'nummod'), (('D', '{'), 'dep'), (('C', 'D'), 'compound'), (('=', 'D'), 'parataxis'), (('{', '='), 'punct'), (('1,2,4,', '='), 'nummod'), (('5', '='), 'nummod'), ((',', '6,7'), 'punct'), (('6,7', 'B'), 'compound'), (('}', 'B'), 'compound'), (('B', '='), 'dep'), (('C', 'B'), 'compound'), (('D', '='), 'nsubj'), (('=', '='), 'parataxis'), (('{', '='), 'dep'), (('1,2,4,5,6,7,9', '='), 'nummod'), (('}', 'B'), 'punct'), (('B', '{'), 'compound'), (('E', 'B'), 'compound'), (('E', 'B'), 'punct'), (('=', 'B'), 'conj'), (('{', '='), 'punct'), (('1,2,4,5,6,7,10', '='), 'nummod'), (('}', 'Prof.'), 'punct'), (('Prof.', 'B'), 'compound'), (('Dixita', 'B'), 'compound'), (('B', '#'), 'compound'), (('Kagathara', '#'), 'compound'), (('#', '='), 'compound'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', '#'), 'dep'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', 'CD'), 'conj'), (('2', 'Unit'), 'nummod'), (('–', 'Analyzer'), 'punct'), (('Lexical', 'Analyzer'), 'amod'), (('Analyzer', 'Unit'), 'compound'), (('‹#›', 'Conversion'), 'compound'), (('Conversion', 'Analyzer'), 'nmod'), (('from', 'NFA'), 'case'), (('NFA', 'Conversion'), 'nmod'), (('to', 'DFA'), 'case'), (('DFA', 'NFA'), 'nmod'), (('1', 'DFA'), 'dep'), (('2', '1'), 'compound'), (('5', '1'), 'nmod'), (('3', '5'), 'nmod'), (('4', '6'), 'compound'), (('6', '3'), 'compound'), (('7', '0'), 'compound'), (('8', '0'), 'compound'), (('0', '𝜖'), 'nummod'), (('𝜖', '5'), 'dep'), (('a', '𝜖'), 'det'), (('b', '𝜖'), 'compound'), (('𝜖', '𝜖'), 'compound'), (('a', 'b'), 'det'), (('b', 'b'), 'compound'), (('b', '𝜖'), 'compound'), (('𝜖', '𝜖'), 'compound'), (('𝜖', '𝜖'), 'compound'), (('𝜖', '𝜖'), 'compound'), (('𝜖', 'Move'), 'compound'), (('𝜖', '𝜖'), 'punct'), (('𝜖', '𝜖'), 'punct'), (('Move', '𝜖'), 'nsubj'), (('(', 'E'), 'punct'), (('E', '='), 'dep'), ((',', 'a'), 'punct'), (('a', '='), 'nummod'), ((')', 'a'), 'punct'), (('=', 'Move'), 'parataxis'), (('{', '='), 'punct'), (('3,8', '='), 'nummod'), (('}', 'Closure'), 'punct'), (('𝜖-', 'Closure'), 'compound'), (('Closure', '='), 'nsubj'), (('(', 'Move'), 'punct'), (('Move', 'Closure'), 'dep'), (('(', 'E'), 'punct'), (('E', 'Move'), 'dep'), ((',', 'a'), 'punct'), (('a', 'E'), 'dep'), ((')', 'a'), 'punct'), ((')', 'Move'), 'punct'), (('=', 'Closure'), 'parataxis'), (('{', '='), 'punct'), (('3', '='), 'nummod'), ((',', '3'), 'punct'), (('6', '3'), 'conj'), ((',', '7'), 'punct'), (('7', '6'), 'compound'), ((',', '='), 'punct'), (('1', '='), 'nummod'), ((',', '1'), 'punct'), (('2', '='), 'nummod'), ((',', '='), 'punct'), (('4', '1'), 'compound'), ((',', '='), 'punct'), (('8', '}'), 'nummod'), (('}', '4'), 'conj'), (('----', 'B'), 'case'), (('B', '='), 'nsubj'), (('=', '}'), 'parataxis'), (('{', '='), 'obj'), (('1,2,3,', '{'), 'nummod'), (('4,', '6,7,8'), 'compound'), (('6,7,8', '='), 'nummod'), (('}', 'E='), 'punct'), (('E=', '='), 'nsubj'), (('{', 'E='), 'compound'), (('1', 'E='), 'nummod'), ((',', '{'), 'punct'), (('2', '{'), 'nummod'), ((',', '{'), 'punct'), (('4', '{'), 'nummod'), ((',', '{'), 'punct'), (('5', '{'), 'nummod'), ((',', '5'), 'punct'), (('6', '5'), 'compound'), ((',', '5'), 'punct'), (('7', '5'), 'compound'), ((',', '7'), 'punct'), (('10', 'States'), 'nummod'), (('}', 'States'), 'compound'), (('10', '9'), 'compound'), (('9', 'States'), 'nummod'), (('States', '5'), 'appos'), (('a', 'b'), 'det'), (('b', '='), 'obl:npmod'), (('A', '='), 'nsubj'), (('=', 'States'), 'parataxis'), (('{', '='), 'obj'), (('0', '='), 'nummod'), ((',', '='), 'punct'), (('1,2,', '0'), 'compound'), (('4,7', 'C'), 'nummod'), (('}', 'C'), 'nummod'), (('B', 'C'), 'nummod'), (('C', 'B'), 'compound'), (('B', '0'), 'appos'), (('=', 'B'), 'parataxis'), (('{', '='), 'obj'), (('1,2,3,', '='), 'nummod'), (('4,', '6,'), 'compound'), (('6,', '7,8'), 'compound'), (('7,8', 'D'), 'nummod'), (('}', 'D'), 'nummod'), (('B', 'D'), 'nummod'), (('D', '{'), 'conj'), (('C', 'D'), 'compound'), (('=', 'D'), 'parataxis'), (('{', '='), 'punct'), (('1,2,4,', '='), 'nummod'), (('5', '='), 'nummod'), ((',', '='), 'punct'), (('6,7', 'C'), 'nummod'), (('}', 'C'), 'nummod'), (('B', 'C'), 'nummod'), (('C', 'D'), 'compound'), (('D', '='), 'nsubj'), (('=', '='), 'conj'), (('{', '='), 'obj'), (('1,2,4,5,6,7,9', '='), 'nummod'), (('}', 'B'), 'punct'), (('B', '='), 'obj'), (('E', 'B'), 'compound'), (('E', 'B'), 'punct'), (('=', 'B'), 'parataxis'), (('{', '='), 'punct'), (('1,2,4,5,6,7,10', 'B'), 'nummod'), (('}', 'B'), 'punct'), (('B', '='), 'obj'), (('Prof.', 'B'), 'compound'), (('Dixita', 'B'), 'compound'), (('B', 'B'), 'compound'), (('Kagathara', '#'), 'compound'), (('#', 'B'), 'compound'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', '#'), 'appos'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', '#'), 'appos'), (('2', 'Unit'), 'nummod'), (('–', 'Analyzer'), 'punct'), (('Lexical', 'Analyzer'), 'amod'), (('Analyzer', 'Unit'), 'compound'), (('‹#›', 'Conversion'), 'compound'), (('Conversion', 'Analyzer'), 'conj'), (('from', 'NFA'), 'case'), (('NFA', 'Conversion'), 'nmod'), (('to', 'DFA'), 'case'), (('DFA', 'Conversion'), 'nmod'), (('1', 'DFA'), 'nummod'), (('2', 'DFA'), 'nummod'), (('5', 'DFA'), 'nummod'), (('3', '𝜖'), 'nummod'), (('4', '8'), 'compound'), (('6', '8'), 'compound'), (('7', '0'), 'compound'), (('8', '0'), 'compound'), (('0', '𝜖'), 'nummod'), (('𝜖', 'DFA'), 'appos'), (('a', 'b'), 'det'), (('b', '𝜖'), 'compound'), (('𝜖', 'b'), 'case'), (('a', 'b'), 'det'), (('b', 'b'), 'compound'), (('b', 'b'), 'appos'), (('𝜖', '𝜖'), 'case'), (('𝜖', '𝜖'), 'det'), (('𝜖', '𝜖'), 'compound'), (('𝜖', 'b'), 'nmod'), (('𝜖', '𝜖'), 'punct'), (('𝜖', '𝜖'), 'punct'), (('Move', 'b'), 'acl:relcl'), (('(', 'E'), 'punct'), (('E', 'Move'), 'appos'), ((',', 'E'), 'punct'), (('b', 'E'), 'appos'), ((')', 'E'), 'punct'), (('=', 'Conversion'), 'punct')]

 Named Entities are: 
>> [('2170701', 'CARDINAL'), ('5', 'CARDINAL'), ('2170701', 'CARDINAL'), ('3', 'CARDINAL'), ('2170701', 'CARDINAL')]

========================== Sentence 82 ===========================

 {5} 𝜖- Closure(Move(E,b))=  {5,6,7,1,2,4} ---- C    = {1,2,4,5,6,7} 	States	a	b  	A = {0,1,2,4,7}	B	C       	B = {1,2,3,4,6,7,8}	B	D  	C = {1,2,4,5,6,7}	B	C   E= {1, 2, 4, 5, 6, 7, 10} 	D = {1,2,4,5,6,7,9}	B	E  	E = {1,2,4,5,6,7,10}	B	C   10  9     Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Conversion from NFA to DFA    a b a b a    b a b b a Transition Table DFA Note:  Accepting state in NFA is 10 10 is element of E  So, E is acceptance state in DFA 	States	a	b  	A = {0,1,2,4,7}	B	C  	B = {1,2,3,4,6,7,8}	B	D  	C = {1,2,4,5,6,7}	B	C  	D = {1,2,4,5,6,7,9}	B	E  	E = {1,2,4,5,6,7,10}	B	C     Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Exercise Convert following regular expression to DFA using subset construction method:  (a+b)*a(a+b) (a+b)*ab*a     Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  DFA optimization        DFA optimization Construct an initial partition  of the set of states with two groups: the accepting states  and the non-accepting states . 

Tokens are: 
>> ['{', '5', '}', '𝜖-', 'Closure', '(', 'Move', '(', 'E', ',', 'b', ')', ')', '=', '{', '5', ',6,', '7,', '1,2,4', '}', '----', 'C', '=', '{', '1,2,4,5,6,7', '}', 'States', 'a', 'b', 'A', '=', '{', '0', ',', '1,2,', '4,7', '}', 'B', 'C', 'B', '=', '{', '1,2,3,', '4,', '6,', '7,8', '}', 'B', 'D', 'C', '=', '{', '1,2,4,', '5', ',', '6,7', '}', 'B', 'C', 'E=', '{', '1', ',', '2', ',', '4', ',', '5', ',', '6', ',', '7', ',', '10', '}', 'D', '=', '{', '1,2,4,5,6,7,9', '}', 'B', 'E', 'E', '=', '{', '1,2,4,', '5,6,7,10', '}', 'B', 'C', '10', '9', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '2', '–', 'Lexical', 'Analyzer', '‹#›', 'Conversion', 'from', 'NFA', 'to', 'DFA', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b', 'b', 'a', 'Transition', 'Table', 'DFA', 'Note', ':', 'Accepting', 'state', 'in', 'NFA', 'is', '10', '10', 'is', 'element', 'of', 'E', 'So', ',', 'E', 'is', 'acceptance', 'state', 'in', 'DFA', 'States', 'a', 'b', 'A', '=', '{', '0', ',', '1,2,', '4,7', '}', 'B', 'C', 'B', '=', '{', '1,2,3,', '4,', '6,', '7,8', '}', 'B', 'D', 'C', '=', '{', '1,2,4,', '5', ',', '6,7', '}', 'B', 'C', 'D', '=', '{', '1,2,4,5,6,7,9', '}', 'B', 'E', 'E', '=', '{', '1,2,4,5,6,7,10', '}', 'B', 'C', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '2', '–', 'Lexical', 'Analyzer', '‹#›', 'Exercise', 'Convert', 'following', 'regular', 'expression', 'to', 'DFA', 'using', 'subset', 'construction', 'method', ':', '(', 'a+b', ')', '*', 'a', '(', 'a+b', ')', '(', 'a+b', ')', '*', 'ab*a', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '2', '–', 'Lexical', 'Analyzer', '‹#›', 'DFA', 'optimization', 'DFA', 'optimization', 'Construct', 'an', 'initial', 'partition', 'of', 'the', 'set', 'of', 'states', 'with', 'two', 'groups', ':', 'the', 'accepting', 'states', 'and', 'the', 'non-accepting', 'states', '.'] 

 UPOS tags are: 
>> [('{', 'PUNCT'), ('5', 'NUM'), ('}', 'PUNCT'), ('𝜖-', 'PROPN'), ('Closure', 'NOUN'), ('(', 'PUNCT'), ('Move', 'NOUN'), ('(', 'PUNCT'), ('E', 'PROPN'), (',', 'PUNCT'), ('b', 'NUM'), (')', 'PUNCT'), (')', 'PUNCT'), ('=', 'SYM'), ('{', 'PUNCT'), ('5', 'NUM'), (',6,', 'NOUN'), ('7,', 'SYM'), ('1,2,4', 'NUM'), ('}', 'PUNCT'), ('----', 'SYM'), ('C', 'NOUN'), ('=', 'SYM'), ('{', 'PUNCT'), ('1,2,4,5,6,7', 'NUM'), ('}', 'PUNCT'), ('States', 'PROPN'), ('a', 'NOUN'), ('b', 'NOUN'), ('A', 'NOUN'), ('=', 'SYM'), ('{', 'SYM'), ('0', 'NUM'), (',', 'PUNCT'), ('1,2,', 'NUM'), ('4,7', 'NUM'), ('}', 'SYM'), ('B', 'NUM'), ('C', 'NOUN'), ('B', 'NOUN'), ('=', 'SYM'), ('{', 'SYM'), ('1,2,3,', 'NUM'), ('4,', 'NUM'), ('6,', 'NUM'), ('7,8', 'NUM'), ('}', 'SYM'), ('B', 'NUM'), ('D', 'NOUN'), ('C', 'NOUN'), ('=', 'SYM'), ('{', 'PUNCT'), ('1,2,4,', 'NUM'), ('5', 'NUM'), (',', 'PUNCT'), ('6,7', 'NUM'), ('}', 'PUNCT'), ('B', 'NUM'), ('C', 'NOUN'), ('E=', 'NOUN'), ('{', 'PUNCT'), ('1', 'NUM'), (',', 'PUNCT'), ('2', 'NUM'), (',', 'PUNCT'), ('4', 'NUM'), (',', 'PUNCT'), ('5', 'NUM'), (',', 'PUNCT'), ('6', 'NUM'), (',', 'PUNCT'), ('7', 'NUM'), (',', 'PUNCT'), ('10', 'NUM'), ('}', 'PUNCT'), ('D', 'NOUN'), ('=', 'SYM'), ('{', 'SYM'), ('1,2,4,5,6,7,9', 'NUM'), ('}', 'PUNCT'), ('B', 'NOUN'), ('E', 'NOUN'), ('E', 'NOUN'), ('=', 'SYM'), ('{', 'SYM'), ('1,2,4,', 'NUM'), ('5,6,7,10', 'NUM'), ('}', 'PUNCT'), ('B', 'NUM'), ('C', 'NOUN'), ('10', 'NUM'), ('9', 'NUM'), ('Prof.', 'NOUN'), ('Dixita', 'PROPN'), ('B', 'NOUN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'ADJ'), ('Analyzer', 'NOUN'), ('‹#›', 'NOUN'), ('Conversion', 'NOUN'), ('from', 'ADP'), ('NFA', 'PROPN'), ('to', 'ADP'), ('DFA', 'PROPN'), ('a', 'DET'), ('b', 'NOUN'), ('a', 'DET'), ('b', 'NOUN'), ('a', 'DET'), ('b', 'NOUN'), ('a', 'DET'), ('b', 'NOUN'), ('b', 'NOUN'), ('a', 'DET'), ('Transition', 'NOUN'), ('Table', 'NOUN'), ('DFA', 'NOUN'), ('Note', 'NOUN'), (':', 'PUNCT'), ('Accepting', 'VERB'), ('state', 'NOUN'), ('in', 'ADP'), ('NFA', 'PROPN'), ('is', 'AUX'), ('10', 'NUM'), ('10', 'NUM'), ('is', 'AUX'), ('element', 'NOUN'), ('of', 'ADP'), ('E', 'PROPN'), ('So', 'ADV'), (',', 'PUNCT'), ('E', 'PROPN'), ('is', 'AUX'), ('acceptance', 'NOUN'), ('state', 'NOUN'), ('in', 'ADP'), ('DFA', 'PROPN'), ('States', 'PROPN'), ('a', 'DET'), ('b', 'NOUN'), ('A', 'NOUN'), ('=', 'SYM'), ('{', 'SYM'), ('0', 'NUM'), (',', 'PUNCT'), ('1,2,', 'NUM'), ('4,7', 'NUM'), ('}', 'SYM'), ('B', 'NUM'), ('C', 'NOUN'), ('B', 'NOUN'), ('=', 'SYM'), ('{', 'PUNCT'), ('1,2,3,', 'NUM'), ('4,', 'NUM'), ('6,', 'NUM'), ('7,8', 'NUM'), ('}', 'PUNCT'), ('B', 'NUM'), ('D', 'NOUN'), ('C', 'NOUN'), ('=', 'SYM'), ('{', 'PUNCT'), ('1,2,4,', 'NUM'), ('5', 'NUM'), (',', 'PUNCT'), ('6,7', 'NUM'), ('}', 'PUNCT'), ('B', 'NUM'), ('C', 'NOUN'), ('D', 'NOUN'), ('=', 'SYM'), ('{', 'PUNCT'), ('1,2,4,5,6,7,9', 'NUM'), ('}', 'PUNCT'), ('B', 'NOUN'), ('E', 'NOUN'), ('E', 'NOUN'), ('=', 'SYM'), ('{', 'PUNCT'), ('1,2,4,5,6,7,10', 'NUM'), ('}', 'PUNCT'), ('B', 'NOUN'), ('C', 'NOUN'), ('Prof.', 'NOUN'), ('Dixita', 'PROPN'), ('B', 'NOUN'), ('Kagathara', 'NOUN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'ADJ'), ('Analyzer', 'NOUN'), ('‹#›', 'NOUN'), ('Exercise', 'NOUN'), ('Convert', 'NOUN'), ('following', 'VERB'), ('regular', 'ADJ'), ('expression', 'NOUN'), ('to', 'ADP'), ('DFA', 'NOUN'), ('using', 'VERB'), ('subset', 'NOUN'), ('construction', 'NOUN'), ('method', 'NOUN'), (':', 'PUNCT'), ('(', 'PUNCT'), ('a+b', 'NUM'), (')', 'PUNCT'), ('*', 'PUNCT'), ('a', 'DET'), ('(', 'PUNCT'), ('a+b', 'NOUN'), (')', 'PUNCT'), ('(', 'PUNCT'), ('a+b', 'NOUN'), (')', 'PUNCT'), ('*', 'PUNCT'), ('ab*a', 'X'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'SYM'), ('Lexical', 'ADJ'), ('Analyzer', 'NOUN'), ('‹#›', 'NOUN'), ('DFA', 'NOUN'), ('optimization', 'NOUN'), ('DFA', 'NOUN'), ('optimization', 'NOUN'), ('Construct', 'VERB'), ('an', 'DET'), ('initial', 'ADJ'), ('partition', 'NOUN'), ('of', 'ADP'), ('the', 'DET'), ('set', 'NOUN'), ('of', 'ADP'), ('states', 'NOUN'), ('with', 'ADP'), ('two', 'NUM'), ('groups', 'NOUN'), (':', 'PUNCT'), ('the', 'DET'), ('accepting', 'VERB'), ('states', 'NOUN'), ('and', 'CCONJ'), ('the', 'DET'), ('non-accepting', 'ADJ'), ('states', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('{', 'NFP'), ('5', 'CD'), ('}', ':'), ('𝜖-', 'NNP'), ('Closure', 'NN'), ('(', '-LRB-'), ('Move', 'NN'), ('(', '-LRB-'), ('E', 'NNP'), (',', ','), ('b', 'CD'), (')', '-RRB-'), (')', '-RRB-'), ('=', 'SYM'), ('{', ':'), ('5', 'CD'), (',6,', 'NN'), ('7,', 'SYM'), ('1,2,4', 'CD'), ('}', ':'), ('----', 'SYM'), ('C', 'NN'), ('=', 'SYM'), ('{', 'NFP'), ('1,2,4,5,6,7', 'CD'), ('}', ':'), ('States', 'NNPS'), ('a', 'NN'), ('b', 'NN'), ('A', 'NN'), ('=', 'SYM'), ('{', 'SYM'), ('0', 'CD'), (',', ','), ('1,2,', 'CD'), ('4,7', 'CD'), ('}', 'SYM'), ('B', 'CD'), ('C', 'NN'), ('B', 'NN'), ('=', 'SYM'), ('{', 'SYM'), ('1,2,3,', 'CD'), ('4,', 'CD'), ('6,', 'CD'), ('7,8', 'CD'), ('}', 'SYM'), ('B', 'CD'), ('D', 'NN'), ('C', 'NN'), ('=', 'SYM'), ('{', 'NFP'), ('1,2,4,', 'CD'), ('5', 'CD'), (',', ','), ('6,7', 'CD'), ('}', ':'), ('B', 'CD'), ('C', 'NN'), ('E=', 'NN'), ('{', '-LRB-'), ('1', 'CD'), (',', ','), ('2', 'CD'), (',', ','), ('4', 'CD'), (',', ','), ('5', 'CD'), (',', ','), ('6', 'CD'), (',', ','), ('7', 'CD'), (',', ','), ('10', 'CD'), ('}', ':'), ('D', 'NN'), ('=', 'SYM'), ('{', 'SYM'), ('1,2,4,5,6,7,9', 'CD'), ('}', '-LRB-'), ('B', 'NN'), ('E', 'NN'), ('E', 'NN'), ('=', 'SYM'), ('{', 'SYM'), ('1,2,4,', 'CD'), ('5,6,7,10', 'CD'), ('}', ':'), ('B', 'CD'), ('C', 'NN'), ('10', 'CD'), ('9', 'CD'), ('Prof.', 'NN'), ('Dixita', 'NNP'), ('B', 'NN'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('2', 'CD'), ('–', ':'), ('Lexical', 'JJ'), ('Analyzer', 'NN'), ('‹#›', 'NN'), ('Conversion', 'NN'), ('from', 'IN'), ('NFA', 'NNP'), ('to', 'IN'), ('DFA', 'NNP'), ('a', 'DT'), ('b', 'NN'), ('a', 'DT'), ('b', 'NN'), ('a', 'DT'), ('b', 'NN'), ('a', 'DT'), ('b', 'NN'), ('b', 'NN'), ('a', 'DT'), ('Transition', 'NN'), ('Table', 'NN'), ('DFA', 'NN'), ('Note', 'NN'), (':', ':'), ('Accepting', 'VBG'), ('state', 'NN'), ('in', 'IN'), ('NFA', 'NNP'), ('is', 'VBZ'), ('10', 'CD'), ('10', 'CD'), ('is', 'VBZ'), ('element', 'NN'), ('of', 'IN'), ('E', 'NNP'), ('So', 'RB'), (',', ','), ('E', 'NNP'), ('is', 'VBZ'), ('acceptance', 'NN'), ('state', 'NN'), ('in', 'IN'), ('DFA', 'NNP'), ('States', 'NNPS'), ('a', 'DT'), ('b', 'NN'), ('A', 'NN'), ('=', 'SYM'), ('{', 'SYM'), ('0', 'CD'), (',', ','), ('1,2,', 'CD'), ('4,7', 'CD'), ('}', 'SYM'), ('B', 'CD'), ('C', 'NN'), ('B', 'NN'), ('=', 'SYM'), ('{', ':'), ('1,2,3,', 'CD'), ('4,', 'CD'), ('6,', 'CD'), ('7,8', 'CD'), ('}', ':'), ('B', 'CD'), ('D', 'NN'), ('C', 'NN'), ('=', 'SYM'), ('{', 'NFP'), ('1,2,4,', 'CD'), ('5', 'CD'), (',', ','), ('6,7', 'CD'), ('}', ':'), ('B', 'CD'), ('C', 'NN'), ('D', 'NN'), ('=', 'SYM'), ('{', ':'), ('1,2,4,5,6,7,9', 'CD'), ('}', '-LRB-'), ('B', 'NN'), ('E', 'NN'), ('E', 'NN'), ('=', 'SYM'), ('{', 'NFP'), ('1,2,4,5,6,7,10', 'CD'), ('}', '-LRB-'), ('B', 'NN'), ('C', 'NN'), ('Prof.', 'NN'), ('Dixita', 'NNP'), ('B', 'NN'), ('Kagathara', 'NN'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('2', 'CD'), ('–', ':'), ('Lexical', 'JJ'), ('Analyzer', 'NN'), ('‹#›', 'NN'), ('Exercise', 'NN'), ('Convert', 'NN'), ('following', 'VBG'), ('regular', 'JJ'), ('expression', 'NN'), ('to', 'IN'), ('DFA', 'NN'), ('using', 'VBG'), ('subset', 'NN'), ('construction', 'NN'), ('method', 'NN'), (':', ':'), ('(', '-LRB-'), ('a+b', 'CD'), (')', '-RRB-'), ('*', 'NFP'), ('a', 'DT'), ('(', '-LRB-'), ('a+b', 'NN'), (')', '-RRB-'), ('(', '-LRB-'), ('a+b', 'NN'), (')', '-RRB-'), ('*', 'NFP'), ('ab*a', 'FW'), ('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('2', 'CD'), ('–', 'SYM'), ('Lexical', 'JJ'), ('Analyzer', 'NN'), ('‹#›', 'NN'), ('DFA', 'NN'), ('optimization', 'NN'), ('DFA', 'NN'), ('optimization', 'NN'), ('Construct', 'VB'), ('an', 'DT'), ('initial', 'JJ'), ('partition', 'NN'), ('of', 'IN'), ('the', 'DT'), ('set', 'NN'), ('of', 'IN'), ('states', 'NNS'), ('with', 'IN'), ('two', 'CD'), ('groups', 'NNS'), (':', ':'), ('the', 'DT'), ('accepting', 'VBG'), ('states', 'NNS'), ('and', 'CC'), ('the', 'DT'), ('non-accepting', 'JJ'), ('states', 'NNS'), ('.', '.')] 

 Lemmas are: 
>> [('{', '{'), ('5', '5'), ('}', '}'), ('𝜖-', '𝜖-'), ('Closure', 'closure'), ('(', '('), ('Move', 'move'), ('(', '('), ('E', 'E'), (',', ','), ('b', 'b'), (')', ')'), (')', ')'), ('=', '='), ('{', '{'), ('5', '5'), (',6,', ',6,'), ('7,', '7,'), ('1,2,4', '1224'), ('}', '}'), ('----', '----'), ('C', 'c'), ('=', '='), ('{', '{'), ('1,2,4,5,6,7', '1224567'), ('}', '}'), ('States', 'State'), ('a', 'a'), ('b', 'b'), ('A', 'a'), ('=', '='), ('{', '{'), ('0', '0'), (',', ','), ('1,2,', '122'), ('4,7', '4,7'), ('}', '}'), ('B', 'b'), ('C', 'c'), ('B', 'b'), ('=', '='), ('{', '{'), ('1,2,3,', '1223'), ('4,', '4,'), ('6,', '6,'), ('7,8', '7,8'), ('}', '}'), ('B', 'b'), ('D', 'd'), ('C', 'c'), ('=', '='), ('{', '{'), ('1,2,4,', '1224'), ('5', '5'), (',', ','), ('6,7', '6,7'), ('}', '}'), ('B', 'b'), ('C', 'c'), ('E=', 'e='), ('{', '{'), ('1', '1'), (',', ','), ('2', '2'), (',', ','), ('4', '4'), (',', ','), ('5', '5'), (',', ','), ('6', '6'), (',', ','), ('7', '7'), (',', ','), ('10', '10'), ('}', '}'), ('D', 'd'), ('=', '='), ('{', '{'), ('1,2,4,5,6,7,9', '1224567,9'), ('}', '}'), ('B', 'b'), ('E', 'e'), ('E', 'e'), ('=', '='), ('{', '{'), ('1,2,4,', '1224'), ('5,6,7,10', '566710'), ('}', '}'), ('B', 'b'), ('C', 'c'), ('10', '10'), ('9', '9'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'b'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('2', '2'), ('–', '-'), ('Lexical', 'lexical'), ('Analyzer', 'analyzer'), ('‹#›', '‹#›'), ('Conversion', 'conversion'), ('from', 'from'), ('NFA', 'NFA'), ('to', 'to'), ('DFA', 'DFA'), ('a', 'a'), ('b', 'b'), ('a', 'a'), ('b', 'b'), ('a', 'a'), ('b', 'b'), ('a', 'a'), ('b', 'b'), ('b', 'b'), ('a', 'a'), ('Transition', 'Transition'), ('Table', 'table'), ('DFA', 'dfa'), ('Note', 'note'), (':', ':'), ('Accepting', 'accept'), ('state', 'state'), ('in', 'in'), ('NFA', 'NFA'), ('is', 'be'), ('10', '10'), ('10', '10'), ('is', 'be'), ('element', 'element'), ('of', 'of'), ('E', 'E'), ('So', 'so'), (',', ','), ('E', 'E'), ('is', 'be'), ('acceptance', 'acceptance'), ('state', 'state'), ('in', 'in'), ('DFA', 'DFA'), ('States', 'State'), ('a', 'a'), ('b', 'b'), ('A', 'a'), ('=', '='), ('{', '{'), ('0', '0'), (',', ','), ('1,2,', '122'), ('4,7', '4,7'), ('}', '}'), ('B', 'b'), ('C', 'c'), ('B', 'b'), ('=', '='), ('{', '{'), ('1,2,3,', '1223'), ('4,', '4,'), ('6,', '6,'), ('7,8', '7,8'), ('}', '}'), ('B', 'b'), ('D', 'd'), ('C', 'c'), ('=', '='), ('{', '{'), ('1,2,4,', '1224'), ('5', '5'), (',', ','), ('6,7', '6,7'), ('}', '}'), ('B', 'b'), ('C', 'c'), ('D', 'd'), ('=', '='), ('{', '{'), ('1,2,4,5,6,7,9', '1224567,9'), ('}', '}'), ('B', 'b'), ('E', 'e'), ('E', 'e'), ('=', '='), ('{', '{'), ('1,2,4,5,6,7,10', '1224566,10'), ('}', '}'), ('B', 'b'), ('C', 'c'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('2', '2'), ('–', '-'), ('Lexical', 'lexical'), ('Analyzer', 'analyzer'), ('‹#›', '‹#›'), ('Exercise', 'Exercise'), ('Convert', 'convert'), ('following', 'follow'), ('regular', 'regular'), ('expression', 'expression'), ('to', 'to'), ('DFA', 'dfa'), ('using', 'use'), ('subset', 'subset'), ('construction', 'construction'), ('method', 'method'), (':', ':'), ('(', '('), ('a+b', 'a+b'), (')', ')'), ('*', '*'), ('a', 'a'), ('(', '('), ('a+b', 'a+b'), (')', ')'), ('(', '('), ('a+b', 'a+b'), (')', ')'), ('*', '*'), ('ab*a', 'ab*a'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('2', '2'), ('–', '-'), ('Lexical', 'lexical'), ('Analyzer', 'analyzer'), ('‹#›', '‹#›'), ('DFA', 'dfa'), ('optimization', 'optimization'), ('DFA', 'dfa'), ('optimization', 'optimization'), ('Construct', 'construct'), ('an', 'a'), ('initial', 'initial'), ('partition', 'partition'), ('of', 'of'), ('the', 'the'), ('set', 'set'), ('of', 'of'), ('states', 'state'), ('with', 'with'), ('two', 'two'), ('groups', 'group'), (':', ':'), ('the', 'the'), ('accepting', 'accept'), ('states', 'state'), ('and', 'and'), ('the', 'the'), ('non-accepting', 'non-accepting'), ('states', 'state'), ('.', '.')] 

 Dependency tags are: 
>> [(('{', '5'), 'punct'), (('5', '='), 'nummod'), (('}', '5'), 'punct'), (('𝜖-', 'Closure'), 'compound'), (('Closure', '='), 'nsubj'), (('(', 'E'), 'punct'), (('Move', 'Closure'), 'appos'), (('(', 'E'), 'punct'), (('E', 'Move'), 'dep'), ((',', 'b'), 'punct'), (('b', 'E'), 'dep'), ((')', 'E'), 'punct'), ((')', 'E'), 'punct'), (('=', 'root'), 'root'), (('{', ',6,'), 'punct'), (('5', ',6,'), 'dep'), ((',6,', '='), 'dep'), (('7,', ',6,'), 'dep'), (('1,2,4', ',6,'), 'dep'), (('}', '1,2,4'), 'punct'), (('----', 'C'), 'cc'), (('C', '='), 'dep'), (('=', 'Closure'), 'conj'), (('{', '1,2,4,5,6,7'), 'punct'), (('1,2,4,5,6,7', '='), 'dep'), (('}', 'States'), 'punct'), (('States', '='), 'obj'), (('a', 'b'), 'compound'), (('b', 'States'), 'conj'), (('A', '='), 'nsubj'), (('=', '='), 'parataxis'), (('{', '0'), 'dep'), (('0', '='), 'dep'), ((',', '1,2,'), 'punct'), (('1,2,', '0'), 'conj'), (('4,7', 'B'), 'dep'), (('}', 'B'), 'dep'), (('B', '1,2,'), 'dep'), (('C', 'B'), 'dep'), (('B', '='), 'nsubj'), (('=', 'C'), 'dep'), (('{', '='), 'dep'), (('1,2,3,', '4,'), 'compound'), (('4,', '7,8'), 'dep'), (('6,', '7,8'), 'dep'), (('7,8', '='), 'dep'), (('}', 'B'), 'dep'), (('B', 'D'), 'nummod'), (('D', '='), 'dep'), (('C', '='), 'nsubj'), (('=', 'Closure'), 'conj'), (('{', '5'), 'punct'), (('1,2,4,', '5'), 'dep'), (('5', '='), 'dep'), ((',', '6,7'), 'punct'), (('6,7', '5'), 'conj'), (('}', 'B'), 'punct'), (('B', 'Closure'), 'dep'), (('C', 'B'), 'dep'), (('E=', 'C'), 'dep'), (('{', '1'), 'punct'), (('1', 'E='), 'dep'), ((',', '2'), 'punct'), (('2', '1'), 'conj'), ((',', '4'), 'punct'), (('4', '1'), 'conj'), ((',', '5'), 'punct'), (('5', '4'), 'dep'), ((',', '6'), 'punct'), (('6', 'Closure'), 'dep'), ((',', '7'), 'punct'), (('7', 'Closure'), 'dep'), ((',', '10'), 'punct'), (('10', '='), 'dep'), (('}', '='), 'punct'), (('D', '='), 'nsubj'), (('=', 'Closure'), 'conj'), (('{', '='), 'dep'), (('1,2,4,5,6,7,9', 'B'), 'nummod'), (('}', 'B'), 'punct'), (('B', '='), 'dep'), (('E', 'B'), 'dep'), (('E', 'B'), 'dep'), (('=', '='), 'conj'), (('{', '='), 'dep'), (('1,2,4,', '{'), 'compound'), (('5,6,7,10', '{'), 'nummod'), (('}', 'C'), 'punct'), (('B', 'C'), 'nummod'), (('C', '5'), 'dep'), (('10', '9'), 'compound'), (('9', 'Prof.'), 'nummod'), (('Prof.', 'B'), 'compound'), (('Dixita', 'B'), 'compound'), (('B', '#'), 'compound'), (('Kagathara', '#'), 'compound'), (('#', ',6,'), 'conj'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', 'Unit'), 'compound'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', '='), 'dep'), (('2', 'Unit'), 'nummod'), (('–', 'Analyzer'), 'punct'), (('Lexical', 'Analyzer'), 'amod'), (('Analyzer', 'Conversion'), 'compound'), (('‹#›', 'Conversion'), 'compound'), (('Conversion', '='), 'parataxis'), (('from', 'NFA'), 'case'), (('NFA', 'Conversion'), 'nmod'), (('to', 'DFA'), 'case'), (('DFA', 'b'), 'nmod'), (('a', 'b'), 'det'), (('b', 'b'), 'nmod'), (('a', 'b'), 'det'), (('b', '='), 'conj'), (('a', 'b'), 'det'), (('b', '='), 'conj'), (('a', 'b'), 'det'), (('b', 'b'), 'compound'), (('b', '='), 'parataxis'), (('a', 'Table'), 'det'), (('Transition', 'Table'), 'compound'), (('Table', 'Note'), 'compound'), (('DFA', 'Note'), 'compound'), (('Note', 'b'), 'conj'), ((':', '='), 'punct'), (('Accepting', 'Note'), 'parataxis'), (('state', 'Accepting'), 'obj'), (('in', 'NFA'), 'case'), (('NFA', 'Accepting'), 'obl'), (('is', '10'), 'cop'), (('10', 'element'), 'nummod'), (('10', '10'), 'conj'), (('is', 'element'), 'cop'), (('element', '='), 'conj'), (('of', 'E'), 'case'), (('E', 'element'), 'nmod'), (('So', 'element'), 'advmod'), ((',', 'state'), 'punct'), (('E', 'state'), 'nsubj'), (('is', 'state'), 'cop'), (('acceptance', 'state'), 'compound'), (('state', 'element'), 'conj'), (('in', 'States'), 'case'), (('DFA', 'States'), 'compound'), (('States', 'state'), 'nmod'), (('a', 'b'), 'det'), (('b', 'state'), 'dep'), (('A', '='), 'nsubj'), (('=', 'state'), 'parataxis'), (('{', '='), 'obj'), (('0', '='), 'dep'), ((',', '1,2,'), 'punct'), (('1,2,', '='), 'dep'), (('4,7', 'B'), 'compound'), (('}', 'B'), 'compound'), (('B', '1,2,'), 'nmod'), (('C', 'B'), 'compound'), (('B', '='), 'nsubj'), (('=', 'C'), 'parataxis'), (('{', '1,2,3,'), 'punct'), (('1,2,3,', '='), 'dep'), (('4,', '1,2,3,'), 'nmod'), (('6,', '1,2,3,'), 'compound'), (('7,8', '1,2,3,'), 'conj'), (('}', 'B'), 'punct'), (('B', 'D'), 'nummod'), (('D', '1,2,3,'), 'dep'), (('C', '='), 'nsubj'), (('=', 'D'), 'parataxis'), (('{', '='), 'punct'), (('1,2,4,', '5'), 'compound'), (('5', '='), 'nummod'), ((',', '6,7'), 'punct'), (('6,7', '5'), 'conj'), (('}', 'B'), 'punct'), (('B', '6,7'), 'conj'), (('C', 'B'), 'compound'), (('D', '='), 'nsubj'), (('=', 'C'), 'parataxis'), (('{', '='), 'punct'), (('1,2,4,5,6,7,9', 'B'), 'nummod'), (('}', 'B'), 'punct'), (('B', '='), 'dep'), (('E', 'B'), 'compound'), (('E', 'B'), 'punct'), (('=', '='), 'parataxis'), (('{', '='), 'punct'), (('1,2,4,5,6,7,10', '='), 'nummod'), (('}', 'C'), 'punct'), (('B', 'C'), 'compound'), (('C', '='), 'compound'), (('Prof.', 'B'), 'compound'), (('Dixita', 'B'), 'compound'), (('B', '#'), 'compound'), (('Kagathara', '#'), 'compound'), (('#', 'C'), 'compound'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', '#'), 'appos'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', '#'), 'appos'), (('2', 'Unit'), 'nummod'), (('–', 'Analyzer'), 'punct'), (('Lexical', 'Analyzer'), 'amod'), (('Analyzer', 'Convert'), 'compound'), (('‹#›', 'Convert'), 'compound'), (('Exercise', 'Convert'), 'compound'), (('Convert', 'Unit'), 'compound'), (('following', 'expression'), 'amod'), (('regular', 'expression'), 'amod'), (('expression', 'Convert'), 'nmod'), (('to', 'DFA'), 'case'), (('DFA', 'expression'), 'nmod'), (('using', 'expression'), 'acl'), (('subset', 'method'), 'compound'), (('construction', 'method'), 'compound'), (('method', 'using'), 'obj'), ((':', 'method'), 'punct'), (('(', 'a+b'), 'punct'), (('a+b', 'method'), 'appos'), ((')', 'a+b'), 'punct'), (('*', 'a+b'), 'punct'), (('a', 'a+b'), 'det'), (('(', 'a+b'), 'punct'), (('a+b', 'method'), 'appos'), ((')', 'a+b'), 'punct'), (('(', 'a+b'), 'punct'), (('a+b', 'a+b'), 'appos'), ((')', 'a+b'), 'punct'), (('*', 'ab*a'), 'punct'), (('ab*a', 'a+b'), 'compound'), (('Prof.', 'ab*a'), 'flat'), (('Dixita', 'Kagathara'), 'compound'), (('B', 'Kagathara'), 'compound'), (('Kagathara', 'ab*a'), 'compound'), (('#', 'ab*a'), 'compound'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', '#'), 'appos'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', 'Kagathara'), 'appos'), (('2', 'Unit'), 'nummod'), (('–', 'Analyzer'), 'case'), (('Lexical', 'Analyzer'), 'amod'), (('Analyzer', 'Unit'), 'compound'), (('‹#›', 'optimization'), 'compound'), (('DFA', 'optimization'), 'compound'), (('optimization', 'optimization'), 'compound'), (('DFA', 'optimization'), 'compound'), (('optimization', 'Construct'), 'nsubj'), (('Construct', 'Analyzer'), 'acl:relcl'), (('an', 'partition'), 'det'), (('initial', 'partition'), 'amod'), (('partition', 'Construct'), 'obj'), (('of', 'set'), 'case'), (('the', 'set'), 'det'), (('set', 'partition'), 'nmod'), (('of', 'states'), 'case'), (('states', 'set'), 'nmod'), (('with', 'groups'), 'case'), (('two', 'groups'), 'nummod'), (('groups', 'set'), 'nmod'), ((':', 'states'), 'punct'), (('the', 'states'), 'det'), (('accepting', 'states'), 'amod'), (('states', 'groups'), 'appos'), (('and', 'states'), 'cc'), (('the', 'states'), 'det'), (('non-accepting', 'states'), 'amod'), (('states', 'states'), 'conj'), (('.', '='), 'punct')]

 Named Entities are: 
>> [('5', 'CARDINAL'), ('2170701', 'CARDINAL'), ('2', 'CARDINAL'), ('NFA', 'ORG'), ('10', 'CARDINAL'), ('10', 'CARDINAL'), ('DFA \tStates', 'ORG'), ('2170701', 'CARDINAL'), ('2', 'CARDINAL'), ('2', 'CARDINAL'), ('two', 'CARDINAL')]

========================== Sentence 83 ===========================

 Apply the repartition procedure to  to construct a new partition . 

Tokens are: 
>> ['Apply', 'the', 'repartition', 'procedure', 'to', 'to', 'construct', 'a', 'new', 'partition', '.'] 

 UPOS tags are: 
>> [('Apply', 'VERB'), ('the', 'DET'), ('repartition', 'NOUN'), ('procedure', 'NOUN'), ('to', 'PART'), ('to', 'PART'), ('construct', 'VERB'), ('a', 'DET'), ('new', 'ADJ'), ('partition', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Apply', 'VB'), ('the', 'DT'), ('repartition', 'NN'), ('procedure', 'NN'), ('to', 'TO'), ('to', 'TO'), ('construct', 'VB'), ('a', 'DT'), ('new', 'JJ'), ('partition', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('Apply', 'apply'), ('the', 'the'), ('repartition', 'repartition'), ('procedure', 'procedure'), ('to', 'to'), ('to', 'to'), ('construct', 'construct'), ('a', 'a'), ('new', 'new'), ('partition', 'partition'), ('.', '.')] 

 Dependency tags are: 
>> [(('Apply', 'root'), 'root'), (('the', 'procedure'), 'det'), (('repartition', 'procedure'), 'compound'), (('procedure', 'Apply'), 'obj'), (('to', 'construct'), 'mark'), (('to', 'construct'), 'mark'), (('construct', 'Apply'), 'advcl'), (('a', 'partition'), 'det'), (('new', 'partition'), 'amod'), (('partition', 'construct'), 'obj'), (('.', 'Apply'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 84 ===========================

 If , let and continue with step (4). 

Tokens are: 
>> ['If', ',', 'let', 'and', 'continue', 'with', 'step', '(', '4', ')', '.'] 

 UPOS tags are: 
>> [('If', 'SCONJ'), (',', 'PUNCT'), ('let', 'VERB'), ('and', 'CCONJ'), ('continue', 'VERB'), ('with', 'ADP'), ('step', 'NOUN'), ('(', 'PUNCT'), ('4', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('If', 'IN'), (',', ','), ('let', 'VB'), ('and', 'CC'), ('continue', 'VB'), ('with', 'IN'), ('step', 'NN'), ('(', '-LRB-'), ('4', 'CD'), (')', '-RRB-'), ('.', '.')] 

 Lemmas are: 
>> [('If', 'if'), (',', ','), ('let', 'let'), ('and', 'and'), ('continue', 'continue'), ('with', 'with'), ('step', 'step'), ('(', '('), ('4', '4'), (')', ')'), ('.', '.')] 

 Dependency tags are: 
>> [(('If', 'let'), 'mark'), ((',', 'let'), 'punct'), (('let', 'root'), 'root'), (('and', 'continue'), 'cc'), (('continue', 'let'), 'conj'), (('with', 'step'), 'case'), (('step', 'continue'), 'obl'), (('(', '4'), 'punct'), (('4', 'step'), 'appos'), ((')', '4'), 'punct'), (('.', 'let'), 'punct')]

 Named Entities are: 
>> [('4', 'CARDINAL')]

========================== Sentence 85 ===========================

 Otherwise, repeat step (2)    with . 		for each group  of  do begin  			partition  into subgroups such that two states  and  				of  are in the same subgroup if and only if for all  				input symbols , states  and  have transitions on  				to states in the same group of . 

Tokens are: 
>> ['Otherwise', ',', 'repeat', 'step', '(', '2', ')', 'with', '.', 'for', 'each', 'group', 'of', 'do', 'begin', 'partition', 'into', 'subgroups', 'such', 'that', 'two', 'states', 'and', 'of', 'are', 'in', 'the', 'same', 'subgroup', 'if', 'and', 'only', 'if', 'for', 'all', 'input', 'symbols', ',', 'states', 'and', 'have', 'transitions', 'on', 'to', 'states', 'in', 'the', 'same', 'group', 'of', '.'] 

 UPOS tags are: 
>> [('Otherwise', 'ADV'), (',', 'PUNCT'), ('repeat', 'VERB'), ('step', 'NOUN'), ('(', 'PUNCT'), ('2', 'NUM'), (')', 'PUNCT'), ('with', 'ADP'), ('.', 'PUNCT'), ('for', 'ADP'), ('each', 'DET'), ('group', 'NOUN'), ('of', 'ADP'), ('do', 'AUX'), ('begin', 'VERB'), ('partition', 'NOUN'), ('into', 'ADP'), ('subgroups', 'NOUN'), ('such', 'ADJ'), ('that', 'SCONJ'), ('two', 'NUM'), ('states', 'NOUN'), ('and', 'CCONJ'), ('of', 'ADP'), ('are', 'AUX'), ('in', 'ADP'), ('the', 'DET'), ('same', 'ADJ'), ('subgroup', 'NOUN'), ('if', 'SCONJ'), ('and', 'CCONJ'), ('only', 'ADV'), ('if', 'SCONJ'), ('for', 'ADP'), ('all', 'DET'), ('input', 'NOUN'), ('symbols', 'NOUN'), (',', 'PUNCT'), ('states', 'NOUN'), ('and', 'CCONJ'), ('have', 'VERB'), ('transitions', 'NOUN'), ('on', 'ADP'), ('to', 'ADP'), ('states', 'NOUN'), ('in', 'ADP'), ('the', 'DET'), ('same', 'ADJ'), ('group', 'NOUN'), ('of', 'ADP'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Otherwise', 'RB'), (',', ','), ('repeat', 'VB'), ('step', 'NN'), ('(', '-LRB-'), ('2', 'LS'), (')', '-RRB-'), ('with', 'IN'), ('.', '.'), ('for', 'IN'), ('each', 'DT'), ('group', 'NN'), ('of', 'IN'), ('do', 'VB'), ('begin', 'VB'), ('partition', 'NN'), ('into', 'IN'), ('subgroups', 'NNS'), ('such', 'JJ'), ('that', 'IN'), ('two', 'CD'), ('states', 'NNS'), ('and', 'CC'), ('of', 'IN'), ('are', 'VBP'), ('in', 'IN'), ('the', 'DT'), ('same', 'JJ'), ('subgroup', 'NN'), ('if', 'IN'), ('and', 'CC'), ('only', 'RB'), ('if', 'IN'), ('for', 'IN'), ('all', 'DT'), ('input', 'NN'), ('symbols', 'NNS'), (',', ','), ('states', 'NNS'), ('and', 'CC'), ('have', 'VB'), ('transitions', 'NNS'), ('on', 'IN'), ('to', 'IN'), ('states', 'NNS'), ('in', 'IN'), ('the', 'DT'), ('same', 'JJ'), ('group', 'NN'), ('of', 'IN'), ('.', '.')] 

 Lemmas are: 
>> [('Otherwise', 'otherwise'), (',', ','), ('repeat', 'repeat'), ('step', 'step'), ('(', '('), ('2', '2'), (')', ')'), ('with', 'with'), ('.', '.'), ('for', 'for'), ('each', 'each'), ('group', 'group'), ('of', 'of'), ('do', 'do'), ('begin', 'begin'), ('partition', 'partition'), ('into', 'into'), ('subgroups', 'subgroup'), ('such', 'such'), ('that', 'that'), ('two', 'two'), ('states', 'state'), ('and', 'and'), ('of', 'of'), ('are', 'be'), ('in', 'in'), ('the', 'the'), ('same', 'same'), ('subgroup', 'subgroup'), ('if', 'if'), ('and', 'and'), ('only', 'only'), ('if', 'if'), ('for', 'for'), ('all', 'all'), ('input', 'input'), ('symbols', 'symbol'), (',', ','), ('states', 'state'), ('and', 'and'), ('have', 'have'), ('transitions', 'transition'), ('on', 'on'), ('to', 'to'), ('states', 'state'), ('in', 'in'), ('the', 'the'), ('same', 'same'), ('group', 'group'), ('of', 'of'), ('.', '.')] 

 Dependency tags are: 
>> [(('Otherwise', 'repeat'), 'advmod'), ((',', 'repeat'), 'punct'), (('repeat', 'root'), 'root'), (('step', 'repeat'), 'obj'), (('(', '2'), 'punct'), (('2', 'repeat'), 'nummod'), ((')', '2'), 'punct'), (('with', 'begin'), 'mark'), (('.', 'repeat'), 'punct'), (('for', 'group'), 'case'), (('each', 'group'), 'det'), (('group', 'begin'), 'obl'), (('of', 'begin'), 'mark'), (('do', 'begin'), 'aux'), (('begin', 'repeat'), 'advcl'), (('partition', 'begin'), 'obj'), (('into', 'subgroups'), 'case'), (('subgroups', 'begin'), 'obl'), (('such', 'subgroup'), 'mark'), (('that', 'such'), 'fixed'), (('two', 'states'), 'nummod'), (('states', 'subgroup'), 'nsubj'), (('and', 'of'), 'cc'), (('of', 'states'), 'conj'), (('are', 'subgroup'), 'cop'), (('in', 'subgroup'), 'case'), (('the', 'subgroup'), 'det'), (('same', 'subgroup'), 'amod'), (('subgroup', 'begin'), 'conj'), (('if', 'symbols'), 'mark'), (('and', 'if'), 'fixed'), (('only', 'if'), 'fixed'), (('if', 'symbols'), 'mark'), (('for', 'symbols'), 'case'), (('all', 'symbols'), 'det'), (('input', 'symbols'), 'compound'), (('symbols', 'subgroup'), 'advcl'), ((',', 'states'), 'punct'), (('states', 'symbols'), 'conj'), (('and', 'have'), 'cc'), (('have', 'symbols'), 'conj'), (('transitions', 'have'), 'obj'), (('on', 'states'), 'case'), (('to', 'states'), 'case'), (('states', 'have'), 'obl'), (('in', 'group'), 'case'), (('the', 'group'), 'det'), (('same', 'group'), 'amod'), (('group', 'have'), 'obl'), (('of', 'group'), 'nmod'), (('.', 'repeat'), 'punct')]

 Named Entities are: 
>> [('2', 'CARDINAL'), ('two', 'CARDINAL')]

========================== Sentence 86 ===========================

 replace  in  by the set of all subgroups formed. 

Tokens are: 
>> ['replace', 'in', 'by', 'the', 'set', 'of', 'all', 'subgroups', 'formed', '.'] 

 UPOS tags are: 
>> [('replace', 'VERB'), ('in', 'ADP'), ('by', 'ADP'), ('the', 'DET'), ('set', 'NOUN'), ('of', 'ADP'), ('all', 'DET'), ('subgroups', 'NOUN'), ('formed', 'VERB'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('replace', 'VB'), ('in', 'RP'), ('by', 'IN'), ('the', 'DT'), ('set', 'NN'), ('of', 'IN'), ('all', 'DT'), ('subgroups', 'NNS'), ('formed', 'VBN'), ('.', '.')] 

 Lemmas are: 
>> [('replace', 'replace'), ('in', 'in'), ('by', 'by'), ('the', 'the'), ('set', 'set'), ('of', 'of'), ('all', 'all'), ('subgroups', 'subgroup'), ('formed', 'form'), ('.', '.')] 

 Dependency tags are: 
>> [(('replace', 'root'), 'root'), (('in', 'replace'), 'compound:prt'), (('by', 'set'), 'case'), (('the', 'set'), 'det'), (('set', 'replace'), 'obl'), (('of', 'subgroups'), 'case'), (('all', 'subgroups'), 'det'), (('subgroups', 'set'), 'nmod'), (('formed', 'subgroups'), 'acl'), (('.', 'replace'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 87 ===========================

 end     Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  DFA optimization Choose one state in each group of the partition  as the representative for that group. 

Tokens are: 
>> ['end', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '2', '–', 'Lexical', 'Analyzer', '‹#›', 'DFA', 'optimization', 'Choose', 'one', 'state', 'in', 'each', 'group', 'of', 'the', 'partition', 'as', 'the', 'representative', 'for', 'that', 'group', '.'] 

 UPOS tags are: 
>> [('end', 'NOUN'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'ADJ'), ('Analyzer', 'NOUN'), ('‹#›', 'NOUN'), ('DFA', 'NOUN'), ('optimization', 'NOUN'), ('Choose', 'VERB'), ('one', 'NUM'), ('state', 'NOUN'), ('in', 'ADP'), ('each', 'DET'), ('group', 'NOUN'), ('of', 'ADP'), ('the', 'DET'), ('partition', 'NOUN'), ('as', 'ADP'), ('the', 'DET'), ('representative', 'NOUN'), ('for', 'ADP'), ('that', 'DET'), ('group', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('end', 'NN'), ('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('2', 'CD'), ('–', ','), ('Lexical', 'JJ'), ('Analyzer', 'NN'), ('‹#›', 'NN'), ('DFA', 'NN'), ('optimization', 'NN'), ('Choose', 'VB'), ('one', 'CD'), ('state', 'NN'), ('in', 'IN'), ('each', 'DT'), ('group', 'NN'), ('of', 'IN'), ('the', 'DT'), ('partition', 'NN'), ('as', 'IN'), ('the', 'DT'), ('representative', 'NN'), ('for', 'IN'), ('that', 'DT'), ('group', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('end', 'end'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('2', '2'), ('–', '-'), ('Lexical', 'lexical'), ('Analyzer', 'analyzer'), ('‹#›', '‹#›'), ('DFA', 'dfa'), ('optimization', 'optimization'), ('Choose', 'choose'), ('one', 'one'), ('state', 'state'), ('in', 'in'), ('each', 'each'), ('group', 'group'), ('of', 'of'), ('the', 'the'), ('partition', 'partition'), ('as', 'as'), ('the', 'the'), ('representative', 'representative'), ('for', 'for'), ('that', 'that'), ('group', 'group'), ('.', '.')] 

 Dependency tags are: 
>> [(('end', 'Choose'), 'nsubj'), (('Prof.', 'Choose'), 'nsubj'), (('Dixita', 'Prof.'), 'flat'), (('B', 'Kagathara'), 'compound'), (('Kagathara', 'Prof.'), 'flat'), (('#', 'Choose'), 'nsubj'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', 'Unit'), 'compound'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', 'Prof.'), 'list'), (('2', 'Unit'), 'nummod'), (('–', 'Unit'), 'punct'), (('Lexical', 'Analyzer'), 'amod'), (('Analyzer', 'Prof.'), 'list'), (('‹#›', 'optimization'), 'compound'), (('DFA', 'optimization'), 'compound'), (('optimization', 'Choose'), 'nsubj'), (('Choose', 'root'), 'root'), (('one', 'state'), 'nummod'), (('state', 'Choose'), 'obj'), (('in', 'group'), 'case'), (('each', 'group'), 'det'), (('group', 'Choose'), 'obl'), (('of', 'partition'), 'case'), (('the', 'partition'), 'det'), (('partition', 'group'), 'nmod'), (('as', 'representative'), 'case'), (('the', 'representative'), 'det'), (('representative', 'Choose'), 'obl'), (('for', 'group'), 'case'), (('that', 'group'), 'det'), (('group', 'representative'), 'nmod'), (('.', 'Choose'), 'punct')]

 Named Entities are: 
>> [('2170701', 'CARDINAL'), ('2', 'CARDINAL'), ('DFA', 'ORG'), ('one', 'CARDINAL')]

========================== Sentence 88 ===========================

 The representatives will be the states of . 

Tokens are: 
>> ['The', 'representatives', 'will', 'be', 'the', 'states', 'of', '.'] 

 UPOS tags are: 
>> [('The', 'DET'), ('representatives', 'NOUN'), ('will', 'AUX'), ('be', 'AUX'), ('the', 'DET'), ('states', 'NOUN'), ('of', 'ADP'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('The', 'DT'), ('representatives', 'NNS'), ('will', 'MD'), ('be', 'VB'), ('the', 'DT'), ('states', 'NNS'), ('of', 'IN'), ('.', '.')] 

 Lemmas are: 
>> [('The', 'the'), ('representatives', 'representative'), ('will', 'will'), ('be', 'be'), ('the', 'the'), ('states', 'state'), ('of', 'of'), ('.', '.')] 

 Dependency tags are: 
>> [(('The', 'representatives'), 'det'), (('representatives', 'states'), 'nsubj'), (('will', 'states'), 'aux'), (('be', 'states'), 'cop'), (('the', 'states'), 'det'), (('states', 'root'), 'root'), (('of', 'states'), 'nmod'), (('.', 'states'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 89 ===========================

 Let s be a representative state, and suppose on input a there is a transition of  from  to . 

Tokens are: 
>> ['Let', 's', 'be', 'a', 'representative', 'state', ',', 'and', 'suppose', 'on', 'input', 'a', 'there', 'is', 'a', 'transition', 'of', 'from', 'to', '.'] 

 UPOS tags are: 
>> [('Let', 'VERB'), ('s', 'PRON'), ('be', 'AUX'), ('a', 'DET'), ('representative', 'ADJ'), ('state', 'NOUN'), (',', 'PUNCT'), ('and', 'CCONJ'), ('suppose', 'VERB'), ('on', 'ADP'), ('input', 'NOUN'), ('a', 'DET'), ('there', 'PRON'), ('is', 'VERB'), ('a', 'DET'), ('transition', 'NOUN'), ('of', 'ADP'), ('from', 'ADP'), ('to', 'ADP'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Let', 'VB'), ('s', 'PRP'), ('be', 'VB'), ('a', 'DT'), ('representative', 'JJ'), ('state', 'NN'), (',', ','), ('and', 'CC'), ('suppose', 'VB'), ('on', 'IN'), ('input', 'NN'), ('a', 'DT'), ('there', 'EX'), ('is', 'VBZ'), ('a', 'DT'), ('transition', 'NN'), ('of', 'IN'), ('from', 'IN'), ('to', 'IN'), ('.', '.')] 

 Lemmas are: 
>> [('Let', 'let'), ('s', 's'), ('be', 'be'), ('a', 'a'), ('representative', 'representative'), ('state', 'state'), (',', ','), ('and', 'and'), ('suppose', 'suppose'), ('on', 'on'), ('input', 'input'), ('a', 'a'), ('there', 'there'), ('is', 'be'), ('a', 'a'), ('transition', 'transition'), ('of', 'of'), ('from', 'from'), ('to', 'to'), ('.', '.')] 

 Dependency tags are: 
>> [(('Let', 'root'), 'root'), (('s', 'Let'), 'obj'), (('be', 'state'), 'cop'), (('a', 'state'), 'det'), (('representative', 'state'), 'amod'), (('state', 'Let'), 'xcomp'), ((',', 'suppose'), 'punct'), (('and', 'suppose'), 'cc'), (('suppose', 'Let'), 'conj'), (('on', 'input'), 'case'), (('input', 'suppose'), 'obl'), (('a', 'is'), 'nsubj'), (('there', 'is'), 'expl'), (('is', 'suppose'), 'ccomp'), (('a', 'transition'), 'det'), (('transition', 'is'), 'nsubj'), (('of', 'from'), 'case'), (('from', 'transition'), 'nmod'), (('to', 'from'), 'fixed'), (('.', 'Let'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 90 ===========================

 Let  be the representative of s group. 

Tokens are: 
>> ['Let', 'be', 'the', 'representative', 'of', 's', 'group', '.'] 

 UPOS tags are: 
>> [('Let', 'VERB'), ('be', 'AUX'), ('the', 'DET'), ('representative', 'NOUN'), ('of', 'ADP'), ('s', 'PART'), ('group', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Let', 'VB'), ('be', 'VB'), ('the', 'DT'), ('representative', 'NN'), ('of', 'IN'), ('s', 'POS'), ('group', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('Let', 'let'), ('be', 'be'), ('the', 'the'), ('representative', 'representative'), ('of', 'of'), ('s', "'s"), ('group', 'group'), ('.', '.')] 

 Dependency tags are: 
>> [(('Let', 'root'), 'root'), (('be', 'representative'), 'cop'), (('the', 'representative'), 'det'), (('representative', 'Let'), 'xcomp'), (('of', 'group'), 'case'), (('s', 'group'), 'case'), (('group', 'representative'), 'nmod'), (('.', 'Let'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 91 ===========================

 Then  has a transition from  to  on . 

Tokens are: 
>> ['Then', 'has', 'a', 'transition', 'from', 'to', 'on', '.'] 

 UPOS tags are: 
>> [('Then', 'ADV'), ('has', 'VERB'), ('a', 'DET'), ('transition', 'NOUN'), ('from', 'ADP'), ('to', 'ADP'), ('on', 'ADP'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Then', 'RB'), ('has', 'VBZ'), ('a', 'DT'), ('transition', 'NN'), ('from', 'IN'), ('to', 'IN'), ('on', 'IN'), ('.', '.')] 

 Lemmas are: 
>> [('Then', 'then'), ('has', 'have'), ('a', 'a'), ('transition', 'transition'), ('from', 'from'), ('to', 'to'), ('on', 'on'), ('.', '.')] 

 Dependency tags are: 
>> [(('Then', 'has'), 'advmod'), (('has', 'root'), 'root'), (('a', 'transition'), 'det'), (('transition', 'has'), 'obj'), (('from', 'on'), 'case'), (('to', 'on'), 'case'), (('on', 'has'), 'obl'), (('.', 'has'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 92 ===========================

 Let the start state of  be the representative of the group containing start state  of , and let the accepting states of  be the representatives that are in . 

Tokens are: 
>> ['Let', 'the', 'start', 'state', 'of', 'be', 'the', 'representative', 'of', 'the', 'group', 'containing', 'start', 'state', 'of', ',', 'and', 'let', 'the', 'accepting', 'states', 'of', 'be', 'the', 'representatives', 'that', 'are', 'in', '.'] 

 UPOS tags are: 
>> [('Let', 'VERB'), ('the', 'DET'), ('start', 'NOUN'), ('state', 'NOUN'), ('of', 'ADP'), ('be', 'AUX'), ('the', 'DET'), ('representative', 'NOUN'), ('of', 'ADP'), ('the', 'DET'), ('group', 'NOUN'), ('containing', 'VERB'), ('start', 'NOUN'), ('state', 'NOUN'), ('of', 'ADP'), (',', 'PUNCT'), ('and', 'CCONJ'), ('let', 'VERB'), ('the', 'DET'), ('accepting', 'VERB'), ('states', 'NOUN'), ('of', 'SCONJ'), ('be', 'AUX'), ('the', 'DET'), ('representatives', 'NOUN'), ('that', 'PRON'), ('are', 'AUX'), ('in', 'ADP'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Let', 'VB'), ('the', 'DT'), ('start', 'NN'), ('state', 'NN'), ('of', 'IN'), ('be', 'VB'), ('the', 'DT'), ('representative', 'NN'), ('of', 'IN'), ('the', 'DT'), ('group', 'NN'), ('containing', 'VBG'), ('start', 'NN'), ('state', 'NN'), ('of', 'IN'), (',', ','), ('and', 'CC'), ('let', 'VB'), ('the', 'DT'), ('accepting', 'VBG'), ('states', 'NNS'), ('of', 'IN'), ('be', 'VB'), ('the', 'DT'), ('representatives', 'NNS'), ('that', 'WDT'), ('are', 'VBP'), ('in', 'IN'), ('.', '.')] 

 Lemmas are: 
>> [('Let', 'let'), ('the', 'the'), ('start', 'start'), ('state', 'state'), ('of', 'of'), ('be', 'be'), ('the', 'the'), ('representative', 'representative'), ('of', 'of'), ('the', 'the'), ('group', 'group'), ('containing', 'contain'), ('start', 'start'), ('state', 'state'), ('of', 'of'), (',', ','), ('and', 'and'), ('let', 'let'), ('the', 'the'), ('accepting', 'accept'), ('states', 'state'), ('of', 'of'), ('be', 'be'), ('the', 'the'), ('representatives', 'representative'), ('that', 'that'), ('are', 'be'), ('in', 'in'), ('.', '.')] 

 Dependency tags are: 
>> [(('Let', 'root'), 'root'), (('the', 'state'), 'det'), (('start', 'state'), 'compound'), (('state', 'Let'), 'obj'), (('of', 'representative'), 'mark'), (('be', 'representative'), 'cop'), (('the', 'representative'), 'det'), (('representative', 'state'), 'nmod'), (('of', 'group'), 'case'), (('the', 'group'), 'det'), (('group', 'representative'), 'nmod'), (('containing', 'group'), 'acl'), (('start', 'state'), 'compound'), (('state', 'containing'), 'obj'), (('of', 'state'), 'nmod'), ((',', 'let'), 'punct'), (('and', 'let'), 'cc'), (('let', 'Let'), 'conj'), (('the', 'states'), 'det'), (('accepting', 'states'), 'amod'), (('states', 'let'), 'obj'), (('of', 'representatives'), 'mark'), (('be', 'representatives'), 'cop'), (('the', 'representatives'), 'det'), (('representatives', 'states'), 'acl'), (('that', 'in'), 'nsubj'), (('are', 'in'), 'cop'), (('in', 'representatives'), 'acl:relcl'), (('.', 'Let'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 93 ===========================

 If  has a dead state , then remove  from . 

Tokens are: 
>> ['If', 'has', 'a', 'dead', 'state', ',', 'then', 'remove', 'from', '.'] 

 UPOS tags are: 
>> [('If', 'SCONJ'), ('has', 'VERB'), ('a', 'DET'), ('dead', 'ADJ'), ('state', 'NOUN'), (',', 'PUNCT'), ('then', 'ADV'), ('remove', 'VERB'), ('from', 'ADP'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('If', 'IN'), ('has', 'VBZ'), ('a', 'DT'), ('dead', 'JJ'), ('state', 'NN'), (',', ','), ('then', 'RB'), ('remove', 'VB'), ('from', 'IN'), ('.', '.')] 

 Lemmas are: 
>> [('If', 'if'), ('has', 'have'), ('a', 'a'), ('dead', 'dead'), ('state', 'state'), (',', ','), ('then', 'then'), ('remove', 'remove'), ('from', 'from'), ('.', '.')] 

 Dependency tags are: 
>> [(('If', 'has'), 'mark'), (('has', 'remove'), 'advcl'), (('a', 'state'), 'det'), (('dead', 'state'), 'amod'), (('state', 'has'), 'obj'), ((',', 'remove'), 'punct'), (('then', 'remove'), 'advmod'), (('remove', 'root'), 'root'), (('from', 'remove'), 'advmod'), (('.', 'remove'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 94 ===========================

 Also remove any state not reachable from the start state. 

Tokens are: 
>> ['Also', 'remove', 'any', 'state', 'not', 'reachable', 'from', 'the', 'start', 'state', '.'] 

 UPOS tags are: 
>> [('Also', 'ADV'), ('remove', 'VERB'), ('any', 'DET'), ('state', 'NOUN'), ('not', 'ADV'), ('reachable', 'ADJ'), ('from', 'ADP'), ('the', 'DET'), ('start', 'NOUN'), ('state', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Also', 'RB'), ('remove', 'VB'), ('any', 'DT'), ('state', 'NN'), ('not', 'RB'), ('reachable', 'JJ'), ('from', 'IN'), ('the', 'DT'), ('start', 'NN'), ('state', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('Also', 'also'), ('remove', 'remove'), ('any', 'any'), ('state', 'state'), ('not', 'not'), ('reachable', 'reachable'), ('from', 'from'), ('the', 'the'), ('start', 'start'), ('state', 'state'), ('.', '.')] 

 Dependency tags are: 
>> [(('Also', 'remove'), 'advmod'), (('remove', 'root'), 'root'), (('any', 'state'), 'det'), (('state', 'remove'), 'obj'), (('not', 'reachable'), 'advmod'), (('reachable', 'remove'), 'xcomp'), (('from', 'state'), 'case'), (('the', 'state'), 'det'), (('start', 'state'), 'compound'), (('state', 'reachable'), 'obl'), (('.', 'remove'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 95 ===========================

 Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  DFA optimization 

Tokens are: 
>> ['Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '2', '–', 'Lexical', 'Analyzer', '‹#›', 'DFA', 'optimization'] 

 UPOS tags are: 
>> [('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'ADJ'), ('Analyzer', 'NOUN'), ('‹#›', 'NOUN'), ('DFA', 'NOUN'), ('optimization', 'NOUN')] 

 XPOS tags are: 
>> [('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('2', 'CD'), ('–', ','), ('Lexical', 'JJ'), ('Analyzer', 'NN'), ('‹#›', 'NN'), ('DFA', 'NN'), ('optimization', 'NN')] 

 Lemmas are: 
>> [('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('2', '2'), ('–', '-'), ('Lexical', 'lexical'), ('Analyzer', 'analyzer'), ('‹#›', '‹#›'), ('DFA', 'dfa'), ('optimization', 'optimization')] 

 Dependency tags are: 
>> [(('Prof.', 'root'), 'root'), (('Dixita', 'Prof.'), 'flat'), (('B', 'Prof.'), 'flat'), (('Kagathara', 'Prof.'), 'flat'), (('#', 'Prof.'), 'list'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', '#'), 'appos'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', 'Prof.'), 'list'), (('2', 'Unit'), 'nummod'), (('–', 'Unit'), 'punct'), (('Lexical', 'Analyzer'), 'amod'), (('Analyzer', 'Prof.'), 'list'), (('‹#›', 'optimization'), 'compound'), (('DFA', 'optimization'), 'compound'), (('optimization', 'Prof.'), 'list')]

 Named Entities are: 
>> [('#2170701', 'CARDINAL'), ('2', 'CARDINAL')]

========================== Sentence 96 ===========================

 Now no more splitting is possible. 

Tokens are: 
>> ['Now', 'no', 'more', 'splitting', 'is', 'possible', '.'] 

 UPOS tags are: 
>> [('Now', 'ADV'), ('no', 'DET'), ('more', 'ADV'), ('splitting', 'NOUN'), ('is', 'AUX'), ('possible', 'ADJ'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Now', 'RB'), ('no', 'DT'), ('more', 'RBR'), ('splitting', 'NN'), ('is', 'VBZ'), ('possible', 'JJ'), ('.', '.')] 

 Lemmas are: 
>> [('Now', 'now'), ('no', 'no'), ('more', 'more'), ('splitting', 'split'), ('is', 'be'), ('possible', 'possible'), ('.', '.')] 

 Dependency tags are: 
>> [(('Now', 'possible'), 'advmod'), (('no', 'splitting'), 'det'), (('more', 'splitting'), 'amod'), (('splitting', 'possible'), 'nsubj'), (('is', 'possible'), 'cop'), (('possible', 'root'), 'root'), (('.', 'possible'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 97 ===========================

 If we chose A as the representative for group (AC), then we obtain reduced transition table    	A 	B	C  	B	B	D  	C 	B	C  	D 	B	E  	E 	B	C  	States	a	b   Nonaccepting States   Accepting States           	A 	B	A  	B	B	D  	D 	B	E  	E 	B	A  	States	a	b  Optimized Transition Table       Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Conversion from regular expression to DFA        Rules to compute nullable, firstpos, lastpos nullable(n) 

Tokens are: 
>> ['If', 'we', 'chose', 'A', 'as', 'the', 'representative', 'for', 'group', '(', 'AC', ')', ',', 'then', 'we', 'obtain', 'reduced', 'transition', 'table', 'A', 'B', 'C', 'B', 'B', 'D', 'C', 'B', 'C', 'D', 'B', 'E', 'E', 'B', 'C', 'States', 'a', 'b', 'Nonaccepting', 'States', 'Accepting', 'States', 'A', 'B', 'A', 'B', 'B', 'D', 'D', 'B', 'E', 'E', 'B', 'A', 'States', 'a', 'b', 'Optimized', 'Transition', 'Table', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '2', '–', 'Lexical', 'Analyzer', '‹#›', 'Conversion', 'from', 'regular', 'expression', 'to', 'DFA', 'Rules', 'to', 'compute', 'nullable', ',', 'firstpos', ',', 'lastpos', 'nullable', '(', 'n', ')'] 

 UPOS tags are: 
>> [('If', 'SCONJ'), ('we', 'PRON'), ('chose', 'VERB'), ('A', 'DET'), ('as', 'ADP'), ('the', 'DET'), ('representative', 'NOUN'), ('for', 'ADP'), ('group', 'NOUN'), ('(', 'PUNCT'), ('AC', 'PROPN'), (')', 'PUNCT'), (',', 'PUNCT'), ('then', 'ADV'), ('we', 'PRON'), ('obtain', 'VERB'), ('reduced', 'VERB'), ('transition', 'NOUN'), ('table', 'NOUN'), ('A', 'PROPN'), ('B', 'NOUN'), ('C', 'PROPN'), ('B', 'NOUN'), ('B', 'NOUN'), ('D', 'PROPN'), ('C', 'PROPN'), ('B', 'NOUN'), ('C', 'PROPN'), ('D', 'PROPN'), ('B', 'NOUN'), ('E', 'NOUN'), ('E', 'NOUN'), ('B', 'NOUN'), ('C', 'PROPN'), ('States', 'PROPN'), ('a', 'DET'), ('b', 'PROPN'), ('Nonaccepting', 'PROPN'), ('States', 'PROPN'), ('Accepting', 'VERB'), ('States', 'PROPN'), ('A', 'PROPN'), ('B', 'PROPN'), ('A', 'PROPN'), ('B', 'PROPN'), ('B', 'PROPN'), ('D', 'PROPN'), ('D', 'PROPN'), ('B', 'NOUN'), ('E', 'PROPN'), ('E', 'PROPN'), ('B', 'NOUN'), ('A', 'DET'), ('States', 'PROPN'), ('a', 'DET'), ('b', 'NOUN'), ('Optimized', 'VERB'), ('Transition', 'PROPN'), ('Table', 'NOUN'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'ADJ'), ('Analyzer', 'NOUN'), ('‹#›', 'NOUN'), ('Conversion', 'NOUN'), ('from', 'ADP'), ('regular', 'ADJ'), ('expression', 'NOUN'), ('to', 'ADP'), ('DFA', 'NOUN'), ('Rules', 'NOUN'), ('to', 'PART'), ('compute', 'VERB'), ('nullable', 'NOUN'), (',', 'PUNCT'), ('firstpos', 'NOUN'), (',', 'PUNCT'), ('lastpos', 'NOUN'), ('nullable', 'NOUN'), ('(', 'PUNCT'), ('n', 'NOUN'), (')', 'PUNCT')] 

 XPOS tags are: 
>> [('If', 'IN'), ('we', 'PRP'), ('chose', 'VBD'), ('A', 'DT'), ('as', 'IN'), ('the', 'DT'), ('representative', 'NN'), ('for', 'IN'), ('group', 'NN'), ('(', '-LRB-'), ('AC', 'NNP'), (')', '-RRB-'), (',', ','), ('then', 'RB'), ('we', 'PRP'), ('obtain', 'VBP'), ('reduced', 'VBN'), ('transition', 'NN'), ('table', 'NN'), ('A', 'NNP'), ('B', 'NN'), ('C', 'NNP'), ('B', 'NN'), ('B', 'NN'), ('D', 'NNP'), ('C', 'NNP'), ('B', 'NN'), ('C', 'NNP'), ('D', 'NNP'), ('B', 'NN'), ('E', 'NN'), ('E', 'NN'), ('B', 'NN'), ('C', 'NNP'), ('States', 'NNPS'), ('a', 'DT'), ('b', 'NNP'), ('Nonaccepting', 'NNP'), ('States', 'NNPS'), ('Accepting', 'NNP'), ('States', 'NNPS'), ('A', 'NNP'), ('B', 'NNP'), ('A', 'NNP'), ('B', 'NNP'), ('B', 'NNP'), ('D', 'NNP'), ('D', 'NNP'), ('B', 'NN'), ('E', 'NNP'), ('E', 'NNP'), ('B', 'NN'), ('A', 'DT'), ('States', 'NNPS'), ('a', 'DT'), ('b', 'NN'), ('Optimized', 'VBN'), ('Transition', 'NNP'), ('Table', 'NN'), ('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('2', 'CD'), ('–', ':'), ('Lexical', 'JJ'), ('Analyzer', 'NN'), ('‹#›', 'NN'), ('Conversion', 'NN'), ('from', 'IN'), ('regular', 'JJ'), ('expression', 'NN'), ('to', 'IN'), ('DFA', 'NN'), ('Rules', 'NNS'), ('to', 'TO'), ('compute', 'VB'), ('nullable', 'NN'), (',', ','), ('firstpos', 'NN'), (',', ','), ('lastpos', 'NN'), ('nullable', 'NN'), ('(', '-LRB-'), ('n', 'NN'), (')', '-RRB-')] 

 Lemmas are: 
>> [('If', 'if'), ('we', 'we'), ('chose', 'choose'), ('A', 'a'), ('as', 'as'), ('the', 'the'), ('representative', 'representative'), ('for', 'for'), ('group', 'group'), ('(', '('), ('AC', 'AC'), (')', ')'), (',', ','), ('then', 'then'), ('we', 'we'), ('obtain', 'obtain'), ('reduced', 'reduce'), ('transition', 'transition'), ('table', 'table'), ('A', 'A'), ('B', 'b'), ('C', 'C'), ('B', 'b'), ('B', 'b'), ('D', 'D'), ('C', 'C'), ('B', 'b'), ('C', 'C'), ('D', 'D'), ('B', 'b'), ('E', 'e'), ('E', 'e'), ('B', 'b'), ('C', 'C'), ('States', 'State'), ('a', 'a'), ('b', 'b'), ('Nonaccepting', 'Nonaccepting'), ('States', 'State'), ('Accepting', 'accept'), ('States', 'State'), ('A', 'A'), ('B', 'B'), ('A', 'A'), ('B', 'B'), ('B', 'B'), ('D', 'D'), ('D', 'D'), ('B', 'b'), ('E', 'E'), ('E', 'E'), ('B', 'b'), ('A', 'a'), ('States', 'State'), ('a', 'a'), ('b', 'b'), ('Optimized', 'optimize'), ('Transition', 'Transition'), ('Table', 'table'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('2', '2'), ('–', '-'), ('Lexical', 'lexical'), ('Analyzer', 'analyzer'), ('‹#›', '‹#›'), ('Conversion', 'conversion'), ('from', 'from'), ('regular', 'regular'), ('expression', 'expression'), ('to', 'to'), ('DFA', 'dfa'), ('Rules', 'rule'), ('to', 'to'), ('compute', 'compute'), ('nullable', 'nullable'), (',', ','), ('firstpos', 'firstpos'), (',', ','), ('lastpos', 'lastpos'), ('nullable', 'nullable'), ('(', '('), ('n', 'n'), (')', ')')] 

 Dependency tags are: 
>> [(('If', 'chose'), 'mark'), (('we', 'chose'), 'nsubj'), (('chose', 'obtain'), 'advcl'), (('A', 'chose'), 'obj'), (('as', 'representative'), 'case'), (('the', 'representative'), 'det'), (('representative', 'chose'), 'obl'), (('for', 'group'), 'case'), (('group', 'representative'), 'nmod'), (('(', 'AC'), 'punct'), (('AC', 'group'), 'appos'), ((')', 'AC'), 'punct'), ((',', 'chose'), 'punct'), (('then', 'obtain'), 'advmod'), (('we', 'obtain'), 'nsubj'), (('obtain', 'root'), 'root'), (('reduced', 'table'), 'amod'), (('transition', 'table'), 'compound'), (('table', 'obtain'), 'obj'), (('A', 'B'), 'compound'), (('B', 'table'), 'compound'), (('C', 'D'), 'compound'), (('B', 'D'), 'compound'), (('B', 'D'), 'compound'), (('D', 'table'), 'appos'), (('C', 'B'), 'compound'), (('B', 'D'), 'compound'), (('C', 'D'), 'compound'), (('D', 'B'), 'compound'), (('B', 'E'), 'compound'), (('E', 'B'), 'appos'), (('E', 'States'), 'compound'), (('B', 'States'), 'compound'), (('C', 'States'), 'compound'), (('States', 'E'), 'appos'), (('a', 'States'), 'det'), (('b', 'States'), 'compound'), (('Nonaccepting', 'States'), 'compound'), (('States', 'table'), 'conj'), (('Accepting', 'States'), 'amod'), (('States', 'States'), 'compound'), (('A', 'B'), 'compound'), (('B', 'States'), 'compound'), (('A', 'D'), 'compound'), (('B', 'D'), 'compound'), (('B', 'D'), 'compound'), (('D', 'D'), 'compound'), (('D', 'E'), 'compound'), (('B', 'E'), 'compound'), (('E', 'B'), 'compound'), (('E', 'B'), 'compound'), (('B', 'table'), 'conj'), (('A', 'States'), 'det'), (('States', 'obtain'), 'parataxis'), (('a', 'Table'), 'det'), (('b', 'Optimized'), 'compound'), (('Optimized', 'Table'), 'amod'), (('Transition', 'Table'), 'compound'), (('Table', 'obtain'), 'parataxis'), (('Prof.', 'Kagathara'), 'compound'), (('Dixita', 'Kagathara'), 'compound'), (('B', 'Kagathara'), 'compound'), (('Kagathara', '#'), 'compound'), (('#', 'Table'), 'appos'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', 'Unit'), 'appos'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', '#'), 'appos'), (('2', 'Unit'), 'nummod'), (('–', 'Unit'), 'punct'), (('Lexical', 'Analyzer'), 'amod'), (('Analyzer', 'Conversion'), 'compound'), (('‹#›', 'Conversion'), 'compound'), (('Conversion', 'Unit'), 'appos'), (('from', 'expression'), 'case'), (('regular', 'expression'), 'amod'), (('expression', 'Conversion'), 'nmod'), (('to', 'Rules'), 'case'), (('DFA', 'Rules'), 'compound'), (('Rules', 'expression'), 'nmod'), (('to', 'compute'), 'mark'), (('compute', 'Conversion'), 'acl'), (('nullable', 'compute'), 'obj'), ((',', 'firstpos'), 'punct'), (('firstpos', 'nullable'), 'conj'), ((',', 'nullable'), 'punct'), (('lastpos', 'nullable'), 'compound'), (('nullable', 'nullable'), 'conj'), (('(', 'n'), 'punct'), (('n', 'nullable'), 'appos'), ((')', 'n'), 'punct')]

 Named Entities are: 
>> [('2', 'CARDINAL')]

========================== Sentence 98 ===========================

 The subtree at node  generates languages including the empty string. 

Tokens are: 
>> ['The', 'subtree', 'at', 'node', 'generates', 'languages', 'including', 'the', 'empty', 'string', '.'] 

 UPOS tags are: 
>> [('The', 'DET'), ('subtree', 'NOUN'), ('at', 'ADP'), ('node', 'NOUN'), ('generates', 'VERB'), ('languages', 'NOUN'), ('including', 'VERB'), ('the', 'DET'), ('empty', 'ADJ'), ('string', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('The', 'DT'), ('subtree', 'NN'), ('at', 'IN'), ('node', 'NN'), ('generates', 'VBZ'), ('languages', 'NNS'), ('including', 'VBG'), ('the', 'DT'), ('empty', 'JJ'), ('string', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('The', 'the'), ('subtree', 'subtree'), ('at', 'at'), ('node', 'node'), ('generates', 'generate'), ('languages', 'language'), ('including', 'include'), ('the', 'the'), ('empty', 'empty'), ('string', 'string'), ('.', '.')] 

 Dependency tags are: 
>> [(('The', 'subtree'), 'det'), (('subtree', 'generates'), 'nsubj'), (('at', 'node'), 'case'), (('node', 'subtree'), 'nmod'), (('generates', 'root'), 'root'), (('languages', 'generates'), 'obj'), (('including', 'string'), 'case'), (('the', 'string'), 'det'), (('empty', 'string'), 'amod'), (('string', 'languages'), 'nmod'), (('.', 'generates'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 99 ===========================

 firstpos(n) 

Tokens are: 
>> ['firstpos', '(', 'n', ')'] 

 UPOS tags are: 
>> [('firstpos', 'PROPN'), ('(', 'PUNCT'), ('n', 'PROPN'), (')', 'PUNCT')] 

 XPOS tags are: 
>> [('firstpos', 'NNP'), ('(', '-LRB-'), ('n', 'NNP'), (')', '-RRB-')] 

 Lemmas are: 
>> [('firstpos', 'firstpos'), ('(', '('), ('n', 'n'), (')', ')')] 

 Dependency tags are: 
>> [(('firstpos', 'root'), 'root'), (('(', 'n'), 'punct'), (('n', 'firstpos'), 'appos'), ((')', 'n'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 100 ===========================

 The set of positions that can match the first symbol of a string generated by the subtree at node  lastpos(n) 

Tokens are: 
>> ['The', 'set', 'of', 'positions', 'that', 'can', 'match', 'the', 'first', 'symbol', 'of', 'a', 'string', 'generated', 'by', 'the', 'subtree', 'at', 'node', 'lastpos', '(', 'n', ')'] 

 UPOS tags are: 
>> [('The', 'DET'), ('set', 'NOUN'), ('of', 'ADP'), ('positions', 'NOUN'), ('that', 'PRON'), ('can', 'AUX'), ('match', 'VERB'), ('the', 'DET'), ('first', 'ADJ'), ('symbol', 'NOUN'), ('of', 'ADP'), ('a', 'DET'), ('string', 'NOUN'), ('generated', 'VERB'), ('by', 'ADP'), ('the', 'DET'), ('subtree', 'NOUN'), ('at', 'ADP'), ('node', 'NOUN'), ('lastpos', 'NOUN'), ('(', 'PUNCT'), ('n', 'NOUN'), (')', 'PUNCT')] 

 XPOS tags are: 
>> [('The', 'DT'), ('set', 'NN'), ('of', 'IN'), ('positions', 'NNS'), ('that', 'WDT'), ('can', 'MD'), ('match', 'VB'), ('the', 'DT'), ('first', 'JJ'), ('symbol', 'NN'), ('of', 'IN'), ('a', 'DT'), ('string', 'NN'), ('generated', 'VBN'), ('by', 'IN'), ('the', 'DT'), ('subtree', 'NN'), ('at', 'IN'), ('node', 'NN'), ('lastpos', 'NN'), ('(', '-LRB-'), ('n', 'NN'), (')', '-RRB-')] 

 Lemmas are: 
>> [('The', 'the'), ('set', 'set'), ('of', 'of'), ('positions', 'position'), ('that', 'that'), ('can', 'can'), ('match', 'match'), ('the', 'the'), ('first', 'first'), ('symbol', 'symbol'), ('of', 'of'), ('a', 'a'), ('string', 'string'), ('generated', 'generate'), ('by', 'by'), ('the', 'the'), ('subtree', 'subtree'), ('at', 'at'), ('node', 'node'), ('lastpos', 'lastpos'), ('(', '('), ('n', 'n'), (')', ')')] 

 Dependency tags are: 
>> [(('The', 'set'), 'det'), (('set', 'root'), 'root'), (('of', 'positions'), 'case'), (('positions', 'set'), 'nmod'), (('that', 'match'), 'nsubj'), (('can', 'match'), 'aux'), (('match', 'positions'), 'acl:relcl'), (('the', 'symbol'), 'det'), (('first', 'symbol'), 'amod'), (('symbol', 'match'), 'obj'), (('of', 'string'), 'case'), (('a', 'string'), 'det'), (('string', 'symbol'), 'nmod'), (('generated', 'string'), 'acl'), (('by', 'subtree'), 'case'), (('the', 'subtree'), 'det'), (('subtree', 'generated'), 'obl'), (('at', 'lastpos'), 'case'), (('node', 'lastpos'), 'compound'), (('lastpos', 'subtree'), 'nmod'), (('(', 'n'), 'punct'), (('n', 'lastpos'), 'appos'), ((')', 'n'), 'punct')]

 Named Entities are: 
>> [('first', 'ORDINAL')]

========================== Sentence 101 ===========================

 The set of positions that can match the last symbol of a string generated be the subtree at node  followpos(i) 

Tokens are: 
>> ['The', 'set', 'of', 'positions', 'that', 'can', 'match', 'the', 'last', 'symbol', 'of', 'a', 'string', 'generated', 'be', 'the', 'subtree', 'at', 'node', 'followpos', '(', 'i)'] 

 UPOS tags are: 
>> [('The', 'DET'), ('set', 'NOUN'), ('of', 'ADP'), ('positions', 'NOUN'), ('that', 'PRON'), ('can', 'AUX'), ('match', 'VERB'), ('the', 'DET'), ('last', 'ADJ'), ('symbol', 'NOUN'), ('of', 'ADP'), ('a', 'DET'), ('string', 'NOUN'), ('generated', 'VERB'), ('be', 'AUX'), ('the', 'DET'), ('subtree', 'NOUN'), ('at', 'ADP'), ('node', 'NOUN'), ('followpos', 'NOUN'), ('(', 'PUNCT'), ('i)', 'X')] 

 XPOS tags are: 
>> [('The', 'DT'), ('set', 'NN'), ('of', 'IN'), ('positions', 'NNS'), ('that', 'WDT'), ('can', 'MD'), ('match', 'VB'), ('the', 'DT'), ('last', 'JJ'), ('symbol', 'NN'), ('of', 'IN'), ('a', 'DT'), ('string', 'NN'), ('generated', 'VBN'), ('be', 'VB'), ('the', 'DT'), ('subtree', 'NN'), ('at', 'IN'), ('node', 'NN'), ('followpos', 'NNS'), ('(', '-LRB-'), ('i)', 'ADD')] 

 Lemmas are: 
>> [('The', 'the'), ('set', 'set'), ('of', 'of'), ('positions', 'position'), ('that', 'that'), ('can', 'can'), ('match', 'match'), ('the', 'the'), ('last', 'last'), ('symbol', 'symbol'), ('of', 'of'), ('a', 'a'), ('string', 'string'), ('generated', 'generate'), ('be', 'be'), ('the', 'the'), ('subtree', 'subtree'), ('at', 'at'), ('node', 'node'), ('followpos', 'followpo'), ('(', '('), ('i)', 'i)')] 

 Dependency tags are: 
>> [(('The', 'set'), 'det'), (('set', 'subtree'), 'nsubj'), (('of', 'positions'), 'case'), (('positions', 'set'), 'nmod'), (('that', 'match'), 'nsubj'), (('can', 'match'), 'aux'), (('match', 'positions'), 'acl:relcl'), (('the', 'symbol'), 'det'), (('last', 'symbol'), 'amod'), (('symbol', 'match'), 'obj'), (('of', 'string'), 'case'), (('a', 'string'), 'det'), (('string', 'symbol'), 'nmod'), (('generated', 'string'), 'acl'), (('be', 'subtree'), 'cop'), (('the', 'subtree'), 'det'), (('subtree', 'root'), 'root'), (('at', 'followpos'), 'case'), (('node', 'followpos'), 'compound'), (('followpos', 'subtree'), 'nmod'), (('(', 'i)'), 'punct'), (('i)', 'subtree'), 'appos')]

 Named Entities are: 
>> []

========================== Sentence 102 ===========================

 The set of positions that can follow position  in the tree. 

Tokens are: 
>> ['The', 'set', 'of', 'positions', 'that', 'can', 'follow', 'position', 'in', 'the', 'tree', '.'] 

 UPOS tags are: 
>> [('The', 'DET'), ('set', 'NOUN'), ('of', 'ADP'), ('positions', 'NOUN'), ('that', 'PRON'), ('can', 'AUX'), ('follow', 'VERB'), ('position', 'NOUN'), ('in', 'ADP'), ('the', 'DET'), ('tree', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('The', 'DT'), ('set', 'NN'), ('of', 'IN'), ('positions', 'NNS'), ('that', 'WDT'), ('can', 'MD'), ('follow', 'VB'), ('position', 'NN'), ('in', 'IN'), ('the', 'DT'), ('tree', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('The', 'the'), ('set', 'set'), ('of', 'of'), ('positions', 'position'), ('that', 'that'), ('can', 'can'), ('follow', 'follow'), ('position', 'position'), ('in', 'in'), ('the', 'the'), ('tree', 'tree'), ('.', '.')] 

 Dependency tags are: 
>> [(('The', 'set'), 'det'), (('set', 'root'), 'root'), (('of', 'positions'), 'case'), (('positions', 'set'), 'nmod'), (('that', 'follow'), 'nsubj'), (('can', 'follow'), 'aux'), (('follow', 'positions'), 'acl:relcl'), (('position', 'follow'), 'obj'), (('in', 'tree'), 'case'), (('the', 'tree'), 'det'), (('tree', 'follow'), 'obl'), (('.', 'set'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 103 ===========================

 Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Rules to compute nullable, firstpos, lastpos 	Node n	nullable(n)	firstpos(n)	lastpos(n) 

Tokens are: 
>> ['Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '2', '–', 'Lexical', 'Analyzer', '‹#›', 'Rules', 'to', 'compute', 'nullable', ',', 'firstpos', ',', 'lastpos', 'Node', 'n', 'nullable', '(', 'n', ')', 'firstpos', '(', 'n', ')', 'lastpos', '(', 'n', ')'] 

 UPOS tags are: 
>> [('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'ADJ'), ('Analyzer', 'NOUN'), ('‹#›', 'NOUN'), ('Rules', 'NOUN'), ('to', 'PART'), ('compute', 'VERB'), ('nullable', 'NOUN'), (',', 'PUNCT'), ('firstpos', 'NOUN'), (',', 'PUNCT'), ('lastpos', 'NOUN'), ('Node', 'NOUN'), ('n', 'NOUN'), ('nullable', 'NOUN'), ('(', 'PUNCT'), ('n', 'NOUN'), (')', 'PUNCT'), ('firstpos', 'NOUN'), ('(', 'PUNCT'), ('n', 'NOUN'), (')', 'PUNCT'), ('lastpos', 'NOUN'), ('(', 'PUNCT'), ('n', 'NOUN'), (')', 'PUNCT')] 

 XPOS tags are: 
>> [('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('2', 'CD'), ('–', ','), ('Lexical', 'JJ'), ('Analyzer', 'NN'), ('‹#›', 'NN'), ('Rules', 'NNS'), ('to', 'TO'), ('compute', 'VB'), ('nullable', 'NN'), (',', ','), ('firstpos', 'NN'), (',', ','), ('lastpos', 'NN'), ('Node', 'NN'), ('n', 'NN'), ('nullable', 'NN'), ('(', '-LRB-'), ('n', 'NN'), (')', '-RRB-'), ('firstpos', 'NN'), ('(', '-LRB-'), ('n', 'NN'), (')', '-RRB-'), ('lastpos', 'NN'), ('(', '-LRB-'), ('n', 'NN'), (')', '-RRB-')] 

 Lemmas are: 
>> [('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('2', '2'), ('–', '-'), ('Lexical', 'lexical'), ('Analyzer', 'analyzer'), ('‹#›', '‹#›'), ('Rules', 'rule'), ('to', 'to'), ('compute', 'compute'), ('nullable', 'nullable'), (',', ','), ('firstpos', 'firstpos'), (',', ','), ('lastpos', 'lastpos'), ('Node', 'node'), ('n', 'n'), ('nullable', 'nullable'), ('(', '('), ('n', 'n'), (')', ')'), ('firstpos', 'firstpos'), ('(', '('), ('n', 'n'), (')', ')'), ('lastpos', 'lastpos'), ('(', '('), ('n', 'n'), (')', ')')] 

 Dependency tags are: 
>> [(('Prof.', 'root'), 'root'), (('Dixita', 'Prof.'), 'flat'), (('B', 'Kagathara'), 'compound'), (('Kagathara', 'Prof.'), 'flat'), (('#', 'Prof.'), 'list'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', 'Unit'), 'compound'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', 'Prof.'), 'list'), (('2', 'Unit'), 'nummod'), (('–', 'Unit'), 'punct'), (('Lexical', 'Analyzer'), 'amod'), (('Analyzer', 'Rules'), 'compound'), (('‹#›', 'Rules'), 'compound'), (('Rules', 'Prof.'), 'appos'), (('to', 'compute'), 'mark'), (('compute', 'Rules'), 'acl'), (('nullable', 'compute'), 'obj'), ((',', 'firstpos'), 'punct'), (('firstpos', 'nullable'), 'appos'), ((',', 'nullable'), 'punct'), (('lastpos', 'nullable'), 'compound'), (('Node', 'nullable'), 'compound'), (('n', 'nullable'), 'compound'), (('nullable', 'nullable'), 'conj'), (('(', 'n'), 'punct'), (('n', 'nullable'), 'appos'), ((')', 'n'), 'punct'), (('firstpos', 'lastpos'), 'compound'), (('(', 'n'), 'punct'), (('n', 'lastpos'), 'compound'), ((')', 'n'), 'punct'), (('lastpos', 'nullable'), 'appos'), (('(', 'n'), 'punct'), (('n', 'lastpos'), 'appos'), ((')', 'n'), 'punct')]

 Named Entities are: 
>> [('2170701', 'CARDINAL'), ('2', 'CARDINAL')]

========================== Sentence 104 ===========================

 A leaf labeled by 	true		  	A leaf with position 	false		  		nullable(c1) or nullable(c2)	firstpos(c1)    firstpos(c2)	lastpos(c1)    lastpos(c2)  		nullable(c1)  and nullable(c2)	if  (nullable(c1))  thenfirstpos(c1)  firstpos(c2) else  firstpos(c1)	if  (nullable(c2)) then  lastpos(c1)  lastpos(c2) else lastpos(c2)  		true	firstpos(c1)	lastpos(c1)   n c1 c2 n  n  c1 c2 c1    Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Rules to compute followpos 

Tokens are: 
>> ['A', 'leaf', 'labeled', 'by', 'true', 'A', 'leaf', 'with', 'position', 'false', 'nullable', '(', 'c1', ')', 'or', 'nullable', '(', 'c2', ')', 'firstpos', '(', 'c1', ')', '\uf0c8', 'firstpos', '(', 'c2', ')', 'lastpos', '(', 'c1', ')', '\uf0c8', 'lastpos', '(', 'c2', ')', 'nullable', '(', 'c1', ')', 'and', 'nullable', '(', 'c2', ')', 'if', '(', 'nullable', '(', 'c1', ')', ')', 'thenfirstpos', '(', 'c1', ')', '\uf0c8', 'firstpos', '(', 'c2', ')', 'else', 'firstpos', '(', 'c1', ')', 'if', '(', 'nullable', '(', 'c2', ')', ')', 'then', 'lastpos', '(', 'c1', ')', '\uf0c8', 'lastpos', '(', 'c2', ')', 'else', 'lastpos', '(', 'c2', ')', 'true', 'firstpos', '(', 'c1', ')', 'lastpos', '(', 'c1', ')', 'n', 'c', '1', 'c2', 'n', 'n', 'c1', 'c2', 'c1', 'Prof', '.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '2', '–', 'Lexical', 'Analyzer', '‹#›', 'Rules', 'to', 'compute', 'followpos'] 

 UPOS tags are: 
>> [('A', 'DET'), ('leaf', 'NOUN'), ('labeled', 'VERB'), ('by', 'ADP'), ('true', 'ADJ'), ('A', 'DET'), ('leaf', 'NOUN'), ('with', 'ADP'), ('position', 'NOUN'), ('false', 'ADJ'), ('nullable', 'NOUN'), ('(', 'PUNCT'), ('c1', 'NUM'), (')', 'PUNCT'), ('or', 'CCONJ'), ('nullable', 'NOUN'), ('(', 'PUNCT'), ('c2', 'NOUN'), (')', 'PUNCT'), ('firstpos', 'NOUN'), ('(', 'PUNCT'), ('c1', 'NUM'), (')', 'PUNCT'), ('\uf0c8', 'PUNCT'), ('firstpos', 'NOUN'), ('(', 'PUNCT'), ('c2', 'NUM'), (')', 'PUNCT'), ('lastpos', 'NOUN'), ('(', 'PUNCT'), ('c1', 'NUM'), (')', 'PUNCT'), ('\uf0c8', 'PUNCT'), ('lastpos', 'NOUN'), ('(', 'PUNCT'), ('c2', 'NOUN'), (')', 'PUNCT'), ('nullable', 'NOUN'), ('(', 'PUNCT'), ('c1', 'NUM'), (')', 'PUNCT'), ('and', 'CCONJ'), ('nullable', 'NOUN'), ('(', 'PUNCT'), ('c2', 'NUM'), (')', 'PUNCT'), ('if', 'SCONJ'), ('(', 'PUNCT'), ('nullable', 'NOUN'), ('(', 'PUNCT'), ('c1', 'NUM'), (')', 'PUNCT'), (')', 'PUNCT'), ('thenfirstpos', 'NOUN'), ('(', 'PUNCT'), ('c1', 'NUM'), (')', 'PUNCT'), ('\uf0c8', 'PUNCT'), ('firstpos', 'NOUN'), ('(', 'PUNCT'), ('c2', 'NUM'), (')', 'PUNCT'), ('else', 'ADJ'), ('firstpos', 'NOUN'), ('(', 'PUNCT'), ('c1', 'NUM'), (')', 'PUNCT'), ('if', 'SCONJ'), ('(', 'PUNCT'), ('nullable', 'NOUN'), ('(', 'PUNCT'), ('c2', 'NUM'), (')', 'PUNCT'), (')', 'PUNCT'), ('then', 'ADV'), ('lastpos', 'NOUN'), ('(', 'PUNCT'), ('c1', 'NUM'), (')', 'PUNCT'), ('\uf0c8', 'PUNCT'), ('lastpos', 'NOUN'), ('(', 'PUNCT'), ('c2', 'NUM'), (')', 'PUNCT'), ('else', 'ADJ'), ('lastpos', 'NOUN'), ('(', 'PUNCT'), ('c2', 'NUM'), (')', 'PUNCT'), ('true', 'ADJ'), ('firstpos', 'NOUN'), ('(', 'PUNCT'), ('c1', 'NUM'), (')', 'PUNCT'), ('lastpos', 'NOUN'), ('(', 'PUNCT'), ('c1', 'NUM'), (')', 'PUNCT'), ('n', 'NOUN'), ('c', 'NOUN'), ('1', 'NUM'), ('c2', 'NOUN'), ('n', 'NOUN'), ('n', 'NOUN'), ('c1', 'NOUN'), ('c2', 'NOUN'), ('c1', 'NUM'), ('Prof', 'PROPN'), ('.', 'PUNCT'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'ADJ'), ('Analyzer', 'NOUN'), ('‹#›', 'NOUN'), ('Rules', 'NOUN'), ('to', 'PART'), ('compute', 'VERB'), ('followpos', 'NOUN')] 

 XPOS tags are: 
>> [('A', 'DT'), ('leaf', 'NN'), ('labeled', 'VBN'), ('by', 'IN'), ('true', 'JJ'), ('A', 'DT'), ('leaf', 'NN'), ('with', 'IN'), ('position', 'NN'), ('false', 'JJ'), ('nullable', 'NN'), ('(', '-LRB-'), ('c1', 'CD'), (')', '-RRB-'), ('or', 'CC'), ('nullable', 'NN'), ('(', '-LRB-'), ('c2', 'NN'), (')', '-RRB-'), ('firstpos', 'NN'), ('(', '-LRB-'), ('c1', 'CD'), (')', '-RRB-'), ('\uf0c8', ','), ('firstpos', 'NN'), ('(', '-LRB-'), ('c2', 'CD'), (')', '-RRB-'), ('lastpos', 'NN'), ('(', '-LRB-'), ('c1', 'CD'), (')', '-RRB-'), ('\uf0c8', ','), ('lastpos', 'NN'), ('(', '-LRB-'), ('c2', 'NN'), (')', '-RRB-'), ('nullable', 'NN'), ('(', '-LRB-'), ('c1', 'CD'), (')', '-RRB-'), ('and', 'CC'), ('nullable', 'NN'), ('(', '-LRB-'), ('c2', 'CD'), (')', '-RRB-'), ('if', 'IN'), ('(', '-LRB-'), ('nullable', 'NN'), ('(', '-LRB-'), ('c1', 'CD'), (')', '-RRB-'), (')', '-RRB-'), ('thenfirstpos', 'NNS'), ('(', '-LRB-'), ('c1', 'CD'), (')', '-RRB-'), ('\uf0c8', ','), ('firstpos', 'NN'), ('(', '-LRB-'), ('c2', 'CD'), (')', '-RRB-'), ('else', 'JJ'), ('firstpos', 'NN'), ('(', '-LRB-'), ('c1', 'CD'), (')', '-RRB-'), ('if', 'IN'), ('(', '-LRB-'), ('nullable', 'NN'), ('(', '-LRB-'), ('c2', 'CD'), (')', '-RRB-'), (')', '-RRB-'), ('then', 'RB'), ('lastpos', 'NN'), ('(', '-LRB-'), ('c1', 'CD'), (')', '-RRB-'), ('\uf0c8', ','), ('lastpos', 'NN'), ('(', '-LRB-'), ('c2', 'CD'), (')', '-RRB-'), ('else', 'JJ'), ('lastpos', 'NN'), ('(', '-LRB-'), ('c2', 'CD'), (')', '-RRB-'), ('true', 'JJ'), ('firstpos', 'NN'), ('(', '-LRB-'), ('c1', 'CD'), (')', '-RRB-'), ('lastpos', 'NN'), ('(', '-LRB-'), ('c1', 'CD'), (')', '-RRB-'), ('n', 'NN'), ('c', 'NN'), ('1', 'CD'), ('c2', 'NN'), ('n', 'NN'), ('n', 'NN'), ('c1', 'NN'), ('c2', 'NN'), ('c1', 'CD'), ('Prof', 'NNP'), ('.', '.'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('2', 'CD'), ('–', ':'), ('Lexical', 'JJ'), ('Analyzer', 'NN'), ('‹#›', 'NN'), ('Rules', 'NNS'), ('to', 'TO'), ('compute', 'VB'), ('followpos', 'NNS')] 

 Lemmas are: 
>> [('A', 'a'), ('leaf', 'leaf'), ('labeled', 'label'), ('by', 'by'), ('true', 'true'), ('A', 'a'), ('leaf', 'leaf'), ('with', 'with'), ('position', 'position'), ('false', 'false'), ('nullable', 'nullable'), ('(', '('), ('c1', 'c1'), (')', ')'), ('or', 'or'), ('nullable', 'nullable'), ('(', '('), ('c2', 'c2'), (')', ')'), ('firstpos', 'firstpos'), ('(', '('), ('c1', 'c1'), (')', ')'), ('\uf0c8', "''"), ('firstpos', 'firstpos'), ('(', '('), ('c2', 'c2'), (')', ')'), ('lastpos', 'lastpos'), ('(', '('), ('c1', 'c1'), (')', ')'), ('\uf0c8', "''"), ('lastpos', 'lastpos'), ('(', '('), ('c2', 'c2'), (')', ')'), ('nullable', 'nullable'), ('(', '('), ('c1', 'c1'), (')', ')'), ('and', 'and'), ('nullable', 'nullable'), ('(', '('), ('c2', 'c2'), (')', ')'), ('if', 'if'), ('(', '('), ('nullable', 'nullable'), ('(', '('), ('c1', 'c1'), (')', ')'), (')', ')'), ('thenfirstpos', 'thenfirstpos'), ('(', '('), ('c1', 'c1'), (')', ')'), ('\uf0c8', "''"), ('firstpos', 'firstpos'), ('(', '('), ('c2', 'c2'), (')', ')'), ('else', 'else'), ('firstpos', 'firstpos'), ('(', '('), ('c1', 'c1'), (')', ')'), ('if', 'if'), ('(', '('), ('nullable', 'nullable'), ('(', '('), ('c2', 'c2'), (')', ')'), (')', ')'), ('then', 'then'), ('lastpos', 'lastpos'), ('(', '('), ('c1', 'c1'), (')', ')'), ('\uf0c8', "''"), ('lastpos', 'lastpos'), ('(', '('), ('c2', 'c2'), (')', ')'), ('else', 'else'), ('lastpos', 'lastpos'), ('(', '('), ('c2', 'c2'), (')', ')'), ('true', 'true'), ('firstpos', 'firstpos'), ('(', '('), ('c1', 'c1'), (')', ')'), ('lastpos', 'lastpos'), ('(', '('), ('c1', 'c1'), (')', ')'), ('n', 'n'), ('c', 'c'), ('1', '1'), ('c2', 'c2'), ('n', 'n'), ('n', 'n'), ('c1', 'c1'), ('c2', 'c2'), ('c1', 'c1'), ('Prof', 'Prof'), ('.', '.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('2', '2'), ('–', '-'), ('Lexical', 'lexical'), ('Analyzer', 'analyzer'), ('‹#›', '‹#›'), ('Rules', 'rule'), ('to', 'to'), ('compute', 'compute'), ('followpos', 'followpo')] 

 Dependency tags are: 
>> [(('A', 'leaf'), 'det'), (('leaf', 'root'), 'root'), (('labeled', 'leaf'), 'acl'), (('by', 'leaf'), 'case'), (('true', 'leaf'), 'amod'), (('A', 'leaf'), 'det'), (('leaf', 'labeled'), 'obl'), (('with', 'nullable'), 'case'), (('position', 'nullable'), 'compound'), (('false', 'nullable'), 'amod'), (('nullable', 'leaf'), 'nmod'), (('(', 'c1'), 'punct'), (('c1', 'nullable'), 'dep'), ((')', 'c1'), 'punct'), (('or', 'nullable'), 'cc'), (('nullable', 'nullable'), 'conj'), (('(', 'c2'), 'punct'), (('c2', 'firstpos'), 'appos'), ((')', 'c2'), 'punct'), (('firstpos', 'firstpos'), 'compound'), (('(', 'c1'), 'punct'), (('c1', 'firstpos'), 'dep'), ((')', 'c1'), 'punct'), (('\uf0c8', 'c1'), 'punct'), (('firstpos', 'leaf'), 'conj'), (('(', 'c2'), 'punct'), (('c2', 'lastpos'), 'dep'), ((')', 'c2'), 'punct'), (('lastpos', 'firstpos'), 'appos'), (('(', 'c1'), 'punct'), (('c1', 'lastpos'), 'dep'), ((')', 'c1'), 'punct'), (('\uf0c8', 'c1'), 'punct'), (('lastpos', 'lastpos'), 'appos'), (('(', 'c2'), 'punct'), (('c2', 'nullable'), 'appos'), ((')', 'c2'), 'punct'), (('nullable', 'lastpos'), 'appos'), (('(', 'c1'), 'punct'), (('c1', 'nullable'), 'nmod:tmod'), ((')', 'c1'), 'punct'), (('and', 'nullable'), 'cc'), (('nullable', 'nullable'), 'conj'), (('(', 'c2'), 'punct'), (('c2', 'nullable'), 'dep'), ((')', 'c2'), 'punct'), (('if', 'nullable'), 'mark'), (('(', 'nullable'), 'punct'), (('nullable', 'nullable'), 'dep'), (('(', 'c1'), 'punct'), (('c1', 'nullable'), 'dep'), ((')', 'c1'), 'punct'), ((')', 'c1'), 'punct'), (('thenfirstpos', 'nullable'), 'conj'), (('(', 'c1'), 'punct'), (('c1', 'thenfirstpos'), 'nmod:tmod'), ((')', 'c1'), 'punct'), (('\uf0c8', 'c1'), 'punct'), (('firstpos', 'thenfirstpos'), 'conj'), (('(', 'c2'), 'punct'), (('c2', 'firstpos'), 'dep'), ((')', 'c2'), 'punct'), (('else', 'c2'), 'advmod'), (('firstpos', 'firstpos'), 'appos'), (('(', 'c1'), 'punct'), (('c1', 'firstpos'), 'nmod:tmod'), ((')', 'c1'), 'punct'), (('if', 'nullable'), 'mark'), (('(', 'nullable'), 'punct'), (('nullable', 'firstpos'), 'compound'), (('(', 'c2'), 'punct'), (('c2', 'nullable'), 'dep'), ((')', 'c2'), 'punct'), ((')', 'c2'), 'punct'), (('then', 'lastpos'), 'advmod'), (('lastpos', 'nullable'), 'conj'), (('(', 'c1'), 'punct'), (('c1', 'lastpos'), 'dep'), ((')', 'c1'), 'punct'), (('\uf0c8', 'c1'), 'punct'), (('lastpos', 'lastpos'), 'conj'), (('(', 'c2'), 'punct'), (('c2', 'lastpos'), 'nummod'), ((')', 'c2'), 'punct'), (('else', 'c2'), 'advmod'), (('lastpos', 'lastpos'), 'compound'), (('(', 'c2'), 'punct'), (('c2', 'lastpos'), 'appos'), ((')', 'c2'), 'punct'), (('true', 'firstpos'), 'amod'), (('firstpos', 'lastpos'), 'appos'), (('(', 'c1'), 'punct'), (('c1', 'firstpos'), 'appos'), ((')', 'c1'), 'punct'), (('lastpos', 'firstpos'), 'appos'), (('(', 'c1'), 'punct'), (('c1', 'n'), 'nummod'), ((')', 'c1'), 'punct'), (('n', 'c'), 'compound'), (('c', 'lastpos'), 'appos'), (('1', 'n'), 'nummod'), (('c2', 'n'), 'compound'), (('n', 'n'), 'compound'), (('n', 'c'), 'appos'), (('c1', 'n'), 'compound'), (('c2', 'Prof'), 'compound'), (('c1', 'Prof'), 'nummod'), (('Prof', 'c1'), 'appos'), (('.', '#'), 'punct'), (('Dixita', 'Kagathara'), 'compound'), (('B', 'Kagathara'), 'compound'), (('Kagathara', '#'), 'compound'), (('#', 'Prof'), 'compound'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', '#'), 'appos'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', '#'), 'appos'), (('2', 'Unit'), 'nummod'), (('–', 'Rules'), 'punct'), (('Lexical', 'Analyzer'), 'amod'), (('Analyzer', 'Rules'), 'compound'), (('‹#›', 'Rules'), 'compound'), (('Rules', 'Unit'), 'appos'), (('to', 'compute'), 'mark'), (('compute', 'Rules'), 'acl'), (('followpos', 'compute'), 'obj')]

 Named Entities are: 
>> []

========================== Sentence 105 ===========================

 If n is concatenation node with left child c1 and right child c2 and i is a position in lastpos(c1), then all position in firstpos(c2) are in followpos(i) 

Tokens are: 
>> ['If', 'n', 'is', 'concatenation', 'node', 'with', 'left', 'child', 'c', '1', 'and', 'right', 'child', 'c', '2', 'and', 'i', 'is', 'a', 'position', 'in', 'lastpos', '(', 'c1', ')', ',', 'then', 'all', 'position', 'in', 'firstpos', '(', 'c2', ')', 'are', 'in', 'followpos', '(', 'i)'] 

 UPOS tags are: 
>> [('If', 'SCONJ'), ('n', 'PROPN'), ('is', 'AUX'), ('concatenation', 'NOUN'), ('node', 'NOUN'), ('with', 'ADP'), ('left', 'VERB'), ('child', 'NOUN'), ('c', 'PROPN'), ('1', 'NUM'), ('and', 'CCONJ'), ('right', 'ADJ'), ('child', 'NOUN'), ('c', 'PROPN'), ('2', 'NUM'), ('and', 'CCONJ'), ('i', 'PRON'), ('is', 'AUX'), ('a', 'DET'), ('position', 'NOUN'), ('in', 'ADP'), ('lastpos', 'PROPN'), ('(', 'PUNCT'), ('c1', 'NUM'), (')', 'PUNCT'), (',', 'PUNCT'), ('then', 'ADV'), ('all', 'DET'), ('position', 'NOUN'), ('in', 'ADP'), ('firstpos', 'NOUN'), ('(', 'PUNCT'), ('c2', 'NUM'), (')', 'PUNCT'), ('are', 'AUX'), ('in', 'ADP'), ('followpos', 'NOUN'), ('(', 'PUNCT'), ('i)', 'X')] 

 XPOS tags are: 
>> [('If', 'IN'), ('n', 'NNP'), ('is', 'VBZ'), ('concatenation', 'NN'), ('node', 'NN'), ('with', 'IN'), ('left', 'VBN'), ('child', 'NN'), ('c', 'NNP'), ('1', 'CD'), ('and', 'CC'), ('right', 'JJ'), ('child', 'NN'), ('c', 'NNP'), ('2', 'CD'), ('and', 'CC'), ('i', 'PRP'), ('is', 'VBZ'), ('a', 'DT'), ('position', 'NN'), ('in', 'IN'), ('lastpos', 'NNP'), ('(', '-LRB-'), ('c1', 'LS'), (')', '-RRB-'), (',', ','), ('then', 'RB'), ('all', 'DT'), ('position', 'NN'), ('in', 'IN'), ('firstpos', 'NN'), ('(', '-LRB-'), ('c2', 'LS'), (')', '-RRB-'), ('are', 'VBP'), ('in', 'IN'), ('followpos', 'NNS'), ('(', '-LRB-'), ('i)', 'ADD')] 

 Lemmas are: 
>> [('If', 'if'), ('n', 'n'), ('is', 'be'), ('concatenation', 'concatenation'), ('node', 'node'), ('with', 'with'), ('left', 'leave'), ('child', 'child'), ('c', 'c'), ('1', '1'), ('and', 'and'), ('right', 'right'), ('child', 'child'), ('c', 'c'), ('2', '2'), ('and', 'and'), ('i', 'I'), ('is', 'be'), ('a', 'a'), ('position', 'position'), ('in', 'in'), ('lastpos', 'lastpos'), ('(', '('), ('c1', 'c1'), (')', ')'), (',', ','), ('then', 'then'), ('all', 'all'), ('position', 'position'), ('in', 'in'), ('firstpos', 'firstpos'), ('(', '('), ('c2', 'c2'), (')', ')'), ('are', 'be'), ('in', 'in'), ('followpos', 'followpo'), ('(', '('), ('i)', 'i)')] 

 Dependency tags are: 
>> [(('If', 'node'), 'mark'), (('n', 'node'), 'nsubj'), (('is', 'node'), 'cop'), (('concatenation', 'node'), 'compound'), (('node', 'followpos'), 'advcl'), (('with', 'child'), 'case'), (('left', 'child'), 'amod'), (('child', 'node'), 'nmod'), (('c', 'child'), 'compound'), (('1', 'c'), 'nummod'), (('and', 'child'), 'cc'), (('right', 'child'), 'amod'), (('child', 'c'), 'conj'), (('c', 'child'), 'compound'), (('2', 'c'), 'nummod'), (('and', 'position'), 'cc'), (('i', 'position'), 'nsubj'), (('is', 'position'), 'cop'), (('a', 'position'), 'det'), (('position', 'node'), 'conj'), (('in', 'lastpos'), 'case'), (('lastpos', 'position'), 'nmod'), (('(', 'c1'), 'punct'), (('c1', 'position'), 'nummod'), ((')', 'c1'), 'punct'), ((',', 'position'), 'punct'), (('then', 'position'), 'advmod'), (('all', 'position'), 'det'), (('position', 'followpos'), 'nsubj'), (('in', 'firstpos'), 'case'), (('firstpos', 'position'), 'nmod'), (('(', 'c2'), 'punct'), (('c2', 'followpos'), 'nummod'), ((')', 'c2'), 'punct'), (('are', 'followpos'), 'cop'), (('in', 'followpos'), 'case'), (('followpos', 'root'), 'root'), (('(', 'i)'), 'punct'), (('i)', 'followpos'), 'appos')]

 Named Entities are: 
>> []

========================== Sentence 106 ===========================

 If n is * node and i is position in lastpos(n), then all position in firstpos(n) are in followpos(i)     Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Conversion from regular expression to DFA     .    . . .    (a|b) * abb     # Step 2: Nullable node  Here, * is only nullable node  Step 1: Construct Syntax Tree    Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Conversion from regular expression to DFA     .        .   .   .       Step 3: Calculate firstpos Firstpos 

Tokens are: 
>> ['If', 'n', 'is', '*', 'node', 'and', 'i', 'is', 'position', 'in', 'lastpos', '(', 'n', ')', ',', 'then', 'all', 'position', 'in', 'firstpos', '(', 'n', ')', 'are', 'in', 'followpos', '(', 'i)', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '2', '–', 'Lexical', 'Analyzer', '‹#›', 'Conversion', 'from', 'regular', 'expression', 'to', 'DFA', '.', '.', '.', '.', '(', 'a|', 'b', ')', '*', 'abb', '#', 'Step', '2', ':', 'Nullable', 'node', 'Here', ',', '*', 'is', 'only', 'nullable', 'node', 'Step', '1', ':', 'Construct', 'Syntax', 'Tree', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '2', '–', 'Lexical', 'Analyzer', '‹#›', 'Conversion', 'from', 'regular', 'expression', 'to', 'DFA', '.', '.', '.', '.', 'Step', '3', ':', 'Calculate', 'firstpos', 'Firstpos'] 

 UPOS tags are: 
>> [('If', 'SCONJ'), ('n', 'NOUN'), ('is', 'AUX'), ('*', 'PUNCT'), ('node', 'NOUN'), ('and', 'CCONJ'), ('i', 'PRON'), ('is', 'AUX'), ('position', 'NOUN'), ('in', 'ADP'), ('lastpos', 'PROPN'), ('(', 'PUNCT'), ('n', 'NOUN'), (')', 'PUNCT'), (',', 'PUNCT'), ('then', 'ADV'), ('all', 'DET'), ('position', 'NOUN'), ('in', 'ADP'), ('firstpos', 'NOUN'), ('(', 'PUNCT'), ('n', 'NOUN'), (')', 'PUNCT'), ('are', 'AUX'), ('in', 'ADP'), ('followpos', 'NOUN'), ('(', 'PUNCT'), ('i)', 'PROPN'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'ADJ'), ('Analyzer', 'NOUN'), ('‹#›', 'NOUN'), ('Conversion', 'NOUN'), ('from', 'ADP'), ('regular', 'ADJ'), ('expression', 'NOUN'), ('to', 'ADP'), ('DFA', 'NOUN'), ('.', 'PUNCT'), ('.', 'PUNCT'), ('.', 'PUNCT'), ('.', 'PUNCT'), ('(', 'PUNCT'), ('a|', 'NUM'), ('b', 'NOUN'), (')', 'PUNCT'), ('*', 'PUNCT'), ('abb', 'NOUN'), ('#', 'SYM'), ('Step', 'NOUN'), ('2', 'NUM'), (':', 'PUNCT'), ('Nullable', 'NOUN'), ('node', 'NOUN'), ('Here', 'ADV'), (',', 'PUNCT'), ('*', 'PUNCT'), ('is', 'AUX'), ('only', 'ADV'), ('nullable', 'ADJ'), ('node', 'NOUN'), ('Step', 'NOUN'), ('1', 'NUM'), (':', 'PUNCT'), ('Construct', 'NOUN'), ('Syntax', 'NOUN'), ('Tree', 'NOUN'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'ADJ'), ('Analyzer', 'NOUN'), ('‹#›', 'NOUN'), ('Conversion', 'NOUN'), ('from', 'ADP'), ('regular', 'ADJ'), ('expression', 'NOUN'), ('to', 'ADP'), ('DFA', 'PROPN'), ('.', 'PUNCT'), ('.', 'PUNCT'), ('.', 'PUNCT'), ('.', 'PUNCT'), ('Step', 'NOUN'), ('3', 'NUM'), (':', 'PUNCT'), ('Calculate', 'VERB'), ('firstpos', 'NOUN'), ('Firstpos', 'PROPN')] 

 XPOS tags are: 
>> [('If', 'IN'), ('n', 'NN'), ('is', 'VBZ'), ('*', 'NFP'), ('node', 'NN'), ('and', 'CC'), ('i', 'PRP'), ('is', 'VBZ'), ('position', 'NN'), ('in', 'IN'), ('lastpos', 'NNP'), ('(', '-LRB-'), ('n', 'NN'), (')', '-RRB-'), (',', ','), ('then', 'RB'), ('all', 'DT'), ('position', 'NN'), ('in', 'IN'), ('firstpos', 'NN'), ('(', '-LRB-'), ('n', 'NN'), (')', '-RRB-'), ('are', 'VBP'), ('in', 'IN'), ('followpos', 'NNS'), ('(', '-LRB-'), ('i)', 'NNP'), ('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('2', 'CD'), ('–', ':'), ('Lexical', 'JJ'), ('Analyzer', 'NN'), ('‹#›', 'NN'), ('Conversion', 'NN'), ('from', 'IN'), ('regular', 'JJ'), ('expression', 'NN'), ('to', 'IN'), ('DFA', 'NN'), ('.', '.'), ('.', '.'), ('.', '.'), ('.', '.'), ('(', '-LRB-'), ('a|', 'CD'), ('b', 'NN'), (')', '-RRB-'), ('*', 'NFP'), ('abb', 'NN'), ('#', 'NN'), ('Step', 'NN'), ('2', 'CD'), (':', ':'), ('Nullable', 'NN'), ('node', 'NN'), ('Here', 'RB'), (',', ','), ('*', 'NFP'), ('is', 'VBZ'), ('only', 'RB'), ('nullable', 'JJ'), ('node', 'NN'), ('Step', 'NN'), ('1', 'CD'), (':', ':'), ('Construct', 'NN'), ('Syntax', 'NN'), ('Tree', 'NN'), ('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('2', 'CD'), ('–', ':'), ('Lexical', 'JJ'), ('Analyzer', 'NN'), ('‹#›', 'NN'), ('Conversion', 'NN'), ('from', 'IN'), ('regular', 'JJ'), ('expression', 'NN'), ('to', 'IN'), ('DFA', 'NNP'), ('.', '.'), ('.', '.'), ('.', '.'), ('.', '.'), ('Step', 'NN'), ('3', 'CD'), (':', ':'), ('Calculate', 'VB'), ('firstpos', 'NN'), ('Firstpos', 'NNP')] 

 Lemmas are: 
>> [('If', 'if'), ('n', 'n'), ('is', 'be'), ('*', '*'), ('node', 'node'), ('and', 'and'), ('i', 'I'), ('is', 'be'), ('position', 'position'), ('in', 'in'), ('lastpos', 'lastpos'), ('(', '('), ('n', 'n'), (')', ')'), (',', ','), ('then', 'then'), ('all', 'all'), ('position', 'position'), ('in', 'in'), ('firstpos', 'firstpos'), ('(', '('), ('n', 'n'), (')', ')'), ('are', 'be'), ('in', 'in'), ('followpos', 'followpo'), ('(', '('), ('i)', 'i)'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('2', '2'), ('–', '-'), ('Lexical', 'lexical'), ('Analyzer', 'analyzer'), ('‹#›', '‹#›'), ('Conversion', 'conversion'), ('from', 'from'), ('regular', 'regular'), ('expression', 'expression'), ('to', 'to'), ('DFA', 'dfa'), ('.', '.'), ('.', '.'), ('.', '.'), ('.', '.'), ('(', '('), ('a|', 'a|'), ('b', 'b'), (')', ')'), ('*', '*'), ('abb', 'abb'), ('#', '#'), ('Step', 'step'), ('2', '2'), (':', ':'), ('Nullable', 'nullable'), ('node', 'node'), ('Here', 'here'), (',', ','), ('*', '*'), ('is', 'be'), ('only', 'only'), ('nullable', 'nullable'), ('node', 'node'), ('Step', 'step'), ('1', '1'), (':', ':'), ('Construct', 'construct'), ('Syntax', 'Syntax'), ('Tree', 'tree'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('2', '2'), ('–', '-'), ('Lexical', 'lexical'), ('Analyzer', 'analyzer'), ('‹#›', '‹#›'), ('Conversion', 'conversion'), ('from', 'from'), ('regular', 'regular'), ('expression', 'expression'), ('to', 'to'), ('DFA', 'DFA'), ('.', '.'), ('.', '.'), ('.', '.'), ('.', '.'), ('Step', 'step'), ('3', '3'), (':', ':'), ('Calculate', 'calculate'), ('firstpos', 'firstpos'), ('Firstpos', 'Firstpos')] 

 Dependency tags are: 
>> [(('If', 'node'), 'mark'), (('n', 'node'), 'nsubj'), (('is', 'node'), 'cop'), (('*', 'node'), 'punct'), (('node', 'followpos'), 'advcl'), (('and', 'position'), 'cc'), (('i', 'position'), 'nsubj'), (('is', 'position'), 'cop'), (('position', 'node'), 'conj'), (('in', 'lastpos'), 'case'), (('lastpos', 'position'), 'nmod'), (('(', 'n'), 'punct'), (('n', 'lastpos'), 'appos'), ((')', 'n'), 'punct'), ((',', 'position'), 'punct'), (('then', 'position'), 'advmod'), (('all', 'position'), 'det'), (('position', 'followpos'), 'nsubj'), (('in', 'firstpos'), 'case'), (('firstpos', 'position'), 'nmod'), (('(', 'n'), 'punct'), (('n', 'firstpos'), 'appos'), ((')', 'n'), 'punct'), (('are', 'followpos'), 'cop'), (('in', 'followpos'), 'case'), (('followpos', 'root'), 'root'), (('(', 'i)'), 'punct'), (('i)', 'followpos'), 'dep'), (('Prof.', 'i)'), 'flat'), (('Dixita', 'i)'), 'flat'), (('B', 'i)'), 'flat'), (('Kagathara', 'i)'), 'flat'), (('#', 'i)'), 'conj'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', 'i)'), 'dep'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', 'i)'), 'conj'), (('2', 'Unit'), 'nummod'), (('–', 'Unit'), 'punct'), (('Lexical', 'Analyzer'), 'amod'), (('Analyzer', 'Conversion'), 'compound'), (('‹#›', 'Conversion'), 'compound'), (('Conversion', 'followpos'), 'conj'), (('from', 'expression'), 'case'), (('regular', 'expression'), 'amod'), (('expression', 'Conversion'), 'nmod'), (('to', 'DFA'), 'case'), (('DFA', 'expression'), 'nmod'), (('.', 'followpos'), 'punct'), (('.', 'followpos'), 'punct'), (('.', 'followpos'), 'punct'), (('.', 'followpos'), 'punct'), (('(', 'b'), 'punct'), (('a|', 'b'), 'nummod'), (('b', 'Step'), 'appos'), ((')', 'b'), 'punct'), (('*', '#'), 'punct'), (('abb', '#'), 'compound'), (('#', 'followpos'), 'conj'), (('Step', '#'), 'appos'), (('2', 'Step'), 'nummod'), ((':', 'node'), 'punct'), (('Nullable', 'node'), 'compound'), (('node', 'Step'), 'appos'), (('Here', 'node'), 'advmod'), ((',', 'node'), 'punct'), (('*', 'node'), 'punct'), (('is', 'node'), 'cop'), (('only', 'node'), 'advmod'), (('nullable', 'node'), 'amod'), (('node', 'followpos'), 'conj'), (('Step', 'node'), 'parataxis'), (('1', 'Step'), 'nummod'), ((':', 'Step'), 'punct'), (('Construct', 'Tree'), 'compound'), (('Syntax', 'Tree'), 'compound'), (('Tree', 'node'), 'compound'), (('Prof.', 'node'), 'appos'), (('Dixita', 'Kagathara'), 'compound'), (('B', 'Kagathara'), 'compound'), (('Kagathara', '#'), 'compound'), (('#', 'Prof.'), 'appos'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', '#'), 'appos'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', '#'), 'appos'), (('2', 'Unit'), 'nummod'), (('–', 'Analyzer'), 'punct'), (('Lexical', 'Analyzer'), 'amod'), (('Analyzer', 'Conversion'), 'compound'), (('‹#›', 'Conversion'), 'compound'), (('Conversion', 'Unit'), 'appos'), (('from', 'expression'), 'case'), (('regular', 'expression'), 'amod'), (('expression', 'Conversion'), 'nmod'), (('to', 'DFA'), 'case'), (('DFA', 'expression'), 'nmod'), (('.', 'Analyzer'), 'punct'), (('.', 'Analyzer'), 'punct'), (('.', 'Step'), 'punct'), (('.', 'Step'), 'punct'), (('Step', 'followpos'), 'dep'), (('3', 'Step'), 'nummod'), ((':', 'Calculate'), 'punct'), (('Calculate', 'Step'), 'appos'), (('firstpos', 'Calculate'), 'obj'), (('Firstpos', 'Calculate'), 'obj')]

 Named Entities are: 
>> [('#2170701', 'CARDINAL'), ('2', 'CARDINAL'), ('DFA', 'ORG'), ('2', 'CARDINAL'), ('1', 'CARDINAL'), ('2170701', 'CARDINAL'), ('2', 'CARDINAL'), ('DFA', 'ORG'), ('3', 'CARDINAL')]

========================== Sentence 107 ===========================

 A leaf with position   n c1 c2 firstpos(c1)  firstpos(c2)  n c1 firstpos(c1)   n c1 c2       if  (nullable(c1))  thenfirstpos(c1)  firstpos(c2) else  firstpos(c1)    Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Conversion from regular expression to DFA     .              .     .     .         Step 3: Calculate lastpos        Lastpos 

Tokens are: 
>> ['A', 'leaf', 'with', 'position', 'n', 'c1', 'c2', 'firstpos', '(', 'c1', ')', '\uf0c8', 'firstpos', '(', 'c2', ')', 'n', 'c1', 'firstpos', '(', 'c1', ')', 'n', 'c1', 'c2', 'if', '(', 'nullable', '(', 'c1', ')', ')', 'thenfirstpos', '(', 'c1', ')', '\uf0c8', 'firstpos', '(', 'c2', ')', 'else', 'firstpos', '(', 'c1', ')', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '2', '–', 'Lexical', 'Analyzer', '‹#›', 'Conversion', 'from', 'regular', 'expression', 'to', 'DFA', '.', '.', '.', '.', 'Step', '3', ':', 'Calculate', 'lastpos', 'Lastpos'] 

 UPOS tags are: 
>> [('A', 'DET'), ('leaf', 'NOUN'), ('with', 'ADP'), ('position', 'NOUN'), ('n', 'NOUN'), ('c1', 'NUM'), ('c2', 'NOUN'), ('firstpos', 'NOUN'), ('(', 'PUNCT'), ('c1', 'NUM'), (')', 'PUNCT'), ('\uf0c8', 'NUM'), ('firstpos', 'NOUN'), ('(', 'PUNCT'), ('c2', 'NOUN'), (')', 'PUNCT'), ('n', 'NOUN'), ('c1', 'NUM'), ('firstpos', 'NOUN'), ('(', 'PUNCT'), ('c1', 'NUM'), (')', 'PUNCT'), ('n', 'NOUN'), ('c1', 'NUM'), ('c2', 'NOUN'), ('if', 'SCONJ'), ('(', 'PUNCT'), ('nullable', 'NOUN'), ('(', 'PUNCT'), ('c1', 'NUM'), (')', 'PUNCT'), (')', 'PUNCT'), ('thenfirstpos', 'NOUN'), ('(', 'PUNCT'), ('c1', 'NUM'), (')', 'PUNCT'), ('\uf0c8', 'PUNCT'), ('firstpos', 'PROPN'), ('(', 'PUNCT'), ('c2', 'NUM'), (')', 'PUNCT'), ('else', 'ADJ'), ('firstpos', 'PROPN'), ('(', 'PUNCT'), ('c1', 'NUM'), (')', 'PUNCT'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'PROPN'), (')', 'PUNCT'), ('\uf077', 'PUNCT'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'SYM'), ('Lexical', 'ADJ'), ('Analyzer', 'NOUN'), ('‹#›', 'NOUN'), ('Conversion', 'NOUN'), ('from', 'ADP'), ('regular', 'ADJ'), ('expression', 'NOUN'), ('to', 'ADP'), ('DFA', 'PROPN'), ('.', 'PUNCT'), ('.', 'PUNCT'), ('.', 'PUNCT'), ('.', 'PUNCT'), ('Step', 'NOUN'), ('3', 'NUM'), (':', 'PUNCT'), ('Calculate', 'VERB'), ('lastpos', 'PROPN'), ('Lastpos', 'PROPN')] 

 XPOS tags are: 
>> [('A', 'DT'), ('leaf', 'NN'), ('with', 'IN'), ('position', 'NN'), ('n', 'NN'), ('c1', 'CD'), ('c2', 'NN'), ('firstpos', 'NN'), ('(', '-LRB-'), ('c1', 'CD'), (')', '-RRB-'), ('\uf0c8', 'CD'), ('firstpos', 'NN'), ('(', '-LRB-'), ('c2', 'NN'), (')', '-RRB-'), ('n', 'NN'), ('c1', 'CD'), ('firstpos', 'NN'), ('(', '-LRB-'), ('c1', 'CD'), (')', '-RRB-'), ('n', 'NN'), ('c1', 'CD'), ('c2', 'NN'), ('if', 'IN'), ('(', '-LRB-'), ('nullable', 'NN'), ('(', '-LRB-'), ('c1', 'CD'), (')', '-RRB-'), (')', '-RRB-'), ('thenfirstpos', 'NN'), ('(', '-LRB-'), ('c1', 'CD'), (')', '-RRB-'), ('\uf0c8', ','), ('firstpos', 'NNP'), ('(', '-LRB-'), ('c2', 'CD'), (')', '-RRB-'), ('else', 'JJ'), ('firstpos', 'NNP'), ('(', '-LRB-'), ('c1', 'CD'), (')', '-RRB-'), ('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NNP'), (')', '-RRB-'), ('\uf077', ','), ('Unit', 'NN'), ('2', 'CD'), ('–', 'SYM'), ('Lexical', 'JJ'), ('Analyzer', 'NN'), ('‹#›', 'NN'), ('Conversion', 'NN'), ('from', 'IN'), ('regular', 'JJ'), ('expression', 'NN'), ('to', 'IN'), ('DFA', 'NNP'), ('.', '.'), ('.', '.'), ('.', '.'), ('.', '.'), ('Step', 'NN'), ('3', 'CD'), (':', ':'), ('Calculate', 'VB'), ('lastpos', 'NNP'), ('Lastpos', 'NNP')] 

 Lemmas are: 
>> [('A', 'a'), ('leaf', 'leaf'), ('with', 'with'), ('position', 'position'), ('n', 'n'), ('c1', 'c1'), ('c2', 'c2'), ('firstpos', 'firstpos'), ('(', '('), ('c1', 'c1'), (')', ')'), ('\uf0c8', '\uf0c8'), ('firstpos', 'firstpos'), ('(', '('), ('c2', 'c2'), (')', ')'), ('n', 'n'), ('c1', 'c1'), ('firstpos', 'firstpos'), ('(', '('), ('c1', 'c1'), (')', ')'), ('n', 'n'), ('c1', 'c1'), ('c2', 'c2'), ('if', 'if'), ('(', '('), ('nullable', 'nullable'), ('(', '('), ('c1', 'c1'), (')', ')'), (')', ')'), ('thenfirstpos', 'thenfirstpos'), ('(', '('), ('c1', 'c1'), (')', ')'), ('\uf0c8', "''"), ('firstpos', 'firstpos'), ('(', '('), ('c2', 'c2'), (')', ')'), ('else', 'else'), ('firstpos', 'firstpos'), ('(', '('), ('c1', 'c1'), (')', ')'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'CD'), (')', ')'), ('\uf077', "''"), ('Unit', 'unit'), ('2', '2'), ('–', '-'), ('Lexical', 'lexical'), ('Analyzer', 'analyzer'), ('‹#›', '‹#›'), ('Conversion', 'conversion'), ('from', 'from'), ('regular', 'regular'), ('expression', 'expression'), ('to', 'to'), ('DFA', 'DFA'), ('.', '.'), ('.', '.'), ('.', '.'), ('.', '.'), ('Step', 'step'), ('3', '3'), (':', ':'), ('Calculate', 'calculate'), ('lastpos', 'lastpos'), ('Lastpos', 'Lastpos')] 

 Dependency tags are: 
>> [(('A', 'leaf'), 'det'), (('leaf', 'root'), 'root'), (('with', 'firstpos'), 'case'), (('position', 'n'), 'compound'), (('n', 'firstpos'), 'compound'), (('c1', 'n'), 'nummod'), (('c2', 'firstpos'), 'compound'), (('firstpos', 'leaf'), 'nmod'), (('(', 'c1'), 'punct'), (('c1', 'firstpos'), 'appos'), ((')', 'c1'), 'punct'), (('\uf0c8', 'firstpos'), 'nummod'), (('firstpos', 'firstpos'), 'conj'), (('(', 'c2'), 'punct'), (('c2', 'firstpos'), 'appos'), ((')', 'c2'), 'punct'), (('n', 'firstpos'), 'compound'), (('c1', 'firstpos'), 'nummod'), (('firstpos', 'firstpos'), 'conj'), (('(', 'c1'), 'punct'), (('c1', 'n'), 'nummod'), ((')', 'c1'), 'punct'), (('n', 'firstpos'), 'compound'), (('c1', 'c2'), 'nummod'), (('c2', 'leaf'), 'nmod'), (('if', 'nullable'), 'mark'), (('(', 'nullable'), 'punct'), (('nullable', 'thenfirstpos'), 'compound'), (('(', 'c1'), 'punct'), (('c1', 'nullable'), 'dep'), ((')', 'c1'), 'punct'), ((')', 'c1'), 'punct'), (('thenfirstpos', 'c2'), 'appos'), (('(', 'c1'), 'punct'), (('c1', 'thenfirstpos'), 'appos'), ((')', 'c1'), 'punct'), (('\uf0c8', 'firstpos'), 'punct'), (('firstpos', 'thenfirstpos'), 'appos'), (('(', 'c2'), 'punct'), (('c2', 'firstpos'), 'nmod:tmod'), ((')', 'c2'), 'punct'), (('else', 'c2'), 'advmod'), (('firstpos', 'firstpos'), 'appos'), (('(', 'c1'), 'punct'), (('c1', 'firstpos'), 'nmod:tmod'), ((')', 'c1'), 'punct'), (('Prof.', 'firstpos'), 'compound'), (('Dixita', 'Kagathara'), 'compound'), (('B', 'Kagathara'), 'compound'), (('Kagathara', 'Prof.'), 'flat'), (('#', 'Kagathara'), 'compound'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', '#'), 'appos'), ((')', 'CD'), 'punct'), (('\uf077', 'CD'), 'punct'), (('Unit', '#'), 'appos'), (('2', 'Unit'), 'nummod'), (('–', 'Analyzer'), 'case'), (('Lexical', 'Analyzer'), 'amod'), (('Analyzer', 'Conversion'), 'compound'), (('‹#›', 'Conversion'), 'compound'), (('Conversion', 'Unit'), 'nmod'), (('from', 'expression'), 'case'), (('regular', 'expression'), 'amod'), (('expression', 'Conversion'), 'nmod'), (('to', 'DFA'), 'case'), (('DFA', 'expression'), 'nmod'), (('.', 'Unit'), 'punct'), (('.', 'leaf'), 'punct'), (('.', 'Conversion'), 'punct'), (('.', 'Step'), 'punct'), (('Step', 'leaf'), 'dep'), (('3', 'Step'), 'dep'), ((':', 'Calculate'), 'punct'), (('Calculate', 'Step'), 'appos'), (('lastpos', 'Calculate'), 'obj'), (('Lastpos', 'Calculate'), 'obj')]

 Named Entities are: 
>> [('2', 'CARDINAL'), ('3', 'CARDINAL')]

========================== Sentence 108 ===========================

 A leaf with position   n c1 c2 if  (nullable(c2)) then  lastpos(c1)  lastpos(c2) else lastpos(c2)  n c1 lastpos(c1)   n c1 c2 lastpos(c1)  lastpos(c2)    Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Conversion from regular expression to DFA 	Position 	followpos      .              .     .     .         Step 4: Calculate followpos        	5	6    .        Firstpos Lastpos     Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Conversion from regular expression to DFA  	Position 	followpos      .              .     .     .         Step 4: Calculate followpos        	5	6    .        	4	5     Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Conversion from regular expression to DFA  	Position 	followpos      .              .     .     .         Step 4: Calculate followpos        	5	6    .        	4	5  	3	4  Firstpos Lastpos     Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Conversion from regular expression to DFA  	Position 	followpos      .              .     .     .         Step 4: Calculate followpos        	5	6    .     	4	5  	3	4  	2	3  	1	3  Firstpos Lastpos          Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Conversion from regular expression to DFA  	Position 	followpos      .              .     .     .         Step 4: Calculate followpos        	5	6   	4	5  	3	4  	2	3  	1	3    * 1,2, 1,2, Firstpos Lastpos          Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Conversion from regular expression to DFA Initial state =  of root = {1,2,3} ----- A State A δ( (1,2,3),a) = followpos(1) U followpos(3) 		=(1,2,3) U (4) = {1,2,3,4} ----- B  δ( (1,2,3),b) = followpos(2)  		=(1,2,3) ----- A  	Position 	followpos  	5	6  	4	5  	3	4  	2	1,2,3  	1	1,2,3  	States	a	b  	A={1,2,3}	B	A  	B={1,2,3,4}		       Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Conversion from regular expression to DFA State B δ( (1,2,3,4),a) = followpos(1) U followpos(3) 		=(1,2,3) U (4) = {1,2,3,4} ----- B  δ( (1,2,3,4),b) = followpos(2) U followpos(4)  		=(1,2,3) U (5) = {1,2,3,5} ----- C State C δ( (1,2,3,5),a) = followpos(1) U followpos(3) 		=(1,2,3) U (4) = {1,2,3,4} ----- B  δ( (1,2,3,5),b) = followpos(2) U followpos(5)  		=(1,2,3) U (6) = {1,2,3,6} ----- D  	Position 	followpos  	5	6  	4	5  	3	4  	2	1,2,3  	1	1,2,3  	States	a	b  	A={1,2,3}	B	A  	B={1,2,3,4}	B	C  	C={1,2,3,5}	B	D      	D={1,2,3,6}		     Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Conversion from regular expression to DFA State D δ( (1,2,3,6),a) = followpos(1) U followpos(3) 		=(1,2,3) U (4) = {1,2,3,4} ----- B  δ( (1,2,3,6),b) = followpos(2)   		=(1,2,3)  ----- A  	Position 	followpos  	5	6  	4	5  	3	4  	2	1,2,3  	1	1,2,3  	States	a	b  	A={1,2,3}	B	A  	B={1,2,3,4}	B	C  	C={1,2,3,5}	B	D  	D={1,2,3,6}	B	A    A B C D a b b  b a a b a DFA    Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Conversion from regular expression to DFA Construct DFA for following regular expression: (c | d)*c#     Prof. Dixita B Kagathara   #2170701 (CD)      Unit 2 – Lexical Analyzer ‹#›  Thank You                                      /docProps/thumbnail.jpeg 

Tokens are: 
>> ['A', 'leaf', 'with', 'position', 'n', 'c', '1', 'c2', 'if', '(', 'nullable', '(', 'c2', ')', ')', 'then', 'lastpos', '(', 'c1', ')', '\uf0c8', 'lastpos', '(', 'c2', ')', 'else', 'lastpos', '(', 'c2', ')', 'n', 'c1', 'lastpos', '(', 'c1', ')', 'n', 'c1', 'c2', 'lastpos', '(', 'c1', ')', '\uf0c8', 'lastpos', '(', 'c2', ')', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '2', '–', 'Lexical', 'Analyzer', '‹#›', 'Conversion', 'from', 'regular', 'expression', 'to', 'DFA', 'Position', 'followpos', '.', '.', '.', '.', 'Step', '4', ':', 'Calculate', 'followpos', '5', '6', '.', 'Firstpos', 'Lastpos', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '2', '–', 'Lexical', 'Analyzer', '‹#›', 'Conversion', 'from', 'regular', 'expression', 'to', 'DFA', 'Position', 'followpos', '.', '.', '.', '.', 'Step', '4', ':', 'Calculate', 'followpos', '5', '6', '.', '4', '5', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '2', '–', 'Lexical', 'Analyzer', '‹#›', 'Conversion', 'from', 'regular', 'expression', 'to', 'DFA', 'Position', 'followpos', '.', '.', '.', '.', 'Step', '4', ':', 'Calculate', 'followpos', '5', '6', '.', '4', '5', '3', '4', 'Firstpos', 'Lastpos', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '2', '–', 'Lexical', 'Analyzer', '‹#›', 'Conversion', 'from', 'regular', 'expression', 'to', 'DFA', 'Position', 'followpos', '.', '.', '.', '.', 'Step', '4', ':', 'Calculate', 'followpos', '5', '6', '.', '4', '5', '3', '4', '2', '3', '1', '3', 'Firstpos', 'Lastpos', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '2', '–', 'Lexical', 'Analyzer', '‹#›', 'Conversion', 'from', 'regular', 'expression', 'to', 'DFA', 'Position', 'followpos', '.', '.', '.', '.', 'Step', '4', ':', 'Calculate', 'followpos', '5', '6', '4', '5', '3', '4', '2', '3', '1', '3', '*', '1,2', ',', '1,2', ',', 'Firstpos', 'Lastpos', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '2', '–', 'Lexical', 'Analyzer', '‹#›', 'Conversion', 'from', 'regular', 'expression', 'to', 'DFA', 'Initial', 'state', '=', 'of', 'root', '=', '{', '1', ',2,3', '}', '-----', 'A', 'State', 'A', 'δ(', '(', '1,2,3', ')', ',', 'a', ')', '=', 'followpos', '(', '1', ')', 'U', 'followpos', '(', '3', ')', '=', '(', '1,2,3', ')', 'U', '(', '4', ')', '=', '{', '1,2,3,4', '}', '-----', 'B', 'δ(', '(', '1,2,3', ')', ',', 'b', ')', '=', 'followpos', '(', '2', ')', '=', '(', '1,', '2,3', ')', '-----', 'A', 'Position', 'followpos', '5', '6', '4', '5', '3', '4', '2', '1,2,3', '1', '1,2,3', 'States', 'a', 'b', 'A={', '1', ',', '2,3', '}', 'B', 'A', 'B={', '1', ',', '2,3,4', '}', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '2', '–', 'Lexical', 'Analyzer', '‹#›', 'Conversion', 'from', 'regular', 'expression', 'to', 'DFA', 'State', 'B', 'δ(', '(', '1,2,3,4', ')', ',', 'a', ')', '=', 'followpos', '(', '1', ')', 'U', 'followpos', '(', '3', ')', '=', '(', '1,2,3', ')', 'U', '(', '4', ')', '=', '{', '1,2,3,4', '}', '-----', 'B', 'δ(', '(', '1,2,3,4', ')', ',', 'b', ')', '=', 'followpos', '(', '2', ')', 'U', 'followpos', '(', '4', ')', '=', '(', '1,2,3', ')', 'U', '(', '5', ')', '=', '{', '1,2,3,5', '}', '-----', 'C', 'State', 'C', 'δ(', '(', '1,2,3,5', ')', ',', 'a', ')', '=', 'followpos', '(', '1', ')', 'U', 'followpos', '(', '3', ')', '=', '(', '1,2,3', ')', 'U', '(', '4', ')', '=', '{', '1,2,3,4', '}', '-----', 'B', 'δ(', '(', '1,2,3,5', ')', ',', 'b', ')', '=', 'followpos', '(', '2', ')', 'U', 'followpos', '(', '5', ')', '=', '(', '1,2,3', ')', 'U', '(', '6', ')', '=', '{', '1,2,3,6', '}', '-----', 'D', 'Position', 'followpos', '5', '6', '4', '5', '3', '4', '2', '1,2,3', '1', '1,2,3', 'States', 'a', 'b', 'A=', '{', '1', ',', '2,3', '}', 'B', 'A', 'B={', '1', ',', '2,3,4', '}', 'B', 'C', 'C={', '1', ',', '2,3,5', '}', 'B', 'D', 'D={', '1,', '2,3,6', '}', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '2', '–', 'Lexical', 'Analyzer', '‹#›', 'Conversion', 'from', 'regular', 'expression', 'to', 'DFA', 'State', 'D', 'δ(', '(', '1,2,3,6', ')', ',', 'a', ')', '=', 'followpos', '(', '1', ')', 'U', 'followpos', '(', '3', ')', '=', '(', '1,2,3', ')', 'U', '(', '4', ')', '=', '{', '1,2,3,4', '}', '-----', 'B', 'δ(', '(', '1,2,3,6', ')', ',', 'b', ')', '=', 'followpos', '(', '2', ')', '=', '(', '1,', '2,3', ')', '-----', 'A', 'Position', 'followpos', '5', '6', '4', '5', '3', '4', '2', '1,2,3', '1', '1,2,3', 'States', 'a', 'b', 'A=', '{', '1', ',', '2,3', '}', 'B', 'A', 'B={', '1', ',', '2,3,4', '}', 'B', 'C', 'C={', '1', ',', '2,3,5', '}', 'B', 'D', 'D={', '1', ',', '2,3,6', '}', 'B', 'A', 'A', 'B', 'C', 'D', 'a', 'b', 'b', 'b', 'a', 'a', 'b', 'a', 'DFA', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '2', '–', 'Lexical', 'Analyzer', '‹#›', 'Conversion', 'from', 'regular', 'expression', 'to', 'DFA', 'Construct', 'DFA', 'for', 'following', 'regular', 'expression', ':', '(', 'c', '|', 'd', ')', '*', 'c#', 'Prof.', 'Dixita', 'B', 'Kagathara', '#', '2170701', '(', 'CD', ')', '\uf077', 'Unit', '2', '–', 'Lexical', 'Analyzer', '‹#›', 'Thank', 'You', '/docProps/thumbnail.jpeg'] 

 UPOS tags are: 
>> [('A', 'DET'), ('leaf', 'NOUN'), ('with', 'ADP'), ('position', 'NOUN'), ('n', 'NOUN'), ('c', 'PROPN'), ('1', 'NUM'), ('c2', 'NOUN'), ('if', 'SCONJ'), ('(', 'PUNCT'), ('nullable', 'NOUN'), ('(', 'PUNCT'), ('c2', 'NOUN'), (')', 'PUNCT'), (')', 'PUNCT'), ('then', 'ADV'), ('lastpos', 'NOUN'), ('(', 'PUNCT'), ('c1', 'NUM'), (')', 'PUNCT'), ('\uf0c8', 'NOUN'), ('lastpos', 'NOUN'), ('(', 'PUNCT'), ('c2', 'NUM'), (')', 'PUNCT'), ('else', 'ADJ'), ('lastpos', 'NOUN'), ('(', 'PUNCT'), ('c2', 'NOUN'), (')', 'PUNCT'), ('n', 'NOUN'), ('c1', 'NUM'), ('lastpos', 'NOUN'), ('(', 'PUNCT'), ('c1', 'NUM'), (')', 'PUNCT'), ('n', 'NOUN'), ('c1', 'NUM'), ('c2', 'NOUN'), ('lastpos', 'PROPN'), ('(', 'PUNCT'), ('c1', 'NUM'), (')', 'PUNCT'), ('\uf0c8', 'PUNCT'), ('lastpos', 'PROPN'), ('(', 'PUNCT'), ('c2', 'NUM'), (')', 'PUNCT'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'ADJ'), ('Analyzer', 'NOUN'), ('‹#›', 'NOUN'), ('Conversion', 'NOUN'), ('from', 'ADP'), ('regular', 'ADJ'), ('expression', 'NOUN'), ('to', 'ADP'), ('DFA', 'NOUN'), ('Position', 'NOUN'), ('followpos', 'NOUN'), ('.', 'PUNCT'), ('.', 'PUNCT'), ('.', 'PUNCT'), ('.', 'PUNCT'), ('Step', 'NOUN'), ('4', 'NUM'), (':', 'PUNCT'), ('Calculate', 'NOUN'), ('followpos', 'NOUN'), ('5', 'NUM'), ('6', 'NUM'), ('.', 'PUNCT'), ('Firstpos', 'PROPN'), ('Lastpos', 'PROPN'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'ADJ'), ('Analyzer', 'NOUN'), ('‹#›', 'NOUN'), ('Conversion', 'NOUN'), ('from', 'ADP'), ('regular', 'ADJ'), ('expression', 'NOUN'), ('to', 'ADP'), ('DFA', 'NOUN'), ('Position', 'NOUN'), ('followpos', 'NOUN'), ('.', 'PUNCT'), ('.', 'PUNCT'), ('.', 'PUNCT'), ('.', 'PUNCT'), ('Step', 'NOUN'), ('4', 'NUM'), (':', 'PUNCT'), ('Calculate', 'NOUN'), ('followpos', 'NOUN'), ('5', 'NUM'), ('6', 'NUM'), ('.', 'PUNCT'), ('4', 'NUM'), ('5', 'NUM'), ('Prof.', 'NOUN'), ('Dixita', 'PROPN'), ('B', 'NOUN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'ADJ'), ('Analyzer', 'NOUN'), ('‹#›', 'NOUN'), ('Conversion', 'NOUN'), ('from', 'ADP'), ('regular', 'ADJ'), ('expression', 'NOUN'), ('to', 'ADP'), ('DFA', 'NOUN'), ('Position', 'NOUN'), ('followpos', 'NOUN'), ('.', 'PUNCT'), ('.', 'PUNCT'), ('.', 'PUNCT'), ('.', 'PUNCT'), ('Step', 'NOUN'), ('4', 'NUM'), (':', 'PUNCT'), ('Calculate', 'VERB'), ('followpos', 'NOUN'), ('5', 'NUM'), ('6', 'NUM'), ('.', 'PUNCT'), ('4', 'NUM'), ('5', 'NUM'), ('3', 'NUM'), ('4', 'NUM'), ('Firstpos', 'PROPN'), ('Lastpos', 'PROPN'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'ADJ'), ('Analyzer', 'NOUN'), ('‹#›', 'NOUN'), ('Conversion', 'NOUN'), ('from', 'ADP'), ('regular', 'ADJ'), ('expression', 'NOUN'), ('to', 'ADP'), ('DFA', 'NOUN'), ('Position', 'NOUN'), ('followpos', 'NOUN'), ('.', 'PUNCT'), ('.', 'PUNCT'), ('.', 'PUNCT'), ('.', 'PUNCT'), ('Step', 'NOUN'), ('4', 'NUM'), (':', 'PUNCT'), ('Calculate', 'NOUN'), ('followpos', 'NOUN'), ('5', 'NUM'), ('6', 'NUM'), ('.', 'PUNCT'), ('4', 'NUM'), ('5', 'NUM'), ('3', 'NUM'), ('4', 'NUM'), ('2', 'NUM'), ('3', 'NUM'), ('1', 'NUM'), ('3', 'NUM'), ('Firstpos', 'PROPN'), ('Lastpos', 'PROPN'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'ADJ'), ('Analyzer', 'NOUN'), ('‹#›', 'NOUN'), ('Conversion', 'NOUN'), ('from', 'ADP'), ('regular', 'ADJ'), ('expression', 'NOUN'), ('to', 'ADP'), ('DFA', 'NOUN'), ('Position', 'NOUN'), ('followpos', 'NOUN'), ('.', 'PUNCT'), ('.', 'PUNCT'), ('.', 'PUNCT'), ('.', 'PUNCT'), ('Step', 'NOUN'), ('4', 'NUM'), (':', 'PUNCT'), ('Calculate', 'NOUN'), ('followpos', 'NOUN'), ('5', 'NUM'), ('6', 'NUM'), ('4', 'NUM'), ('5', 'NUM'), ('3', 'NUM'), ('4', 'NUM'), ('2', 'NUM'), ('3', 'NUM'), ('1', 'NUM'), ('3', 'NUM'), ('*', 'PUNCT'), ('1,2', 'NUM'), (',', 'PUNCT'), ('1,2', 'NUM'), (',', 'PUNCT'), ('Firstpos', 'PROPN'), ('Lastpos', 'PROPN'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'ADJ'), ('Analyzer', 'NOUN'), ('‹#›', 'NOUN'), ('Conversion', 'NOUN'), ('from', 'ADP'), ('regular', 'ADJ'), ('expression', 'NOUN'), ('to', 'ADP'), ('DFA', 'PROPN'), ('Initial', 'ADJ'), ('state', 'NOUN'), ('=', 'PUNCT'), ('of', 'ADP'), ('root', 'NOUN'), ('=', 'SYM'), ('{', 'PUNCT'), ('1', 'NUM'), (',2,3', 'NUM'), ('}', 'PUNCT'), ('-----', 'PUNCT'), ('A', 'DET'), ('State', 'NOUN'), ('A', 'DET'), ('δ(', 'NOUN'), ('(', 'PUNCT'), ('1,2,3', 'NUM'), (')', 'PUNCT'), (',', 'PUNCT'), ('a', 'NUM'), (')', 'PUNCT'), ('=', 'SYM'), ('followpos', 'NOUN'), ('(', 'PUNCT'), ('1', 'NUM'), (')', 'PUNCT'), ('U', 'NOUN'), ('followpos', 'NOUN'), ('(', 'PUNCT'), ('3', 'NUM'), (')', 'PUNCT'), ('=', 'SYM'), ('(', 'PUNCT'), ('1,2,3', 'NUM'), (')', 'PUNCT'), ('U', 'NOUN'), ('(', 'PUNCT'), ('4', 'NUM'), (')', 'PUNCT'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('1,2,3,4', 'NUM'), ('}', 'PUNCT'), ('-----', 'PUNCT'), ('B', 'NOUN'), ('δ(', 'NUM'), ('(', 'PUNCT'), ('1,2,3', 'NUM'), (')', 'PUNCT'), (',', 'PUNCT'), ('b', 'NUM'), (')', 'PUNCT'), ('=', 'PUNCT'), ('followpos', 'NOUN'), ('(', 'PUNCT'), ('2', 'NUM'), (')', 'PUNCT'), ('=', 'PUNCT'), ('(', 'PUNCT'), ('1,', 'NUM'), ('2,3', 'NUM'), (')', 'PUNCT'), ('-----', 'PUNCT'), ('A', 'DET'), ('Position', 'NOUN'), ('followpos', 'NOUN'), ('5', 'NUM'), ('6', 'NUM'), ('4', 'NUM'), ('5', 'NUM'), ('3', 'NUM'), ('4', 'NUM'), ('2', 'NUM'), ('1,2,3', 'NUM'), ('1', 'NUM'), ('1,2,3', 'NUM'), ('States', 'PROPN'), ('a', 'PROPN'), ('b', 'NOUN'), ('A={', 'PROPN'), ('1', 'NUM'), (',', 'PUNCT'), ('2,3', 'NUM'), ('}', 'PUNCT'), ('B', 'NUM'), ('A', 'NOUN'), ('B={', 'PROPN'), ('1', 'NUM'), (',', 'PUNCT'), ('2,3,4', 'NUM'), ('}', 'PUNCT'), ('Prof.', 'NOUN'), ('Dixita', 'PROPN'), ('B', 'NOUN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'ADJ'), ('Analyzer', 'NOUN'), ('‹#›', 'NOUN'), ('Conversion', 'NOUN'), ('from', 'ADP'), ('regular', 'ADJ'), ('expression', 'NOUN'), ('to', 'ADP'), ('DFA', 'NOUN'), ('State', 'NOUN'), ('B', 'NOUN'), ('δ(', 'NOUN'), ('(', 'PUNCT'), ('1,2,3,4', 'NUM'), (')', 'PUNCT'), (',', 'PUNCT'), ('a', 'NUM'), (')', 'PUNCT'), ('=', 'PUNCT'), ('followpos', 'NOUN'), ('(', 'PUNCT'), ('1', 'NUM'), (')', 'PUNCT'), ('U', 'NOUN'), ('followpos', 'NOUN'), ('(', 'PUNCT'), ('3', 'NUM'), (')', 'PUNCT'), ('=', 'SYM'), ('(', 'PUNCT'), ('1,2,3', 'NUM'), (')', 'PUNCT'), ('U', 'NOUN'), ('(', 'PUNCT'), ('4', 'NUM'), (')', 'PUNCT'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('1,2,3,4', 'NUM'), ('}', 'PUNCT'), ('-----', 'PUNCT'), ('B', 'NOUN'), ('δ(', 'NUM'), ('(', 'PUNCT'), ('1,2,3,4', 'NUM'), (')', 'PUNCT'), (',', 'PUNCT'), ('b', 'NUM'), (')', 'PUNCT'), ('=', 'PUNCT'), ('followpos', 'NOUN'), ('(', 'PUNCT'), ('2', 'NUM'), (')', 'PUNCT'), ('U', 'NOUN'), ('followpos', 'NOUN'), ('(', 'PUNCT'), ('4', 'NUM'), (')', 'PUNCT'), ('=', 'PUNCT'), ('(', 'PUNCT'), ('1,2,3', 'NUM'), (')', 'PUNCT'), ('U', 'NOUN'), ('(', 'PUNCT'), ('5', 'NUM'), (')', 'PUNCT'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('1,2,3,5', 'NUM'), ('}', 'PUNCT'), ('-----', 'PUNCT'), ('C', 'NOUN'), ('State', 'NOUN'), ('C', 'NOUN'), ('δ(', 'NUM'), ('(', 'PUNCT'), ('1,2,3,5', 'NUM'), (')', 'PUNCT'), (',', 'PUNCT'), ('a', 'NUM'), (')', 'PUNCT'), ('=', 'PUNCT'), ('followpos', 'NOUN'), ('(', 'PUNCT'), ('1', 'NUM'), (')', 'PUNCT'), ('U', 'NOUN'), ('followpos', 'NOUN'), ('(', 'PUNCT'), ('3', 'NUM'), (')', 'PUNCT'), ('=', 'SYM'), ('(', 'PUNCT'), ('1,2,3', 'NUM'), (')', 'PUNCT'), ('U', 'NOUN'), ('(', 'PUNCT'), ('4', 'NUM'), (')', 'PUNCT'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('1,2,3,4', 'NUM'), ('}', 'PUNCT'), ('-----', 'PUNCT'), ('B', 'NOUN'), ('δ(', 'NUM'), ('(', 'PUNCT'), ('1,2,3,5', 'NUM'), (')', 'PUNCT'), (',', 'PUNCT'), ('b', 'NUM'), (')', 'PUNCT'), ('=', 'PUNCT'), ('followpos', 'NOUN'), ('(', 'PUNCT'), ('2', 'NUM'), (')', 'PUNCT'), ('U', 'NOUN'), ('followpos', 'NOUN'), ('(', 'PUNCT'), ('5', 'NUM'), (')', 'PUNCT'), ('=', 'PUNCT'), ('(', 'PUNCT'), ('1,2,3', 'NUM'), (')', 'PUNCT'), ('U', 'NOUN'), ('(', 'PUNCT'), ('6', 'NUM'), (')', 'PUNCT'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('1,2,3,6', 'NUM'), ('}', 'PUNCT'), ('-----', 'PUNCT'), ('D', 'NOUN'), ('Position', 'NOUN'), ('followpos', 'NOUN'), ('5', 'NUM'), ('6', 'NUM'), ('4', 'NUM'), ('5', 'NUM'), ('3', 'NUM'), ('4', 'NUM'), ('2', 'NUM'), ('1,2,3', 'NUM'), ('1', 'NUM'), ('1,2,3', 'NUM'), ('States', 'PROPN'), ('a', 'DET'), ('b', 'NOUN'), ('A=', 'NOUN'), ('{', 'PUNCT'), ('1', 'NUM'), (',', 'PUNCT'), ('2,3', 'NUM'), ('}', 'PUNCT'), ('B', 'NOUN'), ('A', 'NOUN'), ('B={', 'PROPN'), ('1', 'NUM'), (',', 'PUNCT'), ('2,3,4', 'NUM'), ('}', 'PUNCT'), ('B', 'NOUN'), ('C', 'NOUN'), ('C={', 'PROPN'), ('1', 'NUM'), (',', 'PUNCT'), ('2,3,5', 'NUM'), ('}', 'PUNCT'), ('B', 'NOUN'), ('D', 'NOUN'), ('D={', 'NOUN'), ('1,', 'NUM'), ('2,3,6', 'NUM'), ('}', 'PUNCT'), ('Prof.', 'NOUN'), ('Dixita', 'PROPN'), ('B', 'NOUN'), ('Kagathara', 'NOUN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'ADJ'), ('Analyzer', 'NOUN'), ('‹#›', 'NOUN'), ('Conversion', 'NOUN'), ('from', 'ADP'), ('regular', 'ADJ'), ('expression', 'NOUN'), ('to', 'ADP'), ('DFA', 'PROPN'), ('State', 'NOUN'), ('D', 'PROPN'), ('δ(', 'NOUN'), ('(', 'PUNCT'), ('1,2,3,6', 'NUM'), (')', 'PUNCT'), (',', 'PUNCT'), ('a', 'NUM'), (')', 'PUNCT'), ('=', 'PUNCT'), ('followpos', 'NOUN'), ('(', 'PUNCT'), ('1', 'NUM'), (')', 'PUNCT'), ('U', 'NOUN'), ('followpos', 'NOUN'), ('(', 'PUNCT'), ('3', 'NUM'), (')', 'PUNCT'), ('=', 'PUNCT'), ('(', 'PUNCT'), ('1,2,3', 'NUM'), (')', 'PUNCT'), ('U', 'NOUN'), ('(', 'PUNCT'), ('4', 'NUM'), (')', 'PUNCT'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('1,2,3,4', 'NUM'), ('}', 'PUNCT'), ('-----', 'PUNCT'), ('B', 'NOUN'), ('δ(', 'NUM'), ('(', 'PUNCT'), ('1,2,3,6', 'NUM'), (')', 'PUNCT'), (',', 'PUNCT'), ('b', 'NUM'), (')', 'PUNCT'), ('=', 'PUNCT'), ('followpos', 'NOUN'), ('(', 'PUNCT'), ('2', 'NUM'), (')', 'PUNCT'), ('=', 'PUNCT'), ('(', 'PUNCT'), ('1,', 'NUM'), ('2,3', 'NUM'), (')', 'PUNCT'), ('-----', 'PUNCT'), ('A', 'DET'), ('Position', 'NOUN'), ('followpos', 'NOUN'), ('5', 'NUM'), ('6', 'NUM'), ('4', 'NUM'), ('5', 'NUM'), ('3', 'NUM'), ('4', 'NUM'), ('2', 'NUM'), ('1,2,3', 'NUM'), ('1', 'NUM'), ('1,2,3', 'NUM'), ('States', 'PROPN'), ('a', 'NOUN'), ('b', 'NOUN'), ('A=', 'NOUN'), ('{', 'PUNCT'), ('1', 'NUM'), (',', 'PUNCT'), ('2,3', 'NUM'), ('}', 'PUNCT'), ('B', 'NOUN'), ('A', 'NOUN'), ('B={', 'PROPN'), ('1', 'NUM'), (',', 'PUNCT'), ('2,3,4', 'NUM'), ('}', 'PUNCT'), ('B', 'NOUN'), ('C', 'NOUN'), ('C={', 'PROPN'), ('1', 'NUM'), (',', 'PUNCT'), ('2,3,5', 'NUM'), ('}', 'PUNCT'), ('B', 'NOUN'), ('D', 'NOUN'), ('D={', 'NOUN'), ('1', 'NUM'), (',', 'PUNCT'), ('2,3,6', 'NUM'), ('}', 'PUNCT'), ('B', 'NUM'), ('A', 'NOUN'), ('A', 'NOUN'), ('B', 'NOUN'), ('C', 'NOUN'), ('D', 'NOUN'), ('a', 'DET'), ('b', 'NOUN'), ('b', 'NOUN'), ('b', 'NUM'), ('a', 'DET'), ('a', 'DET'), ('b', 'NOUN'), ('a', 'DET'), ('DFA', 'NOUN'), ('Prof.', 'NOUN'), ('Dixita', 'PROPN'), ('B', 'NOUN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'ADJ'), ('Analyzer', 'NOUN'), ('‹#›', 'NOUN'), ('Conversion', 'NOUN'), ('from', 'ADP'), ('regular', 'ADJ'), ('expression', 'NOUN'), ('to', 'ADP'), ('DFA', 'PROPN'), ('Construct', 'PROPN'), ('DFA', 'NOUN'), ('for', 'SCONJ'), ('following', 'VERB'), ('regular', 'ADJ'), ('expression', 'NOUN'), (':', 'PUNCT'), ('(', 'PUNCT'), ('c', 'NOUN'), ('|', 'PUNCT'), ('d', 'NOUN'), (')', 'PUNCT'), ('*', 'PUNCT'), ('c#', 'NOUN'), ('Prof.', 'NOUN'), ('Dixita', 'PROPN'), ('B', 'NOUN'), ('Kagathara', 'PROPN'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('\uf077', 'NUM'), ('Unit', 'NOUN'), ('2', 'NUM'), ('–', 'PUNCT'), ('Lexical', 'ADJ'), ('Analyzer', 'NOUN'), ('‹#›', 'NOUN'), ('Thank', 'VERB'), ('You', 'PRON'), ('/docProps/thumbnail.jpeg', 'X')] 

 XPOS tags are: 
>> [('A', 'DT'), ('leaf', 'NN'), ('with', 'IN'), ('position', 'NN'), ('n', 'NN'), ('c', 'NNP'), ('1', 'CD'), ('c2', 'NN'), ('if', 'IN'), ('(', '-LRB-'), ('nullable', 'NN'), ('(', '-LRB-'), ('c2', 'NN'), (')', '-RRB-'), (')', '-RRB-'), ('then', 'RB'), ('lastpos', 'NN'), ('(', '-LRB-'), ('c1', 'LS'), (')', '-RRB-'), ('\uf0c8', 'NN'), ('lastpos', 'NN'), ('(', '-LRB-'), ('c2', 'LS'), (')', '-RRB-'), ('else', 'JJ'), ('lastpos', 'NN'), ('(', '-LRB-'), ('c2', 'NN'), (')', '-RRB-'), ('n', 'NN'), ('c1', 'CD'), ('lastpos', 'NN'), ('(', '-LRB-'), ('c1', 'LS'), (')', '-RRB-'), ('n', 'NN'), ('c1', 'CD'), ('c2', 'NN'), ('lastpos', 'NNP'), ('(', '-LRB-'), ('c1', 'LS'), (')', '-RRB-'), ('\uf0c8', ','), ('lastpos', 'NNP'), ('(', '-LRB-'), ('c2', 'LS'), (')', '-RRB-'), ('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('2', 'CD'), ('–', ','), ('Lexical', 'JJ'), ('Analyzer', 'NN'), ('‹#›', 'NN'), ('Conversion', 'NN'), ('from', 'IN'), ('regular', 'JJ'), ('expression', 'NN'), ('to', 'IN'), ('DFA', 'NN'), ('Position', 'NN'), ('followpos', 'NNS'), ('.', '.'), ('.', '.'), ('.', '.'), ('.', '.'), ('Step', 'NN'), ('4', 'CD'), (':', ':'), ('Calculate', 'NN'), ('followpos', 'NNS'), ('5', 'LS'), ('6', 'LS'), ('.', '.'), ('Firstpos', 'NNP'), ('Lastpos', 'NNP'), ('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('2', 'CD'), ('–', ','), ('Lexical', 'JJ'), ('Analyzer', 'NN'), ('‹#›', 'NN'), ('Conversion', 'NN'), ('from', 'IN'), ('regular', 'JJ'), ('expression', 'NN'), ('to', 'IN'), ('DFA', 'NN'), ('Position', 'NN'), ('followpos', 'NNS'), ('.', '.'), ('.', '.'), ('.', '.'), ('.', '.'), ('Step', 'NN'), ('4', 'CD'), (':', ':'), ('Calculate', 'NN'), ('followpos', 'NNS'), ('5', 'CD'), ('6', 'LS'), ('.', '.'), ('4', 'CD'), ('5', 'CD'), ('Prof.', 'NN'), ('Dixita', 'NNP'), ('B', 'NN'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('2', 'CD'), ('–', ','), ('Lexical', 'JJ'), ('Analyzer', 'NN'), ('‹#›', 'NN'), ('Conversion', 'NN'), ('from', 'IN'), ('regular', 'JJ'), ('expression', 'NN'), ('to', 'IN'), ('DFA', 'NN'), ('Position', 'NN'), ('followpos', 'NNS'), ('.', '.'), ('.', '.'), ('.', '.'), ('.', '.'), ('Step', 'NN'), ('4', 'CD'), (':', ':'), ('Calculate', 'VB'), ('followpos', 'NNS'), ('5', 'CD'), ('6', 'LS'), ('.', '.'), ('4', 'CD'), ('5', 'CD'), ('3', 'CD'), ('4', 'CD'), ('Firstpos', 'NNP'), ('Lastpos', 'NNP'), ('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('2', 'CD'), ('–', ','), ('Lexical', 'JJ'), ('Analyzer', 'NN'), ('‹#›', 'NN'), ('Conversion', 'NN'), ('from', 'IN'), ('regular', 'JJ'), ('expression', 'NN'), ('to', 'IN'), ('DFA', 'NN'), ('Position', 'NN'), ('followpos', 'NNS'), ('.', '.'), ('.', '.'), ('.', '.'), ('.', '.'), ('Step', 'NN'), ('4', 'CD'), (':', ':'), ('Calculate', 'NN'), ('followpos', 'NNS'), ('5', 'CD'), ('6', 'CD'), ('.', '.'), ('4', 'CD'), ('5', 'CD'), ('3', 'CD'), ('4', 'CD'), ('2', 'CD'), ('3', 'CD'), ('1', 'CD'), ('3', 'CD'), ('Firstpos', 'NNP'), ('Lastpos', 'NNP'), ('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('2', 'CD'), ('–', ','), ('Lexical', 'JJ'), ('Analyzer', 'NN'), ('‹#›', 'NN'), ('Conversion', 'NN'), ('from', 'IN'), ('regular', 'JJ'), ('expression', 'NN'), ('to', 'IN'), ('DFA', 'NN'), ('Position', 'NN'), ('followpos', 'NNS'), ('.', '.'), ('.', '.'), ('.', '.'), ('.', '.'), ('Step', 'NN'), ('4', 'CD'), (':', ':'), ('Calculate', 'NN'), ('followpos', 'NNS'), ('5', 'CD'), ('6', 'CD'), ('4', 'CD'), ('5', 'CD'), ('3', 'CD'), ('4', 'CD'), ('2', 'CD'), ('3', 'CD'), ('1', 'CD'), ('3', 'CD'), ('*', 'NFP'), ('1,2', 'CD'), (',', ','), ('1,2', 'CD'), (',', ','), ('Firstpos', 'NNP'), ('Lastpos', 'NNP'), ('Prof.', 'NNP'), ('Dixita', 'NNP'), ('B', 'NNP'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('2', 'CD'), ('–', ','), ('Lexical', 'JJ'), ('Analyzer', 'NN'), ('‹#›', 'NN'), ('Conversion', 'NN'), ('from', 'IN'), ('regular', 'JJ'), ('expression', 'NN'), ('to', 'IN'), ('DFA', 'NNP'), ('Initial', 'JJ'), ('state', 'NN'), ('=', ','), ('of', 'IN'), ('root', 'NN'), ('=', 'SYM'), ('{', 'NFP'), ('1', 'CD'), (',2,3', 'CD'), ('}', 'NFP'), ('-----', 'NFP'), ('A', 'DT'), ('State', 'NN'), ('A', 'DT'), ('δ(', 'NN'), ('(', '-LRB-'), ('1,2,3', 'CD'), (')', '-RRB-'), (',', ','), ('a', 'LS'), (')', '-RRB-'), ('=', 'SYM'), ('followpos', 'NNS'), ('(', '-LRB-'), ('1', 'CD'), (')', '-RRB-'), ('U', 'NN'), ('followpos', 'NNS'), ('(', '-LRB-'), ('3', 'CD'), (')', '-RRB-'), ('=', 'SYM'), ('(', '-LRB-'), ('1,2,3', 'CD'), (')', '-RRB-'), ('U', 'NN'), ('(', '-LRB-'), ('4', 'CD'), (')', '-RRB-'), ('=', ','), ('{', ','), ('1,2,3,4', 'CD'), ('}', ','), ('-----', 'NFP'), ('B', 'NN'), ('δ(', 'CD'), ('(', '-LRB-'), ('1,2,3', 'CD'), (')', '-RRB-'), (',', ','), ('b', 'CD'), (')', '-RRB-'), ('=', ','), ('followpos', 'NNS'), ('(', '-LRB-'), ('2', 'CD'), (')', '-RRB-'), ('=', ','), ('(', '-LRB-'), ('1,', 'CD'), ('2,3', 'CD'), (')', '-RRB-'), ('-----', ','), ('A', 'DT'), ('Position', 'NN'), ('followpos', 'NNS'), ('5', 'CD'), ('6', 'CD'), ('4', 'CD'), ('5', 'CD'), ('3', 'CD'), ('4', 'CD'), ('2', 'CD'), ('1,2,3', 'CD'), ('1', 'CD'), ('1,2,3', 'CD'), ('States', 'NNPS'), ('a', 'NNP'), ('b', 'NN'), ('A={', 'NNP'), ('1', 'CD'), (',', ','), ('2,3', 'CD'), ('}', ','), ('B', 'CD'), ('A', 'NN'), ('B={', 'NNP'), ('1', 'CD'), (',', ','), ('2,3,4', 'CD'), ('}', ','), ('Prof.', 'NN'), ('Dixita', 'NNP'), ('B', 'NN'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('2', 'CD'), ('–', ','), ('Lexical', 'JJ'), ('Analyzer', 'NN'), ('‹#›', 'NN'), ('Conversion', 'NN'), ('from', 'IN'), ('regular', 'JJ'), ('expression', 'NN'), ('to', 'IN'), ('DFA', 'NN'), ('State', 'NN'), ('B', 'NN'), ('δ(', 'NN'), ('(', '-LRB-'), ('1,2,3,4', 'CD'), (')', '-RRB-'), (',', ','), ('a', 'LS'), (')', '-RRB-'), ('=', ','), ('followpos', 'NNS'), ('(', '-LRB-'), ('1', 'CD'), (')', '-RRB-'), ('U', 'NN'), ('followpos', 'NNS'), ('(', '-LRB-'), ('3', 'CD'), (')', '-RRB-'), ('=', 'SYM'), ('(', '-LRB-'), ('1,2,3', 'CD'), (')', '-RRB-'), ('U', 'NN'), ('(', '-LRB-'), ('4', 'CD'), (')', '-RRB-'), ('=', ','), ('{', 'NFP'), ('1,2,3,4', 'CD'), ('}', ','), ('-----', 'NFP'), ('B', 'NN'), ('δ(', 'CD'), ('(', '-LRB-'), ('1,2,3,4', 'CD'), (')', '-RRB-'), (',', ','), ('b', 'CD'), (')', '-RRB-'), ('=', ','), ('followpos', 'NNS'), ('(', '-LRB-'), ('2', 'CD'), (')', '-RRB-'), ('U', 'NN'), ('followpos', 'NNS'), ('(', '-LRB-'), ('4', 'CD'), (')', '-RRB-'), ('=', ','), ('(', '-LRB-'), ('1,2,3', 'CD'), (')', '-RRB-'), ('U', 'NN'), ('(', '-LRB-'), ('5', 'CD'), (')', '-RRB-'), ('=', ','), ('{', 'NFP'), ('1,2,3,5', 'CD'), ('}', '-RRB-'), ('-----', 'NFP'), ('C', 'NN'), ('State', 'NN'), ('C', 'NN'), ('δ(', 'CD'), ('(', '-LRB-'), ('1,2,3,5', 'CD'), (')', '-RRB-'), (',', ','), ('a', 'LS'), (')', '-RRB-'), ('=', ','), ('followpos', 'NNS'), ('(', '-LRB-'), ('1', 'CD'), (')', '-RRB-'), ('U', 'NN'), ('followpos', 'NNS'), ('(', '-LRB-'), ('3', 'CD'), (')', '-RRB-'), ('=', 'SYM'), ('(', '-LRB-'), ('1,2,3', 'CD'), (')', '-RRB-'), ('U', 'NN'), ('(', '-LRB-'), ('4', 'CD'), (')', '-RRB-'), ('=', ','), ('{', 'NFP'), ('1,2,3,4', 'CD'), ('}', ','), ('-----', 'NFP'), ('B', 'NN'), ('δ(', 'CD'), ('(', '-LRB-'), ('1,2,3,5', 'CD'), (')', '-RRB-'), (',', ','), ('b', 'LS'), (')', '-RRB-'), ('=', ','), ('followpos', 'NNS'), ('(', '-LRB-'), ('2', 'CD'), (')', '-RRB-'), ('U', 'NN'), ('followpos', 'NNS'), ('(', '-LRB-'), ('5', 'CD'), (')', '-RRB-'), ('=', ','), ('(', '-LRB-'), ('1,2,3', 'CD'), (')', '-RRB-'), ('U', 'NN'), ('(', '-LRB-'), ('6', 'CD'), (')', '-RRB-'), ('=', ','), ('{', 'NFP'), ('1,2,3,6', 'CD'), ('}', 'NFP'), ('-----', 'NFP'), ('D', 'NN'), ('Position', 'NN'), ('followpos', 'NN'), ('5', 'CD'), ('6', 'CD'), ('4', 'CD'), ('5', 'CD'), ('3', 'CD'), ('4', 'CD'), ('2', 'CD'), ('1,2,3', 'CD'), ('1', 'CD'), ('1,2,3', 'CD'), ('States', 'NNPS'), ('a', 'DT'), ('b', 'NN'), ('A=', 'NN'), ('{', ','), ('1', 'CD'), (',', ','), ('2,3', 'CD'), ('}', ','), ('B', 'NN'), ('A', 'NN'), ('B={', 'NNP'), ('1', 'CD'), (',', ','), ('2,3,4', 'CD'), ('}', ','), ('B', 'NN'), ('C', 'NN'), ('C={', 'NNP'), ('1', 'CD'), (',', ','), ('2,3,5', 'CD'), ('}', ','), ('B', 'NN'), ('D', 'NN'), ('D={', 'NN'), ('1,', 'CD'), ('2,3,6', 'CD'), ('}', '-LRB-'), ('Prof.', 'NN'), ('Dixita', 'NNP'), ('B', 'NN'), ('Kagathara', 'NN'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('2', 'CD'), ('–', ','), ('Lexical', 'JJ'), ('Analyzer', 'NN'), ('‹#›', 'NN'), ('Conversion', 'NN'), ('from', 'IN'), ('regular', 'JJ'), ('expression', 'NN'), ('to', 'IN'), ('DFA', 'NNP'), ('State', 'NN'), ('D', 'NNP'), ('δ(', 'NN'), ('(', '-LRB-'), ('1,2,3,6', 'CD'), (')', '-RRB-'), (',', ','), ('a', 'LS'), (')', '-RRB-'), ('=', ','), ('followpos', 'NNS'), ('(', '-LRB-'), ('1', 'CD'), (')', '-RRB-'), ('U', 'NN'), ('followpos', 'NNS'), ('(', '-LRB-'), ('3', 'CD'), (')', '-RRB-'), ('=', ','), ('(', '-LRB-'), ('1,2,3', 'CD'), (')', '-RRB-'), ('U', 'NN'), ('(', '-LRB-'), ('4', 'CD'), (')', '-RRB-'), ('=', ','), ('{', ','), ('1,2,3,4', 'CD'), ('}', ','), ('-----', ','), ('B', 'NN'), ('δ(', 'CD'), ('(', '-LRB-'), ('1,2,3,6', 'CD'), (')', '-RRB-'), (',', ','), ('b', 'CD'), (')', '-RRB-'), ('=', ','), ('followpos', 'NNS'), ('(', '-LRB-'), ('2', 'CD'), (')', '-RRB-'), ('=', ','), ('(', '-LRB-'), ('1,', 'CD'), ('2,3', 'CD'), (')', '-RRB-'), ('-----', ','), ('A', 'DT'), ('Position', 'NN'), ('followpos', 'NNS'), ('5', 'CD'), ('6', 'CD'), ('4', 'CD'), ('5', 'CD'), ('3', 'CD'), ('4', 'CD'), ('2', 'CD'), ('1,2,3', 'CD'), ('1', 'CD'), ('1,2,3', 'CD'), ('States', 'NNPS'), ('a', 'NN'), ('b', 'NN'), ('A=', 'NN'), ('{', ','), ('1', 'CD'), (',', ','), ('2,3', 'CD'), ('}', ','), ('B', 'NN'), ('A', 'NN'), ('B={', 'NNP'), ('1', 'CD'), (',', ','), ('2,3,4', 'CD'), ('}', ','), ('B', 'NN'), ('C', 'NN'), ('C={', 'NNP'), ('1', 'CD'), (',', ','), ('2,3,5', 'CD'), ('}', ','), ('B', 'NN'), ('D', 'NN'), ('D={', 'NN'), ('1', 'CD'), (',', ','), ('2,3,6', 'CD'), ('}', ','), ('B', 'CD'), ('A', 'NN'), ('A', 'NN'), ('B', 'NN'), ('C', 'NN'), ('D', 'NN'), ('a', 'DT'), ('b', 'NN'), ('b', 'NN'), ('b', 'CD'), ('a', 'DT'), ('a', 'DT'), ('b', 'NN'), ('a', 'DT'), ('DFA', 'NN'), ('Prof.', 'NN'), ('Dixita', 'NNP'), ('B', 'NN'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('2', 'CD'), ('–', ','), ('Lexical', 'JJ'), ('Analyzer', 'NN'), ('‹#›', 'NN'), ('Conversion', 'NN'), ('from', 'IN'), ('regular', 'JJ'), ('expression', 'NN'), ('to', 'IN'), ('DFA', 'NNP'), ('Construct', 'NNP'), ('DFA', 'NN'), ('for', 'IN'), ('following', 'VBG'), ('regular', 'JJ'), ('expression', 'NN'), (':', ':'), ('(', '-LRB-'), ('c', 'NN'), ('|', ','), ('d', 'NN'), (')', '-RRB-'), ('*', 'NFP'), ('c#', 'NN'), ('Prof.', 'NN'), ('Dixita', 'NNP'), ('B', 'NN'), ('Kagathara', 'NNP'), ('#', 'NN'), ('2170701', 'CD'), ('(', '-LRB-'), ('CD', 'NN'), (')', '-RRB-'), ('\uf077', 'CD'), ('Unit', 'NN'), ('2', 'CD'), ('–', ','), ('Lexical', 'JJ'), ('Analyzer', 'NN'), ('‹#›', 'NN'), ('Thank', 'VBP'), ('You', 'PRP'), ('/docProps/thumbnail.jpeg', 'ADD')] 

 Lemmas are: 
>> [('A', 'a'), ('leaf', 'leaf'), ('with', 'with'), ('position', 'position'), ('n', 'n'), ('c', 'c'), ('1', '1'), ('c2', 'c2'), ('if', 'if'), ('(', '('), ('nullable', 'nullable'), ('(', '('), ('c2', 'c2'), (')', ')'), (')', ')'), ('then', 'then'), ('lastpos', 'lastpos'), ('(', '('), ('c1', 'c1'), (')', ')'), ('\uf0c8', '\uf0c8'), ('lastpos', 'lastpos'), ('(', '('), ('c2', 'c2'), (')', ')'), ('else', 'else'), ('lastpos', 'lastpos'), ('(', '('), ('c2', 'c2'), (')', ')'), ('n', 'n'), ('c1', 'c1'), ('lastpos', 'lastpos'), ('(', '('), ('c1', 'c1'), (')', ')'), ('n', 'n'), ('c1', 'c1'), ('c2', 'c2'), ('lastpos', 'lastpos'), ('(', '('), ('c1', 'c1'), (')', ')'), ('\uf0c8', "''"), ('lastpos', 'lastpos'), ('(', '('), ('c2', 'c2'), (')', ')'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('2', '2'), ('–', '-'), ('Lexical', 'lexical'), ('Analyzer', 'analyzer'), ('‹#›', '‹#›'), ('Conversion', 'conversion'), ('from', 'from'), ('regular', 'regular'), ('expression', 'expression'), ('to', 'to'), ('DFA', 'dfa'), ('Position', 'position'), ('followpos', 'followpo'), ('.', '.'), ('.', '.'), ('.', '.'), ('.', '.'), ('Step', 'step'), ('4', '4'), (':', ':'), ('Calculate', 'calculate'), ('followpos', 'followpo'), ('5', '5'), ('6', '6'), ('.', '.'), ('Firstpos', 'Firstpos'), ('Lastpos', 'Lastpos'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('2', '2'), ('–', '-'), ('Lexical', 'lexical'), ('Analyzer', 'analyzer'), ('‹#›', '‹#›'), ('Conversion', 'conversion'), ('from', 'from'), ('regular', 'regular'), ('expression', 'expression'), ('to', 'to'), ('DFA', 'dfa'), ('Position', 'position'), ('followpos', 'followpo'), ('.', '.'), ('.', '.'), ('.', '.'), ('.', '.'), ('Step', 'step'), ('4', '4'), (':', ':'), ('Calculate', 'calculate'), ('followpos', 'followpo'), ('5', '5'), ('6', '6'), ('.', '.'), ('4', '4'), ('5', '5'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'b'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('2', '2'), ('–', '-'), ('Lexical', 'lexical'), ('Analyzer', 'analyzer'), ('‹#›', '‹#›'), ('Conversion', 'conversion'), ('from', 'from'), ('regular', 'regular'), ('expression', 'expression'), ('to', 'to'), ('DFA', 'dfa'), ('Position', 'position'), ('followpos', 'followpo'), ('.', '.'), ('.', '.'), ('.', '.'), ('.', '.'), ('Step', 'step'), ('4', '4'), (':', ':'), ('Calculate', 'calculate'), ('followpos', 'followpo'), ('5', '5'), ('6', '6'), ('.', '.'), ('4', '4'), ('5', '5'), ('3', '3'), ('4', '4'), ('Firstpos', 'Firstpos'), ('Lastpos', 'Lastpos'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('2', '2'), ('–', '-'), ('Lexical', 'lexical'), ('Analyzer', 'analyzer'), ('‹#›', '‹#›'), ('Conversion', 'conversion'), ('from', 'from'), ('regular', 'regular'), ('expression', 'expression'), ('to', 'to'), ('DFA', 'dfa'), ('Position', 'position'), ('followpos', 'followpo'), ('.', '.'), ('.', '.'), ('.', '.'), ('.', '.'), ('Step', 'step'), ('4', '4'), (':', ':'), ('Calculate', 'calculate'), ('followpos', 'followpo'), ('5', '5'), ('6', '6'), ('.', '.'), ('4', '4'), ('5', '5'), ('3', '3'), ('4', '4'), ('2', '2'), ('3', '3'), ('1', '1'), ('3', '3'), ('Firstpos', 'Firstpos'), ('Lastpos', 'Lastpos'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('2', '2'), ('–', '-'), ('Lexical', 'lexical'), ('Analyzer', 'analyzer'), ('‹#›', '‹#›'), ('Conversion', 'conversion'), ('from', 'from'), ('regular', 'regular'), ('expression', 'expression'), ('to', 'to'), ('DFA', 'dfa'), ('Position', 'position'), ('followpos', 'followpo'), ('.', '.'), ('.', '.'), ('.', '.'), ('.', '.'), ('Step', 'step'), ('4', '4'), (':', ':'), ('Calculate', 'calculate'), ('followpos', 'followpo'), ('5', '5'), ('6', '6'), ('4', '4'), ('5', '5'), ('3', '3'), ('4', '4'), ('2', '2'), ('3', '3'), ('1', '1'), ('3', '3'), ('*', '*'), ('1,2', '1,2'), (',', ','), ('1,2', '1,2'), (',', ','), ('Firstpos', 'Firstpos'), ('Lastpos', 'Lastpos'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'B'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('2', '2'), ('–', '-'), ('Lexical', 'lexical'), ('Analyzer', 'analyzer'), ('‹#›', '‹#›'), ('Conversion', 'conversion'), ('from', 'from'), ('regular', 'regular'), ('expression', 'expression'), ('to', 'to'), ('DFA', 'DFA'), ('Initial', 'Initial'), ('state', 'state'), ('=', '='), ('of', 'of'), ('root', 'root'), ('=', '='), ('{', '{'), ('1', '1'), (',2,3', ',2,3'), ('}', '}'), ('-----', '-----'), ('A', 'a'), ('State', 'state'), ('A', 'a'), ('δ(', 'δ('), ('(', '('), ('1,2,3', '1223'), (')', ')'), (',', ','), ('a', 'a'), (')', ')'), ('=', '='), ('followpos', 'followpo'), ('(', '('), ('1', '1'), (')', ')'), ('U', 'U'), ('followpos', 'followpo'), ('(', '('), ('3', '3'), (')', ')'), ('=', '='), ('(', '('), ('1,2,3', '1223'), (')', ')'), ('U', 'U'), ('(', '('), ('4', '4'), (')', ')'), ('=', '='), ('{', '{'), ('1,2,3,4', '12234'), ('}', '}'), ('-----', '-----'), ('B', 'b'), ('δ(', 'δ('), ('(', '('), ('1,2,3', '1223'), (')', ')'), (',', ','), ('b', 'b'), (')', ')'), ('=', '='), ('followpos', 'followpo'), ('(', '('), ('2', '2'), (')', ')'), ('=', '='), ('(', '('), ('1,', '1,'), ('2,3', '2,3'), (')', ')'), ('-----', '-----'), ('A', 'a'), ('Position', 'position'), ('followpos', 'followpo'), ('5', '5'), ('6', '6'), ('4', '4'), ('5', '5'), ('3', '3'), ('4', '4'), ('2', '2'), ('1,2,3', '1223'), ('1', '1'), ('1,2,3', '1223'), ('States', 'State'), ('a', 'a'), ('b', 'b'), ('A={', 'A={'), ('1', '1'), (',', ','), ('2,3', '2,3'), ('}', '}'), ('B', 'b'), ('A', 'a'), ('B={', 'B={'), ('1', '1'), (',', ','), ('2,3,4', '2334'), ('}', '}'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'b'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('2', '2'), ('–', '-'), ('Lexical', 'lexical'), ('Analyzer', 'analyzer'), ('‹#›', '‹#›'), ('Conversion', 'conversion'), ('from', 'from'), ('regular', 'regular'), ('expression', 'expression'), ('to', 'to'), ('DFA', 'dfa'), ('State', 'state'), ('B', 'b'), ('δ(', 'δ('), ('(', '('), ('1,2,3,4', '12234'), (')', ')'), (',', ','), ('a', 'a'), (')', ')'), ('=', '='), ('followpos', 'followpo'), ('(', '('), ('1', '1'), (')', ')'), ('U', 'U'), ('followpos', 'followpo'), ('(', '('), ('3', '3'), (')', ')'), ('=', '='), ('(', '('), ('1,2,3', '1223'), (')', ')'), ('U', 'U'), ('(', '('), ('4', '4'), (')', ')'), ('=', '='), ('{', '{'), ('1,2,3,4', '12234'), ('}', '}'), ('-----', '-----'), ('B', 'b'), ('δ(', 'δ('), ('(', '('), ('1,2,3,4', '12234'), (')', ')'), (',', ','), ('b', 'b'), (')', ')'), ('=', '='), ('followpos', 'followpo'), ('(', '('), ('2', '2'), (')', ')'), ('U', 'U'), ('followpos', 'followpo'), ('(', '('), ('4', '4'), (')', ')'), ('=', '='), ('(', '('), ('1,2,3', '1223'), (')', ')'), ('U', 'U'), ('(', '('), ('5', '5'), (')', ')'), ('=', '='), ('{', '{'), ('1,2,3,5', '12335'), ('}', '}'), ('-----', '-----'), ('C', 'c'), ('State', 'state'), ('C', 'c'), ('δ(', 'δ('), ('(', '('), ('1,2,3,5', '12335'), (')', ')'), (',', ','), ('a', 'a'), (')', ')'), ('=', '='), ('followpos', 'followpo'), ('(', '('), ('1', '1'), (')', ')'), ('U', 'U'), ('followpos', 'followpo'), ('(', '('), ('3', '3'), (')', ')'), ('=', '='), ('(', '('), ('1,2,3', '1223'), (')', ')'), ('U', 'U'), ('(', '('), ('4', '4'), (')', ')'), ('=', '='), ('{', '{'), ('1,2,3,4', '12234'), ('}', '}'), ('-----', '-----'), ('B', 'b'), ('δ(', 'δ('), ('(', '('), ('1,2,3,5', '12335'), (')', ')'), (',', ','), ('b', 'b'), (')', ')'), ('=', '='), ('followpos', 'followpo'), ('(', '('), ('2', '2'), (')', ')'), ('U', 'U'), ('followpos', 'followpo'), ('(', '('), ('5', '5'), (')', ')'), ('=', '='), ('(', '('), ('1,2,3', '1223'), (')', ')'), ('U', 'U'), ('(', '('), ('6', '6'), (')', ')'), ('=', '='), ('{', '{'), ('1,2,3,6', '12336'), ('}', '}'), ('-----', '-----'), ('D', 'd'), ('Position', 'position'), ('followpos', 'followpo'), ('5', '5'), ('6', '6'), ('4', '4'), ('5', '5'), ('3', '3'), ('4', '4'), ('2', '2'), ('1,2,3', '1223'), ('1', '1'), ('1,2,3', '1223'), ('States', 'State'), ('a', 'a'), ('b', 'b'), ('A=', 'a='), ('{', '{'), ('1', '1'), (',', ','), ('2,3', '2,3'), ('}', '}'), ('B', 'b'), ('A', 'a'), ('B={', 'B={'), ('1', '1'), (',', ','), ('2,3,4', '2334'), ('}', '}'), ('B', 'b'), ('C', 'c'), ('C={', 'C={'), ('1', '1'), (',', ','), ('2,3,5', '2,3,5'), ('}', '}'), ('B', 'b'), ('D', 'd'), ('D={', 'd={'), ('1,', '1,'), ('2,3,6', '2336'), ('}', '}'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'b'), ('Kagathara', 'kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('2', '2'), ('–', '-'), ('Lexical', 'lexical'), ('Analyzer', 'analyzer'), ('‹#›', '‹#›'), ('Conversion', 'conversion'), ('from', 'from'), ('regular', 'regular'), ('expression', 'expression'), ('to', 'to'), ('DFA', 'DFA'), ('State', 'state'), ('D', 'D'), ('δ(', 'δ('), ('(', '('), ('1,2,3,6', '12336'), (')', ')'), (',', ','), ('a', 'a'), (')', ')'), ('=', '='), ('followpos', 'followpo'), ('(', '('), ('1', '1'), (')', ')'), ('U', 'U'), ('followpos', 'followpo'), ('(', '('), ('3', '3'), (')', ')'), ('=', '='), ('(', '('), ('1,2,3', '1223'), (')', ')'), ('U', 'U'), ('(', '('), ('4', '4'), (')', ')'), ('=', '='), ('{', '{'), ('1,2,3,4', '12234'), ('}', '}'), ('-----', '-----'), ('B', 'b'), ('δ(', 'δ('), ('(', '('), ('1,2,3,6', '12336'), (')', ')'), (',', ','), ('b', 'b'), (')', ')'), ('=', '='), ('followpos', 'followpo'), ('(', '('), ('2', '2'), (')', ')'), ('=', '='), ('(', '('), ('1,', '1,'), ('2,3', '2,3'), (')', ')'), ('-----', '-----'), ('A', 'a'), ('Position', 'position'), ('followpos', 'followpo'), ('5', '5'), ('6', '6'), ('4', '4'), ('5', '5'), ('3', '3'), ('4', '4'), ('2', '2'), ('1,2,3', '1223'), ('1', '1'), ('1,2,3', '1223'), ('States', 'State'), ('a', 'a'), ('b', 'b'), ('A=', 'a='), ('{', '{'), ('1', '1'), (',', ','), ('2,3', '2,3'), ('}', '}'), ('B', 'b'), ('A', 'a'), ('B={', 'B={'), ('1', '1'), (',', ','), ('2,3,4', '2334'), ('}', '}'), ('B', 'b'), ('C', 'c'), ('C={', 'C={'), ('1', '1'), (',', ','), ('2,3,5', '2,3,5'), ('}', '}'), ('B', 'b'), ('D', 'd'), ('D={', 'd={'), ('1', '1'), (',', ','), ('2,3,6', '2336'), ('}', '}'), ('B', 'b'), ('A', 'a'), ('A', 'a'), ('B', 'b'), ('C', 'c'), ('D', 'd'), ('a', 'a'), ('b', 'b'), ('b', 'b'), ('b', 'b'), ('a', 'a'), ('a', 'a'), ('b', 'b'), ('a', 'a'), ('DFA', 'dfa'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'b'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('2', '2'), ('–', '-'), ('Lexical', 'lexical'), ('Analyzer', 'analyzer'), ('‹#›', '‹#›'), ('Conversion', 'conversion'), ('from', 'from'), ('regular', 'regular'), ('expression', 'expression'), ('to', 'to'), ('DFA', 'DFA'), ('Construct', 'Construct'), ('DFA', 'dfa'), ('for', 'for'), ('following', 'follow'), ('regular', 'regular'), ('expression', 'expression'), (':', ':'), ('(', '('), ('c', 'c'), ('|', '|'), ('d', 'd'), (')', ')'), ('*', '*'), ('c#', 'c#'), ('Prof.', 'Prof.'), ('Dixita', 'Dixita'), ('B', 'b'), ('Kagathara', 'Kagathara'), ('#', '#'), ('2170701', '2170701'), ('(', '('), ('CD', 'cd'), (')', ')'), ('\uf077', '\uf077'), ('Unit', 'unit'), ('2', '2'), ('–', '-'), ('Lexical', 'lexical'), ('Analyzer', 'analyzer'), ('‹#›', '‹#›'), ('Thank', 'thank'), ('You', 'you'), ('/docProps/thumbnail.jpeg', '/docprops/thumbnail.jpeg')] 

 Dependency tags are: 
>> [(('A', 'leaf'), 'det'), (('leaf', 'root'), 'root'), (('with', 'n'), 'case'), (('position', 'n'), 'compound'), (('n', 'leaf'), 'nmod'), (('c', 'n'), 'flat'), (('1', 'c'), 'nummod'), (('c2', 'c'), 'flat'), (('if', 'nullable'), 'case'), (('(', 'c2'), 'punct'), (('nullable', 'lastpos'), 'compound'), (('(', 'c2'), 'punct'), (('c2', 'nullable'), 'dep'), ((')', 'c2'), 'punct'), ((')', 'c2'), 'punct'), (('then', 'lastpos'), 'advmod'), (('lastpos', 'lastpos'), 'compound'), (('(', 'c1'), 'punct'), (('c1', 'lastpos'), 'dep'), ((')', 'c1'), 'punct'), (('\uf0c8', 'lastpos'), 'compound'), (('lastpos', 'c2'), 'conj'), (('(', 'c2'), 'punct'), (('c2', 'lastpos'), 'dep'), ((')', 'c1'), 'punct'), (('else', 'c2'), 'amod'), (('lastpos', 'lastpos'), 'compound'), (('(', 'c2'), 'punct'), (('c2', 'n'), 'dep'), ((')', 'c2'), 'punct'), (('n', 'lastpos'), 'compound'), (('c1', 'c2'), 'dep'), (('lastpos', 'lastpos'), 'conj'), (('(', 'c1'), 'punct'), (('c1', 'lastpos'), 'dep'), ((')', 'c1'), 'punct'), (('n', 'lastpos'), 'compound'), (('c1', 'c1'), 'dep'), (('c2', 'lastpos'), 'compound'), (('lastpos', 'lastpos'), 'conj'), (('(', 'c1'), 'punct'), (('c1', 'lastpos'), 'dep'), ((')', 'c1'), 'punct'), (('\uf0c8', 'c1'), 'punct'), (('lastpos', 'leaf'), 'conj'), (('(', 'c2'), 'punct'), (('c2', 'Prof.'), 'dep'), ((')', 'c2'), 'punct'), (('Prof.', 'lastpos'), 'compound'), (('Dixita', 'lastpos'), 'compound'), (('B', '#'), 'compound'), (('Kagathara', 'B'), 'compound'), (('#', 'lastpos'), 'compound'), (('2170701', 'CD'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', 'Unit'), 'dep'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', 'lastpos'), 'conj'), (('2', 'CD'), 'dep'), (('–', 'Analyzer'), 'punct'), (('Lexical', 'Analyzer'), 'amod'), (('Analyzer', 'leaf'), 'conj'), (('‹#›', 'Conversion'), 'compound'), (('Conversion', 'Analyzer'), 'conj'), (('from', 'expression'), 'case'), (('regular', 'expression'), 'amod'), (('expression', 'Conversion'), 'nmod'), (('to', 'followpos'), 'case'), (('DFA', 'followpos'), 'compound'), (('Position', 'followpos'), 'compound'), (('followpos', 'expression'), 'nmod'), (('.', 'Conversion'), 'punct'), (('.', 'Step'), 'punct'), (('.', 'Step'), 'punct'), (('.', 'Step'), 'punct'), (('Step', 'leaf'), 'conj'), (('4', 'Step'), 'nummod'), ((':', 'followpos'), 'punct'), (('Calculate', 'followpos'), 'compound'), (('followpos', 'Step'), 'dep'), (('5', '6'), 'compound'), (('6', 'followpos'), 'dep'), (('.', '6'), 'punct'), (('Firstpos', 'leaf'), 'conj'), (('Lastpos', 'Firstpos'), 'compound'), (('Prof.', 'Firstpos'), 'compound'), (('Dixita', 'B'), 'compound'), (('B', '#'), 'compound'), (('Kagathara', '#'), 'compound'), (('#', 'CD'), 'compound'), (('2170701', 'CD'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', 'Unit'), 'dep'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', 'followpos'), 'conj'), (('2', 'CD'), 'dep'), (('–', 'followpos'), 'punct'), (('Lexical', 'Analyzer'), 'amod'), (('Analyzer', 'followpos'), 'conj'), (('‹#›', 'Conversion'), 'compound'), (('Conversion', 'Analyzer'), 'conj'), (('from', 'expression'), 'case'), (('regular', 'expression'), 'amod'), (('expression', 'Conversion'), 'nmod'), (('to', 'followpos'), 'case'), (('DFA', 'followpos'), 'compound'), (('Position', 'followpos'), 'compound'), (('followpos', 'expression'), 'nmod'), (('.', 'Firstpos'), 'punct'), (('.', 'Firstpos'), 'punct'), (('.', 'Step'), 'punct'), (('.', 'Step'), 'punct'), (('Step', 'leaf'), 'conj'), (('4', 'Step'), 'nummod'), ((':', 'followpos'), 'punct'), (('Calculate', 'followpos'), 'compound'), (('followpos', 'Step'), 'nsubj'), (('5', '6'), 'compound'), (('6', 'followpos'), 'dep'), (('.', '6'), 'punct'), (('4', 'Prof.'), 'compound'), (('5', 'Prof.'), 'compound'), (('Prof.', 'B'), 'compound'), (('Dixita', 'B'), 'compound'), (('B', '#'), 'compound'), (('Kagathara', '#'), 'compound'), (('#', 'followpos'), 'dep'), (('2170701', 'CD'), 'dep'), (('(', 'CD'), 'punct'), (('CD', 'Unit'), 'dep'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', 'Conversion'), 'dep'), (('2', 'CD'), 'dep'), (('–', 'Analyzer'), 'punct'), (('Lexical', 'Analyzer'), 'amod'), (('Analyzer', 'followpos'), 'conj'), (('‹#›', 'Conversion'), 'compound'), (('Conversion', 'Analyzer'), 'conj'), (('from', 'expression'), 'case'), (('regular', 'expression'), 'amod'), (('expression', 'Conversion'), 'nmod'), (('to', 'followpos'), 'case'), (('DFA', 'followpos'), 'compound'), (('Position', 'followpos'), 'compound'), (('followpos', 'expression'), 'nmod'), (('.', 'Step'), 'punct'), (('.', '#'), 'punct'), (('.', 'Step'), 'punct'), (('.', 'Step'), 'punct'), (('Step', 'leaf'), 'conj'), (('4', 'Step'), 'nummod'), ((':', 'Calculate'), 'punct'), (('Calculate', 'Step'), 'punct'), (('followpos', 'Calculate'), 'obj'), (('5', '6'), 'compound'), (('6', 'followpos'), 'dep'), (('.', '6'), 'punct'), (('4', '5'), 'compound'), (('5', 'Firstpos'), 'compound'), (('3', 'Firstpos'), 'compound'), (('4', 'Firstpos'), 'compound'), (('Firstpos', 'Lastpos'), 'compound'), (('Lastpos', 'Prof.'), 'compound'), (('Prof.', '#'), 'compound'), (('Dixita', '#'), 'compound'), (('B', '#'), 'compound'), (('Kagathara', '#'), 'compound'), (('#', 'followpos'), 'dep'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', 'Unit'), 'compound'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', 'Calculate'), 'obj'), (('2', 'Unit'), 'nummod'), (('–', 'leaf'), 'punct'), (('Lexical', 'Analyzer'), 'amod'), (('Analyzer', 'Prof.'), 'conj'), (('‹#›', 'Conversion'), 'compound'), (('Conversion', 'Analyzer'), 'conj'), (('from', 'expression'), 'case'), (('regular', 'expression'), 'amod'), (('expression', 'Conversion'), 'nmod'), (('to', 'followpos'), 'case'), (('DFA', 'followpos'), 'compound'), (('Position', 'followpos'), 'compound'), (('followpos', 'expression'), 'nmod'), (('.', 'Prof.'), 'punct'), (('.', 'leaf'), 'punct'), (('.', 'leaf'), 'punct'), (('.', 'Step'), 'punct'), (('Step', 'leaf'), 'conj'), (('4', 'Step'), 'nummod'), ((':', 'followpos'), 'punct'), (('Calculate', 'followpos'), 'compound'), (('followpos', 'Step'), 'dep'), (('5', 'followpos'), 'dep'), (('6', 'followpos'), 'dep'), (('.', 'Step'), 'punct'), (('4', '5'), 'compound'), (('5', '4'), 'compound'), (('3', '4'), 'compound'), (('4', '2'), 'compound'), (('2', '3'), 'compound'), (('3', '1'), 'compound'), (('1', 'Firstpos'), 'compound'), (('3', 'Firstpos'), 'nummod'), (('Firstpos', 'Lastpos'), 'compound'), (('Lastpos', 'Prof.'), 'compound'), (('Prof.', '#'), 'compound'), (('Dixita', 'B'), 'compound'), (('B', 'Kagathara'), 'compound'), (('Kagathara', '#'), 'compound'), (('#', 'CD'), 'compound'), (('2170701', 'CD'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', 'followpos'), 'dep'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', 'Prof.'), 'conj'), (('2', 'CD'), 'nummod'), (('–', 'Analyzer'), 'punct'), (('Lexical', 'Analyzer'), 'amod'), (('Analyzer', 'followpos'), 'conj'), (('‹#›', 'Analyzer'), 'compound'), (('Conversion', 'Analyzer'), 'conj'), (('from', 'expression'), 'case'), (('regular', 'expression'), 'amod'), (('expression', 'Conversion'), 'nmod'), (('to', 'followpos'), 'case'), (('DFA', 'followpos'), 'compound'), (('Position', 'followpos'), 'compound'), (('followpos', 'expression'), 'nmod'), (('.', 'Analyzer'), 'punct'), (('.', 'followpos'), 'punct'), (('.', 'Prof.'), 'punct'), (('.', 'Step'), 'punct'), (('Step', 'leaf'), 'conj'), (('4', 'Step'), 'nummod'), ((':', 'followpos'), 'punct'), (('Calculate', 'followpos'), 'compound'), (('followpos', 'Step'), 'nsubj'), (('5', 'followpos'), 'dep'), (('6', 'followpos'), 'nummod'), (('4', '5'), 'compound'), (('5', 'followpos'), 'dep'), (('3', '4'), 'compound'), (('4', '2'), 'compound'), (('2', '3'), 'compound'), (('3', '3'), 'compound'), (('1', '3'), 'compound'), (('3', '1,2'), 'compound'), (('*', '1,2'), 'punct'), (('1,2', '5'), 'compound'), ((',', '1,2'), 'punct'), (('1,2', '1,2'), 'compound'), ((',', 'Firstpos'), 'punct'), (('Firstpos', 'Prof.'), 'compound'), (('Lastpos', 'Prof.'), 'compound'), (('Prof.', '#'), 'compound'), (('Dixita', 'B'), 'compound'), (('B', '#'), 'compound'), (('Kagathara', '#'), 'compound'), (('#', 'CD'), 'compound'), (('2170701', 'CD'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', 'Unit'), 'compound'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', 'Conversion'), 'dep'), (('2', 'Unit'), 'nummod'), (('–', 'Analyzer'), 'punct'), (('Lexical', 'Analyzer'), 'amod'), (('Analyzer', '='), 'nsubj'), (('‹#›', 'Analyzer'), 'compound'), (('Conversion', 'Analyzer'), 'conj'), (('from', 'expression'), 'case'), (('regular', 'expression'), 'amod'), (('expression', 'Conversion'), 'nmod'), (('to', 'state'), 'case'), (('DFA', 'state'), 'compound'), (('Initial', 'state'), 'amod'), (('state', '='), 'obl'), (('=', '='), 'punct'), (('of', 'root'), 'case'), (('root', '='), 'nsubj'), (('=', 'followpos'), 'parataxis'), (('{', ',2,3'), 'punct'), (('1', ',2,3'), 'compound'), ((',2,3', '='), 'nummod'), (('}', 'State'), 'punct'), (('-----', 'State'), 'punct'), (('A', 'State'), 'det'), (('State', 'δ('), 'compound'), (('A', 'δ('), 'det'), (('δ(', '1,2,3'), 'compound'), (('(', '1,2,3'), 'punct'), (('1,2,3', 'a'), 'compound'), ((')', '1,2,3'), 'punct'), ((',', 'a'), 'punct'), (('a', '='), 'nummod'), ((')', 'a'), 'punct'), (('=', '='), 'advcl'), (('followpos', '='), 'nsubj'), (('(', '1'), 'punct'), (('1', 'U'), 'nummod'), ((')', '1'), 'punct'), (('U', 'followpos'), 'compound'), (('followpos', '='), 'nsubj'), (('(', '3'), 'punct'), (('3', '='), 'dep'), ((')', '3'), 'punct'), (('=', 'U'), 'compound'), (('(', '1,2,3'), 'punct'), (('1,2,3', 'U'), 'nummod'), ((')', '1,2,3'), 'punct'), (('U', '4'), 'nsubj'), (('(', '4'), 'punct'), (('4', '='), 'nummod'), ((')', '4'), 'punct'), (('=', 'B'), 'punct'), (('{', '1,2,3,4'), 'punct'), (('1,2,3,4', 'B'), 'nummod'), (('}', 'B'), 'punct'), (('-----', 'B'), 'punct'), (('B', 'followpos'), 'dep'), (('δ(', 'B'), 'nummod'), (('(', '1,2,3'), 'punct'), (('1,2,3', 'b'), 'compound'), ((')', '1,2,3'), 'punct'), ((',', 'b'), 'punct'), (('b', 'B'), 'nummod'), ((')', 'b'), 'punct'), (('=', 'followpos'), 'punct'), (('followpos', 'followpos'), 'conj'), (('(', '2'), 'punct'), (('2', '2,3'), 'nummod'), ((')', '2'), 'punct'), (('=', 'followpos'), 'punct'), (('(', '2,3'), 'punct'), (('1,', '2,3'), 'compound'), (('2,3', '='), 'nummod'), ((')', '2,3'), 'punct'), (('-----', 'followpos'), 'punct'), (('A', 'followpos'), 'det'), (('Position', 'followpos'), 'compound'), (('followpos', 'leaf'), 'conj'), (('5', 'followpos'), 'nummod'), (('6', 'followpos'), 'nummod'), (('4', '5'), 'compound'), (('5', '4'), 'compound'), (('3', '4'), 'compound'), (('4', '2'), 'compound'), (('2', '1,2,3'), 'compound'), (('1,2,3', 'States'), 'nummod'), (('1', 'States'), 'nummod'), (('1,2,3', 'States'), 'nummod'), (('States', 'followpos'), 'dep'), (('a', 'b'), 'compound'), (('b', 'States'), 'compound'), (('A={', 'b'), 'compound'), (('1', 'A={'), 'compound'), ((',', '2,3'), 'punct'), (('2,3', 'B'), 'compound'), (('}', 'B'), 'punct'), (('B', 'B={'), 'nummod'), (('A', 'B={'), 'compound'), (('B={', 'A={'), 'compound'), (('1', 'B={'), 'nummod'), ((',', '2,3,4'), 'punct'), (('2,3,4', 'Prof.'), 'nummod'), (('}', 'Prof.'), 'punct'), (('Prof.', 'B'), 'compound'), (('Dixita', 'B'), 'compound'), (('B', '#'), 'compound'), (('Kagathara', '#'), 'compound'), (('#', 'CD'), 'compound'), (('2170701', 'CD'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', 'Unit'), 'compound'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', 'Conversion'), 'compound'), (('2', 'Unit'), 'nummod'), (('–', 'Analyzer'), 'punct'), (('Lexical', 'Analyzer'), 'amod'), (('Analyzer', 'followpos'), 'conj'), (('‹#›', 'Analyzer'), 'compound'), (('Conversion', 'Analyzer'), 'conj'), (('from', 'expression'), 'case'), (('regular', 'expression'), 'amod'), (('expression', 'Conversion'), 'nmod'), (('to', 'B'), 'case'), (('DFA', 'B'), 'compound'), (('State', 'B'), 'compound'), (('B', 'expression'), 'nmod'), (('δ(', '1,2,3,4'), 'punct'), (('(', '1,2,3,4'), 'punct'), (('1,2,3,4', 'a'), 'compound'), ((')', '1,2,3,4'), 'punct'), ((',', 'a'), 'punct'), (('a', '='), 'nummod'), ((')', 'a'), 'punct'), (('=', 'followpos'), 'punct'), (('followpos', 'followpos'), 'compound'), (('(', '1'), 'punct'), (('1', 'U'), 'nummod'), ((')', '3'), 'punct'), (('U', 'followpos'), 'compound'), (('followpos', '='), 'nsubj'), (('(', '3'), 'punct'), (('3', '='), 'nummod'), ((')', '3'), 'punct'), (('=', 'Analyzer'), 'conj'), (('(', '1,2,3'), 'punct'), (('1,2,3', 'U'), 'nummod'), ((')', '1,2,3'), 'punct'), (('U', '='), 'nsubj'), (('(', '4'), 'punct'), (('4', '='), 'nummod'), ((')', '4'), 'punct'), (('=', '='), 'punct'), (('{', '1,2,3,4'), 'punct'), (('1,2,3,4', 'B'), 'nummod'), (('}', 'B'), 'punct'), (('-----', 'B'), 'punct'), (('B', '='), 'compound'), (('δ(', 'B'), 'nummod'), (('(', '1,2,3,4'), 'punct'), (('1,2,3,4', 'b'), 'compound'), ((')', 'b'), 'punct'), ((',', 'b'), 'punct'), (('b', 'B'), 'nummod'), ((')', 'b'), 'punct'), (('=', 'followpos'), 'punct'), (('followpos', 'B'), 'conj'), (('(', '2'), 'punct'), (('2', 'U'), 'nummod'), ((')', '2'), 'punct'), (('U', 'followpos'), 'compound'), (('followpos', 'followpos'), 'nmod'), (('(', '4'), 'punct'), (('4', 'followpos'), 'nummod'), ((')', '4'), 'punct'), (('=', 'U'), 'punct'), (('(', '1,2,3'), 'punct'), (('1,2,3', 'U'), 'nummod'), ((')', '1,2,3'), 'punct'), (('U', 'followpos'), 'conj'), (('(', '5'), 'punct'), (('5', 'U'), 'nummod'), ((')', '5'), 'punct'), (('=', 'U'), 'punct'), (('{', '1,2,3,5'), 'punct'), (('1,2,3,5', 'C'), 'nummod'), (('}', '1,2,3,5'), 'punct'), (('-----', 'C'), 'punct'), (('C', 'State'), 'compound'), (('State', 'C'), 'compound'), (('C', 'U'), 'compound'), (('δ(', 'C'), 'compound'), (('(', '1,2,3,5'), 'punct'), (('1,2,3,5', 'a'), 'compound'), ((')', '1,2,3,5'), 'punct'), ((',', 'a'), 'punct'), (('a', 'followpos'), 'dep'), ((')', 'a'), 'punct'), (('=', 'State'), 'punct'), (('followpos', '='), 'nsubj'), (('(', '1'), 'punct'), (('1', 'U'), 'nummod'), ((')', '1'), 'punct'), (('U', 'followpos'), 'compound'), (('followpos', 'followpos'), 'nmod'), (('(', '3'), 'punct'), (('3', '='), 'dep'), ((')', '3'), 'punct'), (('=', 'followpos'), 'parataxis'), (('(', '1,2,3'), 'punct'), (('1,2,3', 'U'), 'nummod'), ((')', '1,2,3'), 'punct'), (('U', '='), 'nsubj'), (('(', '4'), 'punct'), (('4', 'U'), 'nummod'), ((')', '4'), 'punct'), (('=', 'U'), 'punct'), (('{', '1,2,3,4'), 'punct'), (('1,2,3,4', 'B'), 'nummod'), (('}', 'B'), 'punct'), (('-----', 'B'), 'punct'), (('B', '='), 'compound'), (('δ(', 'B'), 'nummod'), (('(', '1,2,3,5'), 'punct'), (('1,2,3,5', 'B'), 'nummod'), ((')', '1,2,3,5'), 'punct'), ((',', 'b'), 'punct'), (('b', 'followpos'), 'nummod'), ((')', 'b'), 'punct'), (('=', 'B'), 'punct'), (('followpos', 'B'), 'conj'), (('(', '2'), 'punct'), (('2', 'followpos'), 'nummod'), ((')', '2'), 'punct'), (('U', 'followpos'), 'compound'), (('followpos', 'followpos'), 'conj'), (('(', '5'), 'punct'), (('5', 'followpos'), 'nummod'), ((')', '5'), 'punct'), (('=', 'followpos'), 'punct'), (('(', '1,2,3'), 'punct'), (('1,2,3', 'U'), 'nummod'), ((')', '1,2,3'), 'punct'), (('U', 'followpos'), 'dep'), (('(', '6'), 'punct'), (('6', 'U'), 'nummod'), ((')', '6'), 'punct'), (('=', 'followpos'), 'punct'), (('{', 'D'), 'punct'), (('1,2,3,6', 'D'), 'nummod'), (('}', '1,2,3,6'), 'punct'), (('-----', 'D'), 'punct'), (('D', 'followpos'), 'compound'), (('Position', 'followpos'), 'compound'), (('followpos', 'U'), 'dep'), (('5', 'followpos'), 'nummod'), (('6', 'followpos'), 'nummod'), (('4', 'followpos'), 'nummod'), (('5', '4'), 'compound'), (('3', '4'), 'compound'), (('4', '2'), 'compound'), (('2', '1,2,3'), 'compound'), (('1,2,3', 'States'), 'nummod'), (('1', 'States'), 'nummod'), (('1,2,3', 'States'), 'nummod'), (('States', 'followpos'), 'dep'), (('a', 'A='), 'det'), (('b', 'A='), 'compound'), (('A=', 'States'), 'compound'), (('{', 'A='), 'punct'), (('1', 'B'), 'nummod'), ((',', 'B'), 'punct'), (('2,3', 'B'), 'nummod'), (('}', 'B'), 'punct'), (('B', 'A='), 'compound'), (('A', 'B'), 'compound'), (('B={', 'B'), 'compound'), (('1', 'B={'), 'nummod'), ((',', '2,3,4'), 'punct'), (('2,3,4', 'B={'), 'nummod'), (('}', 'B'), 'punct'), (('B', 'B'), 'compound'), (('C', 'B'), 'compound'), (('C={', 'B'), 'compound'), (('1', 'C={'), 'nummod'), ((',', '2,3,5'), 'punct'), (('2,3,5', 'C={'), 'nummod'), (('}', 'B'), 'punct'), (('B', 'C={'), 'compound'), (('D', 'B'), 'compound'), (('D={', 'D'), 'compound'), (('1,', 'D={'), 'compound'), (('2,3,6', 'D={'), 'nummod'), (('}', 'Prof.'), 'punct'), (('Prof.', 'D={'), 'compound'), (('Dixita', 'B'), 'compound'), (('B', 'Prof.'), 'compound'), (('Kagathara', '#'), 'compound'), (('#', 'B'), 'compound'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', 'Unit'), 'compound'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', '#'), 'appos'), (('2', 'Unit'), 'nummod'), (('–', 'Unit'), 'punct'), (('Lexical', 'Analyzer'), 'amod'), (('Analyzer', 'Unit'), 'compound'), (('‹#›', 'Analyzer'), 'compound'), (('Conversion', 'Analyzer'), 'conj'), (('from', 'expression'), 'case'), (('regular', 'expression'), 'amod'), (('expression', 'Conversion'), 'nmod'), (('to', 'D'), 'case'), (('DFA', 'D'), 'compound'), (('State', 'D'), 'compound'), (('D', 'expression'), 'nmod'), (('δ(', 'D'), 'compound'), (('(', '1,2,3,6'), 'punct'), (('1,2,3,6', 'D'), 'nummod'), ((')', '1,2,3,6'), 'punct'), ((',', 'a'), 'punct'), (('a', 'followpos'), 'nummod'), ((')', 'a'), 'punct'), (('=', 'followpos'), 'punct'), (('followpos', 'Analyzer'), 'nmod'), (('(', '1'), 'punct'), (('1', 'U'), 'nummod'), ((')', '1'), 'punct'), (('U', 'followpos'), 'compound'), (('followpos', 'followpos'), 'conj'), (('(', '3'), 'punct'), (('3', 'followpos'), 'nummod'), ((')', '3'), 'punct'), (('=', 'followpos'), 'punct'), (('(', '1,2,3'), 'punct'), (('1,2,3', 'U'), 'nummod'), ((')', '1,2,3'), 'punct'), (('U', '='), 'compound'), (('(', '4'), 'punct'), (('4', 'U'), 'nummod'), ((')', '4'), 'punct'), (('=', 'U'), 'punct'), (('{', '1,2,3,4'), 'punct'), (('1,2,3,4', '='), 'nummod'), (('}', '1,2,3,4'), 'punct'), (('-----', 'B'), 'punct'), (('B', '1,2,3,4'), 'compound'), (('δ(', 'B'), 'nummod'), (('(', '1,2,3,6'), 'punct'), (('1,2,3,6', 'B'), 'nummod'), ((')', '1,2,3,6'), 'punct'), ((',', 'b'), 'punct'), (('b', 'B'), 'nummod'), ((')', 'b'), 'punct'), (('=', 'followpos'), 'punct'), (('followpos', 'B'), 'conj'), (('(', '2'), 'punct'), (('2', 'followpos'), 'nummod'), ((')', '2'), 'punct'), (('=', 'followpos'), 'punct'), (('(', '2,3'), 'punct'), (('1,', '2,3'), 'nummod'), (('2,3', '='), 'dep'), ((')', '2,3'), 'punct'), (('-----', 'followpos'), 'punct'), (('A', 'followpos'), 'det'), (('Position', 'followpos'), 'compound'), (('followpos', 'followpos'), 'parataxis'), (('5', 'followpos'), 'nummod'), (('6', '4'), 'compound'), (('4', 'followpos'), 'nummod'), (('5', 'followpos'), 'nummod'), (('3', 'States'), 'nummod'), (('4', 'States'), 'nummod'), (('2', 'States'), 'nummod'), (('1,2,3', 'States'), 'nummod'), (('1', 'States'), 'nummod'), (('1,2,3', 'States'), 'nummod'), (('States', 'followpos'), 'dep'), (('a', 'States'), 'compound'), (('b', 'States'), 'compound'), (('A=', 'States'), 'compound'), (('{', 'b'), 'punct'), (('1', 'B'), 'nummod'), ((',', 'B'), 'punct'), (('2,3', '1'), 'compound'), (('}', 'B'), 'punct'), (('B', 'b'), 'compound'), (('A', 'B'), 'compound'), (('B={', 'B'), 'compound'), (('1', 'B={'), 'nummod'), ((',', 'B={'), 'punct'), (('2,3,4', 'B={'), 'nummod'), (('}', 'B'), 'punct'), (('B', 'B'), 'parataxis'), (('C', 'B'), 'compound'), (('C={', 'B'), 'compound'), (('1', 'C={'), 'nummod'), ((',', 'C={'), 'punct'), (('2,3,5', 'C={'), 'nummod'), (('}', 'B'), 'punct'), (('B', 'B'), 'compound'), (('D', 'B'), 'compound'), (('D={', 'D'), 'compound'), (('1', 'D'), 'nummod'), ((',', 'D'), 'punct'), (('2,3,6', 'D'), 'nummod'), (('}', 'D'), 'punct'), (('B', 'B'), 'nummod'), (('A', 'D'), 'compound'), (('A', 'B'), 'compound'), (('B', 'A'), 'compound'), (('C', 'B'), 'compound'), (('D', 'B'), 'compound'), (('a', 'b'), 'det'), (('b', 'b'), 'compound'), (('b', 'D'), 'compound'), (('b', 'b'), 'nummod'), (('a', 'b'), 'det'), (('a', 'b'), 'det'), (('b', 'D'), 'appos'), (('a', 'DFA'), 'det'), (('DFA', 'Prof.'), 'compound'), (('Prof.', '#'), 'compound'), (('Dixita', '#'), 'compound'), (('B', '#'), 'compound'), (('Kagathara', '#'), 'compound'), (('#', 'b'), 'nmod'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', '#'), 'appos'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', '#'), 'appos'), (('2', 'Unit'), 'nummod'), (('–', 'Unit'), 'punct'), (('Lexical', 'Analyzer'), 'amod'), (('Analyzer', 'Conversion'), 'compound'), (('‹#›', 'Conversion'), 'compound'), (('Conversion', 'Unit'), 'appos'), (('from', 'expression'), 'case'), (('regular', 'expression'), 'amod'), (('expression', 'Conversion'), 'nmod'), (('to', 'DFA'), 'case'), (('DFA', 'Construct'), 'compound'), (('Construct', 'DFA'), 'compound'), (('DFA', 'expression'), 'nmod'), (('for', 'following'), 'mark'), (('following', 'expression'), 'acl'), (('regular', 'expression'), 'amod'), (('expression', 'DFA'), 'nmod'), ((':', 'expression'), 'punct'), (('(', 'c'), 'punct'), (('c', 'expression'), 'appos'), (('|', 'c'), 'punct'), (('d', 'c'), 'dep'), ((')', 'c'), 'punct'), (('*', 'Prof.'), 'punct'), (('c#', 'c'), 'conj'), (('Prof.', 'c#'), 'compound'), (('Dixita', 'B'), 'compound'), (('B', 'Prof.'), 'compound'), (('Kagathara', '#'), 'compound'), (('#', 'Prof.'), 'appos'), (('2170701', '#'), 'nummod'), (('(', 'CD'), 'punct'), (('CD', '#'), 'appos'), ((')', 'CD'), 'punct'), (('\uf077', 'Unit'), 'nummod'), (('Unit', '#'), 'appos'), (('2', 'Unit'), 'nummod'), (('–', 'Analyzer'), 'punct'), (('Lexical', 'Analyzer'), 'amod'), (('Analyzer', 'c#'), 'parataxis'), (('‹#›', 'Analyzer'), 'appos'), (('Thank', 'Analyzer'), 'parataxis'), (('You', 'Thank'), 'obj'), (('/docProps/thumbnail.jpeg', 'Thank'), 'obj')]

 Named Entities are: 
>> [('2', 'CARDINAL'), ('4', 'CARDINAL'), ('5', 'CARDINAL'), ('6', 'CARDINAL'), ('2170701', 'CARDINAL'), ('2', 'CARDINAL'), ('DFA  \tPosition', 'ORG'), ('4', 'CARDINAL'), ('5', 'CARDINAL'), ('6', 'CARDINAL'), ('5', 'CARDINAL'), ('2170701', 'CARDINAL'), ('2', 'CARDINAL'), ('4', 'CARDINAL'), ('5', 'CARDINAL'), ('6', 'CARDINAL'), ('5', 'CARDINAL'), ('3', 'CARDINAL'), ('4', 'CARDINAL'), ('2170701', 'CARDINAL'), ('2', 'CARDINAL'), ('4', 'CARDINAL'), ('6', 'CARDINAL'), ('2', 'CARDINAL'), ('3', 'CARDINAL'), ('1', 'CARDINAL'), ('3', 'CARDINAL'), ('2170701', 'CARDINAL'), ('2', 'CARDINAL'), ('4', 'CARDINAL'), ('6', 'CARDINAL'), ('3', 'CARDINAL'), ('4', 'CARDINAL'), ('2', 'CARDINAL'), ('3', 'CARDINAL'), ('1', 'CARDINAL'), ('3', 'CARDINAL'), ('1,2', 'CARDINAL'), ('1,2', 'CARDINAL'), ('2170701', 'CARDINAL'), ('2', 'CARDINAL'), ('1', 'CARDINAL'), ('4', 'CARDINAL'), ('1,2,3', 'CARDINAL'), ('1', 'CARDINAL'), ('1,2,3', 'CARDINAL'), ('2', 'CARDINAL'), ('1,2,3', 'CARDINAL'), ('1,2,3', 'CARDINAL'), ('1', 'CARDINAL'), ('1,2,3', 'CARDINAL'), ('2', 'CARDINAL'), ('1,2,3', 'CARDINAL'), ('2', 'CARDINAL'), ('2', 'CARDINAL')]