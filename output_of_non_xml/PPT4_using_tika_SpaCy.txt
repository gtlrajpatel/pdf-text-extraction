				 *** Text Processing using Spacy *** 


============================ Sentence 1 =============================

PowerPoint Presentation  arjun.bala@darshan.ac.in 9624822202 


>> Tokens are: 
[PowerPoint, Presentation,  , arjun.bala@darshan.ac.in, 9624822202] 

>> PoS Tags are: 
[('PowerPoint', 'PROPN'), ('Presentation', 'PROPN'), (' ', 'SPACE'), ('arjun.bala@darshan.ac.in', 'NUM'), ('9624822202', 'NUM')] 

>> Dependency Tags are: 
[('PowerPoint', 'compound'), ('Presentation', 'ROOT'), (' ', 'appos'), ('arjun.bala@darshan.ac.in', 'npadvmod'), ('9624822202', 'punct')]

>> Bigrams: 
[[PowerPoint, Presentation], [Presentation,  ], [ , arjun.bala@darshan.ac.in], [arjun.bala@darshan.ac.in, 9624822202]]

>> Trigrams: 
[[PowerPoint, Presentation,  ], [Presentation,  , arjun.bala@darshan.ac.in], [ , arjun.bala@darshan.ac.in, 9624822202]]

>> Noun Phrases are: 
[PowerPoint Presentation]

>> Named Entities are: 
[('PowerPoint Presentation  arjun.bala@darshan.ac.in 9624822202', 'LAW')]


============================ Sentence 2 =============================

Computer Engineering Department Prof. Arjun V. Bala Python for Data Science (PDS) (3150713)   


>> Tokens are: 
[Computer, Engineering, Department, Prof., Arjun, V., Bala, Python, Data, Science, (, PDS, ), (, 3150713, ),  ] 

>> PoS Tags are: 
[('Computer', 'PROPN'), ('Engineering', 'PROPN'), ('Department', 'PROPN'), ('Prof.', 'PROPN'), ('Arjun', 'PROPN'), ('V.', 'PROPN'), ('Bala', 'PROPN'), ('Python', 'PROPN'), ('Data', 'PROPN'), ('Science', 'PROPN'), ('(', 'PUNCT'), ('PDS', 'PROPN'), (')', 'PUNCT'), ('(', 'PUNCT'), ('3150713', 'NUM'), (')', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Computer', 'compound'), ('Engineering', 'compound'), ('Department', 'compound'), ('Prof.', 'compound'), ('Arjun', 'compound'), ('V.', 'compound'), ('Bala', 'compound'), ('Python', 'ROOT'), ('Data', 'compound'), ('Science', 'pobj'), ('(', 'punct'), ('PDS', 'appos'), (')', 'punct'), ('(', 'punct'), ('3150713', 'appos'), (')', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[Computer, Engineering], [Engineering, Department], [Department, Prof.], [Prof., Arjun], [Arjun, V.], [V., Bala], [Bala, Python], [Python, Data], [Data, Science], [Science, (], [(, PDS], [PDS, )], [), (], [(, 3150713], [3150713, )], [),  ]]

>> Trigrams: 
[[Computer, Engineering, Department], [Engineering, Department, Prof.], [Department, Prof., Arjun], [Prof., Arjun, V.], [Arjun, V., Bala], [V., Bala, Python], [Bala, Python, Data], [Python, Data, Science], [Data, Science, (], [Science, (, PDS], [(, PDS, )], [PDS, ), (], [), (, 3150713], [(, 3150713, )], [3150713, ),  ]]

>> Noun Phrases are: 
[Computer Engineering Department Prof. Arjun V. Bala Python, Data Science, (PDS]

>> Named Entities are: 
[('Computer Engineering Department', 'ORG'), ('Arjun V. Bala', 'PERSON'), ('3150713', 'DATE')]


============================ Sentence 3 =============================

Unit-04   


>> Tokens are: 
[Unit-04,  ] 

>> PoS Tags are: 
[('Unit-04', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Unit-04', 'ROOT'), (' ', 'nummod')]

>> Bigrams: 
[[Unit-04,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Unit-04]

>> Named Entities are: 
[('Unit-04', 'ORG')]


============================ Sentence 4 =============================

Data Visualization   Darshan Institute of Engineering & Technology, Rajkot     Looping Outline   


>> Tokens are: 
[Data, Visualization,   , Darshan, Institute, Engineering, &, Technology, ,, Rajkot,    , , Looping, Outline,  ] 

>> PoS Tags are: 
[('Data', 'PROPN'), ('Visualization', 'PROPN'), ('  ', 'SPACE'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('Engineering', 'PROPN'), ('&', 'CCONJ'), ('Technology', 'PROPN'), (',', 'PUNCT'), ('Rajkot', 'PROPN'), ('   ', 'SPACE'), ('\uf050', 'PROPN'), ('Looping', 'PROPN'), ('Outline', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Data', 'compound'), ('Visualization', 'compound'), ('  ', 'ROOT'), ('Darshan', 'compound'), ('Institute', 'appos'), ('Engineering', 'pobj'), ('&', 'cc'), ('Technology', 'conj'), (',', 'punct'), ('Rajkot', 'appos'), ('   ', 'nummod'), ('\uf050', 'prep'), ('Looping', 'compound'), ('Outline', 'appos'), (' ', 'punct')]

>> Bigrams: 
[[Data, Visualization], [Visualization,   ], [  , Darshan], [Darshan, Institute], [Institute, Engineering], [Engineering, &], [&, Technology], [Technology, ,], [,, Rajkot], [Rajkot,    ], [   , ], [, Looping], [Looping, Outline], [Outline,  ]]

>> Trigrams: 
[[Data, Visualization,   ], [Visualization,   , Darshan], [  , Darshan, Institute], [Darshan, Institute, Engineering], [Institute, Engineering, &], [Engineering, &, Technology], [&, Technology, ,], [Technology, ,, Rajkot], [,, Rajkot,    ], [Rajkot,    , ], [   , , Looping], [, Looping, Outline], [Looping, Outline,  ]]

>> Noun Phrases are: 
[Darshan Institute, Engineering, Technology, Rajkot, Looping Outline]

>> Named Entities are: 
[('Data Visualization', 'ORG'), ('Darshan Institute of Engineering & Technology', 'ORG'), ('Looping Outline  ', 'ORG')]


============================ Sentence 5 =============================

Introduction to MatPlotLib Graph Plot Drawing Multiple Lines and Plots Export graphs/plots to Image/PDF/SVG Axis, Ticks ad Grids Line Appearance Labels, Annotation, Legends Types of Graphs Pie Chart Bar Chart Histograms Boxplots Scatterplots Time Series Plotting Geographical data     Introduction to MatPlotLib 


>> Tokens are: 
[Introduction, MatPlotLib, Graph, Plot, Drawing, Multiple, Lines, Plots, Export, graphs, /, plots, Image, /, PDF, /, SVG, Axis, ,, Ticks, ad, Grids, Line, Appearance, Labels, ,, Annotation, ,, Legends, Types, Graphs, Pie, Chart, Bar, Chart, Histograms, Boxplots, Scatterplots, Time, Series, Plotting, Geographical, data,     , Introduction, MatPlotLib] 

>> PoS Tags are: 
[('Introduction', 'NOUN'), ('MatPlotLib', 'PRON'), ('Graph', 'PROPN'), ('Plot', 'PROPN'), ('Drawing', 'PROPN'), ('Multiple', 'PROPN'), ('Lines', 'PROPN'), ('Plots', 'PROPN'), ('Export', 'PROPN'), ('graphs', 'NOUN'), ('/', 'SYM'), ('plots', 'NOUN'), ('Image', 'PROPN'), ('/', 'SYM'), ('PDF', 'PROPN'), ('/', 'SYM'), ('SVG', 'PROPN'), ('Axis', 'PROPN'), (',', 'PUNCT'), ('Ticks', 'PROPN'), ('ad', 'NOUN'), ('Grids', 'PROPN'), ('Line', 'PROPN'), ('Appearance', 'PROPN'), ('Labels', 'PROPN'), (',', 'PUNCT'), ('Annotation', 'PROPN'), (',', 'PUNCT'), ('Legends', 'PROPN'), ('Types', 'PROPN'), ('Graphs', 'PROPN'), ('Pie', 'PROPN'), ('Chart', 'PROPN'), ('Bar', 'PROPN'), ('Chart', 'PROPN'), ('Histograms', 'PROPN'), ('Boxplots', 'PROPN'), ('Scatterplots', 'PROPN'), ('Time', 'PROPN'), ('Series', 'PROPN'), ('Plotting', 'PROPN'), ('Geographical', 'PROPN'), ('data', 'NOUN'), ('    ', 'SPACE'), ('Introduction', 'NOUN'), ('MatPlotLib', 'PRON')] 

>> Dependency Tags are: 
[('Introduction', 'dep'), ('MatPlotLib', 'pobj'), ('Graph', 'compound'), ('Plot', 'compound'), ('Drawing', 'compound'), ('Multiple', 'compound'), ('Lines', 'pobj'), ('Plots', 'compound'), ('Export', 'compound'), ('graphs', 'nmod'), ('/', 'punct'), ('plots', 'conj'), ('Image', 'nmod'), ('/', 'punct'), ('PDF', 'nmod'), ('/', 'punct'), ('SVG', 'compound'), ('Axis', 'pobj'), (',', 'punct'), ('Ticks', 'compound'), ('ad', 'compound'), ('Grids', 'compound'), ('Line', 'compound'), ('Appearance', 'compound'), ('Labels', 'nsubj'), (',', 'punct'), ('Annotation', 'conj'), (',', 'punct'), ('Legends', 'compound'), ('Types', 'conj'), ('Graphs', 'compound'), ('Pie', 'compound'), ('Chart', 'compound'), ('Bar', 'compound'), ('Chart', 'compound'), ('Histograms', 'compound'), ('Boxplots', 'compound'), ('Scatterplots', 'compound'), ('Time', 'compound'), ('Series', 'compound'), ('Plotting', 'compound'), ('Geographical', 'pobj'), ('data', 'ROOT'), ('    ', 'poss'), ('Introduction', 'dobj'), ('MatPlotLib', 'punct')]

>> Bigrams: 
[[Introduction, MatPlotLib], [MatPlotLib, Graph], [Graph, Plot], [Plot, Drawing], [Drawing, Multiple], [Multiple, Lines], [Lines, Plots], [Plots, Export], [Export, graphs], [graphs, /], [/, plots], [plots, Image], [Image, /], [/, PDF], [PDF, /], [/, SVG], [SVG, Axis], [Axis, ,], [,, Ticks], [Ticks, ad], [ad, Grids], [Grids, Line], [Line, Appearance], [Appearance, Labels], [Labels, ,], [,, Annotation], [Annotation, ,], [,, Legends], [Legends, Types], [Types, Graphs], [Graphs, Pie], [Pie, Chart], [Chart, Bar], [Bar, Chart], [Chart, Histograms], [Histograms, Boxplots], [Boxplots, Scatterplots], [Scatterplots, Time], [Time, Series], [Series, Plotting], [Plotting, Geographical], [Geographical, data], [data,     ], [    , Introduction], [Introduction, MatPlotLib]]

>> Trigrams: 
[[Introduction, MatPlotLib, Graph], [MatPlotLib, Graph, Plot], [Graph, Plot, Drawing], [Plot, Drawing, Multiple], [Drawing, Multiple, Lines], [Multiple, Lines, Plots], [Lines, Plots, Export], [Plots, Export, graphs], [Export, graphs, /], [graphs, /, plots], [/, plots, Image], [plots, Image, /], [Image, /, PDF], [/, PDF, /], [PDF, /, SVG], [/, SVG, Axis], [SVG, Axis, ,], [Axis, ,, Ticks], [,, Ticks, ad], [Ticks, ad, Grids], [ad, Grids, Line], [Grids, Line, Appearance], [Line, Appearance, Labels], [Appearance, Labels, ,], [Labels, ,, Annotation], [,, Annotation, ,], [Annotation, ,, Legends], [,, Legends, Types], [Legends, Types, Graphs], [Types, Graphs, Pie], [Graphs, Pie, Chart], [Pie, Chart, Bar], [Chart, Bar, Chart], [Bar, Chart, Histograms], [Chart, Histograms, Boxplots], [Histograms, Boxplots, Scatterplots], [Boxplots, Scatterplots, Time], [Scatterplots, Time, Series], [Time, Series, Plotting], [Series, Plotting, Geographical], [Plotting, Geographical, data], [Geographical, data,     ], [data,     , Introduction], [    , Introduction, MatPlotLib]]

>> Noun Phrases are: 
[MatPlotLib, Graph Plot Drawing Multiple Lines, Plots Export graphs/plots, Image/PDF/SVG Axis, Ticks ad Grids Line Appearance Labels, Annotation, Legends Types, Graphs Pie Chart Bar Chart Histograms Boxplots Scatterplots Time Series Plotting Geographical,     Introduction]

>> Named Entities are: 
[('Image/PDF/SVG Axis', 'ORG'), ('Ticks', 'NORP'), ('Appearance Labels', 'PERSON'), ('Types', 'PERSON')]


============================ Sentence 6 =============================

Most people visualize information better when they see it in graphic versus textual format. 


>> Tokens are: 
[people, visualize, information, better, graphic, versus, textual, format, .] 

>> PoS Tags are: 
[('people', 'NOUN'), ('visualize', 'VERB'), ('information', 'NOUN'), ('better', 'ADV'), ('graphic', 'ADJ'), ('versus', 'ADP'), ('textual', 'ADJ'), ('format', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('people', 'nsubj'), ('visualize', 'ROOT'), ('information', 'dobj'), ('better', 'advmod'), ('graphic', 'amod'), ('versus', 'prep'), ('textual', 'amod'), ('format', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[people, visualize], [visualize, information], [information, better], [better, graphic], [graphic, versus], [versus, textual], [textual, format], [format, .]]

>> Trigrams: 
[[people, visualize, information], [visualize, information, better], [information, better, graphic], [better, graphic, versus], [graphic, versus, textual], [versus, textual, format], [textual, format, .]]

>> Noun Phrases are: 
[Most people, information, they, it, textual format]

>> Named Entities are: 
[]


============================ Sentence 7 =============================

Graphics help people see relationships and make comparisons with greater ease. 


>> Tokens are: 
[Graphics, help, people, relationships, comparisons, greater, ease, .] 

>> PoS Tags are: 
[('Graphics', 'NOUN'), ('help', 'VERB'), ('people', 'NOUN'), ('relationships', 'NOUN'), ('comparisons', 'NOUN'), ('greater', 'ADJ'), ('ease', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Graphics', 'nsubj'), ('help', 'ROOT'), ('people', 'nsubj'), ('relationships', 'dobj'), ('comparisons', 'dobj'), ('greater', 'amod'), ('ease', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Graphics, help], [help, people], [people, relationships], [relationships, comparisons], [comparisons, greater], [greater, ease], [ease, .]]

>> Trigrams: 
[[Graphics, help, people], [help, people, relationships], [people, relationships, comparisons], [relationships, comparisons, greater], [comparisons, greater, ease], [greater, ease, .]]

>> Noun Phrases are: 
[Graphics, people, relationships, comparisons, greater ease]

>> Named Entities are: 
[]


============================ Sentence 8 =============================

Fortunately, python makes the task of converting textual data into graphics relatively easy using libraries, one of most commonly used library for this is MatPlotLib. 


>> Tokens are: 
[Fortunately, ,, python, makes, task, converting, textual, data, graphics, relatively, easy, libraries, ,, commonly, library, MatPlotLib, .] 

>> PoS Tags are: 
[('Fortunately', 'ADV'), (',', 'PUNCT'), ('python', 'NOUN'), ('makes', 'VERB'), ('task', 'NOUN'), ('converting', 'VERB'), ('textual', 'ADJ'), ('data', 'NOUN'), ('graphics', 'NOUN'), ('relatively', 'ADV'), ('easy', 'ADJ'), ('libraries', 'NOUN'), (',', 'PUNCT'), ('commonly', 'ADV'), ('library', 'NOUN'), ('MatPlotLib', 'PRON'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Fortunately', 'advmod'), (',', 'punct'), ('python', 'nsubj'), ('makes', 'ccomp'), ('task', 'dobj'), ('converting', 'pcomp'), ('textual', 'amod'), ('data', 'dobj'), ('graphics', 'pobj'), ('relatively', 'advmod'), ('easy', 'advmod'), ('libraries', 'dobj'), (',', 'punct'), ('commonly', 'advmod'), ('library', 'pobj'), ('MatPlotLib', 'attr'), ('.', 'punct')]

>> Bigrams: 
[[Fortunately, ,], [,, python], [python, makes], [makes, task], [task, converting], [converting, textual], [textual, data], [data, graphics], [graphics, relatively], [relatively, easy], [easy, libraries], [libraries, ,], [,, commonly], [commonly, library], [library, MatPlotLib], [MatPlotLib, .]]

>> Trigrams: 
[[Fortunately, ,, python], [,, python, makes], [python, makes, task], [makes, task, converting], [task, converting, textual], [converting, textual, data], [textual, data, graphics], [data, graphics, relatively], [graphics, relatively, easy], [relatively, easy, libraries], [easy, libraries, ,], [libraries, ,, commonly], [,, commonly, library], [commonly, library, MatPlotLib], [library, MatPlotLib, .]]

>> Noun Phrases are: 
[python, the task, textual data, graphics, libraries, most commonly used library, MatPlotLib]

>> Named Entities are: 
[('one', 'CARDINAL')]


============================ Sentence 9 =============================

Matplotlib is a comprehensive library for creating static, animated, and interactive visualizations in Python. 


>> Tokens are: 
[Matplotlib, comprehensive, library, creating, static, ,, animated, ,, interactive, visualizations, Python, .] 

>> PoS Tags are: 
[('Matplotlib', 'PROPN'), ('comprehensive', 'ADJ'), ('library', 'NOUN'), ('creating', 'VERB'), ('static', 'ADJ'), (',', 'PUNCT'), ('animated', 'VERB'), (',', 'PUNCT'), ('interactive', 'ADJ'), ('visualizations', 'NOUN'), ('Python', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Matplotlib', 'nsubj'), ('comprehensive', 'amod'), ('library', 'attr'), ('creating', 'pcomp'), ('static', 'amod'), (',', 'punct'), ('animated', 'conj'), (',', 'punct'), ('interactive', 'amod'), ('visualizations', 'dobj'), ('Python', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Matplotlib, comprehensive], [comprehensive, library], [library, creating], [creating, static], [static, ,], [,, animated], [animated, ,], [,, interactive], [interactive, visualizations], [visualizations, Python], [Python, .]]

>> Trigrams: 
[[Matplotlib, comprehensive, library], [comprehensive, library, creating], [library, creating, static], [creating, static, ,], [static, ,, animated], [,, animated, ,], [animated, ,, interactive], [,, interactive, visualizations], [interactive, visualizations, Python], [visualizations, Python, .]]

>> Noun Phrases are: 
[Matplotlib, a comprehensive library, static, animated, and interactive visualizations, Python]

>> Named Entities are: 
[('Matplotlib', 'PERSON'), ('Python', 'GPE')]


============================ Sentence 10 =============================

   Prof. Arjun V. Bala 


>> Tokens are: 
[   , Prof., Arjun, V., Bala] 

>> PoS Tags are: 
[('   ', 'SPACE'), ('Prof.', 'PROPN'), ('Arjun', 'PROPN'), ('V.', 'PROPN'), ('Bala', 'PROPN')] 

>> Dependency Tags are: 
[('   ', 'nummod'), ('Prof.', 'compound'), ('Arjun', 'compound'), ('V.', 'compound'), ('Bala', 'ROOT')]

>> Bigrams: 
[[   , Prof.], [Prof., Arjun], [Arjun, V.], [V., Bala]]

>> Trigrams: 
[[   , Prof., Arjun], [Prof., Arjun, V.], [Arjun, V., Bala]]

>> Noun Phrases are: 
[   Prof. Arjun V. Bala]

>> Named Entities are: 
[('Arjun V. Bala', 'PERSON')]


============================ Sentence 11 =============================

#3150713 (PDS)      Unit 04 


>> Tokens are: 
[#, 3150713, (, PDS, ),   , ,   , Unit, 04] 

>> PoS Tags are: 
[('#', 'NOUN'), ('3150713', 'NUM'), ('(', 'PUNCT'), ('PDS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('04', 'NUM')] 

>> Dependency Tags are: 
[('#', 'nmod'), ('3150713', 'nummod'), ('(', 'punct'), ('PDS', 'appos'), (')', 'punct'), ('  ', 'nsubj'), ('\uf077', 'ROOT'), ('  ', 'punct'), ('Unit', 'npadvmod'), ('04', 'nummod')]

>> Bigrams: 
[[#, 3150713], [3150713, (], [(, PDS], [PDS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 04]]

>> Trigrams: 
[[#, 3150713, (], [3150713, (, PDS], [(, PDS, )], [PDS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 04]]

>> Noun Phrases are: 
[(PDS]

>> Named Entities are: 
[('PDS', 'ORG'), ('04', 'CARDINAL')]


============================ Sentence 12 =============================

– Data Visualization ‹#›  Graph A Graph or chart is simply a visual representation of numeric data. 


>> Tokens are: 
[–, Data, Visualization, ‹#›,  , Graph, Graph, chart, simply, visual, representation, numeric, data, .] 

>> PoS Tags are: 
[('–', 'PUNCT'), ('Data', 'PROPN'), ('Visualization', 'PROPN'), ('‹#›', 'X'), (' ', 'SPACE'), ('Graph', 'PROPN'), ('Graph', 'PROPN'), ('chart', 'NOUN'), ('simply', 'ADV'), ('visual', 'ADJ'), ('representation', 'NOUN'), ('numeric', 'ADJ'), ('data', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('–', 'punct'), ('Data', 'compound'), ('Visualization', 'nmod'), ('‹#›', 'punct'), (' ', 'appos'), ('Graph', 'compound'), ('Graph', 'nsubj'), ('chart', 'conj'), ('simply', 'advmod'), ('visual', 'amod'), ('representation', 'attr'), ('numeric', 'amod'), ('data', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[–, Data], [Data, Visualization], [Visualization, ‹#›], [‹#›,  ], [ , Graph], [Graph, Graph], [Graph, chart], [chart, simply], [simply, visual], [visual, representation], [representation, numeric], [numeric, data], [data, .]]

>> Trigrams: 
[[–, Data, Visualization], [Data, Visualization, ‹#›], [Visualization, ‹#›,  ], [‹#›,  , Graph], [ , Graph, Graph], [Graph, Graph, chart], [Graph, chart, simply], [chart, simply, visual], [simply, visual, representation], [visual, representation, numeric], [representation, numeric, data], [numeric, data, .]]

>> Noun Phrases are: 
[– Data Visualization ‹#›  Graph A Graph, chart, a visual representation, numeric data]

>> Named Entities are: 
[('Data Visualization ‹#›', 'ORG'), ('Graph', 'PERSON')]


============================ Sentence 13 =============================

MatPlotLib makes a large number of graph and chart types. 


>> Tokens are: 
[MatPlotLib, makes, large, number, graph, chart, types, .] 

>> PoS Tags are: 
[('MatPlotLib', 'ADJ'), ('makes', 'VERB'), ('large', 'ADJ'), ('number', 'NOUN'), ('graph', 'NOUN'), ('chart', 'NOUN'), ('types', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('MatPlotLib', 'nsubj'), ('makes', 'ROOT'), ('large', 'amod'), ('number', 'dobj'), ('graph', 'nmod'), ('chart', 'conj'), ('types', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[MatPlotLib, makes], [makes, large], [large, number], [number, graph], [graph, chart], [chart, types], [types, .]]

>> Trigrams: 
[[MatPlotLib, makes, large], [makes, large, number], [large, number, graph], [number, graph, chart], [graph, chart, types], [chart, types, .]]

>> Noun Phrases are: 
[a large number, graph and chart types]

>> Named Entities are: 
[]


============================ Sentence 14 =============================

We can choose any of the common graph such as line charts, histogram, scatter plots etc....   Line Chart  Histogram  Scatter Plot  3D Plot  Images  Bar Chart   


>> Tokens are: 
[choose, common, graph, line, charts, ,, histogram, ,, scatter, plots, etc, ....,   , Line, Chart,  , Histogram,  , Scatter, Plot,  , 3D, Plot,  , Images,  , Bar, Chart,  ] 

>> PoS Tags are: 
[('choose', 'VERB'), ('common', 'ADJ'), ('graph', 'NOUN'), ('line', 'NOUN'), ('charts', 'NOUN'), (',', 'PUNCT'), ('histogram', 'NOUN'), (',', 'PUNCT'), ('scatter', 'NOUN'), ('plots', 'NOUN'), ('etc', 'X'), ('....', 'PUNCT'), ('  ', 'SPACE'), ('Line', 'PROPN'), ('Chart', 'PROPN'), (' ', 'SPACE'), ('Histogram', 'PROPN'), (' ', 'SPACE'), ('Scatter', 'PROPN'), ('Plot', 'PROPN'), (' ', 'SPACE'), ('3D', 'PROPN'), ('Plot', 'PROPN'), (' ', 'SPACE'), ('Images', 'PROPN'), (' ', 'SPACE'), ('Bar', 'PROPN'), ('Chart', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('choose', 'ROOT'), ('common', 'amod'), ('graph', 'pobj'), ('line', 'compound'), ('charts', 'pobj'), (',', 'punct'), ('histogram', 'conj'), (',', 'punct'), ('scatter', 'compound'), ('plots', 'conj'), ('etc', 'dep'), ('....', 'punct'), ('  ', 'compound'), ('Line', 'compound'), ('Chart', 'dobj'), (' ', 'ccomp'), ('Histogram', 'nmod'), (' ', 'nummod'), ('Scatter', 'compound'), ('Plot', 'appos'), (' ', 'appos'), ('3D', 'compound'), ('Plot', 'nmod'), (' ', 'nmod'), ('Images', 'nmod'), (' ', 'nummod'), ('Bar', 'compound'), ('Chart', 'dobj'), (' ', 'punct')]

>> Bigrams: 
[[choose, common], [common, graph], [graph, line], [line, charts], [charts, ,], [,, histogram], [histogram, ,], [,, scatter], [scatter, plots], [plots, etc], [etc, ....], [....,   ], [  , Line], [Line, Chart], [Chart,  ], [ , Histogram], [Histogram,  ], [ , Scatter], [Scatter, Plot], [Plot,  ], [ , 3D], [3D, Plot], [Plot,  ], [ , Images], [Images,  ], [ , Bar], [Bar, Chart], [Chart,  ]]

>> Trigrams: 
[[choose, common, graph], [common, graph, line], [graph, line, charts], [line, charts, ,], [charts, ,, histogram], [,, histogram, ,], [histogram, ,, scatter], [,, scatter, plots], [scatter, plots, etc], [plots, etc, ....], [etc, ....,   ], [....,   , Line], [  , Line, Chart], [Line, Chart,  ], [Chart,  , Histogram], [ , Histogram,  ], [Histogram,  , Scatter], [ , Scatter, Plot], [Scatter, Plot,  ], [Plot,  , 3D], [ , 3D, Plot], [3D, Plot,  ], [Plot,  , Images], [ , Images,  ], [Images,  , Bar], [ , Bar, Chart], [Bar, Chart,  ]]

>> Noun Phrases are: 
[We, the common graph, line charts, histogram, scatter plots,   Line Chart, Scatter Plot]

>> Named Entities are: 
[('Scatter Plot', 'PERSON'), ('Plot', 'NORP'), ('Images', 'GPE')]


============================ Sentence 15 =============================

Pie Chart Etc.......      


>> Tokens are: 
[Pie, Chart, Etc, .......,     ] 

>> PoS Tags are: 
[('Pie', 'PROPN'), ('Chart', 'PROPN'), ('Etc', 'PROPN'), ('.......', 'PUNCT'), ('    ', 'SPACE')] 

>> Dependency Tags are: 
[('Pie', 'compound'), ('Chart', 'compound'), ('Etc', 'dep'), ('.......', 'punct'), ('    ', 'ROOT')]

>> Bigrams: 
[[Pie, Chart], [Chart, Etc], [Etc, .......], [.......,     ]]

>> Trigrams: 
[[Pie, Chart, Etc], [Chart, Etc, .......], [Etc, .......,     ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 16 =============================

Prof. Arjun V. Bala #3150713 (PDS)       


>> Tokens are: 
[Prof., Arjun, V., Bala, #, 3150713, (, PDS, ),   , ,   ] 

>> PoS Tags are: 
[('Prof.', 'PROPN'), ('Arjun', 'PROPN'), ('V.', 'PROPN'), ('Bala', 'PROPN'), ('#', 'NOUN'), ('3150713', 'NUM'), ('(', 'PUNCT'), ('PDS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE')] 

>> Dependency Tags are: 
[('Prof.', 'compound'), ('Arjun', 'compound'), ('V.', 'compound'), ('Bala', 'nsubj'), ('#', 'nmod'), ('3150713', 'appos'), ('(', 'punct'), ('PDS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'punct')]

>> Bigrams: 
[[Prof., Arjun], [Arjun, V.], [V., Bala], [Bala, #], [#, 3150713], [3150713, (], [(, PDS], [PDS, )], [),   ], [  , ], [,   ]]

>> Trigrams: 
[[Prof., Arjun, V.], [Arjun, V., Bala], [V., Bala, #], [Bala, #, 3150713], [#, 3150713, (], [3150713, (, PDS], [(, PDS, )], [PDS, ),   ], [),   , ], [  , ,   ]]

>> Noun Phrases are: 
[Prof. Arjun V. Bala, (PDS]

>> Named Entities are: 
[('Arjun V. Bala', 'PERSON'), ('PDS', 'ORG')]


============================ Sentence 17 =============================

Unit 04 – Data Visualization ‹#›   


>> Tokens are: 
[Unit, 04, –, Data, Visualization, ‹#›,  ] 

>> PoS Tags are: 
[('Unit', 'NOUN'), ('04', 'NUM'), ('–', 'PUNCT'), ('Data', 'PROPN'), ('Visualization', 'PROPN'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Unit', 'ROOT'), ('04', 'nummod'), ('–', 'punct'), ('Data', 'compound'), ('Visualization', 'appos'), ('‹#›', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[Unit, 04], [04, –], [–, Data], [Data, Visualization], [Visualization, ‹#›], [‹#›,  ]]

>> Trigrams: 
[[Unit, 04, –], [04, –, Data], [–, Data, Visualization], [Data, Visualization, ‹#›], [Visualization, ‹#›,  ]]

>> Noun Phrases are: 
[Unit, – Data Visualization]

>> Named Entities are: 
[('04', 'CARDINAL'), ('Data Visualization ‹#›', 'ORG')]


============================ Sentence 18 =============================

Plot To define a plot, we need some values, the matplotlib.pyplot module and an idea of what we want to display. 


>> Tokens are: 
[Plot, define, plot, ,, need, values, ,, matplotlib.pyplot, module, idea, want, display, .] 

>> PoS Tags are: 
[('Plot', 'NOUN'), ('define', 'VERB'), ('plot', 'NOUN'), (',', 'PUNCT'), ('need', 'VERB'), ('values', 'NOUN'), (',', 'PUNCT'), ('matplotlib.pyplot', 'NOUN'), ('module', 'NOUN'), ('idea', 'NOUN'), ('want', 'VERB'), ('display', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Plot', 'nsubj'), ('define', 'acl'), ('plot', 'dobj'), (',', 'punct'), ('need', 'ROOT'), ('values', 'dobj'), (',', 'punct'), ('matplotlib.pyplot', 'compound'), ('module', 'npadvmod'), ('idea', 'conj'), ('want', 'pcomp'), ('display', 'xcomp'), ('.', 'punct')]

>> Bigrams: 
[[Plot, define], [define, plot], [plot, ,], [,, need], [need, values], [values, ,], [,, matplotlib.pyplot], [matplotlib.pyplot, module], [module, idea], [idea, want], [want, display], [display, .]]

>> Trigrams: 
[[Plot, define, plot], [define, plot, ,], [plot, ,, need], [,, need, values], [need, values, ,], [values, ,, matplotlib.pyplot], [,, matplotlib.pyplot, module], [matplotlib.pyplot, module, idea], [module, idea, want], [idea, want, display], [want, display, .]]

>> Noun Phrases are: 
[Plot, a plot, we, some values, what, we]

>> Named Entities are: 
[('Plot', 'ORG')]


============================ Sentence 19 =============================

     In this case, the code tells the plt.plot() function to create a plot using x-axis between 1 and 11 and y-axis as per values list. 


>> Tokens are: 
[     , case, ,, code, tells, plt.plot, (, ), function, create, plot, x, -, axis, 1, 11, y, -, axis, values, list, .] 

>> PoS Tags are: 
[('     ', 'SPACE'), ('case', 'NOUN'), (',', 'PUNCT'), ('code', 'NOUN'), ('tells', 'VERB'), ('plt.plot', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('function', 'NOUN'), ('create', 'VERB'), ('plot', 'NOUN'), ('x', 'PUNCT'), ('-', 'NOUN'), ('axis', 'NOUN'), ('1', 'NUM'), ('11', 'NUM'), ('y', 'NOUN'), ('-', 'PUNCT'), ('axis', 'NOUN'), ('values', 'NOUN'), ('list', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('     ', 'dep'), ('case', 'pobj'), (',', 'punct'), ('code', 'nsubj'), ('tells', 'ROOT'), ('plt.plot', 'dobj'), ('(', 'punct'), (')', 'punct'), ('function', 'dobj'), ('create', 'xcomp'), ('plot', 'dobj'), ('x', 'punct'), ('-', 'punct'), ('axis', 'dobj'), ('1', 'pobj'), ('11', 'conj'), ('y', 'compound'), ('-', 'punct'), ('axis', 'conj'), ('values', 'compound'), ('list', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[     , case], [case, ,], [,, code], [code, tells], [tells, plt.plot], [plt.plot, (], [(, )], [), function], [function, create], [create, plot], [plot, x], [x, -], [-, axis], [axis, 1], [1, 11], [11, y], [y, -], [-, axis], [axis, values], [values, list], [list, .]]

>> Trigrams: 
[[     , case, ,], [case, ,, code], [,, code, tells], [code, tells, plt.plot], [tells, plt.plot, (], [plt.plot, (, )], [(, ), function], [), function, create], [function, create, plot], [create, plot, x], [plot, x, -], [x, -, axis], [-, axis, 1], [axis, 1, 11], [1, 11, y], [11, y, -], [y, -, axis], [-, axis, values], [axis, values, list], [values, list, .]]

>> Noun Phrases are: 
[this case, the code, the plt.plot, ) function, a plot, axis, y-axis, values list]

>> Named Entities are: 
[]


============================ Sentence 20 =============================

import matplotlib.pyplot as plt %matplotlib inline values = 


>> Tokens are: 
[import, matplotlib.pyplot, plt, %, matplotlib, inline, values, =] 

>> PoS Tags are: 
[('import', 'NOUN'), ('matplotlib.pyplot', 'NOUN'), ('plt', 'NOUN'), ('%', 'NOUN'), ('matplotlib', 'ADJ'), ('inline', 'ADJ'), ('values', 'NOUN'), ('=', 'PUNCT')] 

>> Dependency Tags are: 
[('import', 'compound'), ('matplotlib.pyplot', 'ROOT'), ('plt', 'nmod'), ('%', 'nmod'), ('matplotlib', 'amod'), ('inline', 'amod'), ('values', 'pobj'), ('=', 'punct')]

>> Bigrams: 
[[import, matplotlib.pyplot], [matplotlib.pyplot, plt], [plt, %], [%, matplotlib], [matplotlib, inline], [inline, values], [values, =]]

>> Trigrams: 
[[import, matplotlib.pyplot, plt], [matplotlib.pyplot, plt, %], [plt, %, matplotlib], [%, matplotlib, inline], [matplotlib, inline, values], [inline, values, =]]

>> Noun Phrases are: 
[import matplotlib.pyplot, plt %matplotlib inline values]

>> Named Entities are: 
[]


============================ Sentence 21 =============================

[5,8,9,4,1,6,7,2,3,8] plt.plot(range(1,11),values) 


>> Tokens are: 
[[, 5,8,9,4,1,6,7,2,3,8, ], plt.plot(range(1,11),values, )] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('5,8,9,4,1,6,7,2,3,8', 'NUM'), (']', 'PUNCT'), ('plt.plot(range(1,11),values', 'NOUN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('[', 'dep'), ('5,8,9,4,1,6,7,2,3,8', 'dep'), (']', 'dep'), ('plt.plot(range(1,11),values', 'ROOT'), (')', 'punct')]

>> Bigrams: 
[[[, 5,8,9,4,1,6,7,2,3,8], [5,8,9,4,1,6,7,2,3,8, ]], [], plt.plot(range(1,11),values], [plt.plot(range(1,11),values, )]]

>> Trigrams: 
[[[, 5,8,9,4,1,6,7,2,3,8, ]], [5,8,9,4,1,6,7,2,3,8, ], plt.plot(range(1,11),values], [], plt.plot(range(1,11),values, )]]

>> Noun Phrases are: 
[[5,8,9,4,1,6,7,2,3,8] plt.plot(range(1,11),values]

>> Named Entities are: 
[('5,8,9,4,1,6,7,2,3,8', 'CARDINAL')]


============================ Sentence 22 =============================

plt.show 


>> Tokens are: 
[plt.show] 

>> PoS Tags are: 
[('plt.show', 'PROPN')] 

>> Dependency Tags are: 
[('plt.show', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[plt.show]

>> Named Entities are: 
[]


============================ Sentence 23 =============================

() 1 2 3 4 5 plotDemo1.py        Prof. Arjun V. Bala #3150713 (PDS)       


>> Tokens are: 
[(, ), 1, 2, 3, 4, 5, plotDemo1.py,        , Prof., Arjun, V., Bala, #, 3150713, (, PDS, ),   , ,   ] 

>> PoS Tags are: 
[('(', 'PUNCT'), (')', 'PUNCT'), ('1', 'NUM'), ('2', 'NUM'), ('3', 'NUM'), ('4', 'NUM'), ('5', 'NUM'), ('plotDemo1.py', 'NUM'), ('       ', 'SPACE'), ('Prof.', 'PROPN'), ('Arjun', 'PROPN'), ('V.', 'PROPN'), ('Bala', 'PROPN'), ('#', 'NOUN'), ('3150713', 'NUM'), ('(', 'PUNCT'), ('PDS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE')] 

>> Dependency Tags are: 
[('(', 'punct'), (')', 'punct'), ('1', 'compound'), ('2', 'nummod'), ('3', 'appos'), ('4', 'appos'), ('5', 'nummod'), ('plotDemo1.py', 'nummod'), ('       ', 'compound'), ('Prof.', 'compound'), ('Arjun', 'compound'), ('V.', 'compound'), ('Bala', 'nsubj'), ('#', 'nmod'), ('3150713', 'appos'), ('(', 'punct'), ('PDS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'punct')]

>> Bigrams: 
[[(, )], [), 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, plotDemo1.py], [plotDemo1.py,        ], [       , Prof.], [Prof., Arjun], [Arjun, V.], [V., Bala], [Bala, #], [#, 3150713], [3150713, (], [(, PDS], [PDS, )], [),   ], [  , ], [,   ]]

>> Trigrams: 
[[(, ), 1], [), 1, 2], [1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, plotDemo1.py], [5, plotDemo1.py,        ], [plotDemo1.py,        , Prof.], [       , Prof., Arjun], [Prof., Arjun, V.], [Arjun, V., Bala], [V., Bala, #], [Bala, #, 3150713], [#, 3150713, (], [3150713, (, PDS], [(, PDS, )], [PDS, ),   ], [),   , ], [  , ,   ]]

>> Noun Phrases are: 
[() 1 2 3 4 5 plotDemo1.py        Prof. Arjun V. Bala, (PDS]

>> Named Entities are: 
[('Arjun V. Bala', 'PERSON'), ('PDS', 'ORG')]


============================ Sentence 24 =============================

Unit 04 – Data Visualization ‹#›   


>> Tokens are: 
[Unit, 04, –, Data, Visualization, ‹#›,  ] 

>> PoS Tags are: 
[('Unit', 'NOUN'), ('04', 'NUM'), ('–', 'PUNCT'), ('Data', 'PROPN'), ('Visualization', 'PROPN'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Unit', 'ROOT'), ('04', 'nummod'), ('–', 'punct'), ('Data', 'compound'), ('Visualization', 'appos'), ('‹#›', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[Unit, 04], [04, –], [–, Data], [Data, Visualization], [Visualization, ‹#›], [‹#›,  ]]

>> Trigrams: 
[[Unit, 04, –], [04, –, Data], [–, Data, Visualization], [Data, Visualization, ‹#›], [Visualization, ‹#›,  ]]

>> Noun Phrases are: 
[Unit, – Data Visualization]

>> Named Entities are: 
[('04', 'CARDINAL'), ('Data Visualization ‹#›', 'ORG')]


============================ Sentence 25 =============================

Plot – Drawing multiple lines We can draw multiple lines in a plot by making multiple plt.plot() calls. 


>> Tokens are: 
[Plot, –, Drawing, multiple, lines, draw, multiple, lines, plot, making, multiple, plt.plot, (, ), calls, .] 

>> PoS Tags are: 
[('Plot', 'NOUN'), ('–', 'PUNCT'), ('Drawing', 'VERB'), ('multiple', 'ADJ'), ('lines', 'NOUN'), ('draw', 'VERB'), ('multiple', 'ADJ'), ('lines', 'NOUN'), ('plot', 'NOUN'), ('making', 'VERB'), ('multiple', 'ADJ'), ('plt.plot', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('calls', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Plot', 'dep'), ('–', 'punct'), ('Drawing', 'advcl'), ('multiple', 'amod'), ('lines', 'dobj'), ('draw', 'ccomp'), ('multiple', 'amod'), ('lines', 'dobj'), ('plot', 'pobj'), ('making', 'pcomp'), ('multiple', 'amod'), ('plt.plot', 'dobj'), ('(', 'punct'), (')', 'punct'), ('calls', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Plot, –], [–, Drawing], [Drawing, multiple], [multiple, lines], [lines, draw], [draw, multiple], [multiple, lines], [lines, plot], [plot, making], [making, multiple], [multiple, plt.plot], [plt.plot, (], [(, )], [), calls], [calls, .]]

>> Trigrams: 
[[Plot, –, Drawing], [–, Drawing, multiple], [Drawing, multiple, lines], [multiple, lines, draw], [lines, draw, multiple], [draw, multiple, lines], [multiple, lines, plot], [lines, plot, making], [plot, making, multiple], [making, multiple, plt.plot], [multiple, plt.plot, (], [plt.plot, (, )], [(, ), calls], [), calls, .]]

>> Noun Phrases are: 
[multiple lines, We, multiple lines, a plot, multiple plt.plot]

>> Named Entities are: 
[('Plot', 'ORG'), ('plt.plot', 'PERSON')]


============================ Sentence 26 =============================

      import matplotlib.pyplot as plt %matplotlib inline values1 = 


>> Tokens are: 
[      , import, matplotlib.pyplot, plt, %, matplotlib, inline, values1, =] 

>> PoS Tags are: 
[('      ', 'SPACE'), ('import', 'NOUN'), ('matplotlib.pyplot', 'NOUN'), ('plt', 'NOUN'), ('%', 'NOUN'), ('matplotlib', 'ADJ'), ('inline', 'ADJ'), ('values1', 'NOUN'), ('=', 'PUNCT')] 

>> Dependency Tags are: 
[('      ', 'nmod'), ('import', 'compound'), ('matplotlib.pyplot', 'ROOT'), ('plt', 'nmod'), ('%', 'nmod'), ('matplotlib', 'amod'), ('inline', 'amod'), ('values1', 'pobj'), ('=', 'punct')]

>> Bigrams: 
[[      , import], [import, matplotlib.pyplot], [matplotlib.pyplot, plt], [plt, %], [%, matplotlib], [matplotlib, inline], [inline, values1], [values1, =]]

>> Trigrams: 
[[      , import, matplotlib.pyplot], [import, matplotlib.pyplot, plt], [matplotlib.pyplot, plt, %], [plt, %, matplotlib], [%, matplotlib, inline], [matplotlib, inline, values1], [inline, values1, =]]

>> Noun Phrases are: 
[      import matplotlib.pyplot, plt %matplotlib inline values1]

>> Named Entities are: 
[]


============================ Sentence 27 =============================

[5,8,9,4,1,6,7,2,3,8] values2 = 


>> Tokens are: 
[[, 5,8,9,4,1,6,7,2,3,8, ], values2, =] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('5,8,9,4,1,6,7,2,3,8', 'NUM'), (']', 'PUNCT'), ('values2', 'NOUN'), ('=', 'PUNCT')] 

>> Dependency Tags are: 
[('[', 'dep'), ('5,8,9,4,1,6,7,2,3,8', 'dep'), (']', 'punct'), ('values2', 'ROOT'), ('=', 'punct')]

>> Bigrams: 
[[[, 5,8,9,4,1,6,7,2,3,8], [5,8,9,4,1,6,7,2,3,8, ]], [], values2], [values2, =]]

>> Trigrams: 
[[[, 5,8,9,4,1,6,7,2,3,8, ]], [5,8,9,4,1,6,7,2,3,8, ], values2], [], values2, =]]

>> Noun Phrases are: 
[[5,8,9,4,1,6,7,2,3,8] values2]

>> Named Entities are: 
[('5,8,9,4,1,6,7,2,3,8', 'CARDINAL')]


============================ Sentence 28 =============================

[8,3,2,7,6,1,4,9,8,5] plt.plot(range(1,11),values1) plt.plot(range(1,11),values2) 


>> Tokens are: 
[[, 8,3,2,7,6,1,4,9,8,5, ], plt.plot(range(1,11),values1, ), plt.plot(range(1,11),values2, )] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('8,3,2,7,6,1,4,9,8,5', 'NUM'), (']', 'PUNCT'), ('plt.plot(range(1,11),values1', 'NOUN'), (')', 'PUNCT'), ('plt.plot(range(1,11),values2', 'PROPN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('[', 'punct'), ('8,3,2,7,6,1,4,9,8,5', 'dep'), (']', 'punct'), ('plt.plot(range(1,11),values1', 'nmod'), (')', 'punct'), ('plt.plot(range(1,11),values2', 'ROOT'), (')', 'punct')]

>> Bigrams: 
[[[, 8,3,2,7,6,1,4,9,8,5], [8,3,2,7,6,1,4,9,8,5, ]], [], plt.plot(range(1,11),values1], [plt.plot(range(1,11),values1, )], [), plt.plot(range(1,11),values2], [plt.plot(range(1,11),values2, )]]

>> Trigrams: 
[[[, 8,3,2,7,6,1,4,9,8,5, ]], [8,3,2,7,6,1,4,9,8,5, ], plt.plot(range(1,11),values1], [], plt.plot(range(1,11),values1, )], [plt.plot(range(1,11),values1, ), plt.plot(range(1,11),values2], [), plt.plot(range(1,11),values2, )]]

>> Noun Phrases are: 
[[8,3,2,7,6,1,4,9,8,5] plt.plot(range(1,11),values1) plt.plot(range(1,11),values2]

>> Named Entities are: 
[]


============================ Sentence 29 =============================

plt.show() 1 2 3 4 5 6 7 plotDemo1.py         Prof. Arjun V. Bala 


>> Tokens are: 
[plt.show, (, ), 1, 2, 3, 4, 5, 6, 7, plotDemo1.py,         , Prof., Arjun, V., Bala] 

>> PoS Tags are: 
[('plt.show', 'PROPN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('1', 'NUM'), ('2', 'NUM'), ('3', 'NUM'), ('4', 'NUM'), ('5', 'NUM'), ('6', 'NUM'), ('7', 'NUM'), ('plotDemo1.py', 'NUM'), ('        ', 'SPACE'), ('Prof.', 'PROPN'), ('Arjun', 'PROPN'), ('V.', 'PROPN'), ('Bala', 'PROPN')] 

>> Dependency Tags are: 
[('plt.show', 'ROOT'), ('(', 'punct'), (')', 'punct'), ('1', 'compound'), ('2', 'nummod'), ('3', 'appos'), ('4', 'appos'), ('5', 'appos'), ('6', 'appos'), ('7', 'nummod'), ('plotDemo1.py', 'npadvmod'), ('        ', 'compound'), ('Prof.', 'compound'), ('Arjun', 'compound'), ('V.', 'compound'), ('Bala', 'npadvmod')]

>> Bigrams: 
[[plt.show, (], [(, )], [), 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, plotDemo1.py], [plotDemo1.py,         ], [        , Prof.], [Prof., Arjun], [Arjun, V.], [V., Bala]]

>> Trigrams: 
[[plt.show, (, )], [(, ), 1], [), 1, 2], [1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6], [5, 6, 7], [6, 7, plotDemo1.py], [7, plotDemo1.py,         ], [plotDemo1.py,         , Prof.], [        , Prof., Arjun], [Prof., Arjun, V.], [Arjun, V., Bala]]

>> Noun Phrases are: 
[plt.show]

>> Named Entities are: 
[('Arjun V. Bala', 'PERSON')]


============================ Sentence 30 =============================

#3150713 (PDS)      Unit 04 


>> Tokens are: 
[#, 3150713, (, PDS, ),   , ,   , Unit, 04] 

>> PoS Tags are: 
[('#', 'NOUN'), ('3150713', 'NUM'), ('(', 'PUNCT'), ('PDS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('04', 'NUM')] 

>> Dependency Tags are: 
[('#', 'nmod'), ('3150713', 'nummod'), ('(', 'punct'), ('PDS', 'appos'), (')', 'punct'), ('  ', 'nsubj'), ('\uf077', 'ROOT'), ('  ', 'punct'), ('Unit', 'npadvmod'), ('04', 'nummod')]

>> Bigrams: 
[[#, 3150713], [3150713, (], [(, PDS], [PDS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 04]]

>> Trigrams: 
[[#, 3150713, (], [3150713, (, PDS], [(, PDS, )], [PDS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 04]]

>> Noun Phrases are: 
[(PDS]

>> Named Entities are: 
[('PDS', 'ORG'), ('04', 'CARDINAL')]


============================ Sentence 31 =============================

– Data Visualization ‹#›   


>> Tokens are: 
[–, Data, Visualization, ‹#›,  ] 

>> PoS Tags are: 
[('–', 'PUNCT'), ('Data', 'PROPN'), ('Visualization', 'PROPN'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('–', 'punct'), ('Data', 'compound'), ('Visualization', 'ROOT'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[–, Data], [Data, Visualization], [Visualization, ‹#›], [‹#›,  ]]

>> Trigrams: 
[[–, Data, Visualization], [Data, Visualization, ‹#›], [Visualization, ‹#›,  ]]

>> Noun Phrases are: 
[– Data Visualization]

>> Named Entities are: 
[('Data Visualization ‹#›', 'ORG')]


============================ Sentence 32 =============================

Plot – Export graphs/plots We can export/save our plots on a drive using savefig() method. 


>> Tokens are: 
[Plot, –, Export, graphs, /, plots, export, /, save, plots, drive, savefig, (, ), method, .] 

>> PoS Tags are: 
[('Plot', 'NOUN'), ('–', 'PUNCT'), ('Export', 'NOUN'), ('graphs', 'NOUN'), ('/', 'SYM'), ('plots', 'NOUN'), ('export', 'VERB'), ('/', 'SYM'), ('save', 'VERB'), ('plots', 'NOUN'), ('drive', 'NOUN'), ('savefig', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('method', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Plot', 'nmod'), ('–', 'punct'), ('Export', 'compound'), ('graphs', 'nmod'), ('/', 'punct'), ('plots', 'nsubj'), ('export', 'relcl'), ('/', 'punct'), ('save', 'ROOT'), ('plots', 'dobj'), ('drive', 'pobj'), ('savefig', 'nmod'), ('(', 'punct'), (')', 'punct'), ('method', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Plot, –], [–, Export], [Export, graphs], [graphs, /], [/, plots], [plots, export], [export, /], [/, save], [save, plots], [plots, drive], [drive, savefig], [savefig, (], [(, )], [), method], [method, .]]

>> Trigrams: 
[[Plot, –, Export], [–, Export, graphs], [Export, graphs, /], [graphs, /, plots], [/, plots, export], [plots, export, /], [export, /, save], [/, save, plots], [save, plots, drive], [plots, drive, savefig], [drive, savefig, (], [savefig, (, )], [(, ), method], [), method, .]]

>> Noun Phrases are: 
[Plot – Export graphs/plots, We, our plots, a drive, savefig() method]

>> Named Entities are: 
[('Plot – Export', 'ORG')]


============================ Sentence 33 =============================

       Possible values for the format parameters are png svg pdf Etc...      import matplotlib.pyplot as plt %matplotlib inline values1 = 


>> Tokens are: 
[       , Possible, values, format, parameters, png, svg, pdf, Etc, ...,      , import, matplotlib.pyplot, plt, %, matplotlib, inline, values1, =] 

>> PoS Tags are: 
[('       ', 'SPACE'), ('Possible', 'ADJ'), ('values', 'NOUN'), ('format', 'NOUN'), ('parameters', 'NOUN'), ('png', 'NOUN'), ('svg', 'NOUN'), ('pdf', 'NOUN'), ('Etc', 'PROPN'), ('...', 'PUNCT'), ('     ', 'SPACE'), ('import', 'NOUN'), ('matplotlib.pyplot', 'NOUN'), ('plt', 'NOUN'), ('%', 'NOUN'), ('matplotlib', 'ADJ'), ('inline', 'ADJ'), ('values1', 'NOUN'), ('=', 'PUNCT')] 

>> Dependency Tags are: 
[('       ', 'nummod'), ('Possible', 'amod'), ('values', 'nsubj'), ('format', 'compound'), ('parameters', 'pobj'), ('png', 'attr'), ('svg', 'compound'), ('pdf', 'appos'), ('Etc', 'appos'), ('...', 'punct'), ('     ', 'nmod'), ('import', 'compound'), ('matplotlib.pyplot', 'attr'), ('plt', 'nmod'), ('%', 'nmod'), ('matplotlib', 'amod'), ('inline', 'amod'), ('values1', 'pobj'), ('=', 'punct')]

>> Bigrams: 
[[       , Possible], [Possible, values], [values, format], [format, parameters], [parameters, png], [png, svg], [svg, pdf], [pdf, Etc], [Etc, ...], [...,      ], [     , import], [import, matplotlib.pyplot], [matplotlib.pyplot, plt], [plt, %], [%, matplotlib], [matplotlib, inline], [inline, values1], [values1, =]]

>> Trigrams: 
[[       , Possible, values], [Possible, values, format], [values, format, parameters], [format, parameters, png], [parameters, png, svg], [png, svg, pdf], [svg, pdf, Etc], [pdf, Etc, ...], [Etc, ...,      ], [...,      , import], [     , import, matplotlib.pyplot], [import, matplotlib.pyplot, plt], [matplotlib.pyplot, plt, %], [plt, %, matplotlib], [%, matplotlib, inline], [matplotlib, inline, values1], [inline, values1, =]]

>> Noun Phrases are: 
[       Possible values, the format parameters, png, svg pdf, Etc, ...      import matplotlib.pyplot, plt %matplotlib inline values1]

>> Named Entities are: 
[]


============================ Sentence 34 =============================

[5,8,9,4,1,6,7,2,3,8] values2 = 


>> Tokens are: 
[[, 5,8,9,4,1,6,7,2,3,8, ], values2, =] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('5,8,9,4,1,6,7,2,3,8', 'NUM'), (']', 'PUNCT'), ('values2', 'NOUN'), ('=', 'PUNCT')] 

>> Dependency Tags are: 
[('[', 'dep'), ('5,8,9,4,1,6,7,2,3,8', 'dep'), (']', 'punct'), ('values2', 'ROOT'), ('=', 'punct')]

>> Bigrams: 
[[[, 5,8,9,4,1,6,7,2,3,8], [5,8,9,4,1,6,7,2,3,8, ]], [], values2], [values2, =]]

>> Trigrams: 
[[[, 5,8,9,4,1,6,7,2,3,8, ]], [5,8,9,4,1,6,7,2,3,8, ], values2], [], values2, =]]

>> Noun Phrases are: 
[[5,8,9,4,1,6,7,2,3,8] values2]

>> Named Entities are: 
[('5,8,9,4,1,6,7,2,3,8', 'CARDINAL')]


============================ Sentence 35 =============================

[8,3,2,7,6,1,4,9,8,5] plt.plot(range(1,11),values1) plt.plot(range(1,11),values2) 


>> Tokens are: 
[[, 8,3,2,7,6,1,4,9,8,5, ], plt.plot(range(1,11),values1, ), plt.plot(range(1,11),values2, )] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('8,3,2,7,6,1,4,9,8,5', 'NUM'), (']', 'PUNCT'), ('plt.plot(range(1,11),values1', 'NOUN'), (')', 'PUNCT'), ('plt.plot(range(1,11),values2', 'PROPN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('[', 'punct'), ('8,3,2,7,6,1,4,9,8,5', 'dep'), (']', 'punct'), ('plt.plot(range(1,11),values1', 'ROOT'), (')', 'punct'), ('plt.plot(range(1,11),values2', 'appos'), (')', 'punct')]

>> Bigrams: 
[[[, 8,3,2,7,6,1,4,9,8,5], [8,3,2,7,6,1,4,9,8,5, ]], [], plt.plot(range(1,11),values1], [plt.plot(range(1,11),values1, )], [), plt.plot(range(1,11),values2], [plt.plot(range(1,11),values2, )]]

>> Trigrams: 
[[[, 8,3,2,7,6,1,4,9,8,5, ]], [8,3,2,7,6,1,4,9,8,5, ], plt.plot(range(1,11),values1], [], plt.plot(range(1,11),values1, )], [plt.plot(range(1,11),values1, ), plt.plot(range(1,11),values2], [), plt.plot(range(1,11),values2, )]]

>> Noun Phrases are: 
[[8,3,2,7,6,1,4,9,8,5] plt.plot(range(1,11),values1, plt.plot(range(1,11),values2]

>> Named Entities are: 
[]


============================ Sentence 36 =============================

#plt.show() plt.savefig('SaveToPath.png',format='png') 


>> Tokens are: 
[#, plt.show, (, ), plt.savefig('SaveToPath.png',format='png, ', )] 

>> PoS Tags are: 
[('#', 'NOUN'), ('plt.show', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ("plt.savefig('SaveToPath.png',format='png", 'PROPN'), ("'", 'PUNCT'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('#', 'punct'), ('plt.show', 'nmod'), ('(', 'punct'), (')', 'punct'), ("plt.savefig('SaveToPath.png',format='png", 'ROOT'), ("'", 'punct'), (')', 'punct')]

>> Bigrams: 
[[#, plt.show], [plt.show, (], [(, )], [), plt.savefig('SaveToPath.png',format='png], [plt.savefig('SaveToPath.png',format='png, '], [', )]]

>> Trigrams: 
[[#, plt.show, (], [plt.show, (, )], [(, ), plt.savefig('SaveToPath.png',format='png], [), plt.savefig('SaveToPath.png',format='png, '], [plt.savefig('SaveToPath.png',format='png, ', )]]

>> Noun Phrases are: 
[#plt.show() plt.savefig('SaveToPath.png',format='png]

>> Named Entities are: 
[]


============================ Sentence 37 =============================

1 2 3 4 5 6 7 8 plotDemo1.py      SaveToPath.png    Prof. Arjun V. Bala 


>> Tokens are: 
[1, 2, 3, 4, 5, 6, 7, 8, plotDemo1.py,      , SaveToPath.png,    , Prof., Arjun, V., Bala] 

>> PoS Tags are: 
[('1', 'NUM'), ('2', 'NUM'), ('3', 'NUM'), ('4', 'NUM'), ('5', 'NUM'), ('6', 'NUM'), ('7', 'NUM'), ('8', 'NUM'), ('plotDemo1.py', 'NUM'), ('     ', 'SPACE'), ('SaveToPath.png', 'NOUN'), ('   ', 'SPACE'), ('Prof.', 'PROPN'), ('Arjun', 'PROPN'), ('V.', 'PROPN'), ('Bala', 'PROPN')] 

>> Dependency Tags are: 
[('1', 'compound'), ('2', 'quantmod'), ('3', 'appos'), ('4', 'appos'), ('5', 'appos'), ('6', 'quantmod'), ('7', 'compound'), ('8', 'nummod'), ('plotDemo1.py', 'ROOT'), ('     ', 'appos'), ('SaveToPath.png', 'appos'), ('   ', 'nummod'), ('Prof.', 'compound'), ('Arjun', 'compound'), ('V.', 'compound'), ('Bala', 'appos')]

>> Bigrams: 
[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, plotDemo1.py], [plotDemo1.py,      ], [     , SaveToPath.png], [SaveToPath.png,    ], [   , Prof.], [Prof., Arjun], [Arjun, V.], [V., Bala]]

>> Trigrams: 
[[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6], [5, 6, 7], [6, 7, 8], [7, 8, plotDemo1.py], [8, plotDemo1.py,      ], [plotDemo1.py,      , SaveToPath.png], [     , SaveToPath.png,    ], [SaveToPath.png,    , Prof.], [   , Prof., Arjun], [Prof., Arjun, V.], [Arjun, V., Bala]]

>> Noun Phrases are: 
[SaveToPath.png, Prof. Arjun V. Bala]

>> Named Entities are: 
[('Arjun V. Bala', 'PERSON')]


============================ Sentence 38 =============================

#3150713 (PDS)      Unit 04 


>> Tokens are: 
[#, 3150713, (, PDS, ),   , ,   , Unit, 04] 

>> PoS Tags are: 
[('#', 'NOUN'), ('3150713', 'NUM'), ('(', 'PUNCT'), ('PDS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('04', 'NUM')] 

>> Dependency Tags are: 
[('#', 'nmod'), ('3150713', 'nummod'), ('(', 'punct'), ('PDS', 'appos'), (')', 'punct'), ('  ', 'nsubj'), ('\uf077', 'ROOT'), ('  ', 'punct'), ('Unit', 'npadvmod'), ('04', 'nummod')]

>> Bigrams: 
[[#, 3150713], [3150713, (], [(, PDS], [PDS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 04]]

>> Trigrams: 
[[#, 3150713, (], [3150713, (, PDS], [(, PDS, )], [PDS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 04]]

>> Noun Phrases are: 
[(PDS]

>> Named Entities are: 
[('PDS', 'ORG'), ('04', 'CARDINAL')]


============================ Sentence 39 =============================

– Data Visualization ‹#›   Plot – Axis, Ticks and Grid We can access and format the axis, ticks and grid on the plot using the axis() method of the matplotlib.pyplot.plt import matplotlib.pyplot as plt %matplotlib notebook values = 


>> Tokens are: 
[–, Data, Visualization, ‹#›,   , Plot, –, Axis, ,, Ticks, Grid, access, format, axis, ,, ticks, grid, plot, axis, (, ), method, matplotlib.pyplot.plt, import, matplotlib.pyplot, plt, %, matplotlib, notebook, values, =] 

>> PoS Tags are: 
[('–', 'PUNCT'), ('Data', 'PROPN'), ('Visualization', 'PROPN'), ('‹#›', 'VERB'), ('  ', 'SPACE'), ('Plot', 'NOUN'), ('–', 'PUNCT'), ('Axis', 'PROPN'), (',', 'PUNCT'), ('Ticks', 'PROPN'), ('Grid', 'PROPN'), ('access', 'VERB'), ('format', 'VERB'), ('axis', 'NOUN'), (',', 'PUNCT'), ('ticks', 'NOUN'), ('grid', 'VERB'), ('plot', 'NOUN'), ('axis', 'ADJ'), ('(', 'PUNCT'), (')', 'PUNCT'), ('method', 'NOUN'), ('matplotlib.pyplot.plt', 'PROPN'), ('import', 'NOUN'), ('matplotlib.pyplot', 'NOUN'), ('plt', 'NOUN'), ('%', 'NOUN'), ('matplotlib', 'ADJ'), ('notebook', 'NOUN'), ('values', 'NOUN'), ('=', 'PUNCT')] 

>> Dependency Tags are: 
[('–', 'punct'), ('Data', 'compound'), ('Visualization', 'compound'), ('‹#›', 'compound'), ('  ', 'compound'), ('Plot', 'npadvmod'), ('–', 'punct'), ('Axis', 'appos'), (',', 'punct'), ('Ticks', 'conj'), ('Grid', 'conj'), ('access', 'ROOT'), ('format', 'conj'), ('axis', 'dobj'), (',', 'punct'), ('ticks', 'conj'), ('grid', 'conj'), ('plot', 'pobj'), ('axis', 'amod'), ('(', 'punct'), (')', 'punct'), ('method', 'dobj'), ('matplotlib.pyplot.plt', 'compound'), ('import', 'compound'), ('matplotlib.pyplot', 'pobj'), ('plt', 'compound'), ('%', 'nmod'), ('matplotlib', 'amod'), ('notebook', 'compound'), ('values', 'pobj'), ('=', 'punct')]

>> Bigrams: 
[[–, Data], [Data, Visualization], [Visualization, ‹#›], [‹#›,   ], [  , Plot], [Plot, –], [–, Axis], [Axis, ,], [,, Ticks], [Ticks, Grid], [Grid, access], [access, format], [format, axis], [axis, ,], [,, ticks], [ticks, grid], [grid, plot], [plot, axis], [axis, (], [(, )], [), method], [method, matplotlib.pyplot.plt], [matplotlib.pyplot.plt, import], [import, matplotlib.pyplot], [matplotlib.pyplot, plt], [plt, %], [%, matplotlib], [matplotlib, notebook], [notebook, values], [values, =]]

>> Trigrams: 
[[–, Data, Visualization], [Data, Visualization, ‹#›], [Visualization, ‹#›,   ], [‹#›,   , Plot], [  , Plot, –], [Plot, –, Axis], [–, Axis, ,], [Axis, ,, Ticks], [,, Ticks, Grid], [Ticks, Grid, access], [Grid, access, format], [access, format, axis], [format, axis, ,], [axis, ,, ticks], [,, ticks, grid], [ticks, grid, plot], [grid, plot, axis], [plot, axis, (], [axis, (, )], [(, ), method], [), method, matplotlib.pyplot.plt], [method, matplotlib.pyplot.plt, import], [matplotlib.pyplot.plt, import, matplotlib.pyplot], [import, matplotlib.pyplot, plt], [matplotlib.pyplot, plt, %], [plt, %, matplotlib], [%, matplotlib, notebook], [matplotlib, notebook, values], [notebook, values, =]]

>> Noun Phrases are: 
[Axis, Ticks, Grid, We, the axis, ticks, the plot, the axis() method, the matplotlib.pyplot.plt import matplotlib.pyplot, plt %matplotlib notebook values]

>> Named Entities are: 
[('Data Visualization', 'ORG'), ('Ticks', 'NORP'), ('Grid', 'GPE')]


============================ Sentence 40 =============================

[5,8,9,4,1,6,7,2,3,8] ax = plt.axes() ax.set_xlim([0,50]) ax.set_ylim([-10,10]) ax.set_xticks([0,5,10,15,20,25,30,35,40,45,50]) ax.set_yticks([-10,-8,-6,-4,-2,0,2,4,6,8,10]) ax.grid() plt.plot(range(1,11),values) 


>> Tokens are: 
[[, 5,8,9,4,1,6,7,2,3,8, ], ax, =, plt.axes, (, ), ax.set_xlim([0,50, ], ), ax.set_ylim([-10,10, ], ), ax.set_xticks([0,5,10,15,20,25,30,35,40,45,50, ], ), ax.set_yticks([-10,-8,-6,-4,-2,0,2,4,6,8,10, ], ), ax.grid, (, ), plt.plot(range(1,11),values, )] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('5,8,9,4,1,6,7,2,3,8', 'NUM'), (']', 'X'), ('ax', 'NOUN'), ('=', 'SYM'), ('plt.axes', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('ax.set_xlim([0,50', 'X'), (']', 'PUNCT'), (')', 'PUNCT'), ('ax.set_ylim([-10,10', 'X'), (']', 'PUNCT'), (')', 'PUNCT'), ('ax.set_xticks([0,5,10,15,20,25,30,35,40,45,50', 'X'), (']', 'PUNCT'), (')', 'PUNCT'), ('ax.set_yticks([-10,-8,-6,-4,-2,0,2,4,6,8,10', 'X'), (']', 'PUNCT'), (')', 'PUNCT'), ('ax.grid', 'VERB'), ('(', 'PUNCT'), (')', 'PUNCT'), ('plt.plot(range(1,11),values', 'PROPN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('[', 'dep'), ('5,8,9,4,1,6,7,2,3,8', 'dep'), (']', 'dep'), ('ax', 'nmod'), ('=', 'punct'), ('plt.axes', 'ROOT'), ('(', 'punct'), (')', 'punct'), ('ax.set_xlim([0,50', 'appos'), (']', 'punct'), (')', 'punct'), ('ax.set_ylim([-10,10', 'appos'), (']', 'punct'), (')', 'punct'), ('ax.set_xticks([0,5,10,15,20,25,30,35,40,45,50', 'appos'), (']', 'punct'), (')', 'punct'), ('ax.set_yticks([-10,-8,-6,-4,-2,0,2,4,6,8,10', 'appos'), (']', 'punct'), (')', 'punct'), ('ax.grid', 'appos'), ('(', 'punct'), (')', 'punct'), ('plt.plot(range(1,11),values', 'appos'), (')', 'punct')]

>> Bigrams: 
[[[, 5,8,9,4,1,6,7,2,3,8], [5,8,9,4,1,6,7,2,3,8, ]], [], ax], [ax, =], [=, plt.axes], [plt.axes, (], [(, )], [), ax.set_xlim([0,50], [ax.set_xlim([0,50, ]], [], )], [), ax.set_ylim([-10,10], [ax.set_ylim([-10,10, ]], [], )], [), ax.set_xticks([0,5,10,15,20,25,30,35,40,45,50], [ax.set_xticks([0,5,10,15,20,25,30,35,40,45,50, ]], [], )], [), ax.set_yticks([-10,-8,-6,-4,-2,0,2,4,6,8,10], [ax.set_yticks([-10,-8,-6,-4,-2,0,2,4,6,8,10, ]], [], )], [), ax.grid], [ax.grid, (], [(, )], [), plt.plot(range(1,11),values], [plt.plot(range(1,11),values, )]]

>> Trigrams: 
[[[, 5,8,9,4,1,6,7,2,3,8, ]], [5,8,9,4,1,6,7,2,3,8, ], ax], [], ax, =], [ax, =, plt.axes], [=, plt.axes, (], [plt.axes, (, )], [(, ), ax.set_xlim([0,50], [), ax.set_xlim([0,50, ]], [ax.set_xlim([0,50, ], )], [], ), ax.set_ylim([-10,10], [), ax.set_ylim([-10,10, ]], [ax.set_ylim([-10,10, ], )], [], ), ax.set_xticks([0,5,10,15,20,25,30,35,40,45,50], [), ax.set_xticks([0,5,10,15,20,25,30,35,40,45,50, ]], [ax.set_xticks([0,5,10,15,20,25,30,35,40,45,50, ], )], [], ), ax.set_yticks([-10,-8,-6,-4,-2,0,2,4,6,8,10], [), ax.set_yticks([-10,-8,-6,-4,-2,0,2,4,6,8,10, ]], [ax.set_yticks([-10,-8,-6,-4,-2,0,2,4,6,8,10, ], )], [], ), ax.grid], [), ax.grid, (], [ax.grid, (, )], [(, ), plt.plot(range(1,11),values], [), plt.plot(range(1,11),values, )]]

>> Noun Phrases are: 
[[5,8,9,4,1,6,7,2,3,8] ax = plt.axes, ) plt.plot(range(1,11),values]

>> Named Entities are: 
[('5,8,9,4,1,6,7,2,3,8', 'CARDINAL'), ('plt.axes', 'ORG')]


============================ Sentence 41 =============================

1 2 3 4 5 6 7 8 9 10 plotDemo1.py    Prof. Arjun V. Bala #3150713 (PDS)       


>> Tokens are: 
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, plotDemo1.py,    , Prof., Arjun, V., Bala, #, 3150713, (, PDS, ),   , ,   ] 

>> PoS Tags are: 
[('1', 'NUM'), ('2', 'NUM'), ('3', 'NUM'), ('4', 'NUM'), ('5', 'NUM'), ('6', 'NUM'), ('7', 'NUM'), ('8', 'NUM'), ('9', 'NUM'), ('10', 'NUM'), ('plotDemo1.py', 'NUM'), ('   ', 'SPACE'), ('Prof.', 'PROPN'), ('Arjun', 'PROPN'), ('V.', 'PROPN'), ('Bala', 'PROPN'), ('#', 'NOUN'), ('3150713', 'NUM'), ('(', 'PUNCT'), ('PDS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE')] 

>> Dependency Tags are: 
[('1', 'compound'), ('2', 'quantmod'), ('3', 'appos'), ('4', 'appos'), ('5', 'appos'), ('6', 'appos'), ('7', 'quantmod'), ('8', 'quantmod'), ('9', 'quantmod'), ('10', 'quantmod'), ('plotDemo1.py', 'compound'), ('   ', 'nummod'), ('Prof.', 'compound'), ('Arjun', 'compound'), ('V.', 'compound'), ('Bala', 'nsubj'), ('#', 'nmod'), ('3150713', 'appos'), ('(', 'punct'), ('PDS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'punct')]

>> Bigrams: 
[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, plotDemo1.py], [plotDemo1.py,    ], [   , Prof.], [Prof., Arjun], [Arjun, V.], [V., Bala], [Bala, #], [#, 3150713], [3150713, (], [(, PDS], [PDS, )], [),   ], [  , ], [,   ]]

>> Trigrams: 
[[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6], [5, 6, 7], [6, 7, 8], [7, 8, 9], [8, 9, 10], [9, 10, plotDemo1.py], [10, plotDemo1.py,    ], [plotDemo1.py,    , Prof.], [   , Prof., Arjun], [Prof., Arjun, V.], [Arjun, V., Bala], [V., Bala, #], [Bala, #, 3150713], [#, 3150713, (], [3150713, (, PDS], [(, PDS, )], [PDS, ),   ], [),   , ], [  , ,   ]]

>> Noun Phrases are: 
[1 2 3 4 5 6 7 8 9 10 plotDemo1.py    Prof. Arjun V. Bala, (PDS]

>> Named Entities are: 
[('Arjun V. Bala', 'PERSON'), ('PDS', 'ORG')]


============================ Sentence 42 =============================

Unit 04 – Data Visualization ‹#›  import matplotlib.pyplot as plt %matplotlib inline values1 = 


>> Tokens are: 
[Unit, 04, –, Data, Visualization, ‹#›,  , import, matplotlib.pyplot, plt, %, matplotlib, inline, values1, =] 

>> PoS Tags are: 
[('Unit', 'NOUN'), ('04', 'NUM'), ('–', 'PUNCT'), ('Data', 'PROPN'), ('Visualization', 'PROPN'), ('‹#›', 'NOUN'), (' ', 'SPACE'), ('import', 'NOUN'), ('matplotlib.pyplot', 'NOUN'), ('plt', 'NOUN'), ('%', 'NOUN'), ('matplotlib', 'ADJ'), ('inline', 'ADJ'), ('values1', 'NOUN'), ('=', 'PUNCT')] 

>> Dependency Tags are: 
[('Unit', 'ROOT'), ('04', 'nummod'), ('–', 'punct'), ('Data', 'nmod'), ('Visualization', 'nmod'), ('‹#›', 'punct'), (' ', 'appos'), ('import', 'compound'), ('matplotlib.pyplot', 'appos'), ('plt', 'nmod'), ('%', 'nmod'), ('matplotlib', 'amod'), ('inline', 'amod'), ('values1', 'pobj'), ('=', 'punct')]

>> Bigrams: 
[[Unit, 04], [04, –], [–, Data], [Data, Visualization], [Visualization, ‹#›], [‹#›,  ], [ , import], [import, matplotlib.pyplot], [matplotlib.pyplot, plt], [plt, %], [%, matplotlib], [matplotlib, inline], [inline, values1], [values1, =]]

>> Trigrams: 
[[Unit, 04, –], [04, –, Data], [–, Data, Visualization], [Data, Visualization, ‹#›], [Visualization, ‹#›,  ], [‹#›,  , import], [ , import, matplotlib.pyplot], [import, matplotlib.pyplot, plt], [matplotlib.pyplot, plt, %], [plt, %, matplotlib], [%, matplotlib, inline], [matplotlib, inline, values1], [inline, values1, =]]

>> Noun Phrases are: 
[Unit, Data Visualization ‹#›  import matplotlib.pyplot, plt %matplotlib inline values1]

>> Named Entities are: 
[('04', 'CARDINAL'), ('Data Visualization ‹#›', 'ORG')]


============================ Sentence 43 =============================

[5,8,9,4,1,6,7,2,3,8] values2 = 


>> Tokens are: 
[[, 5,8,9,4,1,6,7,2,3,8, ], values2, =] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('5,8,9,4,1,6,7,2,3,8', 'NUM'), (']', 'PUNCT'), ('values2', 'NOUN'), ('=', 'PUNCT')] 

>> Dependency Tags are: 
[('[', 'dep'), ('5,8,9,4,1,6,7,2,3,8', 'dep'), (']', 'punct'), ('values2', 'ROOT'), ('=', 'punct')]

>> Bigrams: 
[[[, 5,8,9,4,1,6,7,2,3,8], [5,8,9,4,1,6,7,2,3,8, ]], [], values2], [values2, =]]

>> Trigrams: 
[[[, 5,8,9,4,1,6,7,2,3,8, ]], [5,8,9,4,1,6,7,2,3,8, ], values2], [], values2, =]]

>> Noun Phrases are: 
[[5,8,9,4,1,6,7,2,3,8] values2]

>> Named Entities are: 
[('5,8,9,4,1,6,7,2,3,8', 'CARDINAL')]


============================ Sentence 44 =============================

[8,3,2,7,6,1,4,9,8,5] 


>> Tokens are: 
[[, 8,3,2,7,6,1,4,9,8,5, ]] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('8,3,2,7,6,1,4,9,8,5', 'NUM'), (']', 'PUNCT')] 

>> Dependency Tags are: 
[('[', 'punct'), ('8,3,2,7,6,1,4,9,8,5', 'ROOT'), (']', 'punct')]

>> Bigrams: 
[[[, 8,3,2,7,6,1,4,9,8,5], [8,3,2,7,6,1,4,9,8,5, ]]]

>> Trigrams: 
[[[, 8,3,2,7,6,1,4,9,8,5, ]]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 45 =============================

plt.plot(range(1,11),values1,c='r',lw=1,ls='--',marker='>') 


>> Tokens are: 
[plt.plot(range(1,11),values1,c='r',lw=1,ls='--',marker=, ', >, ', )] 

>> PoS Tags are: 
[("plt.plot(range(1,11),values1,c='r',lw=1,ls='--',marker=", 'ADV'), ("'", 'PUNCT'), ('>', 'X'), ("'", 'PUNCT'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[("plt.plot(range(1,11),values1,c='r',lw=1,ls='--',marker=", 'ROOT'), ("'", 'punct'), ('>', 'pobj'), ("'", 'punct'), (')', 'punct')]

>> Bigrams: 
[[plt.plot(range(1,11),values1,c='r',lw=1,ls='--',marker=, '], [', >], [>, '], [', )]]

>> Trigrams: 
[[plt.plot(range(1,11),values1,c='r',lw=1,ls='--',marker=, ', >], [', >, '], [>, ', )]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 46 =============================

plt.plot(range(1,11),values2,c='b',lw=2,ls=':',marker='o' 


>> Tokens are: 
[plt.plot(range(1,11),values2,c='b',lw=2,ls=':',marker='o, '] 

>> PoS Tags are: 
[("plt.plot(range(1,11),values2,c='b',lw=2,ls=':',marker='o", 'PROPN'), ("'", 'PUNCT')] 

>> Dependency Tags are: 
[("plt.plot(range(1,11),values2,c='b',lw=2,ls=':',marker='o", 'ROOT'), ("'", 'punct')]

>> Bigrams: 
[[plt.plot(range(1,11),values2,c='b',lw=2,ls=':',marker='o, ']]

>> Trigrams: 
[]

>> Noun Phrases are: 
[plt.plot(range(1,11),values2,c='b',lw=2,ls=':',marker='o]

>> Named Entities are: 
[]


============================ Sentence 47 =============================

) plt.show 


>> Tokens are: 
[), plt.show] 

>> PoS Tags are: 
[(')', 'PUNCT'), ('plt.show', 'PROPN')] 

>> Dependency Tags are: 
[(')', 'punct'), ('plt.show', 'ROOT')]

>> Bigrams: 
[[), plt.show]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[) plt.show]

>> Named Entities are: 
[]


============================ Sentence 48 =============================

()   


>> Tokens are: 
[(, ),  ] 

>> PoS Tags are: 
[('(', 'PUNCT'), (')', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('(', 'punct'), (')', 'punct'), (' ', 'ROOT')]

>> Bigrams: 
[[(, )], [),  ]]

>> Trigrams: 
[[(, ),  ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 49 =============================

Plot – Line Appearance We need different line styles in order to differentiate when having multiple lines in the same plot, we can achieve this using many parameters, some of them are listed below. 


>> Tokens are: 
[Plot, –, Line, Appearance, need, different, line, styles, order, differentiate, having, multiple, lines, plot, ,, achieve, parameters, ,, listed, .] 

>> PoS Tags are: 
[('Plot', 'NOUN'), ('–', 'PUNCT'), ('Line', 'PROPN'), ('Appearance', 'PROPN'), ('need', 'VERB'), ('different', 'ADJ'), ('line', 'NOUN'), ('styles', 'NOUN'), ('order', 'NOUN'), ('differentiate', 'VERB'), ('having', 'VERB'), ('multiple', 'ADJ'), ('lines', 'NOUN'), ('plot', 'NOUN'), (',', 'PUNCT'), ('achieve', 'VERB'), ('parameters', 'NOUN'), (',', 'PUNCT'), ('listed', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Plot', 'nmod'), ('–', 'punct'), ('Line', 'compound'), ('Appearance', 'npadvmod'), ('need', 'advcl'), ('different', 'amod'), ('line', 'compound'), ('styles', 'dobj'), ('order', 'pobj'), ('differentiate', 'acl'), ('having', 'advcl'), ('multiple', 'amod'), ('lines', 'dobj'), ('plot', 'pobj'), (',', 'punct'), ('achieve', 'ccomp'), ('parameters', 'dobj'), (',', 'punct'), ('listed', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Plot, –], [–, Line], [Line, Appearance], [Appearance, need], [need, different], [different, line], [line, styles], [styles, order], [order, differentiate], [differentiate, having], [having, multiple], [multiple, lines], [lines, plot], [plot, ,], [,, achieve], [achieve, parameters], [parameters, ,], [,, listed], [listed, .]]

>> Trigrams: 
[[Plot, –, Line], [–, Line, Appearance], [Line, Appearance, need], [Appearance, need, different], [need, different, line], [different, line, styles], [line, styles, order], [styles, order, differentiate], [order, differentiate, having], [differentiate, having, multiple], [having, multiple, lines], [multiple, lines, plot], [lines, plot, ,], [plot, ,, achieve], [,, achieve, parameters], [achieve, parameters, ,], [parameters, ,, listed], [,, listed, .]]

>> Noun Phrases are: 
[We, different line styles, order, multiple lines, the same plot, we, many parameters, them]

>> Named Entities are: 
[]


============================ Sentence 50 =============================

Line style (linestyle or ls) Line width (linewidth or lw) 


>> Tokens are: 
[Line, style, (, linestyle, ls, ), Line, width, (, linewidth, lw, )] 

>> PoS Tags are: 
[('Line', 'NOUN'), ('style', 'NOUN'), ('(', 'PUNCT'), ('linestyle', 'NOUN'), ('ls', 'ADJ'), (')', 'PUNCT'), ('Line', 'NOUN'), ('width', 'NOUN'), ('(', 'PUNCT'), ('linewidth', 'VERB'), ('lw', 'NOUN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('Line', 'compound'), ('style', 'ROOT'), ('(', 'punct'), ('linestyle', 'appos'), ('ls', 'conj'), (')', 'punct'), ('Line', 'compound'), ('width', 'appos'), ('(', 'punct'), ('linewidth', 'parataxis'), ('lw', 'conj'), (')', 'punct')]

>> Bigrams: 
[[Line, style], [style, (], [(, linestyle], [linestyle, ls], [ls, )], [), Line], [Line, width], [width, (], [(, linewidth], [linewidth, lw], [lw, )]]

>> Trigrams: 
[[Line, style, (], [style, (, linestyle], [(, linestyle, ls], [linestyle, ls, )], [ls, ), Line], [), Line, width], [Line, width, (], [width, (, linewidth], [(, linewidth, lw], [linewidth, lw, )]]

>> Noun Phrases are: 
[Line style, linestyle, Line width]

>> Named Entities are: 
[]


============================ Sentence 51 =============================

Line color (color or c) Markers (marker) 


>> Tokens are: 
[Line, color, (, color, c, ), Markers, (, marker, )] 

>> PoS Tags are: 
[('Line', 'NOUN'), ('color', 'NOUN'), ('(', 'PUNCT'), ('color', 'NOUN'), ('c', 'X'), (')', 'PUNCT'), ('Markers', 'NOUN'), ('(', 'PUNCT'), ('marker', 'NOUN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('Line', 'compound'), ('color', 'ROOT'), ('(', 'punct'), ('color', 'appos'), ('c', 'conj'), (')', 'punct'), ('Markers', 'appos'), ('(', 'punct'), ('marker', 'appos'), (')', 'punct')]

>> Bigrams: 
[[Line, color], [color, (], [(, color], [color, c], [c, )], [), Markers], [Markers, (], [(, marker], [marker, )]]

>> Trigrams: 
[[Line, color, (], [color, (, color], [(, color, c], [color, c, )], [c, ), Markers], [), Markers, (], [Markers, (, marker], [(, marker, )]]

>> Noun Phrases are: 
[Line color, color, Markers, marker]

>> Named Entities are: 
[]


============================ Sentence 52 =============================

1 2 3 4 5 6 7 plotDemo1.py    Prof. Arjun V. Bala #3150713 (PDS)       


>> Tokens are: 
[1, 2, 3, 4, 5, 6, 7, plotDemo1.py,    , Prof., Arjun, V., Bala, #, 3150713, (, PDS, ),   , ,   ] 

>> PoS Tags are: 
[('1', 'NUM'), ('2', 'NUM'), ('3', 'NUM'), ('4', 'NUM'), ('5', 'NUM'), ('6', 'NUM'), ('7', 'NUM'), ('plotDemo1.py', 'NUM'), ('   ', 'SPACE'), ('Prof.', 'PROPN'), ('Arjun', 'PROPN'), ('V.', 'PROPN'), ('Bala', 'PROPN'), ('#', 'NOUN'), ('3150713', 'NUM'), ('(', 'PUNCT'), ('PDS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE')] 

>> Dependency Tags are: 
[('1', 'nummod'), ('2', 'nummod'), ('3', 'appos'), ('4', 'appos'), ('5', 'appos'), ('6', 'appos'), ('7', 'appos'), ('plotDemo1.py', 'compound'), ('   ', 'nummod'), ('Prof.', 'compound'), ('Arjun', 'compound'), ('V.', 'compound'), ('Bala', 'nsubj'), ('#', 'nmod'), ('3150713', 'appos'), ('(', 'punct'), ('PDS', 'appos'), (')', 'punct'), ('  ', 'conj'), ('\uf077', 'ROOT'), ('  ', 'punct')]

>> Bigrams: 
[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, plotDemo1.py], [plotDemo1.py,    ], [   , Prof.], [Prof., Arjun], [Arjun, V.], [V., Bala], [Bala, #], [#, 3150713], [3150713, (], [(, PDS], [PDS, )], [),   ], [  , ], [,   ]]

>> Trigrams: 
[[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6], [5, 6, 7], [6, 7, plotDemo1.py], [7, plotDemo1.py,    ], [plotDemo1.py,    , Prof.], [   , Prof., Arjun], [Prof., Arjun, V.], [Arjun, V., Bala], [V., Bala, #], [Bala, #, 3150713], [#, 3150713, (], [3150713, (, PDS], [(, PDS, )], [PDS, ),   ], [),   , ], [  , ,   ]]

>> Noun Phrases are: 
[1 2 3 4 5 6 7 plotDemo1.py    Prof. Arjun V. Bala, (PDS]

>> Named Entities are: 
[('1 2', 'CARDINAL'), ('Arjun V. Bala', 'PERSON'), ('PDS', 'ORG')]


============================ Sentence 53 =============================

Unit 04 – Data Visualization ‹#›   


>> Tokens are: 
[Unit, 04, –, Data, Visualization, ‹#›,  ] 

>> PoS Tags are: 
[('Unit', 'NOUN'), ('04', 'NUM'), ('–', 'PUNCT'), ('Data', 'PROPN'), ('Visualization', 'PROPN'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Unit', 'ROOT'), ('04', 'nummod'), ('–', 'punct'), ('Data', 'compound'), ('Visualization', 'appos'), ('‹#›', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[Unit, 04], [04, –], [–, Data], [Data, Visualization], [Visualization, ‹#›], [‹#›,  ]]

>> Trigrams: 
[[Unit, 04, –], [04, –, Data], [–, Data, Visualization], [Data, Visualization, ‹#›], [Visualization, ‹#›,  ]]

>> Noun Phrases are: 
[Unit, – Data Visualization]

>> Named Entities are: 
[('04', 'CARDINAL'), ('Data Visualization ‹#›', 'ORG')]


============================ Sentence 54 =============================

Plot – Line Appearance (Cont.) 


>> Tokens are: 
[Plot, –, Line, Appearance, (, Cont, ., )] 

>> PoS Tags are: 
[('Plot', 'NOUN'), ('–', 'PUNCT'), ('Line', 'PROPN'), ('Appearance', 'PROPN'), ('(', 'PUNCT'), ('Cont', 'PROPN'), ('.', 'PUNCT'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('Plot', 'nmod'), ('–', 'punct'), ('Line', 'compound'), ('Appearance', 'ROOT'), ('(', 'punct'), ('Cont', 'appos'), ('.', 'punct'), (')', 'punct')]

>> Bigrams: 
[[Plot, –], [–, Line], [Line, Appearance], [Appearance, (], [(, Cont], [Cont, .], [., )]]

>> Trigrams: 
[[Plot, –, Line], [–, Line, Appearance], [Line, Appearance, (], [Appearance, (, Cont], [(, Cont, .], [Cont, ., )]]

>> Noun Phrases are: 
[Plot – Line Appearance, Cont]

>> Named Entities are: 
[('Plot – Line Appearance', 'ORG')]


============================ Sentence 55 =============================

Possible Values for each parameters are,  	Values	Line Style 	‘-’	Solid line 	‘--’	Dashed line 	‘-.’ 


>> Tokens are: 
[Possible, Values, parameters, ,,  	, Values, 	, Line, Style, 	, ‘, -, ’, 	, Solid, line, 	, ‘, --, ’, 	, Dashed, line, 	, ‘, -, ., ’] 

>> PoS Tags are: 
[('Possible', 'ADJ'), ('Values', 'NOUN'), ('parameters', 'NOUN'), (',', 'PUNCT'), (' \t', 'SPACE'), ('Values', 'NOUN'), ('\t', 'SPACE'), ('Line', 'PROPN'), ('Style', 'PROPN'), ('\t', 'SPACE'), ('‘', 'PUNCT'), ('-', 'PUNCT'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('Solid', 'ADJ'), ('line', 'NOUN'), ('\t', 'SPACE'), ('‘', 'PUNCT'), ('--', 'PUNCT'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('Dashed', 'VERB'), ('line', 'NOUN'), ('\t', 'SPACE'), ('‘', 'PUNCT'), ('-', 'PUNCT'), ('.', 'PUNCT'), ('’', 'PUNCT')] 

>> Dependency Tags are: 
[('Possible', 'amod'), ('Values', 'nsubj'), ('parameters', 'pobj'), (',', 'punct'), (' \t', 'amod'), ('Values', 'appos'), ('\t', 'compound'), ('Line', 'compound'), ('Style', 'compound'), ('\t', 'nmod'), ('‘', 'punct'), ('-', 'punct'), ('’', 'punct'), ('\t', 'amod'), ('Solid', 'amod'), ('line', 'compound'), ('\t', 'nsubj'), ('‘', 'punct'), ('--', 'punct'), ('’', 'punct'), ('\t', 'nsubj'), ('Dashed', 'ccomp'), ('line', 'dobj'), ('\t', 'dobj'), ('‘', 'punct'), ('-', 'punct'), ('.', 'punct'), ('’', 'punct')]

>> Bigrams: 
[[Possible, Values], [Values, parameters], [parameters, ,], [,,  	], [ 	, Values], [Values, 	], [	, Line], [Line, Style], [Style, 	], [	, ‘], [‘, -], [-, ’], [’, 	], [	, Solid], [Solid, line], [line, 	], [	, ‘], [‘, --], [--, ’], [’, 	], [	, Dashed], [Dashed, line], [line, 	], [	, ‘], [‘, -], [-, .], [., ’]]

>> Trigrams: 
[[Possible, Values, parameters], [Values, parameters, ,], [parameters, ,,  	], [,,  	, Values], [ 	, Values, 	], [Values, 	, Line], [	, Line, Style], [Line, Style, 	], [Style, 	, ‘], [	, ‘, -], [‘, -, ’], [-, ’, 	], [’, 	, Solid], [	, Solid, line], [Solid, line, 	], [line, 	, ‘], [	, ‘, --], [‘, --, ’], [--, ’, 	], [’, 	, Dashed], [	, Dashed, line], [Dashed, line, 	], [line, 	, ‘], [	, ‘, -], [‘, -, .], [-, ., ’]]

>> Noun Phrases are: 
[Possible Values, each parameters, Values, line]

>> Named Entities are: 
[]


============================ Sentence 56 =============================

	Dash-dot line 	‘:’	Dotted line  	Values	Color 	‘b’	Blue 	‘g’	Green 	‘r’	Red 	‘c’	Cyan 	‘m’	Magenta 	‘y’	Yellow 	‘k’	Black 	‘w’	White  	Values	Marker 	‘.’ 


>> Tokens are: 
[	, Dash, -, dot, line, 	, ‘, :, ’, 	, Dotted, line,  	, Values, 	, Color, 	, ‘, b, ’, 	, Blue, 	, ‘, g, ’, 	, Green, 	, ‘, r, ’, 	, Red, 	, ‘, c, ’, 	, Cyan, 	, ‘, m, ’, 	, Magenta, 	, ‘, y, ’, 	, Yellow, 	, ‘, k, ’, 	, Black, 	, ‘, w, ’, 	, White,  	, Values, 	, Marker, 	, ‘, ., ’] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('Dash', 'NOUN'), ('-', 'PUNCT'), ('dot', 'NOUN'), ('line', 'NOUN'), ('\t', 'SPACE'), ('‘', 'PUNCT'), (':', 'PUNCT'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('Dotted', 'VERB'), ('line', 'NOUN'), (' \t', 'SPACE'), ('Values', 'NOUN'), ('\t', 'SPACE'), ('Color', 'PROPN'), ('\t', 'SPACE'), ('‘', 'PUNCT'), ('b', 'NOUN'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('Blue', 'PROPN'), ('\t', 'SPACE'), ('‘', 'PUNCT'), ('g', 'NOUN'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('Green', 'PROPN'), ('\t', 'SPACE'), ('‘', 'PUNCT'), ('r', 'NOUN'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('Red', 'PROPN'), ('\t', 'SPACE'), ('‘', 'PUNCT'), ('c', 'NOUN'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('Cyan', 'PROPN'), ('\t', 'SPACE'), ('‘', 'PUNCT'), ('m', 'VERB'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('Magenta', 'PROPN'), ('\t', 'SPACE'), ('‘', 'PUNCT'), ('y', 'PROPN'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('Yellow', 'PROPN'), ('\t', 'SPACE'), ('‘', 'PUNCT'), ('k', 'NOUN'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('Black', 'PROPN'), ('\t', 'SPACE'), ('‘', 'PUNCT'), ('w', 'NOUN'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('White', 'PROPN'), (' \t', 'SPACE'), ('Values', 'NOUN'), ('\t', 'SPACE'), ('Marker', 'PROPN'), ('\t', 'SPACE'), ('‘', 'PUNCT'), ('.', 'PUNCT'), ('’', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'amod'), ('Dash', 'compound'), ('-', 'punct'), ('dot', 'compound'), ('line', 'ROOT'), ('\t', 'nsubj'), ('‘', 'punct'), (':', 'punct'), ('’', 'punct'), ('\t', 'nsubj'), ('Dotted', 'relcl'), ('line', 'compound'), (' \t', 'compound'), ('Values', 'dobj'), ('\t', 'compound'), ('Color', 'compound'), ('\t', 'appos'), ('‘', 'punct'), ('b', 'appos'), ('’', 'punct'), ('\t', 'compound'), ('Blue', 'compound'), ('\t', 'appos'), ('‘', 'punct'), ('g', 'nmod'), ('’', 'punct'), ('\t', 'compound'), ('Green', 'compound'), ('\t', 'appos'), ('‘', 'punct'), ('r', 'nmod'), ('’', 'punct'), ('\t', 'compound'), ('Red', 'compound'), ('\t', 'appos'), ('‘', 'punct'), ('c', 'nmod'), ('’', 'punct'), ('\t', 'compound'), ('Cyan', 'compound'), ('\t', 'appos'), ('‘', 'punct'), ('m', 'appos'), ('’', 'punct'), ('\t', 'compound'), ('Magenta', 'compound'), ('\t', 'nmod'), ('‘', 'punct'), ('y', 'nmod'), ('’', 'punct'), ('\t', 'compound'), ('Yellow', 'compound'), ('\t', 'appos'), ('‘', 'punct'), ('k', 'punct'), ('’', 'punct'), ('\t', 'compound'), ('Black', 'compound'), ('\t', 'appos'), ('‘', 'punct'), ('w', 'appos'), ('’', 'punct'), ('\t', 'amod'), ('White', 'compound'), (' \t', 'compound'), ('Values', 'compound'), ('\t', 'compound'), ('Marker', 'compound'), ('\t', 'oprd'), ('‘', 'punct'), ('.', 'punct'), ('’', 'punct')]

>> Bigrams: 
[[	, Dash], [Dash, -], [-, dot], [dot, line], [line, 	], [	, ‘], [‘, :], [:, ’], [’, 	], [	, Dotted], [Dotted, line], [line,  	], [ 	, Values], [Values, 	], [	, Color], [Color, 	], [	, ‘], [‘, b], [b, ’], [’, 	], [	, Blue], [Blue, 	], [	, ‘], [‘, g], [g, ’], [’, 	], [	, Green], [Green, 	], [	, ‘], [‘, r], [r, ’], [’, 	], [	, Red], [Red, 	], [	, ‘], [‘, c], [c, ’], [’, 	], [	, Cyan], [Cyan, 	], [	, ‘], [‘, m], [m, ’], [’, 	], [	, Magenta], [Magenta, 	], [	, ‘], [‘, y], [y, ’], [’, 	], [	, Yellow], [Yellow, 	], [	, ‘], [‘, k], [k, ’], [’, 	], [	, Black], [Black, 	], [	, ‘], [‘, w], [w, ’], [’, 	], [	, White], [White,  	], [ 	, Values], [Values, 	], [	, Marker], [Marker, 	], [	, ‘], [‘, .], [., ’]]

>> Trigrams: 
[[	, Dash, -], [Dash, -, dot], [-, dot, line], [dot, line, 	], [line, 	, ‘], [	, ‘, :], [‘, :, ’], [:, ’, 	], [’, 	, Dotted], [	, Dotted, line], [Dotted, line,  	], [line,  	, Values], [ 	, Values, 	], [Values, 	, Color], [	, Color, 	], [Color, 	, ‘], [	, ‘, b], [‘, b, ’], [b, ’, 	], [’, 	, Blue], [	, Blue, 	], [Blue, 	, ‘], [	, ‘, g], [‘, g, ’], [g, ’, 	], [’, 	, Green], [	, Green, 	], [Green, 	, ‘], [	, ‘, r], [‘, r, ’], [r, ’, 	], [’, 	, Red], [	, Red, 	], [Red, 	, ‘], [	, ‘, c], [‘, c, ’], [c, ’, 	], [’, 	, Cyan], [	, Cyan, 	], [Cyan, 	, ‘], [	, ‘, m], [‘, m, ’], [m, ’, 	], [’, 	, Magenta], [	, Magenta, 	], [Magenta, 	, ‘], [	, ‘, y], [‘, y, ’], [y, ’, 	], [’, 	, Yellow], [	, Yellow, 	], [Yellow, 	, ‘], [	, ‘, k], [‘, k, ’], [k, ’, 	], [’, 	, Black], [	, Black, 	], [Black, 	, ‘], [	, ‘, w], [‘, w, ’], [w, ’, 	], [’, 	, White], [	, White,  	], [White,  	, Values], [ 	, Values, 	], [Values, 	, Marker], [	, Marker, 	], [Marker, 	, ‘], [	, ‘, .], [‘, ., ’]]

>> Noun Phrases are: 
[	Dash-dot line, line  	Values, ‘b, ‘w]

>> Named Entities are: 
[('’\tBlue \t‘g’\tGreen \t‘r’\tRed \t‘c’\tCyan \t‘m’\tMagenta \t‘y’\tYellow \t‘k’\tBlack', 'WORK_OF_ART'), ('Marker', 'PERSON')]


============================ Sentence 57 =============================

	Point 	‘,’	Pixel 	‘o’	Circle 	‘v’	Triangle down 	‘^’	Triangle up 	‘>’	Triangle right 	‘<’	Triangle left 	‘*’	Star 	‘+’	Plus 	‘x’	X 	Etc.......	     Prof. Arjun V. Bala 


>> Tokens are: 
[	, Point, 	, ‘, ,, ’, 	, Pixel, 	, ‘, o, ’, 	, Circle, 	, ‘, v, ’, 	, Triangle, 	, ‘, ^, ’, 	, Triangle, 	, ‘, >, ’, 	, Triangle, right, 	, ‘, <, ’, 	, Triangle, left, 	, ‘, *, ’, 	, Star, 	, ‘, +, ’, 	, Plus, 	, ‘, x, ’, 	, X, 	, Etc, ......., 	     , Prof., Arjun, V., Bala] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('Point', 'PROPN'), ('\t', 'SPACE'), ('‘', 'PUNCT'), (',', 'PUNCT'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('Pixel', 'PROPN'), ('\t', 'SPACE'), ('‘', 'PUNCT'), ('o', 'NOUN'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('Circle', 'PROPN'), ('\t', 'SPACE'), ('‘', 'PUNCT'), ('v', 'NOUN'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('Triangle', 'PROPN'), ('\t', 'SPACE'), ('‘', 'PUNCT'), ('^', 'PRON'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('Triangle', 'PROPN'), ('\t', 'SPACE'), ('‘', 'PUNCT'), ('>', 'PRON'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('Triangle', 'PROPN'), ('right', 'ADV'), ('\t', 'SPACE'), ('‘', 'PUNCT'), ('<', 'X'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('Triangle', 'PROPN'), ('left', 'VERB'), ('\t', 'SPACE'), ('‘', 'PUNCT'), ('*', 'PUNCT'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('Star', 'PROPN'), ('\t', 'SPACE'), ('‘', 'PUNCT'), ('+', 'NOUN'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('Plus', 'CCONJ'), ('\t', 'SPACE'), ('‘', 'PUNCT'), ('x', 'SYM'), ('’', 'PUNCT'), ('\t', 'SPACE'), ('X', 'NOUN'), ('\t', 'SPACE'), ('Etc', 'PROPN'), ('.......', 'PUNCT'), ('\t     ', 'SPACE'), ('Prof.', 'PROPN'), ('Arjun', 'PROPN'), ('V.', 'PROPN'), ('Bala', 'PROPN')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('Point', 'compound'), ('\t', 'nsubj'), ('‘', 'punct'), (',', 'punct'), ('’', 'punct'), ('\t', 'compound'), ('Pixel', 'compound'), ('\t', 'appos'), ('‘', 'punct'), ('o', 'nmod'), ('’', 'punct'), ('\t', 'compound'), ('Circle', 'compound'), ('\t', 'appos'), ('‘', 'punct'), ('v', 'appos'), ('’', 'punct'), ('\t', 'compound'), ('Triangle', 'appos'), ('\t', 'appos'), ('‘', 'punct'), ('^', 'punct'), ('’', 'punct'), ('\t', 'compound'), ('Triangle', 'appos'), ('\t', 'appos'), ('‘', 'punct'), ('>', 'nmod'), ('’', 'punct'), ('\t', 'compound'), ('Triangle', 'appos'), ('right', 'compound'), ('\t', 'appos'), ('‘', 'punct'), ('<', 'punct'), ('’', 'punct'), ('\t', 'compound'), ('Triangle', 'nsubj'), ('left', 'ROOT'), ('\t', 'dobj'), ('‘', 'punct'), ('*', 'punct'), ('’', 'punct'), ('\t', 'compound'), ('Star', 'compound'), ('\t', 'nmod'), ('‘', 'punct'), ('+', 'appos'), ('’', 'punct'), ('\t', 'appos'), ('Plus', 'cc'), ('\t', 'conj'), ('‘', 'punct'), ('x', 'punct'), ('’', 'punct'), ('\t', 'compound'), ('X', 'compound'), ('\t', 'nmod'), ('Etc', 'nmod'), ('.......', 'punct'), ('\t     ', 'compound'), ('Prof.', 'compound'), ('Arjun', 'compound'), ('V.', 'compound'), ('Bala', 'dobj')]

>> Bigrams: 
[[	, Point], [Point, 	], [	, ‘], [‘, ,], [,, ’], [’, 	], [	, Pixel], [Pixel, 	], [	, ‘], [‘, o], [o, ’], [’, 	], [	, Circle], [Circle, 	], [	, ‘], [‘, v], [v, ’], [’, 	], [	, Triangle], [Triangle, 	], [	, ‘], [‘, ^], [^, ’], [’, 	], [	, Triangle], [Triangle, 	], [	, ‘], [‘, >], [>, ’], [’, 	], [	, Triangle], [Triangle, right], [right, 	], [	, ‘], [‘, <], [<, ’], [’, 	], [	, Triangle], [Triangle, left], [left, 	], [	, ‘], [‘, *], [*, ’], [’, 	], [	, Star], [Star, 	], [	, ‘], [‘, +], [+, ’], [’, 	], [	, Plus], [Plus, 	], [	, ‘], [‘, x], [x, ’], [’, 	], [	, X], [X, 	], [	, Etc], [Etc, .......], [......., 	     ], [	     , Prof.], [Prof., Arjun], [Arjun, V.], [V., Bala]]

>> Trigrams: 
[[	, Point, 	], [Point, 	, ‘], [	, ‘, ,], [‘, ,, ’], [,, ’, 	], [’, 	, Pixel], [	, Pixel, 	], [Pixel, 	, ‘], [	, ‘, o], [‘, o, ’], [o, ’, 	], [’, 	, Circle], [	, Circle, 	], [Circle, 	, ‘], [	, ‘, v], [‘, v, ’], [v, ’, 	], [’, 	, Triangle], [	, Triangle, 	], [Triangle, 	, ‘], [	, ‘, ^], [‘, ^, ’], [^, ’, 	], [’, 	, Triangle], [	, Triangle, 	], [Triangle, 	, ‘], [	, ‘, >], [‘, >, ’], [>, ’, 	], [’, 	, Triangle], [	, Triangle, right], [Triangle, right, 	], [right, 	, ‘], [	, ‘, <], [‘, <, ’], [<, ’, 	], [’, 	, Triangle], [	, Triangle, left], [Triangle, left, 	], [left, 	, ‘], [	, ‘, *], [‘, *, ’], [*, ’, 	], [’, 	, Star], [	, Star, 	], [Star, 	, ‘], [	, ‘, +], [‘, +, ’], [+, ’, 	], [’, 	, Plus], [	, Plus, 	], [Plus, 	, ‘], [	, ‘, x], [‘, x, ’], [x, ’, 	], [’, 	, X], [	, X, 	], [X, 	, Etc], [	, Etc, .......], [Etc, ......., 	     ], [......., 	     , Prof.], [	     , Prof., Arjun], [Prof., Arjun, V.], [Arjun, V., Bala]]

>> Noun Phrases are: 
[‘v, ’	Triangle, ‘^’	Triangle, >’	Triangle, 	Triangle, ‘+]

>> Named Entities are: 
[('Arjun V. Bala', 'PERSON')]


============================ Sentence 58 =============================

#3150713 (PDS)      Unit 04 


>> Tokens are: 
[#, 3150713, (, PDS, ),   , ,   , Unit, 04] 

>> PoS Tags are: 
[('#', 'NOUN'), ('3150713', 'NUM'), ('(', 'PUNCT'), ('PDS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('04', 'NUM')] 

>> Dependency Tags are: 
[('#', 'nmod'), ('3150713', 'nummod'), ('(', 'punct'), ('PDS', 'appos'), (')', 'punct'), ('  ', 'nsubj'), ('\uf077', 'ROOT'), ('  ', 'punct'), ('Unit', 'npadvmod'), ('04', 'nummod')]

>> Bigrams: 
[[#, 3150713], [3150713, (], [(, PDS], [PDS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 04]]

>> Trigrams: 
[[#, 3150713, (], [3150713, (, PDS], [(, PDS, )], [PDS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 04]]

>> Noun Phrases are: 
[(PDS]

>> Named Entities are: 
[('PDS', 'ORG'), ('04', 'CARDINAL')]


============================ Sentence 59 =============================

– Data Visualization ‹#›   


>> Tokens are: 
[–, Data, Visualization, ‹#›,  ] 

>> PoS Tags are: 
[('–', 'PUNCT'), ('Data', 'PROPN'), ('Visualization', 'PROPN'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('–', 'punct'), ('Data', 'compound'), ('Visualization', 'ROOT'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[–, Data], [Data, Visualization], [Visualization, ‹#›], [‹#›,  ]]

>> Trigrams: 
[[–, Data, Visualization], [Data, Visualization, ‹#›], [Visualization, ‹#›,  ]]

>> Noun Phrases are: 
[– Data Visualization]

>> Named Entities are: 
[('Data Visualization ‹#›', 'ORG')]


============================ Sentence 60 =============================

Plot – Labels, Annotation and Legends To fully document our graph, we have to resort the labels, annotation and legends. 


>> Tokens are: 
[Plot, –, Labels, ,, Annotation, Legends, fully, document, graph, ,, resort, labels, ,, annotation, legends, .] 

>> PoS Tags are: 
[('Plot', 'NOUN'), ('–', 'PUNCT'), ('Labels', 'PROPN'), (',', 'PUNCT'), ('Annotation', 'PROPN'), ('Legends', 'PROPN'), ('fully', 'ADV'), ('document', 'VERB'), ('graph', 'NOUN'), (',', 'PUNCT'), ('resort', 'VERB'), ('labels', 'NOUN'), (',', 'PUNCT'), ('annotation', 'NOUN'), ('legends', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Plot', 'nmod'), ('–', 'punct'), ('Labels', 'nsubj'), (',', 'punct'), ('Annotation', 'conj'), ('Legends', 'conj'), ('fully', 'advmod'), ('document', 'ccomp'), ('graph', 'dobj'), (',', 'punct'), ('resort', 'xcomp'), ('labels', 'dobj'), (',', 'punct'), ('annotation', 'conj'), ('legends', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[Plot, –], [–, Labels], [Labels, ,], [,, Annotation], [Annotation, Legends], [Legends, fully], [fully, document], [document, graph], [graph, ,], [,, resort], [resort, labels], [labels, ,], [,, annotation], [annotation, legends], [legends, .]]

>> Trigrams: 
[[Plot, –, Labels], [–, Labels, ,], [Labels, ,, Annotation], [,, Annotation, Legends], [Annotation, Legends, fully], [Legends, fully, document], [fully, document, graph], [document, graph, ,], [graph, ,, resort], [,, resort, labels], [resort, labels, ,], [labels, ,, annotation], [,, annotation, legends], [annotation, legends, .]]

>> Noun Phrases are: 
[Plot – Labels, Annotation, Legends, our graph, we, the labels, annotation, legends]

>> Named Entities are: 
[('Plot', 'ORG'), ('Labels', 'PERSON')]


============================ Sentence 61 =============================

Each of this elements has a different purpose as follows, Label : provides identification of a particular data element or grouping, it will make easy for viewer to know the name or kind of data illustrated. 


>> Tokens are: 
[elements, different, purpose, follows, ,, Label, :, provides, identification, particular, data, element, grouping, ,, easy, viewer, know, kind, data, illustrated, .] 

>> PoS Tags are: 
[('elements', 'NOUN'), ('different', 'ADJ'), ('purpose', 'NOUN'), ('follows', 'VERB'), (',', 'PUNCT'), ('Label', 'PROPN'), (':', 'PUNCT'), ('provides', 'VERB'), ('identification', 'NOUN'), ('particular', 'ADJ'), ('data', 'NOUN'), ('element', 'NOUN'), ('grouping', 'NOUN'), (',', 'PUNCT'), ('easy', 'ADJ'), ('viewer', 'NOUN'), ('know', 'VERB'), ('kind', 'NOUN'), ('data', 'NOUN'), ('illustrated', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('elements', 'pobj'), ('different', 'amod'), ('purpose', 'dobj'), ('follows', 'advcl'), (',', 'punct'), ('Label', 'npadvmod'), (':', 'punct'), ('provides', 'ccomp'), ('identification', 'dobj'), ('particular', 'amod'), ('data', 'compound'), ('element', 'pobj'), ('grouping', 'conj'), (',', 'punct'), ('easy', 'acomp'), ('viewer', 'nsubj'), ('know', 'advcl'), ('kind', 'advmod'), ('data', 'conj'), ('illustrated', 'ccomp'), ('.', 'punct')]

>> Bigrams: 
[[elements, different], [different, purpose], [purpose, follows], [follows, ,], [,, Label], [Label, :], [:, provides], [provides, identification], [identification, particular], [particular, data], [data, element], [element, grouping], [grouping, ,], [,, easy], [easy, viewer], [viewer, know], [know, kind], [kind, data], [data, illustrated], [illustrated, .]]

>> Trigrams: 
[[elements, different, purpose], [different, purpose, follows], [purpose, follows, ,], [follows, ,, Label], [,, Label, :], [Label, :, provides], [:, provides, identification], [provides, identification, particular], [identification, particular, data], [particular, data, element], [data, element, grouping], [element, grouping, ,], [grouping, ,, easy], [,, easy, viewer], [easy, viewer, know], [viewer, know, kind], [know, kind, data], [kind, data, illustrated], [data, illustrated, .]]

>> Noun Phrases are: 
[this elements, a different purpose, identification, a particular data element, grouping, it, viewer, the name, kind of data]

>> Named Entities are: 
[('Label', 'PERSON')]


============================ Sentence 62 =============================

Annotation : augments the information the viewer can immediately see about the data with notes, sources or other useful information. 


>> Tokens are: 
[Annotation, :, augments, information, viewer, immediately, data, notes, ,, sources, useful, information, .] 

>> PoS Tags are: 
[('Annotation', 'NOUN'), (':', 'PUNCT'), ('augments', 'VERB'), ('information', 'NOUN'), ('viewer', 'NOUN'), ('immediately', 'ADV'), ('data', 'NOUN'), ('notes', 'NOUN'), (',', 'PUNCT'), ('sources', 'NOUN'), ('useful', 'ADJ'), ('information', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Annotation', 'nsubj'), (':', 'punct'), ('augments', 'ROOT'), ('information', 'dobj'), ('viewer', 'nsubj'), ('immediately', 'advmod'), ('data', 'pobj'), ('notes', 'pobj'), (',', 'punct'), ('sources', 'conj'), ('useful', 'amod'), ('information', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[Annotation, :], [:, augments], [augments, information], [information, viewer], [viewer, immediately], [immediately, data], [data, notes], [notes, ,], [,, sources], [sources, useful], [useful, information], [information, .]]

>> Trigrams: 
[[Annotation, :, augments], [:, augments, information], [augments, information, viewer], [information, viewer, immediately], [viewer, immediately, data], [immediately, data, notes], [data, notes, ,], [notes, ,, sources], [,, sources, useful], [sources, useful, information], [useful, information, .]]

>> Noun Phrases are: 
[Annotation, the information, the viewer, the data, notes, sources, other useful information]

>> Named Entities are: 
[]


============================ Sentence 63 =============================

Legend : presents a listing of the data groups within the graph and often provides cues ( such as line type or color) to identify the line with the data. 


>> Tokens are: 
[Legend, :, presents, listing, data, groups, graph, provides, cues, (, line, type, color, ), identify, line, data, .] 

>> PoS Tags are: 
[('Legend', 'NOUN'), (':', 'PUNCT'), ('presents', 'VERB'), ('listing', 'NOUN'), ('data', 'NOUN'), ('groups', 'NOUN'), ('graph', 'NOUN'), ('provides', 'VERB'), ('cues', 'NOUN'), ('(', 'PUNCT'), ('line', 'NOUN'), ('type', 'NOUN'), ('color', 'NOUN'), (')', 'PUNCT'), ('identify', 'VERB'), ('line', 'NOUN'), ('data', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Legend', 'nsubj'), (':', 'punct'), ('presents', 'ROOT'), ('listing', 'dobj'), ('data', 'compound'), ('groups', 'pobj'), ('graph', 'pobj'), ('provides', 'conj'), ('cues', 'dobj'), ('(', 'punct'), ('line', 'compound'), ('type', 'pobj'), ('color', 'conj'), (')', 'punct'), ('identify', 'advcl'), ('line', 'dobj'), ('data', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Legend, :], [:, presents], [presents, listing], [listing, data], [data, groups], [groups, graph], [graph, provides], [provides, cues], [cues, (], [(, line], [line, type], [type, color], [color, )], [), identify], [identify, line], [line, data], [data, .]]

>> Trigrams: 
[[Legend, :, presents], [:, presents, listing], [presents, listing, data], [listing, data, groups], [data, groups, graph], [groups, graph, provides], [graph, provides, cues], [provides, cues, (], [cues, (, line], [(, line, type], [line, type, color], [type, color, )], [color, ), identify], [), identify, line], [identify, line, data], [line, data, .]]

>> Noun Phrases are: 
[Legend, a listing, the data groups, the graph, cues, line type, color, the line, the data]

>> Named Entities are: 
[]


============================ Sentence 64 =============================

 Y Label X Label Annotation Legend    Prof. Arjun V. Bala 


>> Tokens are: 
[ , Y, Label, X, Label, Annotation, Legend,    , Prof., Arjun, V., Bala] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('Y', 'PROPN'), ('Label', 'PROPN'), ('X', 'PROPN'), ('Label', 'PROPN'), ('Annotation', 'PROPN'), ('Legend', 'PROPN'), ('   ', 'SPACE'), ('Prof.', 'PROPN'), ('Arjun', 'PROPN'), ('V.', 'PROPN'), ('Bala', 'PROPN')] 

>> Dependency Tags are: 
[(' ', 'dep'), ('Y', 'compound'), ('Label', 'compound'), ('X', 'compound'), ('Label', 'compound'), ('Annotation', 'appos'), ('Legend', 'compound'), ('   ', 'nummod'), ('Prof.', 'compound'), ('Arjun', 'compound'), ('V.', 'compound'), ('Bala', 'ROOT')]

>> Bigrams: 
[[ , Y], [Y, Label], [Label, X], [X, Label], [Label, Annotation], [Annotation, Legend], [Legend,    ], [   , Prof.], [Prof., Arjun], [Arjun, V.], [V., Bala]]

>> Trigrams: 
[[ , Y, Label], [Y, Label, X], [Label, X, Label], [X, Label, Annotation], [Label, Annotation, Legend], [Annotation, Legend,    ], [Legend,    , Prof.], [   , Prof., Arjun], [Prof., Arjun, V.], [Arjun, V., Bala]]

>> Noun Phrases are: 
[Y Label X Label Annotation]

>> Named Entities are: 
[('Arjun V. Bala', 'PERSON')]


============================ Sentence 65 =============================

#3150713 (PDS)      Unit 04 


>> Tokens are: 
[#, 3150713, (, PDS, ),   , ,   , Unit, 04] 

>> PoS Tags are: 
[('#', 'NOUN'), ('3150713', 'NUM'), ('(', 'PUNCT'), ('PDS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('04', 'NUM')] 

>> Dependency Tags are: 
[('#', 'nmod'), ('3150713', 'nummod'), ('(', 'punct'), ('PDS', 'appos'), (')', 'punct'), ('  ', 'nsubj'), ('\uf077', 'ROOT'), ('  ', 'punct'), ('Unit', 'npadvmod'), ('04', 'nummod')]

>> Bigrams: 
[[#, 3150713], [3150713, (], [(, PDS], [PDS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 04]]

>> Trigrams: 
[[#, 3150713, (], [3150713, (, PDS], [(, PDS, )], [PDS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 04]]

>> Noun Phrases are: 
[(PDS]

>> Named Entities are: 
[('PDS', 'ORG'), ('04', 'CARDINAL')]


============================ Sentence 66 =============================

– Data Visualization ‹#›   


>> Tokens are: 
[–, Data, Visualization, ‹#›,  ] 

>> PoS Tags are: 
[('–', 'PUNCT'), ('Data', 'PROPN'), ('Visualization', 'PROPN'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('–', 'punct'), ('Data', 'compound'), ('Visualization', 'ROOT'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[–, Data], [Data, Visualization], [Visualization, ‹#›], [‹#›,  ]]

>> Trigrams: 
[[–, Data, Visualization], [Data, Visualization, ‹#›], [Visualization, ‹#›,  ]]

>> Noun Phrases are: 
[– Data Visualization]

>> Named Entities are: 
[('Data Visualization ‹#›', 'ORG')]


============================ Sentence 67 =============================

Plot – Labels, Annotation and Legends (Example) import matplotlib.pyplot as plt %matplotlib inline values1 = 


>> Tokens are: 
[Plot, –, Labels, ,, Annotation, Legends, (, Example, ), import, matplotlib.pyplot, plt, %, matplotlib, inline, values1, =] 

>> PoS Tags are: 
[('Plot', 'NOUN'), ('–', 'PUNCT'), ('Labels', 'PROPN'), (',', 'PUNCT'), ('Annotation', 'PROPN'), ('Legends', 'PROPN'), ('(', 'PUNCT'), ('Example', 'NOUN'), (')', 'PUNCT'), ('import', 'NOUN'), ('matplotlib.pyplot', 'NOUN'), ('plt', 'NOUN'), ('%', 'NOUN'), ('matplotlib', 'ADJ'), ('inline', 'ADJ'), ('values1', 'NOUN'), ('=', 'PUNCT')] 

>> Dependency Tags are: 
[('Plot', 'nmod'), ('–', 'punct'), ('Labels', 'ROOT'), (',', 'punct'), ('Annotation', 'conj'), ('Legends', 'conj'), ('(', 'punct'), ('Example', 'parataxis'), (')', 'punct'), ('import', 'compound'), ('matplotlib.pyplot', 'appos'), ('plt', 'nmod'), ('%', 'nmod'), ('matplotlib', 'amod'), ('inline', 'amod'), ('values1', 'pobj'), ('=', 'punct')]

>> Bigrams: 
[[Plot, –], [–, Labels], [Labels, ,], [,, Annotation], [Annotation, Legends], [Legends, (], [(, Example], [Example, )], [), import], [import, matplotlib.pyplot], [matplotlib.pyplot, plt], [plt, %], [%, matplotlib], [matplotlib, inline], [inline, values1], [values1, =]]

>> Trigrams: 
[[Plot, –, Labels], [–, Labels, ,], [Labels, ,, Annotation], [,, Annotation, Legends], [Annotation, Legends, (], [Legends, (, Example], [(, Example, )], [Example, ), import], [), import, matplotlib.pyplot], [import, matplotlib.pyplot, plt], [matplotlib.pyplot, plt, %], [plt, %, matplotlib], [%, matplotlib, inline], [matplotlib, inline, values1], [inline, values1, =]]

>> Noun Phrases are: 
[Plot – Labels, Annotation, Legends, import matplotlib.pyplot, plt %matplotlib inline values1]

>> Named Entities are: 
[('Plot', 'ORG'), ('Labels', 'PERSON')]


============================ Sentence 68 =============================

[5,8,9,4,1,6,7,2,3,8] values2 = 


>> Tokens are: 
[[, 5,8,9,4,1,6,7,2,3,8, ], values2, =] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('5,8,9,4,1,6,7,2,3,8', 'NUM'), (']', 'PUNCT'), ('values2', 'NOUN'), ('=', 'PUNCT')] 

>> Dependency Tags are: 
[('[', 'dep'), ('5,8,9,4,1,6,7,2,3,8', 'dep'), (']', 'punct'), ('values2', 'ROOT'), ('=', 'punct')]

>> Bigrams: 
[[[, 5,8,9,4,1,6,7,2,3,8], [5,8,9,4,1,6,7,2,3,8, ]], [], values2], [values2, =]]

>> Trigrams: 
[[[, 5,8,9,4,1,6,7,2,3,8, ]], [5,8,9,4,1,6,7,2,3,8, ], values2], [], values2, =]]

>> Noun Phrases are: 
[[5,8,9,4,1,6,7,2,3,8] values2]

>> Named Entities are: 
[('5,8,9,4,1,6,7,2,3,8', 'CARDINAL')]


============================ Sentence 69 =============================

[8,3,2,7,6,1,4,9,8,5] plt.plot(range(1,11),values1) plt.plot(range(1,11),values2) 


>> Tokens are: 
[[, 8,3,2,7,6,1,4,9,8,5, ], plt.plot(range(1,11),values1, ), plt.plot(range(1,11),values2, )] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('8,3,2,7,6,1,4,9,8,5', 'NUM'), (']', 'PUNCT'), ('plt.plot(range(1,11),values1', 'NOUN'), (')', 'PUNCT'), ('plt.plot(range(1,11),values2', 'PROPN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('[', 'punct'), ('8,3,2,7,6,1,4,9,8,5', 'dep'), (']', 'punct'), ('plt.plot(range(1,11),values1', 'dep'), (')', 'punct'), ('plt.plot(range(1,11),values2', 'ROOT'), (')', 'punct')]

>> Bigrams: 
[[[, 8,3,2,7,6,1,4,9,8,5], [8,3,2,7,6,1,4,9,8,5, ]], [], plt.plot(range(1,11),values1], [plt.plot(range(1,11),values1, )], [), plt.plot(range(1,11),values2], [plt.plot(range(1,11),values2, )]]

>> Trigrams: 
[[[, 8,3,2,7,6,1,4,9,8,5, ]], [8,3,2,7,6,1,4,9,8,5, ], plt.plot(range(1,11),values1], [], plt.plot(range(1,11),values1, )], [plt.plot(range(1,11),values1, ), plt.plot(range(1,11),values2], [), plt.plot(range(1,11),values2, )]]

>> Noun Phrases are: 
[[8,3,2,7,6,1,4,9,8,5] plt.plot(range(1,11),values1) plt.plot(range(1,11),values2]

>> Named Entities are: 
[]


============================ Sentence 70 =============================

plt.xlabel('Roll 


>> Tokens are: 
[plt.xlabel('Roll] 

>> PoS Tags are: 
[("plt.xlabel('Roll", 'NOUN')] 

>> Dependency Tags are: 
[("plt.xlabel('Roll", 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[plt.xlabel('Roll]

>> Named Entities are: 
[]


============================ Sentence 71 =============================

No') plt.ylabel('CPI') plt.annotate(xy=[5,1],s='Lowest CPI') plt.legend(['CX','CY'],loc=4) 


>> Tokens are: 
[', ), plt.ylabel('CPI, ', ), plt.annotate(xy=[5,1],s='Lowest, CPI, ', ), plt.legend(['CX','CY'],loc=4, )] 

>> PoS Tags are: 
[("'", 'PUNCT'), (')', 'PUNCT'), ("plt.ylabel('CPI", 'NOUN'), ("'", 'PART'), (')', 'PUNCT'), ("plt.annotate(xy=[5,1],s='Lowest", 'X'), ('CPI', 'PROPN'), ("'", 'PART'), (')', 'PUNCT'), ("plt.legend(['CX','CY'],loc=4", 'PROPN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[("'", 'punct'), (')', 'punct'), ("plt.ylabel('CPI", 'nsubj'), ("'", 'punct'), (')', 'punct'), ("plt.annotate(xy=[5,1],s='Lowest", 'ROOT'), ('CPI', 'dobj'), ("'", 'case'), (')', 'punct'), ("plt.legend(['CX','CY'],loc=4", 'dep'), (')', 'punct')]

>> Bigrams: 
[[', )], [), plt.ylabel('CPI], [plt.ylabel('CPI, '], [', )], [), plt.annotate(xy=[5,1],s='Lowest], [plt.annotate(xy=[5,1],s='Lowest, CPI], [CPI, '], [', )], [), plt.legend(['CX','CY'],loc=4], [plt.legend(['CX','CY'],loc=4, )]]

>> Trigrams: 
[[', ), plt.ylabel('CPI], [), plt.ylabel('CPI, '], [plt.ylabel('CPI, ', )], [', ), plt.annotate(xy=[5,1],s='Lowest], [), plt.annotate(xy=[5,1],s='Lowest, CPI], [plt.annotate(xy=[5,1],s='Lowest, CPI, '], [CPI, ', )], [', ), plt.legend(['CX','CY'],loc=4], [), plt.legend(['CX','CY'],loc=4, )]]

>> Noun Phrases are: 
[No') plt.ylabel('CPI, CPI]

>> Named Entities are: 
[]


============================ Sentence 72 =============================

plt.show() 1 2 3 4 5 6 7 8 9 10 11 plotDemo1.py     Prof. Arjun V. Bala 


>> Tokens are: 
[plt.show, (, ), 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, plotDemo1.py,     , Prof., Arjun, V., Bala] 

>> PoS Tags are: 
[('plt.show', 'PROPN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('1', 'NUM'), ('2', 'NUM'), ('3', 'NUM'), ('4', 'NUM'), ('5', 'NUM'), ('6', 'NUM'), ('7', 'NUM'), ('8', 'NUM'), ('9', 'NUM'), ('10', 'NUM'), ('11', 'NUM'), ('plotDemo1.py', 'NUM'), ('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Arjun', 'PROPN'), ('V.', 'PROPN'), ('Bala', 'PROPN')] 

>> Dependency Tags are: 
[('plt.show', 'ROOT'), ('(', 'punct'), (')', 'punct'), ('1', 'compound'), ('2', 'quantmod'), ('3', 'appos'), ('4', 'appos'), ('5', 'appos'), ('6', 'appos'), ('7', 'appos'), ('8', 'appos'), ('9', 'appos'), ('10', 'nummod'), ('11', 'nummod'), ('plotDemo1.py', 'advmod'), ('    ', 'compound'), ('Prof.', 'compound'), ('Arjun', 'compound'), ('V.', 'compound'), ('Bala', 'npadvmod')]

>> Bigrams: 
[[plt.show, (], [(, )], [), 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, plotDemo1.py], [plotDemo1.py,     ], [    , Prof.], [Prof., Arjun], [Arjun, V.], [V., Bala]]

>> Trigrams: 
[[plt.show, (, )], [(, ), 1], [), 1, 2], [1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6], [5, 6, 7], [6, 7, 8], [7, 8, 9], [8, 9, 10], [9, 10, 11], [10, 11, plotDemo1.py], [11, plotDemo1.py,     ], [plotDemo1.py,     , Prof.], [    , Prof., Arjun], [Prof., Arjun, V.], [Arjun, V., Bala]]

>> Noun Phrases are: 
[plt.show]

>> Named Entities are: 
[('Arjun V. Bala', 'PERSON')]


============================ Sentence 73 =============================

#3150713 (PDS)      Unit 04 


>> Tokens are: 
[#, 3150713, (, PDS, ),   , ,   , Unit, 04] 

>> PoS Tags are: 
[('#', 'NOUN'), ('3150713', 'NUM'), ('(', 'PUNCT'), ('PDS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('04', 'NUM')] 

>> Dependency Tags are: 
[('#', 'nmod'), ('3150713', 'nummod'), ('(', 'punct'), ('PDS', 'appos'), (')', 'punct'), ('  ', 'nsubj'), ('\uf077', 'ROOT'), ('  ', 'punct'), ('Unit', 'npadvmod'), ('04', 'nummod')]

>> Bigrams: 
[[#, 3150713], [3150713, (], [(, PDS], [PDS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 04]]

>> Trigrams: 
[[#, 3150713, (], [3150713, (, PDS], [(, PDS, )], [PDS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 04]]

>> Noun Phrases are: 
[(PDS]

>> Named Entities are: 
[('PDS', 'ORG'), ('04', 'CARDINAL')]


============================ Sentence 74 =============================

– Data Visualization ‹#›   


>> Tokens are: 
[–, Data, Visualization, ‹#›,  ] 

>> PoS Tags are: 
[('–', 'PUNCT'), ('Data', 'PROPN'), ('Visualization', 'PROPN'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('–', 'punct'), ('Data', 'compound'), ('Visualization', 'ROOT'), ('‹#›', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[–, Data], [Data, Visualization], [Visualization, ‹#›], [‹#›,  ]]

>> Trigrams: 
[[–, Data, Visualization], [Data, Visualization, ‹#›], [Visualization, ‹#›,  ]]

>> Noun Phrases are: 
[– Data Visualization]

>> Named Entities are: 
[('Data Visualization', 'ORG')]


============================ Sentence 75 =============================

Choosing the Right Graph 


>> Tokens are: 
[Choosing, Right, Graph] 

>> PoS Tags are: 
[('Choosing', 'VERB'), ('Right', 'PROPN'), ('Graph', 'PROPN')] 

>> Dependency Tags are: 
[('Choosing', 'ROOT'), ('Right', 'compound'), ('Graph', 'dobj')]

>> Bigrams: 
[[Choosing, Right], [Right, Graph]]

>> Trigrams: 
[[Choosing, Right, Graph]]

>> Noun Phrases are: 
[the Right Graph]

>> Named Entities are: 
[]


============================ Sentence 76 =============================

The kind of graph we choose determines how people view the associated data, so choosing the right graph from the outset is important. 


>> Tokens are: 
[kind, graph, choose, determines, people, view, associated, data, ,, choosing, right, graph, outset, important, .] 

>> PoS Tags are: 
[('kind', 'NOUN'), ('graph', 'NOUN'), ('choose', 'VERB'), ('determines', 'VERB'), ('people', 'NOUN'), ('view', 'VERB'), ('associated', 'VERB'), ('data', 'NOUN'), (',', 'PUNCT'), ('choosing', 'VERB'), ('right', 'ADJ'), ('graph', 'NOUN'), ('outset', 'NOUN'), ('important', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('kind', 'nsubj'), ('graph', 'pobj'), ('choose', 'relcl'), ('determines', 'ROOT'), ('people', 'nsubj'), ('view', 'ccomp'), ('associated', 'amod'), ('data', 'dobj'), (',', 'punct'), ('choosing', 'advcl'), ('right', 'amod'), ('graph', 'dobj'), ('outset', 'pobj'), ('important', 'acomp'), ('.', 'punct')]

>> Bigrams: 
[[kind, graph], [graph, choose], [choose, determines], [determines, people], [people, view], [view, associated], [associated, data], [data, ,], [,, choosing], [choosing, right], [right, graph], [graph, outset], [outset, important], [important, .]]

>> Trigrams: 
[[kind, graph, choose], [graph, choose, determines], [choose, determines, people], [determines, people, view], [people, view, associated], [view, associated, data], [associated, data, ,], [data, ,, choosing], [,, choosing, right], [choosing, right, graph], [right, graph, outset], [graph, outset, important], [outset, important, .]]

>> Noun Phrases are: 
[The kind, graph, we, people, the associated data, the right graph, the outset]

>> Named Entities are: 
[]


============================ Sentence 77 =============================

For example,  if we want o show how various data elements contribute towards a whole, we should use pie chart. 


>> Tokens are: 
[example, ,,  , want, o, data, elements, contribute, ,, use, pie, chart, .] 

>> PoS Tags are: 
[('example', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('want', 'VERB'), ('o', 'NOUN'), ('data', 'NOUN'), ('elements', 'NOUN'), ('contribute', 'VERB'), (',', 'PUNCT'), ('use', 'VERB'), ('pie', 'NOUN'), ('chart', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('example', 'pobj'), (',', 'punct'), (' ', 'nsubj'), ('want', 'advcl'), ('o', 'dobj'), ('data', 'compound'), ('elements', 'nsubj'), ('contribute', 'ccomp'), (',', 'punct'), ('use', 'ccomp'), ('pie', 'compound'), ('chart', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[example, ,], [,,  ], [ , want], [want, o], [o, data], [data, elements], [elements, contribute], [contribute, ,], [,, use], [use, pie], [pie, chart], [chart, .]]

>> Trigrams: 
[[example, ,,  ], [,,  , want], [ , want, o], [want, o, data], [o, data, elements], [data, elements, contribute], [elements, contribute, ,], [contribute, ,, use], [,, use, pie], [use, pie, chart], [pie, chart, .]]

>> Noun Phrases are: 
[example, we, o, various data elements, a whole, we, pie chart]

>> Named Entities are: 
[]


============================ Sentence 78 =============================

If we want to compare data elements, we should use bar chart. 


>> Tokens are: 
[want, compare, data, elements, ,, use, bar, chart, .] 

>> PoS Tags are: 
[('want', 'VERB'), ('compare', 'VERB'), ('data', 'NOUN'), ('elements', 'NOUN'), (',', 'PUNCT'), ('use', 'VERB'), ('bar', 'NOUN'), ('chart', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('want', 'advcl'), ('compare', 'xcomp'), ('data', 'compound'), ('elements', 'dobj'), (',', 'punct'), ('use', 'ROOT'), ('bar', 'compound'), ('chart', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[want, compare], [compare, data], [data, elements], [elements, ,], [,, use], [use, bar], [bar, chart], [chart, .]]

>> Trigrams: 
[[want, compare, data], [compare, data, elements], [data, elements, ,], [elements, ,, use], [,, use, bar], [use, bar, chart], [bar, chart, .]]

>> Noun Phrases are: 
[we, data elements, we, bar chart]

>> Named Entities are: 
[]


============================ Sentence 79 =============================

If we want to show distribution of elements, we should use histograms. 


>> Tokens are: 
[want, distribution, elements, ,, use, histograms, .] 

>> PoS Tags are: 
[('want', 'VERB'), ('distribution', 'NOUN'), ('elements', 'NOUN'), (',', 'PUNCT'), ('use', 'VERB'), ('histograms', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('want', 'advcl'), ('distribution', 'dobj'), ('elements', 'pobj'), (',', 'punct'), ('use', 'ROOT'), ('histograms', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[want, distribution], [distribution, elements], [elements, ,], [,, use], [use, histograms], [histograms, .]]

>> Trigrams: 
[[want, distribution, elements], [distribution, elements, ,], [elements, ,, use], [,, use, histograms], [use, histograms, .]]

>> Noun Phrases are: 
[we, distribution, elements, we, histograms]

>> Named Entities are: 
[]


============================ Sentence 80 =============================

If we want to depict groups in elements, we should use boxplots. 


>> Tokens are: 
[want, depict, groups, elements, ,, use, boxplots, .] 

>> PoS Tags are: 
[('want', 'VERB'), ('depict', 'VERB'), ('groups', 'NOUN'), ('elements', 'NOUN'), (',', 'PUNCT'), ('use', 'VERB'), ('boxplots', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('want', 'advcl'), ('depict', 'xcomp'), ('groups', 'dobj'), ('elements', 'pobj'), (',', 'punct'), ('use', 'ROOT'), ('boxplots', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[want, depict], [depict, groups], [groups, elements], [elements, ,], [,, use], [use, boxplots], [boxplots, .]]

>> Trigrams: 
[[want, depict, groups], [depict, groups, elements], [groups, elements, ,], [elements, ,, use], [,, use, boxplots], [use, boxplots, .]]

>> Noun Phrases are: 
[we, groups, elements, we, boxplots]

>> Named Entities are: 
[]


============================ Sentence 81 =============================

If we want to find patterns in data, we should use scatterplots. 


>> Tokens are: 
[want, find, patterns, data, ,, use, scatterplots, .] 

>> PoS Tags are: 
[('want', 'VERB'), ('find', 'VERB'), ('patterns', 'NOUN'), ('data', 'NOUN'), (',', 'PUNCT'), ('use', 'VERB'), ('scatterplots', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('want', 'advcl'), ('find', 'xcomp'), ('patterns', 'dobj'), ('data', 'pobj'), (',', 'punct'), ('use', 'ROOT'), ('scatterplots', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[want, find], [find, patterns], [patterns, data], [data, ,], [,, use], [use, scatterplots], [scatterplots, .]]

>> Trigrams: 
[[want, find, patterns], [find, patterns, data], [patterns, data, ,], [data, ,, use], [,, use, scatterplots], [use, scatterplots, .]]

>> Noun Phrases are: 
[we, patterns, data, we, scatterplots]

>> Named Entities are: 
[]


============================ Sentence 82 =============================

If we want to display trends over time, we should use line chart. 


>> Tokens are: 
[want, display, trends, time, ,, use, line, chart, .] 

>> PoS Tags are: 
[('want', 'VERB'), ('display', 'VERB'), ('trends', 'NOUN'), ('time', 'NOUN'), (',', 'PUNCT'), ('use', 'VERB'), ('line', 'NOUN'), ('chart', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('want', 'advcl'), ('display', 'xcomp'), ('trends', 'dobj'), ('time', 'pobj'), (',', 'punct'), ('use', 'ROOT'), ('line', 'compound'), ('chart', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[want, display], [display, trends], [trends, time], [time, ,], [,, use], [use, line], [line, chart], [chart, .]]

>> Trigrams: 
[[want, display, trends], [display, trends, time], [trends, time, ,], [time, ,, use], [,, use, line], [use, line, chart], [line, chart, .]]

>> Noun Phrases are: 
[we, trends, time, we, line chart]

>> Named Entities are: 
[]


============================ Sentence 83 =============================

If we want to display geographical data, we should use basemap. 


>> Tokens are: 
[want, display, geographical, data, ,, use, basemap, .] 

>> PoS Tags are: 
[('want', 'VERB'), ('display', 'VERB'), ('geographical', 'ADJ'), ('data', 'NOUN'), (',', 'PUNCT'), ('use', 'VERB'), ('basemap', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('want', 'advcl'), ('display', 'xcomp'), ('geographical', 'amod'), ('data', 'dobj'), (',', 'punct'), ('use', 'ROOT'), ('basemap', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[want, display], [display, geographical], [geographical, data], [data, ,], [,, use], [use, basemap], [basemap, .]]

>> Trigrams: 
[[want, display, geographical], [display, geographical, data], [geographical, data, ,], [data, ,, use], [,, use, basemap], [use, basemap, .]]

>> Noun Phrases are: 
[we, geographical data, we, basemap]

>> Named Entities are: 
[]


============================ Sentence 84 =============================

If we want to display network, we should use networkx. 


>> Tokens are: 
[want, display, network, ,, use, networkx, .] 

>> PoS Tags are: 
[('want', 'VERB'), ('display', 'VERB'), ('network', 'NOUN'), (',', 'PUNCT'), ('use', 'VERB'), ('networkx', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('want', 'advcl'), ('display', 'xcomp'), ('network', 'dobj'), (',', 'punct'), ('use', 'ROOT'), ('networkx', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[want, display], [display, network], [network, ,], [,, use], [use, networkx], [networkx, .]]

>> Trigrams: 
[[want, display, network], [display, network, ,], [network, ,, use], [,, use, networkx], [use, networkx, .]]

>> Noun Phrases are: 
[we, network, we, networkx]

>> Named Entities are: 
[]


============================ Sentence 85 =============================

All the above graphs are there in our syllabus and we are going to cover all the graphs in this Unit. 


>> Tokens are: 
[graphs, syllabus, going, cover, graphs, Unit, .] 

>> PoS Tags are: 
[('graphs', 'NOUN'), ('syllabus', 'NOUN'), ('going', 'VERB'), ('cover', 'VERB'), ('graphs', 'NOUN'), ('Unit', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('graphs', 'nsubj'), ('syllabus', 'pobj'), ('going', 'conj'), ('cover', 'xcomp'), ('graphs', 'dobj'), ('Unit', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[graphs, syllabus], [syllabus, going], [going, cover], [cover, graphs], [graphs, Unit], [Unit, .]]

>> Trigrams: 
[[graphs, syllabus, going], [syllabus, going, cover], [going, cover, graphs], [cover, graphs, Unit], [graphs, Unit, .]]

>> Noun Phrases are: 
[All the above graphs, our syllabus, we, all the graphs, this Unit]

>> Named Entities are: 
[]


============================ Sentence 86 =============================

We are also going to cover some other types of libraries which is not in the syllabus like seaborn, plotly, cufflinks and choropleth maps etc 


>> Tokens are: 
[going, cover, types, libraries, syllabus, like, seaborn, ,, plotly, ,, cufflinks, choropleth, maps, etc] 

>> PoS Tags are: 
[('going', 'VERB'), ('cover', 'VERB'), ('types', 'NOUN'), ('libraries', 'NOUN'), ('syllabus', 'NOUN'), ('like', 'ADP'), ('seaborn', 'VERB'), (',', 'PUNCT'), ('plotly', 'ADV'), (',', 'PUNCT'), ('cufflinks', 'VERB'), ('choropleth', 'NOUN'), ('maps', 'NOUN'), ('etc', 'X')] 

>> Dependency Tags are: 
[('going', 'ROOT'), ('cover', 'xcomp'), ('types', 'dobj'), ('libraries', 'pobj'), ('syllabus', 'pobj'), ('like', 'prep'), ('seaborn', 'pcomp'), (',', 'punct'), ('plotly', 'advmod'), (',', 'punct'), ('cufflinks', 'dep'), ('choropleth', 'conj'), ('maps', 'dobj'), ('etc', 'conj')]

>> Bigrams: 
[[going, cover], [cover, types], [types, libraries], [libraries, syllabus], [syllabus, like], [like, seaborn], [seaborn, ,], [,, plotly], [plotly, ,], [,, cufflinks], [cufflinks, choropleth], [choropleth, maps], [maps, etc]]

>> Trigrams: 
[[going, cover, types], [cover, types, libraries], [types, libraries, syllabus], [libraries, syllabus, like], [syllabus, like, seaborn], [like, seaborn, ,], [seaborn, ,, plotly], [,, plotly, ,], [plotly, ,, cufflinks], [,, cufflinks, choropleth], [cufflinks, choropleth, maps], [choropleth, maps, etc]]

>> Noun Phrases are: 
[We, some other types, libraries, the syllabus, maps]

>> Named Entities are: 
[]


============================ Sentence 87 =============================

..    Prof. Arjun V. Bala 


>> Tokens are: 
[..,    , Prof., Arjun, V., Bala] 

>> PoS Tags are: 
[('..', 'PUNCT'), ('   ', 'SPACE'), ('Prof.', 'PROPN'), ('Arjun', 'PROPN'), ('V.', 'PROPN'), ('Bala', 'PROPN')] 

>> Dependency Tags are: 
[('..', 'punct'), ('   ', 'ROOT'), ('Prof.', 'compound'), ('Arjun', 'compound'), ('V.', 'compound'), ('Bala', 'dative')]

>> Bigrams: 
[[..,    ], [   , Prof.], [Prof., Arjun], [Arjun, V.], [V., Bala]]

>> Trigrams: 
[[..,    , Prof.], [   , Prof., Arjun], [Prof., Arjun, V.], [Arjun, V., Bala]]

>> Noun Phrases are: 
[Prof. Arjun V. Bala]

>> Named Entities are: 
[('Arjun V. Bala', 'PERSON')]


============================ Sentence 88 =============================

#3150713 (PDS)      Unit 04 


>> Tokens are: 
[#, 3150713, (, PDS, ),   , ,   , Unit, 04] 

>> PoS Tags are: 
[('#', 'NOUN'), ('3150713', 'NUM'), ('(', 'PUNCT'), ('PDS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('04', 'NUM')] 

>> Dependency Tags are: 
[('#', 'nmod'), ('3150713', 'nummod'), ('(', 'punct'), ('PDS', 'appos'), (')', 'punct'), ('  ', 'nsubj'), ('\uf077', 'ROOT'), ('  ', 'punct'), ('Unit', 'npadvmod'), ('04', 'nummod')]

>> Bigrams: 
[[#, 3150713], [3150713, (], [(, PDS], [PDS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 04]]

>> Trigrams: 
[[#, 3150713, (], [3150713, (, PDS], [(, PDS, )], [PDS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 04]]

>> Noun Phrases are: 
[(PDS]

>> Named Entities are: 
[('PDS', 'ORG'), ('04', 'CARDINAL')]


============================ Sentence 89 =============================

– Data Visualization ‹#›   Pie Chart Pie chart focus on showing parts of a whole, the entire pie would be 100 percentage, the question is how much of that percentage each value occupies. 


>> Tokens are: 
[–, Data, Visualization, ‹#›,   , Pie, Chart, Pie, chart, focus, showing, parts, ,, entire, pie, 100, percentage, ,, question, percentage, value, occupies, .] 

>> PoS Tags are: 
[('–', 'PUNCT'), ('Data', 'PROPN'), ('Visualization', 'PROPN'), ('‹#›', 'VERB'), ('  ', 'SPACE'), ('Pie', 'PROPN'), ('Chart', 'PROPN'), ('Pie', 'PROPN'), ('chart', 'NOUN'), ('focus', 'VERB'), ('showing', 'VERB'), ('parts', 'NOUN'), (',', 'PUNCT'), ('entire', 'ADJ'), ('pie', 'NOUN'), ('100', 'NUM'), ('percentage', 'NOUN'), (',', 'PUNCT'), ('question', 'NOUN'), ('percentage', 'NOUN'), ('value', 'NOUN'), ('occupies', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('–', 'punct'), ('Data', 'compound'), ('Visualization', 'compound'), ('‹#›', 'nsubj'), ('  ', 'dobj'), ('Pie', 'compound'), ('Chart', 'compound'), ('Pie', 'compound'), ('chart', 'nsubj'), ('focus', 'ccomp'), ('showing', 'pcomp'), ('parts', 'dobj'), (',', 'punct'), ('entire', 'amod'), ('pie', 'nsubj'), ('100', 'nummod'), ('percentage', 'attr'), (',', 'punct'), ('question', 'nsubj'), ('percentage', 'pobj'), ('value', 'nsubj'), ('occupies', 'ccomp'), ('.', 'punct')]

>> Bigrams: 
[[–, Data], [Data, Visualization], [Visualization, ‹#›], [‹#›,   ], [  , Pie], [Pie, Chart], [Chart, Pie], [Pie, chart], [chart, focus], [focus, showing], [showing, parts], [parts, ,], [,, entire], [entire, pie], [pie, 100], [100, percentage], [percentage, ,], [,, question], [question, percentage], [percentage, value], [value, occupies], [occupies, .]]

>> Trigrams: 
[[–, Data, Visualization], [Data, Visualization, ‹#›], [Visualization, ‹#›,   ], [‹#›,   , Pie], [  , Pie, Chart], [Pie, Chart, Pie], [Chart, Pie, chart], [Pie, chart, focus], [chart, focus, showing], [focus, showing, parts], [showing, parts, ,], [parts, ,, entire], [,, entire, pie], [entire, pie, 100], [pie, 100, percentage], [100, percentage, ,], [percentage, ,, question], [,, question, percentage], [question, percentage, value], [percentage, value, occupies], [value, occupies, .]]

>> Noun Phrases are: 
[Pie Chart Pie chart, parts, a whole, the entire pie, 100 percentage, the question, that percentage, each value]

>> Named Entities are: 
[('Data Visualization', 'ORG'), ('100', 'CARDINAL')]


============================ Sentence 90 =============================

import matplotlib.pyplot as plt %matplotlib notebook values = 


>> Tokens are: 
[import, matplotlib.pyplot, plt, %, matplotlib, notebook, values, =] 

>> PoS Tags are: 
[('import', 'NOUN'), ('matplotlib.pyplot', 'NOUN'), ('plt', 'NOUN'), ('%', 'NOUN'), ('matplotlib', 'ADJ'), ('notebook', 'NOUN'), ('values', 'NOUN'), ('=', 'PUNCT')] 

>> Dependency Tags are: 
[('import', 'compound'), ('matplotlib.pyplot', 'ROOT'), ('plt', 'compound'), ('%', 'nmod'), ('matplotlib', 'amod'), ('notebook', 'compound'), ('values', 'pobj'), ('=', 'punct')]

>> Bigrams: 
[[import, matplotlib.pyplot], [matplotlib.pyplot, plt], [plt, %], [%, matplotlib], [matplotlib, notebook], [notebook, values], [values, =]]

>> Trigrams: 
[[import, matplotlib.pyplot, plt], [matplotlib.pyplot, plt, %], [plt, %, matplotlib], [%, matplotlib, notebook], [matplotlib, notebook, values], [notebook, values, =]]

>> Noun Phrases are: 
[import matplotlib.pyplot, plt %matplotlib notebook values]

>> Named Entities are: 
[]


============================ Sentence 91 =============================

[305,201,805,35,436] l = ['Food','Travel','Accomodation','Misc','Shoping'] 


>> Tokens are: 
[[, 305,201,805,35,436, ], l, =, [, ', Food','Travel','Accomodation','Misc','Shoping, ', ]] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('305,201,805,35,436', 'NUM'), (']', 'PUNCT'), ('l', 'NOUN'), ('=', 'PUNCT'), ('[', 'PUNCT'), ("'", 'PUNCT'), ("Food','Travel','Accomodation','Misc','Shoping", 'NOUN'), ("'", 'PUNCT'), (']', 'PUNCT')] 

>> Dependency Tags are: 
[('[', 'dep'), ('305,201,805,35,436', 'dep'), (']', 'dep'), ('l', 'ROOT'), ('=', 'punct'), ('[', 'punct'), ("'", 'punct'), ("Food','Travel','Accomodation','Misc','Shoping", 'parataxis'), ("'", 'punct'), (']', 'punct')]

>> Bigrams: 
[[[, 305,201,805,35,436], [305,201,805,35,436, ]], [], l], [l, =], [=, [], [[, '], [', Food','Travel','Accomodation','Misc','Shoping], [Food','Travel','Accomodation','Misc','Shoping, '], [', ]]]

>> Trigrams: 
[[[, 305,201,805,35,436, ]], [305,201,805,35,436, ], l], [], l, =], [l, =, [], [=, [, '], [[, ', Food','Travel','Accomodation','Misc','Shoping], [', Food','Travel','Accomodation','Misc','Shoping, '], [Food','Travel','Accomodation','Misc','Shoping, ', ]]]

>> Noun Phrases are: 
[[305,201,805,35,436] l]

>> Named Entities are: 
[('305,201,805,35,436', 'CARDINAL')]


============================ Sentence 92 =============================

c = ['b','g','r','c','m'] 


>> Tokens are: 
[c, =, [, ', b','g','r','c','m, ', ]] 

>> PoS Tags are: 
[('c', 'X'), ('=', 'PUNCT'), ('[', 'PUNCT'), ("'", 'PUNCT'), ("b','g','r','c','m", 'NOUN'), ("'", 'PUNCT'), (']', 'PUNCT')] 

>> Dependency Tags are: 
[('c', 'meta'), ('=', 'punct'), ('[', 'dep'), ("'", 'punct'), ("b','g','r','c','m", 'ROOT'), ("'", 'punct'), (']', 'punct')]

>> Bigrams: 
[[c, =], [=, [], [[, '], [', b','g','r','c','m], [b','g','r','c','m, '], [', ]]]

>> Trigrams: 
[[c, =, [], [=, [, '], [[, ', b','g','r','c','m], [', b','g','r','c','m, '], [b','g','r','c','m, ', ]]]

>> Noun Phrases are: 
[c = ['b','g','r','c','m]

>> Named Entities are: 
[]


============================ Sentence 93 =============================

e = [0,0.2,0,0,0] plt.pie(values,colors=c,labels=l,explode=e) 


>> Tokens are: 
[e, =, [, 0,0.2,0,0,0, ], plt.pie(values, ,, colors, =, c, ,, labels, =, l, ,, explode, =, e, )] 

>> PoS Tags are: 
[('e', 'NOUN'), ('=', 'PUNCT'), ('[', 'X'), ('0,0.2,0,0,0', 'X'), (']', 'PUNCT'), ('plt.pie(values', 'NOUN'), (',', 'PUNCT'), ('colors', 'NOUN'), ('=', 'SYM'), ('c', 'NOUN'), (',', 'PUNCT'), ('labels', 'NOUN'), ('=', 'PUNCT'), ('l', 'NOUN'), (',', 'PUNCT'), ('explode', 'VERB'), ('=', 'SYM'), ('e', 'NOUN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('e', 'meta'), ('=', 'dep'), ('[', 'dep'), ('0,0.2,0,0,0', 'nmod'), (']', 'punct'), ('plt.pie(values', 'ROOT'), (',', 'punct'), ('colors', 'conj'), ('=', 'compound'), ('c', 'appos'), (',', 'punct'), ('labels', 'conj'), ('=', 'compound'), ('l', 'dobj'), (',', 'punct'), ('explode', 'conj'), ('=', 'punct'), ('e', 'dobj'), (')', 'punct')]

>> Bigrams: 
[[e, =], [=, [], [[, 0,0.2,0,0,0], [0,0.2,0,0,0, ]], [], plt.pie(values], [plt.pie(values, ,], [,, colors], [colors, =], [=, c], [c, ,], [,, labels], [labels, =], [=, l], [l, ,], [,, explode], [explode, =], [=, e], [e, )]]

>> Trigrams: 
[[e, =, [], [=, [, 0,0.2,0,0,0], [[, 0,0.2,0,0,0, ]], [0,0.2,0,0,0, ], plt.pie(values], [], plt.pie(values, ,], [plt.pie(values, ,, colors], [,, colors, =], [colors, =, c], [=, c, ,], [c, ,, labels], [,, labels, =], [labels, =, l], [=, l, ,], [l, ,, explode], [,, explode, =], [explode, =, e], [=, e, )]]

>> Noun Phrases are: 
[e = [0,0.2,0,0,0] plt.pie(values, colors, =c, labels, =l, e]

>> Named Entities are: 
[]


============================ Sentence 94 =============================

plt.show 


>> Tokens are: 
[plt.show] 

>> PoS Tags are: 
[('plt.show', 'PROPN')] 

>> Dependency Tags are: 
[('plt.show', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[plt.show]

>> Named Entities are: 
[]


============================ Sentence 95 =============================

() 1 2 3 4  5 6 7 8 pieChartDemo.py    Prof. Arjun V. Bala #3150713 (PDS)       


>> Tokens are: 
[(, ), 1, 2, 3, 4,  , 5, 6, 7, 8, pieChartDemo.py,    , Prof., Arjun, V., Bala, #, 3150713, (, PDS, ),   , ,   ] 

>> PoS Tags are: 
[('(', 'PUNCT'), (')', 'PUNCT'), ('1', 'NUM'), ('2', 'NUM'), ('3', 'NUM'), ('4', 'NUM'), (' ', 'SPACE'), ('5', 'NUM'), ('6', 'NUM'), ('7', 'NUM'), ('8', 'NUM'), ('pieChartDemo.py', 'ADJ'), ('   ', 'SPACE'), ('Prof.', 'PROPN'), ('Arjun', 'PROPN'), ('V.', 'PROPN'), ('Bala', 'PROPN'), ('#', 'NOUN'), ('3150713', 'NUM'), ('(', 'PUNCT'), ('PDS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE')] 

>> Dependency Tags are: 
[('(', 'punct'), (')', 'punct'), ('1', 'compound'), ('2', 'nummod'), ('3', 'compound'), ('4', 'nummod'), (' ', 'quantmod'), ('5', 'quantmod'), ('6', 'quantmod'), ('7', 'compound'), ('8', 'quantmod'), ('pieChartDemo.py', 'amod'), ('   ', 'nummod'), ('Prof.', 'compound'), ('Arjun', 'compound'), ('V.', 'compound'), ('Bala', 'nsubj'), ('#', 'nmod'), ('3150713', 'appos'), ('(', 'punct'), ('PDS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'punct')]

>> Bigrams: 
[[(, )], [), 1], [1, 2], [2, 3], [3, 4], [4,  ], [ , 5], [5, 6], [6, 7], [7, 8], [8, pieChartDemo.py], [pieChartDemo.py,    ], [   , Prof.], [Prof., Arjun], [Arjun, V.], [V., Bala], [Bala, #], [#, 3150713], [3150713, (], [(, PDS], [PDS, )], [),   ], [  , ], [,   ]]

>> Trigrams: 
[[(, ), 1], [), 1, 2], [1, 2, 3], [2, 3, 4], [3, 4,  ], [4,  , 5], [ , 5, 6], [5, 6, 7], [6, 7, 8], [7, 8, pieChartDemo.py], [8, pieChartDemo.py,    ], [pieChartDemo.py,    , Prof.], [   , Prof., Arjun], [Prof., Arjun, V.], [Arjun, V., Bala], [V., Bala, #], [Bala, #, 3150713], [#, 3150713, (], [3150713, (, PDS], [(, PDS, )], [PDS, ),   ], [),   , ], [  , ,   ]]

>> Noun Phrases are: 
[() 1 2 3 4  5 6 7 8 pieChartDemo.py    Prof. Arjun V. Bala, (PDS]

>> Named Entities are: 
[('Arjun V. Bala', 'PERSON'), ('PDS', 'ORG')]


============================ Sentence 96 =============================

Unit 04 – Data Visualization ‹#›   


>> Tokens are: 
[Unit, 04, –, Data, Visualization, ‹#›,  ] 

>> PoS Tags are: 
[('Unit', 'NOUN'), ('04', 'NUM'), ('–', 'PUNCT'), ('Data', 'PROPN'), ('Visualization', 'PROPN'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Unit', 'ROOT'), ('04', 'nummod'), ('–', 'punct'), ('Data', 'compound'), ('Visualization', 'appos'), ('‹#›', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[Unit, 04], [04, –], [–, Data], [Data, Visualization], [Visualization, ‹#›], [‹#›,  ]]

>> Trigrams: 
[[Unit, 04, –], [04, –, Data], [–, Data, Visualization], [Data, Visualization, ‹#›], [Visualization, ‹#›,  ]]

>> Noun Phrases are: 
[Unit, – Data Visualization]

>> Named Entities are: 
[('04', 'CARDINAL'), ('Data Visualization', 'ORG')]


============================ Sentence 97 =============================

Pie Chart (Cont.) 


>> Tokens are: 
[Pie, Chart, (, Cont, ., )] 

>> PoS Tags are: 
[('Pie', 'PROPN'), ('Chart', 'PROPN'), ('(', 'PUNCT'), ('Cont', 'PROPN'), ('.', 'PUNCT'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('Pie', 'compound'), ('Chart', 'ROOT'), ('(', 'punct'), ('Cont', 'appos'), ('.', 'punct'), (')', 'punct')]

>> Bigrams: 
[[Pie, Chart], [Chart, (], [(, Cont], [Cont, .], [., )]]

>> Trigrams: 
[[Pie, Chart, (], [Chart, (, Cont], [(, Cont, .], [Cont, ., )]]

>> Noun Phrases are: 
[Pie Chart, Cont]

>> Named Entities are: 
[]


============================ Sentence 98 =============================

There are lots of other options available with the pie chart, we are going to cover two important parameters in this slide. 


>> Tokens are: 
[lots, options, available, pie, chart, ,, going, cover, important, parameters, slide, .] 

>> PoS Tags are: 
[('lots', 'NOUN'), ('options', 'NOUN'), ('available', 'ADJ'), ('pie', 'NOUN'), ('chart', 'NOUN'), (',', 'PUNCT'), ('going', 'VERB'), ('cover', 'VERB'), ('important', 'ADJ'), ('parameters', 'NOUN'), ('slide', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('lots', 'attr'), ('options', 'pobj'), ('available', 'amod'), ('pie', 'compound'), ('chart', 'pobj'), (',', 'punct'), ('going', 'ROOT'), ('cover', 'xcomp'), ('important', 'amod'), ('parameters', 'dobj'), ('slide', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[lots, options], [options, available], [available, pie], [pie, chart], [chart, ,], [,, going], [going, cover], [cover, important], [important, parameters], [parameters, slide], [slide, .]]

>> Trigrams: 
[[lots, options, available], [options, available, pie], [available, pie, chart], [pie, chart, ,], [chart, ,, going], [,, going, cover], [going, cover, important], [cover, important, parameters], [important, parameters, slide], [parameters, slide, .]]

>> Noun Phrases are: 
[lots, other options, the pie chart, we, two important parameters, this slide]

>> Named Entities are: 
[('two', 'CARDINAL')]


============================ Sentence 99 =============================

import matplotlib.pyplot as plt %matplotlib notebook values = 


>> Tokens are: 
[import, matplotlib.pyplot, plt, %, matplotlib, notebook, values, =] 

>> PoS Tags are: 
[('import', 'NOUN'), ('matplotlib.pyplot', 'NOUN'), ('plt', 'NOUN'), ('%', 'NOUN'), ('matplotlib', 'ADJ'), ('notebook', 'NOUN'), ('values', 'NOUN'), ('=', 'PUNCT')] 

>> Dependency Tags are: 
[('import', 'compound'), ('matplotlib.pyplot', 'ROOT'), ('plt', 'compound'), ('%', 'nmod'), ('matplotlib', 'amod'), ('notebook', 'compound'), ('values', 'pobj'), ('=', 'punct')]

>> Bigrams: 
[[import, matplotlib.pyplot], [matplotlib.pyplot, plt], [plt, %], [%, matplotlib], [matplotlib, notebook], [notebook, values], [values, =]]

>> Trigrams: 
[[import, matplotlib.pyplot, plt], [matplotlib.pyplot, plt, %], [plt, %, matplotlib], [%, matplotlib, notebook], [matplotlib, notebook, values], [notebook, values, =]]

>> Noun Phrases are: 
[import matplotlib.pyplot, plt %matplotlib notebook values]

>> Named Entities are: 
[]


============================ Sentence 100 =============================

[305,201,805,35,436] l = ['Food','Travel','Accomodation','Misc','Shoping'] 


>> Tokens are: 
[[, 305,201,805,35,436, ], l, =, [, ', Food','Travel','Accomodation','Misc','Shoping, ', ]] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('305,201,805,35,436', 'NUM'), (']', 'PUNCT'), ('l', 'NOUN'), ('=', 'PUNCT'), ('[', 'PUNCT'), ("'", 'PUNCT'), ("Food','Travel','Accomodation','Misc','Shoping", 'NOUN'), ("'", 'PUNCT'), (']', 'PUNCT')] 

>> Dependency Tags are: 
[('[', 'dep'), ('305,201,805,35,436', 'dep'), (']', 'dep'), ('l', 'ROOT'), ('=', 'punct'), ('[', 'punct'), ("'", 'punct'), ("Food','Travel','Accomodation','Misc','Shoping", 'parataxis'), ("'", 'punct'), (']', 'punct')]

>> Bigrams: 
[[[, 305,201,805,35,436], [305,201,805,35,436, ]], [], l], [l, =], [=, [], [[, '], [', Food','Travel','Accomodation','Misc','Shoping], [Food','Travel','Accomodation','Misc','Shoping, '], [', ]]]

>> Trigrams: 
[[[, 305,201,805,35,436, ]], [305,201,805,35,436, ], l], [], l, =], [l, =, [], [=, [, '], [[, ', Food','Travel','Accomodation','Misc','Shoping], [', Food','Travel','Accomodation','Misc','Shoping, '], [Food','Travel','Accomodation','Misc','Shoping, ', ]]]

>> Noun Phrases are: 
[[305,201,805,35,436] l]

>> Named Entities are: 
[('305,201,805,35,436', 'CARDINAL')]


============================ Sentence 101 =============================

c = ['b','g','r','c','m'] plt.pie(values,colors=c,labels=l,shadow= 


>> Tokens are: 
[c, =, [, ', b','g','r','c','m, ', ], plt.pie(values, ,, colors, =, c, ,, labels, =, l, ,, shadow, =] 

>> PoS Tags are: 
[('c', 'X'), ('=', 'PUNCT'), ('[', 'PUNCT'), ("'", 'PUNCT'), ("b','g','r','c','m", 'NOUN'), ("'", 'PUNCT'), (']', 'PUNCT'), ('plt.pie(values', 'NOUN'), (',', 'PUNCT'), ('colors', 'NOUN'), ('=', 'SYM'), ('c', 'NOUN'), (',', 'PUNCT'), ('labels', 'NOUN'), ('=', 'PUNCT'), ('l', 'NOUN'), (',', 'PUNCT'), ('shadow', 'VERB'), ('=', 'ADP')] 

>> Dependency Tags are: 
[('c', 'meta'), ('=', 'punct'), ('[', 'dep'), ("'", 'punct'), ("b','g','r','c','m", 'ROOT'), ("'", 'punct'), (']', 'punct'), ('plt.pie(values', 'appos'), (',', 'punct'), ('colors', 'nsubj'), ('=', 'compound'), ('c', 'appos'), (',', 'punct'), ('labels', 'conj'), ('=', 'compound'), ('l', 'appos'), (',', 'punct'), ('shadow', 'conj'), ('=', 'punct')]

>> Bigrams: 
[[c, =], [=, [], [[, '], [', b','g','r','c','m], [b','g','r','c','m, '], [', ]], [], plt.pie(values], [plt.pie(values, ,], [,, colors], [colors, =], [=, c], [c, ,], [,, labels], [labels, =], [=, l], [l, ,], [,, shadow], [shadow, =]]

>> Trigrams: 
[[c, =, [], [=, [, '], [[, ', b','g','r','c','m], [', b','g','r','c','m, '], [b','g','r','c','m, ', ]], [', ], plt.pie(values], [], plt.pie(values, ,], [plt.pie(values, ,, colors], [,, colors, =], [colors, =, c], [=, c, ,], [c, ,, labels], [,, labels, =], [labels, =, l], [=, l, ,], [l, ,, shadow], [,, shadow, =]]

>> Noun Phrases are: 
[c = ['b','g','r','c','m, ] plt.pie(values, colors, =c, labels, =l]

>> Named Entities are: 
[]


============================ Sentence 102 =============================

True,         autopct='%1.1f%%') 


>> Tokens are: 
[True, ,,         , autopct='%1.1f%%, ', )] 

>> PoS Tags are: 
[('True', 'ADJ'), (',', 'PUNCT'), ('        ', 'SPACE'), ("autopct='%1.1f%%", 'PROPN'), ("'", 'PART'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('True', 'ROOT'), (',', 'punct'), ('        ', 'compound'), ("autopct='%1.1f%%", 'npadvmod'), ("'", 'punct'), (')', 'punct')]

>> Bigrams: 
[[True, ,], [,,         ], [        , autopct='%1.1f%%], [autopct='%1.1f%%, '], [', )]]

>> Trigrams: 
[[True, ,,         ], [,,         , autopct='%1.1f%%], [        , autopct='%1.1f%%, '], [autopct='%1.1f%%, ', )]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 103 =============================

plt.show() 1 2 3 4  5 6 7 8 pieChartDemo.py     Prof. Arjun V. Bala 


>> Tokens are: 
[plt.show, (, ), 1, 2, 3, 4,  , 5, 6, 7, 8, pieChartDemo.py,     , Prof., Arjun, V., Bala] 

>> PoS Tags are: 
[('plt.show', 'PROPN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('1', 'NUM'), ('2', 'NUM'), ('3', 'NUM'), ('4', 'NUM'), (' ', 'SPACE'), ('5', 'NUM'), ('6', 'NUM'), ('7', 'NUM'), ('8', 'NUM'), ('pieChartDemo.py', 'ADJ'), ('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Arjun', 'PROPN'), ('V.', 'PROPN'), ('Bala', 'PROPN')] 

>> Dependency Tags are: 
[('plt.show', 'ROOT'), ('(', 'punct'), (')', 'punct'), ('1', 'compound'), ('2', 'nummod'), ('3', 'compound'), ('4', 'nummod'), (' ', 'npadvmod'), ('5', 'quantmod'), ('6', 'quantmod'), ('7', 'compound'), ('8', 'nummod'), ('pieChartDemo.py', 'amod'), ('    ', 'compound'), ('Prof.', 'compound'), ('Arjun', 'compound'), ('V.', 'compound'), ('Bala', 'npadvmod')]

>> Bigrams: 
[[plt.show, (], [(, )], [), 1], [1, 2], [2, 3], [3, 4], [4,  ], [ , 5], [5, 6], [6, 7], [7, 8], [8, pieChartDemo.py], [pieChartDemo.py,     ], [    , Prof.], [Prof., Arjun], [Arjun, V.], [V., Bala]]

>> Trigrams: 
[[plt.show, (, )], [(, ), 1], [), 1, 2], [1, 2, 3], [2, 3, 4], [3, 4,  ], [4,  , 5], [ , 5, 6], [5, 6, 7], [6, 7, 8], [7, 8, pieChartDemo.py], [8, pieChartDemo.py,     ], [pieChartDemo.py,     , Prof.], [    , Prof., Arjun], [Prof., Arjun, V.], [Arjun, V., Bala]]

>> Noun Phrases are: 
[plt.show]

>> Named Entities are: 
[('Arjun V. Bala', 'PERSON')]


============================ Sentence 104 =============================

#3150713 (PDS)      Unit 04 


>> Tokens are: 
[#, 3150713, (, PDS, ),   , ,   , Unit, 04] 

>> PoS Tags are: 
[('#', 'NOUN'), ('3150713', 'NUM'), ('(', 'PUNCT'), ('PDS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('04', 'NUM')] 

>> Dependency Tags are: 
[('#', 'nmod'), ('3150713', 'nummod'), ('(', 'punct'), ('PDS', 'appos'), (')', 'punct'), ('  ', 'nsubj'), ('\uf077', 'ROOT'), ('  ', 'punct'), ('Unit', 'npadvmod'), ('04', 'nummod')]

>> Bigrams: 
[[#, 3150713], [3150713, (], [(, PDS], [PDS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 04]]

>> Trigrams: 
[[#, 3150713, (], [3150713, (, PDS], [(, PDS, )], [PDS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 04]]

>> Noun Phrases are: 
[(PDS]

>> Named Entities are: 
[('PDS', 'ORG'), ('04', 'CARDINAL')]


============================ Sentence 105 =============================

– Data Visualization ‹#›   


>> Tokens are: 
[–, Data, Visualization, ‹#›,  ] 

>> PoS Tags are: 
[('–', 'PUNCT'), ('Data', 'PROPN'), ('Visualization', 'PROPN'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('–', 'punct'), ('Data', 'compound'), ('Visualization', 'ROOT'), ('‹#›', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[–, Data], [Data, Visualization], [Visualization, ‹#›], [‹#›,  ]]

>> Trigrams: 
[[–, Data, Visualization], [Data, Visualization, ‹#›], [Visualization, ‹#›,  ]]

>> Noun Phrases are: 
[– Data Visualization]

>> Named Entities are: 
[('Data Visualization ‹#›', 'ORG')]


============================ Sentence 106 =============================

Bar charts Bar charts make comparing values easy, wide bars an d segregated measurements emphasize the difference between values, rather that the flow of one value to another as a line graph. 


>> Tokens are: 
[Bar, charts, Bar, charts, comparing, values, easy, ,, wide, bars, d, segregated, measurements, emphasize, difference, values, ,, flow, value, line, graph, .] 

>> PoS Tags are: 
[('Bar', 'NOUN'), ('charts', 'NOUN'), ('Bar', 'PROPN'), ('charts', 'NOUN'), ('comparing', 'VERB'), ('values', 'NOUN'), ('easy', 'ADJ'), (',', 'PUNCT'), ('wide', 'ADJ'), ('bars', 'NOUN'), ('d', 'PROPN'), ('segregated', 'ADJ'), ('measurements', 'NOUN'), ('emphasize', 'VERB'), ('difference', 'NOUN'), ('values', 'NOUN'), (',', 'PUNCT'), ('flow', 'NOUN'), ('value', 'NOUN'), ('line', 'NOUN'), ('graph', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Bar', 'compound'), ('charts', 'compound'), ('Bar', 'compound'), ('charts', 'nsubj'), ('comparing', 'xcomp'), ('values', 'dobj'), ('easy', 'advmod'), (',', 'punct'), ('wide', 'amod'), ('bars', 'nsubj'), ('d', 'nmod'), ('segregated', 'amod'), ('measurements', 'nsubj'), ('emphasize', 'ccomp'), ('difference', 'dobj'), ('values', 'pobj'), (',', 'punct'), ('flow', 'advcl'), ('value', 'pobj'), ('line', 'compound'), ('graph', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Bar, charts], [charts, Bar], [Bar, charts], [charts, comparing], [comparing, values], [values, easy], [easy, ,], [,, wide], [wide, bars], [bars, d], [d, segregated], [segregated, measurements], [measurements, emphasize], [emphasize, difference], [difference, values], [values, ,], [,, flow], [flow, value], [value, line], [line, graph], [graph, .]]

>> Trigrams: 
[[Bar, charts, Bar], [charts, Bar, charts], [Bar, charts, comparing], [charts, comparing, values], [comparing, values, easy], [values, easy, ,], [easy, ,, wide], [,, wide, bars], [wide, bars, d], [bars, d, segregated], [d, segregated, measurements], [segregated, measurements, emphasize], [measurements, emphasize, difference], [emphasize, difference, values], [difference, values, ,], [values, ,, flow], [,, flow, value], [flow, value, line], [value, line, graph], [line, graph, .]]

>> Noun Phrases are: 
[Bar charts Bar charts, values, , wide bars, an d segregated measurements, the difference, values, one value, a line graph]

>> Named Entities are: 
[('Bar', 'ORG'), ('one', 'CARDINAL')]


============================ Sentence 107 =============================

import matplotlib.pyplot as plt %matplotlib notebook x = 


>> Tokens are: 
[import, matplotlib.pyplot, plt, %, matplotlib, notebook, x, =] 

>> PoS Tags are: 
[('import', 'NOUN'), ('matplotlib.pyplot', 'NOUN'), ('plt', 'NOUN'), ('%', 'NOUN'), ('matplotlib', 'ADJ'), ('notebook', 'NOUN'), ('x', 'PUNCT'), ('=', 'PUNCT')] 

>> Dependency Tags are: 
[('import', 'compound'), ('matplotlib.pyplot', 'ROOT'), ('plt', 'compound'), ('%', 'nmod'), ('matplotlib', 'amod'), ('notebook', 'pobj'), ('x', 'punct'), ('=', 'appos')]

>> Bigrams: 
[[import, matplotlib.pyplot], [matplotlib.pyplot, plt], [plt, %], [%, matplotlib], [matplotlib, notebook], [notebook, x], [x, =]]

>> Trigrams: 
[[import, matplotlib.pyplot, plt], [matplotlib.pyplot, plt, %], [plt, %, matplotlib], [%, matplotlib, notebook], [matplotlib, notebook, x], [notebook, x, =]]

>> Noun Phrases are: 
[import matplotlib.pyplot, plt %matplotlib notebook]

>> Named Entities are: 
[]


============================ Sentence 108 =============================

[1,2,3,4,5] y = [5.9,6.2,3.2,8.9,9.7] l = ['1st','2nd','3rd','4th','5th'] 


>> Tokens are: 
[[, 1,2,3,4,5, ], y, =, [, 5.9,6.2,3.2,8.9,9.7, ], l, =, [, ', 1st','2nd','3rd','4th','5th, ', ]] 

>> PoS Tags are: 
[('[', 'X'), ('1,2,3,4,5', 'NUM'), (']', 'PUNCT'), ('y', 'X'), ('=', 'PUNCT'), ('[', 'X'), ('5.9,6.2,3.2,8.9,9.7', 'X'), (']', 'PUNCT'), ('l', 'NOUN'), ('=', 'PUNCT'), ('[', 'PUNCT'), ("'", 'PUNCT'), ("1st','2nd','3rd','4th','5th", 'NOUN'), ("'", 'PUNCT'), (']', 'PUNCT')] 

>> Dependency Tags are: 
[('[', 'punct'), ('1,2,3,4,5', 'nmod'), (']', 'punct'), ('y', 'dep'), ('=', 'punct'), ('[', 'dep'), ('5.9,6.2,3.2,8.9,9.7', 'dep'), (']', 'dep'), ('l', 'ROOT'), ('=', 'punct'), ('[', 'punct'), ("'", 'punct'), ("1st','2nd','3rd','4th','5th", 'appos'), ("'", 'punct'), (']', 'punct')]

>> Bigrams: 
[[[, 1,2,3,4,5], [1,2,3,4,5, ]], [], y], [y, =], [=, [], [[, 5.9,6.2,3.2,8.9,9.7], [5.9,6.2,3.2,8.9,9.7, ]], [], l], [l, =], [=, [], [[, '], [', 1st','2nd','3rd','4th','5th], [1st','2nd','3rd','4th','5th, '], [', ]]]

>> Trigrams: 
[[[, 1,2,3,4,5, ]], [1,2,3,4,5, ], y], [], y, =], [y, =, [], [=, [, 5.9,6.2,3.2,8.9,9.7], [[, 5.9,6.2,3.2,8.9,9.7, ]], [5.9,6.2,3.2,8.9,9.7, ], l], [], l, =], [l, =, [], [=, [, '], [[, ', 1st','2nd','3rd','4th','5th], [', 1st','2nd','3rd','4th','5th, '], [1st','2nd','3rd','4th','5th, ', ]]]

>> Noun Phrases are: 
[[1,2,3,4,5] y = [5.9,6.2,3.2,8.9,9.7] l, 1st','2nd','3rd','4th','5th]

>> Named Entities are: 
[('1,2,3,4,5', 'CARDINAL')]


============================ Sentence 109 =============================

c = ['b','g','r','c','m'] w = [0.5,0.6,0.3,0.8,0.9] plt.title('Sem wise spi') plt.bar(x,y,color=c,label=l,width=w) plt.show 


>> Tokens are: 
[c, =, [, ', b','g','r','c','m, ', ], w, =, [, 0.5,0.6,0.3,0.8,0.9, ], plt.title('Sem, wise, spi, ', ), plt.bar(x, ,, y, ,, color, =, c, ,, label, =, l, ,, width, =, w, ), plt.show] 

>> PoS Tags are: 
[('c', 'X'), ('=', 'PUNCT'), ('[', 'PUNCT'), ("'", 'PUNCT'), ("b','g','r','c','m", 'NOUN'), ("'", 'PUNCT'), (']', 'PUNCT'), ('w', 'ADP'), ('=', 'PUNCT'), ('[', 'X'), ('0.5,0.6,0.3,0.8,0.9', 'X'), (']', 'PUNCT'), ("plt.title('Sem", 'X'), ('wise', 'ADJ'), ('spi', 'NOUN'), ("'", 'PUNCT'), (')', 'PUNCT'), ('plt.bar(x', 'PROPN'), (',', 'PUNCT'), ('y', 'PROPN'), (',', 'PUNCT'), ('color', 'NOUN'), ('=', 'SYM'), ('c', 'NOUN'), (',', 'PUNCT'), ('label', 'NOUN'), ('=', 'SYM'), ('l', 'NOUN'), (',', 'PUNCT'), ('width', 'VERB'), ('=', 'PUNCT'), ('w', 'NOUN'), (')', 'PUNCT'), ('plt.show', 'PROPN')] 

>> Dependency Tags are: 
[('c', 'meta'), ('=', 'punct'), ('[', 'dep'), ("'", 'punct'), ("b','g','r','c','m", 'ROOT'), ("'", 'punct'), (']', 'punct'), ('w', 'prep'), ('=', 'pobj'), ('[', 'nmod'), ('0.5,0.6,0.3,0.8,0.9', 'prep'), (']', 'punct'), ("plt.title('Sem", 'nmod'), ('wise', 'amod'), ('spi', 'nmod'), ("'", 'punct'), (')', 'punct'), ('plt.bar(x', 'nsubj'), (',', 'punct'), ('y', 'npadvmod'), (',', 'punct'), ('color', 'compound'), ('=', 'compound'), ('c', 'appos'), (',', 'punct'), ('label', 'conj'), ('=', 'compound'), ('l', 'dobj'), (',', 'punct'), ('width', 'conj'), ('=', 'punct'), ('w', 'dobj'), (')', 'punct'), ('plt.show', 'punct')]

>> Bigrams: 
[[c, =], [=, [], [[, '], [', b','g','r','c','m], [b','g','r','c','m, '], [', ]], [], w], [w, =], [=, [], [[, 0.5,0.6,0.3,0.8,0.9], [0.5,0.6,0.3,0.8,0.9, ]], [], plt.title('Sem], [plt.title('Sem, wise], [wise, spi], [spi, '], [', )], [), plt.bar(x], [plt.bar(x, ,], [,, y], [y, ,], [,, color], [color, =], [=, c], [c, ,], [,, label], [label, =], [=, l], [l, ,], [,, width], [width, =], [=, w], [w, )], [), plt.show]]

>> Trigrams: 
[[c, =, [], [=, [, '], [[, ', b','g','r','c','m], [', b','g','r','c','m, '], [b','g','r','c','m, ', ]], [', ], w], [], w, =], [w, =, [], [=, [, 0.5,0.6,0.3,0.8,0.9], [[, 0.5,0.6,0.3,0.8,0.9, ]], [0.5,0.6,0.3,0.8,0.9, ], plt.title('Sem], [], plt.title('Sem, wise], [plt.title('Sem, wise, spi], [wise, spi, '], [spi, ', )], [', ), plt.bar(x], [), plt.bar(x, ,], [plt.bar(x, ,, y], [,, y, ,], [y, ,, color], [,, color, =], [color, =, c], [=, c, ,], [c, ,, label], [,, label, =], [label, =, l], [=, l, ,], [l, ,, width], [,, width, =], [width, =, w], [=, w, )], [w, ), plt.show]]

>> Noun Phrases are: 
[c = ['b','g','r','c','m, plt.title('Sem wise spi') plt.bar(x, color=c, =l, w]

>> Named Entities are: 
[('0.5,0.6,0.3,0.8,0.9', 'CARDINAL')]


============================ Sentence 110 =============================

() 1 2 3 4 5 6 7 8 9 10 barChartDemo.py     Prof. Arjun V. Bala #3150713 (PDS)       


>> Tokens are: 
[(, ), 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, barChartDemo.py,     , Prof., Arjun, V., Bala, #, 3150713, (, PDS, ),   , ,   ] 

>> PoS Tags are: 
[('(', 'PUNCT'), (')', 'PUNCT'), ('1', 'NUM'), ('2', 'NUM'), ('3', 'NUM'), ('4', 'NUM'), ('5', 'NUM'), ('6', 'NUM'), ('7', 'NUM'), ('8', 'NUM'), ('9', 'NUM'), ('10', 'NUM'), ('barChartDemo.py', 'NOUN'), ('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Arjun', 'PROPN'), ('V.', 'PROPN'), ('Bala', 'PROPN'), ('#', 'NOUN'), ('3150713', 'NUM'), ('(', 'PUNCT'), ('PDS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE')] 

>> Dependency Tags are: 
[('(', 'punct'), (')', 'punct'), ('1', 'compound'), ('2', 'quantmod'), ('3', 'appos'), ('4', 'appos'), ('5', 'appos'), ('6', 'appos'), ('7', 'appos'), ('8', 'appos'), ('9', 'compound'), ('10', 'nummod'), ('barChartDemo.py', 'nmod'), ('    ', 'compound'), ('Prof.', 'compound'), ('Arjun', 'compound'), ('V.', 'compound'), ('Bala', 'nsubj'), ('#', 'nmod'), ('3150713', 'appos'), ('(', 'punct'), ('PDS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'punct')]

>> Bigrams: 
[[(, )], [), 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, barChartDemo.py], [barChartDemo.py,     ], [    , Prof.], [Prof., Arjun], [Arjun, V.], [V., Bala], [Bala, #], [#, 3150713], [3150713, (], [(, PDS], [PDS, )], [),   ], [  , ], [,   ]]

>> Trigrams: 
[[(, ), 1], [), 1, 2], [1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6], [5, 6, 7], [6, 7, 8], [7, 8, 9], [8, 9, 10], [9, 10, barChartDemo.py], [10, barChartDemo.py,     ], [barChartDemo.py,     , Prof.], [    , Prof., Arjun], [Prof., Arjun, V.], [Arjun, V., Bala], [V., Bala, #], [Bala, #, 3150713], [#, 3150713, (], [3150713, (, PDS], [(, PDS, )], [PDS, ),   ], [),   , ], [  , ,   ]]

>> Noun Phrases are: 
[() 1 2 3 4 5 6 7 8 9 10 barChartDemo.py     Prof. Arjun V. Bala, (PDS]

>> Named Entities are: 
[('Arjun V. Bala', 'PERSON'), ('PDS', 'ORG')]


============================ Sentence 111 =============================

Unit 04 – Data Visualization ‹#›   


>> Tokens are: 
[Unit, 04, –, Data, Visualization, ‹#›,  ] 

>> PoS Tags are: 
[('Unit', 'NOUN'), ('04', 'NUM'), ('–', 'PUNCT'), ('Data', 'PROPN'), ('Visualization', 'PROPN'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Unit', 'ROOT'), ('04', 'nummod'), ('–', 'punct'), ('Data', 'compound'), ('Visualization', 'appos'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[Unit, 04], [04, –], [–, Data], [Data, Visualization], [Visualization, ‹#›], [‹#›,  ]]

>> Trigrams: 
[[Unit, 04, –], [04, –, Data], [–, Data, Visualization], [Data, Visualization, ‹#›], [Visualization, ‹#›,  ]]

>> Noun Phrases are: 
[Unit, – Data Visualization]

>> Named Entities are: 
[('04', 'CARDINAL'), ('Data Visualization ‹#›', 'ORG')]


============================ Sentence 112 =============================

Histograms Histograms categorize data by breaking it into bins, where each bin contains a subset of the data range. 


>> Tokens are: 
[Histograms, Histograms, categorize, data, breaking, bins, ,, bin, contains, subset, data, range, .] 

>> PoS Tags are: 
[('Histograms', 'PROPN'), ('Histograms', 'PROPN'), ('categorize', 'VERB'), ('data', 'NOUN'), ('breaking', 'VERB'), ('bins', 'NOUN'), (',', 'PUNCT'), ('bin', 'NOUN'), ('contains', 'VERB'), ('subset', 'NOUN'), ('data', 'NOUN'), ('range', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Histograms', 'compound'), ('Histograms', 'nsubj'), ('categorize', 'ROOT'), ('data', 'dobj'), ('breaking', 'pcomp'), ('bins', 'pobj'), (',', 'punct'), ('bin', 'nsubj'), ('contains', 'relcl'), ('subset', 'dobj'), ('data', 'compound'), ('range', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Histograms, Histograms], [Histograms, categorize], [categorize, data], [data, breaking], [breaking, bins], [bins, ,], [,, bin], [bin, contains], [contains, subset], [subset, data], [data, range], [range, .]]

>> Trigrams: 
[[Histograms, Histograms, categorize], [Histograms, categorize, data], [categorize, data, breaking], [data, breaking, bins], [breaking, bins, ,], [bins, ,, bin], [,, bin, contains], [bin, contains, subset], [contains, subset, data], [subset, data, range], [data, range, .]]

>> Noun Phrases are: 
[Histograms Histograms, data, it, bins, each bin, a subset, the data range]

>> Named Entities are: 
[('Histograms Histograms', 'ORG'), ('bin', 'PERSON')]


============================ Sentence 113 =============================

A Histogram then displays the number of items in each bin so that you can see the distribution of data and the progression of data from bin to bin. 


>> Tokens are: 
[Histogram, displays, number, items, bin, distribution, data, progression, data, bin, bin, .] 

>> PoS Tags are: 
[('Histogram', 'PROPN'), ('displays', 'VERB'), ('number', 'NOUN'), ('items', 'NOUN'), ('bin', 'NOUN'), ('distribution', 'NOUN'), ('data', 'NOUN'), ('progression', 'NOUN'), ('data', 'NOUN'), ('bin', 'NOUN'), ('bin', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Histogram', 'nsubj'), ('displays', 'ROOT'), ('number', 'dobj'), ('items', 'pobj'), ('bin', 'pobj'), ('distribution', 'dobj'), ('data', 'pobj'), ('progression', 'conj'), ('data', 'pobj'), ('bin', 'pobj'), ('bin', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Histogram, displays], [displays, number], [number, items], [items, bin], [bin, distribution], [distribution, data], [data, progression], [progression, data], [data, bin], [bin, bin], [bin, .]]

>> Trigrams: 
[[Histogram, displays, number], [displays, number, items], [number, items, bin], [items, bin, distribution], [bin, distribution, data], [distribution, data, progression], [data, progression, data], [progression, data, bin], [data, bin, bin], [bin, bin, .]]

>> Noun Phrases are: 
[A Histogram, the number, items, each bin, you, the distribution, data, the progression, data, bin, bin]

>> Named Entities are: 
[('Histogram', 'ORG'), ('bin', 'PERSON')]


============================ Sentence 114 =============================

import matplotlib.pyplot as plt import numpy as np %matplotlib notebook cpis = np.random.randint(0,10,100) plt.hist(cpis,bins=10, histtype='stepfilled',align='mid',label='CPI Hist') plt.legend() plt.show 


>> Tokens are: 
[import, matplotlib.pyplot, plt, import, numpy, np, %, matplotlib, notebook, cpis, =, np.random.randint(0,10,100, ), plt.hist(cpis, ,, bins=10, ,, histtype='stepfilled',align='mid',label='CPI, Hist, ', ), plt.legend, (, ), plt.show] 

>> PoS Tags are: 
[('import', 'NOUN'), ('matplotlib.pyplot', 'NOUN'), ('plt', 'NOUN'), ('import', 'NOUN'), ('numpy', 'ADJ'), ('np', 'ADP'), ('%', 'NOUN'), ('matplotlib', 'ADJ'), ('notebook', 'NOUN'), ('cpis', 'NOUN'), ('=', 'SYM'), ('np.random.randint(0,10,100', 'ADJ'), (')', 'PUNCT'), ('plt.hist(cpis', 'NOUN'), (',', 'PUNCT'), ('bins=10', 'NOUN'), (',', 'PUNCT'), ("histtype='stepfilled',align='mid',label='CPI", 'VERB'), ('Hist', 'NOUN'), ("'", 'PUNCT'), (')', 'PUNCT'), ('plt.legend', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('plt.show', 'PROPN')] 

>> Dependency Tags are: 
[('import', 'compound'), ('matplotlib.pyplot', 'nsubj'), ('plt', 'compound'), ('import', 'pobj'), ('numpy', 'ccomp'), ('np', 'amod'), ('%', 'nmod'), ('matplotlib', 'amod'), ('notebook', 'compound'), ('cpis', 'pobj'), ('=', 'punct'), ('np.random.randint(0,10,100', 'ROOT'), (')', 'punct'), ('plt.hist(cpis', 'nsubj'), (',', 'punct'), ('bins=10', 'conj'), (',', 'punct'), ("histtype='stepfilled',align='mid',label='CPI", 'compound'), ('Hist', 'appos'), ("'", 'punct'), (')', 'punct'), ('plt.legend', 'appos'), ('(', 'punct'), (')', 'punct'), ('plt.show', 'punct')]

>> Bigrams: 
[[import, matplotlib.pyplot], [matplotlib.pyplot, plt], [plt, import], [import, numpy], [numpy, np], [np, %], [%, matplotlib], [matplotlib, notebook], [notebook, cpis], [cpis, =], [=, np.random.randint(0,10,100], [np.random.randint(0,10,100, )], [), plt.hist(cpis], [plt.hist(cpis, ,], [,, bins=10], [bins=10, ,], [,, histtype='stepfilled',align='mid',label='CPI], [histtype='stepfilled',align='mid',label='CPI, Hist], [Hist, '], [', )], [), plt.legend], [plt.legend, (], [(, )], [), plt.show]]

>> Trigrams: 
[[import, matplotlib.pyplot, plt], [matplotlib.pyplot, plt, import], [plt, import, numpy], [import, numpy, np], [numpy, np, %], [np, %, matplotlib], [%, matplotlib, notebook], [matplotlib, notebook, cpis], [notebook, cpis, =], [cpis, =, np.random.randint(0,10,100], [=, np.random.randint(0,10,100, )], [np.random.randint(0,10,100, ), plt.hist(cpis], [), plt.hist(cpis, ,], [plt.hist(cpis, ,, bins=10], [,, bins=10, ,], [bins=10, ,, histtype='stepfilled',align='mid',label='CPI], [,, histtype='stepfilled',align='mid',label='CPI, Hist], [histtype='stepfilled',align='mid',label='CPI, Hist, '], [Hist, ', )], [', ), plt.legend], [), plt.legend, (], [plt.legend, (, )], [(, ), plt.show]]

>> Noun Phrases are: 
[import matplotlib.pyplot, plt import, np %matplotlib notebook cpis, plt.hist(cpis, bins=10, histtype='stepfilled',align='mid',label='CPI Hist, ) plt.legend]

>> Named Entities are: 
[('plt.legend', 'PERSON')]


============================ Sentence 115 =============================

() 1 2 3 4 5   6 7 histDemo.py     Prof. Arjun V. Bala #3150713 (PDS)       


>> Tokens are: 
[(, ), 1, 2, 3, 4, 5,   , 6, 7, histDemo.py,     , Prof., Arjun, V., Bala, #, 3150713, (, PDS, ),   , ,   ] 

>> PoS Tags are: 
[('(', 'PUNCT'), (')', 'PUNCT'), ('1', 'NUM'), ('2', 'NUM'), ('3', 'NUM'), ('4', 'NUM'), ('5', 'NUM'), ('  ', 'SPACE'), ('6', 'NUM'), ('7', 'NUM'), ('histDemo.py', 'NUM'), ('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Arjun', 'PROPN'), ('V.', 'PROPN'), ('Bala', 'PROPN'), ('#', 'NOUN'), ('3150713', 'NUM'), ('(', 'PUNCT'), ('PDS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE')] 

>> Dependency Tags are: 
[('(', 'punct'), (')', 'punct'), ('1', 'compound'), ('2', 'nummod'), ('3', 'nummod'), ('4', 'appos'), ('5', 'appos'), ('  ', 'npadvmod'), ('6', 'nummod'), ('7', 'appos'), ('histDemo.py', 'nmod'), ('    ', 'nummod'), ('Prof.', 'compound'), ('Arjun', 'compound'), ('V.', 'compound'), ('Bala', 'nsubj'), ('#', 'nmod'), ('3150713', 'appos'), ('(', 'punct'), ('PDS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'punct')]

>> Bigrams: 
[[(, )], [), 1], [1, 2], [2, 3], [3, 4], [4, 5], [5,   ], [  , 6], [6, 7], [7, histDemo.py], [histDemo.py,     ], [    , Prof.], [Prof., Arjun], [Arjun, V.], [V., Bala], [Bala, #], [#, 3150713], [3150713, (], [(, PDS], [PDS, )], [),   ], [  , ], [,   ]]

>> Trigrams: 
[[(, ), 1], [), 1, 2], [1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5,   ], [5,   , 6], [  , 6, 7], [6, 7, histDemo.py], [7, histDemo.py,     ], [histDemo.py,     , Prof.], [    , Prof., Arjun], [Prof., Arjun, V.], [Arjun, V., Bala], [V., Bala, #], [Bala, #, 3150713], [#, 3150713, (], [3150713, (, PDS], [(, PDS, )], [PDS, ),   ], [),   , ], [  , ,   ]]

>> Noun Phrases are: 
[() 1 2 3 4 5   6 7 histDemo.py     Prof. Arjun V. Bala, (PDS]

>> Named Entities are: 
[('Arjun V. Bala', 'PERSON'), ('PDS', 'ORG')]


============================ Sentence 116 =============================

Unit 04 – Data Visualization ‹#›  Boxplots Boxplots provide a means of depicting groups of numbers through their quartiles. 


>> Tokens are: 
[Unit, 04, –, Data, Visualization, ‹#›,  , Boxplots, Boxplots, provide, means, depicting, groups, numbers, quartiles, .] 

>> PoS Tags are: 
[('Unit', 'NOUN'), ('04', 'NUM'), ('–', 'PUNCT'), ('Data', 'PROPN'), ('Visualization', 'PROPN'), ('‹#›', 'X'), (' ', 'SPACE'), ('Boxplots', 'PROPN'), ('Boxplots', 'PROPN'), ('provide', 'VERB'), ('means', 'NOUN'), ('depicting', 'VERB'), ('groups', 'NOUN'), ('numbers', 'NOUN'), ('quartiles', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Unit', 'npadvmod'), ('04', 'nummod'), ('–', 'punct'), ('Data', 'compound'), ('Visualization', 'appos'), ('‹#›', 'punct'), (' ', 'appos'), ('Boxplots', 'compound'), ('Boxplots', 'nsubj'), ('provide', 'ROOT'), ('means', 'dobj'), ('depicting', 'pcomp'), ('groups', 'dobj'), ('numbers', 'pobj'), ('quartiles', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Unit, 04], [04, –], [–, Data], [Data, Visualization], [Visualization, ‹#›], [‹#›,  ], [ , Boxplots], [Boxplots, Boxplots], [Boxplots, provide], [provide, means], [means, depicting], [depicting, groups], [groups, numbers], [numbers, quartiles], [quartiles, .]]

>> Trigrams: 
[[Unit, 04, –], [04, –, Data], [–, Data, Visualization], [Data, Visualization, ‹#›], [Visualization, ‹#›,  ], [‹#›,  , Boxplots], [ , Boxplots, Boxplots], [Boxplots, Boxplots, provide], [Boxplots, provide, means], [provide, means, depicting], [means, depicting, groups], [depicting, groups, numbers], [groups, numbers, quartiles], [numbers, quartiles, .]]

>> Noun Phrases are: 
[– Data Visualization, Boxplots Boxplots, a means, groups, numbers, their quartiles]

>> Named Entities are: 
[('04', 'CARDINAL'), ('Data Visualization', 'ORG')]


============================ Sentence 117 =============================

Quartiles means three points dividing a group into four equal parts. 


>> Tokens are: 
[Quartiles, means, points, dividing, group, equal, parts, .] 

>> PoS Tags are: 
[('Quartiles', 'NOUN'), ('means', 'VERB'), ('points', 'NOUN'), ('dividing', 'VERB'), ('group', 'NOUN'), ('equal', 'ADJ'), ('parts', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Quartiles', 'nsubj'), ('means', 'ROOT'), ('points', 'dobj'), ('dividing', 'acl'), ('group', 'dobj'), ('equal', 'amod'), ('parts', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Quartiles, means], [means, points], [points, dividing], [dividing, group], [group, equal], [equal, parts], [parts, .]]

>> Trigrams: 
[[Quartiles, means, points], [means, points, dividing], [points, dividing, group], [dividing, group, equal], [group, equal, parts], [equal, parts, .]]

>> Noun Phrases are: 
[Quartiles, three points, a group, four equal parts]

>> Named Entities are: 
[('three', 'CARDINAL'), ('four', 'CARDINAL')]


============================ Sentence 118 =============================

In boxplot, data will be divided in 4 part using the 3 points (25th percentile, median, 75th percentile)   


>> Tokens are: 
[boxplot, ,, data, divided, 4, 3, points, (, 25th, percentile, ,, median, ,, 75th, percentile, ),  ] 

>> PoS Tags are: 
[('boxplot', 'NOUN'), (',', 'PUNCT'), ('data', 'NOUN'), ('divided', 'VERB'), ('4', 'NUM'), ('3', 'NUM'), ('points', 'NOUN'), ('(', 'PUNCT'), ('25th', 'ADJ'), ('percentile', 'NOUN'), (',', 'PUNCT'), ('median', 'NOUN'), (',', 'PUNCT'), ('75th', 'ADJ'), ('percentile', 'NOUN'), (')', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('boxplot', 'pobj'), (',', 'punct'), ('data', 'nsubjpass'), ('divided', 'ROOT'), ('4', 'nummod'), ('3', 'nummod'), ('points', 'dobj'), ('(', 'punct'), ('25th', 'amod'), ('percentile', 'nmod'), (',', 'punct'), ('median', 'conj'), (',', 'punct'), ('75th', 'amod'), ('percentile', 'appos'), (')', 'punct'), (' ', 'dep')]

>> Bigrams: 
[[boxplot, ,], [,, data], [data, divided], [divided, 4], [4, 3], [3, points], [points, (], [(, 25th], [25th, percentile], [percentile, ,], [,, median], [median, ,], [,, 75th], [75th, percentile], [percentile, )], [),  ]]

>> Trigrams: 
[[boxplot, ,, data], [,, data, divided], [data, divided, 4], [divided, 4, 3], [4, 3, points], [3, points, (], [points, (, 25th], [(, 25th, percentile], [25th, percentile, ,], [percentile, ,, median], [,, median, ,], [median, ,, 75th], [,, 75th, percentile], [75th, percentile, )], [percentile, ),  ]]

>> Noun Phrases are: 
[boxplot, data, 4 part, the 3 points, 25th percentile, median, 75th percentile]

>> Named Entities are: 
[('4', 'CARDINAL'), ('3', 'CARDINAL'), ('25th', 'ORDINAL'), ('75th', 'ORDINAL')]


============================ Sentence 119 =============================

0 -1 


>> Tokens are: 
[0, -1] 

>> PoS Tags are: 
[('0', 'NUM'), ('-1', 'NOUN')] 

>> Dependency Tags are: 
[('0', 'nummod'), ('-1', 'ROOT')]

>> Bigrams: 
[[0, -1]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[0 -1]

>> Named Entities are: 
[('0', 'CARDINAL')]


============================ Sentence 120 =============================

-2 


>> Tokens are: 
[-2] 

>> PoS Tags are: 
[('-2', 'INTJ')] 

>> Dependency Tags are: 
[('-2', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 121 =============================

-3 -4 -5 5 4 3 2 1  Q1 (25th Percentile) Q3 


>> Tokens are: 
[-3, -4, -5, 5, 4, 3, 2, 1,  , Q1, (, 25th, Percentile, ), Q3] 

>> PoS Tags are: 
[('-3', 'INTJ'), ('-4', 'NOUN'), ('-5', 'INTJ'), ('5', 'NUM'), ('4', 'NUM'), ('3', 'NUM'), ('2', 'NUM'), ('1', 'NUM'), (' ', 'SPACE'), ('Q1', 'PROPN'), ('(', 'PUNCT'), ('25th', 'ADJ'), ('Percentile', 'PROPN'), (')', 'PUNCT'), ('Q3', 'PROPN')] 

>> Dependency Tags are: 
[('-3', 'intj'), ('-4', 'intj'), ('-5', 'intj'), ('5', 'nummod'), ('4', 'appos'), ('3', 'appos'), ('2', 'appos'), ('1', 'appos'), (' ', 'appos'), ('Q1', 'ROOT'), ('(', 'punct'), ('25th', 'amod'), ('Percentile', 'nmod'), (')', 'punct'), ('Q3', 'appos')]

>> Bigrams: 
[[-3, -4], [-4, -5], [-5, 5], [5, 4], [4, 3], [3, 2], [2, 1], [1,  ], [ , Q1], [Q1, (], [(, 25th], [25th, Percentile], [Percentile, )], [), Q3]]

>> Trigrams: 
[[-3, -4, -5], [-4, -5, 5], [-5, 5, 4], [5, 4, 3], [4, 3, 2], [3, 2, 1], [2, 1,  ], [1,  , Q1], [ , Q1, (], [Q1, (, 25th], [(, 25th, Percentile], [25th, Percentile, )], [Percentile, ), Q3]]

>> Noun Phrases are: 
[-3 -4 -5 5 4 3 2 1  Q1, (25th Percentile) Q3]

>> Named Entities are: 
[('Q3', 'CARDINAL')]


============================ Sentence 122 =============================

(75th Percentile) Q2 (50th Percentile) Interquartile Range (IQR) 


>> Tokens are: 
[(, 75th, Percentile, ), Q2, (, 50th, Percentile, ), Interquartile, Range, (, IQR, )] 

>> PoS Tags are: 
[('(', 'PUNCT'), ('75th', 'ADJ'), ('Percentile', 'PROPN'), (')', 'PUNCT'), ('Q2', 'PROPN'), ('(', 'PUNCT'), ('50th', 'ADJ'), ('Percentile', 'PROPN'), (')', 'PUNCT'), ('Interquartile', 'PROPN'), ('Range', 'PROPN'), ('(', 'PUNCT'), ('IQR', 'PROPN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('(', 'punct'), ('75th', 'amod'), ('Percentile', 'nmod'), (')', 'punct'), ('Q2', 'ROOT'), ('(', 'punct'), ('50th', 'amod'), ('Percentile', 'nmod'), (')', 'punct'), ('Interquartile', 'compound'), ('Range', 'appos'), ('(', 'punct'), ('IQR', 'appos'), (')', 'punct')]

>> Bigrams: 
[[(, 75th], [75th, Percentile], [Percentile, )], [), Q2], [Q2, (], [(, 50th], [50th, Percentile], [Percentile, )], [), Interquartile], [Interquartile, Range], [Range, (], [(, IQR], [IQR, )]]

>> Trigrams: 
[[(, 75th, Percentile], [75th, Percentile, )], [Percentile, ), Q2], [), Q2, (], [Q2, (, 50th], [(, 50th, Percentile], [50th, Percentile, )], [Percentile, ), Interquartile], [), Interquartile, Range], [Interquartile, Range, (], [Range, (, IQR], [(, IQR, )]]

>> Noun Phrases are: 
[(75th Percentile) Q2, 50th Percentile) Interquartile Range, IQR]

>> Named Entities are: 
[('Q2', 'PERSON'), ('50th', 'ORDINAL'), ('Interquartile Range', 'PERSON'), ('IQR', 'ORG')]


============================ Sentence 123 =============================

Median Minimum (Q1 – 1.5 * IQR) 


>> Tokens are: 
[Median, Minimum, (, Q1, –, 1.5, *, IQR, )] 

>> PoS Tags are: 
[('Median', 'PROPN'), ('Minimum', 'PROPN'), ('(', 'PUNCT'), ('Q1', 'PROPN'), ('–', 'PUNCT'), ('1.5', 'NUM'), ('*', 'PUNCT'), ('IQR', 'PROPN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('Median', 'compound'), ('Minimum', 'ROOT'), ('(', 'punct'), ('Q1', 'appos'), ('–', 'punct'), ('1.5', 'appos'), ('*', 'punct'), ('IQR', 'appos'), (')', 'punct')]

>> Bigrams: 
[[Median, Minimum], [Minimum, (], [(, Q1], [Q1, –], [–, 1.5], [1.5, *], [*, IQR], [IQR, )]]

>> Trigrams: 
[[Median, Minimum, (], [Minimum, (, Q1], [(, Q1, –], [Q1, –, 1.5], [–, 1.5, *], [1.5, *, IQR], [*, IQR, )]]

>> Noun Phrases are: 
[Median Minimum, Q1, IQR]

>> Named Entities are: 
[('1.5', 'CARDINAL'), ('IQR', 'ORG')]


============================ Sentence 124 =============================

Maximum (Q3 + 1.5 * IQR) 


>> Tokens are: 
[Maximum, (, Q3, +, 1.5, *, IQR, )] 

>> PoS Tags are: 
[('Maximum', 'PROPN'), ('(', 'PUNCT'), ('Q3', 'PROPN'), ('+', 'CCONJ'), ('1.5', 'NUM'), ('*', 'PUNCT'), ('IQR', 'PROPN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('Maximum', 'ROOT'), ('(', 'punct'), ('Q3', 'appos'), ('+', 'punct'), ('1.5', 'appos'), ('*', 'punct'), ('IQR', 'appos'), (')', 'punct')]

>> Bigrams: 
[[Maximum, (], [(, Q3], [Q3, +], [+, 1.5], [1.5, *], [*, IQR], [IQR, )]]

>> Trigrams: 
[[Maximum, (, Q3], [(, Q3, +], [Q3, +, 1.5], [+, 1.5, *], [1.5, *, IQR], [*, IQR, )]]

>> Noun Phrases are: 
[Maximum, Q3, * IQR]

>> Named Entities are: 
[('IQR', 'ORG')]


============================ Sentence 125 =============================

     Outliers Outliers Whiskers Whiskers                                    Prof. Arjun V. Bala 


>> Tokens are: 
[     , Outliers, Outliers, Whiskers, Whiskers,                                    , Prof., Arjun, V., Bala] 

>> PoS Tags are: 
[('     ', 'SPACE'), ('Outliers', 'PROPN'), ('Outliers', 'PROPN'), ('Whiskers', 'PROPN'), ('Whiskers', 'PROPN'), ('                                   ', 'SPACE'), ('Prof.', 'PROPN'), ('Arjun', 'PROPN'), ('V.', 'PROPN'), ('Bala', 'PROPN')] 

>> Dependency Tags are: 
[('     ', 'compound'), ('Outliers', 'compound'), ('Outliers', 'compound'), ('Whiskers', 'compound'), ('Whiskers', 'ROOT'), ('                                   ', 'nummod'), ('Prof.', 'compound'), ('Arjun', 'compound'), ('V.', 'compound'), ('Bala', 'appos')]

>> Bigrams: 
[[     , Outliers], [Outliers, Outliers], [Outliers, Whiskers], [Whiskers, Whiskers], [Whiskers,                                    ], [                                   , Prof.], [Prof., Arjun], [Arjun, V.], [V., Bala]]

>> Trigrams: 
[[     , Outliers, Outliers], [Outliers, Outliers, Whiskers], [Outliers, Whiskers, Whiskers], [Whiskers, Whiskers,                                    ], [Whiskers,                                    , Prof.], [                                   , Prof., Arjun], [Prof., Arjun, V.], [Arjun, V., Bala]]

>> Noun Phrases are: 
[     Outliers Outliers Whiskers Whiskers, Prof. Arjun V. Bala]

>> Named Entities are: 
[('Arjun V. Bala', 'PERSON')]


============================ Sentence 126 =============================

#3150713 (PDS)      Unit 04 


>> Tokens are: 
[#, 3150713, (, PDS, ),   , ,   , Unit, 04] 

>> PoS Tags are: 
[('#', 'NOUN'), ('3150713', 'NUM'), ('(', 'PUNCT'), ('PDS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('04', 'NUM')] 

>> Dependency Tags are: 
[('#', 'nmod'), ('3150713', 'nummod'), ('(', 'punct'), ('PDS', 'appos'), (')', 'punct'), ('  ', 'nsubj'), ('\uf077', 'ROOT'), ('  ', 'punct'), ('Unit', 'npadvmod'), ('04', 'nummod')]

>> Bigrams: 
[[#, 3150713], [3150713, (], [(, PDS], [PDS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 04]]

>> Trigrams: 
[[#, 3150713, (], [3150713, (, PDS], [(, PDS, )], [PDS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 04]]

>> Noun Phrases are: 
[(PDS]

>> Named Entities are: 
[('PDS', 'ORG'), ('04', 'CARDINAL')]


============================ Sentence 127 =============================

–Data Visualization ‹#›  Boxplot (Cont.) 


>> Tokens are: 
[–, Data, Visualization, ‹#›,  , Boxplot, (, Cont, ., )] 

>> PoS Tags are: 
[('–', 'PUNCT'), ('Data', 'PROPN'), ('Visualization', 'PROPN'), ('‹#›', 'X'), (' ', 'SPACE'), ('Boxplot', 'PROPN'), ('(', 'PUNCT'), ('Cont', 'PROPN'), ('.', 'PUNCT'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('–', 'punct'), ('Data', 'compound'), ('Visualization', 'ROOT'), ('‹#›', 'punct'), (' ', 'appos'), ('Boxplot', 'appos'), ('(', 'punct'), ('Cont', 'appos'), ('.', 'punct'), (')', 'punct')]

>> Bigrams: 
[[–, Data], [Data, Visualization], [Visualization, ‹#›], [‹#›,  ], [ , Boxplot], [Boxplot, (], [(, Cont], [Cont, .], [., )]]

>> Trigrams: 
[[–, Data, Visualization], [Data, Visualization, ‹#›], [Visualization, ‹#›,  ], [‹#›,  , Boxplot], [ , Boxplot, (], [Boxplot, (, Cont], [(, Cont, .], [Cont, ., )]]

>> Noun Phrases are: 
[–Data Visualization, Boxplot, (Cont]

>> Named Entities are: 
[('Data Visualization', 'ORG'), ('Boxplot', 'ORG'), ('Cont', 'GPE')]


============================ Sentence 128 =============================

Boxplot basically used to detect outliers in the data, lets see an example where we need boxplot. 


>> Tokens are: 
[Boxplot, basically, detect, outliers, data, ,, lets, example, need, boxplot, .] 

>> PoS Tags are: 
[('Boxplot', 'PROPN'), ('basically', 'ADV'), ('detect', 'VERB'), ('outliers', 'NOUN'), ('data', 'NOUN'), (',', 'PUNCT'), ('lets', 'VERB'), ('example', 'NOUN'), ('need', 'VERB'), ('boxplot', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Boxplot', 'nsubj'), ('basically', 'advmod'), ('detect', 'xcomp'), ('outliers', 'dobj'), ('data', 'pobj'), (',', 'punct'), ('lets', 'nsubj'), ('example', 'dobj'), ('need', 'relcl'), ('boxplot', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Boxplot, basically], [basically, detect], [detect, outliers], [outliers, data], [data, ,], [,, lets], [lets, example], [example, need], [need, boxplot], [boxplot, .]]

>> Trigrams: 
[[Boxplot, basically, detect], [basically, detect, outliers], [detect, outliers, data], [outliers, data, ,], [data, ,, lets], [,, lets, example], [lets, example, need], [example, need, boxplot], [need, boxplot, .]]

>> Noun Phrases are: 
[Boxplot, outliers, the data, an example, we, boxplot]

>> Named Entities are: 
[('Boxplot', 'PERSON')]


============================ Sentence 129 =============================

We have a dataset where we have time taken to check the paper, and we want to find the faculty which either takes more time or very little time to check the paper. 


>> Tokens are: 
[dataset, time, taken, check, paper, ,, want, find, faculty, takes, time, little, time, check, paper, .] 

>> PoS Tags are: 
[('dataset', 'NOUN'), ('time', 'NOUN'), ('taken', 'VERB'), ('check', 'VERB'), ('paper', 'NOUN'), (',', 'PUNCT'), ('want', 'VERB'), ('find', 'VERB'), ('faculty', 'NOUN'), ('takes', 'VERB'), ('time', 'NOUN'), ('little', 'ADJ'), ('time', 'NOUN'), ('check', 'VERB'), ('paper', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('dataset', 'dobj'), ('time', 'dobj'), ('taken', 'acl'), ('check', 'advcl'), ('paper', 'dobj'), (',', 'punct'), ('want', 'conj'), ('find', 'xcomp'), ('faculty', 'dobj'), ('takes', 'relcl'), ('time', 'dobj'), ('little', 'amod'), ('time', 'conj'), ('check', 'xcomp'), ('paper', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[dataset, time], [time, taken], [taken, check], [check, paper], [paper, ,], [,, want], [want, find], [find, faculty], [faculty, takes], [takes, time], [time, little], [little, time], [time, check], [check, paper], [paper, .]]

>> Trigrams: 
[[dataset, time, taken], [time, taken, check], [taken, check, paper], [check, paper, ,], [paper, ,, want], [,, want, find], [want, find, faculty], [find, faculty, takes], [faculty, takes, time], [takes, time, little], [time, little, time], [little, time, check], [time, check, paper], [check, paper, .]]

>> Noun Phrases are: 
[We, a dataset, we, time, the paper, we, the faculty, more time, very little time, the paper]

>> Named Entities are: 
[]


============================ Sentence 130 =============================

      We can specify other parameters like widths, which specify the width of the box notch, default is False vert, set to 0 if you want to have horizontal graph import pandas as pd import matplotlib.pyplot as plt %matplotlib inline timetaken = pd. 


>> Tokens are: 
[      , specify, parameters, like, widths, ,, specify, width, box, notch, ,, default, False, vert, ,, set, 0, want, horizontal, graph, import, pandas, pd, import, matplotlib.pyplot, plt, %, matplotlib, inline, timetaken, =, pd, .] 

>> PoS Tags are: 
[('      ', 'SPACE'), ('specify', 'VERB'), ('parameters', 'NOUN'), ('like', 'ADP'), ('widths', 'NOUN'), (',', 'PUNCT'), ('specify', 'VERB'), ('width', 'NOUN'), ('box', 'NOUN'), ('notch', 'NOUN'), (',', 'PUNCT'), ('default', 'NOUN'), ('False', 'ADJ'), ('vert', 'NOUN'), (',', 'PUNCT'), ('set', 'VERB'), ('0', 'NUM'), ('want', 'VERB'), ('horizontal', 'ADJ'), ('graph', 'NOUN'), ('import', 'NOUN'), ('pandas', 'VERB'), ('pd', 'PROPN'), ('import', 'NOUN'), ('matplotlib.pyplot', 'NOUN'), ('plt', 'NOUN'), ('%', 'NOUN'), ('matplotlib', 'ADJ'), ('inline', 'NOUN'), ('timetaken', 'VERB'), ('=', 'SYM'), ('pd', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('      ', 'dep'), ('specify', 'ccomp'), ('parameters', 'dobj'), ('like', 'prep'), ('widths', 'pobj'), (',', 'punct'), ('specify', 'relcl'), ('width', 'dobj'), ('box', 'compound'), ('notch', 'pobj'), (',', 'punct'), ('default', 'nsubj'), ('False', 'amod'), ('vert', 'attr'), (',', 'punct'), ('set', 'dep'), ('0', 'pobj'), ('want', 'advcl'), ('horizontal', 'amod'), ('graph', 'compound'), ('import', 'nsubj'), ('pandas', 'ccomp'), ('pd', 'compound'), ('import', 'compound'), ('matplotlib.pyplot', 'pobj'), ('plt', 'compound'), ('%', 'nmod'), ('matplotlib', 'amod'), ('inline', 'pobj'), ('timetaken', 'advcl'), ('=', 'punct'), ('pd', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[      , specify], [specify, parameters], [parameters, like], [like, widths], [widths, ,], [,, specify], [specify, width], [width, box], [box, notch], [notch, ,], [,, default], [default, False], [False, vert], [vert, ,], [,, set], [set, 0], [0, want], [want, horizontal], [horizontal, graph], [graph, import], [import, pandas], [pandas, pd], [pd, import], [import, matplotlib.pyplot], [matplotlib.pyplot, plt], [plt, %], [%, matplotlib], [matplotlib, inline], [inline, timetaken], [timetaken, =], [=, pd], [pd, .]]

>> Trigrams: 
[[      , specify, parameters], [specify, parameters, like], [parameters, like, widths], [like, widths, ,], [widths, ,, specify], [,, specify, width], [specify, width, box], [width, box, notch], [box, notch, ,], [notch, ,, default], [,, default, False], [default, False, vert], [False, vert, ,], [vert, ,, set], [,, set, 0], [set, 0, want], [0, want, horizontal], [want, horizontal, graph], [horizontal, graph, import], [graph, import, pandas], [import, pandas, pd], [pandas, pd, import], [pd, import, matplotlib.pyplot], [import, matplotlib.pyplot, plt], [matplotlib.pyplot, plt, %], [plt, %, matplotlib], [%, matplotlib, inline], [matplotlib, inline, timetaken], [inline, timetaken, =], [timetaken, =, pd], [=, pd, .]]

>> Noun Phrases are: 
[We, other parameters, widths, the width, the box notch, default, False vert, you, horizontal graph import, pd import matplotlib.pyplot, plt %matplotlib inline, = pd]

>> Named Entities are: 
[('0', 'CARDINAL')]


============================ Sentence 131 =============================

Series([50,45,52,63,70,21,56,68,54,57,35,62,65,92,32]) plt.boxplot(timetaken) 1 2 3 4   5 boxDemo.py     Prof. Arjun V. Bala 


>> Tokens are: 
[Series([50,45,52,63,70,21,56,68,54,57,35,62,65,92,32, ], ), plt.boxplot(timetaken, ), 1, 2, 3, 4,   , 5, boxDemo.py,     , Prof., Arjun, V., Bala] 

>> PoS Tags are: 
[('Series([50,45,52,63,70,21,56,68,54,57,35,62,65,92,32', 'X'), (']', 'PUNCT'), (')', 'PUNCT'), ('plt.boxplot(timetaken', 'NOUN'), (')', 'PUNCT'), ('1', 'NUM'), ('2', 'NUM'), ('3', 'NUM'), ('4', 'NUM'), ('  ', 'SPACE'), ('5', 'NUM'), ('boxDemo.py', 'NOUN'), ('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Arjun', 'PROPN'), ('V.', 'PROPN'), ('Bala', 'PROPN')] 

>> Dependency Tags are: 
[('Series([50,45,52,63,70,21,56,68,54,57,35,62,65,92,32', 'dep'), (']', 'punct'), (')', 'punct'), ('plt.boxplot(timetaken', 'ROOT'), (')', 'punct'), ('1', 'compound'), ('2', 'nummod'), ('3', 'nummod'), ('4', 'appos'), ('  ', 'npadvmod'), ('5', 'nummod'), ('boxDemo.py', 'punct'), ('    ', 'compound'), ('Prof.', 'compound'), ('Arjun', 'compound'), ('V.', 'compound'), ('Bala', 'dative')]

>> Bigrams: 
[[Series([50,45,52,63,70,21,56,68,54,57,35,62,65,92,32, ]], [], )], [), plt.boxplot(timetaken], [plt.boxplot(timetaken, )], [), 1], [1, 2], [2, 3], [3, 4], [4,   ], [  , 5], [5, boxDemo.py], [boxDemo.py,     ], [    , Prof.], [Prof., Arjun], [Arjun, V.], [V., Bala]]

>> Trigrams: 
[[Series([50,45,52,63,70,21,56,68,54,57,35,62,65,92,32, ], )], [], ), plt.boxplot(timetaken], [), plt.boxplot(timetaken, )], [plt.boxplot(timetaken, ), 1], [), 1, 2], [1, 2, 3], [2, 3, 4], [3, 4,   ], [4,   , 5], [  , 5, boxDemo.py], [5, boxDemo.py,     ], [boxDemo.py,     , Prof.], [    , Prof., Arjun], [Prof., Arjun, V.], [Arjun, V., Bala]]

>> Noun Phrases are: 
[Series([50,45,52,63,70,21,56,68,54,57,35,62,65,92,32]) plt.boxplot(timetaken,     Prof. Arjun V. Bala]

>> Named Entities are: 
[('1 2 3 4', 'CARDINAL'), ('Arjun V. Bala', 'PERSON')]


============================ Sentence 132 =============================

#3150713 (PDS)      Unit 04 


>> Tokens are: 
[#, 3150713, (, PDS, ),   , ,   , Unit, 04] 

>> PoS Tags are: 
[('#', 'NOUN'), ('3150713', 'NUM'), ('(', 'PUNCT'), ('PDS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('04', 'NUM')] 

>> Dependency Tags are: 
[('#', 'nmod'), ('3150713', 'nummod'), ('(', 'punct'), ('PDS', 'appos'), (')', 'punct'), ('  ', 'nsubj'), ('\uf077', 'ROOT'), ('  ', 'punct'), ('Unit', 'npadvmod'), ('04', 'nummod')]

>> Bigrams: 
[[#, 3150713], [3150713, (], [(, PDS], [PDS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 04]]

>> Trigrams: 
[[#, 3150713, (], [3150713, (, PDS], [(, PDS, )], [PDS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 04]]

>> Noun Phrases are: 
[(PDS]

>> Named Entities are: 
[('PDS', 'ORG'), ('04', 'CARDINAL')]


============================ Sentence 133 =============================

– Data Visualization ‹#›   


>> Tokens are: 
[–, Data, Visualization, ‹#›,  ] 

>> PoS Tags are: 
[('–', 'PUNCT'), ('Data', 'PROPN'), ('Visualization', 'PROPN'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('–', 'punct'), ('Data', 'compound'), ('Visualization', 'ROOT'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[–, Data], [Data, Visualization], [Visualization, ‹#›], [‹#›,  ]]

>> Trigrams: 
[[–, Data, Visualization], [Data, Visualization, ‹#›], [Visualization, ‹#›,  ]]

>> Noun Phrases are: 
[– Data Visualization]

>> Named Entities are: 
[('Data Visualization', 'ORG')]


============================ Sentence 134 =============================

Scatter Plot A scatter plot is a type of plot that shows the data as a collection of points. 


>> Tokens are: 
[Scatter, Plot, scatter, plot, type, plot, shows, data, collection, points, .] 

>> PoS Tags are: 
[('Scatter', 'PROPN'), ('Plot', 'PROPN'), ('scatter', 'NOUN'), ('plot', 'NOUN'), ('type', 'NOUN'), ('plot', 'NOUN'), ('shows', 'VERB'), ('data', 'NOUN'), ('collection', 'NOUN'), ('points', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Scatter', 'compound'), ('Plot', 'compound'), ('scatter', 'compound'), ('plot', 'nsubj'), ('type', 'attr'), ('plot', 'pobj'), ('shows', 'relcl'), ('data', 'dobj'), ('collection', 'pobj'), ('points', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Scatter, Plot], [Plot, scatter], [scatter, plot], [plot, type], [type, plot], [plot, shows], [shows, data], [data, collection], [collection, points], [points, .]]

>> Trigrams: 
[[Scatter, Plot, scatter], [Plot, scatter, plot], [scatter, plot, type], [plot, type, plot], [type, plot, shows], [plot, shows, data], [shows, data, collection], [data, collection, points], [collection, points, .]]

>> Noun Phrases are: 
[Scatter Plot A scatter plot, a type, plot, the data, a collection, points]

>> Named Entities are: 
[]


============================ Sentence 135 =============================

The position of a point depends on its two-dimensional value, where each value is a position on either the horizontal or vertical dimension. 


>> Tokens are: 
[position, point, depends, -, dimensional, value, ,, value, position, horizontal, vertical, dimension, .] 

>> PoS Tags are: 
[('position', 'NOUN'), ('point', 'NOUN'), ('depends', 'VERB'), ('-', 'PUNCT'), ('dimensional', 'ADJ'), ('value', 'NOUN'), (',', 'PUNCT'), ('value', 'NOUN'), ('position', 'NOUN'), ('horizontal', 'ADJ'), ('vertical', 'ADJ'), ('dimension', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('position', 'nsubj'), ('point', 'pobj'), ('depends', 'ROOT'), ('-', 'punct'), ('dimensional', 'amod'), ('value', 'pobj'), (',', 'punct'), ('value', 'nsubj'), ('position', 'attr'), ('horizontal', 'amod'), ('vertical', 'conj'), ('dimension', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[position, point], [point, depends], [depends, -], [-, dimensional], [dimensional, value], [value, ,], [,, value], [value, position], [position, horizontal], [horizontal, vertical], [vertical, dimension], [dimension, .]]

>> Trigrams: 
[[position, point, depends], [point, depends, -], [depends, -, dimensional], [-, dimensional, value], [dimensional, value, ,], [value, ,, value], [,, value, position], [value, position, horizontal], [position, horizontal, vertical], [horizontal, vertical, dimension], [vertical, dimension, .]]

>> Noun Phrases are: 
[The position, a point, its two-dimensional value, each value, a position, either the horizontal or vertical dimension]

>> Named Entities are: 
[('two', 'CARDINAL')]


============================ Sentence 136 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[('\xa0', 'SPACE')] 

>> Dependency Tags are: 
[('\xa0', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 137 =============================

It is really useful to study the relationship/pattern between variables. 


>> Tokens are: 
[useful, study,  , relationship, /, pattern,  , variables, .] 

>> PoS Tags are: 
[('useful', 'ADJ'), ('study', 'VERB'), ('\xa0', 'SPACE'), ('relationship', 'NOUN'), ('/', 'SYM'), ('pattern', 'NOUN'), ('\xa0', 'SPACE'), ('variables', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('useful', 'acomp'), ('study', 'xcomp'), ('\xa0', 'compound'), ('relationship', 'nmod'), ('/', 'punct'), ('pattern', 'compound'), ('\xa0', 'dobj'), ('variables', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[useful, study], [study,  ], [ , relationship], [relationship, /], [/, pattern], [pattern,  ], [ , variables], [variables, .]]

>> Trigrams: 
[[useful, study,  ], [study,  , relationship], [ , relationship, /], [relationship, /, pattern], [/, pattern,  ], [pattern,  , variables], [ , variables, .]]

>> Noun Phrases are: 
[It, variables]

>> Named Entities are: 
[]


============================ Sentence 138 =============================

import matplotlib.pyplot as plt import pandas as pd %matplotlib inline df = pd.read_csv('insurance.csv') plt.scatter(df['bmi'], df['charges']) 


>> Tokens are: 
[import, matplotlib.pyplot, plt, import, pandas, pd, %, matplotlib, inline, df, =, pd.read_csv('insurance.csv, ', ), plt.scatter(df['bmi, ', ], ,, df['charges, ', ], )] 

>> PoS Tags are: 
[('import', 'NOUN'), ('matplotlib.pyplot', 'NOUN'), ('plt', 'NOUN'), ('import', 'NOUN'), ('pandas', 'VERB'), ('pd', 'NOUN'), ('%', 'NOUN'), ('matplotlib', 'ADJ'), ('inline', 'ADJ'), ('df', 'NOUN'), ('=', 'PROPN'), ("pd.read_csv('insurance.csv", 'PROPN'), ("'", 'PUNCT'), (')', 'PUNCT'), ("plt.scatter(df['bmi", 'PROPN'), ("'", 'PUNCT'), (']', 'PUNCT'), (',', 'PUNCT'), ("df['charges", 'NOUN'), ("'", 'PUNCT'), (']', 'PUNCT'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('import', 'compound'), ('matplotlib.pyplot', 'nsubj'), ('plt', 'compound'), ('import', 'pobj'), ('pandas', 'ROOT'), ('pd', 'nmod'), ('%', 'nmod'), ('matplotlib', 'amod'), ('inline', 'amod'), ('df', 'compound'), ('=', 'compound'), ("pd.read_csv('insurance.csv", 'pobj'), ("'", 'punct'), (')', 'punct'), ("plt.scatter(df['bmi", 'dep'), ("'", 'punct'), (']', 'punct'), (',', 'punct'), ("df['charges", 'punct'), ("'", 'punct'), (']', 'punct'), (')', 'punct')]

>> Bigrams: 
[[import, matplotlib.pyplot], [matplotlib.pyplot, plt], [plt, import], [import, pandas], [pandas, pd], [pd, %], [%, matplotlib], [matplotlib, inline], [inline, df], [df, =], [=, pd.read_csv('insurance.csv], [pd.read_csv('insurance.csv, '], [', )], [), plt.scatter(df['bmi], [plt.scatter(df['bmi, '], [', ]], [], ,], [,, df['charges], [df['charges, '], [', ]], [], )]]

>> Trigrams: 
[[import, matplotlib.pyplot, plt], [matplotlib.pyplot, plt, import], [plt, import, pandas], [import, pandas, pd], [pandas, pd, %], [pd, %, matplotlib], [%, matplotlib, inline], [matplotlib, inline, df], [inline, df, =], [df, =, pd.read_csv('insurance.csv], [=, pd.read_csv('insurance.csv, '], [pd.read_csv('insurance.csv, ', )], [', ), plt.scatter(df['bmi], [), plt.scatter(df['bmi, '], [plt.scatter(df['bmi, ', ]], [', ], ,], [], ,, df['charges], [,, df['charges, '], [df['charges, ', ]], [', ], )]]

>> Noun Phrases are: 
[import matplotlib.pyplot, plt import, pd %matplotlib inline df = pd.read_csv('insurance.csv]

>> Named Entities are: 
[]


============================ Sentence 139 =============================

plt.show() 1 2 3 4 5 6 histDemo.py     Prof. Arjun V. Bala 


>> Tokens are: 
[plt.show, (, ), 1, 2, 3, 4, 5, 6, histDemo.py,     , Prof., Arjun, V., Bala] 

>> PoS Tags are: 
[('plt.show', 'PROPN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('1', 'NUM'), ('2', 'NUM'), ('3', 'NUM'), ('4', 'NUM'), ('5', 'NUM'), ('6', 'NUM'), ('histDemo.py', 'NUM'), ('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Arjun', 'PROPN'), ('V.', 'PROPN'), ('Bala', 'PROPN')] 

>> Dependency Tags are: 
[('plt.show', 'dep'), ('(', 'punct'), (')', 'punct'), ('1', 'compound'), ('2', 'nummod'), ('3', 'appos'), ('4', 'appos'), ('5', 'appos'), ('6', 'appos'), ('histDemo.py', 'nmod'), ('    ', 'nummod'), ('Prof.', 'compound'), ('Arjun', 'compound'), ('V.', 'compound'), ('Bala', 'ROOT')]

>> Bigrams: 
[[plt.show, (], [(, )], [), 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, histDemo.py], [histDemo.py,     ], [    , Prof.], [Prof., Arjun], [Arjun, V.], [V., Bala]]

>> Trigrams: 
[[plt.show, (, )], [(, ), 1], [), 1, 2], [1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6], [5, 6, histDemo.py], [6, histDemo.py,     ], [histDemo.py,     , Prof.], [    , Prof., Arjun], [Prof., Arjun, V.], [Arjun, V., Bala]]

>> Noun Phrases are: 
[plt.show() 1 2 3 4 5 6 histDemo.py     Prof. Arjun V. Bala]

>> Named Entities are: 
[('Arjun V. Bala', 'PERSON')]


============================ Sentence 140 =============================

#3150713 (PDS)      Unit 04 


>> Tokens are: 
[#, 3150713, (, PDS, ),   , ,   , Unit, 04] 

>> PoS Tags are: 
[('#', 'NOUN'), ('3150713', 'NUM'), ('(', 'PUNCT'), ('PDS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('04', 'NUM')] 

>> Dependency Tags are: 
[('#', 'nmod'), ('3150713', 'nummod'), ('(', 'punct'), ('PDS', 'appos'), (')', 'punct'), ('  ', 'nsubj'), ('\uf077', 'ROOT'), ('  ', 'punct'), ('Unit', 'npadvmod'), ('04', 'nummod')]

>> Bigrams: 
[[#, 3150713], [3150713, (], [(, PDS], [PDS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 04]]

>> Trigrams: 
[[#, 3150713, (], [3150713, (, PDS], [(, PDS, )], [PDS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 04]]

>> Noun Phrases are: 
[(PDS]

>> Named Entities are: 
[('PDS', 'ORG'), ('04', 'CARDINAL')]


============================ Sentence 141 =============================

– Data Visualization ‹#›   


>> Tokens are: 
[–, Data, Visualization, ‹#›,  ] 

>> PoS Tags are: 
[('–', 'PUNCT'), ('Data', 'PROPN'), ('Visualization', 'PROPN'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('–', 'punct'), ('Data', 'compound'), ('Visualization', 'ROOT'), ('‹#›', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[–, Data], [Data, Visualization], [Visualization, ‹#›], [‹#›,  ]]

>> Trigrams: 
[[–, Data, Visualization], [Data, Visualization, ‹#›], [Visualization, ‹#›,  ]]

>> Noun Phrases are: 
[– Data Visualization]

>> Named Entities are: 
[('Data Visualization', 'ORG')]


============================ Sentence 142 =============================

Scatter Plot (Cont.) 


>> Tokens are: 
[Scatter, Plot, (, Cont, ., )] 

>> PoS Tags are: 
[('Scatter', 'PROPN'), ('Plot', 'PROPN'), ('(', 'PUNCT'), ('Cont', 'PROPN'), ('.', 'PUNCT'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('Scatter', 'compound'), ('Plot', 'ROOT'), ('(', 'punct'), ('Cont', 'appos'), ('.', 'punct'), (')', 'punct')]

>> Bigrams: 
[[Scatter, Plot], [Plot, (], [(, Cont], [Cont, .], [., )]]

>> Trigrams: 
[[Scatter, Plot, (], [Plot, (, Cont], [(, Cont, .], [Cont, ., )]]

>> Noun Phrases are: 
[Scatter Plot, (Cont]

>> Named Entities are: 
[]


============================ Sentence 143 =============================

To find specific pattern from the data, we can further divide the data and plot scatter plot. 


>> Tokens are: 
[find, specific, pattern, data, ,, divide, data, plot, scatter, plot, .] 

>> PoS Tags are: 
[('find', 'VERB'), ('specific', 'ADJ'), ('pattern', 'NOUN'), ('data', 'NOUN'), (',', 'PUNCT'), ('divide', 'VERB'), ('data', 'NOUN'), ('plot', 'NOUN'), ('scatter', 'NOUN'), ('plot', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('find', 'advcl'), ('specific', 'amod'), ('pattern', 'dobj'), ('data', 'pobj'), (',', 'punct'), ('divide', 'ROOT'), ('data', 'dobj'), ('plot', 'compound'), ('scatter', 'compound'), ('plot', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[find, specific], [specific, pattern], [pattern, data], [data, ,], [,, divide], [divide, data], [data, plot], [plot, scatter], [scatter, plot], [plot, .]]

>> Trigrams: 
[[find, specific, pattern], [specific, pattern, data], [pattern, data, ,], [data, ,, divide], [,, divide, data], [divide, data, plot], [data, plot, scatter], [plot, scatter, plot], [scatter, plot, .]]

>> Noun Phrases are: 
[specific pattern, the data, we, the data, plot scatter plot]

>> Named Entities are: 
[]


============================ Sentence 144 =============================

We can do this with the help of groupby method of DataFrame, and then using tuple unpacking while looping the group. 


>> Tokens are: 
[help, groupby, method, DataFrame, ,, tuple, unpacking, looping, group, .] 

>> PoS Tags are: 
[('help', 'NOUN'), ('groupby', 'ADJ'), ('method', 'NOUN'), ('DataFrame', 'PROPN'), (',', 'PUNCT'), ('tuple', 'NOUN'), ('unpacking', 'NOUN'), ('looping', 'VERB'), ('group', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('help', 'pobj'), ('groupby', 'amod'), ('method', 'pobj'), ('DataFrame', 'pobj'), (',', 'punct'), ('tuple', 'dobj'), ('unpacking', 'dobj'), ('looping', 'advcl'), ('group', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[help, groupby], [groupby, method], [method, DataFrame], [DataFrame, ,], [,, tuple], [tuple, unpacking], [unpacking, looping], [looping, group], [group, .]]

>> Trigrams: 
[[help, groupby, method], [groupby, method, DataFrame], [method, DataFrame, ,], [DataFrame, ,, tuple], [,, tuple, unpacking], [tuple, unpacking, looping], [unpacking, looping, group], [looping, group, .]]

>> Noun Phrases are: 
[We, the help, groupby method, DataFrame, tuple, unpacking, the group]

>> Named Entities are: 
[]


============================ Sentence 145 =============================

        Note : we can specify marker, color, and size of the marker with the help     of marker, color and s parameter respectively. 


>> Tokens are: 
[        , Note, :, specify, marker, ,, color, ,, size, marker, help,     , marker, ,, color, s, parameter, respectively, .] 

>> PoS Tags are: 
[('        ', 'SPACE'), ('Note', 'NOUN'), (':', 'PUNCT'), ('specify', 'VERB'), ('marker', 'NOUN'), (',', 'PUNCT'), ('color', 'NOUN'), (',', 'PUNCT'), ('size', 'NOUN'), ('marker', 'NOUN'), ('help', 'NOUN'), ('    ', 'SPACE'), ('marker', 'NOUN'), (',', 'PUNCT'), ('color', 'NOUN'), ('s', 'PRON'), ('parameter', 'NOUN'), ('respectively', 'ADV'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('        ', 'compound'), ('Note', 'dep'), (':', 'punct'), ('specify', 'ROOT'), ('marker', 'dobj'), (',', 'punct'), ('color', 'conj'), (',', 'punct'), ('size', 'conj'), ('marker', 'pobj'), ('help', 'pobj'), ('    ', 'appos'), ('marker', 'pobj'), (',', 'punct'), ('color', 'conj'), ('s', 'conj'), ('parameter', 'conj'), ('respectively', 'advmod'), ('.', 'punct')]

>> Bigrams: 
[[        , Note], [Note, :], [:, specify], [specify, marker], [marker, ,], [,, color], [color, ,], [,, size], [size, marker], [marker, help], [help,     ], [    , marker], [marker, ,], [,, color], [color, s], [s, parameter], [parameter, respectively], [respectively, .]]

>> Trigrams: 
[[        , Note, :], [Note, :, specify], [:, specify, marker], [specify, marker, ,], [marker, ,, color], [,, color, ,], [color, ,, size], [,, size, marker], [size, marker, help], [marker, help,     ], [help,     , marker], [    , marker, ,], [marker, ,, color], [,, color, s], [color, s, parameter], [s, parameter, respectively], [parameter, respectively, .]]

>> Noun Phrases are: 
[we, marker, color, size, the marker, the help, marker, color, s, parameter]

>> Named Entities are: 
[]


============================ Sentence 146 =============================

 import matplotlib.pyplot as plt import pandas as pd %matplotlib inline df = pd.read_csv('insurance.csv') grouped = df.groupby(['smoker']) for key, group in grouped:    plt.scatter(group['bmi'],    group['charges'],     label='Smoke = '+key) plt.legend() 


>> Tokens are: 
[ , import, matplotlib.pyplot, plt, import, pandas, pd, %, matplotlib, inline, df, =, pd.read_csv('insurance.csv, ', ), grouped, =, df.groupby(['smoker, ', ], ), key, ,, group, grouped, :,    , plt.scatter(group['bmi, ', ], ,,    , group['charges, ', ], ,,     , label='Smoke, =, ', +, key, ), plt.legend, (, )] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('import', 'NOUN'), ('matplotlib.pyplot', 'NOUN'), ('plt', 'NOUN'), ('import', 'NOUN'), ('pandas', 'VERB'), ('pd', 'NOUN'), ('%', 'NOUN'), ('matplotlib', 'ADJ'), ('inline', 'ADJ'), ('df', 'NOUN'), ('=', 'PROPN'), ("pd.read_csv('insurance.csv", 'PROPN'), ("'", 'PUNCT'), (')', 'PUNCT'), ('grouped', 'VERB'), ('=', 'SYM'), ("df.groupby(['smoker", 'NOUN'), ("'", 'PUNCT'), (']', 'PUNCT'), (')', 'PUNCT'), ('key', 'ADJ'), (',', 'PUNCT'), ('group', 'NOUN'), ('grouped', 'VERB'), (':', 'PUNCT'), ('   ', 'SPACE'), ("plt.scatter(group['bmi", 'PROPN'), ("'", 'PUNCT'), (']', 'PUNCT'), (',', 'PUNCT'), ('   ', 'SPACE'), ("group['charges", 'NOUN'), ("'", 'PUNCT'), (']', 'PUNCT'), (',', 'PUNCT'), ('    ', 'SPACE'), ("label='Smoke", 'VERB'), ('=', 'SYM'), ("'", 'PUNCT'), ('+', 'ADV'), ('key', 'ADJ'), (')', 'PUNCT'), ('plt.legend', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'dep'), ('import', 'compound'), ('matplotlib.pyplot', 'appos'), ('plt', 'compound'), ('import', 'pobj'), ('pandas', 'nsubj'), ('pd', 'nmod'), ('%', 'nmod'), ('matplotlib', 'amod'), ('inline', 'amod'), ('df', 'compound'), ('=', 'compound'), ("pd.read_csv('insurance.csv", 'pobj'), ("'", 'punct'), (')', 'punct'), ('grouped', 'ROOT'), ('=', 'compound'), ("df.groupby(['smoker", 'dobj'), ("'", 'punct'), (']', 'punct'), (')', 'punct'), ('key', 'amod'), (',', 'punct'), ('group', 'pobj'), ('grouped', 'pobj'), (':', 'punct'), ('   ', 'nummod'), ("plt.scatter(group['bmi", 'appos'), ("'", 'punct'), (']', 'punct'), (',', 'punct'), ('   ', 'nsubj'), ("group['charges", 'conj'), ("'", 'punct'), (']', 'punct'), (',', 'punct'), ('    ', 'nsubj'), ("label='Smoke", 'conj'), ('=', 'punct'), ("'", 'punct'), ('+', 'cc'), ('key', 'conj'), (')', 'punct'), ('plt.legend', 'conj'), ('(', 'punct'), (')', 'punct')]

>> Bigrams: 
[[ , import], [import, matplotlib.pyplot], [matplotlib.pyplot, plt], [plt, import], [import, pandas], [pandas, pd], [pd, %], [%, matplotlib], [matplotlib, inline], [inline, df], [df, =], [=, pd.read_csv('insurance.csv], [pd.read_csv('insurance.csv, '], [', )], [), grouped], [grouped, =], [=, df.groupby(['smoker], [df.groupby(['smoker, '], [', ]], [], )], [), key], [key, ,], [,, group], [group, grouped], [grouped, :], [:,    ], [   , plt.scatter(group['bmi], [plt.scatter(group['bmi, '], [', ]], [], ,], [,,    ], [   , group['charges], [group['charges, '], [', ]], [], ,], [,,     ], [    , label='Smoke], [label='Smoke, =], [=, '], [', +], [+, key], [key, )], [), plt.legend], [plt.legend, (], [(, )]]

>> Trigrams: 
[[ , import, matplotlib.pyplot], [import, matplotlib.pyplot, plt], [matplotlib.pyplot, plt, import], [plt, import, pandas], [import, pandas, pd], [pandas, pd, %], [pd, %, matplotlib], [%, matplotlib, inline], [matplotlib, inline, df], [inline, df, =], [df, =, pd.read_csv('insurance.csv], [=, pd.read_csv('insurance.csv, '], [pd.read_csv('insurance.csv, ', )], [', ), grouped], [), grouped, =], [grouped, =, df.groupby(['smoker], [=, df.groupby(['smoker, '], [df.groupby(['smoker, ', ]], [', ], )], [], ), key], [), key, ,], [key, ,, group], [,, group, grouped], [group, grouped, :], [grouped, :,    ], [:,    , plt.scatter(group['bmi], [   , plt.scatter(group['bmi, '], [plt.scatter(group['bmi, ', ]], [', ], ,], [], ,,    ], [,,    , group['charges], [   , group['charges, '], [group['charges, ', ]], [', ], ,], [], ,,     ], [,,     , label='Smoke], [    , label='Smoke, =], [label='Smoke, =, '], [=, ', +], [', +, key], [+, key, )], [key, ), plt.legend], [), plt.legend, (], [plt.legend, (, )]]

>> Noun Phrases are: 
[import matplotlib.pyplot, plt import, pd %matplotlib inline df = pd.read_csv('insurance.csv, = df.groupby(['smoker, key, group,    plt.scatter(group['bmi, ],    group['charges, plt.legend]

>> Named Entities are: 
[('plt.legend', 'PERSON')]


============================ Sentence 147 =============================

plt.show() 1 2 3 4 5 6 7   8 9 histDemo.py     Prof. Arjun V. Bala 


>> Tokens are: 
[plt.show, (, ), 1, 2, 3, 4, 5, 6, 7,   , 8, 9, histDemo.py,     , Prof., Arjun, V., Bala] 

>> PoS Tags are: 
[('plt.show', 'PROPN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('1', 'NUM'), ('2', 'NUM'), ('3', 'NUM'), ('4', 'NUM'), ('5', 'NUM'), ('6', 'NUM'), ('7', 'NUM'), ('  ', 'SPACE'), ('8', 'NUM'), ('9', 'NUM'), ('histDemo.py', 'NUM'), ('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Arjun', 'PROPN'), ('V.', 'PROPN'), ('Bala', 'PROPN')] 

>> Dependency Tags are: 
[('plt.show', 'ROOT'), ('(', 'punct'), (')', 'punct'), ('1', 'compound'), ('2', 'nummod'), ('3', 'npadvmod'), ('4', 'npadvmod'), ('5', 'npadvmod'), ('6', 'npadvmod'), ('7', 'npadvmod'), ('  ', 'npadvmod'), ('8', 'compound'), ('9', 'npadvmod'), ('histDemo.py', 'advmod'), ('    ', 'compound'), ('Prof.', 'compound'), ('Arjun', 'compound'), ('V.', 'compound'), ('Bala', 'npadvmod')]

>> Bigrams: 
[[plt.show, (], [(, )], [), 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7,   ], [  , 8], [8, 9], [9, histDemo.py], [histDemo.py,     ], [    , Prof.], [Prof., Arjun], [Arjun, V.], [V., Bala]]

>> Trigrams: 
[[plt.show, (, )], [(, ), 1], [), 1, 2], [1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6], [5, 6, 7], [6, 7,   ], [7,   , 8], [  , 8, 9], [8, 9, histDemo.py], [9, histDemo.py,     ], [histDemo.py,     , Prof.], [    , Prof., Arjun], [Prof., Arjun, V.], [Arjun, V., Bala]]

>> Noun Phrases are: 
[plt.show]

>> Named Entities are: 
[('8 9', 'CARDINAL'), ('Arjun V. Bala', 'PERSON')]


============================ Sentence 148 =============================

#3150713 (PDS)      Unit 04 


>> Tokens are: 
[#, 3150713, (, PDS, ),   , ,   , Unit, 04] 

>> PoS Tags are: 
[('#', 'NOUN'), ('3150713', 'NUM'), ('(', 'PUNCT'), ('PDS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('04', 'NUM')] 

>> Dependency Tags are: 
[('#', 'nmod'), ('3150713', 'nummod'), ('(', 'punct'), ('PDS', 'appos'), (')', 'punct'), ('  ', 'nsubj'), ('\uf077', 'ROOT'), ('  ', 'punct'), ('Unit', 'npadvmod'), ('04', 'nummod')]

>> Bigrams: 
[[#, 3150713], [3150713, (], [(, PDS], [PDS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 04]]

>> Trigrams: 
[[#, 3150713, (], [3150713, (, PDS], [(, PDS, )], [PDS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 04]]

>> Noun Phrases are: 
[(PDS]

>> Named Entities are: 
[('PDS', 'ORG'), ('04', 'CARDINAL')]


============================ Sentence 149 =============================

– Data Visualization ‹#›   


>> Tokens are: 
[–, Data, Visualization, ‹#›,  ] 

>> PoS Tags are: 
[('–', 'PUNCT'), ('Data', 'PROPN'), ('Visualization', 'PROPN'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('–', 'punct'), ('Data', 'compound'), ('Visualization', 'ROOT'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[–, Data], [Data, Visualization], [Visualization, ‹#›], [‹#›,  ]]

>> Trigrams: 
[[–, Data, Visualization], [Data, Visualization, ‹#›], [Visualization, ‹#›,  ]]

>> Noun Phrases are: 
[– Data Visualization]

>> Named Entities are: 
[('Data Visualization', 'ORG')]


============================ Sentence 150 =============================

Time Series Observations over time can be considered as a Time Series. 


>> Tokens are: 
[Time, Series, Observations, time, considered, Time, Series, .] 

>> PoS Tags are: 
[('Time', 'PROPN'), ('Series', 'PROPN'), ('Observations', 'PROPN'), ('time', 'NOUN'), ('considered', 'VERB'), ('Time', 'PROPN'), ('Series', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Time', 'compound'), ('Series', 'compound'), ('Observations', 'nsubjpass'), ('time', 'pobj'), ('considered', 'ROOT'), ('Time', 'compound'), ('Series', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Time, Series], [Series, Observations], [Observations, time], [time, considered], [considered, Time], [Time, Series], [Series, .]]

>> Trigrams: 
[[Time, Series, Observations], [Series, Observations, time], [Observations, time, considered], [time, considered, Time], [considered, Time, Series], [Time, Series, .]]

>> Noun Phrases are: 
[Time Series Observations, time, a Time Series]

>> Named Entities are: 
[('a Time Series', 'EVENT')]


============================ Sentence 151 =============================

Visualization plays an important role in time series analysis and forecasting. 


>> Tokens are: 
[Visualization, plays, important, role, time, series, analysis, forecasting, .] 

>> PoS Tags are: 
[('Visualization', 'NOUN'), ('plays', 'VERB'), ('important', 'ADJ'), ('role', 'NOUN'), ('time', 'NOUN'), ('series', 'NOUN'), ('analysis', 'NOUN'), ('forecasting', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Visualization', 'nsubj'), ('plays', 'ROOT'), ('important', 'amod'), ('role', 'dobj'), ('time', 'compound'), ('series', 'compound'), ('analysis', 'pobj'), ('forecasting', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[Visualization, plays], [plays, important], [important, role], [role, time], [time, series], [series, analysis], [analysis, forecasting], [forecasting, .]]

>> Trigrams: 
[[Visualization, plays, important], [plays, important, role], [important, role, time], [role, time, series], [time, series, analysis], [series, analysis, forecasting], [analysis, forecasting, .]]

>> Noun Phrases are: 
[Visualization, an important role, time series analysis, forecasting]

>> Named Entities are: 
[]


============================ Sentence 152 =============================

Time Series plots can provide valuable diagnostics to identify temporal structures like trends, cycles, and seasonality. 


>> Tokens are: 
[Time, Series, plots, provide, valuable, diagnostics, identify, temporal, structures, like, trends, ,, cycles, ,, seasonality, .] 

>> PoS Tags are: 
[('Time', 'PROPN'), ('Series', 'PROPN'), ('plots', 'NOUN'), ('provide', 'VERB'), ('valuable', 'ADJ'), ('diagnostics', 'NOUN'), ('identify', 'VERB'), ('temporal', 'ADJ'), ('structures', 'NOUN'), ('like', 'ADP'), ('trends', 'NOUN'), (',', 'PUNCT'), ('cycles', 'NOUN'), (',', 'PUNCT'), ('seasonality', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Time', 'compound'), ('Series', 'compound'), ('plots', 'nsubj'), ('provide', 'ROOT'), ('valuable', 'amod'), ('diagnostics', 'dobj'), ('identify', 'xcomp'), ('temporal', 'amod'), ('structures', 'dobj'), ('like', 'prep'), ('trends', 'pobj'), (',', 'punct'), ('cycles', 'conj'), (',', 'punct'), ('seasonality', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[Time, Series], [Series, plots], [plots, provide], [provide, valuable], [valuable, diagnostics], [diagnostics, identify], [identify, temporal], [temporal, structures], [structures, like], [like, trends], [trends, ,], [,, cycles], [cycles, ,], [,, seasonality], [seasonality, .]]

>> Trigrams: 
[[Time, Series, plots], [Series, plots, provide], [plots, provide, valuable], [provide, valuable, diagnostics], [valuable, diagnostics, identify], [diagnostics, identify, temporal], [identify, temporal, structures], [temporal, structures, like], [structures, like, trends], [like, trends, ,], [trends, ,, cycles], [,, cycles, ,], [cycles, ,, seasonality], [,, seasonality, .]]

>> Noun Phrases are: 
[Time Series plots, valuable diagnostics, temporal structures, trends, cycles, seasonality]

>> Named Entities are: 
[]


============================ Sentence 153 =============================

In order to create a Time Series we first need to get the date range, which can be created with the help of datetime and pandas library. 


>> Tokens are: 
[order, create, Time, Series, need, date, range, ,, created, help, datetime, pandas, library, .] 

>> PoS Tags are: 
[('order', 'NOUN'), ('create', 'VERB'), ('Time', 'PROPN'), ('Series', 'PROPN'), ('need', 'VERB'), ('date', 'NOUN'), ('range', 'NOUN'), (',', 'PUNCT'), ('created', 'VERB'), ('help', 'NOUN'), ('datetime', 'NOUN'), ('pandas', 'ADJ'), ('library', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('order', 'pobj'), ('create', 'acl'), ('Time', 'compound'), ('Series', 'dobj'), ('need', 'ROOT'), ('date', 'compound'), ('range', 'dobj'), (',', 'punct'), ('created', 'relcl'), ('help', 'pobj'), ('datetime', 'pobj'), ('pandas', 'amod'), ('library', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[order, create], [create, Time], [Time, Series], [Series, need], [need, date], [date, range], [range, ,], [,, created], [created, help], [help, datetime], [datetime, pandas], [pandas, library], [library, .]]

>> Trigrams: 
[[order, create, Time], [create, Time, Series], [Time, Series, need], [Series, need, date], [need, date, range], [date, range, ,], [range, ,, created], [,, created, help], [created, help, datetime], [help, datetime, pandas], [datetime, pandas, library], [pandas, library, .]]

>> Noun Phrases are: 
[order, a Time Series, we, the date range, the help, datetime, pandas library]

>> Named Entities are: 
[('a Time Series', 'EVENT'), ('first', 'ORDINAL')]


============================ Sentence 154 =============================

import pandas as pd import datetime as dt start_date = dt.datetime(2020,8,28) end_date = dt.datetime(2020,9,05) daterange = pd.date_range(start_date,end_date) print(daterange) 1 2 3 4 5 6 timeDemo.py DatetimeIndex(['2020-08-28', '2020-08-29', '2020-08-30', '2020-08-31', '2020-09-01', '2020-09-02', '2020-09-03', '2020-09-04', '2020-09-05'], dtype='datetime64[ns]', freq='D') 


>> Tokens are: 
[import, pandas, pd, import, datetime, dt, start_date, =, dt.datetime(2020,8,28, ), end_date, =, dt.datetime(2020,9,05, ), daterange, =, pd.date_range(start_date, ,, end_date, ), print(daterange, ), 1, 2, 3, 4, 5, 6, timeDemo.py, DatetimeIndex(['2020, -, 08, -, 28, ', ,, ', 2020, -, 08, -, 29, ', ,, ', 2020, -, 08, -, 30, ', ,, ', 2020, -, 08, -, 31, ', ,, ', 2020, -, 09, -, 01, ', ,, ', 2020, -, 09, -, 02, ', ,, ', 2020, -, 09, -, 03, ', ,, ', 2020, -, 09, -, 04, ', ,, ', 2020, -, 09, -, 05, ', ], ,, dtype='datetime64[ns, ], ', ,, freq='D, ', )] 

>> PoS Tags are: 
[('import', 'NOUN'), ('pandas', 'NOUN'), ('pd', 'PROPN'), ('import', 'NOUN'), ('datetime', 'NOUN'), ('dt', 'PRON'), ('start_date', 'ADJ'), ('=', 'SYM'), ('dt.datetime(2020,8,28', 'X'), (')', 'PUNCT'), ('end_date', 'VERB'), ('=', 'SYM'), ('dt.datetime(2020,9,05', 'NOUN'), (')', 'PUNCT'), ('daterange', 'NOUN'), ('=', 'SYM'), ('pd.date_range(start_date', 'NOUN'), (',', 'PUNCT'), ('end_date', 'NOUN'), (')', 'PUNCT'), ('print(daterange', 'PROPN'), (')', 'PUNCT'), ('1', 'NUM'), ('2', 'NUM'), ('3', 'NUM'), ('4', 'NUM'), ('5', 'NUM'), ('6', 'NUM'), ('timeDemo.py', 'NOUN'), ("DatetimeIndex(['2020", 'NOUN'), ('-', 'PUNCT'), ('08', 'NUM'), ('-', 'PUNCT'), ('28', 'NUM'), ("'", 'PUNCT'), (',', 'PUNCT'), ("'", 'PUNCT'), ('2020', 'NUM'), ('-', 'PUNCT'), ('08', 'NUM'), ('-', 'PUNCT'), ('29', 'NUM'), ("'", 'PUNCT'), (',', 'PUNCT'), ("'", 'PUNCT'), ('2020', 'NUM'), ('-', 'PUNCT'), ('08', 'NUM'), ('-', 'SYM'), ('30', 'NUM'), ("'", 'PUNCT'), (',', 'PUNCT'), ("'", 'PUNCT'), ('2020', 'NUM'), ('-', 'PUNCT'), ('08', 'NUM'), ('-', 'SYM'), ('31', 'NUM'), ("'", 'PUNCT'), (',', 'PUNCT'), ("'", 'PUNCT'), ('2020', 'NUM'), ('-', 'PUNCT'), ('09', 'NUM'), ('-', 'PUNCT'), ('01', 'NUM'), ("'", 'PUNCT'), (',', 'PUNCT'), ("'", 'PUNCT'), ('2020', 'NUM'), ('-', 'PUNCT'), ('09', 'NUM'), ('-', 'PUNCT'), ('02', 'NUM'), ("'", 'PUNCT'), (',', 'PUNCT'), ("'", 'PUNCT'), ('2020', 'NUM'), ('-', 'PUNCT'), ('09', 'NUM'), ('-', 'PUNCT'), ('03', 'NUM'), ("'", 'PUNCT'), (',', 'PUNCT'), ("'", 'PUNCT'), ('2020', 'NUM'), ('-', 'PUNCT'), ('09', 'NUM'), ('-', 'PUNCT'), ('04', 'NUM'), ("'", 'PUNCT'), (',', 'PUNCT'), ("'", 'PUNCT'), ('2020', 'NUM'), ('-', 'PUNCT'), ('09', 'NUM'), ('-', 'PUNCT'), ('05', 'NUM'), ("'", 'PUNCT'), (']', 'PUNCT'), (',', 'PUNCT'), ("dtype='datetime64[ns", 'X'), (']', 'PUNCT'), ("'", 'PUNCT'), (',', 'PUNCT'), ("freq='D", 'PROPN'), ("'", 'PUNCT'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('import', 'nmod'), ('pandas', 'dobj'), ('pd', 'compound'), ('import', 'compound'), ('datetime', 'pobj'), ('dt', 'nmod'), ('start_date', 'compound'), ('=', 'punct'), ('dt.datetime(2020,8,28', 'pobj'), (')', 'punct'), ('end_date', 'advcl'), ('=', 'compound'), ('dt.datetime(2020,9,05', 'dobj'), (')', 'punct'), ('daterange', 'nmod'), ('=', 'punct'), ('pd.date_range(start_date', 'nmod'), (',', 'punct'), ('end_date', 'nmod'), (')', 'punct'), ('print(daterange', 'ROOT'), (')', 'punct'), ('1', 'compound'), ('2', 'compound'), ('3', 'appos'), ('4', 'nummod'), ('5', 'compound'), ('6', 'nummod'), ('timeDemo.py', 'appos'), ("DatetimeIndex(['2020", 'npadvmod'), ('-', 'punct'), ('08', 'prep'), ('-', 'punct'), ('28', 'prep'), ("'", 'punct'), (',', 'punct'), ("'", 'punct'), ('2020', 'nummod'), ('-', 'punct'), ('08', 'prep'), ('-', 'punct'), ('29', 'prep'), ("'", 'punct'), (',', 'punct'), ("'", 'punct'), ('2020', 'npadvmod'), ('-', 'punct'), ('08', 'prep'), ('-', 'punct'), ('30', 'prep'), ("'", 'punct'), (',', 'punct'), ("'", 'punct'), ('2020', 'npadvmod'), ('-', 'punct'), ('08', 'prep'), ('-', 'punct'), ('31', 'prep'), ("'", 'punct'), (',', 'punct'), ("'", 'punct'), ('2020', 'nummod'), ('-', 'punct'), ('09', 'prep'), ('-', 'punct'), ('01', 'prep'), ("'", 'punct'), (',', 'punct'), ("'", 'punct'), ('2020', 'nummod'), ('-', 'punct'), ('09', 'prep'), ('-', 'punct'), ('02', 'prep'), ("'", 'punct'), (',', 'punct'), ("'", 'punct'), ('2020', 'nummod'), ('-', 'punct'), ('09', 'prep'), ('-', 'punct'), ('03', 'prep'), ("'", 'punct'), (',', 'punct'), ("'", 'punct'), ('2020', 'nummod'), ('-', 'punct'), ('09', 'nummod'), ('-', 'punct'), ('04', 'prep'), ("'", 'punct'), (',', 'punct'), ("'", 'punct'), ('2020', 'appos'), ('-', 'punct'), ('09', 'prep'), ('-', 'punct'), ('05', 'prep'), ("'", 'punct'), (']', 'punct'), (',', 'punct'), ("dtype='datetime64[ns", 'advmod'), (']', 'punct'), ("'", 'punct'), (',', 'punct'), ("freq='D", 'appos'), ("'", 'punct'), (')', 'punct')]

>> Bigrams: 
[[import, pandas], [pandas, pd], [pd, import], [import, datetime], [datetime, dt], [dt, start_date], [start_date, =], [=, dt.datetime(2020,8,28], [dt.datetime(2020,8,28, )], [), end_date], [end_date, =], [=, dt.datetime(2020,9,05], [dt.datetime(2020,9,05, )], [), daterange], [daterange, =], [=, pd.date_range(start_date], [pd.date_range(start_date, ,], [,, end_date], [end_date, )], [), print(daterange], [print(daterange, )], [), 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, timeDemo.py], [timeDemo.py, DatetimeIndex(['2020], [DatetimeIndex(['2020, -], [-, 08], [08, -], [-, 28], [28, '], [', ,], [,, '], [', 2020], [2020, -], [-, 08], [08, -], [-, 29], [29, '], [', ,], [,, '], [', 2020], [2020, -], [-, 08], [08, -], [-, 30], [30, '], [', ,], [,, '], [', 2020], [2020, -], [-, 08], [08, -], [-, 31], [31, '], [', ,], [,, '], [', 2020], [2020, -], [-, 09], [09, -], [-, 01], [01, '], [', ,], [,, '], [', 2020], [2020, -], [-, 09], [09, -], [-, 02], [02, '], [', ,], [,, '], [', 2020], [2020, -], [-, 09], [09, -], [-, 03], [03, '], [', ,], [,, '], [', 2020], [2020, -], [-, 09], [09, -], [-, 04], [04, '], [', ,], [,, '], [', 2020], [2020, -], [-, 09], [09, -], [-, 05], [05, '], [', ]], [], ,], [,, dtype='datetime64[ns], [dtype='datetime64[ns, ]], [], '], [', ,], [,, freq='D], [freq='D, '], [', )]]

>> Trigrams: 
[[import, pandas, pd], [pandas, pd, import], [pd, import, datetime], [import, datetime, dt], [datetime, dt, start_date], [dt, start_date, =], [start_date, =, dt.datetime(2020,8,28], [=, dt.datetime(2020,8,28, )], [dt.datetime(2020,8,28, ), end_date], [), end_date, =], [end_date, =, dt.datetime(2020,9,05], [=, dt.datetime(2020,9,05, )], [dt.datetime(2020,9,05, ), daterange], [), daterange, =], [daterange, =, pd.date_range(start_date], [=, pd.date_range(start_date, ,], [pd.date_range(start_date, ,, end_date], [,, end_date, )], [end_date, ), print(daterange], [), print(daterange, )], [print(daterange, ), 1], [), 1, 2], [1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6], [5, 6, timeDemo.py], [6, timeDemo.py, DatetimeIndex(['2020], [timeDemo.py, DatetimeIndex(['2020, -], [DatetimeIndex(['2020, -, 08], [-, 08, -], [08, -, 28], [-, 28, '], [28, ', ,], [', ,, '], [,, ', 2020], [', 2020, -], [2020, -, 08], [-, 08, -], [08, -, 29], [-, 29, '], [29, ', ,], [', ,, '], [,, ', 2020], [', 2020, -], [2020, -, 08], [-, 08, -], [08, -, 30], [-, 30, '], [30, ', ,], [', ,, '], [,, ', 2020], [', 2020, -], [2020, -, 08], [-, 08, -], [08, -, 31], [-, 31, '], [31, ', ,], [', ,, '], [,, ', 2020], [', 2020, -], [2020, -, 09], [-, 09, -], [09, -, 01], [-, 01, '], [01, ', ,], [', ,, '], [,, ', 2020], [', 2020, -], [2020, -, 09], [-, 09, -], [09, -, 02], [-, 02, '], [02, ', ,], [', ,, '], [,, ', 2020], [', 2020, -], [2020, -, 09], [-, 09, -], [09, -, 03], [-, 03, '], [03, ', ,], [', ,, '], [,, ', 2020], [', 2020, -], [2020, -, 09], [-, 09, -], [09, -, 04], [-, 04, '], [04, ', ,], [', ,, '], [,, ', 2020], [', 2020, -], [2020, -, 09], [-, 09, -], [09, -, 05], [-, 05, '], [05, ', ]], [', ], ,], [], ,, dtype='datetime64[ns], [,, dtype='datetime64[ns, ]], [dtype='datetime64[ns, ], '], [], ', ,], [', ,, freq='D], [,, freq='D, '], [freq='D, ', )]]

>> Noun Phrases are: 
[pandas, pd import datetime, = dt.datetime(2020,9,05, 5 6 timeDemo.py, freq='D]

>> Named Entities are: 
[('1 2 3', 'CARDINAL'), ("2020-09-01'", 'DATE')]


============================ Sentence 155 =============================

OUTPUT    Prof. Arjun V. Bala 


>> Tokens are: 
[OUTPUT,    , Prof., Arjun, V., Bala] 

>> PoS Tags are: 
[('OUTPUT', 'NOUN'), ('   ', 'SPACE'), ('Prof.', 'PROPN'), ('Arjun', 'PROPN'), ('V.', 'PROPN'), ('Bala', 'PROPN')] 

>> Dependency Tags are: 
[('OUTPUT', 'ROOT'), ('   ', 'nummod'), ('Prof.', 'compound'), ('Arjun', 'compound'), ('V.', 'compound'), ('Bala', 'appos')]

>> Bigrams: 
[[OUTPUT,    ], [   , Prof.], [Prof., Arjun], [Arjun, V.], [V., Bala]]

>> Trigrams: 
[[OUTPUT,    , Prof.], [   , Prof., Arjun], [Prof., Arjun, V.], [Arjun, V., Bala]]

>> Noun Phrases are: 
[OUTPUT, Prof. Arjun V. Bala]

>> Named Entities are: 
[('OUTPUT', 'ORG'), ('Arjun V. Bala', 'PERSON')]


============================ Sentence 156 =============================

#3150713 (PDS)      Unit 04 


>> Tokens are: 
[#, 3150713, (, PDS, ),   , ,   , Unit, 04] 

>> PoS Tags are: 
[('#', 'NOUN'), ('3150713', 'NUM'), ('(', 'PUNCT'), ('PDS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('04', 'NUM')] 

>> Dependency Tags are: 
[('#', 'nmod'), ('3150713', 'nummod'), ('(', 'punct'), ('PDS', 'appos'), (')', 'punct'), ('  ', 'nsubj'), ('\uf077', 'ROOT'), ('  ', 'punct'), ('Unit', 'npadvmod'), ('04', 'nummod')]

>> Bigrams: 
[[#, 3150713], [3150713, (], [(, PDS], [PDS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 04]]

>> Trigrams: 
[[#, 3150713, (], [3150713, (, PDS], [(, PDS, )], [PDS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 04]]

>> Noun Phrases are: 
[(PDS]

>> Named Entities are: 
[('PDS', 'ORG'), ('04', 'CARDINAL')]


============================ Sentence 157 =============================

– Data Visualization ‹#›   


>> Tokens are: 
[–, Data, Visualization, ‹#›,  ] 

>> PoS Tags are: 
[('–', 'PUNCT'), ('Data', 'PROPN'), ('Visualization', 'PROPN'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('–', 'punct'), ('Data', 'compound'), ('Visualization', 'ROOT'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[–, Data], [Data, Visualization], [Visualization, ‹#›], [‹#›,  ]]

>> Trigrams: 
[[–, Data, Visualization], [Data, Visualization, ‹#›], [Visualization, ‹#›,  ]]

>> Noun Phrases are: 
[– Data Visualization]

>> Named Entities are: 
[('Data Visualization', 'ORG')]


============================ Sentence 158 =============================

Time Series (Cont.) 


>> Tokens are: 
[Time, Series, (, Cont, ., )] 

>> PoS Tags are: 
[('Time', 'PROPN'), ('Series', 'PROPN'), ('(', 'PUNCT'), ('Cont', 'PROPN'), ('.', 'PUNCT'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('Time', 'compound'), ('Series', 'ROOT'), ('(', 'punct'), ('Cont', 'appos'), ('.', 'punct'), (')', 'punct')]

>> Bigrams: 
[[Time, Series], [Series, (], [(, Cont], [Cont, .], [., )]]

>> Trigrams: 
[[Time, Series, (], [Series, (, Cont], [(, Cont, .], [Cont, ., )]]

>> Noun Phrases are: 
[Time Series, Cont]

>> Named Entities are: 
[]


============================ Sentence 159 =============================

We can use some more parameters for date_range() function like freq, to specify the frequency at which we want the date range (default is ‘D’ for days) periods, number of periods to generate in between start/end or from start with freq. 


>> Tokens are: 
[use, parameters, date_range, (, ), function, like, freq, ,, specify, frequency, want, date, range, (, default, ‘, D, ’, days, ), periods, ,, number, periods, generate, start, /, end, start, freq, .] 

>> PoS Tags are: 
[('use', 'VERB'), ('parameters', 'NOUN'), ('date_range', 'PROPN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('function', 'NOUN'), ('like', 'ADP'), ('freq', 'NOUN'), (',', 'PUNCT'), ('specify', 'VERB'), ('frequency', 'NOUN'), ('want', 'VERB'), ('date', 'NOUN'), ('range', 'NOUN'), ('(', 'PUNCT'), ('default', 'NOUN'), ('‘', 'PUNCT'), ('D', 'NOUN'), ('’', 'PUNCT'), ('days', 'NOUN'), (')', 'PUNCT'), ('periods', 'NOUN'), (',', 'PUNCT'), ('number', 'NOUN'), ('periods', 'NOUN'), ('generate', 'VERB'), ('start', 'NOUN'), ('/', 'SYM'), ('end', 'NOUN'), ('start', 'NOUN'), ('freq', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('use', 'ROOT'), ('parameters', 'dobj'), ('date_range', 'nmod'), ('(', 'punct'), (')', 'punct'), ('function', 'pobj'), ('like', 'prep'), ('freq', 'pobj'), (',', 'punct'), ('specify', 'xcomp'), ('frequency', 'dobj'), ('want', 'relcl'), ('date', 'compound'), ('range', 'nsubj'), ('(', 'punct'), ('default', 'nsubj'), ('‘', 'punct'), ('D', 'attr'), ('’', 'punct'), ('days', 'pobj'), (')', 'punct'), ('periods', 'attr'), (',', 'punct'), ('number', 'conj'), ('periods', 'pobj'), ('generate', 'relcl'), ('start', 'nmod'), ('/', 'punct'), ('end', 'pobj'), ('start', 'pobj'), ('freq', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[use, parameters], [parameters, date_range], [date_range, (], [(, )], [), function], [function, like], [like, freq], [freq, ,], [,, specify], [specify, frequency], [frequency, want], [want, date], [date, range], [range, (], [(, default], [default, ‘], [‘, D], [D, ’], [’, days], [days, )], [), periods], [periods, ,], [,, number], [number, periods], [periods, generate], [generate, start], [start, /], [/, end], [end, start], [start, freq], [freq, .]]

>> Trigrams: 
[[use, parameters, date_range], [parameters, date_range, (], [date_range, (, )], [(, ), function], [), function, like], [function, like, freq], [like, freq, ,], [freq, ,, specify], [,, specify, frequency], [specify, frequency, want], [frequency, want, date], [want, date, range], [date, range, (], [range, (, default], [(, default, ‘], [default, ‘, D], [‘, D, ’], [D, ’, days], [’, days, )], [days, ), periods], [), periods, ,], [periods, ,, number], [,, number, periods], [number, periods, generate], [periods, generate, start], [generate, start, /], [start, /, end], [/, end, start], [end, start, freq], [start, freq, .]]

>> Noun Phrases are: 
[We, some more parameters, date_range() function, freq, the frequency, we, the date range, (default, D, days, periods, number, periods, start/end, start, freq]

>> Named Entities are: 
[]


============================ Sentence 160 =============================

We can also create a date range with the help of startdate, periods and freq, for example      Some of important possible values for the freq are  D, for calendar day W, for week M, for month Y, for year import pandas as pd import datetime as dt start_date = dt.datetime(2020,8,28) daterange = pd.date_range(start_date,freq='D',periods=10) print(daterange) 1 2 3 4 5 6 timeDemo.py DatetimeIndex(['2020-08-25', '2020-08-26', '2020-08-27', '2020-08-28', '2020-08-29', '2020-08-30', '2020-08-31', '2020-09-01', '2020-09-02', '2020-09-03'], dtype='datetime64[ns]', freq='D') OUTPUT H, for hour T/min, for minute S, for seconds L, for milliseconds B, for business day SM, for semi month end Q, for quarter end  BQ, for business quarter end    Prof. Arjun V. Bala 


>> Tokens are: 
[create, date, range, help, startdate, ,, periods, freq, ,, example,      , important, possible, values, freq,  , D, ,, calendar, day, W, ,, week, M, ,, month, Y, ,, year, import, pandas, pd, import, datetime, dt, start_date, =, dt.datetime(2020,8,28, ), daterange, =, pd.date_range(start_date, ,, freq='D',periods=10, ), print(daterange, ), 1, 2, 3, 4, 5, 6, timeDemo.py, DatetimeIndex(['2020, -, 08, -, 25, ', ,, ', 2020, -, 08, -, 26, ', ,, ', 2020, -, 08, -, 27, ', ,, ', 2020, -, 08, -, 28, ', ,, ', 2020, -, 08, -, 29, ', ,, ', 2020, -, 08, -, 30, ', ,, ', 2020, -, 08, -, 31, ', ,, ', 2020, -, 09, -, 01, ', ,, ', 2020, -, 09, -, 02, ', ,, ', 2020, -, 09, -, 03, ', ], ,, dtype='datetime64[ns, ], ', ,, freq='D, ', ), OUTPUT, H, ,, hour, T, /, min, ,, minute, S, ,, seconds, L, ,, milliseconds, B, ,, business, day, SM, ,, semi, month, end, Q, ,, quarter, end,  , BQ, ,, business, quarter, end,    , Prof., Arjun, V., Bala] 

>> PoS Tags are: 
[('create', 'VERB'), ('date', 'NOUN'), ('range', 'NOUN'), ('help', 'NOUN'), ('startdate', 'NOUN'), (',', 'PUNCT'), ('periods', 'NOUN'), ('freq', 'NOUN'), (',', 'PUNCT'), ('example', 'NOUN'), ('     ', 'SPACE'), ('important', 'ADJ'), ('possible', 'ADJ'), ('values', 'NOUN'), ('freq', 'NOUN'), (' ', 'SPACE'), ('D', 'PROPN'), (',', 'PUNCT'), ('calendar', 'NOUN'), ('day', 'NOUN'), ('W', 'PROPN'), (',', 'PUNCT'), ('week', 'NOUN'), ('M', 'PROPN'), (',', 'PUNCT'), ('month', 'NOUN'), ('Y', 'PROPN'), (',', 'PUNCT'), ('year', 'NOUN'), ('import', 'NOUN'), ('pandas', 'NOUN'), ('pd', 'PROPN'), ('import', 'NOUN'), ('datetime', 'NOUN'), ('dt', 'PRON'), ('start_date', 'ADJ'), ('=', 'SYM'), ('dt.datetime(2020,8,28', 'NOUN'), (')', 'PUNCT'), ('daterange', 'NOUN'), ('=', 'SYM'), ('pd.date_range(start_date', 'NOUN'), (',', 'PUNCT'), ("freq='D',periods=10", 'NOUN'), (')', 'PUNCT'), ('print(daterange', 'PROPN'), (')', 'PUNCT'), ('1', 'NUM'), ('2', 'NUM'), ('3', 'NUM'), ('4', 'NUM'), ('5', 'NUM'), ('6', 'NUM'), ('timeDemo.py', 'NOUN'), ("DatetimeIndex(['2020", 'NOUN'), ('-', 'PUNCT'), ('08', 'NUM'), ('-', 'PUNCT'), ('25', 'NUM'), ("'", 'PUNCT'), (',', 'PUNCT'), ("'", 'PUNCT'), ('2020', 'NUM'), ('-', 'SYM'), ('08', 'NUM'), ('-', 'SYM'), ('26', 'NUM'), ("'", 'PUNCT'), (',', 'PUNCT'), ("'", 'PUNCT'), ('2020', 'NUM'), ('-', 'PUNCT'), ('08', 'NUM'), ('-', 'PUNCT'), ('27', 'NUM'), ("'", 'PUNCT'), (',', 'PUNCT'), ("'", 'PUNCT'), ('2020', 'NUM'), ('-', 'PUNCT'), ('08', 'NUM'), ('-', 'SYM'), ('28', 'NUM'), ("'", 'PUNCT'), (',', 'PUNCT'), ("'", 'PUNCT'), ('2020', 'NUM'), ('-', 'PUNCT'), ('08', 'NUM'), ('-', 'PUNCT'), ('29', 'NUM'), ("'", 'PUNCT'), (',', 'PUNCT'), ("'", 'PUNCT'), ('2020', 'NUM'), ('-', 'PUNCT'), ('08', 'NUM'), ('-', 'SYM'), ('30', 'NUM'), ("'", 'PUNCT'), (',', 'PUNCT'), ("'", 'PUNCT'), ('2020', 'NUM'), ('-', 'PUNCT'), ('08', 'NUM'), ('-', 'SYM'), ('31', 'NUM'), ("'", 'PUNCT'), (',', 'PUNCT'), ("'", 'PUNCT'), ('2020', 'NUM'), ('-', 'PUNCT'), ('09', 'NUM'), ('-', 'PUNCT'), ('01', 'NUM'), ("'", 'PUNCT'), (',', 'PUNCT'), ("'", 'PUNCT'), ('2020', 'NUM'), ('-', 'PUNCT'), ('09', 'NUM'), ('-', 'PUNCT'), ('02', 'NUM'), ("'", 'PUNCT'), (',', 'PUNCT'), ("'", 'PUNCT'), ('2020', 'NUM'), ('-', 'PUNCT'), ('09', 'NUM'), ('-', 'PUNCT'), ('03', 'NUM'), ("'", 'PUNCT'), (']', 'PUNCT'), (',', 'PUNCT'), ("dtype='datetime64[ns", 'X'), (']', 'PUNCT'), ("'", 'PUNCT'), (',', 'PUNCT'), ("freq='D", 'PROPN'), ("'", 'PUNCT'), (')', 'PUNCT'), ('OUTPUT', 'NOUN'), ('H', 'PROPN'), (',', 'PUNCT'), ('hour', 'NOUN'), ('T', 'PROPN'), ('/', 'PUNCT'), ('min', 'NOUN'), (',', 'PUNCT'), ('minute', 'NOUN'), ('S', 'PROPN'), (',', 'PUNCT'), ('seconds', 'NOUN'), ('L', 'PROPN'), (',', 'PUNCT'), ('milliseconds', 'NOUN'), ('B', 'PROPN'), (',', 'PUNCT'), ('business', 'NOUN'), ('day', 'NOUN'), ('SM', 'PROPN'), (',', 'PUNCT'), ('semi', 'ADJ'), ('month', 'NOUN'), ('end', 'NOUN'), ('Q', 'PROPN'), (',', 'PUNCT'), ('quarter', 'NOUN'), ('end', 'VERB'), (' ', 'SPACE'), ('BQ', 'PROPN'), (',', 'PUNCT'), ('business', 'NOUN'), ('quarter', 'NOUN'), ('end', 'VERB'), ('   ', 'SPACE'), ('Prof.', 'PROPN'), ('Arjun', 'PROPN'), ('V.', 'PROPN'), ('Bala', 'PROPN')] 

>> Dependency Tags are: 
[('create', 'ccomp'), ('date', 'compound'), ('range', 'dobj'), ('help', 'pobj'), ('startdate', 'pobj'), (',', 'punct'), ('periods', 'conj'), ('freq', 'conj'), (',', 'punct'), ('example', 'pobj'), ('     ', 'dobj'), ('important', 'amod'), ('possible', 'amod'), ('values', 'pobj'), ('freq', 'pobj'), (' ', 'compound'), ('D', 'attr'), (',', 'punct'), ('calendar', 'compound'), ('day', 'pobj'), ('W', 'nummod'), (',', 'punct'), ('week', 'compound'), ('M', 'pobj'), (',', 'punct'), ('month', 'compound'), ('Y', 'pobj'), (',', 'punct'), ('year', 'pobj'), ('import', 'nsubj'), ('pandas', 'advcl'), ('pd', 'compound'), ('import', 'compound'), ('datetime', 'pobj'), ('dt', 'nmod'), ('start_date', 'compound'), ('=', 'punct'), ('dt.datetime(2020,8,28', 'pobj'), (')', 'punct'), ('daterange', 'nmod'), ('=', 'punct'), ('pd.date_range(start_date', 'nmod'), (',', 'punct'), ("freq='D',periods=10", 'nmod'), (')', 'punct'), ('print(daterange', 'pobj'), (')', 'punct'), ('1', 'compound'), ('2', 'nummod'), ('3', 'quantmod'), ('4', 'nummod'), ('5', 'compound'), ('6', 'nummod'), ('timeDemo.py', 'dep'), ("DatetimeIndex(['2020", 'npadvmod'), ('-', 'punct'), ('08', 'prep'), ('-', 'punct'), ('25', 'prep'), ("'", 'punct'), (',', 'punct'), ("'", 'punct'), ('2020', 'npadvmod'), ('-', 'punct'), ('08', 'prep'), ('-', 'punct'), ('26', 'prep'), ("'", 'punct'), (',', 'punct'), ("'", 'punct'), ('2020', 'npadvmod'), ('-', 'punct'), ('08', 'nummod'), ('-', 'punct'), ('27', 'appos'), ("'", 'punct'), (',', 'punct'), ("'", 'punct'), ('2020', 'npadvmod'), ('-', 'punct'), ('08', 'nummod'), ('-', 'punct'), ('28', 'appos'), ("'", 'punct'), (',', 'punct'), ("'", 'punct'), ('2020', 'npadvmod'), ('-', 'punct'), ('08', 'nummod'), ('-', 'punct'), ('29', 'prep'), ("'", 'punct'), (',', 'punct'), ("'", 'punct'), ('2020', 'npadvmod'), ('-', 'punct'), ('08', 'prep'), ('-', 'punct'), ('30', 'prep'), ("'", 'punct'), (',', 'punct'), ("'", 'punct'), ('2020', 'npadvmod'), ('-', 'punct'), ('08', 'prep'), ('-', 'punct'), ('31', 'prep'), ("'", 'punct'), (',', 'punct'), ("'", 'punct'), ('2020', 'npadvmod'), ('-', 'punct'), ('09', 'prep'), ('-', 'punct'), ('01', 'prep'), ("'", 'punct'), (',', 'punct'), ("'", 'punct'), ('2020', 'npadvmod'), ('-', 'punct'), ('09', 'prep'), ('-', 'punct'), ('02', 'prep'), ("'", 'punct'), (',', 'punct'), ("'", 'punct'), ('2020', 'npadvmod'), ('-', 'punct'), ('09', 'prep'), ('-', 'punct'), ('03', 'prep'), ("'", 'punct'), (']', 'punct'), (',', 'punct'), ("dtype='datetime64[ns", 'dep'), (']', 'punct'), ("'", 'punct'), (',', 'punct'), ("freq='D", 'poss'), ("'", 'punct'), (')', 'punct'), ('OUTPUT', 'compound'), ('H', 'attr'), (',', 'punct'), ('hour', 'compound'), ('T', 'nmod'), ('/', 'punct'), ('min', 'pobj'), (',', 'punct'), ('minute', 'compound'), ('S', 'pobj'), (',', 'punct'), ('seconds', 'pobj'), ('L', 'appos'), (',', 'punct'), ('milliseconds', 'pobj'), ('B', 'pobj'), (',', 'punct'), ('business', 'compound'), ('day', 'pobj'), ('SM', 'appos'), (',', 'punct'), ('semi', 'amod'), ('month', 'compound'), ('end', 'compound'), ('Q', 'pobj'), (',', 'punct'), ('quarter', 'pobj'), ('end', 'conj'), (' ', 'dobj'), ('BQ', 'npadvmod'), (',', 'punct'), ('business', 'compound'), ('quarter', 'nsubj'), ('end', 'conj'), ('   ', 'nummod'), ('Prof.', 'compound'), ('Arjun', 'compound'), ('V.', 'compound'), ('Bala', 'dobj')]

>> Bigrams: 
[[create, date], [date, range], [range, help], [help, startdate], [startdate, ,], [,, periods], [periods, freq], [freq, ,], [,, example], [example,      ], [     , important], [important, possible], [possible, values], [values, freq], [freq,  ], [ , D], [D, ,], [,, calendar], [calendar, day], [day, W], [W, ,], [,, week], [week, M], [M, ,], [,, month], [month, Y], [Y, ,], [,, year], [year, import], [import, pandas], [pandas, pd], [pd, import], [import, datetime], [datetime, dt], [dt, start_date], [start_date, =], [=, dt.datetime(2020,8,28], [dt.datetime(2020,8,28, )], [), daterange], [daterange, =], [=, pd.date_range(start_date], [pd.date_range(start_date, ,], [,, freq='D',periods=10], [freq='D',periods=10, )], [), print(daterange], [print(daterange, )], [), 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, timeDemo.py], [timeDemo.py, DatetimeIndex(['2020], [DatetimeIndex(['2020, -], [-, 08], [08, -], [-, 25], [25, '], [', ,], [,, '], [', 2020], [2020, -], [-, 08], [08, -], [-, 26], [26, '], [', ,], [,, '], [', 2020], [2020, -], [-, 08], [08, -], [-, 27], [27, '], [', ,], [,, '], [', 2020], [2020, -], [-, 08], [08, -], [-, 28], [28, '], [', ,], [,, '], [', 2020], [2020, -], [-, 08], [08, -], [-, 29], [29, '], [', ,], [,, '], [', 2020], [2020, -], [-, 08], [08, -], [-, 30], [30, '], [', ,], [,, '], [', 2020], [2020, -], [-, 08], [08, -], [-, 31], [31, '], [', ,], [,, '], [', 2020], [2020, -], [-, 09], [09, -], [-, 01], [01, '], [', ,], [,, '], [', 2020], [2020, -], [-, 09], [09, -], [-, 02], [02, '], [', ,], [,, '], [', 2020], [2020, -], [-, 09], [09, -], [-, 03], [03, '], [', ]], [], ,], [,, dtype='datetime64[ns], [dtype='datetime64[ns, ]], [], '], [', ,], [,, freq='D], [freq='D, '], [', )], [), OUTPUT], [OUTPUT, H], [H, ,], [,, hour], [hour, T], [T, /], [/, min], [min, ,], [,, minute], [minute, S], [S, ,], [,, seconds], [seconds, L], [L, ,], [,, milliseconds], [milliseconds, B], [B, ,], [,, business], [business, day], [day, SM], [SM, ,], [,, semi], [semi, month], [month, end], [end, Q], [Q, ,], [,, quarter], [quarter, end], [end,  ], [ , BQ], [BQ, ,], [,, business], [business, quarter], [quarter, end], [end,    ], [   , Prof.], [Prof., Arjun], [Arjun, V.], [V., Bala]]

>> Trigrams: 
[[create, date, range], [date, range, help], [range, help, startdate], [help, startdate, ,], [startdate, ,, periods], [,, periods, freq], [periods, freq, ,], [freq, ,, example], [,, example,      ], [example,      , important], [     , important, possible], [important, possible, values], [possible, values, freq], [values, freq,  ], [freq,  , D], [ , D, ,], [D, ,, calendar], [,, calendar, day], [calendar, day, W], [day, W, ,], [W, ,, week], [,, week, M], [week, M, ,], [M, ,, month], [,, month, Y], [month, Y, ,], [Y, ,, year], [,, year, import], [year, import, pandas], [import, pandas, pd], [pandas, pd, import], [pd, import, datetime], [import, datetime, dt], [datetime, dt, start_date], [dt, start_date, =], [start_date, =, dt.datetime(2020,8,28], [=, dt.datetime(2020,8,28, )], [dt.datetime(2020,8,28, ), daterange], [), daterange, =], [daterange, =, pd.date_range(start_date], [=, pd.date_range(start_date, ,], [pd.date_range(start_date, ,, freq='D',periods=10], [,, freq='D',periods=10, )], [freq='D',periods=10, ), print(daterange], [), print(daterange, )], [print(daterange, ), 1], [), 1, 2], [1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6], [5, 6, timeDemo.py], [6, timeDemo.py, DatetimeIndex(['2020], [timeDemo.py, DatetimeIndex(['2020, -], [DatetimeIndex(['2020, -, 08], [-, 08, -], [08, -, 25], [-, 25, '], [25, ', ,], [', ,, '], [,, ', 2020], [', 2020, -], [2020, -, 08], [-, 08, -], [08, -, 26], [-, 26, '], [26, ', ,], [', ,, '], [,, ', 2020], [', 2020, -], [2020, -, 08], [-, 08, -], [08, -, 27], [-, 27, '], [27, ', ,], [', ,, '], [,, ', 2020], [', 2020, -], [2020, -, 08], [-, 08, -], [08, -, 28], [-, 28, '], [28, ', ,], [', ,, '], [,, ', 2020], [', 2020, -], [2020, -, 08], [-, 08, -], [08, -, 29], [-, 29, '], [29, ', ,], [', ,, '], [,, ', 2020], [', 2020, -], [2020, -, 08], [-, 08, -], [08, -, 30], [-, 30, '], [30, ', ,], [', ,, '], [,, ', 2020], [', 2020, -], [2020, -, 08], [-, 08, -], [08, -, 31], [-, 31, '], [31, ', ,], [', ,, '], [,, ', 2020], [', 2020, -], [2020, -, 09], [-, 09, -], [09, -, 01], [-, 01, '], [01, ', ,], [', ,, '], [,, ', 2020], [', 2020, -], [2020, -, 09], [-, 09, -], [09, -, 02], [-, 02, '], [02, ', ,], [', ,, '], [,, ', 2020], [', 2020, -], [2020, -, 09], [-, 09, -], [09, -, 03], [-, 03, '], [03, ', ]], [', ], ,], [], ,, dtype='datetime64[ns], [,, dtype='datetime64[ns, ]], [dtype='datetime64[ns, ], '], [], ', ,], [', ,, freq='D], [,, freq='D, '], [freq='D, ', )], [', ), OUTPUT], [), OUTPUT, H], [OUTPUT, H, ,], [H, ,, hour], [,, hour, T], [hour, T, /], [T, /, min], [/, min, ,], [min, ,, minute], [,, minute, S], [minute, S, ,], [S, ,, seconds], [,, seconds, L], [seconds, L, ,], [L, ,, milliseconds], [,, milliseconds, B], [milliseconds, B, ,], [B, ,, business], [,, business, day], [business, day, SM], [day, SM, ,], [SM, ,, semi], [,, semi, month], [semi, month, end], [month, end, Q], [end, Q, ,], [Q, ,, quarter], [,, quarter, end], [quarter, end,  ], [end,  , BQ], [ , BQ, ,], [BQ, ,, business], [,, business, quarter], [business, quarter, end], [quarter, end,    ], [end,    , Prof.], [   , Prof., Arjun], [Prof., Arjun, V.], [Arjun, V., Bala]]

>> Noun Phrases are: 
[We, a date range, the help, startdate, periods, freq, example, important possible values, the freq,  D, calendar day, week M, month Y, year, import, pd import datetime, dt start_date = dt.datetime(2020,8,28, daterange = pd.date_range(start_date,freq='D',periods=10) print(daterange, freq='D') OUTPUT H, hour T/min, minute S, seconds, L, milliseconds, B, business day, SM, semi month end Q, quarter, business quarter,    Prof. Arjun V. Bala]

>> Named Entities are: 
[('1 2 3', 'CARDINAL'), ("2020-09-01'", 'DATE'), ('OUTPUT H', 'ORG'), ('SM', 'ORG'), ('semi month', 'DATE'), ('quarter end', 'DATE'), ('business quarter', 'DATE'), ('Arjun V. Bala', 'PERSON')]


============================ Sentence 161 =============================

#3150713 (PDS)      Unit 04 


>> Tokens are: 
[#, 3150713, (, PDS, ),   , ,   , Unit, 04] 

>> PoS Tags are: 
[('#', 'NOUN'), ('3150713', 'NUM'), ('(', 'PUNCT'), ('PDS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('04', 'NUM')] 

>> Dependency Tags are: 
[('#', 'nmod'), ('3150713', 'nummod'), ('(', 'punct'), ('PDS', 'appos'), (')', 'punct'), ('  ', 'nsubj'), ('\uf077', 'ROOT'), ('  ', 'punct'), ('Unit', 'npadvmod'), ('04', 'nummod')]

>> Bigrams: 
[[#, 3150713], [3150713, (], [(, PDS], [PDS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 04]]

>> Trigrams: 
[[#, 3150713, (], [3150713, (, PDS], [(, PDS, )], [PDS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 04]]

>> Noun Phrases are: 
[(PDS]

>> Named Entities are: 
[('PDS', 'ORG'), ('04', 'CARDINAL')]


============================ Sentence 162 =============================

– Data Visualization ‹#›   


>> Tokens are: 
[–, Data, Visualization, ‹#›,  ] 

>> PoS Tags are: 
[('–', 'PUNCT'), ('Data', 'PROPN'), ('Visualization', 'PROPN'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('–', 'punct'), ('Data', 'compound'), ('Visualization', 'ROOT'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[–, Data], [Data, Visualization], [Visualization, ‹#›], [‹#›,  ]]

>> Trigrams: 
[[–, Data, Visualization], [Data, Visualization, ‹#›], [Visualization, ‹#›,  ]]

>> Noun Phrases are: 
[– Data Visualization]

>> Named Entities are: 
[('Data Visualization', 'ORG')]


============================ Sentence 163 =============================

Basemap The matplotlib basemap toolkit is a library for plotting 2D data on maps in Python. 


>> Tokens are: 
[Basemap, matplotlib, basemap, toolkit, library, plotting, 2D, data, maps, Python, .] 

>> PoS Tags are: 
[('Basemap', 'PROPN'), ('matplotlib', 'ADJ'), ('basemap', 'NOUN'), ('toolkit', 'NOUN'), ('library', 'NOUN'), ('plotting', 'VERB'), ('2D', 'NOUN'), ('data', 'NOUN'), ('maps', 'NOUN'), ('Python', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Basemap', 'nmod'), ('matplotlib', 'amod'), ('basemap', 'compound'), ('toolkit', 'nsubj'), ('library', 'attr'), ('plotting', 'pcomp'), ('2D', 'compound'), ('data', 'dobj'), ('maps', 'pobj'), ('Python', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Basemap, matplotlib], [matplotlib, basemap], [basemap, toolkit], [toolkit, library], [library, plotting], [plotting, 2D], [2D, data], [data, maps], [maps, Python], [Python, .]]

>> Trigrams: 
[[Basemap, matplotlib, basemap], [matplotlib, basemap, toolkit], [basemap, toolkit, library], [toolkit, library, plotting], [library, plotting, 2D], [plotting, 2D, data], [2D, data, maps], [data, maps, Python], [maps, Python, .]]

>> Noun Phrases are: 
[Basemap The matplotlib basemap toolkit, a library, 2D data, maps, Python]

>> Named Entities are: 
[('Basemap', 'GPE'), ('2D', 'CARDINAL'), ('Python', 'GPE')]


============================ Sentence 164 =============================

   Prof. Arjun V. Bala 


>> Tokens are: 
[   , Prof., Arjun, V., Bala] 

>> PoS Tags are: 
[('   ', 'SPACE'), ('Prof.', 'PROPN'), ('Arjun', 'PROPN'), ('V.', 'PROPN'), ('Bala', 'PROPN')] 

>> Dependency Tags are: 
[('   ', 'nummod'), ('Prof.', 'compound'), ('Arjun', 'compound'), ('V.', 'compound'), ('Bala', 'ROOT')]

>> Bigrams: 
[[   , Prof.], [Prof., Arjun], [Arjun, V.], [V., Bala]]

>> Trigrams: 
[[   , Prof., Arjun], [Prof., Arjun, V.], [Arjun, V., Bala]]

>> Noun Phrases are: 
[   Prof. Arjun V. Bala]

>> Named Entities are: 
[('Arjun V. Bala', 'PERSON')]


============================ Sentence 165 =============================

#3150713 (PDS)      Unit 04 


>> Tokens are: 
[#, 3150713, (, PDS, ),   , ,   , Unit, 04] 

>> PoS Tags are: 
[('#', 'NOUN'), ('3150713', 'NUM'), ('(', 'PUNCT'), ('PDS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('04', 'NUM')] 

>> Dependency Tags are: 
[('#', 'nmod'), ('3150713', 'nummod'), ('(', 'punct'), ('PDS', 'appos'), (')', 'punct'), ('  ', 'nsubj'), ('\uf077', 'ROOT'), ('  ', 'punct'), ('Unit', 'npadvmod'), ('04', 'nummod')]

>> Bigrams: 
[[#, 3150713], [3150713, (], [(, PDS], [PDS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 04]]

>> Trigrams: 
[[#, 3150713, (], [3150713, (, PDS], [(, PDS, )], [PDS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 04]]

>> Noun Phrases are: 
[(PDS]

>> Named Entities are: 
[('PDS', 'ORG'), ('04', 'CARDINAL')]


============================ Sentence 166 =============================

– Data Visualization ‹#›   


>> Tokens are: 
[–, Data, Visualization, ‹#›,  ] 

>> PoS Tags are: 
[('–', 'PUNCT'), ('Data', 'PROPN'), ('Visualization', 'PROPN'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('–', 'punct'), ('Data', 'compound'), ('Visualization', 'ROOT'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[–, Data], [Data, Visualization], [Visualization, ‹#›], [‹#›,  ]]

>> Trigrams: 
[[–, Data, Visualization], [Data, Visualization, ‹#›], [Visualization, ‹#›,  ]]

>> Noun Phrases are: 
[– Data Visualization]

>> Named Entities are: 
[('Data Visualization', 'ORG')]


============================ Sentence 167 =============================

NetworkX We can use networkx library in order to deal with any kind of networks, which includes social network, railway network, road connectivity etc…. 


>> Tokens are: 
[NetworkX, use, networkx, library, order, deal, kind, networks, ,, includes, social, network, ,, railway, network, ,, road, connectivity, etc, …, .] 

>> PoS Tags are: 
[('NetworkX', 'PUNCT'), ('use', 'VERB'), ('networkx', 'NOUN'), ('library', 'NOUN'), ('order', 'NOUN'), ('deal', 'VERB'), ('kind', 'NOUN'), ('networks', 'NOUN'), (',', 'PUNCT'), ('includes', 'VERB'), ('social', 'ADJ'), ('network', 'NOUN'), (',', 'PUNCT'), ('railway', 'NOUN'), ('network', 'NOUN'), (',', 'PUNCT'), ('road', 'NOUN'), ('connectivity', 'NOUN'), ('etc', 'X'), ('…', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('NetworkX', 'punct'), ('use', 'ROOT'), ('networkx', 'compound'), ('library', 'dobj'), ('order', 'pobj'), ('deal', 'acl'), ('kind', 'pobj'), ('networks', 'pobj'), (',', 'punct'), ('includes', 'relcl'), ('social', 'amod'), ('network', 'dobj'), (',', 'punct'), ('railway', 'compound'), ('network', 'conj'), (',', 'punct'), ('road', 'compound'), ('connectivity', 'appos'), ('etc', 'appos'), ('…', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[NetworkX, use], [use, networkx], [networkx, library], [library, order], [order, deal], [deal, kind], [kind, networks], [networks, ,], [,, includes], [includes, social], [social, network], [network, ,], [,, railway], [railway, network], [network, ,], [,, road], [road, connectivity], [connectivity, etc], [etc, …], […, .]]

>> Trigrams: 
[[NetworkX, use, networkx], [use, networkx, library], [networkx, library, order], [library, order, deal], [order, deal, kind], [deal, kind, networks], [kind, networks, ,], [networks, ,, includes], [,, includes, social], [includes, social, network], [social, network, ,], [network, ,, railway], [,, railway, network], [railway, network, ,], [network, ,, road], [,, road, connectivity], [road, connectivity, etc], [connectivity, etc, …], [etc, …, .]]

>> Noun Phrases are: 
[We, networkx library, order, any kind, networks, social network, railway network, road connectivity]

>> Named Entities are: 
[]


============================ Sentence 168 =============================

Install pip install networkx conda install networkx Types of network graph Undirected Directed Weighted graph    Prof. Arjun V. Bala 


>> Tokens are: 
[Install, pip, install, networkx, conda, install, networkx, Types, network, graph, Undirected, Directed, Weighted, graph,    , Prof., Arjun, V., Bala] 

>> PoS Tags are: 
[('Install', 'NOUN'), ('pip', 'ADV'), ('install', 'VERB'), ('networkx', 'NOUN'), ('conda', 'NOUN'), ('install', 'NOUN'), ('networkx', 'NOUN'), ('Types', 'PROPN'), ('network', 'NOUN'), ('graph', 'NOUN'), ('Undirected', 'PROPN'), ('Directed', 'PROPN'), ('Weighted', 'PROPN'), ('graph', 'NOUN'), ('   ', 'SPACE'), ('Prof.', 'PROPN'), ('Arjun', 'PROPN'), ('V.', 'PROPN'), ('Bala', 'PROPN')] 

>> Dependency Tags are: 
[('Install', 'nsubj'), ('pip', 'advmod'), ('install', 'ROOT'), ('networkx', 'compound'), ('conda', 'compound'), ('install', 'compound'), ('networkx', 'compound'), ('Types', 'dobj'), ('network', 'compound'), ('graph', 'compound'), ('Undirected', 'compound'), ('Directed', 'compound'), ('Weighted', 'pobj'), ('graph', 'conj'), ('   ', 'nummod'), ('Prof.', 'compound'), ('Arjun', 'compound'), ('V.', 'compound'), ('Bala', 'npadvmod')]

>> Bigrams: 
[[Install, pip], [pip, install], [install, networkx], [networkx, conda], [conda, install], [install, networkx], [networkx, Types], [Types, network], [network, graph], [graph, Undirected], [Undirected, Directed], [Directed, Weighted], [Weighted, graph], [graph,    ], [   , Prof.], [Prof., Arjun], [Arjun, V.], [V., Bala]]

>> Trigrams: 
[[Install, pip, install], [pip, install, networkx], [install, networkx, conda], [networkx, conda, install], [conda, install, networkx], [install, networkx, Types], [networkx, Types, network], [Types, network, graph], [network, graph, Undirected], [graph, Undirected, Directed], [Undirected, Directed, Weighted], [Directed, Weighted, graph], [Weighted, graph,    ], [graph,    , Prof.], [   , Prof., Arjun], [Prof., Arjun, V.], [Arjun, V., Bala]]

>> Noun Phrases are: 
[Install, networkx conda install networkx Types, network graph Undirected Directed Weighted, graph]

>> Named Entities are: 
[('Undirected Directed Weighted', 'ORG'), ('Arjun V. Bala', 'PERSON')]


============================ Sentence 169 =============================

#3150713 (PDS)      Unit 04 


>> Tokens are: 
[#, 3150713, (, PDS, ),   , ,   , Unit, 04] 

>> PoS Tags are: 
[('#', 'NOUN'), ('3150713', 'NUM'), ('(', 'PUNCT'), ('PDS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('04', 'NUM')] 

>> Dependency Tags are: 
[('#', 'nmod'), ('3150713', 'nummod'), ('(', 'punct'), ('PDS', 'appos'), (')', 'punct'), ('  ', 'nsubj'), ('\uf077', 'ROOT'), ('  ', 'punct'), ('Unit', 'npadvmod'), ('04', 'nummod')]

>> Bigrams: 
[[#, 3150713], [3150713, (], [(, PDS], [PDS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 04]]

>> Trigrams: 
[[#, 3150713, (], [3150713, (, PDS], [(, PDS, )], [PDS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 04]]

>> Noun Phrases are: 
[(PDS]

>> Named Entities are: 
[('PDS', 'ORG'), ('04', 'CARDINAL')]


============================ Sentence 170 =============================

– Data Visualization ‹#›   NetworkX (example) import networkx as nx g = nx. 


>> Tokens are: 
[–, Data, Visualization, ‹#›,   , NetworkX, (, example, ), import, networkx, nx, g, =, nx, .] 

>> PoS Tags are: 
[('–', 'PUNCT'), ('Data', 'PROPN'), ('Visualization', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('NetworkX', 'PUNCT'), ('(', 'PUNCT'), ('example', 'NOUN'), (')', 'PUNCT'), ('import', 'NOUN'), ('networkx', 'NOUN'), ('nx', 'NOUN'), ('g', 'NOUN'), ('=', 'PUNCT'), ('nx', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('–', 'punct'), ('Data', 'compound'), ('Visualization', 'nmod'), ('‹#›', 'appos'), ('  ', 'appos'), ('NetworkX', 'punct'), ('(', 'punct'), ('example', 'appos'), (')', 'punct'), ('import', 'compound'), ('networkx', 'ROOT'), ('nx', 'pobj'), ('g', 'appos'), ('=', 'punct'), ('nx', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[–, Data], [Data, Visualization], [Visualization, ‹#›], [‹#›,   ], [  , NetworkX], [NetworkX, (], [(, example], [example, )], [), import], [import, networkx], [networkx, nx], [nx, g], [g, =], [=, nx], [nx, .]]

>> Trigrams: 
[[–, Data, Visualization], [Data, Visualization, ‹#›], [Visualization, ‹#›,   ], [‹#›,   , NetworkX], [  , NetworkX, (], [NetworkX, (, example], [(, example, )], [example, ), import], [), import, networkx], [import, networkx, nx], [networkx, nx, g], [nx, g, =], [g, =, nx], [=, nx, .]]

>> Noun Phrases are: 
[‹#›, (example, nx, g, = nx]

>> Named Entities are: 
[('Data Visualization', 'ORG')]


============================ Sentence 171 =============================

Graph() # undirected graph g.add_edge('rajkot','junagadh') g.add_edge('junagadh','porbandar') g.add_edge('rajkot','jamnagar') g.add_edge('jamnagar','bhanvad') 


>> Tokens are: 
[Graph, (, ), #, undirected, graph, g.add_edge('rajkot','junagadh, ', ), g.add_edge('junagadh','porbandar, ', ), g.add_edge('rajkot','jamnagar, ', ), g.add_edge('jamnagar','bhanvad, ', )] 

>> PoS Tags are: 
[('Graph', 'PROPN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('#', 'X'), ('undirected', 'ADJ'), ('graph', 'NOUN'), ("g.add_edge('rajkot','junagadh", 'PROPN'), ("'", 'PUNCT'), (')', 'PUNCT'), ("g.add_edge('junagadh','porbandar", 'PROPN'), ("'", 'PUNCT'), (')', 'PUNCT'), ("g.add_edge('rajkot','jamnagar", 'PROPN'), ("'", 'PUNCT'), (')', 'PUNCT'), ("g.add_edge('jamnagar','bhanvad", 'PROPN'), ("'", 'PART'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('Graph', 'nmod'), ('(', 'punct'), (')', 'punct'), ('#', 'nmod'), ('undirected', 'amod'), ('graph', 'compound'), ("g.add_edge('rajkot','junagadh", 'appos'), ("'", 'punct'), (')', 'punct'), ("g.add_edge('junagadh','porbandar", 'ROOT'), ("'", 'punct'), (')', 'punct'), ("g.add_edge('rajkot','jamnagar", 'appos'), ("'", 'punct'), (')', 'punct'), ("g.add_edge('jamnagar','bhanvad", 'appos'), ("'", 'punct'), (')', 'punct')]

>> Bigrams: 
[[Graph, (], [(, )], [), #], [#, undirected], [undirected, graph], [graph, g.add_edge('rajkot','junagadh], [g.add_edge('rajkot','junagadh, '], [', )], [), g.add_edge('junagadh','porbandar], [g.add_edge('junagadh','porbandar, '], [', )], [), g.add_edge('rajkot','jamnagar], [g.add_edge('rajkot','jamnagar, '], [', )], [), g.add_edge('jamnagar','bhanvad], [g.add_edge('jamnagar','bhanvad, '], [', )]]

>> Trigrams: 
[[Graph, (, )], [(, ), #], [), #, undirected], [#, undirected, graph], [undirected, graph, g.add_edge('rajkot','junagadh], [graph, g.add_edge('rajkot','junagadh, '], [g.add_edge('rajkot','junagadh, ', )], [', ), g.add_edge('junagadh','porbandar], [), g.add_edge('junagadh','porbandar, '], [g.add_edge('junagadh','porbandar, ', )], [', ), g.add_edge('rajkot','jamnagar], [), g.add_edge('rajkot','jamnagar, '], [g.add_edge('rajkot','jamnagar, ', )], [', ), g.add_edge('jamnagar','bhanvad], [), g.add_edge('jamnagar','bhanvad, '], [g.add_edge('jamnagar','bhanvad, ', )]]

>> Noun Phrases are: 
[# undirected graph g.add_edge('rajkot','junagadh, ) g.add_edge('rajkot','jamnagar, g.add_edge('jamnagar','bhanvad]

>> Named Entities are: 
[('Graph', 'PERSON'), ('#', 'CARDINAL'), ("g.add_edge('rajkot','junagadh", 'ORG'), ("g.add_edge('junagadh','porbandar", 'PERSON'), ("g.add_edge('rajkot','jamnagar", 'PERSON')]


============================ Sentence 172 =============================

g.add_edge('bhanvad','porbandar') 


>> Tokens are: 
[g.add_edge('bhanvad','porbandar, ', )] 

>> PoS Tags are: 
[("g.add_edge('bhanvad','porbandar", 'NOUN'), ("'", 'PUNCT'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[("g.add_edge('bhanvad','porbandar", 'ROOT'), ("'", 'punct'), (')', 'punct')]

>> Bigrams: 
[[g.add_edge('bhanvad','porbandar, '], [', )]]

>> Trigrams: 
[[g.add_edge('bhanvad','porbandar, ', )]]

>> Noun Phrases are: 
[g.add_edge('bhanvad','porbandar]

>> Named Entities are: 
[]


============================ Sentence 173 =============================

nx.draw(g,with_labels=True) 1 2 3 4 5 6 7 8 networkxDemo.py  import networkx as nx gD = nx. 


>> Tokens are: 
[nx.draw(g, ,, with_labels, =, True, ), 1, 2, 3, 4, 5, 6, 7, 8, networkxDemo.py,  , import, networkx, nx, gD, =, nx, .] 

>> PoS Tags are: 
[('nx.draw(g', 'NOUN'), (',', 'PUNCT'), ('with_labels', 'PROPN'), ('=', 'NOUN'), ('True', 'ADJ'), (')', 'PUNCT'), ('1', 'NUM'), ('2', 'NUM'), ('3', 'NUM'), ('4', 'NUM'), ('5', 'NUM'), ('6', 'NUM'), ('7', 'NUM'), ('8', 'NUM'), ('networkxDemo.py', 'NOUN'), (' ', 'SPACE'), ('import', 'NOUN'), ('networkx', 'NOUN'), ('nx', 'NOUN'), ('gD', 'PROPN'), ('=', 'PUNCT'), ('nx', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('nx.draw(g', 'nmod'), (',', 'punct'), ('with_labels', 'appos'), ('=', 'punct'), ('True', 'amod'), (')', 'punct'), ('1', 'compound'), ('2', 'nummod'), ('3', 'appos'), ('4', 'nummod'), ('5', 'appos'), ('6', 'nummod'), ('7', 'compound'), ('8', 'nummod'), ('networkxDemo.py', 'compound'), (' ', 'compound'), ('import', 'compound'), ('networkx', 'ROOT'), ('nx', 'pobj'), ('gD', 'prep'), ('=', 'punct'), ('nx', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[nx.draw(g, ,], [,, with_labels], [with_labels, =], [=, True], [True, )], [), 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, networkxDemo.py], [networkxDemo.py,  ], [ , import], [import, networkx], [networkx, nx], [nx, gD], [gD, =], [=, nx], [nx, .]]

>> Trigrams: 
[[nx.draw(g, ,, with_labels], [,, with_labels, =], [with_labels, =, True], [=, True, )], [True, ), 1], [), 1, 2], [1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6], [5, 6, 7], [6, 7, 8], [7, 8, networkxDemo.py], [8, networkxDemo.py,  ], [networkxDemo.py,  , import], [ , import, networkx], [import, networkx, nx], [networkx, nx, gD], [nx, gD, =], [gD, =, nx], [=, nx, .]]

>> Noun Phrases are: 
[with_labels, nx, = nx]

>> Named Entities are: 
[('nx.draw(g', 'GPE'), ('gD', 'PERSON')]


============================ Sentence 174 =============================

DiGraph() # directed graph gD.add_edge('Modi','Arjun') gD.add_edge('Modi','GambhavaSir') gD.add_edge('GambhavaSir','Modi') 


>> Tokens are: 
[DiGraph, (, ), #, directed, graph, gD.add_edge('Modi','Arjun, ', ), gD.add_edge('Modi','GambhavaSir, ', ), gD.add_edge('GambhavaSir','Modi, ', )] 

>> PoS Tags are: 
[('DiGraph', 'PROPN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('#', 'NOUN'), ('directed', 'VERB'), ('graph', 'NOUN'), ("gD.add_edge('Modi','Arjun", 'PROPN'), ("'", 'PART'), (')', 'PUNCT'), ("gD.add_edge('Modi','GambhavaSir", 'PROPN'), ("'", 'PUNCT'), (')', 'PUNCT'), ("gD.add_edge('GambhavaSir','Modi", 'PROPN'), ("'", 'PUNCT'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('DiGraph', 'nsubj'), ('(', 'punct'), (')', 'punct'), ('#', 'npadvmod'), ('directed', 'ROOT'), ('graph', 'compound'), ("gD.add_edge('Modi','Arjun", 'dobj'), ("'", 'case'), (')', 'punct'), ("gD.add_edge('Modi','GambhavaSir", 'dobj'), ("'", 'punct'), (')', 'punct'), ("gD.add_edge('GambhavaSir','Modi", 'prep'), ("'", 'punct'), (')', 'punct')]

>> Bigrams: 
[[DiGraph, (], [(, )], [), #], [#, directed], [directed, graph], [graph, gD.add_edge('Modi','Arjun], [gD.add_edge('Modi','Arjun, '], [', )], [), gD.add_edge('Modi','GambhavaSir], [gD.add_edge('Modi','GambhavaSir, '], [', )], [), gD.add_edge('GambhavaSir','Modi], [gD.add_edge('GambhavaSir','Modi, '], [', )]]

>> Trigrams: 
[[DiGraph, (, )], [(, ), #], [), #, directed], [#, directed, graph], [directed, graph, gD.add_edge('Modi','Arjun], [graph, gD.add_edge('Modi','Arjun, '], [gD.add_edge('Modi','Arjun, ', )], [', ), gD.add_edge('Modi','GambhavaSir], [), gD.add_edge('Modi','GambhavaSir, '], [gD.add_edge('Modi','GambhavaSir, ', )], [', ), gD.add_edge('GambhavaSir','Modi], [), gD.add_edge('GambhavaSir','Modi, '], [gD.add_edge('GambhavaSir','Modi, ', )]]

>> Noun Phrases are: 
[DiGraph, graph gD.add_edge('Modi','Arjun, ) gD.add_edge('Modi','GambhavaSir]

>> Named Entities are: 
[('DiGraph', 'PERSON'), ('#', 'CARDINAL')]


============================ Sentence 175 =============================

 nx.draw(gD, with_labels=True) 1 2 3 4 5 6 7 networkxDemo.py    Prof. Arjun V. Bala 


>> Tokens are: 
[ , nx.draw(gD, ,, with_labels, =, True, ), 1, 2, 3, 4, 5, 6, 7, networkxDemo.py,    , Prof., Arjun, V., Bala] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('nx.draw(gD', 'ADV'), (',', 'PUNCT'), ('with_labels', 'PROPN'), ('=', 'NOUN'), ('True', 'ADJ'), (')', 'PUNCT'), ('1', 'NUM'), ('2', 'NUM'), ('3', 'NUM'), ('4', 'NUM'), ('5', 'NUM'), ('6', 'NUM'), ('7', 'NUM'), ('networkxDemo.py', 'NUM'), ('   ', 'SPACE'), ('Prof.', 'PROPN'), ('Arjun', 'PROPN'), ('V.', 'PROPN'), ('Bala', 'PROPN')] 

>> Dependency Tags are: 
[(' ', 'dep'), ('nx.draw(gD', 'advmod'), (',', 'punct'), ('with_labels', 'ROOT'), ('=', 'punct'), ('True', 'amod'), (')', 'punct'), ('1', 'compound'), ('2', 'appos'), ('3', 'appos'), ('4', 'appos'), ('5', 'quantmod'), ('6', 'compound'), ('7', 'nummod'), ('networkxDemo.py', 'compound'), ('   ', 'punct'), ('Prof.', 'compound'), ('Arjun', 'compound'), ('V.', 'compound'), ('Bala', 'npadvmod')]

>> Bigrams: 
[[ , nx.draw(gD], [nx.draw(gD, ,], [,, with_labels], [with_labels, =], [=, True], [True, )], [), 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, networkxDemo.py], [networkxDemo.py,    ], [   , Prof.], [Prof., Arjun], [Arjun, V.], [V., Bala]]

>> Trigrams: 
[[ , nx.draw(gD, ,], [nx.draw(gD, ,, with_labels], [,, with_labels, =], [with_labels, =, True], [=, True, )], [True, ), 1], [), 1, 2], [1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6], [5, 6, 7], [6, 7, networkxDemo.py], [7, networkxDemo.py,    ], [networkxDemo.py,    , Prof.], [   , Prof., Arjun], [Prof., Arjun, V.], [Arjun, V., Bala]]

>> Noun Phrases are: 
[ nx.draw(gD, with_labels]

>> Named Entities are: 
[('Arjun V. Bala', 'PERSON')]


============================ Sentence 176 =============================

#3150713 (PDS)      Unit 04 


>> Tokens are: 
[#, 3150713, (, PDS, ),   , ,   , Unit, 04] 

>> PoS Tags are: 
[('#', 'NOUN'), ('3150713', 'NUM'), ('(', 'PUNCT'), ('PDS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('04', 'NUM')] 

>> Dependency Tags are: 
[('#', 'nmod'), ('3150713', 'nummod'), ('(', 'punct'), ('PDS', 'appos'), (')', 'punct'), ('  ', 'nsubj'), ('\uf077', 'ROOT'), ('  ', 'punct'), ('Unit', 'npadvmod'), ('04', 'nummod')]

>> Bigrams: 
[[#, 3150713], [3150713, (], [(, PDS], [PDS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 04]]

>> Trigrams: 
[[#, 3150713, (], [3150713, (, PDS], [(, PDS, )], [PDS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 04]]

>> Noun Phrases are: 
[(PDS]

>> Named Entities are: 
[('PDS', 'ORG'), ('04', 'CARDINAL')]


============================ Sentence 177 =============================

–Data Visualization ‹#›  NetworkX (cont.) 


>> Tokens are: 
[–, Data, Visualization, ‹#›,  , NetworkX, (, cont, ., )] 

>> PoS Tags are: 
[('–', 'PUNCT'), ('Data', 'PROPN'), ('Visualization', 'PROPN'), ('‹#›', 'X'), (' ', 'SPACE'), ('NetworkX', 'PROPN'), ('(', 'PUNCT'), ('cont', 'NOUN'), ('.', 'PUNCT'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('–', 'punct'), ('Data', 'compound'), ('Visualization', 'ROOT'), ('‹#›', 'punct'), (' ', 'appos'), ('NetworkX', 'punct'), ('(', 'punct'), ('cont', 'appos'), ('.', 'punct'), (')', 'punct')]

>> Bigrams: 
[[–, Data], [Data, Visualization], [Visualization, ‹#›], [‹#›,  ], [ , NetworkX], [NetworkX, (], [(, cont], [cont, .], [., )]]

>> Trigrams: 
[[–, Data, Visualization], [Data, Visualization, ‹#›], [Visualization, ‹#›,  ], [‹#›,  , NetworkX], [ , NetworkX, (], [NetworkX, (, cont], [(, cont, .], [cont, ., )]]

>> Noun Phrases are: 
[–Data Visualization, cont]

>> Named Entities are: 
[('Data Visualization', 'ORG')]


============================ Sentence 178 =============================

We can use many analysis functions available in NetworkX library, some of functions are as below nx.shortest_path(g,'rajkot','porbandar') Will return ['rajkot', 'junagadh', 'porbandar'] nx.clustering(g) Will return clustering value for each node nx.degree_centrality(g) Will return the degree of centrality for each node, we can find most popular/influential node using this method. 


>> Tokens are: 
[use, analysis, functions, available, NetworkX, library, ,, functions, nx.shortest_path(g,'rajkot','porbandar, ', ), return, [, ', rajkot, ', ,, ', junagadh, ', ,, ', porbandar, ', ], nx.clustering(g, ), return, clustering, value, node, nx.degree_centrality(g, ), return, degree, centrality, node, ,, find, popular, /, influential, node, method, .] 

>> PoS Tags are: 
[('use', 'VERB'), ('analysis', 'NOUN'), ('functions', 'NOUN'), ('available', 'ADJ'), ('NetworkX', 'ADJ'), ('library', 'NOUN'), (',', 'PUNCT'), ('functions', 'NOUN'), ("nx.shortest_path(g,'rajkot','porbandar", 'PROPN'), ("'", 'PART'), (')', 'PUNCT'), ('return', 'VERB'), ('[', 'PUNCT'), ("'", 'PUNCT'), ('rajkot', 'NOUN'), ("'", 'PUNCT'), (',', 'PUNCT'), ("'", 'PUNCT'), ('junagadh', 'NOUN'), ("'", 'PUNCT'), (',', 'PUNCT'), ("'", 'PUNCT'), ('porbandar', 'NOUN'), ("'", 'PUNCT'), (']', 'PUNCT'), ('nx.clustering(g', 'PROPN'), (')', 'PUNCT'), ('return', 'VERB'), ('clustering', 'ADJ'), ('value', 'NOUN'), ('node', 'NOUN'), ('nx.degree_centrality(g', 'PROPN'), (')', 'PUNCT'), ('return', 'VERB'), ('degree', 'NOUN'), ('centrality', 'NOUN'), ('node', 'NOUN'), (',', 'PUNCT'), ('find', 'VERB'), ('popular', 'ADJ'), ('/', 'SYM'), ('influential', 'ADJ'), ('node', 'NOUN'), ('method', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('use', 'ccomp'), ('analysis', 'compound'), ('functions', 'dobj'), ('available', 'amod'), ('NetworkX', 'amod'), ('library', 'pobj'), (',', 'punct'), ('functions', 'pobj'), ("nx.shortest_path(g,'rajkot','porbandar", 'pobj'), ("'", 'punct'), (')', 'punct'), ('return', 'ccomp'), ('[', 'punct'), ("'", 'punct'), ('rajkot', 'dobj'), ("'", 'punct'), (',', 'punct'), ("'", 'punct'), ('junagadh', 'dobj'), ("'", 'punct'), (',', 'punct'), ("'", 'punct'), ('porbandar', 'dobj'), ("'", 'punct'), (']', 'punct'), ('nx.clustering(g', 'dep'), (')', 'punct'), ('return', 'dep'), ('clustering', 'amod'), ('value', 'dobj'), ('node', 'pobj'), ('nx.degree_centrality(g', 'appos'), (')', 'punct'), ('return', 'conj'), ('degree', 'dobj'), ('centrality', 'pobj'), ('node', 'pobj'), (',', 'punct'), ('find', 'ROOT'), ('popular', 'amod'), ('/', 'punct'), ('influential', 'amod'), ('node', 'dobj'), ('method', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[use, analysis], [analysis, functions], [functions, available], [available, NetworkX], [NetworkX, library], [library, ,], [,, functions], [functions, nx.shortest_path(g,'rajkot','porbandar], [nx.shortest_path(g,'rajkot','porbandar, '], [', )], [), return], [return, [], [[, '], [', rajkot], [rajkot, '], [', ,], [,, '], [', junagadh], [junagadh, '], [', ,], [,, '], [', porbandar], [porbandar, '], [', ]], [], nx.clustering(g], [nx.clustering(g, )], [), return], [return, clustering], [clustering, value], [value, node], [node, nx.degree_centrality(g], [nx.degree_centrality(g, )], [), return], [return, degree], [degree, centrality], [centrality, node], [node, ,], [,, find], [find, popular], [popular, /], [/, influential], [influential, node], [node, method], [method, .]]

>> Trigrams: 
[[use, analysis, functions], [analysis, functions, available], [functions, available, NetworkX], [available, NetworkX, library], [NetworkX, library, ,], [library, ,, functions], [,, functions, nx.shortest_path(g,'rajkot','porbandar], [functions, nx.shortest_path(g,'rajkot','porbandar, '], [nx.shortest_path(g,'rajkot','porbandar, ', )], [', ), return], [), return, [], [return, [, '], [[, ', rajkot], [', rajkot, '], [rajkot, ', ,], [', ,, '], [,, ', junagadh], [', junagadh, '], [junagadh, ', ,], [', ,, '], [,, ', porbandar], [', porbandar, '], [porbandar, ', ]], [', ], nx.clustering(g], [], nx.clustering(g, )], [nx.clustering(g, ), return], [), return, clustering], [return, clustering, value], [clustering, value, node], [value, node, nx.degree_centrality(g], [node, nx.degree_centrality(g, )], [nx.degree_centrality(g, ), return], [), return, degree], [return, degree, centrality], [degree, centrality, node], [centrality, node, ,], [node, ,, find], [,, find, popular], [find, popular, /], [popular, /, influential], [/, influential, node], [influential, node, method], [node, method, .]]

>> Noun Phrases are: 
[We, many analysis functions, NetworkX library, functions, nx.shortest_path(g,'rajkot','porbandar, rajkot, junagadh, 'porbandar, clustering value, each node, nx.degree_centrality(g, the degree, centrality, each node, we, most popular/influential node, this method]

>> Named Entities are: 
[]


============================ Sentence 179 =============================

nx.density(g) Will return the density of the graph. 


>> Tokens are: 
[nx.density(g, ), return, density, graph, .] 

>> PoS Tags are: 
[('nx.density(g', 'PROPN'), (')', 'PUNCT'), ('return', 'VERB'), ('density', 'NOUN'), ('graph', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('nx.density(g', 'nsubj'), (')', 'punct'), ('return', 'ROOT'), ('density', 'dobj'), ('graph', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[nx.density(g, )], [), return], [return, density], [density, graph], [graph, .]]

>> Trigrams: 
[[nx.density(g, ), return], [), return, density], [return, density, graph], [density, graph, .]]

>> Noun Phrases are: 
[nx.density(g, the density, the graph]

>> Named Entities are: 
[]


============================ Sentence 180 =============================

The density is 0 for a graph without edges and 1 for a complete graph. 


>> Tokens are: 
[density, 0, graph, edges, 1, complete, graph, .] 

>> PoS Tags are: 
[('density', 'NOUN'), ('0', 'NUM'), ('graph', 'NOUN'), ('edges', 'NOUN'), ('1', 'NUM'), ('complete', 'ADJ'), ('graph', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('density', 'nsubj'), ('0', 'attr'), ('graph', 'pobj'), ('edges', 'pobj'), ('1', 'conj'), ('complete', 'amod'), ('graph', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[density, 0], [0, graph], [graph, edges], [edges, 1], [1, complete], [complete, graph], [graph, .]]

>> Trigrams: 
[[density, 0, graph], [0, graph, edges], [graph, edges, 1], [edges, 1, complete], [1, complete, graph], [complete, graph, .]]

>> Noun Phrases are: 
[The density, a graph, edges, a complete graph]

>> Named Entities are: 
[('1', 'CARDINAL')]


============================ Sentence 181 =============================

  nx.info(g) 


>> Tokens are: 
[  , nx.info(g, )] 

>> PoS Tags are: 
[('\xa0 ', 'SPACE'), ('nx.info(g', 'PROPN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('\xa0 ', 'compound'), ('nx.info(g', 'ROOT'), (')', 'punct')]

>> Bigrams: 
[[  , nx.info(g], [nx.info(g, )]]

>> Trigrams: 
[[  , nx.info(g, )]]

>> Noun Phrases are: 
[  nx.info(g]

>> Named Entities are: 
[]


============================ Sentence 182 =============================

Return a summary of information for the graph G. 


>> Tokens are: 
[Return, summary, information, graph, G.] 

>> PoS Tags are: 
[('Return', 'VERB'), ('summary', 'NOUN'), ('information', 'NOUN'), ('graph', 'NOUN'), ('G.', 'PROPN')] 

>> Dependency Tags are: 
[('Return', 'ROOT'), ('summary', 'dobj'), ('information', 'pobj'), ('graph', 'pobj'), ('G.', 'npadvmod')]

>> Bigrams: 
[[Return, summary], [summary, information], [information, graph], [graph, G.]]

>> Trigrams: 
[[Return, summary, information], [summary, information, graph], [information, graph, G.]]

>> Noun Phrases are: 
[a summary, information, the graph]

>> Named Entities are: 
[]


============================ Sentence 183 =============================

The summary includes the number of nodes and edges, and their average degree. 


>> Tokens are: 
[summary, includes, number, nodes, edges, ,, average, degree, .] 

>> PoS Tags are: 
[('summary', 'NOUN'), ('includes', 'VERB'), ('number', 'NOUN'), ('nodes', 'NOUN'), ('edges', 'NOUN'), (',', 'PUNCT'), ('average', 'ADJ'), ('degree', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('summary', 'nsubj'), ('includes', 'ROOT'), ('number', 'dobj'), ('nodes', 'pobj'), ('edges', 'conj'), (',', 'punct'), ('average', 'amod'), ('degree', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[summary, includes], [includes, number], [number, nodes], [nodes, edges], [edges, ,], [,, average], [average, degree], [degree, .]]

>> Trigrams: 
[[summary, includes, number], [includes, number, nodes], [number, nodes, edges], [nodes, edges, ,], [edges, ,, average], [,, average, degree], [average, degree, .]]

>> Noun Phrases are: 
[The summary, the number, nodes, edges, their average degree]

>> Named Entities are: 
[]


============================ Sentence 184 =============================

   Prof. Arjun V. Bala #3150713 (PDS)       


>> Tokens are: 
[   , Prof., Arjun, V., Bala, #, 3150713, (, PDS, ),   , ,   ] 

>> PoS Tags are: 
[('   ', 'SPACE'), ('Prof.', 'PROPN'), ('Arjun', 'PROPN'), ('V.', 'PROPN'), ('Bala', 'PROPN'), ('#', 'NOUN'), ('3150713', 'NUM'), ('(', 'PUNCT'), ('PDS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE')] 

>> Dependency Tags are: 
[('   ', 'nummod'), ('Prof.', 'compound'), ('Arjun', 'compound'), ('V.', 'compound'), ('Bala', 'nsubj'), ('#', 'nmod'), ('3150713', 'appos'), ('(', 'punct'), ('PDS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'punct')]

>> Bigrams: 
[[   , Prof.], [Prof., Arjun], [Arjun, V.], [V., Bala], [Bala, #], [#, 3150713], [3150713, (], [(, PDS], [PDS, )], [),   ], [  , ], [,   ]]

>> Trigrams: 
[[   , Prof., Arjun], [Prof., Arjun, V.], [Arjun, V., Bala], [V., Bala, #], [Bala, #, 3150713], [#, 3150713, (], [3150713, (, PDS], [(, PDS, )], [PDS, ),   ], [),   , ], [  , ,   ]]

>> Noun Phrases are: 
[   Prof. Arjun V. Bala, (PDS]

>> Named Entities are: 
[('Arjun V. Bala', 'PERSON'), ('PDS', 'ORG')]


============================ Sentence 185 =============================

Unit 04 – Data Visualization ‹#›                                /docProps/thumbnail.jpeg 


>> Tokens are: 
[Unit, 04, –, Data, Visualization, ‹#›,                                , /docProps, /, thumbnail.jpeg] 

>> PoS Tags are: 
[('Unit', 'NOUN'), ('04', 'NUM'), ('–', 'PUNCT'), ('Data', 'PROPN'), ('Visualization', 'PROPN'), ('‹#›', 'PROPN'), ('                               ', 'SPACE'), ('/docProps', 'X'), ('/', 'SYM'), ('thumbnail.jpeg', 'NOUN')] 

>> Dependency Tags are: 
[('Unit', 'nmod'), ('04', 'nummod'), ('–', 'punct'), ('Data', 'compound'), ('Visualization', 'appos'), ('‹#›', 'appos'), ('                               ', 'appos'), ('/docProps', 'punct'), ('/', 'punct'), ('thumbnail.jpeg', 'ROOT')]

>> Bigrams: 
[[Unit, 04], [04, –], [–, Data], [Data, Visualization], [Visualization, ‹#›], [‹#›,                                ], [                               , /docProps], [/docProps, /], [/, thumbnail.jpeg]]

>> Trigrams: 
[[Unit, 04, –], [04, –, Data], [–, Data, Visualization], [Data, Visualization, ‹#›], [Visualization, ‹#›,                                ], [‹#›,                                , /docProps], [                               , /docProps, /], [/docProps, /, thumbnail.jpeg]]

>> Noun Phrases are: 
[– Data Visualization, ‹#›]

>> Named Entities are: 
[('04', 'CARDINAL'), ('Data Visualization ‹#›', 'ORG')]
