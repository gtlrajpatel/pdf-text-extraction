				 *** Text Processing using Spacy *** 


============================ Sentence 1 =============================

OOPC++ UNIT-1   Prof. Rupesh G. Vaishnav rupesh.vaishnav@darshan.ac.in 94280-37452 Information & Network Security (2170709) 


>> Tokens are: 
[OOPC++, UNIT-1,   , Prof., Rupesh, G., Vaishnav, rupesh.vaishnav@darshan.ac.in, 94280, -, 37452, Information, &, Network, Security, (, 2170709, )] 

>> PoS Tags are: 
[('OOPC++', 'INTJ'), ('UNIT-1', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Rupesh', 'PROPN'), ('G.', 'PROPN'), ('Vaishnav', 'PROPN'), ('rupesh.vaishnav@darshan.ac.in', 'NUM'), ('94280', 'NUM'), ('-', 'SYM'), ('37452', 'NUM'), ('Information', 'PROPN'), ('&', 'CCONJ'), ('Network', 'PROPN'), ('Security', 'PROPN'), ('(', 'PUNCT'), ('2170709', 'NUM'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('OOPC++', 'intj'), ('UNIT-1', 'ROOT'), ('  ', 'nummod'), ('Prof.', 'compound'), ('Rupesh', 'compound'), ('G.', 'compound'), ('Vaishnav', 'dobj'), ('rupesh.vaishnav@darshan.ac.in', 'appos'), ('94280', 'nummod'), ('-', 'punct'), ('37452', 'nummod'), ('Information', 'nmod'), ('&', 'cc'), ('Network', 'conj'), ('Security', 'appos'), ('(', 'punct'), ('2170709', 'appos'), (')', 'punct')]

>> Bigrams: 
[[OOPC++, UNIT-1], [UNIT-1,   ], [  , Prof.], [Prof., Rupesh], [Rupesh, G.], [G., Vaishnav], [Vaishnav, rupesh.vaishnav@darshan.ac.in], [rupesh.vaishnav@darshan.ac.in, 94280], [94280, -], [-, 37452], [37452, Information], [Information, &], [&, Network], [Network, Security], [Security, (], [(, 2170709], [2170709, )]]

>> Trigrams: 
[[OOPC++, UNIT-1,   ], [UNIT-1,   , Prof.], [  , Prof., Rupesh], [Prof., Rupesh, G.], [Rupesh, G., Vaishnav], [G., Vaishnav, rupesh.vaishnav@darshan.ac.in], [Vaishnav, rupesh.vaishnav@darshan.ac.in, 94280], [rupesh.vaishnav@darshan.ac.in, 94280, -], [94280, -, 37452], [-, 37452, Information], [37452, Information, &], [Information, &, Network], [&, Network, Security], [Network, Security, (], [Security, (, 2170709], [(, 2170709, )]]

>> Noun Phrases are: 
[OOPC++ UNIT-1,   Prof. Rupesh G. Vaishnav, 94280-37452 Information & Network Security]

>> Named Entities are: 
[('Rupesh G. Vaishnav', 'PERSON'), ('94280-37452', 'DATE'), ('Information & Network Security', 'ORG')]


============================ Sentence 2 =============================

	 Darshan Institute of Engineering & Technology UNIT-4 Asymmetric Ciphers      1  Outline Public Key Cryptosystems with Applications Requirements and Cryptanalysis RSA algorithm RSA computational aspects and security Diffie-Hillman Key Exchange algorithm Man-in-Middle attack   Unit-4 Asymmertic Ciphers                                                       Darshan Institute of Engineering & Technology   ‹#›  X.800 and RFC 2828 International Telecommunication Union (ITU) 2   


>> Tokens are: 
[	 , Darshan, Institute, Engineering, &, Technology, UNIT-4, Asymmetric, Ciphers,      , 1,  , Outline, Public, Key, Cryptosystems, Applications, Requirements, Cryptanalysis, RSA, algorithm, RSA, computational, aspects, security, Diffie, -, Hillman, Key, Exchange, algorithm, Man, -, -, Middle, attack,   , Unit-4, Asymmertic, Ciphers,                                                       , Darshan, Institute, Engineering, &, Technology,   , ‹#›,  , X.800, RFC, 2828, International, Telecommunication, Union, (, ITU, ), 2,  ] 

>> PoS Tags are: 
[('\t ', 'SPACE'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('Engineering', 'PROPN'), ('&', 'CCONJ'), ('Technology', 'PROPN'), ('UNIT-4', 'PROPN'), ('Asymmetric', 'PROPN'), ('Ciphers', 'VERB'), ('     ', 'SPACE'), ('1', 'NUM'), (' ', 'SPACE'), ('Outline', 'PROPN'), ('Public', 'PROPN'), ('Key', 'PROPN'), ('Cryptosystems', 'PROPN'), ('Applications', 'PROPN'), ('Requirements', 'PROPN'), ('Cryptanalysis', 'PROPN'), ('RSA', 'PROPN'), ('algorithm', 'NOUN'), ('RSA', 'PROPN'), ('computational', 'ADJ'), ('aspects', 'NOUN'), ('security', 'NOUN'), ('Diffie', 'PROPN'), ('-', 'PUNCT'), ('Hillman', 'PROPN'), ('Key', 'PROPN'), ('Exchange', 'PROPN'), ('algorithm', 'NOUN'), ('Man', 'NOUN'), ('-', 'PUNCT'), ('-', 'PUNCT'), ('Middle', 'ADJ'), ('attack', 'NOUN'), ('  ', 'SPACE'), ('Unit-4', 'NOUN'), ('Asymmertic', 'PROPN'), ('Ciphers', 'PROPN'), ('                                                      ', 'SPACE'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('Engineering', 'PROPN'), ('&', 'CCONJ'), ('Technology', 'PROPN'), ('  ', 'SPACE'), ('‹#›', 'VERB'), (' ', 'SPACE'), ('X.800', 'PROPN'), ('RFC', 'PROPN'), ('2828', 'NUM'), ('International', 'PROPN'), ('Telecommunication', 'PROPN'), ('Union', 'PROPN'), ('(', 'PUNCT'), ('ITU', 'PROPN'), (')', 'PUNCT'), ('2', 'NUM'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('\t ', 'dep'), ('Darshan', 'compound'), ('Institute', 'appos'), ('Engineering', 'pobj'), ('&', 'cc'), ('Technology', 'conj'), ('UNIT-4', 'appos'), ('Asymmetric', 'compound'), ('Ciphers', 'ROOT'), ('     ', 'nmod'), ('1', 'nummod'), (' ', 'compound'), ('Outline', 'compound'), ('Public', 'compound'), ('Key', 'compound'), ('Cryptosystems', 'dobj'), ('Applications', 'compound'), ('Requirements', 'pobj'), ('Cryptanalysis', 'compound'), ('RSA', 'nmod'), ('algorithm', 'nmod'), ('RSA', 'nmod'), ('computational', 'amod'), ('aspects', 'conj'), ('security', 'compound'), ('Diffie', 'compound'), ('-', 'punct'), ('Hillman', 'compound'), ('Key', 'compound'), ('Exchange', 'conj'), ('algorithm', 'advmod'), ('Man', 'nmod'), ('-', 'punct'), ('-', 'punct'), ('Middle', 'pobj'), ('attack', 'dobj'), ('  ', 'nummod'), ('Unit-4', 'compound'), ('Asymmertic', 'compound'), ('Ciphers', 'appos'), ('                                                      ', 'compound'), ('Darshan', 'compound'), ('Institute', 'appos'), ('Engineering', 'pobj'), ('&', 'cc'), ('Technology', 'conj'), ('  ', 'conj'), ('‹#›', 'punct'), (' ', 'npadvmod'), ('X.800', 'conj'), ('RFC', 'conj'), ('2828', 'nummod'), ('International', 'compound'), ('Telecommunication', 'compound'), ('Union', 'appos'), ('(', 'punct'), ('ITU', 'appos'), (')', 'punct'), ('2', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[	 , Darshan], [Darshan, Institute], [Institute, Engineering], [Engineering, &], [&, Technology], [Technology, UNIT-4], [UNIT-4, Asymmetric], [Asymmetric, Ciphers], [Ciphers,      ], [     , 1], [1,  ], [ , Outline], [Outline, Public], [Public, Key], [Key, Cryptosystems], [Cryptosystems, Applications], [Applications, Requirements], [Requirements, Cryptanalysis], [Cryptanalysis, RSA], [RSA, algorithm], [algorithm, RSA], [RSA, computational], [computational, aspects], [aspects, security], [security, Diffie], [Diffie, -], [-, Hillman], [Hillman, Key], [Key, Exchange], [Exchange, algorithm], [algorithm, Man], [Man, -], [-, -], [-, Middle], [Middle, attack], [attack,   ], [  , Unit-4], [Unit-4, Asymmertic], [Asymmertic, Ciphers], [Ciphers,                                                       ], [                                                      , Darshan], [Darshan, Institute], [Institute, Engineering], [Engineering, &], [&, Technology], [Technology,   ], [  , ‹#›], [‹#›,  ], [ , X.800], [X.800, RFC], [RFC, 2828], [2828, International], [International, Telecommunication], [Telecommunication, Union], [Union, (], [(, ITU], [ITU, )], [), 2], [2,  ]]

>> Trigrams: 
[[	 , Darshan, Institute], [Darshan, Institute, Engineering], [Institute, Engineering, &], [Engineering, &, Technology], [&, Technology, UNIT-4], [Technology, UNIT-4, Asymmetric], [UNIT-4, Asymmetric, Ciphers], [Asymmetric, Ciphers,      ], [Ciphers,      , 1], [     , 1,  ], [1,  , Outline], [ , Outline, Public], [Outline, Public, Key], [Public, Key, Cryptosystems], [Key, Cryptosystems, Applications], [Cryptosystems, Applications, Requirements], [Applications, Requirements, Cryptanalysis], [Requirements, Cryptanalysis, RSA], [Cryptanalysis, RSA, algorithm], [RSA, algorithm, RSA], [algorithm, RSA, computational], [RSA, computational, aspects], [computational, aspects, security], [aspects, security, Diffie], [security, Diffie, -], [Diffie, -, Hillman], [-, Hillman, Key], [Hillman, Key, Exchange], [Key, Exchange, algorithm], [Exchange, algorithm, Man], [algorithm, Man, -], [Man, -, -], [-, -, Middle], [-, Middle, attack], [Middle, attack,   ], [attack,   , Unit-4], [  , Unit-4, Asymmertic], [Unit-4, Asymmertic, Ciphers], [Asymmertic, Ciphers,                                                       ], [Ciphers,                                                       , Darshan], [                                                      , Darshan, Institute], [Darshan, Institute, Engineering], [Institute, Engineering, &], [Engineering, &, Technology], [&, Technology,   ], [Technology,   , ‹#›], [  , ‹#›,  ], [‹#›,  , X.800], [ , X.800, RFC], [X.800, RFC, 2828], [RFC, 2828, International], [2828, International, Telecommunication], [International, Telecommunication, Union], [Telecommunication, Union, (], [Union, (, ITU], [(, ITU, )], [ITU, ), 2], [), 2,  ]]

>> Noun Phrases are: 
[Darshan Institute, Engineering, Technology, UNIT-4,      1  Outline Public Key Cryptosystems, Applications Requirements, Cryptanalysis RSA algorithm RSA computational aspects, security Diffie-Hillman Key Exchange, Man-in-Middle attack,   Unit-4 Asymmertic Ciphers,                                                       Darshan Institute, Engineering, Technology, X.800, RFC, International Telecommunication Union, (ITU]

>> Named Entities are: 
[('Darshan Institute of Engineering & Technology', 'ORG'), ('Asymmetric Ciphers', 'PERSON'), ('Cryptanalysis', 'ORG'), ('RSA', 'ORG'), ('Diffie-Hillman Key Exchange', 'ORG'), ('Unit-4 Asymmertic Ciphers                                                       Darshan Institute of Engineering & Technology', 'ORG'), ('X.800', 'CARDINAL'), ('RFC 2828 International Telecommunication Union', 'ORG'), ('ITU', 'ORG'), ('2', 'CARDINAL')]


============================ Sentence 3 =============================

Symmetric key Encryption      Plaintext input Plaintext output Encryption Algorithm (e.g.--.- AES) Decryption Algorithm (reverse of encryption algorithm) 


>> Tokens are: 
[Symmetric, key, Encryption,      , Plaintext, input, Plaintext, output, Encryption, Algorithm, (, e.g.--.-, AES, ), Decryption, Algorithm, (, reverse, encryption, algorithm, )] 

>> PoS Tags are: 
[('Symmetric', 'ADJ'), ('key', 'ADJ'), ('Encryption', 'PROPN'), ('     ', 'SPACE'), ('Plaintext', 'PROPN'), ('input', 'NOUN'), ('Plaintext', 'PROPN'), ('output', 'NOUN'), ('Encryption', 'PROPN'), ('Algorithm', 'PROPN'), ('(', 'PUNCT'), ('e.g.--.-', 'X'), ('AES', 'PROPN'), (')', 'PUNCT'), ('Decryption', 'PROPN'), ('Algorithm', 'PROPN'), ('(', 'PUNCT'), ('reverse', 'NOUN'), ('encryption', 'NOUN'), ('algorithm', 'NOUN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('Symmetric', 'amod'), ('key', 'amod'), ('Encryption', 'compound'), ('     ', 'compound'), ('Plaintext', 'nsubj'), ('input', 'ROOT'), ('Plaintext', 'compound'), ('output', 'compound'), ('Encryption', 'compound'), ('Algorithm', 'dobj'), ('(', 'punct'), ('e.g.--.-', 'amod'), ('AES', 'nmod'), (')', 'punct'), ('Decryption', 'compound'), ('Algorithm', 'appos'), ('(', 'punct'), ('reverse', 'appos'), ('encryption', 'pobj'), ('algorithm', 'appos'), (')', 'punct')]

>> Bigrams: 
[[Symmetric, key], [key, Encryption], [Encryption,      ], [     , Plaintext], [Plaintext, input], [input, Plaintext], [Plaintext, output], [output, Encryption], [Encryption, Algorithm], [Algorithm, (], [(, e.g.--.-], [e.g.--.-, AES], [AES, )], [), Decryption], [Decryption, Algorithm], [Algorithm, (], [(, reverse], [reverse, encryption], [encryption, algorithm], [algorithm, )]]

>> Trigrams: 
[[Symmetric, key, Encryption], [key, Encryption,      ], [Encryption,      , Plaintext], [     , Plaintext, input], [Plaintext, input, Plaintext], [input, Plaintext, output], [Plaintext, output, Encryption], [output, Encryption, Algorithm], [Encryption, Algorithm, (], [Algorithm, (, e.g.--.-], [(, e.g.--.-, AES], [e.g.--.-, AES, )], [AES, ), Decryption], [), Decryption, Algorithm], [Decryption, Algorithm, (], [Algorithm, (, reverse], [(, reverse, encryption], [reverse, encryption, algorithm], [encryption, algorithm, )]]

>> Noun Phrases are: 
[Symmetric key Encryption      Plaintext, Plaintext output Encryption Algorithm, e.g.--.- AES) Decryption Algorithm, (reverse, encryption, algorithm]

>> Named Entities are: 
[('Symmetric key Encryption      Plaintext', 'ORG')]


============================ Sentence 4 =============================

Secret key shared by sender and recipient X  Secret key shared by sender and recipient K Transmitted cipher text  Y = E(K, X) K X  Unit-4 Asymmertic Ciphers                                                       Darshan Institute of Engineering & Technology   ‹#›      Plaintext input Plaintext output Encryption Algorithm (e.g.--.- RSA) 


>> Tokens are: 
[Secret, key, shared, sender, recipient, X,  , Secret, key, shared, sender, recipient, K, Transmitted, cipher, text,  , Y, =, E(K, ,, X, ), K, X,  , Unit-4, Asymmertic, Ciphers,                                                       , Darshan, Institute, Engineering, &, Technology,   , ‹#›,      , Plaintext, input, Plaintext, output, Encryption, Algorithm, (, e.g.--.-, RSA, )] 

>> PoS Tags are: 
[('Secret', 'ADJ'), ('key', 'NOUN'), ('shared', 'VERB'), ('sender', 'NOUN'), ('recipient', 'ADJ'), ('X', 'NOUN'), (' ', 'SPACE'), ('Secret', 'ADJ'), ('key', 'NOUN'), ('shared', 'VERB'), ('sender', 'NOUN'), ('recipient', 'ADJ'), ('K', 'PROPN'), ('Transmitted', 'VERB'), ('cipher', 'ADJ'), ('text', 'NOUN'), (' ', 'SPACE'), ('Y', 'PROPN'), ('=', 'SYM'), ('E(K', 'PROPN'), (',', 'PUNCT'), ('X', 'NOUN'), (')', 'PUNCT'), ('K', 'PROPN'), ('X', 'PROPN'), (' ', 'SPACE'), ('Unit-4', 'PROPN'), ('Asymmertic', 'PROPN'), ('Ciphers', 'PROPN'), ('                                                      ', 'SPACE'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('Engineering', 'PROPN'), ('&', 'CCONJ'), ('Technology', 'PROPN'), ('  ', 'SPACE'), ('‹#›', 'VERB'), ('     ', 'SPACE'), ('Plaintext', 'PROPN'), ('input', 'NOUN'), ('Plaintext', 'PROPN'), ('output', 'NOUN'), ('Encryption', 'PROPN'), ('Algorithm', 'PROPN'), ('(', 'PUNCT'), ('e.g.--.-', 'PRON'), ('RSA', 'PROPN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('Secret', 'amod'), ('key', 'nsubj'), ('shared', 'acl'), ('sender', 'pobj'), ('recipient', 'conj'), ('X', 'nmod'), (' ', 'amod'), ('Secret', 'amod'), ('key', 'pobj'), ('shared', 'acl'), ('sender', 'nmod'), ('recipient', 'conj'), ('K', 'pobj'), ('Transmitted', 'ROOT'), ('cipher', 'nmod'), ('text', 'compound'), (' ', 'nmod'), ('Y', 'nmod'), ('=', 'punct'), ('E(K', 'dobj'), (',', 'punct'), ('X', 'appos'), (')', 'punct'), ('K', 'compound'), ('X', 'compound'), (' ', 'compound'), ('Unit-4', 'compound'), ('Asymmertic', 'compound'), ('Ciphers', 'appos'), ('                                                      ', 'compound'), ('Darshan', 'compound'), ('Institute', 'appos'), ('Engineering', 'pobj'), ('&', 'cc'), ('Technology', 'conj'), ('  ', 'conj'), ('‹#›', 'dep'), ('     ', 'compound'), ('Plaintext', 'nsubj'), ('input', 'compound'), ('Plaintext', 'compound'), ('output', 'compound'), ('Encryption', 'compound'), ('Algorithm', 'npadvmod'), ('(', 'punct'), ('e.g.--.-', 'amod'), ('RSA', 'parataxis'), (')', 'punct')]

>> Bigrams: 
[[Secret, key], [key, shared], [shared, sender], [sender, recipient], [recipient, X], [X,  ], [ , Secret], [Secret, key], [key, shared], [shared, sender], [sender, recipient], [recipient, K], [K, Transmitted], [Transmitted, cipher], [cipher, text], [text,  ], [ , Y], [Y, =], [=, E(K], [E(K, ,], [,, X], [X, )], [), K], [K, X], [X,  ], [ , Unit-4], [Unit-4, Asymmertic], [Asymmertic, Ciphers], [Ciphers,                                                       ], [                                                      , Darshan], [Darshan, Institute], [Institute, Engineering], [Engineering, &], [&, Technology], [Technology,   ], [  , ‹#›], [‹#›,      ], [     , Plaintext], [Plaintext, input], [input, Plaintext], [Plaintext, output], [output, Encryption], [Encryption, Algorithm], [Algorithm, (], [(, e.g.--.-], [e.g.--.-, RSA], [RSA, )]]

>> Trigrams: 
[[Secret, key, shared], [key, shared, sender], [shared, sender, recipient], [sender, recipient, X], [recipient, X,  ], [X,  , Secret], [ , Secret, key], [Secret, key, shared], [key, shared, sender], [shared, sender, recipient], [sender, recipient, K], [recipient, K, Transmitted], [K, Transmitted, cipher], [Transmitted, cipher, text], [cipher, text,  ], [text,  , Y], [ , Y, =], [Y, =, E(K], [=, E(K, ,], [E(K, ,, X], [,, X, )], [X, ), K], [), K, X], [K, X,  ], [X,  , Unit-4], [ , Unit-4, Asymmertic], [Unit-4, Asymmertic, Ciphers], [Asymmertic, Ciphers,                                                       ], [Ciphers,                                                       , Darshan], [                                                      , Darshan, Institute], [Darshan, Institute, Engineering], [Institute, Engineering, &], [Engineering, &, Technology], [&, Technology,   ], [Technology,   , ‹#›], [  , ‹#›,      ], [‹#›,      , Plaintext], [     , Plaintext, input], [Plaintext, input, Plaintext], [input, Plaintext, output], [Plaintext, output, Encryption], [output, Encryption, Algorithm], [Encryption, Algorithm, (], [Algorithm, (, e.g.--.-], [(, e.g.--.-, RSA], [e.g.--.-, RSA, )]]

>> Noun Phrases are: 
[Secret key, sender, X  Secret key, sender and recipient K, cipher text  Y = E(K, X, K X  Unit-4 Asymmertic Ciphers,                                                       Darshan Institute, Engineering, Technology,      Plaintext]

>> Named Entities are: 
[('K Transmitted', 'ORG'), ('Darshan Institute of Engineering & Technology', 'ORG')]


============================ Sentence 5 =============================

Decryption Algorithm X  Transmitted cipher text  Y = E(PUa, X) 


>> Tokens are: 
[Decryption, Algorithm, X,  , Transmitted, cipher, text,  , Y, =, E(PUa, ,, X, )] 

>> PoS Tags are: 
[('Decryption', 'PROPN'), ('Algorithm', 'PROPN'), ('X', 'NOUN'), (' ', 'SPACE'), ('Transmitted', 'VERB'), ('cipher', 'NOUN'), ('text', 'NOUN'), (' ', 'SPACE'), ('Y', 'PROPN'), ('=', 'SYM'), ('E(PUa', 'PROPN'), (',', 'PUNCT'), ('X', 'PROPN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('Decryption', 'compound'), ('Algorithm', 'nsubj'), ('X', 'appos'), (' ', 'appos'), ('Transmitted', 'ROOT'), ('cipher', 'amod'), ('text', 'dobj'), (' ', 'dobj'), ('Y', 'compound'), ('=', 'punct'), ('E(PUa', 'appos'), (',', 'punct'), ('X', 'appos'), (')', 'punct')]

>> Bigrams: 
[[Decryption, Algorithm], [Algorithm, X], [X,  ], [ , Transmitted], [Transmitted, cipher], [cipher, text], [text,  ], [ , Y], [Y, =], [=, E(PUa], [E(PUa, ,], [,, X], [X, )]]

>> Trigrams: 
[[Decryption, Algorithm, X], [Algorithm, X,  ], [X,  , Transmitted], [ , Transmitted, cipher], [Transmitted, cipher, text], [cipher, text,  ], [text,  , Y], [ , Y, =], [Y, =, E(PUa], [=, E(PUa, ,], [E(PUa, ,, X], [,, X, )]]

>> Noun Phrases are: 
[Decryption Algorithm, X, cipher text, Y = E(PUa, X]

>> Named Entities are: 
[]


============================ Sentence 6 =============================

X Bob’s Public key ring Alice    


>> Tokens are: 
[X, Bob, Public, key, ring, Alice,   ] 

>> PoS Tags are: 
[('X', 'PROPN'), ('Bob', 'PROPN'), ('Public', 'ADJ'), ('key', 'ADJ'), ('ring', 'NOUN'), ('Alice', 'PROPN'), ('  ', 'SPACE')] 

>> Dependency Tags are: 
[('X', 'compound'), ('Bob', 'poss'), ('Public', 'amod'), ('key', 'amod'), ('ring', 'compound'), ('Alice', 'ROOT'), ('  ', 'punct')]

>> Bigrams: 
[[X, Bob], [Bob, Public], [Public, key], [key, ring], [ring, Alice], [Alice,   ]]

>> Trigrams: 
[[X, Bob, Public], [Bob, Public, key], [Public, key, ring], [key, ring, Alice], [ring, Alice,   ]]

>> Noun Phrases are: 
[X Bob’s Public key ring Alice]

>> Named Entities are: 
[]


============================ Sentence 7 =============================

Ted   


>> Tokens are: 
[Ted,  ] 

>> PoS Tags are: 
[('Ted', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Ted', 'ROOT'), (' ', 'nummod')]

>> Bigrams: 
[[Ted,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Ted]

>> Named Entities are: 
[]


============================ Sentence 8 =============================

Mike   


>> Tokens are: 
[Mike,  ] 

>> PoS Tags are: 
[('Mike', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Mike', 'compound'), (' ', 'ROOT')]

>> Bigrams: 
[[Mike,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('Mike', 'PERSON')]


============================ Sentence 9 =============================

Joy Alice’s public key PUa Alice’s private key PRa Asymmetric key Encryption with Public Key Bob Alice 


>> Tokens are: 
[Joy, Alice, public, key, PUa, Alice, private, key, PRa, Asymmetric, key, Encryption, Public, Key, Bob, Alice] 

>> PoS Tags are: 
[('Joy', 'PROPN'), ('Alice', 'PROPN'), ('public', 'ADJ'), ('key', 'ADJ'), ('PUa', 'NOUN'), ('Alice', 'PROPN'), ('private', 'ADJ'), ('key', 'ADJ'), ('PRa', 'PROPN'), ('Asymmetric', 'PROPN'), ('key', 'ADJ'), ('Encryption', 'PROPN'), ('Public', 'PROPN'), ('Key', 'PROPN'), ('Bob', 'PROPN'), ('Alice', 'PROPN')] 

>> Dependency Tags are: 
[('Joy', 'compound'), ('Alice', 'poss'), ('public', 'amod'), ('key', 'amod'), ('PUa', 'nmod'), ('Alice', 'poss'), ('private', 'amod'), ('key', 'amod'), ('PRa', 'nmod'), ('Asymmetric', 'nmod'), ('key', 'amod'), ('Encryption', 'ROOT'), ('Public', 'compound'), ('Key', 'compound'), ('Bob', 'compound'), ('Alice', 'pobj')]

>> Bigrams: 
[[Joy, Alice], [Alice, public], [public, key], [key, PUa], [PUa, Alice], [Alice, private], [private, key], [key, PRa], [PRa, Asymmetric], [Asymmetric, key], [key, Encryption], [Encryption, Public], [Public, Key], [Key, Bob], [Bob, Alice]]

>> Trigrams: 
[[Joy, Alice, public], [Alice, public, key], [public, key, PUa], [key, PUa, Alice], [PUa, Alice, private], [Alice, private, key], [private, key, PRa], [key, PRa, Asymmetric], [PRa, Asymmetric, key], [Asymmetric, key, Encryption], [key, Encryption, Public], [Encryption, Public, Key], [Public, Key, Bob], [Key, Bob, Alice]]

>> Noun Phrases are: 
[Joy Alice’s public key PUa Alice’s private key PRa Asymmetric key Encryption, Public Key Bob Alice]

>> Named Entities are: 
[('Joy Alice’s', 'PERSON'), ('Bob Alice', 'PERSON')]


============================ Sentence 10 =============================

The entire encrypted message serves as a confidentiality. 


>> Tokens are: 
[entire, encrypted, message, serves, confidentiality, .] 

>> PoS Tags are: 
[('entire', 'ADJ'), ('encrypted', 'ADJ'), ('message', 'NOUN'), ('serves', 'VERB'), ('confidentiality', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('entire', 'amod'), ('encrypted', 'amod'), ('message', 'nsubj'), ('serves', 'ROOT'), ('confidentiality', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[entire, encrypted], [encrypted, message], [message, serves], [serves, confidentiality], [confidentiality, .]]

>> Trigrams: 
[[entire, encrypted, message], [encrypted, message, serves], [message, serves, confidentiality], [serves, confidentiality, .]]

>> Noun Phrases are: 
[The entire encrypted message, a confidentiality]

>> Named Entities are: 
[]


============================ Sentence 11 =============================

      4      Plaintext input Plaintext output Encryption Algorithm (e.g.--.- RSA) Decryption Algorithm X   


>> Tokens are: 
[      , 4,      , Plaintext, input, Plaintext, output, Encryption, Algorithm, (, e.g.--.-, RSA, ), Decryption, Algorithm, X,  ] 

>> PoS Tags are: 
[('      ', 'SPACE'), ('4', 'NUM'), ('     ', 'SPACE'), ('Plaintext', 'PROPN'), ('input', 'NOUN'), ('Plaintext', 'PROPN'), ('output', 'NOUN'), ('Encryption', 'PROPN'), ('Algorithm', 'PROPN'), ('(', 'PUNCT'), ('e.g.--.-', 'PRON'), ('RSA', 'PROPN'), (')', 'PUNCT'), ('Decryption', 'PROPN'), ('Algorithm', 'PROPN'), ('X', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('      ', 'nmod'), ('4', 'nummod'), ('     ', 'compound'), ('Plaintext', 'compound'), ('input', 'nmod'), ('Plaintext', 'compound'), ('output', 'compound'), ('Encryption', 'compound'), ('Algorithm', 'dobj'), ('(', 'punct'), ('e.g.--.-', 'amod'), ('RSA', 'parataxis'), (')', 'punct'), ('Decryption', 'compound'), ('Algorithm', 'appos'), ('X', 'appos'), (' ', 'ROOT')]

>> Bigrams: 
[[      , 4], [4,      ], [     , Plaintext], [Plaintext, input], [input, Plaintext], [Plaintext, output], [output, Encryption], [Encryption, Algorithm], [Algorithm, (], [(, e.g.--.-], [e.g.--.-, RSA], [RSA, )], [), Decryption], [Decryption, Algorithm], [Algorithm, X], [X,  ]]

>> Trigrams: 
[[      , 4,      ], [4,      , Plaintext], [     , Plaintext, input], [Plaintext, input, Plaintext], [input, Plaintext, output], [Plaintext, output, Encryption], [output, Encryption, Algorithm], [Encryption, Algorithm, (], [Algorithm, (, e.g.--.-], [(, e.g.--.-, RSA], [e.g.--.-, RSA, )], [RSA, ), Decryption], [), Decryption, Algorithm], [Decryption, Algorithm, X], [Algorithm, X,  ]]

>> Noun Phrases are: 
[Plaintext output Encryption Algorithm, Decryption Algorithm, X]

>> Named Entities are: 
[('4', 'CARDINAL')]


============================ Sentence 12 =============================

Transmitted cipher text  Y = E(PRb, X) X Alice’s Public key ring Bob    


>> Tokens are: 
[Transmitted, cipher, text,  , Y, =, E(PRb, ,, X, ), X, Alice, Public, key, ring, Bob,   ] 

>> PoS Tags are: 
[('Transmitted', 'VERB'), ('cipher', 'NOUN'), ('text', 'NOUN'), (' ', 'SPACE'), ('Y', 'PROPN'), ('=', 'SYM'), ('E(PRb', 'PROPN'), (',', 'PUNCT'), ('X', 'PROPN'), (')', 'PUNCT'), ('X', 'PROPN'), ('Alice', 'PROPN'), ('Public', 'ADJ'), ('key', 'ADJ'), ('ring', 'NOUN'), ('Bob', 'PROPN'), ('  ', 'SPACE')] 

>> Dependency Tags are: 
[('Transmitted', 'amod'), ('cipher', 'amod'), ('text', 'dobj'), (' ', 'dep'), ('Y', 'compound'), ('=', 'punct'), ('E(PRb', 'nmod'), (',', 'punct'), ('X', 'appos'), (')', 'punct'), ('X', 'compound'), ('Alice', 'appos'), ('Public', 'amod'), ('key', 'amod'), ('ring', 'ROOT'), ('Bob', 'appos'), ('  ', 'appos')]

>> Bigrams: 
[[Transmitted, cipher], [cipher, text], [text,  ], [ , Y], [Y, =], [=, E(PRb], [E(PRb, ,], [,, X], [X, )], [), X], [X, Alice], [Alice, Public], [Public, key], [key, ring], [ring, Bob], [Bob,   ]]

>> Trigrams: 
[[Transmitted, cipher, text], [cipher, text,  ], [text,  , Y], [ , Y, =], [Y, =, E(PRb], [=, E(PRb, ,], [E(PRb, ,, X], [,, X, )], [X, ), X], [), X, Alice], [X, Alice, Public], [Alice, Public, key], [Public, key, ring], [key, ring, Bob], [ring, Bob,   ]]

>> Noun Phrases are: 
[cipher text, X, X Alice, Bob]

>> Named Entities are: 
[('Bob', 'PERSON')]


============================ Sentence 13 =============================

Ted   


>> Tokens are: 
[Ted,  ] 

>> PoS Tags are: 
[('Ted', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Ted', 'ROOT'), (' ', 'nummod')]

>> Bigrams: 
[[Ted,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Ted]

>> Named Entities are: 
[('Ted', 'PERSON')]


============================ Sentence 14 =============================

Mike   


>> Tokens are: 
[Mike,  ] 

>> PoS Tags are: 
[('Mike', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Mike', 'compound'), (' ', 'ROOT')]

>> Bigrams: 
[[Mike,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('Mike', 'PERSON')]


============================ Sentence 15 =============================

Joy Bob’s public key PUb Bob’s private key PRb Asymmetric key Encryption with Private Key Bob Alice   


>> Tokens are: 
[Joy, Bob, public, key, PUb, Bob, private, key, PRb, Asymmetric, key, Encryption, Private, Key, Bob, Alice,  ] 

>> PoS Tags are: 
[('Joy', 'PROPN'), ('Bob', 'PROPN'), ('public', 'ADJ'), ('key', 'ADJ'), ('PUb', 'PROPN'), ('Bob', 'PROPN'), ('private', 'ADJ'), ('key', 'ADJ'), ('PRb', 'PROPN'), ('Asymmetric', 'PROPN'), ('key', 'ADJ'), ('Encryption', 'PROPN'), ('Private', 'PROPN'), ('Key', 'PROPN'), ('Bob', 'PROPN'), ('Alice', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Joy', 'compound'), ('Bob', 'poss'), ('public', 'amod'), ('key', 'amod'), ('PUb', 'nmod'), ('Bob', 'appos'), ('private', 'amod'), ('key', 'amod'), ('PRb', 'nmod'), ('Asymmetric', 'nmod'), ('key', 'amod'), ('Encryption', 'ROOT'), ('Private', 'amod'), ('Key', 'compound'), ('Bob', 'compound'), ('Alice', 'pobj'), (' ', 'punct')]

>> Bigrams: 
[[Joy, Bob], [Bob, public], [public, key], [key, PUb], [PUb, Bob], [Bob, private], [private, key], [key, PRb], [PRb, Asymmetric], [Asymmetric, key], [key, Encryption], [Encryption, Private], [Private, Key], [Key, Bob], [Bob, Alice], [Alice,  ]]

>> Trigrams: 
[[Joy, Bob, public], [Bob, public, key], [public, key, PUb], [key, PUb, Bob], [PUb, Bob, private], [Bob, private, key], [private, key, PRb], [key, PRb, Asymmetric], [PRb, Asymmetric, key], [Asymmetric, key, Encryption], [key, Encryption, Private], [Encryption, Private, Key], [Private, Key, Bob], [Key, Bob, Alice], [Bob, Alice,  ]]

>> Noun Phrases are: 
[Bob, Private Key Bob Alice]

>> Named Entities are: 
[('Joy Bob’s', 'PERSON'), ('Bob', 'PERSON'), ('Bob Alice', 'PERSON')]


============================ Sentence 16 =============================

The entire encrypted message serves as a digital signature. 


>> Tokens are: 
[entire, encrypted, message, serves, digital, signature, .] 

>> PoS Tags are: 
[('entire', 'ADJ'), ('encrypted', 'ADJ'), ('message', 'NOUN'), ('serves', 'VERB'), ('digital', 'ADJ'), ('signature', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('entire', 'amod'), ('encrypted', 'amod'), ('message', 'nsubj'), ('serves', 'ROOT'), ('digital', 'amod'), ('signature', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[entire, encrypted], [encrypted, message], [message, serves], [serves, digital], [digital, signature], [signature, .]]

>> Trigrams: 
[[entire, encrypted, message], [encrypted, message, serves], [message, serves, digital], [serves, digital, signature], [digital, signature, .]]

>> Noun Phrases are: 
[The entire encrypted message, a digital signature]

>> Named Entities are: 
[]


============================ Sentence 17 =============================

    Authentication and Confidentiality Message source Encryption Algorithm Encryption Algorithm Decryption Algorithm Decryption Algorithm Message Dest. 


>> Tokens are: 
[    , Authentication, Confidentiality, Message, source, Encryption, Algorithm, Encryption, Algorithm, Decryption, Algorithm, Decryption, Algorithm, Message, Dest, .] 

>> PoS Tags are: 
[('    ', 'SPACE'), ('Authentication', 'PROPN'), ('Confidentiality', 'PROPN'), ('Message', 'PROPN'), ('source', 'NOUN'), ('Encryption', 'PROPN'), ('Algorithm', 'PROPN'), ('Encryption', 'PROPN'), ('Algorithm', 'PROPN'), ('Decryption', 'PROPN'), ('Algorithm', 'PROPN'), ('Decryption', 'PROPN'), ('Algorithm', 'PROPN'), ('Message', 'PROPN'), ('Dest', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('    ', 'nmod'), ('Authentication', 'nmod'), ('Confidentiality', 'conj'), ('Message', 'compound'), ('source', 'compound'), ('Encryption', 'compound'), ('Algorithm', 'compound'), ('Encryption', 'compound'), ('Algorithm', 'compound'), ('Decryption', 'compound'), ('Algorithm', 'compound'), ('Decryption', 'compound'), ('Algorithm', 'compound'), ('Message', 'compound'), ('Dest', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[    , Authentication], [Authentication, Confidentiality], [Confidentiality, Message], [Message, source], [source, Encryption], [Encryption, Algorithm], [Algorithm, Encryption], [Encryption, Algorithm], [Algorithm, Decryption], [Decryption, Algorithm], [Algorithm, Decryption], [Decryption, Algorithm], [Algorithm, Message], [Message, Dest], [Dest, .]]

>> Trigrams: 
[[    , Authentication, Confidentiality], [Authentication, Confidentiality, Message], [Confidentiality, Message, source], [Message, source, Encryption], [source, Encryption, Algorithm], [Encryption, Algorithm, Encryption], [Algorithm, Encryption, Algorithm], [Encryption, Algorithm, Decryption], [Algorithm, Decryption, Algorithm], [Decryption, Algorithm, Decryption], [Algorithm, Decryption, Algorithm], [Decryption, Algorithm, Message], [Algorithm, Message, Dest], [Message, Dest, .]]

>> Noun Phrases are: 
[    Authentication and Confidentiality Message source Encryption Algorithm Encryption Algorithm Decryption Algorithm Decryption Algorithm Message Dest]

>> Named Entities are: 
[('Encryption Algorithm Encryption Algorithm Decryption Algorithm Decryption Algorithm Message Dest', 'ORG')]


============================ Sentence 18 =============================

X Y Y X Z Key pair source Key pair source   PRa PUa PRb PUb   


>> Tokens are: 
[X, Y, Y, X, Z, Key, pair, source, Key, pair, source,   , PRa, PUa, PRb, PUb,  ] 

>> PoS Tags are: 
[('X', 'NOUN'), ('Y', 'PROPN'), ('Y', 'PROPN'), ('X', 'PROPN'), ('Z', 'NOUN'), ('Key', 'ADJ'), ('pair', 'NOUN'), ('source', 'NOUN'), ('Key', 'ADJ'), ('pair', 'NOUN'), ('source', 'NOUN'), ('  ', 'SPACE'), ('PRa', 'PROPN'), ('PUa', 'PROPN'), ('PRb', 'PROPN'), ('PUb', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('X', 'compound'), ('Y', 'compound'), ('Y', 'compound'), ('X', 'nmod'), ('Z', 'compound'), ('Key', 'compound'), ('pair', 'compound'), ('source', 'ROOT'), ('Key', 'amod'), ('pair', 'compound'), ('source', 'appos'), ('  ', 'poss'), ('PRa', 'compound'), ('PUa', 'compound'), ('PRb', 'compound'), ('PUb', 'appos'), (' ', 'advmod')]

>> Bigrams: 
[[X, Y], [Y, Y], [Y, X], [X, Z], [Z, Key], [Key, pair], [pair, source], [source, Key], [Key, pair], [pair, source], [source,   ], [  , PRa], [PRa, PUa], [PUa, PRb], [PRb, PUb], [PUb,  ]]

>> Trigrams: 
[[X, Y, Y], [Y, Y, X], [Y, X, Z], [X, Z, Key], [Z, Key, pair], [Key, pair, source], [pair, source, Key], [source, Key, pair], [Key, pair, source], [pair, source,   ], [source,   , PRa], [  , PRa, PUa], [PRa, PUa, PRb], [PUa, PRb, PUb], [PRb, PUb,  ]]

>> Noun Phrases are: 
[X Y Y X Z Key pair source, Key pair source,   PRa PUa PRb PUb]

>> Named Entities are: 
[]


============================ Sentence 19 =============================

Source A  Source B Z = E(PUb, E(PRa, X)) X = D(PUa, D(PRB, Z))   


>> Tokens are: 
[Source,  , Source, B, Z, =, E(PUb, ,, E(PRa, ,, X, ), ), X, =, D(PUa, ,, D(PRB, ,, Z, ), ),  ] 

>> PoS Tags are: 
[('Source', 'PROPN'), (' ', 'SPACE'), ('Source', 'PROPN'), ('B', 'PROPN'), ('Z', 'PROPN'), ('=', 'PROPN'), ('E(PUb', 'PROPN'), (',', 'PUNCT'), ('E(PRa', 'PROPN'), (',', 'PUNCT'), ('X', 'PROPN'), (')', 'PUNCT'), (')', 'PUNCT'), ('X', 'NOUN'), ('=', 'X'), ('D(PUa', 'PROPN'), (',', 'PUNCT'), ('D(PRB', 'PROPN'), (',', 'PUNCT'), ('Z', 'NOUN'), (')', 'PUNCT'), (')', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Source', 'nmod'), (' ', 'compound'), ('Source', 'compound'), ('B', 'compound'), ('Z', 'ROOT'), ('=', 'punct'), ('E(PUb', 'appos'), (',', 'punct'), ('E(PRa', 'appos'), (',', 'punct'), ('X', 'appos'), (')', 'punct'), (')', 'punct'), ('X', 'nmod'), ('=', 'compound'), ('D(PUa', 'appos'), (',', 'punct'), ('D(PRB', 'appos'), (',', 'punct'), ('Z', 'appos'), (')', 'punct'), (')', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[Source,  ], [ , Source], [Source, B], [B, Z], [Z, =], [=, E(PUb], [E(PUb, ,], [,, E(PRa], [E(PRa, ,], [,, X], [X, )], [), )], [), X], [X, =], [=, D(PUa], [D(PUa, ,], [,, D(PRB], [D(PRB, ,], [,, Z], [Z, )], [), )], [),  ]]

>> Trigrams: 
[[Source,  , Source], [ , Source, B], [Source, B, Z], [B, Z, =], [Z, =, E(PUb], [=, E(PUb, ,], [E(PUb, ,, E(PRa], [,, E(PRa, ,], [E(PRa, ,, X], [,, X, )], [X, ), )], [), ), X], [), X, =], [X, =, D(PUa], [=, D(PUa, ,], [D(PUa, ,, D(PRB], [,, D(PRB, ,], [D(PRB, ,, Z], [,, Z, )], [Z, ), )], [), ),  ]]

>> Noun Phrases are: 
[Source A  Source B Z, = E(PUb, E(PRa, X, ) X = D(PUa, D(PRB, Z]

>> Named Entities are: 
[('E(PUb', 'GPE'), ('E(PRa', 'GPE'), ('D(PRB', 'ORG')]


============================ Sentence 20 =============================

Unit-4 Asymmertic Ciphers                                                       Darshan Institute of Engineering & Technology   ‹#›   6  Applications for Public-Key Cryptosystems Encryption/decryption: The sender encrypts a message with the recipient’s public key. 


>> Tokens are: 
[Unit-4, Asymmertic, Ciphers,                                                       , Darshan, Institute, Engineering, &, Technology,   , ‹#›,   , 6,  , Applications, Public, -, Key, Cryptosystems, Encryption, /, decryption, :, sender, encrypts, message, recipient, public, key, .] 

>> PoS Tags are: 
[('Unit-4', 'PROPN'), ('Asymmertic', 'PROPN'), ('Ciphers', 'PROPN'), ('                                                      ', 'SPACE'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('Engineering', 'PROPN'), ('&', 'CCONJ'), ('Technology', 'PROPN'), ('  ', 'SPACE'), ('‹#›', 'VERB'), ('  ', 'SPACE'), ('6', 'NUM'), (' ', 'SPACE'), ('Applications', 'PROPN'), ('Public', 'PROPN'), ('-', 'PUNCT'), ('Key', 'PROPN'), ('Cryptosystems', 'PROPN'), ('Encryption', 'PROPN'), ('/', 'SYM'), ('decryption', 'NOUN'), (':', 'PUNCT'), ('sender', 'NOUN'), ('encrypts', 'VERB'), ('message', 'NOUN'), ('recipient', 'NOUN'), ('public', 'ADJ'), ('key', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Unit-4', 'compound'), ('Asymmertic', 'compound'), ('Ciphers', 'nsubj'), ('                                                      ', 'compound'), ('Darshan', 'compound'), ('Institute', 'appos'), ('Engineering', 'pobj'), ('&', 'cc'), ('Technology', 'conj'), ('  ', 'appos'), ('‹#›', 'ccomp'), ('  ', 'dobj'), ('6', 'nummod'), (' ', 'compound'), ('Applications', 'dobj'), ('Public', 'amod'), ('-', 'punct'), ('Key', 'compound'), ('Cryptosystems', 'nmod'), ('Encryption', 'nmod'), ('/', 'punct'), ('decryption', 'pobj'), (':', 'punct'), ('sender', 'nsubj'), ('encrypts', 'ROOT'), ('message', 'dobj'), ('recipient', 'poss'), ('public', 'amod'), ('key', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Unit-4, Asymmertic], [Asymmertic, Ciphers], [Ciphers,                                                       ], [                                                      , Darshan], [Darshan, Institute], [Institute, Engineering], [Engineering, &], [&, Technology], [Technology,   ], [  , ‹#›], [‹#›,   ], [  , 6], [6,  ], [ , Applications], [Applications, Public], [Public, -], [-, Key], [Key, Cryptosystems], [Cryptosystems, Encryption], [Encryption, /], [/, decryption], [decryption, :], [:, sender], [sender, encrypts], [encrypts, message], [message, recipient], [recipient, public], [public, key], [key, .]]

>> Trigrams: 
[[Unit-4, Asymmertic, Ciphers], [Asymmertic, Ciphers,                                                       ], [Ciphers,                                                       , Darshan], [                                                      , Darshan, Institute], [Darshan, Institute, Engineering], [Institute, Engineering, &], [Engineering, &, Technology], [&, Technology,   ], [Technology,   , ‹#›], [  , ‹#›,   ], [‹#›,   , 6], [  , 6,  ], [6,  , Applications], [ , Applications, Public], [Applications, Public, -], [Public, -, Key], [-, Key, Cryptosystems], [Key, Cryptosystems, Encryption], [Cryptosystems, Encryption, /], [Encryption, /, decryption], [/, decryption, :], [decryption, :, sender], [:, sender, encrypts], [sender, encrypts, message], [encrypts, message, recipient], [message, recipient, public], [recipient, public, key], [public, key, .]]

>> Noun Phrases are: 
[Unit-4 Asymmertic Ciphers,                                                       Darshan Institute, Engineering, Technology, 6  Applications, Public-Key Cryptosystems Encryption/decryption, The sender, a message, the recipient’s public key]

>> Named Entities are: 
[('Darshan Institute of Engineering & Technology', 'ORG'), ('6', 'CARDINAL'), ('Applications for Public-Key Cryptosystems Encryption', 'WORK_OF_ART')]


============================ Sentence 21 =============================

Digital signature: The sender “signs” a message with its private key. 


>> Tokens are: 
[Digital, signature, :, sender, “, signs, ”, message, private, key, .] 

>> PoS Tags are: 
[('Digital', 'PROPN'), ('signature', 'NOUN'), (':', 'PUNCT'), ('sender', 'NOUN'), ('“', 'PUNCT'), ('signs', 'NOUN'), ('”', 'PUNCT'), ('message', 'NOUN'), ('private', 'ADJ'), ('key', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Digital', 'compound'), ('signature', 'ROOT'), (':', 'punct'), ('sender', 'nmod'), ('“', 'punct'), ('signs', 'appos'), ('”', 'punct'), ('message', 'appos'), ('private', 'amod'), ('key', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Digital, signature], [signature, :], [:, sender], [sender, “], [“, signs], [signs, ”], [”, message], [message, private], [private, key], [key, .]]

>> Trigrams: 
[[Digital, signature, :], [signature, :, sender], [:, sender, “], [sender, “, signs], [“, signs, ”], [signs, ”, message], [”, message, private], [message, private, key], [private, key, .]]

>> Noun Phrases are: 
[Digital signature, : The sender “signs, a message, its private key]

>> Named Entities are: 
[('Digital', 'ORG')]


============================ Sentence 22 =============================

Signing is achieved by a cryptographic algorithm applied to the message or to a small block of data that is a function of the message. 


>> Tokens are: 
[Signing, achieved, cryptographic, algorithm, applied, message, small, block, data, function, message, .] 

>> PoS Tags are: 
[('Signing', 'NOUN'), ('achieved', 'VERB'), ('cryptographic', 'ADJ'), ('algorithm', 'NOUN'), ('applied', 'VERB'), ('message', 'NOUN'), ('small', 'ADJ'), ('block', 'NOUN'), ('data', 'NOUN'), ('function', 'NOUN'), ('message', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Signing', 'nsubjpass'), ('achieved', 'ROOT'), ('cryptographic', 'amod'), ('algorithm', 'pobj'), ('applied', 'acl'), ('message', 'pobj'), ('small', 'amod'), ('block', 'pobj'), ('data', 'pobj'), ('function', 'attr'), ('message', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Signing, achieved], [achieved, cryptographic], [cryptographic, algorithm], [algorithm, applied], [applied, message], [message, small], [small, block], [block, data], [data, function], [function, message], [message, .]]

>> Trigrams: 
[[Signing, achieved, cryptographic], [achieved, cryptographic, algorithm], [cryptographic, algorithm, applied], [algorithm, applied, message], [applied, message, small], [message, small, block], [small, block, data], [block, data, function], [data, function, message], [function, message, .]]

>> Noun Phrases are: 
[Signing, a cryptographic algorithm, the message, a small block, data, a function, the message]

>> Named Entities are: 
[]


============================ Sentence 23 =============================

Key exchange: Two sides cooperate to exchange a session key. 


>> Tokens are: 
[Key, exchange, :, sides, cooperate, exchange, session, key, .] 

>> PoS Tags are: 
[('Key', 'ADJ'), ('exchange', 'NOUN'), (':', 'PUNCT'), ('sides', 'NOUN'), ('cooperate', 'VERB'), ('exchange', 'VERB'), ('session', 'NOUN'), ('key', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Key', 'amod'), ('exchange', 'dep'), (':', 'punct'), ('sides', 'nsubj'), ('cooperate', 'ROOT'), ('exchange', 'xcomp'), ('session', 'compound'), ('key', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Key, exchange], [exchange, :], [:, sides], [sides, cooperate], [cooperate, exchange], [exchange, session], [session, key], [key, .]]

>> Trigrams: 
[[Key, exchange, :], [exchange, :, sides], [:, sides, cooperate], [sides, cooperate, exchange], [cooperate, exchange, session], [exchange, session, key], [session, key, .]]

>> Noun Phrases are: 
[Two sides, a session key]

>> Named Entities are: 
[('Two', 'CARDINAL')]


============================ Sentence 24 =============================

Several different approaches are possible, involving the private key(s) of one or both parties. 


>> Tokens are: 
[different, approaches, possible, ,, involving, private, key(s, ), parties, .] 

>> PoS Tags are: 
[('different', 'ADJ'), ('approaches', 'NOUN'), ('possible', 'ADJ'), (',', 'PUNCT'), ('involving', 'VERB'), ('private', 'ADJ'), ('key(s', 'PROPN'), (')', 'PUNCT'), ('parties', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('different', 'amod'), ('approaches', 'nsubj'), ('possible', 'acomp'), (',', 'punct'), ('involving', 'advcl'), ('private', 'amod'), ('key(s', 'dobj'), (')', 'punct'), ('parties', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[different, approaches], [approaches, possible], [possible, ,], [,, involving], [involving, private], [private, key(s], [key(s, )], [), parties], [parties, .]]

>> Trigrams: 
[[different, approaches, possible], [approaches, possible, ,], [possible, ,, involving], [,, involving, private], [involving, private, key(s], [private, key(s, )], [key(s, ), parties], [), parties, .]]

>> Noun Phrases are: 
[Several different approaches, the private key(s, one or both parties]

>> Named Entities are: 
[('one', 'CARDINAL')]


============================ Sentence 25 =============================

 Unit-4 Asymmertic Ciphers                                                       Darshan Institute of Engineering & Technology   ‹#›   


>> Tokens are: 
[ , Unit-4, Asymmertic, Ciphers,                                                       , Darshan, Institute, Engineering, &, Technology,   , ‹#›,  ] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('Unit-4', 'PROPN'), ('Asymmertic', 'PROPN'), ('Ciphers', 'PROPN'), ('                                                      ', 'SPACE'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('Engineering', 'PROPN'), ('&', 'CCONJ'), ('Technology', 'PROPN'), ('  ', 'SPACE'), ('‹#›', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'nsubj'), ('Unit-4', 'compound'), ('Asymmertic', 'compound'), ('Ciphers', 'appos'), ('                                                      ', 'compound'), ('Darshan', 'compound'), ('Institute', 'appos'), ('Engineering', 'pobj'), ('&', 'cc'), ('Technology', 'conj'), ('  ', 'conj'), ('‹#›', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[ , Unit-4], [Unit-4, Asymmertic], [Asymmertic, Ciphers], [Ciphers,                                                       ], [                                                      , Darshan], [Darshan, Institute], [Institute, Engineering], [Engineering, &], [&, Technology], [Technology,   ], [  , ‹#›], [‹#›,  ]]

>> Trigrams: 
[[ , Unit-4, Asymmertic], [Unit-4, Asymmertic, Ciphers], [Asymmertic, Ciphers,                                                       ], [Ciphers,                                                       , Darshan], [                                                      , Darshan, Institute], [Darshan, Institute, Engineering], [Institute, Engineering, &], [Engineering, &, Technology], [&, Technology,   ], [Technology,   , ‹#›], [  , ‹#›,  ]]

>> Noun Phrases are: 
[Unit-4 Asymmertic Ciphers,                                                       Darshan Institute, Engineering, Technology]

>> Named Entities are: 
[('Darshan Institute of Engineering & Technology', 'ORG')]


============================ Sentence 26 =============================

RSA Algorithm RSA is a block cipher in which the Plaintext and Ciphertext are represented as integers between 0 and n-1 for some n. Large messages can be broken up into a number of blocks.   


>> Tokens are: 
[RSA, Algorithm, RSA, block, cipher, Plaintext, Ciphertext, represented, integers, 0, n-1, n., Large, messages, broken, number, blocks, .,  ] 

>> PoS Tags are: 
[('RSA', 'PROPN'), ('Algorithm', 'PROPN'), ('RSA', 'PROPN'), ('block', 'NOUN'), ('cipher', 'NOUN'), ('Plaintext', 'PROPN'), ('Ciphertext', 'PROPN'), ('represented', 'VERB'), ('integers', 'NOUN'), ('0', 'NUM'), ('n-1', 'INTJ'), ('n.', 'ADJ'), ('Large', 'ADJ'), ('messages', 'NOUN'), ('broken', 'VERB'), ('number', 'NOUN'), ('blocks', 'NOUN'), ('.', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('RSA', 'compound'), ('Algorithm', 'compound'), ('RSA', 'nsubj'), ('block', 'compound'), ('cipher', 'attr'), ('Plaintext', 'nsubjpass'), ('Ciphertext', 'conj'), ('represented', 'relcl'), ('integers', 'pobj'), ('0', 'pobj'), ('n-1', 'conj'), ('n.', 'amod'), ('Large', 'amod'), ('messages', 'nsubjpass'), ('broken', 'relcl'), ('number', 'pobj'), ('blocks', 'pobj'), ('.', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[RSA, Algorithm], [Algorithm, RSA], [RSA, block], [block, cipher], [cipher, Plaintext], [Plaintext, Ciphertext], [Ciphertext, represented], [represented, integers], [integers, 0], [0, n-1], [n-1, n.], [n., Large], [Large, messages], [messages, broken], [broken, number], [number, blocks], [blocks, .], [.,  ]]

>> Trigrams: 
[[RSA, Algorithm, RSA], [Algorithm, RSA, block], [RSA, block, cipher], [block, cipher, Plaintext], [cipher, Plaintext, Ciphertext], [Plaintext, Ciphertext, represented], [Ciphertext, represented, integers], [represented, integers, 0], [integers, 0, n-1], [0, n-1, n.], [n-1, n., Large], [n., Large, messages], [Large, messages, broken], [messages, broken, number], [broken, number, blocks], [number, blocks, .], [blocks, .,  ]]

>> Noun Phrases are: 
[RSA Algorithm RSA, a block cipher, the Plaintext, Ciphertext, integers, some n. Large messages, a number, blocks]

>> Named Entities are: 
[('RSA Algorithm RSA', 'ORG')]


============================ Sentence 27 =============================

Each block would then be represented by an integer. 


>> Tokens are: 
[block, represented, integer, .] 

>> PoS Tags are: 
[('block', 'NOUN'), ('represented', 'VERB'), ('integer', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('block', 'nsubjpass'), ('represented', 'ROOT'), ('integer', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[block, represented], [represented, integer], [integer, .]]

>> Trigrams: 
[[block, represented, integer], [represented, integer, .]]

>> Noun Phrases are: 
[Each block, an integer]

>> Named Entities are: 
[]


============================ Sentence 28 =============================

 Step-1: Generate Public key and Private key Step-2: Encrypt message using Public key Step-3: Decrypt message using Private key     Unit-4 Asymmertic Ciphers                                                       Darshan Institute of Engineering & Technology   ‹#›  Step-1: Generate Public key and Private key Select two large prime numbers:  p and q Calculate modulus : n = p * q Calculate Euler’s totient function : φ(n) = 


>> Tokens are: 
[ , Step-1, :, Generate, Public, key, Private, key, Step-2, :, Encrypt, message, Public, key, Step-3, :, Decrypt, message, Private, key,     , Unit-4, Asymmertic, Ciphers,                                                       , Darshan, Institute, Engineering, &, Technology,   , ‹#›,  , Step-1, :, Generate, Public, key, Private, key, Select, large, prime, numbers, :,  , p, q, Calculate, modulus, :, n, =, p, *, q, Calculate, Euler, totient, function, :, φ(n, ), =] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('Step-1', 'NOUN'), (':', 'PUNCT'), ('Generate', 'PROPN'), ('Public', 'PROPN'), ('key', 'NOUN'), ('Private', 'ADJ'), ('key', 'ADJ'), ('Step-2', 'NOUN'), (':', 'PUNCT'), ('Encrypt', 'NOUN'), ('message', 'NOUN'), ('Public', 'PROPN'), ('key', 'ADJ'), ('Step-3', 'NOUN'), (':', 'PUNCT'), ('Decrypt', 'PROPN'), ('message', 'NOUN'), ('Private', 'ADJ'), ('key', 'ADJ'), ('    ', 'SPACE'), ('Unit-4', 'NOUN'), ('Asymmertic', 'PROPN'), ('Ciphers', 'PROPN'), ('                                                      ', 'SPACE'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('Engineering', 'PROPN'), ('&', 'CCONJ'), ('Technology', 'PROPN'), ('  ', 'SPACE'), ('‹#›', 'VERB'), (' ', 'SPACE'), ('Step-1', 'NOUN'), (':', 'PUNCT'), ('Generate', 'PROPN'), ('Public', 'PROPN'), ('key', 'NOUN'), ('Private', 'ADJ'), ('key', 'ADJ'), ('Select', 'PROPN'), ('large', 'ADJ'), ('prime', 'ADJ'), ('numbers', 'NOUN'), (':', 'PUNCT'), (' ', 'SPACE'), ('p', 'PROPN'), ('q', 'PROPN'), ('Calculate', 'PROPN'), ('modulus', 'NOUN'), (':', 'PUNCT'), ('n', 'X'), ('=', 'NOUN'), ('p', 'X'), ('*', 'PUNCT'), ('q', 'PROPN'), ('Calculate', 'PROPN'), ('Euler', 'PROPN'), ('totient', 'ADJ'), ('function', 'NOUN'), (':', 'PUNCT'), ('φ(n', 'PROPN'), (')', 'PUNCT'), ('=', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'nsubj'), ('Step-1', 'nmod'), (':', 'punct'), ('Generate', 'compound'), ('Public', 'amod'), ('key', 'amod'), ('Private', 'conj'), ('key', 'amod'), ('Step-2', 'appos'), (':', 'punct'), ('Encrypt', 'compound'), ('message', 'nsubj'), ('Public', 'amod'), ('key', 'amod'), ('Step-3', 'dobj'), (':', 'punct'), ('Decrypt', 'compound'), ('message', 'appos'), ('Private', 'amod'), ('key', 'amod'), ('    ', 'compound'), ('Unit-4', 'compound'), ('Asymmertic', 'compound'), ('Ciphers', 'dobj'), ('                                                      ', 'compound'), ('Darshan', 'compound'), ('Institute', 'appos'), ('Engineering', 'pobj'), ('&', 'cc'), ('Technology', 'conj'), ('  ', 'conj'), ('‹#›', 'punct'), (' ', 'punct'), ('Step-1', 'ROOT'), (':', 'punct'), ('Generate', 'compound'), ('Public', 'amod'), ('key', 'amod'), ('Private', 'conj'), ('key', 'conj'), ('Select', 'appos'), ('large', 'amod'), ('prime', 'amod'), ('numbers', 'appos'), (':', 'punct'), (' ', 'appos'), ('p', 'appos'), ('q', 'nmod'), ('Calculate', 'compound'), ('modulus', 'conj'), (':', 'punct'), ('n', 'cc'), ('=', 'punct'), ('p', 'prep'), ('*', 'punct'), ('q', 'punct'), ('Calculate', 'compound'), ('Euler', 'appos'), ('totient', 'amod'), ('function', 'appos'), (':', 'punct'), ('φ(n', 'appos'), (')', 'punct'), ('=', 'punct')]

>> Bigrams: 
[[ , Step-1], [Step-1, :], [:, Generate], [Generate, Public], [Public, key], [key, Private], [Private, key], [key, Step-2], [Step-2, :], [:, Encrypt], [Encrypt, message], [message, Public], [Public, key], [key, Step-3], [Step-3, :], [:, Decrypt], [Decrypt, message], [message, Private], [Private, key], [key,     ], [    , Unit-4], [Unit-4, Asymmertic], [Asymmertic, Ciphers], [Ciphers,                                                       ], [                                                      , Darshan], [Darshan, Institute], [Institute, Engineering], [Engineering, &], [&, Technology], [Technology,   ], [  , ‹#›], [‹#›,  ], [ , Step-1], [Step-1, :], [:, Generate], [Generate, Public], [Public, key], [key, Private], [Private, key], [key, Select], [Select, large], [large, prime], [prime, numbers], [numbers, :], [:,  ], [ , p], [p, q], [q, Calculate], [Calculate, modulus], [modulus, :], [:, n], [n, =], [=, p], [p, *], [*, q], [q, Calculate], [Calculate, Euler], [Euler, totient], [totient, function], [function, :], [:, φ(n], [φ(n, )], [), =]]

>> Trigrams: 
[[ , Step-1, :], [Step-1, :, Generate], [:, Generate, Public], [Generate, Public, key], [Public, key, Private], [key, Private, key], [Private, key, Step-2], [key, Step-2, :], [Step-2, :, Encrypt], [:, Encrypt, message], [Encrypt, message, Public], [message, Public, key], [Public, key, Step-3], [key, Step-3, :], [Step-3, :, Decrypt], [:, Decrypt, message], [Decrypt, message, Private], [message, Private, key], [Private, key,     ], [key,     , Unit-4], [    , Unit-4, Asymmertic], [Unit-4, Asymmertic, Ciphers], [Asymmertic, Ciphers,                                                       ], [Ciphers,                                                       , Darshan], [                                                      , Darshan, Institute], [Darshan, Institute, Engineering], [Institute, Engineering, &], [Engineering, &, Technology], [&, Technology,   ], [Technology,   , ‹#›], [  , ‹#›,  ], [‹#›,  , Step-1], [ , Step-1, :], [Step-1, :, Generate], [:, Generate, Public], [Generate, Public, key], [Public, key, Private], [key, Private, key], [Private, key, Select], [key, Select, large], [Select, large, prime], [large, prime, numbers], [prime, numbers, :], [numbers, :,  ], [:,  , p], [ , p, q], [p, q, Calculate], [q, Calculate, modulus], [Calculate, modulus, :], [modulus, :, n], [:, n, =], [n, =, p], [=, p, *], [p, *, q], [*, q, Calculate], [q, Calculate, Euler], [Calculate, Euler, totient], [Euler, totient, function], [totient, function, :], [function, :, φ(n], [:, φ(n, )], [φ(n, ), =]]

>> Noun Phrases are: 
[Generate Public key and Private key Step-2, Encrypt message, Public key Step-3, Decrypt message, Private key     Unit-4 Asymmertic Ciphers,                                                       Darshan Institute, Engineering, Technology, Select, p, q Calculate modulus, Calculate Euler, totient function, φ(n]

>> Named Entities are: 
[('Generate Public', 'ORG'), ('Encrypt', 'PERSON'), ('Public', 'ORG'), ('Decrypt', 'PERSON'), ('Unit-4 Asymmertic Ciphers                                                       Darshan Institute of Engineering & Technology', 'ORG'), ('Generate Public', 'ORG'), ('two', 'CARDINAL'), ('Calculate', 'ORG'), ('Calculate Euler’s', 'ORG')]


============================ Sentence 29 =============================

(p-1) * 


>> Tokens are: 
[(, p-1, ), *] 

>> PoS Tags are: 
[('(', 'PUNCT'), ('p-1', 'NOUN'), (')', 'PUNCT'), ('*', 'PUNCT')] 

>> Dependency Tags are: 
[('(', 'punct'), ('p-1', 'ROOT'), (')', 'punct'), ('*', 'punct')]

>> Bigrams: 
[[(, p-1], [p-1, )], [), *]]

>> Trigrams: 
[[(, p-1, )], [p-1, ), *]]

>> Noun Phrases are: 
[(p-1]

>> Named Entities are: 
[]


============================ Sentence 30 =============================

(q-1) Select e such that e is relatively prime to φ(n) and 1 < e < φ(n) 


>> Tokens are: 
[(, q-1, ), Select, e, e, relatively, prime, φ(n, ), 1, <, e, <, φ(n, )] 

>> PoS Tags are: 
[('(', 'PUNCT'), ('q-1', 'PROPN'), (')', 'PUNCT'), ('Select', 'PROPN'), ('e', 'NOUN'), ('e', 'NOUN'), ('relatively', 'ADV'), ('prime', 'ADJ'), ('φ(n', 'PROPN'), (')', 'PUNCT'), ('1', 'NUM'), ('<', 'X'), ('e', 'X'), ('<', 'X'), ('φ(n', 'PROPN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('(', 'punct'), ('q-1', 'nmod'), (')', 'punct'), ('Select', 'nsubj'), ('e', 'dobj'), ('e', 'nsubj'), ('relatively', 'advmod'), ('prime', 'acomp'), ('φ(n', 'pobj'), (')', 'punct'), ('1', 'nummod'), ('<', 'nmod'), ('e', 'nmod'), ('<', 'dep'), ('φ(n', 'conj'), (')', 'punct')]

>> Bigrams: 
[[(, q-1], [q-1, )], [), Select], [Select, e], [e, e], [e, relatively], [relatively, prime], [prime, φ(n], [φ(n, )], [), 1], [1, <], [<, e], [e, <], [<, φ(n], [φ(n, )]]

>> Trigrams: 
[[(, q-1, )], [q-1, ), Select], [), Select, e], [Select, e, e], [e, e, relatively], [e, relatively, prime], [relatively, prime, φ(n], [prime, φ(n, )], [φ(n, ), 1], [), 1, <], [1, <, e], [<, e, <], [e, <, φ(n], [<, φ(n, )]]

>> Noun Phrases are: 
[(q-1) Select, e, such that e, φ(n, 1 < e < φ(n]

>> Named Entities are: 
[('1', 'CARDINAL')]


============================ Sentence 31 =============================

   Determine 


>> Tokens are: 
[   , Determine] 

>> PoS Tags are: 
[('   ', 'SPACE'), ('Determine', 'NOUN')] 

>> Dependency Tags are: 
[('   ', 'compound'), ('Determine', 'ROOT')]

>> Bigrams: 
[[   , Determine]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[   Determine]

>> Named Entities are: 
[]


============================ Sentence 32 =============================

d such that d * e ≡ 1 (mod φ(n)) 


>> Tokens are: 
[d, d, *, e, ≡, 1, (, mod, φ(n, ), )] 

>> PoS Tags are: 
[('d', 'NOUN'), ('d', 'X'), ('*', 'SYM'), ('e', 'NOUN'), ('≡', 'ADJ'), ('1', 'NUM'), ('(', 'PUNCT'), ('mod', 'PROPN'), ('φ(n', 'PROPN'), (')', 'PUNCT'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('d', 'ROOT'), ('d', 'compound'), ('*', 'punct'), ('e', 'nmod'), ('≡', 'amod'), ('1', 'nummod'), ('(', 'punct'), ('mod', 'compound'), ('φ(n', 'pobj'), (')', 'punct'), (')', 'punct')]

>> Bigrams: 
[[d, d], [d, *], [*, e], [e, ≡], [≡, 1], [1, (], [(, mod], [mod, φ(n], [φ(n, )], [), )]]

>> Trigrams: 
[[d, d, *], [d, *, e], [*, e, ≡], [e, ≡, 1], [≡, 1, (], [1, (, mod], [(, mod, φ(n], [mod, φ(n, )], [φ(n, ), )]]

>> Noun Phrases are: 
[d, such that d * e ≡ 1 (mod φ(n]

>> Named Entities are: 
[('1', 'CARDINAL')]


============================ Sentence 33 =============================

Publickey : PU = { e, n } Privatekey : PR = { d, n }   


>> Tokens are: 
[Publickey, :, PU, =, {, e, ,, n, }, Privatekey, :, PR, =, {, d, ,, n, },  ] 

>> PoS Tags are: 
[('Publickey', 'PROPN'), (':', 'PUNCT'), ('PU', 'PROPN'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('e', 'NOUN'), (',', 'PUNCT'), ('n', 'CCONJ'), ('}', 'PUNCT'), ('Privatekey', 'PROPN'), (':', 'PUNCT'), ('PR', 'NOUN'), ('=', 'SYM'), ('{', 'PUNCT'), ('d', 'NOUN'), (',', 'PUNCT'), ('n', 'CCONJ'), ('}', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Publickey', 'ROOT'), (':', 'punct'), ('PU', 'appos'), ('=', 'punct'), ('{', 'punct'), ('e', 'appos'), (',', 'punct'), ('n', 'cc'), ('}', 'punct'), ('Privatekey', 'appos'), (':', 'punct'), ('PR', 'appos'), ('=', 'punct'), ('{', 'punct'), ('d', 'appos'), (',', 'punct'), ('n', 'cc'), ('}', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[Publickey, :], [:, PU], [PU, =], [=, {], [{, e], [e, ,], [,, n], [n, }], [}, Privatekey], [Privatekey, :], [:, PR], [PR, =], [=, {], [{, d], [d, ,], [,, n], [n, }], [},  ]]

>> Trigrams: 
[[Publickey, :, PU], [:, PU, =], [PU, =, {], [=, {, e], [{, e, ,], [e, ,, n], [,, n, }], [n, }, Privatekey], [}, Privatekey, :], [Privatekey, :, PR], [:, PR, =], [PR, =, {], [=, {, d], [{, d, ,], [d, ,, n], [,, n, }], [n, },  ]]

>> Noun Phrases are: 
[Publickey, PU, e, Privatekey, PR, d]

>> Named Entities are: 
[('Publickey', 'PERSON')]


============================ Sentence 34 =============================

Two numbers are relatively prime if they have no common factors other than 1. 


>> Tokens are: 
[numbers, relatively, prime, common, factors, 1, .] 

>> PoS Tags are: 
[('numbers', 'NOUN'), ('relatively', 'ADV'), ('prime', 'ADJ'), ('common', 'ADJ'), ('factors', 'NOUN'), ('1', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('numbers', 'nsubj'), ('relatively', 'advmod'), ('prime', 'acomp'), ('common', 'amod'), ('factors', 'dobj'), ('1', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[numbers, relatively], [relatively, prime], [prime, common], [common, factors], [factors, 1], [1, .]]

>> Trigrams: 
[[numbers, relatively, prime], [relatively, prime, common], [prime, common, factors], [common, factors, 1], [factors, 1, .]]

>> Noun Phrases are: 
[Two numbers, they, no common factors]

>> Named Entities are: 
[('Two', 'CARDINAL'), ('1', 'CARDINAL')]


============================ Sentence 35 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 36 =============================

Unit-4 Asymmertic Ciphers                                                       Darshan Institute of Engineering & Technology   ‹#›  Step-1: Generate Public key and Private key Select two large prime numbers:  p = 3 and q = 11 Calculate modulus : n = p * q, n 


>> Tokens are: 
[Unit-4, Asymmertic, Ciphers,                                                       , Darshan, Institute, Engineering, &, Technology,   , ‹#›,  , Step-1, :, Generate, Public, key, Private, key, Select, large, prime, numbers, :,  , p, =, 3, q, =, 11, Calculate, modulus, :, n, =, p, *, q, ,, n] 

>> PoS Tags are: 
[('Unit-4', 'PROPN'), ('Asymmertic', 'PROPN'), ('Ciphers', 'PROPN'), ('                                                      ', 'SPACE'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('Engineering', 'PROPN'), ('&', 'CCONJ'), ('Technology', 'PROPN'), ('  ', 'SPACE'), ('‹#›', 'VERB'), (' ', 'SPACE'), ('Step-1', 'NOUN'), (':', 'PUNCT'), ('Generate', 'PROPN'), ('Public', 'PROPN'), ('key', 'NOUN'), ('Private', 'ADJ'), ('key', 'ADJ'), ('Select', 'PROPN'), ('large', 'ADJ'), ('prime', 'ADJ'), ('numbers', 'NOUN'), (':', 'PUNCT'), (' ', 'SPACE'), ('p', 'X'), ('=', 'SYM'), ('3', 'NUM'), ('q', 'NOUN'), ('=', 'SYM'), ('11', 'NUM'), ('Calculate', 'PROPN'), ('modulus', 'NOUN'), (':', 'PUNCT'), ('n', 'X'), ('=', 'NOUN'), ('p', 'X'), ('*', 'PUNCT'), ('q', 'NOUN'), (',', 'PUNCT'), ('n', 'CCONJ')] 

>> Dependency Tags are: 
[('Unit-4', 'compound'), ('Asymmertic', 'compound'), ('Ciphers', 'nsubj'), ('                                                      ', 'compound'), ('Darshan', 'compound'), ('Institute', 'appos'), ('Engineering', 'pobj'), ('&', 'cc'), ('Technology', 'conj'), ('  ', 'conj'), ('‹#›', 'punct'), (' ', 'appos'), ('Step-1', 'ROOT'), (':', 'punct'), ('Generate', 'compound'), ('Public', 'amod'), ('key', 'amod'), ('Private', 'conj'), ('key', 'conj'), ('Select', 'appos'), ('large', 'amod'), ('prime', 'amod'), ('numbers', 'appos'), (':', 'punct'), (' ', 'appos'), ('p', 'appos'), ('=', 'appos'), ('3', 'nummod'), ('q', 'quantmod'), ('=', 'quantmod'), ('11', 'conj'), ('Calculate', 'amod'), ('modulus', 'appos'), (':', 'punct'), ('n', 'cc'), ('=', 'punct'), ('p', 'prep'), ('*', 'punct'), ('q', 'appos'), (',', 'punct'), ('n', 'cc')]

>> Bigrams: 
[[Unit-4, Asymmertic], [Asymmertic, Ciphers], [Ciphers,                                                       ], [                                                      , Darshan], [Darshan, Institute], [Institute, Engineering], [Engineering, &], [&, Technology], [Technology,   ], [  , ‹#›], [‹#›,  ], [ , Step-1], [Step-1, :], [:, Generate], [Generate, Public], [Public, key], [key, Private], [Private, key], [key, Select], [Select, large], [large, prime], [prime, numbers], [numbers, :], [:,  ], [ , p], [p, =], [=, 3], [3, q], [q, =], [=, 11], [11, Calculate], [Calculate, modulus], [modulus, :], [:, n], [n, =], [=, p], [p, *], [*, q], [q, ,], [,, n]]

>> Trigrams: 
[[Unit-4, Asymmertic, Ciphers], [Asymmertic, Ciphers,                                                       ], [Ciphers,                                                       , Darshan], [                                                      , Darshan, Institute], [Darshan, Institute, Engineering], [Institute, Engineering, &], [Engineering, &, Technology], [&, Technology,   ], [Technology,   , ‹#›], [  , ‹#›,  ], [‹#›,  , Step-1], [ , Step-1, :], [Step-1, :, Generate], [:, Generate, Public], [Generate, Public, key], [Public, key, Private], [key, Private, key], [Private, key, Select], [key, Select, large], [Select, large, prime], [large, prime, numbers], [prime, numbers, :], [numbers, :,  ], [:,  , p], [ , p, =], [p, =, 3], [=, 3, q], [3, q, =], [q, =, 11], [=, 11, Calculate], [11, Calculate, modulus], [Calculate, modulus, :], [modulus, :, n], [:, n, =], [n, =, p], [=, p, *], [p, *, q], [*, q, ,], [q, ,, n]]

>> Noun Phrases are: 
[Unit-4 Asymmertic Ciphers,                                                       Darshan Institute, Engineering, Technology, Select, Calculate modulus, q]

>> Named Entities are: 
[('Darshan Institute of Engineering & Technology', 'ORG'), ('Generate Public', 'ORG'), ('two', 'CARDINAL'), ('3', 'CARDINAL'), ('11', 'CARDINAL')]


============================ Sentence 37 =============================

= 33 


>> Tokens are: 
[=, 33] 

>> PoS Tags are: 
[('=', 'SYM'), ('33', 'NUM')] 

>> Dependency Tags are: 
[('=', 'quantmod'), ('33', 'ROOT')]

>> Bigrams: 
[[=, 33]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('33', 'CARDINAL')]


============================ Sentence 38 =============================

Calculate Euler’s totient function : φ(n) = 


>> Tokens are: 
[Calculate, Euler, totient, function, :, φ(n, ), =] 

>> PoS Tags are: 
[('Calculate', 'PROPN'), ('Euler', 'PROPN'), ('totient', 'ADJ'), ('function', 'NOUN'), (':', 'PUNCT'), ('φ(n', 'PROPN'), (')', 'PUNCT'), ('=', 'PUNCT')] 

>> Dependency Tags are: 
[('Calculate', 'compound'), ('Euler', 'poss'), ('totient', 'amod'), ('function', 'ROOT'), (':', 'punct'), ('φ(n', 'appos'), (')', 'punct'), ('=', 'punct')]

>> Bigrams: 
[[Calculate, Euler], [Euler, totient], [totient, function], [function, :], [:, φ(n], [φ(n, )], [), =]]

>> Trigrams: 
[[Calculate, Euler, totient], [Euler, totient, function], [totient, function, :], [function, :, φ(n], [:, φ(n, )], [φ(n, ), =]]

>> Noun Phrases are: 
[Calculate Euler’s totient function, φ(n]

>> Named Entities are: 
[('Calculate', 'ORG')]


============================ Sentence 39 =============================

(p-1) * 


>> Tokens are: 
[(, p-1, ), *] 

>> PoS Tags are: 
[('(', 'PUNCT'), ('p-1', 'NOUN'), (')', 'PUNCT'), ('*', 'PUNCT')] 

>> Dependency Tags are: 
[('(', 'punct'), ('p-1', 'ROOT'), (')', 'punct'), ('*', 'punct')]

>> Bigrams: 
[[(, p-1], [p-1, )], [), *]]

>> Trigrams: 
[[(, p-1, )], [p-1, ), *]]

>> Noun Phrases are: 
[(p-1]

>> Named Entities are: 
[]


============================ Sentence 40 =============================

(q-1) 	φ(n) = 


>> Tokens are: 
[(, q-1, ), 	, φ(n, ), =] 

>> PoS Tags are: 
[('(', 'PUNCT'), ('q-1', 'PROPN'), (')', 'PUNCT'), ('\t', 'SPACE'), ('φ(n', 'PROPN'), (')', 'PUNCT'), ('=', 'PUNCT')] 

>> Dependency Tags are: 
[('(', 'punct'), ('q-1', 'ROOT'), (')', 'punct'), ('\t', 'compound'), ('φ(n', 'npadvmod'), (')', 'punct'), ('=', 'punct')]

>> Bigrams: 
[[(, q-1], [q-1, )], [), 	], [	, φ(n], [φ(n, )], [), =]]

>> Trigrams: 
[[(, q-1, )], [q-1, ), 	], [), 	, φ(n], [	, φ(n, )], [φ(n, ), =]]

>> Noun Phrases are: 
[(q-1]

>> Named Entities are: 
[]


============================ Sentence 41 =============================

( 3 – 1 )   


>> Tokens are: 
[(, 3, –, 1, ),  ] 

>> PoS Tags are: 
[('(', 'PUNCT'), ('3', 'NUM'), ('–', 'SYM'), ('1', 'NUM'), (')', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('(', 'punct'), ('3', 'nummod'), ('–', 'punct'), ('1', 'prep'), (')', 'punct'), (' ', 'ROOT')]

>> Bigrams: 
[[(, 3], [3, –], [–, 1], [1, )], [),  ]]

>> Trigrams: 
[[(, 3, –], [3, –, 1], [–, 1, )], [1, ),  ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('3', 'CARDINAL')]


============================ Sentence 42 =============================

* ( 11 – 1 ) = 


>> Tokens are: 
[*, (, 11, –, 1, ), =] 

>> PoS Tags are: 
[('*', 'PUNCT'), ('(', 'PUNCT'), ('11', 'NUM'), ('–', 'SYM'), ('1', 'NUM'), (')', 'PUNCT'), ('=', 'PUNCT')] 

>> Dependency Tags are: 
[('*', 'ROOT'), ('(', 'punct'), ('11', 'appos'), ('–', 'punct'), ('1', 'prep'), (')', 'punct'), ('=', 'punct')]

>> Bigrams: 
[[*, (], [(, 11], [11, –], [–, 1], [1, )], [), =]]

>> Trigrams: 
[[*, (, 11], [(, 11, –], [11, –, 1], [–, 1, )], [1, ), =]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('11', 'CARDINAL'), ('1', 'CARDINAL')]


============================ Sentence 43 =============================

20 Select e such that e is relatively prime to φ(n) and 1 < e < φ(n) 


>> Tokens are: 
[20, Select, e, e, relatively, prime, φ(n, ), 1, <, e, <, φ(n, )] 

>> PoS Tags are: 
[('20', 'NUM'), ('Select', 'PROPN'), ('e', 'NOUN'), ('e', 'NOUN'), ('relatively', 'ADV'), ('prime', 'ADJ'), ('φ(n', 'PROPN'), (')', 'PUNCT'), ('1', 'NUM'), ('<', 'X'), ('e', 'X'), ('<', 'X'), ('φ(n', 'PROPN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('20', 'nummod'), ('Select', 'nsubj'), ('e', 'nsubj'), ('e', 'nsubj'), ('relatively', 'advmod'), ('prime', 'acomp'), ('φ(n', 'pobj'), (')', 'punct'), ('1', 'nummod'), ('<', 'nmod'), ('e', 'dep'), ('<', 'dep'), ('φ(n', 'conj'), (')', 'punct')]

>> Bigrams: 
[[20, Select], [Select, e], [e, e], [e, relatively], [relatively, prime], [prime, φ(n], [φ(n, )], [), 1], [1, <], [<, e], [e, <], [<, φ(n], [φ(n, )]]

>> Trigrams: 
[[20, Select, e], [Select, e, e], [e, e, relatively], [e, relatively, prime], [relatively, prime, φ(n], [prime, φ(n, )], [φ(n, ), 1], [), 1, <], [1, <, e], [<, e, <], [e, <, φ(n], [<, φ(n, )]]

>> Noun Phrases are: 
[20 Select, that e, φ(n, 1 < e < φ(n]

>> Named Entities are: 
[('20', 'CARDINAL'), ('1', 'CARDINAL')]


============================ Sentence 44 =============================

We have several choices for e : 7, 11, 13, 17, 19 Let’s take e = 7 Determine d such that d * e ≡ 1 (mod φ(n)) ? 


>> Tokens are: 
[choices, e, :, 7, ,, 11, ,, 13, ,, 17, ,, 19, Let, e, =, 7, Determine, d, d, *, e, ≡, 1, (, mod, φ(n, ), ), ?] 

>> PoS Tags are: 
[('choices', 'NOUN'), ('e', 'NOUN'), (':', 'PUNCT'), ('7', 'NUM'), (',', 'PUNCT'), ('11', 'NUM'), (',', 'PUNCT'), ('13', 'NUM'), (',', 'PUNCT'), ('17', 'NUM'), (',', 'PUNCT'), ('19', 'NUM'), ('Let', 'VERB'), ('e', 'NOUN'), ('=', 'SYM'), ('7', 'NUM'), ('Determine', 'NOUN'), ('d', 'NOUN'), ('d', 'X'), ('*', 'SYM'), ('e', 'NOUN'), ('≡', 'ADJ'), ('1', 'NUM'), ('(', 'PUNCT'), ('mod', 'PROPN'), ('φ(n', 'PROPN'), (')', 'PUNCT'), (')', 'PUNCT'), ('?', 'PUNCT')] 

>> Dependency Tags are: 
[('choices', 'dobj'), ('e', 'pobj'), (':', 'punct'), ('7', 'appos'), (',', 'punct'), ('11', 'npadvmod'), (',', 'punct'), ('13', 'appos'), (',', 'punct'), ('17', 'npadvmod'), (',', 'punct'), ('19', 'dobj'), ('Let', 'conj'), ('e', 'dobj'), ('=', 'dobj'), ('7', 'nummod'), ('Determine', 'dobj'), ('d', 'dep'), ('d', 'prep'), ('*', 'punct'), ('e', 'dep'), ('≡', 'advmod'), ('1', 'nummod'), ('(', 'punct'), ('mod', 'compound'), ('φ(n', 'pobj'), (')', 'punct'), (')', 'punct'), ('?', 'punct')]

>> Bigrams: 
[[choices, e], [e, :], [:, 7], [7, ,], [,, 11], [11, ,], [,, 13], [13, ,], [,, 17], [17, ,], [,, 19], [19, Let], [Let, e], [e, =], [=, 7], [7, Determine], [Determine, d], [d, d], [d, *], [*, e], [e, ≡], [≡, 1], [1, (], [(, mod], [mod, φ(n], [φ(n, )], [), )], [), ?]]

>> Trigrams: 
[[choices, e, :], [e, :, 7], [:, 7, ,], [7, ,, 11], [,, 11, ,], [11, ,, 13], [,, 13, ,], [13, ,, 17], [,, 17, ,], [17, ,, 19], [,, 19, Let], [19, Let, e], [Let, e, =], [e, =, 7], [=, 7, Determine], [7, Determine, d], [Determine, d, d], [d, d, *], [d, *, e], [*, e, ≡], [e, ≡, 1], [≡, 1, (], [1, (, mod], [(, mod, φ(n], [mod, φ(n, )], [φ(n, ), )], [), ), ?]]

>> Noun Phrases are: 
[We, several choices, e, ’s, e, 7 Determine, * e ≡ 1 (mod φ(n]

>> Named Entities are: 
[('7', 'CARDINAL'), ('11', 'DATE'), ('13', 'DATE'), ('17', 'DATE'), ('19', 'CARDINAL'), ('1', 'CARDINAL')]


============================ Sentence 45 =============================

* 7 ≡ 1 (mod 20), 3 * 7 ≡ 1 (mod 20)   


>> Tokens are: 
[*, 7, ≡, 1, (, mod, 20, ), ,, 3, *, 7, ≡, 1, (, mod, 20, ),  ] 

>> PoS Tags are: 
[('*', 'PUNCT'), ('7', 'NUM'), ('≡', 'ADJ'), ('1', 'NUM'), ('(', 'PUNCT'), ('mod', 'NOUN'), ('20', 'NUM'), (')', 'PUNCT'), (',', 'PUNCT'), ('3', 'NUM'), ('*', 'SYM'), ('7', 'NUM'), ('≡', 'ADJ'), ('1', 'NUM'), ('(', 'PUNCT'), ('mod', 'X'), ('20', 'NUM'), (')', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('*', 'punct'), ('7', 'nmod'), ('≡', 'amod'), ('1', 'dep'), ('(', 'punct'), ('mod', 'prep'), ('20', 'nummod'), (')', 'punct'), (',', 'punct'), ('3', 'appos'), ('*', 'punct'), ('7', 'nummod'), ('≡', 'amod'), ('1', 'prep'), ('(', 'punct'), ('mod', 'advmod'), ('20', 'ROOT'), (')', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[*, 7], [7, ≡], [≡, 1], [1, (], [(, mod], [mod, 20], [20, )], [), ,], [,, 3], [3, *], [*, 7], [7, ≡], [≡, 1], [1, (], [(, mod], [mod, 20], [20, )], [),  ]]

>> Trigrams: 
[[*, 7, ≡], [7, ≡, 1], [≡, 1, (], [1, (, mod], [(, mod, 20], [mod, 20, )], [20, ), ,], [), ,, 3], [,, 3, *], [3, *, 7], [*, 7, ≡], [7, ≡, 1], [≡, 1, (], [1, (, mod], [(, mod, 20], [mod, 20, )], [20, ),  ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('7', 'CARDINAL'), ('1', 'CARDINAL'), ('20', 'CARDINAL'), ('3', 'CARDINAL'), ('7', 'CARDINAL'), ('1', 'CARDINAL'), ('20', 'CARDINAL')]


============================ Sentence 46 =============================

Public key : PU = { e, n } , PU = { 7, 33 } Private key : PR = { d, n }, PR = { 3, 33 }    


>> Tokens are: 
[Public, key, :, PU, =, {, e, ,, n, }, ,, PU, =, {, 7, ,, 33, }, Private, key, :, PR, =, {, d, ,, n, }, ,, PR, =, {, 3, ,, 33, },   ] 

>> PoS Tags are: 
[('Public', 'ADJ'), ('key', 'NOUN'), (':', 'PUNCT'), ('PU', 'PROPN'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('e', 'NOUN'), (',', 'PUNCT'), ('n', 'CCONJ'), ('}', 'PUNCT'), (',', 'PUNCT'), ('PU', 'PROPN'), ('=', 'NUM'), ('{', 'PUNCT'), ('7', 'NUM'), (',', 'PUNCT'), ('33', 'NUM'), ('}', 'PUNCT'), ('Private', 'ADJ'), ('key', 'NOUN'), (':', 'PUNCT'), ('PR', 'NOUN'), ('=', 'SYM'), ('{', 'PUNCT'), ('d', 'NOUN'), (',', 'PUNCT'), ('n', 'CCONJ'), ('}', 'PUNCT'), (',', 'PUNCT'), ('PR', 'NOUN'), ('=', 'NUM'), ('{', 'PUNCT'), ('3', 'NUM'), (',', 'PUNCT'), ('33', 'NUM'), ('}', 'PUNCT'), ('  ', 'SPACE')] 

>> Dependency Tags are: 
[('Public', 'amod'), ('key', 'ROOT'), (':', 'punct'), ('PU', 'appos'), ('=', 'punct'), ('{', 'punct'), ('e', 'appos'), (',', 'punct'), ('n', 'cc'), ('}', 'punct'), (',', 'punct'), ('PU', 'appos'), ('=', 'punct'), ('{', 'punct'), ('7', 'appos'), (',', 'punct'), ('33', 'nummod'), ('}', 'punct'), ('Private', 'amod'), ('key', 'appos'), (':', 'punct'), ('PR', 'appos'), ('=', 'punct'), ('{', 'punct'), ('d', 'appos'), (',', 'punct'), ('n', 'cc'), ('}', 'punct'), (',', 'punct'), ('PR', 'appos'), ('=', 'punct'), ('{', 'punct'), ('3', 'nummod'), (',', 'punct'), ('33', 'nummod'), ('}', 'punct'), ('  ', 'appos')]

>> Bigrams: 
[[Public, key], [key, :], [:, PU], [PU, =], [=, {], [{, e], [e, ,], [,, n], [n, }], [}, ,], [,, PU], [PU, =], [=, {], [{, 7], [7, ,], [,, 33], [33, }], [}, Private], [Private, key], [key, :], [:, PR], [PR, =], [=, {], [{, d], [d, ,], [,, n], [n, }], [}, ,], [,, PR], [PR, =], [=, {], [{, 3], [3, ,], [,, 33], [33, }], [},   ]]

>> Trigrams: 
[[Public, key, :], [key, :, PU], [:, PU, =], [PU, =, {], [=, {, e], [{, e, ,], [e, ,, n], [,, n, }], [n, }, ,], [}, ,, PU], [,, PU, =], [PU, =, {], [=, {, 7], [{, 7, ,], [7, ,, 33], [,, 33, }], [33, }, Private], [}, Private, key], [Private, key, :], [key, :, PR], [:, PR, =], [PR, =, {], [=, {, d], [{, d, ,], [d, ,, n], [,, n, }], [n, }, ,], [}, ,, PR], [,, PR, =], [PR, =, {], [=, {, 3], [{, 3, ,], [3, ,, 33], [,, 33, }], [33, },   ]]

>> Noun Phrases are: 
[Public key, PU, e, PU, } Private key, PR, d, PR]

>> Named Entities are: 
[('33', 'CARDINAL'), ('3', 'CARDINAL'), ('33', 'CARDINAL')]


============================ Sentence 47 =============================

This is equivalent to finding d which satisfies de = 1 + j.φ(n) where j is any integer. 


>> Tokens are: 
[equivalent, finding, d, satisfies, de, =, 1, +, j.φ(n, ), j, integer, .] 

>> PoS Tags are: 
[('equivalent', 'ADJ'), ('finding', 'VERB'), ('d', 'NOUN'), ('satisfies', 'NOUN'), ('de', 'X'), ('=', 'SYM'), ('1', 'NUM'), ('+', 'NUM'), ('j.φ(n', 'NOUN'), (')', 'PUNCT'), ('j', 'DET'), ('integer', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('equivalent', 'acomp'), ('finding', 'pcomp'), ('d', 'dobj'), ('satisfies', 'nsubj'), ('de', 'ccomp'), ('=', 'punct'), ('1', 'nummod'), ('+', 'punct'), ('j.φ(n', 'appos'), (')', 'punct'), ('j', 'nsubj'), ('integer', 'attr'), ('.', 'punct')]

>> Bigrams: 
[[equivalent, finding], [finding, d], [d, satisfies], [satisfies, de], [de, =], [=, 1], [1, +], [+, j.φ(n], [j.φ(n, )], [), j], [j, integer], [integer, .]]

>> Trigrams: 
[[equivalent, finding, d], [finding, d, satisfies], [d, satisfies, de], [satisfies, de, =], [de, =, 1], [=, 1, +], [1, +, j.φ(n], [+, j.φ(n, )], [j.φ(n, ), j], [), j, integer], [j, integer, .]]

>> Noun Phrases are: 
[d, which satisfies, j.φ(n, any integer]

>> Named Entities are: 
[]


============================ Sentence 48 =============================

We can rewrite this as     d = (1 + j. φ(n)) / e  Unit-4 Asymmertic Ciphers                                                       Darshan Institute of Engineering & Technology   ‹#›  Step-2 : 


>> Tokens are: 
[rewrite,     , d, =, (, 1, +, j., φ(n, ), ), /, e,  , Unit-4, Asymmertic, Ciphers,                                                       , Darshan, Institute, Engineering, &, Technology,   , ‹#›,  , Step-2, :] 

>> PoS Tags are: 
[('rewrite', 'VERB'), ('    ', 'SPACE'), ('d', 'X'), ('=', 'PUNCT'), ('(', 'PUNCT'), ('1', 'NUM'), ('+', 'NUM'), ('j.', 'PROPN'), ('φ(n', 'PROPN'), (')', 'PUNCT'), (')', 'PUNCT'), ('/', 'PUNCT'), ('e', 'NOUN'), (' ', 'SPACE'), ('Unit-4', 'PROPN'), ('Asymmertic', 'PROPN'), ('Ciphers', 'PROPN'), ('                                                      ', 'SPACE'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('Engineering', 'PROPN'), ('&', 'CCONJ'), ('Technology', 'PROPN'), ('  ', 'SPACE'), ('‹#›', 'VERB'), (' ', 'SPACE'), ('Step-2', 'NOUN'), (':', 'PUNCT')] 

>> Dependency Tags are: 
[('rewrite', 'ROOT'), ('    ', 'pobj'), ('d', 'dep'), ('=', 'dobj'), ('(', 'punct'), ('1', 'nummod'), ('+', 'nmod'), ('j.', 'compound'), ('φ(n', 'npadvmod'), (')', 'punct'), (')', 'punct'), ('/', 'punct'), ('e', 'compound'), (' ', 'dep'), ('Unit-4', 'compound'), ('Asymmertic', 'compound'), ('Ciphers', 'appos'), ('                                                      ', 'compound'), ('Darshan', 'compound'), ('Institute', 'appos'), ('Engineering', 'pobj'), ('&', 'cc'), ('Technology', 'conj'), ('  ', 'dobj'), ('‹#›', 'punct'), (' ', 'dobj'), ('Step-2', 'dobj'), (':', 'punct')]

>> Bigrams: 
[[rewrite,     ], [    , d], [d, =], [=, (], [(, 1], [1, +], [+, j.], [j., φ(n], [φ(n, )], [), )], [), /], [/, e], [e,  ], [ , Unit-4], [Unit-4, Asymmertic], [Asymmertic, Ciphers], [Ciphers,                                                       ], [                                                      , Darshan], [Darshan, Institute], [Institute, Engineering], [Engineering, &], [&, Technology], [Technology,   ], [  , ‹#›], [‹#›,  ], [ , Step-2], [Step-2, :]]

>> Trigrams: 
[[rewrite,     , d], [    , d, =], [d, =, (], [=, (, 1], [(, 1, +], [1, +, j.], [+, j., φ(n], [j., φ(n, )], [φ(n, ), )], [), ), /], [), /, e], [/, e,  ], [e,  , Unit-4], [ , Unit-4, Asymmertic], [Unit-4, Asymmertic, Ciphers], [Asymmertic, Ciphers,                                                       ], [Ciphers,                                                       , Darshan], [                                                      , Darshan, Institute], [Darshan, Institute, Engineering], [Institute, Engineering, &], [Engineering, &, Technology], [&, Technology,   ], [Technology,   , ‹#›], [  , ‹#›,  ], [‹#›,  , Step-2], [ , Step-2, :]]

>> Noun Phrases are: 
[We, Unit-4 Asymmertic Ciphers,                                                       Darshan Institute, Engineering, Technology, Step-2]

>> Named Entities are: 
[('Darshan Institute of Engineering & Technology', 'ORG')]


============================ Sentence 49 =============================

Encrypt Message  Encryption Using Public key: C = Me mod n Ciphertext Input Message Publickey 


>> Tokens are: 
[Encrypt, Message,  , Encryption, Public, key, :, C, =, mod, n, Ciphertext, Input, Message, Publickey] 

>> PoS Tags are: 
[('Encrypt', 'PROPN'), ('Message', 'NOUN'), (' ', 'SPACE'), ('Encryption', 'PROPN'), ('Public', 'PROPN'), ('key', 'NOUN'), (':', 'PUNCT'), ('C', 'NOUN'), ('=', 'SYM'), ('mod', 'NOUN'), ('n', 'CCONJ'), ('Ciphertext', 'PROPN'), ('Input', 'PROPN'), ('Message', 'PROPN'), ('Publickey', 'PROPN')] 

>> Dependency Tags are: 
[('Encrypt', 'compound'), ('Message', 'nmod'), (' ', 'nummod'), ('Encryption', 'nsubj'), ('Public', 'dobj'), ('key', 'dobj'), (':', 'punct'), ('C', 'appos'), ('=', 'punct'), ('mod', 'ROOT'), ('n', 'cc'), ('Ciphertext', 'compound'), ('Input', 'compound'), ('Message', 'compound'), ('Publickey', 'conj')]

>> Bigrams: 
[[Encrypt, Message], [Message,  ], [ , Encryption], [Encryption, Public], [Public, key], [key, :], [:, C], [C, =], [=, mod], [mod, n], [n, Ciphertext], [Ciphertext, Input], [Input, Message], [Message, Publickey]]

>> Trigrams: 
[[Encrypt, Message,  ], [Message,  , Encryption], [ , Encryption, Public], [Encryption, Public, key], [Public, key, :], [key, :, C], [:, C, =], [C, =, mod], [=, mod, n], [mod, n, Ciphertext], [n, Ciphertext, Input], [Ciphertext, Input, Message], [Input, Message, Publickey]]

>> Noun Phrases are: 
[Encrypt Message  Encryption, Public, key, C, Me, Ciphertext Input Message Publickey]

>> Named Entities are: 
[]


============================ Sentence 50 =============================

For message M = 14 C = 147 mod 33 C = 


>> Tokens are: 
[message, M, =, 14, C, =, 147, mod, 33, C, =] 

>> PoS Tags are: 
[('message', 'NOUN'), ('M', 'PROPN'), ('=', 'SYM'), ('14', 'NUM'), ('C', 'NOUN'), ('=', 'PUNCT'), ('147', 'NUM'), ('mod', 'NOUN'), ('33', 'NUM'), ('C', 'NOUN'), ('=', 'PUNCT')] 

>> Dependency Tags are: 
[('message', 'pobj'), ('M', 'nmod'), ('=', 'punct'), ('14', 'nummod'), ('C', 'quantmod'), ('=', 'quantmod'), ('147', 'nummod'), ('mod', 'pobj'), ('33', 'nummod'), ('C', 'appos'), ('=', 'pobj')]

>> Bigrams: 
[[message, M], [M, =], [=, 14], [14, C], [C, =], [=, 147], [147, mod], [mod, 33], [33, C], [C, =]]

>> Trigrams: 
[[message, M, =], [M, =, 14], [=, 14, C], [14, C, =], [C, =, 147], [=, 147, mod], [147, mod, 33], [mod, 33, C], [33, C, =]]

>> Noun Phrases are: 
[message, M = 14 C = 147 mod, 33 C]

>> Named Entities are: 
[('14', 'CARDINAL'), ('147', 'CARDINAL'), ('33', 'CARDINAL')]


============================ Sentence 51 =============================

[(141 mod 33) X (142 mod 33) X (144 mod 33)] mod 33 C = 


>> Tokens are: 
[[, (, 141, mod, 33, ), X, (, 142, mod, 33, ), X, (, 144, mod, 33, ), ], mod, 33, C, =] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('(', 'PUNCT'), ('141', 'NUM'), ('mod', 'ADJ'), ('33', 'NUM'), (')', 'PUNCT'), ('X', 'PROPN'), ('(', 'PUNCT'), ('142', 'NUM'), ('mod', 'ADJ'), ('33', 'NUM'), (')', 'PUNCT'), ('X', 'PROPN'), ('(', 'PUNCT'), ('144', 'NUM'), ('mod', 'NOUN'), ('33', 'NUM'), (')', 'PUNCT'), (']', 'PUNCT'), ('mod', 'NOUN'), ('33', 'NUM'), ('C', 'NOUN'), ('=', 'PUNCT')] 

>> Dependency Tags are: 
[('[', 'nmod'), ('(', 'punct'), ('141', 'nummod'), ('mod', 'nmod'), ('33', 'nummod'), (')', 'punct'), ('X', 'ROOT'), ('(', 'punct'), ('142', 'nummod'), ('mod', 'amod'), ('33', 'appos'), (')', 'punct'), ('X', 'appos'), ('(', 'punct'), ('144', 'nummod'), ('mod', 'appos'), ('33', 'appos'), (')', 'punct'), (']', 'punct'), ('mod', 'prep'), ('33', 'nummod'), ('C', 'compound'), ('=', 'appos')]

>> Bigrams: 
[[[, (], [(, 141], [141, mod], [mod, 33], [33, )], [), X], [X, (], [(, 142], [142, mod], [mod, 33], [33, )], [), X], [X, (], [(, 144], [144, mod], [mod, 33], [33, )], [), ]], [], mod], [mod, 33], [33, C], [C, =]]

>> Trigrams: 
[[[, (, 141], [(, 141, mod], [141, mod, 33], [mod, 33, )], [33, ), X], [), X, (], [X, (, 142], [(, 142, mod], [142, mod, 33], [mod, 33, )], [33, ), X], [), X, (], [X, (, 144], [(, 144, mod], [144, mod, 33], [mod, 33, )], [33, ), ]], [), ], mod], [], mod, 33], [mod, 33, C], [33, C, =]]

>> Noun Phrases are: 
[[(141 mod 33) X, X, (144 mod]

>> Named Entities are: 
[('141', 'CARDINAL'), ('142', 'CARDINAL'), ('144', 'CARDINAL'), ('33', 'CARDINAL')]


============================ Sentence 52 =============================

(14 X 31 X 4) mod 33 = 1736 mod 33 C = 20 PU = { e, n } , PU = { 7, 33 }  Unit-4 Asymmertic Ciphers                                                       Darshan Institute of Engineering & Technology   ‹#›  Step-3 : Decrypt Message  Encryption Using Public key 


>> Tokens are: 
[(, 14, X, 31, X, 4, ), mod, 33, =, 1736, mod, 33, C, =, 20, PU, =, {, e, ,, n, }, ,, PU, =, {, 7, ,, 33, },  , Unit-4, Asymmertic, Ciphers,                                                       , Darshan, Institute, Engineering, &, Technology,   , ‹#›,  , Step-3, :, Decrypt, Message,  , Encryption, Public, key] 

>> PoS Tags are: 
[('(', 'PUNCT'), ('14', 'NUM'), ('X', 'NOUN'), ('31', 'NUM'), ('X', 'NOUN'), ('4', 'NUM'), (')', 'PUNCT'), ('mod', 'NOUN'), ('33', 'NUM'), ('=', 'SYM'), ('1736', 'NUM'), ('mod', 'NOUN'), ('33', 'NUM'), ('C', 'NOUN'), ('=', 'SYM'), ('20', 'NUM'), ('PU', 'NOUN'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('e', 'NOUN'), (',', 'PUNCT'), ('n', 'CCONJ'), ('}', 'PUNCT'), (',', 'PUNCT'), ('PU', 'PROPN'), ('=', 'NUM'), ('{', 'PUNCT'), ('7', 'NUM'), (',', 'PUNCT'), ('33', 'NUM'), ('}', 'PUNCT'), (' ', 'SPACE'), ('Unit-4', 'PROPN'), ('Asymmertic', 'PROPN'), ('Ciphers', 'PROPN'), ('                                                      ', 'SPACE'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('Engineering', 'PROPN'), ('&', 'CCONJ'), ('Technology', 'PROPN'), ('  ', 'SPACE'), ('‹#›', 'VERB'), (' ', 'SPACE'), ('Step-3', 'PROPN'), (':', 'PUNCT'), ('Decrypt', 'PROPN'), ('Message', 'PROPN'), (' ', 'SPACE'), ('Encryption', 'PROPN'), ('Public', 'PROPN'), ('key', 'NOUN')] 

>> Dependency Tags are: 
[('(', 'punct'), ('14', 'nummod'), ('X', 'nmod'), ('31', 'nummod'), ('X', 'appos'), ('4', 'appos'), (')', 'punct'), ('mod', 'appos'), ('33', 'nummod'), ('=', 'punct'), ('1736', 'nummod'), ('mod', 'appos'), ('33', 'nummod'), ('C', 'quantmod'), ('=', 'punct'), ('20', 'nummod'), ('PU', 'appos'), ('=', 'punct'), ('{', 'punct'), ('e', 'appos'), (',', 'punct'), ('n', 'cc'), ('}', 'punct'), (',', 'punct'), ('PU', 'nsubj'), ('=', 'punct'), ('{', 'punct'), ('7', 'appos'), (',', 'punct'), ('33', 'nummod'), ('}', 'punct'), (' ', 'appos'), ('Unit-4', 'compound'), ('Asymmertic', 'compound'), ('Ciphers', 'appos'), ('                                                      ', 'compound'), ('Darshan', 'compound'), ('Institute', 'appos'), ('Engineering', 'pobj'), ('&', 'cc'), ('Technology', 'conj'), ('  ', 'conj'), ('‹#›', 'dep'), (' ', 'compound'), ('Step-3', 'dep'), (':', 'punct'), ('Decrypt', 'compound'), ('Message', 'nmod'), (' ', 'nummod'), ('Encryption', 'appos'), ('Public', 'dobj'), ('key', 'ROOT')]

>> Bigrams: 
[[(, 14], [14, X], [X, 31], [31, X], [X, 4], [4, )], [), mod], [mod, 33], [33, =], [=, 1736], [1736, mod], [mod, 33], [33, C], [C, =], [=, 20], [20, PU], [PU, =], [=, {], [{, e], [e, ,], [,, n], [n, }], [}, ,], [,, PU], [PU, =], [=, {], [{, 7], [7, ,], [,, 33], [33, }], [},  ], [ , Unit-4], [Unit-4, Asymmertic], [Asymmertic, Ciphers], [Ciphers,                                                       ], [                                                      , Darshan], [Darshan, Institute], [Institute, Engineering], [Engineering, &], [&, Technology], [Technology,   ], [  , ‹#›], [‹#›,  ], [ , Step-3], [Step-3, :], [:, Decrypt], [Decrypt, Message], [Message,  ], [ , Encryption], [Encryption, Public], [Public, key]]

>> Trigrams: 
[[(, 14, X], [14, X, 31], [X, 31, X], [31, X, 4], [X, 4, )], [4, ), mod], [), mod, 33], [mod, 33, =], [33, =, 1736], [=, 1736, mod], [1736, mod, 33], [mod, 33, C], [33, C, =], [C, =, 20], [=, 20, PU], [20, PU, =], [PU, =, {], [=, {, e], [{, e, ,], [e, ,, n], [,, n, }], [n, }, ,], [}, ,, PU], [,, PU, =], [PU, =, {], [=, {, 7], [{, 7, ,], [7, ,, 33], [,, 33, }], [33, },  ], [},  , Unit-4], [ , Unit-4, Asymmertic], [Unit-4, Asymmertic, Ciphers], [Asymmertic, Ciphers,                                                       ], [Ciphers,                                                       , Darshan], [                                                      , Darshan, Institute], [Darshan, Institute, Engineering], [Institute, Engineering, &], [Engineering, &, Technology], [&, Technology,   ], [Technology,   , ‹#›], [  , ‹#›,  ], [‹#›,  , Step-3], [ , Step-3, :], [Step-3, :, Decrypt], [:, Decrypt, Message], [Decrypt, Message,  ], [Message,  , Encryption], [ , Encryption, Public], [Encryption, Public, key]]

>> Noun Phrases are: 
[31 X, ) mod, 33 = 1736 mod, 33 C = 20 PU, e, PU, Unit-4 Asymmertic Ciphers,                                                       Darshan Institute, Engineering, Technology, Decrypt Message  Encryption, Public]

>> Named Entities are: 
[('14 X 31', 'DATE'), ('33', 'CARDINAL'), ('1736', 'CARDINAL'), ('33', 'CARDINAL'), ('20', 'CARDINAL'), ('33', 'CARDINAL'), ('Darshan Institute of Engineering & Technology', 'ORG'), ('Decrypt Message  ', 'PERSON')]


============================ Sentence 53 =============================

: 


>> Tokens are: 
[:] 

>> PoS Tags are: 
[(':', 'PUNCT')] 

>> Dependency Tags are: 
[(':', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 54 =============================

M = Cd mod n Plaintext Message Cipher Message Privatekey For Ciphertext C = 20 M = 203 mod 33 M = 


>> Tokens are: 
[M, =, Cd, mod, n, Plaintext, Message, Cipher, Message, Privatekey, Ciphertext, C, =, 20, M, =, 203, mod, 33, M, =] 

>> PoS Tags are: 
[('M', 'PROPN'), ('=', 'PUNCT'), ('Cd', 'PROPN'), ('mod', 'ADP'), ('n', 'CCONJ'), ('Plaintext', 'PROPN'), ('Message', 'PROPN'), ('Cipher', 'PROPN'), ('Message', 'PROPN'), ('Privatekey', 'PROPN'), ('Ciphertext', 'PROPN'), ('C', 'PROPN'), ('=', 'PUNCT'), ('20', 'NUM'), ('M', 'PROPN'), ('=', 'SYM'), ('203', 'NUM'), ('mod', 'NOUN'), ('33', 'NUM'), ('M', 'NOUN'), ('=', 'PUNCT')] 

>> Dependency Tags are: 
[('M', 'nmod'), ('=', 'punct'), ('Cd', 'ROOT'), ('mod', 'prep'), ('n', 'cc'), ('Plaintext', 'conj'), ('Message', 'compound'), ('Cipher', 'compound'), ('Message', 'compound'), ('Privatekey', 'appos'), ('Ciphertext', 'pobj'), ('C', 'nmod'), ('=', 'punct'), ('20', 'compound'), ('M', 'compound'), ('=', 'quantmod'), ('203', 'nummod'), ('mod', 'appos'), ('33', 'nummod'), ('M', 'appos'), ('=', 'punct')]

>> Bigrams: 
[[M, =], [=, Cd], [Cd, mod], [mod, n], [n, Plaintext], [Plaintext, Message], [Message, Cipher], [Cipher, Message], [Message, Privatekey], [Privatekey, Ciphertext], [Ciphertext, C], [C, =], [=, 20], [20, M], [M, =], [=, 203], [203, mod], [mod, 33], [33, M], [M, =]]

>> Trigrams: 
[[M, =, Cd], [=, Cd, mod], [Cd, mod, n], [mod, n, Plaintext], [n, Plaintext, Message], [Plaintext, Message, Cipher], [Message, Cipher, Message], [Cipher, Message, Privatekey], [Message, Privatekey, Ciphertext], [Privatekey, Ciphertext, C], [Ciphertext, C, =], [C, =, 20], [=, 20, M], [20, M, =], [M, =, 203], [=, 203, mod], [203, mod, 33], [mod, 33, M], [33, M, =]]

>> Noun Phrases are: 
[M = Cd, Message Cipher Message Privatekey, Ciphertext, C = 20 M = 203 mod, 33 M]

>> Named Entities are: 
[('20', 'CARDINAL'), ('203', 'CARDINAL')]


============================ Sentence 55 =============================

[(201 mod 33) X (202 mod 33)] mod 33 M = (20 X 4) mod 33 = 80 mod 33 M = 14 PR = { d, n } , PR = { 3, 33 }  Unit-4 Asymmertic Ciphers                                                       Darshan Institute of Engineering & Technology   ‹#›   


>> Tokens are: 
[[, (, 201, mod, 33, ), X, (, 202, mod, 33, ), ], mod, 33, M, =, (, 20, X, 4, ), mod, 33, =, 80, mod, 33, M, =, 14, PR, =, {, d, ,, n, }, ,, PR, =, {, 3, ,, 33, },  , Unit-4, Asymmertic, Ciphers,                                                       , Darshan, Institute, Engineering, &, Technology,   , ‹#›,  ] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('(', 'PUNCT'), ('201', 'NUM'), ('mod', 'NOUN'), ('33', 'NUM'), (')', 'PUNCT'), ('X', 'PROPN'), ('(', 'PUNCT'), ('202', 'NUM'), ('mod', 'NOUN'), ('33', 'NUM'), (')', 'PUNCT'), (']', 'PUNCT'), ('mod', 'ADJ'), ('33', 'NUM'), ('M', 'NOUN'), ('=', 'PUNCT'), ('(', 'PUNCT'), ('20', 'NUM'), ('X', 'NOUN'), ('4', 'NUM'), (')', 'PUNCT'), ('mod', 'NOUN'), ('33', 'NUM'), ('=', 'SYM'), ('80', 'NUM'), ('mod', 'NOUN'), ('33', 'NUM'), ('M', 'NOUN'), ('=', 'SYM'), ('14', 'NUM'), ('PR', 'NOUN'), ('=', 'SYM'), ('{', 'PUNCT'), ('d', 'NOUN'), (',', 'PUNCT'), ('n', 'CCONJ'), ('}', 'PUNCT'), (',', 'PUNCT'), ('PR', 'NOUN'), ('=', 'NUM'), ('{', 'PUNCT'), ('3', 'NUM'), (',', 'PUNCT'), ('33', 'NUM'), ('}', 'PUNCT'), (' ', 'SPACE'), ('Unit-4', 'PROPN'), ('Asymmertic', 'PROPN'), ('Ciphers', 'PROPN'), ('                                                      ', 'SPACE'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('Engineering', 'PROPN'), ('&', 'CCONJ'), ('Technology', 'PROPN'), ('  ', 'SPACE'), ('‹#›', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('[', 'nmod'), ('(', 'punct'), ('201', 'nummod'), ('mod', 'nmod'), ('33', 'nummod'), (')', 'punct'), ('X', 'ccomp'), ('(', 'punct'), ('202', 'nummod'), ('mod', 'appos'), ('33', 'appos'), (')', 'punct'), (']', 'punct'), ('mod', 'prep'), ('33', 'nummod'), ('M', 'pobj'), ('=', 'punct'), ('(', 'punct'), ('20', 'nummod'), ('X', 'appos'), ('4', 'npadvmod'), (')', 'punct'), ('mod', 'appos'), ('33', 'quantmod'), ('=', 'punct'), ('80', 'nummod'), ('mod', 'appos'), ('33', 'nummod'), ('M', 'nmod'), ('=', 'punct'), ('14', 'nummod'), ('PR', 'appos'), ('=', 'punct'), ('{', 'punct'), ('d', 'appos'), (',', 'punct'), ('n', 'cc'), ('}', 'punct'), (',', 'punct'), ('PR', 'nmod'), ('=', 'punct'), ('{', 'punct'), ('3', 'appos'), (',', 'punct'), ('33', 'nummod'), ('}', 'punct'), (' ', 'appos'), ('Unit-4', 'compound'), ('Asymmertic', 'compound'), ('Ciphers', 'appos'), ('                                                      ', 'compound'), ('Darshan', 'compound'), ('Institute', 'appos'), ('Engineering', 'pobj'), ('&', 'cc'), ('Technology', 'conj'), ('  ', 'nsubj'), ('‹#›', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[[, (], [(, 201], [201, mod], [mod, 33], [33, )], [), X], [X, (], [(, 202], [202, mod], [mod, 33], [33, )], [), ]], [], mod], [mod, 33], [33, M], [M, =], [=, (], [(, 20], [20, X], [X, 4], [4, )], [), mod], [mod, 33], [33, =], [=, 80], [80, mod], [mod, 33], [33, M], [M, =], [=, 14], [14, PR], [PR, =], [=, {], [{, d], [d, ,], [,, n], [n, }], [}, ,], [,, PR], [PR, =], [=, {], [{, 3], [3, ,], [,, 33], [33, }], [},  ], [ , Unit-4], [Unit-4, Asymmertic], [Asymmertic, Ciphers], [Ciphers,                                                       ], [                                                      , Darshan], [Darshan, Institute], [Institute, Engineering], [Engineering, &], [&, Technology], [Technology,   ], [  , ‹#›], [‹#›,  ]]

>> Trigrams: 
[[[, (, 201], [(, 201, mod], [201, mod, 33], [mod, 33, )], [33, ), X], [), X, (], [X, (, 202], [(, 202, mod], [202, mod, 33], [mod, 33, )], [33, ), ]], [), ], mod], [], mod, 33], [mod, 33, M], [33, M, =], [M, =, (], [=, (, 20], [(, 20, X], [20, X, 4], [X, 4, )], [4, ), mod], [), mod, 33], [mod, 33, =], [33, =, 80], [=, 80, mod], [80, mod, 33], [mod, 33, M], [33, M, =], [M, =, 14], [=, 14, PR], [14, PR, =], [PR, =, {], [=, {, d], [{, d, ,], [d, ,, n], [,, n, }], [n, }, ,], [}, ,, PR], [,, PR, =], [PR, =, {], [=, {, 3], [{, 3, ,], [3, ,, 33], [,, 33, }], [33, },  ], [},  , Unit-4], [ , Unit-4, Asymmertic], [Unit-4, Asymmertic, Ciphers], [Asymmertic, Ciphers,                                                       ], [Ciphers,                                                       , Darshan], [                                                      , Darshan, Institute], [Darshan, Institute, Engineering], [Institute, Engineering, &], [Engineering, &, Technology], [&, Technology,   ], [Technology,   , ‹#›], [  , ‹#›,  ]]

>> Noun Phrases are: 
[(202 mod, 33 M, 20 X, mod, 33 = 80 mod, 33 M = 14 PR, d, Unit-4 Asymmertic Ciphers,                                                       Darshan Institute, Engineering, Technology]

>> Named Entities are: 
[('201', 'CARDINAL'), ('202', 'CARDINAL'), ('33', 'CARDINAL'), ('33', 'CARDINAL'), ('20', 'CARDINAL'), ('33', 'CARDINAL'), ('80', 'CARDINAL'), ('33', 'CARDINAL'), ('14', 'CARDINAL'), ('3', 'CARDINAL'), ('33', 'CARDINAL'), ('Darshan Institute of Engineering & Technology', 'ORG')]


============================ Sentence 56 =============================

Example RSA Algorithm 147 mod 33 = 20   


>> Tokens are: 
[Example, RSA, Algorithm, 147, mod, 33, =, 20,  ] 

>> PoS Tags are: 
[('Example', 'PROPN'), ('RSA', 'PROPN'), ('Algorithm', 'PROPN'), ('147', 'NUM'), ('mod', 'NOUN'), ('33', 'NUM'), ('=', 'SYM'), ('20', 'NUM'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Example', 'nmod'), ('RSA', 'compound'), ('Algorithm', 'ROOT'), ('147', 'nummod'), ('mod', 'appos'), ('33', 'quantmod'), ('=', 'punct'), ('20', 'nummod'), (' ', 'appos')]

>> Bigrams: 
[[Example, RSA], [RSA, Algorithm], [Algorithm, 147], [147, mod], [mod, 33], [33, =], [=, 20], [20,  ]]

>> Trigrams: 
[[Example, RSA, Algorithm], [RSA, Algorithm, 147], [Algorithm, 147, mod], [147, mod, 33], [mod, 33, =], [33, =, 20], [=, 20,  ]]

>> Noun Phrases are: 
[Example RSA Algorithm, 147 mod]

>> Named Entities are: 
[('147', 'CARDINAL'), ('33', 'CARDINAL'), ('20', 'CARDINAL')]


============================ Sentence 57 =============================

Plaintext 14 Plaintext 14 203 mod 33 = 14  Ciphertext 20 PU = 7, 33 PR = 3, 33 Encryption Decryption      Unit-4 


>> Tokens are: 
[Plaintext, 14, Plaintext, 14, 203, mod, 33, =, 14,  , Ciphertext, 20, PU, =, 7, ,, 33, PR, =, 3, ,, 33, Encryption, Decryption,      , Unit-4] 

>> PoS Tags are: 
[('Plaintext', 'NOUN'), ('14', 'NUM'), ('Plaintext', 'PROPN'), ('14', 'NUM'), ('203', 'NUM'), ('mod', 'NOUN'), ('33', 'NUM'), ('=', 'SYM'), ('14', 'NUM'), (' ', 'SPACE'), ('Ciphertext', 'VERB'), ('20', 'NUM'), ('PU', 'PROPN'), ('=', 'SYM'), ('7', 'NUM'), (',', 'PUNCT'), ('33', 'NUM'), ('PR', 'NOUN'), ('=', 'SYM'), ('3', 'NUM'), (',', 'PUNCT'), ('33', 'NUM'), ('Encryption', 'PROPN'), ('Decryption', 'PROPN'), ('     ', 'SPACE'), ('Unit-4', 'PROPN')] 

>> Dependency Tags are: 
[('Plaintext', 'nmod'), ('14', 'nummod'), ('Plaintext', 'ROOT'), ('14', 'compound'), ('203', 'nummod'), ('mod', 'quantmod'), ('33', 'appos'), ('=', 'quantmod'), ('14', 'nummod'), (' ', 'nummod'), ('Ciphertext', 'npadvmod'), ('20', 'nummod'), ('PU', 'appos'), ('=', 'punct'), ('7', 'appos'), (',', 'punct'), ('33', 'nummod'), ('PR', 'appos'), ('=', 'punct'), ('3', 'appos'), (',', 'punct'), ('33', 'nummod'), ('Encryption', 'compound'), ('Decryption', 'compound'), ('     ', 'appos'), ('Unit-4', 'punct')]

>> Bigrams: 
[[Plaintext, 14], [14, Plaintext], [Plaintext, 14], [14, 203], [203, mod], [mod, 33], [33, =], [=, 14], [14,  ], [ , Ciphertext], [Ciphertext, 20], [20, PU], [PU, =], [=, 7], [7, ,], [,, 33], [33, PR], [PR, =], [=, 3], [3, ,], [,, 33], [33, Encryption], [Encryption, Decryption], [Decryption,      ], [     , Unit-4]]

>> Trigrams: 
[[Plaintext, 14, Plaintext], [14, Plaintext, 14], [Plaintext, 14, 203], [14, 203, mod], [203, mod, 33], [mod, 33, =], [33, =, 14], [=, 14,  ], [14,  , Ciphertext], [ , Ciphertext, 20], [Ciphertext, 20, PU], [20, PU, =], [PU, =, 7], [=, 7, ,], [7, ,, 33], [,, 33, PR], [33, PR, =], [PR, =, 3], [=, 3, ,], [3, ,, 33], [,, 33, Encryption], [33, Encryption, Decryption], [Encryption, Decryption,      ], [Decryption,      , Unit-4]]

>> Noun Phrases are: 
[Plaintext 14 Plaintext, 20 PU, 33 PR]

>> Named Entities are: 
[('33', 'CARDINAL'), ('14', 'CARDINAL'), ('7', 'CARDINAL'), ('33', 'CARDINAL'), ('3', 'CARDINAL')]


============================ Sentence 58 =============================

Asymmertic Ciphers                                                       Darshan Institute of Engineering & Technology   ‹#›   


>> Tokens are: 
[Asymmertic, Ciphers,                                                       , Darshan, Institute, Engineering, &, Technology,   , ‹#›,  ] 

>> PoS Tags are: 
[('Asymmertic', 'PROPN'), ('Ciphers', 'PROPN'), ('                                                      ', 'SPACE'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('Engineering', 'PROPN'), ('&', 'CCONJ'), ('Technology', 'PROPN'), ('  ', 'SPACE'), ('‹#›', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Asymmertic', 'compound'), ('Ciphers', 'nsubj'), ('                                                      ', 'compound'), ('Darshan', 'compound'), ('Institute', 'appos'), ('Engineering', 'pobj'), ('&', 'cc'), ('Technology', 'conj'), ('  ', 'conj'), ('‹#›', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[Asymmertic, Ciphers], [Ciphers,                                                       ], [                                                      , Darshan], [Darshan, Institute], [Institute, Engineering], [Engineering, &], [&, Technology], [Technology,   ], [  , ‹#›], [‹#›,  ]]

>> Trigrams: 
[[Asymmertic, Ciphers,                                                       ], [Ciphers,                                                       , Darshan], [                                                      , Darshan, Institute], [Darshan, Institute, Engineering], [Institute, Engineering, &], [Engineering, &, Technology], [&, Technology,   ], [Technology,   , ‹#›], [  , ‹#›,  ]]

>> Noun Phrases are: 
[Asymmertic Ciphers,                                                       Darshan Institute, Engineering, Technology]

>> Named Entities are: 
[('Darshan Institute of Engineering & Technology', 'ORG')]


============================ Sentence 59 =============================

RSA Example Find n, φ(n), e, d for p=7 and q= 19 then demonstrate encryption and decryption for M = 6 n = p * q = 7 * 19 = 133 φ(n) = 


>> Tokens are: 
[RSA, Example, Find, n, ,, φ(n, ), ,, e, ,, d, p=7, q=, 19, demonstrate, encryption, decryption, M, =, 6, n, =, p, *, q, =, 7, *, 19, =, 133, φ(n, ), =] 

>> PoS Tags are: 
[('RSA', 'PROPN'), ('Example', 'PROPN'), ('Find', 'PROPN'), ('n', 'CCONJ'), (',', 'PUNCT'), ('φ(n', 'PROPN'), (')', 'PUNCT'), (',', 'PUNCT'), ('e', 'X'), (',', 'PUNCT'), ('d', 'X'), ('p=7', 'NOUN'), ('q=', 'NUM'), ('19', 'NUM'), ('demonstrate', 'VERB'), ('encryption', 'NOUN'), ('decryption', 'NOUN'), ('M', 'PROPN'), ('=', 'SYM'), ('6', 'NUM'), ('n', 'NUM'), ('=', 'NUM'), ('p', 'X'), ('*', 'PUNCT'), ('q', 'NOUN'), ('=', 'SYM'), ('7', 'NUM'), ('*', 'SYM'), ('19', 'NUM'), ('=', 'SYM'), ('133', 'NUM'), ('φ(n', 'PROPN'), (')', 'PUNCT'), ('=', 'PUNCT')] 

>> Dependency Tags are: 
[('RSA', 'compound'), ('Example', 'compound'), ('Find', 'nsubj'), ('n', 'cc'), (',', 'punct'), ('φ(n', 'npadvmod'), (')', 'punct'), (',', 'punct'), ('e', 'appos'), (',', 'punct'), ('d', 'appos'), ('p=7', 'pobj'), ('q=', 'quantmod'), ('19', 'conj'), ('demonstrate', 'ROOT'), ('encryption', 'dobj'), ('decryption', 'conj'), ('M', 'pobj'), ('=', 'punct'), ('6', 'dep'), ('n', 'quantmod'), ('=', 'punct'), ('p', 'quantmod'), ('*', 'punct'), ('q', 'prep'), ('=', 'punct'), ('7', 'quantmod'), ('*', 'punct'), ('19', 'quantmod'), ('=', 'punct'), ('133', 'nummod'), ('φ(n', 'dobj'), (')', 'punct'), ('=', 'punct')]

>> Bigrams: 
[[RSA, Example], [Example, Find], [Find, n], [n, ,], [,, φ(n], [φ(n, )], [), ,], [,, e], [e, ,], [,, d], [d, p=7], [p=7, q=], [q=, 19], [19, demonstrate], [demonstrate, encryption], [encryption, decryption], [decryption, M], [M, =], [=, 6], [6, n], [n, =], [=, p], [p, *], [*, q], [q, =], [=, 7], [7, *], [*, 19], [19, =], [=, 133], [133, φ(n], [φ(n, )], [), =]]

>> Trigrams: 
[[RSA, Example, Find], [Example, Find, n], [Find, n, ,], [n, ,, φ(n], [,, φ(n, )], [φ(n, ), ,], [), ,, e], [,, e, ,], [e, ,, d], [,, d, p=7], [d, p=7, q=], [p=7, q=, 19], [q=, 19, demonstrate], [19, demonstrate, encryption], [demonstrate, encryption, decryption], [encryption, decryption, M], [decryption, M, =], [M, =, 6], [=, 6, n], [6, n, =], [n, =, p], [=, p, *], [p, *, q], [*, q, =], [q, =, 7], [=, 7, *], [7, *, 19], [*, 19, =], [19, =, 133], [=, 133, φ(n], [133, φ(n, )], [φ(n, ), =]]

>> Noun Phrases are: 
[RSA Example Find, p=7, encryption, decryption, M, = 7 * 19 = 133 φ(n]

>> Named Entities are: 
[('RSA Example Find n', 'ORG'), ('19', 'CARDINAL'), ('6', 'CARDINAL'), ('7', 'CARDINAL'), ('19', 'CARDINAL')]


============================ Sentence 60 =============================

( p – 1 ) * 


>> Tokens are: 
[(, p, –, 1, ), *] 

>> PoS Tags are: 
[('(', 'PUNCT'), ('p', 'NOUN'), ('–', 'PUNCT'), ('1', 'NUM'), (')', 'PUNCT'), ('*', 'PUNCT')] 

>> Dependency Tags are: 
[('(', 'punct'), ('p', 'dep'), ('–', 'punct'), ('1', 'ROOT'), (')', 'punct'), ('*', 'punct')]

>> Bigrams: 
[[(, p], [p, –], [–, 1], [1, )], [), *]]

>> Trigrams: 
[[(, p, –], [p, –, 1], [–, 1, )], [1, ), *]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 61 =============================

( q – 1) 


>> Tokens are: 
[(, q, –, 1, )] 

>> PoS Tags are: 
[('(', 'PUNCT'), ('q', 'NOUN'), ('–', 'PUNCT'), ('1', 'NUM'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('(', 'punct'), ('q', 'dep'), ('–', 'punct'), ('1', 'ROOT'), (')', 'punct')]

>> Bigrams: 
[[(, q], [q, –], [–, 1], [1, )]]

>> Trigrams: 
[[(, q, –], [q, –, 1], [–, 1, )]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('1', 'CARDINAL')]


============================ Sentence 62 =============================

= 


>> Tokens are: 
[=] 

>> PoS Tags are: 
[('=', 'PUNCT')] 

>> Dependency Tags are: 
[('=', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 63 =============================

108 


>> Tokens are: 
[108] 

>> PoS Tags are: 
[('108', 'NUM')] 

>> Dependency Tags are: 
[('108', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('108', 'CARDINAL')]


============================ Sentence 64 =============================

Finding e relatively prime to 108 e = 2 => GCD( 2, 108 ) = 


>> Tokens are: 
[Finding, e, relatively, prime, 108, e, =, 2, =, >, GCD, (, 2, ,, 108, ), =] 

>> PoS Tags are: 
[('Finding', 'VERB'), ('e', 'NOUN'), ('relatively', 'ADV'), ('prime', 'ADJ'), ('108', 'NUM'), ('e', 'NOUN'), ('=', 'SYM'), ('2', 'NUM'), ('=', 'PUNCT'), ('>', 'X'), ('GCD', 'PROPN'), ('(', 'PUNCT'), ('2', 'NUM'), (',', 'PUNCT'), ('108', 'NUM'), (')', 'PUNCT'), ('=', 'SYM')] 

>> Dependency Tags are: 
[('Finding', 'nsubj'), ('e', 'dobj'), ('relatively', 'advmod'), ('prime', 'ROOT'), ('108', 'nummod'), ('e', 'pobj'), ('=', 'pobj'), ('2', 'npadvmod'), ('=', 'punct'), ('>', 'ccomp'), ('GCD', 'npadvmod'), ('(', 'punct'), ('2', 'appos'), (',', 'punct'), ('108', 'npadvmod'), (')', 'punct'), ('=', 'punct')]

>> Bigrams: 
[[Finding, e], [e, relatively], [relatively, prime], [prime, 108], [108, e], [e, =], [=, 2], [2, =], [=, >], [>, GCD], [GCD, (], [(, 2], [2, ,], [,, 108], [108, )], [), =]]

>> Trigrams: 
[[Finding, e, relatively], [e, relatively, prime], [relatively, prime, 108], [prime, 108, e], [108, e, =], [e, =, 2], [=, 2, =], [2, =, >], [=, >, GCD], [>, GCD, (], [GCD, (, 2], [(, 2, ,], [2, ,, 108], [,, 108, )], [108, ), =]]

>> Noun Phrases are: 
[e, 108 e]

>> Named Entities are: 
[('108', 'CARDINAL'), ('2', 'CARDINAL'), ('GCD', 'ORG'), ('2', 'CARDINAL'), ('108', 'CARDINAL')]


============================ Sentence 65 =============================

2 (no) e = 3 => GCD( 3, 108 ) = 


>> Tokens are: 
[2, (, ), e, =, 3, =, >, GCD, (, 3, ,, 108, ), =] 

>> PoS Tags are: 
[('2', 'NUM'), ('(', 'PUNCT'), (')', 'PUNCT'), ('e', 'NOUN'), ('=', 'SYM'), ('3', 'NUM'), ('=', 'SYM'), ('>', 'X'), ('GCD', 'PROPN'), ('(', 'PUNCT'), ('3', 'NUM'), (',', 'PUNCT'), ('108', 'NUM'), (')', 'PUNCT'), ('=', 'SYM')] 

>> Dependency Tags are: 
[('2', 'nmod'), ('(', 'punct'), (')', 'punct'), ('e', 'nsubj'), ('=', 'dobj'), ('3', 'appos'), ('=', 'punct'), ('>', 'prep'), ('GCD', 'ROOT'), ('(', 'punct'), ('3', 'appos'), (',', 'punct'), ('108', 'appos'), (')', 'punct'), ('=', 'punct')]

>> Bigrams: 
[[2, (], [(, )], [), e], [e, =], [=, 3], [3, =], [=, >], [>, GCD], [GCD, (], [(, 3], [3, ,], [,, 108], [108, )], [), =]]

>> Trigrams: 
[[2, (, )], [(, ), e], [), e, =], [e, =, 3], [=, 3, =], [3, =, >], [=, >, GCD], [>, GCD, (], [GCD, (, 3], [(, 3, ,], [3, ,, 108], [,, 108, )], [108, ), =]]

>> Noun Phrases are: 
[2 (no) e]

>> Named Entities are: 
[('2', 'CARDINAL'), ('3', 'CARDINAL'), ('GCD', 'ORG'), ('3', 'CARDINAL'), ('108', 'CARDINAL')]


============================ Sentence 66 =============================

3 (no) e = 5 => GCD( 5, 108 ) = 


>> Tokens are: 
[3, (, ), e, =, 5, =, >, GCD, (, 5, ,, 108, ), =] 

>> PoS Tags are: 
[('3', 'NUM'), ('(', 'PUNCT'), (')', 'PUNCT'), ('e', 'NOUN'), ('=', 'SYM'), ('5', 'NUM'), ('=', 'SYM'), ('>', 'X'), ('GCD', 'PROPN'), ('(', 'PUNCT'), ('5', 'NUM'), (',', 'PUNCT'), ('108', 'NUM'), (')', 'PUNCT'), ('=', 'SYM')] 

>> Dependency Tags are: 
[('3', 'nummod'), ('(', 'punct'), (')', 'punct'), ('e', 'ROOT'), ('=', 'appos'), ('5', 'nummod'), ('=', 'punct'), ('>', 'prep'), ('GCD', 'appos'), ('(', 'punct'), ('5', 'appos'), (',', 'punct'), ('108', 'npadvmod'), (')', 'punct'), ('=', 'punct')]

>> Bigrams: 
[[3, (], [(, )], [), e], [e, =], [=, 5], [5, =], [=, >], [>, GCD], [GCD, (], [(, 5], [5, ,], [,, 108], [108, )], [), =]]

>> Trigrams: 
[[3, (, )], [(, ), e], [), e, =], [e, =, 5], [=, 5, =], [5, =, >], [=, >, GCD], [>, GCD, (], [GCD, (, 5], [(, 5, ,], [5, ,, 108], [,, 108, )], [108, ), =]]

>> Noun Phrases are: 
[3 (no) e, GCD]

>> Named Entities are: 
[('3', 'CARDINAL'), ('5', 'CARDINAL'), ('GCD', 'ORG'), ('5', 'CARDINAL'), ('108', 'CARDINAL')]


============================ Sentence 67 =============================

1 (Yes) 


>> Tokens are: 
[1, (, Yes, )] 

>> PoS Tags are: 
[('1', 'NUM'), ('(', 'PUNCT'), ('Yes', 'INTJ'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('1', 'dep'), ('(', 'punct'), ('Yes', 'ROOT'), (')', 'punct')]

>> Bigrams: 
[[1, (], [(, Yes], [Yes, )]]

>> Trigrams: 
[[1, (, Yes], [(, Yes, )]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('1', 'CARDINAL')]


============================ Sentence 68 =============================

Finding d such that (d * e ) mod φ(n) = 


>> Tokens are: 
[Finding, d, (, d, *, e, ), mod, φ(n, ), =] 

>> PoS Tags are: 
[('Finding', 'VERB'), ('d', 'X'), ('(', 'PUNCT'), ('d', 'X'), ('*', 'SYM'), ('e', 'NOUN'), (')', 'PUNCT'), ('mod', 'PROPN'), ('φ(n', 'PROPN'), (')', 'PUNCT'), ('=', 'SYM')] 

>> Dependency Tags are: 
[('Finding', 'ROOT'), ('d', 'dobj'), ('(', 'punct'), ('d', 'dep'), ('*', 'punct'), ('e', 'nmod'), (')', 'punct'), ('mod', 'compound'), ('φ(n', 'dobj'), (')', 'punct'), ('=', 'punct')]

>> Bigrams: 
[[Finding, d], [d, (], [(, d], [d, *], [*, e], [e, )], [), mod], [mod, φ(n], [φ(n, )], [), =]]

>> Trigrams: 
[[Finding, d, (], [d, (, d], [(, d, *], [d, *, e], [*, e, )], [e, ), mod], [), mod, φ(n], [mod, φ(n, )], [φ(n, ), =]]

>> Noun Phrases are: 
[such that (d * e ) mod φ(n]

>> Named Entities are: 
[]


============================ Sentence 69 =============================

1  We can rewrite this as d = (1 + j . 


>> Tokens are: 
[1,  , rewrite, d, =, (, 1, +, j, .] 

>> PoS Tags are: 
[('1', 'NUM'), (' ', 'SPACE'), ('rewrite', 'VERB'), ('d', 'NOUN'), ('=', 'PUNCT'), ('(', 'PUNCT'), ('1', 'NUM'), ('+', 'NUM'), ('j', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('1', 'nummod'), (' ', 'dep'), ('rewrite', 'ROOT'), ('d', 'pobj'), ('=', 'punct'), ('(', 'punct'), ('1', 'nummod'), ('+', 'prep'), ('j', 'npadvmod'), ('.', 'punct')]

>> Bigrams: 
[[1,  ], [ , rewrite], [rewrite, d], [d, =], [=, (], [(, 1], [1, +], [+, j], [j, .]]

>> Trigrams: 
[[1,  , rewrite], [ , rewrite, d], [rewrite, d, =], [d, =, (], [=, (, 1], [(, 1, +], [1, +, j], [+, j, .]]

>> Noun Phrases are: 
[We, d]

>> Named Entities are: 
[('1', 'CARDINAL')]


============================ Sentence 70 =============================

φ(n)) / 


>> Tokens are: 
[φ(n, ), ), /] 

>> PoS Tags are: 
[('φ(n', 'PROPN'), (')', 'PUNCT'), (')', 'PUNCT'), ('/', 'SYM')] 

>> Dependency Tags are: 
[('φ(n', 'ROOT'), (')', 'punct'), (')', 'punct'), ('/', 'punct')]

>> Bigrams: 
[[φ(n, )], [), )], [), /]]

>> Trigrams: 
[[φ(n, ), )], [), ), /]]

>> Noun Phrases are: 
[φ(n]

>> Named Entities are: 
[]


============================ Sentence 71 =============================

e j = 0  => d = 1 / 5 = 0.2  integer ? 


>> Tokens are: 
[e, j, =, 0,  , =, >, d, =, 1, /, 5, =, 0.2, , integer, ?] 

>> PoS Tags are: 
[('e', 'PROPN'), ('j', 'NOUN'), ('=', 'SYM'), ('0', 'NUM'), (' ', 'SPACE'), ('=', 'PUNCT'), ('>', 'X'), ('d', 'PUNCT'), ('=', 'SYM'), ('1', 'NUM'), ('/', 'SYM'), ('5', 'NUM'), ('=', 'SYM'), ('0.2', 'NUM'), ('\uf0df', 'VERB'), ('integer', 'NOUN'), ('?', 'PUNCT')] 

>> Dependency Tags are: 
[('e', 'compound'), ('j', 'quantmod'), ('=', 'prep'), ('0', 'punct'), (' ', 'appos'), ('=', 'punct'), ('>', 'appos'), ('d', 'quantmod'), ('=', 'quantmod'), ('1', 'quantmod'), ('/', 'punct'), ('5', 'quantmod'), ('=', 'punct'), ('0.2', 'nummod'), ('\uf0df', 'compound'), ('integer', 'ROOT'), ('?', 'punct')]

>> Bigrams: 
[[e, j], [j, =], [=, 0], [0,  ], [ , =], [=, >], [>, d], [d, =], [=, 1], [1, /], [/, 5], [5, =], [=, 0.2], [0.2, ], [, integer], [integer, ?]]

>> Trigrams: 
[[e, j, =], [j, =, 0], [=, 0,  ], [0,  , =], [ , =, >], [=, >, d], [>, d, =], [d, =, 1], [=, 1, /], [1, /, 5], [/, 5, =], [5, =, 0.2], [=, 0.2, ], [0.2, , integer], [, integer, ?]]

>> Noun Phrases are: 
[e j = 0  => d = 1 / 5 = 0.2  integer]

>> Named Entities are: 
[('0.2', 'CARDINAL')]


============================ Sentence 72 =============================

(no) j = 1  => 


>> Tokens are: 
[(, ), j, =, 1,  , =, >] 

>> PoS Tags are: 
[('(', 'PUNCT'), (')', 'PUNCT'), ('j', 'NOUN'), ('=', 'SYM'), ('1', 'NUM'), (' ', 'SPACE'), ('=', 'PUNCT'), ('>', 'X')] 

>> Dependency Tags are: 
[('(', 'punct'), (')', 'punct'), ('j', 'dobj'), ('=', 'quantmod'), ('1', 'nummod'), (' ', 'ROOT'), ('=', 'punct'), ('>', 'npadvmod')]

>> Bigrams: 
[[(, )], [), j], [j, =], [=, 1], [1,  ], [ , =], [=, >]]

>> Trigrams: 
[[(, ), j], [), j, =], [j, =, 1], [=, 1,  ], [1,  , =], [ , =, >]]

>> Noun Phrases are: 
[j]

>> Named Entities are: 
[('1', 'CARDINAL')]


============================ Sentence 73 =============================

d = 109 / 5 = 21.8  integer ? 


>> Tokens are: 
[d, =, 109, /, 5, =, 21.8, , integer, ?] 

>> PoS Tags are: 
[('d', 'PUNCT'), ('=', 'PUNCT'), ('109', 'NUM'), ('/', 'SYM'), ('5', 'NUM'), ('=', 'SYM'), ('21.8', 'NUM'), ('\uf0df', 'NOUN'), ('integer', 'NOUN'), ('?', 'PUNCT')] 

>> Dependency Tags are: 
[('d', 'meta'), ('=', 'quantmod'), ('109', 'quantmod'), ('/', 'punct'), ('5', 'quantmod'), ('=', 'quantmod'), ('21.8', 'nummod'), ('\uf0df', 'compound'), ('integer', 'ROOT'), ('?', 'punct')]

>> Bigrams: 
[[d, =], [=, 109], [109, /], [/, 5], [5, =], [=, 21.8], [21.8, ], [, integer], [integer, ?]]

>> Trigrams: 
[[d, =, 109], [=, 109, /], [109, /, 5], [/, 5, =], [5, =, 21.8], [=, 21.8, ], [21.8, , integer], [, integer, ?]]

>> Noun Phrases are: 
[d = 109 / 5 = 21.8  integer]

>> Named Entities are: 
[('109', 'CARDINAL'), ('5', 'CARDINAL'), ('21.8', 'CARDINAL')]


============================ Sentence 74 =============================

(no) j = 2  => d = 217 / 5 = 43.4  integer ? 


>> Tokens are: 
[(, ), j, =, 2,  , =, >, d, =, 217, /, 5, =, 43.4, , integer, ?] 

>> PoS Tags are: 
[('(', 'PUNCT'), (')', 'PUNCT'), ('j', 'NOUN'), ('=', 'SYM'), ('2', 'NUM'), (' ', 'SPACE'), ('=', 'PUNCT'), ('>', 'X'), ('d', 'PUNCT'), ('=', 'PUNCT'), ('217', 'NUM'), ('/', 'SYM'), ('5', 'NUM'), ('=', 'SYM'), ('43.4', 'NUM'), ('\uf0df', 'VERB'), ('integer', 'NOUN'), ('?', 'PUNCT')] 

>> Dependency Tags are: 
[('(', 'punct'), (')', 'punct'), ('j', 'ROOT'), ('=', 'quantmod'), ('2', 'appos'), (' ', 'appos'), ('=', 'punct'), ('>', 'appos'), ('d', 'prep'), ('=', 'quantmod'), ('217', 'quantmod'), ('/', 'punct'), ('5', 'prep'), ('=', 'compound'), ('43.4', 'nummod'), ('\uf0df', 'compound'), ('integer', 'pobj'), ('?', 'punct')]

>> Bigrams: 
[[(, )], [), j], [j, =], [=, 2], [2,  ], [ , =], [=, >], [>, d], [d, =], [=, 217], [217, /], [/, 5], [5, =], [=, 43.4], [43.4, ], [, integer], [integer, ?]]

>> Trigrams: 
[[(, ), j], [), j, =], [j, =, 2], [=, 2,  ], [2,  , =], [ , =, >], [=, >, d], [>, d, =], [d, =, 217], [=, 217, /], [217, /, 5], [/, 5, =], [5, =, 43.4], [=, 43.4, ], [43.4, , integer], [, integer, ?]]

>> Noun Phrases are: 
[(no) j, = 217 / 5 = 43.4  integer]

>> Named Entities are: 
[('2', 'CARDINAL'), ('43.4', 'CARDINAL')]


============================ Sentence 75 =============================

(no) j = 3  => d = 325 / 5 = 65 integer ? 


>> Tokens are: 
[(, ), j, =, 3,  , =, >, d, =, 325, /, 5, =, 65, integer, ?] 

>> PoS Tags are: 
[('(', 'PUNCT'), (')', 'PUNCT'), ('j', 'NOUN'), ('=', 'SYM'), ('3', 'NUM'), (' ', 'SPACE'), ('=', 'PUNCT'), ('>', 'X'), ('d', 'PUNCT'), ('=', 'SYM'), ('325', 'NUM'), ('/', 'SYM'), ('5', 'NUM'), ('=', 'SYM'), ('65', 'NUM'), ('integer', 'NOUN'), ('?', 'PUNCT')] 

>> Dependency Tags are: 
[('(', 'punct'), (')', 'punct'), ('j', 'appos'), ('=', 'quantmod'), ('3', 'nummod'), (' ', 'dobj'), ('=', 'punct'), ('>', 'punct'), ('d', 'punct'), ('=', 'pobj'), ('325', 'quantmod'), ('/', 'punct'), ('5', 'prep'), ('=', 'punct'), ('65', 'nummod'), ('integer', 'dobj'), ('?', 'punct')]

>> Bigrams: 
[[(, )], [), j], [j, =], [=, 3], [3,  ], [ , =], [=, >], [>, d], [d, =], [=, 325], [325, /], [/, 5], [5, =], [=, 65], [65, integer], [integer, ?]]

>> Trigrams: 
[[(, ), j], [), j, =], [j, =, 3], [=, 3,  ], [3,  , =], [ , =, >], [=, >, d], [>, d, =], [d, =, 325], [=, 325, /], [325, /, 5], [/, 5, =], [5, =, 65], [=, 65, integer], [65, integer, ?]]

>> Noun Phrases are: 
[j, 325 / 5 = 65 integer]

>> Named Entities are: 
[('3', 'CARDINAL'), ('325', 'CARDINAL'), ('65', 'CARDINAL')]


============================ Sentence 76 =============================

(yes) Public key :  PU = { e, n } = {5, 133} Private key :  PR = { d, n } = {65, 133}  Unit-4 Asymmertic Ciphers                                                       Darshan Institute of Engineering & Technology   ‹#›   


>> Tokens are: 
[(, yes, ), Public, key, :,  , PU, =, {, e, ,, n, }, =, {, 5, ,, 133, }, Private, key, :,  , PR, =, {, d, ,, n, }, =, {, 65, ,, 133, },  , Unit-4, Asymmertic, Ciphers,                                                       , Darshan, Institute, Engineering, &, Technology,   , ‹#›,  ] 

>> PoS Tags are: 
[('(', 'PUNCT'), ('yes', 'INTJ'), (')', 'PUNCT'), ('Public', 'ADJ'), ('key', 'NOUN'), (':', 'PUNCT'), (' ', 'SPACE'), ('PU', 'PROPN'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('e', 'NOUN'), (',', 'PUNCT'), ('n', 'CCONJ'), ('}', 'PUNCT'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('5', 'NUM'), (',', 'PUNCT'), ('133', 'NUM'), ('}', 'PUNCT'), ('Private', 'ADJ'), ('key', 'NOUN'), (':', 'PUNCT'), (' ', 'SPACE'), ('PR', 'NOUN'), ('=', 'NUM'), ('{', 'PUNCT'), ('d', 'NOUN'), (',', 'PUNCT'), ('n', 'CCONJ'), ('}', 'PUNCT'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('65', 'NUM'), (',', 'PUNCT'), ('133', 'NUM'), ('}', 'PUNCT'), (' ', 'SPACE'), ('Unit-4', 'PROPN'), ('Asymmertic', 'PROPN'), ('Ciphers', 'PROPN'), ('                                                      ', 'SPACE'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('Engineering', 'PROPN'), ('&', 'CCONJ'), ('Technology', 'PROPN'), ('  ', 'SPACE'), ('‹#›', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('(', 'punct'), ('yes', 'intj'), (')', 'punct'), ('Public', 'amod'), ('key', 'ccomp'), (':', 'punct'), (' ', 'compound'), ('PU', 'nsubj'), ('=', 'punct'), ('{', 'punct'), ('e', 'appos'), (',', 'punct'), ('n', 'cc'), ('}', 'punct'), ('=', 'appos'), ('{', 'punct'), ('5', 'appos'), (',', 'punct'), ('133', 'nummod'), ('}', 'punct'), ('Private', 'amod'), ('key', 'appos'), (':', 'punct'), (' ', 'compound'), ('PR', 'appos'), ('=', 'punct'), ('{', 'punct'), ('d', 'appos'), (',', 'punct'), ('n', 'cc'), ('}', 'punct'), ('=', 'appos'), ('{', 'punct'), ('65', 'appos'), (',', 'punct'), ('133', 'appos'), ('}', 'punct'), (' ', 'appos'), ('Unit-4', 'compound'), ('Asymmertic', 'compound'), ('Ciphers', 'appos'), ('                                                      ', 'compound'), ('Darshan', 'compound'), ('Institute', 'appos'), ('Engineering', 'pobj'), ('&', 'cc'), ('Technology', 'conj'), ('  ', 'appos'), ('‹#›', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[(, yes], [yes, )], [), Public], [Public, key], [key, :], [:,  ], [ , PU], [PU, =], [=, {], [{, e], [e, ,], [,, n], [n, }], [}, =], [=, {], [{, 5], [5, ,], [,, 133], [133, }], [}, Private], [Private, key], [key, :], [:,  ], [ , PR], [PR, =], [=, {], [{, d], [d, ,], [,, n], [n, }], [}, =], [=, {], [{, 65], [65, ,], [,, 133], [133, }], [},  ], [ , Unit-4], [Unit-4, Asymmertic], [Asymmertic, Ciphers], [Ciphers,                                                       ], [                                                      , Darshan], [Darshan, Institute], [Institute, Engineering], [Engineering, &], [&, Technology], [Technology,   ], [  , ‹#›], [‹#›,  ]]

>> Trigrams: 
[[(, yes, )], [yes, ), Public], [), Public, key], [Public, key, :], [key, :,  ], [:,  , PU], [ , PU, =], [PU, =, {], [=, {, e], [{, e, ,], [e, ,, n], [,, n, }], [n, }, =], [}, =, {], [=, {, 5], [{, 5, ,], [5, ,, 133], [,, 133, }], [133, }, Private], [}, Private, key], [Private, key, :], [key, :,  ], [:,  , PR], [ , PR, =], [PR, =, {], [=, {, d], [{, d, ,], [d, ,, n], [,, n, }], [n, }, =], [}, =, {], [=, {, 65], [{, 65, ,], [65, ,, 133], [,, 133, }], [133, },  ], [},  , Unit-4], [ , Unit-4, Asymmertic], [Unit-4, Asymmertic, Ciphers], [Asymmertic, Ciphers,                                                       ], [Ciphers,                                                       , Darshan], [                                                      , Darshan, Institute], [Darshan, Institute, Engineering], [Institute, Engineering, &], [Engineering, &, Technology], [&, Technology,   ], [Technology,   , ‹#›], [  , ‹#›,  ]]

>> Noun Phrases are: 
[ PU, e, Private key,  PR, d, Unit-4 Asymmertic Ciphers,                                                       Darshan Institute, Engineering, Technology]

>> Named Entities are: 
[('5', 'DATE'), ('133', 'CARDINAL'), ('65', 'DATE'), ('133', 'CARDINAL'), ('Darshan Institute of Engineering & Technology', 'ORG')]


============================ Sentence 77 =============================

RSA Example – cont… Encryption: C = 


>> Tokens are: 
[RSA, Example, –, cont, …, Encryption, :, C, =] 

>> PoS Tags are: 
[('RSA', 'PROPN'), ('Example', 'PROPN'), ('–', 'PUNCT'), ('cont', 'NOUN'), ('…', 'PUNCT'), ('Encryption', 'NOUN'), (':', 'PUNCT'), ('C', 'NOUN'), ('=', 'SYM')] 

>> Dependency Tags are: 
[('RSA', 'compound'), ('Example', 'ROOT'), ('–', 'punct'), ('cont', 'appos'), ('…', 'punct'), ('Encryption', 'appos'), (':', 'punct'), ('C', 'appos'), ('=', 'punct')]

>> Bigrams: 
[[RSA, Example], [Example, –], [–, cont], [cont, …], […, Encryption], [Encryption, :], [:, C], [C, =]]

>> Trigrams: 
[[RSA, Example, –], [Example, –, cont], [–, cont, …], [cont, …, Encryption], […, Encryption, :], [Encryption, :, C], [:, C, =]]

>> Noun Phrases are: 
[RSA Example, cont, Encryption, C]

>> Named Entities are: 
[('RSA', 'ORG')]


============================ Sentence 78 =============================

Me mod n For message M = 6 C = 65 mod 133 C = 7776 mod 33 C = 62 PU = { e, n } , PU = { 5, 133 } Decryption: M = Cd mod n For C = 


>> Tokens are: 
[mod, n, message, M, =, 6, C, =, 65, mod, 133, C, =, 7776, mod, 33, C, =, 62, PU, =, {, e, ,, n, }, ,, PU, =, {, 5, ,, 133, }, Decryption, :, M, =, Cd, mod, n, C, =] 

>> PoS Tags are: 
[('mod', 'X'), ('n', 'CCONJ'), ('message', 'NOUN'), ('M', 'PROPN'), ('=', 'SYM'), ('6', 'NUM'), ('C', 'NOUN'), ('=', 'PUNCT'), ('65', 'NUM'), ('mod', 'ADJ'), ('133', 'NUM'), ('C', 'NOUN'), ('=', 'SYM'), ('7776', 'NUM'), ('mod', 'NOUN'), ('33', 'NUM'), ('C', 'NOUN'), ('=', 'SYM'), ('62', 'NUM'), ('PU', 'PROPN'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('e', 'NOUN'), (',', 'PUNCT'), ('n', 'CCONJ'), ('}', 'PUNCT'), (',', 'PUNCT'), ('PU', 'PROPN'), ('=', 'NUM'), ('{', 'PUNCT'), ('5', 'NUM'), (',', 'PUNCT'), ('133', 'NUM'), ('}', 'PUNCT'), ('Decryption', 'PROPN'), (':', 'PUNCT'), ('M', 'PROPN'), ('=', 'PUNCT'), ('Cd', 'PROPN'), ('mod', 'ADP'), ('n', 'CCONJ'), ('C', 'NOUN'), ('=', 'PUNCT')] 

>> Dependency Tags are: 
[('mod', 'ROOT'), ('n', 'cc'), ('message', 'pobj'), ('M', 'pobj'), ('=', 'punct'), ('6', 'appos'), ('C', 'appos'), ('=', 'quantmod'), ('65', 'nummod'), ('mod', 'quantmod'), ('133', 'nummod'), ('C', 'quantmod'), ('=', 'compound'), ('7776', 'appos'), ('mod', 'pobj'), ('33', 'nummod'), ('C', 'quantmod'), ('=', 'punct'), ('62', 'nummod'), ('PU', 'npadvmod'), ('=', 'punct'), ('{', 'punct'), ('e', 'appos'), (',', 'punct'), ('n', 'cc'), ('}', 'punct'), (',', 'punct'), ('PU', 'npadvmod'), ('=', 'punct'), ('{', 'punct'), ('5', 'appos'), (',', 'punct'), ('133', 'nummod'), ('}', 'punct'), ('Decryption', 'appos'), (':', 'punct'), ('M', 'compound'), ('=', 'punct'), ('Cd', 'appos'), ('mod', 'prep'), ('n', 'cc'), ('C', 'pobj'), ('=', 'punct')]

>> Bigrams: 
[[mod, n], [n, message], [message, M], [M, =], [=, 6], [6, C], [C, =], [=, 65], [65, mod], [mod, 133], [133, C], [C, =], [=, 7776], [7776, mod], [mod, 33], [33, C], [C, =], [=, 62], [62, PU], [PU, =], [=, {], [{, e], [e, ,], [,, n], [n, }], [}, ,], [,, PU], [PU, =], [=, {], [{, 5], [5, ,], [,, 133], [133, }], [}, Decryption], [Decryption, :], [:, M], [M, =], [=, Cd], [Cd, mod], [mod, n], [n, C], [C, =]]

>> Trigrams: 
[[mod, n, message], [n, message, M], [message, M, =], [M, =, 6], [=, 6, C], [6, C, =], [C, =, 65], [=, 65, mod], [65, mod, 133], [mod, 133, C], [133, C, =], [C, =, 7776], [=, 7776, mod], [7776, mod, 33], [mod, 33, C], [33, C, =], [C, =, 62], [=, 62, PU], [62, PU, =], [PU, =, {], [=, {, e], [{, e, ,], [e, ,, n], [,, n, }], [n, }, ,], [}, ,, PU], [,, PU, =], [PU, =, {], [=, {, 5], [{, 5, ,], [5, ,, 133], [,, 133, }], [133, }, Decryption], [}, Decryption, :], [Decryption, :, M], [:, M, =], [M, =, Cd], [=, Cd, mod], [Cd, mod, n], [mod, n, C], [n, C, =]]

>> Noun Phrases are: 
[message, M, C, mod, e, , 133 } Decryption, M = Cd, C]

>> Named Entities are: 
[('6', 'CARDINAL'), ('65', 'CARDINAL'), ('133', 'CARDINAL'), ('7776', 'CARDINAL'), ('33', 'CARDINAL'), ('62', 'CARDINAL'), ('5', 'DATE'), ('133', 'CARDINAL')]


============================ Sentence 79 =============================

62 M = 6265 mod 133 M = 2666 mod 33 M = 6 PR = { d, n } , PU = { 65, 133 }  Unit-4 Asymmertic Ciphers                                                       Darshan Institute of Engineering & Technology   ‹#›   


>> Tokens are: 
[62, M, =, 6265, mod, 133, M, =, 2666, mod, 33, M, =, 6, PR, =, {, d, ,, n, }, ,, PU, =, {, 65, ,, 133, },  , Unit-4, Asymmertic, Ciphers,                                                       , Darshan, Institute, Engineering, &, Technology,   , ‹#›,  ] 

>> PoS Tags are: 
[('62', 'PROPN'), ('M', 'PROPN'), ('=', 'SYM'), ('6265', 'NUM'), ('mod', 'NOUN'), ('133', 'NUM'), ('M', 'NOUN'), ('=', 'SYM'), ('2666', 'NUM'), ('mod', 'NOUN'), ('33', 'NUM'), ('M', 'NOUN'), ('=', 'SYM'), ('6', 'NUM'), ('PR', 'NOUN'), ('=', 'SYM'), ('{', 'PUNCT'), ('d', 'NOUN'), (',', 'PUNCT'), ('n', 'CCONJ'), ('}', 'PUNCT'), (',', 'PUNCT'), ('PU', 'PROPN'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('65', 'NUM'), (',', 'PUNCT'), ('133', 'NUM'), ('}', 'PUNCT'), (' ', 'SPACE'), ('Unit-4', 'PROPN'), ('Asymmertic', 'PROPN'), ('Ciphers', 'PROPN'), ('                                                      ', 'SPACE'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('Engineering', 'PROPN'), ('&', 'CCONJ'), ('Technology', 'PROPN'), ('  ', 'SPACE'), ('‹#›', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('62', 'compound'), ('M', 'compound'), ('=', 'punct'), ('6265', 'nummod'), ('mod', 'quantmod'), ('133', 'nummod'), ('M', 'nmod'), ('=', 'punct'), ('2666', 'nummod'), ('mod', 'nsubj'), ('33', 'compound'), ('M', 'compound'), ('=', 'punct'), ('6', 'nummod'), ('PR', 'appos'), ('=', 'punct'), ('{', 'punct'), ('d', 'appos'), (',', 'punct'), ('n', 'cc'), ('}', 'punct'), (',', 'punct'), ('PU', 'appos'), ('=', 'punct'), ('{', 'punct'), ('65', 'nummod'), (',', 'punct'), ('133', 'nummod'), ('}', 'punct'), (' ', 'appos'), ('Unit-4', 'compound'), ('Asymmertic', 'compound'), ('Ciphers', 'appos'), ('                                                      ', 'compound'), ('Darshan', 'compound'), ('Institute', 'appos'), ('Engineering', 'pobj'), ('&', 'cc'), ('Technology', 'conj'), ('  ', 'conj'), ('‹#›', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[62, M], [M, =], [=, 6265], [6265, mod], [mod, 133], [133, M], [M, =], [=, 2666], [2666, mod], [mod, 33], [33, M], [M, =], [=, 6], [6, PR], [PR, =], [=, {], [{, d], [d, ,], [,, n], [n, }], [}, ,], [,, PU], [PU, =], [=, {], [{, 65], [65, ,], [,, 133], [133, }], [},  ], [ , Unit-4], [Unit-4, Asymmertic], [Asymmertic, Ciphers], [Ciphers,                                                       ], [                                                      , Darshan], [Darshan, Institute], [Institute, Engineering], [Engineering, &], [&, Technology], [Technology,   ], [  , ‹#›], [‹#›,  ]]

>> Trigrams: 
[[62, M, =], [M, =, 6265], [=, 6265, mod], [6265, mod, 133], [mod, 133, M], [133, M, =], [M, =, 2666], [=, 2666, mod], [2666, mod, 33], [mod, 33, M], [33, M, =], [M, =, 6], [=, 6, PR], [6, PR, =], [PR, =, {], [=, {, d], [{, d, ,], [d, ,, n], [,, n, }], [n, }, ,], [}, ,, PU], [,, PU, =], [PU, =, {], [=, {, 65], [{, 65, ,], [65, ,, 133], [,, 133, }], [133, },  ], [},  , Unit-4], [ , Unit-4, Asymmertic], [Unit-4, Asymmertic, Ciphers], [Asymmertic, Ciphers,                                                       ], [Ciphers,                                                       , Darshan], [                                                      , Darshan, Institute], [Darshan, Institute, Engineering], [Institute, Engineering, &], [Engineering, &, Technology], [&, Technology,   ], [Technology,   , ‹#›], [  , ‹#›,  ]]

>> Noun Phrases are: 
[62 M = 6265 mod 133 M = 2666 mod, 33 M = 6 PR, d, PU, Unit-4 Asymmertic Ciphers,                                                       Darshan Institute, Engineering, Technology]

>> Named Entities are: 
[('62', 'CARDINAL'), ('6265', 'CARDINAL'), ('133', 'CARDINAL'), ('2666', 'DATE'), ('33', 'CARDINAL'), ('6', 'CARDINAL'), ('65', 'DATE'), ('133', 'CARDINAL'), ('Darshan Institute of Engineering & Technology', 'ORG')]


============================ Sentence 80 =============================

RSA Example P and Q are two prime numbers. 


>> Tokens are: 
[RSA, Example, P, Q, prime, numbers, .] 

>> PoS Tags are: 
[('RSA', 'PROPN'), ('Example', 'PROPN'), ('P', 'PROPN'), ('Q', 'PROPN'), ('prime', 'ADJ'), ('numbers', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('RSA', 'compound'), ('Example', 'compound'), ('P', 'nsubj'), ('Q', 'conj'), ('prime', 'amod'), ('numbers', 'attr'), ('.', 'punct')]

>> Bigrams: 
[[RSA, Example], [Example, P], [P, Q], [Q, prime], [prime, numbers], [numbers, .]]

>> Trigrams: 
[[RSA, Example, P], [Example, P, Q], [P, Q, prime], [Q, prime, numbers], [prime, numbers, .]]

>> Noun Phrases are: 
[RSA Example P, Q, two prime numbers]

>> Named Entities are: 
[('RSA Example P', 'ORG'), ('two', 'CARDINAL')]


============================ Sentence 81 =============================

P=7, and Q=17. 


>> Tokens are: 
[P=7, ,, Q=17, .] 

>> PoS Tags are: 
[('P=7', 'ADJ'), (',', 'PUNCT'), ('Q=17', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('P=7', 'ROOT'), (',', 'punct'), ('Q=17', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[P=7, ,], [,, Q=17], [Q=17, .]]

>> Trigrams: 
[[P=7, ,, Q=17], [,, Q=17, .]]

>> Noun Phrases are: 
[Q=17]

>> Named Entities are: 
[('Q=17', 'PERSON')]


============================ Sentence 82 =============================

 Take public key E=5. 


>> Tokens are: 
[ , public, key, E=5, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('public', 'ADJ'), ('key', 'ADJ'), ('E=5', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'nsubj'), ('public', 'amod'), ('key', 'amod'), ('E=5', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[ , public], [public, key], [key, E=5], [E=5, .]]

>> Trigrams: 
[[ , public, key], [public, key, E=5], [key, E=5, .]]

>> Noun Phrases are: 
[public key E=5]

>> Named Entities are: 
[]


============================ Sentence 83 =============================

If plain text value is 10, then what will be cipher text value according to RSA algorithm? 


>> Tokens are: 
[plain, text, value, 10, ,, cipher, text, value, according, RSA, algorithm, ?] 

>> PoS Tags are: 
[('plain', 'ADJ'), ('text', 'NOUN'), ('value', 'NOUN'), ('10', 'NUM'), (',', 'PUNCT'), ('cipher', 'NOUN'), ('text', 'NOUN'), ('value', 'NOUN'), ('according', 'VERB'), ('RSA', 'PROPN'), ('algorithm', 'NOUN'), ('?', 'PUNCT')] 

>> Dependency Tags are: 
[('plain', 'amod'), ('text', 'compound'), ('value', 'nsubj'), ('10', 'attr'), (',', 'punct'), ('cipher', 'amod'), ('text', 'compound'), ('value', 'attr'), ('according', 'prep'), ('RSA', 'pobj'), ('algorithm', 'pobj'), ('?', 'punct')]

>> Bigrams: 
[[plain, text], [text, value], [value, 10], [10, ,], [,, cipher], [cipher, text], [text, value], [value, according], [according, RSA], [RSA, algorithm], [algorithm, ?]]

>> Trigrams: 
[[plain, text, value], [text, value, 10], [value, 10, ,], [10, ,, cipher], [,, cipher, text], [cipher, text, value], [text, value, according], [value, according, RSA], [according, RSA, algorithm], [RSA, algorithm, ?]]

>> Noun Phrases are: 
[plain text value, what, cipher text value, RSA, algorithm]

>> Named Entities are: 
[('10', 'CARDINAL'), ('RSA', 'ORG')]


============================ Sentence 84 =============================

 n = 119 φ(n) = 


>> Tokens are: 
[ , n, =, 119, φ(n, ), =] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('n', 'CCONJ'), ('=', 'SYM'), ('119', 'NUM'), ('φ(n', 'PROPN'), (')', 'PUNCT'), ('=', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'dep'), ('n', 'cc'), ('=', 'punct'), ('119', 'nummod'), ('φ(n', 'ROOT'), (')', 'punct'), ('=', 'punct')]

>> Bigrams: 
[[ , n], [n, =], [=, 119], [119, φ(n], [φ(n, )], [), =]]

>> Trigrams: 
[[ , n, =], [n, =, 119], [=, 119, φ(n], [119, φ(n, )], [φ(n, ), =]]

>> Noun Phrases are: 
[ n = 119 φ(n]

>> Named Entities are: 
[]


============================ Sentence 85 =============================

96 e = 5 d = 77 PU = { 5, 119 } PR = {77, 119} C = 105 mod 119 => C = 40   Unit-4 


>> Tokens are: 
[96, e, =, 5, d, =, 77, PU, =, {, 5, ,, 119, }, PR, =, {, 77, ,, 119, }, C, =, 105, mod, 119, =, >, C, =, 40,   , Unit-4] 

>> PoS Tags are: 
[('96', 'NUM'), ('e', 'NOUN'), ('=', 'SYM'), ('5', 'NUM'), ('d', 'X'), ('=', 'SYM'), ('77', 'NUM'), ('PU', 'NOUN'), ('=', 'NUM'), ('{', 'PUNCT'), ('5', 'NUM'), (',', 'PUNCT'), ('119', 'NUM'), ('}', 'PUNCT'), ('PR', 'NOUN'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('77', 'NUM'), (',', 'PUNCT'), ('119', 'NUM'), ('}', 'PUNCT'), ('C', 'PROPN'), ('=', 'SYM'), ('105', 'NUM'), ('mod', 'NOUN'), ('119', 'NUM'), ('=', 'SYM'), ('>', 'X'), ('C', 'NOUN'), ('=', 'SYM'), ('40', 'NUM'), ('  ', 'SPACE'), ('Unit-4', 'NOUN')] 

>> Dependency Tags are: 
[('96', 'nummod'), ('e', 'quantmod'), ('=', 'prep'), ('5', 'nummod'), ('d', 'dep'), ('=', 'punct'), ('77', 'nummod'), ('PU', 'appos'), ('=', 'punct'), ('{', 'punct'), ('5', 'nummod'), (',', 'punct'), ('119', 'nummod'), ('}', 'punct'), ('PR', 'appos'), ('=', 'punct'), ('{', 'punct'), ('77', 'nummod'), (',', 'punct'), ('119', 'nummod'), ('}', 'punct'), ('C', 'appos'), ('=', 'compound'), ('105', 'nummod'), ('mod', 'ROOT'), ('119', 'npadvmod'), ('=', 'punct'), ('>', 'prep'), ('C', 'appos'), ('=', 'compound'), ('40', 'nummod'), ('  ', 'appos'), ('Unit-4', 'punct')]

>> Bigrams: 
[[96, e], [e, =], [=, 5], [5, d], [d, =], [=, 77], [77, PU], [PU, =], [=, {], [{, 5], [5, ,], [,, 119], [119, }], [}, PR], [PR, =], [=, {], [{, 77], [77, ,], [,, 119], [119, }], [}, C], [C, =], [=, 105], [105, mod], [mod, 119], [119, =], [=, >], [>, C], [C, =], [=, 40], [40,   ], [  , Unit-4]]

>> Trigrams: 
[[96, e, =], [e, =, 5], [=, 5, d], [5, d, =], [d, =, 77], [=, 77, PU], [77, PU, =], [PU, =, {], [=, {, 5], [{, 5, ,], [5, ,, 119], [,, 119, }], [119, }, PR], [}, PR, =], [PR, =, {], [=, {, 77], [{, 77, ,], [77, ,, 119], [,, 119, }], [119, }, C], [}, C, =], [C, =, 105], [=, 105, mod], [105, mod, 119], [mod, 119, =], [119, =, >], [=, >, C], [>, C, =], [C, =, 40], [=, 40,   ], [40,   , Unit-4]]

>> Noun Phrases are: 
[d = 77 PU, 5, 119 } PR, 77, 119} C, C]

>> Named Entities are: 
[('96', 'CARDINAL'), ('5', 'CARDINAL'), ('5', 'DATE'), ('119', 'CARDINAL'), ('77', 'DATE'), ('119', 'CARDINAL'), ('105', 'CARDINAL'), ('119', 'CARDINAL'), ('40', 'CARDINAL')]


============================ Sentence 86 =============================

Asymmertic Ciphers                                                       Darshan Institute of Engineering & Technology   ‹#›   


>> Tokens are: 
[Asymmertic, Ciphers,                                                       , Darshan, Institute, Engineering, &, Technology,   , ‹#›,  ] 

>> PoS Tags are: 
[('Asymmertic', 'PROPN'), ('Ciphers', 'PROPN'), ('                                                      ', 'SPACE'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('Engineering', 'PROPN'), ('&', 'CCONJ'), ('Technology', 'PROPN'), ('  ', 'SPACE'), ('‹#›', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Asymmertic', 'compound'), ('Ciphers', 'nsubj'), ('                                                      ', 'compound'), ('Darshan', 'compound'), ('Institute', 'appos'), ('Engineering', 'pobj'), ('&', 'cc'), ('Technology', 'conj'), ('  ', 'conj'), ('‹#›', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[Asymmertic, Ciphers], [Ciphers,                                                       ], [                                                      , Darshan], [Darshan, Institute], [Institute, Engineering], [Engineering, &], [&, Technology], [Technology,   ], [  , ‹#›], [‹#›,  ]]

>> Trigrams: 
[[Asymmertic, Ciphers,                                                       ], [Ciphers,                                                       , Darshan], [                                                      , Darshan, Institute], [Darshan, Institute, Engineering], [Institute, Engineering, &], [Engineering, &, Technology], [&, Technology,   ], [Technology,   , ‹#›], [  , ‹#›,  ]]

>> Noun Phrases are: 
[Asymmertic Ciphers,                                                       Darshan Institute, Engineering, Technology]

>> Named Entities are: 
[('Darshan Institute of Engineering & Technology', 'ORG')]


============================ Sentence 87 =============================

Diffie-Hellman key Exchange 


>> Tokens are: 
[Diffie, -, Hellman, key, Exchange] 

>> PoS Tags are: 
[('Diffie', 'PROPN'), ('-', 'PUNCT'), ('Hellman', 'PROPN'), ('key', 'ADJ'), ('Exchange', 'PROPN')] 

>> Dependency Tags are: 
[('Diffie', 'nmod'), ('-', 'punct'), ('Hellman', 'nmod'), ('key', 'amod'), ('Exchange', 'ROOT')]

>> Bigrams: 
[[Diffie, -], [-, Hellman], [Hellman, key], [key, Exchange]]

>> Trigrams: 
[[Diffie, -, Hellman], [-, Hellman, key], [Hellman, key, Exchange]]

>> Noun Phrases are: 
[Diffie-Hellman key Exchange]

>> Named Entities are: 
[('Diffie-Hellman key Exchange', 'ORG')]


============================ Sentence 88 =============================

The purpose of the Diffie-Hellman algorithm is to enable two users to securely exchange a key that can be used for subsequent encryption of message. 


>> Tokens are: 
[purpose, Diffie, -, Hellman, algorithm, enable, users, securely, exchange, key, subsequent, encryption, message, .] 

>> PoS Tags are: 
[('purpose', 'NOUN'), ('Diffie', 'PROPN'), ('-', 'PUNCT'), ('Hellman', 'PROPN'), ('algorithm', 'NOUN'), ('enable', 'VERB'), ('users', 'NOUN'), ('securely', 'ADV'), ('exchange', 'VERB'), ('key', 'NOUN'), ('subsequent', 'ADJ'), ('encryption', 'NOUN'), ('message', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('purpose', 'nsubj'), ('Diffie', 'compound'), ('-', 'punct'), ('Hellman', 'compound'), ('algorithm', 'pobj'), ('enable', 'xcomp'), ('users', 'dobj'), ('securely', 'advmod'), ('exchange', 'xcomp'), ('key', 'dobj'), ('subsequent', 'amod'), ('encryption', 'pobj'), ('message', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[purpose, Diffie], [Diffie, -], [-, Hellman], [Hellman, algorithm], [algorithm, enable], [enable, users], [users, securely], [securely, exchange], [exchange, key], [key, subsequent], [subsequent, encryption], [encryption, message], [message, .]]

>> Trigrams: 
[[purpose, Diffie, -], [Diffie, -, Hellman], [-, Hellman, algorithm], [Hellman, algorithm, enable], [algorithm, enable, users], [enable, users, securely], [users, securely, exchange], [securely, exchange, key], [exchange, key, subsequent], [key, subsequent, encryption], [subsequent, encryption, message], [encryption, message, .]]

>> Noun Phrases are: 
[The purpose, the Diffie-Hellman algorithm, two users, a key, subsequent encryption, message]

>> Named Entities are: 
[('Diffie-Hellman', 'ORG'), ('two', 'CARDINAL')]


============================ Sentence 89 =============================

This algorithm depends for its effectiveness on the difficulty of computing discrete logarithms. 


>> Tokens are: 
[algorithm, depends, effectiveness, difficulty, computing, discrete, logarithms, .] 

>> PoS Tags are: 
[('algorithm', 'NOUN'), ('depends', 'VERB'), ('effectiveness', 'NOUN'), ('difficulty', 'NOUN'), ('computing', 'VERB'), ('discrete', 'ADJ'), ('logarithms', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('algorithm', 'nsubj'), ('depends', 'ROOT'), ('effectiveness', 'pobj'), ('difficulty', 'pobj'), ('computing', 'pcomp'), ('discrete', 'amod'), ('logarithms', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[algorithm, depends], [depends, effectiveness], [effectiveness, difficulty], [difficulty, computing], [computing, discrete], [discrete, logarithms], [logarithms, .]]

>> Trigrams: 
[[algorithm, depends, effectiveness], [depends, effectiveness, difficulty], [effectiveness, difficulty, computing], [difficulty, computing, discrete], [computing, discrete, logarithms], [discrete, logarithms, .]]

>> Noun Phrases are: 
[This algorithm, its effectiveness, the difficulty, discrete logarithms]

>> Named Entities are: 
[]


============================ Sentence 90 =============================

    Unit-4 Asymmertic Ciphers                                                       Darshan Institute of Engineering & Technology   ‹#›   


>> Tokens are: 
[    , Unit-4, Asymmertic, Ciphers,                                                       , Darshan, Institute, Engineering, &, Technology,   , ‹#›,  ] 

>> PoS Tags are: 
[('    ', 'SPACE'), ('Unit-4', 'NOUN'), ('Asymmertic', 'PROPN'), ('Ciphers', 'PROPN'), ('                                                      ', 'SPACE'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('Engineering', 'PROPN'), ('&', 'CCONJ'), ('Technology', 'PROPN'), ('  ', 'SPACE'), ('‹#›', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('    ', 'nsubj'), ('Unit-4', 'compound'), ('Asymmertic', 'compound'), ('Ciphers', 'appos'), ('                                                      ', 'compound'), ('Darshan', 'compound'), ('Institute', 'appos'), ('Engineering', 'pobj'), ('&', 'cc'), ('Technology', 'conj'), ('  ', 'appos'), ('‹#›', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[    , Unit-4], [Unit-4, Asymmertic], [Asymmertic, Ciphers], [Ciphers,                                                       ], [                                                      , Darshan], [Darshan, Institute], [Institute, Engineering], [Engineering, &], [&, Technology], [Technology,   ], [  , ‹#›], [‹#›,  ]]

>> Trigrams: 
[[    , Unit-4, Asymmertic], [Unit-4, Asymmertic, Ciphers], [Asymmertic, Ciphers,                                                       ], [Ciphers,                                                       , Darshan], [                                                      , Darshan, Institute], [Darshan, Institute, Engineering], [Institute, Engineering, &], [Engineering, &, Technology], [&, Technology,   ], [Technology,   , ‹#›], [  , ‹#›,  ]]

>> Noun Phrases are: 
[Unit-4 Asymmertic Ciphers,                                                       Darshan Institute, Engineering, Technology]

>> Named Entities are: 
[('Darshan Institute of Engineering & Technology', 'ORG')]


============================ Sentence 91 =============================

Primitive root Let  be a prime number Then  is a primitive root for , if the powers of  modulo  generates all integers from 1 to  – 1 in some permutation. 


>> Tokens are: 
[Primitive, root, Let,  , prime, number,  , primitive, root, ,, powers,  , modulo,  , generates, integers, 1,  , –, 1, permutation, .] 

>> PoS Tags are: 
[('Primitive', 'ADJ'), ('root', 'NOUN'), ('Let', 'VERB'), (' ', 'SPACE'), ('prime', 'ADJ'), ('number', 'NOUN'), (' ', 'SPACE'), ('primitive', 'ADJ'), ('root', 'NOUN'), (',', 'PUNCT'), ('powers', 'NOUN'), (' ', 'SPACE'), ('modulo', 'ADJ'), (' ', 'SPACE'), ('generates', 'VERB'), ('integers', 'NOUN'), ('1', 'NUM'), (' ', 'SPACE'), ('–', 'PUNCT'), ('1', 'NUM'), ('permutation', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Primitive', 'amod'), ('root', 'nsubj'), ('Let', 'ccomp'), (' ', 'nsubj'), ('prime', 'amod'), ('number', 'attr'), (' ', 'nsubj'), ('primitive', 'amod'), ('root', 'attr'), (',', 'punct'), ('powers', 'nsubj'), (' ', 'pobj'), ('modulo', 'amod'), (' ', 'pobj'), ('generates', 'advcl'), ('integers', 'dobj'), ('1', 'pobj'), (' ', 'pobj'), ('–', 'punct'), ('1', 'dep'), ('permutation', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Primitive, root], [root, Let], [Let,  ], [ , prime], [prime, number], [number,  ], [ , primitive], [primitive, root], [root, ,], [,, powers], [powers,  ], [ , modulo], [modulo,  ], [ , generates], [generates, integers], [integers, 1], [1,  ], [ , –], [–, 1], [1, permutation], [permutation, .]]

>> Trigrams: 
[[Primitive, root, Let], [root, Let,  ], [Let,  , prime], [ , prime, number], [prime, number,  ], [number,  , primitive], [ , primitive, root], [primitive, root, ,], [root, ,, powers], [,, powers,  ], [powers,  , modulo], [ , modulo,  ], [modulo,  , generates], [ , generates, integers], [generates, integers, 1], [integers, 1,  ], [1,  , –], [ , –, 1], [–, 1, permutation], [1, permutation, .]]

>> Noun Phrases are: 
[Primitive root, a prime number, a primitive root, the powers, all integers, some permutation]

>> Named Entities are: 
[('1', 'CARDINAL'), ('1', 'CARDINAL')]


============================ Sentence 92 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 93 =============================

Example: p = 7 then primitive root is 3 because powers of 3 mod 7 generates all the integers from 1 to 6          Unit-4 Asymmertic Ciphers                                                       Darshan Institute of Engineering & Technology   ‹#›   


>> Tokens are: 
[Example, :, p, =, 7, primitive, root, 3, powers, 3, mod, 7, generates, integers, 1, 6,          , Unit-4, Asymmertic, Ciphers,                                                       , Darshan, Institute, Engineering, &, Technology,   , ‹#›,  ] 

>> PoS Tags are: 
[('Example', 'NOUN'), (':', 'PUNCT'), ('p', 'X'), ('=', 'SYM'), ('7', 'NUM'), ('primitive', 'ADJ'), ('root', 'NOUN'), ('3', 'NUM'), ('powers', 'NOUN'), ('3', 'NUM'), ('mod', 'NOUN'), ('7', 'NUM'), ('generates', 'VERB'), ('integers', 'NOUN'), ('1', 'NUM'), ('6', 'NUM'), ('         ', 'SPACE'), ('Unit-4', 'NOUN'), ('Asymmertic', 'PROPN'), ('Ciphers', 'PROPN'), ('                                                      ', 'SPACE'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('Engineering', 'PROPN'), ('&', 'CCONJ'), ('Technology', 'PROPN'), ('  ', 'SPACE'), ('‹#›', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Example', 'dep'), (':', 'punct'), ('p', 'nsubj'), ('=', 'punct'), ('7', 'prep'), ('primitive', 'amod'), ('root', 'nsubj'), ('3', 'attr'), ('powers', 'nsubj'), ('3', 'nummod'), ('mod', 'pobj'), ('7', 'nummod'), ('generates', 'advcl'), ('integers', 'dobj'), ('1', 'quantmod'), ('6', 'nummod'), ('         ', 'quantmod'), ('Unit-4', 'compound'), ('Asymmertic', 'compound'), ('Ciphers', 'pobj'), ('                                                      ', 'compound'), ('Darshan', 'compound'), ('Institute', 'appos'), ('Engineering', 'pobj'), ('&', 'cc'), ('Technology', 'conj'), ('  ', 'nsubj'), ('‹#›', 'conj'), (' ', 'punct')]

>> Bigrams: 
[[Example, :], [:, p], [p, =], [=, 7], [7, primitive], [primitive, root], [root, 3], [3, powers], [powers, 3], [3, mod], [mod, 7], [7, generates], [generates, integers], [integers, 1], [1, 6], [6,          ], [         , Unit-4], [Unit-4, Asymmertic], [Asymmertic, Ciphers], [Ciphers,                                                       ], [                                                      , Darshan], [Darshan, Institute], [Institute, Engineering], [Engineering, &], [&, Technology], [Technology,   ], [  , ‹#›], [‹#›,  ]]

>> Trigrams: 
[[Example, :, p], [:, p, =], [p, =, 7], [=, 7, primitive], [7, primitive, root], [primitive, root, 3], [root, 3, powers], [3, powers, 3], [powers, 3, mod], [3, mod, 7], [mod, 7, generates], [7, generates, integers], [generates, integers, 1], [integers, 1, 6], [1, 6,          ], [6,          , Unit-4], [         , Unit-4, Asymmertic], [Unit-4, Asymmertic, Ciphers], [Asymmertic, Ciphers,                                                       ], [Ciphers,                                                       , Darshan], [                                                      , Darshan, Institute], [Darshan, Institute, Engineering], [Institute, Engineering, &], [Engineering, &, Technology], [&, Technology,   ], [Technology,   , ‹#›], [  , ‹#›,  ]]

>> Noun Phrases are: 
[primitive root, powers, 3 mod, all the integers, 1 to 6          Unit-4 Asymmertic Ciphers,                                                       Darshan Institute, Engineering, Technology]

>> Named Entities are: 
[('7', 'CARDINAL'), ('3', 'CARDINAL'), ('3', 'CARDINAL'), ('1', 'CARDINAL'), ('Unit-4 Asymmertic Ciphers                                                       Darshan Institute of Engineering & Technology', 'ORG')]


============================ Sentence 94 =============================

Discrete Logarithm 


>> Tokens are: 
[Discrete, Logarithm] 

>> PoS Tags are: 
[('Discrete', 'PROPN'), ('Logarithm', 'PROPN')] 

>> Dependency Tags are: 
[('Discrete', 'compound'), ('Logarithm', 'ROOT')]

>> Bigrams: 
[[Discrete, Logarithm]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Discrete Logarithm]

>> Named Entities are: 
[]


============================ Sentence 95 =============================

For any integer  and a primitive root  of prime number , we can find a unique exponent  such that   


>> Tokens are: 
[integer,  , primitive, root,  , prime, number, ,, find, unique, exponent,  ,  ] 

>> PoS Tags are: 
[('integer', 'NOUN'), (' ', 'SPACE'), ('primitive', 'ADJ'), ('root', 'NOUN'), (' ', 'SPACE'), ('prime', 'ADJ'), ('number', 'NOUN'), (',', 'PUNCT'), ('find', 'VERB'), ('unique', 'ADJ'), ('exponent', 'NOUN'), (' ', 'SPACE'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('integer', 'compound'), (' ', 'pobj'), ('primitive', 'amod'), ('root', 'conj'), (' ', 'appos'), ('prime', 'amod'), ('number', 'pobj'), (',', 'punct'), ('find', 'ROOT'), ('unique', 'amod'), ('exponent', 'dobj'), (' ', 'dobj'), (' ', 'punct')]

>> Bigrams: 
[[integer,  ], [ , primitive], [primitive, root], [root,  ], [ , prime], [prime, number], [number, ,], [,, find], [find, unique], [unique, exponent], [exponent,  ], [ ,  ]]

>> Trigrams: 
[[integer,  , primitive], [ , primitive, root], [primitive, root,  ], [root,  , prime], [ , prime, number], [prime, number, ,], [number, ,, find], [,, find, unique], [find, unique, exponent], [unique, exponent,  ], [exponent,  ,  ]]

>> Noun Phrases are: 
[a primitive root, prime number, we, a unique exponent]

>> Named Entities are: 
[]


============================ Sentence 96 =============================

The exponent  is referred as the discrete logarithm of  for the base , mod . 


>> Tokens are: 
[exponent,  , referred, discrete, logarithm,  , base, ,, mod, .] 

>> PoS Tags are: 
[('exponent', 'NOUN'), (' ', 'SPACE'), ('referred', 'VERB'), ('discrete', 'ADJ'), ('logarithm', 'NOUN'), (' ', 'SPACE'), ('base', 'NOUN'), (',', 'PUNCT'), ('mod', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('exponent', 'nsubjpass'), (' ', 'nsubjpass'), ('referred', 'ROOT'), ('discrete', 'amod'), ('logarithm', 'pobj'), (' ', 'pobj'), ('base', 'pobj'), (',', 'punct'), ('mod', 'intj'), ('.', 'punct')]

>> Bigrams: 
[[exponent,  ], [ , referred], [referred, discrete], [discrete, logarithm], [logarithm,  ], [ , base], [base, ,], [,, mod], [mod, .]]

>> Trigrams: 
[[exponent,  , referred], [ , referred, discrete], [referred, discrete, logarithm], [discrete, logarithm,  ], [logarithm,  , base], [ , base, ,], [base, ,, mod], [,, mod, .]]

>> Noun Phrases are: 
[The exponent, the discrete logarithm, the base]

>> Named Entities are: 
[]


============================ Sentence 97 =============================

It expressed as below. 


>> Tokens are: 
[expressed, .] 

>> PoS Tags are: 
[('expressed', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('expressed', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[expressed, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[It]

>> Named Entities are: 
[]


============================ Sentence 98 =============================

       Unit-4 Asymmertic Ciphers                                                       Darshan Institute of Engineering & Technology   ‹#›  Diffie-Hellman Key Exchange – Cont… User A and User B agree on two large prime numbers q and α. 


>> Tokens are: 
[       , Unit-4, Asymmertic, Ciphers,                                                       , Darshan, Institute, Engineering, &, Technology,   , ‹#›,  , Diffie, -, Hellman, Key, Exchange, –, Cont, …, User, User, B, agree, large, prime, numbers, q, α, .] 

>> PoS Tags are: 
[('       ', 'SPACE'), ('Unit-4', 'NOUN'), ('Asymmertic', 'PROPN'), ('Ciphers', 'PROPN'), ('                                                      ', 'SPACE'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('Engineering', 'PROPN'), ('&', 'CCONJ'), ('Technology', 'PROPN'), ('  ', 'SPACE'), ('‹#›', 'VERB'), (' ', 'SPACE'), ('Diffie', 'PROPN'), ('-', 'PUNCT'), ('Hellman', 'PROPN'), ('Key', 'PROPN'), ('Exchange', 'PROPN'), ('–', 'PUNCT'), ('Cont', 'PROPN'), ('…', 'PUNCT'), ('User', 'PROPN'), ('User', 'PROPN'), ('B', 'PROPN'), ('agree', 'VERB'), ('large', 'ADJ'), ('prime', 'ADJ'), ('numbers', 'NOUN'), ('q', 'VERB'), ('α', 'DET'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('       ', 'nummod'), ('Unit-4', 'compound'), ('Asymmertic', 'compound'), ('Ciphers', 'nsubj'), ('                                                      ', 'compound'), ('Darshan', 'compound'), ('Institute', 'appos'), ('Engineering', 'pobj'), ('&', 'cc'), ('Technology', 'conj'), ('  ', 'conj'), ('‹#›', 'punct'), (' ', 'appos'), ('Diffie', 'compound'), ('-', 'punct'), ('Hellman', 'compound'), ('Key', 'compound'), ('Exchange', 'appos'), ('–', 'punct'), ('Cont', 'appos'), ('…', 'punct'), ('User', 'compound'), ('User', 'compound'), ('B', 'conj'), ('agree', 'ROOT'), ('large', 'amod'), ('prime', 'amod'), ('numbers', 'pobj'), ('q', 'punct'), ('α', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[       , Unit-4], [Unit-4, Asymmertic], [Asymmertic, Ciphers], [Ciphers,                                                       ], [                                                      , Darshan], [Darshan, Institute], [Institute, Engineering], [Engineering, &], [&, Technology], [Technology,   ], [  , ‹#›], [‹#›,  ], [ , Diffie], [Diffie, -], [-, Hellman], [Hellman, Key], [Key, Exchange], [Exchange, –], [–, Cont], [Cont, …], […, User], [User, User], [User, B], [B, agree], [agree, large], [large, prime], [prime, numbers], [numbers, q], [q, α], [α, .]]

>> Trigrams: 
[[       , Unit-4, Asymmertic], [Unit-4, Asymmertic, Ciphers], [Asymmertic, Ciphers,                                                       ], [Ciphers,                                                       , Darshan], [                                                      , Darshan, Institute], [Darshan, Institute, Engineering], [Institute, Engineering, &], [Engineering, &, Technology], [&, Technology,   ], [Technology,   , ‹#›], [  , ‹#›,  ], [‹#›,  , Diffie], [ , Diffie, -], [Diffie, -, Hellman], [-, Hellman, Key], [Hellman, Key, Exchange], [Key, Exchange, –], [Exchange, –, Cont], [–, Cont, …], [Cont, …, User], […, User, User], [User, User, B], [User, B, agree], [B, agree, large], [agree, large, prime], [large, prime, numbers], [prime, numbers, q], [numbers, q, α], [q, α, .]]

>> Noun Phrases are: 
[       Unit-4 Asymmertic Ciphers,                                                       Darshan Institute, Engineering, Technology, Diffie-Hellman Key Exchange, Cont, User A, User B, two large prime numbers]

>> Named Entities are: 
[('Darshan Institute of Engineering & Technology', 'ORG'), ('Diffie-Hellman Key Exchange', 'ORG'), ('User A', 'PERSON'), ('two', 'CARDINAL')]


============================ Sentence 99 =============================

User A and User B can use insecure channel to agree on them. 


>> Tokens are: 
[User, User, B, use, insecure, channel, agree, .] 

>> PoS Tags are: 
[('User', 'PROPN'), ('User', 'PROPN'), ('B', 'PROPN'), ('use', 'VERB'), ('insecure', 'ADJ'), ('channel', 'NOUN'), ('agree', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('User', 'compound'), ('User', 'compound'), ('B', 'conj'), ('use', 'ROOT'), ('insecure', 'amod'), ('channel', 'dobj'), ('agree', 'xcomp'), ('.', 'punct')]

>> Bigrams: 
[[User, User], [User, B], [B, use], [use, insecure], [insecure, channel], [channel, agree], [agree, .]]

>> Trigrams: 
[[User, User, B], [User, B, use], [B, use, insecure], [use, insecure, channel], [insecure, channel, agree], [channel, agree, .]]

>> Noun Phrases are: 
[User A, User B, insecure channel, them]

>> Named Entities are: 
[('User A', 'PERSON')]


============================ Sentence 100 =============================

User A selects a random integer  and calculates   Unit-4 Asymmertic Ciphers                                                       Darshan Institute of Engineering & Technology   ‹#›  Diffie-Hellman Key Exchange – Cont… Global Public Elements                                                             prime number                                                             <  and  is primitive root of   


>> Tokens are: 
[User, selects, random, integer,  , calculates,   , Unit-4, Asymmertic, Ciphers,                                                       , Darshan, Institute, Engineering, &, Technology,   , ‹#›,  , Diffie, -, Hellman, Key, Exchange, –, Cont, …, Global, Public, Elements,                                                             , prime, number,                                                             , <,  ,  , primitive, root,  ] 

>> PoS Tags are: 
[('User', 'PROPN'), ('selects', 'VERB'), ('random', 'ADJ'), ('integer', 'NOUN'), (' ', 'SPACE'), ('calculates', 'VERB'), ('  ', 'SPACE'), ('Unit-4', 'NOUN'), ('Asymmertic', 'PROPN'), ('Ciphers', 'PROPN'), ('                                                      ', 'SPACE'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('Engineering', 'PROPN'), ('&', 'CCONJ'), ('Technology', 'PROPN'), ('  ', 'SPACE'), ('‹#›', 'VERB'), (' ', 'SPACE'), ('Diffie', 'PROPN'), ('-', 'PUNCT'), ('Hellman', 'PROPN'), ('Key', 'PROPN'), ('Exchange', 'PROPN'), ('–', 'PUNCT'), ('Cont', 'PROPN'), ('…', 'PUNCT'), ('Global', 'PROPN'), ('Public', 'PROPN'), ('Elements', 'PROPN'), ('                                                            ', 'SPACE'), ('prime', 'ADJ'), ('number', 'NOUN'), ('                                                            ', 'SPACE'), ('<', 'X'), (' ', 'SPACE'), (' ', 'SPACE'), ('primitive', 'ADJ'), ('root', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('User', 'compound'), ('selects', 'ROOT'), ('random', 'amod'), ('integer', 'compound'), (' ', 'dobj'), ('calculates', 'conj'), ('  ', 'nmod'), ('Unit-4', 'compound'), ('Asymmertic', 'compound'), ('Ciphers', 'appos'), ('                                                      ', 'compound'), ('Darshan', 'compound'), ('Institute', 'appos'), ('Engineering', 'pobj'), ('&', 'cc'), ('Technology', 'conj'), ('  ', 'dobj'), ('‹#›', 'punct'), (' ', 'npadvmod'), ('Diffie', 'compound'), ('-', 'punct'), ('Hellman', 'compound'), ('Key', 'compound'), ('Exchange', 'dobj'), ('–', 'punct'), ('Cont', 'appos'), ('…', 'punct'), ('Global', 'compound'), ('Public', 'compound'), ('Elements', 'nsubj'), ('                                                            ', 'nmod'), ('prime', 'amod'), ('number', 'nsubj'), ('                                                            ', 'nummod'), ('<', 'punct'), (' ', 'appos'), (' ', 'conj'), ('primitive', 'amod'), ('root', 'attr'), (' ', 'pobj')]

>> Bigrams: 
[[User, selects], [selects, random], [random, integer], [integer,  ], [ , calculates], [calculates,   ], [  , Unit-4], [Unit-4, Asymmertic], [Asymmertic, Ciphers], [Ciphers,                                                       ], [                                                      , Darshan], [Darshan, Institute], [Institute, Engineering], [Engineering, &], [&, Technology], [Technology,   ], [  , ‹#›], [‹#›,  ], [ , Diffie], [Diffie, -], [-, Hellman], [Hellman, Key], [Key, Exchange], [Exchange, –], [–, Cont], [Cont, …], […, Global], [Global, Public], [Public, Elements], [Elements,                                                             ], [                                                            , prime], [prime, number], [number,                                                             ], [                                                            , <], [<,  ], [ ,  ], [ , primitive], [primitive, root], [root,  ]]

>> Trigrams: 
[[User, selects, random], [selects, random, integer], [random, integer,  ], [integer,  , calculates], [ , calculates,   ], [calculates,   , Unit-4], [  , Unit-4, Asymmertic], [Unit-4, Asymmertic, Ciphers], [Asymmertic, Ciphers,                                                       ], [Ciphers,                                                       , Darshan], [                                                      , Darshan, Institute], [Darshan, Institute, Engineering], [Institute, Engineering, &], [Engineering, &, Technology], [&, Technology,   ], [Technology,   , ‹#›], [  , ‹#›,  ], [‹#›,  , Diffie], [ , Diffie, -], [Diffie, -, Hellman], [-, Hellman, Key], [Hellman, Key, Exchange], [Key, Exchange, –], [Exchange, –, Cont], [–, Cont, …], [Cont, …, Global], […, Global, Public], [Global, Public, Elements], [Public, Elements,                                                             ], [Elements,                                                             , prime], [                                                            , prime, number], [prime, number,                                                             ], [number,                                                             , <], [                                                            , <,  ], [<,  ,  ], [ ,  , primitive], [ , primitive, root], [primitive, root,  ]]

>> Noun Phrases are: 
[User A, Unit-4 Asymmertic Ciphers,                                                       Darshan Institute, Engineering, Technology, Diffie-Hellman Key Exchange, Cont, Global Public Elements,                                                             prime number, primitive root]

>> Named Entities are: 
[('Unit-4 Asymmertic Ciphers                                                       Darshan Institute of Engineering & Technology', 'ORG'), ('Diffie-Hellman Key Exchange', 'ORG')]


============================ Sentence 101 =============================

User A Key Generation             Select private                                   Calculate public                   User B Key Generation             Select private                                   Calculate public                    Unit-4 Asymmertic Ciphers                                                       Darshan Institute of Engineering & Technology   ‹#›  Diffie-Hellman Key Exchange – Cont… 


>> Tokens are: 
[User, Key, Generation,             , Select, private,                                   , Calculate, public,                   , User, B, Key, Generation,             , Select, private,                                   , Calculate, public,                    , Unit-4, Asymmertic, Ciphers,                                                       , Darshan, Institute, Engineering, &, Technology,   , ‹#›,  , Diffie, -, Hellman, Key, Exchange, –, Cont, …] 

>> PoS Tags are: 
[('User', 'PROPN'), ('Key', 'PROPN'), ('Generation', 'PROPN'), ('            ', 'SPACE'), ('Select', 'PROPN'), ('private', 'ADJ'), ('                                  ', 'SPACE'), ('Calculate', 'PROPN'), ('public', 'ADJ'), ('                  ', 'SPACE'), ('User', 'PROPN'), ('B', 'PROPN'), ('Key', 'PROPN'), ('Generation', 'PROPN'), ('            ', 'SPACE'), ('Select', 'PROPN'), ('private', 'ADJ'), ('                                  ', 'SPACE'), ('Calculate', 'PROPN'), ('public', 'ADJ'), ('                   ', 'SPACE'), ('Unit-4', 'NOUN'), ('Asymmertic', 'PROPN'), ('Ciphers', 'PROPN'), ('                                                      ', 'SPACE'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('Engineering', 'PROPN'), ('&', 'CCONJ'), ('Technology', 'PROPN'), ('  ', 'SPACE'), ('‹#›', 'VERB'), (' ', 'SPACE'), ('Diffie', 'PROPN'), ('-', 'PUNCT'), ('Hellman', 'PROPN'), ('Key', 'PROPN'), ('Exchange', 'PROPN'), ('–', 'PUNCT'), ('Cont', 'PROPN'), ('…', 'PUNCT')] 

>> Dependency Tags are: 
[('User', 'compound'), ('Key', 'compound'), ('Generation', 'compound'), ('            ', 'compound'), ('Select', 'nsubj'), ('private', 'amod'), ('                                  ', 'nmod'), ('Calculate', 'compound'), ('public', 'amod'), ('                  ', 'compound'), ('User', 'compound'), ('B', 'compound'), ('Key', 'compound'), ('Generation', 'compound'), ('            ', 'appos'), ('Select', 'dobj'), ('private', 'amod'), ('                                  ', 'nmod'), ('Calculate', 'compound'), ('public', 'amod'), ('                   ', 'compound'), ('Unit-4', 'compound'), ('Asymmertic', 'compound'), ('Ciphers', 'dobj'), ('                                                      ', 'compound'), ('Darshan', 'compound'), ('Institute', 'appos'), ('Engineering', 'pobj'), ('&', 'cc'), ('Technology', 'conj'), ('  ', 'appos'), ('‹#›', 'ROOT'), (' ', 'npadvmod'), ('Diffie', 'compound'), ('-', 'punct'), ('Hellman', 'compound'), ('Key', 'compound'), ('Exchange', 'dobj'), ('–', 'punct'), ('Cont', 'appos'), ('…', 'punct')]

>> Bigrams: 
[[User, Key], [Key, Generation], [Generation,             ], [            , Select], [Select, private], [private,                                   ], [                                  , Calculate], [Calculate, public], [public,                   ], [                  , User], [User, B], [B, Key], [Key, Generation], [Generation,             ], [            , Select], [Select, private], [private,                                   ], [                                  , Calculate], [Calculate, public], [public,                    ], [                   , Unit-4], [Unit-4, Asymmertic], [Asymmertic, Ciphers], [Ciphers,                                                       ], [                                                      , Darshan], [Darshan, Institute], [Institute, Engineering], [Engineering, &], [&, Technology], [Technology,   ], [  , ‹#›], [‹#›,  ], [ , Diffie], [Diffie, -], [-, Hellman], [Hellman, Key], [Key, Exchange], [Exchange, –], [–, Cont], [Cont, …]]

>> Trigrams: 
[[User, Key, Generation], [Key, Generation,             ], [Generation,             , Select], [            , Select, private], [Select, private,                                   ], [private,                                   , Calculate], [                                  , Calculate, public], [Calculate, public,                   ], [public,                   , User], [                  , User, B], [User, B, Key], [B, Key, Generation], [Key, Generation,             ], [Generation,             , Select], [            , Select, private], [Select, private,                                   ], [private,                                   , Calculate], [                                  , Calculate, public], [Calculate, public,                    ], [public,                    , Unit-4], [                   , Unit-4, Asymmertic], [Unit-4, Asymmertic, Ciphers], [Asymmertic, Ciphers,                                                       ], [Ciphers,                                                       , Darshan], [                                                      , Darshan, Institute], [Darshan, Institute, Engineering], [Institute, Engineering, &], [Engineering, &, Technology], [&, Technology,   ], [Technology,   , ‹#›], [  , ‹#›,  ], [‹#›,  , Diffie], [ , Diffie, -], [Diffie, -, Hellman], [-, Hellman, Key], [Hellman, Key, Exchange], [Key, Exchange, –], [Exchange, –, Cont], [–, Cont, …]]

>> Noun Phrases are: 
[User A Key Generation             Select, Select, private                                   Calculate public                    Unit-4 Asymmertic Ciphers,                                                       Darshan Institute, Engineering, Technology, Diffie-Hellman Key Exchange, Cont]

>> Named Entities are: 
[('User A Key Generation             Select private', 'WORK_OF_ART'), ('User B Key Generation             Select', 'ORG'), ('Darshan Institute of Engineering & Technology', 'ORG'), ('Diffie-Hellman Key Exchange', 'ORG')]


============================ Sentence 102 =============================

User A Key Generation             Select private                                   Calculate public                  User B Key Generation              


>> Tokens are: 
[User, Key, Generation,             , Select, private,                                   , Calculate, public,                  , User, B, Key, Generation,             ] 

>> PoS Tags are: 
[('User', 'PROPN'), ('Key', 'PROPN'), ('Generation', 'PROPN'), ('            ', 'SPACE'), ('Select', 'PROPN'), ('private', 'ADJ'), ('                                  ', 'SPACE'), ('Calculate', 'PROPN'), ('public', 'ADJ'), ('                 ', 'SPACE'), ('User', 'PROPN'), ('B', 'PROPN'), ('Key', 'PROPN'), ('Generation', 'PROPN'), ('            ', 'SPACE')] 

>> Dependency Tags are: 
[('User', 'compound'), ('Key', 'compound'), ('Generation', 'compound'), ('            ', 'compound'), ('Select', 'ROOT'), ('private', 'amod'), ('                                  ', 'nmod'), ('Calculate', 'dobj'), ('public', 'amod'), ('                 ', 'dobj'), ('User', 'compound'), ('B', 'compound'), ('Key', 'compound'), ('Generation', 'compound'), ('            ', 'appos')]

>> Bigrams: 
[[User, Key], [Key, Generation], [Generation,             ], [            , Select], [Select, private], [private,                                   ], [                                  , Calculate], [Calculate, public], [public,                  ], [                 , User], [User, B], [B, Key], [Key, Generation], [Generation,             ]]

>> Trigrams: 
[[User, Key, Generation], [Key, Generation,             ], [Generation,             , Select], [            , Select, private], [Select, private,                                   ], [private,                                   , Calculate], [                                  , Calculate, public], [Calculate, public,                  ], [public,                  , User], [                 , User, B], [User, B, Key], [B, Key, Generation], [Key, Generation,             ]]

>> Noun Phrases are: 
[User A Key Generation             Select, private                                   Calculate]

>> Named Entities are: 
[]


============================ Sentence 103 =============================

Select private                                   Calculate public                  Calculation of Secret Key by 


>> Tokens are: 
[Select, private,                                   , Calculate, public,                  , Calculation, Secret, Key] 

>> PoS Tags are: 
[('Select', 'PROPN'), ('private', 'ADJ'), ('                                  ', 'SPACE'), ('Calculate', 'PROPN'), ('public', 'ADJ'), ('                 ', 'SPACE'), ('Calculation', 'PROPN'), ('Secret', 'PROPN'), ('Key', 'PROPN')] 

>> Dependency Tags are: 
[('Select', 'ROOT'), ('private', 'amod'), ('                                  ', 'nmod'), ('Calculate', 'compound'), ('public', 'amod'), ('                 ', 'compound'), ('Calculation', 'dobj'), ('Secret', 'compound'), ('Key', 'pobj')]

>> Bigrams: 
[[Select, private], [private,                                   ], [                                  , Calculate], [Calculate, public], [public,                  ], [                 , Calculation], [Calculation, Secret], [Secret, Key]]

>> Trigrams: 
[[Select, private,                                   ], [private,                                   , Calculate], [                                  , Calculate, public], [Calculate, public,                  ], [public,                  , Calculation], [                 , Calculation, Secret], [Calculation, Secret, Key]]

>> Noun Phrases are: 
[Select, private                                   Calculate public                  Calculation, Secret Key]

>> Named Entities are: 
[]


============================ Sentence 104 =============================

User A               


>> Tokens are: 
[User,              ] 

>> PoS Tags are: 
[('User', 'PROPN'), ('             ', 'SPACE')] 

>> Dependency Tags are: 
[('User', 'compound'), ('             ', 'appos')]

>> Bigrams: 
[[User,              ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[User A]

>> Named Entities are: 
[]


============================ Sentence 105 =============================

Calculation of Secret Key by User b                 Unit-4 Asymmertic Ciphers                                                       Darshan Institute of Engineering & Technology   ‹#›   


>> Tokens are: 
[Calculation, Secret, Key, User, b,                 , Unit-4, Asymmertic, Ciphers,                                                       , Darshan, Institute, Engineering, &, Technology,   , ‹#›,  ] 

>> PoS Tags are: 
[('Calculation', 'PROPN'), ('Secret', 'PROPN'), ('Key', 'PROPN'), ('User', 'PROPN'), ('b', 'PROPN'), ('                ', 'SPACE'), ('Unit-4', 'NOUN'), ('Asymmertic', 'PROPN'), ('Ciphers', 'PROPN'), ('                                                      ', 'SPACE'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('Engineering', 'PROPN'), ('&', 'CCONJ'), ('Technology', 'PROPN'), ('  ', 'SPACE'), ('‹#›', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Calculation', 'nmod'), ('Secret', 'compound'), ('Key', 'pobj'), ('User', 'pobj'), ('b', 'prep'), ('                ', 'compound'), ('Unit-4', 'compound'), ('Asymmertic', 'compound'), ('Ciphers', 'appos'), ('                                                      ', 'compound'), ('Darshan', 'compound'), ('Institute', 'appos'), ('Engineering', 'pobj'), ('&', 'cc'), ('Technology', 'conj'), ('  ', 'nsubj'), ('‹#›', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[Calculation, Secret], [Secret, Key], [Key, User], [User, b], [b,                 ], [                , Unit-4], [Unit-4, Asymmertic], [Asymmertic, Ciphers], [Ciphers,                                                       ], [                                                      , Darshan], [Darshan, Institute], [Institute, Engineering], [Engineering, &], [&, Technology], [Technology,   ], [  , ‹#›], [‹#›,  ]]

>> Trigrams: 
[[Calculation, Secret, Key], [Secret, Key, User], [Key, User, b], [User, b,                 ], [b,                 , Unit-4], [                , Unit-4, Asymmertic], [Unit-4, Asymmertic, Ciphers], [Asymmertic, Ciphers,                                                       ], [Ciphers,                                                       , Darshan], [                                                      , Darshan, Institute], [Darshan, Institute, Engineering], [Institute, Engineering, &], [Engineering, &, Technology], [&, Technology,   ], [Technology,   , ‹#›], [  , ‹#›,  ]]

>> Noun Phrases are: 
[Secret Key, User,                 Unit-4 Asymmertic Ciphers,                                                       Darshan Institute, Engineering, Technology]

>> Named Entities are: 
[('Darshan Institute of Engineering & Technology', 'ORG')]


============================ Sentence 106 =============================

Diffie-Hellman Key Exchange – Cont… 


>> Tokens are: 
[Diffie, -, Hellman, Key, Exchange, –, Cont, …] 

>> PoS Tags are: 
[('Diffie', 'PROPN'), ('-', 'PUNCT'), ('Hellman', 'PROPN'), ('Key', 'PROPN'), ('Exchange', 'PROPN'), ('–', 'PUNCT'), ('Cont', 'PROPN'), ('…', 'PUNCT')] 

>> Dependency Tags are: 
[('Diffie', 'compound'), ('-', 'punct'), ('Hellman', 'compound'), ('Key', 'compound'), ('Exchange', 'ROOT'), ('–', 'punct'), ('Cont', 'appos'), ('…', 'punct')]

>> Bigrams: 
[[Diffie, -], [-, Hellman], [Hellman, Key], [Key, Exchange], [Exchange, –], [–, Cont], [Cont, …]]

>> Trigrams: 
[[Diffie, -, Hellman], [-, Hellman, Key], [Hellman, Key, Exchange], [Key, Exchange, –], [Exchange, –, Cont], [–, Cont, …]]

>> Noun Phrases are: 
[Diffie-Hellman Key Exchange, Cont]

>> Named Entities are: 
[('Diffie-Hellman Key Exchange', 'ORG')]


============================ Sentence 107 =============================

User A Key Generation Private            ,                    Public             User B Key Generation Private           ,                    Public             Secret Key by User A :   


>> Tokens are: 
[User, Key, Generation, Private,            , ,,                    , Public,             , User, B, Key, Generation, Private,           , ,,                    , Public,             , Secret, Key, User, :,  ] 

>> PoS Tags are: 
[('User', 'PROPN'), ('Key', 'PROPN'), ('Generation', 'PROPN'), ('Private', 'PROPN'), ('           ', 'SPACE'), (',', 'PUNCT'), ('                   ', 'SPACE'), ('Public', 'ADJ'), ('            ', 'SPACE'), ('User', 'PROPN'), ('B', 'PROPN'), ('Key', 'PROPN'), ('Generation', 'PROPN'), ('Private', 'PROPN'), ('          ', 'SPACE'), (',', 'PUNCT'), ('                   ', 'SPACE'), ('Public', 'ADJ'), ('            ', 'SPACE'), ('Secret', 'PROPN'), ('Key', 'PROPN'), ('User', 'PROPN'), (':', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('User', 'compound'), ('Key', 'amod'), ('Generation', 'compound'), ('Private', 'compound'), ('           ', 'ROOT'), (',', 'punct'), ('                   ', 'compound'), ('Public', 'compound'), ('            ', 'compound'), ('User', 'compound'), ('B', 'compound'), ('Key', 'compound'), ('Generation', 'appos'), ('Private', 'compound'), ('          ', 'appos'), (',', 'punct'), ('                   ', 'compound'), ('Public', 'compound'), ('            ', 'compound'), ('Secret', 'compound'), ('Key', 'appos'), ('User', 'compound'), (':', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[User, Key], [Key, Generation], [Generation, Private], [Private,            ], [           , ,], [,,                    ], [                   , Public], [Public,             ], [            , User], [User, B], [B, Key], [Key, Generation], [Generation, Private], [Private,           ], [          , ,], [,,                    ], [                   , Public], [Public,             ], [            , Secret], [Secret, Key], [Key, User], [User, :], [:,  ]]

>> Trigrams: 
[[User, Key, Generation], [Key, Generation, Private], [Generation, Private,            ], [Private,            , ,], [           , ,,                    ], [,,                    , Public], [                   , Public,             ], [Public,             , User], [            , User, B], [User, B, Key], [B, Key, Generation], [Key, Generation, Private], [Generation, Private,           ], [Private,           , ,], [          , ,,                    ], [,,                    , Public], [                   , Public,             ], [Public,             , Secret], [            , Secret, Key], [Secret, Key, User], [Key, User, :], [User, :,  ]]

>> Noun Phrases are: 
[Key Generation,                    Public             Secret Key, User A]

>> Named Entities are: 
[]


============================ Sentence 108 =============================

Secret Key by User B :                       Unit-4 Asymmertic Ciphers                                                       Darshan Institute of Engineering & Technology   ‹#›     Diffie-Hellman Key Exchange Example Alice and bob agrees on a prime number   as primitive root of   


>> Tokens are: 
[Secret, Key, User, B, :,                       , Unit-4, Asymmertic, Ciphers,                                                       , Darshan, Institute, Engineering, &, Technology,   , ‹#›,     , Diffie, -, Hellman, Key, Exchange, Example, Alice, bob, agrees, prime, number,   , primitive, root,  ] 

>> PoS Tags are: 
[('Secret', 'PROPN'), ('Key', 'PROPN'), ('User', 'PROPN'), ('B', 'PROPN'), (':', 'PUNCT'), ('                      ', 'SPACE'), ('Unit-4', 'NOUN'), ('Asymmertic', 'PROPN'), ('Ciphers', 'PROPN'), ('                                                      ', 'SPACE'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('Engineering', 'PROPN'), ('&', 'CCONJ'), ('Technology', 'PROPN'), ('  ', 'SPACE'), ('‹#›', 'VERB'), ('    ', 'SPACE'), ('Diffie', 'PROPN'), ('-', 'PUNCT'), ('Hellman', 'PROPN'), ('Key', 'PROPN'), ('Exchange', 'PROPN'), ('Example', 'PROPN'), ('Alice', 'PROPN'), ('bob', 'PROPN'), ('agrees', 'VERB'), ('prime', 'ADJ'), ('number', 'NOUN'), ('  ', 'SPACE'), ('primitive', 'ADJ'), ('root', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Secret', 'compound'), ('Key', 'nsubj'), ('User', 'compound'), ('B', 'pobj'), (':', 'punct'), ('                      ', 'nummod'), ('Unit-4', 'compound'), ('Asymmertic', 'compound'), ('Ciphers', 'appos'), ('                                                      ', 'compound'), ('Darshan', 'compound'), ('Institute', 'appos'), ('Engineering', 'pobj'), ('&', 'cc'), ('Technology', 'conj'), ('  ', 'appos'), ('‹#›', 'ROOT'), ('    ', 'nsubj'), ('Diffie', 'compound'), ('-', 'punct'), ('Hellman', 'compound'), ('Key', 'compound'), ('Exchange', 'compound'), ('Example', 'compound'), ('Alice', 'nsubj'), ('bob', 'conj'), ('agrees', 'ccomp'), ('prime', 'amod'), ('number', 'pobj'), ('  ', 'appos'), ('primitive', 'amod'), ('root', 'pobj'), (' ', 'pobj')]

>> Bigrams: 
[[Secret, Key], [Key, User], [User, B], [B, :], [:,                       ], [                      , Unit-4], [Unit-4, Asymmertic], [Asymmertic, Ciphers], [Ciphers,                                                       ], [                                                      , Darshan], [Darshan, Institute], [Institute, Engineering], [Engineering, &], [&, Technology], [Technology,   ], [  , ‹#›], [‹#›,     ], [    , Diffie], [Diffie, -], [-, Hellman], [Hellman, Key], [Key, Exchange], [Exchange, Example], [Example, Alice], [Alice, bob], [bob, agrees], [agrees, prime], [prime, number], [number,   ], [  , primitive], [primitive, root], [root,  ]]

>> Trigrams: 
[[Secret, Key, User], [Key, User, B], [User, B, :], [B, :,                       ], [:,                       , Unit-4], [                      , Unit-4, Asymmertic], [Unit-4, Asymmertic, Ciphers], [Asymmertic, Ciphers,                                                       ], [Ciphers,                                                       , Darshan], [                                                      , Darshan, Institute], [Darshan, Institute, Engineering], [Institute, Engineering, &], [Engineering, &, Technology], [&, Technology,   ], [Technology,   , ‹#›], [  , ‹#›,     ], [‹#›,     , Diffie], [    , Diffie, -], [Diffie, -, Hellman], [-, Hellman, Key], [Hellman, Key, Exchange], [Key, Exchange, Example], [Exchange, Example, Alice], [Example, Alice, bob], [Alice, bob, agrees], [bob, agrees, prime], [agrees, prime, number], [prime, number,   ], [number,   , primitive], [  , primitive, root], [primitive, root,  ]]

>> Noun Phrases are: 
[Secret Key, User B,                       Unit-4 Asymmertic Ciphers,                                                       Darshan Institute, Engineering, Technology, Diffie-Hellman Key Exchange Example Alice, bob, a prime number, primitive root]

>> Named Entities are: 
[('Darshan Institute of Engineering & Technology', 'ORG'), ('Diffie-Hellman Key Exchange Example Alice', 'ORG')]


============================ Sentence 109 =============================

Alice selects a private integer    


>> Tokens are: 
[Alice, selects, private, integer,   ] 

>> PoS Tags are: 
[('Alice', 'PROPN'), ('selects', 'VERB'), ('private', 'ADJ'), ('integer', 'NOUN'), ('  ', 'SPACE')] 

>> Dependency Tags are: 
[('Alice', 'nsubj'), ('selects', 'ROOT'), ('private', 'amod'), ('integer', 'dobj'), ('  ', 'punct')]

>> Bigrams: 
[[Alice, selects], [selects, private], [private, integer], [integer,   ]]

>> Trigrams: 
[[Alice, selects, private], [selects, private, integer], [private, integer,   ]]

>> Noun Phrases are: 
[Alice, a private integer]

>> Named Entities are: 
[('Alice', 'ORG')]


============================ Sentence 110 =============================

Alice computes  =>   


>> Tokens are: 
[Alice, computes,  , =, >,  ] 

>> PoS Tags are: 
[('Alice', 'PROPN'), ('computes', 'VERB'), (' ', 'SPACE'), ('=', 'PUNCT'), ('>', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Alice', 'nsubj'), ('computes', 'ROOT'), (' ', 'dobj'), ('=', 'punct'), ('>', 'npadvmod'), (' ', 'punct')]

>> Bigrams: 
[[Alice, computes], [computes,  ], [ , =], [=, >], [>,  ]]

>> Trigrams: 
[[Alice, computes,  ], [computes,  , =], [ , =, >], [=, >,  ]]

>> Noun Phrases are: 
[Alice]

>> Named Entities are: 
[('Alice', 'ORG')]


============================ Sentence 111 =============================

Bob selects a private integer    


>> Tokens are: 
[Bob, selects, private, integer,   ] 

>> PoS Tags are: 
[('Bob', 'PROPN'), ('selects', 'VERB'), ('private', 'ADJ'), ('integer', 'NOUN'), ('  ', 'SPACE')] 

>> Dependency Tags are: 
[('Bob', 'nsubj'), ('selects', 'ROOT'), ('private', 'amod'), ('integer', 'dobj'), ('  ', 'punct')]

>> Bigrams: 
[[Bob, selects], [selects, private], [private, integer], [integer,   ]]

>> Trigrams: 
[[Bob, selects, private], [selects, private, integer], [private, integer,   ]]

>> Noun Phrases are: 
[Bob, a private integer]

>> Named Entities are: 
[('Bob', 'PERSON')]


============================ Sentence 112 =============================

Bob computes  =>   


>> Tokens are: 
[Bob, computes,  , =, >,  ] 

>> PoS Tags are: 
[('Bob', 'PROPN'), ('computes', 'VERB'), (' ', 'SPACE'), ('=', 'PUNCT'), ('>', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Bob', 'nsubj'), ('computes', 'ROOT'), (' ', 'dobj'), ('=', 'punct'), ('>', 'npadvmod'), (' ', 'punct')]

>> Bigrams: 
[[Bob, computes], [computes,  ], [ , =], [=, >], [>,  ]]

>> Trigrams: 
[[Bob, computes,  ], [computes,  , =], [ , =, >], [=, >,  ]]

>> Noun Phrases are: 
[Bob]

>> Named Entities are: 
[('Bob', 'PERSON')]


============================ Sentence 113 =============================

Alice sends  to Bob and Bob sends  to Alice Alice computes key  =>   Bob computes key =>     Unit-4 Asymmertic Ciphers                                                       Darshan Institute of Engineering & Technology   ‹#›   


>> Tokens are: 
[Alice, sends,  , Bob, Bob, sends,  , Alice, Alice, computes, key,  , =, >,   , Bob, computes, key, =, >,     , Unit-4, Asymmertic, Ciphers,                                                       , Darshan, Institute, Engineering, &, Technology,   , ‹#›,  ] 

>> PoS Tags are: 
[('Alice', 'PROPN'), ('sends', 'VERB'), (' ', 'SPACE'), ('Bob', 'PROPN'), ('Bob', 'PROPN'), ('sends', 'VERB'), (' ', 'SPACE'), ('Alice', 'PROPN'), ('Alice', 'PROPN'), ('computes', 'VERB'), ('key', 'ADJ'), (' ', 'SPACE'), ('=', 'SYM'), ('>', 'X'), ('  ', 'SPACE'), ('Bob', 'PROPN'), ('computes', 'VERB'), ('key', 'ADJ'), ('=', 'PUNCT'), ('>', 'X'), ('    ', 'SPACE'), ('Unit-4', 'NOUN'), ('Asymmertic', 'PROPN'), ('Ciphers', 'PROPN'), ('                                                      ', 'SPACE'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('Engineering', 'PROPN'), ('&', 'CCONJ'), ('Technology', 'PROPN'), ('  ', 'SPACE'), ('‹#›', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Alice', 'nsubj'), ('sends', 'ccomp'), (' ', 'dobj'), ('Bob', 'pobj'), ('Bob', 'conj'), ('sends', 'conj'), (' ', 'dobj'), ('Alice', 'compound'), ('Alice', 'pobj'), ('computes', 'conj'), ('key', 'amod'), (' ', 'dobj'), ('=', 'punct'), ('>', 'punct'), ('  ', 'dobj'), ('Bob', 'nsubj'), ('computes', 'ROOT'), ('key', 'dobj'), ('=', 'punct'), ('>', 'punct'), ('    ', 'compound'), ('Unit-4', 'compound'), ('Asymmertic', 'compound'), ('Ciphers', 'npadvmod'), ('                                                      ', 'compound'), ('Darshan', 'compound'), ('Institute', 'appos'), ('Engineering', 'pobj'), ('&', 'cc'), ('Technology', 'conj'), ('  ', 'conj'), ('‹#›', 'punct'), (' ', 'dobj')]

>> Bigrams: 
[[Alice, sends], [sends,  ], [ , Bob], [Bob, Bob], [Bob, sends], [sends,  ], [ , Alice], [Alice, Alice], [Alice, computes], [computes, key], [key,  ], [ , =], [=, >], [>,   ], [  , Bob], [Bob, computes], [computes, key], [key, =], [=, >], [>,     ], [    , Unit-4], [Unit-4, Asymmertic], [Asymmertic, Ciphers], [Ciphers,                                                       ], [                                                      , Darshan], [Darshan, Institute], [Institute, Engineering], [Engineering, &], [&, Technology], [Technology,   ], [  , ‹#›], [‹#›,  ]]

>> Trigrams: 
[[Alice, sends,  ], [sends,  , Bob], [ , Bob, Bob], [Bob, Bob, sends], [Bob, sends,  ], [sends,  , Alice], [ , Alice, Alice], [Alice, Alice, computes], [Alice, computes, key], [computes, key,  ], [key,  , =], [ , =, >], [=, >,   ], [>,   , Bob], [  , Bob, computes], [Bob, computes, key], [computes, key, =], [key, =, >], [=, >,     ], [>,     , Unit-4], [    , Unit-4, Asymmertic], [Unit-4, Asymmertic, Ciphers], [Asymmertic, Ciphers,                                                       ], [Ciphers,                                                       , Darshan], [                                                      , Darshan, Institute], [Darshan, Institute, Engineering], [Institute, Engineering, &], [Engineering, &, Technology], [&, Technology,   ], [Technology,   , ‹#›], [  , ‹#›,  ]]

>> Noun Phrases are: 
[Alice, Bob, Bob, Alice Alice, Bob,                                                       Darshan Institute, Engineering, Technology]

>> Named Entities are: 
[('Alice', 'ORG'), ('Bob', 'PERSON'), ('Bob', 'PERSON'), ('Alice Alice', 'PERSON'), ('Bob', 'PERSON'), ('Darshan Institute of Engineering & Technology', 'ORG')]


============================ Sentence 114 =============================

Diffie-Hellman Key Exchange Illustration    Unit-4 


>> Tokens are: 
[Diffie, -, Hellman, Key, Exchange, Illustration,    , Unit-4] 

>> PoS Tags are: 
[('Diffie', 'PROPN'), ('-', 'PUNCT'), ('Hellman', 'PROPN'), ('Key', 'PROPN'), ('Exchange', 'PROPN'), ('Illustration', 'PROPN'), ('   ', 'SPACE'), ('Unit-4', 'PROPN')] 

>> Dependency Tags are: 
[('Diffie', 'compound'), ('-', 'punct'), ('Hellman', 'compound'), ('Key', 'compound'), ('Exchange', 'compound'), ('Illustration', 'compound'), ('   ', 'compound'), ('Unit-4', 'ROOT')]

>> Bigrams: 
[[Diffie, -], [-, Hellman], [Hellman, Key], [Key, Exchange], [Exchange, Illustration], [Illustration,    ], [   , Unit-4]]

>> Trigrams: 
[[Diffie, -, Hellman], [-, Hellman, Key], [Hellman, Key, Exchange], [Key, Exchange, Illustration], [Exchange, Illustration,    ], [Illustration,    , Unit-4]]

>> Noun Phrases are: 
[Diffie-Hellman Key Exchange Illustration    Unit-4]

>> Named Entities are: 
[('Diffie-Hellman Key Exchange Illustration', 'ORG')]


============================ Sentence 115 =============================

Asymmertic Ciphers                                                       Darshan Institute of Engineering & Technology   ‹#›   


>> Tokens are: 
[Asymmertic, Ciphers,                                                       , Darshan, Institute, Engineering, &, Technology,   , ‹#›,  ] 

>> PoS Tags are: 
[('Asymmertic', 'PROPN'), ('Ciphers', 'PROPN'), ('                                                      ', 'SPACE'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('Engineering', 'PROPN'), ('&', 'CCONJ'), ('Technology', 'PROPN'), ('  ', 'SPACE'), ('‹#›', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Asymmertic', 'compound'), ('Ciphers', 'nsubj'), ('                                                      ', 'compound'), ('Darshan', 'compound'), ('Institute', 'appos'), ('Engineering', 'pobj'), ('&', 'cc'), ('Technology', 'conj'), ('  ', 'conj'), ('‹#›', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[Asymmertic, Ciphers], [Ciphers,                                                       ], [                                                      , Darshan], [Darshan, Institute], [Institute, Engineering], [Engineering, &], [&, Technology], [Technology,   ], [  , ‹#›], [‹#›,  ]]

>> Trigrams: 
[[Asymmertic, Ciphers,                                                       ], [Ciphers,                                                       , Darshan], [                                                      , Darshan, Institute], [Darshan, Institute, Engineering], [Institute, Engineering, &], [Engineering, &, Technology], [&, Technology,   ], [Technology,   , ‹#›], [  , ‹#›,  ]]

>> Noun Phrases are: 
[Asymmertic Ciphers,                                                       Darshan Institute, Engineering, Technology]

>> Named Entities are: 
[('Darshan Institute of Engineering & Technology', 'ORG')]


============================ Sentence 116 =============================

Man in the middle attack Suppose Alice and Bob wish to exchange keys, and Darth is the adversary. 


>> Tokens are: 
[Man, middle, attack, Suppose, Alice, Bob, wish, exchange, keys, ,, Darth, adversary, .] 

>> PoS Tags are: 
[('Man', 'NOUN'), ('middle', 'ADJ'), ('attack', 'NOUN'), ('Suppose', 'PROPN'), ('Alice', 'PROPN'), ('Bob', 'PROPN'), ('wish', 'VERB'), ('exchange', 'VERB'), ('keys', 'NOUN'), (',', 'PUNCT'), ('Darth', 'PROPN'), ('adversary', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Man', 'nsubj'), ('middle', 'amod'), ('attack', 'pobj'), ('Suppose', 'ROOT'), ('Alice', 'nsubj'), ('Bob', 'conj'), ('wish', 'ccomp'), ('exchange', 'xcomp'), ('keys', 'dobj'), (',', 'punct'), ('Darth', 'nsubj'), ('adversary', 'attr'), ('.', 'punct')]

>> Bigrams: 
[[Man, middle], [middle, attack], [attack, Suppose], [Suppose, Alice], [Alice, Bob], [Bob, wish], [wish, exchange], [exchange, keys], [keys, ,], [,, Darth], [Darth, adversary], [adversary, .]]

>> Trigrams: 
[[Man, middle, attack], [middle, attack, Suppose], [attack, Suppose, Alice], [Suppose, Alice, Bob], [Alice, Bob, wish], [Bob, wish, exchange], [wish, exchange, keys], [exchange, keys, ,], [keys, ,, Darth], [,, Darth, adversary], [Darth, adversary, .]]

>> Noun Phrases are: 
[Man, the middle attack, Alice, Bob, keys, Darth, the adversary]

>> Named Entities are: 
[('Suppose Alice', 'PERSON'), ('Bob', 'PERSON'), ('Darth', 'PERSON')]


============================ Sentence 117 =============================

Darth prepares for the attack by generating two random private keys XD1 and XD2 and then computes corresponding public keys YD1 and YD2. 


>> Tokens are: 
[Darth, prepares, attack, generating, random, private, keys, XD1, XD2, computes, corresponding, public, keys, YD1, YD2, .] 

>> PoS Tags are: 
[('Darth', 'PROPN'), ('prepares', 'VERB'), ('attack', 'NOUN'), ('generating', 'VERB'), ('random', 'ADJ'), ('private', 'ADJ'), ('keys', 'NOUN'), ('XD1', 'PROPN'), ('XD2', 'PROPN'), ('computes', 'VERB'), ('corresponding', 'VERB'), ('public', 'ADJ'), ('keys', 'NOUN'), ('YD1', 'PROPN'), ('YD2', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Darth', 'nsubj'), ('prepares', 'ROOT'), ('attack', 'pobj'), ('generating', 'pcomp'), ('random', 'amod'), ('private', 'amod'), ('keys', 'compound'), ('XD1', 'dobj'), ('XD2', 'conj'), ('computes', 'conj'), ('corresponding', 'amod'), ('public', 'amod'), ('keys', 'compound'), ('YD1', 'dobj'), ('YD2', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[Darth, prepares], [prepares, attack], [attack, generating], [generating, random], [random, private], [private, keys], [keys, XD1], [XD1, XD2], [XD2, computes], [computes, corresponding], [corresponding, public], [public, keys], [keys, YD1], [YD1, YD2], [YD2, .]]

>> Trigrams: 
[[Darth, prepares, attack], [prepares, attack, generating], [attack, generating, random], [generating, random, private], [random, private, keys], [private, keys, XD1], [keys, XD1, XD2], [XD1, XD2, computes], [XD2, computes, corresponding], [computes, corresponding, public], [corresponding, public, keys], [public, keys, YD1], [keys, YD1, YD2], [YD1, YD2, .]]

>> Noun Phrases are: 
[Darth, the attack, two random private keys XD1, XD2, corresponding public keys YD1, YD2]

>> Named Entities are: 
[('Darth', 'PERSON'), ('two', 'CARDINAL'), ('XD1', 'GPE'), ('YD2', 'DATE')]


============================ Sentence 118 =============================

Alice transmits YA to Bob. 


>> Tokens are: 
[Alice, transmits, YA, Bob, .] 

>> PoS Tags are: 
[('Alice', 'PROPN'), ('transmits', 'VERB'), ('YA', 'PROPN'), ('Bob', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Alice', 'nsubj'), ('transmits', 'ROOT'), ('YA', 'dobj'), ('Bob', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Alice, transmits], [transmits, YA], [YA, Bob], [Bob, .]]

>> Trigrams: 
[[Alice, transmits, YA], [transmits, YA, Bob], [YA, Bob, .]]

>> Noun Phrases are: 
[Alice, YA, Bob]

>> Named Entities are: 
[('Alice', 'ORG'), ('YA', 'PERSON'), ('Bob', 'PERSON')]


============================ Sentence 119 =============================

Darth intercepts YA and transmits YD1 to Bob. 


>> Tokens are: 
[Darth, intercepts, YA, transmits, YD1, Bob, .] 

>> PoS Tags are: 
[('Darth', 'PROPN'), ('intercepts', 'VERB'), ('YA', 'PROPN'), ('transmits', 'VERB'), ('YD1', 'PROPN'), ('Bob', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Darth', 'nsubj'), ('intercepts', 'ROOT'), ('YA', 'dobj'), ('transmits', 'conj'), ('YD1', 'dobj'), ('Bob', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Darth, intercepts], [intercepts, YA], [YA, transmits], [transmits, YD1], [YD1, Bob], [Bob, .]]

>> Trigrams: 
[[Darth, intercepts, YA], [intercepts, YA, transmits], [YA, transmits, YD1], [transmits, YD1, Bob], [YD1, Bob, .]]

>> Noun Phrases are: 
[Darth, YA, YD1, Bob]

>> Named Entities are: 
[('Darth', 'PERSON'), ('Bob', 'PERSON')]


============================ Sentence 120 =============================

Darth also calculates K2=(YA)XD2 mod 


>> Tokens are: 
[Darth, calculates, K2=(YA)XD2, mod] 

>> PoS Tags are: 
[('Darth', 'PROPN'), ('calculates', 'VERB'), ('K2=(YA)XD2', 'ADJ'), ('mod', 'NOUN')] 

>> Dependency Tags are: 
[('Darth', 'nsubj'), ('calculates', 'ROOT'), ('K2=(YA)XD2', 'amod'), ('mod', 'dobj')]

>> Bigrams: 
[[Darth, calculates], [calculates, K2=(YA)XD2], [K2=(YA)XD2, mod]]

>> Trigrams: 
[[Darth, calculates, K2=(YA)XD2], [calculates, K2=(YA)XD2, mod]]

>> Noun Phrases are: 
[Darth, K2=(YA)XD2 mod]

>> Named Entities are: 
[('Darth', 'PERSON')]


============================ Sentence 121 =============================

q. Bob receives YD1 and calculates K1 =   


>> Tokens are: 
[q., Bob, receives, YD1, calculates, K1, =,  ] 

>> PoS Tags are: 
[('q.', 'NOUN'), ('Bob', 'PROPN'), ('receives', 'VERB'), ('YD1', 'PROPN'), ('calculates', 'VERB'), ('K1', 'NOUN'), ('=', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('q.', 'npadvmod'), ('Bob', 'nsubj'), ('receives', 'ROOT'), ('YD1', 'dobj'), ('calculates', 'conj'), ('K1', 'dobj'), ('=', 'punct'), (' ', 'dobj')]

>> Bigrams: 
[[q., Bob], [Bob, receives], [receives, YD1], [YD1, calculates], [calculates, K1], [K1, =], [=,  ]]

>> Trigrams: 
[[q., Bob, receives], [Bob, receives, YD1], [receives, YD1, calculates], [YD1, calculates, K1], [calculates, K1, =], [K1, =,  ]]

>> Noun Phrases are: 
[Bob, YD1, K1]

>> Named Entities are: 
[('Bob', 'PERSON'), ('K1', 'PERSON')]


============================ Sentence 122 =============================

(YD1)XB mod q. Bob transmits YB to Alice. 


>> Tokens are: 
[(, YD1)XB, mod, q., Bob, transmits, YB, Alice, .] 

>> PoS Tags are: 
[('(', 'PUNCT'), ('YD1)XB', 'PROPN'), ('mod', 'NOUN'), ('q.', 'PROPN'), ('Bob', 'PROPN'), ('transmits', 'VERB'), ('YB', 'PROPN'), ('Alice', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('(', 'punct'), ('YD1)XB', 'compound'), ('mod', 'npadvmod'), ('q.', 'compound'), ('Bob', 'nsubj'), ('transmits', 'ROOT'), ('YB', 'dobj'), ('Alice', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[(, YD1)XB], [YD1)XB, mod], [mod, q.], [q., Bob], [Bob, transmits], [transmits, YB], [YB, Alice], [Alice, .]]

>> Trigrams: 
[[(, YD1)XB, mod], [YD1)XB, mod, q.], [mod, q., Bob], [q., Bob, transmits], [Bob, transmits, YB], [transmits, YB, Alice], [YB, Alice, .]]

>> Noun Phrases are: 
[q. Bob, YB, Alice]

>> Named Entities are: 
[('Bob', 'PERSON'), ('Alice', 'ORG')]


============================ Sentence 123 =============================

Darth intercepts YB and transmits YD2 to Alice. 


>> Tokens are: 
[Darth, intercepts, YB, transmits, YD2, Alice, .] 

>> PoS Tags are: 
[('Darth', 'NOUN'), ('intercepts', 'NOUN'), ('YB', 'PROPN'), ('transmits', 'VERB'), ('YD2', 'PROPN'), ('Alice', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Darth', 'nsubj'), ('intercepts', 'compound'), ('YB', 'nsubj'), ('transmits', 'ROOT'), ('YD2', 'dobj'), ('Alice', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Darth, intercepts], [intercepts, YB], [YB, transmits], [transmits, YD2], [YD2, Alice], [Alice, .]]

>> Trigrams: 
[[Darth, intercepts, YB], [intercepts, YB, transmits], [YB, transmits, YD2], [transmits, YD2, Alice], [YD2, Alice, .]]

>> Noun Phrases are: 
[Darth, YD2, Alice]

>> Named Entities are: 
[('Darth', 'PERSON'), ('YD2', 'DATE'), ('Alice', 'ORG')]


============================ Sentence 124 =============================

Darth calculates K1=(YB)XD1 mod q. Alice receives YD2 and calculates K2 = ( 


>> Tokens are: 
[Darth, calculates, K1=(YB)XD1, mod, q., Alice, receives, YD2, calculates, K2, =, (] 

>> PoS Tags are: 
[('Darth', 'PROPN'), ('calculates', 'VERB'), ('K1=(YB)XD1', 'ADV'), ('mod', 'NOUN'), ('q.', 'ADV'), ('Alice', 'PROPN'), ('receives', 'VERB'), ('YD2', 'PROPN'), ('calculates', 'VERB'), ('K2', 'PROPN'), ('=', 'PUNCT'), ('(', 'PUNCT')] 

>> Dependency Tags are: 
[('Darth', 'nsubj'), ('calculates', 'ROOT'), ('K1=(YB)XD1', 'compound'), ('mod', 'dobj'), ('q.', 'mark'), ('Alice', 'nsubj'), ('receives', 'advcl'), ('YD2', 'dobj'), ('calculates', 'conj'), ('K2', 'dobj'), ('=', 'punct'), ('(', 'punct')]

>> Bigrams: 
[[Darth, calculates], [calculates, K1=(YB)XD1], [K1=(YB)XD1, mod], [mod, q.], [q., Alice], [Alice, receives], [receives, YD2], [YD2, calculates], [calculates, K2], [K2, =], [=, (]]

>> Trigrams: 
[[Darth, calculates, K1=(YB)XD1], [calculates, K1=(YB)XD1, mod], [K1=(YB)XD1, mod, q.], [mod, q., Alice], [q., Alice, receives], [Alice, receives, YD2], [receives, YD2, calculates], [YD2, calculates, K2], [calculates, K2, =], [K2, =, (]]

>> Noun Phrases are: 
[Darth, K1=(YB)XD1 mod, Alice, YD2, K2]

>> Named Entities are: 
[('Darth', 'PERSON'), ('Alice', 'ORG'), ('YD2', 'DATE'), ('K2', 'PERSON')]


============================ Sentence 125 =============================

YD2)XA mod q.   Unit-4 


>> Tokens are: 
[YD2)XA, mod, q.,   , Unit-4] 

>> PoS Tags are: 
[('YD2)XA', 'PROPN'), ('mod', 'ADJ'), ('q.', 'NOUN'), ('  ', 'SPACE'), ('Unit-4', 'NOUN')] 

>> Dependency Tags are: 
[('YD2)XA', 'compound'), ('mod', 'compound'), ('q.', 'ROOT'), ('  ', 'nummod'), ('Unit-4', 'punct')]

>> Bigrams: 
[[YD2)XA, mod], [mod, q.], [q.,   ], [  , Unit-4]]

>> Trigrams: 
[[YD2)XA, mod, q.], [mod, q.,   ], [q.,   , Unit-4]]

>> Noun Phrases are: 
[YD2)XA mod q.]

>> Named Entities are: 
[('Unit-4', 'ORG')]


============================ Sentence 126 =============================

Asymmertic Ciphers                                                       Darshan Institute of Engineering & Technology   ‹#› 


>> Tokens are: 
[Asymmertic, Ciphers,                                                       , Darshan, Institute, Engineering, &, Technology,   , ‹#›] 

>> PoS Tags are: 
[('Asymmertic', 'PROPN'), ('Ciphers', 'PROPN'), ('                                                      ', 'SPACE'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('Engineering', 'PROPN'), ('&', 'CCONJ'), ('Technology', 'PROPN'), ('  ', 'SPACE'), ('‹#›', 'VERB')] 

>> Dependency Tags are: 
[('Asymmertic', 'compound'), ('Ciphers', 'ROOT'), ('                                                      ', 'compound'), ('Darshan', 'compound'), ('Institute', 'appos'), ('Engineering', 'pobj'), ('&', 'cc'), ('Technology', 'conj'), ('  ', 'conj'), ('‹#›', 'punct')]

>> Bigrams: 
[[Asymmertic, Ciphers], [Ciphers,                                                       ], [                                                      , Darshan], [Darshan, Institute], [Institute, Engineering], [Engineering, &], [&, Technology], [Technology,   ], [  , ‹#›]]

>> Trigrams: 
[[Asymmertic, Ciphers,                                                       ], [Ciphers,                                                       , Darshan], [                                                      , Darshan, Institute], [Darshan, Institute, Engineering], [Institute, Engineering, &], [Engineering, &, Technology], [&, Technology,   ], [Technology,   , ‹#›]]

>> Noun Phrases are: 
[Asymmertic Ciphers,                                                       Darshan Institute, Engineering, Technology]

>> Named Entities are: 
[('Darshan Institute of Engineering & Technology', 'ORG')]
