				 *** Text Processing using Spacy *** 


============================ Sentence 1 =============================

AI-18 FeedBack ANN Here, feedback loops are allowed. 


>> Tokens are: 
[AI-18, FeedBack, ANN, ,, feedback, loops, allowed, .] 

>> PoS Tags are: 
[('AI-18', 'PROPN'), ('FeedBack', 'PROPN'), ('ANN', 'PROPN'), (',', 'PUNCT'), ('feedback', 'NOUN'), ('loops', 'NOUN'), ('allowed', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('AI-18', 'compound'), ('FeedBack', 'compound'), ('ANN', 'nsubjpass'), (',', 'punct'), ('feedback', 'compound'), ('loops', 'nsubjpass'), ('allowed', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[AI-18, FeedBack], [FeedBack, ANN], [ANN, ,], [,, feedback], [feedback, loops], [loops, allowed], [allowed, .]]

>> Trigrams: 
[[AI-18, FeedBack, ANN], [FeedBack, ANN, ,], [ANN, ,, feedback], [,, feedback, loops], [feedback, loops, allowed], [loops, allowed, .]]

>> Noun Phrases are: 
[AI-18 FeedBack ANN, feedback loops]

>> Named Entities are: 
[]


============================ Sentence 2 =============================

They are used in content addressable memories. 


>> Tokens are: 
[content, addressable, memories, .] 

>> PoS Tags are: 
[('content', 'NOUN'), ('addressable', 'ADJ'), ('memories', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('content', 'pobj'), ('addressable', 'amod'), ('memories', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[content, addressable], [addressable, memories], [memories, .]]

>> Trigrams: 
[[content, addressable, memories], [addressable, memories, .]]

>> Noun Phrases are: 
[They, content, addressable memories]

>> Named Entities are: 
[]


============================ Sentence 3 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 4 =============================

Working of ANNs In the topology diagrams shown, each arrow represents a connection between two neurons and indicates the pathway for the flow of information. 


>> Tokens are: 
[Working, ANNs, topology, diagrams, shown, ,, arrow, represents, connection, neurons, indicates, pathway, flow, information, .] 

>> PoS Tags are: 
[('Working', 'VERB'), ('ANNs', 'NOUN'), ('topology', 'NOUN'), ('diagrams', 'NOUN'), ('shown', 'VERB'), (',', 'PUNCT'), ('arrow', 'NOUN'), ('represents', 'VERB'), ('connection', 'NOUN'), ('neurons', 'NOUN'), ('indicates', 'VERB'), ('pathway', 'NOUN'), ('flow', 'NOUN'), ('information', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Working', 'nsubj'), ('ANNs', 'pobj'), ('topology', 'compound'), ('diagrams', 'pobj'), ('shown', 'advcl'), (',', 'punct'), ('arrow', 'nsubj'), ('represents', 'ROOT'), ('connection', 'dobj'), ('neurons', 'pobj'), ('indicates', 'conj'), ('pathway', 'dobj'), ('flow', 'pobj'), ('information', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Working, ANNs], [ANNs, topology], [topology, diagrams], [diagrams, shown], [shown, ,], [,, arrow], [arrow, represents], [represents, connection], [connection, neurons], [neurons, indicates], [indicates, pathway], [pathway, flow], [flow, information], [information, .]]

>> Trigrams: 
[[Working, ANNs, topology], [ANNs, topology, diagrams], [topology, diagrams, shown], [diagrams, shown, ,], [shown, ,, arrow], [,, arrow, represents], [arrow, represents, connection], [represents, connection, neurons], [connection, neurons, indicates], [neurons, indicates, pathway], [indicates, pathway, flow], [pathway, flow, information], [flow, information, .]]

>> Noun Phrases are: 
[ANNs, the topology diagrams, each arrow, a connection, two neurons, the pathway, the flow, information]

>> Named Entities are: 
[('two', 'CARDINAL')]


============================ Sentence 5 =============================

Each connection has a weight, an integer number that controls the signal between the two neurons. 


>> Tokens are: 
[connection, weight, ,, integer, number, controls, signal, neurons, .] 

>> PoS Tags are: 
[('connection', 'NOUN'), ('weight', 'NOUN'), (',', 'PUNCT'), ('integer', 'NOUN'), ('number', 'NOUN'), ('controls', 'VERB'), ('signal', 'NOUN'), ('neurons', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('connection', 'nsubj'), ('weight', 'dobj'), (',', 'punct'), ('integer', 'compound'), ('number', 'appos'), ('controls', 'relcl'), ('signal', 'dobj'), ('neurons', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[connection, weight], [weight, ,], [,, integer], [integer, number], [number, controls], [controls, signal], [signal, neurons], [neurons, .]]

>> Trigrams: 
[[connection, weight, ,], [weight, ,, integer], [,, integer, number], [integer, number, controls], [number, controls, signal], [controls, signal, neurons], [signal, neurons, .]]

>> Noun Phrases are: 
[Each connection, a weight, an integer number, the signal, the two neurons]

>> Named Entities are: 
[('two', 'CARDINAL')]


============================ Sentence 6 =============================

If the network generates a “good or desired” output, there is no need to adjust the weights. 


>> Tokens are: 
[network, generates, “, good, desired, ”, output, ,, need, adjust, weights, .] 

>> PoS Tags are: 
[('network', 'NOUN'), ('generates', 'VERB'), ('“', 'PUNCT'), ('good', 'ADJ'), ('desired', 'VERB'), ('”', 'PUNCT'), ('output', 'NOUN'), (',', 'PUNCT'), ('need', 'NOUN'), ('adjust', 'VERB'), ('weights', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('network', 'nsubj'), ('generates', 'advcl'), ('“', 'punct'), ('good', 'amod'), ('desired', 'conj'), ('”', 'punct'), ('output', 'dobj'), (',', 'punct'), ('need', 'attr'), ('adjust', 'acl'), ('weights', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[network, generates], [generates, “], [“, good], [good, desired], [desired, ”], [”, output], [output, ,], [,, need], [need, adjust], [adjust, weights], [weights, .]]

>> Trigrams: 
[[network, generates, “], [generates, “, good], [“, good, desired], [good, desired, ”], [desired, ”, output], [”, output, ,], [output, ,, need], [,, need, adjust], [need, adjust, weights], [adjust, weights, .]]

>> Noun Phrases are: 
[the network, a “good or desired” output, no need, the weights]

>> Named Entities are: 
[]


============================ Sentence 7 =============================

However, if the network generates a “poor or undesired” output or an error, then the system alters the weights in order to improve subsequent results. 


>> Tokens are: 
[,, network, generates, “, poor, undesired, ”, output, error, ,, system, alters, weights, order, improve, subsequent, results, .] 

>> PoS Tags are: 
[(',', 'PUNCT'), ('network', 'NOUN'), ('generates', 'VERB'), ('“', 'PUNCT'), ('poor', 'ADJ'), ('undesired', 'ADJ'), ('”', 'PUNCT'), ('output', 'NOUN'), ('error', 'NOUN'), (',', 'PUNCT'), ('system', 'NOUN'), ('alters', 'VERB'), ('weights', 'NOUN'), ('order', 'NOUN'), ('improve', 'VERB'), ('subsequent', 'ADJ'), ('results', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(',', 'punct'), ('network', 'nsubj'), ('generates', 'advcl'), ('“', 'punct'), ('poor', 'amod'), ('undesired', 'conj'), ('”', 'punct'), ('output', 'dobj'), ('error', 'conj'), (',', 'punct'), ('system', 'nsubj'), ('alters', 'ROOT'), ('weights', 'dobj'), ('order', 'pobj'), ('improve', 'acl'), ('subsequent', 'amod'), ('results', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[,, network], [network, generates], [generates, “], [“, poor], [poor, undesired], [undesired, ”], [”, output], [output, error], [error, ,], [,, system], [system, alters], [alters, weights], [weights, order], [order, improve], [improve, subsequent], [subsequent, results], [results, .]]

>> Trigrams: 
[[,, network, generates], [network, generates, “], [generates, “, poor], [“, poor, undesired], [poor, undesired, ”], [undesired, ”, output], [”, output, error], [output, error, ,], [error, ,, system], [,, system, alters], [system, alters, weights], [alters, weights, order], [weights, order, improve], [order, improve, subsequent], [improve, subsequent, results], [subsequent, results, .]]

>> Noun Phrases are: 
[the network, a “poor or undesired” output, an error, the system, the weights, order, subsequent results]

>> Named Entities are: 
[]


============================ Sentence 8 =============================

Machine Learning in ANNs ANNs are capable of learning and they need to be trained. 


>> Tokens are: 
[Machine, Learning, ANNs, ANNs, capable, learning, need, trained, .] 

>> PoS Tags are: 
[('Machine', 'PROPN'), ('Learning', 'PROPN'), ('ANNs', 'NOUN'), ('ANNs', 'NOUN'), ('capable', 'ADJ'), ('learning', 'VERB'), ('need', 'VERB'), ('trained', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Machine', 'compound'), ('Learning', 'nsubj'), ('ANNs', 'compound'), ('ANNs', 'pobj'), ('capable', 'acomp'), ('learning', 'pcomp'), ('need', 'conj'), ('trained', 'xcomp'), ('.', 'punct')]

>> Bigrams: 
[[Machine, Learning], [Learning, ANNs], [ANNs, ANNs], [ANNs, capable], [capable, learning], [learning, need], [need, trained], [trained, .]]

>> Trigrams: 
[[Machine, Learning, ANNs], [Learning, ANNs, ANNs], [ANNs, ANNs, capable], [ANNs, capable, learning], [capable, learning, need], [learning, need, trained], [need, trained, .]]

>> Noun Phrases are: 
[Machine Learning, ANNs ANNs, they]

>> Named Entities are: 
[('Machine Learning', 'PERSON')]


============================ Sentence 9 =============================

There are several learning strategies − · Supervised Learning − It involves a teacher that is scholar than the ANN itself. 


>> Tokens are: 
[learning, strategies, −, ·, Supervised, Learning, −, involves, teacher, scholar, ANN, .] 

>> PoS Tags are: 
[('learning', 'VERB'), ('strategies', 'NOUN'), ('−', 'VERB'), ('·', 'PUNCT'), ('Supervised', 'PROPN'), ('Learning', 'NOUN'), ('−', 'PROPN'), ('involves', 'VERB'), ('teacher', 'NOUN'), ('scholar', 'ADJ'), ('ANN', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('learning', 'amod'), ('strategies', 'attr'), ('−', 'acl'), ('·', 'punct'), ('Supervised', 'amod'), ('Learning', 'compound'), ('−', 'appos'), ('involves', 'conj'), ('teacher', 'dobj'), ('scholar', 'acomp'), ('ANN', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[learning, strategies], [strategies, −], [−, ·], [·, Supervised], [Supervised, Learning], [Learning, −], [−, involves], [involves, teacher], [teacher, scholar], [scholar, ANN], [ANN, .]]

>> Trigrams: 
[[learning, strategies, −], [strategies, −, ·], [−, ·, Supervised], [·, Supervised, Learning], [Supervised, Learning, −], [Learning, −, involves], [−, involves, teacher], [involves, teacher, scholar], [teacher, scholar, ANN], [scholar, ANN, .]]

>> Noun Phrases are: 
[several learning strategies, Supervised Learning −, It, a teacher, the ANN, itself]

>> Named Entities are: 
[('−', 'PERSON')]


============================ Sentence 10 =============================

For example, the teacher feeds some example data about which the teacher already knows the answers. 


>> Tokens are: 
[example, ,, teacher, feeds, example, data, teacher, knows, answers, .] 

>> PoS Tags are: 
[('example', 'NOUN'), (',', 'PUNCT'), ('teacher', 'NOUN'), ('feeds', 'VERB'), ('example', 'NOUN'), ('data', 'NOUN'), ('teacher', 'NOUN'), ('knows', 'VERB'), ('answers', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('example', 'pobj'), (',', 'punct'), ('teacher', 'nsubj'), ('feeds', 'ROOT'), ('example', 'compound'), ('data', 'dobj'), ('teacher', 'nsubj'), ('knows', 'relcl'), ('answers', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[example, ,], [,, teacher], [teacher, feeds], [feeds, example], [example, data], [data, teacher], [teacher, knows], [knows, answers], [answers, .]]

>> Trigrams: 
[[example, ,, teacher], [,, teacher, feeds], [teacher, feeds, example], [feeds, example, data], [example, data, teacher], [data, teacher, knows], [teacher, knows, answers], [knows, answers, .]]

>> Noun Phrases are: 
[example, the teacher, some example data, the teacher, the answers]

>> Named Entities are: 
[]


============================ Sentence 11 =============================

For example, pattern recognizing. 


>> Tokens are: 
[example, ,, pattern, recognizing, .] 

>> PoS Tags are: 
[('example', 'NOUN'), (',', 'PUNCT'), ('pattern', 'NOUN'), ('recognizing', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('example', 'pobj'), (',', 'punct'), ('pattern', 'ROOT'), ('recognizing', 'acl'), ('.', 'punct')]

>> Bigrams: 
[[example, ,], [,, pattern], [pattern, recognizing], [recognizing, .]]

>> Trigrams: 
[[example, ,, pattern], [,, pattern, recognizing], [pattern, recognizing, .]]

>> Noun Phrases are: 
[example]

>> Named Entities are: 
[]


============================ Sentence 12 =============================

The ANN comes up with guesses while recognizing. 


>> Tokens are: 
[ANN, comes, guesses, recognizing, .] 

>> PoS Tags are: 
[('ANN', 'PROPN'), ('comes', 'VERB'), ('guesses', 'NOUN'), ('recognizing', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('ANN', 'nsubj'), ('comes', 'ROOT'), ('guesses', 'pobj'), ('recognizing', 'advcl'), ('.', 'punct')]

>> Bigrams: 
[[ANN, comes], [comes, guesses], [guesses, recognizing], [recognizing, .]]

>> Trigrams: 
[[ANN, comes, guesses], [comes, guesses, recognizing], [guesses, recognizing, .]]

>> Noun Phrases are: 
[The ANN, guesses]

>> Named Entities are: 
[]


============================ Sentence 13 =============================

Then the teacher provides the ANN with the answers. 


>> Tokens are: 
[teacher, provides, ANN, answers, .] 

>> PoS Tags are: 
[('teacher', 'NOUN'), ('provides', 'VERB'), ('ANN', 'PROPN'), ('answers', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('teacher', 'nsubj'), ('provides', 'ROOT'), ('ANN', 'dobj'), ('answers', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[teacher, provides], [provides, ANN], [ANN, answers], [answers, .]]

>> Trigrams: 
[[teacher, provides, ANN], [provides, ANN, answers], [ANN, answers, .]]

>> Noun Phrases are: 
[the teacher, the ANN, the answers]

>> Named Entities are: 
[]


============================ Sentence 14 =============================

The network then compares it guesses with the teacher’s “correct” answers and makes adjustments according to errors. · 


>> Tokens are: 
[network, compares, guesses, teacher, “, correct, ”, answers, makes, adjustments, according, errors, ., ·] 

>> PoS Tags are: 
[('network', 'NOUN'), ('compares', 'VERB'), ('guesses', 'VERB'), ('teacher', 'NOUN'), ('“', 'PUNCT'), ('correct', 'ADJ'), ('”', 'PUNCT'), ('answers', 'NOUN'), ('makes', 'VERB'), ('adjustments', 'NOUN'), ('according', 'VERB'), ('errors', 'NOUN'), ('.', 'PUNCT'), ('·', 'PUNCT')] 

>> Dependency Tags are: 
[('network', 'nsubj'), ('compares', 'ROOT'), ('guesses', 'ccomp'), ('teacher', 'poss'), ('“', 'punct'), ('correct', 'amod'), ('”', 'punct'), ('answers', 'pobj'), ('makes', 'conj'), ('adjustments', 'dobj'), ('according', 'prep'), ('errors', 'pobj'), ('.', 'punct'), ('·', 'punct')]

>> Bigrams: 
[[network, compares], [compares, guesses], [guesses, teacher], [teacher, “], [“, correct], [correct, ”], [”, answers], [answers, makes], [makes, adjustments], [adjustments, according], [according, errors], [errors, .], [., ·]]

>> Trigrams: 
[[network, compares, guesses], [compares, guesses, teacher], [guesses, teacher, “], [teacher, “, correct], [“, correct, ”], [correct, ”, answers], [”, answers, makes], [answers, makes, adjustments], [makes, adjustments, according], [adjustments, according, errors], [according, errors, .], [errors, ., ·]]

>> Noun Phrases are: 
[The network, it, the teacher’s “correct” answers, adjustments, errors]

>> Named Entities are: 
[]


============================ Sentence 15 =============================

Unsupervised Learning − It is required when there is no example data set with known answers. 


>> Tokens are: 
[Unsupervised, Learning, −, required, example, data, set, known, answers, .] 

>> PoS Tags are: 
[('Unsupervised', 'PROPN'), ('Learning', 'PROPN'), ('−', 'PROPN'), ('required', 'VERB'), ('example', 'NOUN'), ('data', 'NOUN'), ('set', 'VERB'), ('known', 'VERB'), ('answers', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Unsupervised', 'compound'), ('Learning', 'compound'), ('−', 'dep'), ('required', 'ROOT'), ('example', 'compound'), ('data', 'attr'), ('set', 'acl'), ('known', 'amod'), ('answers', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Unsupervised, Learning], [Learning, −], [−, required], [required, example], [example, data], [data, set], [set, known], [known, answers], [answers, .]]

>> Trigrams: 
[[Unsupervised, Learning, −], [Learning, −, required], [−, required, example], [required, example, data], [example, data, set], [data, set, known], [set, known, answers], [known, answers, .]]

>> Noun Phrases are: 
[It, no example data, known answers]

>> Named Entities are: 
[]


============================ Sentence 16 =============================

For example, searching for a hidden pattern. 


>> Tokens are: 
[example, ,, searching, hidden, pattern, .] 

>> PoS Tags are: 
[('example', 'NOUN'), (',', 'PUNCT'), ('searching', 'VERB'), ('hidden', 'VERB'), ('pattern', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('example', 'pobj'), (',', 'punct'), ('searching', 'ROOT'), ('hidden', 'amod'), ('pattern', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[example, ,], [,, searching], [searching, hidden], [hidden, pattern], [pattern, .]]

>> Trigrams: 
[[example, ,, searching], [,, searching, hidden], [searching, hidden, pattern], [hidden, pattern, .]]

>> Noun Phrases are: 
[example, a hidden pattern]

>> Named Entities are: 
[]


============================ Sentence 17 =============================

In this case, clustering i.e.-- dividing a set of elements into groups according to some unknown pattern is carried out based on the existing data sets present. · 


>> Tokens are: 
[case, ,, clustering, i.e.--, dividing, set, elements, groups, according, unknown, pattern, carried, based, existing, data, sets, present, ., ·] 

>> PoS Tags are: 
[('case', 'NOUN'), (',', 'PUNCT'), ('clustering', 'VERB'), ('i.e.--', 'NOUN'), ('dividing', 'VERB'), ('set', 'NOUN'), ('elements', 'NOUN'), ('groups', 'NOUN'), ('according', 'VERB'), ('unknown', 'ADJ'), ('pattern', 'NOUN'), ('carried', 'VERB'), ('based', 'VERB'), ('existing', 'VERB'), ('data', 'NOUN'), ('sets', 'NOUN'), ('present', 'ADJ'), ('.', 'PUNCT'), ('·', 'PUNCT')] 

>> Dependency Tags are: 
[('case', 'pobj'), (',', 'punct'), ('clustering', 'csubjpass'), ('i.e.--', 'dobj'), ('dividing', 'xcomp'), ('set', 'dobj'), ('elements', 'pobj'), ('groups', 'pobj'), ('according', 'prep'), ('unknown', 'amod'), ('pattern', 'pobj'), ('carried', 'ROOT'), ('based', 'prep'), ('existing', 'amod'), ('data', 'compound'), ('sets', 'pobj'), ('present', 'amod'), ('.', 'punct'), ('·', 'punct')]

>> Bigrams: 
[[case, ,], [,, clustering], [clustering, i.e.--], [i.e.--, dividing], [dividing, set], [set, elements], [elements, groups], [groups, according], [according, unknown], [unknown, pattern], [pattern, carried], [carried, based], [based, existing], [existing, data], [data, sets], [sets, present], [present, .], [., ·]]

>> Trigrams: 
[[case, ,, clustering], [,, clustering, i.e.--], [clustering, i.e.--, dividing], [i.e.--, dividing, set], [dividing, set, elements], [set, elements, groups], [elements, groups, according], [groups, according, unknown], [according, unknown, pattern], [unknown, pattern, carried], [pattern, carried, based], [carried, based, existing], [based, existing, data], [existing, data, sets], [data, sets, present], [sets, present, .], [present, ., ·]]

>> Noun Phrases are: 
[this case, i.e.--, a set, elements, groups, some unknown pattern, the existing data sets]

>> Named Entities are: 
[]


============================ Sentence 18 =============================

Reinforcement Learning − 


>> Tokens are: 
[Reinforcement, Learning, −] 

>> PoS Tags are: 
[('Reinforcement', 'NOUN'), ('Learning', 'PROPN'), ('−', 'PROPN')] 

>> Dependency Tags are: 
[('Reinforcement', 'compound'), ('Learning', 'compound'), ('−', 'ROOT')]

>> Bigrams: 
[[Reinforcement, Learning], [Learning, −]]

>> Trigrams: 
[[Reinforcement, Learning, −]]

>> Noun Phrases are: 
[Reinforcement Learning −]

>> Named Entities are: 
[('Reinforcement Learning −', 'PERSON')]


============================ Sentence 19 =============================

This strategy built on observation. 


>> Tokens are: 
[strategy, built, observation, .] 

>> PoS Tags are: 
[('strategy', 'NOUN'), ('built', 'VERB'), ('observation', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('strategy', 'ROOT'), ('built', 'acl'), ('observation', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[strategy, built], [built, observation], [observation, .]]

>> Trigrams: 
[[strategy, built, observation], [built, observation, .]]

>> Noun Phrases are: 
[This strategy, observation]

>> Named Entities are: 
[]


============================ Sentence 20 =============================

The ANN makes a decision by observing its environment. 


>> Tokens are: 
[ANN, makes, decision, observing, environment, .] 

>> PoS Tags are: 
[('ANN', 'PROPN'), ('makes', 'VERB'), ('decision', 'NOUN'), ('observing', 'VERB'), ('environment', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('ANN', 'nsubj'), ('makes', 'ROOT'), ('decision', 'dobj'), ('observing', 'pcomp'), ('environment', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[ANN, makes], [makes, decision], [decision, observing], [observing, environment], [environment, .]]

>> Trigrams: 
[[ANN, makes, decision], [makes, decision, observing], [decision, observing, environment], [observing, environment, .]]

>> Noun Phrases are: 
[The ANN, a decision, its environment]

>> Named Entities are: 
[('ANN', 'ORG')]


============================ Sentence 21 =============================

If the observation is negative, the network adjusts its weights to be able to make a different required decision the next time. 


>> Tokens are: 
[observation, negative, ,, network, adjusts, weights, able, different, required, decision, time, .] 

>> PoS Tags are: 
[('observation', 'NOUN'), ('negative', 'ADJ'), (',', 'PUNCT'), ('network', 'NOUN'), ('adjusts', 'VERB'), ('weights', 'NOUN'), ('able', 'ADJ'), ('different', 'ADJ'), ('required', 'VERB'), ('decision', 'NOUN'), ('time', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('observation', 'nsubj'), ('negative', 'acomp'), (',', 'punct'), ('network', 'nsubj'), ('adjusts', 'ROOT'), ('weights', 'dobj'), ('able', 'acomp'), ('different', 'amod'), ('required', 'amod'), ('decision', 'dobj'), ('time', 'npadvmod'), ('.', 'punct')]

>> Bigrams: 
[[observation, negative], [negative, ,], [,, network], [network, adjusts], [adjusts, weights], [weights, able], [able, different], [different, required], [required, decision], [decision, time], [time, .]]

>> Trigrams: 
[[observation, negative, ,], [negative, ,, network], [,, network, adjusts], [network, adjusts, weights], [adjusts, weights, able], [weights, able, different], [able, different, required], [different, required, decision], [required, decision, time], [decision, time, .]]

>> Noun Phrases are: 
[the observation, the network, its weights, a different required decision]

>> Named Entities are: 
[]


============================ Sentence 22 =============================

Back Propagation Algorithm It is the training or learning algorithm. 


>> Tokens are: 
[Propagation, Algorithm, training, learning, algorithm, .] 

>> PoS Tags are: 
[('Propagation', 'PROPN'), ('Algorithm', 'PROPN'), ('training', 'NOUN'), ('learning', 'VERB'), ('algorithm', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Propagation', 'compound'), ('Algorithm', 'npadvmod'), ('training', 'attr'), ('learning', 'conj'), ('algorithm', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Propagation, Algorithm], [Algorithm, training], [training, learning], [learning, algorithm], [algorithm, .]]

>> Trigrams: 
[[Propagation, Algorithm, training], [Algorithm, training, learning], [training, learning, algorithm], [learning, algorithm, .]]

>> Noun Phrases are: 
[It, the training, algorithm]

>> Named Entities are: 
[]


============================ Sentence 23 =============================

It learns by example. 


>> Tokens are: 
[learns, example, .] 

>> PoS Tags are: 
[('learns', 'VERB'), ('example', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('learns', 'ROOT'), ('example', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[learns, example], [example, .]]

>> Trigrams: 
[[learns, example, .]]

>> Noun Phrases are: 
[It, example]

>> Named Entities are: 
[]


============================ Sentence 24 =============================

If you submit to the algorithm the example of what you want the network to do, it changes the network’s weights so that it can produce desired output for a particular input on finishing the training. 


>> Tokens are: 
[submit, algorithm, example, want, network, ,, changes, network, weights, produce, desired, output, particular, input, finishing, training, .] 

>> PoS Tags are: 
[('submit', 'VERB'), ('algorithm', 'NOUN'), ('example', 'NOUN'), ('want', 'VERB'), ('network', 'NOUN'), (',', 'PUNCT'), ('changes', 'VERB'), ('network', 'NOUN'), ('weights', 'NOUN'), ('produce', 'AUX'), ('desired', 'VERB'), ('output', 'NOUN'), ('particular', 'ADJ'), ('input', 'NOUN'), ('finishing', 'VERB'), ('training', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('submit', 'advcl'), ('algorithm', 'pobj'), ('example', 'dobj'), ('want', 'pcomp'), ('network', 'nsubj'), (',', 'punct'), ('changes', 'ROOT'), ('network', 'poss'), ('weights', 'dobj'), ('produce', 'aux'), ('desired', 'advcl'), ('output', 'dobj'), ('particular', 'amod'), ('input', 'pobj'), ('finishing', 'pcomp'), ('training', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[submit, algorithm], [algorithm, example], [example, want], [want, network], [network, ,], [,, changes], [changes, network], [network, weights], [weights, produce], [produce, desired], [desired, output], [output, particular], [particular, input], [input, finishing], [finishing, training], [training, .]]

>> Trigrams: 
[[submit, algorithm, example], [algorithm, example, want], [example, want, network], [want, network, ,], [network, ,, changes], [,, changes, network], [changes, network, weights], [network, weights, produce], [weights, produce, desired], [produce, desired, output], [desired, output, particular], [output, particular, input], [particular, input, finishing], [input, finishing, training], [finishing, training, .]]

>> Noun Phrases are: 
[you, the algorithm, the example, what, you, the network, it, the network’s weights, it, output, a particular input, the training]

>> Named Entities are: 
[]


============================ Sentence 25 =============================

Back Propagation networks are ideal for simple Pattern Recognition and Mapping Tasks. 


>> Tokens are: 
[Propagation, networks, ideal, simple, Pattern, Recognition, Mapping, Tasks, .] 

>> PoS Tags are: 
[('Propagation', 'PROPN'), ('networks', 'NOUN'), ('ideal', 'ADJ'), ('simple', 'ADJ'), ('Pattern', 'PROPN'), ('Recognition', 'PROPN'), ('Mapping', 'PROPN'), ('Tasks', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Propagation', 'compound'), ('networks', 'nsubj'), ('ideal', 'acomp'), ('simple', 'amod'), ('Pattern', 'compound'), ('Recognition', 'pobj'), ('Mapping', 'compound'), ('Tasks', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[Propagation, networks], [networks, ideal], [ideal, simple], [simple, Pattern], [Pattern, Recognition], [Recognition, Mapping], [Mapping, Tasks], [Tasks, .]]

>> Trigrams: 
[[Propagation, networks, ideal], [networks, ideal, simple], [ideal, simple, Pattern], [simple, Pattern, Recognition], [Pattern, Recognition, Mapping], [Recognition, Mapping, Tasks], [Mapping, Tasks, .]]

>> Noun Phrases are: 
[Back Propagation networks, simple Pattern Recognition, Mapping Tasks]

>> Named Entities are: 
[('Back Propagation', 'ORG'), ('Pattern Recognition and Mapping Tasks', 'WORK_OF_ART')]


============================ Sentence 26 =============================

Bayesian Networks (BN) 


>> Tokens are: 
[Bayesian, Networks, (, BN, )] 

>> PoS Tags are: 
[('Bayesian', 'PROPN'), ('Networks', 'PROPN'), ('(', 'PUNCT'), ('BN', 'PROPN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('Bayesian', 'compound'), ('Networks', 'ROOT'), ('(', 'punct'), ('BN', 'appos'), (')', 'punct')]

>> Bigrams: 
[[Bayesian, Networks], [Networks, (], [(, BN], [BN, )]]

>> Trigrams: 
[[Bayesian, Networks, (], [Networks, (, BN], [(, BN, )]]

>> Noun Phrases are: 
[Bayesian Networks, BN]

>> Named Entities are: 
[('Bayesian Networks', 'PERSON')]


============================ Sentence 27 =============================

These are the graphical structures used to represent the probabilistic relationship among a set of random variables. 


>> Tokens are: 
[graphical, structures, represent, probabilistic, relationship, set, random, variables, .] 

>> PoS Tags are: 
[('graphical', 'ADJ'), ('structures', 'NOUN'), ('represent', 'VERB'), ('probabilistic', 'ADJ'), ('relationship', 'NOUN'), ('set', 'NOUN'), ('random', 'ADJ'), ('variables', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('graphical', 'amod'), ('structures', 'attr'), ('represent', 'xcomp'), ('probabilistic', 'amod'), ('relationship', 'dobj'), ('set', 'pobj'), ('random', 'amod'), ('variables', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[graphical, structures], [structures, represent], [represent, probabilistic], [probabilistic, relationship], [relationship, set], [set, random], [random, variables], [variables, .]]

>> Trigrams: 
[[graphical, structures, represent], [structures, represent, probabilistic], [represent, probabilistic, relationship], [probabilistic, relationship, set], [relationship, set, random], [set, random, variables], [random, variables, .]]

>> Noun Phrases are: 
[the graphical structures, the probabilistic relationship, a set, random variables]

>> Named Entities are: 
[]


============================ Sentence 28 =============================

Bayesian networks are also called Belief Networks or Bayes Nets. 


>> Tokens are: 
[Bayesian, networks, called, Belief, Networks, Bayes, Nets, .] 

>> PoS Tags are: 
[('Bayesian', 'ADJ'), ('networks', 'NOUN'), ('called', 'VERB'), ('Belief', 'PROPN'), ('Networks', 'PROPN'), ('Bayes', 'PROPN'), ('Nets', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Bayesian', 'amod'), ('networks', 'nsubjpass'), ('called', 'ROOT'), ('Belief', 'compound'), ('Networks', 'oprd'), ('Bayes', 'compound'), ('Nets', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[Bayesian, networks], [networks, called], [called, Belief], [Belief, Networks], [Networks, Bayes], [Bayes, Nets], [Nets, .]]

>> Trigrams: 
[[Bayesian, networks, called], [networks, called, Belief], [called, Belief, Networks], [Belief, Networks, Bayes], [Networks, Bayes, Nets], [Bayes, Nets, .]]

>> Noun Phrases are: 
[Bayesian networks, Belief Networks, Bayes Nets]

>> Named Entities are: 
[('Bayesian', 'NORP'), ('Belief Networks', 'WORK_OF_ART'), ('Bayes Nets', 'ORG')]


============================ Sentence 29 =============================

BNs reason about uncertain domain. 


>> Tokens are: 
[BNs, reason, uncertain, domain, .] 

>> PoS Tags are: 
[('BNs', 'NOUN'), ('reason', 'NOUN'), ('uncertain', 'ADJ'), ('domain', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('BNs', 'ROOT'), ('reason', 'dobj'), ('uncertain', 'amod'), ('domain', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[BNs, reason], [reason, uncertain], [uncertain, domain], [domain, .]]

>> Trigrams: 
[[BNs, reason, uncertain], [reason, uncertain, domain], [uncertain, domain, .]]

>> Noun Phrases are: 
[BNs, reason, uncertain domain]

>> Named Entities are: 
[]


============================ Sentence 30 =============================

In these networks, each node represents a random variable with specific propositions. 


>> Tokens are: 
[networks, ,, node, represents, random, variable, specific, propositions, .] 

>> PoS Tags are: 
[('networks', 'NOUN'), (',', 'PUNCT'), ('node', 'NOUN'), ('represents', 'VERB'), ('random', 'ADJ'), ('variable', 'NOUN'), ('specific', 'ADJ'), ('propositions', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('networks', 'pobj'), (',', 'punct'), ('node', 'nsubj'), ('represents', 'ROOT'), ('random', 'amod'), ('variable', 'dobj'), ('specific', 'amod'), ('propositions', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[networks, ,], [,, node], [node, represents], [represents, random], [random, variable], [variable, specific], [specific, propositions], [propositions, .]]

>> Trigrams: 
[[networks, ,, node], [,, node, represents], [node, represents, random], [represents, random, variable], [random, variable, specific], [variable, specific, propositions], [specific, propositions, .]]

>> Noun Phrases are: 
[these networks, each node, a random variable, specific propositions]

>> Named Entities are: 
[]


============================ Sentence 31 =============================

For example, in a medical diagnosis domain, the node Cancer represents the proposition that a patient has cancer. 


>> Tokens are: 
[example, ,, medical, diagnosis, domain, ,, node, Cancer, represents, proposition, patient, cancer, .] 

>> PoS Tags are: 
[('example', 'NOUN'), (',', 'PUNCT'), ('medical', 'ADJ'), ('diagnosis', 'NOUN'), ('domain', 'NOUN'), (',', 'PUNCT'), ('node', 'NOUN'), ('Cancer', 'PROPN'), ('represents', 'VERB'), ('proposition', 'NOUN'), ('patient', 'NOUN'), ('cancer', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('example', 'pobj'), (',', 'punct'), ('medical', 'amod'), ('diagnosis', 'compound'), ('domain', 'pobj'), (',', 'punct'), ('node', 'compound'), ('Cancer', 'nsubj'), ('represents', 'ROOT'), ('proposition', 'dobj'), ('patient', 'nsubj'), ('cancer', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[example, ,], [,, medical], [medical, diagnosis], [diagnosis, domain], [domain, ,], [,, node], [node, Cancer], [Cancer, represents], [represents, proposition], [proposition, patient], [patient, cancer], [cancer, .]]

>> Trigrams: 
[[example, ,, medical], [,, medical, diagnosis], [medical, diagnosis, domain], [diagnosis, domain, ,], [domain, ,, node], [,, node, Cancer], [node, Cancer, represents], [Cancer, represents, proposition], [represents, proposition, patient], [proposition, patient, cancer], [patient, cancer, .]]

>> Noun Phrases are: 
[example, a medical diagnosis domain, the node Cancer, the proposition, a patient, cancer]

>> Named Entities are: 
[]


============================ Sentence 32 =============================

The edges connecting the nodes represent probabilistic dependencies among those random variables. 


>> Tokens are: 
[edges, connecting, nodes, represent, probabilistic, dependencies, random, variables, .] 

>> PoS Tags are: 
[('edges', 'NOUN'), ('connecting', 'VERB'), ('nodes', 'NOUN'), ('represent', 'VERB'), ('probabilistic', 'ADJ'), ('dependencies', 'NOUN'), ('random', 'ADJ'), ('variables', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('edges', 'nsubj'), ('connecting', 'acl'), ('nodes', 'dobj'), ('represent', 'ROOT'), ('probabilistic', 'amod'), ('dependencies', 'dobj'), ('random', 'amod'), ('variables', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[edges, connecting], [connecting, nodes], [nodes, represent], [represent, probabilistic], [probabilistic, dependencies], [dependencies, random], [random, variables], [variables, .]]

>> Trigrams: 
[[edges, connecting, nodes], [connecting, nodes, represent], [nodes, represent, probabilistic], [represent, probabilistic, dependencies], [probabilistic, dependencies, random], [dependencies, random, variables], [random, variables, .]]

>> Noun Phrases are: 
[The edges, the nodes, probabilistic dependencies, those random variables]

>> Named Entities are: 
[]


============================ Sentence 33 =============================

If out of two nodes, one is affecting the other then they must be directly connected in the directions of the effect. 


>> Tokens are: 
[nodes, ,, affecting, directly, connected, directions, effect, .] 

>> PoS Tags are: 
[('nodes', 'NOUN'), (',', 'PUNCT'), ('affecting', 'VERB'), ('directly', 'ADV'), ('connected', 'VERB'), ('directions', 'NOUN'), ('effect', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('nodes', 'pobj'), (',', 'punct'), ('affecting', 'advcl'), ('directly', 'advmod'), ('connected', 'ROOT'), ('directions', 'pobj'), ('effect', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[nodes, ,], [,, affecting], [affecting, directly], [directly, connected], [connected, directions], [directions, effect], [effect, .]]

>> Trigrams: 
[[nodes, ,, affecting], [,, affecting, directly], [affecting, directly, connected], [directly, connected, directions], [connected, directions, effect], [directions, effect, .]]

>> Noun Phrases are: 
[two nodes, one, they, the directions, the effect]

>> Named Entities are: 
[('two', 'CARDINAL')]


============================ Sentence 34 =============================

The strength of the relationship between variables is quantified by the probability associated with each node. 


>> Tokens are: 
[strength, relationship, variables, quantified, probability, associated, node, .] 

>> PoS Tags are: 
[('strength', 'NOUN'), ('relationship', 'NOUN'), ('variables', 'NOUN'), ('quantified', 'VERB'), ('probability', 'NOUN'), ('associated', 'VERB'), ('node', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('strength', 'nsubjpass'), ('relationship', 'pobj'), ('variables', 'pobj'), ('quantified', 'ROOT'), ('probability', 'pobj'), ('associated', 'acl'), ('node', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[strength, relationship], [relationship, variables], [variables, quantified], [quantified, probability], [probability, associated], [associated, node], [node, .]]

>> Trigrams: 
[[strength, relationship, variables], [relationship, variables, quantified], [variables, quantified, probability], [quantified, probability, associated], [probability, associated, node], [associated, node, .]]

>> Noun Phrases are: 
[The strength, the relationship, variables, the probability, each node]

>> Named Entities are: 
[]


============================ Sentence 35 =============================

There is an only constraint on the arcs in a BN that you cannot return to a node simply by following directed arcs. 


>> Tokens are: 
[constraint, arcs, BN, return, node, simply, following, directed, arcs, .] 

>> PoS Tags are: 
[('constraint', 'NOUN'), ('arcs', 'NOUN'), ('BN', 'NOUN'), ('return', 'VERB'), ('node', 'NOUN'), ('simply', 'ADV'), ('following', 'VERB'), ('directed', 'VERB'), ('arcs', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('constraint', 'attr'), ('arcs', 'pobj'), ('BN', 'pobj'), ('return', 'relcl'), ('node', 'pobj'), ('simply', 'advmod'), ('following', 'pcomp'), ('directed', 'amod'), ('arcs', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[constraint, arcs], [arcs, BN], [BN, return], [return, node], [node, simply], [simply, following], [following, directed], [directed, arcs], [arcs, .]]

>> Trigrams: 
[[constraint, arcs, BN], [arcs, BN, return], [BN, return, node], [return, node, simply], [node, simply, following], [simply, following, directed], [following, directed, arcs], [directed, arcs, .]]

>> Noun Phrases are: 
[an only constraint, the arcs, a BN, you, a node, directed arcs]

>> Named Entities are: 
[]


============================ Sentence 36 =============================

Hence the BNs are called Directed Acyclic Graphs (DAGs). 


>> Tokens are: 
[BNs, called, Directed, Acyclic, Graphs, (, DAGs, ), .] 

>> PoS Tags are: 
[('BNs', 'NOUN'), ('called', 'VERB'), ('Directed', 'PROPN'), ('Acyclic', 'PROPN'), ('Graphs', 'PROPN'), ('(', 'PUNCT'), ('DAGs', 'PROPN'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('BNs', 'nsubjpass'), ('called', 'ROOT'), ('Directed', 'compound'), ('Acyclic', 'compound'), ('Graphs', 'oprd'), ('(', 'punct'), ('DAGs', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[BNs, called], [called, Directed], [Directed, Acyclic], [Acyclic, Graphs], [Graphs, (], [(, DAGs], [DAGs, )], [), .]]

>> Trigrams: 
[[BNs, called, Directed], [called, Directed, Acyclic], [Directed, Acyclic, Graphs], [Acyclic, Graphs, (], [Graphs, (, DAGs], [(, DAGs, )], [DAGs, ), .]]

>> Noun Phrases are: 
[the BNs, Directed Acyclic Graphs, DAGs]

>> Named Entities are: 
[('Directed Acyclic Graphs', 'ORG')]


============================ Sentence 37 =============================

BNs are capable of handling multivalued variables simultaneously. 


>> Tokens are: 
[BNs, capable, handling, multivalued, variables, simultaneously, .] 

>> PoS Tags are: 
[('BNs', 'NOUN'), ('capable', 'ADJ'), ('handling', 'VERB'), ('multivalued', 'ADJ'), ('variables', 'NOUN'), ('simultaneously', 'ADV'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('BNs', 'nsubj'), ('capable', 'acomp'), ('handling', 'pcomp'), ('multivalued', 'amod'), ('variables', 'dobj'), ('simultaneously', 'advmod'), ('.', 'punct')]

>> Bigrams: 
[[BNs, capable], [capable, handling], [handling, multivalued], [multivalued, variables], [variables, simultaneously], [simultaneously, .]]

>> Trigrams: 
[[BNs, capable, handling], [capable, handling, multivalued], [handling, multivalued, variables], [multivalued, variables, simultaneously], [variables, simultaneously, .]]

>> Noun Phrases are: 
[BNs, multivalued variables]

>> Named Entities are: 
[]


============================ Sentence 38 =============================

The BN variables are composed of two dimensions − · Range of prepositions · Probability assigned to each of the prepositions. 


>> Tokens are: 
[BN, variables, composed, dimensions, −, ·, Range, prepositions, ·, Probability, assigned, prepositions, .] 

>> PoS Tags are: 
[('BN', 'PROPN'), ('variables', 'NOUN'), ('composed', 'VERB'), ('dimensions', 'NOUN'), ('−', 'VERB'), ('·', 'PUNCT'), ('Range', 'NOUN'), ('prepositions', 'NOUN'), ('·', 'PUNCT'), ('Probability', 'NOUN'), ('assigned', 'VERB'), ('prepositions', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('BN', 'compound'), ('variables', 'nsubjpass'), ('composed', 'ROOT'), ('dimensions', 'pobj'), ('−', 'conj'), ('·', 'punct'), ('Range', 'appos'), ('prepositions', 'pobj'), ('·', 'punct'), ('Probability', 'appos'), ('assigned', 'acl'), ('prepositions', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[BN, variables], [variables, composed], [composed, dimensions], [dimensions, −], [−, ·], [·, Range], [Range, prepositions], [prepositions, ·], [·, Probability], [Probability, assigned], [assigned, prepositions], [prepositions, .]]

>> Trigrams: 
[[BN, variables, composed], [variables, composed, dimensions], [composed, dimensions, −], [dimensions, −, ·], [−, ·, Range], [·, Range, prepositions], [Range, prepositions, ·], [prepositions, ·, Probability], [·, Probability, assigned], [Probability, assigned, prepositions], [assigned, prepositions, .]]

>> Noun Phrases are: 
[The BN variables, two dimensions, · Range, prepositions, Probability, the prepositions]

>> Named Entities are: 
[('two', 'CARDINAL'), ('Range', 'PERSON')]


============================ Sentence 39 =============================

Consider a finite set X = {X1, X2, …,Xn} of discrete random variables, where each variable Xi may take values from a finite set, denoted by Val(Xi). 


>> Tokens are: 
[Consider, finite, set, X, =, {, X1, ,, X2, ,, …, ,, Xn, }, discrete, random, variables, ,, variable, Xi, values, finite, set, ,, denoted, Val(Xi, ), .] 

>> PoS Tags are: 
[('Consider', 'VERB'), ('finite', 'ADJ'), ('set', 'VERB'), ('X', 'NOUN'), ('=', 'SYM'), ('{', 'PUNCT'), ('X1', 'PROPN'), (',', 'PUNCT'), ('X2', 'NOUN'), (',', 'PUNCT'), ('…', 'PUNCT'), (',', 'PUNCT'), ('Xn', 'NOUN'), ('}', 'PUNCT'), ('discrete', 'ADJ'), ('random', 'ADJ'), ('variables', 'NOUN'), (',', 'PUNCT'), ('variable', 'NOUN'), ('Xi', 'PROPN'), ('values', 'NOUN'), ('finite', 'ADJ'), ('set', 'NOUN'), (',', 'PUNCT'), ('denoted', 'VERB'), ('Val(Xi', 'PROPN'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Consider', 'ROOT'), ('finite', 'dobj'), ('set', 'acl'), ('X', 'appos'), ('=', 'conj'), ('{', 'punct'), ('X1', 'appos'), (',', 'punct'), ('X2', 'conj'), (',', 'punct'), ('…', 'punct'), (',', 'punct'), ('Xn', 'npadvmod'), ('}', 'punct'), ('discrete', 'amod'), ('random', 'amod'), ('variables', 'pobj'), (',', 'punct'), ('variable', 'amod'), ('Xi', 'nsubj'), ('values', 'dobj'), ('finite', 'compound'), ('set', 'pobj'), (',', 'punct'), ('denoted', 'acl'), ('Val(Xi', 'pobj'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Consider, finite], [finite, set], [set, X], [X, =], [=, {], [{, X1], [X1, ,], [,, X2], [X2, ,], [,, …], […, ,], [,, Xn], [Xn, }], [}, discrete], [discrete, random], [random, variables], [variables, ,], [,, variable], [variable, Xi], [Xi, values], [values, finite], [finite, set], [set, ,], [,, denoted], [denoted, Val(Xi], [Val(Xi, )], [), .]]

>> Trigrams: 
[[Consider, finite, set], [finite, set, X], [set, X, =], [X, =, {], [=, {, X1], [{, X1, ,], [X1, ,, X2], [,, X2, ,], [X2, ,, …], [,, …, ,], […, ,, Xn], [,, Xn, }], [Xn, }, discrete], [}, discrete, random], [discrete, random, variables], [random, variables, ,], [variables, ,, variable], [,, variable, Xi], [variable, Xi, values], [Xi, values, finite], [values, finite, set], [finite, set, ,], [set, ,, denoted], [,, denoted, Val(Xi], [denoted, Val(Xi, )], [Val(Xi, ), .]]

>> Noun Phrases are: 
[X, X1, X2, discrete random variables, each variable Xi, values, a finite set, Val(Xi]

>> Named Entities are: 
[('Xi', 'PERSON'), ('Val(Xi', 'PERSON')]


============================ Sentence 40 =============================

If there is a directed link from variable Xi to variable, Xj, then variable Xi will be a parent of variable Xj showing direct dependencies between the variables. 


>> Tokens are: 
[directed, link, variable, Xi, variable, ,, Xj, ,, variable, Xi, parent, variable, Xj, showing, direct, dependencies, variables, .] 

>> PoS Tags are: 
[('directed', 'VERB'), ('link', 'NOUN'), ('variable', 'ADJ'), ('Xi', 'PROPN'), ('variable', 'NOUN'), (',', 'PUNCT'), ('Xj', 'PROPN'), (',', 'PUNCT'), ('variable', 'ADJ'), ('Xi', 'PROPN'), ('parent', 'NOUN'), ('variable', 'ADJ'), ('Xj', 'NOUN'), ('showing', 'VERB'), ('direct', 'ADJ'), ('dependencies', 'NOUN'), ('variables', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('directed', 'amod'), ('link', 'attr'), ('variable', 'amod'), ('Xi', 'pobj'), ('variable', 'pobj'), (',', 'punct'), ('Xj', 'appos'), (',', 'punct'), ('variable', 'compound'), ('Xi', 'nsubj'), ('parent', 'attr'), ('variable', 'amod'), ('Xj', 'pobj'), ('showing', 'acl'), ('direct', 'amod'), ('dependencies', 'dobj'), ('variables', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[directed, link], [link, variable], [variable, Xi], [Xi, variable], [variable, ,], [,, Xj], [Xj, ,], [,, variable], [variable, Xi], [Xi, parent], [parent, variable], [variable, Xj], [Xj, showing], [showing, direct], [direct, dependencies], [dependencies, variables], [variables, .]]

>> Trigrams: 
[[directed, link, variable], [link, variable, Xi], [variable, Xi, variable], [Xi, variable, ,], [variable, ,, Xj], [,, Xj, ,], [Xj, ,, variable], [,, variable, Xi], [variable, Xi, parent], [Xi, parent, variable], [parent, variable, Xj], [variable, Xj, showing], [Xj, showing, direct], [showing, direct, dependencies], [direct, dependencies, variables], [dependencies, variables, .]]

>> Noun Phrases are: 
[a directed link, variable Xi, variable, Xj, variable Xi, a parent, variable Xj, direct dependencies, the variables]

>> Named Entities are: 
[('Xi', 'PERSON'), ('Xj', 'PERSON'), ('Xi', 'PERSON'), ('Xj', 'PERSON')]


============================ Sentence 41 =============================

The structure of BN is ideal for combining prior knowledge and observed data. 


>> Tokens are: 
[structure, BN, ideal, combining, prior, knowledge, observed, data, .] 

>> PoS Tags are: 
[('structure', 'NOUN'), ('BN', 'PROPN'), ('ideal', 'ADJ'), ('combining', 'VERB'), ('prior', 'ADJ'), ('knowledge', 'NOUN'), ('observed', 'VERB'), ('data', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('structure', 'nsubj'), ('BN', 'pobj'), ('ideal', 'acomp'), ('combining', 'pcomp'), ('prior', 'amod'), ('knowledge', 'dobj'), ('observed', 'amod'), ('data', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[structure, BN], [BN, ideal], [ideal, combining], [combining, prior], [prior, knowledge], [knowledge, observed], [observed, data], [data, .]]

>> Trigrams: 
[[structure, BN, ideal], [BN, ideal, combining], [ideal, combining, prior], [combining, prior, knowledge], [prior, knowledge, observed], [knowledge, observed, data], [observed, data, .]]

>> Noun Phrases are: 
[The structure, BN, prior knowledge, observed data]

>> Named Entities are: 
[]


============================ Sentence 42 =============================

BN can be used to learn the causal relationships and understand various problem domains and to predict future events, even in case of missing data. 


>> Tokens are: 
[BN, learn, causal, relationships, understand, problem, domains, predict, future, events, ,, case, missing, data, .] 

>> PoS Tags are: 
[('BN', 'NOUN'), ('learn', 'VERB'), ('causal', 'ADJ'), ('relationships', 'NOUN'), ('understand', 'VERB'), ('problem', 'NOUN'), ('domains', 'NOUN'), ('predict', 'VERB'), ('future', 'ADJ'), ('events', 'NOUN'), (',', 'PUNCT'), ('case', 'NOUN'), ('missing', 'VERB'), ('data', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('BN', 'nsubjpass'), ('learn', 'xcomp'), ('causal', 'amod'), ('relationships', 'dobj'), ('understand', 'conj'), ('problem', 'compound'), ('domains', 'dobj'), ('predict', 'conj'), ('future', 'amod'), ('events', 'dobj'), (',', 'punct'), ('case', 'pobj'), ('missing', 'amod'), ('data', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[BN, learn], [learn, causal], [causal, relationships], [relationships, understand], [understand, problem], [problem, domains], [domains, predict], [predict, future], [future, events], [events, ,], [,, case], [case, missing], [missing, data], [data, .]]

>> Trigrams: 
[[BN, learn, causal], [learn, causal, relationships], [causal, relationships, understand], [relationships, understand, problem], [understand, problem, domains], [problem, domains, predict], [domains, predict, future], [predict, future, events], [future, events, ,], [events, ,, case], [,, case, missing], [case, missing, data], [missing, data, .]]

>> Noun Phrases are: 
[BN, the causal relationships, various problem domains, future events, case, missing data]

>> Named Entities are: 
[]


============================ Sentence 43 =============================

Building a Bayesian Network A knowledge engineer can build a Bayesian network. 


>> Tokens are: 
[Building, Bayesian, Network, knowledge, engineer, build, Bayesian, network, .] 

>> PoS Tags are: 
[('Building', 'VERB'), ('Bayesian', 'PROPN'), ('Network', 'PROPN'), ('knowledge', 'NOUN'), ('engineer', 'NOUN'), ('build', 'VERB'), ('Bayesian', 'PROPN'), ('network', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Building', 'csubj'), ('Bayesian', 'compound'), ('Network', 'dative'), ('knowledge', 'compound'), ('engineer', 'nsubj'), ('build', 'ROOT'), ('Bayesian', 'compound'), ('network', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Building, Bayesian], [Bayesian, Network], [Network, knowledge], [knowledge, engineer], [engineer, build], [build, Bayesian], [Bayesian, network], [network, .]]

>> Trigrams: 
[[Building, Bayesian, Network], [Bayesian, Network, knowledge], [Network, knowledge, engineer], [knowledge, engineer, build], [engineer, build, Bayesian], [build, Bayesian, network], [Bayesian, network, .]]

>> Noun Phrases are: 
[a Bayesian Network, A knowledge engineer, a Bayesian network]

>> Named Entities are: 
[('Building a Bayesian Network', 'ORG'), ('Bayesian', 'GPE')]


============================ Sentence 44 =============================

There are a number of steps the knowledge engineer needs to take while building it. 


>> Tokens are: 
[number, steps, knowledge, engineer, needs, building, .] 

>> PoS Tags are: 
[('number', 'NOUN'), ('steps', 'NOUN'), ('knowledge', 'NOUN'), ('engineer', 'NOUN'), ('needs', 'VERB'), ('building', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('number', 'attr'), ('steps', 'pobj'), ('knowledge', 'compound'), ('engineer', 'nsubj'), ('needs', 'relcl'), ('building', 'advcl'), ('.', 'punct')]

>> Bigrams: 
[[number, steps], [steps, knowledge], [knowledge, engineer], [engineer, needs], [needs, building], [building, .]]

>> Trigrams: 
[[number, steps, knowledge], [steps, knowledge, engineer], [knowledge, engineer, needs], [engineer, needs, building], [needs, building, .]]

>> Noun Phrases are: 
[a number, steps, the knowledge engineer, it]

>> Named Entities are: 
[]


============================ Sentence 45 =============================

Example problem − Lung cancer. 


>> Tokens are: 
[Example, problem, −, Lung, cancer, .] 

>> PoS Tags are: 
[('Example', 'NOUN'), ('problem', 'NOUN'), ('−', 'PROPN'), ('Lung', 'PROPN'), ('cancer', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Example', 'compound'), ('problem', 'compound'), ('−', 'compound'), ('Lung', 'compound'), ('cancer', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Example, problem], [problem, −], [−, Lung], [Lung, cancer], [cancer, .]]

>> Trigrams: 
[[Example, problem, −], [problem, −, Lung], [−, Lung, cancer], [Lung, cancer, .]]

>> Noun Phrases are: 
[Example problem − Lung cancer]

>> Named Entities are: 
[('− Lung', 'PERSON')]


============================ Sentence 46 =============================

A patient has been suffering from breathlessness. 


>> Tokens are: 
[patient, suffering, breathlessness, .] 

>> PoS Tags are: 
[('patient', 'NOUN'), ('suffering', 'VERB'), ('breathlessness', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('patient', 'nsubj'), ('suffering', 'ROOT'), ('breathlessness', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[patient, suffering], [suffering, breathlessness], [breathlessness, .]]

>> Trigrams: 
[[patient, suffering, breathlessness], [suffering, breathlessness, .]]

>> Noun Phrases are: 
[A patient, breathlessness]

>> Named Entities are: 
[]


============================ Sentence 47 =============================

He visits the doctor, suspecting he has lung cancer. 


>> Tokens are: 
[visits, doctor, ,, suspecting, lung, cancer, .] 

>> PoS Tags are: 
[('visits', 'VERB'), ('doctor', 'NOUN'), (',', 'PUNCT'), ('suspecting', 'VERB'), ('lung', 'NOUN'), ('cancer', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('visits', 'ROOT'), ('doctor', 'dobj'), (',', 'punct'), ('suspecting', 'advcl'), ('lung', 'compound'), ('cancer', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[visits, doctor], [doctor, ,], [,, suspecting], [suspecting, lung], [lung, cancer], [cancer, .]]

>> Trigrams: 
[[visits, doctor, ,], [doctor, ,, suspecting], [,, suspecting, lung], [suspecting, lung, cancer], [lung, cancer, .]]

>> Noun Phrases are: 
[He, the doctor, he, lung cancer]

>> Named Entities are: 
[]


============================ Sentence 48 =============================

The doctor knows that barring lung cancer, there are various other possible diseases the patient might have such as tuberculosis and bronchitis. 


>> Tokens are: 
[doctor, knows, barring, lung, cancer, ,, possible, diseases, patient, tuberculosis, bronchitis, .] 

>> PoS Tags are: 
[('doctor', 'NOUN'), ('knows', 'VERB'), ('barring', 'VERB'), ('lung', 'NOUN'), ('cancer', 'NOUN'), (',', 'PUNCT'), ('possible', 'ADJ'), ('diseases', 'NOUN'), ('patient', 'NOUN'), ('tuberculosis', 'NOUN'), ('bronchitis', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('doctor', 'nsubj'), ('knows', 'ROOT'), ('barring', 'advcl'), ('lung', 'compound'), ('cancer', 'dobj'), (',', 'punct'), ('possible', 'amod'), ('diseases', 'attr'), ('patient', 'nsubj'), ('tuberculosis', 'pobj'), ('bronchitis', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[doctor, knows], [knows, barring], [barring, lung], [lung, cancer], [cancer, ,], [,, possible], [possible, diseases], [diseases, patient], [patient, tuberculosis], [tuberculosis, bronchitis], [bronchitis, .]]

>> Trigrams: 
[[doctor, knows, barring], [knows, barring, lung], [barring, lung, cancer], [lung, cancer, ,], [cancer, ,, possible], [,, possible, diseases], [possible, diseases, patient], [diseases, patient, tuberculosis], [patient, tuberculosis, bronchitis], [tuberculosis, bronchitis, .]]

>> Noun Phrases are: 
[The doctor, lung cancer, various other possible diseases, the patient, tuberculosis, bronchitis]

>> Named Entities are: 
[]


============================ Sentence 49 =============================

Gather Relevant Information of Problem · Is the patient a smoker? 


>> Tokens are: 
[Gather, Relevant, Information, Problem, ·, patient, smoker, ?] 

>> PoS Tags are: 
[('Gather', 'VERB'), ('Relevant', 'PROPN'), ('Information', 'NOUN'), ('Problem', 'PROPN'), ('·', 'PUNCT'), ('patient', 'NOUN'), ('smoker', 'NOUN'), ('?', 'PUNCT')] 

>> Dependency Tags are: 
[('Gather', 'nsubj'), ('Relevant', 'compound'), ('Information', 'dobj'), ('Problem', 'pobj'), ('·', 'punct'), ('patient', 'nsubj'), ('smoker', 'npadvmod'), ('?', 'punct')]

>> Bigrams: 
[[Gather, Relevant], [Relevant, Information], [Information, Problem], [Problem, ·], [·, patient], [patient, smoker], [smoker, ?]]

>> Trigrams: 
[[Gather, Relevant, Information], [Relevant, Information, Problem], [Information, Problem, ·], [Problem, ·, patient], [·, patient, smoker], [patient, smoker, ?]]

>> Noun Phrases are: 
[Relevant Information, Problem, the patient]

>> Named Entities are: 
[('Gather Relevant Information of Problem', 'ORG')]


============================ Sentence 50 =============================

If yes, then high chances of cancer and bronchitis. · 


>> Tokens are: 
[yes, ,, high, chances, cancer, bronchitis, ., ·] 

>> PoS Tags are: 
[('yes', 'INTJ'), (',', 'PUNCT'), ('high', 'ADJ'), ('chances', 'NOUN'), ('cancer', 'NOUN'), ('bronchitis', 'NOUN'), ('.', 'PUNCT'), ('·', 'PUNCT')] 

>> Dependency Tags are: 
[('yes', 'intj'), (',', 'punct'), ('high', 'amod'), ('chances', 'ROOT'), ('cancer', 'pobj'), ('bronchitis', 'conj'), ('.', 'punct'), ('·', 'punct')]

>> Bigrams: 
[[yes, ,], [,, high], [high, chances], [chances, cancer], [cancer, bronchitis], [bronchitis, .], [., ·]]

>> Trigrams: 
[[yes, ,, high], [,, high, chances], [high, chances, cancer], [chances, cancer, bronchitis], [cancer, bronchitis, .], [bronchitis, ., ·]]

>> Noun Phrases are: 
[If yes, then high chances, cancer, bronchitis]

>> Named Entities are: 
[]


============================ Sentence 51 =============================

Is the patient exposed to air pollution? 


>> Tokens are: 
[patient, exposed, air, pollution, ?] 

>> PoS Tags are: 
[('patient', 'NOUN'), ('exposed', 'VERB'), ('air', 'NOUN'), ('pollution', 'NOUN'), ('?', 'PUNCT')] 

>> Dependency Tags are: 
[('patient', 'nsubj'), ('exposed', 'acl'), ('air', 'compound'), ('pollution', 'pobj'), ('?', 'punct')]

>> Bigrams: 
[[patient, exposed], [exposed, air], [air, pollution], [pollution, ?]]

>> Trigrams: 
[[patient, exposed, air], [exposed, air, pollution], [air, pollution, ?]]

>> Noun Phrases are: 
[the patient, air pollution]

>> Named Entities are: 
[]


============================ Sentence 52 =============================

If yes, what sort of air pollution? 


>> Tokens are: 
[yes, ,, sort, air, pollution, ?] 

>> PoS Tags are: 
[('yes', 'INTJ'), (',', 'PUNCT'), ('sort', 'NOUN'), ('air', 'NOUN'), ('pollution', 'NOUN'), ('?', 'PUNCT')] 

>> Dependency Tags are: 
[('yes', 'intj'), (',', 'punct'), ('sort', 'ROOT'), ('air', 'compound'), ('pollution', 'pobj'), ('?', 'punct')]

>> Bigrams: 
[[yes, ,], [,, sort], [sort, air], [air, pollution], [pollution, ?]]

>> Trigrams: 
[[yes, ,, sort], [,, sort, air], [sort, air, pollution], [air, pollution, ?]]

>> Noun Phrases are: 
[If yes, what sort, air pollution]

>> Named Entities are: 
[]


============================ Sentence 53 =============================

· Take an X-Ray positive X-ray would indicate either TB or lung cancer. 


>> Tokens are: 
[·, X, -, Ray, positive, X, -, ray, indicate, TB, lung, cancer, .] 

>> PoS Tags are: 
[('·', 'PUNCT'), ('X', 'NOUN'), ('-', 'ADJ'), ('Ray', 'NOUN'), ('positive', 'ADJ'), ('X', 'NOUN'), ('-', 'NOUN'), ('ray', 'NOUN'), ('indicate', 'VERB'), ('TB', 'PROPN'), ('lung', 'NOUN'), ('cancer', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('·', 'punct'), ('X', 'compound'), ('-', 'amod'), ('Ray', 'nmod'), ('positive', 'amod'), ('X', 'dobj'), ('-', 'nsubj'), ('ray', 'nsubj'), ('indicate', 'ROOT'), ('TB', 'nmod'), ('lung', 'conj'), ('cancer', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[·, X], [X, -], [-, Ray], [Ray, positive], [positive, X], [X, -], [-, ray], [ray, indicate], [indicate, TB], [TB, lung], [lung, cancer], [cancer, .]]

>> Trigrams: 
[[·, X, -], [X, -, Ray], [-, Ray, positive], [Ray, positive, X], [positive, X, -], [X, -, ray], [-, ray, indicate], [ray, indicate, TB], [indicate, TB, lung], [TB, lung, cancer], [lung, cancer, .]]

>> Noun Phrases are: 
[an X-Ray positive X, -, ray, either TB or lung cancer]

>> Named Entities are: 
[('TB', 'ORG')]


============================ Sentence 54 =============================

Identify Interesting Variables The knowledge engineer tries to answer the questions − · Which nodes to represent? 


>> Tokens are: 
[Identify, Interesting, Variables, knowledge, engineer, tries, answer, questions, −, ·, nodes, represent, ?] 

>> PoS Tags are: 
[('Identify', 'VERB'), ('Interesting', 'PROPN'), ('Variables', 'PROPN'), ('knowledge', 'NOUN'), ('engineer', 'NOUN'), ('tries', 'VERB'), ('answer', 'VERB'), ('questions', 'NOUN'), ('−', 'VERB'), ('·', 'PUNCT'), ('nodes', 'VERB'), ('represent', 'VERB'), ('?', 'PUNCT')] 

>> Dependency Tags are: 
[('Identify', 'ROOT'), ('Interesting', 'compound'), ('Variables', 'dobj'), ('knowledge', 'compound'), ('engineer', 'nsubj'), ('tries', 'relcl'), ('answer', 'xcomp'), ('questions', 'dobj'), ('−', 'dobj'), ('·', 'punct'), ('nodes', 'relcl'), ('represent', 'xcomp'), ('?', 'punct')]

>> Bigrams: 
[[Identify, Interesting], [Interesting, Variables], [Variables, knowledge], [knowledge, engineer], [engineer, tries], [tries, answer], [answer, questions], [questions, −], [−, ·], [·, nodes], [nodes, represent], [represent, ?]]

>> Trigrams: 
[[Identify, Interesting, Variables], [Interesting, Variables, knowledge], [Variables, knowledge, engineer], [knowledge, engineer, tries], [engineer, tries, answer], [tries, answer, questions], [answer, questions, −], [questions, −, ·], [−, ·, nodes], [·, nodes, represent], [nodes, represent, ?]]

>> Noun Phrases are: 
[Interesting Variables, The knowledge engineer, the questions]

>> Named Entities are: 
[('− ·', 'PERSON')]


============================ Sentence 55 =============================

· What values can they take? 


>> Tokens are: 
[·, values, ?] 

>> PoS Tags are: 
[('·', 'PUNCT'), ('values', 'NOUN'), ('?', 'PUNCT')] 

>> Dependency Tags are: 
[('·', 'punct'), ('values', 'dobj'), ('?', 'punct')]

>> Bigrams: 
[[·, values], [values, ?]]

>> Trigrams: 
[[·, values, ?]]

>> Noun Phrases are: 
[What values, they]

>> Named Entities are: 
[]


============================ Sentence 56 =============================

In which state can they be? 


>> Tokens are: 
[state, ?] 

>> PoS Tags are: 
[('state', 'NOUN'), ('?', 'PUNCT')] 

>> Dependency Tags are: 
[('state', 'pobj'), ('?', 'punct')]

>> Bigrams: 
[[state, ?]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[which state, they]

>> Named Entities are: 
[]


============================ Sentence 57 =============================

For now let us consider nodes, with only discrete values. 


>> Tokens are: 
[let, consider, nodes, ,, discrete, values, .] 

>> PoS Tags are: 
[('let', 'VERB'), ('consider', 'VERB'), ('nodes', 'NOUN'), (',', 'PUNCT'), ('discrete', 'ADJ'), ('values', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('let', 'ROOT'), ('consider', 'ccomp'), ('nodes', 'dobj'), (',', 'punct'), ('discrete', 'amod'), ('values', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[let, consider], [consider, nodes], [nodes, ,], [,, discrete], [discrete, values], [values, .]]

>> Trigrams: 
[[let, consider, nodes], [consider, nodes, ,], [nodes, ,, discrete], [,, discrete, values], [discrete, values, .]]

>> Noun Phrases are: 
[us, nodes, only discrete values]

>> Named Entities are: 
[]


============================ Sentence 58 =============================

The variable must take on exactly one of these values at a time. 


>> Tokens are: 
[variable, exactly, values, time, .] 

>> PoS Tags are: 
[('variable', 'NOUN'), ('exactly', 'ADV'), ('values', 'NOUN'), ('time', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('variable', 'nsubj'), ('exactly', 'advmod'), ('values', 'pobj'), ('time', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[variable, exactly], [exactly, values], [values, time], [time, .]]

>> Trigrams: 
[[variable, exactly, values], [exactly, values, time], [values, time, .]]

>> Noun Phrases are: 
[The variable, these values, a time]

>> Named Entities are: 
[]


============================ Sentence 59 =============================

Common types of discrete nodes are − · Boolean nodes − They represent propositions, taking binary values TRUE 


>> Tokens are: 
[Common, types, discrete, nodes, −, ·, Boolean, nodes, −, represent, propositions, ,, taking, binary, values, TRUE] 

>> PoS Tags are: 
[('Common', 'ADJ'), ('types', 'NOUN'), ('discrete', 'ADJ'), ('nodes', 'NOUN'), ('−', 'PROPN'), ('·', 'PUNCT'), ('Boolean', 'ADJ'), ('nodes', 'NOUN'), ('−', 'PROPN'), ('represent', 'VERB'), ('propositions', 'NOUN'), (',', 'PUNCT'), ('taking', 'VERB'), ('binary', 'ADJ'), ('values', 'NOUN'), ('TRUE', 'ADJ')] 

>> Dependency Tags are: 
[('Common', 'amod'), ('types', 'nsubj'), ('discrete', 'amod'), ('nodes', 'pobj'), ('−', 'attr'), ('·', 'punct'), ('Boolean', 'amod'), ('nodes', 'npadvmod'), ('−', 'pobj'), ('represent', 'ROOT'), ('propositions', 'dobj'), (',', 'punct'), ('taking', 'advcl'), ('binary', 'amod'), ('values', 'dobj'), ('TRUE', 'punct')]

>> Bigrams: 
[[Common, types], [types, discrete], [discrete, nodes], [nodes, −], [−, ·], [·, Boolean], [Boolean, nodes], [nodes, −], [−, represent], [represent, propositions], [propositions, ,], [,, taking], [taking, binary], [binary, values], [values, TRUE]]

>> Trigrams: 
[[Common, types, discrete], [types, discrete, nodes], [discrete, nodes, −], [nodes, −, ·], [−, ·, Boolean], [·, Boolean, nodes], [Boolean, nodes, −], [nodes, −, represent], [−, represent, propositions], [represent, propositions, ,], [propositions, ,, taking], [,, taking, binary], [taking, binary, values], [binary, values, TRUE]]

>> Noun Phrases are: 
[Common types, discrete nodes, −, −, They, propositions, binary values]

>> Named Entities are: 
[('Boolean', 'PERSON'), ('TRUE', 'ORG')]


============================ Sentence 60 =============================

(T) and FALSE (F). 


>> Tokens are: 
[(, T, ), FALSE, (, F, ), .] 

>> PoS Tags are: 
[('(', 'PUNCT'), ('T', 'NOUN'), (')', 'PUNCT'), ('FALSE', 'PROPN'), ('(', 'PUNCT'), ('F', 'PROPN'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('(', 'punct'), ('T', 'ROOT'), (')', 'punct'), ('FALSE', 'conj'), ('(', 'punct'), ('F', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[(, T], [T, )], [), FALSE], [FALSE, (], [(, F], [F, )], [), .]]

>> Trigrams: 
[[(, T, )], [T, ), FALSE], [), FALSE, (], [FALSE, (, F], [(, F, )], [F, ), .]]

>> Noun Phrases are: 
[(T, FALSE, (F]

>> Named Entities are: 
[]


============================ Sentence 61 =============================

· Ordered values − A node Pollution might represent and take values from {low, medium, high} describing degree of a patient’s exposure to pollution. 


>> Tokens are: 
[·, Ordered, values, −, node, Pollution, represent, values, {, low, ,, medium, ,, high, }, describing, degree, patient, exposure, pollution, .] 

>> PoS Tags are: 
[('·', 'PUNCT'), ('Ordered', 'VERB'), ('values', 'NOUN'), ('−', 'VERB'), ('node', 'NOUN'), ('Pollution', 'PROPN'), ('represent', 'VERB'), ('values', 'NOUN'), ('{', 'PUNCT'), ('low', 'ADJ'), (',', 'PUNCT'), ('medium', 'ADJ'), (',', 'PUNCT'), ('high', 'ADJ'), ('}', 'PUNCT'), ('describing', 'VERB'), ('degree', 'NOUN'), ('patient', 'NOUN'), ('exposure', 'NOUN'), ('pollution', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('·', 'punct'), ('Ordered', 'amod'), ('values', 'nsubj'), ('−', 'nmod'), ('node', 'compound'), ('Pollution', 'nsubj'), ('represent', 'ROOT'), ('values', 'dobj'), ('{', 'punct'), ('low', 'amod'), (',', 'punct'), ('medium', 'amod'), (',', 'punct'), ('high', 'pobj'), ('}', 'punct'), ('describing', 'pcomp'), ('degree', 'dobj'), ('patient', 'poss'), ('exposure', 'pobj'), ('pollution', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[·, Ordered], [Ordered, values], [values, −], [−, node], [node, Pollution], [Pollution, represent], [represent, values], [values, {], [{, low], [low, ,], [,, medium], [medium, ,], [,, high], [high, }], [}, describing], [describing, degree], [degree, patient], [patient, exposure], [exposure, pollution], [pollution, .]]

>> Trigrams: 
[[·, Ordered, values], [Ordered, values, −], [values, −, node], [−, node, Pollution], [node, Pollution, represent], [Pollution, represent, values], [represent, values, {], [values, {, low], [{, low, ,], [low, ,, medium], [,, medium, ,], [medium, ,, high], [,, high, }], [high, }, describing], [}, describing, degree], [describing, degree, patient], [degree, patient, exposure], [patient, exposure, pollution], [exposure, pollution, .]]

>> Noun Phrases are: 
[· Ordered values, A node Pollution, values, degree, a patient’s exposure, pollution]

>> Named Entities are: 
[('− A', 'PERSON')]


============================ Sentence 62 =============================

· Integral values 


>> Tokens are: 
[·, Integral, values] 

>> PoS Tags are: 
[('·', 'PUNCT'), ('Integral', 'ADJ'), ('values', 'NOUN')] 

>> Dependency Tags are: 
[('·', 'punct'), ('Integral', 'amod'), ('values', 'ROOT')]

>> Bigrams: 
[[·, Integral], [Integral, values]]

>> Trigrams: 
[[·, Integral, values]]

>> Noun Phrases are: 
[· Integral values]

>> Named Entities are: 
[]


============================ Sentence 63 =============================

− 


>> Tokens are: 
[−] 

>> PoS Tags are: 
[('−', 'VERB')] 

>> Dependency Tags are: 
[('−', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 64 =============================

A node called Age might represent patient’s age with possible values from 1 to 120. 


>> Tokens are: 
[node, called, Age, represent, patient, age, possible, values, 1, 120, .] 

>> PoS Tags are: 
[('node', 'NOUN'), ('called', 'VERB'), ('Age', 'PROPN'), ('represent', 'VERB'), ('patient', 'NOUN'), ('age', 'NOUN'), ('possible', 'ADJ'), ('values', 'NOUN'), ('1', 'NUM'), ('120', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('node', 'nsubj'), ('called', 'acl'), ('Age', 'oprd'), ('represent', 'ROOT'), ('patient', 'amod'), ('age', 'dobj'), ('possible', 'amod'), ('values', 'pobj'), ('1', 'pobj'), ('120', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[node, called], [called, Age], [Age, represent], [represent, patient], [patient, age], [age, possible], [possible, values], [values, 1], [1, 120], [120, .]]

>> Trigrams: 
[[node, called, Age], [called, Age, represent], [Age, represent, patient], [represent, patient, age], [patient, age, possible], [age, possible, values], [possible, values, 1], [values, 1, 120], [1, 120, .]]

>> Noun Phrases are: 
[A node, Age, patient’s age, possible values]

>> Named Entities are: 
[('1', 'CARDINAL'), ('120', 'CARDINAL')]


============================ Sentence 65 =============================

Even at this early stage, modeling choices are being made. 


>> Tokens are: 
[early, stage, ,, modeling, choices, .] 

>> PoS Tags are: 
[('early', 'ADJ'), ('stage', 'NOUN'), (',', 'PUNCT'), ('modeling', 'NOUN'), ('choices', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('early', 'amod'), ('stage', 'pobj'), (',', 'punct'), ('modeling', 'compound'), ('choices', 'nsubjpass'), ('.', 'punct')]

>> Bigrams: 
[[early, stage], [stage, ,], [,, modeling], [modeling, choices], [choices, .]]

>> Trigrams: 
[[early, stage, ,], [stage, ,, modeling], [,, modeling, choices], [modeling, choices, .]]

>> Noun Phrases are: 
[this early stage, modeling choices]

>> Named Entities are: 
[]


============================ Sentence 66 =============================

Possible nodes and values for the lung cancer example − 	Node Name 	Type 	Value 	Nodes Creation  	Polution 	Binary 	{LOW, HIGH, MEDIUM} 	  	Smoker 	Boolean 	{TRUE, FASLE} 	  	Lung-Cancer 	 


>> Tokens are: 
[Possible, nodes, values, lung, cancer, example, −, 	, Node, 	, Type, 	, Value, 	, Nodes, Creation,  	, Polution, 	, Binary, 	, {, LOW, ,, HIGH, ,, MEDIUM, }, 	  	, Smoker, 	, Boolean, 	, {, TRUE, ,, FASLE, }, 	  	, Lung, -, Cancer, 	] 

>> PoS Tags are: 
[('Possible', 'ADJ'), ('nodes', 'NOUN'), ('values', 'NOUN'), ('lung', 'NOUN'), ('cancer', 'NOUN'), ('example', 'NOUN'), ('−', 'PROPN'), ('\t', 'SPACE'), ('Node', 'PROPN'), ('\t', 'SPACE'), ('Type', 'PROPN'), ('\t', 'SPACE'), ('Value', 'PROPN'), ('\t', 'SPACE'), ('Nodes', 'PROPN'), ('Creation', 'PROPN'), (' \t', 'SPACE'), ('Polution', 'PROPN'), ('\t', 'SPACE'), ('Binary', 'PROPN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('LOW', 'PROPN'), (',', 'PUNCT'), ('HIGH', 'PROPN'), (',', 'PUNCT'), ('MEDIUM', 'PROPN'), ('}', 'PUNCT'), ('\t  \t', 'SPACE'), ('Smoker', 'PROPN'), ('\t', 'SPACE'), ('Boolean', 'PROPN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('TRUE', 'INTJ'), (',', 'PUNCT'), ('FASLE', 'PROPN'), ('}', 'PUNCT'), ('\t  \t', 'SPACE'), ('Lung', 'PROPN'), ('-', 'PUNCT'), ('Cancer', 'PROPN'), ('\t', 'SPACE')] 

>> Dependency Tags are: 
[('Possible', 'amod'), ('nodes', 'nsubj'), ('values', 'conj'), ('lung', 'compound'), ('cancer', 'compound'), ('example', 'pobj'), ('−', 'compound'), ('\t', 'compound'), ('Node', 'compound'), ('\t', 'compound'), ('Type', 'compound'), ('\t', 'compound'), ('Value', 'appos'), ('\t', 'compound'), ('Nodes', 'compound'), ('Creation', 'compound'), (' \t', 'compound'), ('Polution', 'compound'), ('\t', 'compound'), ('Binary', 'compound'), ('\t', 'ROOT'), ('{', 'punct'), ('LOW', 'appos'), (',', 'punct'), ('HIGH', 'appos'), (',', 'punct'), ('MEDIUM', 'npadvmod'), ('}', 'punct'), ('\t  \t', 'compound'), ('Smoker', 'compound'), ('\t', 'compound'), ('Boolean', 'compound'), ('\t', 'appos'), ('{', 'punct'), ('TRUE', 'amod'), (',', 'punct'), ('FASLE', 'nmod'), ('}', 'punct'), ('\t  \t', 'appos'), ('Lung', 'compound'), ('-', 'punct'), ('Cancer', 'compound'), ('\t', 'appos')]

>> Bigrams: 
[[Possible, nodes], [nodes, values], [values, lung], [lung, cancer], [cancer, example], [example, −], [−, 	], [	, Node], [Node, 	], [	, Type], [Type, 	], [	, Value], [Value, 	], [	, Nodes], [Nodes, Creation], [Creation,  	], [ 	, Polution], [Polution, 	], [	, Binary], [Binary, 	], [	, {], [{, LOW], [LOW, ,], [,, HIGH], [HIGH, ,], [,, MEDIUM], [MEDIUM, }], [}, 	  	], [	  	, Smoker], [Smoker, 	], [	, Boolean], [Boolean, 	], [	, {], [{, TRUE], [TRUE, ,], [,, FASLE], [FASLE, }], [}, 	  	], [	  	, Lung], [Lung, -], [-, Cancer], [Cancer, 	]]

>> Trigrams: 
[[Possible, nodes, values], [nodes, values, lung], [values, lung, cancer], [lung, cancer, example], [cancer, example, −], [example, −, 	], [−, 	, Node], [	, Node, 	], [Node, 	, Type], [	, Type, 	], [Type, 	, Value], [	, Value, 	], [Value, 	, Nodes], [	, Nodes, Creation], [Nodes, Creation,  	], [Creation,  	, Polution], [ 	, Polution, 	], [Polution, 	, Binary], [	, Binary, 	], [Binary, 	, {], [	, {, LOW], [{, LOW, ,], [LOW, ,, HIGH], [,, HIGH, ,], [HIGH, ,, MEDIUM], [,, MEDIUM, }], [MEDIUM, }, 	  	], [}, 	  	, Smoker], [	  	, Smoker, 	], [Smoker, 	, Boolean], [	, Boolean, 	], [Boolean, 	, {], [	, {, TRUE], [{, TRUE, ,], [TRUE, ,, FASLE], [,, FASLE, }], [FASLE, }, 	  	], [}, 	  	, Lung], [	  	, Lung, -], [Lung, -, Cancer], [-, Cancer, 	]]

>> Noun Phrases are: 
[Possible nodes, values, the lung cancer example, Node Name, 	Type 	Value, LOW, HIGH]

>> Named Entities are: 
[('−', 'PERSON'), ('Node Name', 'PERSON'), ('MEDIUM', 'ORG'), ('Lung-Cancer', 'PERSON')]


============================ Sentence 67 =============================

Boolean 	{TRUE, FASLE} 	  	X-Ray 	Binary 	{Positive, Negative} 	   Create Arcs between Nodes Topology of the network should capture qualitative relationships between variables. 


>> Tokens are: 
[Boolean, 	, {, TRUE, ,, FASLE, }, 	  	, X, -, Ray, 	, Binary, 	, {, Positive, ,, Negative, }, 	   , Create, Arcs, Nodes, Topology, network, capture, qualitative, relationships, variables, .] 

>> PoS Tags are: 
[('Boolean', 'PROPN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('TRUE', 'INTJ'), (',', 'PUNCT'), ('FASLE', 'PROPN'), ('}', 'PUNCT'), ('\t  \t', 'SPACE'), ('X', 'PROPN'), ('-', 'PROPN'), ('Ray', 'NOUN'), ('\t', 'SPACE'), ('Binary', 'PROPN'), ('\t', 'SPACE'), ('{', 'PUNCT'), ('Positive', 'ADJ'), (',', 'PUNCT'), ('Negative', 'PROPN'), ('}', 'PUNCT'), ('\t   ', 'SPACE'), ('Create', 'PROPN'), ('Arcs', 'PROPN'), ('Nodes', 'PROPN'), ('Topology', 'PROPN'), ('network', 'NOUN'), ('capture', 'VERB'), ('qualitative', 'ADJ'), ('relationships', 'NOUN'), ('variables', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Boolean', 'compound'), ('\t', 'nsubj'), ('{', 'punct'), ('TRUE', 'amod'), (',', 'punct'), ('FASLE', 'nmod'), ('}', 'punct'), ('\t  \t', 'compound'), ('X', 'compound'), ('-', 'compound'), ('Ray', 'compound'), ('\t', 'compound'), ('Binary', 'compound'), ('\t', 'nmod'), ('{', 'punct'), ('Positive', 'amod'), (',', 'punct'), ('Negative', 'nmod'), ('}', 'punct'), ('\t   ', 'appos'), ('Create', 'compound'), ('Arcs', 'appos'), ('Nodes', 'compound'), ('Topology', 'pobj'), ('network', 'pobj'), ('capture', 'ROOT'), ('qualitative', 'amod'), ('relationships', 'dobj'), ('variables', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Boolean, 	], [	, {], [{, TRUE], [TRUE, ,], [,, FASLE], [FASLE, }], [}, 	  	], [	  	, X], [X, -], [-, Ray], [Ray, 	], [	, Binary], [Binary, 	], [	, {], [{, Positive], [Positive, ,], [,, Negative], [Negative, }], [}, 	   ], [	   , Create], [Create, Arcs], [Arcs, Nodes], [Nodes, Topology], [Topology, network], [network, capture], [capture, qualitative], [qualitative, relationships], [relationships, variables], [variables, .]]

>> Trigrams: 
[[Boolean, 	, {], [	, {, TRUE], [{, TRUE, ,], [TRUE, ,, FASLE], [,, FASLE, }], [FASLE, }, 	  	], [}, 	  	, X], [	  	, X, -], [X, -, Ray], [-, Ray, 	], [Ray, 	, Binary], [	, Binary, 	], [Binary, 	, {], [	, {, Positive], [{, Positive, ,], [Positive, ,, Negative], [,, Negative, }], [Negative, }, 	   ], [}, 	   , Create], [	   , Create, Arcs], [Create, Arcs, Nodes], [Arcs, Nodes, Topology], [Nodes, Topology, network], [Topology, network, capture], [network, capture, qualitative], [capture, qualitative, relationships], [qualitative, relationships, variables], [relationships, variables, .]]

>> Noun Phrases are: 
[Create Arcs, Nodes Topology, the network, qualitative relationships, variables]

>> Named Entities are: 
[('X-Ray', 'PERSON'), ('Create Arcs', 'PERSON')]


============================ Sentence 68 =============================

For example, what causes a patient to have lung cancer? - Pollution and smoking. 


>> Tokens are: 
[example, ,, causes, patient, lung, cancer, ?, -, Pollution, smoking, .] 

>> PoS Tags are: 
[('example', 'NOUN'), (',', 'PUNCT'), ('causes', 'VERB'), ('patient', 'NOUN'), ('lung', 'NOUN'), ('cancer', 'NOUN'), ('?', 'PUNCT'), ('-', 'PUNCT'), ('Pollution', 'PROPN'), ('smoking', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('example', 'pobj'), (',', 'punct'), ('causes', 'ROOT'), ('patient', 'dobj'), ('lung', 'compound'), ('cancer', 'dobj'), ('?', 'punct'), ('-', 'punct'), ('Pollution', 'dobj'), ('smoking', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[example, ,], [,, causes], [causes, patient], [patient, lung], [lung, cancer], [cancer, ?], [?, -], [-, Pollution], [Pollution, smoking], [smoking, .]]

>> Trigrams: 
[[example, ,, causes], [,, causes, patient], [causes, patient, lung], [patient, lung, cancer], [lung, cancer, ?], [cancer, ?, -], [?, -, Pollution], [-, Pollution, smoking], [Pollution, smoking, .]]

>> Noun Phrases are: 
[example, what, a patient, lung cancer, - Pollution, smoking]

>> Named Entities are: 
[]


============================ Sentence 69 =============================

Then add arcs from node Pollution and node Smoker to node Lung-Cancer. 


>> Tokens are: 
[add, arcs, node, Pollution, node, Smoker, node, Lung, -, Cancer, .] 

>> PoS Tags are: 
[('add', 'VERB'), ('arcs', 'NOUN'), ('node', 'NOUN'), ('Pollution', 'PROPN'), ('node', 'NOUN'), ('Smoker', 'PROPN'), ('node', 'VERB'), ('Lung', 'PROPN'), ('-', 'PUNCT'), ('Cancer', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('add', 'ROOT'), ('arcs', 'dobj'), ('node', 'compound'), ('Pollution', 'pobj'), ('node', 'compound'), ('Smoker', 'conj'), ('node', 'advcl'), ('Lung', 'compound'), ('-', 'punct'), ('Cancer', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[add, arcs], [arcs, node], [node, Pollution], [Pollution, node], [node, Smoker], [Smoker, node], [node, Lung], [Lung, -], [-, Cancer], [Cancer, .]]

>> Trigrams: 
[[add, arcs, node], [arcs, node, Pollution], [node, Pollution, node], [Pollution, node, Smoker], [node, Smoker, node], [Smoker, node, Lung], [node, Lung, -], [Lung, -, Cancer], [-, Cancer, .]]

>> Noun Phrases are: 
[arcs, node Pollution, node Smoker, Lung-Cancer]

>> Named Entities are: 
[('Lung-Cancer', 'PERSON')]


============================ Sentence 70 =============================

Similarly if patient has lung cancer, then X-ray result will be positive. 


>> Tokens are: 
[Similarly, patient, lung, cancer, ,, X, -, ray, result, positive, .] 

>> PoS Tags are: 
[('Similarly', 'ADV'), ('patient', 'NOUN'), ('lung', 'NOUN'), ('cancer', 'NOUN'), (',', 'PUNCT'), ('X', 'NOUN'), ('-', 'NOUN'), ('ray', 'NOUN'), ('result', 'NOUN'), ('positive', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Similarly', 'advmod'), ('patient', 'nsubj'), ('lung', 'compound'), ('cancer', 'dobj'), (',', 'punct'), ('X', 'compound'), ('-', 'compound'), ('ray', 'compound'), ('result', 'nsubj'), ('positive', 'acomp'), ('.', 'punct')]

>> Bigrams: 
[[Similarly, patient], [patient, lung], [lung, cancer], [cancer, ,], [,, X], [X, -], [-, ray], [ray, result], [result, positive], [positive, .]]

>> Trigrams: 
[[Similarly, patient, lung], [patient, lung, cancer], [lung, cancer, ,], [cancer, ,, X], [,, X, -], [X, -, ray], [-, ray, result], [ray, result, positive], [result, positive, .]]

>> Noun Phrases are: 
[patient, lung cancer, X-ray result]

>> Named Entities are: 
[]


============================ Sentence 71 =============================

Then add arcs from node Lung-Cancer to node X-Ray. 


>> Tokens are: 
[add, arcs, node, Lung, -, Cancer, node, X, -, Ray, .] 

>> PoS Tags are: 
[('add', 'VERB'), ('arcs', 'NOUN'), ('node', 'NOUN'), ('Lung', 'PROPN'), ('-', 'PUNCT'), ('Cancer', 'PROPN'), ('node', 'VERB'), ('X', 'NOUN'), ('-', 'NOUN'), ('Ray', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('add', 'ROOT'), ('arcs', 'dobj'), ('node', 'compound'), ('Lung', 'compound'), ('-', 'punct'), ('Cancer', 'pobj'), ('node', 'advcl'), ('X', 'dobj'), ('-', 'compound'), ('Ray', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[add, arcs], [arcs, node], [node, Lung], [Lung, -], [-, Cancer], [Cancer, node], [node, X], [X, -], [-, Ray], [Ray, .]]

>> Trigrams: 
[[add, arcs, node], [arcs, node, Lung], [node, Lung, -], [Lung, -, Cancer], [-, Cancer, node], [Cancer, node, X], [node, X, -], [X, -, Ray], [-, Ray, .]]

>> Noun Phrases are: 
[arcs, node Lung-Cancer, X, -Ray]

>> Named Entities are: 
[('Lung-Cancer', 'PERSON'), ('node X-Ray', 'PERSON')]


============================ Sentence 72 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 73 =============================

Specify Topology Conventionally, BNs are laid out so that the arcs point from top to bottom. 


>> Tokens are: 
[Specify, Topology, Conventionally, ,, BNs, laid, arcs, point, .] 

>> PoS Tags are: 
[('Specify', 'PROPN'), ('Topology', 'PROPN'), ('Conventionally', 'PROPN'), (',', 'PUNCT'), ('BNs', 'NOUN'), ('laid', 'VERB'), ('arcs', 'NOUN'), ('point', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Specify', 'compound'), ('Topology', 'compound'), ('Conventionally', 'npadvmod'), (',', 'punct'), ('BNs', 'nsubjpass'), ('laid', 'ROOT'), ('arcs', 'compound'), ('point', 'advcl'), ('.', 'punct')]

>> Bigrams: 
[[Specify, Topology], [Topology, Conventionally], [Conventionally, ,], [,, BNs], [BNs, laid], [laid, arcs], [arcs, point], [point, .]]

>> Trigrams: 
[[Specify, Topology, Conventionally], [Topology, Conventionally, ,], [Conventionally, ,, BNs], [,, BNs, laid], [BNs, laid, arcs], [laid, arcs, point], [arcs, point, .]]

>> Noun Phrases are: 
[BNs, top, bottom]

>> Named Entities are: 
[]


============================ Sentence 74 =============================

The set of parent nodes of a node X is given by Parents(X). 


>> Tokens are: 
[set, parent, nodes, node, X, given, Parents(X, ), .] 

>> PoS Tags are: 
[('set', 'NOUN'), ('parent', 'NOUN'), ('nodes', 'NOUN'), ('node', 'NOUN'), ('X', 'NOUN'), ('given', 'VERB'), ('Parents(X', 'PROPN'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('set', 'nsubjpass'), ('parent', 'compound'), ('nodes', 'pobj'), ('node', 'pobj'), ('X', 'nsubjpass'), ('given', 'ROOT'), ('Parents(X', 'pobj'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[set, parent], [parent, nodes], [nodes, node], [node, X], [X, given], [given, Parents(X], [Parents(X, )], [), .]]

>> Trigrams: 
[[set, parent, nodes], [parent, nodes, node], [nodes, node, X], [node, X, given], [X, given, Parents(X], [given, Parents(X, )], [Parents(X, ), .]]

>> Noun Phrases are: 
[The set, parent nodes, a node, X, Parents(X]

>> Named Entities are: 
[]


============================ Sentence 75 =============================

The Lung-Cancer node has two parents (reasons or causes): Pollution and Smoker, while node Smoker is an ancestor of node X-Ray. 


>> Tokens are: 
[Lung, -, Cancer, node, parents, (, reasons, causes, ):, Pollution, Smoker, ,, node, Smoker, ancestor, node, X, -, Ray, .] 

>> PoS Tags are: 
[('Lung', 'PROPN'), ('-', 'PUNCT'), ('Cancer', 'PROPN'), ('node', 'NOUN'), ('parents', 'NOUN'), ('(', 'PUNCT'), ('reasons', 'NOUN'), ('causes', 'NOUN'), ('):', 'PUNCT'), ('Pollution', 'PROPN'), ('Smoker', 'PROPN'), (',', 'PUNCT'), ('node', 'NOUN'), ('Smoker', 'PROPN'), ('ancestor', 'NOUN'), ('node', 'NOUN'), ('X', 'NOUN'), ('-', 'NOUN'), ('Ray', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Lung', 'compound'), ('-', 'punct'), ('Cancer', 'compound'), ('node', 'nsubj'), ('parents', 'dobj'), ('(', 'punct'), ('reasons', 'appos'), ('causes', 'conj'), ('):', 'punct'), ('Pollution', 'appos'), ('Smoker', 'conj'), (',', 'punct'), ('node', 'compound'), ('Smoker', 'nsubj'), ('ancestor', 'attr'), ('node', 'compound'), ('X', 'pobj'), ('-', 'compound'), ('Ray', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Lung, -], [-, Cancer], [Cancer, node], [node, parents], [parents, (], [(, reasons], [reasons, causes], [causes, ):], [):, Pollution], [Pollution, Smoker], [Smoker, ,], [,, node], [node, Smoker], [Smoker, ancestor], [ancestor, node], [node, X], [X, -], [-, Ray], [Ray, .]]

>> Trigrams: 
[[Lung, -, Cancer], [-, Cancer, node], [Cancer, node, parents], [node, parents, (], [parents, (, reasons], [(, reasons, causes], [reasons, causes, ):], [causes, ):, Pollution], [):, Pollution, Smoker], [Pollution, Smoker, ,], [Smoker, ,, node], [,, node, Smoker], [node, Smoker, ancestor], [Smoker, ancestor, node], [ancestor, node, X], [node, X, -], [X, -, Ray], [-, Ray, .]]

>> Noun Phrases are: 
[The Lung-Cancer node, two parents, reasons, causes, Pollution, Smoker, node Smoker, an ancestor, node X, -Ray]

>> Named Entities are: 
[('The Lung-Cancer', 'ORG'), ('two', 'CARDINAL'), ('Smoker', 'ORG'), ('Smoker', 'ORG'), ('node X-Ray', 'PERSON')]


============================ Sentence 76 =============================

Similarly, X-Ray is a child (consequence or effects) of node Lung-Cancer and successor of nodes Smoker and Pollution. 


>> Tokens are: 
[Similarly, ,, X, -, Ray, child, (, consequence, effects, ), node, Lung, -, Cancer, successor, nodes, Smoker, Pollution, .] 

>> PoS Tags are: 
[('Similarly', 'ADV'), (',', 'PUNCT'), ('X', 'NOUN'), ('-', 'NOUN'), ('Ray', 'PROPN'), ('child', 'NOUN'), ('(', 'PUNCT'), ('consequence', 'NOUN'), ('effects', 'NOUN'), (')', 'PUNCT'), ('node', 'NOUN'), ('Lung', 'PROPN'), ('-', 'PUNCT'), ('Cancer', 'PROPN'), ('successor', 'NOUN'), ('nodes', 'NOUN'), ('Smoker', 'PROPN'), ('Pollution', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Similarly', 'advmod'), (',', 'punct'), ('X', 'compound'), ('-', 'compound'), ('Ray', 'nsubj'), ('child', 'attr'), ('(', 'punct'), ('consequence', 'appos'), ('effects', 'conj'), (')', 'punct'), ('node', 'compound'), ('Lung', 'compound'), ('-', 'punct'), ('Cancer', 'pobj'), ('successor', 'conj'), ('nodes', 'pobj'), ('Smoker', 'appos'), ('Pollution', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[Similarly, ,], [,, X], [X, -], [-, Ray], [Ray, child], [child, (], [(, consequence], [consequence, effects], [effects, )], [), node], [node, Lung], [Lung, -], [-, Cancer], [Cancer, successor], [successor, nodes], [nodes, Smoker], [Smoker, Pollution], [Pollution, .]]

>> Trigrams: 
[[Similarly, ,, X], [,, X, -], [X, -, Ray], [-, Ray, child], [Ray, child, (], [child, (, consequence], [(, consequence, effects], [consequence, effects, )], [effects, ), node], [), node, Lung], [node, Lung, -], [Lung, -, Cancer], [-, Cancer, successor], [Cancer, successor, nodes], [successor, nodes, Smoker], [nodes, Smoker, Pollution], [Smoker, Pollution, .]]

>> Noun Phrases are: 
[X-Ray, a child, consequence, effects, node Lung-Cancer, successor, nodes, Smoker, Pollution]

>> Named Entities are: 
[('X-Ray', 'PERSON'), ('Lung-Cancer', 'PERSON'), ('Smoker and Pollution', 'ORG')]


============================ Sentence 77 =============================

Conditional Probabilities Now quantify the relationships between connected nodes: this is done by specifying a conditional probability distribution for each node. 


>> Tokens are: 
[Conditional, Probabilities, quantify, relationships, connected, nodes, :, specifying, conditional, probability, distribution, node, .] 

>> PoS Tags are: 
[('Conditional', 'PROPN'), ('Probabilities', 'NOUN'), ('quantify', 'VERB'), ('relationships', 'NOUN'), ('connected', 'VERB'), ('nodes', 'NOUN'), (':', 'PUNCT'), ('specifying', 'VERB'), ('conditional', 'ADJ'), ('probability', 'NOUN'), ('distribution', 'NOUN'), ('node', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Conditional', 'compound'), ('Probabilities', 'nsubj'), ('quantify', 'ccomp'), ('relationships', 'dobj'), ('connected', 'amod'), ('nodes', 'pobj'), (':', 'punct'), ('specifying', 'pcomp'), ('conditional', 'amod'), ('probability', 'compound'), ('distribution', 'dobj'), ('node', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Conditional, Probabilities], [Probabilities, quantify], [quantify, relationships], [relationships, connected], [connected, nodes], [nodes, :], [:, specifying], [specifying, conditional], [conditional, probability], [probability, distribution], [distribution, node], [node, .]]

>> Trigrams: 
[[Conditional, Probabilities, quantify], [Probabilities, quantify, relationships], [quantify, relationships, connected], [relationships, connected, nodes], [connected, nodes, :], [nodes, :, specifying], [:, specifying, conditional], [specifying, conditional, probability], [conditional, probability, distribution], [probability, distribution, node], [distribution, node, .]]

>> Noun Phrases are: 
[Conditional Probabilities, the relationships, connected nodes, a conditional probability distribution, each node]

>> Named Entities are: 
[]


============================ Sentence 78 =============================

As only discrete variables are considered here, this takes the form of a Conditional Probability Table (CPT). 


>> Tokens are: 
[discrete, variables, considered, ,, takes, form, Conditional, Probability, Table, (, CPT, ), .] 

>> PoS Tags are: 
[('discrete', 'ADJ'), ('variables', 'NOUN'), ('considered', 'VERB'), (',', 'PUNCT'), ('takes', 'VERB'), ('form', 'NOUN'), ('Conditional', 'PROPN'), ('Probability', 'PROPN'), ('Table', 'PROPN'), ('(', 'PUNCT'), ('CPT', 'PROPN'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('discrete', 'amod'), ('variables', 'nsubjpass'), ('considered', 'advcl'), (',', 'punct'), ('takes', 'ROOT'), ('form', 'dobj'), ('Conditional', 'compound'), ('Probability', 'compound'), ('Table', 'pobj'), ('(', 'punct'), ('CPT', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[discrete, variables], [variables, considered], [considered, ,], [,, takes], [takes, form], [form, Conditional], [Conditional, Probability], [Probability, Table], [Table, (], [(, CPT], [CPT, )], [), .]]

>> Trigrams: 
[[discrete, variables, considered], [variables, considered, ,], [considered, ,, takes], [,, takes, form], [takes, form, Conditional], [form, Conditional, Probability], [Conditional, Probability, Table], [Probability, Table, (], [Table, (, CPT], [(, CPT, )], [CPT, ), .]]

>> Noun Phrases are: 
[only discrete variables, the form, a Conditional Probability Table, (CPT]

>> Named Entities are: 
[('Conditional Probability Table', 'ORG')]


============================ Sentence 79 =============================

First, for each node we need to look at all the possible combinations of values of those parent nodes. 


>> Tokens are: 
[,, node, need, look, possible, combinations, values, parent, nodes, .] 

>> PoS Tags are: 
[(',', 'PUNCT'), ('node', 'NOUN'), ('need', 'VERB'), ('look', 'VERB'), ('possible', 'ADJ'), ('combinations', 'NOUN'), ('values', 'NOUN'), ('parent', 'NOUN'), ('nodes', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(',', 'punct'), ('node', 'pobj'), ('need', 'ROOT'), ('look', 'xcomp'), ('possible', 'amod'), ('combinations', 'pobj'), ('values', 'pobj'), ('parent', 'compound'), ('nodes', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[,, node], [node, need], [need, look], [look, possible], [possible, combinations], [combinations, values], [values, parent], [parent, nodes], [nodes, .]]

>> Trigrams: 
[[,, node, need], [node, need, look], [need, look, possible], [look, possible, combinations], [possible, combinations, values], [combinations, values, parent], [values, parent, nodes], [parent, nodes, .]]

>> Noun Phrases are: 
[each node, we, all the possible combinations, values, those parent nodes]

>> Named Entities are: 
[('First', 'ORDINAL')]


============================ Sentence 80 =============================

Each such combination is called an instantiation of the parent set. 


>> Tokens are: 
[combination, called, instantiation, parent, set, .] 

>> PoS Tags are: 
[('combination', 'NOUN'), ('called', 'VERB'), ('instantiation', 'NOUN'), ('parent', 'NOUN'), ('set', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('combination', 'nsubjpass'), ('called', 'ROOT'), ('instantiation', 'oprd'), ('parent', 'pobj'), ('set', 'acl'), ('.', 'punct')]

>> Bigrams: 
[[combination, called], [called, instantiation], [instantiation, parent], [parent, set], [set, .]]

>> Trigrams: 
[[combination, called, instantiation], [called, instantiation, parent], [instantiation, parent, set], [parent, set, .]]

>> Noun Phrases are: 
[Each such combination, an instantiation, the parent]

>> Named Entities are: 
[]


============================ Sentence 81 =============================

For each distinct instantiation of parent node values, we need to specify the probability that the child will take. 


>> Tokens are: 
[distinct, instantiation, parent, node, values, ,, need, specify, probability, child, .] 

>> PoS Tags are: 
[('distinct', 'ADJ'), ('instantiation', 'NOUN'), ('parent', 'NOUN'), ('node', 'NOUN'), ('values', 'NOUN'), (',', 'PUNCT'), ('need', 'VERB'), ('specify', 'VERB'), ('probability', 'NOUN'), ('child', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('distinct', 'amod'), ('instantiation', 'pobj'), ('parent', 'compound'), ('node', 'compound'), ('values', 'pobj'), (',', 'punct'), ('need', 'ROOT'), ('specify', 'xcomp'), ('probability', 'dobj'), ('child', 'nsubj'), ('.', 'punct')]

>> Bigrams: 
[[distinct, instantiation], [instantiation, parent], [parent, node], [node, values], [values, ,], [,, need], [need, specify], [specify, probability], [probability, child], [child, .]]

>> Trigrams: 
[[distinct, instantiation, parent], [instantiation, parent, node], [parent, node, values], [node, values, ,], [values, ,, need], [,, need, specify], [need, specify, probability], [specify, probability, child], [probability, child, .]]

>> Noun Phrases are: 
[each distinct instantiation, parent node values, we, the probability, the child]

>> Named Entities are: 
[]


============================ Sentence 82 =============================

For example, the Lung-Cancer node’s parents are Pollution and Smoking. 


>> Tokens are: 
[example, ,, Lung, -, Cancer, node, parents, Pollution, Smoking, .] 

>> PoS Tags are: 
[('example', 'NOUN'), (',', 'PUNCT'), ('Lung', 'PROPN'), ('-', 'PUNCT'), ('Cancer', 'PROPN'), ('node', 'NOUN'), ('parents', 'NOUN'), ('Pollution', 'PROPN'), ('Smoking', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('example', 'pobj'), (',', 'punct'), ('Lung', 'compound'), ('-', 'punct'), ('Cancer', 'compound'), ('node', 'poss'), ('parents', 'nsubj'), ('Pollution', 'attr'), ('Smoking', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[example, ,], [,, Lung], [Lung, -], [-, Cancer], [Cancer, node], [node, parents], [parents, Pollution], [Pollution, Smoking], [Smoking, .]]

>> Trigrams: 
[[example, ,, Lung], [,, Lung, -], [Lung, -, Cancer], [-, Cancer, node], [Cancer, node, parents], [node, parents, Pollution], [parents, Pollution, Smoking], [Pollution, Smoking, .]]

>> Noun Phrases are: 
[example, the Lung-Cancer node’s parents, Pollution, Smoking]

>> Named Entities are: 
[('the Lung-Cancer', 'ORG'), ('Pollution and Smoking', 'ORG')]


============================ Sentence 83 =============================

They take the possible values = { (H,T), ( H,F), (L,T), (L,F)}. 


>> Tokens are: 
[possible, values, =, {, (, H, ,, T, ), ,, (, H, ,, F, ), ,, (, L, ,, T, ), ,, (, L, ,, F, ), }, .] 

>> PoS Tags are: 
[('possible', 'ADJ'), ('values', 'NOUN'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('(', 'PUNCT'), ('H', 'NOUN'), (',', 'PUNCT'), ('T', 'PROPN'), (')', 'PUNCT'), (',', 'PUNCT'), ('(', 'PUNCT'), ('H', 'NOUN'), (',', 'PUNCT'), ('F', 'PROPN'), (')', 'PUNCT'), (',', 'PUNCT'), ('(', 'PUNCT'), ('L', 'NOUN'), (',', 'PUNCT'), ('T', 'PROPN'), (')', 'PUNCT'), (',', 'PUNCT'), ('(', 'PUNCT'), ('L', 'NOUN'), (',', 'PUNCT'), ('F', 'PROPN'), (')', 'PUNCT'), ('}', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('possible', 'amod'), ('values', 'dobj'), ('=', 'punct'), ('{', 'punct'), ('(', 'punct'), ('H', 'parataxis'), (',', 'punct'), ('T', 'npadvmod'), (')', 'punct'), (',', 'punct'), ('(', 'punct'), ('H', 'nmod'), (',', 'punct'), ('F', 'appos'), (')', 'punct'), (',', 'punct'), ('(', 'punct'), ('L', 'npadvmod'), (',', 'punct'), ('T', 'npadvmod'), (')', 'punct'), (',', 'punct'), ('(', 'punct'), ('L', 'appos'), (',', 'punct'), ('F', 'appos'), (')', 'punct'), ('}', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[possible, values], [values, =], [=, {], [{, (], [(, H], [H, ,], [,, T], [T, )], [), ,], [,, (], [(, H], [H, ,], [,, F], [F, )], [), ,], [,, (], [(, L], [L, ,], [,, T], [T, )], [), ,], [,, (], [(, L], [L, ,], [,, F], [F, )], [), }], [}, .]]

>> Trigrams: 
[[possible, values, =], [values, =, {], [=, {, (], [{, (, H], [(, H, ,], [H, ,, T], [,, T, )], [T, ), ,], [), ,, (], [,, (, H], [(, H, ,], [H, ,, F], [,, F, )], [F, ), ,], [), ,, (], [,, (, L], [(, L, ,], [L, ,, T], [,, T, )], [T, ), ,], [), ,, (], [,, (, L], [(, L, ,], [L, ,, F], [,, F, )], [F, ), }], [), }, .]]

>> Noun Phrases are: 
[They, the possible values, F, (L, F]

>> Named Entities are: 
[]


============================ Sentence 84 =============================

The CPT specifies the probability of cancer for each of these cases as <0.05, 0.02, 0.03, 0.001> respectively. 


>> Tokens are: 
[CPT, specifies, probability, cancer, cases, <, 0.05, ,, 0.02, ,, 0.03, ,, 0.001, >, respectively, .] 

>> PoS Tags are: 
[('CPT', 'PROPN'), ('specifies', 'VERB'), ('probability', 'NOUN'), ('cancer', 'NOUN'), ('cases', 'NOUN'), ('<', 'X'), ('0.05', 'NUM'), (',', 'PUNCT'), ('0.02', 'NUM'), (',', 'PUNCT'), ('0.03', 'NUM'), (',', 'PUNCT'), ('0.001', 'NUM'), ('>', 'X'), ('respectively', 'ADV'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('CPT', 'nsubj'), ('specifies', 'ROOT'), ('probability', 'dobj'), ('cancer', 'pobj'), ('cases', 'pobj'), ('<', 'pobj'), ('0.05', 'pobj'), (',', 'punct'), ('0.02', 'appos'), (',', 'punct'), ('0.03', 'npadvmod'), (',', 'punct'), ('0.001', 'pobj'), ('>', 'pobj'), ('respectively', 'advmod'), ('.', 'punct')]

>> Bigrams: 
[[CPT, specifies], [specifies, probability], [probability, cancer], [cancer, cases], [cases, <], [<, 0.05], [0.05, ,], [,, 0.02], [0.02, ,], [,, 0.03], [0.03, ,], [,, 0.001], [0.001, >], [>, respectively], [respectively, .]]

>> Trigrams: 
[[CPT, specifies, probability], [specifies, probability, cancer], [probability, cancer, cases], [cancer, cases, <], [cases, <, 0.05], [<, 0.05, ,], [0.05, ,, 0.02], [,, 0.02, ,], [0.02, ,, 0.03], [,, 0.03, ,], [0.03, ,, 0.001], [,, 0.001, >], [0.001, >, respectively], [>, respectively, .]]

>> Noun Phrases are: 
[The CPT, the probability, cancer, these cases]

>> Named Entities are: 
[('0.05', 'CARDINAL'), ('0.02', 'DATE'), ('0.03', 'CARDINAL'), ('0.001', 'CARDINAL')]


============================ Sentence 85 =============================

Each node will have conditional probability associated as follows −  Applications of Neural Networks They can perform tasks that are easy for a human but difficult for a machine − · Aerospace − Autopilot aircrafts, aircraft fault detection. 


>> Tokens are: 
[node, conditional, probability, associated, follows, −,  , Applications, Neural, Networks, perform, tasks, easy, human, difficult, machine, −, ·, Aerospace, −, Autopilot, aircrafts, ,, aircraft, fault, detection, .] 

>> PoS Tags are: 
[('node', 'NOUN'), ('conditional', 'ADJ'), ('probability', 'NOUN'), ('associated', 'VERB'), ('follows', 'VERB'), ('−', 'PROPN'), (' ', 'SPACE'), ('Applications', 'PROPN'), ('Neural', 'PROPN'), ('Networks', 'PROPN'), ('perform', 'VERB'), ('tasks', 'NOUN'), ('easy', 'ADJ'), ('human', 'ADJ'), ('difficult', 'ADJ'), ('machine', 'NOUN'), ('−', 'NOUN'), ('·', 'PUNCT'), ('Aerospace', 'PROPN'), ('−', 'PROPN'), ('Autopilot', 'PROPN'), ('aircrafts', 'NOUN'), (',', 'PUNCT'), ('aircraft', 'NOUN'), ('fault', 'NOUN'), ('detection', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('node', 'nsubj'), ('conditional', 'amod'), ('probability', 'dobj'), ('associated', 'acl'), ('follows', 'advcl'), ('−', 'compound'), (' ', 'compound'), ('Applications', 'dobj'), ('Neural', 'compound'), ('Networks', 'pobj'), ('perform', 'ccomp'), ('tasks', 'dobj'), ('easy', 'acomp'), ('human', 'amod'), ('difficult', 'advcl'), ('machine', 'compound'), ('−', 'nmod'), ('·', 'punct'), ('Aerospace', 'compound'), ('−', 'compound'), ('Autopilot', 'compound'), ('aircrafts', 'nmod'), (',', 'punct'), ('aircraft', 'compound'), ('fault', 'compound'), ('detection', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[node, conditional], [conditional, probability], [probability, associated], [associated, follows], [follows, −], [−,  ], [ , Applications], [Applications, Neural], [Neural, Networks], [Networks, perform], [perform, tasks], [tasks, easy], [easy, human], [human, difficult], [difficult, machine], [machine, −], [−, ·], [·, Aerospace], [Aerospace, −], [−, Autopilot], [Autopilot, aircrafts], [aircrafts, ,], [,, aircraft], [aircraft, fault], [fault, detection], [detection, .]]

>> Trigrams: 
[[node, conditional, probability], [conditional, probability, associated], [probability, associated, follows], [associated, follows, −], [follows, −,  ], [−,  , Applications], [ , Applications, Neural], [Applications, Neural, Networks], [Neural, Networks, perform], [Networks, perform, tasks], [perform, tasks, easy], [tasks, easy, human], [easy, human, difficult], [human, difficult, machine], [difficult, machine, −], [machine, −, ·], [−, ·, Aerospace], [·, Aerospace, −], [Aerospace, −, Autopilot], [−, Autopilot, aircrafts], [Autopilot, aircrafts, ,], [aircrafts, ,, aircraft], [,, aircraft, fault], [aircraft, fault, detection], [fault, detection, .]]

>> Noun Phrases are: 
[Each node, conditional probability, −  Applications, Neural Networks, They, tasks, a machine − · Aerospace − Autopilot aircrafts, aircraft fault detection]

>> Named Entities are: 
[('− · Aerospace − Autopilot', 'ORG')]


============================ Sentence 86 =============================

· 


>> Tokens are: 
[·] 

>> PoS Tags are: 
[('·', 'PUNCT')] 

>> Dependency Tags are: 
[('·', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 87 =============================

Automotive − Automobile guidance systems. 


>> Tokens are: 
[Automotive, −, Automobile, guidance, systems, .] 

>> PoS Tags are: 
[('Automotive', 'ADJ'), ('−', 'PROPN'), ('Automobile', 'PROPN'), ('guidance', 'NOUN'), ('systems', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Automotive', 'compound'), ('−', 'compound'), ('Automobile', 'compound'), ('guidance', 'compound'), ('systems', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Automotive, −], [−, Automobile], [Automobile, guidance], [guidance, systems], [systems, .]]

>> Trigrams: 
[[Automotive, −, Automobile], [−, Automobile, guidance], [Automobile, guidance, systems], [guidance, systems, .]]

>> Noun Phrases are: 
[Automotive − Automobile guidance systems]

>> Named Entities are: 
[('Automotive − Automobile', 'ORG')]


============================ Sentence 88 =============================

· Military − Weapon orientation and steering, target tracking, object discrimination, facial recognition, signal/image identification. 


>> Tokens are: 
[·, Military, −, Weapon, orientation, steering, ,, target, tracking, ,, object, discrimination, ,, facial, recognition, ,, signal, /, image, identification, .] 

>> PoS Tags are: 
[('·', 'PUNCT'), ('Military', 'ADJ'), ('−', 'PROPN'), ('Weapon', 'PROPN'), ('orientation', 'NOUN'), ('steering', 'NOUN'), (',', 'PUNCT'), ('target', 'NOUN'), ('tracking', 'NOUN'), (',', 'PUNCT'), ('object', 'NOUN'), ('discrimination', 'NOUN'), (',', 'PUNCT'), ('facial', 'ADJ'), ('recognition', 'NOUN'), (',', 'PUNCT'), ('signal', 'NOUN'), ('/', 'SYM'), ('image', 'NOUN'), ('identification', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('·', 'punct'), ('Military', 'compound'), ('−', 'compound'), ('Weapon', 'compound'), ('orientation', 'ROOT'), ('steering', 'conj'), (',', 'punct'), ('target', 'compound'), ('tracking', 'conj'), (',', 'punct'), ('object', 'compound'), ('discrimination', 'conj'), (',', 'punct'), ('facial', 'amod'), ('recognition', 'conj'), (',', 'punct'), ('signal', 'nmod'), ('/', 'punct'), ('image', 'compound'), ('identification', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[·, Military], [Military, −], [−, Weapon], [Weapon, orientation], [orientation, steering], [steering, ,], [,, target], [target, tracking], [tracking, ,], [,, object], [object, discrimination], [discrimination, ,], [,, facial], [facial, recognition], [recognition, ,], [,, signal], [signal, /], [/, image], [image, identification], [identification, .]]

>> Trigrams: 
[[·, Military, −], [Military, −, Weapon], [−, Weapon, orientation], [Weapon, orientation, steering], [orientation, steering, ,], [steering, ,, target], [,, target, tracking], [target, tracking, ,], [tracking, ,, object], [,, object, discrimination], [object, discrimination, ,], [discrimination, ,, facial], [,, facial, recognition], [facial, recognition, ,], [recognition, ,, signal], [,, signal, /], [signal, /, image], [/, image, identification], [image, identification, .]]

>> Noun Phrases are: 
[· Military − Weapon orientation, steering, target tracking, object discrimination, facial recognition, signal/image identification]

>> Named Entities are: 
[('− Weapon', 'PERSON')]


============================ Sentence 89 =============================

· Electronics − Code sequence prediction, IC chip layout, chip failure analysis, machine vision, voice synthesis. 


>> Tokens are: 
[·, Electronics, −, Code, sequence, prediction, ,, IC, chip, layout, ,, chip, failure, analysis, ,, machine, vision, ,, voice, synthesis, .] 

>> PoS Tags are: 
[('·', 'PUNCT'), ('Electronics', 'NOUN'), ('−', 'PROPN'), ('Code', 'PROPN'), ('sequence', 'NOUN'), ('prediction', 'NOUN'), (',', 'PUNCT'), ('IC', 'PROPN'), ('chip', 'NOUN'), ('layout', 'NOUN'), (',', 'PUNCT'), ('chip', 'NOUN'), ('failure', 'NOUN'), ('analysis', 'NOUN'), (',', 'PUNCT'), ('machine', 'NOUN'), ('vision', 'NOUN'), (',', 'PUNCT'), ('voice', 'NOUN'), ('synthesis', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('·', 'punct'), ('Electronics', 'compound'), ('−', 'compound'), ('Code', 'compound'), ('sequence', 'compound'), ('prediction', 'ROOT'), (',', 'punct'), ('IC', 'compound'), ('chip', 'compound'), ('layout', 'conj'), (',', 'punct'), ('chip', 'compound'), ('failure', 'compound'), ('analysis', 'conj'), (',', 'punct'), ('machine', 'compound'), ('vision', 'conj'), (',', 'punct'), ('voice', 'compound'), ('synthesis', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[·, Electronics], [Electronics, −], [−, Code], [Code, sequence], [sequence, prediction], [prediction, ,], [,, IC], [IC, chip], [chip, layout], [layout, ,], [,, chip], [chip, failure], [failure, analysis], [analysis, ,], [,, machine], [machine, vision], [vision, ,], [,, voice], [voice, synthesis], [synthesis, .]]

>> Trigrams: 
[[·, Electronics, −], [Electronics, −, Code], [−, Code, sequence], [Code, sequence, prediction], [sequence, prediction, ,], [prediction, ,, IC], [,, IC, chip], [IC, chip, layout], [chip, layout, ,], [layout, ,, chip], [,, chip, failure], [chip, failure, analysis], [failure, analysis, ,], [analysis, ,, machine], [,, machine, vision], [machine, vision, ,], [vision, ,, voice], [,, voice, synthesis], [voice, synthesis, .]]

>> Noun Phrases are: 
[· Electronics − Code sequence prediction, IC chip layout, chip failure analysis, machine vision, voice synthesis]

>> Named Entities are: 
[]


============================ Sentence 90 =============================

· 


>> Tokens are: 
[·] 

>> PoS Tags are: 
[('·', 'PUNCT')] 

>> Dependency Tags are: 
[('·', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 91 =============================

Financial − Real estate appraisal, loan advisor, mortgage screening, corporate bond rating, portfolio trading program, corporate financial analysis, currency value prediction, document readers, credit application evaluators. · 


>> Tokens are: 
[Financial, −, Real, estate, appraisal, ,, loan, advisor, ,, mortgage, screening, ,, corporate, bond, rating, ,, portfolio, trading, program, ,, corporate, financial, analysis, ,, currency, value, prediction, ,, document, readers, ,, credit, application, evaluators, ., ·] 

>> PoS Tags are: 
[('Financial', 'ADJ'), ('−', 'NOUN'), ('Real', 'ADJ'), ('estate', 'NOUN'), ('appraisal', 'NOUN'), (',', 'PUNCT'), ('loan', 'NOUN'), ('advisor', 'NOUN'), (',', 'PUNCT'), ('mortgage', 'NOUN'), ('screening', 'NOUN'), (',', 'PUNCT'), ('corporate', 'ADJ'), ('bond', 'NOUN'), ('rating', 'NOUN'), (',', 'PUNCT'), ('portfolio', 'NOUN'), ('trading', 'NOUN'), ('program', 'NOUN'), (',', 'PUNCT'), ('corporate', 'ADJ'), ('financial', 'ADJ'), ('analysis', 'NOUN'), (',', 'PUNCT'), ('currency', 'NOUN'), ('value', 'NOUN'), ('prediction', 'NOUN'), (',', 'PUNCT'), ('document', 'NOUN'), ('readers', 'NOUN'), (',', 'PUNCT'), ('credit', 'NOUN'), ('application', 'NOUN'), ('evaluators', 'NOUN'), ('.', 'PUNCT'), ('·', 'PUNCT')] 

>> Dependency Tags are: 
[('Financial', 'amod'), ('−', 'nmod'), ('Real', 'amod'), ('estate', 'compound'), ('appraisal', 'ROOT'), (',', 'punct'), ('loan', 'compound'), ('advisor', 'appos'), (',', 'punct'), ('mortgage', 'compound'), ('screening', 'conj'), (',', 'punct'), ('corporate', 'amod'), ('bond', 'compound'), ('rating', 'conj'), (',', 'punct'), ('portfolio', 'compound'), ('trading', 'compound'), ('program', 'conj'), (',', 'punct'), ('corporate', 'amod'), ('financial', 'amod'), ('analysis', 'conj'), (',', 'punct'), ('currency', 'compound'), ('value', 'compound'), ('prediction', 'conj'), (',', 'punct'), ('document', 'compound'), ('readers', 'conj'), (',', 'punct'), ('credit', 'compound'), ('application', 'compound'), ('evaluators', 'conj'), ('.', 'punct'), ('·', 'punct')]

>> Bigrams: 
[[Financial, −], [−, Real], [Real, estate], [estate, appraisal], [appraisal, ,], [,, loan], [loan, advisor], [advisor, ,], [,, mortgage], [mortgage, screening], [screening, ,], [,, corporate], [corporate, bond], [bond, rating], [rating, ,], [,, portfolio], [portfolio, trading], [trading, program], [program, ,], [,, corporate], [corporate, financial], [financial, analysis], [analysis, ,], [,, currency], [currency, value], [value, prediction], [prediction, ,], [,, document], [document, readers], [readers, ,], [,, credit], [credit, application], [application, evaluators], [evaluators, .], [., ·]]

>> Trigrams: 
[[Financial, −, Real], [−, Real, estate], [Real, estate, appraisal], [estate, appraisal, ,], [appraisal, ,, loan], [,, loan, advisor], [loan, advisor, ,], [advisor, ,, mortgage], [,, mortgage, screening], [mortgage, screening, ,], [screening, ,, corporate], [,, corporate, bond], [corporate, bond, rating], [bond, rating, ,], [rating, ,, portfolio], [,, portfolio, trading], [portfolio, trading, program], [trading, program, ,], [program, ,, corporate], [,, corporate, financial], [corporate, financial, analysis], [financial, analysis, ,], [analysis, ,, currency], [,, currency, value], [currency, value, prediction], [value, prediction, ,], [prediction, ,, document], [,, document, readers], [document, readers, ,], [readers, ,, credit], [,, credit, application], [credit, application, evaluators], [application, evaluators, .], [evaluators, ., ·]]

>> Noun Phrases are: 
[Financial − Real estate appraisal, loan advisor, mortgage screening, corporate bond rating, portfolio trading program, corporate financial analysis, currency value prediction, document readers, credit application evaluators]

>> Named Entities are: 
[]


============================ Sentence 92 =============================

Industrial − Manufacturing process control, product design and analysis, quality inspection systems, welding quality analysis, paper quality prediction, chemical product design analysis, dynamic modeling of chemical process systems, machine maintenance analysis, project bidding, planning, and management. 


>> Tokens are: 
[Industrial, −, Manufacturing, process, control, ,, product, design, analysis, ,, quality, inspection, systems, ,, welding, quality, analysis, ,, paper, quality, prediction, ,, chemical, product, design, analysis, ,, dynamic, modeling, chemical, process, systems, ,, machine, maintenance, analysis, ,, project, bidding, ,, planning, ,, management, .] 

>> PoS Tags are: 
[('Industrial', 'ADJ'), ('−', 'PROPN'), ('Manufacturing', 'PROPN'), ('process', 'NOUN'), ('control', 'NOUN'), (',', 'PUNCT'), ('product', 'NOUN'), ('design', 'NOUN'), ('analysis', 'NOUN'), (',', 'PUNCT'), ('quality', 'NOUN'), ('inspection', 'NOUN'), ('systems', 'NOUN'), (',', 'PUNCT'), ('welding', 'VERB'), ('quality', 'NOUN'), ('analysis', 'NOUN'), (',', 'PUNCT'), ('paper', 'NOUN'), ('quality', 'NOUN'), ('prediction', 'NOUN'), (',', 'PUNCT'), ('chemical', 'NOUN'), ('product', 'NOUN'), ('design', 'NOUN'), ('analysis', 'NOUN'), (',', 'PUNCT'), ('dynamic', 'ADJ'), ('modeling', 'NOUN'), ('chemical', 'NOUN'), ('process', 'NOUN'), ('systems', 'NOUN'), (',', 'PUNCT'), ('machine', 'NOUN'), ('maintenance', 'NOUN'), ('analysis', 'NOUN'), (',', 'PUNCT'), ('project', 'NOUN'), ('bidding', 'NOUN'), (',', 'PUNCT'), ('planning', 'NOUN'), (',', 'PUNCT'), ('management', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Industrial', 'compound'), ('−', 'compound'), ('Manufacturing', 'compound'), ('process', 'compound'), ('control', 'ROOT'), (',', 'punct'), ('product', 'compound'), ('design', 'conj'), ('analysis', 'conj'), (',', 'punct'), ('quality', 'compound'), ('inspection', 'compound'), ('systems', 'conj'), (',', 'punct'), ('welding', 'acl'), ('quality', 'compound'), ('analysis', 'dobj'), (',', 'punct'), ('paper', 'compound'), ('quality', 'compound'), ('prediction', 'conj'), (',', 'punct'), ('chemical', 'compound'), ('product', 'compound'), ('design', 'compound'), ('analysis', 'conj'), (',', 'punct'), ('dynamic', 'amod'), ('modeling', 'conj'), ('chemical', 'compound'), ('process', 'compound'), ('systems', 'pobj'), (',', 'punct'), ('machine', 'compound'), ('maintenance', 'compound'), ('analysis', 'conj'), (',', 'punct'), ('project', 'compound'), ('bidding', 'conj'), (',', 'punct'), ('planning', 'conj'), (',', 'punct'), ('management', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[Industrial, −], [−, Manufacturing], [Manufacturing, process], [process, control], [control, ,], [,, product], [product, design], [design, analysis], [analysis, ,], [,, quality], [quality, inspection], [inspection, systems], [systems, ,], [,, welding], [welding, quality], [quality, analysis], [analysis, ,], [,, paper], [paper, quality], [quality, prediction], [prediction, ,], [,, chemical], [chemical, product], [product, design], [design, analysis], [analysis, ,], [,, dynamic], [dynamic, modeling], [modeling, chemical], [chemical, process], [process, systems], [systems, ,], [,, machine], [machine, maintenance], [maintenance, analysis], [analysis, ,], [,, project], [project, bidding], [bidding, ,], [,, planning], [planning, ,], [,, management], [management, .]]

>> Trigrams: 
[[Industrial, −, Manufacturing], [−, Manufacturing, process], [Manufacturing, process, control], [process, control, ,], [control, ,, product], [,, product, design], [product, design, analysis], [design, analysis, ,], [analysis, ,, quality], [,, quality, inspection], [quality, inspection, systems], [inspection, systems, ,], [systems, ,, welding], [,, welding, quality], [welding, quality, analysis], [quality, analysis, ,], [analysis, ,, paper], [,, paper, quality], [paper, quality, prediction], [quality, prediction, ,], [prediction, ,, chemical], [,, chemical, product], [chemical, product, design], [product, design, analysis], [design, analysis, ,], [analysis, ,, dynamic], [,, dynamic, modeling], [dynamic, modeling, chemical], [modeling, chemical, process], [chemical, process, systems], [process, systems, ,], [systems, ,, machine], [,, machine, maintenance], [machine, maintenance, analysis], [maintenance, analysis, ,], [analysis, ,, project], [,, project, bidding], [project, bidding, ,], [bidding, ,, planning], [,, planning, ,], [planning, ,, management], [,, management, .]]

>> Noun Phrases are: 
[Industrial − Manufacturing process control, product design, analysis, quality inspection systems, quality analysis, paper quality prediction, chemical product design analysis, dynamic modeling, chemical process systems, machine maintenance analysis, project bidding, planning, management]

>> Named Entities are: 
[('Industrial −', 'PERSON')]


============================ Sentence 93 =============================

· 


>> Tokens are: 
[·] 

>> PoS Tags are: 
[('·', 'PUNCT')] 

>> Dependency Tags are: 
[('·', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 94 =============================

Medical − Cancer cell analysis, EEG and ECG analysis, prosthetic design, transplant time optimizer. 


>> Tokens are: 
[Medical, −, Cancer, cell, analysis, ,, EEG, ECG, analysis, ,, prosthetic, design, ,, transplant, time, optimizer, .] 

>> PoS Tags are: 
[('Medical', 'ADJ'), ('−', 'PROPN'), ('Cancer', 'PROPN'), ('cell', 'NOUN'), ('analysis', 'NOUN'), (',', 'PUNCT'), ('EEG', 'PROPN'), ('ECG', 'PROPN'), ('analysis', 'NOUN'), (',', 'PUNCT'), ('prosthetic', 'ADJ'), ('design', 'NOUN'), (',', 'PUNCT'), ('transplant', 'NOUN'), ('time', 'NOUN'), ('optimizer', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Medical', 'amod'), ('−', 'compound'), ('Cancer', 'compound'), ('cell', 'compound'), ('analysis', 'ROOT'), (',', 'punct'), ('EEG', 'conj'), ('ECG', 'compound'), ('analysis', 'conj'), (',', 'punct'), ('prosthetic', 'amod'), ('design', 'conj'), (',', 'punct'), ('transplant', 'compound'), ('time', 'compound'), ('optimizer', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[Medical, −], [−, Cancer], [Cancer, cell], [cell, analysis], [analysis, ,], [,, EEG], [EEG, ECG], [ECG, analysis], [analysis, ,], [,, prosthetic], [prosthetic, design], [design, ,], [,, transplant], [transplant, time], [time, optimizer], [optimizer, .]]

>> Trigrams: 
[[Medical, −, Cancer], [−, Cancer, cell], [Cancer, cell, analysis], [cell, analysis, ,], [analysis, ,, EEG], [,, EEG, ECG], [EEG, ECG, analysis], [ECG, analysis, ,], [analysis, ,, prosthetic], [,, prosthetic, design], [prosthetic, design, ,], [design, ,, transplant], [,, transplant, time], [transplant, time, optimizer], [time, optimizer, .]]

>> Noun Phrases are: 
[Medical − Cancer cell analysis, EEG, ECG analysis, prosthetic design, transplant time optimizer]

>> Named Entities are: 
[('− Cancer', 'PERSON'), ('EEG', 'ORG'), ('ECG', 'ORG')]


============================ Sentence 95 =============================

· 


>> Tokens are: 
[·] 

>> PoS Tags are: 
[('·', 'PUNCT')] 

>> Dependency Tags are: 
[('·', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 96 =============================

Speech − Speech recognition, speech classification, text to speech conversion. 


>> Tokens are: 
[Speech, −, Speech, recognition, ,, speech, classification, ,, text, speech, conversion, .] 

>> PoS Tags are: 
[('Speech', 'NOUN'), ('−', 'PROPN'), ('Speech', 'PROPN'), ('recognition', 'NOUN'), (',', 'PUNCT'), ('speech', 'NOUN'), ('classification', 'NOUN'), (',', 'PUNCT'), ('text', 'NOUN'), ('speech', 'VERB'), ('conversion', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Speech', 'compound'), ('−', 'compound'), ('Speech', 'compound'), ('recognition', 'nsubj'), (',', 'punct'), ('speech', 'ROOT'), ('classification', 'dobj'), (',', 'punct'), ('text', 'conj'), ('speech', 'advcl'), ('conversion', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Speech, −], [−, Speech], [Speech, recognition], [recognition, ,], [,, speech], [speech, classification], [classification, ,], [,, text], [text, speech], [speech, conversion], [conversion, .]]

>> Trigrams: 
[[Speech, −, Speech], [−, Speech, recognition], [Speech, recognition, ,], [recognition, ,, speech], [,, speech, classification], [speech, classification, ,], [classification, ,, text], [,, text, speech], [text, speech, conversion], [speech, conversion, .]]

>> Noun Phrases are: 
[Speech − Speech recognition, classification, text, conversion]

>> Named Entities are: 
[('Speech − Speech', 'PERSON')]


============================ Sentence 97 =============================

· 


>> Tokens are: 
[·] 

>> PoS Tags are: 
[('·', 'PUNCT')] 

>> Dependency Tags are: 
[('·', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 98 =============================

Telecommunications − Image and data compression, automated information services, real-time spoken language translation. 


>> Tokens are: 
[Telecommunications, −, Image, data, compression, ,, automated, information, services, ,, real, -, time, spoken, language, translation, .] 

>> PoS Tags are: 
[('Telecommunications', 'NOUN'), ('−', 'PROPN'), ('Image', 'PROPN'), ('data', 'NOUN'), ('compression', 'NOUN'), (',', 'PUNCT'), ('automated', 'VERB'), ('information', 'NOUN'), ('services', 'NOUN'), (',', 'PUNCT'), ('real', 'ADJ'), ('-', 'PUNCT'), ('time', 'NOUN'), ('spoken', 'ADJ'), ('language', 'NOUN'), ('translation', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Telecommunications', 'compound'), ('−', 'nmod'), ('Image', 'nmod'), ('data', 'conj'), ('compression', 'ROOT'), (',', 'punct'), ('automated', 'amod'), ('information', 'compound'), ('services', 'conj'), (',', 'punct'), ('real', 'amod'), ('-', 'punct'), ('time', 'nmod'), ('spoken', 'amod'), ('language', 'compound'), ('translation', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[Telecommunications, −], [−, Image], [Image, data], [data, compression], [compression, ,], [,, automated], [automated, information], [information, services], [services, ,], [,, real], [real, -], [-, time], [time, spoken], [spoken, language], [language, translation], [translation, .]]

>> Trigrams: 
[[Telecommunications, −, Image], [−, Image, data], [Image, data, compression], [data, compression, ,], [compression, ,, automated], [,, automated, information], [automated, information, services], [information, services, ,], [services, ,, real], [,, real, -], [real, -, time], [-, time, spoken], [time, spoken, language], [spoken, language, translation], [language, translation, .]]

>> Noun Phrases are: 
[Telecommunications − Image and data compression, automated information services, real-time spoken language translation]

>> Named Entities are: 
[('Telecommunications − Image', 'PERSON')]


============================ Sentence 99 =============================

· 


>> Tokens are: 
[·] 

>> PoS Tags are: 
[('·', 'PUNCT')] 

>> Dependency Tags are: 
[('·', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 100 =============================

Transportation − Truck Brake system diagnosis, vehicle scheduling, routing systems. 


>> Tokens are: 
[Transportation, −, Truck, Brake, system, diagnosis, ,, vehicle, scheduling, ,, routing, systems, .] 

>> PoS Tags are: 
[('Transportation', 'NOUN'), ('−', 'PROPN'), ('Truck', 'PROPN'), ('Brake', 'PROPN'), ('system', 'NOUN'), ('diagnosis', 'NOUN'), (',', 'PUNCT'), ('vehicle', 'NOUN'), ('scheduling', 'NOUN'), (',', 'PUNCT'), ('routing', 'VERB'), ('systems', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Transportation', 'compound'), ('−', 'compound'), ('Truck', 'compound'), ('Brake', 'compound'), ('system', 'compound'), ('diagnosis', 'nsubj'), (',', 'punct'), ('vehicle', 'compound'), ('scheduling', 'conj'), (',', 'punct'), ('routing', 'ROOT'), ('systems', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Transportation, −], [−, Truck], [Truck, Brake], [Brake, system], [system, diagnosis], [diagnosis, ,], [,, vehicle], [vehicle, scheduling], [scheduling, ,], [,, routing], [routing, systems], [systems, .]]

>> Trigrams: 
[[Transportation, −, Truck], [−, Truck, Brake], [Truck, Brake, system], [Brake, system, diagnosis], [system, diagnosis, ,], [diagnosis, ,, vehicle], [,, vehicle, scheduling], [vehicle, scheduling, ,], [scheduling, ,, routing], [,, routing, systems], [routing, systems, .]]

>> Noun Phrases are: 
[Transportation − Truck Brake system diagnosis, vehicle scheduling, systems]

>> Named Entities are: 
[('Transportation − Truck Brake', 'PERSON')]


============================ Sentence 101 =============================

· Software − Pattern Recognition in facial recognition, optical character recognition, etc. · 


>> Tokens are: 
[·, Software, −, Pattern, Recognition, facial, recognition, ,, optical, character, recognition, ,, etc, ., ·] 

>> PoS Tags are: 
[('·', 'PUNCT'), ('Software', 'NOUN'), ('−', 'PROPN'), ('Pattern', 'PROPN'), ('Recognition', 'PROPN'), ('facial', 'ADJ'), ('recognition', 'NOUN'), (',', 'PUNCT'), ('optical', 'ADJ'), ('character', 'NOUN'), ('recognition', 'NOUN'), (',', 'PUNCT'), ('etc', 'X'), ('.', 'PUNCT'), ('·', 'PUNCT')] 

>> Dependency Tags are: 
[('·', 'punct'), ('Software', 'compound'), ('−', 'compound'), ('Pattern', 'compound'), ('Recognition', 'ROOT'), ('facial', 'amod'), ('recognition', 'pobj'), (',', 'punct'), ('optical', 'amod'), ('character', 'compound'), ('recognition', 'conj'), (',', 'punct'), ('etc', 'conj'), ('.', 'punct'), ('·', 'punct')]

>> Bigrams: 
[[·, Software], [Software, −], [−, Pattern], [Pattern, Recognition], [Recognition, facial], [facial, recognition], [recognition, ,], [,, optical], [optical, character], [character, recognition], [recognition, ,], [,, etc], [etc, .], [., ·]]

>> Trigrams: 
[[·, Software, −], [Software, −, Pattern], [−, Pattern, Recognition], [Pattern, Recognition, facial], [Recognition, facial, recognition], [facial, recognition, ,], [recognition, ,, optical], [,, optical, character], [optical, character, recognition], [character, recognition, ,], [recognition, ,, etc], [,, etc, .], [etc, ., ·]]

>> Noun Phrases are: 
[· Software − Pattern Recognition, facial recognition, , optical character recognition]

>> Named Entities are: 
[('Software − Pattern Recognition', 'PERSON')]


============================ Sentence 102 =============================

Time Series Prediction − ANNs are used to make predictions on stocks and natural calamities. · 


>> Tokens are: 
[Time, Series, Prediction, −, ANNs, predictions, stocks, natural, calamities, ., ·] 

>> PoS Tags are: 
[('Time', 'PROPN'), ('Series', 'PROPN'), ('Prediction', 'PROPN'), ('−', 'PROPN'), ('ANNs', 'NOUN'), ('predictions', 'NOUN'), ('stocks', 'NOUN'), ('natural', 'ADJ'), ('calamities', 'NOUN'), ('.', 'PUNCT'), ('·', 'PUNCT')] 

>> Dependency Tags are: 
[('Time', 'compound'), ('Series', 'compound'), ('Prediction', 'compound'), ('−', 'compound'), ('ANNs', 'nsubjpass'), ('predictions', 'dobj'), ('stocks', 'pobj'), ('natural', 'amod'), ('calamities', 'conj'), ('.', 'punct'), ('·', 'punct')]

>> Bigrams: 
[[Time, Series], [Series, Prediction], [Prediction, −], [−, ANNs], [ANNs, predictions], [predictions, stocks], [stocks, natural], [natural, calamities], [calamities, .], [., ·]]

>> Trigrams: 
[[Time, Series, Prediction], [Series, Prediction, −], [Prediction, −, ANNs], [−, ANNs, predictions], [ANNs, predictions, stocks], [predictions, stocks, natural], [stocks, natural, calamities], [natural, calamities, .], [calamities, ., ·]]

>> Noun Phrases are: 
[Time Series Prediction − ANNs, predictions, stocks, natural calamities]

>> Named Entities are: 
[]


============================ Sentence 103 =============================

Signal Processing − Neural networks can be trained to process an audio signal and filter it appropriately in the hearing aids. 


>> Tokens are: 
[Signal, Processing, −, Neural, networks, trained, process, audio, signal, filter, appropriately, hearing, aids, .] 

>> PoS Tags are: 
[('Signal', 'PROPN'), ('Processing', 'NOUN'), ('−', 'PROPN'), ('Neural', 'PROPN'), ('networks', 'NOUN'), ('trained', 'VERB'), ('process', 'VERB'), ('audio', 'ADJ'), ('signal', 'NOUN'), ('filter', 'VERB'), ('appropriately', 'ADV'), ('hearing', 'NOUN'), ('aids', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Signal', 'compound'), ('Processing', 'compound'), ('−', 'compound'), ('Neural', 'compound'), ('networks', 'nsubjpass'), ('trained', 'ROOT'), ('process', 'xcomp'), ('audio', 'amod'), ('signal', 'dobj'), ('filter', 'conj'), ('appropriately', 'advmod'), ('hearing', 'compound'), ('aids', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Signal, Processing], [Processing, −], [−, Neural], [Neural, networks], [networks, trained], [trained, process], [process, audio], [audio, signal], [signal, filter], [filter, appropriately], [appropriately, hearing], [hearing, aids], [aids, .]]

>> Trigrams: 
[[Signal, Processing, −], [Processing, −, Neural], [−, Neural, networks], [Neural, networks, trained], [networks, trained, process], [trained, process, audio], [process, audio, signal], [audio, signal, filter], [signal, filter, appropriately], [filter, appropriately, hearing], [appropriately, hearing, aids], [hearing, aids, .]]

>> Noun Phrases are: 
[Signal Processing − Neural networks, an audio signal, it, the hearing aids]

>> Named Entities are: 
[]


============================ Sentence 104 =============================

· 


>> Tokens are: 
[·] 

>> PoS Tags are: 
[('·', 'PUNCT')] 

>> Dependency Tags are: 
[('·', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 105 =============================

Control − ANNs are often used to make steering decisions of physical vehicles. · 


>> Tokens are: 
[Control, −, ANNs, steering, decisions, physical, vehicles, ., ·] 

>> PoS Tags are: 
[('Control', 'NOUN'), ('−', 'PROPN'), ('ANNs', 'NOUN'), ('steering', 'NOUN'), ('decisions', 'NOUN'), ('physical', 'ADJ'), ('vehicles', 'NOUN'), ('.', 'PUNCT'), ('·', 'PUNCT')] 

>> Dependency Tags are: 
[('Control', 'compound'), ('−', 'compound'), ('ANNs', 'nsubjpass'), ('steering', 'compound'), ('decisions', 'dobj'), ('physical', 'amod'), ('vehicles', 'pobj'), ('.', 'punct'), ('·', 'punct')]

>> Bigrams: 
[[Control, −], [−, ANNs], [ANNs, steering], [steering, decisions], [decisions, physical], [physical, vehicles], [vehicles, .], [., ·]]

>> Trigrams: 
[[Control, −, ANNs], [−, ANNs, steering], [ANNs, steering, decisions], [steering, decisions, physical], [decisions, physical, vehicles], [physical, vehicles, .], [vehicles, ., ·]]

>> Noun Phrases are: 
[Control − ANNs, steering decisions, physical vehicles]

>> Named Entities are: 
[('Control −', 'PERSON')]


============================ Sentence 106 =============================

Anomaly Detection − As ANNs are expert at recognizing patterns, they can also be trained to generate an output when something unusual occurs that misfits the pattern. 


>> Tokens are: 
[Anomaly, Detection, −, ANNs, expert, recognizing, patterns, ,, trained, generate, output, unusual, occurs, misfits, pattern, .] 

>> PoS Tags are: 
[('Anomaly', 'PROPN'), ('Detection', 'PROPN'), ('−', 'PROPN'), ('ANNs', 'NOUN'), ('expert', 'ADJ'), ('recognizing', 'VERB'), ('patterns', 'NOUN'), (',', 'PUNCT'), ('trained', 'VERB'), ('generate', 'VERB'), ('output', 'NOUN'), ('unusual', 'ADJ'), ('occurs', 'VERB'), ('misfits', 'VERB'), ('pattern', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Anomaly', 'compound'), ('Detection', 'compound'), ('−', 'nsubjpass'), ('ANNs', 'nsubj'), ('expert', 'acomp'), ('recognizing', 'pcomp'), ('patterns', 'dobj'), (',', 'punct'), ('trained', 'ROOT'), ('generate', 'xcomp'), ('output', 'dobj'), ('unusual', 'amod'), ('occurs', 'advcl'), ('misfits', 'ccomp'), ('pattern', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Anomaly, Detection], [Detection, −], [−, ANNs], [ANNs, expert], [expert, recognizing], [recognizing, patterns], [patterns, ,], [,, trained], [trained, generate], [generate, output], [output, unusual], [unusual, occurs], [occurs, misfits], [misfits, pattern], [pattern, .]]

>> Trigrams: 
[[Anomaly, Detection, −], [Detection, −, ANNs], [−, ANNs, expert], [ANNs, expert, recognizing], [expert, recognizing, patterns], [recognizing, patterns, ,], [patterns, ,, trained], [,, trained, generate], [trained, generate, output], [generate, output, unusual], [output, unusual, occurs], [unusual, occurs, misfits], [occurs, misfits, pattern], [misfits, pattern, .]]

>> Noun Phrases are: 
[Anomaly Detection −, ANNs, patterns, they, an output, something, the pattern]

>> Named Entities are: 
[('Anomaly Detection −', 'PERSON')]
