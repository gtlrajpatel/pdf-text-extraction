

========================== Sentence 1 ===========================

 AI-7 Searching is the universal technique of problem solving in AI. 

Tokens are: 
>> ['AI', '-7', 'Searching', 'is', 'the', 'universal', 'technique', 'of', 'problem', 'solving', 'in', 'AI', '.'] 

 UPOS tags are: 
>> [('AI', 'AUX'), ('-7', 'NUM'), ('Searching', 'VERB'), ('is', 'AUX'), ('the', 'DET'), ('universal', 'ADJ'), ('technique', 'NOUN'), ('of', 'ADP'), ('problem', 'NOUN'), ('solving', 'NOUN'), ('in', 'ADP'), ('AI', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('AI', 'VBZ'), ('-7', 'CD'), ('Searching', 'VBG'), ('is', 'VBZ'), ('the', 'DT'), ('universal', 'JJ'), ('technique', 'NN'), ('of', 'IN'), ('problem', 'NN'), ('solving', 'NN'), ('in', 'IN'), ('AI', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('AI', 'be'), ('-7', '-7'), ('Searching', 'search'), ('is', 'be'), ('the', 'the'), ('universal', 'universal'), ('technique', 'technique'), ('of', 'of'), ('problem', 'problem'), ('solving', 'solving'), ('in', 'in'), ('AI', 'ai'), ('.', '.')] 

 Dependency tags are: 
>> [(('AI', 'technique'), 'cop'), (('-7', 'Searching'), 'nsubj'), (('Searching', 'technique'), 'csubj'), (('is', 'technique'), 'cop'), (('the', 'technique'), 'det'), (('universal', 'technique'), 'amod'), (('technique', 'root'), 'root'), (('of', 'solving'), 'case'), (('problem', 'solving'), 'compound'), (('solving', 'technique'), 'nmod'), (('in', 'AI'), 'case'), (('AI', 'technique'), 'nmod'), (('.', 'technique'), 'punct')]

 Named Entities are: 
>> [('AI', 'ORG')]

========================== Sentence 2 ===========================

 There are some single-player games such as tile games, Sudoku, crossword, etc. 

Tokens are: 
>> ['There', 'are', 'some', 'single', '-', 'player', 'games', 'such', 'as', 'tile', 'games', ',', 'Sudoku', ',', 'crossword', ',', 'etc', '.'] 

 UPOS tags are: 
>> [('There', 'PRON'), ('are', 'VERB'), ('some', 'DET'), ('single', 'ADJ'), ('-', 'PUNCT'), ('player', 'NOUN'), ('games', 'NOUN'), ('such', 'ADJ'), ('as', 'ADP'), ('tile', 'NOUN'), ('games', 'NOUN'), (',', 'PUNCT'), ('Sudoku', 'NOUN'), (',', 'PUNCT'), ('crossword', 'NOUN'), (',', 'PUNCT'), ('etc', 'X'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('There', 'EX'), ('are', 'VBP'), ('some', 'DT'), ('single', 'JJ'), ('-', 'HYPH'), ('player', 'NN'), ('games', 'NNS'), ('such', 'JJ'), ('as', 'IN'), ('tile', 'NN'), ('games', 'NNS'), (',', ','), ('Sudoku', 'NN'), (',', ','), ('crossword', 'NN'), (',', ','), ('etc', 'FW'), ('.', '.')] 

 Lemmas are: 
>> [('There', 'there'), ('are', 'be'), ('some', 'some'), ('single', 'single'), ('-', '-'), ('player', 'player'), ('games', 'game'), ('such', 'such'), ('as', 'as'), ('tile', 'tile'), ('games', 'game'), (',', ','), ('Sudoku', 'sudoku'), (',', ','), ('crossword', 'crossword'), (',', ','), ('etc', 'etc'), ('.', '.')] 

 Dependency tags are: 
>> [(('There', 'are'), 'expl'), (('are', 'root'), 'root'), (('some', 'games'), 'det'), (('single', 'player'), 'amod'), (('-', 'player'), 'punct'), (('player', 'games'), 'compound'), (('games', 'are'), 'nsubj'), (('such', 'games'), 'case'), (('as', 'such'), 'fixed'), (('tile', 'games'), 'compound'), (('games', 'games'), 'nmod'), ((',', 'Sudoku'), 'punct'), (('Sudoku', 'games'), 'conj'), ((',', 'crossword'), 'punct'), (('crossword', 'games'), 'conj'), ((',', 'etc'), 'punct'), (('etc', 'games'), 'conj'), (('.', 'are'), 'punct')]

 Named Entities are: 
>> [('Sudoku', 'PRODUCT')]

========================== Sentence 3 ===========================

 The search algorithms help you to search for a particular position in such games. 

Tokens are: 
>> ['The', 'search', 'algorithms', 'help', 'you', 'to', 'search', 'for', 'a', 'particular', 'position', 'in', 'such', 'games', '.'] 

 UPOS tags are: 
>> [('The', 'DET'), ('search', 'NOUN'), ('algorithms', 'NOUN'), ('help', 'VERB'), ('you', 'PRON'), ('to', 'PART'), ('search', 'VERB'), ('for', 'ADP'), ('a', 'DET'), ('particular', 'ADJ'), ('position', 'NOUN'), ('in', 'ADP'), ('such', 'ADJ'), ('games', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('The', 'DT'), ('search', 'NN'), ('algorithms', 'NNS'), ('help', 'VBP'), ('you', 'PRP'), ('to', 'TO'), ('search', 'VB'), ('for', 'IN'), ('a', 'DT'), ('particular', 'JJ'), ('position', 'NN'), ('in', 'IN'), ('such', 'JJ'), ('games', 'NNS'), ('.', '.')] 

 Lemmas are: 
>> [('The', 'the'), ('search', 'search'), ('algorithms', 'algorithm'), ('help', 'help'), ('you', 'you'), ('to', 'to'), ('search', 'search'), ('for', 'for'), ('a', 'a'), ('particular', 'particular'), ('position', 'position'), ('in', 'in'), ('such', 'such'), ('games', 'game'), ('.', '.')] 

 Dependency tags are: 
>> [(('The', 'algorithms'), 'det'), (('search', 'algorithms'), 'compound'), (('algorithms', 'help'), 'nsubj'), (('help', 'root'), 'root'), (('you', 'help'), 'obj'), (('to', 'search'), 'mark'), (('search', 'help'), 'xcomp'), (('for', 'position'), 'case'), (('a', 'position'), 'det'), (('particular', 'position'), 'amod'), (('position', 'search'), 'obl'), (('in', 'games'), 'case'), (('such', 'games'), 'amod'), (('games', 'position'), 'nmod'), (('.', 'help'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 4 ===========================

 Single Agent Pathfinding Problems 

Tokens are: 
>> ['Single', 'Agent', 'Pathfinding', 'Problems'] 

 UPOS tags are: 
>> [('Single', 'ADJ'), ('Agent', 'NOUN'), ('Pathfinding', 'NOUN'), ('Problems', 'NOUN')] 

 XPOS tags are: 
>> [('Single', 'JJ'), ('Agent', 'NN'), ('Pathfinding', 'NN'), ('Problems', 'NNS')] 

 Lemmas are: 
>> [('Single', 'single'), ('Agent', 'Agent'), ('Pathfinding', 'pathfinding'), ('Problems', 'problem')] 

 Dependency tags are: 
>> [(('Single', 'Agent'), 'amod'), (('Agent', 'Problems'), 'compound'), (('Pathfinding', 'Problems'), 'compound'), (('Problems', 'root'), 'root')]

 Named Entities are: 
>> []

========================== Sentence 5 ===========================

 The games such as 3X3 eight-tile, 4X4 fifteen-tile, and 5X5 twenty four tile puzzles are single-agent-path-finding challenges. 

Tokens are: 
>> ['The', 'games', 'such', 'as', '3', 'X3', 'eight', '-', 'tile', ',', '4X4', 'fifteen', '-', 'tile', ',', 'and', '5X5', 'twenty', 'four', 'tile', 'puzzles', 'are', 'single', '-', 'agent-', 'path-', 'finding', 'challenges', '.'] 

 UPOS tags are: 
>> [('The', 'DET'), ('games', 'NOUN'), ('such', 'ADJ'), ('as', 'ADP'), ('3', 'NUM'), ('X3', 'NOUN'), ('eight', 'NUM'), ('-', 'PUNCT'), ('tile', 'NOUN'), (',', 'PUNCT'), ('4X4', 'NOUN'), ('fifteen', 'NUM'), ('-', 'PUNCT'), ('tile', 'NOUN'), (',', 'PUNCT'), ('and', 'CCONJ'), ('5X5', 'NUM'), ('twenty', 'NUM'), ('four', 'NUM'), ('tile', 'NOUN'), ('puzzles', 'NOUN'), ('are', 'AUX'), ('single', 'ADJ'), ('-', 'PUNCT'), ('agent-', 'ADJ'), ('path-', 'NOUN'), ('finding', 'NOUN'), ('challenges', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('The', 'DT'), ('games', 'NNS'), ('such', 'JJ'), ('as', 'IN'), ('3', 'CD'), ('X3', 'NN'), ('eight', 'CD'), ('-', 'HYPH'), ('tile', 'NN'), (',', ','), ('4X4', 'NN'), ('fifteen', 'CD'), ('-', 'HYPH'), ('tile', 'NN'), (',', ','), ('and', 'CC'), ('5X5', 'CD'), ('twenty', 'CD'), ('four', 'CD'), ('tile', 'NN'), ('puzzles', 'NNS'), ('are', 'VBP'), ('single', 'JJ'), ('-', 'HYPH'), ('agent-', 'JJ'), ('path-', 'NN'), ('finding', 'NN'), ('challenges', 'NNS'), ('.', '.')] 

 Lemmas are: 
>> [('The', 'the'), ('games', 'game'), ('such', 'such'), ('as', 'as'), ('3', '3'), ('X3', 'X3'), ('eight', 'eight'), ('-', '-'), ('tile', 'tile'), (',', ','), ('4X4', '4x4'), ('fifteen', 'fifteen'), ('-', '-'), ('tile', 'tile'), (',', ','), ('and', 'and'), ('5X5', '5x5'), ('twenty', 'twenty'), ('four', 'four'), ('tile', 'tile'), ('puzzles', 'puzzle'), ('are', 'be'), ('single', 'single'), ('-', '-'), ('agent-', 'agent-'), ('path-', 'path-'), ('finding', 'finding'), ('challenges', 'challenge'), ('.', '.')] 

 Dependency tags are: 
>> [(('The', 'games'), 'det'), (('games', 'challenges'), 'nsubj'), (('such', 'tile'), 'case'), (('as', 'such'), 'fixed'), (('3', 'tile'), 'nummod'), (('X3', 'tile'), 'compound'), (('eight', 'tile'), 'nummod'), (('-', 'tile'), 'punct'), (('tile', 'games'), 'nmod'), ((',', 'tile'), 'punct'), (('4X4', 'tile'), 'compound'), (('fifteen', 'tile'), 'nummod'), (('-', 'tile'), 'punct'), (('tile', 'tile'), 'conj'), ((',', 'puzzles'), 'punct'), (('and', 'puzzles'), 'cc'), (('5X5', 'puzzles'), 'nummod'), (('twenty', 'puzzles'), 'nummod'), (('four', 'puzzles'), 'nummod'), (('tile', 'puzzles'), 'compound'), (('puzzles', 'tile'), 'conj'), (('are', 'challenges'), 'cop'), (('single', 'challenges'), 'amod'), (('-', 'agent-'), 'punct'), (('agent-', 'challenges'), 'amod'), (('path-', 'finding'), 'compound'), (('finding', 'challenges'), 'compound'), (('challenges', 'root'), 'root'), (('.', 'challenges'), 'punct')]

 Named Entities are: 
>> [('3', 'CARDINAL'), ('eight-tile', 'QUANTITY'), ('fifteen-tile', 'QUANTITY'), ('5X5 twenty four', 'QUANTITY')]

========================== Sentence 6 ===========================

 They consist of a matrix of tiles with a blank tile. 

Tokens are: 
>> ['They', 'consist', 'of', 'a', 'matrix', 'of', 'tiles', 'with', 'a', 'blank', 'tile', '.'] 

 UPOS tags are: 
>> [('They', 'PRON'), ('consist', 'VERB'), ('of', 'ADP'), ('a', 'DET'), ('matrix', 'NOUN'), ('of', 'ADP'), ('tiles', 'NOUN'), ('with', 'ADP'), ('a', 'DET'), ('blank', 'ADJ'), ('tile', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('They', 'PRP'), ('consist', 'VBP'), ('of', 'IN'), ('a', 'DT'), ('matrix', 'NN'), ('of', 'IN'), ('tiles', 'NNS'), ('with', 'IN'), ('a', 'DT'), ('blank', 'JJ'), ('tile', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('They', 'they'), ('consist', 'consist'), ('of', 'of'), ('a', 'a'), ('matrix', 'matrix'), ('of', 'of'), ('tiles', 'tile'), ('with', 'with'), ('a', 'a'), ('blank', 'blank'), ('tile', 'tile'), ('.', '.')] 

 Dependency tags are: 
>> [(('They', 'consist'), 'nsubj'), (('consist', 'root'), 'root'), (('of', 'matrix'), 'case'), (('a', 'matrix'), 'det'), (('matrix', 'consist'), 'obl'), (('of', 'tiles'), 'case'), (('tiles', 'matrix'), 'nmod'), (('with', 'tile'), 'case'), (('a', 'tile'), 'det'), (('blank', 'tile'), 'amod'), (('tile', 'consist'), 'obl'), (('.', 'consist'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 7 ===========================

 The player is required to arrange the tiles by sliding a tile either vertically or horizontally into a blank space with the aim of accomplishing some objective. 

Tokens are: 
>> ['The', 'player', 'is', 'required', 'to', 'arrange', 'the', 'tiles', 'by', 'sliding', 'a', 'tile', 'either', 'vertically', 'or', 'horizontally', 'into', 'a', 'blank', 'space', 'with', 'the', 'aim', 'of', 'accomplishing', 'some', 'objective', '.'] 

 UPOS tags are: 
>> [('The', 'DET'), ('player', 'NOUN'), ('is', 'AUX'), ('required', 'VERB'), ('to', 'PART'), ('arrange', 'VERB'), ('the', 'DET'), ('tiles', 'NOUN'), ('by', 'SCONJ'), ('sliding', 'VERB'), ('a', 'DET'), ('tile', 'NOUN'), ('either', 'CCONJ'), ('vertically', 'ADV'), ('or', 'CCONJ'), ('horizontally', 'ADV'), ('into', 'ADP'), ('a', 'DET'), ('blank', 'ADJ'), ('space', 'NOUN'), ('with', 'ADP'), ('the', 'DET'), ('aim', 'NOUN'), ('of', 'SCONJ'), ('accomplishing', 'VERB'), ('some', 'DET'), ('objective', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('The', 'DT'), ('player', 'NN'), ('is', 'VBZ'), ('required', 'VBN'), ('to', 'TO'), ('arrange', 'VB'), ('the', 'DT'), ('tiles', 'NNS'), ('by', 'IN'), ('sliding', 'VBG'), ('a', 'DT'), ('tile', 'NN'), ('either', 'CC'), ('vertically', 'RB'), ('or', 'CC'), ('horizontally', 'RB'), ('into', 'IN'), ('a', 'DT'), ('blank', 'JJ'), ('space', 'NN'), ('with', 'IN'), ('the', 'DT'), ('aim', 'NN'), ('of', 'IN'), ('accomplishing', 'VBG'), ('some', 'DT'), ('objective', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('The', 'the'), ('player', 'player'), ('is', 'be'), ('required', 'require'), ('to', 'to'), ('arrange', 'arrange'), ('the', 'the'), ('tiles', 'tile'), ('by', 'by'), ('sliding', 'slide'), ('a', 'a'), ('tile', 'tile'), ('either', 'either'), ('vertically', 'vertically'), ('or', 'or'), ('horizontally', 'horizontally'), ('into', 'into'), ('a', 'a'), ('blank', 'blank'), ('space', 'space'), ('with', 'with'), ('the', 'the'), ('aim', 'aim'), ('of', 'of'), ('accomplishing', 'accomplish'), ('some', 'some'), ('objective', 'objective'), ('.', '.')] 

 Dependency tags are: 
>> [(('The', 'player'), 'det'), (('player', 'required'), 'nsubj:pass'), (('is', 'required'), 'aux:pass'), (('required', 'root'), 'root'), (('to', 'arrange'), 'mark'), (('arrange', 'required'), 'xcomp'), (('the', 'tiles'), 'det'), (('tiles', 'arrange'), 'obj'), (('by', 'sliding'), 'mark'), (('sliding', 'arrange'), 'advcl'), (('a', 'tile'), 'det'), (('tile', 'sliding'), 'obj'), (('either', 'vertically'), 'cc:preconj'), (('vertically', 'sliding'), 'advmod'), (('or', 'horizontally'), 'cc'), (('horizontally', 'vertically'), 'conj'), (('into', 'space'), 'case'), (('a', 'space'), 'det'), (('blank', 'space'), 'amod'), (('space', 'sliding'), 'obl'), (('with', 'aim'), 'case'), (('the', 'aim'), 'det'), (('aim', 'space'), 'nmod'), (('of', 'accomplishing'), 'mark'), (('accomplishing', 'aim'), 'acl'), (('some', 'objective'), 'det'), (('objective', 'accomplishing'), 'obj'), (('.', 'required'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 8 ===========================

 The other examples of single agent pathfinding problems are Travelling Salesman Problem, Rubik’s Cube, and Theorem Proving. 

Tokens are: 
>> ['The', 'other', 'examples', 'of', 'single', 'agent', 'pathfinding', 'problems', 'are', 'Travelling', 'Salesman', 'Problem', ',', 'Rubik', '’s', 'Cube', ',', 'and', 'Theorem', 'Proving', '.'] 

 UPOS tags are: 
>> [('The', 'DET'), ('other', 'ADJ'), ('examples', 'NOUN'), ('of', 'ADP'), ('single', 'ADJ'), ('agent', 'NOUN'), ('pathfinding', 'NOUN'), ('problems', 'NOUN'), ('are', 'AUX'), ('Travelling', 'VERB'), ('Salesman', 'PROPN'), ('Problem', 'PROPN'), (',', 'PUNCT'), ('Rubik', 'PROPN'), ('’s', 'PART'), ('Cube', 'PROPN'), (',', 'PUNCT'), ('and', 'CCONJ'), ('Theorem', 'PROPN'), ('Proving', 'PROPN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('The', 'DT'), ('other', 'JJ'), ('examples', 'NNS'), ('of', 'IN'), ('single', 'JJ'), ('agent', 'NN'), ('pathfinding', 'NN'), ('problems', 'NNS'), ('are', 'VBP'), ('Travelling', 'VBG'), ('Salesman', 'NNP'), ('Problem', 'NNP'), (',', ','), ('Rubik', 'NNP'), ('’s', 'POS'), ('Cube', 'NNP'), (',', ','), ('and', 'CC'), ('Theorem', 'NNP'), ('Proving', 'NNP'), ('.', '.')] 

 Lemmas are: 
>> [('The', 'the'), ('other', 'other'), ('examples', 'example'), ('of', 'of'), ('single', 'single'), ('agent', 'agent'), ('pathfinding', 'pathfinding'), ('problems', 'problem'), ('are', 'be'), ('Travelling', 'travel'), ('Salesman', 'Salesman'), ('Problem', 'Problem'), (',', ','), ('Rubik', 'Rubik'), ('’s', "'s"), ('Cube', 'Cube'), (',', ','), ('and', 'and'), ('Theorem', 'Theorem'), ('Proving', 'Proving'), ('.', '.')] 

 Dependency tags are: 
>> [(('The', 'examples'), 'det'), (('other', 'examples'), 'amod'), (('examples', 'Travelling'), 'nsubj'), (('of', 'problems'), 'case'), (('single', 'problems'), 'amod'), (('agent', 'problems'), 'compound'), (('pathfinding', 'problems'), 'compound'), (('problems', 'examples'), 'nmod'), (('are', 'Travelling'), 'aux'), (('Travelling', 'root'), 'root'), (('Salesman', 'Problem'), 'compound'), (('Problem', 'Travelling'), 'obj'), ((',', 'Cube'), 'punct'), (('Rubik', 'Cube'), 'nmod:poss'), (('’s', 'Rubik'), 'case'), (('Cube', 'Problem'), 'conj'), ((',', 'Theorem'), 'punct'), (('and', 'Theorem'), 'cc'), (('Theorem', 'Problem'), 'conj'), (('Proving', 'Theorem'), 'flat'), (('.', 'Travelling'), 'punct')]

 Named Entities are: 
>> [('Travelling Salesman Problem', 'PRODUCT'), ('Rubik', 'ORG'), ('Cube', 'ORG')]

========================== Sentence 9 ===========================

 Search Terminology · Problem Space − 

Tokens are: 
>> ['Search', 'Terminology', '·', 'Problem', 'Space', '−'] 

 UPOS tags are: 
>> [('Search', 'NOUN'), ('Terminology', 'NOUN'), ('·', 'PUNCT'), ('Problem', 'NOUN'), ('Space', 'NOUN'), ('−', 'PUNCT')] 

 XPOS tags are: 
>> [('Search', 'NN'), ('Terminology', 'NN'), ('·', 'NFP'), ('Problem', 'NN'), ('Space', 'NN'), ('−', '.')] 

 Lemmas are: 
>> [('Search', 'search'), ('Terminology', 'terminology'), ('·', '·'), ('Problem', 'problem'), ('Space', 'space'), ('−', "''")] 

 Dependency tags are: 
>> [(('Search', 'Terminology'), 'compound'), (('Terminology', 'root'), 'root'), (('·', 'Terminology'), 'punct'), (('Problem', 'Space'), 'compound'), (('Space', 'Terminology'), 'parataxis'), (('−', 'Terminology'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 10 ===========================

 It is the environment in which the search takes place. 

Tokens are: 
>> ['It', 'is', 'the', 'environment', 'in', 'which', 'the', 'search', 'takes', 'place', '.'] 

 UPOS tags are: 
>> [('It', 'PRON'), ('is', 'AUX'), ('the', 'DET'), ('environment', 'NOUN'), ('in', 'ADP'), ('which', 'PRON'), ('the', 'DET'), ('search', 'NOUN'), ('takes', 'VERB'), ('place', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('It', 'PRP'), ('is', 'VBZ'), ('the', 'DT'), ('environment', 'NN'), ('in', 'IN'), ('which', 'WDT'), ('the', 'DT'), ('search', 'NN'), ('takes', 'VBZ'), ('place', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('It', 'it'), ('is', 'be'), ('the', 'the'), ('environment', 'environment'), ('in', 'in'), ('which', 'which'), ('the', 'the'), ('search', 'search'), ('takes', 'take'), ('place', 'place'), ('.', '.')] 

 Dependency tags are: 
>> [(('It', 'environment'), 'nsubj'), (('is', 'environment'), 'cop'), (('the', 'environment'), 'det'), (('environment', 'root'), 'root'), (('in', 'which'), 'case'), (('which', 'takes'), 'obl'), (('the', 'search'), 'det'), (('search', 'takes'), 'nsubj'), (('takes', 'environment'), 'acl:relcl'), (('place', 'takes'), 'obj'), (('.', 'environment'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 11 ===========================

 (A set of states and set of operators to change those states) · Problem Instance − 

Tokens are: 
>> ['(', 'A', 'set', 'of', 'states', 'and', 'set', 'of', 'operators', 'to', 'change', 'those', 'states', ')', '·', 'Problem', 'Instance', '−'] 

 UPOS tags are: 
>> [('(', 'PUNCT'), ('A', 'DET'), ('set', 'NOUN'), ('of', 'ADP'), ('states', 'NOUN'), ('and', 'CCONJ'), ('set', 'NOUN'), ('of', 'ADP'), ('operators', 'NOUN'), ('to', 'PART'), ('change', 'VERB'), ('those', 'DET'), ('states', 'NOUN'), (')', 'PUNCT'), ('·', 'PUNCT'), ('Problem', 'NOUN'), ('Instance', 'NOUN'), ('−', 'PUNCT')] 

 XPOS tags are: 
>> [('(', '-LRB-'), ('A', 'DT'), ('set', 'NN'), ('of', 'IN'), ('states', 'NNS'), ('and', 'CC'), ('set', 'NN'), ('of', 'IN'), ('operators', 'NNS'), ('to', 'TO'), ('change', 'VB'), ('those', 'DT'), ('states', 'NNS'), (')', '-RRB-'), ('·', 'NFP'), ('Problem', 'NN'), ('Instance', 'NN'), ('−', '.')] 

 Lemmas are: 
>> [('(', '('), ('A', 'a'), ('set', 'set'), ('of', 'of'), ('states', 'state'), ('and', 'and'), ('set', 'set'), ('of', 'of'), ('operators', 'operator'), ('to', 'to'), ('change', 'change'), ('those', 'that'), ('states', 'state'), (')', ')'), ('·', '·'), ('Problem', 'problem'), ('Instance', 'instance'), ('−', "''")] 

 Dependency tags are: 
>> [(('(', 'set'), 'punct'), (('A', 'set'), 'det'), (('set', 'Problem'), 'nsubj'), (('of', 'states'), 'case'), (('states', 'set'), 'nmod'), (('and', 'set'), 'cc'), (('set', 'states'), 'conj'), (('of', 'operators'), 'case'), (('operators', 'set'), 'nmod'), (('to', 'change'), 'mark'), (('change', 'set'), 'acl'), (('those', 'states'), 'det'), (('states', 'change'), 'obj'), ((')', 'set'), 'punct'), (('·', 'set'), 'punct'), (('Problem', 'root'), 'root'), (('Instance', 'Problem'), 'nmod:tmod'), (('−', 'set'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 12 ===========================

 It is Initial state + Goal state. 

Tokens are: 
>> ['It', 'is', 'Initial', 'state', '+', 'Goal', 'state', '.'] 

 UPOS tags are: 
>> [('It', 'PRON'), ('is', 'AUX'), ('Initial', 'ADJ'), ('state', 'NOUN'), ('+', 'SYM'), ('Goal', 'NOUN'), ('state', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('It', 'PRP'), ('is', 'VBZ'), ('Initial', 'JJ'), ('state', 'NN'), ('+', 'SYM'), ('Goal', 'NN'), ('state', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('It', 'it'), ('is', 'be'), ('Initial', 'Initial'), ('state', 'state'), ('+', '+'), ('Goal', 'goal'), ('state', 'state'), ('.', '.')] 

 Dependency tags are: 
>> [(('It', 'state'), 'nsubj'), (('is', 'state'), 'cop'), (('Initial', 'state'), 'amod'), (('state', 'state'), 'compound'), (('+', 'Goal'), 'cc'), (('Goal', 'state'), 'compound'), (('state', 'root'), 'root'), (('.', 'state'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 13 ===========================

 · Problem Space Graph − 

Tokens are: 
>> ['·', 'Problem', 'Space', 'Graph', '−'] 

 UPOS tags are: 
>> [('·', 'PUNCT'), ('Problem', 'NOUN'), ('Space', 'NOUN'), ('Graph', 'NOUN'), ('−', 'PUNCT')] 

 XPOS tags are: 
>> [('·', 'NFP'), ('Problem', 'NN'), ('Space', 'NN'), ('Graph', 'NN'), ('−', '.')] 

 Lemmas are: 
>> [('·', '·'), ('Problem', 'problem'), ('Space', 'space'), ('Graph', 'graph'), ('−', "''")] 

 Dependency tags are: 
>> [(('·', 'Graph'), 'punct'), (('Problem', 'Graph'), 'compound'), (('Space', 'Graph'), 'compound'), (('Graph', 'root'), 'root'), (('−', 'Graph'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 14 ===========================

 It represents problem state. 

Tokens are: 
>> ['It', 'represents', 'problem', 'state', '.'] 

 UPOS tags are: 
>> [('It', 'PRON'), ('represents', 'VERB'), ('problem', 'NOUN'), ('state', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('It', 'PRP'), ('represents', 'VBZ'), ('problem', 'NN'), ('state', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('It', 'it'), ('represents', 'represent'), ('problem', 'problem'), ('state', 'state'), ('.', '.')] 

 Dependency tags are: 
>> [(('It', 'represents'), 'nsubj'), (('represents', 'root'), 'root'), (('problem', 'state'), 'compound'), (('state', 'represents'), 'obj'), (('.', 'represents'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 15 ===========================

 States are shown by nodes and operators are shown by edges. 

Tokens are: 
>> ['States', 'are', 'shown', 'by', 'nodes', 'and', 'operators', 'are', 'shown', 'by', 'edges', '.'] 

 UPOS tags are: 
>> [('States', 'PROPN'), ('are', 'AUX'), ('shown', 'VERB'), ('by', 'ADP'), ('nodes', 'NOUN'), ('and', 'CCONJ'), ('operators', 'NOUN'), ('are', 'AUX'), ('shown', 'VERB'), ('by', 'ADP'), ('edges', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('States', 'NNPS'), ('are', 'VBP'), ('shown', 'VBN'), ('by', 'IN'), ('nodes', 'NNS'), ('and', 'CC'), ('operators', 'NNS'), ('are', 'VBP'), ('shown', 'VBN'), ('by', 'IN'), ('edges', 'NNS'), ('.', '.')] 

 Lemmas are: 
>> [('States', 'State'), ('are', 'be'), ('shown', 'show'), ('by', 'by'), ('nodes', 'node'), ('and', 'and'), ('operators', 'operator'), ('are', 'be'), ('shown', 'show'), ('by', 'by'), ('edges', 'edge'), ('.', '.')] 

 Dependency tags are: 
>> [(('States', 'shown'), 'nsubj:pass'), (('are', 'shown'), 'aux:pass'), (('shown', 'root'), 'root'), (('by', 'nodes'), 'case'), (('nodes', 'shown'), 'obl'), (('and', 'shown'), 'cc'), (('operators', 'shown'), 'nsubj:pass'), (('are', 'shown'), 'aux:pass'), (('shown', 'shown'), 'conj'), (('by', 'edges'), 'case'), (('edges', 'shown'), 'obl'), (('.', 'shown'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 16 ===========================

 · Depth of a problem − Length of a shortest path or shortest sequence of operators from Initial State to goal state. 

Tokens are: 
>> ['·', 'Depth', 'of', 'a', 'problem', '−', 'Length', 'of', 'a', 'shortest', 'path', 'or', 'shortest', 'sequence', 'of', 'operators', 'from', 'Initial', 'State', 'to', 'goal', 'state', '.'] 

 UPOS tags are: 
>> [('·', 'PUNCT'), ('Depth', 'NOUN'), ('of', 'ADP'), ('a', 'DET'), ('problem', 'NOUN'), ('−', 'PUNCT'), ('Length', 'NOUN'), ('of', 'ADP'), ('a', 'DET'), ('shortest', 'ADJ'), ('path', 'NOUN'), ('or', 'CCONJ'), ('shortest', 'ADJ'), ('sequence', 'NOUN'), ('of', 'ADP'), ('operators', 'NOUN'), ('from', 'ADP'), ('Initial', 'ADJ'), ('State', 'PROPN'), ('to', 'ADP'), ('goal', 'NOUN'), ('state', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('·', 'NFP'), ('Depth', 'NN'), ('of', 'IN'), ('a', 'DT'), ('problem', 'NN'), ('−', ','), ('Length', 'NN'), ('of', 'IN'), ('a', 'DT'), ('shortest', 'JJS'), ('path', 'NN'), ('or', 'CC'), ('shortest', 'JJS'), ('sequence', 'NN'), ('of', 'IN'), ('operators', 'NNS'), ('from', 'IN'), ('Initial', 'NNP'), ('State', 'NNP'), ('to', 'IN'), ('goal', 'NN'), ('state', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('·', '·'), ('Depth', 'depth'), ('of', 'of'), ('a', 'a'), ('problem', 'problem'), ('−', "''"), ('Length', 'length'), ('of', 'of'), ('a', 'a'), ('shortest', 'short'), ('path', 'path'), ('or', 'or'), ('shortest', 'short'), ('sequence', 'sequence'), ('of', 'of'), ('operators', 'operator'), ('from', 'from'), ('Initial', 'Initial'), ('State', 'State'), ('to', 'to'), ('goal', 'goal'), ('state', 'state'), ('.', '.')] 

 Dependency tags are: 
>> [(('·', 'Depth'), 'punct'), (('Depth', 'root'), 'root'), (('of', 'problem'), 'case'), (('a', 'problem'), 'det'), (('problem', 'Depth'), 'nmod'), (('−', 'Length'), 'punct'), (('Length', 'Depth'), 'appos'), (('of', 'path'), 'case'), (('a', 'path'), 'det'), (('shortest', 'path'), 'amod'), (('path', 'Length'), 'nmod'), (('or', 'sequence'), 'cc'), (('shortest', 'sequence'), 'amod'), (('sequence', 'path'), 'conj'), (('of', 'operators'), 'case'), (('operators', 'sequence'), 'nmod'), (('from', 'State'), 'case'), (('Initial', 'State'), 'amod'), (('State', 'operators'), 'nmod'), (('to', 'state'), 'case'), (('goal', 'state'), 'compound'), (('state', 'State'), 'nmod'), (('.', 'Depth'), 'punct')]

 Named Entities are: 
>> [('Initial State', 'ORG')]

========================== Sentence 17 ===========================

 · Space Complexity − 

Tokens are: 
>> ['·', 'Space', 'Complexity', '−'] 

 UPOS tags are: 
>> [('·', 'PUNCT'), ('Space', 'NOUN'), ('Complexity', 'NOUN'), ('−', 'PUNCT')] 

 XPOS tags are: 
>> [('·', 'NFP'), ('Space', 'NN'), ('Complexity', 'NN'), ('−', '.')] 

 Lemmas are: 
>> [('·', '·'), ('Space', 'space'), ('Complexity', 'complexity'), ('−', "''")] 

 Dependency tags are: 
>> [(('·', 'Complexity'), 'punct'), (('Space', 'Complexity'), 'compound'), (('Complexity', 'root'), 'root'), (('−', 'Complexity'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 18 ===========================

 The maximum number of nodes that are stored in memory. 

Tokens are: 
>> ['The', 'maximum', 'number', 'of', 'nodes', 'that', 'are', 'stored', 'in', 'memory', '.'] 

 UPOS tags are: 
>> [('The', 'DET'), ('maximum', 'ADJ'), ('number', 'NOUN'), ('of', 'ADP'), ('nodes', 'NOUN'), ('that', 'PRON'), ('are', 'AUX'), ('stored', 'VERB'), ('in', 'ADP'), ('memory', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('The', 'DT'), ('maximum', 'JJ'), ('number', 'NN'), ('of', 'IN'), ('nodes', 'NNS'), ('that', 'WDT'), ('are', 'VBP'), ('stored', 'VBN'), ('in', 'IN'), ('memory', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('The', 'the'), ('maximum', 'maximum'), ('number', 'number'), ('of', 'of'), ('nodes', 'node'), ('that', 'that'), ('are', 'be'), ('stored', 'store'), ('in', 'in'), ('memory', 'memory'), ('.', '.')] 

 Dependency tags are: 
>> [(('The', 'number'), 'det'), (('maximum', 'number'), 'amod'), (('number', 'root'), 'root'), (('of', 'nodes'), 'case'), (('nodes', 'number'), 'nmod'), (('that', 'stored'), 'nsubj:pass'), (('are', 'stored'), 'aux:pass'), (('stored', 'nodes'), 'acl:relcl'), (('in', 'memory'), 'case'), (('memory', 'stored'), 'obl'), (('.', 'number'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 19 ===========================

 · Time Complexity − 

Tokens are: 
>> ['·', 'Time', 'Complexity', '−'] 

 UPOS tags are: 
>> [('·', 'PUNCT'), ('Time', 'NOUN'), ('Complexity', 'NOUN'), ('−', 'PUNCT')] 

 XPOS tags are: 
>> [('·', 'NFP'), ('Time', 'NN'), ('Complexity', 'NN'), ('−', '.')] 

 Lemmas are: 
>> [('·', '·'), ('Time', 'time'), ('Complexity', 'complexity'), ('−', "''")] 

 Dependency tags are: 
>> [(('·', 'Complexity'), 'punct'), (('Time', 'Complexity'), 'compound'), (('Complexity', 'root'), 'root'), (('−', 'Complexity'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 20 ===========================

 The maximum number of nodes that are created. 

Tokens are: 
>> ['The', 'maximum', 'number', 'of', 'nodes', 'that', 'are', 'created', '.'] 

 UPOS tags are: 
>> [('The', 'DET'), ('maximum', 'ADJ'), ('number', 'NOUN'), ('of', 'ADP'), ('nodes', 'NOUN'), ('that', 'PRON'), ('are', 'AUX'), ('created', 'VERB'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('The', 'DT'), ('maximum', 'JJ'), ('number', 'NN'), ('of', 'IN'), ('nodes', 'NNS'), ('that', 'WDT'), ('are', 'VBP'), ('created', 'VBN'), ('.', '.')] 

 Lemmas are: 
>> [('The', 'the'), ('maximum', 'maximum'), ('number', 'number'), ('of', 'of'), ('nodes', 'node'), ('that', 'that'), ('are', 'be'), ('created', 'create'), ('.', '.')] 

 Dependency tags are: 
>> [(('The', 'number'), 'det'), (('maximum', 'number'), 'amod'), (('number', 'root'), 'root'), (('of', 'nodes'), 'case'), (('nodes', 'number'), 'nmod'), (('that', 'created'), 'nsubj:pass'), (('are', 'created'), 'aux:pass'), (('created', 'nodes'), 'acl:relcl'), (('.', 'number'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 21 ===========================

 · Admissibility − A property of an algorithm to always find an optimal solution. 

Tokens are: 
>> ['·', 'Admissibility', '−', 'A', 'property', 'of', 'an', 'algorithm', 'to', 'always', 'find', 'an', 'optimal', 'solution', '.'] 

 UPOS tags are: 
>> [('·', 'PUNCT'), ('Admissibility', 'NOUN'), ('−', 'PUNCT'), ('A', 'DET'), ('property', 'NOUN'), ('of', 'ADP'), ('an', 'DET'), ('algorithm', 'NOUN'), ('to', 'PART'), ('always', 'ADV'), ('find', 'VERB'), ('an', 'DET'), ('optimal', 'ADJ'), ('solution', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('·', 'NFP'), ('Admissibility', 'NN'), ('−', ','), ('A', 'DT'), ('property', 'NN'), ('of', 'IN'), ('an', 'DT'), ('algorithm', 'NN'), ('to', 'TO'), ('always', 'RB'), ('find', 'VB'), ('an', 'DT'), ('optimal', 'JJ'), ('solution', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('·', '·'), ('Admissibility', 'admissibility'), ('−', "''"), ('A', 'a'), ('property', 'property'), ('of', 'of'), ('an', 'a'), ('algorithm', 'algorithm'), ('to', 'to'), ('always', 'always'), ('find', 'find'), ('an', 'a'), ('optimal', 'optimal'), ('solution', 'solution'), ('.', '.')] 

 Dependency tags are: 
>> [(('·', 'Admissibility'), 'punct'), (('Admissibility', 'root'), 'root'), (('−', 'Admissibility'), 'punct'), (('A', 'property'), 'det'), (('property', 'Admissibility'), 'appos'), (('of', 'algorithm'), 'case'), (('an', 'algorithm'), 'det'), (('algorithm', 'property'), 'nmod'), (('to', 'find'), 'mark'), (('always', 'find'), 'advmod'), (('find', 'algorithm'), 'acl'), (('an', 'solution'), 'det'), (('optimal', 'solution'), 'amod'), (('solution', 'find'), 'obj'), (('.', 'Admissibility'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 22 ===========================

 · Branching Factor − 

Tokens are: 
>> ['·', 'Branching', 'Factor', '−'] 

 UPOS tags are: 
>> [('·', 'PUNCT'), ('Branching', 'NOUN'), ('Factor', 'NOUN'), ('−', 'PUNCT')] 

 XPOS tags are: 
>> [('·', 'NFP'), ('Branching', 'NN'), ('Factor', 'NN'), ('−', '.')] 

 Lemmas are: 
>> [('·', '·'), ('Branching', 'branching'), ('Factor', 'factor'), ('−', "''")] 

 Dependency tags are: 
>> [(('·', 'Factor'), 'punct'), (('Branching', 'Factor'), 'compound'), (('Factor', 'root'), 'root'), (('−', 'Factor'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 23 ===========================

 The average number of child nodes in the problem space graph. 

Tokens are: 
>> ['The', 'average', 'number', 'of', 'child', 'nodes', 'in', 'the', 'problem', 'space', 'graph', '.'] 

 UPOS tags are: 
>> [('The', 'DET'), ('average', 'ADJ'), ('number', 'NOUN'), ('of', 'ADP'), ('child', 'NOUN'), ('nodes', 'NOUN'), ('in', 'ADP'), ('the', 'DET'), ('problem', 'NOUN'), ('space', 'NOUN'), ('graph', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('The', 'DT'), ('average', 'JJ'), ('number', 'NN'), ('of', 'IN'), ('child', 'NN'), ('nodes', 'NNS'), ('in', 'IN'), ('the', 'DT'), ('problem', 'NN'), ('space', 'NN'), ('graph', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('The', 'the'), ('average', 'average'), ('number', 'number'), ('of', 'of'), ('child', 'child'), ('nodes', 'node'), ('in', 'in'), ('the', 'the'), ('problem', 'problem'), ('space', 'space'), ('graph', 'graph'), ('.', '.')] 

 Dependency tags are: 
>> [(('The', 'number'), 'det'), (('average', 'number'), 'amod'), (('number', 'root'), 'root'), (('of', 'nodes'), 'case'), (('child', 'nodes'), 'compound'), (('nodes', 'number'), 'nmod'), (('in', 'graph'), 'case'), (('the', 'graph'), 'det'), (('problem', 'graph'), 'compound'), (('space', 'graph'), 'compound'), (('graph', 'nodes'), 'nmod'), (('.', 'number'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 24 ===========================

 · Depth − Length of the shortest path from initial state to goal state. 

Tokens are: 
>> ['·', 'Depth', '−', 'Length', 'of', 'the', 'shortest', 'path', 'from', 'initial', 'state', 'to', 'goal', 'state', '.'] 

 UPOS tags are: 
>> [('·', 'PUNCT'), ('Depth', 'NOUN'), ('−', 'PUNCT'), ('Length', 'NOUN'), ('of', 'ADP'), ('the', 'DET'), ('shortest', 'ADJ'), ('path', 'NOUN'), ('from', 'ADP'), ('initial', 'ADJ'), ('state', 'NOUN'), ('to', 'ADP'), ('goal', 'NOUN'), ('state', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('·', 'NFP'), ('Depth', 'NN'), ('−', ','), ('Length', 'NN'), ('of', 'IN'), ('the', 'DT'), ('shortest', 'JJS'), ('path', 'NN'), ('from', 'IN'), ('initial', 'JJ'), ('state', 'NN'), ('to', 'IN'), ('goal', 'NN'), ('state', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('·', '·'), ('Depth', 'depth'), ('−', "''"), ('Length', 'length'), ('of', 'of'), ('the', 'the'), ('shortest', 'short'), ('path', 'path'), ('from', 'from'), ('initial', 'initial'), ('state', 'state'), ('to', 'to'), ('goal', 'goal'), ('state', 'state'), ('.', '.')] 

 Dependency tags are: 
>> [(('·', 'Depth'), 'punct'), (('Depth', 'Length'), 'compound'), (('−', 'Depth'), 'punct'), (('Length', 'root'), 'root'), (('of', 'path'), 'case'), (('the', 'path'), 'det'), (('shortest', 'path'), 'amod'), (('path', 'Length'), 'nmod'), (('from', 'state'), 'case'), (('initial', 'state'), 'amod'), (('state', 'path'), 'nmod'), (('to', 'state'), 'case'), (('goal', 'state'), 'compound'), (('state', 'state'), 'nmod'), (('.', 'Depth'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 25 ===========================

 Brute-Force Search Strategies 

Tokens are: 
>> ['Brute', '-', 'Force', 'Search', 'Strategies'] 

 UPOS tags are: 
>> [('Brute', 'NOUN'), ('-', 'PUNCT'), ('Force', 'NOUN'), ('Search', 'NOUN'), ('Strategies', 'NOUN')] 

 XPOS tags are: 
>> [('Brute', 'NN'), ('-', 'HYPH'), ('Force', 'NN'), ('Search', 'NN'), ('Strategies', 'NNS')] 

 Lemmas are: 
>> [('Brute', 'brute'), ('-', '-'), ('Force', 'force'), ('Search', 'search'), ('Strategies', 'strategy')] 

 Dependency tags are: 
>> [(('Brute', 'Force'), 'compound'), (('-', 'Force'), 'punct'), (('Force', 'Strategies'), 'compound'), (('Search', 'Strategies'), 'compound'), (('Strategies', 'root'), 'root')]

 Named Entities are: 
>> []

========================== Sentence 26 ===========================

 They are most simple, as they do not need any domain-specific knowledge. 

Tokens are: 
>> ['They', 'are', 'most', 'simple', ',', 'as', 'they', 'do', 'not', 'need', 'any', 'domain-specific', 'knowledge', '.'] 

 UPOS tags are: 
>> [('They', 'PRON'), ('are', 'AUX'), ('most', 'ADV'), ('simple', 'ADJ'), (',', 'PUNCT'), ('as', 'SCONJ'), ('they', 'PRON'), ('do', 'AUX'), ('not', 'PART'), ('need', 'VERB'), ('any', 'DET'), ('domain-specific', 'ADJ'), ('knowledge', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('They', 'PRP'), ('are', 'VBP'), ('most', 'RBS'), ('simple', 'JJ'), (',', ','), ('as', 'IN'), ('they', 'PRP'), ('do', 'VBP'), ('not', 'RB'), ('need', 'VB'), ('any', 'DT'), ('domain-specific', 'JJ'), ('knowledge', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('They', 'they'), ('are', 'be'), ('most', 'most'), ('simple', 'simple'), (',', ','), ('as', 'as'), ('they', 'they'), ('do', 'do'), ('not', 'not'), ('need', 'need'), ('any', 'any'), ('domain-specific', 'domain-specific'), ('knowledge', 'knowledge'), ('.', '.')] 

 Dependency tags are: 
>> [(('They', 'simple'), 'nsubj'), (('are', 'simple'), 'cop'), (('most', 'simple'), 'advmod'), (('simple', 'root'), 'root'), ((',', 'simple'), 'punct'), (('as', 'need'), 'mark'), (('they', 'need'), 'nsubj'), (('do', 'need'), 'aux'), (('not', 'need'), 'advmod'), (('need', 'simple'), 'advcl'), (('any', 'knowledge'), 'det'), (('domain-specific', 'knowledge'), 'amod'), (('knowledge', 'need'), 'obj'), (('.', 'simple'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 27 ===========================

 They work fine with small number of possible states. 

Tokens are: 
>> ['They', 'work', 'fine', 'with', 'small', 'number', 'of', 'possible', 'states', '.'] 

 UPOS tags are: 
>> [('They', 'PRON'), ('work', 'VERB'), ('fine', 'ADV'), ('with', 'ADP'), ('small', 'ADJ'), ('number', 'NOUN'), ('of', 'ADP'), ('possible', 'ADJ'), ('states', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('They', 'PRP'), ('work', 'VBP'), ('fine', 'RB'), ('with', 'IN'), ('small', 'JJ'), ('number', 'NN'), ('of', 'IN'), ('possible', 'JJ'), ('states', 'NNS'), ('.', '.')] 

 Lemmas are: 
>> [('They', 'they'), ('work', 'work'), ('fine', 'fine'), ('with', 'with'), ('small', 'small'), ('number', 'number'), ('of', 'of'), ('possible', 'possible'), ('states', 'state'), ('.', '.')] 

 Dependency tags are: 
>> [(('They', 'work'), 'nsubj'), (('work', 'root'), 'root'), (('fine', 'work'), 'advmod'), (('with', 'number'), 'case'), (('small', 'number'), 'amod'), (('number', 'work'), 'obl'), (('of', 'states'), 'case'), (('possible', 'states'), 'amod'), (('states', 'number'), 'nmod'), (('.', 'work'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 28 ===========================

 Requirements − · State description · A set of valid operators · Initial state · Goal state description Breadth-First Search 

Tokens are: 
>> ['Requirements', '−', '·', 'State', 'description', '·', 'A', 'set', 'of', 'valid', 'operators', '·', 'Initial', 'state', '·', 'Goal', 'state', 'description', 'Breadth', '-', 'First', 'Search'] 

 UPOS tags are: 
>> [('Requirements', 'NOUN'), ('−', 'PUNCT'), ('·', 'PUNCT'), ('State', 'NOUN'), ('description', 'NOUN'), ('·', 'PUNCT'), ('A', 'DET'), ('set', 'NOUN'), ('of', 'ADP'), ('valid', 'ADJ'), ('operators', 'NOUN'), ('·', 'PUNCT'), ('Initial', 'ADJ'), ('state', 'NOUN'), ('·', 'PUNCT'), ('Goal', 'NOUN'), ('state', 'NOUN'), ('description', 'NOUN'), ('Breadth', 'NOUN'), ('-', 'PUNCT'), ('First', 'ADJ'), ('Search', 'NOUN')] 

 XPOS tags are: 
>> [('Requirements', 'NNS'), ('−', ','), ('·', 'NFP'), ('State', 'NN'), ('description', 'NN'), ('·', 'NFP'), ('A', 'DT'), ('set', 'NN'), ('of', 'IN'), ('valid', 'JJ'), ('operators', 'NNS'), ('·', 'NFP'), ('Initial', 'JJ'), ('state', 'NN'), ('·', 'NFP'), ('Goal', 'NN'), ('state', 'NN'), ('description', 'NN'), ('Breadth', 'NN'), ('-', 'HYPH'), ('First', 'JJ'), ('Search', 'NN')] 

 Lemmas are: 
>> [('Requirements', 'requirement'), ('−', "''"), ('·', '·'), ('State', 'state'), ('description', 'description'), ('·', '·'), ('A', 'a'), ('set', 'set'), ('of', 'of'), ('valid', 'valid'), ('operators', 'operator'), ('·', '·'), ('Initial', 'Initial'), ('state', 'state'), ('·', '·'), ('Goal', 'goal'), ('state', 'state'), ('description', 'description'), ('Breadth', 'breadth'), ('-', '-'), ('First', 'first'), ('Search', 'search')] 

 Dependency tags are: 
>> [(('Requirements', 'root'), 'root'), (('−', 'Requirements'), 'punct'), (('·', 'description'), 'punct'), (('State', 'description'), 'compound'), (('description', 'Requirements'), 'appos'), (('·', 'set'), 'punct'), (('A', 'set'), 'det'), (('set', 'description'), 'appos'), (('of', 'operators'), 'case'), (('valid', 'operators'), 'amod'), (('operators', 'set'), 'nmod'), (('·', 'state'), 'punct'), (('Initial', 'state'), 'amod'), (('state', 'operators'), 'appos'), (('·', 'state'), 'punct'), (('Goal', 'state'), 'compound'), (('state', 'description'), 'compound'), (('description', 'Breadth'), 'compound'), (('Breadth', 'Search'), 'compound'), (('-', 'Search'), 'punct'), (('First', 'Search'), 'amod'), (('Search', 'Requirements'), 'parataxis')]

 Named Entities are: 
>> []

========================== Sentence 29 ===========================

 It starts from the root node, explores the neighboring nodes first and moves towards the next level neighbors. 

Tokens are: 
>> ['It', 'starts', 'from', 'the', 'root', 'node', ',', 'explores', 'the', 'neighboring', 'nodes', 'first', 'and', 'moves', 'towards', 'the', 'next', 'level', 'neighbors', '.'] 

 UPOS tags are: 
>> [('It', 'PRON'), ('starts', 'VERB'), ('from', 'ADP'), ('the', 'DET'), ('root', 'NOUN'), ('node', 'NOUN'), (',', 'PUNCT'), ('explores', 'VERB'), ('the', 'DET'), ('neighboring', 'VERB'), ('nodes', 'NOUN'), ('first', 'ADV'), ('and', 'CCONJ'), ('moves', 'VERB'), ('towards', 'ADP'), ('the', 'DET'), ('next', 'ADJ'), ('level', 'NOUN'), ('neighbors', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('It', 'PRP'), ('starts', 'VBZ'), ('from', 'IN'), ('the', 'DT'), ('root', 'NN'), ('node', 'NN'), (',', ','), ('explores', 'VBZ'), ('the', 'DT'), ('neighboring', 'VBG'), ('nodes', 'NNS'), ('first', 'RB'), ('and', 'CC'), ('moves', 'VBZ'), ('towards', 'IN'), ('the', 'DT'), ('next', 'JJ'), ('level', 'NN'), ('neighbors', 'NNS'), ('.', '.')] 

 Lemmas are: 
>> [('It', 'it'), ('starts', 'start'), ('from', 'from'), ('the', 'the'), ('root', 'root'), ('node', 'node'), (',', ','), ('explores', 'explore'), ('the', 'the'), ('neighboring', 'neighbor'), ('nodes', 'node'), ('first', 'first'), ('and', 'and'), ('moves', 'move'), ('towards', 'towards'), ('the', 'the'), ('next', 'next'), ('level', 'level'), ('neighbors', 'neighbor'), ('.', '.')] 

 Dependency tags are: 
>> [(('It', 'starts'), 'nsubj'), (('starts', 'root'), 'root'), (('from', 'node'), 'case'), (('the', 'node'), 'det'), (('root', 'node'), 'compound'), (('node', 'starts'), 'obl'), ((',', 'explores'), 'punct'), (('explores', 'starts'), 'conj'), (('the', 'nodes'), 'det'), (('neighboring', 'nodes'), 'amod'), (('nodes', 'explores'), 'obj'), (('first', 'explores'), 'advmod'), (('and', 'moves'), 'cc'), (('moves', 'explores'), 'conj'), (('towards', 'neighbors'), 'case'), (('the', 'neighbors'), 'det'), (('next', 'neighbors'), 'amod'), (('level', 'neighbors'), 'compound'), (('neighbors', 'moves'), 'obl'), (('.', 'starts'), 'punct')]

 Named Entities are: 
>> [('first', 'ORDINAL')]

========================== Sentence 30 ===========================

 It generates one tree at a time until the solution is found. 

Tokens are: 
>> ['It', 'generates', 'one', 'tree', 'at', 'a', 'time', 'until', 'the', 'solution', 'is', 'found', '.'] 

 UPOS tags are: 
>> [('It', 'PRON'), ('generates', 'VERB'), ('one', 'NUM'), ('tree', 'NOUN'), ('at', 'ADP'), ('a', 'DET'), ('time', 'NOUN'), ('until', 'SCONJ'), ('the', 'DET'), ('solution', 'NOUN'), ('is', 'AUX'), ('found', 'VERB'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('It', 'PRP'), ('generates', 'VBZ'), ('one', 'CD'), ('tree', 'NN'), ('at', 'IN'), ('a', 'DT'), ('time', 'NN'), ('until', 'IN'), ('the', 'DT'), ('solution', 'NN'), ('is', 'VBZ'), ('found', 'VBN'), ('.', '.')] 

 Lemmas are: 
>> [('It', 'it'), ('generates', 'generate'), ('one', 'one'), ('tree', 'tree'), ('at', 'at'), ('a', 'a'), ('time', 'time'), ('until', 'until'), ('the', 'the'), ('solution', 'solution'), ('is', 'be'), ('found', 'find'), ('.', '.')] 

 Dependency tags are: 
>> [(('It', 'generates'), 'nsubj'), (('generates', 'root'), 'root'), (('one', 'tree'), 'nummod'), (('tree', 'generates'), 'obj'), (('at', 'time'), 'case'), (('a', 'time'), 'det'), (('time', 'generates'), 'obl'), (('until', 'found'), 'mark'), (('the', 'solution'), 'det'), (('solution', 'found'), 'nsubj:pass'), (('is', 'found'), 'aux:pass'), (('found', 'generates'), 'advcl'), (('.', 'generates'), 'punct')]

 Named Entities are: 
>> [('one', 'CARDINAL')]

========================== Sentence 31 ===========================

 It can be implemented using FIFO queue data structure. 

Tokens are: 
>> ['It', 'can', 'be', 'implemented', 'using', 'FIFO', 'queue', 'data', 'structure', '.'] 

 UPOS tags are: 
>> [('It', 'PRON'), ('can', 'AUX'), ('be', 'AUX'), ('implemented', 'VERB'), ('using', 'VERB'), ('FIFO', 'NOUN'), ('queue', 'NOUN'), ('data', 'NOUN'), ('structure', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('It', 'PRP'), ('can', 'MD'), ('be', 'VB'), ('implemented', 'VBN'), ('using', 'VBG'), ('FIFO', 'NN'), ('queue', 'NN'), ('data', 'NN'), ('structure', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('It', 'it'), ('can', 'can'), ('be', 'be'), ('implemented', 'implement'), ('using', 'use'), ('FIFO', 'fifo'), ('queue', 'queue'), ('data', 'datum'), ('structure', 'structure'), ('.', '.')] 

 Dependency tags are: 
>> [(('It', 'implemented'), 'nsubj:pass'), (('can', 'implemented'), 'aux'), (('be', 'implemented'), 'aux:pass'), (('implemented', 'root'), 'root'), (('using', 'implemented'), 'advcl'), (('FIFO', 'structure'), 'compound'), (('queue', 'structure'), 'compound'), (('data', 'structure'), 'compound'), (('structure', 'using'), 'obj'), (('.', 'implemented'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 32 ===========================

 This method provides shortest path to the solution. 

Tokens are: 
>> ['This', 'method', 'provides', 'shortest', 'path', 'to', 'the', 'solution', '.'] 

 UPOS tags are: 
>> [('This', 'DET'), ('method', 'NOUN'), ('provides', 'VERB'), ('shortest', 'ADJ'), ('path', 'NOUN'), ('to', 'ADP'), ('the', 'DET'), ('solution', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('This', 'DT'), ('method', 'NN'), ('provides', 'VBZ'), ('shortest', 'JJS'), ('path', 'NN'), ('to', 'IN'), ('the', 'DT'), ('solution', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('This', 'this'), ('method', 'method'), ('provides', 'provide'), ('shortest', 'short'), ('path', 'path'), ('to', 'to'), ('the', 'the'), ('solution', 'solution'), ('.', '.')] 

 Dependency tags are: 
>> [(('This', 'method'), 'det'), (('method', 'provides'), 'nsubj'), (('provides', 'root'), 'root'), (('shortest', 'path'), 'amod'), (('path', 'provides'), 'obj'), (('to', 'solution'), 'case'), (('the', 'solution'), 'det'), (('solution', 'provides'), 'obl'), (('.', 'provides'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 33 ===========================

 If branching factor (average number of child nodes for a given node) = b and depth = d, then number of nodes at level d = bd. 

Tokens are: 
>> ['If', 'branching', 'factor', '(', 'average', 'number', 'of', 'child', 'nodes', 'for', 'a', 'given', 'node', ')', '=', 'b', 'and', 'depth', '=', 'd', ',', 'then', 'number', 'of', 'nodes', 'at', 'level', 'd', '=', 'bd', '.'] 

 UPOS tags are: 
>> [('If', 'SCONJ'), ('branching', 'VERB'), ('factor', 'NOUN'), ('(', 'PUNCT'), ('average', 'ADJ'), ('number', 'NOUN'), ('of', 'ADP'), ('child', 'NOUN'), ('nodes', 'NOUN'), ('for', 'ADP'), ('a', 'DET'), ('given', 'VERB'), ('node', 'NOUN'), (')', 'PUNCT'), ('=', 'SYM'), ('b', 'NOUN'), ('and', 'CCONJ'), ('depth', 'NOUN'), ('=', 'SYM'), ('d', 'NOUN'), (',', 'PUNCT'), ('then', 'ADV'), ('number', 'NOUN'), ('of', 'ADP'), ('nodes', 'NOUN'), ('at', 'ADP'), ('level', 'NOUN'), ('d', 'NOUN'), ('=', 'SYM'), ('bd', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('If', 'IN'), ('branching', 'VBG'), ('factor', 'NN'), ('(', '-LRB-'), ('average', 'JJ'), ('number', 'NN'), ('of', 'IN'), ('child', 'NN'), ('nodes', 'NNS'), ('for', 'IN'), ('a', 'DT'), ('given', 'VBN'), ('node', 'NN'), (')', '-RRB-'), ('=', 'SYM'), ('b', 'NN'), ('and', 'CC'), ('depth', 'NN'), ('=', 'SYM'), ('d', 'NN'), (',', ','), ('then', 'RB'), ('number', 'NN'), ('of', 'IN'), ('nodes', 'NNS'), ('at', 'IN'), ('level', 'NN'), ('d', 'NN'), ('=', 'SYM'), ('bd', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('If', 'if'), ('branching', 'branch'), ('factor', 'factor'), ('(', '('), ('average', 'average'), ('number', 'number'), ('of', 'of'), ('child', 'child'), ('nodes', 'node'), ('for', 'for'), ('a', 'a'), ('given', 'give'), ('node', 'node'), (')', ')'), ('=', '='), ('b', 'b'), ('and', 'and'), ('depth', 'depth'), ('=', '='), ('d', 'd'), (',', ','), ('then', 'then'), ('number', 'number'), ('of', 'of'), ('nodes', 'node'), ('at', 'at'), ('level', 'level'), ('d', 'd'), ('=', '='), ('bd', 'bd'), ('.', '.')] 

 Dependency tags are: 
>> [(('If', '='), 'mark'), (('branching', 'factor'), 'amod'), (('factor', '='), 'nsubj'), (('(', 'number'), 'punct'), (('average', 'number'), 'amod'), (('number', 'factor'), 'appos'), (('of', 'nodes'), 'case'), (('child', 'nodes'), 'compound'), (('nodes', 'number'), 'nmod'), (('for', 'node'), 'case'), (('a', 'node'), 'det'), (('given', 'node'), 'amod'), (('node', 'nodes'), 'nmod'), ((')', 'number'), 'punct'), (('=', '='), 'advcl'), (('b', '='), 'obj'), (('and', 'depth'), 'cc'), (('depth', 'b'), 'conj'), (('=', '='), 'xcomp'), (('d', '='), 'obj'), ((',', 'number'), 'punct'), (('then', 'number'), 'advmod'), (('number', '='), 'nsubj'), (('of', 'nodes'), 'case'), (('nodes', 'number'), 'nmod'), (('at', 'd'), 'case'), (('level', 'd'), 'compound'), (('d', '='), 'nsubj'), (('=', 'root'), 'root'), (('bd', '='), 'obj'), (('.', '='), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 34 ===========================

 The total no of nodes created in worst case is b + b2 + b3 + … + bd. Disadvantage − Since each level of nodes is saved for creating next one, it consumes a lot of memory space. 

Tokens are: 
>> ['The', 'total', 'no', 'of', 'nodes', 'created', 'in', 'worst', 'case', 'is', 'b', '+', 'b', '2', '+', 'b', '3', '+', '…', '+', 'bd.', 'Disadvantage', '−', 'Since', 'each', 'level', 'of', 'nodes', 'is', 'saved', 'for', 'creating', 'next', 'one', ',', 'it', 'consumes', 'a', 'lot', 'of', 'memory', 'space', '.'] 

 UPOS tags are: 
>> [('The', 'DET'), ('total', 'ADJ'), ('no', 'ADV'), ('of', 'ADP'), ('nodes', 'NOUN'), ('created', 'VERB'), ('in', 'ADP'), ('worst', 'ADJ'), ('case', 'NOUN'), ('is', 'AUX'), ('b', 'NUM'), ('+', 'SYM'), ('b', 'NOUN'), ('2', 'NUM'), ('+', 'SYM'), ('b', 'NOUN'), ('3', 'NUM'), ('+', 'SYM'), ('…', 'PUNCT'), ('+', 'SYM'), ('bd.', 'NOUN'), ('Disadvantage', 'NOUN'), ('−', 'PUNCT'), ('Since', 'SCONJ'), ('each', 'DET'), ('level', 'NOUN'), ('of', 'ADP'), ('nodes', 'NOUN'), ('is', 'AUX'), ('saved', 'VERB'), ('for', 'SCONJ'), ('creating', 'VERB'), ('next', 'ADJ'), ('one', 'NUM'), (',', 'PUNCT'), ('it', 'PRON'), ('consumes', 'VERB'), ('a', 'DET'), ('lot', 'NOUN'), ('of', 'ADP'), ('memory', 'NOUN'), ('space', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('The', 'DT'), ('total', 'JJ'), ('no', 'RB'), ('of', 'IN'), ('nodes', 'NNS'), ('created', 'VBN'), ('in', 'IN'), ('worst', 'JJS'), ('case', 'NN'), ('is', 'VBZ'), ('b', 'CD'), ('+', 'SYM'), ('b', 'NN'), ('2', 'CD'), ('+', 'SYM'), ('b', 'NN'), ('3', 'CD'), ('+', 'SYM'), ('…', ':'), ('+', 'SYM'), ('bd.', 'NN'), ('Disadvantage', 'NN'), ('−', ','), ('Since', 'IN'), ('each', 'DT'), ('level', 'NN'), ('of', 'IN'), ('nodes', 'NNS'), ('is', 'VBZ'), ('saved', 'VBN'), ('for', 'IN'), ('creating', 'VBG'), ('next', 'JJ'), ('one', 'CD'), (',', ','), ('it', 'PRP'), ('consumes', 'VBZ'), ('a', 'DT'), ('lot', 'NN'), ('of', 'IN'), ('memory', 'NN'), ('space', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('The', 'the'), ('total', 'total'), ('no', 'no'), ('of', 'of'), ('nodes', 'node'), ('created', 'create'), ('in', 'in'), ('worst', 'bad'), ('case', 'case'), ('is', 'be'), ('b', 'b'), ('+', '+'), ('b', 'b'), ('2', '2'), ('+', '+'), ('b', 'b'), ('3', '3'), ('+', '+'), ('…', '…'), ('+', '+'), ('bd.', 'bd.'), ('Disadvantage', 'disadvantage'), ('−', "''"), ('Since', 'since'), ('each', 'each'), ('level', 'level'), ('of', 'of'), ('nodes', 'node'), ('is', 'be'), ('saved', 'save'), ('for', 'for'), ('creating', 'create'), ('next', 'next'), ('one', 'one'), (',', ','), ('it', 'it'), ('consumes', 'consume'), ('a', 'a'), ('lot', 'lot'), ('of', 'of'), ('memory', 'memory'), ('space', 'space'), ('.', '.')] 

 Dependency tags are: 
>> [(('The', 'total'), 'det'), (('total', 'b'), 'nsubj'), (('no', 'total'), 'advmod'), (('of', 'nodes'), 'case'), (('nodes', 'no'), 'nmod'), (('created', 'nodes'), 'acl'), (('in', 'case'), 'case'), (('worst', 'case'), 'amod'), (('case', 'created'), 'obl'), (('is', 'b'), 'cop'), (('b', 'consumes'), 'advcl'), (('+', 'b'), 'cc'), (('b', 'b'), 'conj'), (('2', 'b'), 'conj'), (('+', 'b'), 'cc'), (('b', 'b'), 'conj'), (('3', 'b'), 'nummod'), (('+', 'b'), 'advmod'), (('…', 'Disadvantage'), 'punct'), (('+', 'Disadvantage'), 'cc'), (('bd.', 'Disadvantage'), 'compound'), (('Disadvantage', 'b'), 'conj'), (('−', 'Disadvantage'), 'punct'), (('Since', 'saved'), 'mark'), (('each', 'level'), 'det'), (('level', 'saved'), 'nsubj:pass'), (('of', 'nodes'), 'case'), (('nodes', 'level'), 'nmod'), (('is', 'saved'), 'aux:pass'), (('saved', 'consumes'), 'advcl'), (('for', 'creating'), 'mark'), (('creating', 'saved'), 'advcl'), (('next', 'one'), 'amod'), (('one', 'creating'), 'obj'), ((',', 'consumes'), 'punct'), (('it', 'consumes'), 'nsubj'), (('consumes', 'root'), 'root'), (('a', 'lot'), 'det'), (('lot', 'consumes'), 'obj'), (('of', 'space'), 'case'), (('memory', 'space'), 'compound'), (('space', 'lot'), 'nmod'), (('.', 'consumes'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 35 ===========================

 Space requirement to store nodes is exponential. 

Tokens are: 
>> ['Space', 'requirement', 'to', 'store', 'nodes', 'is', 'exponential', '.'] 

 UPOS tags are: 
>> [('Space', 'NOUN'), ('requirement', 'NOUN'), ('to', 'PART'), ('store', 'VERB'), ('nodes', 'NOUN'), ('is', 'AUX'), ('exponential', 'ADJ'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Space', 'NN'), ('requirement', 'NN'), ('to', 'TO'), ('store', 'VB'), ('nodes', 'NNS'), ('is', 'VBZ'), ('exponential', 'JJ'), ('.', '.')] 

 Lemmas are: 
>> [('Space', 'space'), ('requirement', 'requirement'), ('to', 'to'), ('store', 'store'), ('nodes', 'node'), ('is', 'be'), ('exponential', 'exponential'), ('.', '.')] 

 Dependency tags are: 
>> [(('Space', 'requirement'), 'compound'), (('requirement', 'exponential'), 'nsubj'), (('to', 'store'), 'mark'), (('store', 'requirement'), 'acl'), (('nodes', 'store'), 'obj'), (('is', 'exponential'), 'cop'), (('exponential', 'root'), 'root'), (('.', 'exponential'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 36 ===========================

 Its complexity depends on the number of nodes. 

Tokens are: 
>> ['Its', 'complexity', 'depends', 'on', 'the', 'number', 'of', 'nodes', '.'] 

 UPOS tags are: 
>> [('Its', 'PRON'), ('complexity', 'NOUN'), ('depends', 'VERB'), ('on', 'ADP'), ('the', 'DET'), ('number', 'NOUN'), ('of', 'ADP'), ('nodes', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Its', 'PRP$'), ('complexity', 'NN'), ('depends', 'VBZ'), ('on', 'IN'), ('the', 'DT'), ('number', 'NN'), ('of', 'IN'), ('nodes', 'NNS'), ('.', '.')] 

 Lemmas are: 
>> [('Its', 'its'), ('complexity', 'complexity'), ('depends', 'depend'), ('on', 'on'), ('the', 'the'), ('number', 'number'), ('of', 'of'), ('nodes', 'node'), ('.', '.')] 

 Dependency tags are: 
>> [(('Its', 'complexity'), 'nmod:poss'), (('complexity', 'depends'), 'nsubj'), (('depends', 'root'), 'root'), (('on', 'number'), 'case'), (('the', 'number'), 'det'), (('number', 'depends'), 'obl'), (('of', 'nodes'), 'case'), (('nodes', 'number'), 'nmod'), (('.', 'depends'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 37 ===========================

 It can check duplicate nodes. 

Tokens are: 
>> ['It', 'can', 'check', 'duplicate', 'nodes', '.'] 

 UPOS tags are: 
>> [('It', 'PRON'), ('can', 'AUX'), ('check', 'VERB'), ('duplicate', 'NOUN'), ('nodes', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('It', 'PRP'), ('can', 'MD'), ('check', 'VB'), ('duplicate', 'NN'), ('nodes', 'NNS'), ('.', '.')] 

 Lemmas are: 
>> [('It', 'it'), ('can', 'can'), ('check', 'check'), ('duplicate', 'duplicate'), ('nodes', 'node'), ('.', '.')] 

 Dependency tags are: 
>> [(('It', 'check'), 'nsubj'), (('can', 'check'), 'aux'), (('check', 'root'), 'root'), (('duplicate', 'nodes'), 'compound'), (('nodes', 'check'), 'obj'), (('.', 'check'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 38 ===========================

 Depth-First Search 

Tokens are: 
>> ['Depth-', 'First', 'Search'] 

 UPOS tags are: 
>> [('Depth-', 'PROPN'), ('First', 'ADJ'), ('Search', 'NOUN')] 

 XPOS tags are: 
>> [('Depth-', 'NNP'), ('First', 'JJ'), ('Search', 'NN')] 

 Lemmas are: 
>> [('Depth-', 'Depth-'), ('First', 'first'), ('Search', 'search')] 

 Dependency tags are: 
>> [(('Depth-', 'Search'), 'compound'), (('First', 'Search'), 'amod'), (('Search', 'root'), 'root')]

 Named Entities are: 
>> []

========================== Sentence 39 ===========================

 It is implemented in recursion with LIFO stack data structure. 

Tokens are: 
>> ['It', 'is', 'implemented', 'in', 'recursion', 'with', 'LIFO', 'stack', 'data', 'structure', '.'] 

 UPOS tags are: 
>> [('It', 'PRON'), ('is', 'AUX'), ('implemented', 'VERB'), ('in', 'ADP'), ('recursion', 'NOUN'), ('with', 'ADP'), ('LIFO', 'NOUN'), ('stack', 'NOUN'), ('data', 'NOUN'), ('structure', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('It', 'PRP'), ('is', 'VBZ'), ('implemented', 'VBN'), ('in', 'IN'), ('recursion', 'NN'), ('with', 'IN'), ('LIFO', 'NN'), ('stack', 'NN'), ('data', 'NN'), ('structure', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('It', 'it'), ('is', 'be'), ('implemented', 'implement'), ('in', 'in'), ('recursion', 'recursion'), ('with', 'with'), ('LIFO', 'lifo'), ('stack', 'stack'), ('data', 'datum'), ('structure', 'structure'), ('.', '.')] 

 Dependency tags are: 
>> [(('It', 'implemented'), 'nsubj:pass'), (('is', 'implemented'), 'aux:pass'), (('implemented', 'root'), 'root'), (('in', 'recursion'), 'case'), (('recursion', 'implemented'), 'obl'), (('with', 'structure'), 'case'), (('LIFO', 'structure'), 'compound'), (('stack', 'structure'), 'compound'), (('data', 'structure'), 'compound'), (('structure', 'recursion'), 'nmod'), (('.', 'implemented'), 'punct')]

 Named Entities are: 
>> [('LIFO', 'ORG')]

========================== Sentence 40 ===========================

 It creates the same set of nodes as Breadth-First method, only in the different order. 

Tokens are: 
>> ['It', 'creates', 'the', 'same', 'set', 'of', 'nodes', 'as', 'Breadth', '-', 'First', 'method', ',', 'only', 'in', 'the', 'different', 'order', '.'] 

 UPOS tags are: 
>> [('It', 'PRON'), ('creates', 'VERB'), ('the', 'DET'), ('same', 'ADJ'), ('set', 'NOUN'), ('of', 'ADP'), ('nodes', 'NOUN'), ('as', 'ADP'), ('Breadth', 'NOUN'), ('-', 'PUNCT'), ('First', 'ADJ'), ('method', 'NOUN'), (',', 'PUNCT'), ('only', 'ADV'), ('in', 'ADP'), ('the', 'DET'), ('different', 'ADJ'), ('order', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('It', 'PRP'), ('creates', 'VBZ'), ('the', 'DT'), ('same', 'JJ'), ('set', 'NN'), ('of', 'IN'), ('nodes', 'NNS'), ('as', 'IN'), ('Breadth', 'NN'), ('-', 'HYPH'), ('First', 'JJ'), ('method', 'NN'), (',', ','), ('only', 'RB'), ('in', 'IN'), ('the', 'DT'), ('different', 'JJ'), ('order', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('It', 'it'), ('creates', 'create'), ('the', 'the'), ('same', 'same'), ('set', 'set'), ('of', 'of'), ('nodes', 'node'), ('as', 'as'), ('Breadth', 'breadth'), ('-', '-'), ('First', 'first'), ('method', 'method'), (',', ','), ('only', 'only'), ('in', 'in'), ('the', 'the'), ('different', 'different'), ('order', 'order'), ('.', '.')] 

 Dependency tags are: 
>> [(('It', 'creates'), 'nsubj'), (('creates', 'root'), 'root'), (('the', 'set'), 'det'), (('same', 'set'), 'amod'), (('set', 'creates'), 'obj'), (('of', 'nodes'), 'case'), (('nodes', 'set'), 'nmod'), (('as', 'method'), 'case'), (('Breadth', 'First'), 'compound'), (('-', 'First'), 'punct'), (('First', 'method'), 'amod'), (('method', 'creates'), 'obl'), ((',', 'order'), 'punct'), (('only', 'order'), 'advmod'), (('in', 'order'), 'case'), (('the', 'order'), 'det'), (('different', 'order'), 'amod'), (('order', 'creates'), 'obl'), (('.', 'creates'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 41 ===========================

 As the nodes on the single path are stored in each iteration from root to leaf node, the space requirement to store nodes is linear. 

Tokens are: 
>> ['As', 'the', 'nodes', 'on', 'the', 'single', 'path', 'are', 'stored', 'in', 'each', 'iteration', 'from', 'root', 'to', 'leaf', 'node', ',', 'the', 'space', 'requirement', 'to', 'store', 'nodes', 'is', 'linear', '.'] 

 UPOS tags are: 
>> [('As', 'SCONJ'), ('the', 'DET'), ('nodes', 'NOUN'), ('on', 'ADP'), ('the', 'DET'), ('single', 'ADJ'), ('path', 'NOUN'), ('are', 'AUX'), ('stored', 'VERB'), ('in', 'ADP'), ('each', 'DET'), ('iteration', 'NOUN'), ('from', 'ADP'), ('root', 'NOUN'), ('to', 'ADP'), ('leaf', 'NOUN'), ('node', 'NOUN'), (',', 'PUNCT'), ('the', 'DET'), ('space', 'NOUN'), ('requirement', 'NOUN'), ('to', 'PART'), ('store', 'VERB'), ('nodes', 'NOUN'), ('is', 'AUX'), ('linear', 'ADJ'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('As', 'IN'), ('the', 'DT'), ('nodes', 'NNS'), ('on', 'IN'), ('the', 'DT'), ('single', 'JJ'), ('path', 'NN'), ('are', 'VBP'), ('stored', 'VBN'), ('in', 'IN'), ('each', 'DT'), ('iteration', 'NN'), ('from', 'IN'), ('root', 'NN'), ('to', 'IN'), ('leaf', 'NN'), ('node', 'NN'), (',', ','), ('the', 'DT'), ('space', 'NN'), ('requirement', 'NN'), ('to', 'TO'), ('store', 'VB'), ('nodes', 'NNS'), ('is', 'VBZ'), ('linear', 'JJ'), ('.', '.')] 

 Lemmas are: 
>> [('As', 'as'), ('the', 'the'), ('nodes', 'node'), ('on', 'on'), ('the', 'the'), ('single', 'single'), ('path', 'path'), ('are', 'be'), ('stored', 'store'), ('in', 'in'), ('each', 'each'), ('iteration', 'iteration'), ('from', 'from'), ('root', 'root'), ('to', 'to'), ('leaf', 'leaf'), ('node', 'node'), (',', ','), ('the', 'the'), ('space', 'space'), ('requirement', 'requirement'), ('to', 'to'), ('store', 'store'), ('nodes', 'node'), ('is', 'be'), ('linear', 'linear'), ('.', '.')] 

 Dependency tags are: 
>> [(('As', 'stored'), 'mark'), (('the', 'nodes'), 'det'), (('nodes', 'stored'), 'nsubj:pass'), (('on', 'path'), 'case'), (('the', 'path'), 'det'), (('single', 'path'), 'amod'), (('path', 'nodes'), 'nmod'), (('are', 'stored'), 'aux:pass'), (('stored', 'linear'), 'advcl'), (('in', 'iteration'), 'case'), (('each', 'iteration'), 'det'), (('iteration', 'stored'), 'obl'), (('from', 'root'), 'case'), (('root', 'iteration'), 'nmod'), (('to', 'node'), 'case'), (('leaf', 'node'), 'compound'), (('node', 'root'), 'nmod'), ((',', 'linear'), 'punct'), (('the', 'requirement'), 'det'), (('space', 'requirement'), 'compound'), (('requirement', 'linear'), 'nsubj'), (('to', 'store'), 'mark'), (('store', 'requirement'), 'acl'), (('nodes', 'store'), 'obj'), (('is', 'linear'), 'cop'), (('linear', 'root'), 'root'), (('.', 'linear'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 42 ===========================

 With branching factor b and depth as m, the storage space is bm. 

Tokens are: 
>> ['With', 'branching', 'factor', 'b', 'and', 'depth', 'as', 'm', ',', 'the', 'storage', 'space', 'is', 'bm', '.'] 

 UPOS tags are: 
>> [('With', 'SCONJ'), ('branching', 'VERB'), ('factor', 'NOUN'), ('b', 'NOUN'), ('and', 'CCONJ'), ('depth', 'NOUN'), ('as', 'ADP'), ('m', 'NOUN'), (',', 'PUNCT'), ('the', 'DET'), ('storage', 'NOUN'), ('space', 'NOUN'), ('is', 'AUX'), ('bm', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('With', 'IN'), ('branching', 'VBG'), ('factor', 'NN'), ('b', 'NN'), ('and', 'CC'), ('depth', 'NN'), ('as', 'IN'), ('m', 'NN'), (',', ','), ('the', 'DT'), ('storage', 'NN'), ('space', 'NN'), ('is', 'VBZ'), ('bm', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('With', 'with'), ('branching', 'branch'), ('factor', 'factor'), ('b', 'b'), ('and', 'and'), ('depth', 'depth'), ('as', 'as'), ('m', 'm'), (',', ','), ('the', 'the'), ('storage', 'storage'), ('space', 'space'), ('is', 'be'), ('bm', 'bm'), ('.', '.')] 

 Dependency tags are: 
>> [(('With', 'branching'), 'mark'), (('branching', 'bm'), 'advcl'), (('factor', 'b'), 'compound'), (('b', 'branching'), 'obj'), (('and', 'depth'), 'cc'), (('depth', 'b'), 'conj'), (('as', 'm'), 'case'), (('m', 'branching'), 'obl'), ((',', 'bm'), 'punct'), (('the', 'space'), 'det'), (('storage', 'space'), 'compound'), (('space', 'bm'), 'nsubj'), (('is', 'bm'), 'cop'), (('bm', 'root'), 'root'), (('.', 'bm'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 43 ===========================

 Disadvantage − 

Tokens are: 
>> ['Disadvantage', '−'] 

 UPOS tags are: 
>> [('Disadvantage', 'NOUN'), ('−', 'PUNCT')] 

 XPOS tags are: 
>> [('Disadvantage', 'NN'), ('−', '.')] 

 Lemmas are: 
>> [('Disadvantage', 'disadvantage'), ('−', "''")] 

 Dependency tags are: 
>> [(('Disadvantage', 'root'), 'root'), (('−', 'Disadvantage'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 44 ===========================

 This algorithm may not terminate and go on infinitely on one path. 

Tokens are: 
>> ['This', 'algorithm', 'may', 'not', 'terminate', 'and', 'go', 'on', 'infinitely', 'on', 'one', 'path', '.'] 

 UPOS tags are: 
>> [('This', 'DET'), ('algorithm', 'NOUN'), ('may', 'AUX'), ('not', 'PART'), ('terminate', 'VERB'), ('and', 'CCONJ'), ('go', 'VERB'), ('on', 'ADP'), ('infinitely', 'ADV'), ('on', 'ADP'), ('one', 'NUM'), ('path', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('This', 'DT'), ('algorithm', 'NN'), ('may', 'MD'), ('not', 'RB'), ('terminate', 'VB'), ('and', 'CC'), ('go', 'VB'), ('on', 'IN'), ('infinitely', 'RB'), ('on', 'IN'), ('one', 'CD'), ('path', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('This', 'this'), ('algorithm', 'algorithm'), ('may', 'may'), ('not', 'not'), ('terminate', 'terminate'), ('and', 'and'), ('go', 'go'), ('on', 'on'), ('infinitely', 'infinitely'), ('on', 'on'), ('one', 'one'), ('path', 'path'), ('.', '.')] 

 Dependency tags are: 
>> [(('This', 'algorithm'), 'det'), (('algorithm', 'terminate'), 'nsubj'), (('may', 'terminate'), 'aux'), (('not', 'terminate'), 'advmod'), (('terminate', 'root'), 'root'), (('and', 'go'), 'cc'), (('go', 'terminate'), 'conj'), (('on', 'path'), 'case'), (('infinitely', 'go'), 'advmod'), (('on', 'path'), 'case'), (('one', 'path'), 'nummod'), (('path', 'go'), 'obl'), (('.', 'terminate'), 'punct')]

 Named Entities are: 
>> [('one', 'CARDINAL')]

========================== Sentence 45 ===========================

 The solution to this issue is to choose a cut-off depth. 

Tokens are: 
>> ['The', 'solution', 'to', 'this', 'issue', 'is', 'to', 'choose', 'a', 'cut', '-off', 'depth', '.'] 

 UPOS tags are: 
>> [('The', 'DET'), ('solution', 'NOUN'), ('to', 'ADP'), ('this', 'DET'), ('issue', 'NOUN'), ('is', 'VERB'), ('to', 'PART'), ('choose', 'VERB'), ('a', 'DET'), ('cut', 'NOUN'), ('-off', 'NOUN'), ('depth', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('The', 'DT'), ('solution', 'NN'), ('to', 'IN'), ('this', 'DT'), ('issue', 'NN'), ('is', 'VBZ'), ('to', 'TO'), ('choose', 'VB'), ('a', 'DT'), ('cut', 'NN'), ('-off', 'NN'), ('depth', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('The', 'the'), ('solution', 'solution'), ('to', 'to'), ('this', 'this'), ('issue', 'issue'), ('is', 'be'), ('to', 'to'), ('choose', 'choose'), ('a', 'a'), ('cut', 'cut'), ('-off', '-off'), ('depth', 'depth'), ('.', '.')] 

 Dependency tags are: 
>> [(('The', 'solution'), 'det'), (('solution', 'choose'), 'nsubj'), (('to', 'issue'), 'case'), (('this', 'issue'), 'det'), (('issue', 'solution'), 'nmod'), (('is', 'choose'), 'cop'), (('to', 'choose'), 'mark'), (('choose', 'root'), 'root'), (('a', 'depth'), 'det'), (('cut', '-off'), 'compound'), (('-off', 'depth'), 'compound'), (('depth', 'choose'), 'obj'), (('.', 'choose'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 46 ===========================

 If the ideal cut-off is d, and if chosen cut-off is lesser than d, then this algorithm may fail. 

Tokens are: 
>> ['If', 'the', 'ideal', 'cut', '-off', 'is', 'd', ',', 'and', 'if', 'chosen', 'cut', '-off', 'is', 'lesser', 'than', 'd', ',', 'then', 'this', 'algorithm', 'may', 'fail', '.'] 

 UPOS tags are: 
>> [('If', 'SCONJ'), ('the', 'DET'), ('ideal', 'ADJ'), ('cut', 'NOUN'), ('-off', 'NOUN'), ('is', 'AUX'), ('d', 'NOUN'), (',', 'PUNCT'), ('and', 'CCONJ'), ('if', 'SCONJ'), ('chosen', 'VERB'), ('cut', 'NOUN'), ('-off', 'NOUN'), ('is', 'AUX'), ('lesser', 'ADJ'), ('than', 'ADP'), ('d', 'PROPN'), (',', 'PUNCT'), ('then', 'ADV'), ('this', 'DET'), ('algorithm', 'NOUN'), ('may', 'AUX'), ('fail', 'VERB'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('If', 'IN'), ('the', 'DT'), ('ideal', 'JJ'), ('cut', 'NN'), ('-off', 'NN'), ('is', 'VBZ'), ('d', 'NN'), (',', ','), ('and', 'CC'), ('if', 'IN'), ('chosen', 'VBN'), ('cut', 'NN'), ('-off', 'NN'), ('is', 'VBZ'), ('lesser', 'JJR'), ('than', 'IN'), ('d', 'NNP'), (',', ','), ('then', 'RB'), ('this', 'DT'), ('algorithm', 'NN'), ('may', 'MD'), ('fail', 'VB'), ('.', '.')] 

 Lemmas are: 
>> [('If', 'if'), ('the', 'the'), ('ideal', 'ideal'), ('cut', 'cut'), ('-off', '-off'), ('is', 'be'), ('d', 'd'), (',', ','), ('and', 'and'), ('if', 'if'), ('chosen', 'choose'), ('cut', 'cut'), ('-off', '-off'), ('is', 'be'), ('lesser', 'less'), ('than', 'than'), ('d', 'd'), (',', ','), ('then', 'then'), ('this', 'this'), ('algorithm', 'algorithm'), ('may', 'may'), ('fail', 'fail'), ('.', '.')] 

 Dependency tags are: 
>> [(('If', 'd'), 'mark'), (('the', '-off'), 'det'), (('ideal', '-off'), 'amod'), (('cut', '-off'), 'compound'), (('-off', 'd'), 'nsubj'), (('is', 'd'), 'cop'), (('d', 'fail'), 'advcl'), ((',', 'lesser'), 'punct'), (('and', 'lesser'), 'cc'), (('if', 'chosen'), 'mark'), (('chosen', 'lesser'), 'advcl'), (('cut', '-off'), 'compound'), (('-off', 'lesser'), 'nsubj'), (('is', 'lesser'), 'cop'), (('lesser', 'fail'), 'advcl'), (('than', 'd'), 'case'), (('d', 'lesser'), 'obl'), ((',', 'fail'), 'punct'), (('then', 'fail'), 'advmod'), (('this', 'algorithm'), 'det'), (('algorithm', 'fail'), 'nsubj'), (('may', 'fail'), 'aux'), (('fail', 'root'), 'root'), (('.', 'fail'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 47 ===========================

 If chosen cut-off is more than d, then execution time increases. 

Tokens are: 
>> ['If', 'chosen', 'cut', '-off', 'is', 'more', 'than', 'd', ',', 'then', 'execution', 'time', 'increases', '.'] 

 UPOS tags are: 
>> [('If', 'SCONJ'), ('chosen', 'VERB'), ('cut', 'NOUN'), ('-off', 'NOUN'), ('is', 'AUX'), ('more', 'ADJ'), ('than', 'ADP'), ('d', 'NOUN'), (',', 'PUNCT'), ('then', 'ADV'), ('execution', 'NOUN'), ('time', 'NOUN'), ('increases', 'VERB'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('If', 'IN'), ('chosen', 'VBN'), ('cut', 'NN'), ('-off', 'NN'), ('is', 'VBZ'), ('more', 'JJR'), ('than', 'IN'), ('d', 'NN'), (',', ','), ('then', 'RB'), ('execution', 'NN'), ('time', 'NN'), ('increases', 'VBZ'), ('.', '.')] 

 Lemmas are: 
>> [('If', 'if'), ('chosen', 'choose'), ('cut', 'cut'), ('-off', '-off'), ('is', 'be'), ('more', 'more'), ('than', 'than'), ('d', 'd'), (',', ','), ('then', 'then'), ('execution', 'execution'), ('time', 'time'), ('increases', 'increase'), ('.', '.')] 

 Dependency tags are: 
>> [(('If', 'more'), 'mark'), (('chosen', '-off'), 'amod'), (('cut', '-off'), 'compound'), (('-off', 'more'), 'nsubj'), (('is', 'more'), 'cop'), (('more', 'increases'), 'advcl'), (('than', 'd'), 'case'), (('d', 'more'), 'obl'), ((',', 'increases'), 'punct'), (('then', 'increases'), 'advmod'), (('execution', 'time'), 'compound'), (('time', 'increases'), 'nsubj'), (('increases', 'root'), 'root'), (('.', 'increases'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 48 ===========================

 Its complexity depends on the number of paths. 

Tokens are: 
>> ['Its', 'complexity', 'depends', 'on', 'the', 'number', 'of', 'paths', '.'] 

 UPOS tags are: 
>> [('Its', 'PRON'), ('complexity', 'NOUN'), ('depends', 'VERB'), ('on', 'ADP'), ('the', 'DET'), ('number', 'NOUN'), ('of', 'ADP'), ('paths', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Its', 'PRP$'), ('complexity', 'NN'), ('depends', 'VBZ'), ('on', 'IN'), ('the', 'DT'), ('number', 'NN'), ('of', 'IN'), ('paths', 'NNS'), ('.', '.')] 

 Lemmas are: 
>> [('Its', 'its'), ('complexity', 'complexity'), ('depends', 'depend'), ('on', 'on'), ('the', 'the'), ('number', 'number'), ('of', 'of'), ('paths', 'path'), ('.', '.')] 

 Dependency tags are: 
>> [(('Its', 'complexity'), 'nmod:poss'), (('complexity', 'depends'), 'nsubj'), (('depends', 'root'), 'root'), (('on', 'number'), 'case'), (('the', 'number'), 'det'), (('number', 'depends'), 'obl'), (('of', 'paths'), 'case'), (('paths', 'number'), 'nmod'), (('.', 'depends'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 49 ===========================

 It cannot check duplicate nodes. 

Tokens are: 
>> ['It', 'cannot', 'check', 'duplicate', 'nodes', '.'] 

 UPOS tags are: 
>> [('It', 'PRON'), ('cannot', 'AUX'), ('check', 'VERB'), ('duplicate', 'NOUN'), ('nodes', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('It', 'PRP'), ('cannot', 'MD'), ('check', 'VB'), ('duplicate', 'NN'), ('nodes', 'NNS'), ('.', '.')] 

 Lemmas are: 
>> [('It', 'it'), ('cannot', 'cannot'), ('check', 'check'), ('duplicate', 'duplicate'), ('nodes', 'node'), ('.', '.')] 

 Dependency tags are: 
>> [(('It', 'check'), 'nsubj'), (('cannot', 'check'), 'aux'), (('check', 'root'), 'root'), (('duplicate', 'nodes'), 'compound'), (('nodes', 'check'), 'obj'), (('.', 'check'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 50 ===========================

 Bidirectional Search 

Tokens are: 
>> ['Bidirectional', 'Search'] 

 UPOS tags are: 
>> [('Bidirectional', 'ADJ'), ('Search', 'NOUN')] 

 XPOS tags are: 
>> [('Bidirectional', 'JJ'), ('Search', 'NN')] 

 Lemmas are: 
>> [('Bidirectional', 'bidirectional'), ('Search', 'search')] 

 Dependency tags are: 
>> [(('Bidirectional', 'Search'), 'amod'), (('Search', 'root'), 'root')]

 Named Entities are: 
>> []

========================== Sentence 51 ===========================

 It searches forward from initial state and backward from goal state till both meet to identify a common state. 

Tokens are: 
>> ['It', 'searches', 'forward', 'from', 'initial', 'state', 'and', 'backward', 'from', 'goal', 'state', 'till', 'both', 'meet', 'to', 'identify', 'a', 'common', 'state', '.'] 

 UPOS tags are: 
>> [('It', 'PRON'), ('searches', 'VERB'), ('forward', 'ADV'), ('from', 'ADP'), ('initial', 'ADJ'), ('state', 'NOUN'), ('and', 'CCONJ'), ('backward', 'ADV'), ('from', 'ADP'), ('goal', 'NOUN'), ('state', 'NOUN'), ('till', 'SCONJ'), ('both', 'DET'), ('meet', 'VERB'), ('to', 'PART'), ('identify', 'VERB'), ('a', 'DET'), ('common', 'ADJ'), ('state', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('It', 'PRP'), ('searches', 'VBZ'), ('forward', 'RB'), ('from', 'IN'), ('initial', 'JJ'), ('state', 'NN'), ('and', 'CC'), ('backward', 'RB'), ('from', 'IN'), ('goal', 'NN'), ('state', 'NN'), ('till', 'IN'), ('both', 'DT'), ('meet', 'VBP'), ('to', 'TO'), ('identify', 'VB'), ('a', 'DT'), ('common', 'JJ'), ('state', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('It', 'it'), ('searches', 'search'), ('forward', 'forward'), ('from', 'from'), ('initial', 'initial'), ('state', 'state'), ('and', 'and'), ('backward', 'backward'), ('from', 'from'), ('goal', 'goal'), ('state', 'state'), ('till', 'till'), ('both', 'both'), ('meet', 'meet'), ('to', 'to'), ('identify', 'identify'), ('a', 'a'), ('common', 'common'), ('state', 'state'), ('.', '.')] 

 Dependency tags are: 
>> [(('It', 'searches'), 'nsubj'), (('searches', 'root'), 'root'), (('forward', 'searches'), 'advmod'), (('from', 'state'), 'case'), (('initial', 'state'), 'amod'), (('state', 'searches'), 'obl'), (('and', 'backward'), 'cc'), (('backward', 'state'), 'conj'), (('from', 'state'), 'case'), (('goal', 'state'), 'compound'), (('state', 'searches'), 'obl'), (('till', 'meet'), 'mark'), (('both', 'meet'), 'nsubj'), (('meet', 'searches'), 'advcl'), (('to', 'identify'), 'mark'), (('identify', 'meet'), 'xcomp'), (('a', 'state'), 'det'), (('common', 'state'), 'amod'), (('state', 'identify'), 'obj'), (('.', 'searches'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 52 ===========================

 The path from initial state is concatenated with the inverse path from the goal state. 

Tokens are: 
>> ['The', 'path', 'from', 'initial', 'state', 'is', 'concatenated', 'with', 'the', 'inverse', 'path', 'from', 'the', 'goal', 'state', '.'] 

 UPOS tags are: 
>> [('The', 'DET'), ('path', 'NOUN'), ('from', 'ADP'), ('initial', 'ADJ'), ('state', 'NOUN'), ('is', 'AUX'), ('concatenated', 'VERB'), ('with', 'ADP'), ('the', 'DET'), ('inverse', 'ADJ'), ('path', 'NOUN'), ('from', 'ADP'), ('the', 'DET'), ('goal', 'NOUN'), ('state', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('The', 'DT'), ('path', 'NN'), ('from', 'IN'), ('initial', 'JJ'), ('state', 'NN'), ('is', 'VBZ'), ('concatenated', 'VBN'), ('with', 'IN'), ('the', 'DT'), ('inverse', 'JJ'), ('path', 'NN'), ('from', 'IN'), ('the', 'DT'), ('goal', 'NN'), ('state', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('The', 'the'), ('path', 'path'), ('from', 'from'), ('initial', 'initial'), ('state', 'state'), ('is', 'be'), ('concatenated', 'concatenate'), ('with', 'with'), ('the', 'the'), ('inverse', 'inverse'), ('path', 'path'), ('from', 'from'), ('the', 'the'), ('goal', 'goal'), ('state', 'state'), ('.', '.')] 

 Dependency tags are: 
>> [(('The', 'path'), 'det'), (('path', 'concatenated'), 'nsubj:pass'), (('from', 'state'), 'case'), (('initial', 'state'), 'amod'), (('state', 'path'), 'nmod'), (('is', 'concatenated'), 'aux:pass'), (('concatenated', 'root'), 'root'), (('with', 'path'), 'case'), (('the', 'path'), 'det'), (('inverse', 'path'), 'amod'), (('path', 'concatenated'), 'obl'), (('from', 'state'), 'case'), (('the', 'state'), 'det'), (('goal', 'state'), 'compound'), (('state', 'path'), 'nmod'), (('.', 'concatenated'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 53 ===========================

 Each search is done only up to half of the total path. 

Tokens are: 
>> ['Each', 'search', 'is', 'done', 'only', 'up', 'to', 'half', 'of', 'the', 'total', 'path', '.'] 

 UPOS tags are: 
>> [('Each', 'DET'), ('search', 'NOUN'), ('is', 'AUX'), ('done', 'VERB'), ('only', 'ADV'), ('up', 'ADP'), ('to', 'ADP'), ('half', 'NOUN'), ('of', 'ADP'), ('the', 'DET'), ('total', 'ADJ'), ('path', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Each', 'DT'), ('search', 'NN'), ('is', 'VBZ'), ('done', 'VBN'), ('only', 'RB'), ('up', 'RP'), ('to', 'IN'), ('half', 'NN'), ('of', 'IN'), ('the', 'DT'), ('total', 'JJ'), ('path', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('Each', 'each'), ('search', 'search'), ('is', 'be'), ('done', 'do'), ('only', 'only'), ('up', 'up'), ('to', 'to'), ('half', 'half'), ('of', 'of'), ('the', 'the'), ('total', 'total'), ('path', 'path'), ('.', '.')] 

 Dependency tags are: 
>> [(('Each', 'search'), 'det'), (('search', 'done'), 'nsubj:pass'), (('is', 'done'), 'aux:pass'), (('done', 'root'), 'root'), (('only', 'up'), 'advmod'), (('up', 'done'), 'compound:prt'), (('to', 'half'), 'case'), (('half', 'done'), 'obl'), (('of', 'path'), 'case'), (('the', 'path'), 'det'), (('total', 'path'), 'amod'), (('path', 'half'), 'nmod'), (('.', 'done'), 'punct')]

 Named Entities are: 
>> [('only up to half', 'CARDINAL')]

========================== Sentence 54 ===========================

 Uniform Cost Search Sorting is done in increasing cost of the path to a node. 

Tokens are: 
>> ['Uniform', 'Cost', 'Search', 'Sorting', 'is', 'done', 'in', 'increasing', 'cost', 'of', 'the', 'path', 'to', 'a', 'node', '.'] 

 UPOS tags are: 
>> [('Uniform', 'ADJ'), ('Cost', 'NOUN'), ('Search', 'NOUN'), ('Sorting', 'NOUN'), ('is', 'AUX'), ('done', 'VERB'), ('in', 'SCONJ'), ('increasing', 'VERB'), ('cost', 'NOUN'), ('of', 'ADP'), ('the', 'DET'), ('path', 'NOUN'), ('to', 'ADP'), ('a', 'DET'), ('node', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('Uniform', 'JJ'), ('Cost', 'NN'), ('Search', 'NN'), ('Sorting', 'NN'), ('is', 'VBZ'), ('done', 'VBN'), ('in', 'IN'), ('increasing', 'VBG'), ('cost', 'NN'), ('of', 'IN'), ('the', 'DT'), ('path', 'NN'), ('to', 'IN'), ('a', 'DT'), ('node', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('Uniform', 'uniform'), ('Cost', 'Cost'), ('Search', 'search'), ('Sorting', 'sorting'), ('is', 'be'), ('done', 'do'), ('in', 'in'), ('increasing', 'increase'), ('cost', 'cost'), ('of', 'of'), ('the', 'the'), ('path', 'path'), ('to', 'to'), ('a', 'a'), ('node', 'node'), ('.', '.')] 

 Dependency tags are: 
>> [(('Uniform', 'Sorting'), 'amod'), (('Cost', 'Sorting'), 'compound'), (('Search', 'Sorting'), 'compound'), (('Sorting', 'done'), 'nsubj:pass'), (('is', 'done'), 'aux:pass'), (('done', 'root'), 'root'), (('in', 'cost'), 'case'), (('increasing', 'cost'), 'amod'), (('cost', 'done'), 'obl'), (('of', 'path'), 'case'), (('the', 'path'), 'det'), (('path', 'cost'), 'nmod'), (('to', 'node'), 'case'), (('a', 'node'), 'det'), (('node', 'path'), 'nmod'), (('.', 'done'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 55 ===========================

 It always expands the least cost node. 

Tokens are: 
>> ['It', 'always', 'expands', 'the', 'least', 'cost', 'node', '.'] 

 UPOS tags are: 
>> [('It', 'PRON'), ('always', 'ADV'), ('expands', 'VERB'), ('the', 'DET'), ('least', 'ADJ'), ('cost', 'NOUN'), ('node', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('It', 'PRP'), ('always', 'RB'), ('expands', 'VBZ'), ('the', 'DT'), ('least', 'JJS'), ('cost', 'NN'), ('node', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('It', 'it'), ('always', 'always'), ('expands', 'expand'), ('the', 'the'), ('least', 'least'), ('cost', 'cost'), ('node', 'node'), ('.', '.')] 

 Dependency tags are: 
>> [(('It', 'expands'), 'nsubj'), (('always', 'expands'), 'advmod'), (('expands', 'root'), 'root'), (('the', 'node'), 'det'), (('least', 'cost'), 'nmod'), (('cost', 'node'), 'compound'), (('node', 'expands'), 'obj'), (('.', 'expands'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 56 ===========================

 It is identical to Breadth First search if each transition has the same cost. 

Tokens are: 
>> ['It', 'is', 'identical', 'to', 'Breadth', 'First', 'search', 'if', 'each', 'transition', 'has', 'the', 'same', 'cost', '.'] 

 UPOS tags are: 
>> [('It', 'PRON'), ('is', 'AUX'), ('identical', 'ADJ'), ('to', 'ADP'), ('Breadth', 'PROPN'), ('First', 'ADJ'), ('search', 'NOUN'), ('if', 'SCONJ'), ('each', 'DET'), ('transition', 'NOUN'), ('has', 'VERB'), ('the', 'DET'), ('same', 'ADJ'), ('cost', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('It', 'PRP'), ('is', 'VBZ'), ('identical', 'JJ'), ('to', 'IN'), ('Breadth', 'NNP'), ('First', 'JJ'), ('search', 'NN'), ('if', 'IN'), ('each', 'DT'), ('transition', 'NN'), ('has', 'VBZ'), ('the', 'DT'), ('same', 'JJ'), ('cost', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('It', 'it'), ('is', 'be'), ('identical', 'identical'), ('to', 'to'), ('Breadth', 'Breadth'), ('First', 'first'), ('search', 'search'), ('if', 'if'), ('each', 'each'), ('transition', 'transition'), ('has', 'have'), ('the', 'the'), ('same', 'same'), ('cost', 'cost'), ('.', '.')] 

 Dependency tags are: 
>> [(('It', 'identical'), 'nsubj'), (('is', 'identical'), 'cop'), (('identical', 'root'), 'root'), (('to', 'search'), 'case'), (('Breadth', 'search'), 'compound'), (('First', 'search'), 'amod'), (('search', 'identical'), 'obl'), (('if', 'has'), 'mark'), (('each', 'transition'), 'det'), (('transition', 'has'), 'nsubj'), (('has', 'identical'), 'advcl'), (('the', 'cost'), 'det'), (('same', 'cost'), 'amod'), (('cost', 'has'), 'obj'), (('.', 'identical'), 'punct')]

 Named Entities are: 
>> [('Breadth First', 'ORG')]

========================== Sentence 57 ===========================

 It explores paths in the increasing order of cost. 

Tokens are: 
>> ['It', 'explores', 'paths', 'in', 'the', 'increasing', 'order', 'of', 'cost', '.'] 

 UPOS tags are: 
>> [('It', 'PRON'), ('explores', 'VERB'), ('paths', 'NOUN'), ('in', 'ADP'), ('the', 'DET'), ('increasing', 'VERB'), ('order', 'NOUN'), ('of', 'ADP'), ('cost', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('It', 'PRP'), ('explores', 'VBZ'), ('paths', 'NNS'), ('in', 'IN'), ('the', 'DT'), ('increasing', 'VBG'), ('order', 'NN'), ('of', 'IN'), ('cost', 'NN'), ('.', '.')] 

 Lemmas are: 
>> [('It', 'it'), ('explores', 'explore'), ('paths', 'path'), ('in', 'in'), ('the', 'the'), ('increasing', 'increase'), ('order', 'order'), ('of', 'of'), ('cost', 'cost'), ('.', '.')] 

 Dependency tags are: 
>> [(('It', 'explores'), 'nsubj'), (('explores', 'root'), 'root'), (('paths', 'explores'), 'obj'), (('in', 'order'), 'case'), (('the', 'order'), 'det'), (('increasing', 'order'), 'amod'), (('order', 'explores'), 'obl'), (('of', 'cost'), 'case'), (('cost', 'order'), 'nmod'), (('.', 'explores'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 58 ===========================

 Disadvantage − 

Tokens are: 
>> ['Disadvantage', '−'] 

 UPOS tags are: 
>> [('Disadvantage', 'NOUN'), ('−', 'PUNCT')] 

 XPOS tags are: 
>> [('Disadvantage', 'NN'), ('−', '.')] 

 Lemmas are: 
>> [('Disadvantage', 'disadvantage'), ('−', "''")] 

 Dependency tags are: 
>> [(('Disadvantage', 'root'), 'root'), (('−', 'Disadvantage'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 59 ===========================

 There can be multiple long paths with the cost ≤ C*. Uniform Cost search must explore them all. 

Tokens are: 
>> ['There', 'can', 'be', 'multiple', 'long', 'paths', 'with', 'the', 'cost', '≤', 'C*.', 'Uniform', 'Cost', 'search', 'must', 'explore', 'them', 'all', '.'] 

 UPOS tags are: 
>> [('There', 'PRON'), ('can', 'AUX'), ('be', 'VERB'), ('multiple', 'ADJ'), ('long', 'ADJ'), ('paths', 'NOUN'), ('with', 'ADP'), ('the', 'DET'), ('cost', 'NOUN'), ('≤', 'NOUN'), ('C*.', 'PROPN'), ('Uniform', 'ADJ'), ('Cost', 'NOUN'), ('search', 'NOUN'), ('must', 'AUX'), ('explore', 'VERB'), ('them', 'PRON'), ('all', 'DET'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('There', 'EX'), ('can', 'MD'), ('be', 'VB'), ('multiple', 'JJ'), ('long', 'JJ'), ('paths', 'NNS'), ('with', 'IN'), ('the', 'DT'), ('cost', 'NN'), ('≤', 'NN'), ('C*.', 'NNP'), ('Uniform', 'JJ'), ('Cost', 'NN'), ('search', 'NN'), ('must', 'MD'), ('explore', 'VB'), ('them', 'PRP'), ('all', 'DT'), ('.', '.')] 

 Lemmas are: 
>> [('There', 'there'), ('can', 'can'), ('be', 'be'), ('multiple', 'multiple'), ('long', 'long'), ('paths', 'path'), ('with', 'with'), ('the', 'the'), ('cost', 'cost'), ('≤', '≤'), ('C*.', 'C*.'), ('Uniform', 'uniform'), ('Cost', 'Cost'), ('search', 'search'), ('must', 'must'), ('explore', 'explore'), ('them', 'they'), ('all', 'all'), ('.', '.')] 

 Dependency tags are: 
>> [(('There', 'be'), 'expl'), (('can', 'be'), 'aux'), (('be', 'root'), 'root'), (('multiple', 'paths'), 'amod'), (('long', 'paths'), 'amod'), (('paths', 'be'), 'nsubj'), (('with', 'cost'), 'case'), (('the', 'cost'), 'det'), (('cost', 'paths'), 'nmod'), (('≤', 'explore'), 'nsubj'), (('C*.', 'search'), 'compound'), (('Uniform', 'search'), 'amod'), (('Cost', 'search'), 'compound'), (('search', 'explore'), 'nsubj'), (('must', 'explore'), 'aux'), (('explore', 'paths'), 'acl:relcl'), (('them', 'explore'), 'obj'), (('all', 'them'), 'det'), (('.', 'be'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 60 ===========================

 Iterative Deepening Depth-First Search 

Tokens are: 
>> ['Iterative', 'Deepening', 'Depth-', 'First', 'Search'] 

 UPOS tags are: 
>> [('Iterative', 'ADJ'), ('Deepening', 'VERB'), ('Depth-', 'PROPN'), ('First', 'ADJ'), ('Search', 'NOUN')] 

 XPOS tags are: 
>> [('Iterative', 'JJ'), ('Deepening', 'VBG'), ('Depth-', 'NNP'), ('First', 'JJ'), ('Search', 'NN')] 

 Lemmas are: 
>> [('Iterative', 'iterative'), ('Deepening', 'deepen'), ('Depth-', 'Depth-'), ('First', 'first'), ('Search', 'search')] 

 Dependency tags are: 
>> [(('Iterative', 'Deepening'), 'amod'), (('Deepening', 'Search'), 'amod'), (('Depth-', 'Search'), 'compound'), (('First', 'Search'), 'amod'), (('Search', 'root'), 'root')]

 Named Entities are: 
>> []

========================== Sentence 61 ===========================

 It performs depth-first search to level 1, starts over, executes a complete depth-first search to level 2, and continues in such way till the solution is found. 

Tokens are: 
>> ['It', 'performs', 'depth-first', 'search', 'to', 'level', '1', ',', 'starts', 'over', ',', 'executes', 'a', 'complete', 'depth-first', 'search', 'to', 'level', '2', ',', 'and', 'continues', 'in', 'such', 'way', 'till', 'the', 'solution', 'is', 'found', '.'] 

 UPOS tags are: 
>> [('It', 'PRON'), ('performs', 'VERB'), ('depth-first', 'ADJ'), ('search', 'NOUN'), ('to', 'ADP'), ('level', 'NOUN'), ('1', 'NUM'), (',', 'PUNCT'), ('starts', 'VERB'), ('over', 'ADV'), (',', 'PUNCT'), ('executes', 'VERB'), ('a', 'DET'), ('complete', 'ADJ'), ('depth-first', 'NOUN'), ('search', 'NOUN'), ('to', 'ADP'), ('level', 'VERB'), ('2', 'NUM'), (',', 'PUNCT'), ('and', 'CCONJ'), ('continues', 'VERB'), ('in', 'ADP'), ('such', 'ADJ'), ('way', 'NOUN'), ('till', 'SCONJ'), ('the', 'DET'), ('solution', 'NOUN'), ('is', 'AUX'), ('found', 'VERB'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('It', 'PRP'), ('performs', 'VBZ'), ('depth-first', 'JJ'), ('search', 'NN'), ('to', 'IN'), ('level', 'NN'), ('1', 'CD'), (',', ','), ('starts', 'VBZ'), ('over', 'RB'), (',', ','), ('executes', 'VBZ'), ('a', 'DT'), ('complete', 'JJ'), ('depth-first', 'NN'), ('search', 'NN'), ('to', 'IN'), ('level', 'VB'), ('2', 'CD'), (',', ','), ('and', 'CC'), ('continues', 'VBZ'), ('in', 'IN'), ('such', 'JJ'), ('way', 'NN'), ('till', 'IN'), ('the', 'DT'), ('solution', 'NN'), ('is', 'VBZ'), ('found', 'VBN'), ('.', '.')] 

 Lemmas are: 
>> [('It', 'it'), ('performs', 'perform'), ('depth-first', 'depth-first'), ('search', 'search'), ('to', 'to'), ('level', 'level'), ('1', '1'), (',', ','), ('starts', 'start'), ('over', 'over'), (',', ','), ('executes', 'execute'), ('a', 'a'), ('complete', 'complete'), ('depth-first', 'depth-first'), ('search', 'search'), ('to', 'to'), ('level', 'level'), ('2', '2'), (',', ','), ('and', 'and'), ('continues', 'continue'), ('in', 'in'), ('such', 'such'), ('way', 'way'), ('till', 'till'), ('the', 'the'), ('solution', 'solution'), ('is', 'be'), ('found', 'find'), ('.', '.')] 

 Dependency tags are: 
>> [(('It', 'performs'), 'nsubj'), (('performs', 'root'), 'root'), (('depth-first', 'search'), 'amod'), (('search', 'performs'), 'obj'), (('to', 'level'), 'case'), (('level', 'performs'), 'obl'), (('1', 'level'), 'nummod'), ((',', 'starts'), 'punct'), (('starts', 'performs'), 'conj'), (('over', 'starts'), 'advmod'), ((',', 'executes'), 'punct'), (('executes', 'performs'), 'conj'), (('a', 'search'), 'det'), (('complete', 'search'), 'amod'), (('depth-first', 'search'), 'compound'), (('search', 'executes'), 'obj'), (('to', 'level'), 'case'), (('level', 'search'), 'nmod'), (('2', 'level'), 'nummod'), ((',', 'continues'), 'punct'), (('and', 'continues'), 'cc'), (('continues', 'performs'), 'conj'), (('in', 'way'), 'case'), (('such', 'way'), 'amod'), (('way', 'continues'), 'obl'), (('till', 'found'), 'mark'), (('the', 'solution'), 'det'), (('solution', 'found'), 'nsubj:pass'), (('is', 'found'), 'aux:pass'), (('found', 'continues'), 'advcl'), (('.', 'performs'), 'punct')]

 Named Entities are: 
>> [('1', 'CARDINAL'), ('2', 'CARDINAL')]

========================== Sentence 62 ===========================

 It never creates a node until all lower nodes are generated. 

Tokens are: 
>> ['It', 'never', 'creates', 'a', 'node', 'until', 'all', 'lower', 'nodes', 'are', 'generated', '.'] 

 UPOS tags are: 
>> [('It', 'PRON'), ('never', 'ADV'), ('creates', 'VERB'), ('a', 'DET'), ('node', 'NOUN'), ('until', 'SCONJ'), ('all', 'DET'), ('lower', 'ADJ'), ('nodes', 'NOUN'), ('are', 'AUX'), ('generated', 'VERB'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('It', 'PRP'), ('never', 'RB'), ('creates', 'VBZ'), ('a', 'DT'), ('node', 'NN'), ('until', 'IN'), ('all', 'DT'), ('lower', 'JJR'), ('nodes', 'NNS'), ('are', 'VBP'), ('generated', 'VBN'), ('.', '.')] 

 Lemmas are: 
>> [('It', 'it'), ('never', 'never'), ('creates', 'create'), ('a', 'a'), ('node', 'node'), ('until', 'until'), ('all', 'all'), ('lower', 'low'), ('nodes', 'node'), ('are', 'be'), ('generated', 'generate'), ('.', '.')] 

 Dependency tags are: 
>> [(('It', 'creates'), 'nsubj'), (('never', 'creates'), 'advmod'), (('creates', 'root'), 'root'), (('a', 'node'), 'det'), (('node', 'creates'), 'obj'), (('until', 'generated'), 'mark'), (('all', 'nodes'), 'det'), (('lower', 'nodes'), 'amod'), (('nodes', 'generated'), 'nsubj:pass'), (('are', 'generated'), 'aux:pass'), (('generated', 'creates'), 'advcl'), (('.', 'creates'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 63 ===========================

 It only saves a stack of nodes. 

Tokens are: 
>> ['It', 'only', 'saves', 'a', 'stack', 'of', 'nodes', '.'] 

 UPOS tags are: 
>> [('It', 'PRON'), ('only', 'ADV'), ('saves', 'VERB'), ('a', 'DET'), ('stack', 'NOUN'), ('of', 'ADP'), ('nodes', 'NOUN'), ('.', 'PUNCT')] 

 XPOS tags are: 
>> [('It', 'PRP'), ('only', 'RB'), ('saves', 'VBZ'), ('a', 'DT'), ('stack', 'NN'), ('of', 'IN'), ('nodes', 'NNS'), ('.', '.')] 

 Lemmas are: 
>> [('It', 'it'), ('only', 'only'), ('saves', 'save'), ('a', 'a'), ('stack', 'stack'), ('of', 'of'), ('nodes', 'node'), ('.', '.')] 

 Dependency tags are: 
>> [(('It', 'saves'), 'nsubj'), (('only', 'saves'), 'advmod'), (('saves', 'root'), 'root'), (('a', 'stack'), 'det'), (('stack', 'saves'), 'obj'), (('of', 'nodes'), 'case'), (('nodes', 'stack'), 'nmod'), (('.', 'saves'), 'punct')]

 Named Entities are: 
>> []

========================== Sentence 64 ===========================

 The algorithm ends when it finds a solution at depth d. 

Tokens are: 
>> ['The', 'algorithm', 'ends', 'when', 'it', 'finds', 'a', 'solution', 'at', 'depth', 'd.'] 

 UPOS tags are: 
>> [('The', 'DET'), ('algorithm', 'NOUN'), ('ends', 'VERB'), ('when', 'SCONJ'), ('it', 'PRON'), ('finds', 'VERB'), ('a', 'DET'), ('solution', 'NOUN'), ('at', 'ADP'), ('depth', 'NOUN'), ('d.', 'NOUN')] 

 XPOS tags are: 
>> [('The', 'DT'), ('algorithm', 'NN'), ('ends', 'VBZ'), ('when', 'WRB'), ('it', 'PRP'), ('finds', 'VBZ'), ('a', 'DT'), ('solution', 'NN'), ('at', 'IN'), ('depth', 'NN'), ('d.', 'NN')] 

 Lemmas are: 
>> [('The', 'the'), ('algorithm', 'algorithm'), ('ends', 'end'), ('when', 'when'), ('it', 'it'), ('finds', 'find'), ('a', 'a'), ('solution', 'solution'), ('at', 'at'), ('depth', 'depth'), ('d.', 'die')] 

 Dependency tags are: 
>> [(('The', 'algorithm'), 'det'), (('algorithm', 'ends'), 'nsubj'), (('ends', 'root'), 'root'), (('when', 'finds'), 'mark'), (('it', 'finds'), 'nsubj'), (('finds', 'ends'), 'advcl'), (('a', 'solution'), 'det'), (('solution', 'finds'), 'obj'), (('at', 'depth'), 'case'), (('depth', 'solution'), 'nmod'), (('d.', 'solution'), 'nmod')]

 Named Entities are: 
>> []

========================== Sentence 65 ===========================

 The number of nodes created at depth d is bd and at depth d-1 is bd-1. 

Tokens are: 
>> ['The', 'number', 'of', 'nodes', 'created', 'at', 'depth', 'd', 'is', 'bd', 'and', 'at', 'depth', 'd-', '1', 'is', 'bd', '-', '1.'] 

 UPOS tags are: 
>> [('The', 'DET'), ('number', 'NOUN'), ('of', 'ADP'), ('nodes', 'NOUN'), ('created', 'VERB'), ('at', 'ADP'), ('depth', 'NOUN'), ('d', 'NOUN'), ('is', 'AUX'), ('bd', 'PROPN'), ('and', 'CCONJ'), ('at', 'ADP'), ('depth', 'NOUN'), ('d-', 'NOUN'), ('1', 'NUM'), ('is', 'AUX'), ('bd', 'PROPN'), ('-', 'PUNCT'), ('1.', 'NUM')] 

 XPOS tags are: 
>> [('The', 'DT'), ('number', 'NN'), ('of', 'IN'), ('nodes', 'NNS'), ('created', 'VBN'), ('at', 'IN'), ('depth', 'NN'), ('d', 'NN'), ('is', 'VBZ'), ('bd', 'NNP'), ('and', 'CC'), ('at', 'IN'), ('depth', 'NN'), ('d-', 'NN'), ('1', 'CD'), ('is', 'VBZ'), ('bd', 'NNP'), ('-', ','), ('1.', 'CD')] 

 Lemmas are: 
>> [('The', 'the'), ('number', 'number'), ('of', 'of'), ('nodes', 'node'), ('created', 'create'), ('at', 'at'), ('depth', 'depth'), ('d', 'd'), ('is', 'be'), ('bd', 'bd'), ('and', 'and'), ('at', 'at'), ('depth', 'depth'), ('d-', 'd-'), ('1', '1'), ('is', 'be'), ('bd', 'bd'), ('-', '-'), ('1.', '1.')] 

 Dependency tags are: 
>> [(('The', 'number'), 'det'), (('number', 'bd'), 'nsubj'), (('of', 'nodes'), 'case'), (('nodes', 'number'), 'nmod'), (('created', 'nodes'), 'acl'), (('at', 'd'), 'case'), (('depth', 'd'), 'compound'), (('d', 'created'), 'obl'), (('is', 'bd'), 'cop'), (('bd', 'root'), 'root'), (('and', 'bd'), 'cc'), (('at', 'depth'), 'case'), (('depth', 'bd'), 'obl'), (('d-', 'bd'), 'nsubj'), (('1', 'bd'), 'nsubj'), (('is', 'bd'), 'cop'), (('bd', 'bd'), 'conj'), (('-', 'bd'), 'punct'), (('1.', 'bd'), 'appos')]

 Named Entities are: 
>> [('1', 'CARDINAL'), ('1.', 'CARDINAL')]