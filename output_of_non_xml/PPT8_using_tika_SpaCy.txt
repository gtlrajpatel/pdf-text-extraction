				 *** Text Processing using Spacy *** 


============================ Sentence 1 =============================

PowerPoint Presentation  Unit – 1 Introduction to Compiler Design dixita.kagathara@darshan.ac.in +91 - 97277 47317 (CE Department) 


>> Tokens are: 
[PowerPoint, Presentation,  , Unit, –, 1, Introduction, Compiler, Design, dixita.kagathara@darshan.ac.in, +91, -, 97277, 47317, (, CE, Department, )] 

>> PoS Tags are: 
[('PowerPoint', 'PROPN'), ('Presentation', 'PROPN'), (' ', 'SPACE'), ('Unit', 'NOUN'), ('–', 'PUNCT'), ('1', 'NUM'), ('Introduction', 'NOUN'), ('Compiler', 'PROPN'), ('Design', 'PROPN'), ('dixita.kagathara@darshan.ac.in', 'PROPN'), ('+91', 'NOUN'), ('-', 'PUNCT'), ('97277', 'NUM'), ('47317', 'NUM'), ('(', 'PUNCT'), ('CE', 'PROPN'), ('Department', 'PROPN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('PowerPoint', 'compound'), ('Presentation', 'ROOT'), (' ', 'compound'), ('Unit', 'appos'), ('–', 'punct'), ('1', 'nummod'), ('Introduction', 'appos'), ('Compiler', 'compound'), ('Design', 'pobj'), ('dixita.kagathara@darshan.ac.in', 'nummod'), ('+91', 'npadvmod'), ('-', 'punct'), ('97277', 'appos'), ('47317', 'nummod'), ('(', 'punct'), ('CE', 'compound'), ('Department', 'appos'), (')', 'punct')]

>> Bigrams: 
[[PowerPoint, Presentation], [Presentation,  ], [ , Unit], [Unit, –], [–, 1], [1, Introduction], [Introduction, Compiler], [Compiler, Design], [Design, dixita.kagathara@darshan.ac.in], [dixita.kagathara@darshan.ac.in, +91], [+91, -], [-, 97277], [97277, 47317], [47317, (], [(, CE], [CE, Department], [Department, )]]

>> Trigrams: 
[[PowerPoint, Presentation,  ], [Presentation,  , Unit], [ , Unit, –], [Unit, –, 1], [–, 1, Introduction], [1, Introduction, Compiler], [Introduction, Compiler, Design], [Compiler, Design, dixita.kagathara@darshan.ac.in], [Design, dixita.kagathara@darshan.ac.in, +91], [dixita.kagathara@darshan.ac.in, +91, -], [+91, -, 97277], [-, 97277, 47317], [97277, 47317, (], [47317, (, CE], [(, CE, Department], [CE, Department, )]]

>> Noun Phrases are: 
[PowerPoint Presentation,  Unit, 1 Introduction, Compiler Design, (CE Department]

>> Named Entities are: 
[('CE Department)', 'ORG')]


============================ Sentence 2 =============================

Computer Engineering Department Prof. Dixita B. Kagathara Compiler Design (CD) GTU # 2170701   Darshan Institute of Engineering & Technology, Rajkot     Looping Topics to be covered   


>> Tokens are: 
[Computer, Engineering, Department, Prof., Dixita, B., Kagathara, Compiler, Design, (, CD, ), GTU, #, 2170701,   , Darshan, Institute, Engineering, &, Technology, ,, Rajkot,    , , Looping, Topics, covered,  ] 

>> PoS Tags are: 
[('Computer', 'PROPN'), ('Engineering', 'PROPN'), ('Department', 'PROPN'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B.', 'PROPN'), ('Kagathara', 'PROPN'), ('Compiler', 'PROPN'), ('Design', 'PROPN'), ('(', 'PUNCT'), ('CD', 'PROPN'), (')', 'PUNCT'), ('GTU', 'NOUN'), ('#', 'NOUN'), ('2170701', 'NUM'), ('  ', 'SPACE'), ('Darshan', 'PROPN'), ('Institute', 'PROPN'), ('Engineering', 'PROPN'), ('&', 'CCONJ'), ('Technology', 'PROPN'), (',', 'PUNCT'), ('Rajkot', 'PROPN'), ('   ', 'SPACE'), ('\uf050', 'PROPN'), ('Looping', 'VERB'), ('Topics', 'PROPN'), ('covered', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Computer', 'compound'), ('Engineering', 'compound'), ('Department', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B.', 'compound'), ('Kagathara', 'compound'), ('Compiler', 'compound'), ('Design', 'ROOT'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('GTU', 'appos'), ('#', 'nmod'), ('2170701', 'nummod'), ('  ', 'appos'), ('Darshan', 'compound'), ('Institute', 'appos'), ('Engineering', 'pobj'), ('&', 'cc'), ('Technology', 'conj'), (',', 'punct'), ('Rajkot', 'appos'), ('   ', 'appos'), ('\uf050', 'appos'), ('Looping', 'advcl'), ('Topics', 'dobj'), ('covered', 'ccomp'), (' ', 'punct')]

>> Bigrams: 
[[Computer, Engineering], [Engineering, Department], [Department, Prof.], [Prof., Dixita], [Dixita, B.], [B., Kagathara], [Kagathara, Compiler], [Compiler, Design], [Design, (], [(, CD], [CD, )], [), GTU], [GTU, #], [#, 2170701], [2170701,   ], [  , Darshan], [Darshan, Institute], [Institute, Engineering], [Engineering, &], [&, Technology], [Technology, ,], [,, Rajkot], [Rajkot,    ], [   , ], [, Looping], [Looping, Topics], [Topics, covered], [covered,  ]]

>> Trigrams: 
[[Computer, Engineering, Department], [Engineering, Department, Prof.], [Department, Prof., Dixita], [Prof., Dixita, B.], [Dixita, B., Kagathara], [B., Kagathara, Compiler], [Kagathara, Compiler, Design], [Compiler, Design, (], [Design, (, CD], [(, CD, )], [CD, ), GTU], [), GTU, #], [GTU, #, 2170701], [#, 2170701,   ], [2170701,   , Darshan], [  , Darshan, Institute], [Darshan, Institute, Engineering], [Institute, Engineering, &], [Engineering, &, Technology], [&, Technology, ,], [Technology, ,, Rajkot], [,, Rajkot,    ], [Rajkot,    , ], [   , , Looping], [, Looping, Topics], [Looping, Topics, covered], [Topics, covered,  ]]

>> Noun Phrases are: 
[Computer Engineering Department Prof. Dixita B. Kagathara Compiler Design, CD, GTU, Darshan Institute, Engineering, Technology, Rajkot, , Topics]

>> Named Entities are: 
[('Dixita B.', 'PERSON'), ('Darshan Institute of Engineering & Technology', 'ORG'), ('Looping Topics', 'ORG')]


============================ Sentence 3 =============================

Translator Analysis synthesis model of compilation Phases of compiler Grouping of the Phases Difference between compiler & interpreter Context of compiler (Cousins of compiler) 


>> Tokens are: 
[Translator, Analysis, synthesis, model, compilation, Phases, compiler, Grouping, Phases, Difference, compiler, &, interpreter, Context, compiler, (, Cousins, compiler, )] 

>> PoS Tags are: 
[('Translator', 'PROPN'), ('Analysis', 'PROPN'), ('synthesis', 'NOUN'), ('model', 'NOUN'), ('compilation', 'NOUN'), ('Phases', 'PROPN'), ('compiler', 'NOUN'), ('Grouping', 'PROPN'), ('Phases', 'PROPN'), ('Difference', 'NOUN'), ('compiler', 'NOUN'), ('&', 'CCONJ'), ('interpreter', 'NOUN'), ('Context', 'PROPN'), ('compiler', 'NOUN'), ('(', 'PUNCT'), ('Cousins', 'PROPN'), ('compiler', 'NOUN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('Translator', 'compound'), ('Analysis', 'compound'), ('synthesis', 'compound'), ('model', 'ROOT'), ('compilation', 'compound'), ('Phases', 'pobj'), ('compiler', 'pobj'), ('Grouping', 'appos'), ('Phases', 'compound'), ('Difference', 'pobj'), ('compiler', 'pobj'), ('&', 'cc'), ('interpreter', 'conj'), ('Context', 'conj'), ('compiler', 'pobj'), ('(', 'punct'), ('Cousins', 'appos'), ('compiler', 'pobj'), (')', 'punct')]

>> Bigrams: 
[[Translator, Analysis], [Analysis, synthesis], [synthesis, model], [model, compilation], [compilation, Phases], [Phases, compiler], [compiler, Grouping], [Grouping, Phases], [Phases, Difference], [Difference, compiler], [compiler, &], [&, interpreter], [interpreter, Context], [Context, compiler], [compiler, (], [(, Cousins], [Cousins, compiler], [compiler, )]]

>> Trigrams: 
[[Translator, Analysis, synthesis], [Analysis, synthesis, model], [synthesis, model, compilation], [model, compilation, Phases], [compilation, Phases, compiler], [Phases, compiler, Grouping], [compiler, Grouping, Phases], [Grouping, Phases, Difference], [Phases, Difference, compiler], [Difference, compiler, &], [compiler, &, interpreter], [&, interpreter, Context], [interpreter, Context, compiler], [Context, compiler, (], [compiler, (, Cousins], [(, Cousins, compiler], [Cousins, compiler, )]]

>> Noun Phrases are: 
[Translator Analysis synthesis model, compilation Phases, compiler, Grouping, the Phases Difference, compiler, interpreter, Context, compiler, Cousins, compiler]

>> Named Entities are: 
[]


============================ Sentence 4 =============================

Pass structure Types of compiler            Translator   હેલ્લો 


>> Tokens are: 
[Pass, structure, Types, compiler,            , Translator,   , હેલ્લો] 

>> PoS Tags are: 
[('Pass', 'PROPN'), ('structure', 'NOUN'), ('Types', 'NOUN'), ('compiler', 'NOUN'), ('           ', 'SPACE'), ('Translator', 'PROPN'), ('  ', 'SPACE'), ('હેલ્લો', 'NOUN')] 

>> Dependency Tags are: 
[('Pass', 'compound'), ('structure', 'compound'), ('Types', 'ROOT'), ('compiler', 'compound'), ('           ', 'compound'), ('Translator', 'pobj'), ('  ', 'appos'), ('હેલ્લો', 'punct')]

>> Bigrams: 
[[Pass, structure], [structure, Types], [Types, compiler], [compiler,            ], [           , Translator], [Translator,   ], [  , હેલ્લો]]

>> Trigrams: 
[[Pass, structure, Types], [structure, Types, compiler], [Types, compiler,            ], [compiler,            , Translator], [           , Translator,   ], [Translator,   , હેલ્લો]]

>> Noun Phrases are: 
[Pass structure Types, compiler            Translator]

>> Named Entities are: 
[]


============================ Sentence 5 =============================

       Translator A translator is a program that takes one form of program as input and converts it into another form. 


>> Tokens are: 
[       , Translator, translator, program, takes, form, program, input, converts, form, .] 

>> PoS Tags are: 
[('       ', 'SPACE'), ('Translator', 'NOUN'), ('translator', 'NOUN'), ('program', 'NOUN'), ('takes', 'VERB'), ('form', 'NOUN'), ('program', 'NOUN'), ('input', 'NOUN'), ('converts', 'VERB'), ('form', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('       ', 'compound'), ('Translator', 'compound'), ('translator', 'nsubj'), ('program', 'attr'), ('takes', 'relcl'), ('form', 'dobj'), ('program', 'pobj'), ('input', 'pobj'), ('converts', 'conj'), ('form', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[       , Translator], [Translator, translator], [translator, program], [program, takes], [takes, form], [form, program], [program, input], [input, converts], [converts, form], [form, .]]

>> Trigrams: 
[[       , Translator, translator], [Translator, translator, program], [translator, program, takes], [program, takes, form], [takes, form, program], [form, program, input], [program, input, converts], [input, converts, form], [converts, form, .]]

>> Noun Phrases are: 
[       Translator A translator, a program, one form, program, input, it, another form]

>> Named Entities are: 
[('one', 'CARDINAL')]


============================ Sentence 6 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 7 =============================

Types of translators are: Compiler Interpreter Assembler  Error Messages   


>> Tokens are: 
[Types, translators, :, Compiler, Interpreter, Assembler,  , Error, Messages,  ] 

>> PoS Tags are: 
[('Types', 'NOUN'), ('translators', 'NOUN'), (':', 'PUNCT'), ('Compiler', 'PROPN'), ('Interpreter', 'PROPN'), ('Assembler', 'PROPN'), (' ', 'SPACE'), ('Error', 'PROPN'), ('Messages', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Types', 'nsubj'), ('translators', 'pobj'), (':', 'punct'), ('Compiler', 'compound'), ('Interpreter', 'compound'), ('Assembler', 'attr'), (' ', 'appos'), ('Error', 'compound'), ('Messages', 'appos'), (' ', 'punct')]

>> Bigrams: 
[[Types, translators], [translators, :], [:, Compiler], [Compiler, Interpreter], [Interpreter, Assembler], [Assembler,  ], [ , Error], [Error, Messages], [Messages,  ]]

>> Trigrams: 
[[Types, translators, :], [translators, :, Compiler], [:, Compiler, Interpreter], [Compiler, Interpreter, Assembler], [Interpreter, Assembler,  ], [Assembler,  , Error], [ , Error, Messages], [Error, Messages,  ]]

>> Noun Phrases are: 
[Types, translators, Compiler Interpreter Assembler, Error Messages]

>> Named Entities are: 
[]


============================ Sentence 8 =============================

Translator Source Program Target Program (If any)     


>> Tokens are: 
[Translator, Source, Program, Target, Program, (, ),    ] 

>> PoS Tags are: 
[('Translator', 'PROPN'), ('Source', 'PROPN'), ('Program', 'PROPN'), ('Target', 'PROPN'), ('Program', 'PROPN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('   ', 'SPACE')] 

>> Dependency Tags are: 
[('Translator', 'compound'), ('Source', 'compound'), ('Program', 'compound'), ('Target', 'compound'), ('Program', 'ROOT'), ('(', 'punct'), (')', 'punct'), ('   ', 'punct')]

>> Bigrams: 
[[Translator, Source], [Source, Program], [Program, Target], [Target, Program], [Program, (], [(, )], [),    ]]

>> Trigrams: 
[[Translator, Source, Program], [Source, Program, Target], [Program, Target, Program], [Target, Program, (], [Program, (, )], [(, ),    ]]

>> Noun Phrases are: 
[Translator Source Program Target Program]

>> Named Entities are: 
[]


============================ Sentence 9 =============================

Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1 – Introduction to Compiler Design ‹#›   


>> Tokens are: 
[Prof., Dixita, B, Kagathara,  , #, 2170701, (, CD, ),   , ,   , Unit, 1, –, Introduction, Compiler, Design, ‹#›,  ] 

>> PoS Tags are: 
[('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), (' ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Introduction', 'NOUN'), ('Compiler', 'PROPN'), ('Design', 'PROPN'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'nsubj'), (' ', 'appos'), ('#', 'nmod'), ('2170701', 'npadvmod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dep'), ('Unit', 'npadvmod'), ('1', 'nummod'), ('–', 'punct'), ('Introduction', 'appos'), ('Compiler', 'compound'), ('Design', 'pobj'), ('‹#›', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,  ], [ , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Introduction], [Introduction, Compiler], [Compiler, Design], [Design, ‹#›], [‹#›,  ]]

>> Trigrams: 
[[Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,  ], [Kagathara,  , #], [ , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Introduction], [–, Introduction, Compiler], [Introduction, Compiler, Design], [Compiler, Design, ‹#›], [Design, ‹#›,  ]]

>> Noun Phrases are: 
[Prof. Dixita B Kagathara, (CD, Introduction, Compiler Design]

>> Named Entities are: 
[('Dixita', 'PERSON'), ('Kagathara', 'PERSON')]


============================ Sentence 10 =============================

Compiler   


>> Tokens are: 
[Compiler,  ] 

>> PoS Tags are: 
[('Compiler', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Compiler', 'ROOT'), (' ', 'nummod')]

>> Bigrams: 
[[Compiler,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Compiler]

>> Named Entities are: 
[('Compiler', 'WORK_OF_ART')]


============================ Sentence 11 =============================

A compiler is a program that reads a program written in source language and translates it into an equivalent program in target language. 


>> Tokens are: 
[compiler, program, reads, program, written, source, language, translates, equivalent, program, target, language, .] 

>> PoS Tags are: 
[('compiler', 'NOUN'), ('program', 'NOUN'), ('reads', 'VERB'), ('program', 'NOUN'), ('written', 'VERB'), ('source', 'NOUN'), ('language', 'NOUN'), ('translates', 'VERB'), ('equivalent', 'ADJ'), ('program', 'NOUN'), ('target', 'NOUN'), ('language', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('compiler', 'nsubj'), ('program', 'attr'), ('reads', 'relcl'), ('program', 'dobj'), ('written', 'acl'), ('source', 'compound'), ('language', 'pobj'), ('translates', 'conj'), ('equivalent', 'amod'), ('program', 'pobj'), ('target', 'compound'), ('language', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[compiler, program], [program, reads], [reads, program], [program, written], [written, source], [source, language], [language, translates], [translates, equivalent], [equivalent, program], [program, target], [target, language], [language, .]]

>> Trigrams: 
[[compiler, program, reads], [program, reads, program], [reads, program, written], [program, written, source], [written, source, language], [source, language, translates], [language, translates, equivalent], [translates, equivalent, program], [equivalent, program, target], [program, target, language], [target, language, .]]

>> Noun Phrases are: 
[A compiler, a program, a program, source language, it, an equivalent program, target language]

>> Named Entities are: 
[]


============================ Sentence 12 =============================

     Error Messages  Source Program Target Program Compiler void main() { int a=1,b=2,c; c=a+b; printf(“%d”,c); } Source Program 0000 1100 0010 0100 0111 1000 0001 1111 0101 1110 1100 0000 1000 1011 Target Program (If any) 


>> Tokens are: 
[     , Error, Messages,  , Source, Program, Target, Program, Compiler, void, main, (, ), {, int, a=1,b=2,c, ;, c, =, a+b, ;, printf(“%d”,c, ), ;, }, Source, Program, 0000, 1100, 0010, 0100, 0111, 1000, 0001, 1111, 0101, 1110, 1100, 0000, 1000, 1011, Target, Program, (, )] 

>> PoS Tags are: 
[('     ', 'SPACE'), ('Error', 'PROPN'), ('Messages', 'PROPN'), (' ', 'SPACE'), ('Source', 'PROPN'), ('Program', 'PROPN'), ('Target', 'PROPN'), ('Program', 'PROPN'), ('Compiler', 'PROPN'), ('void', 'VERB'), ('main', 'ADJ'), ('(', 'PUNCT'), (')', 'PUNCT'), ('{', 'PUNCT'), ('int', 'NOUN'), ('a=1,b=2,c', 'ADV'), (';', 'PUNCT'), ('c', 'X'), ('=', 'SYM'), ('a+b', 'PROPN'), (';', 'PUNCT'), ('printf(“%d”,c', 'PROPN'), (')', 'PUNCT'), (';', 'PUNCT'), ('}', 'PUNCT'), ('Source', 'PROPN'), ('Program', 'PROPN'), ('0000', 'NUM'), ('1100', 'NUM'), ('0010', 'NUM'), ('0100', 'NUM'), ('0111', 'NUM'), ('1000', 'NUM'), ('0001', 'NUM'), ('1111', 'NUM'), ('0101', 'NUM'), ('1110', 'NUM'), ('1100', 'NUM'), ('0000', 'NUM'), ('1000', 'NUM'), ('1011', 'NUM'), ('Target', 'PROPN'), ('Program', 'PROPN'), ('(', 'PUNCT'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('     ', 'compound'), ('Error', 'compound'), ('Messages', 'compound'), (' ', 'nsubj'), ('Source', 'compound'), ('Program', 'compound'), ('Target', 'compound'), ('Program', 'compound'), ('Compiler', 'nsubj'), ('void', 'ROOT'), ('main', 'dobj'), ('(', 'punct'), (')', 'punct'), ('{', 'punct'), ('int', 'dobj'), ('a=1,b=2,c', 'advmod'), (';', 'punct'), ('c', 'appos'), ('=', 'appos'), ('a+b', 'appos'), (';', 'punct'), ('printf(“%d”,c', 'appos'), (')', 'punct'), (';', 'punct'), ('}', 'punct'), ('Source', 'compound'), ('Program', 'npadvmod'), ('0000', 'nummod'), ('1100', 'npadvmod'), ('0010', 'punct'), ('0100', 'appos'), ('0111', 'appos'), ('1000', 'nummod'), ('0001', 'nummod'), ('1111', 'npadvmod'), ('0101', 'npadvmod'), ('1110', 'appos'), ('1100', 'nummod'), ('0000', 'nummod'), ('1000', 'nummod'), ('1011', 'nummod'), ('Target', 'compound'), ('Program', 'dobj'), ('(', 'punct'), (')', 'punct')]

>> Bigrams: 
[[     , Error], [Error, Messages], [Messages,  ], [ , Source], [Source, Program], [Program, Target], [Target, Program], [Program, Compiler], [Compiler, void], [void, main], [main, (], [(, )], [), {], [{, int], [int, a=1,b=2,c], [a=1,b=2,c, ;], [;, c], [c, =], [=, a+b], [a+b, ;], [;, printf(“%d”,c], [printf(“%d”,c, )], [), ;], [;, }], [}, Source], [Source, Program], [Program, 0000], [0000, 1100], [1100, 0010], [0010, 0100], [0100, 0111], [0111, 1000], [1000, 0001], [0001, 1111], [1111, 0101], [0101, 1110], [1110, 1100], [1100, 0000], [0000, 1000], [1000, 1011], [1011, Target], [Target, Program], [Program, (], [(, )]]

>> Trigrams: 
[[     , Error, Messages], [Error, Messages,  ], [Messages,  , Source], [ , Source, Program], [Source, Program, Target], [Program, Target, Program], [Target, Program, Compiler], [Program, Compiler, void], [Compiler, void, main], [void, main, (], [main, (, )], [(, ), {], [), {, int], [{, int, a=1,b=2,c], [int, a=1,b=2,c, ;], [a=1,b=2,c, ;, c], [;, c, =], [c, =, a+b], [=, a+b, ;], [a+b, ;, printf(“%d”,c], [;, printf(“%d”,c, )], [printf(“%d”,c, ), ;], [), ;, }], [;, }, Source], [}, Source, Program], [Source, Program, 0000], [Program, 0000, 1100], [0000, 1100, 0010], [1100, 0010, 0100], [0010, 0100, 0111], [0100, 0111, 1000], [0111, 1000, 0001], [1000, 0001, 1111], [0001, 1111, 0101], [1111, 0101, 1110], [0101, 1110, 1100], [1110, 1100, 0000], [1100, 0000, 1000], [0000, 1000, 1011], [1000, 1011, Target], [1011, Target, Program], [Target, Program, (], [Program, (, )]]

>> Noun Phrases are: 
[Source Program Target Program Compiler, { int, a+b, printf(“%d”,c, 1100 0000 1000 1011 Target Program]

>> Named Entities are: 
[('a+b', 'PERSON'), ('Source Program 0000', 'ORG'), ('1011', 'DATE')]


============================ Sentence 13 =============================

    


>> Tokens are: 
[   ] 

>> PoS Tags are: 
[('   ', 'SPACE')] 

>> Dependency Tags are: 
[('   ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 14 =============================

Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1 – Introduction to Compiler Design ‹#›   


>> Tokens are: 
[Prof., Dixita, B, Kagathara,  , #, 2170701, (, CD, ),   , ,   , Unit, 1, –, Introduction, Compiler, Design, ‹#›,  ] 

>> PoS Tags are: 
[('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), (' ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Introduction', 'NOUN'), ('Compiler', 'PROPN'), ('Design', 'PROPN'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'nsubj'), (' ', 'appos'), ('#', 'nmod'), ('2170701', 'npadvmod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dep'), ('Unit', 'npadvmod'), ('1', 'nummod'), ('–', 'punct'), ('Introduction', 'appos'), ('Compiler', 'compound'), ('Design', 'pobj'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,  ], [ , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Introduction], [Introduction, Compiler], [Compiler, Design], [Design, ‹#›], [‹#›,  ]]

>> Trigrams: 
[[Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,  ], [Kagathara,  , #], [ , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Introduction], [–, Introduction, Compiler], [Introduction, Compiler, Design], [Compiler, Design, ‹#›], [Design, ‹#›,  ]]

>> Noun Phrases are: 
[Prof. Dixita B Kagathara, (CD, Introduction, Compiler Design]

>> Named Entities are: 
[('Dixita', 'PERSON'), ('Kagathara', 'PERSON')]


============================ Sentence 15 =============================

Interpreter  Interpreter is also program that reads a program written in source language and translates it into an equivalent program in target language   Interpreter              Source Program  Target Program line by line.   


>> Tokens are: 
[Interpreter,  , Interpreter, program, reads, program, written, source, language, translates, equivalent, program, target, language,   , Interpreter,              , Source, Program,  , Target, Program, line, line, .,  ] 

>> PoS Tags are: 
[('Interpreter', 'PROPN'), (' ', 'SPACE'), ('Interpreter', 'PROPN'), ('program', 'NOUN'), ('reads', 'VERB'), ('program', 'NOUN'), ('written', 'VERB'), ('source', 'NOUN'), ('language', 'NOUN'), ('translates', 'VERB'), ('equivalent', 'ADJ'), ('program', 'NOUN'), ('target', 'NOUN'), ('language', 'NOUN'), ('  ', 'SPACE'), ('Interpreter', 'NOUN'), ('             ', 'SPACE'), ('Source', 'PROPN'), ('Program', 'PROPN'), (' ', 'SPACE'), ('Target', 'PROPN'), ('Program', 'PROPN'), ('line', 'NOUN'), ('line', 'NOUN'), ('.', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Interpreter', 'nmod'), (' ', 'nummod'), ('Interpreter', 'nsubj'), ('program', 'attr'), ('reads', 'relcl'), ('program', 'dobj'), ('written', 'acl'), ('source', 'compound'), ('language', 'pobj'), ('translates', 'conj'), ('equivalent', 'amod'), ('program', 'pobj'), ('target', 'compound'), ('language', 'pobj'), ('  ', 'compound'), ('Interpreter', 'nmod'), ('             ', 'nummod'), ('Source', 'compound'), ('Program', 'nmod'), (' ', 'nummod'), ('Target', 'compound'), ('Program', 'compound'), ('line', 'attr'), ('line', 'pobj'), ('.', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[Interpreter,  ], [ , Interpreter], [Interpreter, program], [program, reads], [reads, program], [program, written], [written, source], [source, language], [language, translates], [translates, equivalent], [equivalent, program], [program, target], [target, language], [language,   ], [  , Interpreter], [Interpreter,              ], [             , Source], [Source, Program], [Program,  ], [ , Target], [Target, Program], [Program, line], [line, line], [line, .], [.,  ]]

>> Trigrams: 
[[Interpreter,  , Interpreter], [ , Interpreter, program], [Interpreter, program, reads], [program, reads, program], [reads, program, written], [program, written, source], [written, source, language], [source, language, translates], [language, translates, equivalent], [translates, equivalent, program], [equivalent, program, target], [program, target, language], [target, language,   ], [language,   , Interpreter], [  , Interpreter,              ], [Interpreter,              , Source], [             , Source, Program], [Source, Program,  ], [Program,  , Target], [ , Target, Program], [Target, Program, line], [Program, line, line], [line, line, .], [line, .,  ]]

>> Noun Phrases are: 
[Interpreter  Interpreter, program, a program, source language, it, an equivalent program, target language,   Interpreter              Source Program  Target Program line, line]

>> Named Entities are: 
[('Interpreter              Source Program  ', 'ORG'), ('Target Program', 'ORG')]


============================ Sentence 16 =============================

Void main()  {      int a=1,b=2,c;      c=a+b;      printf(“%d”,c);  } 0000 1100 0010 0000 1111 1010 1100 0010 0011 1100 0010 1111 1100 0010 


>> Tokens are: 
[Void, main, (, ),  , {,      , int, a=1,b=2,c, ;,      , c, =, a+b, ;,      , printf(“%d”,c, ), ;,  , }, 0000, 1100, 0010, 0000, 1111, 1010, 1100, 0010, 0011, 1100, 0010, 1111, 1100, 0010] 

>> PoS Tags are: 
[('Void', 'PROPN'), ('main', 'ADJ'), ('(', 'PUNCT'), (')', 'PUNCT'), (' ', 'SPACE'), ('{', 'PUNCT'), ('     ', 'SPACE'), ('int', 'NOUN'), ('a=1,b=2,c', 'ADV'), (';', 'PUNCT'), ('     ', 'SPACE'), ('c', 'NOUN'), ('=', 'PUNCT'), ('a+b', 'PROPN'), (';', 'PUNCT'), ('     ', 'SPACE'), ('printf(“%d”,c', 'ADV'), (')', 'PUNCT'), (';', 'PUNCT'), (' ', 'SPACE'), ('}', 'PUNCT'), ('0000', 'NUM'), ('1100', 'NUM'), ('0010', 'NUM'), ('0000', 'NUM'), ('1111', 'PROPN'), ('1010', 'NUM'), ('1100', 'NUM'), ('0010', 'NUM'), ('0011', 'NUM'), ('1100', 'NUM'), ('0010', 'NUM'), ('1111', 'PROPN'), ('1100', 'NUM'), ('0010', 'NUM')] 

>> Dependency Tags are: 
[('Void', 'compound'), ('main', 'ROOT'), ('(', 'punct'), (')', 'punct'), (' ', 'appos'), ('{', 'punct'), ('     ', 'nsubj'), ('int', 'appos'), ('a=1,b=2,c', 'advmod'), (';', 'punct'), ('     ', 'compound'), ('c', 'appos'), ('=', 'punct'), ('a+b', 'appos'), (';', 'punct'), ('     ', 'compound'), ('printf(“%d”,c', 'appos'), (')', 'punct'), (';', 'punct'), (' ', 'appos'), ('}', 'punct'), ('0000', 'appos'), ('1100', 'npadvmod'), ('0010', 'npadvmod'), ('0000', 'npadvmod'), ('1111', 'npadvmod'), ('1010', 'npadvmod'), ('1100', 'npadvmod'), ('0010', 'npadvmod'), ('0011', 'npadvmod'), ('1100', 'npadvmod'), ('0010', 'nummod'), ('1111', 'npadvmod'), ('1100', 'nummod'), ('0010', 'punct')]

>> Bigrams: 
[[Void, main], [main, (], [(, )], [),  ], [ , {], [{,      ], [     , int], [int, a=1,b=2,c], [a=1,b=2,c, ;], [;,      ], [     , c], [c, =], [=, a+b], [a+b, ;], [;,      ], [     , printf(“%d”,c], [printf(“%d”,c, )], [), ;], [;,  ], [ , }], [}, 0000], [0000, 1100], [1100, 0010], [0010, 0000], [0000, 1111], [1111, 1010], [1010, 1100], [1100, 0010], [0010, 0011], [0011, 1100], [1100, 0010], [0010, 1111], [1111, 1100], [1100, 0010]]

>> Trigrams: 
[[Void, main, (], [main, (, )], [(, ),  ], [),  , {], [ , {,      ], [{,      , int], [     , int, a=1,b=2,c], [int, a=1,b=2,c, ;], [a=1,b=2,c, ;,      ], [;,      , c], [     , c, =], [c, =, a+b], [=, a+b, ;], [a+b, ;,      ], [;,      , printf(“%d”,c], [     , printf(“%d”,c, )], [printf(“%d”,c, ), ;], [), ;,  ], [;,  , }], [ , }, 0000], [}, 0000, 1100], [0000, 1100, 0010], [1100, 0010, 0000], [0010, 0000, 1111], [0000, 1111, 1010], [1111, 1010, 1100], [1010, 1100, 0010], [1100, 0010, 0011], [0010, 0011, 1100], [0011, 1100, 0010], [1100, 0010, 1111], [0010, 1111, 1100], [1111, 1100, 0010]]

>> Noun Phrases are: 
[     int,      c, a+b]

>> Named Entities are: 
[('Void', 'PERSON'), ('a+b', 'PERSON'), ('1100 0010', 'DATE')]


============================ Sentence 17 =============================

Error Messages   


>> Tokens are: 
[Error, Messages,  ] 

>> PoS Tags are: 
[('Error', 'PROPN'), ('Messages', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Error', 'compound'), ('Messages', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[Error, Messages], [Messages,  ]]

>> Trigrams: 
[[Error, Messages,  ]]

>> Noun Phrases are: 
[Error Messages]

>> Named Entities are: 
[]


============================ Sentence 18 =============================

(If any)    Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1 – Introduction to Compiler Design ‹#›   


>> Tokens are: 
[(, ),    , Prof., Dixita, B, Kagathara,  , #, 2170701, (, CD, ),   , ,   , Unit, 1, –, Introduction, Compiler, Design, ‹#›,  ] 

>> PoS Tags are: 
[('(', 'PUNCT'), (')', 'PUNCT'), ('   ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), (' ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Introduction', 'NOUN'), ('Compiler', 'PROPN'), ('Design', 'PROPN'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('(', 'punct'), (')', 'punct'), ('   ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'nsubj'), (' ', 'appos'), ('#', 'nmod'), ('2170701', 'npadvmod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dep'), ('Unit', 'npadvmod'), ('1', 'nummod'), ('–', 'punct'), ('Introduction', 'appos'), ('Compiler', 'compound'), ('Design', 'pobj'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[(, )], [),    ], [   , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,  ], [ , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Introduction], [Introduction, Compiler], [Compiler, Design], [Design, ‹#›], [‹#›,  ]]

>> Trigrams: 
[[(, ),    ], [),    , Prof.], [   , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,  ], [Kagathara,  , #], [ , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Introduction], [–, Introduction, Compiler], [Introduction, Compiler, Design], [Compiler, Design, ‹#›], [Design, ‹#›,  ]]

>> Noun Phrases are: 
[(If any)    Prof. Dixita B Kagathara, (CD, Introduction, Compiler Design]

>> Named Entities are: 
[('Dixita', 'PERSON'), ('Kagathara', 'PERSON')]


============================ Sentence 19 =============================

Assembler  Assembler is a translator which takes the assembly code as an input and generates the machine code as an output. 


>> Tokens are: 
[Assembler,  , Assembler, translator, takes, assembly, code, input, generates, machine, code, output, .] 

>> PoS Tags are: 
[('Assembler', 'PROPN'), (' ', 'SPACE'), ('Assembler', 'PROPN'), ('translator', 'NOUN'), ('takes', 'VERB'), ('assembly', 'NOUN'), ('code', 'NOUN'), ('input', 'NOUN'), ('generates', 'VERB'), ('machine', 'NOUN'), ('code', 'NOUN'), ('output', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Assembler', 'compound'), (' ', 'compound'), ('Assembler', 'nsubj'), ('translator', 'attr'), ('takes', 'relcl'), ('assembly', 'compound'), ('code', 'dobj'), ('input', 'pobj'), ('generates', 'conj'), ('machine', 'compound'), ('code', 'dobj'), ('output', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Assembler,  ], [ , Assembler], [Assembler, translator], [translator, takes], [takes, assembly], [assembly, code], [code, input], [input, generates], [generates, machine], [machine, code], [code, output], [output, .]]

>> Trigrams: 
[[Assembler,  , Assembler], [ , Assembler, translator], [Assembler, translator, takes], [translator, takes, assembly], [takes, assembly, code], [assembly, code, input], [code, input, generates], [input, generates, machine], [generates, machine, code], [machine, code, output], [code, output, .]]

>> Noun Phrases are: 
[Assembler  Assembler, a translator, the assembly code, an input, the machine code, an output]

>> Named Entities are: 
[('Assembler', 'ORG')]


============================ Sentence 20 =============================

     Assembler MOV id3, R1 MUL #2.0, R1 MOV id2, R2 MUL R2, R1 MOV id1, R2 ADD R2, R1 MOV R1, id1 Assembly Code  0000 1100 0010 0100 0111 1000 0001 1111 0101 1110 1100 0000 1000 1011 1100 0000 1000   


>> Tokens are: 
[     , Assembler, MOV, id3, ,, R1, MUL, #, 2.0, ,, R1, MOV, id2, ,, R2, MUL, R2, ,, R1, MOV, id1, ,, R2, ADD, R2, ,, R1, MOV, R1, ,, id1, Assembly, Code,  , 0000, 1100, 0010, 0100, 0111, 1000, 0001, 1111, 0101, 1110, 1100, 0000, 1000, 1011, 1100, 0000, 1000,  ] 

>> PoS Tags are: 
[('     ', 'SPACE'), ('Assembler', 'PROPN'), ('MOV', 'NOUN'), ('id3', 'VERB'), (',', 'PUNCT'), ('R1', 'NOUN'), ('MUL', 'PROPN'), ('#', 'SYM'), ('2.0', 'NUM'), (',', 'PUNCT'), ('R1', 'NOUN'), ('MOV', 'NOUN'), ('id2', 'NOUN'), (',', 'PUNCT'), ('R2', 'PROPN'), ('MUL', 'PROPN'), ('R2', 'PROPN'), (',', 'PUNCT'), ('R1', 'NOUN'), ('MOV', 'NOUN'), ('id1', 'ADV'), (',', 'PUNCT'), ('R2', 'PROPN'), ('ADD', 'NOUN'), ('R2', 'PROPN'), (',', 'PUNCT'), ('R1', 'NOUN'), ('MOV', 'NOUN'), ('R1', 'PROPN'), (',', 'PUNCT'), ('id1', 'NOUN'), ('Assembly', 'PROPN'), ('Code', 'PROPN'), (' ', 'SPACE'), ('0000', 'NUM'), ('1100', 'NUM'), ('0010', 'NUM'), ('0100', 'NUM'), ('0111', 'NUM'), ('1000', 'NUM'), ('0001', 'NUM'), ('1111', 'NUM'), ('0101', 'NUM'), ('1110', 'NUM'), ('1100', 'NUM'), ('0000', 'NUM'), ('1000', 'NUM'), ('1011', 'NUM'), ('1100', 'NUM'), ('0000', 'NUM'), ('1000', 'NUM'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('     ', 'compound'), ('Assembler', 'compound'), ('MOV', 'nsubj'), ('id3', 'ROOT'), (',', 'punct'), ('R1', 'npadvmod'), ('MUL', 'npadvmod'), ('#', 'npadvmod'), ('2.0', 'nummod'), (',', 'punct'), ('R1', 'compound'), ('MOV', 'compound'), ('id2', 'conj'), (',', 'punct'), ('R2', 'compound'), ('MUL', 'compound'), ('R2', 'appos'), (',', 'punct'), ('R1', 'compound'), ('MOV', 'conj'), ('id1', 'advmod'), (',', 'punct'), ('R2', 'compound'), ('ADD', 'compound'), ('R2', 'appos'), (',', 'punct'), ('R1', 'compound'), ('MOV', 'compound'), ('R1', 'conj'), (',', 'punct'), ('id1', 'compound'), ('Assembly', 'compound'), ('Code', 'appos'), (' ', 'dobj'), ('0000', 'nummod'), ('1100', 'npadvmod'), ('0010', 'npadvmod'), ('0100', 'npadvmod'), ('0111', 'npadvmod'), ('1000', 'nummod'), ('0001', 'nummod'), ('1111', 'appos'), ('0101', 'npadvmod'), ('1110', 'npadvmod'), ('1100', 'nummod'), ('0000', 'npadvmod'), ('1000', 'nummod'), ('1011', 'nummod'), ('1100', 'appos'), ('0000', 'nummod'), ('1000', 'nummod'), (' ', 'dobj')]

>> Bigrams: 
[[     , Assembler], [Assembler, MOV], [MOV, id3], [id3, ,], [,, R1], [R1, MUL], [MUL, #], [#, 2.0], [2.0, ,], [,, R1], [R1, MOV], [MOV, id2], [id2, ,], [,, R2], [R2, MUL], [MUL, R2], [R2, ,], [,, R1], [R1, MOV], [MOV, id1], [id1, ,], [,, R2], [R2, ADD], [ADD, R2], [R2, ,], [,, R1], [R1, MOV], [MOV, R1], [R1, ,], [,, id1], [id1, Assembly], [Assembly, Code], [Code,  ], [ , 0000], [0000, 1100], [1100, 0010], [0010, 0100], [0100, 0111], [0111, 1000], [1000, 0001], [0001, 1111], [1111, 0101], [0101, 1110], [1110, 1100], [1100, 0000], [0000, 1000], [1000, 1011], [1011, 1100], [1100, 0000], [0000, 1000], [1000,  ]]

>> Trigrams: 
[[     , Assembler, MOV], [Assembler, MOV, id3], [MOV, id3, ,], [id3, ,, R1], [,, R1, MUL], [R1, MUL, #], [MUL, #, 2.0], [#, 2.0, ,], [2.0, ,, R1], [,, R1, MOV], [R1, MOV, id2], [MOV, id2, ,], [id2, ,, R2], [,, R2, MUL], [R2, MUL, R2], [MUL, R2, ,], [R2, ,, R1], [,, R1, MOV], [R1, MOV, id1], [MOV, id1, ,], [id1, ,, R2], [,, R2, ADD], [R2, ADD, R2], [ADD, R2, ,], [R2, ,, R1], [,, R1, MOV], [R1, MOV, R1], [MOV, R1, ,], [R1, ,, id1], [,, id1, Assembly], [id1, Assembly, Code], [Assembly, Code,  ], [Code,  , 0000], [ , 0000, 1100], [0000, 1100, 0010], [1100, 0010, 0100], [0010, 0100, 0111], [0100, 0111, 1000], [0111, 1000, 0001], [1000, 0001, 1111], [0001, 1111, 0101], [1111, 0101, 1110], [0101, 1110, 1100], [1110, 1100, 0000], [1100, 0000, 1000], [0000, 1000, 1011], [1000, 1011, 1100], [1011, 1100, 0000], [1100, 0000, 1000], [0000, 1000,  ]]

>> Noun Phrases are: 
[     Assembler MOV, R1 MOV id2, R2 MUL R2, R1 MOV, R2 ADD R2, , R1 MOV R1, id1 Assembly Code]

>> Named Entities are: 
[('R1 MUL #2.0', 'MONEY'), ('R1', 'CARDINAL'), ('MOV', 'ORG'), ('R2 MUL R2', 'FAC'), ('MOV', 'ORG'), ('R2 ADD R2', 'FAC'), ('MOV R1', 'ORG'), ('Assembly', 'ORG')]


============================ Sentence 21 =============================

Machine Code Error Messages   


>> Tokens are: 
[Machine, Code, Error, Messages,  ] 

>> PoS Tags are: 
[('Machine', 'PROPN'), ('Code', 'PROPN'), ('Error', 'PROPN'), ('Messages', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Machine', 'compound'), ('Code', 'compound'), ('Error', 'compound'), ('Messages', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[Machine, Code], [Code, Error], [Error, Messages], [Messages,  ]]

>> Trigrams: 
[[Machine, Code, Error], [Code, Error, Messages], [Error, Messages,  ]]

>> Noun Phrases are: 
[Machine Code Error Messages]

>> Named Entities are: 
[]


============================ Sentence 22 =============================

(If any)    Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1 – Introduction to Compiler Design ‹#›  Analysis Synthesis model of compilation         Analysis synthesis model of compilation There are two parts of compilation. 


>> Tokens are: 
[(, ),    , Prof., Dixita, B, Kagathara,  , #, 2170701, (, CD, ),   , ,   , Unit, 1, –, Introduction, Compiler, Design, ‹#›,  , Analysis, Synthesis, model, compilation,         , Analysis, synthesis, model, compilation, parts, compilation, .] 

>> PoS Tags are: 
[('(', 'PUNCT'), (')', 'PUNCT'), ('   ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), (' ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Introduction', 'NOUN'), ('Compiler', 'PROPN'), ('Design', 'PROPN'), ('‹#›', 'PROPN'), (' ', 'SPACE'), ('Analysis', 'PROPN'), ('Synthesis', 'PROPN'), ('model', 'NOUN'), ('compilation', 'NOUN'), ('        ', 'SPACE'), ('Analysis', 'PROPN'), ('synthesis', 'NOUN'), ('model', 'NOUN'), ('compilation', 'NOUN'), ('parts', 'NOUN'), ('compilation', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('(', 'punct'), (')', 'punct'), ('   ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'nsubj'), (' ', 'appos'), ('#', 'nmod'), ('2170701', 'npadvmod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Introduction', 'appos'), ('Compiler', 'compound'), ('Design', 'pobj'), ('‹#›', 'punct'), (' ', 'compound'), ('Analysis', 'compound'), ('Synthesis', 'compound'), ('model', 'dobj'), ('compilation', 'compound'), ('        ', 'compound'), ('Analysis', 'compound'), ('synthesis', 'compound'), ('model', 'pobj'), ('compilation', 'pobj'), ('parts', 'attr'), ('compilation', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[(, )], [),    ], [   , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,  ], [ , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Introduction], [Introduction, Compiler], [Compiler, Design], [Design, ‹#›], [‹#›,  ], [ , Analysis], [Analysis, Synthesis], [Synthesis, model], [model, compilation], [compilation,         ], [        , Analysis], [Analysis, synthesis], [synthesis, model], [model, compilation], [compilation, parts], [parts, compilation], [compilation, .]]

>> Trigrams: 
[[(, ),    ], [),    , Prof.], [   , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,  ], [Kagathara,  , #], [ , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Introduction], [–, Introduction, Compiler], [Introduction, Compiler, Design], [Compiler, Design, ‹#›], [Design, ‹#›,  ], [‹#›,  , Analysis], [ , Analysis, Synthesis], [Analysis, Synthesis, model], [Synthesis, model, compilation], [model, compilation,         ], [compilation,         , Analysis], [        , Analysis, synthesis], [Analysis, synthesis, model], [synthesis, model, compilation], [model, compilation, parts], [compilation, parts, compilation], [parts, compilation, .]]

>> Noun Phrases are: 
[(If any)    Prof. Dixita B Kagathara, (CD, Unit, Introduction, Compiler Design,  Analysis Synthesis model, compilation         Analysis synthesis model, compilation, two parts, compilation]

>> Named Entities are: 
[('Dixita', 'PERSON'), ('Kagathara', 'PERSON'), ('two', 'CARDINAL')]


============================ Sentence 23 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 24 =============================

Analysis Phase Synthesis Phase  Analysis Phase Synthesis Phase Intermediate Representation void main() { int a=1,b=2,c; c=a+b; printf(“%d”,c); } Source Code  0000 1100  0111 1000 0001 1111 0101 1000 1011 Target Code     


>> Tokens are: 
[Analysis, Phase, Synthesis, Phase,  , Analysis, Phase, Synthesis, Phase, Intermediate, Representation, void, main, (, ), {, int, a=1,b=2,c, ;, c, =, a+b, ;, printf(“%d”,c, ), ;, }, Source, Code,  , 0000, 1100,  , 0111, 1000, 0001, 1111, 0101, 1000, 1011, Target, Code,    ] 

>> PoS Tags are: 
[('Analysis', 'PROPN'), ('Phase', 'PROPN'), ('Synthesis', 'PROPN'), ('Phase', 'PROPN'), (' ', 'SPACE'), ('Analysis', 'PROPN'), ('Phase', 'PROPN'), ('Synthesis', 'PROPN'), ('Phase', 'PROPN'), ('Intermediate', 'PROPN'), ('Representation', 'PROPN'), ('void', 'VERB'), ('main', 'ADJ'), ('(', 'PUNCT'), (')', 'PUNCT'), ('{', 'PUNCT'), ('int', 'NOUN'), ('a=1,b=2,c', 'ADV'), (';', 'PUNCT'), ('c', 'X'), ('=', 'SYM'), ('a+b', 'PROPN'), (';', 'PUNCT'), ('printf(“%d”,c', 'PROPN'), (')', 'PUNCT'), (';', 'PUNCT'), ('}', 'PUNCT'), ('Source', 'PROPN'), ('Code', 'PROPN'), (' ', 'SPACE'), ('0000', 'NUM'), ('1100', 'NUM'), (' ', 'SPACE'), ('0111', 'NUM'), ('1000', 'NUM'), ('0001', 'NUM'), ('1111', 'NUM'), ('0101', 'NUM'), ('1000', 'NUM'), ('1011', 'NUM'), ('Target', 'PROPN'), ('Code', 'PROPN'), ('   ', 'SPACE')] 

>> Dependency Tags are: 
[('Analysis', 'compound'), ('Phase', 'compound'), ('Synthesis', 'compound'), ('Phase', 'nmod'), (' ', 'nummod'), ('Analysis', 'compound'), ('Phase', 'compound'), ('Synthesis', 'compound'), ('Phase', 'compound'), ('Intermediate', 'compound'), ('Representation', 'nsubj'), ('void', 'ROOT'), ('main', 'dobj'), ('(', 'punct'), (')', 'punct'), ('{', 'punct'), ('int', 'dobj'), ('a=1,b=2,c', 'advmod'), (';', 'punct'), ('c', 'appos'), ('=', 'punct'), ('a+b', 'dobj'), (';', 'punct'), ('printf(“%d”,c', 'npadvmod'), (')', 'punct'), (';', 'punct'), ('}', 'punct'), ('Source', 'compound'), ('Code', 'dobj'), (' ', 'nummod'), ('0000', 'nummod'), ('1100', 'npadvmod'), (' ', 'nummod'), ('0111', 'npadvmod'), ('1000', 'nummod'), ('0001', 'nummod'), ('1111', 'npadvmod'), ('0101', 'nummod'), ('1000', 'nummod'), ('1011', 'nummod'), ('Target', 'compound'), ('Code', 'npadvmod'), ('   ', 'nummod')]

>> Bigrams: 
[[Analysis, Phase], [Phase, Synthesis], [Synthesis, Phase], [Phase,  ], [ , Analysis], [Analysis, Phase], [Phase, Synthesis], [Synthesis, Phase], [Phase, Intermediate], [Intermediate, Representation], [Representation, void], [void, main], [main, (], [(, )], [), {], [{, int], [int, a=1,b=2,c], [a=1,b=2,c, ;], [;, c], [c, =], [=, a+b], [a+b, ;], [;, printf(“%d”,c], [printf(“%d”,c, )], [), ;], [;, }], [}, Source], [Source, Code], [Code,  ], [ , 0000], [0000, 1100], [1100,  ], [ , 0111], [0111, 1000], [1000, 0001], [0001, 1111], [1111, 0101], [0101, 1000], [1000, 1011], [1011, Target], [Target, Code], [Code,    ]]

>> Trigrams: 
[[Analysis, Phase, Synthesis], [Phase, Synthesis, Phase], [Synthesis, Phase,  ], [Phase,  , Analysis], [ , Analysis, Phase], [Analysis, Phase, Synthesis], [Phase, Synthesis, Phase], [Synthesis, Phase, Intermediate], [Phase, Intermediate, Representation], [Intermediate, Representation, void], [Representation, void, main], [void, main, (], [main, (, )], [(, ), {], [), {, int], [{, int, a=1,b=2,c], [int, a=1,b=2,c, ;], [a=1,b=2,c, ;, c], [;, c, =], [c, =, a+b], [=, a+b, ;], [a+b, ;, printf(“%d”,c], [;, printf(“%d”,c, )], [printf(“%d”,c, ), ;], [), ;, }], [;, }, Source], [}, Source, Code], [Source, Code,  ], [Code,  , 0000], [ , 0000, 1100], [0000, 1100,  ], [1100,  , 0111], [ , 0111, 1000], [0111, 1000, 0001], [1000, 0001, 1111], [0001, 1111, 0101], [1111, 0101, 1000], [0101, 1000, 1011], [1000, 1011, Target], [1011, Target, Code], [Target, Code,    ]]

>> Noun Phrases are: 
[Analysis Phase Synthesis Phase  Analysis Phase Synthesis Phase Intermediate Representation, { int, a+b, Source Code]

>> Named Entities are: 
[('a+b', 'PERSON'), ('Target Code', 'EVENT')]


============================ Sentence 25 =============================

Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara   


>> Tokens are: 
[Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara,  ] 

>> PoS Tags are: 
[('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'nsubj'), ('#', 'appos'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'dep'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'ROOT'), ('‹#›', 'punct'), ('  ', 'appos'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), (' ', 'punct')]

>> Bigrams: 
[[Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,  ]]

>> Trigrams: 
[[Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,  ]]

>> Noun Phrases are: 
[Prof. Jay R Dhamsaniya, (PS, Unit, Prof. Dixita B Kagathara]

>> Named Entities are: 
[('Jay R Dhamsaniya', 'ORG'), ('PS', 'ORG'), ('Dixita', 'PERSON'), ('Kagathara', 'PERSON')]


============================ Sentence 26 =============================

#2170701 (CD)      Unit 1– Introduction to Compiler Design ‹#›  Analysis phase & Synthesis phase Analysis Phase Analysis part breaks up the source program into constituent pieces and creates an intermediate representation of the source program. 


>> Tokens are: 
[#, 2170701, (, CD, ),   , ,   , Unit, 1, –, Introduction, Compiler, Design, ‹#›,  , Analysis, phase, &, Synthesis, phase, Analysis, Phase, Analysis, breaks, source, program, constituent, pieces, creates, intermediate, representation, source, program, .] 

>> PoS Tags are: 
[('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Introduction', 'NOUN'), ('Compiler', 'PROPN'), ('Design', 'PROPN'), ('‹#›', 'X'), (' ', 'SPACE'), ('Analysis', 'PROPN'), ('phase', 'NOUN'), ('&', 'CCONJ'), ('Synthesis', 'PROPN'), ('phase', 'NOUN'), ('Analysis', 'PROPN'), ('Phase', 'PROPN'), ('Analysis', 'PROPN'), ('breaks', 'VERB'), ('source', 'NOUN'), ('program', 'NOUN'), ('constituent', 'ADJ'), ('pieces', 'NOUN'), ('creates', 'VERB'), ('intermediate', 'ADJ'), ('representation', 'NOUN'), ('source', 'NOUN'), ('program', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('#', 'nmod'), ('2170701', 'nsubj'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'dep'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Introduction', 'appos'), ('Compiler', 'compound'), ('Design', 'pobj'), ('‹#›', 'punct'), (' ', 'punct'), ('Analysis', 'compound'), ('phase', 'nmod'), ('&', 'cc'), ('Synthesis', 'conj'), ('phase', 'nsubj'), ('Analysis', 'compound'), ('Phase', 'compound'), ('Analysis', 'compound'), ('breaks', 'ROOT'), ('source', 'compound'), ('program', 'dobj'), ('constituent', 'amod'), ('pieces', 'pobj'), ('creates', 'conj'), ('intermediate', 'amod'), ('representation', 'dobj'), ('source', 'compound'), ('program', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Introduction], [Introduction, Compiler], [Compiler, Design], [Design, ‹#›], [‹#›,  ], [ , Analysis], [Analysis, phase], [phase, &], [&, Synthesis], [Synthesis, phase], [phase, Analysis], [Analysis, Phase], [Phase, Analysis], [Analysis, breaks], [breaks, source], [source, program], [program, constituent], [constituent, pieces], [pieces, creates], [creates, intermediate], [intermediate, representation], [representation, source], [source, program], [program, .]]

>> Trigrams: 
[[#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Introduction], [–, Introduction, Compiler], [Introduction, Compiler, Design], [Compiler, Design, ‹#›], [Design, ‹#›,  ], [‹#›,  , Analysis], [ , Analysis, phase], [Analysis, phase, &], [phase, &, Synthesis], [&, Synthesis, phase], [Synthesis, phase, Analysis], [phase, Analysis, Phase], [Analysis, Phase, Analysis], [Phase, Analysis, breaks], [Analysis, breaks, source], [breaks, source, program], [source, program, constituent], [program, constituent, pieces], [constituent, pieces, creates], [pieces, creates, intermediate], [creates, intermediate, representation], [intermediate, representation, source], [representation, source, program], [source, program, .]]

>> Noun Phrases are: 
[(CD, Unit, Introduction, Compiler Design, Analysis Phase Analysis part, the source program, constituent pieces, an intermediate representation, the source program]

>> Named Entities are: 
[('Analysis Phase Analysis', 'ORG')]


============================ Sentence 27 =============================

Analysis phase consists of three sub phases:  Lexical analysis   


>> Tokens are: 
[Analysis, phase, consists, sub, phases, :,  , Lexical, analysis,  ] 

>> PoS Tags are: 
[('Analysis', 'NOUN'), ('phase', 'NOUN'), ('consists', 'VERB'), ('sub', 'NOUN'), ('phases', 'NOUN'), (':', 'PUNCT'), (' ', 'SPACE'), ('Lexical', 'ADJ'), ('analysis', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Analysis', 'compound'), ('phase', 'nsubj'), ('consists', 'ROOT'), ('sub', 'compound'), ('phases', 'pobj'), (':', 'punct'), (' ', 'appos'), ('Lexical', 'amod'), ('analysis', 'dobj'), (' ', 'punct')]

>> Bigrams: 
[[Analysis, phase], [phase, consists], [consists, sub], [sub, phases], [phases, :], [:,  ], [ , Lexical], [Lexical, analysis], [analysis,  ]]

>> Trigrams: 
[[Analysis, phase, consists], [phase, consists, sub], [consists, sub, phases], [sub, phases, :], [phases, :,  ], [:,  , Lexical], [ , Lexical, analysis], [Lexical, analysis,  ]]

>> Noun Phrases are: 
[Analysis phase, three sub phases, Lexical analysis]

>> Named Entities are: 
[('three', 'CARDINAL')]


============================ Sentence 28 =============================

Syntax analysis   


>> Tokens are: 
[Syntax, analysis,  ] 

>> PoS Tags are: 
[('Syntax', 'PROPN'), ('analysis', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Syntax', 'compound'), ('analysis', 'ROOT'), (' ', 'appos')]

>> Bigrams: 
[[Syntax, analysis], [analysis,  ]]

>> Trigrams: 
[[Syntax, analysis,  ]]

>> Noun Phrases are: 
[Syntax analysis]

>> Named Entities are: 
[('Syntax', 'ORG')]


============================ Sentence 29 =============================

Semantic analysis   


>> Tokens are: 
[Semantic, analysis,  ] 

>> PoS Tags are: 
[('Semantic', 'ADJ'), ('analysis', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Semantic', 'amod'), ('analysis', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[Semantic, analysis], [analysis,  ]]

>> Trigrams: 
[[Semantic, analysis,  ]]

>> Noun Phrases are: 
[Semantic analysis]

>> Named Entities are: 
[('Semantic', 'NORP')]


============================ Sentence 30 =============================

Synthesis Phase The synthesis part constructs the desired target program from the intermediate representation. 


>> Tokens are: 
[Synthesis, Phase, synthesis, constructs, desired, target, program, intermediate, representation, .] 

>> PoS Tags are: 
[('Synthesis', 'PROPN'), ('Phase', 'PROPN'), ('synthesis', 'NOUN'), ('constructs', 'VERB'), ('desired', 'VERB'), ('target', 'NOUN'), ('program', 'NOUN'), ('intermediate', 'ADJ'), ('representation', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Synthesis', 'compound'), ('Phase', 'nsubj'), ('synthesis', 'compound'), ('constructs', 'ROOT'), ('desired', 'amod'), ('target', 'compound'), ('program', 'dobj'), ('intermediate', 'amod'), ('representation', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Synthesis, Phase], [Phase, synthesis], [synthesis, constructs], [constructs, desired], [desired, target], [target, program], [program, intermediate], [intermediate, representation], [representation, .]]

>> Trigrams: 
[[Synthesis, Phase, synthesis], [Phase, synthesis, constructs], [synthesis, constructs, desired], [constructs, desired, target], [desired, target, program], [target, program, intermediate], [program, intermediate, representation], [intermediate, representation, .]]

>> Noun Phrases are: 
[Synthesis Phase, The synthesis part, the desired target program, the intermediate representation]

>> Named Entities are: 
[]


============================ Sentence 31 =============================

Synthesis phase consist of the following sub phases:  Code optimization Code generation     Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1 – Introduction to Compiler Design ‹#›  Phases of compiler        Phases of compiler Compiler Analysis phase Synthesis phase Lexical analysis   


>> Tokens are: 
[Synthesis, phase, consist, following, sub, phases, :,  , Code, optimization, Code, generation,     , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara,  , #, 2170701, (, CD, ),   , ,   , Unit, 1, –, Introduction, Compiler, Design, ‹#›,  , Phases, compiler,        , Phases, compiler, Compiler, Analysis, phase, Synthesis, phase, Lexical, analysis,  ] 

>> PoS Tags are: 
[('Synthesis', 'PROPN'), ('phase', 'NOUN'), ('consist', 'NOUN'), ('following', 'VERB'), ('sub', 'NOUN'), ('phases', 'NOUN'), (':', 'PUNCT'), (' ', 'SPACE'), ('Code', 'PROPN'), ('optimization', 'NOUN'), ('Code', 'PROPN'), ('generation', 'NOUN'), ('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), (' ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Introduction', 'NOUN'), ('Compiler', 'PROPN'), ('Design', 'PROPN'), ('‹#›', 'X'), (' ', 'SPACE'), ('Phases', 'PROPN'), ('compiler', 'NOUN'), ('       ', 'SPACE'), ('Phases', 'PROPN'), ('compiler', 'NOUN'), ('Compiler', 'PROPN'), ('Analysis', 'PROPN'), ('phase', 'NOUN'), ('Synthesis', 'PROPN'), ('phase', 'NOUN'), ('Lexical', 'PROPN'), ('analysis', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Synthesis', 'compound'), ('phase', 'nsubj'), ('consist', 'ROOT'), ('following', 'amod'), ('sub', 'compound'), ('phases', 'pobj'), (':', 'punct'), (' ', 'compound'), ('Code', 'compound'), ('optimization', 'compound'), ('Code', 'compound'), ('generation', 'appos'), ('    ', 'compound'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'appos'), ('#', 'nmod'), ('3130006', 'appos'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'appos'), ('‹#›', 'punct'), ('  ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), (' ', 'prep'), ('#', 'nmod'), ('2170701', 'npadvmod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'punct'), ('Unit', 'npadvmod'), ('1', 'nummod'), ('–', 'punct'), ('Introduction', 'appos'), ('Compiler', 'compound'), ('Design', 'pobj'), ('‹#›', 'punct'), (' ', 'compound'), ('Phases', 'appos'), ('compiler', 'compound'), ('       ', 'compound'), ('Phases', 'pobj'), ('compiler', 'compound'), ('Compiler', 'compound'), ('Analysis', 'compound'), ('phase', 'pobj'), ('Synthesis', 'compound'), ('phase', 'compound'), ('Lexical', 'amod'), ('analysis', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[Synthesis, phase], [phase, consist], [consist, following], [following, sub], [sub, phases], [phases, :], [:,  ], [ , Code], [Code, optimization], [optimization, Code], [Code, generation], [generation,     ], [    , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,  ], [ , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Introduction], [Introduction, Compiler], [Compiler, Design], [Design, ‹#›], [‹#›,  ], [ , Phases], [Phases, compiler], [compiler,        ], [       , Phases], [Phases, compiler], [compiler, Compiler], [Compiler, Analysis], [Analysis, phase], [phase, Synthesis], [Synthesis, phase], [phase, Lexical], [Lexical, analysis], [analysis,  ]]

>> Trigrams: 
[[Synthesis, phase, consist], [phase, consist, following], [consist, following, sub], [following, sub, phases], [sub, phases, :], [phases, :,  ], [:,  , Code], [ , Code, optimization], [Code, optimization, Code], [optimization, Code, generation], [Code, generation,     ], [generation,     , Prof.], [    , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,  ], [Kagathara,  , #], [ , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Introduction], [–, Introduction, Compiler], [Introduction, Compiler, Design], [Compiler, Design, ‹#›], [Design, ‹#›,  ], [‹#›,  , Phases], [ , Phases, compiler], [Phases, compiler,        ], [compiler,        , Phases], [       , Phases, compiler], [Phases, compiler, Compiler], [compiler, Compiler, Analysis], [Compiler, Analysis, phase], [Analysis, phase, Synthesis], [phase, Synthesis, phase], [Synthesis, phase, Lexical], [phase, Lexical, analysis], [Lexical, analysis,  ]]

>> Noun Phrases are: 
[Synthesis phase, the following sub phases,  Code optimization Code generation,     Prof. Jay R Dhamsaniya, (PS, Unit, Basic Probability,   Prof. Dixita B Kagathara, (CD, Introduction, Compiler Design,  Phases, compiler        Phases, compiler Compiler Analysis phase]

>> Named Entities are: 
[('PS', 'ORG'), ('Dixita', 'PERSON'), ('Kagathara', 'PERSON'), ('Compiler Analysis', 'PRODUCT')]


============================ Sentence 32 =============================

Syntax analysis   


>> Tokens are: 
[Syntax, analysis,  ] 

>> PoS Tags are: 
[('Syntax', 'PROPN'), ('analysis', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Syntax', 'compound'), ('analysis', 'ROOT'), (' ', 'appos')]

>> Bigrams: 
[[Syntax, analysis], [analysis,  ]]

>> Trigrams: 
[[Syntax, analysis,  ]]

>> Noun Phrases are: 
[Syntax analysis]

>> Named Entities are: 
[('Syntax', 'ORG')]


============================ Sentence 33 =============================

Semantic analysis    Intermediate code generation Code optimization  Code generation     Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1– Introduction to Compiler Design ‹#›   


>> Tokens are: 
[Semantic, analysis,    , Intermediate, code, generation, Code, optimization,  , Code, generation,     , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara,  , #, 2170701, (, CD, ),   , ,   , Unit, 1, –, Introduction, Compiler, Design, ‹#›,  ] 

>> PoS Tags are: 
[('Semantic', 'ADJ'), ('analysis', 'NOUN'), ('   ', 'SPACE'), ('Intermediate', 'PROPN'), ('code', 'NOUN'), ('generation', 'NOUN'), ('Code', 'PROPN'), ('optimization', 'NOUN'), (' ', 'SPACE'), ('Code', 'PROPN'), ('generation', 'NOUN'), ('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), (' ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Introduction', 'NOUN'), ('Compiler', 'PROPN'), ('Design', 'PROPN'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Semantic', 'amod'), ('analysis', 'nsubj'), ('   ', 'nummod'), ('Intermediate', 'compound'), ('code', 'compound'), ('generation', 'compound'), ('Code', 'compound'), ('optimization', 'appos'), (' ', 'compound'), ('Code', 'compound'), ('generation', 'appos'), ('    ', 'compound'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'appos'), ('#', 'nmod'), ('3130006', 'appos'), ('(', 'punct'), ('PS', 'nsubj'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'parataxis'), ('  ', 'nummod'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'appos'), ('‹#›', 'punct'), ('  ', 'appos'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), (' ', 'appos'), ('#', 'nmod'), ('2170701', 'npadvmod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dep'), ('Unit', 'npadvmod'), ('1', 'nummod'), ('–', 'punct'), ('Introduction', 'appos'), ('Compiler', 'compound'), ('Design', 'pobj'), ('‹#›', 'punct'), (' ', 'npadvmod')]

>> Bigrams: 
[[Semantic, analysis], [analysis,    ], [   , Intermediate], [Intermediate, code], [code, generation], [generation, Code], [Code, optimization], [optimization,  ], [ , Code], [Code, generation], [generation,     ], [    , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,  ], [ , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Introduction], [Introduction, Compiler], [Compiler, Design], [Design, ‹#›], [‹#›,  ]]

>> Trigrams: 
[[Semantic, analysis,    ], [analysis,    , Intermediate], [   , Intermediate, code], [Intermediate, code, generation], [code, generation, Code], [generation, Code, optimization], [Code, optimization,  ], [optimization,  , Code], [ , Code, generation], [Code, generation,     ], [generation,     , Prof.], [    , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,  ], [Kagathara,  , #], [ , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Introduction], [–, Introduction, Compiler], [Introduction, Compiler, Design], [Compiler, Design, ‹#›], [Design, ‹#›,  ]]

>> Noun Phrases are: 
[Semantic analysis, Intermediate code generation Code optimization,  Code generation,     Prof. Jay R Dhamsaniya, PS, Unit, Basic Probability, Prof. Dixita B Kagathara, (CD, Introduction, Compiler Design]

>> Named Entities are: 
[('PS', 'ORG'), ('Dixita', 'PERSON'), ('Kagathara', 'PERSON')]


============================ Sentence 34 =============================

Lexical analysis Lexical Analysis is also called linear analysis or scanning. 


>> Tokens are: 
[Lexical, analysis, Lexical, Analysis, called, linear, analysis, scanning, .] 

>> PoS Tags are: 
[('Lexical', 'PROPN'), ('analysis', 'NOUN'), ('Lexical', 'PROPN'), ('Analysis', 'PROPN'), ('called', 'VERB'), ('linear', 'ADJ'), ('analysis', 'NOUN'), ('scanning', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Lexical', 'amod'), ('analysis', 'compound'), ('Lexical', 'compound'), ('Analysis', 'nsubjpass'), ('called', 'ROOT'), ('linear', 'amod'), ('analysis', 'oprd'), ('scanning', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[Lexical, analysis], [analysis, Lexical], [Lexical, Analysis], [Analysis, called], [called, linear], [linear, analysis], [analysis, scanning], [scanning, .]]

>> Trigrams: 
[[Lexical, analysis, Lexical], [analysis, Lexical, Analysis], [Lexical, Analysis, called], [Analysis, called, linear], [called, linear, analysis], [linear, analysis, scanning], [analysis, scanning, .]]

>> Noun Phrases are: 
[Lexical analysis Lexical Analysis, linear analysis, scanning]

>> Named Entities are: 
[]


============================ Sentence 35 =============================

Lexical Analyzer divides the given source statement into the tokens. 


>> Tokens are: 
[Lexical, Analyzer, divides, given, source, statement, tokens, .] 

>> PoS Tags are: 
[('Lexical', 'PROPN'), ('Analyzer', 'PROPN'), ('divides', 'VERB'), ('given', 'VERB'), ('source', 'NOUN'), ('statement', 'NOUN'), ('tokens', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Lexical', 'compound'), ('Analyzer', 'nsubj'), ('divides', 'ROOT'), ('given', 'amod'), ('source', 'compound'), ('statement', 'dobj'), ('tokens', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Lexical, Analyzer], [Analyzer, divides], [divides, given], [given, source], [source, statement], [statement, tokens], [tokens, .]]

>> Trigrams: 
[[Lexical, Analyzer, divides], [Analyzer, divides, given], [divides, given, source], [given, source, statement], [source, statement, tokens], [statement, tokens, .]]

>> Noun Phrases are: 
[Lexical Analyzer, the given source statement, the tokens]

>> Named Entities are: 
[('Lexical Analyzer', 'PERSON')]


============================ Sentence 36 =============================

Ex: Position = initial + rate * 60 would be grouped into the following tokens: 	Position (identifier) 	= (Assignment symbol) 


>> Tokens are: 
[Ex, :, Position, =, initial, +, rate, *, 60, grouped, following, tokens, :, 	, Position, (, identifier, ), 	, =, (, Assignment, symbol, )] 

>> PoS Tags are: 
[('Ex', 'NOUN'), (':', 'PUNCT'), ('Position', 'NOUN'), ('=', 'ADV'), ('initial', 'ADJ'), ('+', 'NOUN'), ('rate', 'NOUN'), ('*', 'PUNCT'), ('60', 'NUM'), ('grouped', 'VERB'), ('following', 'VERB'), ('tokens', 'NOUN'), (':', 'PUNCT'), ('\t', 'SPACE'), ('Position', 'NOUN'), ('(', 'PUNCT'), ('identifier', 'ADJ'), (')', 'PUNCT'), ('\t', 'SPACE'), ('=', 'PUNCT'), ('(', 'PUNCT'), ('Assignment', 'NOUN'), ('symbol', 'NOUN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('Ex', 'nsubjpass'), (':', 'punct'), ('Position', 'appos'), ('=', 'punct'), ('initial', 'amod'), ('+', 'advmod'), ('rate', 'appos'), ('*', 'punct'), ('60', 'appos'), ('grouped', 'ROOT'), ('following', 'amod'), ('tokens', 'pobj'), (':', 'punct'), ('\t', 'compound'), ('Position', 'appos'), ('(', 'punct'), ('identifier', 'appos'), (')', 'punct'), ('\t', 'appos'), ('=', 'punct'), ('(', 'punct'), ('Assignment', 'compound'), ('symbol', 'appos'), (')', 'punct')]

>> Bigrams: 
[[Ex, :], [:, Position], [Position, =], [=, initial], [initial, +], [+, rate], [rate, *], [*, 60], [60, grouped], [grouped, following], [following, tokens], [tokens, :], [:, 	], [	, Position], [Position, (], [(, identifier], [identifier, )], [), 	], [	, =], [=, (], [(, Assignment], [Assignment, symbol], [symbol, )]]

>> Trigrams: 
[[Ex, :, Position], [:, Position, =], [Position, =, initial], [=, initial, +], [initial, +, rate], [+, rate, *], [rate, *, 60], [*, 60, grouped], [60, grouped, following], [grouped, following, tokens], [following, tokens, :], [tokens, :, 	], [:, 	, Position], [	, Position, (], [Position, (, identifier], [(, identifier, )], [identifier, ), 	], [), 	, =], [	, =, (], [=, (, Assignment], [(, Assignment, symbol], [Assignment, symbol, )]]

>> Noun Phrases are: 
[Ex, Position, rate, the following tokens, 	Position, Assignment symbol]

>> Named Entities are: 
[('60', 'CARDINAL')]


============================ Sentence 37 =============================

	initial (identifier) 


>> Tokens are: 
[	, initial, (, identifier, )] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('initial', 'ADJ'), ('(', 'PUNCT'), ('identifier', 'ADJ'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'amod'), ('initial', 'amod'), ('(', 'punct'), ('identifier', 'ROOT'), (')', 'punct')]

>> Bigrams: 
[[	, initial], [initial, (], [(, identifier], [identifier, )]]

>> Trigrams: 
[[	, initial, (], [initial, (, identifier], [(, identifier, )]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 38 =============================

	+ (Plus symbol) 


>> Tokens are: 
[	, +, (, Plus, symbol, )] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('+', 'PROPN'), ('(', 'PUNCT'), ('Plus', 'CCONJ'), ('symbol', 'NOUN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('+', 'punct'), ('(', 'punct'), ('Plus', 'cc'), ('symbol', 'conj'), (')', 'punct')]

>> Bigrams: 
[[	, +], [+, (], [(, Plus], [Plus, symbol], [symbol, )]]

>> Trigrams: 
[[	, +, (], [+, (, Plus], [(, Plus, symbol], [Plus, symbol, )]]

>> Noun Phrases are: 
[symbol]

>> Named Entities are: 
[]


============================ Sentence 39 =============================

	rate (identifier) 	* (Multiplication symbol) 


>> Tokens are: 
[	, rate, (, identifier, ), 	, *, (, Multiplication, symbol, )] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('rate', 'NOUN'), ('(', 'PUNCT'), ('identifier', 'ADV'), (')', 'PUNCT'), ('\t', 'SPACE'), ('*', 'PUNCT'), ('(', 'PUNCT'), ('Multiplication', 'NOUN'), ('symbol', 'NOUN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'amod'), ('rate', 'ROOT'), ('(', 'punct'), ('identifier', 'amod'), (')', 'punct'), ('\t', 'appos'), ('*', 'punct'), ('(', 'punct'), ('Multiplication', 'compound'), ('symbol', 'appos'), (')', 'punct')]

>> Bigrams: 
[[	, rate], [rate, (], [(, identifier], [identifier, )], [), 	], [	, *], [*, (], [(, Multiplication], [Multiplication, symbol], [symbol, )]]

>> Trigrams: 
[[	, rate, (], [rate, (, identifier], [(, identifier, )], [identifier, ), 	], [), 	, *], [	, *, (], [*, (, Multiplication], [(, Multiplication, symbol], [Multiplication, symbol, )]]

>> Noun Phrases are: 
[	rate, (Multiplication symbol]

>> Named Entities are: 
[]


============================ Sentence 40 =============================

	60 


>> Tokens are: 
[	, 60] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('60', 'NUM')] 

>> Dependency Tags are: 
[('\t', 'ROOT'), ('60', 'nummod')]

>> Bigrams: 
[[	, 60]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 41 =============================

(Number)   


>> Tokens are: 
[(, Number, ),  ] 

>> PoS Tags are: 
[('(', 'PUNCT'), ('Number', 'NOUN'), (')', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('(', 'punct'), ('Number', 'ROOT'), (')', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[(, Number], [Number, )], [),  ]]

>> Trigrams: 
[[(, Number, )], [Number, ),  ]]

>> Noun Phrases are: 
[(Number]

>> Named Entities are: 
[]


============================ Sentence 42 =============================

Lexical analysis id1 = id2 + id3 * 60        Position = initial + rate*60     


>> Tokens are: 
[Lexical, analysis, id1, =, id2, +, id3, *, 60,        , Position, =, initial, +, rate*60,    ] 

>> PoS Tags are: 
[('Lexical', 'ADJ'), ('analysis', 'NOUN'), ('id1', 'ADV'), ('=', 'SYM'), ('id2', 'NOUN'), ('+', 'CCONJ'), ('id3', 'NOUN'), ('*', 'PUNCT'), ('60', 'NUM'), ('       ', 'SPACE'), ('Position', 'NOUN'), ('=', 'NOUN'), ('initial', 'ADJ'), ('+', 'CCONJ'), ('rate*60', 'NOUN'), ('   ', 'SPACE')] 

>> Dependency Tags are: 
[('Lexical', 'amod'), ('analysis', 'ROOT'), ('id1', 'advmod'), ('=', 'punct'), ('id2', 'appos'), ('+', 'prep'), ('id3', 'nmod'), ('*', 'punct'), ('60', 'nummod'), ('       ', 'compound'), ('Position', 'conj'), ('=', 'punct'), ('initial', 'amod'), ('+', 'advmod'), ('rate*60', 'npadvmod'), ('   ', 'nummod')]

>> Bigrams: 
[[Lexical, analysis], [analysis, id1], [id1, =], [=, id2], [id2, +], [+, id3], [id3, *], [*, 60], [60,        ], [       , Position], [Position, =], [=, initial], [initial, +], [+, rate*60], [rate*60,    ]]

>> Trigrams: 
[[Lexical, analysis, id1], [analysis, id1, =], [id1, =, id2], [=, id2, +], [id2, +, id3], [+, id3, *], [id3, *, 60], [*, 60,        ], [60,        , Position], [       , Position, =], [Position, =, initial], [=, initial, +], [initial, +, rate*60], [+, rate*60,    ]]

>> Noun Phrases are: 
[Lexical analysis, = id2, id3 * 60        Position]

>> Named Entities are: 
[('60', 'CARDINAL')]


============================ Sentence 43 =============================

Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara   


>> Tokens are: 
[Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara,  ] 

>> PoS Tags are: 
[('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'nsubj'), ('#', 'appos'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'dep'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'ROOT'), ('‹#›', 'punct'), ('  ', 'appos'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), (' ', 'punct')]

>> Bigrams: 
[[Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,  ]]

>> Trigrams: 
[[Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,  ]]

>> Noun Phrases are: 
[Prof. Jay R Dhamsaniya, (PS, Unit, Prof. Dixita B Kagathara]

>> Named Entities are: 
[('Jay R Dhamsaniya', 'ORG'), ('PS', 'ORG'), ('Dixita', 'PERSON'), ('Kagathara', 'PERSON')]


============================ Sentence 44 =============================

#2170701 (CD)      Unit 1 – Introduction to Compiler Design ‹#›  Phases of compiler Compiler Analysis phase 


>> Tokens are: 
[#, 2170701, (, CD, ),   , ,   , Unit, 1, –, Introduction, Compiler, Design, ‹#›,  , Phases, compiler, Compiler, Analysis, phase] 

>> PoS Tags are: 
[('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Introduction', 'NOUN'), ('Compiler', 'PROPN'), ('Design', 'PROPN'), ('‹#›', 'X'), (' ', 'SPACE'), ('Phases', 'PROPN'), ('compiler', 'NOUN'), ('Compiler', 'PROPN'), ('Analysis', 'PROPN'), ('phase', 'NOUN')] 

>> Dependency Tags are: 
[('#', 'nmod'), ('2170701', 'nsubj'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dep'), ('Unit', 'npadvmod'), ('1', 'nummod'), ('–', 'punct'), ('Introduction', 'appos'), ('Compiler', 'compound'), ('Design', 'pobj'), ('‹#›', 'punct'), (' ', 'compound'), ('Phases', 'attr'), ('compiler', 'compound'), ('Compiler', 'compound'), ('Analysis', 'compound'), ('phase', 'pobj')]

>> Bigrams: 
[[#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Introduction], [Introduction, Compiler], [Compiler, Design], [Design, ‹#›], [‹#›,  ], [ , Phases], [Phases, compiler], [compiler, Compiler], [Compiler, Analysis], [Analysis, phase]]

>> Trigrams: 
[[#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Introduction], [–, Introduction, Compiler], [Introduction, Compiler, Design], [Compiler, Design, ‹#›], [Design, ‹#›,  ], [‹#›,  , Phases], [ , Phases, compiler], [Phases, compiler, Compiler], [compiler, Compiler, Analysis], [Compiler, Analysis, phase]]

>> Noun Phrases are: 
[(CD, Introduction, Compiler Design,  Phases, compiler Compiler Analysis phase]

>> Named Entities are: 
[('Compiler Analysis', 'PRODUCT')]


============================ Sentence 45 =============================

Synthesis phase Lexical analysis   


>> Tokens are: 
[Synthesis, phase, Lexical, analysis,  ] 

>> PoS Tags are: 
[('Synthesis', 'PROPN'), ('phase', 'NOUN'), ('Lexical', 'PROPN'), ('analysis', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Synthesis', 'compound'), ('phase', 'ROOT'), ('Lexical', 'dobj'), ('analysis', 'dobj'), (' ', 'appos')]

>> Bigrams: 
[[Synthesis, phase], [phase, Lexical], [Lexical, analysis], [analysis,  ]]

>> Trigrams: 
[[Synthesis, phase, Lexical], [phase, Lexical, analysis], [Lexical, analysis,  ]]

>> Noun Phrases are: 
[Synthesis phase, Lexical, analysis]

>> Named Entities are: 
[]


============================ Sentence 46 =============================

Syntax analysis   


>> Tokens are: 
[Syntax, analysis,  ] 

>> PoS Tags are: 
[('Syntax', 'PROPN'), ('analysis', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Syntax', 'compound'), ('analysis', 'ROOT'), (' ', 'appos')]

>> Bigrams: 
[[Syntax, analysis], [analysis,  ]]

>> Trigrams: 
[[Syntax, analysis,  ]]

>> Noun Phrases are: 
[Syntax analysis]

>> Named Entities are: 
[('Syntax', 'ORG')]


============================ Sentence 47 =============================

Semantic analysis    Intermediate code generation Code optimization  Code generation     Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1– Introduction to Compiler Design ‹#›   


>> Tokens are: 
[Semantic, analysis,    , Intermediate, code, generation, Code, optimization,  , Code, generation,     , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara,  , #, 2170701, (, CD, ),   , ,   , Unit, 1, –, Introduction, Compiler, Design, ‹#›,  ] 

>> PoS Tags are: 
[('Semantic', 'ADJ'), ('analysis', 'NOUN'), ('   ', 'SPACE'), ('Intermediate', 'PROPN'), ('code', 'NOUN'), ('generation', 'NOUN'), ('Code', 'PROPN'), ('optimization', 'NOUN'), (' ', 'SPACE'), ('Code', 'PROPN'), ('generation', 'NOUN'), ('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), (' ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Introduction', 'NOUN'), ('Compiler', 'PROPN'), ('Design', 'PROPN'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Semantic', 'amod'), ('analysis', 'nsubj'), ('   ', 'nummod'), ('Intermediate', 'compound'), ('code', 'compound'), ('generation', 'compound'), ('Code', 'compound'), ('optimization', 'appos'), (' ', 'compound'), ('Code', 'compound'), ('generation', 'appos'), ('    ', 'compound'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'appos'), ('#', 'nmod'), ('3130006', 'appos'), ('(', 'punct'), ('PS', 'nsubj'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'parataxis'), ('  ', 'nummod'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'appos'), ('‹#›', 'punct'), ('  ', 'appos'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), (' ', 'appos'), ('#', 'nmod'), ('2170701', 'npadvmod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dep'), ('Unit', 'npadvmod'), ('1', 'nummod'), ('–', 'punct'), ('Introduction', 'appos'), ('Compiler', 'compound'), ('Design', 'pobj'), ('‹#›', 'punct'), (' ', 'npadvmod')]

>> Bigrams: 
[[Semantic, analysis], [analysis,    ], [   , Intermediate], [Intermediate, code], [code, generation], [generation, Code], [Code, optimization], [optimization,  ], [ , Code], [Code, generation], [generation,     ], [    , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,  ], [ , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Introduction], [Introduction, Compiler], [Compiler, Design], [Design, ‹#›], [‹#›,  ]]

>> Trigrams: 
[[Semantic, analysis,    ], [analysis,    , Intermediate], [   , Intermediate, code], [Intermediate, code, generation], [code, generation, Code], [generation, Code, optimization], [Code, optimization,  ], [optimization,  , Code], [ , Code, generation], [Code, generation,     ], [generation,     , Prof.], [    , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,  ], [Kagathara,  , #], [ , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Introduction], [–, Introduction, Compiler], [Introduction, Compiler, Design], [Compiler, Design, ‹#›], [Design, ‹#›,  ]]

>> Noun Phrases are: 
[Semantic analysis, Intermediate code generation Code optimization,  Code generation,     Prof. Jay R Dhamsaniya, PS, Unit, Basic Probability, Prof. Dixita B Kagathara, (CD, Introduction, Compiler Design]

>> Named Entities are: 
[('PS', 'ORG'), ('Dixita', 'PERSON'), ('Kagathara', 'PERSON')]


============================ Sentence 48 =============================

Syntax analysis Syntax Analysis is also called Parsing or Hierarchical Analysis. 


>> Tokens are: 
[Syntax, analysis, Syntax, Analysis, called, Parsing, Hierarchical, Analysis, .] 

>> PoS Tags are: 
[('Syntax', 'PROPN'), ('analysis', 'NOUN'), ('Syntax', 'PROPN'), ('Analysis', 'PROPN'), ('called', 'VERB'), ('Parsing', 'PROPN'), ('Hierarchical', 'PROPN'), ('Analysis', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Syntax', 'compound'), ('analysis', 'compound'), ('Syntax', 'compound'), ('Analysis', 'nsubjpass'), ('called', 'ROOT'), ('Parsing', 'oprd'), ('Hierarchical', 'compound'), ('Analysis', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[Syntax, analysis], [analysis, Syntax], [Syntax, Analysis], [Analysis, called], [called, Parsing], [Parsing, Hierarchical], [Hierarchical, Analysis], [Analysis, .]]

>> Trigrams: 
[[Syntax, analysis, Syntax], [analysis, Syntax, Analysis], [Syntax, Analysis, called], [Analysis, called, Parsing], [called, Parsing, Hierarchical], [Parsing, Hierarchical, Analysis], [Hierarchical, Analysis, .]]

>> Noun Phrases are: 
[Syntax analysis Syntax Analysis, Parsing, Hierarchical Analysis]

>> Named Entities are: 
[('Syntax', 'ORG'), ('Syntax Analysis', 'PERSON'), ('Parsing or Hierarchical Analysis', 'WORK_OF_ART')]


============================ Sentence 49 =============================

The syntax analyzer checks each line of the code and spots every tiny mistake. 


>> Tokens are: 
[syntax, analyzer, checks, line, code, spots, tiny, mistake, .] 

>> PoS Tags are: 
[('syntax', 'NOUN'), ('analyzer', 'NOUN'), ('checks', 'VERB'), ('line', 'NOUN'), ('code', 'NOUN'), ('spots', 'NOUN'), ('tiny', 'ADJ'), ('mistake', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('syntax', 'compound'), ('analyzer', 'nsubj'), ('checks', 'ROOT'), ('line', 'dobj'), ('code', 'pobj'), ('spots', 'conj'), ('tiny', 'amod'), ('mistake', 'npadvmod'), ('.', 'punct')]

>> Bigrams: 
[[syntax, analyzer], [analyzer, checks], [checks, line], [line, code], [code, spots], [spots, tiny], [tiny, mistake], [mistake, .]]

>> Trigrams: 
[[syntax, analyzer, checks], [analyzer, checks, line], [checks, line, code], [line, code, spots], [code, spots, tiny], [spots, tiny, mistake], [tiny, mistake, .]]

>> Noun Phrases are: 
[The syntax analyzer, each line, the code, spots]

>> Named Entities are: 
[]


============================ Sentence 50 =============================

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 51 =============================

If code is error free then syntax analyzer generates the tree. 


>> Tokens are: 
[code, error, free, syntax, analyzer, generates, tree, .] 

>> PoS Tags are: 
[('code', 'NOUN'), ('error', 'NOUN'), ('free', 'ADJ'), ('syntax', 'NOUN'), ('analyzer', 'NOUN'), ('generates', 'VERB'), ('tree', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('code', 'nsubj'), ('error', 'npadvmod'), ('free', 'acomp'), ('syntax', 'compound'), ('analyzer', 'nsubj'), ('generates', 'ROOT'), ('tree', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[code, error], [error, free], [free, syntax], [syntax, analyzer], [analyzer, generates], [generates, tree], [tree, .]]

>> Trigrams: 
[[code, error, free], [error, free, syntax], [free, syntax, analyzer], [syntax, analyzer, generates], [analyzer, generates, tree], [generates, tree, .]]

>> Noun Phrases are: 
[code, syntax analyzer, the tree]

>> Named Entities are: 
[]


============================ Sentence 52 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 53 =============================

Syntax analysis id1 = id2 + id3 * 60 Lexical analysis = id1 + id2 * id3 60 Position = initial + rate*60    Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1 – Introduction to Compiler Design ‹#›  Phases of compiler Compiler Analysis phase 


>> Tokens are: 
[Syntax, analysis, id1, =, id2, +, id3, *, 60, Lexical, analysis, =, id1, +, id2, *, id3, 60, Position, =, initial, +, rate*60,    , Prof., Dixita, B, Kagathara,  , #, 2170701, (, CD, ),   , ,   , Unit, 1, –, Introduction, Compiler, Design, ‹#›,  , Phases, compiler, Compiler, Analysis, phase] 

>> PoS Tags are: 
[('Syntax', 'PROPN'), ('analysis', 'NOUN'), ('id1', 'ADV'), ('=', 'SYM'), ('id2', 'NOUN'), ('+', 'CCONJ'), ('id3', 'NOUN'), ('*', 'PUNCT'), ('60', 'NUM'), ('Lexical', 'ADJ'), ('analysis', 'NOUN'), ('=', 'PUNCT'), ('id1', 'NOUN'), ('+', 'NOUN'), ('id2', 'NOUN'), ('*', 'PUNCT'), ('id3', 'NOUN'), ('60', 'NUM'), ('Position', 'NOUN'), ('=', 'NOUN'), ('initial', 'ADJ'), ('+', 'CCONJ'), ('rate*60', 'NOUN'), ('   ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), (' ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Introduction', 'NOUN'), ('Compiler', 'PROPN'), ('Design', 'PROPN'), ('‹#›', 'X'), (' ', 'SPACE'), ('Phases', 'PROPN'), ('compiler', 'NOUN'), ('Compiler', 'PROPN'), ('Analysis', 'PROPN'), ('phase', 'NOUN')] 

>> Dependency Tags are: 
[('Syntax', 'compound'), ('analysis', 'nsubj'), ('id1', 'dep'), ('=', 'punct'), ('id2', 'appos'), ('+', 'advmod'), ('id3', 'quantmod'), ('*', 'punct'), ('60', 'nummod'), ('Lexical', 'compound'), ('analysis', 'appos'), ('=', 'punct'), ('id1', 'advmod'), ('+', 'appos'), ('id2', 'appos'), ('*', 'punct'), ('id3', 'compound'), ('60', 'nummod'), ('Position', 'appos'), ('=', 'punct'), ('initial', 'amod'), ('+', 'advmod'), ('rate*60', 'nmod'), ('   ', 'nummod'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), (' ', 'prep'), ('#', 'nmod'), ('2170701', 'npadvmod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dep'), ('Unit', 'npadvmod'), ('1', 'nummod'), ('–', 'punct'), ('Introduction', 'appos'), ('Compiler', 'compound'), ('Design', 'pobj'), ('‹#›', 'punct'), (' ', 'compound'), ('Phases', 'appos'), ('compiler', 'compound'), ('Compiler', 'compound'), ('Analysis', 'compound'), ('phase', 'pobj')]

>> Bigrams: 
[[Syntax, analysis], [analysis, id1], [id1, =], [=, id2], [id2, +], [+, id3], [id3, *], [*, 60], [60, Lexical], [Lexical, analysis], [analysis, =], [=, id1], [id1, +], [+, id2], [id2, *], [*, id3], [id3, 60], [60, Position], [Position, =], [=, initial], [initial, +], [+, rate*60], [rate*60,    ], [   , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,  ], [ , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Introduction], [Introduction, Compiler], [Compiler, Design], [Design, ‹#›], [‹#›,  ], [ , Phases], [Phases, compiler], [compiler, Compiler], [Compiler, Analysis], [Analysis, phase]]

>> Trigrams: 
[[Syntax, analysis, id1], [analysis, id1, =], [id1, =, id2], [=, id2, +], [id2, +, id3], [+, id3, *], [id3, *, 60], [*, 60, Lexical], [60, Lexical, analysis], [Lexical, analysis, =], [analysis, =, id1], [=, id1, +], [id1, +, id2], [+, id2, *], [id2, *, id3], [*, id3, 60], [id3, 60, Position], [60, Position, =], [Position, =, initial], [=, initial, +], [initial, +, rate*60], [+, rate*60,    ], [rate*60,    , Prof.], [   , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,  ], [Kagathara,  , #], [ , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Introduction], [–, Introduction, Compiler], [Introduction, Compiler, Design], [Compiler, Design, ‹#›], [Design, ‹#›,  ], [‹#›,  , Phases], [ , Phases, compiler], [Phases, compiler, Compiler], [compiler, Compiler, Analysis], [Compiler, Analysis, phase]]

>> Noun Phrases are: 
[Syntax analysis, id1 = id2, id3 * 60 Lexical analysis, id1 +, id2, * id3 60 Position, rate*60    Prof. Dixita B Kagathara, (CD, Introduction, Compiler Design,  Phases, compiler Compiler Analysis phase]

>> Named Entities are: 
[('Syntax', 'ORG'), ('60', 'CARDINAL'), ('60', 'CARDINAL'), ('Dixita', 'PERSON'), ('Kagathara', 'PERSON'), ('Compiler Analysis', 'PRODUCT')]


============================ Sentence 54 =============================

Synthesis phase Lexical analysis   


>> Tokens are: 
[Synthesis, phase, Lexical, analysis,  ] 

>> PoS Tags are: 
[('Synthesis', 'PROPN'), ('phase', 'NOUN'), ('Lexical', 'PROPN'), ('analysis', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Synthesis', 'compound'), ('phase', 'ROOT'), ('Lexical', 'dobj'), ('analysis', 'dobj'), (' ', 'appos')]

>> Bigrams: 
[[Synthesis, phase], [phase, Lexical], [Lexical, analysis], [analysis,  ]]

>> Trigrams: 
[[Synthesis, phase, Lexical], [phase, Lexical, analysis], [Lexical, analysis,  ]]

>> Noun Phrases are: 
[Synthesis phase, Lexical, analysis]

>> Named Entities are: 
[]


============================ Sentence 55 =============================

Syntax analysis   


>> Tokens are: 
[Syntax, analysis,  ] 

>> PoS Tags are: 
[('Syntax', 'PROPN'), ('analysis', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Syntax', 'compound'), ('analysis', 'ROOT'), (' ', 'appos')]

>> Bigrams: 
[[Syntax, analysis], [analysis,  ]]

>> Trigrams: 
[[Syntax, analysis,  ]]

>> Noun Phrases are: 
[Syntax analysis]

>> Named Entities are: 
[('Syntax', 'ORG')]


============================ Sentence 56 =============================

Semantic analysis    Intermediate code generation Code optimization  Code generation     Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1– Introduction to Compiler Design ‹#›  Semantic analysis Semantic analyzer determines the meaning of a source string. 


>> Tokens are: 
[Semantic, analysis,    , Intermediate, code, generation, Code, optimization,  , Code, generation,     , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara,  , #, 2170701, (, CD, ),   , ,   , Unit, 1, –, Introduction, Compiler, Design, ‹#›,  , Semantic, analysis, Semantic, analyzer, determines, meaning, source, string, .] 

>> PoS Tags are: 
[('Semantic', 'ADJ'), ('analysis', 'NOUN'), ('   ', 'SPACE'), ('Intermediate', 'PROPN'), ('code', 'NOUN'), ('generation', 'NOUN'), ('Code', 'PROPN'), ('optimization', 'NOUN'), (' ', 'SPACE'), ('Code', 'PROPN'), ('generation', 'NOUN'), ('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), (' ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Introduction', 'NOUN'), ('Compiler', 'PROPN'), ('Design', 'PROPN'), ('‹#›', 'X'), (' ', 'SPACE'), ('Semantic', 'ADJ'), ('analysis', 'NOUN'), ('Semantic', 'ADJ'), ('analyzer', 'NOUN'), ('determines', 'VERB'), ('meaning', 'NOUN'), ('source', 'NOUN'), ('string', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Semantic', 'amod'), ('analysis', 'nsubj'), ('   ', 'nummod'), ('Intermediate', 'compound'), ('code', 'compound'), ('generation', 'compound'), ('Code', 'compound'), ('optimization', 'appos'), (' ', 'compound'), ('Code', 'compound'), ('generation', 'appos'), ('    ', 'compound'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'appos'), ('#', 'nmod'), ('3130006', 'appos'), ('(', 'punct'), ('PS', 'nsubj'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'parataxis'), ('  ', 'nummod'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'appos'), ('‹#›', 'punct'), ('  ', 'appos'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), (' ', 'appos'), ('#', 'nmod'), ('2170701', 'npadvmod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dep'), ('Unit', 'npadvmod'), ('1', 'nummod'), ('–', 'punct'), ('Introduction', 'appos'), ('Compiler', 'compound'), ('Design', 'pobj'), ('‹#›', 'punct'), (' ', 'npadvmod'), ('Semantic', 'amod'), ('analysis', 'compound'), ('Semantic', 'amod'), ('analyzer', 'nsubj'), ('determines', 'conj'), ('meaning', 'dobj'), ('source', 'compound'), ('string', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Semantic, analysis], [analysis,    ], [   , Intermediate], [Intermediate, code], [code, generation], [generation, Code], [Code, optimization], [optimization,  ], [ , Code], [Code, generation], [generation,     ], [    , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,  ], [ , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Introduction], [Introduction, Compiler], [Compiler, Design], [Design, ‹#›], [‹#›,  ], [ , Semantic], [Semantic, analysis], [analysis, Semantic], [Semantic, analyzer], [analyzer, determines], [determines, meaning], [meaning, source], [source, string], [string, .]]

>> Trigrams: 
[[Semantic, analysis,    ], [analysis,    , Intermediate], [   , Intermediate, code], [Intermediate, code, generation], [code, generation, Code], [generation, Code, optimization], [Code, optimization,  ], [optimization,  , Code], [ , Code, generation], [Code, generation,     ], [generation,     , Prof.], [    , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,  ], [Kagathara,  , #], [ , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Introduction], [–, Introduction, Compiler], [Introduction, Compiler, Design], [Compiler, Design, ‹#›], [Design, ‹#›,  ], [‹#›,  , Semantic], [ , Semantic, analysis], [Semantic, analysis, Semantic], [analysis, Semantic, analyzer], [Semantic, analyzer, determines], [analyzer, determines, meaning], [determines, meaning, source], [meaning, source, string], [source, string, .]]

>> Noun Phrases are: 
[Semantic analysis, Intermediate code generation Code optimization,  Code generation,     Prof. Jay R Dhamsaniya, PS, Unit, Basic Probability, Prof. Dixita B Kagathara, (CD, Introduction, Compiler Design, Semantic analysis Semantic analyzer, the meaning, a source string]

>> Named Entities are: 
[('PS', 'ORG'), ('Dixita', 'PERSON'), ('Kagathara', 'PERSON')]


============================ Sentence 57 =============================

It performs following operations:  matching of parenthesis in the expression. 


>> Tokens are: 
[performs, following, operations, :,  , matching, parenthesis, expression, .] 

>> PoS Tags are: 
[('performs', 'VERB'), ('following', 'VERB'), ('operations', 'NOUN'), (':', 'PUNCT'), (' ', 'SPACE'), ('matching', 'VERB'), ('parenthesis', 'NOUN'), ('expression', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('performs', 'ROOT'), ('following', 'xcomp'), ('operations', 'dobj'), (':', 'punct'), (' ', 'appos'), ('matching', 'acl'), ('parenthesis', 'pobj'), ('expression', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[performs, following], [following, operations], [operations, :], [:,  ], [ , matching], [matching, parenthesis], [parenthesis, expression], [expression, .]]

>> Trigrams: 
[[performs, following, operations], [following, operations, :], [operations, :,  ], [:,  , matching], [ , matching, parenthesis], [matching, parenthesis, expression], [parenthesis, expression, .]]

>> Noun Phrases are: 
[It, operations, parenthesis, the expression]

>> Named Entities are: 
[]


============================ Sentence 58 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 59 =============================

Matching of if..else statement. 


>> Tokens are: 
[Matching, .., statement, .] 

>> PoS Tags are: 
[('Matching', 'VERB'), ('..', 'PUNCT'), ('statement', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Matching', 'ROOT'), ('..', 'punct'), ('statement', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Matching, ..], [.., statement], [statement, .]]

>> Trigrams: 
[[Matching, .., statement], [.., statement, .]]

>> Noun Phrases are: 
[if..else statement]

>> Named Entities are: 
[]


============================ Sentence 60 =============================

Performing arithmetic operation that are type compatible. 


>> Tokens are: 
[Performing, arithmetic, operation, type, compatible, .] 

>> PoS Tags are: 
[('Performing', 'VERB'), ('arithmetic', 'ADJ'), ('operation', 'NOUN'), ('type', 'NOUN'), ('compatible', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Performing', 'ROOT'), ('arithmetic', 'amod'), ('operation', 'dobj'), ('type', 'npadvmod'), ('compatible', 'acomp'), ('.', 'punct')]

>> Bigrams: 
[[Performing, arithmetic], [arithmetic, operation], [operation, type], [type, compatible], [compatible, .]]

>> Trigrams: 
[[Performing, arithmetic, operation], [arithmetic, operation, type], [operation, type, compatible], [type, compatible, .]]

>> Noun Phrases are: 
[arithmetic operation]

>> Named Entities are: 
[]


============================ Sentence 61 =============================

 Checking the scope of operation. 


>> Tokens are: 
[ , Checking, scope, operation, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('Checking', 'VERB'), ('scope', 'NOUN'), ('operation', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'ROOT'), ('Checking', 'acl'), ('scope', 'dobj'), ('operation', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[ , Checking], [Checking, scope], [scope, operation], [operation, .]]

>> Trigrams: 
[[ , Checking, scope], [Checking, scope, operation], [scope, operation, .]]

>> Noun Phrases are: 
[the scope, operation]

>> Named Entities are: 
[]


============================ Sentence 62 =============================

   = id1 + id2 * id3 60 Semantic analysis = 


>> Tokens are: 
[   , =, id1, +, id2, *, id3, 60, Semantic, analysis, =] 

>> PoS Tags are: 
[('   ', 'SPACE'), ('=', 'PUNCT'), ('id1', 'NOUN'), ('+', 'NOUN'), ('id2', 'NOUN'), ('*', 'PUNCT'), ('id3', 'NOUN'), ('60', 'NUM'), ('Semantic', 'ADJ'), ('analysis', 'NOUN'), ('=', 'PUNCT')] 

>> Dependency Tags are: 
[('   ', 'meta'), ('=', 'punct'), ('id1', 'appos'), ('+', 'nmod'), ('id2', 'appos'), ('*', 'punct'), ('id3', 'ROOT'), ('60', 'nummod'), ('Semantic', 'amod'), ('analysis', 'dobj'), ('=', 'punct')]

>> Bigrams: 
[[   , =], [=, id1], [id1, +], [+, id2], [id2, *], [*, id3], [id3, 60], [60, Semantic], [Semantic, analysis], [analysis, =]]

>> Trigrams: 
[[   , =, id1], [=, id1, +], [id1, +, id2], [+, id2, *], [id2, *, id3], [*, id3, 60], [id3, 60, Semantic], [60, Semantic, analysis], [Semantic, analysis, =]]

>> Noun Phrases are: 
[id1, id2, 60 Semantic analysis]

>> Named Entities are: 
[('60', 'CARDINAL')]


============================ Sentence 63 =============================

id1 + id2 * id3 inttoreal 60  int to real *Note: Consider id1, id2 and id3 are real    Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1 – Introduction to Compiler Design ‹#›  Phases of compiler Compiler Analysis phase 


>> Tokens are: 
[id1, +, id2, *, id3, inttoreal, 60,  , int, real, *, Note, :, Consider, id1, ,, id2, id3, real,    , Prof., Dixita, B, Kagathara,  , #, 2170701, (, CD, ),   , ,   , Unit, 1, –, Introduction, Compiler, Design, ‹#›,  , Phases, compiler, Compiler, Analysis, phase] 

>> PoS Tags are: 
[('id1', 'NOUN'), ('+', 'NOUN'), ('id2', 'NOUN'), ('*', 'PUNCT'), ('id3', 'NOUN'), ('inttoreal', 'ADJ'), ('60', 'NUM'), (' ', 'SPACE'), ('int', 'NOUN'), ('real', 'ADJ'), ('*', 'PUNCT'), ('Note', 'NOUN'), (':', 'PUNCT'), ('Consider', 'VERB'), ('id1', 'ADV'), (',', 'PUNCT'), ('id2', 'NOUN'), ('id3', 'NOUN'), ('real', 'ADJ'), ('   ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), (' ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Introduction', 'NOUN'), ('Compiler', 'PROPN'), ('Design', 'PROPN'), ('‹#›', 'X'), (' ', 'SPACE'), ('Phases', 'PROPN'), ('compiler', 'NOUN'), ('Compiler', 'PROPN'), ('Analysis', 'PROPN'), ('phase', 'NOUN')] 

>> Dependency Tags are: 
[('id1', 'dep'), ('+', 'advmod'), ('id2', 'dep'), ('*', 'punct'), ('id3', 'nsubj'), ('inttoreal', 'amod'), ('60', 'nummod'), (' ', 'nummod'), ('int', 'dobj'), ('real', 'amod'), ('*', 'punct'), ('Note', 'pobj'), (':', 'punct'), ('Consider', 'ROOT'), ('id1', 'advmod'), (',', 'punct'), ('id2', 'dep'), ('id3', 'conj'), ('real', 'advmod'), ('   ', 'nummod'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'attr'), (' ', 'dep'), ('#', 'nmod'), ('2170701', 'npadvmod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'conj'), ('  ', 'punct'), ('Unit', 'npadvmod'), ('1', 'nummod'), ('–', 'punct'), ('Introduction', 'appos'), ('Compiler', 'compound'), ('Design', 'pobj'), ('‹#›', 'punct'), (' ', 'compound'), ('Phases', 'dobj'), ('compiler', 'compound'), ('Compiler', 'compound'), ('Analysis', 'compound'), ('phase', 'pobj')]

>> Bigrams: 
[[id1, +], [+, id2], [id2, *], [*, id3], [id3, inttoreal], [inttoreal, 60], [60,  ], [ , int], [int, real], [real, *], [*, Note], [Note, :], [:, Consider], [Consider, id1], [id1, ,], [,, id2], [id2, id3], [id3, real], [real,    ], [   , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,  ], [ , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Introduction], [Introduction, Compiler], [Compiler, Design], [Design, ‹#›], [‹#›,  ], [ , Phases], [Phases, compiler], [compiler, Compiler], [Compiler, Analysis], [Analysis, phase]]

>> Trigrams: 
[[id1, +, id2], [+, id2, *], [id2, *, id3], [*, id3, inttoreal], [id3, inttoreal, 60], [inttoreal, 60,  ], [60,  , int], [ , int, real], [int, real, *], [real, *, Note], [*, Note, :], [Note, :, Consider], [:, Consider, id1], [Consider, id1, ,], [id1, ,, id2], [,, id2, id3], [id2, id3, real], [id3, real,    ], [real,    , Prof.], [   , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,  ], [Kagathara,  , #], [ , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Introduction], [–, Introduction, Compiler], [Introduction, Compiler, Design], [Compiler, Design, ‹#›], [Design, ‹#›,  ], [‹#›,  , Phases], [ , Phases, compiler], [Phases, compiler, Compiler], [compiler, Compiler, Analysis], [Compiler, Analysis, phase]]

>> Noun Phrases are: 
[id1 + id2 * id3, inttoreal 60  int, real *Note, real    Prof. Dixita B Kagathara, (CD, Introduction, Compiler Design,  Phases, compiler Compiler Analysis phase]

>> Named Entities are: 
[('Dixita', 'PERSON'), ('Kagathara', 'PERSON'), ('Compiler Analysis', 'PRODUCT')]


============================ Sentence 64 =============================

Synthesis phase Lexical analysis   


>> Tokens are: 
[Synthesis, phase, Lexical, analysis,  ] 

>> PoS Tags are: 
[('Synthesis', 'PROPN'), ('phase', 'NOUN'), ('Lexical', 'PROPN'), ('analysis', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Synthesis', 'compound'), ('phase', 'ROOT'), ('Lexical', 'dobj'), ('analysis', 'dobj'), (' ', 'appos')]

>> Bigrams: 
[[Synthesis, phase], [phase, Lexical], [Lexical, analysis], [analysis,  ]]

>> Trigrams: 
[[Synthesis, phase, Lexical], [phase, Lexical, analysis], [Lexical, analysis,  ]]

>> Noun Phrases are: 
[Synthesis phase, Lexical, analysis]

>> Named Entities are: 
[]


============================ Sentence 65 =============================

Syntax analysis   


>> Tokens are: 
[Syntax, analysis,  ] 

>> PoS Tags are: 
[('Syntax', 'PROPN'), ('analysis', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Syntax', 'compound'), ('analysis', 'ROOT'), (' ', 'appos')]

>> Bigrams: 
[[Syntax, analysis], [analysis,  ]]

>> Trigrams: 
[[Syntax, analysis,  ]]

>> Noun Phrases are: 
[Syntax analysis]

>> Named Entities are: 
[('Syntax', 'ORG')]


============================ Sentence 66 =============================

Semantic analysis    Intermediate code generation Code optimization  Code generation     Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1– Introduction to Compiler Design ‹#›   


>> Tokens are: 
[Semantic, analysis,    , Intermediate, code, generation, Code, optimization,  , Code, generation,     , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara,  , #, 2170701, (, CD, ),   , ,   , Unit, 1, –, Introduction, Compiler, Design, ‹#›,  ] 

>> PoS Tags are: 
[('Semantic', 'ADJ'), ('analysis', 'NOUN'), ('   ', 'SPACE'), ('Intermediate', 'PROPN'), ('code', 'NOUN'), ('generation', 'NOUN'), ('Code', 'PROPN'), ('optimization', 'NOUN'), (' ', 'SPACE'), ('Code', 'PROPN'), ('generation', 'NOUN'), ('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), (' ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Introduction', 'NOUN'), ('Compiler', 'PROPN'), ('Design', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Semantic', 'amod'), ('analysis', 'nsubj'), ('   ', 'nummod'), ('Intermediate', 'compound'), ('code', 'compound'), ('generation', 'compound'), ('Code', 'compound'), ('optimization', 'appos'), (' ', 'compound'), ('Code', 'compound'), ('generation', 'appos'), ('    ', 'compound'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'appos'), ('#', 'nmod'), ('3130006', 'appos'), ('(', 'punct'), ('PS', 'nsubj'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'parataxis'), ('  ', 'nummod'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'appos'), ('‹#›', 'punct'), ('  ', 'appos'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), (' ', 'appos'), ('#', 'nmod'), ('2170701', 'npadvmod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dep'), ('Unit', 'npadvmod'), ('1', 'nummod'), ('–', 'punct'), ('Introduction', 'appos'), ('Compiler', 'compound'), ('Design', 'pobj'), ('‹#›', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[Semantic, analysis], [analysis,    ], [   , Intermediate], [Intermediate, code], [code, generation], [generation, Code], [Code, optimization], [optimization,  ], [ , Code], [Code, generation], [generation,     ], [    , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,  ], [ , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Introduction], [Introduction, Compiler], [Compiler, Design], [Design, ‹#›], [‹#›,  ]]

>> Trigrams: 
[[Semantic, analysis,    ], [analysis,    , Intermediate], [   , Intermediate, code], [Intermediate, code, generation], [code, generation, Code], [generation, Code, optimization], [Code, optimization,  ], [optimization,  , Code], [ , Code, generation], [Code, generation,     ], [generation,     , Prof.], [    , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,  ], [Kagathara,  , #], [ , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Introduction], [–, Introduction, Compiler], [Introduction, Compiler, Design], [Compiler, Design, ‹#›], [Design, ‹#›,  ]]

>> Noun Phrases are: 
[Semantic analysis, Intermediate code generation Code optimization,  Code generation,     Prof. Jay R Dhamsaniya, PS, Unit, Basic Probability, Prof. Dixita B Kagathara, (CD, Introduction, Compiler Design]

>> Named Entities are: 
[('PS', 'ORG'), ('Dixita', 'PERSON'), ('Kagathara', 'PERSON')]


============================ Sentence 67 =============================

Intermediate code generator Two important properties of intermediate code :  It should be easy to produce. 


>> Tokens are: 
[Intermediate, code, generator, important, properties, intermediate, code, :,  , easy, produce, .] 

>> PoS Tags are: 
[('Intermediate', 'PROPN'), ('code', 'NOUN'), ('generator', 'NOUN'), ('important', 'ADJ'), ('properties', 'NOUN'), ('intermediate', 'ADJ'), ('code', 'NOUN'), (':', 'PUNCT'), (' ', 'SPACE'), ('easy', 'ADJ'), ('produce', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Intermediate', 'compound'), ('code', 'compound'), ('generator', 'nmod'), ('important', 'amod'), ('properties', 'nsubj'), ('intermediate', 'amod'), ('code', 'pobj'), (':', 'punct'), (' ', 'appos'), ('easy', 'acomp'), ('produce', 'xcomp'), ('.', 'punct')]

>> Bigrams: 
[[Intermediate, code], [code, generator], [generator, important], [important, properties], [properties, intermediate], [intermediate, code], [code, :], [:,  ], [ , easy], [easy, produce], [produce, .]]

>> Trigrams: 
[[Intermediate, code, generator], [code, generator, important], [generator, important, properties], [important, properties, intermediate], [properties, intermediate, code], [intermediate, code, :], [code, :,  ], [:,  , easy], [ , easy, produce], [easy, produce, .]]

>> Noun Phrases are: 
[Intermediate code generator Two important properties, intermediate code, It]

>> Named Entities are: 
[('Two', 'CARDINAL')]


============================ Sentence 68 =============================

Easy to translate into target program. 


>> Tokens are: 
[Easy, translate, target, program, .] 

>> PoS Tags are: 
[('Easy', 'ADJ'), ('translate', 'VERB'), ('target', 'NOUN'), ('program', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Easy', 'ROOT'), ('translate', 'xcomp'), ('target', 'compound'), ('program', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Easy, translate], [translate, target], [target, program], [program, .]]

>> Trigrams: 
[[Easy, translate, target], [translate, target, program], [target, program, .]]

>> Noun Phrases are: 
[target program]

>> Named Entities are: 
[]


============================ Sentence 69 =============================

Intermediate form can be represented using “three address code”. 


>> Tokens are: 
[Intermediate, form, represented, “, address, code, ”, .] 

>> PoS Tags are: 
[('Intermediate', 'ADJ'), ('form', 'NOUN'), ('represented', 'VERB'), ('“', 'PUNCT'), ('address', 'NOUN'), ('code', 'NOUN'), ('”', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Intermediate', 'amod'), ('form', 'nsubjpass'), ('represented', 'ROOT'), ('“', 'punct'), ('address', 'compound'), ('code', 'dobj'), ('”', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Intermediate, form], [form, represented], [represented, “], [“, address], [address, code], [code, ”], [”, .]]

>> Trigrams: 
[[Intermediate, form, represented], [form, represented, “], [represented, “, address], [“, address, code], [address, code, ”], [code, ”, .]]

>> Noun Phrases are: 
[Intermediate form, “three address code]

>> Named Entities are: 
[('three', 'CARDINAL')]


============================ Sentence 70 =============================

Three address code consist of a sequence of instruction, each of which has at most three operands. 


>> Tokens are: 
[address, code, consist, sequence, instruction, ,, operands, .] 

>> PoS Tags are: 
[('address', 'NOUN'), ('code', 'NOUN'), ('consist', 'NOUN'), ('sequence', 'NOUN'), ('instruction', 'NOUN'), (',', 'PUNCT'), ('operands', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('address', 'compound'), ('code', 'compound'), ('consist', 'ROOT'), ('sequence', 'pobj'), ('instruction', 'pobj'), (',', 'punct'), ('operands', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[address, code], [code, consist], [consist, sequence], [sequence, instruction], [instruction, ,], [,, operands], [operands, .]]

>> Trigrams: 
[[address, code, consist], [code, consist, sequence], [consist, sequence, instruction], [sequence, instruction, ,], [instruction, ,, operands], [,, operands, .]]

>> Noun Phrases are: 
[Three address code consist, a sequence, instruction, at most three operands]

>> Named Entities are: 
[('Three', 'CARDINAL')]


============================ Sentence 71 =============================

  = 


>> Tokens are: 
[  , =] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('=', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('=', 'punct')]

>> Bigrams: 
[[  , =]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 72 =============================

id1 + id2 * id3 inttoreal 60 Intermediate code  		t1= int to real(60) 		t2= id3 * t1 		t3= t2 + id2 		id1= t3 t1   t2   t3     Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1 – Introduction to Compiler Design ‹#›  Phases of compiler Compiler Analysis phase Synthesis phase Lexical analysis   


>> Tokens are: 
[id1, +, id2, *, id3, inttoreal, 60, Intermediate, code,  		, t1=, int, real(60, ), 		, t2=, id3, *, t1, 		, t3=, t2, +, id2, 		, id1=, t3, t1,   , t2,   , t3,     , Prof., Dixita, B, Kagathara,  , #, 2170701, (, CD, ),   , ,   , Unit, 1, –, Introduction, Compiler, Design, ‹#›,  , Phases, compiler, Compiler, Analysis, phase, Synthesis, phase, Lexical, analysis,  ] 

>> PoS Tags are: 
[('id1', 'ADV'), ('+', 'NOUN'), ('id2', 'NOUN'), ('*', 'PUNCT'), ('id3', 'VERB'), ('inttoreal', 'ADJ'), ('60', 'NUM'), ('Intermediate', 'PROPN'), ('code', 'NOUN'), (' \t\t', 'SPACE'), ('t1=', 'PROPN'), ('int', 'NOUN'), ('real(60', 'ADV'), (')', 'PUNCT'), ('\t\t', 'SPACE'), ('t2=', 'PROPN'), ('id3', 'VERB'), ('*', 'PUNCT'), ('t1', 'PROPN'), ('\t\t', 'SPACE'), ('t3=', 'PROPN'), ('t2', 'NOUN'), ('+', 'SYM'), ('id2', 'NOUN'), ('\t\t', 'SPACE'), ('id1=', 'PROPN'), ('t3', 'PROPN'), ('t1', 'PROPN'), ('  ', 'SPACE'), ('t2', 'PROPN'), ('  ', 'SPACE'), ('t3', 'PROPN'), ('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), (' ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Introduction', 'NOUN'), ('Compiler', 'PROPN'), ('Design', 'PROPN'), ('‹#›', 'X'), (' ', 'SPACE'), ('Phases', 'PROPN'), ('compiler', 'NOUN'), ('Compiler', 'PROPN'), ('Analysis', 'PROPN'), ('phase', 'NOUN'), ('Synthesis', 'PROPN'), ('phase', 'NOUN'), ('Lexical', 'PROPN'), ('analysis', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('id1', 'dep'), ('+', 'advmod'), ('id2', 'dep'), ('*', 'punct'), ('id3', 'nmod'), ('inttoreal', 'amod'), ('60', 'nummod'), ('Intermediate', 'compound'), ('code', 'nsubj'), (' \t\t', 'prep'), ('t1=', 'nsubj'), ('int', 'relcl'), ('real(60', 'pobj'), (')', 'punct'), ('\t\t', 'prep'), ('t2=', 'pobj'), ('id3', 'ROOT'), ('*', 'punct'), ('t1', 'npadvmod'), ('\t\t', 'prep'), ('t3=', 'compound'), ('t2', 'appos'), ('+', 'punct'), ('id2', 'dep'), ('\t\t', 'prep'), ('id1=', 'npadvmod'), ('t3', 'nummod'), ('t1', 'compound'), ('  ', 'appos'), ('t2', 'appos'), ('  ', 'appos'), ('t3', 'nmod'), ('    ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), (' ', 'prep'), ('#', 'nmod'), ('2170701', 'npadvmod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'conj'), ('  ', 'conj'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Introduction', 'appos'), ('Compiler', 'compound'), ('Design', 'pobj'), ('‹#›', 'punct'), (' ', 'compound'), ('Phases', 'appos'), ('compiler', 'compound'), ('Compiler', 'compound'), ('Analysis', 'compound'), ('phase', 'pobj'), ('Synthesis', 'compound'), ('phase', 'npadvmod'), ('Lexical', 'amod'), ('analysis', 'dobj'), (' ', 'punct')]

>> Bigrams: 
[[id1, +], [+, id2], [id2, *], [*, id3], [id3, inttoreal], [inttoreal, 60], [60, Intermediate], [Intermediate, code], [code,  		], [ 		, t1=], [t1=, int], [int, real(60], [real(60, )], [), 		], [		, t2=], [t2=, id3], [id3, *], [*, t1], [t1, 		], [		, t3=], [t3=, t2], [t2, +], [+, id2], [id2, 		], [		, id1=], [id1=, t3], [t3, t1], [t1,   ], [  , t2], [t2,   ], [  , t3], [t3,     ], [    , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,  ], [ , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Introduction], [Introduction, Compiler], [Compiler, Design], [Design, ‹#›], [‹#›,  ], [ , Phases], [Phases, compiler], [compiler, Compiler], [Compiler, Analysis], [Analysis, phase], [phase, Synthesis], [Synthesis, phase], [phase, Lexical], [Lexical, analysis], [analysis,  ]]

>> Trigrams: 
[[id1, +, id2], [+, id2, *], [id2, *, id3], [*, id3, inttoreal], [id3, inttoreal, 60], [inttoreal, 60, Intermediate], [60, Intermediate, code], [Intermediate, code,  		], [code,  		, t1=], [ 		, t1=, int], [t1=, int, real(60], [int, real(60, )], [real(60, ), 		], [), 		, t2=], [		, t2=, id3], [t2=, id3, *], [id3, *, t1], [*, t1, 		], [t1, 		, t3=], [		, t3=, t2], [t3=, t2, +], [t2, +, id2], [+, id2, 		], [id2, 		, id1=], [		, id1=, t3], [id1=, t3, t1], [t3, t1,   ], [t1,   , t2], [  , t2,   ], [t2,   , t3], [  , t3,     ], [t3,     , Prof.], [    , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,  ], [Kagathara,  , #], [ , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Introduction], [–, Introduction, Compiler], [Introduction, Compiler, Design], [Compiler, Design, ‹#›], [Design, ‹#›,  ], [‹#›,  , Phases], [ , Phases, compiler], [Phases, compiler, Compiler], [compiler, Compiler, Analysis], [Compiler, Analysis, phase], [Analysis, phase, Synthesis], [phase, Synthesis, phase], [Synthesis, phase, Lexical], [phase, Lexical, analysis], [Lexical, analysis,  ]]

>> Noun Phrases are: 
[id1 + id2 * id3 inttoreal 60 Intermediate code, t1=, t2=, t3= t2, t2, t3     Prof. Dixita B Kagathara, (CD, Unit, Introduction, Compiler Design,  Phases, compiler Compiler Analysis phase, Lexical analysis]

>> Named Entities are: 
[('Dixita', 'PERSON'), ('Kagathara', 'PERSON'), ('Compiler Analysis', 'PRODUCT')]


============================ Sentence 73 =============================

Syntax analysis   


>> Tokens are: 
[Syntax, analysis,  ] 

>> PoS Tags are: 
[('Syntax', 'PROPN'), ('analysis', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Syntax', 'compound'), ('analysis', 'ROOT'), (' ', 'appos')]

>> Bigrams: 
[[Syntax, analysis], [analysis,  ]]

>> Trigrams: 
[[Syntax, analysis,  ]]

>> Noun Phrases are: 
[Syntax analysis]

>> Named Entities are: 
[('Syntax', 'ORG')]


============================ Sentence 74 =============================

Semantic analysis    Intermediate code generation Code optimization  Code generation     Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1– Introduction to Compiler Design ‹#›  Code optimization 


>> Tokens are: 
[Semantic, analysis,    , Intermediate, code, generation, Code, optimization,  , Code, generation,     , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara,  , #, 2170701, (, CD, ),   , ,   , Unit, 1, –, Introduction, Compiler, Design, ‹#›,  , Code, optimization] 

>> PoS Tags are: 
[('Semantic', 'ADJ'), ('analysis', 'NOUN'), ('   ', 'SPACE'), ('Intermediate', 'PROPN'), ('code', 'NOUN'), ('generation', 'NOUN'), ('Code', 'PROPN'), ('optimization', 'NOUN'), (' ', 'SPACE'), ('Code', 'PROPN'), ('generation', 'NOUN'), ('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), (' ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Introduction', 'NOUN'), ('Compiler', 'PROPN'), ('Design', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE'), ('Code', 'PROPN'), ('optimization', 'NOUN')] 

>> Dependency Tags are: 
[('Semantic', 'amod'), ('analysis', 'nsubj'), ('   ', 'nummod'), ('Intermediate', 'compound'), ('code', 'compound'), ('generation', 'compound'), ('Code', 'compound'), ('optimization', 'appos'), (' ', 'compound'), ('Code', 'compound'), ('generation', 'appos'), ('    ', 'compound'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'appos'), ('#', 'nmod'), ('3130006', 'appos'), ('(', 'punct'), ('PS', 'nsubj'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'parataxis'), ('  ', 'nummod'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'appos'), ('‹#›', 'punct'), ('  ', 'appos'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), (' ', 'appos'), ('#', 'nmod'), ('2170701', 'npadvmod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Introduction', 'appos'), ('Compiler', 'compound'), ('Design', 'pobj'), ('‹#›', 'punct'), (' ', 'compound'), ('Code', 'compound'), ('optimization', 'appos')]

>> Bigrams: 
[[Semantic, analysis], [analysis,    ], [   , Intermediate], [Intermediate, code], [code, generation], [generation, Code], [Code, optimization], [optimization,  ], [ , Code], [Code, generation], [generation,     ], [    , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,  ], [ , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Introduction], [Introduction, Compiler], [Compiler, Design], [Design, ‹#›], [‹#›,  ], [ , Code], [Code, optimization]]

>> Trigrams: 
[[Semantic, analysis,    ], [analysis,    , Intermediate], [   , Intermediate, code], [Intermediate, code, generation], [code, generation, Code], [generation, Code, optimization], [Code, optimization,  ], [optimization,  , Code], [ , Code, generation], [Code, generation,     ], [generation,     , Prof.], [    , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,  ], [Kagathara,  , #], [ , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Introduction], [–, Introduction, Compiler], [Introduction, Compiler, Design], [Compiler, Design, ‹#›], [Design, ‹#›,  ], [‹#›,  , Code], [ , Code, optimization]]

>> Noun Phrases are: 
[Semantic analysis, Intermediate code generation Code optimization,  Code generation,     Prof. Jay R Dhamsaniya, PS, Unit, Basic Probability, Prof. Dixita B Kagathara, (CD, Unit, Introduction, Compiler Design,  Code optimization]

>> Named Entities are: 
[('PS', 'ORG'), ('Dixita', 'PERSON'), ('Kagathara', 'PERSON')]


============================ Sentence 75 =============================

It improves the intermediate code. 


>> Tokens are: 
[improves, intermediate, code, .] 

>> PoS Tags are: 
[('improves', 'VERB'), ('intermediate', 'ADJ'), ('code', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('improves', 'ROOT'), ('intermediate', 'amod'), ('code', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[improves, intermediate], [intermediate, code], [code, .]]

>> Trigrams: 
[[improves, intermediate, code], [intermediate, code, .]]

>> Noun Phrases are: 
[It, the intermediate code]

>> Named Entities are: 
[]


============================ Sentence 76 =============================

This is necessary to have a faster execution of code or less consumption of memory. 


>> Tokens are: 
[necessary, faster, execution, code, consumption, memory, .] 

>> PoS Tags are: 
[('necessary', 'ADJ'), ('faster', 'ADJ'), ('execution', 'NOUN'), ('code', 'NOUN'), ('consumption', 'NOUN'), ('memory', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('necessary', 'acomp'), ('faster', 'amod'), ('execution', 'dobj'), ('code', 'pobj'), ('consumption', 'conj'), ('memory', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[necessary, faster], [faster, execution], [execution, code], [code, consumption], [consumption, memory], [memory, .]]

>> Trigrams: 
[[necessary, faster, execution], [faster, execution, code], [execution, code, consumption], [code, consumption, memory], [consumption, memory, .]]

>> Noun Phrases are: 
[a faster execution, code, less consumption, memory]

>> Named Entities are: 
[]


============================ Sentence 77 =============================

   Intermediate code  	           t1= int to real(60) 


>> Tokens are: 
[   , Intermediate, code,  	           , t1=, int, real(60, )] 

>> PoS Tags are: 
[('   ', 'SPACE'), ('Intermediate', 'PROPN'), ('code', 'NOUN'), (' \t           ', 'SPACE'), ('t1=', 'PROPN'), ('int', 'VERB'), ('real(60', 'ADV'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('   ', 'nummod'), ('Intermediate', 'compound'), ('code', 'nsubj'), (' \t           ', 'compound'), ('t1=', 'nsubj'), ('int', 'ROOT'), ('real(60', 'pobj'), (')', 'punct')]

>> Bigrams: 
[[   , Intermediate], [Intermediate, code], [code,  	           ], [ 	           , t1=], [t1=, int], [int, real(60], [real(60, )]]

>> Trigrams: 
[[   , Intermediate, code], [Intermediate, code,  	           ], [code,  	           , t1=], [ 	           , t1=, int], [t1=, int, real(60], [int, real(60, )]]

>> Noun Phrases are: 
[   Intermediate code,  	           t1=]

>> Named Entities are: 
[]


============================ Sentence 78 =============================

	t2= id3 * t1 	t3= t2 + id2 		id1= t3  Code optimization  		t1= id3 * 60.0 		id1 = id2 + t1      Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1 – Introduction to Compiler Design ‹#›  Phases of compiler Compiler Analysis phase Synthesis phase Lexical analysis   


>> Tokens are: 
[	, t2=, id3, *, t1, 	, t3=, t2, +, id2, 		, id1=, t3,  , Code, optimization,  		, t1=, id3, *, 60.0, 		, id1, =, id2, +, t1,      , Prof., Dixita, B, Kagathara,  , #, 2170701, (, CD, ),   , ,   , Unit, 1, –, Introduction, Compiler, Design, ‹#›,  , Phases, compiler, Compiler, Analysis, phase, Synthesis, phase, Lexical, analysis,  ] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('t2=', 'PROPN'), ('id3', 'VERB'), ('*', 'PUNCT'), ('t1', 'PROPN'), ('\t', 'SPACE'), ('t3=', 'PROPN'), ('t2', 'NOUN'), ('+', 'NOUN'), ('id2', 'NOUN'), ('\t\t', 'SPACE'), ('id1=', 'PROPN'), ('t3', 'PROPN'), (' ', 'SPACE'), ('Code', 'PROPN'), ('optimization', 'NOUN'), (' \t\t', 'SPACE'), ('t1=', 'NOUN'), ('id3', 'VERB'), ('*', 'PUNCT'), ('60.0', 'NUM'), ('\t\t', 'SPACE'), ('id1', 'ADV'), ('=', 'NUM'), ('id2', 'NOUN'), ('+', 'NUM'), ('t1', 'PROPN'), ('     ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), (' ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Introduction', 'NOUN'), ('Compiler', 'PROPN'), ('Design', 'PROPN'), ('‹#›', 'X'), (' ', 'SPACE'), ('Phases', 'PROPN'), ('compiler', 'NOUN'), ('Compiler', 'PROPN'), ('Analysis', 'PROPN'), ('phase', 'NOUN'), ('Synthesis', 'PROPN'), ('phase', 'NOUN'), ('Lexical', 'PROPN'), ('analysis', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('t2=', 'nsubj'), ('id3', 'ROOT'), ('*', 'punct'), ('t1', 'dobj'), ('\t', 'amod'), ('t3=', 'compound'), ('t2', 'dobj'), ('+', 'punct'), ('id2', 'dobj'), ('\t\t', 'prep'), ('id1=', 'nmod'), ('t3', 'compound'), (' ', 'compound'), ('Code', 'compound'), ('optimization', 'pobj'), (' \t\t', 'punct'), ('t1=', 'nsubj'), ('id3', 'ccomp'), ('*', 'punct'), ('60.0', 'nummod'), ('\t\t', 'npadvmod'), ('id1', 'advmod'), ('=', 'punct'), ('id2', 'appos'), ('+', 'punct'), ('t1', 'compound'), ('     ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), (' ', 'prep'), ('#', 'nmod'), ('2170701', 'npadvmod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'conj'), ('  ', 'punct'), ('Unit', 'npadvmod'), ('1', 'nummod'), ('–', 'punct'), ('Introduction', 'appos'), ('Compiler', 'compound'), ('Design', 'pobj'), ('‹#›', 'punct'), (' ', 'compound'), ('Phases', 'dobj'), ('compiler', 'compound'), ('Compiler', 'compound'), ('Analysis', 'compound'), ('phase', 'pobj'), ('Synthesis', 'compound'), ('phase', 'compound'), ('Lexical', 'amod'), ('analysis', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[	, t2=], [t2=, id3], [id3, *], [*, t1], [t1, 	], [	, t3=], [t3=, t2], [t2, +], [+, id2], [id2, 		], [		, id1=], [id1=, t3], [t3,  ], [ , Code], [Code, optimization], [optimization,  		], [ 		, t1=], [t1=, id3], [id3, *], [*, 60.0], [60.0, 		], [		, id1], [id1, =], [=, id2], [id2, +], [+, t1], [t1,      ], [     , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,  ], [ , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Introduction], [Introduction, Compiler], [Compiler, Design], [Design, ‹#›], [‹#›,  ], [ , Phases], [Phases, compiler], [compiler, Compiler], [Compiler, Analysis], [Analysis, phase], [phase, Synthesis], [Synthesis, phase], [phase, Lexical], [Lexical, analysis], [analysis,  ]]

>> Trigrams: 
[[	, t2=, id3], [t2=, id3, *], [id3, *, t1], [*, t1, 	], [t1, 	, t3=], [	, t3=, t2], [t3=, t2, +], [t2, +, id2], [+, id2, 		], [id2, 		, id1=], [		, id1=, t3], [id1=, t3,  ], [t3,  , Code], [ , Code, optimization], [Code, optimization,  		], [optimization,  		, t1=], [ 		, t1=, id3], [t1=, id3, *], [id3, *, 60.0], [*, 60.0, 		], [60.0, 		, id1], [		, id1, =], [id1, =, id2], [=, id2, +], [id2, +, t1], [+, t1,      ], [t1,      , Prof.], [     , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,  ], [Kagathara,  , #], [ , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Introduction], [–, Introduction, Compiler], [Introduction, Compiler, Design], [Compiler, Design, ‹#›], [Design, ‹#›,  ], [‹#›,  , Phases], [ , Phases, compiler], [Phases, compiler, Compiler], [compiler, Compiler, Analysis], [Compiler, Analysis, phase], [Analysis, phase, Synthesis], [phase, Synthesis, phase], [Synthesis, phase, Lexical], [phase, Lexical, analysis], [Lexical, analysis,  ]]

>> Noun Phrases are: 
[	t2=, t1, 	t3= t2, id2, id1= t3  Code optimization, t1=, id2, t1      Prof. Dixita B Kagathara, (CD, Introduction, Compiler Design,  Phases, compiler Compiler Analysis phase]

>> Named Entities are: 
[('60.0', 'CARDINAL'), ('Dixita', 'PERSON'), ('Kagathara', 'PERSON'), ('Compiler Analysis', 'PRODUCT')]


============================ Sentence 79 =============================

Syntax analysis   


>> Tokens are: 
[Syntax, analysis,  ] 

>> PoS Tags are: 
[('Syntax', 'PROPN'), ('analysis', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Syntax', 'compound'), ('analysis', 'ROOT'), (' ', 'appos')]

>> Bigrams: 
[[Syntax, analysis], [analysis,  ]]

>> Trigrams: 
[[Syntax, analysis,  ]]

>> Noun Phrases are: 
[Syntax analysis]

>> Named Entities are: 
[('Syntax', 'ORG')]


============================ Sentence 80 =============================

Semantic analysis    Intermediate code generation Code optimization  Code generation     Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1– Introduction to Compiler Design ‹#›  Code generation 


>> Tokens are: 
[Semantic, analysis,    , Intermediate, code, generation, Code, optimization,  , Code, generation,     , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara,  , #, 2170701, (, CD, ),   , ,   , Unit, 1, –, Introduction, Compiler, Design, ‹#›,  , Code, generation] 

>> PoS Tags are: 
[('Semantic', 'ADJ'), ('analysis', 'NOUN'), ('   ', 'SPACE'), ('Intermediate', 'PROPN'), ('code', 'NOUN'), ('generation', 'NOUN'), ('Code', 'PROPN'), ('optimization', 'NOUN'), (' ', 'SPACE'), ('Code', 'PROPN'), ('generation', 'NOUN'), ('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), (' ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Introduction', 'NOUN'), ('Compiler', 'PROPN'), ('Design', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE'), ('Code', 'PROPN'), ('generation', 'NOUN')] 

>> Dependency Tags are: 
[('Semantic', 'amod'), ('analysis', 'nsubj'), ('   ', 'nummod'), ('Intermediate', 'compound'), ('code', 'compound'), ('generation', 'compound'), ('Code', 'compound'), ('optimization', 'appos'), (' ', 'compound'), ('Code', 'compound'), ('generation', 'appos'), ('    ', 'compound'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'appos'), ('#', 'nmod'), ('3130006', 'appos'), ('(', 'punct'), ('PS', 'nsubj'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'parataxis'), ('  ', 'nummod'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'appos'), ('‹#›', 'punct'), ('  ', 'appos'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), (' ', 'appos'), ('#', 'nmod'), ('2170701', 'npadvmod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'dep'), ('  ', 'dep'), ('Unit', 'npadvmod'), ('1', 'nummod'), ('–', 'punct'), ('Introduction', 'appos'), ('Compiler', 'compound'), ('Design', 'pobj'), ('‹#›', 'punct'), (' ', 'appos'), ('Code', 'compound'), ('generation', 'ROOT')]

>> Bigrams: 
[[Semantic, analysis], [analysis,    ], [   , Intermediate], [Intermediate, code], [code, generation], [generation, Code], [Code, optimization], [optimization,  ], [ , Code], [Code, generation], [generation,     ], [    , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,  ], [ , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Introduction], [Introduction, Compiler], [Compiler, Design], [Design, ‹#›], [‹#›,  ], [ , Code], [Code, generation]]

>> Trigrams: 
[[Semantic, analysis,    ], [analysis,    , Intermediate], [   , Intermediate, code], [Intermediate, code, generation], [code, generation, Code], [generation, Code, optimization], [Code, optimization,  ], [optimization,  , Code], [ , Code, generation], [Code, generation,     ], [generation,     , Prof.], [    , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,  ], [Kagathara,  , #], [ , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Introduction], [–, Introduction, Compiler], [Introduction, Compiler, Design], [Compiler, Design, ‹#›], [Design, ‹#›,  ], [‹#›,  , Code], [ , Code, generation]]

>> Noun Phrases are: 
[Semantic analysis, Intermediate code generation Code optimization,  Code generation,     Prof. Jay R Dhamsaniya, PS, Unit, Basic Probability, Prof. Dixita B Kagathara, (CD, Introduction, Compiler Design]

>> Named Entities are: 
[('PS', 'ORG'), ('Dixita', 'PERSON'), ('Kagathara', 'PERSON')]


============================ Sentence 81 =============================

The intermediate code instructions are translated into sequence of machine instruction. 


>> Tokens are: 
[intermediate, code, instructions, translated, sequence, machine, instruction, .] 

>> PoS Tags are: 
[('intermediate', 'ADJ'), ('code', 'NOUN'), ('instructions', 'NOUN'), ('translated', 'VERB'), ('sequence', 'NOUN'), ('machine', 'NOUN'), ('instruction', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('intermediate', 'amod'), ('code', 'compound'), ('instructions', 'nsubjpass'), ('translated', 'ROOT'), ('sequence', 'pobj'), ('machine', 'compound'), ('instruction', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[intermediate, code], [code, instructions], [instructions, translated], [translated, sequence], [sequence, machine], [machine, instruction], [instruction, .]]

>> Trigrams: 
[[intermediate, code, instructions], [code, instructions, translated], [instructions, translated, sequence], [translated, sequence, machine], [sequence, machine, instruction], [machine, instruction, .]]

>> Noun Phrases are: 
[The intermediate code instructions, sequence, machine instruction]

>> Named Entities are: 
[]


============================ Sentence 82 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 83 =============================

Code generation  		MOV id3, R2 		MUL #60.0, R2 		MOV id2, R1 		ADD R2,R1 		MOV R1, id1    Code optimization  		t1= id3 * 60.0 		id1 = id2 + t1 Id3R2 Id2R1    Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1 – Introduction to Compiler Design ‹#›  Phases of compiler Symbol table Error detection and recovery Lexical analysis Code optimization Syntax analysis Semantic analysis 


>> Tokens are: 
[Code, generation,  		, MOV, id3, ,, R2, 		, MUL, #, 60.0, ,, R2, 		, MOV, id2, ,, R1, 		, ADD, R2,R1, 		, MOV, R1, ,, id1,    , Code, optimization,  		, t1=, id3, *, 60.0, 		, id1, =, id2, +, t1, Id3R2, Id2R1,    , Prof., Dixita, B, Kagathara,  , #, 2170701, (, CD, ),   , ,   , Unit, 1, –, Introduction, Compiler, Design, ‹#›,  , Phases, compiler, Symbol, table, Error, detection, recovery, Lexical, analysis, Code, optimization, Syntax, analysis, Semantic, analysis] 

>> PoS Tags are: 
[('Code', 'NOUN'), ('generation', 'NOUN'), (' \t\t', 'SPACE'), ('MOV', 'NOUN'), ('id3', 'VERB'), (',', 'PUNCT'), ('R2', 'PROPN'), ('\t\t', 'SPACE'), ('MUL', 'PROPN'), ('#', 'SYM'), ('60.0', 'NUM'), (',', 'PUNCT'), ('R2', 'PROPN'), ('\t\t', 'SPACE'), ('MOV', 'PROPN'), ('id2', 'NOUN'), (',', 'PUNCT'), ('R1', 'PROPN'), ('\t\t', 'SPACE'), ('ADD', 'PROPN'), ('R2,R1', 'NOUN'), ('\t\t', 'SPACE'), ('MOV', 'PROPN'), ('R1', 'PROPN'), (',', 'PUNCT'), ('id1', 'ADV'), ('   ', 'SPACE'), ('Code', 'PROPN'), ('optimization', 'NOUN'), (' \t\t', 'SPACE'), ('t1=', 'NOUN'), ('id3', 'VERB'), ('*', 'PUNCT'), ('60.0', 'NUM'), ('\t\t', 'SPACE'), ('id1', 'ADV'), ('=', 'SYM'), ('id2', 'NOUN'), ('+', 'PROPN'), ('t1', 'PROPN'), ('Id3\uf0e0R2', 'ADJ'), ('Id2\uf0e0R1', 'NOUN'), ('   ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), (' ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Introduction', 'NOUN'), ('Compiler', 'PROPN'), ('Design', 'PROPN'), ('‹#›', 'X'), (' ', 'SPACE'), ('Phases', 'PROPN'), ('compiler', 'NOUN'), ('Symbol', 'PROPN'), ('table', 'NOUN'), ('Error', 'PROPN'), ('detection', 'NOUN'), ('recovery', 'NOUN'), ('Lexical', 'PROPN'), ('analysis', 'NOUN'), ('Code', 'PROPN'), ('optimization', 'NOUN'), ('Syntax', 'PROPN'), ('analysis', 'NOUN'), ('Semantic', 'ADJ'), ('analysis', 'NOUN')] 

>> Dependency Tags are: 
[('Code', 'compound'), ('generation', 'nsubj'), (' \t\t', 'ROOT'), ('MOV', 'compound'), ('id3', 'ccomp'), (',', 'punct'), ('R2', 'compound'), ('\t\t', 'acl'), ('MUL', 'npadvmod'), ('#', 'nmod'), ('60.0', 'dobj'), (',', 'punct'), ('R2', 'compound'), ('\t\t', 'compound'), ('MOV', 'compound'), ('id2', 'appos'), (',', 'punct'), ('R1', 'npadvmod'), ('\t\t', 'prep'), ('ADD', 'compound'), ('R2,R1', 'dobj'), ('\t\t', 'prep'), ('MOV', 'compound'), ('R1', 'pobj'), (',', 'punct'), ('id1', 'advmod'), ('   ', 'nummod'), ('Code', 'compound'), ('optimization', 'appos'), (' \t\t', 'ccomp'), ('t1=', 'nsubj'), ('id3', 'ccomp'), ('*', 'punct'), ('60.0', 'nummod'), ('\t\t', 'dobj'), ('id1', 'advmod'), ('=', 'punct'), ('id2', 'dobj'), ('+', 'punct'), ('t1', 'compound'), ('Id3\uf0e0R2', 'amod'), ('Id2\uf0e0R1', 'appos'), ('   ', 'nummod'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), (' ', 'prep'), ('#', 'nmod'), ('2170701', 'npadvmod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ccomp'), ('  ', 'nmod'), ('Unit', 'nmod'), ('1', 'nummod'), ('–', 'punct'), ('Introduction', 'appos'), ('Compiler', 'compound'), ('Design', 'pobj'), ('‹#›', 'punct'), (' ', 'punct'), ('Phases', 'appos'), ('compiler', 'compound'), ('Symbol', 'compound'), ('table', 'compound'), ('Error', 'compound'), ('detection', 'pobj'), ('recovery', 'compound'), ('Lexical', 'compound'), ('analysis', 'compound'), ('Code', 'compound'), ('optimization', 'nmod'), ('Syntax', 'compound'), ('analysis', 'punct'), ('Semantic', 'amod'), ('analysis', 'punct')]

>> Bigrams: 
[[Code, generation], [generation,  		], [ 		, MOV], [MOV, id3], [id3, ,], [,, R2], [R2, 		], [		, MUL], [MUL, #], [#, 60.0], [60.0, ,], [,, R2], [R2, 		], [		, MOV], [MOV, id2], [id2, ,], [,, R1], [R1, 		], [		, ADD], [ADD, R2,R1], [R2,R1, 		], [		, MOV], [MOV, R1], [R1, ,], [,, id1], [id1,    ], [   , Code], [Code, optimization], [optimization,  		], [ 		, t1=], [t1=, id3], [id3, *], [*, 60.0], [60.0, 		], [		, id1], [id1, =], [=, id2], [id2, +], [+, t1], [t1, Id3R2], [Id3R2, Id2R1], [Id2R1,    ], [   , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,  ], [ , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Introduction], [Introduction, Compiler], [Compiler, Design], [Design, ‹#›], [‹#›,  ], [ , Phases], [Phases, compiler], [compiler, Symbol], [Symbol, table], [table, Error], [Error, detection], [detection, recovery], [recovery, Lexical], [Lexical, analysis], [analysis, Code], [Code, optimization], [optimization, Syntax], [Syntax, analysis], [analysis, Semantic], [Semantic, analysis]]

>> Trigrams: 
[[Code, generation,  		], [generation,  		, MOV], [ 		, MOV, id3], [MOV, id3, ,], [id3, ,, R2], [,, R2, 		], [R2, 		, MUL], [		, MUL, #], [MUL, #, 60.0], [#, 60.0, ,], [60.0, ,, R2], [,, R2, 		], [R2, 		, MOV], [		, MOV, id2], [MOV, id2, ,], [id2, ,, R1], [,, R1, 		], [R1, 		, ADD], [		, ADD, R2,R1], [ADD, R2,R1, 		], [R2,R1, 		, MOV], [		, MOV, R1], [MOV, R1, ,], [R1, ,, id1], [,, id1,    ], [id1,    , Code], [   , Code, optimization], [Code, optimization,  		], [optimization,  		, t1=], [ 		, t1=, id3], [t1=, id3, *], [id3, *, 60.0], [*, 60.0, 		], [60.0, 		, id1], [		, id1, =], [id1, =, id2], [=, id2, +], [id2, +, t1], [+, t1, Id3R2], [t1, Id3R2, Id2R1], [Id3R2, Id2R1,    ], [Id2R1,    , Prof.], [   , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,  ], [Kagathara,  , #], [ , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Introduction], [–, Introduction, Compiler], [Introduction, Compiler, Design], [Compiler, Design, ‹#›], [Design, ‹#›,  ], [‹#›,  , Phases], [ , Phases, compiler], [Phases, compiler, Symbol], [compiler, Symbol, table], [Symbol, table, Error], [table, Error, detection], [Error, detection, recovery], [detection, recovery, Lexical], [recovery, Lexical, analysis], [Lexical, analysis, Code], [analysis, Code, optimization], [Code, optimization, Syntax], [optimization, Syntax, analysis], [Syntax, analysis, Semantic], [analysis, Semantic, analysis]]

>> Noun Phrases are: 
[Code generation, R2 		MOV id2, ADD R2,R1, MOV R1, id1    Code optimization, t1=, = id2, t1 Id3R2 Id2R1, Prof. Dixita B Kagathara, (CD, Introduction, Compiler Design, compiler Symbol table Error detection]

>> Named Entities are: 
[('MOV', 'ORG'), ('R2', 'GPE'), ('60.0', 'MONEY'), ('R2', 'GPE'), ('MOV', 'NORP'), ('MOV R1', 'ORG'), ('60.0', 'CARDINAL'), ('Dixita', 'PERSON'), ('Kagathara', 'PERSON'), ('Syntax', 'ORG')]


============================ Sentence 84 =============================

Intermediate code  Code generation Target Program Source program   Analysis Phase Synthesis Phase  	Variable   


>> Tokens are: 
[Intermediate, code,  , Code, generation, Target, Program, Source, program,   , Analysis, Phase, Synthesis, Phase,  	, Variable,  ] 

>> PoS Tags are: 
[('Intermediate', 'PROPN'), ('code', 'NOUN'), (' ', 'SPACE'), ('Code', 'PROPN'), ('generation', 'NOUN'), ('Target', 'PROPN'), ('Program', 'PROPN'), ('Source', 'PROPN'), ('program', 'NOUN'), ('  ', 'SPACE'), ('Analysis', 'PROPN'), ('Phase', 'PROPN'), ('Synthesis', 'PROPN'), ('Phase', 'PROPN'), (' \t', 'SPACE'), ('Variable', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Intermediate', 'compound'), ('code', 'compound'), (' ', 'compound'), ('Code', 'compound'), ('generation', 'compound'), ('Target', 'compound'), ('Program', 'compound'), ('Source', 'compound'), ('program', 'compound'), ('  ', 'ROOT'), ('Analysis', 'compound'), ('Phase', 'npadvmod'), ('Synthesis', 'compound'), ('Phase', 'appos'), (' \t', 'compound'), ('Variable', 'appos'), (' ', 'prep')]

>> Bigrams: 
[[Intermediate, code], [code,  ], [ , Code], [Code, generation], [generation, Target], [Target, Program], [Program, Source], [Source, program], [program,   ], [  , Analysis], [Analysis, Phase], [Phase, Synthesis], [Synthesis, Phase], [Phase,  	], [ 	, Variable], [Variable,  ]]

>> Trigrams: 
[[Intermediate, code,  ], [code,  , Code], [ , Code, generation], [Code, generation, Target], [generation, Target, Program], [Target, Program, Source], [Program, Source, program], [Source, program,   ], [program,   , Analysis], [  , Analysis, Phase], [Analysis, Phase, Synthesis], [Phase, Synthesis, Phase], [Synthesis, Phase,  	], [Phase,  	, Variable], [ 	, Variable,  ]]

>> Noun Phrases are: 
[Synthesis Phase,  	Variable]

>> Named Entities are: 
[('Target Program Source', 'ORG'), ('Analysis Phase Synthesis Phase', 'ORG')]


============================ Sentence 85 =============================

Name	Type	Address 	Position	Float	0001 	Initial 	Float	0005 


>> Tokens are: 
[	, Type, 	, Address, 	, Position, 	, Float, 	, 0001, 	, Initial, 	, Float, 	, 0005] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('Type', 'PROPN'), ('\t', 'SPACE'), ('Address', 'PROPN'), ('\t', 'SPACE'), ('Position', 'PROPN'), ('\t', 'SPACE'), ('Float', 'PROPN'), ('\t', 'SPACE'), ('0001', 'NUM'), ('\t', 'SPACE'), ('Initial', 'PROPN'), ('\t', 'SPACE'), ('Float', 'PROPN'), ('\t', 'SPACE'), ('0005', 'NUM')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('Type', 'compound'), ('\t', 'compound'), ('Address', 'compound'), ('\t', 'compound'), ('Position', 'compound'), ('\t', 'compound'), ('Float', 'compound'), ('\t', 'ROOT'), ('0001', 'nummod'), ('\t', 'compound'), ('Initial', 'compound'), ('\t', 'compound'), ('Float', 'compound'), ('\t', 'appos'), ('0005', 'punct')]

>> Bigrams: 
[[	, Type], [Type, 	], [	, Address], [Address, 	], [	, Position], [Position, 	], [	, Float], [Float, 	], [	, 0001], [0001, 	], [	, Initial], [Initial, 	], [	, Float], [Float, 	], [	, 0005]]

>> Trigrams: 
[[	, Type, 	], [Type, 	, Address], [	, Address, 	], [Address, 	, Position], [	, Position, 	], [Position, 	, Float], [	, Float, 	], [Float, 	, 0001], [	, 0001, 	], [0001, 	, Initial], [	, Initial, 	], [Initial, 	, Float], [	, Float, 	], [Float, 	, 0005]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('0001', 'DATE')]


============================ Sentence 86 =============================

	Rate	Float	0009      


>> Tokens are: 
[	, Rate, 	, Float, 	, 0009,     ] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('Rate', 'NOUN'), ('\t', 'SPACE'), ('Float', 'PROPN'), ('\t', 'SPACE'), ('0009', 'NUM'), ('    ', 'SPACE')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('Rate', 'compound'), ('\t', 'compound'), ('Float', 'compound'), ('\t', 'ROOT'), ('0009', 'nummod'), ('    ', 'punct')]

>> Bigrams: 
[[	, Rate], [Rate, 	], [	, Float], [Float, 	], [	, 0009], [0009,     ]]

>> Trigrams: 
[[	, Rate, 	], [Rate, 	, Float], [	, Float, 	], [Float, 	, 0009], [	, 0009,     ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('0009', 'DATE')]


============================ Sentence 87 =============================

Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara   


>> Tokens are: 
[Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara,  ] 

>> PoS Tags are: 
[('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'nsubj'), ('#', 'appos'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'dep'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'ROOT'), ('‹#›', 'punct'), ('  ', 'appos'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), (' ', 'punct')]

>> Bigrams: 
[[Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,  ]]

>> Trigrams: 
[[Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,  ]]

>> Noun Phrases are: 
[Prof. Jay R Dhamsaniya, (PS, Unit, Prof. Dixita B Kagathara]

>> Named Entities are: 
[('Jay R Dhamsaniya', 'ORG'), ('PS', 'ORG'), ('Dixita', 'PERSON'), ('Kagathara', 'PERSON')]


============================ Sentence 88 =============================

#2170701 (CD)      Unit 1– Introduction to Compiler Design ‹#›   


>> Tokens are: 
[#, 2170701, (, CD, ),   , ,   , Unit, 1, –, Introduction, Compiler, Design, ‹#›,  ] 

>> PoS Tags are: 
[('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Introduction', 'NOUN'), ('Compiler', 'PROPN'), ('Design', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('#', 'nmod'), ('2170701', 'nsubj'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dep'), ('Unit', 'npadvmod'), ('1', 'nummod'), ('–', 'punct'), ('Introduction', 'appos'), ('Compiler', 'compound'), ('Design', 'pobj'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Introduction], [Introduction, Compiler], [Compiler, Design], [Design, ‹#›], [‹#›,  ]]

>> Trigrams: 
[[#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Introduction], [–, Introduction, Compiler], [Introduction, Compiler, Design], [Compiler, Design, ‹#›], [Design, ‹#›,  ]]

>> Noun Phrases are: 
[(CD, Introduction, Compiler Design]

>> Named Entities are: 
[]


============================ Sentence 89 =============================

Exercise Write output of all the phases of compiler for following statements: x = b-c*2 I= 


>> Tokens are: 
[Exercise, Write, output, phases, compiler, following, statements, :, x, =, b, -, c*2, =] 

>> PoS Tags are: 
[('Exercise', 'NOUN'), ('Write', 'VERB'), ('output', 'NOUN'), ('phases', 'NOUN'), ('compiler', 'NOUN'), ('following', 'VERB'), ('statements', 'NOUN'), (':', 'PUNCT'), ('x', 'X'), ('=', 'NUM'), ('b', 'X'), ('-', 'PUNCT'), ('c*2', 'PROPN'), ('=', 'PUNCT')] 

>> Dependency Tags are: 
[('Exercise', 'nsubj'), ('Write', 'ROOT'), ('output', 'dobj'), ('phases', 'pobj'), ('compiler', 'pobj'), ('following', 'pcomp'), ('statements', 'dobj'), (':', 'punct'), ('x', 'punct'), ('=', 'punct'), ('b', 'prep'), ('-', 'punct'), ('c*2', 'appos'), ('=', 'punct')]

>> Bigrams: 
[[Exercise, Write], [Write, output], [output, phases], [phases, compiler], [compiler, following], [following, statements], [statements, :], [:, x], [x, =], [=, b], [b, -], [-, c*2], [c*2, =]]

>> Trigrams: 
[[Exercise, Write, output], [Write, output, phases], [output, phases, compiler], [phases, compiler, following], [compiler, following, statements], [following, statements, :], [statements, :, x], [:, x, =], [x, =, b], [=, b, -], [b, -, c*2], [-, c*2, =]]

>> Noun Phrases are: 
[Exercise, output, all the phases, compiler, statements, = b-c*2, I]

>> Named Entities are: 
[]


============================ Sentence 90 =============================

p*n*r/100 


>> Tokens are: 
[p*n*r/100] 

>> PoS Tags are: 
[('p*n*r/100', 'PROPN')] 

>> Dependency Tags are: 
[('p*n*r/100', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[p*n*r/100]

>> Named Entities are: 
[]


============================ Sentence 91 =============================

 	       


>> Tokens are: 
[ 	      ] 

>> PoS Tags are: 
[(' \t      ', 'SPACE')] 

>> Dependency Tags are: 
[(' \t      ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 92 =============================

Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara   


>> Tokens are: 
[Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara,  ] 

>> PoS Tags are: 
[('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'nsubj'), ('#', 'appos'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'dep'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'ROOT'), ('‹#›', 'punct'), ('  ', 'appos'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), (' ', 'punct')]

>> Bigrams: 
[[Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,  ]]

>> Trigrams: 
[[Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,  ]]

>> Noun Phrases are: 
[Prof. Jay R Dhamsaniya, (PS, Unit, Prof. Dixita B Kagathara]

>> Named Entities are: 
[('PS', 'ORG'), ('Dixita', 'PERSON'), ('Kagathara', 'PERSON')]


============================ Sentence 93 =============================

#2170701 (CD)      Unit 1 – Introduction to Compiler Design ‹#›   


>> Tokens are: 
[#, 2170701, (, CD, ),   , ,   , Unit, 1, –, Introduction, Compiler, Design, ‹#›,  ] 

>> PoS Tags are: 
[('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Introduction', 'NOUN'), ('Compiler', 'PROPN'), ('Design', 'PROPN'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('#', 'nmod'), ('2170701', 'nsubj'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dep'), ('Unit', 'npadvmod'), ('1', 'nummod'), ('–', 'punct'), ('Introduction', 'appos'), ('Compiler', 'compound'), ('Design', 'pobj'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Introduction], [Introduction, Compiler], [Compiler, Design], [Design, ‹#›], [‹#›,  ]]

>> Trigrams: 
[[#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Introduction], [–, Introduction, Compiler], [Introduction, Compiler, Design], [Compiler, Design, ‹#›], [Design, ‹#›,  ]]

>> Noun Phrases are: 
[(CD, Introduction, Compiler Design]

>> Named Entities are: 
[]


============================ Sentence 94 =============================

Grouping of Phases        Front end & back end (Grouping of phases) Depends primarily on source language and largely independent of the target machine. 


>> Tokens are: 
[Grouping, Phases,        , end, &, end, (, Grouping, phases, ), Depends, primarily, source, language, largely, independent, target, machine, .] 

>> PoS Tags are: 
[('Grouping', 'VERB'), ('Phases', 'PROPN'), ('       ', 'SPACE'), ('end', 'NOUN'), ('&', 'CCONJ'), ('end', 'NOUN'), ('(', 'PUNCT'), ('Grouping', 'VERB'), ('phases', 'NOUN'), (')', 'PUNCT'), ('Depends', 'VERB'), ('primarily', 'ADV'), ('source', 'NOUN'), ('language', 'NOUN'), ('largely', 'ADV'), ('independent', 'ADJ'), ('target', 'NOUN'), ('machine', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Grouping', 'nmod'), ('Phases', 'pobj'), ('       ', 'nmod'), ('end', 'nsubj'), ('&', 'cc'), ('end', 'conj'), ('(', 'punct'), ('Grouping', 'appos'), ('phases', 'pobj'), (')', 'punct'), ('Depends', 'ROOT'), ('primarily', 'advmod'), ('source', 'compound'), ('language', 'pobj'), ('largely', 'advmod'), ('independent', 'conj'), ('target', 'compound'), ('machine', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Grouping, Phases], [Phases,        ], [       , end], [end, &], [&, end], [end, (], [(, Grouping], [Grouping, phases], [phases, )], [), Depends], [Depends, primarily], [primarily, source], [source, language], [language, largely], [largely, independent], [independent, target], [target, machine], [machine, .]]

>> Trigrams: 
[[Grouping, Phases,        ], [Phases,        , end], [       , end, &], [end, &, end], [&, end, (], [end, (, Grouping], [(, Grouping, phases], [Grouping, phases, )], [phases, ), Depends], [), Depends, primarily], [Depends, primarily, source], [primarily, source, language], [source, language, largely], [language, largely, independent], [largely, independent, target], [independent, target, machine], [target, machine, .]]

>> Noun Phrases are: 
[Phases, back end, phases, source language, the target machine]

>> Named Entities are: 
[]


============================ Sentence 95 =============================

It includes following phases:  Lexical analysis Syntax analysis   


>> Tokens are: 
[includes, following, phases, :,  , Lexical, analysis, Syntax, analysis,  ] 

>> PoS Tags are: 
[('includes', 'VERB'), ('following', 'VERB'), ('phases', 'NOUN'), (':', 'PUNCT'), (' ', 'SPACE'), ('Lexical', 'ADJ'), ('analysis', 'NOUN'), ('Syntax', 'PROPN'), ('analysis', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('includes', 'ROOT'), ('following', 'xcomp'), ('phases', 'dobj'), (':', 'punct'), (' ', 'dobj'), ('Lexical', 'amod'), ('analysis', 'compound'), ('Syntax', 'compound'), ('analysis', 'appos'), (' ', 'punct')]

>> Bigrams: 
[[includes, following], [following, phases], [phases, :], [:,  ], [ , Lexical], [Lexical, analysis], [analysis, Syntax], [Syntax, analysis], [analysis,  ]]

>> Trigrams: 
[[includes, following, phases], [following, phases, :], [phases, :,  ], [:,  , Lexical], [ , Lexical, analysis], [Lexical, analysis, Syntax], [analysis, Syntax, analysis], [Syntax, analysis,  ]]

>> Noun Phrases are: 
[It, phases, Lexical analysis Syntax analysis]

>> Named Entities are: 
[('Syntax', 'ORG')]


============================ Sentence 96 =============================

Semantic analysis Intermediate code generation  Creation of symbol table   


>> Tokens are: 
[Semantic, analysis, Intermediate, code, generation,  , Creation, symbol, table,  ] 

>> PoS Tags are: 
[('Semantic', 'ADJ'), ('analysis', 'NOUN'), ('Intermediate', 'PROPN'), ('code', 'NOUN'), ('generation', 'NOUN'), (' ', 'SPACE'), ('Creation', 'PROPN'), ('symbol', 'NOUN'), ('table', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Semantic', 'amod'), ('analysis', 'compound'), ('Intermediate', 'compound'), ('code', 'compound'), ('generation', 'ROOT'), (' ', 'punct'), ('Creation', 'appos'), ('symbol', 'compound'), ('table', 'pobj'), (' ', 'npadvmod')]

>> Bigrams: 
[[Semantic, analysis], [analysis, Intermediate], [Intermediate, code], [code, generation], [generation,  ], [ , Creation], [Creation, symbol], [symbol, table], [table,  ]]

>> Trigrams: 
[[Semantic, analysis, Intermediate], [analysis, Intermediate, code], [Intermediate, code, generation], [code, generation,  ], [generation,  , Creation], [ , Creation, symbol], [Creation, symbol, table], [symbol, table,  ]]

>> Noun Phrases are: 
[Semantic analysis Intermediate code generation, Creation, symbol table]

>> Named Entities are: 
[]


============================ Sentence 97 =============================

Front end Depends on target machine and do not depends on source program. 


>> Tokens are: 
[end, Depends, target, machine, depends, source, program, .] 

>> PoS Tags are: 
[('end', 'NOUN'), ('Depends', 'VERB'), ('target', 'NOUN'), ('machine', 'NOUN'), ('depends', 'VERB'), ('source', 'NOUN'), ('program', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('end', 'nsubj'), ('Depends', 'ROOT'), ('target', 'compound'), ('machine', 'pobj'), ('depends', 'conj'), ('source', 'compound'), ('program', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[end, Depends], [Depends, target], [target, machine], [machine, depends], [depends, source], [source, program], [program, .]]

>> Trigrams: 
[[end, Depends, target], [Depends, target, machine], [target, machine, depends], [machine, depends, source], [depends, source, program], [source, program, .]]

>> Noun Phrases are: 
[Front end, target machine, source program]

>> Named Entities are: 
[('Front end Depends', 'ORG')]


============================ Sentence 98 =============================

It includes following phases:  Code optimization  Code generation phase   


>> Tokens are: 
[includes, following, phases, :,  , Code, optimization,  , Code, generation, phase,  ] 

>> PoS Tags are: 
[('includes', 'VERB'), ('following', 'VERB'), ('phases', 'NOUN'), (':', 'PUNCT'), (' ', 'SPACE'), ('Code', 'NOUN'), ('optimization', 'NOUN'), (' ', 'SPACE'), ('Code', 'PROPN'), ('generation', 'NOUN'), ('phase', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('includes', 'ROOT'), ('following', 'xcomp'), ('phases', 'dobj'), (':', 'punct'), (' ', 'compound'), ('Code', 'compound'), ('optimization', 'nmod'), (' ', 'compound'), ('Code', 'compound'), ('generation', 'compound'), ('phase', 'dobj'), (' ', 'punct')]

>> Bigrams: 
[[includes, following], [following, phases], [phases, :], [:,  ], [ , Code], [Code, optimization], [optimization,  ], [ , Code], [Code, generation], [generation, phase], [phase,  ]]

>> Trigrams: 
[[includes, following, phases], [following, phases, :], [phases, :,  ], [:,  , Code], [ , Code, optimization], [Code, optimization,  ], [optimization,  , Code], [ , Code, generation], [Code, generation, phase], [generation, phase,  ]]

>> Noun Phrases are: 
[It, phases,  Code optimization  Code generation phase]

>> Named Entities are: 
[]


============================ Sentence 99 =============================

Error handling and symbol table operation    Back end    Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1 – Introduction to Compiler Design ‹#›  Difference between compiler & interpreter  	Compiler 	Interpreter  	Scans the entire program and translates it as a whole into machine code. 


>> Tokens are: 
[Error, handling, symbol, table, operation,    , end,    , Prof., Dixita, B, Kagathara,  , #, 2170701, (, CD, ),   , ,   , Unit, 1, –, Introduction, Compiler, Design, ‹#›,  , Difference, compiler, &, interpreter,  	, Compiler, 	, Interpreter,  	, Scans, entire, program, translates, machine, code, .] 

>> PoS Tags are: 
[('Error', 'PROPN'), ('handling', 'NOUN'), ('symbol', 'NOUN'), ('table', 'NOUN'), ('operation', 'NOUN'), ('   ', 'SPACE'), ('end', 'NOUN'), ('   ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), (' ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Introduction', 'NOUN'), ('Compiler', 'PROPN'), ('Design', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE'), ('Difference', 'NOUN'), ('compiler', 'NOUN'), ('&', 'CCONJ'), ('interpreter', 'NOUN'), (' \t', 'SPACE'), ('Compiler', 'PROPN'), ('\t', 'SPACE'), ('Interpreter', 'PROPN'), (' \t', 'SPACE'), ('Scans', 'PROPN'), ('entire', 'ADJ'), ('program', 'NOUN'), ('translates', 'VERB'), ('machine', 'NOUN'), ('code', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Error', 'nmod'), ('handling', 'nmod'), ('symbol', 'compound'), ('table', 'conj'), ('operation', 'nsubj'), ('   ', 'nummod'), ('end', 'npadvmod'), ('   ', 'nummod'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), (' ', 'prep'), ('#', 'nmod'), ('2170701', 'npadvmod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'dep'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Introduction', 'appos'), ('Compiler', 'compound'), ('Design', 'pobj'), ('‹#›', 'punct'), (' ', 'compound'), ('Difference', 'nsubj'), ('compiler', 'nmod'), ('&', 'cc'), ('interpreter', 'conj'), (' \t', 'compound'), ('Compiler', 'compound'), ('\t', 'compound'), ('Interpreter', 'compound'), (' \t', 'pobj'), ('Scans', 'ROOT'), ('entire', 'amod'), ('program', 'dobj'), ('translates', 'conj'), ('machine', 'compound'), ('code', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Error, handling], [handling, symbol], [symbol, table], [table, operation], [operation,    ], [   , end], [end,    ], [   , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,  ], [ , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Introduction], [Introduction, Compiler], [Compiler, Design], [Design, ‹#›], [‹#›,  ], [ , Difference], [Difference, compiler], [compiler, &], [&, interpreter], [interpreter,  	], [ 	, Compiler], [Compiler, 	], [	, Interpreter], [Interpreter,  	], [ 	, Scans], [Scans, entire], [entire, program], [program, translates], [translates, machine], [machine, code], [code, .]]

>> Trigrams: 
[[Error, handling, symbol], [handling, symbol, table], [symbol, table, operation], [table, operation,    ], [operation,    , end], [   , end,    ], [end,    , Prof.], [   , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,  ], [Kagathara,  , #], [ , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Introduction], [–, Introduction, Compiler], [Introduction, Compiler, Design], [Compiler, Design, ‹#›], [Design, ‹#›,  ], [‹#›,  , Difference], [ , Difference, compiler], [Difference, compiler, &], [compiler, &, interpreter], [&, interpreter,  	], [interpreter,  	, Compiler], [ 	, Compiler, 	], [Compiler, 	, Interpreter], [	, Interpreter,  	], [Interpreter,  	, Scans], [ 	, Scans, entire], [Scans, entire, program], [entire, program, translates], [program, translates, machine], [translates, machine, code], [machine, code, .]]

>> Noun Phrases are: 
[Error handling and symbol table operation,    Prof. Dixita B Kagathara, (CD, Unit, Introduction, Compiler Design,  Difference, the entire program, it, a whole, machine code]

>> Named Entities are: 
[('Dixita', 'PERSON'), ('Kagathara', 'PERSON'), ('Scans', 'NORP')]


============================ Sentence 100 =============================

	It translates program’s one statement at a time. 


>> Tokens are: 
[	, translates, program, statement, time, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('translates', 'VERB'), ('program', 'NOUN'), ('statement', 'NOUN'), ('time', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'dep'), ('translates', 'ROOT'), ('program', 'poss'), ('statement', 'dobj'), ('time', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[	, translates], [translates, program], [program, statement], [statement, time], [time, .]]

>> Trigrams: 
[[	, translates, program], [translates, program, statement], [program, statement, time], [statement, time, .]]

>> Noun Phrases are: 
[It, program’s one statement, a time]

>> Named Entities are: 
[('one', 'CARDINAL')]


============================ Sentence 101 =============================

 	 


>> Tokens are: 
[ 	] 

>> PoS Tags are: 
[(' \t', 'SPACE')] 

>> Dependency Tags are: 
[(' \t', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 102 =============================

It generates intermediate code. 


>> Tokens are: 
[generates, intermediate, code, .] 

>> PoS Tags are: 
[('generates', 'VERB'), ('intermediate', 'ADJ'), ('code', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('generates', 'ROOT'), ('intermediate', 'amod'), ('code', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[generates, intermediate], [intermediate, code], [code, .]]

>> Trigrams: 
[[generates, intermediate, code], [intermediate, code, .]]

>> Noun Phrases are: 
[It, intermediate code]

>> Named Entities are: 
[]


============================ Sentence 103 =============================

	It does not generate intermediate code. 


>> Tokens are: 
[	, generate, intermediate, code, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('generate', 'VERB'), ('intermediate', 'ADJ'), ('code', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'dep'), ('generate', 'ROOT'), ('intermediate', 'amod'), ('code', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[	, generate], [generate, intermediate], [intermediate, code], [code, .]]

>> Trigrams: 
[[	, generate, intermediate], [generate, intermediate, code], [intermediate, code, .]]

>> Noun Phrases are: 
[It, intermediate code]

>> Named Entities are: 
[]


============================ Sentence 104 =============================

 	Memory requirement is more. 


>> Tokens are: 
[ 	, Memory, requirement, .] 

>> PoS Tags are: 
[(' \t', 'SPACE'), ('Memory', 'NOUN'), ('requirement', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' \t', 'compound'), ('Memory', 'compound'), ('requirement', 'nsubj'), ('.', 'punct')]

>> Bigrams: 
[[ 	, Memory], [Memory, requirement], [requirement, .]]

>> Trigrams: 
[[ 	, Memory, requirement], [Memory, requirement, .]]

>> Noun Phrases are: 
[ 	Memory requirement]

>> Named Entities are: 
[]


============================ Sentence 105 =============================

	Memory requirement is less. 


>> Tokens are: 
[	, Memory, requirement, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('Memory', 'PROPN'), ('requirement', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('Memory', 'compound'), ('requirement', 'nsubj'), ('.', 'punct')]

>> Bigrams: 
[[	, Memory], [Memory, requirement], [requirement, .]]

>> Trigrams: 
[[	, Memory, requirement], [Memory, requirement, .]]

>> Noun Phrases are: 
[	Memory requirement]

>> Named Entities are: 
[]


============================ Sentence 106 =============================

 	An error is displayed after entire program is checked. 


>> Tokens are: 
[ 	, error, displayed, entire, program, checked, .] 

>> PoS Tags are: 
[(' \t', 'SPACE'), ('error', 'NOUN'), ('displayed', 'VERB'), ('entire', 'ADJ'), ('program', 'NOUN'), ('checked', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' \t', 'nummod'), ('error', 'nsubjpass'), ('displayed', 'ROOT'), ('entire', 'amod'), ('program', 'nsubjpass'), ('checked', 'advcl'), ('.', 'punct')]

>> Bigrams: 
[[ 	, error], [error, displayed], [displayed, entire], [entire, program], [program, checked], [checked, .]]

>> Trigrams: 
[[ 	, error, displayed], [error, displayed, entire], [displayed, entire, program], [entire, program, checked], [program, checked, .]]

>> Noun Phrases are: 
[ 	An error, entire program]

>> Named Entities are: 
[]


============================ Sentence 107 =============================

	An error is displayed for every instruction interpreted if any. 


>> Tokens are: 
[	, error, displayed, instruction, interpreted, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('error', 'NOUN'), ('displayed', 'VERB'), ('instruction', 'NOUN'), ('interpreted', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'dep'), ('error', 'nsubjpass'), ('displayed', 'ROOT'), ('instruction', 'nsubj'), ('interpreted', 'advcl'), ('.', 'punct')]

>> Bigrams: 
[[	, error], [error, displayed], [displayed, instruction], [instruction, interpreted], [interpreted, .]]

>> Trigrams: 
[[	, error, displayed], [error, displayed, instruction], [displayed, instruction, interpreted], [instruction, interpreted, .]]

>> Noun Phrases are: 
[An error, every instruction]

>> Named Entities are: 
[]


============================ Sentence 108 =============================

 	Example: C compiler 	Example: Basic, Python, Ruby      Prof. Dixita B Kagathara  #2170701 (CD)       


>> Tokens are: 
[ 	, Example, :, C, compiler,  	, Example, :, Basic, ,, Python, ,, Ruby,       , Prof., Dixita, B, Kagathara,  , #, 2170701, (, CD, ),   , ,   ] 

>> PoS Tags are: 
[(' \t', 'SPACE'), ('Example', 'NOUN'), (':', 'PUNCT'), ('C', 'NOUN'), ('compiler', 'NOUN'), ('\xa0\t', 'SPACE'), ('Example', 'NOUN'), (':', 'PUNCT'), ('Basic', 'PROPN'), (',', 'PUNCT'), ('Python', 'PROPN'), (',', 'PUNCT'), ('Ruby', 'PROPN'), ('\xa0     ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), (' ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE')] 

>> Dependency Tags are: 
[(' \t', 'nummod'), ('Example', 'nsubj'), (':', 'punct'), ('C', 'compound'), ('compiler', 'appos'), ('\xa0\t', 'compound'), ('Example', 'appos'), (':', 'punct'), ('Basic', 'appos'), (',', 'punct'), ('Python', 'conj'), (',', 'punct'), ('Ruby', 'compound'), ('\xa0     ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), (' ', 'acl'), ('#', 'nmod'), ('2170701', 'npadvmod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'npadvmod')]

>> Bigrams: 
[[ 	, Example], [Example, :], [:, C], [C, compiler], [compiler,  	], [ 	, Example], [Example, :], [:, Basic], [Basic, ,], [,, Python], [Python, ,], [,, Ruby], [Ruby,       ], [      , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,  ], [ , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ]]

>> Trigrams: 
[[ 	, Example, :], [Example, :, C], [:, C, compiler], [C, compiler,  	], [compiler,  	, Example], [ 	, Example, :], [Example, :, Basic], [:, Basic, ,], [Basic, ,, Python], [,, Python, ,], [Python, ,, Ruby], [,, Ruby,       ], [Ruby,       , Prof.], [      , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,  ], [Kagathara,  , #], [ , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ]]

>> Noun Phrases are: 
[ 	Example, C compiler,  	Example, Basic, Python, Ruby      Prof. Dixita B Kagathara, (CD]

>> Named Entities are: 
[('Dixita', 'PERSON'), ('Kagathara', 'PERSON')]


============================ Sentence 109 =============================

Unit 1 – Introduction to Compiler Design ‹#›  Context of Compiler (Cousins of compiler)        Context of compiler (Cousins of compiler) 


>> Tokens are: 
[Unit, 1, –, Introduction, Compiler, Design, ‹#›,  , Context, Compiler, (, Cousins, compiler, ),        , Context, compiler, (, Cousins, compiler, )] 

>> PoS Tags are: 
[('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Introduction', 'NOUN'), ('Compiler', 'PROPN'), ('Design', 'PROPN'), ('‹#›', 'X'), (' ', 'SPACE'), ('Context', 'PROPN'), ('Compiler', 'PROPN'), ('(', 'PUNCT'), ('Cousins', 'PROPN'), ('compiler', 'NOUN'), (')', 'PUNCT'), ('       ', 'SPACE'), ('Context', 'PROPN'), ('compiler', 'NOUN'), ('(', 'PUNCT'), ('Cousins', 'PROPN'), ('compiler', 'NOUN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('Unit', 'nmod'), ('1', 'nummod'), ('–', 'punct'), ('Introduction', 'appos'), ('Compiler', 'compound'), ('Design', 'pobj'), ('‹#›', 'punct'), (' ', 'appos'), ('Context', 'ROOT'), ('Compiler', 'pobj'), ('(', 'punct'), ('Cousins', 'appos'), ('compiler', 'pobj'), (')', 'punct'), ('       ', 'compound'), ('Context', 'conj'), ('compiler', 'pobj'), ('(', 'punct'), ('Cousins', 'appos'), ('compiler', 'pobj'), (')', 'punct')]

>> Bigrams: 
[[Unit, 1], [1, –], [–, Introduction], [Introduction, Compiler], [Compiler, Design], [Design, ‹#›], [‹#›,  ], [ , Context], [Context, Compiler], [Compiler, (], [(, Cousins], [Cousins, compiler], [compiler, )], [),        ], [       , Context], [Context, compiler], [compiler, (], [(, Cousins], [Cousins, compiler], [compiler, )]]

>> Trigrams: 
[[Unit, 1, –], [1, –, Introduction], [–, Introduction, Compiler], [Introduction, Compiler, Design], [Compiler, Design, ‹#›], [Design, ‹#›,  ], [‹#›,  , Context], [ , Context, Compiler], [Context, Compiler, (], [Compiler, (, Cousins], [(, Cousins, compiler], [Cousins, compiler, )], [compiler, ),        ], [),        , Context], [       , Context, compiler], [Context, compiler, (], [compiler, (, Cousins], [(, Cousins, compiler], [Cousins, compiler, )]]

>> Noun Phrases are: 
[Introduction, Compiler Design, Compiler, Cousins, compiler,        Context, compiler, (Cousins, compiler]

>> Named Entities are: 
[]


============================ Sentence 110 =============================

In addition to compiler, many other system programs are required to generate absolute machine code. 


>> Tokens are: 
[addition, compiler, ,, system, programs, required, generate, absolute, machine, code, .] 

>> PoS Tags are: 
[('addition', 'NOUN'), ('compiler', 'NOUN'), (',', 'PUNCT'), ('system', 'NOUN'), ('programs', 'NOUN'), ('required', 'VERB'), ('generate', 'VERB'), ('absolute', 'ADJ'), ('machine', 'NOUN'), ('code', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('addition', 'pobj'), ('compiler', 'pobj'), (',', 'punct'), ('system', 'compound'), ('programs', 'nsubjpass'), ('required', 'ROOT'), ('generate', 'xcomp'), ('absolute', 'amod'), ('machine', 'compound'), ('code', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[addition, compiler], [compiler, ,], [,, system], [system, programs], [programs, required], [required, generate], [generate, absolute], [absolute, machine], [machine, code], [code, .]]

>> Trigrams: 
[[addition, compiler, ,], [compiler, ,, system], [,, system, programs], [system, programs, required], [programs, required, generate], [required, generate, absolute], [generate, absolute, machine], [absolute, machine, code], [machine, code, .]]

>> Noun Phrases are: 
[addition, compiler, many other system programs, absolute machine code]

>> Named Entities are: 
[]


============================ Sentence 111 =============================

These system programs are:  Preprocessor Assembler Linker Loader 


>> Tokens are: 
[system, programs, :,  , Preprocessor, Assembler, Linker, Loader] 

>> PoS Tags are: 
[('system', 'NOUN'), ('programs', 'NOUN'), (':', 'PUNCT'), (' ', 'SPACE'), ('Preprocessor', 'PROPN'), ('Assembler', 'PROPN'), ('Linker', 'PROPN'), ('Loader', 'PROPN')] 

>> Dependency Tags are: 
[('system', 'compound'), ('programs', 'nsubj'), (':', 'punct'), (' ', 'attr'), ('Preprocessor', 'compound'), ('Assembler', 'compound'), ('Linker', 'compound'), ('Loader', 'appos')]

>> Bigrams: 
[[system, programs], [programs, :], [:,  ], [ , Preprocessor], [Preprocessor, Assembler], [Assembler, Linker], [Linker, Loader]]

>> Trigrams: 
[[system, programs, :], [programs, :,  ], [:,  , Preprocessor], [ , Preprocessor, Assembler], [Preprocessor, Assembler, Linker], [Assembler, Linker, Loader]]

>> Noun Phrases are: 
[These system programs, Preprocessor Assembler Linker Loader]

>> Named Entities are: 
[]


============================ Sentence 112 =============================

   Skeletal Source Program Compiler Assembler Source Program Target Assembly   


>> Tokens are: 
[   , Skeletal, Source, Program, Compiler, Assembler, Source, Program, Target, Assembly,  ] 

>> PoS Tags are: 
[('   ', 'SPACE'), ('Skeletal', 'PROPN'), ('Source', 'PROPN'), ('Program', 'PROPN'), ('Compiler', 'PROPN'), ('Assembler', 'PROPN'), ('Source', 'PROPN'), ('Program', 'PROPN'), ('Target', 'PROPN'), ('Assembly', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('   ', 'compound'), ('Skeletal', 'compound'), ('Source', 'compound'), ('Program', 'compound'), ('Compiler', 'compound'), ('Assembler', 'compound'), ('Source', 'compound'), ('Program', 'compound'), ('Target', 'compound'), ('Assembly', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[   , Skeletal], [Skeletal, Source], [Source, Program], [Program, Compiler], [Compiler, Assembler], [Assembler, Source], [Source, Program], [Program, Target], [Target, Assembly], [Assembly,  ]]

>> Trigrams: 
[[   , Skeletal, Source], [Skeletal, Source, Program], [Source, Program, Compiler], [Program, Compiler, Assembler], [Compiler, Assembler, Source], [Assembler, Source, Program], [Source, Program, Target], [Program, Target, Assembly], [Target, Assembly,  ]]

>> Noun Phrases are: 
[   Skeletal Source Program Compiler Assembler Source Program Target Assembly]

>> Named Entities are: 
[]


============================ Sentence 113 =============================

Program Relocatable Object Code Absolute Machine  Code Libraries &  Object Files Linker / Loader Preprocessor    Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1 – Introduction to Compiler Design ‹#›   


>> Tokens are: 
[Program, Relocatable, Object, Code, Absolute, Machine,  , Code, Libraries, &,  , Object, Files, Linker, /, Loader, Preprocessor,    , Prof., Dixita, B, Kagathara,  , #, 2170701, (, CD, ),   , ,   , Unit, 1, –, Introduction, Compiler, Design, ‹#›,  ] 

>> PoS Tags are: 
[('Program', 'PROPN'), ('Relocatable', 'PROPN'), ('Object', 'PROPN'), ('Code', 'PROPN'), ('Absolute', 'PROPN'), ('Machine', 'PROPN'), (' ', 'SPACE'), ('Code', 'PROPN'), ('Libraries', 'PROPN'), ('&', 'CCONJ'), (' ', 'SPACE'), ('Object', 'PROPN'), ('Files', 'PROPN'), ('Linker', 'PROPN'), ('/', 'SYM'), ('Loader', 'PROPN'), ('Preprocessor', 'PROPN'), ('   ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), (' ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Introduction', 'NOUN'), ('Compiler', 'PROPN'), ('Design', 'PROPN'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Program', 'compound'), ('Relocatable', 'compound'), ('Object', 'compound'), ('Code', 'compound'), ('Absolute', 'compound'), ('Machine', 'nmod'), (' ', 'appos'), ('Code', 'compound'), ('Libraries', 'nsubj'), ('&', 'cc'), (' ', 'conj'), ('Object', 'nmod'), ('Files', 'compound'), ('Linker', 'nmod'), ('/', 'punct'), ('Loader', 'compound'), ('Preprocessor', 'appos'), ('   ', 'nummod'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), (' ', 'appos'), ('#', 'nmod'), ('2170701', 'npadvmod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'npadvmod'), ('Unit', 'npadvmod'), ('1', 'nummod'), ('–', 'punct'), ('Introduction', 'appos'), ('Compiler', 'compound'), ('Design', 'pobj'), ('‹#›', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[Program, Relocatable], [Relocatable, Object], [Object, Code], [Code, Absolute], [Absolute, Machine], [Machine,  ], [ , Code], [Code, Libraries], [Libraries, &], [&,  ], [ , Object], [Object, Files], [Files, Linker], [Linker, /], [/, Loader], [Loader, Preprocessor], [Preprocessor,    ], [   , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,  ], [ , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Introduction], [Introduction, Compiler], [Compiler, Design], [Design, ‹#›], [‹#›,  ]]

>> Trigrams: 
[[Program, Relocatable, Object], [Relocatable, Object, Code], [Object, Code, Absolute], [Code, Absolute, Machine], [Absolute, Machine,  ], [Machine,  , Code], [ , Code, Libraries], [Code, Libraries, &], [Libraries, &,  ], [&,  , Object], [ , Object, Files], [Object, Files, Linker], [Files, Linker, /], [Linker, /, Loader], [/, Loader, Preprocessor], [Loader, Preprocessor,    ], [Preprocessor,    , Prof.], [   , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,  ], [Kagathara,  , #], [ , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Introduction], [–, Introduction, Compiler], [Introduction, Compiler, Design], [Compiler, Design, ‹#›], [Design, ‹#›,  ]]

>> Noun Phrases are: 
[Program Relocatable Object Code Absolute Machine  Code Libraries, Object Files Linker / Loader Preprocessor, Prof. Dixita B Kagathara, (CD, Introduction, Compiler Design]

>> Named Entities are: 
[('Files Linker', 'PERSON'), ('Dixita', 'PERSON'), ('Kagathara', 'PERSON')]


============================ Sentence 114 =============================

Context of compiler (Cousins of compiler) 


>> Tokens are: 
[Context, compiler, (, Cousins, compiler, )] 

>> PoS Tags are: 
[('Context', 'PROPN'), ('compiler', 'NOUN'), ('(', 'PUNCT'), ('Cousins', 'PROPN'), ('compiler', 'NOUN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('Context', 'ROOT'), ('compiler', 'pobj'), ('(', 'punct'), ('Cousins', 'appos'), ('compiler', 'pobj'), (')', 'punct')]

>> Bigrams: 
[[Context, compiler], [compiler, (], [(, Cousins], [Cousins, compiler], [compiler, )]]

>> Trigrams: 
[[Context, compiler, (], [compiler, (, Cousins], [(, Cousins, compiler], [Cousins, compiler, )]]

>> Noun Phrases are: 
[Context, compiler, Cousins, compiler]

>> Named Entities are: 
[]


============================ Sentence 115 =============================

    


>> Tokens are: 
[   ] 

>> PoS Tags are: 
[('   ', 'SPACE')] 

>> Dependency Tags are: 
[('   ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 116 =============================

Skeletal Source Program Compiler Assembler Source Program Target Assembly   


>> Tokens are: 
[Skeletal, Source, Program, Compiler, Assembler, Source, Program, Target, Assembly,  ] 

>> PoS Tags are: 
[('Skeletal', 'PROPN'), ('Source', 'PROPN'), ('Program', 'PROPN'), ('Compiler', 'PROPN'), ('Assembler', 'PROPN'), ('Source', 'PROPN'), ('Program', 'PROPN'), ('Target', 'PROPN'), ('Assembly', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Skeletal', 'compound'), ('Source', 'compound'), ('Program', 'compound'), ('Compiler', 'compound'), ('Assembler', 'compound'), ('Source', 'compound'), ('Program', 'compound'), ('Target', 'compound'), ('Assembly', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[Skeletal, Source], [Source, Program], [Program, Compiler], [Compiler, Assembler], [Assembler, Source], [Source, Program], [Program, Target], [Target, Assembly], [Assembly,  ]]

>> Trigrams: 
[[Skeletal, Source, Program], [Source, Program, Compiler], [Program, Compiler, Assembler], [Compiler, Assembler, Source], [Assembler, Source, Program], [Source, Program, Target], [Program, Target, Assembly], [Target, Assembly,  ]]

>> Noun Phrases are: 
[Skeletal Source Program Compiler Assembler Source Program Target Assembly]

>> Named Entities are: 
[]


============================ Sentence 117 =============================

Program Relocatable Object Code Absolute Machine  Code Libraries &  Object Files Linker / Loader Preprocessor Preprocessor Some of the task performed by preprocessor: Macro processing: Allows user to define macros. 


>> Tokens are: 
[Program, Relocatable, Object, Code, Absolute, Machine,  , Code, Libraries, &,  , Object, Files, Linker, /, Loader, Preprocessor, Preprocessor, task, performed, preprocessor, :, Macro, processing, :, Allows, user, define, macros, .] 

>> PoS Tags are: 
[('Program', 'PROPN'), ('Relocatable', 'PROPN'), ('Object', 'PROPN'), ('Code', 'PROPN'), ('Absolute', 'PROPN'), ('Machine', 'PROPN'), (' ', 'SPACE'), ('Code', 'PROPN'), ('Libraries', 'PROPN'), ('&', 'CCONJ'), (' ', 'SPACE'), ('Object', 'PROPN'), ('Files', 'PROPN'), ('Linker', 'PROPN'), ('/', 'SYM'), ('Loader', 'PROPN'), ('Preprocessor', 'PROPN'), ('Preprocessor', 'PROPN'), ('task', 'NOUN'), ('performed', 'VERB'), ('preprocessor', 'NOUN'), (':', 'PUNCT'), ('Macro', 'ADJ'), ('processing', 'NOUN'), (':', 'PUNCT'), ('Allows', 'VERB'), ('user', 'NOUN'), ('define', 'VERB'), ('macros', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Program', 'compound'), ('Relocatable', 'compound'), ('Object', 'compound'), ('Code', 'compound'), ('Absolute', 'compound'), ('Machine', 'nmod'), (' ', 'appos'), ('Code', 'compound'), ('Libraries', 'nsubj'), ('&', 'cc'), (' ', 'conj'), ('Object', 'nmod'), ('Files', 'compound'), ('Linker', 'nmod'), ('/', 'punct'), ('Loader', 'compound'), ('Preprocessor', 'compound'), ('Preprocessor', 'appos'), ('task', 'pobj'), ('performed', 'acl'), ('preprocessor', 'pobj'), (':', 'punct'), ('Macro', 'compound'), ('processing', 'appos'), (':', 'punct'), ('Allows', 'ROOT'), ('user', 'dobj'), ('define', 'advcl'), ('macros', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Program, Relocatable], [Relocatable, Object], [Object, Code], [Code, Absolute], [Absolute, Machine], [Machine,  ], [ , Code], [Code, Libraries], [Libraries, &], [&,  ], [ , Object], [Object, Files], [Files, Linker], [Linker, /], [/, Loader], [Loader, Preprocessor], [Preprocessor, Preprocessor], [Preprocessor, task], [task, performed], [performed, preprocessor], [preprocessor, :], [:, Macro], [Macro, processing], [processing, :], [:, Allows], [Allows, user], [user, define], [define, macros], [macros, .]]

>> Trigrams: 
[[Program, Relocatable, Object], [Relocatable, Object, Code], [Object, Code, Absolute], [Code, Absolute, Machine], [Absolute, Machine,  ], [Machine,  , Code], [ , Code, Libraries], [Code, Libraries, &], [Libraries, &,  ], [&,  , Object], [ , Object, Files], [Object, Files, Linker], [Files, Linker, /], [Linker, /, Loader], [/, Loader, Preprocessor], [Loader, Preprocessor, Preprocessor], [Preprocessor, Preprocessor, task], [Preprocessor, task, performed], [task, performed, preprocessor], [performed, preprocessor, :], [preprocessor, :, Macro], [:, Macro, processing], [Macro, processing, :], [processing, :, Allows], [:, Allows, user], [Allows, user, define], [user, define, macros], [define, macros, .]]

>> Noun Phrases are: 
[Program Relocatable Object Code Absolute Machine  Code Libraries, Object Files Linker / Loader Preprocessor Preprocessor, the task, preprocessor, Macro processing, user, macros]

>> Named Entities are: 
[('Files Linker', 'PERSON')]


============================ Sentence 118 =============================

Ex: #define PI 3.14159265358979323846 File inclusion: A preprocessor may include the header file into the program. 


>> Tokens are: 
[Ex, :, #, define, PI, 3.14159265358979323846, File, inclusion, :, preprocessor, include, header, file, program, .] 

>> PoS Tags are: 
[('Ex', 'NOUN'), (':', 'PUNCT'), ('#', 'NOUN'), ('define', 'VERB'), ('PI', 'PROPN'), ('3.14159265358979323846', 'NUM'), ('File', 'PROPN'), ('inclusion', 'NOUN'), (':', 'PUNCT'), ('preprocessor', 'NOUN'), ('include', 'VERB'), ('header', 'NOUN'), ('file', 'NOUN'), ('program', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Ex', 'nsubj'), (':', 'punct'), ('#', 'appos'), ('define', 'ccomp'), ('PI', 'nmod'), ('3.14159265358979323846', 'nummod'), ('File', 'compound'), ('inclusion', 'dobj'), (':', 'punct'), ('preprocessor', 'nsubj'), ('include', 'ROOT'), ('header', 'compound'), ('file', 'dobj'), ('program', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Ex, :], [:, #], [#, define], [define, PI], [PI, 3.14159265358979323846], [3.14159265358979323846, File], [File, inclusion], [inclusion, :], [:, preprocessor], [preprocessor, include], [include, header], [header, file], [file, program], [program, .]]

>> Trigrams: 
[[Ex, :, #], [:, #, define], [#, define, PI], [define, PI, 3.14159265358979323846], [PI, 3.14159265358979323846, File], [3.14159265358979323846, File, inclusion], [File, inclusion, :], [inclusion, :, preprocessor], [:, preprocessor, include], [preprocessor, include, header], [include, header, file], [header, file, program], [file, program, .]]

>> Noun Phrases are: 
[Ex, #, PI 3.14159265358979323846 File inclusion, A preprocessor, the header file, the program]

>> Named Entities are: 
[('#', 'ORG'), ('PI 3.14159265358979323846 File', 'PRODUCT')]


============================ Sentence 119 =============================

Ex: #include<stdio.h> Rational preprocessor: It provides built in macro for construct like while statement or if statement. 


>> Tokens are: 
[Ex, :, #, include, <, stdio.h, >, Rational, preprocessor, :, provides, built, macro, construct, like, statement, statement, .] 

>> PoS Tags are: 
[('Ex', 'NOUN'), (':', 'PUNCT'), ('#', 'NOUN'), ('include', 'VERB'), ('<', 'X'), ('stdio.h', 'X'), ('>', 'X'), ('Rational', 'PROPN'), ('preprocessor', 'NOUN'), (':', 'PUNCT'), ('provides', 'VERB'), ('built', 'VERB'), ('macro', 'NOUN'), ('construct', 'NOUN'), ('like', 'ADP'), ('statement', 'NOUN'), ('statement', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Ex', 'nsubj'), (':', 'punct'), ('#', 'nsubj'), ('include', 'ROOT'), ('<', 'punct'), ('stdio.h', 'nmod'), ('>', 'compound'), ('Rational', 'amod'), ('preprocessor', 'dobj'), (':', 'punct'), ('provides', 'conj'), ('built', 'xcomp'), ('macro', 'pobj'), ('construct', 'pobj'), ('like', 'prep'), ('statement', 'pobj'), ('statement', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[Ex, :], [:, #], [#, include], [include, <], [<, stdio.h], [stdio.h, >], [>, Rational], [Rational, preprocessor], [preprocessor, :], [:, provides], [provides, built], [built, macro], [macro, construct], [construct, like], [like, statement], [statement, statement], [statement, .]]

>> Trigrams: 
[[Ex, :, #], [:, #, include], [#, include, <], [include, <, stdio.h], [<, stdio.h, >], [stdio.h, >, Rational], [>, Rational, preprocessor], [Rational, preprocessor, :], [preprocessor, :, provides], [:, provides, built], [provides, built, macro], [built, macro, construct], [macro, construct, like], [construct, like, statement], [like, statement, statement], [statement, statement, .]]

>> Noun Phrases are: 
[Ex, #, stdio.h> Rational preprocessor, It, macro, construct, while statement, if statement]

>> Named Entities are: 
[('#', 'CARDINAL')]


============================ Sentence 120 =============================

Language extensions: Add capabilities to the language by using built-in macros. 


>> Tokens are: 
[Language, extensions, :, Add, capabilities, language, built, -, macros, .] 

>> PoS Tags are: 
[('Language', 'NOUN'), ('extensions', 'NOUN'), (':', 'PUNCT'), ('Add', 'VERB'), ('capabilities', 'NOUN'), ('language', 'NOUN'), ('built', 'VERB'), ('-', 'PUNCT'), ('macros', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Language', 'compound'), ('extensions', 'dep'), (':', 'punct'), ('Add', 'ROOT'), ('capabilities', 'dobj'), ('language', 'pobj'), ('built', 'amod'), ('-', 'punct'), ('macros', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Language, extensions], [extensions, :], [:, Add], [Add, capabilities], [capabilities, language], [language, built], [built, -], [-, macros], [macros, .]]

>> Trigrams: 
[[Language, extensions, :], [extensions, :, Add], [:, Add, capabilities], [Add, capabilities, language], [capabilities, language, built], [language, built, -], [built, -, macros], [-, macros, .]]

>> Noun Phrases are: 
[capabilities, the language, built-in macros]

>> Named Entities are: 
[]


============================ Sentence 121 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 122 =============================

Ex: the language equal is a database query language embedded in C. Statement beginning with ## are taken by preprocessor to be database access statement unrelated to C and translated into procedure call on routines that perform the database access. 


>> Tokens are: 
[Ex, :, language, equal, database, query, language, embedded, C., Statement, beginning, #, #, taken, preprocessor, database, access, statement, unrelated, C, translated, procedure, routines, perform, database, access, .] 

>> PoS Tags are: 
[('Ex', 'NOUN'), (':', 'PUNCT'), ('language', 'NOUN'), ('equal', 'ADJ'), ('database', 'NOUN'), ('query', 'NOUN'), ('language', 'NOUN'), ('embedded', 'VERB'), ('C.', 'PROPN'), ('Statement', 'PROPN'), ('beginning', 'VERB'), ('#', 'SYM'), ('#', 'NOUN'), ('taken', 'VERB'), ('preprocessor', 'NOUN'), ('database', 'NOUN'), ('access', 'NOUN'), ('statement', 'NOUN'), ('unrelated', 'ADJ'), ('C', 'NOUN'), ('translated', 'VERB'), ('procedure', 'NOUN'), ('routines', 'NOUN'), ('perform', 'VERB'), ('database', 'NOUN'), ('access', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Ex', 'nsubj'), (':', 'punct'), ('language', 'nsubj'), ('equal', 'amod'), ('database', 'compound'), ('query', 'compound'), ('language', 'attr'), ('embedded', 'acl'), ('C.', 'compound'), ('Statement', 'pobj'), ('beginning', 'acl'), ('#', 'nmod'), ('#', 'pobj'), ('taken', 'conj'), ('preprocessor', 'pobj'), ('database', 'compound'), ('access', 'compound'), ('statement', 'attr'), ('unrelated', 'amod'), ('C', 'pobj'), ('translated', 'conj'), ('procedure', 'compound'), ('routines', 'pobj'), ('perform', 'relcl'), ('database', 'compound'), ('access', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Ex, :], [:, language], [language, equal], [equal, database], [database, query], [query, language], [language, embedded], [embedded, C.], [C., Statement], [Statement, beginning], [beginning, #], [#, #], [#, taken], [taken, preprocessor], [preprocessor, database], [database, access], [access, statement], [statement, unrelated], [unrelated, C], [C, translated], [translated, procedure], [procedure, routines], [routines, perform], [perform, database], [database, access], [access, .]]

>> Trigrams: 
[[Ex, :, language], [:, language, equal], [language, equal, database], [equal, database, query], [database, query, language], [query, language, embedded], [language, embedded, C.], [embedded, C., Statement], [C., Statement, beginning], [Statement, beginning, #], [beginning, #, #], [#, #, taken], [#, taken, preprocessor], [taken, preprocessor, database], [preprocessor, database, access], [database, access, statement], [access, statement, unrelated], [statement, unrelated, C], [unrelated, C, translated], [C, translated, procedure], [translated, procedure, routines], [procedure, routines, perform], [routines, perform, database], [perform, database, access], [database, access, .]]

>> Noun Phrases are: 
[Ex, the language, a database query language, C. Statement, ##, preprocessor, database access statement, C, procedure call, routines, the database access]

>> Named Entities are: 
[('C. Statement', 'GPE'), ('#', 'MONEY')]


============================ Sentence 123 =============================

     Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1 – Introduction to Compiler Design ‹#›   


>> Tokens are: 
[     , Prof., Dixita, B, Kagathara,  , #, 2170701, (, CD, ),   , ,   , Unit, 1, –, Introduction, Compiler, Design, ‹#›,  ] 

>> PoS Tags are: 
[('     ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), (' ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Introduction', 'NOUN'), ('Compiler', 'PROPN'), ('Design', 'PROPN'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('     ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'nsubj'), (' ', 'appos'), ('#', 'nmod'), ('2170701', 'npadvmod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dep'), ('Unit', 'npadvmod'), ('1', 'nummod'), ('–', 'punct'), ('Introduction', 'appos'), ('Compiler', 'compound'), ('Design', 'pobj'), ('‹#›', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[     , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,  ], [ , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Introduction], [Introduction, Compiler], [Compiler, Design], [Design, ‹#›], [‹#›,  ]]

>> Trigrams: 
[[     , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,  ], [Kagathara,  , #], [ , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Introduction], [–, Introduction, Compiler], [Introduction, Compiler, Design], [Compiler, Design, ‹#›], [Design, ‹#›,  ]]

>> Noun Phrases are: 
[     Prof. Dixita B Kagathara, (CD, Introduction, Compiler Design]

>> Named Entities are: 
[('Dixita', 'PERSON'), ('Kagathara', 'PERSON')]


============================ Sentence 124 =============================

Context of compiler (Cousins of compiler) 


>> Tokens are: 
[Context, compiler, (, Cousins, compiler, )] 

>> PoS Tags are: 
[('Context', 'PROPN'), ('compiler', 'NOUN'), ('(', 'PUNCT'), ('Cousins', 'PROPN'), ('compiler', 'NOUN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('Context', 'ROOT'), ('compiler', 'pobj'), ('(', 'punct'), ('Cousins', 'appos'), ('compiler', 'pobj'), (')', 'punct')]

>> Bigrams: 
[[Context, compiler], [compiler, (], [(, Cousins], [Cousins, compiler], [compiler, )]]

>> Trigrams: 
[[Context, compiler, (], [compiler, (, Cousins], [(, Cousins, compiler], [Cousins, compiler, )]]

>> Noun Phrases are: 
[Context, compiler, Cousins, compiler]

>> Named Entities are: 
[]


============================ Sentence 125 =============================

    


>> Tokens are: 
[   ] 

>> PoS Tags are: 
[('   ', 'SPACE')] 

>> Dependency Tags are: 
[('   ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 126 =============================

Skeletal Source Program Compiler Assembler Source Program Target Assembly   


>> Tokens are: 
[Skeletal, Source, Program, Compiler, Assembler, Source, Program, Target, Assembly,  ] 

>> PoS Tags are: 
[('Skeletal', 'PROPN'), ('Source', 'PROPN'), ('Program', 'PROPN'), ('Compiler', 'PROPN'), ('Assembler', 'PROPN'), ('Source', 'PROPN'), ('Program', 'PROPN'), ('Target', 'PROPN'), ('Assembly', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Skeletal', 'compound'), ('Source', 'compound'), ('Program', 'compound'), ('Compiler', 'compound'), ('Assembler', 'compound'), ('Source', 'compound'), ('Program', 'compound'), ('Target', 'compound'), ('Assembly', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[Skeletal, Source], [Source, Program], [Program, Compiler], [Compiler, Assembler], [Assembler, Source], [Source, Program], [Program, Target], [Target, Assembly], [Assembly,  ]]

>> Trigrams: 
[[Skeletal, Source, Program], [Source, Program, Compiler], [Program, Compiler, Assembler], [Compiler, Assembler, Source], [Assembler, Source, Program], [Source, Program, Target], [Program, Target, Assembly], [Target, Assembly,  ]]

>> Noun Phrases are: 
[Skeletal Source Program Compiler Assembler Source Program Target Assembly]

>> Named Entities are: 
[]


============================ Sentence 127 =============================

Program Relocatable Object Code Absolute Machine  Code Libraries &  Object Files Linker / Loader Preprocessor Compiler A compiler is a program that reads a program written in source language and translates it into an equivalent program in target language. 


>> Tokens are: 
[Program, Relocatable, Object, Code, Absolute, Machine,  , Code, Libraries, &,  , Object, Files, Linker, /, Loader, Preprocessor, Compiler, compiler, program, reads, program, written, source, language, translates, equivalent, program, target, language, .] 

>> PoS Tags are: 
[('Program', 'PROPN'), ('Relocatable', 'PROPN'), ('Object', 'PROPN'), ('Code', 'PROPN'), ('Absolute', 'PROPN'), ('Machine', 'PROPN'), (' ', 'SPACE'), ('Code', 'PROPN'), ('Libraries', 'PROPN'), ('&', 'CCONJ'), (' ', 'SPACE'), ('Object', 'PROPN'), ('Files', 'PROPN'), ('Linker', 'PROPN'), ('/', 'SYM'), ('Loader', 'PROPN'), ('Preprocessor', 'PROPN'), ('Compiler', 'PROPN'), ('compiler', 'NOUN'), ('program', 'NOUN'), ('reads', 'VERB'), ('program', 'NOUN'), ('written', 'VERB'), ('source', 'NOUN'), ('language', 'NOUN'), ('translates', 'VERB'), ('equivalent', 'ADJ'), ('program', 'NOUN'), ('target', 'NOUN'), ('language', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Program', 'compound'), ('Relocatable', 'compound'), ('Object', 'compound'), ('Code', 'compound'), ('Absolute', 'compound'), ('Machine', 'nmod'), (' ', 'appos'), ('Code', 'compound'), ('Libraries', 'nsubj'), ('&', 'cc'), (' ', 'conj'), ('Object', 'nmod'), ('Files', 'compound'), ('Linker', 'nmod'), ('/', 'punct'), ('Loader', 'compound'), ('Preprocessor', 'compound'), ('Compiler', 'appos'), ('compiler', 'nsubj'), ('program', 'attr'), ('reads', 'relcl'), ('program', 'dobj'), ('written', 'acl'), ('source', 'compound'), ('language', 'pobj'), ('translates', 'conj'), ('equivalent', 'amod'), ('program', 'pobj'), ('target', 'compound'), ('language', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Program, Relocatable], [Relocatable, Object], [Object, Code], [Code, Absolute], [Absolute, Machine], [Machine,  ], [ , Code], [Code, Libraries], [Libraries, &], [&,  ], [ , Object], [Object, Files], [Files, Linker], [Linker, /], [/, Loader], [Loader, Preprocessor], [Preprocessor, Compiler], [Compiler, compiler], [compiler, program], [program, reads], [reads, program], [program, written], [written, source], [source, language], [language, translates], [translates, equivalent], [equivalent, program], [program, target], [target, language], [language, .]]

>> Trigrams: 
[[Program, Relocatable, Object], [Relocatable, Object, Code], [Object, Code, Absolute], [Code, Absolute, Machine], [Absolute, Machine,  ], [Machine,  , Code], [ , Code, Libraries], [Code, Libraries, &], [Libraries, &,  ], [&,  , Object], [ , Object, Files], [Object, Files, Linker], [Files, Linker, /], [Linker, /, Loader], [/, Loader, Preprocessor], [Loader, Preprocessor, Compiler], [Preprocessor, Compiler, compiler], [Compiler, compiler, program], [compiler, program, reads], [program, reads, program], [reads, program, written], [program, written, source], [written, source, language], [source, language, translates], [language, translates, equivalent], [translates, equivalent, program], [equivalent, program, target], [program, target, language], [target, language, .]]

>> Noun Phrases are: 
[Program Relocatable Object Code Absolute Machine  Code Libraries, Object Files Linker / Loader Preprocessor Compiler, A compiler, a program, a program, source language, it, an equivalent program, target language]

>> Named Entities are: 
[('Files Linker', 'PERSON')]


============================ Sentence 128 =============================

       Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1 – Introduction to Compiler Design ‹#›   


>> Tokens are: 
[       , Prof., Dixita, B, Kagathara,  , #, 2170701, (, CD, ),   , ,   , Unit, 1, –, Introduction, Compiler, Design, ‹#›,  ] 

>> PoS Tags are: 
[('       ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), (' ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Introduction', 'NOUN'), ('Compiler', 'PROPN'), ('Design', 'PROPN'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('       ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'nsubj'), (' ', 'appos'), ('#', 'nmod'), ('2170701', 'npadvmod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dep'), ('Unit', 'npadvmod'), ('1', 'nummod'), ('–', 'punct'), ('Introduction', 'appos'), ('Compiler', 'compound'), ('Design', 'pobj'), ('‹#›', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[       , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,  ], [ , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Introduction], [Introduction, Compiler], [Compiler, Design], [Design, ‹#›], [‹#›,  ]]

>> Trigrams: 
[[       , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,  ], [Kagathara,  , #], [ , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Introduction], [–, Introduction, Compiler], [Introduction, Compiler, Design], [Compiler, Design, ‹#›], [Design, ‹#›,  ]]

>> Noun Phrases are: 
[       Prof. Dixita B Kagathara, (CD, Introduction, Compiler Design]

>> Named Entities are: 
[('Dixita', 'PERSON'), ('Kagathara', 'PERSON')]


============================ Sentence 129 =============================

Context of compiler (Cousins of compiler) 


>> Tokens are: 
[Context, compiler, (, Cousins, compiler, )] 

>> PoS Tags are: 
[('Context', 'PROPN'), ('compiler', 'NOUN'), ('(', 'PUNCT'), ('Cousins', 'PROPN'), ('compiler', 'NOUN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('Context', 'ROOT'), ('compiler', 'pobj'), ('(', 'punct'), ('Cousins', 'appos'), ('compiler', 'pobj'), (')', 'punct')]

>> Bigrams: 
[[Context, compiler], [compiler, (], [(, Cousins], [Cousins, compiler], [compiler, )]]

>> Trigrams: 
[[Context, compiler, (], [compiler, (, Cousins], [(, Cousins, compiler], [Cousins, compiler, )]]

>> Noun Phrases are: 
[Context, compiler, Cousins, compiler]

>> Named Entities are: 
[]


============================ Sentence 130 =============================

    


>> Tokens are: 
[   ] 

>> PoS Tags are: 
[('   ', 'SPACE')] 

>> Dependency Tags are: 
[('   ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 131 =============================

Skeletal Source Program Compiler Assembler Source Program Target Assembly   


>> Tokens are: 
[Skeletal, Source, Program, Compiler, Assembler, Source, Program, Target, Assembly,  ] 

>> PoS Tags are: 
[('Skeletal', 'PROPN'), ('Source', 'PROPN'), ('Program', 'PROPN'), ('Compiler', 'PROPN'), ('Assembler', 'PROPN'), ('Source', 'PROPN'), ('Program', 'PROPN'), ('Target', 'PROPN'), ('Assembly', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Skeletal', 'compound'), ('Source', 'compound'), ('Program', 'compound'), ('Compiler', 'compound'), ('Assembler', 'compound'), ('Source', 'compound'), ('Program', 'compound'), ('Target', 'compound'), ('Assembly', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[Skeletal, Source], [Source, Program], [Program, Compiler], [Compiler, Assembler], [Assembler, Source], [Source, Program], [Program, Target], [Target, Assembly], [Assembly,  ]]

>> Trigrams: 
[[Skeletal, Source, Program], [Source, Program, Compiler], [Program, Compiler, Assembler], [Compiler, Assembler, Source], [Assembler, Source, Program], [Source, Program, Target], [Program, Target, Assembly], [Target, Assembly,  ]]

>> Noun Phrases are: 
[Skeletal Source Program Compiler Assembler Source Program Target Assembly]

>> Named Entities are: 
[]


============================ Sentence 132 =============================

Program Relocatable Object Code Absolute Machine  Code Libraries &  Object Files Linker / Loader Preprocessor Assembler Assembler is a translator which takes the assembly program (mnemonic) as an input and generates the machine code as an output. 


>> Tokens are: 
[Program, Relocatable, Object, Code, Absolute, Machine,  , Code, Libraries, &,  , Object, Files, Linker, /, Loader, Preprocessor, Assembler, Assembler, translator, takes, assembly, program, (, mnemonic, ), input, generates, machine, code, output, .] 

>> PoS Tags are: 
[('Program', 'PROPN'), ('Relocatable', 'PROPN'), ('Object', 'PROPN'), ('Code', 'PROPN'), ('Absolute', 'PROPN'), ('Machine', 'PROPN'), (' ', 'SPACE'), ('Code', 'PROPN'), ('Libraries', 'PROPN'), ('&', 'CCONJ'), (' ', 'SPACE'), ('Object', 'PROPN'), ('Files', 'PROPN'), ('Linker', 'PROPN'), ('/', 'SYM'), ('Loader', 'PROPN'), ('Preprocessor', 'PROPN'), ('Assembler', 'PROPN'), ('Assembler', 'PROPN'), ('translator', 'NOUN'), ('takes', 'VERB'), ('assembly', 'NOUN'), ('program', 'NOUN'), ('(', 'PUNCT'), ('mnemonic', 'NOUN'), (')', 'PUNCT'), ('input', 'NOUN'), ('generates', 'VERB'), ('machine', 'NOUN'), ('code', 'NOUN'), ('output', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Program', 'compound'), ('Relocatable', 'compound'), ('Object', 'compound'), ('Code', 'compound'), ('Absolute', 'compound'), ('Machine', 'nmod'), (' ', 'appos'), ('Code', 'compound'), ('Libraries', 'nmod'), ('&', 'cc'), (' ', 'conj'), ('Object', 'nmod'), ('Files', 'nmod'), ('Linker', 'nmod'), ('/', 'punct'), ('Loader', 'compound'), ('Preprocessor', 'compound'), ('Assembler', 'compound'), ('Assembler', 'nsubj'), ('translator', 'attr'), ('takes', 'relcl'), ('assembly', 'compound'), ('program', 'dobj'), ('(', 'punct'), ('mnemonic', 'appos'), (')', 'punct'), ('input', 'pobj'), ('generates', 'conj'), ('machine', 'compound'), ('code', 'dobj'), ('output', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Program, Relocatable], [Relocatable, Object], [Object, Code], [Code, Absolute], [Absolute, Machine], [Machine,  ], [ , Code], [Code, Libraries], [Libraries, &], [&,  ], [ , Object], [Object, Files], [Files, Linker], [Linker, /], [/, Loader], [Loader, Preprocessor], [Preprocessor, Assembler], [Assembler, Assembler], [Assembler, translator], [translator, takes], [takes, assembly], [assembly, program], [program, (], [(, mnemonic], [mnemonic, )], [), input], [input, generates], [generates, machine], [machine, code], [code, output], [output, .]]

>> Trigrams: 
[[Program, Relocatable, Object], [Relocatable, Object, Code], [Object, Code, Absolute], [Code, Absolute, Machine], [Absolute, Machine,  ], [Machine,  , Code], [ , Code, Libraries], [Code, Libraries, &], [Libraries, &,  ], [&,  , Object], [ , Object, Files], [Object, Files, Linker], [Files, Linker, /], [Linker, /, Loader], [/, Loader, Preprocessor], [Loader, Preprocessor, Assembler], [Preprocessor, Assembler, Assembler], [Assembler, Assembler, translator], [Assembler, translator, takes], [translator, takes, assembly], [takes, assembly, program], [assembly, program, (], [program, (, mnemonic], [(, mnemonic, )], [mnemonic, ), input], [), input, generates], [input, generates, machine], [generates, machine, code], [machine, code, output], [code, output, .]]

>> Noun Phrases are: 
[Program Relocatable Object Code Absolute Machine  Code Libraries &  Object Files Linker / Loader Preprocessor Assembler Assembler, a translator, the assembly program, (mnemonic, an input, the machine code, an output]

>> Named Entities are: 
[('Files Linker', 'PERSON'), ('Assembler Assembler', 'PERSON')]


============================ Sentence 133 =============================

      Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1 – Introduction to Compiler Design ‹#›   


>> Tokens are: 
[      , Prof., Dixita, B, Kagathara,  , #, 2170701, (, CD, ),   , ,   , Unit, 1, –, Introduction, Compiler, Design, ‹#›,  ] 

>> PoS Tags are: 
[('      ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), (' ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Introduction', 'NOUN'), ('Compiler', 'PROPN'), ('Design', 'PROPN'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('      ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'nsubj'), (' ', 'appos'), ('#', 'nmod'), ('2170701', 'npadvmod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dep'), ('Unit', 'npadvmod'), ('1', 'nummod'), ('–', 'punct'), ('Introduction', 'appos'), ('Compiler', 'compound'), ('Design', 'pobj'), ('‹#›', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[      , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,  ], [ , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Introduction], [Introduction, Compiler], [Compiler, Design], [Design, ‹#›], [‹#›,  ]]

>> Trigrams: 
[[      , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,  ], [Kagathara,  , #], [ , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Introduction], [–, Introduction, Compiler], [Introduction, Compiler, Design], [Compiler, Design, ‹#›], [Design, ‹#›,  ]]

>> Noun Phrases are: 
[      Prof. Dixita B Kagathara, (CD, Introduction, Compiler Design]

>> Named Entities are: 
[('Dixita', 'PERSON'), ('Kagathara', 'PERSON')]


============================ Sentence 134 =============================

Context of compiler (Cousins of compiler) 


>> Tokens are: 
[Context, compiler, (, Cousins, compiler, )] 

>> PoS Tags are: 
[('Context', 'PROPN'), ('compiler', 'NOUN'), ('(', 'PUNCT'), ('Cousins', 'PROPN'), ('compiler', 'NOUN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('Context', 'ROOT'), ('compiler', 'pobj'), ('(', 'punct'), ('Cousins', 'appos'), ('compiler', 'pobj'), (')', 'punct')]

>> Bigrams: 
[[Context, compiler], [compiler, (], [(, Cousins], [Cousins, compiler], [compiler, )]]

>> Trigrams: 
[[Context, compiler, (], [compiler, (, Cousins], [(, Cousins, compiler], [Cousins, compiler, )]]

>> Noun Phrases are: 
[Context, compiler, Cousins, compiler]

>> Named Entities are: 
[]


============================ Sentence 135 =============================

    


>> Tokens are: 
[   ] 

>> PoS Tags are: 
[('   ', 'SPACE')] 

>> Dependency Tags are: 
[('   ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 136 =============================

Skeletal Source Program Compiler Assembler Source Program Target Assembly   


>> Tokens are: 
[Skeletal, Source, Program, Compiler, Assembler, Source, Program, Target, Assembly,  ] 

>> PoS Tags are: 
[('Skeletal', 'PROPN'), ('Source', 'PROPN'), ('Program', 'PROPN'), ('Compiler', 'PROPN'), ('Assembler', 'PROPN'), ('Source', 'PROPN'), ('Program', 'PROPN'), ('Target', 'PROPN'), ('Assembly', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Skeletal', 'compound'), ('Source', 'compound'), ('Program', 'compound'), ('Compiler', 'compound'), ('Assembler', 'compound'), ('Source', 'compound'), ('Program', 'compound'), ('Target', 'compound'), ('Assembly', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[Skeletal, Source], [Source, Program], [Program, Compiler], [Compiler, Assembler], [Assembler, Source], [Source, Program], [Program, Target], [Target, Assembly], [Assembly,  ]]

>> Trigrams: 
[[Skeletal, Source, Program], [Source, Program, Compiler], [Program, Compiler, Assembler], [Compiler, Assembler, Source], [Assembler, Source, Program], [Source, Program, Target], [Program, Target, Assembly], [Target, Assembly,  ]]

>> Noun Phrases are: 
[Skeletal Source Program Compiler Assembler Source Program Target Assembly]

>> Named Entities are: 
[]


============================ Sentence 137 =============================

Program Relocatable Object Code Absolute Machine  Code Libraries &  Object Files Linker / Loader Preprocessor Linker Linker  makes a single program from a several files of relocatable machine code. 


>> Tokens are: 
[Program, Relocatable, Object, Code, Absolute, Machine,  , Code, Libraries, &,  , Object, Files, Linker, /, Loader, Preprocessor, Linker, Linker,  , makes, single, program, files, relocatable, machine, code, .] 

>> PoS Tags are: 
[('Program', 'PROPN'), ('Relocatable', 'PROPN'), ('Object', 'PROPN'), ('Code', 'PROPN'), ('Absolute', 'PROPN'), ('Machine', 'PROPN'), (' ', 'SPACE'), ('Code', 'PROPN'), ('Libraries', 'PROPN'), ('&', 'CCONJ'), (' ', 'SPACE'), ('Object', 'PROPN'), ('Files', 'PROPN'), ('Linker', 'PROPN'), ('/', 'SYM'), ('Loader', 'PROPN'), ('Preprocessor', 'PROPN'), ('Linker', 'PROPN'), ('Linker', 'PROPN'), (' ', 'SPACE'), ('makes', 'VERB'), ('single', 'ADJ'), ('program', 'NOUN'), ('files', 'NOUN'), ('relocatable', 'ADJ'), ('machine', 'NOUN'), ('code', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Program', 'compound'), ('Relocatable', 'compound'), ('Object', 'compound'), ('Code', 'compound'), ('Absolute', 'compound'), ('Machine', 'nmod'), (' ', 'appos'), ('Code', 'compound'), ('Libraries', 'nsubj'), ('&', 'cc'), (' ', 'conj'), ('Object', 'nmod'), ('Files', 'compound'), ('Linker', 'nmod'), ('/', 'punct'), ('Loader', 'compound'), ('Preprocessor', 'compound'), ('Linker', 'compound'), ('Linker', 'appos'), (' ', 'conj'), ('makes', 'ROOT'), ('single', 'amod'), ('program', 'dobj'), ('files', 'pobj'), ('relocatable', 'amod'), ('machine', 'compound'), ('code', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Program, Relocatable], [Relocatable, Object], [Object, Code], [Code, Absolute], [Absolute, Machine], [Machine,  ], [ , Code], [Code, Libraries], [Libraries, &], [&,  ], [ , Object], [Object, Files], [Files, Linker], [Linker, /], [/, Loader], [Loader, Preprocessor], [Preprocessor, Linker], [Linker, Linker], [Linker,  ], [ , makes], [makes, single], [single, program], [program, files], [files, relocatable], [relocatable, machine], [machine, code], [code, .]]

>> Trigrams: 
[[Program, Relocatable, Object], [Relocatable, Object, Code], [Object, Code, Absolute], [Code, Absolute, Machine], [Absolute, Machine,  ], [Machine,  , Code], [ , Code, Libraries], [Code, Libraries, &], [Libraries, &,  ], [&,  , Object], [ , Object, Files], [Object, Files, Linker], [Files, Linker, /], [Linker, /, Loader], [/, Loader, Preprocessor], [Loader, Preprocessor, Linker], [Preprocessor, Linker, Linker], [Linker, Linker,  ], [Linker,  , makes], [ , makes, single], [makes, single, program], [single, program, files], [program, files, relocatable], [files, relocatable, machine], [relocatable, machine, code], [machine, code, .]]

>> Noun Phrases are: 
[Program Relocatable Object Code Absolute Machine  Code Libraries, Object Files Linker / Loader Preprocessor Linker Linker, a single program, a several files, relocatable machine code]

>> Named Entities are: 
[('Files Linker', 'PERSON')]


============================ Sentence 138 =============================

These files may have been the result of several different compilation, and one or more library files. 


>> Tokens are: 
[files, result, different, compilation, ,, library, files, .] 

>> PoS Tags are: 
[('files', 'NOUN'), ('result', 'NOUN'), ('different', 'ADJ'), ('compilation', 'NOUN'), (',', 'PUNCT'), ('library', 'NOUN'), ('files', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('files', 'nsubj'), ('result', 'attr'), ('different', 'amod'), ('compilation', 'pobj'), (',', 'punct'), ('library', 'compound'), ('files', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[files, result], [result, different], [different, compilation], [compilation, ,], [,, library], [library, files], [files, .]]

>> Trigrams: 
[[files, result, different], [result, different, compilation], [different, compilation, ,], [compilation, ,, library], [,, library, files], [library, files, .]]

>> Noun Phrases are: 
[These files, the result, several different compilation, one or more library files]

>> Named Entities are: 
[('one', 'CARDINAL')]


============================ Sentence 139 =============================

    


>> Tokens are: 
[   ] 

>> PoS Tags are: 
[('   ', 'SPACE')] 

>> Dependency Tags are: 
[('   ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 140 =============================

Loader 


>> Tokens are: 
[Loader] 

>> PoS Tags are: 
[('Loader', 'PROPN')] 

>> Dependency Tags are: 
[('Loader', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Loader]

>> Named Entities are: 
[]


============================ Sentence 141 =============================

The process of loading consists of: Taking relocatable machine code Altering the relocatable address   


>> Tokens are: 
[process, loading, consists, :, Taking, relocatable, machine, code, Altering, relocatable, address,  ] 

>> PoS Tags are: 
[('process', 'NOUN'), ('loading', 'NOUN'), ('consists', 'VERB'), (':', 'PUNCT'), ('Taking', 'VERB'), ('relocatable', 'ADJ'), ('machine', 'NOUN'), ('code', 'NOUN'), ('Altering', 'VERB'), ('relocatable', 'ADJ'), ('address', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('process', 'nsubj'), ('loading', 'pobj'), ('consists', 'ROOT'), (':', 'punct'), ('Taking', 'pcomp'), ('relocatable', 'xcomp'), ('machine', 'compound'), ('code', 'dobj'), ('Altering', 'xcomp'), ('relocatable', 'amod'), ('address', 'dobj'), (' ', 'punct')]

>> Bigrams: 
[[process, loading], [loading, consists], [consists, :], [:, Taking], [Taking, relocatable], [relocatable, machine], [machine, code], [code, Altering], [Altering, relocatable], [relocatable, address], [address,  ]]

>> Trigrams: 
[[process, loading, consists], [loading, consists, :], [consists, :, Taking], [:, Taking, relocatable], [Taking, relocatable, machine], [relocatable, machine, code], [machine, code, Altering], [code, Altering, relocatable], [Altering, relocatable, address], [relocatable, address,  ]]

>> Noun Phrases are: 
[The process, loading, machine code, the relocatable address]

>> Named Entities are: 
[]


============================ Sentence 142 =============================

Placing the altered instructions and data in memory at the proper location. 


>> Tokens are: 
[Placing, altered, instructions, data, memory, proper, location, .] 

>> PoS Tags are: 
[('Placing', 'VERB'), ('altered', 'ADJ'), ('instructions', 'NOUN'), ('data', 'NOUN'), ('memory', 'NOUN'), ('proper', 'ADJ'), ('location', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Placing', 'ROOT'), ('altered', 'amod'), ('instructions', 'dobj'), ('data', 'conj'), ('memory', 'pobj'), ('proper', 'amod'), ('location', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Placing, altered], [altered, instructions], [instructions, data], [data, memory], [memory, proper], [proper, location], [location, .]]

>> Trigrams: 
[[Placing, altered, instructions], [altered, instructions, data], [instructions, data, memory], [data, memory, proper], [memory, proper, location], [proper, location, .]]

>> Noun Phrases are: 
[the altered instructions, data, memory, the proper location]

>> Named Entities are: 
[]


============================ Sentence 143 =============================

    Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1 – Introduction to Compiler Design ‹#›   


>> Tokens are: 
[    , Prof., Dixita, B, Kagathara,  , #, 2170701, (, CD, ),   , ,   , Unit, 1, –, Introduction, Compiler, Design, ‹#›,  ] 

>> PoS Tags are: 
[('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), (' ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Introduction', 'NOUN'), ('Compiler', 'PROPN'), ('Design', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('    ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'nsubj'), (' ', 'appos'), ('#', 'nmod'), ('2170701', 'npadvmod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dep'), ('Unit', 'npadvmod'), ('1', 'nummod'), ('–', 'punct'), ('Introduction', 'appos'), ('Compiler', 'compound'), ('Design', 'pobj'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[    , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,  ], [ , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Introduction], [Introduction, Compiler], [Compiler, Design], [Design, ‹#›], [‹#›,  ]]

>> Trigrams: 
[[    , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,  ], [Kagathara,  , #], [ , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Introduction], [–, Introduction, Compiler], [Introduction, Compiler, Design], [Compiler, Design, ‹#›], [Design, ‹#›,  ]]

>> Noun Phrases are: 
[    Prof. Dixita B Kagathara, (CD, Introduction, Compiler Design]

>> Named Entities are: 
[('Dixita', 'PERSON'), ('Kagathara', 'PERSON')]


============================ Sentence 144 =============================

Pass structure        Pass structure 


>> Tokens are: 
[Pass, structure,        , Pass, structure] 

>> PoS Tags are: 
[('Pass', 'PROPN'), ('structure', 'NOUN'), ('       ', 'SPACE'), ('Pass', 'PROPN'), ('structure', 'NOUN')] 

>> Dependency Tags are: 
[('Pass', 'compound'), ('structure', 'ROOT'), ('       ', 'compound'), ('Pass', 'compound'), ('structure', 'appos')]

>> Bigrams: 
[[Pass, structure], [structure,        ], [       , Pass], [Pass, structure]]

>> Trigrams: 
[[Pass, structure,        ], [structure,        , Pass], [       , Pass, structure]]

>> Noun Phrases are: 
[Pass structure,        Pass structure]

>> Named Entities are: 
[]


============================ Sentence 145 =============================

One complete scan of a source program is called pass. 


>> Tokens are: 
[complete, scan, source, program, called, pass, .] 

>> PoS Tags are: 
[('complete', 'ADJ'), ('scan', 'NOUN'), ('source', 'NOUN'), ('program', 'NOUN'), ('called', 'VERB'), ('pass', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('complete', 'amod'), ('scan', 'nsubjpass'), ('source', 'compound'), ('program', 'pobj'), ('called', 'ROOT'), ('pass', 'oprd'), ('.', 'punct')]

>> Bigrams: 
[[complete, scan], [scan, source], [source, program], [program, called], [called, pass], [pass, .]]

>> Trigrams: 
[[complete, scan, source], [scan, source, program], [source, program, called], [program, called, pass], [called, pass, .]]

>> Noun Phrases are: 
[One complete scan, a source program, pass]

>> Named Entities are: 
[('One', 'CARDINAL')]


============================ Sentence 146 =============================

Pass includes reading an input file and writing to the output file. 


>> Tokens are: 
[Pass, includes, reading, input, file, writing, output, file, .] 

>> PoS Tags are: 
[('Pass', 'PROPN'), ('includes', 'VERB'), ('reading', 'VERB'), ('input', 'NOUN'), ('file', 'NOUN'), ('writing', 'VERB'), ('output', 'NOUN'), ('file', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Pass', 'nsubj'), ('includes', 'ROOT'), ('reading', 'xcomp'), ('input', 'compound'), ('file', 'dobj'), ('writing', 'conj'), ('output', 'compound'), ('file', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Pass, includes], [includes, reading], [reading, input], [input, file], [file, writing], [writing, output], [output, file], [file, .]]

>> Trigrams: 
[[Pass, includes, reading], [includes, reading, input], [reading, input, file], [input, file, writing], [file, writing, output], [writing, output, file], [output, file, .]]

>> Noun Phrases are: 
[Pass, an input file, the output file]

>> Named Entities are: 
[]


============================ Sentence 147 =============================

In a single pass compiler analysis of source statement is immediately followed by synthesis of equivalent target statement. 


>> Tokens are: 
[single, pass, compiler, analysis, source, statement, immediately, followed, synthesis, equivalent, target, statement, .] 

>> PoS Tags are: 
[('single', 'ADJ'), ('pass', 'NOUN'), ('compiler', 'NOUN'), ('analysis', 'NOUN'), ('source', 'NOUN'), ('statement', 'NOUN'), ('immediately', 'ADV'), ('followed', 'VERB'), ('synthesis', 'NOUN'), ('equivalent', 'ADJ'), ('target', 'NOUN'), ('statement', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('single', 'amod'), ('pass', 'compound'), ('compiler', 'compound'), ('analysis', 'pobj'), ('source', 'compound'), ('statement', 'pobj'), ('immediately', 'advmod'), ('followed', 'ROOT'), ('synthesis', 'pobj'), ('equivalent', 'amod'), ('target', 'compound'), ('statement', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[single, pass], [pass, compiler], [compiler, analysis], [analysis, source], [source, statement], [statement, immediately], [immediately, followed], [followed, synthesis], [synthesis, equivalent], [equivalent, target], [target, statement], [statement, .]]

>> Trigrams: 
[[single, pass, compiler], [pass, compiler, analysis], [compiler, analysis, source], [analysis, source, statement], [source, statement, immediately], [statement, immediately, followed], [immediately, followed, synthesis], [followed, synthesis, equivalent], [synthesis, equivalent, target], [equivalent, target, statement], [target, statement, .]]

>> Noun Phrases are: 
[a single pass compiler analysis, source statement, synthesis, equivalent target statement]

>> Named Entities are: 
[]


============================ Sentence 148 =============================

While in a two pass compiler intermediate code is generated between analysis and synthesis phase. 


>> Tokens are: 
[pass, compiler, intermediate, code, generated, analysis, synthesis, phase, .] 

>> PoS Tags are: 
[('pass', 'NOUN'), ('compiler', 'NOUN'), ('intermediate', 'ADJ'), ('code', 'NOUN'), ('generated', 'VERB'), ('analysis', 'NOUN'), ('synthesis', 'NOUN'), ('phase', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('pass', 'compound'), ('compiler', 'nmod'), ('intermediate', 'amod'), ('code', 'pobj'), ('generated', 'ROOT'), ('analysis', 'nmod'), ('synthesis', 'conj'), ('phase', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[pass, compiler], [compiler, intermediate], [intermediate, code], [code, generated], [generated, analysis], [analysis, synthesis], [synthesis, phase], [phase, .]]

>> Trigrams: 
[[pass, compiler, intermediate], [compiler, intermediate, code], [intermediate, code, generated], [code, generated, analysis], [generated, analysis, synthesis], [analysis, synthesis, phase], [synthesis, phase, .]]

>> Noun Phrases are: 
[a two pass compiler intermediate code, analysis and synthesis phase]

>> Named Entities are: 
[('two', 'CARDINAL')]


============================ Sentence 149 =============================

It is difficult to compile the source program into single pass due to: forward reference       Prof. Dixita B Kagathara   


>> Tokens are: 
[difficult, compile, source, program, single, pass, :, forward, reference,       , Prof., Dixita, B, Kagathara,  ] 

>> PoS Tags are: 
[('difficult', 'ADJ'), ('compile', 'VERB'), ('source', 'NOUN'), ('program', 'NOUN'), ('single', 'ADJ'), ('pass', 'NOUN'), (':', 'PUNCT'), ('forward', 'ADV'), ('reference', 'NOUN'), ('      ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('difficult', 'acomp'), ('compile', 'xcomp'), ('source', 'compound'), ('program', 'dobj'), ('single', 'amod'), ('pass', 'pobj'), (':', 'punct'), ('forward', 'advmod'), ('reference', 'ROOT'), ('      ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'dobj'), (' ', 'prep')]

>> Bigrams: 
[[difficult, compile], [compile, source], [source, program], [program, single], [single, pass], [pass, :], [:, forward], [forward, reference], [reference,       ], [      , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,  ]]

>> Trigrams: 
[[difficult, compile, source], [compile, source, program], [source, program, single], [program, single, pass], [single, pass, :], [pass, :, forward], [:, forward, reference], [forward, reference,       ], [reference,       , Prof.], [      , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,  ]]

>> Noun Phrases are: 
[It, the source program, single pass,       Prof. Dixita B Kagathara]

>> Named Entities are: 
[('Dixita', 'PERSON'), ('Kagathara', 'PERSON')]


============================ Sentence 150 =============================

#2170701 (CD)      Unit 1 – Introduction to Compiler Design ‹#›   


>> Tokens are: 
[#, 2170701, (, CD, ),   , ,   , Unit, 1, –, Introduction, Compiler, Design, ‹#›,  ] 

>> PoS Tags are: 
[('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Introduction', 'NOUN'), ('Compiler', 'PROPN'), ('Design', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('#', 'nmod'), ('2170701', 'nsubj'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dep'), ('Unit', 'npadvmod'), ('1', 'nummod'), ('–', 'punct'), ('Introduction', 'appos'), ('Compiler', 'compound'), ('Design', 'pobj'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Introduction], [Introduction, Compiler], [Compiler, Design], [Design, ‹#›], [‹#›,  ]]

>> Trigrams: 
[[#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Introduction], [–, Introduction, Compiler], [Introduction, Compiler, Design], [Compiler, Design, ‹#›], [Design, ‹#›,  ]]

>> Noun Phrases are: 
[(CD, Introduction, Compiler Design]

>> Named Entities are: 
[]


============================ Sentence 151 =============================

Pass structure Forward reference: A forward reference of a program entity is a reference to the entity which precedes its definition in the program. 


>> Tokens are: 
[Pass, structure, Forward, reference, :, forward, reference, program, entity, reference, entity, precedes, definition, program, .] 

>> PoS Tags are: 
[('Pass', 'PROPN'), ('structure', 'NOUN'), ('Forward', 'PROPN'), ('reference', 'NOUN'), (':', 'PUNCT'), ('forward', 'ADJ'), ('reference', 'NOUN'), ('program', 'NOUN'), ('entity', 'NOUN'), ('reference', 'NOUN'), ('entity', 'NOUN'), ('precedes', 'VERB'), ('definition', 'NOUN'), ('program', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Pass', 'compound'), ('structure', 'compound'), ('Forward', 'compound'), ('reference', 'ROOT'), (':', 'punct'), ('forward', 'amod'), ('reference', 'nsubj'), ('program', 'compound'), ('entity', 'pobj'), ('reference', 'attr'), ('entity', 'pobj'), ('precedes', 'relcl'), ('definition', 'dobj'), ('program', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Pass, structure], [structure, Forward], [Forward, reference], [reference, :], [:, forward], [forward, reference], [reference, program], [program, entity], [entity, reference], [reference, entity], [entity, precedes], [precedes, definition], [definition, program], [program, .]]

>> Trigrams: 
[[Pass, structure, Forward], [structure, Forward, reference], [Forward, reference, :], [reference, :, forward], [:, forward, reference], [forward, reference, program], [reference, program, entity], [program, entity, reference], [entity, reference, entity], [reference, entity, precedes], [entity, precedes, definition], [precedes, definition, program], [definition, program, .]]

>> Noun Phrases are: 
[Pass structure Forward reference, A forward reference, a program entity, a reference, the entity, its definition, the program]

>> Named Entities are: 
[]


============================ Sentence 152 =============================

This problem can be solved by postponing the generation of target code until more information concerning the entity becomes available. 


>> Tokens are: 
[problem, solved, postponing, generation, target, code, information, concerning, entity, available, .] 

>> PoS Tags are: 
[('problem', 'NOUN'), ('solved', 'VERB'), ('postponing', 'VERB'), ('generation', 'NOUN'), ('target', 'NOUN'), ('code', 'NOUN'), ('information', 'NOUN'), ('concerning', 'VERB'), ('entity', 'NOUN'), ('available', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('problem', 'nsubjpass'), ('solved', 'ROOT'), ('postponing', 'pcomp'), ('generation', 'dobj'), ('target', 'compound'), ('code', 'pobj'), ('information', 'nsubj'), ('concerning', 'prep'), ('entity', 'pobj'), ('available', 'acomp'), ('.', 'punct')]

>> Bigrams: 
[[problem, solved], [solved, postponing], [postponing, generation], [generation, target], [target, code], [code, information], [information, concerning], [concerning, entity], [entity, available], [available, .]]

>> Trigrams: 
[[problem, solved, postponing], [solved, postponing, generation], [postponing, generation, target], [generation, target, code], [target, code, information], [code, information, concerning], [information, concerning, entity], [concerning, entity, available], [entity, available, .]]

>> Noun Phrases are: 
[This problem, the generation, target code, more information, the entity]

>> Named Entities are: 
[]


============================ Sentence 153 =============================

It leads to multi pass model of compilation. 


>> Tokens are: 
[leads, multi, pass, model, compilation, .] 

>> PoS Tags are: 
[('leads', 'VERB'), ('multi', 'ADJ'), ('pass', 'ADJ'), ('model', 'NOUN'), ('compilation', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('leads', 'ROOT'), ('multi', 'amod'), ('pass', 'amod'), ('model', 'pobj'), ('compilation', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[leads, multi], [multi, pass], [pass, model], [model, compilation], [compilation, .]]

>> Trigrams: 
[[leads, multi, pass], [multi, pass, model], [pass, model, compilation], [model, compilation, .]]

>> Noun Phrases are: 
[It, multi pass model, compilation]

>> Named Entities are: 
[]


============================ Sentence 154 =============================

  Perform analysis of the source program and note relevant information. 


>> Tokens are: 
[  , Perform, analysis, source, program, note, relevant, information, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('Perform', 'VERB'), ('analysis', 'NOUN'), ('source', 'NOUN'), ('program', 'NOUN'), ('note', 'VERB'), ('relevant', 'ADJ'), ('information', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'nsubj'), ('Perform', 'ROOT'), ('analysis', 'dobj'), ('source', 'compound'), ('program', 'pobj'), ('note', 'conj'), ('relevant', 'amod'), ('information', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[  , Perform], [Perform, analysis], [analysis, source], [source, program], [program, note], [note, relevant], [relevant, information], [information, .]]

>> Trigrams: 
[[  , Perform, analysis], [Perform, analysis, source], [analysis, source, program], [source, program, note], [program, note, relevant], [note, relevant, information], [relevant, information, .]]

>> Noun Phrases are: 
[analysis, the source program, relevant information]

>> Named Entities are: 
[]


============================ Sentence 155 =============================

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 156 =============================

In Pass II: Generate target code using information noted in pass I.   


>> Tokens are: 
[Pass, II, :, Generate, target, code, information, noted, pass, I.,  ] 

>> PoS Tags are: 
[('Pass', 'PROPN'), ('II', 'PROPN'), (':', 'PUNCT'), ('Generate', 'VERB'), ('target', 'NOUN'), ('code', 'NOUN'), ('information', 'NOUN'), ('noted', 'VERB'), ('pass', 'NOUN'), ('I.', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Pass', 'compound'), ('II', 'pobj'), (':', 'punct'), ('Generate', 'compound'), ('target', 'compound'), ('code', 'nsubj'), ('information', 'dobj'), ('noted', 'ROOT'), ('pass', 'compound'), ('I.', 'pobj'), (' ', 'punct')]

>> Bigrams: 
[[Pass, II], [II, :], [:, Generate], [Generate, target], [target, code], [code, information], [information, noted], [noted, pass], [pass, I.], [I.,  ]]

>> Trigrams: 
[[Pass, II, :], [II, :, Generate], [:, Generate, target], [Generate, target, code], [target, code, information], [code, information, noted], [information, noted, pass], [noted, pass, I.], [pass, I.,  ]]

>> Noun Phrases are: 
[Pass II, Generate target code, information, pass I.]

>> Named Entities are: 
[]


============================ Sentence 157 =============================

Pass I: Pass II:    Prof. Dixita B Kagathara  #2170701 (CD)       


>> Tokens are: 
[Pass, :, Pass, II, :,    , Prof., Dixita, B, Kagathara,  , #, 2170701, (, CD, ),   , ,   ] 

>> PoS Tags are: 
[('Pass', 'PROPN'), (':', 'PUNCT'), ('Pass', 'PROPN'), ('II', 'PROPN'), (':', 'PUNCT'), ('   ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), (' ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE')] 

>> Dependency Tags are: 
[('Pass', 'compound'), (':', 'punct'), ('Pass', 'compound'), ('II', 'appos'), (':', 'punct'), ('   ', 'nummod'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), (' ', 'appos'), ('#', 'nmod'), ('2170701', 'npadvmod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dep')]

>> Bigrams: 
[[Pass, :], [:, Pass], [Pass, II], [II, :], [:,    ], [   , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,  ], [ , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ]]

>> Trigrams: 
[[Pass, :, Pass], [:, Pass, II], [Pass, II, :], [II, :,    ], [:,    , Prof.], [   , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,  ], [Kagathara,  , #], [ , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ]]

>> Noun Phrases are: 
[Pass I, Pass II,    Prof. Dixita B Kagathara, (CD]

>> Named Entities are: 
[('Dixita', 'PERSON'), ('Kagathara', 'PERSON')]


============================ Sentence 158 =============================

Unit 1 – Introduction to Compiler Design ‹#›   


>> Tokens are: 
[Unit, 1, –, Introduction, Compiler, Design, ‹#›,  ] 

>> PoS Tags are: 
[('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Introduction', 'NOUN'), ('Compiler', 'PROPN'), ('Design', 'PROPN'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Unit', 'ROOT'), ('1', 'nummod'), ('–', 'punct'), ('Introduction', 'appos'), ('Compiler', 'compound'), ('Design', 'pobj'), ('‹#›', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[Unit, 1], [1, –], [–, Introduction], [Introduction, Compiler], [Compiler, Design], [Design, ‹#›], [‹#›,  ]]

>> Trigrams: 
[[Unit, 1, –], [1, –, Introduction], [–, Introduction, Compiler], [Introduction, Compiler, Design], [Compiler, Design, ‹#›], [Design, ‹#›,  ]]

>> Noun Phrases are: 
[Unit, Introduction, Compiler Design]

>> Named Entities are: 
[]


============================ Sentence 159 =============================

Effect of reducing the number of passes It is desirable to have a few passes, because it takes time to read and write intermediate file. 


>> Tokens are: 
[Effect, reducing, number, passes, desirable, passes, ,, takes, time, read, write, intermediate, file, .] 

>> PoS Tags are: 
[('Effect', 'NOUN'), ('reducing', 'VERB'), ('number', 'NOUN'), ('passes', 'NOUN'), ('desirable', 'ADJ'), ('passes', 'NOUN'), (',', 'PUNCT'), ('takes', 'VERB'), ('time', 'NOUN'), ('read', 'VERB'), ('write', 'VERB'), ('intermediate', 'ADJ'), ('file', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Effect', 'dep'), ('reducing', 'pcomp'), ('number', 'dobj'), ('passes', 'pobj'), ('desirable', 'acomp'), ('passes', 'dobj'), (',', 'punct'), ('takes', 'advcl'), ('time', 'dobj'), ('read', 'xcomp'), ('write', 'conj'), ('intermediate', 'amod'), ('file', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Effect, reducing], [reducing, number], [number, passes], [passes, desirable], [desirable, passes], [passes, ,], [,, takes], [takes, time], [time, read], [read, write], [write, intermediate], [intermediate, file], [file, .]]

>> Trigrams: 
[[Effect, reducing, number], [reducing, number, passes], [number, passes, desirable], [passes, desirable, passes], [desirable, passes, ,], [passes, ,, takes], [,, takes, time], [takes, time, read], [time, read, write], [read, write, intermediate], [write, intermediate, file], [intermediate, file, .]]

>> Noun Phrases are: 
[the number, passes, It, a few passes, it, time, intermediate file]

>> Named Entities are: 
[]


============================ Sentence 160 =============================

If we group several phases into one pass then memory requirement may be large. 


>> Tokens are: 
[group, phases, pass, memory, requirement, large, .] 

>> PoS Tags are: 
[('group', 'VERB'), ('phases', 'NOUN'), ('pass', 'NOUN'), ('memory', 'NOUN'), ('requirement', 'NOUN'), ('large', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('group', 'csubj'), ('phases', 'dobj'), ('pass', 'pobj'), ('memory', 'compound'), ('requirement', 'pobj'), ('large', 'acomp'), ('.', 'punct')]

>> Bigrams: 
[[group, phases], [phases, pass], [pass, memory], [memory, requirement], [requirement, large], [large, .]]

>> Trigrams: 
[[group, phases, pass], [phases, pass, memory], [pass, memory, requirement], [memory, requirement, large], [requirement, large, .]]

>> Noun Phrases are: 
[we, several phases, one pass, memory requirement]

>> Named Entities are: 
[]


============================ Sentence 161 =============================

    Prof. Dixita B Kagathara  #2170701 (CD)      Unit 1 – Introduction to Compiler Design ‹#›   


>> Tokens are: 
[    , Prof., Dixita, B, Kagathara,  , #, 2170701, (, CD, ),   , ,   , Unit, 1, –, Introduction, Compiler, Design, ‹#›,  ] 

>> PoS Tags are: 
[('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), (' ', 'SPACE'), ('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Introduction', 'NOUN'), ('Compiler', 'PROPN'), ('Design', 'PROPN'), ('‹#›', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('    ', 'compound'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'nsubj'), (' ', 'appos'), ('#', 'nmod'), ('2170701', 'npadvmod'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dobj'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Introduction', 'appos'), ('Compiler', 'compound'), ('Design', 'pobj'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[    , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,  ], [ , #], [#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Introduction], [Introduction, Compiler], [Compiler, Design], [Design, ‹#›], [‹#›,  ]]

>> Trigrams: 
[[    , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,  ], [Kagathara,  , #], [ , #, 2170701], [#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Introduction], [–, Introduction, Compiler], [Introduction, Compiler, Design], [Compiler, Design, ‹#›], [Design, ‹#›,  ]]

>> Noun Phrases are: 
[    Prof. Dixita B Kagathara, (CD, Unit, Introduction, Compiler Design]

>> Named Entities are: 
[('Dixita', 'PERSON'), ('Kagathara', 'PERSON')]


============================ Sentence 162 =============================

Types of compiler        Types of compiler One pass compiler 


>> Tokens are: 
[Types, compiler,        , Types, compiler, pass, compiler] 

>> PoS Tags are: 
[('Types', 'PROPN'), ('compiler', 'NOUN'), ('       ', 'SPACE'), ('Types', 'PROPN'), ('compiler', 'NOUN'), ('pass', 'NOUN'), ('compiler', 'NOUN')] 

>> Dependency Tags are: 
[('Types', 'ROOT'), ('compiler', 'nmod'), ('       ', 'compound'), ('Types', 'pobj'), ('compiler', 'pobj'), ('pass', 'compound'), ('compiler', 'appos')]

>> Bigrams: 
[[Types, compiler], [compiler,        ], [       , Types], [Types, compiler], [compiler, pass], [pass, compiler]]

>> Trigrams: 
[[Types, compiler,        ], [compiler,        , Types], [       , Types, compiler], [Types, compiler, pass], [compiler, pass, compiler]]

>> Noun Phrases are: 
[Types, compiler        Types, compiler, One pass compiler]

>> Named Entities are: 
[('One', 'CARDINAL')]


============================ Sentence 163 =============================

It is a type of compiler that compiles whole process in one-pass. 


>> Tokens are: 
[type, compiler, compiles, process, -, pass, .] 

>> PoS Tags are: 
[('type', 'NOUN'), ('compiler', 'NOUN'), ('compiles', 'VERB'), ('process', 'NOUN'), ('-', 'PUNCT'), ('pass', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('type', 'attr'), ('compiler', 'pobj'), ('compiles', 'relcl'), ('process', 'dobj'), ('-', 'punct'), ('pass', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[type, compiler], [compiler, compiles], [compiles, process], [process, -], [-, pass], [pass, .]]

>> Trigrams: 
[[type, compiler, compiles], [compiler, compiles, process], [compiles, process, -], [process, -, pass], [-, pass, .]]

>> Noun Phrases are: 
[It, a type, compiler, whole process, one-pass]

>> Named Entities are: 
[('one', 'CARDINAL')]


============================ Sentence 164 =============================

Two pass compiler 


>> Tokens are: 
[pass, compiler] 

>> PoS Tags are: 
[('pass', 'NOUN'), ('compiler', 'NOUN')] 

>> Dependency Tags are: 
[('pass', 'compound'), ('compiler', 'ROOT')]

>> Bigrams: 
[[pass, compiler]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Two pass compiler]

>> Named Entities are: 
[('Two', 'CARDINAL')]


============================ Sentence 165 =============================

It is a type of compiler that compiles whole process in two-pass.   


>> Tokens are: 
[type, compiler, compiles, process, -, pass, .,  ] 

>> PoS Tags are: 
[('type', 'NOUN'), ('compiler', 'NOUN'), ('compiles', 'VERB'), ('process', 'NOUN'), ('-', 'PUNCT'), ('pass', 'NOUN'), ('.', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('type', 'attr'), ('compiler', 'pobj'), ('compiles', 'relcl'), ('process', 'dobj'), ('-', 'punct'), ('pass', 'pobj'), ('.', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[type, compiler], [compiler, compiles], [compiles, process], [process, -], [-, pass], [pass, .], [.,  ]]

>> Trigrams: 
[[type, compiler, compiles], [compiler, compiles, process], [compiles, process, -], [process, -, pass], [-, pass, .], [pass, .,  ]]

>> Noun Phrases are: 
[It, a type, compiler, whole process, two-pass]

>> Named Entities are: 
[('two', 'CARDINAL')]


============================ Sentence 166 =============================

It generates intermediate code. 


>> Tokens are: 
[generates, intermediate, code, .] 

>> PoS Tags are: 
[('generates', 'VERB'), ('intermediate', 'ADJ'), ('code', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('generates', 'ROOT'), ('intermediate', 'amod'), ('code', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[generates, intermediate], [intermediate, code], [code, .]]

>> Trigrams: 
[[generates, intermediate, code], [intermediate, code, .]]

>> Noun Phrases are: 
[It, intermediate code]

>> Named Entities are: 
[]


============================ Sentence 167 =============================

Incremental compiler 


>> Tokens are: 
[Incremental, compiler] 

>> PoS Tags are: 
[('Incremental', 'ADJ'), ('compiler', 'NOUN')] 

>> Dependency Tags are: 
[('Incremental', 'amod'), ('compiler', 'ROOT')]

>> Bigrams: 
[[Incremental, compiler]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Incremental compiler]

>> Named Entities are: 
[]


============================ Sentence 168 =============================

The compiler which compiles only the changed line from the source code and update the object code. 


>> Tokens are: 
[compiler, compiles, changed, line, source, code, update, object, code, .] 

>> PoS Tags are: 
[('compiler', 'NOUN'), ('compiles', 'VERB'), ('changed', 'VERB'), ('line', 'NOUN'), ('source', 'NOUN'), ('code', 'NOUN'), ('update', 'VERB'), ('object', 'NOUN'), ('code', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('compiler', 'ROOT'), ('compiles', 'relcl'), ('changed', 'amod'), ('line', 'dobj'), ('source', 'compound'), ('code', 'pobj'), ('update', 'conj'), ('object', 'compound'), ('code', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[compiler, compiles], [compiles, changed], [changed, line], [line, source], [source, code], [code, update], [update, object], [object, code], [code, .]]

>> Trigrams: 
[[compiler, compiles, changed], [compiles, changed, line], [changed, line, source], [line, source, code], [source, code, update], [code, update, object], [update, object, code], [object, code, .]]

>> Noun Phrases are: 
[The compiler, only the changed line, the source code, the object code]

>> Named Entities are: 
[]


============================ Sentence 169 =============================

Native code compiler The compiler used to compile a source code for a same type of platform only. 


>> Tokens are: 
[Native, code, compiler, compiler, compile, source, code, type, platform, .] 

>> PoS Tags are: 
[('Native', 'ADJ'), ('code', 'NOUN'), ('compiler', 'NOUN'), ('compiler', 'NOUN'), ('compile', 'VERB'), ('source', 'NOUN'), ('code', 'NOUN'), ('type', 'NOUN'), ('platform', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Native', 'amod'), ('code', 'compound'), ('compiler', 'ROOT'), ('compiler', 'appos'), ('compile', 'xcomp'), ('source', 'compound'), ('code', 'dobj'), ('type', 'pobj'), ('platform', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Native, code], [code, compiler], [compiler, compiler], [compiler, compile], [compile, source], [source, code], [code, type], [type, platform], [platform, .]]

>> Trigrams: 
[[Native, code, compiler], [code, compiler, compiler], [compiler, compiler, compile], [compiler, compile, source], [compile, source, code], [source, code, type], [code, type, platform], [type, platform, .]]

>> Noun Phrases are: 
[Native code compiler, The compiler, a source code, a same type, platform]

>> Named Entities are: 
[]


============================ Sentence 170 =============================

Cross compiler The compiler used to compile a source code for a different kinds platform. 


>> Tokens are: 
[Cross, compiler, compiler, compile, source, code, different, kinds, platform, .] 

>> PoS Tags are: 
[('Cross', 'NOUN'), ('compiler', 'NOUN'), ('compiler', 'NOUN'), ('compile', 'VERB'), ('source', 'NOUN'), ('code', 'NOUN'), ('different', 'ADJ'), ('kinds', 'NOUN'), ('platform', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Cross', 'compound'), ('compiler', 'ROOT'), ('compiler', 'dobj'), ('compile', 'xcomp'), ('source', 'compound'), ('code', 'dobj'), ('different', 'amod'), ('kinds', 'compound'), ('platform', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Cross, compiler], [compiler, compiler], [compiler, compile], [compile, source], [source, code], [code, different], [different, kinds], [kinds, platform], [platform, .]]

>> Trigrams: 
[[Cross, compiler, compiler], [compiler, compiler, compile], [compiler, compile, source], [compile, source, code], [source, code, different], [code, different, kinds], [different, kinds, platform], [kinds, platform, .]]

>> Noun Phrases are: 
[Cross compiler, The compiler, a source code, a different kinds platform]

>> Named Entities are: 
[]


============================ Sentence 171 =============================

    Prof. Jay R Dhamsaniya #3130006 (PS)      Unit 1 – Basic Probability ‹#›   Prof. Dixita B Kagathara   


>> Tokens are: 
[    , Prof., Jay, R, Dhamsaniya, #, 3130006, (, PS, ),   , ,   , Unit, 1, –, Basic, Probability, ‹#›,   , Prof., Dixita, B, Kagathara,  ] 

>> PoS Tags are: 
[('    ', 'SPACE'), ('Prof.', 'PROPN'), ('Jay', 'PROPN'), ('R', 'PROPN'), ('Dhamsaniya', 'PROPN'), ('#', 'SYM'), ('3130006', 'NUM'), ('(', 'PUNCT'), ('PS', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Basic', 'PROPN'), ('Probability', 'PROPN'), ('‹#›', 'PROPN'), ('  ', 'SPACE'), ('Prof.', 'PROPN'), ('Dixita', 'PROPN'), ('B', 'PROPN'), ('Kagathara', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('    ', 'nummod'), ('Prof.', 'compound'), ('Jay', 'compound'), ('R', 'compound'), ('Dhamsaniya', 'nsubj'), ('#', 'appos'), ('3130006', 'nummod'), ('(', 'punct'), ('PS', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'dep'), ('  ', 'punct'), ('Unit', 'appos'), ('1', 'nummod'), ('–', 'punct'), ('Basic', 'compound'), ('Probability', 'ROOT'), ('‹#›', 'punct'), ('  ', 'appos'), ('Prof.', 'compound'), ('Dixita', 'compound'), ('B', 'compound'), ('Kagathara', 'appos'), (' ', 'punct')]

>> Bigrams: 
[[    , Prof.], [Prof., Jay], [Jay, R], [R, Dhamsaniya], [Dhamsaniya, #], [#, 3130006], [3130006, (], [(, PS], [PS, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Basic], [Basic, Probability], [Probability, ‹#›], [‹#›,   ], [  , Prof.], [Prof., Dixita], [Dixita, B], [B, Kagathara], [Kagathara,  ]]

>> Trigrams: 
[[    , Prof., Jay], [Prof., Jay, R], [Jay, R, Dhamsaniya], [R, Dhamsaniya, #], [Dhamsaniya, #, 3130006], [#, 3130006, (], [3130006, (, PS], [(, PS, )], [PS, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Basic], [–, Basic, Probability], [Basic, Probability, ‹#›], [Probability, ‹#›,   ], [‹#›,   , Prof.], [  , Prof., Dixita], [Prof., Dixita, B], [Dixita, B, Kagathara], [B, Kagathara,  ]]

>> Noun Phrases are: 
[    Prof. Jay R Dhamsaniya, (PS, Unit, Prof. Dixita B Kagathara]

>> Named Entities are: 
[('Jay R Dhamsaniya', 'ORG'), ('PS', 'ORG'), ('Dixita', 'PERSON'), ('Kagathara', 'PERSON')]


============================ Sentence 172 =============================

#2170701 (CD)      Unit 1– Introduction to Compiler Design ‹#›   


>> Tokens are: 
[#, 2170701, (, CD, ),   , ,   , Unit, 1, –, Introduction, Compiler, Design, ‹#›,  ] 

>> PoS Tags are: 
[('#', 'SYM'), ('2170701', 'NUM'), ('(', 'PUNCT'), ('CD', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('\uf077', 'VERB'), ('  ', 'SPACE'), ('Unit', 'NOUN'), ('1', 'NUM'), ('–', 'PUNCT'), ('Introduction', 'NOUN'), ('Compiler', 'PROPN'), ('Design', 'PROPN'), ('‹#›', 'PART'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('#', 'nmod'), ('2170701', 'nsubj'), ('(', 'punct'), ('CD', 'appos'), (')', 'punct'), ('  ', 'appos'), ('\uf077', 'ROOT'), ('  ', 'dep'), ('Unit', 'npadvmod'), ('1', 'nummod'), ('–', 'punct'), ('Introduction', 'appos'), ('Compiler', 'compound'), ('Design', 'pobj'), ('‹#›', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[#, 2170701], [2170701, (], [(, CD], [CD, )], [),   ], [  , ], [,   ], [  , Unit], [Unit, 1], [1, –], [–, Introduction], [Introduction, Compiler], [Compiler, Design], [Design, ‹#›], [‹#›,  ]]

>> Trigrams: 
[[#, 2170701, (], [2170701, (, CD], [(, CD, )], [CD, ),   ], [),   , ], [  , ,   ], [,   , Unit], [  , Unit, 1], [Unit, 1, –], [1, –, Introduction], [–, Introduction, Compiler], [Introduction, Compiler, Design], [Compiler, Design, ‹#›], [Design, ‹#›,  ]]

>> Noun Phrases are: 
[(CD, Introduction, Compiler Design]

>> Named Entities are: 
[]


============================ Sentence 173 =============================

Thank You                                       /docProps/thumbnail.jpeg 


>> Tokens are: 
[Thank,                                       , /docProps, /, thumbnail.jpeg] 

>> PoS Tags are: 
[('Thank', 'VERB'), ('                                      ', 'SPACE'), ('/docProps', 'X'), ('/', 'SYM'), ('thumbnail.jpeg', 'NOUN')] 

>> Dependency Tags are: 
[('Thank', 'ROOT'), ('                                      ', 'dobj'), ('/docProps', 'punct'), ('/', 'punct'), ('thumbnail.jpeg', 'dobj')]

>> Bigrams: 
[[Thank,                                       ], [                                      , /docProps], [/docProps, /], [/, thumbnail.jpeg]]

>> Trigrams: 
[[Thank,                                       , /docProps], [                                      , /docProps, /], [/docProps, /, thumbnail.jpeg]]

>> Noun Phrases are: 
[You, thumbnail.jpeg]

>> Named Entities are: 
[]
