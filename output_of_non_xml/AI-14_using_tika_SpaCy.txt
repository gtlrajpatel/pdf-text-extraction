				 *** Text Processing using Spacy *** 


============================ Sentence 1 =============================

AI-14  Knowledge Base 


>> Tokens are: 
[AI-14,  , Knowledge, Base] 

>> PoS Tags are: 
[('AI-14', 'NUM'), (' ', 'SPACE'), ('Knowledge', 'PROPN'), ('Base', 'PROPN')] 

>> Dependency Tags are: 
[('AI-14', 'ROOT'), (' ', 'appos'), ('Knowledge', 'compound'), ('Base', 'appos')]

>> Bigrams: 
[[AI-14,  ], [ , Knowledge], [Knowledge, Base]]

>> Trigrams: 
[[AI-14,  , Knowledge], [ , Knowledge, Base]]

>> Noun Phrases are: 
[Knowledge Base]

>> Named Entities are: 
[('AI-14  Knowledge Base', 'PRODUCT')]


============================ Sentence 2 =============================

It contains domain-specific and high-quality knowledge. 


>> Tokens are: 
[contains, domain, -, specific, high, -, quality, knowledge, .] 

>> PoS Tags are: 
[('contains', 'VERB'), ('domain', 'NOUN'), ('-', 'PUNCT'), ('specific', 'ADJ'), ('high', 'ADJ'), ('-', 'PUNCT'), ('quality', 'NOUN'), ('knowledge', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('contains', 'ROOT'), ('domain', 'npadvmod'), ('-', 'punct'), ('specific', 'amod'), ('high', 'amod'), ('-', 'punct'), ('quality', 'conj'), ('knowledge', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[contains, domain], [domain, -], [-, specific], [specific, high], [high, -], [-, quality], [quality, knowledge], [knowledge, .]]

>> Trigrams: 
[[contains, domain, -], [domain, -, specific], [-, specific, high], [specific, high, -], [high, -, quality], [-, quality, knowledge], [quality, knowledge, .]]

>> Noun Phrases are: 
[It, domain-specific and high-quality knowledge]

>> Named Entities are: 
[]


============================ Sentence 3 =============================

Knowledge is required to exhibit intelligence. 


>> Tokens are: 
[Knowledge, required, exhibit, intelligence, .] 

>> PoS Tags are: 
[('Knowledge', 'PROPN'), ('required', 'VERB'), ('exhibit', 'VERB'), ('intelligence', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Knowledge', 'nsubjpass'), ('required', 'ROOT'), ('exhibit', 'xcomp'), ('intelligence', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Knowledge, required], [required, exhibit], [exhibit, intelligence], [intelligence, .]]

>> Trigrams: 
[[Knowledge, required, exhibit], [required, exhibit, intelligence], [exhibit, intelligence, .]]

>> Noun Phrases are: 
[Knowledge, intelligence]

>> Named Entities are: 
[]


============================ Sentence 4 =============================

The success of any ES majorly depends upon the collection of highly accurate and precise knowledge. 


>> Tokens are: 
[success, ES, majorly, depends, collection, highly, accurate, precise, knowledge, .] 

>> PoS Tags are: 
[('success', 'NOUN'), ('ES', 'NOUN'), ('majorly', 'ADV'), ('depends', 'VERB'), ('collection', 'NOUN'), ('highly', 'ADV'), ('accurate', 'ADJ'), ('precise', 'ADJ'), ('knowledge', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('success', 'nsubj'), ('ES', 'pobj'), ('majorly', 'advmod'), ('depends', 'ROOT'), ('collection', 'pobj'), ('highly', 'advmod'), ('accurate', 'amod'), ('precise', 'conj'), ('knowledge', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[success, ES], [ES, majorly], [majorly, depends], [depends, collection], [collection, highly], [highly, accurate], [accurate, precise], [precise, knowledge], [knowledge, .]]

>> Trigrams: 
[[success, ES, majorly], [ES, majorly, depends], [majorly, depends, collection], [depends, collection, highly], [collection, highly, accurate], [highly, accurate, precise], [accurate, precise, knowledge], [precise, knowledge, .]]

>> Noun Phrases are: 
[The success, any ES, the collection, highly accurate and precise knowledge]

>> Named Entities are: 
[('ES', 'ORG')]


============================ Sentence 5 =============================

What is Knowledge? 


>> Tokens are: 
[Knowledge, ?] 

>> PoS Tags are: 
[('Knowledge', 'PROPN'), ('?', 'PUNCT')] 

>> Dependency Tags are: 
[('Knowledge', 'nsubj'), ('?', 'punct')]

>> Bigrams: 
[[Knowledge, ?]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[What, Knowledge]

>> Named Entities are: 
[('Knowledge', 'PERSON')]


============================ Sentence 6 =============================

The data is collection of facts. 


>> Tokens are: 
[data, collection, facts, .] 

>> PoS Tags are: 
[('data', 'NOUN'), ('collection', 'NOUN'), ('facts', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('data', 'nsubj'), ('collection', 'attr'), ('facts', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[data, collection], [collection, facts], [facts, .]]

>> Trigrams: 
[[data, collection, facts], [collection, facts, .]]

>> Noun Phrases are: 
[The data, collection, facts]

>> Named Entities are: 
[]


============================ Sentence 7 =============================

The information is organized as data and facts about the task domain. 


>> Tokens are: 
[information, organized, data, facts, task, domain, .] 

>> PoS Tags are: 
[('information', 'NOUN'), ('organized', 'VERB'), ('data', 'NOUN'), ('facts', 'NOUN'), ('task', 'NOUN'), ('domain', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('information', 'nsubjpass'), ('organized', 'ROOT'), ('data', 'pobj'), ('facts', 'conj'), ('task', 'compound'), ('domain', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[information, organized], [organized, data], [data, facts], [facts, task], [task, domain], [domain, .]]

>> Trigrams: 
[[information, organized, data], [organized, data, facts], [data, facts, task], [facts, task, domain], [task, domain, .]]

>> Noun Phrases are: 
[The information, data, facts, the task domain]

>> Named Entities are: 
[]


============================ Sentence 8 =============================

Data, information, and past experience combined together are termed as knowledge. 


>> Tokens are: 
[Data, ,, information, ,, past, experience, combined, termed, knowledge, .] 

>> PoS Tags are: 
[('Data', 'NOUN'), (',', 'PUNCT'), ('information', 'NOUN'), (',', 'PUNCT'), ('past', 'ADJ'), ('experience', 'NOUN'), ('combined', 'VERB'), ('termed', 'VERB'), ('knowledge', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Data', 'nsubjpass'), (',', 'punct'), ('information', 'conj'), (',', 'punct'), ('past', 'amod'), ('experience', 'conj'), ('combined', 'acl'), ('termed', 'ROOT'), ('knowledge', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Data, ,], [,, information], [information, ,], [,, past], [past, experience], [experience, combined], [combined, termed], [termed, knowledge], [knowledge, .]]

>> Trigrams: 
[[Data, ,, information], [,, information, ,], [information, ,, past], [,, past, experience], [past, experience, combined], [experience, combined, termed], [combined, termed, knowledge], [termed, knowledge, .]]

>> Noun Phrases are: 
[Data, information, past experience, knowledge]

>> Named Entities are: 
[]


============================ Sentence 9 =============================

Components of Knowledge Base The knowledge base of an ES is a store of both, factual and heuristic knowledge. · 


>> Tokens are: 
[Components, Knowledge, Base, knowledge, base, ES, store, ,, factual, heuristic, knowledge, ., ·] 

>> PoS Tags are: 
[('Components', 'NOUN'), ('Knowledge', 'PROPN'), ('Base', 'PROPN'), ('knowledge', 'NOUN'), ('base', 'NOUN'), ('ES', 'NOUN'), ('store', 'NOUN'), (',', 'PUNCT'), ('factual', 'ADJ'), ('heuristic', 'ADJ'), ('knowledge', 'NOUN'), ('.', 'PUNCT'), ('·', 'PUNCT')] 

>> Dependency Tags are: 
[('Components', 'nsubj'), ('Knowledge', 'compound'), ('Base', 'pobj'), ('knowledge', 'compound'), ('base', 'nsubj'), ('ES', 'pobj'), ('store', 'attr'), (',', 'punct'), ('factual', 'conj'), ('heuristic', 'conj'), ('knowledge', 'pobj'), ('.', 'punct'), ('·', 'punct')]

>> Bigrams: 
[[Components, Knowledge], [Knowledge, Base], [Base, knowledge], [knowledge, base], [base, ES], [ES, store], [store, ,], [,, factual], [factual, heuristic], [heuristic, knowledge], [knowledge, .], [., ·]]

>> Trigrams: 
[[Components, Knowledge, Base], [Knowledge, Base, knowledge], [Base, knowledge, base], [knowledge, base, ES], [base, ES, store], [ES, store, ,], [store, ,, factual], [,, factual, heuristic], [factual, heuristic, knowledge], [heuristic, knowledge, .], [knowledge, ., ·]]

>> Noun Phrases are: 
[Components, Knowledge Base, The knowledge base, an ES, a store, both, factual and heuristic knowledge]

>> Named Entities are: 
[('Knowledge Base', 'PERSON'), ('ES', 'ORG')]


============================ Sentence 10 =============================

Factual Knowledge − It is the information widely accepted by the Knowledge Engineers and scholars in the task domain. 


>> Tokens are: 
[Factual, Knowledge, −, information, widely, accepted, Knowledge, Engineers, scholars, task, domain, .] 

>> PoS Tags are: 
[('Factual', 'PROPN'), ('Knowledge', 'PROPN'), ('−', 'PROPN'), ('information', 'NOUN'), ('widely', 'ADV'), ('accepted', 'VERB'), ('Knowledge', 'PROPN'), ('Engineers', 'PROPN'), ('scholars', 'NOUN'), ('task', 'NOUN'), ('domain', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Factual', 'compound'), ('Knowledge', 'compound'), ('−', 'attr'), ('information', 'attr'), ('widely', 'advmod'), ('accepted', 'acl'), ('Knowledge', 'compound'), ('Engineers', 'pobj'), ('scholars', 'conj'), ('task', 'compound'), ('domain', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Factual, Knowledge], [Knowledge, −], [−, information], [information, widely], [widely, accepted], [accepted, Knowledge], [Knowledge, Engineers], [Engineers, scholars], [scholars, task], [task, domain], [domain, .]]

>> Trigrams: 
[[Factual, Knowledge, −], [Knowledge, −, information], [−, information, widely], [information, widely, accepted], [widely, accepted, Knowledge], [accepted, Knowledge, Engineers], [Knowledge, Engineers, scholars], [Engineers, scholars, task], [scholars, task, domain], [task, domain, .]]

>> Noun Phrases are: 
[Factual Knowledge −, It, the information, the Knowledge Engineers, scholars, the task domain]

>> Named Entities are: 
[('Factual Knowledge −', 'PERSON'), ('the Knowledge Engineers', 'ORG')]


============================ Sentence 11 =============================

· 


>> Tokens are: 
[·] 

>> PoS Tags are: 
[('·', 'PUNCT')] 

>> Dependency Tags are: 
[('·', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 12 =============================

Heuristic Knowledge − It is about practice, accurate judgement, one’s ability of evaluation, and guessing. 


>> Tokens are: 
[Heuristic, Knowledge, −, practice, ,, accurate, judgement, ,, ability, evaluation, ,, guessing, .] 

>> PoS Tags are: 
[('Heuristic', 'ADJ'), ('Knowledge', 'PROPN'), ('−', 'PROPN'), ('practice', 'NOUN'), (',', 'PUNCT'), ('accurate', 'ADJ'), ('judgement', 'NOUN'), (',', 'PUNCT'), ('ability', 'NOUN'), ('evaluation', 'NOUN'), (',', 'PUNCT'), ('guessing', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Heuristic', 'compound'), ('Knowledge', 'compound'), ('−', 'npadvmod'), ('practice', 'pobj'), (',', 'punct'), ('accurate', 'amod'), ('judgement', 'conj'), (',', 'punct'), ('ability', 'conj'), ('evaluation', 'pobj'), (',', 'punct'), ('guessing', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[Heuristic, Knowledge], [Knowledge, −], [−, practice], [practice, ,], [,, accurate], [accurate, judgement], [judgement, ,], [,, ability], [ability, evaluation], [evaluation, ,], [,, guessing], [guessing, .]]

>> Trigrams: 
[[Heuristic, Knowledge, −], [Knowledge, −, practice], [−, practice, ,], [practice, ,, accurate], [,, accurate, judgement], [accurate, judgement, ,], [judgement, ,, ability], [,, ability, evaluation], [ability, evaluation, ,], [evaluation, ,, guessing], [,, guessing, .]]

>> Noun Phrases are: 
[It, practice, accurate judgement, one’s ability, evaluation]

>> Named Entities are: 
[('Heuristic Knowledge −', 'PERSON'), ('one', 'CARDINAL')]


============================ Sentence 13 =============================

Knowledge representation It is the method used to organize and formalize the knowledge in the knowledge base. 


>> Tokens are: 
[Knowledge, representation, method, organize, formalize, knowledge, knowledge, base, .] 

>> PoS Tags are: 
[('Knowledge', 'NOUN'), ('representation', 'NOUN'), ('method', 'NOUN'), ('organize', 'VERB'), ('formalize', 'VERB'), ('knowledge', 'NOUN'), ('knowledge', 'NOUN'), ('base', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Knowledge', 'compound'), ('representation', 'dep'), ('method', 'attr'), ('organize', 'xcomp'), ('formalize', 'conj'), ('knowledge', 'dobj'), ('knowledge', 'compound'), ('base', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Knowledge, representation], [representation, method], [method, organize], [organize, formalize], [formalize, knowledge], [knowledge, knowledge], [knowledge, base], [base, .]]

>> Trigrams: 
[[Knowledge, representation, method], [representation, method, organize], [method, organize, formalize], [organize, formalize, knowledge], [formalize, knowledge, knowledge], [knowledge, knowledge, base], [knowledge, base, .]]

>> Noun Phrases are: 
[It, the method, the knowledge, the knowledge base]

>> Named Entities are: 
[]


============================ Sentence 14 =============================

It is in the form of IF-THEN-ELSE rules. 


>> Tokens are: 
[form, -, -, rules, .] 

>> PoS Tags are: 
[('form', 'NOUN'), ('-', 'PUNCT'), ('-', 'PUNCT'), ('rules', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('form', 'pobj'), ('-', 'punct'), ('-', 'punct'), ('rules', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[form, -], [-, -], [-, rules], [rules, .]]

>> Trigrams: 
[[form, -, -], [-, -, rules], [-, rules, .]]

>> Noun Phrases are: 
[It, the form, THEN-ELSE]

>> Named Entities are: 
[]


============================ Sentence 15 =============================

Knowledge Acquisition 


>> Tokens are: 
[Knowledge, Acquisition] 

>> PoS Tags are: 
[('Knowledge', 'PROPN'), ('Acquisition', 'PROPN')] 

>> Dependency Tags are: 
[('Knowledge', 'compound'), ('Acquisition', 'ROOT')]

>> Bigrams: 
[[Knowledge, Acquisition]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Knowledge Acquisition]

>> Named Entities are: 
[]


============================ Sentence 16 =============================

The success of any expert system majorly depends on the quality, completeness, and accuracy of the information stored in the knowledge base. 


>> Tokens are: 
[success, expert, system, majorly, depends, quality, ,, completeness, ,, accuracy, information, stored, knowledge, base, .] 

>> PoS Tags are: 
[('success', 'NOUN'), ('expert', 'NOUN'), ('system', 'NOUN'), ('majorly', 'ADV'), ('depends', 'VERB'), ('quality', 'NOUN'), (',', 'PUNCT'), ('completeness', 'NOUN'), (',', 'PUNCT'), ('accuracy', 'NOUN'), ('information', 'NOUN'), ('stored', 'VERB'), ('knowledge', 'NOUN'), ('base', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('success', 'nsubj'), ('expert', 'compound'), ('system', 'pobj'), ('majorly', 'advmod'), ('depends', 'ROOT'), ('quality', 'pobj'), (',', 'punct'), ('completeness', 'conj'), (',', 'punct'), ('accuracy', 'conj'), ('information', 'pobj'), ('stored', 'acl'), ('knowledge', 'compound'), ('base', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[success, expert], [expert, system], [system, majorly], [majorly, depends], [depends, quality], [quality, ,], [,, completeness], [completeness, ,], [,, accuracy], [accuracy, information], [information, stored], [stored, knowledge], [knowledge, base], [base, .]]

>> Trigrams: 
[[success, expert, system], [expert, system, majorly], [system, majorly, depends], [majorly, depends, quality], [depends, quality, ,], [quality, ,, completeness], [,, completeness, ,], [completeness, ,, accuracy], [,, accuracy, information], [accuracy, information, stored], [information, stored, knowledge], [stored, knowledge, base], [knowledge, base, .]]

>> Noun Phrases are: 
[The success, any expert system, the quality, completeness, accuracy, the information, the knowledge base]

>> Named Entities are: 
[]


============================ Sentence 17 =============================

The knowledge base is formed by readings from various experts, scholars, and the Knowledge Engineers. 


>> Tokens are: 
[knowledge, base, formed, readings, experts, ,, scholars, ,, Knowledge, Engineers, .] 

>> PoS Tags are: 
[('knowledge', 'NOUN'), ('base', 'NOUN'), ('formed', 'VERB'), ('readings', 'NOUN'), ('experts', 'NOUN'), (',', 'PUNCT'), ('scholars', 'NOUN'), (',', 'PUNCT'), ('Knowledge', 'PROPN'), ('Engineers', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('knowledge', 'compound'), ('base', 'nsubjpass'), ('formed', 'ROOT'), ('readings', 'pobj'), ('experts', 'pobj'), (',', 'punct'), ('scholars', 'conj'), (',', 'punct'), ('Knowledge', 'compound'), ('Engineers', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[knowledge, base], [base, formed], [formed, readings], [readings, experts], [experts, ,], [,, scholars], [scholars, ,], [,, Knowledge], [Knowledge, Engineers], [Engineers, .]]

>> Trigrams: 
[[knowledge, base, formed], [base, formed, readings], [formed, readings, experts], [readings, experts, ,], [experts, ,, scholars], [,, scholars, ,], [scholars, ,, Knowledge], [,, Knowledge, Engineers], [Knowledge, Engineers, .]]

>> Noun Phrases are: 
[The knowledge base, readings, various experts, scholars, the Knowledge Engineers]

>> Named Entities are: 
[('the Knowledge Engineers', 'ORG')]


============================ Sentence 18 =============================

The knowledge engineer is a person with the qualities of empathy, quick learning, and case analyzing skills. 


>> Tokens are: 
[knowledge, engineer, person, qualities, empathy, ,, quick, learning, ,, case, analyzing, skills, .] 

>> PoS Tags are: 
[('knowledge', 'NOUN'), ('engineer', 'NOUN'), ('person', 'NOUN'), ('qualities', 'NOUN'), ('empathy', 'NOUN'), (',', 'PUNCT'), ('quick', 'ADJ'), ('learning', 'NOUN'), (',', 'PUNCT'), ('case', 'NOUN'), ('analyzing', 'VERB'), ('skills', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('knowledge', 'compound'), ('engineer', 'nsubj'), ('person', 'attr'), ('qualities', 'pobj'), ('empathy', 'pobj'), (',', 'punct'), ('quick', 'amod'), ('learning', 'conj'), (',', 'punct'), ('case', 'conj'), ('analyzing', 'acl'), ('skills', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[knowledge, engineer], [engineer, person], [person, qualities], [qualities, empathy], [empathy, ,], [,, quick], [quick, learning], [learning, ,], [,, case], [case, analyzing], [analyzing, skills], [skills, .]]

>> Trigrams: 
[[knowledge, engineer, person], [engineer, person, qualities], [person, qualities, empathy], [qualities, empathy, ,], [empathy, ,, quick], [,, quick, learning], [quick, learning, ,], [learning, ,, case], [,, case, analyzing], [case, analyzing, skills], [analyzing, skills, .]]

>> Noun Phrases are: 
[The knowledge engineer, a person, the qualities, empathy, quick learning, case, skills]

>> Named Entities are: 
[]


============================ Sentence 19 =============================

He acquires information from subject expert by recording, interviewing, and observing him at work, etc. 


>> Tokens are: 
[acquires, information, subject, expert, recording, ,, interviewing, ,, observing, work, ,, etc, .] 

>> PoS Tags are: 
[('acquires', 'VERB'), ('information', 'NOUN'), ('subject', 'ADJ'), ('expert', 'NOUN'), ('recording', 'NOUN'), (',', 'PUNCT'), ('interviewing', 'NOUN'), (',', 'PUNCT'), ('observing', 'VERB'), ('work', 'NOUN'), (',', 'PUNCT'), ('etc', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('acquires', 'ROOT'), ('information', 'dobj'), ('subject', 'amod'), ('expert', 'pobj'), ('recording', 'pobj'), (',', 'punct'), ('interviewing', 'conj'), (',', 'punct'), ('observing', 'conj'), ('work', 'pobj'), (',', 'punct'), ('etc', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[acquires, information], [information, subject], [subject, expert], [expert, recording], [recording, ,], [,, interviewing], [interviewing, ,], [,, observing], [observing, work], [work, ,], [,, etc], [etc, .]]

>> Trigrams: 
[[acquires, information, subject], [information, subject, expert], [subject, expert, recording], [expert, recording, ,], [recording, ,, interviewing], [,, interviewing, ,], [interviewing, ,, observing], [,, observing, work], [observing, work, ,], [work, ,, etc], [,, etc, .]]

>> Noun Phrases are: 
[He, information, subject expert, recording, interviewing, him, work]

>> Named Entities are: 
[]


============================ Sentence 20 =============================

He then categorizes and organizes the information in a meaningful way, in the form of IF-THEN-ELSE rules, to be used by interference machine. 


>> Tokens are: 
[categorizes, organizes, information, meaningful, way, ,, form, -, -, rules, ,, interference, machine, .] 

>> PoS Tags are: 
[('categorizes', 'VERB'), ('organizes', 'VERB'), ('information', 'NOUN'), ('meaningful', 'ADJ'), ('way', 'NOUN'), (',', 'PUNCT'), ('form', 'NOUN'), ('-', 'PUNCT'), ('-', 'PUNCT'), ('rules', 'NOUN'), (',', 'PUNCT'), ('interference', 'NOUN'), ('machine', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('categorizes', 'ROOT'), ('organizes', 'conj'), ('information', 'dobj'), ('meaningful', 'amod'), ('way', 'pobj'), (',', 'punct'), ('form', 'pobj'), ('-', 'punct'), ('-', 'punct'), ('rules', 'pobj'), (',', 'punct'), ('interference', 'compound'), ('machine', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[categorizes, organizes], [organizes, information], [information, meaningful], [meaningful, way], [way, ,], [,, form], [form, -], [-, -], [-, rules], [rules, ,], [,, interference], [interference, machine], [machine, .]]

>> Trigrams: 
[[categorizes, organizes, information], [organizes, information, meaningful], [information, meaningful, way], [meaningful, way, ,], [way, ,, form], [,, form, -], [form, -, -], [-, -, rules], [-, rules, ,], [rules, ,, interference], [,, interference, machine], [interference, machine, .]]

>> Noun Phrases are: 
[He, the information, a meaningful way, the form, IF-THEN-ELSE rules, interference machine]

>> Named Entities are: 
[]


============================ Sentence 21 =============================

The knowledge engineer also monitors the development of the ES. 


>> Tokens are: 
[knowledge, engineer, monitors, development, ES, .] 

>> PoS Tags are: 
[('knowledge', 'NOUN'), ('engineer', 'NOUN'), ('monitors', 'VERB'), ('development', 'NOUN'), ('ES', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('knowledge', 'compound'), ('engineer', 'nsubj'), ('monitors', 'ROOT'), ('development', 'dobj'), ('ES', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[knowledge, engineer], [engineer, monitors], [monitors, development], [development, ES], [ES, .]]

>> Trigrams: 
[[knowledge, engineer, monitors], [engineer, monitors, development], [monitors, development, ES], [development, ES, .]]

>> Noun Phrases are: 
[The knowledge engineer, the development, the ES]

>> Named Entities are: 
[('ES', 'ORG')]


============================ Sentence 22 =============================

Inference Engine Use of efficient procedures and rules by the Inference Engine is essential in deducting a correct, flawless solution. 


>> Tokens are: 
[Inference, Engine, Use, efficient, procedures, rules, Inference, Engine, essential, deducting, correct, ,, flawless, solution, .] 

>> PoS Tags are: 
[('Inference', 'PROPN'), ('Engine', 'PROPN'), ('Use', 'PROPN'), ('efficient', 'ADJ'), ('procedures', 'NOUN'), ('rules', 'NOUN'), ('Inference', 'PROPN'), ('Engine', 'PROPN'), ('essential', 'ADJ'), ('deducting', 'VERB'), ('correct', 'ADJ'), (',', 'PUNCT'), ('flawless', 'ADJ'), ('solution', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Inference', 'compound'), ('Engine', 'compound'), ('Use', 'nsubj'), ('efficient', 'amod'), ('procedures', 'pobj'), ('rules', 'conj'), ('Inference', 'compound'), ('Engine', 'pobj'), ('essential', 'acomp'), ('deducting', 'pcomp'), ('correct', 'amod'), (',', 'punct'), ('flawless', 'amod'), ('solution', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Inference, Engine], [Engine, Use], [Use, efficient], [efficient, procedures], [procedures, rules], [rules, Inference], [Inference, Engine], [Engine, essential], [essential, deducting], [deducting, correct], [correct, ,], [,, flawless], [flawless, solution], [solution, .]]

>> Trigrams: 
[[Inference, Engine, Use], [Engine, Use, efficient], [Use, efficient, procedures], [efficient, procedures, rules], [procedures, rules, Inference], [rules, Inference, Engine], [Inference, Engine, essential], [Engine, essential, deducting], [essential, deducting, correct], [deducting, correct, ,], [correct, ,, flawless], [,, flawless, solution], [flawless, solution, .]]

>> Noun Phrases are: 
[Inference Engine Use, efficient procedures, rules, the Inference Engine, a correct, flawless solution]

>> Named Entities are: 
[('the Inference Engine', 'ORG')]


============================ Sentence 23 =============================

In case of knowledge-based ES, the Inference Engine acquires and manipulates the knowledge from the knowledge base to arrive at a particular solution. 


>> Tokens are: 
[case, knowledge, -, based, ES, ,, Inference, Engine, acquires, manipulates, knowledge, knowledge, base, arrive, particular, solution, .] 

>> PoS Tags are: 
[('case', 'NOUN'), ('knowledge', 'NOUN'), ('-', 'PUNCT'), ('based', 'VERB'), ('ES', 'PROPN'), (',', 'PUNCT'), ('Inference', 'PROPN'), ('Engine', 'PROPN'), ('acquires', 'NOUN'), ('manipulates', 'VERB'), ('knowledge', 'NOUN'), ('knowledge', 'NOUN'), ('base', 'NOUN'), ('arrive', 'VERB'), ('particular', 'ADJ'), ('solution', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('case', 'pobj'), ('knowledge', 'npadvmod'), ('-', 'punct'), ('based', 'amod'), ('ES', 'pobj'), (',', 'punct'), ('Inference', 'compound'), ('Engine', 'nsubj'), ('acquires', 'ROOT'), ('manipulates', 'conj'), ('knowledge', 'dobj'), ('knowledge', 'compound'), ('base', 'pobj'), ('arrive', 'advcl'), ('particular', 'amod'), ('solution', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[case, knowledge], [knowledge, -], [-, based], [based, ES], [ES, ,], [,, Inference], [Inference, Engine], [Engine, acquires], [acquires, manipulates], [manipulates, knowledge], [knowledge, knowledge], [knowledge, base], [base, arrive], [arrive, particular], [particular, solution], [solution, .]]

>> Trigrams: 
[[case, knowledge, -], [knowledge, -, based], [-, based, ES], [based, ES, ,], [ES, ,, Inference], [,, Inference, Engine], [Inference, Engine, acquires], [Engine, acquires, manipulates], [acquires, manipulates, knowledge], [manipulates, knowledge, knowledge], [knowledge, knowledge, base], [knowledge, base, arrive], [base, arrive, particular], [arrive, particular, solution], [particular, solution, .]]

>> Noun Phrases are: 
[case, knowledge-based ES, the Inference Engine, the knowledge, the knowledge base, a particular solution]

>> Named Entities are: 
[('ES', 'ORG'), ('Inference Engine', 'ORG')]


============================ Sentence 24 =============================

In case of rule based ES, it − · Applies rules repeatedly to the facts, which are obtained from earlier rule application. · 


>> Tokens are: 
[case, rule, based, ES, ,, −, ·, Applies, rules, repeatedly, facts, ,, obtained, earlier, rule, application, ., ·] 

>> PoS Tags are: 
[('case', 'NOUN'), ('rule', 'NOUN'), ('based', 'VERB'), ('ES', 'PROPN'), (',', 'PUNCT'), ('−', 'VERB'), ('·', 'PUNCT'), ('Applies', 'NOUN'), ('rules', 'VERB'), ('repeatedly', 'ADV'), ('facts', 'NOUN'), (',', 'PUNCT'), ('obtained', 'VERB'), ('earlier', 'ADJ'), ('rule', 'NOUN'), ('application', 'NOUN'), ('.', 'PUNCT'), ('·', 'PUNCT')] 

>> Dependency Tags are: 
[('case', 'pobj'), ('rule', 'npadvmod'), ('based', 'amod'), ('ES', 'pobj'), (',', 'punct'), ('−', 'ROOT'), ('·', 'punct'), ('Applies', 'nsubj'), ('rules', 'ccomp'), ('repeatedly', 'advmod'), ('facts', 'pobj'), (',', 'punct'), ('obtained', 'relcl'), ('earlier', 'amod'), ('rule', 'compound'), ('application', 'pobj'), ('.', 'punct'), ('·', 'punct')]

>> Bigrams: 
[[case, rule], [rule, based], [based, ES], [ES, ,], [,, −], [−, ·], [·, Applies], [Applies, rules], [rules, repeatedly], [repeatedly, facts], [facts, ,], [,, obtained], [obtained, earlier], [earlier, rule], [rule, application], [application, .], [., ·]]

>> Trigrams: 
[[case, rule, based], [rule, based, ES], [based, ES, ,], [ES, ,, −], [,, −, ·], [−, ·, Applies], [·, Applies, rules], [Applies, rules, repeatedly], [rules, repeatedly, facts], [repeatedly, facts, ,], [facts, ,, obtained], [,, obtained, earlier], [obtained, earlier, rule], [earlier, rule, application], [rule, application, .], [application, ., ·]]

>> Noun Phrases are: 
[case, rule based ES, it, Applies, the facts, earlier rule application]

>> Named Entities are: 
[('ES', 'ORG')]


============================ Sentence 25 =============================

Adds new knowledge into the knowledge base if required. 


>> Tokens are: 
[Adds, new, knowledge, knowledge, base, required, .] 

>> PoS Tags are: 
[('Adds', 'VERB'), ('new', 'ADJ'), ('knowledge', 'NOUN'), ('knowledge', 'NOUN'), ('base', 'NOUN'), ('required', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Adds', 'ROOT'), ('new', 'amod'), ('knowledge', 'dobj'), ('knowledge', 'compound'), ('base', 'pobj'), ('required', 'advcl'), ('.', 'punct')]

>> Bigrams: 
[[Adds, new], [new, knowledge], [knowledge, knowledge], [knowledge, base], [base, required], [required, .]]

>> Trigrams: 
[[Adds, new, knowledge], [new, knowledge, knowledge], [knowledge, knowledge, base], [knowledge, base, required], [base, required, .]]

>> Noun Phrases are: 
[new knowledge, the knowledge base]

>> Named Entities are: 
[]


============================ Sentence 26 =============================

· 


>> Tokens are: 
[·] 

>> PoS Tags are: 
[('·', 'PUNCT')] 

>> Dependency Tags are: 
[('·', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 27 =============================

Resolves rules conflict when multiple rules are applicable to a particular case. 


>> Tokens are: 
[Resolves, rules, conflict, multiple, rules, applicable, particular, case, .] 

>> PoS Tags are: 
[('Resolves', 'NOUN'), ('rules', 'VERB'), ('conflict', 'NOUN'), ('multiple', 'ADJ'), ('rules', 'NOUN'), ('applicable', 'ADJ'), ('particular', 'ADJ'), ('case', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Resolves', 'nsubj'), ('rules', 'ROOT'), ('conflict', 'dobj'), ('multiple', 'amod'), ('rules', 'nsubj'), ('applicable', 'acomp'), ('particular', 'amod'), ('case', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Resolves, rules], [rules, conflict], [conflict, multiple], [multiple, rules], [rules, applicable], [applicable, particular], [particular, case], [case, .]]

>> Trigrams: 
[[Resolves, rules, conflict], [rules, conflict, multiple], [conflict, multiple, rules], [multiple, rules, applicable], [rules, applicable, particular], [applicable, particular, case], [particular, case, .]]

>> Noun Phrases are: 
[Resolves, conflict, multiple rules, a particular case]

>> Named Entities are: 
[]


============================ Sentence 28 =============================

To recommend a solution, the Inference Engine uses the following strategies − · Forward Chaining · Backward 


>> Tokens are: 
[recommend, solution, ,, Inference, Engine, uses, following, strategies, −, ·, Forward, Chaining, ·, Backward] 

>> PoS Tags are: 
[('recommend', 'VERB'), ('solution', 'NOUN'), (',', 'PUNCT'), ('Inference', 'PROPN'), ('Engine', 'PROPN'), ('uses', 'VERB'), ('following', 'VERB'), ('strategies', 'NOUN'), ('−', 'VERB'), ('·', 'PUNCT'), ('Forward', 'PROPN'), ('Chaining', 'VERB'), ('·', 'PUNCT'), ('Backward', 'PROPN')] 

>> Dependency Tags are: 
[('recommend', 'advcl'), ('solution', 'dobj'), (',', 'punct'), ('Inference', 'compound'), ('Engine', 'nsubj'), ('uses', 'ccomp'), ('following', 'amod'), ('strategies', 'dobj'), ('−', 'acl'), ('·', 'punct'), ('Forward', 'advmod'), ('Chaining', 'ROOT'), ('·', 'punct'), ('Backward', 'dobj')]

>> Bigrams: 
[[recommend, solution], [solution, ,], [,, Inference], [Inference, Engine], [Engine, uses], [uses, following], [following, strategies], [strategies, −], [−, ·], [·, Forward], [Forward, Chaining], [Chaining, ·], [·, Backward]]

>> Trigrams: 
[[recommend, solution, ,], [solution, ,, Inference], [,, Inference, Engine], [Inference, Engine, uses], [Engine, uses, following], [uses, following, strategies], [following, strategies, −], [strategies, −, ·], [−, ·, Forward], [·, Forward, Chaining], [Forward, Chaining, ·], [Chaining, ·, Backward]]

>> Noun Phrases are: 
[a solution, the Inference Engine, the following strategies, Backward]

>> Named Entities are: 
[('the Inference Engine', 'ORG'), ('Forward Chaining', 'PERSON'), ('Backward', 'PERSON')]


============================ Sentence 29 =============================

Chaining Forward Chaining It is a strategy of an expert system to answer the question, “What can happen next?” 


>> Tokens are: 
[Chaining, Forward, Chaining, strategy, expert, system, answer, question, ,, “, happen, ?, ”] 

>> PoS Tags are: 
[('Chaining', 'PROPN'), ('Forward', 'PROPN'), ('Chaining', 'VERB'), ('strategy', 'NOUN'), ('expert', 'NOUN'), ('system', 'NOUN'), ('answer', 'VERB'), ('question', 'NOUN'), (',', 'PUNCT'), ('“', 'PUNCT'), ('happen', 'VERB'), ('?', 'PUNCT'), ('”', 'PUNCT')] 

>> Dependency Tags are: 
[('Chaining', 'compound'), ('Forward', 'advmod'), ('Chaining', 'advcl'), ('strategy', 'attr'), ('expert', 'compound'), ('system', 'pobj'), ('answer', 'xcomp'), ('question', 'dobj'), (',', 'punct'), ('“', 'punct'), ('happen', 'ccomp'), ('?', 'punct'), ('”', 'punct')]

>> Bigrams: 
[[Chaining, Forward], [Forward, Chaining], [Chaining, strategy], [strategy, expert], [expert, system], [system, answer], [answer, question], [question, ,], [,, “], [“, happen], [happen, ?], [?, ”]]

>> Trigrams: 
[[Chaining, Forward, Chaining], [Forward, Chaining, strategy], [Chaining, strategy, expert], [strategy, expert, system], [expert, system, answer], [system, answer, question], [answer, question, ,], [question, ,, “], [,, “, happen], [“, happen, ?], [happen, ?, ”]]

>> Noun Phrases are: 
[It, a strategy, an expert system, the question, What]

>> Named Entities are: 
[]


============================ Sentence 30 =============================

Here, the Inference Engine follows the chain of conditions and derivations and finally deduces the outcome. 


>> Tokens are: 
[,, Inference, Engine, follows, chain, conditions, derivations, finally, deduces, outcome, .] 

>> PoS Tags are: 
[(',', 'PUNCT'), ('Inference', 'PROPN'), ('Engine', 'PROPN'), ('follows', 'VERB'), ('chain', 'NOUN'), ('conditions', 'NOUN'), ('derivations', 'NOUN'), ('finally', 'ADV'), ('deduces', 'VERB'), ('outcome', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(',', 'punct'), ('Inference', 'compound'), ('Engine', 'nsubj'), ('follows', 'ROOT'), ('chain', 'dobj'), ('conditions', 'pobj'), ('derivations', 'conj'), ('finally', 'advmod'), ('deduces', 'conj'), ('outcome', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[,, Inference], [Inference, Engine], [Engine, follows], [follows, chain], [chain, conditions], [conditions, derivations], [derivations, finally], [finally, deduces], [deduces, outcome], [outcome, .]]

>> Trigrams: 
[[,, Inference, Engine], [Inference, Engine, follows], [Engine, follows, chain], [follows, chain, conditions], [chain, conditions, derivations], [conditions, derivations, finally], [derivations, finally, deduces], [finally, deduces, outcome], [deduces, outcome, .]]

>> Noun Phrases are: 
[the Inference Engine, the chain, conditions, derivations, the outcome]

>> Named Entities are: 
[('the Inference Engine', 'ORG')]


============================ Sentence 31 =============================

It considers all the facts and rules, and sorts them before concluding to a solution. 


>> Tokens are: 
[considers, facts, rules, ,, sorts, concluding, solution, .] 

>> PoS Tags are: 
[('considers', 'VERB'), ('facts', 'NOUN'), ('rules', 'NOUN'), (',', 'PUNCT'), ('sorts', 'VERB'), ('concluding', 'VERB'), ('solution', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('considers', 'ROOT'), ('facts', 'dobj'), ('rules', 'conj'), (',', 'punct'), ('sorts', 'conj'), ('concluding', 'pcomp'), ('solution', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[considers, facts], [facts, rules], [rules, ,], [,, sorts], [sorts, concluding], [concluding, solution], [solution, .]]

>> Trigrams: 
[[considers, facts, rules], [facts, rules, ,], [rules, ,, sorts], [,, sorts, concluding], [sorts, concluding, solution], [concluding, solution, .]]

>> Noun Phrases are: 
[It, all the facts, rules, them, a solution]

>> Named Entities are: 
[]


============================ Sentence 32 =============================

This strategy is followed for working on conclusion, result, or effect. 


>> Tokens are: 
[strategy, followed, working, conclusion, ,, result, ,, effect, .] 

>> PoS Tags are: 
[('strategy', 'NOUN'), ('followed', 'VERB'), ('working', 'VERB'), ('conclusion', 'NOUN'), (',', 'PUNCT'), ('result', 'NOUN'), (',', 'PUNCT'), ('effect', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('strategy', 'nsubjpass'), ('followed', 'ROOT'), ('working', 'pcomp'), ('conclusion', 'pobj'), (',', 'punct'), ('result', 'conj'), (',', 'punct'), ('effect', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[strategy, followed], [followed, working], [working, conclusion], [conclusion, ,], [,, result], [result, ,], [,, effect], [effect, .]]

>> Trigrams: 
[[strategy, followed, working], [followed, working, conclusion], [working, conclusion, ,], [conclusion, ,, result], [,, result, ,], [result, ,, effect], [,, effect, .]]

>> Noun Phrases are: 
[This strategy, conclusion, result, effect]

>> Named Entities are: 
[]


============================ Sentence 33 =============================

For example, prediction of share market status as an effect of changes in interest rates. 


>> Tokens are: 
[example, ,, prediction, share, market, status, effect, changes, interest, rates, .] 

>> PoS Tags are: 
[('example', 'NOUN'), (',', 'PUNCT'), ('prediction', 'NOUN'), ('share', 'NOUN'), ('market', 'NOUN'), ('status', 'NOUN'), ('effect', 'NOUN'), ('changes', 'NOUN'), ('interest', 'NOUN'), ('rates', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('example', 'pobj'), (',', 'punct'), ('prediction', 'ROOT'), ('share', 'compound'), ('market', 'compound'), ('status', 'pobj'), ('effect', 'pobj'), ('changes', 'pobj'), ('interest', 'compound'), ('rates', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[example, ,], [,, prediction], [prediction, share], [share, market], [market, status], [status, effect], [effect, changes], [changes, interest], [interest, rates], [rates, .]]

>> Trigrams: 
[[example, ,, prediction], [,, prediction, share], [prediction, share, market], [share, market, status], [market, status, effect], [status, effect, changes], [effect, changes, interest], [changes, interest, rates], [interest, rates, .]]

>> Noun Phrases are: 
[example, share market status, an effect, changes, interest rates]

>> Named Entities are: 
[]


============================ Sentence 34 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 35 =============================

Backward Chaining With this strategy, an expert system finds out the answer to the question, “Why this happened?” 


>> Tokens are: 
[Backward, Chaining, strategy, ,, expert, system, finds, answer, question, ,, “, happened, ?, ”] 

>> PoS Tags are: 
[('Backward', 'PROPN'), ('Chaining', 'PROPN'), ('strategy', 'NOUN'), (',', 'PUNCT'), ('expert', 'NOUN'), ('system', 'NOUN'), ('finds', 'VERB'), ('answer', 'NOUN'), ('question', 'NOUN'), (',', 'PUNCT'), ('“', 'PUNCT'), ('happened', 'VERB'), ('?', 'PUNCT'), ('”', 'PUNCT')] 

>> Dependency Tags are: 
[('Backward', 'compound'), ('Chaining', 'advcl'), ('strategy', 'pobj'), (',', 'punct'), ('expert', 'compound'), ('system', 'nsubj'), ('finds', 'ROOT'), ('answer', 'dobj'), ('question', 'pobj'), (',', 'punct'), ('“', 'punct'), ('happened', 'ccomp'), ('?', 'punct'), ('”', 'punct')]

>> Bigrams: 
[[Backward, Chaining], [Chaining, strategy], [strategy, ,], [,, expert], [expert, system], [system, finds], [finds, answer], [answer, question], [question, ,], [,, “], [“, happened], [happened, ?], [?, ”]]

>> Trigrams: 
[[Backward, Chaining, strategy], [Chaining, strategy, ,], [strategy, ,, expert], [,, expert, system], [expert, system, finds], [system, finds, answer], [finds, answer, question], [answer, question, ,], [question, ,, “], [,, “, happened], [“, happened, ?], [happened, ?, ”]]

>> Noun Phrases are: 
[this strategy, an expert system, the answer, the question]

>> Named Entities are: 
[]


============================ Sentence 36 =============================

On the basis of what has already happened, the Inference Engine tries to find out which conditions could have happened in the past for this result. 


>> Tokens are: 
[basis, happened, ,, Inference, Engine, tries, find, conditions, happened, past, result, .] 

>> PoS Tags are: 
[('basis', 'NOUN'), ('happened', 'VERB'), (',', 'PUNCT'), ('Inference', 'PROPN'), ('Engine', 'PROPN'), ('tries', 'VERB'), ('find', 'VERB'), ('conditions', 'NOUN'), ('happened', 'VERB'), ('past', 'NOUN'), ('result', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('basis', 'pobj'), ('happened', 'pcomp'), (',', 'punct'), ('Inference', 'compound'), ('Engine', 'nsubj'), ('tries', 'ROOT'), ('find', 'xcomp'), ('conditions', 'nsubj'), ('happened', 'ccomp'), ('past', 'pobj'), ('result', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[basis, happened], [happened, ,], [,, Inference], [Inference, Engine], [Engine, tries], [tries, find], [find, conditions], [conditions, happened], [happened, past], [past, result], [result, .]]

>> Trigrams: 
[[basis, happened, ,], [happened, ,, Inference], [,, Inference, Engine], [Inference, Engine, tries], [Engine, tries, find], [tries, find, conditions], [find, conditions, happened], [conditions, happened, past], [happened, past, result], [past, result, .]]

>> Noun Phrases are: 
[the basis, what, the Inference Engine, conditions, the past, this result]

>> Named Entities are: 
[]


============================ Sentence 37 =============================

This strategy is followed for finding out cause or reason. 


>> Tokens are: 
[strategy, followed, finding, cause, reason, .] 

>> PoS Tags are: 
[('strategy', 'NOUN'), ('followed', 'VERB'), ('finding', 'VERB'), ('cause', 'NOUN'), ('reason', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('strategy', 'nsubjpass'), ('followed', 'ROOT'), ('finding', 'pcomp'), ('cause', 'dobj'), ('reason', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[strategy, followed], [followed, finding], [finding, cause], [cause, reason], [reason, .]]

>> Trigrams: 
[[strategy, followed, finding], [followed, finding, cause], [finding, cause, reason], [cause, reason, .]]

>> Noun Phrases are: 
[This strategy, cause, reason]

>> Named Entities are: 
[]


============================ Sentence 38 =============================

For example, diagnosis of blood cancer in humans. 


>> Tokens are: 
[example, ,, diagnosis, blood, cancer, humans, .] 

>> PoS Tags are: 
[('example', 'NOUN'), (',', 'PUNCT'), ('diagnosis', 'NOUN'), ('blood', 'NOUN'), ('cancer', 'NOUN'), ('humans', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('example', 'pobj'), (',', 'punct'), ('diagnosis', 'ROOT'), ('blood', 'compound'), ('cancer', 'pobj'), ('humans', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[example, ,], [,, diagnosis], [diagnosis, blood], [blood, cancer], [cancer, humans], [humans, .]]

>> Trigrams: 
[[example, ,, diagnosis], [,, diagnosis, blood], [diagnosis, blood, cancer], [blood, cancer, humans], [cancer, humans, .]]

>> Noun Phrases are: 
[example, blood cancer, humans]

>> Named Entities are: 
[]


============================ Sentence 39 =============================

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 40 =============================

User Interface User interface provides interaction between user of the ES and the ES itself. 


>> Tokens are: 
[User, Interface, User, interface, provides, interaction, user, ES, ES, .] 

>> PoS Tags are: 
[('User', 'PROPN'), ('Interface', 'PROPN'), ('User', 'PROPN'), ('interface', 'NOUN'), ('provides', 'VERB'), ('interaction', 'NOUN'), ('user', 'NOUN'), ('ES', 'PROPN'), ('ES', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('User', 'compound'), ('Interface', 'compound'), ('User', 'compound'), ('interface', 'nsubj'), ('provides', 'ROOT'), ('interaction', 'dobj'), ('user', 'pobj'), ('ES', 'pobj'), ('ES', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[User, Interface], [Interface, User], [User, interface], [interface, provides], [provides, interaction], [interaction, user], [user, ES], [ES, ES], [ES, .]]

>> Trigrams: 
[[User, Interface, User], [Interface, User, interface], [User, interface, provides], [interface, provides, interaction], [provides, interaction, user], [interaction, user, ES], [user, ES, ES], [ES, ES, .]]

>> Noun Phrases are: 
[User Interface User interface, interaction, user, the ES, the ES, itself]

>> Named Entities are: 
[('User Interface User', 'ORG'), ('ES', 'ORG'), ('ES', 'ORG')]


============================ Sentence 41 =============================

It is generally Natural Language Processing so as to be used by the user who is well-versed in the task domain. 


>> Tokens are: 
[generally, Natural, Language, Processing, user, -, versed, task, domain, .] 

>> PoS Tags are: 
[('generally', 'ADV'), ('Natural', 'PROPN'), ('Language', 'PROPN'), ('Processing', 'PROPN'), ('user', 'NOUN'), ('-', 'PUNCT'), ('versed', 'VERB'), ('task', 'NOUN'), ('domain', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('generally', 'advmod'), ('Natural', 'compound'), ('Language', 'compound'), ('Processing', 'attr'), ('user', 'pobj'), ('-', 'punct'), ('versed', 'acomp'), ('task', 'compound'), ('domain', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[generally, Natural], [Natural, Language], [Language, Processing], [Processing, user], [user, -], [-, versed], [versed, task], [task, domain], [domain, .]]

>> Trigrams: 
[[generally, Natural, Language], [Natural, Language, Processing], [Language, Processing, user], [Processing, user, -], [user, -, versed], [-, versed, task], [versed, task, domain], [task, domain, .]]

>> Noun Phrases are: 
[It, Natural Language Processing, the user, who, the task domain]

>> Named Entities are: 
[('Natural Language Processing', 'WORK_OF_ART')]


============================ Sentence 42 =============================

The user of the ES need not be necessarily an expert in Artificial Intelligence. 


>> Tokens are: 
[user, ES, need, necessarily, expert, Artificial, Intelligence, .] 

>> PoS Tags are: 
[('user', 'NOUN'), ('ES', 'PROPN'), ('need', 'AUX'), ('necessarily', 'ADV'), ('expert', 'NOUN'), ('Artificial', 'PROPN'), ('Intelligence', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('user', 'nsubj'), ('ES', 'pobj'), ('need', 'aux'), ('necessarily', 'advmod'), ('expert', 'attr'), ('Artificial', 'compound'), ('Intelligence', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[user, ES], [ES, need], [need, necessarily], [necessarily, expert], [expert, Artificial], [Artificial, Intelligence], [Intelligence, .]]

>> Trigrams: 
[[user, ES, need], [ES, need, necessarily], [need, necessarily, expert], [necessarily, expert, Artificial], [expert, Artificial, Intelligence], [Artificial, Intelligence, .]]

>> Noun Phrases are: 
[The user, the ES, an expert, Artificial Intelligence]

>> Named Entities are: 
[('ES', 'ORG'), ('Artificial Intelligence', 'ORG')]


============================ Sentence 43 =============================

It explains how the ES has arrived at a particular recommendation. 


>> Tokens are: 
[explains, ES, arrived, particular, recommendation, .] 

>> PoS Tags are: 
[('explains', 'VERB'), ('ES', 'NOUN'), ('arrived', 'VERB'), ('particular', 'ADJ'), ('recommendation', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('explains', 'ROOT'), ('ES', 'nsubj'), ('arrived', 'ccomp'), ('particular', 'amod'), ('recommendation', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[explains, ES], [ES, arrived], [arrived, particular], [particular, recommendation], [recommendation, .]]

>> Trigrams: 
[[explains, ES, arrived], [ES, arrived, particular], [arrived, particular, recommendation], [particular, recommendation, .]]

>> Noun Phrases are: 
[It, the ES, a particular recommendation]

>> Named Entities are: 
[('ES', 'ORG')]


============================ Sentence 44 =============================

The explanation may appear in the following forms − · Natural language displayed on screen. 


>> Tokens are: 
[explanation, appear, following, forms, −, ·, Natural, language, displayed, screen, .] 

>> PoS Tags are: 
[('explanation', 'NOUN'), ('appear', 'VERB'), ('following', 'VERB'), ('forms', 'NOUN'), ('−', 'VERB'), ('·', 'PUNCT'), ('Natural', 'ADJ'), ('language', 'NOUN'), ('displayed', 'VERB'), ('screen', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('explanation', 'nsubj'), ('appear', 'ROOT'), ('following', 'amod'), ('forms', 'pobj'), ('−', 'advcl'), ('·', 'punct'), ('Natural', 'amod'), ('language', 'nsubj'), ('displayed', 'ccomp'), ('screen', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[explanation, appear], [appear, following], [following, forms], [forms, −], [−, ·], [·, Natural], [Natural, language], [language, displayed], [displayed, screen], [screen, .]]

>> Trigrams: 
[[explanation, appear, following], [appear, following, forms], [following, forms, −], [forms, −, ·], [−, ·, Natural], [·, Natural, language], [Natural, language, displayed], [language, displayed, screen], [displayed, screen, .]]

>> Noun Phrases are: 
[The explanation, the following forms, · Natural language, screen]

>> Named Entities are: 
[('− · Natural', 'PERSON')]


============================ Sentence 45 =============================

· Verbal narrations in natural language. 


>> Tokens are: 
[·, Verbal, narrations, natural, language, .] 

>> PoS Tags are: 
[('·', 'PUNCT'), ('Verbal', 'ADJ'), ('narrations', 'NOUN'), ('natural', 'ADJ'), ('language', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('·', 'punct'), ('Verbal', 'amod'), ('narrations', 'ROOT'), ('natural', 'amod'), ('language', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[·, Verbal], [Verbal, narrations], [narrations, natural], [natural, language], [language, .]]

>> Trigrams: 
[[·, Verbal, narrations], [Verbal, narrations, natural], [narrations, natural, language], [natural, language, .]]

>> Noun Phrases are: 
[· Verbal narrations, natural language]

>> Named Entities are: 
[('Verbal', 'PERSON')]


============================ Sentence 46 =============================

· Listing of rule numbers displayed on the screen. 


>> Tokens are: 
[·, Listing, rule, numbers, displayed, screen, .] 

>> PoS Tags are: 
[('·', 'PUNCT'), ('Listing', 'VERB'), ('rule', 'NOUN'), ('numbers', 'NOUN'), ('displayed', 'VERB'), ('screen', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('·', 'punct'), ('Listing', 'nsubj'), ('rule', 'compound'), ('numbers', 'pobj'), ('displayed', 'ROOT'), ('screen', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[·, Listing], [Listing, rule], [rule, numbers], [numbers, displayed], [displayed, screen], [screen, .]]

>> Trigrams: 
[[·, Listing, rule], [Listing, rule, numbers], [rule, numbers, displayed], [numbers, displayed, screen], [displayed, screen, .]]

>> Noun Phrases are: 
[rule numbers, the screen]

>> Named Entities are: 
[]


============================ Sentence 47 =============================

The user interface makes it easy to trace the credibility of the deductions. 


>> Tokens are: 
[user, interface, makes, easy, trace, credibility, deductions, .] 

>> PoS Tags are: 
[('user', 'NOUN'), ('interface', 'NOUN'), ('makes', 'VERB'), ('easy', 'ADJ'), ('trace', 'VERB'), ('credibility', 'NOUN'), ('deductions', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('user', 'compound'), ('interface', 'nsubj'), ('makes', 'ROOT'), ('easy', 'ccomp'), ('trace', 'advcl'), ('credibility', 'dobj'), ('deductions', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[user, interface], [interface, makes], [makes, easy], [easy, trace], [trace, credibility], [credibility, deductions], [deductions, .]]

>> Trigrams: 
[[user, interface, makes], [interface, makes, easy], [makes, easy, trace], [easy, trace, credibility], [trace, credibility, deductions], [credibility, deductions, .]]

>> Noun Phrases are: 
[The user interface, it, the credibility, the deductions]

>> Named Entities are: 
[]


============================ Sentence 48 =============================

Requirements of Efficient ES User Interface · It should help users to accomplish their goals in shortest possible way. · 


>> Tokens are: 
[Requirements, Efficient, ES, User, Interface, ·, help, users, accomplish, goals, shortest, possible, way, ., ·] 

>> PoS Tags are: 
[('Requirements', 'NOUN'), ('Efficient', 'PROPN'), ('ES', 'PROPN'), ('User', 'PROPN'), ('Interface', 'PROPN'), ('·', 'PUNCT'), ('help', 'VERB'), ('users', 'NOUN'), ('accomplish', 'VERB'), ('goals', 'NOUN'), ('shortest', 'ADJ'), ('possible', 'ADJ'), ('way', 'NOUN'), ('.', 'PUNCT'), ('·', 'PUNCT')] 

>> Dependency Tags are: 
[('Requirements', 'nsubj'), ('Efficient', 'compound'), ('ES', 'compound'), ('User', 'compound'), ('Interface', 'pobj'), ('·', 'punct'), ('help', 'ROOT'), ('users', 'dobj'), ('accomplish', 'xcomp'), ('goals', 'dobj'), ('shortest', 'advmod'), ('possible', 'amod'), ('way', 'pobj'), ('.', 'punct'), ('·', 'punct')]

>> Bigrams: 
[[Requirements, Efficient], [Efficient, ES], [ES, User], [User, Interface], [Interface, ·], [·, help], [help, users], [users, accomplish], [accomplish, goals], [goals, shortest], [shortest, possible], [possible, way], [way, .], [., ·]]

>> Trigrams: 
[[Requirements, Efficient, ES], [Efficient, ES, User], [ES, User, Interface], [User, Interface, ·], [Interface, ·, help], [·, help, users], [help, users, accomplish], [users, accomplish, goals], [accomplish, goals, shortest], [goals, shortest, possible], [shortest, possible, way], [possible, way, .], [way, ., ·]]

>> Noun Phrases are: 
[Requirements, Efficient ES User Interface, It, users, their goals, shortest possible way]

>> Named Entities are: 
[('Efficient ES User Interface', 'ORG')]


============================ Sentence 49 =============================

It should be designed to work for user’s existing or desired work practices. 


>> Tokens are: 
[designed, work, user, existing, desired, work, practices, .] 

>> PoS Tags are: 
[('designed', 'VERB'), ('work', 'VERB'), ('user', 'NOUN'), ('existing', 'VERB'), ('desired', 'VERB'), ('work', 'NOUN'), ('practices', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('designed', 'ROOT'), ('work', 'xcomp'), ('user', 'pobj'), ('existing', 'advcl'), ('desired', 'conj'), ('work', 'compound'), ('practices', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[designed, work], [work, user], [user, existing], [existing, desired], [desired, work], [work, practices], [practices, .]]

>> Trigrams: 
[[designed, work, user], [work, user, existing], [user, existing, desired], [existing, desired, work], [desired, work, practices], [work, practices, .]]

>> Noun Phrases are: 
[It, user, work practices]

>> Named Entities are: 
[]


============================ Sentence 50 =============================

· 


>> Tokens are: 
[·] 

>> PoS Tags are: 
[('·', 'PUNCT')] 

>> Dependency Tags are: 
[('·', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 51 =============================

Its technology should be adaptable to user’s requirements; not the other way round. 


>> Tokens are: 
[technology, adaptable, user, requirements, ;, way, round, .] 

>> PoS Tags are: 
[('technology', 'NOUN'), ('adaptable', 'ADJ'), ('user', 'NOUN'), ('requirements', 'NOUN'), (';', 'PUNCT'), ('way', 'NOUN'), ('round', 'ADV'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('technology', 'nsubj'), ('adaptable', 'acomp'), ('user', 'poss'), ('requirements', 'pobj'), (';', 'punct'), ('way', 'npadvmod'), ('round', 'advmod'), ('.', 'punct')]

>> Bigrams: 
[[technology, adaptable], [adaptable, user], [user, requirements], [requirements, ;], [;, way], [way, round], [round, .]]

>> Trigrams: 
[[technology, adaptable, user], [adaptable, user, requirements], [user, requirements, ;], [requirements, ;, way], [;, way, round], [way, round, .]]

>> Noun Phrases are: 
[Its technology, user’s requirements]

>> Named Entities are: 
[]


============================ Sentence 52 =============================

· It should make efficient use of user input. 


>> Tokens are: 
[·, efficient, use, user, input, .] 

>> PoS Tags are: 
[('·', 'PUNCT'), ('efficient', 'ADJ'), ('use', 'NOUN'), ('user', 'NOUN'), ('input', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('·', 'punct'), ('efficient', 'amod'), ('use', 'dobj'), ('user', 'compound'), ('input', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[·, efficient], [efficient, use], [use, user], [user, input], [input, .]]

>> Trigrams: 
[[·, efficient, use], [efficient, use, user], [use, user, input], [user, input, .]]

>> Noun Phrases are: 
[It, efficient use, user input]

>> Named Entities are: 
[]


============================ Sentence 53 =============================

Expert Systems Limitations 


>> Tokens are: 
[Expert, Systems, Limitations] 

>> PoS Tags are: 
[('Expert', 'PROPN'), ('Systems', 'PROPN'), ('Limitations', 'PROPN')] 

>> Dependency Tags are: 
[('Expert', 'compound'), ('Systems', 'compound'), ('Limitations', 'ROOT')]

>> Bigrams: 
[[Expert, Systems], [Systems, Limitations]]

>> Trigrams: 
[[Expert, Systems, Limitations]]

>> Noun Phrases are: 
[Expert Systems Limitations]

>> Named Entities are: 
[]


============================ Sentence 54 =============================

No technology can offer easy and complete solution. 


>> Tokens are: 
[technology, offer, easy, complete, solution, .] 

>> PoS Tags are: 
[('technology', 'NOUN'), ('offer', 'VERB'), ('easy', 'ADJ'), ('complete', 'ADJ'), ('solution', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('technology', 'nsubj'), ('offer', 'ROOT'), ('easy', 'amod'), ('complete', 'conj'), ('solution', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[technology, offer], [offer, easy], [easy, complete], [complete, solution], [solution, .]]

>> Trigrams: 
[[technology, offer, easy], [offer, easy, complete], [easy, complete, solution], [complete, solution, .]]

>> Noun Phrases are: 
[No technology, easy and complete solution]

>> Named Entities are: 
[]


============================ Sentence 55 =============================

Large systems are costly, require significant development time, and computer resources. 


>> Tokens are: 
[Large, systems, costly, ,, require, significant, development, time, ,, computer, resources, .] 

>> PoS Tags are: 
[('Large', 'ADJ'), ('systems', 'NOUN'), ('costly', 'ADJ'), (',', 'PUNCT'), ('require', 'VERB'), ('significant', 'ADJ'), ('development', 'NOUN'), ('time', 'NOUN'), (',', 'PUNCT'), ('computer', 'NOUN'), ('resources', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Large', 'amod'), ('systems', 'nsubj'), ('costly', 'acomp'), (',', 'punct'), ('require', 'conj'), ('significant', 'amod'), ('development', 'compound'), ('time', 'dobj'), (',', 'punct'), ('computer', 'compound'), ('resources', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[Large, systems], [systems, costly], [costly, ,], [,, require], [require, significant], [significant, development], [development, time], [time, ,], [,, computer], [computer, resources], [resources, .]]

>> Trigrams: 
[[Large, systems, costly], [systems, costly, ,], [costly, ,, require], [,, require, significant], [require, significant, development], [significant, development, time], [development, time, ,], [time, ,, computer], [,, computer, resources], [computer, resources, .]]

>> Noun Phrases are: 
[Large systems, significant development time, computer resources]

>> Named Entities are: 
[]


============================ Sentence 56 =============================

ESs have their limitations which include − · Limitations of the technology · Difficult knowledge acquisition · ES are difficult to maintain · High development costs Applications of Expert System 


>> Tokens are: 
[ESs, limitations, include, −, ·, Limitations, technology, ·, Difficult, knowledge, acquisition, ·, ES, difficult, maintain, ·, High, development, costs, Applications, Expert, System] 

>> PoS Tags are: 
[('ESs', 'NOUN'), ('limitations', 'NOUN'), ('include', 'VERB'), ('−', 'PROPN'), ('·', 'PUNCT'), ('Limitations', 'NOUN'), ('technology', 'NOUN'), ('·', 'PUNCT'), ('Difficult', 'ADJ'), ('knowledge', 'NOUN'), ('acquisition', 'NOUN'), ('·', 'PUNCT'), ('ES', 'NOUN'), ('difficult', 'ADJ'), ('maintain', 'VERB'), ('·', 'PUNCT'), ('High', 'ADJ'), ('development', 'NOUN'), ('costs', 'VERB'), ('Applications', 'PROPN'), ('Expert', 'PROPN'), ('System', 'PROPN')] 

>> Dependency Tags are: 
[('ESs', 'nsubj'), ('limitations', 'dobj'), ('include', 'relcl'), ('−', 'compound'), ('·', 'punct'), ('Limitations', 'dobj'), ('technology', 'pobj'), ('·', 'punct'), ('Difficult', 'amod'), ('knowledge', 'compound'), ('acquisition', 'nmod'), ('·', 'punct'), ('ES', 'nsubj'), ('difficult', 'acomp'), ('maintain', 'xcomp'), ('·', 'punct'), ('High', 'amod'), ('development', 'nsubj'), ('costs', 'ccomp'), ('Applications', 'dobj'), ('Expert', 'compound'), ('System', 'pobj')]

>> Bigrams: 
[[ESs, limitations], [limitations, include], [include, −], [−, ·], [·, Limitations], [Limitations, technology], [technology, ·], [·, Difficult], [Difficult, knowledge], [knowledge, acquisition], [acquisition, ·], [·, ES], [ES, difficult], [difficult, maintain], [maintain, ·], [·, High], [High, development], [development, costs], [costs, Applications], [Applications, Expert], [Expert, System]]

>> Trigrams: 
[[ESs, limitations, include], [limitations, include, −], [include, −, ·], [−, ·, Limitations], [·, Limitations, technology], [Limitations, technology, ·], [technology, ·, Difficult], [·, Difficult, knowledge], [Difficult, knowledge, acquisition], [knowledge, acquisition, ·], [acquisition, ·, ES], [·, ES, difficult], [ES, difficult, maintain], [difficult, maintain, ·], [maintain, ·, High], [·, High, development], [High, development, costs], [development, costs, Applications], [costs, Applications, Expert], [Applications, Expert, System]]

>> Noun Phrases are: 
[ESs, their limitations, − · Limitations, the technology, · Difficult knowledge acquisition · ES, High development, Applications, Expert System]

>> Named Entities are: 
[('ES', 'ORG')]


============================ Sentence 57 =============================

The following table shows where ES can be applied. 


>> Tokens are: 
[following, table, shows, ES, applied, .] 

>> PoS Tags are: 
[('following', 'VERB'), ('table', 'NOUN'), ('shows', 'VERB'), ('ES', 'PROPN'), ('applied', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('following', 'amod'), ('table', 'nsubj'), ('shows', 'ROOT'), ('ES', 'nsubjpass'), ('applied', 'ccomp'), ('.', 'punct')]

>> Bigrams: 
[[following, table], [table, shows], [shows, ES], [ES, applied], [applied, .]]

>> Trigrams: 
[[following, table, shows], [table, shows, ES], [shows, ES, applied], [ES, applied, .]]

>> Noun Phrases are: 
[The following table, ES]

>> Named Entities are: 
[('ES', 'ORG')]


============================ Sentence 58 =============================

	Application 	Description  	Design Domain 	Camera lens design, automobile design. 


>> Tokens are: 
[	, Application, 	, Description,  	, Design, Domain, 	, Camera, lens, design, ,, automobile, design, .] 

>> PoS Tags are: 
[('\t', 'SPACE'), ('Application', 'PROPN'), ('\t', 'SPACE'), ('Description', 'PROPN'), (' \t', 'SPACE'), ('Design', 'PROPN'), ('Domain', 'PROPN'), ('\t', 'SPACE'), ('Camera', 'PROPN'), ('lens', 'NOUN'), ('design', 'NOUN'), (',', 'PUNCT'), ('automobile', 'NOUN'), ('design', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\t', 'compound'), ('Application', 'compound'), ('\t', 'compound'), ('Description', 'nmod'), (' \t', 'compound'), ('Design', 'compound'), ('Domain', 'nmod'), ('\t', 'compound'), ('Camera', 'compound'), ('lens', 'compound'), ('design', 'ROOT'), (',', 'punct'), ('automobile', 'compound'), ('design', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[	, Application], [Application, 	], [	, Description], [Description,  	], [ 	, Design], [Design, Domain], [Domain, 	], [	, Camera], [Camera, lens], [lens, design], [design, ,], [,, automobile], [automobile, design], [design, .]]

>> Trigrams: 
[[	, Application, 	], [Application, 	, Description], [	, Description,  	], [Description,  	, Design], [ 	, Design, Domain], [Design, Domain, 	], [Domain, 	, Camera], [	, Camera, lens], [Camera, lens, design], [lens, design, ,], [design, ,, automobile], [,, automobile, design], [automobile, design, .]]

>> Noun Phrases are: 
[	Application 	Description  	Design Domain 	Camera lens design, automobile design]

>> Named Entities are: 
[]


============================ Sentence 59 =============================

 	Medical Domain 	Diagnosis Systems to deduce cause of disease from observed data, conduction medical operations on humans. 


>> Tokens are: 
[ 	, Medical, Domain, 	, Diagnosis, Systems, deduce, cause, disease, observed, data, ,, conduction, medical, operations, humans, .] 

>> PoS Tags are: 
[(' \t', 'SPACE'), ('Medical', 'PROPN'), ('Domain', 'PROPN'), ('\t', 'SPACE'), ('Diagnosis', 'PROPN'), ('Systems', 'PROPN'), ('deduce', 'VERB'), ('cause', 'NOUN'), ('disease', 'NOUN'), ('observed', 'ADJ'), ('data', 'NOUN'), (',', 'PUNCT'), ('conduction', 'NOUN'), ('medical', 'ADJ'), ('operations', 'NOUN'), ('humans', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' \t', 'compound'), ('Medical', 'compound'), ('Domain', 'compound'), ('\t', 'compound'), ('Diagnosis', 'compound'), ('Systems', 'nsubj'), ('deduce', 'ROOT'), ('cause', 'dobj'), ('disease', 'pobj'), ('observed', 'amod'), ('data', 'pobj'), (',', 'punct'), ('conduction', 'nmod'), ('medical', 'amod'), ('operations', 'conj'), ('humans', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[ 	, Medical], [Medical, Domain], [Domain, 	], [	, Diagnosis], [Diagnosis, Systems], [Systems, deduce], [deduce, cause], [cause, disease], [disease, observed], [observed, data], [data, ,], [,, conduction], [conduction, medical], [medical, operations], [operations, humans], [humans, .]]

>> Trigrams: 
[[ 	, Medical, Domain], [Medical, Domain, 	], [Domain, 	, Diagnosis], [	, Diagnosis, Systems], [Diagnosis, Systems, deduce], [Systems, deduce, cause], [deduce, cause, disease], [cause, disease, observed], [disease, observed, data], [observed, data, ,], [data, ,, conduction], [,, conduction, medical], [conduction, medical, operations], [medical, operations, humans], [operations, humans, .]]

>> Noun Phrases are: 
[ 	Medical Domain 	Diagnosis Systems, cause, disease, observed data, conduction medical operations, humans]

>> Named Entities are: 
[]


============================ Sentence 60 =============================

 	Monitoring Systems 	Comparing data continuously with observed system or with prescribed behavior such as leakage monitoring in long petroleum pipeline. 


>> Tokens are: 
[ 	, Monitoring, Systems, 	, Comparing, data, continuously, observed, system, prescribed, behavior, leakage, monitoring, long, petroleum, pipeline, .] 

>> PoS Tags are: 
[(' \t', 'SPACE'), ('Monitoring', 'PROPN'), ('Systems', 'PROPN'), ('\t', 'SPACE'), ('Comparing', 'VERB'), ('data', 'NOUN'), ('continuously', 'ADV'), ('observed', 'ADJ'), ('system', 'NOUN'), ('prescribed', 'ADJ'), ('behavior', 'NOUN'), ('leakage', 'NOUN'), ('monitoring', 'NOUN'), ('long', 'ADJ'), ('petroleum', 'NOUN'), ('pipeline', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' \t', 'dep'), ('Monitoring', 'compound'), ('Systems', 'compound'), ('\t', 'compound'), ('Comparing', 'ROOT'), ('data', 'dobj'), ('continuously', 'advmod'), ('observed', 'amod'), ('system', 'pobj'), ('prescribed', 'amod'), ('behavior', 'pobj'), ('leakage', 'compound'), ('monitoring', 'pobj'), ('long', 'amod'), ('petroleum', 'compound'), ('pipeline', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[ 	, Monitoring], [Monitoring, Systems], [Systems, 	], [	, Comparing], [Comparing, data], [data, continuously], [continuously, observed], [observed, system], [system, prescribed], [prescribed, behavior], [behavior, leakage], [leakage, monitoring], [monitoring, long], [long, petroleum], [petroleum, pipeline], [pipeline, .]]

>> Trigrams: 
[[ 	, Monitoring, Systems], [Monitoring, Systems, 	], [Systems, 	, Comparing], [	, Comparing, data], [Comparing, data, continuously], [data, continuously, observed], [continuously, observed, system], [observed, system, prescribed], [system, prescribed, behavior], [prescribed, behavior, leakage], [behavior, leakage, monitoring], [leakage, monitoring, long], [monitoring, long, petroleum], [long, petroleum, pipeline], [petroleum, pipeline, .]]

>> Noun Phrases are: 
[data, observed system, prescribed behavior, leakage monitoring, long petroleum pipeline]

>> Named Entities are: 
[('Comparing', 'ORG')]


============================ Sentence 61 =============================

 	Process Control Systems 	Controlling a physical process based on monitoring. 


>> Tokens are: 
[ 	, Process, Control, Systems, 	, Controlling, physical, process, based, monitoring, .] 

>> PoS Tags are: 
[(' \t', 'SPACE'), ('Process', 'PROPN'), ('Control', 'PROPN'), ('Systems', 'PROPN'), ('\t', 'SPACE'), ('Controlling', 'VERB'), ('physical', 'ADJ'), ('process', 'NOUN'), ('based', 'VERB'), ('monitoring', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' \t', 'compound'), ('Process', 'compound'), ('Control', 'compound'), ('Systems', 'compound'), ('\t', 'nsubj'), ('Controlling', 'ROOT'), ('physical', 'amod'), ('process', 'dobj'), ('based', 'prep'), ('monitoring', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[ 	, Process], [Process, Control], [Control, Systems], [Systems, 	], [	, Controlling], [Controlling, physical], [physical, process], [process, based], [based, monitoring], [monitoring, .]]

>> Trigrams: 
[[ 	, Process, Control], [Process, Control, Systems], [Control, Systems, 	], [Systems, 	, Controlling], [	, Controlling, physical], [Controlling, physical, process], [physical, process, based], [process, based, monitoring], [based, monitoring, .]]

>> Noun Phrases are: 
[a physical process, monitoring]

>> Named Entities are: 
[('Process Control Systems', 'ORG')]


============================ Sentence 62 =============================

 	Knowledge Domain 	Finding out faults in vehicles, computers. 


>> Tokens are: 
[ 	, Knowledge, Domain, 	, Finding, faults, vehicles, ,, computers, .] 

>> PoS Tags are: 
[(' \t', 'SPACE'), ('Knowledge', 'PROPN'), ('Domain', 'PROPN'), ('\t', 'SPACE'), ('Finding', 'VERB'), ('faults', 'NOUN'), ('vehicles', 'NOUN'), (',', 'PUNCT'), ('computers', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' \t', 'compound'), ('Knowledge', 'compound'), ('Domain', 'compound'), ('\t', 'nsubj'), ('Finding', 'ROOT'), ('faults', 'dobj'), ('vehicles', 'pobj'), (',', 'punct'), ('computers', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[ 	, Knowledge], [Knowledge, Domain], [Domain, 	], [	, Finding], [Finding, faults], [faults, vehicles], [vehicles, ,], [,, computers], [computers, .]]

>> Trigrams: 
[[ 	, Knowledge, Domain], [Knowledge, Domain, 	], [Domain, 	, Finding], [	, Finding, faults], [Finding, faults, vehicles], [faults, vehicles, ,], [vehicles, ,, computers], [,, computers, .]]

>> Noun Phrases are: 
[faults, vehicles, computers]

>> Named Entities are: 
[]


============================ Sentence 63 =============================

 	Finance/Commerce 	Detection of possible fraud, suspicious transactions, stock market trading, Airline scheduling, cargo scheduling. 


>> Tokens are: 
[ 	, Finance, /, Commerce, 	, Detection, possible, fraud, ,, suspicious, transactions, ,, stock, market, trading, ,, Airline, scheduling, ,, cargo, scheduling, .] 

>> PoS Tags are: 
[(' \t', 'SPACE'), ('Finance', 'PROPN'), ('/', 'SYM'), ('Commerce', 'PROPN'), ('\t', 'SPACE'), ('Detection', 'PROPN'), ('possible', 'ADJ'), ('fraud', 'NOUN'), (',', 'PUNCT'), ('suspicious', 'ADJ'), ('transactions', 'NOUN'), (',', 'PUNCT'), ('stock', 'NOUN'), ('market', 'NOUN'), ('trading', 'NOUN'), (',', 'PUNCT'), ('Airline', 'PROPN'), ('scheduling', 'NOUN'), (',', 'PUNCT'), ('cargo', 'NOUN'), ('scheduling', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' \t', 'compound'), ('Finance', 'nmod'), ('/', 'punct'), ('Commerce', 'compound'), ('\t', 'compound'), ('Detection', 'ROOT'), ('possible', 'amod'), ('fraud', 'pobj'), (',', 'punct'), ('suspicious', 'amod'), ('transactions', 'conj'), (',', 'punct'), ('stock', 'compound'), ('market', 'compound'), ('trading', 'conj'), (',', 'punct'), ('Airline', 'compound'), ('scheduling', 'conj'), (',', 'punct'), ('cargo', 'compound'), ('scheduling', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[ 	, Finance], [Finance, /], [/, Commerce], [Commerce, 	], [	, Detection], [Detection, possible], [possible, fraud], [fraud, ,], [,, suspicious], [suspicious, transactions], [transactions, ,], [,, stock], [stock, market], [market, trading], [trading, ,], [,, Airline], [Airline, scheduling], [scheduling, ,], [,, cargo], [cargo, scheduling], [scheduling, .]]

>> Trigrams: 
[[ 	, Finance, /], [Finance, /, Commerce], [/, Commerce, 	], [Commerce, 	, Detection], [	, Detection, possible], [Detection, possible, fraud], [possible, fraud, ,], [fraud, ,, suspicious], [,, suspicious, transactions], [suspicious, transactions, ,], [transactions, ,, stock], [,, stock, market], [stock, market, trading], [market, trading, ,], [trading, ,, Airline], [,, Airline, scheduling], [Airline, scheduling, ,], [scheduling, ,, cargo], [,, cargo, scheduling], [cargo, scheduling, .]]

>> Noun Phrases are: 
[ 	Finance/Commerce 	Detection, possible fraud, suspicious transactions, stock market trading, Airline scheduling, cargo scheduling]

>> Named Entities are: 
[('Finance/Commerce \tDetection', 'ORG')]


============================ Sentence 64 =============================

  Expert System Technology There are several levels of ES technologies available. 


>> Tokens are: 
[  , Expert, System, Technology, levels, ES, technologies, available, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('Expert', 'PROPN'), ('System', 'PROPN'), ('Technology', 'PROPN'), ('levels', 'NOUN'), ('ES', 'NOUN'), ('technologies', 'NOUN'), ('available', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'nummod'), ('Expert', 'compound'), ('System', 'compound'), ('Technology', 'nsubj'), ('levels', 'attr'), ('ES', 'compound'), ('technologies', 'pobj'), ('available', 'amod'), ('.', 'punct')]

>> Bigrams: 
[[  , Expert], [Expert, System], [System, Technology], [Technology, levels], [levels, ES], [ES, technologies], [technologies, available], [available, .]]

>> Trigrams: 
[[  , Expert, System], [Expert, System, Technology], [System, Technology, levels], [Technology, levels, ES], [levels, ES, technologies], [ES, technologies, available], [technologies, available, .]]

>> Noun Phrases are: 
[  Expert System Technology, several levels, ES technologies]

>> Named Entities are: 
[('Expert System Technology', 'ORG')]


============================ Sentence 65 =============================

Expert systems technologies include − · Expert System Development Environment − The ES development environment includes hardware and tools. 


>> Tokens are: 
[Expert, systems, technologies, include, −, ·, Expert, System, Development, Environment, −, ES, development, environment, includes, hardware, tools, .] 

>> PoS Tags are: 
[('Expert', 'NOUN'), ('systems', 'NOUN'), ('technologies', 'NOUN'), ('include', 'VERB'), ('−', 'PROPN'), ('·', 'PUNCT'), ('Expert', 'PROPN'), ('System', 'PROPN'), ('Development', 'PROPN'), ('Environment', 'PROPN'), ('−', 'PROPN'), ('ES', 'PROPN'), ('development', 'NOUN'), ('environment', 'NOUN'), ('includes', 'VERB'), ('hardware', 'NOUN'), ('tools', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Expert', 'compound'), ('systems', 'compound'), ('technologies', 'nsubj'), ('include', 'ROOT'), ('−', 'compound'), ('·', 'punct'), ('Expert', 'compound'), ('System', 'compound'), ('Development', 'compound'), ('Environment', 'compound'), ('−', 'nsubj'), ('ES', 'compound'), ('development', 'compound'), ('environment', 'nsubj'), ('includes', 'ccomp'), ('hardware', 'dobj'), ('tools', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[Expert, systems], [systems, technologies], [technologies, include], [include, −], [−, ·], [·, Expert], [Expert, System], [System, Development], [Development, Environment], [Environment, −], [−, ES], [ES, development], [development, environment], [environment, includes], [includes, hardware], [hardware, tools], [tools, .]]

>> Trigrams: 
[[Expert, systems, technologies], [systems, technologies, include], [technologies, include, −], [include, −, ·], [−, ·, Expert], [·, Expert, System], [Expert, System, Development], [System, Development, Environment], [Development, Environment, −], [Environment, −, ES], [−, ES, development], [ES, development, environment], [development, environment, includes], [environment, includes, hardware], [includes, hardware, tools], [hardware, tools, .]]

>> Noun Phrases are: 
[Expert systems technologies, − · Expert System Development Environment −, The ES development environment, hardware, tools]

>> Named Entities are: 
[]


============================ Sentence 66 =============================

They are − · Workstations, minicomputers, mainframes. 


>> Tokens are: 
[−, ·, Workstations, ,, minicomputers, ,, mainframes, .] 

>> PoS Tags are: 
[('−', 'PROPN'), ('·', 'SYM'), ('Workstations', 'NOUN'), (',', 'PUNCT'), ('minicomputers', 'NOUN'), (',', 'PUNCT'), ('mainframes', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('−', 'attr'), ('·', 'punct'), ('Workstations', 'attr'), (',', 'punct'), ('minicomputers', 'conj'), (',', 'punct'), ('mainframes', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[−, ·], [·, Workstations], [Workstations, ,], [,, minicomputers], [minicomputers, ,], [,, mainframes], [mainframes, .]]

>> Trigrams: 
[[−, ·, Workstations], [·, Workstations, ,], [Workstations, ,, minicomputers], [,, minicomputers, ,], [minicomputers, ,, mainframes], [,, mainframes, .]]

>> Noun Phrases are: 
[They, −, · Workstations, minicomputers, mainframes]

>> Named Entities are: 
[]


============================ Sentence 67 =============================

· High level Symbolic Programming Languages such as LISt Programming (LISP) and PROgrammation en LOGique (PROLOG). 


>> Tokens are: 
[·, High, level, Symbolic, Programming, Languages, LISt, Programming, (, LISP, ), PROgrammation, en, LOGique, (, PROLOG, ), .] 

>> PoS Tags are: 
[('·', 'PUNCT'), ('High', 'ADJ'), ('level', 'NOUN'), ('Symbolic', 'PROPN'), ('Programming', 'PROPN'), ('Languages', 'PROPN'), ('LISt', 'NOUN'), ('Programming', 'PROPN'), ('(', 'PUNCT'), ('LISP', 'PROPN'), (')', 'PUNCT'), ('PROgrammation', 'NOUN'), ('en', 'ADP'), ('LOGique', 'PROPN'), ('(', 'PUNCT'), ('PROLOG', 'PROPN'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('·', 'punct'), ('High', 'amod'), ('level', 'compound'), ('Symbolic', 'compound'), ('Programming', 'compound'), ('Languages', 'ROOT'), ('LISt', 'compound'), ('Programming', 'pobj'), ('(', 'punct'), ('LISP', 'appos'), (')', 'punct'), ('PROgrammation', 'conj'), ('en', 'prep'), ('LOGique', 'pobj'), ('(', 'punct'), ('PROLOG', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[·, High], [High, level], [level, Symbolic], [Symbolic, Programming], [Programming, Languages], [Languages, LISt], [LISt, Programming], [Programming, (], [(, LISP], [LISP, )], [), PROgrammation], [PROgrammation, en], [en, LOGique], [LOGique, (], [(, PROLOG], [PROLOG, )], [), .]]

>> Trigrams: 
[[·, High, level], [High, level, Symbolic], [level, Symbolic, Programming], [Symbolic, Programming, Languages], [Programming, Languages, LISt], [Languages, LISt, Programming], [LISt, Programming, (], [Programming, (, LISP], [(, LISP, )], [LISP, ), PROgrammation], [), PROgrammation, en], [PROgrammation, en, LOGique], [en, LOGique, (], [LOGique, (, PROLOG], [(, PROLOG, )], [PROLOG, ), .]]

>> Noun Phrases are: 
[· High level Symbolic Programming Languages, LISt Programming, (LISP, PROgrammation, LOGique, (PROLOG]

>> Named Entities are: 
[('Symbolic Programming Languages', 'ORG'), ('Programming (LISP', 'ORG'), ('PROgrammation', 'ORG')]


============================ Sentence 68 =============================

· 


>> Tokens are: 
[·] 

>> PoS Tags are: 
[('·', 'PUNCT')] 

>> Dependency Tags are: 
[('·', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 69 =============================

Large databases. · 


>> Tokens are: 
[Large, databases, ., ·] 

>> PoS Tags are: 
[('Large', 'ADJ'), ('databases', 'NOUN'), ('.', 'PUNCT'), ('·', 'PUNCT')] 

>> Dependency Tags are: 
[('Large', 'amod'), ('databases', 'ROOT'), ('.', 'punct'), ('·', 'punct')]

>> Bigrams: 
[[Large, databases], [databases, .], [., ·]]

>> Trigrams: 
[[Large, databases, .], [databases, ., ·]]

>> Noun Phrases are: 
[Large databases]

>> Named Entities are: 
[('Large', 'PERSON')]


============================ Sentence 70 =============================

Tools − They reduce the effort and cost involved in developing an expert system to large extent. 


>> Tokens are: 
[Tools, −, reduce, effort, cost, involved, developing, expert, system, large, extent, .] 

>> PoS Tags are: 
[('Tools', 'NOUN'), ('−', 'PROPN'), ('reduce', 'VERB'), ('effort', 'NOUN'), ('cost', 'NOUN'), ('involved', 'VERB'), ('developing', 'VERB'), ('expert', 'NOUN'), ('system', 'NOUN'), ('large', 'ADJ'), ('extent', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Tools', 'compound'), ('−', 'npadvmod'), ('reduce', 'ROOT'), ('effort', 'dobj'), ('cost', 'conj'), ('involved', 'acl'), ('developing', 'pcomp'), ('expert', 'compound'), ('system', 'dobj'), ('large', 'amod'), ('extent', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Tools, −], [−, reduce], [reduce, effort], [effort, cost], [cost, involved], [involved, developing], [developing, expert], [expert, system], [system, large], [large, extent], [extent, .]]

>> Trigrams: 
[[Tools, −, reduce], [−, reduce, effort], [reduce, effort, cost], [effort, cost, involved], [cost, involved, developing], [involved, developing, expert], [developing, expert, system], [expert, system, large], [system, large, extent], [large, extent, .]]

>> Noun Phrases are: 
[They, the effort, cost, an expert system, large extent]

>> Named Entities are: 
[('Tools −', 'PERSON')]


============================ Sentence 71 =============================

· Powerful editors and debugging tools with multi-windows. 


>> Tokens are: 
[·, Powerful, editors, debugging, tools, multi, -, windows, .] 

>> PoS Tags are: 
[('·', 'PUNCT'), ('Powerful', 'ADJ'), ('editors', 'NOUN'), ('debugging', 'VERB'), ('tools', 'NOUN'), ('multi', 'ADJ'), ('-', 'NOUN'), ('windows', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('·', 'punct'), ('Powerful', 'amod'), ('editors', 'ROOT'), ('debugging', 'amod'), ('tools', 'conj'), ('multi', 'pobj'), ('-', 'pobj'), ('windows', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[·, Powerful], [Powerful, editors], [editors, debugging], [debugging, tools], [tools, multi], [multi, -], [-, windows], [windows, .]]

>> Trigrams: 
[[·, Powerful, editors], [Powerful, editors, debugging], [editors, debugging, tools], [debugging, tools, multi], [tools, multi, -], [multi, -, windows], [-, windows, .]]

>> Noun Phrases are: 
[· Powerful editors, debugging tools, -, windows]

>> Named Entities are: 
[]


============================ Sentence 72 =============================

· They provide rapid prototyping · Have Inbuilt definitions of model, knowledge representation, and inference design. · 


>> Tokens are: 
[·, provide, rapid, prototyping, ·, Inbuilt, definitions, model, ,, knowledge, representation, ,, inference, design, ., ·] 

>> PoS Tags are: 
[('·', 'PUNCT'), ('provide', 'VERB'), ('rapid', 'ADJ'), ('prototyping', 'NOUN'), ('·', 'PUNCT'), ('Inbuilt', 'ADJ'), ('definitions', 'NOUN'), ('model', 'NOUN'), (',', 'PUNCT'), ('knowledge', 'NOUN'), ('representation', 'NOUN'), (',', 'PUNCT'), ('inference', 'NOUN'), ('design', 'NOUN'), ('.', 'PUNCT'), ('·', 'PUNCT')] 

>> Dependency Tags are: 
[('·', 'punct'), ('provide', 'ROOT'), ('rapid', 'amod'), ('prototyping', 'dobj'), ('·', 'punct'), ('Inbuilt', 'amod'), ('definitions', 'dobj'), ('model', 'pobj'), (',', 'punct'), ('knowledge', 'compound'), ('representation', 'conj'), (',', 'punct'), ('inference', 'compound'), ('design', 'conj'), ('.', 'punct'), ('·', 'punct')]

>> Bigrams: 
[[·, provide], [provide, rapid], [rapid, prototyping], [prototyping, ·], [·, Inbuilt], [Inbuilt, definitions], [definitions, model], [model, ,], [,, knowledge], [knowledge, representation], [representation, ,], [,, inference], [inference, design], [design, .], [., ·]]

>> Trigrams: 
[[·, provide, rapid], [provide, rapid, prototyping], [rapid, prototyping, ·], [prototyping, ·, Inbuilt], [·, Inbuilt, definitions], [Inbuilt, definitions, model], [definitions, model, ,], [model, ,, knowledge], [,, knowledge, representation], [knowledge, representation, ,], [representation, ,, inference], [,, inference, design], [inference, design, .], [design, ., ·]]

>> Noun Phrases are: 
[They, rapid prototyping, Inbuilt definitions, model, knowledge representation, inference design]

>> Named Entities are: 
[('Have Inbuilt', 'PERSON')]


============================ Sentence 73 =============================

Shells − A shell is nothing but an expert system without knowledge base. 


>> Tokens are: 
[Shells, −, shell, expert, system, knowledge, base, .] 

>> PoS Tags are: 
[('Shells', 'NOUN'), ('−', 'PROPN'), ('shell', 'NOUN'), ('expert', 'NOUN'), ('system', 'NOUN'), ('knowledge', 'NOUN'), ('base', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Shells', 'compound'), ('−', 'nsubj'), ('shell', 'nsubj'), ('expert', 'compound'), ('system', 'pobj'), ('knowledge', 'compound'), ('base', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Shells, −], [−, shell], [shell, expert], [expert, system], [system, knowledge], [knowledge, base], [base, .]]

>> Trigrams: 
[[Shells, −, shell], [−, shell, expert], [shell, expert, system], [expert, system, knowledge], [system, knowledge, base], [knowledge, base, .]]

>> Noun Phrases are: 
[Shells −, A shell, nothing, an expert system, knowledge base]

>> Named Entities are: 
[('Shells −', 'PERSON')]


============================ Sentence 74 =============================

A shell provides the developers with knowledge acquisition, inference engine, user interface, and explanation facility. 


>> Tokens are: 
[shell, provides, developers, knowledge, acquisition, ,, inference, engine, ,, user, interface, ,, explanation, facility, .] 

>> PoS Tags are: 
[('shell', 'NOUN'), ('provides', 'VERB'), ('developers', 'NOUN'), ('knowledge', 'NOUN'), ('acquisition', 'NOUN'), (',', 'PUNCT'), ('inference', 'NOUN'), ('engine', 'NOUN'), (',', 'PUNCT'), ('user', 'NOUN'), ('interface', 'NOUN'), (',', 'PUNCT'), ('explanation', 'NOUN'), ('facility', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('shell', 'nsubj'), ('provides', 'ROOT'), ('developers', 'dobj'), ('knowledge', 'compound'), ('acquisition', 'pobj'), (',', 'punct'), ('inference', 'compound'), ('engine', 'conj'), (',', 'punct'), ('user', 'compound'), ('interface', 'conj'), (',', 'punct'), ('explanation', 'compound'), ('facility', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[shell, provides], [provides, developers], [developers, knowledge], [knowledge, acquisition], [acquisition, ,], [,, inference], [inference, engine], [engine, ,], [,, user], [user, interface], [interface, ,], [,, explanation], [explanation, facility], [facility, .]]

>> Trigrams: 
[[shell, provides, developers], [provides, developers, knowledge], [developers, knowledge, acquisition], [knowledge, acquisition, ,], [acquisition, ,, inference], [,, inference, engine], [inference, engine, ,], [engine, ,, user], [,, user, interface], [user, interface, ,], [interface, ,, explanation], [,, explanation, facility], [explanation, facility, .]]

>> Noun Phrases are: 
[A shell, the developers, knowledge acquisition, inference engine, user interface, explanation facility]

>> Named Entities are: 
[]


============================ Sentence 75 =============================

For example, few shells are given below − · Java Expert System Shell (JESS) that provides fully developed Java API for creating an expert system. 


>> Tokens are: 
[example, ,, shells, given, −, ·, Java, Expert, System, Shell, (, JESS, ), provides, fully, developed, Java, API, creating, expert, system, .] 

>> PoS Tags are: 
[('example', 'NOUN'), (',', 'PUNCT'), ('shells', 'NOUN'), ('given', 'VERB'), ('−', 'PROPN'), ('·', 'PUNCT'), ('Java', 'PROPN'), ('Expert', 'PROPN'), ('System', 'PROPN'), ('Shell', 'PROPN'), ('(', 'PUNCT'), ('JESS', 'PROPN'), (')', 'PUNCT'), ('provides', 'VERB'), ('fully', 'ADV'), ('developed', 'VERB'), ('Java', 'PROPN'), ('API', 'PROPN'), ('creating', 'VERB'), ('expert', 'NOUN'), ('system', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('example', 'pobj'), (',', 'punct'), ('shells', 'nsubjpass'), ('given', 'ROOT'), ('−', 'pobj'), ('·', 'punct'), ('Java', 'compound'), ('Expert', 'compound'), ('System', 'compound'), ('Shell', 'appos'), ('(', 'punct'), ('JESS', 'appos'), (')', 'punct'), ('provides', 'relcl'), ('fully', 'advmod'), ('developed', 'amod'), ('Java', 'compound'), ('API', 'dobj'), ('creating', 'pcomp'), ('expert', 'compound'), ('system', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[example, ,], [,, shells], [shells, given], [given, −], [−, ·], [·, Java], [Java, Expert], [Expert, System], [System, Shell], [Shell, (], [(, JESS], [JESS, )], [), provides], [provides, fully], [fully, developed], [developed, Java], [Java, API], [API, creating], [creating, expert], [expert, system], [system, .]]

>> Trigrams: 
[[example, ,, shells], [,, shells, given], [shells, given, −], [given, −, ·], [−, ·, Java], [·, Java, Expert], [Java, Expert, System], [Expert, System, Shell], [System, Shell, (], [Shell, (, JESS], [(, JESS, )], [JESS, ), provides], [), provides, fully], [provides, fully, developed], [fully, developed, Java], [developed, Java, API], [Java, API, creating], [API, creating, expert], [creating, expert, system], [expert, system, .]]

>> Noun Phrases are: 
[example, few shells, −, · Java Expert System Shell, JESS, fully developed Java API, an expert system]

>> Named Entities are: 
[('Java Expert System Shell', 'PERSON'), ('JESS', 'ORG'), ('Java API', 'PERSON')]


============================ Sentence 76 =============================

· Vidwan, a shell developed at the National Centre for Software Technology, Mumbai in 1993. 


>> Tokens are: 
[·, Vidwan, ,, shell, developed, National, Centre, Software, Technology, ,, Mumbai, 1993, .] 

>> PoS Tags are: 
[('·', 'PUNCT'), ('Vidwan', 'PROPN'), (',', 'PUNCT'), ('shell', 'NOUN'), ('developed', 'VERB'), ('National', 'PROPN'), ('Centre', 'PROPN'), ('Software', 'PROPN'), ('Technology', 'PROPN'), (',', 'PUNCT'), ('Mumbai', 'PROPN'), ('1993', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('·', 'punct'), ('Vidwan', 'dep'), (',', 'punct'), ('shell', 'ROOT'), ('developed', 'acl'), ('National', 'compound'), ('Centre', 'pobj'), ('Software', 'compound'), ('Technology', 'pobj'), (',', 'punct'), ('Mumbai', 'npadvmod'), ('1993', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[·, Vidwan], [Vidwan, ,], [,, shell], [shell, developed], [developed, National], [National, Centre], [Centre, Software], [Software, Technology], [Technology, ,], [,, Mumbai], [Mumbai, 1993], [1993, .]]

>> Trigrams: 
[[·, Vidwan, ,], [Vidwan, ,, shell], [,, shell, developed], [shell, developed, National], [developed, National, Centre], [National, Centre, Software], [Centre, Software, Technology], [Software, Technology, ,], [Technology, ,, Mumbai], [,, Mumbai, 1993], [Mumbai, 1993, .]]

>> Noun Phrases are: 
[· Vidwan, a shell, the National Centre, Software Technology]

>> Named Entities are: 
[('Vidwan', 'PERSON'), ('the National Centre for Software Technology', 'ORG'), ('Mumbai', 'GPE'), ('1993', 'DATE')]


============================ Sentence 77 =============================

It enables knowledge encoding in the form of IF-THEN rules. 


>> Tokens are: 
[enables, knowledge, encoding, form, -, rules, .] 

>> PoS Tags are: 
[('enables', 'VERB'), ('knowledge', 'NOUN'), ('encoding', 'NOUN'), ('form', 'NOUN'), ('-', 'PUNCT'), ('rules', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('enables', 'ROOT'), ('knowledge', 'compound'), ('encoding', 'dobj'), ('form', 'pobj'), ('-', 'punct'), ('rules', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[enables, knowledge], [knowledge, encoding], [encoding, form], [form, -], [-, rules], [rules, .]]

>> Trigrams: 
[[enables, knowledge, encoding], [knowledge, encoding, form], [encoding, form, -], [form, -, rules], [-, rules, .]]

>> Noun Phrases are: 
[It, knowledge encoding, the form, IF-THEN rules]

>> Named Entities are: 
[]


============================ Sentence 78 =============================

Development of Expert Systems: General Steps The process of ES development is iterative. 


>> Tokens are: 
[Development, Expert, Systems, :, General, Steps, process, ES, development, iterative, .] 

>> PoS Tags are: 
[('Development', 'NOUN'), ('Expert', 'PROPN'), ('Systems', 'PROPN'), (':', 'PUNCT'), ('General', 'PROPN'), ('Steps', 'VERB'), ('process', 'NOUN'), ('ES', 'NOUN'), ('development', 'NOUN'), ('iterative', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Development', 'nsubj'), ('Expert', 'compound'), ('Systems', 'pobj'), (':', 'punct'), ('General', 'nsubj'), ('Steps', 'ROOT'), ('process', 'nsubj'), ('ES', 'compound'), ('development', 'pobj'), ('iterative', 'acomp'), ('.', 'punct')]

>> Bigrams: 
[[Development, Expert], [Expert, Systems], [Systems, :], [:, General], [General, Steps], [Steps, process], [process, ES], [ES, development], [development, iterative], [iterative, .]]

>> Trigrams: 
[[Development, Expert, Systems], [Expert, Systems, :], [Systems, :, General], [:, General, Steps], [General, Steps, process], [Steps, process, ES], [process, ES, development], [ES, development, iterative], [development, iterative, .]]

>> Noun Phrases are: 
[Development, Expert Systems, General, The process, ES development]

>> Named Entities are: 
[]


============================ Sentence 79 =============================

Steps in developing the ES include − Identify Problem Domain · 


>> Tokens are: 
[Steps, developing, ES, include, −, Identify, Problem, Domain, ·] 

>> PoS Tags are: 
[('Steps', 'NOUN'), ('developing', 'VERB'), ('ES', 'NOUN'), ('include', 'VERB'), ('−', 'PROPN'), ('Identify', 'PROPN'), ('Problem', 'PROPN'), ('Domain', 'PROPN'), ('·', 'PUNCT')] 

>> Dependency Tags are: 
[('Steps', 'nsubj'), ('developing', 'pcomp'), ('ES', 'dobj'), ('include', 'ROOT'), ('−', 'compound'), ('Identify', 'compound'), ('Problem', 'compound'), ('Domain', 'dobj'), ('·', 'punct')]

>> Bigrams: 
[[Steps, developing], [developing, ES], [ES, include], [include, −], [−, Identify], [Identify, Problem], [Problem, Domain], [Domain, ·]]

>> Trigrams: 
[[Steps, developing, ES], [developing, ES, include], [ES, include, −], [include, −, Identify], [−, Identify, Problem], [Identify, Problem, Domain], [Problem, Domain, ·]]

>> Noun Phrases are: 
[Steps, the ES, − Identify Problem Domain]

>> Named Entities are: 
[('ES', 'ORG'), ('− Identify Problem Domain', 'ORG')]


============================ Sentence 80 =============================

The problem must be suitable for an expert system to solve it. · 


>> Tokens are: 
[problem, suitable, expert, system, solve, ., ·] 

>> PoS Tags are: 
[('problem', 'NOUN'), ('suitable', 'ADJ'), ('expert', 'NOUN'), ('system', 'NOUN'), ('solve', 'VERB'), ('.', 'PUNCT'), ('·', 'PUNCT')] 

>> Dependency Tags are: 
[('problem', 'nsubj'), ('suitable', 'acomp'), ('expert', 'compound'), ('system', 'nsubj'), ('solve', 'advcl'), ('.', 'punct'), ('·', 'punct')]

>> Bigrams: 
[[problem, suitable], [suitable, expert], [expert, system], [system, solve], [solve, .], [., ·]]

>> Trigrams: 
[[problem, suitable, expert], [suitable, expert, system], [expert, system, solve], [system, solve, .], [solve, ., ·]]

>> Noun Phrases are: 
[The problem, an expert system, it]

>> Named Entities are: 
[]


============================ Sentence 81 =============================

Find the experts in task domain for the ES project. 


>> Tokens are: 
[Find, experts, task, domain, ES, project, .] 

>> PoS Tags are: 
[('Find', 'VERB'), ('experts', 'NOUN'), ('task', 'NOUN'), ('domain', 'NOUN'), ('ES', 'PROPN'), ('project', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Find', 'ROOT'), ('experts', 'dobj'), ('task', 'compound'), ('domain', 'pobj'), ('ES', 'compound'), ('project', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Find, experts], [experts, task], [task, domain], [domain, ES], [ES, project], [project, .]]

>> Trigrams: 
[[Find, experts, task], [experts, task, domain], [task, domain, ES], [domain, ES, project], [ES, project, .]]

>> Noun Phrases are: 
[the experts, task domain, the ES project]

>> Named Entities are: 
[('Find', 'PERSON'), ('ES', 'ORG')]


============================ Sentence 82 =============================

· Establish cost-effectiveness of the system. 


>> Tokens are: 
[·, Establish, cost, -, effectiveness, system, .] 

>> PoS Tags are: 
[('·', 'PUNCT'), ('Establish', 'VERB'), ('cost', 'NOUN'), ('-', 'PUNCT'), ('effectiveness', 'NOUN'), ('system', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('·', 'punct'), ('Establish', 'ROOT'), ('cost', 'compound'), ('-', 'punct'), ('effectiveness', 'dobj'), ('system', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[·, Establish], [Establish, cost], [cost, -], [-, effectiveness], [effectiveness, system], [system, .]]

>> Trigrams: 
[[·, Establish, cost], [Establish, cost, -], [cost, -, effectiveness], [-, effectiveness, system], [effectiveness, system, .]]

>> Noun Phrases are: 
[cost-effectiveness, the system]

>> Named Entities are: 
[('Establish', 'NORP')]


============================ Sentence 83 =============================

Design the System · Identify the ES Technology · Know and establish the degree of integration with the other systems and databases. 


>> Tokens are: 
[Design, System, ·, Identify, ES, Technology, ·, Know, establish, degree, integration, systems, databases, .] 

>> PoS Tags are: 
[('Design', 'VERB'), ('System', 'PROPN'), ('·', 'PUNCT'), ('Identify', 'VERB'), ('ES', 'PROPN'), ('Technology', 'PROPN'), ('·', 'PUNCT'), ('Know', 'VERB'), ('establish', 'VERB'), ('degree', 'NOUN'), ('integration', 'NOUN'), ('systems', 'NOUN'), ('databases', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Design', 'ROOT'), ('System', 'dobj'), ('·', 'punct'), ('Identify', 'advcl'), ('ES', 'compound'), ('Technology', 'dobj'), ('·', 'punct'), ('Know', 'parataxis'), ('establish', 'conj'), ('degree', 'dobj'), ('integration', 'pobj'), ('systems', 'pobj'), ('databases', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[Design, System], [System, ·], [·, Identify], [Identify, ES], [ES, Technology], [Technology, ·], [·, Know], [Know, establish], [establish, degree], [degree, integration], [integration, systems], [systems, databases], [databases, .]]

>> Trigrams: 
[[Design, System, ·], [System, ·, Identify], [·, Identify, ES], [Identify, ES, Technology], [ES, Technology, ·], [Technology, ·, Know], [·, Know, establish], [Know, establish, degree], [establish, degree, integration], [degree, integration, systems], [integration, systems, databases], [systems, databases, .]]

>> Noun Phrases are: 
[the System, the ES Technology, the degree, integration, the other systems, databases]

>> Named Entities are: 
[('Know', 'PERSON')]


============================ Sentence 84 =============================

· Realize how the concepts can represent the domain knowledge best. 


>> Tokens are: 
[·, Realize, concepts, represent, domain, knowledge, best, .] 

>> PoS Tags are: 
[('·', 'PUNCT'), ('Realize', 'VERB'), ('concepts', 'NOUN'), ('represent', 'VERB'), ('domain', 'NOUN'), ('knowledge', 'NOUN'), ('best', 'ADV'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('·', 'punct'), ('Realize', 'ROOT'), ('concepts', 'nsubj'), ('represent', 'ccomp'), ('domain', 'compound'), ('knowledge', 'dobj'), ('best', 'advmod'), ('.', 'punct')]

>> Bigrams: 
[[·, Realize], [Realize, concepts], [concepts, represent], [represent, domain], [domain, knowledge], [knowledge, best], [best, .]]

>> Trigrams: 
[[·, Realize, concepts], [Realize, concepts, represent], [concepts, represent, domain], [represent, domain, knowledge], [domain, knowledge, best], [knowledge, best, .]]

>> Noun Phrases are: 
[the concepts, the domain knowledge]

>> Named Entities are: 
[('Realize', 'PERSON')]


============================ Sentence 85 =============================

Develop the Prototype From Knowledge Base: The knowledge engineer works to − · Acquire domain knowledge from the expert. 


>> Tokens are: 
[Develop, Prototype, Knowledge, Base, :, knowledge, engineer, works, −, ·, Acquire, domain, knowledge, expert, .] 

>> PoS Tags are: 
[('Develop', 'VERB'), ('Prototype', 'PROPN'), ('Knowledge', 'PROPN'), ('Base', 'PROPN'), (':', 'PUNCT'), ('knowledge', 'NOUN'), ('engineer', 'NOUN'), ('works', 'VERB'), ('−', 'PROPN'), ('·', 'PUNCT'), ('Acquire', 'NOUN'), ('domain', 'NOUN'), ('knowledge', 'NOUN'), ('expert', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Develop', 'advcl'), ('Prototype', 'dobj'), ('Knowledge', 'compound'), ('Base', 'pobj'), (':', 'punct'), ('knowledge', 'compound'), ('engineer', 'nsubj'), ('works', 'ROOT'), ('−', 'pobj'), ('·', 'punct'), ('Acquire', 'compound'), ('domain', 'compound'), ('knowledge', 'pobj'), ('expert', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Develop, Prototype], [Prototype, Knowledge], [Knowledge, Base], [Base, :], [:, knowledge], [knowledge, engineer], [engineer, works], [works, −], [−, ·], [·, Acquire], [Acquire, domain], [domain, knowledge], [knowledge, expert], [expert, .]]

>> Trigrams: 
[[Develop, Prototype, Knowledge], [Prototype, Knowledge, Base], [Knowledge, Base, :], [Base, :, knowledge], [:, knowledge, engineer], [knowledge, engineer, works], [engineer, works, −], [works, −, ·], [−, ·, Acquire], [·, Acquire, domain], [Acquire, domain, knowledge], [domain, knowledge, expert], [knowledge, expert, .]]

>> Noun Phrases are: 
[the Prototype, Knowledge Base, The knowledge engineer, −, · Acquire domain knowledge, the expert]

>> Named Entities are: 
[]


============================ Sentence 86 =============================

· Represent it in the form of If-THEN-ELSE rules. 


>> Tokens are: 
[·, Represent, form, -, -, rules, .] 

>> PoS Tags are: 
[('·', 'PUNCT'), ('Represent', 'VERB'), ('form', 'NOUN'), ('-', 'PUNCT'), ('-', 'PUNCT'), ('rules', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('·', 'punct'), ('Represent', 'ROOT'), ('form', 'pobj'), ('-', 'punct'), ('-', 'punct'), ('rules', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[·, Represent], [Represent, form], [form, -], [-, -], [-, rules], [rules, .]]

>> Trigrams: 
[[·, Represent, form], [Represent, form, -], [form, -, -], [-, -, rules], [-, rules, .]]

>> Noun Phrases are: 
[it, the form, If-THEN-ELSE rules]

>> Named Entities are: 
[('Represent', 'PERSON')]


============================ Sentence 87 =============================

Test and Refine the Prototype · The knowledge engineer uses sample cases to test the prototype for any deficiencies in performance. 


>> Tokens are: 
[Test, Refine, Prototype, ·, knowledge, engineer, uses, sample, cases, test, prototype, deficiencies, performance, .] 

>> PoS Tags are: 
[('Test', 'NOUN'), ('Refine', 'VERB'), ('Prototype', 'PROPN'), ('·', 'PUNCT'), ('knowledge', 'NOUN'), ('engineer', 'NOUN'), ('uses', 'VERB'), ('sample', 'NOUN'), ('cases', 'NOUN'), ('test', 'VERB'), ('prototype', 'NOUN'), ('deficiencies', 'NOUN'), ('performance', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Test', 'nsubj'), ('Refine', 'conj'), ('Prototype', 'dobj'), ('·', 'punct'), ('knowledge', 'compound'), ('engineer', 'nsubj'), ('uses', 'ROOT'), ('sample', 'compound'), ('cases', 'dobj'), ('test', 'xcomp'), ('prototype', 'dobj'), ('deficiencies', 'pobj'), ('performance', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Test, Refine], [Refine, Prototype], [Prototype, ·], [·, knowledge], [knowledge, engineer], [engineer, uses], [uses, sample], [sample, cases], [cases, test], [test, prototype], [prototype, deficiencies], [deficiencies, performance], [performance, .]]

>> Trigrams: 
[[Test, Refine, Prototype], [Refine, Prototype, ·], [Prototype, ·, knowledge], [·, knowledge, engineer], [knowledge, engineer, uses], [engineer, uses, sample], [uses, sample, cases], [sample, cases, test], [cases, test, prototype], [test, prototype, deficiencies], [prototype, deficiencies, performance], [deficiencies, performance, .]]

>> Noun Phrases are: 
[Test, the Prototype, The knowledge engineer, sample cases, the prototype, any deficiencies, performance]

>> Named Entities are: 
[('Refine', 'PERSON'), ('Prototype', 'ORG')]


============================ Sentence 88 =============================

· 


>> Tokens are: 
[·] 

>> PoS Tags are: 
[('·', 'PUNCT')] 

>> Dependency Tags are: 
[('·', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 89 =============================

End users test the prototypes of the ES. 


>> Tokens are: 
[End, users, test, prototypes, ES, .] 

>> PoS Tags are: 
[('End', 'NOUN'), ('users', 'NOUN'), ('test', 'VERB'), ('prototypes', 'NOUN'), ('ES', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('End', 'compound'), ('users', 'nsubj'), ('test', 'ROOT'), ('prototypes', 'dobj'), ('ES', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[End, users], [users, test], [test, prototypes], [prototypes, ES], [ES, .]]

>> Trigrams: 
[[End, users, test], [users, test, prototypes], [test, prototypes, ES], [prototypes, ES, .]]

>> Noun Phrases are: 
[End users, the prototypes, the ES]

>> Named Entities are: 
[('ES', 'ORG')]


============================ Sentence 90 =============================

Develop and Complete the ES · Test and ensure the interaction of the ES with all elements of its environment, including end users, databases, and other information systems. 


>> Tokens are: 
[Develop, Complete, ES, ·, Test, ensure, interaction, ES, elements, environment, ,, including, end, users, ,, databases, ,, information, systems, .] 

>> PoS Tags are: 
[('Develop', 'VERB'), ('Complete', 'VERB'), ('ES', 'PROPN'), ('·', 'PUNCT'), ('Test', 'NOUN'), ('ensure', 'VERB'), ('interaction', 'NOUN'), ('ES', 'PROPN'), ('elements', 'NOUN'), ('environment', 'NOUN'), (',', 'PUNCT'), ('including', 'VERB'), ('end', 'NOUN'), ('users', 'NOUN'), (',', 'PUNCT'), ('databases', 'NOUN'), (',', 'PUNCT'), ('information', 'NOUN'), ('systems', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Develop', 'ROOT'), ('Complete', 'conj'), ('ES', 'dobj'), ('·', 'punct'), ('Test', 'conj'), ('ensure', 'conj'), ('interaction', 'dobj'), ('ES', 'pobj'), ('elements', 'pobj'), ('environment', 'pobj'), (',', 'punct'), ('including', 'prep'), ('end', 'compound'), ('users', 'pobj'), (',', 'punct'), ('databases', 'conj'), (',', 'punct'), ('information', 'compound'), ('systems', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[Develop, Complete], [Complete, ES], [ES, ·], [·, Test], [Test, ensure], [ensure, interaction], [interaction, ES], [ES, elements], [elements, environment], [environment, ,], [,, including], [including, end], [end, users], [users, ,], [,, databases], [databases, ,], [,, information], [information, systems], [systems, .]]

>> Trigrams: 
[[Develop, Complete, ES], [Complete, ES, ·], [ES, ·, Test], [·, Test, ensure], [Test, ensure, interaction], [ensure, interaction, ES], [interaction, ES, elements], [ES, elements, environment], [elements, environment, ,], [environment, ,, including], [,, including, end], [including, end, users], [end, users, ,], [users, ,, databases], [,, databases, ,], [databases, ,, information], [,, information, systems], [information, systems, .]]

>> Noun Phrases are: 
[the ES, · Test, the interaction, the ES, all elements, its environment, end users, databases, other information systems]

>> Named Entities are: 
[('Test', 'PERSON')]


============================ Sentence 91 =============================

· 


>> Tokens are: 
[·] 

>> PoS Tags are: 
[('·', 'PUNCT')] 

>> Dependency Tags are: 
[('·', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 92 =============================

Document the ES project well. 


>> Tokens are: 
[Document, ES, project, .] 

>> PoS Tags are: 
[('Document', 'NOUN'), ('ES', 'NOUN'), ('project', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Document', 'ROOT'), ('ES', 'compound'), ('project', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Document, ES], [ES, project], [project, .]]

>> Trigrams: 
[[Document, ES, project], [ES, project, .]]

>> Noun Phrases are: 
[Document, the ES project]

>> Named Entities are: 
[('ES', 'ORG')]


============================ Sentence 93 =============================

· Train the user to use ES. 


>> Tokens are: 
[·, Train, user, use, ES, .] 

>> PoS Tags are: 
[('·', 'PUNCT'), ('Train', 'VERB'), ('user', 'NOUN'), ('use', 'VERB'), ('ES', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('·', 'punct'), ('Train', 'ROOT'), ('user', 'dobj'), ('use', 'relcl'), ('ES', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[·, Train], [Train, user], [user, use], [use, ES], [ES, .]]

>> Trigrams: 
[[·, Train, user], [Train, user, use], [user, use, ES], [use, ES, .]]

>> Noun Phrases are: 
[the user, ES]

>> Named Entities are: 
[('ES', 'ORG')]


============================ Sentence 94 =============================

Maintain the System · Keep the knowledge base up-to-date by regular review and update. · 


>> Tokens are: 
[Maintain, System, ·, knowledge, base, -, -, date, regular, review, update, ., ·] 

>> PoS Tags are: 
[('Maintain', 'VERB'), ('System', 'NOUN'), ('·', 'PUNCT'), ('knowledge', 'NOUN'), ('base', 'VERB'), ('-', 'PUNCT'), ('-', 'PUNCT'), ('date', 'NOUN'), ('regular', 'ADJ'), ('review', 'NOUN'), ('update', 'NOUN'), ('.', 'PUNCT'), ('·', 'PUNCT')] 

>> Dependency Tags are: 
[('Maintain', 'ROOT'), ('System', 'dobj'), ('·', 'punct'), ('knowledge', 'dobj'), ('base', 'oprd'), ('-', 'punct'), ('-', 'punct'), ('date', 'pobj'), ('regular', 'amod'), ('review', 'pobj'), ('update', 'conj'), ('.', 'punct'), ('·', 'punct')]

>> Bigrams: 
[[Maintain, System], [System, ·], [·, knowledge], [knowledge, base], [base, -], [-, -], [-, date], [date, regular], [regular, review], [review, update], [update, .], [., ·]]

>> Trigrams: 
[[Maintain, System, ·], [System, ·, knowledge], [·, knowledge, base], [knowledge, base, -], [base, -, -], [-, -, date], [-, date, regular], [date, regular, review], [regular, review, update], [review, update, .], [update, ., ·]]

>> Noun Phrases are: 
[the System, the knowledge, date, regular review, update]

>> Named Entities are: 
[]


============================ Sentence 95 =============================

Cater for new interfaces with other information systems, as those systems evolve. 


>> Tokens are: 
[Cater, new, interfaces, information, systems, ,, systems, evolve, .] 

>> PoS Tags are: 
[('Cater', 'NOUN'), ('new', 'ADJ'), ('interfaces', 'NOUN'), ('information', 'NOUN'), ('systems', 'NOUN'), (',', 'PUNCT'), ('systems', 'NOUN'), ('evolve', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Cater', 'ROOT'), ('new', 'amod'), ('interfaces', 'pobj'), ('information', 'compound'), ('systems', 'pobj'), (',', 'punct'), ('systems', 'nsubj'), ('evolve', 'advcl'), ('.', 'punct')]

>> Bigrams: 
[[Cater, new], [new, interfaces], [interfaces, information], [information, systems], [systems, ,], [,, systems], [systems, evolve], [evolve, .]]

>> Trigrams: 
[[Cater, new, interfaces], [new, interfaces, information], [interfaces, information, systems], [information, systems, ,], [systems, ,, systems], [,, systems, evolve], [systems, evolve, .]]

>> Noun Phrases are: 
[Cater, new interfaces, other information systems, those systems]

>> Named Entities are: 
[('Cater', 'PERSON')]


============================ Sentence 96 =============================

Benefits of Expert Systems · Availability − They are easily available due to mass production of software. · 


>> Tokens are: 
[Benefits, Expert, Systems, ·, Availability, −, easily, available, mass, production, software, ., ·] 

>> PoS Tags are: 
[('Benefits', 'NOUN'), ('Expert', 'PROPN'), ('Systems', 'PROPN'), ('·', 'PUNCT'), ('Availability', 'NOUN'), ('−', 'NOUN'), ('easily', 'ADV'), ('available', 'ADJ'), ('mass', 'ADJ'), ('production', 'NOUN'), ('software', 'NOUN'), ('.', 'PUNCT'), ('·', 'PUNCT')] 

>> Dependency Tags are: 
[('Benefits', 'dep'), ('Expert', 'compound'), ('Systems', 'pobj'), ('·', 'punct'), ('Availability', 'compound'), ('−', 'appos'), ('easily', 'advmod'), ('available', 'acomp'), ('mass', 'amod'), ('production', 'pobj'), ('software', 'pobj'), ('.', 'punct'), ('·', 'punct')]

>> Bigrams: 
[[Benefits, Expert], [Expert, Systems], [Systems, ·], [·, Availability], [Availability, −], [−, easily], [easily, available], [available, mass], [mass, production], [production, software], [software, .], [., ·]]

>> Trigrams: 
[[Benefits, Expert, Systems], [Expert, Systems, ·], [Systems, ·, Availability], [·, Availability, −], [Availability, −, easily], [−, easily, available], [easily, available, mass], [available, mass, production], [mass, production, software], [production, software, .], [software, ., ·]]

>> Noun Phrases are: 
[Expert Systems, Availability −, They, mass production, software]

>> Named Entities are: 
[]


============================ Sentence 97 =============================

Less Production Cost − Production cost is reasonable. 


>> Tokens are: 
[Production, Cost, −, Production, cost, reasonable, .] 

>> PoS Tags are: 
[('Production', 'NOUN'), ('Cost', 'NOUN'), ('−', 'PROPN'), ('Production', 'PROPN'), ('cost', 'NOUN'), ('reasonable', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Production', 'compound'), ('Cost', 'compound'), ('−', 'compound'), ('Production', 'compound'), ('cost', 'nsubj'), ('reasonable', 'acomp'), ('.', 'punct')]

>> Bigrams: 
[[Production, Cost], [Cost, −], [−, Production], [Production, cost], [cost, reasonable], [reasonable, .]]

>> Trigrams: 
[[Production, Cost, −], [Cost, −, Production], [−, Production, cost], [Production, cost, reasonable], [cost, reasonable, .]]

>> Noun Phrases are: 
[Less Production Cost − Production cost]

>> Named Entities are: 
[]


============================ Sentence 98 =============================

This makes them affordable. · 


>> Tokens are: 
[makes, affordable, ., ·] 

>> PoS Tags are: 
[('makes', 'VERB'), ('affordable', 'ADJ'), ('.', 'PUNCT'), ('·', 'PUNCT')] 

>> Dependency Tags are: 
[('makes', 'ROOT'), ('affordable', 'ccomp'), ('.', 'punct'), ('·', 'punct')]

>> Bigrams: 
[[makes, affordable], [affordable, .], [., ·]]

>> Trigrams: 
[[makes, affordable, .], [affordable, ., ·]]

>> Noun Phrases are: 
[them]

>> Named Entities are: 
[]


============================ Sentence 99 =============================

Speed − They offer great speed. 


>> Tokens are: 
[Speed, −, offer, great, speed, .] 

>> PoS Tags are: 
[('Speed', 'NOUN'), ('−', 'PROPN'), ('offer', 'VERB'), ('great', 'ADJ'), ('speed', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Speed', 'compound'), ('−', 'npadvmod'), ('offer', 'ROOT'), ('great', 'amod'), ('speed', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Speed, −], [−, offer], [offer, great], [great, speed], [speed, .]]

>> Trigrams: 
[[Speed, −, offer], [−, offer, great], [offer, great, speed], [great, speed, .]]

>> Noun Phrases are: 
[They, great speed]

>> Named Entities are: 
[]


============================ Sentence 100 =============================

They reduce the amount of work an individual puts in. · 


>> Tokens are: 
[reduce, work, individual, puts, ., ·] 

>> PoS Tags are: 
[('reduce', 'VERB'), ('work', 'NOUN'), ('individual', 'ADJ'), ('puts', 'VERB'), ('.', 'PUNCT'), ('·', 'PUNCT')] 

>> Dependency Tags are: 
[('reduce', 'ROOT'), ('work', 'pobj'), ('individual', 'nsubj'), ('puts', 'relcl'), ('.', 'punct'), ('·', 'punct')]

>> Bigrams: 
[[reduce, work], [work, individual], [individual, puts], [puts, .], [., ·]]

>> Trigrams: 
[[reduce, work, individual], [work, individual, puts], [individual, puts, .], [puts, ., ·]]

>> Noun Phrases are: 
[They, the amount, work]

>> Named Entities are: 
[]


============================ Sentence 101 =============================

Less Error Rate − Error rate is low as compared to human errors. 


>> Tokens are: 
[Error, Rate, −, Error, rate, low, compared, human, errors, .] 

>> PoS Tags are: 
[('Error', 'NOUN'), ('Rate', 'NOUN'), ('−', 'PROPN'), ('Error', 'PROPN'), ('rate', 'NOUN'), ('low', 'ADJ'), ('compared', 'VERB'), ('human', 'ADJ'), ('errors', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Error', 'compound'), ('Rate', 'compound'), ('−', 'compound'), ('Error', 'compound'), ('rate', 'nsubj'), ('low', 'acomp'), ('compared', 'advcl'), ('human', 'amod'), ('errors', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Error, Rate], [Rate, −], [−, Error], [Error, rate], [rate, low], [low, compared], [compared, human], [human, errors], [errors, .]]

>> Trigrams: 
[[Error, Rate, −], [Rate, −, Error], [−, Error, rate], [Error, rate, low], [rate, low, compared], [low, compared, human], [compared, human, errors], [human, errors, .]]

>> Noun Phrases are: 
[Less Error Rate − Error rate, human errors]

>> Named Entities are: 
[]


============================ Sentence 102 =============================

· 


>> Tokens are: 
[·] 

>> PoS Tags are: 
[('·', 'PUNCT')] 

>> Dependency Tags are: 
[('·', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 103 =============================

Reducing Risk − They can work in the environment dangerous to humans. 


>> Tokens are: 
[Reducing, Risk, −, work, environment, dangerous, humans, .] 

>> PoS Tags are: 
[('Reducing', 'VERB'), ('Risk', 'NOUN'), ('−', 'NOUN'), ('work', 'VERB'), ('environment', 'NOUN'), ('dangerous', 'ADJ'), ('humans', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Reducing', 'advcl'), ('Risk', 'compound'), ('−', 'dobj'), ('work', 'ROOT'), ('environment', 'pobj'), ('dangerous', 'amod'), ('humans', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Reducing, Risk], [Risk, −], [−, work], [work, environment], [environment, dangerous], [dangerous, humans], [humans, .]]

>> Trigrams: 
[[Reducing, Risk, −], [Risk, −, work], [−, work, environment], [work, environment, dangerous], [environment, dangerous, humans], [dangerous, humans, .]]

>> Noun Phrases are: 
[Risk −, They, the environment, humans]

>> Named Entities are: 
[]


============================ Sentence 104 =============================

· 


>> Tokens are: 
[·] 

>> PoS Tags are: 
[('·', 'PUNCT')] 

>> Dependency Tags are: 
[('·', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[]


============================ Sentence 105 =============================

Steady response − They work steadily without getting motional, tensed or fatigued. 


>> Tokens are: 
[Steady, response, −, work, steadily, getting, motional, ,, tensed, fatigued, .] 

>> PoS Tags are: 
[('Steady', 'ADJ'), ('response', 'NOUN'), ('−', 'PROPN'), ('work', 'VERB'), ('steadily', 'ADV'), ('getting', 'VERB'), ('motional', 'ADJ'), (',', 'PUNCT'), ('tensed', 'VERB'), ('fatigued', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Steady', 'amod'), ('response', 'dep'), ('−', 'npadvmod'), ('work', 'ROOT'), ('steadily', 'advmod'), ('getting', 'pcomp'), ('motional', 'acomp'), (',', 'punct'), ('tensed', 'conj'), ('fatigued', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[Steady, response], [response, −], [−, work], [work, steadily], [steadily, getting], [getting, motional], [motional, ,], [,, tensed], [tensed, fatigued], [fatigued, .]]

>> Trigrams: 
[[Steady, response, −], [response, −, work], [−, work, steadily], [work, steadily, getting], [steadily, getting, motional], [getting, motional, ,], [motional, ,, tensed], [,, tensed, fatigued], [tensed, fatigued, .]]

>> Noun Phrases are: 
[They]

>> Named Entities are: 
[('−', 'PERSON')]
