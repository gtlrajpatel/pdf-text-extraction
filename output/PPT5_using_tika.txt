W5 of Computer Engineering (Why, What, When, Where, How)


Prof. Dixita B. Kagathara







2160704
Theory of Computation 
Unit-3
Context Free Grammar


Dixita.kagathara@darshan.ac.in


Theory of Computation (2160704)
Darshan Institute of Engineering & Technology
‹#›
Topics to be covered
Chomsky hierarchy
Context free grammar
Recursive definition
FA to regular grammar
Derivation
Ambiguity & unambiguous grammar
Simplified forms & normal forms
CFG to CNF
Union, Concatenation & Kleene’s of CFG

Unit – 3 : Context Free Grammar
Darshan Institute of Engineering & Technology
‹#›

Theory of Computation (2160704)
Darshan Institute of Engineering & Technology
‹#›
Chomsky Hierarchy


Unit – 3 : Context Free Grammar
Darshan Institute of Engineering & Technology
‹#›

Theory of Computation (2160704)
Darshan Institute of Engineering & Technology
‹#›
Chomsky hierarchy (Classification of grammar)
Restricted grammar
 
Regular grammar(type 3)
 
Context free grammar(type 2)
 
Context sensitive grammar (type 1)
Unrestricted grammar (type 0)
 
Grammar 
 

Unit – 3 : Context Free Grammar
Darshan Institute of Engineering & Technology
‹#›

Theory of Computation (2160704)
Darshan Institute of Engineering & Technology
‹#›
Type 0 grammar (Phrase Structure Grammar)
Their productions are of the form:

where both  and  can be strings of terminal and nonterminal symbols.
Example: S → ACaB 
Bc → acB 
CB → DB 
aD → Db 

Unit – 3 : Context Free Grammar
Darshan Institute of Engineering & Technology
‹#›

Theory of Computation (2160704)
Darshan Institute of Engineering & Technology
‹#›
Type 1 grammar (Context Sensitive Grammar)
Their productions are of the form:

where A is non terminal and , ,  are strings of terminals and non terminals.
The strings  and may be empty, but  must be non-empty.
Here, a string  can be replaced by  (or vice versa) only when it is enclosed by the strings  and  in a sentential form. 
Example: AB → AbBc 
A → bcA 
B → b 

Unit – 3 : Context Free Grammar
Darshan Institute of Engineering & Technology
‹#›

Theory of Computation (2160704)
Darshan Institute of Engineering & Technology
‹#›
Type 2 grammar (Context Free Grammar)
Their productions are of the form:

Where  is non terminal and is string of terminals and non terminals.
Example: S → Xa 
X → a 
X → aX 
X → abc

Unit – 3 : Context Free Grammar
Darshan Institute of Engineering & Technology
‹#›

Theory of Computation (2160704)
Darshan Institute of Engineering & Technology
‹#›
Type 3 grammar (Linear or Regular grammar)
Their productions are of the form:
	or	 
Where are non terminals and  is terminal.
Example: X → a | aY
Y → b

Unit – 3 : Context Free Grammar
Darshan Institute of Engineering & Technology
‹#›

Theory of Computation (2160704)
Darshan Institute of Engineering & Technology
‹#›
Hierarchy of grammar



Type 3 (Regular)
Type 0(Phrase structure)
Type 1(Context sensitive)
Type 2(Context free)

Unit – 3 : Context Free Grammar
Darshan Institute of Engineering & Technology
‹#›

Theory of Computation (2160704)
Darshan Institute of Engineering & Technology
‹#›
Context free grammar


Unit – 3 : Context Free Grammar
Darshan Institute of Engineering & Technology
‹#›

Theory of Computation (2160704)
Darshan Institute of Engineering & Technology
‹#›
Context Free Grammar
A context free grammar (CFG) is a 4-tuple where,
 	is finite set of non terminals,
 	is disjoint finite set of terminals,
 	is an element of  and it’s a start symbol,
 	is a finite set of productions of the form  where  	and .
Application of CFG:
CFG are extensively used to specify the syntax of programming language. 
CFG is used to develop a parser.

Unit – 3 : Context Free Grammar
Darshan Institute of Engineering & Technology
‹#›

Theory of Computation (2160704)
Darshan Institute of Engineering & Technology
‹#›

11

Context Free Language
Let  be a CFG. The language generated by  is 

A language  is a context free Language (CFL) if there is a CFG  so that .

Unit – 3 : Context Free Grammar
Darshan Institute of Engineering & Technology
‹#›

Theory of Computation (2160704)
Darshan Institute of Engineering & Technology
‹#›
CFG Examples
Write CFG for either a or b
	Sa | b
Write CFG for a+
	S aS | a
Write CFG for a*
	S aS | ^
Write CFG for (ab)*
	SabS | ^
Write CFG for any string of a and b
	S aS | bS | a | b


Unit – 3 : Context Free Grammar
Darshan Institute of Engineering & Technology
‹#›

Theory of Computation (2160704)
Darshan Institute of Engineering & Technology
‹#›
CFG Examples
Write CFG for ab*
	SaX
	X˄| bX
Write CFG for a*b*
	SXY
	XaX|˄
	YbY|˄
Write CFG for (a+b)*
	SaS | bS | ^
Write CFG for a(a+b)*
	SaX
	XaX | bX | ^

Unit – 3 : Context Free Grammar
Darshan Institute of Engineering & Technology
‹#›

Theory of Computation (2160704)
Darshan Institute of Engineering & Technology
‹#›
CFG Examples
Write CFG for a* | b*
	SA | B
	A˄| aA
	B^ |bB
Write CFG for (011+1)*(01)*
	SAB
	A011A | 1A | ^
	B01B | ^
Write CFG for balanced parenthesis
	S [] | {} | [s] | {s} | ^


Unit – 3 : Context Free Grammar
Darshan Institute of Engineering & Technology
‹#›

Theory of Computation (2160704)
Darshan Institute of Engineering & Technology
‹#›
CFG Examples
Write CFG which contains at least three times 1. 
	SA1A1A1A
	A0A | 1A | ^
Write CFG that must start and end with same symbol.
	S0A0 | 1A1 
	A0A | 1A | ^
The language of even & odd length palindrome string over {a,b}
	SaSa|bSb|a|b|˄
No. of a and no. of b are same
	SaSb|bSa|˄
The language of {a, b} ends in a
	SaS | bS |a

Unit – 3 : Context Free Grammar
Darshan Institute of Engineering & Technology
‹#›

Theory of Computation (2160704)
Darshan Institute of Engineering & Technology
‹#›
CFG Examples
Write CFG for regular expression (a+b)*a(a+b)*a(a+b)*
	SXaXaX
	XaX|bX|˄
Write CFG for number of 0’s and 1’s are same (n0(x)=n1(x))
	S0S1 | 1S0 | ^
Write CFG for L={aibjck | i=j or j=k} 
	For i=j				for j=k
	SAB				SCD
	AaAb | ab			CaC | a
	BcB | c			DbDc | bc

Unit – 3 : Context Free Grammar
Darshan Institute of Engineering & Technology
‹#›

Theory of Computation (2160704)
Darshan Institute of Engineering & Technology
‹#›
CFG Examples
Write CFG for L={ aibjck | j>i+k} 
	SABC
	AaAb |˄
	BbB | b
	CbCc |˄
Write CFG for L={ 0i1j0k | j>i+k} 
	SABC
	A0A1 |˄
	B1B | 1
	C1C0 |˄
Write CFG for the language of Algebraic expressions
	SS+S | S*S | S-S | S/S | (S) | a

Unit – 3 : Context Free Grammar
Darshan Institute of Engineering & Technology
‹#›

Theory of Computation (2160704)
Darshan Institute of Engineering & Technology
‹#›
CFG Examples
CFG for syntax of programming language
<statement>  … | <if-statement> | <for-statement> | …
<if-statement>  if ( <expression> ) <statement>
<for-statement>  for ( <expression>; <expression>; <expression> ) <statement>

Unit – 3 : Context Free Grammar
Darshan Institute of Engineering & Technology
‹#›

Theory of Computation (2160704)
Darshan Institute of Engineering & Technology
‹#›
Recursive Definitions 


Unit – 3 : Context Free Grammar
Darshan Institute of Engineering & Technology
‹#›

Theory of Computation (2160704)
Darshan Institute of Engineering & Technology
‹#›
Recursive Definitions 
Recursive Definition of {a,b}*
	˄∈L.
	For any S∈L, aS∈L.
	For any S∈L, bS∈L.
	No other strings are in L.
Recursive Definition of Palindrome
	˄, a, b ∈ L 
	For any S ∈ L , aSa ∈ L and bSb ∈ L 
	No other string are in L 
Recursive Definition of the language {anbn | n≥0}
	˄∈ L
	For every S ∈ L, aSb ∈L
	No other strings are in L
CFG: S aS | bS | ^
CFG: S aSa | bSb | a | b | ˄
CFG: S aSb | ˄

Unit – 3 : Context Free Grammar
Darshan Institute of Engineering & Technology
‹#›

Theory of Computation (2160704)
Darshan Institute of Engineering & Technology
‹#›
FA to Regular Grammar


Unit – 3 : Context Free Grammar
Darshan Institute of Engineering & Technology
‹#›

Theory of Computation (2160704)
Darshan Institute of Engineering & Technology
‹#›
FA to Regular Grammar



1
0
1

0
0
1







At last, all the incoming transitions to the accepting states are designated by the production 
Source State → input symbol

Unit – 3 : Context Free Grammar
Darshan Institute of Engineering & Technology
‹#›

Theory of Computation (2160704)
Darshan Institute of Engineering & Technology
‹#›
Exercise: FA to Regular Grammar
A
C
E

B
a
D
a
a
a
a
b
b
b
b
b

Unit – 3 : Context Free Grammar
Darshan Institute of Engineering & Technology
‹#›

Theory of Computation (2160704)
Darshan Institute of Engineering & Technology
‹#›
Derivation 


Unit – 3 : Context Free Grammar
Darshan Institute of Engineering & Technology
‹#›

Theory of Computation (2160704)
Darshan Institute of Engineering & Technology
‹#›
Derivation 
Derivation is used to find whether the string belongs to a given grammar or not.
There are two types of derivation:
Leftmost derivation
Rightmost derivation

Unit – 3 : Context Free Grammar
Darshan Institute of Engineering & Technology
‹#›

Theory of Computation (2160704)
Darshan Institute of Engineering & Technology
‹#›
 Leftmost derivation 
A derivation of a string  in a grammar  is a left most derivation if at every step the left most non terminal is replaced.
Grammar: SS+S | S-S | S*S | S/S | a 	Output string: a*a-a

		S
		S-S
S*S-S
		a*S-S
		a*a-S
	a*a-a
a
S
-
S
a
a
S
*
S
Leftmost Derivation
Parse tree
S
Parse tree represents the structure of derivation  

Unit – 3 : Context Free Grammar
Darshan Institute of Engineering & Technology
‹#›

Theory of Computation (2160704)
Darshan Institute of Engineering & Technology
‹#›

27

 Rightmost derivation 
A derivation of a string  in a grammar  is a right most derivation if at every step the right most non terminal is replaced.
It is all called canonical derivation.
Grammar: SS+S | S-S | S*S | S/S | a 	Output string: a*a-a
		S
		S*S
		 S*S-S
		 S*S-a
		 S*a-a
		 a*a-a
a
S
*
S
a
a
S
-
S
Rightmost Derivation
Parse Tree
S

Unit – 3 : Context Free Grammar
Darshan Institute of Engineering & Technology
‹#›

Theory of Computation (2160704)
Darshan Institute of Engineering & Technology
‹#›

28

Example: Derivation 
SA1B
A0A | 𝜖
B0B | 1B | 𝜖 Perform leftmost & Rightmost derivation. 
(String: 00101) 
Leftmost Derivation		
S 				 			
A1B 							
0A1B				
00A1B
001B
0010B
00101B
00101
Rightmost Derivation
	S 		
 	A1B
	A10B
	A101B
	A101
	0A101
	00A101
	00101


Unit – 3 : Context Free Grammar
Darshan Institute of Engineering & Technology
‹#›

Theory of Computation (2160704)
Darshan Institute of Engineering & Technology
‹#›
Exercise: Derivation 
Perform leftmost derivation and draw parse tree.
	SA1B
A0A | 𝜖
B0B | 1B | 𝜖 
Output string: 1001. 
Perform rightmost derivation and draw parse tree.
EE+E | E*E | id | (E) | -E
Output string : id + id * id. 


Unit – 3 : Context Free Grammar
Darshan Institute of Engineering & Technology
‹#›

Theory of Computation (2160704)
Darshan Institute of Engineering & Technology
‹#›
Ambiguous grammar


Unit – 3 : Context Free Grammar
Darshan Institute of Engineering & Technology
‹#›

Theory of Computation (2160704)
Darshan Institute of Engineering & Technology
‹#›
Ambiguous grammar
Ambiguous grammar is one that produces more than one leftmost or more then one rightmost derivation for the same sentence.
Grammar: SS+S | S*S | (S) | a		Output string: a+a*a

S					S
S*S					S+S
S+S*S				a+S
a+S*S				a+S*S
a+a*S				a+a*S
a+a*a				a+a*a
Here, Two leftmost derivation for string a+a*a is possible hence, above grammar is ambiguous.
a
S
*
S
a
a
S
S
+
S
a
S
+
S
a
a
S
*
S
S

Unit – 3 : Context Free Grammar
Darshan Institute of Engineering & Technology
‹#›

Theory of Computation (2160704)
Darshan Institute of Engineering & Technology
‹#›

32

Exercise: Ambiguous grammar
Check whether following grammars are ambiguous or not:
S aS | Sa | 𝜖  (string: aaaa)
S aSbS | bSaS | 𝜖  (string: abab)
SSS+ | SS* | a (string: aa+a*)

Unit – 3 : Context Free Grammar
Darshan Institute of Engineering & Technology
‹#›

Theory of Computation (2160704)
Darshan Institute of Engineering & Technology
‹#›
Grammar: S S+S | S*S  | (S) | a  
Equivalent unambiguous grammar is
	


	

S S + T | T
T T * F | F
F (S) | a


Equivalent 
unambiguous 
grammar

Here, two left most derivation is not possible for string a+a*a hence, grammar is unambiguous.
Unambiguous grammar
Output string: a+a*a
	 S
	 S+T
	 T+T
	 F+T
	 a+T	
	 a+T*F
	 a+F*F
	 a+a*F
	 a+a*a		
Try for second leftmost derivation
Not possible????

Unit – 3 : Context Free Grammar
Darshan Institute of Engineering & Technology
‹#›

Theory of Computation (2160704)
Darshan Institute of Engineering & Technology
‹#›
Simplified forms & Normal forms



Unit – 3 : Context Free Grammar
Darshan Institute of Engineering & Technology
‹#›

Theory of Computation (2160704)
Darshan Institute of Engineering & Technology
‹#›
Nullable Variable
A Nullable variable in a CFG,  is defined as follows:
Any variable A for which P contains   is nullable.
If P contains the production  are nullable variable, then A is nullable.
No other variables in V are nullable.



Unit – 3 : Context Free Grammar
Darshan Institute of Engineering & Technology
‹#›

Theory of Computation (2160704)
Darshan Institute of Engineering & Technology
‹#›
Eliminate ˄ production

Sa  X |Yb
X ˄ | S 
YbY|b
SaX | Yb | a^
X^ | S
YbY|b
SaX|Yb|a
XS
YbY|b
Nullable variable={X}
Replacing X by ^ in all  productions containing X on RHS and rewriting the production again
Removing ^ productions

Unit – 3 : Context Free Grammar
Darshan Institute of Engineering & Technology
‹#›

Theory of Computation (2160704)
Darshan Institute of Engineering & Technology
‹#›
Exercise: Eliminate ^ production
SAC
AaAb|˄
CaC|a
After elimination of ^ production:
SAC | C
AaAb| ab
CaC|a

SXaX|bX|Y
XXaX|XbX|˄
Yab
After elimination of ^ production:
S XaX | bX | Y | aX | Xa | a | b
X XaX |XbX | aX | Xa | a | Xb | bX | b
Yab


Unit – 3 : Context Free Grammar
Darshan Institute of Engineering & Technology
‹#›

Theory of Computation (2160704)
Darshan Institute of Engineering & Technology
‹#›
A-derivable
A variable is called A-derivable ,
If  is a production, B is A-derivable.
If C is  A-derivable,   is a production, and  , then B is A-derivable.
No other variables are A-derivable.
SA
SB
S-derivable={A,B}
SA
AB
S-derivable={A,B}

Unit – 3 : Context Free Grammar
Darshan Institute of Engineering & Technology
‹#›

Theory of Computation (2160704)
Darshan Institute of Engineering & Technology
‹#›
Unit Production & Elimination of Unit productions 
A production of the form AB is termed as unit production. Where A & B are nonterminals.
Algorithm 
Given a CFG  with no ^ productions, construct a CFG  having no unit production as follows.
Initialize P1 to be P.
For each A ∈ V ,finding the set of A derivable variable.
For every pair (A, B) such that B is A- derivable and every non unit production Bα, add the production Aα to P1 if it is not already present in P1.
Delete all unit productions from P1. 


Unit – 3 : Context Free Grammar
Darshan Institute of Engineering & Technology
‹#›

Theory of Computation (2160704)
Darshan Institute of Engineering & Technology
‹#›


Elimination of unit production
SABA|BA|AA|AB|A|B
A aA|a
B bB|b
Unit Productions are SA and SB

AaA|a
BbB|b
Removing unit productions

SABA|BA|AA|AB
|aA|a
|bB|b

Unit – 3 : Context Free Grammar
Darshan Institute of Engineering & Technology
‹#›

Theory of Computation (2160704)
Darshan Institute of Engineering & Technology
‹#›
CFG to CNF


Unit – 3 : Context Free Grammar
Darshan Institute of Engineering & Technology
‹#›

Theory of Computation (2160704)
Darshan Institute of Engineering & Technology
‹#›
Chomsky Normal Form (CNF)
A context free grammar is in Chomsky normal form (CNF) if every production is one of these two forms:


Where and  are nonterminal and  is terminal.


Unit – 3 : Context Free Grammar
Darshan Institute of Engineering & Technology
‹#›

Theory of Computation (2160704)
Darshan Institute of Engineering & Technology
‹#›
Converting CFG to CNF
Steps to convert CFG to CNF
Eliminate ˄-Productions.
Eliminate Unit Productions.
Restricting the right side of productions to single terminal or string of two or more nonterminals.
Final step of CNF. (shorten the string of NT to length 2)

Unit – 3 : Context Free Grammar
Darshan Institute of Engineering & Technology
‹#›

Theory of Computation (2160704)
Darshan Institute of Engineering & Technology
‹#›
Example: CFG to CNF
SAAC
AaAb|˄
CaC|a
Step 1: Elimination of ^ production




Step-2: Eliminate Unit Production



CaC|a


AC |
C
SAAC|
AaAb|
ab


Eliminate A^


aC|a
C
SAAC|AC|
AaAb|ab
CaC|a


Unit Production is SC

Step 3: Replace all mixed string with solid NT




Step-4: Shorten the string of NT to length 2
	SAX1		X1AC
	SAC|PC|a
	APY1		Y1AQ
	APQ
	CPC|a
	Pa
	Qb

SAAC|AC|
aC
|a
Pa
Qb
PC
A
PAQ|PQ
aAb|ab
C

aC|a
PC|a
Chomsky Normal Form

Unit – 3 : Context Free Grammar
Darshan Institute of Engineering & Technology
‹#›

Theory of Computation (2160704)
Darshan Institute of Engineering & Technology
‹#›
Example: CFG to CNF
SaAbB
AAb|b
BBa|a
Step 1 and 2 are not required as there is no ^ and unit productions
Step-3: Replace all mixed string with solid NT
SPAQB
AAQ|b
BBP|a
Pa
Qb
Step-4 : final step of CNF
SPT1
T1AT2		
T2QB
AAQ|b
BBP|a
Pa
Qb


Unit – 3 : Context Free Grammar
Darshan Institute of Engineering & Technology
‹#›

Theory of Computation (2160704)
Darshan Institute of Engineering & Technology
‹#›
Example: CFG to CNF
SAA
AB|BB
BabB|b|bb
Step 1 is not required as there is no ^ productions
Step-2: Eliminate Unit Production:
SAA
A abB|b|bb|BB
BabB|b|bb
Step-3:Replace all mixed string with solid NT:
SAA
A PQB|b|QQ|BB
B PQB|b|QQ 
Pa
Qb

Step-4 : Shorten the string of NT to length 2
SAA
A PT1|b|QQ|BB		T1QB
B PV1|b|QQ 		V1QB
Pa
Qb


Unit – 3 : Context Free Grammar
Darshan Institute of Engineering & Technology
‹#›

Theory of Computation (2160704)
Darshan Institute of Engineering & Technology
‹#›
Example: CFG to CNF
SASB|^
AaAS|a
BSbS|A|bb
Step-1: Eliminate ˄-Production:
SASB|AB
AaAS|a|aA
BSbS|A|bb|bS|Sb|b
Step-2: Eliminate Unit Production:
SASB|AB
AaAS|a|aA
BSbS|aAS|a|aA|bb|bS|Sb|b
Step-3:Replace all mixed string with solid NT:
SASB|AB
APAS|a|PA
BSQS|PAS|a|PA|QQ|QS|SQ|b
Pa
Qb
Step-4 : Shorten the string of NT to length 2
SAB|AT1	T1SB
Aa|PA|PU1	U1AS
B SV1|PV2|a|PA|QQ|QS|SQ|b
V1QS	V2AS
Pa
Qb


Unit – 3 : Context Free Grammar
Darshan Institute of Engineering & Technology
‹#›

Theory of Computation (2160704)
Darshan Institute of Engineering & Technology
‹#›
Backus-Naur Form (BNF)
BNF is one of the notation techniques for context free grammar.
It is often used to describe syntax of the language used in computing.
Variables written between <..> are non terminals.
Vertical bar ‘|’ indicating a alternate choice. 
[…], which is used to enclosed an optional specification.

Example:
<exp>=<exp> + <term> | <term>
<term>=<term> * <factor> | <factor>
<factor>=<factor> ^ <primary> | <primary>
<primary>=<id> | <const> 
<id>=<letter>
<const>=[+/-]<digit>
<letter>=a | b | c |……| z
<digit>=0 | 1 |………….| 9


Unit – 3 : Context Free Grammar
Darshan Institute of Engineering & Technology
‹#›

Theory of Computation (2160704)
Darshan Institute of Engineering & Technology
‹#›
Union, Concatenation & Kleene’s of CFG


Unit – 3 : Context Free Grammar
Darshan Institute of Engineering & Technology
‹#›

Theory of Computation (2160704)
Darshan Institute of Engineering & Technology
‹#›
Union, Concatenation & Kleene’s of CFG
Theorem:- If L1 and L2 are context - free languages, then the languages L1 U L2, L1L2 , and L1* are also CFLs.
The proof is constructive: Starting with CFGs
		G1 = (V1, Ʃ, S1,P1) and G2 = (V2, Ʃ, S2,P2) ,
Generating L1 and L2, respectively, we show how to construct a new CFG for each of the three cases.
Gu = (Vu, Ʃ, Su, Pu) generating L1 U L2
Gc= (Vc, Ʃ, Sc, Pc) generating L1L2
G* = (V, Ʃ, S, P) generating  L1 *


Unit – 3 : Context Free Grammar
Darshan Institute of Engineering & Technology
‹#›

Theory of Computation (2160704)
Darshan Institute of Engineering & Technology
‹#›
Union Gu = (Vu, Ʃ, Su, Pu) 
A grammar Gu = (Vu, Ʃ, Su, Pu) generating L1 U L2. 
First we rename the element of V2 if necessary so that V1 ∩ V2= Ø
		Vu= V1 U V2 U {Su}
	Where Su is a new symbol not in V1 or V2. Then we let
		Pu= P1 U P2 U { Su S1 | S2 }
On the other hand, if x is derivable from Su in Gu, the first step in any derivation must be 
		SuS1 or SuS2 
In the first case, all subsequent productions used must be productions in G1, because no variables in V2 are involved, and thus x∈ L1; in the second case, x ∈ L2. Therefore,
		L(Gu) ⊆ L1 U L2


Unit – 3 : Context Free Grammar
Darshan Institute of Engineering & Technology
‹#›

Theory of Computation (2160704)
Darshan Institute of Engineering & Technology
‹#›
Concatenation Gc= (Vc, Ʃ, Sc, Pc) 
A grammar Gc= (Vc, Ʃ, Sc, Pc) generating L1L2 . Again we relabeled variables if necessary so that V1 ∩ V2 = Ø and define 
		Vc = V1 U V2 U {Sc}
This time we let 
		Pc= P1 U P2 U { ScS1S2 }
If x ∈L1L2 then x = x1x2 , where xi ∈Li  for each i. we may then derive x in Gc as follows:
		Sc S1 S2  *x1 S2  * x1x2 = x
First step in the derivation must be ScS1 S2 Where the second step is the derivation of x1 in G1 and the third step is the derivation of x2 in G2. So x ∈ L1L2

Unit – 3 : Context Free Grammar
Darshan Institute of Engineering & Technology
‹#›

Theory of Computation (2160704)
Darshan Institute of Engineering & Technology
‹#›
Kleene (*)
A grammar G* = (V, Ʃ, S, P) generating  L1 * Let V = V1 U {S}
Where S ∉ V1.The language L1*contains strings of the form x = x1x2 …xk, where each xi ∈ L1. 
Since each xi can be derived from S1, then to derive x from S it is enough to be able to derive a string of k S1‘S. We can accomplish this by including the productions
		SS1S |  ^
In P. Therefore, let
		P = P1U { SS1S | ^ }
The proof that L1 * ⊆ L(G*) is straightforward. If x ∈ L(G*) , on the other hand, then either x = or x can be derived from some string of the form S1k  in G* . In the second case, since the only production in G* beginning with S1 are those in G1, we may conclude that 
	x∈ L(G1)k ⊆ L(G1)* .


Unit – 3 : Context Free Grammar
Darshan Institute of Engineering & Technology
‹#›

Theory of Computation (2160704)
Darshan Institute of Engineering & Technology
‹#›
End of Unit - 3


Unit – 3 : Context Free Grammar
Darshan Institute of Engineering & Technology
‹#›

Theory of Computation (2160704)
Darshan Institute of Engineering & Technology
‹#›