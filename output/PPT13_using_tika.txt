PowerPoint Presentation

Unit – 5
Intermediate Code Generation
dixita.kagathara@darshan.ac.in
+91 - 97277 47317 (CE Department)
Computer Engineering Department
Prof. Dixita B. Kagathara
Compiler Design (CD)
GTU # 2170701


Darshan Institute of Engineering & Technology, Rajkot




Looping
Topics to be covered 
Different intermediate forms
Different representation of Three Address code 











Different intermediate forms







Different intermediate forms
Different forms of intermediate code are:

Abstract syntax tree
Postfix notation
Three address code




Prof. Jay R Dhamsaniya
#3130006 (PS)      Unit 1 – Basic Probability
‹#›


Prof. Dixita B Kagathara
 #2170701 (CD)      Unit 5 – Intermediate Code Generation
‹#›

Abstract syntax tree & DAG
A syntax tree depicts the natural hierarchical structure of a source program. 
A DAG (Directed Acyclic Graph) gives the same information but in a more compact way because common sub-expressions are identified.
Ex: a=b*-c+b*-c 

+ 

*

c
b

uminus 

*

c
b

uminus 

= 

a
*

c
b

uminus 

+ 

= 

a



Syntax Tree
DAG



Prof. Jay R Dhamsaniya
#3130006 (PS)      Unit 1 – Basic Probability
‹#›


Prof. Dixita B Kagathara
 #2170701 (CD)      Unit 5 – Intermediate Code Generation
‹#›

Postfix Notation
Postfix notation is a linearization of a syntax tree.
In postfix notation the operands occurs first and then operators are arranged.
Ex: (A + B) * (C + D)



Ex: (A + B) * C



Ex: (A * B) + (C * D)

Postfix notation: A B + C D + *
Postfix notation: A B + C *
Postfix notation: A B * C D * +



Prof. Jay R Dhamsaniya
#3130006 (PS)      Unit 1 – Basic Probability
‹#›


Prof. Dixita B Kagathara
 #2170701 (CD)      Unit 5 – Intermediate Code Generation
‹#›

Three address code
Three address code is a sequence of statements of the general form, 
a:= b op c
Where a, b or c are the operands that can be names or constants and op stands for any operator.
Example: a = b + c + d 
		t1=b+c	
		t2=t1+d
		a= t2
Here t1 and t2 are the temporary names generated by the compiler. 
There are at most three addresses allowed (two for operands and one for result). Hence, this representation is called three-address code.




Prof. Jay R Dhamsaniya
#3130006 (PS)      Unit 1 – Basic Probability
‹#›


Prof. Dixita B Kagathara
 #2170701 (CD)      Unit 5 – Intermediate Code Generation
‹#›

dixita.kagathara@darshan.ac.in
+91 - 97277 47317 (CE Department)
Computer Engineering Department
Prof. Dixita B. Kagathara
Compiler Design (CD)
Part 2
 Different representation of three address code 

Unit-5 
Intermediate Code Generation


Darshan Institute of Engineering & Technology, Rajkot



Different Representation of Three Address Code







Different Representation of Three Address Code
There are three types of representation used for three address code:
Quadruples
Triples 
Indirect triples  
Ex:	x= -a*b + -a*b
	t1= - a
	t2 = t1 * b
	t3= - a
	t4 = t3 * b
	t5 = t2 + t4
	x= t5


Three Address Code



Prof. Jay R Dhamsaniya
#3130006 (PS)      Unit 1 – Basic Probability
‹#›


Prof. Dixita B Kagathara
 #2170701 (CD)      Unit 5 – Intermediate Code Generation
‹#›

Quadruple
The quadruple is a structure with at the most four fields such as op, arg1, arg2 and result.
The op field is used to represent the internal code for operator.
The arg1 and arg2 represent the two operands. 
And result field is used to store the result of an expression.

	x= -a*b + -a*b
	t1= - a
	t2 = t1 * b
	t3= - a
	t4 = t3 * b
	t5 = t2 + t4
	x= t5
	No.	Operator	Arg1	Arg2	Result

	(0)	uminus	a		t1

	(1)	*	t1	b	t2

	(2)	uminus	a		t3

	(3)	*	t3	b	t4

	(4)	+	t2	t4	t5

	(5)	=	t5		x

Quadruple
























Prof. Jay R Dhamsaniya
#3130006 (PS)      Unit 1 – Basic Probability
‹#›


Prof. Dixita B Kagathara
 #2170701 (CD)      Unit 5 – Intermediate Code Generation
‹#›

Triple
To avoid entering temporary names into the symbol table, we might refer a temporary value by the position of the statement that computes it.
If we do so, three address statements can be represented by records with only three fields: op, arg1 and arg2.

	No.	Operator	Arg1	Arg2

	No.	Operator	Arg1	Arg2	Result

	(0)	uminus	a		t1

	(1)	*	t1	b	t2

	(2)	uminus	a		t3

	(3)	*	t3	b	t4

	(4)	+	t2	t4	t5

	(5)	=	t5		x

	(0)	uminus	a	

	(1)	*	(0)	b

	(2)	uminus	a	

	(3)	*	(2)	b

	(4)	+	(1)	(3)

	(5)	=	x	(4)

Quadruple
Triple



















Prof. Jay R Dhamsaniya
#3130006 (PS)      Unit 1 – Basic Probability
‹#›


Prof. Dixita B Kagathara
 #2170701 (CD)      Unit 5 – Intermediate Code Generation
‹#›

Indirect Triple
In the indirect triple representation the listing of triples has been done. And listing pointers are used instead of using statement.
This implementation is called indirect triples.

	No.	Operator	Arg1	Arg2

	(0)	(14)

	(0)	uminus	a	

	(1)	*	(14)	b

	(2)	uminus	a	

	(3)	*	(16)	b

	(4)	+	(15)	(17)

	(5)	=	x	(18)

		Statement

	(1)	(15)

	(2)	(16)

	(3)	(17)

	(4)	(18)

	(5)	(19)

	No.	Operator	Arg1	Arg2

	(0)	uminus	a	

	(1)	*	(0)	b

	(2)	uminus	a	

	(3)	*	(2)	b

	(4)	+	(1)	(3)

	(5)	=	x	(4)

Indirect Triple
Triple








Prof. Jay R Dhamsaniya
#3130006 (PS)      Unit 1 – Basic Probability
‹#›


Prof. Dixita B Kagathara
 #2170701 (CD)      Unit 5 – Intermediate Code Generation
‹#›

Exercise
Write quadruple, triple and indirect triple for following:
-(a*b)+(c+d)
a*-(b+c)
x=(a+b*c)^(d*e)+f*g^h
g+a*(b-c)+(x-y)*d




Prof. Jay R Dhamsaniya
#3130006 (PS)      Unit 1 – Basic Probability
‹#›


Prof. Dixita B Kagathara
 #2170701 (CD)      Unit 5 – Intermediate Code Generation
‹#›

Thank You 





































/docProps/thumbnail.jpeg