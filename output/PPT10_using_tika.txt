PowerPoint Presentation

Unit – 4
Error Recovery
dixita.kagathara@darshan.ac.in
+91 - 97277 47317 (CE Department)
Computer Engineering Department
Prof. Dixita B. Kagathara
Compiler Design (CD)
GTU # 2170701


Darshan Institute of Engineering & Technology, Rajkot




Looping
Topics to be covered 
Types of errors
Error recovery strategies











Types of errors







Types of Errors
Errors
Compile time 
Run time
Lexical Phase error
Syntactic Phase error
Semantic Phase error



Prof. Jay R Dhamsaniya
#3130006 (PS)      Unit 1 – Basic Probability
‹#›


Prof. Dixita B Kagathara
 #2170701 (CD)      Unit 4 – Error Recovery
‹#›

Lexical error
Lexical errors can be detected during lexical analysis phase. 
Typical lexical phase errors are: 
 Spelling errors
 Exceeding length of identifier or numeric constants
 Appearance of illegal characters
Example: 
fi ( ) 
{
}
In above code 'fi' cannot be recognized as a misspelling of keyword if rather lexical analyzer will understand that it is an identifier and will return it as valid identifier. 
Thus misspelling causes errors in token formation.





Prof. Jay R Dhamsaniya
#3130006 (PS)      Unit 1 – Basic Probability
‹#›


Prof. Dixita B Kagathara
 #2170701 (CD)      Unit 4 – Error Recovery
‹#›

Syntax error
Syntax error appear during syntax analysis phase of compiler.
Typical syntax phase errors are:
 Errors in structure
 Missing operators
 Unbalanced parenthesis
The parser demands for tokens from lexical analyzer and if the tokens do not satisfy the grammatical rules of programming language then the syntactical errors get raised.
Example:

printf(“Hello World !!!”)
Error: Semicolon missing



Prof. Jay R Dhamsaniya
#3130006 (PS)      Unit 1 – Basic Probability
‹#›


Prof. Dixita B Kagathara
 #2170701 (CD)      Unit 4 – Error Recovery
‹#›

Semantic error
Semantic error detected during semantic analysis phase.
Typical semantic phase errors are:
Incompatible types of operands
Undeclared variable
Not matching of actual argument with formal argument
Example:
	id1=id2+id3*60 (Note: id1, id2, id3 are real)
(Directly we can not perform multiplication due to incompatible types of variables)




Prof. Jay R Dhamsaniya
#3130006 (PS)      Unit 1 – Basic Probability
‹#›


Prof. Dixita B Kagathara
 #2170701 (CD)      Unit 4 – Error Recovery
‹#›

Error recovery strategies
(Ad-Hoc & systematic methods)







Error recovery strategies (Ad-Hoc & systematic methods)
There are mainly four error recovery strategies:
 Panic mode
 Phrase level recovery
 Error production
 Global generation




Prof. Jay R Dhamsaniya
#3130006 (PS)      Unit 1 – Basic Probability
‹#›


Prof. Dixita B Kagathara
 #2170701 (CD)      Unit 4 – Error Recovery
‹#›

Panic mode
In this method on discovering error, the parser discards input symbol one at a time. This process is continued until one of a designated set of synchronizing tokens is found. 
Synchronizing tokens are delimiters such as semicolon or end. 
These tokens indicate an end of the statement. 
If there is less number of errors in the same statement then this strategy is best choice.

fi ( ) 
{
}
Scan entire line otherwise scanner will return fi as valid identifier



Prof. Jay R Dhamsaniya
#3130006 (PS)      Unit 1 – Basic Probability
‹#›


Prof. Dixita B Kagathara
 #2170701 (CD)      Unit 4 – Error Recovery
‹#›

Phrase level recovery
In this method, on discovering an error parser performs local correction on remaining input.
The local correction can be replacing comma by semicolon, deletion of semicolons or inserting missing semicolon. 
This type of local correction is decided by compiler designer.
This method is used in many error-repairing compilers.




Prof. Jay R Dhamsaniya
#3130006 (PS)      Unit 1 – Basic Probability
‹#›


Prof. Dixita B Kagathara
 #2170701 (CD)      Unit 4 – Error Recovery
‹#›

Error production
If we have good knowledge of common errors that might be encountered, then we can augment the grammar for the corresponding language with error productions that generate the erroneous constructs. 
Then we use the grammar augmented by these error production to construct a parser.
If error production is used then, during parsing we can generate appropriate error message and parsing can be continued.




Prof. Jay R Dhamsaniya
#3130006 (PS)      Unit 1 – Basic Probability
‹#›


Prof. Dixita B Kagathara
 #2170701 (CD)      Unit 4 – Error Recovery
‹#›

Global correction
Given an incorrect input string x and grammar G, the algorithm will find a parse tree for a related string y, such that number of insertions, deletions and changes of token require to transform x into y is as small as possible. 
Such methods increase time and space requirements at parsing time.
Global correction is thus simply a theoretical concept.




Prof. Jay R Dhamsaniya
#3130006 (PS)      Unit 1 – Basic Probability
‹#›


Prof. Dixita B Kagathara
 #2170701 (CD)      Unit 4 – Error Recovery
‹#›

Thank You 





































/docProps/thumbnail.jpeg