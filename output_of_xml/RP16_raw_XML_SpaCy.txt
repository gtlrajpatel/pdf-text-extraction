				 *** Text Processing using Spacy *** 


================================ Paragraph 1 =================================

IBM Services  White Paper  

------------------- Sentence 1 -------------------

IBM Services  White Paper   


>> Tokens are: 
[IBM, Services,  , White, Paper,  ] 

>> PoS Tags are: 
[('IBM', 'PROPN'), ('Services', 'PROPN'), (' ', 'SPACE'), ('White', 'PROPN'), ('Paper', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('IBM', 'compound'), ('Services', 'ROOT'), (' ', 'punct'), ('White', 'compound'), ('Paper', 'appos'), (' ', 'appos')]

>> Bigrams: 
[[IBM, Services], [Services,  ], [ , White], [White, Paper], [Paper,  ]]

>> Trigrams: 
[[IBM, Services,  ], [Services,  , White], [ , White, Paper], [White, Paper,  ]]

>> Noun Phrases are: 
[IBM Services, White Paper]

>> Named Entities are: 
[('IBM', 'ORG')] 


================================ Paragraph 2 =================================

Beyond the hype:   A guide to understanding and  successfully implementing artificial  intelligence within your business

------------------- Sentence 1 -------------------

Beyond the hype:   A guide to understanding and  successfully implementing artificial  intelligence within your business 


>> Tokens are: 
[hype, :,   , guide, understanding,  , successfully, implementing, artificial,  , intelligence, business] 

>> PoS Tags are: 
[('hype', 'NOUN'), (':', 'PUNCT'), ('  ', 'SPACE'), ('guide', 'NOUN'), ('understanding', 'NOUN'), (' ', 'SPACE'), ('successfully', 'ADV'), ('implementing', 'VERB'), ('artificial', 'ADJ'), (' ', 'SPACE'), ('intelligence', 'NOUN'), ('business', 'NOUN')] 

>> Dependency Tags are: 
[('hype', 'pobj'), (':', 'punct'), ('  ', 'nmod'), ('guide', 'ROOT'), ('understanding', 'pobj'), (' ', 'nsubj'), ('successfully', 'advmod'), ('implementing', 'conj'), ('artificial', 'amod'), (' ', 'compound'), ('intelligence', 'dobj'), ('business', 'pobj')]

>> Bigrams: 
[[hype, :], [:,   ], [  , guide], [guide, understanding], [understanding,  ], [ , successfully], [successfully, implementing], [implementing, artificial], [artificial,  ], [ , intelligence], [intelligence, business]]

>> Trigrams: 
[[hype, :,   ], [:,   , guide], [  , guide, understanding], [guide, understanding,  ], [understanding,  , successfully], [ , successfully, implementing], [successfully, implementing, artificial], [implementing, artificial,  ], [artificial,  , intelligence], [ , intelligence, business]]

>> Noun Phrases are: 
[the hype, understanding, artificial  intelligence, your business]

>> Named Entities are: 
[] 


================================ Paragraph 3 =================================

2     Beyond the hype: A guide to understanding and successfully implementing artificial intelligence within your business 

------------------- Sentence 1 -------------------

2     Beyond the hype: A guide to understanding and successfully implementing artificial intelligence within your business 


>> Tokens are: 
[2,     , hype, :, guide, understanding, successfully, implementing, artificial, intelligence, business] 

>> PoS Tags are: 
[('2', 'NUM'), ('    ', 'SPACE'), ('hype', 'NOUN'), (':', 'PUNCT'), ('guide', 'NOUN'), ('understanding', 'NOUN'), ('successfully', 'ADV'), ('implementing', 'VERB'), ('artificial', 'ADJ'), ('intelligence', 'NOUN'), ('business', 'NOUN')] 

>> Dependency Tags are: 
[('2', 'nummod'), ('    ', 'ROOT'), ('hype', 'pobj'), (':', 'punct'), ('guide', 'appos'), ('understanding', 'pobj'), ('successfully', 'advmod'), ('implementing', 'acl'), ('artificial', 'amod'), ('intelligence', 'dobj'), ('business', 'pobj')]

>> Bigrams: 
[[2,     ], [    , hype], [hype, :], [:, guide], [guide, understanding], [understanding, successfully], [successfully, implementing], [implementing, artificial], [artificial, intelligence], [intelligence, business]]

>> Trigrams: 
[[2,     , hype], [    , hype, :], [hype, :, guide], [:, guide, understanding], [guide, understanding, successfully], [understanding, successfully, implementing], [successfully, implementing, artificial], [implementing, artificial, intelligence], [artificial, intelligence, business]]

>> Noun Phrases are: 
[the hype, A guide, understanding, artificial intelligence, your business]

>> Named Entities are: 
[] 


================================ Paragraph 4 =================================

Contents  2 Introduction 

------------------- Sentence 1 -------------------

Contents  2 Introduction 


>> Tokens are: 
[Contents,  , 2, Introduction] 

>> PoS Tags are: 
[('Contents', 'NOUN'), (' ', 'SPACE'), ('2', 'NUM'), ('Introduction', 'NOUN')] 

>> Dependency Tags are: 
[('Contents', 'ROOT'), (' ', 'appos'), ('2', 'nummod'), ('Introduction', 'appos')]

>> Bigrams: 
[[Contents,  ], [ , 2], [2, Introduction]]

>> Trigrams: 
[[Contents,  , 2], [ , 2, Introduction]]

>> Noun Phrases are: 
[Contents, Introduction]

>> Named Entities are: 
[] 


================================ Paragraph 5 =================================

 3 What is AI? 

------------------- Sentence 1 -------------------

 3 


>> Tokens are: 
[ , 3] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('3', 'NUM')] 

>> Dependency Tags are: 
[(' ', 'ROOT'), ('3', 'appos')]

>> Bigrams: 
[[ , 3]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('3', 'CARDINAL')] 

------------------- Sentence 2 -------------------

What is AI? 


>> Tokens are: 
[AI, ?] 

>> PoS Tags are: 
[('AI', 'PROPN'), ('?', 'PUNCT')] 

>> Dependency Tags are: 
[('AI', 'attr'), ('?', 'punct')]

>> Bigrams: 
[[AI, ?]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[What, AI]

>> Named Entities are: 
[('AI', 'ORG')] 


================================ Paragraph 6 =================================

 5 How does an AI system learn? 

------------------- Sentence 1 -------------------

 5 How does an AI system learn? 


>> Tokens are: 
[ , 5, AI, system, learn, ?] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('5', 'NUM'), ('AI', 'PROPN'), ('system', 'NOUN'), ('learn', 'VERB'), ('?', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'dep'), ('5', 'nummod'), ('AI', 'compound'), ('system', 'nsubj'), ('learn', 'ROOT'), ('?', 'punct')]

>> Bigrams: 
[[ , 5], [5, AI], [AI, system], [system, learn], [learn, ?]]

>> Trigrams: 
[[ , 5, AI], [5, AI, system], [AI, system, learn], [system, learn, ?]]

>> Noun Phrases are: 
[an AI system]

>> Named Entities are: 
[('5', 'CARDINAL'), ('AI', 'ORG')] 


================================ Paragraph 7 =================================

 5 What has driven the development of AI? 

------------------- Sentence 1 -------------------

 5 What has driven the development of AI? 


>> Tokens are: 
[ , 5, driven, development, AI, ?] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('5', 'NUM'), ('driven', 'VERB'), ('development', 'NOUN'), ('AI', 'PROPN'), ('?', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'dep'), ('5', 'appos'), ('driven', 'ROOT'), ('development', 'dobj'), ('AI', 'pobj'), ('?', 'punct')]

>> Bigrams: 
[[ , 5], [5, driven], [driven, development], [development, AI], [AI, ?]]

>> Trigrams: 
[[ , 5, driven], [5, driven, development], [driven, development, AI], [development, AI, ?]]

>> Noun Phrases are: 
[What, the development, AI]

>> Named Entities are: 
[('5', 'CARDINAL'), ('AI', 'ORG')] 


================================ Paragraph 8 =================================

 7 Where are we today with AI?  

------------------- Sentence 1 -------------------

 7 Where are we today with AI?   


>> Tokens are: 
[ , 7, today, AI, ?,  ] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('7', 'NUM'), ('today', 'NOUN'), ('AI', 'PROPN'), ('?', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT'), ('7', 'nummod'), ('today', 'npadvmod'), ('AI', 'pobj'), ('?', 'punct'), (' ', 'pobj')]

>> Bigrams: 
[[ , 7], [7, today], [today, AI], [AI, ?], [?,  ]]

>> Trigrams: 
[[ , 7, today], [7, today, AI], [today, AI, ?], [AI, ?,  ]]

>> Noun Phrases are: 
[we, AI]

>> Named Entities are: 
[('today', 'DATE'), ('AI', 'ORG')] 


================================ Paragraph 9 =================================

 8 What are the areas in which AI provides the most   value today?  

------------------- Sentence 1 -------------------

 8 What are the areas in which AI provides the most   value today? 


>> Tokens are: 
[ , 8, areas, AI, provides,   , value, today, ?] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('8', 'NUM'), ('areas', 'NOUN'), ('AI', 'PROPN'), ('provides', 'VERB'), ('  ', 'SPACE'), ('value', 'NOUN'), ('today', 'NOUN'), ('?', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'dep'), ('8', 'appos'), ('areas', 'attr'), ('AI', 'nsubj'), ('provides', 'relcl'), ('  ', 'compound'), ('value', 'dobj'), ('today', 'npadvmod'), ('?', 'punct')]

>> Bigrams: 
[[ , 8], [8, areas], [areas, AI], [AI, provides], [provides,   ], [  , value], [value, today], [today, ?]]

>> Trigrams: 
[[ , 8, areas], [8, areas, AI], [areas, AI, provides], [AI, provides,   ], [provides,   , value], [  , value, today], [value, today, ?]]

>> Noun Phrases are: 
[What, the areas, AI, the most   value]

>> Named Entities are: 
[('8', 'CARDINAL'), ('AI', 'ORG'), ('today', 'DATE')] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 10 =================================

 8 What are some examples of successful implementations?  

------------------- Sentence 1 -------------------

 8 What are some examples of successful implementations? 


>> Tokens are: 
[ , 8, examples, successful, implementations, ?] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('8', 'NUM'), ('examples', 'NOUN'), ('successful', 'ADJ'), ('implementations', 'NOUN'), ('?', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'dep'), ('8', 'appos'), ('examples', 'attr'), ('successful', 'amod'), ('implementations', 'pobj'), ('?', 'punct')]

>> Bigrams: 
[[ , 8], [8, examples], [examples, successful], [successful, implementations], [implementations, ?]]

>> Trigrams: 
[[ , 8, examples], [8, examples, successful], [examples, successful, implementations], [successful, implementations, ?]]

>> Noun Phrases are: 
[What, some examples, successful implementations]

>> Named Entities are: 
[('8', 'CARDINAL')] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 11 =================================

 9 Best practices to successfully implement   AI within an organization  

------------------- Sentence 1 -------------------

 9 Best practices to successfully implement   AI within an organization   


>> Tokens are: 
[ , 9, Best, practices, successfully, implement,   , AI, organization,  ] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('9', 'NUM'), ('Best', 'ADJ'), ('practices', 'NOUN'), ('successfully', 'ADV'), ('implement', 'VERB'), ('  ', 'SPACE'), ('AI', 'PROPN'), ('organization', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'nmod'), ('9', 'nummod'), ('Best', 'amod'), ('practices', 'ROOT'), ('successfully', 'advmod'), ('implement', 'relcl'), ('  ', 'compound'), ('AI', 'dobj'), ('organization', 'pobj'), (' ', 'punct')]

>> Bigrams: 
[[ , 9], [9, Best], [Best, practices], [practices, successfully], [successfully, implement], [implement,   ], [  , AI], [AI, organization], [organization,  ]]

>> Trigrams: 
[[ , 9, Best], [9, Best, practices], [Best, practices, successfully], [practices, successfully, implement], [successfully, implement,   ], [implement,   , AI], [  , AI, organization], [AI, organization,  ]]

>> Noun Phrases are: 
[ 9 Best practices,   AI, an organization]

>> Named Entities are: 
[('9', 'CARDINAL'), ('AI', 'ORG')] 


================================ Paragraph 12 =================================

 11  Pitfalls of AI implementation  

------------------- Sentence 1 -------------------

 11   


>> Tokens are: 
[ , 11,  ] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('11', 'NUM'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT'), ('11', 'appos'), (' ', 'punct')]

>> Bigrams: 
[[ , 11], [11,  ]]

>> Trigrams: 
[[ , 11,  ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('11', 'CARDINAL')] 

------------------- Sentence 2 -------------------

Pitfalls of AI implementation   


>> Tokens are: 
[Pitfalls, AI, implementation,  ] 

>> PoS Tags are: 
[('Pitfalls', 'PROPN'), ('AI', 'PROPN'), ('implementation', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Pitfalls', 'ROOT'), ('AI', 'compound'), ('implementation', 'pobj'), (' ', 'punct')]

>> Bigrams: 
[[Pitfalls, AI], [AI, implementation], [implementation,  ]]

>> Trigrams: 
[[Pitfalls, AI, implementation], [AI, implementation,  ]]

>> Noun Phrases are: 
[Pitfalls, AI implementation]

>> Named Entities are: 
[] 


================================ Paragraph 13 =================================

14 Summary 

------------------- Sentence 1 -------------------

14 Summary 


>> Tokens are: 
[14, Summary] 

>> PoS Tags are: 
[('14', 'NUM'), ('Summary', 'PROPN')] 

>> Dependency Tags are: 
[('14', 'nummod'), ('Summary', 'ROOT')]

>> Bigrams: 
[[14, Summary]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[14 Summary]

>> Named Entities are: 
[('14', 'CARDINAL')] 


================================ Paragraph 14 =================================

15 IBM Services 

------------------- Sentence 1 -------------------

15 IBM Services 


>> Tokens are: 
[15, IBM, Services] 

>> PoS Tags are: 
[('15', 'NUM'), ('IBM', 'PROPN'), ('Services', 'PROPN')] 

>> Dependency Tags are: 
[('15', 'nummod'), ('IBM', 'compound'), ('Services', 'ROOT')]

>> Bigrams: 
[[15, IBM], [IBM, Services]]

>> Trigrams: 
[[15, IBM, Services]]

>> Noun Phrases are: 
[15 IBM Services]

>> Named Entities are: 
[('15', 'CARDINAL'), ('IBM', 'ORG')] 


================================ Paragraph 15 =================================

18 About the authors 

------------------- Sentence 1 -------------------

18 About the authors 


>> Tokens are: 
[18, authors] 

>> PoS Tags are: 
[('18', 'NUM'), ('authors', 'NOUN')] 

>> Dependency Tags are: 
[('18', 'ROOT'), ('authors', 'pobj')]

>> Bigrams: 
[[18, authors]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[the authors]

>> Named Entities are: 
[('18', 'CARDINAL')] 


================================ Paragraph 16 =================================

18 Acknowledgements 

------------------- Sentence 1 -------------------

18 Acknowledgements 


>> Tokens are: 
[18, Acknowledgements] 

>> PoS Tags are: 
[('18', 'NUM'), ('Acknowledgements', 'NOUN')] 

>> Dependency Tags are: 
[('18', 'nummod'), ('Acknowledgements', 'ROOT')]

>> Bigrams: 
[[18, Acknowledgements]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[18 Acknowledgements]

>> Named Entities are: 
[('18', 'CARDINAL')] 


================================ Paragraph 17 =================================

 18 Appendix 

------------------- Sentence 1 -------------------

 18 Appendix 


>> Tokens are: 
[ , 18, Appendix] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('18', 'NUM'), ('Appendix', 'PROPN')] 

>> Dependency Tags are: 
[(' ', 'quantmod'), ('18', 'nummod'), ('Appendix', 'ROOT')]

>> Bigrams: 
[[ , 18], [18, Appendix]]

>> Trigrams: 
[[ , 18, Appendix]]

>> Noun Phrases are: 
[ 18 Appendix]

>> Named Entities are: 
[('18', 'CARDINAL'), ('Appendix', 'NORP')] 


================================ Paragraph 18 =================================

Introduction To implement AI within your organization successfully you  need to understand what AI is, where it currently stands,  what value can provide to businesses and how it can be  successfully adopted. This white paper is written for  business leaders looking for practical advice on how to  leverage artificial intelligence (AI) for their organizations.  

------------------- Sentence 1 -------------------

Introduction To implement AI within your organization successfully you  need to understand what AI is, where it currently stands,  what value can provide to businesses and how it can be  successfully adopted. 


>> Tokens are: 
[Introduction, implement, AI, organization, successfully,  , need, understand, AI, ,, currently, stands, ,,  , value, provide, businesses,  , successfully, adopted, .] 

>> PoS Tags are: 
[('Introduction', 'NOUN'), ('implement', 'VERB'), ('AI', 'PROPN'), ('organization', 'NOUN'), ('successfully', 'ADV'), (' ', 'SPACE'), ('need', 'VERB'), ('understand', 'VERB'), ('AI', 'PROPN'), (',', 'PUNCT'), ('currently', 'ADV'), ('stands', 'VERB'), (',', 'PUNCT'), (' ', 'SPACE'), ('value', 'NOUN'), ('provide', 'VERB'), ('businesses', 'NOUN'), (' ', 'SPACE'), ('successfully', 'ADV'), ('adopted', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Introduction', 'nsubj'), ('implement', 'acl'), ('AI', 'dobj'), ('organization', 'pobj'), ('successfully', 'advmod'), (' ', 'appos'), ('need', 'ROOT'), ('understand', 'xcomp'), ('AI', 'nsubj'), (',', 'punct'), ('currently', 'advmod'), ('stands', 'ccomp'), (',', 'punct'), (' ', 'dobj'), ('value', 'nsubj'), ('provide', 'conj'), ('businesses', 'pobj'), (' ', 'nsubj'), ('successfully', 'advmod'), ('adopted', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[Introduction, implement], [implement, AI], [AI, organization], [organization, successfully], [successfully,  ], [ , need], [need, understand], [understand, AI], [AI, ,], [,, currently], [currently, stands], [stands, ,], [,,  ], [ , value], [value, provide], [provide, businesses], [businesses,  ], [ , successfully], [successfully, adopted], [adopted, .]]

>> Trigrams: 
[[Introduction, implement, AI], [implement, AI, organization], [AI, organization, successfully], [organization, successfully,  ], [successfully,  , need], [ , need, understand], [need, understand, AI], [understand, AI, ,], [AI, ,, currently], [,, currently, stands], [currently, stands, ,], [stands, ,,  ], [,,  , value], [ , value, provide], [value, provide, businesses], [provide, businesses,  ], [businesses,  , successfully], [ , successfully, adopted], [successfully, adopted, .]]

>> Noun Phrases are: 
[Introduction, AI, your organization, you, what, AI, it, what value, businesses, it]

>> Named Entities are: 
[('AI', 'ORG'), ('AI', 'ORG')] 

------------------- Sentence 2 -------------------

This white paper is written for  business leaders looking for practical advice on how to  leverage artificial intelligence (AI) for their organizations. 


>> Tokens are: 
[white, paper, written,  , business, leaders, looking, practical, advice,  , leverage, artificial, intelligence, (, AI, ), organizations, .] 

>> PoS Tags are: 
[('white', 'ADJ'), ('paper', 'NOUN'), ('written', 'VERB'), (' ', 'SPACE'), ('business', 'NOUN'), ('leaders', 'NOUN'), ('looking', 'VERB'), ('practical', 'ADJ'), ('advice', 'NOUN'), (' ', 'SPACE'), ('leverage', 'NOUN'), ('artificial', 'ADJ'), ('intelligence', 'NOUN'), ('(', 'PUNCT'), ('AI', 'PROPN'), (')', 'PUNCT'), ('organizations', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('white', 'amod'), ('paper', 'nsubjpass'), ('written', 'ROOT'), (' ', 'pobj'), ('business', 'compound'), ('leaders', 'nsubj'), ('looking', 'acl'), ('practical', 'amod'), ('advice', 'pobj'), (' ', 'pcomp'), ('leverage', 'advcl'), ('artificial', 'amod'), ('intelligence', 'dobj'), ('(', 'punct'), ('AI', 'appos'), (')', 'punct'), ('organizations', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[white, paper], [paper, written], [written,  ], [ , business], [business, leaders], [leaders, looking], [looking, practical], [practical, advice], [advice,  ], [ , leverage], [leverage, artificial], [artificial, intelligence], [intelligence, (], [(, AI], [AI, )], [), organizations], [organizations, .]]

>> Trigrams: 
[[white, paper, written], [paper, written,  ], [written,  , business], [ , business, leaders], [business, leaders, looking], [leaders, looking, practical], [looking, practical, advice], [practical, advice,  ], [advice,  , leverage], [ , leverage, artificial], [leverage, artificial, intelligence], [artificial, intelligence, (], [intelligence, (, AI], [(, AI, )], [AI, ), organizations], [), organizations, .]]

>> Noun Phrases are: 
[This white paper, business leaders, practical advice, artificial intelligence, (AI, their organizations]

>> Named Entities are: 
[('AI', 'ORG')] 

------------------- Sentence 3 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 19 =================================

The fact that AI has been hyped doesn’t take away from its  capabilities as a real value driver. Heavy investments have  been made in AI across multiple industries; the Chinese  government even made it one of their core sectors. And  companies like IBM, Microsoft, Google and Amazon are  leading the pack when it comes to utilizing data and AI.  

------------------- Sentence 1 -------------------

The fact that AI has been hyped doesn’t take away from its  capabilities as a real value driver. 


>> Tokens are: 
[fact, AI, hyped, away,  , capabilities, real, value, driver, .] 

>> PoS Tags are: 
[('fact', 'NOUN'), ('AI', 'PROPN'), ('hyped', 'VERB'), ('away', 'ADV'), (' ', 'SPACE'), ('capabilities', 'NOUN'), ('real', 'ADJ'), ('value', 'NOUN'), ('driver', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('fact', 'nsubj'), ('AI', 'nsubjpass'), ('hyped', 'acl'), ('away', 'advmod'), (' ', 'compound'), ('capabilities', 'pobj'), ('real', 'amod'), ('value', 'compound'), ('driver', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[fact, AI], [AI, hyped], [hyped, away], [away,  ], [ , capabilities], [capabilities, real], [real, value], [value, driver], [driver, .]]

>> Trigrams: 
[[fact, AI, hyped], [AI, hyped, away], [hyped, away,  ], [away,  , capabilities], [ , capabilities, real], [capabilities, real, value], [real, value, driver], [value, driver, .]]

>> Noun Phrases are: 
[The fact, AI, its  capabilities, a real value driver]

>> Named Entities are: 
[('AI', 'ORG')] 

------------------- Sentence 2 -------------------

Heavy investments have  been made in AI across multiple industries; the Chinese  government even made it one of their core sectors. 


>> Tokens are: 
[Heavy, investments,  , AI, multiple, industries, ;, Chinese,  , government, core, sectors, .] 

>> PoS Tags are: 
[('Heavy', 'ADJ'), ('investments', 'NOUN'), (' ', 'SPACE'), ('AI', 'PROPN'), ('multiple', 'ADJ'), ('industries', 'NOUN'), (';', 'PUNCT'), ('Chinese', 'ADJ'), (' ', 'SPACE'), ('government', 'NOUN'), ('core', 'NOUN'), ('sectors', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Heavy', 'amod'), ('investments', 'nsubjpass'), (' ', 'nsubjpass'), ('AI', 'pobj'), ('multiple', 'amod'), ('industries', 'pobj'), (';', 'punct'), ('Chinese', 'amod'), (' ', 'compound'), ('government', 'nsubj'), ('core', 'compound'), ('sectors', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Heavy, investments], [investments,  ], [ , AI], [AI, multiple], [multiple, industries], [industries, ;], [;, Chinese], [Chinese,  ], [ , government], [government, core], [core, sectors], [sectors, .]]

>> Trigrams: 
[[Heavy, investments,  ], [investments,  , AI], [ , AI, multiple], [AI, multiple, industries], [multiple, industries, ;], [industries, ;, Chinese], [;, Chinese,  ], [Chinese,  , government], [ , government, core], [government, core, sectors], [core, sectors, .]]

>> Noun Phrases are: 
[Heavy investments, AI, multiple industries, the Chinese  government, it, their core sectors]

>> Named Entities are: 
[('AI', 'ORG'), ('Chinese', 'NORP')] 

------------------- Sentence 3 -------------------

And  companies like IBM, Microsoft, Google and Amazon are  leading the pack when it comes to utilizing data and AI. 


>> Tokens are: 
[ , companies, like, IBM, ,, Microsoft, ,, Google, Amazon,  , leading, pack, comes, utilizing, data, AI, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('companies', 'NOUN'), ('like', 'ADP'), ('IBM', 'PROPN'), (',', 'PUNCT'), ('Microsoft', 'PROPN'), (',', 'PUNCT'), ('Google', 'PROPN'), ('Amazon', 'PROPN'), (' ', 'SPACE'), ('leading', 'VERB'), ('pack', 'NOUN'), ('comes', 'VERB'), ('utilizing', 'VERB'), ('data', 'NOUN'), ('AI', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'compound'), ('companies', 'nsubj'), ('like', 'prep'), ('IBM', 'pobj'), (',', 'punct'), ('Microsoft', 'conj'), (',', 'punct'), ('Google', 'conj'), ('Amazon', 'conj'), (' ', 'attr'), ('leading', 'acl'), ('pack', 'dobj'), ('comes', 'advcl'), ('utilizing', 'pcomp'), ('data', 'dobj'), ('AI', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[ , companies], [companies, like], [like, IBM], [IBM, ,], [,, Microsoft], [Microsoft, ,], [,, Google], [Google, Amazon], [Amazon,  ], [ , leading], [leading, pack], [pack, comes], [comes, utilizing], [utilizing, data], [data, AI], [AI, .]]

>> Trigrams: 
[[ , companies, like], [companies, like, IBM], [like, IBM, ,], [IBM, ,, Microsoft], [,, Microsoft, ,], [Microsoft, ,, Google], [,, Google, Amazon], [Google, Amazon,  ], [Amazon,  , leading], [ , leading, pack], [leading, pack, comes], [pack, comes, utilizing], [comes, utilizing, data], [utilizing, data, AI], [data, AI, .]]

>> Noun Phrases are: 
[ companies, IBM, Microsoft, Google, Amazon, the pack, it, data, AI]

>> Named Entities are: 
[('IBM', 'ORG'), ('Microsoft', 'ORG'), ('Google', 'ORG'), ('Amazon', 'ORG'), ('AI', 'ORG')] 

------------------- Sentence 4 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 20 =================================

AI provides enormous amounts of value in multiple  industries. Because of its high value potential, many  companies have been scrambling to implement AI within  their organizations. And the projects, when implemented  properly, have shown significant returns and improved  competitive edge. If your company hasn’t started  implementing AI, it may lag behind its competitors, so it’s  critical to evaluate what AI can do for your organization.  But this doesn’t mean you should hire data scientists or  acquiring data science solutions without a clear strategy.  Implementing AI should be a carefully thought out process.  Otherwise it may turn out to be a costly failure.  

------------------- Sentence 1 -------------------

AI provides enormous amounts of value in multiple  industries. 


>> Tokens are: 
[AI, provides, enormous, amounts, value, multiple,  , industries, .] 

>> PoS Tags are: 
[('AI', 'NOUN'), ('provides', 'VERB'), ('enormous', 'ADJ'), ('amounts', 'NOUN'), ('value', 'NOUN'), ('multiple', 'ADJ'), (' ', 'SPACE'), ('industries', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('AI', 'nsubj'), ('provides', 'ROOT'), ('enormous', 'amod'), ('amounts', 'dobj'), ('value', 'pobj'), ('multiple', 'amod'), (' ', 'compound'), ('industries', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[AI, provides], [provides, enormous], [enormous, amounts], [amounts, value], [value, multiple], [multiple,  ], [ , industries], [industries, .]]

>> Trigrams: 
[[AI, provides, enormous], [provides, enormous, amounts], [enormous, amounts, value], [amounts, value, multiple], [value, multiple,  ], [multiple,  , industries], [ , industries, .]]

>> Noun Phrases are: 
[AI, enormous amounts, value, multiple  industries]

>> Named Entities are: 
[('AI', 'ORG')] 

------------------- Sentence 2 -------------------

Because of its high value potential, many  companies have been scrambling to implement AI within  their organizations. 


>> Tokens are: 
[high, value, potential, ,,  , companies, scrambling, implement, AI,  , organizations, .] 

>> PoS Tags are: 
[('high', 'ADJ'), ('value', 'NOUN'), ('potential', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('companies', 'NOUN'), ('scrambling', 'VERB'), ('implement', 'VERB'), ('AI', 'PROPN'), (' ', 'SPACE'), ('organizations', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('high', 'amod'), ('value', 'compound'), ('potential', 'pobj'), (',', 'punct'), (' ', 'compound'), ('companies', 'nsubj'), ('scrambling', 'ROOT'), ('implement', 'xcomp'), ('AI', 'dobj'), (' ', 'pobj'), ('organizations', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[high, value], [value, potential], [potential, ,], [,,  ], [ , companies], [companies, scrambling], [scrambling, implement], [implement, AI], [AI,  ], [ , organizations], [organizations, .]]

>> Trigrams: 
[[high, value, potential], [value, potential, ,], [potential, ,,  ], [,,  , companies], [ , companies, scrambling], [companies, scrambling, implement], [scrambling, implement, AI], [implement, AI,  ], [AI,  , organizations], [ , organizations, .]]

>> Noun Phrases are: 
[its high value potential, many  companies, AI, their organizations]

>> Named Entities are: 
[('AI', 'ORG')] 

------------------- Sentence 3 -------------------

And the projects, when implemented  properly, have shown significant returns and improved  competitive edge. 


>> Tokens are: 
[projects, ,, implemented,  , properly, ,, shown, significant, returns, improved,  , competitive, edge, .] 

>> PoS Tags are: 
[('projects', 'NOUN'), (',', 'PUNCT'), ('implemented', 'VERB'), (' ', 'SPACE'), ('properly', 'ADV'), (',', 'PUNCT'), ('shown', 'VERB'), ('significant', 'ADJ'), ('returns', 'NOUN'), ('improved', 'VERB'), (' ', 'SPACE'), ('competitive', 'ADJ'), ('edge', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('projects', 'nsubj'), (',', 'punct'), ('implemented', 'advcl'), (' ', 'dobj'), ('properly', 'advmod'), (',', 'punct'), ('shown', 'ROOT'), ('significant', 'amod'), ('returns', 'dobj'), ('improved', 'conj'), (' ', 'prep'), ('competitive', 'amod'), ('edge', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[projects, ,], [,, implemented], [implemented,  ], [ , properly], [properly, ,], [,, shown], [shown, significant], [significant, returns], [returns, improved], [improved,  ], [ , competitive], [competitive, edge], [edge, .]]

>> Trigrams: 
[[projects, ,, implemented], [,, implemented,  ], [implemented,  , properly], [ , properly, ,], [properly, ,, shown], [,, shown, significant], [shown, significant, returns], [significant, returns, improved], [returns, improved,  ], [improved,  , competitive], [ , competitive, edge], [competitive, edge, .]]

>> Noun Phrases are: 
[the projects, significant returns, competitive edge]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

If your company hasn’t started  implementing AI, it may lag behind its competitors, so it’s  critical to evaluate what AI can do for your organization. 


>> Tokens are: 
[company, started,  , implementing, AI, ,, lag, competitors, ,,  , critical, evaluate, AI, organization, .] 

>> PoS Tags are: 
[('company', 'NOUN'), ('started', 'VERB'), (' ', 'SPACE'), ('implementing', 'VERB'), ('AI', 'PROPN'), (',', 'PUNCT'), ('lag', 'VERB'), ('competitors', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('critical', 'ADJ'), ('evaluate', 'VERB'), ('AI', 'PROPN'), ('organization', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('company', 'nsubj'), ('started', 'advcl'), (' ', 'dobj'), ('implementing', 'acl'), ('AI', 'dobj'), (',', 'punct'), ('lag', 'ROOT'), ('competitors', 'pobj'), (',', 'punct'), (' ', 'attr'), ('critical', 'amod'), ('evaluate', 'xcomp'), ('AI', 'nsubj'), ('organization', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[company, started], [started,  ], [ , implementing], [implementing, AI], [AI, ,], [,, lag], [lag, competitors], [competitors, ,], [,,  ], [ , critical], [critical, evaluate], [evaluate, AI], [AI, organization], [organization, .]]

>> Trigrams: 
[[company, started,  ], [started,  , implementing], [ , implementing, AI], [implementing, AI, ,], [AI, ,, lag], [,, lag, competitors], [lag, competitors, ,], [competitors, ,,  ], [,,  , critical], [ , critical, evaluate], [critical, evaluate, AI], [evaluate, AI, organization], [AI, organization, .]]

>> Noun Phrases are: 
[your company, AI, it, its competitors, it, what AI, your organization]

>> Named Entities are: 
[('AI', 'ORG'), ('AI', 'ORG')] 

------------------- Sentence 5 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 6 -------------------

But this doesn’t mean you should hire data scientists or  acquiring data science solutions without a clear strategy. 


>> Tokens are: 
[mean, hire, data, scientists,  , acquiring, data, science, solutions, clear, strategy, .] 

>> PoS Tags are: 
[('mean', 'VERB'), ('hire', 'VERB'), ('data', 'NOUN'), ('scientists', 'NOUN'), (' ', 'SPACE'), ('acquiring', 'VERB'), ('data', 'NOUN'), ('science', 'NOUN'), ('solutions', 'NOUN'), ('clear', 'ADJ'), ('strategy', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('mean', 'ROOT'), ('hire', 'ccomp'), ('data', 'compound'), ('scientists', 'dobj'), (' ', 'conj'), ('acquiring', 'advcl'), ('data', 'compound'), ('science', 'compound'), ('solutions', 'dobj'), ('clear', 'amod'), ('strategy', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[mean, hire], [hire, data], [data, scientists], [scientists,  ], [ , acquiring], [acquiring, data], [data, science], [science, solutions], [solutions, clear], [clear, strategy], [strategy, .]]

>> Trigrams: 
[[mean, hire, data], [hire, data, scientists], [data, scientists,  ], [scientists,  , acquiring], [ , acquiring, data], [acquiring, data, science], [data, science, solutions], [science, solutions, clear], [solutions, clear, strategy], [clear, strategy, .]]

>> Noun Phrases are: 
[you, data scientists, data science solutions, a clear strategy]

>> Named Entities are: 
[] 

------------------- Sentence 7 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 8 -------------------

Implementing AI should be a carefully thought out process. 


>> Tokens are: 
[Implementing, AI, carefully, thought, process, .] 

>> PoS Tags are: 
[('Implementing', 'VERB'), ('AI', 'PROPN'), ('carefully', 'ADV'), ('thought', 'VERB'), ('process', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Implementing', 'csubj'), ('AI', 'dobj'), ('carefully', 'advmod'), ('thought', 'amod'), ('process', 'attr'), ('.', 'punct')]

>> Bigrams: 
[[Implementing, AI], [AI, carefully], [carefully, thought], [thought, process], [process, .]]

>> Trigrams: 
[[Implementing, AI, carefully], [AI, carefully, thought], [carefully, thought, process], [thought, process, .]]

>> Noun Phrases are: 
[AI, a carefully thought out process]

>> Named Entities are: 
[] 

------------------- Sentence 9 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 10 -------------------

Otherwise it may turn out to be a costly failure.   


>> Tokens are: 
[turn, costly, failure, .,  ] 

>> PoS Tags are: 
[('turn', 'VERB'), ('costly', 'ADJ'), ('failure', 'NOUN'), ('.', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('turn', 'ROOT'), ('costly', 'amod'), ('failure', 'attr'), ('.', 'punct'), (' ', 'dobj')]

>> Bigrams: 
[[turn, costly], [costly, failure], [failure, .], [.,  ]]

>> Trigrams: 
[[turn, costly, failure], [costly, failure, .], [failure, .,  ]]

>> Noun Phrases are: 
[it, a costly failure]

>> Named Entities are: 
[] 


================================ Paragraph 21 =================================

The authors of this paper want to provide you with the  knowledge you need to evaluate what type of AI solutions you  can implement to give your company a competitive advantage.

------------------- Sentence 1 -------------------

The authors of this paper want to provide you with the  knowledge you need to evaluate what type of AI solutions you  can implement to give your company a competitive advantage. 


>> Tokens are: 
[authors, paper, want, provide,  , knowledge, need, evaluate, type, AI, solutions,  , implement, company, competitive, advantage, .] 

>> PoS Tags are: 
[('authors', 'NOUN'), ('paper', 'NOUN'), ('want', 'VERB'), ('provide', 'VERB'), (' ', 'SPACE'), ('knowledge', 'NOUN'), ('need', 'VERB'), ('evaluate', 'VERB'), ('type', 'NOUN'), ('AI', 'PROPN'), ('solutions', 'NOUN'), (' ', 'SPACE'), ('implement', 'VERB'), ('company', 'NOUN'), ('competitive', 'ADJ'), ('advantage', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('authors', 'nsubj'), ('paper', 'pobj'), ('want', 'ROOT'), ('provide', 'xcomp'), (' ', 'compound'), ('knowledge', 'pobj'), ('need', 'relcl'), ('evaluate', 'xcomp'), ('type', 'dobj'), ('AI', 'compound'), ('solutions', 'pobj'), (' ', 'nsubj'), ('implement', 'ccomp'), ('company', 'dative'), ('competitive', 'amod'), ('advantage', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[authors, paper], [paper, want], [want, provide], [provide,  ], [ , knowledge], [knowledge, need], [need, evaluate], [evaluate, type], [type, AI], [AI, solutions], [solutions,  ], [ , implement], [implement, company], [company, competitive], [competitive, advantage], [advantage, .]]

>> Trigrams: 
[[authors, paper, want], [paper, want, provide], [want, provide,  ], [provide,  , knowledge], [ , knowledge, need], [knowledge, need, evaluate], [need, evaluate, type], [evaluate, type, AI], [type, AI, solutions], [AI, solutions,  ], [solutions,  , implement], [ , implement, company], [implement, company, competitive], [company, competitive, advantage], [competitive, advantage, .]]

>> Noun Phrases are: 
[The authors, this paper, you, the  knowledge, you, what type, AI solutions, you, your company, a competitive advantage]

>> Named Entities are: 
[('AI', 'ORG')] 


================================ Paragraph 22 =================================

IBM Services     3 

------------------- Sentence 1 -------------------

IBM Services     3 


>> Tokens are: 
[IBM, Services,     , 3] 

>> PoS Tags are: 
[('IBM', 'PROPN'), ('Services', 'PROPN'), ('    ', 'SPACE'), ('3', 'NUM')] 

>> Dependency Tags are: 
[('IBM', 'compound'), ('Services', 'ROOT'), ('    ', 'appos'), ('3', 'nummod')]

>> Bigrams: 
[[IBM, Services], [Services,     ], [    , 3]]

>> Trigrams: 
[[IBM, Services,     ], [Services,     , 3]]

>> Noun Phrases are: 
[IBM Services]

>> Named Entities are: 
[('IBM Services', 'ORG')] 


================================ Paragraph 23 =================================

What is AI? When people hear AI they often think about sentient  robots and magic boxes. AI today is much more mundane  and simple—but that doesn’t mean it’s not powerful.  Another misconception is that high-profile research  projects can be applied directly to any business situation.   AI done right can create extreme return on investments  (ROIs)—for instance through automation or precise  prediction. But it does take thought, time and proper  implementation. We have seen that success and value  generated by AI projects is increased when there is a  grounded understanding and expectation of what the  technology can deliver from the C-suite down. 

------------------- Sentence 1 -------------------

What is AI? 


>> Tokens are: 
[AI, ?] 

>> PoS Tags are: 
[('AI', 'PROPN'), ('?', 'PUNCT')] 

>> Dependency Tags are: 
[('AI', 'nsubj'), ('?', 'punct')]

>> Bigrams: 
[[AI, ?]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[What, AI]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

When people hear AI they often think about sentient  robots and magic boxes. 


>> Tokens are: 
[people, hear, AI, think, sentient,  , robots, magic, boxes, .] 

>> PoS Tags are: 
[('people', 'NOUN'), ('hear', 'VERB'), ('AI', 'PROPN'), ('think', 'VERB'), ('sentient', 'NOUN'), (' ', 'SPACE'), ('robots', 'NOUN'), ('magic', 'NOUN'), ('boxes', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('people', 'nsubj'), ('hear', 'advcl'), ('AI', 'dobj'), ('think', 'ROOT'), ('sentient', 'compound'), (' ', 'compound'), ('robots', 'pobj'), ('magic', 'compound'), ('boxes', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[people, hear], [hear, AI], [AI, think], [think, sentient], [sentient,  ], [ , robots], [robots, magic], [magic, boxes], [boxes, .]]

>> Trigrams: 
[[people, hear, AI], [hear, AI, think], [AI, think, sentient], [think, sentient,  ], [sentient,  , robots], [ , robots, magic], [robots, magic, boxes], [magic, boxes, .]]

>> Noun Phrases are: 
[people, AI, they, sentient  robots, magic boxes]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

AI today is much more mundane  and simple—but that doesn’t mean it’s not powerful.   


>> Tokens are: 
[AI, today, mundane,  , simple, —, mean, powerful, .,  ] 

>> PoS Tags are: 
[('AI', 'PROPN'), ('today', 'NOUN'), ('mundane', 'ADJ'), (' ', 'SPACE'), ('simple', 'NOUN'), ('—', 'PUNCT'), ('mean', 'VERB'), ('powerful', 'ADJ'), ('.', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('AI', 'nsubj'), ('today', 'npadvmod'), ('mundane', 'amod'), (' ', 'attr'), ('simple', 'conj'), ('—', 'punct'), ('mean', 'conj'), ('powerful', 'acomp'), ('.', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[AI, today], [today, mundane], [mundane,  ], [ , simple], [simple, —], [—, mean], [mean, powerful], [powerful, .], [.,  ]]

>> Trigrams: 
[[AI, today, mundane], [today, mundane,  ], [mundane,  , simple], [ , simple, —], [simple, —, mean], [—, mean, powerful], [mean, powerful, .], [powerful, .,  ]]

>> Noun Phrases are: 
[AI, simple, it]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

Another misconception is that high-profile research  projects can be applied directly to any business situation. 


>> Tokens are: 
[misconception, high, -, profile, research,  , projects, applied, directly, business, situation, .] 

>> PoS Tags are: 
[('misconception', 'NOUN'), ('high', 'ADJ'), ('-', 'PUNCT'), ('profile', 'NOUN'), ('research', 'NOUN'), (' ', 'SPACE'), ('projects', 'NOUN'), ('applied', 'VERB'), ('directly', 'ADV'), ('business', 'NOUN'), ('situation', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('misconception', 'nsubj'), ('high', 'amod'), ('-', 'punct'), ('profile', 'compound'), ('research', 'compound'), (' ', 'compound'), ('projects', 'nsubjpass'), ('applied', 'ccomp'), ('directly', 'advmod'), ('business', 'compound'), ('situation', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[misconception, high], [high, -], [-, profile], [profile, research], [research,  ], [ , projects], [projects, applied], [applied, directly], [directly, business], [business, situation], [situation, .]]

>> Trigrams: 
[[misconception, high, -], [high, -, profile], [-, profile, research], [profile, research,  ], [research,  , projects], [ , projects, applied], [projects, applied, directly], [applied, directly, business], [directly, business, situation], [business, situation, .]]

>> Noun Phrases are: 
[Another misconception, high-profile research  projects, any business situation]

>> Named Entities are: 
[] 

------------------- Sentence 5 -------------------

  AI done right 


>> Tokens are: 
[  , AI, right] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('AI', 'PROPN'), ('right', 'NOUN')] 

>> Dependency Tags are: 
[('  ', 'nummod'), ('AI', 'nsubj'), ('right', 'advmod')]

>> Bigrams: 
[[  , AI], [AI, right]]

>> Trigrams: 
[[  , AI, right]]

>> Noun Phrases are: 
[  AI]

>> Named Entities are: 
[] 

------------------- Sentence 6 -------------------

can create extreme return on investments   


>> Tokens are: 
[create, extreme, return, investments,  ] 

>> PoS Tags are: 
[('create', 'VERB'), ('extreme', 'ADJ'), ('return', 'NOUN'), ('investments', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('create', 'ROOT'), ('extreme', 'amod'), ('return', 'dobj'), ('investments', 'pobj'), (' ', 'appos')]

>> Bigrams: 
[[create, extreme], [extreme, return], [return, investments], [investments,  ]]

>> Trigrams: 
[[create, extreme, return], [extreme, return, investments], [return, investments,  ]]

>> Noun Phrases are: 
[extreme return, investments]

>> Named Entities are: 
[] 

------------------- Sentence 7 -------------------

(ROIs)—for instance through automation or precise  prediction. 


>> Tokens are: 
[(, ROIs)—for, instance, automation, precise,  , prediction, .] 

>> PoS Tags are: 
[('(', 'PUNCT'), ('ROIs)—for', 'X'), ('instance', 'NOUN'), ('automation', 'NOUN'), ('precise', 'ADJ'), (' ', 'SPACE'), ('prediction', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('(', 'punct'), ('ROIs)—for', 'ROOT'), ('instance', 'pobj'), ('automation', 'pobj'), ('precise', 'amod'), (' ', 'compound'), ('prediction', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[(, ROIs)—for], [ROIs)—for, instance], [instance, automation], [automation, precise], [precise,  ], [ , prediction], [prediction, .]]

>> Trigrams: 
[[(, ROIs)—for, instance], [ROIs)—for, instance, automation], [instance, automation, precise], [automation, precise,  ], [precise,  , prediction], [ , prediction, .]]

>> Noun Phrases are: 
[instance, automation, precise  prediction]

>> Named Entities are: 
[] 

------------------- Sentence 8 -------------------

But it does take thought, time and proper  implementation. 


>> Tokens are: 
[thought, ,, time, proper,  , implementation, .] 

>> PoS Tags are: 
[('thought', 'NOUN'), (',', 'PUNCT'), ('time', 'NOUN'), ('proper', 'ADJ'), (' ', 'SPACE'), ('implementation', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('thought', 'dobj'), (',', 'punct'), ('time', 'dobj'), ('proper', 'amod'), (' ', 'compound'), ('implementation', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[thought, ,], [,, time], [time, proper], [proper,  ], [ , implementation], [implementation, .]]

>> Trigrams: 
[[thought, ,, time], [,, time, proper], [time, proper,  ], [proper,  , implementation], [ , implementation, .]]

>> Noun Phrases are: 
[it, thought, time, proper  implementation]

>> Named Entities are: 
[] 

------------------- Sentence 9 -------------------

We have seen that success and value  generated by AI projects is increased when there is a  grounded understanding and expectation of what the  technology can deliver from the C-suite down. 


>> Tokens are: 
[seen, success, value,  , generated, AI, projects, increased,  , grounded, understanding, expectation,  , technology, deliver, C, -, suite, .] 

>> PoS Tags are: 
[('seen', 'VERB'), ('success', 'NOUN'), ('value', 'NOUN'), (' ', 'SPACE'), ('generated', 'VERB'), ('AI', 'PROPN'), ('projects', 'NOUN'), ('increased', 'VERB'), (' ', 'SPACE'), ('grounded', 'VERB'), ('understanding', 'NOUN'), ('expectation', 'NOUN'), (' ', 'SPACE'), ('technology', 'NOUN'), ('deliver', 'VERB'), ('C', 'NOUN'), ('-', 'PUNCT'), ('suite', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('seen', 'ROOT'), ('success', 'dobj'), ('value', 'conj'), (' ', 'dobj'), ('generated', 'acl'), ('AI', 'compound'), ('projects', 'pobj'), ('increased', 'ccomp'), (' ', 'nmod'), ('grounded', 'amod'), ('understanding', 'attr'), ('expectation', 'conj'), (' ', 'compound'), ('technology', 'nsubj'), ('deliver', 'pcomp'), ('C', 'compound'), ('-', 'punct'), ('suite', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[seen, success], [success, value], [value,  ], [ , generated], [generated, AI], [AI, projects], [projects, increased], [increased,  ], [ , grounded], [grounded, understanding], [understanding, expectation], [expectation,  ], [ , technology], [technology, deliver], [deliver, C], [C, -], [-, suite], [suite, .]]

>> Trigrams: 
[[seen, success, value], [success, value,  ], [value,  , generated], [ , generated, AI], [generated, AI, projects], [AI, projects, increased], [projects, increased,  ], [increased,  , grounded], [ , grounded, understanding], [grounded, understanding, expectation], [understanding, expectation,  ], [expectation,  , technology], [ , technology, deliver], [technology, deliver, C], [deliver, C, -], [C, -, suite], [-, suite, .]]

>> Noun Phrases are: 
[We, that success, value, AI projects, a  grounded understanding, expectation, what, the  technology, the C-suite]

>> Named Entities are: 
[('AI', 'ORG')] 


================================ Paragraph 24 =================================

We are now at the brink of the fourth Industrial Revolution.  AI is one of the biggest facets of this revolution, and it  will affect almost all sectors, as did previous Industrial  Revolutions.1 AI’s abilities have increased significantly  since its inception in 1955; it can now detect patterns  more accurately, continuously and based on more data.  Currently, AI has surpassed human intelligence in some  specific domains. These domains can be split in three  categories: general tasks, formal tasks and expert tasks.  General tasks could include visual recognition, speech  recognition, natural language processing and translation.  Formal tasks are related to games where some theorem  and learning is involved. And expert tasks are those that  would otherwise be executed by a domain expert. (Think  of tasks such as diagnosing disease and engineering.2)  

------------------- Sentence 1 -------------------

We are now at the brink of the fourth Industrial Revolution. 


>> Tokens are: 
[brink, fourth, Industrial, Revolution, .] 

>> PoS Tags are: 
[('brink', 'NOUN'), ('fourth', 'ADJ'), ('Industrial', 'PROPN'), ('Revolution', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('brink', 'pobj'), ('fourth', 'amod'), ('Industrial', 'compound'), ('Revolution', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[brink, fourth], [fourth, Industrial], [Industrial, Revolution], [Revolution, .]]

>> Trigrams: 
[[brink, fourth, Industrial], [fourth, Industrial, Revolution], [Industrial, Revolution, .]]

>> Noun Phrases are: 
[We, the brink, the fourth Industrial Revolution]

>> Named Entities are: 
[('fourth', 'ORDINAL'), ('Industrial Revolution', 'EVENT')] 

------------------- Sentence 2 -------------------

 AI is one of the biggest facets of this revolution, and it  will affect almost all sectors, as did previous Industrial  Revolutions.1 AI’s abilities have increased significantly  since its inception in 1955; it can now detect patterns  more accurately, continuously and based on more data.   


>> Tokens are: 
[ , AI, biggest, facets, revolution, ,,  , affect, sectors, ,, previous, Industrial,  , Revolutions.1, AI, abilities, increased, significantly,  , inception, 1955, ;, detect, patterns,  , accurately, ,, continuously, based, data, .,  ] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('AI', 'PROPN'), ('biggest', 'ADJ'), ('facets', 'NOUN'), ('revolution', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('affect', 'VERB'), ('sectors', 'NOUN'), (',', 'PUNCT'), ('previous', 'ADJ'), ('Industrial', 'PROPN'), (' ', 'SPACE'), ('Revolutions.1', 'NOUN'), ('AI', 'PROPN'), ('abilities', 'NOUN'), ('increased', 'VERB'), ('significantly', 'ADV'), (' ', 'SPACE'), ('inception', 'NOUN'), ('1955', 'NUM'), (';', 'PUNCT'), ('detect', 'VERB'), ('patterns', 'NOUN'), (' ', 'SPACE'), ('accurately', 'ADV'), (',', 'PUNCT'), ('continuously', 'ADV'), ('based', 'VERB'), ('data', 'NOUN'), ('.', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'compound'), ('AI', 'nsubj'), ('biggest', 'amod'), ('facets', 'pobj'), ('revolution', 'pobj'), (',', 'punct'), (' ', 'nsubj'), ('affect', 'conj'), ('sectors', 'dobj'), (',', 'punct'), ('previous', 'amod'), ('Industrial', 'nmod'), (' ', 'nummod'), ('Revolutions.1', 'compound'), ('AI', 'poss'), ('abilities', 'nsubj'), ('increased', 'ccomp'), ('significantly', 'advmod'), (' ', 'npadvmod'), ('inception', 'pobj'), ('1955', 'pobj'), (';', 'punct'), ('detect', 'ccomp'), ('patterns', 'dobj'), (' ', 'dobj'), ('accurately', 'advmod'), (',', 'punct'), ('continuously', 'advmod'), ('based', 'conj'), ('data', 'pobj'), ('.', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[ , AI], [AI, biggest], [biggest, facets], [facets, revolution], [revolution, ,], [,,  ], [ , affect], [affect, sectors], [sectors, ,], [,, previous], [previous, Industrial], [Industrial,  ], [ , Revolutions.1], [Revolutions.1, AI], [AI, abilities], [abilities, increased], [increased, significantly], [significantly,  ], [ , inception], [inception, 1955], [1955, ;], [;, detect], [detect, patterns], [patterns,  ], [ , accurately], [accurately, ,], [,, continuously], [continuously, based], [based, data], [data, .], [.,  ]]

>> Trigrams: 
[[ , AI, biggest], [AI, biggest, facets], [biggest, facets, revolution], [facets, revolution, ,], [revolution, ,,  ], [,,  , affect], [ , affect, sectors], [affect, sectors, ,], [sectors, ,, previous], [,, previous, Industrial], [previous, Industrial,  ], [Industrial,  , Revolutions.1], [ , Revolutions.1, AI], [Revolutions.1, AI, abilities], [AI, abilities, increased], [abilities, increased, significantly], [increased, significantly,  ], [significantly,  , inception], [ , inception, 1955], [inception, 1955, ;], [1955, ;, detect], [;, detect, patterns], [detect, patterns,  ], [patterns,  , accurately], [ , accurately, ,], [accurately, ,, continuously], [,, continuously, based], [continuously, based, data], [based, data, .], [data, .,  ]]

>> Noun Phrases are: 
[ AI, the biggest facets, this revolution, it, almost all sectors, previous Industrial  Revolutions.1 AI’s abilities, its inception, it, patterns, more data]

>> Named Entities are: 
[('AI', 'ORG'), ('Revolutions.1', 'DATE'), ('1955', 'DATE')] 

------------------- Sentence 3 -------------------

Currently, AI has surpassed human intelligence in some  specific domains. 


>> Tokens are: 
[Currently, ,, AI, surpassed, human, intelligence,  , specific, domains, .] 

>> PoS Tags are: 
[('Currently', 'ADV'), (',', 'PUNCT'), ('AI', 'PROPN'), ('surpassed', 'VERB'), ('human', 'ADJ'), ('intelligence', 'NOUN'), (' ', 'SPACE'), ('specific', 'ADJ'), ('domains', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Currently', 'advmod'), (',', 'punct'), ('AI', 'nsubj'), ('surpassed', 'ROOT'), ('human', 'amod'), ('intelligence', 'dobj'), (' ', 'nmod'), ('specific', 'amod'), ('domains', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Currently, ,], [,, AI], [AI, surpassed], [surpassed, human], [human, intelligence], [intelligence,  ], [ , specific], [specific, domains], [domains, .]]

>> Trigrams: 
[[Currently, ,, AI], [,, AI, surpassed], [AI, surpassed, human], [surpassed, human, intelligence], [human, intelligence,  ], [intelligence,  , specific], [ , specific, domains], [specific, domains, .]]

>> Noun Phrases are: 
[AI, human intelligence, some  specific domains]

>> Named Entities are: 
[('AI', 'ORG')] 

------------------- Sentence 4 -------------------

These domains can be split in three  categories: general tasks, formal tasks and expert tasks. 


>> Tokens are: 
[domains, split,  , categories, :, general, tasks, ,, formal, tasks, expert, tasks, .] 

>> PoS Tags are: 
[('domains', 'NOUN'), ('split', 'VERB'), (' ', 'SPACE'), ('categories', 'NOUN'), (':', 'PUNCT'), ('general', 'ADJ'), ('tasks', 'NOUN'), (',', 'PUNCT'), ('formal', 'ADJ'), ('tasks', 'NOUN'), ('expert', 'NOUN'), ('tasks', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('domains', 'nsubjpass'), ('split', 'ROOT'), (' ', 'nummod'), ('categories', 'pobj'), (':', 'punct'), ('general', 'amod'), ('tasks', 'appos'), (',', 'punct'), ('formal', 'amod'), ('tasks', 'conj'), ('expert', 'compound'), ('tasks', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[domains, split], [split,  ], [ , categories], [categories, :], [:, general], [general, tasks], [tasks, ,], [,, formal], [formal, tasks], [tasks, expert], [expert, tasks], [tasks, .]]

>> Trigrams: 
[[domains, split,  ], [split,  , categories], [ , categories, :], [categories, :, general], [:, general, tasks], [general, tasks, ,], [tasks, ,, formal], [,, formal, tasks], [formal, tasks, expert], [tasks, expert, tasks], [expert, tasks, .]]

>> Noun Phrases are: 
[These domains, three  categories, general tasks, formal tasks, expert tasks]

>> Named Entities are: 
[('three', 'CARDINAL')] 

------------------- Sentence 5 -------------------

 General tasks could include visual recognition, speech  recognition, natural language processing and translation. 


>> Tokens are: 
[ , General, tasks, include, visual, recognition, ,, speech,  , recognition, ,, natural, language, processing, translation, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('General', 'ADJ'), ('tasks', 'NOUN'), ('include', 'VERB'), ('visual', 'ADJ'), ('recognition', 'NOUN'), (',', 'PUNCT'), ('speech', 'NOUN'), (' ', 'SPACE'), ('recognition', 'NOUN'), (',', 'PUNCT'), ('natural', 'ADJ'), ('language', 'NOUN'), ('processing', 'NOUN'), ('translation', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'nmod'), ('General', 'amod'), ('tasks', 'nsubj'), ('include', 'ROOT'), ('visual', 'amod'), ('recognition', 'dobj'), (',', 'punct'), ('speech', 'conj'), (' ', 'punct'), ('recognition', 'conj'), (',', 'punct'), ('natural', 'amod'), ('language', 'compound'), ('processing', 'conj'), ('translation', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[ , General], [General, tasks], [tasks, include], [include, visual], [visual, recognition], [recognition, ,], [,, speech], [speech,  ], [ , recognition], [recognition, ,], [,, natural], [natural, language], [language, processing], [processing, translation], [translation, .]]

>> Trigrams: 
[[ , General, tasks], [General, tasks, include], [tasks, include, visual], [include, visual, recognition], [visual, recognition, ,], [recognition, ,, speech], [,, speech,  ], [speech,  , recognition], [ , recognition, ,], [recognition, ,, natural], [,, natural, language], [natural, language, processing], [language, processing, translation], [processing, translation, .]]

>> Noun Phrases are: 
[ General tasks, visual recognition, speech, recognition, natural language processing, translation]

>> Named Entities are: 
[] 

------------------- Sentence 6 -------------------

 Formal tasks are related to games where some theorem  and learning is involved. 


>> Tokens are: 
[ , Formal, tasks, related, games, theorem,  , learning, involved, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('Formal', 'ADJ'), ('tasks', 'NOUN'), ('related', 'VERB'), ('games', 'NOUN'), ('theorem', 'VERB'), (' ', 'SPACE'), ('learning', 'NOUN'), ('involved', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'dep'), ('Formal', 'amod'), ('tasks', 'nsubjpass'), ('related', 'ROOT'), ('games', 'pobj'), ('theorem', 'nsubjpass'), (' ', 'appos'), ('learning', 'conj'), ('involved', 'relcl'), ('.', 'punct')]

>> Bigrams: 
[[ , Formal], [Formal, tasks], [tasks, related], [related, games], [games, theorem], [theorem,  ], [ , learning], [learning, involved], [involved, .]]

>> Trigrams: 
[[ , Formal, tasks], [Formal, tasks, related], [tasks, related, games], [related, games, theorem], [games, theorem,  ], [theorem,  , learning], [ , learning, involved], [learning, involved, .]]

>> Noun Phrases are: 
[Formal tasks, games, learning]

>> Named Entities are: 
[] 

------------------- Sentence 7 -------------------

And expert tasks are those that  would otherwise be executed by a domain expert. 


>> Tokens are: 
[expert, tasks,  , executed, domain, expert, .] 

>> PoS Tags are: 
[('expert', 'NOUN'), ('tasks', 'NOUN'), (' ', 'SPACE'), ('executed', 'VERB'), ('domain', 'NOUN'), ('expert', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('expert', 'compound'), ('tasks', 'nsubj'), (' ', 'nsubjpass'), ('executed', 'relcl'), ('domain', 'compound'), ('expert', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[expert, tasks], [tasks,  ], [ , executed], [executed, domain], [domain, expert], [expert, .]]

>> Trigrams: 
[[expert, tasks,  ], [tasks,  , executed], [ , executed, domain], [executed, domain, expert], [domain, expert, .]]

>> Noun Phrases are: 
[expert tasks, a domain expert]

>> Named Entities are: 
[] 

------------------- Sentence 8 -------------------

(Think  of tasks such as diagnosing disease and engineering.2) 


>> Tokens are: 
[(, Think,  , tasks, diagnosing, disease, engineering.2, )] 

>> PoS Tags are: 
[('(', 'PUNCT'), ('Think', 'VERB'), (' ', 'SPACE'), ('tasks', 'NOUN'), ('diagnosing', 'VERB'), ('disease', 'NOUN'), ('engineering.2', 'PROPN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('(', 'punct'), ('Think', 'ROOT'), (' ', 'dobj'), ('tasks', 'pobj'), ('diagnosing', 'pcomp'), ('disease', 'dobj'), ('engineering.2', 'conj'), (')', 'punct')]

>> Bigrams: 
[[(, Think], [Think,  ], [ , tasks], [tasks, diagnosing], [diagnosing, disease], [disease, engineering.2], [engineering.2, )]]

>> Trigrams: 
[[(, Think,  ], [Think,  , tasks], [ , tasks, diagnosing], [tasks, diagnosing, disease], [diagnosing, disease, engineering.2], [disease, engineering.2, )]]

>> Noun Phrases are: 
[tasks, disease, engineering.2]

>> Named Entities are: 
[('engineering.2', 'PERSON')] 

------------------- Sentence 9 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 25 =================================

As already stated, AI was first named in 1955 and was  defined as the ability of machines to perform human-like  tasks. The term has gained popularity ever since its first  mention. However, there is still quite a bit of confusion about  the difference between AI, machine learning and deep  learning—but simply stated, AI encompasses the latter two.  

------------------- Sentence 1 -------------------

As already stated, AI was first named in 1955 and was  defined as the ability of machines to perform human-like  tasks. 


>> Tokens are: 
[stated, ,, AI, named, 1955,  , defined, ability, machines, perform, human, -, like,  , tasks, .] 

>> PoS Tags are: 
[('stated', 'VERB'), (',', 'PUNCT'), ('AI', 'PROPN'), ('named', 'VERB'), ('1955', 'NUM'), (' ', 'SPACE'), ('defined', 'VERB'), ('ability', 'NOUN'), ('machines', 'NOUN'), ('perform', 'VERB'), ('human', 'NOUN'), ('-', 'PUNCT'), ('like', 'ADJ'), (' ', 'SPACE'), ('tasks', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('stated', 'advcl'), (',', 'punct'), ('AI', 'nsubjpass'), ('named', 'ROOT'), ('1955', 'pobj'), (' ', 'nsubjpass'), ('defined', 'conj'), ('ability', 'pobj'), ('machines', 'pobj'), ('perform', 'acl'), ('human', 'npadvmod'), ('-', 'punct'), ('like', 'amod'), (' ', 'compound'), ('tasks', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[stated, ,], [,, AI], [AI, named], [named, 1955], [1955,  ], [ , defined], [defined, ability], [ability, machines], [machines, perform], [perform, human], [human, -], [-, like], [like,  ], [ , tasks], [tasks, .]]

>> Trigrams: 
[[stated, ,, AI], [,, AI, named], [AI, named, 1955], [named, 1955,  ], [1955,  , defined], [ , defined, ability], [defined, ability, machines], [ability, machines, perform], [machines, perform, human], [perform, human, -], [human, -, like], [-, like,  ], [like,  , tasks], [ , tasks, .]]

>> Noun Phrases are: 
[AI, the ability, machines, human-like  tasks]

>> Named Entities are: 
[('AI', 'ORG'), ('first', 'ORDINAL'), ('1955', 'DATE')] 

------------------- Sentence 2 -------------------

The term has gained popularity ever since its first  mention. 


>> Tokens are: 
[term, gained, popularity,  , mention, .] 

>> PoS Tags are: 
[('term', 'NOUN'), ('gained', 'VERB'), ('popularity', 'NOUN'), (' ', 'SPACE'), ('mention', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('term', 'nsubj'), ('gained', 'ROOT'), ('popularity', 'dobj'), (' ', 'compound'), ('mention', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[term, gained], [gained, popularity], [popularity,  ], [ , mention], [mention, .]]

>> Trigrams: 
[[term, gained, popularity], [gained, popularity,  ], [popularity,  , mention], [ , mention, .]]

>> Noun Phrases are: 
[The term, popularity, its first  mention]

>> Named Entities are: 
[('first', 'ORDINAL')] 

------------------- Sentence 3 -------------------

However, there is still quite a bit of confusion about  the difference between AI, machine learning and deep  learning—but simply stated, AI encompasses the latter two. 


>> Tokens are: 
[,, bit, confusion,  , difference, AI, ,, machine, learning, deep,  , learning, —, simply, stated, ,, AI, encompasses, .] 

>> PoS Tags are: 
[(',', 'PUNCT'), ('bit', 'NOUN'), ('confusion', 'NOUN'), (' ', 'SPACE'), ('difference', 'NOUN'), ('AI', 'PROPN'), (',', 'PUNCT'), ('machine', 'NOUN'), ('learning', 'NOUN'), ('deep', 'ADJ'), (' ', 'SPACE'), ('learning', 'VERB'), ('—', 'PUNCT'), ('simply', 'ADV'), ('stated', 'VERB'), (',', 'PUNCT'), ('AI', 'PROPN'), ('encompasses', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(',', 'punct'), ('bit', 'attr'), ('confusion', 'pobj'), (' ', 'pobj'), ('difference', 'appos'), ('AI', 'pobj'), (',', 'punct'), ('machine', 'compound'), ('learning', 'conj'), ('deep', 'amod'), (' ', 'npadvmod'), ('learning', 'conj'), ('—', 'punct'), ('simply', 'advmod'), ('stated', 'advcl'), (',', 'punct'), ('AI', 'nsubj'), ('encompasses', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[,, bit], [bit, confusion], [confusion,  ], [ , difference], [difference, AI], [AI, ,], [,, machine], [machine, learning], [learning, deep], [deep,  ], [ , learning], [learning, —], [—, simply], [simply, stated], [stated, ,], [,, AI], [AI, encompasses], [encompasses, .]]

>> Trigrams: 
[[,, bit, confusion], [bit, confusion,  ], [confusion,  , difference], [ , difference, AI], [difference, AI, ,], [AI, ,, machine], [,, machine, learning], [machine, learning, deep], [learning, deep,  ], [deep,  , learning], [ , learning, —], [learning, —, simply], [—, simply, stated], [simply, stated, ,], [stated, ,, AI], [,, AI, encompasses], [AI, encompasses, .]]

>> Noun Phrases are: 
[quite a bit, confusion, the difference, AI, machine learning, AI]

>> Named Entities are: 
[('AI', 'ORG'), ('AI', 'ORG'), ('two', 'CARDINAL')] 

------------------- Sentence 4 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 26 =================================

AI 

------------------- Sentence 1 -------------------

AI 


>> Tokens are: 
[AI] 

>> PoS Tags are: 
[('AI', 'NOUN')] 

>> Dependency Tags are: 
[('AI', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[AI]

>> Named Entities are: 
[('AI', 'ORG')] 


================================ Paragraph 27 =================================

Artificial intelligence A program that can sense, reason,  

------------------- Sentence 1 -------------------

Artificial intelligence A program that can sense, reason,   


>> Tokens are: 
[Artificial, intelligence, program, sense, ,, reason, ,,  ] 

>> PoS Tags are: 
[('Artificial', 'ADJ'), ('intelligence', 'NOUN'), ('program', 'NOUN'), ('sense', 'VERB'), (',', 'PUNCT'), ('reason', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Artificial', 'amod'), ('intelligence', 'compound'), ('program', 'ROOT'), ('sense', 'relcl'), (',', 'punct'), ('reason', 'dobj'), (',', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[Artificial, intelligence], [intelligence, program], [program, sense], [sense, ,], [,, reason], [reason, ,], [,,  ]]

>> Trigrams: 
[[Artificial, intelligence, program], [intelligence, program, sense], [program, sense, ,], [sense, ,, reason], [,, reason, ,], [reason, ,,  ]]

>> Noun Phrases are: 
[Artificial intelligence A program, reason]

>> Named Entities are: 
[] 


================================ Paragraph 28 =================================

act and adapt. 

------------------- Sentence 1 -------------------

act and adapt. 


>> Tokens are: 
[act, adapt, .] 

>> PoS Tags are: 
[('act', 'NOUN'), ('adapt', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('act', 'ROOT'), ('adapt', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[act, adapt], [adapt, .]]

>> Trigrams: 
[[act, adapt, .]]

>> Noun Phrases are: 
[act]

>> Named Entities are: 
[] 


================================ Paragraph 29 =================================

Machine learning Algorithms whose performance improve  

------------------- Sentence 1 -------------------

Machine learning Algorithms whose performance improve   


>> Tokens are: 
[Machine, learning, Algorithms, performance, improve,  ] 

>> PoS Tags are: 
[('Machine', 'NOUN'), ('learning', 'VERB'), ('Algorithms', 'PROPN'), ('performance', 'NOUN'), ('improve', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Machine', 'ROOT'), ('learning', 'acl'), ('Algorithms', 'dobj'), ('performance', 'nsubj'), ('improve', 'ccomp'), (' ', 'dobj')]

>> Bigrams: 
[[Machine, learning], [learning, Algorithms], [Algorithms, performance], [performance, improve], [improve,  ]]

>> Trigrams: 
[[Machine, learning, Algorithms], [learning, Algorithms, performance], [Algorithms, performance, improve], [performance, improve,  ]]

>> Noun Phrases are: 
[Machine, Algorithms, whose performance]

>> Named Entities are: 
[('Algorithms', 'PERSON')] 


================================ Paragraph 30 =================================

as they are exposed to more data over time. 

------------------- Sentence 1 -------------------

as they are exposed to more data over time. 


>> Tokens are: 
[exposed, data, time, .] 

>> PoS Tags are: 
[('exposed', 'VERB'), ('data', 'NOUN'), ('time', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('exposed', 'ROOT'), ('data', 'pobj'), ('time', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[exposed, data], [data, time], [time, .]]

>> Trigrams: 
[[exposed, data, time], [data, time, .]]

>> Noun Phrases are: 
[they, more data, time]

>> Named Entities are: 
[] 


================================ Paragraph 31 =================================

Deep learning Subset of machine learning in  

------------------- Sentence 1 -------------------

Deep learning Subset of machine learning in   


>> Tokens are: 
[Deep, learning, Subset, machine, learning,  ] 

>> PoS Tags are: 
[('Deep', 'ADJ'), ('learning', 'VERB'), ('Subset', 'PROPN'), ('machine', 'NOUN'), ('learning', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Deep', 'amod'), ('learning', 'amod'), ('Subset', 'ROOT'), ('machine', 'compound'), ('learning', 'pobj'), (' ', 'pobj')]

>> Bigrams: 
[[Deep, learning], [learning, Subset], [Subset, machine], [machine, learning], [learning,  ]]

>> Trigrams: 
[[Deep, learning, Subset], [learning, Subset, machine], [Subset, machine, learning], [machine, learning,  ]]

>> Noun Phrases are: 
[Deep learning Subset]

>> Named Entities are: 
[('Subset', 'PERSON')] 


================================ Paragraph 32 =================================

which multipayered neutral  networks learn from  vast amount of data. 

------------------- Sentence 1 -------------------

which multipayered neutral  networks learn from  vast amount of data. 


>> Tokens are: 
[multipayered, neutral,  , networks, learn,  , vast, data, .] 

>> PoS Tags are: 
[('multipayered', 'VERB'), ('neutral', 'ADJ'), (' ', 'SPACE'), ('networks', 'NOUN'), ('learn', 'VERB'), (' ', 'SPACE'), ('vast', 'ADJ'), ('data', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('multipayered', 'ROOT'), ('neutral', 'amod'), (' ', 'compound'), ('networks', 'dobj'), ('learn', 'advcl'), (' ', 'nmod'), ('vast', 'amod'), ('data', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[multipayered, neutral], [neutral,  ], [ , networks], [networks, learn], [learn,  ], [ , vast], [vast, data], [data, .]]

>> Trigrams: 
[[multipayered, neutral,  ], [neutral,  , networks], [ , networks, learn], [networks, learn,  ], [learn,  , vast], [ , vast, data], [vast, data, .]]

>> Noun Phrases are: 
[neutral  networks,  vast amount, data]

>> Named Entities are: 
[] 


================================ Paragraph 33 =================================

Figure 1: The distinction between AI, Machine Learning and Deep Learning. 

------------------- Sentence 1 -------------------

Figure 1: The distinction between AI, Machine Learning and Deep Learning. 


>> Tokens are: 
[Figure, 1, :, distinction, AI, ,, Machine, Learning, Deep, Learning, .] 

>> PoS Tags are: 
[('Figure', 'NOUN'), ('1', 'NUM'), (':', 'PUNCT'), ('distinction', 'NOUN'), ('AI', 'PROPN'), (',', 'PUNCT'), ('Machine', 'PROPN'), ('Learning', 'PROPN'), ('Deep', 'PROPN'), ('Learning', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Figure', 'ROOT'), ('1', 'nummod'), (':', 'punct'), ('distinction', 'appos'), ('AI', 'pobj'), (',', 'punct'), ('Machine', 'compound'), ('Learning', 'conj'), ('Deep', 'compound'), ('Learning', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[Figure, 1], [1, :], [:, distinction], [distinction, AI], [AI, ,], [,, Machine], [Machine, Learning], [Learning, Deep], [Deep, Learning], [Learning, .]]

>> Trigrams: 
[[Figure, 1, :], [1, :, distinction], [:, distinction, AI], [distinction, AI, ,], [AI, ,, Machine], [,, Machine, Learning], [Machine, Learning, Deep], [Learning, Deep, Learning], [Deep, Learning, .]]

>> Noun Phrases are: 
[Figure, The distinction, AI, Machine Learning, Deep Learning]

>> Named Entities are: 
[('1', 'CARDINAL'), ('AI', 'ORG'), ('Machine Learning', 'ORG')] 


================================ Paragraph 34 =================================

“Artificial Intelligence (AI) is a science and a set of  computational technologies that are inspired by—but  typically operate quite differently from—the ways people  use their nervous systems and bodies to sense, learn,  reason and take action.”3 Lately there has been a big rise in  the day-to-day use of machines powered by AI. These  machines are wired using cross-disciplinary approaches  based on mathematics, computer science, statistics,  psychology and more.4 Virtual assistants are becoming  more common, most of the web shops predict your  purchases, many companies make use of chatbots in their  customer service and many companies use algorithms to  detect fraud. These are just a few of the examples of how  AI is used every day. 

------------------- Sentence 1 -------------------

“Artificial Intelligence (AI) is a science and a set of  computational technologies that are inspired by—but  typically operate quite differently from—the ways people  use their nervous systems and bodies to sense, learn,  reason and take action.”3 


>> Tokens are: 
[“, Artificial, Intelligence, (, AI, ), science, set,  , computational, technologies, inspired, —,  , typically, operate, differently, —, ways, people,  , use, nervous, systems, bodies, sense, ,, learn, ,,  , reason, action, ., ”3] 

>> PoS Tags are: 
[('“', 'PUNCT'), ('Artificial', 'PROPN'), ('Intelligence', 'PROPN'), ('(', 'PUNCT'), ('AI', 'PROPN'), (')', 'PUNCT'), ('science', 'NOUN'), ('set', 'NOUN'), (' ', 'SPACE'), ('computational', 'ADJ'), ('technologies', 'NOUN'), ('inspired', 'VERB'), ('—', 'PUNCT'), (' ', 'SPACE'), ('typically', 'ADV'), ('operate', 'VERB'), ('differently', 'ADV'), ('—', 'PUNCT'), ('ways', 'NOUN'), ('people', 'NOUN'), (' ', 'SPACE'), ('use', 'VERB'), ('nervous', 'ADJ'), ('systems', 'NOUN'), ('bodies', 'NOUN'), ('sense', 'VERB'), (',', 'PUNCT'), ('learn', 'VERB'), (',', 'PUNCT'), (' ', 'SPACE'), ('reason', 'NOUN'), ('action', 'NOUN'), ('.', 'PUNCT'), ('”3', 'PUNCT')] 

>> Dependency Tags are: 
[('“', 'punct'), ('Artificial', 'compound'), ('Intelligence', 'nsubj'), ('(', 'punct'), ('AI', 'appos'), (')', 'punct'), ('science', 'attr'), ('set', 'conj'), (' ', 'pobj'), ('computational', 'amod'), ('technologies', 'pobj'), ('inspired', 'relcl'), ('—', 'punct'), (' ', 'nsubj'), ('typically', 'advmod'), ('operate', 'conj'), ('differently', 'advmod'), ('—', 'punct'), ('ways', 'pobj'), ('people', 'nsubj'), (' ', 'appos'), ('use', 'relcl'), ('nervous', 'amod'), ('systems', 'dobj'), ('bodies', 'conj'), ('sense', 'xcomp'), (',', 'punct'), ('learn', 'conj'), (',', 'punct'), (' ', 'dobj'), ('reason', 'dobj'), ('action', 'dobj'), ('.', 'punct'), ('”3', 'punct')]

>> Bigrams: 
[[“, Artificial], [Artificial, Intelligence], [Intelligence, (], [(, AI], [AI, )], [), science], [science, set], [set,  ], [ , computational], [computational, technologies], [technologies, inspired], [inspired, —], [—,  ], [ , typically], [typically, operate], [operate, differently], [differently, —], [—, ways], [ways, people], [people,  ], [ , use], [use, nervous], [nervous, systems], [systems, bodies], [bodies, sense], [sense, ,], [,, learn], [learn, ,], [,,  ], [ , reason], [reason, action], [action, .], [., ”3]]

>> Trigrams: 
[[“, Artificial, Intelligence], [Artificial, Intelligence, (], [Intelligence, (, AI], [(, AI, )], [AI, ), science], [), science, set], [science, set,  ], [set,  , computational], [ , computational, technologies], [computational, technologies, inspired], [technologies, inspired, —], [inspired, —,  ], [—,  , typically], [ , typically, operate], [typically, operate, differently], [operate, differently, —], [differently, —, ways], [—, ways, people], [ways, people,  ], [people,  , use], [ , use, nervous], [use, nervous, systems], [nervous, systems, bodies], [systems, bodies, sense], [bodies, sense, ,], [sense, ,, learn], [,, learn, ,], [learn, ,,  ], [,,  , reason], [ , reason, action], [reason, action, .], [action, ., ”3]]

>> Noun Phrases are: 
[Artificial Intelligence, (AI, a science, a set, computational technologies, the ways, people, their nervous systems, bodies, reason, action]

>> Named Entities are: 
[('Artificial Intelligence (AI', 'WORK_OF_ART')] 

------------------- Sentence 2 -------------------

Lately there has been a big rise in  the day-to-day use of machines powered by AI. 


>> Tokens are: 
[Lately, big, rise,  , day, -, -, day, use, machines, powered, AI, .] 

>> PoS Tags are: 
[('Lately', 'ADV'), ('big', 'ADJ'), ('rise', 'NOUN'), (' ', 'SPACE'), ('day', 'NOUN'), ('-', 'PUNCT'), ('-', 'PUNCT'), ('day', 'NOUN'), ('use', 'NOUN'), ('machines', 'NOUN'), ('powered', 'VERB'), ('AI', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Lately', 'advmod'), ('big', 'amod'), ('rise', 'attr'), (' ', 'pobj'), ('day', 'nmod'), ('-', 'punct'), ('-', 'punct'), ('day', 'pobj'), ('use', 'appos'), ('machines', 'pobj'), ('powered', 'acl'), ('AI', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Lately, big], [big, rise], [rise,  ], [ , day], [day, -], [-, -], [-, day], [day, use], [use, machines], [machines, powered], [powered, AI], [AI, .]]

>> Trigrams: 
[[Lately, big, rise], [big, rise,  ], [rise,  , day], [ , day, -], [day, -, -], [-, -, day], [-, day, use], [day, use, machines], [use, machines, powered], [machines, powered, AI], [powered, AI, .]]

>> Noun Phrases are: 
[a big rise, day, machines, AI]

>> Named Entities are: 
[('AI', 'ORG')] 

------------------- Sentence 3 -------------------

These  machines are wired using cross-disciplinary approaches  based on mathematics, computer science, statistics,  psychology and more.4 Virtual assistants are becoming  more common, most of the web shops predict your  purchases, many companies make use of chatbots in their  customer service and many companies use algorithms to  detect fraud. 


>> Tokens are: 
[ , machines, wired, cross, -, disciplinary, approaches,  , based, mathematics, ,, computer, science, ,, statistics, ,,  , psychology, more.4, Virtual, assistants,  , common, ,, web, shops, predict,  , purchases, ,, companies, use, chatbots,  , customer, service, companies, use, algorithms,  , detect, fraud, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('machines', 'NOUN'), ('wired', 'VERB'), ('cross', 'ADJ'), ('-', 'ADJ'), ('disciplinary', 'ADJ'), ('approaches', 'NOUN'), (' ', 'SPACE'), ('based', 'VERB'), ('mathematics', 'NOUN'), (',', 'PUNCT'), ('computer', 'NOUN'), ('science', 'NOUN'), (',', 'PUNCT'), ('statistics', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('psychology', 'NOUN'), ('more.4', 'PROPN'), ('Virtual', 'ADJ'), ('assistants', 'NOUN'), (' ', 'SPACE'), ('common', 'ADJ'), (',', 'PUNCT'), ('web', 'NOUN'), ('shops', 'NOUN'), ('predict', 'VERB'), (' ', 'SPACE'), ('purchases', 'NOUN'), (',', 'PUNCT'), ('companies', 'NOUN'), ('use', 'NOUN'), ('chatbots', 'NOUN'), (' ', 'SPACE'), ('customer', 'NOUN'), ('service', 'NOUN'), ('companies', 'NOUN'), ('use', 'VERB'), ('algorithms', 'NOUN'), (' ', 'SPACE'), ('detect', 'VERB'), ('fraud', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'compound'), ('machines', 'nsubjpass'), ('wired', 'ccomp'), ('cross', 'amod'), ('-', 'amod'), ('disciplinary', 'amod'), ('approaches', 'dobj'), (' ', 'appos'), ('based', 'acl'), ('mathematics', 'pobj'), (',', 'punct'), ('computer', 'compound'), ('science', 'conj'), (',', 'punct'), ('statistics', 'conj'), (',', 'punct'), (' ', 'compound'), ('psychology', 'conj'), ('more.4', 'amod'), ('Virtual', 'amod'), ('assistants', 'conj'), (' ', 'attr'), ('common', 'amod'), (',', 'punct'), ('web', 'compound'), ('shops', 'pobj'), ('predict', 'ccomp'), (' ', 'compound'), ('purchases', 'dobj'), (',', 'punct'), ('companies', 'nsubj'), ('use', 'dobj'), ('chatbots', 'pobj'), (' ', 'compound'), ('customer', 'compound'), ('service', 'pobj'), ('companies', 'nsubj'), ('use', 'conj'), ('algorithms', 'dobj'), (' ', 'pobj'), ('detect', 'xcomp'), ('fraud', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[ , machines], [machines, wired], [wired, cross], [cross, -], [-, disciplinary], [disciplinary, approaches], [approaches,  ], [ , based], [based, mathematics], [mathematics, ,], [,, computer], [computer, science], [science, ,], [,, statistics], [statistics, ,], [,,  ], [ , psychology], [psychology, more.4], [more.4, Virtual], [Virtual, assistants], [assistants,  ], [ , common], [common, ,], [,, web], [web, shops], [shops, predict], [predict,  ], [ , purchases], [purchases, ,], [,, companies], [companies, use], [use, chatbots], [chatbots,  ], [ , customer], [customer, service], [service, companies], [companies, use], [use, algorithms], [algorithms,  ], [ , detect], [detect, fraud], [fraud, .]]

>> Trigrams: 
[[ , machines, wired], [machines, wired, cross], [wired, cross, -], [cross, -, disciplinary], [-, disciplinary, approaches], [disciplinary, approaches,  ], [approaches,  , based], [ , based, mathematics], [based, mathematics, ,], [mathematics, ,, computer], [,, computer, science], [computer, science, ,], [science, ,, statistics], [,, statistics, ,], [statistics, ,,  ], [,,  , psychology], [ , psychology, more.4], [psychology, more.4, Virtual], [more.4, Virtual, assistants], [Virtual, assistants,  ], [assistants,  , common], [ , common, ,], [common, ,, web], [,, web, shops], [web, shops, predict], [shops, predict,  ], [predict,  , purchases], [ , purchases, ,], [purchases, ,, companies], [,, companies, use], [companies, use, chatbots], [use, chatbots,  ], [chatbots,  , customer], [ , customer, service], [customer, service, companies], [service, companies, use], [companies, use, algorithms], [use, algorithms,  ], [algorithms,  , detect], [ , detect, fraud], [detect, fraud, .]]

>> Noun Phrases are: 
[These  machines, cross-disciplinary approaches, mathematics, computer science, statistics,  psychology, more.4 Virtual assistants, the web shops, your  purchases, many companies, use, chatbots, their  customer service, many companies, algorithms, fraud]

>> Named Entities are: 
[('more.4 Virtual', 'PERSON')] 

------------------- Sentence 4 -------------------

These are just a few of the examples of how  AI is used every day. 


>> Tokens are: 
[examples,  , AI, day, .] 

>> PoS Tags are: 
[('examples', 'NOUN'), (' ', 'SPACE'), ('AI', 'PROPN'), ('day', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('examples', 'pobj'), (' ', 'compound'), ('AI', 'nsubjpass'), ('day', 'npadvmod'), ('.', 'punct')]

>> Bigrams: 
[[examples,  ], [ , AI], [AI, day], [day, .]]

>> Trigrams: 
[[examples,  , AI], [ , AI, day], [AI, day, .]]

>> Noun Phrases are: 
[the examples,  AI]

>> Named Entities are: 
[('AI', 'ORG')] 


================================ Paragraph 35 =================================

4     Beyond the hype: A guide to understanding and successfully implementing artificial intelligence within your business 

------------------- Sentence 1 -------------------

4     Beyond the hype: A guide to understanding and successfully implementing artificial intelligence within your business 


>> Tokens are: 
[4,     , hype, :, guide, understanding, successfully, implementing, artificial, intelligence, business] 

>> PoS Tags are: 
[('4', 'NUM'), ('    ', 'SPACE'), ('hype', 'NOUN'), (':', 'PUNCT'), ('guide', 'NOUN'), ('understanding', 'NOUN'), ('successfully', 'ADV'), ('implementing', 'VERB'), ('artificial', 'ADJ'), ('intelligence', 'NOUN'), ('business', 'NOUN')] 

>> Dependency Tags are: 
[('4', 'nummod'), ('    ', 'ROOT'), ('hype', 'pobj'), (':', 'punct'), ('guide', 'appos'), ('understanding', 'pobj'), ('successfully', 'advmod'), ('implementing', 'acl'), ('artificial', 'amod'), ('intelligence', 'dobj'), ('business', 'pobj')]

>> Bigrams: 
[[4,     ], [    , hype], [hype, :], [:, guide], [guide, understanding], [understanding, successfully], [successfully, implementing], [implementing, artificial], [artificial, intelligence], [intelligence, business]]

>> Trigrams: 
[[4,     , hype], [    , hype, :], [hype, :, guide], [:, guide, understanding], [guide, understanding, successfully], [understanding, successfully, implementing], [successfully, implementing, artificial], [implementing, artificial, intelligence], [artificial, intelligence, business]]

>> Noun Phrases are: 
[the hype, A guide, understanding, artificial intelligence, your business]

>> Named Entities are: 
[] 


================================ Paragraph 36 =================================

Machine learning  Machine learning is enabling a machine to learn from data  without explicitly programming it with rules, because it can  learn from the data it’s given. In essence, you could build  an AI consisting of many different rules and it would also be  able to be AI. But instead of programming all the rules, you  feed the algorithm data and let the algorithm adjust itself to  improve the accuracy of the algorithm. Traditional science  algorithms mainly process, whereas machine learning is  about applying an algorithm to fit a model to the data.  Examples of machine-learning algorithms that are used a  lot and that you might be familiar with are decision trees,  random forest, Bayesian networks, K-mean clustering,  neural networks, regression, artificial neural networks,  deep learning and reinforcement learning. Artificial neural  networks and deep learning have recently become more  common machine learning algorithms. 

------------------- Sentence 1 -------------------

Machine learning  Machine learning is enabling a machine to learn from data  without explicitly programming it with rules, because it can  learn from the data it’s given. 


>> Tokens are: 
[Machine, learning,  , Machine, learning, enabling, machine, learn, data,  , explicitly, programming, rules, ,,  , learn, data, given, .] 

>> PoS Tags are: 
[('Machine', 'NOUN'), ('learning', 'VERB'), (' ', 'SPACE'), ('Machine', 'PROPN'), ('learning', 'NOUN'), ('enabling', 'VERB'), ('machine', 'NOUN'), ('learn', 'VERB'), ('data', 'NOUN'), (' ', 'SPACE'), ('explicitly', 'ADV'), ('programming', 'VERB'), ('rules', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('learn', 'VERB'), ('data', 'NOUN'), ('given', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Machine', 'nsubj'), ('learning', 'ROOT'), (' ', 'compound'), ('Machine', 'compound'), ('learning', 'nsubj'), ('enabling', 'ccomp'), ('machine', 'dobj'), ('learn', 'relcl'), ('data', 'compound'), (' ', 'pobj'), ('explicitly', 'advmod'), ('programming', 'pcomp'), ('rules', 'pobj'), (',', 'punct'), (' ', 'nsubj'), ('learn', 'advcl'), ('data', 'pobj'), ('given', 'relcl'), ('.', 'punct')]

>> Bigrams: 
[[Machine, learning], [learning,  ], [ , Machine], [Machine, learning], [learning, enabling], [enabling, machine], [machine, learn], [learn, data], [data,  ], [ , explicitly], [explicitly, programming], [programming, rules], [rules, ,], [,,  ], [ , learn], [learn, data], [data, given], [given, .]]

>> Trigrams: 
[[Machine, learning,  ], [learning,  , Machine], [ , Machine, learning], [Machine, learning, enabling], [learning, enabling, machine], [enabling, machine, learn], [machine, learn, data], [learn, data,  ], [data,  , explicitly], [ , explicitly, programming], [explicitly, programming, rules], [programming, rules, ,], [rules, ,,  ], [,,  , learn], [ , learn, data], [learn, data, given], [data, given, .]]

>> Noun Phrases are: 
[Machine,  Machine learning, a machine, it, rules, it, the data, it]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

In essence, you could build  an AI consisting of many different rules and it would also be  able to be AI. 


>> Tokens are: 
[essence, ,, build,  , AI, consisting, different, rules,  , able, AI, .] 

>> PoS Tags are: 
[('essence', 'NOUN'), (',', 'PUNCT'), ('build', 'VERB'), (' ', 'SPACE'), ('AI', 'PROPN'), ('consisting', 'VERB'), ('different', 'ADJ'), ('rules', 'NOUN'), (' ', 'SPACE'), ('able', 'ADJ'), ('AI', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('essence', 'pobj'), (',', 'punct'), ('build', 'ROOT'), (' ', 'dative'), ('AI', 'dobj'), ('consisting', 'acl'), ('different', 'amod'), ('rules', 'pobj'), (' ', 'attr'), ('able', 'acomp'), ('AI', 'attr'), ('.', 'punct')]

>> Bigrams: 
[[essence, ,], [,, build], [build,  ], [ , AI], [AI, consisting], [consisting, different], [different, rules], [rules,  ], [ , able], [able, AI], [AI, .]]

>> Trigrams: 
[[essence, ,, build], [,, build,  ], [build,  , AI], [ , AI, consisting], [AI, consisting, different], [consisting, different, rules], [different, rules,  ], [rules,  , able], [ , able, AI], [able, AI, .]]

>> Noun Phrases are: 
[essence, you, an AI, many different rules, it, AI]

>> Named Entities are: 
[('AI', 'ORG'), ('AI', 'ORG')] 

------------------- Sentence 3 -------------------

But instead of programming all the rules, you  feed the algorithm data and let the algorithm adjust itself to  improve the accuracy of the algorithm. 


>> Tokens are: 
[instead, programming, rules, ,,  , feed, algorithm, data, let, algorithm, adjust,  , improve, accuracy, algorithm, .] 

>> PoS Tags are: 
[('instead', 'ADV'), ('programming', 'VERB'), ('rules', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('feed', 'VERB'), ('algorithm', 'NOUN'), ('data', 'NOUN'), ('let', 'VERB'), ('algorithm', 'NOUN'), ('adjust', 'VERB'), (' ', 'SPACE'), ('improve', 'VERB'), ('accuracy', 'NOUN'), ('algorithm', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('instead', 'advmod'), ('programming', 'pcomp'), ('rules', 'dobj'), (',', 'punct'), (' ', 'appos'), ('feed', 'ROOT'), ('algorithm', 'compound'), ('data', 'dobj'), ('let', 'conj'), ('algorithm', 'nsubj'), ('adjust', 'ccomp'), (' ', 'pobj'), ('improve', 'ccomp'), ('accuracy', 'dobj'), ('algorithm', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[instead, programming], [programming, rules], [rules, ,], [,,  ], [ , feed], [feed, algorithm], [algorithm, data], [data, let], [let, algorithm], [algorithm, adjust], [adjust,  ], [ , improve], [improve, accuracy], [accuracy, algorithm], [algorithm, .]]

>> Trigrams: 
[[instead, programming, rules], [programming, rules, ,], [rules, ,,  ], [,,  , feed], [ , feed, algorithm], [feed, algorithm, data], [algorithm, data, let], [data, let, algorithm], [let, algorithm, adjust], [algorithm, adjust,  ], [adjust,  , improve], [ , improve, accuracy], [improve, accuracy, algorithm], [accuracy, algorithm, .]]

>> Noun Phrases are: 
[all the rules, you, the algorithm data, the algorithm, itself, the accuracy, the algorithm]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

Traditional science  algorithms mainly process, whereas machine learning is  about applying an algorithm to fit a model to the data. 


>> Tokens are: 
[Traditional, science,  , algorithms, mainly, process, ,, machine, learning,  , applying, algorithm, fit, model, data, .] 

>> PoS Tags are: 
[('Traditional', 'ADJ'), ('science', 'NOUN'), (' ', 'SPACE'), ('algorithms', 'NOUN'), ('mainly', 'ADV'), ('process', 'NOUN'), (',', 'PUNCT'), ('machine', 'NOUN'), ('learning', 'NOUN'), (' ', 'SPACE'), ('applying', 'VERB'), ('algorithm', 'NOUN'), ('fit', 'VERB'), ('model', 'NOUN'), ('data', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Traditional', 'amod'), ('science', 'compound'), (' ', 'nmod'), ('algorithms', 'nsubj'), ('mainly', 'advmod'), ('process', 'ROOT'), (',', 'punct'), ('machine', 'compound'), ('learning', 'nsubj'), (' ', 'attr'), ('applying', 'pcomp'), ('algorithm', 'dobj'), ('fit', 'advcl'), ('model', 'dobj'), ('data', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Traditional, science], [science,  ], [ , algorithms], [algorithms, mainly], [mainly, process], [process, ,], [,, machine], [machine, learning], [learning,  ], [ , applying], [applying, algorithm], [algorithm, fit], [fit, model], [model, data], [data, .]]

>> Trigrams: 
[[Traditional, science,  ], [science,  , algorithms], [ , algorithms, mainly], [algorithms, mainly, process], [mainly, process, ,], [process, ,, machine], [,, machine, learning], [machine, learning,  ], [learning,  , applying], [ , applying, algorithm], [applying, algorithm, fit], [algorithm, fit, model], [fit, model, data], [model, data, .]]

>> Noun Phrases are: 
[Traditional science  algorithms, machine learning, an algorithm, a model, the data]

>> Named Entities are: 
[] 

------------------- Sentence 5 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 6 -------------------

Examples of machine-learning algorithms that are used a  lot and that you might be familiar with are decision trees,  random forest, Bayesian networks, K-mean clustering,  neural networks, regression, artificial neural networks,  deep learning and reinforcement learning. 


>> Tokens are: 
[Examples, machine, -, learning, algorithms,  , lot, familiar, decision, trees, ,,  , random, forest, ,, Bayesian, networks, ,, K, -, mean, clustering, ,,  , neural, networks, ,, regression, ,, artificial, neural, networks, ,,  , deep, learning, reinforcement, learning, .] 

>> PoS Tags are: 
[('Examples', 'NOUN'), ('machine', 'NOUN'), ('-', 'PUNCT'), ('learning', 'VERB'), ('algorithms', 'NOUN'), (' ', 'SPACE'), ('lot', 'NOUN'), ('familiar', 'ADJ'), ('decision', 'NOUN'), ('trees', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('random', 'ADJ'), ('forest', 'NOUN'), (',', 'PUNCT'), ('Bayesian', 'ADJ'), ('networks', 'NOUN'), (',', 'PUNCT'), ('K', 'PROPN'), ('-', 'PUNCT'), ('mean', 'PROPN'), ('clustering', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('neural', 'ADJ'), ('networks', 'NOUN'), (',', 'PUNCT'), ('regression', 'NOUN'), (',', 'PUNCT'), ('artificial', 'ADJ'), ('neural', 'ADJ'), ('networks', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('deep', 'ADJ'), ('learning', 'NOUN'), ('reinforcement', 'NOUN'), ('learning', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Examples', 'nsubj'), ('machine', 'npadvmod'), ('-', 'punct'), ('learning', 'amod'), ('algorithms', 'pobj'), (' ', 'compound'), ('lot', 'dobj'), ('familiar', 'acomp'), ('decision', 'compound'), ('trees', 'attr'), (',', 'punct'), (' ', 'nmod'), ('random', 'amod'), ('forest', 'conj'), (',', 'punct'), ('Bayesian', 'compound'), ('networks', 'conj'), (',', 'punct'), ('K', 'compound'), ('-', 'punct'), ('mean', 'amod'), ('clustering', 'conj'), (',', 'punct'), (' ', 'nmod'), ('neural', 'amod'), ('networks', 'conj'), (',', 'punct'), ('regression', 'conj'), (',', 'punct'), ('artificial', 'amod'), ('neural', 'amod'), ('networks', 'conj'), (',', 'punct'), (' ', 'nmod'), ('deep', 'amod'), ('learning', 'attr'), ('reinforcement', 'compound'), ('learning', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[Examples, machine], [machine, -], [-, learning], [learning, algorithms], [algorithms,  ], [ , lot], [lot, familiar], [familiar, decision], [decision, trees], [trees, ,], [,,  ], [ , random], [random, forest], [forest, ,], [,, Bayesian], [Bayesian, networks], [networks, ,], [,, K], [K, -], [-, mean], [mean, clustering], [clustering, ,], [,,  ], [ , neural], [neural, networks], [networks, ,], [,, regression], [regression, ,], [,, artificial], [artificial, neural], [neural, networks], [networks, ,], [,,  ], [ , deep], [deep, learning], [learning, reinforcement], [reinforcement, learning], [learning, .]]

>> Trigrams: 
[[Examples, machine, -], [machine, -, learning], [-, learning, algorithms], [learning, algorithms,  ], [algorithms,  , lot], [ , lot, familiar], [lot, familiar, decision], [familiar, decision, trees], [decision, trees, ,], [trees, ,,  ], [,,  , random], [ , random, forest], [random, forest, ,], [forest, ,, Bayesian], [,, Bayesian, networks], [Bayesian, networks, ,], [networks, ,, K], [,, K, -], [K, -, mean], [-, mean, clustering], [mean, clustering, ,], [clustering, ,,  ], [,,  , neural], [ , neural, networks], [neural, networks, ,], [networks, ,, regression], [,, regression, ,], [regression, ,, artificial], [,, artificial, neural], [artificial, neural, networks], [neural, networks, ,], [networks, ,,  ], [,,  , deep], [ , deep, learning], [deep, learning, reinforcement], [learning, reinforcement, learning], [reinforcement, learning, .]]

>> Noun Phrases are: 
[Examples, machine-learning algorithms, a  lot, you, decision trees,  random forest, Bayesian networks, K-mean clustering,  neural networks, regression, artificial neural networks,  deep learning, reinforcement learning]

>> Named Entities are: 
[('Bayesian', 'NORP')] 

------------------- Sentence 7 -------------------

Artificial neural  networks and deep learning have recently become more  common machine learning algorithms. 


>> Tokens are: 
[Artificial, neural,  , networks, deep, learning, recently,  , common, machine, learning, algorithms, .] 

>> PoS Tags are: 
[('Artificial', 'ADJ'), ('neural', 'ADJ'), (' ', 'SPACE'), ('networks', 'NOUN'), ('deep', 'ADJ'), ('learning', 'NOUN'), ('recently', 'ADV'), (' ', 'SPACE'), ('common', 'ADJ'), ('machine', 'NOUN'), ('learning', 'VERB'), ('algorithms', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Artificial', 'amod'), ('neural', 'amod'), (' ', 'compound'), ('networks', 'nsubj'), ('deep', 'amod'), ('learning', 'conj'), ('recently', 'advmod'), (' ', 'nmod'), ('common', 'amod'), ('machine', 'compound'), ('learning', 'advcl'), ('algorithms', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Artificial, neural], [neural,  ], [ , networks], [networks, deep], [deep, learning], [learning, recently], [recently,  ], [ , common], [common, machine], [machine, learning], [learning, algorithms], [algorithms, .]]

>> Trigrams: 
[[Artificial, neural,  ], [neural,  , networks], [ , networks, deep], [networks, deep, learning], [deep, learning, recently], [learning, recently,  ], [recently,  , common], [ , common, machine], [common, machine, learning], [machine, learning, algorithms], [learning, algorithms, .]]

>> Noun Phrases are: 
[Artificial neural  networks, deep learning, algorithms]

>> Named Entities are: 
[] 


================================ Paragraph 37 =================================

Implementation examples would be predicting stock market  prices or predicting whether a customer will churn from  your company.  

------------------- Sentence 1 -------------------

Implementation examples would be predicting stock market  prices or predicting whether a customer will churn from  your company. 


>> Tokens are: 
[Implementation, examples, predicting, stock, market,  , prices, predicting, customer, churn,  , company, .] 

>> PoS Tags are: 
[('Implementation', 'NOUN'), ('examples', 'NOUN'), ('predicting', 'VERB'), ('stock', 'NOUN'), ('market', 'NOUN'), (' ', 'SPACE'), ('prices', 'NOUN'), ('predicting', 'VERB'), ('customer', 'NOUN'), ('churn', 'VERB'), (' ', 'SPACE'), ('company', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Implementation', 'compound'), ('examples', 'nsubj'), ('predicting', 'ROOT'), ('stock', 'compound'), ('market', 'dobj'), (' ', 'prep'), ('prices', 'pobj'), ('predicting', 'conj'), ('customer', 'nsubj'), ('churn', 'ccomp'), (' ', 'pobj'), ('company', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Implementation, examples], [examples, predicting], [predicting, stock], [stock, market], [market,  ], [ , prices], [prices, predicting], [predicting, customer], [customer, churn], [churn,  ], [ , company], [company, .]]

>> Trigrams: 
[[Implementation, examples, predicting], [examples, predicting, stock], [predicting, stock, market], [stock, market,  ], [market,  , prices], [ , prices, predicting], [prices, predicting, customer], [predicting, customer, churn], [customer, churn,  ], [churn,  , company], [ , company, .]]

>> Noun Phrases are: 
[Implementation examples, stock market, prices, a customer, your company]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 38 =================================

Deep learning  Deep learning (DL) is a relatively new set of methods that  is changing machine learning in fundamental ways. DL isn’t  an algorithm per se, but rather a family of algorithms that  implements deep networks (many layers). These networks  are so deep that new methods of computation, such as  graphics processing units (GPUs), are required to train  them, in addition to clusters of compute nodes.  

------------------- Sentence 1 -------------------

Deep learning   


>> Tokens are: 
[Deep, learning,  ] 

>> PoS Tags are: 
[('Deep', 'ADJ'), ('learning', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Deep', 'amod'), ('learning', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[Deep, learning], [learning,  ]]

>> Trigrams: 
[[Deep, learning,  ]]

>> Noun Phrases are: 
[Deep learning]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Deep learning (DL) is a relatively new set of methods that  is changing machine learning in fundamental ways. 


>> Tokens are: 
[Deep, learning, (, DL, ), relatively, new, set, methods,  , changing, machine, learning, fundamental, ways, .] 

>> PoS Tags are: 
[('Deep', 'ADJ'), ('learning', 'NOUN'), ('(', 'PUNCT'), ('DL', 'PROPN'), (')', 'PUNCT'), ('relatively', 'ADV'), ('new', 'ADJ'), ('set', 'NOUN'), ('methods', 'NOUN'), (' ', 'SPACE'), ('changing', 'VERB'), ('machine', 'NOUN'), ('learning', 'NOUN'), ('fundamental', 'ADJ'), ('ways', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Deep', 'amod'), ('learning', 'nsubj'), ('(', 'punct'), ('DL', 'appos'), (')', 'punct'), ('relatively', 'advmod'), ('new', 'amod'), ('set', 'attr'), ('methods', 'pobj'), (' ', 'nsubj'), ('changing', 'relcl'), ('machine', 'compound'), ('learning', 'dobj'), ('fundamental', 'amod'), ('ways', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Deep, learning], [learning, (], [(, DL], [DL, )], [), relatively], [relatively, new], [new, set], [set, methods], [methods,  ], [ , changing], [changing, machine], [machine, learning], [learning, fundamental], [fundamental, ways], [ways, .]]

>> Trigrams: 
[[Deep, learning, (], [learning, (, DL], [(, DL, )], [DL, ), relatively], [), relatively, new], [relatively, new, set], [new, set, methods], [set, methods,  ], [methods,  , changing], [ , changing, machine], [changing, machine, learning], [machine, learning, fundamental], [learning, fundamental, ways], [fundamental, ways, .]]

>> Noun Phrases are: 
[Deep learning, (DL, a relatively new set, methods, machine learning, fundamental ways]

>> Named Entities are: 
[('Deep learning (', 'WORK_OF_ART')] 

------------------- Sentence 3 -------------------

DL isn’t  an algorithm per se, but rather a family of algorithms that  implements deep networks (many layers). 


>> Tokens are: 
[DL,  , algorithm, se, ,, family, algorithms,  , implements, deep, networks, (, layers, ), .] 

>> PoS Tags are: 
[('DL', 'PROPN'), (' ', 'SPACE'), ('algorithm', 'NOUN'), ('se', 'X'), (',', 'PUNCT'), ('family', 'NOUN'), ('algorithms', 'NOUN'), (' ', 'SPACE'), ('implements', 'VERB'), ('deep', 'ADJ'), ('networks', 'NOUN'), ('(', 'PUNCT'), ('layers', 'NOUN'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('DL', 'nsubj'), (' ', 'attr'), ('algorithm', 'attr'), ('se', 'advmod'), (',', 'punct'), ('family', 'conj'), ('algorithms', 'pobj'), (' ', 'nsubj'), ('implements', 'relcl'), ('deep', 'amod'), ('networks', 'dobj'), ('(', 'punct'), ('layers', 'npadvmod'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[DL,  ], [ , algorithm], [algorithm, se], [se, ,], [,, family], [family, algorithms], [algorithms,  ], [ , implements], [implements, deep], [deep, networks], [networks, (], [(, layers], [layers, )], [), .]]

>> Trigrams: 
[[DL,  , algorithm], [ , algorithm, se], [algorithm, se, ,], [se, ,, family], [,, family, algorithms], [family, algorithms,  ], [algorithms,  , implements], [ , implements, deep], [implements, deep, networks], [deep, networks, (], [networks, (, layers], [(, layers, )], [layers, ), .]]

>> Noun Phrases are: 
[DL, an algorithm, a family, algorithms, deep networks]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

These networks  are so deep that new methods of computation, such as  graphics processing units (GPUs), are required to train  them, in addition to clusters of compute nodes. 


>> Tokens are: 
[networks,  , deep, new, methods, computation, ,,  , graphics, processing, units, (, GPUs, ), ,, required, train,  , ,, addition, clusters, compute, nodes, .] 

>> PoS Tags are: 
[('networks', 'NOUN'), (' ', 'SPACE'), ('deep', 'ADJ'), ('new', 'ADJ'), ('methods', 'NOUN'), ('computation', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('graphics', 'NOUN'), ('processing', 'NOUN'), ('units', 'NOUN'), ('(', 'PUNCT'), ('GPUs', 'NOUN'), (')', 'PUNCT'), (',', 'PUNCT'), ('required', 'VERB'), ('train', 'VERB'), (' ', 'SPACE'), (',', 'PUNCT'), ('addition', 'NOUN'), ('clusters', 'NOUN'), ('compute', 'ADJ'), ('nodes', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('networks', 'nsubj'), (' ', 'nsubj'), ('deep', 'acomp'), ('new', 'amod'), ('methods', 'nsubjpass'), ('computation', 'pobj'), (',', 'punct'), (' ', 'nmod'), ('graphics', 'compound'), ('processing', 'compound'), ('units', 'pobj'), ('(', 'punct'), ('GPUs', 'appos'), (')', 'punct'), (',', 'punct'), ('required', 'ccomp'), ('train', 'xcomp'), (' ', 'dobj'), (',', 'punct'), ('addition', 'pobj'), ('clusters', 'pobj'), ('compute', 'amod'), ('nodes', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[networks,  ], [ , deep], [deep, new], [new, methods], [methods, computation], [computation, ,], [,,  ], [ , graphics], [graphics, processing], [processing, units], [units, (], [(, GPUs], [GPUs, )], [), ,], [,, required], [required, train], [train,  ], [ , ,], [,, addition], [addition, clusters], [clusters, compute], [compute, nodes], [nodes, .]]

>> Trigrams: 
[[networks,  , deep], [ , deep, new], [deep, new, methods], [new, methods, computation], [methods, computation, ,], [computation, ,,  ], [,,  , graphics], [ , graphics, processing], [graphics, processing, units], [processing, units, (], [units, (, GPUs], [(, GPUs, )], [GPUs, ), ,], [), ,, required], [,, required, train], [required, train,  ], [train,  , ,], [ , ,, addition], [,, addition, clusters], [addition, clusters, compute], [clusters, compute, nodes], [compute, nodes, .]]

>> Noun Phrases are: 
[These networks, new methods, computation,  graphics processing units, GPUs, them, addition, clusters, compute nodes]

>> Named Entities are: 
[] 

------------------- Sentence 5 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 39 =================================

DL works very well with large amounts data, and whenever   a problem is too complex to understand and engineer  features (due to unstructured data, for instance). DL almost  always outperforms the other types of algorithms when it  comes to image classification, natural language processing  and speech recognition. An example would be recognizing  melanoma or conducting machine translation, which was  not possible using previous techniques.  

------------------- Sentence 1 -------------------

DL works very well with large amounts data, and whenever   a problem is too complex to understand and engineer  features (due to unstructured data, for instance). 


>> Tokens are: 
[DL, works, large, amounts, data, ,,   , problem, complex, understand, engineer,  , features, (, unstructured, data, ,, instance, ), .] 

>> PoS Tags are: 
[('DL', 'PROPN'), ('works', 'VERB'), ('large', 'ADJ'), ('amounts', 'NOUN'), ('data', 'NOUN'), (',', 'PUNCT'), ('  ', 'SPACE'), ('problem', 'NOUN'), ('complex', 'ADJ'), ('understand', 'VERB'), ('engineer', 'VERB'), (' ', 'SPACE'), ('features', 'NOUN'), ('(', 'PUNCT'), ('unstructured', 'ADJ'), ('data', 'NOUN'), (',', 'PUNCT'), ('instance', 'NOUN'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('DL', 'nsubj'), ('works', 'ROOT'), ('large', 'amod'), ('amounts', 'compound'), ('data', 'pobj'), (',', 'punct'), ('  ', 'nsubj'), ('problem', 'nsubj'), ('complex', 'acomp'), ('understand', 'xcomp'), ('engineer', 'conj'), (' ', 'compound'), ('features', 'dobj'), ('(', 'punct'), ('unstructured', 'amod'), ('data', 'pobj'), (',', 'punct'), ('instance', 'pobj'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[DL, works], [works, large], [large, amounts], [amounts, data], [data, ,], [,,   ], [  , problem], [problem, complex], [complex, understand], [understand, engineer], [engineer,  ], [ , features], [features, (], [(, unstructured], [unstructured, data], [data, ,], [,, instance], [instance, )], [), .]]

>> Trigrams: 
[[DL, works, large], [works, large, amounts], [large, amounts, data], [amounts, data, ,], [data, ,,   ], [,,   , problem], [  , problem, complex], [problem, complex, understand], [complex, understand, engineer], [understand, engineer,  ], [engineer,  , features], [ , features, (], [features, (, unstructured], [(, unstructured, data], [unstructured, data, ,], [data, ,, instance], [,, instance, )], [instance, ), .]]

>> Noun Phrases are: 
[DL, large amounts data, a problem,  features, unstructured data, instance]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

DL almost  always outperforms the other types of algorithms when it  comes to image classification, natural language processing  and speech recognition. 


>> Tokens are: 
[DL,  , outperforms, types, algorithms,  , comes, image, classification, ,, natural, language, processing,  , speech, recognition, .] 

>> PoS Tags are: 
[('DL', 'PROPN'), (' ', 'SPACE'), ('outperforms', 'VERB'), ('types', 'NOUN'), ('algorithms', 'NOUN'), (' ', 'SPACE'), ('comes', 'VERB'), ('image', 'NOUN'), ('classification', 'NOUN'), (',', 'PUNCT'), ('natural', 'ADJ'), ('language', 'NOUN'), ('processing', 'NOUN'), (' ', 'SPACE'), ('speech', 'NOUN'), ('recognition', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('DL', 'nsubj'), (' ', 'nsubj'), ('outperforms', 'ROOT'), ('types', 'dobj'), ('algorithms', 'pobj'), (' ', 'appos'), ('comes', 'advcl'), ('image', 'compound'), ('classification', 'pobj'), (',', 'punct'), ('natural', 'amod'), ('language', 'compound'), ('processing', 'compound'), (' ', 'conj'), ('speech', 'compound'), ('recognition', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[DL,  ], [ , outperforms], [outperforms, types], [types, algorithms], [algorithms,  ], [ , comes], [comes, image], [image, classification], [classification, ,], [,, natural], [natural, language], [language, processing], [processing,  ], [ , speech], [speech, recognition], [recognition, .]]

>> Trigrams: 
[[DL,  , outperforms], [ , outperforms, types], [outperforms, types, algorithms], [types, algorithms,  ], [algorithms,  , comes], [ , comes, image], [comes, image, classification], [image, classification, ,], [classification, ,, natural], [,, natural, language], [natural, language, processing], [language, processing,  ], [processing,  , speech], [ , speech, recognition], [speech, recognition, .]]

>> Noun Phrases are: 
[DL, the other types, algorithms, it, image classification, speech recognition]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

An example would be recognizing  melanoma or conducting machine translation, which was  not possible using previous techniques.   


>> Tokens are: 
[example, recognizing,  , melanoma, conducting, machine, translation, ,,  , possible, previous, techniques, .,  ] 

>> PoS Tags are: 
[('example', 'NOUN'), ('recognizing', 'VERB'), (' ', 'SPACE'), ('melanoma', 'NOUN'), ('conducting', 'VERB'), ('machine', 'NOUN'), ('translation', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('possible', 'ADJ'), ('previous', 'ADJ'), ('techniques', 'NOUN'), ('.', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('example', 'nsubj'), ('recognizing', 'ROOT'), (' ', 'compound'), ('melanoma', 'dobj'), ('conducting', 'conj'), ('machine', 'compound'), ('translation', 'dobj'), (',', 'punct'), (' ', 'attr'), ('possible', 'acomp'), ('previous', 'amod'), ('techniques', 'dobj'), ('.', 'punct'), (' ', 'dobj')]

>> Bigrams: 
[[example, recognizing], [recognizing,  ], [ , melanoma], [melanoma, conducting], [conducting, machine], [machine, translation], [translation, ,], [,,  ], [ , possible], [possible, previous], [previous, techniques], [techniques, .], [.,  ]]

>> Trigrams: 
[[example, recognizing,  ], [recognizing,  , melanoma], [ , melanoma, conducting], [melanoma, conducting, machine], [conducting, machine, translation], [machine, translation, ,], [translation, ,,  ], [,,  , possible], [ , possible, previous], [possible, previous, techniques], [previous, techniques, .], [techniques, .,  ]]

>> Noun Phrases are: 
[An example,  melanoma, machine translation, previous techniques]

>> Named Entities are: 
[] 


================================ Paragraph 40 =================================

Figure 2: Deep neural network with five layers.5 

------------------- Sentence 1 -------------------

Figure 2: Deep neural network with five layers.5 


>> Tokens are: 
[Figure, 2, :, Deep, neural, network, layers.5] 

>> PoS Tags are: 
[('Figure', 'NOUN'), ('2', 'NUM'), (':', 'PUNCT'), ('Deep', 'ADJ'), ('neural', 'ADJ'), ('network', 'NOUN'), ('layers.5', 'PROPN')] 

>> Dependency Tags are: 
[('Figure', 'ROOT'), ('2', 'nummod'), (':', 'punct'), ('Deep', 'amod'), ('neural', 'amod'), ('network', 'appos'), ('layers.5', 'pobj')]

>> Bigrams: 
[[Figure, 2], [2, :], [:, Deep], [Deep, neural], [neural, network], [network, layers.5]]

>> Trigrams: 
[[Figure, 2, :], [2, :, Deep], [:, Deep, neural], [Deep, neural, network], [neural, network, layers.5]]

>> Noun Phrases are: 
[Figure, Deep neural network, five layers.5]

>> Named Entities are: 
[('2', 'CARDINAL'), ('five', 'CARDINAL')] 


================================ Paragraph 41 =================================

Currently, the larger the neural network and the more data  that can be added to it, the better the performance a neural  network can provide. DL is very powerful, but it has a couple  of drawbacks. It’s almost impossible to determine why the  system came to a certain conclusion. This is called the  “black box” problem, though there are now many available  techniques that can increase insights in the inner workings   of the DL model. Also, deep learning often requires extensive  training times, a lot of data and specific hardware  requirements, and it’s not easy to acquire the specific  skills needed to develop a new DL solution to a problem. 

------------------- Sentence 1 -------------------

Currently, the larger the neural network and the more data  that can be added to it, the better the performance a neural  network can provide. 


>> Tokens are: 
[Currently, ,, larger, neural, network, data,  , added, ,, better, performance, neural,  , network, provide, .] 

>> PoS Tags are: 
[('Currently', 'ADV'), (',', 'PUNCT'), ('larger', 'ADJ'), ('neural', 'ADJ'), ('network', 'NOUN'), ('data', 'NOUN'), (' ', 'SPACE'), ('added', 'VERB'), (',', 'PUNCT'), ('better', 'ADJ'), ('performance', 'NOUN'), ('neural', 'ADJ'), (' ', 'SPACE'), ('network', 'NOUN'), ('provide', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Currently', 'advmod'), (',', 'punct'), ('larger', 'amod'), ('neural', 'amod'), ('network', 'nsubj'), ('data', 'conj'), (' ', 'appos'), ('added', 'relcl'), (',', 'punct'), ('better', 'amod'), ('performance', 'appos'), ('neural', 'amod'), (' ', 'compound'), ('network', 'nsubj'), ('provide', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Currently, ,], [,, larger], [larger, neural], [neural, network], [network, data], [data,  ], [ , added], [added, ,], [,, better], [better, performance], [performance, neural], [neural,  ], [ , network], [network, provide], [provide, .]]

>> Trigrams: 
[[Currently, ,, larger], [,, larger, neural], [larger, neural, network], [neural, network, data], [network, data,  ], [data,  , added], [ , added, ,], [added, ,, better], [,, better, performance], [better, performance, neural], [performance, neural,  ], [neural,  , network], [ , network, provide], [network, provide, .]]

>> Noun Phrases are: 
[the larger the neural network, the more data, it, the better the performance, a neural  network]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

DL is very powerful, but it has a couple  of drawbacks. 


>> Tokens are: 
[DL, powerful, ,, couple,  , drawbacks, .] 

>> PoS Tags are: 
[('DL', 'PROPN'), ('powerful', 'ADJ'), (',', 'PUNCT'), ('couple', 'NOUN'), (' ', 'SPACE'), ('drawbacks', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('DL', 'nsubj'), ('powerful', 'acomp'), (',', 'punct'), ('couple', 'amod'), (' ', 'dobj'), ('drawbacks', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[DL, powerful], [powerful, ,], [,, couple], [couple,  ], [ , drawbacks], [drawbacks, .]]

>> Trigrams: 
[[DL, powerful, ,], [powerful, ,, couple], [,, couple,  ], [couple,  , drawbacks], [ , drawbacks, .]]

>> Noun Phrases are: 
[DL, it, drawbacks]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

It’s almost impossible to determine why the  system came to a certain conclusion. 


>> Tokens are: 
[impossible, determine,  , system, came, certain, conclusion, .] 

>> PoS Tags are: 
[('impossible', 'ADJ'), ('determine', 'VERB'), (' ', 'SPACE'), ('system', 'NOUN'), ('came', 'VERB'), ('certain', 'ADJ'), ('conclusion', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('impossible', 'acomp'), ('determine', 'xcomp'), (' ', 'compound'), ('system', 'nsubj'), ('came', 'ccomp'), ('certain', 'amod'), ('conclusion', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[impossible, determine], [determine,  ], [ , system], [system, came], [came, certain], [certain, conclusion], [conclusion, .]]

>> Trigrams: 
[[impossible, determine,  ], [determine,  , system], [ , system, came], [system, came, certain], [came, certain, conclusion], [certain, conclusion, .]]

>> Noun Phrases are: 
[It, the  system, a certain conclusion]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

This is called the  “black box” problem, though there are now many available  techniques that can increase insights in the inner workings   of the DL model. 


>> Tokens are: 
[called,  , “, black, box, ”, problem, ,, available,  , techniques, increase, insights, inner, workings,   , DL, model, .] 

>> PoS Tags are: 
[('called', 'VERB'), (' ', 'SPACE'), ('“', 'PUNCT'), ('black', 'ADJ'), ('box', 'NOUN'), ('”', 'PUNCT'), ('problem', 'NOUN'), (',', 'PUNCT'), ('available', 'ADJ'), (' ', 'SPACE'), ('techniques', 'NOUN'), ('increase', 'VERB'), ('insights', 'NOUN'), ('inner', 'ADJ'), ('workings', 'NOUN'), ('  ', 'SPACE'), ('DL', 'PROPN'), ('model', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('called', 'ROOT'), (' ', 'nmod'), ('“', 'punct'), ('black', 'amod'), ('box', 'nmod'), ('”', 'punct'), ('problem', 'oprd'), (',', 'punct'), ('available', 'amod'), (' ', 'compound'), ('techniques', 'attr'), ('increase', 'relcl'), ('insights', 'dobj'), ('inner', 'amod'), ('workings', 'pobj'), ('  ', 'appos'), ('DL', 'compound'), ('model', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[called,  ], [ , “], [“, black], [black, box], [box, ”], [”, problem], [problem, ,], [,, available], [available,  ], [ , techniques], [techniques, increase], [increase, insights], [insights, inner], [inner, workings], [workings,   ], [  , DL], [DL, model], [model, .]]

>> Trigrams: 
[[called,  , “], [ , “, black], [“, black, box], [black, box, ”], [box, ”, problem], [”, problem, ,], [problem, ,, available], [,, available,  ], [available,  , techniques], [ , techniques, increase], [techniques, increase, insights], [increase, insights, inner], [insights, inner, workings], [inner, workings,   ], [workings,   , DL], [  , DL, model], [DL, model, .]]

>> Noun Phrases are: 
[the  “black box” problem, many available  techniques, insights, the inner workings, the DL model]

>> Named Entities are: 
[] 

------------------- Sentence 5 -------------------

Also, deep learning often requires extensive  training times, a lot of data and specific hardware  requirements, and it’s not easy to acquire the specific  skills needed to develop a new DL solution to a problem. 


>> Tokens are: 
[,, deep, learning, requires, extensive,  , training, times, ,, lot, data, specific, hardware,  , requirements, ,, easy, acquire, specific,  , skills, needed, develop, new, DL, solution, problem, .] 

>> PoS Tags are: 
[(',', 'PUNCT'), ('deep', 'ADJ'), ('learning', 'NOUN'), ('requires', 'VERB'), ('extensive', 'ADJ'), (' ', 'SPACE'), ('training', 'NOUN'), ('times', 'NOUN'), (',', 'PUNCT'), ('lot', 'NOUN'), ('data', 'NOUN'), ('specific', 'ADJ'), ('hardware', 'NOUN'), (' ', 'SPACE'), ('requirements', 'NOUN'), (',', 'PUNCT'), ('easy', 'ADJ'), ('acquire', 'VERB'), ('specific', 'ADJ'), (' ', 'SPACE'), ('skills', 'NOUN'), ('needed', 'VERB'), ('develop', 'VERB'), ('new', 'ADJ'), ('DL', 'PROPN'), ('solution', 'NOUN'), ('problem', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(',', 'punct'), ('deep', 'amod'), ('learning', 'nsubj'), ('requires', 'ROOT'), ('extensive', 'amod'), (' ', 'compound'), ('training', 'compound'), ('times', 'dobj'), (',', 'punct'), ('lot', 'npadvmod'), ('data', 'pobj'), ('specific', 'amod'), ('hardware', 'compound'), (' ', 'compound'), ('requirements', 'conj'), (',', 'punct'), ('easy', 'acomp'), ('acquire', 'xcomp'), ('specific', 'amod'), (' ', 'compound'), ('skills', 'dobj'), ('needed', 'acl'), ('develop', 'advcl'), ('new', 'amod'), ('DL', 'compound'), ('solution', 'dobj'), ('problem', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[,, deep], [deep, learning], [learning, requires], [requires, extensive], [extensive,  ], [ , training], [training, times], [times, ,], [,, lot], [lot, data], [data, specific], [specific, hardware], [hardware,  ], [ , requirements], [requirements, ,], [,, easy], [easy, acquire], [acquire, specific], [specific,  ], [ , skills], [skills, needed], [needed, develop], [develop, new], [new, DL], [DL, solution], [solution, problem], [problem, .]]

>> Trigrams: 
[[,, deep, learning], [deep, learning, requires], [learning, requires, extensive], [requires, extensive,  ], [extensive,  , training], [ , training, times], [training, times, ,], [times, ,, lot], [,, lot, data], [lot, data, specific], [data, specific, hardware], [specific, hardware,  ], [hardware,  , requirements], [ , requirements, ,], [requirements, ,, easy], [,, easy, acquire], [easy, acquire, specific], [acquire, specific,  ], [specific,  , skills], [ , skills, needed], [skills, needed, develop], [needed, develop, new], [develop, new, DL], [new, DL, solution], [DL, solution, problem], [solution, problem, .]]

>> Noun Phrases are: 
[deep learning, extensive  training times, data, specific hardware  requirements, it, the specific  skills, a new DL solution, a problem]

>> Named Entities are: 
[] 


================================ Paragraph 42 =================================

In conclusion, there is no one algorithm that can fit or solve  all problems. Success really depends on the problem you  need to solve and the data you have available. Sometimes   a problem will need a hybrid approach, where you use  multiple algorithms to solve the problem. Each problem  requires extensive investigation of what constitutes a  best-fit type of algorithm. You should take into account  transparency and how much data, capabilities and time  you have, because some algorithms take a long time to run. 

------------------- Sentence 1 -------------------

In conclusion, there is no one algorithm that can fit or solve  all problems. 


>> Tokens are: 
[conclusion, ,, algorithm, fit, solve,  , problems, .] 

>> PoS Tags are: 
[('conclusion', 'NOUN'), (',', 'PUNCT'), ('algorithm', 'NOUN'), ('fit', 'VERB'), ('solve', 'VERB'), (' ', 'SPACE'), ('problems', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('conclusion', 'pobj'), (',', 'punct'), ('algorithm', 'attr'), ('fit', 'relcl'), ('solve', 'conj'), (' ', 'dobj'), ('problems', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[conclusion, ,], [,, algorithm], [algorithm, fit], [fit, solve], [solve,  ], [ , problems], [problems, .]]

>> Trigrams: 
[[conclusion, ,, algorithm], [,, algorithm, fit], [algorithm, fit, solve], [fit, solve,  ], [solve,  , problems], [ , problems, .]]

>> Noun Phrases are: 
[conclusion, no one algorithm, all problems]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Success really depends on the problem you  need to solve and the data you have available. 


>> Tokens are: 
[Success, depends, problem,  , need, solve, data, available, .] 

>> PoS Tags are: 
[('Success', 'NOUN'), ('depends', 'VERB'), ('problem', 'NOUN'), (' ', 'SPACE'), ('need', 'VERB'), ('solve', 'VERB'), ('data', 'NOUN'), ('available', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Success', 'nsubj'), ('depends', 'ROOT'), ('problem', 'pobj'), (' ', 'nsubj'), ('need', 'relcl'), ('solve', 'xcomp'), ('data', 'dobj'), ('available', 'acomp'), ('.', 'punct')]

>> Bigrams: 
[[Success, depends], [depends, problem], [problem,  ], [ , need], [need, solve], [solve, data], [data, available], [available, .]]

>> Trigrams: 
[[Success, depends, problem], [depends, problem,  ], [problem,  , need], [ , need, solve], [need, solve, data], [solve, data, available], [data, available, .]]

>> Noun Phrases are: 
[Success, the problem, you, the data, you]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

Sometimes   a problem will need a hybrid approach, where you use  multiple algorithms to solve the problem. 


>> Tokens are: 
[  , problem, need, hybrid, approach, ,, use,  , multiple, algorithms, solve, problem, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('problem', 'NOUN'), ('need', 'VERB'), ('hybrid', 'ADJ'), ('approach', 'NOUN'), (',', 'PUNCT'), ('use', 'VERB'), (' ', 'SPACE'), ('multiple', 'ADJ'), ('algorithms', 'NOUN'), ('solve', 'VERB'), ('problem', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'nsubj'), ('problem', 'appos'), ('need', 'ROOT'), ('hybrid', 'amod'), ('approach', 'dobj'), (',', 'punct'), ('use', 'relcl'), (' ', 'xcomp'), ('multiple', 'amod'), ('algorithms', 'dobj'), ('solve', 'xcomp'), ('problem', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[  , problem], [problem, need], [need, hybrid], [hybrid, approach], [approach, ,], [,, use], [use,  ], [ , multiple], [multiple, algorithms], [algorithms, solve], [solve, problem], [problem, .]]

>> Trigrams: 
[[  , problem, need], [problem, need, hybrid], [need, hybrid, approach], [hybrid, approach, ,], [approach, ,, use], [,, use,  ], [use,  , multiple], [ , multiple, algorithms], [multiple, algorithms, solve], [algorithms, solve, problem], [solve, problem, .]]

>> Noun Phrases are: 
[a problem, a hybrid approach, you, multiple algorithms, the problem]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

Each problem  requires extensive investigation of what constitutes a  best-fit type of algorithm. 


>> Tokens are: 
[problem,  , requires, extensive, investigation, constitutes,  , best, -, fit, type, algorithm, .] 

>> PoS Tags are: 
[('problem', 'NOUN'), (' ', 'SPACE'), ('requires', 'VERB'), ('extensive', 'ADJ'), ('investigation', 'NOUN'), ('constitutes', 'VERB'), (' ', 'SPACE'), ('best', 'ADJ'), ('-', 'PUNCT'), ('fit', 'ADJ'), ('type', 'NOUN'), ('algorithm', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('problem', 'nsubj'), (' ', 'nsubj'), ('requires', 'ROOT'), ('extensive', 'amod'), ('investigation', 'dobj'), ('constitutes', 'pcomp'), (' ', 'nmod'), ('best', 'amod'), ('-', 'punct'), ('fit', 'amod'), ('type', 'dobj'), ('algorithm', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[problem,  ], [ , requires], [requires, extensive], [extensive, investigation], [investigation, constitutes], [constitutes,  ], [ , best], [best, -], [-, fit], [fit, type], [type, algorithm], [algorithm, .]]

>> Trigrams: 
[[problem,  , requires], [ , requires, extensive], [requires, extensive, investigation], [extensive, investigation, constitutes], [investigation, constitutes,  ], [constitutes,  , best], [ , best, -], [best, -, fit], [-, fit, type], [fit, type, algorithm], [type, algorithm, .]]

>> Noun Phrases are: 
[Each problem, extensive investigation, what, a  best-fit type, algorithm]

>> Named Entities are: 
[] 

------------------- Sentence 5 -------------------

You should take into account  transparency and how much data, capabilities and time  you have, because some algorithms take a long time to run. 


>> Tokens are: 
[account,  , transparency, data, ,, capabilities, time,  , ,, algorithms, long, time, run, .] 

>> PoS Tags are: 
[('account', 'NOUN'), (' ', 'SPACE'), ('transparency', 'NOUN'), ('data', 'NOUN'), (',', 'PUNCT'), ('capabilities', 'NOUN'), ('time', 'NOUN'), (' ', 'SPACE'), (',', 'PUNCT'), ('algorithms', 'NOUN'), ('long', 'ADJ'), ('time', 'NOUN'), ('run', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('account', 'pobj'), (' ', 'compound'), ('transparency', 'dobj'), ('data', 'conj'), (',', 'punct'), ('capabilities', 'conj'), ('time', 'compound'), (' ', 'conj'), (',', 'punct'), ('algorithms', 'nsubj'), ('long', 'amod'), ('time', 'dobj'), ('run', 'relcl'), ('.', 'punct')]

>> Bigrams: 
[[account,  ], [ , transparency], [transparency, data], [data, ,], [,, capabilities], [capabilities, time], [time,  ], [ , ,], [,, algorithms], [algorithms, long], [long, time], [time, run], [run, .]]

>> Trigrams: 
[[account,  , transparency], [ , transparency, data], [transparency, data, ,], [data, ,, capabilities], [,, capabilities, time], [capabilities, time,  ], [time,  , ,], [ , ,, algorithms], [,, algorithms, long], [algorithms, long, time], [long, time, run], [time, run, .]]

>> Noun Phrases are: 
[You, account,  transparency, how much data, capabilities, you, some algorithms, a long time]

>> Named Entities are: 
[] 


================================ Paragraph 43 =================================

Input layer 

------------------- Sentence 1 -------------------

Input layer 


>> Tokens are: 
[Input, layer] 

>> PoS Tags are: 
[('Input', 'NOUN'), ('layer', 'NOUN')] 

>> Dependency Tags are: 
[('Input', 'compound'), ('layer', 'ROOT')]

>> Bigrams: 
[[Input, layer]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Input layer]

>> Named Entities are: 
[] 


================================ Paragraph 44 =================================

Hidden  layer 1 

------------------- Sentence 1 -------------------

Hidden  layer 1 


>> Tokens are: 
[Hidden,  , layer, 1] 

>> PoS Tags are: 
[('Hidden', 'VERB'), (' ', 'SPACE'), ('layer', 'NOUN'), ('1', 'NUM')] 

>> Dependency Tags are: 
[('Hidden', 'amod'), (' ', 'prep'), ('layer', 'ROOT'), ('1', 'nummod')]

>> Bigrams: 
[[Hidden,  ], [ , layer], [layer, 1]]

>> Trigrams: 
[[Hidden,  , layer], [ , layer, 1]]

>> Noun Phrases are: 
[Hidden  layer]

>> Named Entities are: 
[('Hidden', 'GPE'), ('1', 'CARDINAL')] 


================================ Paragraph 45 =================================

Hidden layer 2 

------------------- Sentence 1 -------------------

Hidden layer 2 


>> Tokens are: 
[Hidden, layer, 2] 

>> PoS Tags are: 
[('Hidden', 'ADJ'), ('layer', 'NOUN'), ('2', 'NUM')] 

>> Dependency Tags are: 
[('Hidden', 'amod'), ('layer', 'ROOT'), ('2', 'nummod')]

>> Bigrams: 
[[Hidden, layer], [layer, 2]]

>> Trigrams: 
[[Hidden, layer, 2]]

>> Noun Phrases are: 
[Hidden layer]

>> Named Entities are: 
[('Hidden', 'GPE'), ('2', 'CARDINAL')] 


================================ Paragraph 46 =================================

Hidden layer 3 

------------------- Sentence 1 -------------------

Hidden layer 3 


>> Tokens are: 
[Hidden, layer, 3] 

>> PoS Tags are: 
[('Hidden', 'ADJ'), ('layer', 'NOUN'), ('3', 'NUM')] 

>> Dependency Tags are: 
[('Hidden', 'amod'), ('layer', 'ROOT'), ('3', 'nummod')]

>> Bigrams: 
[[Hidden, layer], [layer, 3]]

>> Trigrams: 
[[Hidden, layer, 3]]

>> Noun Phrases are: 
[Hidden layer]

>> Named Entities are: 
[('Hidden', 'GPE'), ('3', 'CARDINAL')] 


================================ Paragraph 47 =================================

Output layer

------------------- Sentence 1 -------------------

Output layer 


>> Tokens are: 
[Output, layer] 

>> PoS Tags are: 
[('Output', 'NOUN'), ('layer', 'NOUN')] 

>> Dependency Tags are: 
[('Output', 'compound'), ('layer', 'ROOT')]

>> Bigrams: 
[[Output, layer]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Output layer]

>> Named Entities are: 
[] 


================================ Paragraph 48 =================================

IBM Services     5 

------------------- Sentence 1 -------------------

IBM Services     5 


>> Tokens are: 
[IBM, Services,     , 5] 

>> PoS Tags are: 
[('IBM', 'PROPN'), ('Services', 'PROPN'), ('    ', 'SPACE'), ('5', 'NUM')] 

>> Dependency Tags are: 
[('IBM', 'compound'), ('Services', 'ROOT'), ('    ', 'compound'), ('5', 'nummod')]

>> Bigrams: 
[[IBM, Services], [Services,     ], [    , 5]]

>> Trigrams: 
[[IBM, Services,     ], [Services,     , 5]]

>> Noun Phrases are: 
[IBM Services]

>> Named Entities are: 
[('IBM Services', 'ORG')] 


================================ Paragraph 49 =================================

How does an AI system learn?   To illustrate how AI system learning works, we’ll next  describe what a data scientist does, and what a machine  does in the process of developing AI solutions. Later, when  we discuss the pitfalls of implementing AI, we’ll explain  what types of skills you’ll need to successfully build a data  science team.   

------------------- Sentence 1 -------------------

How does an AI system learn? 


>> Tokens are: 
[AI, system, learn, ?] 

>> PoS Tags are: 
[('AI', 'PROPN'), ('system', 'NOUN'), ('learn', 'VERB'), ('?', 'PUNCT')] 

>> Dependency Tags are: 
[('AI', 'compound'), ('system', 'nsubj'), ('learn', 'ROOT'), ('?', 'punct')]

>> Bigrams: 
[[AI, system], [system, learn], [learn, ?]]

>> Trigrams: 
[[AI, system, learn], [system, learn, ?]]

>> Noun Phrases are: 
[an AI system]

>> Named Entities are: 
[('AI', 'ORG')] 

------------------- Sentence 2 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

To illustrate how AI system learning works, we’ll next  describe what a data scientist does, and what a machine  does in the process of developing AI solutions. 


>> Tokens are: 
[illustrate, AI, system, learning, works, ,,  , describe, data, scientist, ,, machine,  , process, developing, AI, solutions, .] 

>> PoS Tags are: 
[('illustrate', 'VERB'), ('AI', 'PROPN'), ('system', 'NOUN'), ('learning', 'NOUN'), ('works', 'VERB'), (',', 'PUNCT'), (' ', 'SPACE'), ('describe', 'VERB'), ('data', 'NOUN'), ('scientist', 'NOUN'), (',', 'PUNCT'), ('machine', 'NOUN'), (' ', 'SPACE'), ('process', 'NOUN'), ('developing', 'VERB'), ('AI', 'NOUN'), ('solutions', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('illustrate', 'advcl'), ('AI', 'compound'), ('system', 'compound'), ('learning', 'nsubj'), ('works', 'ccomp'), (',', 'punct'), (' ', 'npadvmod'), ('describe', 'ROOT'), ('data', 'compound'), ('scientist', 'nsubj'), (',', 'punct'), ('machine', 'conj'), (' ', 'nsubj'), ('process', 'pobj'), ('developing', 'amod'), ('AI', 'compound'), ('solutions', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[illustrate, AI], [AI, system], [system, learning], [learning, works], [works, ,], [,,  ], [ , describe], [describe, data], [data, scientist], [scientist, ,], [,, machine], [machine,  ], [ , process], [process, developing], [developing, AI], [AI, solutions], [solutions, .]]

>> Trigrams: 
[[illustrate, AI, system], [AI, system, learning], [system, learning, works], [learning, works, ,], [works, ,,  ], [,,  , describe], [ , describe, data], [describe, data, scientist], [data, scientist, ,], [scientist, ,, machine], [,, machine,  ], [machine,  , process], [ , process, developing], [process, developing, AI], [developing, AI, solutions], [AI, solutions, .]]

>> Noun Phrases are: 
[AI system learning, we, what, a data scientist, what a machine, the process, developing AI solutions]

>> Named Entities are: 
[('AI', 'ORG')] 

------------------- Sentence 4 -------------------

Later, when  we discuss the pitfalls of implementing AI, we’ll explain  what types of skills you’ll need to successfully build a data  science team. 


>> Tokens are: 
[Later, ,,  , discuss, pitfalls, implementing, AI, ,, explain,  , types, skills, need, successfully, build, data,  , science, team, .] 

>> PoS Tags are: 
[('Later', 'ADV'), (',', 'PUNCT'), (' ', 'SPACE'), ('discuss', 'VERB'), ('pitfalls', 'NOUN'), ('implementing', 'VERB'), ('AI', 'PROPN'), (',', 'PUNCT'), ('explain', 'VERB'), (' ', 'SPACE'), ('types', 'NOUN'), ('skills', 'NOUN'), ('need', 'VERB'), ('successfully', 'ADV'), ('build', 'VERB'), ('data', 'NOUN'), (' ', 'SPACE'), ('science', 'NOUN'), ('team', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Later', 'advmod'), (',', 'punct'), (' ', 'meta'), ('discuss', 'advcl'), ('pitfalls', 'dobj'), ('implementing', 'pcomp'), ('AI', 'dobj'), (',', 'punct'), ('explain', 'ROOT'), (' ', 'dobj'), ('types', 'dobj'), ('skills', 'pobj'), ('need', 'ccomp'), ('successfully', 'advmod'), ('build', 'xcomp'), ('data', 'compound'), (' ', 'compound'), ('science', 'compound'), ('team', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Later, ,], [,,  ], [ , discuss], [discuss, pitfalls], [pitfalls, implementing], [implementing, AI], [AI, ,], [,, explain], [explain,  ], [ , types], [types, skills], [skills, need], [need, successfully], [successfully, build], [build, data], [data,  ], [ , science], [science, team], [team, .]]

>> Trigrams: 
[[Later, ,,  ], [,,  , discuss], [ , discuss, pitfalls], [discuss, pitfalls, implementing], [pitfalls, implementing, AI], [implementing, AI, ,], [AI, ,, explain], [,, explain,  ], [explain,  , types], [ , types, skills], [types, skills, need], [skills, need, successfully], [need, successfully, build], [successfully, build, data], [build, data,  ], [data,  , science], [ , science, team], [science, team, .]]

>> Noun Phrases are: 
[we, the pitfalls, AI, we, what types, skills, you, a data  science team]

>> Named Entities are: 
[('AI', 'ORG')] 

------------------- Sentence 5 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 50 =================================

Data scientist The data scientist extracts knowledge and interprets data  by using the right tools and statistical methods6. The data  scientist first helps identify data-analytics problems. Next,  he or she defines defines the right algorithm and tools.  He or she cleans the data and collects the correct data for  the problem. The next step is to define hyperparameters  and engineer the features in a way that it fits the model.  After the model provides output the data scientist analyzes  and identifies patterns and trends. Then the data scientist  communicates the results to the stakeholders. 

------------------- Sentence 1 -------------------

Data scientist The data scientist extracts knowledge and interprets data  by using the right tools and statistical methods6. 


>> Tokens are: 
[Data, scientist, data, scientist, extracts, knowledge, interprets, data,  , right, tools, statistical, methods6, .] 

>> PoS Tags are: 
[('Data', 'NOUN'), ('scientist', 'NOUN'), ('data', 'NOUN'), ('scientist', 'NOUN'), ('extracts', 'VERB'), ('knowledge', 'NOUN'), ('interprets', 'VERB'), ('data', 'NOUN'), (' ', 'SPACE'), ('right', 'ADJ'), ('tools', 'NOUN'), ('statistical', 'ADJ'), ('methods6', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Data', 'compound'), ('scientist', 'npadvmod'), ('data', 'compound'), ('scientist', 'nsubj'), ('extracts', 'ROOT'), ('knowledge', 'dobj'), ('interprets', 'conj'), ('data', 'compound'), (' ', 'dobj'), ('right', 'amod'), ('tools', 'dobj'), ('statistical', 'amod'), ('methods6', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[Data, scientist], [scientist, data], [data, scientist], [scientist, extracts], [extracts, knowledge], [knowledge, interprets], [interprets, data], [data,  ], [ , right], [right, tools], [tools, statistical], [statistical, methods6], [methods6, .]]

>> Trigrams: 
[[Data, scientist, data], [scientist, data, scientist], [data, scientist, extracts], [scientist, extracts, knowledge], [extracts, knowledge, interprets], [knowledge, interprets, data], [interprets, data,  ], [data,  , right], [ , right, tools], [right, tools, statistical], [tools, statistical, methods6], [statistical, methods6, .]]

>> Noun Phrases are: 
[The data scientist, knowledge, the right tools, statistical methods6]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

The data  scientist first helps identify data-analytics problems. 


>> Tokens are: 
[data,  , scientist, helps, identify, data, -, analytics, problems, .] 

>> PoS Tags are: 
[('data', 'NOUN'), (' ', 'SPACE'), ('scientist', 'NOUN'), ('helps', 'AUX'), ('identify', 'VERB'), ('data', 'NOUN'), ('-', 'PUNCT'), ('analytics', 'NOUN'), ('problems', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('data', 'nmod'), (' ', 'prep'), ('scientist', 'nsubj'), ('helps', 'aux'), ('identify', 'ROOT'), ('data', 'compound'), ('-', 'punct'), ('analytics', 'compound'), ('problems', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[data,  ], [ , scientist], [scientist, helps], [helps, identify], [identify, data], [data, -], [-, analytics], [analytics, problems], [problems, .]]

>> Trigrams: 
[[data,  , scientist], [ , scientist, helps], [scientist, helps, identify], [helps, identify, data], [identify, data, -], [data, -, analytics], [-, analytics, problems], [analytics, problems, .]]

>> Noun Phrases are: 
[The data  scientist, data-analytics problems]

>> Named Entities are: 
[('first', 'ORDINAL')] 

------------------- Sentence 3 -------------------

Next,  he or she defines defines the right algorithm and tools.   


>> Tokens are: 
[,,  , defines, defines, right, algorithm, tools, .,  ] 

>> PoS Tags are: 
[(',', 'PUNCT'), (' ', 'SPACE'), ('defines', 'VERB'), ('defines', 'VERB'), ('right', 'ADJ'), ('algorithm', 'NOUN'), ('tools', 'NOUN'), ('.', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[(',', 'punct'), (' ', 'meta'), ('defines', 'ROOT'), ('defines', 'xcomp'), ('right', 'amod'), ('algorithm', 'dobj'), ('tools', 'conj'), ('.', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[,,  ], [ , defines], [defines, defines], [defines, right], [right, algorithm], [algorithm, tools], [tools, .], [.,  ]]

>> Trigrams: 
[[,,  , defines], [ , defines, defines], [defines, defines, right], [defines, right, algorithm], [right, algorithm, tools], [algorithm, tools, .], [tools, .,  ]]

>> Noun Phrases are: 
[he, she, the right algorithm, tools]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

He or she cleans the data and collects the correct data for  the problem. 


>> Tokens are: 
[cleans, data, collects, correct, data,  , problem, .] 

>> PoS Tags are: 
[('cleans', 'VERB'), ('data', 'NOUN'), ('collects', 'VERB'), ('correct', 'ADJ'), ('data', 'NOUN'), (' ', 'SPACE'), ('problem', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('cleans', 'ROOT'), ('data', 'dobj'), ('collects', 'conj'), ('correct', 'amod'), ('data', 'dobj'), (' ', 'pobj'), ('problem', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[cleans, data], [data, collects], [collects, correct], [correct, data], [data,  ], [ , problem], [problem, .]]

>> Trigrams: 
[[cleans, data, collects], [data, collects, correct], [collects, correct, data], [correct, data,  ], [data,  , problem], [ , problem, .]]

>> Noun Phrases are: 
[He, she, the data, the correct data, the problem]

>> Named Entities are: 
[] 

------------------- Sentence 5 -------------------

The next step is to define hyperparameters  and engineer the features in a way that it fits the model. 


>> Tokens are: 
[step, define, hyperparameters,  , engineer, features, way, fits, model, .] 

>> PoS Tags are: 
[('step', 'NOUN'), ('define', 'VERB'), ('hyperparameters', 'NOUN'), (' ', 'SPACE'), ('engineer', 'VERB'), ('features', 'NOUN'), ('way', 'NOUN'), ('fits', 'VERB'), ('model', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('step', 'nsubj'), ('define', 'xcomp'), ('hyperparameters', 'dobj'), (' ', 'nummod'), ('engineer', 'conj'), ('features', 'dobj'), ('way', 'pobj'), ('fits', 'relcl'), ('model', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[step, define], [define, hyperparameters], [hyperparameters,  ], [ , engineer], [engineer, features], [features, way], [way, fits], [fits, model], [model, .]]

>> Trigrams: 
[[step, define, hyperparameters], [define, hyperparameters,  ], [hyperparameters,  , engineer], [ , engineer, features], [engineer, features, way], [features, way, fits], [way, fits, model], [fits, model, .]]

>> Noun Phrases are: 
[The next step, hyperparameters, the features, a way, it, the model]

>> Named Entities are: 
[] 

------------------- Sentence 6 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 7 -------------------

After the model provides output the data scientist analyzes  and identifies patterns and trends. 


>> Tokens are: 
[model, provides, output, data, scientist, analyzes,  , identifies, patterns, trends, .] 

>> PoS Tags are: 
[('model', 'NOUN'), ('provides', 'VERB'), ('output', 'NOUN'), ('data', 'NOUN'), ('scientist', 'NOUN'), ('analyzes', 'VERB'), (' ', 'SPACE'), ('identifies', 'VERB'), ('patterns', 'NOUN'), ('trends', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('model', 'nsubj'), ('provides', 'advcl'), ('output', 'dobj'), ('data', 'compound'), ('scientist', 'nsubj'), ('analyzes', 'ROOT'), (' ', 'dobj'), ('identifies', 'conj'), ('patterns', 'dobj'), ('trends', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[model, provides], [provides, output], [output, data], [data, scientist], [scientist, analyzes], [analyzes,  ], [ , identifies], [identifies, patterns], [patterns, trends], [trends, .]]

>> Trigrams: 
[[model, provides, output], [provides, output, data], [output, data, scientist], [data, scientist, analyzes], [scientist, analyzes,  ], [analyzes,  , identifies], [ , identifies, patterns], [identifies, patterns, trends], [patterns, trends, .]]

>> Noun Phrases are: 
[the model, output, the data scientist, patterns, trends]

>> Named Entities are: 
[] 

------------------- Sentence 8 -------------------

Then the data scientist  communicates the results to the stakeholders. 


>> Tokens are: 
[data, scientist,  , communicates, results, stakeholders, .] 

>> PoS Tags are: 
[('data', 'NOUN'), ('scientist', 'NOUN'), (' ', 'SPACE'), ('communicates', 'VERB'), ('results', 'NOUN'), ('stakeholders', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('data', 'compound'), ('scientist', 'nsubj'), (' ', 'appos'), ('communicates', 'ROOT'), ('results', 'dobj'), ('stakeholders', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[data, scientist], [scientist,  ], [ , communicates], [communicates, results], [results, stakeholders], [stakeholders, .]]

>> Trigrams: 
[[data, scientist,  ], [scientist,  , communicates], [ , communicates, results], [communicates, results, stakeholders], [results, stakeholders, .]]

>> Noun Phrases are: 
[the data scientist, the results, the stakeholders]

>> Named Entities are: 
[] 


================================ Paragraph 51 =================================

Machine The machine learns to recognize patterns in the data   that it is fed to it, and then maps these patterns to future  outcomes. The machine learns through adjusting the  weights and biases in the network from feedback to get to  the correct outcome. This feedback must come from a  trainer—the data scientist. The data scientist tells the  model what should happen and what shouldn’t happen.  This correction is then sent back through the network and  an error rate is computed. With each iteration, the model  works to decrease the error rate.   

------------------- Sentence 1 -------------------

Machine The machine learns to recognize patterns in the data   that it is fed to it, and then maps these patterns to future  outcomes. 


>> Tokens are: 
[Machine, machine, learns, recognize, patterns, data,   , fed, ,, maps, patterns, future,  , outcomes, .] 

>> PoS Tags are: 
[('Machine', 'NOUN'), ('machine', 'NOUN'), ('learns', 'VERB'), ('recognize', 'VERB'), ('patterns', 'NOUN'), ('data', 'NOUN'), ('  ', 'SPACE'), ('fed', 'VERB'), (',', 'PUNCT'), ('maps', 'VERB'), ('patterns', 'NOUN'), ('future', 'ADJ'), (' ', 'SPACE'), ('outcomes', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Machine', 'npadvmod'), ('machine', 'nsubj'), ('learns', 'ROOT'), ('recognize', 'xcomp'), ('patterns', 'dobj'), ('data', 'pobj'), ('  ', 'appos'), ('fed', 'advcl'), (',', 'punct'), ('maps', 'conj'), ('patterns', 'dobj'), ('future', 'amod'), (' ', 'compound'), ('outcomes', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Machine, machine], [machine, learns], [learns, recognize], [recognize, patterns], [patterns, data], [data,   ], [  , fed], [fed, ,], [,, maps], [maps, patterns], [patterns, future], [future,  ], [ , outcomes], [outcomes, .]]

>> Trigrams: 
[[Machine, machine, learns], [machine, learns, recognize], [learns, recognize, patterns], [recognize, patterns, data], [patterns, data,   ], [data,   , fed], [  , fed, ,], [fed, ,, maps], [,, maps, patterns], [maps, patterns, future], [patterns, future,  ], [future,  , outcomes], [ , outcomes, .]]

>> Noun Phrases are: 
[The machine, patterns, the data, it, it, these patterns, future  outcomes]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

The machine learns through adjusting the  weights and biases in the network from feedback to get to  the correct outcome. 


>> Tokens are: 
[machine, learns, adjusting,  , weights, biases, network, feedback,  , correct, outcome, .] 

>> PoS Tags are: 
[('machine', 'NOUN'), ('learns', 'VERB'), ('adjusting', 'VERB'), (' ', 'SPACE'), ('weights', 'NOUN'), ('biases', 'NOUN'), ('network', 'NOUN'), ('feedback', 'NOUN'), (' ', 'SPACE'), ('correct', 'ADJ'), ('outcome', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('machine', 'nsubj'), ('learns', 'ROOT'), ('adjusting', 'pcomp'), (' ', 'compound'), ('weights', 'dobj'), ('biases', 'conj'), ('network', 'pobj'), ('feedback', 'pobj'), (' ', 'pobj'), ('correct', 'amod'), ('outcome', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[machine, learns], [learns, adjusting], [adjusting,  ], [ , weights], [weights, biases], [biases, network], [network, feedback], [feedback,  ], [ , correct], [correct, outcome], [outcome, .]]

>> Trigrams: 
[[machine, learns, adjusting], [learns, adjusting,  ], [adjusting,  , weights], [ , weights, biases], [weights, biases, network], [biases, network, feedback], [network, feedback,  ], [feedback,  , correct], [ , correct, outcome], [correct, outcome, .]]

>> Noun Phrases are: 
[The machine, the  weights, biases, the network, feedback, the correct outcome]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

This feedback must come from a  trainer—the data scientist. 


>> Tokens are: 
[feedback, come,  , trainer, —, data, scientist, .] 

>> PoS Tags are: 
[('feedback', 'NOUN'), ('come', 'VERB'), (' ', 'SPACE'), ('trainer', 'NOUN'), ('—', 'PUNCT'), ('data', 'NOUN'), ('scientist', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('feedback', 'nsubj'), ('come', 'ROOT'), (' ', 'compound'), ('trainer', 'pobj'), ('—', 'punct'), ('data', 'compound'), ('scientist', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[feedback, come], [come,  ], [ , trainer], [trainer, —], [—, data], [data, scientist], [scientist, .]]

>> Trigrams: 
[[feedback, come,  ], [come,  , trainer], [ , trainer, —], [trainer, —, data], [—, data, scientist], [data, scientist, .]]

>> Noun Phrases are: 
[This feedback, a  trainer, the data scientist]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

The data scientist tells the  model what should happen and what shouldn’t happen. 


>> Tokens are: 
[data, scientist, tells,  , model, happen, happen, .] 

>> PoS Tags are: 
[('data', 'NOUN'), ('scientist', 'NOUN'), ('tells', 'VERB'), (' ', 'SPACE'), ('model', 'NOUN'), ('happen', 'VERB'), ('happen', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('data', 'compound'), ('scientist', 'nsubj'), ('tells', 'ROOT'), (' ', 'compound'), ('model', 'dobj'), ('happen', 'ccomp'), ('happen', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[data, scientist], [scientist, tells], [tells,  ], [ , model], [model, happen], [happen, happen], [happen, .]]

>> Trigrams: 
[[data, scientist, tells], [scientist, tells,  ], [tells,  , model], [ , model, happen], [model, happen, happen], [happen, happen, .]]

>> Noun Phrases are: 
[The data scientist, the  model, what, what]

>> Named Entities are: 
[] 

------------------- Sentence 5 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 6 -------------------

This correction is then sent back through the network and  an error rate is computed. 


>> Tokens are: 
[correction, sent, network,  , error, rate, computed, .] 

>> PoS Tags are: 
[('correction', 'NOUN'), ('sent', 'VERB'), ('network', 'NOUN'), (' ', 'SPACE'), ('error', 'NOUN'), ('rate', 'NOUN'), ('computed', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('correction', 'nsubjpass'), ('sent', 'ROOT'), ('network', 'pobj'), (' ', 'conj'), ('error', 'compound'), ('rate', 'nsubjpass'), ('computed', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[correction, sent], [sent, network], [network,  ], [ , error], [error, rate], [rate, computed], [computed, .]]

>> Trigrams: 
[[correction, sent, network], [sent, network,  ], [network,  , error], [ , error, rate], [error, rate, computed], [rate, computed, .]]

>> Noun Phrases are: 
[This correction, the network, an error rate]

>> Named Entities are: 
[] 

------------------- Sentence 7 -------------------

With each iteration, the model  works to decrease the error rate. 


>> Tokens are: 
[iteration, ,, model,  , works, decrease, error, rate, .] 

>> PoS Tags are: 
[('iteration', 'NOUN'), (',', 'PUNCT'), ('model', 'NOUN'), (' ', 'SPACE'), ('works', 'VERB'), ('decrease', 'VERB'), ('error', 'NOUN'), ('rate', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('iteration', 'pobj'), (',', 'punct'), ('model', 'nsubj'), (' ', 'appos'), ('works', 'ROOT'), ('decrease', 'xcomp'), ('error', 'compound'), ('rate', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[iteration, ,], [,, model], [model,  ], [ , works], [works, decrease], [decrease, error], [error, rate], [rate, .]]

>> Trigrams: 
[[iteration, ,, model], [,, model,  ], [model,  , works], [ , works, decrease], [works, decrease, error], [decrease, error, rate], [error, rate, .]]

>> Noun Phrases are: 
[each iteration, the model, the error rate]

>> Named Entities are: 
[] 

------------------- Sentence 8 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 52 =================================

In the appendix section of this paper, we have a section  that addresses the different types of algorithms’ learning.  There are four main types of learning; supervised,  unsupervised, transferred and reinforcement learning.  While unsupervised, reinforcement and transfer learning  show great potential, supervised learning is currently the  type that can provide the highest economic value. 

------------------- Sentence 1 -------------------

In the appendix section of this paper, we have a section  that addresses the different types of algorithms’ learning. 


>> Tokens are: 
[appendix, section, paper, ,, section,  , addresses, different, types, algorithms, ’, learning, .] 

>> PoS Tags are: 
[('appendix', 'ADJ'), ('section', 'NOUN'), ('paper', 'NOUN'), (',', 'PUNCT'), ('section', 'NOUN'), (' ', 'SPACE'), ('addresses', 'VERB'), ('different', 'ADJ'), ('types', 'NOUN'), ('algorithms', 'NOUN'), ('’', 'PUNCT'), ('learning', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('appendix', 'amod'), ('section', 'pobj'), ('paper', 'pobj'), (',', 'punct'), ('section', 'dobj'), (' ', 'nummod'), ('addresses', 'relcl'), ('different', 'amod'), ('types', 'dobj'), ('algorithms', 'pobj'), ('’', 'punct'), ('learning', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[appendix, section], [section, paper], [paper, ,], [,, section], [section,  ], [ , addresses], [addresses, different], [different, types], [types, algorithms], [algorithms, ’], [’, learning], [learning, .]]

>> Trigrams: 
[[appendix, section, paper], [section, paper, ,], [paper, ,, section], [,, section,  ], [section,  , addresses], [ , addresses, different], [addresses, different, types], [different, types, algorithms], [types, algorithms, ’], [algorithms, ’, learning], [’, learning, .]]

>> Noun Phrases are: 
[the appendix section, this paper, we, a section, the different types, algorithms]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

There are four main types of learning; supervised,  unsupervised, transferred and reinforcement learning. 


>> Tokens are: 
[main, types, learning, ;, supervised, ,,  , unsupervised, ,, transferred, reinforcement, learning, .] 

>> PoS Tags are: 
[('main', 'ADJ'), ('types', 'NOUN'), ('learning', 'NOUN'), (';', 'PUNCT'), ('supervised', 'VERB'), (',', 'PUNCT'), (' ', 'SPACE'), ('unsupervised', 'ADJ'), (',', 'PUNCT'), ('transferred', 'VERB'), ('reinforcement', 'NOUN'), ('learning', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('main', 'amod'), ('types', 'attr'), ('learning', 'pobj'), (';', 'punct'), ('supervised', 'ROOT'), (',', 'punct'), (' ', 'nsubj'), ('unsupervised', 'conj'), (',', 'punct'), ('transferred', 'conj'), ('reinforcement', 'compound'), ('learning', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[main, types], [types, learning], [learning, ;], [;, supervised], [supervised, ,], [,,  ], [ , unsupervised], [unsupervised, ,], [,, transferred], [transferred, reinforcement], [reinforcement, learning], [learning, .]]

>> Trigrams: 
[[main, types, learning], [types, learning, ;], [learning, ;, supervised], [;, supervised, ,], [supervised, ,,  ], [,,  , unsupervised], [ , unsupervised, ,], [unsupervised, ,, transferred], [,, transferred, reinforcement], [transferred, reinforcement, learning], [reinforcement, learning, .]]

>> Noun Phrases are: 
[four main types, learning, reinforcement learning]

>> Named Entities are: 
[('four', 'CARDINAL')] 

------------------- Sentence 4 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 5 -------------------

While unsupervised, reinforcement and transfer learning  show great potential, supervised learning is currently the  type that can provide the highest economic value. 


>> Tokens are: 
[unsupervised, ,, reinforcement, transfer, learning,  , great, potential, ,, supervised, learning, currently,  , type, provide, highest, economic, value, .] 

>> PoS Tags are: 
[('unsupervised', 'ADJ'), (',', 'PUNCT'), ('reinforcement', 'NOUN'), ('transfer', 'NOUN'), ('learning', 'VERB'), (' ', 'SPACE'), ('great', 'ADJ'), ('potential', 'NOUN'), (',', 'PUNCT'), ('supervised', 'ADJ'), ('learning', 'NOUN'), ('currently', 'ADV'), (' ', 'SPACE'), ('type', 'NOUN'), ('provide', 'VERB'), ('highest', 'ADJ'), ('economic', 'ADJ'), ('value', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('unsupervised', 'advcl'), (',', 'punct'), ('reinforcement', 'npadvmod'), ('transfer', 'conj'), ('learning', 'advcl'), (' ', 'dobj'), ('great', 'amod'), ('potential', 'dobj'), (',', 'punct'), ('supervised', 'amod'), ('learning', 'nsubj'), ('currently', 'advmod'), (' ', 'compound'), ('type', 'attr'), ('provide', 'relcl'), ('highest', 'amod'), ('economic', 'amod'), ('value', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[unsupervised, ,], [,, reinforcement], [reinforcement, transfer], [transfer, learning], [learning,  ], [ , great], [great, potential], [potential, ,], [,, supervised], [supervised, learning], [learning, currently], [currently,  ], [ , type], [type, provide], [provide, highest], [highest, economic], [economic, value], [value, .]]

>> Trigrams: 
[[unsupervised, ,, reinforcement], [,, reinforcement, transfer], [reinforcement, transfer, learning], [transfer, learning,  ], [learning,  , great], [ , great, potential], [great, potential, ,], [potential, ,, supervised], [,, supervised, learning], [supervised, learning, currently], [learning, currently,  ], [currently,  , type], [ , type, provide], [type, provide, highest], [provide, highest, economic], [highest, economic, value], [economic, value, .]]

>> Noun Phrases are: 
[great potential, supervised learning, the  type, the highest economic value]

>> Named Entities are: 
[] 


================================ Paragraph 53 =================================

What has driven the development of AI? With increasing computing power and more data, the  potential value of algorithms became higher. People and  companies saw possibilities to embed these smart systems  into their companies to drive strategy and innovation. As  the power of algorithms, computing and amounts of data  increased companies started to see an increasing amount  of use cases. AI started to become an essential value.  Companies saw that these systems could move them closer  to their customers, drive efficiency, enhance employee  experience and capability, automatize tasks, decrease  costs and improve revenue.  

------------------- Sentence 1 -------------------

What has driven the development of AI? 


>> Tokens are: 
[driven, development, AI, ?] 

>> PoS Tags are: 
[('driven', 'VERB'), ('development', 'NOUN'), ('AI', 'PROPN'), ('?', 'PUNCT')] 

>> Dependency Tags are: 
[('driven', 'ROOT'), ('development', 'dobj'), ('AI', 'pobj'), ('?', 'punct')]

>> Bigrams: 
[[driven, development], [development, AI], [AI, ?]]

>> Trigrams: 
[[driven, development, AI], [development, AI, ?]]

>> Noun Phrases are: 
[What, the development, AI]

>> Named Entities are: 
[('AI', 'ORG')] 

------------------- Sentence 2 -------------------

With increasing computing power and more data, the  potential value of algorithms became higher. 


>> Tokens are: 
[increasing, computing, power, data, ,,  , potential, value, algorithms, higher, .] 

>> PoS Tags are: 
[('increasing', 'VERB'), ('computing', 'NOUN'), ('power', 'NOUN'), ('data', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('potential', 'ADJ'), ('value', 'NOUN'), ('algorithms', 'NOUN'), ('higher', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('increasing', 'amod'), ('computing', 'compound'), ('power', 'pobj'), ('data', 'conj'), (',', 'punct'), (' ', 'nmod'), ('potential', 'amod'), ('value', 'nsubj'), ('algorithms', 'pobj'), ('higher', 'acomp'), ('.', 'punct')]

>> Bigrams: 
[[increasing, computing], [computing, power], [power, data], [data, ,], [,,  ], [ , potential], [potential, value], [value, algorithms], [algorithms, higher], [higher, .]]

>> Trigrams: 
[[increasing, computing, power], [computing, power, data], [power, data, ,], [data, ,,  ], [,,  , potential], [ , potential, value], [potential, value, algorithms], [value, algorithms, higher], [algorithms, higher, .]]

>> Noun Phrases are: 
[increasing computing power, more data, the  potential value, algorithms]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

People and  companies saw possibilities to embed these smart systems  into their companies to drive strategy and innovation. 


>> Tokens are: 
[People,  , companies, saw, possibilities, embed, smart, systems,  , companies, drive, strategy, innovation, .] 

>> PoS Tags are: 
[('People', 'NOUN'), (' ', 'SPACE'), ('companies', 'NOUN'), ('saw', 'VERB'), ('possibilities', 'NOUN'), ('embed', 'VERB'), ('smart', 'ADJ'), ('systems', 'NOUN'), (' ', 'SPACE'), ('companies', 'NOUN'), ('drive', 'VERB'), ('strategy', 'NOUN'), ('innovation', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('People', 'nmod'), (' ', 'conj'), ('companies', 'nsubj'), ('saw', 'ROOT'), ('possibilities', 'nsubj'), ('embed', 'ccomp'), ('smart', 'amod'), ('systems', 'dobj'), (' ', 'appos'), ('companies', 'pobj'), ('drive', 'advcl'), ('strategy', 'dobj'), ('innovation', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[People,  ], [ , companies], [companies, saw], [saw, possibilities], [possibilities, embed], [embed, smart], [smart, systems], [systems,  ], [ , companies], [companies, drive], [drive, strategy], [strategy, innovation], [innovation, .]]

>> Trigrams: 
[[People,  , companies], [ , companies, saw], [companies, saw, possibilities], [saw, possibilities, embed], [possibilities, embed, smart], [embed, smart, systems], [smart, systems,  ], [systems,  , companies], [ , companies, drive], [companies, drive, strategy], [drive, strategy, innovation], [strategy, innovation, .]]

>> Noun Phrases are: 
[People and  companies, possibilities, these smart systems, their companies, strategy, innovation]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

As  the power of algorithms, computing and amounts of data  increased companies started to see an increasing amount  of use cases. 


>> Tokens are: 
[ , power, algorithms, ,, computing, amounts, data,  , increased, companies, started, increasing,  , use, cases, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('power', 'NOUN'), ('algorithms', 'NOUN'), (',', 'PUNCT'), ('computing', 'VERB'), ('amounts', 'NOUN'), ('data', 'NOUN'), (' ', 'SPACE'), ('increased', 'VERB'), ('companies', 'NOUN'), ('started', 'VERB'), ('increasing', 'VERB'), (' ', 'SPACE'), ('use', 'NOUN'), ('cases', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'pobj'), ('power', 'pobj'), ('algorithms', 'pobj'), (',', 'punct'), ('computing', 'conj'), ('amounts', 'conj'), ('data', 'nmod'), (' ', 'nmod'), ('increased', 'amod'), ('companies', 'pobj'), ('started', 'ROOT'), ('increasing', 'amod'), (' ', 'appos'), ('use', 'compound'), ('cases', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[ , power], [power, algorithms], [algorithms, ,], [,, computing], [computing, amounts], [amounts, data], [data,  ], [ , increased], [increased, companies], [companies, started], [started, increasing], [increasing,  ], [ , use], [use, cases], [cases, .]]

>> Trigrams: 
[[ , power, algorithms], [power, algorithms, ,], [algorithms, ,, computing], [,, computing, amounts], [computing, amounts, data], [amounts, data,  ], [data,  , increased], [ , increased, companies], [increased, companies, started], [companies, started, increasing], [started, increasing,  ], [increasing,  , use], [ , use, cases], [use, cases, .]]

>> Noun Phrases are: 
[the power, algorithms, amounts, data  increased companies, an increasing amount, use cases]

>> Named Entities are: 
[] 

------------------- Sentence 5 -------------------

AI started to become an essential value. 


>> Tokens are: 
[AI, started, essential, value, .] 

>> PoS Tags are: 
[('AI', 'PROPN'), ('started', 'VERB'), ('essential', 'ADJ'), ('value', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('AI', 'nsubj'), ('started', 'ROOT'), ('essential', 'amod'), ('value', 'attr'), ('.', 'punct')]

>> Bigrams: 
[[AI, started], [started, essential], [essential, value], [value, .]]

>> Trigrams: 
[[AI, started, essential], [started, essential, value], [essential, value, .]]

>> Noun Phrases are: 
[AI, an essential value]

>> Named Entities are: 
[('AI', 'ORG')] 

------------------- Sentence 6 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 7 -------------------

Companies saw that these systems could move them closer  to their customers, drive efficiency, enhance employee  experience and capability, automatize tasks, decrease  costs and improve revenue. 


>> Tokens are: 
[Companies, saw, systems, closer,  , customers, ,, drive, efficiency, ,, enhance, employee,  , experience, capability, ,, automatize, tasks, ,, decrease,  , costs, improve, revenue, .] 

>> PoS Tags are: 
[('Companies', 'NOUN'), ('saw', 'VERB'), ('systems', 'NOUN'), ('closer', 'ADV'), (' ', 'SPACE'), ('customers', 'NOUN'), (',', 'PUNCT'), ('drive', 'VERB'), ('efficiency', 'NOUN'), (',', 'PUNCT'), ('enhance', 'VERB'), ('employee', 'NOUN'), (' ', 'SPACE'), ('experience', 'NOUN'), ('capability', 'NOUN'), (',', 'PUNCT'), ('automatize', 'NOUN'), ('tasks', 'NOUN'), (',', 'PUNCT'), ('decrease', 'VERB'), (' ', 'SPACE'), ('costs', 'NOUN'), ('improve', 'VERB'), ('revenue', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Companies', 'nsubj'), ('saw', 'ROOT'), ('systems', 'nsubj'), ('closer', 'advmod'), (' ', 'npadvmod'), ('customers', 'pobj'), (',', 'punct'), ('drive', 'conj'), ('efficiency', 'dobj'), (',', 'punct'), ('enhance', 'conj'), ('employee', 'compound'), (' ', 'compound'), ('experience', 'dobj'), ('capability', 'conj'), (',', 'punct'), ('automatize', 'compound'), ('tasks', 'conj'), (',', 'punct'), ('decrease', 'conj'), (' ', 'nmod'), ('costs', 'dobj'), ('improve', 'conj'), ('revenue', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Companies, saw], [saw, systems], [systems, closer], [closer,  ], [ , customers], [customers, ,], [,, drive], [drive, efficiency], [efficiency, ,], [,, enhance], [enhance, employee], [employee,  ], [ , experience], [experience, capability], [capability, ,], [,, automatize], [automatize, tasks], [tasks, ,], [,, decrease], [decrease,  ], [ , costs], [costs, improve], [improve, revenue], [revenue, .]]

>> Trigrams: 
[[Companies, saw, systems], [saw, systems, closer], [systems, closer,  ], [closer,  , customers], [ , customers, ,], [customers, ,, drive], [,, drive, efficiency], [drive, efficiency, ,], [efficiency, ,, enhance], [,, enhance, employee], [enhance, employee,  ], [employee,  , experience], [ , experience, capability], [experience, capability, ,], [capability, ,, automatize], [,, automatize, tasks], [automatize, tasks, ,], [tasks, ,, decrease], [,, decrease,  ], [decrease,  , costs], [ , costs, improve], [costs, improve, revenue], [improve, revenue, .]]

>> Noun Phrases are: 
[Companies, these systems, them, their customers, efficiency, employee  experience, capability, automatize tasks,  costs, revenue]

>> Named Entities are: 
[] 

------------------- Sentence 8 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 54 =================================

But AI went through some lulls and spikes before it became  capable of enabling so many benefits. At a certain point the  general public gave up on AI and machine learning as a whole,  which stalled developments and investments. For instance,  when Defense Advanced Research Projects Agency (DARPA)  worked together with Carnegie Mellon to implement speech  recognition for their pilots, they cut the project in 1974 after  having spent millions of dollars on it. From the 1960s to 1974,  the main funding for AI came from governments. But after  1974 there was barely any government funding because 

------------------- Sentence 1 -------------------

But AI went through some lulls and spikes before it became  capable of enabling so many benefits. 


>> Tokens are: 
[AI, went, lulls, spikes,  , capable, enabling, benefits, .] 

>> PoS Tags are: 
[('AI', 'PROPN'), ('went', 'VERB'), ('lulls', 'NOUN'), ('spikes', 'NOUN'), (' ', 'SPACE'), ('capable', 'ADJ'), ('enabling', 'VERB'), ('benefits', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('AI', 'nsubj'), ('went', 'ROOT'), ('lulls', 'pobj'), ('spikes', 'conj'), (' ', 'attr'), ('capable', 'amod'), ('enabling', 'pcomp'), ('benefits', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[AI, went], [went, lulls], [lulls, spikes], [spikes,  ], [ , capable], [capable, enabling], [enabling, benefits], [benefits, .]]

>> Trigrams: 
[[AI, went, lulls], [went, lulls, spikes], [lulls, spikes,  ], [spikes,  , capable], [ , capable, enabling], [capable, enabling, benefits], [enabling, benefits, .]]

>> Noun Phrases are: 
[AI, some lulls, spikes, it, so many benefits]

>> Named Entities are: 
[('AI', 'ORG')] 

------------------- Sentence 2 -------------------

At a certain point the  general public gave up on AI and machine learning as a whole,  which stalled developments and investments. 


>> Tokens are: 
[certain, point,  , general, public, gave, AI, machine, learning, ,,  , stalled, developments, investments, .] 

>> PoS Tags are: 
[('certain', 'ADJ'), ('point', 'NOUN'), (' ', 'SPACE'), ('general', 'ADJ'), ('public', 'NOUN'), ('gave', 'VERB'), ('AI', 'PROPN'), ('machine', 'NOUN'), ('learning', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('stalled', 'VERB'), ('developments', 'NOUN'), ('investments', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('certain', 'amod'), ('point', 'pobj'), (' ', 'nmod'), ('general', 'amod'), ('public', 'nsubj'), ('gave', 'ROOT'), ('AI', 'pobj'), ('machine', 'conj'), ('learning', 'pobj'), (',', 'punct'), (' ', 'dobj'), ('stalled', 'relcl'), ('developments', 'dobj'), ('investments', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[certain, point], [point,  ], [ , general], [general, public], [public, gave], [gave, AI], [AI, machine], [machine, learning], [learning, ,], [,,  ], [ , stalled], [stalled, developments], [developments, investments], [investments, .]]

>> Trigrams: 
[[certain, point,  ], [point,  , general], [ , general, public], [general, public, gave], [public, gave, AI], [gave, AI, machine], [AI, machine, learning], [machine, learning, ,], [learning, ,,  ], [,,  , stalled], [ , stalled, developments], [stalled, developments, investments], [developments, investments, .]]

>> Noun Phrases are: 
[a certain point, the  general public, AI, machine, learning, a whole, developments, investments]

>> Named Entities are: 
[('AI', 'ORG')] 

------------------- Sentence 3 -------------------

For instance,  when Defense Advanced Research Projects Agency (DARPA)  worked together with Carnegie Mellon to implement speech  recognition for their pilots, they cut the project in 1974 after  having spent millions of dollars on it. 


>> Tokens are: 
[instance, ,,  , Defense, Advanced, Research, Projects, Agency, (, DARPA, ),  , worked, Carnegie, Mellon, implement, speech,  , recognition, pilots, ,, cut, project, 1974,  , having, spent, millions, dollars, .] 

>> PoS Tags are: 
[('instance', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('Defense', 'PROPN'), ('Advanced', 'PROPN'), ('Research', 'PROPN'), ('Projects', 'PROPN'), ('Agency', 'PROPN'), ('(', 'PUNCT'), ('DARPA', 'PROPN'), (')', 'PUNCT'), (' ', 'SPACE'), ('worked', 'VERB'), ('Carnegie', 'PROPN'), ('Mellon', 'PROPN'), ('implement', 'VERB'), ('speech', 'NOUN'), (' ', 'SPACE'), ('recognition', 'NOUN'), ('pilots', 'NOUN'), (',', 'PUNCT'), ('cut', 'VERB'), ('project', 'NOUN'), ('1974', 'NUM'), (' ', 'SPACE'), ('having', 'AUX'), ('spent', 'VERB'), ('millions', 'NOUN'), ('dollars', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('instance', 'pobj'), (',', 'punct'), (' ', 'nsubj'), ('Defense', 'compound'), ('Advanced', 'compound'), ('Research', 'compound'), ('Projects', 'compound'), ('Agency', 'nmod'), ('(', 'punct'), ('DARPA', 'appos'), (')', 'punct'), (' ', 'nsubj'), ('worked', 'advcl'), ('Carnegie', 'compound'), ('Mellon', 'pobj'), ('implement', 'advcl'), ('speech', 'dobj'), (' ', 'nummod'), ('recognition', 'dobj'), ('pilots', 'pobj'), (',', 'punct'), ('cut', 'ROOT'), ('project', 'dobj'), ('1974', 'pobj'), (' ', 'nsubj'), ('having', 'aux'), ('spent', 'pcomp'), ('millions', 'dobj'), ('dollars', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[instance, ,], [,,  ], [ , Defense], [Defense, Advanced], [Advanced, Research], [Research, Projects], [Projects, Agency], [Agency, (], [(, DARPA], [DARPA, )], [),  ], [ , worked], [worked, Carnegie], [Carnegie, Mellon], [Mellon, implement], [implement, speech], [speech,  ], [ , recognition], [recognition, pilots], [pilots, ,], [,, cut], [cut, project], [project, 1974], [1974,  ], [ , having], [having, spent], [spent, millions], [millions, dollars], [dollars, .]]

>> Trigrams: 
[[instance, ,,  ], [,,  , Defense], [ , Defense, Advanced], [Defense, Advanced, Research], [Advanced, Research, Projects], [Research, Projects, Agency], [Projects, Agency, (], [Agency, (, DARPA], [(, DARPA, )], [DARPA, ),  ], [),  , worked], [ , worked, Carnegie], [worked, Carnegie, Mellon], [Carnegie, Mellon, implement], [Mellon, implement, speech], [implement, speech,  ], [speech,  , recognition], [ , recognition, pilots], [recognition, pilots, ,], [pilots, ,, cut], [,, cut, project], [cut, project, 1974], [project, 1974,  ], [1974,  , having], [ , having, spent], [having, spent, millions], [spent, millions, dollars], [millions, dollars, .]]

>> Noun Phrases are: 
[instance, DARPA, Carnegie Mellon, speech, recognition, their pilots, they, the project, millions, dollars, it]

>> Named Entities are: 
[('Defense Advanced Research Projects Agency', 'ORG'), ('DARPA', 'ORG'), ('Carnegie Mellon', 'ORG'), ('1974', 'DATE'), ('millions of dollars', 'MONEY')] 

------------------- Sentence 4 -------------------

From the 1960s to 1974,  the main funding for AI came from governments. 


>> Tokens are: 
[1960s, 1974, ,,  , main, funding, AI, came, governments, .] 

>> PoS Tags are: 
[('1960s', 'NOUN'), ('1974', 'NUM'), (',', 'PUNCT'), (' ', 'SPACE'), ('main', 'ADJ'), ('funding', 'NOUN'), ('AI', 'PROPN'), ('came', 'VERB'), ('governments', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('1960s', 'pobj'), ('1974', 'pobj'), (',', 'punct'), (' ', 'nsubj'), ('main', 'amod'), ('funding', 'nsubj'), ('AI', 'pobj'), ('came', 'ROOT'), ('governments', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[1960s, 1974], [1974, ,], [,,  ], [ , main], [main, funding], [funding, AI], [AI, came], [came, governments], [governments, .]]

>> Trigrams: 
[[1960s, 1974, ,], [1974, ,,  ], [,,  , main], [ , main, funding], [main, funding, AI], [funding, AI, came], [AI, came, governments], [came, governments, .]]

>> Noun Phrases are: 
[the 1960s, the main funding, AI, governments]

>> Named Entities are: 
[('the 1960s to 1974', 'DATE'), ('AI', 'ORG')] 

------------------- Sentence 5 -------------------

But after  1974 there was barely any government funding because 


>> Tokens are: 
[ , 1974, barely, government, funding] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('1974', 'NUM'), ('barely', 'ADV'), ('government', 'NOUN'), ('funding', 'NOUN')] 

>> Dependency Tags are: 
[(' ', 'pobj'), ('1974', 'nummod'), ('barely', 'advmod'), ('government', 'compound'), ('funding', 'attr')]

>> Bigrams: 
[[ , 1974], [1974, barely], [barely, government], [government, funding]]

>> Trigrams: 
[[ , 1974, barely], [1974, barely, government], [barely, government, funding]]

>> Noun Phrases are: 
[barely any government funding]

>> Named Entities are: 
[('1974', 'DATE')] 


================================ Paragraph 55 =================================

6     Beyond the hype: A guide to understanding and successfully implementing artificial intelligence within your business 

------------------- Sentence 1 -------------------

6     Beyond the hype: A guide to understanding and successfully implementing artificial intelligence within your business 


>> Tokens are: 
[6,     , hype, :, guide, understanding, successfully, implementing, artificial, intelligence, business] 

>> PoS Tags are: 
[('6', 'NUM'), ('    ', 'SPACE'), ('hype', 'NOUN'), (':', 'PUNCT'), ('guide', 'NOUN'), ('understanding', 'NOUN'), ('successfully', 'ADV'), ('implementing', 'VERB'), ('artificial', 'ADJ'), ('intelligence', 'NOUN'), ('business', 'NOUN')] 

>> Dependency Tags are: 
[('6', 'nummod'), ('    ', 'ROOT'), ('hype', 'pobj'), (':', 'punct'), ('guide', 'appos'), ('understanding', 'pobj'), ('successfully', 'advmod'), ('implementing', 'acl'), ('artificial', 'amod'), ('intelligence', 'dobj'), ('business', 'pobj')]

>> Bigrams: 
[[6,     ], [    , hype], [hype, :], [:, guide], [guide, understanding], [understanding, successfully], [successfully, implementing], [implementing, artificial], [artificial, intelligence], [intelligence, business]]

>> Trigrams: 
[[6,     , hype], [    , hype, :], [hype, :, guide], [:, guide, understanding], [guide, understanding, successfully], [understanding, successfully, implementing], [successfully, implementing, artificial], [implementing, artificial, intelligence], [artificial, intelligence, business]]

>> Noun Phrases are: 
[the hype, A guide, understanding, artificial intelligence, your business]

>> Named Entities are: 
[] 


================================ Paragraph 56 =================================

of multiple failed AI projects, so the belief in the feasibility of  AI declined. But after this period, improvements in efficiency  lead to successful business cases, once again proving  value. Today we now see AI as one of the big value drivers  for companies, and to compete most companies must adopt  AI strategies. Three topics have made AI available for many  companies right now:   

------------------- Sentence 1 -------------------

of multiple failed AI projects, so the belief in the feasibility of  AI declined. 


>> Tokens are: 
[multiple, failed, AI, projects, ,, belief, feasibility,  , AI, declined, .] 

>> PoS Tags are: 
[('multiple', 'ADJ'), ('failed', 'VERB'), ('AI', 'NOUN'), ('projects', 'NOUN'), (',', 'PUNCT'), ('belief', 'NOUN'), ('feasibility', 'NOUN'), (' ', 'SPACE'), ('AI', 'PROPN'), ('declined', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('multiple', 'amod'), ('failed', 'amod'), ('AI', 'compound'), ('projects', 'pobj'), (',', 'punct'), ('belief', 'nsubj'), ('feasibility', 'pobj'), (' ', 'pobj'), ('AI', 'nsubj'), ('declined', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[multiple, failed], [failed, AI], [AI, projects], [projects, ,], [,, belief], [belief, feasibility], [feasibility,  ], [ , AI], [AI, declined], [declined, .]]

>> Trigrams: 
[[multiple, failed, AI], [failed, AI, projects], [AI, projects, ,], [projects, ,, belief], [,, belief, feasibility], [belief, feasibility,  ], [feasibility,  , AI], [ , AI, declined], [AI, declined, .]]

>> Noun Phrases are: 
[multiple failed AI projects, the belief, the feasibility, AI]

>> Named Entities are: 
[('AI', 'ORG'), ('AI', 'ORG')] 

------------------- Sentence 2 -------------------

But after this period, improvements in efficiency  lead to successful business cases, once again proving  value. 


>> Tokens are: 
[period, ,, improvements, efficiency,  , lead, successful, business, cases, ,, proving,  , value, .] 

>> PoS Tags are: 
[('period', 'NOUN'), (',', 'PUNCT'), ('improvements', 'NOUN'), ('efficiency', 'NOUN'), (' ', 'SPACE'), ('lead', 'VERB'), ('successful', 'ADJ'), ('business', 'NOUN'), ('cases', 'NOUN'), (',', 'PUNCT'), ('proving', 'VERB'), (' ', 'SPACE'), ('value', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('period', 'pobj'), (',', 'punct'), ('improvements', 'nsubj'), ('efficiency', 'pobj'), (' ', 'punct'), ('lead', 'ROOT'), ('successful', 'amod'), ('business', 'compound'), ('cases', 'pobj'), (',', 'punct'), ('proving', 'advcl'), (' ', 'compound'), ('value', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[period, ,], [,, improvements], [improvements, efficiency], [efficiency,  ], [ , lead], [lead, successful], [successful, business], [business, cases], [cases, ,], [,, proving], [proving,  ], [ , value], [value, .]]

>> Trigrams: 
[[period, ,, improvements], [,, improvements, efficiency], [improvements, efficiency,  ], [efficiency,  , lead], [ , lead, successful], [lead, successful, business], [successful, business, cases], [business, cases, ,], [cases, ,, proving], [,, proving,  ], [proving,  , value], [ , value, .]]

>> Noun Phrases are: 
[this period, improvements, efficiency, successful business cases,  value]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

Today we now see AI as one of the big value drivers  for companies, and to compete most companies must adopt  AI strategies. 


>> Tokens are: 
[Today, AI, big, value, drivers,  , companies, ,, compete, companies, adopt,  , AI, strategies, .] 

>> PoS Tags are: 
[('Today', 'NOUN'), ('AI', 'PROPN'), ('big', 'ADJ'), ('value', 'NOUN'), ('drivers', 'NOUN'), (' ', 'SPACE'), ('companies', 'NOUN'), (',', 'PUNCT'), ('compete', 'VERB'), ('companies', 'NOUN'), ('adopt', 'VERB'), (' ', 'SPACE'), ('AI', 'PROPN'), ('strategies', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Today', 'npadvmod'), ('AI', 'dobj'), ('big', 'amod'), ('value', 'pobj'), ('drivers', 'compound'), (' ', 'dobj'), ('companies', 'pobj'), (',', 'punct'), ('compete', 'conj'), ('companies', 'nsubj'), ('adopt', 'ccomp'), (' ', 'dative'), ('AI', 'compound'), ('strategies', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Today, AI], [AI, big], [big, value], [value, drivers], [drivers,  ], [ , companies], [companies, ,], [,, compete], [compete, companies], [companies, adopt], [adopt,  ], [ , AI], [AI, strategies], [strategies, .]]

>> Trigrams: 
[[Today, AI, big], [AI, big, value], [big, value, drivers], [value, drivers,  ], [drivers,  , companies], [ , companies, ,], [companies, ,, compete], [,, compete, companies], [compete, companies, adopt], [companies, adopt,  ], [adopt,  , AI], [ , AI, strategies], [AI, strategies, .]]

>> Noun Phrases are: 
[we, AI, the big value, companies, most companies, AI strategies]

>> Named Entities are: 
[('Today', 'DATE'), ('AI', 'ORG'), ('one', 'CARDINAL'), ('AI', 'ORG')] 

------------------- Sentence 4 -------------------

Three topics have made AI available for many  companies right now: 


>> Tokens are: 
[topics, AI, available,  , companies, right, :] 

>> PoS Tags are: 
[('topics', 'NOUN'), ('AI', 'PROPN'), ('available', 'ADJ'), (' ', 'SPACE'), ('companies', 'NOUN'), ('right', 'ADV'), (':', 'PUNCT')] 

>> Dependency Tags are: 
[('topics', 'nsubj'), ('AI', 'nsubj'), ('available', 'ccomp'), (' ', 'compound'), ('companies', 'pobj'), ('right', 'advmod'), (':', 'punct')]

>> Bigrams: 
[[topics, AI], [AI, available], [available,  ], [ , companies], [companies, right], [right, :]]

>> Trigrams: 
[[topics, AI, available], [AI, available,  ], [available,  , companies], [ , companies, right], [companies, right, :]]

>> Noun Phrases are: 
[Three topics, AI, many  companies]

>> Named Entities are: 
[('Three', 'CARDINAL'), ('AI', 'ORG')] 

------------------- Sentence 5 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 57 =================================

 — The evolution of data: A factor contributing to the  massive adoption of AI is the exponential growth of  available data. With the introduction of the Internet,  social media, proliferation of sensors and smart devices,  and the fact that data storage became cheaper, it became  more accessible than ever before.  

------------------- Sentence 1 -------------------

 — The evolution of data: A factor contributing to the  massive adoption of AI is the exponential growth of  available data. 


>> Tokens are: 
[ , —, evolution, data, :, factor, contributing,  , massive, adoption, AI, exponential, growth,  , available, data, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('—', 'PUNCT'), ('evolution', 'NOUN'), ('data', 'NOUN'), (':', 'PUNCT'), ('factor', 'NOUN'), ('contributing', 'VERB'), (' ', 'SPACE'), ('massive', 'ADJ'), ('adoption', 'NOUN'), ('AI', 'PROPN'), ('exponential', 'ADJ'), ('growth', 'NOUN'), (' ', 'SPACE'), ('available', 'ADJ'), ('data', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'dep'), ('—', 'punct'), ('evolution', 'appos'), ('data', 'pobj'), (':', 'punct'), ('factor', 'appos'), ('contributing', 'acl'), (' ', 'nmod'), ('massive', 'amod'), ('adoption', 'pobj'), ('AI', 'pobj'), ('exponential', 'amod'), ('growth', 'attr'), (' ', 'pobj'), ('available', 'amod'), ('data', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[ , —], [—, evolution], [evolution, data], [data, :], [:, factor], [factor, contributing], [contributing,  ], [ , massive], [massive, adoption], [adoption, AI], [AI, exponential], [exponential, growth], [growth,  ], [ , available], [available, data], [data, .]]

>> Trigrams: 
[[ , —, evolution], [—, evolution, data], [evolution, data, :], [data, :, factor], [:, factor, contributing], [factor, contributing,  ], [contributing,  , massive], [ , massive, adoption], [massive, adoption, AI], [adoption, AI, exponential], [AI, exponential, growth], [exponential, growth,  ], [growth,  , available], [ , available, data], [available, data, .]]

>> Noun Phrases are: 
[The evolution, data, A factor, the  massive adoption, AI, the exponential growth, available data]

>> Named Entities are: 
[('AI', 'ORG')] 

------------------- Sentence 2 -------------------

With the introduction of the Internet,  social media, proliferation of sensors and smart devices,  and the fact that data storage became cheaper, it became  more accessible than ever before. 


>> Tokens are: 
[introduction, Internet, ,,  , social, media, ,, proliferation, sensors, smart, devices, ,,  , fact, data, storage, cheaper, ,,  , accessible, .] 

>> PoS Tags are: 
[('introduction', 'NOUN'), ('Internet', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('social', 'ADJ'), ('media', 'NOUN'), (',', 'PUNCT'), ('proliferation', 'NOUN'), ('sensors', 'NOUN'), ('smart', 'ADJ'), ('devices', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('fact', 'NOUN'), ('data', 'NOUN'), ('storage', 'NOUN'), ('cheaper', 'ADJ'), (',', 'PUNCT'), (' ', 'SPACE'), ('accessible', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('introduction', 'pobj'), ('Internet', 'pobj'), (',', 'punct'), (' ', 'nmod'), ('social', 'amod'), ('media', 'pobj'), (',', 'punct'), ('proliferation', 'conj'), ('sensors', 'pobj'), ('smart', 'amod'), ('devices', 'conj'), (',', 'punct'), (' ', 'conj'), ('fact', 'conj'), ('data', 'compound'), ('storage', 'nsubj'), ('cheaper', 'acomp'), (',', 'punct'), (' ', 'attr'), ('accessible', 'amod'), ('.', 'punct')]

>> Bigrams: 
[[introduction, Internet], [Internet, ,], [,,  ], [ , social], [social, media], [media, ,], [,, proliferation], [proliferation, sensors], [sensors, smart], [smart, devices], [devices, ,], [,,  ], [ , fact], [fact, data], [data, storage], [storage, cheaper], [cheaper, ,], [,,  ], [ , accessible], [accessible, .]]

>> Trigrams: 
[[introduction, Internet, ,], [Internet, ,,  ], [,,  , social], [ , social, media], [social, media, ,], [media, ,, proliferation], [,, proliferation, sensors], [proliferation, sensors, smart], [sensors, smart, devices], [smart, devices, ,], [devices, ,,  ], [,,  , fact], [ , fact, data], [fact, data, storage], [data, storage, cheaper], [storage, cheaper, ,], [cheaper, ,,  ], [,,  , accessible], [ , accessible, .]]

>> Noun Phrases are: 
[the introduction, the Internet,  social media, proliferation, sensors, smart devices, the fact, data storage, it]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 58 =================================

 — The evolution of algorithms: Algorithms have been  around since we could write. Recently, the development  of more advanced algorithms has helped AI become  more powerful and efficient. 

------------------- Sentence 1 -------------------

 — The evolution of algorithms: 


>> Tokens are: 
[ , —, evolution, algorithms, :] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('—', 'PUNCT'), ('evolution', 'NOUN'), ('algorithms', 'NOUN'), (':', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'ROOT'), ('—', 'punct'), ('evolution', 'appos'), ('algorithms', 'pobj'), (':', 'punct')]

>> Bigrams: 
[[ , —], [—, evolution], [evolution, algorithms], [algorithms, :]]

>> Trigrams: 
[[ , —, evolution], [—, evolution, algorithms], [evolution, algorithms, :]]

>> Noun Phrases are: 
[The evolution, algorithms]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Algorithms have been  around since we could write. 


>> Tokens are: 
[Algorithms,  , write, .] 

>> PoS Tags are: 
[('Algorithms', 'NOUN'), (' ', 'SPACE'), ('write', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Algorithms', 'nsubj'), (' ', 'attr'), ('write', 'advcl'), ('.', 'punct')]

>> Bigrams: 
[[Algorithms,  ], [ , write], [write, .]]

>> Trigrams: 
[[Algorithms,  , write], [ , write, .]]

>> Noun Phrases are: 
[Algorithms, we]

>> Named Entities are: 
[('Algorithms', 'PERSON')] 

------------------- Sentence 3 -------------------

Recently, the development  of more advanced algorithms has helped AI become  more powerful and efficient. 


>> Tokens are: 
[Recently, ,, development,  , advanced, algorithms, helped, AI,  , powerful, efficient, .] 

>> PoS Tags are: 
[('Recently', 'ADV'), (',', 'PUNCT'), ('development', 'NOUN'), (' ', 'SPACE'), ('advanced', 'ADJ'), ('algorithms', 'NOUN'), ('helped', 'VERB'), ('AI', 'PROPN'), (' ', 'SPACE'), ('powerful', 'ADJ'), ('efficient', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Recently', 'advmod'), (',', 'punct'), ('development', 'nsubj'), (' ', 'appos'), ('advanced', 'amod'), ('algorithms', 'pobj'), ('helped', 'ROOT'), ('AI', 'nsubj'), (' ', 'attr'), ('powerful', 'amod'), ('efficient', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[Recently, ,], [,, development], [development,  ], [ , advanced], [advanced, algorithms], [algorithms, helped], [helped, AI], [AI,  ], [ , powerful], [powerful, efficient], [efficient, .]]

>> Trigrams: 
[[Recently, ,, development], [,, development,  ], [development,  , advanced], [ , advanced, algorithms], [advanced, algorithms, helped], [algorithms, helped, AI], [helped, AI,  ], [AI,  , powerful], [ , powerful, efficient], [powerful, efficient, .]]

>> Noun Phrases are: 
[the development, more advanced algorithms, AI]

>> Named Entities are: 
[('AI', 'ORG')] 


================================ Paragraph 59 =================================

 — The evolution of computing: Another major factor in  AI’s current success is its computing power. Back when  AI was just beginning to be developed, the computing  power was minimal. Computers nowadays can take much  more data and heavier algorithms than in the 1950s.  

------------------- Sentence 1 -------------------

 — The evolution of computing: Another major factor in  AI’s current success is its computing power. 


>> Tokens are: 
[ , —, evolution, computing, :, major, factor,  , AI, current, success, computing, power, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('—', 'PUNCT'), ('evolution', 'NOUN'), ('computing', 'NOUN'), (':', 'PUNCT'), ('major', 'ADJ'), ('factor', 'NOUN'), (' ', 'SPACE'), ('AI', 'PROPN'), ('current', 'ADJ'), ('success', 'NOUN'), ('computing', 'NOUN'), ('power', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'dep'), ('—', 'punct'), ('evolution', 'appos'), ('computing', 'pobj'), (':', 'punct'), ('major', 'amod'), ('factor', 'appos'), (' ', 'pobj'), ('AI', 'poss'), ('current', 'amod'), ('success', 'conj'), ('computing', 'compound'), ('power', 'attr'), ('.', 'punct')]

>> Bigrams: 
[[ , —], [—, evolution], [evolution, computing], [computing, :], [:, major], [major, factor], [factor,  ], [ , AI], [AI, current], [current, success], [success, computing], [computing, power], [power, .]]

>> Trigrams: 
[[ , —, evolution], [—, evolution, computing], [evolution, computing, :], [computing, :, major], [:, major, factor], [major, factor,  ], [factor,  , AI], [ , AI, current], [AI, current, success], [current, success, computing], [success, computing, power], [computing, power, .]]

>> Noun Phrases are: 
[The evolution, computing, Another major factor, AI’s current success, its computing power]

>> Named Entities are: 
[('AI', 'ORG')] 

------------------- Sentence 2 -------------------

Back when  AI was just beginning to be developed, the computing  power was minimal. 


>> Tokens are: 
[ , AI, beginning, developed, ,, computing,  , power, minimal, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('AI', 'PROPN'), ('beginning', 'VERB'), ('developed', 'VERB'), (',', 'PUNCT'), ('computing', 'NOUN'), (' ', 'SPACE'), ('power', 'NOUN'), ('minimal', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'compound'), ('AI', 'nsubj'), ('beginning', 'advcl'), ('developed', 'xcomp'), (',', 'punct'), ('computing', 'compound'), (' ', 'compound'), ('power', 'nsubj'), ('minimal', 'acomp'), ('.', 'punct')]

>> Bigrams: 
[[ , AI], [AI, beginning], [beginning, developed], [developed, ,], [,, computing], [computing,  ], [ , power], [power, minimal], [minimal, .]]

>> Trigrams: 
[[ , AI, beginning], [AI, beginning, developed], [beginning, developed, ,], [developed, ,, computing], [,, computing,  ], [computing,  , power], [ , power, minimal], [power, minimal, .]]

>> Noun Phrases are: 
[ AI, the computing  power]

>> Named Entities are: 
[('AI', 'ORG')] 

------------------- Sentence 3 -------------------

Computers nowadays can take much  more data and heavier algorithms than in the 1950s. 


>> Tokens are: 
[Computers, nowadays,  , data, heavier, algorithms, 1950s, .] 

>> PoS Tags are: 
[('Computers', 'NOUN'), ('nowadays', 'ADV'), (' ', 'SPACE'), ('data', 'NOUN'), ('heavier', 'ADJ'), ('algorithms', 'NOUN'), ('1950s', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Computers', 'nsubj'), ('nowadays', 'advmod'), (' ', 'dobj'), ('data', 'dobj'), ('heavier', 'amod'), ('algorithms', 'conj'), ('1950s', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Computers, nowadays], [nowadays,  ], [ , data], [data, heavier], [heavier, algorithms], [algorithms, 1950s], [1950s, .]]

>> Trigrams: 
[[Computers, nowadays,  ], [nowadays,  , data], [ , data, heavier], [data, heavier, algorithms], [heavier, algorithms, 1950s], [algorithms, 1950s, .]]

>> Noun Phrases are: 
[Computers, more data, heavier algorithms]

>> Named Entities are: 
[('the 1950s', 'DATE')] 

------------------- Sentence 4 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 60 =================================

These developments would not have taken place without  significant investments and proven business value. 

------------------- Sentence 1 -------------------

These developments would not have taken place without  significant investments and proven business value. 


>> Tokens are: 
[developments, taken, place,  , significant, investments, proven, business, value, .] 

>> PoS Tags are: 
[('developments', 'NOUN'), ('taken', 'VERB'), ('place', 'NOUN'), (' ', 'SPACE'), ('significant', 'ADJ'), ('investments', 'NOUN'), ('proven', 'VERB'), ('business', 'NOUN'), ('value', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('developments', 'nsubj'), ('taken', 'ROOT'), ('place', 'dobj'), (' ', 'pobj'), ('significant', 'amod'), ('investments', 'pobj'), ('proven', 'amod'), ('business', 'compound'), ('value', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[developments, taken], [taken, place], [place,  ], [ , significant], [significant, investments], [investments, proven], [proven, business], [business, value], [value, .]]

>> Trigrams: 
[[developments, taken, place], [taken, place,  ], [place,  , significant], [ , significant, investments], [significant, investments, proven], [investments, proven, business], [proven, business, value], [business, value, .]]

>> Noun Phrases are: 
[These developments, place, significant investments, proven business value]

>> Named Entities are: 
[] 


================================ Paragraph 61 =================================

Figure 3: AI timeline.7  

------------------- Sentence 1 -------------------

Figure 3: AI timeline.7   


>> Tokens are: 
[Figure, 3, :, AI, timeline.7,  ] 

>> PoS Tags are: 
[('Figure', 'NOUN'), ('3', 'NUM'), (':', 'PUNCT'), ('AI', 'PROPN'), ('timeline.7', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Figure', 'ROOT'), ('3', 'nummod'), (':', 'punct'), ('AI', 'compound'), ('timeline.7', 'appos'), (' ', 'nummod')]

>> Bigrams: 
[[Figure, 3], [3, :], [:, AI], [AI, timeline.7], [timeline.7,  ]]

>> Trigrams: 
[[Figure, 3, :], [3, :, AI], [:, AI, timeline.7], [AI, timeline.7,  ]]

>> Noun Phrases are: 
[Figure, AI timeline.7]

>> Named Entities are: 
[('3', 'CARDINAL')] 


================================ Paragraph 62 =================================

● 

------------------- Sentence 1 -------------------

● 


>> Tokens are: 
[●] 

>> PoS Tags are: 
[('●', 'PUNCT')] 

>> Dependency Tags are: 
[('●', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 63 =================================

● 

------------------- Sentence 1 -------------------

● 


>> Tokens are: 
[●] 

>> PoS Tags are: 
[('●', 'PUNCT')] 

>> Dependency Tags are: 
[('●', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 64 =================================

● 

------------------- Sentence 1 -------------------

● 


>> Tokens are: 
[●] 

>> PoS Tags are: 
[('●', 'PUNCT')] 

>> Dependency Tags are: 
[('●', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 65 =================================

● 

------------------- Sentence 1 -------------------

● 


>> Tokens are: 
[●] 

>> PoS Tags are: 
[('●', 'PUNCT')] 

>> Dependency Tags are: 
[('●', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 66 =================================

● 

------------------- Sentence 1 -------------------

● 


>> Tokens are: 
[●] 

>> PoS Tags are: 
[('●', 'PUNCT')] 

>> Dependency Tags are: 
[('●', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 67 =================================

● 

------------------- Sentence 1 -------------------

● 


>> Tokens are: 
[●] 

>> PoS Tags are: 
[('●', 'PUNCT')] 

>> Dependency Tags are: 
[('●', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 68 =================================

● 

------------------- Sentence 1 -------------------

● 


>> Tokens are: 
[●] 

>> PoS Tags are: 
[('●', 'PUNCT')] 

>> Dependency Tags are: 
[('●', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 69 =================================

● 

------------------- Sentence 1 -------------------

● 


>> Tokens are: 
[●] 

>> PoS Tags are: 
[('●', 'PUNCT')] 

>> Dependency Tags are: 
[('●', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 70 =================================

● 

------------------- Sentence 1 -------------------

● 


>> Tokens are: 
[●] 

>> PoS Tags are: 
[('●', 'PUNCT')] 

>> Dependency Tags are: 
[('●', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 71 =================================

● 

------------------- Sentence 1 -------------------

● 


>> Tokens are: 
[●] 

>> PoS Tags are: 
[('●', 'PUNCT')] 

>> Dependency Tags are: 
[('●', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 72 =================================

● 

------------------- Sentence 1 -------------------

● 


>> Tokens are: 
[●] 

>> PoS Tags are: 
[('●', 'PUNCT')] 

>> Dependency Tags are: 
[('●', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 73 =================================

● 

------------------- Sentence 1 -------------------

● 


>> Tokens are: 
[●] 

>> PoS Tags are: 
[('●', 'PUNCT')] 

>> Dependency Tags are: 
[('●', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 74 =================================

● 

------------------- Sentence 1 -------------------

● 


>> Tokens are: 
[●] 

>> PoS Tags are: 
[('●', 'PUNCT')] 

>> Dependency Tags are: 
[('●', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 75 =================================

● 

------------------- Sentence 1 -------------------

● 


>> Tokens are: 
[●] 

>> PoS Tags are: 
[('●', 'PUNCT')] 

>> Dependency Tags are: 
[('●', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 76 =================================

● 

------------------- Sentence 1 -------------------

● 


>> Tokens are: 
[●] 

>> PoS Tags are: 
[('●', 'PUNCT')] 

>> Dependency Tags are: 
[('●', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 77 =================================

● 

------------------- Sentence 1 -------------------

● 


>> Tokens are: 
[●] 

>> PoS Tags are: 
[('●', 'PUNCT')] 

>> Dependency Tags are: 
[('●', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 78 =================================

● 

------------------- Sentence 1 -------------------

● 


>> Tokens are: 
[●] 

>> PoS Tags are: 
[('●', 'PUNCT')] 

>> Dependency Tags are: 
[('●', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 79 =================================

● 

------------------- Sentence 1 -------------------

● 


>> Tokens are: 
[●] 

>> PoS Tags are: 
[('●', 'PUNCT')] 

>> Dependency Tags are: 
[('●', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 80 =================================

● 

------------------- Sentence 1 -------------------

● 


>> Tokens are: 
[●] 

>> PoS Tags are: 
[('●', 'PUNCT')] 

>> Dependency Tags are: 
[('●', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 81 =================================

● 

------------------- Sentence 1 -------------------

● 


>> Tokens are: 
[●] 

>> PoS Tags are: 
[('●', 'PUNCT')] 

>> Dependency Tags are: 
[('●', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 82 =================================

● 

------------------- Sentence 1 -------------------

● 


>> Tokens are: 
[●] 

>> PoS Tags are: 
[('●', 'PUNCT')] 

>> Dependency Tags are: 
[('●', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 83 =================================

● 

------------------- Sentence 1 -------------------

● 


>> Tokens are: 
[●] 

>> PoS Tags are: 
[('●', 'PUNCT')] 

>> Dependency Tags are: 
[('●', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 84 =================================

● 

------------------- Sentence 1 -------------------

● 


>> Tokens are: 
[●] 

>> PoS Tags are: 
[('●', 'PUNCT')] 

>> Dependency Tags are: 
[('●', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 85 =================================

● 

------------------- Sentence 1 -------------------

● 


>> Tokens are: 
[●] 

>> PoS Tags are: 
[('●', 'PUNCT')] 

>> Dependency Tags are: 
[('●', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 86 =================================

Turing publishes the Turing-test. “The point at which a machine  has answers like a human” 

------------------- Sentence 1 -------------------

Turing publishes the Turing-test. 


>> Tokens are: 
[Turing, publishes, Turing, -, test, .] 

>> PoS Tags are: 
[('Turing', 'VERB'), ('publishes', 'VERB'), ('Turing', 'PROPN'), ('-', 'PUNCT'), ('test', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Turing', 'nsubj'), ('publishes', 'ROOT'), ('Turing', 'compound'), ('-', 'punct'), ('test', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Turing, publishes], [publishes, Turing], [Turing, -], [-, test], [test, .]]

>> Trigrams: 
[[Turing, publishes, Turing], [publishes, Turing, -], [Turing, -, test], [-, test, .]]

>> Noun Phrases are: 
[the Turing-test]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

“The point at which 


>> Tokens are: 
[“, point] 

>> PoS Tags are: 
[('“', 'PUNCT'), ('point', 'NOUN')] 

>> Dependency Tags are: 
[('“', 'punct'), ('point', 'ROOT')]

>> Bigrams: 
[[“, point]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[“The point]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

a machine  has answers like a human” 


>> Tokens are: 
[machine,  , answers, like, human, ”] 

>> PoS Tags are: 
[('machine', 'NOUN'), (' ', 'SPACE'), ('answers', 'NOUN'), ('like', 'ADP'), ('human', 'NOUN'), ('”', 'PUNCT')] 

>> Dependency Tags are: 
[('machine', 'ROOT'), (' ', 'nsubj'), ('answers', 'dobj'), ('like', 'prep'), ('human', 'pobj'), ('”', 'punct')]

>> Bigrams: 
[[machine,  ], [ , answers], [answers, like], [like, human], [human, ”]]

>> Trigrams: 
[[machine,  , answers], [ , answers, like], [answers, like, human], [like, human, ”]]

>> Noun Phrases are: 
[a machine, answers, a human]

>> Named Entities are: 
[] 


================================ Paragraph 87 =================================

AI first named by John McCarthy 

------------------- Sentence 1 -------------------

AI first named by John McCarthy 


>> Tokens are: 
[AI, named, John, McCarthy] 

>> PoS Tags are: 
[('AI', 'PROPN'), ('named', 'VERB'), ('John', 'PROPN'), ('McCarthy', 'PROPN')] 

>> Dependency Tags are: 
[('AI', 'ROOT'), ('named', 'acl'), ('John', 'compound'), ('McCarthy', 'pobj')]

>> Bigrams: 
[[AI, named], [named, John], [John, McCarthy]]

>> Trigrams: 
[[AI, named, John], [named, John, McCarthy]]

>> Noun Phrases are: 
[AI, John McCarthy]

>> Named Entities are: 
[('AI', 'ORG'), ('first', 'ORDINAL'), ('John McCarthy', 'PERSON')] 


================================ Paragraph 88 =================================

“First” AI algorithm Logic Theorist by Simon and Newell 

------------------- Sentence 1 -------------------

“First” AI algorithm Logic Theorist by Simon and Newell 


>> Tokens are: 
[“, ”, AI, algorithm, Logic, Theorist, Simon, Newell] 

>> PoS Tags are: 
[('“', 'PUNCT'), ('”', 'PUNCT'), ('AI', 'PROPN'), ('algorithm', 'NOUN'), ('Logic', 'PROPN'), ('Theorist', 'PROPN'), ('Simon', 'PROPN'), ('Newell', 'PROPN')] 

>> Dependency Tags are: 
[('“', 'punct'), ('”', 'punct'), ('AI', 'nmod'), ('algorithm', 'compound'), ('Logic', 'compound'), ('Theorist', 'ROOT'), ('Simon', 'pobj'), ('Newell', 'conj')]

>> Bigrams: 
[[“, ”], [”, AI], [AI, algorithm], [algorithm, Logic], [Logic, Theorist], [Theorist, Simon], [Simon, Newell]]

>> Trigrams: 
[[“, ”, AI], [”, AI, algorithm], [AI, algorithm, Logic], [algorithm, Logic, Theorist], [Logic, Theorist, Simon], [Theorist, Simon, Newell]]

>> Noun Phrases are: 
[“First” AI algorithm Logic Theorist, Simon, Newell]

>> Named Entities are: 
[('First', 'ORDINAL'), ('Logic Theorist', 'ORG'), ('Simon', 'PERSON')] 


================================ Paragraph 89 =================================

Rosenblatt invents the first self learning algorithm with  the perceptron 

------------------- Sentence 1 -------------------

Rosenblatt invents the first self learning algorithm with  the perceptron 


>> Tokens are: 
[Rosenblatt, invents, self, learning, algorithm,  , perceptron] 

>> PoS Tags are: 
[('Rosenblatt', 'PROPN'), ('invents', 'VERB'), ('self', 'NOUN'), ('learning', 'VERB'), ('algorithm', 'NOUN'), (' ', 'SPACE'), ('perceptron', 'NOUN')] 

>> Dependency Tags are: 
[('Rosenblatt', 'nsubj'), ('invents', 'ROOT'), ('self', 'nsubj'), ('learning', 'xcomp'), ('algorithm', 'dobj'), (' ', 'pobj'), ('perceptron', 'dobj')]

>> Bigrams: 
[[Rosenblatt, invents], [invents, self], [self, learning], [learning, algorithm], [algorithm,  ], [ , perceptron]]

>> Trigrams: 
[[Rosenblatt, invents, self], [invents, self, learning], [self, learning, algorithm], [learning, algorithm,  ], [algorithm,  , perceptron]]

>> Noun Phrases are: 
[Rosenblatt, the first self, algorithm, the perceptron]

>> Named Entities are: 
[('first', 'ORDINAL')] 


================================ Paragraph 90 =================================

IBM 305, the first hard drive, 5 MB 

------------------- Sentence 1 -------------------

IBM 305, the first hard drive, 5 MB 


>> Tokens are: 
[IBM, 305, ,, hard, drive, ,, 5, MB] 

>> PoS Tags are: 
[('IBM', 'PROPN'), ('305', 'NUM'), (',', 'PUNCT'), ('hard', 'ADJ'), ('drive', 'NOUN'), (',', 'PUNCT'), ('5', 'NUM'), ('MB', 'NOUN')] 

>> Dependency Tags are: 
[('IBM', 'ROOT'), ('305', 'nummod'), (',', 'punct'), ('hard', 'amod'), ('drive', 'appos'), (',', 'punct'), ('5', 'nummod'), ('MB', 'appos')]

>> Bigrams: 
[[IBM, 305], [305, ,], [,, hard], [hard, drive], [drive, ,], [,, 5], [5, MB]]

>> Trigrams: 
[[IBM, 305, ,], [305, ,, hard], [,, hard, drive], [hard, drive, ,], [drive, ,, 5], [,, 5, MB]]

>> Noun Phrases are: 
[IBM, the first hard drive, 5 MB]

>> Named Entities are: 
[('IBM', 'ORG'), ('305', 'CARDINAL'), ('first', 'ORDINAL'), ('5', 'CARDINAL')] 


================================ Paragraph 91 =================================

Backpropagation, one of the most important areas of a neural  network, is proposed  

------------------- Sentence 1 -------------------

Backpropagation, one of the most important areas of a neural  network, is proposed   


>> Tokens are: 
[Backpropagation, ,, important, areas, neural,  , network, ,, proposed,  ] 

>> PoS Tags are: 
[('Backpropagation', 'PROPN'), (',', 'PUNCT'), ('important', 'ADJ'), ('areas', 'NOUN'), ('neural', 'ADJ'), (' ', 'SPACE'), ('network', 'NOUN'), (',', 'PUNCT'), ('proposed', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Backpropagation', 'nsubjpass'), (',', 'punct'), ('important', 'amod'), ('areas', 'pobj'), ('neural', 'amod'), (' ', 'compound'), ('network', 'pobj'), (',', 'punct'), ('proposed', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[Backpropagation, ,], [,, important], [important, areas], [areas, neural], [neural,  ], [ , network], [network, ,], [,, proposed], [proposed,  ]]

>> Trigrams: 
[[Backpropagation, ,, important], [,, important, areas], [important, areas, neural], [areas, neural,  ], [neural,  , network], [ , network, ,], [network, ,, proposed], [,, proposed,  ]]

>> Noun Phrases are: 
[Backpropagation, the most important areas, a neural  network]

>> Named Entities are: 
[] 


================================ Paragraph 92 =================================

IBM 1330, 100MB 

------------------- Sentence 1 -------------------

IBM 1330, 100MB 


>> Tokens are: 
[IBM, 1330, ,, 100, MB] 

>> PoS Tags are: 
[('IBM', 'PROPN'), ('1330', 'NUM'), (',', 'PUNCT'), ('100', 'NUM'), ('MB', 'NOUN')] 

>> Dependency Tags are: 
[('IBM', 'ROOT'), ('1330', 'nummod'), (',', 'punct'), ('100', 'nummod'), ('MB', 'appos')]

>> Bigrams: 
[[IBM, 1330], [1330, ,], [,, 100], [100, MB]]

>> Trigrams: 
[[IBM, 1330, ,], [1330, ,, 100], [,, 100, MB]]

>> Noun Phrases are: 
[IBM, 100MB]

>> Named Entities are: 
[('IBM', 'ORG'), ('1330', 'CARDINAL'), ('100', 'CARDINAL')] 


================================ Paragraph 93 =================================

Intel produces second generation general purpose chips First AI winter, the belief in machine learning and AI had dropped  after multiple unsuccessful experiments combined with insufficient  computing power, network capabilities and database capacity 

------------------- Sentence 1 -------------------

Intel produces second generation general purpose chips First AI winter, the belief in machine learning and AI had dropped  after multiple unsuccessful experiments combined with insufficient  computing power, network capabilities and database capacity 


>> Tokens are: 
[Intel, produces, second, generation, general, purpose, chips, AI, winter, ,, belief, machine, learning, AI, dropped,  , multiple, unsuccessful, experiments, combined, insufficient,  , computing, power, ,, network, capabilities, database, capacity] 

>> PoS Tags are: 
[('Intel', 'PROPN'), ('produces', 'VERB'), ('second', 'ADJ'), ('generation', 'NOUN'), ('general', 'ADJ'), ('purpose', 'NOUN'), ('chips', 'NOUN'), ('AI', 'PROPN'), ('winter', 'NOUN'), (',', 'PUNCT'), ('belief', 'NOUN'), ('machine', 'NOUN'), ('learning', 'NOUN'), ('AI', 'PROPN'), ('dropped', 'VERB'), (' ', 'SPACE'), ('multiple', 'ADJ'), ('unsuccessful', 'ADJ'), ('experiments', 'NOUN'), ('combined', 'VERB'), ('insufficient', 'ADJ'), (' ', 'SPACE'), ('computing', 'NOUN'), ('power', 'NOUN'), (',', 'PUNCT'), ('network', 'NOUN'), ('capabilities', 'NOUN'), ('database', 'NOUN'), ('capacity', 'NOUN')] 

>> Dependency Tags are: 
[('Intel', 'nsubj'), ('produces', 'ROOT'), ('second', 'amod'), ('generation', 'nmod'), ('general', 'amod'), ('purpose', 'compound'), ('chips', 'compound'), ('AI', 'compound'), ('winter', 'dobj'), (',', 'punct'), ('belief', 'conj'), ('machine', 'compound'), ('learning', 'pobj'), ('AI', 'conj'), ('dropped', 'conj'), (' ', 'dobj'), ('multiple', 'amod'), ('unsuccessful', 'amod'), ('experiments', 'pobj'), ('combined', 'acl'), ('insufficient', 'amod'), (' ', 'compound'), ('computing', 'compound'), ('power', 'pobj'), (',', 'punct'), ('network', 'compound'), ('capabilities', 'conj'), ('database', 'compound'), ('capacity', 'conj')]

>> Bigrams: 
[[Intel, produces], [produces, second], [second, generation], [generation, general], [general, purpose], [purpose, chips], [chips, AI], [AI, winter], [winter, ,], [,, belief], [belief, machine], [machine, learning], [learning, AI], [AI, dropped], [dropped,  ], [ , multiple], [multiple, unsuccessful], [unsuccessful, experiments], [experiments, combined], [combined, insufficient], [insufficient,  ], [ , computing], [computing, power], [power, ,], [,, network], [network, capabilities], [capabilities, database], [database, capacity]]

>> Trigrams: 
[[Intel, produces, second], [produces, second, generation], [second, generation, general], [generation, general, purpose], [general, purpose, chips], [purpose, chips, AI], [chips, AI, winter], [AI, winter, ,], [winter, ,, belief], [,, belief, machine], [belief, machine, learning], [machine, learning, AI], [learning, AI, dropped], [AI, dropped,  ], [dropped,  , multiple], [ , multiple, unsuccessful], [multiple, unsuccessful, experiments], [unsuccessful, experiments, combined], [experiments, combined, insufficient], [combined, insufficient,  ], [insufficient,  , computing], [ , computing, power], [computing, power, ,], [power, ,, network], [,, network, capabilities], [network, capabilities, database], [capabilities, database, capacity]]

>> Noun Phrases are: 
[Intel, second generation general purpose chips First AI winter, the belief, machine learning, AI, multiple unsuccessful experiments, insufficient  computing power, network capabilities, database capacity]

>> Named Entities are: 
[('Intel', 'ORG'), ('second', 'ORDINAL'), ('First AI', 'EVENT'), ('winter', 'DATE'), ('AI', 'ORG')] 


================================ Paragraph 94 =================================

IBM 0665 hard drive, 40 MB. But much smaller than the 1330 

------------------- Sentence 1 -------------------

IBM 0665 hard drive, 40 MB. 


>> Tokens are: 
[IBM, 0665, hard, drive, ,, 40, MB, .] 

>> PoS Tags are: 
[('IBM', 'PROPN'), ('0665', 'NUM'), ('hard', 'ADJ'), ('drive', 'NOUN'), (',', 'PUNCT'), ('40', 'NUM'), ('MB', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('IBM', 'nmod'), ('0665', 'nummod'), ('hard', 'amod'), ('drive', 'ROOT'), (',', 'punct'), ('40', 'nummod'), ('MB', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[IBM, 0665], [0665, hard], [hard, drive], [drive, ,], [,, 40], [40, MB], [MB, .]]

>> Trigrams: 
[[IBM, 0665, hard], [0665, hard, drive], [hard, drive, ,], [drive, ,, 40], [,, 40, MB], [40, MB, .]]

>> Noun Phrases are: 
[IBM 0665 hard drive, 40 MB]

>> Named Entities are: 
[('IBM', 'ORG'), ('40', 'CARDINAL')] 

------------------- Sentence 2 -------------------

But much smaller than the 1330 


>> Tokens are: 
[smaller, 1330] 

>> PoS Tags are: 
[('smaller', 'ADJ'), ('1330', 'NUM')] 

>> Dependency Tags are: 
[('smaller', 'ROOT'), ('1330', 'npadvmod')]

>> Bigrams: 
[[smaller, 1330]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('1330', 'DATE')] 


================================ Paragraph 95 =================================

First convolutional neural network developed  (used a lot in image recognition) 

------------------- Sentence 1 -------------------

First convolutional neural network developed  (used a lot in image recognition) 


>> Tokens are: 
[convolutional, neural, network, developed,  , (, lot, image, recognition, )] 

>> PoS Tags are: 
[('convolutional', 'ADJ'), ('neural', 'ADJ'), ('network', 'NOUN'), ('developed', 'VERB'), (' ', 'SPACE'), ('(', 'PUNCT'), ('lot', 'NOUN'), ('image', 'NOUN'), ('recognition', 'NOUN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('convolutional', 'amod'), ('neural', 'amod'), ('network', 'nsubj'), ('developed', 'ROOT'), (' ', 'dobj'), ('(', 'punct'), ('lot', 'dobj'), ('image', 'compound'), ('recognition', 'pobj'), (')', 'punct')]

>> Bigrams: 
[[convolutional, neural], [neural, network], [network, developed], [developed,  ], [ , (], [(, lot], [lot, image], [image, recognition], [recognition, )]]

>> Trigrams: 
[[convolutional, neural, network], [neural, network, developed], [network, developed,  ], [developed,  , (], [ , (, lot], [(, lot, image], [lot, image, recognition], [image, recognition, )]]

>> Noun Phrases are: 
[First convolutional neural network, a lot, image recognition]

>> Named Entities are: 
[('First', 'ORDINAL')] 


================================ Paragraph 96 =================================

The internet is open for the public 

------------------- Sentence 1 -------------------

The internet is open for the public 


>> Tokens are: 
[internet, open, public] 

>> PoS Tags are: 
[('internet', 'NOUN'), ('open', 'ADJ'), ('public', 'NOUN')] 

>> Dependency Tags are: 
[('internet', 'nsubj'), ('open', 'acomp'), ('public', 'pobj')]

>> Bigrams: 
[[internet, open], [open, public]]

>> Trigrams: 
[[internet, open, public]]

>> Noun Phrases are: 
[The internet, the public]

>> Named Entities are: 
[] 


================================ Paragraph 97 =================================

First versions of  natural language solutions set up.  

------------------- Sentence 1 -------------------

First versions of  natural language solutions set up. 


>> Tokens are: 
[versions,  , natural, language, solutions, set, .] 

>> PoS Tags are: 
[('versions', 'NOUN'), (' ', 'SPACE'), ('natural', 'ADJ'), ('language', 'NOUN'), ('solutions', 'NOUN'), ('set', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('versions', 'ROOT'), (' ', 'nmod'), ('natural', 'amod'), ('language', 'compound'), ('solutions', 'pobj'), ('set', 'acl'), ('.', 'punct')]

>> Bigrams: 
[[versions,  ], [ , natural], [natural, language], [language, solutions], [solutions, set], [set, .]]

>> Trigrams: 
[[versions,  , natural], [ , natural, language], [natural, language, solutions], [language, solutions, set], [solutions, set, .]]

>> Noun Phrases are: 
[First versions,  natural language solutions]

>> Named Entities are: 
[('First', 'ORDINAL')] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 98 =================================

IBM’s deep blue defeats Kasparov in Chess 

------------------- Sentence 1 -------------------

IBM’s deep blue defeats Kasparov in Chess 


>> Tokens are: 
[IBM, deep, blue, defeats, Kasparov, Chess] 

>> PoS Tags are: 
[('IBM', 'PROPN'), ('deep', 'ADJ'), ('blue', 'ADJ'), ('defeats', 'VERB'), ('Kasparov', 'PROPN'), ('Chess', 'PROPN')] 

>> Dependency Tags are: 
[('IBM', 'poss'), ('deep', 'amod'), ('blue', 'amod'), ('defeats', 'ROOT'), ('Kasparov', 'dobj'), ('Chess', 'pobj')]

>> Bigrams: 
[[IBM, deep], [deep, blue], [blue, defeats], [defeats, Kasparov], [Kasparov, Chess]]

>> Trigrams: 
[[IBM, deep, blue], [deep, blue, defeats], [blue, defeats, Kasparov], [defeats, Kasparov, Chess]]

>> Noun Phrases are: 
[Kasparov, Chess]

>> Named Entities are: 
[('IBM', 'ORG'), ('Kasparov', 'PERSON'), ('Chess', 'GPE')] 


================================ Paragraph 99 =================================

Google’s Page rank is published 

------------------- Sentence 1 -------------------

Google’s Page rank is published 


>> Tokens are: 
[Google, Page, rank, published] 

>> PoS Tags are: 
[('Google', 'PROPN'), ('Page', 'PROPN'), ('rank', 'NOUN'), ('published', 'VERB')] 

>> Dependency Tags are: 
[('Google', 'poss'), ('Page', 'compound'), ('rank', 'nsubjpass'), ('published', 'ROOT')]

>> Bigrams: 
[[Google, Page], [Page, rank], [rank, published]]

>> Trigrams: 
[[Google, Page, rank], [Page, rank, published]]

>> Noun Phrases are: 
[Google’s Page rank]

>> Named Entities are: 
[('Google’s Page', 'ORG')] 


================================ Paragraph 100 =================================

The adoption of Internet by the masses  

------------------- Sentence 1 -------------------

The adoption of Internet by the masses   


>> Tokens are: 
[adoption, Internet, masses,  ] 

>> PoS Tags are: 
[('adoption', 'NOUN'), ('Internet', 'NOUN'), ('masses', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('adoption', 'ROOT'), ('Internet', 'pobj'), ('masses', 'pobj'), (' ', 'appos')]

>> Bigrams: 
[[adoption, Internet], [Internet, masses], [masses,  ]]

>> Trigrams: 
[[adoption, Internet, masses], [Internet, masses,  ]]

>> Noun Phrases are: 
[The adoption, Internet, the masses]

>> Named Entities are: 
[] 


================================ Paragraph 101 =================================

Amazon brings cloud computing to the masses 

------------------- Sentence 1 -------------------

Amazon brings cloud computing to the masses 


>> Tokens are: 
[Amazon, brings, cloud, computing, masses] 

>> PoS Tags are: 
[('Amazon', 'PROPN'), ('brings', 'VERB'), ('cloud', 'NOUN'), ('computing', 'VERB'), ('masses', 'NOUN')] 

>> Dependency Tags are: 
[('Amazon', 'nsubj'), ('brings', 'ROOT'), ('cloud', 'dobj'), ('computing', 'dobj'), ('masses', 'pobj')]

>> Bigrams: 
[[Amazon, brings], [brings, cloud], [cloud, computing], [computing, masses]]

>> Trigrams: 
[[Amazon, brings, cloud], [brings, cloud, computing], [cloud, computing, masses]]

>> Noun Phrases are: 
[Amazon, cloud, the masses]

>> Named Entities are: 
[('Amazon', 'ORG')] 


================================ Paragraph 102 =================================

Google develops an algorithm that can handle large amounts  of data faster. 

------------------- Sentence 1 -------------------

Google develops an algorithm that can handle large amounts  of data faster. 


>> Tokens are: 
[Google, develops, algorithm, handle, large, amounts,  , data, faster, .] 

>> PoS Tags are: 
[('Google', 'PROPN'), ('develops', 'VERB'), ('algorithm', 'NOUN'), ('handle', 'VERB'), ('large', 'ADJ'), ('amounts', 'NOUN'), (' ', 'SPACE'), ('data', 'NOUN'), ('faster', 'ADV'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Google', 'nsubj'), ('develops', 'ROOT'), ('algorithm', 'dobj'), ('handle', 'relcl'), ('large', 'amod'), ('amounts', 'dobj'), (' ', 'dobj'), ('data', 'pobj'), ('faster', 'advmod'), ('.', 'punct')]

>> Bigrams: 
[[Google, develops], [develops, algorithm], [algorithm, handle], [handle, large], [large, amounts], [amounts,  ], [ , data], [data, faster], [faster, .]]

>> Trigrams: 
[[Google, develops, algorithm], [develops, algorithm, handle], [algorithm, handle, large], [handle, large, amounts], [large, amounts,  ], [amounts,  , data], [ , data, faster], [data, faster, .]]

>> Noun Phrases are: 
[Google, an algorithm, large amounts, data]

>> Named Entities are: 
[] 


================================ Paragraph 103 =================================

Stanford Robot drives automatically 

------------------- Sentence 1 -------------------

Stanford Robot drives automatically 


>> Tokens are: 
[Stanford, Robot, drives, automatically] 

>> PoS Tags are: 
[('Stanford', 'PROPN'), ('Robot', 'PROPN'), ('drives', 'VERB'), ('automatically', 'ADV')] 

>> Dependency Tags are: 
[('Stanford', 'compound'), ('Robot', 'nsubj'), ('drives', 'ROOT'), ('automatically', 'advmod')]

>> Bigrams: 
[[Stanford, Robot], [Robot, drives], [drives, automatically]]

>> Trigrams: 
[[Stanford, Robot, drives], [Robot, drives, automatically]]

>> Noun Phrases are: 
[Stanford Robot]

>> Named Entities are: 
[('Stanford Robot', 'ORG')] 


================================ Paragraph 104 =================================

IBM introduces Watson. A question answering machine that  later wins from a Jeopardy champion 

------------------- Sentence 1 -------------------

IBM introduces Watson. 


>> Tokens are: 
[IBM, introduces, Watson, .] 

>> PoS Tags are: 
[('IBM', 'PROPN'), ('introduces', 'VERB'), ('Watson', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('IBM', 'nsubj'), ('introduces', 'ROOT'), ('Watson', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[IBM, introduces], [introduces, Watson], [Watson, .]]

>> Trigrams: 
[[IBM, introduces, Watson], [introduces, Watson, .]]

>> Noun Phrases are: 
[IBM, Watson]

>> Named Entities are: 
[('IBM', 'ORG'), ('Watson', 'PERSON')] 

------------------- Sentence 2 -------------------

A question answering machine that  later wins from a Jeopardy champion 


>> Tokens are: 
[question, answering, machine,  , later, wins, Jeopardy, champion] 

>> PoS Tags are: 
[('question', 'NOUN'), ('answering', 'VERB'), ('machine', 'NOUN'), (' ', 'SPACE'), ('later', 'ADV'), ('wins', 'VERB'), ('Jeopardy', 'PROPN'), ('champion', 'NOUN')] 

>> Dependency Tags are: 
[('question', 'compound'), ('answering', 'compound'), ('machine', 'ROOT'), (' ', 'nsubj'), ('later', 'advmod'), ('wins', 'relcl'), ('Jeopardy', 'compound'), ('champion', 'pobj')]

>> Bigrams: 
[[question, answering], [answering, machine], [machine,  ], [ , later], [later, wins], [wins, Jeopardy], [Jeopardy, champion]]

>> Trigrams: 
[[question, answering, machine], [answering, machine,  ], [machine,  , later], [ , later, wins], [later, wins, Jeopardy], [wins, Jeopardy, champion]]

>> Noun Phrases are: 
[A question answering machine, a Jeopardy champion]

>> Named Entities are: 
[('Jeopardy', 'PRODUCT')] 


================================ Paragraph 105 =================================

Worldwide IP traffic exceeds 20 exabytes (20 billion gigabytes) per month 

------------------- Sentence 1 -------------------

Worldwide IP traffic exceeds 20 exabytes (20 billion gigabytes) per month 


>> Tokens are: 
[Worldwide, IP, traffic, exceeds, 20, exabytes, (, 20, billion, gigabytes, ), month] 

>> PoS Tags are: 
[('Worldwide', 'PROPN'), ('IP', 'PROPN'), ('traffic', 'NOUN'), ('exceeds', 'VERB'), ('20', 'NUM'), ('exabytes', 'NOUN'), ('(', 'PUNCT'), ('20', 'NUM'), ('billion', 'NUM'), ('gigabytes', 'NOUN'), (')', 'PUNCT'), ('month', 'NOUN')] 

>> Dependency Tags are: 
[('Worldwide', 'compound'), ('IP', 'compound'), ('traffic', 'nsubj'), ('exceeds', 'ROOT'), ('20', 'nummod'), ('exabytes', 'dobj'), ('(', 'punct'), ('20', 'compound'), ('billion', 'nummod'), ('gigabytes', 'appos'), (')', 'punct'), ('month', 'pobj')]

>> Bigrams: 
[[Worldwide, IP], [IP, traffic], [traffic, exceeds], [exceeds, 20], [20, exabytes], [exabytes, (], [(, 20], [20, billion], [billion, gigabytes], [gigabytes, )], [), month]]

>> Trigrams: 
[[Worldwide, IP, traffic], [IP, traffic, exceeds], [traffic, exceeds, 20], [exceeds, 20, exabytes], [20, exabytes, (], [exabytes, (, 20], [(, 20, billion], [20, billion, gigabytes], [billion, gigabytes, )], [gigabytes, ), month]]

>> Noun Phrases are: 
[Worldwide IP traffic, 20 exabytes, 20 billion gigabytes, month]

>> Named Entities are: 
[('20', 'CARDINAL'), ('20 billion', 'CARDINAL')] 


================================ Paragraph 106 =================================

Facebook gets a billion users 

------------------- Sentence 1 -------------------

Facebook gets a billion users 


>> Tokens are: 
[Facebook, gets, billion, users] 

>> PoS Tags are: 
[('Facebook', 'PROPN'), ('gets', 'VERB'), ('billion', 'NUM'), ('users', 'NOUN')] 

>> Dependency Tags are: 
[('Facebook', 'nsubj'), ('gets', 'ROOT'), ('billion', 'nummod'), ('users', 'dobj')]

>> Bigrams: 
[[Facebook, gets], [gets, billion], [billion, users]]

>> Trigrams: 
[[Facebook, gets, billion], [gets, billion, users]]

>> Noun Phrases are: 
[Facebook, a billion users]

>> Named Entities are: 
[('billion', 'CARDINAL')] 


================================ Paragraph 107 =================================

There are more mobile devices than humans in the world 

------------------- Sentence 1 -------------------

There are more mobile devices than humans in the world 


>> Tokens are: 
[mobile, devices, humans, world] 

>> PoS Tags are: 
[('mobile', 'ADJ'), ('devices', 'NOUN'), ('humans', 'NOUN'), ('world', 'NOUN')] 

>> Dependency Tags are: 
[('mobile', 'amod'), ('devices', 'attr'), ('humans', 'pobj'), ('world', 'pobj')]

>> Bigrams: 
[[mobile, devices], [devices, humans], [humans, world]]

>> Trigrams: 
[[mobile, devices, humans], [devices, humans, world]]

>> Noun Phrases are: 
[more mobile devices, humans, the world]

>> Named Entities are: 
[] 


================================ Paragraph 108 =================================

Project debater of IBM shows ability to process very large data  sets, including millions of news articles across dozens of subjects,  and then turn snippets of arguments into full flowing prose—a  challenging task for a computer 

------------------- Sentence 1 -------------------

Project debater of IBM shows ability to process very large data  sets, including millions of news articles across dozens of subjects,  and then turn snippets of arguments into full flowing prose—a  challenging task for a computer 


>> Tokens are: 
[Project, debater, IBM, shows, ability, process, large, data,  , sets, ,, including, millions, news, articles, dozens, subjects, ,,  , turn, snippets, arguments, flowing, prose, —,  , challenging, task, computer] 

>> PoS Tags are: 
[('Project', 'NOUN'), ('debater', 'NOUN'), ('IBM', 'PROPN'), ('shows', 'VERB'), ('ability', 'NOUN'), ('process', 'VERB'), ('large', 'ADJ'), ('data', 'NOUN'), (' ', 'SPACE'), ('sets', 'NOUN'), (',', 'PUNCT'), ('including', 'VERB'), ('millions', 'NOUN'), ('news', 'NOUN'), ('articles', 'NOUN'), ('dozens', 'NOUN'), ('subjects', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('turn', 'VERB'), ('snippets', 'NOUN'), ('arguments', 'NOUN'), ('flowing', 'VERB'), ('prose', 'NOUN'), ('—', 'PUNCT'), (' ', 'SPACE'), ('challenging', 'VERB'), ('task', 'NOUN'), ('computer', 'NOUN')] 

>> Dependency Tags are: 
[('Project', 'compound'), ('debater', 'nsubj'), ('IBM', 'pobj'), ('shows', 'ROOT'), ('ability', 'dobj'), ('process', 'acl'), ('large', 'amod'), ('data', 'compound'), (' ', 'compound'), ('sets', 'dobj'), (',', 'punct'), ('including', 'prep'), ('millions', 'pobj'), ('news', 'compound'), ('articles', 'pobj'), ('dozens', 'pobj'), ('subjects', 'pobj'), (',', 'punct'), (' ', 'appos'), ('turn', 'conj'), ('snippets', 'dobj'), ('arguments', 'pobj'), ('flowing', 'amod'), ('prose', 'pobj'), ('—', 'punct'), (' ', 'nmod'), ('challenging', 'amod'), ('task', 'dobj'), ('computer', 'pobj')]

>> Bigrams: 
[[Project, debater], [debater, IBM], [IBM, shows], [shows, ability], [ability, process], [process, large], [large, data], [data,  ], [ , sets], [sets, ,], [,, including], [including, millions], [millions, news], [news, articles], [articles, dozens], [dozens, subjects], [subjects, ,], [,,  ], [ , turn], [turn, snippets], [snippets, arguments], [arguments, flowing], [flowing, prose], [prose, —], [—,  ], [ , challenging], [challenging, task], [task, computer]]

>> Trigrams: 
[[Project, debater, IBM], [debater, IBM, shows], [IBM, shows, ability], [shows, ability, process], [ability, process, large], [process, large, data], [large, data,  ], [data,  , sets], [ , sets, ,], [sets, ,, including], [,, including, millions], [including, millions, news], [millions, news, articles], [news, articles, dozens], [articles, dozens, subjects], [dozens, subjects, ,], [subjects, ,,  ], [,,  , turn], [ , turn, snippets], [turn, snippets, arguments], [snippets, arguments, flowing], [arguments, flowing, prose], [flowing, prose, —], [prose, —,  ], [—,  , challenging], [ , challenging, task], [challenging, task, computer]]

>> Noun Phrases are: 
[Project debater, IBM, ability, very large data  sets, millions, news articles, dozens, subjects, snippets, arguments, full flowing prose, a  challenging task, a computer]

>> Named Entities are: 
[('IBM', 'ORG'), ('millions', 'CARDINAL'), ('dozens', 'CARDINAL')] 


================================ Paragraph 109 =================================

1950 

------------------- Sentence 1 -------------------

1950 


>> Tokens are: 
[1950] 

>> PoS Tags are: 
[('1950', 'NUM')] 

>> Dependency Tags are: 
[('1950', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('1950', 'DATE')] 


================================ Paragraph 110 =================================

1955 

------------------- Sentence 1 -------------------

1955 


>> Tokens are: 
[1955] 

>> PoS Tags are: 
[('1955', 'NUM')] 

>> Dependency Tags are: 
[('1955', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('1955', 'DATE')] 


================================ Paragraph 111 =================================

1956 

------------------- Sentence 1 -------------------

1956 


>> Tokens are: 
[1956] 

>> PoS Tags are: 
[('1956', 'NUM')] 

>> Dependency Tags are: 
[('1956', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('1956', 'DATE')] 


================================ Paragraph 112 =================================

1957 

------------------- Sentence 1 -------------------

1957 


>> Tokens are: 
[1957] 

>> PoS Tags are: 
[('1957', 'NUM')] 

>> Dependency Tags are: 
[('1957', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('1957', 'DATE')] 


================================ Paragraph 113 =================================

1958 

------------------- Sentence 1 -------------------

1958 


>> Tokens are: 
[1958] 

>> PoS Tags are: 
[('1958', 'NUM')] 

>> Dependency Tags are: 
[('1958', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('1958', 'DATE')] 


================================ Paragraph 114 =================================

1969 

------------------- Sentence 1 -------------------

1969 


>> Tokens are: 
[1969] 

>> PoS Tags are: 
[('1969', 'NUM')] 

>> Dependency Tags are: 
[('1969', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('1969', 'DATE')] 


================================ Paragraph 115 =================================

1970 

------------------- Sentence 1 -------------------

1970 


>> Tokens are: 
[1970] 

>> PoS Tags are: 
[('1970', 'NUM')] 

>> Dependency Tags are: 
[('1970', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('1970', 'DATE')] 


================================ Paragraph 116 =================================

1974 

------------------- Sentence 1 -------------------

1974 


>> Tokens are: 
[1974] 

>> PoS Tags are: 
[('1974', 'NUM')] 

>> Dependency Tags are: 
[('1974', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('1974', 'DATE')] 


================================ Paragraph 117 =================================

1974-1980 

------------------- Sentence 1 -------------------

1974-1980 


>> Tokens are: 
[1974, -, 1980] 

>> PoS Tags are: 
[('1974', 'NUM'), ('-', 'SYM'), ('1980', 'NUM')] 

>> Dependency Tags are: 
[('1974', 'ROOT'), ('-', 'punct'), ('1980', 'quantmod')]

>> Bigrams: 
[[1974, -], [-, 1980]]

>> Trigrams: 
[[1974, -, 1980]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('1974-1980', 'DATE')] 


================================ Paragraph 118 =================================

1985 

------------------- Sentence 1 -------------------

1985 


>> Tokens are: 
[1985] 

>> PoS Tags are: 
[('1985', 'NUM')] 

>> Dependency Tags are: 
[('1985', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('1985', 'DATE')] 


================================ Paragraph 119 =================================

1989 

------------------- Sentence 1 -------------------

1989 


>> Tokens are: 
[1989] 

>> PoS Tags are: 
[('1989', 'NUM')] 

>> Dependency Tags are: 
[('1989', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('1989', 'DATE')] 


================================ Paragraph 120 =================================

1991 

------------------- Sentence 1 -------------------

1991 


>> Tokens are: 
[1991] 

>> PoS Tags are: 
[('1991', 'NUM')] 

>> Dependency Tags are: 
[('1991', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('1991', 'DATE')] 


================================ Paragraph 121 =================================

1992 

------------------- Sentence 1 -------------------

1992 


>> Tokens are: 
[1992] 

>> PoS Tags are: 
[('1992', 'NUM')] 

>> Dependency Tags are: 
[('1992', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('1992', 'DATE')] 


================================ Paragraph 122 =================================

1997 

------------------- Sentence 1 -------------------

1997 


>> Tokens are: 
[1997] 

>> PoS Tags are: 
[('1997', 'NUM')] 

>> Dependency Tags are: 
[('1997', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('1997', 'DATE')] 


================================ Paragraph 123 =================================

1998 

------------------- Sentence 1 -------------------

1998 


>> Tokens are: 
[1998] 

>> PoS Tags are: 
[('1998', 'NUM')] 

>> Dependency Tags are: 
[('1998', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('1998', 'DATE')] 


================================ Paragraph 124 =================================

2000 

------------------- Sentence 1 -------------------

2000 


>> Tokens are: 
[2000] 

>> PoS Tags are: 
[('2000', 'NUM')] 

>> Dependency Tags are: 
[('2000', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 125 =================================

2002 

------------------- Sentence 1 -------------------

2002 


>> Tokens are: 
[2002] 

>> PoS Tags are: 
[('2002', 'NUM')] 

>> Dependency Tags are: 
[('2002', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('2002', 'DATE')] 


================================ Paragraph 126 =================================

2004 

------------------- Sentence 1 -------------------

2004 


>> Tokens are: 
[2004] 

>> PoS Tags are: 
[('2004', 'NUM')] 

>> Dependency Tags are: 
[('2004', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('2004', 'DATE')] 


================================ Paragraph 127 =================================

2005 

------------------- Sentence 1 -------------------

2005 


>> Tokens are: 
[2005] 

>> PoS Tags are: 
[('2005', 'NUM')] 

>> Dependency Tags are: 
[('2005', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 128 =================================

2006 

------------------- Sentence 1 -------------------

2006 


>> Tokens are: 
[2006] 

>> PoS Tags are: 
[('2006', 'NUM')] 

>> Dependency Tags are: 
[('2006', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('2006', 'DATE')] 


================================ Paragraph 129 =================================

2010 

------------------- Sentence 1 -------------------

2010 


>> Tokens are: 
[2010] 

>> PoS Tags are: 
[('2010', 'NUM')] 

>> Dependency Tags are: 
[('2010', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('2010', 'DATE')] 


================================ Paragraph 130 =================================

2012 

------------------- Sentence 1 -------------------

2012 


>> Tokens are: 
[2012] 

>> PoS Tags are: 
[('2012', 'NUM')] 

>> Dependency Tags are: 
[('2012', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 131 =================================

2014 

------------------- Sentence 1 -------------------

2014 


>> Tokens are: 
[2014] 

>> PoS Tags are: 
[('2014', 'NUM')] 

>> Dependency Tags are: 
[('2014', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('2014', 'DATE')] 


================================ Paragraph 132 =================================

2018

------------------- Sentence 1 -------------------

2018 


>> Tokens are: 
[2018] 

>> PoS Tags are: 
[('2018', 'NUM')] 

>> Dependency Tags are: 
[('2018', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('2018', 'DATE')] 


================================ Paragraph 133 =================================

IBM Services     7 

------------------- Sentence 1 -------------------

IBM Services     7 


>> Tokens are: 
[IBM, Services,     , 7] 

>> PoS Tags are: 
[('IBM', 'PROPN'), ('Services', 'PROPN'), ('    ', 'SPACE'), ('7', 'NUM')] 

>> Dependency Tags are: 
[('IBM', 'compound'), ('Services', 'ROOT'), ('    ', 'appos'), ('7', 'nummod')]

>> Bigrams: 
[[IBM, Services], [Services,     ], [    , 7]]

>> Trigrams: 
[[IBM, Services,     ], [Services,     , 7]]

>> Noun Phrases are: 
[IBM Services]

>> Named Entities are: 
[('IBM Services', 'ORG')] 


================================ Paragraph 134 =================================

Where are we today with AI?  We can split the term AI into three categories: general,  broad and narrow. General AI encompasses all the human- like capabilities, whereas narrow AI can only do a certain  task—and it can do it quite well—but narrow AI can’t  transfer its knowledge to different sorts of problems.  

------------------- Sentence 1 -------------------

Where are we today with AI? 


>> Tokens are: 
[today, AI, ?] 

>> PoS Tags are: 
[('today', 'NOUN'), ('AI', 'PROPN'), ('?', 'PUNCT')] 

>> Dependency Tags are: 
[('today', 'npadvmod'), ('AI', 'pobj'), ('?', 'punct')]

>> Bigrams: 
[[today, AI], [AI, ?]]

>> Trigrams: 
[[today, AI, ?]]

>> Noun Phrases are: 
[we, AI]

>> Named Entities are: 
[('today', 'DATE'), ('AI', 'ORG')] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

We can split the term AI into three categories: general,  broad and narrow. 


>> Tokens are: 
[split, term, AI, categories, :, general, ,,  , broad, narrow, .] 

>> PoS Tags are: 
[('split', 'VERB'), ('term', 'NOUN'), ('AI', 'PROPN'), ('categories', 'NOUN'), (':', 'PUNCT'), ('general', 'ADJ'), (',', 'PUNCT'), (' ', 'SPACE'), ('broad', 'ADJ'), ('narrow', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('split', 'ROOT'), ('term', 'compound'), ('AI', 'dobj'), ('categories', 'pobj'), (':', 'punct'), ('general', 'amod'), (',', 'punct'), (' ', 'conj'), ('broad', 'amod'), ('narrow', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[split, term], [term, AI], [AI, categories], [categories, :], [:, general], [general, ,], [,,  ], [ , broad], [broad, narrow], [narrow, .]]

>> Trigrams: 
[[split, term, AI], [term, AI, categories], [AI, categories, :], [categories, :, general], [:, general, ,], [general, ,,  ], [,,  , broad], [ , broad, narrow], [broad, narrow, .]]

>> Noun Phrases are: 
[We, the term AI, three categories]

>> Named Entities are: 
[('AI', 'ORG'), ('three', 'CARDINAL')] 

------------------- Sentence 4 -------------------

General AI encompasses all the human- like capabilities, whereas narrow AI can only do a certain  task—and it can do it quite well—but narrow AI can’t  transfer its knowledge to different sorts of problems.   


>> Tokens are: 
[General, AI, encompasses, human-, like, capabilities, ,, narrow, AI, certain,  , task, —, —, narrow, AI,  , transfer, knowledge, different, sorts, problems, .,  ] 

>> PoS Tags are: 
[('General', 'PROPN'), ('AI', 'PROPN'), ('encompasses', 'VERB'), ('human-', 'NOUN'), ('like', 'ADP'), ('capabilities', 'NOUN'), (',', 'PUNCT'), ('narrow', 'ADJ'), ('AI', 'NOUN'), ('certain', 'ADJ'), (' ', 'SPACE'), ('task', 'NOUN'), ('—', 'PUNCT'), ('—', 'PUNCT'), ('narrow', 'ADJ'), ('AI', 'NOUN'), (' ', 'SPACE'), ('transfer', 'VERB'), ('knowledge', 'NOUN'), ('different', 'ADJ'), ('sorts', 'NOUN'), ('problems', 'NOUN'), ('.', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('General', 'compound'), ('AI', 'nsubj'), ('encompasses', 'ROOT'), ('human-', 'dobj'), ('like', 'prep'), ('capabilities', 'pobj'), (',', 'punct'), ('narrow', 'amod'), ('AI', 'nsubj'), ('certain', 'amod'), (' ', 'compound'), ('task', 'dobj'), ('—', 'punct'), ('—', 'punct'), ('narrow', 'amod'), ('AI', 'nsubj'), (' ', 'nsubj'), ('transfer', 'conj'), ('knowledge', 'dobj'), ('different', 'amod'), ('sorts', 'pobj'), ('problems', 'pobj'), ('.', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[General, AI], [AI, encompasses], [encompasses, human-], [human-, like], [like, capabilities], [capabilities, ,], [,, narrow], [narrow, AI], [AI, certain], [certain,  ], [ , task], [task, —], [—, —], [—, narrow], [narrow, AI], [AI,  ], [ , transfer], [transfer, knowledge], [knowledge, different], [different, sorts], [sorts, problems], [problems, .], [.,  ]]

>> Trigrams: 
[[General, AI, encompasses], [AI, encompasses, human-], [encompasses, human-, like], [human-, like, capabilities], [like, capabilities, ,], [capabilities, ,, narrow], [,, narrow, AI], [narrow, AI, certain], [AI, certain,  ], [certain,  , task], [ , task, —], [task, —, —], [—, —, narrow], [—, narrow, AI], [narrow, AI,  ], [AI,  , transfer], [ , transfer, knowledge], [transfer, knowledge, different], [knowledge, different, sorts], [different, sorts, problems], [sorts, problems, .], [problems, .,  ]]

>> Noun Phrases are: 
[General AI, all the human-, capabilities, narrow AI, a certain  task, it, it, narrow AI, its knowledge, different sorts, problems]

>> Named Entities are: 
[('AI', 'ORG'), ('AI', 'ORG'), ('AI', 'ORG')] 


================================ Paragraph 135 =================================

Narrow AI Narrow AI is focused on addressing very focused tasks  (such as buying a book with a voice-based device) based  on “common knowledge.” That’s the reason narrow AI is  scaling very quickly in the consumer world where there are  a lot of common tasks and data to train these systems.  Narrow or weak AI is, contrary to the naming, very powerful   at routine jobs.  

------------------- Sentence 1 -------------------

Narrow AI Narrow AI is focused on addressing very focused tasks  (such as buying a book with a voice-based device) based  on “common knowledge.” 


>> Tokens are: 
[Narrow, AI, Narrow, AI, focused, addressing, focused, tasks,  , (, buying, book, voice, -, based, device, ), based,  , “, common, knowledge, ., ”] 

>> PoS Tags are: 
[('Narrow', 'PROPN'), ('AI', 'PROPN'), ('Narrow', 'PROPN'), ('AI', 'PROPN'), ('focused', 'VERB'), ('addressing', 'VERB'), ('focused', 'ADJ'), ('tasks', 'NOUN'), (' ', 'SPACE'), ('(', 'PUNCT'), ('buying', 'VERB'), ('book', 'NOUN'), ('voice', 'NOUN'), ('-', 'PUNCT'), ('based', 'VERB'), ('device', 'NOUN'), (')', 'PUNCT'), ('based', 'VERB'), (' ', 'SPACE'), ('“', 'PUNCT'), ('common', 'ADJ'), ('knowledge', 'NOUN'), ('.', 'PUNCT'), ('”', 'PUNCT')] 

>> Dependency Tags are: 
[('Narrow', 'compound'), ('AI', 'compound'), ('Narrow', 'compound'), ('AI', 'nsubjpass'), ('focused', 'ROOT'), ('addressing', 'pcomp'), ('focused', 'amod'), ('tasks', 'dobj'), (' ', 'nummod'), ('(', 'punct'), ('buying', 'pcomp'), ('book', 'dobj'), ('voice', 'npadvmod'), ('-', 'punct'), ('based', 'amod'), ('device', 'pobj'), (')', 'punct'), ('based', 'prep'), (' ', 'dobj'), ('“', 'punct'), ('common', 'amod'), ('knowledge', 'pobj'), ('.', 'punct'), ('”', 'punct')]

>> Bigrams: 
[[Narrow, AI], [AI, Narrow], [Narrow, AI], [AI, focused], [focused, addressing], [addressing, focused], [focused, tasks], [tasks,  ], [ , (], [(, buying], [buying, book], [book, voice], [voice, -], [-, based], [based, device], [device, )], [), based], [based,  ], [ , “], [“, common], [common, knowledge], [knowledge, .], [., ”]]

>> Trigrams: 
[[Narrow, AI, Narrow], [AI, Narrow, AI], [Narrow, AI, focused], [AI, focused, addressing], [focused, addressing, focused], [addressing, focused, tasks], [focused, tasks,  ], [tasks,  , (], [ , (, buying], [(, buying, book], [buying, book, voice], [book, voice, -], [voice, -, based], [-, based, device], [based, device, )], [device, ), based], [), based,  ], [based,  , “], [ , “, common], [“, common, knowledge], [common, knowledge, .], [knowledge, ., ”]]

>> Noun Phrases are: 
[Narrow AI Narrow AI, very focused tasks, a book, a voice-based device, common knowledge]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

That’s the reason narrow AI is  scaling very quickly in the consumer world where there are  a lot of common tasks and data to train these systems. 


>> Tokens are: 
[reason, narrow, AI,  , scaling, quickly, consumer, world,  , lot, common, tasks, data, train, systems, .] 

>> PoS Tags are: 
[('reason', 'NOUN'), ('narrow', 'ADJ'), ('AI', 'PROPN'), (' ', 'SPACE'), ('scaling', 'VERB'), ('quickly', 'ADV'), ('consumer', 'NOUN'), ('world', 'NOUN'), (' ', 'SPACE'), ('lot', 'NOUN'), ('common', 'ADJ'), ('tasks', 'NOUN'), ('data', 'NOUN'), ('train', 'VERB'), ('systems', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('reason', 'attr'), ('narrow', 'amod'), ('AI', 'nsubj'), (' ', 'nsubj'), ('scaling', 'relcl'), ('quickly', 'advmod'), ('consumer', 'compound'), ('world', 'pobj'), (' ', 'attr'), ('lot', 'attr'), ('common', 'amod'), ('tasks', 'pobj'), ('data', 'conj'), ('train', 'relcl'), ('systems', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[reason, narrow], [narrow, AI], [AI,  ], [ , scaling], [scaling, quickly], [quickly, consumer], [consumer, world], [world,  ], [ , lot], [lot, common], [common, tasks], [tasks, data], [data, train], [train, systems], [systems, .]]

>> Trigrams: 
[[reason, narrow, AI], [narrow, AI,  ], [AI,  , scaling], [ , scaling, quickly], [scaling, quickly, consumer], [quickly, consumer, world], [consumer, world,  ], [world,  , lot], [ , lot, common], [lot, common, tasks], [common, tasks, data], [tasks, data, train], [data, train, systems], [train, systems, .]]

>> Noun Phrases are: 
[the reason, narrow AI, the consumer world, a lot, common tasks, data, these systems]

>> Named Entities are: 
[('AI', 'ORG')] 

------------------- Sentence 3 -------------------

 Narrow or weak AI is, contrary to the naming, very powerful   at routine jobs. 


>> Tokens are: 
[ , Narrow, weak, AI, ,, contrary, naming, ,, powerful,   , routine, jobs, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('Narrow', 'PROPN'), ('weak', 'ADJ'), ('AI', 'PROPN'), (',', 'PUNCT'), ('contrary', 'ADJ'), ('naming', 'ADJ'), (',', 'PUNCT'), ('powerful', 'ADJ'), ('  ', 'SPACE'), ('routine', 'ADJ'), ('jobs', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'compound'), ('Narrow', 'nsubj'), ('weak', 'amod'), ('AI', 'conj'), (',', 'punct'), ('contrary', 'acomp'), ('naming', 'amod'), (',', 'punct'), ('powerful', 'amod'), ('  ', 'pobj'), ('routine', 'amod'), ('jobs', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[ , Narrow], [Narrow, weak], [weak, AI], [AI, ,], [,, contrary], [contrary, naming], [naming, ,], [,, powerful], [powerful,   ], [  , routine], [routine, jobs], [jobs, .]]

>> Trigrams: 
[[ , Narrow, weak], [Narrow, weak, AI], [weak, AI, ,], [AI, ,, contrary], [,, contrary, naming], [contrary, naming, ,], [naming, ,, powerful], [,, powerful,   ], [powerful,   , routine], [  , routine, jobs], [routine, jobs, .]]

>> Noun Phrases are: 
[ Narrow, weak AI, routine jobs]

>> Named Entities are: 
[('AI', 'ORG')] 

------------------- Sentence 4 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 136 =================================

Figure 4: The three categories of AI. 

------------------- Sentence 1 -------------------

Figure 4: The three categories of AI. 


>> Tokens are: 
[Figure, 4, :, categories, AI, .] 

>> PoS Tags are: 
[('Figure', 'NOUN'), ('4', 'NUM'), (':', 'PUNCT'), ('categories', 'NOUN'), ('AI', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Figure', 'ROOT'), ('4', 'nummod'), (':', 'punct'), ('categories', 'appos'), ('AI', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Figure, 4], [4, :], [:, categories], [categories, AI], [AI, .]]

>> Trigrams: 
[[Figure, 4, :], [4, :, categories], [:, categories, AI], [categories, AI, .]]

>> Noun Phrases are: 
[Figure, The three categories, AI]

>> Named Entities are: 
[('4', 'CARDINAL'), ('three', 'CARDINAL'), ('AI', 'ORG')] 


================================ Paragraph 137 =================================

Narrow 

------------------- Sentence 1 -------------------

Narrow 


>> Tokens are: 
[Narrow] 

>> PoS Tags are: 
[('Narrow', 'PROPN')] 

>> Dependency Tags are: 
[('Narrow', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Narrow]

>> Named Entities are: 
[] 


================================ Paragraph 138 =================================

2010-2015 

------------------- Sentence 1 -------------------

2010-2015 


>> Tokens are: 
[2010, -, 2015] 

>> PoS Tags are: 
[('2010', 'NUM'), ('-', 'SYM'), ('2015', 'NUM')] 

>> Dependency Tags are: 
[('2010', 'ROOT'), ('-', 'punct'), ('2015', 'npadvmod')]

>> Bigrams: 
[[2010, -], [-, 2015]]

>> Trigrams: 
[[2010, -, 2015]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('2010-2015', 'DATE')] 


================================ Paragraph 139 =================================

Broad   (AI for Enterprise) 

------------------- Sentence 1 -------------------

Broad   (AI for Enterprise) 


>> Tokens are: 
[Broad,   , (, AI, Enterprise, )] 

>> PoS Tags are: 
[('Broad', 'ADJ'), ('  ', 'SPACE'), ('(', 'PUNCT'), ('AI', 'PROPN'), ('Enterprise', 'NOUN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('Broad', 'amod'), ('  ', 'ROOT'), ('(', 'punct'), ('AI', 'appos'), ('Enterprise', 'pobj'), (')', 'punct')]

>> Bigrams: 
[[Broad,   ], [  , (], [(, AI], [AI, Enterprise], [Enterprise, )]]

>> Trigrams: 
[[Broad,   , (], [  , (, AI], [(, AI, Enterprise], [AI, Enterprise, )]]

>> Noun Phrases are: 
[(AI, Enterprise]

>> Named Entities are: 
[] 


================================ Paragraph 140 =================================

We are here 

------------------- Sentence 1 -------------------

We are here 


>> Tokens are: 
[] 

>> PoS Tags are: 
[] 

>> Dependency Tags are: 
[]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[We]

>> Named Entities are: 
[] 


================================ Paragraph 141 =================================

General AI 

------------------- Sentence 1 -------------------

General AI 


>> Tokens are: 
[General, AI] 

>> PoS Tags are: 
[('General', 'PROPN'), ('AI', 'PROPN')] 

>> Dependency Tags are: 
[('General', 'compound'), ('AI', 'ROOT')]

>> Bigrams: 
[[General, AI]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[General AI]

>> Named Entities are: 
[] 


================================ Paragraph 142 =================================

2050 and beyond 

------------------- Sentence 1 -------------------

2050 and beyond 


>> Tokens are: 
[2050] 

>> PoS Tags are: 
[('2050', 'NUM')] 

>> Dependency Tags are: 
[('2050', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('2050', 'DATE')] 


================================ Paragraph 143 =================================

Broad AI What we see today in self driving cars is still defined as narrow  AI. You can see it as a collection of narrow AI systems that  make decisions. This is what we call broad AI. Another  example of broad AI includes a system within a bank that  analyzes the balance sheet of corporate customers to  recommend the best currency hedging strategy. Another  example would be a system that supports engineers who  work on complex maintenance tasks on a platform in the  middle of the Atlantic Ocean. Broad AI is about integrating  AI within a specific business process of an enterprise where  you need business- and enterprise-specific knowledge and  data to train this type of system. These tasks are very different  from the narrow AI used in the consumer world because the  data and knowledge available in the enterprise are much more  limited in terms of volumes, very industry specific and in most  of the cases private (for example owned by an enterprise).  This is what we believe is currently the most valuable type of  AI currently for the enterprise.  

------------------- Sentence 1 -------------------

Broad AI 


>> Tokens are: 
[Broad, AI] 

>> PoS Tags are: 
[('Broad', 'PROPN'), ('AI', 'PROPN')] 

>> Dependency Tags are: 
[('Broad', 'compound'), ('AI', 'ROOT')]

>> Bigrams: 
[[Broad, AI]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Broad AI]

>> Named Entities are: 
[('Broad AI', 'ORG')] 

------------------- Sentence 2 -------------------

What we see today in self driving cars is still defined as narrow  AI. 


>> Tokens are: 
[today, self, driving, cars, defined, narrow,  , AI, .] 

>> PoS Tags are: 
[('today', 'NOUN'), ('self', 'NOUN'), ('driving', 'VERB'), ('cars', 'NOUN'), ('defined', 'VERB'), ('narrow', 'ADJ'), (' ', 'SPACE'), ('AI', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('today', 'npadvmod'), ('self', 'npadvmod'), ('driving', 'amod'), ('cars', 'pobj'), ('defined', 'ROOT'), ('narrow', 'amod'), (' ', 'compound'), ('AI', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[today, self], [self, driving], [driving, cars], [cars, defined], [defined, narrow], [narrow,  ], [ , AI], [AI, .]]

>> Trigrams: 
[[today, self, driving], [self, driving, cars], [driving, cars, defined], [cars, defined, narrow], [defined, narrow,  ], [narrow,  , AI], [ , AI, .]]

>> Noun Phrases are: 
[What, we, self driving cars, narrow  AI]

>> Named Entities are: 
[('today', 'DATE')] 

------------------- Sentence 3 -------------------

You can see it as a collection of narrow AI systems that  make decisions. 


>> Tokens are: 
[collection, narrow, AI, systems,  , decisions, .] 

>> PoS Tags are: 
[('collection', 'NOUN'), ('narrow', 'ADJ'), ('AI', 'PROPN'), ('systems', 'NOUN'), (' ', 'SPACE'), ('decisions', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('collection', 'pobj'), ('narrow', 'amod'), ('AI', 'compound'), ('systems', 'pobj'), (' ', 'nsubj'), ('decisions', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[collection, narrow], [narrow, AI], [AI, systems], [systems,  ], [ , decisions], [decisions, .]]

>> Trigrams: 
[[collection, narrow, AI], [narrow, AI, systems], [AI, systems,  ], [systems,  , decisions], [ , decisions, .]]

>> Noun Phrases are: 
[You, it, a collection, narrow AI systems, decisions]

>> Named Entities are: 
[('AI', 'ORG')] 

------------------- Sentence 4 -------------------

This is what we call broad AI. 


>> Tokens are: 
[broad, AI, .] 

>> PoS Tags are: 
[('broad', 'ADJ'), ('AI', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('broad', 'amod'), ('AI', 'oprd'), ('.', 'punct')]

>> Bigrams: 
[[broad, AI], [AI, .]]

>> Trigrams: 
[[broad, AI, .]]

>> Noun Phrases are: 
[what, we, broad AI]

>> Named Entities are: 
[('AI', 'ORG')] 

------------------- Sentence 5 -------------------

Another  example of broad AI includes a system within a bank that  analyzes the balance sheet of corporate customers to  recommend the best currency hedging strategy. 


>> Tokens are: 
[ , example, broad, AI, includes, system, bank,  , analyzes, balance, sheet, corporate, customers,  , recommend, best, currency, hedging, strategy, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('example', 'NOUN'), ('broad', 'ADJ'), ('AI', 'PROPN'), ('includes', 'VERB'), ('system', 'NOUN'), ('bank', 'NOUN'), (' ', 'SPACE'), ('analyzes', 'VERB'), ('balance', 'NOUN'), ('sheet', 'NOUN'), ('corporate', 'ADJ'), ('customers', 'NOUN'), (' ', 'SPACE'), ('recommend', 'VERB'), ('best', 'ADJ'), ('currency', 'NOUN'), ('hedging', 'VERB'), ('strategy', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'compound'), ('example', 'nsubj'), ('broad', 'amod'), ('AI', 'pobj'), ('includes', 'ROOT'), ('system', 'dobj'), ('bank', 'pobj'), (' ', 'nsubj'), ('analyzes', 'relcl'), ('balance', 'compound'), ('sheet', 'dobj'), ('corporate', 'amod'), ('customers', 'pobj'), (' ', 'pobj'), ('recommend', 'xcomp'), ('best', 'amod'), ('currency', 'npadvmod'), ('hedging', 'compound'), ('strategy', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[ , example], [example, broad], [broad, AI], [AI, includes], [includes, system], [system, bank], [bank,  ], [ , analyzes], [analyzes, balance], [balance, sheet], [sheet, corporate], [corporate, customers], [customers,  ], [ , recommend], [recommend, best], [best, currency], [currency, hedging], [hedging, strategy], [strategy, .]]

>> Trigrams: 
[[ , example, broad], [example, broad, AI], [broad, AI, includes], [AI, includes, system], [includes, system, bank], [system, bank,  ], [bank,  , analyzes], [ , analyzes, balance], [analyzes, balance, sheet], [balance, sheet, corporate], [sheet, corporate, customers], [corporate, customers,  ], [customers,  , recommend], [ , recommend, best], [recommend, best, currency], [best, currency, hedging], [currency, hedging, strategy], [hedging, strategy, .]]

>> Noun Phrases are: 
[Another  example, broad AI, a system, a bank, the balance sheet, corporate customers, the best currency hedging strategy]

>> Named Entities are: 
[('AI', 'ORG')] 

------------------- Sentence 6 -------------------

Another  example would be a system that supports engineers who  work on complex maintenance tasks on a platform in the  middle of the Atlantic Ocean. 


>> Tokens are: 
[ , example, system, supports, engineers,  , work, complex, maintenance, tasks, platform,  , middle, Atlantic, Ocean, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('example', 'NOUN'), ('system', 'NOUN'), ('supports', 'VERB'), ('engineers', 'NOUN'), (' ', 'SPACE'), ('work', 'VERB'), ('complex', 'ADJ'), ('maintenance', 'NOUN'), ('tasks', 'NOUN'), ('platform', 'NOUN'), (' ', 'SPACE'), ('middle', 'NOUN'), ('Atlantic', 'PROPN'), ('Ocean', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'compound'), ('example', 'nsubj'), ('system', 'attr'), ('supports', 'relcl'), ('engineers', 'dobj'), (' ', 'nsubj'), ('work', 'relcl'), ('complex', 'amod'), ('maintenance', 'compound'), ('tasks', 'pobj'), ('platform', 'pobj'), (' ', 'compound'), ('middle', 'pobj'), ('Atlantic', 'compound'), ('Ocean', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[ , example], [example, system], [system, supports], [supports, engineers], [engineers,  ], [ , work], [work, complex], [complex, maintenance], [maintenance, tasks], [tasks, platform], [platform,  ], [ , middle], [middle, Atlantic], [Atlantic, Ocean], [Ocean, .]]

>> Trigrams: 
[[ , example, system], [example, system, supports], [system, supports, engineers], [supports, engineers,  ], [engineers,  , work], [ , work, complex], [work, complex, maintenance], [complex, maintenance, tasks], [maintenance, tasks, platform], [tasks, platform,  ], [platform,  , middle], [ , middle, Atlantic], [middle, Atlantic, Ocean], [Atlantic, Ocean, .]]

>> Noun Phrases are: 
[Another  example, a system, engineers, who, complex maintenance tasks, a platform, the  middle, the Atlantic Ocean]

>> Named Entities are: 
[('the Atlantic Ocean', 'LOC')] 

------------------- Sentence 7 -------------------

Broad AI is about integrating  AI within a specific business process of an enterprise where  you need business- and enterprise-specific knowledge and  data to train this type of system. 


>> Tokens are: 
[Broad, AI, integrating,  , AI, specific, business, process, enterprise,  , need, business-, enterprise, -, specific, knowledge,  , data, train, type, system, .] 

>> PoS Tags are: 
[('Broad', 'PROPN'), ('AI', 'PROPN'), ('integrating', 'VERB'), (' ', 'SPACE'), ('AI', 'NOUN'), ('specific', 'ADJ'), ('business', 'NOUN'), ('process', 'NOUN'), ('enterprise', 'NOUN'), (' ', 'SPACE'), ('need', 'VERB'), ('business-', 'NOUN'), ('enterprise', 'NOUN'), ('-', 'PUNCT'), ('specific', 'ADJ'), ('knowledge', 'NOUN'), (' ', 'SPACE'), ('data', 'NOUN'), ('train', 'VERB'), ('type', 'NOUN'), ('system', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Broad', 'compound'), ('AI', 'nsubj'), ('integrating', 'pcomp'), (' ', 'compound'), ('AI', 'dobj'), ('specific', 'amod'), ('business', 'compound'), ('process', 'pobj'), ('enterprise', 'pobj'), (' ', 'npadvmod'), ('need', 'relcl'), ('business-', 'dobj'), ('enterprise', 'npadvmod'), ('-', 'punct'), ('specific', 'amod'), ('knowledge', 'conj'), (' ', 'nmod'), ('data', 'conj'), ('train', 'advcl'), ('type', 'dobj'), ('system', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Broad, AI], [AI, integrating], [integrating,  ], [ , AI], [AI, specific], [specific, business], [business, process], [process, enterprise], [enterprise,  ], [ , need], [need, business-], [business-, enterprise], [enterprise, -], [-, specific], [specific, knowledge], [knowledge,  ], [ , data], [data, train], [train, type], [type, system], [system, .]]

>> Trigrams: 
[[Broad, AI, integrating], [AI, integrating,  ], [integrating,  , AI], [ , AI, specific], [AI, specific, business], [specific, business, process], [business, process, enterprise], [process, enterprise,  ], [enterprise,  , need], [ , need, business-], [need, business-, enterprise], [business-, enterprise, -], [enterprise, -, specific], [-, specific, knowledge], [specific, knowledge,  ], [knowledge,  , data], [ , data, train], [data, train, type], [train, type, system], [type, system, .]]

>> Noun Phrases are: 
[Broad AI,  AI, a specific business process, an enterprise, you, business-, enterprise-specific knowledge,  data, this type, system]

>> Named Entities are: 
[('Broad AI', 'PERSON'), ('AI', 'ORG')] 

------------------- Sentence 8 -------------------

These tasks are very different  from the narrow AI used in the consumer world because the  data and knowledge available in the enterprise are much more  limited in terms of volumes, very industry specific and in most  of the cases private (for example owned by an enterprise). 


>> Tokens are: 
[tasks, different,  , narrow, AI, consumer, world,  , data, knowledge, available, enterprise,  , limited, terms, volumes, ,, industry, specific,  , cases, private, (, example, owned, enterprise, ), .] 

>> PoS Tags are: 
[('tasks', 'NOUN'), ('different', 'ADJ'), (' ', 'SPACE'), ('narrow', 'ADJ'), ('AI', 'PROPN'), ('consumer', 'NOUN'), ('world', 'NOUN'), (' ', 'SPACE'), ('data', 'NOUN'), ('knowledge', 'NOUN'), ('available', 'ADJ'), ('enterprise', 'NOUN'), (' ', 'SPACE'), ('limited', 'VERB'), ('terms', 'NOUN'), ('volumes', 'NOUN'), (',', 'PUNCT'), ('industry', 'NOUN'), ('specific', 'ADJ'), (' ', 'SPACE'), ('cases', 'NOUN'), ('private', 'ADJ'), ('(', 'PUNCT'), ('example', 'NOUN'), ('owned', 'VERB'), ('enterprise', 'NOUN'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('tasks', 'nsubj'), ('different', 'amod'), (' ', 'attr'), ('narrow', 'amod'), ('AI', 'pobj'), ('consumer', 'compound'), ('world', 'pobj'), (' ', 'compound'), ('data', 'nsubj'), ('knowledge', 'conj'), ('available', 'amod'), ('enterprise', 'pobj'), (' ', 'attr'), ('limited', 'acl'), ('terms', 'pobj'), ('volumes', 'pobj'), (',', 'punct'), ('industry', 'npadvmod'), ('specific', 'amod'), (' ', 'pobj'), ('cases', 'pobj'), ('private', 'amod'), ('(', 'punct'), ('example', 'pobj'), ('owned', 'acl'), ('enterprise', 'pobj'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[tasks, different], [different,  ], [ , narrow], [narrow, AI], [AI, consumer], [consumer, world], [world,  ], [ , data], [data, knowledge], [knowledge, available], [available, enterprise], [enterprise,  ], [ , limited], [limited, terms], [terms, volumes], [volumes, ,], [,, industry], [industry, specific], [specific,  ], [ , cases], [cases, private], [private, (], [(, example], [example, owned], [owned, enterprise], [enterprise, )], [), .]]

>> Trigrams: 
[[tasks, different,  ], [different,  , narrow], [ , narrow, AI], [narrow, AI, consumer], [AI, consumer, world], [consumer, world,  ], [world,  , data], [ , data, knowledge], [data, knowledge, available], [knowledge, available, enterprise], [available, enterprise,  ], [enterprise,  , limited], [ , limited, terms], [limited, terms, volumes], [terms, volumes, ,], [volumes, ,, industry], [,, industry, specific], [industry, specific,  ], [specific,  , cases], [ , cases, private], [cases, private, (], [private, (, example], [(, example, owned], [example, owned, enterprise], [owned, enterprise, )], [enterprise, ), .]]

>> Noun Phrases are: 
[These tasks, the narrow AI, the consumer world, the  data, knowledge, the enterprise, terms, volumes, the cases, example, an enterprise]

>> Named Entities are: 
[('AI', 'ORG')] 

------------------- Sentence 9 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 10 -------------------

This is what we believe is currently the most valuable type of  AI currently for the enterprise. 


>> Tokens are: 
[believe, currently, valuable, type,  , AI, currently, enterprise, .] 

>> PoS Tags are: 
[('believe', 'VERB'), ('currently', 'ADV'), ('valuable', 'ADJ'), ('type', 'NOUN'), (' ', 'SPACE'), ('AI', 'PROPN'), ('currently', 'ADV'), ('enterprise', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('believe', 'ccomp'), ('currently', 'advmod'), ('valuable', 'amod'), ('type', 'attr'), (' ', 'compound'), ('AI', 'pobj'), ('currently', 'advmod'), ('enterprise', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[believe, currently], [currently, valuable], [valuable, type], [type,  ], [ , AI], [AI, currently], [currently, enterprise], [enterprise, .]]

>> Trigrams: 
[[believe, currently, valuable], [currently, valuable, type], [valuable, type,  ], [type,  , AI], [ , AI, currently], [AI, currently, enterprise], [currently, enterprise, .]]

>> Noun Phrases are: 
[what, we, the most valuable type,  AI, the enterprise]

>> Named Entities are: 
[('AI', 'ORG')] 

------------------- Sentence 11 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 144 =================================

General AI General AI is far from reaching its potential. The expectations  are that it will take at least another couple of decades. General  AI refers to machines that can perform any intellectual task  a human can. Currently AI does not have the ability to think  abstractly, strategize and use previous experiences to come  up with new creative ideas as humans do. 

------------------- Sentence 1 -------------------

General AI General AI is far from reaching its potential. 


>> Tokens are: 
[General, AI, General, AI, far, reaching, potential, .] 

>> PoS Tags are: 
[('General', 'PROPN'), ('AI', 'PROPN'), ('General', 'PROPN'), ('AI', 'PROPN'), ('far', 'ADV'), ('reaching', 'VERB'), ('potential', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('General', 'compound'), ('AI', 'compound'), ('General', 'compound'), ('AI', 'nsubj'), ('far', 'advmod'), ('reaching', 'pcomp'), ('potential', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[General, AI], [AI, General], [General, AI], [AI, far], [far, reaching], [reaching, potential], [potential, .]]

>> Trigrams: 
[[General, AI, General], [AI, General, AI], [General, AI, far], [AI, far, reaching], [far, reaching, potential], [reaching, potential, .]]

>> Noun Phrases are: 
[General AI General AI, its potential]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

The expectations  are that it will take at least another couple of decades. 


>> Tokens are: 
[expectations,  , couple, decades, .] 

>> PoS Tags are: 
[('expectations', 'NOUN'), (' ', 'SPACE'), ('couple', 'NOUN'), ('decades', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('expectations', 'nsubj'), (' ', 'nsubj'), ('couple', 'dobj'), ('decades', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[expectations,  ], [ , couple], [couple, decades], [decades, .]]

>> Trigrams: 
[[expectations,  , couple], [ , couple, decades], [couple, decades, .]]

>> Noun Phrases are: 
[The expectations, it, at least another couple, decades]

>> Named Entities are: 
[('at least another couple of decades', 'DATE')] 

------------------- Sentence 3 -------------------

General  AI refers to machines that can perform any intellectual task  a human can. 


>> Tokens are: 
[General,  , AI, refers, machines, perform, intellectual, task,  , human, .] 

>> PoS Tags are: 
[('General', 'PROPN'), (' ', 'SPACE'), ('AI', 'PROPN'), ('refers', 'VERB'), ('machines', 'NOUN'), ('perform', 'VERB'), ('intellectual', 'ADJ'), ('task', 'NOUN'), (' ', 'SPACE'), ('human', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('General', 'compound'), (' ', 'compound'), ('AI', 'nsubj'), ('refers', 'ROOT'), ('machines', 'pobj'), ('perform', 'relcl'), ('intellectual', 'amod'), ('task', 'dobj'), (' ', 'prep'), ('human', 'amod'), ('.', 'punct')]

>> Bigrams: 
[[General,  ], [ , AI], [AI, refers], [refers, machines], [machines, perform], [perform, intellectual], [intellectual, task], [task,  ], [ , human], [human, .]]

>> Trigrams: 
[[General,  , AI], [ , AI, refers], [AI, refers, machines], [refers, machines, perform], [machines, perform, intellectual], [perform, intellectual, task], [intellectual, task,  ], [task,  , human], [ , human, .]]

>> Noun Phrases are: 
[General  AI, machines, any intellectual task, a human can]

>> Named Entities are: 
[('AI', 'ORG')] 

------------------- Sentence 4 -------------------

Currently AI does not have the ability to think  abstractly, strategize and use previous experiences to come  up with new creative ideas as humans do. 


>> Tokens are: 
[Currently, AI, ability, think,  , abstractly, ,, strategize, use, previous, experiences, come,  , new, creative, ideas, humans, .] 

>> PoS Tags are: 
[('Currently', 'ADV'), ('AI', 'PROPN'), ('ability', 'NOUN'), ('think', 'VERB'), (' ', 'SPACE'), ('abstractly', 'ADV'), (',', 'PUNCT'), ('strategize', 'VERB'), ('use', 'VERB'), ('previous', 'ADJ'), ('experiences', 'NOUN'), ('come', 'VERB'), (' ', 'SPACE'), ('new', 'ADJ'), ('creative', 'ADJ'), ('ideas', 'NOUN'), ('humans', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Currently', 'advmod'), ('AI', 'nsubj'), ('ability', 'dobj'), ('think', 'acl'), (' ', 'dobj'), ('abstractly', 'advmod'), (',', 'punct'), ('strategize', 'conj'), ('use', 'conj'), ('previous', 'amod'), ('experiences', 'dobj'), ('come', 'xcomp'), (' ', 'dobj'), ('new', 'amod'), ('creative', 'amod'), ('ideas', 'pobj'), ('humans', 'nsubj'), ('.', 'punct')]

>> Bigrams: 
[[Currently, AI], [AI, ability], [ability, think], [think,  ], [ , abstractly], [abstractly, ,], [,, strategize], [strategize, use], [use, previous], [previous, experiences], [experiences, come], [come,  ], [ , new], [new, creative], [creative, ideas], [ideas, humans], [humans, .]]

>> Trigrams: 
[[Currently, AI, ability], [AI, ability, think], [ability, think,  ], [think,  , abstractly], [ , abstractly, ,], [abstractly, ,, strategize], [,, strategize, use], [strategize, use, previous], [use, previous, experiences], [previous, experiences, come], [experiences, come,  ], [come,  , new], [ , new, creative], [new, creative, ideas], [creative, ideas, humans], [ideas, humans, .]]

>> Noun Phrases are: 
[AI, the ability, previous experiences, new creative ideas, humans]

>> Named Entities are: 
[('AI', 'ORG')] 


================================ Paragraph 145 =================================

Some people think we will have general AI in a couple of  decades others like IBM’s Rob High and Google’s Peter Norvig  believe we don’t need broad AI at all.8

------------------- Sentence 1 -------------------

Some people think we will have general AI in a couple of  decades others like IBM’s Rob High and Google’s Peter Norvig  believe we don’t need broad AI at all.8 


>> Tokens are: 
[people, think, general, AI, couple,  , decades, like, IBM, Rob, High, Google, Peter, Norvig,  , believe, need, broad, AI, all.8] 

>> PoS Tags are: 
[('people', 'NOUN'), ('think', 'VERB'), ('general', 'ADJ'), ('AI', 'PROPN'), ('couple', 'NOUN'), (' ', 'SPACE'), ('decades', 'VERB'), ('like', 'ADP'), ('IBM', 'PROPN'), ('Rob', 'PROPN'), ('High', 'PROPN'), ('Google', 'PROPN'), ('Peter', 'PROPN'), ('Norvig', 'PROPN'), (' ', 'SPACE'), ('believe', 'VERB'), ('need', 'VERB'), ('broad', 'ADJ'), ('AI', 'PROPN'), ('all.8', 'NOUN')] 

>> Dependency Tags are: 
[('people', 'nsubj'), ('think', 'ROOT'), ('general', 'amod'), ('AI', 'dobj'), ('couple', 'pobj'), (' ', 'pobj'), ('decades', 'ccomp'), ('like', 'prep'), ('IBM', 'poss'), ('Rob', 'compound'), ('High', 'pobj'), ('Google', 'conj'), ('Peter', 'compound'), ('Norvig', 'conj'), (' ', 'nsubj'), ('believe', 'ccomp'), ('need', 'ccomp'), ('broad', 'amod'), ('AI', 'dobj'), ('all.8', 'pobj')]

>> Bigrams: 
[[people, think], [think, general], [general, AI], [AI, couple], [couple,  ], [ , decades], [decades, like], [like, IBM], [IBM, Rob], [Rob, High], [High, Google], [Google, Peter], [Peter, Norvig], [Norvig,  ], [ , believe], [believe, need], [need, broad], [broad, AI], [AI, all.8]]

>> Trigrams: 
[[people, think, general], [think, general, AI], [general, AI, couple], [AI, couple,  ], [couple,  , decades], [ , decades, like], [decades, like, IBM], [like, IBM, Rob], [IBM, Rob, High], [Rob, High, Google], [High, Google, Peter], [Google, Peter, Norvig], [Peter, Norvig,  ], [Norvig,  , believe], [ , believe, need], [believe, need, broad], [need, broad, AI], [broad, AI, all.8]]

>> Noun Phrases are: 
[Some people, we, general AI, a couple, others, IBM’s Rob High, Google, Peter Norvig, we, broad AI, all.8]

>> Named Entities are: 
[('AI', 'ORG'), ('a couple of  ', 'DATE'), ('decades', 'DATE'), ('IBM', 'ORG'), ('Rob High', 'PERSON'), ('Google’s', 'ORG'), ('Peter Norvig', 'PERSON'), ('AI', 'ORG')] 


================================ Paragraph 146 =================================

8     Beyond the hype: A guide to understanding and successfully implementing artificial intelligence within your business 

------------------- Sentence 1 -------------------

8     Beyond the hype: A guide to understanding and successfully implementing artificial intelligence within your business 


>> Tokens are: 
[8,     , hype, :, guide, understanding, successfully, implementing, artificial, intelligence, business] 

>> PoS Tags are: 
[('8', 'NUM'), ('    ', 'SPACE'), ('hype', 'NOUN'), (':', 'PUNCT'), ('guide', 'NOUN'), ('understanding', 'NOUN'), ('successfully', 'ADV'), ('implementing', 'VERB'), ('artificial', 'ADJ'), ('intelligence', 'NOUN'), ('business', 'NOUN')] 

>> Dependency Tags are: 
[('8', 'nummod'), ('    ', 'ROOT'), ('hype', 'pobj'), (':', 'punct'), ('guide', 'appos'), ('understanding', 'pobj'), ('successfully', 'advmod'), ('implementing', 'acl'), ('artificial', 'amod'), ('intelligence', 'dobj'), ('business', 'pobj')]

>> Bigrams: 
[[8,     ], [    , hype], [hype, :], [:, guide], [guide, understanding], [understanding, successfully], [successfully, implementing], [implementing, artificial], [artificial, intelligence], [intelligence, business]]

>> Trigrams: 
[[8,     , hype], [    , hype, :], [hype, :, guide], [:, guide, understanding], [guide, understanding, successfully], [understanding, successfully, implementing], [successfully, implementing, artificial], [implementing, artificial, intelligence], [artificial, intelligence, business]]

>> Noun Phrases are: 
[the hype, A guide, understanding, artificial intelligence, your business]

>> Named Entities are: 
[] 


================================ Paragraph 147 =================================

What are the areas in which AI provides  the most value today? While relevant AI use cases span various areas across  virtually every industry, there are three main macro domains  that continue to drive the adoption as well as the most  economies across businesses. They are: 

------------------- Sentence 1 -------------------

What are the areas in which AI provides  the most value today? 


>> Tokens are: 
[areas, AI, provides,  , value, today, ?] 

>> PoS Tags are: 
[('areas', 'NOUN'), ('AI', 'PROPN'), ('provides', 'VERB'), (' ', 'SPACE'), ('value', 'NOUN'), ('today', 'NOUN'), ('?', 'PUNCT')] 

>> Dependency Tags are: 
[('areas', 'nsubj'), ('AI', 'nsubj'), ('provides', 'relcl'), (' ', 'dobj'), ('value', 'dobj'), ('today', 'npadvmod'), ('?', 'punct')]

>> Bigrams: 
[[areas, AI], [AI, provides], [provides,  ], [ , value], [value, today], [today, ?]]

>> Trigrams: 
[[areas, AI, provides], [AI, provides,  ], [provides,  , value], [ , value, today], [value, today, ?]]

>> Noun Phrases are: 
[What, the areas, AI, the most value]

>> Named Entities are: 
[('AI', 'ORG'), ('today', 'DATE')] 

------------------- Sentence 2 -------------------

While relevant AI use cases span various areas across  virtually every industry, there are three main macro domains  that continue to drive the adoption as well as the most  economies across businesses. 


>> Tokens are: 
[relevant, AI, use, cases, span, areas,  , virtually, industry, ,, main, macro, domains,  , continue, drive, adoption,  , economies, businesses, .] 

>> PoS Tags are: 
[('relevant', 'ADJ'), ('AI', 'PROPN'), ('use', 'NOUN'), ('cases', 'NOUN'), ('span', 'VERB'), ('areas', 'NOUN'), (' ', 'SPACE'), ('virtually', 'ADV'), ('industry', 'NOUN'), (',', 'PUNCT'), ('main', 'ADJ'), ('macro', 'ADJ'), ('domains', 'NOUN'), (' ', 'SPACE'), ('continue', 'VERB'), ('drive', 'VERB'), ('adoption', 'NOUN'), (' ', 'SPACE'), ('economies', 'NOUN'), ('businesses', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('relevant', 'amod'), ('AI', 'compound'), ('use', 'compound'), ('cases', 'nsubj'), ('span', 'advcl'), ('areas', 'dobj'), (' ', 'pobj'), ('virtually', 'advmod'), ('industry', 'dobj'), (',', 'punct'), ('main', 'amod'), ('macro', 'amod'), ('domains', 'attr'), (' ', 'appos'), ('continue', 'relcl'), ('drive', 'xcomp'), ('adoption', 'dobj'), (' ', 'nummod'), ('economies', 'conj'), ('businesses', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[relevant, AI], [AI, use], [use, cases], [cases, span], [span, areas], [areas,  ], [ , virtually], [virtually, industry], [industry, ,], [,, main], [main, macro], [macro, domains], [domains,  ], [ , continue], [continue, drive], [drive, adoption], [adoption,  ], [ , economies], [economies, businesses], [businesses, .]]

>> Trigrams: 
[[relevant, AI, use], [AI, use, cases], [use, cases, span], [cases, span, areas], [span, areas,  ], [areas,  , virtually], [ , virtually, industry], [virtually, industry, ,], [industry, ,, main], [,, main, macro], [main, macro, domains], [macro, domains,  ], [domains,  , continue], [ , continue, drive], [continue, drive, adoption], [drive, adoption,  ], [adoption,  , economies], [ , economies, businesses], [economies, businesses, .]]

>> Noun Phrases are: 
[relevant AI use cases, various areas, virtually every industry, three main macro domains, the adoption, the most  economies, businesses]

>> Named Entities are: 
[('AI', 'ORG'), ('three', 'CARDINAL')] 

------------------- Sentence 3 -------------------

They are: 


>> Tokens are: 
[:] 

>> PoS Tags are: 
[(':', 'PUNCT')] 

>> Dependency Tags are: 
[(':', 'punct')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[They]

>> Named Entities are: 
[] 


================================ Paragraph 148 =================================

 — Cognitive engagement: Involves how to deliver new ways  for humans to engage with machines, moving from pure  digital experiences (such as the ability to run transactions  digitally) into human-like natural conversations. 

------------------- Sentence 1 -------------------

 — Cognitive engagement: Involves how to deliver new ways  for humans to engage with machines, moving from pure  digital experiences (such as the ability to run transactions  digitally) into human-like natural conversations. 


>> Tokens are: 
[ , —, Cognitive, engagement, :, Involves, deliver, new, ways,  , humans, engage, machines, ,, moving, pure,  , digital, experiences, (, ability, run, transactions,  , digitally, ), human, -, like, natural, conversations, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('—', 'PUNCT'), ('Cognitive', 'ADJ'), ('engagement', 'NOUN'), (':', 'PUNCT'), ('Involves', 'VERB'), ('deliver', 'VERB'), ('new', 'ADJ'), ('ways', 'NOUN'), (' ', 'SPACE'), ('humans', 'NOUN'), ('engage', 'VERB'), ('machines', 'NOUN'), (',', 'PUNCT'), ('moving', 'VERB'), ('pure', 'ADJ'), (' ', 'SPACE'), ('digital', 'ADJ'), ('experiences', 'NOUN'), ('(', 'PUNCT'), ('ability', 'NOUN'), ('run', 'VERB'), ('transactions', 'NOUN'), (' ', 'SPACE'), ('digitally', 'ADV'), (')', 'PUNCT'), ('human', 'NOUN'), ('-', 'PUNCT'), ('like', 'ADJ'), ('natural', 'ADJ'), ('conversations', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'nsubj'), ('—', 'punct'), ('Cognitive', 'amod'), ('engagement', 'appos'), (':', 'punct'), ('Involves', 'ROOT'), ('deliver', 'xcomp'), ('new', 'amod'), ('ways', 'dobj'), (' ', 'nsubj'), ('humans', 'pobj'), ('engage', 'relcl'), ('machines', 'pobj'), (',', 'punct'), ('moving', 'advcl'), ('pure', 'amod'), (' ', 'nmod'), ('digital', 'amod'), ('experiences', 'pobj'), ('(', 'punct'), ('ability', 'pobj'), ('run', 'acl'), ('transactions', 'dobj'), (' ', 'appos'), ('digitally', 'advmod'), (')', 'punct'), ('human', 'npadvmod'), ('-', 'punct'), ('like', 'amod'), ('natural', 'amod'), ('conversations', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[ , —], [—, Cognitive], [Cognitive, engagement], [engagement, :], [:, Involves], [Involves, deliver], [deliver, new], [new, ways], [ways,  ], [ , humans], [humans, engage], [engage, machines], [machines, ,], [,, moving], [moving, pure], [pure,  ], [ , digital], [digital, experiences], [experiences, (], [(, ability], [ability, run], [run, transactions], [transactions,  ], [ , digitally], [digitally, )], [), human], [human, -], [-, like], [like, natural], [natural, conversations], [conversations, .]]

>> Trigrams: 
[[ , —, Cognitive], [—, Cognitive, engagement], [Cognitive, engagement, :], [engagement, :, Involves], [:, Involves, deliver], [Involves, deliver, new], [deliver, new, ways], [new, ways,  ], [ways,  , humans], [ , humans, engage], [humans, engage, machines], [engage, machines, ,], [machines, ,, moving], [,, moving, pure], [moving, pure,  ], [pure,  , digital], [ , digital, experiences], [digital, experiences, (], [experiences, (, ability], [(, ability, run], [ability, run, transactions], [run, transactions,  ], [transactions,  , digitally], [ , digitally, )], [digitally, ), human], [), human, -], [human, -, like], [-, like, natural], [like, natural, conversations], [natural, conversations, .]]

>> Noun Phrases are: 
[Cognitive engagement, new ways, humans, machines, pure  digital experiences, the ability, transactions, human-like natural conversations]

>> Named Entities are: 
[] 


================================ Paragraph 149 =================================

 — Cognitive insights and knowledge: Addresses how to  augment humans who are overwhelmed with information  and knowledge. 

------------------- Sentence 1 -------------------

 — Cognitive insights and knowledge: Addresses how to  augment humans who are overwhelmed with information  and knowledge. 


>> Tokens are: 
[ , —, Cognitive, insights, knowledge, :, Addresses,  , augment, humans, overwhelmed, information,  , knowledge, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('—', 'PUNCT'), ('Cognitive', 'ADJ'), ('insights', 'NOUN'), ('knowledge', 'NOUN'), (':', 'PUNCT'), ('Addresses', 'NOUN'), (' ', 'SPACE'), ('augment', 'NOUN'), ('humans', 'NOUN'), ('overwhelmed', 'ADJ'), ('information', 'NOUN'), (' ', 'SPACE'), ('knowledge', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'ROOT'), ('—', 'punct'), ('Cognitive', 'amod'), ('insights', 'appos'), ('knowledge', 'conj'), (':', 'punct'), ('Addresses', 'appos'), (' ', 'pobj'), ('augment', 'compound'), ('humans', 'dobj'), ('overwhelmed', 'acomp'), ('information', 'compound'), (' ', 'pobj'), ('knowledge', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[ , —], [—, Cognitive], [Cognitive, insights], [insights, knowledge], [knowledge, :], [:, Addresses], [Addresses,  ], [ , augment], [augment, humans], [humans, overwhelmed], [overwhelmed, information], [information,  ], [ , knowledge], [knowledge, .]]

>> Trigrams: 
[[ , —, Cognitive], [—, Cognitive, insights], [Cognitive, insights, knowledge], [insights, knowledge, :], [knowledge, :, Addresses], [:, Addresses,  ], [Addresses,  , augment], [ , augment, humans], [augment, humans, overwhelmed], [humans, overwhelmed, information], [overwhelmed, information,  ], [information,  , knowledge], [ , knowledge, .]]

>> Noun Phrases are: 
[Cognitive insights, knowledge, Addresses, augment humans, who, knowledge]

>> Named Entities are: 
[] 


================================ Paragraph 150 =================================

 — Cognitive automation: Relates to how to move from process  automation to mimicking human intelligence to facilitate  complex and knowledge-intense business decisions. 

------------------- Sentence 1 -------------------

 — Cognitive automation: Relates to how to move from process  automation to mimicking human intelligence to facilitate  complex and knowledge-intense business decisions. 


>> Tokens are: 
[ , —, Cognitive, automation, :, Relates, process,  , automation, mimicking, human, intelligence, facilitate,  , complex, knowledge, -, intense, business, decisions, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('—', 'PUNCT'), ('Cognitive', 'ADJ'), ('automation', 'NOUN'), (':', 'PUNCT'), ('Relates', 'NOUN'), ('process', 'NOUN'), (' ', 'SPACE'), ('automation', 'NOUN'), ('mimicking', 'VERB'), ('human', 'ADJ'), ('intelligence', 'NOUN'), ('facilitate', 'VERB'), (' ', 'SPACE'), ('complex', 'ADJ'), ('knowledge', 'NOUN'), ('-', 'PUNCT'), ('intense', 'ADJ'), ('business', 'NOUN'), ('decisions', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'ROOT'), ('—', 'punct'), ('Cognitive', 'amod'), ('automation', 'appos'), (':', 'punct'), ('Relates', 'appos'), ('process', 'compound'), (' ', 'compound'), ('automation', 'pobj'), ('mimicking', 'pcomp'), ('human', 'amod'), ('intelligence', 'dobj'), ('facilitate', 'advcl'), (' ', 'nmod'), ('complex', 'amod'), ('knowledge', 'npadvmod'), ('-', 'punct'), ('intense', 'conj'), ('business', 'compound'), ('decisions', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[ , —], [—, Cognitive], [Cognitive, automation], [automation, :], [:, Relates], [Relates, process], [process,  ], [ , automation], [automation, mimicking], [mimicking, human], [human, intelligence], [intelligence, facilitate], [facilitate,  ], [ , complex], [complex, knowledge], [knowledge, -], [-, intense], [intense, business], [business, decisions], [decisions, .]]

>> Trigrams: 
[[ , —, Cognitive], [—, Cognitive, automation], [Cognitive, automation, :], [automation, :, Relates], [:, Relates, process], [Relates, process,  ], [process,  , automation], [ , automation, mimicking], [automation, mimicking, human], [mimicking, human, intelligence], [human, intelligence, facilitate], [intelligence, facilitate,  ], [facilitate,  , complex], [ , complex, knowledge], [complex, knowledge, -], [knowledge, -, intense], [-, intense, business], [intense, business, decisions], [business, decisions, .]]

>> Noun Phrases are: 
[Cognitive automation, Relates, process  automation, human intelligence,  complex and knowledge-intense business decisions]

>> Named Entities are: 
[] 


================================ Paragraph 151 =================================

What are some examples of successful  implementations? There’s a vast amount of problems AI is already addressing  to deliver business value across the three macro domains  described in the previous section. We want to explain   a couple of use cases our IBM team has successfully  completed to demonstrate where AI can bring value. 

------------------- Sentence 1 -------------------

What are some examples of successful  implementations? 


>> Tokens are: 
[examples, successful,  , implementations, ?] 

>> PoS Tags are: 
[('examples', 'NOUN'), ('successful', 'ADJ'), (' ', 'SPACE'), ('implementations', 'NOUN'), ('?', 'PUNCT')] 

>> Dependency Tags are: 
[('examples', 'nsubj'), ('successful', 'amod'), (' ', 'compound'), ('implementations', 'pobj'), ('?', 'punct')]

>> Bigrams: 
[[examples, successful], [successful,  ], [ , implementations], [implementations, ?]]

>> Trigrams: 
[[examples, successful,  ], [successful,  , implementations], [ , implementations, ?]]

>> Noun Phrases are: 
[What, some examples, successful  implementations]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

There’s a vast amount of problems AI is already addressing  to deliver business value across the three macro domains  described in the previous section. 


>> Tokens are: 
[vast, problems, AI, addressing,  , deliver, business, value, macro, domains,  , described, previous, section, .] 

>> PoS Tags are: 
[('vast', 'ADJ'), ('problems', 'NOUN'), ('AI', 'PROPN'), ('addressing', 'VERB'), (' ', 'SPACE'), ('deliver', 'VERB'), ('business', 'NOUN'), ('value', 'NOUN'), ('macro', 'ADJ'), ('domains', 'NOUN'), (' ', 'SPACE'), ('described', 'VERB'), ('previous', 'ADJ'), ('section', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('vast', 'amod'), ('problems', 'pobj'), ('AI', 'nsubj'), ('addressing', 'relcl'), (' ', 'dobj'), ('deliver', 'advcl'), ('business', 'compound'), ('value', 'dobj'), ('macro', 'amod'), ('domains', 'pobj'), (' ', 'nsubj'), ('described', 'relcl'), ('previous', 'amod'), ('section', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[vast, problems], [problems, AI], [AI, addressing], [addressing,  ], [ , deliver], [deliver, business], [business, value], [value, macro], [macro, domains], [domains,  ], [ , described], [described, previous], [previous, section], [section, .]]

>> Trigrams: 
[[vast, problems, AI], [problems, AI, addressing], [AI, addressing,  ], [addressing,  , deliver], [ , deliver, business], [deliver, business, value], [business, value, macro], [value, macro, domains], [macro, domains,  ], [domains,  , described], [ , described, previous], [described, previous, section], [previous, section, .]]

>> Noun Phrases are: 
[a vast amount, problems, AI, business value, the three macro domains, the previous section]

>> Named Entities are: 
[('AI', 'ORG'), ('three', 'CARDINAL')] 

------------------- Sentence 3 -------------------

We want to explain   a couple of use cases our IBM team has successfully  completed to demonstrate where AI can bring value. 


>> Tokens are: 
[want, explain,   , couple, use, cases, IBM, team, successfully,  , completed, demonstrate, AI, bring, value, .] 

>> PoS Tags are: 
[('want', 'VERB'), ('explain', 'VERB'), ('  ', 'SPACE'), ('couple', 'NOUN'), ('use', 'NOUN'), ('cases', 'NOUN'), ('IBM', 'PROPN'), ('team', 'NOUN'), ('successfully', 'ADV'), (' ', 'SPACE'), ('completed', 'VERB'), ('demonstrate', 'VERB'), ('AI', 'PROPN'), ('bring', 'VERB'), ('value', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('want', 'ROOT'), ('explain', 'xcomp'), ('  ', 'dobj'), ('couple', 'dobj'), ('use', 'pobj'), ('cases', 'dobj'), ('IBM', 'compound'), ('team', 'nsubj'), ('successfully', 'advmod'), (' ', 'nsubj'), ('completed', 'relcl'), ('demonstrate', 'xcomp'), ('AI', 'nsubj'), ('bring', 'ccomp'), ('value', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[want, explain], [explain,   ], [  , couple], [couple, use], [use, cases], [cases, IBM], [IBM, team], [team, successfully], [successfully,  ], [ , completed], [completed, demonstrate], [demonstrate, AI], [AI, bring], [bring, value], [value, .]]

>> Trigrams: 
[[want, explain,   ], [explain,   , couple], [  , couple, use], [couple, use, cases], [use, cases, IBM], [cases, IBM, team], [IBM, team, successfully], [team, successfully,  ], [successfully,  , completed], [ , completed, demonstrate], [completed, demonstrate, AI], [demonstrate, AI, bring], [AI, bring, value], [bring, value, .]]

>> Noun Phrases are: 
[We, a couple, use, cases, our IBM team, AI, value]

>> Named Entities are: 
[('IBM', 'ORG'), ('AI', 'ORG')] 


================================ Paragraph 152 =================================

Manufacturer: engine anomaly detection using   a neural network  Using the many different available sensor measurements  from large truck engines, a neural network was trained to  recognize normal and abnormal engine behavior. In the  huge, high dimensional (many variables) dataset the  neural network learned the natural correlations and  relationships between all different readings. The resulting  

------------------- Sentence 1 -------------------

Manufacturer: engine anomaly detection using   a neural network  Using the many different available sensor measurements  from large truck engines, a neural network was trained to  recognize normal and abnormal engine behavior. 


>> Tokens are: 
[Manufacturer, :, engine, anomaly, detection,   , neural, network,  , different, available, sensor, measurements,  , large, truck, engines, ,, neural, network, trained,  , recognize, normal, abnormal, engine, behavior, .] 

>> PoS Tags are: 
[('Manufacturer', 'NOUN'), (':', 'PUNCT'), ('engine', 'NOUN'), ('anomaly', 'NOUN'), ('detection', 'NOUN'), ('  ', 'SPACE'), ('neural', 'ADJ'), ('network', 'NOUN'), (' ', 'SPACE'), ('different', 'ADJ'), ('available', 'ADJ'), ('sensor', 'NOUN'), ('measurements', 'NOUN'), (' ', 'SPACE'), ('large', 'ADJ'), ('truck', 'NOUN'), ('engines', 'NOUN'), (',', 'PUNCT'), ('neural', 'ADJ'), ('network', 'NOUN'), ('trained', 'VERB'), (' ', 'SPACE'), ('recognize', 'VERB'), ('normal', 'ADJ'), ('abnormal', 'ADJ'), ('engine', 'NOUN'), ('behavior', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Manufacturer', 'dep'), (':', 'punct'), ('engine', 'compound'), ('anomaly', 'compound'), ('detection', 'appos'), ('  ', 'dobj'), ('neural', 'amod'), ('network', 'dobj'), (' ', 'appos'), ('different', 'amod'), ('available', 'amod'), ('sensor', 'compound'), ('measurements', 'dobj'), (' ', 'dobj'), ('large', 'amod'), ('truck', 'compound'), ('engines', 'pobj'), (',', 'punct'), ('neural', 'amod'), ('network', 'nsubjpass'), ('trained', 'ROOT'), (' ', 'nsubj'), ('recognize', 'xcomp'), ('normal', 'amod'), ('abnormal', 'conj'), ('engine', 'compound'), ('behavior', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Manufacturer, :], [:, engine], [engine, anomaly], [anomaly, detection], [detection,   ], [  , neural], [neural, network], [network,  ], [ , different], [different, available], [available, sensor], [sensor, measurements], [measurements,  ], [ , large], [large, truck], [truck, engines], [engines, ,], [,, neural], [neural, network], [network, trained], [trained,  ], [ , recognize], [recognize, normal], [normal, abnormal], [abnormal, engine], [engine, behavior], [behavior, .]]

>> Trigrams: 
[[Manufacturer, :, engine], [:, engine, anomaly], [engine, anomaly, detection], [anomaly, detection,   ], [detection,   , neural], [  , neural, network], [neural, network,  ], [network,  , different], [ , different, available], [different, available, sensor], [available, sensor, measurements], [sensor, measurements,  ], [measurements,  , large], [ , large, truck], [large, truck, engines], [truck, engines, ,], [engines, ,, neural], [,, neural, network], [neural, network, trained], [network, trained,  ], [trained,  , recognize], [ , recognize, normal], [recognize, normal, abnormal], [normal, abnormal, engine], [abnormal, engine, behavior], [engine, behavior, .]]

>> Noun Phrases are: 
[engine anomaly detection, a neural network, the many different available sensor measurements, large truck engines, a neural network, normal and abnormal engine behavior]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

In the  huge, high dimensional (many variables) dataset the  neural network learned the natural correlations and  relationships between all different readings. 


>> Tokens are: 
[ , huge, ,, high, dimensional, (, variables, ), dataset,  , neural, network, learned, natural, correlations,  , relationships, different, readings, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('huge', 'ADJ'), (',', 'PUNCT'), ('high', 'ADJ'), ('dimensional', 'ADJ'), ('(', 'PUNCT'), ('variables', 'NOUN'), (')', 'PUNCT'), ('dataset', 'VERB'), (' ', 'SPACE'), ('neural', 'ADJ'), ('network', 'NOUN'), ('learned', 'VERB'), ('natural', 'ADJ'), ('correlations', 'NOUN'), (' ', 'SPACE'), ('relationships', 'NOUN'), ('different', 'ADJ'), ('readings', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'nmod'), ('huge', 'amod'), (',', 'punct'), ('high', 'advmod'), ('dimensional', 'amod'), ('(', 'punct'), ('variables', 'pobj'), (')', 'punct'), ('dataset', 'ROOT'), (' ', 'amod'), ('neural', 'amod'), ('network', 'nsubj'), ('learned', 'ccomp'), ('natural', 'amod'), ('correlations', 'dobj'), (' ', 'compound'), ('relationships', 'conj'), ('different', 'amod'), ('readings', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[ , huge], [huge, ,], [,, high], [high, dimensional], [dimensional, (], [(, variables], [variables, )], [), dataset], [dataset,  ], [ , neural], [neural, network], [network, learned], [learned, natural], [natural, correlations], [correlations,  ], [ , relationships], [relationships, different], [different, readings], [readings, .]]

>> Trigrams: 
[[ , huge, ,], [huge, ,, high], [,, high, dimensional], [high, dimensional, (], [dimensional, (, variables], [(, variables, )], [variables, ), dataset], [), dataset,  ], [dataset,  , neural], [ , neural, network], [neural, network, learned], [network, learned, natural], [learned, natural, correlations], [natural, correlations,  ], [correlations,  , relationships], [ , relationships, different], [relationships, different, readings], [different, readings, .]]

>> Noun Phrases are: 
[the  huge, high dimensional (many variables, the  neural network, the natural correlations,  relationships, all different readings]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

The resulting   


>> Tokens are: 
[resulting,  ] 

>> PoS Tags are: 
[('resulting', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('resulting', 'amod'), (' ', 'ROOT')]

>> Bigrams: 
[[resulting,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 153 =================================

model was able to predict “normal” values given certain  operating conditions and could thus also be used to detect  when specific measurements were out of the ordinary.  Anomalous sensor readings are highly predictive of  pending engine failures. 

------------------- Sentence 1 -------------------

model was able to predict “normal” values given certain  operating conditions and could thus also be used to detect  when specific measurements were out of the ordinary. 


>> Tokens are: 
[model, able, predict, “, normal, ”, values, given, certain,  , operating, conditions, detect,  , specific, measurements, ordinary, .] 

>> PoS Tags are: 
[('model', 'NOUN'), ('able', 'ADJ'), ('predict', 'VERB'), ('“', 'PUNCT'), ('normal', 'ADJ'), ('”', 'PUNCT'), ('values', 'NOUN'), ('given', 'VERB'), ('certain', 'ADJ'), (' ', 'SPACE'), ('operating', 'VERB'), ('conditions', 'NOUN'), ('detect', 'VERB'), (' ', 'SPACE'), ('specific', 'ADJ'), ('measurements', 'NOUN'), ('ordinary', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('model', 'nsubj'), ('able', 'acomp'), ('predict', 'xcomp'), ('“', 'punct'), ('normal', 'amod'), ('”', 'punct'), ('values', 'dobj'), ('given', 'acl'), ('certain', 'amod'), (' ', 'nmod'), ('operating', 'compound'), ('conditions', 'dobj'), ('detect', 'xcomp'), (' ', 'dobj'), ('specific', 'amod'), ('measurements', 'nsubj'), ('ordinary', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[model, able], [able, predict], [predict, “], [“, normal], [normal, ”], [”, values], [values, given], [given, certain], [certain,  ], [ , operating], [operating, conditions], [conditions, detect], [detect,  ], [ , specific], [specific, measurements], [measurements, ordinary], [ordinary, .]]

>> Trigrams: 
[[model, able, predict], [able, predict, “], [predict, “, normal], [“, normal, ”], [normal, ”, values], [”, values, given], [values, given, certain], [given, certain,  ], [certain,  , operating], [ , operating, conditions], [operating, conditions, detect], [conditions, detect,  ], [detect,  , specific], [ , specific, measurements], [specific, measurements, ordinary], [measurements, ordinary, .]]

>> Noun Phrases are: 
[model, “normal” values, certain  operating conditions, specific measurements]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

Anomalous sensor readings are highly predictive of  pending engine failures. 


>> Tokens are: 
[Anomalous, sensor, readings, highly, predictive,  , pending, engine, failures, .] 

>> PoS Tags are: 
[('Anomalous', 'ADJ'), ('sensor', 'NOUN'), ('readings', 'NOUN'), ('highly', 'ADV'), ('predictive', 'ADJ'), (' ', 'SPACE'), ('pending', 'VERB'), ('engine', 'NOUN'), ('failures', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Anomalous', 'amod'), ('sensor', 'compound'), ('readings', 'nsubj'), ('highly', 'advmod'), ('predictive', 'acomp'), (' ', 'pobj'), ('pending', 'prep'), ('engine', 'compound'), ('failures', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Anomalous, sensor], [sensor, readings], [readings, highly], [highly, predictive], [predictive,  ], [ , pending], [pending, engine], [engine, failures], [failures, .]]

>> Trigrams: 
[[Anomalous, sensor, readings], [sensor, readings, highly], [readings, highly, predictive], [highly, predictive,  ], [predictive,  , pending], [ , pending, engine], [pending, engine, failures], [engine, failures, .]]

>> Noun Phrases are: 
[Anomalous sensor readings, engine failures]

>> Named Entities are: 
[] 


================================ Paragraph 154 =================================

Car manufacturer: predictive failure detection for welding  robots and predictive maintenance assessment Through supervised learning techniques, predictive models  were developed that could provide an early warning of  failure based on the different system messages and sensor  readings that continuously stream from the production line.  This early warning could be used to prioritize maintenance  and reduce both downtime as well as false positives and  needless efforts. Working through this first proof of value,  the data scientists uncovered many data quality challenges  that could be worked around to realize more value. 

------------------- Sentence 1 -------------------

Car manufacturer: predictive failure detection for welding  robots and predictive maintenance assessment Through supervised learning techniques, predictive models  were developed that could provide an early warning of  failure based on the different system messages and sensor  readings that continuously stream from the production line. 


>> Tokens are: 
[Car, manufacturer, :, predictive, failure, detection, welding,  , robots, predictive, maintenance, assessment, supervised, learning, techniques, ,, predictive, models,  , developed, provide, early, warning,  , failure, based, different, system, messages, sensor,  , readings, continuously, stream, production, line, .] 

>> PoS Tags are: 
[('Car', 'NOUN'), ('manufacturer', 'NOUN'), (':', 'PUNCT'), ('predictive', 'ADJ'), ('failure', 'NOUN'), ('detection', 'NOUN'), ('welding', 'VERB'), (' ', 'SPACE'), ('robots', 'NOUN'), ('predictive', 'ADJ'), ('maintenance', 'NOUN'), ('assessment', 'NOUN'), ('supervised', 'ADJ'), ('learning', 'NOUN'), ('techniques', 'NOUN'), (',', 'PUNCT'), ('predictive', 'ADJ'), ('models', 'NOUN'), (' ', 'SPACE'), ('developed', 'VERB'), ('provide', 'VERB'), ('early', 'ADJ'), ('warning', 'NOUN'), (' ', 'SPACE'), ('failure', 'NOUN'), ('based', 'VERB'), ('different', 'ADJ'), ('system', 'NOUN'), ('messages', 'NOUN'), ('sensor', 'VERB'), (' ', 'SPACE'), ('readings', 'NOUN'), ('continuously', 'ADV'), ('stream', 'VERB'), ('production', 'NOUN'), ('line', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Car', 'compound'), ('manufacturer', 'ROOT'), (':', 'punct'), ('predictive', 'amod'), ('failure', 'compound'), ('detection', 'appos'), ('welding', 'pcomp'), (' ', 'advmod'), ('robots', 'dobj'), ('predictive', 'amod'), ('maintenance', 'compound'), ('assessment', 'conj'), ('supervised', 'amod'), ('learning', 'compound'), ('techniques', 'pobj'), (',', 'punct'), ('predictive', 'amod'), ('models', 'appos'), (' ', 'nsubjpass'), ('developed', 'relcl'), ('provide', 'relcl'), ('early', 'amod'), ('warning', 'dobj'), (' ', 'compound'), ('failure', 'pobj'), ('based', 'acl'), ('different', 'amod'), ('system', 'compound'), ('messages', 'pobj'), ('sensor', 'compound'), (' ', 'compound'), ('readings', 'conj'), ('continuously', 'advmod'), ('stream', 'relcl'), ('production', 'compound'), ('line', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Car, manufacturer], [manufacturer, :], [:, predictive], [predictive, failure], [failure, detection], [detection, welding], [welding,  ], [ , robots], [robots, predictive], [predictive, maintenance], [maintenance, assessment], [assessment, supervised], [supervised, learning], [learning, techniques], [techniques, ,], [,, predictive], [predictive, models], [models,  ], [ , developed], [developed, provide], [provide, early], [early, warning], [warning,  ], [ , failure], [failure, based], [based, different], [different, system], [system, messages], [messages, sensor], [sensor,  ], [ , readings], [readings, continuously], [continuously, stream], [stream, production], [production, line], [line, .]]

>> Trigrams: 
[[Car, manufacturer, :], [manufacturer, :, predictive], [:, predictive, failure], [predictive, failure, detection], [failure, detection, welding], [detection, welding,  ], [welding,  , robots], [ , robots, predictive], [robots, predictive, maintenance], [predictive, maintenance, assessment], [maintenance, assessment, supervised], [assessment, supervised, learning], [supervised, learning, techniques], [learning, techniques, ,], [techniques, ,, predictive], [,, predictive, models], [predictive, models,  ], [models,  , developed], [ , developed, provide], [developed, provide, early], [provide, early, warning], [early, warning,  ], [warning,  , failure], [ , failure, based], [failure, based, different], [based, different, system], [different, system, messages], [system, messages, sensor], [messages, sensor,  ], [sensor,  , readings], [ , readings, continuously], [readings, continuously, stream], [continuously, stream, production], [stream, production, line], [production, line, .]]

>> Noun Phrases are: 
[Car manufacturer, predictive failure detection, robots, predictive maintenance assessment, supervised learning techniques, predictive models, an early warning,  failure, the different system messages, sensor  readings, the production line]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

This early warning could be used to prioritize maintenance  and reduce both downtime as well as false positives and  needless efforts. 


>> Tokens are: 
[early, warning, prioritize, maintenance,  , reduce, downtime, false, positives,  , needless, efforts, .] 

>> PoS Tags are: 
[('early', 'ADJ'), ('warning', 'NOUN'), ('prioritize', 'VERB'), ('maintenance', 'NOUN'), (' ', 'SPACE'), ('reduce', 'VERB'), ('downtime', 'NOUN'), ('false', 'ADJ'), ('positives', 'NOUN'), (' ', 'SPACE'), ('needless', 'ADJ'), ('efforts', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('early', 'amod'), ('warning', 'nsubjpass'), ('prioritize', 'xcomp'), ('maintenance', 'compound'), (' ', 'dobj'), ('reduce', 'conj'), ('downtime', 'dobj'), ('false', 'amod'), ('positives', 'conj'), (' ', 'nmod'), ('needless', 'amod'), ('efforts', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[early, warning], [warning, prioritize], [prioritize, maintenance], [maintenance,  ], [ , reduce], [reduce, downtime], [downtime, false], [false, positives], [positives,  ], [ , needless], [needless, efforts], [efforts, .]]

>> Trigrams: 
[[early, warning, prioritize], [warning, prioritize, maintenance], [prioritize, maintenance,  ], [maintenance,  , reduce], [ , reduce, downtime], [reduce, downtime, false], [downtime, false, positives], [false, positives,  ], [positives,  , needless], [ , needless, efforts], [needless, efforts, .]]

>> Noun Phrases are: 
[This early warning, both downtime, false positives,  needless efforts]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

Working through this first proof of value,  the data scientists uncovered many data quality challenges  that could be worked around to realize more value. 


>> Tokens are: 
[Working, proof, value, ,,  , data, scientists, uncovered, data, quality, challenges,  , worked, realize, value, .] 

>> PoS Tags are: 
[('Working', 'VERB'), ('proof', 'NOUN'), ('value', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('data', 'NOUN'), ('scientists', 'NOUN'), ('uncovered', 'VERB'), ('data', 'NOUN'), ('quality', 'NOUN'), ('challenges', 'NOUN'), (' ', 'SPACE'), ('worked', 'VERB'), ('realize', 'VERB'), ('value', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Working', 'advcl'), ('proof', 'pobj'), ('value', 'pobj'), (',', 'punct'), (' ', 'dep'), ('data', 'compound'), ('scientists', 'nsubj'), ('uncovered', 'ROOT'), ('data', 'compound'), ('quality', 'compound'), ('challenges', 'dobj'), (' ', 'appos'), ('worked', 'relcl'), ('realize', 'advcl'), ('value', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Working, proof], [proof, value], [value, ,], [,,  ], [ , data], [data, scientists], [scientists, uncovered], [uncovered, data], [data, quality], [quality, challenges], [challenges,  ], [ , worked], [worked, realize], [realize, value], [value, .]]

>> Trigrams: 
[[Working, proof, value], [proof, value, ,], [value, ,,  ], [,,  , data], [ , data, scientists], [data, scientists, uncovered], [scientists, uncovered, data], [uncovered, data, quality], [data, quality, challenges], [quality, challenges,  ], [challenges,  , worked], [ , worked, realize], [worked, realize, value], [realize, value, .]]

>> Noun Phrases are: 
[this first proof, value, the data scientists, many data quality challenges, more value]

>> Named Entities are: 
[('first', 'ORDINAL')] 


================================ Paragraph 155 =================================

Figure 5: The most valuable AI implementations. 

------------------- Sentence 1 -------------------

Figure 5: The most valuable AI implementations. 


>> Tokens are: 
[Figure, 5, :, valuable, AI, implementations, .] 

>> PoS Tags are: 
[('Figure', 'VERB'), ('5', 'NUM'), (':', 'PUNCT'), ('valuable', 'ADJ'), ('AI', 'PROPN'), ('implementations', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Figure', 'ROOT'), ('5', 'nummod'), (':', 'punct'), ('valuable', 'amod'), ('AI', 'compound'), ('implementations', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[Figure, 5], [5, :], [:, valuable], [valuable, AI], [AI, implementations], [implementations, .]]

>> Trigrams: 
[[Figure, 5, :], [5, :, valuable], [:, valuable, AI], [valuable, AI, implementations], [AI, implementations, .]]

>> Noun Phrases are: 
[The most valuable AI implementations]

>> Named Entities are: 
[('5', 'CARDINAL'), ('AI', 'ORG')] 


================================ Paragraph 156 =================================

Designing and  delivering new  

------------------- Sentence 1 -------------------

Designing and  delivering new   


>> Tokens are: 
[Designing,  , delivering, new,  ] 

>> PoS Tags are: 
[('Designing', 'NOUN'), (' ', 'SPACE'), ('delivering', 'VERB'), ('new', 'ADJ'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Designing', 'ROOT'), (' ', 'conj'), ('delivering', 'acl'), ('new', 'amod'), (' ', 'dobj')]

>> Bigrams: 
[[Designing,  ], [ , delivering], [delivering, new], [new,  ]]

>> Trigrams: 
[[Designing,  , delivering], [ , delivering, new], [delivering, new,  ]]

>> Noun Phrases are: 
[Designing]

>> Named Entities are: 
[] 


================================ Paragraph 157 =================================

customer engagement 

------------------- Sentence 1 -------------------

customer engagement 


>> Tokens are: 
[customer, engagement] 

>> PoS Tags are: 
[('customer', 'NOUN'), ('engagement', 'NOUN')] 

>> Dependency Tags are: 
[('customer', 'compound'), ('engagement', 'ROOT')]

>> Bigrams: 
[[customer, engagement]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[customer engagement]

>> Named Entities are: 
[] 


================================ Paragraph 158 =================================

Cognitive   engagement 

------------------- Sentence 1 -------------------

Cognitive   engagement 


>> Tokens are: 
[Cognitive,   , engagement] 

>> PoS Tags are: 
[('Cognitive', 'ADJ'), ('  ', 'SPACE'), ('engagement', 'NOUN')] 

>> Dependency Tags are: 
[('Cognitive', 'amod'), ('  ', 'compound'), ('engagement', 'ROOT')]

>> Bigrams: 
[[Cognitive,   ], [  , engagement]]

>> Trigrams: 
[[Cognitive,   , engagement]]

>> Noun Phrases are: 
[Cognitive   engagement]

>> Named Entities are: 
[] 


================================ Paragraph 159 =================================

Elevating and   scaling knowledge   

------------------- Sentence 1 -------------------

Elevating and   scaling knowledge    


>> Tokens are: 
[Elevating,   , scaling, knowledge,   ] 

>> PoS Tags are: 
[('Elevating', 'NOUN'), ('  ', 'SPACE'), ('scaling', 'VERB'), ('knowledge', 'NOUN'), ('  ', 'SPACE')] 

>> Dependency Tags are: 
[('Elevating', 'nsubj'), ('  ', 'conj'), ('scaling', 'ROOT'), ('knowledge', 'dobj'), ('  ', 'dobj')]

>> Bigrams: 
[[Elevating,   ], [  , scaling], [scaling, knowledge], [knowledge,   ]]

>> Trigrams: 
[[Elevating,   , scaling], [  , scaling, knowledge], [scaling, knowledge,   ]]

>> Noun Phrases are: 
[Elevating, knowledge]

>> Named Entities are: 
[] 


================================ Paragraph 160 =================================

and expertise 

------------------- Sentence 1 -------------------

and 


>> Tokens are: 
[] 

>> PoS Tags are: 
[] 

>> Dependency Tags are: 
[]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

expertise 


>> Tokens are: 
[expertise] 

>> PoS Tags are: 
[('expertise', 'NOUN')] 

>> Dependency Tags are: 
[('expertise', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[expertise]

>> Named Entities are: 
[] 


================================ Paragraph 161 =================================

Cognitive   insights &   

------------------- Sentence 1 -------------------

Cognitive   insights &    


>> Tokens are: 
[Cognitive,   , insights, &,   ] 

>> PoS Tags are: 
[('Cognitive', 'ADJ'), ('  ', 'SPACE'), ('insights', 'NOUN'), ('&', 'CCONJ'), ('  ', 'SPACE')] 

>> Dependency Tags are: 
[('Cognitive', 'amod'), ('  ', 'compound'), ('insights', 'ROOT'), ('&', 'cc'), ('  ', 'conj')]

>> Bigrams: 
[[Cognitive,   ], [  , insights], [insights, &], [&,   ]]

>> Trigrams: 
[[Cognitive,   , insights], [  , insights, &], [insights, &,   ]]

>> Noun Phrases are: 
[Cognitive   insights]

>> Named Entities are: 
[] 


================================ Paragraph 162 =================================

knowledge 

------------------- Sentence 1 -------------------

knowledge 


>> Tokens are: 
[knowledge] 

>> PoS Tags are: 
[('knowledge', 'NOUN')] 

>> Dependency Tags are: 
[('knowledge', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[knowledge]

>> Named Entities are: 
[] 


================================ Paragraph 163 =================================

Designing and  delivering agility and  operational efficiency 

------------------- Sentence 1 -------------------

Designing and  delivering agility and  operational efficiency 


>> Tokens are: 
[Designing,  , delivering, agility,  , operational, efficiency] 

>> PoS Tags are: 
[('Designing', 'NOUN'), (' ', 'SPACE'), ('delivering', 'VERB'), ('agility', 'NOUN'), (' ', 'SPACE'), ('operational', 'ADJ'), ('efficiency', 'NOUN')] 

>> Dependency Tags are: 
[('Designing', 'ROOT'), (' ', 'conj'), ('delivering', 'acl'), ('agility', 'dobj'), (' ', 'conj'), ('operational', 'amod'), ('efficiency', 'appos')]

>> Bigrams: 
[[Designing,  ], [ , delivering], [delivering, agility], [agility,  ], [ , operational], [operational, efficiency]]

>> Trigrams: 
[[Designing,  , delivering], [ , delivering, agility], [delivering, agility,  ], [agility,  , operational], [ , operational, efficiency]]

>> Noun Phrases are: 
[Designing, agility, operational efficiency]

>> Named Entities are: 
[] 


================================ Paragraph 164 =================================

Cognitive   automation

------------------- Sentence 1 -------------------

Cognitive   automation 


>> Tokens are: 
[Cognitive,   , automation] 

>> PoS Tags are: 
[('Cognitive', 'ADJ'), ('  ', 'SPACE'), ('automation', 'NOUN')] 

>> Dependency Tags are: 
[('Cognitive', 'amod'), ('  ', 'dobj'), ('automation', 'ROOT')]

>> Bigrams: 
[[Cognitive,   ], [  , automation]]

>> Trigrams: 
[[Cognitive,   , automation]]

>> Noun Phrases are: 
[Cognitive   automation]

>> Named Entities are: 
[] 


================================ Paragraph 165 =================================

IBM Services     9 

------------------- Sentence 1 -------------------

IBM Services      


>> Tokens are: 
[IBM, Services,     ] 

>> PoS Tags are: 
[('IBM', 'PROPN'), ('Services', 'PROPN'), ('    ', 'SPACE')] 

>> Dependency Tags are: 
[('IBM', 'compound'), ('Services', 'ROOT'), ('    ', 'appos')]

>> Bigrams: 
[[IBM, Services], [Services,     ]]

>> Trigrams: 
[[IBM, Services,     ]]

>> Noun Phrases are: 
[IBM Services]

>> Named Entities are: 
[('IBM Services', 'ORG')] 

------------------- Sentence 2 -------------------

9 


>> Tokens are: 
[9] 

>> PoS Tags are: 
[('9', 'NUM')] 

>> Dependency Tags are: 
[('9', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 166 =================================

Utility company: micro-grid energy forecasting and  production mix optimization The output of machine learning-based predictive models  with prescriptive, mathematical optimization models to  prescribe the optimal mix of power production sources to  meet predicted demand and to minimize costs. This required  both the prediction of demand as well as prediction of  available solar and wind energy capacity. 

------------------- Sentence 1 -------------------

Utility company: micro-grid energy forecasting and  production mix optimization The output of machine learning-based predictive models  with prescriptive, mathematical optimization models to  prescribe the optimal mix of power production sources to  meet predicted demand and to minimize costs. 


>> Tokens are: 
[Utility, company, :, micro, -, grid, energy, forecasting,  , production, mix, optimization, output, machine, learning, -, based, predictive, models,  , prescriptive, ,, mathematical, optimization, models,  , prescribe, optimal, mix, power, production, sources,  , meet, predicted, demand, minimize, costs, .] 

>> PoS Tags are: 
[('Utility', 'NOUN'), ('company', 'NOUN'), (':', 'PUNCT'), ('micro', 'ADJ'), ('-', 'ADJ'), ('grid', 'ADJ'), ('energy', 'NOUN'), ('forecasting', 'NOUN'), (' ', 'SPACE'), ('production', 'NOUN'), ('mix', 'NOUN'), ('optimization', 'NOUN'), ('output', 'NOUN'), ('machine', 'NOUN'), ('learning', 'NOUN'), ('-', 'PUNCT'), ('based', 'VERB'), ('predictive', 'ADJ'), ('models', 'NOUN'), (' ', 'SPACE'), ('prescriptive', 'ADJ'), (',', 'PUNCT'), ('mathematical', 'ADJ'), ('optimization', 'NOUN'), ('models', 'NOUN'), (' ', 'SPACE'), ('prescribe', 'VERB'), ('optimal', 'ADJ'), ('mix', 'NOUN'), ('power', 'NOUN'), ('production', 'NOUN'), ('sources', 'NOUN'), (' ', 'SPACE'), ('meet', 'VERB'), ('predicted', 'VERB'), ('demand', 'NOUN'), ('minimize', 'VERB'), ('costs', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Utility', 'compound'), ('company', 'nsubj'), (':', 'punct'), ('micro', 'amod'), ('-', 'amod'), ('grid', 'amod'), ('energy', 'compound'), ('forecasting', 'appos'), (' ', 'conj'), ('production', 'compound'), ('mix', 'compound'), ('optimization', 'conj'), ('output', 'appos'), ('machine', 'compound'), ('learning', 'npadvmod'), ('-', 'punct'), ('based', 'amod'), ('predictive', 'amod'), ('models', 'pobj'), (' ', 'nummod'), ('prescriptive', 'amod'), (',', 'punct'), ('mathematical', 'amod'), ('optimization', 'compound'), ('models', 'pobj'), (' ', 'pobj'), ('prescribe', 'ROOT'), ('optimal', 'amod'), ('mix', 'dobj'), ('power', 'compound'), ('production', 'compound'), ('sources', 'pobj'), (' ', 'pobj'), ('meet', 'conj'), ('predicted', 'amod'), ('demand', 'dobj'), ('minimize', 'conj'), ('costs', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Utility, company], [company, :], [:, micro], [micro, -], [-, grid], [grid, energy], [energy, forecasting], [forecasting,  ], [ , production], [production, mix], [mix, optimization], [optimization, output], [output, machine], [machine, learning], [learning, -], [-, based], [based, predictive], [predictive, models], [models,  ], [ , prescriptive], [prescriptive, ,], [,, mathematical], [mathematical, optimization], [optimization, models], [models,  ], [ , prescribe], [prescribe, optimal], [optimal, mix], [mix, power], [power, production], [production, sources], [sources,  ], [ , meet], [meet, predicted], [predicted, demand], [demand, minimize], [minimize, costs], [costs, .]]

>> Trigrams: 
[[Utility, company, :], [company, :, micro], [:, micro, -], [micro, -, grid], [-, grid, energy], [grid, energy, forecasting], [energy, forecasting,  ], [forecasting,  , production], [ , production, mix], [production, mix, optimization], [mix, optimization, output], [optimization, output, machine], [output, machine, learning], [machine, learning, -], [learning, -, based], [-, based, predictive], [based, predictive, models], [predictive, models,  ], [models,  , prescriptive], [ , prescriptive, ,], [prescriptive, ,, mathematical], [,, mathematical, optimization], [mathematical, optimization, models], [optimization, models,  ], [models,  , prescribe], [ , prescribe, optimal], [prescribe, optimal, mix], [optimal, mix, power], [mix, power, production], [power, production, sources], [production, sources,  ], [sources,  , meet], [ , meet, predicted], [meet, predicted, demand], [predicted, demand, minimize], [demand, minimize, costs], [minimize, costs, .]]

>> Noun Phrases are: 
[Utility company, micro-grid energy forecasting, production mix optimization, The output, machine learning-based predictive models, prescriptive, mathematical optimization models, the optimal mix, power production sources, predicted demand, costs]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

This required  both the prediction of demand as well as prediction of  available solar and wind energy capacity. 


>> Tokens are: 
[required,  , prediction, demand, prediction,  , available, solar, wind, energy, capacity, .] 

>> PoS Tags are: 
[('required', 'VERB'), (' ', 'SPACE'), ('prediction', 'NOUN'), ('demand', 'NOUN'), ('prediction', 'NOUN'), (' ', 'SPACE'), ('available', 'ADJ'), ('solar', 'ADJ'), ('wind', 'NOUN'), ('energy', 'NOUN'), ('capacity', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('required', 'ROOT'), (' ', 'dobj'), ('prediction', 'dobj'), ('demand', 'pobj'), ('prediction', 'conj'), (' ', 'pobj'), ('available', 'amod'), ('solar', 'amod'), ('wind', 'conj'), ('energy', 'compound'), ('capacity', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[required,  ], [ , prediction], [prediction, demand], [demand, prediction], [prediction,  ], [ , available], [available, solar], [solar, wind], [wind, energy], [energy, capacity], [capacity, .]]

>> Trigrams: 
[[required,  , prediction], [ , prediction, demand], [prediction, demand, prediction], [demand, prediction,  ], [prediction,  , available], [ , available, solar], [available, solar, wind], [solar, wind, energy], [wind, energy, capacity], [energy, capacity, .]]

>> Noun Phrases are: 
[both the prediction, demand, prediction, available solar and wind energy capacity]

>> Named Entities are: 
[] 


================================ Paragraph 167 =================================

Material producer: insights dashboard IBM worked with the client’s sourcing experts to understand  the business dynamics and create inventory of possibly  relevant data sources. Several machine learning models  were then trained to learn the price behavior and forecast  future price development. The models also enabled  buyers to evaluate their own “what if” scenarios. This was  further supplemented with IBM® Watson Discovery News  service, which identified the most relevant news articles  related to the material of interest. This all came together  for the user in an interactive dashboard to consume the  insights and interact with the data and models to make  buying decisions. 

------------------- Sentence 1 -------------------

Material producer: insights dashboard IBM worked with the client’s sourcing experts to understand  the business dynamics and create inventory of possibly  relevant data sources. 


>> Tokens are: 
[Material, producer, :, insights, dashboard, IBM, worked, client, sourcing, experts, understand,  , business, dynamics, create, inventory, possibly,  , relevant, data, sources, .] 

>> PoS Tags are: 
[('Material', 'NOUN'), ('producer', 'NOUN'), (':', 'PUNCT'), ('insights', 'NOUN'), ('dashboard', 'NOUN'), ('IBM', 'PROPN'), ('worked', 'VERB'), ('client', 'NOUN'), ('sourcing', 'VERB'), ('experts', 'NOUN'), ('understand', 'VERB'), (' ', 'SPACE'), ('business', 'NOUN'), ('dynamics', 'NOUN'), ('create', 'VERB'), ('inventory', 'NOUN'), ('possibly', 'ADV'), (' ', 'SPACE'), ('relevant', 'ADJ'), ('data', 'NOUN'), ('sources', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Material', 'compound'), ('producer', 'dep'), (':', 'punct'), ('insights', 'compound'), ('dashboard', 'npadvmod'), ('IBM', 'nsubj'), ('worked', 'ROOT'), ('client', 'nsubj'), ('sourcing', 'amod'), ('experts', 'pobj'), ('understand', 'advcl'), (' ', 'dobj'), ('business', 'compound'), ('dynamics', 'dobj'), ('create', 'conj'), ('inventory', 'dobj'), ('possibly', 'advmod'), (' ', 'pcomp'), ('relevant', 'amod'), ('data', 'compound'), ('sources', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Material, producer], [producer, :], [:, insights], [insights, dashboard], [dashboard, IBM], [IBM, worked], [worked, client], [client, sourcing], [sourcing, experts], [experts, understand], [understand,  ], [ , business], [business, dynamics], [dynamics, create], [create, inventory], [inventory, possibly], [possibly,  ], [ , relevant], [relevant, data], [data, sources], [sources, .]]

>> Trigrams: 
[[Material, producer, :], [producer, :, insights], [:, insights, dashboard], [insights, dashboard, IBM], [dashboard, IBM, worked], [IBM, worked, client], [worked, client, sourcing], [client, sourcing, experts], [sourcing, experts, understand], [experts, understand,  ], [understand,  , business], [ , business, dynamics], [business, dynamics, create], [dynamics, create, inventory], [create, inventory, possibly], [inventory, possibly,  ], [possibly,  , relevant], [ , relevant, data], [relevant, data, sources], [data, sources, .]]

>> Noun Phrases are: 
[IBM, the client, the business dynamics, inventory, relevant data sources]

>> Named Entities are: 
[('IBM', 'ORG')] 

------------------- Sentence 2 -------------------

Several machine learning models  were then trained to learn the price behavior and forecast  future price development. 


>> Tokens are: 
[machine, learning, models,  , trained, learn, price, behavior, forecast,  , future, price, development, .] 

>> PoS Tags are: 
[('machine', 'NOUN'), ('learning', 'NOUN'), ('models', 'NOUN'), (' ', 'SPACE'), ('trained', 'VERB'), ('learn', 'VERB'), ('price', 'NOUN'), ('behavior', 'NOUN'), ('forecast', 'VERB'), (' ', 'SPACE'), ('future', 'ADJ'), ('price', 'NOUN'), ('development', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('machine', 'compound'), ('learning', 'compound'), ('models', 'nsubjpass'), (' ', 'nsubjpass'), ('trained', 'ROOT'), ('learn', 'xcomp'), ('price', 'compound'), ('behavior', 'dobj'), ('forecast', 'conj'), (' ', 'dobj'), ('future', 'amod'), ('price', 'compound'), ('development', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[machine, learning], [learning, models], [models,  ], [ , trained], [trained, learn], [learn, price], [price, behavior], [behavior, forecast], [forecast,  ], [ , future], [future, price], [price, development], [development, .]]

>> Trigrams: 
[[machine, learning, models], [learning, models,  ], [models,  , trained], [ , trained, learn], [trained, learn, price], [learn, price, behavior], [price, behavior, forecast], [behavior, forecast,  ], [forecast,  , future], [ , future, price], [future, price, development], [price, development, .]]

>> Noun Phrases are: 
[Several machine learning models, the price behavior, future price development]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

The models also enabled  buyers to evaluate their own “what if” scenarios. 


>> Tokens are: 
[models, enabled,  , buyers, evaluate, “, ”, scenarios, .] 

>> PoS Tags are: 
[('models', 'NOUN'), ('enabled', 'VERB'), (' ', 'SPACE'), ('buyers', 'NOUN'), ('evaluate', 'VERB'), ('“', 'PUNCT'), ('”', 'PUNCT'), ('scenarios', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('models', 'nsubj'), ('enabled', 'ROOT'), (' ', 'dobj'), ('buyers', 'dobj'), ('evaluate', 'xcomp'), ('“', 'punct'), ('”', 'punct'), ('scenarios', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[models, enabled], [enabled,  ], [ , buyers], [buyers, evaluate], [evaluate, “], [“, ”], [”, scenarios], [scenarios, .]]

>> Trigrams: 
[[models, enabled,  ], [enabled,  , buyers], [ , buyers, evaluate], [buyers, evaluate, “], [evaluate, “, ”], [“, ”, scenarios], [”, scenarios, .]]

>> Noun Phrases are: 
[The models, buyers, their own “what if” scenarios]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

This was  further supplemented with IBM® Watson Discovery News  service, which identified the most relevant news articles  related to the material of interest. 


>> Tokens are: 
[ , supplemented, IBM, ®, Watson, Discovery, News,  , service, ,, identified, relevant, news, articles,  , related, material, interest, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('supplemented', 'VERB'), ('IBM', 'PROPN'), ('®', 'NOUN'), ('Watson', 'PROPN'), ('Discovery', 'PROPN'), ('News', 'PROPN'), (' ', 'SPACE'), ('service', 'NOUN'), (',', 'PUNCT'), ('identified', 'VERB'), ('relevant', 'ADJ'), ('news', 'NOUN'), ('articles', 'NOUN'), (' ', 'SPACE'), ('related', 'VERB'), ('material', 'NOUN'), ('interest', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'nsubj'), ('supplemented', 'ROOT'), ('IBM', 'compound'), ('®', 'compound'), ('Watson', 'compound'), ('Discovery', 'compound'), ('News', 'nmod'), (' ', 'nummod'), ('service', 'pobj'), (',', 'punct'), ('identified', 'relcl'), ('relevant', 'amod'), ('news', 'compound'), ('articles', 'dobj'), (' ', 'nsubj'), ('related', 'acl'), ('material', 'pobj'), ('interest', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[ , supplemented], [supplemented, IBM], [IBM, ®], [®, Watson], [Watson, Discovery], [Discovery, News], [News,  ], [ , service], [service, ,], [,, identified], [identified, relevant], [relevant, news], [news, articles], [articles,  ], [ , related], [related, material], [material, interest], [interest, .]]

>> Trigrams: 
[[ , supplemented, IBM], [supplemented, IBM, ®], [IBM, ®, Watson], [®, Watson, Discovery], [Watson, Discovery, News], [Discovery, News,  ], [News,  , service], [ , service, ,], [service, ,, identified], [,, identified, relevant], [identified, relevant, news], [relevant, news, articles], [news, articles,  ], [articles,  , related], [ , related, material], [related, material, interest], [material, interest, .]]

>> Noun Phrases are: 
[IBM® Watson Discovery News  service, the most relevant news articles, the material, interest]

>> Named Entities are: 
[('IBM', 'ORG'), ('Watson Discovery News', 'PERSON')] 

------------------- Sentence 5 -------------------

This all came together  for the user in an interactive dashboard to consume the  insights and interact with the data and models to make  buying decisions. 


>> Tokens are: 
[came,  , user, interactive, dashboard, consume,  , insights, interact, data, models,  , buying, decisions, .] 

>> PoS Tags are: 
[('came', 'VERB'), (' ', 'SPACE'), ('user', 'NOUN'), ('interactive', 'ADJ'), ('dashboard', 'NOUN'), ('consume', 'VERB'), (' ', 'SPACE'), ('insights', 'NOUN'), ('interact', 'VERB'), ('data', 'NOUN'), ('models', 'NOUN'), (' ', 'SPACE'), ('buying', 'VERB'), ('decisions', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('came', 'ROOT'), (' ', 'npadvmod'), ('user', 'pobj'), ('interactive', 'amod'), ('dashboard', 'pobj'), ('consume', 'advcl'), (' ', 'compound'), ('insights', 'dobj'), ('interact', 'conj'), ('data', 'pobj'), ('models', 'conj'), (' ', 'nsubj'), ('buying', 'ccomp'), ('decisions', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[came,  ], [ , user], [user, interactive], [interactive, dashboard], [dashboard, consume], [consume,  ], [ , insights], [insights, interact], [interact, data], [data, models], [models,  ], [ , buying], [buying, decisions], [decisions, .]]

>> Trigrams: 
[[came,  , user], [ , user, interactive], [user, interactive, dashboard], [interactive, dashboard, consume], [dashboard, consume,  ], [consume,  , insights], [ , insights, interact], [insights, interact, data], [interact, data, models], [data, models,  ], [models,  , buying], [ , buying, decisions], [buying, decisions, .]]

>> Noun Phrases are: 
[the user, an interactive dashboard, the  insights, the data, models, decisions]

>> Named Entities are: 
[] 


================================ Paragraph 168 =================================

Best practices to successfully   implement AI within an organization  Let’s discuss what you need to do before implementing AI.  Currently, many companies are scrambling to implement AI  within their environments because they believe it will keep  them ahead of the game—which, if thought through, is the  case. But here are a few steps you need to take. 

------------------- Sentence 1 -------------------

Best practices to successfully   implement AI within an organization   


>> Tokens are: 
[Best, practices, successfully,   , implement, AI, organization,  ] 

>> PoS Tags are: 
[('Best', 'ADJ'), ('practices', 'NOUN'), ('successfully', 'ADV'), ('  ', 'SPACE'), ('implement', 'VERB'), ('AI', 'PROPN'), ('organization', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Best', 'amod'), ('practices', 'ROOT'), ('successfully', 'advmod'), ('  ', 'npadvmod'), ('implement', 'relcl'), ('AI', 'dobj'), ('organization', 'pobj'), (' ', 'punct')]

>> Bigrams: 
[[Best, practices], [practices, successfully], [successfully,   ], [  , implement], [implement, AI], [AI, organization], [organization,  ]]

>> Trigrams: 
[[Best, practices, successfully], [practices, successfully,   ], [successfully,   , implement], [  , implement, AI], [implement, AI, organization], [AI, organization,  ]]

>> Noun Phrases are: 
[Best practices, AI, an organization]

>> Named Entities are: 
[('AI', 'ORG')] 

------------------- Sentence 2 -------------------

Let’s discuss what you need to do before implementing AI.   


>> Tokens are: 
[Let, discuss, need, implementing, AI, .,  ] 

>> PoS Tags are: 
[('Let', 'VERB'), ('discuss', 'VERB'), ('need', 'VERB'), ('implementing', 'VERB'), ('AI', 'PROPN'), ('.', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Let', 'ROOT'), ('discuss', 'ccomp'), ('need', 'ccomp'), ('implementing', 'pcomp'), ('AI', 'dobj'), ('.', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[Let, discuss], [discuss, need], [need, implementing], [implementing, AI], [AI, .], [.,  ]]

>> Trigrams: 
[[Let, discuss, need], [discuss, need, implementing], [need, implementing, AI], [implementing, AI, .], [AI, .,  ]]

>> Noun Phrases are: 
[’s, what, you, AI]

>> Named Entities are: 
[('AI', 'ORG')] 

------------------- Sentence 3 -------------------

Currently, many companies are scrambling to implement AI  within their environments because they believe it will keep  them ahead of the game—which, if thought through, is the  case. 


>> Tokens are: 
[Currently, ,, companies, scrambling, implement, AI,  , environments, believe,  , ahead, game, —, ,, thought, ,,  , case, .] 

>> PoS Tags are: 
[('Currently', 'ADV'), (',', 'PUNCT'), ('companies', 'NOUN'), ('scrambling', 'VERB'), ('implement', 'VERB'), ('AI', 'PROPN'), (' ', 'SPACE'), ('environments', 'NOUN'), ('believe', 'VERB'), (' ', 'SPACE'), ('ahead', 'ADV'), ('game', 'NOUN'), ('—', 'PUNCT'), (',', 'PUNCT'), ('thought', 'VERB'), (',', 'PUNCT'), (' ', 'SPACE'), ('case', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Currently', 'advmod'), (',', 'punct'), ('companies', 'nsubj'), ('scrambling', 'ROOT'), ('implement', 'xcomp'), ('AI', 'compound'), (' ', 'dobj'), ('environments', 'pobj'), ('believe', 'advcl'), (' ', 'dobj'), ('ahead', 'advmod'), ('game', 'pobj'), ('—', 'punct'), (',', 'punct'), ('thought', 'advcl'), (',', 'punct'), (' ', 'compound'), ('case', 'attr'), ('.', 'punct')]

>> Bigrams: 
[[Currently, ,], [,, companies], [companies, scrambling], [scrambling, implement], [implement, AI], [AI,  ], [ , environments], [environments, believe], [believe,  ], [ , ahead], [ahead, game], [game, —], [—, ,], [,, thought], [thought, ,], [,,  ], [ , case], [case, .]]

>> Trigrams: 
[[Currently, ,, companies], [,, companies, scrambling], [companies, scrambling, implement], [scrambling, implement, AI], [implement, AI,  ], [AI,  , environments], [ , environments, believe], [environments, believe,  ], [believe,  , ahead], [ , ahead, game], [ahead, game, —], [game, —, ,], [—, ,, thought], [,, thought, ,], [thought, ,,  ], [,,  , case], [ , case, .]]

>> Noun Phrases are: 
[many companies, their environments, they, it, them, the game, the  case]

>> Named Entities are: 
[('AI', 'ORG')] 

------------------- Sentence 4 -------------------

But here are a few steps you need to take. 


>> Tokens are: 
[steps, need, .] 

>> PoS Tags are: 
[('steps', 'NOUN'), ('need', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('steps', 'attr'), ('need', 'relcl'), ('.', 'punct')]

>> Bigrams: 
[[steps, need], [need, .]]

>> Trigrams: 
[[steps, need, .]]

>> Noun Phrases are: 
[a few steps, you]

>> Named Entities are: 
[] 


================================ Paragraph 169 =================================

We’ve defined three main steps to implement AI in your  company. These steps are: 

------------------- Sentence 1 -------------------

We’ve defined three main steps to implement AI in your  company. 


>> Tokens are: 
[defined, main, steps, implement, AI,  , company, .] 

>> PoS Tags are: 
[('defined', 'VERB'), ('main', 'ADJ'), ('steps', 'NOUN'), ('implement', 'VERB'), ('AI', 'PROPN'), (' ', 'SPACE'), ('company', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('defined', 'ROOT'), ('main', 'amod'), ('steps', 'dobj'), ('implement', 'relcl'), ('AI', 'dobj'), (' ', 'compound'), ('company', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[defined, main], [main, steps], [steps, implement], [implement, AI], [AI,  ], [ , company], [company, .]]

>> Trigrams: 
[[defined, main, steps], [main, steps, implement], [steps, implement, AI], [implement, AI,  ], [AI,  , company], [ , company, .]]

>> Noun Phrases are: 
[We, three main steps, AI, your  company]

>> Named Entities are: 
[('three', 'CARDINAL'), ('AI', 'ORG')] 

------------------- Sentence 2 -------------------

These steps are: 


>> Tokens are: 
[steps, :] 

>> PoS Tags are: 
[('steps', 'NOUN'), (':', 'PUNCT')] 

>> Dependency Tags are: 
[('steps', 'nsubj'), (':', 'punct')]

>> Bigrams: 
[[steps, :]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[These steps]

>> Named Entities are: 
[] 


================================ Paragraph 170 =================================

 — Develop an AI strategy and roadmap  — Establish AI capabilities and skills  — Start small and scale quickly 

------------------- Sentence 1 -------------------

 — Develop an AI strategy and roadmap  — Establish AI capabilities and skills  — Start small and scale quickly 


>> Tokens are: 
[ , —, Develop, AI, strategy, roadmap,  , —, Establish, AI, capabilities, skills,  , —, Start, small, scale, quickly] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('—', 'PUNCT'), ('Develop', 'VERB'), ('AI', 'PROPN'), ('strategy', 'NOUN'), ('roadmap', 'NOUN'), (' ', 'SPACE'), ('—', 'PUNCT'), ('Establish', 'PROPN'), ('AI', 'PROPN'), ('capabilities', 'NOUN'), ('skills', 'NOUN'), (' ', 'SPACE'), ('—', 'PUNCT'), ('Start', 'VERB'), ('small', 'ADJ'), ('scale', 'NOUN'), ('quickly', 'ADV')] 

>> Dependency Tags are: 
[(' ', 'dep'), ('—', 'punct'), ('Develop', 'ROOT'), ('AI', 'compound'), ('strategy', 'dobj'), ('roadmap', 'compound'), (' ', 'conj'), ('—', 'punct'), ('Establish', 'compound'), ('AI', 'compound'), ('capabilities', 'conj'), ('skills', 'conj'), (' ', 'dobj'), ('—', 'punct'), ('Start', 'dep'), ('small', 'acomp'), ('scale', 'conj'), ('quickly', 'advmod')]

>> Bigrams: 
[[ , —], [—, Develop], [Develop, AI], [AI, strategy], [strategy, roadmap], [roadmap,  ], [ , —], [—, Establish], [Establish, AI], [AI, capabilities], [capabilities, skills], [skills,  ], [ , —], [—, Start], [Start, small], [small, scale], [scale, quickly]]

>> Trigrams: 
[[ , —, Develop], [—, Develop, AI], [Develop, AI, strategy], [AI, strategy, roadmap], [strategy, roadmap,  ], [roadmap,  , —], [ , —, Establish], [—, Establish, AI], [Establish, AI, capabilities], [AI, capabilities, skills], [capabilities, skills,  ], [skills,  , —], [ , —, Start], [—, Start, small], [Start, small, scale], [small, scale, quickly]]

>> Noun Phrases are: 
[an AI strategy, Establish AI capabilities, skills]

>> Named Entities are: 
[('Establish AI', 'ORG')] 


================================ Paragraph 171 =================================

Develop an AI strategy and roadmap First, it’s important to understand AI and to research what  it can and can’t do for your organization. You can get more  familiar with AI by collaborating with a data scientist, because  it’s important that the C-level has a good understanding of   AI and its implementation difficulties before they define  where and how to implement. What often happens if AI  is not holistically understood the overall project won’t  provide value. 

------------------- Sentence 1 -------------------

Develop an AI strategy and roadmap First, it’s important to understand AI and to research what  it can and can’t do for your organization. 


>> Tokens are: 
[Develop, AI, strategy, roadmap, ,, important, understand, AI, research,  , organization, .] 

>> PoS Tags are: 
[('Develop', 'VERB'), ('AI', 'PROPN'), ('strategy', 'NOUN'), ('roadmap', 'NOUN'), (',', 'PUNCT'), ('important', 'ADJ'), ('understand', 'VERB'), ('AI', 'PROPN'), ('research', 'VERB'), (' ', 'SPACE'), ('organization', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Develop', 'advcl'), ('AI', 'compound'), ('strategy', 'dobj'), ('roadmap', 'conj'), (',', 'punct'), ('important', 'acomp'), ('understand', 'xcomp'), ('AI', 'dobj'), ('research', 'conj'), (' ', 'dobj'), ('organization', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Develop, AI], [AI, strategy], [strategy, roadmap], [roadmap, ,], [,, important], [important, understand], [understand, AI], [AI, research], [research,  ], [ , organization], [organization, .]]

>> Trigrams: 
[[Develop, AI, strategy], [AI, strategy, roadmap], [strategy, roadmap, ,], [roadmap, ,, important], [,, important, understand], [important, understand, AI], [understand, AI, research], [AI, research,  ], [research,  , organization], [ , organization, .]]

>> Noun Phrases are: 
[an AI strategy, roadmap, it, AI, it, your organization]

>> Named Entities are: 
[('First', 'ORDINAL'), ('AI', 'ORG')] 

------------------- Sentence 2 -------------------

You can get more  familiar with AI by collaborating with a data scientist, because  it’s important that the C-level has a good understanding of   AI and its implementation difficulties before they define  where and how to implement. 


>> Tokens are: 
[ , familiar, AI, collaborating, data, scientist, ,,  , important, C, -, level, good, understanding,   , AI, implementation, difficulties, define,  , implement, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('familiar', 'ADJ'), ('AI', 'PROPN'), ('collaborating', 'VERB'), ('data', 'NOUN'), ('scientist', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('important', 'ADJ'), ('C', 'PROPN'), ('-', 'PUNCT'), ('level', 'NOUN'), ('good', 'ADJ'), ('understanding', 'NOUN'), ('  ', 'SPACE'), ('AI', 'PROPN'), ('implementation', 'NOUN'), ('difficulties', 'NOUN'), ('define', 'VERB'), (' ', 'SPACE'), ('implement', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'dobj'), ('familiar', 'amod'), ('AI', 'pobj'), ('collaborating', 'pcomp'), ('data', 'compound'), ('scientist', 'pobj'), (',', 'punct'), (' ', 'pobj'), ('important', 'acomp'), ('C', 'compound'), ('-', 'punct'), ('level', 'nsubj'), ('good', 'amod'), ('understanding', 'dobj'), ('  ', 'compound'), ('AI', 'pobj'), ('implementation', 'compound'), ('difficulties', 'conj'), ('define', 'advcl'), (' ', 'dobj'), ('implement', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[ , familiar], [familiar, AI], [AI, collaborating], [collaborating, data], [data, scientist], [scientist, ,], [,,  ], [ , important], [important, C], [C, -], [-, level], [level, good], [good, understanding], [understanding,   ], [  , AI], [AI, implementation], [implementation, difficulties], [difficulties, define], [define,  ], [ , implement], [implement, .]]

>> Trigrams: 
[[ , familiar, AI], [familiar, AI, collaborating], [AI, collaborating, data], [collaborating, data, scientist], [data, scientist, ,], [scientist, ,,  ], [,,  , important], [ , important, C], [important, C, -], [C, -, level], [-, level, good], [level, good, understanding], [good, understanding,   ], [understanding,   , AI], [  , AI, implementation], [AI, implementation, difficulties], [implementation, difficulties, define], [difficulties, define,  ], [define,  , implement], [ , implement, .]]

>> Noun Phrases are: 
[You, AI, a data scientist, it, the C-level, a good understanding,   AI, its implementation difficulties, they]

>> Named Entities are: 
[('AI', 'ORG'), ('AI', 'ORG')] 

------------------- Sentence 3 -------------------

What often happens if AI  is not holistically understood the overall project won’t  provide value. 


>> Tokens are: 
[happens, AI,  , holistically, understood, overall, project, wo,  , provide, value, .] 

>> PoS Tags are: 
[('happens', 'VERB'), ('AI', 'PROPN'), (' ', 'SPACE'), ('holistically', 'ADV'), ('understood', 'VERB'), ('overall', 'ADJ'), ('project', 'NOUN'), ('wo', 'AUX'), (' ', 'SPACE'), ('provide', 'VERB'), ('value', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('happens', 'ROOT'), ('AI', 'nsubjpass'), (' ', 'nummod'), ('holistically', 'advmod'), ('understood', 'advcl'), ('overall', 'amod'), ('project', 'nsubj'), ('wo', 'aux'), (' ', 'nsubj'), ('provide', 'ccomp'), ('value', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[happens, AI], [AI,  ], [ , holistically], [holistically, understood], [understood, overall], [overall, project], [project, wo], [wo,  ], [ , provide], [provide, value], [value, .]]

>> Trigrams: 
[[happens, AI,  ], [AI,  , holistically], [ , holistically, understood], [holistically, understood, overall], [understood, overall, project], [overall, project, wo], [project, wo,  ], [wo,  , provide], [ , provide, value], [provide, value, .]]

>> Noun Phrases are: 
[What, AI, the overall project, value]

>> Named Entities are: 
[] 


================================ Paragraph 172 =================================

Once AI is understood, the next question you should ask  yourself is: “What specific problem do I want to solve, or what  opportunity do I want to take?” Is your company looking to  drive efficiency in the back office, differentiate its digital  proposition, generate new revenue streams by leveraging  customers’ insights or even reinvent its entire business? 

------------------- Sentence 1 -------------------

Once AI is understood, the next question you should ask  yourself is: “What specific problem do I want to solve, or what  opportunity do I want to take?” 


>> Tokens are: 
[AI, understood, ,, question, ask,  , :, “, specific, problem, want, solve, ,,  , opportunity, want, ?, ”] 

>> PoS Tags are: 
[('AI', 'PROPN'), ('understood', 'VERB'), (',', 'PUNCT'), ('question', 'NOUN'), ('ask', 'VERB'), (' ', 'SPACE'), (':', 'PUNCT'), ('“', 'PUNCT'), ('specific', 'ADJ'), ('problem', 'NOUN'), ('want', 'VERB'), ('solve', 'VERB'), (',', 'PUNCT'), (' ', 'SPACE'), ('opportunity', 'NOUN'), ('want', 'VERB'), ('?', 'PUNCT'), ('”', 'PUNCT')] 

>> Dependency Tags are: 
[('AI', 'nsubjpass'), ('understood', 'advcl'), (',', 'punct'), ('question', 'nsubj'), ('ask', 'relcl'), (' ', 'dobj'), (':', 'punct'), ('“', 'punct'), ('specific', 'amod'), ('problem', 'dobj'), ('want', 'ccomp'), ('solve', 'xcomp'), (',', 'punct'), (' ', 'nmod'), ('opportunity', 'dobj'), ('want', 'conj'), ('?', 'punct'), ('”', 'punct')]

>> Bigrams: 
[[AI, understood], [understood, ,], [,, question], [question, ask], [ask,  ], [ , :], [:, “], [“, specific], [specific, problem], [problem, want], [want, solve], [solve, ,], [,,  ], [ , opportunity], [opportunity, want], [want, ?], [?, ”]]

>> Trigrams: 
[[AI, understood, ,], [understood, ,, question], [,, question, ask], [question, ask,  ], [ask,  , :], [ , :, “], [:, “, specific], [“, specific, problem], [specific, problem, want], [problem, want, solve], [want, solve, ,], [solve, ,,  ], [,,  , opportunity], [ , opportunity, want], [opportunity, want, ?], [want, ?, ”]]

>> Noun Phrases are: 
[AI, the next question, you, What specific problem, I, what  opportunity, I]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Is your company looking to  drive efficiency in the back office, differentiate its digital  proposition, generate new revenue streams by leveraging  customers’ insights or even reinvent its entire business? 


>> Tokens are: 
[company, looking,  , drive, efficiency, office, ,, differentiate, digital,  , proposition, ,, generate, new, revenue, streams, leveraging,  , customers, ’, insights, reinvent, entire, business, ?] 

>> PoS Tags are: 
[('company', 'NOUN'), ('looking', 'VERB'), (' ', 'SPACE'), ('drive', 'VERB'), ('efficiency', 'NOUN'), ('office', 'NOUN'), (',', 'PUNCT'), ('differentiate', 'VERB'), ('digital', 'ADJ'), (' ', 'SPACE'), ('proposition', 'NOUN'), (',', 'PUNCT'), ('generate', 'VERB'), ('new', 'ADJ'), ('revenue', 'NOUN'), ('streams', 'NOUN'), ('leveraging', 'VERB'), (' ', 'SPACE'), ('customers', 'NOUN'), ('’', 'PART'), ('insights', 'NOUN'), ('reinvent', 'VERB'), ('entire', 'ADJ'), ('business', 'NOUN'), ('?', 'PUNCT')] 

>> Dependency Tags are: 
[('company', 'nsubj'), ('looking', 'advcl'), (' ', 'pobj'), ('drive', 'conj'), ('efficiency', 'dobj'), ('office', 'pobj'), (',', 'punct'), ('differentiate', 'ROOT'), ('digital', 'amod'), (' ', 'compound'), ('proposition', 'dobj'), (',', 'punct'), ('generate', 'conj'), ('new', 'amod'), ('revenue', 'compound'), ('streams', 'dobj'), ('leveraging', 'pcomp'), (' ', 'nmod'), ('customers', 'poss'), ('’', 'case'), ('insights', 'dobj'), ('reinvent', 'conj'), ('entire', 'amod'), ('business', 'dobj'), ('?', 'punct')]

>> Bigrams: 
[[company, looking], [looking,  ], [ , drive], [drive, efficiency], [efficiency, office], [office, ,], [,, differentiate], [differentiate, digital], [digital,  ], [ , proposition], [proposition, ,], [,, generate], [generate, new], [new, revenue], [revenue, streams], [streams, leveraging], [leveraging,  ], [ , customers], [customers, ’], [’, insights], [insights, reinvent], [reinvent, entire], [entire, business], [business, ?]]

>> Trigrams: 
[[company, looking,  ], [looking,  , drive], [ , drive, efficiency], [drive, efficiency, office], [efficiency, office, ,], [office, ,, differentiate], [,, differentiate, digital], [differentiate, digital,  ], [digital,  , proposition], [ , proposition, ,], [proposition, ,, generate], [,, generate, new], [generate, new, revenue], [new, revenue, streams], [revenue, streams, leveraging], [streams, leveraging,  ], [leveraging,  , customers], [ , customers, ’], [customers, ’, insights], [’, insights, reinvent], [insights, reinvent, entire], [reinvent, entire, business], [entire, business, ?]]

>> Noun Phrases are: 
[your company, efficiency, the back office, its digital  proposition, new revenue streams,  customers’ insights, its entire business]

>> Named Entities are: 
[] 


================================ Paragraph 173 =================================

10     Beyond the hype: A guide to understanding and successfully implementing artificial intelligence within your business 

------------------- Sentence 1 -------------------

10     Beyond the hype: A guide to understanding and successfully implementing artificial intelligence within your business 


>> Tokens are: 
[10,     , hype, :, guide, understanding, successfully, implementing, artificial, intelligence, business] 

>> PoS Tags are: 
[('10', 'NUM'), ('    ', 'SPACE'), ('hype', 'NOUN'), (':', 'PUNCT'), ('guide', 'NOUN'), ('understanding', 'NOUN'), ('successfully', 'ADV'), ('implementing', 'VERB'), ('artificial', 'ADJ'), ('intelligence', 'NOUN'), ('business', 'NOUN')] 

>> Dependency Tags are: 
[('10', 'nummod'), ('    ', 'ROOT'), ('hype', 'pobj'), (':', 'punct'), ('guide', 'appos'), ('understanding', 'pobj'), ('successfully', 'advmod'), ('implementing', 'acl'), ('artificial', 'amod'), ('intelligence', 'dobj'), ('business', 'pobj')]

>> Bigrams: 
[[10,     ], [    , hype], [hype, :], [:, guide], [guide, understanding], [understanding, successfully], [successfully, implementing], [implementing, artificial], [artificial, intelligence], [intelligence, business]]

>> Trigrams: 
[[10,     , hype], [    , hype, :], [hype, :, guide], [:, guide, understanding], [guide, understanding, successfully], [understanding, successfully, implementing], [successfully, implementing, artificial], [implementing, artificial, intelligence], [artificial, intelligence, business]]

>> Noun Phrases are: 
[the hype, A guide, understanding, artificial intelligence, your business]

>> Named Entities are: 
[] 


================================ Paragraph 174 =================================

After having thought this through, you’ll probably have  many different use cases. At this point, it’s critical to  prioritize these cases into a transformation roadmap that  covers both a long-term vision as well as concrete feasible  quick wins. Next, you should think about what data you  have available. To solve most of the problems with AI you  need to have relevant data. Without data, AI will not provide  any value. For many companies it’s a task in and of itself  to keep track of the type of data—as well as where it’s  stored and in what way. Often the first step will be to  understand the data you currently have and the type you  need to implement your AI case. 

------------------- Sentence 1 -------------------

After having thought this through, you’ll probably have  many different use cases. 


>> Tokens are: 
[having, thought, ,, probably,  , different, use, cases, .] 

>> PoS Tags are: 
[('having', 'AUX'), ('thought', 'VERB'), (',', 'PUNCT'), ('probably', 'ADV'), (' ', 'SPACE'), ('different', 'ADJ'), ('use', 'NOUN'), ('cases', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('having', 'aux'), ('thought', 'pcomp'), (',', 'punct'), ('probably', 'advmod'), (' ', 'dobj'), ('different', 'amod'), ('use', 'compound'), ('cases', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[having, thought], [thought, ,], [,, probably], [probably,  ], [ , different], [different, use], [use, cases], [cases, .]]

>> Trigrams: 
[[having, thought, ,], [thought, ,, probably], [,, probably,  ], [probably,  , different], [ , different, use], [different, use, cases], [use, cases, .]]

>> Noun Phrases are: 
[you, many different use cases]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

At this point, it’s critical to  prioritize these cases into a transformation roadmap that  covers both a long-term vision as well as concrete feasible  quick wins. 


>> Tokens are: 
[point, ,, critical,  , prioritize, cases, transformation, roadmap,  , covers, long, -, term, vision, concrete, feasible,  , quick, wins, .] 

>> PoS Tags are: 
[('point', 'NOUN'), (',', 'PUNCT'), ('critical', 'ADJ'), (' ', 'SPACE'), ('prioritize', 'VERB'), ('cases', 'NOUN'), ('transformation', 'NOUN'), ('roadmap', 'NOUN'), (' ', 'SPACE'), ('covers', 'VERB'), ('long', 'ADJ'), ('-', 'PUNCT'), ('term', 'NOUN'), ('vision', 'NOUN'), ('concrete', 'ADJ'), ('feasible', 'ADJ'), (' ', 'SPACE'), ('quick', 'ADJ'), ('wins', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('point', 'pobj'), (',', 'punct'), ('critical', 'acomp'), (' ', 'pobj'), ('prioritize', 'xcomp'), ('cases', 'dobj'), ('transformation', 'compound'), ('roadmap', 'pobj'), (' ', 'nsubj'), ('covers', 'relcl'), ('long', 'amod'), ('-', 'punct'), ('term', 'compound'), ('vision', 'dobj'), ('concrete', 'amod'), ('feasible', 'amod'), (' ', 'nmod'), ('quick', 'amod'), ('wins', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[point, ,], [,, critical], [critical,  ], [ , prioritize], [prioritize, cases], [cases, transformation], [transformation, roadmap], [roadmap,  ], [ , covers], [covers, long], [long, -], [-, term], [term, vision], [vision, concrete], [concrete, feasible], [feasible,  ], [ , quick], [quick, wins], [wins, .]]

>> Trigrams: 
[[point, ,, critical], [,, critical,  ], [critical,  , prioritize], [ , prioritize, cases], [prioritize, cases, transformation], [cases, transformation, roadmap], [transformation, roadmap,  ], [roadmap,  , covers], [ , covers, long], [covers, long, -], [long, -, term], [-, term, vision], [term, vision, concrete], [vision, concrete, feasible], [concrete, feasible,  ], [feasible,  , quick], [ , quick, wins], [quick, wins, .]]

>> Noun Phrases are: 
[this point, it, these cases, a transformation roadmap, both a long-term vision, concrete feasible  quick wins]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

Next, you should think about what data you  have available. 


>> Tokens are: 
[,, think, data,  , available, .] 

>> PoS Tags are: 
[(',', 'PUNCT'), ('think', 'VERB'), ('data', 'NOUN'), (' ', 'SPACE'), ('available', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(',', 'punct'), ('think', 'ROOT'), ('data', 'dobj'), (' ', 'appos'), ('available', 'acomp'), ('.', 'punct')]

>> Bigrams: 
[[,, think], [think, data], [data,  ], [ , available], [available, .]]

>> Trigrams: 
[[,, think, data], [think, data,  ], [data,  , available], [ , available, .]]

>> Noun Phrases are: 
[you, what data, you]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

To solve most of the problems with AI you  need to have relevant data. 


>> Tokens are: 
[solve, problems, AI,  , need, relevant, data, .] 

>> PoS Tags are: 
[('solve', 'VERB'), ('problems', 'NOUN'), ('AI', 'PROPN'), (' ', 'SPACE'), ('need', 'VERB'), ('relevant', 'ADJ'), ('data', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('solve', 'advcl'), ('problems', 'pobj'), ('AI', 'pobj'), (' ', 'appos'), ('need', 'ROOT'), ('relevant', 'amod'), ('data', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[solve, problems], [problems, AI], [AI,  ], [ , need], [need, relevant], [relevant, data], [data, .]]

>> Trigrams: 
[[solve, problems, AI], [problems, AI,  ], [AI,  , need], [ , need, relevant], [need, relevant, data], [relevant, data, .]]

>> Noun Phrases are: 
[the problems, AI, you, relevant data]

>> Named Entities are: 
[('AI', 'ORG')] 

------------------- Sentence 5 -------------------

Without data, AI will not provide  any value. 


>> Tokens are: 
[data, ,, AI, provide,  , value, .] 

>> PoS Tags are: 
[('data', 'NOUN'), (',', 'PUNCT'), ('AI', 'PROPN'), ('provide', 'VERB'), (' ', 'SPACE'), ('value', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('data', 'pobj'), (',', 'punct'), ('AI', 'nsubj'), ('provide', 'ROOT'), (' ', 'dative'), ('value', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[data, ,], [,, AI], [AI, provide], [provide,  ], [ , value], [value, .]]

>> Trigrams: 
[[data, ,, AI], [,, AI, provide], [AI, provide,  ], [provide,  , value], [ , value, .]]

>> Noun Phrases are: 
[data, AI, any value]

>> Named Entities are: 
[('AI', 'ORG')] 

------------------- Sentence 6 -------------------

For many companies it’s a task in and of itself  to keep track of the type of data—as well as where it’s  stored and in what way. 


>> Tokens are: 
[companies, task,  , track, type, data, —,  , stored, way, .] 

>> PoS Tags are: 
[('companies', 'NOUN'), ('task', 'NOUN'), (' ', 'SPACE'), ('track', 'NOUN'), ('type', 'NOUN'), ('data', 'NOUN'), ('—', 'PUNCT'), (' ', 'SPACE'), ('stored', 'VERB'), ('way', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('companies', 'pobj'), ('task', 'attr'), (' ', 'conj'), ('track', 'dobj'), ('type', 'pobj'), ('data', 'pobj'), ('—', 'punct'), (' ', 'npadvmod'), ('stored', 'relcl'), ('way', 'pcomp'), ('.', 'punct')]

>> Bigrams: 
[[companies, task], [task,  ], [ , track], [track, type], [type, data], [data, —], [—,  ], [ , stored], [stored, way], [way, .]]

>> Trigrams: 
[[companies, task,  ], [task,  , track], [ , track, type], [track, type, data], [type, data, —], [data, —,  ], [—,  , stored], [ , stored, way], [stored, way, .]]

>> Noun Phrases are: 
[many companies, it, a task, itself, track, the type, data, it, what way]

>> Named Entities are: 
[] 

------------------- Sentence 7 -------------------

Often the first step will be to  understand the data you currently have and the type you  need to implement your AI case. 


>> Tokens are: 
[step,  , understand, data, currently, type,  , need, implement, AI, case, .] 

>> PoS Tags are: 
[('step', 'NOUN'), (' ', 'SPACE'), ('understand', 'VERB'), ('data', 'NOUN'), ('currently', 'ADV'), ('type', 'NOUN'), (' ', 'SPACE'), ('need', 'VERB'), ('implement', 'VERB'), ('AI', 'PROPN'), ('case', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('step', 'nsubj'), (' ', 'pobj'), ('understand', 'advcl'), ('data', 'dobj'), ('currently', 'advmod'), ('type', 'conj'), (' ', 'appos'), ('need', 'relcl'), ('implement', 'xcomp'), ('AI', 'compound'), ('case', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[step,  ], [ , understand], [understand, data], [data, currently], [currently, type], [type,  ], [ , need], [need, implement], [implement, AI], [AI, case], [case, .]]

>> Trigrams: 
[[step,  , understand], [ , understand, data], [understand, data, currently], [data, currently, type], [currently, type,  ], [type,  , need], [ , need, implement], [need, implement, AI], [implement, AI, case], [AI, case, .]]

>> Noun Phrases are: 
[the first step, the data, you, the type, you, your AI case]

>> Named Entities are: 
[('first', 'ORDINAL'), ('AI', 'ORG')] 


================================ Paragraph 175 =================================

Establish AI capabilities and skills AI requires a completely new set of capabilities and skills  which may be in short supply in your organization. To build  the required in-house AI skills, it’s important to plan,  establish and grow a dedicated Center of Competence or  leverage the IBM Garage concept to perform in partnership.  Not only this dedicated team is important, but you also  need to assure the right mindset and way of working in the  rest of the organization. It’s critical that these functions  occur in conjunction with developing and integrating an AI  platform within your current IT architecture to implement  and scale AI. 

------------------- Sentence 1 -------------------

Establish AI capabilities and skills AI requires a completely new set of capabilities and skills  which may be in short supply in your organization. 


>> Tokens are: 
[Establish, AI, capabilities, skills, AI, requires, completely, new, set, capabilities, skills,  , short, supply, organization, .] 

>> PoS Tags are: 
[('Establish', 'PROPN'), ('AI', 'PROPN'), ('capabilities', 'NOUN'), ('skills', 'NOUN'), ('AI', 'PROPN'), ('requires', 'VERB'), ('completely', 'ADV'), ('new', 'ADJ'), ('set', 'NOUN'), ('capabilities', 'NOUN'), ('skills', 'NOUN'), (' ', 'SPACE'), ('short', 'ADJ'), ('supply', 'NOUN'), ('organization', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Establish', 'compound'), ('AI', 'compound'), ('capabilities', 'nsubj'), ('skills', 'conj'), ('AI', 'appos'), ('requires', 'ROOT'), ('completely', 'advmod'), ('new', 'amod'), ('set', 'dobj'), ('capabilities', 'pobj'), ('skills', 'conj'), (' ', 'conj'), ('short', 'amod'), ('supply', 'pobj'), ('organization', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Establish, AI], [AI, capabilities], [capabilities, skills], [skills, AI], [AI, requires], [requires, completely], [completely, new], [new, set], [set, capabilities], [capabilities, skills], [skills,  ], [ , short], [short, supply], [supply, organization], [organization, .]]

>> Trigrams: 
[[Establish, AI, capabilities], [AI, capabilities, skills], [capabilities, skills, AI], [skills, AI, requires], [AI, requires, completely], [requires, completely, new], [completely, new, set], [new, set, capabilities], [set, capabilities, skills], [capabilities, skills,  ], [skills,  , short], [ , short, supply], [short, supply, organization], [supply, organization, .]]

>> Noun Phrases are: 
[Establish AI capabilities, skills, AI, a completely new set, capabilities, skills, short supply, your organization]

>> Named Entities are: 
[('Establish AI', 'ORG'), ('AI', 'ORG')] 

------------------- Sentence 2 -------------------

To build  the required in-house AI skills, it’s important to plan,  establish and grow a dedicated Center of Competence or  leverage the IBM Garage concept to perform in partnership. 


>> Tokens are: 
[build,  , required, -, house, AI, skills, ,, important, plan, ,,  , establish, grow, dedicated, Center, Competence,  , leverage, IBM, Garage, concept, perform, partnership, .] 

>> PoS Tags are: 
[('build', 'VERB'), (' ', 'SPACE'), ('required', 'VERB'), ('-', 'PUNCT'), ('house', 'NOUN'), ('AI', 'PROPN'), ('skills', 'NOUN'), (',', 'PUNCT'), ('important', 'ADJ'), ('plan', 'VERB'), (',', 'PUNCT'), (' ', 'SPACE'), ('establish', 'VERB'), ('grow', 'VERB'), ('dedicated', 'ADJ'), ('Center', 'PROPN'), ('Competence', 'PROPN'), (' ', 'SPACE'), ('leverage', 'VERB'), ('IBM', 'PROPN'), ('Garage', 'PROPN'), ('concept', 'NOUN'), ('perform', 'VERB'), ('partnership', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('build', 'advcl'), (' ', 'dobj'), ('required', 'amod'), ('-', 'punct'), ('house', 'pobj'), ('AI', 'compound'), ('skills', 'dobj'), (',', 'punct'), ('important', 'acomp'), ('plan', 'xcomp'), (',', 'punct'), (' ', 'nsubj'), ('establish', 'conj'), ('grow', 'conj'), ('dedicated', 'amod'), ('Center', 'dobj'), ('Competence', 'pobj'), (' ', 'conj'), ('leverage', 'dep'), ('IBM', 'compound'), ('Garage', 'compound'), ('concept', 'dobj'), ('perform', 'advcl'), ('partnership', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[build,  ], [ , required], [required, -], [-, house], [house, AI], [AI, skills], [skills, ,], [,, important], [important, plan], [plan, ,], [,,  ], [ , establish], [establish, grow], [grow, dedicated], [dedicated, Center], [Center, Competence], [Competence,  ], [ , leverage], [leverage, IBM], [IBM, Garage], [Garage, concept], [concept, perform], [perform, partnership], [partnership, .]]

>> Trigrams: 
[[build,  , required], [ , required, -], [required, -, house], [-, house, AI], [house, AI, skills], [AI, skills, ,], [skills, ,, important], [,, important, plan], [important, plan, ,], [plan, ,,  ], [,,  , establish], [ , establish, grow], [establish, grow, dedicated], [grow, dedicated, Center], [dedicated, Center, Competence], [Center, Competence,  ], [Competence,  , leverage], [ , leverage, IBM], [leverage, IBM, Garage], [IBM, Garage, concept], [Garage, concept, perform], [concept, perform, partnership], [perform, partnership, .]]

>> Noun Phrases are: 
[house, it, a dedicated Center, Competence, the IBM Garage concept, partnership]

>> Named Entities are: 
[('AI', 'ORG'), ('Center of Competence', 'ORG'), ('IBM', 'ORG')] 

------------------- Sentence 3 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

Not only this dedicated team is important, but you also  need to assure the right mindset and way of working in the  rest of the organization. 


>> Tokens are: 
[dedicated, team, important, ,,  , need, assure, right, mindset, way, working,  , rest, organization, .] 

>> PoS Tags are: 
[('dedicated', 'ADJ'), ('team', 'NOUN'), ('important', 'ADJ'), (',', 'PUNCT'), (' ', 'SPACE'), ('need', 'VERB'), ('assure', 'VERB'), ('right', 'ADJ'), ('mindset', 'NOUN'), ('way', 'NOUN'), ('working', 'VERB'), (' ', 'SPACE'), ('rest', 'NOUN'), ('organization', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('dedicated', 'amod'), ('team', 'nsubj'), ('important', 'acomp'), (',', 'punct'), (' ', 'nsubj'), ('need', 'conj'), ('assure', 'xcomp'), ('right', 'amod'), ('mindset', 'dobj'), ('way', 'conj'), ('working', 'pcomp'), (' ', 'compound'), ('rest', 'pobj'), ('organization', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[dedicated, team], [team, important], [important, ,], [,,  ], [ , need], [need, assure], [assure, right], [right, mindset], [mindset, way], [way, working], [working,  ], [ , rest], [rest, organization], [organization, .]]

>> Trigrams: 
[[dedicated, team, important], [team, important, ,], [important, ,,  ], [,,  , need], [ , need, assure], [need, assure, right], [assure, right, mindset], [right, mindset, way], [mindset, way, working], [way, working,  ], [working,  , rest], [ , rest, organization], [rest, organization, .]]

>> Noun Phrases are: 
[Not only this dedicated team, you, the right mindset, way, the  rest, the organization]

>> Named Entities are: 
[] 

------------------- Sentence 5 -------------------

It’s critical that these functions  occur in conjunction with developing and integrating an AI  platform within your current IT architecture to implement  and scale AI. 


>> Tokens are: 
[critical, functions,  , occur, conjunction, developing, integrating, AI,  , platform, current, architecture, implement,  , scale, AI, .] 

>> PoS Tags are: 
[('critical', 'ADJ'), ('functions', 'NOUN'), (' ', 'SPACE'), ('occur', 'VERB'), ('conjunction', 'NOUN'), ('developing', 'VERB'), ('integrating', 'VERB'), ('AI', 'PROPN'), (' ', 'SPACE'), ('platform', 'NOUN'), ('current', 'ADJ'), ('architecture', 'NOUN'), ('implement', 'VERB'), (' ', 'SPACE'), ('scale', 'NOUN'), ('AI', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('critical', 'acomp'), ('functions', 'nsubj'), (' ', 'nsubj'), ('occur', 'ccomp'), ('conjunction', 'pobj'), ('developing', 'pcomp'), ('integrating', 'conj'), ('AI', 'nmod'), (' ', 'compound'), ('platform', 'dobj'), ('current', 'amod'), ('architecture', 'pobj'), ('implement', 'advcl'), (' ', 'dobj'), ('scale', 'conj'), ('AI', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[critical, functions], [functions,  ], [ , occur], [occur, conjunction], [conjunction, developing], [developing, integrating], [integrating, AI], [AI,  ], [ , platform], [platform, current], [current, architecture], [architecture, implement], [implement,  ], [ , scale], [scale, AI], [AI, .]]

>> Trigrams: 
[[critical, functions,  ], [functions,  , occur], [ , occur, conjunction], [occur, conjunction, developing], [conjunction, developing, integrating], [developing, integrating, AI], [integrating, AI,  ], [AI,  , platform], [ , platform, current], [platform, current, architecture], [current, architecture, implement], [architecture, implement,  ], [implement,  , scale], [ , scale, AI], [scale, AI, .]]

>> Noun Phrases are: 
[It, these functions, conjunction, an AI  platform, your current IT architecture, AI]

>> Named Entities are: 
[('AI', 'ORG'), ('AI', 'ORG')] 


================================ Paragraph 176 =================================

Start small and scale quickly  — Start with minimal valuable products (MVPs)   In this phase you want to bring in experts to help quickly  develop solutions to your business problems. This can  only be done once the before-mentioned steps are  completed and the business is ready organizationally  and technologically. This also means that the experts  you bring in should be both business and technologically  savvy. A good duration for a MVP is normally between two  and three months. Our experience shows that starting  with large-scale, complex and very long AI implementation  projects normally lead to failure.  

------------------- Sentence 1 -------------------

Start small and scale quickly  — Start with minimal valuable products (MVPs)    


>> Tokens are: 
[Start, small, scale, quickly,  , —, Start, minimal, valuable, products, (, MVPs, ),   ] 

>> PoS Tags are: 
[('Start', 'VERB'), ('small', 'ADJ'), ('scale', 'NOUN'), ('quickly', 'ADV'), (' ', 'SPACE'), ('—', 'PUNCT'), ('Start', 'VERB'), ('minimal', 'ADJ'), ('valuable', 'ADJ'), ('products', 'NOUN'), ('(', 'PUNCT'), ('MVPs', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE')] 

>> Dependency Tags are: 
[('Start', 'ROOT'), ('small', 'acomp'), ('scale', 'conj'), ('quickly', 'advmod'), (' ', 'dobj'), ('—', 'punct'), ('Start', 'dep'), ('minimal', 'amod'), ('valuable', 'amod'), ('products', 'pobj'), ('(', 'punct'), ('MVPs', 'appos'), (')', 'punct'), ('  ', 'punct')]

>> Bigrams: 
[[Start, small], [small, scale], [scale, quickly], [quickly,  ], [ , —], [—, Start], [Start, minimal], [minimal, valuable], [valuable, products], [products, (], [(, MVPs], [MVPs, )], [),   ]]

>> Trigrams: 
[[Start, small, scale], [small, scale, quickly], [scale, quickly,  ], [quickly,  , —], [ , —, Start], [—, Start, minimal], [Start, minimal, valuable], [minimal, valuable, products], [valuable, products, (], [products, (, MVPs], [(, MVPs, )], [MVPs, ),   ]]

>> Noun Phrases are: 
[scale, minimal valuable products, MVPs]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

In this phase you want to bring in experts to help quickly  develop solutions to your business problems. 


>> Tokens are: 
[phase, want, bring, experts, help, quickly,  , develop, solutions, business, problems, .] 

>> PoS Tags are: 
[('phase', 'NOUN'), ('want', 'VERB'), ('bring', 'VERB'), ('experts', 'NOUN'), ('help', 'VERB'), ('quickly', 'ADV'), (' ', 'SPACE'), ('develop', 'VERB'), ('solutions', 'NOUN'), ('business', 'NOUN'), ('problems', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('phase', 'pobj'), ('want', 'ROOT'), ('bring', 'xcomp'), ('experts', 'dobj'), ('help', 'advcl'), ('quickly', 'advmod'), (' ', 'nsubj'), ('develop', 'advcl'), ('solutions', 'dobj'), ('business', 'compound'), ('problems', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[phase, want], [want, bring], [bring, experts], [experts, help], [help, quickly], [quickly,  ], [ , develop], [develop, solutions], [solutions, business], [business, problems], [problems, .]]

>> Trigrams: 
[[phase, want, bring], [want, bring, experts], [bring, experts, help], [experts, help, quickly], [help, quickly,  ], [quickly,  , develop], [ , develop, solutions], [develop, solutions, business], [solutions, business, problems], [business, problems, .]]

>> Noun Phrases are: 
[this phase, you, experts, solutions, your business problems]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

This can  only be done once the before-mentioned steps are  completed and the business is ready organizationally  and technologically. 


>> Tokens are: 
[ , -, mentioned, steps,  , completed, business, ready, organizationally,  , technologically, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('-', 'PUNCT'), ('mentioned', 'VERB'), ('steps', 'NOUN'), (' ', 'SPACE'), ('completed', 'VERB'), ('business', 'NOUN'), ('ready', 'ADJ'), ('organizationally', 'ADV'), (' ', 'SPACE'), ('technologically', 'ADV'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'nsubjpass'), ('-', 'punct'), ('mentioned', 'amod'), ('steps', 'nsubjpass'), (' ', 'nsubjpass'), ('completed', 'advcl'), ('business', 'nsubj'), ('ready', 'acomp'), ('organizationally', 'advmod'), (' ', 'attr'), ('technologically', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[ , -], [-, mentioned], [mentioned, steps], [steps,  ], [ , completed], [completed, business], [business, ready], [ready, organizationally], [organizationally,  ], [ , technologically], [technologically, .]]

>> Trigrams: 
[[ , -, mentioned], [-, mentioned, steps], [mentioned, steps,  ], [steps,  , completed], [ , completed, business], [completed, business, ready], [business, ready, organizationally], [ready, organizationally,  ], [organizationally,  , technologically], [ , technologically, .]]

>> Noun Phrases are: 
[the before-mentioned steps, the business]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

This also means that the experts  you bring in should be both business and technologically  savvy. 


>> Tokens are: 
[means, experts,  , bring, business, technologically,  , savvy, .] 

>> PoS Tags are: 
[('means', 'VERB'), ('experts', 'NOUN'), (' ', 'SPACE'), ('bring', 'VERB'), ('business', 'NOUN'), ('technologically', 'ADV'), (' ', 'SPACE'), ('savvy', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('means', 'ROOT'), ('experts', 'nsubj'), (' ', 'appos'), ('bring', 'relcl'), ('business', 'attr'), ('technologically', 'advmod'), (' ', 'conj'), ('savvy', 'acomp'), ('.', 'punct')]

>> Bigrams: 
[[means, experts], [experts,  ], [ , bring], [bring, business], [business, technologically], [technologically,  ], [ , savvy], [savvy, .]]

>> Trigrams: 
[[means, experts,  ], [experts,  , bring], [ , bring, business], [bring, business, technologically], [business, technologically,  ], [technologically,  , savvy], [ , savvy, .]]

>> Noun Phrases are: 
[the experts, you, both business]

>> Named Entities are: 
[] 

------------------- Sentence 5 -------------------

A good duration for a MVP is normally between two  and three months. 


>> Tokens are: 
[good, duration, MVP, normally,  , months, .] 

>> PoS Tags are: 
[('good', 'ADJ'), ('duration', 'NOUN'), ('MVP', 'PROPN'), ('normally', 'ADV'), (' ', 'SPACE'), ('months', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('good', 'amod'), ('duration', 'nsubj'), ('MVP', 'pobj'), ('normally', 'advmod'), (' ', 'pobj'), ('months', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[good, duration], [duration, MVP], [MVP, normally], [normally,  ], [ , months], [months, .]]

>> Trigrams: 
[[good, duration, MVP], [duration, MVP, normally], [MVP, normally,  ], [normally,  , months], [ , months, .]]

>> Noun Phrases are: 
[A good duration, a MVP, three months]

>> Named Entities are: 
[('MVP', 'ORG'), ('between two  and three months', 'CARDINAL')] 

------------------- Sentence 6 -------------------

Our experience shows that starting  with large-scale, complex and very long AI implementation  projects normally lead to failure. 


>> Tokens are: 
[experience, shows, starting,  , large, -, scale, ,, complex, long, AI, implementation,  , projects, normally, lead, failure, .] 

>> PoS Tags are: 
[('experience', 'NOUN'), ('shows', 'VERB'), ('starting', 'VERB'), (' ', 'SPACE'), ('large', 'ADJ'), ('-', 'PUNCT'), ('scale', 'NOUN'), (',', 'PUNCT'), ('complex', 'ADJ'), ('long', 'ADJ'), ('AI', 'PROPN'), ('implementation', 'NOUN'), (' ', 'SPACE'), ('projects', 'NOUN'), ('normally', 'ADV'), ('lead', 'VERB'), ('failure', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('experience', 'nsubj'), ('shows', 'ROOT'), ('starting', 'csubj'), (' ', 'dobj'), ('large', 'amod'), ('-', 'punct'), ('scale', 'nmod'), (',', 'punct'), ('complex', 'conj'), ('long', 'conj'), ('AI', 'compound'), ('implementation', 'nmod'), (' ', 'compound'), ('projects', 'nsubj'), ('normally', 'advmod'), ('lead', 'ccomp'), ('failure', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[experience, shows], [shows, starting], [starting,  ], [ , large], [large, -], [-, scale], [scale, ,], [,, complex], [complex, long], [long, AI], [AI, implementation], [implementation,  ], [ , projects], [projects, normally], [normally, lead], [lead, failure], [failure, .]]

>> Trigrams: 
[[experience, shows, starting], [shows, starting,  ], [starting,  , large], [ , large, -], [large, -, scale], [-, scale, ,], [scale, ,, complex], [,, complex, long], [complex, long, AI], [long, AI, implementation], [AI, implementation,  ], [implementation,  , projects], [ , projects, normally], [projects, normally, lead], [normally, lead, failure], [lead, failure, .]]

>> Noun Phrases are: 
[Our experience, large-scale, complex and very long AI implementation  projects, failure]

>> Named Entities are: 
[] 

------------------- Sentence 7 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 177 =================================

 — Set understandable key performance indicators (KPIs)  To make sure that a project will succeed, you need to  define KPIs that are understandable for your business— including employees and other stakeholders. These KPIs  will help you evaluate whether a project is successful. In  general, we suggest taking a second look at these KPIs  after an appropriate duration to decide whether the  project is successful or if you should discontinue it. If  your business can’t pinpoint the right KPIs to measure  success, the project is too complex. 

------------------- Sentence 1 -------------------

 — Set understandable key performance indicators (KPIs)   


>> Tokens are: 
[ , —, Set, understandable, key, performance, indicators, (, KPIs, ),  ] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('—', 'PUNCT'), ('Set', 'VERB'), ('understandable', 'ADJ'), ('key', 'ADJ'), ('performance', 'NOUN'), ('indicators', 'NOUN'), ('(', 'PUNCT'), ('KPIs', 'PROPN'), (')', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'dep'), ('—', 'punct'), ('Set', 'ROOT'), ('understandable', 'amod'), ('key', 'amod'), ('performance', 'compound'), ('indicators', 'dobj'), ('(', 'punct'), ('KPIs', 'appos'), (')', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[ , —], [—, Set], [Set, understandable], [understandable, key], [key, performance], [performance, indicators], [indicators, (], [(, KPIs], [KPIs, )], [),  ]]

>> Trigrams: 
[[ , —, Set], [—, Set, understandable], [Set, understandable, key], [understandable, key, performance], [key, performance, indicators], [performance, indicators, (], [indicators, (, KPIs], [(, KPIs, )], [KPIs, ),  ]]

>> Noun Phrases are: 
[understandable key performance indicators, KPIs]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

To make sure that a project will succeed, you need to  define KPIs that are understandable for your business— including employees and other stakeholders. 


>> Tokens are: 
[sure, project, succeed, ,, need,  , define, KPIs, understandable, business, —, including, employees, stakeholders, .] 

>> PoS Tags are: 
[('sure', 'ADJ'), ('project', 'NOUN'), ('succeed', 'VERB'), (',', 'PUNCT'), ('need', 'VERB'), (' ', 'SPACE'), ('define', 'VERB'), ('KPIs', 'NOUN'), ('understandable', 'ADJ'), ('business', 'NOUN'), ('—', 'PUNCT'), ('including', 'VERB'), ('employees', 'NOUN'), ('stakeholders', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('sure', 'acomp'), ('project', 'nsubj'), ('succeed', 'ccomp'), (',', 'punct'), ('need', 'ROOT'), (' ', 'pobj'), ('define', 'xcomp'), ('KPIs', 'dobj'), ('understandable', 'acomp'), ('business', 'pobj'), ('—', 'punct'), ('including', 'prep'), ('employees', 'pobj'), ('stakeholders', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[sure, project], [project, succeed], [succeed, ,], [,, need], [need,  ], [ , define], [define, KPIs], [KPIs, understandable], [understandable, business], [business, —], [—, including], [including, employees], [employees, stakeholders], [stakeholders, .]]

>> Trigrams: 
[[sure, project, succeed], [project, succeed, ,], [succeed, ,, need], [,, need,  ], [need,  , define], [ , define, KPIs], [define, KPIs, understandable], [KPIs, understandable, business], [understandable, business, —], [business, —, including], [—, including, employees], [including, employees, stakeholders], [employees, stakeholders, .]]

>> Noun Phrases are: 
[a project, you, KPIs, your business, employees, other stakeholders]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

These KPIs  will help you evaluate whether a project is successful. 


>> Tokens are: 
[KPIs,  , help, evaluate, project, successful, .] 

>> PoS Tags are: 
[('KPIs', 'NOUN'), (' ', 'SPACE'), ('help', 'VERB'), ('evaluate', 'VERB'), ('project', 'NOUN'), ('successful', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('KPIs', 'npadvmod'), (' ', 'nsubj'), ('help', 'ROOT'), ('evaluate', 'ccomp'), ('project', 'nsubj'), ('successful', 'acomp'), ('.', 'punct')]

>> Bigrams: 
[[KPIs,  ], [ , help], [help, evaluate], [evaluate, project], [project, successful], [successful, .]]

>> Trigrams: 
[[KPIs,  , help], [ , help, evaluate], [help, evaluate, project], [evaluate, project, successful], [project, successful, .]]

>> Noun Phrases are: 
[you, a project]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

In  general, we suggest taking a second look at these KPIs  after an appropriate duration to decide whether the  project is successful or if you should discontinue it. 


>> Tokens are: 
[ , general, ,, suggest, taking, second, look, KPIs,  , appropriate, duration, decide,  , project, successful, discontinue, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('general', 'ADJ'), (',', 'PUNCT'), ('suggest', 'AUX'), ('taking', 'VERB'), ('second', 'ADJ'), ('look', 'NOUN'), ('KPIs', 'NOUN'), (' ', 'SPACE'), ('appropriate', 'ADJ'), ('duration', 'NOUN'), ('decide', 'VERB'), (' ', 'SPACE'), ('project', 'NOUN'), ('successful', 'ADJ'), ('discontinue', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'pobj'), ('general', 'amod'), (',', 'punct'), ('suggest', 'aux'), ('taking', 'ROOT'), ('second', 'amod'), ('look', 'dobj'), ('KPIs', 'pobj'), (' ', 'dobj'), ('appropriate', 'amod'), ('duration', 'pobj'), ('decide', 'relcl'), (' ', 'compound'), ('project', 'nsubj'), ('successful', 'acomp'), ('discontinue', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[ , general], [general, ,], [,, suggest], [suggest, taking], [taking, second], [second, look], [look, KPIs], [KPIs,  ], [ , appropriate], [appropriate, duration], [duration, decide], [decide,  ], [ , project], [project, successful], [successful, discontinue], [discontinue, .]]

>> Trigrams: 
[[ , general, ,], [general, ,, suggest], [,, suggest, taking], [suggest, taking, second], [taking, second, look], [second, look, KPIs], [look, KPIs,  ], [KPIs,  , appropriate], [ , appropriate, duration], [appropriate, duration, decide], [duration, decide,  ], [decide,  , project], [ , project, successful], [project, successful, discontinue], [successful, discontinue, .]]

>> Noun Phrases are: 
[we, a second look, these KPIs, an appropriate duration, the  project, you, it]

>> Named Entities are: 
[('second', 'ORDINAL')] 

------------------- Sentence 5 -------------------

If  your business can’t pinpoint the right KPIs to measure  success, the project is too complex. 


>> Tokens are: 
[ , business, pinpoint, right, KPIs, measure,  , success, ,, project, complex, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('business', 'NOUN'), ('pinpoint', 'VERB'), ('right', 'ADJ'), ('KPIs', 'NOUN'), ('measure', 'VERB'), (' ', 'SPACE'), ('success', 'NOUN'), (',', 'PUNCT'), ('project', 'NOUN'), ('complex', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'nsubj'), ('business', 'dobj'), ('pinpoint', 'advcl'), ('right', 'amod'), ('KPIs', 'dobj'), ('measure', 'xcomp'), (' ', 'dative'), ('success', 'dobj'), (',', 'punct'), ('project', 'nsubj'), ('complex', 'acomp'), ('.', 'punct')]

>> Bigrams: 
[[ , business], [business, pinpoint], [pinpoint, right], [right, KPIs], [KPIs, measure], [measure,  ], [ , success], [success, ,], [,, project], [project, complex], [complex, .]]

>> Trigrams: 
[[ , business, pinpoint], [business, pinpoint, right], [pinpoint, right, KPIs], [right, KPIs, measure], [KPIs, measure,  ], [measure,  , success], [ , success, ,], [success, ,, project], [,, project, complex], [project, complex, .]]

>> Noun Phrases are: 
[your business, the right KPIs, success, the project]

>> Named Entities are: 
[] 


================================ Paragraph 178 =================================

 — Roll-out through company (culture)  Once agreement is reached about which projects would  be worth working on, it’s time to implement the MVP  within your company. It’s important that the way you  implement it is looked at from both the business and  the technical side. 

------------------- Sentence 1 -------------------

 — Roll-out through company (culture)   


>> Tokens are: 
[ , —, Roll, -, company, (, culture, ),  ] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('—', 'PUNCT'), ('Roll', 'NOUN'), ('-', 'PUNCT'), ('company', 'NOUN'), ('(', 'PUNCT'), ('culture', 'NOUN'), (')', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT'), ('—', 'punct'), ('Roll', 'compound'), ('-', 'punct'), ('company', 'pobj'), ('(', 'punct'), ('culture', 'appos'), (')', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[ , —], [—, Roll], [Roll, -], [-, company], [company, (], [(, culture], [culture, )], [),  ]]

>> Trigrams: 
[[ , —, Roll], [—, Roll, -], [Roll, -, company], [-, company, (], [company, (, culture], [(, culture, )], [culture, ),  ]]

>> Noun Phrases are: 
[Roll-out, company, culture]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Once agreement is reached about which projects would  be worth working on, it’s time to implement the MVP  within your company. 


>> Tokens are: 
[agreement, reached, projects,  , worth, working, ,, time, implement, MVP,  , company, .] 

>> PoS Tags are: 
[('agreement', 'NOUN'), ('reached', 'VERB'), ('projects', 'NOUN'), (' ', 'SPACE'), ('worth', 'ADJ'), ('working', 'VERB'), (',', 'PUNCT'), ('time', 'NOUN'), ('implement', 'VERB'), ('MVP', 'PROPN'), (' ', 'SPACE'), ('company', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('agreement', 'nsubjpass'), ('reached', 'advcl'), ('projects', 'nsubj'), (' ', 'nsubj'), ('worth', 'acomp'), ('working', 'xcomp'), (',', 'punct'), ('time', 'attr'), ('implement', 'relcl'), ('MVP', 'dobj'), (' ', 'appos'), ('company', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[agreement, reached], [reached, projects], [projects,  ], [ , worth], [worth, working], [working, ,], [,, time], [time, implement], [implement, MVP], [MVP,  ], [ , company], [company, .]]

>> Trigrams: 
[[agreement, reached, projects], [reached, projects,  ], [projects,  , worth], [ , worth, working], [worth, working, ,], [working, ,, time], [,, time, implement], [time, implement, MVP], [implement, MVP,  ], [MVP,  , company], [ , company, .]]

>> Noun Phrases are: 
[agreement, which projects, it, time, the MVP, your company]

>> Named Entities are: 
[('MVP', 'ORG')] 

------------------- Sentence 3 -------------------

It’s important that the way you  implement it is looked at from both the business and  the technical side. 


>> Tokens are: 
[important, way,  , implement, looked, business,  , technical, .] 

>> PoS Tags are: 
[('important', 'ADJ'), ('way', 'NOUN'), (' ', 'SPACE'), ('implement', 'VERB'), ('looked', 'VERB'), ('business', 'NOUN'), (' ', 'SPACE'), ('technical', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('important', 'acomp'), ('way', 'npadvmod'), (' ', 'appos'), ('implement', 'relcl'), ('looked', 'relcl'), ('business', 'pobj'), (' ', 'conj'), ('technical', 'amod'), ('.', 'punct')]

>> Bigrams: 
[[important, way], [way,  ], [ , implement], [implement, looked], [looked, business], [business,  ], [ , technical], [technical, .]]

>> Trigrams: 
[[important, way,  ], [way,  , implement], [ , implement, looked], [implement, looked, business], [looked, business,  ], [business,  , technical], [ , technical, .]]

>> Noun Phrases are: 
[It, you, it, both the business, the technical side]

>> Named Entities are: 
[] 


================================ Paragraph 179 =================================

IBM Services     11 

------------------- Sentence 1 -------------------

IBM Services     11 


>> Tokens are: 
[IBM, Services,     , 11] 

>> PoS Tags are: 
[('IBM', 'PROPN'), ('Services', 'PROPN'), ('    ', 'SPACE'), ('11', 'NUM')] 

>> Dependency Tags are: 
[('IBM', 'compound'), ('Services', 'ROOT'), ('    ', 'appos'), ('11', 'nummod')]

>> Bigrams: 
[[IBM, Services], [Services,     ], [    , 11]]

>> Trigrams: 
[[IBM, Services,     ], [Services,     , 11]]

>> Noun Phrases are: 
[IBM Services]

>> Named Entities are: 
[('IBM Services', 'ORG')] 


================================ Paragraph 180 =================================

Pitfalls of AI implementation With the experience of implementing many of these   cases we normally see a couple of problems organizations  have when implementing AI. We’ve listed them because  we feel it’s important to know what you should consider  when implementing AI.  

------------------- Sentence 1 -------------------

Pitfalls of AI implementation With the experience of implementing many of these   cases we normally see a couple of problems organizations  have when implementing AI. 


>> Tokens are: 
[Pitfalls, AI, implementation, experience, implementing,   , cases, normally, couple, problems, organizations,  , implementing, AI, .] 

>> PoS Tags are: 
[('Pitfalls', 'NOUN'), ('AI', 'PROPN'), ('implementation', 'NOUN'), ('experience', 'NOUN'), ('implementing', 'VERB'), ('  ', 'SPACE'), ('cases', 'NOUN'), ('normally', 'ADV'), ('couple', 'NOUN'), ('problems', 'NOUN'), ('organizations', 'NOUN'), (' ', 'SPACE'), ('implementing', 'VERB'), ('AI', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Pitfalls', 'npadvmod'), ('AI', 'compound'), ('implementation', 'pobj'), ('experience', 'pobj'), ('implementing', 'pcomp'), ('  ', 'nummod'), ('cases', 'pobj'), ('normally', 'advmod'), ('couple', 'dobj'), ('problems', 'compound'), ('organizations', 'pobj'), (' ', 'nsubj'), ('implementing', 'advcl'), ('AI', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Pitfalls, AI], [AI, implementation], [implementation, experience], [experience, implementing], [implementing,   ], [  , cases], [cases, normally], [normally, couple], [couple, problems], [problems, organizations], [organizations,  ], [ , implementing], [implementing, AI], [AI, .]]

>> Trigrams: 
[[Pitfalls, AI, implementation], [AI, implementation, experience], [implementation, experience, implementing], [experience, implementing,   ], [implementing,   , cases], [  , cases, normally], [cases, normally, couple], [normally, couple, problems], [couple, problems, organizations], [problems, organizations,  ], [organizations,  , implementing], [ , implementing, AI], [implementing, AI, .]]

>> Noun Phrases are: 
[AI implementation, the experience, these   cases, we, a couple, problems organizations, AI]

>> Named Entities are: 
[('AI', 'ORG')] 

------------------- Sentence 2 -------------------

We’ve listed them because  we feel it’s important to know what you should consider  when implementing AI.   


>> Tokens are: 
[listed,  , feel, important, know, consider,  , implementing, AI, .,  ] 

>> PoS Tags are: 
[('listed', 'VERB'), (' ', 'SPACE'), ('feel', 'VERB'), ('important', 'ADJ'), ('know', 'VERB'), ('consider', 'VERB'), (' ', 'SPACE'), ('implementing', 'VERB'), ('AI', 'PROPN'), ('.', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('listed', 'ROOT'), (' ', 'pobj'), ('feel', 'advcl'), ('important', 'acomp'), ('know', 'xcomp'), ('consider', 'ccomp'), (' ', 'dobj'), ('implementing', 'advcl'), ('AI', 'dobj'), ('.', 'punct'), (' ', 'dobj')]

>> Bigrams: 
[[listed,  ], [ , feel], [feel, important], [important, know], [know, consider], [consider,  ], [ , implementing], [implementing, AI], [AI, .], [.,  ]]

>> Trigrams: 
[[listed,  , feel], [ , feel, important], [feel, important, know], [important, know, consider], [know, consider,  ], [consider,  , implementing], [ , implementing, AI], [implementing, AI, .], [AI, .,  ]]

>> Noun Phrases are: 
[We, them, we, it, what, you, AI]

>> Named Entities are: 
[('AI', 'ORG')] 


================================ Paragraph 181 =================================

Culture Pitfalls: Looking at the advances we’ve made over the last  decade, gathering data is easy. But it’s what’s done with  the data that provides the most value. The biggest pitfall  we often encounter is a culture that’s not committed to  making data-driven decisions. Examples are cultures that  can’t innovate in an agile fashion or can’t leave room for  trial and error, as are cultures that have traditionally been  unwilling to transform a process. This reluctance usually  has to do with fear of job loss, skepticism or a knowledge  gap. It’s a challenge to get your organization ready to  embrace a data-driven culture, and for many of your  employees it can feel like a counter intuitive process.  

------------------- Sentence 1 -------------------

Culture Pitfalls: Looking at the advances we’ve made over the last  decade, gathering data is easy. 


>> Tokens are: 
[Culture, Pitfalls, :, Looking, advances,  , decade, ,, gathering, data, easy, .] 

>> PoS Tags are: 
[('Culture', 'PROPN'), ('Pitfalls', 'NOUN'), (':', 'PUNCT'), ('Looking', 'VERB'), ('advances', 'NOUN'), (' ', 'SPACE'), ('decade', 'NOUN'), (',', 'PUNCT'), ('gathering', 'VERB'), ('data', 'NOUN'), ('easy', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Culture', 'compound'), ('Pitfalls', 'dep'), (':', 'punct'), ('Looking', 'advcl'), ('advances', 'pobj'), (' ', 'compound'), ('decade', 'pobj'), (',', 'punct'), ('gathering', 'compound'), ('data', 'nsubj'), ('easy', 'acomp'), ('.', 'punct')]

>> Bigrams: 
[[Culture, Pitfalls], [Pitfalls, :], [:, Looking], [Looking, advances], [advances,  ], [ , decade], [decade, ,], [,, gathering], [gathering, data], [data, easy], [easy, .]]

>> Trigrams: 
[[Culture, Pitfalls, :], [Pitfalls, :, Looking], [:, Looking, advances], [Looking, advances,  ], [advances,  , decade], [ , decade, ,], [decade, ,, gathering], [,, gathering, data], [gathering, data, easy], [data, easy, .]]

>> Noun Phrases are: 
[the advances, we, the last  decade, gathering data]

>> Named Entities are: 
[('the last  decade', 'DATE')] 

------------------- Sentence 2 -------------------

But it’s what’s done with  the data that provides the most value. 


>> Tokens are: 
[ , data, provides, value, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('data', 'NOUN'), ('provides', 'VERB'), ('value', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'pobj'), ('data', 'dobj'), ('provides', 'relcl'), ('value', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[ , data], [data, provides], [provides, value], [value, .]]

>> Trigrams: 
[[ , data, provides], [data, provides, value], [provides, value, .]]

>> Noun Phrases are: 
[it, what, the data, the most value]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

The biggest pitfall  we often encounter is a culture that’s not committed to  making data-driven decisions. 


>> Tokens are: 
[biggest, pitfall,  , encounter, culture, committed,  , making, data, -, driven, decisions, .] 

>> PoS Tags are: 
[('biggest', 'ADJ'), ('pitfall', 'NOUN'), (' ', 'SPACE'), ('encounter', 'VERB'), ('culture', 'NOUN'), ('committed', 'VERB'), (' ', 'SPACE'), ('making', 'VERB'), ('data', 'NOUN'), ('-', 'PUNCT'), ('driven', 'VERB'), ('decisions', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('biggest', 'amod'), ('pitfall', 'nsubj'), (' ', 'appos'), ('encounter', 'relcl'), ('culture', 'attr'), ('committed', 'relcl'), (' ', 'pobj'), ('making', 'advcl'), ('data', 'npadvmod'), ('-', 'punct'), ('driven', 'amod'), ('decisions', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[biggest, pitfall], [pitfall,  ], [ , encounter], [encounter, culture], [culture, committed], [committed,  ], [ , making], [making, data], [data, -], [-, driven], [driven, decisions], [decisions, .]]

>> Trigrams: 
[[biggest, pitfall,  ], [pitfall,  , encounter], [ , encounter, culture], [encounter, culture, committed], [culture, committed,  ], [committed,  , making], [ , making, data], [making, data, -], [data, -, driven], [-, driven, decisions], [driven, decisions, .]]

>> Noun Phrases are: 
[The biggest pitfall, we, a culture, data-driven decisions]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

Examples are cultures that  can’t innovate in an agile fashion or can’t leave room for  trial and error, as are cultures that have traditionally been  unwilling to transform a process. 


>> Tokens are: 
[Examples, cultures,  , innovate, agile, fashion, leave, room,  , trial, error, ,, cultures, traditionally,  , unwilling, transform, process, .] 

>> PoS Tags are: 
[('Examples', 'NOUN'), ('cultures', 'NOUN'), (' ', 'SPACE'), ('innovate', 'VERB'), ('agile', 'ADJ'), ('fashion', 'NOUN'), ('leave', 'VERB'), ('room', 'NOUN'), (' ', 'SPACE'), ('trial', 'NOUN'), ('error', 'NOUN'), (',', 'PUNCT'), ('cultures', 'NOUN'), ('traditionally', 'ADV'), (' ', 'SPACE'), ('unwilling', 'ADJ'), ('transform', 'VERB'), ('process', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Examples', 'nsubj'), ('cultures', 'attr'), (' ', 'nsubj'), ('innovate', 'acl'), ('agile', 'amod'), ('fashion', 'pobj'), ('leave', 'conj'), ('room', 'dobj'), (' ', 'compound'), ('trial', 'pobj'), ('error', 'conj'), (',', 'punct'), ('cultures', 'nsubj'), ('traditionally', 'advmod'), (' ', 'attr'), ('unwilling', 'acomp'), ('transform', 'xcomp'), ('process', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Examples, cultures], [cultures,  ], [ , innovate], [innovate, agile], [agile, fashion], [fashion, leave], [leave, room], [room,  ], [ , trial], [trial, error], [error, ,], [,, cultures], [cultures, traditionally], [traditionally,  ], [ , unwilling], [unwilling, transform], [transform, process], [process, .]]

>> Trigrams: 
[[Examples, cultures,  ], [cultures,  , innovate], [ , innovate, agile], [innovate, agile, fashion], [agile, fashion, leave], [fashion, leave, room], [leave, room,  ], [room,  , trial], [ , trial, error], [trial, error, ,], [error, ,, cultures], [,, cultures, traditionally], [cultures, traditionally,  ], [traditionally,  , unwilling], [ , unwilling, transform], [unwilling, transform, process], [transform, process, .]]

>> Noun Phrases are: 
[Examples, cultures, an agile fashion, room,  trial, error, cultures, a process]

>> Named Entities are: 
[] 

------------------- Sentence 5 -------------------

This reluctance usually  has to do with fear of job loss, skepticism or a knowledge 


>> Tokens are: 
[reluctance, usually,  , fear, job, loss, ,, skepticism, knowledge] 

>> PoS Tags are: 
[('reluctance', 'NOUN'), ('usually', 'ADV'), (' ', 'SPACE'), ('fear', 'NOUN'), ('job', 'NOUN'), ('loss', 'NOUN'), (',', 'PUNCT'), ('skepticism', 'NOUN'), ('knowledge', 'NOUN')] 

>> Dependency Tags are: 
[('reluctance', 'nsubj'), ('usually', 'advmod'), (' ', 'nsubj'), ('fear', 'pobj'), ('job', 'compound'), ('loss', 'pobj'), (',', 'punct'), ('skepticism', 'conj'), ('knowledge', 'conj')]

>> Bigrams: 
[[reluctance, usually], [usually,  ], [ , fear], [fear, job], [job, loss], [loss, ,], [,, skepticism], [skepticism, knowledge]]

>> Trigrams: 
[[reluctance, usually,  ], [usually,  , fear], [ , fear, job], [fear, job, loss], [job, loss, ,], [loss, ,, skepticism], [,, skepticism, knowledge]]

>> Noun Phrases are: 
[This reluctance, fear, job loss, skepticism, a knowledge]

>> Named Entities are: 
[] 

------------------- Sentence 6 -------------------

 gap. 


>> Tokens are: 
[ , gap, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('gap', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'compound'), ('gap', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[ , gap], [gap, .]]

>> Trigrams: 
[[ , gap, .]]

>> Noun Phrases are: 
[ gap]

>> Named Entities are: 
[] 

------------------- Sentence 7 -------------------

It’s a challenge to get your organization ready to  embrace a data-driven culture, and for many of your  employees it can feel like a counter intuitive process. 


>> Tokens are: 
[challenge, organization, ready,  , embrace, data, -, driven, culture, ,,  , employees, feel, like, counter, intuitive, process, .] 

>> PoS Tags are: 
[('challenge', 'NOUN'), ('organization', 'NOUN'), ('ready', 'ADJ'), (' ', 'SPACE'), ('embrace', 'VERB'), ('data', 'NOUN'), ('-', 'PUNCT'), ('driven', 'VERB'), ('culture', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('employees', 'NOUN'), ('feel', 'VERB'), ('like', 'ADP'), ('counter', 'NOUN'), ('intuitive', 'ADJ'), ('process', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('challenge', 'attr'), ('organization', 'nsubj'), ('ready', 'ccomp'), (' ', 'pobj'), ('embrace', 'xcomp'), ('data', 'npadvmod'), ('-', 'punct'), ('driven', 'amod'), ('culture', 'dobj'), (',', 'punct'), (' ', 'compound'), ('employees', 'pobj'), ('feel', 'conj'), ('like', 'prep'), ('counter', 'amod'), ('intuitive', 'amod'), ('process', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[challenge, organization], [organization, ready], [ready,  ], [ , embrace], [embrace, data], [data, -], [-, driven], [driven, culture], [culture, ,], [,,  ], [ , employees], [employees, feel], [feel, like], [like, counter], [counter, intuitive], [intuitive, process], [process, .]]

>> Trigrams: 
[[challenge, organization, ready], [organization, ready,  ], [ready,  , embrace], [ , embrace, data], [embrace, data, -], [data, -, driven], [-, driven, culture], [driven, culture, ,], [culture, ,,  ], [,,  , employees], [ , employees, feel], [employees, feel, like], [feel, like, counter], [like, counter, intuitive], [counter, intuitive, process], [intuitive, process, .]]

>> Noun Phrases are: 
[It, a challenge, your organization, a data-driven culture, your  employees, it, a counter intuitive process]

>> Named Entities are: 
[] 

------------------- Sentence 8 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 182 =================================

Recommendation: Digital change management, training  and preparation for the shift in thinking is required. You  should start with small wins that are visible for relevant  departments. The business users should be your starting  point for agile development and in your design thinking  process. All the results that come out of the project should  be measurable; this way you can easily show your wins.  Then, for a data-driven culture to take hold, the whole  organization must embrace it. The message must be clear  for all employees: “Decision are made based on data.” 

------------------- Sentence 1 -------------------

Recommendation: Digital change management, training  and preparation for the shift in thinking is required. 


>> Tokens are: 
[Recommendation, :, Digital, change, management, ,, training,  , preparation, shift, thinking, required, .] 

>> PoS Tags are: 
[('Recommendation', 'NOUN'), (':', 'PUNCT'), ('Digital', 'PROPN'), ('change', 'NOUN'), ('management', 'NOUN'), (',', 'PUNCT'), ('training', 'VERB'), (' ', 'SPACE'), ('preparation', 'NOUN'), ('shift', 'NOUN'), ('thinking', 'NOUN'), ('required', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Recommendation', 'nsubjpass'), (':', 'punct'), ('Digital', 'compound'), ('change', 'compound'), ('management', 'appos'), (',', 'punct'), ('training', 'acl'), (' ', 'dobj'), ('preparation', 'conj'), ('shift', 'pobj'), ('thinking', 'pobj'), ('required', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Recommendation, :], [:, Digital], [Digital, change], [change, management], [management, ,], [,, training], [training,  ], [ , preparation], [preparation, shift], [shift, thinking], [thinking, required], [required, .]]

>> Trigrams: 
[[Recommendation, :, Digital], [:, Digital, change], [Digital, change, management], [change, management, ,], [management, ,, training], [,, training,  ], [training,  , preparation], [ , preparation, shift], [preparation, shift, thinking], [shift, thinking, required], [thinking, required, .]]

>> Noun Phrases are: 
[Recommendation, Digital change management, preparation, the shift, thinking]

>> Named Entities are: 
[('Digital', 'ORG')] 

------------------- Sentence 2 -------------------

You  should start with small wins that are visible for relevant  departments. 


>> Tokens are: 
[ , start, small, wins, visible, relevant,  , departments, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('start', 'VERB'), ('small', 'ADJ'), ('wins', 'NOUN'), ('visible', 'ADJ'), ('relevant', 'ADJ'), (' ', 'SPACE'), ('departments', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'nsubj'), ('start', 'ROOT'), ('small', 'amod'), ('wins', 'pobj'), ('visible', 'acomp'), ('relevant', 'amod'), (' ', 'compound'), ('departments', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[ , start], [start, small], [small, wins], [wins, visible], [visible, relevant], [relevant,  ], [ , departments], [departments, .]]

>> Trigrams: 
[[ , start, small], [start, small, wins], [small, wins, visible], [wins, visible, relevant], [visible, relevant,  ], [relevant,  , departments], [ , departments, .]]

>> Noun Phrases are: 
[small wins, relevant  departments]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

The business users should be your starting  point for agile development and in your design thinking  process. 


>> Tokens are: 
[business, users, starting,  , point, agile, development, design, thinking,  , process, .] 

>> PoS Tags are: 
[('business', 'NOUN'), ('users', 'NOUN'), ('starting', 'VERB'), (' ', 'SPACE'), ('point', 'NOUN'), ('agile', 'ADJ'), ('development', 'NOUN'), ('design', 'NOUN'), ('thinking', 'NOUN'), (' ', 'SPACE'), ('process', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('business', 'compound'), ('users', 'nsubj'), ('starting', 'amod'), (' ', 'punct'), ('point', 'attr'), ('agile', 'amod'), ('development', 'pobj'), ('design', 'compound'), ('thinking', 'nmod'), (' ', 'compound'), ('process', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[business, users], [users, starting], [starting,  ], [ , point], [point, agile], [agile, development], [development, design], [design, thinking], [thinking,  ], [ , process], [process, .]]

>> Trigrams: 
[[business, users, starting], [users, starting,  ], [starting,  , point], [ , point, agile], [point, agile, development], [agile, development, design], [development, design, thinking], [design, thinking,  ], [thinking,  , process], [ , process, .]]

>> Noun Phrases are: 
[The business users, your starting  point, agile development, your design thinking  process]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

All the results that come out of the project should  be measurable; this way you can easily show your wins. 


>> Tokens are: 
[results, come, project,  , measurable, ;, way, easily, wins, .] 

>> PoS Tags are: 
[('results', 'NOUN'), ('come', 'VERB'), ('project', 'NOUN'), (' ', 'SPACE'), ('measurable', 'ADJ'), (';', 'PUNCT'), ('way', 'NOUN'), ('easily', 'ADV'), ('wins', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('results', 'nsubj'), ('come', 'relcl'), ('project', 'pobj'), (' ', 'nsubj'), ('measurable', 'acomp'), (';', 'punct'), ('way', 'npadvmod'), ('easily', 'advmod'), ('wins', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[results, come], [come, project], [project,  ], [ , measurable], [measurable, ;], [;, way], [way, easily], [easily, wins], [wins, .]]

>> Trigrams: 
[[results, come, project], [come, project,  ], [project,  , measurable], [ , measurable, ;], [measurable, ;, way], [;, way, easily], [way, easily, wins], [easily, wins, .]]

>> Noun Phrases are: 
[All the results, the project, you, your wins]

>> Named Entities are: 
[] 

------------------- Sentence 5 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 6 -------------------

Then, for a data-driven culture to take hold, the whole  organization must embrace it. 


>> Tokens are: 
[,, data, -, driven, culture, hold, ,,  , organization, embrace, .] 

>> PoS Tags are: 
[(',', 'PUNCT'), ('data', 'NOUN'), ('-', 'PUNCT'), ('driven', 'VERB'), ('culture', 'NOUN'), ('hold', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('organization', 'NOUN'), ('embrace', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(',', 'punct'), ('data', 'npadvmod'), ('-', 'punct'), ('driven', 'amod'), ('culture', 'nsubj'), ('hold', 'dobj'), (',', 'punct'), (' ', 'compound'), ('organization', 'nsubj'), ('embrace', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[,, data], [data, -], [-, driven], [driven, culture], [culture, hold], [hold, ,], [,,  ], [ , organization], [organization, embrace], [embrace, .]]

>> Trigrams: 
[[,, data, -], [data, -, driven], [-, driven, culture], [driven, culture, hold], [culture, hold, ,], [hold, ,,  ], [,,  , organization], [ , organization, embrace], [organization, embrace, .]]

>> Noun Phrases are: 
[a data-driven culture, hold, the whole  organization, it]

>> Named Entities are: 
[] 

------------------- Sentence 7 -------------------

The message must be clear  for all employees: “Decision are made based on data.” 


>> Tokens are: 
[message, clear,  , employees, :, “, Decision, based, data, ., ”] 

>> PoS Tags are: 
[('message', 'NOUN'), ('clear', 'ADJ'), (' ', 'SPACE'), ('employees', 'NOUN'), (':', 'PUNCT'), ('“', 'PUNCT'), ('Decision', 'NOUN'), ('based', 'VERB'), ('data', 'NOUN'), ('.', 'PUNCT'), ('”', 'PUNCT')] 

>> Dependency Tags are: 
[('message', 'nsubj'), ('clear', 'amod'), (' ', 'attr'), ('employees', 'pobj'), (':', 'punct'), ('“', 'punct'), ('Decision', 'nsubjpass'), ('based', 'oprd'), ('data', 'pobj'), ('.', 'punct'), ('”', 'punct')]

>> Bigrams: 
[[message, clear], [clear,  ], [ , employees], [employees, :], [:, “], [“, Decision], [Decision, based], [based, data], [data, .], [., ”]]

>> Trigrams: 
[[message, clear,  ], [clear,  , employees], [ , employees, :], [employees, :, “], [:, “, Decision], [“, Decision, based], [Decision, based, data], [based, data, .], [data, ., ”]]

>> Noun Phrases are: 
[The message, all employees, Decision, data]

>> Named Entities are: 
[] 


================================ Paragraph 183 =================================

Building trust within the company Pitfalls: This step is often overlooked, but when you want  to implement AI you need get project stakeholders involved  and on board. In Design Thinking, IBM starts with the  business and its users. A data scientist will require domain  knowledge and access to data, and the stakeholders should  accommodate this need to help to speed up the process.  Also, consider the need for AI education and devote time  to considering the right user interface.  

------------------- Sentence 1 -------------------

Building trust within the company Pitfalls: This step is often overlooked, but when you want  to implement AI you need get project stakeholders involved  and on board. 


>> Tokens are: 
[Building, trust, company, Pitfalls, :, step, overlooked, ,, want,  , implement, AI, need, project, stakeholders, involved,  , board, .] 

>> PoS Tags are: 
[('Building', 'VERB'), ('trust', 'NOUN'), ('company', 'NOUN'), ('Pitfalls', 'NOUN'), (':', 'PUNCT'), ('step', 'NOUN'), ('overlooked', 'VERB'), (',', 'PUNCT'), ('want', 'VERB'), (' ', 'SPACE'), ('implement', 'VERB'), ('AI', 'PROPN'), ('need', 'VERB'), ('project', 'NOUN'), ('stakeholders', 'NOUN'), ('involved', 'VERB'), (' ', 'SPACE'), ('board', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Building', 'advcl'), ('trust', 'dobj'), ('company', 'pobj'), ('Pitfalls', 'dobj'), (':', 'punct'), ('step', 'nsubjpass'), ('overlooked', 'ROOT'), (',', 'punct'), ('want', 'advcl'), (' ', 'nsubj'), ('implement', 'ccomp'), ('AI', 'dobj'), ('need', 'conj'), ('project', 'compound'), ('stakeholders', 'nsubj'), ('involved', 'ccomp'), (' ', 'dobj'), ('board', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Building, trust], [trust, company], [company, Pitfalls], [Pitfalls, :], [:, step], [step, overlooked], [overlooked, ,], [,, want], [want,  ], [ , implement], [implement, AI], [AI, need], [need, project], [project, stakeholders], [stakeholders, involved], [involved,  ], [ , board], [board, .]]

>> Trigrams: 
[[Building, trust, company], [trust, company, Pitfalls], [company, Pitfalls, :], [Pitfalls, :, step], [:, step, overlooked], [step, overlooked, ,], [overlooked, ,, want], [,, want,  ], [want,  , implement], [ , implement, AI], [implement, AI, need], [AI, need, project], [need, project, stakeholders], [project, stakeholders, involved], [stakeholders, involved,  ], [involved,  , board], [ , board, .]]

>> Noun Phrases are: 
[trust, the company, Pitfalls, This step, you, AI, you, project stakeholders, board]

>> Named Entities are: 
[('AI', 'ORG')] 

------------------- Sentence 2 -------------------

In Design Thinking, IBM starts with the  business and its users. 


>> Tokens are: 
[Design, Thinking, ,, IBM, starts,  , business, users, .] 

>> PoS Tags are: 
[('Design', 'PROPN'), ('Thinking', 'PROPN'), (',', 'PUNCT'), ('IBM', 'PROPN'), ('starts', 'VERB'), (' ', 'SPACE'), ('business', 'NOUN'), ('users', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Design', 'compound'), ('Thinking', 'pobj'), (',', 'punct'), ('IBM', 'nsubj'), ('starts', 'ROOT'), (' ', 'compound'), ('business', 'pobj'), ('users', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[Design, Thinking], [Thinking, ,], [,, IBM], [IBM, starts], [starts,  ], [ , business], [business, users], [users, .]]

>> Trigrams: 
[[Design, Thinking, ,], [Thinking, ,, IBM], [,, IBM, starts], [IBM, starts,  ], [starts,  , business], [ , business, users], [business, users, .]]

>> Noun Phrases are: 
[Design Thinking, IBM, the  business, its users]

>> Named Entities are: 
[('Design Thinking', 'ORG'), ('IBM', 'ORG')] 

------------------- Sentence 3 -------------------

A data scientist will require domain  knowledge and access to data, and the stakeholders should  accommodate this need to help to speed up the process.   


>> Tokens are: 
[data, scientist, require, domain,  , knowledge, access, data, ,, stakeholders,  , accommodate, need, help, speed, process, .,  ] 

>> PoS Tags are: 
[('data', 'NOUN'), ('scientist', 'NOUN'), ('require', 'VERB'), ('domain', 'NOUN'), (' ', 'SPACE'), ('knowledge', 'NOUN'), ('access', 'NOUN'), ('data', 'NOUN'), (',', 'PUNCT'), ('stakeholders', 'NOUN'), (' ', 'SPACE'), ('accommodate', 'VERB'), ('need', 'NOUN'), ('help', 'VERB'), ('speed', 'VERB'), ('process', 'NOUN'), ('.', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('data', 'compound'), ('scientist', 'nsubj'), ('require', 'ROOT'), ('domain', 'dobj'), (' ', 'prep'), ('knowledge', 'dobj'), ('access', 'conj'), ('data', 'pobj'), (',', 'punct'), ('stakeholders', 'nsubj'), (' ', 'nsubj'), ('accommodate', 'conj'), ('need', 'dobj'), ('help', 'acl'), ('speed', 'xcomp'), ('process', 'dobj'), ('.', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[data, scientist], [scientist, require], [require, domain], [domain,  ], [ , knowledge], [knowledge, access], [access, data], [data, ,], [,, stakeholders], [stakeholders,  ], [ , accommodate], [accommodate, need], [need, help], [help, speed], [speed, process], [process, .], [.,  ]]

>> Trigrams: 
[[data, scientist, require], [scientist, require, domain], [require, domain,  ], [domain,  , knowledge], [ , knowledge, access], [knowledge, access, data], [access, data, ,], [data, ,, stakeholders], [,, stakeholders,  ], [stakeholders,  , accommodate], [ , accommodate, need], [accommodate, need, help], [need, help, speed], [help, speed, process], [speed, process, .], [process, .,  ]]

>> Noun Phrases are: 
[A data scientist, domain, knowledge, access, data, the stakeholders, this need, the process]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

Also, consider the need for AI education and devote time  to considering the right user interface. 


>> Tokens are: 
[,, consider, need, AI, education, devote, time,  , considering, right, user, interface, .] 

>> PoS Tags are: 
[(',', 'PUNCT'), ('consider', 'VERB'), ('need', 'NOUN'), ('AI', 'NOUN'), ('education', 'NOUN'), ('devote', 'VERB'), ('time', 'NOUN'), (' ', 'SPACE'), ('considering', 'VERB'), ('right', 'ADJ'), ('user', 'NOUN'), ('interface', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(',', 'punct'), ('consider', 'ROOT'), ('need', 'dobj'), ('AI', 'compound'), ('education', 'pobj'), ('devote', 'conj'), ('time', 'dobj'), (' ', 'dobj'), ('considering', 'pcomp'), ('right', 'amod'), ('user', 'compound'), ('interface', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[,, consider], [consider, need], [need, AI], [AI, education], [education, devote], [devote, time], [time,  ], [ , considering], [considering, right], [right, user], [user, interface], [interface, .]]

>> Trigrams: 
[[,, consider, need], [consider, need, AI], [need, AI, education], [AI, education, devote], [education, devote, time], [devote, time,  ], [time,  , considering], [ , considering, right], [considering, right, user], [right, user, interface], [user, interface, .]]

>> Noun Phrases are: 
[the need, AI education, time, the right user interface]

>> Named Entities are: 
[('AI', 'ORG')] 

------------------- Sentence 5 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 184 =================================

Recommendation: Use a form of change management to  establish user adoption. IBM’s best practice is to leverage  its digital change approach to involve the users in the  development of the project through studio’s in which we  envision and co-create together. AI is not something  everyone will be able to grasp immediately. Working with  AI should therefore be carefully implemented in the  business environment.  

------------------- Sentence 1 -------------------

Recommendation: Use a form of change management to  establish user adoption. 


>> Tokens are: 
[Recommendation, :, Use, form, change, management,  , establish, user, adoption, .] 

>> PoS Tags are: 
[('Recommendation', 'NOUN'), (':', 'PUNCT'), ('Use', 'VERB'), ('form', 'NOUN'), ('change', 'NOUN'), ('management', 'NOUN'), (' ', 'SPACE'), ('establish', 'VERB'), ('user', 'NOUN'), ('adoption', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Recommendation', 'ROOT'), (':', 'punct'), ('Use', 'acl'), ('form', 'dobj'), ('change', 'compound'), ('management', 'pobj'), (' ', 'pobj'), ('establish', 'advcl'), ('user', 'compound'), ('adoption', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Recommendation, :], [:, Use], [Use, form], [form, change], [change, management], [management,  ], [ , establish], [establish, user], [user, adoption], [adoption, .]]

>> Trigrams: 
[[Recommendation, :, Use], [:, Use, form], [Use, form, change], [form, change, management], [change, management,  ], [management,  , establish], [ , establish, user], [establish, user, adoption], [user, adoption, .]]

>> Noun Phrases are: 
[Recommendation, a form, change management, user adoption]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

IBM’s best practice is to leverage  its digital change approach to involve the users in the  development of the project through studio’s in which we  envision and co-create together. 


>> Tokens are: 
[IBM, best, practice, leverage,  , digital, change, approach, involve, users,  , development, project, studio,  , envision, co, -, create, .] 

>> PoS Tags are: 
[('IBM', 'PROPN'), ('best', 'ADJ'), ('practice', 'NOUN'), ('leverage', 'VERB'), (' ', 'SPACE'), ('digital', 'ADJ'), ('change', 'NOUN'), ('approach', 'NOUN'), ('involve', 'VERB'), ('users', 'NOUN'), (' ', 'SPACE'), ('development', 'NOUN'), ('project', 'NOUN'), ('studio', 'NOUN'), (' ', 'SPACE'), ('envision', 'VERB'), ('co', 'VERB'), ('-', 'VERB'), ('create', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('IBM', 'poss'), ('best', 'amod'), ('practice', 'nsubj'), ('leverage', 'xcomp'), (' ', 'dobj'), ('digital', 'amod'), ('change', 'compound'), ('approach', 'dobj'), ('involve', 'advcl'), ('users', 'dobj'), (' ', 'compound'), ('development', 'pobj'), ('project', 'pobj'), ('studio', 'pobj'), (' ', 'nsubj'), ('envision', 'relcl'), ('co', 'conj'), ('-', 'conj'), ('create', 'ccomp'), ('.', 'punct')]

>> Bigrams: 
[[IBM, best], [best, practice], [practice, leverage], [leverage,  ], [ , digital], [digital, change], [change, approach], [approach, involve], [involve, users], [users,  ], [ , development], [development, project], [project, studio], [studio,  ], [ , envision], [envision, co], [co, -], [-, create], [create, .]]

>> Trigrams: 
[[IBM, best, practice], [best, practice, leverage], [practice, leverage,  ], [leverage,  , digital], [ , digital, change], [digital, change, approach], [change, approach, involve], [approach, involve, users], [involve, users,  ], [users,  , development], [ , development, project], [development, project, studio], [project, studio,  ], [studio,  , envision], [ , envision, co], [envision, co, -], [co, -, create], [-, create, .]]

>> Noun Phrases are: 
[IBM’s best practice, its digital change approach, the users, the  development, the project, studio, we]

>> Named Entities are: 
[('IBM', 'ORG')] 

------------------- Sentence 3 -------------------

AI is not something  everyone will be able to grasp immediately. 


>> Tokens are: 
[AI,  , able, grasp, immediately, .] 

>> PoS Tags are: 
[('AI', 'PROPN'), (' ', 'SPACE'), ('able', 'ADJ'), ('grasp', 'VERB'), ('immediately', 'ADV'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('AI', 'nsubj'), (' ', 'amod'), ('able', 'acomp'), ('grasp', 'xcomp'), ('immediately', 'advmod'), ('.', 'punct')]

>> Bigrams: 
[[AI,  ], [ , able], [able, grasp], [grasp, immediately], [immediately, .]]

>> Trigrams: 
[[AI,  , able], [ , able, grasp], [able, grasp, immediately], [grasp, immediately, .]]

>> Noun Phrases are: 
[AI, something, everyone]

>> Named Entities are: 
[('AI', 'ORG')] 

------------------- Sentence 4 -------------------

Working with  AI should therefore be carefully implemented in the  business environment. 


>> Tokens are: 
[Working,  , AI, carefully, implemented,  , business, environment, .] 

>> PoS Tags are: 
[('Working', 'VERB'), (' ', 'SPACE'), ('AI', 'PROPN'), ('carefully', 'ADV'), ('implemented', 'VERB'), (' ', 'SPACE'), ('business', 'NOUN'), ('environment', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Working', 'nmod'), (' ', 'pobj'), ('AI', 'nsubjpass'), ('carefully', 'advmod'), ('implemented', 'ROOT'), (' ', 'compound'), ('business', 'compound'), ('environment', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Working,  ], [ , AI], [AI, carefully], [carefully, implemented], [implemented,  ], [ , business], [business, environment], [environment, .]]

>> Trigrams: 
[[Working,  , AI], [ , AI, carefully], [AI, carefully, implemented], [carefully, implemented,  ], [implemented,  , business], [ , business, environment], [business, environment, .]]

>> Noun Phrases are: 
[Working with  AI, the  business environment]

>> Named Entities are: 
[('AI', 'ORG')] 

------------------- Sentence 5 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 185 =================================

Expectation management Pitfalls: In many cases we work on, we see that employees  or other stakeholders don’t believe in AI or think it’s a magical  box we take from our office that will quickly solve all the  problems a company. This leads to disappointment when  an AI project is not delivered in a short timeframe or if it  doesn’t deliver the expected results. And this disappointment  can lead to a lack of belief that will eventually diminish  the will to implement AI and experience the benefits of its  long-term possibilities.  

------------------- Sentence 1 -------------------

Expectation management Pitfalls: In many cases we work on, we see that employees  or other stakeholders don’t believe in AI or think it’s a magical  box we take from our office that will quickly solve all the  problems a company. 


>> Tokens are: 
[Expectation, management, Pitfalls, :, cases, work, ,, employees,  , stakeholders, believe, AI, think, magical,  , box, office, quickly, solve,  , problems, company, .] 

>> PoS Tags are: 
[('Expectation', 'NOUN'), ('management', 'NOUN'), ('Pitfalls', 'NOUN'), (':', 'PUNCT'), ('cases', 'NOUN'), ('work', 'VERB'), (',', 'PUNCT'), ('employees', 'NOUN'), (' ', 'SPACE'), ('stakeholders', 'NOUN'), ('believe', 'VERB'), ('AI', 'PROPN'), ('think', 'VERB'), ('magical', 'ADJ'), (' ', 'SPACE'), ('box', 'NOUN'), ('office', 'NOUN'), ('quickly', 'ADV'), ('solve', 'VERB'), (' ', 'SPACE'), ('problems', 'VERB'), ('company', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Expectation', 'compound'), ('management', 'compound'), ('Pitfalls', 'dep'), (':', 'punct'), ('cases', 'pobj'), ('work', 'advcl'), (',', 'punct'), ('employees', 'nsubj'), (' ', 'appos'), ('stakeholders', 'conj'), ('believe', 'ccomp'), ('AI', 'pobj'), ('think', 'conj'), ('magical', 'amod'), (' ', 'compound'), ('box', 'attr'), ('office', 'pobj'), ('quickly', 'advmod'), ('solve', 'relcl'), (' ', 'dobj'), ('problems', 'ccomp'), ('company', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Expectation, management], [management, Pitfalls], [Pitfalls, :], [:, cases], [cases, work], [work, ,], [,, employees], [employees,  ], [ , stakeholders], [stakeholders, believe], [believe, AI], [AI, think], [think, magical], [magical,  ], [ , box], [box, office], [office, quickly], [quickly, solve], [solve,  ], [ , problems], [problems, company], [company, .]]

>> Trigrams: 
[[Expectation, management, Pitfalls], [management, Pitfalls, :], [Pitfalls, :, cases], [:, cases, work], [cases, work, ,], [work, ,, employees], [,, employees,  ], [employees,  , stakeholders], [ , stakeholders, believe], [stakeholders, believe, AI], [believe, AI, think], [AI, think, magical], [think, magical,  ], [magical,  , box], [ , box, office], [box, office, quickly], [office, quickly, solve], [quickly, solve,  ], [solve,  , problems], [ , problems, company], [problems, company, .]]

>> Noun Phrases are: 
[many cases, we, we, employees, other stakeholders, AI, it, a magical  box, we, our office, a company]

>> Named Entities are: 
[('AI', 'ORG')] 

------------------- Sentence 2 -------------------

This leads to disappointment when  an AI project is not delivered in a short timeframe or if it  doesn’t deliver the expected results. 


>> Tokens are: 
[leads, disappointment,  , AI, project, delivered, short, timeframe,  , deliver, expected, results, .] 

>> PoS Tags are: 
[('leads', 'VERB'), ('disappointment', 'NOUN'), (' ', 'SPACE'), ('AI', 'PROPN'), ('project', 'NOUN'), ('delivered', 'VERB'), ('short', 'ADJ'), ('timeframe', 'NOUN'), (' ', 'SPACE'), ('deliver', 'VERB'), ('expected', 'VERB'), ('results', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('leads', 'ROOT'), ('disappointment', 'pobj'), (' ', 'nsubjpass'), ('AI', 'compound'), ('project', 'nsubjpass'), ('delivered', 'advcl'), ('short', 'amod'), ('timeframe', 'pobj'), (' ', 'appos'), ('deliver', 'conj'), ('expected', 'amod'), ('results', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[leads, disappointment], [disappointment,  ], [ , AI], [AI, project], [project, delivered], [delivered, short], [short, timeframe], [timeframe,  ], [ , deliver], [deliver, expected], [expected, results], [results, .]]

>> Trigrams: 
[[leads, disappointment,  ], [disappointment,  , AI], [ , AI, project], [AI, project, delivered], [project, delivered, short], [delivered, short, timeframe], [short, timeframe,  ], [timeframe,  , deliver], [ , deliver, expected], [deliver, expected, results], [expected, results, .]]

>> Noun Phrases are: 
[disappointment, an AI project, a short timeframe, it, the expected results]

>> Named Entities are: 
[('AI', 'ORG')] 

------------------- Sentence 3 -------------------

And this disappointment  can lead to a lack of belief that will eventually diminish  the will to implement AI and experience the benefits of its  long-term possibilities. 


>> Tokens are: 
[disappointment,  , lead, lack, belief, eventually, diminish,  , implement, AI, experience, benefits,  , long, -, term, possibilities, .] 

>> PoS Tags are: 
[('disappointment', 'NOUN'), (' ', 'SPACE'), ('lead', 'VERB'), ('lack', 'NOUN'), ('belief', 'NOUN'), ('eventually', 'ADV'), ('diminish', 'VERB'), (' ', 'SPACE'), ('implement', 'VERB'), ('AI', 'NOUN'), ('experience', 'VERB'), ('benefits', 'NOUN'), (' ', 'SPACE'), ('long', 'ADJ'), ('-', 'PUNCT'), ('term', 'NOUN'), ('possibilities', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('disappointment', 'npadvmod'), (' ', 'nsubj'), ('lead', 'ROOT'), ('lack', 'pobj'), ('belief', 'pobj'), ('eventually', 'advmod'), ('diminish', 'relcl'), (' ', 'nmod'), ('implement', 'advcl'), ('AI', 'dobj'), ('experience', 'conj'), ('benefits', 'dobj'), (' ', 'amod'), ('long', 'amod'), ('-', 'punct'), ('term', 'compound'), ('possibilities', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[disappointment,  ], [ , lead], [lead, lack], [lack, belief], [belief, eventually], [eventually, diminish], [diminish,  ], [ , implement], [implement, AI], [AI, experience], [experience, benefits], [benefits,  ], [ , long], [long, -], [-, term], [term, possibilities], [possibilities, .]]

>> Trigrams: 
[[disappointment,  , lead], [ , lead, lack], [lead, lack, belief], [lack, belief, eventually], [belief, eventually, diminish], [eventually, diminish,  ], [diminish,  , implement], [ , implement, AI], [implement, AI, experience], [AI, experience, benefits], [experience, benefits,  ], [benefits,  , long], [ , long, -], [long, -, term], [-, term, possibilities], [term, possibilities, .]]

>> Noun Phrases are: 
[a lack, belief,  the will, AI, the benefits, its  long-term possibilities]

>> Named Entities are: 
[('AI', 'ORG')] 

------------------- Sentence 4 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 186 =================================

Recommendation: Start with developing a solid strategy  and roadmap. Define where you need to go and what you  need to add to the organization to get there. First steps  often include mundane items such as data governance and  warehousing, but you need to take these steps to properly  implement AI. It’s therefore important to implement proper  change management to guide the company.  

------------------- Sentence 1 -------------------

Recommendation: Start with developing a solid strategy  and roadmap. 


>> Tokens are: 
[Recommendation, :, Start, developing, solid, strategy,  , roadmap, .] 

>> PoS Tags are: 
[('Recommendation', 'NOUN'), (':', 'PUNCT'), ('Start', 'VERB'), ('developing', 'VERB'), ('solid', 'ADJ'), ('strategy', 'NOUN'), (' ', 'SPACE'), ('roadmap', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Recommendation', 'ROOT'), (':', 'punct'), ('Start', 'acl'), ('developing', 'pcomp'), ('solid', 'amod'), ('strategy', 'compound'), (' ', 'dobj'), ('roadmap', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[Recommendation, :], [:, Start], [Start, developing], [developing, solid], [solid, strategy], [strategy,  ], [ , roadmap], [roadmap, .]]

>> Trigrams: 
[[Recommendation, :, Start], [:, Start, developing], [Start, developing, solid], [developing, solid, strategy], [solid, strategy,  ], [strategy,  , roadmap], [ , roadmap, .]]

>> Noun Phrases are: 
[Recommendation, roadmap]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Define where you need to go and what you  need to add to the organization to get there. 


>> Tokens are: 
[Define, need,  , need, add, organization, .] 

>> PoS Tags are: 
[('Define', 'VERB'), ('need', 'VERB'), (' ', 'SPACE'), ('need', 'VERB'), ('add', 'VERB'), ('organization', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Define', 'ROOT'), ('need', 'relcl'), (' ', 'appos'), ('need', 'conj'), ('add', 'xcomp'), ('organization', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Define, need], [need,  ], [ , need], [need, add], [add, organization], [organization, .]]

>> Trigrams: 
[[Define, need,  ], [need,  , need], [ , need, add], [need, add, organization], [add, organization, .]]

>> Noun Phrases are: 
[you, what, you, the organization]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

First steps  often include mundane items such as data governance and  warehousing, but you need to take these steps to properly  implement AI. 


>> Tokens are: 
[steps,  , include, mundane, items, data, governance,  , warehousing, ,, need, steps, properly,  , implement, AI, .] 

>> PoS Tags are: 
[('steps', 'NOUN'), (' ', 'SPACE'), ('include', 'VERB'), ('mundane', 'ADJ'), ('items', 'NOUN'), ('data', 'NOUN'), ('governance', 'NOUN'), (' ', 'SPACE'), ('warehousing', 'NOUN'), (',', 'PUNCT'), ('need', 'VERB'), ('steps', 'NOUN'), ('properly', 'ADV'), (' ', 'SPACE'), ('implement', 'VERB'), ('AI', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('steps', 'ROOT'), (' ', 'nsubj'), ('include', 'relcl'), ('mundane', 'amod'), ('items', 'dobj'), ('data', 'compound'), ('governance', 'pobj'), (' ', 'compound'), ('warehousing', 'conj'), (',', 'punct'), ('need', 'conj'), ('steps', 'dobj'), ('properly', 'advmod'), (' ', 'nsubj'), ('implement', 'advcl'), ('AI', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[steps,  ], [ , include], [include, mundane], [mundane, items], [items, data], [data, governance], [governance,  ], [ , warehousing], [warehousing, ,], [,, need], [need, steps], [steps, properly], [properly,  ], [ , implement], [implement, AI], [AI, .]]

>> Trigrams: 
[[steps,  , include], [ , include, mundane], [include, mundane, items], [mundane, items, data], [items, data, governance], [data, governance,  ], [governance,  , warehousing], [ , warehousing, ,], [warehousing, ,, need], [,, need, steps], [need, steps, properly], [steps, properly,  ], [properly,  , implement], [ , implement, AI], [implement, AI, .]]

>> Noun Phrases are: 
[First steps, mundane items, data governance,  warehousing, you, these steps, AI]

>> Named Entities are: 
[('First', 'ORDINAL')] 

------------------- Sentence 4 -------------------

It’s therefore important to implement proper  change management to guide the company. 


>> Tokens are: 
[important, implement, proper,  , change, management, guide, company, .] 

>> PoS Tags are: 
[('important', 'ADJ'), ('implement', 'VERB'), ('proper', 'ADJ'), (' ', 'SPACE'), ('change', 'NOUN'), ('management', 'NOUN'), ('guide', 'VERB'), ('company', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('important', 'acomp'), ('implement', 'xcomp'), ('proper', 'amod'), (' ', 'compound'), ('change', 'compound'), ('management', 'dobj'), ('guide', 'advcl'), ('company', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[important, implement], [implement, proper], [proper,  ], [ , change], [change, management], [management, guide], [guide, company], [company, .]]

>> Trigrams: 
[[important, implement, proper], [implement, proper,  ], [proper,  , change], [ , change, management], [change, management, guide], [management, guide, company], [guide, company, .]]

>> Noun Phrases are: 
[It, proper  change management, the company]

>> Named Entities are: 
[] 

------------------- Sentence 5 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 187 =================================

12     Beyond the hype: A guide to understanding and successfully implementing artificial intelligence within your business 

------------------- Sentence 1 -------------------

12     Beyond the hype: A guide to understanding and successfully implementing artificial intelligence within your business 


>> Tokens are: 
[12,     , hype, :, guide, understanding, successfully, implementing, artificial, intelligence, business] 

>> PoS Tags are: 
[('12', 'NUM'), ('    ', 'SPACE'), ('hype', 'NOUN'), (':', 'PUNCT'), ('guide', 'NOUN'), ('understanding', 'NOUN'), ('successfully', 'ADV'), ('implementing', 'VERB'), ('artificial', 'ADJ'), ('intelligence', 'NOUN'), ('business', 'NOUN')] 

>> Dependency Tags are: 
[('12', 'nummod'), ('    ', 'ROOT'), ('hype', 'pobj'), (':', 'punct'), ('guide', 'appos'), ('understanding', 'pobj'), ('successfully', 'advmod'), ('implementing', 'acl'), ('artificial', 'amod'), ('intelligence', 'dobj'), ('business', 'pobj')]

>> Bigrams: 
[[12,     ], [    , hype], [hype, :], [:, guide], [guide, understanding], [understanding, successfully], [successfully, implementing], [implementing, artificial], [artificial, intelligence], [intelligence, business]]

>> Trigrams: 
[[12,     , hype], [    , hype, :], [hype, :, guide], [:, guide, understanding], [guide, understanding, successfully], [understanding, successfully, implementing], [successfully, implementing, artificial], [implementing, artificial, intelligence], [artificial, intelligence, business]]

>> Noun Phrases are: 
[the hype, A guide, understanding, artificial intelligence, your business]

>> Named Entities are: 
[('12', 'CARDINAL')] 


================================ Paragraph 188 =================================

Bad data Pitfalls: One problem we often come across is bad-quality  data. This problem derails, limits and complicates many  machine learning and AI projects. Bad or “dirty”data can  mean fields are missing, that there are duplicates in the  data, or that it’s outdated data, contains spelling or  punctuation errors and is generally incorrect. As we are  moving toward more data-driven decision making in  enterprises, it’s absolutely essential to have clean data.  Outcomes derived from bad data will lead to incorrect  decision making.   

------------------- Sentence 1 -------------------

Bad data Pitfalls: One problem we often come across is bad-quality  data. 


>> Tokens are: 
[Bad, data, Pitfalls, :, problem, come, bad, -, quality,  , data, .] 

>> PoS Tags are: 
[('Bad', 'ADJ'), ('data', 'NOUN'), ('Pitfalls', 'NOUN'), (':', 'PUNCT'), ('problem', 'NOUN'), ('come', 'VERB'), ('bad', 'ADJ'), ('-', 'PUNCT'), ('quality', 'NOUN'), (' ', 'SPACE'), ('data', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Bad', 'amod'), ('data', 'compound'), ('Pitfalls', 'dep'), (':', 'punct'), ('problem', 'nsubj'), ('come', 'relcl'), ('bad', 'amod'), ('-', 'punct'), ('quality', 'compound'), (' ', 'compound'), ('data', 'attr'), ('.', 'punct')]

>> Bigrams: 
[[Bad, data], [data, Pitfalls], [Pitfalls, :], [:, problem], [problem, come], [come, bad], [bad, -], [-, quality], [quality,  ], [ , data], [data, .]]

>> Trigrams: 
[[Bad, data, Pitfalls], [data, Pitfalls, :], [Pitfalls, :, problem], [:, problem, come], [problem, come, bad], [come, bad, -], [bad, -, quality], [-, quality,  ], [quality,  , data], [ , data, .]]

>> Noun Phrases are: 
[One problem, we, bad-quality  data]

>> Named Entities are: 
[('One', 'CARDINAL')] 

------------------- Sentence 2 -------------------

This problem derails, limits and complicates many  machine learning and AI projects. 


>> Tokens are: 
[problem, derails, ,, limits, complicates,  , machine, learning, AI, projects, .] 

>> PoS Tags are: 
[('problem', 'NOUN'), ('derails', 'VERB'), (',', 'PUNCT'), ('limits', 'NOUN'), ('complicates', 'NOUN'), (' ', 'SPACE'), ('machine', 'NOUN'), ('learning', 'NOUN'), ('AI', 'PROPN'), ('projects', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('problem', 'nsubj'), ('derails', 'ROOT'), (',', 'punct'), ('limits', 'conj'), ('complicates', 'conj'), (' ', 'nmod'), ('machine', 'compound'), ('learning', 'nmod'), ('AI', 'conj'), ('projects', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[problem, derails], [derails, ,], [,, limits], [limits, complicates], [complicates,  ], [ , machine], [machine, learning], [learning, AI], [AI, projects], [projects, .]]

>> Trigrams: 
[[problem, derails, ,], [derails, ,, limits], [,, limits, complicates], [limits, complicates,  ], [complicates,  , machine], [ , machine, learning], [machine, learning, AI], [learning, AI, projects], [AI, projects, .]]

>> Noun Phrases are: 
[This problem, limits, complicates, many  machine learning and AI projects]

>> Named Entities are: 
[('AI', 'ORG')] 

------------------- Sentence 3 -------------------

Bad or “dirty”data can  mean fields are missing, that there are duplicates in the  data, or that it’s outdated data, contains spelling or  punctuation errors and is generally incorrect. 


>> Tokens are: 
[Bad, “, dirty”data,  , mean, fields, missing, ,, duplicates,  , data, ,, outdated, data, ,, contains, spelling,  , punctuation, errors, generally, incorrect, .] 

>> PoS Tags are: 
[('Bad', 'ADJ'), ('“', 'PUNCT'), ('dirty”data', 'NOUN'), (' ', 'SPACE'), ('mean', 'VERB'), ('fields', 'NOUN'), ('missing', 'VERB'), (',', 'PUNCT'), ('duplicates', 'NOUN'), (' ', 'SPACE'), ('data', 'NOUN'), (',', 'PUNCT'), ('outdated', 'ADJ'), ('data', 'NOUN'), (',', 'PUNCT'), ('contains', 'VERB'), ('spelling', 'NOUN'), (' ', 'SPACE'), ('punctuation', 'NOUN'), ('errors', 'NOUN'), ('generally', 'ADV'), ('incorrect', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Bad', 'amod'), ('“', 'punct'), ('dirty”data', 'nsubj'), (' ', 'nsubj'), ('mean', 'conj'), ('fields', 'nsubj'), ('missing', 'ROOT'), (',', 'punct'), ('duplicates', 'attr'), (' ', 'compound'), ('data', 'pobj'), (',', 'punct'), ('outdated', 'amod'), ('data', 'attr'), (',', 'punct'), ('contains', 'conj'), ('spelling', 'dobj'), (' ', 'conj'), ('punctuation', 'compound'), ('errors', 'dobj'), ('generally', 'advmod'), ('incorrect', 'acomp'), ('.', 'punct')]

>> Bigrams: 
[[Bad, “], [“, dirty”data], [dirty”data,  ], [ , mean], [mean, fields], [fields, missing], [missing, ,], [,, duplicates], [duplicates,  ], [ , data], [data, ,], [,, outdated], [outdated, data], [data, ,], [,, contains], [contains, spelling], [spelling,  ], [ , punctuation], [punctuation, errors], [errors, generally], [generally, incorrect], [incorrect, .]]

>> Trigrams: 
[[Bad, “, dirty”data], [“, dirty”data,  ], [dirty”data,  , mean], [ , mean, fields], [mean, fields, missing], [fields, missing, ,], [missing, ,, duplicates], [,, duplicates,  ], [duplicates,  , data], [ , data, ,], [data, ,, outdated], [,, outdated, data], [outdated, data, ,], [data, ,, contains], [,, contains, spelling], [contains, spelling,  ], [spelling,  , punctuation], [ , punctuation, errors], [punctuation, errors, generally], [errors, generally, incorrect], [generally, incorrect, .]]

>> Noun Phrases are: 
[dirty”data, duplicates, the  data, it, outdated data, spelling, punctuation errors]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

As we are  moving toward more data-driven decision making in  enterprises, it’s absolutely essential to have clean data. 


>> Tokens are: 
[ , moving, data, -, driven, decision, making,  , enterprises, ,, absolutely, essential, clean, data, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('moving', 'VERB'), ('data', 'NOUN'), ('-', 'PUNCT'), ('driven', 'VERB'), ('decision', 'NOUN'), ('making', 'NOUN'), (' ', 'SPACE'), ('enterprises', 'NOUN'), (',', 'PUNCT'), ('absolutely', 'ADV'), ('essential', 'ADJ'), ('clean', 'ADJ'), ('data', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'nsubj'), ('moving', 'advcl'), ('data', 'npadvmod'), ('-', 'punct'), ('driven', 'amod'), ('decision', 'compound'), ('making', 'pobj'), (' ', 'pobj'), ('enterprises', 'pobj'), (',', 'punct'), ('absolutely', 'advmod'), ('essential', 'acomp'), ('clean', 'amod'), ('data', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[ , moving], [moving, data], [data, -], [-, driven], [driven, decision], [decision, making], [making,  ], [ , enterprises], [enterprises, ,], [,, absolutely], [absolutely, essential], [essential, clean], [clean, data], [data, .]]

>> Trigrams: 
[[ , moving, data], [moving, data, -], [data, -, driven], [-, driven, decision], [driven, decision, making], [decision, making,  ], [making,  , enterprises], [ , enterprises, ,], [enterprises, ,, absolutely], [,, absolutely, essential], [absolutely, essential, clean], [essential, clean, data], [clean, data, .]]

>> Noun Phrases are: 
[we, more data-driven decision making, enterprises, it, clean data]

>> Named Entities are: 
[] 

------------------- Sentence 5 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 6 -------------------

Outcomes derived from bad data will lead to incorrect  decision making. 


>> Tokens are: 
[Outcomes, derived, bad, data, lead, incorrect,  , decision, making, .] 

>> PoS Tags are: 
[('Outcomes', 'PROPN'), ('derived', 'VERB'), ('bad', 'ADJ'), ('data', 'NOUN'), ('lead', 'VERB'), ('incorrect', 'VERB'), (' ', 'SPACE'), ('decision', 'NOUN'), ('making', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Outcomes', 'nsubj'), ('derived', 'csubj'), ('bad', 'amod'), ('data', 'pobj'), ('lead', 'ROOT'), ('incorrect', 'xcomp'), (' ', 'dobj'), ('decision', 'compound'), ('making', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Outcomes, derived], [derived, bad], [bad, data], [data, lead], [lead, incorrect], [incorrect,  ], [ , decision], [decision, making], [making, .]]

>> Trigrams: 
[[Outcomes, derived, bad], [derived, bad, data], [bad, data, lead], [data, lead, incorrect], [lead, incorrect,  ], [incorrect,  , decision], [ , decision, making], [decision, making, .]]

>> Noun Phrases are: 
[Outcomes, bad data, decision making]

>> Named Entities are: 
[] 

------------------- Sentence 7 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 189 =================================

Recommendation: To overcome incorrect decision making  based on bad data we suggest the enterprise incorporate  standardization of data, monitoring of data, cleaning of  incoming data and a centralized control of data.  

------------------- Sentence 1 -------------------

Recommendation: To overcome incorrect decision making  based on bad data we suggest the enterprise incorporate  standardization of data, monitoring of data, cleaning of  incoming data and a centralized control of data. 


>> Tokens are: 
[Recommendation, :, overcome, incorrect, decision, making,  , based, bad, data, suggest, enterprise, incorporate,  , standardization, data, ,, monitoring, data, ,, cleaning,  , incoming, data, centralized, control, data, .] 

>> PoS Tags are: 
[('Recommendation', 'NOUN'), (':', 'PUNCT'), ('overcome', 'VERB'), ('incorrect', 'ADJ'), ('decision', 'NOUN'), ('making', 'VERB'), (' ', 'SPACE'), ('based', 'VERB'), ('bad', 'ADJ'), ('data', 'NOUN'), ('suggest', 'VERB'), ('enterprise', 'NOUN'), ('incorporate', 'VERB'), (' ', 'SPACE'), ('standardization', 'NOUN'), ('data', 'NOUN'), (',', 'PUNCT'), ('monitoring', 'NOUN'), ('data', 'NOUN'), (',', 'PUNCT'), ('cleaning', 'NOUN'), (' ', 'SPACE'), ('incoming', 'ADJ'), ('data', 'NOUN'), ('centralized', 'ADJ'), ('control', 'NOUN'), ('data', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Recommendation', 'nsubj'), (':', 'punct'), ('overcome', 'acl'), ('incorrect', 'amod'), ('decision', 'dobj'), ('making', 'acl'), (' ', 'dobj'), ('based', 'prep'), ('bad', 'amod'), ('data', 'pobj'), ('suggest', 'ROOT'), ('enterprise', 'nsubj'), ('incorporate', 'ccomp'), (' ', 'dative'), ('standardization', 'dobj'), ('data', 'pobj'), (',', 'punct'), ('monitoring', 'conj'), ('data', 'pobj'), (',', 'punct'), ('cleaning', 'conj'), (' ', 'pobj'), ('incoming', 'amod'), ('data', 'pobj'), ('centralized', 'amod'), ('control', 'conj'), ('data', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Recommendation, :], [:, overcome], [overcome, incorrect], [incorrect, decision], [decision, making], [making,  ], [ , based], [based, bad], [bad, data], [data, suggest], [suggest, enterprise], [enterprise, incorporate], [incorporate,  ], [ , standardization], [standardization, data], [data, ,], [,, monitoring], [monitoring, data], [data, ,], [,, cleaning], [cleaning,  ], [ , incoming], [incoming, data], [data, centralized], [centralized, control], [control, data], [data, .]]

>> Trigrams: 
[[Recommendation, :, overcome], [:, overcome, incorrect], [overcome, incorrect, decision], [incorrect, decision, making], [decision, making,  ], [making,  , based], [ , based, bad], [based, bad, data], [bad, data, suggest], [data, suggest, enterprise], [suggest, enterprise, incorporate], [enterprise, incorporate,  ], [incorporate,  , standardization], [ , standardization, data], [standardization, data, ,], [data, ,, monitoring], [,, monitoring, data], [monitoring, data, ,], [data, ,, cleaning], [,, cleaning,  ], [cleaning,  , incoming], [ , incoming, data], [incoming, data, centralized], [data, centralized, control], [centralized, control, data], [control, data, .]]

>> Noun Phrases are: 
[Recommendation, incorrect decision, bad data, we, the enterprise, standardization, data, monitoring, data, cleaning, incoming data, a centralized control, data]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 190 =================================

Sponsorship Pitfalls: When implementing an AI strategy, it’s important  that the right people, such as department heads, CxOs or  managers support the project. Implementing AI through the  organization can be a long process, and without support of  the right people there’s a higher probability that the project  will fail. What you might see when this problem occurs is  that your employees might not put enough time into problem  definition and subject knowledge sharing.  

------------------- Sentence 1 -------------------

Sponsorship Pitfalls: When implementing an AI strategy, it’s important  that the right people, such as department heads, CxOs or  managers support the project. 


>> Tokens are: 
[Sponsorship, Pitfalls, :, implementing, AI, strategy, ,, important,  , right, people, ,, department, heads, ,, CxOs,  , managers, support, project, .] 

>> PoS Tags are: 
[('Sponsorship', 'NOUN'), ('Pitfalls', 'NOUN'), (':', 'PUNCT'), ('implementing', 'VERB'), ('AI', 'PROPN'), ('strategy', 'NOUN'), (',', 'PUNCT'), ('important', 'ADJ'), (' ', 'SPACE'), ('right', 'ADJ'), ('people', 'NOUN'), (',', 'PUNCT'), ('department', 'NOUN'), ('heads', 'NOUN'), (',', 'PUNCT'), ('CxOs', 'PROPN'), (' ', 'SPACE'), ('managers', 'NOUN'), ('support', 'VERB'), ('project', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Sponsorship', 'compound'), ('Pitfalls', 'dep'), (':', 'punct'), ('implementing', 'advcl'), ('AI', 'compound'), ('strategy', 'dobj'), (',', 'punct'), ('important', 'acomp'), (' ', 'attr'), ('right', 'amod'), ('people', 'nsubj'), (',', 'punct'), ('department', 'compound'), ('heads', 'pobj'), (',', 'punct'), ('CxOs', 'conj'), (' ', 'compound'), ('managers', 'conj'), ('support', 'ccomp'), ('project', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Sponsorship, Pitfalls], [Pitfalls, :], [:, implementing], [implementing, AI], [AI, strategy], [strategy, ,], [,, important], [important,  ], [ , right], [right, people], [people, ,], [,, department], [department, heads], [heads, ,], [,, CxOs], [CxOs,  ], [ , managers], [managers, support], [support, project], [project, .]]

>> Trigrams: 
[[Sponsorship, Pitfalls, :], [Pitfalls, :, implementing], [:, implementing, AI], [implementing, AI, strategy], [AI, strategy, ,], [strategy, ,, important], [,, important,  ], [important,  , right], [ , right, people], [right, people, ,], [people, ,, department], [,, department, heads], [department, heads, ,], [heads, ,, CxOs], [,, CxOs,  ], [CxOs,  , managers], [ , managers, support], [managers, support, project], [support, project, .]]

>> Noun Phrases are: 
[an AI strategy, it, the right people, department heads, CxOs,  managers, the project]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Implementing AI through the  organization can be a long process, and without support of  the right people there’s a higher probability that the project  will fail. 


>> Tokens are: 
[Implementing, AI,  , organization, long, process, ,, support,  , right, people, higher, probability, project,  , fail, .] 

>> PoS Tags are: 
[('Implementing', 'VERB'), ('AI', 'PROPN'), (' ', 'SPACE'), ('organization', 'NOUN'), ('long', 'ADJ'), ('process', 'NOUN'), (',', 'PUNCT'), ('support', 'NOUN'), (' ', 'SPACE'), ('right', 'ADJ'), ('people', 'NOUN'), ('higher', 'ADJ'), ('probability', 'NOUN'), ('project', 'NOUN'), (' ', 'SPACE'), ('fail', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Implementing', 'csubj'), ('AI', 'dobj'), (' ', 'compound'), ('organization', 'pobj'), ('long', 'amod'), ('process', 'attr'), (',', 'punct'), ('support', 'pobj'), (' ', 'pobj'), ('right', 'amod'), ('people', 'pobj'), ('higher', 'amod'), ('probability', 'attr'), ('project', 'relcl'), (' ', 'nsubj'), ('fail', 'relcl'), ('.', 'punct')]

>> Bigrams: 
[[Implementing, AI], [AI,  ], [ , organization], [organization, long], [long, process], [process, ,], [,, support], [support,  ], [ , right], [right, people], [people, higher], [higher, probability], [probability, project], [project,  ], [ , fail], [fail, .]]

>> Trigrams: 
[[Implementing, AI,  ], [AI,  , organization], [ , organization, long], [organization, long, process], [long, process, ,], [process, ,, support], [,, support,  ], [support,  , right], [ , right, people], [right, people, higher], [people, higher, probability], [higher, probability, project], [probability, project,  ], [project,  , fail], [ , fail, .]]

>> Noun Phrases are: 
[AI, the  organization, a long process, support, the right people, a higher probability]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

What you might see when this problem occurs is  that your employees might not put enough time into problem  definition and subject knowledge sharing. 


>> Tokens are: 
[problem, occurs,  , employees, time, problem,  , definition, subject, knowledge, sharing, .] 

>> PoS Tags are: 
[('problem', 'NOUN'), ('occurs', 'VERB'), (' ', 'SPACE'), ('employees', 'NOUN'), ('time', 'NOUN'), ('problem', 'NOUN'), (' ', 'SPACE'), ('definition', 'NOUN'), ('subject', 'ADJ'), ('knowledge', 'NOUN'), ('sharing', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('problem', 'nsubj'), ('occurs', 'advcl'), (' ', 'attr'), ('employees', 'nsubj'), ('time', 'dobj'), ('problem', 'pobj'), (' ', 'prep'), ('definition', 'dobj'), ('subject', 'amod'), ('knowledge', 'compound'), ('sharing', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[problem, occurs], [occurs,  ], [ , employees], [employees, time], [time, problem], [problem,  ], [ , definition], [definition, subject], [subject, knowledge], [knowledge, sharing], [sharing, .]]

>> Trigrams: 
[[problem, occurs,  ], [occurs,  , employees], [ , employees, time], [employees, time, problem], [time, problem,  ], [problem,  , definition], [ , definition, subject], [definition, subject, knowledge], [subject, knowledge, sharing], [knowledge, sharing, .]]

>> Noun Phrases are: 
[What, you, this problem, your employees, enough time, problem, definition, subject knowledge sharing]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 191 =================================

Recommendation: Align the right people before you start  in a “garage” concept. The key stakeholders should be  identified and should bring input and willingness to the  table. Create buy-in and support with employees, other  stakeholders, management and C-suite. 

------------------- Sentence 1 -------------------

Recommendation: Align the right people before you start  in a “garage” concept. 


>> Tokens are: 
[Recommendation, :, Align, right, people, start,  , “, garage, ”, concept, .] 

>> PoS Tags are: 
[('Recommendation', 'NOUN'), (':', 'PUNCT'), ('Align', 'VERB'), ('right', 'ADJ'), ('people', 'NOUN'), ('start', 'VERB'), (' ', 'SPACE'), ('“', 'PUNCT'), ('garage', 'NOUN'), ('”', 'PUNCT'), ('concept', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Recommendation', 'ROOT'), (':', 'punct'), ('Align', 'appos'), ('right', 'amod'), ('people', 'dobj'), ('start', 'advcl'), (' ', 'dobj'), ('“', 'punct'), ('garage', 'nmod'), ('”', 'punct'), ('concept', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Recommendation, :], [:, Align], [Align, right], [right, people], [people, start], [start,  ], [ , “], [“, garage], [garage, ”], [”, concept], [concept, .]]

>> Trigrams: 
[[Recommendation, :, Align], [:, Align, right], [Align, right, people], [right, people, start], [people, start,  ], [start,  , “], [ , “, garage], [“, garage, ”], [garage, ”, concept], [”, concept, .]]

>> Noun Phrases are: 
[Recommendation, the right people, you, a “garage” concept]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

The key stakeholders should be  identified and should bring input and willingness to the  table. 


>> Tokens are: 
[key, stakeholders,  , identified, bring, input, willingness,  , table, .] 

>> PoS Tags are: 
[('key', 'ADJ'), ('stakeholders', 'NOUN'), (' ', 'SPACE'), ('identified', 'VERB'), ('bring', 'VERB'), ('input', 'NOUN'), ('willingness', 'NOUN'), (' ', 'SPACE'), ('table', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('key', 'amod'), ('stakeholders', 'nsubjpass'), (' ', 'nsubjpass'), ('identified', 'ROOT'), ('bring', 'conj'), ('input', 'dobj'), ('willingness', 'conj'), (' ', 'compound'), ('table', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[key, stakeholders], [stakeholders,  ], [ , identified], [identified, bring], [bring, input], [input, willingness], [willingness,  ], [ , table], [table, .]]

>> Trigrams: 
[[key, stakeholders,  ], [stakeholders,  , identified], [ , identified, bring], [identified, bring, input], [bring, input, willingness], [input, willingness,  ], [willingness,  , table], [ , table, .]]

>> Noun Phrases are: 
[The key stakeholders, input, willingness, the  table]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

Create buy-in and support with employees, other  stakeholders, management and C-suite. 


>> Tokens are: 
[Create, buy, -, support, employees, ,,  , stakeholders, ,, management, C, -, suite, .] 

>> PoS Tags are: 
[('Create', 'VERB'), ('buy', 'VERB'), ('-', 'PUNCT'), ('support', 'VERB'), ('employees', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('stakeholders', 'NOUN'), (',', 'PUNCT'), ('management', 'NOUN'), ('C', 'NOUN'), ('-', 'PUNCT'), ('suite', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Create', 'ROOT'), ('buy', 'compound'), ('-', 'punct'), ('support', 'conj'), ('employees', 'pobj'), (',', 'punct'), (' ', 'compound'), ('stakeholders', 'conj'), (',', 'punct'), ('management', 'conj'), ('C', 'compound'), ('-', 'punct'), ('suite', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[Create, buy], [buy, -], [-, support], [support, employees], [employees, ,], [,,  ], [ , stakeholders], [stakeholders, ,], [,, management], [management, C], [C, -], [-, suite], [suite, .]]

>> Trigrams: 
[[Create, buy, -], [buy, -, support], [-, support, employees], [support, employees, ,], [employees, ,,  ], [,,  , stakeholders], [ , stakeholders, ,], [stakeholders, ,, management], [,, management, C], [management, C, -], [C, -, suite], [-, suite, .]]

>> Noun Phrases are: 
[buy-in, employees, other  stakeholders, management, C-suite]

>> Named Entities are: 
[] 


================================ Paragraph 192 =================================

Lack of capabilities  Pitfalls: Many companies want to implement machine  learning right off the bat. But to implement AI, you need to  look at two things: the first is acquiring or outsourcing your  own data science talent, and the second is looking at your  current IT infrastructure.  

------------------- Sentence 1 -------------------

Lack of capabilities   


>> Tokens are: 
[Lack, capabilities,  ] 

>> PoS Tags are: 
[('Lack', 'NOUN'), ('capabilities', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Lack', 'ROOT'), ('capabilities', 'pobj'), (' ', 'punct')]

>> Bigrams: 
[[Lack, capabilities], [capabilities,  ]]

>> Trigrams: 
[[Lack, capabilities,  ]]

>> Noun Phrases are: 
[Lack, capabilities]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Pitfalls: Many companies want to implement machine  learning right off the bat. 


>> Tokens are: 
[Pitfalls, :, companies, want, implement, machine,  , learning, right, bat, .] 

>> PoS Tags are: 
[('Pitfalls', 'NOUN'), (':', 'PUNCT'), ('companies', 'NOUN'), ('want', 'VERB'), ('implement', 'VERB'), ('machine', 'NOUN'), (' ', 'SPACE'), ('learning', 'VERB'), ('right', 'ADV'), ('bat', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Pitfalls', 'dep'), (':', 'punct'), ('companies', 'nsubj'), ('want', 'ROOT'), ('implement', 'xcomp'), ('machine', 'dobj'), (' ', 'dobj'), ('learning', 'advcl'), ('right', 'advmod'), ('bat', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Pitfalls, :], [:, companies], [companies, want], [want, implement], [implement, machine], [machine,  ], [ , learning], [learning, right], [right, bat], [bat, .]]

>> Trigrams: 
[[Pitfalls, :, companies], [:, companies, want], [companies, want, implement], [want, implement, machine], [implement, machine,  ], [machine,  , learning], [ , learning, right], [learning, right, bat], [right, bat, .]]

>> Noun Phrases are: 
[Many companies, machine, the bat]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

But to implement AI, you need to  look at two things: the first is acquiring or outsourcing your  own data science talent, and the second is looking at your  current IT infrastructure. 


>> Tokens are: 
[implement, AI, ,, need,  , look, things, :, acquiring, outsourcing,  , data, science, talent, ,, second, looking,  , current, infrastructure, .] 

>> PoS Tags are: 
[('implement', 'VERB'), ('AI', 'PROPN'), (',', 'PUNCT'), ('need', 'VERB'), (' ', 'SPACE'), ('look', 'VERB'), ('things', 'NOUN'), (':', 'PUNCT'), ('acquiring', 'VERB'), ('outsourcing', 'VERB'), (' ', 'SPACE'), ('data', 'NOUN'), ('science', 'NOUN'), ('talent', 'NOUN'), (',', 'PUNCT'), ('second', 'NOUN'), ('looking', 'VERB'), (' ', 'SPACE'), ('current', 'ADJ'), ('infrastructure', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('implement', 'advcl'), ('AI', 'dobj'), (',', 'punct'), ('need', 'ccomp'), (' ', 'pobj'), ('look', 'xcomp'), ('things', 'pobj'), (':', 'punct'), ('acquiring', 'ROOT'), ('outsourcing', 'conj'), (' ', 'nmod'), ('data', 'compound'), ('science', 'compound'), ('talent', 'dobj'), (',', 'punct'), ('second', 'nsubj'), ('looking', 'conj'), (' ', 'nmod'), ('current', 'amod'), ('infrastructure', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[implement, AI], [AI, ,], [,, need], [need,  ], [ , look], [look, things], [things, :], [:, acquiring], [acquiring, outsourcing], [outsourcing,  ], [ , data], [data, science], [science, talent], [talent, ,], [,, second], [second, looking], [looking,  ], [ , current], [current, infrastructure], [infrastructure, .]]

>> Trigrams: 
[[implement, AI, ,], [AI, ,, need], [,, need,  ], [need,  , look], [ , look, things], [look, things, :], [things, :, acquiring], [:, acquiring, outsourcing], [acquiring, outsourcing,  ], [outsourcing,  , data], [ , data, science], [data, science, talent], [science, talent, ,], [talent, ,, second], [,, second, looking], [second, looking,  ], [looking,  , current], [ , current, infrastructure], [current, infrastructure, .]]

>> Noun Phrases are: 
[AI, you, two things, your  own data science talent, the second, your  current IT infrastructure]

>> Named Entities are: 
[('AI', 'ORG'), ('two', 'CARDINAL'), ('first', 'ORDINAL'), ('second', 'ORDINAL')] 

------------------- Sentence 4 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 193 =================================

If you choose the in-house route, you’re taking a more  challenging route. This option can be very rewarding but  it’s important to take in account that it will require more  time to set up infrastructures, pipelines and research. If  you decide to take this route, you’ll need to acquire the  following skills in house:   

------------------- Sentence 1 -------------------

If you choose the in-house route, you’re taking a more  challenging route. 


>> Tokens are: 
[choose, -, house, route, ,, taking,  , challenging, route, .] 

>> PoS Tags are: 
[('choose', 'VERB'), ('-', 'PUNCT'), ('house', 'NOUN'), ('route', 'NOUN'), (',', 'PUNCT'), ('taking', 'VERB'), (' ', 'SPACE'), ('challenging', 'VERB'), ('route', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('choose', 'advcl'), ('-', 'punct'), ('house', 'pobj'), ('route', 'dobj'), (',', 'punct'), ('taking', 'ROOT'), (' ', 'nmod'), ('challenging', 'amod'), ('route', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[choose, -], [-, house], [house, route], [route, ,], [,, taking], [taking,  ], [ , challenging], [challenging, route], [route, .]]

>> Trigrams: 
[[choose, -, house], [-, house, route], [house, route, ,], [route, ,, taking], [,, taking,  ], [taking,  , challenging], [ , challenging, route], [challenging, route, .]]

>> Noun Phrases are: 
[you, house, you, a more  challenging route]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

This option can be very rewarding but   


>> Tokens are: 
[option, rewarding,  ] 

>> PoS Tags are: 
[('option', 'NOUN'), ('rewarding', 'ADJ'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('option', 'nsubj'), ('rewarding', 'acomp'), (' ', 'punct')]

>> Bigrams: 
[[option, rewarding], [rewarding,  ]]

>> Trigrams: 
[[option, rewarding,  ]]

>> Noun Phrases are: 
[This option]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

it’s important to take in account that it will require more  time to set up infrastructures, pipelines and research. 


>> Tokens are: 
[important, account, require,  , time, set, infrastructures, ,, pipelines, research, .] 

>> PoS Tags are: 
[('important', 'ADJ'), ('account', 'NOUN'), ('require', 'VERB'), (' ', 'SPACE'), ('time', 'NOUN'), ('set', 'VERB'), ('infrastructures', 'NOUN'), (',', 'PUNCT'), ('pipelines', 'NOUN'), ('research', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('important', 'acomp'), ('account', 'pobj'), ('require', 'ccomp'), (' ', 'nummod'), ('time', 'dobj'), ('set', 'xcomp'), ('infrastructures', 'dobj'), (',', 'punct'), ('pipelines', 'conj'), ('research', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[important, account], [account, require], [require,  ], [ , time], [time, set], [set, infrastructures], [infrastructures, ,], [,, pipelines], [pipelines, research], [research, .]]

>> Trigrams: 
[[important, account, require], [account, require,  ], [require,  , time], [ , time, set], [time, set, infrastructures], [set, infrastructures, ,], [infrastructures, ,, pipelines], [,, pipelines, research], [pipelines, research, .]]

>> Noun Phrases are: 
[it, account, it, more  time, infrastructures, pipelines, research]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

If  you decide to take this route, you’ll need to acquire the  following skills in house: 


>> Tokens are: 
[ , decide, route, ,, need, acquire,  , following, skills, house, :] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('decide', 'VERB'), ('route', 'NOUN'), (',', 'PUNCT'), ('need', 'VERB'), ('acquire', 'VERB'), (' ', 'SPACE'), ('following', 'VERB'), ('skills', 'NOUN'), ('house', 'NOUN'), (':', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'pobj'), ('decide', 'advcl'), ('route', 'dobj'), (',', 'punct'), ('need', 'ROOT'), ('acquire', 'xcomp'), (' ', 'dobj'), ('following', 'acl'), ('skills', 'dobj'), ('house', 'pobj'), (':', 'punct')]

>> Bigrams: 
[[ , decide], [decide, route], [route, ,], [,, need], [need, acquire], [acquire,  ], [ , following], [following, skills], [skills, house], [house, :]]

>> Trigrams: 
[[ , decide, route], [decide, route, ,], [route, ,, need], [,, need, acquire], [need, acquire,  ], [acquire,  , following], [ , following, skills], [following, skills, house], [skills, house, :]]

>> Noun Phrases are: 
[you, this route, you, skills, house]

>> Named Entities are: 
[] 

------------------- Sentence 5 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 194 =================================

 — Researchers to create new solutions to your products  — Project managers to keep the team on track  — Domain experts who have knowledge about your  products, customers and the business environment  surrounding the product 

------------------- Sentence 1 -------------------

 — Researchers to create new solutions to your products  — 


>> Tokens are: 
[ , —, Researchers, create, new, solutions, products,  , —] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('—', 'PUNCT'), ('Researchers', 'NOUN'), ('create', 'VERB'), ('new', 'ADJ'), ('solutions', 'NOUN'), ('products', 'NOUN'), (' ', 'SPACE'), ('—', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'ROOT'), ('—', 'punct'), ('Researchers', 'nsubj'), ('create', 'acl'), ('new', 'amod'), ('solutions', 'dobj'), ('products', 'pobj'), (' ', 'appos'), ('—', 'punct')]

>> Bigrams: 
[[ , —], [—, Researchers], [Researchers, create], [create, new], [new, solutions], [solutions, products], [products,  ], [ , —]]

>> Trigrams: 
[[ , —, Researchers], [—, Researchers, create], [Researchers, create, new], [create, new, solutions], [new, solutions, products], [solutions, products,  ], [products,  , —]]

>> Noun Phrases are: 
[Researchers, new solutions, your products]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Project managers to keep the team on track  — Domain experts who have knowledge about your  products, customers and the business environment  surrounding the product 


>> Tokens are: 
[Project, managers, team, track,  , —, Domain, experts, knowledge,  , products, ,, customers, business, environment,  , surrounding, product] 

>> PoS Tags are: 
[('Project', 'NOUN'), ('managers', 'NOUN'), ('team', 'NOUN'), ('track', 'NOUN'), (' ', 'SPACE'), ('—', 'PUNCT'), ('Domain', 'NOUN'), ('experts', 'NOUN'), ('knowledge', 'NOUN'), (' ', 'SPACE'), ('products', 'NOUN'), (',', 'PUNCT'), ('customers', 'NOUN'), ('business', 'NOUN'), ('environment', 'NOUN'), (' ', 'SPACE'), ('surrounding', 'VERB'), ('product', 'NOUN')] 

>> Dependency Tags are: 
[('Project', 'compound'), ('managers', 'ROOT'), ('team', 'dobj'), ('track', 'compound'), (' ', 'pobj'), ('—', 'punct'), ('Domain', 'compound'), ('experts', 'appos'), ('knowledge', 'dobj'), (' ', 'compound'), ('products', 'pobj'), (',', 'punct'), ('customers', 'conj'), ('business', 'compound'), ('environment', 'conj'), (' ', 'appos'), ('surrounding', 'acl'), ('product', 'dobj')]

>> Bigrams: 
[[Project, managers], [managers, team], [team, track], [track,  ], [ , —], [—, Domain], [Domain, experts], [experts, knowledge], [knowledge,  ], [ , products], [products, ,], [,, customers], [customers, business], [business, environment], [environment,  ], [ , surrounding], [surrounding, product]]

>> Trigrams: 
[[Project, managers, team], [managers, team, track], [team, track,  ], [track,  , —], [ , —, Domain], [—, Domain, experts], [Domain, experts, knowledge], [experts, knowledge,  ], [knowledge,  , products], [ , products, ,], [products, ,, customers], [,, customers, business], [customers, business, environment], [business, environment,  ], [environment,  , surrounding], [ , surrounding, product]]

>> Noun Phrases are: 
[Project managers, the team, Domain experts, who, knowledge, your  products, customers, the business environment, the product]

>> Named Entities are: 
[] 


================================ Paragraph 195 =================================

 — Data engineers and machine learning engineers who  can scale the algorithms  

------------------- Sentence 1 -------------------

 — Data engineers and machine learning engineers who  can scale the algorithms   


>> Tokens are: 
[ , —, Data, engineers, machine, learning, engineers,  , scale, algorithms,  ] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('—', 'PUNCT'), ('Data', 'PROPN'), ('engineers', 'NOUN'), ('machine', 'NOUN'), ('learning', 'NOUN'), ('engineers', 'NOUN'), (' ', 'SPACE'), ('scale', 'VERB'), ('algorithms', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT'), ('—', 'punct'), ('Data', 'compound'), ('engineers', 'appos'), ('machine', 'compound'), ('learning', 'compound'), ('engineers', 'conj'), (' ', 'nsubj'), ('scale', 'relcl'), ('algorithms', 'dobj'), (' ', 'punct')]

>> Bigrams: 
[[ , —], [—, Data], [Data, engineers], [engineers, machine], [machine, learning], [learning, engineers], [engineers,  ], [ , scale], [scale, algorithms], [algorithms,  ]]

>> Trigrams: 
[[ , —, Data], [—, Data, engineers], [Data, engineers, machine], [engineers, machine, learning], [machine, learning, engineers], [learning, engineers,  ], [engineers,  , scale], [ , scale, algorithms], [scale, algorithms,  ]]

>> Noun Phrases are: 
[Data engineers, machine learning engineers, who, the algorithms]

>> Named Entities are: 
[] 


================================ Paragraph 196 =================================

 — Data analysts who can process the outcome  — Statisticians to help ensure quality results  — Software engineers to turn all you’ve created into  something that can be used by the masses—be it your  customers or your employees  

------------------- Sentence 1 -------------------

 — Data analysts who can process the outcome  — Statisticians to help ensure quality results  — Software engineers to turn all you’ve created into  something that can be used by the masses—be it your  customers or your employees   


>> Tokens are: 
[ , —, Data, analysts, process, outcome,  , —, Statisticians, help, ensure, quality, results,  , —, Software, engineers, turn, created,  , masses, —,  , customers, employees,  ] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('—', 'PUNCT'), ('Data', 'NOUN'), ('analysts', 'NOUN'), ('process', 'VERB'), ('outcome', 'NOUN'), (' ', 'SPACE'), ('—', 'PUNCT'), ('Statisticians', 'PROPN'), ('help', 'VERB'), ('ensure', 'VERB'), ('quality', 'NOUN'), ('results', 'NOUN'), (' ', 'SPACE'), ('—', 'PUNCT'), ('Software', 'NOUN'), ('engineers', 'NOUN'), ('turn', 'VERB'), ('created', 'VERB'), (' ', 'SPACE'), ('masses', 'NOUN'), ('—', 'PUNCT'), (' ', 'SPACE'), ('customers', 'NOUN'), ('employees', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'nsubj'), ('—', 'punct'), ('Data', 'compound'), ('analysts', 'appos'), ('process', 'relcl'), ('outcome', 'dobj'), (' ', 'appos'), ('—', 'punct'), ('Statisticians', 'appos'), ('help', 'xcomp'), ('ensure', 'xcomp'), ('quality', 'compound'), ('results', 'dobj'), (' ', 'appos'), ('—', 'punct'), ('Software', 'compound'), ('engineers', 'appos'), ('turn', 'relcl'), ('created', 'relcl'), (' ', 'pobj'), ('masses', 'pobj'), ('—', 'punct'), (' ', 'compound'), ('customers', 'attr'), ('employees', 'conj'), (' ', 'punct')]

>> Bigrams: 
[[ , —], [—, Data], [Data, analysts], [analysts, process], [process, outcome], [outcome,  ], [ , —], [—, Statisticians], [Statisticians, help], [help, ensure], [ensure, quality], [quality, results], [results,  ], [ , —], [—, Software], [Software, engineers], [engineers, turn], [turn, created], [created,  ], [ , masses], [masses, —], [—,  ], [ , customers], [customers, employees], [employees,  ]]

>> Trigrams: 
[[ , —, Data], [—, Data, analysts], [Data, analysts, process], [analysts, process, outcome], [process, outcome,  ], [outcome,  , —], [ , —, Statisticians], [—, Statisticians, help], [Statisticians, help, ensure], [help, ensure, quality], [ensure, quality, results], [quality, results,  ], [results,  , —], [ , —, Software], [—, Software, engineers], [Software, engineers, turn], [engineers, turn, created], [turn, created,  ], [created,  , masses], [ , masses, —], [masses, —,  ], [—,  , customers], [ , customers, employees], [customers, employees,  ]]

>> Noun Phrases are: 
[Data analysts, who, the outcome, Statisticians, quality results, Software engineers, you, something, the masses, it, your  customers, your employees]

>> Named Entities are: 
[('Statisticians', 'NORP')] 


================================ Paragraph 197 =================================

While these roles don’t all need to be filled by individual  employees, it’s essential to have all these skills in house.  

------------------- Sentence 1 -------------------

While these roles don’t all need to be filled by individual  employees, it’s essential to have all these skills in house. 


>> Tokens are: 
[roles, need, filled, individual,  , employees, ,, essential, skills, house, .] 

>> PoS Tags are: 
[('roles', 'NOUN'), ('need', 'VERB'), ('filled', 'VERB'), ('individual', 'ADJ'), (' ', 'SPACE'), ('employees', 'NOUN'), (',', 'PUNCT'), ('essential', 'ADJ'), ('skills', 'NOUN'), ('house', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('roles', 'nsubj'), ('need', 'advcl'), ('filled', 'xcomp'), ('individual', 'amod'), (' ', 'compound'), ('employees', 'pobj'), (',', 'punct'), ('essential', 'acomp'), ('skills', 'dobj'), ('house', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[roles, need], [need, filled], [filled, individual], [individual,  ], [ , employees], [employees, ,], [,, essential], [essential, skills], [skills, house], [house, .]]

>> Trigrams: 
[[roles, need, filled], [need, filled, individual], [filled, individual,  ], [individual,  , employees], [ , employees, ,], [employees, ,, essential], [,, essential, skills], [essential, skills, house], [skills, house, .]]

>> Noun Phrases are: 
[these roles, individual  employees, it, all these skills, house]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 198 =================================

The second option is easier and quicker to implement. In  this case you’d make use of the capabilities of an external  party such as through the IBM Garage offering, which can  give you the ability to use these capabilities without having  to set up a complete internal department. 

------------------- Sentence 1 -------------------

The second option is easier and quicker to implement. 


>> Tokens are: 
[second, option, easier, quicker, implement, .] 

>> PoS Tags are: 
[('second', 'ADJ'), ('option', 'NOUN'), ('easier', 'ADJ'), ('quicker', 'ADJ'), ('implement', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('second', 'amod'), ('option', 'nsubj'), ('easier', 'acomp'), ('quicker', 'conj'), ('implement', 'xcomp'), ('.', 'punct')]

>> Bigrams: 
[[second, option], [option, easier], [easier, quicker], [quicker, implement], [implement, .]]

>> Trigrams: 
[[second, option, easier], [option, easier, quicker], [easier, quicker, implement], [quicker, implement, .]]

>> Noun Phrases are: 
[The second option]

>> Named Entities are: 
[('second', 'ORDINAL')] 

------------------- Sentence 2 -------------------

In  this case you’d make use of the capabilities of an external  party such as through the IBM Garage offering, which can  give you the ability to use these capabilities without having  to set up a complete internal department. 


>> Tokens are: 
[ , case, use, capabilities, external,  , party, IBM, Garage, offering, ,,  , ability, use, capabilities, having,  , set, complete, internal, department, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('case', 'NOUN'), ('use', 'NOUN'), ('capabilities', 'NOUN'), ('external', 'ADJ'), (' ', 'SPACE'), ('party', 'NOUN'), ('IBM', 'PROPN'), ('Garage', 'PROPN'), ('offering', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('ability', 'NOUN'), ('use', 'VERB'), ('capabilities', 'NOUN'), ('having', 'VERB'), (' ', 'SPACE'), ('set', 'VERB'), ('complete', 'ADJ'), ('internal', 'ADJ'), ('department', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'pobj'), ('case', 'pobj'), ('use', 'dobj'), ('capabilities', 'pobj'), ('external', 'amod'), (' ', 'compound'), ('party', 'pobj'), ('IBM', 'compound'), ('Garage', 'compound'), ('offering', 'pobj'), (',', 'punct'), (' ', 'nsubj'), ('ability', 'dobj'), ('use', 'acl'), ('capabilities', 'dobj'), ('having', 'pcomp'), (' ', 'nsubj'), ('set', 'ccomp'), ('complete', 'amod'), ('internal', 'amod'), ('department', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[ , case], [case, use], [use, capabilities], [capabilities, external], [external,  ], [ , party], [party, IBM], [IBM, Garage], [Garage, offering], [offering, ,], [,,  ], [ , ability], [ability, use], [use, capabilities], [capabilities, having], [having,  ], [ , set], [set, complete], [complete, internal], [internal, department], [department, .]]

>> Trigrams: 
[[ , case, use], [case, use, capabilities], [use, capabilities, external], [capabilities, external,  ], [external,  , party], [ , party, IBM], [party, IBM, Garage], [IBM, Garage, offering], [Garage, offering, ,], [offering, ,,  ], [,,  , ability], [ , ability, use], [ability, use, capabilities], [use, capabilities, having], [capabilities, having,  ], [having,  , set], [ , set, complete], [set, complete, internal], [complete, internal, department], [internal, department, .]]

>> Noun Phrases are: 
[this case, you, use, the capabilities, an external  party, the IBM Garage offering, you, the ability, these capabilities, a complete internal department]

>> Named Entities are: 
[('IBM', 'ORG')] 


================================ Paragraph 199 =================================

IBM Services     13 

------------------- Sentence 1 -------------------

IBM Services     13 


>> Tokens are: 
[IBM, Services,     , 13] 

>> PoS Tags are: 
[('IBM', 'PROPN'), ('Services', 'PROPN'), ('    ', 'SPACE'), ('13', 'NUM')] 

>> Dependency Tags are: 
[('IBM', 'compound'), ('Services', 'ROOT'), ('    ', 'appos'), ('13', 'nummod')]

>> Bigrams: 
[[IBM, Services], [Services,     ], [    , 13]]

>> Trigrams: 
[[IBM, Services,     ], [Services,     , 13]]

>> Noun Phrases are: 
[IBM Services]

>> Named Entities are: 
[('IBM Services', 'ORG')] 


================================ Paragraph 200 =================================

Recommendation: Before starting an AI project, you should  evaluate the capabilities you currently have inhouse, and  then define the cost you’ll occur acquiring the capabilities  needed to close any gaps. Then you can define whether you  want to hire these capabilities internally or use an external  experienced resource to access the required capabilities. 

------------------- Sentence 1 -------------------

Recommendation: Before starting an AI project, you should  evaluate the capabilities you currently have inhouse, and  then define the cost you’ll occur acquiring the capabilities  needed to close any gaps. 


>> Tokens are: 
[Recommendation, :, starting, AI, project, ,,  , evaluate, capabilities, currently, inhouse, ,,  , define, cost, occur, acquiring, capabilities,  , needed, close, gaps, .] 

>> PoS Tags are: 
[('Recommendation', 'NOUN'), (':', 'PUNCT'), ('starting', 'VERB'), ('AI', 'PROPN'), ('project', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('evaluate', 'VERB'), ('capabilities', 'NOUN'), ('currently', 'ADV'), ('inhouse', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('define', 'VERB'), ('cost', 'NOUN'), ('occur', 'VERB'), ('acquiring', 'VERB'), ('capabilities', 'NOUN'), (' ', 'SPACE'), ('needed', 'VERB'), ('close', 'VERB'), ('gaps', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Recommendation', 'ROOT'), (':', 'punct'), ('starting', 'pcomp'), ('AI', 'compound'), ('project', 'dobj'), (',', 'punct'), (' ', 'nsubj'), ('evaluate', 'acl'), ('capabilities', 'dobj'), ('currently', 'advmod'), ('inhouse', 'dobj'), (',', 'punct'), (' ', 'nsubj'), ('define', 'conj'), ('cost', 'dobj'), ('occur', 'relcl'), ('acquiring', 'xcomp'), ('capabilities', 'dobj'), (' ', 'nsubj'), ('needed', 'relcl'), ('close', 'advcl'), ('gaps', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Recommendation, :], [:, starting], [starting, AI], [AI, project], [project, ,], [,,  ], [ , evaluate], [evaluate, capabilities], [capabilities, currently], [currently, inhouse], [inhouse, ,], [,,  ], [ , define], [define, cost], [cost, occur], [occur, acquiring], [acquiring, capabilities], [capabilities,  ], [ , needed], [needed, close], [close, gaps], [gaps, .]]

>> Trigrams: 
[[Recommendation, :, starting], [:, starting, AI], [starting, AI, project], [AI, project, ,], [project, ,,  ], [,,  , evaluate], [ , evaluate, capabilities], [evaluate, capabilities, currently], [capabilities, currently, inhouse], [currently, inhouse, ,], [inhouse, ,,  ], [,,  , define], [ , define, cost], [define, cost, occur], [cost, occur, acquiring], [occur, acquiring, capabilities], [acquiring, capabilities,  ], [capabilities,  , needed], [ , needed, close], [needed, close, gaps], [close, gaps, .]]

>> Noun Phrases are: 
[Recommendation, an AI project, you, the capabilities, you, inhouse, the cost, you, the capabilities, any gaps]

>> Named Entities are: 
[('AI', 'ORG')] 

------------------- Sentence 2 -------------------

Then you can define whether you  want to hire these capabilities internally or use an external  experienced resource to access the required capabilities. 


>> Tokens are: 
[define,  , want, hire, capabilities, internally, use, external,  , experienced, resource, access, required, capabilities, .] 

>> PoS Tags are: 
[('define', 'VERB'), (' ', 'SPACE'), ('want', 'VERB'), ('hire', 'VERB'), ('capabilities', 'NOUN'), ('internally', 'ADV'), ('use', 'VERB'), ('external', 'ADJ'), (' ', 'SPACE'), ('experienced', 'ADJ'), ('resource', 'NOUN'), ('access', 'VERB'), ('required', 'VERB'), ('capabilities', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('define', 'ROOT'), (' ', 'nsubj'), ('want', 'ccomp'), ('hire', 'xcomp'), ('capabilities', 'dobj'), ('internally', 'advmod'), ('use', 'conj'), ('external', 'amod'), (' ', 'nsubj'), ('experienced', 'amod'), ('resource', 'dobj'), ('access', 'xcomp'), ('required', 'amod'), ('capabilities', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[define,  ], [ , want], [want, hire], [hire, capabilities], [capabilities, internally], [internally, use], [use, external], [external,  ], [ , experienced], [experienced, resource], [resource, access], [access, required], [required, capabilities], [capabilities, .]]

>> Trigrams: 
[[define,  , want], [ , want, hire], [want, hire, capabilities], [hire, capabilities, internally], [capabilities, internally, use], [internally, use, external], [use, external,  ], [external,  , experienced], [ , experienced, resource], [experienced, resource, access], [resource, access, required], [access, required, capabilities], [required, capabilities, .]]

>> Noun Phrases are: 
[you, you, these capabilities, an external  experienced resource, the required capabilities]

>> Named Entities are: 
[] 


================================ Paragraph 201 =================================

Scalability  Pitfalls: To properly scale the correct architecture,  integration and employees that know how to use them  need be in place. Many data scientists believe that the  research and development (R&D) of a data science project  is similar to a scaled IT implementation, yet the two are  very different. Also, because there is increasing enterprise  demand for AI, organizations want to analyze large amounts  of data. This can require quite a bit of time to train an  algorithm—days or even weeks depending on the amount  of data involved. We still encounter data scientists trying  to perform this function on their laptops.9  

------------------- Sentence 1 -------------------

Scalability   


>> Tokens are: 
[Scalability,  ] 

>> PoS Tags are: 
[('Scalability', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Scalability', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[Scalability,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Scalability]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Pitfalls: To properly scale the correct architecture,  integration and employees that know how to use them  need be in place. 


>> Tokens are: 
[Pitfalls, :, properly, scale, correct, architecture, ,,  , integration, employees, know, use,  , need, place, .] 

>> PoS Tags are: 
[('Pitfalls', 'NOUN'), (':', 'PUNCT'), ('properly', 'ADV'), ('scale', 'VERB'), ('correct', 'ADJ'), ('architecture', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('integration', 'NOUN'), ('employees', 'NOUN'), ('know', 'VERB'), ('use', 'VERB'), (' ', 'SPACE'), ('need', 'AUX'), ('place', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Pitfalls', 'dep'), (':', 'punct'), ('properly', 'advmod'), ('scale', 'ROOT'), ('correct', 'amod'), ('architecture', 'dobj'), (',', 'punct'), (' ', 'compound'), ('integration', 'conj'), ('employees', 'conj'), ('know', 'relcl'), ('use', 'xcomp'), (' ', 'dobj'), ('need', 'aux'), ('place', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Pitfalls, :], [:, properly], [properly, scale], [scale, correct], [correct, architecture], [architecture, ,], [,,  ], [ , integration], [integration, employees], [employees, know], [know, use], [use,  ], [ , need], [need, place], [place, .]]

>> Trigrams: 
[[Pitfalls, :, properly], [:, properly, scale], [properly, scale, correct], [scale, correct, architecture], [correct, architecture, ,], [architecture, ,,  ], [,,  , integration], [ , integration, employees], [integration, employees, know], [employees, know, use], [know, use,  ], [use,  , need], [ , need, place], [need, place, .]]

>> Noun Phrases are: 
[the correct architecture,  integration, employees, them, place]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

Many data scientists believe that the  research and development (R&D) of a data science project  is similar to a scaled IT implementation, yet the two are  very different. 


>> Tokens are: 
[data, scientists, believe,  , research, development, (, R&D, ), data, science, project,  , similar, scaled, implementation, ,,  , different, .] 

>> PoS Tags are: 
[('data', 'NOUN'), ('scientists', 'NOUN'), ('believe', 'VERB'), (' ', 'SPACE'), ('research', 'NOUN'), ('development', 'NOUN'), ('(', 'PUNCT'), ('R&D', 'PROPN'), (')', 'PUNCT'), ('data', 'NOUN'), ('science', 'NOUN'), ('project', 'NOUN'), (' ', 'SPACE'), ('similar', 'ADJ'), ('scaled', 'VERB'), ('implementation', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('different', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('data', 'compound'), ('scientists', 'nsubj'), ('believe', 'ROOT'), (' ', 'nmod'), ('research', 'nsubj'), ('development', 'conj'), ('(', 'punct'), ('R&D', 'appos'), (')', 'punct'), ('data', 'compound'), ('science', 'compound'), ('project', 'pobj'), (' ', 'appos'), ('similar', 'acomp'), ('scaled', 'amod'), ('implementation', 'pobj'), (',', 'punct'), (' ', 'attr'), ('different', 'acomp'), ('.', 'punct')]

>> Bigrams: 
[[data, scientists], [scientists, believe], [believe,  ], [ , research], [research, development], [development, (], [(, R&D], [R&D, )], [), data], [data, science], [science, project], [project,  ], [ , similar], [similar, scaled], [scaled, implementation], [implementation, ,], [,,  ], [ , different], [different, .]]

>> Trigrams: 
[[data, scientists, believe], [scientists, believe,  ], [believe,  , research], [ , research, development], [research, development, (], [development, (, R&D], [(, R&D, )], [R&D, ), data], [), data, science], [data, science, project], [science, project,  ], [project,  , similar], [ , similar, scaled], [similar, scaled, implementation], [scaled, implementation, ,], [implementation, ,,  ], [,,  , different], [ , different, .]]

>> Noun Phrases are: 
[Many data scientists, the  research, development, (R&D, a data science project, a scaled IT implementation]

>> Named Entities are: 
[('two', 'CARDINAL')] 

------------------- Sentence 4 -------------------

Also, because there is increasing enterprise  demand for AI, organizations want to analyze large amounts  of data. 


>> Tokens are: 
[,, increasing, enterprise,  , demand, AI, ,, organizations, want, analyze, large, amounts,  , data, .] 

>> PoS Tags are: 
[(',', 'PUNCT'), ('increasing', 'VERB'), ('enterprise', 'NOUN'), (' ', 'SPACE'), ('demand', 'NOUN'), ('AI', 'PROPN'), (',', 'PUNCT'), ('organizations', 'NOUN'), ('want', 'VERB'), ('analyze', 'VERB'), ('large', 'ADJ'), ('amounts', 'NOUN'), (' ', 'SPACE'), ('data', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(',', 'punct'), ('increasing', 'advcl'), ('enterprise', 'dobj'), (' ', 'compound'), ('demand', 'dobj'), ('AI', 'pobj'), (',', 'punct'), ('organizations', 'nsubj'), ('want', 'ROOT'), ('analyze', 'xcomp'), ('large', 'amod'), ('amounts', 'dobj'), (' ', 'appos'), ('data', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[,, increasing], [increasing, enterprise], [enterprise,  ], [ , demand], [demand, AI], [AI, ,], [,, organizations], [organizations, want], [want, analyze], [analyze, large], [large, amounts], [amounts,  ], [ , data], [data, .]]

>> Trigrams: 
[[,, increasing, enterprise], [increasing, enterprise,  ], [enterprise,  , demand], [ , demand, AI], [demand, AI, ,], [AI, ,, organizations], [,, organizations, want], [organizations, want, analyze], [want, analyze, large], [analyze, large, amounts], [large, amounts,  ], [amounts,  , data], [ , data, .]]

>> Noun Phrases are: 
[enterprise,  demand, AI, organizations, large amounts, data]

>> Named Entities are: 
[('AI', 'ORG')] 

------------------- Sentence 5 -------------------

This can require quite a bit of time to train an  algorithm—days or even weeks depending on the amount  of data involved. 


>> Tokens are: 
[require, bit, time, train,  , algorithm, —, days, weeks, depending,  , data, involved, .] 

>> PoS Tags are: 
[('require', 'VERB'), ('bit', 'NOUN'), ('time', 'NOUN'), ('train', 'VERB'), (' ', 'SPACE'), ('algorithm', 'NOUN'), ('—', 'PUNCT'), ('days', 'NOUN'), ('weeks', 'NOUN'), ('depending', 'VERB'), (' ', 'SPACE'), ('data', 'NOUN'), ('involved', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('require', 'ROOT'), ('bit', 'dobj'), ('time', 'pobj'), ('train', 'xcomp'), (' ', 'dobj'), ('algorithm', 'advmod'), ('—', 'punct'), ('days', 'appos'), ('weeks', 'conj'), ('depending', 'prep'), (' ', 'nsubj'), ('data', 'pobj'), ('involved', 'relcl'), ('.', 'punct')]

>> Bigrams: 
[[require, bit], [bit, time], [time, train], [train,  ], [ , algorithm], [algorithm, —], [—, days], [days, weeks], [weeks, depending], [depending,  ], [ , data], [data, involved], [involved, .]]

>> Trigrams: 
[[require, bit, time], [bit, time, train], [time, train,  ], [train,  , algorithm], [ , algorithm, —], [algorithm, —, days], [—, days, weeks], [days, weeks, depending], [weeks, depending,  ], [depending,  , data], [ , data, involved], [data, involved, .]]

>> Noun Phrases are: 
[quite a bit, time, days, even weeks, the amount, data]

>> Named Entities are: 
[('days', 'DATE'), ('weeks', 'DATE')] 

------------------- Sentence 6 -------------------

We still encounter data scientists trying  to perform this function on their laptops.9   


>> Tokens are: 
[encounter, data, scientists, trying,  , perform, function, laptops.9,  ] 

>> PoS Tags are: 
[('encounter', 'VERB'), ('data', 'NOUN'), ('scientists', 'NOUN'), ('trying', 'VERB'), (' ', 'SPACE'), ('perform', 'VERB'), ('function', 'NOUN'), ('laptops.9', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('encounter', 'ROOT'), ('data', 'compound'), ('scientists', 'dobj'), ('trying', 'acl'), (' ', 'dobj'), ('perform', 'xcomp'), ('function', 'dobj'), ('laptops.9', 'pobj'), (' ', 'punct')]

>> Bigrams: 
[[encounter, data], [data, scientists], [scientists, trying], [trying,  ], [ , perform], [perform, function], [function, laptops.9], [laptops.9,  ]]

>> Trigrams: 
[[encounter, data, scientists], [data, scientists, trying], [scientists, trying,  ], [trying,  , perform], [ , perform, function], [perform, function, laptops.9], [function, laptops.9,  ]]

>> Noun Phrases are: 
[We, data scientists, this function, their laptops.9]

>> Named Entities are: 
[] 


================================ Paragraph 202 =================================

Recommendation: Develop a plan to set up the correct   AI architecture, a platform to deploy to, a data integration  strategy and properly trained data scientists. 

------------------- Sentence 1 -------------------

Recommendation: Develop a plan to set up the correct   AI architecture, a platform to deploy to, a data integration  strategy and properly trained data scientists. 


>> Tokens are: 
[Recommendation, :, Develop, plan, set, correct,   , AI, architecture, ,, platform, deploy, ,, data, integration,  , strategy, properly, trained, data, scientists, .] 

>> PoS Tags are: 
[('Recommendation', 'NOUN'), (':', 'PUNCT'), ('Develop', 'VERB'), ('plan', 'NOUN'), ('set', 'VERB'), ('correct', 'ADJ'), ('  ', 'SPACE'), ('AI', 'PROPN'), ('architecture', 'NOUN'), (',', 'PUNCT'), ('platform', 'NOUN'), ('deploy', 'VERB'), (',', 'PUNCT'), ('data', 'NOUN'), ('integration', 'NOUN'), (' ', 'SPACE'), ('strategy', 'NOUN'), ('properly', 'ADV'), ('trained', 'VERB'), ('data', 'NOUN'), ('scientists', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Recommendation', 'ROOT'), (':', 'punct'), ('Develop', 'acl'), ('plan', 'dobj'), ('set', 'acl'), ('correct', 'amod'), ('  ', 'nummod'), ('AI', 'compound'), ('architecture', 'dobj'), (',', 'punct'), ('platform', 'dobj'), ('deploy', 'relcl'), (',', 'punct'), ('data', 'compound'), ('integration', 'nmod'), (' ', 'prep'), ('strategy', 'conj'), ('properly', 'advmod'), ('trained', 'amod'), ('data', 'compound'), ('scientists', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[Recommendation, :], [:, Develop], [Develop, plan], [plan, set], [set, correct], [correct,   ], [  , AI], [AI, architecture], [architecture, ,], [,, platform], [platform, deploy], [deploy, ,], [,, data], [data, integration], [integration,  ], [ , strategy], [strategy, properly], [properly, trained], [trained, data], [data, scientists], [scientists, .]]

>> Trigrams: 
[[Recommendation, :, Develop], [:, Develop, plan], [Develop, plan, set], [plan, set, correct], [set, correct,   ], [correct,   , AI], [  , AI, architecture], [AI, architecture, ,], [architecture, ,, platform], [,, platform, deploy], [platform, deploy, ,], [deploy, ,, data], [,, data, integration], [data, integration,  ], [integration,  , strategy], [ , strategy, properly], [strategy, properly, trained], [properly, trained, data], [trained, data, scientists], [data, scientists, .]]

>> Noun Phrases are: 
[Recommendation, a plan, the correct   AI architecture, a platform, a data integration  strategy, properly trained data scientists]

>> Named Entities are: 
[] 


================================ Paragraph 203 =================================

Not enough (available) data  Pitfalls: Data availability depends on the company and on  how it stores data. Some organizations have the data but  don’t have it readily available. Large corporations are  challenged to locate and keep track of the right data.  Smaller companies may be challenged by the amount of  data they produce.  

------------------- Sentence 1 -------------------

Not enough (available) data   


>> Tokens are: 
[(, available, ), data,  ] 

>> PoS Tags are: 
[('(', 'PUNCT'), ('available', 'ADJ'), (')', 'PUNCT'), ('data', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('(', 'punct'), ('available', 'amod'), (')', 'punct'), ('data', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[(, available], [available, )], [), data], [data,  ]]

>> Trigrams: 
[[(, available, )], [available, ), data], [), data,  ]]

>> Noun Phrases are: 
[Not enough (available) data]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Pitfalls: Data availability depends on the company and on  how it stores data. 


>> Tokens are: 
[Pitfalls, :, Data, availability, depends, company,  , stores, data, .] 

>> PoS Tags are: 
[('Pitfalls', 'NOUN'), (':', 'PUNCT'), ('Data', 'PROPN'), ('availability', 'NOUN'), ('depends', 'VERB'), ('company', 'NOUN'), (' ', 'SPACE'), ('stores', 'VERB'), ('data', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Pitfalls', 'dep'), (':', 'punct'), ('Data', 'compound'), ('availability', 'nsubj'), ('depends', 'ROOT'), ('company', 'pobj'), (' ', 'pobj'), ('stores', 'ccomp'), ('data', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Pitfalls, :], [:, Data], [Data, availability], [availability, depends], [depends, company], [company,  ], [ , stores], [stores, data], [data, .]]

>> Trigrams: 
[[Pitfalls, :, Data], [:, Data, availability], [Data, availability, depends], [availability, depends, company], [depends, company,  ], [company,  , stores], [ , stores, data], [stores, data, .]]

>> Noun Phrases are: 
[Data availability, the company, it, data]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

Some organizations have the data but  don’t have it readily available. 


>> Tokens are: 
[organizations, data,  , readily, available, .] 

>> PoS Tags are: 
[('organizations', 'NOUN'), ('data', 'NOUN'), (' ', 'SPACE'), ('readily', 'ADV'), ('available', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('organizations', 'nsubj'), ('data', 'dobj'), (' ', 'nsubj'), ('readily', 'advmod'), ('available', 'ccomp'), ('.', 'punct')]

>> Bigrams: 
[[organizations, data], [data,  ], [ , readily], [readily, available], [available, .]]

>> Trigrams: 
[[organizations, data,  ], [data,  , readily], [ , readily, available], [readily, available, .]]

>> Noun Phrases are: 
[Some organizations, the data, it]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

Large corporations are  challenged to locate and keep track of the right data. 


>> Tokens are: 
[Large, corporations,  , challenged, locate, track, right, data, .] 

>> PoS Tags are: 
[('Large', 'ADJ'), ('corporations', 'NOUN'), (' ', 'SPACE'), ('challenged', 'VERB'), ('locate', 'VERB'), ('track', 'NOUN'), ('right', 'ADJ'), ('data', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Large', 'amod'), ('corporations', 'nsubjpass'), (' ', 'dep'), ('challenged', 'ROOT'), ('locate', 'xcomp'), ('track', 'dobj'), ('right', 'amod'), ('data', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Large, corporations], [corporations,  ], [ , challenged], [challenged, locate], [locate, track], [track, right], [right, data], [data, .]]

>> Trigrams: 
[[Large, corporations,  ], [corporations,  , challenged], [ , challenged, locate], [challenged, locate, track], [locate, track, right], [track, right, data], [right, data, .]]

>> Noun Phrases are: 
[Large corporations, track, the right data]

>> Named Entities are: 
[] 

------------------- Sentence 5 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 6 -------------------

Smaller companies may be challenged by the amount of  data they produce. 


>> Tokens are: 
[Smaller, companies, challenged,  , data, produce, .] 

>> PoS Tags are: 
[('Smaller', 'ADJ'), ('companies', 'NOUN'), ('challenged', 'VERB'), (' ', 'SPACE'), ('data', 'NOUN'), ('produce', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Smaller', 'amod'), ('companies', 'nsubjpass'), ('challenged', 'ROOT'), (' ', 'compound'), ('data', 'pobj'), ('produce', 'relcl'), ('.', 'punct')]

>> Bigrams: 
[[Smaller, companies], [companies, challenged], [challenged,  ], [ , data], [data, produce], [produce, .]]

>> Trigrams: 
[[Smaller, companies, challenged], [companies, challenged,  ], [challenged,  , data], [ , data, produce], [data, produce, .]]

>> Noun Phrases are: 
[Smaller companies, the amount,  data, they]

>> Named Entities are: 
[] 

------------------- Sentence 7 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 204 =================================

Recommendation: Not all problems need machine learning  and AI. If you find yourself in a situation where you don’t  have enough data, you should carefully consider if you  should launch your product using machine learning. If you  choose that option but don’t have enough data, you can  overcome the problem by acquiring external data or by  using simpler models. 

------------------- Sentence 1 -------------------

Recommendation: Not all problems need machine learning  and AI. 


>> Tokens are: 
[Recommendation, :, problems, need, machine, learning,  , AI, .] 

>> PoS Tags are: 
[('Recommendation', 'NOUN'), (':', 'PUNCT'), ('problems', 'NOUN'), ('need', 'VERB'), ('machine', 'NOUN'), ('learning', 'VERB'), (' ', 'SPACE'), ('AI', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Recommendation', 'dep'), (':', 'punct'), ('problems', 'nsubj'), ('need', 'ROOT'), ('machine', 'nsubj'), ('learning', 'ccomp'), (' ', 'dobj'), ('AI', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[Recommendation, :], [:, problems], [problems, need], [need, machine], [machine, learning], [learning,  ], [ , AI], [AI, .]]

>> Trigrams: 
[[Recommendation, :, problems], [:, problems, need], [problems, need, machine], [need, machine, learning], [machine, learning,  ], [learning,  , AI], [ , AI, .]]

>> Noun Phrases are: 
[Not all problems, machine, AI]

>> Named Entities are: 
[('AI', 'ORG')] 

------------------- Sentence 2 -------------------

If you find yourself in a situation where you don’t  have enough data, you should carefully consider if you  should launch your product using machine learning. 


>> Tokens are: 
[find, situation,  , data, ,, carefully, consider,  , launch, product, machine, learning, .] 

>> PoS Tags are: 
[('find', 'VERB'), ('situation', 'NOUN'), (' ', 'SPACE'), ('data', 'NOUN'), (',', 'PUNCT'), ('carefully', 'ADV'), ('consider', 'VERB'), (' ', 'SPACE'), ('launch', 'VERB'), ('product', 'NOUN'), ('machine', 'NOUN'), ('learning', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('find', 'advcl'), ('situation', 'pobj'), (' ', 'nsubj'), ('data', 'dobj'), (',', 'punct'), ('carefully', 'advmod'), ('consider', 'ROOT'), (' ', 'appos'), ('launch', 'ccomp'), ('product', 'dobj'), ('machine', 'compound'), ('learning', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[find, situation], [situation,  ], [ , data], [data, ,], [,, carefully], [carefully, consider], [consider,  ], [ , launch], [launch, product], [product, machine], [machine, learning], [learning, .]]

>> Trigrams: 
[[find, situation,  ], [situation,  , data], [ , data, ,], [data, ,, carefully], [,, carefully, consider], [carefully, consider,  ], [consider,  , launch], [ , launch, product], [launch, product, machine], [product, machine, learning], [machine, learning, .]]

>> Noun Phrases are: 
[you, yourself, a situation, you, enough data, you, you, your product, machine learning]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

If you  choose that option but don’t have enough data, you can  overcome the problem by acquiring external data or by  using simpler models. 


>> Tokens are: 
[ , choose, option, data, ,,  , overcome, problem, acquiring, external, data,  , simpler, models, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('choose', 'VERB'), ('option', 'NOUN'), ('data', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('overcome', 'VERB'), ('problem', 'NOUN'), ('acquiring', 'VERB'), ('external', 'ADJ'), ('data', 'NOUN'), (' ', 'SPACE'), ('simpler', 'ADJ'), ('models', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'appos'), ('choose', 'advcl'), ('option', 'dobj'), ('data', 'dobj'), (',', 'punct'), (' ', 'nsubj'), ('overcome', 'ROOT'), ('problem', 'dobj'), ('acquiring', 'pcomp'), ('external', 'amod'), ('data', 'dobj'), (' ', 'pobj'), ('simpler', 'amod'), ('models', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[ , choose], [choose, option], [option, data], [data, ,], [,,  ], [ , overcome], [overcome, problem], [problem, acquiring], [acquiring, external], [external, data], [data,  ], [ , simpler], [simpler, models], [models, .]]

>> Trigrams: 
[[ , choose, option], [choose, option, data], [option, data, ,], [data, ,,  ], [,,  , overcome], [ , overcome, problem], [overcome, problem, acquiring], [problem, acquiring, external], [acquiring, external, data], [external, data,  ], [data,  , simpler], [ , simpler, models], [simpler, models, .]]

>> Noun Phrases are: 
[you, that option, enough data, you, the problem, external data, simpler models]

>> Named Entities are: 
[] 


================================ Paragraph 205 =================================

Unlabeled data  Pitfalls: A common problem when implementing AI is data  that’s not classified by humans or machines, which leaves  you unable to train the system (in the case of a supervised  algorithm). For instance, if you wanted to predict fraud, but  the historical fraudulent cases weren’t labelled, it would be  impossible for the algorithm to map input to outputs.  

------------------- Sentence 1 -------------------

Unlabeled data   


>> Tokens are: 
[Unlabeled, data,  ] 

>> PoS Tags are: 
[('Unlabeled', 'ADJ'), ('data', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Unlabeled', 'amod'), ('data', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[Unlabeled, data], [data,  ]]

>> Trigrams: 
[[Unlabeled, data,  ]]

>> Noun Phrases are: 
[Unlabeled data]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Pitfalls: A common problem when implementing AI is data  that’s not classified by humans or machines, which leaves  you unable to train the system (in the case of a supervised  algorithm). 


>> Tokens are: 
[Pitfalls, :, common, problem, implementing, AI, data,  , classified, humans, machines, ,, leaves,  , unable, train, system, (, case, supervised,  , algorithm, ), .] 

>> PoS Tags are: 
[('Pitfalls', 'NOUN'), (':', 'PUNCT'), ('common', 'ADJ'), ('problem', 'NOUN'), ('implementing', 'VERB'), ('AI', 'PROPN'), ('data', 'NOUN'), (' ', 'SPACE'), ('classified', 'VERB'), ('humans', 'NOUN'), ('machines', 'NOUN'), (',', 'PUNCT'), ('leaves', 'VERB'), (' ', 'SPACE'), ('unable', 'ADJ'), ('train', 'VERB'), ('system', 'NOUN'), ('(', 'PUNCT'), ('case', 'NOUN'), ('supervised', 'ADJ'), (' ', 'SPACE'), ('algorithm', 'NOUN'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Pitfalls', 'ROOT'), (':', 'punct'), ('common', 'amod'), ('problem', 'appos'), ('implementing', 'advcl'), ('AI', 'dobj'), ('data', 'attr'), (' ', 'nummod'), ('classified', 'relcl'), ('humans', 'pobj'), ('machines', 'conj'), (',', 'punct'), ('leaves', 'relcl'), (' ', 'dobj'), ('unable', 'oprd'), ('train', 'xcomp'), ('system', 'dobj'), ('(', 'punct'), ('case', 'pobj'), ('supervised', 'amod'), (' ', 'compound'), ('algorithm', 'pobj'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Pitfalls, :], [:, common], [common, problem], [problem, implementing], [implementing, AI], [AI, data], [data,  ], [ , classified], [classified, humans], [humans, machines], [machines, ,], [,, leaves], [leaves,  ], [ , unable], [unable, train], [train, system], [system, (], [(, case], [case, supervised], [supervised,  ], [ , algorithm], [algorithm, )], [), .]]

>> Trigrams: 
[[Pitfalls, :, common], [:, common, problem], [common, problem, implementing], [problem, implementing, AI], [implementing, AI, data], [AI, data,  ], [data,  , classified], [ , classified, humans], [classified, humans, machines], [humans, machines, ,], [machines, ,, leaves], [,, leaves,  ], [leaves,  , unable], [ , unable, train], [unable, train, system], [train, system, (], [system, (, case], [(, case, supervised], [case, supervised,  ], [supervised,  , algorithm], [ , algorithm, )], [algorithm, ), .]]

>> Noun Phrases are: 
[Pitfalls, A common problem, AI, data, humans, machines, you, the system, the case, a supervised  algorithm]

>> Named Entities are: 
[('AI', 'ORG')] 

------------------- Sentence 3 -------------------

For instance, if you wanted to predict fraud, but  the historical fraudulent cases weren’t labelled, it would be  impossible for the algorithm to map input to outputs. 


>> Tokens are: 
[instance, ,, wanted, predict, fraud, ,,  , historical, fraudulent, cases, labelled, ,,  , impossible, algorithm, map, input, outputs, .] 

>> PoS Tags are: 
[('instance', 'NOUN'), (',', 'PUNCT'), ('wanted', 'VERB'), ('predict', 'VERB'), ('fraud', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('historical', 'ADJ'), ('fraudulent', 'ADJ'), ('cases', 'NOUN'), ('labelled', 'VERB'), (',', 'PUNCT'), (' ', 'SPACE'), ('impossible', 'ADJ'), ('algorithm', 'NOUN'), ('map', 'VERB'), ('input', 'NOUN'), ('outputs', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('instance', 'pobj'), (',', 'punct'), ('wanted', 'advcl'), ('predict', 'xcomp'), ('fraud', 'dobj'), (',', 'punct'), (' ', 'nsubjpass'), ('historical', 'amod'), ('fraudulent', 'amod'), ('cases', 'nsubjpass'), ('labelled', 'conj'), (',', 'punct'), (' ', 'attr'), ('impossible', 'acomp'), ('algorithm', 'nsubj'), ('map', 'advcl'), ('input', 'dobj'), ('outputs', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[instance, ,], [,, wanted], [wanted, predict], [predict, fraud], [fraud, ,], [,,  ], [ , historical], [historical, fraudulent], [fraudulent, cases], [cases, labelled], [labelled, ,], [,,  ], [ , impossible], [impossible, algorithm], [algorithm, map], [map, input], [input, outputs], [outputs, .]]

>> Trigrams: 
[[instance, ,, wanted], [,, wanted, predict], [wanted, predict, fraud], [predict, fraud, ,], [fraud, ,,  ], [,,  , historical], [ , historical, fraudulent], [historical, fraudulent, cases], [fraudulent, cases, labelled], [cases, labelled, ,], [labelled, ,,  ], [,,  , impossible], [ , impossible, algorithm], [impossible, algorithm, map], [algorithm, map, input], [map, input, outputs], [input, outputs, .]]

>> Noun Phrases are: 
[instance, you, fraud, the historical fraudulent cases, it, the algorithm, input, outputs]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 206 =================================

Recommendation: In this case, define what data you’ll  need to run a sound model. This data will then need to  be labeled—which can be expensive—or you can use  algorithms to accomplish this task. It’s a more advanced  technique, but you can use reinforcement learning or  semi-supervised models. Your data scientist might know  which approach is best. 

------------------- Sentence 1 -------------------

Recommendation: 


>> Tokens are: 
[Recommendation, :] 

>> PoS Tags are: 
[('Recommendation', 'NOUN'), (':', 'PUNCT')] 

>> Dependency Tags are: 
[('Recommendation', 'ROOT'), (':', 'punct')]

>> Bigrams: 
[[Recommendation, :]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Recommendation]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

In this case, define what data you’ll  need to run a sound model. 


>> Tokens are: 
[case, ,, define, data,  , need, run, sound, model, .] 

>> PoS Tags are: 
[('case', 'NOUN'), (',', 'PUNCT'), ('define', 'VERB'), ('data', 'NOUN'), (' ', 'SPACE'), ('need', 'VERB'), ('run', 'VERB'), ('sound', 'ADJ'), ('model', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('case', 'pobj'), (',', 'punct'), ('define', 'ROOT'), ('data', 'dobj'), (' ', 'nsubj'), ('need', 'ccomp'), ('run', 'xcomp'), ('sound', 'amod'), ('model', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[case, ,], [,, define], [define, data], [data,  ], [ , need], [need, run], [run, sound], [sound, model], [model, .]]

>> Trigrams: 
[[case, ,, define], [,, define, data], [define, data,  ], [data,  , need], [ , need, run], [need, run, sound], [run, sound, model], [sound, model, .]]

>> Noun Phrases are: 
[this case, what data, you, a sound model]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

This data will then need to  be labeled—which can be expensive—or you can use  algorithms to accomplish this task. 


>> Tokens are: 
[data, need,  , labeled, —, expensive, —, use,  , algorithms, accomplish, task, .] 

>> PoS Tags are: 
[('data', 'NOUN'), ('need', 'VERB'), (' ', 'SPACE'), ('labeled', 'VERB'), ('—', 'PUNCT'), ('expensive', 'ADJ'), ('—', 'PUNCT'), ('use', 'VERB'), (' ', 'SPACE'), ('algorithms', 'NOUN'), ('accomplish', 'VERB'), ('task', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('data', 'nsubj'), ('need', 'ROOT'), (' ', 'nsubjpass'), ('labeled', 'xcomp'), ('—', 'punct'), ('expensive', 'acomp'), ('—', 'punct'), ('use', 'conj'), (' ', 'compound'), ('algorithms', 'dobj'), ('accomplish', 'xcomp'), ('task', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[data, need], [need,  ], [ , labeled], [labeled, —], [—, expensive], [expensive, —], [—, use], [use,  ], [ , algorithms], [algorithms, accomplish], [accomplish, task], [task, .]]

>> Trigrams: 
[[data, need,  ], [need,  , labeled], [ , labeled, —], [labeled, —, expensive], [—, expensive, —], [expensive, —, use], [—, use,  ], [use,  , algorithms], [ , algorithms, accomplish], [algorithms, accomplish, task], [accomplish, task, .]]

>> Noun Phrases are: 
[This data, you,  algorithms, this task]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

It’s a more advanced  technique, but you can use reinforcement learning or  semi-supervised models. 


>> Tokens are: 
[advanced,  , technique, ,, use, reinforcement, learning,  , semi, -, supervised, models, .] 

>> PoS Tags are: 
[('advanced', 'ADJ'), (' ', 'SPACE'), ('technique', 'NOUN'), (',', 'PUNCT'), ('use', 'VERB'), ('reinforcement', 'NOUN'), ('learning', 'NOUN'), (' ', 'SPACE'), ('semi', 'ADJ'), ('-', 'ADJ'), ('supervised', 'ADJ'), ('models', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('advanced', 'amod'), (' ', 'compound'), ('technique', 'attr'), (',', 'punct'), ('use', 'conj'), ('reinforcement', 'compound'), ('learning', 'dobj'), (' ', 'nmod'), ('semi', 'amod'), ('-', 'amod'), ('supervised', 'amod'), ('models', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[advanced,  ], [ , technique], [technique, ,], [,, use], [use, reinforcement], [reinforcement, learning], [learning,  ], [ , semi], [semi, -], [-, supervised], [supervised, models], [models, .]]

>> Trigrams: 
[[advanced,  , technique], [ , technique, ,], [technique, ,, use], [,, use, reinforcement], [use, reinforcement, learning], [reinforcement, learning,  ], [learning,  , semi], [ , semi, -], [semi, -, supervised], [-, supervised, models], [supervised, models, .]]

>> Noun Phrases are: 
[It, a more advanced  technique, you, reinforcement learning,  semi-supervised models]

>> Named Entities are: 
[] 

------------------- Sentence 5 -------------------

Your data scientist might know  which approach is best. 


>> Tokens are: 
[data, scientist, know,  , approach, best, .] 

>> PoS Tags are: 
[('data', 'NOUN'), ('scientist', 'NOUN'), ('know', 'VERB'), (' ', 'SPACE'), ('approach', 'NOUN'), ('best', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('data', 'compound'), ('scientist', 'nsubj'), ('know', 'ROOT'), (' ', 'dobj'), ('approach', 'nsubj'), ('best', 'acomp'), ('.', 'punct')]

>> Bigrams: 
[[data, scientist], [scientist, know], [know,  ], [ , approach], [approach, best], [best, .]]

>> Trigrams: 
[[data, scientist, know], [scientist, know,  ], [know,  , approach], [ , approach, best], [approach, best, .]]

>> Noun Phrases are: 
[Your data scientist, which approach]

>> Named Entities are: 
[] 


================================ Paragraph 207 =================================

Explainable results  Pitfalls: In many cases, the business wants and needs to  know why specific outcomes occur. This is in line with one  of IBMs principles for ethical use of AI is: AI systems must  be transparent and explainable. Depending on what kind  of algorithm is used, an AI can’t show exactly which  variables brought it to a given conclusion. We call these  black-box algorithms. While they sometimes may perform  better, they don’t give a lot of explanation. For example,  you might have an algorithm that defines whether an  applicant gets a loan. According to European law in some  countries, if you deny the applicant, you need to explain  why you did so.  

------------------- Sentence 1 -------------------

Explainable results  Pitfalls: In many cases, the business wants and needs to  know why specific outcomes occur. 


>> Tokens are: 
[Explainable, results,  , Pitfalls, :, cases, ,, business, wants, needs,  , know, specific, outcomes, occur, .] 

>> PoS Tags are: 
[('Explainable', 'ADJ'), ('results', 'NOUN'), (' ', 'SPACE'), ('Pitfalls', 'NOUN'), (':', 'PUNCT'), ('cases', 'NOUN'), (',', 'PUNCT'), ('business', 'NOUN'), ('wants', 'VERB'), ('needs', 'VERB'), (' ', 'SPACE'), ('know', 'VERB'), ('specific', 'ADJ'), ('outcomes', 'NOUN'), ('occur', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Explainable', 'amod'), ('results', 'dep'), (' ', 'punct'), ('Pitfalls', 'appos'), (':', 'punct'), ('cases', 'pobj'), (',', 'punct'), ('business', 'nsubj'), ('wants', 'ROOT'), ('needs', 'conj'), (' ', 'nsubj'), ('know', 'conj'), ('specific', 'amod'), ('outcomes', 'nsubj'), ('occur', 'ccomp'), ('.', 'punct')]

>> Bigrams: 
[[Explainable, results], [results,  ], [ , Pitfalls], [Pitfalls, :], [:, cases], [cases, ,], [,, business], [business, wants], [wants, needs], [needs,  ], [ , know], [know, specific], [specific, outcomes], [outcomes, occur], [occur, .]]

>> Trigrams: 
[[Explainable, results,  ], [results,  , Pitfalls], [ , Pitfalls, :], [Pitfalls, :, cases], [:, cases, ,], [cases, ,, business], [,, business, wants], [business, wants, needs], [wants, needs,  ], [needs,  , know], [ , know, specific], [know, specific, outcomes], [specific, outcomes, occur], [outcomes, occur, .]]

>> Noun Phrases are: 
[Pitfalls, many cases, the business, specific outcomes]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

This is in line with one  of IBMs principles for ethical use of AI is: AI systems must  be transparent and explainable. 


>> Tokens are: 
[line,  , IBMs, principles, ethical, use, AI, :, AI, systems,  , transparent, explainable, .] 

>> PoS Tags are: 
[('line', 'NOUN'), (' ', 'SPACE'), ('IBMs', 'NOUN'), ('principles', 'NOUN'), ('ethical', 'ADJ'), ('use', 'NOUN'), ('AI', 'PROPN'), (':', 'PUNCT'), ('AI', 'NOUN'), ('systems', 'NOUN'), (' ', 'SPACE'), ('transparent', 'ADJ'), ('explainable', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('line', 'pobj'), (' ', 'pobj'), ('IBMs', 'compound'), ('principles', 'pobj'), ('ethical', 'amod'), ('use', 'pobj'), ('AI', 'pobj'), (':', 'punct'), ('AI', 'compound'), ('systems', 'nsubj'), (' ', 'nsubj'), ('transparent', 'acomp'), ('explainable', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[line,  ], [ , IBMs], [IBMs, principles], [principles, ethical], [ethical, use], [use, AI], [AI, :], [:, AI], [AI, systems], [systems,  ], [ , transparent], [transparent, explainable], [explainable, .]]

>> Trigrams: 
[[line,  , IBMs], [ , IBMs, principles], [IBMs, principles, ethical], [principles, ethical, use], [ethical, use, AI], [use, AI, :], [AI, :, AI], [:, AI, systems], [AI, systems,  ], [systems,  , transparent], [ , transparent, explainable], [transparent, explainable, .]]

>> Noun Phrases are: 
[line, IBMs principles, ethical use, AI, AI systems]

>> Named Entities are: 
[('AI', 'ORG'), ('AI', 'ORG')] 

------------------- Sentence 3 -------------------

Depending on what kind  of algorithm is used, an AI can’t show exactly which  variables brought it to a given conclusion. 


>> Tokens are: 
[Depending, kind,  , algorithm, ,, AI, exactly,  , variables, brought, given, conclusion, .] 

>> PoS Tags are: 
[('Depending', 'VERB'), ('kind', 'NOUN'), (' ', 'SPACE'), ('algorithm', 'NOUN'), (',', 'PUNCT'), ('AI', 'PROPN'), ('exactly', 'ADV'), (' ', 'SPACE'), ('variables', 'NOUN'), ('brought', 'VERB'), ('given', 'VERB'), ('conclusion', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Depending', 'prep'), ('kind', 'dobj'), (' ', 'nsubjpass'), ('algorithm', 'pobj'), (',', 'punct'), ('AI', 'nsubj'), ('exactly', 'advmod'), (' ', 'compound'), ('variables', 'nsubj'), ('brought', 'ccomp'), ('given', 'amod'), ('conclusion', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Depending, kind], [kind,  ], [ , algorithm], [algorithm, ,], [,, AI], [AI, exactly], [exactly,  ], [ , variables], [variables, brought], [brought, given], [given, conclusion], [conclusion, .]]

>> Trigrams: 
[[Depending, kind,  ], [kind,  , algorithm], [ , algorithm, ,], [algorithm, ,, AI], [,, AI, exactly], [AI, exactly,  ], [exactly,  , variables], [ , variables, brought], [variables, brought, given], [brought, given, conclusion], [given, conclusion, .]]

>> Noun Phrases are: 
[what kind, algorithm, an AI,  variables, it, a given conclusion]

>> Named Entities are: 
[('AI', 'ORG')] 

------------------- Sentence 4 -------------------

We call these  black-box algorithms. 


>> Tokens are: 
[ , black, -, box, algorithms, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('black', 'ADJ'), ('-', 'PUNCT'), ('box', 'NOUN'), ('algorithms', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'nmod'), ('black', 'amod'), ('-', 'punct'), ('box', 'compound'), ('algorithms', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[ , black], [black, -], [-, box], [box, algorithms], [algorithms, .]]

>> Trigrams: 
[[ , black, -], [black, -, box], [-, box, algorithms], [box, algorithms, .]]

>> Noun Phrases are: 
[We, these  black-box algorithms]

>> Named Entities are: 
[] 

------------------- Sentence 5 -------------------

While they sometimes may perform  better, they don’t give a lot of explanation. 


>> Tokens are: 
[perform,  , better, ,, lot, explanation, .] 

>> PoS Tags are: 
[('perform', 'VERB'), (' ', 'SPACE'), ('better', 'ADV'), (',', 'PUNCT'), ('lot', 'NOUN'), ('explanation', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('perform', 'advcl'), (' ', 'dobj'), ('better', 'advmod'), (',', 'punct'), ('lot', 'dobj'), ('explanation', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[perform,  ], [ , better], [better, ,], [,, lot], [lot, explanation], [explanation, .]]

>> Trigrams: 
[[perform,  , better], [ , better, ,], [better, ,, lot], [,, lot, explanation], [lot, explanation, .]]

>> Noun Phrases are: 
[they, they, a lot, explanation]

>> Named Entities are: 
[] 

------------------- Sentence 6 -------------------

For example,  you might have an algorithm that defines whether an  applicant gets a loan. 


>> Tokens are: 
[example, ,,  , algorithm, defines,  , applicant, gets, loan, .] 

>> PoS Tags are: 
[('example', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('algorithm', 'NOUN'), ('defines', 'VERB'), (' ', 'SPACE'), ('applicant', 'NOUN'), ('gets', 'VERB'), ('loan', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('example', 'pobj'), (',', 'punct'), (' ', 'dep'), ('algorithm', 'dobj'), ('defines', 'relcl'), (' ', 'compound'), ('applicant', 'nsubj'), ('gets', 'ccomp'), ('loan', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[example, ,], [,,  ], [ , algorithm], [algorithm, defines], [defines,  ], [ , applicant], [applicant, gets], [gets, loan], [loan, .]]

>> Trigrams: 
[[example, ,,  ], [,,  , algorithm], [ , algorithm, defines], [algorithm, defines,  ], [defines,  , applicant], [ , applicant, gets], [applicant, gets, loan], [gets, loan, .]]

>> Noun Phrases are: 
[example, you, an algorithm, an  applicant, a loan]

>> Named Entities are: 
[] 

------------------- Sentence 7 -------------------

According to European law in some  countries, if you deny the applicant, you need to explain  why you did so. 


>> Tokens are: 
[According, European, law,  , countries, ,, deny, applicant, ,, need, explain,  , .] 

>> PoS Tags are: 
[('According', 'VERB'), ('European', 'ADJ'), ('law', 'NOUN'), (' ', 'SPACE'), ('countries', 'NOUN'), (',', 'PUNCT'), ('deny', 'VERB'), ('applicant', 'NOUN'), (',', 'PUNCT'), ('need', 'VERB'), ('explain', 'VERB'), (' ', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('According', 'prep'), ('European', 'amod'), ('law', 'pobj'), (' ', 'compound'), ('countries', 'pobj'), (',', 'punct'), ('deny', 'advcl'), ('applicant', 'dobj'), (',', 'punct'), ('need', 'ROOT'), ('explain', 'xcomp'), (' ', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[According, European], [European, law], [law,  ], [ , countries], [countries, ,], [,, deny], [deny, applicant], [applicant, ,], [,, need], [need, explain], [explain,  ], [ , .]]

>> Trigrams: 
[[According, European, law], [European, law,  ], [law,  , countries], [ , countries, ,], [countries, ,, deny], [,, deny, applicant], [deny, applicant, ,], [applicant, ,, need], [,, need, explain], [need, explain,  ], [explain,  , .]]

>> Noun Phrases are: 
[European law, some  countries, you, the applicant, you, you]

>> Named Entities are: 
[('European', 'NORP')] 

------------------- Sentence 8 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 208 =================================

Recommendation: There are several new algorithms that  help explain what happens in the black-box models such   as Local Interpretable Model-Agnostic (LIME).10 But this  doesn’t solve the problem in all cases. You should therefore  define what you’re going to use the model for. If the model  needs to explain precisely why it came to a certain conclusion,  your data scientists should consider other models that provide  the specific information required. Ethics and AI should go  hand-in-hand.

------------------- Sentence 1 -------------------

Recommendation: There are several new algorithms that  help explain what happens in the black-box models such   as Local Interpretable Model-Agnostic (LIME).10 But this  doesn’t solve the problem in all cases. 


>> Tokens are: 
[Recommendation, :, new, algorithms,  , help, explain, happens, black, -, box, models,   , Local, Interpretable, Model, -, Agnostic, (, LIME).10,  , solve, problem, cases, .] 

>> PoS Tags are: 
[('Recommendation', 'NOUN'), (':', 'PUNCT'), ('new', 'ADJ'), ('algorithms', 'NOUN'), (' ', 'SPACE'), ('help', 'VERB'), ('explain', 'VERB'), ('happens', 'VERB'), ('black', 'ADJ'), ('-', 'PUNCT'), ('box', 'NOUN'), ('models', 'NOUN'), ('  ', 'SPACE'), ('Local', 'PROPN'), ('Interpretable', 'PROPN'), ('Model', 'PROPN'), ('-', 'PUNCT'), ('Agnostic', 'PROPN'), ('(', 'PUNCT'), ('LIME).10', 'PROPN'), (' ', 'SPACE'), ('solve', 'VERB'), ('problem', 'NOUN'), ('cases', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Recommendation', 'ROOT'), (':', 'punct'), ('new', 'amod'), ('algorithms', 'attr'), (' ', 'nsubj'), ('help', 'relcl'), ('explain', 'xcomp'), ('happens', 'ccomp'), ('black', 'amod'), ('-', 'punct'), ('box', 'compound'), ('models', 'pobj'), ('  ', 'npadvmod'), ('Local', 'compound'), ('Interpretable', 'compound'), ('Model', 'compound'), ('-', 'punct'), ('Agnostic', 'pobj'), ('(', 'punct'), ('LIME).10', 'appos'), (' ', 'nsubj'), ('solve', 'acl'), ('problem', 'dobj'), ('cases', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Recommendation, :], [:, new], [new, algorithms], [algorithms,  ], [ , help], [help, explain], [explain, happens], [happens, black], [black, -], [-, box], [box, models], [models,   ], [  , Local], [Local, Interpretable], [Interpretable, Model], [Model, -], [-, Agnostic], [Agnostic, (], [(, LIME).10], [LIME).10,  ], [ , solve], [solve, problem], [problem, cases], [cases, .]]

>> Trigrams: 
[[Recommendation, :, new], [:, new, algorithms], [new, algorithms,  ], [algorithms,  , help], [ , help, explain], [help, explain, happens], [explain, happens, black], [happens, black, -], [black, -, box], [-, box, models], [box, models,   ], [models,   , Local], [  , Local, Interpretable], [Local, Interpretable, Model], [Interpretable, Model, -], [Model, -, Agnostic], [-, Agnostic, (], [Agnostic, (, LIME).10], [(, LIME).10,  ], [LIME).10,  , solve], [ , solve, problem], [solve, problem, cases], [problem, cases, .]]

>> Noun Phrases are: 
[Recommendation, several new algorithms, what, the black-box models, Local Interpretable Model-Agnostic, (LIME).10, the problem, all cases]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

You should therefore  define what you’re going to use the model for. 


>> Tokens are: 
[ , define, going, use, model, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('define', 'VERB'), ('going', 'VERB'), ('use', 'VERB'), ('model', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'nsubj'), ('define', 'ROOT'), ('going', 'ccomp'), ('use', 'xcomp'), ('model', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[ , define], [define, going], [going, use], [use, model], [model, .]]

>> Trigrams: 
[[ , define, going], [define, going, use], [going, use, model], [use, model, .]]

>> Noun Phrases are: 
[You, what, you, the model]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

If the model  needs to explain precisely why it came to a certain conclusion,  your data scientists should consider other models that provide  the specific information required. 


>> Tokens are: 
[model,  , needs, explain, precisely, came, certain, conclusion, ,,  , data, scientists, consider, models, provide,  , specific, information, required, .] 

>> PoS Tags are: 
[('model', 'NOUN'), (' ', 'SPACE'), ('needs', 'VERB'), ('explain', 'VERB'), ('precisely', 'ADV'), ('came', 'VERB'), ('certain', 'ADJ'), ('conclusion', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('data', 'NOUN'), ('scientists', 'NOUN'), ('consider', 'VERB'), ('models', 'NOUN'), ('provide', 'VERB'), (' ', 'SPACE'), ('specific', 'ADJ'), ('information', 'NOUN'), ('required', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('model', 'nsubj'), (' ', 'nsubj'), ('needs', 'advcl'), ('explain', 'xcomp'), ('precisely', 'advmod'), ('came', 'ccomp'), ('certain', 'amod'), ('conclusion', 'pobj'), (',', 'punct'), (' ', 'dep'), ('data', 'compound'), ('scientists', 'nsubj'), ('consider', 'ROOT'), ('models', 'dobj'), ('provide', 'relcl'), (' ', 'dative'), ('specific', 'amod'), ('information', 'dobj'), ('required', 'acl'), ('.', 'punct')]

>> Bigrams: 
[[model,  ], [ , needs], [needs, explain], [explain, precisely], [precisely, came], [came, certain], [certain, conclusion], [conclusion, ,], [,,  ], [ , data], [data, scientists], [scientists, consider], [consider, models], [models, provide], [provide,  ], [ , specific], [specific, information], [information, required], [required, .]]

>> Trigrams: 
[[model,  , needs], [ , needs, explain], [needs, explain, precisely], [explain, precisely, came], [precisely, came, certain], [came, certain, conclusion], [certain, conclusion, ,], [conclusion, ,,  ], [,,  , data], [ , data, scientists], [data, scientists, consider], [scientists, consider, models], [consider, models, provide], [models, provide,  ], [provide,  , specific], [ , specific, information], [specific, information, required], [information, required, .]]

>> Noun Phrases are: 
[the model, it, a certain conclusion, your data scientists, other models, the specific information]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

Ethics and AI should go  hand-in-hand. 


>> Tokens are: 
[Ethics, AI,  , hand, -, -, hand, .] 

>> PoS Tags are: 
[('Ethics', 'NOUN'), ('AI', 'PROPN'), (' ', 'SPACE'), ('hand', 'NOUN'), ('-', 'PUNCT'), ('-', 'PUNCT'), ('hand', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Ethics', 'nsubj'), ('AI', 'conj'), (' ', 'dobj'), ('hand', 'npadvmod'), ('-', 'punct'), ('-', 'punct'), ('hand', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Ethics, AI], [AI,  ], [ , hand], [hand, -], [-, -], [-, hand], [hand, .]]

>> Trigrams: 
[[Ethics, AI,  ], [AI,  , hand], [ , hand, -], [hand, -, -], [-, -, hand], [-, hand, .]]

>> Noun Phrases are: 
[Ethics, AI, hand]

>> Named Entities are: 
[('Ethics', 'ORG'), ('AI', 'ORG')] 


================================ Paragraph 209 =================================

14     Beyond the hype: A guide to understanding and successfully implementing artificial intelligence within your business 

------------------- Sentence 1 -------------------

14     Beyond the hype: A guide to understanding and successfully implementing artificial intelligence within your business 


>> Tokens are: 
[14,     , hype, :, guide, understanding, successfully, implementing, artificial, intelligence, business] 

>> PoS Tags are: 
[('14', 'NUM'), ('    ', 'SPACE'), ('hype', 'NOUN'), (':', 'PUNCT'), ('guide', 'NOUN'), ('understanding', 'NOUN'), ('successfully', 'ADV'), ('implementing', 'VERB'), ('artificial', 'ADJ'), ('intelligence', 'NOUN'), ('business', 'NOUN')] 

>> Dependency Tags are: 
[('14', 'nummod'), ('    ', 'ROOT'), ('hype', 'pobj'), (':', 'punct'), ('guide', 'appos'), ('understanding', 'pobj'), ('successfully', 'advmod'), ('implementing', 'acl'), ('artificial', 'amod'), ('intelligence', 'dobj'), ('business', 'pobj')]

>> Bigrams: 
[[14,     ], [    , hype], [hype, :], [:, guide], [guide, understanding], [understanding, successfully], [successfully, implementing], [implementing, artificial], [artificial, intelligence], [intelligence, business]]

>> Trigrams: 
[[14,     , hype], [    , hype, :], [hype, :, guide], [:, guide, understanding], [guide, understanding, successfully], [understanding, successfully, implementing], [successfully, implementing, artificial], [implementing, artificial, intelligence], [artificial, intelligence, business]]

>> Noun Phrases are: 
[the hype, A guide, understanding, artificial intelligence, your business]

>> Named Entities are: 
[] 


================================ Paragraph 210 =================================

Summary AI has the potential to bring a lot of value to your company  if thought through and implemented properly. The authors  of this paper hope we’ve made it clear how you can achieve  this goal. We’ve discussed what AI is what it can do for your  organization, how it should be implemented and what pitfalls  you should avoid once you’ve decided to implement AI.  

------------------- Sentence 1 -------------------

Summary AI has the potential to bring a lot of value to your company  if thought through and implemented properly. 


>> Tokens are: 
[Summary, AI, potential, bring, lot, value, company,  , thought, implemented, properly, .] 

>> PoS Tags are: 
[('Summary', 'PROPN'), ('AI', 'PROPN'), ('potential', 'NOUN'), ('bring', 'VERB'), ('lot', 'NOUN'), ('value', 'NOUN'), ('company', 'NOUN'), (' ', 'SPACE'), ('thought', 'VERB'), ('implemented', 'VERB'), ('properly', 'ADV'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Summary', 'compound'), ('AI', 'nsubj'), ('potential', 'dobj'), ('bring', 'acl'), ('lot', 'dobj'), ('value', 'pobj'), ('company', 'pobj'), (' ', 'appos'), ('thought', 'advcl'), ('implemented', 'conj'), ('properly', 'advmod'), ('.', 'punct')]

>> Bigrams: 
[[Summary, AI], [AI, potential], [potential, bring], [bring, lot], [lot, value], [value, company], [company,  ], [ , thought], [thought, implemented], [implemented, properly], [properly, .]]

>> Trigrams: 
[[Summary, AI, potential], [AI, potential, bring], [potential, bring, lot], [bring, lot, value], [lot, value, company], [value, company,  ], [company,  , thought], [ , thought, implemented], [thought, implemented, properly], [implemented, properly, .]]

>> Noun Phrases are: 
[Summary AI, the potential, a lot, value, your company]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

The authors  of this paper hope we’ve made it clear how you can achieve  this goal. 


>> Tokens are: 
[authors,  , paper, hope, clear, achieve,  , goal, .] 

>> PoS Tags are: 
[('authors', 'NOUN'), (' ', 'SPACE'), ('paper', 'NOUN'), ('hope', 'NOUN'), ('clear', 'ADJ'), ('achieve', 'VERB'), (' ', 'SPACE'), ('goal', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('authors', 'ROOT'), (' ', 'appos'), ('paper', 'compound'), ('hope', 'pobj'), ('clear', 'ccomp'), ('achieve', 'relcl'), (' ', 'dative'), ('goal', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[authors,  ], [ , paper], [paper, hope], [hope, clear], [clear, achieve], [achieve,  ], [ , goal], [goal, .]]

>> Trigrams: 
[[authors,  , paper], [ , paper, hope], [paper, hope, clear], [hope, clear, achieve], [clear, achieve,  ], [achieve,  , goal], [ , goal, .]]

>> Noun Phrases are: 
[The authors, this paper hope, we, it, you, this goal]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

We’ve discussed what AI is what it can do for your  organization, how it should be implemented and what pitfalls  you should avoid once you’ve decided to implement AI.   


>> Tokens are: 
[discussed, AI,  , organization, ,, implemented, pitfalls,  , avoid, decided, implement, AI, .,  ] 

>> PoS Tags are: 
[('discussed', 'VERB'), ('AI', 'PROPN'), (' ', 'SPACE'), ('organization', 'NOUN'), (',', 'PUNCT'), ('implemented', 'VERB'), ('pitfalls', 'VERB'), (' ', 'SPACE'), ('avoid', 'VERB'), ('decided', 'VERB'), ('implement', 'VERB'), ('AI', 'PROPN'), ('.', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('discussed', 'ROOT'), ('AI', 'nsubj'), (' ', 'compound'), ('organization', 'pobj'), (',', 'punct'), ('implemented', 'ccomp'), ('pitfalls', 'dobj'), (' ', 'dobj'), ('avoid', 'conj'), ('decided', 'advcl'), ('implement', 'xcomp'), ('AI', 'dobj'), ('.', 'punct'), (' ', 'dobj')]

>> Bigrams: 
[[discussed, AI], [AI,  ], [ , organization], [organization, ,], [,, implemented], [implemented, pitfalls], [pitfalls,  ], [ , avoid], [avoid, decided], [decided, implement], [implement, AI], [AI, .], [.,  ]]

>> Trigrams: 
[[discussed, AI,  ], [AI,  , organization], [ , organization, ,], [organization, ,, implemented], [,, implemented, pitfalls], [implemented, pitfalls,  ], [pitfalls,  , avoid], [ , avoid, decided], [avoid, decided, implement], [decided, implement, AI], [implement, AI, .], [AI, .,  ]]

>> Noun Phrases are: 
[We, what, AI, what, it, your  organization, it, you, you, AI]

>> Named Entities are: 
[('AI', 'ORG'), ('AI', 'ORG')] 


================================ Paragraph 211 =================================

To sum up this paper’s key points: 

------------------- Sentence 1 -------------------

To sum up this paper’s key points: 


>> Tokens are: 
[sum, paper, key, points, :] 

>> PoS Tags are: 
[('sum', 'VERB'), ('paper', 'NOUN'), ('key', 'ADJ'), ('points', 'NOUN'), (':', 'PUNCT')] 

>> Dependency Tags are: 
[('sum', 'ROOT'), ('paper', 'poss'), ('key', 'amod'), ('points', 'dobj'), (':', 'punct')]

>> Bigrams: 
[[sum, paper], [paper, key], [key, points], [points, :]]

>> Trigrams: 
[[sum, paper, key], [paper, key, points], [key, points, :]]

>> Noun Phrases are: 
[this paper’s key points]

>> Named Entities are: 
[] 


================================ Paragraph 212 =================================

AI not something of the future, it is real today, and it fuels  the fourth Industrial Revolution: As you will see later in this  paper, there are many cases where AI is being successfully  implemented and driving competitive advantage. Companies  such as IBM, Nvidia, Twitter, Delta Airlines, Walmart, Netflix,  Spotify and Kreditech show that their data-driven approach  produces extremely valuable business models. But for many  companies, failing to implement a data-driven strategy can  lead to lost market share.  

------------------- Sentence 1 -------------------

AI not something of the future, it is real today, and it fuels  the fourth Industrial Revolution: As you will see later in this  paper, there are many cases where AI is being successfully  implemented and driving competitive advantage. 


>> Tokens are: 
[AI, future, ,, real, today, ,, fuels,  , fourth, Industrial, Revolution, :, later,  , paper, ,, cases, AI, successfully,  , implemented, driving, competitive, advantage, .] 

>> PoS Tags are: 
[('AI', 'NOUN'), ('future', 'NOUN'), (',', 'PUNCT'), ('real', 'ADJ'), ('today', 'NOUN'), (',', 'PUNCT'), ('fuels', 'VERB'), (' ', 'SPACE'), ('fourth', 'ADJ'), ('Industrial', 'PROPN'), ('Revolution', 'PROPN'), (':', 'PUNCT'), ('later', 'ADV'), (' ', 'SPACE'), ('paper', 'NOUN'), (',', 'PUNCT'), ('cases', 'NOUN'), ('AI', 'PROPN'), ('successfully', 'ADV'), (' ', 'SPACE'), ('implemented', 'VERB'), ('driving', 'VERB'), ('competitive', 'ADJ'), ('advantage', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('AI', 'advcl'), ('future', 'pobj'), (',', 'punct'), ('real', 'acomp'), ('today', 'npadvmod'), (',', 'punct'), ('fuels', 'conj'), (' ', 'dobj'), ('fourth', 'amod'), ('Industrial', 'compound'), ('Revolution', 'dobj'), (':', 'punct'), ('later', 'advmod'), (' ', 'compound'), ('paper', 'pobj'), (',', 'punct'), ('cases', 'attr'), ('AI', 'nsubj'), ('successfully', 'advmod'), (' ', 'nsubj'), ('implemented', 'relcl'), ('driving', 'conj'), ('competitive', 'amod'), ('advantage', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[AI, future], [future, ,], [,, real], [real, today], [today, ,], [,, fuels], [fuels,  ], [ , fourth], [fourth, Industrial], [Industrial, Revolution], [Revolution, :], [:, later], [later,  ], [ , paper], [paper, ,], [,, cases], [cases, AI], [AI, successfully], [successfully,  ], [ , implemented], [implemented, driving], [driving, competitive], [competitive, advantage], [advantage, .]]

>> Trigrams: 
[[AI, future, ,], [future, ,, real], [,, real, today], [real, today, ,], [today, ,, fuels], [,, fuels,  ], [fuels,  , fourth], [ , fourth, Industrial], [fourth, Industrial, Revolution], [Industrial, Revolution, :], [Revolution, :, later], [:, later,  ], [later,  , paper], [ , paper, ,], [paper, ,, cases], [,, cases, AI], [cases, AI, successfully], [AI, successfully,  ], [successfully,  , implemented], [ , implemented, driving], [implemented, driving, competitive], [driving, competitive, advantage], [competitive, advantage, .]]

>> Noun Phrases are: 
[not something, the future, it, it, the fourth Industrial Revolution, you, this  paper, many cases, AI, competitive advantage]

>> Named Entities are: 
[('today', 'DATE'), ('fourth', 'ORDINAL'), ('Industrial Revolution', 'EVENT'), ('AI', 'ORG')] 

------------------- Sentence 2 -------------------

Companies  such as IBM, Nvidia, Twitter, Delta Airlines, Walmart, Netflix,  Spotify and Kreditech show that their data-driven approach  produces extremely valuable business models. 


>> Tokens are: 
[Companies,  , IBM, ,, Nvidia, ,, Twitter, ,, Delta, Airlines, ,, Walmart, ,, Netflix, ,,  , Spotify, Kreditech, data, -, driven, approach,  , produces, extremely, valuable, business, models, .] 

>> PoS Tags are: 
[('Companies', 'NOUN'), (' ', 'SPACE'), ('IBM', 'PROPN'), (',', 'PUNCT'), ('Nvidia', 'PROPN'), (',', 'PUNCT'), ('Twitter', 'PROPN'), (',', 'PUNCT'), ('Delta', 'PROPN'), ('Airlines', 'PROPN'), (',', 'PUNCT'), ('Walmart', 'PROPN'), (',', 'PUNCT'), ('Netflix', 'PROPN'), (',', 'PUNCT'), (' ', 'SPACE'), ('Spotify', 'PROPN'), ('Kreditech', 'PROPN'), ('data', 'NOUN'), ('-', 'PUNCT'), ('driven', 'VERB'), ('approach', 'NOUN'), (' ', 'SPACE'), ('produces', 'VERB'), ('extremely', 'ADV'), ('valuable', 'ADJ'), ('business', 'NOUN'), ('models', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Companies', 'nsubj'), (' ', 'appos'), ('IBM', 'pobj'), (',', 'punct'), ('Nvidia', 'conj'), (',', 'punct'), ('Twitter', 'conj'), (',', 'punct'), ('Delta', 'compound'), ('Airlines', 'conj'), (',', 'punct'), ('Walmart', 'conj'), (',', 'punct'), ('Netflix', 'conj'), (',', 'punct'), (' ', 'compound'), ('Spotify', 'conj'), ('Kreditech', 'conj'), ('data', 'npadvmod'), ('-', 'punct'), ('driven', 'amod'), ('approach', 'nsubj'), (' ', 'nsubj'), ('produces', 'ccomp'), ('extremely', 'advmod'), ('valuable', 'amod'), ('business', 'compound'), ('models', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Companies,  ], [ , IBM], [IBM, ,], [,, Nvidia], [Nvidia, ,], [,, Twitter], [Twitter, ,], [,, Delta], [Delta, Airlines], [Airlines, ,], [,, Walmart], [Walmart, ,], [,, Netflix], [Netflix, ,], [,,  ], [ , Spotify], [Spotify, Kreditech], [Kreditech, data], [data, -], [-, driven], [driven, approach], [approach,  ], [ , produces], [produces, extremely], [extremely, valuable], [valuable, business], [business, models], [models, .]]

>> Trigrams: 
[[Companies,  , IBM], [ , IBM, ,], [IBM, ,, Nvidia], [,, Nvidia, ,], [Nvidia, ,, Twitter], [,, Twitter, ,], [Twitter, ,, Delta], [,, Delta, Airlines], [Delta, Airlines, ,], [Airlines, ,, Walmart], [,, Walmart, ,], [Walmart, ,, Netflix], [,, Netflix, ,], [Netflix, ,,  ], [,,  , Spotify], [ , Spotify, Kreditech], [Spotify, Kreditech, data], [Kreditech, data, -], [data, -, driven], [-, driven, approach], [driven, approach,  ], [approach,  , produces], [ , produces, extremely], [produces, extremely, valuable], [extremely, valuable, business], [valuable, business, models], [business, models, .]]

>> Noun Phrases are: 
[Companies, IBM, Nvidia, Twitter, Delta Airlines, Walmart, Netflix,  Spotify, Kreditech, their data-driven approach, extremely valuable business models]

>> Named Entities are: 
[('IBM', 'ORG'), ('Nvidia', 'ORG'), ('Twitter', 'PRODUCT'), ('Delta Airlines', 'ORG'), ('Walmart', 'GPE'), ('Netflix', 'GPE'), ('Spotify', 'ORG'), ('Kreditech', 'PERSON')] 

------------------- Sentence 3 -------------------

But for many  companies, failing to implement a data-driven strategy can  lead to lost market share. 


>> Tokens are: 
[ , companies, ,, failing, implement, data, -, driven, strategy,  , lead, lost, market, share, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('companies', 'NOUN'), (',', 'PUNCT'), ('failing', 'VERB'), ('implement', 'VERB'), ('data', 'NOUN'), ('-', 'PUNCT'), ('driven', 'VERB'), ('strategy', 'NOUN'), (' ', 'SPACE'), ('lead', 'VERB'), ('lost', 'ADJ'), ('market', 'NOUN'), ('share', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'compound'), ('companies', 'pobj'), (',', 'punct'), ('failing', 'advcl'), ('implement', 'xcomp'), ('data', 'npadvmod'), ('-', 'punct'), ('driven', 'amod'), ('strategy', 'dobj'), (' ', 'nsubj'), ('lead', 'ROOT'), ('lost', 'amod'), ('market', 'compound'), ('share', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[ , companies], [companies, ,], [,, failing], [failing, implement], [implement, data], [data, -], [-, driven], [driven, strategy], [strategy,  ], [ , lead], [lead, lost], [lost, market], [market, share], [share, .]]

>> Trigrams: 
[[ , companies, ,], [companies, ,, failing], [,, failing, implement], [failing, implement, data], [implement, data, -], [data, -, driven], [-, driven, strategy], [driven, strategy,  ], [strategy,  , lead], [ , lead, lost], [lead, lost, market], [lost, market, share], [market, share, .]]

>> Noun Phrases are: 
[many  companies, a data-driven strategy, lost market share]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 213 =================================

Properly implementing AI requires careful evaluation and  planning: You need to evaluate how AI can help solve your  problems, where your company is right now in terms of  capabilities and what needs to be done before you can  properly implement AI to address the problems you want  to solve or the opportunities you want to take.  

------------------- Sentence 1 -------------------

Properly implementing AI requires careful evaluation and  planning: You need to evaluate how AI can help solve your  problems, where your company is right now in terms of  capabilities and what needs to be done before you can  properly implement AI to address the problems you want  to solve or the opportunities you want to take. 


>> Tokens are: 
[Properly, implementing, AI, requires, careful, evaluation,  , planning, :, need, evaluate, AI, help, solve,  , problems, ,, company, right, terms,  , capabilities, needs,  , properly, implement, AI, address, problems, want,  , solve, opportunities, want, .] 

>> PoS Tags are: 
[('Properly', 'ADV'), ('implementing', 'VERB'), ('AI', 'PROPN'), ('requires', 'VERB'), ('careful', 'ADJ'), ('evaluation', 'NOUN'), (' ', 'SPACE'), ('planning', 'NOUN'), (':', 'PUNCT'), ('need', 'VERB'), ('evaluate', 'VERB'), ('AI', 'PROPN'), ('help', 'VERB'), ('solve', 'VERB'), (' ', 'SPACE'), ('problems', 'NOUN'), (',', 'PUNCT'), ('company', 'NOUN'), ('right', 'ADV'), ('terms', 'NOUN'), (' ', 'SPACE'), ('capabilities', 'NOUN'), ('needs', 'VERB'), (' ', 'SPACE'), ('properly', 'ADV'), ('implement', 'VERB'), ('AI', 'PROPN'), ('address', 'VERB'), ('problems', 'NOUN'), ('want', 'VERB'), (' ', 'SPACE'), ('solve', 'VERB'), ('opportunities', 'NOUN'), ('want', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Properly', 'advmod'), ('implementing', 'amod'), ('AI', 'nsubj'), ('requires', 'ccomp'), ('careful', 'amod'), ('evaluation', 'dobj'), (' ', 'compound'), ('planning', 'conj'), (':', 'punct'), ('need', 'ROOT'), ('evaluate', 'xcomp'), ('AI', 'nsubj'), ('help', 'ccomp'), ('solve', 'xcomp'), (' ', 'compound'), ('problems', 'dobj'), (',', 'punct'), ('company', 'nsubj'), ('right', 'advmod'), ('terms', 'pobj'), (' ', 'compound'), ('capabilities', 'pobj'), ('needs', 'conj'), (' ', 'nsubj'), ('properly', 'advmod'), ('implement', 'advcl'), ('AI', 'dobj'), ('address', 'xcomp'), ('problems', 'dobj'), ('want', 'relcl'), (' ', 'nsubj'), ('solve', 'ccomp'), ('opportunities', 'conj'), ('want', 'relcl'), ('.', 'punct')]

>> Bigrams: 
[[Properly, implementing], [implementing, AI], [AI, requires], [requires, careful], [careful, evaluation], [evaluation,  ], [ , planning], [planning, :], [:, need], [need, evaluate], [evaluate, AI], [AI, help], [help, solve], [solve,  ], [ , problems], [problems, ,], [,, company], [company, right], [right, terms], [terms,  ], [ , capabilities], [capabilities, needs], [needs,  ], [ , properly], [properly, implement], [implement, AI], [AI, address], [address, problems], [problems, want], [want,  ], [ , solve], [solve, opportunities], [opportunities, want], [want, .]]

>> Trigrams: 
[[Properly, implementing, AI], [implementing, AI, requires], [AI, requires, careful], [requires, careful, evaluation], [careful, evaluation,  ], [evaluation,  , planning], [ , planning, :], [planning, :, need], [:, need, evaluate], [need, evaluate, AI], [evaluate, AI, help], [AI, help, solve], [help, solve,  ], [solve,  , problems], [ , problems, ,], [problems, ,, company], [,, company, right], [company, right, terms], [right, terms,  ], [terms,  , capabilities], [ , capabilities, needs], [capabilities, needs,  ], [needs,  , properly], [ , properly, implement], [properly, implement, AI], [implement, AI, address], [AI, address, problems], [address, problems, want], [problems, want,  ], [want,  , solve], [ , solve, opportunities], [solve, opportunities, want], [opportunities, want, .]]

>> Noun Phrases are: 
[Properly implementing AI, careful evaluation,  planning, You, AI, your  problems, your company, terms,  capabilities, what, you, AI, the problems, you, the opportunities, you]

>> Named Entities are: 
[('AI', 'ORG'), ('AI', 'ORG')] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 214 =================================

There is no one magic algorithm that can solve all your  problems: Before implementing AI, you should focus on  the problems you have and how AI can help you solve  them. Next, you need to check whether the data you need  to solve your problems is available. Often a hybrid between  algorithms can be the right fit, depending on the problems  you want to solve.  

------------------- Sentence 1 -------------------

There is no one magic algorithm that can solve all your  problems: Before implementing AI, you should focus on  the problems you have and how AI can help you solve  them. 


>> Tokens are: 
[magic, algorithm, solve,  , problems, :, implementing, AI, ,, focus,  , problems, AI, help, solve,  , .] 

>> PoS Tags are: 
[('magic', 'NOUN'), ('algorithm', 'NOUN'), ('solve', 'VERB'), (' ', 'SPACE'), ('problems', 'NOUN'), (':', 'PUNCT'), ('implementing', 'VERB'), ('AI', 'PROPN'), (',', 'PUNCT'), ('focus', 'VERB'), (' ', 'SPACE'), ('problems', 'NOUN'), ('AI', 'PROPN'), ('help', 'VERB'), ('solve', 'VERB'), (' ', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('magic', 'compound'), ('algorithm', 'attr'), ('solve', 'relcl'), (' ', 'compound'), ('problems', 'dobj'), (':', 'punct'), ('implementing', 'pcomp'), ('AI', 'dobj'), (',', 'punct'), ('focus', 'ROOT'), (' ', 'pobj'), ('problems', 'dobj'), ('AI', 'nsubj'), ('help', 'conj'), ('solve', 'ccomp'), (' ', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[magic, algorithm], [algorithm, solve], [solve,  ], [ , problems], [problems, :], [:, implementing], [implementing, AI], [AI, ,], [,, focus], [focus,  ], [ , problems], [problems, AI], [AI, help], [help, solve], [solve,  ], [ , .]]

>> Trigrams: 
[[magic, algorithm, solve], [algorithm, solve,  ], [solve,  , problems], [ , problems, :], [problems, :, implementing], [:, implementing, AI], [implementing, AI, ,], [AI, ,, focus], [,, focus,  ], [focus,  , problems], [ , problems, AI], [problems, AI, help], [AI, help, solve], [help, solve,  ], [solve,  , .]]

>> Noun Phrases are: 
[no one magic algorithm, all your  problems, AI, you, the problems, you, AI, you, them]

>> Named Entities are: 
[('AI', 'ORG'), ('AI', 'ORG')] 

------------------- Sentence 2 -------------------

Next, you need to check whether the data you need  to solve your problems is available. 


>> Tokens are: 
[,, need, check, data, need,  , solve, problems, available, .] 

>> PoS Tags are: 
[(',', 'PUNCT'), ('need', 'VERB'), ('check', 'VERB'), ('data', 'NOUN'), ('need', 'VERB'), (' ', 'SPACE'), ('solve', 'VERB'), ('problems', 'NOUN'), ('available', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(',', 'punct'), ('need', 'ROOT'), ('check', 'xcomp'), ('data', 'nsubj'), ('need', 'relcl'), (' ', 'nsubj'), ('solve', 'acl'), ('problems', 'dobj'), ('available', 'acomp'), ('.', 'punct')]

>> Bigrams: 
[[,, need], [need, check], [check, data], [data, need], [need,  ], [ , solve], [solve, problems], [problems, available], [available, .]]

>> Trigrams: 
[[,, need, check], [need, check, data], [check, data, need], [data, need,  ], [need,  , solve], [ , solve, problems], [solve, problems, available], [problems, available, .]]

>> Noun Phrases are: 
[you, the data, you, your problems]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

Often a hybrid between  algorithms can be the right fit, depending on the problems  you want to solve. 


>> Tokens are: 
[hybrid,  , algorithms, right, fit, ,, depending, problems,  , want, solve, .] 

>> PoS Tags are: 
[('hybrid', 'NOUN'), (' ', 'SPACE'), ('algorithms', 'NOUN'), ('right', 'ADJ'), ('fit', 'NOUN'), (',', 'PUNCT'), ('depending', 'VERB'), ('problems', 'NOUN'), (' ', 'SPACE'), ('want', 'VERB'), ('solve', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('hybrid', 'nsubj'), (' ', 'pobj'), ('algorithms', 'pobj'), ('right', 'amod'), ('fit', 'attr'), (',', 'punct'), ('depending', 'prep'), ('problems', 'pobj'), (' ', 'nummod'), ('want', 'relcl'), ('solve', 'xcomp'), ('.', 'punct')]

>> Bigrams: 
[[hybrid,  ], [ , algorithms], [algorithms, right], [right, fit], [fit, ,], [,, depending], [depending, problems], [problems,  ], [ , want], [want, solve], [solve, .]]

>> Trigrams: 
[[hybrid,  , algorithms], [ , algorithms, right], [algorithms, right, fit], [right, fit, ,], [fit, ,, depending], [,, depending, problems], [depending, problems,  ], [problems,  , want], [ , want, solve], [want, solve, .]]

>> Noun Phrases are: 
[a hybrid, algorithms, the right fit, the problems, you]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 215 =================================

Supervised learning provides the most economic value:  Supervised learning is currently the most applied form of  learning and provides the most value for a wide variety of  applications. When beginning to implement AI in your  enterprise, you’ll likely be working with supervised learning. 

------------------- Sentence 1 -------------------

Supervised learning provides the most economic value:   


>> Tokens are: 
[Supervised, learning, provides, economic, value, :,  ] 

>> PoS Tags are: 
[('Supervised', 'ADJ'), ('learning', 'NOUN'), ('provides', 'VERB'), ('economic', 'ADJ'), ('value', 'NOUN'), (':', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Supervised', 'amod'), ('learning', 'nsubj'), ('provides', 'ROOT'), ('economic', 'amod'), ('value', 'dobj'), (':', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[Supervised, learning], [learning, provides], [provides, economic], [economic, value], [value, :], [:,  ]]

>> Trigrams: 
[[Supervised, learning, provides], [learning, provides, economic], [provides, economic, value], [economic, value, :], [value, :,  ]]

>> Noun Phrases are: 
[Supervised learning, the most economic value]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Supervised learning is currently the most applied form of  learning and provides the most value for a wide variety of  applications. 


>> Tokens are: 
[Supervised, learning, currently, applied, form,  , learning, provides, value, wide, variety,  , applications, .] 

>> PoS Tags are: 
[('Supervised', 'ADJ'), ('learning', 'NOUN'), ('currently', 'ADV'), ('applied', 'VERB'), ('form', 'NOUN'), (' ', 'SPACE'), ('learning', 'VERB'), ('provides', 'VERB'), ('value', 'NOUN'), ('wide', 'ADJ'), ('variety', 'NOUN'), (' ', 'SPACE'), ('applications', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Supervised', 'amod'), ('learning', 'nsubj'), ('currently', 'advmod'), ('applied', 'amod'), ('form', 'attr'), (' ', 'nsubj'), ('learning', 'pcomp'), ('provides', 'conj'), ('value', 'dobj'), ('wide', 'amod'), ('variety', 'pobj'), (' ', 'compound'), ('applications', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Supervised, learning], [learning, currently], [currently, applied], [applied, form], [form,  ], [ , learning], [learning, provides], [provides, value], [value, wide], [wide, variety], [variety,  ], [ , applications], [applications, .]]

>> Trigrams: 
[[Supervised, learning, currently], [learning, currently, applied], [currently, applied, form], [applied, form,  ], [form,  , learning], [ , learning, provides], [learning, provides, value], [provides, value, wide], [value, wide, variety], [wide, variety,  ], [variety,  , applications], [ , applications, .]]

>> Noun Phrases are: 
[Supervised learning, the most applied form, the most value, a wide variety,  applications]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

When beginning to implement AI in your  enterprise, you’ll likely be working with supervised learning. 


>> Tokens are: 
[beginning, implement, AI,  , enterprise, ,, likely, working, supervised, learning, .] 

>> PoS Tags are: 
[('beginning', 'VERB'), ('implement', 'VERB'), ('AI', 'PROPN'), (' ', 'SPACE'), ('enterprise', 'NOUN'), (',', 'PUNCT'), ('likely', 'ADV'), ('working', 'VERB'), ('supervised', 'ADJ'), ('learning', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('beginning', 'advcl'), ('implement', 'xcomp'), ('AI', 'dobj'), (' ', 'compound'), ('enterprise', 'pobj'), (',', 'punct'), ('likely', 'advmod'), ('working', 'ROOT'), ('supervised', 'amod'), ('learning', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[beginning, implement], [implement, AI], [AI,  ], [ , enterprise], [enterprise, ,], [,, likely], [likely, working], [working, supervised], [supervised, learning], [learning, .]]

>> Trigrams: 
[[beginning, implement, AI], [implement, AI,  ], [AI,  , enterprise], [ , enterprise, ,], [enterprise, ,, likely], [,, likely, working], [likely, working, supervised], [working, supervised, learning], [supervised, learning, .]]

>> Noun Phrases are: 
[AI, your  enterprise, you, supervised learning]

>> Named Entities are: 
[('AI', 'ORG')] 


================================ Paragraph 216 =================================

In the next section of this paper, we’ll talk about how IBM  can play a role in implementing AI within your organization.  IBM not only has many years of experience with these types  of projects but has also been a pioneer in the AI arena. Based  on its experience and knowledge, IBM can help companies of  all sizes implement AI solutions.  

------------------- Sentence 1 -------------------

In the next section of this paper, we’ll talk about how IBM  can play a role in implementing AI within your organization. 


>> Tokens are: 
[section, paper, ,, talk, IBM,  , play, role, implementing, AI, organization, .] 

>> PoS Tags are: 
[('section', 'NOUN'), ('paper', 'NOUN'), (',', 'PUNCT'), ('talk', 'VERB'), ('IBM', 'PROPN'), (' ', 'SPACE'), ('play', 'VERB'), ('role', 'NOUN'), ('implementing', 'VERB'), ('AI', 'PROPN'), ('organization', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('section', 'pobj'), ('paper', 'pobj'), (',', 'punct'), ('talk', 'ROOT'), ('IBM', 'nsubj'), (' ', 'nsubj'), ('play', 'pcomp'), ('role', 'dobj'), ('implementing', 'pcomp'), ('AI', 'dobj'), ('organization', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[section, paper], [paper, ,], [,, talk], [talk, IBM], [IBM,  ], [ , play], [play, role], [role, implementing], [implementing, AI], [AI, organization], [organization, .]]

>> Trigrams: 
[[section, paper, ,], [paper, ,, talk], [,, talk, IBM], [talk, IBM,  ], [IBM,  , play], [ , play, role], [play, role, implementing], [role, implementing, AI], [implementing, AI, organization], [AI, organization, .]]

>> Noun Phrases are: 
[the next section, this paper, we, IBM, a role, AI, your organization]

>> Named Entities are: 
[('IBM', 'ORG'), ('AI', 'ORG')] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

IBM not only has many years of experience with these types  of projects but has also been a pioneer in the AI arena. 


>> Tokens are: 
[IBM, years, experience, types,  , projects, pioneer, AI, arena, .] 

>> PoS Tags are: 
[('IBM', 'PROPN'), ('years', 'NOUN'), ('experience', 'NOUN'), ('types', 'NOUN'), (' ', 'SPACE'), ('projects', 'NOUN'), ('pioneer', 'NOUN'), ('AI', 'PROPN'), ('arena', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('IBM', 'nsubj'), ('years', 'dobj'), ('experience', 'pobj'), ('types', 'pobj'), (' ', 'appos'), ('projects', 'pobj'), ('pioneer', 'attr'), ('AI', 'compound'), ('arena', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[IBM, years], [years, experience], [experience, types], [types,  ], [ , projects], [projects, pioneer], [pioneer, AI], [AI, arena], [arena, .]]

>> Trigrams: 
[[IBM, years, experience], [years, experience, types], [experience, types,  ], [types,  , projects], [ , projects, pioneer], [projects, pioneer, AI], [pioneer, AI, arena], [AI, arena, .]]

>> Noun Phrases are: 
[IBM, many years, experience, these types, projects, a pioneer, the AI arena]

>> Named Entities are: 
[('IBM', 'ORG'), ('AI', 'ORG')] 

------------------- Sentence 4 -------------------

Based  on its experience and knowledge, IBM can help companies of  all sizes implement AI solutions. 


>> Tokens are: 
[Based,  , experience, knowledge, ,, IBM, help, companies,  , sizes, implement, AI, solutions, .] 

>> PoS Tags are: 
[('Based', 'VERB'), (' ', 'SPACE'), ('experience', 'NOUN'), ('knowledge', 'NOUN'), (',', 'PUNCT'), ('IBM', 'PROPN'), ('help', 'VERB'), ('companies', 'NOUN'), (' ', 'SPACE'), ('sizes', 'NOUN'), ('implement', 'VERB'), ('AI', 'PROPN'), ('solutions', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Based', 'advcl'), (' ', 'dobj'), ('experience', 'pobj'), ('knowledge', 'conj'), (',', 'punct'), ('IBM', 'nsubj'), ('help', 'ROOT'), ('companies', 'dobj'), (' ', 'pobj'), ('sizes', 'nsubj'), ('implement', 'ccomp'), ('AI', 'compound'), ('solutions', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Based,  ], [ , experience], [experience, knowledge], [knowledge, ,], [,, IBM], [IBM, help], [help, companies], [companies,  ], [ , sizes], [sizes, implement], [implement, AI], [AI, solutions], [solutions, .]]

>> Trigrams: 
[[Based,  , experience], [ , experience, knowledge], [experience, knowledge, ,], [knowledge, ,, IBM], [,, IBM, help], [IBM, help, companies], [help, companies,  ], [companies,  , sizes], [ , sizes, implement], [sizes, implement, AI], [implement, AI, solutions], [AI, solutions, .]]

>> Noun Phrases are: 
[its experience, knowledge, IBM, companies, all sizes, AI solutions]

>> Named Entities are: 
[('IBM', 'ORG'), ('AI', 'ORG')] 

------------------- Sentence 5 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 217 =================================

IBM Services     15 

------------------- Sentence 1 -------------------

IBM Services     15 


>> Tokens are: 
[IBM, Services,     , 15] 

>> PoS Tags are: 
[('IBM', 'PROPN'), ('Services', 'PROPN'), ('    ', 'SPACE'), ('15', 'NUM')] 

>> Dependency Tags are: 
[('IBM', 'compound'), ('Services', 'ROOT'), ('    ', 'appos'), ('15', 'nummod')]

>> Bigrams: 
[[IBM, Services], [Services,     ], [    , 15]]

>> Trigrams: 
[[IBM, Services,     ], [Services,     , 15]]

>> Noun Phrases are: 
[IBM Services]

>> Named Entities are: 
[('IBM Services', 'ORG'), ('15', 'CARDINAL')] 


================================ Paragraph 218 =================================

IBM Services IBM has the experience and knowledge to help guide your  company through a business and technology transformation.  IBM puts this into practice through the “garage” concept.  The IBM Garage lets you experiment with big ideas, acquire  new expertise and build new enterprise-grade solutions  with modern and emerging technologies for immediate  market impact.  

------------------- Sentence 1 -------------------

IBM Services IBM has the experience and knowledge to help guide your  company through a business and technology transformation. 


>> Tokens are: 
[IBM, Services, IBM, experience, knowledge, help, guide,  , company, business, technology, transformation, .] 

>> PoS Tags are: 
[('IBM', 'PROPN'), ('Services', 'PROPN'), ('IBM', 'PROPN'), ('experience', 'NOUN'), ('knowledge', 'NOUN'), ('help', 'VERB'), ('guide', 'VERB'), (' ', 'SPACE'), ('company', 'NOUN'), ('business', 'NOUN'), ('technology', 'NOUN'), ('transformation', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('IBM', 'compound'), ('Services', 'compound'), ('IBM', 'nsubj'), ('experience', 'dobj'), ('knowledge', 'conj'), ('help', 'advcl'), ('guide', 'xcomp'), (' ', 'compound'), ('company', 'dobj'), ('business', 'nmod'), ('technology', 'conj'), ('transformation', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[IBM, Services], [Services, IBM], [IBM, experience], [experience, knowledge], [knowledge, help], [help, guide], [guide,  ], [ , company], [company, business], [business, technology], [technology, transformation], [transformation, .]]

>> Trigrams: 
[[IBM, Services, IBM], [Services, IBM, experience], [IBM, experience, knowledge], [experience, knowledge, help], [knowledge, help, guide], [help, guide,  ], [guide,  , company], [ , company, business], [company, business, technology], [business, technology, transformation], [technology, transformation, .]]

>> Noun Phrases are: 
[IBM Services IBM, the experience, knowledge, your  company, a business and technology transformation]

>> Named Entities are: 
[('IBM', 'ORG'), ('IBM', 'ORG')] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

IBM puts this into practice through the “garage” concept.   


>> Tokens are: 
[IBM, puts, practice, “, garage, ”, concept, .,  ] 

>> PoS Tags are: 
[('IBM', 'PROPN'), ('puts', 'VERB'), ('practice', 'NOUN'), ('“', 'PUNCT'), ('garage', 'NOUN'), ('”', 'PUNCT'), ('concept', 'NOUN'), ('.', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('IBM', 'nsubj'), ('puts', 'ROOT'), ('practice', 'pobj'), ('“', 'punct'), ('garage', 'nmod'), ('”', 'punct'), ('concept', 'pobj'), ('.', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[IBM, puts], [puts, practice], [practice, “], [“, garage], [garage, ”], [”, concept], [concept, .], [.,  ]]

>> Trigrams: 
[[IBM, puts, practice], [puts, practice, “], [practice, “, garage], [“, garage, ”], [garage, ”, concept], [”, concept, .], [concept, .,  ]]

>> Noun Phrases are: 
[IBM, practice, the “garage” concept]

>> Named Entities are: 
[('IBM', 'ORG')] 

------------------- Sentence 4 -------------------

The IBM Garage lets you experiment with big ideas, acquire  new expertise and build new enterprise-grade solutions  with modern and emerging technologies for immediate  market impact. 


>> Tokens are: 
[IBM, Garage, lets, experiment, big, ideas, ,, acquire,  , new, expertise, build, new, enterprise, -, grade, solutions,  , modern, emerging, technologies, immediate,  , market, impact, .] 

>> PoS Tags are: 
[('IBM', 'PROPN'), ('Garage', 'PROPN'), ('lets', 'VERB'), ('experiment', 'VERB'), ('big', 'ADJ'), ('ideas', 'NOUN'), (',', 'PUNCT'), ('acquire', 'VERB'), (' ', 'SPACE'), ('new', 'ADJ'), ('expertise', 'NOUN'), ('build', 'VERB'), ('new', 'ADJ'), ('enterprise', 'NOUN'), ('-', 'PUNCT'), ('grade', 'NOUN'), ('solutions', 'NOUN'), (' ', 'SPACE'), ('modern', 'ADJ'), ('emerging', 'VERB'), ('technologies', 'NOUN'), ('immediate', 'ADJ'), (' ', 'SPACE'), ('market', 'NOUN'), ('impact', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('IBM', 'compound'), ('Garage', 'nsubj'), ('lets', 'ROOT'), ('experiment', 'ccomp'), ('big', 'amod'), ('ideas', 'pobj'), (',', 'punct'), ('acquire', 'conj'), (' ', 'dative'), ('new', 'amod'), ('expertise', 'dobj'), ('build', 'conj'), ('new', 'amod'), ('enterprise', 'compound'), ('-', 'punct'), ('grade', 'compound'), ('solutions', 'dobj'), (' ', 'dobj'), ('modern', 'amod'), ('emerging', 'conj'), ('technologies', 'pobj'), ('immediate', 'amod'), (' ', 'compound'), ('market', 'compound'), ('impact', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[IBM, Garage], [Garage, lets], [lets, experiment], [experiment, big], [big, ideas], [ideas, ,], [,, acquire], [acquire,  ], [ , new], [new, expertise], [expertise, build], [build, new], [new, enterprise], [enterprise, -], [-, grade], [grade, solutions], [solutions,  ], [ , modern], [modern, emerging], [emerging, technologies], [technologies, immediate], [immediate,  ], [ , market], [market, impact], [impact, .]]

>> Trigrams: 
[[IBM, Garage, lets], [Garage, lets, experiment], [lets, experiment, big], [experiment, big, ideas], [big, ideas, ,], [ideas, ,, acquire], [,, acquire,  ], [acquire,  , new], [ , new, expertise], [new, expertise, build], [expertise, build, new], [build, new, enterprise], [new, enterprise, -], [enterprise, -, grade], [-, grade, solutions], [grade, solutions,  ], [solutions,  , modern], [ , modern, emerging], [modern, emerging, technologies], [emerging, technologies, immediate], [technologies, immediate,  ], [immediate,  , market], [ , market, impact], [market, impact, .]]

>> Noun Phrases are: 
[The IBM Garage, you, big ideas, new expertise, new enterprise-grade solutions, modern and emerging technologies, immediate  market impact]

>> Named Entities are: 
[] 

------------------- Sentence 5 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 219 =================================

IBM looks at implementing AI in a holistic way. You as   a client and IBM can enter into a strategic alliance to  transform your business by creating a platform for  continuous innovation. The IBM Garage lets you innovate  and develop with the speed of a start-up, at the scale and  rigor of an enterprise. It offers an innovation space where  clients and IBM work side-by-side to create first-of-a-kind  strategies and solutions. You can then develop the  expertise to transform the way you work. 

------------------- Sentence 1 -------------------

IBM looks at implementing AI in a holistic way. 


>> Tokens are: 
[IBM, looks, implementing, AI, holistic, way, .] 

>> PoS Tags are: 
[('IBM', 'PROPN'), ('looks', 'VERB'), ('implementing', 'VERB'), ('AI', 'PROPN'), ('holistic', 'ADJ'), ('way', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('IBM', 'nsubj'), ('looks', 'ROOT'), ('implementing', 'pcomp'), ('AI', 'dobj'), ('holistic', 'amod'), ('way', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[IBM, looks], [looks, implementing], [implementing, AI], [AI, holistic], [holistic, way], [way, .]]

>> Trigrams: 
[[IBM, looks, implementing], [looks, implementing, AI], [implementing, AI, holistic], [AI, holistic, way], [holistic, way, .]]

>> Noun Phrases are: 
[IBM, AI, a holistic way]

>> Named Entities are: 
[('IBM', 'ORG'), ('AI', 'ORG')] 

------------------- Sentence 2 -------------------

You as   a client and IBM can enter into a strategic alliance to  transform your business by creating a platform for  continuous innovation. 


>> Tokens are: 
[  , client, IBM, enter, strategic, alliance,  , transform, business, creating, platform,  , continuous, innovation, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('client', 'NOUN'), ('IBM', 'PROPN'), ('enter', 'VERB'), ('strategic', 'ADJ'), ('alliance', 'NOUN'), (' ', 'SPACE'), ('transform', 'VERB'), ('business', 'NOUN'), ('creating', 'VERB'), ('platform', 'NOUN'), (' ', 'SPACE'), ('continuous', 'ADJ'), ('innovation', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'pobj'), ('client', 'appos'), ('IBM', 'conj'), ('enter', 'ROOT'), ('strategic', 'amod'), ('alliance', 'pobj'), (' ', 'pobj'), ('transform', 'advcl'), ('business', 'dobj'), ('creating', 'pcomp'), ('platform', 'dobj'), (' ', 'nummod'), ('continuous', 'amod'), ('innovation', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[  , client], [client, IBM], [IBM, enter], [enter, strategic], [strategic, alliance], [alliance,  ], [ , transform], [transform, business], [business, creating], [creating, platform], [platform,  ], [ , continuous], [continuous, innovation], [innovation, .]]

>> Trigrams: 
[[  , client, IBM], [client, IBM, enter], [IBM, enter, strategic], [enter, strategic, alliance], [strategic, alliance,  ], [alliance,  , transform], [ , transform, business], [transform, business, creating], [business, creating, platform], [creating, platform,  ], [platform,  , continuous], [ , continuous, innovation], [continuous, innovation, .]]

>> Noun Phrases are: 
[You, a client, IBM, a strategic alliance, your business, a platform,  continuous innovation]

>> Named Entities are: 
[('IBM', 'ORG')] 

------------------- Sentence 3 -------------------

The IBM Garage lets you innovate  and develop with the speed of a start-up, at the scale and  rigor of an enterprise. 


>> Tokens are: 
[IBM, Garage, lets, innovate,  , develop, speed, start, -, ,, scale,  , rigor, enterprise, .] 

>> PoS Tags are: 
[('IBM', 'PROPN'), ('Garage', 'PROPN'), ('lets', 'VERB'), ('innovate', 'VERB'), (' ', 'SPACE'), ('develop', 'VERB'), ('speed', 'NOUN'), ('start', 'NOUN'), ('-', 'PUNCT'), (',', 'PUNCT'), ('scale', 'NOUN'), (' ', 'SPACE'), ('rigor', 'NOUN'), ('enterprise', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('IBM', 'compound'), ('Garage', 'nsubj'), ('lets', 'ROOT'), ('innovate', 'ccomp'), (' ', 'dobj'), ('develop', 'conj'), ('speed', 'pobj'), ('start', 'compound'), ('-', 'punct'), (',', 'punct'), ('scale', 'pobj'), (' ', 'conj'), ('rigor', 'conj'), ('enterprise', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[IBM, Garage], [Garage, lets], [lets, innovate], [innovate,  ], [ , develop], [develop, speed], [speed, start], [start, -], [-, ,], [,, scale], [scale,  ], [ , rigor], [rigor, enterprise], [enterprise, .]]

>> Trigrams: 
[[IBM, Garage, lets], [Garage, lets, innovate], [lets, innovate,  ], [innovate,  , develop], [ , develop, speed], [develop, speed, start], [speed, start, -], [start, -, ,], [-, ,, scale], [,, scale,  ], [scale,  , rigor], [ , rigor, enterprise], [rigor, enterprise, .]]

>> Noun Phrases are: 
[The IBM Garage, you, the speed, a start-up, the scale, rigor, an enterprise]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

It offers an innovation space where  clients and IBM work side-by-side to create first-of-a-kind  strategies and solutions. 


>> Tokens are: 
[offers, innovation, space,  , clients, IBM, work, -, -, create, -, -, -, kind,  , strategies, solutions, .] 

>> PoS Tags are: 
[('offers', 'VERB'), ('innovation', 'NOUN'), ('space', 'NOUN'), (' ', 'SPACE'), ('clients', 'NOUN'), ('IBM', 'PROPN'), ('work', 'VERB'), ('-', 'PUNCT'), ('-', 'PUNCT'), ('create', 'VERB'), ('-', 'PUNCT'), ('-', 'PUNCT'), ('-', 'PUNCT'), ('kind', 'NOUN'), (' ', 'SPACE'), ('strategies', 'NOUN'), ('solutions', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('offers', 'ROOT'), ('innovation', 'compound'), ('space', 'dobj'), (' ', 'compound'), ('clients', 'nsubj'), ('IBM', 'conj'), ('work', 'relcl'), ('-', 'punct'), ('-', 'punct'), ('create', 'advcl'), ('-', 'punct'), ('-', 'punct'), ('-', 'punct'), ('kind', 'pobj'), (' ', 'conj'), ('strategies', 'dobj'), ('solutions', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[offers, innovation], [innovation, space], [space,  ], [ , clients], [clients, IBM], [IBM, work], [work, -], [-, -], [-, create], [create, -], [-, -], [-, -], [-, kind], [kind,  ], [ , strategies], [strategies, solutions], [solutions, .]]

>> Trigrams: 
[[offers, innovation, space], [innovation, space,  ], [space,  , clients], [ , clients, IBM], [clients, IBM, work], [IBM, work, -], [work, -, -], [-, -, create], [-, create, -], [create, -, -], [-, -, -], [-, -, kind], [-, kind,  ], [kind,  , strategies], [ , strategies, solutions], [strategies, solutions, .]]

>> Noun Phrases are: 
[It, an innovation space,  clients, IBM, -side, a-kind, solutions]

>> Named Entities are: 
[('IBM', 'ORG')] 

------------------- Sentence 5 -------------------

You can then develop the  expertise to transform the way you work. 


>> Tokens are: 
[develop,  , expertise, transform, way, work, .] 

>> PoS Tags are: 
[('develop', 'VERB'), (' ', 'SPACE'), ('expertise', 'NOUN'), ('transform', 'VERB'), ('way', 'NOUN'), ('work', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('develop', 'ROOT'), (' ', 'compound'), ('expertise', 'dobj'), ('transform', 'advcl'), ('way', 'dobj'), ('work', 'relcl'), ('.', 'punct')]

>> Bigrams: 
[[develop,  ], [ , expertise], [expertise, transform], [transform, way], [way, work], [work, .]]

>> Trigrams: 
[[develop,  , expertise], [ , expertise, transform], [expertise, transform, way], [transform, way, work], [way, work, .]]

>> Noun Phrases are: 
[You, the  expertise, the way, you]

>> Named Entities are: 
[] 


================================ Paragraph 220 =================================

Figure 6: The IBM Garage for AI. 

------------------- Sentence 1 -------------------

Figure 6: The IBM Garage for AI. 


>> Tokens are: 
[Figure, 6, :, IBM, Garage, AI, .] 

>> PoS Tags are: 
[('Figure', 'VERB'), ('6', 'NUM'), (':', 'PUNCT'), ('IBM', 'PROPN'), ('Garage', 'PROPN'), ('AI', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Figure', 'ROOT'), ('6', 'nummod'), (':', 'punct'), ('IBM', 'compound'), ('Garage', 'appos'), ('AI', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Figure, 6], [6, :], [:, IBM], [IBM, Garage], [Garage, AI], [AI, .]]

>> Trigrams: 
[[Figure, 6, :], [6, :, IBM], [:, IBM, Garage], [IBM, Garage, AI], [Garage, AI, .]]

>> Noun Phrases are: 
[The IBM Garage, AI]

>> Named Entities are: 
[('6', 'CARDINAL')] 


================================ Paragraph 221 =================================

The IBM Garage as the engine for a Cognitive Enterprise transformation 

------------------- Sentence 1 -------------------

The IBM Garage as the engine for a Cognitive Enterprise transformation 


>> Tokens are: 
[IBM, Garage, engine, Cognitive, Enterprise, transformation] 

>> PoS Tags are: 
[('IBM', 'PROPN'), ('Garage', 'PROPN'), ('engine', 'NOUN'), ('Cognitive', 'PROPN'), ('Enterprise', 'PROPN'), ('transformation', 'NOUN')] 

>> Dependency Tags are: 
[('IBM', 'compound'), ('Garage', 'ROOT'), ('engine', 'pobj'), ('Cognitive', 'compound'), ('Enterprise', 'compound'), ('transformation', 'pobj')]

>> Bigrams: 
[[IBM, Garage], [Garage, engine], [engine, Cognitive], [Cognitive, Enterprise], [Enterprise, transformation]]

>> Trigrams: 
[[IBM, Garage, engine], [Garage, engine, Cognitive], [engine, Cognitive, Enterprise], [Cognitive, Enterprise, transformation]]

>> Noun Phrases are: 
[The IBM Garage, the engine, a Cognitive Enterprise transformation]

>> Named Entities are: 
[('The IBM Garage', 'ORG'), ('Cognitive Enterprise', 'ORG')] 


================================ Paragraph 222 =================================

Build and recruit capability: key  profiles, roles, competences &  responsibilities with the use of  an AI Academy 

------------------- Sentence 1 -------------------

Build and recruit capability: key  profiles, roles, competences &  responsibilities with the use of  an AI Academy 


>> Tokens are: 
[Build, recruit, capability, :, key,  , profiles, ,, roles, ,, competences, &,  , responsibilities, use,  , AI, Academy] 

>> PoS Tags are: 
[('Build', 'VERB'), ('recruit', 'NOUN'), ('capability', 'NOUN'), (':', 'PUNCT'), ('key', 'ADJ'), (' ', 'SPACE'), ('profiles', 'NOUN'), (',', 'PUNCT'), ('roles', 'NOUN'), (',', 'PUNCT'), ('competences', 'NOUN'), ('&', 'CCONJ'), (' ', 'SPACE'), ('responsibilities', 'NOUN'), ('use', 'NOUN'), (' ', 'SPACE'), ('AI', 'PROPN'), ('Academy', 'PROPN')] 

>> Dependency Tags are: 
[('Build', 'ROOT'), ('recruit', 'compound'), ('capability', 'conj'), (':', 'punct'), ('key', 'amod'), (' ', 'compound'), ('profiles', 'appos'), (',', 'punct'), ('roles', 'conj'), (',', 'punct'), ('competences', 'conj'), ('&', 'cc'), (' ', 'conj'), ('responsibilities', 'conj'), ('use', 'pobj'), (' ', 'pobj'), ('AI', 'compound'), ('Academy', 'appos')]

>> Bigrams: 
[[Build, recruit], [recruit, capability], [capability, :], [:, key], [key,  ], [ , profiles], [profiles, ,], [,, roles], [roles, ,], [,, competences], [competences, &], [&,  ], [ , responsibilities], [responsibilities, use], [use,  ], [ , AI], [AI, Academy]]

>> Trigrams: 
[[Build, recruit, capability], [recruit, capability, :], [capability, :, key], [:, key,  ], [key,  , profiles], [ , profiles, ,], [profiles, ,, roles], [,, roles, ,], [roles, ,, competences], [,, competences, &], [competences, &,  ], [&,  , responsibilities], [ , responsibilities, use], [responsibilities, use,  ], [use,  , AI], [ , AI, Academy]]

>> Noun Phrases are: 
[recruit capability, key  profiles, roles, competences, responsibilities, the use, an AI Academy]

>> Named Entities are: 
[('AI Academy', 'ORG')] 


================================ Paragraph 223 =================================

AI capability  development 

------------------- Sentence 1 -------------------

AI capability  development 


>> Tokens are: 
[AI, capability,  , development] 

>> PoS Tags are: 
[('AI', 'NOUN'), ('capability', 'NOUN'), (' ', 'SPACE'), ('development', 'NOUN')] 

>> Dependency Tags are: 
[('AI', 'compound'), ('capability', 'nmod'), (' ', 'appos'), ('development', 'ROOT')]

>> Bigrams: 
[[AI, capability], [capability,  ], [ , development]]

>> Trigrams: 
[[AI, capability,  ], [capability,  , development]]

>> Noun Phrases are: 
[AI capability  development]

>> Named Entities are: 
[('AI', 'ORG')] 


================================ Paragraph 224 =================================

Information technology  supporting the AI  infrastructure, data and tools 

------------------- Sentence 1 -------------------

Information technology  supporting the AI  infrastructure, data and tools 


>> Tokens are: 
[Information, technology,  , supporting, AI,  , infrastructure, ,, data, tools] 

>> PoS Tags are: 
[('Information', 'NOUN'), ('technology', 'NOUN'), (' ', 'SPACE'), ('supporting', 'VERB'), ('AI', 'PROPN'), (' ', 'SPACE'), ('infrastructure', 'NOUN'), (',', 'PUNCT'), ('data', 'NOUN'), ('tools', 'NOUN')] 

>> Dependency Tags are: 
[('Information', 'compound'), ('technology', 'ROOT'), (' ', 'appos'), ('supporting', 'acl'), ('AI', 'nmod'), (' ', 'nummod'), ('infrastructure', 'dobj'), (',', 'punct'), ('data', 'conj'), ('tools', 'conj')]

>> Bigrams: 
[[Information, technology], [technology,  ], [ , supporting], [supporting, AI], [AI,  ], [ , infrastructure], [infrastructure, ,], [,, data], [data, tools]]

>> Trigrams: 
[[Information, technology,  ], [technology,  , supporting], [ , supporting, AI], [supporting, AI,  ], [AI,  , infrastructure], [ , infrastructure, ,], [infrastructure, ,, data], [,, data, tools]]

>> Noun Phrases are: 
[Information technology, the AI  infrastructure, data, tools]

>> Named Entities are: 
[('AI', 'ORG')] 


================================ Paragraph 225 =================================

Technology 

------------------- Sentence 1 -------------------

Technology 


>> Tokens are: 
[Technology] 

>> PoS Tags are: 
[('Technology', 'NOUN')] 

>> Dependency Tags are: 
[('Technology', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Technology]

>> Named Entities are: 
[] 


================================ Paragraph 226 =================================

Design and implement  model to measure and  develop performance 

------------------- Sentence 1 -------------------

Design and implement  model to measure and  develop performance 


>> Tokens are: 
[Design, implement,  , model, measure,  , develop, performance] 

>> PoS Tags are: 
[('Design', 'VERB'), ('implement', 'VERB'), (' ', 'SPACE'), ('model', 'NOUN'), ('measure', 'NOUN'), (' ', 'SPACE'), ('develop', 'VERB'), ('performance', 'NOUN')] 

>> Dependency Tags are: 
[('Design', 'ROOT'), ('implement', 'conj'), (' ', 'compound'), ('model', 'dobj'), ('measure', 'pobj'), (' ', 'nsubj'), ('develop', 'conj'), ('performance', 'dobj')]

>> Bigrams: 
[[Design, implement], [implement,  ], [ , model], [model, measure], [measure,  ], [ , develop], [develop, performance]]

>> Trigrams: 
[[Design, implement,  ], [implement,  , model], [ , model, measure], [model, measure,  ], [measure,  , develop], [ , develop, performance]]

>> Noun Phrases are: 
[ model, measure, performance]

>> Named Entities are: 
[] 


================================ Paragraph 227 =================================

Performance  management 

------------------- Sentence 1 -------------------

Performance  management 


>> Tokens are: 
[Performance,  , management] 

>> PoS Tags are: 
[('Performance', 'NOUN'), (' ', 'SPACE'), ('management', 'NOUN')] 

>> Dependency Tags are: 
[('Performance', 'nmod'), (' ', 'nummod'), ('management', 'ROOT')]

>> Bigrams: 
[[Performance,  ], [ , management]]

>> Trigrams: 
[[Performance,  , management]]

>> Noun Phrases are: 
[Performance  management]

>> Named Entities are: 
[] 


================================ Paragraph 228 =================================

Operating model + integration  for think, transform and thrive Operating model  

------------------- Sentence 1 -------------------

Operating model + integration  for think, transform and thrive Operating model   


>> Tokens are: 
[Operating, model, +, integration,  , think, ,, transform, thrive, Operating, model,  ] 

>> PoS Tags are: 
[('Operating', 'NOUN'), ('model', 'NOUN'), ('+', 'SYM'), ('integration', 'NOUN'), (' ', 'SPACE'), ('think', 'NOUN'), (',', 'PUNCT'), ('transform', 'NOUN'), ('thrive', 'VERB'), ('Operating', 'NOUN'), ('model', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Operating', 'compound'), ('model', 'ROOT'), ('+', 'cc'), ('integration', 'compound'), (' ', 'appos'), ('think', 'pobj'), (',', 'punct'), ('transform', 'conj'), ('thrive', 'conj'), ('Operating', 'compound'), ('model', 'dobj'), (' ', 'punct')]

>> Bigrams: 
[[Operating, model], [model, +], [+, integration], [integration,  ], [ , think], [think, ,], [,, transform], [transform, thrive], [thrive, Operating], [Operating, model], [model,  ]]

>> Trigrams: 
[[Operating, model, +], [model, +, integration], [+, integration,  ], [integration,  , think], [ , think, ,], [think, ,, transform], [,, transform, thrive], [transform, thrive, Operating], [thrive, Operating, model], [Operating, model,  ]]

>> Noun Phrases are: 
[Operating model, think, transform, Operating model]

>> Named Entities are: 
[] 


================================ Paragraph 229 =================================

Current state assessment  moving to strategic direction  and guiding principles.  Implementation roadmap 

------------------- Sentence 1 -------------------

Current state assessment  moving to strategic direction  and guiding principles. 


>> Tokens are: 
[Current, state, assessment,  , moving, strategic, direction,  , guiding, principles, .] 

>> PoS Tags are: 
[('Current', 'ADJ'), ('state', 'NOUN'), ('assessment', 'NOUN'), (' ', 'SPACE'), ('moving', 'VERB'), ('strategic', 'ADJ'), ('direction', 'NOUN'), (' ', 'SPACE'), ('guiding', 'VERB'), ('principles', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Current', 'amod'), ('state', 'compound'), ('assessment', 'ROOT'), (' ', 'nsubj'), ('moving', 'acl'), ('strategic', 'amod'), ('direction', 'pobj'), (' ', 'dobj'), ('guiding', 'amod'), ('principles', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[Current, state], [state, assessment], [assessment,  ], [ , moving], [moving, strategic], [strategic, direction], [direction,  ], [ , guiding], [guiding, principles], [principles, .]]

>> Trigrams: 
[[Current, state, assessment], [state, assessment,  ], [assessment,  , moving], [ , moving, strategic], [moving, strategic, direction], [strategic, direction,  ], [direction,  , guiding], [ , guiding, principles], [guiding, principles, .]]

>> Noun Phrases are: 
[Current state assessment, strategic direction, guiding principles]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

Implementation roadmap 


>> Tokens are: 
[Implementation, roadmap] 

>> PoS Tags are: 
[('Implementation', 'NOUN'), ('roadmap', 'NOUN')] 

>> Dependency Tags are: 
[('Implementation', 'compound'), ('roadmap', 'ROOT')]

>> Bigrams: 
[[Implementation, roadmap]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Implementation roadmap]

>> Named Entities are: 
[] 


================================ Paragraph 230 =================================

Ambition & roadmap 

------------------- Sentence 1 -------------------

Ambition & roadmap 


>> Tokens are: 
[Ambition, &, roadmap] 

>> PoS Tags are: 
[('Ambition', 'PROPN'), ('&', 'CCONJ'), ('roadmap', 'NOUN')] 

>> Dependency Tags are: 
[('Ambition', 'ROOT'), ('&', 'cc'), ('roadmap', 'conj')]

>> Bigrams: 
[[Ambition, &], [&, roadmap]]

>> Trigrams: 
[[Ambition, &, roadmap]]

>> Noun Phrases are: 
[Ambition, roadmap]

>> Named Entities are: 
[('Ambition &', 'ORG')] 


================================ Paragraph 231 =================================

Change and integration  management, culture  strategy alignment  

------------------- Sentence 1 -------------------

Change and integration  management, culture  strategy alignment   


>> Tokens are: 
[Change, integration,  , management, ,, culture,  , strategy, alignment,  ] 

>> PoS Tags are: 
[('Change', 'NOUN'), ('integration', 'NOUN'), (' ', 'SPACE'), ('management', 'NOUN'), (',', 'PUNCT'), ('culture', 'NOUN'), (' ', 'SPACE'), ('strategy', 'NOUN'), ('alignment', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Change', 'nmod'), ('integration', 'compound'), (' ', 'conj'), ('management', 'nmod'), (',', 'punct'), ('culture', 'compound'), (' ', 'punct'), ('strategy', 'compound'), ('alignment', 'compound'), (' ', 'ROOT')]

>> Bigrams: 
[[Change, integration], [integration,  ], [ , management], [management, ,], [,, culture], [culture,  ], [ , strategy], [strategy, alignment], [alignment,  ]]

>> Trigrams: 
[[Change, integration,  ], [integration,  , management], [ , management, ,], [management, ,, culture], [,, culture,  ], [culture,  , strategy], [ , strategy, alignment], [strategy, alignment,  ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 232 =================================

Change  management &  communication 

------------------- Sentence 1 -------------------

Change  management &  communication 


>> Tokens are: 
[Change,  , management, &,  , communication] 

>> PoS Tags are: 
[('Change', 'VERB'), (' ', 'SPACE'), ('management', 'NOUN'), ('&', 'CCONJ'), (' ', 'SPACE'), ('communication', 'NOUN')] 

>> Dependency Tags are: 
[('Change', 'nmod'), (' ', 'punct'), ('management', 'nmod'), ('&', 'cc'), (' ', 'conj'), ('communication', 'ROOT')]

>> Bigrams: 
[[Change,  ], [ , management], [management, &], [&,  ], [ , communication]]

>> Trigrams: 
[[Change,  , management], [ , management, &], [management, &,  ], [&,  , communication]]

>> Noun Phrases are: 
[Change  management &  communication]

>> Named Entities are: 
[] 


================================ Paragraph 233 =================================

Service line functional scope,  Geo, BU, process, growth  model, country support  

------------------- Sentence 1 -------------------

Service line functional scope,  Geo, BU, process, growth  model, country support   


>> Tokens are: 
[Service, line, functional, scope, ,,  , Geo, ,, BU, ,, process, ,, growth,  , model, ,, country, support,  ] 

>> PoS Tags are: 
[('Service', 'NOUN'), ('line', 'NOUN'), ('functional', 'ADJ'), ('scope', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('Geo', 'PROPN'), (',', 'PUNCT'), ('BU', 'NOUN'), (',', 'PUNCT'), ('process', 'NOUN'), (',', 'PUNCT'), ('growth', 'NOUN'), (' ', 'SPACE'), ('model', 'NOUN'), (',', 'PUNCT'), ('country', 'NOUN'), ('support', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Service', 'compound'), ('line', 'nmod'), ('functional', 'amod'), ('scope', 'ROOT'), (',', 'punct'), (' ', 'compound'), ('Geo', 'appos'), (',', 'punct'), ('BU', 'nmod'), (',', 'punct'), ('process', 'conj'), (',', 'punct'), ('growth', 'nmod'), (' ', 'punct'), ('model', 'conj'), (',', 'punct'), ('country', 'compound'), ('support', 'appos'), (' ', 'punct')]

>> Bigrams: 
[[Service, line], [line, functional], [functional, scope], [scope, ,], [,,  ], [ , Geo], [Geo, ,], [,, BU], [BU, ,], [,, process], [process, ,], [,, growth], [growth,  ], [ , model], [model, ,], [,, country], [country, support], [support,  ]]

>> Trigrams: 
[[Service, line, functional], [line, functional, scope], [functional, scope, ,], [scope, ,,  ], [,,  , Geo], [ , Geo, ,], [Geo, ,, BU], [,, BU, ,], [BU, ,, process], [,, process, ,], [process, ,, growth], [,, growth,  ], [growth,  , model], [ , model, ,], [model, ,, country], [,, country, support], [country, support,  ]]

>> Noun Phrases are: 
[Service line functional scope,  Geo, BU, process, growth  model, country support]

>> Named Entities are: 
[] 


================================ Paragraph 234 =================================

Organization  structure  governance 

------------------- Sentence 1 -------------------

Organization  structure  governance 


>> Tokens are: 
[Organization,  , structure,  , governance] 

>> PoS Tags are: 
[('Organization', 'NOUN'), (' ', 'SPACE'), ('structure', 'NOUN'), (' ', 'SPACE'), ('governance', 'NOUN')] 

>> Dependency Tags are: 
[('Organization', 'nmod'), (' ', 'nummod'), ('structure', 'appos'), (' ', 'nummod'), ('governance', 'ROOT')]

>> Bigrams: 
[[Organization,  ], [ , structure], [structure,  ], [ , governance]]

>> Trigrams: 
[[Organization,  , structure], [ , structure,  ], [structure,  , governance]]

>> Noun Phrases are: 
[structure]

>> Named Entities are: 
[] 


================================ Paragraph 235 =================================

Design, validate, transform.  Includes demand  management, prioritisation,  delivery methodology,  assurance and value  management, KPI definition 

------------------- Sentence 1 -------------------

Design, validate, transform.   


>> Tokens are: 
[Design, ,, validate, ,, transform, .,  ] 

>> PoS Tags are: 
[('Design', 'NOUN'), (',', 'PUNCT'), ('validate', 'VERB'), (',', 'PUNCT'), ('transform', 'NOUN'), ('.', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Design', 'ROOT'), (',', 'punct'), ('validate', 'conj'), (',', 'punct'), ('transform', 'conj'), ('.', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[Design, ,], [,, validate], [validate, ,], [,, transform], [transform, .], [.,  ]]

>> Trigrams: 
[[Design, ,, validate], [,, validate, ,], [validate, ,, transform], [,, transform, .], [transform, .,  ]]

>> Noun Phrases are: 
[Design, transform]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Includes demand  management, prioritisation,  delivery methodology,  assurance and value  management, 


>> Tokens are: 
[Includes, demand,  , management, ,, prioritisation, ,,  , delivery, methodology, ,,  , assurance, value,  , management, ,] 

>> PoS Tags are: 
[('Includes', 'VERB'), ('demand', 'NOUN'), (' ', 'SPACE'), ('management', 'NOUN'), (',', 'PUNCT'), ('prioritisation', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('delivery', 'NOUN'), ('methodology', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('assurance', 'NOUN'), ('value', 'NOUN'), (' ', 'SPACE'), ('management', 'NOUN'), (',', 'PUNCT')] 

>> Dependency Tags are: 
[('Includes', 'ROOT'), ('demand', 'compound'), (' ', 'compound'), ('management', 'dobj'), (',', 'punct'), ('prioritisation', 'conj'), (',', 'punct'), (' ', 'compound'), ('delivery', 'compound'), ('methodology', 'conj'), (',', 'punct'), (' ', 'appos'), ('assurance', 'conj'), ('value', 'compound'), (' ', 'compound'), ('management', 'conj'), (',', 'punct')]

>> Bigrams: 
[[Includes, demand], [demand,  ], [ , management], [management, ,], [,, prioritisation], [prioritisation, ,], [,,  ], [ , delivery], [delivery, methodology], [methodology, ,], [,,  ], [ , assurance], [assurance, value], [value,  ], [ , management], [management, ,]]

>> Trigrams: 
[[Includes, demand,  ], [demand,  , management], [ , management, ,], [management, ,, prioritisation], [,, prioritisation, ,], [prioritisation, ,,  ], [,,  , delivery], [ , delivery, methodology], [delivery, methodology, ,], [methodology, ,,  ], [,,  , assurance], [ , assurance, value], [assurance, value,  ], [value,  , management], [ , management, ,]]

>> Noun Phrases are: 
[demand  management, prioritisation,  delivery methodology, assurance, value  management]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

KPI definition 


>> Tokens are: 
[KPI, definition] 

>> PoS Tags are: 
[('KPI', 'NOUN'), ('definition', 'NOUN')] 

>> Dependency Tags are: 
[('KPI', 'compound'), ('definition', 'ROOT')]

>> Bigrams: 
[[KPI, definition]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[KPI definition]

>> Named Entities are: 
[('KPI', 'ORG')] 


================================ Paragraph 236 =================================

Demand  generation 

------------------- Sentence 1 -------------------

Demand  generation 


>> Tokens are: 
[Demand,  , generation] 

>> PoS Tags are: 
[('Demand', 'NOUN'), (' ', 'SPACE'), ('generation', 'NOUN')] 

>> Dependency Tags are: 
[('Demand', 'nmod'), (' ', 'nummod'), ('generation', 'ROOT')]

>> Bigrams: 
[[Demand,  ], [ , generation]]

>> Trigrams: 
[[Demand,  , generation]]

>> Noun Phrases are: 
[Demand  generation]

>> Named Entities are: 
[] 


================================ Paragraph 237 =================================

IBM Garage  for AI

------------------- Sentence 1 -------------------

IBM Garage  for AI 


>> Tokens are: 
[IBM, Garage,  , AI] 

>> PoS Tags are: 
[('IBM', 'PROPN'), ('Garage', 'PROPN'), (' ', 'SPACE'), ('AI', 'PROPN')] 

>> Dependency Tags are: 
[('IBM', 'compound'), ('Garage', 'ROOT'), (' ', 'appos'), ('AI', 'pobj')]

>> Bigrams: 
[[IBM, Garage], [Garage,  ], [ , AI]]

>> Trigrams: 
[[IBM, Garage,  ], [Garage,  , AI]]

>> Noun Phrases are: 
[IBM Garage, AI]

>> Named Entities are: 
[('IBM', 'ORG')] 


================================ Paragraph 238 =================================

16     Beyond the hype: A guide to understanding and successfully implementing artificial intelligence within your business 

------------------- Sentence 1 -------------------

16     Beyond the hype: A guide to understanding and successfully implementing artificial intelligence within your business 


>> Tokens are: 
[16,     , hype, :, guide, understanding, successfully, implementing, artificial, intelligence, business] 

>> PoS Tags are: 
[('16', 'NUM'), ('    ', 'SPACE'), ('hype', 'NOUN'), (':', 'PUNCT'), ('guide', 'NOUN'), ('understanding', 'NOUN'), ('successfully', 'ADV'), ('implementing', 'VERB'), ('artificial', 'ADJ'), ('intelligence', 'NOUN'), ('business', 'NOUN')] 

>> Dependency Tags are: 
[('16', 'nummod'), ('    ', 'ROOT'), ('hype', 'pobj'), (':', 'punct'), ('guide', 'appos'), ('understanding', 'pobj'), ('successfully', 'advmod'), ('implementing', 'acl'), ('artificial', 'amod'), ('intelligence', 'dobj'), ('business', 'pobj')]

>> Bigrams: 
[[16,     ], [    , hype], [hype, :], [:, guide], [guide, understanding], [understanding, successfully], [successfully, implementing], [implementing, artificial], [artificial, intelligence], [intelligence, business]]

>> Trigrams: 
[[16,     , hype], [    , hype, :], [hype, :, guide], [:, guide, understanding], [guide, understanding, successfully], [understanding, successfully, implementing], [successfully, implementing, artificial], [implementing, artificial, intelligence], [artificial, intelligence, business]]

>> Noun Phrases are: 
[the hype, A guide, understanding, artificial intelligence, your business]

>> Named Entities are: 
[] 


================================ Paragraph 239 =================================

Figure 7: The IBM stages of implementing AI. 

------------------- Sentence 1 -------------------

Figure 7: The IBM stages of implementing AI. 


>> Tokens are: 
[Figure, 7, :, IBM, stages, implementing, AI, .] 

>> PoS Tags are: 
[('Figure', 'VERB'), ('7', 'NUM'), (':', 'PUNCT'), ('IBM', 'PROPN'), ('stages', 'VERB'), ('implementing', 'VERB'), ('AI', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Figure', 'ROOT'), ('7', 'nummod'), (':', 'punct'), ('IBM', 'compound'), ('stages', 'appos'), ('implementing', 'pcomp'), ('AI', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Figure, 7], [7, :], [:, IBM], [IBM, stages], [stages, implementing], [implementing, AI], [AI, .]]

>> Trigrams: 
[[Figure, 7, :], [7, :, IBM], [:, IBM, stages], [IBM, stages, implementing], [stages, implementing, AI], [implementing, AI, .]]

>> Noun Phrases are: 
[AI]

>> Named Entities are: 
[('7', 'CARDINAL'), ('IBM', 'ORG'), ('AI', 'ORG')] 


================================ Paragraph 240 =================================

Plan on a page to start the journey with the IBM Garage for AI 

------------------- Sentence 1 -------------------

Plan on a page to start the journey with the IBM Garage for AI 


>> Tokens are: 
[Plan, page, start, journey, IBM, Garage, AI] 

>> PoS Tags are: 
[('Plan', 'NOUN'), ('page', 'NOUN'), ('start', 'VERB'), ('journey', 'NOUN'), ('IBM', 'PROPN'), ('Garage', 'PROPN'), ('AI', 'PROPN')] 

>> Dependency Tags are: 
[('Plan', 'ROOT'), ('page', 'pobj'), ('start', 'acl'), ('journey', 'dobj'), ('IBM', 'compound'), ('Garage', 'pobj'), ('AI', 'pobj')]

>> Bigrams: 
[[Plan, page], [page, start], [start, journey], [journey, IBM], [IBM, Garage], [Garage, AI]]

>> Trigrams: 
[[Plan, page, start], [page, start, journey], [start, journey, IBM], [journey, IBM, Garage], [IBM, Garage, AI]]

>> Noun Phrases are: 
[Plan, a page, the journey, the IBM Garage, AI]

>> Named Entities are: 
[('the IBM Garage', 'ORG'), ('AI', 'ORG')] 


================================ Paragraph 241 =================================

THINK 

------------------- Sentence 1 -------------------

THINK 


>> Tokens are: 
[THINK] 

>> PoS Tags are: 
[('THINK', 'VERB')] 

>> Dependency Tags are: 
[('THINK', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 242 =================================

Set ambition  and organization 

------------------- Sentence 1 -------------------

Set ambition  and organization 


>> Tokens are: 
[Set, ambition,  , organization] 

>> PoS Tags are: 
[('Set', 'VERB'), ('ambition', 'NOUN'), (' ', 'SPACE'), ('organization', 'NOUN')] 

>> Dependency Tags are: 
[('Set', 'ROOT'), ('ambition', 'compound'), (' ', 'dobj'), ('organization', 'conj')]

>> Bigrams: 
[[Set, ambition], [ambition,  ], [ , organization]]

>> Trigrams: 
[[Set, ambition,  ], [ambition,  , organization]]

>> Noun Phrases are: 
[organization]

>> Named Entities are: 
[] 


================================ Paragraph 243 =================================

Drive demand  and innovate 

------------------- Sentence 1 -------------------

Drive demand  and innovate 


>> Tokens are: 
[Drive, demand,  , innovate] 

>> PoS Tags are: 
[('Drive', 'NOUN'), ('demand', 'NOUN'), (' ', 'SPACE'), ('innovate', 'VERB')] 

>> Dependency Tags are: 
[('Drive', 'amod'), ('demand', 'compound'), (' ', 'ROOT'), ('innovate', 'conj')]

>> Bigrams: 
[[Drive, demand], [demand,  ], [ , innovate]]

>> Trigrams: 
[[Drive, demand,  ], [demand,  , innovate]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 244 =================================

TRANSFORM 

------------------- Sentence 1 -------------------

TRANSFORM 


>> Tokens are: 
[TRANSFORM] 

>> PoS Tags are: 
[('TRANSFORM', 'NOUN')] 

>> Dependency Tags are: 
[('TRANSFORM', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[TRANSFORM]

>> Named Entities are: 
[] 


================================ Paragraph 245 =================================

Drive to  production 

------------------- Sentence 1 -------------------

Drive to  production 


>> Tokens are: 
[Drive,  , production] 

>> PoS Tags are: 
[('Drive', 'VERB'), (' ', 'SPACE'), ('production', 'NOUN')] 

>> Dependency Tags are: 
[('Drive', 'ROOT'), (' ', 'pobj'), ('production', 'dobj')]

>> Bigrams: 
[[Drive,  ], [ , production]]

>> Trigrams: 
[[Drive,  , production]]

>> Noun Phrases are: 
[production]

>> Named Entities are: 
[] 


================================ Paragraph 246 =================================

THRIVE 

------------------- Sentence 1 -------------------

THRIVE 


>> Tokens are: 
[THRIVE] 

>> PoS Tags are: 
[('THRIVE', 'PROPN')] 

>> Dependency Tags are: 
[('THRIVE', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[THRIVE]

>> Named Entities are: 
[] 


================================ Paragraph 247 =================================

Scale up 

------------------- Sentence 1 -------------------

Scale up 


>> Tokens are: 
[Scale] 

>> PoS Tags are: 
[('Scale', 'VERB')] 

>> Dependency Tags are: 
[('Scale', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 248 =================================

The “Think” phase is a process dedicated to thinking,  experimenting, and proving, with the end user at the heart  of your innovation. We start with ideas and get to working  concepts fast, incorporating feedback in real time. 

------------------- Sentence 1 -------------------

The “Think” phase is a process dedicated to thinking,  experimenting, and proving, with the end user at the heart  of your innovation. 


>> Tokens are: 
[“, Think, ”, phase, process, dedicated, thinking, ,,  , experimenting, ,, proving, ,, end, user, heart,  , innovation, .] 

>> PoS Tags are: 
[('“', 'PUNCT'), ('Think', 'PROPN'), ('”', 'PUNCT'), ('phase', 'NOUN'), ('process', 'NOUN'), ('dedicated', 'VERB'), ('thinking', 'VERB'), (',', 'PUNCT'), (' ', 'SPACE'), ('experimenting', 'VERB'), (',', 'PUNCT'), ('proving', 'VERB'), (',', 'PUNCT'), ('end', 'NOUN'), ('user', 'NOUN'), ('heart', 'NOUN'), (' ', 'SPACE'), ('innovation', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('“', 'punct'), ('Think', 'nmod'), ('”', 'punct'), ('phase', 'nsubj'), ('process', 'attr'), ('dedicated', 'acl'), ('thinking', 'pobj'), (',', 'punct'), (' ', 'nsubj'), ('experimenting', 'conj'), (',', 'punct'), ('proving', 'conj'), (',', 'punct'), ('end', 'compound'), ('user', 'pobj'), ('heart', 'pobj'), (' ', 'appos'), ('innovation', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[“, Think], [Think, ”], [”, phase], [phase, process], [process, dedicated], [dedicated, thinking], [thinking, ,], [,,  ], [ , experimenting], [experimenting, ,], [,, proving], [proving, ,], [,, end], [end, user], [user, heart], [heart,  ], [ , innovation], [innovation, .]]

>> Trigrams: 
[[“, Think, ”], [Think, ”, phase], [”, phase, process], [phase, process, dedicated], [process, dedicated, thinking], [dedicated, thinking, ,], [thinking, ,,  ], [,,  , experimenting], [ , experimenting, ,], [experimenting, ,, proving], [,, proving, ,], [proving, ,, end], [,, end, user], [end, user, heart], [user, heart,  ], [heart,  , innovation], [ , innovation, .]]

>> Noun Phrases are: 
[The “Think” phase, a process, the end user, the heart, your innovation]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

We start with ideas and get to working  concepts fast, incorporating feedback in real time. 


>> Tokens are: 
[start, ideas, working,  , concepts, fast, ,, incorporating, feedback, real, time, .] 

>> PoS Tags are: 
[('start', 'VERB'), ('ideas', 'NOUN'), ('working', 'VERB'), (' ', 'SPACE'), ('concepts', 'NOUN'), ('fast', 'ADV'), (',', 'PUNCT'), ('incorporating', 'VERB'), ('feedback', 'NOUN'), ('real', 'ADJ'), ('time', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('start', 'ROOT'), ('ideas', 'pobj'), ('working', 'pcomp'), (' ', 'compound'), ('concepts', 'dobj'), ('fast', 'advmod'), (',', 'punct'), ('incorporating', 'advcl'), ('feedback', 'dobj'), ('real', 'amod'), ('time', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[start, ideas], [ideas, working], [working,  ], [ , concepts], [concepts, fast], [fast, ,], [,, incorporating], [incorporating, feedback], [feedback, real], [real, time], [time, .]]

>> Trigrams: 
[[start, ideas, working], [ideas, working,  ], [working,  , concepts], [ , concepts, fast], [concepts, fast, ,], [fast, ,, incorporating], [,, incorporating, feedback], [incorporating, feedback, real], [feedback, real, time], [real, time, .]]

>> Noun Phrases are: 
[We, ideas,  concepts, feedback, real time]

>> Named Entities are: 
[] 


================================ Paragraph 249 =================================

IBM helps you get prepared first, in a fast, pressure-cooker  environment. This helps you to kickstart your AI journey.  IBM works with you to deliver an assessment of your  current AI capabilities.  

------------------- Sentence 1 -------------------

IBM helps you get prepared first, in a fast, pressure-cooker  environment. 


>> Tokens are: 
[IBM, helps, prepared, ,, fast, ,, pressure, -, cooker,  , environment, .] 

>> PoS Tags are: 
[('IBM', 'PROPN'), ('helps', 'VERB'), ('prepared', 'VERB'), (',', 'PUNCT'), ('fast', 'ADJ'), (',', 'PUNCT'), ('pressure', 'NOUN'), ('-', 'PUNCT'), ('cooker', 'NOUN'), (' ', 'SPACE'), ('environment', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('IBM', 'nsubj'), ('helps', 'ROOT'), ('prepared', 'ccomp'), (',', 'punct'), ('fast', 'amod'), (',', 'punct'), ('pressure', 'compound'), ('-', 'punct'), ('cooker', 'nmod'), (' ', 'punct'), ('environment', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[IBM, helps], [helps, prepared], [prepared, ,], [,, fast], [fast, ,], [,, pressure], [pressure, -], [-, cooker], [cooker,  ], [ , environment], [environment, .]]

>> Trigrams: 
[[IBM, helps, prepared], [helps, prepared, ,], [prepared, ,, fast], [,, fast, ,], [fast, ,, pressure], [,, pressure, -], [pressure, -, cooker], [-, cooker,  ], [cooker,  , environment], [ , environment, .]]

>> Noun Phrases are: 
[IBM, you, a fast, pressure-cooker  environment]

>> Named Entities are: 
[('IBM', 'ORG'), ('first', 'ORDINAL')] 

------------------- Sentence 2 -------------------

This helps you to kickstart your AI journey. 


>> Tokens are: 
[helps, kickstart, AI, journey, .] 

>> PoS Tags are: 
[('helps', 'VERB'), ('kickstart', 'VERB'), ('AI', 'PROPN'), ('journey', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('helps', 'ROOT'), ('kickstart', 'ccomp'), ('AI', 'compound'), ('journey', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[helps, kickstart], [kickstart, AI], [AI, journey], [journey, .]]

>> Trigrams: 
[[helps, kickstart, AI], [kickstart, AI, journey], [AI, journey, .]]

>> Noun Phrases are: 
[you, your AI journey]

>> Named Entities are: 
[('AI', 'ORG')] 

------------------- Sentence 3 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

IBM works with you to deliver an assessment of your  current AI capabilities.   


>> Tokens are: 
[IBM, works, deliver, assessment,  , current, AI, capabilities, .,  ] 

>> PoS Tags are: 
[('IBM', 'PROPN'), ('works', 'VERB'), ('deliver', 'VERB'), ('assessment', 'NOUN'), (' ', 'SPACE'), ('current', 'ADJ'), ('AI', 'PROPN'), ('capabilities', 'NOUN'), ('.', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('IBM', 'nsubj'), ('works', 'ROOT'), ('deliver', 'advcl'), ('assessment', 'dobj'), (' ', 'amod'), ('current', 'amod'), ('AI', 'compound'), ('capabilities', 'pobj'), ('.', 'punct'), (' ', 'dobj')]

>> Bigrams: 
[[IBM, works], [works, deliver], [deliver, assessment], [assessment,  ], [ , current], [current, AI], [AI, capabilities], [capabilities, .], [.,  ]]

>> Trigrams: 
[[IBM, works, deliver], [works, deliver, assessment], [deliver, assessment,  ], [assessment,  , current], [ , current, AI], [current, AI, capabilities], [AI, capabilities, .], [capabilities, .,  ]]

>> Noun Phrases are: 
[IBM, you, an assessment, your  current AI capabilities]

>> Named Entities are: 
[('IBM', 'ORG'), ('AI', 'ORG')] 


================================ Paragraph 250 =================================

In assessing your current AI capabilities, IBM looks at  many different aspects, some of which are: 

------------------- Sentence 1 -------------------

In assessing your current AI capabilities, IBM looks at  many different aspects, some of which are: 


>> Tokens are: 
[assessing, current, AI, capabilities, ,, IBM, looks,  , different, aspects, ,, :] 

>> PoS Tags are: 
[('assessing', 'VERB'), ('current', 'ADJ'), ('AI', 'PROPN'), ('capabilities', 'NOUN'), (',', 'PUNCT'), ('IBM', 'PROPN'), ('looks', 'VERB'), (' ', 'SPACE'), ('different', 'ADJ'), ('aspects', 'NOUN'), (',', 'PUNCT'), (':', 'PUNCT')] 

>> Dependency Tags are: 
[('assessing', 'pcomp'), ('current', 'amod'), ('AI', 'compound'), ('capabilities', 'dobj'), (',', 'punct'), ('IBM', 'nsubj'), ('looks', 'ROOT'), (' ', 'pobj'), ('different', 'amod'), ('aspects', 'pobj'), (',', 'punct'), (':', 'punct')]

>> Bigrams: 
[[assessing, current], [current, AI], [AI, capabilities], [capabilities, ,], [,, IBM], [IBM, looks], [looks,  ], [ , different], [different, aspects], [aspects, ,], [,, :]]

>> Trigrams: 
[[assessing, current, AI], [current, AI, capabilities], [AI, capabilities, ,], [capabilities, ,, IBM], [,, IBM, looks], [IBM, looks,  ], [looks,  , different], [ , different, aspects], [different, aspects, ,], [aspects, ,, :]]

>> Noun Phrases are: 
[your current AI capabilities, IBM, many different aspects]

>> Named Entities are: 
[('AI', 'ORG'), ('IBM', 'ORG')] 


================================ Paragraph 251 =================================

 — Systems: What does your innovation system look like?  — People: How skilled is your staff in AI?  — Organization: How do you position AI expertise in   your organization? 

------------------- Sentence 1 -------------------

 — Systems: What does your innovation system look like? 


>> Tokens are: 
[ , —, Systems, :, innovation, system, look, like, ?] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('—', 'PUNCT'), ('Systems', 'PROPN'), (':', 'PUNCT'), ('innovation', 'NOUN'), ('system', 'NOUN'), ('look', 'VERB'), ('like', 'ADP'), ('?', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'dep'), ('—', 'punct'), ('Systems', 'appos'), (':', 'punct'), ('innovation', 'compound'), ('system', 'nsubj'), ('look', 'ROOT'), ('like', 'prep'), ('?', 'punct')]

>> Bigrams: 
[[ , —], [—, Systems], [Systems, :], [:, innovation], [innovation, system], [system, look], [look, like], [like, ?]]

>> Trigrams: 
[[ , —, Systems], [—, Systems, :], [Systems, :, innovation], [:, innovation, system], [innovation, system, look], [system, look, like], [look, like, ?]]

>> Noun Phrases are: 
[Systems, What, your innovation system]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

 — People: How skilled is your staff in AI?  — Organization: How do you position AI expertise in   your organization? 


>> Tokens are: 
[ , —, People, :, skilled, staff, AI, ?,  , —, Organization, :, position, AI, expertise,   , organization, ?] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('—', 'PUNCT'), ('People', 'NOUN'), (':', 'PUNCT'), ('skilled', 'ADJ'), ('staff', 'NOUN'), ('AI', 'PROPN'), ('?', 'PUNCT'), (' ', 'SPACE'), ('—', 'PUNCT'), ('Organization', 'NOUN'), (':', 'PUNCT'), ('position', 'VERB'), ('AI', 'PROPN'), ('expertise', 'NOUN'), ('  ', 'SPACE'), ('organization', 'NOUN'), ('?', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'nsubj'), ('—', 'punct'), ('People', 'appos'), (':', 'punct'), ('skilled', 'acomp'), ('staff', 'attr'), ('AI', 'pobj'), ('?', 'punct'), (' ', 'nsubj'), ('—', 'punct'), ('Organization', 'appos'), (':', 'punct'), ('position', 'ROOT'), ('AI', 'compound'), ('expertise', 'dobj'), ('  ', 'pobj'), ('organization', 'dobj'), ('?', 'punct')]

>> Bigrams: 
[[ , —], [—, People], [People, :], [:, skilled], [skilled, staff], [staff, AI], [AI, ?], [?,  ], [ , —], [—, Organization], [Organization, :], [:, position], [position, AI], [AI, expertise], [expertise,   ], [  , organization], [organization, ?]]

>> Trigrams: 
[[ , —, People], [—, People, :], [People, :, skilled], [:, skilled, staff], [skilled, staff, AI], [staff, AI, ?], [AI, ?,  ], [?,  , —], [ , —, Organization], [—, Organization, :], [Organization, :, position], [:, position, AI], [position, AI, expertise], [AI, expertise,   ], [expertise,   , organization], [  , organization, ?]]

>> Noun Phrases are: 
[People, your staff, AI, Organization, you, AI expertise, your organization]

>> Named Entities are: 
[('AI', 'ORG'), ('AI', 'ORG')] 


================================ Paragraph 252 =================================

 — Culture: Do you operate in an agile fashion?  — Data: How readily available is your data?  — Technology: Does your current architecture enable AI? 

------------------- Sentence 1 -------------------

 — Culture: Do you operate in an agile fashion? 


>> Tokens are: 
[ , —, Culture, :, operate, agile, fashion, ?] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('—', 'PUNCT'), ('Culture', 'NOUN'), (':', 'PUNCT'), ('operate', 'VERB'), ('agile', 'ADJ'), ('fashion', 'NOUN'), ('?', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'dep'), ('—', 'punct'), ('Culture', 'appos'), (':', 'punct'), ('operate', 'ROOT'), ('agile', 'amod'), ('fashion', 'pobj'), ('?', 'punct')]

>> Bigrams: 
[[ , —], [—, Culture], [Culture, :], [:, operate], [operate, agile], [agile, fashion], [fashion, ?]]

>> Trigrams: 
[[ , —, Culture], [—, Culture, :], [Culture, :, operate], [:, operate, agile], [operate, agile, fashion], [agile, fashion, ?]]

>> Noun Phrases are: 
[Culture, you, an agile fashion]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

 — Data: How readily available is your data? 


>> Tokens are: 
[ , —, Data, :, readily, available, data, ?] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('—', 'PUNCT'), ('Data', 'NOUN'), (':', 'PUNCT'), ('readily', 'ADV'), ('available', 'ADJ'), ('data', 'NOUN'), ('?', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'nsubj'), ('—', 'punct'), ('Data', 'appos'), (':', 'punct'), ('readily', 'advmod'), ('available', 'acomp'), ('data', 'attr'), ('?', 'punct')]

>> Bigrams: 
[[ , —], [—, Data], [Data, :], [:, readily], [readily, available], [available, data], [data, ?]]

>> Trigrams: 
[[ , —, Data], [—, Data, :], [Data, :, readily], [:, readily, available], [readily, available, data], [available, data, ?]]

>> Noun Phrases are: 
[Data, your data]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

 — Technology: Does your current architecture enable AI? 


>> Tokens are: 
[ , —, Technology, :, current, architecture, enable, AI, ?] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('—', 'PUNCT'), ('Technology', 'NOUN'), (':', 'PUNCT'), ('current', 'ADJ'), ('architecture', 'NOUN'), ('enable', 'NOUN'), ('AI', 'PROPN'), ('?', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'dep'), ('—', 'punct'), ('Technology', 'appos'), (':', 'punct'), ('current', 'amod'), ('architecture', 'nsubj'), ('enable', 'ROOT'), ('AI', 'dobj'), ('?', 'punct')]

>> Bigrams: 
[[ , —], [—, Technology], [Technology, :], [:, current], [current, architecture], [architecture, enable], [enable, AI], [AI, ?]]

>> Trigrams: 
[[ , —, Technology], [—, Technology, :], [Technology, :, current], [:, current, architecture], [current, architecture, enable], [architecture, enable, AI], [enable, AI, ?]]

>> Noun Phrases are: 
[Technology, your current architecture, AI]

>> Named Entities are: 
[('AI', 'ORG')] 


================================ Paragraph 253 =================================

IBM works with you to define your AI Ambition as a high- level AI strategic direction by looking at “big ideas” and  by reflecting on persona’s and their user stories. A persona  can be a marketing manager or a product developer. This  ambition is translated into a roadmap and a high-level  business case. IBM also supports you to select the most  favorable operating model to move forward. 

------------------- Sentence 1 -------------------

IBM works with you to define your AI Ambition as a high- level AI strategic direction by looking at “big ideas” and  by reflecting on persona’s and their user stories. 


>> Tokens are: 
[IBM, works, define, AI, Ambition, high-, level, AI, strategic, direction, looking, “, big, ideas, ”,  , reflecting, persona, user, stories, .] 

>> PoS Tags are: 
[('IBM', 'PROPN'), ('works', 'VERB'), ('define', 'VERB'), ('AI', 'PROPN'), ('Ambition', 'PROPN'), ('high-', 'NOUN'), ('level', 'NOUN'), ('AI', 'PROPN'), ('strategic', 'ADJ'), ('direction', 'NOUN'), ('looking', 'VERB'), ('“', 'PUNCT'), ('big', 'ADJ'), ('ideas', 'NOUN'), ('”', 'PUNCT'), (' ', 'SPACE'), ('reflecting', 'VERB'), ('persona', 'NOUN'), ('user', 'NOUN'), ('stories', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('IBM', 'nsubj'), ('works', 'ROOT'), ('define', 'advcl'), ('AI', 'compound'), ('Ambition', 'dobj'), ('high-', 'compound'), ('level', 'nmod'), ('AI', 'nmod'), ('strategic', 'amod'), ('direction', 'pobj'), ('looking', 'pcomp'), ('“', 'punct'), ('big', 'amod'), ('ideas', 'pobj'), ('”', 'punct'), (' ', 'conj'), ('reflecting', 'pcomp'), ('persona', 'pobj'), ('user', 'compound'), ('stories', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[IBM, works], [works, define], [define, AI], [AI, Ambition], [Ambition, high-], [high-, level], [level, AI], [AI, strategic], [strategic, direction], [direction, looking], [looking, “], [“, big], [big, ideas], [ideas, ”], [”,  ], [ , reflecting], [reflecting, persona], [persona, user], [user, stories], [stories, .]]

>> Trigrams: 
[[IBM, works, define], [works, define, AI], [define, AI, Ambition], [AI, Ambition, high-], [Ambition, high-, level], [high-, level, AI], [level, AI, strategic], [AI, strategic, direction], [strategic, direction, looking], [direction, looking, “], [looking, “, big], [“, big, ideas], [big, ideas, ”], [ideas, ”,  ], [”,  , reflecting], [ , reflecting, persona], [reflecting, persona, user], [persona, user, stories], [user, stories, .]]

>> Noun Phrases are: 
[IBM, you, your AI Ambition, a high- level AI strategic direction, big ideas, persona, their user stories]

>> Named Entities are: 
[('IBM', 'ORG'), ('AI Ambition', 'ORG'), ('AI', 'ORG')] 

------------------- Sentence 2 -------------------

A persona  can be a marketing manager or a product developer. 


>> Tokens are: 
[persona,  , marketing, manager, product, developer, .] 

>> PoS Tags are: 
[('persona', 'NOUN'), (' ', 'SPACE'), ('marketing', 'NOUN'), ('manager', 'NOUN'), ('product', 'NOUN'), ('developer', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('persona', 'nsubj'), (' ', 'nsubj'), ('marketing', 'compound'), ('manager', 'attr'), ('product', 'compound'), ('developer', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[persona,  ], [ , marketing], [marketing, manager], [manager, product], [product, developer], [developer, .]]

>> Trigrams: 
[[persona,  , marketing], [ , marketing, manager], [marketing, manager, product], [manager, product, developer], [product, developer, .]]

>> Noun Phrases are: 
[A persona, a marketing manager, a product developer]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

This  ambition is translated into a roadmap and a high-level  business case. 


>> Tokens are: 
[ , ambition, translated, roadmap, high, -, level,  , business, case, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('ambition', 'NOUN'), ('translated', 'VERB'), ('roadmap', 'NOUN'), ('high', 'ADJ'), ('-', 'PUNCT'), ('level', 'NOUN'), (' ', 'SPACE'), ('business', 'NOUN'), ('case', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'compound'), ('ambition', 'nsubjpass'), ('translated', 'ROOT'), ('roadmap', 'pobj'), ('high', 'amod'), ('-', 'punct'), ('level', 'compound'), (' ', 'compound'), ('business', 'compound'), ('case', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[ , ambition], [ambition, translated], [translated, roadmap], [roadmap, high], [high, -], [-, level], [level,  ], [ , business], [business, case], [case, .]]

>> Trigrams: 
[[ , ambition, translated], [ambition, translated, roadmap], [translated, roadmap, high], [roadmap, high, -], [high, -, level], [-, level,  ], [level,  , business], [ , business, case], [business, case, .]]

>> Noun Phrases are: 
[This  ambition, a roadmap, a high-level  business case]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

IBM also supports you to select the most  favorable operating model to move forward. 


>> Tokens are: 
[IBM, supports, select,  , favorable, operating, model, forward, .] 

>> PoS Tags are: 
[('IBM', 'PROPN'), ('supports', 'VERB'), ('select', 'VERB'), (' ', 'SPACE'), ('favorable', 'ADJ'), ('operating', 'NOUN'), ('model', 'NOUN'), ('forward', 'ADV'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('IBM', 'nsubj'), ('supports', 'ROOT'), ('select', 'xcomp'), (' ', 'nmod'), ('favorable', 'amod'), ('operating', 'compound'), ('model', 'dobj'), ('forward', 'advmod'), ('.', 'punct')]

>> Bigrams: 
[[IBM, supports], [supports, select], [select,  ], [ , favorable], [favorable, operating], [operating, model], [model, forward], [forward, .]]

>> Trigrams: 
[[IBM, supports, select], [supports, select,  ], [select,  , favorable], [ , favorable, operating], [favorable, operating, model], [operating, model, forward], [model, forward, .]]

>> Noun Phrases are: 
[IBM, you, the most  favorable operating model]

>> Named Entities are: 
[('IBM', 'ORG')] 


================================ Paragraph 254 =================================

Once you are prepared for your garage, IBM uses design  thinking to identify and define use cases. All use cases are  conceived based on the notion of creating business value.  In IBM’s experience, design thinking is the most effective  way. This so-called “demand generation” for the garage  should be on-going, creating the backlog and setting the  capacity planning for the garage. 

------------------- Sentence 1 -------------------

Once you are prepared for your garage, IBM uses design  thinking to identify and define use cases. 


>> Tokens are: 
[prepared, garage, ,, IBM, uses, design,  , thinking, identify, define, use, cases, .] 

>> PoS Tags are: 
[('prepared', 'ADJ'), ('garage', 'NOUN'), (',', 'PUNCT'), ('IBM', 'PROPN'), ('uses', 'VERB'), ('design', 'NOUN'), (' ', 'SPACE'), ('thinking', 'VERB'), ('identify', 'VERB'), ('define', 'VERB'), ('use', 'NOUN'), ('cases', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('prepared', 'advcl'), ('garage', 'pobj'), (',', 'punct'), ('IBM', 'nsubj'), ('uses', 'ROOT'), ('design', 'compound'), (' ', 'compound'), ('thinking', 'dobj'), ('identify', 'xcomp'), ('define', 'conj'), ('use', 'compound'), ('cases', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[prepared, garage], [garage, ,], [,, IBM], [IBM, uses], [uses, design], [design,  ], [ , thinking], [thinking, identify], [identify, define], [define, use], [use, cases], [cases, .]]

>> Trigrams: 
[[prepared, garage, ,], [garage, ,, IBM], [,, IBM, uses], [IBM, uses, design], [uses, design,  ], [design,  , thinking], [ , thinking, identify], [thinking, identify, define], [identify, define, use], [define, use, cases], [use, cases, .]]

>> Noun Phrases are: 
[you, your garage, IBM, use cases]

>> Named Entities are: 
[('IBM', 'ORG')] 

------------------- Sentence 2 -------------------

All use cases are  conceived based on the notion of creating business value. 


>> Tokens are: 
[use, cases,  , conceived, based, notion, creating, business, value, .] 

>> PoS Tags are: 
[('use', 'NOUN'), ('cases', 'NOUN'), (' ', 'SPACE'), ('conceived', 'VERB'), ('based', 'VERB'), ('notion', 'NOUN'), ('creating', 'VERB'), ('business', 'NOUN'), ('value', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('use', 'ROOT'), ('cases', 'dobj'), (' ', 'nsubjpass'), ('conceived', 'ccomp'), ('based', 'acl'), ('notion', 'pobj'), ('creating', 'pcomp'), ('business', 'compound'), ('value', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[use, cases], [cases,  ], [ , conceived], [conceived, based], [based, notion], [notion, creating], [creating, business], [business, value], [value, .]]

>> Trigrams: 
[[use, cases,  ], [cases,  , conceived], [ , conceived, based], [conceived, based, notion], [based, notion, creating], [notion, creating, business], [creating, business, value], [business, value, .]]

>> Noun Phrases are: 
[All use, cases, the notion, business value]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

In IBM’s experience, design thinking is the most effective  way. 


>> Tokens are: 
[IBM, experience, ,, design, thinking, effective,  , way, .] 

>> PoS Tags are: 
[('IBM', 'PROPN'), ('experience', 'NOUN'), (',', 'PUNCT'), ('design', 'NOUN'), ('thinking', 'NOUN'), ('effective', 'ADJ'), (' ', 'SPACE'), ('way', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('IBM', 'poss'), ('experience', 'pobj'), (',', 'punct'), ('design', 'compound'), ('thinking', 'nsubj'), ('effective', 'amod'), (' ', 'compound'), ('way', 'attr'), ('.', 'punct')]

>> Bigrams: 
[[IBM, experience], [experience, ,], [,, design], [design, thinking], [thinking, effective], [effective,  ], [ , way], [way, .]]

>> Trigrams: 
[[IBM, experience, ,], [experience, ,, design], [,, design, thinking], [design, thinking, effective], [thinking, effective,  ], [effective,  , way], [ , way, .]]

>> Noun Phrases are: 
[IBM’s experience, design thinking, the most effective  way]

>> Named Entities are: 
[('IBM', 'ORG')] 

------------------- Sentence 5 -------------------

This so-called “demand generation” for the garage  should be on-going, creating the backlog and setting the  capacity planning for the garage. 


>> Tokens are: 
[-, called, “, demand, generation, ”, garage,  , -, going, ,, creating, backlog, setting,  , capacity, planning, garage, .] 

>> PoS Tags are: 
[('-', 'PUNCT'), ('called', 'VERB'), ('“', 'PUNCT'), ('demand', 'NOUN'), ('generation', 'NOUN'), ('”', 'PUNCT'), ('garage', 'NOUN'), (' ', 'SPACE'), ('-', 'PUNCT'), ('going', 'VERB'), (',', 'PUNCT'), ('creating', 'VERB'), ('backlog', 'NOUN'), ('setting', 'VERB'), (' ', 'SPACE'), ('capacity', 'NOUN'), ('planning', 'VERB'), ('garage', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('-', 'punct'), ('called', 'amod'), ('“', 'punct'), ('demand', 'compound'), ('generation', 'ROOT'), ('”', 'punct'), ('garage', 'pobj'), (' ', 'nsubj'), ('-', 'punct'), ('going', 'acomp'), (',', 'punct'), ('creating', 'advcl'), ('backlog', 'dobj'), ('setting', 'conj'), (' ', 'compound'), ('capacity', 'dobj'), ('planning', 'acl'), ('garage', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[-, called], [called, “], [“, demand], [demand, generation], [generation, ”], [”, garage], [garage,  ], [ , -], [-, going], [going, ,], [,, creating], [creating, backlog], [backlog, setting], [setting,  ], [ , capacity], [capacity, planning], [planning, garage], [garage, .]]

>> Trigrams: 
[[-, called, “], [called, “, demand], [“, demand, generation], [demand, generation, ”], [generation, ”, garage], [”, garage,  ], [garage,  , -], [ , -, going], [-, going, ,], [going, ,, creating], [,, creating, backlog], [creating, backlog, setting], [backlog, setting,  ], [setting,  , capacity], [ , capacity, planning], [capacity, planning, garage], [planning, garage, .]]

>> Noun Phrases are: 
[This so-called “demand generation, the garage, the backlog, the  capacity, the garage]

>> Named Entities are: 
[] 


================================ Paragraph 255 =================================

IBM Services     17 

------------------- Sentence 1 -------------------

IBM Services     17 


>> Tokens are: 
[IBM, Services,     , 17] 

>> PoS Tags are: 
[('IBM', 'PROPN'), ('Services', 'PROPN'), ('    ', 'SPACE'), ('17', 'NUM')] 

>> Dependency Tags are: 
[('IBM', 'compound'), ('Services', 'ROOT'), ('    ', 'appos'), ('17', 'nummod')]

>> Bigrams: 
[[IBM, Services], [Services,     ], [    , 17]]

>> Trigrams: 
[[IBM, Services,     ], [Services,     , 17]]

>> Noun Phrases are: 
[IBM Services]

>> Named Entities are: 
[('IBM Services', 'ORG')] 


================================ Paragraph 256 =================================

Once the first use cases have been agreed, the garage  provides the playground for deep technology, accommodating  enterprise-scale ways of working—such as design thinking,  agile, DevOps and lean IT. Innovation starts with a Proof  of Value (POV): evaluating the business and technical  feasibility of the use case in a time-boxed agile manner.  Agile development is at the core of what IBM does in the  garage. The goal is to succeed or fail quickly, with speed   to scale. Flexibility and speed are key! A successful POV will  move into a pilot implementation. The IBM Garage leverages  IBM’s extensive asset library to more efficiently validate use  cases and accelerate transformative change.  

------------------- Sentence 1 -------------------

Once the first use cases have been agreed, the garage  provides the playground for deep technology, accommodating  enterprise-scale ways of working—such as design thinking,  agile, DevOps and lean IT. 


>> Tokens are: 
[use, cases, agreed, ,, garage,  , provides, playground, deep, technology, ,, accommodating,  , enterprise, -, scale, ways, working, —, design, thinking, ,,  , agile, ,, DevOps, lean, .] 

>> PoS Tags are: 
[('use', 'NOUN'), ('cases', 'NOUN'), ('agreed', 'VERB'), (',', 'PUNCT'), ('garage', 'NOUN'), (' ', 'SPACE'), ('provides', 'VERB'), ('playground', 'NOUN'), ('deep', 'ADJ'), ('technology', 'NOUN'), (',', 'PUNCT'), ('accommodating', 'VERB'), (' ', 'SPACE'), ('enterprise', 'NOUN'), ('-', 'PUNCT'), ('scale', 'NOUN'), ('ways', 'NOUN'), ('working', 'VERB'), ('—', 'PUNCT'), ('design', 'NOUN'), ('thinking', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('agile', 'ADJ'), (',', 'PUNCT'), ('DevOps', 'PROPN'), ('lean', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('use', 'compound'), ('cases', 'nsubjpass'), ('agreed', 'advcl'), (',', 'punct'), ('garage', 'nsubj'), (' ', 'appos'), ('provides', 'ROOT'), ('playground', 'dobj'), ('deep', 'amod'), ('technology', 'pobj'), (',', 'punct'), ('accommodating', 'advcl'), (' ', 'dobj'), ('enterprise', 'compound'), ('-', 'punct'), ('scale', 'compound'), ('ways', 'dobj'), ('working', 'pobj'), ('—', 'punct'), ('design', 'compound'), ('thinking', 'pobj'), (',', 'punct'), (' ', 'conj'), ('agile', 'amod'), (',', 'punct'), ('DevOps', 'conj'), ('lean', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[use, cases], [cases, agreed], [agreed, ,], [,, garage], [garage,  ], [ , provides], [provides, playground], [playground, deep], [deep, technology], [technology, ,], [,, accommodating], [accommodating,  ], [ , enterprise], [enterprise, -], [-, scale], [scale, ways], [ways, working], [working, —], [—, design], [design, thinking], [thinking, ,], [,,  ], [ , agile], [agile, ,], [,, DevOps], [DevOps, lean], [lean, .]]

>> Trigrams: 
[[use, cases, agreed], [cases, agreed, ,], [agreed, ,, garage], [,, garage,  ], [garage,  , provides], [ , provides, playground], [provides, playground, deep], [playground, deep, technology], [deep, technology, ,], [technology, ,, accommodating], [,, accommodating,  ], [accommodating,  , enterprise], [ , enterprise, -], [enterprise, -, scale], [-, scale, ways], [scale, ways, working], [ways, working, —], [working, —, design], [—, design, thinking], [design, thinking, ,], [thinking, ,,  ], [,,  , agile], [ , agile, ,], [agile, ,, DevOps], [,, DevOps, lean], [DevOps, lean, .]]

>> Noun Phrases are: 
[the first use cases, the garage, the playground, deep technology, enterprise-scale ways, design thinking, DevOps, IT]

>> Named Entities are: 
[('first', 'ORDINAL'), ('DevOps', 'ORG')] 

------------------- Sentence 2 -------------------

Innovation starts with a Proof  of Value (POV): evaluating the business and technical  feasibility of the use case in a time-boxed agile manner. 


>> Tokens are: 
[Innovation, starts, Proof,  , Value, (, POV, ):, evaluating, business, technical,  , feasibility, use, case, time, -, boxed, agile, manner, .] 

>> PoS Tags are: 
[('Innovation', 'NOUN'), ('starts', 'VERB'), ('Proof', 'PROPN'), (' ', 'SPACE'), ('Value', 'PROPN'), ('(', 'PUNCT'), ('POV', 'PROPN'), ('):', 'PUNCT'), ('evaluating', 'VERB'), ('business', 'NOUN'), ('technical', 'ADJ'), (' ', 'SPACE'), ('feasibility', 'NOUN'), ('use', 'NOUN'), ('case', 'NOUN'), ('time', 'NOUN'), ('-', 'PUNCT'), ('boxed', 'VERB'), ('agile', 'ADJ'), ('manner', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Innovation', 'nsubj'), ('starts', 'ROOT'), ('Proof', 'compound'), (' ', 'pobj'), ('Value', 'pobj'), ('(', 'punct'), ('POV', 'appos'), ('):', 'punct'), ('evaluating', 'advcl'), ('business', 'dobj'), ('technical', 'conj'), (' ', 'npadvmod'), ('feasibility', 'dobj'), ('use', 'compound'), ('case', 'pobj'), ('time', 'npadvmod'), ('-', 'punct'), ('boxed', 'amod'), ('agile', 'amod'), ('manner', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Innovation, starts], [starts, Proof], [Proof,  ], [ , Value], [Value, (], [(, POV], [POV, ):], [):, evaluating], [evaluating, business], [business, technical], [technical,  ], [ , feasibility], [feasibility, use], [use, case], [case, time], [time, -], [-, boxed], [boxed, agile], [agile, manner], [manner, .]]

>> Trigrams: 
[[Innovation, starts, Proof], [starts, Proof,  ], [Proof,  , Value], [ , Value, (], [Value, (, POV], [(, POV, ):], [POV, ):, evaluating], [):, evaluating, business], [evaluating, business, technical], [business, technical,  ], [technical,  , feasibility], [ , feasibility, use], [feasibility, use, case], [use, case, time], [case, time, -], [time, -, boxed], [-, boxed, agile], [boxed, agile, manner], [agile, manner, .]]

>> Noun Phrases are: 
[Innovation, Value, (POV, the business, feasibility, the use case, a time-boxed agile manner]

>> Named Entities are: 
[('POV', 'GPE')] 

------------------- Sentence 3 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

Agile development is at the core of what IBM does in the  garage. 


>> Tokens are: 
[Agile, development, core, IBM,  , garage, .] 

>> PoS Tags are: 
[('Agile', 'ADJ'), ('development', 'NOUN'), ('core', 'NOUN'), ('IBM', 'PROPN'), (' ', 'SPACE'), ('garage', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Agile', 'amod'), ('development', 'nsubj'), ('core', 'pobj'), ('IBM', 'nsubj'), (' ', 'compound'), ('garage', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Agile, development], [development, core], [core, IBM], [IBM,  ], [ , garage], [garage, .]]

>> Trigrams: 
[[Agile, development, core], [development, core, IBM], [core, IBM,  ], [IBM,  , garage], [ , garage, .]]

>> Noun Phrases are: 
[Agile development, the core, what, IBM, the  garage]

>> Named Entities are: 
[('IBM', 'ORG')] 

------------------- Sentence 5 -------------------

The goal is to succeed or fail quickly, with speed   to scale. 


>> Tokens are: 
[goal, succeed, fail, quickly, ,, speed,   , scale, .] 

>> PoS Tags are: 
[('goal', 'NOUN'), ('succeed', 'VERB'), ('fail', 'VERB'), ('quickly', 'ADV'), (',', 'PUNCT'), ('speed', 'NOUN'), ('  ', 'SPACE'), ('scale', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('goal', 'nsubj'), ('succeed', 'xcomp'), ('fail', 'conj'), ('quickly', 'advmod'), (',', 'punct'), ('speed', 'pobj'), ('  ', 'nummod'), ('scale', 'dep'), ('.', 'punct')]

>> Bigrams: 
[[goal, succeed], [succeed, fail], [fail, quickly], [quickly, ,], [,, speed], [speed,   ], [  , scale], [scale, .]]

>> Trigrams: 
[[goal, succeed, fail], [succeed, fail, quickly], [fail, quickly, ,], [quickly, ,, speed], [,, speed,   ], [speed,   , scale], [  , scale, .]]

>> Noun Phrases are: 
[The goal, speed]

>> Named Entities are: 
[] 

------------------- Sentence 6 -------------------

Flexibility and speed are key! 


>> Tokens are: 
[Flexibility, speed, key, !] 

>> PoS Tags are: 
[('Flexibility', 'NOUN'), ('speed', 'NOUN'), ('key', 'ADJ'), ('!', 'PUNCT')] 

>> Dependency Tags are: 
[('Flexibility', 'nsubj'), ('speed', 'conj'), ('key', 'acomp'), ('!', 'punct')]

>> Bigrams: 
[[Flexibility, speed], [speed, key], [key, !]]

>> Trigrams: 
[[Flexibility, speed, key], [speed, key, !]]

>> Noun Phrases are: 
[Flexibility, speed]

>> Named Entities are: 
[] 

------------------- Sentence 7 -------------------

A successful POV will  move into a pilot implementation. 


>> Tokens are: 
[successful, POV,  , pilot, implementation, .] 

>> PoS Tags are: 
[('successful', 'ADJ'), ('POV', 'NOUN'), (' ', 'SPACE'), ('pilot', 'NOUN'), ('implementation', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('successful', 'amod'), ('POV', 'nsubj'), (' ', 'nsubj'), ('pilot', 'compound'), ('implementation', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[successful, POV], [POV,  ], [ , pilot], [pilot, implementation], [implementation, .]]

>> Trigrams: 
[[successful, POV,  ], [POV,  , pilot], [ , pilot, implementation], [pilot, implementation, .]]

>> Noun Phrases are: 
[A successful POV, a pilot implementation]

>> Named Entities are: 
[('POV', 'ORG')] 

------------------- Sentence 8 -------------------

The IBM Garage leverages  IBM’s extensive asset library to more efficiently validate use  cases and accelerate transformative change. 


>> Tokens are: 
[IBM, Garage, leverages,  , IBM, extensive, asset, library, efficiently, validate, use,  , cases, accelerate, transformative, change, .] 

>> PoS Tags are: 
[('IBM', 'PROPN'), ('Garage', 'PROPN'), ('leverages', 'NOUN'), (' ', 'SPACE'), ('IBM', 'PROPN'), ('extensive', 'ADJ'), ('asset', 'NOUN'), ('library', 'NOUN'), ('efficiently', 'ADV'), ('validate', 'VERB'), ('use', 'NOUN'), (' ', 'SPACE'), ('cases', 'NOUN'), ('accelerate', 'VERB'), ('transformative', 'ADJ'), ('change', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('IBM', 'compound'), ('Garage', 'compound'), ('leverages', 'nsubj'), (' ', 'punct'), ('IBM', 'poss'), ('extensive', 'amod'), ('asset', 'compound'), ('library', 'appos'), ('efficiently', 'advmod'), ('validate', 'ROOT'), ('use', 'dobj'), (' ', 'prep'), ('cases', 'dobj'), ('accelerate', 'conj'), ('transformative', 'amod'), ('change', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[IBM, Garage], [Garage, leverages], [leverages,  ], [ , IBM], [IBM, extensive], [extensive, asset], [asset, library], [library, efficiently], [efficiently, validate], [validate, use], [use,  ], [ , cases], [cases, accelerate], [accelerate, transformative], [transformative, change], [change, .]]

>> Trigrams: 
[[IBM, Garage, leverages], [Garage, leverages,  ], [leverages,  , IBM], [ , IBM, extensive], [IBM, extensive, asset], [extensive, asset, library], [asset, library, efficiently], [library, efficiently, validate], [efficiently, validate, use], [validate, use,  ], [use,  , cases], [ , cases, accelerate], [cases, accelerate, transformative], [accelerate, transformative, change], [transformative, change, .]]

>> Noun Phrases are: 
[The IBM Garage leverages, IBM’s extensive asset library, use, cases, transformative change]

>> Named Entities are: 
[('IBM', 'ORG')] 

------------------- Sentence 9 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 257 =================================

Organizations should be prepared to step out of their comfort  zones and think differently. Thinking in a data-driven and AI  approach requires a shift in the way we see. It takes some  effort to change our ways of thinking. This is where digital  change management plays a role. You also need to consider  the buildup of AI capabilities in your organization. IBM  offers various forms of training and enablement ranging  from Hackathons, planned learning universities for  upskilling and an AI learning academy. 

------------------- Sentence 1 -------------------

Organizations should be prepared to step out of their comfort  zones and think differently. 


>> Tokens are: 
[Organizations, prepared, step, comfort,  , zones, think, differently, .] 

>> PoS Tags are: 
[('Organizations', 'NOUN'), ('prepared', 'VERB'), ('step', 'VERB'), ('comfort', 'NOUN'), (' ', 'SPACE'), ('zones', 'NOUN'), ('think', 'VERB'), ('differently', 'ADV'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Organizations', 'nsubjpass'), ('prepared', 'ROOT'), ('step', 'xcomp'), ('comfort', 'pobj'), (' ', 'compound'), ('zones', 'dobj'), ('think', 'conj'), ('differently', 'advmod'), ('.', 'punct')]

>> Bigrams: 
[[Organizations, prepared], [prepared, step], [step, comfort], [comfort,  ], [ , zones], [zones, think], [think, differently], [differently, .]]

>> Trigrams: 
[[Organizations, prepared, step], [prepared, step, comfort], [step, comfort,  ], [comfort,  , zones], [ , zones, think], [zones, think, differently], [think, differently, .]]

>> Noun Phrases are: 
[Organizations, their comfort,  zones]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Thinking in a data-driven and AI  approach requires a shift in the way we see. 


>> Tokens are: 
[Thinking, data, -, driven, AI,  , approach, requires, shift, way, .] 

>> PoS Tags are: 
[('Thinking', 'VERB'), ('data', 'NOUN'), ('-', 'PUNCT'), ('driven', 'VERB'), ('AI', 'PROPN'), (' ', 'SPACE'), ('approach', 'NOUN'), ('requires', 'VERB'), ('shift', 'NOUN'), ('way', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Thinking', 'csubj'), ('data', 'npadvmod'), ('-', 'punct'), ('driven', 'amod'), ('AI', 'compound'), (' ', 'conj'), ('approach', 'pobj'), ('requires', 'ROOT'), ('shift', 'dobj'), ('way', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Thinking, data], [data, -], [-, driven], [driven, AI], [AI,  ], [ , approach], [approach, requires], [requires, shift], [shift, way], [way, .]]

>> Trigrams: 
[[Thinking, data, -], [data, -, driven], [-, driven, AI], [driven, AI,  ], [AI,  , approach], [ , approach, requires], [approach, requires, shift], [requires, shift, way], [shift, way, .]]

>> Noun Phrases are: 
[a data-driven and AI  approach, a shift, the way, we]

>> Named Entities are: 
[('AI', 'ORG')] 

------------------- Sentence 3 -------------------

It takes some  effort to change our ways of thinking. 


>> Tokens are: 
[takes,  , effort, change, ways, thinking, .] 

>> PoS Tags are: 
[('takes', 'VERB'), (' ', 'SPACE'), ('effort', 'NOUN'), ('change', 'VERB'), ('ways', 'NOUN'), ('thinking', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('takes', 'ROOT'), (' ', 'nummod'), ('effort', 'dobj'), ('change', 'acl'), ('ways', 'dobj'), ('thinking', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[takes,  ], [ , effort], [effort, change], [change, ways], [ways, thinking], [thinking, .]]

>> Trigrams: 
[[takes,  , effort], [ , effort, change], [effort, change, ways], [change, ways, thinking], [ways, thinking, .]]

>> Noun Phrases are: 
[It, some  effort, our ways, thinking]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

This is where digital  change management plays a role. 


>> Tokens are: 
[digital,  , change, management, plays, role, .] 

>> PoS Tags are: 
[('digital', 'ADJ'), (' ', 'SPACE'), ('change', 'NOUN'), ('management', 'NOUN'), ('plays', 'VERB'), ('role', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('digital', 'amod'), (' ', 'compound'), ('change', 'compound'), ('management', 'nsubj'), ('plays', 'ccomp'), ('role', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[digital,  ], [ , change], [change, management], [management, plays], [plays, role], [role, .]]

>> Trigrams: 
[[digital,  , change], [ , change, management], [change, management, plays], [management, plays, role], [plays, role, .]]

>> Noun Phrases are: 
[digital  change management, a role]

>> Named Entities are: 
[] 

------------------- Sentence 5 -------------------

You also need to consider  the buildup of AI capabilities in your organization. 


>> Tokens are: 
[need, consider,  , buildup, AI, capabilities, organization, .] 

>> PoS Tags are: 
[('need', 'VERB'), ('consider', 'VERB'), (' ', 'SPACE'), ('buildup', 'NOUN'), ('AI', 'PROPN'), ('capabilities', 'NOUN'), ('organization', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('need', 'ROOT'), ('consider', 'xcomp'), (' ', 'nsubj'), ('buildup', 'ccomp'), ('AI', 'compound'), ('capabilities', 'pobj'), ('organization', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[need, consider], [consider,  ], [ , buildup], [buildup, AI], [AI, capabilities], [capabilities, organization], [organization, .]]

>> Trigrams: 
[[need, consider,  ], [consider,  , buildup], [ , buildup, AI], [buildup, AI, capabilities], [AI, capabilities, organization], [capabilities, organization, .]]

>> Noun Phrases are: 
[You, AI capabilities, your organization]

>> Named Entities are: 
[('AI', 'ORG')] 

------------------- Sentence 6 -------------------

IBM  offers various forms of training and enablement ranging  from Hackathons, planned learning universities for  upskilling and an AI learning academy. 


>> Tokens are: 
[IBM,  , offers, forms, training, enablement, ranging,  , Hackathons, ,, planned, learning, universities,  , upskilling, AI, learning, academy, .] 

>> PoS Tags are: 
[('IBM', 'PROPN'), (' ', 'SPACE'), ('offers', 'VERB'), ('forms', 'NOUN'), ('training', 'NOUN'), ('enablement', 'NOUN'), ('ranging', 'VERB'), (' ', 'SPACE'), ('Hackathons', 'PROPN'), (',', 'PUNCT'), ('planned', 'VERB'), ('learning', 'VERB'), ('universities', 'NOUN'), (' ', 'SPACE'), ('upskilling', 'NOUN'), ('AI', 'PROPN'), ('learning', 'VERB'), ('academy', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('IBM', 'compound'), (' ', 'nsubj'), ('offers', 'ROOT'), ('forms', 'dobj'), ('training', 'pobj'), ('enablement', 'conj'), ('ranging', 'advcl'), (' ', 'dobj'), ('Hackathons', 'pobj'), (',', 'punct'), ('planned', 'dep'), ('learning', 'amod'), ('universities', 'dobj'), (' ', 'nsubj'), ('upskilling', 'pobj'), ('AI', 'npadvmod'), ('learning', 'amod'), ('academy', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[IBM,  ], [ , offers], [offers, forms], [forms, training], [training, enablement], [enablement, ranging], [ranging,  ], [ , Hackathons], [Hackathons, ,], [,, planned], [planned, learning], [learning, universities], [universities,  ], [ , upskilling], [upskilling, AI], [AI, learning], [learning, academy], [academy, .]]

>> Trigrams: 
[[IBM,  , offers], [ , offers, forms], [offers, forms, training], [forms, training, enablement], [training, enablement, ranging], [enablement, ranging,  ], [ranging,  , Hackathons], [ , Hackathons, ,], [Hackathons, ,, planned], [,, planned, learning], [planned, learning, universities], [learning, universities,  ], [universities,  , upskilling], [ , upskilling, AI], [upskilling, AI, learning], [AI, learning, academy], [learning, academy, .]]

>> Noun Phrases are: 
[various forms, training, enablement, Hackathons, learning universities,  upskilling, an AI learning academy]

>> Named Entities are: 
[('IBM', 'ORG'), ('AI', 'ORG')] 


================================ Paragraph 258 =================================

In the “Transform” phase, IBM collaborates with experts,  data and emerging technologies, using accelerators to  build minimum, viable products into production and realize  business outcomes and customer adoption within weeks. 

------------------- Sentence 1 -------------------

In the “Transform” phase, IBM collaborates with experts,  data and emerging technologies, using accelerators to  build minimum, viable products into production and realize  business outcomes and customer adoption within weeks. 


>> Tokens are: 
[“, Transform, ”, phase, ,, IBM, collaborates, experts, ,,  , data, emerging, technologies, ,, accelerators,  , build, minimum, ,, viable, products, production, realize,  , business, outcomes, customer, adoption, weeks, .] 

>> PoS Tags are: 
[('“', 'PUNCT'), ('Transform', 'NOUN'), ('”', 'PUNCT'), ('phase', 'NOUN'), (',', 'PUNCT'), ('IBM', 'PROPN'), ('collaborates', 'VERB'), ('experts', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('data', 'NOUN'), ('emerging', 'VERB'), ('technologies', 'NOUN'), (',', 'PUNCT'), ('accelerators', 'NOUN'), (' ', 'SPACE'), ('build', 'VERB'), ('minimum', 'ADJ'), (',', 'PUNCT'), ('viable', 'ADJ'), ('products', 'NOUN'), ('production', 'NOUN'), ('realize', 'VERB'), (' ', 'SPACE'), ('business', 'NOUN'), ('outcomes', 'NOUN'), ('customer', 'NOUN'), ('adoption', 'NOUN'), ('weeks', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('“', 'punct'), ('Transform', 'nmod'), ('”', 'punct'), ('phase', 'pobj'), (',', 'punct'), ('IBM', 'nsubj'), ('collaborates', 'ROOT'), ('experts', 'pobj'), (',', 'punct'), (' ', 'compound'), ('data', 'conj'), ('emerging', 'amod'), ('technologies', 'conj'), (',', 'punct'), ('accelerators', 'dobj'), (' ', 'pobj'), ('build', 'xcomp'), ('minimum', 'amod'), (',', 'punct'), ('viable', 'amod'), ('products', 'dobj'), ('production', 'pobj'), ('realize', 'conj'), (' ', 'dobj'), ('business', 'compound'), ('outcomes', 'dobj'), ('customer', 'compound'), ('adoption', 'conj'), ('weeks', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[“, Transform], [Transform, ”], [”, phase], [phase, ,], [,, IBM], [IBM, collaborates], [collaborates, experts], [experts, ,], [,,  ], [ , data], [data, emerging], [emerging, technologies], [technologies, ,], [,, accelerators], [accelerators,  ], [ , build], [build, minimum], [minimum, ,], [,, viable], [viable, products], [products, production], [production, realize], [realize,  ], [ , business], [business, outcomes], [outcomes, customer], [customer, adoption], [adoption, weeks], [weeks, .]]

>> Trigrams: 
[[“, Transform, ”], [Transform, ”, phase], [”, phase, ,], [phase, ,, IBM], [,, IBM, collaborates], [IBM, collaborates, experts], [collaborates, experts, ,], [experts, ,,  ], [,,  , data], [ , data, emerging], [data, emerging, technologies], [emerging, technologies, ,], [technologies, ,, accelerators], [,, accelerators,  ], [accelerators,  , build], [ , build, minimum], [build, minimum, ,], [minimum, ,, viable], [,, viable, products], [viable, products, production], [products, production, realize], [production, realize,  ], [realize,  , business], [ , business, outcomes], [business, outcomes, customer], [outcomes, customer, adoption], [customer, adoption, weeks], [adoption, weeks, .]]

>> Noun Phrases are: 
[the “Transform” phase, IBM, experts,  data, emerging technologies, accelerators, minimum, viable products, production, business outcomes, customer adoption, weeks]

>> Named Entities are: 
[('IBM', 'ORG'), ('weeks', 'DATE')] 


================================ Paragraph 259 =================================

The third and last phase is the factory “Thrive” phase, which is  designed to rapidly scale solutions while establishing methods  and new ways of working across your enterprise that can last  a lifetime. The thrive phase works as a managed service to  embed and maintain data and AI solutions at scale. Using a  factory-like approach, you put into production something you  want to be consistent in design and quality, and that doesn’t  require innovation in execution. IBM focuses on successful  delivery of projects aligned to the roadmap and AI platform  technology and helps ensure a clearly defined governance.  

------------------- Sentence 1 -------------------

The third and last phase is the factory “Thrive” phase, which is  designed to rapidly scale solutions while establishing methods  and new ways of working across your enterprise that can last  a lifetime. 


>> Tokens are: 
[phase, factory, “, Thrive, ”, phase, ,,  , designed, rapidly, scale, solutions, establishing, methods,  , new, ways, working, enterprise,  , lifetime, .] 

>> PoS Tags are: 
[('phase', 'NOUN'), ('factory', 'NOUN'), ('“', 'PUNCT'), ('Thrive', 'PROPN'), ('”', 'PUNCT'), ('phase', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('designed', 'VERB'), ('rapidly', 'ADV'), ('scale', 'VERB'), ('solutions', 'NOUN'), ('establishing', 'VERB'), ('methods', 'NOUN'), (' ', 'SPACE'), ('new', 'ADJ'), ('ways', 'NOUN'), ('working', 'VERB'), ('enterprise', 'NOUN'), (' ', 'SPACE'), ('lifetime', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('phase', 'nsubj'), ('factory', 'nmod'), ('“', 'punct'), ('Thrive', 'nmod'), ('”', 'punct'), ('phase', 'attr'), (',', 'punct'), (' ', 'dep'), ('designed', 'relcl'), ('rapidly', 'advmod'), ('scale', 'xcomp'), ('solutions', 'dobj'), ('establishing', 'advcl'), ('methods', 'dobj'), (' ', 'dobj'), ('new', 'amod'), ('ways', 'conj'), ('working', 'pcomp'), ('enterprise', 'pobj'), (' ', 'dobj'), ('lifetime', 'npadvmod'), ('.', 'punct')]

>> Bigrams: 
[[phase, factory], [factory, “], [“, Thrive], [Thrive, ”], [”, phase], [phase, ,], [,,  ], [ , designed], [designed, rapidly], [rapidly, scale], [scale, solutions], [solutions, establishing], [establishing, methods], [methods,  ], [ , new], [new, ways], [ways, working], [working, enterprise], [enterprise,  ], [ , lifetime], [lifetime, .]]

>> Trigrams: 
[[phase, factory, “], [factory, “, Thrive], [“, Thrive, ”], [Thrive, ”, phase], [”, phase, ,], [phase, ,,  ], [,,  , designed], [ , designed, rapidly], [designed, rapidly, scale], [rapidly, scale, solutions], [scale, solutions, establishing], [solutions, establishing, methods], [establishing, methods,  ], [methods,  , new], [ , new, ways], [new, ways, working], [ways, working, enterprise], [working, enterprise,  ], [enterprise,  , lifetime], [ , lifetime, .]]

>> Noun Phrases are: 
[The third and last phase, the factory “Thrive” phase, solutions, methods, new ways, your enterprise]

>> Named Entities are: 
[('third', 'ORDINAL')] 

------------------- Sentence 2 -------------------

The thrive phase works as a managed service to  embed and maintain data and AI solutions at scale. 


>> Tokens are: 
[thrive, phase, works, managed, service,  , embed, maintain, data, AI, solutions, scale, .] 

>> PoS Tags are: 
[('thrive', 'ADJ'), ('phase', 'NOUN'), ('works', 'VERB'), ('managed', 'VERB'), ('service', 'NOUN'), (' ', 'SPACE'), ('embed', 'VERB'), ('maintain', 'VERB'), ('data', 'NOUN'), ('AI', 'NOUN'), ('solutions', 'NOUN'), ('scale', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('thrive', 'amod'), ('phase', 'nsubj'), ('works', 'ROOT'), ('managed', 'amod'), ('service', 'pobj'), (' ', 'pobj'), ('embed', 'acl'), ('maintain', 'conj'), ('data', 'dobj'), ('AI', 'compound'), ('solutions', 'conj'), ('scale', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[thrive, phase], [phase, works], [works, managed], [managed, service], [service,  ], [ , embed], [embed, maintain], [maintain, data], [data, AI], [AI, solutions], [solutions, scale], [scale, .]]

>> Trigrams: 
[[thrive, phase, works], [phase, works, managed], [works, managed, service], [managed, service,  ], [service,  , embed], [ , embed, maintain], [embed, maintain, data], [maintain, data, AI], [data, AI, solutions], [AI, solutions, scale], [solutions, scale, .]]

>> Noun Phrases are: 
[The thrive phase, a managed service, data, AI solutions, scale]

>> Named Entities are: 
[('AI', 'ORG')] 

------------------- Sentence 3 -------------------

Using a  factory-like approach, you put into production something you  want to be consistent in design and quality, and that doesn’t  require innovation in execution. 


>> Tokens are: 
[ , factory, -, like, approach, ,, production,  , want, consistent, design, quality, ,,  , require, innovation, execution, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('factory', 'NOUN'), ('-', 'PUNCT'), ('like', 'ADJ'), ('approach', 'NOUN'), (',', 'PUNCT'), ('production', 'NOUN'), (' ', 'SPACE'), ('want', 'VERB'), ('consistent', 'ADJ'), ('design', 'NOUN'), ('quality', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('require', 'VERB'), ('innovation', 'NOUN'), ('execution', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'nummod'), ('factory', 'npadvmod'), ('-', 'punct'), ('like', 'amod'), ('approach', 'dobj'), (',', 'punct'), ('production', 'pobj'), (' ', 'nsubj'), ('want', 'relcl'), ('consistent', 'acomp'), ('design', 'pobj'), ('quality', 'conj'), (',', 'punct'), (' ', 'nsubj'), ('require', 'conj'), ('innovation', 'dobj'), ('execution', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[ , factory], [factory, -], [-, like], [like, approach], [approach, ,], [,, production], [production,  ], [ , want], [want, consistent], [consistent, design], [design, quality], [quality, ,], [,,  ], [ , require], [require, innovation], [innovation, execution], [execution, .]]

>> Trigrams: 
[[ , factory, -], [factory, -, like], [-, like, approach], [like, approach, ,], [approach, ,, production], [,, production,  ], [production,  , want], [ , want, consistent], [want, consistent, design], [consistent, design, quality], [design, quality, ,], [quality, ,,  ], [,,  , require], [ , require, innovation], [require, innovation, execution], [innovation, execution, .]]

>> Noun Phrases are: 
[a  factory-like approach, you, production, something, design, quality, innovation, execution]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

IBM focuses on successful  delivery of projects aligned to the roadmap and AI platform  technology and helps ensure a clearly defined governance. 


>> Tokens are: 
[IBM, focuses, successful,  , delivery, projects, aligned, roadmap, AI, platform,  , technology, helps, ensure, clearly, defined, governance, .] 

>> PoS Tags are: 
[('IBM', 'PROPN'), ('focuses', 'VERB'), ('successful', 'ADJ'), (' ', 'SPACE'), ('delivery', 'NOUN'), ('projects', 'NOUN'), ('aligned', 'VERB'), ('roadmap', 'NOUN'), ('AI', 'PROPN'), ('platform', 'NOUN'), (' ', 'SPACE'), ('technology', 'NOUN'), ('helps', 'VERB'), ('ensure', 'VERB'), ('clearly', 'ADV'), ('defined', 'VERB'), ('governance', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('IBM', 'nsubj'), ('focuses', 'ROOT'), ('successful', 'amod'), (' ', 'compound'), ('delivery', 'pobj'), ('projects', 'pobj'), ('aligned', 'acl'), ('roadmap', 'pobj'), ('AI', 'compound'), ('platform', 'compound'), (' ', 'compound'), ('technology', 'pobj'), ('helps', 'conj'), ('ensure', 'xcomp'), ('clearly', 'advmod'), ('defined', 'amod'), ('governance', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[IBM, focuses], [focuses, successful], [successful,  ], [ , delivery], [delivery, projects], [projects, aligned], [aligned, roadmap], [roadmap, AI], [AI, platform], [platform,  ], [ , technology], [technology, helps], [helps, ensure], [ensure, clearly], [clearly, defined], [defined, governance], [governance, .]]

>> Trigrams: 
[[IBM, focuses, successful], [focuses, successful,  ], [successful,  , delivery], [ , delivery, projects], [delivery, projects, aligned], [projects, aligned, roadmap], [aligned, roadmap, AI], [roadmap, AI, platform], [AI, platform,  ], [platform,  , technology], [ , technology, helps], [technology, helps, ensure], [helps, ensure, clearly], [ensure, clearly, defined], [clearly, defined, governance], [defined, governance, .]]

>> Noun Phrases are: 
[IBM, successful  delivery, projects, the roadmap, AI platform  technology, a clearly defined governance]

>> Named Entities are: 
[('IBM', 'ORG'), ('AI', 'ORG')] 

------------------- Sentence 5 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 260 =================================

Using this method, IBM has been successful many times  and wants to keep improving the method with each project  delivered. IBM is one of the frontrunners of AI and AI  implementation, and thrives on applying its knowledge and  experience to help improve the world.

------------------- Sentence 1 -------------------

Using this method, IBM has been successful many times  and wants to keep improving the method with each project  delivered. 


>> Tokens are: 
[method, ,, IBM, successful, times,  , wants, improving, method, project,  , delivered, .] 

>> PoS Tags are: 
[('method', 'NOUN'), (',', 'PUNCT'), ('IBM', 'PROPN'), ('successful', 'ADJ'), ('times', 'NOUN'), (' ', 'SPACE'), ('wants', 'VERB'), ('improving', 'VERB'), ('method', 'NOUN'), ('project', 'NOUN'), (' ', 'SPACE'), ('delivered', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('method', 'dobj'), (',', 'punct'), ('IBM', 'nsubj'), ('successful', 'acomp'), ('times', 'npadvmod'), (' ', 'attr'), ('wants', 'conj'), ('improving', 'xcomp'), ('method', 'dobj'), ('project', 'pobj'), (' ', 'nsubj'), ('delivered', 'relcl'), ('.', 'punct')]

>> Bigrams: 
[[method, ,], [,, IBM], [IBM, successful], [successful, times], [times,  ], [ , wants], [wants, improving], [improving, method], [method, project], [project,  ], [ , delivered], [delivered, .]]

>> Trigrams: 
[[method, ,, IBM], [,, IBM, successful], [IBM, successful, times], [successful, times,  ], [times,  , wants], [ , wants, improving], [wants, improving, method], [improving, method, project], [method, project,  ], [project,  , delivered], [ , delivered, .]]

>> Noun Phrases are: 
[this method, IBM, the method, each project]

>> Named Entities are: 
[('IBM', 'ORG')] 

------------------- Sentence 2 -------------------

IBM is one of the frontrunners of AI and AI  implementation, and thrives on applying its knowledge and  experience to help improve the world. 


>> Tokens are: 
[IBM, frontrunners, AI, AI,  , implementation, ,, thrives, applying, knowledge,  , experience, help, improve, world, .] 

>> PoS Tags are: 
[('IBM', 'PROPN'), ('frontrunners', 'NOUN'), ('AI', 'PROPN'), ('AI', 'PROPN'), (' ', 'SPACE'), ('implementation', 'NOUN'), (',', 'PUNCT'), ('thrives', 'VERB'), ('applying', 'VERB'), ('knowledge', 'NOUN'), (' ', 'SPACE'), ('experience', 'NOUN'), ('help', 'VERB'), ('improve', 'VERB'), ('world', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('IBM', 'nsubj'), ('frontrunners', 'pobj'), ('AI', 'pobj'), ('AI', 'nmod'), (' ', 'nummod'), ('implementation', 'conj'), (',', 'punct'), ('thrives', 'conj'), ('applying', 'pcomp'), ('knowledge', 'dobj'), (' ', 'compound'), ('experience', 'conj'), ('help', 'advcl'), ('improve', 'xcomp'), ('world', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[IBM, frontrunners], [frontrunners, AI], [AI, AI], [AI,  ], [ , implementation], [implementation, ,], [,, thrives], [thrives, applying], [applying, knowledge], [knowledge,  ], [ , experience], [experience, help], [help, improve], [improve, world], [world, .]]

>> Trigrams: 
[[IBM, frontrunners, AI], [frontrunners, AI, AI], [AI, AI,  ], [AI,  , implementation], [ , implementation, ,], [implementation, ,, thrives], [,, thrives, applying], [thrives, applying, knowledge], [applying, knowledge,  ], [knowledge,  , experience], [ , experience, help], [experience, help, improve], [help, improve, world], [improve, world, .]]

>> Noun Phrases are: 
[IBM, the frontrunners, AI, AI  implementation, its knowledge,  experience, the world]

>> Named Entities are: 
[('IBM', 'ORG'), ('one', 'CARDINAL'), ('AI', 'ORG'), ('AI', 'ORG')] 


================================ Paragraph 261 =================================

18     Beyond the hype: A guide to understanding and successfully implementing artificial intelligence within your business 

------------------- Sentence 1 -------------------

18     Beyond the hype: A guide to understanding and successfully implementing artificial intelligence within your business 


>> Tokens are: 
[18,     , hype, :, guide, understanding, successfully, implementing, artificial, intelligence, business] 

>> PoS Tags are: 
[('18', 'NUM'), ('    ', 'SPACE'), ('hype', 'NOUN'), (':', 'PUNCT'), ('guide', 'NOUN'), ('understanding', 'NOUN'), ('successfully', 'ADV'), ('implementing', 'VERB'), ('artificial', 'ADJ'), ('intelligence', 'NOUN'), ('business', 'NOUN')] 

>> Dependency Tags are: 
[('18', 'nummod'), ('    ', 'ROOT'), ('hype', 'pobj'), (':', 'punct'), ('guide', 'appos'), ('understanding', 'pobj'), ('successfully', 'advmod'), ('implementing', 'acl'), ('artificial', 'amod'), ('intelligence', 'dobj'), ('business', 'pobj')]

>> Bigrams: 
[[18,     ], [    , hype], [hype, :], [:, guide], [guide, understanding], [understanding, successfully], [successfully, implementing], [implementing, artificial], [artificial, intelligence], [intelligence, business]]

>> Trigrams: 
[[18,     , hype], [    , hype, :], [hype, :, guide], [:, guide, understanding], [guide, understanding, successfully], [understanding, successfully, implementing], [successfully, implementing, artificial], [implementing, artificial, intelligence], [artificial, intelligence, business]]

>> Noun Phrases are: 
[the hype, A guide, understanding, artificial intelligence, your business]

>> Named Entities are: 
[] 


================================ Paragraph 262 =================================

About the authors Jorn Jansen Schoonhoven, a data scientist at IBM with two  years of data science experience is part of the Advanced  Analytics branch of the IBM Amsterdam office, and part of  the IBM Global Institute of Business Value team. He holds  a master’s degree in business analytics and big data, and a  master’s degree in management from IE Business School.  He is the main author of this paper and can be reached at  Jorn.Jansen.Schoonhoven@ibm.com or +316 22403033. 

------------------- Sentence 1 -------------------

About the authors Jorn Jansen Schoonhoven, a data scientist at IBM with two  years of data science experience is part of the Advanced  Analytics branch of the IBM Amsterdam office, and part of  the IBM Global Institute of Business Value team. 


>> Tokens are: 
[authors, Jorn, Jansen, Schoonhoven, ,, data, scientist, IBM,  , years, data, science, experience, Advanced,  , Analytics, branch, IBM, Amsterdam, office, ,,  , IBM, Global, Institute, Business, Value, team, .] 

>> PoS Tags are: 
[('authors', 'NOUN'), ('Jorn', 'PROPN'), ('Jansen', 'PROPN'), ('Schoonhoven', 'PROPN'), (',', 'PUNCT'), ('data', 'NOUN'), ('scientist', 'NOUN'), ('IBM', 'PROPN'), (' ', 'SPACE'), ('years', 'NOUN'), ('data', 'NOUN'), ('science', 'NOUN'), ('experience', 'NOUN'), ('Advanced', 'ADJ'), (' ', 'SPACE'), ('Analytics', 'NOUN'), ('branch', 'NOUN'), ('IBM', 'PROPN'), ('Amsterdam', 'PROPN'), ('office', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('IBM', 'PROPN'), ('Global', 'PROPN'), ('Institute', 'PROPN'), ('Business', 'PROPN'), ('Value', 'PROPN'), ('team', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('authors', 'pobj'), ('Jorn', 'compound'), ('Jansen', 'compound'), ('Schoonhoven', 'appos'), (',', 'punct'), ('data', 'compound'), ('scientist', 'appos'), ('IBM', 'pobj'), (' ', 'nummod'), ('years', 'pobj'), ('data', 'compound'), ('science', 'compound'), ('experience', 'pobj'), ('Advanced', 'amod'), (' ', 'compound'), ('Analytics', 'compound'), ('branch', 'pobj'), ('IBM', 'compound'), ('Amsterdam', 'compound'), ('office', 'pobj'), (',', 'punct'), (' ', 'pobj'), ('IBM', 'compound'), ('Global', 'compound'), ('Institute', 'nmod'), ('Business', 'compound'), ('Value', 'pobj'), ('team', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[authors, Jorn], [Jorn, Jansen], [Jansen, Schoonhoven], [Schoonhoven, ,], [,, data], [data, scientist], [scientist, IBM], [IBM,  ], [ , years], [years, data], [data, science], [science, experience], [experience, Advanced], [Advanced,  ], [ , Analytics], [Analytics, branch], [branch, IBM], [IBM, Amsterdam], [Amsterdam, office], [office, ,], [,,  ], [ , IBM], [IBM, Global], [Global, Institute], [Institute, Business], [Business, Value], [Value, team], [team, .]]

>> Trigrams: 
[[authors, Jorn, Jansen], [Jorn, Jansen, Schoonhoven], [Jansen, Schoonhoven, ,], [Schoonhoven, ,, data], [,, data, scientist], [data, scientist, IBM], [scientist, IBM,  ], [IBM,  , years], [ , years, data], [years, data, science], [data, science, experience], [science, experience, Advanced], [experience, Advanced,  ], [Advanced,  , Analytics], [ , Analytics, branch], [Analytics, branch, IBM], [branch, IBM, Amsterdam], [IBM, Amsterdam, office], [Amsterdam, office, ,], [office, ,,  ], [,,  , IBM], [ , IBM, Global], [IBM, Global, Institute], [Global, Institute, Business], [Institute, Business, Value], [Business, Value, team], [Value, team, .]]

>> Noun Phrases are: 
[the authors, Jorn Jansen Schoonhoven, a data scientist, IBM, two  years, data science experience, part, the Advanced  Analytics branch, the IBM Amsterdam office, part, Business Value]

>> Named Entities are: 
[('Jorn Jansen Schoonhoven', 'PERSON'), ('IBM', 'ORG'), ('two  years', 'DATE'), ('IBM Amsterdam', 'ORG'), ('the IBM Global Institute of Business Value', 'ORG')] 

------------------- Sentence 2 -------------------

He holds  a master’s degree in business analytics and big data, and a  master’s degree in management from IE Business School. 


>> Tokens are: 
[holds,  , master, degree, business, analytics, big, data, ,,  , master, degree, management, IE, Business, School, .] 

>> PoS Tags are: 
[('holds', 'VERB'), (' ', 'SPACE'), ('master', 'NOUN'), ('degree', 'NOUN'), ('business', 'NOUN'), ('analytics', 'NOUN'), ('big', 'ADJ'), ('data', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('master', 'NOUN'), ('degree', 'NOUN'), ('management', 'NOUN'), ('IE', 'PROPN'), ('Business', 'PROPN'), ('School', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('holds', 'ROOT'), (' ', 'dobj'), ('master', 'nmod'), ('degree', 'dobj'), ('business', 'compound'), ('analytics', 'pobj'), ('big', 'amod'), ('data', 'conj'), (',', 'punct'), (' ', 'compound'), ('master', 'nmod'), ('degree', 'conj'), ('management', 'pobj'), ('IE', 'compound'), ('Business', 'compound'), ('School', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[holds,  ], [ , master], [master, degree], [degree, business], [business, analytics], [analytics, big], [big, data], [data, ,], [,,  ], [ , master], [master, degree], [degree, management], [management, IE], [IE, Business], [Business, School], [School, .]]

>> Trigrams: 
[[holds,  , master], [ , master, degree], [master, degree, business], [degree, business, analytics], [business, analytics, big], [analytics, big, data], [big, data, ,], [data, ,,  ], [,,  , master], [ , master, degree], [master, degree, management], [degree, management, IE], [management, IE, Business], [IE, Business, School], [Business, School, .]]

>> Noun Phrases are: 
[He, a master’s degree, business analytics, big data, a  master’s degree, management, IE Business School]

>> Named Entities are: 
[('IE Business School', 'ORG')] 

------------------- Sentence 3 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

He is the main author of this paper and can be reached at  Jorn.Jansen.Schoonhoven@ibm.com or +316 22403033. 


>> Tokens are: 
[main, author, paper, reached,  , Jorn.Jansen.Schoonhoven@ibm.com, +316, 22403033, .] 

>> PoS Tags are: 
[('main', 'ADJ'), ('author', 'NOUN'), ('paper', 'NOUN'), ('reached', 'VERB'), (' ', 'SPACE'), ('Jorn.Jansen.Schoonhoven@ibm.com', 'PROPN'), ('+316', 'NOUN'), ('22403033', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('main', 'amod'), ('author', 'attr'), ('paper', 'pobj'), ('reached', 'conj'), (' ', 'det'), ('Jorn.Jansen.Schoonhoven@ibm.com', 'pobj'), ('+316', 'conj'), ('22403033', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[main, author], [author, paper], [paper, reached], [reached,  ], [ , Jorn.Jansen.Schoonhoven@ibm.com], [Jorn.Jansen.Schoonhoven@ibm.com, +316], [+316, 22403033], [22403033, .]]

>> Trigrams: 
[[main, author, paper], [author, paper, reached], [paper, reached,  ], [reached,  , Jorn.Jansen.Schoonhoven@ibm.com], [ , Jorn.Jansen.Schoonhoven@ibm.com, +316], [Jorn.Jansen.Schoonhoven@ibm.com, +316, 22403033], [+316, 22403033, .]]

>> Noun Phrases are: 
[He, the main author, this paper,  Jorn.Jansen.Schoonhoven@ibm.com, +316]

>> Named Entities are: 
[('22403033', 'DATE')] 


================================ Paragraph 263 =================================

Marloes Roelands is an Associate Partner with over 20 years’  experience in consulting. She is the European leader for the  “IBM Garage for AI.” She loves making innovation happen  with her clients and followed the Executive programme  “Strategy and Innovation” at Saïd Business School at Oxford  University to support her thinking. She also holds a Master of  Economics from Erasmus University Rotterdam. She can be  reached at marloes.roelands@nl.ibm.com. 

------------------- Sentence 1 -------------------

Marloes Roelands is an Associate Partner with over 20 years’  experience in consulting. 


>> Tokens are: 
[Marloes, Roelands, Associate, Partner, 20, years, ’,  , experience, consulting, .] 

>> PoS Tags are: 
[('Marloes', 'PROPN'), ('Roelands', 'PROPN'), ('Associate', 'PROPN'), ('Partner', 'PROPN'), ('20', 'NUM'), ('years', 'NOUN'), ('’', 'PART'), (' ', 'SPACE'), ('experience', 'NOUN'), ('consulting', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Marloes', 'compound'), ('Roelands', 'nsubj'), ('Associate', 'compound'), ('Partner', 'attr'), ('20', 'nummod'), ('years', 'nmod'), ('’', 'punct'), (' ', 'compound'), ('experience', 'pobj'), ('consulting', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Marloes, Roelands], [Roelands, Associate], [Associate, Partner], [Partner, 20], [20, years], [years, ’], [’,  ], [ , experience], [experience, consulting], [consulting, .]]

>> Trigrams: 
[[Marloes, Roelands, Associate], [Roelands, Associate, Partner], [Associate, Partner, 20], [Partner, 20, years], [20, years, ’], [years, ’,  ], [’,  , experience], [ , experience, consulting], [experience, consulting, .]]

>> Noun Phrases are: 
[Marloes Roelands, an Associate Partner, over 20 years’  experience, consulting]

>> Named Entities are: 
[('20 years', 'DATE')] 

------------------- Sentence 2 -------------------

She is the European leader for the  “IBM Garage for AI.” 


>> Tokens are: 
[European, leader,  , “, IBM, Garage, AI, ., ”] 

>> PoS Tags are: 
[('European', 'ADJ'), ('leader', 'NOUN'), (' ', 'SPACE'), ('“', 'PUNCT'), ('IBM', 'PROPN'), ('Garage', 'PROPN'), ('AI', 'PROPN'), ('.', 'PUNCT'), ('”', 'PUNCT')] 

>> Dependency Tags are: 
[('European', 'amod'), ('leader', 'attr'), (' ', 'amod'), ('“', 'punct'), ('IBM', 'compound'), ('Garage', 'pobj'), ('AI', 'pobj'), ('.', 'punct'), ('”', 'punct')]

>> Bigrams: 
[[European, leader], [leader,  ], [ , “], [“, IBM], [IBM, Garage], [Garage, AI], [AI, .], [., ”]]

>> Trigrams: 
[[European, leader,  ], [leader,  , “], [ , “, IBM], [“, IBM, Garage], [IBM, Garage, AI], [Garage, AI, .], [AI, ., ”]]

>> Noun Phrases are: 
[She, the European leader, the  “IBM Garage, AI]

>> Named Entities are: 
[('European', 'NORP'), ('IBM Garage for AI', 'WORK_OF_ART')] 

------------------- Sentence 3 -------------------

She loves making innovation happen  with her clients and followed the Executive programme   


>> Tokens are: 
[loves, making, innovation, happen,  , clients, followed, Executive, programme,  ] 

>> PoS Tags are: 
[('loves', 'VERB'), ('making', 'VERB'), ('innovation', 'NOUN'), ('happen', 'VERB'), (' ', 'SPACE'), ('clients', 'NOUN'), ('followed', 'VERB'), ('Executive', 'PROPN'), ('programme', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('loves', 'ROOT'), ('making', 'xcomp'), ('innovation', 'nsubj'), ('happen', 'ccomp'), (' ', 'dobj'), ('clients', 'pobj'), ('followed', 'conj'), ('Executive', 'compound'), ('programme', 'dobj'), (' ', 'punct')]

>> Bigrams: 
[[loves, making], [making, innovation], [innovation, happen], [happen,  ], [ , clients], [clients, followed], [followed, Executive], [Executive, programme], [programme,  ]]

>> Trigrams: 
[[loves, making, innovation], [making, innovation, happen], [innovation, happen,  ], [happen,  , clients], [ , clients, followed], [clients, followed, Executive], [followed, Executive, programme], [Executive, programme,  ]]

>> Noun Phrases are: 
[She, innovation, her clients, the Executive programme]

>> Named Entities are: 
[('Executive', 'ORG')] 

------------------- Sentence 4 -------------------

“Strategy and Innovation” at Saïd Business School at Oxford  University to support her thinking. 


>> Tokens are: 
[“, Strategy, Innovation, ”, Saïd, Business, School, Oxford,  , University, support, thinking, .] 

>> PoS Tags are: 
[('“', 'PUNCT'), ('Strategy', 'PROPN'), ('Innovation', 'PROPN'), ('”', 'PUNCT'), ('Saïd', 'PROPN'), ('Business', 'PROPN'), ('School', 'PROPN'), ('Oxford', 'PROPN'), (' ', 'SPACE'), ('University', 'PROPN'), ('support', 'VERB'), ('thinking', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('“', 'punct'), ('Strategy', 'ROOT'), ('Innovation', 'conj'), ('”', 'punct'), ('Saïd', 'compound'), ('Business', 'compound'), ('School', 'pobj'), ('Oxford', 'nmod'), (' ', 'nummod'), ('University', 'pobj'), ('support', 'advcl'), ('thinking', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[“, Strategy], [Strategy, Innovation], [Innovation, ”], [”, Saïd], [Saïd, Business], [Business, School], [School, Oxford], [Oxford,  ], [ , University], [University, support], [support, thinking], [thinking, .]]

>> Trigrams: 
[[“, Strategy, Innovation], [Strategy, Innovation, ”], [Innovation, ”, Saïd], [”, Saïd, Business], [Saïd, Business, School], [Business, School, Oxford], [School, Oxford,  ], [Oxford,  , University], [ , University, support], [University, support, thinking], [support, thinking, .]]

>> Noun Phrases are: 
[“Strategy, Innovation, Saïd Business School, Oxford  University, her thinking]

>> Named Entities are: 
[('Strategy and Innovation” at', 'WORK_OF_ART'), ('Saïd Business School', 'ORG'), ('Oxford  University', 'ORG')] 

------------------- Sentence 5 -------------------

She also holds a Master of  Economics from Erasmus University Rotterdam. 


>> Tokens are: 
[holds, Master,  , Economics, Erasmus, University, Rotterdam, .] 

>> PoS Tags are: 
[('holds', 'VERB'), ('Master', 'PROPN'), (' ', 'SPACE'), ('Economics', 'PROPN'), ('Erasmus', 'PROPN'), ('University', 'PROPN'), ('Rotterdam', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('holds', 'ROOT'), ('Master', 'dobj'), (' ', 'pobj'), ('Economics', 'dobj'), ('Erasmus', 'compound'), ('University', 'compound'), ('Rotterdam', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[holds, Master], [Master,  ], [ , Economics], [Economics, Erasmus], [Erasmus, University], [University, Rotterdam], [Rotterdam, .]]

>> Trigrams: 
[[holds, Master,  ], [Master,  , Economics], [ , Economics, Erasmus], [Economics, Erasmus, University], [Erasmus, University, Rotterdam], [University, Rotterdam, .]]

>> Noun Phrases are: 
[She, a Master, Economics, Erasmus University Rotterdam]

>> Named Entities are: 
[('Erasmus University Rotterdam', 'ORG')] 

------------------- Sentence 6 -------------------

She can be  reached at marloes.roelands@nl.ibm.com. 


>> Tokens are: 
[ , reached, marloes.roelands@nl.ibm.com, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('reached', 'VERB'), ('marloes.roelands@nl.ibm.com', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'nsubjpass'), ('reached', 'ROOT'), ('marloes.roelands@nl.ibm.com', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[ , reached], [reached, marloes.roelands@nl.ibm.com], [marloes.roelands@nl.ibm.com, .]]

>> Trigrams: 
[[ , reached, marloes.roelands@nl.ibm.com], [reached, marloes.roelands@nl.ibm.com, .]]

>> Noun Phrases are: 
[She, marloes.roelands@nl.ibm.com]

>> Named Entities are: 
[] 


================================ Paragraph 264 =================================

Francesco Brenna, an Executive Partner with over 17 years of  consulting experience, currently leads the AI practice for IBM  Global Business Services in Europe. He holds a Bachelor of  Science in Computer Science from Zurich University of Applied  Sciences in Zurich and a Master of Business Administration  (with distinction) from Warwick Business School. He can be  reached at francesco.brenna@ch.ibm.com.  

------------------- Sentence 1 -------------------

Francesco Brenna, an Executive Partner with over 17 years of  consulting experience, currently leads the AI practice for IBM   


>> Tokens are: 
[Francesco, Brenna, ,, Executive, Partner, 17, years,  , consulting, experience, ,, currently, leads, AI, practice, IBM,  ] 

>> PoS Tags are: 
[('Francesco', 'PROPN'), ('Brenna', 'PROPN'), (',', 'PUNCT'), ('Executive', 'PROPN'), ('Partner', 'PROPN'), ('17', 'NUM'), ('years', 'NOUN'), (' ', 'SPACE'), ('consulting', 'NOUN'), ('experience', 'NOUN'), (',', 'PUNCT'), ('currently', 'ADV'), ('leads', 'VERB'), ('AI', 'PROPN'), ('practice', 'NOUN'), ('IBM', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Francesco', 'compound'), ('Brenna', 'nsubj'), (',', 'punct'), ('Executive', 'compound'), ('Partner', 'appos'), ('17', 'nummod'), ('years', 'pobj'), (' ', 'compound'), ('consulting', 'compound'), ('experience', 'pobj'), (',', 'punct'), ('currently', 'advmod'), ('leads', 'ROOT'), ('AI', 'compound'), ('practice', 'dobj'), ('IBM', 'pobj'), (' ', 'punct')]

>> Bigrams: 
[[Francesco, Brenna], [Brenna, ,], [,, Executive], [Executive, Partner], [Partner, 17], [17, years], [years,  ], [ , consulting], [consulting, experience], [experience, ,], [,, currently], [currently, leads], [leads, AI], [AI, practice], [practice, IBM], [IBM,  ]]

>> Trigrams: 
[[Francesco, Brenna, ,], [Brenna, ,, Executive], [,, Executive, Partner], [Executive, Partner, 17], [Partner, 17, years], [17, years,  ], [years,  , consulting], [ , consulting, experience], [consulting, experience, ,], [experience, ,, currently], [,, currently, leads], [currently, leads, AI], [leads, AI, practice], [AI, practice, IBM], [practice, IBM,  ]]

>> Noun Phrases are: 
[Francesco Brenna, an Executive Partner, over 17 years,  consulting experience, the AI practice, IBM]

>> Named Entities are: 
[('Francesco Brenna', 'PERSON'), ('an Executive Partner', 'ORG'), ('17 years', 'DATE'), ('AI', 'ORG'), ('IBM', 'ORG')] 

------------------- Sentence 2 -------------------

Global Business Services in Europe. 


>> Tokens are: 
[Global, Business, Services, Europe, .] 

>> PoS Tags are: 
[('Global', 'PROPN'), ('Business', 'PROPN'), ('Services', 'PROPN'), ('Europe', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Global', 'compound'), ('Business', 'compound'), ('Services', 'ROOT'), ('Europe', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Global, Business], [Business, Services], [Services, Europe], [Europe, .]]

>> Trigrams: 
[[Global, Business, Services], [Business, Services, Europe], [Services, Europe, .]]

>> Noun Phrases are: 
[Global Business Services, Europe]

>> Named Entities are: 
[('Global Business Services', 'ORG'), ('Europe', 'LOC')] 

------------------- Sentence 3 -------------------

He holds a Bachelor of  Science in Computer Science from Zurich University of Applied  Sciences in Zurich and a Master of Business Administration  (with distinction) from Warwick Business School. 


>> Tokens are: 
[holds, Bachelor,  , Science, Computer, Science, Zurich, University, Applied,  , Sciences, Zurich, Master, Business, Administration,  , (, distinction, ), Warwick, Business, School, .] 

>> PoS Tags are: 
[('holds', 'VERB'), ('Bachelor', 'PROPN'), (' ', 'SPACE'), ('Science', 'PROPN'), ('Computer', 'PROPN'), ('Science', 'PROPN'), ('Zurich', 'PROPN'), ('University', 'PROPN'), ('Applied', 'PROPN'), (' ', 'SPACE'), ('Sciences', 'PROPN'), ('Zurich', 'PROPN'), ('Master', 'PROPN'), ('Business', 'PROPN'), ('Administration', 'PROPN'), (' ', 'SPACE'), ('(', 'PUNCT'), ('distinction', 'NOUN'), (')', 'PUNCT'), ('Warwick', 'PROPN'), ('Business', 'PROPN'), ('School', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('holds', 'ROOT'), ('Bachelor', 'dobj'), (' ', 'pobj'), ('Science', 'appos'), ('Computer', 'compound'), ('Science', 'pobj'), ('Zurich', 'compound'), ('University', 'pobj'), ('Applied', 'compound'), (' ', 'compound'), ('Sciences', 'pobj'), ('Zurich', 'pobj'), ('Master', 'nmod'), ('Business', 'pobj'), ('Administration', 'conj'), (' ', 'appos'), ('(', 'punct'), ('distinction', 'pobj'), (')', 'punct'), ('Warwick', 'compound'), ('Business', 'compound'), ('School', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[holds, Bachelor], [Bachelor,  ], [ , Science], [Science, Computer], [Computer, Science], [Science, Zurich], [Zurich, University], [University, Applied], [Applied,  ], [ , Sciences], [Sciences, Zurich], [Zurich, Master], [Master, Business], [Business, Administration], [Administration,  ], [ , (], [(, distinction], [distinction, )], [), Warwick], [Warwick, Business], [Business, School], [School, .]]

>> Trigrams: 
[[holds, Bachelor,  ], [Bachelor,  , Science], [ , Science, Computer], [Science, Computer, Science], [Computer, Science, Zurich], [Science, Zurich, University], [Zurich, University, Applied], [University, Applied,  ], [Applied,  , Sciences], [ , Sciences, Zurich], [Sciences, Zurich, Master], [Zurich, Master, Business], [Master, Business, Administration], [Business, Administration,  ], [Administration,  , (], [ , (, distinction], [(, distinction, )], [distinction, ), Warwick], [), Warwick, Business], [Warwick, Business, School], [Business, School, .]]

>> Noun Phrases are: 
[He, a Bachelor, Science, Computer Science, Zurich University, Applied  Sciences, Zurich, Business, distinction, Warwick Business School]

>> Named Entities are: 
[('Zurich University of Applied  Sciences', 'ORG'), ('Zurich', 'GPE'), ('Warwick Business School', 'ORG')] 

------------------- Sentence 4 -------------------

He can be  reached at francesco.brenna@ch.ibm.com. 


>> Tokens are: 
[ , reached, francesco.brenna@ch.ibm.com, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('reached', 'VERB'), ('francesco.brenna@ch.ibm.com', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'nsubjpass'), ('reached', 'ROOT'), ('francesco.brenna@ch.ibm.com', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[ , reached], [reached, francesco.brenna@ch.ibm.com], [francesco.brenna@ch.ibm.com, .]]

>> Trigrams: 
[[ , reached, francesco.brenna@ch.ibm.com], [reached, francesco.brenna@ch.ibm.com, .]]

>> Noun Phrases are: 
[He, francesco.brenna@ch.ibm.com]

>> Named Entities are: 
[] 

------------------- Sentence 5 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 265 =================================

Acknowledgements The authors thank the advanced analytics practice for  sharing their experience about the implementation of AI,  the IBM Institute for Business value for their advice and  insights, and other IBM branches whose insights are  reflected in this document.  

------------------- Sentence 1 -------------------

Acknowledgements The authors thank the advanced analytics practice for  sharing their experience about the implementation of AI,  the IBM Institute for Business value for their advice and  insights, and other IBM branches whose insights are  reflected in this document. 


>> Tokens are: 
[Acknowledgements, authors, thank, advanced, analytics, practice,  , sharing, experience, implementation, AI, ,,  , IBM, Institute, Business, value, advice,  , insights, ,, IBM, branches, insights,  , reflected, document, .] 

>> PoS Tags are: 
[('Acknowledgements', 'NOUN'), ('authors', 'NOUN'), ('thank', 'VERB'), ('advanced', 'ADJ'), ('analytics', 'NOUN'), ('practice', 'NOUN'), (' ', 'SPACE'), ('sharing', 'VERB'), ('experience', 'NOUN'), ('implementation', 'NOUN'), ('AI', 'PROPN'), (',', 'PUNCT'), (' ', 'SPACE'), ('IBM', 'PROPN'), ('Institute', 'PROPN'), ('Business', 'PROPN'), ('value', 'NOUN'), ('advice', 'NOUN'), (' ', 'SPACE'), ('insights', 'NOUN'), (',', 'PUNCT'), ('IBM', 'PROPN'), ('branches', 'NOUN'), ('insights', 'NOUN'), (' ', 'SPACE'), ('reflected', 'VERB'), ('document', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Acknowledgements', 'npadvmod'), ('authors', 'nsubj'), ('thank', 'ROOT'), ('advanced', 'amod'), ('analytics', 'nsubj'), ('practice', 'ccomp'), (' ', 'nsubj'), ('sharing', 'pcomp'), ('experience', 'dobj'), ('implementation', 'pobj'), ('AI', 'pobj'), (',', 'punct'), (' ', 'conj'), ('IBM', 'compound'), ('Institute', 'nmod'), ('Business', 'pobj'), ('value', 'dobj'), ('advice', 'pobj'), (' ', 'conj'), ('insights', 'conj'), (',', 'punct'), ('IBM', 'compound'), ('branches', 'conj'), ('insights', 'nsubjpass'), (' ', 'nsubj'), ('reflected', 'relcl'), ('document', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Acknowledgements, authors], [authors, thank], [thank, advanced], [advanced, analytics], [analytics, practice], [practice,  ], [ , sharing], [sharing, experience], [experience, implementation], [implementation, AI], [AI, ,], [,,  ], [ , IBM], [IBM, Institute], [Institute, Business], [Business, value], [value, advice], [advice,  ], [ , insights], [insights, ,], [,, IBM], [IBM, branches], [branches, insights], [insights,  ], [ , reflected], [reflected, document], [document, .]]

>> Trigrams: 
[[Acknowledgements, authors, thank], [authors, thank, advanced], [thank, advanced, analytics], [advanced, analytics, practice], [analytics, practice,  ], [practice,  , sharing], [ , sharing, experience], [sharing, experience, implementation], [experience, implementation, AI], [implementation, AI, ,], [AI, ,,  ], [,,  , IBM], [ , IBM, Institute], [IBM, Institute, Business], [Institute, Business, value], [Business, value, advice], [value, advice,  ], [advice,  , insights], [ , insights, ,], [insights, ,, IBM], [,, IBM, branches], [IBM, branches, insights], [branches, insights,  ], [insights,  , reflected], [ , reflected, document], [reflected, document, .]]

>> Noun Phrases are: 
[The authors, the advanced analytics, their experience, the implementation, AI, Business, their advice, insights, other IBM branches, whose insights, this document]

>> Named Entities are: 
[('AI', 'ORG'), ('the IBM Institute for Business', 'ORG'), ('IBM', 'ORG')] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 266 =================================

The authors are also grateful for the contributions of many  IBM colleagues. In particular, they thank Mando Rotman,  Wouter Oosterbosch, Damian Brennan and Vanessa van de  Vliet. This report would not have been possible without the  help of many other colleagues within the IBM Watson and  advanced analytics department.  

------------------- Sentence 1 -------------------

The authors are also grateful for the contributions of many  IBM colleagues. 


>> Tokens are: 
[authors, grateful, contributions,  , IBM, colleagues, .] 

>> PoS Tags are: 
[('authors', 'NOUN'), ('grateful', 'ADJ'), ('contributions', 'NOUN'), (' ', 'SPACE'), ('IBM', 'PROPN'), ('colleagues', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('authors', 'nsubj'), ('grateful', 'acomp'), ('contributions', 'pobj'), (' ', 'nmod'), ('IBM', 'compound'), ('colleagues', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[authors, grateful], [grateful, contributions], [contributions,  ], [ , IBM], [IBM, colleagues], [colleagues, .]]

>> Trigrams: 
[[authors, grateful, contributions], [grateful, contributions,  ], [contributions,  , IBM], [ , IBM, colleagues], [IBM, colleagues, .]]

>> Noun Phrases are: 
[The authors, the contributions, many  IBM colleagues]

>> Named Entities are: 
[('IBM', 'ORG')] 

------------------- Sentence 2 -------------------

In particular, they thank Mando Rotman,  Wouter Oosterbosch, Damian Brennan and Vanessa van de  Vliet. 


>> Tokens are: 
[particular, ,, thank, Mando, Rotman, ,,  , Wouter, Oosterbosch, ,, Damian, Brennan, Vanessa, van, de,  , Vliet, .] 

>> PoS Tags are: 
[('particular', 'ADJ'), (',', 'PUNCT'), ('thank', 'VERB'), ('Mando', 'PROPN'), ('Rotman', 'PROPN'), (',', 'PUNCT'), (' ', 'SPACE'), ('Wouter', 'PROPN'), ('Oosterbosch', 'PROPN'), (',', 'PUNCT'), ('Damian', 'PROPN'), ('Brennan', 'PROPN'), ('Vanessa', 'PROPN'), ('van', 'PROPN'), ('de', 'ADP'), (' ', 'SPACE'), ('Vliet', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('particular', 'amod'), (',', 'punct'), ('thank', 'ROOT'), ('Mando', 'compound'), ('Rotman', 'dobj'), (',', 'punct'), (' ', 'punct'), ('Wouter', 'compound'), ('Oosterbosch', 'npadvmod'), (',', 'punct'), ('Damian', 'compound'), ('Brennan', 'conj'), ('Vanessa', 'conj'), ('van', 'nmod'), ('de', 'nmod'), (' ', 'compound'), ('Vliet', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[particular, ,], [,, thank], [thank, Mando], [Mando, Rotman], [Rotman, ,], [,,  ], [ , Wouter], [Wouter, Oosterbosch], [Oosterbosch, ,], [,, Damian], [Damian, Brennan], [Brennan, Vanessa], [Vanessa, van], [van, de], [de,  ], [ , Vliet], [Vliet, .]]

>> Trigrams: 
[[particular, ,, thank], [,, thank, Mando], [thank, Mando, Rotman], [Mando, Rotman, ,], [Rotman, ,,  ], [,,  , Wouter], [ , Wouter, Oosterbosch], [Wouter, Oosterbosch, ,], [Oosterbosch, ,, Damian], [,, Damian, Brennan], [Damian, Brennan, Vanessa], [Brennan, Vanessa, van], [Vanessa, van, de], [van, de,  ], [de,  , Vliet], [ , Vliet, .]]

>> Noun Phrases are: 
[they, Mando Rotman]

>> Named Entities are: 
[('Mando Rotman', 'PERSON'), ('Damian Brennan', 'PERSON'), ('Vanessa van de  Vliet', 'PERSON')] 

------------------- Sentence 3 -------------------

This report would not have been possible without the  help of many other colleagues within the IBM Watson and  advanced analytics department. 


>> Tokens are: 
[report, possible,  , help, colleagues, IBM, Watson,  , advanced, analytics, department, .] 

>> PoS Tags are: 
[('report', 'NOUN'), ('possible', 'ADJ'), (' ', 'SPACE'), ('help', 'NOUN'), ('colleagues', 'NOUN'), ('IBM', 'PROPN'), ('Watson', 'PROPN'), (' ', 'SPACE'), ('advanced', 'ADJ'), ('analytics', 'NOUN'), ('department', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('report', 'nsubj'), ('possible', 'acomp'), (' ', 'compound'), ('help', 'pobj'), ('colleagues', 'pobj'), ('IBM', 'compound'), ('Watson', 'pobj'), (' ', 'nmod'), ('advanced', 'amod'), ('analytics', 'compound'), ('department', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[report, possible], [possible,  ], [ , help], [help, colleagues], [colleagues, IBM], [IBM, Watson], [Watson,  ], [ , advanced], [advanced, analytics], [analytics, department], [department, .]]

>> Trigrams: 
[[report, possible,  ], [possible,  , help], [ , help, colleagues], [help, colleagues, IBM], [colleagues, IBM, Watson], [IBM, Watson,  ], [Watson,  , advanced], [ , advanced, analytics], [advanced, analytics, department], [analytics, department, .]]

>> Noun Phrases are: 
[This report, the  help, many other colleagues, the IBM Watson,  advanced analytics department]

>> Named Entities are: 
[('IBM', 'ORG'), ('Watson', 'PERSON')] 

------------------- Sentence 4 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 267 =================================

Finally, special thanks go to Apostolos Mourouzis and  Patricio Fernandez Weisson.  

------------------- Sentence 1 -------------------

Finally, special thanks go to Apostolos Mourouzis and  Patricio Fernandez Weisson. 


>> Tokens are: 
[Finally, ,, special, thanks, Apostolos, Mourouzis,  , Patricio, Fernandez, Weisson, .] 

>> PoS Tags are: 
[('Finally', 'ADV'), (',', 'PUNCT'), ('special', 'ADJ'), ('thanks', 'NOUN'), ('Apostolos', 'PROPN'), ('Mourouzis', 'PROPN'), (' ', 'SPACE'), ('Patricio', 'PROPN'), ('Fernandez', 'PROPN'), ('Weisson', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Finally', 'advmod'), (',', 'punct'), ('special', 'amod'), ('thanks', 'nsubj'), ('Apostolos', 'compound'), ('Mourouzis', 'pobj'), (' ', 'compound'), ('Patricio', 'compound'), ('Fernandez', 'compound'), ('Weisson', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[Finally, ,], [,, special], [special, thanks], [thanks, Apostolos], [Apostolos, Mourouzis], [Mourouzis,  ], [ , Patricio], [Patricio, Fernandez], [Fernandez, Weisson], [Weisson, .]]

>> Trigrams: 
[[Finally, ,, special], [,, special, thanks], [special, thanks, Apostolos], [thanks, Apostolos, Mourouzis], [Apostolos, Mourouzis,  ], [Mourouzis,  , Patricio], [ , Patricio, Fernandez], [Patricio, Fernandez, Weisson], [Fernandez, Weisson, .]]

>> Noun Phrases are: 
[special thanks, Apostolos Mourouzis,  Patricio Fernandez Weisson]

>> Named Entities are: 
[('Apostolos Mourouzis', 'PERSON'), ('Patricio Fernandez Weisson', 'PERSON')] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 268 =================================

Appendix Different types of learning Learning. which is one of the fundamentals of artificial  intelligence and machine learning, is when the algorithm  improves itself by looking at the data provided. There are two  elements involved: knowledge and feedback. Knowledge  provides information that’s already in the data, and the  algorithm can learn from feedback through interactions with  the user. This happens when a user gives the model feedback  about correct or falsely predicted outcomes. There are four  types of machine learning: supervised, unsupervised,  reinforcement and transfer. Currently the most often used  type is supervised learning, and thus we can say that the  most economical value is created within this category.

------------------- Sentence 1 -------------------

Appendix Different types of learning Learning. 


>> Tokens are: 
[Appendix, Different, types, learning, Learning, .] 

>> PoS Tags are: 
[('Appendix', 'PROPN'), ('Different', 'ADJ'), ('types', 'NOUN'), ('learning', 'VERB'), ('Learning', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Appendix', 'compound'), ('Different', 'amod'), ('types', 'ROOT'), ('learning', 'pcomp'), ('Learning', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Appendix, Different], [Different, types], [types, learning], [learning, Learning], [Learning, .]]

>> Trigrams: 
[[Appendix, Different, types], [Different, types, learning], [types, learning, Learning], [learning, Learning, .]]

>> Noun Phrases are: 
[Appendix Different types, Learning]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

which is one of the fundamentals of artificial  intelligence and machine learning, is when the algorithm  improves itself by looking at the data provided. 


>> Tokens are: 
[fundamentals, artificial,  , intelligence, machine, learning, ,, algorithm,  , improves, looking, data, provided, .] 

>> PoS Tags are: 
[('fundamentals', 'NOUN'), ('artificial', 'ADJ'), (' ', 'SPACE'), ('intelligence', 'NOUN'), ('machine', 'NOUN'), ('learning', 'NOUN'), (',', 'PUNCT'), ('algorithm', 'NOUN'), (' ', 'SPACE'), ('improves', 'VERB'), ('looking', 'VERB'), ('data', 'NOUN'), ('provided', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('fundamentals', 'pobj'), ('artificial', 'amod'), (' ', 'nmod'), ('intelligence', 'pobj'), ('machine', 'compound'), ('learning', 'conj'), (',', 'punct'), ('algorithm', 'nsubj'), (' ', 'appos'), ('improves', 'advcl'), ('looking', 'pcomp'), ('data', 'pobj'), ('provided', 'acl'), ('.', 'punct')]

>> Bigrams: 
[[fundamentals, artificial], [artificial,  ], [ , intelligence], [intelligence, machine], [machine, learning], [learning, ,], [,, algorithm], [algorithm,  ], [ , improves], [improves, looking], [looking, data], [data, provided], [provided, .]]

>> Trigrams: 
[[fundamentals, artificial,  ], [artificial,  , intelligence], [ , intelligence, machine], [intelligence, machine, learning], [machine, learning, ,], [learning, ,, algorithm], [,, algorithm,  ], [algorithm,  , improves], [ , improves, looking], [improves, looking, data], [looking, data, provided], [data, provided, .]]

>> Noun Phrases are: 
[the fundamentals, artificial  intelligence, machine learning, the algorithm, itself, the data]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

There are two  elements involved: knowledge and feedback. 


>> Tokens are: 
[ , elements, involved, :, knowledge, feedback, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('elements', 'NOUN'), ('involved', 'VERB'), (':', 'PUNCT'), ('knowledge', 'NOUN'), ('feedback', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'compound'), ('elements', 'attr'), ('involved', 'acl'), (':', 'punct'), ('knowledge', 'conj'), ('feedback', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[ , elements], [elements, involved], [involved, :], [:, knowledge], [knowledge, feedback], [feedback, .]]

>> Trigrams: 
[[ , elements, involved], [elements, involved, :], [involved, :, knowledge], [:, knowledge, feedback], [knowledge, feedback, .]]

>> Noun Phrases are: 
[two  elements, knowledge, feedback]

>> Named Entities are: 
[('two', 'CARDINAL')] 

------------------- Sentence 4 -------------------

Knowledge  provides information that’s already in the data, and the  algorithm can learn from feedback through interactions with  the user. 


>> Tokens are: 
[Knowledge,  , provides, information, data, ,,  , algorithm, learn, feedback, interactions,  , user, .] 

>> PoS Tags are: 
[('Knowledge', 'PROPN'), (' ', 'SPACE'), ('provides', 'VERB'), ('information', 'NOUN'), ('data', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('algorithm', 'NOUN'), ('learn', 'VERB'), ('feedback', 'NOUN'), ('interactions', 'NOUN'), (' ', 'SPACE'), ('user', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Knowledge', 'compound'), (' ', 'nsubj'), ('provides', 'ROOT'), ('information', 'dobj'), ('data', 'pobj'), (',', 'punct'), (' ', 'nsubj'), ('algorithm', 'nsubj'), ('learn', 'conj'), ('feedback', 'pobj'), ('interactions', 'pobj'), (' ', 'pobj'), ('user', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[Knowledge,  ], [ , provides], [provides, information], [information, data], [data, ,], [,,  ], [ , algorithm], [algorithm, learn], [learn, feedback], [feedback, interactions], [interactions,  ], [ , user], [user, .]]

>> Trigrams: 
[[Knowledge,  , provides], [ , provides, information], [provides, information, data], [information, data, ,], [data, ,,  ], [,,  , algorithm], [ , algorithm, learn], [algorithm, learn, feedback], [learn, feedback, interactions], [feedback, interactions,  ], [interactions,  , user], [ , user, .]]

>> Noun Phrases are: 
[information, the data, algorithm, feedback, interactions, the user]

>> Named Entities are: 
[] 

------------------- Sentence 5 -------------------

This happens when a user gives the model feedback  about correct or falsely predicted outcomes. 


>> Tokens are: 
[happens, user, gives, model, feedback,  , correct, falsely, predicted, outcomes, .] 

>> PoS Tags are: 
[('happens', 'VERB'), ('user', 'NOUN'), ('gives', 'VERB'), ('model', 'NOUN'), ('feedback', 'NOUN'), (' ', 'SPACE'), ('correct', 'ADJ'), ('falsely', 'ADV'), ('predicted', 'VERB'), ('outcomes', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('happens', 'ROOT'), ('user', 'nsubj'), ('gives', 'advcl'), ('model', 'compound'), ('feedback', 'dobj'), (' ', 'dobj'), ('correct', 'pobj'), ('falsely', 'advmod'), ('predicted', 'conj'), ('outcomes', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[happens, user], [user, gives], [gives, model], [model, feedback], [feedback,  ], [ , correct], [correct, falsely], [falsely, predicted], [predicted, outcomes], [outcomes, .]]

>> Trigrams: 
[[happens, user, gives], [user, gives, model], [gives, model, feedback], [model, feedback,  ], [feedback,  , correct], [ , correct, falsely], [correct, falsely, predicted], [falsely, predicted, outcomes], [predicted, outcomes, .]]

>> Noun Phrases are: 
[a user, the model feedback, outcomes]

>> Named Entities are: 
[] 

------------------- Sentence 6 -------------------

There are four  types of machine learning: supervised, unsupervised,  reinforcement and transfer. 


>> Tokens are: 
[ , types, machine, learning, :, supervised, ,, unsupervised, ,,  , reinforcement, transfer, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('types', 'NOUN'), ('machine', 'NOUN'), ('learning', 'NOUN'), (':', 'PUNCT'), ('supervised', 'VERB'), (',', 'PUNCT'), ('unsupervised', 'ADJ'), (',', 'PUNCT'), (' ', 'SPACE'), ('reinforcement', 'NOUN'), ('transfer', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'compound'), ('types', 'attr'), ('machine', 'compound'), ('learning', 'pobj'), (':', 'punct'), ('supervised', 'amod'), (',', 'punct'), ('unsupervised', 'conj'), (',', 'punct'), (' ', 'conj'), ('reinforcement', 'appos'), ('transfer', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[ , types], [types, machine], [machine, learning], [learning, :], [:, supervised], [supervised, ,], [,, unsupervised], [unsupervised, ,], [,,  ], [ , reinforcement], [reinforcement, transfer], [transfer, .]]

>> Trigrams: 
[[ , types, machine], [types, machine, learning], [machine, learning, :], [learning, :, supervised], [:, supervised, ,], [supervised, ,, unsupervised], [,, unsupervised, ,], [unsupervised, ,,  ], [,,  , reinforcement], [ , reinforcement, transfer], [reinforcement, transfer, .]]

>> Noun Phrases are: 
[four  types, machine learning, supervised, unsupervised,  reinforcement, transfer]

>> Named Entities are: 
[('four', 'CARDINAL')] 

------------------- Sentence 7 -------------------

Currently the most often used  type is supervised learning, and thus we can say that the  most economical value is created within this category. 


>> Tokens are: 
[Currently,  , type, supervised, learning, ,,  , economical, value, created, category, .] 

>> PoS Tags are: 
[('Currently', 'ADV'), (' ', 'SPACE'), ('type', 'NOUN'), ('supervised', 'ADJ'), ('learning', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('economical', 'ADJ'), ('value', 'NOUN'), ('created', 'VERB'), ('category', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Currently', 'advmod'), (' ', 'compound'), ('type', 'nsubjpass'), ('supervised', 'amod'), ('learning', 'ROOT'), (',', 'punct'), (' ', 'nmod'), ('economical', 'amod'), ('value', 'nsubjpass'), ('created', 'ccomp'), ('category', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Currently,  ], [ , type], [type, supervised], [supervised, learning], [learning, ,], [,,  ], [ , economical], [economical, value], [value, created], [created, category], [category, .]]

>> Trigrams: 
[[Currently,  , type], [ , type, supervised], [type, supervised, learning], [supervised, learning, ,], [learning, ,,  ], [,,  , economical], [ , economical, value], [economical, value, created], [value, created, category], [created, category, .]]

>> Noun Phrases are: 
[the most often used  type, we, the  most economical value, this category]

>> Named Entities are: 
[] 


================================ Paragraph 269 =================================

IBM Services     19 

------------------- Sentence 1 -------------------

IBM Services     19 


>> Tokens are: 
[IBM, Services,     , 19] 

>> PoS Tags are: 
[('IBM', 'PROPN'), ('Services', 'PROPN'), ('    ', 'SPACE'), ('19', 'NUM')] 

>> Dependency Tags are: 
[('IBM', 'compound'), ('Services', 'ROOT'), ('    ', 'appos'), ('19', 'nummod')]

>> Bigrams: 
[[IBM, Services], [Services,     ], [    , 19]]

>> Trigrams: 
[[IBM, Services,     ], [Services,     , 19]]

>> Noun Phrases are: 
[IBM Services]

>> Named Entities are: 
[('IBM Services', 'ORG')] 


================================ Paragraph 270 =================================

Supervised learning is a learning method that maps an input  to an output using human data and feedback to improve. A  data set is provided with associated correct labels to the  data. An example would be pictures of animals in which all  pictures were correctly labelled as the animal in the pictures.  Supervised learning trains based on historical data and  builds rules that can be applied to predict future problems.  The better the data set, the better the output.  

------------------- Sentence 1 -------------------

Supervised learning is a learning method that maps an input  to an output using human data and feedback to improve. 


>> Tokens are: 
[Supervised, learning, learning, method, maps, input,  , output, human, data, feedback, improve, .] 

>> PoS Tags are: 
[('Supervised', 'ADJ'), ('learning', 'NOUN'), ('learning', 'NOUN'), ('method', 'NOUN'), ('maps', 'VERB'), ('input', 'NOUN'), (' ', 'SPACE'), ('output', 'NOUN'), ('human', 'ADJ'), ('data', 'NOUN'), ('feedback', 'NOUN'), ('improve', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Supervised', 'amod'), ('learning', 'nsubj'), ('learning', 'compound'), ('method', 'attr'), ('maps', 'relcl'), ('input', 'dobj'), (' ', 'nummod'), ('output', 'pobj'), ('human', 'amod'), ('data', 'dobj'), ('feedback', 'conj'), ('improve', 'xcomp'), ('.', 'punct')]

>> Bigrams: 
[[Supervised, learning], [learning, learning], [learning, method], [method, maps], [maps, input], [input,  ], [ , output], [output, human], [human, data], [data, feedback], [feedback, improve], [improve, .]]

>> Trigrams: 
[[Supervised, learning, learning], [learning, learning, method], [learning, method, maps], [method, maps, input], [maps, input,  ], [input,  , output], [ , output, human], [output, human, data], [human, data, feedback], [data, feedback, improve], [feedback, improve, .]]

>> Noun Phrases are: 
[Supervised learning, a learning method, an input, an output, human data, feedback]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

A  data set is provided with associated correct labels to the  data. 


>> Tokens are: 
[ , data, set, provided, associated, correct, labels,  , data, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('data', 'NOUN'), ('set', 'NOUN'), ('provided', 'VERB'), ('associated', 'VERB'), ('correct', 'ADJ'), ('labels', 'NOUN'), (' ', 'SPACE'), ('data', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'compound'), ('data', 'compound'), ('set', 'nsubjpass'), ('provided', 'ROOT'), ('associated', 'amod'), ('correct', 'amod'), ('labels', 'pobj'), (' ', 'compound'), ('data', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[ , data], [data, set], [set, provided], [provided, associated], [associated, correct], [correct, labels], [labels,  ], [ , data], [data, .]]

>> Trigrams: 
[[ , data, set], [data, set, provided], [set, provided, associated], [provided, associated, correct], [associated, correct, labels], [correct, labels,  ], [labels,  , data], [ , data, .]]

>> Noun Phrases are: 
[A  data set, associated correct labels, the  data]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

An example would be pictures of animals in which all  pictures were correctly labelled as the animal in the pictures. 


>> Tokens are: 
[example, pictures, animals,  , pictures, correctly, labelled, animal, pictures, .] 

>> PoS Tags are: 
[('example', 'NOUN'), ('pictures', 'NOUN'), ('animals', 'NOUN'), (' ', 'SPACE'), ('pictures', 'NOUN'), ('correctly', 'ADV'), ('labelled', 'VERB'), ('animal', 'NOUN'), ('pictures', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('example', 'nsubj'), ('pictures', 'attr'), ('animals', 'pobj'), (' ', 'compound'), ('pictures', 'nsubjpass'), ('correctly', 'advmod'), ('labelled', 'relcl'), ('animal', 'pobj'), ('pictures', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[example, pictures], [pictures, animals], [animals,  ], [ , pictures], [pictures, correctly], [correctly, labelled], [labelled, animal], [animal, pictures], [pictures, .]]

>> Trigrams: 
[[example, pictures, animals], [pictures, animals,  ], [animals,  , pictures], [ , pictures, correctly], [pictures, correctly, labelled], [correctly, labelled, animal], [labelled, animal, pictures], [animal, pictures, .]]

>> Noun Phrases are: 
[An example, pictures, animals, all  pictures, the animal, the pictures]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 5 -------------------

Supervised learning trains based on historical data and  builds rules that can be applied to predict future problems. 


>> Tokens are: 
[Supervised, learning, trains, based, historical, data,  , builds, rules, applied, predict, future, problems, .] 

>> PoS Tags are: 
[('Supervised', 'ADJ'), ('learning', 'VERB'), ('trains', 'NOUN'), ('based', 'VERB'), ('historical', 'ADJ'), ('data', 'NOUN'), (' ', 'SPACE'), ('builds', 'VERB'), ('rules', 'NOUN'), ('applied', 'VERB'), ('predict', 'VERB'), ('future', 'ADJ'), ('problems', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Supervised', 'amod'), ('learning', 'compound'), ('trains', 'nsubj'), ('based', 'prep'), ('historical', 'amod'), ('data', 'pobj'), (' ', 'nsubj'), ('builds', 'ROOT'), ('rules', 'dobj'), ('applied', 'relcl'), ('predict', 'advcl'), ('future', 'amod'), ('problems', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Supervised, learning], [learning, trains], [trains, based], [based, historical], [historical, data], [data,  ], [ , builds], [builds, rules], [rules, applied], [applied, predict], [predict, future], [future, problems], [problems, .]]

>> Trigrams: 
[[Supervised, learning, trains], [learning, trains, based], [trains, based, historical], [based, historical, data], [historical, data,  ], [data,  , builds], [ , builds, rules], [builds, rules, applied], [rules, applied, predict], [applied, predict, future], [predict, future, problems], [future, problems, .]]

>> Noun Phrases are: 
[Supervised learning trains, historical data, rules, future problems]

>> Named Entities are: 
[] 

------------------- Sentence 6 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 7 -------------------

The better the data set, the better the output. 


>> Tokens are: 
[better, data, set, ,, better, output, .] 

>> PoS Tags are: 
[('better', 'ADJ'), ('data', 'NOUN'), ('set', 'VERB'), (',', 'PUNCT'), ('better', 'ADJ'), ('output', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('better', 'ROOT'), ('data', 'dobj'), ('set', 'acl'), (',', 'punct'), ('better', 'amod'), ('output', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[better, data], [data, set], [set, ,], [,, better], [better, output], [output, .]]

>> Trigrams: 
[[better, data, set], [data, set, ,], [set, ,, better], [,, better, output], [better, output, .]]

>> Noun Phrases are: 
[the data, , the better the output]

>> Named Entities are: 
[] 

------------------- Sentence 8 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 271 =================================

You may use this type of learning when you want to classify  or predict outcomes. With regression, you are predicting a  continuous value (“How much will the stock price be?”).  With classifying, you are assigning a label to an input (“Is  this picture a man or a woman?”). Other examples would  be using speech recognition to examine the sentiments of  people calling your customer service center, or image  recognition to define products in a warehouse so they  could be properly sorted. 

------------------- Sentence 1 -------------------

You may use this type of learning when you want to classify  or predict outcomes. 


>> Tokens are: 
[use, type, learning, want, classify,  , predict, outcomes, .] 

>> PoS Tags are: 
[('use', 'VERB'), ('type', 'NOUN'), ('learning', 'VERB'), ('want', 'VERB'), ('classify', 'VERB'), (' ', 'SPACE'), ('predict', 'VERB'), ('outcomes', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('use', 'ROOT'), ('type', 'dobj'), ('learning', 'pobj'), ('want', 'advcl'), ('classify', 'xcomp'), (' ', 'dobj'), ('predict', 'conj'), ('outcomes', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[use, type], [type, learning], [learning, want], [want, classify], [classify,  ], [ , predict], [predict, outcomes], [outcomes, .]]

>> Trigrams: 
[[use, type, learning], [type, learning, want], [learning, want, classify], [want, classify,  ], [classify,  , predict], [ , predict, outcomes], [predict, outcomes, .]]

>> Noun Phrases are: 
[You, this type, you, outcomes]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

With regression, you are predicting a  continuous value (“How much will the stock price be?”). 


>> Tokens are: 
[regression, ,, predicting,  , continuous, value, (, “, stock, price, ?, ”, ), .] 

>> PoS Tags are: 
[('regression', 'NOUN'), (',', 'PUNCT'), ('predicting', 'VERB'), (' ', 'SPACE'), ('continuous', 'ADJ'), ('value', 'NOUN'), ('(', 'PUNCT'), ('“', 'PUNCT'), ('stock', 'NOUN'), ('price', 'NOUN'), ('?', 'PUNCT'), ('”', 'PUNCT'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('regression', 'pobj'), (',', 'punct'), ('predicting', 'ROOT'), (' ', 'nmod'), ('continuous', 'amod'), ('value', 'dobj'), ('(', 'punct'), ('“', 'punct'), ('stock', 'compound'), ('price', 'nsubj'), ('?', 'punct'), ('”', 'punct'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[regression, ,], [,, predicting], [predicting,  ], [ , continuous], [continuous, value], [value, (], [(, “], [“, stock], [stock, price], [price, ?], [?, ”], [”, )], [), .]]

>> Trigrams: 
[[regression, ,, predicting], [,, predicting,  ], [predicting,  , continuous], [ , continuous, value], [continuous, value, (], [value, (, “], [(, “, stock], [“, stock, price], [stock, price, ?], [price, ?, ”], [?, ”, )], [”, ), .]]

>> Noun Phrases are: 
[regression, you, a  continuous value, the stock price]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

With classifying, you are assigning a label to an input (“Is  this picture a man or a woman?”). 


>> Tokens are: 
[classifying, ,, assigning, label, input, (, “,  , picture, man, woman, ?, ”, ), .] 

>> PoS Tags are: 
[('classifying', 'VERB'), (',', 'PUNCT'), ('assigning', 'VERB'), ('label', 'NOUN'), ('input', 'NOUN'), ('(', 'PUNCT'), ('“', 'PUNCT'), (' ', 'SPACE'), ('picture', 'NOUN'), ('man', 'NOUN'), ('woman', 'NOUN'), ('?', 'PUNCT'), ('”', 'PUNCT'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('classifying', 'pcomp'), (',', 'punct'), ('assigning', 'ccomp'), ('label', 'dobj'), ('input', 'pobj'), ('(', 'punct'), ('“', 'punct'), (' ', 'nsubj'), ('picture', 'attr'), ('man', 'attr'), ('woman', 'conj'), ('?', 'punct'), ('”', 'punct'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[classifying, ,], [,, assigning], [assigning, label], [label, input], [input, (], [(, “], [“,  ], [ , picture], [picture, man], [man, woman], [woman, ?], [?, ”], [”, )], [), .]]

>> Trigrams: 
[[classifying, ,, assigning], [,, assigning, label], [assigning, label, input], [label, input, (], [input, (, “], [(, “,  ], [“,  , picture], [ , picture, man], [picture, man, woman], [man, woman, ?], [woman, ?, ”], [?, ”, )], [”, ), .]]

>> Noun Phrases are: 
[you, a label, an input, this picture, a man, a woman]

>> Named Entities are: 
[] 

------------------- Sentence 5 -------------------

Other examples would  be using speech recognition to examine the sentiments of  people calling your customer service center, or image  recognition to define products in a warehouse so they  could be properly sorted. 


>> Tokens are: 
[examples,  , speech, recognition, examine, sentiments,  , people, calling, customer, service, center, ,, image,  , recognition, define, products, warehouse,  , properly, sorted, .] 

>> PoS Tags are: 
[('examples', 'NOUN'), (' ', 'SPACE'), ('speech', 'NOUN'), ('recognition', 'NOUN'), ('examine', 'VERB'), ('sentiments', 'NOUN'), (' ', 'SPACE'), ('people', 'NOUN'), ('calling', 'VERB'), ('customer', 'NOUN'), ('service', 'NOUN'), ('center', 'NOUN'), (',', 'PUNCT'), ('image', 'NOUN'), (' ', 'SPACE'), ('recognition', 'NOUN'), ('define', 'VERB'), ('products', 'NOUN'), ('warehouse', 'NOUN'), (' ', 'SPACE'), ('properly', 'ADV'), ('sorted', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('examples', 'nsubj'), (' ', 'nsubj'), ('speech', 'compound'), ('recognition', 'dobj'), ('examine', 'xcomp'), ('sentiments', 'dobj'), (' ', 'nmod'), ('people', 'pobj'), ('calling', 'acl'), ('customer', 'compound'), ('service', 'compound'), ('center', 'dobj'), (',', 'punct'), ('image', 'compound'), (' ', 'compound'), ('recognition', 'conj'), ('define', 'acl'), ('products', 'dobj'), ('warehouse', 'pobj'), (' ', 'nsubjpass'), ('properly', 'advmod'), ('sorted', 'advcl'), ('.', 'punct')]

>> Bigrams: 
[[examples,  ], [ , speech], [speech, recognition], [recognition, examine], [examine, sentiments], [sentiments,  ], [ , people], [people, calling], [calling, customer], [customer, service], [service, center], [center, ,], [,, image], [image,  ], [ , recognition], [recognition, define], [define, products], [products, warehouse], [warehouse,  ], [ , properly], [properly, sorted], [sorted, .]]

>> Trigrams: 
[[examples,  , speech], [ , speech, recognition], [speech, recognition, examine], [recognition, examine, sentiments], [examine, sentiments,  ], [sentiments,  , people], [ , people, calling], [people, calling, customer], [calling, customer, service], [customer, service, center], [service, center, ,], [center, ,, image], [,, image,  ], [image,  , recognition], [ , recognition, define], [recognition, define, products], [define, products, warehouse], [products, warehouse,  ], [warehouse,  , properly], [ , properly, sorted], [properly, sorted, .]]

>> Noun Phrases are: 
[Other examples, speech recognition, the sentiments,  people, your customer service center, image  recognition, products, a warehouse, they]

>> Named Entities are: 
[] 


================================ Paragraph 272 =================================

Unsupervised learning occurs when the algorithm is not  given a specific “wrong” or “right” outcome. Instead, the  algorithm is given unlabeled data. Unsupervised learning  is often used when you want to classify data but don’t know  how to do so. For example, you’d likely use unsupervised  learning if you had a set of customer data and you didn’t  know what kind of classes they would fit in. An unsupervised  learning algorithm can find natural groupings of similar  customers in a database and the user can then describe   and label them. 

------------------- Sentence 1 -------------------

Unsupervised learning occurs when the algorithm is not  given a specific “wrong” or “right” outcome. 


>> Tokens are: 
[Unsupervised, learning, occurs, algorithm,  , given, specific, “, wrong, ”, “, right, ”, outcome, .] 

>> PoS Tags are: 
[('Unsupervised', 'ADJ'), ('learning', 'NOUN'), ('occurs', 'VERB'), ('algorithm', 'NOUN'), (' ', 'SPACE'), ('given', 'VERB'), ('specific', 'ADJ'), ('“', 'PUNCT'), ('wrong', 'ADJ'), ('”', 'PUNCT'), ('“', 'PUNCT'), ('right', 'ADJ'), ('”', 'PUNCT'), ('outcome', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Unsupervised', 'compound'), ('learning', 'nsubj'), ('occurs', 'ROOT'), ('algorithm', 'nsubj'), (' ', 'nsubj'), ('given', 'prep'), ('specific', 'amod'), ('“', 'punct'), ('wrong', 'dobj'), ('”', 'punct'), ('“', 'punct'), ('right', 'amod'), ('”', 'punct'), ('outcome', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[Unsupervised, learning], [learning, occurs], [occurs, algorithm], [algorithm,  ], [ , given], [given, specific], [specific, “], [“, wrong], [wrong, ”], [”, “], [“, right], [right, ”], [”, outcome], [outcome, .]]

>> Trigrams: 
[[Unsupervised, learning, occurs], [learning, occurs, algorithm], [occurs, algorithm,  ], [algorithm,  , given], [ , given, specific], [given, specific, “], [specific, “, wrong], [“, wrong, ”], [wrong, ”, “], [”, “, right], [“, right, ”], [right, ”, outcome], [”, outcome, .]]

>> Noun Phrases are: 
[Unsupervised learning, the algorithm, “right” outcome]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Instead, the  algorithm is given unlabeled data. 


>> Tokens are: 
[Instead, ,,  , algorithm, given, unlabeled, data, .] 

>> PoS Tags are: 
[('Instead', 'ADV'), (',', 'PUNCT'), (' ', 'SPACE'), ('algorithm', 'NOUN'), ('given', 'VERB'), ('unlabeled', 'ADJ'), ('data', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Instead', 'advmod'), (',', 'punct'), (' ', 'compound'), ('algorithm', 'nsubjpass'), ('given', 'ROOT'), ('unlabeled', 'amod'), ('data', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Instead, ,], [,,  ], [ , algorithm], [algorithm, given], [given, unlabeled], [unlabeled, data], [data, .]]

>> Trigrams: 
[[Instead, ,,  ], [,,  , algorithm], [ , algorithm, given], [algorithm, given, unlabeled], [given, unlabeled, data], [unlabeled, data, .]]

>> Noun Phrases are: 
[the  algorithm, unlabeled data]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

Unsupervised learning  is often used when you want to classify data but don’t know  how to do so. 


>> Tokens are: 
[Unsupervised, learning,  , want, classify, data, know,  , .] 

>> PoS Tags are: 
[('Unsupervised', 'ADJ'), ('learning', 'VERB'), (' ', 'SPACE'), ('want', 'VERB'), ('classify', 'VERB'), ('data', 'NOUN'), ('know', 'VERB'), (' ', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Unsupervised', 'nsubjpass'), ('learning', 'acl'), (' ', 'nummod'), ('want', 'advcl'), ('classify', 'xcomp'), ('data', 'dobj'), ('know', 'conj'), (' ', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Unsupervised, learning], [learning,  ], [ , want], [want, classify], [classify, data], [data, know], [know,  ], [ , .]]

>> Trigrams: 
[[Unsupervised, learning,  ], [learning,  , want], [ , want, classify], [want, classify, data], [classify, data, know], [data, know,  ], [know,  , .]]

>> Noun Phrases are: 
[you, data]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

For example, you’d likely use unsupervised  learning if you had a set of customer data and you didn’t  know what kind of classes they would fit in. 


>> Tokens are: 
[example, ,, likely, use, unsupervised,  , learning, set, customer, data,  , know, kind, classes, fit, .] 

>> PoS Tags are: 
[('example', 'NOUN'), (',', 'PUNCT'), ('likely', 'ADV'), ('use', 'VERB'), ('unsupervised', 'ADJ'), (' ', 'SPACE'), ('learning', 'VERB'), ('set', 'NOUN'), ('customer', 'NOUN'), ('data', 'NOUN'), (' ', 'SPACE'), ('know', 'VERB'), ('kind', 'NOUN'), ('classes', 'NOUN'), ('fit', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('example', 'pobj'), (',', 'punct'), ('likely', 'advmod'), ('use', 'ROOT'), ('unsupervised', 'amod'), (' ', 'dobj'), ('learning', 'xcomp'), ('set', 'dobj'), ('customer', 'compound'), ('data', 'pobj'), (' ', 'nsubj'), ('know', 'conj'), ('kind', 'dobj'), ('classes', 'pobj'), ('fit', 'ccomp'), ('.', 'punct')]

>> Bigrams: 
[[example, ,], [,, likely], [likely, use], [use, unsupervised], [unsupervised,  ], [ , learning], [learning, set], [set, customer], [customer, data], [data,  ], [ , know], [know, kind], [kind, classes], [classes, fit], [fit, .]]

>> Trigrams: 
[[example, ,, likely], [,, likely, use], [likely, use, unsupervised], [use, unsupervised,  ], [unsupervised,  , learning], [ , learning, set], [learning, set, customer], [set, customer, data], [customer, data,  ], [data,  , know], [ , know, kind], [know, kind, classes], [kind, classes, fit], [classes, fit, .]]

>> Noun Phrases are: 
[example, you, you, a set, customer data, you, what kind, classes, they]

>> Named Entities are: 
[] 

------------------- Sentence 5 -------------------

An unsupervised  learning algorithm can find natural groupings of similar  customers in a database and the user can then describe   and label them. 


>> Tokens are: 
[unsupervised,  , learning, algorithm, find, natural, groupings, similar,  , customers, database, user, describe,   , label, .] 

>> PoS Tags are: 
[('unsupervised', 'ADJ'), (' ', 'SPACE'), ('learning', 'VERB'), ('algorithm', 'NOUN'), ('find', 'VERB'), ('natural', 'ADJ'), ('groupings', 'NOUN'), ('similar', 'ADJ'), (' ', 'SPACE'), ('customers', 'NOUN'), ('database', 'NOUN'), ('user', 'NOUN'), ('describe', 'VERB'), ('  ', 'SPACE'), ('label', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('unsupervised', 'amod'), (' ', 'compound'), ('learning', 'nsubj'), ('algorithm', 'advmod'), ('find', 'ROOT'), ('natural', 'amod'), ('groupings', 'dobj'), ('similar', 'amod'), (' ', 'compound'), ('customers', 'pobj'), ('database', 'pobj'), ('user', 'nsubj'), ('describe', 'conj'), ('  ', 'dobj'), ('label', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[unsupervised,  ], [ , learning], [learning, algorithm], [algorithm, find], [find, natural], [natural, groupings], [groupings, similar], [similar,  ], [ , customers], [customers, database], [database, user], [user, describe], [describe,   ], [  , label], [label, .]]

>> Trigrams: 
[[unsupervised,  , learning], [ , learning, algorithm], [learning, algorithm, find], [algorithm, find, natural], [find, natural, groupings], [natural, groupings, similar], [groupings, similar,  ], [similar,  , customers], [ , customers, database], [customers, database, user], [database, user, describe], [user, describe,   ], [describe,   , label], [  , label, .]]

>> Noun Phrases are: 
[natural groupings, similar  customers, a database, the user, them]

>> Named Entities are: 
[] 


================================ Paragraph 273 =================================

Reinforcement learning is a class in and of itself; it is not  given a specific goal, but rather learns from trial and error.  The main concept is that instead of a specific action being  labelled, there is a sequence of actions that is associated  with a reward. If we take a maze as an example, the  algorithm will be rewarded when it comes closer to its goal  and be penalized every time it gets stuck or moves away  from the completion. A recent example of reinforcement  learning is AlphaGo, where Google trained a deep  reinforcement learning network with many examples of  the game Go, eventually making its performance superior  to that of even the best human. This trick is not new, since  it was used in TD-Gammon in 1992, created by Gerald  Tesauro at IBM. TD-Gammon was a backgammon-playing  program that reached the performance of the best human  players at the time. 

------------------- Sentence 1 -------------------

Reinforcement learning is a class in and of itself; it is not  given a specific goal, but rather learns from trial and error. 


>> Tokens are: 
[Reinforcement, learning, class, ;,  , given, specific, goal, ,, learns, trial, error, .] 

>> PoS Tags are: 
[('Reinforcement', 'NOUN'), ('learning', 'NOUN'), ('class', 'NOUN'), (';', 'PUNCT'), (' ', 'SPACE'), ('given', 'VERB'), ('specific', 'ADJ'), ('goal', 'NOUN'), (',', 'PUNCT'), ('learns', 'VERB'), ('trial', 'NOUN'), ('error', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Reinforcement', 'compound'), ('learning', 'nsubj'), ('class', 'attr'), (';', 'punct'), (' ', 'nsubj'), ('given', 'ROOT'), ('specific', 'amod'), ('goal', 'dobj'), (',', 'punct'), ('learns', 'conj'), ('trial', 'pobj'), ('error', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[Reinforcement, learning], [learning, class], [class, ;], [;,  ], [ , given], [given, specific], [specific, goal], [goal, ,], [,, learns], [learns, trial], [trial, error], [error, .]]

>> Trigrams: 
[[Reinforcement, learning, class], [learning, class, ;], [class, ;,  ], [;,  , given], [ , given, specific], [given, specific, goal], [specific, goal, ,], [goal, ,, learns], [,, learns, trial], [learns, trial, error], [trial, error, .]]

>> Noun Phrases are: 
[Reinforcement learning, a class, itself, it, a specific goal, trial, error]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

The main concept is that instead of a specific action being  labelled, there is a sequence of actions that is associated  with a reward. 


>> Tokens are: 
[main, concept, instead, specific, action,  , labelled, ,, sequence, actions, associated,  , reward, .] 

>> PoS Tags are: 
[('main', 'ADJ'), ('concept', 'NOUN'), ('instead', 'ADV'), ('specific', 'ADJ'), ('action', 'NOUN'), (' ', 'SPACE'), ('labelled', 'VERB'), (',', 'PUNCT'), ('sequence', 'NOUN'), ('actions', 'NOUN'), ('associated', 'VERB'), (' ', 'SPACE'), ('reward', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('main', 'amod'), ('concept', 'nsubj'), ('instead', 'advmod'), ('specific', 'amod'), ('action', 'nsubjpass'), (' ', 'nsubj'), ('labelled', 'advcl'), (',', 'punct'), ('sequence', 'attr'), ('actions', 'pobj'), ('associated', 'relcl'), (' ', 'dobj'), ('reward', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[main, concept], [concept, instead], [instead, specific], [specific, action], [action,  ], [ , labelled], [labelled, ,], [,, sequence], [sequence, actions], [actions, associated], [associated,  ], [ , reward], [reward, .]]

>> Trigrams: 
[[main, concept, instead], [concept, instead, specific], [instead, specific, action], [specific, action,  ], [action,  , labelled], [ , labelled, ,], [labelled, ,, sequence], [,, sequence, actions], [sequence, actions, associated], [actions, associated,  ], [associated,  , reward], [ , reward, .]]

>> Noun Phrases are: 
[The main concept, a specific action, a sequence, actions, a reward]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

If we take a maze as an example, the  algorithm will be rewarded when it comes closer to its goal  and be penalized every time it gets stuck or moves away  from the completion. 


>> Tokens are: 
[maze, example, ,,  , algorithm, rewarded, comes, closer, goal,  , penalized, time, gets, stuck, moves, away,  , completion, .] 

>> PoS Tags are: 
[('maze', 'NOUN'), ('example', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('algorithm', 'NOUN'), ('rewarded', 'VERB'), ('comes', 'VERB'), ('closer', 'ADV'), ('goal', 'NOUN'), (' ', 'SPACE'), ('penalized', 'VERB'), ('time', 'NOUN'), ('gets', 'AUX'), ('stuck', 'ADJ'), ('moves', 'VERB'), ('away', 'ADV'), (' ', 'SPACE'), ('completion', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('maze', 'dobj'), ('example', 'pobj'), (',', 'punct'), (' ', 'nsubjpass'), ('algorithm', 'advmod'), ('rewarded', 'ROOT'), ('comes', 'advcl'), ('closer', 'advmod'), ('goal', 'pobj'), (' ', 'appos'), ('penalized', 'conj'), ('time', 'npadvmod'), ('gets', 'auxpass'), ('stuck', 'relcl'), ('moves', 'conj'), ('away', 'advmod'), (' ', 'dobj'), ('completion', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[maze, example], [example, ,], [,,  ], [ , algorithm], [algorithm, rewarded], [rewarded, comes], [comes, closer], [closer, goal], [goal,  ], [ , penalized], [penalized, time], [time, gets], [gets, stuck], [stuck, moves], [moves, away], [away,  ], [ , completion], [completion, .]]

>> Trigrams: 
[[maze, example, ,], [example, ,,  ], [,,  , algorithm], [ , algorithm, rewarded], [algorithm, rewarded, comes], [rewarded, comes, closer], [comes, closer, goal], [closer, goal,  ], [goal,  , penalized], [ , penalized, time], [penalized, time, gets], [time, gets, stuck], [gets, stuck, moves], [stuck, moves, away], [moves, away,  ], [away,  , completion], [ , completion, .]]

>> Noun Phrases are: 
[we, a maze, an example, it, its goal, it, the completion]

>> Named Entities are: 
[] 

------------------- Sentence 5 -------------------

A recent example of reinforcement  learning is AlphaGo, where Google trained a deep  reinforcement learning network with many examples of  the game Go, eventually making its performance superior  to that of even the best human. 


>> Tokens are: 
[recent, example, reinforcement,  , learning, AlphaGo, ,, Google, trained, deep,  , reinforcement, learning, network, examples,  , game, ,, eventually, making, performance, superior,  , best, human, .] 

>> PoS Tags are: 
[('recent', 'ADJ'), ('example', 'NOUN'), ('reinforcement', 'NOUN'), (' ', 'SPACE'), ('learning', 'NOUN'), ('AlphaGo', 'PROPN'), (',', 'PUNCT'), ('Google', 'PROPN'), ('trained', 'VERB'), ('deep', 'ADJ'), (' ', 'SPACE'), ('reinforcement', 'NOUN'), ('learning', 'NOUN'), ('network', 'NOUN'), ('examples', 'NOUN'), (' ', 'SPACE'), ('game', 'NOUN'), (',', 'PUNCT'), ('eventually', 'ADV'), ('making', 'VERB'), ('performance', 'NOUN'), ('superior', 'ADJ'), (' ', 'SPACE'), ('best', 'ADJ'), ('human', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('recent', 'amod'), ('example', 'nsubj'), ('reinforcement', 'compound'), (' ', 'compound'), ('learning', 'pobj'), ('AlphaGo', 'attr'), (',', 'punct'), ('Google', 'nsubj'), ('trained', 'relcl'), ('deep', 'amod'), (' ', 'nmod'), ('reinforcement', 'npadvmod'), ('learning', 'compound'), ('network', 'dobj'), ('examples', 'pobj'), (' ', 'pobj'), ('game', 'nsubj'), (',', 'punct'), ('eventually', 'advmod'), ('making', 'acl'), ('performance', 'dobj'), ('superior', 'ccomp'), (' ', 'punct'), ('best', 'amod'), ('human', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[recent, example], [example, reinforcement], [reinforcement,  ], [ , learning], [learning, AlphaGo], [AlphaGo, ,], [,, Google], [Google, trained], [trained, deep], [deep,  ], [ , reinforcement], [reinforcement, learning], [learning, network], [network, examples], [examples,  ], [ , game], [game, ,], [,, eventually], [eventually, making], [making, performance], [performance, superior], [superior,  ], [ , best], [best, human], [human, .]]

>> Trigrams: 
[[recent, example, reinforcement], [example, reinforcement,  ], [reinforcement,  , learning], [ , learning, AlphaGo], [learning, AlphaGo, ,], [AlphaGo, ,, Google], [,, Google, trained], [Google, trained, deep], [trained, deep,  ], [deep,  , reinforcement], [ , reinforcement, learning], [reinforcement, learning, network], [learning, network, examples], [network, examples,  ], [examples,  , game], [ , game, ,], [game, ,, eventually], [,, eventually, making], [eventually, making, performance], [making, performance, superior], [performance, superior,  ], [superior,  , best], [ , best, human], [best, human, .]]

>> Noun Phrases are: 
[A recent example, reinforcement  learning, AlphaGo, Google, a deep  reinforcement learning network, many examples, the game, its performance, even the best human]

>> Named Entities are: 
[('AlphaGo', 'ORG'), ('Google', 'ORG')] 

------------------- Sentence 6 -------------------

This trick is not new, since  it was used in TD-Gammon in 1992, created by Gerald  Tesauro at IBM. 


>> Tokens are: 
[trick, new, ,,  , TD, -, Gammon, 1992, ,, created, Gerald,  , Tesauro, IBM, .] 

>> PoS Tags are: 
[('trick', 'NOUN'), ('new', 'ADJ'), (',', 'PUNCT'), (' ', 'SPACE'), ('TD', 'PROPN'), ('-', 'PUNCT'), ('Gammon', 'PROPN'), ('1992', 'NUM'), (',', 'PUNCT'), ('created', 'VERB'), ('Gerald', 'PROPN'), (' ', 'SPACE'), ('Tesauro', 'PROPN'), ('IBM', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('trick', 'nsubj'), ('new', 'acomp'), (',', 'punct'), (' ', 'pobj'), ('TD', 'compound'), ('-', 'punct'), ('Gammon', 'pobj'), ('1992', 'pobj'), (',', 'punct'), ('created', 'advcl'), ('Gerald', 'nmod'), (' ', 'compound'), ('Tesauro', 'pobj'), ('IBM', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[trick, new], [new, ,], [,,  ], [ , TD], [TD, -], [-, Gammon], [Gammon, 1992], [1992, ,], [,, created], [created, Gerald], [Gerald,  ], [ , Tesauro], [Tesauro, IBM], [IBM, .]]

>> Trigrams: 
[[trick, new, ,], [new, ,,  ], [,,  , TD], [ , TD, -], [TD, -, Gammon], [-, Gammon, 1992], [Gammon, 1992, ,], [1992, ,, created], [,, created, Gerald], [created, Gerald,  ], [Gerald,  , Tesauro], [ , Tesauro, IBM], [Tesauro, IBM, .]]

>> Noun Phrases are: 
[This trick, it, TD-Gammon, Gerald  Tesauro, IBM]

>> Named Entities are: 
[('1992', 'DATE'), ('Gerald', 'PERSON'), ('IBM', 'ORG')] 

------------------- Sentence 7 -------------------

TD-Gammon was a backgammon-playing  program that reached the performance of the best human  players at the time. 


>> Tokens are: 
[TD, -, Gammon, backgammon, -, playing,  , program, reached, performance, best, human,  , players, time, .] 

>> PoS Tags are: 
[('TD', 'PROPN'), ('-', 'PUNCT'), ('Gammon', 'PROPN'), ('backgammon', 'NOUN'), ('-', 'PUNCT'), ('playing', 'VERB'), (' ', 'SPACE'), ('program', 'NOUN'), ('reached', 'VERB'), ('performance', 'NOUN'), ('best', 'ADJ'), ('human', 'ADJ'), (' ', 'SPACE'), ('players', 'NOUN'), ('time', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('TD', 'compound'), ('-', 'punct'), ('Gammon', 'nsubj'), ('backgammon', 'compound'), ('-', 'punct'), ('playing', 'compound'), (' ', 'compound'), ('program', 'attr'), ('reached', 'relcl'), ('performance', 'dobj'), ('best', 'amod'), ('human', 'amod'), (' ', 'compound'), ('players', 'pobj'), ('time', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[TD, -], [-, Gammon], [Gammon, backgammon], [backgammon, -], [-, playing], [playing,  ], [ , program], [program, reached], [reached, performance], [performance, best], [best, human], [human,  ], [ , players], [players, time], [time, .]]

>> Trigrams: 
[[TD, -, Gammon], [-, Gammon, backgammon], [Gammon, backgammon, -], [backgammon, -, playing], [-, playing,  ], [playing,  , program], [ , program, reached], [program, reached, performance], [reached, performance, best], [performance, best, human], [best, human,  ], [human,  , players], [ , players, time], [players, time, .]]

>> Noun Phrases are: 
[TD-Gammon, a backgammon-playing  program, the performance, the best human  players, the time]

>> Named Entities are: 
[('TD-Gammon', 'PERSON')] 


================================ Paragraph 274 =================================

Reinforcement learning is not currently widely used, but it  does have high potential when developed more extensively.  You would need a lot of data (which is not always the case  and takes time to process) to be able to make reinforcement  learning work. 

------------------- Sentence 1 -------------------

Reinforcement learning is not currently widely used, but it  does have high potential when developed more extensively.   


>> Tokens are: 
[Reinforcement, learning, currently, widely, ,,  , high, potential, developed, extensively, .,  ] 

>> PoS Tags are: 
[('Reinforcement', 'NOUN'), ('learning', 'NOUN'), ('currently', 'ADV'), ('widely', 'ADV'), (',', 'PUNCT'), (' ', 'SPACE'), ('high', 'ADJ'), ('potential', 'NOUN'), ('developed', 'VERB'), ('extensively', 'ADV'), ('.', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Reinforcement', 'compound'), ('learning', 'nsubj'), ('currently', 'advmod'), ('widely', 'advmod'), (',', 'punct'), (' ', 'nsubj'), ('high', 'amod'), ('potential', 'dobj'), ('developed', 'advcl'), ('extensively', 'advmod'), ('.', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[Reinforcement, learning], [learning, currently], [currently, widely], [widely, ,], [,,  ], [ , high], [high, potential], [potential, developed], [developed, extensively], [extensively, .], [.,  ]]

>> Trigrams: 
[[Reinforcement, learning, currently], [learning, currently, widely], [currently, widely, ,], [widely, ,,  ], [,,  , high], [ , high, potential], [high, potential, developed], [potential, developed, extensively], [developed, extensively, .], [extensively, .,  ]]

>> Noun Phrases are: 
[Reinforcement learning, it, high potential]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

You would need a lot of data (which is not always the case  and takes time to process) to be able to make reinforcement  learning work. 


>> Tokens are: 
[need, lot, data, (, case,  , takes, time, process, ), able, reinforcement,  , learning, work, .] 

>> PoS Tags are: 
[('need', 'VERB'), ('lot', 'NOUN'), ('data', 'NOUN'), ('(', 'PUNCT'), ('case', 'NOUN'), (' ', 'SPACE'), ('takes', 'VERB'), ('time', 'NOUN'), ('process', 'VERB'), (')', 'PUNCT'), ('able', 'ADJ'), ('reinforcement', 'NOUN'), (' ', 'SPACE'), ('learning', 'VERB'), ('work', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('need', 'ROOT'), ('lot', 'dobj'), ('data', 'pobj'), ('(', 'punct'), ('case', 'attr'), (' ', 'dep'), ('takes', 'conj'), ('time', 'dobj'), ('process', 'relcl'), (')', 'punct'), ('able', 'acomp'), ('reinforcement', 'dobj'), (' ', 'nsubj'), ('learning', 'advcl'), ('work', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[need, lot], [lot, data], [data, (], [(, case], [case,  ], [ , takes], [takes, time], [time, process], [process, )], [), able], [able, reinforcement], [reinforcement,  ], [ , learning], [learning, work], [work, .]]

>> Trigrams: 
[[need, lot, data], [lot, data, (], [data, (, case], [(, case,  ], [case,  , takes], [ , takes, time], [takes, time, process], [time, process, )], [process, ), able], [), able, reinforcement], [able, reinforcement,  ], [reinforcement,  , learning], [ , learning, work], [learning, work, .]]

>> Noun Phrases are: 
[You, a lot, data, the case, time, reinforcement, work]

>> Named Entities are: 
[] 


================================ Paragraph 275 =================================

Transfer learning is when your algorithm learns to solve  one problem, takes information from this problem and then  solves a new problem with that information. This currently  happens a lot with image recognition. Pre-trained neural  networks are used to solve new problems.

------------------- Sentence 1 -------------------

Transfer learning is when your algorithm learns to solve  one problem, takes information from this problem and then  solves a new problem with that information. 


>> Tokens are: 
[Transfer, learning, algorithm, learns, solve,  , problem, ,, takes, information, problem,  , solves, new, problem, information, .] 

>> PoS Tags are: 
[('Transfer', 'NOUN'), ('learning', 'NOUN'), ('algorithm', 'NOUN'), ('learns', 'VERB'), ('solve', 'VERB'), (' ', 'SPACE'), ('problem', 'NOUN'), (',', 'PUNCT'), ('takes', 'VERB'), ('information', 'NOUN'), ('problem', 'NOUN'), (' ', 'SPACE'), ('solves', 'VERB'), ('new', 'ADJ'), ('problem', 'NOUN'), ('information', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Transfer', 'compound'), ('learning', 'nsubj'), ('algorithm', 'nsubj'), ('learns', 'advcl'), ('solve', 'xcomp'), (' ', 'dobj'), ('problem', 'dobj'), (',', 'punct'), ('takes', 'conj'), ('information', 'dobj'), ('problem', 'pobj'), (' ', 'nsubj'), ('solves', 'conj'), ('new', 'amod'), ('problem', 'dobj'), ('information', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Transfer, learning], [learning, algorithm], [algorithm, learns], [learns, solve], [solve,  ], [ , problem], [problem, ,], [,, takes], [takes, information], [information, problem], [problem,  ], [ , solves], [solves, new], [new, problem], [problem, information], [information, .]]

>> Trigrams: 
[[Transfer, learning, algorithm], [learning, algorithm, learns], [algorithm, learns, solve], [learns, solve,  ], [solve,  , problem], [ , problem, ,], [problem, ,, takes], [,, takes, information], [takes, information, problem], [information, problem,  ], [problem,  , solves], [ , solves, new], [solves, new, problem], [new, problem, information], [problem, information, .]]

>> Noun Phrases are: 
[Transfer learning, your algorithm, one problem, information, this problem, a new problem, that information]

>> Named Entities are: 
[('one', 'CARDINAL')] 

------------------- Sentence 2 -------------------

This currently  happens a lot with image recognition. 


>> Tokens are: 
[currently,  , happens, lot, image, recognition, .] 

>> PoS Tags are: 
[('currently', 'ADV'), (' ', 'SPACE'), ('happens', 'VERB'), ('lot', 'NOUN'), ('image', 'NOUN'), ('recognition', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('currently', 'advmod'), (' ', 'nsubj'), ('happens', 'ROOT'), ('lot', 'dobj'), ('image', 'compound'), ('recognition', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[currently,  ], [ , happens], [happens, lot], [lot, image], [image, recognition], [recognition, .]]

>> Trigrams: 
[[currently,  , happens], [ , happens, lot], [happens, lot, image], [lot, image, recognition], [image, recognition, .]]

>> Noun Phrases are: 
[a lot, image recognition]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

Pre-trained neural  networks are used to solve new problems. 


>> Tokens are: 
[Pre, -, trained, neural,  , networks, solve, new, problems, .] 

>> PoS Tags are: 
[('Pre', 'ADJ'), ('-', 'ADJ'), ('trained', 'ADJ'), ('neural', 'ADJ'), (' ', 'SPACE'), ('networks', 'NOUN'), ('solve', 'VERB'), ('new', 'ADJ'), ('problems', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Pre', 'amod'), ('-', 'amod'), ('trained', 'amod'), ('neural', 'amod'), (' ', 'compound'), ('networks', 'nsubjpass'), ('solve', 'xcomp'), ('new', 'amod'), ('problems', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Pre, -], [-, trained], [trained, neural], [neural,  ], [ , networks], [networks, solve], [solve, new], [new, problems], [problems, .]]

>> Trigrams: 
[[Pre, -, trained], [-, trained, neural], [trained, neural,  ], [neural,  , networks], [ , networks, solve], [networks, solve, new], [solve, new, problems], [new, problems, .]]

>> Noun Phrases are: 
[Pre-trained neural  networks, new problems]

>> Named Entities are: 
[] 


================================ Paragraph 276 =================================

© Copyright IBM Corporation 2018 

------------------- Sentence 1 -------------------

© Copyright IBM Corporation 2018 


>> Tokens are: 
[©, Copyright, IBM, Corporation, 2018] 

>> PoS Tags are: 
[('©', 'PROPN'), ('Copyright', 'PROPN'), ('IBM', 'PROPN'), ('Corporation', 'NOUN'), ('2018', 'NUM')] 

>> Dependency Tags are: 
[('©', 'compound'), ('Copyright', 'compound'), ('IBM', 'compound'), ('Corporation', 'ROOT'), ('2018', 'nummod')]

>> Bigrams: 
[[©, Copyright], [Copyright, IBM], [IBM, Corporation], [Corporation, 2018]]

>> Trigrams: 
[[©, Copyright, IBM], [Copyright, IBM, Corporation], [IBM, Corporation, 2018]]

>> Noun Phrases are: 
[© Copyright IBM Corporation]

>> Named Entities are: 
[('2018', 'DATE')] 


================================ Paragraph 277 =================================

IBM Corporation  New Orchard Road  Armonk, NY 10504  

------------------- Sentence 1 -------------------

IBM Corporation   


>> Tokens are: 
[IBM, Corporation,  ] 

>> PoS Tags are: 
[('IBM', 'PROPN'), ('Corporation', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('IBM', 'compound'), ('Corporation', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[IBM, Corporation], [Corporation,  ]]

>> Trigrams: 
[[IBM, Corporation,  ]]

>> Noun Phrases are: 
[IBM Corporation]

>> Named Entities are: 
[('IBM Corporation', 'ORG')] 

------------------- Sentence 2 -------------------

New Orchard Road  Armonk, NY 10504   


>> Tokens are: 
[New, Orchard, Road,  , Armonk, ,, NY, 10504,  ] 

>> PoS Tags are: 
[('New', 'PROPN'), ('Orchard', 'PROPN'), ('Road', 'PROPN'), (' ', 'SPACE'), ('Armonk', 'PROPN'), (',', 'PUNCT'), ('NY', 'PROPN'), ('10504', 'NUM'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('New', 'compound'), ('Orchard', 'compound'), ('Road', 'nmod'), (' ', 'compound'), ('Armonk', 'ROOT'), (',', 'punct'), ('NY', 'appos'), ('10504', 'nummod'), (' ', 'appos')]

>> Bigrams: 
[[New, Orchard], [Orchard, Road], [Road,  ], [ , Armonk], [Armonk, ,], [,, NY], [NY, 10504], [10504,  ]]

>> Trigrams: 
[[New, Orchard, Road], [Orchard, Road,  ], [Road,  , Armonk], [ , Armonk, ,], [Armonk, ,, NY], [,, NY, 10504], [NY, 10504,  ]]

>> Noun Phrases are: 
[New Orchard Road  Armonk, NY]

>> Named Entities are: 
[('New Orchard Road  Armonk', 'EVENT'), ('10504', 'DATE')] 


================================ Paragraph 278 =================================

Produced in the United States of America  October 2018 

------------------- Sentence 1 -------------------

Produced in the United States of America  October 2018 


>> Tokens are: 
[Produced, United, States, America,  , October, 2018] 

>> PoS Tags are: 
[('Produced', 'VERB'), ('United', 'PROPN'), ('States', 'PROPN'), ('America', 'PROPN'), (' ', 'SPACE'), ('October', 'PROPN'), ('2018', 'NUM')] 

>> Dependency Tags are: 
[('Produced', 'ROOT'), ('United', 'compound'), ('States', 'pobj'), ('America', 'pobj'), (' ', 'npadvmod'), ('October', 'npadvmod'), ('2018', 'nummod')]

>> Bigrams: 
[[Produced, United], [United, States], [States, America], [America,  ], [ , October], [October, 2018]]

>> Trigrams: 
[[Produced, United, States], [United, States, America], [States, America,  ], [America,  , October], [ , October, 2018]]

>> Noun Phrases are: 
[the United States, America]

>> Named Entities are: 
[('the United States of America', 'GPE'), ('October 2018', 'DATE')] 


================================ Paragraph 279 =================================

IBM, the IBM logo, ibm.com, and IBM Watson are trademarks or  registered trademarks of International Business Machines Corp.,  registered in many jurisdictions worldwide. Other product and   service names might be trademarks of IBM or other companies.   A current list of IBM trademarks is available on the web at   www.ibm.com/legal/copytrade.shtml.  

------------------- Sentence 1 -------------------

IBM, the IBM logo, ibm.com, and IBM Watson are trademarks or  registered trademarks of International Business Machines Corp.,  registered in many jurisdictions worldwide. 


>> Tokens are: 
[IBM, ,, IBM, logo, ,, ibm.com, ,, IBM, Watson, trademarks,  , registered, trademarks, International, Business, Machines, Corp., ,,  , registered, jurisdictions, worldwide, .] 

>> PoS Tags are: 
[('IBM', 'PROPN'), (',', 'PUNCT'), ('IBM', 'PROPN'), ('logo', 'NOUN'), (',', 'PUNCT'), ('ibm.com', 'X'), (',', 'PUNCT'), ('IBM', 'PROPN'), ('Watson', 'PROPN'), ('trademarks', 'NOUN'), (' ', 'SPACE'), ('registered', 'VERB'), ('trademarks', 'NOUN'), ('International', 'PROPN'), ('Business', 'PROPN'), ('Machines', 'PROPN'), ('Corp.', 'PROPN'), (',', 'PUNCT'), (' ', 'SPACE'), ('registered', 'VERB'), ('jurisdictions', 'NOUN'), ('worldwide', 'ADV'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('IBM', 'nsubj'), (',', 'punct'), ('IBM', 'compound'), ('logo', 'conj'), (',', 'punct'), ('ibm.com', 'conj'), (',', 'punct'), ('IBM', 'compound'), ('Watson', 'conj'), ('trademarks', 'attr'), (' ', 'nmod'), ('registered', 'amod'), ('trademarks', 'conj'), ('International', 'compound'), ('Business', 'compound'), ('Machines', 'compound'), ('Corp.', 'pobj'), (',', 'punct'), (' ', 'appos'), ('registered', 'acl'), ('jurisdictions', 'pobj'), ('worldwide', 'advmod'), ('.', 'punct')]

>> Bigrams: 
[[IBM, ,], [,, IBM], [IBM, logo], [logo, ,], [,, ibm.com], [ibm.com, ,], [,, IBM], [IBM, Watson], [Watson, trademarks], [trademarks,  ], [ , registered], [registered, trademarks], [trademarks, International], [International, Business], [Business, Machines], [Machines, Corp.], [Corp., ,], [,,  ], [ , registered], [registered, jurisdictions], [jurisdictions, worldwide], [worldwide, .]]

>> Trigrams: 
[[IBM, ,, IBM], [,, IBM, logo], [IBM, logo, ,], [logo, ,, ibm.com], [,, ibm.com, ,], [ibm.com, ,, IBM], [,, IBM, Watson], [IBM, Watson, trademarks], [Watson, trademarks,  ], [trademarks,  , registered], [ , registered, trademarks], [registered, trademarks, International], [trademarks, International, Business], [International, Business, Machines], [Business, Machines, Corp.], [Machines, Corp., ,], [Corp., ,,  ], [,,  , registered], [ , registered, jurisdictions], [registered, jurisdictions, worldwide], [jurisdictions, worldwide, .]]

>> Noun Phrases are: 
[IBM, the IBM logo, IBM Watson, trademarks,  registered trademarks, International Business Machines Corp., many jurisdictions]

>> Named Entities are: 
[('IBM', 'ORG'), ('IBM', 'ORG'), ('IBM Watson', 'ORG'), ('International Business Machines Corp.', 'ORG')] 

------------------- Sentence 2 -------------------

Other product and   service names might be trademarks of IBM or other companies. 


>> Tokens are: 
[product,   , service, names, trademarks, IBM, companies, .] 

>> PoS Tags are: 
[('product', 'NOUN'), ('  ', 'SPACE'), ('service', 'NOUN'), ('names', 'NOUN'), ('trademarks', 'NOUN'), ('IBM', 'PROPN'), ('companies', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('product', 'nsubj'), ('  ', 'compound'), ('service', 'compound'), ('names', 'conj'), ('trademarks', 'attr'), ('IBM', 'pobj'), ('companies', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[product,   ], [  , service], [service, names], [names, trademarks], [trademarks, IBM], [IBM, companies], [companies, .]]

>> Trigrams: 
[[product,   , service], [  , service, names], [service, names, trademarks], [names, trademarks, IBM], [trademarks, IBM, companies], [IBM, companies, .]]

>> Noun Phrases are: 
[Other product,   service names, trademarks, IBM, other companies]

>> Named Entities are: 
[('IBM', 'ORG')] 

------------------- Sentence 3 -------------------

  A current list of IBM trademarks is available on the web at   www.ibm.com/legal/copytrade.shtml. 


>> Tokens are: 
[  , current, list, IBM, trademarks, available, web,   , www.ibm.com/legal/copytrade.shtml, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('current', 'ADJ'), ('list', 'NOUN'), ('IBM', 'PROPN'), ('trademarks', 'NOUN'), ('available', 'ADJ'), ('web', 'NOUN'), ('  ', 'SPACE'), ('www.ibm.com/legal/copytrade.shtml', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'dep'), ('current', 'amod'), ('list', 'nsubj'), ('IBM', 'compound'), ('trademarks', 'pobj'), ('available', 'acomp'), ('web', 'pobj'), ('  ', 'pobj'), ('www.ibm.com/legal/copytrade.shtml', 'npadvmod'), ('.', 'punct')]

>> Bigrams: 
[[  , current], [current, list], [list, IBM], [IBM, trademarks], [trademarks, available], [available, web], [web,   ], [  , www.ibm.com/legal/copytrade.shtml], [www.ibm.com/legal/copytrade.shtml, .]]

>> Trigrams: 
[[  , current, list], [current, list, IBM], [list, IBM, trademarks], [IBM, trademarks, available], [trademarks, available, web], [available, web,   ], [web,   , www.ibm.com/legal/copytrade.shtml], [  , www.ibm.com/legal/copytrade.shtml, .]]

>> Noun Phrases are: 
[A current list, IBM trademarks, the web]

>> Named Entities are: 
[('IBM', 'ORG')] 

------------------- Sentence 4 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 280 =================================

Microsoft, Windows, Windows NT and the Windows logo are  trademarks of Microsoft Corporation in the United States, other  countries, or both. 

------------------- Sentence 1 -------------------

Microsoft, Windows, Windows NT and the Windows logo are  trademarks of Microsoft Corporation in the United States, other  countries, or both. 


>> Tokens are: 
[Microsoft, ,, Windows, ,, Windows, NT, Windows, logo,  , trademarks, Microsoft, Corporation, United, States, ,,  , countries, ,, .] 

>> PoS Tags are: 
[('Microsoft', 'PROPN'), (',', 'PUNCT'), ('Windows', 'PROPN'), (',', 'PUNCT'), ('Windows', 'PROPN'), ('NT', 'PROPN'), ('Windows', 'PROPN'), ('logo', 'NOUN'), (' ', 'SPACE'), ('trademarks', 'NOUN'), ('Microsoft', 'PROPN'), ('Corporation', 'PROPN'), ('United', 'PROPN'), ('States', 'PROPN'), (',', 'PUNCT'), (' ', 'SPACE'), ('countries', 'NOUN'), (',', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Microsoft', 'nsubj'), (',', 'punct'), ('Windows', 'conj'), (',', 'punct'), ('Windows', 'compound'), ('NT', 'conj'), ('Windows', 'compound'), ('logo', 'conj'), (' ', 'nmod'), ('trademarks', 'attr'), ('Microsoft', 'compound'), ('Corporation', 'pobj'), ('United', 'compound'), ('States', 'pobj'), (',', 'punct'), (' ', 'compound'), ('countries', 'appos'), (',', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Microsoft, ,], [,, Windows], [Windows, ,], [,, Windows], [Windows, NT], [NT, Windows], [Windows, logo], [logo,  ], [ , trademarks], [trademarks, Microsoft], [Microsoft, Corporation], [Corporation, United], [United, States], [States, ,], [,,  ], [ , countries], [countries, ,], [,, .]]

>> Trigrams: 
[[Microsoft, ,, Windows], [,, Windows, ,], [Windows, ,, Windows], [,, Windows, NT], [Windows, NT, Windows], [NT, Windows, logo], [Windows, logo,  ], [logo,  , trademarks], [ , trademarks, Microsoft], [trademarks, Microsoft, Corporation], [Microsoft, Corporation, United], [Corporation, United, States], [United, States, ,], [States, ,,  ], [,,  , countries], [ , countries, ,], [countries, ,, .]]

>> Noun Phrases are: 
[Microsoft, Windows, Windows NT, the Windows logo,  trademarks, Microsoft Corporation, the United States, other  countries]

>> Named Entities are: 
[('Microsoft', 'ORG'), ('Windows', 'PRODUCT'), ('Microsoft Corporation', 'ORG'), ('the United States', 'GPE')] 


================================ Paragraph 281 =================================

This document is current as of the initial date of publication and may  be changed by IBM at any time. Not all offerings are available in every  country in which IBM operates.  

------------------- Sentence 1 -------------------

This document is current as of the initial date of publication and may  be changed by IBM at any time. 


>> Tokens are: 
[document, current, initial, date, publication,  , changed, IBM, time, .] 

>> PoS Tags are: 
[('document', 'NOUN'), ('current', 'ADJ'), ('initial', 'ADJ'), ('date', 'NOUN'), ('publication', 'NOUN'), (' ', 'SPACE'), ('changed', 'VERB'), ('IBM', 'PROPN'), ('time', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('document', 'nsubj'), ('current', 'acomp'), ('initial', 'amod'), ('date', 'pobj'), ('publication', 'pobj'), (' ', 'nsubjpass'), ('changed', 'conj'), ('IBM', 'pobj'), ('time', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[document, current], [current, initial], [initial, date], [date, publication], [publication,  ], [ , changed], [changed, IBM], [IBM, time], [time, .]]

>> Trigrams: 
[[document, current, initial], [current, initial, date], [initial, date, publication], [date, publication,  ], [publication,  , changed], [ , changed, IBM], [changed, IBM, time], [IBM, time, .]]

>> Noun Phrases are: 
[This document, the initial date, publication, IBM, any time]

>> Named Entities are: 
[('IBM', 'ORG')] 

------------------- Sentence 2 -------------------

Not all offerings are available in every  country in which IBM operates. 


>> Tokens are: 
[offerings, available,  , country, IBM, operates, .] 

>> PoS Tags are: 
[('offerings', 'NOUN'), ('available', 'ADJ'), (' ', 'SPACE'), ('country', 'NOUN'), ('IBM', 'PROPN'), ('operates', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('offerings', 'nsubj'), ('available', 'acomp'), (' ', 'compound'), ('country', 'pobj'), ('IBM', 'nsubj'), ('operates', 'relcl'), ('.', 'punct')]

>> Bigrams: 
[[offerings, available], [available,  ], [ , country], [country, IBM], [IBM, operates], [operates, .]]

>> Trigrams: 
[[offerings, available,  ], [available,  , country], [ , country, IBM], [country, IBM, operates], [IBM, operates, .]]

>> Noun Phrases are: 
[Not all offerings, every  country, IBM]

>> Named Entities are: 
[('IBM', 'ORG')] 

------------------- Sentence 3 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 282 =================================

The performance data and client examples cited are presented for  illustrative purposes only. Actual performance results may vary depending  on specific configurations and operating conditions. THE INFORMATION  IN THIS DOCUMENT IS PROVIDED “AS IS” WITHOUT ANY WARRANTY,  EXPRESS OR IMPLIED, INCLUDING WITHOUT ANY WARRANTIES OF  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND ANY  WARRANTY OR CONDITION OF NON-INFRINGEMENT. IBM products are  warranted according to the terms and conditions of the agreements under  which they are provided. 

------------------- Sentence 1 -------------------

The performance data and client examples cited are presented for  illustrative purposes only. 


>> Tokens are: 
[performance, data, client, examples, cited, presented,  , illustrative, purposes, .] 

>> PoS Tags are: 
[('performance', 'NOUN'), ('data', 'NOUN'), ('client', 'NOUN'), ('examples', 'NOUN'), ('cited', 'VERB'), ('presented', 'VERB'), (' ', 'SPACE'), ('illustrative', 'ADJ'), ('purposes', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('performance', 'compound'), ('data', 'nsubjpass'), ('client', 'compound'), ('examples', 'conj'), ('cited', 'acl'), ('presented', 'ROOT'), (' ', 'nmod'), ('illustrative', 'amod'), ('purposes', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[performance, data], [data, client], [client, examples], [examples, cited], [cited, presented], [presented,  ], [ , illustrative], [illustrative, purposes], [purposes, .]]

>> Trigrams: 
[[performance, data, client], [data, client, examples], [client, examples, cited], [examples, cited, presented], [cited, presented,  ], [presented,  , illustrative], [ , illustrative, purposes], [illustrative, purposes, .]]

>> Noun Phrases are: 
[The performance data, client examples,  illustrative purposes]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Actual performance results may vary depending  on specific configurations and operating conditions. 


>> Tokens are: 
[Actual, performance, results, vary, depending,  , specific, configurations, operating, conditions, .] 

>> PoS Tags are: 
[('Actual', 'ADJ'), ('performance', 'NOUN'), ('results', 'NOUN'), ('vary', 'VERB'), ('depending', 'VERB'), (' ', 'SPACE'), ('specific', 'ADJ'), ('configurations', 'NOUN'), ('operating', 'NOUN'), ('conditions', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Actual', 'amod'), ('performance', 'compound'), ('results', 'nsubj'), ('vary', 'ROOT'), ('depending', 'xcomp'), (' ', 'dobj'), ('specific', 'amod'), ('configurations', 'pobj'), ('operating', 'compound'), ('conditions', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[Actual, performance], [performance, results], [results, vary], [vary, depending], [depending,  ], [ , specific], [specific, configurations], [configurations, operating], [operating, conditions], [conditions, .]]

>> Trigrams: 
[[Actual, performance, results], [performance, results, vary], [results, vary, depending], [vary, depending,  ], [depending,  , specific], [ , specific, configurations], [specific, configurations, operating], [configurations, operating, conditions], [operating, conditions, .]]

>> Noun Phrases are: 
[Actual performance results, specific configurations, operating conditions]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

THE INFORMATION  IN THIS DOCUMENT IS PROVIDED “AS IS” WITHOUT ANY WARRANTY,  EXPRESS OR IMPLIED, INCLUDING WITHOUT ANY WARRANTIES OF  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND ANY  WARRANTY OR CONDITION OF NON-INFRINGEMENT. 


>> Tokens are: 
[INFORMATION,  , DOCUMENT, PROVIDED, “, ”, WARRANTY, ,,  , EXPRESS, IMPLIED, ,, INCLUDING, WARRANTIES,  , MERCHANTABILITY, ,, FITNESS, PARTICULAR, PURPOSE,  , WARRANTY, CONDITION, NON, -, INFRINGEMENT, .] 

>> PoS Tags are: 
[('INFORMATION', 'NOUN'), (' ', 'SPACE'), ('DOCUMENT', 'NOUN'), ('PROVIDED', 'VERB'), ('“', 'PUNCT'), ('”', 'PUNCT'), ('WARRANTY', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('EXPRESS', 'PROPN'), ('IMPLIED', 'PROPN'), (',', 'PUNCT'), ('INCLUDING', 'VERB'), ('WARRANTIES', 'PROPN'), (' ', 'SPACE'), ('MERCHANTABILITY', 'PROPN'), (',', 'PUNCT'), ('FITNESS', 'PROPN'), ('PARTICULAR', 'ADJ'), ('PURPOSE', 'PROPN'), (' ', 'SPACE'), ('WARRANTY', 'PROPN'), ('CONDITION', 'PROPN'), ('NON', 'PROPN'), ('-', 'PROPN'), ('INFRINGEMENT', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('INFORMATION', 'nsubj'), (' ', 'appos'), ('DOCUMENT', 'pobj'), ('PROVIDED', 'prep'), ('“', 'punct'), ('”', 'punct'), ('WARRANTY', 'pobj'), (',', 'punct'), (' ', 'pobj'), ('EXPRESS', 'appos'), ('IMPLIED', 'conj'), (',', 'punct'), ('INCLUDING', 'prep'), ('WARRANTIES', 'pobj'), (' ', 'compound'), ('MERCHANTABILITY', 'pobj'), (',', 'punct'), ('FITNESS', 'dep'), ('PARTICULAR', 'amod'), ('PURPOSE', 'pobj'), (' ', 'nummod'), ('WARRANTY', 'conj'), ('CONDITION', 'conj'), ('NON', 'pobj'), ('-', 'compound'), ('INFRINGEMENT', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[INFORMATION,  ], [ , DOCUMENT], [DOCUMENT, PROVIDED], [PROVIDED, “], [“, ”], [”, WARRANTY], [WARRANTY, ,], [,,  ], [ , EXPRESS], [EXPRESS, IMPLIED], [IMPLIED, ,], [,, INCLUDING], [INCLUDING, WARRANTIES], [WARRANTIES,  ], [ , MERCHANTABILITY], [MERCHANTABILITY, ,], [,, FITNESS], [FITNESS, PARTICULAR], [PARTICULAR, PURPOSE], [PURPOSE,  ], [ , WARRANTY], [WARRANTY, CONDITION], [CONDITION, NON], [NON, -], [-, INFRINGEMENT], [INFRINGEMENT, .]]

>> Trigrams: 
[[INFORMATION,  , DOCUMENT], [ , DOCUMENT, PROVIDED], [DOCUMENT, PROVIDED, “], [PROVIDED, “, ”], [“, ”, WARRANTY], [”, WARRANTY, ,], [WARRANTY, ,,  ], [,,  , EXPRESS], [ , EXPRESS, IMPLIED], [EXPRESS, IMPLIED, ,], [IMPLIED, ,, INCLUDING], [,, INCLUDING, WARRANTIES], [INCLUDING, WARRANTIES,  ], [WARRANTIES,  , MERCHANTABILITY], [ , MERCHANTABILITY, ,], [MERCHANTABILITY, ,, FITNESS], [,, FITNESS, PARTICULAR], [FITNESS, PARTICULAR, PURPOSE], [PARTICULAR, PURPOSE,  ], [PURPOSE,  , WARRANTY], [ , WARRANTY, CONDITION], [WARRANTY, CONDITION, NON], [CONDITION, NON, -], [NON, -, INFRINGEMENT], [-, INFRINGEMENT, .]]

>> Noun Phrases are: 
[THE INFORMATION, THIS DOCUMENT, AS, ANY WARRANTY, EXPRESS, IMPLIED, ANY WARRANTIES,  MERCHANTABILITY, A PARTICULAR PURPOSE, NON, -INFRINGEMENT]

>> Named Entities are: 
[('EXPRESS', 'ORG'), ('IMPLIED', 'PERSON'), ('FITNESS FOR A PARTICULAR PURPOSE', 'ORG'), ('ANY', 'ORG'), ('NON-INFRINGEMENT', 'ORG')] 

------------------- Sentence 4 -------------------

IBM products are  warranted according to the terms and conditions of the agreements under  which they are provided. 


>> Tokens are: 
[IBM, products,  , warranted, according, terms, conditions, agreements,  , provided, .] 

>> PoS Tags are: 
[('IBM', 'PROPN'), ('products', 'NOUN'), (' ', 'SPACE'), ('warranted', 'VERB'), ('according', 'VERB'), ('terms', 'NOUN'), ('conditions', 'NOUN'), ('agreements', 'NOUN'), (' ', 'SPACE'), ('provided', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('IBM', 'compound'), ('products', 'nsubjpass'), (' ', 'nsubjpass'), ('warranted', 'ROOT'), ('according', 'prep'), ('terms', 'pobj'), ('conditions', 'conj'), ('agreements', 'pobj'), (' ', 'pobj'), ('provided', 'relcl'), ('.', 'punct')]

>> Bigrams: 
[[IBM, products], [products,  ], [ , warranted], [warranted, according], [according, terms], [terms, conditions], [conditions, agreements], [agreements,  ], [ , provided], [provided, .]]

>> Trigrams: 
[[IBM, products,  ], [products,  , warranted], [ , warranted, according], [warranted, according, terms], [according, terms, conditions], [terms, conditions, agreements], [conditions, agreements,  ], [agreements,  , provided], [ , provided, .]]

>> Noun Phrases are: 
[IBM products, the terms, conditions, the agreements, they]

>> Named Entities are: 
[('IBM', 'ORG')] 


================================ Paragraph 283 =================================

 1 www.weforum.org/agenda/2016/01/the-fourth-industrial-revolution- what-it-means-and-how-to-respond  

------------------- Sentence 1 -------------------

 1 www.weforum.org/agenda/2016/01/the-fourth-industrial-revolution- what-it-means-and-how-to-respond   


>> Tokens are: 
[ , 1, www.weforum.org/agenda/2016/01/the-fourth-industrial-revolution-, -, -, means, -, -, -, -, respond,  ] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('1', 'NUM'), ('www.weforum.org/agenda/2016/01/the-fourth-industrial-revolution-', 'NOUN'), ('-', 'PUNCT'), ('-', 'PUNCT'), ('means', 'NOUN'), ('-', 'PUNCT'), ('-', 'PUNCT'), ('-', 'PUNCT'), ('-', 'PUNCT'), ('respond', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'nsubj'), ('1', 'nummod'), ('www.weforum.org/agenda/2016/01/the-fourth-industrial-revolution-', 'nmod'), ('-', 'punct'), ('-', 'punct'), ('means', 'relcl'), ('-', 'punct'), ('-', 'punct'), ('-', 'punct'), ('-', 'punct'), ('respond', 'xcomp'), (' ', 'ROOT')]

>> Bigrams: 
[[ , 1], [1, www.weforum.org/agenda/2016/01/the-fourth-industrial-revolution-], [www.weforum.org/agenda/2016/01/the-fourth-industrial-revolution-, -], [-, -], [-, means], [means, -], [-, -], [-, -], [-, -], [-, respond], [respond,  ]]

>> Trigrams: 
[[ , 1, www.weforum.org/agenda/2016/01/the-fourth-industrial-revolution-], [1, www.weforum.org/agenda/2016/01/the-fourth-industrial-revolution-, -], [www.weforum.org/agenda/2016/01/the-fourth-industrial-revolution-, -, -], [-, -, means], [-, means, -], [means, -, -], [-, -, -], [-, -, -], [-, -, respond], [-, respond,  ]]

>> Noun Phrases are: 
[what]

>> Named Entities are: 
[('1', 'CARDINAL')] 


================================ Paragraph 284 =================================

 2 www.quora.com/What-is-artificial-intelligence-What-are-task- domains-in-AI  

------------------- Sentence 1 -------------------

 2 www.quora.com/What-is-artificial-intelligence-What-are-task- domains-in-AI   


>> Tokens are: 
[ , 2, www.quora.com/What-is-artificial-intelligence-What-are-task-, domains, -, -, AI,  ] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('2', 'NUM'), ('www.quora.com/What-is-artificial-intelligence-What-are-task-', 'PROPN'), ('domains', 'NOUN'), ('-', 'PUNCT'), ('-', 'PUNCT'), ('AI', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'npadvmod'), ('2', 'compound'), ('www.quora.com/What-is-artificial-intelligence-What-are-task-', 'compound'), ('domains', 'ROOT'), ('-', 'punct'), ('-', 'punct'), ('AI', 'pobj'), (' ', 'punct')]

>> Bigrams: 
[[ , 2], [2, www.quora.com/What-is-artificial-intelligence-What-are-task-], [www.quora.com/What-is-artificial-intelligence-What-are-task-, domains], [domains, -], [-, -], [-, AI], [AI,  ]]

>> Trigrams: 
[[ , 2, www.quora.com/What-is-artificial-intelligence-What-are-task-], [2, www.quora.com/What-is-artificial-intelligence-What-are-task-, domains], [www.quora.com/What-is-artificial-intelligence-What-are-task-, domains, -], [domains, -, -], [-, -, AI], [-, AI,  ]]

>> Noun Phrases are: 
[ 2 www.quora.com/What-is-artificial-intelligence-What-are-task- domains, AI]

>> Named Entities are: 
[('2', 'CARDINAL')] 


================================ Paragraph 285 =================================

 3 ai100.stanford.edu/sites/default/files/ai_100_report_0906fnlc_ single.pdf  

------------------- Sentence 1 -------------------

 3 ai100.stanford.edu/sites/default/files/ai_100_report_0906fnlc_ single.pdf   


>> Tokens are: 
[ , 3, ai100.stanford.edu/sites/default/files/ai_100_report_0906fnlc, _, single.pdf,  ] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('3', 'NUM'), ('ai100.stanford.edu/sites/default/files/ai_100_report_0906fnlc', 'NOUN'), ('_', 'ADP'), ('single.pdf', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT'), ('3', 'nummod'), ('ai100.stanford.edu/sites/default/files/ai_100_report_0906fnlc', 'appos'), ('_', 'prep'), ('single.pdf', 'npadvmod'), (' ', 'pobj')]

>> Bigrams: 
[[ , 3], [3, ai100.stanford.edu/sites/default/files/ai_100_report_0906fnlc], [ai100.stanford.edu/sites/default/files/ai_100_report_0906fnlc, _], [_, single.pdf], [single.pdf,  ]]

>> Trigrams: 
[[ , 3, ai100.stanford.edu/sites/default/files/ai_100_report_0906fnlc], [3, ai100.stanford.edu/sites/default/files/ai_100_report_0906fnlc, _], [ai100.stanford.edu/sites/default/files/ai_100_report_0906fnlc, _, single.pdf], [_, single.pdf,  ]]

>> Noun Phrases are: 
[3 ai100.stanford.edu/sites/default/files/ai_100_report_0906fnlc]

>> Named Entities are: 
[('3', 'CARDINAL')] 


================================ Paragraph 286 =================================

 4 www.investopedia.com/terms/a/artificial-intelligence-ai.asp   

------------------- Sentence 1 -------------------

 4 www.investopedia.com/terms/a/artificial-intelligence-ai.asp    


>> Tokens are: 
[ , 4, www.investopedia.com/terms/a/artificial-intelligence-ai.asp,   ] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('4', 'NUM'), ('www.investopedia.com/terms/a/artificial-intelligence-ai.asp', 'NOUN'), ('  ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT'), ('4', 'appos'), ('www.investopedia.com/terms/a/artificial-intelligence-ai.asp', 'prep'), ('  ', 'appos')]

>> Bigrams: 
[[ , 4], [4, www.investopedia.com/terms/a/artificial-intelligence-ai.asp], [www.investopedia.com/terms/a/artificial-intelligence-ai.asp,   ]]

>> Trigrams: 
[[ , 4, www.investopedia.com/terms/a/artificial-intelligence-ai.asp], [4, www.investopedia.com/terms/a/artificial-intelligence-ai.asp,   ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('4', 'CARDINAL')] 


================================ Paragraph 287 =================================

 5 neuralnetworksanddeeplearning.com/chap5.html 

------------------- Sentence 1 -------------------

 5 neuralnetworksanddeeplearning.com/chap5.html 


>> Tokens are: 
[ , 5, neuralnetworksanddeeplearning.com/chap5.html] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('5', 'NUM'), ('neuralnetworksanddeeplearning.com/chap5.html', 'NOUN')] 

>> Dependency Tags are: 
[(' ', 'ROOT'), ('5', 'nummod'), ('neuralnetworksanddeeplearning.com/chap5.html', 'punct')]

>> Bigrams: 
[[ , 5], [5, neuralnetworksanddeeplearning.com/chap5.html]]

>> Trigrams: 
[[ , 5, neuralnetworksanddeeplearning.com/chap5.html]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('5', 'CARDINAL')] 


================================ Paragraph 288 =================================

 6 datasciencedegree.wisconsin.edu/data-science/what-do-data- scientists-do 

------------------- Sentence 1 -------------------

 6 datasciencedegree.wisconsin.edu/data-science/what-do-data- scientists- 


>> Tokens are: 
[ , 6, datasciencedegree.wisconsin.edu/data-science/what-do-data-, scientists, -] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('6', 'NUM'), ('datasciencedegree.wisconsin.edu/data-science/what-do-data-', 'PROPN'), ('scientists', 'NOUN'), ('-', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'nmod'), ('6', 'nummod'), ('datasciencedegree.wisconsin.edu/data-science/what-do-data-', 'compound'), ('scientists', 'ROOT'), ('-', 'punct')]

>> Bigrams: 
[[ , 6], [6, datasciencedegree.wisconsin.edu/data-science/what-do-data-], [datasciencedegree.wisconsin.edu/data-science/what-do-data-, scientists], [scientists, -]]

>> Trigrams: 
[[ , 6, datasciencedegree.wisconsin.edu/data-science/what-do-data-], [6, datasciencedegree.wisconsin.edu/data-science/what-do-data-, scientists], [datasciencedegree.wisconsin.edu/data-science/what-do-data-, scientists, -]]

>> Noun Phrases are: 
[ 6 datasciencedegree.wisconsin.edu/data-science/what-do-data- scientists]

>> Named Entities are: 
[('6', 'CARDINAL')] 

------------------- Sentence 2 -------------------

do 


>> Tokens are: 
[] 

>> PoS Tags are: 
[] 

>> Dependency Tags are: 
[]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 289 =================================

 7 www.interaction-design.org/literature/book/the-social-design-of- technical-systems-building-technologies-for-communities/the- evolution-of-computing  

------------------- Sentence 1 -------------------

 7 www.interaction-design.org/literature/book/the-social-design-of- technical-systems-building-technologies-for-communities/the- evolution-of-computing   


>> Tokens are: 
[ , 7, www.interaction-design.org/literature/book/the-social-design-of-, technical, -, systems, -, building, -, technologies, -, -, communities, /, the-, evolution, -, -, computing,  ] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('7', 'NUM'), ('www.interaction-design.org/literature/book/the-social-design-of-', 'PROPN'), ('technical', 'ADJ'), ('-', 'PUNCT'), ('systems', 'NOUN'), ('-', 'PUNCT'), ('building', 'NOUN'), ('-', 'PUNCT'), ('technologies', 'NOUN'), ('-', 'PUNCT'), ('-', 'PUNCT'), ('communities', 'NOUN'), ('/', 'SYM'), ('the-', 'ADV'), ('evolution', 'NOUN'), ('-', 'PUNCT'), ('-', 'PUNCT'), ('computing', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT'), ('7', 'nummod'), ('www.interaction-design.org/literature/book/the-social-design-of-', 'nmod'), ('technical', 'amod'), ('-', 'punct'), ('systems', 'nmod'), ('-', 'punct'), ('building', 'appos'), ('-', 'punct'), ('technologies', 'nmod'), ('-', 'punct'), ('-', 'punct'), ('communities', 'pobj'), ('/', 'punct'), ('the-', 'appos'), ('evolution', 'appos'), ('-', 'punct'), ('-', 'punct'), ('computing', 'pcomp'), (' ', 'punct')]

>> Bigrams: 
[[ , 7], [7, www.interaction-design.org/literature/book/the-social-design-of-], [www.interaction-design.org/literature/book/the-social-design-of-, technical], [technical, -], [-, systems], [systems, -], [-, building], [building, -], [-, technologies], [technologies, -], [-, -], [-, communities], [communities, /], [/, the-], [the-, evolution], [evolution, -], [-, -], [-, computing], [computing,  ]]

>> Trigrams: 
[[ , 7, www.interaction-design.org/literature/book/the-social-design-of-], [7, www.interaction-design.org/literature/book/the-social-design-of-, technical], [www.interaction-design.org/literature/book/the-social-design-of-, technical, -], [technical, -, systems], [-, systems, -], [systems, -, building], [-, building, -], [building, -, technologies], [-, technologies, -], [technologies, -, -], [-, -, communities], [-, communities, /], [communities, /, the-], [/, the-, evolution], [the-, evolution, -], [evolution, -, -], [-, -, computing], [-, computing,  ]]

>> Noun Phrases are: 
[-building, communities, evolution]

>> Named Entities are: 
[('7', 'CARDINAL')] 


================================ Paragraph 290 =================================

 8 www.forbes.com/sites/blakemorgan/2017/06/13/ethics-and-artificial- intelligence-with-ibm-watsons-rob-high/#72b4a0e3260e  www.forbes.com/sites/gilpress/2016/12/21/artificial-intelligence- pioneers-peter-norvig-google/#6ecd8a2d38c6  

------------------- Sentence 1 -------------------

 8 www.forbes.com/sites/blakemorgan/2017/06/13/ethics-and-artificial- intelligence-with-ibm-watsons-rob-high/#72b4a0e3260e  www.forbes.com/sites/gilpress/2016/12/21/artificial-intelligence- pioneers-peter-norvig-google/#6ecd8a2d38c6   


>> Tokens are: 
[ , 8, www.forbes.com/sites/blakemorgan/2017/06/13/ethics-and-artificial-, intelligence, -, -, ibm, -, watsons, -, rob, -, high/#72b4a0e3260e,  , www.forbes.com/sites/gilpress/2016/12/21/artificial-intelligence-, pioneers, -, peter, -, norvig, -, google/#6ecd8a2d38c6,  ] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('8', 'NUM'), ('www.forbes.com/sites/blakemorgan/2017/06/13/ethics-and-artificial-', 'NUM'), ('intelligence', 'NOUN'), ('-', 'PUNCT'), ('-', 'PUNCT'), ('ibm', 'NOUN'), ('-', 'PUNCT'), ('watsons', 'NOUN'), ('-', 'PUNCT'), ('rob', 'NOUN'), ('-', 'PUNCT'), ('high/#72b4a0e3260e', 'NOUN'), (' ', 'SPACE'), ('www.forbes.com/sites/gilpress/2016/12/21/artificial-intelligence-', 'PROPN'), ('pioneers', 'NOUN'), ('-', 'PUNCT'), ('peter', 'NOUN'), ('-', 'PUNCT'), ('norvig', 'NOUN'), ('-', 'PUNCT'), ('google/#6ecd8a2d38c6', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT'), ('8', 'nummod'), ('www.forbes.com/sites/blakemorgan/2017/06/13/ethics-and-artificial-', 'npadvmod'), ('intelligence', 'nmod'), ('-', 'punct'), ('-', 'punct'), ('ibm', 'pobj'), ('-', 'punct'), ('watsons', 'amod'), ('-', 'punct'), ('rob', 'nmod'), ('-', 'punct'), ('high/#72b4a0e3260e', 'punct'), (' ', 'compound'), ('www.forbes.com/sites/gilpress/2016/12/21/artificial-intelligence-', 'compound'), ('pioneers', 'appos'), ('-', 'punct'), ('peter', 'compound'), ('-', 'punct'), ('norvig', 'compound'), ('-', 'punct'), ('google/#6ecd8a2d38c6', 'appos'), (' ', 'pobj')]

>> Bigrams: 
[[ , 8], [8, www.forbes.com/sites/blakemorgan/2017/06/13/ethics-and-artificial-], [www.forbes.com/sites/blakemorgan/2017/06/13/ethics-and-artificial-, intelligence], [intelligence, -], [-, -], [-, ibm], [ibm, -], [-, watsons], [watsons, -], [-, rob], [rob, -], [-, high/#72b4a0e3260e], [high/#72b4a0e3260e,  ], [ , www.forbes.com/sites/gilpress/2016/12/21/artificial-intelligence-], [www.forbes.com/sites/gilpress/2016/12/21/artificial-intelligence-, pioneers], [pioneers, -], [-, peter], [peter, -], [-, norvig], [norvig, -], [-, google/#6ecd8a2d38c6], [google/#6ecd8a2d38c6,  ]]

>> Trigrams: 
[[ , 8, www.forbes.com/sites/blakemorgan/2017/06/13/ethics-and-artificial-], [8, www.forbes.com/sites/blakemorgan/2017/06/13/ethics-and-artificial-, intelligence], [www.forbes.com/sites/blakemorgan/2017/06/13/ethics-and-artificial-, intelligence, -], [intelligence, -, -], [-, -, ibm], [-, ibm, -], [ibm, -, watsons], [-, watsons, -], [watsons, -, rob], [-, rob, -], [rob, -, high/#72b4a0e3260e], [-, high/#72b4a0e3260e,  ], [high/#72b4a0e3260e,  , www.forbes.com/sites/gilpress/2016/12/21/artificial-intelligence-], [ , www.forbes.com/sites/gilpress/2016/12/21/artificial-intelligence-, pioneers], [www.forbes.com/sites/gilpress/2016/12/21/artificial-intelligence-, pioneers, -], [pioneers, -, peter], [-, peter, -], [peter, -, norvig], [-, norvig, -], [norvig, -, google/#6ecd8a2d38c6], [-, google/#6ecd8a2d38c6,  ]]

>> Noun Phrases are: 
[ibm,  www.forbes.com/sites/gilpress/2016/12/21/artificial-intelligence- pioneers, peter-norvig-google/#6ecd8a2d38c6]

>> Named Entities are: 
[('8', 'CARDINAL'), ('www.forbes.com/sites/gilpress/2016/12/21/artificial-intelligence-', 'ORG')] 


================================ Paragraph 291 =================================

 9 www-01.ibm.com/common/ssi/cgi-bin/ ssialias?htmlfid=KUM12390USEN&, page 67 

------------------- Sentence 1 -------------------

 9 www-01.ibm.com/common/ssi/cgi-bin/ ssialias?htmlfid=KUM12390USEN&, page 67 


>> Tokens are: 
[ , 9, www-01.ibm.com/common/ssi/cgi-bin/, ssialias?htmlfid, =, KUM12390USEN, &, ,, page, 67] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('9', 'NUM'), ('www-01.ibm.com/common/ssi/cgi-bin/', 'PROPN'), ('ssialias?htmlfid', 'NOUN'), ('=', 'SYM'), ('KUM12390USEN', 'PROPN'), ('&', 'CCONJ'), (',', 'PUNCT'), ('page', 'NOUN'), ('67', 'NUM')] 

>> Dependency Tags are: 
[(' ', 'dep'), ('9', 'nummod'), ('www-01.ibm.com/common/ssi/cgi-bin/', 'compound'), ('ssialias?htmlfid', 'appos'), ('=', 'punct'), ('KUM12390USEN', 'ROOT'), ('&', 'cc'), (',', 'punct'), ('page', 'conj'), ('67', 'nummod')]

>> Bigrams: 
[[ , 9], [9, www-01.ibm.com/common/ssi/cgi-bin/], [www-01.ibm.com/common/ssi/cgi-bin/, ssialias?htmlfid], [ssialias?htmlfid, =], [=, KUM12390USEN], [KUM12390USEN, &], [&, ,], [,, page], [page, 67]]

>> Trigrams: 
[[ , 9, www-01.ibm.com/common/ssi/cgi-bin/], [9, www-01.ibm.com/common/ssi/cgi-bin/, ssialias?htmlfid], [www-01.ibm.com/common/ssi/cgi-bin/, ssialias?htmlfid, =], [ssialias?htmlfid, =, KUM12390USEN], [=, KUM12390USEN, &], [KUM12390USEN, &, ,], [&, ,, page], [,, page, 67]]

>> Noun Phrases are: 
[9 www-01.ibm.com/common/ssi/cgi-bin/ ssialias?htmlfid, page]

>> Named Entities are: 
[('9', 'CARDINAL'), ('KUM12390USEN&', 'ORG'), ('67', 'CARDINAL')] 


================================ Paragraph 292 =================================

 10 homes.cs.washington.edu/~marcotcr/blog/lime 

------------------- Sentence 1 -------------------

 10 homes.cs.washington.edu/~marcotcr/blog/lime 


>> Tokens are: 
[ , 10, homes.cs.washington.edu/~marcotcr/blog/lime] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('10', 'NUM'), ('homes.cs.washington.edu/~marcotcr/blog/lime', 'NOUN')] 

>> Dependency Tags are: 
[(' ', 'ROOT'), ('10', 'nummod'), ('homes.cs.washington.edu/~marcotcr/blog/lime', 'dobj')]

>> Bigrams: 
[[ , 10], [10, homes.cs.washington.edu/~marcotcr/blog/lime]]

>> Trigrams: 
[[ , 10, homes.cs.washington.edu/~marcotcr/blog/lime]]

>> Noun Phrases are: 
[10 homes.cs.washington.edu/~marcotcr/blog/lime]

>> Named Entities are: 
[('10', 'CARDINAL')] 


================================ Paragraph 293 =================================

39019539-USEN-00 

------------------- Sentence 1 -------------------

39019539-USEN-00 


>> Tokens are: 
[39019539, -, USEN-00] 

>> PoS Tags are: 
[('39019539', 'NUM'), ('-', 'PUNCT'), ('USEN-00', 'NOUN')] 

>> Dependency Tags are: 
[('39019539', 'nummod'), ('-', 'punct'), ('USEN-00', 'ROOT')]

>> Bigrams: 
[[39019539, -], [-, USEN-00]]

>> Trigrams: 
[[39019539, -, USEN-00]]

>> Noun Phrases are: 
[39019539-USEN-00]

>> Named Entities are: 
[] 


================================ Paragraph 294 =================================

Please Recycle

------------------- Sentence 1 -------------------

Please Recycle 


>> Tokens are: 
[Recycle] 

>> PoS Tags are: 
[('Recycle', 'PROPN')] 

>> Dependency Tags are: 
[('Recycle', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Please Recycle]

>> Named Entities are: 
[] 
