				 *** Text Processing using Spacy *** 


================================ Paragraph 1 =================================

IQBAL MUHAMMAD AND ZHU YAN: SUPERVISED MACHINE LEARNING APPROACHES: A SURVEY  

------------------- Sentence 1 -------------------

IQBAL MUHAMMAD AND ZHU YAN: SUPERVISED MACHINE 


>> Tokens are: 
[IQBAL, MUHAMMAD, ZHU, YAN, :, SUPERVISED, MACHINE] 

>> PoS Tags are: 
[('IQBAL', 'NOUN'), ('MUHAMMAD', 'PROPN'), ('ZHU', 'PROPN'), ('YAN', 'PROPN'), (':', 'PUNCT'), ('SUPERVISED', 'ADJ'), ('MACHINE', 'NOUN')] 

>> Dependency Tags are: 
[('IQBAL', 'compound'), ('MUHAMMAD', 'ROOT'), ('ZHU', 'compound'), ('YAN', 'conj'), (':', 'punct'), ('SUPERVISED', 'amod'), ('MACHINE', 'punct')]

>> Bigrams: 
[[IQBAL, MUHAMMAD], [MUHAMMAD, ZHU], [ZHU, YAN], [YAN, :], [:, SUPERVISED], [SUPERVISED, MACHINE]]

>> Trigrams: 
[[IQBAL, MUHAMMAD, ZHU], [MUHAMMAD, ZHU, YAN], [ZHU, YAN, :], [YAN, :, SUPERVISED], [:, SUPERVISED, MACHINE]]

>> Noun Phrases are: 
[IQBAL MUHAMMAD, ZHU YAN]

>> Named Entities are: 
[('IQBAL', 'PERSON'), ('ZHU YAN', 'PERSON')] 

------------------- Sentence 2 -------------------

LEARNING APPROACHES: 


>> Tokens are: 
[LEARNING, APPROACHES, :] 

>> PoS Tags are: 
[('LEARNING', 'NOUN'), ('APPROACHES', 'NOUN'), (':', 'PUNCT')] 

>> Dependency Tags are: 
[('LEARNING', 'compound'), ('APPROACHES', 'ROOT'), (':', 'punct')]

>> Bigrams: 
[[LEARNING, APPROACHES], [APPROACHES, :]]

>> Trigrams: 
[[LEARNING, APPROACHES, :]]

>> Noun Phrases are: 
[LEARNING APPROACHES]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

A SURVEY   


>> Tokens are: 
[SURVEY,  ] 

>> PoS Tags are: 
[('SURVEY', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('SURVEY', 'ROOT'), (' ', 'nummod')]

>> Bigrams: 
[[SURVEY,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[A SURVEY]

>> Named Entities are: 
[] 


================================ Paragraph 2 =================================

DOI: 10.21917/ijsc.2015.0133 

------------------- Sentence 1 -------------------

DOI: 10.21917/ijsc.2015.0133 


>> Tokens are: 
[DOI, :, 10.21917, /, ijsc.2015.0133] 

>> PoS Tags are: 
[('DOI', 'PROPN'), (':', 'PUNCT'), ('10.21917', 'NUM'), ('/', 'SYM'), ('ijsc.2015.0133', 'PROPN')] 

>> Dependency Tags are: 
[('DOI', 'ROOT'), (':', 'punct'), ('10.21917', 'npadvmod'), ('/', 'punct'), ('ijsc.2015.0133', 'intj')]

>> Bigrams: 
[[DOI, :], [:, 10.21917], [10.21917, /], [/, ijsc.2015.0133]]

>> Trigrams: 
[[DOI, :, 10.21917], [:, 10.21917, /], [10.21917, /, ijsc.2015.0133]]

>> Noun Phrases are: 
[DOI]

>> Named Entities are: 
[('10.21917', 'CARDINAL')] 


================================ Paragraph 3 =================================

946  

------------------- Sentence 1 -------------------

946   


>> Tokens are: 
[946,  ] 

>> PoS Tags are: 
[('946', 'NUM'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('946', 'nummod'), (' ', 'ROOT')]

>> Bigrams: 
[[946,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('946', 'CARDINAL')] 


================================ Paragraph 4 =================================

SUPERVISED MACHINE LEARNING APPROACHES: A SURVEY  

------------------- Sentence 1 -------------------

SUPERVISED MACHINE LEARNING APPROACHES: 


>> Tokens are: 
[SUPERVISED, MACHINE, LEARNING, APPROACHES, :] 

>> PoS Tags are: 
[('SUPERVISED', 'ADJ'), ('MACHINE', 'NOUN'), ('LEARNING', 'NOUN'), ('APPROACHES', 'NOUN'), (':', 'PUNCT')] 

>> Dependency Tags are: 
[('SUPERVISED', 'amod'), ('MACHINE', 'compound'), ('LEARNING', 'compound'), ('APPROACHES', 'ROOT'), (':', 'punct')]

>> Bigrams: 
[[SUPERVISED, MACHINE], [MACHINE, LEARNING], [LEARNING, APPROACHES], [APPROACHES, :]]

>> Trigrams: 
[[SUPERVISED, MACHINE, LEARNING], [MACHINE, LEARNING, APPROACHES], [LEARNING, APPROACHES, :]]

>> Noun Phrases are: 
[SUPERVISED MACHINE LEARNING APPROACHES]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

A SURVEY   


>> Tokens are: 
[SURVEY,  ] 

>> PoS Tags are: 
[('SURVEY', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('SURVEY', 'ROOT'), (' ', 'nummod')]

>> Bigrams: 
[[SURVEY,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[A SURVEY]

>> Named Entities are: 
[] 


================================ Paragraph 5 =================================

Iqbal Muhammad 1  and Zhu Yan 

------------------- Sentence 1 -------------------

Iqbal Muhammad 1  and Zhu Yan 


>> Tokens are: 
[Iqbal, Muhammad, 1,  , Zhu, Yan] 

>> PoS Tags are: 
[('Iqbal', 'PROPN'), ('Muhammad', 'PROPN'), ('1', 'NUM'), (' ', 'SPACE'), ('Zhu', 'PROPN'), ('Yan', 'PROPN')] 

>> Dependency Tags are: 
[('Iqbal', 'compound'), ('Muhammad', 'ROOT'), ('1', 'nummod'), (' ', 'appos'), ('Zhu', 'compound'), ('Yan', 'conj')]

>> Bigrams: 
[[Iqbal, Muhammad], [Muhammad, 1], [1,  ], [ , Zhu], [Zhu, Yan]]

>> Trigrams: 
[[Iqbal, Muhammad, 1], [Muhammad, 1,  ], [1,  , Zhu], [ , Zhu, Yan]]

>> Noun Phrases are: 
[Iqbal Muhammad, Zhu Yan]

>> Named Entities are: 
[('Iqbal', 'PERSON'), ('1  ', 'TIME'), ('Zhu Yan', 'PERSON')] 


================================ Paragraph 6 =================================

2 

------------------- Sentence 1 -------------------

2 


>> Tokens are: 
[2] 

>> PoS Tags are: 
[('2', 'NUM')] 

>> Dependency Tags are: 
[('2', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('2', 'CARDINAL')] 


================================ Paragraph 7 =================================

School of Information Sciences and Technology, Southwest Jiaotong University, China  

------------------- Sentence 1 -------------------

School of Information Sciences and Technology, Southwest Jiaotong University, China   


>> Tokens are: 
[School, Information, Sciences, Technology, ,, Southwest, Jiaotong, University, ,, China,  ] 

>> PoS Tags are: 
[('School', 'NOUN'), ('Information', 'PROPN'), ('Sciences', 'PROPN'), ('Technology', 'PROPN'), (',', 'PUNCT'), ('Southwest', 'PROPN'), ('Jiaotong', 'PROPN'), ('University', 'PROPN'), (',', 'PUNCT'), ('China', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('School', 'ROOT'), ('Information', 'compound'), ('Sciences', 'pobj'), ('Technology', 'conj'), (',', 'punct'), ('Southwest', 'compound'), ('Jiaotong', 'compound'), ('University', 'appos'), (',', 'punct'), ('China', 'appos'), (' ', 'nummod')]

>> Bigrams: 
[[School, Information], [Information, Sciences], [Sciences, Technology], [Technology, ,], [,, Southwest], [Southwest, Jiaotong], [Jiaotong, University], [University, ,], [,, China], [China,  ]]

>> Trigrams: 
[[School, Information, Sciences], [Information, Sciences, Technology], [Sciences, Technology, ,], [Technology, ,, Southwest], [,, Southwest, Jiaotong], [Southwest, Jiaotong, University], [Jiaotong, University, ,], [University, ,, China], [,, China,  ]]

>> Noun Phrases are: 
[School, Information Sciences, Technology, Southwest Jiaotong University, China]

>> Named Entities are: 
[('School of Information Sciences and Technology', 'ORG'), ('Southwest Jiaotong University', 'ORG'), ('China', 'GPE')] 


================================ Paragraph 8 =================================

E-mail:  1 muhammadiqbal72@yahoo.com,  

------------------- Sentence 1 -------------------

E-mail:  1 muhammadiqbal72@yahoo.com,   


>> Tokens are: 
[E, -, mail, :,  , 1, muhammadiqbal72@yahoo.com, ,,  ] 

>> PoS Tags are: 
[('E', 'NOUN'), ('-', 'NOUN'), ('mail', 'NOUN'), (':', 'PUNCT'), (' ', 'SPACE'), ('1', 'NUM'), ('muhammadiqbal72@yahoo.com', 'X'), (',', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('E', 'ROOT'), ('-', 'intj'), ('mail', 'dobj'), (':', 'punct'), (' ', 'appos'), ('1', 'nummod'), ('muhammadiqbal72@yahoo.com', 'appos'), (',', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[E, -], [-, mail], [mail, :], [:,  ], [ , 1], [1, muhammadiqbal72@yahoo.com], [muhammadiqbal72@yahoo.com, ,], [,,  ]]

>> Trigrams: 
[[E, -, mail], [-, mail, :], [mail, :,  ], [:,  , 1], [ , 1, muhammadiqbal72@yahoo.com], [1, muhammadiqbal72@yahoo.com, ,], [muhammadiqbal72@yahoo.com, ,,  ]]

>> Noun Phrases are: 
[E, mail]

>> Named Entities are: 
[] 


================================ Paragraph 9 =================================

2 yzhu@swjtu.edu.cn  

------------------- Sentence 1 -------------------

2 yzhu@swjtu.edu.cn   


>> Tokens are: 
[2, yzhu@swjtu.edu.cn,  ] 

>> PoS Tags are: 
[('2', 'NUM'), ('yzhu@swjtu.edu.cn', 'NUM'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('2', 'nummod'), ('yzhu@swjtu.edu.cn', 'nummod'), (' ', 'ROOT')]

>> Bigrams: 
[[2, yzhu@swjtu.edu.cn], [yzhu@swjtu.edu.cn,  ]]

>> Trigrams: 
[[2, yzhu@swjtu.edu.cn,  ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('2', 'CARDINAL')] 


================================ Paragraph 10 =================================

Abstract  

------------------- Sentence 1 -------------------

Abstract   


>> Tokens are: 
[Abstract,  ] 

>> PoS Tags are: 
[('Abstract', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Abstract', 'ROOT'), (' ', 'nummod')]

>> Bigrams: 
[[Abstract,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Abstract]

>> Named Entities are: 
[] 


================================ Paragraph 11 =================================

One of the core objectives of machine learning is to instruct  

------------------- Sentence 1 -------------------

One of the core objectives of machine learning is to instruct   


>> Tokens are: 
[core, objectives, machine, learning, instruct,  ] 

>> PoS Tags are: 
[('core', 'ADJ'), ('objectives', 'NOUN'), ('machine', 'NOUN'), ('learning', 'NOUN'), ('instruct', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('core', 'amod'), ('objectives', 'pobj'), ('machine', 'compound'), ('learning', 'pobj'), ('instruct', 'xcomp'), (' ', 'dobj')]

>> Bigrams: 
[[core, objectives], [objectives, machine], [machine, learning], [learning, instruct], [instruct,  ]]

>> Trigrams: 
[[core, objectives, machine], [objectives, machine, learning], [machine, learning, instruct], [learning, instruct,  ]]

>> Noun Phrases are: 
[the core objectives, machine learning]

>> Named Entities are: 
[('One', 'CARDINAL')] 


================================ Paragraph 12 =================================

computers to use data or past experience to solve a given problem. A  

------------------- Sentence 1 -------------------

computers to use data or past experience to solve a given problem. 


>> Tokens are: 
[computers, use, data, past, experience, solve, given, problem, .] 

>> PoS Tags are: 
[('computers', 'NOUN'), ('use', 'VERB'), ('data', 'NOUN'), ('past', 'ADJ'), ('experience', 'NOUN'), ('solve', 'VERB'), ('given', 'VERB'), ('problem', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('computers', 'ROOT'), ('use', 'relcl'), ('data', 'dobj'), ('past', 'amod'), ('experience', 'conj'), ('solve', 'xcomp'), ('given', 'amod'), ('problem', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[computers, use], [use, data], [data, past], [past, experience], [experience, solve], [solve, given], [given, problem], [problem, .]]

>> Trigrams: 
[[computers, use, data], [use, data, past], [data, past, experience], [past, experience, solve], [experience, solve, given], [solve, given, problem], [given, problem, .]]

>> Noun Phrases are: 
[computers, data, past experience, a given problem]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

A   


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 13 =================================

good number of successful applications of machine learning exist  

------------------- Sentence 1 -------------------

good number of successful applications of machine learning exist   


>> Tokens are: 
[good, number, successful, applications, machine, learning, exist,  ] 

>> PoS Tags are: 
[('good', 'ADJ'), ('number', 'NOUN'), ('successful', 'ADJ'), ('applications', 'NOUN'), ('machine', 'NOUN'), ('learning', 'NOUN'), ('exist', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('good', 'amod'), ('number', 'nsubj'), ('successful', 'amod'), ('applications', 'pobj'), ('machine', 'compound'), ('learning', 'pobj'), ('exist', 'ROOT'), (' ', 'dobj')]

>> Bigrams: 
[[good, number], [number, successful], [successful, applications], [applications, machine], [machine, learning], [learning, exist], [exist,  ]]

>> Trigrams: 
[[good, number, successful], [number, successful, applications], [successful, applications, machine], [applications, machine, learning], [machine, learning, exist], [learning, exist,  ]]

>> Noun Phrases are: 
[good number, successful applications, machine learning]

>> Named Entities are: 
[] 


================================ Paragraph 14 =================================

already, including classifier to be trained on email messages to learn  

------------------- Sentence 1 -------------------

already, including classifier 


>> Tokens are: 
[,, including, classifier] 

>> PoS Tags are: 
[(',', 'PUNCT'), ('including', 'VERB'), ('classifier', 'NOUN')] 

>> Dependency Tags are: 
[(',', 'punct'), ('including', 'nmod'), ('classifier', 'pobj')]

>> Bigrams: 
[[,, including], [including, classifier]]

>> Trigrams: 
[[,, including, classifier]]

>> Noun Phrases are: 
[classifier]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

to be trained on email messages to learn   


>> Tokens are: 
[trained, email, messages, learn,  ] 

>> PoS Tags are: 
[('trained', 'VERB'), ('email', 'NOUN'), ('messages', 'NOUN'), ('learn', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('trained', 'ROOT'), ('email', 'compound'), ('messages', 'pobj'), ('learn', 'advcl'), (' ', 'dobj')]

>> Bigrams: 
[[trained, email], [email, messages], [messages, learn], [learn,  ]]

>> Trigrams: 
[[trained, email, messages], [email, messages, learn], [messages, learn,  ]]

>> Noun Phrases are: 
[email messages]

>> Named Entities are: 
[] 


================================ Paragraph 15 =================================

in order to distinguish between spam and non-spam messages,  

------------------- Sentence 1 -------------------

in order to distinguish between spam and non-spam messages,   


>> Tokens are: 
[order, distinguish, spam, non, -, spam, messages, ,,  ] 

>> PoS Tags are: 
[('order', 'NOUN'), ('distinguish', 'VERB'), ('spam', 'NOUN'), ('non', 'ADJ'), ('-', 'ADJ'), ('spam', 'ADJ'), ('messages', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('order', 'pobj'), ('distinguish', 'acl'), ('spam', 'nmod'), ('non', 'conj'), ('-', 'amod'), ('spam', 'amod'), ('messages', 'pobj'), (',', 'punct'), (' ', 'pobj')]

>> Bigrams: 
[[order, distinguish], [distinguish, spam], [spam, non], [non, -], [-, spam], [spam, messages], [messages, ,], [,,  ]]

>> Trigrams: 
[[order, distinguish, spam], [distinguish, spam, non], [spam, non, -], [non, -, spam], [-, spam, messages], [spam, messages, ,], [messages, ,,  ]]

>> Noun Phrases are: 
[order, spam and non-spam messages]

>> Named Entities are: 
[] 


================================ Paragraph 16 =================================

systems that analyze past sales data to predict customer buying  

------------------- Sentence 1 -------------------

systems that analyze past sales data to predict customer buying   


>> Tokens are: 
[systems, analyze, past, sales, data, predict, customer, buying,  ] 

>> PoS Tags are: 
[('systems', 'NOUN'), ('analyze', 'VERB'), ('past', 'ADP'), ('sales', 'NOUN'), ('data', 'NOUN'), ('predict', 'VERB'), ('customer', 'NOUN'), ('buying', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('systems', 'ROOT'), ('analyze', 'relcl'), ('past', 'prep'), ('sales', 'compound'), ('data', 'pobj'), ('predict', 'relcl'), ('customer', 'compound'), ('buying', 'ccomp'), (' ', 'punct')]

>> Bigrams: 
[[systems, analyze], [analyze, past], [past, sales], [sales, data], [data, predict], [predict, customer], [customer, buying], [buying,  ]]

>> Trigrams: 
[[systems, analyze, past], [analyze, past, sales], [past, sales, data], [sales, data, predict], [data, predict, customer], [predict, customer, buying], [customer, buying,  ]]

>> Noun Phrases are: 
[systems, sales data]

>> Named Entities are: 
[] 


================================ Paragraph 17 =================================

behavior, fraud detection etc. Machine learning can be applied as  

------------------- Sentence 1 -------------------

behavior, fraud detection etc. 


>> Tokens are: 
[behavior, ,, fraud, detection, etc, .] 

>> PoS Tags are: 
[('behavior', 'NOUN'), (',', 'PUNCT'), ('fraud', 'NOUN'), ('detection', 'NOUN'), ('etc', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('behavior', 'ROOT'), (',', 'punct'), ('fraud', 'compound'), ('detection', 'compound'), ('etc', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[behavior, ,], [,, fraud], [fraud, detection], [detection, etc], [etc, .]]

>> Trigrams: 
[[behavior, ,, fraud], [,, fraud, detection], [fraud, detection, etc], [detection, etc, .]]

>> Noun Phrases are: 
[behavior]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Machine learning can be applied as   


>> Tokens are: 
[Machine, learning, applied,  ] 

>> PoS Tags are: 
[('Machine', 'NOUN'), ('learning', 'NOUN'), ('applied', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Machine', 'compound'), ('learning', 'nsubjpass'), ('applied', 'ROOT'), (' ', 'pobj')]

>> Bigrams: 
[[Machine, learning], [learning, applied], [applied,  ]]

>> Trigrams: 
[[Machine, learning, applied], [learning, applied,  ]]

>> Noun Phrases are: 
[Machine learning]

>> Named Entities are: 
[] 


================================ Paragraph 18 =================================

association analysis through Supervised learning, Unsupervised  

------------------- Sentence 1 -------------------

association analysis through Supervised learning, Unsupervised   


>> Tokens are: 
[association, analysis, Supervised, learning, ,, Unsupervised,  ] 

>> PoS Tags are: 
[('association', 'NOUN'), ('analysis', 'NOUN'), ('Supervised', 'ADJ'), ('learning', 'NOUN'), (',', 'PUNCT'), ('Unsupervised', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('association', 'compound'), ('analysis', 'ROOT'), ('Supervised', 'amod'), ('learning', 'pobj'), (',', 'punct'), ('Unsupervised', 'appos'), (' ', 'punct')]

>> Bigrams: 
[[association, analysis], [analysis, Supervised], [Supervised, learning], [learning, ,], [,, Unsupervised], [Unsupervised,  ]]

>> Trigrams: 
[[association, analysis, Supervised], [analysis, Supervised, learning], [Supervised, learning, ,], [learning, ,, Unsupervised], [,, Unsupervised,  ]]

>> Noun Phrases are: 
[association analysis, Supervised learning, Unsupervised]

>> Named Entities are: 
[] 


================================ Paragraph 19 =================================

learning and Reinforcement Learning but in this study we will focus  

------------------- Sentence 1 -------------------

learning and Reinforcement Learning but in this study we will focus   


>> Tokens are: 
[learning, Reinforcement, Learning, study, focus,  ] 

>> PoS Tags are: 
[('learning', 'NOUN'), ('Reinforcement', 'PROPN'), ('Learning', 'PROPN'), ('study', 'NOUN'), ('focus', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('learning', 'ROOT'), ('Reinforcement', 'compound'), ('Learning', 'conj'), ('study', 'pobj'), ('focus', 'conj'), (' ', 'dobj')]

>> Bigrams: 
[[learning, Reinforcement], [Reinforcement, Learning], [Learning, study], [study, focus], [focus,  ]]

>> Trigrams: 
[[learning, Reinforcement, Learning], [Reinforcement, Learning, study], [Learning, study, focus], [study, focus,  ]]

>> Noun Phrases are: 
[learning, Reinforcement Learning, this study, we]

>> Named Entities are: 
[('Reinforcement Learning', 'WORK_OF_ART')] 


================================ Paragraph 20 =================================

on strength and weakness of supervised learning classification  

------------------- Sentence 1 -------------------

on strength and weakness of supervised learning classification 


>> Tokens are: 
[strength, weakness, supervised, learning, classification] 

>> PoS Tags are: 
[('strength', 'NOUN'), ('weakness', 'NOUN'), ('supervised', 'ADJ'), ('learning', 'VERB'), ('classification', 'NOUN')] 

>> Dependency Tags are: 
[('strength', 'pobj'), ('weakness', 'conj'), ('supervised', 'amod'), ('learning', 'amod'), ('classification', 'pobj')]

>> Bigrams: 
[[strength, weakness], [weakness, supervised], [supervised, learning], [learning, classification]]

>> Trigrams: 
[[strength, weakness, supervised], [weakness, supervised, learning], [supervised, learning, classification]]

>> Noun Phrases are: 
[strength, weakness, supervised learning classification]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 21 =================================

algorithms. The goal of supervised learning is to build a concise  

------------------- Sentence 1 -------------------

algorithms. 


>> Tokens are: 
[algorithms, .] 

>> PoS Tags are: 
[('algorithms', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('algorithms', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[algorithms, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[algorithms]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

The goal of supervised learning is to build a concise   


>> Tokens are: 
[goal, supervised, learning, build, concise,  ] 

>> PoS Tags are: 
[('goal', 'NOUN'), ('supervised', 'ADJ'), ('learning', 'NOUN'), ('build', 'VERB'), ('concise', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('goal', 'nsubj'), ('supervised', 'amod'), ('learning', 'pobj'), ('build', 'xcomp'), ('concise', 'dobj'), (' ', 'punct')]

>> Bigrams: 
[[goal, supervised], [supervised, learning], [learning, build], [build, concise], [concise,  ]]

>> Trigrams: 
[[goal, supervised, learning], [supervised, learning, build], [learning, build, concise], [build, concise,  ]]

>> Noun Phrases are: 
[The goal, supervised learning, a concise]

>> Named Entities are: 
[] 


================================ Paragraph 22 =================================

model of the distribution of class labels in terms of predictor features.  

------------------- Sentence 1 -------------------

model of the distribution of class labels in terms of predictor features. 


>> Tokens are: 
[model, distribution, class, labels, terms, predictor, features, .] 

>> PoS Tags are: 
[('model', 'NOUN'), ('distribution', 'NOUN'), ('class', 'NOUN'), ('labels', 'NOUN'), ('terms', 'NOUN'), ('predictor', 'NOUN'), ('features', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('model', 'ROOT'), ('distribution', 'pobj'), ('class', 'compound'), ('labels', 'pobj'), ('terms', 'pobj'), ('predictor', 'compound'), ('features', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[model, distribution], [distribution, class], [class, labels], [labels, terms], [terms, predictor], [predictor, features], [features, .]]

>> Trigrams: 
[[model, distribution, class], [distribution, class, labels], [class, labels, terms], [labels, terms, predictor], [terms, predictor, features], [predictor, features, .]]

>> Noun Phrases are: 
[model, the distribution, class labels, terms, predictor features]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 23 =================================

The resulting classifier is then used to assign class labels to the testing  

------------------- Sentence 1 -------------------

The resulting classifier is then used to assign class labels to the testing   


>> Tokens are: 
[resulting, classifier, assign, class, labels, testing,  ] 

>> PoS Tags are: 
[('resulting', 'VERB'), ('classifier', 'NOUN'), ('assign', 'VERB'), ('class', 'NOUN'), ('labels', 'NOUN'), ('testing', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('resulting', 'amod'), ('classifier', 'nsubjpass'), ('assign', 'xcomp'), ('class', 'compound'), ('labels', 'dobj'), ('testing', 'pobj'), (' ', 'punct')]

>> Bigrams: 
[[resulting, classifier], [classifier, assign], [assign, class], [class, labels], [labels, testing], [testing,  ]]

>> Trigrams: 
[[resulting, classifier, assign], [classifier, assign, class], [assign, class, labels], [class, labels, testing], [labels, testing,  ]]

>> Noun Phrases are: 
[The resulting classifier, class labels, the testing]

>> Named Entities are: 
[] 


================================ Paragraph 24 =================================

instances where the values of the predictor features are known, but  

------------------- Sentence 1 -------------------

instances where the values of the predictor features are known, but   


>> Tokens are: 
[instances, values, predictor, features, known, ,,  ] 

>> PoS Tags are: 
[('instances', 'NOUN'), ('values', 'NOUN'), ('predictor', 'NOUN'), ('features', 'NOUN'), ('known', 'VERB'), (',', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('instances', 'ROOT'), ('values', 'nsubjpass'), ('predictor', 'compound'), ('features', 'pobj'), ('known', 'relcl'), (',', 'punct'), (' ', 'conj')]

>> Bigrams: 
[[instances, values], [values, predictor], [predictor, features], [features, known], [known, ,], [,,  ]]

>> Trigrams: 
[[instances, values, predictor], [values, predictor, features], [predictor, features, known], [features, known, ,], [known, ,,  ]]

>> Noun Phrases are: 
[instances, the values, the predictor features]

>> Named Entities are: 
[] 


================================ Paragraph 25 =================================

the value of the class label is unknown. We are optimistic that this  

------------------- Sentence 1 -------------------

the value of the class label is unknown. 


>> Tokens are: 
[value, class, label, unknown, .] 

>> PoS Tags are: 
[('value', 'NOUN'), ('class', 'NOUN'), ('label', 'NOUN'), ('unknown', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('value', 'nsubj'), ('class', 'compound'), ('label', 'pobj'), ('unknown', 'acomp'), ('.', 'punct')]

>> Bigrams: 
[[value, class], [class, label], [label, unknown], [unknown, .]]

>> Trigrams: 
[[value, class, label], [class, label, unknown], [label, unknown, .]]

>> Noun Phrases are: 
[the value, the class label]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

We are optimistic 


>> Tokens are: 
[optimistic] 

>> PoS Tags are: 
[('optimistic', 'ADJ')] 

>> Dependency Tags are: 
[('optimistic', 'acomp')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[We]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

that this   


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 26 =================================

study will help new researchers to guiding new research areas and to  

------------------- Sentence 1 -------------------

study will help new researchers to guiding new research areas and to   


>> Tokens are: 
[study, help, new, researchers, guiding, new, research, areas,  ] 

>> PoS Tags are: 
[('study', 'NOUN'), ('help', 'VERB'), ('new', 'ADJ'), ('researchers', 'NOUN'), ('guiding', 'VERB'), ('new', 'ADJ'), ('research', 'NOUN'), ('areas', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('study', 'nsubj'), ('help', 'ROOT'), ('new', 'amod'), ('researchers', 'dobj'), ('guiding', 'pcomp'), ('new', 'amod'), ('research', 'compound'), ('areas', 'dobj'), (' ', 'pobj')]

>> Bigrams: 
[[study, help], [help, new], [new, researchers], [researchers, guiding], [guiding, new], [new, research], [research, areas], [areas,  ]]

>> Trigrams: 
[[study, help, new], [help, new, researchers], [new, researchers, guiding], [researchers, guiding, new], [guiding, new, research], [new, research, areas], [research, areas,  ]]

>> Noun Phrases are: 
[study, new researchers, new research areas]

>> Named Entities are: 
[] 


================================ Paragraph 27 =================================

compare the effectiveness and impuissance of supervised learning  

------------------- Sentence 1 -------------------

compare the effectiveness and impuissance of supervised learning   


>> Tokens are: 
[compare, effectiveness, impuissance, supervised, learning,  ] 

>> PoS Tags are: 
[('compare', 'VERB'), ('effectiveness', 'NOUN'), ('impuissance', 'NOUN'), ('supervised', 'ADJ'), ('learning', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('compare', 'ROOT'), ('effectiveness', 'dobj'), ('impuissance', 'conj'), ('supervised', 'amod'), ('learning', 'pobj'), (' ', 'punct')]

>> Bigrams: 
[[compare, effectiveness], [effectiveness, impuissance], [impuissance, supervised], [supervised, learning], [learning,  ]]

>> Trigrams: 
[[compare, effectiveness, impuissance], [effectiveness, impuissance, supervised], [impuissance, supervised, learning], [supervised, learning,  ]]

>> Noun Phrases are: 
[the effectiveness, impuissance, supervised learning]

>> Named Entities are: 
[] 


================================ Paragraph 28 =================================

algorithms.  

------------------- Sentence 1 -------------------

algorithms. 


>> Tokens are: 
[algorithms, .] 

>> PoS Tags are: 
[('algorithms', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('algorithms', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[algorithms, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[algorithms]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 29 =================================

Keywords:  

------------------- Sentence 1 -------------------

Keywords:   


>> Tokens are: 
[Keywords, :,  ] 

>> PoS Tags are: 
[('Keywords', 'NOUN'), (':', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Keywords', 'ROOT'), (':', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[Keywords, :], [:,  ]]

>> Trigrams: 
[[Keywords, :,  ]]

>> Noun Phrases are: 
[Keywords]

>> Named Entities are: 
[] 


================================ Paragraph 30 =================================

Supervised Machine Learning, SVM, DT, Classifier  

------------------- Sentence 1 -------------------

Supervised Machine Learning, SVM, DT, Classifier   


>> Tokens are: 
[Supervised, Machine, Learning, ,, SVM, ,, DT, ,, Classifier,  ] 

>> PoS Tags are: 
[('Supervised', 'ADJ'), ('Machine', 'PROPN'), ('Learning', 'PROPN'), (',', 'PUNCT'), ('SVM', 'PROPN'), (',', 'PUNCT'), ('DT', 'PROPN'), (',', 'PUNCT'), ('Classifier', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Supervised', 'amod'), ('Machine', 'compound'), ('Learning', 'ROOT'), (',', 'punct'), ('SVM', 'appos'), (',', 'punct'), ('DT', 'conj'), (',', 'punct'), ('Classifier', 'conj'), (' ', 'punct')]

>> Bigrams: 
[[Supervised, Machine], [Machine, Learning], [Learning, ,], [,, SVM], [SVM, ,], [,, DT], [DT, ,], [,, Classifier], [Classifier,  ]]

>> Trigrams: 
[[Supervised, Machine, Learning], [Machine, Learning, ,], [Learning, ,, SVM], [,, SVM, ,], [SVM, ,, DT], [,, DT, ,], [DT, ,, Classifier], [,, Classifier,  ]]

>> Noun Phrases are: 
[Supervised Machine Learning, SVM, DT, Classifier]

>> Named Entities are: 
[('SVM', 'ORG'), ('DT', 'ORG')] 


================================ Paragraph 31 =================================

1. INTRODUCTION 

------------------- Sentence 1 -------------------

1. 


>> Tokens are: 
[1, .] 

>> PoS Tags are: 
[('1', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('1', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[1, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('1', 'CARDINAL')] 

------------------- Sentence 2 -------------------

INTRODUCTION 


>> Tokens are: 
[INTRODUCTION] 

>> PoS Tags are: 
[('INTRODUCTION', 'NOUN')] 

>> Dependency Tags are: 
[('INTRODUCTION', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[INTRODUCTION]

>> Named Entities are: 
[] 


================================ Paragraph 32 =================================

Machine Learning (ML) can be considered as a subfield of  

------------------- Sentence 1 -------------------

Machine Learning (ML) can be considered as a subfield of   


>> Tokens are: 
[Machine, Learning, (, ML, ), considered, subfield,  ] 

>> PoS Tags are: 
[('Machine', 'PROPN'), ('Learning', 'PROPN'), ('(', 'PUNCT'), ('ML', 'PROPN'), (')', 'PUNCT'), ('considered', 'VERB'), ('subfield', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Machine', 'compound'), ('Learning', 'nsubjpass'), ('(', 'punct'), ('ML', 'appos'), (')', 'punct'), ('considered', 'ROOT'), ('subfield', 'pobj'), (' ', 'pobj')]

>> Bigrams: 
[[Machine, Learning], [Learning, (], [(, ML], [ML, )], [), considered], [considered, subfield], [subfield,  ]]

>> Trigrams: 
[[Machine, Learning, (], [Learning, (, ML], [(, ML, )], [ML, ), considered], [), considered, subfield], [considered, subfield,  ]]

>> Noun Phrases are: 
[Machine Learning, ML, a subfield]

>> Named Entities are: 
[] 


================================ Paragraph 33 =================================

Artificial Intelligence since those algorithms can be seen as  

------------------- Sentence 1 -------------------

Artificial Intelligence since those algorithms can be seen as   


>> Tokens are: 
[Artificial, Intelligence, algorithms, seen,  ] 

>> PoS Tags are: 
[('Artificial', 'PROPN'), ('Intelligence', 'PROPN'), ('algorithms', 'NOUN'), ('seen', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Artificial', 'compound'), ('Intelligence', 'ROOT'), ('algorithms', 'nsubjpass'), ('seen', 'advcl'), (' ', 'pobj')]

>> Bigrams: 
[[Artificial, Intelligence], [Intelligence, algorithms], [algorithms, seen], [seen,  ]]

>> Trigrams: 
[[Artificial, Intelligence, algorithms], [Intelligence, algorithms, seen], [algorithms, seen,  ]]

>> Noun Phrases are: 
[Artificial Intelligence, those algorithms]

>> Named Entities are: 
[('Artificial Intelligence', 'ORG')] 


================================ Paragraph 34 =================================

building blocks to make computers learn to behave more  

------------------- Sentence 1 -------------------

building blocks to make computers learn to behave more   


>> Tokens are: 
[building, blocks, computers, learn, behave,  ] 

>> PoS Tags are: 
[('building', 'VERB'), ('blocks', 'NOUN'), ('computers', 'NOUN'), ('learn', 'VERB'), ('behave', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('building', 'ROOT'), ('blocks', 'dobj'), ('computers', 'nsubj'), ('learn', 'ccomp'), ('behave', 'xcomp'), (' ', 'dobj')]

>> Bigrams: 
[[building, blocks], [blocks, computers], [computers, learn], [learn, behave], [behave,  ]]

>> Trigrams: 
[[building, blocks, computers], [blocks, computers, learn], [computers, learn, behave], [learn, behave,  ]]

>> Noun Phrases are: 
[blocks, computers]

>> Named Entities are: 
[] 


================================ Paragraph 35 =================================

intelligently by somehow generalizing rather that just storing  

------------------- Sentence 1 -------------------

intelligently by somehow generalizing rather that just storing   


>> Tokens are: 
[intelligently, generalizing, storing,  ] 

>> PoS Tags are: 
[('intelligently', 'ADV'), ('generalizing', 'VERB'), ('storing', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('intelligently', 'advmod'), ('generalizing', 'pcomp'), ('storing', 'ccomp'), (' ', 'dobj')]

>> Bigrams: 
[[intelligently, generalizing], [generalizing, storing], [storing,  ]]

>> Trigrams: 
[[intelligently, generalizing, storing], [generalizing, storing,  ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 36 =================================

and retrieving data items like a database system and other  

------------------- Sentence 1 -------------------

and retrieving data items like a database system and other   


>> Tokens are: 
[retrieving, data, items, like, database, system,  ] 

>> PoS Tags are: 
[('retrieving', 'VERB'), ('data', 'NOUN'), ('items', 'NOUN'), ('like', 'ADP'), ('database', 'NOUN'), ('system', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('retrieving', 'ROOT'), ('data', 'compound'), ('items', 'dobj'), ('like', 'prep'), ('database', 'compound'), ('system', 'pobj'), (' ', 'conj')]

>> Bigrams: 
[[retrieving, data], [data, items], [items, like], [like, database], [database, system], [system,  ]]

>> Trigrams: 
[[retrieving, data, items], [data, items, like], [items, like, database], [like, database, system], [database, system,  ]]

>> Noun Phrases are: 
[data items, a database system]

>> Named Entities are: 
[] 


================================ Paragraph 37 =================================

applications would do. Machine learning has got its inspiration  

------------------- Sentence 1 -------------------

applications would do. 


>> Tokens are: 
[applications, .] 

>> PoS Tags are: 
[('applications', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('applications', 'nsubj'), ('.', 'punct')]

>> Bigrams: 
[[applications, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[applications]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Machine learning has got its inspiration   


>> Tokens are: 
[Machine, learning, got, inspiration,  ] 

>> PoS Tags are: 
[('Machine', 'NOUN'), ('learning', 'NOUN'), ('got', 'VERB'), ('inspiration', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Machine', 'compound'), ('learning', 'nsubj'), ('got', 'ROOT'), ('inspiration', 'dobj'), (' ', 'punct')]

>> Bigrams: 
[[Machine, learning], [learning, got], [got, inspiration], [inspiration,  ]]

>> Trigrams: 
[[Machine, learning, got], [learning, got, inspiration], [got, inspiration,  ]]

>> Noun Phrases are: 
[Machine learning, its inspiration]

>> Named Entities are: 
[] 


================================ Paragraph 38 =================================

from a variety of academic disciplines, including computer  

------------------- Sentence 1 -------------------

from a variety of academic disciplines, including computer   


>> Tokens are: 
[variety, academic, disciplines, ,, including, computer,  ] 

>> PoS Tags are: 
[('variety', 'NOUN'), ('academic', 'ADJ'), ('disciplines', 'NOUN'), (',', 'PUNCT'), ('including', 'VERB'), ('computer', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('variety', 'pobj'), ('academic', 'amod'), ('disciplines', 'pobj'), (',', 'punct'), ('including', 'prep'), ('computer', 'pobj'), (' ', 'punct')]

>> Bigrams: 
[[variety, academic], [academic, disciplines], [disciplines, ,], [,, including], [including, computer], [computer,  ]]

>> Trigrams: 
[[variety, academic, disciplines], [academic, disciplines, ,], [disciplines, ,, including], [,, including, computer], [including, computer,  ]]

>> Noun Phrases are: 
[a variety, academic disciplines, computer]

>> Named Entities are: 
[] 


================================ Paragraph 39 =================================

science, statistics, biology, and psychology. The core function of  

------------------- Sentence 1 -------------------

science, statistics, biology, and psychology. 


>> Tokens are: 
[science, ,, statistics, ,, biology, ,, psychology, .] 

>> PoS Tags are: 
[('science', 'NOUN'), (',', 'PUNCT'), ('statistics', 'NOUN'), (',', 'PUNCT'), ('biology', 'NOUN'), (',', 'PUNCT'), ('psychology', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('science', 'ROOT'), (',', 'punct'), ('statistics', 'conj'), (',', 'punct'), ('biology', 'conj'), (',', 'punct'), ('psychology', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[science, ,], [,, statistics], [statistics, ,], [,, biology], [biology, ,], [,, psychology], [psychology, .]]

>> Trigrams: 
[[science, ,, statistics], [,, statistics, ,], [statistics, ,, biology], [,, biology, ,], [biology, ,, psychology], [,, psychology, .]]

>> Noun Phrases are: 
[science, statistics, biology, psychology]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

The core function of   


>> Tokens are: 
[core, function,  ] 

>> PoS Tags are: 
[('core', 'NOUN'), ('function', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('core', 'compound'), ('function', 'ROOT'), (' ', 'pobj')]

>> Bigrams: 
[[core, function], [function,  ]]

>> Trigrams: 
[[core, function,  ]]

>> Noun Phrases are: 
[The core function]

>> Named Entities are: 
[] 


================================ Paragraph 40 =================================

Machine learning attempts is to tell computers how to  

------------------- Sentence 1 -------------------

Machine learning attempts is to tell computers how to   


>> Tokens are: 
[Machine, learning, attempts, tell, computers,  ] 

>> PoS Tags are: 
[('Machine', 'NOUN'), ('learning', 'NOUN'), ('attempts', 'NOUN'), ('tell', 'VERB'), ('computers', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Machine', 'compound'), ('learning', 'compound'), ('attempts', 'nsubj'), ('tell', 'xcomp'), ('computers', 'dobj'), (' ', 'pobj')]

>> Bigrams: 
[[Machine, learning], [learning, attempts], [attempts, tell], [tell, computers], [computers,  ]]

>> Trigrams: 
[[Machine, learning, attempts], [learning, attempts, tell], [attempts, tell, computers], [tell, computers,  ]]

>> Noun Phrases are: 
[Machine learning attempts, computers]

>> Named Entities are: 
[] 


================================ Paragraph 41 =================================

automatically find a good predictor based on past experiences  

------------------- Sentence 1 -------------------

automatically find a good predictor based on past experiences   


>> Tokens are: 
[automatically, find, good, predictor, based, past, experiences,  ] 

>> PoS Tags are: 
[('automatically', 'ADV'), ('find', 'VERB'), ('good', 'ADJ'), ('predictor', 'NOUN'), ('based', 'VERB'), ('past', 'ADJ'), ('experiences', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('automatically', 'advmod'), ('find', 'ROOT'), ('good', 'amod'), ('predictor', 'dobj'), ('based', 'acl'), ('past', 'amod'), ('experiences', 'pobj'), (' ', 'dobj')]

>> Bigrams: 
[[automatically, find], [find, good], [good, predictor], [predictor, based], [based, past], [past, experiences], [experiences,  ]]

>> Trigrams: 
[[automatically, find, good], [find, good, predictor], [good, predictor, based], [predictor, based, past], [based, past, experiences], [past, experiences,  ]]

>> Noun Phrases are: 
[a good predictor, past experiences]

>> Named Entities are: 
[] 


================================ Paragraph 42 =================================

and this job is done by good classifier. Classification is the  

------------------- Sentence 1 -------------------

and this job is done by good classifier. 


>> Tokens are: 
[job, good, classifier, .] 

>> PoS Tags are: 
[('job', 'NOUN'), ('good', 'ADJ'), ('classifier', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('job', 'nsubjpass'), ('good', 'amod'), ('classifier', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[job, good], [good, classifier], [classifier, .]]

>> Trigrams: 
[[job, good, classifier], [good, classifier, .]]

>> Noun Phrases are: 
[this job, good classifier]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Classification is the   


>> Tokens are: 
[Classification,  ] 

>> PoS Tags are: 
[('Classification', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Classification', 'nsubj'), (' ', 'attr')]

>> Bigrams: 
[[Classification,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Classification]

>> Named Entities are: 
[] 


================================ Paragraph 43 =================================

process of using a model to predict unknown values (output  

------------------- Sentence 1 -------------------

process of using a model to predict unknown values (output   


>> Tokens are: 
[process, model, predict, unknown, values, (, output,  ] 

>> PoS Tags are: 
[('process', 'NOUN'), ('model', 'NOUN'), ('predict', 'VERB'), ('unknown', 'ADJ'), ('values', 'NOUN'), ('(', 'PUNCT'), ('output', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('process', 'ROOT'), ('model', 'dobj'), ('predict', 'xcomp'), ('unknown', 'amod'), ('values', 'dobj'), ('(', 'punct'), ('output', 'appos'), (' ', 'punct')]

>> Bigrams: 
[[process, model], [model, predict], [predict, unknown], [unknown, values], [values, (], [(, output], [output,  ]]

>> Trigrams: 
[[process, model, predict], [model, predict, unknown], [predict, unknown, values], [unknown, values, (], [values, (, output], [(, output,  ]]

>> Noun Phrases are: 
[process, a model, unknown values, output]

>> Named Entities are: 
[] 


================================ Paragraph 44 =================================

variables), using a number of known values (input variables).  

------------------- Sentence 1 -------------------

variables), using a number of known values (input variables). 


>> Tokens are: 
[variables, ), ,, number, known, values, (, input, variables, ), .] 

>> PoS Tags are: 
[('variables', 'NOUN'), (')', 'PUNCT'), (',', 'PUNCT'), ('number', 'NOUN'), ('known', 'VERB'), ('values', 'NOUN'), ('(', 'PUNCT'), ('input', 'NOUN'), ('variables', 'NOUN'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('variables', 'ROOT'), (')', 'punct'), (',', 'punct'), ('number', 'dobj'), ('known', 'amod'), ('values', 'pobj'), ('(', 'punct'), ('input', 'compound'), ('variables', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[variables, )], [), ,], [,, number], [number, known], [known, values], [values, (], [(, input], [input, variables], [variables, )], [), .]]

>> Trigrams: 
[[variables, ), ,], [), ,, number], [,, number, known], [number, known, values], [known, values, (], [values, (, input], [(, input, variables], [input, variables, )], [variables, ), .]]

>> Noun Phrases are: 
[variables, a number, known values, input variables]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 45 =================================

The classification process is performed on data set D which  

------------------- Sentence 1 -------------------

The classification process is performed on data set D which   


>> Tokens are: 
[classification, process, performed, data, set, D,  ] 

>> PoS Tags are: 
[('classification', 'NOUN'), ('process', 'NOUN'), ('performed', 'VERB'), ('data', 'NOUN'), ('set', 'VERB'), ('D', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('classification', 'compound'), ('process', 'nsubjpass'), ('performed', 'ROOT'), ('data', 'compound'), ('set', 'pobj'), ('D', 'npadvmod'), (' ', 'punct')]

>> Bigrams: 
[[classification, process], [process, performed], [performed, data], [data, set], [set, D], [D,  ]]

>> Trigrams: 
[[classification, process, performed], [process, performed, data], [performed, data, set], [data, set, D], [set, D,  ]]

>> Noun Phrases are: 
[The classification process]

>> Named Entities are: 
[] 


================================ Paragraph 46 =================================

holds following objects:  

------------------- Sentence 1 -------------------

holds following objects: 


>> Tokens are: 
[holds, following, objects, :] 

>> PoS Tags are: 
[('holds', 'VERB'), ('following', 'VERB'), ('objects', 'NOUN'), (':', 'PUNCT')] 

>> Dependency Tags are: 
[('holds', 'ROOT'), ('following', 'xcomp'), ('objects', 'dobj'), (':', 'punct')]

>> Bigrams: 
[[holds, following], [following, objects], [objects, :]]

>> Trigrams: 
[[holds, following, objects], [following, objects, :]]

>> Noun Phrases are: 
[objects]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 47 =================================

 Set size →  AAAAA ,,2,1  , where A  denotes the number of attributes or the size of the set A. 

------------------- Sentence 1 -------------------

 


>> Tokens are: 
[] 

>> PoS Tags are: 
[('\uf0b7', 'X')] 

>> Dependency Tags are: 
[('\uf0b7', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('\uf0b7', 'CARDINAL')] 

------------------- Sentence 2 -------------------

Set size →  AAAAA ,,2,1  , where A  denotes the number of attributes or the size of the set A. 


>> Tokens are: 
[Set, size, →, , AAAAA, ,, ,, 2,1, , ,,  , denotes, number, attributes, size, set, A.] 

>> PoS Tags are: 
[('Set', 'ADJ'), ('size', 'NOUN'), ('→', 'SYM'), ('\uf07b', 'PROPN'), ('\uf07dAAAAA', 'PROPN'), (',', 'PUNCT'), (',', 'PUNCT'), ('2,1', 'NUM'), ('\uf04b\uf03d', 'PROPN'), (',', 'PUNCT'), (' ', 'SPACE'), ('denotes', 'VERB'), ('number', 'NOUN'), ('attributes', 'NOUN'), ('size', 'NOUN'), ('set', 'ADJ'), ('A.', 'NOUN')] 

>> Dependency Tags are: 
[('Set', 'amod'), ('size', 'nmod'), ('→', 'prep'), ('\uf07b', 'compound'), ('\uf07dAAAAA', 'nsubj'), (',', 'punct'), (',', 'punct'), ('2,1', 'appos'), ('\uf04b\uf03d', 'ROOT'), (',', 'punct'), (' ', 'nsubj'), ('denotes', 'relcl'), ('number', 'dobj'), ('attributes', 'pobj'), ('size', 'conj'), ('set', 'amod'), ('A.', 'pobj')]

>> Bigrams: 
[[Set, size], [size, →], [→, ], [, AAAAA], [AAAAA, ,], [,, ,], [,, 2,1], [2,1, ], [, ,], [,,  ], [ , denotes], [denotes, number], [number, attributes], [attributes, size], [size, set], [set, A.]]

>> Trigrams: 
[[Set, size, →], [size, →, ], [→, , AAAAA], [, AAAAA, ,], [AAAAA, ,, ,], [,, ,, 2,1], [,, 2,1, ], [2,1, , ,], [, ,,  ], [,,  , denotes], [ , denotes, number], [denotes, number, attributes], [number, attributes, size], [attributes, size, set], [size, set, A.]]

>> Noun Phrases are: 
[Set size →  AAAAA, the number, attributes, the size, the set A.]

>> Named Entities are: 
[('2,1', 'CARDINAL'), ('\uf04b\uf03d', 'ORG')] 


================================ Paragraph 48 =================================

 Class label→ C: Target attribute;  CcccC ,,2,1  , where C  is the number of classes and 2C . 

------------------- Sentence 1 -------------------

 Class label→ C: Target attribute;  CcccC ,,2,1  , where C  is the number of classes and 2C . 


>> Tokens are: 
[, Class, label→, C, :, Target, attribute, ;, , CcccC, ,, ,, 2,1, , ,, C,  , number, classes, 2C, .] 

>> PoS Tags are: 
[('\uf0b7', 'X'), ('Class', 'PROPN'), ('label→', 'PROPN'), ('C', 'NOUN'), (':', 'PUNCT'), ('Target', 'NOUN'), ('attribute', 'NOUN'), (';', 'PUNCT'), ('\uf07b', 'NOUN'), ('\uf07dCcccC', 'NOUN'), (',', 'PUNCT'), (',', 'PUNCT'), ('2,1', 'NUM'), ('\uf04b\uf03d', 'PROPN'), (',', 'PUNCT'), ('C', 'PROPN'), (' ', 'SPACE'), ('number', 'NOUN'), ('classes', 'NOUN'), ('2\uf0b3C', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\uf0b7', 'punct'), ('Class', 'compound'), ('label→', 'compound'), ('C', 'ROOT'), (':', 'punct'), ('Target', 'compound'), ('attribute', 'appos'), (';', 'punct'), ('\uf07b', 'compound'), ('\uf07dCcccC', 'conj'), (',', 'punct'), (',', 'punct'), ('2,1', 'punct'), ('\uf04b\uf03d', 'prep'), (',', 'punct'), ('C', 'compound'), (' ', 'nsubj'), ('number', 'attr'), ('classes', 'pobj'), ('2\uf0b3C', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[, Class], [Class, label→], [label→, C], [C, :], [:, Target], [Target, attribute], [attribute, ;], [;, ], [, CcccC], [CcccC, ,], [,, ,], [,, 2,1], [2,1, ], [, ,], [,, C], [C,  ], [ , number], [number, classes], [classes, 2C], [2C, .]]

>> Trigrams: 
[[, Class, label→], [Class, label→, C], [label→, C, :], [C, :, Target], [:, Target, attribute], [Target, attribute, ;], [attribute, ;, ], [;, , CcccC], [, CcccC, ,], [CcccC, ,, ,], [,, ,, 2,1], [,, 2,1, ], [2,1, , ,], [, ,, C], [,, C,  ], [C,  , number], [ , number, classes], [number, classes, 2C], [classes, 2C, .]]

>> Noun Phrases are: 
[ Class label→ C, Target attribute,  CcccC, the number, classes]

>> Named Entities are: 
[('\uf0b7', 'CARDINAL'), ('2,1', 'CARDINAL'), ('\uf04b\uf03d', 'ORG'), ('2\uf0b3C', 'GPE')] 


================================ Paragraph 49 =================================

Given a data set D, the core objective of ML is to produce a  

------------------- Sentence 1 -------------------

Given a data set D, the core objective of ML is to produce a   


>> Tokens are: 
[Given, data, set, D, ,, core, objective, ML, produce,  ] 

>> PoS Tags are: 
[('Given', 'VERB'), ('data', 'NOUN'), ('set', 'VERB'), ('D', 'NOUN'), (',', 'PUNCT'), ('core', 'NOUN'), ('objective', 'NOUN'), ('ML', 'PROPN'), ('produce', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Given', 'prep'), ('data', 'pobj'), ('set', 'acl'), ('D', 'pobj'), (',', 'punct'), ('core', 'compound'), ('objective', 'nsubj'), ('ML', 'pobj'), ('produce', 'xcomp'), (' ', 'dobj')]

>> Bigrams: 
[[Given, data], [data, set], [set, D], [D, ,], [,, core], [core, objective], [objective, ML], [ML, produce], [produce,  ]]

>> Trigrams: 
[[Given, data, set], [data, set, D], [set, D, ,], [D, ,, core], [,, core, objective], [core, objective, ML], [objective, ML, produce], [ML, produce,  ]]

>> Noun Phrases are: 
[a data, D, the core objective, ML]

>> Named Entities are: 
[('ML', 'ORG')] 


================================ Paragraph 50 =================================

prediction/classification function to relate values of attributes in  

------------------- Sentence 1 -------------------

prediction/classification function to relate values of attributes in   


>> Tokens are: 
[prediction, /, classification, function, relate, values, attributes,  ] 

>> PoS Tags are: 
[('prediction', 'NOUN'), ('/', 'SYM'), ('classification', 'NOUN'), ('function', 'NOUN'), ('relate', 'VERB'), ('values', 'NOUN'), ('attributes', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('prediction', 'nmod'), ('/', 'punct'), ('classification', 'compound'), ('function', 'ROOT'), ('relate', 'acl'), ('values', 'dobj'), ('attributes', 'pobj'), (' ', 'pobj')]

>> Bigrams: 
[[prediction, /], [/, classification], [classification, function], [function, relate], [relate, values], [values, attributes], [attributes,  ]]

>> Trigrams: 
[[prediction, /, classification], [/, classification, function], [classification, function, relate], [function, relate, values], [relate, values, attributes], [values, attributes,  ]]

>> Noun Phrases are: 
[prediction/classification function, values, attributes]

>> Named Entities are: 
[] 


================================ Paragraph 51 =================================

A and classes in C.  

------------------- Sentence 1 -------------------

A and classes in C.   


>> Tokens are: 
[classes, C.,  ] 

>> PoS Tags are: 
[('classes', 'NOUN'), ('C.', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('classes', 'conj'), ('C.', 'pobj'), (' ', 'punct')]

>> Bigrams: 
[[classes, C.], [C.,  ]]

>> Trigrams: 
[[classes, C.,  ]]

>> Noun Phrases are: 
[A, classes, C.]

>> Named Entities are: 
[] 


================================ Paragraph 52 =================================

Data mining is one of the most tools of machine learning  

------------------- Sentence 1 -------------------

Data mining is one of the most tools of machine learning   


>> Tokens are: 
[Data, mining, tools, machine, learning,  ] 

>> PoS Tags are: 
[('Data', 'NOUN'), ('mining', 'NOUN'), ('tools', 'NOUN'), ('machine', 'NOUN'), ('learning', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Data', 'compound'), ('mining', 'nsubj'), ('tools', 'pobj'), ('machine', 'pobj'), ('learning', 'acl'), (' ', 'dobj')]

>> Bigrams: 
[[Data, mining], [mining, tools], [tools, machine], [machine, learning], [learning,  ]]

>> Trigrams: 
[[Data, mining, tools], [mining, tools, machine], [tools, machine, learning], [machine, learning,  ]]

>> Noun Phrases are: 
[Data mining, the most tools, machine]

>> Named Entities are: 
[] 


================================ Paragraph 53 =================================

among the number of different applications. It is common that  

------------------- Sentence 1 -------------------

among the number of different applications. 


>> Tokens are: 
[number, different, applications, .] 

>> PoS Tags are: 
[('number', 'NOUN'), ('different', 'ADJ'), ('applications', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('number', 'pobj'), ('different', 'amod'), ('applications', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[number, different], [different, applications], [applications, .]]

>> Trigrams: 
[[number, different, applications], [different, applications, .]]

>> Noun Phrases are: 
[the number, different applications]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

It is common 


>> Tokens are: 
[common] 

>> PoS Tags are: 
[('common', 'ADJ')] 

>> Dependency Tags are: 
[('common', 'acomp')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[It]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

that   


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'pobj')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 54 =================================

people are often choosing a wrong choices during analysis phase  

------------------- Sentence 1 -------------------

people are often choosing a wrong choices during analysis phase   


>> Tokens are: 
[people, choosing, wrong, choices, analysis, phase,  ] 

>> PoS Tags are: 
[('people', 'NOUN'), ('choosing', 'VERB'), ('wrong', 'ADJ'), ('choices', 'NOUN'), ('analysis', 'NOUN'), ('phase', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('people', 'nsubj'), ('choosing', 'ROOT'), ('wrong', 'amod'), ('choices', 'dobj'), ('analysis', 'compound'), ('phase', 'pobj'), (' ', 'punct')]

>> Bigrams: 
[[people, choosing], [choosing, wrong], [wrong, choices], [choices, analysis], [analysis, phase], [phase,  ]]

>> Trigrams: 
[[people, choosing, wrong], [choosing, wrong, choices], [wrong, choices, analysis], [choices, analysis, phase], [analysis, phase,  ]]

>> Noun Phrases are: 
[people, a wrong choices, analysis phase]

>> Named Entities are: 
[] 


================================ Paragraph 55 =================================

or, possibly, when trying to establish relationships between  

------------------- Sentence 1 -------------------

or, possibly, when trying to establish relationships between   


>> Tokens are: 
[,, possibly, ,, trying, establish, relationships,  ] 

>> PoS Tags are: 
[(',', 'PUNCT'), ('possibly', 'ADV'), (',', 'PUNCT'), ('trying', 'VERB'), ('establish', 'VERB'), ('relationships', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[(',', 'punct'), ('possibly', 'ROOT'), (',', 'punct'), ('trying', 'advcl'), ('establish', 'xcomp'), ('relationships', 'dobj'), (' ', 'pobj')]

>> Bigrams: 
[[,, possibly], [possibly, ,], [,, trying], [trying, establish], [establish, relationships], [relationships,  ]]

>> Trigrams: 
[[,, possibly, ,], [possibly, ,, trying], [,, trying, establish], [trying, establish, relationships], [establish, relationships,  ]]

>> Noun Phrases are: 
[relationships]

>> Named Entities are: 
[] 


================================ Paragraph 56 =================================

multiple features. Ultimately this makes it difficult for them to  

------------------- Sentence 1 -------------------

multiple features. 


>> Tokens are: 
[multiple, features, .] 

>> PoS Tags are: 
[('multiple', 'ADJ'), ('features', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('multiple', 'amod'), ('features', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[multiple, features], [features, .]]

>> Trigrams: 
[[multiple, features, .]]

>> Noun Phrases are: 
[multiple features]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Ultimately this makes it difficult for them to   


>> Tokens are: 
[Ultimately, makes, difficult,  ] 

>> PoS Tags are: 
[('Ultimately', 'ADV'), ('makes', 'VERB'), ('difficult', 'ADJ'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Ultimately', 'advmod'), ('makes', 'ROOT'), ('difficult', 'ccomp'), (' ', 'pobj')]

>> Bigrams: 
[[Ultimately, makes], [makes, difficult], [difficult,  ]]

>> Trigrams: 
[[Ultimately, makes, difficult], [makes, difficult,  ]]

>> Noun Phrases are: 
[it, them]

>> Named Entities are: 
[] 


================================ Paragraph 57 =================================

explore solutions to certain problems. Machine learning can  

------------------- Sentence 1 -------------------

explore solutions to certain problems. 


>> Tokens are: 
[explore, solutions, certain, problems, .] 

>> PoS Tags are: 
[('explore', 'VERB'), ('solutions', 'NOUN'), ('certain', 'ADJ'), ('problems', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('explore', 'ROOT'), ('solutions', 'dobj'), ('certain', 'amod'), ('problems', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[explore, solutions], [solutions, certain], [certain, problems], [problems, .]]

>> Trigrams: 
[[explore, solutions, certain], [solutions, certain, problems], [certain, problems, .]]

>> Noun Phrases are: 
[solutions, certain problems]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Machine learning can   


>> Tokens are: 
[Machine, learning,  ] 

>> PoS Tags are: 
[('Machine', 'NOUN'), ('learning', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Machine', 'compound'), ('learning', 'nsubj'), (' ', 'punct')]

>> Bigrams: 
[[Machine, learning], [learning,  ]]

>> Trigrams: 
[[Machine, learning,  ]]

>> Noun Phrases are: 
[Machine learning]

>> Named Entities are: 
[] 


================================ Paragraph 58 =================================

often be successfully applied to these problems, improving the  

------------------- Sentence 1 -------------------

often be successfully applied to these problems, improving the   


>> Tokens are: 
[successfully, applied, problems, ,, improving,  ] 

>> PoS Tags are: 
[('successfully', 'ADV'), ('applied', 'VERB'), ('problems', 'NOUN'), (',', 'PUNCT'), ('improving', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('successfully', 'advmod'), ('applied', 'ROOT'), ('problems', 'pobj'), (',', 'punct'), ('improving', 'advcl'), (' ', 'dobj')]

>> Bigrams: 
[[successfully, applied], [applied, problems], [problems, ,], [,, improving], [improving,  ]]

>> Trigrams: 
[[successfully, applied, problems], [applied, problems, ,], [problems, ,, improving], [,, improving,  ]]

>> Noun Phrases are: 
[these problems]

>> Named Entities are: 
[] 


================================ Paragraph 59 =================================

efficiency of systems and the designs of machines [1]. In  

------------------- Sentence 1 -------------------

efficiency of systems and the designs of machines [1]. 


>> Tokens are: 
[efficiency, systems, designs, machines, [, 1, ], .] 

>> PoS Tags are: 
[('efficiency', 'NOUN'), ('systems', 'NOUN'), ('designs', 'NOUN'), ('machines', 'NOUN'), ('[', 'PUNCT'), ('1', 'NUM'), (']', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('efficiency', 'ROOT'), ('systems', 'pobj'), ('designs', 'conj'), ('machines', 'pobj'), ('[', 'punct'), ('1', 'appos'), (']', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[efficiency, systems], [systems, designs], [designs, machines], [machines, [], [[, 1], [1, ]], [], .]]

>> Trigrams: 
[[efficiency, systems, designs], [systems, designs, machines], [designs, machines, [], [machines, [, 1], [[, 1, ]], [1, ], .]]

>> Noun Phrases are: 
[efficiency, systems, the designs, machines]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

In   


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'pobj')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 60 =================================

machine learning algorithms every instance of particular dataset  

------------------- Sentence 1 -------------------

machine learning algorithms every instance of particular dataset   


>> Tokens are: 
[machine, learning, algorithms, instance, particular, dataset,  ] 

>> PoS Tags are: 
[('machine', 'NOUN'), ('learning', 'VERB'), ('algorithms', 'NOUN'), ('instance', 'NOUN'), ('particular', 'ADJ'), ('dataset', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('machine', 'compound'), ('learning', 'ROOT'), ('algorithms', 'dobj'), ('instance', 'dobj'), ('particular', 'amod'), ('dataset', 'pobj'), (' ', 'punct')]

>> Bigrams: 
[[machine, learning], [learning, algorithms], [algorithms, instance], [instance, particular], [particular, dataset], [dataset,  ]]

>> Trigrams: 
[[machine, learning, algorithms], [learning, algorithms, instance], [algorithms, instance, particular], [instance, particular, dataset], [particular, dataset,  ]]

>> Noun Phrases are: 
[algorithms, every instance, particular dataset]

>> Named Entities are: 
[] 


================================ Paragraph 61 =================================

is represented by using the same set of features. The nature of  

------------------- Sentence 1 -------------------

is represented by using the same set of features. 


>> Tokens are: 
[represented, set, features, .] 

>> PoS Tags are: 
[('represented', 'VERB'), ('set', 'NOUN'), ('features', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('represented', 'ROOT'), ('set', 'dobj'), ('features', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[represented, set], [set, features], [features, .]]

>> Trigrams: 
[[represented, set, features], [set, features, .]]

>> Noun Phrases are: 
[the same set, features]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

The nature of   


>> Tokens are: 
[nature,  ] 

>> PoS Tags are: 
[('nature', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('nature', 'ROOT'), (' ', 'pobj')]

>> Bigrams: 
[[nature,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[The nature]

>> Named Entities are: 
[] 


================================ Paragraph 62 =================================

these features could be continuous, categorical or binary. If  

------------------- Sentence 1 -------------------

these features could be continuous, categorical or binary. 


>> Tokens are: 
[features, continuous, ,, categorical, binary, .] 

>> PoS Tags are: 
[('features', 'NOUN'), ('continuous', 'ADJ'), (',', 'PUNCT'), ('categorical', 'ADJ'), ('binary', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('features', 'nsubj'), ('continuous', 'acomp'), (',', 'punct'), ('categorical', 'conj'), ('binary', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[features, continuous], [continuous, ,], [,, categorical], [categorical, binary], [binary, .]]

>> Trigrams: 
[[features, continuous, ,], [continuous, ,, categorical], [,, categorical, binary], [categorical, binary, .]]

>> Noun Phrases are: 
[these features]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

If   


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'pobj')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 63 =================================

instances are given with known labels (i.e.- the corresponding  

------------------- Sentence 1 -------------------

instances are given with known labels (i.e.- the corresponding   


>> Tokens are: 
[instances, given, known, labels, (, i.e.-, corresponding,  ] 

>> PoS Tags are: 
[('instances', 'NOUN'), ('given', 'VERB'), ('known', 'VERB'), ('labels', 'NOUN'), ('(', 'PUNCT'), ('i.e.-', 'VERB'), ('corresponding', 'ADJ'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('instances', 'nsubjpass'), ('given', 'ROOT'), ('known', 'amod'), ('labels', 'pobj'), ('(', 'punct'), ('i.e.-', 'parataxis'), ('corresponding', 'amod'), (' ', 'dobj')]

>> Bigrams: 
[[instances, given], [given, known], [known, labels], [labels, (], [(, i.e.-], [i.e.-, corresponding], [corresponding,  ]]

>> Trigrams: 
[[instances, given, known], [given, known, labels], [known, labels, (], [labels, (, i.e.-], [(, i.e.-, corresponding], [i.e.-, corresponding,  ]]

>> Noun Phrases are: 
[instances, known labels]

>> Named Entities are: 
[] 


================================ Paragraph 64 =================================

correct outputs) then the learning scheme is known as supervised  

------------------- Sentence 1 -------------------

correct outputs) then the learning scheme is known as supervised   


>> Tokens are: 
[correct, outputs, ), learning, scheme, known, supervised,  ] 

>> PoS Tags are: 
[('correct', 'ADJ'), ('outputs', 'NOUN'), (')', 'PUNCT'), ('learning', 'NOUN'), ('scheme', 'NOUN'), ('known', 'VERB'), ('supervised', 'ADJ'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('correct', 'amod'), ('outputs', 'ROOT'), (')', 'punct'), ('learning', 'compound'), ('scheme', 'nsubjpass'), ('known', 'relcl'), ('supervised', 'amod'), (' ', 'punct')]

>> Bigrams: 
[[correct, outputs], [outputs, )], [), learning], [learning, scheme], [scheme, known], [known, supervised], [supervised,  ]]

>> Trigrams: 
[[correct, outputs, )], [outputs, ), learning], [), learning, scheme], [learning, scheme, known], [scheme, known, supervised], [known, supervised,  ]]

>> Noun Phrases are: 
[correct outputs, the learning scheme]

>> Named Entities are: 
[] 


================================ Paragraph 65 =================================

(see Table.1), while in unsupervised learning approach the  

------------------- Sentence 1 -------------------

(see Table.1), while in unsupervised learning approach the   


>> Tokens are: 
[(, Table.1, ), ,, unsupervised, learning, approach,  ] 

>> PoS Tags are: 
[('(', 'PUNCT'), ('Table.1', 'NOUN'), (')', 'PUNCT'), (',', 'PUNCT'), ('unsupervised', 'ADJ'), ('learning', 'NOUN'), ('approach', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('(', 'punct'), ('Table.1', 'dobj'), (')', 'punct'), (',', 'punct'), ('unsupervised', 'amod'), ('learning', 'pobj'), ('approach', 'advcl'), (' ', 'dobj')]

>> Bigrams: 
[[(, Table.1], [Table.1, )], [), ,], [,, unsupervised], [unsupervised, learning], [learning, approach], [approach,  ]]

>> Trigrams: 
[[(, Table.1, )], [Table.1, ), ,], [), ,, unsupervised], [,, unsupervised, learning], [unsupervised, learning, approach], [learning, approach,  ]]

>> Noun Phrases are: 
[Table.1, unsupervised learning]

>> Named Entities are: 
[] 


================================ Paragraph 66 =================================

instances are unlabeled. Through applying these unsupervised  

------------------- Sentence 1 -------------------

instances are unlabeled. 


>> Tokens are: 
[instances, unlabeled, .] 

>> PoS Tags are: 
[('instances', 'NOUN'), ('unlabeled', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('instances', 'nsubj'), ('unlabeled', 'acomp'), ('.', 'punct')]

>> Bigrams: 
[[instances, unlabeled], [unlabeled, .]]

>> Trigrams: 
[[instances, unlabeled, .]]

>> Noun Phrases are: 
[instances]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Through applying these unsupervised   


>> Tokens are: 
[applying, unsupervised,  ] 

>> PoS Tags are: 
[('applying', 'VERB'), ('unsupervised', 'ADJ'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('applying', 'pcomp'), ('unsupervised', 'amod'), (' ', 'dobj')]

>> Bigrams: 
[[applying, unsupervised], [unsupervised,  ]]

>> Trigrams: 
[[applying, unsupervised,  ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 67 =================================

(clustering) algorithms, researchers are optimistic to discover  

------------------- Sentence 1 -------------------

(clustering) algorithms, researchers are optimistic to discover   


>> Tokens are: 
[(, clustering, ), algorithms, ,, researchers, optimistic, discover,  ] 

>> PoS Tags are: 
[('(', 'PUNCT'), ('clustering', 'NOUN'), (')', 'PUNCT'), ('algorithms', 'NOUN'), (',', 'PUNCT'), ('researchers', 'NOUN'), ('optimistic', 'ADJ'), ('discover', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('(', 'punct'), ('clustering', 'advcl'), (')', 'punct'), ('algorithms', 'dobj'), (',', 'punct'), ('researchers', 'nsubj'), ('optimistic', 'acomp'), ('discover', 'xcomp'), (' ', 'dobj')]

>> Bigrams: 
[[(, clustering], [clustering, )], [), algorithms], [algorithms, ,], [,, researchers], [researchers, optimistic], [optimistic, discover], [discover,  ]]

>> Trigrams: 
[[(, clustering, )], [clustering, ), algorithms], [), algorithms, ,], [algorithms, ,, researchers], [,, researchers, optimistic], [researchers, optimistic, discover], [optimistic, discover,  ]]

>> Noun Phrases are: 
[algorithms, researchers]

>> Named Entities are: 
[] 


================================ Paragraph 68 =================================

unknown, but useful, classes of items [3]. Another kind of  

------------------- Sentence 1 -------------------

unknown, but useful, classes of items [3]. 


>> Tokens are: 
[unknown, ,, useful, ,, classes, items, [, 3, ], .] 

>> PoS Tags are: 
[('unknown', 'ADJ'), (',', 'PUNCT'), ('useful', 'ADJ'), (',', 'PUNCT'), ('classes', 'NOUN'), ('items', 'NOUN'), ('[', 'PUNCT'), ('3', 'NUM'), (']', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('unknown', 'amod'), (',', 'punct'), ('useful', 'conj'), (',', 'punct'), ('classes', 'ROOT'), ('items', 'pobj'), ('[', 'punct'), ('3', 'appos'), (']', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[unknown, ,], [,, useful], [useful, ,], [,, classes], [classes, items], [items, [], [[, 3], [3, ]], [], .]]

>> Trigrams: 
[[unknown, ,, useful], [,, useful, ,], [useful, ,, classes], [,, classes, items], [classes, items, [], [items, [, 3], [[, 3, ]], [3, ], .]]

>> Noun Phrases are: 
[unknown, but useful, classes, items]

>> Named Entities are: 
[('3', 'CARDINAL')] 

------------------- Sentence 2 -------------------

Another kind of   


>> Tokens are: 
[kind,  ] 

>> PoS Tags are: 
[('kind', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('kind', 'ROOT'), (' ', 'pobj')]

>> Bigrams: 
[[kind,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Another kind]

>> Named Entities are: 
[] 


================================ Paragraph 69 =================================

machine learning is reinforcement learning. Here the training  

------------------- Sentence 1 -------------------

machine learning is reinforcement learning. 


>> Tokens are: 
[machine, learning, reinforcement, learning, .] 

>> PoS Tags are: 
[('machine', 'NOUN'), ('learning', 'NOUN'), ('reinforcement', 'NOUN'), ('learning', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('machine', 'compound'), ('learning', 'nsubj'), ('reinforcement', 'compound'), ('learning', 'attr'), ('.', 'punct')]

>> Bigrams: 
[[machine, learning], [learning, reinforcement], [reinforcement, learning], [learning, .]]

>> Trigrams: 
[[machine, learning, reinforcement], [learning, reinforcement, learning], [reinforcement, learning, .]]

>> Noun Phrases are: 
[machine learning, reinforcement learning]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Here the training   


>> Tokens are: 
[training,  ] 

>> PoS Tags are: 
[('training', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('training', 'compound'), (' ', 'ROOT')]

>> Bigrams: 
[[training,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 70 =================================

information provided to the learning system by the environment  

------------------- Sentence 1 -------------------

information provided to the learning system by the environment   


>> Tokens are: 
[information, provided, learning, system, environment,  ] 

>> PoS Tags are: 
[('information', 'NOUN'), ('provided', 'VERB'), ('learning', 'NOUN'), ('system', 'NOUN'), ('environment', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('information', 'ROOT'), ('provided', 'acl'), ('learning', 'compound'), ('system', 'pobj'), ('environment', 'pobj'), (' ', 'appos')]

>> Bigrams: 
[[information, provided], [provided, learning], [learning, system], [system, environment], [environment,  ]]

>> Trigrams: 
[[information, provided, learning], [provided, learning, system], [learning, system, environment], [system, environment,  ]]

>> Noun Phrases are: 
[information, the learning system, the environment]

>> Named Entities are: 
[] 


================================ Paragraph 71 =================================

(i.e.- external trainer) is in the form of a scalar reinforcement  

------------------- Sentence 1 -------------------

(i.e.- external trainer) is in the form of a scalar reinforcement   


>> Tokens are: 
[(, i.e.-, external, trainer, ), form, scalar, reinforcement,  ] 

>> PoS Tags are: 
[('(', 'PUNCT'), ('i.e.-', 'VERB'), ('external', 'ADJ'), ('trainer', 'NOUN'), (')', 'PUNCT'), ('form', 'NOUN'), ('scalar', 'ADJ'), ('reinforcement', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('(', 'punct'), ('i.e.-', 'nsubj'), ('external', 'amod'), ('trainer', 'dobj'), (')', 'punct'), ('form', 'pobj'), ('scalar', 'amod'), ('reinforcement', 'pobj'), (' ', 'punct')]

>> Bigrams: 
[[(, i.e.-], [i.e.-, external], [external, trainer], [trainer, )], [), form], [form, scalar], [scalar, reinforcement], [reinforcement,  ]]

>> Trigrams: 
[[(, i.e.-, external], [i.e.-, external, trainer], [external, trainer, )], [trainer, ), form], [), form, scalar], [form, scalar, reinforcement], [scalar, reinforcement,  ]]

>> Noun Phrases are: 
[external trainer, the form, a scalar reinforcement]

>> Named Entities are: 
[] 


================================ Paragraph 72 =================================

signal that constitutes a measure of how well the system  

------------------- Sentence 1 -------------------

signal that constitutes a measure of how well the system   


>> Tokens are: 
[signal, constitutes, measure, system,  ] 

>> PoS Tags are: 
[('signal', 'VERB'), ('constitutes', 'VERB'), ('measure', 'NOUN'), ('system', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('signal', 'ROOT'), ('constitutes', 'ccomp'), ('measure', 'dobj'), ('system', 'nsubj'), (' ', 'punct')]

>> Bigrams: 
[[signal, constitutes], [constitutes, measure], [measure, system], [system,  ]]

>> Trigrams: 
[[signal, constitutes, measure], [constitutes, measure, system], [measure, system,  ]]

>> Noun Phrases are: 
[a measure, the system]

>> Named Entities are: 
[] 


================================ Paragraph 73 =================================

operates. The learner is not told which action has to take, as in  

------------------- Sentence 1 -------------------

operates. 


>> Tokens are: 
[operates, .] 

>> PoS Tags are: 
[('operates', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('operates', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[operates, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

The learner is not told which action has to take, as in   


>> Tokens are: 
[learner, told, action, ,,  ] 

>> PoS Tags are: 
[('learner', 'NOUN'), ('told', 'VERB'), ('action', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('learner', 'nsubjpass'), ('told', 'ROOT'), ('action', 'nsubj'), (',', 'punct'), (' ', 'pobj')]

>> Bigrams: 
[[learner, told], [told, action], [action, ,], [,,  ]]

>> Trigrams: 
[[learner, told, action], [told, action, ,], [action, ,,  ]]

>> Noun Phrases are: 
[The learner, which action]

>> Named Entities are: 
[] 


================================ Paragraph 74 =================================

most forms of machine learning, but instead must discover  

------------------- Sentence 1 -------------------

most forms of machine learning, but instead must discover   


>> Tokens are: 
[forms, machine, learning, ,, instead, discover,  ] 

>> PoS Tags are: 
[('forms', 'NOUN'), ('machine', 'NOUN'), ('learning', 'NOUN'), (',', 'PUNCT'), ('instead', 'ADV'), ('discover', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('forms', 'nsubj'), ('machine', 'compound'), ('learning', 'pobj'), (',', 'punct'), ('instead', 'advmod'), ('discover', 'ROOT'), (' ', 'dobj')]

>> Bigrams: 
[[forms, machine], [machine, learning], [learning, ,], [,, instead], [instead, discover], [discover,  ]]

>> Trigrams: 
[[forms, machine, learning], [machine, learning, ,], [learning, ,, instead], [,, instead, discover], [instead, discover,  ]]

>> Noun Phrases are: 
[most forms, machine learning]

>> Named Entities are: 
[] 


================================ Paragraph 75 =================================

which actions yield the most reward by trying them [1]. A  

------------------- Sentence 1 -------------------

which actions yield the most reward by trying them [1]. 


>> Tokens are: 
[actions, yield, reward, trying, [, 1, ], .] 

>> PoS Tags are: 
[('actions', 'NOUN'), ('yield', 'VERB'), ('reward', 'NOUN'), ('trying', 'VERB'), ('[', 'PUNCT'), ('1', 'NUM'), (']', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('actions', 'nsubj'), ('yield', 'ROOT'), ('reward', 'dobj'), ('trying', 'pcomp'), ('[', 'punct'), ('1', 'prep'), (']', 'npadvmod'), ('.', 'punct')]

>> Bigrams: 
[[actions, yield], [yield, reward], [reward, trying], [trying, [], [[, 1], [1, ]], [], .]]

>> Trigrams: 
[[actions, yield, reward], [yield, reward, trying], [reward, trying, [], [trying, [, 1], [[, 1, ]], [1, ], .]]

>> Noun Phrases are: 
[actions, the most reward, them]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

A   


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 76 =================================

number of ML applications involve tasks that can be set up as  

------------------- Sentence 1 -------------------

number of ML applications involve tasks that can be set up as   


>> Tokens are: 
[number, ML, applications, involve, tasks, set,  ] 

>> PoS Tags are: 
[('number', 'NOUN'), ('ML', 'PROPN'), ('applications', 'NOUN'), ('involve', 'VERB'), ('tasks', 'NOUN'), ('set', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('number', 'nsubj'), ('ML', 'compound'), ('applications', 'pobj'), ('involve', 'ROOT'), ('tasks', 'dobj'), ('set', 'relcl'), (' ', 'pobj')]

>> Bigrams: 
[[number, ML], [ML, applications], [applications, involve], [involve, tasks], [tasks, set], [set,  ]]

>> Trigrams: 
[[number, ML, applications], [ML, applications, involve], [applications, involve, tasks], [involve, tasks, set], [tasks, set,  ]]

>> Noun Phrases are: 
[number, ML applications, tasks]

>> Named Entities are: 
[('ML', 'ORG')] 


================================ Paragraph 77 =================================

supervised. The below figure depicts the general classification  

------------------- Sentence 1 -------------------

supervised. 


>> Tokens are: 
[supervised, .] 

>> PoS Tags are: 
[('supervised', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('supervised', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[supervised, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

The below figure depicts the general classification   


>> Tokens are: 
[figure, depicts, general, classification,  ] 

>> PoS Tags are: 
[('figure', 'NOUN'), ('depicts', 'VERB'), ('general', 'ADJ'), ('classification', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('figure', 'nsubj'), ('depicts', 'ROOT'), ('general', 'amod'), ('classification', 'dobj'), (' ', 'punct')]

>> Bigrams: 
[[figure, depicts], [depicts, general], [general, classification], [classification,  ]]

>> Trigrams: 
[[figure, depicts, general], [depicts, general, classification], [general, classification,  ]]

>> Noun Phrases are: 
[The below figure, the general classification]

>> Named Entities are: 
[] 


================================ Paragraph 78 =================================

architecture.  

------------------- Sentence 1 -------------------

architecture. 


>> Tokens are: 
[architecture, .] 

>> PoS Tags are: 
[('architecture', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('architecture', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[architecture, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[architecture]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 79 =================================

Fig.1. Classification Architecture  

------------------- Sentence 1 -------------------

Fig.1. 


>> Tokens are: 
[Fig.1, .] 

>> PoS Tags are: 
[('Fig.1', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Fig.1', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Fig.1, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Classification Architecture   


>> Tokens are: 
[Classification, Architecture,  ] 

>> PoS Tags are: 
[('Classification', 'PROPN'), ('Architecture', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Classification', 'compound'), ('Architecture', 'ROOT'), (' ', 'nummod')]

>> Bigrams: 
[[Classification, Architecture], [Architecture,  ]]

>> Trigrams: 
[[Classification, Architecture,  ]]

>> Noun Phrases are: 
[Classification Architecture]

>> Named Entities are: 
[] 


================================ Paragraph 80 =================================

In this study, we will focus our attention on the methods  

------------------- Sentence 1 -------------------

In this study, we will focus our attention on the methods   


>> Tokens are: 
[study, ,, focus, attention, methods,  ] 

>> PoS Tags are: 
[('study', 'NOUN'), (',', 'PUNCT'), ('focus', 'VERB'), ('attention', 'NOUN'), ('methods', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('study', 'pobj'), (',', 'punct'), ('focus', 'ROOT'), ('attention', 'dobj'), ('methods', 'pobj'), (' ', 'npadvmod')]

>> Bigrams: 
[[study, ,], [,, focus], [focus, attention], [attention, methods], [methods,  ]]

>> Trigrams: 
[[study, ,, focus], [,, focus, attention], [focus, attention, methods], [attention, methods,  ]]

>> Noun Phrases are: 
[this study, we, our attention, the methods]

>> Named Entities are: 
[] 


================================ Paragraph 81 =================================

which are being used for supervised learning. This study will  

------------------- Sentence 1 -------------------

which are being used for supervised learning. 


>> Tokens are: 
[supervised, learning, .] 

>> PoS Tags are: 
[('supervised', 'ADJ'), ('learning', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('supervised', 'amod'), ('learning', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[supervised, learning], [learning, .]]

>> Trigrams: 
[[supervised, learning, .]]

>> Noun Phrases are: 
[supervised learning]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

This study will   


>> Tokens are: 
[study,  ] 

>> PoS Tags are: 
[('study', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('study', 'nsubj'), (' ', 'punct')]

>> Bigrams: 
[[study,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[This study]

>> Named Entities are: 
[] 


================================ Paragraph 82 =================================

contribute to new researchers for getting up-to-date knowledge  

------------------- Sentence 1 -------------------

contribute to new researchers for getting up-to-date knowledge   


>> Tokens are: 
[contribute, new, researchers, getting, -, -, date, knowledge,  ] 

>> PoS Tags are: 
[('contribute', 'VERB'), ('new', 'ADJ'), ('researchers', 'NOUN'), ('getting', 'VERB'), ('-', 'PUNCT'), ('-', 'PUNCT'), ('date', 'NOUN'), ('knowledge', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('contribute', 'ROOT'), ('new', 'amod'), ('researchers', 'pobj'), ('getting', 'pcomp'), ('-', 'punct'), ('-', 'punct'), ('date', 'pobj'), ('knowledge', 'dobj'), (' ', 'punct')]

>> Bigrams: 
[[contribute, new], [new, researchers], [researchers, getting], [getting, -], [-, -], [-, date], [date, knowledge], [knowledge,  ]]

>> Trigrams: 
[[contribute, new, researchers], [new, researchers, getting], [researchers, getting, -], [getting, -, -], [-, -, date], [-, date, knowledge], [date, knowledge,  ]]

>> Noun Phrases are: 
[new researchers, date]

>> Named Entities are: 
[] 


================================ Paragraph 83 =================================

about supervised ML approaches.  

------------------- Sentence 1 -------------------

about supervised ML approaches. 


>> Tokens are: 
[supervised, ML, approaches, .] 

>> PoS Tags are: 
[('supervised', 'VERB'), ('ML', 'PROPN'), ('approaches', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('supervised', 'amod'), ('ML', 'compound'), ('approaches', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[supervised, ML], [ML, approaches], [approaches, .]]

>> Trigrams: 
[[supervised, ML, approaches], [ML, approaches, .]]

>> Noun Phrases are: 
[supervised ML approaches]

>> Named Entities are: 
[('ML', 'ORG')] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 84 =================================

Table.1. Instances with known labels  

------------------- Sentence 1 -------------------

Table.1. 


>> Tokens are: 
[Table.1, .] 

>> PoS Tags are: 
[('Table.1', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Table.1', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Table.1, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Table.1]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Instances with known labels   


>> Tokens are: 
[Instances, known, labels,  ] 

>> PoS Tags are: 
[('Instances', 'NOUN'), ('known', 'VERB'), ('labels', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Instances', 'ROOT'), ('known', 'amod'), ('labels', 'pobj'), (' ', 'punct')]

>> Bigrams: 
[[Instances, known], [known, labels], [labels,  ]]

>> Trigrams: 
[[Instances, known, labels], [known, labels,  ]]

>> Noun Phrases are: 
[Instances, known labels]

>> Named Entities are: 
[] 


================================ Paragraph 85 =================================

Data in standard Format  

------------------- Sentence 1 -------------------

Data in standard Format   


>> Tokens are: 
[Data, standard, Format,  ] 

>> PoS Tags are: 
[('Data', 'NOUN'), ('standard', 'ADJ'), ('Format', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Data', 'ROOT'), ('standard', 'amod'), ('Format', 'compound'), (' ', 'pobj')]

>> Bigrams: 
[[Data, standard], [standard, Format], [Format,  ]]

>> Trigrams: 
[[Data, standard, Format], [standard, Format,  ]]

>> Noun Phrases are: 
[Data]

>> Named Entities are: 
[('Format', 'GPE')] 


================================ Paragraph 86 =================================

Case Feature 1 Feature 2 … Feature n Class  

------------------- Sentence 1 -------------------

Case Feature 1 Feature 2 … 


>> Tokens are: 
[Case, Feature, 1, Feature, 2, …] 

>> PoS Tags are: 
[('Case', 'NOUN'), ('Feature', 'NOUN'), ('1', 'NUM'), ('Feature', 'PROPN'), ('2', 'NUM'), ('…', 'PUNCT')] 

>> Dependency Tags are: 
[('Case', 'compound'), ('Feature', 'ROOT'), ('1', 'nummod'), ('Feature', 'appos'), ('2', 'nummod'), ('…', 'punct')]

>> Bigrams: 
[[Case, Feature], [Feature, 1], [1, Feature], [Feature, 2], [2, …]]

>> Trigrams: 
[[Case, Feature, 1], [Feature, 1, Feature], [1, Feature, 2], [Feature, 2, …]]

>> Noun Phrases are: 
[Case Feature, Feature]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Feature n Class   


>> Tokens are: 
[Feature, n, Class,  ] 

>> PoS Tags are: 
[('Feature', 'NOUN'), ('n', 'CCONJ'), ('Class', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Feature', 'ROOT'), ('n', 'cc'), ('Class', 'conj'), (' ', 'nummod')]

>> Bigrams: 
[[Feature, n], [n, Class], [Class,  ]]

>> Trigrams: 
[[Feature, n, Class], [n, Class,  ]]

>> Noun Phrases are: 
[Feature, Class]

>> Named Entities are: 
[] 


================================ Paragraph 87 =================================

1 aaa bbb … nnn Yes  

------------------- Sentence 1 -------------------

1 aaa bbb … nnn Yes   


>> Tokens are: 
[1, aaa, bbb, …, nnn, Yes,  ] 

>> PoS Tags are: 
[('1', 'NUM'), ('aaa', 'NOUN'), ('bbb', 'NOUN'), ('…', 'PUNCT'), ('nnn', 'NOUN'), ('Yes', 'INTJ'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('1', 'nummod'), ('aaa', 'compound'), ('bbb', 'dep'), ('…', 'punct'), ('nnn', 'ROOT'), ('Yes', 'intj'), (' ', 'punct')]

>> Bigrams: 
[[1, aaa], [aaa, bbb], [bbb, …], […, nnn], [nnn, Yes], [Yes,  ]]

>> Trigrams: 
[[1, aaa, bbb], [aaa, bbb, …], [bbb, …, nnn], […, nnn, Yes], [nnn, Yes,  ]]

>> Noun Phrases are: 
[1 aaa bbb … nnn]

>> Named Entities are: 
[('1', 'CARDINAL')] 


================================ Paragraph 88 =================================

2 aaa bbb … nnn Yes  

------------------- Sentence 1 -------------------

2 aaa bbb … nnn Yes   


>> Tokens are: 
[2, aaa, bbb, …, nnn, Yes,  ] 

>> PoS Tags are: 
[('2', 'NUM'), ('aaa', 'NOUN'), ('bbb', 'NOUN'), ('…', 'PUNCT'), ('nnn', 'NOUN'), ('Yes', 'INTJ'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('2', 'nummod'), ('aaa', 'compound'), ('bbb', 'dep'), ('…', 'punct'), ('nnn', 'ROOT'), ('Yes', 'intj'), (' ', 'punct')]

>> Bigrams: 
[[2, aaa], [aaa, bbb], [bbb, …], […, nnn], [nnn, Yes], [Yes,  ]]

>> Trigrams: 
[[2, aaa, bbb], [aaa, bbb, …], [bbb, …, nnn], […, nnn, Yes], [nnn, Yes,  ]]

>> Noun Phrases are: 
[2 aaa bbb … nnn]

>> Named Entities are: 
[('2', 'CARDINAL')] 


================================ Paragraph 89 =================================

3 aaa bbb … nnn No  

------------------- Sentence 1 -------------------

3 aaa bbb … nnn No   


>> Tokens are: 
[3, aaa, bbb, …, nnn,  ] 

>> PoS Tags are: 
[('3', 'NUM'), ('aaa', 'NOUN'), ('bbb', 'NOUN'), ('…', 'PUNCT'), ('nnn', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('3', 'nummod'), ('aaa', 'compound'), ('bbb', 'ROOT'), ('…', 'punct'), ('nnn', 'appos'), (' ', 'appos')]

>> Bigrams: 
[[3, aaa], [aaa, bbb], [bbb, …], […, nnn], [nnn,  ]]

>> Trigrams: 
[[3, aaa, bbb], [aaa, bbb, …], [bbb, …, nnn], […, nnn,  ]]

>> Noun Phrases are: 
[3 aaa bbb, nnn]

>> Named Entities are: 
[('3', 'CARDINAL')] 


================================ Paragraph 90 =================================

… … … … … …  

------------------- Sentence 1 -------------------

… … … … … …   


>> Tokens are: 
[…, …, …, …, …, …,  ] 

>> PoS Tags are: 
[('…', 'PUNCT'), ('…', 'PUNCT'), ('…', 'PUNCT'), ('…', 'PUNCT'), ('…', 'PUNCT'), ('…', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('…', 'punct'), ('…', 'punct'), ('…', 'punct'), ('…', 'punct'), ('…', 'punct'), ('…', 'punct'), (' ', 'ROOT')]

>> Bigrams: 
[[…, …], […, …], […, …], […, …], […, …], […,  ]]

>> Trigrams: 
[[…, …, …], […, …, …], […, …, …], […, …, …], […, …,  ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 91 =================================

In this work we have limited our references to refereed  

------------------- Sentence 1 -------------------

In this work we have limited our references to refereed   


>> Tokens are: 
[work, limited, references, refereed,  ] 

>> PoS Tags are: 
[('work', 'NOUN'), ('limited', 'VERB'), ('references', 'NOUN'), ('refereed', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('work', 'pobj'), ('limited', 'ROOT'), ('references', 'dobj'), ('refereed', 'advcl'), (' ', 'dobj')]

>> Bigrams: 
[[work, limited], [limited, references], [references, refereed], [refereed,  ]]

>> Trigrams: 
[[work, limited, references], [limited, references, refereed], [references, refereed,  ]]

>> Noun Phrases are: 
[this work, we, our references]

>> Named Entities are: 
[] 


================================ Paragraph 92 =================================

journals, published books, web data and conferences. Our major  

------------------- Sentence 1 -------------------

journals, published books, web data and conferences. 


>> Tokens are: 
[journals, ,, published, books, ,, web, data, conferences, .] 

>> PoS Tags are: 
[('journals', 'NOUN'), (',', 'PUNCT'), ('published', 'VERB'), ('books', 'NOUN'), (',', 'PUNCT'), ('web', 'NOUN'), ('data', 'NOUN'), ('conferences', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('journals', 'ROOT'), (',', 'punct'), ('published', 'amod'), ('books', 'conj'), (',', 'punct'), ('web', 'compound'), ('data', 'conj'), ('conferences', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[journals, ,], [,, published], [published, books], [books, ,], [,, web], [web, data], [data, conferences], [conferences, .]]

>> Trigrams: 
[[journals, ,, published], [,, published, books], [published, books, ,], [books, ,, web], [,, web, data], [web, data, conferences], [data, conferences, .]]

>> Noun Phrases are: 
[journals, published books, web data, conferences]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Our major   


>> Tokens are: 
[major,  ] 

>> PoS Tags are: 
[('major', 'ADJ'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('major', 'amod'), (' ', 'ROOT')]

>> Bigrams: 
[[major,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 93 =================================

goal for this work has been to provide a representative sample of  

------------------- Sentence 1 -------------------

goal for this work has been to provide a representative sample of   


>> Tokens are: 
[goal, work, provide, representative, sample,  ] 

>> PoS Tags are: 
[('goal', 'NOUN'), ('work', 'NOUN'), ('provide', 'VERB'), ('representative', 'ADJ'), ('sample', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('goal', 'nsubj'), ('work', 'pobj'), ('provide', 'xcomp'), ('representative', 'amod'), ('sample', 'dobj'), (' ', 'pobj')]

>> Bigrams: 
[[goal, work], [work, provide], [provide, representative], [representative, sample], [sample,  ]]

>> Trigrams: 
[[goal, work, provide], [work, provide, representative], [provide, representative, sample], [representative, sample,  ]]

>> Noun Phrases are: 
[goal, this work, a representative sample]

>> Named Entities are: 
[] 


================================ Paragraph 94 =================================

Training  

------------------- Sentence 1 -------------------

Training   


>> Tokens are: 
[Training,  ] 

>> PoS Tags are: 
[('Training', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Training', 'ROOT'), (' ', 'dobj')]

>> Bigrams: 
[[Training,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 95 =================================

Data  

------------------- Sentence 1 -------------------

Data   


>> Tokens are: 
[Data,  ] 

>> PoS Tags are: 
[('Data', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Data', 'ROOT'), (' ', 'nummod')]

>> Bigrams: 
[[Data,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Data]

>> Named Entities are: 
[] 


================================ Paragraph 96 =================================

Machine  

------------------- Sentence 1 -------------------

Machine   


>> Tokens are: 
[Machine,  ] 

>> PoS Tags are: 
[('Machine', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Machine', 'ROOT'), (' ', 'nummod')]

>> Bigrams: 
[[Machine,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Machine]

>> Named Entities are: 
[] 


================================ Paragraph 97 =================================

Learning  

------------------- Sentence 1 -------------------

Learning   


>> Tokens are: 
[Learning,  ] 

>> PoS Tags are: 
[('Learning', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Learning', 'ROOT'), (' ', 'dobj')]

>> Bigrams: 
[[Learning,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 98 =================================

Program  

------------------- Sentence 1 -------------------

Program   


>> Tokens are: 
[Program,  ] 

>> PoS Tags are: 
[('Program', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Program', 'ROOT'), (' ', 'nummod')]

>> Bigrams: 
[[Program,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Program]

>> Named Entities are: 
[] 


================================ Paragraph 99 =================================

Classification  

------------------- Sentence 1 -------------------

Classification   


>> Tokens are: 
[Classification,  ] 

>> PoS Tags are: 
[('Classification', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Classification', 'ROOT'), (' ', 'nummod')]

>> Bigrams: 
[[Classification,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Classification]

>> Named Entities are: 
[] 


================================ Paragraph 100 =================================

Rules  

------------------- Sentence 1 -------------------

Rules   


>> Tokens are: 
[Rules,  ] 

>> PoS Tags are: 
[('Rules', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Rules', 'ROOT'), (' ', 'nummod')]

>> Bigrams: 
[[Rules,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Rules]

>> Named Entities are: 
[] 


================================ Paragraph 101 =================================

Predicted  

------------------- Sentence 1 -------------------

Predicted   


>> Tokens are: 
[Predicted,  ] 

>> PoS Tags are: 
[('Predicted', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Predicted', 'ROOT'), (' ', 'dobj')]

>> Bigrams: 
[[Predicted,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 102 =================================

Classification  

------------------- Sentence 1 -------------------

Classification   


>> Tokens are: 
[Classification,  ] 

>> PoS Tags are: 
[('Classification', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Classification', 'ROOT'), (' ', 'nummod')]

>> Bigrams: 
[[Classification,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Classification]

>> Named Entities are: 
[] 


================================ Paragraph 103 =================================

Testing Data 

------------------- Sentence 1 -------------------

Testing Data 


>> Tokens are: 
[Testing, Data] 

>> PoS Tags are: 
[('Testing', 'PROPN'), ('Data', 'PROPN')] 

>> Dependency Tags are: 
[('Testing', 'compound'), ('Data', 'ROOT')]

>> Bigrams: 
[[Testing, Data]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Testing Data]

>> Named Entities are: 
[] 


================================ Paragraph 104 =================================

ISSN: 2229-6956(ONLINE)                                                                                                                             ICTACT JOURNAL ON SOFT COMPUTING, APRIL 2015, VOLUME: 05, ISSUE: 03  

------------------- Sentence 1 -------------------

ISSN: 2229-6956(ONLINE) 


>> Tokens are: 
[ISSN, :, 2229, -, 6956(ONLINE, )] 

>> PoS Tags are: 
[('ISSN', 'PROPN'), (':', 'PUNCT'), ('2229', 'NUM'), ('-', 'SYM'), ('6956(ONLINE', 'NUM'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('ISSN', 'ROOT'), (':', 'punct'), ('2229', 'appos'), ('-', 'punct'), ('6956(ONLINE', 'prep'), (')', 'punct')]

>> Bigrams: 
[[ISSN, :], [:, 2229], [2229, -], [-, 6956(ONLINE], [6956(ONLINE, )]]

>> Trigrams: 
[[ISSN, :, 2229], [:, 2229, -], [2229, -, 6956(ONLINE], [-, 6956(ONLINE, )]]

>> Noun Phrases are: 
[ISSN]

>> Named Entities are: 
[('ISSN', 'ORG'), ('2229-6956(ONLINE', 'CARDINAL')] 

------------------- Sentence 2 -------------------

                                                                                                                            ICTACT JOURNAL ON SOFT COMPUTING, APRIL 2015, VOLUME: 05, ISSUE: 


>> Tokens are: 
[                                                                                                                            , ICTACT, JOURNAL, SOFT, COMPUTING, ,, APRIL, 2015, ,, VOLUME, :, 05, ,, ISSUE, :] 

>> PoS Tags are: 
[('                                                                                                                            ', 'SPACE'), ('ICTACT', 'PROPN'), ('JOURNAL', 'PROPN'), ('SOFT', 'ADJ'), ('COMPUTING', 'NOUN'), (',', 'PUNCT'), ('APRIL', 'PROPN'), ('2015', 'NUM'), (',', 'PUNCT'), ('VOLUME', 'NOUN'), (':', 'PUNCT'), ('05', 'NUM'), (',', 'PUNCT'), ('ISSUE', 'NOUN'), (':', 'PUNCT')] 

>> Dependency Tags are: 
[('                                                                                                                            ', 'compound'), ('ICTACT', 'compound'), ('JOURNAL', 'ROOT'), ('SOFT', 'amod'), ('COMPUTING', 'pobj'), (',', 'punct'), ('APRIL', 'appos'), ('2015', 'nummod'), (',', 'punct'), ('VOLUME', 'appos'), (':', 'punct'), ('05', 'appos'), (',', 'punct'), ('ISSUE', 'appos'), (':', 'punct')]

>> Bigrams: 
[[                                                                                                                            , ICTACT], [ICTACT, JOURNAL], [JOURNAL, SOFT], [SOFT, COMPUTING], [COMPUTING, ,], [,, APRIL], [APRIL, 2015], [2015, ,], [,, VOLUME], [VOLUME, :], [:, 05], [05, ,], [,, ISSUE], [ISSUE, :]]

>> Trigrams: 
[[                                                                                                                            , ICTACT, JOURNAL], [ICTACT, JOURNAL, SOFT], [JOURNAL, SOFT, COMPUTING], [SOFT, COMPUTING, ,], [COMPUTING, ,, APRIL], [,, APRIL, 2015], [APRIL, 2015, ,], [2015, ,, VOLUME], [,, VOLUME, :], [VOLUME, :, 05], [:, 05, ,], [05, ,, ISSUE], [,, ISSUE, :]]

>> Noun Phrases are: 
[                                                                                                                            ICTACT JOURNAL, SOFT COMPUTING, APRIL, VOLUME, ISSUE]

>> Named Entities are: 
[('APRIL 2015', 'DATE'), ('05', 'CARDINAL')] 

------------------- Sentence 3 -------------------

03   


>> Tokens are: 
[03,  ] 

>> PoS Tags are: 
[('03', 'NUM'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('03', 'nummod'), (' ', 'ROOT')]

>> Bigrams: 
[[03,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('03', 'CARDINAL')] 


================================ Paragraph 105 =================================

947  

------------------- Sentence 1 -------------------

947   


>> Tokens are: 
[947,  ] 

>> PoS Tags are: 
[('947', 'NUM'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('947', 'nummod'), (' ', 'ROOT')]

>> Bigrams: 
[[947,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('947', 'CARDINAL')] 


================================ Paragraph 106 =================================

existing lines of research in each learning technique. In each of  

------------------- Sentence 1 -------------------

existing lines of research in each learning technique. 


>> Tokens are: 
[existing, lines, research, learning, technique, .] 

>> PoS Tags are: 
[('existing', 'VERB'), ('lines', 'NOUN'), ('research', 'NOUN'), ('learning', 'NOUN'), ('technique', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('existing', 'amod'), ('lines', 'ROOT'), ('research', 'pobj'), ('learning', 'compound'), ('technique', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[existing, lines], [lines, research], [research, learning], [learning, technique], [technique, .]]

>> Trigrams: 
[[existing, lines, research], [lines, research, learning], [research, learning, technique], [learning, technique, .]]

>> Noun Phrases are: 
[existing lines, research, each learning technique]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

In each of   


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'pobj')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 107 =================================

our listed areas, there are many other papers/books that could be  

------------------- Sentence 1 -------------------

our listed areas 


>> Tokens are: 
[listed, areas] 

>> PoS Tags are: 
[('listed', 'VERB'), ('areas', 'NOUN')] 

>> Dependency Tags are: 
[('listed', 'amod'), ('areas', 'ROOT')]

>> Bigrams: 
[[listed, areas]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[our listed areas]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

, there are many other papers/books that could be   


>> Tokens are: 
[,, papers, /, books,  ] 

>> PoS Tags are: 
[(',', 'PUNCT'), ('papers', 'NOUN'), ('/', 'SYM'), ('books', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[(',', 'punct'), ('papers', 'nmod'), ('/', 'punct'), ('books', 'attr'), (' ', 'attr')]

>> Bigrams: 
[[,, papers], [papers, /], [/, books], [books,  ]]

>> Trigrams: 
[[,, papers, /], [papers, /, books], [/, books,  ]]

>> Noun Phrases are: 
[many other papers/books]

>> Named Entities are: 
[] 


================================ Paragraph 108 =================================

more comprehensively help the interested readers.  

------------------- Sentence 1 -------------------

more comprehensively help the interested readers. 


>> Tokens are: 
[comprehensively, help, interested, readers, .] 

>> PoS Tags are: 
[('comprehensively', 'ADV'), ('help', 'VERB'), ('interested', 'ADJ'), ('readers', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('comprehensively', 'advmod'), ('help', 'ROOT'), ('interested', 'amod'), ('readers', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[comprehensively, help], [help, interested], [interested, readers], [readers, .]]

>> Trigrams: 
[[comprehensively, help, interested], [help, interested, readers], [interested, readers, .]]

>> Noun Phrases are: 
[the interested readers]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 109 =================================

In the next section, we will cover wide-ranging issues of  

------------------- Sentence 1 -------------------

In the next section, we will cover wide-ranging issues of   


>> Tokens are: 
[section, ,, cover, wide, -, ranging, issues,  ] 

>> PoS Tags are: 
[('section', 'NOUN'), (',', 'PUNCT'), ('cover', 'VERB'), ('wide', 'ADV'), ('-', 'PUNCT'), ('ranging', 'VERB'), ('issues', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('section', 'pobj'), (',', 'punct'), ('cover', 'ROOT'), ('wide', 'advmod'), ('-', 'punct'), ('ranging', 'amod'), ('issues', 'dobj'), (' ', 'pobj')]

>> Bigrams: 
[[section, ,], [,, cover], [cover, wide], [wide, -], [-, ranging], [ranging, issues], [issues,  ]]

>> Trigrams: 
[[section, ,, cover], [,, cover, wide], [cover, wide, -], [wide, -, ranging], [-, ranging, issues], [ranging, issues,  ]]

>> Noun Phrases are: 
[the next section, we, wide-ranging issues]

>> Named Entities are: 
[] 


================================ Paragraph 110 =================================

supervised machine learning such as selection of features and  

------------------- Sentence 1 -------------------

supervised machine learning such as selection of features and   


>> Tokens are: 
[supervised, machine, learning, selection, features,  ] 

>> PoS Tags are: 
[('supervised', 'ADJ'), ('machine', 'NOUN'), ('learning', 'VERB'), ('selection', 'NOUN'), ('features', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('supervised', 'amod'), ('machine', 'compound'), ('learning', 'ROOT'), ('selection', 'pobj'), ('features', 'pobj'), (' ', 'conj')]

>> Bigrams: 
[[supervised, machine], [machine, learning], [learning, selection], [selection, features], [features,  ]]

>> Trigrams: 
[[supervised, machine, learning], [machine, learning, selection], [learning, selection, features], [selection, features,  ]]

>> Noun Phrases are: 
[selection, features]

>> Named Entities are: 
[] 


================================ Paragraph 111 =================================

data pre-processing. Logical/Symbolic techniques are being  

------------------- Sentence 1 -------------------

data pre-processing. 


>> Tokens are: 
[data, pre, -, processing, .] 

>> PoS Tags are: 
[('data', 'NOUN'), ('pre', 'ADJ'), ('-', 'ADJ'), ('processing', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('data', 'nsubj'), ('pre', 'ROOT'), ('-', 'advmod'), ('processing', 'advmod'), ('.', 'punct')]

>> Bigrams: 
[[data, pre], [pre, -], [-, processing], [processing, .]]

>> Trigrams: 
[[data, pre, -], [pre, -, processing], [-, processing, .]]

>> Noun Phrases are: 
[data]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Logical/Symbolic techniques are being   


>> Tokens are: 
[Logical, /, Symbolic, techniques,  ] 

>> PoS Tags are: 
[('Logical', 'ADJ'), ('/', 'SYM'), ('Symbolic', 'PROPN'), ('techniques', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Logical', 'amod'), ('/', 'punct'), ('Symbolic', 'compound'), ('techniques', 'nsubj'), (' ', 'attr')]

>> Bigrams: 
[[Logical, /], [/, Symbolic], [Symbolic, techniques], [techniques,  ]]

>> Trigrams: 
[[Logical, /, Symbolic], [/, Symbolic, techniques], [Symbolic, techniques,  ]]

>> Noun Phrases are: 
[Logical/Symbolic techniques]

>> Named Entities are: 
[] 


================================ Paragraph 112 =================================

described in section 3, whereas statistical techniques for ML are  

------------------- Sentence 1 -------------------

described in section 3, whereas statistical techniques for ML are   


>> Tokens are: 
[described, section, 3, ,, statistical, techniques, ML,  ] 

>> PoS Tags are: 
[('described', 'VERB'), ('section', 'NOUN'), ('3', 'NUM'), (',', 'PUNCT'), ('statistical', 'ADJ'), ('techniques', 'NOUN'), ('ML', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('described', 'ROOT'), ('section', 'pobj'), ('3', 'nummod'), (',', 'punct'), ('statistical', 'amod'), ('techniques', 'nsubj'), ('ML', 'pobj'), (' ', 'nsubjpass')]

>> Bigrams: 
[[described, section], [section, 3], [3, ,], [,, statistical], [statistical, techniques], [techniques, ML], [ML,  ]]

>> Trigrams: 
[[described, section, 3], [section, 3, ,], [3, ,, statistical], [,, statistical, techniques], [statistical, techniques, ML], [techniques, ML,  ]]

>> Noun Phrases are: 
[section, statistical techniques, ML]

>> Named Entities are: 
[('3', 'CARDINAL'), ('ML', 'ORG')] 


================================ Paragraph 113 =================================

discussed in section 4. Section 5 will cover instance based  

------------------- Sentence 1 -------------------

discussed in section 4. 


>> Tokens are: 
[discussed, section, 4, .] 

>> PoS Tags are: 
[('discussed', 'VERB'), ('section', 'NOUN'), ('4', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('discussed', 'ROOT'), ('section', 'pobj'), ('4', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[discussed, section], [section, 4], [4, .]]

>> Trigrams: 
[[discussed, section, 4], [section, 4, .]]

>> Noun Phrases are: 
[section]

>> Named Entities are: 
[('section 4', 'LAW')] 

------------------- Sentence 2 -------------------

Section 5 will cover instance based   


>> Tokens are: 
[Section, 5, cover, instance, based,  ] 

>> PoS Tags are: 
[('Section', 'NOUN'), ('5', 'NUM'), ('cover', 'VERB'), ('instance', 'NOUN'), ('based', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Section', 'nsubj'), ('5', 'nummod'), ('cover', 'ROOT'), ('instance', 'dobj'), ('based', 'prep'), (' ', 'pobj')]

>> Bigrams: 
[[Section, 5], [5, cover], [cover, instance], [instance, based], [based,  ]]

>> Trigrams: 
[[Section, 5, cover], [5, cover, instance], [cover, instance, based], [instance, based,  ]]

>> Noun Phrases are: 
[Section, instance]

>> Named Entities are: 
[] 


================================ Paragraph 114 =================================

learners, SVM is discussed in section 6. The last section  

------------------- Sentence 1 -------------------

learners, SVM is discussed in section 6. 


>> Tokens are: 
[learners, ,, SVM, discussed, section, 6, .] 

>> PoS Tags are: 
[('learners', 'NOUN'), (',', 'PUNCT'), ('SVM', 'PROPN'), ('discussed', 'VERB'), ('section', 'NOUN'), ('6', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('learners', 'npadvmod'), (',', 'punct'), ('SVM', 'nsubjpass'), ('discussed', 'ROOT'), ('section', 'pobj'), ('6', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[learners, ,], [,, SVM], [SVM, discussed], [discussed, section], [section, 6], [6, .]]

>> Trigrams: 
[[learners, ,, SVM], [,, SVM, discussed], [SVM, discussed, section], [discussed, section, 6], [section, 6, .]]

>> Noun Phrases are: 
[SVM, section]

>> Named Entities are: 
[('SVM', 'ORG'), ('section 6', 'LAW')] 

------------------- Sentence 2 -------------------

The last section   


>> Tokens are: 
[section,  ] 

>> PoS Tags are: 
[('section', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('section', 'ROOT'), (' ', 'nummod')]

>> Bigrams: 
[[section,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[The last section]

>> Named Entities are: 
[] 


================================ Paragraph 115 =================================

concludes this work.  

------------------- Sentence 1 -------------------

concludes this work. 


>> Tokens are: 
[concludes, work, .] 

>> PoS Tags are: 
[('concludes', 'VERB'), ('work', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('concludes', 'ROOT'), ('work', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[concludes, work], [work, .]]

>> Trigrams: 
[[concludes, work, .]]

>> Noun Phrases are: 
[this work]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 116 =================================

2. ISSUES OF SUPERVISED LEARNING  ALGORITHMS  

------------------- Sentence 1 -------------------

2. 


>> Tokens are: 
[2, .] 

>> PoS Tags are: 
[('2', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('2', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[2, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('2', 'CARDINAL')] 

------------------- Sentence 2 -------------------

ISSUES OF SUPERVISED LEARNING   


>> Tokens are: 
[ISSUES, SUPERVISED, LEARNING,  ] 

>> PoS Tags are: 
[('ISSUES', 'NOUN'), ('SUPERVISED', 'ADJ'), ('LEARNING', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('ISSUES', 'ROOT'), ('SUPERVISED', 'amod'), ('LEARNING', 'pobj'), (' ', 'punct')]

>> Bigrams: 
[[ISSUES, SUPERVISED], [SUPERVISED, LEARNING], [LEARNING,  ]]

>> Trigrams: 
[[ISSUES, SUPERVISED, LEARNING], [SUPERVISED, LEARNING,  ]]

>> Noun Phrases are: 
[ISSUES, SUPERVISED LEARNING]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

ALGORITHMS   


>> Tokens are: 
[ALGORITHMS,  ] 

>> PoS Tags are: 
[('ALGORITHMS', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('ALGORITHMS', 'ROOT'), (' ', 'pobj')]

>> Bigrams: 
[[ALGORITHMS,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[ALGORITHMS]

>> Named Entities are: 
[] 


================================ Paragraph 117 =================================

Learning from the past experiences is an attribute of humans  

------------------- Sentence 1 -------------------

Learning from the past experiences is an attribute of humans   


>> Tokens are: 
[Learning, past, experiences, attribute, humans,  ] 

>> PoS Tags are: 
[('Learning', 'VERB'), ('past', 'ADJ'), ('experiences', 'NOUN'), ('attribute', 'NOUN'), ('humans', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Learning', 'csubj'), ('past', 'amod'), ('experiences', 'pobj'), ('attribute', 'attr'), ('humans', 'pobj'), (' ', 'punct')]

>> Bigrams: 
[[Learning, past], [past, experiences], [experiences, attribute], [attribute, humans], [humans,  ]]

>> Trigrams: 
[[Learning, past, experiences], [past, experiences, attribute], [experiences, attribute, humans], [attribute, humans,  ]]

>> Noun Phrases are: 
[the past experiences, an attribute, humans]

>> Named Entities are: 
[] 


================================ Paragraph 118 =================================

while the computers do not have this ability. In supervised or  

------------------- Sentence 1 -------------------

while the computers do not have this ability. 


>> Tokens are: 
[computers, ability, .] 

>> PoS Tags are: 
[('computers', 'NOUN'), ('ability', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('computers', 'nsubj'), ('ability', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[computers, ability], [ability, .]]

>> Trigrams: 
[[computers, ability, .]]

>> Noun Phrases are: 
[the computers, this ability]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

In supervised or   


>> Tokens are: 
[supervised,  ] 

>> PoS Tags are: 
[('supervised', 'ADJ'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('supervised', 'pobj'), (' ', 'conj')]

>> Bigrams: 
[[supervised,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 119 =================================

Inductive machine learning, our main goal is to learn a target  

------------------- Sentence 1 -------------------

Inductive machine learning, our main goal is to learn a target   


>> Tokens are: 
[Inductive, machine, learning, ,, main, goal, learn, target,  ] 

>> PoS Tags are: 
[('Inductive', 'ADJ'), ('machine', 'NOUN'), ('learning', 'NOUN'), (',', 'PUNCT'), ('main', 'ADJ'), ('goal', 'NOUN'), ('learn', 'VERB'), ('target', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Inductive', 'amod'), ('machine', 'compound'), ('learning', 'nsubj'), (',', 'punct'), ('main', 'amod'), ('goal', 'nsubj'), ('learn', 'xcomp'), ('target', 'dobj'), (' ', 'punct')]

>> Bigrams: 
[[Inductive, machine], [machine, learning], [learning, ,], [,, main], [main, goal], [goal, learn], [learn, target], [target,  ]]

>> Trigrams: 
[[Inductive, machine, learning], [machine, learning, ,], [learning, ,, main], [,, main, goal], [main, goal, learn], [goal, learn, target], [learn, target,  ]]

>> Noun Phrases are: 
[Inductive machine learning, our main goal, a target]

>> Named Entities are: 
[] 


================================ Paragraph 120 =================================

function that can be used to predict the values of a class. The  

------------------- Sentence 1 -------------------

function that can be used to predict the values of a class. 


>> Tokens are: 
[function, predict, values, class, .] 

>> PoS Tags are: 
[('function', 'NOUN'), ('predict', 'VERB'), ('values', 'NOUN'), ('class', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('function', 'ROOT'), ('predict', 'xcomp'), ('values', 'dobj'), ('class', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[function, predict], [predict, values], [values, class], [class, .]]

>> Trigrams: 
[[function, predict, values], [predict, values, class], [values, class, .]]

>> Noun Phrases are: 
[function, the values, a class]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

The   


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 121 =================================

process of applying supervised ML to a real-world problem is  

------------------- Sentence 1 -------------------

process of applying supervised ML to a real-world problem is   


>> Tokens are: 
[process, applying, supervised, ML, real, -, world, problem,  ] 

>> PoS Tags are: 
[('process', 'NOUN'), ('applying', 'VERB'), ('supervised', 'VERB'), ('ML', 'PROPN'), ('real', 'ADJ'), ('-', 'PUNCT'), ('world', 'NOUN'), ('problem', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('process', 'nsubj'), ('applying', 'pcomp'), ('supervised', 'amod'), ('ML', 'dobj'), ('real', 'amod'), ('-', 'punct'), ('world', 'compound'), ('problem', 'pobj'), (' ', 'attr')]

>> Bigrams: 
[[process, applying], [applying, supervised], [supervised, ML], [ML, real], [real, -], [-, world], [world, problem], [problem,  ]]

>> Trigrams: 
[[process, applying, supervised], [applying, supervised, ML], [supervised, ML, real], [ML, real, -], [real, -, world], [-, world, problem], [world, problem,  ]]

>> Noun Phrases are: 
[process, supervised ML, a real-world problem]

>> Named Entities are: 
[('ML', 'ORG')] 


================================ Paragraph 122 =================================

described in below figure.  

------------------- Sentence 1 -------------------

described in below figure. 


>> Tokens are: 
[described, figure, .] 

>> PoS Tags are: 
[('described', 'VERB'), ('figure', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('described', 'ROOT'), ('figure', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[described, figure], [figure, .]]

>> Trigrams: 
[[described, figure, .]]

>> Noun Phrases are: 
[figure]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 123 =================================

  

------------------- Sentence 1 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 124 =================================

Fig.2. Supervised Machine Learning Model  

------------------- Sentence 1 -------------------

Fig.2. 


>> Tokens are: 
[Fig.2, .] 

>> PoS Tags are: 
[('Fig.2', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Fig.2', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Fig.2, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Fig.2]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Supervised Machine Learning Model   


>> Tokens are: 
[Supervised, Machine, Learning, Model,  ] 

>> PoS Tags are: 
[('Supervised', 'ADJ'), ('Machine', 'PROPN'), ('Learning', 'PROPN'), ('Model', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Supervised', 'amod'), ('Machine', 'compound'), ('Learning', 'compound'), ('Model', 'ROOT'), (' ', 'nummod')]

>> Bigrams: 
[[Supervised, Machine], [Machine, Learning], [Learning, Model], [Model,  ]]

>> Trigrams: 
[[Supervised, Machine, Learning], [Machine, Learning, Model], [Learning, Model,  ]]

>> Noun Phrases are: 
[Supervised Machine Learning Model]

>> Named Entities are: 
[] 


================================ Paragraph 125 =================================

In supervised learning the first step is dealing with dataset. In  

------------------- Sentence 1 -------------------

In supervised learning the first step is dealing with dataset. 


>> Tokens are: 
[supervised, learning, step, dealing, dataset, .] 

>> PoS Tags are: 
[('supervised', 'ADJ'), ('learning', 'VERB'), ('step', 'NOUN'), ('dealing', 'VERB'), ('dataset', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('supervised', 'amod'), ('learning', 'pobj'), ('step', 'nsubj'), ('dealing', 'ROOT'), ('dataset', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[supervised, learning], [learning, step], [step, dealing], [dealing, dataset], [dataset, .]]

>> Trigrams: 
[[supervised, learning, step], [learning, step, dealing], [step, dealing, dataset], [dealing, dataset, .]]

>> Noun Phrases are: 
[the first step, dataset]

>> Named Entities are: 
[('first', 'ORDINAL')] 

------------------- Sentence 2 -------------------

In   


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'pobj')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 126 =================================

order to perform a better training on data set an appropriate  

------------------- Sentence 1 -------------------

order to perform a better training on data set an appropriate   


>> Tokens are: 
[order, perform, better, training, data, set, appropriate,  ] 

>> PoS Tags are: 
[('order', 'NOUN'), ('perform', 'VERB'), ('better', 'ADJ'), ('training', 'NOUN'), ('data', 'NOUN'), ('set', 'VERB'), ('appropriate', 'ADJ'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('order', 'nsubj'), ('perform', 'acl'), ('better', 'amod'), ('training', 'dobj'), ('data', 'pobj'), ('set', 'ROOT'), ('appropriate', 'amod'), (' ', 'dobj')]

>> Bigrams: 
[[order, perform], [perform, better], [better, training], [training, data], [data, set], [set, appropriate], [appropriate,  ]]

>> Trigrams: 
[[order, perform, better], [perform, better, training], [better, training, data], [training, data, set], [data, set, appropriate], [set, appropriate,  ]]

>> Noun Phrases are: 
[order, a better training, data]

>> Named Entities are: 
[] 


================================ Paragraph 127 =================================

expert could suggest better selection of features. If concerned  

------------------- Sentence 1 -------------------

expert could suggest better selection of features. 


>> Tokens are: 
[expert, suggest, better, selection, features, .] 

>> PoS Tags are: 
[('expert', 'NOUN'), ('suggest', 'VERB'), ('better', 'ADJ'), ('selection', 'NOUN'), ('features', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('expert', 'nsubj'), ('suggest', 'ROOT'), ('better', 'amod'), ('selection', 'dobj'), ('features', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[expert, suggest], [suggest, better], [better, selection], [selection, features], [features, .]]

>> Trigrams: 
[[expert, suggest, better], [suggest, better, selection], [better, selection, features], [selection, features, .]]

>> Noun Phrases are: 
[expert, better selection, features]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

If concerned   


>> Tokens are: 
[concerned,  ] 

>> PoS Tags are: 
[('concerned', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('concerned', 'amod'), (' ', 'ROOT')]

>> Bigrams: 
[[concerned,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 128 =================================

expert is not in reach, then the other approach is “brute-force”,  

------------------- Sentence 1 -------------------

expert is not in reach, then the other approach is “brute-force”,   


>> Tokens are: 
[expert, reach, ,, approach, “, brute, -, force, ”, ,,  ] 

>> PoS Tags are: 
[('expert', 'NOUN'), ('reach', 'NOUN'), (',', 'PUNCT'), ('approach', 'NOUN'), ('“', 'PUNCT'), ('brute', 'ADJ'), ('-', 'PUNCT'), ('force', 'NOUN'), ('”', 'PUNCT'), (',', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('expert', 'nsubj'), ('reach', 'pobj'), (',', 'punct'), ('approach', 'nsubj'), ('“', 'punct'), ('brute', 'amod'), ('-', 'punct'), ('force', 'attr'), ('”', 'punct'), (',', 'punct'), (' ', 'attr')]

>> Bigrams: 
[[expert, reach], [reach, ,], [,, approach], [approach, “], [“, brute], [brute, -], [-, force], [force, ”], [”, ,], [,,  ]]

>> Trigrams: 
[[expert, reach, ,], [reach, ,, approach], [,, approach, “], [approach, “, brute], [“, brute, -], [brute, -, force], [-, force, ”], [force, ”, ,], [”, ,,  ]]

>> Noun Phrases are: 
[expert, reach, the other approach, brute-force]

>> Named Entities are: 
[] 


================================ Paragraph 129 =================================

which means measuring everything available in the hope that the  

------------------- Sentence 1 -------------------

which means measuring everything available in the hope that 


>> Tokens are: 
[means, measuring, available, hope] 

>> PoS Tags are: 
[('means', 'VERB'), ('measuring', 'VERB'), ('available', 'ADJ'), ('hope', 'NOUN')] 

>> Dependency Tags are: 
[('means', 'ROOT'), ('measuring', 'xcomp'), ('available', 'amod'), ('hope', 'pobj')]

>> Bigrams: 
[[means, measuring], [measuring, available], [available, hope]]

>> Trigrams: 
[[means, measuring, available], [measuring, available, hope]]

>> Noun Phrases are: 
[everything, the hope]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

the   


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 130 =================================

right (informative, relevant) features can be isolated. However, a  

------------------- Sentence 1 -------------------

right (informative, relevant) features can be isolated. 


>> Tokens are: 
[right, (, informative, ,, relevant, ), features, isolated, .] 

>> PoS Tags are: 
[('right', 'INTJ'), ('(', 'PUNCT'), ('informative', 'ADJ'), (',', 'PUNCT'), ('relevant', 'ADJ'), (')', 'PUNCT'), ('features', 'NOUN'), ('isolated', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('right', 'advmod'), ('(', 'punct'), ('informative', 'amod'), (',', 'punct'), ('relevant', 'amod'), (')', 'punct'), ('features', 'nsubjpass'), ('isolated', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[right, (], [(, informative], [informative, ,], [,, relevant], [relevant, )], [), features], [features, isolated], [isolated, .]]

>> Trigrams: 
[[right, (, informative], [(, informative, ,], [informative, ,, relevant], [,, relevant, )], [relevant, ), features], [), features, isolated], [features, isolated, .]]

>> Noun Phrases are: 
[(informative, relevant) features]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

However, 


>> Tokens are: 
[,] 

>> PoS Tags are: 
[(',', 'PUNCT')] 

>> Dependency Tags are: 
[(',', 'punct')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

a   


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 131 =================================

dataset collected by the “brute-force” method is not directly  

------------------- Sentence 1 -------------------

dataset collected by the “brute-force” method is not directly   


>> Tokens are: 
[dataset, collected, “, brute, -, force, ”, method, directly,  ] 

>> PoS Tags are: 
[('dataset', 'NOUN'), ('collected', 'VERB'), ('“', 'PUNCT'), ('brute', 'ADJ'), ('-', 'PUNCT'), ('force', 'NOUN'), ('”', 'PUNCT'), ('method', 'NOUN'), ('directly', 'ADV'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('dataset', 'nsubj'), ('collected', 'acl'), ('“', 'punct'), ('brute', 'amod'), ('-', 'punct'), ('force', 'nmod'), ('”', 'punct'), ('method', 'pobj'), ('directly', 'advmod'), (' ', 'attr')]

>> Bigrams: 
[[dataset, collected], [collected, “], [“, brute], [brute, -], [-, force], [force, ”], [”, method], [method, directly], [directly,  ]]

>> Trigrams: 
[[dataset, collected, “], [collected, “, brute], [“, brute, -], [brute, -, force], [-, force, ”], [force, ”, method], [”, method, directly], [method, directly,  ]]

>> Noun Phrases are: 
[dataset, the “brute-force” method]

>> Named Entities are: 
[] 


================================ Paragraph 132 =================================

suitable for induction. Ultimately, in most cases it contains noise  

------------------- Sentence 1 -------------------

suitable for induction. 


>> Tokens are: 
[suitable, induction, .] 

>> PoS Tags are: 
[('suitable', 'ADJ'), ('induction', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('suitable', 'ROOT'), ('induction', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[suitable, induction], [induction, .]]

>> Trigrams: 
[[suitable, induction, .]]

>> Noun Phrases are: 
[induction]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Ultimately, in most cases it contains noise   


>> Tokens are: 
[Ultimately, ,, cases, contains, noise,  ] 

>> PoS Tags are: 
[('Ultimately', 'ADV'), (',', 'PUNCT'), ('cases', 'NOUN'), ('contains', 'VERB'), ('noise', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Ultimately', 'advmod'), (',', 'punct'), ('cases', 'pobj'), ('contains', 'ROOT'), ('noise', 'compound'), (' ', 'dobj')]

>> Bigrams: 
[[Ultimately, ,], [,, cases], [cases, contains], [contains, noise], [noise,  ]]

>> Trigrams: 
[[Ultimately, ,, cases], [,, cases, contains], [cases, contains, noise], [contains, noise,  ]]

>> Noun Phrases are: 
[most cases, it]

>> Named Entities are: 
[] 


================================ Paragraph 133 =================================

and missing feature values, and therefore requires significant  

------------------- Sentence 1 -------------------

and 


>> Tokens are: 
[] 

>> PoS Tags are: 
[] 

>> Dependency Tags are: 
[]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

missing feature values, and therefore requires significant   


>> Tokens are: 
[missing, feature, values, ,, requires, significant,  ] 

>> PoS Tags are: 
[('missing', 'VERB'), ('feature', 'NOUN'), ('values', 'NOUN'), (',', 'PUNCT'), ('requires', 'VERB'), ('significant', 'ADJ'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('missing', 'ROOT'), ('feature', 'compound'), ('values', 'dobj'), (',', 'punct'), ('requires', 'conj'), ('significant', 'amod'), (' ', 'dobj')]

>> Bigrams: 
[[missing, feature], [feature, values], [values, ,], [,, requires], [requires, significant], [significant,  ]]

>> Trigrams: 
[[missing, feature, values], [feature, values, ,], [values, ,, requires], [,, requires, significant], [requires, significant,  ]]

>> Noun Phrases are: 
[feature values]

>> Named Entities are: 
[] 


================================ Paragraph 134 =================================

pre-processing [1]. In the next step, data preparation and data  

------------------- Sentence 1 -------------------

pre-processing [1]. 


>> Tokens are: 
[pre, -, processing, [, 1, ], .] 

>> PoS Tags are: 
[('pre', 'ADJ'), ('-', 'ADJ'), ('processing', 'ADJ'), ('[', 'PUNCT'), ('1', 'NUM'), (']', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('pre', 'amod'), ('-', 'amod'), ('processing', 'amod'), ('[', 'punct'), ('1', 'ROOT'), (']', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[pre, -], [-, processing], [processing, [], [[, 1], [1, ]], [], .]]

>> Trigrams: 
[[pre, -, processing], [-, processing, [], [processing, [, 1], [[, 1, ]], [1, ], .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

In the next step, data preparation and data   


>> Tokens are: 
[step, ,, data, preparation, data,  ] 

>> PoS Tags are: 
[('step', 'NOUN'), (',', 'PUNCT'), ('data', 'NOUN'), ('preparation', 'NOUN'), ('data', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('step', 'pobj'), (',', 'punct'), ('data', 'compound'), ('preparation', 'ROOT'), ('data', 'conj'), (' ', 'nummod')]

>> Bigrams: 
[[step, ,], [,, data], [data, preparation], [preparation, data], [data,  ]]

>> Trigrams: 
[[step, ,, data], [,, data, preparation], [data, preparation, data], [preparation, data,  ]]

>> Noun Phrases are: 
[the next step, data]

>> Named Entities are: 
[] 


================================ Paragraph 135 =================================

preprocessing is a key function of researcher in Supervised  

------------------- Sentence 1 -------------------

preprocessing is a key function of researcher in Supervised   


>> Tokens are: 
[preprocessing, key, function, researcher, Supervised,  ] 

>> PoS Tags are: 
[('preprocessing', 'VERB'), ('key', 'ADJ'), ('function', 'NOUN'), ('researcher', 'NOUN'), ('Supervised', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('preprocessing', 'csubj'), ('key', 'amod'), ('function', 'attr'), ('researcher', 'pobj'), ('Supervised', 'amod'), (' ', 'pobj')]

>> Bigrams: 
[[preprocessing, key], [key, function], [function, researcher], [researcher, Supervised], [Supervised,  ]]

>> Trigrams: 
[[preprocessing, key, function], [key, function, researcher], [function, researcher, Supervised], [researcher, Supervised,  ]]

>> Noun Phrases are: 
[a key function, researcher]

>> Named Entities are: 
[] 


================================ Paragraph 136 =================================

Machine Learning (SML). A number of techniques have been  

------------------- Sentence 1 -------------------

Machine Learning (SML). 


>> Tokens are: 
[Machine, Learning, (, SML, ), .] 

>> PoS Tags are: 
[('Machine', 'PROPN'), ('Learning', 'PROPN'), ('(', 'PUNCT'), ('SML', 'PROPN'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Machine', 'compound'), ('Learning', 'ROOT'), ('(', 'punct'), ('SML', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Machine, Learning], [Learning, (], [(, SML], [SML, )], [), .]]

>> Trigrams: 
[[Machine, Learning, (], [Learning, (, SML], [(, SML, )], [SML, ), .]]

>> Noun Phrases are: 
[Machine Learning, (SML]

>> Named Entities are: 
[('SML', 'ORG')] 

------------------- Sentence 2 -------------------

A number of techniques have been   


>> Tokens are: 
[number, techniques,  ] 

>> PoS Tags are: 
[('number', 'NOUN'), ('techniques', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('number', 'nsubj'), ('techniques', 'pobj'), (' ', 'attr')]

>> Bigrams: 
[[number, techniques], [techniques,  ]]

>> Trigrams: 
[[number, techniques,  ]]

>> Noun Phrases are: 
[A number, techniques]

>> Named Entities are: 
[] 


================================ Paragraph 137 =================================

introduced by different researchers to deal with missing data  

------------------- Sentence 1 -------------------

introduced by different researchers to deal with missing data   


>> Tokens are: 
[introduced, different, researchers, deal, missing, data,  ] 

>> PoS Tags are: 
[('introduced', 'VERB'), ('different', 'ADJ'), ('researchers', 'NOUN'), ('deal', 'VERB'), ('missing', 'VERB'), ('data', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('introduced', 'ROOT'), ('different', 'amod'), ('researchers', 'pobj'), ('deal', 'advcl'), ('missing', 'amod'), ('data', 'pobj'), (' ', 'punct')]

>> Bigrams: 
[[introduced, different], [different, researchers], [researchers, deal], [deal, missing], [missing, data], [data,  ]]

>> Trigrams: 
[[introduced, different, researchers], [different, researchers, deal], [researchers, deal, missing], [deal, missing, data], [missing, data,  ]]

>> Noun Phrases are: 
[different researchers, missing data]

>> Named Entities are: 
[] 


================================ Paragraph 138 =================================

issue. Hodge & Austin [4] have conducted a survey of  

------------------- Sentence 1 -------------------

issue. 


>> Tokens are: 
[issue, .] 

>> PoS Tags are: 
[('issue', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('issue', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[issue, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[issue]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Hodge & Austin [4] have conducted a survey of   


>> Tokens are: 
[Hodge, &, Austin, [, 4, ], conducted, survey,  ] 

>> PoS Tags are: 
[('Hodge', 'PROPN'), ('&', 'CCONJ'), ('Austin', 'PROPN'), ('[', 'PUNCT'), ('4', 'NUM'), (']', 'PUNCT'), ('conducted', 'VERB'), ('survey', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Hodge', 'nsubj'), ('&', 'cc'), ('Austin', 'conj'), ('[', 'punct'), ('4', 'appos'), (']', 'punct'), ('conducted', 'ROOT'), ('survey', 'dobj'), (' ', 'pobj')]

>> Bigrams: 
[[Hodge, &], [&, Austin], [Austin, [], [[, 4], [4, ]], [], conducted], [conducted, survey], [survey,  ]]

>> Trigrams: 
[[Hodge, &, Austin], [&, Austin, [], [Austin, [, 4], [[, 4, ]], [4, ], conducted], [], conducted, survey], [conducted, survey,  ]]

>> Noun Phrases are: 
[Hodge, Austin, a survey]

>> Named Entities are: 
[('Hodge & Austin', 'ORG'), ('4', 'CARDINAL')] 


================================ Paragraph 139 =================================

contemporary techniques for outlier (noise) detection. Karanjit  

------------------- Sentence 1 -------------------

contemporary techniques for outlier (noise) detection. 


>> Tokens are: 
[contemporary, techniques, outlier, (, noise, ), detection, .] 

>> PoS Tags are: 
[('contemporary', 'ADJ'), ('techniques', 'NOUN'), ('outlier', 'ADJ'), ('(', 'PUNCT'), ('noise', 'NOUN'), (')', 'PUNCT'), ('detection', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('contemporary', 'amod'), ('techniques', 'ROOT'), ('outlier', 'amod'), ('(', 'punct'), ('noise', 'nmod'), (')', 'punct'), ('detection', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[contemporary, techniques], [techniques, outlier], [outlier, (], [(, noise], [noise, )], [), detection], [detection, .]]

>> Trigrams: 
[[contemporary, techniques, outlier], [techniques, outlier, (], [outlier, (, noise], [(, noise, )], [noise, ), detection], [), detection, .]]

>> Noun Phrases are: 
[contemporary techniques, outlier (noise) detection]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Karanjit   


>> Tokens are: 
[Karanjit,  ] 

>> PoS Tags are: 
[('Karanjit', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Karanjit', 'compound'), (' ', 'ROOT')]

>> Bigrams: 
[[Karanjit,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 140 =================================

& Shuchita [5] have also discussed different outlier detection  

------------------- Sentence 1 -------------------

& Shuchita [5] have also discussed different outlier detection   


>> Tokens are: 
[&, Shuchita, [, 5, ], discussed, different, outlier, detection,  ] 

>> PoS Tags are: 
[('&', 'CCONJ'), ('Shuchita', 'PROPN'), ('[', 'PUNCT'), ('5', 'NUM'), (']', 'PUNCT'), ('discussed', 'VERB'), ('different', 'ADJ'), ('outlier', 'ADJ'), ('detection', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('&', 'cc'), ('Shuchita', 'nsubj'), ('[', 'punct'), ('5', 'meta'), (']', 'punct'), ('discussed', 'ROOT'), ('different', 'amod'), ('outlier', 'amod'), ('detection', 'compound'), (' ', 'dobj')]

>> Bigrams: 
[[&, Shuchita], [Shuchita, [], [[, 5], [5, ]], [], discussed], [discussed, different], [different, outlier], [outlier, detection], [detection,  ]]

>> Trigrams: 
[[&, Shuchita, [], [Shuchita, [, 5], [[, 5, ]], [5, ], discussed], [], discussed, different], [discussed, different, outlier], [different, outlier, detection], [outlier, detection,  ]]

>> Noun Phrases are: 
[& Shuchita]

>> Named Entities are: 
[] 


================================ Paragraph 141 =================================

methods which are being used in different machine learning. H.  

------------------- Sentence 1 -------------------

methods which are being used in different machine learning. 


>> Tokens are: 
[methods, different, machine, learning, .] 

>> PoS Tags are: 
[('methods', 'NOUN'), ('different', 'ADJ'), ('machine', 'NOUN'), ('learning', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('methods', 'ROOT'), ('different', 'amod'), ('machine', 'compound'), ('learning', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[methods, different], [different, machine], [machine, learning], [learning, .]]

>> Trigrams: 
[[methods, different, machine], [different, machine, learning], [machine, learning, .]]

>> Noun Phrases are: 
[methods, different machine learning]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

H.   


>> Tokens are: 
[H.,  ] 

>> PoS Tags are: 
[('H.', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('H.', 'compound'), (' ', 'ROOT')]

>> Bigrams: 
[[H.,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 142 =================================

Jair [6] has done comparison on 6 different outlier detection  

------------------- Sentence 1 -------------------

Jair [6] has done comparison on 6 different outlier detection   


>> Tokens are: 
[Jair, [, 6, ], comparison, 6, different, outlier, detection,  ] 

>> PoS Tags are: 
[('Jair', 'PROPN'), ('[', 'PUNCT'), ('6', 'NUM'), (']', 'PUNCT'), ('comparison', 'NOUN'), ('6', 'NUM'), ('different', 'ADJ'), ('outlier', 'ADJ'), ('detection', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Jair', 'nsubj'), ('[', 'punct'), ('6', 'appos'), (']', 'punct'), ('comparison', 'dobj'), ('6', 'nummod'), ('different', 'amod'), ('outlier', 'amod'), ('detection', 'pobj'), (' ', 'punct')]

>> Bigrams: 
[[Jair, [], [[, 6], [6, ]], [], comparison], [comparison, 6], [6, different], [different, outlier], [outlier, detection], [detection,  ]]

>> Trigrams: 
[[Jair, [, 6], [[, 6, ]], [6, ], comparison], [], comparison, 6], [comparison, 6, different], [6, different, outlier], [different, outlier, detection], [outlier, detection,  ]]

>> Noun Phrases are: 
[Jair, comparison, 6 different outlier detection]

>> Named Entities are: 
[('6', 'CARDINAL'), ('6', 'CARDINAL')] 


================================ Paragraph 143 =================================

methods by performing experiment on benchmark datasets and a  

------------------- Sentence 1 -------------------

methods by performing experiment on benchmark datasets and a   


>> Tokens are: 
[methods, performing, experiment, benchmark, datasets,  ] 

>> PoS Tags are: 
[('methods', 'NOUN'), ('performing', 'VERB'), ('experiment', 'NOUN'), ('benchmark', 'ADJ'), ('datasets', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('methods', 'ROOT'), ('performing', 'pcomp'), ('experiment', 'dobj'), ('benchmark', 'amod'), ('datasets', 'pobj'), (' ', 'conj')]

>> Bigrams: 
[[methods, performing], [performing, experiment], [experiment, benchmark], [benchmark, datasets], [datasets,  ]]

>> Trigrams: 
[[methods, performing, experiment], [performing, experiment, benchmark], [experiment, benchmark, datasets], [benchmark, datasets,  ]]

>> Noun Phrases are: 
[methods, experiment, benchmark datasets]

>> Named Entities are: 
[] 


================================ Paragraph 144 =================================

synthetic astronomical domain.  

------------------- Sentence 1 -------------------

synthetic astronomical domain. 


>> Tokens are: 
[synthetic, astronomical, domain, .] 

>> PoS Tags are: 
[('synthetic', 'ADJ'), ('astronomical', 'ADJ'), ('domain', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('synthetic', 'amod'), ('astronomical', 'amod'), ('domain', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[synthetic, astronomical], [astronomical, domain], [domain, .]]

>> Trigrams: 
[[synthetic, astronomical, domain], [astronomical, domain, .]]

>> Noun Phrases are: 
[synthetic astronomical domain]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 145 =================================

2.1 ALGORITHM SELECTION  

------------------- Sentence 1 -------------------

2.1 ALGORITHM 


>> Tokens are: 
[2.1, ALGORITHM] 

>> PoS Tags are: 
[('2.1', 'NUM'), ('ALGORITHM', 'PROPN')] 

>> Dependency Tags are: 
[('2.1', 'nummod'), ('ALGORITHM', 'ROOT')]

>> Bigrams: 
[[2.1, ALGORITHM]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[2.1 ALGORITHM]

>> Named Entities are: 
[('2.1', 'CARDINAL')] 

------------------- Sentence 2 -------------------

SELECTION   


>> Tokens are: 
[SELECTION,  ] 

>> PoS Tags are: 
[('SELECTION', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('SELECTION', 'ROOT'), (' ', 'nummod')]

>> Bigrams: 
[[SELECTION,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[SELECTION]

>> Named Entities are: 
[] 


================================ Paragraph 146 =================================

The selection of algorithm for achieving good results is an  

------------------- Sentence 1 -------------------

The selection of algorithm for achieving good results is an   


>> Tokens are: 
[selection, algorithm, achieving, good, results,  ] 

>> PoS Tags are: 
[('selection', 'NOUN'), ('algorithm', 'NOUN'), ('achieving', 'VERB'), ('good', 'ADJ'), ('results', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('selection', 'nsubj'), ('algorithm', 'pobj'), ('achieving', 'pcomp'), ('good', 'amod'), ('results', 'dobj'), (' ', 'attr')]

>> Bigrams: 
[[selection, algorithm], [algorithm, achieving], [achieving, good], [good, results], [results,  ]]

>> Trigrams: 
[[selection, algorithm, achieving], [algorithm, achieving, good], [achieving, good, results], [good, results,  ]]

>> Noun Phrases are: 
[The selection, algorithm, good results]

>> Named Entities are: 
[] 


================================ Paragraph 147 =================================

important step. The algorithm evaluation is mostly judge by  

------------------- Sentence 1 -------------------

important step. 


>> Tokens are: 
[important, step, .] 

>> PoS Tags are: 
[('important', 'ADJ'), ('step', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('important', 'amod'), ('step', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[important, step], [step, .]]

>> Trigrams: 
[[important, step, .]]

>> Noun Phrases are: 
[important step]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

The algorithm evaluation is mostly judge by   


>> Tokens are: 
[algorithm, evaluation, judge,  ] 

>> PoS Tags are: 
[('algorithm', 'ADJ'), ('evaluation', 'NOUN'), ('judge', 'ADJ'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('algorithm', 'amod'), ('evaluation', 'nsubjpass'), ('judge', 'ROOT'), (' ', 'pobj')]

>> Bigrams: 
[[algorithm, evaluation], [evaluation, judge], [judge,  ]]

>> Trigrams: 
[[algorithm, evaluation, judge], [evaluation, judge,  ]]

>> Noun Phrases are: 
[The algorithm evaluation]

>> Named Entities are: 
[] 


================================ Paragraph 148 =================================

prediction accuracy. The classifier’s (Algorithm) evaluation is  

------------------- Sentence 1 -------------------

prediction accuracy. 


>> Tokens are: 
[prediction, accuracy, .] 

>> PoS Tags are: 
[('prediction', 'NOUN'), ('accuracy', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('prediction', 'compound'), ('accuracy', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[prediction, accuracy], [accuracy, .]]

>> Trigrams: 
[[prediction, accuracy, .]]

>> Noun Phrases are: 
[prediction accuracy]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

The classifier’s (Algorithm) evaluation is   


>> Tokens are: 
[classifier, (, Algorithm, ), evaluation,  ] 

>> PoS Tags are: 
[('classifier', 'NOUN'), ('(', 'PUNCT'), ('Algorithm', 'PROPN'), (')', 'PUNCT'), ('evaluation', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('classifier', 'poss'), ('(', 'punct'), ('Algorithm', 'nmod'), (')', 'punct'), ('evaluation', 'nsubj'), (' ', 'attr')]

>> Bigrams: 
[[classifier, (], [(, Algorithm], [Algorithm, )], [), evaluation], [evaluation,  ]]

>> Trigrams: 
[[classifier, (, Algorithm], [(, Algorithm, )], [Algorithm, ), evaluation], [), evaluation,  ]]

>> Noun Phrases are: 
[The classifier’s (Algorithm) evaluation]

>> Named Entities are: 
[] 


================================ Paragraph 149 =================================

most often based on prediction accuracy and it can be measured  

------------------- Sentence 1 -------------------

most often based on prediction accuracy and it can be measured   


>> Tokens are: 
[based, prediction, accuracy, measured,  ] 

>> PoS Tags are: 
[('based', 'VERB'), ('prediction', 'NOUN'), ('accuracy', 'NOUN'), ('measured', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('based', 'ROOT'), ('prediction', 'compound'), ('accuracy', 'pobj'), ('measured', 'conj'), (' ', 'punct')]

>> Bigrams: 
[[based, prediction], [prediction, accuracy], [accuracy, measured], [measured,  ]]

>> Trigrams: 
[[based, prediction, accuracy], [prediction, accuracy, measured], [accuracy, measured,  ]]

>> Noun Phrases are: 
[prediction accuracy, it]

>> Named Entities are: 
[] 


================================ Paragraph 150 =================================

by given below formula  

------------------- Sentence 1 -------------------

by given below formula   


>> Tokens are: 
[given, formula,  ] 

>> PoS Tags are: 
[('given', 'VERB'), ('formula', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('given', 'pcomp'), ('formula', 'pobj'), (' ', 'pobj')]

>> Bigrams: 
[[given, formula], [formula,  ]]

>> Trigrams: 
[[given, formula,  ]]

>> Noun Phrases are: 
[formula]

>> Named Entities are: 
[] 


================================ Paragraph 151 =================================

  cases test of number Total 

------------------- Sentence 1 -------------------

  cases test of number Total 


>> Tokens are: 
[  , cases, test, number, Total] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('cases', 'NOUN'), ('test', 'NOUN'), ('number', 'NOUN'), ('Total', 'PROPN')] 

>> Dependency Tags are: 
[('  ', 'nummod'), ('cases', 'compound'), ('test', 'ROOT'), ('number', 'pobj'), ('Total', 'npadvmod')]

>> Bigrams: 
[[  , cases], [cases, test], [test, number], [number, Total]]

>> Trigrams: 
[[  , cases, test], [cases, test, number], [test, number, Total]]

>> Noun Phrases are: 
[  cases test, number]

>> Named Entities are: 
[] 


================================ Paragraph 152 =================================

tionsclassifica Correct of Number Accuracy   (1)  

------------------- Sentence 1 -------------------

tionsclassifica Correct of Number Accuracy   (1) 


>> Tokens are: 
[tionsclassifica, Correct, Number, Accuracy, ,  , (, 1, )] 

>> PoS Tags are: 
[('tionsclassifica', 'ADJ'), ('Correct', 'PROPN'), ('Number', 'PROPN'), ('Accuracy', 'PROPN'), ('\uf03d', 'PROPN'), (' ', 'SPACE'), ('(', 'PUNCT'), ('1', 'NUM'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('tionsclassifica', 'ROOT'), ('Correct', 'pobj'), ('Number', 'compound'), ('Accuracy', 'pobj'), ('\uf03d', 'compound'), (' ', 'appos'), ('(', 'punct'), ('1', 'appos'), (')', 'punct')]

>> Bigrams: 
[[tionsclassifica, Correct], [Correct, Number], [Number, Accuracy], [Accuracy, ], [,  ], [ , (], [(, 1], [1, )]]

>> Trigrams: 
[[tionsclassifica, Correct, Number], [Correct, Number, Accuracy], [Number, Accuracy, ], [Accuracy, ,  ], [,  , (], [ , (, 1], [(, 1, )]]

>> Noun Phrases are: 
[Correct, Number Accuracy]

>> Named Entities are: 
[('1', 'CARDINAL')] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 153 =================================

There are number of methods which are being used by  

------------------- Sentence 1 -------------------

There are number of methods which are being used by   


>> Tokens are: 
[number, methods,  ] 

>> PoS Tags are: 
[('number', 'NOUN'), ('methods', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('number', 'attr'), ('methods', 'pobj'), (' ', 'pobj')]

>> Bigrams: 
[[number, methods], [methods,  ]]

>> Trigrams: 
[[number, methods,  ]]

>> Noun Phrases are: 
[number, methods]

>> Named Entities are: 
[] 


================================ Paragraph 154 =================================

different researchers to calculate classifier’s accuracy. Some  

------------------- Sentence 1 -------------------

different researchers to calculate classifier’s accuracy. 


>> Tokens are: 
[different, researchers, calculate, classifier, accuracy, .] 

>> PoS Tags are: 
[('different', 'ADJ'), ('researchers', 'NOUN'), ('calculate', 'VERB'), ('classifier', 'NOUN'), ('accuracy', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('different', 'amod'), ('researchers', 'nsubj'), ('calculate', 'ROOT'), ('classifier', 'poss'), ('accuracy', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[different, researchers], [researchers, calculate], [calculate, classifier], [classifier, accuracy], [accuracy, .]]

>> Trigrams: 
[[different, researchers, calculate], [researchers, calculate, classifier], [calculate, classifier, accuracy], [classifier, accuracy, .]]

>> Noun Phrases are: 
[different researchers, classifier’s accuracy]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Some   


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 155 =================================

researcher’s splits the training set in such a way that, two-thirds  

------------------- Sentence 1 -------------------

researcher’s splits the training set in such a way that, two-thirds   


>> Tokens are: 
[researcher, splits, training, set, way, ,, -, thirds,  ] 

>> PoS Tags are: 
[('researcher', 'NOUN'), ('splits', 'VERB'), ('training', 'NOUN'), ('set', 'VERB'), ('way', 'NOUN'), (',', 'PUNCT'), ('-', 'PUNCT'), ('thirds', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('researcher', 'nsubj'), ('splits', 'ROOT'), ('training', 'dobj'), ('set', 'acl'), ('way', 'pobj'), (',', 'punct'), ('-', 'punct'), ('thirds', 'npadvmod'), (' ', 'dobj')]

>> Bigrams: 
[[researcher, splits], [splits, training], [training, set], [set, way], [way, ,], [,, -], [-, thirds], [thirds,  ]]

>> Trigrams: 
[[researcher, splits, training], [splits, training, set], [training, set, way], [set, way, ,], [way, ,, -], [,, -, thirds], [-, thirds,  ]]

>> Noun Phrases are: 
[researcher, the training, such a way]

>> Named Entities are: 
[('two-thirds', 'CARDINAL')] 


================================ Paragraph 156 =================================

retain for training and the other third for estimating performance.  

------------------- Sentence 1 -------------------

retain for training and the other third for estimating performance. 


>> Tokens are: 
[retain, training, estimating, performance, .] 

>> PoS Tags are: 
[('retain', 'VERB'), ('training', 'NOUN'), ('estimating', 'VERB'), ('performance', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('retain', 'ROOT'), ('training', 'pobj'), ('estimating', 'pcomp'), ('performance', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[retain, training], [training, estimating], [estimating, performance], [performance, .]]

>> Trigrams: 
[[retain, training, estimating], [training, estimating, performance], [estimating, performance, .]]

>> Noun Phrases are: 
[training, the other third, performance]

>> Named Entities are: 
[('third', 'ORDINAL')] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 157 =================================

Cross-Validation (CV) or Rotation Estimation is another  

------------------- Sentence 1 -------------------

Cross-Validation (CV) or Rotation Estimation is another   


>> Tokens are: 
[Cross, -, Validation, (, CV, ), Rotation, Estimation,  ] 

>> PoS Tags are: 
[('Cross', 'ADJ'), ('-', 'PROPN'), ('Validation', 'PROPN'), ('(', 'PUNCT'), ('CV', 'PROPN'), (')', 'PUNCT'), ('Rotation', 'PROPN'), ('Estimation', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Cross', 'nsubj'), ('-', 'nsubj'), ('Validation', 'nsubj'), ('(', 'punct'), ('CV', 'appos'), (')', 'punct'), ('Rotation', 'compound'), ('Estimation', 'conj'), (' ', 'punct')]

>> Bigrams: 
[[Cross, -], [-, Validation], [Validation, (], [(, CV], [CV, )], [), Rotation], [Rotation, Estimation], [Estimation,  ]]

>> Trigrams: 
[[Cross, -, Validation], [-, Validation, (], [Validation, (, CV], [(, CV, )], [CV, ), Rotation], [), Rotation, Estimation], [Rotation, Estimation,  ]]

>> Noun Phrases are: 
[-, Validation, (CV, Rotation Estimation]

>> Named Entities are: 
[('Cross-Validation', 'ORG'), ('Rotation Estimation', 'ORG')] 


================================ Paragraph 158 =================================

approach. CV provides a way to make a better use of the  

------------------- Sentence 1 -------------------

approach. 


>> Tokens are: 
[approach, .] 

>> PoS Tags are: 
[('approach', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('approach', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[approach, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[approach]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

CV provides a way to make a better use of the   


>> Tokens are: 
[CV, provides, way, better, use,  ] 

>> PoS Tags are: 
[('CV', 'NOUN'), ('provides', 'VERB'), ('way', 'NOUN'), ('better', 'ADJ'), ('use', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('CV', 'nsubj'), ('provides', 'ROOT'), ('way', 'dobj'), ('better', 'amod'), ('use', 'dobj'), (' ', 'pobj')]

>> Bigrams: 
[[CV, provides], [provides, way], [way, better], [better, use], [use,  ]]

>> Trigrams: 
[[CV, provides, way], [provides, way, better], [way, better, use], [better, use,  ]]

>> Noun Phrases are: 
[CV, a way, a better use]

>> Named Entities are: 
[('CV', 'ORG')] 


================================ Paragraph 159 =================================

available sample. In k-fold cross-validation scheme, we divide  

------------------- Sentence 1 -------------------

available sample. 


>> Tokens are: 
[available, sample, .] 

>> PoS Tags are: 
[('available', 'ADJ'), ('sample', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('available', 'amod'), ('sample', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[available, sample], [sample, .]]

>> Trigrams: 
[[available, sample, .]]

>> Noun Phrases are: 
[available sample]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

In k-fold cross-validation scheme, we divide   


>> Tokens are: 
[k, -, fold, cross, -, validation, scheme, ,, divide,  ] 

>> PoS Tags are: 
[('k', 'DET'), ('-', 'ADJ'), ('fold', 'ADJ'), ('cross', 'ADJ'), ('-', 'ADJ'), ('validation', 'ADJ'), ('scheme', 'NOUN'), (',', 'PUNCT'), ('divide', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('k', 'det'), ('-', 'amod'), ('fold', 'amod'), ('cross', 'amod'), ('-', 'amod'), ('validation', 'amod'), ('scheme', 'pobj'), (',', 'punct'), ('divide', 'ROOT'), (' ', 'dobj')]

>> Bigrams: 
[[k, -], [-, fold], [fold, cross], [cross, -], [-, validation], [validation, scheme], [scheme, ,], [,, divide], [divide,  ]]

>> Trigrams: 
[[k, -, fold], [-, fold, cross], [fold, cross, -], [cross, -, validation], [-, validation, scheme], [validation, scheme, ,], [scheme, ,, divide], [,, divide,  ]]

>> Noun Phrases are: 
[k-fold cross-validation scheme, we]

>> Named Entities are: 
[] 


================================ Paragraph 160 =================================

the learning sample into k disjoint subsets of the same size, i.e.-  

------------------- Sentence 1 -------------------

the learning sample into k disjoint subsets of the same size, i.e.-   


>> Tokens are: 
[learning, sample, k, disjoint, subsets, size, ,, i.e.-,  ] 

>> PoS Tags are: 
[('learning', 'VERB'), ('sample', 'NOUN'), ('k', 'PUNCT'), ('disjoint', 'NOUN'), ('subsets', 'NOUN'), ('size', 'NOUN'), (',', 'PUNCT'), ('i.e.-', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('learning', 'amod'), ('sample', 'nsubj'), ('k', 'pobj'), ('disjoint', 'compound'), ('subsets', 'pobj'), ('size', 'pobj'), (',', 'punct'), ('i.e.-', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[learning, sample], [sample, k], [k, disjoint], [disjoint, subsets], [subsets, size], [size, ,], [,, i.e.-], [i.e.-,  ]]

>> Trigrams: 
[[learning, sample, k], [sample, k, disjoint], [k, disjoint, subsets], [disjoint, subsets, size], [subsets, size, ,], [size, ,, i.e.-], [,, i.e.-,  ]]

>> Noun Phrases are: 
[the learning sample, disjoint subsets, the same size]

>> Named Entities are: 
[] 


================================ Paragraph 161 =================================

 klslslsls  211  (2)  

------------------- Sentence 1 -------------------

 klslslsls  211  (2)   


>> Tokens are: 
[ , klslslsls, , 211,  , (, 2, ),  ] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('klslslsls', 'NOUN'), ('\uf0c8\uf0c8\uf03d', 'NUM'), ('211', 'NUM'), (' ', 'SPACE'), ('(', 'PUNCT'), ('2', 'X'), (')', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'compound'), ('klslslsls', 'ROOT'), ('\uf0c8\uf0c8\uf03d', 'appos'), ('211', 'nummod'), (' ', 'appos'), ('(', 'punct'), ('2', 'appos'), (')', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[ , klslslsls], [klslslsls, ], [, 211], [211,  ], [ , (], [(, 2], [2, )], [),  ]]

>> Trigrams: 
[[ , klslslsls, ], [klslslsls, , 211], [, 211,  ], [211,  , (], [ , (, 2], [(, 2, )], [2, ),  ]]

>> Noun Phrases are: 
[ klslslsls]

>> Named Entities are: 
[('2', 'CARDINAL')] 


================================ Paragraph 162 =================================

A model is then inferred by the learning algorithm from each  

------------------- Sentence 1 -------------------

A model is then inferred by the learning algorithm from each   


>> Tokens are: 
[model, inferred, learning, algorithm,  ] 

>> PoS Tags are: 
[('model', 'NOUN'), ('inferred', 'VERB'), ('learning', 'NOUN'), ('algorithm', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('model', 'nsubjpass'), ('inferred', 'ROOT'), ('learning', 'amod'), ('algorithm', 'pobj'), (' ', 'pobj')]

>> Bigrams: 
[[model, inferred], [inferred, learning], [learning, algorithm], [algorithm,  ]]

>> Trigrams: 
[[model, inferred, learning], [inferred, learning, algorithm], [learning, algorithm,  ]]

>> Noun Phrases are: 
[A model, the learning algorithm]

>> Named Entities are: 
[] 


================================ Paragraph 163 =================================

sample ls\ls, i = 1,..,k and its performance is determined on the  

------------------- Sentence 1 -------------------

sample ls\ls, i = 1,..,k and its performance is determined on the   


>> Tokens are: 
[sample, ls\ls, ,, =, 1,, .., ,k, performance, determined,  ] 

>> PoS Tags are: 
[('sample', 'NOUN'), ('ls\\ls', 'NOUN'), (',', 'PUNCT'), ('=', 'X'), ('1,', 'ADJ'), ('..', 'PUNCT'), (',k', 'PUNCT'), ('performance', 'NOUN'), ('determined', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('sample', 'compound'), ('ls\\ls', 'dep'), (',', 'punct'), ('=', 'punct'), ('1,', 'ROOT'), ('..', 'punct'), (',k', 'punct'), ('performance', 'nsubjpass'), ('determined', 'conj'), (' ', 'pobj')]

>> Bigrams: 
[[sample, ls\ls], [ls\ls, ,], [,, =], [=, 1,], [1,, ..], [.., ,k], [,k, performance], [performance, determined], [determined,  ]]

>> Trigrams: 
[[sample, ls\ls, ,], [ls\ls, ,, =], [,, =, 1,], [=, 1,, ..], [1,, .., ,k], [.., ,k, performance], [,k, performance, determined], [performance, determined,  ]]

>> Noun Phrases are: 
[i, its performance]

>> Named Entities are: 
[] 


================================ Paragraph 164 =================================

held out sample lsi. Final performance is computed as the  

------------------- Sentence 1 -------------------

held out sample lsi. 


>> Tokens are: 
[held, sample, lsi, .] 

>> PoS Tags are: 
[('held', 'VERB'), ('sample', 'NOUN'), ('lsi', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('held', 'ROOT'), ('sample', 'compound'), ('lsi', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[held, sample], [sample, lsi], [lsi, .]]

>> Trigrams: 
[[held, sample, lsi], [sample, lsi, .]]

>> Noun Phrases are: 
[sample lsi]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Final performance is computed as the   


>> Tokens are: 
[Final, performance, computed,  ] 

>> PoS Tags are: 
[('Final', 'ADJ'), ('performance', 'NOUN'), ('computed', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Final', 'amod'), ('performance', 'nsubjpass'), ('computed', 'ROOT'), (' ', 'pobj')]

>> Bigrams: 
[[Final, performance], [performance, computed], [computed,  ]]

>> Trigrams: 
[[Final, performance, computed], [performance, computed,  ]]

>> Noun Phrases are: 
[Final performance]

>> Named Entities are: 
[] 


================================ Paragraph 165 =================================

average performance over all these models. Notice that when k is  

------------------- Sentence 1 -------------------

average performance over all these models. 


>> Tokens are: 
[average, performance, models, .] 

>> PoS Tags are: 
[('average', 'ADJ'), ('performance', 'NOUN'), ('models', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('average', 'amod'), ('performance', 'ROOT'), ('models', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[average, performance], [performance, models], [models, .]]

>> Trigrams: 
[[average, performance, models], [performance, models, .]]

>> Noun Phrases are: 
[average performance, all these models]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Notice that 


>> Tokens are: 
[Notice] 

>> PoS Tags are: 
[('Notice', 'NOUN')] 

>> Dependency Tags are: 
[('Notice', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Notice]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

when k is   


>> Tokens are: 
[k,  ] 

>> PoS Tags are: 
[('k', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('k', 'nsubj'), (' ', 'attr')]

>> Bigrams: 
[[k,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[k]

>> Named Entities are: 
[] 


================================ Paragraph 166 =================================

equal to the number of objects in the learning sample, this  

------------------- Sentence 1 -------------------

equal to the number of objects in the learning sample, 


>> Tokens are: 
[equal, number, objects, learning, sample, ,] 

>> PoS Tags are: 
[('equal', 'ADJ'), ('number', 'NOUN'), ('objects', 'NOUN'), ('learning', 'VERB'), ('sample', 'NOUN'), (',', 'PUNCT')] 

>> Dependency Tags are: 
[('equal', 'ROOT'), ('number', 'pobj'), ('objects', 'pobj'), ('learning', 'amod'), ('sample', 'pobj'), (',', 'punct')]

>> Bigrams: 
[[equal, number], [number, objects], [objects, learning], [learning, sample], [sample, ,]]

>> Trigrams: 
[[equal, number, objects], [number, objects, learning], [objects, learning, sample], [learning, sample, ,]]

>> Noun Phrases are: 
[the number, objects, the learning sample]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

this   


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 167 =================================

method is called leave-one-out. Typically, smaller values of k  

------------------- Sentence 1 -------------------

method is called leave-one-out. 


>> Tokens are: 
[method, called, leave, -, -, .] 

>> PoS Tags are: 
[('method', 'NOUN'), ('called', 'VERB'), ('leave', 'VERB'), ('-', 'PUNCT'), ('-', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('method', 'nsubjpass'), ('called', 'ROOT'), ('leave', 'compound'), ('-', 'punct'), ('-', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[method, called], [called, leave], [leave, -], [-, -], [-, .]]

>> Trigrams: 
[[method, called, leave], [called, leave, -], [leave, -, -], [-, -, .]]

>> Noun Phrases are: 
[method, leave-one-out]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Typically, 


>> Tokens are: 
[Typically, ,] 

>> PoS Tags are: 
[('Typically', 'ADV'), (',', 'PUNCT')] 

>> Dependency Tags are: 
[('Typically', 'ROOT'), (',', 'punct')]

>> Bigrams: 
[[Typically, ,]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

smaller values of k   


>> Tokens are: 
[smaller, values, k,  ] 

>> PoS Tags are: 
[('smaller', 'ADJ'), ('values', 'NOUN'), ('k', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('smaller', 'amod'), ('values', 'ROOT'), ('k', 'pobj'), (' ', 'pobj')]

>> Bigrams: 
[[smaller, values], [values, k], [k,  ]]

>> Trigrams: 
[[smaller, values, k], [values, k,  ]]

>> Noun Phrases are: 
[smaller values]

>> Named Entities are: 
[] 


================================ Paragraph 168 =================================

(10 or 20) are however preferred for computational reasons [7].  

------------------- Sentence 1 -------------------

(10 or 20) are however preferred for computational reasons [7]. 


>> Tokens are: 
[(, 10, 20, ), preferred, computational, reasons, [, 7, ], .] 

>> PoS Tags are: 
[('(', 'PUNCT'), ('10', 'NUM'), ('20', 'NUM'), (')', 'PUNCT'), ('preferred', 'ADJ'), ('computational', 'ADJ'), ('reasons', 'NOUN'), ('[', 'PUNCT'), ('7', 'NUM'), (']', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('(', 'punct'), ('10', 'nsubj'), ('20', 'conj'), (')', 'punct'), ('preferred', 'acomp'), ('computational', 'amod'), ('reasons', 'pobj'), ('[', 'punct'), ('7', 'dep'), (']', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[(, 10], [10, 20], [20, )], [), preferred], [preferred, computational], [computational, reasons], [reasons, [], [[, 7], [7, ]], [], .]]

>> Trigrams: 
[[(, 10, 20], [10, 20, )], [20, ), preferred], [), preferred, computational], [preferred, computational, reasons], [computational, reasons, [], [reasons, [, 7], [[, 7, ]], [7, ], .]]

>> Noun Phrases are: 
[computational reasons]

>> Named Entities are: 
[('10 or 20', 'CARDINAL'), ('7', 'CARDINAL')] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 169 =================================

The comparison between supervised ML methods can be done  

------------------- Sentence 1 -------------------

The comparison between supervised ML methods can be done   


>> Tokens are: 
[comparison, supervised, ML, methods,  ] 

>> PoS Tags are: 
[('comparison', 'NOUN'), ('supervised', 'VERB'), ('ML', 'PROPN'), ('methods', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('comparison', 'nsubjpass'), ('supervised', 'amod'), ('ML', 'compound'), ('methods', 'pobj'), (' ', 'punct')]

>> Bigrams: 
[[comparison, supervised], [supervised, ML], [ML, methods], [methods,  ]]

>> Trigrams: 
[[comparison, supervised, ML], [supervised, ML, methods], [ML, methods,  ]]

>> Noun Phrases are: 
[The comparison, supervised ML methods]

>> Named Entities are: 
[] 


================================ Paragraph 170 =================================

through to perform statistical comparisons of the accuracies of  

------------------- Sentence 1 -------------------

through to perform statistical comparisons of the accuracies of   


>> Tokens are: 
[perform, statistical, comparisons, accuracies,  ] 

>> PoS Tags are: 
[('perform', 'VERB'), ('statistical', 'ADJ'), ('comparisons', 'NOUN'), ('accuracies', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('perform', 'pcomp'), ('statistical', 'amod'), ('comparisons', 'dobj'), ('accuracies', 'pobj'), (' ', 'pobj')]

>> Bigrams: 
[[perform, statistical], [statistical, comparisons], [comparisons, accuracies], [accuracies,  ]]

>> Trigrams: 
[[perform, statistical, comparisons], [statistical, comparisons, accuracies], [comparisons, accuracies,  ]]

>> Noun Phrases are: 
[statistical comparisons, the accuracies]

>> Named Entities are: 
[] 


================================ Paragraph 171 =================================

trained classifiers on specific datasets. For doing this we can run  

------------------- Sentence 1 -------------------

trained classifiers on specific datasets. 


>> Tokens are: 
[trained, classifiers, specific, datasets, .] 

>> PoS Tags are: 
[('trained', 'VERB'), ('classifiers', 'NOUN'), ('specific', 'ADJ'), ('datasets', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('trained', 'amod'), ('classifiers', 'ROOT'), ('specific', 'amod'), ('datasets', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[trained, classifiers], [classifiers, specific], [specific, datasets], [datasets, .]]

>> Trigrams: 
[[trained, classifiers, specific], [classifiers, specific, datasets], [specific, datasets, .]]

>> Noun Phrases are: 
[trained classifiers, specific datasets]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

For doing this we can run   


>> Tokens are: 
[run,  ] 

>> PoS Tags are: 
[('run', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('run', 'ROOT'), (' ', 'dobj')]

>> Bigrams: 
[[run,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[we]

>> Named Entities are: 
[] 


================================ Paragraph 172 =================================

two different learning algorithms on samples of training set of size  

------------------- Sentence 1 -------------------

two different learning algorithms on samples of training set of size   


>> Tokens are: 
[different, learning, algorithms, samples, training, set, size,  ] 

>> PoS Tags are: 
[('different', 'ADJ'), ('learning', 'VERB'), ('algorithms', 'NOUN'), ('samples', 'NOUN'), ('training', 'NOUN'), ('set', 'NOUN'), ('size', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('different', 'amod'), ('learning', 'amod'), ('algorithms', 'ROOT'), ('samples', 'pobj'), ('training', 'compound'), ('set', 'pobj'), ('size', 'pobj'), (' ', 'punct')]

>> Bigrams: 
[[different, learning], [learning, algorithms], [algorithms, samples], [samples, training], [training, set], [set, size], [size,  ]]

>> Trigrams: 
[[different, learning, algorithms], [learning, algorithms, samples], [algorithms, samples, training], [samples, training, set], [training, set, size], [set, size,  ]]

>> Noun Phrases are: 
[two different learning algorithms, samples, training set, size]

>> Named Entities are: 
[('two', 'CARDINAL')] 


================================ Paragraph 173 =================================

N, estimate the difference in accuracy for each pair of classifiers  

------------------- Sentence 1 -------------------

N, estimate the difference in accuracy for each pair of classifiers   


>> Tokens are: 
[N, ,, estimate, difference, accuracy, pair, classifiers,  ] 

>> PoS Tags are: 
[('N', 'PROPN'), (',', 'PUNCT'), ('estimate', 'VERB'), ('difference', 'NOUN'), ('accuracy', 'NOUN'), ('pair', 'NOUN'), ('classifiers', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('N', 'dep'), (',', 'punct'), ('estimate', 'ROOT'), ('difference', 'dobj'), ('accuracy', 'pobj'), ('pair', 'pobj'), ('classifiers', 'pobj'), (' ', 'punct')]

>> Bigrams: 
[[N, ,], [,, estimate], [estimate, difference], [difference, accuracy], [accuracy, pair], [pair, classifiers], [classifiers,  ]]

>> Trigrams: 
[[N, ,, estimate], [,, estimate, difference], [estimate, difference, accuracy], [difference, accuracy, pair], [accuracy, pair, classifiers], [pair, classifiers,  ]]

>> Noun Phrases are: 
[the difference, accuracy, each pair, classifiers]

>> Named Entities are: 
[] 


================================ Paragraph 174 =================================

on a large test set[1]. For classification of data, a good number of  

------------------- Sentence 1 -------------------

on a large test set[1]. 


>> Tokens are: 
[large, test, set[1, ], .] 

>> PoS Tags are: 
[('large', 'ADJ'), ('test', 'NOUN'), ('set[1', 'NOUN'), (']', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('large', 'amod'), ('test', 'compound'), ('set[1', 'pobj'), (']', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[large, test], [test, set[1], [set[1, ]], [], .]]

>> Trigrams: 
[[large, test, set[1], [test, set[1, ]], [set[1, ], .]]

>> Noun Phrases are: 
[a large test set[1]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

For classification of data, a good number of   


>> Tokens are: 
[classification, data, ,, good, number,  ] 

>> PoS Tags are: 
[('classification', 'NOUN'), ('data', 'NOUN'), (',', 'PUNCT'), ('good', 'ADJ'), ('number', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('classification', 'pobj'), ('data', 'pobj'), (',', 'punct'), ('good', 'amod'), ('number', 'pobj'), (' ', 'pobj')]

>> Bigrams: 
[[classification, data], [data, ,], [,, good], [good, number], [number,  ]]

>> Trigrams: 
[[classification, data, ,], [data, ,, good], [,, good, number], [good, number,  ]]

>> Noun Phrases are: 
[classification, data, a good number]

>> Named Entities are: 
[] 


================================ Paragraph 175 =================================

techniques have been developed by researchers, such as logical  

------------------- Sentence 1 -------------------

techniques have been developed by researchers, such as logical   


>> Tokens are: 
[techniques, developed, researchers, ,, logical,  ] 

>> PoS Tags are: 
[('techniques', 'NOUN'), ('developed', 'VERB'), ('researchers', 'NOUN'), (',', 'PUNCT'), ('logical', 'ADJ'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('techniques', 'nsubjpass'), ('developed', 'ROOT'), ('researchers', 'pobj'), (',', 'punct'), ('logical', 'amod'), (' ', 'pobj')]

>> Bigrams: 
[[techniques, developed], [developed, researchers], [researchers, ,], [,, logical], [logical,  ]]

>> Trigrams: 
[[techniques, developed, researchers], [developed, researchers, ,], [researchers, ,, logical], [,, logical,  ]]

>> Noun Phrases are: 
[techniques, researchers]

>> Named Entities are: 
[] 


================================ Paragraph 176 =================================

statistics based techniques. In next sections, we will precisely  

------------------- Sentence 1 -------------------

statistics based techniques. 


>> Tokens are: 
[statistics, based, techniques, .] 

>> PoS Tags are: 
[('statistics', 'NOUN'), ('based', 'VERB'), ('techniques', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('statistics', 'npadvmod'), ('based', 'amod'), ('techniques', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[statistics, based], [based, techniques], [techniques, .]]

>> Trigrams: 
[[statistics, based, techniques], [based, techniques, .]]

>> Noun Phrases are: 
[statistics based techniques]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

In next sections, we will precisely   


>> Tokens are: 
[sections, ,, precisely,  ] 

>> PoS Tags are: 
[('sections', 'NOUN'), (',', 'PUNCT'), ('precisely', 'ADV'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('sections', 'pobj'), (',', 'punct'), ('precisely', 'advmod'), (' ', 'punct')]

>> Bigrams: 
[[sections, ,], [,, precisely], [precisely,  ]]

>> Trigrams: 
[[sections, ,, precisely], [,, precisely,  ]]

>> Noun Phrases are: 
[next sections, we]

>> Named Entities are: 
[] 


================================ Paragraph 177 =================================

discuss the most important supervised machine learning  

------------------- Sentence 1 -------------------

discuss the most important supervised machine learning   


>> Tokens are: 
[discuss, important, supervised, machine, learning,  ] 

>> PoS Tags are: 
[('discuss', 'VERB'), ('important', 'ADJ'), ('supervised', 'ADJ'), ('machine', 'NOUN'), ('learning', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('discuss', 'ROOT'), ('important', 'amod'), ('supervised', 'amod'), ('machine', 'dobj'), ('learning', 'acl'), (' ', 'dobj')]

>> Bigrams: 
[[discuss, important], [important, supervised], [supervised, machine], [machine, learning], [learning,  ]]

>> Trigrams: 
[[discuss, important, supervised], [important, supervised, machine], [supervised, machine, learning], [machine, learning,  ]]

>> Noun Phrases are: 
[the most important supervised machine]

>> Named Entities are: 
[] 


================================ Paragraph 178 =================================

techniques, starting with logical techniques [1].  

------------------- Sentence 1 -------------------

techniques, starting with logical techniques [1]. 


>> Tokens are: 
[techniques, ,, starting, logical, techniques, [, 1, ], .] 

>> PoS Tags are: 
[('techniques', 'NOUN'), (',', 'PUNCT'), ('starting', 'VERB'), ('logical', 'ADJ'), ('techniques', 'NOUN'), ('[', 'PUNCT'), ('1', 'NUM'), (']', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('techniques', 'ROOT'), (',', 'punct'), ('starting', 'acl'), ('logical', 'amod'), ('techniques', 'pobj'), ('[', 'punct'), ('1', 'appos'), (']', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[techniques, ,], [,, starting], [starting, logical], [logical, techniques], [techniques, [], [[, 1], [1, ]], [], .]]

>> Trigrams: 
[[techniques, ,, starting], [,, starting, logical], [starting, logical, techniques], [logical, techniques, [], [techniques, [, 1], [[, 1, ]], [1, ], .]]

>> Noun Phrases are: 
[techniques, logical techniques]

>> Named Entities are: 
[('1', 'CARDINAL')] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 179 =================================

3. LOGIC BASED ALGORITHMS   

------------------- Sentence 1 -------------------

3. 


>> Tokens are: 
[3, .] 

>> PoS Tags are: 
[('3', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('3', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[3, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('3', 'CARDINAL')] 

------------------- Sentence 2 -------------------

LOGIC BASED 


>> Tokens are: 
[LOGIC, BASED] 

>> PoS Tags are: 
[('LOGIC', 'PROPN'), ('BASED', 'PROPN')] 

>> Dependency Tags are: 
[('LOGIC', 'compound'), ('BASED', 'ROOT')]

>> Bigrams: 
[[LOGIC, BASED]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[LOGIC BASED]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

ALGORITHMS 


>> Tokens are: 
[ALGORITHMS] 

>> PoS Tags are: 
[('ALGORITHMS', 'PROPN')] 

>> Dependency Tags are: 
[('ALGORITHMS', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[ALGORITHMS]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 180 =================================

In this section we will discuss two logical (symbolic)  

------------------- Sentence 1 -------------------

In this section we will discuss two logical (symbolic)   


>> Tokens are: 
[section, discuss, logical, (, symbolic, ),  ] 

>> PoS Tags are: 
[('section', 'NOUN'), ('discuss', 'VERB'), ('logical', 'ADJ'), ('(', 'PUNCT'), ('symbolic', 'ADJ'), (')', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('section', 'pobj'), ('discuss', 'ROOT'), ('logical', 'amod'), ('(', 'punct'), ('symbolic', 'dobj'), (')', 'punct'), (' ', 'dobj')]

>> Bigrams: 
[[section, discuss], [discuss, logical], [logical, (], [(, symbolic], [symbolic, )], [),  ]]

>> Trigrams: 
[[section, discuss, logical], [discuss, logical, (], [logical, (, symbolic], [(, symbolic, )], [symbolic, ),  ]]

>> Noun Phrases are: 
[this section, we]

>> Named Entities are: 
[('two', 'CARDINAL')] 


================================ Paragraph 181 =================================

learning methods: decision trees and rule-based classifiers.  

------------------- Sentence 1 -------------------

learning methods: decision trees and rule-based classifiers. 


>> Tokens are: 
[learning, methods, :, decision, trees, rule, -, based, classifiers, .] 

>> PoS Tags are: 
[('learning', 'VERB'), ('methods', 'NOUN'), (':', 'PUNCT'), ('decision', 'NOUN'), ('trees', 'NOUN'), ('rule', 'NOUN'), ('-', 'PUNCT'), ('based', 'VERB'), ('classifiers', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('learning', 'ROOT'), ('methods', 'dobj'), (':', 'punct'), ('decision', 'compound'), ('trees', 'conj'), ('rule', 'npadvmod'), ('-', 'punct'), ('based', 'amod'), ('classifiers', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[learning, methods], [methods, :], [:, decision], [decision, trees], [trees, rule], [rule, -], [-, based], [based, classifiers], [classifiers, .]]

>> Trigrams: 
[[learning, methods, :], [methods, :, decision], [:, decision, trees], [decision, trees, rule], [trees, rule, -], [rule, -, based], [-, based, classifiers], [based, classifiers, .]]

>> Noun Phrases are: 
[methods, decision trees, rule-based classifiers]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 182 =================================

3.1 DECISION TREES  

------------------- Sentence 1 -------------------

3.1 DECISION TREES   


>> Tokens are: 
[3.1, DECISION, TREES,  ] 

>> PoS Tags are: 
[('3.1', 'NUM'), ('DECISION', 'NOUN'), ('TREES', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('3.1', 'nummod'), ('DECISION', 'compound'), ('TREES', 'compound'), (' ', 'ROOT')]

>> Bigrams: 
[[3.1, DECISION], [DECISION, TREES], [TREES,  ]]

>> Trigrams: 
[[3.1, DECISION, TREES], [DECISION, TREES,  ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('3.1', 'CARDINAL')] 


================================ Paragraph 183 =================================

In machine learning domain the Decision Tree Induction [8,  

------------------- Sentence 1 -------------------

In machine learning domain the Decision Tree Induction [8,   


>> Tokens are: 
[machine, learning, domain, Decision, Tree, Induction, [, 8, ,,  ] 

>> PoS Tags are: 
[('machine', 'NOUN'), ('learning', 'NOUN'), ('domain', 'VERB'), ('Decision', 'PROPN'), ('Tree', 'PROPN'), ('Induction', 'PROPN'), ('[', 'PUNCT'), ('8', 'NUM'), (',', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('machine', 'compound'), ('learning', 'nsubj'), ('domain', 'pcomp'), ('Decision', 'compound'), ('Tree', 'compound'), ('Induction', 'dobj'), ('[', 'punct'), ('8', 'ROOT'), (',', 'punct'), (' ', 'nsubj')]

>> Bigrams: 
[[machine, learning], [learning, domain], [domain, Decision], [Decision, Tree], [Tree, Induction], [Induction, [], [[, 8], [8, ,], [,,  ]]

>> Trigrams: 
[[machine, learning, domain], [learning, domain, Decision], [domain, Decision, Tree], [Decision, Tree, Induction], [Tree, Induction, [], [Induction, [, 8], [[, 8, ,], [8, ,,  ]]

>> Noun Phrases are: 
[machine learning, the Decision Tree Induction]

>> Named Entities are: 
[('the Decision Tree Induction [8', 'LAW')] 


================================ Paragraph 184 =================================

9] is currently one of the most important supervised learning  

------------------- Sentence 1 -------------------

9] is currently one of the most important supervised learning   


>> Tokens are: 
[9, ], currently, important, supervised, learning,  ] 

>> PoS Tags are: 
[('9', 'NUM'), (']', 'PUNCT'), ('currently', 'ADV'), ('important', 'ADJ'), ('supervised', 'ADJ'), ('learning', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('9', 'nsubj'), (']', 'punct'), ('currently', 'advmod'), ('important', 'amod'), ('supervised', 'amod'), ('learning', 'pobj'), (' ', 'punct')]

>> Bigrams: 
[[9, ]], [], currently], [currently, important], [important, supervised], [supervised, learning], [learning,  ]]

>> Trigrams: 
[[9, ], currently], [], currently, important], [currently, important, supervised], [important, supervised, learning], [supervised, learning,  ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('9', 'CARDINAL')] 


================================ Paragraph 185 =================================

algorithms. In Artificial Intelligence (AI) field, Quinlan has  

------------------- Sentence 1 -------------------

algorithms. 


>> Tokens are: 
[algorithms, .] 

>> PoS Tags are: 
[('algorithms', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('algorithms', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[algorithms, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[algorithms]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

In Artificial Intelligence (AI) field, Quinlan has   


>> Tokens are: 
[Artificial, Intelligence, (, AI, ), field, ,, Quinlan,  ] 

>> PoS Tags are: 
[('Artificial', 'PROPN'), ('Intelligence', 'PROPN'), ('(', 'PUNCT'), ('AI', 'PROPN'), (')', 'PUNCT'), ('field', 'NOUN'), (',', 'PUNCT'), ('Quinlan', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Artificial', 'nmod'), ('Intelligence', 'nmod'), ('(', 'punct'), ('AI', 'nmod'), (')', 'punct'), ('field', 'pobj'), (',', 'punct'), ('Quinlan', 'nsubj'), (' ', 'dobj')]

>> Bigrams: 
[[Artificial, Intelligence], [Intelligence, (], [(, AI], [AI, )], [), field], [field, ,], [,, Quinlan], [Quinlan,  ]]

>> Trigrams: 
[[Artificial, Intelligence, (], [Intelligence, (, AI], [(, AI, )], [AI, ), field], [), field, ,], [field, ,, Quinlan], [,, Quinlan,  ]]

>> Noun Phrases are: 
[Artificial Intelligence (AI) field, Quinlan]

>> Named Entities are: 
[('Artificial Intelligence', 'ORG'), ('Quinlan', 'PERSON')] 


================================ Paragraph 186 =================================

contributed through his ID3 and C4.5 algorithms. C4.5 is one of  

------------------- Sentence 1 -------------------

contributed through his ID3 and C4.5 algorithms. 


>> Tokens are: 
[contributed, ID3, C4.5, algorithms, .] 

>> PoS Tags are: 
[('contributed', 'VERB'), ('ID3', 'PROPN'), ('C4.5', 'PROPN'), ('algorithms', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('contributed', 'ROOT'), ('ID3', 'pobj'), ('C4.5', 'conj'), ('algorithms', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[contributed, ID3], [ID3, C4.5], [C4.5, algorithms], [algorithms, .]]

>> Trigrams: 
[[contributed, ID3, C4.5], [ID3, C4.5, algorithms], [C4.5, algorithms, .]]

>> Noun Phrases are: 
[his ID3, C4.5, algorithms]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

C4.5 is one of   


>> Tokens are: 
[C4.5,  ] 

>> PoS Tags are: 
[('C4.5', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('C4.5', 'nsubj'), (' ', 'pobj')]

>> Bigrams: 
[[C4.5,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[C4.5]

>> Named Entities are: 
[] 


================================ Paragraph 187 =================================

the most popular and the efficient method in decision tree-based  

------------------- Sentence 1 -------------------

the most popular and the efficient method in decision tree-based   


>> Tokens are: 
[popular, efficient, method, decision, tree, -, based,  ] 

>> PoS Tags are: 
[('popular', 'ADJ'), ('efficient', 'ADJ'), ('method', 'NOUN'), ('decision', 'NOUN'), ('tree', 'NOUN'), ('-', 'PUNCT'), ('based', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('popular', 'ROOT'), ('efficient', 'amod'), ('method', 'conj'), ('decision', 'compound'), ('tree', 'npadvmod'), ('-', 'punct'), ('based', 'amod'), (' ', 'pobj')]

>> Bigrams: 
[[popular, efficient], [efficient, method], [method, decision], [decision, tree], [tree, -], [-, based], [based,  ]]

>> Trigrams: 
[[popular, efficient, method], [efficient, method, decision], [method, decision, tree], [decision, tree, -], [tree, -, based], [-, based,  ]]

>> Noun Phrases are: 
[the efficient method]

>> Named Entities are: 
[] 


================================ Paragraph 188 =================================

approach. Here C4.5 algorithm creates a tree model by using  

------------------- Sentence 1 -------------------

approach. 


>> Tokens are: 
[approach, .] 

>> PoS Tags are: 
[('approach', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('approach', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[approach, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[approach]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Here C4.5 algorithm creates a tree model by using   


>> Tokens are: 
[C4.5, algorithm, creates, tree, model,  ] 

>> PoS Tags are: 
[('C4.5', 'PROPN'), ('algorithm', 'NOUN'), ('creates', 'VERB'), ('tree', 'NOUN'), ('model', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('C4.5', 'compound'), ('algorithm', 'nsubj'), ('creates', 'ROOT'), ('tree', 'compound'), ('model', 'dobj'), (' ', 'dobj')]

>> Bigrams: 
[[C4.5, algorithm], [algorithm, creates], [creates, tree], [tree, model], [model,  ]]

>> Trigrams: 
[[C4.5, algorithm, creates], [algorithm, creates, tree], [creates, tree, model], [tree, model,  ]]

>> Noun Phrases are: 
[C4.5 algorithm, a tree model]

>> Named Entities are: 
[] 


================================ Paragraph 189 =================================

values of only one attribute at a time [10]. According to authors  

------------------- Sentence 1 -------------------

values of only one attribute at a time [10]. 


>> Tokens are: 
[values, attribute, time, [, 10, ], .] 

>> PoS Tags are: 
[('values', 'NOUN'), ('attribute', 'NOUN'), ('time', 'NOUN'), ('[', 'PUNCT'), ('10', 'NUM'), (']', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('values', 'ROOT'), ('attribute', 'pobj'), ('time', 'pobj'), ('[', 'punct'), ('10', 'appos'), (']', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[values, attribute], [attribute, time], [time, [], [[, 10], [10, ]], [], .]]

>> Trigrams: 
[[values, attribute, time], [attribute, time, [], [time, [, 10], [[, 10, ]], [10, ], .]]

>> Noun Phrases are: 
[values, only one attribute, a time]

>> Named Entities are: 
[('only one', 'CARDINAL'), ('10', 'CARDINAL')] 

------------------- Sentence 2 -------------------

According to authors   


>> Tokens are: 
[According, authors,  ] 

>> PoS Tags are: 
[('According', 'VERB'), ('authors', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('According', 'ROOT'), ('authors', 'pobj'), (' ', 'pobj')]

>> Bigrams: 
[[According, authors], [authors,  ]]

>> Trigrams: 
[[According, authors,  ]]

>> Noun Phrases are: 
[authors]

>> Named Entities are: 
[] 


================================ Paragraph 190 =================================

[7], the decision tree induction, which was initially designed to  

------------------- Sentence 1 -------------------

[7], 


>> Tokens are: 
[[, 7, ], ,] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('7', 'NUM'), (']', 'PUNCT'), (',', 'PUNCT')] 

>> Dependency Tags are: 
[('[', 'ROOT'), ('7', 'meta'), (']', 'punct'), (',', 'punct')]

>> Bigrams: 
[[[, 7], [7, ]], [], ,]]

>> Trigrams: 
[[[, 7, ]], [7, ], ,]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('7', 'CARDINAL')] 

------------------- Sentence 2 -------------------

the decision tree induction, which was initially designed to   


>> Tokens are: 
[decision, tree, induction, ,, initially, designed,  ] 

>> PoS Tags are: 
[('decision', 'NOUN'), ('tree', 'NOUN'), ('induction', 'NOUN'), (',', 'PUNCT'), ('initially', 'ADV'), ('designed', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('decision', 'compound'), ('tree', 'compound'), ('induction', 'ROOT'), (',', 'punct'), ('initially', 'advmod'), ('designed', 'relcl'), (' ', 'pobj')]

>> Bigrams: 
[[decision, tree], [tree, induction], [induction, ,], [,, initially], [initially, designed], [designed,  ]]

>> Trigrams: 
[[decision, tree, induction], [tree, induction, ,], [induction, ,, initially], [,, initially, designed], [initially, designed,  ]]

>> Noun Phrases are: 
[the decision tree induction]

>> Named Entities are: 
[] 


================================ Paragraph 191 =================================

solve classification problems, has been extended to deal with  

------------------- Sentence 1 -------------------

solve classification problems, has been extended to deal with   


>> Tokens are: 
[solve, classification, problems, ,, extended, deal,  ] 

>> PoS Tags are: 
[('solve', 'VERB'), ('classification', 'NOUN'), ('problems', 'NOUN'), (',', 'PUNCT'), ('extended', 'VERB'), ('deal', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('solve', 'advcl'), ('classification', 'compound'), ('problems', 'dobj'), (',', 'punct'), ('extended', 'ROOT'), ('deal', 'advcl'), (' ', 'pobj')]

>> Bigrams: 
[[solve, classification], [classification, problems], [problems, ,], [,, extended], [extended, deal], [deal,  ]]

>> Trigrams: 
[[solve, classification, problems], [classification, problems, ,], [problems, ,, extended], [,, extended, deal], [extended, deal,  ]]

>> Noun Phrases are: 
[classification problems]

>> Named Entities are: 
[] 


================================ Paragraph 192 =================================

single or multi-dimensional regression. The major benefits of  

------------------- Sentence 1 -------------------

single or multi-dimensional regression. 


>> Tokens are: 
[single, multi, -, dimensional, regression, .] 

>> PoS Tags are: 
[('single', 'ADJ'), ('multi', 'ADJ'), ('-', 'ADJ'), ('dimensional', 'ADJ'), ('regression', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('single', 'amod'), ('multi', 'conj'), ('-', 'amod'), ('dimensional', 'amod'), ('regression', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[single, multi], [multi, -], [-, dimensional], [dimensional, regression], [regression, .]]

>> Trigrams: 
[[single, multi, -], [multi, -, dimensional], [-, dimensional, regression], [dimensional, regression, .]]

>> Noun Phrases are: 
[single or multi-dimensional regression]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

The major benefits of   


>> Tokens are: 
[major, benefits,  ] 

>> PoS Tags are: 
[('major', 'ADJ'), ('benefits', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('major', 'amod'), ('benefits', 'ROOT'), (' ', 'pobj')]

>> Bigrams: 
[[major, benefits], [benefits,  ]]

>> Trigrams: 
[[major, benefits,  ]]

>> Noun Phrases are: 
[The major benefits]

>> Named Entities are: 
[] 


================================ Paragraph 193 =================================

decision trees are i) produce intensive results, ii) easy to  

------------------- Sentence 1 -------------------

decision trees are i) produce intensive results, ii) easy to   


>> Tokens are: 
[decision, trees, ), produce, intensive, results, ,, ii, ), easy,  ] 

>> PoS Tags are: 
[('decision', 'NOUN'), ('trees', 'NOUN'), (')', 'PUNCT'), ('produce', 'VERB'), ('intensive', 'ADJ'), ('results', 'NOUN'), (',', 'PUNCT'), ('ii', 'NOUN'), (')', 'PUNCT'), ('easy', 'ADJ'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('decision', 'compound'), ('trees', 'nsubj'), (')', 'punct'), ('produce', 'dep'), ('intensive', 'amod'), ('results', 'dobj'), (',', 'punct'), ('ii', 'npadvmod'), (')', 'punct'), ('easy', 'conj'), (' ', 'pobj')]

>> Bigrams: 
[[decision, trees], [trees, )], [), produce], [produce, intensive], [intensive, results], [results, ,], [,, ii], [ii, )], [), easy], [easy,  ]]

>> Trigrams: 
[[decision, trees, )], [trees, ), produce], [), produce, intensive], [produce, intensive, results], [intensive, results, ,], [results, ,, ii], [,, ii, )], [ii, ), easy], [), easy,  ]]

>> Noun Phrases are: 
[decision trees, intensive results]

>> Named Entities are: 
[] 


================================ Paragraph 194 =================================

understand, iii) and holds well-organized knowledge structure  

------------------- Sentence 1 -------------------

understand, iii) and holds well-organized knowledge structure   


>> Tokens are: 
[understand, ,, iii, ), holds, -, organized, knowledge, structure,  ] 

>> PoS Tags are: 
[('understand', 'VERB'), (',', 'PUNCT'), ('iii', 'X'), (')', 'PUNCT'), ('holds', 'VERB'), ('-', 'PUNCT'), ('organized', 'VERB'), ('knowledge', 'NOUN'), ('structure', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('understand', 'ROOT'), (',', 'punct'), ('iii', 'npadvmod'), (')', 'punct'), ('holds', 'conj'), ('-', 'punct'), ('organized', 'amod'), ('knowledge', 'compound'), ('structure', 'dobj'), (' ', 'punct')]

>> Bigrams: 
[[understand, ,], [,, iii], [iii, )], [), holds], [holds, -], [-, organized], [organized, knowledge], [knowledge, structure], [structure,  ]]

>> Trigrams: 
[[understand, ,, iii], [,, iii, )], [iii, ), holds], [), holds, -], [holds, -, organized], [-, organized, knowledge], [organized, knowledge, structure], [knowledge, structure,  ]]

>> Noun Phrases are: 
[well-organized knowledge structure]

>> Named Entities are: 
[] 


================================ Paragraph 195 =================================

[28].  

------------------- Sentence 1 -------------------

[28]. 


>> Tokens are: 
[[, 28, ], .] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('28', 'NUM'), (']', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('[', 'punct'), ('28', 'ROOT'), (']', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[[, 28], [28, ]], [], .]]

>> Trigrams: 
[[[, 28, ]], [28, ], .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('28', 'CARDINAL')] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 196 =================================

Decision Trees (DT) are trees that classify instances by  

------------------- Sentence 1 -------------------

Decision Trees (DT) are trees that classify instances by   


>> Tokens are: 
[Decision, Trees, (, DT, ), trees, classify, instances,  ] 

>> PoS Tags are: 
[('Decision', 'NOUN'), ('Trees', 'PROPN'), ('(', 'PUNCT'), ('DT', 'PROPN'), (')', 'PUNCT'), ('trees', 'NOUN'), ('classify', 'VERB'), ('instances', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Decision', 'compound'), ('Trees', 'nsubj'), ('(', 'punct'), ('DT', 'appos'), (')', 'punct'), ('trees', 'attr'), ('classify', 'relcl'), ('instances', 'dobj'), (' ', 'pobj')]

>> Bigrams: 
[[Decision, Trees], [Trees, (], [(, DT], [DT, )], [), trees], [trees, classify], [classify, instances], [instances,  ]]

>> Trigrams: 
[[Decision, Trees, (], [Trees, (, DT], [(, DT, )], [DT, ), trees], [), trees, classify], [trees, classify, instances], [classify, instances,  ]]

>> Noun Phrases are: 
[Decision Trees, DT, trees, instances]

>> Named Entities are: 
[] 


================================ Paragraph 197 =================================

sorting them based on feature values, where each node in a  

------------------- Sentence 1 -------------------

sorting them based on feature values, 


>> Tokens are: 
[sorting, based, feature, values, ,] 

>> PoS Tags are: 
[('sorting', 'VERB'), ('based', 'VERB'), ('feature', 'NOUN'), ('values', 'NOUN'), (',', 'PUNCT')] 

>> Dependency Tags are: 
[('sorting', 'ROOT'), ('based', 'prep'), ('feature', 'compound'), ('values', 'pobj'), (',', 'punct')]

>> Bigrams: 
[[sorting, based], [based, feature], [feature, values], [values, ,]]

>> Trigrams: 
[[sorting, based, feature], [based, feature, values], [feature, values, ,]]

>> Noun Phrases are: 
[them, feature values]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

where each node in a   


>> Tokens are: 
[node,  ] 

>> PoS Tags are: 
[('node', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('node', 'ROOT'), (' ', 'pobj')]

>> Bigrams: 
[[node,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[where each node]

>> Named Entities are: 
[] 


================================ Paragraph 198 =================================

decision tree represents a feature in an instance to be classified,  

------------------- Sentence 1 -------------------

decision tree represents a feature in an instance to be classified, 


>> Tokens are: 
[decision, tree, represents, feature, instance, classified, ,] 

>> PoS Tags are: 
[('decision', 'NOUN'), ('tree', 'NOUN'), ('represents', 'VERB'), ('feature', 'NOUN'), ('instance', 'NOUN'), ('classified', 'VERB'), (',', 'PUNCT')] 

>> Dependency Tags are: 
[('decision', 'compound'), ('tree', 'nsubj'), ('represents', 'ROOT'), ('feature', 'dobj'), ('instance', 'pobj'), ('classified', 'advcl'), (',', 'punct')]

>> Bigrams: 
[[decision, tree], [tree, represents], [represents, feature], [feature, instance], [instance, classified], [classified, ,]]

>> Trigrams: 
[[decision, tree, represents], [tree, represents, feature], [represents, feature, instance], [feature, instance, classified], [instance, classified, ,]]

>> Noun Phrases are: 
[decision tree, a feature, an instance]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 199 =================================

and each branch represents a value that the node can assume [1].  

------------------- Sentence 1 -------------------

and each branch represents a value that the node can assume [1]. 


>> Tokens are: 
[branch, represents, value, node, assume, [, 1, ], .] 

>> PoS Tags are: 
[('branch', 'NOUN'), ('represents', 'VERB'), ('value', 'NOUN'), ('node', 'NOUN'), ('assume', 'VERB'), ('[', 'PUNCT'), ('1', 'NUM'), (']', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('branch', 'nsubj'), ('represents', 'ROOT'), ('value', 'dobj'), ('node', 'nsubj'), ('assume', 'relcl'), ('[', 'punct'), ('1', 'dobj'), (']', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[branch, represents], [represents, value], [value, node], [node, assume], [assume, [], [[, 1], [1, ]], [], .]]

>> Trigrams: 
[[branch, represents, value], [represents, value, node], [value, node, assume], [node, assume, [], [assume, [, 1], [[, 1, ]], [1, ], .]]

>> Noun Phrases are: 
[each branch, a value, the node]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 200 =================================

Instances are classified starting at the root node and sorted based  

------------------- Sentence 1 -------------------

Instances are classified starting at the root node and sorted based   


>> Tokens are: 
[Instances, classified, starting, root, node, sorted, based,  ] 

>> PoS Tags are: 
[('Instances', 'NOUN'), ('classified', 'VERB'), ('starting', 'VERB'), ('root', 'NOUN'), ('node', 'NOUN'), ('sorted', 'VERB'), ('based', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Instances', 'nsubjpass'), ('classified', 'ROOT'), ('starting', 'prep'), ('root', 'compound'), ('node', 'pobj'), ('sorted', 'conj'), ('based', 'amod'), (' ', 'punct')]

>> Bigrams: 
[[Instances, classified], [classified, starting], [starting, root], [root, node], [node, sorted], [sorted, based], [based,  ]]

>> Trigrams: 
[[Instances, classified, starting], [classified, starting, root], [starting, root, node], [root, node, sorted], [node, sorted, based], [sorted, based,  ]]

>> Noun Phrases are: 
[Instances, the root node]

>> Named Entities are: 
[] 


================================ Paragraph 201 =================================

on their feature values. 

------------------- Sentence 1 -------------------

on their feature values. 


>> Tokens are: 
[feature, values, .] 

>> PoS Tags are: 
[('feature', 'NOUN'), ('values', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('feature', 'compound'), ('values', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[feature, values], [values, .]]

>> Trigrams: 
[[feature, values, .]]

>> Noun Phrases are: 
[their feature values]

>> Named Entities are: 
[] 


================================ Paragraph 202 =================================

IQBAL MUHAMMAD AND ZHU YAN: SUPERVISED MACHINE LEARNING APPROACHES: A SURVEY  

------------------- Sentence 1 -------------------

IQBAL MUHAMMAD AND ZHU YAN: SUPERVISED MACHINE 


>> Tokens are: 
[IQBAL, MUHAMMAD, ZHU, YAN, :, SUPERVISED, MACHINE] 

>> PoS Tags are: 
[('IQBAL', 'NOUN'), ('MUHAMMAD', 'PROPN'), ('ZHU', 'PROPN'), ('YAN', 'PROPN'), (':', 'PUNCT'), ('SUPERVISED', 'ADJ'), ('MACHINE', 'NOUN')] 

>> Dependency Tags are: 
[('IQBAL', 'compound'), ('MUHAMMAD', 'ROOT'), ('ZHU', 'compound'), ('YAN', 'conj'), (':', 'punct'), ('SUPERVISED', 'amod'), ('MACHINE', 'punct')]

>> Bigrams: 
[[IQBAL, MUHAMMAD], [MUHAMMAD, ZHU], [ZHU, YAN], [YAN, :], [:, SUPERVISED], [SUPERVISED, MACHINE]]

>> Trigrams: 
[[IQBAL, MUHAMMAD, ZHU], [MUHAMMAD, ZHU, YAN], [ZHU, YAN, :], [YAN, :, SUPERVISED], [:, SUPERVISED, MACHINE]]

>> Noun Phrases are: 
[IQBAL MUHAMMAD, ZHU YAN]

>> Named Entities are: 
[('IQBAL', 'PERSON'), ('ZHU YAN', 'PERSON')] 

------------------- Sentence 2 -------------------

LEARNING APPROACHES: 


>> Tokens are: 
[LEARNING, APPROACHES, :] 

>> PoS Tags are: 
[('LEARNING', 'NOUN'), ('APPROACHES', 'NOUN'), (':', 'PUNCT')] 

>> Dependency Tags are: 
[('LEARNING', 'compound'), ('APPROACHES', 'ROOT'), (':', 'punct')]

>> Bigrams: 
[[LEARNING, APPROACHES], [APPROACHES, :]]

>> Trigrams: 
[[LEARNING, APPROACHES, :]]

>> Noun Phrases are: 
[LEARNING APPROACHES]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

A SURVEY   


>> Tokens are: 
[SURVEY,  ] 

>> PoS Tags are: 
[('SURVEY', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('SURVEY', 'ROOT'), (' ', 'nummod')]

>> Bigrams: 
[[SURVEY,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[A SURVEY]

>> Named Entities are: 
[] 


================================ Paragraph 203 =================================

948  

------------------- Sentence 1 -------------------

948   


>> Tokens are: 
[948,  ] 

>> PoS Tags are: 
[('948', 'NUM'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('948', 'nummod'), (' ', 'ROOT')]

>> Bigrams: 
[[948,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('948', 'CARDINAL')] 


================================ Paragraph 204 =================================

The Fig.3 is an example of a decision tree for the training set  

------------------- Sentence 1 -------------------

The Fig.3 is an example of a decision tree for the training set   


>> Tokens are: 
[Fig.3, example, decision, tree, training, set,  ] 

>> PoS Tags are: 
[('Fig.3', 'PROPN'), ('example', 'NOUN'), ('decision', 'NOUN'), ('tree', 'NOUN'), ('training', 'NOUN'), ('set', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Fig.3', 'nsubj'), ('example', 'attr'), ('decision', 'compound'), ('tree', 'pobj'), ('training', 'pobj'), ('set', 'acl'), (' ', 'attr')]

>> Bigrams: 
[[Fig.3, example], [example, decision], [decision, tree], [tree, training], [training, set], [set,  ]]

>> Trigrams: 
[[Fig.3, example, decision], [example, decision, tree], [decision, tree, training], [tree, training, set], [training, set,  ]]

>> Noun Phrases are: 
[The Fig.3, an example, a decision tree, the training]

>> Named Entities are: 
[('Fig.3', 'CARDINAL')] 


================================ Paragraph 205 =================================

of Table.2. DT are extensively used is different computational  

------------------- Sentence 1 -------------------

of Table.2. 


>> Tokens are: 
[Table.2, .] 

>> PoS Tags are: 
[('Table.2', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Table.2', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Table.2, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Table.2]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

DT are extensively used is different 


>> Tokens are: 
[DT, extensively, different] 

>> PoS Tags are: 
[('DT', 'PRON'), ('extensively', 'ADV'), ('different', 'ADJ')] 

>> Dependency Tags are: 
[('DT', 'nsubjpass'), ('extensively', 'advmod'), ('different', 'acomp')]

>> Bigrams: 
[[DT, extensively], [extensively, different]]

>> Trigrams: 
[[DT, extensively, different]]

>> Noun Phrases are: 
[DT]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

computational   


>> Tokens are: 
[computational,  ] 

>> PoS Tags are: 
[('computational', 'ADJ'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('computational', 'amod'), (' ', 'ROOT')]

>> Bigrams: 
[[computational,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 206 =================================

fields to classify data. The reasons behinds the widely  

------------------- Sentence 1 -------------------

fields to classify data. 


>> Tokens are: 
[fields, classify, data, .] 

>> PoS Tags are: 
[('fields', 'NOUN'), ('classify', 'VERB'), ('data', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('fields', 'ROOT'), ('classify', 'relcl'), ('data', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[fields, classify], [classify, data], [data, .]]

>> Trigrams: 
[[fields, classify, data], [classify, data, .]]

>> Noun Phrases are: 
[fields, data]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

The reasons behinds the widely   


>> Tokens are: 
[reasons, behinds, widely,  ] 

>> PoS Tags are: 
[('reasons', 'NOUN'), ('behinds', 'VERB'), ('widely', 'ADV'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('reasons', 'nsubj'), ('behinds', 'ROOT'), ('widely', 'advmod'), (' ', 'punct')]

>> Bigrams: 
[[reasons, behinds], [behinds, widely], [widely,  ]]

>> Trigrams: 
[[reasons, behinds, widely], [behinds, widely,  ]]

>> Noun Phrases are: 
[The reasons]

>> Named Entities are: 
[] 


================================ Paragraph 207 =================================

acceptability of DT learning algorithms are their flexibility to  

------------------- Sentence 1 -------------------

acceptability of DT learning algorithms are their flexibility to   


>> Tokens are: 
[acceptability, DT, learning, algorithms, flexibility,  ] 

>> PoS Tags are: 
[('acceptability', 'NOUN'), ('DT', 'PROPN'), ('learning', 'VERB'), ('algorithms', 'NOUN'), ('flexibility', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('acceptability', 'nsubj'), ('DT', 'npadvmod'), ('learning', 'pcomp'), ('algorithms', 'dobj'), ('flexibility', 'attr'), (' ', 'pobj')]

>> Bigrams: 
[[acceptability, DT], [DT, learning], [learning, algorithms], [algorithms, flexibility], [flexibility,  ]]

>> Trigrams: 
[[acceptability, DT, learning], [DT, learning, algorithms], [learning, algorithms, flexibility], [algorithms, flexibility,  ]]

>> Noun Phrases are: 
[acceptability, algorithms, their flexibility]

>> Named Entities are: 
[('DT', 'ORG')] 


================================ Paragraph 208 =================================

apply in wide range of problems. An interesting and important  

------------------- Sentence 1 -------------------

apply in wide range of problems. 


>> Tokens are: 
[apply, wide, range, problems, .] 

>> PoS Tags are: 
[('apply', 'VERB'), ('wide', 'ADJ'), ('range', 'NOUN'), ('problems', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('apply', 'ROOT'), ('wide', 'amod'), ('range', 'pobj'), ('problems', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[apply, wide], [wide, range], [range, problems], [problems, .]]

>> Trigrams: 
[[apply, wide, range], [wide, range, problems], [range, problems, .]]

>> Noun Phrases are: 
[wide range, problems]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

An interesting and important   


>> Tokens are: 
[interesting, important,  ] 

>> PoS Tags are: 
[('interesting', 'ADJ'), ('important', 'ADJ'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('interesting', 'amod'), ('important', 'conj'), (' ', 'ROOT')]

>> Bigrams: 
[[interesting, important], [important,  ]]

>> Trigrams: 
[[interesting, important,  ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 209 =================================

property of a decision tree and its resulting set of rules is that the  

------------------- Sentence 1 -------------------

property of a decision tree and its resulting set of rules is that the   


>> Tokens are: 
[property, decision, tree, resulting, set, rules,  ] 

>> PoS Tags are: 
[('property', 'NOUN'), ('decision', 'NOUN'), ('tree', 'NOUN'), ('resulting', 'VERB'), ('set', 'NOUN'), ('rules', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('property', 'nsubj'), ('decision', 'compound'), ('tree', 'pobj'), ('resulting', 'amod'), ('set', 'conj'), ('rules', 'pobj'), (' ', 'attr')]

>> Bigrams: 
[[property, decision], [decision, tree], [tree, resulting], [resulting, set], [set, rules], [rules,  ]]

>> Trigrams: 
[[property, decision, tree], [decision, tree, resulting], [tree, resulting, set], [resulting, set, rules], [set, rules,  ]]

>> Noun Phrases are: 
[property, a decision tree, its resulting set, rules]

>> Named Entities are: 
[] 


================================ Paragraph 210 =================================

tree paths or the rules are mutually exclusive and exhaustive.  

------------------- Sentence 1 -------------------

tree paths or the rules are mutually exclusive and exhaustive. 


>> Tokens are: 
[tree, paths, rules, mutually, exclusive, exhaustive, .] 

>> PoS Tags are: 
[('tree', 'NOUN'), ('paths', 'NOUN'), ('rules', 'NOUN'), ('mutually', 'ADV'), ('exclusive', 'ADJ'), ('exhaustive', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('tree', 'compound'), ('paths', 'nsubj'), ('rules', 'conj'), ('mutually', 'advmod'), ('exclusive', 'acomp'), ('exhaustive', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[tree, paths], [paths, rules], [rules, mutually], [mutually, exclusive], [exclusive, exhaustive], [exhaustive, .]]

>> Trigrams: 
[[tree, paths, rules], [paths, rules, mutually], [rules, mutually, exclusive], [mutually, exclusive, exhaustive], [exclusive, exhaustive, .]]

>> Noun Phrases are: 
[tree paths, the rules]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 211 =================================

This means that every data instance/record/example/vector/case  

------------------- Sentence 1 -------------------

This means that every data instance/record/example/vector/case   


>> Tokens are: 
[means, data, instance, /, record, /, example, /, vector, /, case,  ] 

>> PoS Tags are: 
[('means', 'VERB'), ('data', 'NOUN'), ('instance', 'NOUN'), ('/', 'SYM'), ('record', 'NOUN'), ('/', 'SYM'), ('example', 'NOUN'), ('/', 'SYM'), ('vector', 'NOUN'), ('/', 'SYM'), ('case', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('means', 'ROOT'), ('data', 'compound'), ('instance', 'nmod'), ('/', 'punct'), ('record', 'nmod'), ('/', 'punct'), ('example', 'nmod'), ('/', 'punct'), ('vector', 'nmod'), ('/', 'punct'), ('case', 'ccomp'), (' ', 'punct')]

>> Bigrams: 
[[means, data], [data, instance], [instance, /], [/, record], [record, /], [/, example], [example, /], [/, vector], [vector, /], [/, case], [case,  ]]

>> Trigrams: 
[[means, data, instance], [data, instance, /], [instance, /, record], [/, record, /], [record, /, example], [/, example, /], [example, /, vector], [/, vector, /], [vector, /, case], [/, case,  ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 212 =================================

is covered by a single rule. According to Pierre et al. [7], DT  

------------------- Sentence 1 -------------------

is covered by a single rule. 


>> Tokens are: 
[covered, single, rule, .] 

>> PoS Tags are: 
[('covered', 'VERB'), ('single', 'ADJ'), ('rule', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('covered', 'ROOT'), ('single', 'amod'), ('rule', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[covered, single], [single, rule], [rule, .]]

>> Trigrams: 
[[covered, single, rule], [single, rule, .]]

>> Noun Phrases are: 
[a single rule]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

According to Pierre et al. 


>> Tokens are: 
[According, Pierre, et, al, .] 

>> PoS Tags are: 
[('According', 'VERB'), ('Pierre', 'PROPN'), ('et', 'NOUN'), ('al', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('According', 'ROOT'), ('Pierre', 'compound'), ('et', 'compound'), ('al', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[According, Pierre], [Pierre, et], [et, al], [al, .]]

>> Trigrams: 
[[According, Pierre, et], [Pierre, et, al], [et, al, .]]

>> Noun Phrases are: 
[Pierre et al]

>> Named Entities are: 
[('Pierre', 'PERSON')] 

------------------- Sentence 3 -------------------

[7], DT   


>> Tokens are: 
[[, 7, ], ,, DT,  ] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('7', 'X'), (']', 'PUNCT'), (',', 'PUNCT'), ('DT', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('[', 'punct'), ('7', 'ROOT'), (']', 'punct'), (',', 'punct'), ('DT', 'dative'), (' ', 'punct')]

>> Bigrams: 
[[[, 7], [7, ]], [], ,], [,, DT], [DT,  ]]

>> Trigrams: 
[[[, 7, ]], [7, ], ,], [], ,, DT], [,, DT,  ]]

>> Noun Phrases are: 
[DT]

>> Named Entities are: 
[] 


================================ Paragraph 213 =================================

algorithms combined with ensemble methods, can provide better  

------------------- Sentence 1 -------------------

algorithms combined with ensemble methods, can provide better   


>> Tokens are: 
[algorithms, combined, ensemble, methods, ,, provide, better,  ] 

>> PoS Tags are: 
[('algorithms', 'NOUN'), ('combined', 'VERB'), ('ensemble', 'ADJ'), ('methods', 'NOUN'), (',', 'PUNCT'), ('provide', 'VERB'), ('better', 'ADJ'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('algorithms', 'nsubj'), ('combined', 'acl'), ('ensemble', 'amod'), ('methods', 'pobj'), (',', 'punct'), ('provide', 'ROOT'), ('better', 'amod'), (' ', 'dobj')]

>> Bigrams: 
[[algorithms, combined], [combined, ensemble], [ensemble, methods], [methods, ,], [,, provide], [provide, better], [better,  ]]

>> Trigrams: 
[[algorithms, combined, ensemble], [combined, ensemble, methods], [ensemble, methods, ,], [methods, ,, provide], [,, provide, better], [provide, better,  ]]

>> Noun Phrases are: 
[algorithms, ensemble methods]

>> Named Entities are: 
[] 


================================ Paragraph 214 =================================

results in terms of predictive accuracy and significantly in the  

------------------- Sentence 1 -------------------

results in terms of predictive accuracy and significantly in the   


>> Tokens are: 
[results, terms, predictive, accuracy, significantly,  ] 

>> PoS Tags are: 
[('results', 'NOUN'), ('terms', 'NOUN'), ('predictive', 'ADJ'), ('accuracy', 'NOUN'), ('significantly', 'ADV'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('results', 'ROOT'), ('terms', 'pobj'), ('predictive', 'amod'), ('accuracy', 'pobj'), ('significantly', 'advmod'), (' ', 'pobj')]

>> Bigrams: 
[[results, terms], [terms, predictive], [predictive, accuracy], [accuracy, significantly], [significantly,  ]]

>> Trigrams: 
[[results, terms, predictive], [terms, predictive, accuracy], [predictive, accuracy, significantly], [accuracy, significantly,  ]]

>> Noun Phrases are: 
[results, terms, predictive accuracy]

>> Named Entities are: 
[] 


================================ Paragraph 215 =================================

context of high-throughput data sets, tree-based methods are also  

------------------- Sentence 1 -------------------

context of high-throughput data sets, tree-based methods are also   


>> Tokens are: 
[context, high, -, throughput, data, sets, ,, tree, -, based, methods,  ] 

>> PoS Tags are: 
[('context', 'NOUN'), ('high', 'ADJ'), ('-', 'PUNCT'), ('throughput', 'NOUN'), ('data', 'NOUN'), ('sets', 'NOUN'), (',', 'PUNCT'), ('tree', 'NOUN'), ('-', 'PUNCT'), ('based', 'VERB'), ('methods', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('context', 'npadvmod'), ('high', 'amod'), ('-', 'punct'), ('throughput', 'compound'), ('data', 'compound'), ('sets', 'pobj'), (',', 'punct'), ('tree', 'npadvmod'), ('-', 'punct'), ('based', 'amod'), ('methods', 'nsubj'), (' ', 'attr')]

>> Bigrams: 
[[context, high], [high, -], [-, throughput], [throughput, data], [data, sets], [sets, ,], [,, tree], [tree, -], [-, based], [based, methods], [methods,  ]]

>> Trigrams: 
[[context, high, -], [high, -, throughput], [-, throughput, data], [throughput, data, sets], [data, sets, ,], [sets, ,, tree], [,, tree, -], [tree, -, based], [-, based, methods], [based, methods,  ]]

>> Noun Phrases are: 
[high-throughput data sets, tree-based methods]

>> Named Entities are: 
[] 


================================ Paragraph 216 =================================

highly scalable from a computational point of view.  

------------------- Sentence 1 -------------------

highly scalable from a computational point of view. 


>> Tokens are: 
[highly, scalable, computational, point, view, .] 

>> PoS Tags are: 
[('highly', 'ADV'), ('scalable', 'ADJ'), ('computational', 'ADJ'), ('point', 'NOUN'), ('view', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('highly', 'advmod'), ('scalable', 'ROOT'), ('computational', 'amod'), ('point', 'pobj'), ('view', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[highly, scalable], [scalable, computational], [computational, point], [point, view], [view, .]]

>> Trigrams: 
[[highly, scalable, computational], [scalable, computational, point], [computational, point, view], [point, view, .]]

>> Noun Phrases are: 
[a computational point, view]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 217 =================================

  

------------------- Sentence 1 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 218 =================================

Fig.3. A Sample Decision Tree  

------------------- Sentence 1 -------------------

Fig.3. 


>> Tokens are: 
[Fig.3, .] 

>> PoS Tags are: 
[('Fig.3', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Fig.3', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Fig.3, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('Fig.3', 'CARDINAL')] 

------------------- Sentence 2 -------------------

A Sample Decision Tree   


>> Tokens are: 
[Sample, Decision, Tree,  ] 

>> PoS Tags are: 
[('Sample', 'PROPN'), ('Decision', 'PROPN'), ('Tree', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Sample', 'compound'), ('Decision', 'compound'), ('Tree', 'ROOT'), (' ', 'nummod')]

>> Bigrams: 
[[Sample, Decision], [Decision, Tree], [Tree,  ]]

>> Trigrams: 
[[Sample, Decision, Tree], [Decision, Tree,  ]]

>> Noun Phrases are: 
[A Sample Decision Tree]

>> Named Entities are: 
[] 


================================ Paragraph 219 =================================

By using the DT depicted in Fig.3 as an example, the  

------------------- Sentence 1 -------------------

By using the DT depicted in Fig.3 as an example, the   


>> Tokens are: 
[DT, depicted, Fig.3, example, ,,  ] 

>> PoS Tags are: 
[('DT', 'PROPN'), ('depicted', 'VERB'), ('Fig.3', 'PROPN'), ('example', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('DT', 'dobj'), ('depicted', 'xcomp'), ('Fig.3', 'pobj'), ('example', 'pobj'), (',', 'punct'), (' ', 'pobj')]

>> Bigrams: 
[[DT, depicted], [depicted, Fig.3], [Fig.3, example], [example, ,], [,,  ]]

>> Trigrams: 
[[DT, depicted, Fig.3], [depicted, Fig.3, example], [Fig.3, example, ,], [example, ,,  ]]

>> Noun Phrases are: 
[the DT, Fig.3, an example]

>> Named Entities are: 
[('Fig.3', 'CARDINAL')] 


================================ Paragraph 220 =================================

instance (at1 = a1, at2 = b2, at3 = a3, at4 = b4) would sort to the  

------------------- Sentence 1 -------------------

instance (at1 = a1, at2 = b2, at3 = a3, at4 = b4) would sort to the   


>> Tokens are: 
[instance, (, at1, =, a1, ,, at2, =, b2, ,, at3, =, a3, ,, at4, =, b4, ), sort,  ] 

>> PoS Tags are: 
[('instance', 'NOUN'), ('(', 'PUNCT'), ('at1', 'NOUN'), ('=', 'SYM'), ('a1', 'NUM'), (',', 'PUNCT'), ('at2', 'NOUN'), ('=', 'SYM'), ('b2', 'PROPN'), (',', 'PUNCT'), ('at3', 'NOUN'), ('=', 'SYM'), ('a3', 'NOUN'), (',', 'PUNCT'), ('at4', 'NOUN'), ('=', 'X'), ('b4', 'PROPN'), (')', 'PUNCT'), ('sort', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('instance', 'nsubj'), ('(', 'punct'), ('at1', 'appos'), ('=', 'punct'), ('a1', 'nummod'), (',', 'punct'), ('at2', 'npadvmod'), ('=', 'punct'), ('b2', 'appos'), (',', 'punct'), ('at3', 'csubj'), ('=', 'compound'), ('a3', 'dobj'), (',', 'punct'), ('at4', 'dep'), ('=', 'dobj'), ('b4', 'npadvmod'), (')', 'punct'), ('sort', 'ROOT'), (' ', 'pobj')]

>> Bigrams: 
[[instance, (], [(, at1], [at1, =], [=, a1], [a1, ,], [,, at2], [at2, =], [=, b2], [b2, ,], [,, at3], [at3, =], [=, a3], [a3, ,], [,, at4], [at4, =], [=, b4], [b4, )], [), sort], [sort,  ]]

>> Trigrams: 
[[instance, (, at1], [(, at1, =], [at1, =, a1], [=, a1, ,], [a1, ,, at2], [,, at2, =], [at2, =, b2], [=, b2, ,], [b2, ,, at3], [,, at3, =], [at3, =, a3], [=, a3, ,], [a3, ,, at4], [,, at4, =], [at4, =, b4], [=, b4, )], [b4, ), sort], [), sort,  ]]

>> Noun Phrases are: 
[instance, at1, = b2, = a3]

>> Named Entities are: 
[] 


================================ Paragraph 221 =================================

nodes: at1, at2, and finally at3, which would classify the instance  

------------------- Sentence 1 -------------------

nodes: at1, at2, and finally at3, which would classify the instance   


>> Tokens are: 
[nodes, :, at1, ,, at2, ,, finally, at3, ,, classify, instance,  ] 

>> PoS Tags are: 
[('nodes', 'NOUN'), (':', 'PUNCT'), ('at1', 'NOUN'), (',', 'PUNCT'), ('at2', 'NOUN'), (',', 'PUNCT'), ('finally', 'ADV'), ('at3', 'NOUN'), (',', 'PUNCT'), ('classify', 'VERB'), ('instance', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('nodes', 'ROOT'), (':', 'punct'), ('at1', 'appos'), (',', 'punct'), ('at2', 'conj'), (',', 'punct'), ('finally', 'advmod'), ('at3', 'conj'), (',', 'punct'), ('classify', 'relcl'), ('instance', 'dobj'), (' ', 'punct')]

>> Bigrams: 
[[nodes, :], [:, at1], [at1, ,], [,, at2], [at2, ,], [,, finally], [finally, at3], [at3, ,], [,, classify], [classify, instance], [instance,  ]]

>> Trigrams: 
[[nodes, :, at1], [:, at1, ,], [at1, ,, at2], [,, at2, ,], [at2, ,, finally], [,, finally, at3], [finally, at3, ,], [at3, ,, classify], [,, classify, instance], [classify, instance,  ]]

>> Noun Phrases are: 
[nodes, at1, at2, finally at3, the instance]

>> Named Entities are: 
[] 


================================ Paragraph 222 =================================

as being positive (represented by the values “Yes”).  

------------------- Sentence 1 -------------------

as being positive (represented by the values “Yes”).   


>> Tokens are: 
[positive, (, represented, values, “, Yes, ”, ), .,  ] 

>> PoS Tags are: 
[('positive', 'ADJ'), ('(', 'PUNCT'), ('represented', 'VERB'), ('values', 'NOUN'), ('“', 'PUNCT'), ('Yes', 'INTJ'), ('”', 'PUNCT'), (')', 'PUNCT'), ('.', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('positive', 'acomp'), ('(', 'punct'), ('represented', 'dep'), ('values', 'pobj'), ('“', 'punct'), ('Yes', 'intj'), ('”', 'punct'), (')', 'punct'), ('.', 'punct'), (' ', 'pobj')]

>> Bigrams: 
[[positive, (], [(, represented], [represented, values], [values, “], [“, Yes], [Yes, ”], [”, )], [), .], [.,  ]]

>> Trigrams: 
[[positive, (, represented], [(, represented, values], [represented, values, “], [values, “, Yes], [“, Yes, ”], [Yes, ”, )], [”, ), .], [), .,  ]]

>> Noun Phrases are: 
[the values]

>> Named Entities are: 
[] 


================================ Paragraph 223 =================================

Table.2. Sample Training set  

------------------- Sentence 1 -------------------

Table.2. 


>> Tokens are: 
[Table.2, .] 

>> PoS Tags are: 
[('Table.2', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Table.2', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Table.2, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Table.2]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Sample Training set   


>> Tokens are: 
[Sample, Training, set,  ] 

>> PoS Tags are: 
[('Sample', 'PROPN'), ('Training', 'PROPN'), ('set', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Sample', 'compound'), ('Training', 'nsubj'), ('set', 'ROOT'), (' ', 'dobj')]

>> Bigrams: 
[[Sample, Training], [Training, set], [set,  ]]

>> Trigrams: 
[[Sample, Training, set], [Training, set,  ]]

>> Noun Phrases are: 
[Sample Training]

>> Named Entities are: 
[('Sample Training', 'PERSON')] 


================================ Paragraph 224 =================================

at1 at2 at3 at4 Class  

------------------- Sentence 1 -------------------

at1 at2 at3 at4 Class   


>> Tokens are: 
[at1, at2, at3, at4, Class,  ] 

>> PoS Tags are: 
[('at1', 'NOUN'), ('at2', 'NOUN'), ('at3', 'NOUN'), ('at4', 'NOUN'), ('Class', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('at1', 'compound'), ('at2', 'compound'), ('at3', 'compound'), ('at4', 'ROOT'), ('Class', 'npadvmod'), (' ', 'nummod')]

>> Bigrams: 
[[at1, at2], [at2, at3], [at3, at4], [at4, Class], [Class,  ]]

>> Trigrams: 
[[at1, at2, at3], [at2, at3, at4], [at3, at4, Class], [at4, Class,  ]]

>> Noun Phrases are: 
[at1 at2 at3 at4]

>> Named Entities are: 
[] 


================================ Paragraph 225 =================================

a1 a2 a3 a4 Yes  

------------------- Sentence 1 -------------------

a1 a2 a3 a4 


>> Tokens are: 
[a1, a2, a3, a4] 

>> PoS Tags are: 
[('a1', 'NUM'), ('a2', 'PROPN'), ('a3', 'PROPN'), ('a4', 'NUM')] 

>> Dependency Tags are: 
[('a1', 'quantmod'), ('a2', 'compound'), ('a3', 'ROOT'), ('a4', 'nummod')]

>> Bigrams: 
[[a1, a2], [a2, a3], [a3, a4]]

>> Trigrams: 
[[a1, a2, a3], [a2, a3, a4]]

>> Noun Phrases are: 
[a1 a2 a3]

>> Named Entities are: 
[('a4', 'PERSON')] 

------------------- Sentence 2 -------------------

Yes   


>> Tokens are: 
[Yes,  ] 

>> PoS Tags are: 
[('Yes', 'INTJ'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Yes', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[Yes,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 226 =================================

a1 a2 a3 b4 Yes  

------------------- Sentence 1 -------------------

a1 a2 a3 b4 


>> Tokens are: 
[a1, a2, a3, b4] 

>> PoS Tags are: 
[('a1', 'NUM'), ('a2', 'PROPN'), ('a3', 'PROPN'), ('b4', 'PROPN')] 

>> Dependency Tags are: 
[('a1', 'quantmod'), ('a2', 'compound'), ('a3', 'compound'), ('b4', 'ROOT')]

>> Bigrams: 
[[a1, a2], [a2, a3], [a3, b4]]

>> Trigrams: 
[[a1, a2, a3], [a2, a3, b4]]

>> Noun Phrases are: 
[a1 a2 a3 b4]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Yes   


>> Tokens are: 
[Yes,  ] 

>> PoS Tags are: 
[('Yes', 'INTJ'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Yes', 'ROOT'), (' ', 'pobj')]

>> Bigrams: 
[[Yes,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 227 =================================

a1 b2 a3 a4 Yes  

------------------- Sentence 1 -------------------

a1 b2 a3 a4 


>> Tokens are: 
[a1, b2, a3, a4] 

>> PoS Tags are: 
[('a1', 'NUM'), ('b2', 'NUM'), ('a3', 'NOUN'), ('a4', 'NUM')] 

>> Dependency Tags are: 
[('a1', 'nummod'), ('b2', 'compound'), ('a3', 'ROOT'), ('a4', 'appos')]

>> Bigrams: 
[[a1, b2], [b2, a3], [a3, a4]]

>> Trigrams: 
[[a1, b2, a3], [b2, a3, a4]]

>> Noun Phrases are: 
[a1 b2 a3]

>> Named Entities are: 
[('a4', 'PERSON')] 

------------------- Sentence 2 -------------------

Yes   


>> Tokens are: 
[Yes,  ] 

>> PoS Tags are: 
[('Yes', 'INTJ'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Yes', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[Yes,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 228 =================================

a1 b2 b3 b4 No  

------------------- Sentence 1 -------------------

a1 b2 b3 b4 No   


>> Tokens are: 
[a1, b2, b3, b4,  ] 

>> PoS Tags are: 
[('a1', 'NUM'), ('b2', 'PROPN'), ('b3', 'PROPN'), ('b4', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('a1', 'quantmod'), ('b2', 'compound'), ('b3', 'compound'), ('b4', 'ROOT'), (' ', 'appos')]

>> Bigrams: 
[[a1, b2], [b2, b3], [b3, b4], [b4,  ]]

>> Trigrams: 
[[a1, b2, b3], [b2, b3, b4], [b3, b4,  ]]

>> Noun Phrases are: 
[a1 b2 b3 b4]

>> Named Entities are: 
[] 


================================ Paragraph 229 =================================

a1 c2 a3 a4 Yes  

------------------- Sentence 1 -------------------

a1 c2 a3 a4 


>> Tokens are: 
[a1, c2, a3, a4] 

>> PoS Tags are: 
[('a1', 'NUM'), ('c2', 'NUM'), ('a3', 'NOUN'), ('a4', 'NUM')] 

>> Dependency Tags are: 
[('a1', 'nummod'), ('c2', 'compound'), ('a3', 'ROOT'), ('a4', 'nummod')]

>> Bigrams: 
[[a1, c2], [c2, a3], [a3, a4]]

>> Trigrams: 
[[a1, c2, a3], [c2, a3, a4]]

>> Noun Phrases are: 
[a1 c2 a3]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Yes   


>> Tokens are: 
[Yes,  ] 

>> PoS Tags are: 
[('Yes', 'INTJ'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Yes', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[Yes,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 230 =================================

a1 c2 a3 b4 No  

------------------- Sentence 1 -------------------

a1 c2 a3 b4 No   


>> Tokens are: 
[a1, c2, a3, b4,  ] 

>> PoS Tags are: 
[('a1', 'NUM'), ('c2', 'PROPN'), ('a3', 'PROPN'), ('b4', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('a1', 'nummod'), ('c2', 'compound'), ('a3', 'compound'), ('b4', 'ROOT'), (' ', 'appos')]

>> Bigrams: 
[[a1, c2], [c2, a3], [a3, b4], [b4,  ]]

>> Trigrams: 
[[a1, c2, a3], [c2, a3, b4], [a3, b4,  ]]

>> Noun Phrases are: 
[a1 c2 a3 b4]

>> Named Entities are: 
[] 


================================ Paragraph 231 =================================

b1 b2 b3 b4 No  

------------------- Sentence 1 -------------------

b1 b2 b3 b4 


>> Tokens are: 
[b1, b2, b3, b4] 

>> PoS Tags are: 
[('b1', 'NUM'), ('b2', 'PROPN'), ('b3', 'PROPN'), ('b4', 'PROPN')] 

>> Dependency Tags are: 
[('b1', 'ROOT'), ('b2', 'compound'), ('b3', 'compound'), ('b4', 'npadvmod')]

>> Bigrams: 
[[b1, b2], [b2, b3], [b3, b4]]

>> Trigrams: 
[[b1, b2, b3], [b2, b3, b4]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

No   


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 232 =================================

c1 b2 b3 b4 No  

------------------- Sentence 1 -------------------

c1 b2 b3 b4 


>> Tokens are: 
[c1, b2, b3, b4] 

>> PoS Tags are: 
[('c1', 'PROPN'), ('b2', 'PROPN'), ('b3', 'PROPN'), ('b4', 'PROPN')] 

>> Dependency Tags are: 
[('c1', 'nmod'), ('b2', 'compound'), ('b3', 'appos'), ('b4', 'ROOT')]

>> Bigrams: 
[[c1, b2], [b2, b3], [b3, b4]]

>> Trigrams: 
[[c1, b2, b3], [b2, b3, b4]]

>> Noun Phrases are: 
[b2 b3]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

No   


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 233 =================================

The feature that best divides the training data would be the  

------------------- Sentence 1 -------------------

The feature that best divides the training data would be the   


>> Tokens are: 
[feature, best, divides, training, data,  ] 

>> PoS Tags are: 
[('feature', 'NOUN'), ('best', 'ADJ'), ('divides', 'VERB'), ('training', 'NOUN'), ('data', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('feature', 'nsubj'), ('best', 'advmod'), ('divides', 'relcl'), ('training', 'compound'), ('data', 'nsubj'), (' ', 'attr')]

>> Bigrams: 
[[feature, best], [best, divides], [divides, training], [training, data], [data,  ]]

>> Trigrams: 
[[feature, best, divides], [best, divides, training], [divides, training, data], [training, data,  ]]

>> Noun Phrases are: 
[The feature, the training data]

>> Named Entities are: 
[] 


================================ Paragraph 234 =================================

root node of the tree. There are different methods to extract the  

------------------- Sentence 1 -------------------

root node of the tree. 


>> Tokens are: 
[root, node, tree, .] 

>> PoS Tags are: 
[('root', 'NOUN'), ('node', 'NOUN'), ('tree', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('root', 'compound'), ('node', 'ROOT'), ('tree', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[root, node], [node, tree], [tree, .]]

>> Trigrams: 
[[root, node, tree], [node, tree, .]]

>> Noun Phrases are: 
[root node, the tree]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

There are different methods to extract the   


>> Tokens are: 
[different, methods, extract,  ] 

>> PoS Tags are: 
[('different', 'ADJ'), ('methods', 'NOUN'), ('extract', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('different', 'amod'), ('methods', 'attr'), ('extract', 'relcl'), (' ', 'dobj')]

>> Bigrams: 
[[different, methods], [methods, extract], [extract,  ]]

>> Trigrams: 
[[different, methods, extract], [methods, extract,  ]]

>> Noun Phrases are: 
[different methods]

>> Named Entities are: 
[] 


================================ Paragraph 235 =================================

features that best divides the training data such as information  

------------------- Sentence 1 -------------------

features that best divides the training data such as information   


>> Tokens are: 
[features, best, divides, training, data, information,  ] 

>> PoS Tags are: 
[('features', 'VERB'), ('best', 'ADJ'), ('divides', 'VERB'), ('training', 'NOUN'), ('data', 'NOUN'), ('information', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('features', 'ROOT'), ('best', 'advmod'), ('divides', 'ccomp'), ('training', 'compound'), ('data', 'dobj'), ('information', 'pobj'), (' ', 'punct')]

>> Bigrams: 
[[features, best], [best, divides], [divides, training], [training, data], [data, information], [information,  ]]

>> Trigrams: 
[[features, best, divides], [best, divides, training], [divides, training, data], [training, data, information], [data, information,  ]]

>> Noun Phrases are: 
[the training data, information]

>> Named Entities are: 
[] 


================================ Paragraph 236 =================================

gain [11] and gini index [12].  

------------------- Sentence 1 -------------------

gain [11] and gini index [12]. 


>> Tokens are: 
[gain, [, 11, ], gini, index, [, 12, ], .] 

>> PoS Tags are: 
[('gain', 'NOUN'), ('[', 'PUNCT'), ('11', 'NUM'), (']', 'PUNCT'), ('gini', 'NOUN'), ('index', 'NOUN'), ('[', 'PUNCT'), ('12', 'NUM'), (']', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('gain', 'ROOT'), ('[', 'punct'), ('11', 'appos'), (']', 'punct'), ('gini', 'compound'), ('index', 'conj'), ('[', 'punct'), ('12', 'appos'), (']', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[gain, [], [[, 11], [11, ]], [], gini], [gini, index], [index, [], [[, 12], [12, ]], [], .]]

>> Trigrams: 
[[gain, [, 11], [[, 11, ]], [11, ], gini], [], gini, index], [gini, index, [], [index, [, 12], [[, 12, ]], [12, ], .]]

>> Noun Phrases are: 
[gain, gini index]

>> Named Entities are: 
[('11', 'CARDINAL'), ('12', 'CARDINAL')] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 237 =================================

  

------------------- Sentence 1 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 238 =================================

Fig.4. General pseudo-code for building decision trees  

------------------- Sentence 1 -------------------

Fig.4. 


>> Tokens are: 
[Fig.4, .] 

>> PoS Tags are: 
[('Fig.4', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Fig.4', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Fig.4, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Fig.4]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

General pseudo-code for building decision trees   


>> Tokens are: 
[General, pseudo, -, code, building, decision, trees,  ] 

>> PoS Tags are: 
[('General', 'ADJ'), ('pseudo', 'NOUN'), ('-', 'NOUN'), ('code', 'NOUN'), ('building', 'VERB'), ('decision', 'NOUN'), ('trees', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('General', 'amod'), ('pseudo', 'compound'), ('-', 'punct'), ('code', 'ROOT'), ('building', 'pcomp'), ('decision', 'compound'), ('trees', 'dobj'), (' ', 'punct')]

>> Bigrams: 
[[General, pseudo], [pseudo, -], [-, code], [code, building], [building, decision], [decision, trees], [trees,  ]]

>> Trigrams: 
[[General, pseudo, -], [pseudo, -, code], [-, code, building], [code, building, decision], [building, decision, trees], [decision, trees,  ]]

>> Noun Phrases are: 
[General pseudo-code, decision trees]

>> Named Entities are: 
[] 


================================ Paragraph 239 =================================

3.2 LEARNING SET OF RULES  

------------------- Sentence 1 -------------------

3.2 LEARNING SET OF RULES   


>> Tokens are: 
[3.2, LEARNING, SET, RULES,  ] 

>> PoS Tags are: 
[('3.2', 'NUM'), ('LEARNING', 'NOUN'), ('SET', 'PROPN'), ('RULES', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('3.2', 'nummod'), ('LEARNING', 'compound'), ('SET', 'ROOT'), ('RULES', 'pobj'), (' ', 'punct')]

>> Bigrams: 
[[3.2, LEARNING], [LEARNING, SET], [SET, RULES], [RULES,  ]]

>> Trigrams: 
[[3.2, LEARNING, SET], [LEARNING, SET, RULES], [SET, RULES,  ]]

>> Noun Phrases are: 
[3.2 LEARNING SET, RULES]

>> Named Entities are: 
[('3.2', 'CARDINAL')] 


================================ Paragraph 240 =================================

It is also possible that decision trees can be translated into a  

------------------- Sentence 1 -------------------

It is also possible that decision trees can be translated into a   


>> Tokens are: 
[possible, decision, trees, translated,  ] 

>> PoS Tags are: 
[('possible', 'ADJ'), ('decision', 'NOUN'), ('trees', 'NOUN'), ('translated', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('possible', 'acomp'), ('decision', 'compound'), ('trees', 'nsubjpass'), ('translated', 'ccomp'), (' ', 'pobj')]

>> Bigrams: 
[[possible, decision], [decision, trees], [trees, translated], [translated,  ]]

>> Trigrams: 
[[possible, decision, trees], [decision, trees, translated], [trees, translated,  ]]

>> Noun Phrases are: 
[It, decision trees]

>> Named Entities are: 
[] 


================================ Paragraph 241 =================================

set of rules by creating a separate rule for each path from the  

------------------- Sentence 1 -------------------

set of rules by creating a separate rule for each path from the   


>> Tokens are: 
[set, rules, creating, separate, rule, path,  ] 

>> PoS Tags are: 
[('set', 'VERB'), ('rules', 'NOUN'), ('creating', 'VERB'), ('separate', 'ADJ'), ('rule', 'NOUN'), ('path', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('set', 'ROOT'), ('rules', 'pobj'), ('creating', 'pcomp'), ('separate', 'amod'), ('rule', 'dobj'), ('path', 'pobj'), (' ', 'pobj')]

>> Bigrams: 
[[set, rules], [rules, creating], [creating, separate], [separate, rule], [rule, path], [path,  ]]

>> Trigrams: 
[[set, rules, creating], [rules, creating, separate], [creating, separate, rule], [separate, rule, path], [rule, path,  ]]

>> Noun Phrases are: 
[rules, a separate rule, each path]

>> Named Entities are: 
[] 


================================ Paragraph 242 =================================

root to a leaf in the tree [13]. However, rules can also be directly  

------------------- Sentence 1 -------------------

root to a leaf in the tree [13]. 


>> Tokens are: 
[root, leaf, tree, [, 13, ], .] 

>> PoS Tags are: 
[('root', 'VERB'), ('leaf', 'NOUN'), ('tree', 'NOUN'), ('[', 'PUNCT'), ('13', 'NUM'), (']', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('root', 'ROOT'), ('leaf', 'pobj'), ('tree', 'pobj'), ('[', 'punct'), ('13', 'npadvmod'), (']', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[root, leaf], [leaf, tree], [tree, [], [[, 13], [13, ]], [], .]]

>> Trigrams: 
[[root, leaf, tree], [leaf, tree, [], [tree, [, 13], [[, 13, ]], [13, ], .]]

>> Noun Phrases are: 
[a leaf, the tree]

>> Named Entities are: 
[('13', 'CARDINAL')] 

------------------- Sentence 2 -------------------

However, rules can also be directly   


>> Tokens are: 
[,, rules, directly,  ] 

>> PoS Tags are: 
[(',', 'PUNCT'), ('rules', 'NOUN'), ('directly', 'ADV'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[(',', 'punct'), ('rules', 'nsubj'), ('directly', 'advmod'), (' ', 'attr')]

>> Bigrams: 
[[,, rules], [rules, directly], [directly,  ]]

>> Trigrams: 
[[,, rules, directly], [rules, directly,  ]]

>> Noun Phrases are: 
[rules]

>> Named Entities are: 
[] 


================================ Paragraph 243 =================================

induced from training data using a variety of rule-based  

------------------- Sentence 1 -------------------

induced from training data using a variety of rule-based   


>> Tokens are: 
[induced, training, data, variety, rule, -, based,  ] 

>> PoS Tags are: 
[('induced', 'VERB'), ('training', 'NOUN'), ('data', 'NOUN'), ('variety', 'NOUN'), ('rule', 'NOUN'), ('-', 'PUNCT'), ('based', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('induced', 'ROOT'), ('training', 'compound'), ('data', 'pobj'), ('variety', 'dobj'), ('rule', 'npadvmod'), ('-', 'punct'), ('based', 'amod'), (' ', 'pobj')]

>> Bigrams: 
[[induced, training], [training, data], [data, variety], [variety, rule], [rule, -], [-, based], [based,  ]]

>> Trigrams: 
[[induced, training, data], [training, data, variety], [data, variety, rule], [variety, rule, -], [rule, -, based], [-, based,  ]]

>> Noun Phrases are: 
[training data, a variety]

>> Named Entities are: 
[] 


================================ Paragraph 244 =================================

algorithms. In [14], the author has provided an excellent  

------------------- Sentence 1 -------------------

algorithms. 


>> Tokens are: 
[algorithms, .] 

>> PoS Tags are: 
[('algorithms', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('algorithms', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[algorithms, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[algorithms]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

In [14], the author has provided an excellent   


>> Tokens are: 
[[, 14, ], ,, author, provided, excellent,  ] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('14', 'NUM'), (']', 'PUNCT'), (',', 'PUNCT'), ('author', 'NOUN'), ('provided', 'VERB'), ('excellent', 'ADJ'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('[', 'pobj'), ('14', 'pobj'), (']', 'pobj'), (',', 'punct'), ('author', 'nsubj'), ('provided', 'ROOT'), ('excellent', 'dobj'), (' ', 'punct')]

>> Bigrams: 
[[[, 14], [14, ]], [], ,], [,, author], [author, provided], [provided, excellent], [excellent,  ]]

>> Trigrams: 
[[[, 14, ]], [14, ], ,], [], ,, author], [,, author, provided], [author, provided, excellent], [provided, excellent,  ]]

>> Noun Phrases are: 
[the author]

>> Named Entities are: 
[('14', 'CARDINAL')] 


================================ Paragraph 245 =================================

overview of existing work in rule-based methods. The  

------------------- Sentence 1 -------------------

overview of existing work in rule-based methods. 


>> Tokens are: 
[overview, existing, work, rule, -, based, methods, .] 

>> PoS Tags are: 
[('overview', 'NOUN'), ('existing', 'VERB'), ('work', 'NOUN'), ('rule', 'NOUN'), ('-', 'PUNCT'), ('based', 'VERB'), ('methods', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('overview', 'ROOT'), ('existing', 'amod'), ('work', 'pobj'), ('rule', 'npadvmod'), ('-', 'punct'), ('based', 'amod'), ('methods', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[overview, existing], [existing, work], [work, rule], [rule, -], [-, based], [based, methods], [methods, .]]

>> Trigrams: 
[[overview, existing, work], [existing, work, rule], [work, rule, -], [rule, -, based], [-, based, methods], [based, methods, .]]

>> Noun Phrases are: 
[overview, existing work, rule-based methods]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

The   


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 246 =================================

classification rules represent each class by Disjunctive Normal  

------------------- Sentence 1 -------------------

classification rules represent each class by Disjunctive Normal   


>> Tokens are: 
[classification, rules, represent, class, Disjunctive, Normal,  ] 

>> PoS Tags are: 
[('classification', 'NOUN'), ('rules', 'NOUN'), ('represent', 'VERB'), ('class', 'NOUN'), ('Disjunctive', 'PROPN'), ('Normal', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('classification', 'compound'), ('rules', 'nsubj'), ('represent', 'ROOT'), ('class', 'dobj'), ('Disjunctive', 'compound'), ('Normal', 'pobj'), (' ', 'punct')]

>> Bigrams: 
[[classification, rules], [rules, represent], [represent, class], [class, Disjunctive], [Disjunctive, Normal], [Normal,  ]]

>> Trigrams: 
[[classification, rules, represent], [rules, represent, class], [represent, class, Disjunctive], [class, Disjunctive, Normal], [Disjunctive, Normal,  ]]

>> Noun Phrases are: 
[classification rules, each class, Disjunctive Normal]

>> Named Entities are: 
[('Disjunctive Normal', 'PERSON')] 


================================ Paragraph 247 =================================

Form (DNF). A statement is in DNF if it is a disjunction  

------------------- Sentence 1 -------------------

Form (DNF). 


>> Tokens are: 
[Form, (, DNF, ), .] 

>> PoS Tags are: 
[('Form', 'NOUN'), ('(', 'PUNCT'), ('DNF', 'PROPN'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Form', 'ROOT'), ('(', 'punct'), ('DNF', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Form, (], [(, DNF], [DNF, )], [), .]]

>> Trigrams: 
[[Form, (, DNF], [(, DNF, )], [DNF, ), .]]

>> Noun Phrases are: 
[Form, DNF]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

A statement is in DNF if it is a disjunction   


>> Tokens are: 
[statement, DNF, disjunction,  ] 

>> PoS Tags are: 
[('statement', 'NOUN'), ('DNF', 'PROPN'), ('disjunction', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('statement', 'nsubj'), ('DNF', 'pobj'), ('disjunction', 'attr'), (' ', 'punct')]

>> Bigrams: 
[[statement, DNF], [DNF, disjunction], [disjunction,  ]]

>> Trigrams: 
[[statement, DNF, disjunction], [DNF, disjunction,  ]]

>> Noun Phrases are: 
[A statement, DNF, it, a disjunction]

>> Named Entities are: 
[] 


================================ Paragraph 248 =================================

(sequence of ORs) consisting of one or more disjuncts, each of  

------------------- Sentence 1 -------------------

(sequence of ORs) consisting of one or more disjuncts, each of   


>> Tokens are: 
[(, sequence, ORs, ), consisting, disjuncts, ,,  ] 

>> PoS Tags are: 
[('(', 'PUNCT'), ('sequence', 'NOUN'), ('ORs', 'NOUN'), (')', 'PUNCT'), ('consisting', 'VERB'), ('disjuncts', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('(', 'punct'), ('sequence', 'ROOT'), ('ORs', 'pobj'), (')', 'punct'), ('consisting', 'acl'), ('disjuncts', 'pobj'), (',', 'punct'), (' ', 'pobj')]

>> Bigrams: 
[[(, sequence], [sequence, ORs], [ORs, )], [), consisting], [consisting, disjuncts], [disjuncts, ,], [,,  ]]

>> Trigrams: 
[[(, sequence, ORs], [sequence, ORs, )], [ORs, ), consisting], [), consisting, disjuncts], [consisting, disjuncts, ,], [disjuncts, ,,  ]]

>> Noun Phrases are: 
[(sequence, ORs, one or more disjuncts]

>> Named Entities are: 
[('one', 'CARDINAL')] 


================================ Paragraph 249 =================================

which is a conjunction (AND) of one or more literals. Below is  

------------------- Sentence 1 -------------------

which is a conjunction (AND) of one or more literals. 


>> Tokens are: 
[conjunction, (, ), literals, .] 

>> PoS Tags are: 
[('conjunction', 'NOUN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('literals', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('conjunction', 'attr'), ('(', 'punct'), (')', 'punct'), ('literals', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[conjunction, (], [(, )], [), literals], [literals, .]]

>> Trigrams: 
[[conjunction, (, )], [(, ), literals], [), literals, .]]

>> Noun Phrases are: 
[a conjunction, one or more literals]

>> Named Entities are: 
[('one', 'CARDINAL')] 

------------------- Sentence 2 -------------------

Below is   


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'nsubj')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 250 =================================

an example of disjunctive normal forms.  

------------------- Sentence 1 -------------------

an example of disjunctive normal forms. 


>> Tokens are: 
[example, disjunctive, normal, forms, .] 

>> PoS Tags are: 
[('example', 'NOUN'), ('disjunctive', 'ADJ'), ('normal', 'ADJ'), ('forms', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('example', 'ROOT'), ('disjunctive', 'amod'), ('normal', 'amod'), ('forms', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[example, disjunctive], [disjunctive, normal], [normal, forms], [forms, .]]

>> Trigrams: 
[[example, disjunctive, normal], [disjunctive, normal, forms], [normal, forms, .]]

>> Noun Phrases are: 
[an example, disjunctive normal forms]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 251 =================================

A k-DNF expression is of the form:  

------------------- Sentence 1 -------------------

A k-DNF expression is of the form:   


>> Tokens are: 
[k, -, DNF, expression, form, :,  ] 

>> PoS Tags are: 
[('k', 'PROPN'), ('-', 'PUNCT'), ('DNF', 'PROPN'), ('expression', 'NOUN'), ('form', 'NOUN'), (':', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('k', 'compound'), ('-', 'punct'), ('DNF', 'compound'), ('expression', 'nsubj'), ('form', 'pobj'), (':', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[k, -], [-, DNF], [DNF, expression], [expression, form], [form, :], [:,  ]]

>> Trigrams: 
[[k, -, DNF], [-, DNF, expression], [DNF, expression, form], [expression, form, :], [form, :,  ]]

>> Noun Phrases are: 
[A k-DNF expression, the form]

>> Named Entities are: 
[] 


================================ Paragraph 252 =================================

       nnnn AAAAAA 22121     knnknk AAA   2111 , where k is the number of  

------------------- Sentence 1 -------------------

       nnnn AAAAAA 22121     knnknk AAA   2111 , where k is the number of   


>> Tokens are: 
[, , , , , , , nnnn, AAAAAA, 22121, , , , , knnknk, AAA, , , 2111, ,, k, number,  ] 

>> PoS Tags are: 
[('\uf028', 'NOUN'), ('\uf029', 'PROPN'), ('\uf028', 'NOUN'), ('\uf029\uf028', 'X'), ('\uf029\uf0da\uf0da\uf0d9\uf0d9\uf0da\uf0d9\uf0d9', 'X'), ('\uf02b\uf02b', 'PROPN'), ('\uf04b\uf04b\uf04b', 'PROPN'), ('nnnn', 'VERB'), ('AAAAAA', 'PROPN'), ('22121', 'NUM'), ('\uf028', 'NOUN'), ('\uf029', 'PROPN'), ('\uf028', 'ADJ'), ('\uf029\uf028', 'NOUN'), ('\uf029knnknk', 'ADJ'), ('AAA', 'PROPN'), ('\uf0d9\uf0d9\uf0d9', 'PROPN'), ('\uf02b\uf02d\uf02b\uf02d', 'PROPN'), ('\uf04b2111', 'PROPN'), (',', 'PUNCT'), ('k', 'NOUN'), ('number', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('\uf028', 'det'), ('\uf029', 'compound'), ('\uf028', 'nmod'), ('\uf029\uf028', 'compound'), ('\uf029\uf0da\uf0da\uf0d9\uf0d9\uf0da\uf0d9\uf0d9', 'nmod'), ('\uf02b\uf02b', 'compound'), ('\uf04b\uf04b\uf04b', 'nsubj'), ('nnnn', 'ROOT'), ('AAAAAA', 'dobj'), ('22121', 'nummod'), ('\uf028', 'nmod'), ('\uf029', 'compound'), ('\uf028', 'amod'), ('\uf029\uf028', 'compound'), ('\uf029knnknk', 'amod'), ('AAA', 'compound'), ('\uf0d9\uf0d9\uf0d9', 'compound'), ('\uf02b\uf02d\uf02b\uf02d', 'compound'), ('\uf04b2111', 'dobj'), (',', 'punct'), ('k', 'nsubj'), ('number', 'attr'), (' ', 'pobj')]

>> Bigrams: 
[[, ], [, ], [, ], [, ], [, ], [, ], [, nnnn], [nnnn, AAAAAA], [AAAAAA, 22121], [22121, ], [, ], [, ], [, ], [, knnknk], [knnknk, AAA], [AAA, ], [, ], [, 2111], [2111, ,], [,, k], [k, number], [number,  ]]

>> Trigrams: 
[[, , ], [, , ], [, , ], [, , ], [, , ], [, , nnnn], [, nnnn, AAAAAA], [nnnn, AAAAAA, 22121], [AAAAAA, 22121, ], [22121, , ], [, , ], [, , ], [, , knnknk], [, knnknk, AAA], [knnknk, AAA, ], [AAA, , ], [, , 2111], [, 2111, ,], [2111, ,, k], [,, k, number], [k, number,  ]]

>> Noun Phrases are: 
[      , AAAAAA,     knnknk AAA   2111, k, the number]

>> Named Entities are: 
[('\uf029', 'ORG'), ('AAAAAA 22121', 'ORG'), ('\uf029', 'ORG'), ('\uf029knnknk AAA', 'ORG')] 


================================ Paragraph 253 =================================

disjunctions, n is the number of conjunctions in each disjunction,  

------------------- Sentence 1 -------------------

disjunctions, n is the number of conjunctions in each disjunction,   


>> Tokens are: 
[disjunctions, ,, n, number, conjunctions, disjunction, ,,  ] 

>> PoS Tags are: 
[('disjunctions', 'NOUN'), (',', 'PUNCT'), ('n', 'CCONJ'), ('number', 'NOUN'), ('conjunctions', 'NOUN'), ('disjunction', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('disjunctions', 'nsubj'), (',', 'punct'), ('n', 'cc'), ('number', 'attr'), ('conjunctions', 'pobj'), ('disjunction', 'pobj'), (',', 'punct'), (' ', 'attr')]

>> Bigrams: 
[[disjunctions, ,], [,, n], [n, number], [number, conjunctions], [conjunctions, disjunction], [disjunction, ,], [,,  ]]

>> Trigrams: 
[[disjunctions, ,, n], [,, n, number], [n, number, conjunctions], [number, conjunctions, disjunction], [conjunctions, disjunction, ,], [disjunction, ,,  ]]

>> Noun Phrases are: 
[disjunctions, the number, conjunctions, each disjunction]

>> Named Entities are: 
[] 


================================ Paragraph 254 =================================

and An is defined over the alphabet  

------------------- Sentence 1 -------------------

and An is defined over the alphabet   


>> Tokens are: 
[defined, alphabet,  ] 

>> PoS Tags are: 
[('defined', 'VERB'), ('alphabet', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('defined', 'ROOT'), ('alphabet', 'pobj'), (' ', 'punct')]

>> Bigrams: 
[[defined, alphabet], [alphabet,  ]]

>> Trigrams: 
[[defined, alphabet,  ]]

>> Noun Phrases are: 
[the alphabet]

>> Named Entities are: 
[] 


================================ Paragraph 255 =================================

jj AAAAAA  2121 ~,~,,,,  . Here the objective is to build  

------------------- Sentence 1 -------------------

jj AAAAAA  2121 ~,~,,,,  . 


>> Tokens are: 
[jj, AAAAAA, , 2121, ~,~, ,, ,, ,, ,, , .] 

>> PoS Tags are: 
[('jj', 'PROPN'), ('AAAAAA', 'PROPN'), ('\uf04b\uf04b', 'PUNCT'), ('2121', 'NUM'), ('~,~', 'NUM'), (',', 'PUNCT'), (',', 'PUNCT'), (',', 'PUNCT'), (',', 'PUNCT'), ('\uf04a', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('jj', 'compound'), ('AAAAAA', 'ROOT'), ('\uf04b\uf04b', 'punct'), ('2121', 'appos'), ('~,~', 'punct'), (',', 'punct'), (',', 'punct'), (',', 'punct'), (',', 'punct'), ('\uf04a', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[jj, AAAAAA], [AAAAAA, ], [, 2121], [2121, ~,~], [~,~, ,], [,, ,], [,, ,], [,, ,], [,, ], [, .]]

>> Trigrams: 
[[jj, AAAAAA, ], [AAAAAA, , 2121], [, 2121, ~,~], [2121, ~,~, ,], [~,~, ,, ,], [,, ,, ,], [,, ,, ,], [,, ,, ], [,, , .]]

>> Noun Phrases are: 
[jj AAAAAA, ]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Here the objective is to build   


>> Tokens are: 
[objective, build,  ] 

>> PoS Tags are: 
[('objective', 'NOUN'), ('build', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('objective', 'nsubj'), ('build', 'xcomp'), (' ', 'dobj')]

>> Bigrams: 
[[objective, build], [build,  ]]

>> Trigrams: 
[[objective, build,  ]]

>> Noun Phrases are: 
[the objective]

>> Named Entities are: 
[] 


================================ Paragraph 256 =================================

the smallest rule-set that is consistent with the training data [1].  

------------------- Sentence 1 -------------------

the smallest rule-set that is consistent with the training data [1]. 


>> Tokens are: 
[smallest, rule, -, set, consistent, training, data, [, 1, ], .] 

>> PoS Tags are: 
[('smallest', 'ADJ'), ('rule', 'NOUN'), ('-', 'PUNCT'), ('set', 'NOUN'), ('consistent', 'ADJ'), ('training', 'NOUN'), ('data', 'NOUN'), ('[', 'PUNCT'), ('1', 'NUM'), (']', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('smallest', 'amod'), ('rule', 'compound'), ('-', 'punct'), ('set', 'ROOT'), ('consistent', 'acomp'), ('training', 'compound'), ('data', 'pobj'), ('[', 'punct'), ('1', 'appos'), (']', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[smallest, rule], [rule, -], [-, set], [set, consistent], [consistent, training], [training, data], [data, [], [[, 1], [1, ]], [], .]]

>> Trigrams: 
[[smallest, rule, -], [rule, -, set], [-, set, consistent], [set, consistent, training], [consistent, training, data], [training, data, [], [data, [, 1], [[, 1, ]], [1, ], .]]

>> Noun Phrases are: 
[the smallest rule-set, the training data]

>> Named Entities are: 
[('1', 'CARDINAL')] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 257 =================================

A good number of learned rules is usually a positive sign that the  

------------------- Sentence 1 -------------------

A good number of learned rules is usually a positive sign that 


>> Tokens are: 
[good, number, learned, rules, usually, positive, sign] 

>> PoS Tags are: 
[('good', 'ADJ'), ('number', 'NOUN'), ('learned', 'VERB'), ('rules', 'NOUN'), ('usually', 'ADV'), ('positive', 'ADJ'), ('sign', 'NOUN')] 

>> Dependency Tags are: 
[('good', 'amod'), ('number', 'nsubj'), ('learned', 'amod'), ('rules', 'pobj'), ('usually', 'advmod'), ('positive', 'amod'), ('sign', 'attr')]

>> Bigrams: 
[[good, number], [number, learned], [learned, rules], [rules, usually], [usually, positive], [positive, sign]]

>> Trigrams: 
[[good, number, learned], [number, learned, rules], [learned, rules, usually], [rules, usually, positive], [usually, positive, sign]]

>> Noun Phrases are: 
[A good number, learned rules, a positive sign]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

the   


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 258 =================================

learning algorithm is attempting to remember the training set,  

------------------- Sentence 1 -------------------

learning algorithm is attempting to remember the training set, 


>> Tokens are: 
[learning, algorithm, attempting, remember, training, set, ,] 

>> PoS Tags are: 
[('learning', 'VERB'), ('algorithm', 'NOUN'), ('attempting', 'VERB'), ('remember', 'VERB'), ('training', 'NOUN'), ('set', 'NOUN'), (',', 'PUNCT')] 

>> Dependency Tags are: 
[('learning', 'csubj'), ('algorithm', 'dobj'), ('attempting', 'ROOT'), ('remember', 'xcomp'), ('training', 'compound'), ('set', 'dobj'), (',', 'punct')]

>> Bigrams: 
[[learning, algorithm], [algorithm, attempting], [attempting, remember], [remember, training], [training, set], [set, ,]]

>> Trigrams: 
[[learning, algorithm, attempting], [algorithm, attempting, remember], [attempting, remember, training], [remember, training, set], [training, set, ,]]

>> Noun Phrases are: 
[algorithm, the training set]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 259 =================================

instead of discovering the assumptions that govern it. A  

------------------- Sentence 1 -------------------

instead of discovering the assumptions that govern it. 


>> Tokens are: 
[instead, discovering, assumptions, govern, .] 

>> PoS Tags are: 
[('instead', 'ADV'), ('discovering', 'VERB'), ('assumptions', 'NOUN'), ('govern', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('instead', 'advmod'), ('discovering', 'pcomp'), ('assumptions', 'dobj'), ('govern', 'relcl'), ('.', 'punct')]

>> Bigrams: 
[[instead, discovering], [discovering, assumptions], [assumptions, govern], [govern, .]]

>> Trigrams: 
[[instead, discovering, assumptions], [discovering, assumptions, govern], [assumptions, govern, .]]

>> Noun Phrases are: 
[the assumptions, it]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

A   


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 260 =================================

separate-and-conquer algorithm (recursively breaking down a  

------------------- Sentence 1 -------------------

separate-and-conquer algorithm (recursively breaking down a   


>> Tokens are: 
[separate, -, -, conquer, algorithm, (, recursively, breaking,  ] 

>> PoS Tags are: 
[('separate', 'ADJ'), ('-', 'PUNCT'), ('-', 'PUNCT'), ('conquer', 'NOUN'), ('algorithm', 'NOUN'), ('(', 'PUNCT'), ('recursively', 'ADV'), ('breaking', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('separate', 'amod'), ('-', 'punct'), ('-', 'punct'), ('conquer', 'conj'), ('algorithm', 'nsubj'), ('(', 'punct'), ('recursively', 'advmod'), ('breaking', 'ROOT'), (' ', 'dobj')]

>> Bigrams: 
[[separate, -], [-, -], [-, conquer], [conquer, algorithm], [algorithm, (], [(, recursively], [recursively, breaking], [breaking,  ]]

>> Trigrams: 
[[separate, -, -], [-, -, conquer], [-, conquer, algorithm], [conquer, algorithm, (], [algorithm, (, recursively], [(, recursively, breaking], [recursively, breaking,  ]]

>> Noun Phrases are: 
[separate-and-conquer algorithm]

>> Named Entities are: 
[] 


================================ Paragraph 261 =================================

problem into sub-problems) search for a rule that explains a part  

------------------- Sentence 1 -------------------

problem into sub-problems) search for a rule that explains a part   


>> Tokens are: 
[problem, sub, -, problems, ), search, rule, explains,  ] 

>> PoS Tags are: 
[('problem', 'NOUN'), ('sub', 'NOUN'), ('-', 'NOUN'), ('problems', 'NOUN'), (')', 'PUNCT'), ('search', 'NOUN'), ('rule', 'NOUN'), ('explains', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('problem', 'nsubj'), ('sub', 'pobj'), ('-', 'pobj'), ('problems', 'pobj'), (')', 'punct'), ('search', 'ROOT'), ('rule', 'pobj'), ('explains', 'relcl'), (' ', 'punct')]

>> Bigrams: 
[[problem, sub], [sub, -], [-, problems], [problems, )], [), search], [search, rule], [rule, explains], [explains,  ]]

>> Trigrams: 
[[problem, sub, -], [sub, -, problems], [-, problems, )], [problems, ), search], [), search, rule], [search, rule, explains], [rule, explains,  ]]

>> Noun Phrases are: 
[problem, sub, -, problems, a rule, a part]

>> Named Entities are: 
[] 


================================ Paragraph 262 =================================

of its training instances, separates these instances and recursively  

------------------- Sentence 1 -------------------

of its training instances, separates these instances and recursively   


>> Tokens are: 
[training, instances, ,, separates, instances, recursively,  ] 

>> PoS Tags are: 
[('training', 'NOUN'), ('instances', 'NOUN'), (',', 'PUNCT'), ('separates', 'VERB'), ('instances', 'NOUN'), ('recursively', 'ADV'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('training', 'compound'), ('instances', 'pobj'), (',', 'punct'), ('separates', 'ROOT'), ('instances', 'dobj'), ('recursively', 'advmod'), (' ', 'conj')]

>> Bigrams: 
[[training, instances], [instances, ,], [,, separates], [separates, instances], [instances, recursively], [recursively,  ]]

>> Trigrams: 
[[training, instances, ,], [instances, ,, separates], [,, separates, instances], [separates, instances, recursively], [instances, recursively,  ]]

>> Noun Phrases are: 
[its training instances, these instances]

>> Named Entities are: 
[] 


================================ Paragraph 263 =================================

conquers the remaining instances by learning more rules, until  

------------------- Sentence 1 -------------------

conquers the remaining instances by learning more rules, until   


>> Tokens are: 
[conquers, remaining, instances, learning, rules, ,,  ] 

>> PoS Tags are: 
[('conquers', 'NOUN'), ('remaining', 'VERB'), ('instances', 'NOUN'), ('learning', 'VERB'), ('rules', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('conquers', 'ROOT'), ('remaining', 'amod'), ('instances', 'dobj'), ('learning', 'pcomp'), ('rules', 'dobj'), (',', 'punct'), (' ', 'pobj')]

>> Bigrams: 
[[conquers, remaining], [remaining, instances], [instances, learning], [learning, rules], [rules, ,], [,,  ]]

>> Trigrams: 
[[conquers, remaining, instances], [remaining, instances, learning], [instances, learning, rules], [learning, rules, ,], [rules, ,,  ]]

>> Noun Phrases are: 
[conquers, the remaining instances, more rules]

>> Named Entities are: 
[] 


================================ Paragraph 264 =================================

no instances remain [1]. In below Fig.5, a general pseudo-code  

------------------- Sentence 1 -------------------

no instances remain [1]. 


>> Tokens are: 
[instances, remain, [, 1, ], .] 

>> PoS Tags are: 
[('instances', 'NOUN'), ('remain', 'VERB'), ('[', 'PUNCT'), ('1', 'NUM'), (']', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('instances', 'nsubj'), ('remain', 'ROOT'), ('[', 'attr'), ('1', 'dep'), (']', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[instances, remain], [remain, [], [[, 1], [1, ]], [], .]]

>> Trigrams: 
[[instances, remain, [], [remain, [, 1], [[, 1, ]], [1, ], .]]

>> Noun Phrases are: 
[no instances]

>> Named Entities are: 
[('1', 'CARDINAL')] 

------------------- Sentence 2 -------------------

In below Fig.5, a general pseudo-code   


>> Tokens are: 
[Fig.5, ,, general, pseudo, -, code,  ] 

>> PoS Tags are: 
[('Fig.5', 'NOUN'), (',', 'PUNCT'), ('general', 'ADJ'), ('pseudo', 'NOUN'), ('-', 'NOUN'), ('code', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Fig.5', 'pobj'), (',', 'punct'), ('general', 'amod'), ('pseudo', 'ROOT'), ('-', 'punct'), ('code', 'appos'), (' ', 'nummod')]

>> Bigrams: 
[[Fig.5, ,], [,, general], [general, pseudo], [pseudo, -], [-, code], [code,  ]]

>> Trigrams: 
[[Fig.5, ,, general], [,, general, pseudo], [general, pseudo, -], [pseudo, -, code], [-, code,  ]]

>> Noun Phrases are: 
[Fig.5, code]

>> Named Entities are: 
[] 


================================ Paragraph 265 =================================

for rule learners is presented.  

------------------- Sentence 1 -------------------

for rule learners is presented. 


>> Tokens are: 
[rule, learners, presented, .] 

>> PoS Tags are: 
[('rule', 'NOUN'), ('learners', 'NOUN'), ('presented', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('rule', 'compound'), ('learners', 'nsubjpass'), ('presented', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[rule, learners], [learners, presented], [presented, .]]

>> Trigrams: 
[[rule, learners, presented], [learners, presented, .]]

>> Noun Phrases are: 
[rule learners]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 266 =================================

  

------------------- Sentence 1 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 267 =================================

Fig.5. A general Pseudo code for rule learners  

------------------- Sentence 1 -------------------

Fig.5. 


>> Tokens are: 
[Fig.5, .] 

>> PoS Tags are: 
[('Fig.5', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Fig.5', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Fig.5, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Fig.5]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

A general Pseudo code for rule learners   


>> Tokens are: 
[general, Pseudo, code, rule, learners,  ] 

>> PoS Tags are: 
[('general', 'ADJ'), ('Pseudo', 'PROPN'), ('code', 'NOUN'), ('rule', 'NOUN'), ('learners', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('general', 'amod'), ('Pseudo', 'compound'), ('code', 'ROOT'), ('rule', 'compound'), ('learners', 'pobj'), (' ', 'punct')]

>> Bigrams: 
[[general, Pseudo], [Pseudo, code], [code, rule], [rule, learners], [learners,  ]]

>> Trigrams: 
[[general, Pseudo, code], [Pseudo, code, rule], [code, rule, learners], [rule, learners,  ]]

>> Noun Phrases are: 
[A general Pseudo code, rule learners]

>> Named Entities are: 
[] 


================================ Paragraph 268 =================================

The core difference between heuristics for rule learning  

------------------- Sentence 1 -------------------

The core difference between heuristics for rule learning   


>> Tokens are: 
[core, difference, heuristics, rule, learning,  ] 

>> PoS Tags are: 
[('core', 'NOUN'), ('difference', 'NOUN'), ('heuristics', 'NOUN'), ('rule', 'NOUN'), ('learning', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('core', 'compound'), ('difference', 'ROOT'), ('heuristics', 'pobj'), ('rule', 'compound'), ('learning', 'pcomp'), (' ', 'appos')]

>> Bigrams: 
[[core, difference], [difference, heuristics], [heuristics, rule], [rule, learning], [learning,  ]]

>> Trigrams: 
[[core, difference, heuristics], [difference, heuristics, rule], [heuristics, rule, learning], [rule, learning,  ]]

>> Noun Phrases are: 
[The core difference, heuristics]

>> Named Entities are: 
[] 


================================ Paragraph 269 =================================

algorithms and heuristics for decision trees algorithms is that the  

------------------- Sentence 1 -------------------

algorithms and heuristics for decision trees algorithms is that the   


>> Tokens are: 
[algorithms, heuristics, decision, trees, algorithms,  ] 

>> PoS Tags are: 
[('algorithms', 'NOUN'), ('heuristics', 'NOUN'), ('decision', 'NOUN'), ('trees', 'NOUN'), ('algorithms', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('algorithms', 'nsubj'), ('heuristics', 'conj'), ('decision', 'compound'), ('trees', 'compound'), ('algorithms', 'pobj'), (' ', 'attr')]

>> Bigrams: 
[[algorithms, heuristics], [heuristics, decision], [decision, trees], [trees, algorithms], [algorithms,  ]]

>> Trigrams: 
[[algorithms, heuristics, decision], [heuristics, decision, trees], [decision, trees, algorithms], [trees, algorithms,  ]]

>> Noun Phrases are: 
[algorithms, heuristics, decision trees algorithms]

>> Named Entities are: 
[] 


================================ Paragraph 270 =================================

latter evaluate the average quality of a number of disjointed sets,  

------------------- Sentence 1 -------------------

latter evaluate the average quality of a number of disjointed sets,   


>> Tokens are: 
[evaluate, average, quality, number, disjointed, sets, ,,  ] 

>> PoS Tags are: 
[('evaluate', 'VERB'), ('average', 'ADJ'), ('quality', 'NOUN'), ('number', 'NOUN'), ('disjointed', 'ADJ'), ('sets', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('evaluate', 'ROOT'), ('average', 'amod'), ('quality', 'dobj'), ('number', 'pobj'), ('disjointed', 'amod'), ('sets', 'pobj'), (',', 'punct'), (' ', 'dobj')]

>> Bigrams: 
[[evaluate, average], [average, quality], [quality, number], [number, disjointed], [disjointed, sets], [sets, ,], [,,  ]]

>> Trigrams: 
[[evaluate, average, quality], [average, quality, number], [quality, number, disjointed], [number, disjointed, sets], [disjointed, sets, ,], [sets, ,,  ]]

>> Noun Phrases are: 
[the average quality, a number, disjointed sets]

>> Named Entities are: 
[] 


================================ Paragraph 271 =================================

while rule learners only evaluate the quality of the set of  

------------------- Sentence 1 -------------------

while rule learners only evaluate the quality of the set of   


>> Tokens are: 
[rule, learners, evaluate, quality, set,  ] 

>> PoS Tags are: 
[('rule', 'NOUN'), ('learners', 'NOUN'), ('evaluate', 'VERB'), ('quality', 'NOUN'), ('set', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('rule', 'compound'), ('learners', 'nsubj'), ('evaluate', 'ROOT'), ('quality', 'dobj'), ('set', 'pobj'), (' ', 'pobj')]

>> Bigrams: 
[[rule, learners], [learners, evaluate], [evaluate, quality], [quality, set], [set,  ]]

>> Trigrams: 
[[rule, learners, evaluate], [learners, evaluate, quality], [evaluate, quality, set], [quality, set,  ]]

>> Noun Phrases are: 
[rule learners, the quality, the set]

>> Named Entities are: 
[] 


================================ Paragraph 272 =================================

instances that is covered by the candidate rule [1]. One of the  

------------------- Sentence 1 -------------------

instances that is covered by the candidate rule [1]. 


>> Tokens are: 
[instances, covered, candidate, rule, [, 1, ], .] 

>> PoS Tags are: 
[('instances', 'NOUN'), ('covered', 'VERB'), ('candidate', 'NOUN'), ('rule', 'NOUN'), ('[', 'PUNCT'), ('1', 'NUM'), (']', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('instances', 'ROOT'), ('covered', 'relcl'), ('candidate', 'compound'), ('rule', 'pobj'), ('[', 'punct'), ('1', 'appos'), (']', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[instances, covered], [covered, candidate], [candidate, rule], [rule, [], [[, 1], [1, ]], [], .]]

>> Trigrams: 
[[instances, covered, candidate], [covered, candidate, rule], [candidate, rule, [], [rule, [, 1], [[, 1, ]], [1, ], .]]

>> Noun Phrases are: 
[instances, the candidate rule]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

One of the   


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'pobj')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 273 =================================

most useful characteristic of rule based classifiers is their  

------------------- Sentence 1 -------------------

most useful characteristic of rule based classifiers is their   


>> Tokens are: 
[useful, characteristic, rule, based, classifiers,  ] 

>> PoS Tags are: 
[('useful', 'ADJ'), ('characteristic', 'NOUN'), ('rule', 'NOUN'), ('based', 'VERB'), ('classifiers', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('useful', 'amod'), ('characteristic', 'nsubj'), ('rule', 'npadvmod'), ('based', 'amod'), ('classifiers', 'pobj'), (' ', 'attr')]

>> Bigrams: 
[[useful, characteristic], [characteristic, rule], [rule, based], [based, classifiers], [classifiers,  ]]

>> Trigrams: 
[[useful, characteristic, rule], [characteristic, rule, based], [rule, based, classifiers], [based, classifiers,  ]]

>> Noun Phrases are: 
[most useful characteristic, rule based classifiers]

>> Named Entities are: 
[] 


================================ Paragraph 274 =================================

comprehensibility. In order to achieve better performance, even  

------------------- Sentence 1 -------------------

comprehensibility. 


>> Tokens are: 
[comprehensibility, .] 

>> PoS Tags are: 
[('comprehensibility', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('comprehensibility', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[comprehensibility, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[comprehensibility]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

In order to achieve better performance, even   


>> Tokens are: 
[order, achieve, better, performance, ,,  ] 

>> PoS Tags are: 
[('order', 'NOUN'), ('achieve', 'VERB'), ('better', 'ADJ'), ('performance', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('order', 'pobj'), ('achieve', 'acl'), ('better', 'amod'), ('performance', 'dobj'), (',', 'punct'), (' ', 'pobj')]

>> Bigrams: 
[[order, achieve], [achieve, better], [better, performance], [performance, ,], [,,  ]]

>> Trigrams: 
[[order, achieve, better], [achieve, better, performance], [better, performance, ,], [performance, ,,  ]]

>> Noun Phrases are: 
[order, better performance]

>> Named Entities are: 
[] 


================================ Paragraph 275 =================================

though some rule-based classifiers can deal with numerical  

------------------- Sentence 1 -------------------

though some rule-based classifiers can deal with numerical   


>> Tokens are: 
[rule, -, based, classifiers, deal, numerical,  ] 

>> PoS Tags are: 
[('rule', 'NOUN'), ('-', 'PUNCT'), ('based', 'VERB'), ('classifiers', 'NOUN'), ('deal', 'VERB'), ('numerical', 'ADJ'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('rule', 'npadvmod'), ('-', 'punct'), ('based', 'amod'), ('classifiers', 'nsubj'), ('deal', 'ROOT'), ('numerical', 'amod'), (' ', 'pobj')]

>> Bigrams: 
[[rule, -], [-, based], [based, classifiers], [classifiers, deal], [deal, numerical], [numerical,  ]]

>> Trigrams: 
[[rule, -, based], [-, based, classifiers], [based, classifiers, deal], [classifiers, deal, numerical], [deal, numerical,  ]]

>> Noun Phrases are: 
[some rule-based classifiers]

>> Named Entities are: 
[] 


================================ Paragraph 276 =================================

features, some experts propose these features should be  

------------------- Sentence 1 -------------------

features, some experts propose these features should be   


>> Tokens are: 
[features, ,, experts, propose, features,  ] 

>> PoS Tags are: 
[('features', 'VERB'), (',', 'PUNCT'), ('experts', 'NOUN'), ('propose', 'VERB'), ('features', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('features', 'nsubj'), (',', 'punct'), ('experts', 'nsubj'), ('propose', 'ccomp'), ('features', 'dobj'), (' ', 'attr')]

>> Bigrams: 
[[features, ,], [,, experts], [experts, propose], [propose, features], [features,  ]]

>> Trigrams: 
[[features, ,, experts], [,, experts, propose], [experts, propose, features], [propose, features,  ]]

>> Noun Phrases are: 
[some experts, these features]

>> Named Entities are: 
[] 


================================ Paragraph 277 =================================

discredited before induction, so as to reduce training time and  

------------------- Sentence 1 -------------------

discredited before induction, so as to reduce training time and   


>> Tokens are: 
[discredited, induction, ,, reduce, training, time,  ] 

>> PoS Tags are: 
[('discredited', 'VERB'), ('induction', 'NOUN'), (',', 'PUNCT'), ('reduce', 'VERB'), ('training', 'NOUN'), ('time', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('discredited', 'ROOT'), ('induction', 'pobj'), (',', 'punct'), ('reduce', 'advcl'), ('training', 'compound'), ('time', 'dobj'), (' ', 'conj')]

>> Bigrams: 
[[discredited, induction], [induction, ,], [,, reduce], [reduce, training], [training, time], [time,  ]]

>> Trigrams: 
[[discredited, induction, ,], [induction, ,, reduce], [,, reduce, training], [reduce, training, time], [training, time,  ]]

>> Noun Phrases are: 
[induction, training time]

>> Named Entities are: 
[] 


================================ Paragraph 278 =================================

increase classification accuracy [15].  

------------------- Sentence 1 -------------------

increase classification accuracy [15]. 


>> Tokens are: 
[increase, classification, accuracy, [, 15, ], .] 

>> PoS Tags are: 
[('increase', 'VERB'), ('classification', 'NOUN'), ('accuracy', 'NOUN'), ('[', 'PUNCT'), ('15', 'NUM'), (']', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('increase', 'ROOT'), ('classification', 'compound'), ('accuracy', 'dobj'), ('[', 'punct'), ('15', 'npadvmod'), (']', 'npadvmod'), ('.', 'punct')]

>> Bigrams: 
[[increase, classification], [classification, accuracy], [accuracy, [], [[, 15], [15, ]], [], .]]

>> Trigrams: 
[[increase, classification, accuracy], [classification, accuracy, [], [accuracy, [, 15], [[, 15, ]], [15, ], .]]

>> Noun Phrases are: 
[classification accuracy]

>> Named Entities are: 
[('15', 'CARDINAL')] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 279 =================================

4. STATISTICAL LEARNING ALGORITHMS  

------------------- Sentence 1 -------------------

4. 


>> Tokens are: 
[4, .] 

>> PoS Tags are: 
[('4', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('4', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[4, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('4', 'CARDINAL')] 

------------------- Sentence 2 -------------------

STATISTICAL LEARNING ALGORITHMS   


>> Tokens are: 
[STATISTICAL, LEARNING, ALGORITHMS,  ] 

>> PoS Tags are: 
[('STATISTICAL', 'PROPN'), ('LEARNING', 'PROPN'), ('ALGORITHMS', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('STATISTICAL', 'compound'), ('LEARNING', 'ROOT'), ('ALGORITHMS', 'dobj'), (' ', 'punct')]

>> Bigrams: 
[[STATISTICAL, LEARNING], [LEARNING, ALGORITHMS], [ALGORITHMS,  ]]

>> Trigrams: 
[[STATISTICAL, LEARNING, ALGORITHMS], [LEARNING, ALGORITHMS,  ]]

>> Noun Phrases are: 
[STATISTICAL LEARNING, ALGORITHMS]

>> Named Entities are: 
[] 


================================ Paragraph 280 =================================

Statistical learning is a framework for machine learning  

------------------- Sentence 1 -------------------

Statistical learning is a framework for machine learning   


>> Tokens are: 
[Statistical, learning, framework, machine, learning,  ] 

>> PoS Tags are: 
[('Statistical', 'ADJ'), ('learning', 'NOUN'), ('framework', 'NOUN'), ('machine', 'NOUN'), ('learning', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Statistical', 'amod'), ('learning', 'nsubj'), ('framework', 'attr'), ('machine', 'pobj'), ('learning', 'acl'), (' ', 'dobj')]

>> Bigrams: 
[[Statistical, learning], [learning, framework], [framework, machine], [machine, learning], [learning,  ]]

>> Trigrams: 
[[Statistical, learning, framework], [learning, framework, machine], [framework, machine, learning], [machine, learning,  ]]

>> Noun Phrases are: 
[Statistical learning, a framework, machine]

>> Named Entities are: 
[] 


================================ Paragraph 281 =================================

drawing from the fields of statistics and functional analysis [16].  

------------------- Sentence 1 -------------------

drawing from the fields of statistics and functional analysis [16]. 


>> Tokens are: 
[drawing, fields, statistics, functional, analysis, [, 16, ], .] 

>> PoS Tags are: 
[('drawing', 'VERB'), ('fields', 'NOUN'), ('statistics', 'NOUN'), ('functional', 'ADJ'), ('analysis', 'NOUN'), ('[', 'PUNCT'), ('16', 'NUM'), (']', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('drawing', 'ROOT'), ('fields', 'pobj'), ('statistics', 'pobj'), ('functional', 'amod'), ('analysis', 'conj'), ('[', 'punct'), ('16', 'appos'), (']', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[drawing, fields], [fields, statistics], [statistics, functional], [functional, analysis], [analysis, [], [[, 16], [16, ]], [], .]]

>> Trigrams: 
[[drawing, fields, statistics], [fields, statistics, functional], [statistics, functional, analysis], [functional, analysis, [], [analysis, [, 16], [[, 16, ]], [16, ], .]]

>> Noun Phrases are: 
[the fields, statistics, functional analysis]

>> Named Entities are: 
[('16', 'CARDINAL')] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 282 =================================

1. Initialize rule set to a default   2. Initialize examples to either all available examples  

------------------- Sentence 1 -------------------

1. 


>> Tokens are: 
[1, .] 

>> PoS Tags are: 
[('1', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('1', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[1, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('1', 'CARDINAL')] 

------------------- Sentence 2 -------------------

Initialize rule set to a default   2. 


>> Tokens are: 
[Initialize, rule, set, default,   , 2, .] 

>> PoS Tags are: 
[('Initialize', 'NOUN'), ('rule', 'NOUN'), ('set', 'VERB'), ('default', 'NOUN'), ('  ', 'SPACE'), ('2', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Initialize', 'compound'), ('rule', 'ROOT'), ('set', 'acl'), ('default', 'pobj'), ('  ', 'compound'), ('2', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[Initialize, rule], [rule, set], [set, default], [default,   ], [  , 2], [2, .]]

>> Trigrams: 
[[Initialize, rule, set], [rule, set, default], [set, default,   ], [default,   , 2], [  , 2, .]]

>> Noun Phrases are: 
[Initialize rule, a default]

>> Named Entities are: 
[('Initialize', 'ORG'), ('2', 'CARDINAL')] 

------------------- Sentence 3 -------------------

Initialize examples to either all available examples   


>> Tokens are: 
[Initialize, examples, available, examples,  ] 

>> PoS Tags are: 
[('Initialize', 'NOUN'), ('examples', 'NOUN'), ('available', 'ADJ'), ('examples', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Initialize', 'ROOT'), ('examples', 'dobj'), ('available', 'amod'), ('examples', 'pobj'), (' ', 'punct')]

>> Bigrams: 
[[Initialize, examples], [examples, available], [available, examples], [examples,  ]]

>> Trigrams: 
[[Initialize, examples, available], [examples, available, examples], [available, examples,  ]]

>> Noun Phrases are: 
[Initialize, examples, either all available examples]

>> Named Entities are: 
[] 


================================ Paragraph 283 =================================

or all examples not correctly handled by rule set.   

------------------- Sentence 1 -------------------

or all examples not correctly handled by rule set. 


>> Tokens are: 
[examples, correctly, handled, rule, set, .] 

>> PoS Tags are: 
[('examples', 'NOUN'), ('correctly', 'ADV'), ('handled', 'VERB'), ('rule', 'NOUN'), ('set', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('examples', 'ROOT'), ('correctly', 'advmod'), ('handled', 'acl'), ('rule', 'compound'), ('set', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[examples, correctly], [correctly, handled], [handled, rule], [rule, set], [set, .]]

>> Trigrams: 
[[examples, correctly, handled], [correctly, handled, rule], [handled, rule, set], [rule, set, .]]

>> Noun Phrases are: 
[or all examples, rule set]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 284 =================================

3. Repeat   

------------------- Sentence 1 -------------------

3. 


>> Tokens are: 
[3, .] 

>> PoS Tags are: 
[('3', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('3', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[3, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('3', 'CARDINAL')] 

------------------- Sentence 2 -------------------

Repeat    


>> Tokens are: 
[Repeat,   ] 

>> PoS Tags are: 
[('Repeat', 'VERB'), ('  ', 'SPACE')] 

>> Dependency Tags are: 
[('Repeat', 'ROOT'), ('  ', 'dobj')]

>> Bigrams: 
[[Repeat,   ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 285 =================================

     (a) Find best, the best rule with respect to examples.   

------------------- Sentence 1 -------------------

     (a) Find best, the best rule with respect to examples. 


>> Tokens are: 
[     , (, ), Find, best, ,, best, rule, respect, examples, .] 

>> PoS Tags are: 
[('     ', 'SPACE'), ('(', 'PUNCT'), (')', 'PUNCT'), ('Find', 'VERB'), ('best', 'ADJ'), (',', 'PUNCT'), ('best', 'ADJ'), ('rule', 'NOUN'), ('respect', 'NOUN'), ('examples', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('     ', 'nsubj'), ('(', 'punct'), (')', 'punct'), ('Find', 'ROOT'), ('best', 'advmod'), (',', 'punct'), ('best', 'amod'), ('rule', 'dobj'), ('respect', 'pobj'), ('examples', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[     , (], [(, )], [), Find], [Find, best], [best, ,], [,, best], [best, rule], [rule, respect], [respect, examples], [examples, .]]

>> Trigrams: 
[[     , (, )], [(, ), Find], [), Find, best], [Find, best, ,], [best, ,, best], [,, best, rule], [best, rule, respect], [rule, respect, examples], [respect, examples, .]]

>> Noun Phrases are: 
[the best rule, respect, examples]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 286 =================================

     (b) If such a rule can be found   

------------------- Sentence 1 -------------------

     (b) If such a rule can be found    


>> Tokens are: 
[     , (, b, ), rule, found,   ] 

>> PoS Tags are: 
[('     ', 'SPACE'), ('(', 'PUNCT'), ('b', 'X'), (')', 'PUNCT'), ('rule', 'NOUN'), ('found', 'VERB'), ('  ', 'SPACE')] 

>> Dependency Tags are: 
[('     ', 'ROOT'), ('(', 'punct'), ('b', 'appos'), (')', 'punct'), ('rule', 'nsubjpass'), ('found', 'advcl'), ('  ', 'appos')]

>> Bigrams: 
[[     , (], [(, b], [b, )], [), rule], [rule, found], [found,   ]]

>> Trigrams: 
[[     , (, b], [(, b, )], [b, ), rule], [), rule, found], [rule, found,   ]]

>> Noun Phrases are: 
[such a rule]

>> Named Entities are: 
[] 


================================ Paragraph 287 =================================

i. Add best to rule set.   ii. Set examples to all examples not handled  

------------------- Sentence 1 -------------------

i. Add best to rule set. 


>> Tokens are: 
[i., Add, best, rule, set, .] 

>> PoS Tags are: 
[('i.', 'NOUN'), ('Add', 'VERB'), ('best', 'ADJ'), ('rule', 'VERB'), ('set', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('i.', 'compound'), ('Add', 'ROOT'), ('best', 'advmod'), ('rule', 'advcl'), ('set', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[i., Add], [Add, best], [best, rule], [rule, set], [set, .]]

>> Trigrams: 
[[i., Add, best], [Add, best, rule], [best, rule, set], [rule, set, .]]

>> Noun Phrases are: 
[set]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

  ii. 


>> Tokens are: 
[  , ii, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('ii', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'nummod'), ('ii', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[  , ii], [ii, .]]

>> Trigrams: 
[[  , ii, .]]

>> Noun Phrases are: 
[  ii]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

Set examples to all examples not handled   


>> Tokens are: 
[Set, examples, examples, handled,  ] 

>> PoS Tags are: 
[('Set', 'ADJ'), ('examples', 'NOUN'), ('examples', 'NOUN'), ('handled', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Set', 'amod'), ('examples', 'nsubj'), ('examples', 'pobj'), ('handled', 'ROOT'), (' ', 'dobj')]

>> Bigrams: 
[[Set, examples], [examples, examples], [examples, handled], [handled,  ]]

>> Trigrams: 
[[Set, examples, examples], [examples, examples, handled], [examples, handled,  ]]

>> Noun Phrases are: 
[Set examples, all examples]

>> Named Entities are: 
[] 


================================ Paragraph 288 =================================

correctly by rule set.          

------------------- Sentence 1 -------------------

correctly by rule set. 


>> Tokens are: 
[correctly, rule, set, .] 

>> PoS Tags are: 
[('correctly', 'ADV'), ('rule', 'NOUN'), ('set', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('correctly', 'advmod'), ('rule', 'compound'), ('set', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[correctly, rule], [rule, set], [set, .]]

>> Trigrams: 
[[correctly, rule, set], [rule, set, .]]

>> Noun Phrases are: 
[rule set]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

          


>> Tokens are: 
[         ] 

>> PoS Tags are: 
[('         ', 'SPACE')] 

>> Dependency Tags are: 
[('         ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 289 =================================

4. Until no rule best can be found   

------------------- Sentence 1 -------------------

4. 


>> Tokens are: 
[4, .] 

>> PoS Tags are: 
[('4', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('4', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[4, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('4', 'CARDINAL')] 

------------------- Sentence 2 -------------------

Until no rule best can be found    


>> Tokens are: 
[rule, best, found,   ] 

>> PoS Tags are: 
[('rule', 'NOUN'), ('best', 'ADV'), ('found', 'VERB'), ('  ', 'SPACE')] 

>> Dependency Tags are: 
[('rule', 'nsubjpass'), ('best', 'advmod'), ('found', 'ROOT'), ('  ', 'dobj')]

>> Bigrams: 
[[rule, best], [best, found], [found,   ]]

>> Trigrams: 
[[rule, best, found], [best, found,   ]]

>> Noun Phrases are: 
[no rule]

>> Named Entities are: 
[] 


================================ Paragraph 290 =================================

1. Check for base cases   2. For each attribute “a”  calculate  

------------------- Sentence 1 -------------------

1. 


>> Tokens are: 
[1, .] 

>> PoS Tags are: 
[('1', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('1', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[1, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('1', 'CARDINAL')] 

------------------- Sentence 2 -------------------

Check for base cases   2. 


>> Tokens are: 
[Check, base, cases,   , 2, .] 

>> PoS Tags are: 
[('Check', 'VERB'), ('base', 'NOUN'), ('cases', 'NOUN'), ('  ', 'SPACE'), ('2', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Check', 'ROOT'), ('base', 'compound'), ('cases', 'pobj'), ('  ', 'dobj'), ('2', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[Check, base], [base, cases], [cases,   ], [  , 2], [2, .]]

>> Trigrams: 
[[Check, base, cases], [base, cases,   ], [cases,   , 2], [  , 2, .]]

>> Noun Phrases are: 
[base cases]

>> Named Entities are: 
[('2', 'CARDINAL')] 

------------------- Sentence 3 -------------------

For each attribute “a”  calculate   


>> Tokens are: 
[attribute, “, ”,  , calculate,  ] 

>> PoS Tags are: 
[('attribute', 'NOUN'), ('“', 'PUNCT'), ('”', 'PUNCT'), (' ', 'SPACE'), ('calculate', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('attribute', 'pobj'), ('“', 'punct'), ('”', 'punct'), (' ', 'nsubj'), ('calculate', 'ROOT'), (' ', 'dobj')]

>> Bigrams: 
[[attribute, “], [“, ”], [”,  ], [ , calculate], [calculate,  ]]

>> Trigrams: 
[[attribute, “, ”], [“, ”,  ], [”,  , calculate], [ , calculate,  ]]

>> Noun Phrases are: 
[each attribute]

>> Named Entities are: 
[] 


================================ Paragraph 291 =================================

i. Normalized the information gain (IG) from splitting  on attribute “a”.  

------------------- Sentence 1 -------------------

i. Normalized the information gain (IG) from splitting  on attribute “a”. 


>> Tokens are: 
[i., Normalized, information, gain, (, IG, ), splitting,  , attribute, “, ”, .] 

>> PoS Tags are: 
[('i.', 'NOUN'), ('Normalized', 'VERB'), ('information', 'NOUN'), ('gain', 'NOUN'), ('(', 'PUNCT'), ('IG', 'PROPN'), (')', 'PUNCT'), ('splitting', 'VERB'), (' ', 'SPACE'), ('attribute', 'NOUN'), ('“', 'PUNCT'), ('”', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('i.', 'nsubj'), ('Normalized', 'ROOT'), ('information', 'compound'), ('gain', 'dobj'), ('(', 'punct'), ('IG', 'appos'), (')', 'punct'), ('splitting', 'pcomp'), (' ', 'dobj'), ('attribute', 'pobj'), ('“', 'punct'), ('”', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[i., Normalized], [Normalized, information], [information, gain], [gain, (], [(, IG], [IG, )], [), splitting], [splitting,  ], [ , attribute], [attribute, “], [“, ”], [”, .]]

>> Trigrams: 
[[i., Normalized, information], [Normalized, information, gain], [information, gain, (], [gain, (, IG], [(, IG, )], [IG, ), splitting], [), splitting,  ], [splitting,  , attribute], [ , attribute, “], [attribute, “, ”], [“, ”, .]]

>> Noun Phrases are: 
[i., the information gain, IG, attribute]

>> Named Entities are: 
[('IG', 'ORG')] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 292 =================================

3. Find the best “a”, attribute that has highest IG   4. Create a decision node: node that splits on best of “a”  5. Recurse on the sub-lists obtained by Splitting on a best  

------------------- Sentence 1 -------------------

3. 


>> Tokens are: 
[3, .] 

>> PoS Tags are: 
[('3', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('3', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[3, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('3', 'CARDINAL')] 

------------------- Sentence 2 -------------------

Find the best “a”, attribute that has highest IG   4. 


>> Tokens are: 
[Find, best, “, ”, ,, attribute, highest, IG,   , 4, .] 

>> PoS Tags are: 
[('Find', 'VERB'), ('best', 'ADJ'), ('“', 'PUNCT'), ('”', 'PUNCT'), (',', 'PUNCT'), ('attribute', 'NOUN'), ('highest', 'ADJ'), ('IG', 'PROPN'), ('  ', 'SPACE'), ('4', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Find', 'ROOT'), ('best', 'amod'), ('“', 'punct'), ('”', 'punct'), (',', 'punct'), ('attribute', 'dep'), ('highest', 'amod'), ('IG', 'dobj'), ('  ', 'dobj'), ('4', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[Find, best], [best, “], [“, ”], [”, ,], [,, attribute], [attribute, highest], [highest, IG], [IG,   ], [  , 4], [4, .]]

>> Trigrams: 
[[Find, best, “], [best, “, ”], [“, ”, ,], [”, ,, attribute], [,, attribute, highest], [attribute, highest, IG], [highest, IG,   ], [IG,   , 4], [  , 4, .]]

>> Noun Phrases are: 
[highest IG]

>> Named Entities are: 
[('IG', 'ORG'), ('4', 'CARDINAL')] 

------------------- Sentence 3 -------------------

Create a decision node: node that splits on best of “a”  5. 


>> Tokens are: 
[Create, decision, node, :, node, splits, best, “, ”,  , 5, .] 

>> PoS Tags are: 
[('Create', 'VERB'), ('decision', 'NOUN'), ('node', 'NOUN'), (':', 'PUNCT'), ('node', 'NOUN'), ('splits', 'VERB'), ('best', 'ADJ'), ('“', 'PUNCT'), ('”', 'PUNCT'), (' ', 'SPACE'), ('5', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Create', 'ROOT'), ('decision', 'compound'), ('node', 'dobj'), (':', 'punct'), ('node', 'dobj'), ('splits', 'relcl'), ('best', 'pobj'), ('“', 'punct'), ('”', 'punct'), (' ', 'pobj'), ('5', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[Create, decision], [decision, node], [node, :], [:, node], [node, splits], [splits, best], [best, “], [“, ”], [”,  ], [ , 5], [5, .]]

>> Trigrams: 
[[Create, decision, node], [decision, node, :], [node, :, node], [:, node, splits], [node, splits, best], [splits, best, “], [best, “, ”], [“, ”,  ], [”,  , 5], [ , 5, .]]

>> Noun Phrases are: 
[a decision node, node]

>> Named Entities are: 
[('5', 'CARDINAL')] 

------------------- Sentence 4 -------------------

Recurse on the sub-lists obtained by Splitting on a best   


>> Tokens are: 
[Recurse, sub, -, lists, obtained, Splitting, best,  ] 

>> PoS Tags are: 
[('Recurse', 'PROPN'), ('sub', 'NOUN'), ('-', 'NOUN'), ('lists', 'NOUN'), ('obtained', 'VERB'), ('Splitting', 'PROPN'), ('best', 'ADJ'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Recurse', 'ROOT'), ('sub', 'pobj'), ('-', 'pobj'), ('lists', 'pobj'), ('obtained', 'acl'), ('Splitting', 'pobj'), ('best', 'amod'), (' ', 'pobj')]

>> Bigrams: 
[[Recurse, sub], [sub, -], [-, lists], [lists, obtained], [obtained, Splitting], [Splitting, best], [best,  ]]

>> Trigrams: 
[[Recurse, sub, -], [sub, -, lists], [-, lists, obtained], [lists, obtained, Splitting], [obtained, Splitting, best], [Splitting, best,  ]]

>> Noun Phrases are: 
[Recurse, the sub, -, lists, Splitting]

>> Named Entities are: 
[] 


================================ Paragraph 293 =================================

and add those nodes as children of node  

------------------- Sentence 1 -------------------

and add those nodes as children of node   


>> Tokens are: 
[add, nodes, children, node,  ] 

>> PoS Tags are: 
[('add', 'VERB'), ('nodes', 'NOUN'), ('children', 'NOUN'), ('node', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('add', 'ROOT'), ('nodes', 'dobj'), ('children', 'pobj'), ('node', 'pobj'), (' ', 'punct')]

>> Bigrams: 
[[add, nodes], [nodes, children], [children, node], [node,  ]]

>> Trigrams: 
[[add, nodes, children], [nodes, children, node], [children, node,  ]]

>> Noun Phrases are: 
[those nodes, children, node]

>> Named Entities are: 
[] 


================================ Paragraph 294 =================================

at1  

------------------- Sentence 1 -------------------

at1   


>> Tokens are: 
[at1,  ] 

>> PoS Tags are: 
[('at1', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('at1', 'ROOT'), (' ', 'nummod')]

>> Bigrams: 
[[at1,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[at1]

>> Named Entities are: 
[] 


================================ Paragraph 295 =================================

at2 No No  

------------------- Sentence 1 -------------------

at2 No 


>> Tokens are: 
[at2] 

>> PoS Tags are: 
[('at2', 'NOUN')] 

>> Dependency Tags are: 
[('at2', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[at2]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

No   


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'punct')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 296 =================================

  

------------------- Sentence 1 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 297 =================================

at4 at3  No  

------------------- Sentence 1 -------------------

at4 at3   


>> Tokens are: 
[at4, at3,  ] 

>> PoS Tags are: 
[('at4', 'NOUN'), ('at3', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('at4', 'compound'), ('at3', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[at4, at3], [at3,  ]]

>> Trigrams: 
[[at4, at3,  ]]

>> Noun Phrases are: 
[at4 at3]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

No   


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 298 =================================

Yes  

------------------- Sentence 1 -------------------

Yes   


>> Tokens are: 
[Yes,  ] 

>> PoS Tags are: 
[('Yes', 'INTJ'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Yes', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[Yes,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 299 =================================

No    

------------------- Sentence 1 -------------------

No     


>> Tokens are: 
[   ] 

>> PoS Tags are: 
[('   ', 'SPACE')] 

>> Dependency Tags are: 
[('   ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 300 =================================

Yes No 

------------------- Sentence 1 -------------------

Yes No 


>> Tokens are: 
[Yes] 

>> PoS Tags are: 
[('Yes', 'INTJ')] 

>> Dependency Tags are: 
[('Yes', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 301 =================================

ISSN: 2229-6956(ONLINE)                                                                                                                             ICTACT JOURNAL ON SOFT COMPUTING, APRIL 2015, VOLUME: 05, ISSUE: 03  

------------------- Sentence 1 -------------------

ISSN: 2229-6956(ONLINE) 


>> Tokens are: 
[ISSN, :, 2229, -, 6956(ONLINE, )] 

>> PoS Tags are: 
[('ISSN', 'PROPN'), (':', 'PUNCT'), ('2229', 'NUM'), ('-', 'SYM'), ('6956(ONLINE', 'NUM'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('ISSN', 'ROOT'), (':', 'punct'), ('2229', 'appos'), ('-', 'punct'), ('6956(ONLINE', 'prep'), (')', 'punct')]

>> Bigrams: 
[[ISSN, :], [:, 2229], [2229, -], [-, 6956(ONLINE], [6956(ONLINE, )]]

>> Trigrams: 
[[ISSN, :, 2229], [:, 2229, -], [2229, -, 6956(ONLINE], [-, 6956(ONLINE, )]]

>> Noun Phrases are: 
[ISSN]

>> Named Entities are: 
[('ISSN', 'ORG'), ('2229-6956(ONLINE', 'CARDINAL')] 

------------------- Sentence 2 -------------------

                                                                                                                            ICTACT JOURNAL ON SOFT COMPUTING, APRIL 2015, VOLUME: 05, ISSUE: 


>> Tokens are: 
[                                                                                                                            , ICTACT, JOURNAL, SOFT, COMPUTING, ,, APRIL, 2015, ,, VOLUME, :, 05, ,, ISSUE, :] 

>> PoS Tags are: 
[('                                                                                                                            ', 'SPACE'), ('ICTACT', 'PROPN'), ('JOURNAL', 'PROPN'), ('SOFT', 'ADJ'), ('COMPUTING', 'NOUN'), (',', 'PUNCT'), ('APRIL', 'PROPN'), ('2015', 'NUM'), (',', 'PUNCT'), ('VOLUME', 'NOUN'), (':', 'PUNCT'), ('05', 'NUM'), (',', 'PUNCT'), ('ISSUE', 'NOUN'), (':', 'PUNCT')] 

>> Dependency Tags are: 
[('                                                                                                                            ', 'compound'), ('ICTACT', 'compound'), ('JOURNAL', 'ROOT'), ('SOFT', 'amod'), ('COMPUTING', 'pobj'), (',', 'punct'), ('APRIL', 'appos'), ('2015', 'nummod'), (',', 'punct'), ('VOLUME', 'appos'), (':', 'punct'), ('05', 'appos'), (',', 'punct'), ('ISSUE', 'appos'), (':', 'punct')]

>> Bigrams: 
[[                                                                                                                            , ICTACT], [ICTACT, JOURNAL], [JOURNAL, SOFT], [SOFT, COMPUTING], [COMPUTING, ,], [,, APRIL], [APRIL, 2015], [2015, ,], [,, VOLUME], [VOLUME, :], [:, 05], [05, ,], [,, ISSUE], [ISSUE, :]]

>> Trigrams: 
[[                                                                                                                            , ICTACT, JOURNAL], [ICTACT, JOURNAL, SOFT], [JOURNAL, SOFT, COMPUTING], [SOFT, COMPUTING, ,], [COMPUTING, ,, APRIL], [,, APRIL, 2015], [APRIL, 2015, ,], [2015, ,, VOLUME], [,, VOLUME, :], [VOLUME, :, 05], [:, 05, ,], [05, ,, ISSUE], [,, ISSUE, :]]

>> Noun Phrases are: 
[                                                                                                                            ICTACT JOURNAL, SOFT COMPUTING, APRIL, VOLUME, ISSUE]

>> Named Entities are: 
[('APRIL 2015', 'DATE'), ('05', 'CARDINAL')] 

------------------- Sentence 3 -------------------

03   


>> Tokens are: 
[03,  ] 

>> PoS Tags are: 
[('03', 'NUM'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('03', 'nummod'), (' ', 'ROOT')]

>> Bigrams: 
[[03,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('03', 'CARDINAL')] 


================================ Paragraph 302 =================================

949  

------------------- Sentence 1 -------------------

949   


>> Tokens are: 
[949,  ] 

>> PoS Tags are: 
[('949', 'NUM'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('949', 'nummod'), (' ', 'ROOT')]

>> Bigrams: 
[[949,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('949', 'CARDINAL')] 


================================ Paragraph 303 =================================

Statistical learning theory deals with the problem of finding a  

------------------- Sentence 1 -------------------

Statistical learning theory deals with the problem of finding a   


>> Tokens are: 
[Statistical, learning, theory, deals, problem, finding,  ] 

>> PoS Tags are: 
[('Statistical', 'ADJ'), ('learning', 'NOUN'), ('theory', 'NOUN'), ('deals', 'VERB'), ('problem', 'NOUN'), ('finding', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Statistical', 'amod'), ('learning', 'compound'), ('theory', 'nsubj'), ('deals', 'ROOT'), ('problem', 'pobj'), ('finding', 'pcomp'), (' ', 'dobj')]

>> Bigrams: 
[[Statistical, learning], [learning, theory], [theory, deals], [deals, problem], [problem, finding], [finding,  ]]

>> Trigrams: 
[[Statistical, learning, theory], [learning, theory, deals], [theory, deals, problem], [deals, problem, finding], [problem, finding,  ]]

>> Noun Phrases are: 
[Statistical learning theory, the problem]

>> Named Entities are: 
[] 


================================ Paragraph 304 =================================

predictive function based on data and it has a good number of  

------------------- Sentence 1 -------------------

predictive function based on data 


>> Tokens are: 
[predictive, function, based, data] 

>> PoS Tags are: 
[('predictive', 'ADJ'), ('function', 'NOUN'), ('based', 'VERB'), ('data', 'NOUN')] 

>> Dependency Tags are: 
[('predictive', 'amod'), ('function', 'ROOT'), ('based', 'acl'), ('data', 'pobj')]

>> Bigrams: 
[[predictive, function], [function, based], [based, data]]

>> Trigrams: 
[[predictive, function, based], [function, based, data]]

>> Noun Phrases are: 
[predictive function, data]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

and it has a good number of   


>> Tokens are: 
[good, number,  ] 

>> PoS Tags are: 
[('good', 'ADJ'), ('number', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('good', 'amod'), ('number', 'dobj'), (' ', 'pobj')]

>> Bigrams: 
[[good, number], [number,  ]]

>> Trigrams: 
[[good, number,  ]]

>> Noun Phrases are: 
[it, a good number]

>> Named Entities are: 
[] 


================================ Paragraph 305 =================================

applications in the field of AI. The major of goal of statistical  

------------------- Sentence 1 -------------------

applications in the field of AI. 


>> Tokens are: 
[applications, field, AI, .] 

>> PoS Tags are: 
[('applications', 'NOUN'), ('field', 'NOUN'), ('AI', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('applications', 'ROOT'), ('field', 'pobj'), ('AI', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[applications, field], [field, AI], [AI, .]]

>> Trigrams: 
[[applications, field, AI], [field, AI, .]]

>> Noun Phrases are: 
[applications, the field, AI]

>> Named Entities are: 
[('AI', 'ORG')] 

------------------- Sentence 2 -------------------

The major of goal of statistical   


>> Tokens are: 
[major, goal, statistical,  ] 

>> PoS Tags are: 
[('major', 'NOUN'), ('goal', 'NOUN'), ('statistical', 'ADJ'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('major', 'ROOT'), ('goal', 'pobj'), ('statistical', 'amod'), (' ', 'pobj')]

>> Bigrams: 
[[major, goal], [goal, statistical], [statistical,  ]]

>> Trigrams: 
[[major, goal, statistical], [goal, statistical,  ]]

>> Noun Phrases are: 
[The major, goal]

>> Named Entities are: 
[] 


================================ Paragraph 306 =================================

learning algorithms is to provide a framework for studying the  

------------------- Sentence 1 -------------------

learning algorithms is to provide a framework for studying the   


>> Tokens are: 
[learning, algorithms, provide, framework, studying,  ] 

>> PoS Tags are: 
[('learning', 'VERB'), ('algorithms', 'NOUN'), ('provide', 'VERB'), ('framework', 'NOUN'), ('studying', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('learning', 'csubj'), ('algorithms', 'dobj'), ('provide', 'xcomp'), ('framework', 'dobj'), ('studying', 'pcomp'), (' ', 'dobj')]

>> Bigrams: 
[[learning, algorithms], [algorithms, provide], [provide, framework], [framework, studying], [studying,  ]]

>> Trigrams: 
[[learning, algorithms, provide], [algorithms, provide, framework], [provide, framework, studying], [framework, studying,  ]]

>> Noun Phrases are: 
[algorithms, a framework]

>> Named Entities are: 
[] 


================================ Paragraph 307 =================================

problem of inference that is obtaining knowledge, making  

------------------- Sentence 1 -------------------

problem of inference that is obtaining knowledge, making   


>> Tokens are: 
[problem, inference, obtaining, knowledge, ,, making,  ] 

>> PoS Tags are: 
[('problem', 'NOUN'), ('inference', 'NOUN'), ('obtaining', 'VERB'), ('knowledge', 'NOUN'), (',', 'PUNCT'), ('making', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('problem', 'ROOT'), ('inference', 'pobj'), ('obtaining', 'relcl'), ('knowledge', 'dobj'), (',', 'punct'), ('making', 'advcl'), (' ', 'dobj')]

>> Bigrams: 
[[problem, inference], [inference, obtaining], [obtaining, knowledge], [knowledge, ,], [,, making], [making,  ]]

>> Trigrams: 
[[problem, inference, obtaining], [inference, obtaining, knowledge], [obtaining, knowledge, ,], [knowledge, ,, making], [,, making,  ]]

>> Noun Phrases are: 
[problem, inference, knowledge]

>> Named Entities are: 
[] 


================================ Paragraph 308 =================================

predictions and making decision by constructing model from a  

------------------- Sentence 1 -------------------

predictions and making decision by constructing model from a   


>> Tokens are: 
[predictions, making, decision, constructing, model,  ] 

>> PoS Tags are: 
[('predictions', 'NOUN'), ('making', 'VERB'), ('decision', 'NOUN'), ('constructing', 'VERB'), ('model', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('predictions', 'ROOT'), ('making', 'conj'), ('decision', 'dobj'), ('constructing', 'pcomp'), ('model', 'dobj'), (' ', 'pobj')]

>> Bigrams: 
[[predictions, making], [making, decision], [decision, constructing], [constructing, model], [model,  ]]

>> Trigrams: 
[[predictions, making, decision], [making, decision, constructing], [decision, constructing, model], [constructing, model,  ]]

>> Noun Phrases are: 
[predictions, decision, model]

>> Named Entities are: 
[] 


================================ Paragraph 309 =================================

set of data [17].  

------------------- Sentence 1 -------------------

set of data [17]. 


>> Tokens are: 
[set, data, [, 17, ], .] 

>> PoS Tags are: 
[('set', 'VERB'), ('data', 'NOUN'), ('[', 'PUNCT'), ('17', 'NUM'), (']', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('set', 'ROOT'), ('data', 'pobj'), ('[', 'punct'), ('17', 'npadvmod'), (']', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[set, data], [data, [], [[, 17], [17, ]], [], .]]

>> Trigrams: 
[[set, data, [], [data, [, 17], [[, 17, ]], [17, ], .]]

>> Noun Phrases are: 
[data]

>> Named Entities are: 
[('17', 'CARDINAL')] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 310 =================================

Bayesian networks are the most well known representative of  

------------------- Sentence 1 -------------------

Bayesian networks are the most well known representative of   


>> Tokens are: 
[Bayesian, networks, known, representative,  ] 

>> PoS Tags are: 
[('Bayesian', 'ADJ'), ('networks', 'NOUN'), ('known', 'VERB'), ('representative', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Bayesian', 'amod'), ('networks', 'nsubj'), ('known', 'amod'), ('representative', 'attr'), (' ', 'pobj')]

>> Bigrams: 
[[Bayesian, networks], [networks, known], [known, representative], [representative,  ]]

>> Trigrams: 
[[Bayesian, networks, known], [networks, known, representative], [known, representative,  ]]

>> Noun Phrases are: 
[Bayesian networks, the most well known representative]

>> Named Entities are: 
[('Bayesian', 'NORP')] 


================================ Paragraph 311 =================================

statistical learning algorithms. A good source for learning  

------------------- Sentence 1 -------------------

statistical learning algorithms. 


>> Tokens are: 
[statistical, learning, algorithms, .] 

>> PoS Tags are: 
[('statistical', 'ADJ'), ('learning', 'NOUN'), ('algorithms', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('statistical', 'amod'), ('learning', 'amod'), ('algorithms', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[statistical, learning], [learning, algorithms], [algorithms, .]]

>> Trigrams: 
[[statistical, learning, algorithms], [learning, algorithms, .]]

>> Noun Phrases are: 
[statistical learning algorithms]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

A good source for learning   


>> Tokens are: 
[good, source, learning,  ] 

>> PoS Tags are: 
[('good', 'ADJ'), ('source', 'NOUN'), ('learning', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('good', 'amod'), ('source', 'ROOT'), ('learning', 'pcomp'), (' ', 'dobj')]

>> Bigrams: 
[[good, source], [source, learning], [learning,  ]]

>> Trigrams: 
[[good, source, learning], [source, learning,  ]]

>> Noun Phrases are: 
[A good source]

>> Named Entities are: 
[] 


================================ Paragraph 312 =================================

Bayesian Networks (BN) theory is [18], where readers can learn  

------------------- Sentence 1 -------------------

Bayesian Networks (BN) theory is [18], where readers can learn   


>> Tokens are: 
[Bayesian, Networks, (, BN, ), theory, [, 18, ], ,, readers, learn,  ] 

>> PoS Tags are: 
[('Bayesian', 'PROPN'), ('Networks', 'PROPN'), ('(', 'PUNCT'), ('BN', 'NOUN'), (')', 'PUNCT'), ('theory', 'NOUN'), ('[', 'PUNCT'), ('18', 'NUM'), (']', 'PUNCT'), (',', 'PUNCT'), ('readers', 'NOUN'), ('learn', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Bayesian', 'compound'), ('Networks', 'nsubj'), ('(', 'punct'), ('BN', 'appos'), (')', 'punct'), ('theory', 'appos'), ('[', 'punct'), ('18', 'dep'), (']', 'punct'), (',', 'punct'), ('readers', 'nsubj'), ('learn', 'ccomp'), (' ', 'dobj')]

>> Bigrams: 
[[Bayesian, Networks], [Networks, (], [(, BN], [BN, )], [), theory], [theory, [], [[, 18], [18, ]], [], ,], [,, readers], [readers, learn], [learn,  ]]

>> Trigrams: 
[[Bayesian, Networks, (], [Networks, (, BN], [(, BN, )], [BN, ), theory], [), theory, [], [theory, [, 18], [[, 18, ]], [18, ], ,], [], ,, readers], [,, readers, learn], [readers, learn,  ]]

>> Noun Phrases are: 
[Bayesian Networks, BN, theory, readers]

>> Named Entities are: 
[('Bayesian Networks', 'ORG'), ('18', 'CARDINAL')] 


================================ Paragraph 313 =================================

applications of BN.  

------------------- Sentence 1 -------------------

applications of BN. 


>> Tokens are: 
[applications, BN, .] 

>> PoS Tags are: 
[('applications', 'NOUN'), ('BN', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('applications', 'ROOT'), ('BN', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[applications, BN], [BN, .]]

>> Trigrams: 
[[applications, BN, .]]

>> Noun Phrases are: 
[applications, BN]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 314 =================================

Statistical methods are characterized by having an explicit  

------------------- Sentence 1 -------------------

Statistical methods are characterized by having an explicit   


>> Tokens are: 
[Statistical, methods, characterized, having, explicit,  ] 

>> PoS Tags are: 
[('Statistical', 'ADJ'), ('methods', 'NOUN'), ('characterized', 'VERB'), ('having', 'VERB'), ('explicit', 'ADJ'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Statistical', 'amod'), ('methods', 'nsubjpass'), ('characterized', 'ROOT'), ('having', 'pcomp'), ('explicit', 'amod'), (' ', 'dobj')]

>> Bigrams: 
[[Statistical, methods], [methods, characterized], [characterized, having], [having, explicit], [explicit,  ]]

>> Trigrams: 
[[Statistical, methods, characterized], [methods, characterized, having], [characterized, having, explicit], [having, explicit,  ]]

>> Noun Phrases are: 
[Statistical methods]

>> Named Entities are: 
[] 


================================ Paragraph 315 =================================

underlying probability model, which provides a probability that an  

------------------- Sentence 1 -------------------

underlying probability model, which provides a probability that an   


>> Tokens are: 
[underlying, probability, model, ,, provides, probability,  ] 

>> PoS Tags are: 
[('underlying', 'VERB'), ('probability', 'NOUN'), ('model', 'NOUN'), (',', 'PUNCT'), ('provides', 'VERB'), ('probability', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('underlying', 'amod'), ('probability', 'compound'), ('model', 'ROOT'), (',', 'punct'), ('provides', 'relcl'), ('probability', 'dobj'), (' ', 'appos')]

>> Bigrams: 
[[underlying, probability], [probability, model], [model, ,], [,, provides], [provides, probability], [probability,  ]]

>> Trigrams: 
[[underlying, probability, model], [probability, model, ,], [model, ,, provides], [,, provides, probability], [provides, probability,  ]]

>> Noun Phrases are: 
[underlying probability model, a probability]

>> Named Entities are: 
[] 


================================ Paragraph 316 =================================

instance belongs in each class, rather than simply a classification.  

------------------- Sentence 1 -------------------

instance belongs in each class, rather than simply a classification. 


>> Tokens are: 
[instance, belongs, class, ,, simply, classification, .] 

>> PoS Tags are: 
[('instance', 'NOUN'), ('belongs', 'VERB'), ('class', 'NOUN'), (',', 'PUNCT'), ('simply', 'ADV'), ('classification', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('instance', 'nsubj'), ('belongs', 'ROOT'), ('class', 'pobj'), (',', 'punct'), ('simply', 'advmod'), ('classification', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[instance, belongs], [belongs, class], [class, ,], [,, simply], [simply, classification], [classification, .]]

>> Trigrams: 
[[instance, belongs, class], [belongs, class, ,], [class, ,, simply], [,, simply, classification], [simply, classification, .]]

>> Noun Phrases are: 
[instance, each class, simply a classification]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 317 =================================

Linear Discriminate Analysis (LDA),which was developed in  

------------------- Sentence 1 -------------------

Linear Discriminate Analysis (LDA),which was developed in   


>> Tokens are: 
[Linear, Discriminate, Analysis, (, LDA),which, developed,  ] 

>> PoS Tags are: 
[('Linear', 'PROPN'), ('Discriminate', 'PROPN'), ('Analysis', 'PROPN'), ('(', 'PUNCT'), ('LDA),which', 'PROPN'), ('developed', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Linear', 'compound'), ('Discriminate', 'compound'), ('Analysis', 'ROOT'), ('(', 'punct'), ('LDA),which', 'nsubjpass'), ('developed', 'relcl'), (' ', 'pobj')]

>> Bigrams: 
[[Linear, Discriminate], [Discriminate, Analysis], [Analysis, (], [(, LDA),which], [LDA),which, developed], [developed,  ]]

>> Trigrams: 
[[Linear, Discriminate, Analysis], [Discriminate, Analysis, (], [Analysis, (, LDA),which], [(, LDA),which, developed], [LDA),which, developed,  ]]

>> Noun Phrases are: 
[Linear Discriminate Analysis, LDA),which]

>> Named Entities are: 
[('Linear Discriminate Analysis', 'ORG'), ('LDA),which', 'PERSON')] 


================================ Paragraph 318 =================================

1936, and the related Fisher’s linear discriminate are famous  

------------------- Sentence 1 -------------------

1936, and the related Fisher’s linear discriminate are famous   


>> Tokens are: 
[1936, ,, related, Fisher, linear, discriminate, famous,  ] 

>> PoS Tags are: 
[('1936', 'NUM'), (',', 'PUNCT'), ('related', 'ADJ'), ('Fisher', 'PROPN'), ('linear', 'ADJ'), ('discriminate', 'NOUN'), ('famous', 'ADJ'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('1936', 'nsubj'), (',', 'punct'), ('related', 'amod'), ('Fisher', 'poss'), ('linear', 'amod'), ('discriminate', 'nsubj'), ('famous', 'acomp'), (' ', 'punct')]

>> Bigrams: 
[[1936, ,], [,, related], [related, Fisher], [Fisher, linear], [linear, discriminate], [discriminate, famous], [famous,  ]]

>> Trigrams: 
[[1936, ,, related], [,, related, Fisher], [related, Fisher, linear], [Fisher, linear, discriminate], [linear, discriminate, famous], [discriminate, famous,  ]]

>> Noun Phrases are: 
[the related Fisher’s linear discriminate]

>> Named Entities are: 
[('1936', 'DATE'), ('Fisher', 'ORG')] 


================================ Paragraph 319 =================================

methods used in statistics and machine learning to retrieve the  

------------------- Sentence 1 -------------------

methods used in statistics and machine learning to retrieve the   


>> Tokens are: 
[methods, statistics, machine, learning, retrieve,  ] 

>> PoS Tags are: 
[('methods', 'NOUN'), ('statistics', 'NOUN'), ('machine', 'NOUN'), ('learning', 'NOUN'), ('retrieve', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('methods', 'ROOT'), ('statistics', 'pobj'), ('machine', 'compound'), ('learning', 'conj'), ('retrieve', 'xcomp'), (' ', 'dobj')]

>> Bigrams: 
[[methods, statistics], [statistics, machine], [machine, learning], [learning, retrieve], [retrieve,  ]]

>> Trigrams: 
[[methods, statistics, machine], [statistics, machine, learning], [machine, learning, retrieve], [learning, retrieve,  ]]

>> Noun Phrases are: 
[methods, statistics, machine learning]

>> Named Entities are: 
[] 


================================ Paragraph 320 =================================

linear combination of features which best separate two or more  

------------------- Sentence 1 -------------------

linear combination of features which best separate two or more   


>> Tokens are: 
[linear, combination, features, best, separate,  ] 

>> PoS Tags are: 
[('linear', 'ADJ'), ('combination', 'NOUN'), ('features', 'NOUN'), ('best', 'ADV'), ('separate', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('linear', 'amod'), ('combination', 'ROOT'), ('features', 'pobj'), ('best', 'advmod'), ('separate', 'relcl'), (' ', 'punct')]

>> Bigrams: 
[[linear, combination], [combination, features], [features, best], [best, separate], [separate,  ]]

>> Trigrams: 
[[linear, combination, features], [combination, features, best], [features, best, separate], [best, separate,  ]]

>> Noun Phrases are: 
[linear combination, features]

>> Named Entities are: 
[('two', 'CARDINAL')] 


================================ Paragraph 321 =================================

classes of object [1]. The purpose of discriminate analysis is to  

------------------- Sentence 1 -------------------

classes of object [1]. 


>> Tokens are: 
[classes, object, [, 1, ], .] 

>> PoS Tags are: 
[('classes', 'NOUN'), ('object', 'NOUN'), ('[', 'PUNCT'), ('1', 'NUM'), (']', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('classes', 'ROOT'), ('object', 'pobj'), ('[', 'punct'), ('1', 'appos'), (']', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[classes, object], [object, [], [[, 1], [1, ]], [], .]]

>> Trigrams: 
[[classes, object, [], [object, [, 1], [[, 1, ]], [1, ], .]]

>> Noun Phrases are: 
[classes, object]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

The purpose of discriminate analysis is to   


>> Tokens are: 
[purpose, discriminate, analysis,  ] 

>> PoS Tags are: 
[('purpose', 'NOUN'), ('discriminate', 'ADJ'), ('analysis', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('purpose', 'nsubj'), ('discriminate', 'amod'), ('analysis', 'pobj'), (' ', 'pobj')]

>> Bigrams: 
[[purpose, discriminate], [discriminate, analysis], [analysis,  ]]

>> Trigrams: 
[[purpose, discriminate, analysis], [discriminate, analysis,  ]]

>> Noun Phrases are: 
[The purpose, discriminate analysis]

>> Named Entities are: 
[] 


================================ Paragraph 322 =================================

classify objects (nations, people, customers…) into one of two or  

------------------- Sentence 1 -------------------

classify objects (nations, people, customers…) into one of two or   


>> Tokens are: 
[classify, objects, (, nations, ,, people, ,, customers, …, ),  ] 

>> PoS Tags are: 
[('classify', 'NOUN'), ('objects', 'NOUN'), ('(', 'PUNCT'), ('nations', 'NOUN'), (',', 'PUNCT'), ('people', 'NOUN'), (',', 'PUNCT'), ('customers', 'NOUN'), ('…', 'PUNCT'), (')', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('classify', 'compound'), ('objects', 'ROOT'), ('(', 'punct'), ('nations', 'appos'), (',', 'punct'), ('people', 'conj'), (',', 'punct'), ('customers', 'conj'), ('…', 'punct'), (')', 'punct'), (' ', 'conj')]

>> Bigrams: 
[[classify, objects], [objects, (], [(, nations], [nations, ,], [,, people], [people, ,], [,, customers], [customers, …], […, )], [),  ]]

>> Trigrams: 
[[classify, objects, (], [objects, (, nations], [(, nations, ,], [nations, ,, people], [,, people, ,], [people, ,, customers], [,, customers, …], [customers, …, )], […, ),  ]]

>> Noun Phrases are: 
[classify objects, nations, people, customers]

>> Named Entities are: 
[('one', 'CARDINAL'), ('two', 'CARDINAL')] 


================================ Paragraph 323 =================================

more groups based on set of features that describe the objects (e.g.-  

------------------- Sentence 1 -------------------

more groups based on set of features that describe the objects ( 


>> Tokens are: 
[groups, based, set, features, describe, objects, (] 

>> PoS Tags are: 
[('groups', 'NOUN'), ('based', 'VERB'), ('set', 'NOUN'), ('features', 'NOUN'), ('describe', 'VERB'), ('objects', 'NOUN'), ('(', 'PUNCT')] 

>> Dependency Tags are: 
[('groups', 'ROOT'), ('based', 'acl'), ('set', 'pobj'), ('features', 'pobj'), ('describe', 'relcl'), ('objects', 'dobj'), ('(', 'punct')]

>> Bigrams: 
[[groups, based], [based, set], [set, features], [features, describe], [describe, objects], [objects, (]]

>> Trigrams: 
[[groups, based, set], [based, set, features], [set, features, describe], [features, describe, objects], [describe, objects, (]]

>> Noun Phrases are: 
[more groups, set, features, the objects]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

e.g.-   


>> Tokens are: 
[e.g.-,  ] 

>> PoS Tags are: 
[('e.g.-', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('e.g.-', 'ROOT'), (' ', 'pobj')]

>> Bigrams: 
[[e.g.-,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('e.g.-', 'ORG')] 


================================ Paragraph 324 =================================

gender, marital status, income, height, weight...). The another  

------------------- Sentence 1 -------------------

gender, marital status, income, height, weight...). 


>> Tokens are: 
[gender, ,, marital, status, ,, income, ,, height, ,, weight, ..., ), .] 

>> PoS Tags are: 
[('gender', 'NOUN'), (',', 'PUNCT'), ('marital', 'ADJ'), ('status', 'NOUN'), (',', 'PUNCT'), ('income', 'NOUN'), (',', 'PUNCT'), ('height', 'NOUN'), (',', 'PUNCT'), ('weight', 'NOUN'), ('...', 'PUNCT'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('gender', 'ROOT'), (',', 'punct'), ('marital', 'amod'), ('status', 'conj'), (',', 'punct'), ('income', 'conj'), (',', 'punct'), ('height', 'nmod'), (',', 'punct'), ('weight', 'conj'), ('...', 'punct'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[gender, ,], [,, marital], [marital, status], [status, ,], [,, income], [income, ,], [,, height], [height, ,], [,, weight], [weight, ...], [..., )], [), .]]

>> Trigrams: 
[[gender, ,, marital], [,, marital, status], [marital, status, ,], [status, ,, income], [,, income, ,], [income, ,, height], [,, height, ,], [height, ,, weight], [,, weight, ...], [weight, ..., )], [..., ), .]]

>> Noun Phrases are: 
[gender, marital status, income, height, weight]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

The another   


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'punct')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 325 =================================

method for estimating probability distributions from data is  

------------------- Sentence 1 -------------------

method for estimating probability distributions from data is   


>> Tokens are: 
[method, estimating, probability, distributions, data,  ] 

>> PoS Tags are: 
[('method', 'NOUN'), ('estimating', 'VERB'), ('probability', 'NOUN'), ('distributions', 'NOUN'), ('data', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('method', 'nsubj'), ('estimating', 'pcomp'), ('probability', 'compound'), ('distributions', 'dobj'), ('data', 'pobj'), (' ', 'attr')]

>> Bigrams: 
[[method, estimating], [estimating, probability], [probability, distributions], [distributions, data], [data,  ]]

>> Trigrams: 
[[method, estimating, probability], [estimating, probability, distributions], [probability, distributions, data], [distributions, data,  ]]

>> Noun Phrases are: 
[method, probability distributions, data]

>> Named Entities are: 
[] 


================================ Paragraph 326 =================================

maximum entropy. According to the base theory of maximum  

------------------- Sentence 1 -------------------

maximum entropy. 


>> Tokens are: 
[maximum, entropy, .] 

>> PoS Tags are: 
[('maximum', 'ADJ'), ('entropy', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('maximum', 'amod'), ('entropy', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[maximum, entropy], [entropy, .]]

>> Trigrams: 
[[maximum, entropy, .]]

>> Noun Phrases are: 
[maximum entropy]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

According to the base theory of maximum   


>> Tokens are: 
[According, base, theory, maximum,  ] 

>> PoS Tags are: 
[('According', 'VERB'), ('base', 'NOUN'), ('theory', 'NOUN'), ('maximum', 'ADJ'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('According', 'ROOT'), ('base', 'compound'), ('theory', 'pobj'), ('maximum', 'amod'), (' ', 'pobj')]

>> Bigrams: 
[[According, base], [base, theory], [theory, maximum], [maximum,  ]]

>> Trigrams: 
[[According, base, theory], [base, theory, maximum], [theory, maximum,  ]]

>> Noun Phrases are: 
[the base theory]

>> Named Entities are: 
[] 


================================ Paragraph 327 =================================

entropy, if nothing is known about a distribution except that it  

------------------- Sentence 1 -------------------

entropy, if nothing is known about a distribution except that it 


>> Tokens are: 
[entropy, ,, known, distribution] 

>> PoS Tags are: 
[('entropy', 'NOUN'), (',', 'PUNCT'), ('known', 'VERB'), ('distribution', 'NOUN')] 

>> Dependency Tags are: 
[('entropy', 'ROOT'), (',', 'punct'), ('known', 'advcl'), ('distribution', 'pobj')]

>> Bigrams: 
[[entropy, ,], [,, known], [known, distribution]]

>> Trigrams: 
[[entropy, ,, known], [,, known, distribution]]

>> Noun Phrases are: 
[entropy, nothing, a distribution, it]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 328 =================================

belongs to a certain class, then the distribution with the largest  

------------------- Sentence 1 -------------------

belongs to a certain class, then 


>> Tokens are: 
[belongs, certain, class, ,] 

>> PoS Tags are: 
[('belongs', 'VERB'), ('certain', 'ADJ'), ('class', 'NOUN'), (',', 'PUNCT')] 

>> Dependency Tags are: 
[('belongs', 'ROOT'), ('certain', 'amod'), ('class', 'pobj'), (',', 'punct')]

>> Bigrams: 
[[belongs, certain], [certain, class], [class, ,]]

>> Trigrams: 
[[belongs, certain, class], [certain, class, ,]]

>> Noun Phrases are: 
[a certain class]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

the distribution with the largest   


>> Tokens are: 
[distribution, largest,  ] 

>> PoS Tags are: 
[('distribution', 'NOUN'), ('largest', 'ADJ'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('distribution', 'ROOT'), ('largest', 'amod'), (' ', 'pobj')]

>> Bigrams: 
[[distribution, largest], [largest,  ]]

>> Trigrams: 
[[distribution, largest,  ]]

>> Noun Phrases are: 
[the distribution]

>> Named Entities are: 
[] 


================================ Paragraph 329 =================================

entropy should be chosen as the default.  

------------------- Sentence 1 -------------------

entropy should be chosen as the default. 


>> Tokens are: 
[entropy, chosen, default, .] 

>> PoS Tags are: 
[('entropy', 'NOUN'), ('chosen', 'VERB'), ('default', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('entropy', 'nsubjpass'), ('chosen', 'ROOT'), ('default', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[entropy, chosen], [chosen, default], [default, .]]

>> Trigrams: 
[[entropy, chosen, default], [chosen, default, .]]

>> Noun Phrases are: 
[entropy, the default]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 330 =================================

4.1 NAIVE BAYES CLASSIFIERS  

------------------- Sentence 1 -------------------

4.1 NAIVE BAYES CLASSIFIERS   


>> Tokens are: 
[4.1, NAIVE, BAYES, CLASSIFIERS,  ] 

>> PoS Tags are: 
[('4.1', 'NUM'), ('NAIVE', 'PROPN'), ('BAYES', 'PROPN'), ('CLASSIFIERS', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('4.1', 'nummod'), ('NAIVE', 'compound'), ('BAYES', 'compound'), ('CLASSIFIERS', 'compound'), (' ', 'ROOT')]

>> Bigrams: 
[[4.1, NAIVE], [NAIVE, BAYES], [BAYES, CLASSIFIERS], [CLASSIFIERS,  ]]

>> Trigrams: 
[[4.1, NAIVE, BAYES], [NAIVE, BAYES, CLASSIFIERS], [BAYES, CLASSIFIERS,  ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('4.1', 'CARDINAL')] 


================================ Paragraph 331 =================================

Bayesian networks are widely used to perform classification  

------------------- Sentence 1 -------------------

Bayesian networks are widely used to perform classification   


>> Tokens are: 
[Bayesian, networks, widely, perform, classification,  ] 

>> PoS Tags are: 
[('Bayesian', 'ADJ'), ('networks', 'NOUN'), ('widely', 'ADV'), ('perform', 'VERB'), ('classification', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Bayesian', 'amod'), ('networks', 'nsubjpass'), ('widely', 'advmod'), ('perform', 'xcomp'), ('classification', 'dobj'), (' ', 'punct')]

>> Bigrams: 
[[Bayesian, networks], [networks, widely], [widely, perform], [perform, classification], [classification,  ]]

>> Trigrams: 
[[Bayesian, networks, widely], [networks, widely, perform], [widely, perform, classification], [perform, classification,  ]]

>> Noun Phrases are: 
[Bayesian networks, classification]

>> Named Entities are: 
[('Bayesian', 'NORP')] 


================================ Paragraph 332 =================================

tasks. Naive Bayesian Networks (NBN) are very simple  

------------------- Sentence 1 -------------------

tasks. 


>> Tokens are: 
[tasks, .] 

>> PoS Tags are: 
[('tasks', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('tasks', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[tasks, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[tasks]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Naive Bayesian Networks (NBN) are very simple   


>> Tokens are: 
[Naive, Bayesian, Networks, (, NBN, ), simple,  ] 

>> PoS Tags are: 
[('Naive', 'PROPN'), ('Bayesian', 'PROPN'), ('Networks', 'PROPN'), ('(', 'PUNCT'), ('NBN', 'PROPN'), (')', 'PUNCT'), ('simple', 'ADJ'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Naive', 'compound'), ('Bayesian', 'compound'), ('Networks', 'nsubj'), ('(', 'punct'), ('NBN', 'appos'), (')', 'punct'), ('simple', 'acomp'), (' ', 'punct')]

>> Bigrams: 
[[Naive, Bayesian], [Bayesian, Networks], [Networks, (], [(, NBN], [NBN, )], [), simple], [simple,  ]]

>> Trigrams: 
[[Naive, Bayesian, Networks], [Bayesian, Networks, (], [Networks, (, NBN], [(, NBN, )], [NBN, ), simple], [), simple,  ]]

>> Noun Phrases are: 
[Naive Bayesian Networks, NBN]

>> Named Entities are: 
[('Naive Bayesian Networks', 'ORG'), ('NBN', 'ORG')] 


================================ Paragraph 333 =================================

Bayesian networks which are composed of directed acyclic  

------------------- Sentence 1 -------------------

Bayesian networks which are composed of directed acyclic   


>> Tokens are: 
[Bayesian, networks, composed, directed, acyclic,  ] 

>> PoS Tags are: 
[('Bayesian', 'ADJ'), ('networks', 'NOUN'), ('composed', 'VERB'), ('directed', 'VERB'), ('acyclic', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Bayesian', 'amod'), ('networks', 'nsubj'), ('composed', 'relcl'), ('directed', 'amod'), ('acyclic', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[Bayesian, networks], [networks, composed], [composed, directed], [directed, acyclic], [acyclic,  ]]

>> Trigrams: 
[[Bayesian, networks, composed], [networks, composed, directed], [composed, directed, acyclic], [directed, acyclic,  ]]

>> Noun Phrases are: 
[Bayesian networks]

>> Named Entities are: 
[('Bayesian', 'NORP')] 


================================ Paragraph 334 =================================

graphs with only one parent (representing the unobserved node)  

------------------- Sentence 1 -------------------

graphs with only one parent (representing the unobserved node)   


>> Tokens are: 
[graphs, parent, (, representing, unobserved, node, ),  ] 

>> PoS Tags are: 
[('graphs', 'NOUN'), ('parent', 'NOUN'), ('(', 'PUNCT'), ('representing', 'VERB'), ('unobserved', 'ADJ'), ('node', 'NOUN'), (')', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('graphs', 'ROOT'), ('parent', 'pobj'), ('(', 'punct'), ('representing', 'acl'), ('unobserved', 'amod'), ('node', 'dobj'), (')', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[graphs, parent], [parent, (], [(, representing], [representing, unobserved], [unobserved, node], [node, )], [),  ]]

>> Trigrams: 
[[graphs, parent, (], [parent, (, representing], [(, representing, unobserved], [representing, unobserved, node], [unobserved, node, )], [node, ),  ]]

>> Noun Phrases are: 
[graphs, only one parent, the unobserved node]

>> Named Entities are: 
[('only one', 'CARDINAL')] 


================================ Paragraph 335 =================================

and several children (corresponding to observed nodes) with a  

------------------- Sentence 1 -------------------

and 


>> Tokens are: 
[] 

>> PoS Tags are: 
[] 

>> Dependency Tags are: 
[]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

several children (corresponding to observed nodes) with a   


>> Tokens are: 
[children, (, corresponding, observed, nodes, ),  ] 

>> PoS Tags are: 
[('children', 'NOUN'), ('(', 'PUNCT'), ('corresponding', 'VERB'), ('observed', 'VERB'), ('nodes', 'NOUN'), (')', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('children', 'ROOT'), ('(', 'punct'), ('corresponding', 'acl'), ('observed', 'amod'), ('nodes', 'pobj'), (')', 'punct'), (' ', 'pobj')]

>> Bigrams: 
[[children, (], [(, corresponding], [corresponding, observed], [observed, nodes], [nodes, )], [),  ]]

>> Trigrams: 
[[children, (, corresponding], [(, corresponding, observed], [corresponding, observed, nodes], [observed, nodes, )], [nodes, ),  ]]

>> Noun Phrases are: 
[several children, observed nodes]

>> Named Entities are: 
[] 


================================ Paragraph 336 =================================

strong assumption of independence among child nodes in the  

------------------- Sentence 1 -------------------

strong assumption of independence among child nodes in the   


>> Tokens are: 
[strong, assumption, independence, child, nodes,  ] 

>> PoS Tags are: 
[('strong', 'ADJ'), ('assumption', 'NOUN'), ('independence', 'NOUN'), ('child', 'NOUN'), ('nodes', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('strong', 'amod'), ('assumption', 'ROOT'), ('independence', 'pobj'), ('child', 'compound'), ('nodes', 'pobj'), (' ', 'pobj')]

>> Bigrams: 
[[strong, assumption], [assumption, independence], [independence, child], [child, nodes], [nodes,  ]]

>> Trigrams: 
[[strong, assumption, independence], [assumption, independence, child], [independence, child, nodes], [child, nodes,  ]]

>> Noun Phrases are: 
[strong assumption, independence, child nodes]

>> Named Entities are: 
[] 


================================ Paragraph 337 =================================

context of their parent [21]. According to author [20] the  

------------------- Sentence 1 -------------------

context of their parent [21]. 


>> Tokens are: 
[context, parent, [, 21, ], .] 

>> PoS Tags are: 
[('context', 'NOUN'), ('parent', 'NOUN'), ('[', 'PUNCT'), ('21', 'NUM'), (']', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('context', 'ROOT'), ('parent', 'pobj'), ('[', 'punct'), ('21', 'appos'), (']', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[context, parent], [parent, [], [[, 21], [21, ]], [], .]]

>> Trigrams: 
[[context, parent, [], [parent, [, 21], [[, 21, ]], [21, ], .]]

>> Noun Phrases are: 
[context, their parent]

>> Named Entities are: 
[('21', 'CARDINAL')] 

------------------- Sentence 2 -------------------

According to author [20] 


>> Tokens are: 
[According, author, [, 20, ]] 

>> PoS Tags are: 
[('According', 'VERB'), ('author', 'NOUN'), ('[', 'PUNCT'), ('20', 'NUM'), (']', 'PUNCT')] 

>> Dependency Tags are: 
[('According', 'prep'), ('author', 'pobj'), ('[', 'punct'), ('20', 'ROOT'), (']', 'punct')]

>> Bigrams: 
[[According, author], [author, [], [[, 20], [20, ]]]

>> Trigrams: 
[[According, author, [], [author, [, 20], [[, 20, ]]]

>> Noun Phrases are: 
[author]

>> Named Entities are: 
[('20', 'CARDINAL')] 

------------------- Sentence 3 -------------------

the   


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 338 =================================

independence model (Naive Bayes) is based on estimating:  

------------------- Sentence 1 -------------------

independence model (Naive Bayes) is based on estimating:   


>> Tokens are: 
[independence, model, (, Naive, Bayes, ), based, estimating, :,  ] 

>> PoS Tags are: 
[('independence', 'NOUN'), ('model', 'NOUN'), ('(', 'PUNCT'), ('Naive', 'PROPN'), ('Bayes', 'PROPN'), (')', 'PUNCT'), ('based', 'VERB'), ('estimating', 'VERB'), (':', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('independence', 'compound'), ('model', 'nsubjpass'), ('(', 'punct'), ('Naive', 'compound'), ('Bayes', 'appos'), (')', 'punct'), ('based', 'ROOT'), ('estimating', 'pcomp'), (':', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[independence, model], [model, (], [(, Naive], [Naive, Bayes], [Bayes, )], [), based], [based, estimating], [estimating, :], [:,  ]]

>> Trigrams: 
[[independence, model, (], [model, (, Naive], [(, Naive, Bayes], [Naive, Bayes, )], [Bayes, ), based], [), based, estimating], [based, estimating, :], [estimating, :,  ]]

>> Noun Phrases are: 
[independence model, (Naive Bayes]

>> Named Entities are: 
[('Bayes', 'ORG')] 


================================ Paragraph 339 =================================

      

------------------- Sentence 1 -------------------

      


>> Tokens are: 
[  , , , , ] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('\uf028', 'ADJ'), ('\uf029', 'PROPN'), ('\uf028', 'NOUN'), ('\uf029', 'PROPN')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('\uf028', 'appos'), ('\uf029', 'compound'), ('\uf028', 'nmod'), ('\uf029', 'appos')]

>> Bigrams: 
[[  , ], [, ], [, ], [, ]]

>> Trigrams: 
[[  , , ], [, , ], [, , ]]

>> Noun Phrases are: 
[  ]

>> Named Entities are: 
[('\uf029', 'ORG'), ('\uf029', 'ORG')] 


================================ Paragraph 340 =================================

        

------------------- Sentence 1 -------------------

        


>> Tokens are: 
[, , , , , , , ] 

>> PoS Tags are: 
[('\uf028', 'ADJ'), ('\uf029', 'PROPN'), ('\uf028', 'NOUN'), ('\uf029', 'PROPN'), ('\uf028', 'NOUN'), ('\uf029', 'PROPN'), ('\uf028', 'NOUN'), ('\uf029', 'PROPN')] 

>> Dependency Tags are: 
[('\uf028', 'amod'), ('\uf029', 'compound'), ('\uf028', 'nmod'), ('\uf029', 'compound'), ('\uf028', 'nmod'), ('\uf029', 'compound'), ('\uf028', 'nmod'), ('\uf029', 'ROOT')]

>> Bigrams: 
[[, ], [, ], [, ], [, ], [, ], [, ], [, ]]

>> Trigrams: 
[[, , ], [, , ], [, , ], [, , ], [, , ], [, , ]]

>> Noun Phrases are: 
[       ]

>> Named Entities are: 
[('\uf029', 'ORG'), ('\uf029', 'ORG'), ('\uf029', 'ORG'), ('\uf029', 'ORG')] 


================================ Paragraph 341 =================================

       JXPjP 

------------------- Sentence 1 -------------------

      


>> Tokens are: 
[, , , , , ] 

>> PoS Tags are: 
[('\uf028', 'ADJ'), ('\uf029', 'PROPN'), ('\uf028', 'NOUN'), ('\uf029', 'PROPN'), ('\uf028', 'NOUN'), ('\uf029', 'PROPN')] 

>> Dependency Tags are: 
[('\uf028', 'ROOT'), ('\uf029', 'compound'), ('\uf028', 'nmod'), ('\uf029', 'compound'), ('\uf028', 'nmod'), ('\uf029', 'pobj')]

>> Bigrams: 
[[, ], [, ], [, ], [, ], [, ]]

>> Trigrams: 
[[, , ], [, , ], [, , ], [, , ]]

>> Noun Phrases are: 
[    ]

>> Named Entities are: 
[('\uf029', 'ORG'), ('\uf029', 'ORG'), ('\uf029', 'ORG')] 

------------------- Sentence 2 -------------------

 JXPjP 


>> Tokens are: 
[, JXPjP] 

>> PoS Tags are: 
[('\uf028', 'DET'), ('\uf029JXPjP', 'NOUN')] 

>> Dependency Tags are: 
[('\uf028', 'amod'), ('\uf029JXPjP', 'ROOT')]

>> Bigrams: 
[[, JXPjP]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[ JXPjP]

>> Named Entities are: 
[] 


================================ Paragraph 342 =================================

XPPiP 

------------------- Sentence 1 -------------------

XPPiP 


>> Tokens are: 
[XPPiP] 

>> PoS Tags are: 
[('XPPiP', 'PROPN')] 

>> Dependency Tags are: 
[('XPPiP', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[XPPiP]

>> Named Entities are: 
[('XPPiP', 'PERSON')] 


================================ Paragraph 343 =================================

JXPjP 

------------------- Sentence 1 -------------------

JXPjP 


>> Tokens are: 
[JXPjP] 

>> PoS Tags are: 
[('JXPjP', 'ADP')] 

>> Dependency Tags are: 
[('JXPjP', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 344 =================================

XPiP 

------------------- Sentence 1 -------------------

XPiP 


>> Tokens are: 
[XPiP] 

>> PoS Tags are: 
[('XPiP', 'PROPN')] 

>> Dependency Tags are: 
[('XPiP', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[XPiP]

>> Named Entities are: 
[('XPiP', 'GPE')] 


================================ Paragraph 345 =================================

XJP 

------------------- Sentence 1 -------------------

XJP 


>> Tokens are: 
[XJP] 

>> PoS Tags are: 
[('XJP', 'NOUN')] 

>> Dependency Tags are: 
[('XJP', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[XJP]

>> Named Entities are: 
[('XJP', 'ORG')] 


================================ Paragraph 346 =================================

XP R 

------------------- Sentence 1 -------------------

XP R 


>> Tokens are: 
[XP, R] 

>> PoS Tags are: 
[('XP', 'PROPN'), ('R', 'PROPN')] 

>> Dependency Tags are: 
[('XP', 'compound'), ('R', 'ROOT')]

>> Bigrams: 
[[XP, R]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[XP R]

>> Named Entities are: 
[] 


================================ Paragraph 347 =================================

r 

------------------- Sentence 1 -------------------

r 


>> Tokens are: 
[r] 

>> PoS Tags are: 
[('r', 'X')] 

>> Dependency Tags are: 
[('r', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 348 =================================

r | 

------------------- Sentence 1 -------------------

r | 


>> Tokens are: 
[r, |] 

>> PoS Tags are: 
[('r', 'X'), ('|', 'ADV')] 

>> Dependency Tags are: 
[('r', 'ROOT'), ('|', 'punct')]

>> Bigrams: 
[[r, |]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 349 =================================

| 

------------------- Sentence 1 -------------------

| 


>> Tokens are: 
[|] 

>> PoS Tags are: 
[('|', 'NOUN')] 

>> Dependency Tags are: 
[('|', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[|]

>> Named Entities are: 
[] 


================================ Paragraph 350 =================================

| 

------------------- Sentence 1 -------------------

| 


>> Tokens are: 
[|] 

>> PoS Tags are: 
[('|', 'NOUN')] 

>> Dependency Tags are: 
[('|', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[|]

>> Named Entities are: 
[] 


================================ Paragraph 351 =================================

| 

------------------- Sentence 1 -------------------

| 


>> Tokens are: 
[|] 

>> PoS Tags are: 
[('|', 'NOUN')] 

>> Dependency Tags are: 
[('|', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[|]

>> Named Entities are: 
[] 


================================ Paragraph 352 =================================

| 

------------------- Sentence 1 -------------------

| 


>> Tokens are: 
[|] 

>> PoS Tags are: 
[('|', 'NOUN')] 

>> Dependency Tags are: 
[('|', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[|]

>> Named Entities are: 
[] 


================================ Paragraph 353 =================================

| 

------------------- Sentence 1 -------------------

| 


>> Tokens are: 
[|] 

>> PoS Tags are: 
[('|', 'NOUN')] 

>> Dependency Tags are: 
[('|', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[|]

>> Named Entities are: 
[] 


================================ Paragraph 354 =================================

 

------------------- Sentence 1 -------------------

 


>> Tokens are: 
[] 

>> PoS Tags are: 
[('\uf050', 'PROPN')] 

>> Dependency Tags are: 
[('\uf050', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 355 =================================

  

------------------- Sentence 1 -------------------

  


>> Tokens are: 
[, ] 

>> PoS Tags are: 
[('\uf050', 'PROPN'), ('\uf03d\uf03d\uf03d', 'X')] 

>> Dependency Tags are: 
[('\uf050', 'compound'), ('\uf03d\uf03d\uf03d', 'ROOT')]

>> Bigrams: 
[[, ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 356 =================================

  (3)  

------------------- Sentence 1 -------------------

  (3)   


>> Tokens are: 
[,  , (, 3, ),  ] 

>> PoS Tags are: 
[('\uf069\uf069\uf069', 'ADJ'), (' ', 'SPACE'), ('(', 'PUNCT'), ('3', 'X'), (')', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('\uf069\uf069\uf069', 'amod'), (' ', 'ROOT'), ('(', 'punct'), ('3', 'appos'), (')', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[,  ], [ , (], [(, 3], [3, )], [),  ]]

>> Trigrams: 
[[,  , (], [ , (, 3], [(, 3, )], [3, ),  ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('3', 'CARDINAL')] 


================================ Paragraph 357 =================================

Here comparing these two probabilities, the larger  

------------------- Sentence 1 -------------------

Here comparing these two probabilities, the larger   


>> Tokens are: 
[comparing, probabilities, ,, larger,  ] 

>> PoS Tags are: 
[('comparing', 'VERB'), ('probabilities', 'NOUN'), (',', 'PUNCT'), ('larger', 'ADJ'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('comparing', 'ROOT'), ('probabilities', 'dobj'), (',', 'punct'), ('larger', 'amod'), (' ', 'dobj')]

>> Bigrams: 
[[comparing, probabilities], [probabilities, ,], [,, larger], [larger,  ]]

>> Trigrams: 
[[comparing, probabilities, ,], [probabilities, ,, larger], [,, larger,  ]]

>> Noun Phrases are: 
[these two probabilities]

>> Named Entities are: 
[('two', 'CARDINAL')] 


================================ Paragraph 358 =================================

probability indicates that the class label value that is more likely  

------------------- Sentence 1 -------------------

probability indicates that the class label value that is more likely   


>> Tokens are: 
[probability, indicates, class, label, value, likely,  ] 

>> PoS Tags are: 
[('probability', 'NOUN'), ('indicates', 'VERB'), ('class', 'NOUN'), ('label', 'NOUN'), ('value', 'NOUN'), ('likely', 'ADJ'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('probability', 'nsubj'), ('indicates', 'ROOT'), ('class', 'compound'), ('label', 'compound'), ('value', 'ccomp'), ('likely', 'acomp'), (' ', 'punct')]

>> Bigrams: 
[[probability, indicates], [indicates, class], [class, label], [label, value], [value, likely], [likely,  ]]

>> Trigrams: 
[[probability, indicates, class], [indicates, class, label], [class, label, value], [label, value, likely], [value, likely,  ]]

>> Noun Phrases are: 
[probability]

>> Named Entities are: 
[] 


================================ Paragraph 359 =================================

to be the actual label (if R>1: predict i else predict j) [1]. As  

------------------- Sentence 1 -------------------

to be the actual label (if R>1: predict i else predict j) 


>> Tokens are: 
[actual, label, (, R>1, :, predict, predict, j, )] 

>> PoS Tags are: 
[('actual', 'ADJ'), ('label', 'NOUN'), ('(', 'PUNCT'), ('R>1', 'NOUN'), (':', 'PUNCT'), ('predict', 'VERB'), ('predict', 'VERB'), ('j', 'NOUN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('actual', 'amod'), ('label', 'attr'), ('(', 'punct'), ('R>1', 'nsubj'), (':', 'punct'), ('predict', 'parataxis'), ('predict', 'ccomp'), ('j', 'dobj'), (')', 'punct')]

>> Bigrams: 
[[actual, label], [label, (], [(, R>1], [R>1, :], [:, predict], [predict, predict], [predict, j], [j, )]]

>> Trigrams: 
[[actual, label, (], [label, (, R>1], [(, R>1, :], [R>1, :, predict], [:, predict, predict], [predict, predict, j], [predict, j, )]]

>> Noun Phrases are: 
[the actual label, R>1, i, j]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

[1]. 


>> Tokens are: 
[[, 1, ], .] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('1', 'NUM'), (']', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('[', 'punct'), ('1', 'ROOT'), (']', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[[, 1], [1, ]], [], .]]

>> Trigrams: 
[[[, 1, ]], [1, ], .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

As   


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'pobj')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 360 =================================

shown in the below figure, the links in a Naive Bayes model are  

------------------- Sentence 1 -------------------

shown in the below figure, the links in a Naive Bayes model are   


>> Tokens are: 
[shown, figure, ,, links, Naive, Bayes, model,  ] 

>> PoS Tags are: 
[('shown', 'VERB'), ('figure', 'NOUN'), (',', 'PUNCT'), ('links', 'NOUN'), ('Naive', 'PROPN'), ('Bayes', 'PROPN'), ('model', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('shown', 'advcl'), ('figure', 'pobj'), (',', 'punct'), ('links', 'nsubj'), ('Naive', 'compound'), ('Bayes', 'compound'), ('model', 'pobj'), (' ', 'attr')]

>> Bigrams: 
[[shown, figure], [figure, ,], [,, links], [links, Naive], [Naive, Bayes], [Bayes, model], [model,  ]]

>> Trigrams: 
[[shown, figure, ,], [figure, ,, links], [,, links, Naive], [links, Naive, Bayes], [Naive, Bayes, model], [Bayes, model,  ]]

>> Noun Phrases are: 
[the below figure, the links, a Naive Bayes model]

>> Named Entities are: 
[('Bayes', 'ORG')] 


================================ Paragraph 361 =================================

directed from output to input, which gives the model its  

------------------- Sentence 1 -------------------

directed from output to input, which gives the model its   


>> Tokens are: 
[directed, output, input, ,, gives, model,  ] 

>> PoS Tags are: 
[('directed', 'VERB'), ('output', 'NOUN'), ('input', 'NOUN'), (',', 'PUNCT'), ('gives', 'VERB'), ('model', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('directed', 'ROOT'), ('output', 'pobj'), ('input', 'pobj'), (',', 'punct'), ('gives', 'advcl'), ('model', 'dative'), (' ', 'dobj')]

>> Bigrams: 
[[directed, output], [output, input], [input, ,], [,, gives], [gives, model], [model,  ]]

>> Trigrams: 
[[directed, output, input], [output, input, ,], [input, ,, gives], [,, gives, model], [gives, model,  ]]

>> Noun Phrases are: 
[output, input, the model]

>> Named Entities are: 
[] 


================================ Paragraph 362 =================================

simplicity, as there are no interactions between the inputs, except  

------------------- Sentence 1 -------------------

simplicity, as there are no interactions between the inputs, except   


>> Tokens are: 
[simplicity, ,, interactions, inputs, ,,  ] 

>> PoS Tags are: 
[('simplicity', 'NOUN'), (',', 'PUNCT'), ('interactions', 'NOUN'), ('inputs', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('simplicity', 'ROOT'), (',', 'punct'), ('interactions', 'attr'), ('inputs', 'pobj'), (',', 'punct'), (' ', 'pobj')]

>> Bigrams: 
[[simplicity, ,], [,, interactions], [interactions, inputs], [inputs, ,], [,,  ]]

>> Trigrams: 
[[simplicity, ,, interactions], [,, interactions, inputs], [interactions, inputs, ,], [inputs, ,,  ]]

>> Noun Phrases are: 
[simplicity, no interactions, the inputs]

>> Named Entities are: 
[] 


================================ Paragraph 363 =================================

indirectly via the output.  

------------------- Sentence 1 -------------------

indirectly via the output. 


>> Tokens are: 
[indirectly, output, .] 

>> PoS Tags are: 
[('indirectly', 'ADV'), ('output', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('indirectly', 'ROOT'), ('output', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[indirectly, output], [output, .]]

>> Trigrams: 
[[indirectly, output, .]]

>> Noun Phrases are: 
[the output]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 364 =================================

  

------------------- Sentence 1 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 365 =================================

Fig.6. Naive Bayes model  

------------------- Sentence 1 -------------------

Fig.6. 


>> Tokens are: 
[Fig.6, .] 

>> PoS Tags are: 
[('Fig.6', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Fig.6', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Fig.6, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Fig.6]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Naive Bayes model   


>> Tokens are: 
[Naive, Bayes, model,  ] 

>> PoS Tags are: 
[('Naive', 'PROPN'), ('Bayes', 'PROPN'), ('model', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Naive', 'compound'), ('Bayes', 'compound'), ('model', 'ROOT'), (' ', 'nummod')]

>> Bigrams: 
[[Naive, Bayes], [Bayes, model], [model,  ]]

>> Trigrams: 
[[Naive, Bayes, model], [Bayes, model,  ]]

>> Noun Phrases are: 
[Naive Bayes model]

>> Named Entities are: 
[('Bayes', 'ORG')] 


================================ Paragraph 366 =================================

An advantage of the Naive Bayes classifier is that it requires  

------------------- Sentence 1 -------------------

An advantage of the Naive Bayes classifier is that it requires   


>> Tokens are: 
[advantage, Naive, Bayes, classifier, requires,  ] 

>> PoS Tags are: 
[('advantage', 'NOUN'), ('Naive', 'PROPN'), ('Bayes', 'PROPN'), ('classifier', 'NOUN'), ('requires', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('advantage', 'nsubj'), ('Naive', 'compound'), ('Bayes', 'compound'), ('classifier', 'pobj'), ('requires', 'ccomp'), (' ', 'dobj')]

>> Bigrams: 
[[advantage, Naive], [Naive, Bayes], [Bayes, classifier], [classifier, requires], [requires,  ]]

>> Trigrams: 
[[advantage, Naive, Bayes], [Naive, Bayes, classifier], [Bayes, classifier, requires], [classifier, requires,  ]]

>> Noun Phrases are: 
[An advantage, the Naive Bayes classifier, it]

>> Named Entities are: 
[('Bayes', 'ORG')] 


================================ Paragraph 367 =================================

a small amount of training data to estimate the parameters  

------------------- Sentence 1 -------------------

a small amount of training data to estimate the parameters   


>> Tokens are: 
[small, training, data, estimate, parameters,  ] 

>> PoS Tags are: 
[('small', 'ADJ'), ('training', 'NOUN'), ('data', 'NOUN'), ('estimate', 'VERB'), ('parameters', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('small', 'amod'), ('training', 'compound'), ('data', 'pobj'), ('estimate', 'relcl'), ('parameters', 'dobj'), (' ', 'nummod')]

>> Bigrams: 
[[small, training], [training, data], [data, estimate], [estimate, parameters], [parameters,  ]]

>> Trigrams: 
[[small, training, data], [training, data, estimate], [data, estimate, parameters], [estimate, parameters,  ]]

>> Noun Phrases are: 
[a small amount, training data, the parameters]

>> Named Entities are: 
[] 


================================ Paragraph 368 =================================

necessary for classification.  

------------------- Sentence 1 -------------------

necessary for classification. 


>> Tokens are: 
[necessary, classification, .] 

>> PoS Tags are: 
[('necessary', 'ADJ'), ('classification', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('necessary', 'ROOT'), ('classification', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[necessary, classification], [classification, .]]

>> Trigrams: 
[[necessary, classification, .]]

>> Noun Phrases are: 
[classification]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 369 =================================

4.2 BAYESIAN NETWORKS  

------------------- Sentence 1 -------------------

4.2 BAYESIAN NETWORKS   


>> Tokens are: 
[4.2, BAYESIAN, NETWORKS,  ] 

>> PoS Tags are: 
[('4.2', 'NUM'), ('BAYESIAN', 'PROPN'), ('NETWORKS', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('4.2', 'nummod'), ('BAYESIAN', 'compound'), ('NETWORKS', 'ROOT'), (' ', 'nummod')]

>> Bigrams: 
[[4.2, BAYESIAN], [BAYESIAN, NETWORKS], [NETWORKS,  ]]

>> Trigrams: 
[[4.2, BAYESIAN, NETWORKS], [BAYESIAN, NETWORKS,  ]]

>> Noun Phrases are: 
[4.2 BAYESIAN NETWORKS]

>> Named Entities are: 
[('4.2', 'CARDINAL')] 


================================ Paragraph 370 =================================

Bayesian Networks (BN) are graphical models that are used  

------------------- Sentence 1 -------------------

Bayesian Networks (BN) are graphical models that are used   


>> Tokens are: 
[Bayesian, Networks, (, BN, ), graphical, models,  ] 

>> PoS Tags are: 
[('Bayesian', 'PROPN'), ('Networks', 'PROPN'), ('(', 'PUNCT'), ('BN', 'PROPN'), (')', 'PUNCT'), ('graphical', 'ADJ'), ('models', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Bayesian', 'compound'), ('Networks', 'nsubj'), ('(', 'punct'), ('BN', 'appos'), (')', 'punct'), ('graphical', 'amod'), ('models', 'attr'), (' ', 'punct')]

>> Bigrams: 
[[Bayesian, Networks], [Networks, (], [(, BN], [BN, )], [), graphical], [graphical, models], [models,  ]]

>> Trigrams: 
[[Bayesian, Networks, (], [Networks, (, BN], [(, BN, )], [BN, ), graphical], [), graphical, models], [graphical, models,  ]]

>> Noun Phrases are: 
[Bayesian Networks, BN, graphical models]

>> Named Entities are: 
[('Bayesian Networks', 'ORG')] 


================================ Paragraph 371 =================================

to illustrate relationships between events or ideas to infer  

------------------- Sentence 1 -------------------

to illustrate relationships between events or ideas to infer   


>> Tokens are: 
[illustrate, relationships, events, ideas, infer,  ] 

>> PoS Tags are: 
[('illustrate', 'VERB'), ('relationships', 'NOUN'), ('events', 'NOUN'), ('ideas', 'NOUN'), ('infer', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('illustrate', 'ROOT'), ('relationships', 'dobj'), ('events', 'pobj'), ('ideas', 'conj'), ('infer', 'relcl'), (' ', 'dobj')]

>> Bigrams: 
[[illustrate, relationships], [relationships, events], [events, ideas], [ideas, infer], [infer,  ]]

>> Trigrams: 
[[illustrate, relationships, events], [relationships, events, ideas], [events, ideas, infer], [ideas, infer,  ]]

>> Noun Phrases are: 
[relationships, events, ideas]

>> Named Entities are: 
[] 


================================ Paragraph 372 =================================

probabilities or uncertainties associated with those ideas or  

------------------- Sentence 1 -------------------

probabilities or uncertainties associated with those ideas or   


>> Tokens are: 
[probabilities, uncertainties, associated, ideas,  ] 

>> PoS Tags are: 
[('probabilities', 'NOUN'), ('uncertainties', 'NOUN'), ('associated', 'VERB'), ('ideas', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('probabilities', 'ROOT'), ('uncertainties', 'conj'), ('associated', 'acl'), ('ideas', 'pobj'), (' ', 'conj')]

>> Bigrams: 
[[probabilities, uncertainties], [uncertainties, associated], [associated, ideas], [ideas,  ]]

>> Trigrams: 
[[probabilities, uncertainties, associated], [uncertainties, associated, ideas], [associated, ideas,  ]]

>> Noun Phrases are: 
[probabilities, uncertainties, those ideas]

>> Named Entities are: 
[] 


================================ Paragraph 373 =================================

events. Information retrieval, predictions based on limited input  

------------------- Sentence 1 -------------------

events. 


>> Tokens are: 
[events, .] 

>> PoS Tags are: 
[('events', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('events', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[events, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[events]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Information retrieval, predictions based on limited input   


>> Tokens are: 
[Information, retrieval, ,, predictions, based, limited, input,  ] 

>> PoS Tags are: 
[('Information', 'NOUN'), ('retrieval', 'NOUN'), (',', 'PUNCT'), ('predictions', 'NOUN'), ('based', 'VERB'), ('limited', 'ADJ'), ('input', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Information', 'compound'), ('retrieval', 'ROOT'), (',', 'punct'), ('predictions', 'appos'), ('based', 'acl'), ('limited', 'amod'), ('input', 'pobj'), (' ', 'appos')]

>> Bigrams: 
[[Information, retrieval], [retrieval, ,], [,, predictions], [predictions, based], [based, limited], [limited, input], [input,  ]]

>> Trigrams: 
[[Information, retrieval, ,], [retrieval, ,, predictions], [,, predictions, based], [predictions, based, limited], [based, limited, input], [limited, input,  ]]

>> Noun Phrases are: 
[Information retrieval, predictions, limited input]

>> Named Entities are: 
[] 


================================ Paragraph 374 =================================

or recognition software is some main applications of BN.  

------------------- Sentence 1 -------------------

or recognition software is some main applications of BN. 


>> Tokens are: 
[recognition, software, main, applications, BN, .] 

>> PoS Tags are: 
[('recognition', 'NOUN'), ('software', 'NOUN'), ('main', 'ADJ'), ('applications', 'NOUN'), ('BN', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('recognition', 'compound'), ('software', 'nsubj'), ('main', 'amod'), ('applications', 'attr'), ('BN', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[recognition, software], [software, main], [main, applications], [applications, BN], [BN, .]]

>> Trigrams: 
[[recognition, software, main], [software, main, applications], [main, applications, BN], [applications, BN, .]]

>> Noun Phrases are: 
[recognition software, some main applications, BN]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 375 =================================

The Bayesian network structure S is a directed acyclic graph  

------------------- Sentence 1 -------------------

The Bayesian network structure S is a directed acyclic graph   


>> Tokens are: 
[Bayesian, network, structure, S, directed, acyclic, graph,  ] 

>> PoS Tags are: 
[('Bayesian', 'PROPN'), ('network', 'NOUN'), ('structure', 'NOUN'), ('S', 'PROPN'), ('directed', 'VERB'), ('acyclic', 'ADJ'), ('graph', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Bayesian', 'compound'), ('network', 'compound'), ('structure', 'compound'), ('S', 'nsubj'), ('directed', 'amod'), ('acyclic', 'amod'), ('graph', 'attr'), (' ', 'punct')]

>> Bigrams: 
[[Bayesian, network], [network, structure], [structure, S], [S, directed], [directed, acyclic], [acyclic, graph], [graph,  ]]

>> Trigrams: 
[[Bayesian, network, structure], [network, structure, S], [structure, S, directed], [S, directed, acyclic], [directed, acyclic, graph], [acyclic, graph,  ]]

>> Noun Phrases are: 
[The Bayesian network structure S, a directed acyclic graph]

>> Named Entities are: 
[('Bayesian', 'GPE')] 


================================ Paragraph 376 =================================

(DAG) and the nodes in S are in one-to-one correspondence with  

------------------- Sentence 1 -------------------

(DAG) and the nodes in S are in one-to-one correspondence with   


>> Tokens are: 
[(, DAG, ), nodes, S, -, -, correspondence,  ] 

>> PoS Tags are: 
[('(', 'PUNCT'), ('DAG', 'PROPN'), (')', 'PUNCT'), ('nodes', 'NOUN'), ('S', 'PROPN'), ('-', 'PUNCT'), ('-', 'PUNCT'), ('correspondence', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('(', 'punct'), ('DAG', 'nsubj'), (')', 'punct'), ('nodes', 'conj'), ('S', 'pobj'), ('-', 'punct'), ('-', 'punct'), ('correspondence', 'pobj'), (' ', 'pobj')]

>> Bigrams: 
[[(, DAG], [DAG, )], [), nodes], [nodes, S], [S, -], [-, -], [-, correspondence], [correspondence,  ]]

>> Trigrams: 
[[(, DAG, )], [DAG, ), nodes], [), nodes, S], [nodes, S, -], [S, -, -], [-, -, correspondence], [-, correspondence,  ]]

>> Noun Phrases are: 
[(DAG, the nodes, S, one-to-one correspondence]

>> Named Entities are: 
[('DAG', 'ORG')] 


================================ Paragraph 377 =================================

the features X. The arcs represent casual influences among the  

------------------- Sentence 1 -------------------

the features X. 


>> Tokens are: 
[features, X.] 

>> PoS Tags are: 
[('features', 'NOUN'), ('X.', 'PROPN')] 

>> Dependency Tags are: 
[('features', 'ROOT'), ('X.', 'appos')]

>> Bigrams: 
[[features, X.]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[the features, X.]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

The arcs represent casual influences among the   


>> Tokens are: 
[arcs, represent, casual, influences,  ] 

>> PoS Tags are: 
[('arcs', 'NOUN'), ('represent', 'VERB'), ('casual', 'ADJ'), ('influences', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('arcs', 'nsubj'), ('represent', 'ROOT'), ('casual', 'amod'), ('influences', 'dobj'), (' ', 'pobj')]

>> Bigrams: 
[[arcs, represent], [represent, casual], [casual, influences], [influences,  ]]

>> Trigrams: 
[[arcs, represent, casual], [represent, casual, influences], [casual, influences,  ]]

>> Noun Phrases are: 
[The arcs, casual influences]

>> Named Entities are: 
[] 


================================ Paragraph 378 =================================

features while the lack of possible arcs in S encodes conditional  

------------------- Sentence 1 -------------------

features while the lack of possible arcs in S encodes conditional   


>> Tokens are: 
[features, lack, possible, arcs, S, encodes, conditional,  ] 

>> PoS Tags are: 
[('features', 'VERB'), ('lack', 'NOUN'), ('possible', 'ADJ'), ('arcs', 'NOUN'), ('S', 'PROPN'), ('encodes', 'NOUN'), ('conditional', 'ADJ'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('features', 'ROOT'), ('lack', 'nsubj'), ('possible', 'amod'), ('arcs', 'pobj'), ('S', 'compound'), ('encodes', 'pobj'), ('conditional', 'advcl'), (' ', 'dobj')]

>> Bigrams: 
[[features, lack], [lack, possible], [possible, arcs], [arcs, S], [S, encodes], [encodes, conditional], [conditional,  ]]

>> Trigrams: 
[[features, lack, possible], [lack, possible, arcs], [possible, arcs, S], [arcs, S, encodes], [S, encodes, conditional], [encodes, conditional,  ]]

>> Noun Phrases are: 
[the lack, possible arcs, S encodes]

>> Named Entities are: 
[] 


================================ Paragraph 379 =================================

independencies. Moreover, a feature (node) is conditionally  

------------------- Sentence 1 -------------------

independencies. 


>> Tokens are: 
[independencies, .] 

>> PoS Tags are: 
[('independencies', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('independencies', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[independencies, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[independencies]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Moreover, a feature (node) is conditionally   


>> Tokens are: 
[,, feature, (, node, ), conditionally,  ] 

>> PoS Tags are: 
[(',', 'PUNCT'), ('feature', 'NOUN'), ('(', 'PUNCT'), ('node', 'NOUN'), (')', 'PUNCT'), ('conditionally', 'ADV'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[(',', 'punct'), ('feature', 'nsubj'), ('(', 'punct'), ('node', 'appos'), (')', 'punct'), ('conditionally', 'advmod'), (' ', 'attr')]

>> Bigrams: 
[[,, feature], [feature, (], [(, node], [node, )], [), conditionally], [conditionally,  ]]

>> Trigrams: 
[[,, feature, (], [feature, (, node], [(, node, )], [node, ), conditionally], [), conditionally,  ]]

>> Noun Phrases are: 
[a feature, (node]

>> Named Entities are: 
[] 


================================ Paragraph 380 =================================

independent from its non-descendants given its parents (X1 is  

------------------- Sentence 1 -------------------

independent from its non-descendants given its parents 


>> Tokens are: 
[independent, non, -, descendants, given, parents] 

>> PoS Tags are: 
[('independent', 'ADJ'), ('non', 'ADJ'), ('-', 'NOUN'), ('descendants', 'NOUN'), ('given', 'VERB'), ('parents', 'NOUN')] 

>> Dependency Tags are: 
[('independent', 'ROOT'), ('non', 'pobj'), ('-', 'pobj'), ('descendants', 'pobj'), ('given', 'prep'), ('parents', 'pobj')]

>> Bigrams: 
[[independent, non], [non, -], [-, descendants], [descendants, given], [given, parents]]

>> Trigrams: 
[[independent, non, -], [non, -, descendants], [-, descendants, given], [descendants, given, parents]]

>> Noun Phrases are: 
[-, descendants, its parents]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

(X1 is   


>> Tokens are: 
[(, X1,  ] 

>> PoS Tags are: 
[('(', 'PUNCT'), ('X1', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('(', 'punct'), ('X1', 'nsubj'), (' ', 'attr')]

>> Bigrams: 
[[(, X1], [X1,  ]]

>> Trigrams: 
[[(, X1,  ]]

>> Noun Phrases are: 
[X1]

>> Named Entities are: 
[('X1', 'PERSON')] 


================================ Paragraph 381 =================================

conditionally independent from X2).   

------------------- Sentence 1 -------------------

conditionally independent from X2). 


>> Tokens are: 
[conditionally, independent, X2, ), .] 

>> PoS Tags are: 
[('conditionally', 'ADV'), ('independent', 'ADJ'), ('X2', 'NOUN'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('conditionally', 'advmod'), ('independent', 'ROOT'), ('X2', 'pobj'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[conditionally, independent], [independent, X2], [X2, )], [), .]]

>> Trigrams: 
[[conditionally, independent, X2], [independent, X2, )], [X2, ), .]]

>> Noun Phrases are: 
[X2]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 382 =================================

The below example shows that there are two events which  

------------------- Sentence 1 -------------------

The below example shows that there are two events 


>> Tokens are: 
[example, shows, events] 

>> PoS Tags are: 
[('example', 'NOUN'), ('shows', 'VERB'), ('events', 'NOUN')] 

>> Dependency Tags are: 
[('example', 'nsubj'), ('shows', 'ROOT'), ('events', 'attr')]

>> Bigrams: 
[[example, shows], [shows, events]]

>> Trigrams: 
[[example, shows, events]]

>> Noun Phrases are: 
[The below example, two events]

>> Named Entities are: 
[('two', 'CARDINAL')] 

------------------- Sentence 2 -------------------

which   


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 383 =================================

could cause grass to be wet i.e.- either the sprinkler is on or it’s  

------------------- Sentence 1 -------------------

could cause grass to be wet i.e.- either the sprinkler is on or it’s   


>> Tokens are: 
[cause, grass, wet, i.e.-, sprinkler,  ] 

>> PoS Tags are: 
[('cause', 'VERB'), ('grass', 'NOUN'), ('wet', 'ADJ'), ('i.e.-', 'PRON'), ('sprinkler', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('cause', 'ROOT'), ('grass', 'nsubj'), ('wet', 'acomp'), ('i.e.-', 'dobj'), ('sprinkler', 'nsubj'), (' ', 'dobj')]

>> Bigrams: 
[[cause, grass], [grass, wet], [wet, i.e.-], [i.e.-, sprinkler], [sprinkler,  ]]

>> Trigrams: 
[[cause, grass, wet], [grass, wet, i.e.-], [wet, i.e.-, sprinkler], [i.e.-, sprinkler,  ]]

>> Noun Phrases are: 
[grass, i.e.-, the sprinkler, it]

>> Named Entities are: 
[] 


================================ Paragraph 384 =================================

raining. Additionally here we also, suppose that the rain has a  

------------------- Sentence 1 -------------------

raining. 


>> Tokens are: 
[raining, .] 

>> PoS Tags are: 
[('raining', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('raining', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[raining, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Additionally here we also, suppose that the rain has a   


>> Tokens are: 
[Additionally, ,, suppose, rain,  ] 

>> PoS Tags are: 
[('Additionally', 'ADV'), (',', 'PUNCT'), ('suppose', 'VERB'), ('rain', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Additionally', 'advmod'), (',', 'punct'), ('suppose', 'ROOT'), ('rain', 'nsubj'), (' ', 'dobj')]

>> Bigrams: 
[[Additionally, ,], [,, suppose], [suppose, rain], [rain,  ]]

>> Trigrams: 
[[Additionally, ,, suppose], [,, suppose, rain], [suppose, rain,  ]]

>> Noun Phrases are: 
[we, the rain]

>> Named Entities are: 
[] 


================================ Paragraph 385 =================================

direct effect on the use of the sprinkler (namely that when it  

------------------- Sentence 1 -------------------

direct effect on the use of the sprinkler (namely that when it   


>> Tokens are: 
[direct, effect, use, sprinkler, (,  ] 

>> PoS Tags are: 
[('direct', 'ADJ'), ('effect', 'NOUN'), ('use', 'NOUN'), ('sprinkler', 'NOUN'), ('(', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('direct', 'amod'), ('effect', 'ROOT'), ('use', 'pobj'), ('sprinkler', 'pobj'), ('(', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[direct, effect], [effect, use], [use, sprinkler], [sprinkler, (], [(,  ]]

>> Trigrams: 
[[direct, effect, use], [effect, use, sprinkler], [use, sprinkler, (], [sprinkler, (,  ]]

>> Noun Phrases are: 
[direct effect, the use, the sprinkler, it]

>> Named Entities are: 
[] 


================================ Paragraph 386 =================================

rains, the sprinkler is usually not turned on). Then the situation  

------------------- Sentence 1 -------------------

rains, the sprinkler is usually not turned on). 


>> Tokens are: 
[rains, ,, sprinkler, usually, turned, ), .] 

>> PoS Tags are: 
[('rains', 'NOUN'), (',', 'PUNCT'), ('sprinkler', 'NOUN'), ('usually', 'ADV'), ('turned', 'VERB'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('rains', 'advcl'), (',', 'punct'), ('sprinkler', 'nsubjpass'), ('usually', 'advmod'), ('turned', 'ROOT'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[rains, ,], [,, sprinkler], [sprinkler, usually], [usually, turned], [turned, )], [), .]]

>> Trigrams: 
[[rains, ,, sprinkler], [,, sprinkler, usually], [sprinkler, usually, turned], [usually, turned, )], [turned, ), .]]

>> Noun Phrases are: 
[the sprinkler]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Then the situation   


>> Tokens are: 
[situation,  ] 

>> PoS Tags are: 
[('situation', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('situation', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[situation,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Then the situation]

>> Named Entities are: 
[] 


================================ Paragraph 387 =================================

can be modeled with a Bayesian network. All three variables  

------------------- Sentence 1 -------------------

can be modeled with a Bayesian network. 


>> Tokens are: 
[modeled, Bayesian, network, .] 

>> PoS Tags are: 
[('modeled', 'VERB'), ('Bayesian', 'PROPN'), ('network', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('modeled', 'ROOT'), ('Bayesian', 'compound'), ('network', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[modeled, Bayesian], [Bayesian, network], [network, .]]

>> Trigrams: 
[[modeled, Bayesian, network], [Bayesian, network, .]]

>> Noun Phrases are: 
[a Bayesian network]

>> Named Entities are: 
[('Bayesian', 'NORP')] 

------------------- Sentence 2 -------------------

All three variables   


>> Tokens are: 
[variables,  ] 

>> PoS Tags are: 
[('variables', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('variables', 'ROOT'), (' ', 'appos')]

>> Bigrams: 
[[variables,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[All three variables]

>> Named Entities are: 
[] 


================================ Paragraph 388 =================================

have two possible values, T (for true) and F (for false) [22].  

------------------- Sentence 1 -------------------

have two possible values, T (for true) and F (for false) [22]. 


>> Tokens are: 
[possible, values, ,, T, (, true, ), F, (, false, ), [, 22, ], .] 

>> PoS Tags are: 
[('possible', 'ADJ'), ('values', 'NOUN'), (',', 'PUNCT'), ('T', 'NOUN'), ('(', 'PUNCT'), ('true', 'ADJ'), (')', 'PUNCT'), ('F', 'PROPN'), ('(', 'PUNCT'), ('false', 'ADJ'), (')', 'PUNCT'), ('[', 'PUNCT'), ('22', 'NUM'), (']', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('possible', 'amod'), ('values', 'dobj'), (',', 'punct'), ('T', 'appos'), ('(', 'punct'), ('true', 'amod'), (')', 'punct'), ('F', 'conj'), ('(', 'punct'), ('false', 'amod'), (')', 'punct'), ('[', 'punct'), ('22', 'dobj'), (']', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[possible, values], [values, ,], [,, T], [T, (], [(, true], [true, )], [), F], [F, (], [(, false], [false, )], [), [], [[, 22], [22, ]], [], .]]

>> Trigrams: 
[[possible, values, ,], [values, ,, T], [,, T, (], [T, (, true], [(, true, )], [true, ), F], [), F, (], [F, (, false], [(, false, )], [false, ), [], [), [, 22], [[, 22, ]], [22, ], .]]

>> Noun Phrases are: 
[two possible values, T, F]

>> Named Entities are: 
[('two', 'CARDINAL'), ('22', 'CARDINAL')] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 389 =================================

  

------------------- Sentence 1 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 390 =================================

Fig.7. Bayesian network with conditional probability tables  

------------------- Sentence 1 -------------------

Fig.7. 


>> Tokens are: 
[Fig.7, .] 

>> PoS Tags are: 
[('Fig.7', 'ADV'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Fig.7', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Fig.7, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Bayesian network with conditional probability tables   


>> Tokens are: 
[Bayesian, network, conditional, probability, tables,  ] 

>> PoS Tags are: 
[('Bayesian', 'ADJ'), ('network', 'NOUN'), ('conditional', 'ADJ'), ('probability', 'NOUN'), ('tables', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Bayesian', 'compound'), ('network', 'ROOT'), ('conditional', 'amod'), ('probability', 'compound'), ('tables', 'pobj'), (' ', 'punct')]

>> Bigrams: 
[[Bayesian, network], [network, conditional], [conditional, probability], [probability, tables], [tables,  ]]

>> Trigrams: 
[[Bayesian, network, conditional], [network, conditional, probability], [conditional, probability, tables], [probability, tables,  ]]

>> Noun Phrases are: 
[Bayesian network, conditional probability tables]

>> Named Entities are: 
[('Bayesian', 'NORP')] 


================================ Paragraph 391 =================================

The below is a joint probability function:  

------------------- Sentence 1 -------------------

The below is a joint probability function: 


>> Tokens are: 
[joint, probability, function, :] 

>> PoS Tags are: 
[('joint', 'ADJ'), ('probability', 'NOUN'), ('function', 'NOUN'), (':', 'PUNCT')] 

>> Dependency Tags are: 
[('joint', 'amod'), ('probability', 'compound'), ('function', 'attr'), (':', 'punct')]

>> Bigrams: 
[[joint, probability], [probability, function], [function, :]]

>> Trigrams: 
[[joint, probability, function], [probability, function, :]]

>> Noun Phrases are: 
[a joint probability function]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 392 =================================

        RPRSPRSGPRSGP ,,,   (4)  where, the names of the variables have been abbreviated to:  

------------------- Sentence 1 -------------------

        RPRSPRSGPRSGP ,,,   (4)   


>> Tokens are: 
[ , , , , , , , , RPRSPRSGPRSGP, ,, ,, ,, ,  , (, 4, ),  ] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('\uf028', 'ADJ'), ('\uf029', 'PROPN'), ('\uf028', 'NOUN'), ('\uf029', 'PROPN'), ('\uf028', 'NOUN'), ('\uf029', 'PROPN'), ('\uf028', 'ADJ'), ('\uf029RPRSPRSGPRSGP', 'NOUN'), (',', 'PUNCT'), (',', 'PUNCT'), (',', 'PUNCT'), ('\uf03d', 'PROPN'), (' ', 'SPACE'), ('(', 'PUNCT'), ('4', 'NUM'), (')', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'nmod'), ('\uf028', 'appos'), ('\uf029', 'appos'), ('\uf028', 'nmod'), ('\uf029', 'compound'), ('\uf028', 'nmod'), ('\uf029', 'compound'), ('\uf028', 'compound'), ('\uf029RPRSPRSGPRSGP', 'ROOT'), (',', 'punct'), (',', 'punct'), (',', 'punct'), ('\uf03d', 'nummod'), (' ', 'appos'), ('(', 'punct'), ('4', 'appos'), (')', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[ , ], [, ], [, ], [, ], [, ], [, ], [, ], [, RPRSPRSGPRSGP], [RPRSPRSGPRSGP, ,], [,, ,], [,, ,], [,, ], [,  ], [ , (], [(, 4], [4, )], [),  ]]

>> Trigrams: 
[[ , , ], [, , ], [, , ], [, , ], [, , ], [, , ], [, , RPRSPRSGPRSGP], [, RPRSPRSGPRSGP, ,], [RPRSPRSGPRSGP, ,, ,], [,, ,, ,], [,, ,, ], [,, ,  ], [,  , (], [ , (, 4], [(, 4, )], [4, ),  ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('\uf029', 'ORG'), ('\uf029', 'ORG'), ('\uf029', 'ORG')] 

------------------- Sentence 2 -------------------

where, the names of the variables have been abbreviated to:   


>> Tokens are: 
[,, names, variables, abbreviated, :,  ] 

>> PoS Tags are: 
[(',', 'PUNCT'), ('names', 'NOUN'), ('variables', 'NOUN'), ('abbreviated', 'VERB'), (':', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[(',', 'punct'), ('names', 'nsubjpass'), ('variables', 'pobj'), ('abbreviated', 'ROOT'), (':', 'punct'), (' ', 'pobj')]

>> Bigrams: 
[[,, names], [names, variables], [variables, abbreviated], [abbreviated, :], [:,  ]]

>> Trigrams: 
[[,, names, variables], [names, variables, abbreviated], [variables, abbreviated, :], [abbreviated, :,  ]]

>> Noun Phrases are: 
[the names, the variables]

>> Named Entities are: 
[] 


================================ Paragraph 393 =================================

G = Grass wet (yes/no)  

------------------- Sentence 1 -------------------

G = Grass wet (yes/no)   


>> Tokens are: 
[G, =, Grass, wet, (, yes, /, ),  ] 

>> PoS Tags are: 
[('G', 'PROPN'), ('=', 'SYM'), ('Grass', 'PROPN'), ('wet', 'ADJ'), ('(', 'PUNCT'), ('yes', 'INTJ'), ('/', 'SYM'), (')', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('G', 'nmod'), ('=', 'punct'), ('Grass', 'nsubj'), ('wet', 'ROOT'), ('(', 'punct'), ('yes', 'intj'), ('/', 'punct'), (')', 'punct'), (' ', 'dobj')]

>> Bigrams: 
[[G, =], [=, Grass], [Grass, wet], [wet, (], [(, yes], [yes, /], [/, )], [),  ]]

>> Trigrams: 
[[G, =, Grass], [=, Grass, wet], [Grass, wet, (], [wet, (, yes], [(, yes, /], [yes, /, )], [/, ),  ]]

>> Noun Phrases are: 
[G = Grass]

>> Named Entities are: 
[('Grass', 'PERSON')] 


================================ Paragraph 394 =================================

S = Sprinkler turned on (yes/no)  

------------------- Sentence 1 -------------------

S = Sprinkler turned on (yes/no)   


>> Tokens are: 
[S, =, Sprinkler, turned, (, yes, /, ),  ] 

>> PoS Tags are: 
[('S', 'NOUN'), ('=', 'X'), ('Sprinkler', 'PROPN'), ('turned', 'VERB'), ('(', 'PUNCT'), ('yes', 'INTJ'), ('/', 'SYM'), (')', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('S', 'npadvmod'), ('=', 'punct'), ('Sprinkler', 'nsubj'), ('turned', 'ROOT'), ('(', 'punct'), ('yes', 'intj'), ('/', 'punct'), (')', 'punct'), (' ', 'dobj')]

>> Bigrams: 
[[S, =], [=, Sprinkler], [Sprinkler, turned], [turned, (], [(, yes], [yes, /], [/, )], [),  ]]

>> Trigrams: 
[[S, =, Sprinkler], [=, Sprinkler, turned], [Sprinkler, turned, (], [turned, (, yes], [(, yes, /], [yes, /, )], [/, ),  ]]

>> Noun Phrases are: 
[Sprinkler]

>> Named Entities are: 
[('Sprinkler', 'ORG')] 


================================ Paragraph 395 =================================

R = Raining (yes/no).  

------------------- Sentence 1 -------------------

R = Raining (yes/no). 


>> Tokens are: 
[R, =, Raining, (, yes, /, ), .] 

>> PoS Tags are: 
[('R', 'NOUN'), ('=', 'SYM'), ('Raining', 'NOUN'), ('(', 'PUNCT'), ('yes', 'INTJ'), ('/', 'SYM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('R', 'compound'), ('=', 'punct'), ('Raining', 'ROOT'), ('(', 'punct'), ('yes', 'intj'), ('/', 'punct'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[R, =], [=, Raining], [Raining, (], [(, yes], [yes, /], [/, )], [), .]]

>> Trigrams: 
[[R, =, Raining], [=, Raining, (], [Raining, (, yes], [(, yes, /], [yes, /, )], [/, ), .]]

>> Noun Phrases are: 
[R = Raining]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 396 =================================

Cheng et al. draw the attention of a problem of BN classifiers  

------------------- Sentence 1 -------------------

Cheng et al. draw the attention of a problem of BN classifiers   


>> Tokens are: 
[Cheng, et, al, ., draw, attention, problem, BN, classifiers,  ] 

>> PoS Tags are: 
[('Cheng', 'PROPN'), ('et', 'PROPN'), ('al', 'PROPN'), ('.', 'PUNCT'), ('draw', 'VERB'), ('attention', 'NOUN'), ('problem', 'NOUN'), ('BN', 'NOUN'), ('classifiers', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Cheng', 'compound'), ('et', 'compound'), ('al', 'nsubj'), ('.', 'punct'), ('draw', 'ROOT'), ('attention', 'dobj'), ('problem', 'pobj'), ('BN', 'compound'), ('classifiers', 'pobj'), (' ', 'punct')]

>> Bigrams: 
[[Cheng, et], [et, al], [al, .], [., draw], [draw, attention], [attention, problem], [problem, BN], [BN, classifiers], [classifiers,  ]]

>> Trigrams: 
[[Cheng, et, al], [et, al, .], [al, ., draw], [., draw, attention], [draw, attention, problem], [attention, problem, BN], [problem, BN, classifiers], [BN, classifiers,  ]]

>> Noun Phrases are: 
[Cheng et al, the attention, a problem, BN classifiers]

>> Named Entities are: 
[('Cheng', 'PERSON')] 


================================ Paragraph 397 =================================

that it is not suitable for datasets with many features. The reason  

------------------- Sentence 1 -------------------

that it is not suitable for datasets with many features. 


>> Tokens are: 
[suitable, datasets, features, .] 

>> PoS Tags are: 
[('suitable', 'ADJ'), ('datasets', 'NOUN'), ('features', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('suitable', 'acomp'), ('datasets', 'pobj'), ('features', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[suitable, datasets], [datasets, features], [features, .]]

>> Trigrams: 
[[suitable, datasets, features], [datasets, features, .]]

>> Noun Phrases are: 
[it, datasets, many features]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

The reason   


>> Tokens are: 
[reason,  ] 

>> PoS Tags are: 
[('reason', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('reason', 'ROOT'), (' ', 'nummod')]

>> Bigrams: 
[[reason,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[The reason]

>> Named Entities are: 
[] 


================================ Paragraph 398 =================================

for this is that trying to construct a very large network is simply  

------------------- Sentence 1 -------------------

for this is that trying to construct a very large network is simply   


>> Tokens are: 
[trying, construct, large, network, simply,  ] 

>> PoS Tags are: 
[('trying', 'VERB'), ('construct', 'VERB'), ('large', 'ADJ'), ('network', 'NOUN'), ('simply', 'ADV'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('trying', 'csubj'), ('construct', 'xcomp'), ('large', 'amod'), ('network', 'dobj'), ('simply', 'advmod'), (' ', 'attr')]

>> Bigrams: 
[[trying, construct], [construct, large], [large, network], [network, simply], [simply,  ]]

>> Trigrams: 
[[trying, construct, large], [construct, large, network], [large, network, simply], [network, simply,  ]]

>> Noun Phrases are: 
[a very large network]

>> Named Entities are: 
[] 


================================ Paragraph 399 =================================

not feasible in terms of time and space [23]. The pseudo code of  

------------------- Sentence 1 -------------------

not feasible in terms of time and space [23]. 


>> Tokens are: 
[feasible, terms, time, space, [, 23, ], .] 

>> PoS Tags are: 
[('feasible', 'ADJ'), ('terms', 'NOUN'), ('time', 'NOUN'), ('space', 'NOUN'), ('[', 'PUNCT'), ('23', 'NUM'), (']', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('feasible', 'ROOT'), ('terms', 'pobj'), ('time', 'pobj'), ('space', 'conj'), ('[', 'punct'), ('23', 'npadvmod'), (']', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[feasible, terms], [terms, time], [time, space], [space, [], [[, 23], [23, ]], [], .]]

>> Trigrams: 
[[feasible, terms, time], [terms, time, space], [time, space, [], [space, [, 23], [[, 23, ]], [23, ], .]]

>> Noun Phrases are: 
[terms, time, space]

>> Named Entities are: 
[('23', 'CARDINAL')] 

------------------- Sentence 2 -------------------

The pseudo code of   


>> Tokens are: 
[pseudo, code,  ] 

>> PoS Tags are: 
[('pseudo', 'NOUN'), ('code', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('pseudo', 'compound'), ('code', 'ROOT'), (' ', 'pobj')]

>> Bigrams: 
[[pseudo, code], [code,  ]]

>> Trigrams: 
[[pseudo, code,  ]]

>> Noun Phrases are: 
[The pseudo code]

>> Named Entities are: 
[] 


================================ Paragraph 400 =================================

training BN is shown in below figure:  

------------------- Sentence 1 -------------------

training BN is shown in below figure: 


>> Tokens are: 
[training, BN, shown, figure, :] 

>> PoS Tags are: 
[('training', 'VERB'), ('BN', 'PROPN'), ('shown', 'VERB'), ('figure', 'NOUN'), (':', 'PUNCT')] 

>> Dependency Tags are: 
[('training', 'csubjpass'), ('BN', 'dobj'), ('shown', 'ROOT'), ('figure', 'pobj'), (':', 'punct')]

>> Bigrams: 
[[training, BN], [BN, shown], [shown, figure], [figure, :]]

>> Trigrams: 
[[training, BN, shown], [BN, shown, figure], [shown, figure, :]]

>> Noun Phrases are: 
[BN, figure]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 401 =================================

Input 1  

------------------- Sentence 1 -------------------

Input 1   


>> Tokens are: 
[Input, 1,  ] 

>> PoS Tags are: 
[('Input', 'NOUN'), ('1', 'NUM'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Input', 'ROOT'), ('1', 'nummod'), (' ', 'nummod')]

>> Bigrams: 
[[Input, 1], [1,  ]]

>> Trigrams: 
[[Input, 1,  ]]

>> Noun Phrases are: 
[Input]

>> Named Entities are: 
[('1', 'CARDINAL')] 


================================ Paragraph 402 =================================

Input 2  

------------------- Sentence 1 -------------------

Input 2   


>> Tokens are: 
[Input, 2,  ] 

>> PoS Tags are: 
[('Input', 'NOUN'), ('2', 'NUM'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Input', 'ROOT'), ('2', 'nummod'), (' ', 'nummod')]

>> Bigrams: 
[[Input, 2], [2,  ]]

>> Trigrams: 
[[Input, 2,  ]]

>> Noun Phrases are: 
[Input]

>> Named Entities are: 
[('2', 'CARDINAL')] 


================================ Paragraph 403 =================================

Input 3  

------------------- Sentence 1 -------------------

Input 3   


>> Tokens are: 
[Input, 3,  ] 

>> PoS Tags are: 
[('Input', 'NOUN'), ('3', 'NUM'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Input', 'ROOT'), ('3', 'nummod'), (' ', 'nummod')]

>> Bigrams: 
[[Input, 3], [3,  ]]

>> Trigrams: 
[[Input, 3,  ]]

>> Noun Phrases are: 
[Input]

>> Named Entities are: 
[('3', 'CARDINAL')] 


================================ Paragraph 404 =================================

Input 4  

------------------- Sentence 1 -------------------

Input 4   


>> Tokens are: 
[Input, 4,  ] 

>> PoS Tags are: 
[('Input', 'NOUN'), ('4', 'NUM'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Input', 'ROOT'), ('4', 'nummod'), (' ', 'nummod')]

>> Bigrams: 
[[Input, 4], [4,  ]]

>> Trigrams: 
[[Input, 4,  ]]

>> Noun Phrases are: 
[Input]

>> Named Entities are: 
[('4', 'CARDINAL')] 


================================ Paragraph 405 =================================

Output 1 

------------------- Sentence 1 -------------------

Output 1 


>> Tokens are: 
[Output, 1] 

>> PoS Tags are: 
[('Output', 'NOUN'), ('1', 'NUM')] 

>> Dependency Tags are: 
[('Output', 'ROOT'), ('1', 'nummod')]

>> Bigrams: 
[[Output, 1]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Output]

>> Named Entities are: 
[] 


================================ Paragraph 406 =================================

IQBAL MUHAMMAD AND ZHU YAN: SUPERVISED MACHINE LEARNING APPROACHES: A SURVEY  

------------------- Sentence 1 -------------------

IQBAL MUHAMMAD AND ZHU YAN: SUPERVISED MACHINE 


>> Tokens are: 
[IQBAL, MUHAMMAD, ZHU, YAN, :, SUPERVISED, MACHINE] 

>> PoS Tags are: 
[('IQBAL', 'NOUN'), ('MUHAMMAD', 'PROPN'), ('ZHU', 'PROPN'), ('YAN', 'PROPN'), (':', 'PUNCT'), ('SUPERVISED', 'ADJ'), ('MACHINE', 'NOUN')] 

>> Dependency Tags are: 
[('IQBAL', 'compound'), ('MUHAMMAD', 'ROOT'), ('ZHU', 'compound'), ('YAN', 'conj'), (':', 'punct'), ('SUPERVISED', 'amod'), ('MACHINE', 'punct')]

>> Bigrams: 
[[IQBAL, MUHAMMAD], [MUHAMMAD, ZHU], [ZHU, YAN], [YAN, :], [:, SUPERVISED], [SUPERVISED, MACHINE]]

>> Trigrams: 
[[IQBAL, MUHAMMAD, ZHU], [MUHAMMAD, ZHU, YAN], [ZHU, YAN, :], [YAN, :, SUPERVISED], [:, SUPERVISED, MACHINE]]

>> Noun Phrases are: 
[IQBAL MUHAMMAD, ZHU YAN]

>> Named Entities are: 
[('IQBAL', 'PERSON'), ('ZHU YAN', 'PERSON')] 

------------------- Sentence 2 -------------------

LEARNING APPROACHES: 


>> Tokens are: 
[LEARNING, APPROACHES, :] 

>> PoS Tags are: 
[('LEARNING', 'NOUN'), ('APPROACHES', 'NOUN'), (':', 'PUNCT')] 

>> Dependency Tags are: 
[('LEARNING', 'compound'), ('APPROACHES', 'ROOT'), (':', 'punct')]

>> Bigrams: 
[[LEARNING, APPROACHES], [APPROACHES, :]]

>> Trigrams: 
[[LEARNING, APPROACHES, :]]

>> Noun Phrases are: 
[LEARNING APPROACHES]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

A SURVEY   


>> Tokens are: 
[SURVEY,  ] 

>> PoS Tags are: 
[('SURVEY', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('SURVEY', 'ROOT'), (' ', 'nummod')]

>> Bigrams: 
[[SURVEY,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[A SURVEY]

>> Named Entities are: 
[] 


================================ Paragraph 407 =================================

950  

------------------- Sentence 1 -------------------

950   


>> Tokens are: 
[950,  ] 

>> PoS Tags are: 
[('950', 'NUM'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('950', 'nummod'), (' ', 'ROOT')]

>> Bigrams: 
[[950,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('950', 'CARDINAL')] 


================================ Paragraph 408 =================================

  

------------------- Sentence 1 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 409 =================================

Fig.8. Pseudo-code for training of BN  

------------------- Sentence 1 -------------------

Fig.8. 


>> Tokens are: 
[Fig.8, .] 

>> PoS Tags are: 
[('Fig.8', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Fig.8', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Fig.8, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Pseudo-code for training of BN   


>> Tokens are: 
[Pseudo, -, code, training, BN,  ] 

>> PoS Tags are: 
[('Pseudo', 'NOUN'), ('-', 'PUNCT'), ('code', 'NOUN'), ('training', 'NOUN'), ('BN', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Pseudo', 'compound'), ('-', 'punct'), ('code', 'ROOT'), ('training', 'pobj'), ('BN', 'compound'), (' ', 'pobj')]

>> Bigrams: 
[[Pseudo, -], [-, code], [code, training], [training, BN], [BN,  ]]

>> Trigrams: 
[[Pseudo, -, code], [-, code, training], [code, training, BN], [training, BN,  ]]

>> Noun Phrases are: 
[Pseudo-code, training]

>> Named Entities are: 
[] 


================================ Paragraph 410 =================================

5. INSTANCE-BASED LEARNING  

------------------- Sentence 1 -------------------

5. 


>> Tokens are: 
[5, .] 

>> PoS Tags are: 
[('5', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('5', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[5, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('5', 'CARDINAL')] 

------------------- Sentence 2 -------------------

INSTANCE-BASED LEARNING   


>> Tokens are: 
[INSTANCE, -, BASED, LEARNING,  ] 

>> PoS Tags are: 
[('INSTANCE', 'PROPN'), ('-', 'PUNCT'), ('BASED', 'VERB'), ('LEARNING', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('INSTANCE', 'npadvmod'), ('-', 'punct'), ('BASED', 'amod'), ('LEARNING', 'ROOT'), (' ', 'nummod')]

>> Bigrams: 
[[INSTANCE, -], [-, BASED], [BASED, LEARNING], [LEARNING,  ]]

>> Trigrams: 
[[INSTANCE, -, BASED], [-, BASED, LEARNING], [BASED, LEARNING,  ]]

>> Noun Phrases are: 
[INSTANCE-BASED LEARNING]

>> Named Entities are: 
[('INSTANCE-BASED LEARNING  ', 'ORG')] 


================================ Paragraph 411 =================================

About this learning scheme, the author [24] describes it as  

------------------- Sentence 1 -------------------

About this learning scheme, the author [24] describes it as   


>> Tokens are: 
[learning, scheme, ,, author, [, 24, ], describes,  ] 

>> PoS Tags are: 
[('learning', 'VERB'), ('scheme', 'NOUN'), (',', 'PUNCT'), ('author', 'NOUN'), ('[', 'PUNCT'), ('24', 'NUM'), (']', 'PUNCT'), ('describes', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('learning', 'compound'), ('scheme', 'pobj'), (',', 'punct'), ('author', 'nsubj'), ('[', 'punct'), ('24', 'appos'), (']', 'punct'), ('describes', 'ROOT'), (' ', 'pobj')]

>> Bigrams: 
[[learning, scheme], [scheme, ,], [,, author], [author, [], [[, 24], [24, ]], [], describes], [describes,  ]]

>> Trigrams: 
[[learning, scheme, ,], [scheme, ,, author], [,, author, [], [author, [, 24], [[, 24, ]], [24, ], describes], [], describes,  ]]

>> Noun Phrases are: 
[this learning scheme, the author, it]

>> Named Entities are: 
[('24', 'CARDINAL')] 


================================ Paragraph 412 =================================

lazy-learning algorithms, as they delay the induction or  

------------------- Sentence 1 -------------------

lazy-learning algorithms, as they delay the induction or   


>> Tokens are: 
[lazy, -, learning, algorithms, ,, delay, induction,  ] 

>> PoS Tags are: 
[('lazy', 'ADJ'), ('-', 'PUNCT'), ('learning', 'VERB'), ('algorithms', 'NOUN'), (',', 'PUNCT'), ('delay', 'VERB'), ('induction', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('lazy', 'amod'), ('-', 'punct'), ('learning', 'amod'), ('algorithms', 'ROOT'), (',', 'punct'), ('delay', 'advcl'), ('induction', 'dobj'), (' ', 'conj')]

>> Bigrams: 
[[lazy, -], [-, learning], [learning, algorithms], [algorithms, ,], [,, delay], [delay, induction], [induction,  ]]

>> Trigrams: 
[[lazy, -, learning], [-, learning, algorithms], [learning, algorithms, ,], [algorithms, ,, delay], [,, delay, induction], [delay, induction,  ]]

>> Noun Phrases are: 
[lazy-learning algorithms, they, the induction]

>> Named Entities are: 
[] 


================================ Paragraph 413 =================================

generalization process until classification is performed. These  

------------------- Sentence 1 -------------------

generalization process until classification is performed. 


>> Tokens are: 
[generalization, process, classification, performed, .] 

>> PoS Tags are: 
[('generalization', 'NOUN'), ('process', 'NOUN'), ('classification', 'NOUN'), ('performed', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('generalization', 'compound'), ('process', 'ROOT'), ('classification', 'nsubjpass'), ('performed', 'advcl'), ('.', 'punct')]

>> Bigrams: 
[[generalization, process], [process, classification], [classification, performed], [performed, .]]

>> Trigrams: 
[[generalization, process, classification], [process, classification, performed], [classification, performed, .]]

>> Noun Phrases are: 
[generalization process, classification]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

These   


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 414 =================================

algorithms require less computational time during the training  

------------------- Sentence 1 -------------------

algorithms require less computational time during the training   


>> Tokens are: 
[algorithms, require, computational, time, training,  ] 

>> PoS Tags are: 
[('algorithms', 'NOUN'), ('require', 'VERB'), ('computational', 'ADJ'), ('time', 'NOUN'), ('training', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('algorithms', 'nsubj'), ('require', 'ROOT'), ('computational', 'amod'), ('time', 'dobj'), ('training', 'pobj'), (' ', 'punct')]

>> Bigrams: 
[[algorithms, require], [require, computational], [computational, time], [time, training], [training,  ]]

>> Trigrams: 
[[algorithms, require, computational], [require, computational, time], [computational, time, training], [time, training,  ]]

>> Noun Phrases are: 
[algorithms, less computational time, the training]

>> Named Entities are: 
[] 


================================ Paragraph 415 =================================

phase than other eager-learning algorithms (such as decision trees,  

------------------- Sentence 1 -------------------

phase than other eager-learning algorithms (such as decision trees,   


>> Tokens are: 
[phase, eager, -, learning, algorithms, (, decision, trees, ,,  ] 

>> PoS Tags are: 
[('phase', 'NOUN'), ('eager', 'ADJ'), ('-', 'PUNCT'), ('learning', 'VERB'), ('algorithms', 'NOUN'), ('(', 'PUNCT'), ('decision', 'NOUN'), ('trees', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('phase', 'ROOT'), ('eager', 'amod'), ('-', 'punct'), ('learning', 'amod'), ('algorithms', 'pobj'), ('(', 'punct'), ('decision', 'compound'), ('trees', 'pobj'), (',', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[phase, eager], [eager, -], [-, learning], [learning, algorithms], [algorithms, (], [(, decision], [decision, trees], [trees, ,], [,,  ]]

>> Trigrams: 
[[phase, eager, -], [eager, -, learning], [-, learning, algorithms], [learning, algorithms, (], [algorithms, (, decision], [(, decision, trees], [decision, trees, ,], [trees, ,,  ]]

>> Noun Phrases are: 
[phase, other eager-learning algorithms, decision trees]

>> Named Entities are: 
[] 


================================ Paragraph 416 =================================

neural and Bayes nets) but need more computation time during the  

------------------- Sentence 1 -------------------

neural and Bayes nets) but need more computation time during the   


>> Tokens are: 
[neural, Bayes, nets, ), need, computation, time,  ] 

>> PoS Tags are: 
[('neural', 'ADJ'), ('Bayes', 'PROPN'), ('nets', 'NOUN'), (')', 'PUNCT'), ('need', 'VERB'), ('computation', 'NOUN'), ('time', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('neural', 'amod'), ('Bayes', 'conj'), ('nets', 'nsubj'), (')', 'punct'), ('need', 'ROOT'), ('computation', 'compound'), ('time', 'dobj'), (' ', 'pobj')]

>> Bigrams: 
[[neural, Bayes], [Bayes, nets], [nets, )], [), need], [need, computation], [computation, time], [time,  ]]

>> Trigrams: 
[[neural, Bayes, nets], [Bayes, nets, )], [nets, ), need], [), need, computation], [need, computation, time], [computation, time,  ]]

>> Noun Phrases are: 
[neural and Bayes nets, more computation time]

>> Named Entities are: 
[('Bayes', 'ORG')] 


================================ Paragraph 417 =================================

classification process. Nearest Neighbor algorithm is an example  

------------------- Sentence 1 -------------------

classification process. 


>> Tokens are: 
[classification, process, .] 

>> PoS Tags are: 
[('classification', 'NOUN'), ('process', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('classification', 'compound'), ('process', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[classification, process], [process, .]]

>> Trigrams: 
[[classification, process, .]]

>> Noun Phrases are: 
[classification process]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Nearest Neighbor algorithm is an example   


>> Tokens are: 
[Nearest, Neighbor, algorithm, example,  ] 

>> PoS Tags are: 
[('Nearest', 'PROPN'), ('Neighbor', 'PROPN'), ('algorithm', 'NOUN'), ('example', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Nearest', 'compound'), ('Neighbor', 'compound'), ('algorithm', 'nsubj'), ('example', 'attr'), (' ', 'punct')]

>> Bigrams: 
[[Nearest, Neighbor], [Neighbor, algorithm], [algorithm, example], [example,  ]]

>> Trigrams: 
[[Nearest, Neighbor, algorithm], [Neighbor, algorithm, example], [algorithm, example,  ]]

>> Noun Phrases are: 
[Nearest Neighbor algorithm, an example]

>> Named Entities are: 
[('Nearest Neighbor', 'PERSON')] 


================================ Paragraph 418 =================================

of instance-based learning algorithms [1]. Aha [25] and De et. al  

------------------- Sentence 1 -------------------

of instance-based learning algorithms [1]. 


>> Tokens are: 
[instance, -, based, learning, algorithms, [, 1, ], .] 

>> PoS Tags are: 
[('instance', 'NOUN'), ('-', 'PUNCT'), ('based', 'VERB'), ('learning', 'VERB'), ('algorithms', 'NOUN'), ('[', 'PUNCT'), ('1', 'NUM'), (']', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('instance', 'npadvmod'), ('-', 'punct'), ('based', 'amod'), ('learning', 'compound'), ('algorithms', 'pobj'), ('[', 'punct'), ('1', 'appos'), (']', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[instance, -], [-, based], [based, learning], [learning, algorithms], [algorithms, [], [[, 1], [1, ]], [], .]]

>> Trigrams: 
[[instance, -, based], [-, based, learning], [based, learning, algorithms], [learning, algorithms, [], [algorithms, [, 1], [[, 1, ]], [1, ], .]]

>> Noun Phrases are: 
[instance-based learning algorithms]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Aha 


>> Tokens are: 
[Aha] 

>> PoS Tags are: 
[('Aha', 'INTJ')] 

>> Dependency Tags are: 
[('Aha', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

[25] and De et. 


>> Tokens are: 
[[, 25, ], De, et, .] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('25', 'NUM'), (']', 'PUNCT'), ('De', 'PROPN'), ('et', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('[', 'punct'), ('25', 'ROOT'), (']', 'punct'), ('De', 'compound'), ('et', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[[, 25], [25, ]], [], De], [De, et], [et, .]]

>> Trigrams: 
[[[, 25, ]], [25, ], De], [], De, et], [De, et, .]]

>> Noun Phrases are: 
[De et]

>> Named Entities are: 
[('25', 'CARDINAL'), ('De', 'PERSON')] 

------------------- Sentence 4 -------------------

al   


>> Tokens are: 
[al,  ] 

>> PoS Tags are: 
[('al', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('al', 'compound'), (' ', 'ROOT')]

>> Bigrams: 
[[al,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 419 =================================

[26] discussed the instance-based learning classifiers.  

------------------- Sentence 1 -------------------

[26] discussed the instance-based learning classifiers. 


>> Tokens are: 
[[, 26, ], discussed, instance, -, based, learning, classifiers, .] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('26', 'NUM'), (']', 'PUNCT'), ('discussed', 'VERB'), ('instance', 'NOUN'), ('-', 'PUNCT'), ('based', 'VERB'), ('learning', 'NOUN'), ('classifiers', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('[', 'punct'), ('26', 'nsubj'), (']', 'punct'), ('discussed', 'ROOT'), ('instance', 'npadvmod'), ('-', 'punct'), ('based', 'amod'), ('learning', 'compound'), ('classifiers', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[[, 26], [26, ]], [], discussed], [discussed, instance], [instance, -], [-, based], [based, learning], [learning, classifiers], [classifiers, .]]

>> Trigrams: 
[[[, 26, ]], [26, ], discussed], [], discussed, instance], [discussed, instance, -], [instance, -, based], [-, based, learning], [based, learning, classifiers], [learning, classifiers, .]]

>> Noun Phrases are: 
[the instance-based learning classifiers]

>> Named Entities are: 
[('26', 'CARDINAL')] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 420 =================================

k-Nearest-Neighbor (kNN) classification  is one of the most  

------------------- Sentence 1 -------------------

k-Nearest-Neighbor (kNN) classification  is one of the most   


>> Tokens are: 
[k, -, Nearest, -, Neighbor, (, kNN, ), classification,  ,  ] 

>> PoS Tags are: 
[('k', 'X'), ('-', 'PUNCT'), ('Nearest', 'PROPN'), ('-', 'PUNCT'), ('Neighbor', 'PROPN'), ('(', 'PUNCT'), ('kNN', 'PROPN'), (')', 'PUNCT'), ('classification', 'NOUN'), (' ', 'SPACE'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('k', 'meta'), ('-', 'punct'), ('Nearest', 'nmod'), ('-', 'punct'), ('Neighbor', 'nsubj'), ('(', 'punct'), ('kNN', 'appos'), (')', 'punct'), ('classification', 'compound'), (' ', 'appos'), (' ', 'pobj')]

>> Bigrams: 
[[k, -], [-, Nearest], [Nearest, -], [-, Neighbor], [Neighbor, (], [(, kNN], [kNN, )], [), classification], [classification,  ], [ ,  ]]

>> Trigrams: 
[[k, -, Nearest], [-, Nearest, -], [Nearest, -, Neighbor], [-, Neighbor, (], [Neighbor, (, kNN], [(, kNN, )], [kNN, ), classification], [), classification,  ], [classification,  ,  ]]

>> Noun Phrases are: 
[k-Nearest-Neighbor, (kNN]

>> Named Entities are: 
[('kNN', 'ORG')] 


================================ Paragraph 421 =================================

widely used method for a classification of objects when there is  

------------------- Sentence 1 -------------------

widely used method for a classification of objects when there is   


>> Tokens are: 
[widely, method, classification, objects,  ] 

>> PoS Tags are: 
[('widely', 'ADV'), ('method', 'NOUN'), ('classification', 'NOUN'), ('objects', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('widely', 'advmod'), ('method', 'ROOT'), ('classification', 'pobj'), ('objects', 'pobj'), (' ', 'attr')]

>> Bigrams: 
[[widely, method], [method, classification], [classification, objects], [objects,  ]]

>> Trigrams: 
[[widely, method, classification], [method, classification, objects], [classification, objects,  ]]

>> Noun Phrases are: 
[widely used method, a classification, objects]

>> Named Entities are: 
[] 


================================ Paragraph 422 =================================

little or no prior knowledge about the distribution of the data.  

------------------- Sentence 1 -------------------

little or no prior knowledge about the distribution of the data. 


>> Tokens are: 
[little, prior, knowledge, distribution, data, .] 

>> PoS Tags are: 
[('little', 'ADJ'), ('prior', 'ADJ'), ('knowledge', 'NOUN'), ('distribution', 'NOUN'), ('data', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('little', 'amod'), ('prior', 'amod'), ('knowledge', 'ROOT'), ('distribution', 'pobj'), ('data', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[little, prior], [prior, knowledge], [knowledge, distribution], [distribution, data], [data, .]]

>> Trigrams: 
[[little, prior, knowledge], [prior, knowledge, distribution], [knowledge, distribution, data], [distribution, data, .]]

>> Noun Phrases are: 
[little or no prior knowledge, the distribution, the data]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 423 =================================

kNN is a good choice to perform discriminate analysis when  

------------------- Sentence 1 -------------------

kNN is a good choice to perform discriminate analysis when   


>> Tokens are: 
[kNN, good, choice, perform, discriminate, analysis,  ] 

>> PoS Tags are: 
[('kNN', 'PROPN'), ('good', 'ADJ'), ('choice', 'NOUN'), ('perform', 'VERB'), ('discriminate', 'ADJ'), ('analysis', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('kNN', 'nsubj'), ('good', 'amod'), ('choice', 'attr'), ('perform', 'relcl'), ('discriminate', 'amod'), ('analysis', 'dobj'), (' ', 'punct')]

>> Bigrams: 
[[kNN, good], [good, choice], [choice, perform], [perform, discriminate], [discriminate, analysis], [analysis,  ]]

>> Trigrams: 
[[kNN, good, choice], [good, choice, perform], [choice, perform, discriminate], [perform, discriminate, analysis], [discriminate, analysis,  ]]

>> Noun Phrases are: 
[kNN, a good choice, discriminate analysis]

>> Named Entities are: 
[('kNN', 'ORG')] 


================================ Paragraph 424 =================================

reliable parametric estimates of probability densities are  

------------------- Sentence 1 -------------------

reliable parametric estimates of probability densities are   


>> Tokens are: 
[reliable, parametric, estimates, probability, densities,  ] 

>> PoS Tags are: 
[('reliable', 'ADJ'), ('parametric', 'NOUN'), ('estimates', 'NOUN'), ('probability', 'NOUN'), ('densities', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('reliable', 'amod'), ('parametric', 'compound'), ('estimates', 'nsubj'), ('probability', 'compound'), ('densities', 'pobj'), (' ', 'attr')]

>> Bigrams: 
[[reliable, parametric], [parametric, estimates], [estimates, probability], [probability, densities], [densities,  ]]

>> Trigrams: 
[[reliable, parametric, estimates], [parametric, estimates, probability], [estimates, probability, densities], [probability, densities,  ]]

>> Noun Phrases are: 
[reliable parametric estimates, probability densities]

>> Named Entities are: 
[] 


================================ Paragraph 425 =================================

unknown or difficult to determine[27].  

------------------- Sentence 1 -------------------

unknown or difficult to determine[27]. 


>> Tokens are: 
[unknown, difficult, determine[27, ], .] 

>> PoS Tags are: 
[('unknown', 'ADJ'), ('difficult', 'ADJ'), ('determine[27', 'X'), (']', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('unknown', 'ROOT'), ('difficult', 'conj'), ('determine[27', 'pobj'), (']', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[unknown, difficult], [difficult, determine[27], [determine[27, ]], [], .]]

>> Trigrams: 
[[unknown, difficult, determine[27], [difficult, determine[27, ]], [determine[27, ], .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 426 =================================

kNN is a example of supervised learning algorithm  in which  

------------------- Sentence 1 -------------------

kNN is a example of supervised learning algorithm  in which   


>> Tokens are: 
[kNN, example, supervised, learning, algorithm,  ,  ] 

>> PoS Tags are: 
[('kNN', 'PROPN'), ('example', 'NOUN'), ('supervised', 'ADJ'), ('learning', 'NOUN'), ('algorithm', 'NOUN'), (' ', 'SPACE'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('kNN', 'nsubj'), ('example', 'attr'), ('supervised', 'amod'), ('learning', 'pobj'), ('algorithm', 'advmod'), (' ', 'attr'), (' ', 'punct')]

>> Bigrams: 
[[kNN, example], [example, supervised], [supervised, learning], [learning, algorithm], [algorithm,  ], [ ,  ]]

>> Trigrams: 
[[kNN, example, supervised], [example, supervised, learning], [supervised, learning, algorithm], [learning, algorithm,  ], [algorithm,  ,  ]]

>> Noun Phrases are: 
[kNN, a example, supervised learning]

>> Named Entities are: 
[('kNN', 'ORG')] 


================================ Paragraph 427 =================================

the result of new instance query is classified based on majority  

------------------- Sentence 1 -------------------

the result of new instance query is classified based on majority   


>> Tokens are: 
[result, new, instance, query, classified, based, majority,  ] 

>> PoS Tags are: 
[('result', 'NOUN'), ('new', 'ADJ'), ('instance', 'NOUN'), ('query', 'NOUN'), ('classified', 'VERB'), ('based', 'VERB'), ('majority', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('result', 'nsubjpass'), ('new', 'amod'), ('instance', 'compound'), ('query', 'pobj'), ('classified', 'ROOT'), ('based', 'prep'), ('majority', 'pobj'), (' ', 'punct')]

>> Bigrams: 
[[result, new], [new, instance], [instance, query], [query, classified], [classified, based], [based, majority], [majority,  ]]

>> Trigrams: 
[[result, new, instance], [new, instance, query], [instance, query, classified], [query, classified, based], [classified, based, majority], [based, majority,  ]]

>> Noun Phrases are: 
[the result, new instance query, majority]

>> Named Entities are: 
[] 


================================ Paragraph 428 =================================

of k-nearest neighbor category. The core function of algorithm is  

------------------- Sentence 1 -------------------

of k-nearest neighbor category. 


>> Tokens are: 
[k, -, nearest, neighbor, category, .] 

>> PoS Tags are: 
[('k', 'NOUN'), ('-', 'PUNCT'), ('nearest', 'ADJ'), ('neighbor', 'NOUN'), ('category', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('k', 'advmod'), ('-', 'punct'), ('nearest', 'amod'), ('neighbor', 'compound'), ('category', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[k, -], [-, nearest], [nearest, neighbor], [neighbor, category], [category, .]]

>> Trigrams: 
[[k, -, nearest], [-, nearest, neighbor], [nearest, neighbor, category], [neighbor, category, .]]

>> Noun Phrases are: 
[k-nearest neighbor category]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

The core function of algorithm is   


>> Tokens are: 
[core, function, algorithm,  ] 

>> PoS Tags are: 
[('core', 'NOUN'), ('function', 'NOUN'), ('algorithm', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('core', 'compound'), ('function', 'nsubj'), ('algorithm', 'pobj'), (' ', 'attr')]

>> Bigrams: 
[[core, function], [function, algorithm], [algorithm,  ]]

>> Trigrams: 
[[core, function, algorithm], [function, algorithm,  ]]

>> Noun Phrases are: 
[The core function, algorithm]

>> Named Entities are: 
[] 


================================ Paragraph 429 =================================

to classify a new object based on attributes and training samples.  

------------------- Sentence 1 -------------------

to classify a new object based on attributes and training samples.   


>> Tokens are: 
[classify, new, object, based, attributes, training, samples, .,  ] 

>> PoS Tags are: 
[('classify', 'VERB'), ('new', 'ADJ'), ('object', 'NOUN'), ('based', 'VERB'), ('attributes', 'NOUN'), ('training', 'VERB'), ('samples', 'NOUN'), ('.', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('classify', 'ROOT'), ('new', 'amod'), ('object', 'dobj'), ('based', 'acl'), ('attributes', 'pobj'), ('training', 'compound'), ('samples', 'conj'), ('.', 'punct'), (' ', 'dobj')]

>> Bigrams: 
[[classify, new], [new, object], [object, based], [based, attributes], [attributes, training], [training, samples], [samples, .], [.,  ]]

>> Trigrams: 
[[classify, new, object], [new, object, based], [object, based, attributes], [based, attributes, training], [attributes, training, samples], [training, samples, .], [samples, .,  ]]

>> Noun Phrases are: 
[a new object, attributes, training samples]

>> Named Entities are: 
[] 


================================ Paragraph 430 =================================

Here the classification is using majority vote among the  

------------------- Sentence 1 -------------------

Here the classification is using majority vote among the   


>> Tokens are: 
[classification, majority, vote,  ] 

>> PoS Tags are: 
[('classification', 'NOUN'), ('majority', 'NOUN'), ('vote', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('classification', 'nsubj'), ('majority', 'compound'), ('vote', 'dobj'), (' ', 'pobj')]

>> Bigrams: 
[[classification, majority], [majority, vote], [vote,  ]]

>> Trigrams: 
[[classification, majority, vote], [majority, vote,  ]]

>> Noun Phrases are: 
[the classification, majority vote]

>> Named Entities are: 
[] 


================================ Paragraph 431 =================================

classification of the k objects. For example we have conducted a  

------------------- Sentence 1 -------------------

classification of the k objects. 


>> Tokens are: 
[classification, k, objects, .] 

>> PoS Tags are: 
[('classification', 'NOUN'), ('k', 'NOUN'), ('objects', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('classification', 'ROOT'), ('k', 'pobj'), ('objects', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[classification, k], [k, objects], [objects, .]]

>> Trigrams: 
[[classification, k, objects], [k, objects, .]]

>> Noun Phrases are: 
[classification, the k, objects]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

For example we have conducted a   


>> Tokens are: 
[example, conducted,  ] 

>> PoS Tags are: 
[('example', 'NOUN'), ('conducted', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('example', 'pobj'), ('conducted', 'ROOT'), (' ', 'dobj')]

>> Bigrams: 
[[example, conducted], [conducted,  ]]

>> Trigrams: 
[[example, conducted,  ]]

>> Noun Phrases are: 
[example, we]

>> Named Entities are: 
[] 


================================ Paragraph 432 =================================

survey on consumption of any particular item to know it’s worth  

------------------- Sentence 1 -------------------

survey on consumption of any particular item to know it’s worth   


>> Tokens are: 
[survey, consumption, particular, item, know, worth,  ] 

>> PoS Tags are: 
[('survey', 'NOUN'), ('consumption', 'NOUN'), ('particular', 'ADJ'), ('item', 'NOUN'), ('know', 'VERB'), ('worth', 'ADJ'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('survey', 'ROOT'), ('consumption', 'pobj'), ('particular', 'amod'), ('item', 'pobj'), ('know', 'advcl'), ('worth', 'acomp'), (' ', 'npadvmod')]

>> Bigrams: 
[[survey, consumption], [consumption, particular], [particular, item], [item, know], [know, worth], [worth,  ]]

>> Trigrams: 
[[survey, consumption, particular], [consumption, particular, item], [particular, item, know], [item, know, worth], [know, worth,  ]]

>> Noun Phrases are: 
[survey, consumption, any particular item, it]

>> Named Entities are: 
[] 


================================ Paragraph 433 =================================

in the market. Below is a sample training table.  

------------------- Sentence 1 -------------------

in the market. 


>> Tokens are: 
[market, .] 

>> PoS Tags are: 
[('market', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('market', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[market, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[the market]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Below is a sample training table. 


>> Tokens are: 
[sample, training, table, .] 

>> PoS Tags are: 
[('sample', 'NOUN'), ('training', 'NOUN'), ('table', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('sample', 'compound'), ('training', 'compound'), ('table', 'nsubj'), ('.', 'punct')]

>> Bigrams: 
[[sample, training], [training, table], [table, .]]

>> Trigrams: 
[[sample, training, table], [training, table, .]]

>> Noun Phrases are: 
[a sample training table]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 434 =================================

Table.3. Training sample  

------------------- Sentence 1 -------------------

Table.3. 


>> Tokens are: 
[Table.3, .] 

>> PoS Tags are: 
[('Table.3', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Table.3', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Table.3, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Table.3]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Training sample   


>> Tokens are: 
[Training, sample,  ] 

>> PoS Tags are: 
[('Training', 'VERB'), ('sample', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Training', 'ROOT'), ('sample', 'dobj'), (' ', 'punct')]

>> Bigrams: 
[[Training, sample], [sample,  ]]

>> Trigrams: 
[[Training, sample,  ]]

>> Noun Phrases are: 
[sample]

>> Named Entities are: 
[] 


================================ Paragraph 435 =================================

X1 X2 Result  

------------------- Sentence 1 -------------------

X1 X2 Result   


>> Tokens are: 
[X1, X2, Result,  ] 

>> PoS Tags are: 
[('X1', 'PROPN'), ('X2', 'PROPN'), ('Result', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('X1', 'compound'), ('X2', 'compound'), ('Result', 'compound'), (' ', 'ROOT')]

>> Bigrams: 
[[X1, X2], [X2, Result], [Result,  ]]

>> Trigrams: 
[[X1, X2, Result], [X2, Result,  ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 436 =================================

8 8 NO  

------------------- Sentence 1 -------------------

8 8 NO   


>> Tokens are: 
[8, 8,  ] 

>> PoS Tags are: 
[('8', 'NUM'), ('8', 'NUM'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('8', 'compound'), ('8', 'nummod'), (' ', 'punct')]

>> Bigrams: 
[[8, 8], [8,  ]]

>> Trigrams: 
[[8, 8,  ]]

>> Noun Phrases are: 
[8 8 NO]

>> Named Entities are: 
[('8 8', 'CARDINAL')] 


================================ Paragraph 437 =================================

8 5 NO  

------------------- Sentence 1 -------------------

8 5 NO   


>> Tokens are: 
[8, 5,  ] 

>> PoS Tags are: 
[('8', 'NUM'), ('5', 'NUM'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('8', 'compound'), ('5', 'nummod'), (' ', 'punct')]

>> Bigrams: 
[[8, 5], [5,  ]]

>> Trigrams: 
[[8, 5,  ]]

>> Noun Phrases are: 
[8 5 NO]

>> Named Entities are: 
[('8 5', 'CARDINAL')] 


================================ Paragraph 438 =================================

4 5 Yes  

------------------- Sentence 1 -------------------

4 5 


>> Tokens are: 
[4, 5] 

>> PoS Tags are: 
[('4', 'NUM'), ('5', 'NUM')] 

>> Dependency Tags are: 
[('4', 'nummod'), ('5', 'ROOT')]

>> Bigrams: 
[[4, 5]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Yes   


>> Tokens are: 
[Yes,  ] 

>> PoS Tags are: 
[('Yes', 'INTJ'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Yes', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[Yes,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 439 =================================

1 5 Yes  

------------------- Sentence 1 -------------------

1 5 


>> Tokens are: 
[1, 5] 

>> PoS Tags are: 
[('1', 'NUM'), ('5', 'NUM')] 

>> Dependency Tags are: 
[('1', 'nummod'), ('5', 'ROOT')]

>> Bigrams: 
[[1, 5]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('1 5', 'CARDINAL')] 

------------------- Sentence 2 -------------------

Yes   


>> Tokens are: 
[Yes,  ] 

>> PoS Tags are: 
[('Yes', 'INTJ'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Yes', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[Yes,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 440 =================================

The outcome “Yes” or “No” is depended on the variable  

------------------- Sentence 1 -------------------

The outcome “Yes” or “No” is depended on the variable   


>> Tokens are: 
[outcome, “, Yes, ”, “, ”, depended, variable,  ] 

>> PoS Tags are: 
[('outcome', 'NOUN'), ('“', 'PUNCT'), ('Yes', 'INTJ'), ('”', 'PUNCT'), ('“', 'PUNCT'), ('”', 'PUNCT'), ('depended', 'VERB'), ('variable', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('outcome', 'nsubjpass'), ('“', 'punct'), ('Yes', 'intj'), ('”', 'punct'), ('“', 'punct'), ('”', 'punct'), ('depended', 'ROOT'), ('variable', 'pobj'), (' ', 'punct')]

>> Bigrams: 
[[outcome, “], [“, Yes], [Yes, ”], [”, “], [“, ”], [”, depended], [depended, variable], [variable,  ]]

>> Trigrams: 
[[outcome, “, Yes], [“, Yes, ”], [Yes, ”, “], [”, “, ”], [“, ”, depended], [”, depended, variable], [depended, variable,  ]]

>> Noun Phrases are: 
[The outcome, the variable]

>> Named Entities are: 
[] 


================================ Paragraph 441 =================================

values of X1 and X2, so if we want to know the outcome of that  

------------------- Sentence 1 -------------------

values of X1 and X2, so if we want to know the outcome of that 


>> Tokens are: 
[values, X1, X2, ,, want, know, outcome] 

>> PoS Tags are: 
[('values', 'NOUN'), ('X1', 'PROPN'), ('X2', 'PROPN'), (',', 'PUNCT'), ('want', 'VERB'), ('know', 'VERB'), ('outcome', 'NOUN')] 

>> Dependency Tags are: 
[('values', 'ROOT'), ('X1', 'pobj'), ('X2', 'conj'), (',', 'punct'), ('want', 'advcl'), ('know', 'xcomp'), ('outcome', 'dobj')]

>> Bigrams: 
[[values, X1], [X1, X2], [X2, ,], [,, want], [want, know], [know, outcome]]

>> Trigrams: 
[[values, X1, X2], [X1, X2, ,], [X2, ,, want], [,, want, know], [want, know, outcome]]

>> Noun Phrases are: 
[values, X1, X2, we, the outcome]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 442 =================================

combination which is not available in data table, for example,  

------------------- Sentence 1 -------------------

combination which is not available in data table, for example,   


>> Tokens are: 
[combination, available, data, table, ,, example, ,,  ] 

>> PoS Tags are: 
[('combination', 'NOUN'), ('available', 'ADJ'), ('data', 'NOUN'), ('table', 'NOUN'), (',', 'PUNCT'), ('example', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('combination', 'ROOT'), ('available', 'acomp'), ('data', 'compound'), ('table', 'pobj'), (',', 'punct'), ('example', 'pobj'), (',', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[combination, available], [available, data], [data, table], [table, ,], [,, example], [example, ,], [,,  ]]

>> Trigrams: 
[[combination, available, data], [available, data, table], [data, table, ,], [table, ,, example], [,, example, ,], [example, ,,  ]]

>> Noun Phrases are: 
[combination, data table, example]

>> Named Entities are: 
[] 


================================ Paragraph 443 =================================

when  x1 = 4, and x2 = 8 then without doing lengthy exercise of  

------------------- Sentence 1 -------------------

when  x1 = 4, and x2 = 8 then without doing lengthy exercise of   


>> Tokens are: 
[ , x1, =, 4, ,, x2, =, 8, lengthy, exercise,  ] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('x1', 'NUM'), ('=', 'SYM'), ('4', 'NUM'), (',', 'PUNCT'), ('x2', 'NUM'), ('=', 'SYM'), ('8', 'NUM'), ('lengthy', 'ADJ'), ('exercise', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT'), ('x1', 'appos'), ('=', 'punct'), ('4', 'prep'), (',', 'punct'), ('x2', 'conj'), ('=', 'punct'), ('8', 'prep'), ('lengthy', 'amod'), ('exercise', 'dobj'), (' ', 'pobj')]

>> Bigrams: 
[[ , x1], [x1, =], [=, 4], [4, ,], [,, x2], [x2, =], [=, 8], [8, lengthy], [lengthy, exercise], [exercise,  ]]

>> Trigrams: 
[[ , x1, =], [x1, =, 4], [=, 4, ,], [4, ,, x2], [,, x2, =], [x2, =, 8], [=, 8, lengthy], [8, lengthy, exercise], [lengthy, exercise,  ]]

>> Noun Phrases are: 
[lengthy exercise]

>> Named Entities are: 
[('4', 'CARDINAL'), ('8', 'CARDINAL')] 


================================ Paragraph 444 =================================

conducting surveys, we can predict the results by using kNN  

------------------- Sentence 1 -------------------

conducting surveys, we can predict the results by using kNN   


>> Tokens are: 
[conducting, surveys, ,, predict, results, kNN,  ] 

>> PoS Tags are: 
[('conducting', 'VERB'), ('surveys', 'NOUN'), (',', 'PUNCT'), ('predict', 'VERB'), ('results', 'NOUN'), ('kNN', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('conducting', 'advcl'), ('surveys', 'dobj'), (',', 'punct'), ('predict', 'ROOT'), ('results', 'dobj'), ('kNN', 'compound'), (' ', 'dobj')]

>> Bigrams: 
[[conducting, surveys], [surveys, ,], [,, predict], [predict, results], [results, kNN], [kNN,  ]]

>> Trigrams: 
[[conducting, surveys, ,], [surveys, ,, predict], [,, predict, results], [predict, results, kNN], [results, kNN,  ]]

>> Noun Phrases are: 
[surveys, we, the results]

>> Named Entities are: 
[('kNN', 'ORG')] 


================================ Paragraph 445 =================================

classification method.  

------------------- Sentence 1 -------------------

classification method. 


>> Tokens are: 
[classification, method, .] 

>> PoS Tags are: 
[('classification', 'NOUN'), ('method', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('classification', 'compound'), ('method', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[classification, method], [method, .]]

>> Trigrams: 
[[classification, method, .]]

>> Noun Phrases are: 
[classification method]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 446 =================================

The below pseudo code is an example for the instance base  

------------------- Sentence 1 -------------------

The below pseudo code is an example for the instance base   


>> Tokens are: 
[pseudo, code, example, instance, base,  ] 

>> PoS Tags are: 
[('pseudo', 'NOUN'), ('code', 'NOUN'), ('example', 'NOUN'), ('instance', 'NOUN'), ('base', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('pseudo', 'compound'), ('code', 'nsubj'), ('example', 'attr'), ('instance', 'compound'), ('base', 'pobj'), (' ', 'punct')]

>> Bigrams: 
[[pseudo, code], [code, example], [example, instance], [instance, base], [base,  ]]

>> Trigrams: 
[[pseudo, code, example], [code, example, instance], [example, instance, base], [instance, base,  ]]

>> Noun Phrases are: 
[The below pseudo code, an example, the instance base]

>> Named Entities are: 
[] 


================================ Paragraph 447 =================================

learning methods.  

------------------- Sentence 1 -------------------

learning methods. 


>> Tokens are: 
[learning, methods, .] 

>> PoS Tags are: 
[('learning', 'VERB'), ('methods', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('learning', 'ROOT'), ('methods', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[learning, methods], [methods, .]]

>> Trigrams: 
[[learning, methods, .]]

>> Noun Phrases are: 
[methods]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 448 =================================

  

------------------- Sentence 1 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 449 =================================

Fig.9. Pseudo-code for instance-based learners  

------------------- Sentence 1 -------------------

Fig.9. 


>> Tokens are: 
[Fig.9, .] 

>> PoS Tags are: 
[('Fig.9', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Fig.9', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Fig.9, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Pseudo-code for instance-based learners   


>> Tokens are: 
[Pseudo, -, code, instance, -, based, learners,  ] 

>> PoS Tags are: 
[('Pseudo', 'NOUN'), ('-', 'PUNCT'), ('code', 'NOUN'), ('instance', 'NOUN'), ('-', 'PUNCT'), ('based', 'VERB'), ('learners', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Pseudo', 'compound'), ('-', 'punct'), ('code', 'ROOT'), ('instance', 'npadvmod'), ('-', 'punct'), ('based', 'amod'), ('learners', 'pobj'), (' ', 'punct')]

>> Bigrams: 
[[Pseudo, -], [-, code], [code, instance], [instance, -], [-, based], [based, learners], [learners,  ]]

>> Trigrams: 
[[Pseudo, -, code], [-, code, instance], [code, instance, -], [instance, -, based], [-, based, learners], [based, learners,  ]]

>> Noun Phrases are: 
[Pseudo-code, instance-based learners]

>> Named Entities are: 
[] 


================================ Paragraph 450 =================================

6. SUPPORT VECTOR MACHINES  

------------------- Sentence 1 -------------------

6. 


>> Tokens are: 
[6, .] 

>> PoS Tags are: 
[('6', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('6', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[6, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('6', 'CARDINAL')] 

------------------- Sentence 2 -------------------

SUPPORT VECTOR MACHINES   


>> Tokens are: 
[SUPPORT, VECTOR, MACHINES,  ] 

>> PoS Tags are: 
[('SUPPORT', 'PROPN'), ('VECTOR', 'PROPN'), ('MACHINES', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('SUPPORT', 'compound'), ('VECTOR', 'compound'), ('MACHINES', 'ROOT'), (' ', 'nummod')]

>> Bigrams: 
[[SUPPORT, VECTOR], [VECTOR, MACHINES], [MACHINES,  ]]

>> Trigrams: 
[[SUPPORT, VECTOR, MACHINES], [VECTOR, MACHINES,  ]]

>> Noun Phrases are: 
[SUPPORT VECTOR MACHINES]

>> Named Entities are: 
[] 


================================ Paragraph 451 =================================

Support Vector Machines (SVMs) are a set of supervised  

------------------- Sentence 1 -------------------

Support Vector Machines (SVMs) are a set of supervised   


>> Tokens are: 
[Support, Vector, Machines, (, SVMs, ), set, supervised,  ] 

>> PoS Tags are: 
[('Support', 'PROPN'), ('Vector', 'PROPN'), ('Machines', 'PROPN'), ('(', 'PUNCT'), ('SVMs', 'PROPN'), (')', 'PUNCT'), ('set', 'NOUN'), ('supervised', 'ADJ'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Support', 'compound'), ('Vector', 'compound'), ('Machines', 'nsubj'), ('(', 'punct'), ('SVMs', 'appos'), (')', 'punct'), ('set', 'attr'), ('supervised', 'amod'), (' ', 'pobj')]

>> Bigrams: 
[[Support, Vector], [Vector, Machines], [Machines, (], [(, SVMs], [SVMs, )], [), set], [set, supervised], [supervised,  ]]

>> Trigrams: 
[[Support, Vector, Machines], [Vector, Machines, (], [Machines, (, SVMs], [(, SVMs, )], [SVMs, ), set], [), set, supervised], [set, supervised,  ]]

>> Noun Phrases are: 
[Support Vector Machines, SVMs, a set]

>> Named Entities are: 
[('Support Vector Machines', 'ORG')] 


================================ Paragraph 452 =================================

learning methods which have been used for classification,  

------------------- Sentence 1 -------------------

learning methods which have been used for classification,   


>> Tokens are: 
[learning, methods, classification, ,,  ] 

>> PoS Tags are: 
[('learning', 'VERB'), ('methods', 'NOUN'), ('classification', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('learning', 'ROOT'), ('methods', 'dobj'), ('classification', 'pobj'), (',', 'punct'), (' ', 'npadvmod')]

>> Bigrams: 
[[learning, methods], [methods, classification], [classification, ,], [,,  ]]

>> Trigrams: 
[[learning, methods, classification], [methods, classification, ,], [classification, ,,  ]]

>> Noun Phrases are: 
[methods, classification]

>> Named Entities are: 
[] 


================================ Paragraph 453 =================================

regression and outlier’s detection. There are number of benefits  

------------------- Sentence 1 -------------------

regression and outlier’s detection. 


>> Tokens are: 
[regression, outlier, detection, .] 

>> PoS Tags are: 
[('regression', 'NOUN'), ('outlier', 'ADJ'), ('detection', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('regression', 'nmod'), ('outlier', 'conj'), ('detection', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[regression, outlier], [outlier, detection], [detection, .]]

>> Trigrams: 
[[regression, outlier, detection], [outlier, detection, .]]

>> Noun Phrases are: 
[regression and outlier’s detection]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

There are number of benefits   


>> Tokens are: 
[number, benefits,  ] 

>> PoS Tags are: 
[('number', 'NOUN'), ('benefits', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('number', 'attr'), ('benefits', 'pobj'), (' ', 'attr')]

>> Bigrams: 
[[number, benefits], [benefits,  ]]

>> Trigrams: 
[[number, benefits,  ]]

>> Noun Phrases are: 
[number, benefits]

>> Named Entities are: 
[] 


================================ Paragraph 454 =================================

for using SVM such as: i) It is effective is high dimensional  

------------------- Sentence 1 -------------------

for using SVM such as: i) 


>> Tokens are: 
[SVM, :, )] 

>> PoS Tags are: 
[('SVM', 'PROPN'), (':', 'PUNCT'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('SVM', 'dobj'), (':', 'punct'), (')', 'punct')]

>> Bigrams: 
[[SVM, :], [:, )]]

>> Trigrams: 
[[SVM, :, )]]

>> Noun Phrases are: 
[SVM]

>> Named Entities are: 
[('SVM', 'ORG')] 

------------------- Sentence 2 -------------------

It is effective is high dimensional   


>> Tokens are: 
[effective, high, dimensional,  ] 

>> PoS Tags are: 
[('effective', 'ADJ'), ('high', 'ADJ'), ('dimensional', 'ADJ'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('effective', 'acomp'), ('high', 'advmod'), ('dimensional', 'amod'), (' ', 'punct')]

>> Bigrams: 
[[effective, high], [high, dimensional], [dimensional,  ]]

>> Trigrams: 
[[effective, high, dimensional], [high, dimensional,  ]]

>> Noun Phrases are: 
[It]

>> Named Entities are: 
[] 


================================ Paragraph 455 =================================

space, ii) Uses a subset of training points in the decision function  

------------------- Sentence 1 -------------------

space, ii) Uses a subset of training points in the decision function   


>> Tokens are: 
[space, ,, ii, ), Uses, subset, training, points, decision, function,  ] 

>> PoS Tags are: 
[('space', 'NOUN'), (',', 'PUNCT'), ('ii', 'NOUN'), (')', 'PUNCT'), ('Uses', 'VERB'), ('subset', 'NOUN'), ('training', 'NOUN'), ('points', 'NOUN'), ('decision', 'NOUN'), ('function', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('space', 'nsubj'), (',', 'punct'), ('ii', 'appos'), (')', 'punct'), ('Uses', 'ROOT'), ('subset', 'dobj'), ('training', 'compound'), ('points', 'pobj'), ('decision', 'compound'), ('function', 'pobj'), (' ', 'punct')]

>> Bigrams: 
[[space, ,], [,, ii], [ii, )], [), Uses], [Uses, subset], [subset, training], [training, points], [points, decision], [decision, function], [function,  ]]

>> Trigrams: 
[[space, ,, ii], [,, ii, )], [ii, ), Uses], [), Uses, subset], [Uses, subset, training], [subset, training, points], [training, points, decision], [points, decision, function], [decision, function,  ]]

>> Noun Phrases are: 
[space, ii, a subset, training points, the decision function]

>> Named Entities are: 
[] 


================================ Paragraph 456 =================================

(called support vectors), so it is also memory efficient, iii) It is  

------------------- Sentence 1 -------------------

(called support vectors), so it is also memory efficient, iii) 


>> Tokens are: 
[(, called, support, vectors, ), ,, memory, efficient, ,, iii, )] 

>> PoS Tags are: 
[('(', 'PUNCT'), ('called', 'VERB'), ('support', 'NOUN'), ('vectors', 'NOUN'), (')', 'PUNCT'), (',', 'PUNCT'), ('memory', 'NOUN'), ('efficient', 'ADJ'), (',', 'PUNCT'), ('iii', 'X'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('(', 'punct'), ('called', 'ROOT'), ('support', 'compound'), ('vectors', 'oprd'), (')', 'punct'), (',', 'punct'), ('memory', 'npadvmod'), ('efficient', 'acomp'), (',', 'punct'), ('iii', 'oprd'), (')', 'punct')]

>> Bigrams: 
[[(, called], [called, support], [support, vectors], [vectors, )], [), ,], [,, memory], [memory, efficient], [efficient, ,], [,, iii], [iii, )]]

>> Trigrams: 
[[(, called, support], [called, support, vectors], [support, vectors, )], [vectors, ), ,], [), ,, memory], [,, memory, efficient], [memory, efficient, ,], [efficient, ,, iii], [,, iii, )]]

>> Noun Phrases are: 
[support vectors, it]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

It is   


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'attr')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[It]

>> Named Entities are: 
[] 


================================ Paragraph 457 =================================

versatile because holds different kernel functions can be  

------------------- Sentence 1 -------------------

versatile because holds different kernel functions can be   


>> Tokens are: 
[versatile, holds, different, kernel, functions,  ] 

>> PoS Tags are: 
[('versatile', 'ADV'), ('holds', 'VERB'), ('different', 'ADJ'), ('kernel', 'NOUN'), ('functions', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('versatile', 'acomp'), ('holds', 'advcl'), ('different', 'amod'), ('kernel', 'compound'), ('functions', 'dobj'), (' ', 'attr')]

>> Bigrams: 
[[versatile, holds], [holds, different], [different, kernel], [kernel, functions], [functions,  ]]

>> Trigrams: 
[[versatile, holds, different], [holds, different, kernel], [different, kernel, functions], [kernel, functions,  ]]

>> Noun Phrases are: 
[different kernel functions]

>> Named Entities are: 
[] 


================================ Paragraph 458 =================================

specified for the decision function. Common kernels are  

------------------- Sentence 1 -------------------

specified for the decision function. 


>> Tokens are: 
[specified, decision, function, .] 

>> PoS Tags are: 
[('specified', 'VERB'), ('decision', 'NOUN'), ('function', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('specified', 'ROOT'), ('decision', 'compound'), ('function', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[specified, decision], [decision, function], [function, .]]

>> Trigrams: 
[[specified, decision, function], [decision, function, .]]

>> Noun Phrases are: 
[the decision function]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Common kernels are   


>> Tokens are: 
[Common, kernels,  ] 

>> PoS Tags are: 
[('Common', 'ADJ'), ('kernels', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Common', 'amod'), ('kernels', 'nsubj'), (' ', 'attr')]

>> Bigrams: 
[[Common, kernels], [kernels,  ]]

>> Trigrams: 
[[Common, kernels,  ]]

>> Noun Phrases are: 
[Common kernels]

>> Named Entities are: 
[] 


================================ Paragraph 459 =================================

provided, but it is also possible to specify custom kernels.  

------------------- Sentence 1 -------------------

provided, but it is also possible to specify custom kernels. 


>> Tokens are: 
[provided, ,, possible, specify, custom, kernels, .] 

>> PoS Tags are: 
[('provided', 'VERB'), (',', 'PUNCT'), ('possible', 'ADJ'), ('specify', 'VERB'), ('custom', 'NOUN'), ('kernels', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('provided', 'ROOT'), (',', 'punct'), ('possible', 'acomp'), ('specify', 'xcomp'), ('custom', 'compound'), ('kernels', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[provided, ,], [,, possible], [possible, specify], [specify, custom], [custom, kernels], [kernels, .]]

>> Trigrams: 
[[provided, ,, possible], [,, possible, specify], [possible, specify, custom], [specify, custom, kernels], [custom, kernels, .]]

>> Noun Phrases are: 
[it, custom kernels]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 460 =================================

Most real-world problems involve non-separable data for  

------------------- Sentence 1 -------------------

Most real-world problems involve non-separable data for   


>> Tokens are: 
[real, -, world, problems, involve, non, -, separable, data,  ] 

>> PoS Tags are: 
[('real', 'ADJ'), ('-', 'PUNCT'), ('world', 'NOUN'), ('problems', 'NOUN'), ('involve', 'VERB'), ('non', 'ADJ'), ('-', 'ADJ'), ('separable', 'ADJ'), ('data', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('real', 'amod'), ('-', 'punct'), ('world', 'compound'), ('problems', 'nsubj'), ('involve', 'ROOT'), ('non', 'amod'), ('-', 'amod'), ('separable', 'amod'), ('data', 'dobj'), (' ', 'pobj')]

>> Bigrams: 
[[real, -], [-, world], [world, problems], [problems, involve], [involve, non], [non, -], [-, separable], [separable, data], [data,  ]]

>> Trigrams: 
[[real, -, world], [-, world, problems], [world, problems, involve], [problems, involve, non], [involve, non, -], [non, -, separable], [-, separable, data], [separable, data,  ]]

>> Noun Phrases are: 
[Most real-world problems, non-separable data]

>> Named Entities are: 
[] 


================================ Paragraph 461 =================================

which no hyperplane exists that successfully separates the  

------------------- Sentence 1 -------------------

which no hyperplane exists that successfully separates the   


>> Tokens are: 
[hyperplane, exists, successfully, separates,  ] 

>> PoS Tags are: 
[('hyperplane', 'NOUN'), ('exists', 'VERB'), ('successfully', 'ADV'), ('separates', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('hyperplane', 'nsubj'), ('exists', 'ROOT'), ('successfully', 'advmod'), ('separates', 'ccomp'), (' ', 'dobj')]

>> Bigrams: 
[[hyperplane, exists], [exists, successfully], [successfully, separates], [separates,  ]]

>> Trigrams: 
[[hyperplane, exists, successfully], [exists, successfully, separates], [successfully, separates,  ]]

>> Noun Phrases are: 
[no hyperplane]

>> Named Entities are: 
[] 


================================ Paragraph 462 =================================

positive from negative instances in the training set. One good  

------------------- Sentence 1 -------------------

positive from negative instances in the training set. 


>> Tokens are: 
[positive, negative, instances, training, set, .] 

>> PoS Tags are: 
[('positive', 'ADJ'), ('negative', 'ADJ'), ('instances', 'NOUN'), ('training', 'NOUN'), ('set', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('positive', 'ROOT'), ('negative', 'amod'), ('instances', 'pobj'), ('training', 'compound'), ('set', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[positive, negative], [negative, instances], [instances, training], [training, set], [set, .]]

>> Trigrams: 
[[positive, negative, instances], [negative, instances, training], [instances, training, set], [training, set, .]]

>> Noun Phrases are: 
[negative instances, the training set]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

One good   


>> Tokens are: 
[good,  ] 

>> PoS Tags are: 
[('good', 'ADJ'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('good', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[good,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('One', 'CARDINAL')] 


================================ Paragraph 463 =================================

solution to this inseparability problem is to map the data onto a  

------------------- Sentence 1 -------------------

solution to this inseparability problem is to map the data onto a   


>> Tokens are: 
[solution, inseparability, problem, map, data,  ] 

>> PoS Tags are: 
[('solution', 'NOUN'), ('inseparability', 'NOUN'), ('problem', 'NOUN'), ('map', 'VERB'), ('data', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('solution', 'nsubj'), ('inseparability', 'compound'), ('problem', 'pobj'), ('map', 'xcomp'), ('data', 'dobj'), (' ', 'pobj')]

>> Bigrams: 
[[solution, inseparability], [inseparability, problem], [problem, map], [map, data], [data,  ]]

>> Trigrams: 
[[solution, inseparability, problem], [inseparability, problem, map], [problem, map, data], [map, data,  ]]

>> Noun Phrases are: 
[solution, this inseparability problem, the data]

>> Named Entities are: 
[] 


================================ Paragraph 464 =================================

higher dimensional space and define a separating hyperplane  

------------------- Sentence 1 -------------------

higher dimensional space and define a separating hyperplane   


>> Tokens are: 
[higher, dimensional, space, define, separating, hyperplane,  ] 

>> PoS Tags are: 
[('higher', 'ADJ'), ('dimensional', 'ADJ'), ('space', 'NOUN'), ('define', 'VERB'), ('separating', 'VERB'), ('hyperplane', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('higher', 'amod'), ('dimensional', 'amod'), ('space', 'ROOT'), ('define', 'conj'), ('separating', 'amod'), ('hyperplane', 'dobj'), (' ', 'nummod')]

>> Bigrams: 
[[higher, dimensional], [dimensional, space], [space, define], [define, separating], [separating, hyperplane], [hyperplane,  ]]

>> Trigrams: 
[[higher, dimensional, space], [dimensional, space, define], [space, define, separating], [define, separating, hyperplane], [separating, hyperplane,  ]]

>> Noun Phrases are: 
[higher dimensional space, a separating hyperplane]

>> Named Entities are: 
[] 


================================ Paragraph 465 =================================

there. This higher-dimensional space is called the transformed  

------------------- Sentence 1 -------------------

there. 


>> Tokens are: 
[.] 

>> PoS Tags are: 
[('.', 'PUNCT')] 

>> Dependency Tags are: 
[('.', 'punct')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

This higher-dimensional space is called the transformed   


>> Tokens are: 
[higher, -, dimensional, space, called, transformed,  ] 

>> PoS Tags are: 
[('higher', 'ADV'), ('-', 'PUNCT'), ('dimensional', 'ADJ'), ('space', 'NOUN'), ('called', 'VERB'), ('transformed', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('higher', 'advmod'), ('-', 'punct'), ('dimensional', 'amod'), ('space', 'nsubjpass'), ('called', 'ROOT'), ('transformed', 'oprd'), (' ', 'punct')]

>> Bigrams: 
[[higher, -], [-, dimensional], [dimensional, space], [space, called], [called, transformed], [transformed,  ]]

>> Trigrams: 
[[higher, -, dimensional], [-, dimensional, space], [dimensional, space, called], [space, called, transformed], [called, transformed,  ]]

>> Noun Phrases are: 
[This higher-dimensional space]

>> Named Entities are: 
[] 


================================ Paragraph 466 =================================

feature space, as opposed to the input space occupied by the  

------------------- Sentence 1 -------------------

feature space, 


>> Tokens are: 
[feature, space, ,] 

>> PoS Tags are: 
[('feature', 'NOUN'), ('space', 'NOUN'), (',', 'PUNCT')] 

>> Dependency Tags are: 
[('feature', 'compound'), ('space', 'ROOT'), (',', 'punct')]

>> Bigrams: 
[[feature, space], [space, ,]]

>> Trigrams: 
[[feature, space, ,]]

>> Noun Phrases are: 
[feature space]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

as opposed to the input space occupied by the   


>> Tokens are: 
[opposed, input, space, occupied,  ] 

>> PoS Tags are: 
[('opposed', 'VERB'), ('input', 'NOUN'), ('space', 'NOUN'), ('occupied', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('opposed', 'ROOT'), ('input', 'compound'), ('space', 'pobj'), ('occupied', 'acl'), (' ', 'pobj')]

>> Bigrams: 
[[opposed, input], [input, space], [space, occupied], [occupied,  ]]

>> Trigrams: 
[[opposed, input, space], [input, space, occupied], [space, occupied,  ]]

>> Noun Phrases are: 
[the input space]

>> Named Entities are: 
[] 


================================ Paragraph 467 =================================

training instances [1].  

------------------- Sentence 1 -------------------

training instances [1]. 


>> Tokens are: 
[training, instances, [, 1, ], .] 

>> PoS Tags are: 
[('training', 'NOUN'), ('instances', 'NOUN'), ('[', 'PUNCT'), ('1', 'NUM'), (']', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('training', 'compound'), ('instances', 'ROOT'), ('[', 'punct'), ('1', 'appos'), (']', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[training, instances], [instances, [], [[, 1], [1, ]], [], .]]

>> Trigrams: 
[[training, instances, [], [instances, [, 1], [[, 1, ]], [1, ], .]]

>> Noun Phrases are: 
[training instances]

>> Named Entities are: 
[('1', 'CARDINAL')] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 468 =================================

  

------------------- Sentence 1 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 469 =================================

Fig.10. Maximum margin through SVM  

------------------- Sentence 1 -------------------

Fig.10. 


>> Tokens are: 
[Fig.10, .] 

>> PoS Tags are: 
[('Fig.10', 'ADV'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Fig.10', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Fig.10, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Maximum margin through SVM   


>> Tokens are: 
[Maximum, margin, SVM,  ] 

>> PoS Tags are: 
[('Maximum', 'ADJ'), ('margin', 'NOUN'), ('SVM', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Maximum', 'amod'), ('margin', 'ROOT'), ('SVM', 'pobj'), (' ', 'nummod')]

>> Bigrams: 
[[Maximum, margin], [margin, SVM], [SVM,  ]]

>> Trigrams: 
[[Maximum, margin, SVM], [margin, SVM,  ]]

>> Noun Phrases are: 
[Maximum margin, SVM]

>> Named Entities are: 
[('SVM', 'ORG')] 


================================ Paragraph 470 =================================

In order to get better results the selection of an appropriate  

------------------- Sentence 1 -------------------

In order to get better results the selection of an appropriate   


>> Tokens are: 
[order, better, results, selection, appropriate,  ] 

>> PoS Tags are: 
[('order', 'NOUN'), ('better', 'ADJ'), ('results', 'NOUN'), ('selection', 'NOUN'), ('appropriate', 'ADJ'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('order', 'pobj'), ('better', 'amod'), ('results', 'dobj'), ('selection', 'dobj'), ('appropriate', 'amod'), (' ', 'pobj')]

>> Bigrams: 
[[order, better], [better, results], [results, selection], [selection, appropriate], [appropriate,  ]]

>> Trigrams: 
[[order, better, results], [better, results, selection], [results, selection, appropriate], [selection, appropriate,  ]]

>> Noun Phrases are: 
[order, better results, the selection]

>> Named Entities are: 
[] 


================================ Paragraph 471 =================================

kernel function is important, since the kernel function defines  

------------------- Sentence 1 -------------------

kernel function is important, since the kernel function defines   


>> Tokens are: 
[kernel, function, important, ,, kernel, function, defines,  ] 

>> PoS Tags are: 
[('kernel', 'NOUN'), ('function', 'NOUN'), ('important', 'ADJ'), (',', 'PUNCT'), ('kernel', 'NOUN'), ('function', 'NOUN'), ('defines', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('kernel', 'compound'), ('function', 'nsubj'), ('important', 'acomp'), (',', 'punct'), ('kernel', 'compound'), ('function', 'nsubj'), ('defines', 'advcl'), (' ', 'dobj')]

>> Bigrams: 
[[kernel, function], [function, important], [important, ,], [,, kernel], [kernel, function], [function, defines], [defines,  ]]

>> Trigrams: 
[[kernel, function, important], [function, important, ,], [important, ,, kernel], [,, kernel, function], [kernel, function, defines], [function, defines,  ]]

>> Noun Phrases are: 
[kernel function, the kernel function]

>> Named Entities are: 
[] 


================================ Paragraph 472 =================================

the transformed feature space in which the training set instances  

------------------- Sentence 1 -------------------

the transformed feature space in which the training set instances 


>> Tokens are: 
[transformed, feature, space, training, set, instances] 

>> PoS Tags are: 
[('transformed', 'VERB'), ('feature', 'NOUN'), ('space', 'NOUN'), ('training', 'NOUN'), ('set', 'VERB'), ('instances', 'NOUN')] 

>> Dependency Tags are: 
[('transformed', 'amod'), ('feature', 'compound'), ('space', 'ROOT'), ('training', 'nsubj'), ('set', 'relcl'), ('instances', 'dobj')]

>> Bigrams: 
[[transformed, feature], [feature, space], [space, training], [training, set], [set, instances]]

>> Trigrams: 
[[transformed, feature, space], [feature, space, training], [space, training, set], [training, set, instances]]

>> Noun Phrases are: 
[the transformed feature space, the training, instances]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 473 =================================

Procedure InstanceBaseLearner (Testing Instances)  

------------------- Sentence 1 -------------------

Procedure InstanceBaseLearner (Testing Instances)   


>> Tokens are: 
[Procedure, InstanceBaseLearner, (, Testing, Instances, ),  ] 

>> PoS Tags are: 
[('Procedure', 'NOUN'), ('InstanceBaseLearner', 'PROPN'), ('(', 'PUNCT'), ('Testing', 'PROPN'), ('Instances', 'PROPN'), (')', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Procedure', 'compound'), ('InstanceBaseLearner', 'ROOT'), ('(', 'punct'), ('Testing', 'compound'), ('Instances', 'appos'), (')', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[Procedure, InstanceBaseLearner], [InstanceBaseLearner, (], [(, Testing], [Testing, Instances], [Instances, )], [),  ]]

>> Trigrams: 
[[Procedure, InstanceBaseLearner, (], [InstanceBaseLearner, (, Testing], [(, Testing, Instances], [Testing, Instances, )], [Instances, ),  ]]

>> Noun Phrases are: 
[Procedure InstanceBaseLearner, (Testing Instances]

>> Named Entities are: 
[('Testing Instances', 'WORK_OF_ART')] 


================================ Paragraph 474 =================================

   for each testing instance  

------------------- Sentence 1 -------------------

   for each testing instance   


>> Tokens are: 
[   , testing, instance,  ] 

>> PoS Tags are: 
[('   ', 'SPACE'), ('testing', 'NOUN'), ('instance', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('   ', 'ROOT'), ('testing', 'compound'), ('instance', 'pobj'), (' ', 'punct')]

>> Bigrams: 
[[   , testing], [testing, instance], [instance,  ]]

>> Trigrams: 
[[   , testing, instance], [testing, instance,  ]]

>> Noun Phrases are: 
[each testing instance]

>> Named Entities are: 
[] 


================================ Paragraph 475 =================================

   {  

------------------- Sentence 1 -------------------

   {   


>> Tokens are: 
[   , {,  ] 

>> PoS Tags are: 
[('   ', 'SPACE'), ('{', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('   ', 'ROOT'), ('{', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[   , {], [{,  ]]

>> Trigrams: 
[[   , {,  ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 476 =================================

find the k most nearest instances of the  

------------------- Sentence 1 -------------------

find the k most nearest instances of the   


>> Tokens are: 
[find, k, nearest, instances,  ] 

>> PoS Tags are: 
[('find', 'VERB'), ('k', 'X'), ('nearest', 'ADJ'), ('instances', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('find', 'ROOT'), ('k', 'meta'), ('nearest', 'amod'), ('instances', 'dobj'), (' ', 'pobj')]

>> Bigrams: 
[[find, k], [k, nearest], [nearest, instances], [instances,  ]]

>> Trigrams: 
[[find, k, nearest], [k, nearest, instances], [nearest, instances,  ]]

>> Noun Phrases are: 
[the k most nearest instances]

>> Named Entities are: 
[] 


================================ Paragraph 477 =================================

training set according to a distance metric  

------------------- Sentence 1 -------------------

training set according to a distance metric   


>> Tokens are: 
[training, set, according, distance, metric,  ] 

>> PoS Tags are: 
[('training', 'NOUN'), ('set', 'NOUN'), ('according', 'VERB'), ('distance', 'NOUN'), ('metric', 'ADJ'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('training', 'ROOT'), ('set', 'acl'), ('according', 'prep'), ('distance', 'pobj'), ('metric', 'amod'), (' ', 'nummod')]

>> Bigrams: 
[[training, set], [set, according], [according, distance], [distance, metric], [metric,  ]]

>> Trigrams: 
[[training, set, according], [set, according, distance], [according, distance, metric], [distance, metric,  ]]

>> Noun Phrases are: 
[training, a distance]

>> Named Entities are: 
[] 


================================ Paragraph 478 =================================

     Resulting Class: most frequent class  

------------------- Sentence 1 -------------------

     Resulting Class: most frequent class   


>> Tokens are: 
[     , Resulting, Class, :, frequent, class,  ] 

>> PoS Tags are: 
[('     ', 'SPACE'), ('Resulting', 'VERB'), ('Class', 'NOUN'), (':', 'PUNCT'), ('frequent', 'ADJ'), ('class', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('     ', 'compound'), ('Resulting', 'compound'), ('Class', 'ROOT'), (':', 'punct'), ('frequent', 'amod'), ('class', 'appos'), (' ', 'punct')]

>> Bigrams: 
[[     , Resulting], [Resulting, Class], [Class, :], [:, frequent], [frequent, class], [class,  ]]

>> Trigrams: 
[[     , Resulting, Class], [Resulting, Class, :], [Class, :, frequent], [:, frequent, class], [frequent, class,  ]]

>> Noun Phrases are: 
[     Resulting Class, most frequent class]

>> Named Entities are: 
[] 


================================ Paragraph 479 =================================

     label of the k nearest instances  

------------------- Sentence 1 -------------------

     label of the k nearest instances   


>> Tokens are: 
[     , label, k, nearest, instances,  ] 

>> PoS Tags are: 
[('     ', 'SPACE'), ('label', 'NOUN'), ('k', 'X'), ('nearest', 'ADJ'), ('instances', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('     ', 'amod'), ('label', 'ROOT'), ('k', 'nmod'), ('nearest', 'amod'), ('instances', 'pobj'), (' ', 'punct')]

>> Bigrams: 
[[     , label], [label, k], [k, nearest], [nearest, instances], [instances,  ]]

>> Trigrams: 
[[     , label, k], [label, k, nearest], [k, nearest, instances], [nearest, instances,  ]]

>> Noun Phrases are: 
[     label, the k nearest instances]

>> Named Entities are: 
[] 


================================ Paragraph 480 =================================

   }  

------------------- Sentence 1 -------------------

   }   


>> Tokens are: 
[   , },  ] 

>> PoS Tags are: 
[('   ', 'SPACE'), ('}', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('   ', 'ROOT'), ('}', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[   , }], [},  ]]

>> Trigrams: 
[[   , },  ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 481 =================================

  

------------------- Sentence 1 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 482 =================================

Initialize an Empty Bayesian Network G containing n  

------------------- Sentence 1 -------------------

Initialize an Empty Bayesian Network G containing n   


>> Tokens are: 
[Initialize, Bayesian, Network, G, containing, n,  ] 

>> PoS Tags are: 
[('Initialize', 'VERB'), ('Bayesian', 'PROPN'), ('Network', 'PROPN'), ('G', 'PROPN'), ('containing', 'VERB'), ('n', 'CCONJ'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Initialize', 'ROOT'), ('Bayesian', 'compound'), ('Network', 'compound'), ('G', 'dobj'), ('containing', 'acl'), ('n', 'cc'), (' ', 'dobj')]

>> Bigrams: 
[[Initialize, Bayesian], [Bayesian, Network], [Network, G], [G, containing], [containing, n], [n,  ]]

>> Trigrams: 
[[Initialize, Bayesian, Network], [Bayesian, Network, G], [Network, G, containing], [G, containing, n], [containing, n,  ]]

>> Noun Phrases are: 
[an Empty Bayesian Network G]

>> Named Entities are: 
[('Initialize an Empty Bayesian Network G', 'ORG')] 


================================ Paragraph 483 =================================

nodes (i.e.-, a BN with n nodes but no edges)     

------------------- Sentence 1 -------------------

nodes (i.e.-, a BN with n nodes but no edges)      


>> Tokens are: 
[nodes, (, i.e.-, ,, BN, n, nodes, edges, ),     ] 

>> PoS Tags are: 
[('nodes', 'NOUN'), ('(', 'PUNCT'), ('i.e.-', 'NOUN'), (',', 'PUNCT'), ('BN', 'NOUN'), ('n', 'NUM'), ('nodes', 'NOUN'), ('edges', 'NOUN'), (')', 'PUNCT'), ('    ', 'SPACE')] 

>> Dependency Tags are: 
[('nodes', 'ROOT'), ('(', 'punct'), ('i.e.-', 'appos'), (',', 'punct'), ('BN', 'appos'), ('n', 'cc'), ('nodes', 'conj'), ('edges', 'conj'), (')', 'punct'), ('    ', 'appos')]

>> Bigrams: 
[[nodes, (], [(, i.e.-], [i.e.-, ,], [,, BN], [BN, n], [n, nodes], [nodes, edges], [edges, )], [),     ]]

>> Trigrams: 
[[nodes, (, i.e.-], [(, i.e.-, ,], [i.e.-, ,, BN], [,, BN, n], [BN, n, nodes], [n, nodes, edges], [nodes, edges, )], [edges, ),     ]]

>> Noun Phrases are: 
[nodes, (i.e.-, a BN, nodes, no edges]

>> Named Entities are: 
[('i.e.-', 'ORG')] 


================================ Paragraph 484 =================================

1) Evaluate the score of G: Score (G)   2) G’ = G   3) for i = 1 to n do   4) for j = 1 to n do   5) if i • j then   6) if there is no edge between the nodes i and  

------------------- Sentence 1 -------------------

1) Evaluate the score of G: Score (G)   2) G’ = 


>> Tokens are: 
[1, ), Evaluate, score, G, :, Score, (, G, ),   , 2, ), G, ’, =] 

>> PoS Tags are: 
[('1', 'X'), (')', 'PUNCT'), ('Evaluate', 'VERB'), ('score', 'NOUN'), ('G', 'NOUN'), (':', 'PUNCT'), ('Score', 'NOUN'), ('(', 'PUNCT'), ('G', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE'), ('2', 'NUM'), (')', 'PUNCT'), ('G', 'NOUN'), ('’', 'PUNCT'), ('=', 'NOUN')] 

>> Dependency Tags are: 
[('1', 'meta'), (')', 'punct'), ('Evaluate', 'ROOT'), ('score', 'dobj'), ('G', 'pobj'), (':', 'punct'), ('Score', 'nmod'), ('(', 'punct'), ('G', 'appos'), (')', 'punct'), ('  ', 'dep'), ('2', 'nummod'), (')', 'punct'), ('G', 'dobj'), ('’', 'punct'), ('=', 'punct')]

>> Bigrams: 
[[1, )], [), Evaluate], [Evaluate, score], [score, G], [G, :], [:, Score], [Score, (], [(, G], [G, )], [),   ], [  , 2], [2, )], [), G], [G, ’], [’, =]]

>> Trigrams: 
[[1, ), Evaluate], [), Evaluate, score], [Evaluate, score, G], [score, G, :], [G, :, Score], [:, Score, (], [Score, (, G], [(, G, )], [G, ),   ], [),   , 2], [  , 2, )], [2, ), G], [), G, ’], [G, ’, =]]

>> Noun Phrases are: 
[the score, G, Score (G, G]

>> Named Entities are: 
[('1', 'CARDINAL'), ('2', 'CARDINAL')] 

------------------- Sentence 2 -------------------

G   3) for i = 1 to n do   4) for j = 1 to n do   5) if i • j then   6) if there is no edge between the nodes i and   


>> Tokens are: 
[G,   , 3, ), =, 1, n,   , 4, ), j, =, 1, n,   , 5, ), •, j,   , 6, ), edge, nodes,  ] 

>> PoS Tags are: 
[('G', 'NOUN'), ('  ', 'SPACE'), ('3', 'NUM'), (')', 'PUNCT'), ('=', 'SYM'), ('1', 'NUM'), ('n', 'CCONJ'), ('  ', 'SPACE'), ('4', 'NUM'), (')', 'PUNCT'), ('j', 'DET'), ('=', 'SYM'), ('1', 'NUM'), ('n', 'CCONJ'), ('  ', 'SPACE'), ('5', 'NUM'), (')', 'PUNCT'), ('•', 'VERB'), ('j', 'ADV'), ('  ', 'SPACE'), ('6', 'NUM'), (')', 'PUNCT'), ('edge', 'NOUN'), ('nodes', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('G', 'nsubj'), ('  ', 'appos'), ('3', 'nummod'), (')', 'punct'), ('=', 'punct'), ('1', 'prep'), ('n', 'appos'), ('  ', 'dobj'), ('4', 'nummod'), (')', 'punct'), ('j', 'pobj'), ('=', 'quantmod'), ('1', 'prep'), ('n', 'cc'), ('  ', 'dobj'), ('5', 'nummod'), (')', 'punct'), ('•', 'advcl'), ('j', 'npadvmod'), ('  ', 'npadvmod'), ('6', 'nummod'), (')', 'punct'), ('edge', 'attr'), ('nodes', 'pobj'), (' ', 'conj')]

>> Bigrams: 
[[G,   ], [  , 3], [3, )], [), =], [=, 1], [1, n], [n,   ], [  , 4], [4, )], [), j], [j, =], [=, 1], [1, n], [n,   ], [  , 5], [5, )], [), •], [•, j], [j,   ], [  , 6], [6, )], [), edge], [edge, nodes], [nodes,  ]]

>> Trigrams: 
[[G,   , 3], [  , 3, )], [3, ), =], [), =, 1], [=, 1, n], [1, n,   ], [n,   , 4], [  , 4, )], [4, ), j], [), j, =], [j, =, 1], [=, 1, n], [1, n,   ], [n,   , 5], [  , 5, )], [5, ), •], [), •, j], [•, j,   ], [j,   , 6], [  , 6, )], [6, ), edge], [), edge, nodes], [edge, nodes,  ]]

>> Noun Phrases are: 
[G, i, i, no edge, the nodes, i]

>> Named Entities are: 
[('3', 'CARDINAL'), ('1', 'CARDINAL'), ('4', 'CARDINAL'), ('1', 'CARDINAL'), ('5', 'CARDINAL'), ('6', 'CARDINAL')] 


================================ Paragraph 485 =================================

j in G• then   

------------------- Sentence 1 -------------------

j in G• then    


>> Tokens are: 
[j, G•,   ] 

>> PoS Tags are: 
[('j', 'NOUN'), ('G•', 'PROPN'), ('  ', 'SPACE')] 

>> Dependency Tags are: 
[('j', 'ROOT'), ('G•', 'pobj'), ('  ', 'pobj')]

>> Bigrams: 
[[j, G•], [G•,   ]]

>> Trigrams: 
[[j, G•,   ]]

>> Noun Phrases are: 
[j, G•]

>> Named Entities are: 
[('G•', 'ORG')] 


================================ Paragraph 486 =================================

7) Modify G’ by adding an edge between  the nodes i and j in G• such that i is a  

------------------- Sentence 1 -------------------

7) Modify G’ by adding an edge between  the nodes i and j in G• such that i is a   


>> Tokens are: 
[7, ), Modify, G, ’, adding, edge,  , nodes, j, G•,  ] 

>> PoS Tags are: 
[('7', 'X'), (')', 'PUNCT'), ('Modify', 'VERB'), ('G', 'NOUN'), ('’', 'PUNCT'), ('adding', 'VERB'), ('edge', 'NOUN'), (' ', 'SPACE'), ('nodes', 'NOUN'), ('j', 'NOUN'), ('G•', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('7', 'meta'), (')', 'punct'), ('Modify', 'ROOT'), ('G', 'dobj'), ('’', 'punct'), ('adding', 'pcomp'), ('edge', 'dobj'), (' ', 'pobj'), ('nodes', 'dobj'), ('j', 'conj'), ('G•', 'pobj'), (' ', 'attr')]

>> Bigrams: 
[[7, )], [), Modify], [Modify, G], [G, ’], [’, adding], [adding, edge], [edge,  ], [ , nodes], [nodes, j], [j, G•], [G•,  ]]

>> Trigrams: 
[[7, ), Modify], [), Modify, G], [Modify, G, ’], [G, ’, adding], [’, adding, edge], [adding, edge,  ], [edge,  , nodes], [ , nodes, j], [nodes, j, G•], [j, G•,  ]]

>> Noun Phrases are: 
[G, an edge, the nodes, i, j, i]

>> Named Entities are: 
[('7', 'CARDINAL'), ('G•', 'NORP')] 


================================ Paragraph 487 =================================

parent of j: (i • j)   

------------------- Sentence 1 -------------------

parent of j: (i • j)    


>> Tokens are: 
[parent, j, :, (, •, j, ),   ] 

>> PoS Tags are: 
[('parent', 'NOUN'), ('j', 'NOUN'), (':', 'PUNCT'), ('(', 'PUNCT'), ('•', 'VERB'), ('j', 'NOUN'), (')', 'PUNCT'), ('  ', 'SPACE')] 

>> Dependency Tags are: 
[('parent', 'ROOT'), ('j', 'pobj'), (':', 'punct'), ('(', 'punct'), ('•', 'appos'), ('j', 'prep'), (')', 'punct'), ('  ', 'appos')]

>> Bigrams: 
[[parent, j], [j, :], [:, (], [(, •], [•, j], [j, )], [),   ]]

>> Trigrams: 
[[parent, j, :], [j, :, (], [:, (, •], [(, •, j], [•, j, )], [j, ),   ]]

>> Noun Phrases are: 
[parent, j, (i]

>> Named Entities are: 
[] 


================================ Paragraph 488 =================================

8) if the resulting G’ is a DAG then   9) if (Score(G’) > Score (G)) then   10) G = G’   11) end if   12) end if   13) end if   14) end if   15) G’ = G   16) end for   

------------------- Sentence 1 -------------------

8) if the resulting G’ is a DAG then   9) if (Score(G’) 


>> Tokens are: 
[8), resulting, G, ’, DAG,   , 9, ), (, Score(G, ’, )] 

>> PoS Tags are: 
[('8)', 'NUM'), ('resulting', 'VERB'), ('G', 'NOUN'), ('’', 'PUNCT'), ('DAG', 'PROPN'), ('  ', 'SPACE'), ('9', 'NUM'), (')', 'PUNCT'), ('(', 'PUNCT'), ('Score(G', 'NOUN'), ('’', 'PUNCT'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('8)', 'ROOT'), ('resulting', 'amod'), ('G', 'nsubj'), ('’', 'punct'), ('DAG', 'attr'), ('  ', 'npadvmod'), ('9', 'nummod'), (')', 'punct'), ('(', 'punct'), ('Score(G', 'advcl'), ('’', 'punct'), (')', 'punct')]

>> Bigrams: 
[[8), resulting], [resulting, G], [G, ’], [’, DAG], [DAG,   ], [  , 9], [9, )], [), (], [(, Score(G], [Score(G, ’], [’, )]]

>> Trigrams: 
[[8), resulting, G], [resulting, G, ’], [G, ’, DAG], [’, DAG,   ], [DAG,   , 9], [  , 9, )], [9, ), (], [), (, Score(G], [(, Score(G, ’], [Score(G, ’, )]]

>> Noun Phrases are: 
[the resulting G, a DAG]

>> Named Entities are: 
[('8)', 'CARDINAL'), ('DAG', 'ORG'), ('9', 'CARDINAL')] 

------------------- Sentence 2 -------------------

> Score (G)) then   10) G = G’   11) end if   12) end if   13) end if   14) end if   15) G’ = 


>> Tokens are: 
[>, Score, (, G, ), ),   , 10, ), G, =, G, ’,   , 11, ), end,   , 12, ), end,   , 13, ), end,   , 14, ), end,   , 15, ), G, ’, =] 

>> PoS Tags are: 
[('>', 'PUNCT'), ('Score', 'NOUN'), ('(', 'PUNCT'), ('G', 'NOUN'), (')', 'PUNCT'), (')', 'PUNCT'), ('  ', 'SPACE'), ('10', 'NUM'), (')', 'PUNCT'), ('G', 'NOUN'), ('=', 'SYM'), ('G', 'NOUN'), ('’', 'PUNCT'), ('  ', 'SPACE'), ('11', 'NUM'), (')', 'PUNCT'), ('end', 'NOUN'), ('  ', 'SPACE'), ('12', 'NUM'), (')', 'PUNCT'), ('end', 'NOUN'), ('  ', 'SPACE'), ('13', 'NUM'), (')', 'PUNCT'), ('end', 'NOUN'), ('  ', 'SPACE'), ('14', 'NUM'), (')', 'PUNCT'), ('end', 'NOUN'), ('  ', 'SPACE'), ('15', 'NUM'), (')', 'PUNCT'), ('G', 'NOUN'), ('’', 'PUNCT'), ('=', 'NOUN')] 

>> Dependency Tags are: 
[('>', 'dep'), ('Score', 'nsubj'), ('(', 'punct'), ('G', 'appos'), (')', 'punct'), (')', 'punct'), ('  ', 'appos'), ('10', 'nummod'), (')', 'punct'), ('G', 'nmod'), ('=', 'punct'), ('G', 'conj'), ('’', 'punct'), ('  ', 'appos'), ('11', 'nummod'), (')', 'punct'), ('end', 'ROOT'), ('  ', 'nsubj'), ('12', 'nummod'), (')', 'punct'), ('end', 'advcl'), ('  ', 'nsubj'), ('13', 'nummod'), (')', 'punct'), ('end', 'advcl'), ('  ', 'nsubj'), ('14', 'nummod'), (')', 'punct'), ('end', 'advcl'), ('  ', 'nsubj'), ('15', 'npadvmod'), (')', 'punct'), ('G', 'appos'), ('’', 'punct'), ('=', 'advcl')]

>> Bigrams: 
[[>, Score], [Score, (], [(, G], [G, )], [), )], [),   ], [  , 10], [10, )], [), G], [G, =], [=, G], [G, ’], [’,   ], [  , 11], [11, )], [), end], [end,   ], [  , 12], [12, )], [), end], [end,   ], [  , 13], [13, )], [), end], [end,   ], [  , 14], [14, )], [), end], [end,   ], [  , 15], [15, )], [), G], [G, ’], [’, =]]

>> Trigrams: 
[[>, Score, (], [Score, (, G], [(, G, )], [G, ), )], [), ),   ], [),   , 10], [  , 10, )], [10, ), G], [), G, =], [G, =, G], [=, G, ’], [G, ’,   ], [’,   , 11], [  , 11, )], [11, ), end], [), end,   ], [end,   , 12], [  , 12, )], [12, ), end], [), end,   ], [end,   , 13], [  , 13, )], [13, ), end], [), end,   ], [end,   , 14], [  , 14, )], [14, ), end], [), end,   ], [end,   , 15], [  , 15, )], [15, ), G], [), G, ’], [G, ’, =]]

>> Noun Phrases are: 
[> Score, (G, G = G, ) G]

>> Named Entities are: 
[('10', 'CARDINAL'), ('11', 'CARDINAL'), ('12', 'CARDINAL'), ('13', 'CARDINAL'), ('14', 'CARDINAL'), ('15', 'CARDINAL')] 

------------------- Sentence 3 -------------------

G   16) end for    


>> Tokens are: 
[G,   , 16, ), end,   ] 

>> PoS Tags are: 
[('G', 'NOUN'), ('  ', 'SPACE'), ('16', 'NUM'), (')', 'PUNCT'), ('end', 'NOUN'), ('  ', 'SPACE')] 

>> Dependency Tags are: 
[('G', 'nsubj'), ('  ', 'appos'), ('16', 'nummod'), (')', 'punct'), ('end', 'ROOT'), ('  ', 'pobj')]

>> Bigrams: 
[[G,   ], [  , 16], [16, )], [), end], [end,   ]]

>> Trigrams: 
[[G,   , 16], [  , 16, )], [16, ), end], [), end,   ]]

>> Noun Phrases are: 
[G]

>> Named Entities are: 
[('16', 'CARDINAL')] 


================================ Paragraph 489 =================================

17) end for  

------------------- Sentence 1 -------------------

17) end for   


>> Tokens are: 
[17, ), end,  ] 

>> PoS Tags are: 
[('17', 'X'), (')', 'PUNCT'), ('end', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('17', 'meta'), (')', 'punct'), ('end', 'ROOT'), (' ', 'pobj')]

>> Bigrams: 
[[17, )], [), end], [end,  ]]

>> Trigrams: 
[[17, ), end], [), end,  ]]

>> Noun Phrases are: 
[17) end]

>> Named Entities are: 
[('17', 'CARDINAL')] 


================================ Paragraph 490 =================================

f(x) 

------------------- Sentence 1 -------------------

f(x) 


>> Tokens are: 
[f(x, )] 

>> PoS Tags are: 
[('f(x', 'NOUN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('f(x', 'ROOT'), (')', 'punct')]

>> Bigrams: 
[[f(x, )]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[f(x]

>> Named Entities are: 
[] 


================================ Paragraph 491 =================================

ISSN: 2229-6956(ONLINE)                                                                                                                             ICTACT JOURNAL ON SOFT COMPUTING, APRIL 2015, VOLUME: 05, ISSUE: 03  

------------------- Sentence 1 -------------------

ISSN: 2229-6956(ONLINE) 


>> Tokens are: 
[ISSN, :, 2229, -, 6956(ONLINE, )] 

>> PoS Tags are: 
[('ISSN', 'PROPN'), (':', 'PUNCT'), ('2229', 'NUM'), ('-', 'SYM'), ('6956(ONLINE', 'NUM'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('ISSN', 'ROOT'), (':', 'punct'), ('2229', 'appos'), ('-', 'punct'), ('6956(ONLINE', 'prep'), (')', 'punct')]

>> Bigrams: 
[[ISSN, :], [:, 2229], [2229, -], [-, 6956(ONLINE], [6956(ONLINE, )]]

>> Trigrams: 
[[ISSN, :, 2229], [:, 2229, -], [2229, -, 6956(ONLINE], [-, 6956(ONLINE, )]]

>> Noun Phrases are: 
[ISSN]

>> Named Entities are: 
[('ISSN', 'ORG'), ('2229-6956(ONLINE', 'CARDINAL')] 

------------------- Sentence 2 -------------------

                                                                                                                            ICTACT JOURNAL ON SOFT COMPUTING, APRIL 2015, VOLUME: 05, ISSUE: 


>> Tokens are: 
[                                                                                                                            , ICTACT, JOURNAL, SOFT, COMPUTING, ,, APRIL, 2015, ,, VOLUME, :, 05, ,, ISSUE, :] 

>> PoS Tags are: 
[('                                                                                                                            ', 'SPACE'), ('ICTACT', 'PROPN'), ('JOURNAL', 'PROPN'), ('SOFT', 'ADJ'), ('COMPUTING', 'NOUN'), (',', 'PUNCT'), ('APRIL', 'PROPN'), ('2015', 'NUM'), (',', 'PUNCT'), ('VOLUME', 'NOUN'), (':', 'PUNCT'), ('05', 'NUM'), (',', 'PUNCT'), ('ISSUE', 'NOUN'), (':', 'PUNCT')] 

>> Dependency Tags are: 
[('                                                                                                                            ', 'compound'), ('ICTACT', 'compound'), ('JOURNAL', 'ROOT'), ('SOFT', 'amod'), ('COMPUTING', 'pobj'), (',', 'punct'), ('APRIL', 'appos'), ('2015', 'nummod'), (',', 'punct'), ('VOLUME', 'appos'), (':', 'punct'), ('05', 'appos'), (',', 'punct'), ('ISSUE', 'appos'), (':', 'punct')]

>> Bigrams: 
[[                                                                                                                            , ICTACT], [ICTACT, JOURNAL], [JOURNAL, SOFT], [SOFT, COMPUTING], [COMPUTING, ,], [,, APRIL], [APRIL, 2015], [2015, ,], [,, VOLUME], [VOLUME, :], [:, 05], [05, ,], [,, ISSUE], [ISSUE, :]]

>> Trigrams: 
[[                                                                                                                            , ICTACT, JOURNAL], [ICTACT, JOURNAL, SOFT], [JOURNAL, SOFT, COMPUTING], [SOFT, COMPUTING, ,], [COMPUTING, ,, APRIL], [,, APRIL, 2015], [APRIL, 2015, ,], [2015, ,, VOLUME], [,, VOLUME, :], [VOLUME, :, 05], [:, 05, ,], [05, ,, ISSUE], [,, ISSUE, :]]

>> Noun Phrases are: 
[                                                                                                                            ICTACT JOURNAL, SOFT COMPUTING, APRIL, VOLUME, ISSUE]

>> Named Entities are: 
[('APRIL 2015', 'DATE'), ('05', 'CARDINAL')] 

------------------- Sentence 3 -------------------

03   


>> Tokens are: 
[03,  ] 

>> PoS Tags are: 
[('03', 'NUM'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('03', 'nummod'), (' ', 'ROOT')]

>> Bigrams: 
[[03,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('03', 'CARDINAL')] 


================================ Paragraph 492 =================================

951  

------------------- Sentence 1 -------------------

951   


>> Tokens are: 
[951,  ] 

>> PoS Tags are: 
[('951', 'NUM'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('951', 'nummod'), (' ', 'ROOT')]

>> Bigrams: 
[[951,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('951', 'CARDINAL')] 


================================ Paragraph 493 =================================

will be classified. Some new kernels are being proposed by  

------------------- Sentence 1 -------------------

will be classified. 


>> Tokens are: 
[classified, .] 

>> PoS Tags are: 
[('classified', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('classified', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[classified, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Some new kernels are being proposed by   


>> Tokens are: 
[new, kernels, proposed,  ] 

>> PoS Tags are: 
[('new', 'ADJ'), ('kernels', 'NOUN'), ('proposed', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('new', 'amod'), ('kernels', 'nsubjpass'), ('proposed', 'ROOT'), (' ', 'pobj')]

>> Bigrams: 
[[new, kernels], [kernels, proposed], [proposed,  ]]

>> Trigrams: 
[[new, kernels, proposed], [kernels, proposed,  ]]

>> Noun Phrases are: 
[Some new kernels]

>> Named Entities are: 
[] 


================================ Paragraph 494 =================================

researchers but given bellow is list of some popular kernels:  

------------------- Sentence 1 -------------------

researchers but given bellow is list of some popular kernels: 


>> Tokens are: 
[researchers, given, bellow, list, popular, kernels, :] 

>> PoS Tags are: 
[('researchers', 'NOUN'), ('given', 'VERB'), ('bellow', 'NOUN'), ('list', 'NOUN'), ('popular', 'ADJ'), ('kernels', 'NOUN'), (':', 'PUNCT')] 

>> Dependency Tags are: 
[('researchers', 'nsubj'), ('given', 'prep'), ('bellow', 'dobj'), ('list', 'attr'), ('popular', 'amod'), ('kernels', 'pobj'), (':', 'punct')]

>> Bigrams: 
[[researchers, given], [given, bellow], [bellow, list], [list, popular], [popular, kernels], [kernels, :]]

>> Trigrams: 
[[researchers, given, bellow], [given, bellow, list], [bellow, list, popular], [list, popular, kernels], [popular, kernels, :]]

>> Noun Phrases are: 
[researchers, bellow, list, some popular kernels]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 495 =================================

 Linear:   j T iji XXXXK ,   

------------------- Sentence 1 -------------------

 Linear:   j T iji XXXXK ,    


>> Tokens are: 
[, Linear, :, , , j, T, iji, XXXXK, , ,,   ] 

>> PoS Tags are: 
[('\uf0b7', 'X'), ('Linear', 'NOUN'), (':', 'PUNCT'), ('\uf028', 'NOUN'), ('\uf029', 'PROPN'), ('j', 'DET'), ('T', 'PROPN'), ('iji', 'VERB'), ('XXXXK', 'NOUN'), ('\uf03d', 'ADV'), (',', 'PUNCT'), ('  ', 'SPACE')] 

>> Dependency Tags are: 
[('\uf0b7', 'punct'), ('Linear', 'ROOT'), (':', 'punct'), ('\uf028', 'det'), ('\uf029', 'compound'), ('j', 'det'), ('T', 'nsubj'), ('iji', 'acl'), ('XXXXK', 'dobj'), ('\uf03d', 'appos'), (',', 'punct'), ('  ', 'npadvmod')]

>> Bigrams: 
[[, Linear], [Linear, :], [:, ], [, ], [, j], [j, T], [T, iji], [iji, XXXXK], [XXXXK, ], [, ,], [,,   ]]

>> Trigrams: 
[[, Linear, :], [Linear, :, ], [:, , ], [, , j], [, j, T], [j, T, iji], [T, iji, XXXXK], [iji, XXXXK, ], [XXXXK, , ,], [, ,,   ]]

>> Noun Phrases are: 
[ Linear,   j T, XXXXK]

>> Named Entities are: 
[('\uf0b7', 'CARDINAL')] 


================================ Paragraph 496 =================================

 Polynomial:     0,,   djTiji rXXXXK    Radial Basis Function (RBF):  

------------------- Sentence 1 -------------------

 Polynomial:     0,,   djTiji rXXXXK    Radial Basis Function (RBF): 


>> Tokens are: 
[, Polynomial, :, , , , , 0, ,, ,, , , djTiji, rXXXXK,   , , Radial, Basis, Function, (, RBF, ):] 

>> PoS Tags are: 
[('\uf0b7', 'X'), ('Polynomial', 'PROPN'), (':', 'PUNCT'), ('\uf028', 'ADJ'), ('\uf029', 'PROPN'), ('\uf028', 'NOUN'), ('\uf029', 'PROPN'), ('0', 'NUM'), (',', 'PUNCT'), (',', 'PUNCT'), ('\uf03e\uf02b\uf03d', 'VERB'), ('\uf067\uf067', 'ADV'), ('djTiji', 'NOUN'), ('rXXXXK', 'NOUN'), ('  ', 'SPACE'), ('\uf0b7', 'NOUN'), ('Radial', 'PROPN'), ('Basis', 'PROPN'), ('Function', 'PROPN'), ('(', 'PUNCT'), ('RBF', 'PROPN'), ('):', 'PUNCT')] 

>> Dependency Tags are: 
[('\uf0b7', 'ROOT'), ('Polynomial', 'nmod'), (':', 'punct'), ('\uf028', 'appos'), ('\uf029', 'compound'), ('\uf028', 'nmod'), ('\uf029', 'appos'), ('0', 'appos'), (',', 'punct'), (',', 'punct'), ('\uf03e\uf02b\uf03d', 'intj'), ('\uf067\uf067', 'advmod'), ('djTiji', 'npadvmod'), ('rXXXXK', 'nmod'), ('  ', 'nmod'), ('\uf0b7', 'compound'), ('Radial', 'compound'), ('Basis', 'compound'), ('Function', 'nsubj'), ('(', 'punct'), ('RBF', 'appos'), ('):', 'punct')]

>> Bigrams: 
[[, Polynomial], [Polynomial, :], [:, ], [, ], [, ], [, ], [, 0], [0, ,], [,, ,], [,, ], [, ], [, djTiji], [djTiji, rXXXXK], [rXXXXK,   ], [  , ], [, Radial], [Radial, Basis], [Basis, Function], [Function, (], [(, RBF], [RBF, ):]]

>> Trigrams: 
[[, Polynomial, :], [Polynomial, :, ], [:, , ], [, , ], [, , ], [, , 0], [, 0, ,], [0, ,, ,], [,, ,, ], [,, , ], [, , djTiji], [, djTiji, rXXXXK], [djTiji, rXXXXK,   ], [rXXXXK,   , ], [  , , Radial], [, Radial, Basis], [Radial, Basis, Function], [Basis, Function, (], [Function, (, RBF], [(, RBF, ):]]

>> Noun Phrases are: 
[  , rXXXXK    Radial Basis Function, RBF]

>> Named Entities are: 
[('\uf0b7', 'CARDINAL'), ('\uf029', 'ORG'), ('\uf0b7 Radial Basis Function (RBF', 'ORG')] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 497 =================================

  0,exp, 2 

------------------- Sentence 1 -------------------

  0,exp, 2 


>> Tokens are: 
[, , 0,exp, ,, 2] 

>> PoS Tags are: 
[('\uf028', 'NOUN'), ('\uf029', 'PROPN'), ('0,exp', 'PROPN'), (',', 'PUNCT'), ('2', 'NUM')] 

>> Dependency Tags are: 
[('\uf028', 'advmod'), ('\uf029', 'compound'), ('0,exp', 'ROOT'), (',', 'punct'), ('2', 'appos')]

>> Bigrams: 
[[, ], [, 0,exp], [0,exp, ,], [,, 2]]

>> Trigrams: 
[[, , 0,exp], [, 0,exp, ,], [0,exp, ,, 2]]

>> Noun Phrases are: 
[  0,exp]

>> Named Entities are: 
[('\uf029 0,exp', 'PERSON'), ('2', 'CARDINAL')] 


================================ Paragraph 498 =================================

  

------------------- Sentence 1 -------------------

  


>> Tokens are: 
[, ] 

>> PoS Tags are: 
[('\uf03e\uf0f7', 'NOUN'), ('\uf0f8', 'NOUN')] 

>> Dependency Tags are: 
[('\uf03e\uf0f7', 'compound'), ('\uf0f8', 'ROOT')]

>> Bigrams: 
[[, ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[ ]

>> Named Entities are: 
[] 


================================ Paragraph 499 =================================

   

------------------- Sentence 1 -------------------

 


>> Tokens are: 
[] 

>> PoS Tags are: 
[('\uf0f6', 'NOUN')] 

>> Dependency Tags are: 
[('\uf0f6', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[, ] 

>> PoS Tags are: 
[('\uf0e7', 'INTJ'), ('\uf0e8', 'PROPN')] 

>> Dependency Tags are: 
[('\uf0e7', 'compound'), ('\uf0e8', 'ROOT')]

>> Bigrams: 
[[, ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[ ]

>> Named Entities are: 
[('\uf0e7', 'GPE')] 


================================ Paragraph 500 =================================

   jiji XXXXK   

------------------- Sentence 1 -------------------

  


>> Tokens are: 
[, ] 

>> PoS Tags are: 
[('\uf0e6', 'NOUN'), ('\uf02d\uf02d\uf03d', 'PUNCT')] 

>> Dependency Tags are: 
[('\uf0e6', 'ROOT'), ('\uf02d\uf02d\uf03d', 'punct')]

>> Bigrams: 
[[, ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('\uf0e6 \uf02d\uf02d\uf03d', 'ORG')] 

------------------- Sentence 2 -------------------

 jiji XXXXK    


>> Tokens are: 
[, jiji, XXXXK,   ] 

>> PoS Tags are: 
[('\uf067\uf067', 'ADJ'), ('jiji', 'NOUN'), ('XXXXK', 'VERB'), ('  ', 'SPACE')] 

>> Dependency Tags are: 
[('\uf067\uf067', 'amod'), ('jiji', 'compound'), ('XXXXK', 'compound'), ('  ', 'ROOT')]

>> Bigrams: 
[[, jiji], [jiji, XXXXK], [XXXXK,   ]]

>> Trigrams: 
[[, jiji, XXXXK], [jiji, XXXXK,   ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 501 =================================

 Sigmoid:    rXXXXK jTiji  tanh,   Here dr  and ,  are the kernel parameters. Where, iX is a  

------------------- Sentence 1 -------------------

 Sigmoid:    rXXXXK jTiji  tanh,   Here dr  and ,  are the kernel parameters. 


>> Tokens are: 
[, Sigmoid, :, , , , rXXXXK, jTiji, , tanh, ,,   , dr,  , ,, ,  , kernel, parameters, .] 

>> PoS Tags are: 
[('\uf0b7', 'X'), ('Sigmoid', 'PROPN'), (':', 'PUNCT'), ('\uf028', 'NOUN'), ('\uf029', 'PROPN'), ('\uf028', 'ADJ'), ('\uf029rXXXXK', 'PROPN'), ('jTiji', 'PROPN'), ('\uf02b\uf03d', 'ADJ'), ('\uf067tanh', 'PROPN'), (',', 'PUNCT'), ('  ', 'SPACE'), ('dr', 'VERB'), (' ', 'SPACE'), (',', 'PUNCT'), ('\uf067', 'PROPN'), (' ', 'SPACE'), ('kernel', 'NOUN'), ('parameters', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('\uf0b7', 'dep'), ('Sigmoid', 'nsubj'), (':', 'punct'), ('\uf028', 'nmod'), ('\uf029', 'nmod'), ('\uf028', 'amod'), ('\uf029rXXXXK', 'compound'), ('jTiji', 'nmod'), ('\uf02b\uf03d', 'amod'), ('\uf067tanh', 'appos'), (',', 'punct'), ('  ', 'appos'), ('dr', 'prep'), (' ', 'pobj'), (',', 'punct'), ('\uf067', 'appos'), (' ', 'nsubj'), ('kernel', 'compound'), ('parameters', 'attr'), ('.', 'punct')]

>> Bigrams: 
[[, Sigmoid], [Sigmoid, :], [:, ], [, ], [, ], [, rXXXXK], [rXXXXK, jTiji], [jTiji, ], [, tanh], [tanh, ,], [,,   ], [  , dr], [dr,  ], [ , ,], [,, ], [,  ], [ , kernel], [kernel, parameters], [parameters, .]]

>> Trigrams: 
[[, Sigmoid, :], [Sigmoid, :, ], [:, , ], [, , ], [, , rXXXXK], [, rXXXXK, jTiji], [rXXXXK, jTiji, ], [jTiji, , tanh], [, tanh, ,], [tanh, ,,   ], [,,   , dr], [  , dr,  ], [dr,  , ,], [ , ,, ], [,, ,  ], [,  , kernel], [ , kernel, parameters], [kernel, parameters, .]]

>> Noun Phrases are: 
[ Sigmoid,    rXXXXK jTiji  tanh, , the kernel parameters]

>> Named Entities are: 
[('\uf0b7', 'CARDINAL'), ('\uf029', 'ORG'), ('jTiji \uf02b\uf03d', 'PERSON')] 

------------------- Sentence 2 -------------------

Where, iX is a   


>> Tokens are: 
[,, iX,  ] 

>> PoS Tags are: 
[(',', 'PUNCT'), ('iX', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[(',', 'punct'), ('iX', 'nsubj'), (' ', 'attr')]

>> Bigrams: 
[[,, iX], [iX,  ]]

>> Trigrams: 
[[,, iX,  ]]

>> Noun Phrases are: 
[iX]

>> Named Entities are: 
[] 


================================ Paragraph 502 =================================

training vector and mapped into a high dimensional space by the  function  and    jji XXXK ,  is known as kernel function.  

------------------- Sentence 1 -------------------

training vector and mapped into a high dimensional space by the  function  and    jji XXXK ,  is known as kernel function. 


>> Tokens are: 
[training, vector, mapped, high, dimensional, space,  , function, , , , , jji, XXXK, , ,,  , known, kernel, function, .] 

>> PoS Tags are: 
[('training', 'NOUN'), ('vector', 'NOUN'), ('mapped', 'VERB'), ('high', 'ADJ'), ('dimensional', 'ADJ'), ('space', 'NOUN'), (' ', 'SPACE'), ('function', 'NOUN'), ('\uf066', 'PROPN'), ('\uf028', 'ADJ'), ('\uf029', 'PROPN'), ('\uf028', 'ADJ'), ('\uf029jji', 'NOUN'), ('XXXK', 'PROPN'), ('\uf066\uf0ba', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('known', 'VERB'), ('kernel', 'NOUN'), ('function', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('training', 'compound'), ('vector', 'nsubjpass'), ('mapped', 'conj'), ('high', 'amod'), ('dimensional', 'amod'), ('space', 'pobj'), (' ', 'compound'), ('function', 'compound'), ('\uf066', 'pobj'), ('\uf028', 'amod'), ('\uf029', 'nmod'), ('\uf028', 'amod'), ('\uf029jji', 'compound'), ('XXXK', 'compound'), ('\uf066\uf0ba', 'conj'), (',', 'punct'), (' ', 'nsubjpass'), ('known', 'ROOT'), ('kernel', 'compound'), ('function', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[training, vector], [vector, mapped], [mapped, high], [high, dimensional], [dimensional, space], [space,  ], [ , function], [function, ], [, ], [, ], [, ], [, jji], [jji, XXXK], [XXXK, ], [, ,], [,,  ], [ , known], [known, kernel], [kernel, function], [function, .]]

>> Trigrams: 
[[training, vector, mapped], [vector, mapped, high], [mapped, high, dimensional], [high, dimensional, space], [dimensional, space,  ], [space,  , function], [ , function, ], [function, , ], [, , ], [, , ], [, , jji], [, jji, XXXK], [jji, XXXK, ], [XXXK, , ,], [, ,,  ], [,,  , known], [ , known, kernel], [known, kernel, function], [kernel, function, .]]

>> Noun Phrases are: 
[training vector, a high dimensional space, the  function ,    jji XXXK , kernel function]

>> Named Entities are: 
[('\uf029', 'ORG')] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 503 =================================

7. DEEP LEARNING   

------------------- Sentence 1 -------------------

7. 


>> Tokens are: 
[7, .] 

>> PoS Tags are: 
[('7', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('7', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[7, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('7', 'CARDINAL')] 

------------------- Sentence 2 -------------------

DEEP LEARNING    


>> Tokens are: 
[DEEP, LEARNING,   ] 

>> PoS Tags are: 
[('DEEP', 'ADJ'), ('LEARNING', 'PROPN'), ('  ', 'SPACE')] 

>> Dependency Tags are: 
[('DEEP', 'amod'), ('LEARNING', 'compound'), ('  ', 'ROOT')]

>> Bigrams: 
[[DEEP, LEARNING], [LEARNING,   ]]

>> Trigrams: 
[[DEEP, LEARNING,   ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 504 =================================

The use of deep artificial neural networks has gain popularity  

------------------- Sentence 1 -------------------

The use of deep artificial neural networks has gain popularity   


>> Tokens are: 
[use, deep, artificial, neural, networks, gain, popularity,  ] 

>> PoS Tags are: 
[('use', 'NOUN'), ('deep', 'ADJ'), ('artificial', 'ADJ'), ('neural', 'ADJ'), ('networks', 'NOUN'), ('gain', 'VERB'), ('popularity', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('use', 'nsubj'), ('deep', 'amod'), ('artificial', 'amod'), ('neural', 'amod'), ('networks', 'pobj'), ('gain', 'ROOT'), ('popularity', 'dobj'), (' ', 'punct')]

>> Bigrams: 
[[use, deep], [deep, artificial], [artificial, neural], [neural, networks], [networks, gain], [gain, popularity], [popularity,  ]]

>> Trigrams: 
[[use, deep, artificial], [deep, artificial, neural], [artificial, neural, networks], [neural, networks, gain], [networks, gain, popularity], [gain, popularity,  ]]

>> Noun Phrases are: 
[The use, deep artificial neural networks, popularity]

>> Named Entities are: 
[] 


================================ Paragraph 505 =================================

for the last few years in pattern recognition and machine  

------------------- Sentence 1 -------------------

for the last few years in pattern recognition and machine   


>> Tokens are: 
[years, pattern, recognition, machine,  ] 

>> PoS Tags are: 
[('years', 'NOUN'), ('pattern', 'NOUN'), ('recognition', 'NOUN'), ('machine', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('years', 'pobj'), ('pattern', 'compound'), ('recognition', 'pobj'), ('machine', 'conj'), (' ', 'punct')]

>> Bigrams: 
[[years, pattern], [pattern, recognition], [recognition, machine], [machine,  ]]

>> Trigrams: 
[[years, pattern, recognition], [pattern, recognition, machine], [recognition, machine,  ]]

>> Noun Phrases are: 
[the last few years, pattern recognition, machine]

>> Named Entities are: 
[('the last few years', 'DATE')] 


================================ Paragraph 506 =================================

learning. Most of the popular Deep Learning Techniques are  

------------------- Sentence 1 -------------------

learning. 


>> Tokens are: 
[learning, .] 

>> PoS Tags are: 
[('learning', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('learning', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[learning, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Most of the popular Deep Learning Techniques are   


>> Tokens are: 
[popular, Deep, Learning, Techniques,  ] 

>> PoS Tags are: 
[('popular', 'ADJ'), ('Deep', 'PROPN'), ('Learning', 'PROPN'), ('Techniques', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('popular', 'amod'), ('Deep', 'compound'), ('Learning', 'compound'), ('Techniques', 'pobj'), (' ', 'attr')]

>> Bigrams: 
[[popular, Deep], [Deep, Learning], [Learning, Techniques], [Techniques,  ]]

>> Trigrams: 
[[popular, Deep, Learning], [Deep, Learning, Techniques], [Learning, Techniques,  ]]

>> Noun Phrases are: 
[the popular Deep Learning Techniques]

>> Named Entities are: 
[('Deep Learning Techniques', 'WORK_OF_ART')] 


================================ Paragraph 507 =================================

built from Artificial Neural Network (ANN). Deep learning can  

------------------- Sentence 1 -------------------

built from Artificial Neural Network (ANN). 


>> Tokens are: 
[built, Artificial, Neural, Network, (, ANN, ), .] 

>> PoS Tags are: 
[('built', 'VERB'), ('Artificial', 'PROPN'), ('Neural', 'PROPN'), ('Network', 'PROPN'), ('(', 'PUNCT'), ('ANN', 'PROPN'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('built', 'ROOT'), ('Artificial', 'compound'), ('Neural', 'compound'), ('Network', 'pobj'), ('(', 'punct'), ('ANN', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[built, Artificial], [Artificial, Neural], [Neural, Network], [Network, (], [(, ANN], [ANN, )], [), .]]

>> Trigrams: 
[[built, Artificial, Neural], [Artificial, Neural, Network], [Neural, Network, (], [Network, (, ANN], [(, ANN, )], [ANN, ), .]]

>> Noun Phrases are: 
[Artificial Neural Network, ANN]

>> Named Entities are: 
[('Artificial Neural Network', 'ORG')] 

------------------- Sentence 2 -------------------

Deep learning can   


>> Tokens are: 
[Deep, learning,  ] 

>> PoS Tags are: 
[('Deep', 'ADJ'), ('learning', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Deep', 'amod'), ('learning', 'nsubj'), (' ', 'punct')]

>> Bigrams: 
[[Deep, learning], [learning,  ]]

>> Trigrams: 
[[Deep, learning,  ]]

>> Noun Phrases are: 
[Deep learning]

>> Named Entities are: 
[] 


================================ Paragraph 508 =================================

be defined as a model (e.g.-, neural network) with many layers,  

------------------- Sentence 1 -------------------

be defined as a model (e.g.-, neural network) with many layers, 


>> Tokens are: 
[defined, model, (, e.g.-, ,, neural, network, ), layers, ,] 

>> PoS Tags are: 
[('defined', 'VERB'), ('model', 'NOUN'), ('(', 'PUNCT'), ('e.g.-', 'PROPN'), (',', 'PUNCT'), ('neural', 'ADJ'), ('network', 'NOUN'), (')', 'PUNCT'), ('layers', 'NOUN'), (',', 'PUNCT')] 

>> Dependency Tags are: 
[('defined', 'ROOT'), ('model', 'pobj'), ('(', 'punct'), ('e.g.-', 'nmod'), (',', 'punct'), ('neural', 'amod'), ('network', 'appos'), (')', 'punct'), ('layers', 'pobj'), (',', 'punct')]

>> Bigrams: 
[[defined, model], [model, (], [(, e.g.-], [e.g.-, ,], [,, neural], [neural, network], [network, )], [), layers], [layers, ,]]

>> Trigrams: 
[[defined, model, (], [model, (, e.g.-], [(, e.g.-, ,], [e.g.-, ,, neural], [,, neural, network], [neural, network, )], [network, ), layers], [), layers, ,]]

>> Noun Phrases are: 
[a model, e.g.-, neural network, many layers]

>> Named Entities are: 
[('e.g.-', 'ORG')] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 509 =================================

trained in a layer- wise fashion. Deep learning has had a  

------------------- Sentence 1 -------------------

trained in a layer- wise fashion. 


>> Tokens are: 
[trained, layer-, wise, fashion, .] 

>> PoS Tags are: 
[('trained', 'VERB'), ('layer-', 'ADJ'), ('wise', 'ADJ'), ('fashion', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('trained', 'ROOT'), ('layer-', 'amod'), ('wise', 'amod'), ('fashion', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[trained, layer-], [layer-, wise], [wise, fashion], [fashion, .]]

>> Trigrams: 
[[trained, layer-, wise], [layer-, wise, fashion], [wise, fashion, .]]

>> Noun Phrases are: 
[a layer- wise fashion]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Deep learning has had a   


>> Tokens are: 
[Deep, learning,  ] 

>> PoS Tags are: 
[('Deep', 'ADJ'), ('learning', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Deep', 'amod'), ('learning', 'nsubj'), (' ', 'dobj')]

>> Bigrams: 
[[Deep, learning], [learning,  ]]

>> Trigrams: 
[[Deep, learning,  ]]

>> Noun Phrases are: 
[Deep learning]

>> Named Entities are: 
[] 


================================ Paragraph 510 =================================

tremendous impact on various applications such as computer  

------------------- Sentence 1 -------------------

tremendous impact on various applications such as computer   


>> Tokens are: 
[tremendous, impact, applications, computer,  ] 

>> PoS Tags are: 
[('tremendous', 'ADJ'), ('impact', 'NOUN'), ('applications', 'NOUN'), ('computer', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('tremendous', 'amod'), ('impact', 'ROOT'), ('applications', 'pobj'), ('computer', 'pobj'), (' ', 'punct')]

>> Bigrams: 
[[tremendous, impact], [impact, applications], [applications, computer], [computer,  ]]

>> Trigrams: 
[[tremendous, impact, applications], [impact, applications, computer], [applications, computer,  ]]

>> Noun Phrases are: 
[tremendous impact, various applications, computer]

>> Named Entities are: 
[] 


================================ Paragraph 511 =================================

vision, speech recognition, natural language processing [29], and  

------------------- Sentence 1 -------------------

vision, speech recognition, natural language processing [29], and   


>> Tokens are: 
[vision, ,, speech, recognition, ,, natural, language, processing, [, 29, ], ,,  ] 

>> PoS Tags are: 
[('vision', 'NOUN'), (',', 'PUNCT'), ('speech', 'NOUN'), ('recognition', 'NOUN'), (',', 'PUNCT'), ('natural', 'ADJ'), ('language', 'NOUN'), ('processing', 'NOUN'), ('[', 'PUNCT'), ('29', 'NUM'), (']', 'PUNCT'), (',', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('vision', 'ROOT'), (',', 'punct'), ('speech', 'compound'), ('recognition', 'conj'), (',', 'punct'), ('natural', 'amod'), ('language', 'compound'), ('processing', 'conj'), ('[', 'punct'), ('29', 'appos'), (']', 'punct'), (',', 'punct'), (' ', 'conj')]

>> Bigrams: 
[[vision, ,], [,, speech], [speech, recognition], [recognition, ,], [,, natural], [natural, language], [language, processing], [processing, [], [[, 29], [29, ]], [], ,], [,,  ]]

>> Trigrams: 
[[vision, ,, speech], [,, speech, recognition], [speech, recognition, ,], [recognition, ,, natural], [,, natural, language], [natural, language, processing], [language, processing, [], [processing, [, 29], [[, 29, ]], [29, ], ,], [], ,,  ]]

>> Noun Phrases are: 
[vision, speech recognition, natural language processing]

>> Named Entities are: 
[('29', 'CARDINAL')] 


================================ Paragraph 512 =================================

crawling deep web [30]. Samy et al. [29] have discussed  

------------------- Sentence 1 -------------------

crawling deep web [30]. 


>> Tokens are: 
[crawling, deep, web, [, 30, ], .] 

>> PoS Tags are: 
[('crawling', 'VERB'), ('deep', 'ADJ'), ('web', 'NOUN'), ('[', 'PUNCT'), ('30', 'NUM'), (']', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('crawling', 'ROOT'), ('deep', 'amod'), ('web', 'dobj'), ('[', 'punct'), ('30', 'dobj'), (']', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[crawling, deep], [deep, web], [web, [], [[, 30], [30, ]], [], .]]

>> Trigrams: 
[[crawling, deep, web], [deep, web, [], [web, [, 30], [[, 30, ]], [30, ], .]]

>> Noun Phrases are: 
[deep web]

>> Named Entities are: 
[('30', 'CARDINAL')] 

------------------- Sentence 2 -------------------

Samy et al. 


>> Tokens are: 
[Samy, et, al, .] 

>> PoS Tags are: 
[('Samy', 'PROPN'), ('et', 'NOUN'), ('al', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Samy', 'compound'), ('et', 'compound'), ('al', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Samy, et], [et, al], [al, .]]

>> Trigrams: 
[[Samy, et, al], [et, al, .]]

>> Noun Phrases are: 
[Samy et al]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

[29] have discussed   


>> Tokens are: 
[[, 29, ], discussed,  ] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('29', 'NUM'), (']', 'PUNCT'), ('discussed', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('[', 'punct'), ('29', 'nsubj'), (']', 'punct'), ('discussed', 'ROOT'), (' ', 'dobj')]

>> Bigrams: 
[[[, 29], [29, ]], [], discussed], [discussed,  ]]

>> Trigrams: 
[[[, 29, ]], [29, ], discussed], [], discussed,  ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('29', 'CARDINAL')] 


================================ Paragraph 513 =================================

challenges and new applications of deep learning in their study.  

------------------- Sentence 1 -------------------

challenges and new applications of deep learning in their study. 


>> Tokens are: 
[challenges, new, applications, deep, learning, study, .] 

>> PoS Tags are: 
[('challenges', 'NOUN'), ('new', 'ADJ'), ('applications', 'NOUN'), ('deep', 'ADJ'), ('learning', 'NOUN'), ('study', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('challenges', 'ROOT'), ('new', 'amod'), ('applications', 'conj'), ('deep', 'amod'), ('learning', 'pobj'), ('study', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[challenges, new], [new, applications], [applications, deep], [deep, learning], [learning, study], [study, .]]

>> Trigrams: 
[[challenges, new, applications], [new, applications, deep], [applications, deep, learning], [deep, learning, study], [learning, study, .]]

>> Noun Phrases are: 
[challenges, new applications, deep learning, their study]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 514 =================================

  

------------------- Sentence 1 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 515 =================================

Fig.11. Deep network Architecture  

------------------- Sentence 1 -------------------

Fig.11. 


>> Tokens are: 
[Fig.11, .] 

>> PoS Tags are: 
[('Fig.11', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Fig.11', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Fig.11, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Fig.11]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Deep network Architecture   


>> Tokens are: 
[Deep, network, Architecture,  ] 

>> PoS Tags are: 
[('Deep', 'ADJ'), ('network', 'NOUN'), ('Architecture', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Deep', 'amod'), ('network', 'ROOT'), ('Architecture', 'appos'), (' ', 'nummod')]

>> Bigrams: 
[[Deep, network], [network, Architecture], [Architecture,  ]]

>> Trigrams: 
[[Deep, network, Architecture], [network, Architecture,  ]]

>> Noun Phrases are: 
[Deep network, Architecture]

>> Named Entities are: 
[] 


================================ Paragraph 516 =================================

The Fig.11 depicts the deep learning network architecture  

------------------- Sentence 1 -------------------

The Fig.11 depicts the deep learning network architecture   


>> Tokens are: 
[Fig.11, depicts, deep, learning, network, architecture,  ] 

>> PoS Tags are: 
[('Fig.11', 'PROPN'), ('depicts', 'VERB'), ('deep', 'ADJ'), ('learning', 'NOUN'), ('network', 'NOUN'), ('architecture', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Fig.11', 'nsubj'), ('depicts', 'ROOT'), ('deep', 'amod'), ('learning', 'amod'), ('network', 'compound'), ('architecture', 'dobj'), (' ', 'punct')]

>> Bigrams: 
[[Fig.11, depicts], [depicts, deep], [deep, learning], [learning, network], [network, architecture], [architecture,  ]]

>> Trigrams: 
[[Fig.11, depicts, deep], [depicts, deep, learning], [deep, learning, network], [learning, network, architecture], [network, architecture,  ]]

>> Noun Phrases are: 
[The Fig.11, the deep learning network architecture]

>> Named Entities are: 
[('Fig.11', 'ORG')] 


================================ Paragraph 517 =================================

with one 3-unit input layer, one 2-unit output layer, and two 5- 

------------------- Sentence 1 -------------------

with one 3-unit input layer, one 2-unit output layer, and 


>> Tokens are: 
[3, -, unit, input, layer, ,, 2, -, unit, output, layer, ,] 

>> PoS Tags are: 
[('3', 'NUM'), ('-', 'PUNCT'), ('unit', 'NOUN'), ('input', 'NOUN'), ('layer', 'NOUN'), (',', 'PUNCT'), ('2', 'NUM'), ('-', 'PUNCT'), ('unit', 'NOUN'), ('output', 'NOUN'), ('layer', 'NOUN'), (',', 'PUNCT')] 

>> Dependency Tags are: 
[('3', 'nummod'), ('-', 'punct'), ('unit', 'compound'), ('input', 'compound'), ('layer', 'pobj'), (',', 'punct'), ('2', 'nummod'), ('-', 'punct'), ('unit', 'compound'), ('output', 'compound'), ('layer', 'conj'), (',', 'punct')]

>> Bigrams: 
[[3, -], [-, unit], [unit, input], [input, layer], [layer, ,], [,, 2], [2, -], [-, unit], [unit, output], [output, layer], [layer, ,]]

>> Trigrams: 
[[3, -, unit], [-, unit, input], [unit, input, layer], [input, layer, ,], [layer, ,, 2], [,, 2, -], [2, -, unit], [-, unit, output], [unit, output, layer], [output, layer, ,]]

>> Noun Phrases are: 
[one 3-unit input layer, one 2-unit output layer]

>> Named Entities are: 
[('one', 'CARDINAL'), ('3', 'CARDINAL'), ('one', 'CARDINAL'), ('2', 'CARDINAL')] 

------------------- Sentence 2 -------------------

two 5- 


>> Tokens are: 
[5-] 

>> PoS Tags are: 
[('5-', 'NUM')] 

>> Dependency Tags are: 
[('5-', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('two', 'CARDINAL')] 


================================ Paragraph 518 =================================

unit hidden layers.    

------------------- Sentence 1 -------------------

unit hidden layers. 


>> Tokens are: 
[unit, hidden, layers, .] 

>> PoS Tags are: 
[('unit', 'NOUN'), ('hidden', 'VERB'), ('layers', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('unit', 'nmod'), ('hidden', 'amod'), ('layers', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[unit, hidden], [hidden, layers], [layers, .]]

>> Trigrams: 
[[unit, hidden, layers], [hidden, layers, .]]

>> Noun Phrases are: 
[unit hidden layers]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

    


>> Tokens are: 
[   ] 

>> PoS Tags are: 
[('   ', 'SPACE')] 

>> Dependency Tags are: 
[('   ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 519 =================================

Deep learning has also been successfully implemented in  

------------------- Sentence 1 -------------------

Deep learning has also been successfully implemented in   


>> Tokens are: 
[Deep, learning, successfully, implemented,  ] 

>> PoS Tags are: 
[('Deep', 'ADJ'), ('learning', 'NOUN'), ('successfully', 'ADV'), ('implemented', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Deep', 'amod'), ('learning', 'nsubjpass'), ('successfully', 'advmod'), ('implemented', 'ROOT'), (' ', 'pobj')]

>> Bigrams: 
[[Deep, learning], [learning, successfully], [successfully, implemented], [implemented,  ]]

>> Trigrams: 
[[Deep, learning, successfully], [learning, successfully, implemented], [successfully, implemented,  ]]

>> Noun Phrases are: 
[Deep learning]

>> Named Entities are: 
[] 


================================ Paragraph 520 =================================

industry products that ultimately take advantage of the large  

------------------- Sentence 1 -------------------

industry products that ultimately take advantage of the large   


>> Tokens are: 
[industry, products, ultimately, advantage, large,  ] 

>> PoS Tags are: 
[('industry', 'NOUN'), ('products', 'NOUN'), ('ultimately', 'ADV'), ('advantage', 'NOUN'), ('large', 'ADJ'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('industry', 'compound'), ('products', 'ROOT'), ('ultimately', 'advmod'), ('advantage', 'dobj'), ('large', 'amod'), (' ', 'pobj')]

>> Bigrams: 
[[industry, products], [products, ultimately], [ultimately, advantage], [advantage, large], [large,  ]]

>> Trigrams: 
[[industry, products, ultimately], [products, ultimately, advantage], [ultimately, advantage, large], [advantage, large,  ]]

>> Noun Phrases are: 
[industry products, advantage]

>> Named Entities are: 
[] 


================================ Paragraph 521 =================================

volume of data. Top Information Technology (IT) companies  

------------------- Sentence 1 -------------------

volume of data. 


>> Tokens are: 
[volume, data, .] 

>> PoS Tags are: 
[('volume', 'NOUN'), ('data', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('volume', 'ROOT'), ('data', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[volume, data], [data, .]]

>> Trigrams: 
[[volume, data, .]]

>> Noun Phrases are: 
[volume, data]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Top Information Technology (IT) companies   


>> Tokens are: 
[Information, Technology, (, ), companies,  ] 

>> PoS Tags are: 
[('Information', 'PROPN'), ('Technology', 'PROPN'), ('(', 'PUNCT'), (')', 'PUNCT'), ('companies', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Information', 'compound'), ('Technology', 'nmod'), ('(', 'punct'), (')', 'punct'), ('companies', 'ROOT'), (' ', 'nummod')]

>> Bigrams: 
[[Information, Technology], [Technology, (], [(, )], [), companies], [companies,  ]]

>> Trigrams: 
[[Information, Technology, (], [Technology, (, )], [(, ), companies], [), companies,  ]]

>> Noun Phrases are: 
[Top Information Technology (IT) companies]

>> Named Entities are: 
[('Top Information Technology', 'ORG')] 


================================ Paragraph 522 =================================

like Microsoft, Google, Apple, Yahoo, Baidu, Amazon and  

------------------- Sentence 1 -------------------

like Microsoft, Google, Apple, Yahoo, Baidu, Amazon and   


>> Tokens are: 
[like, Microsoft, ,, Google, ,, Apple, ,, Yahoo, ,, Baidu, ,, Amazon,  ] 

>> PoS Tags are: 
[('like', 'ADP'), ('Microsoft', 'PROPN'), (',', 'PUNCT'), ('Google', 'PROPN'), (',', 'PUNCT'), ('Apple', 'PROPN'), (',', 'PUNCT'), ('Yahoo', 'PROPN'), (',', 'PUNCT'), ('Baidu', 'PROPN'), (',', 'PUNCT'), ('Amazon', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('like', 'ROOT'), ('Microsoft', 'pobj'), (',', 'punct'), ('Google', 'conj'), (',', 'punct'), ('Apple', 'conj'), (',', 'punct'), ('Yahoo', 'conj'), (',', 'punct'), ('Baidu', 'conj'), (',', 'punct'), ('Amazon', 'conj'), (' ', 'conj')]

>> Bigrams: 
[[like, Microsoft], [Microsoft, ,], [,, Google], [Google, ,], [,, Apple], [Apple, ,], [,, Yahoo], [Yahoo, ,], [,, Baidu], [Baidu, ,], [,, Amazon], [Amazon,  ]]

>> Trigrams: 
[[like, Microsoft, ,], [Microsoft, ,, Google], [,, Google, ,], [Google, ,, Apple], [,, Apple, ,], [Apple, ,, Yahoo], [,, Yahoo, ,], [Yahoo, ,, Baidu], [,, Baidu, ,], [Baidu, ,, Amazon], [,, Amazon,  ]]

>> Noun Phrases are: 
[Microsoft, Google, Apple, Yahoo, Baidu, Amazon]

>> Named Entities are: 
[('Microsoft', 'ORG'), ('Google', 'ORG'), ('Apple', 'ORG'), ('Baidu', 'ORG'), ('Amazon', 'ORG')] 


================================ Paragraph 523 =================================

Facebook, who collect and analyze massive amounts of data on a  

------------------- Sentence 1 -------------------

Facebook, who collect and analyze massive amounts of data on a   


>> Tokens are: 
[Facebook, ,, collect, analyze, massive, amounts, data,  ] 

>> PoS Tags are: 
[('Facebook', 'PROPN'), (',', 'PUNCT'), ('collect', 'VERB'), ('analyze', 'VERB'), ('massive', 'ADJ'), ('amounts', 'NOUN'), ('data', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Facebook', 'ROOT'), (',', 'punct'), ('collect', 'relcl'), ('analyze', 'conj'), ('massive', 'amod'), ('amounts', 'dobj'), ('data', 'pobj'), (' ', 'pobj')]

>> Bigrams: 
[[Facebook, ,], [,, collect], [collect, analyze], [analyze, massive], [massive, amounts], [amounts, data], [data,  ]]

>> Trigrams: 
[[Facebook, ,, collect], [,, collect, analyze], [collect, analyze, massive], [analyze, massive, amounts], [massive, amounts, data], [amounts, data,  ]]

>> Noun Phrases are: 
[Facebook, who, massive amounts, data]

>> Named Entities are: 
[] 


================================ Paragraph 524 =================================

daily basis, have been investing a good share on finances on  

------------------- Sentence 1 -------------------

daily basis, have been investing a good share on finances on   


>> Tokens are: 
[daily, basis, ,, investing, good, share, finances,  ] 

>> PoS Tags are: 
[('daily', 'ADJ'), ('basis', 'NOUN'), (',', 'PUNCT'), ('investing', 'VERB'), ('good', 'ADJ'), ('share', 'NOUN'), ('finances', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('daily', 'amod'), ('basis', 'npadvmod'), (',', 'punct'), ('investing', 'ROOT'), ('good', 'amod'), ('share', 'dobj'), ('finances', 'pobj'), (' ', 'pobj')]

>> Bigrams: 
[[daily, basis], [basis, ,], [,, investing], [investing, good], [good, share], [share, finances], [finances,  ]]

>> Trigrams: 
[[daily, basis, ,], [basis, ,, investing], [,, investing, good], [investing, good, share], [good, share, finances], [share, finances,  ]]

>> Noun Phrases are: 
[a good share, finances]

>> Named Entities are: 
[('daily', 'DATE')] 


================================ Paragraph 525 =================================

deep learning related projects. For example, Apple's Siri and  

------------------- Sentence 1 -------------------

deep learning related projects. 


>> Tokens are: 
[deep, learning, related, projects, .] 

>> PoS Tags are: 
[('deep', 'ADJ'), ('learning', 'VERB'), ('related', 'VERB'), ('projects', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('deep', 'amod'), ('learning', 'amod'), ('related', 'amod'), ('projects', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[deep, learning], [learning, related], [related, projects], [projects, .]]

>> Trigrams: 
[[deep, learning, related], [learning, related, projects], [related, projects, .]]

>> Noun Phrases are: 
[deep learning related projects]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

For example, Apple's Siri and   


>> Tokens are: 
[example, ,, Apple, Siri,  ] 

>> PoS Tags are: 
[('example', 'NOUN'), (',', 'PUNCT'), ('Apple', 'PROPN'), ('Siri', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('example', 'pobj'), (',', 'punct'), ('Apple', 'poss'), ('Siri', 'pobj'), (' ', 'conj')]

>> Bigrams: 
[[example, ,], [,, Apple], [Apple, Siri], [Siri,  ]]

>> Trigrams: 
[[example, ,, Apple], [,, Apple, Siri], [Apple, Siri,  ]]

>> Noun Phrases are: 
[example, Apple's Siri]

>> Named Entities are: 
[('Apple', 'ORG')] 


================================ Paragraph 526 =================================

Google Voice Search offer a wide variety of services including  

------------------- Sentence 1 -------------------

Google Voice Search offer a wide variety of services including   


>> Tokens are: 
[Google, Voice, Search, offer, wide, variety, services, including,  ] 

>> PoS Tags are: 
[('Google', 'PROPN'), ('Voice', 'PROPN'), ('Search', 'PROPN'), ('offer', 'VERB'), ('wide', 'ADJ'), ('variety', 'NOUN'), ('services', 'NOUN'), ('including', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Google', 'compound'), ('Voice', 'compound'), ('Search', 'nsubj'), ('offer', 'ROOT'), ('wide', 'amod'), ('variety', 'dobj'), ('services', 'pobj'), ('including', 'prep'), (' ', 'pobj')]

>> Bigrams: 
[[Google, Voice], [Voice, Search], [Search, offer], [offer, wide], [wide, variety], [variety, services], [services, including], [including,  ]]

>> Trigrams: 
[[Google, Voice, Search], [Voice, Search, offer], [Search, offer, wide], [offer, wide, variety], [wide, variety, services], [variety, services, including], [services, including,  ]]

>> Noun Phrases are: 
[Google Voice Search, a wide variety, services]

>> Named Entities are: 
[('Google Voice Search', 'ORG')] 


================================ Paragraph 527 =================================

weather reports, sport news, answers to user’s questions, and  

------------------- Sentence 1 -------------------

weather reports, 


>> Tokens are: 
[weather, reports, ,] 

>> PoS Tags are: 
[('weather', 'NOUN'), ('reports', 'NOUN'), (',', 'PUNCT')] 

>> Dependency Tags are: 
[('weather', 'compound'), ('reports', 'ROOT'), (',', 'punct')]

>> Bigrams: 
[[weather, reports], [reports, ,]]

>> Trigrams: 
[[weather, reports, ,]]

>> Noun Phrases are: 
[weather reports]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

sport news, answers to user’s questions, and   


>> Tokens are: 
[sport, news, ,, answers, user, questions, ,,  ] 

>> PoS Tags are: 
[('sport', 'NOUN'), ('news', 'NOUN'), (',', 'PUNCT'), ('answers', 'NOUN'), ('user', 'NOUN'), ('questions', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('sport', 'compound'), ('news', 'ROOT'), (',', 'punct'), ('answers', 'conj'), ('user', 'nmod'), ('questions', 'pobj'), (',', 'punct'), (' ', 'conj')]

>> Bigrams: 
[[sport, news], [news, ,], [,, answers], [answers, user], [user, questions], [questions, ,], [,,  ]]

>> Trigrams: 
[[sport, news, ,], [news, ,, answers], [,, answers, user], [answers, user, questions], [user, questions, ,], [questions, ,,  ]]

>> Noun Phrases are: 
[sport news, answers, user’s questions]

>> Named Entities are: 
[] 


================================ Paragraph 528 =================================

reminders etc., by utilizing deep learning algorithms [31].  

------------------- Sentence 1 -------------------

reminders etc., by utilizing deep learning algorithms [31]. 


>> Tokens are: 
[reminders, etc, ., ,, utilizing, deep, learning, algorithms, [, 31, ], .] 

>> PoS Tags are: 
[('reminders', 'VERB'), ('etc', 'X'), ('.', 'X'), (',', 'PUNCT'), ('utilizing', 'VERB'), ('deep', 'ADJ'), ('learning', 'VERB'), ('algorithms', 'NOUN'), ('[', 'PUNCT'), ('31', 'NUM'), (']', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('reminders', 'ROOT'), ('etc', 'dobj'), ('.', 'punct'), (',', 'punct'), ('utilizing', 'pcomp'), ('deep', 'amod'), ('learning', 'amod'), ('algorithms', 'dobj'), ('[', 'punct'), ('31', 'appos'), (']', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[reminders, etc], [etc, .], [., ,], [,, utilizing], [utilizing, deep], [deep, learning], [learning, algorithms], [algorithms, [], [[, 31], [31, ]], [], .]]

>> Trigrams: 
[[reminders, etc, .], [etc, ., ,], [., ,, utilizing], [,, utilizing, deep], [utilizing, deep, learning], [deep, learning, algorithms], [learning, algorithms, [], [algorithms, [, 31], [[, 31, ]], [31, ], .]]

>> Noun Phrases are: 
[deep learning algorithms]

>> Named Entities are: 
[('31', 'CARDINAL')] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 529 =================================

Currently, these two applications support wide range spoken  

------------------- Sentence 1 -------------------

Currently, these two applications support wide range spoken   


>> Tokens are: 
[Currently, ,, applications, support, wide, range, spoken,  ] 

>> PoS Tags are: 
[('Currently', 'ADV'), (',', 'PUNCT'), ('applications', 'NOUN'), ('support', 'NOUN'), ('wide', 'ADJ'), ('range', 'NOUN'), ('spoken', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Currently', 'advmod'), (',', 'punct'), ('applications', 'nmod'), ('support', 'nmod'), ('wide', 'amod'), ('range', 'nsubj'), ('spoken', 'ROOT'), (' ', 'dobj')]

>> Bigrams: 
[[Currently, ,], [,, applications], [applications, support], [support, wide], [wide, range], [range, spoken], [spoken,  ]]

>> Trigrams: 
[[Currently, ,, applications], [,, applications, support], [applications, support, wide], [support, wide, range], [wide, range, spoken], [range, spoken,  ]]

>> Noun Phrases are: 
[these two applications support wide range]

>> Named Entities are: 
[('two', 'CARDINAL')] 


================================ Paragraph 530 =================================

languages.  

------------------- Sentence 1 -------------------

languages. 


>> Tokens are: 
[languages, .] 

>> PoS Tags are: 
[('languages', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('languages', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[languages, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[languages]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 531 =================================

Table.4. Large scale deep learning research progress  

------------------- Sentence 1 -------------------

Table.4. 


>> Tokens are: 
[Table.4, .] 

>> PoS Tags are: 
[('Table.4', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Table.4', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Table.4, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Large scale deep learning research progress   


>> Tokens are: 
[Large, scale, deep, learning, research, progress,  ] 

>> PoS Tags are: 
[('Large', 'ADJ'), ('scale', 'NOUN'), ('deep', 'ADJ'), ('learning', 'NOUN'), ('research', 'NOUN'), ('progress', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Large', 'amod'), ('scale', 'nmod'), ('deep', 'amod'), ('learning', 'compound'), ('research', 'compound'), ('progress', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[Large, scale], [scale, deep], [deep, learning], [learning, research], [research, progress], [progress,  ]]

>> Trigrams: 
[[Large, scale, deep], [scale, deep, learning], [deep, learning, research], [learning, research, progress], [research, progress,  ]]

>> Noun Phrases are: 
[Large scale deep learning research progress]

>> Named Entities are: 
[] 


================================ Paragraph 532 =================================

Method Computing power  # of examples and  

------------------- Sentence 1 -------------------

Method Computing power  # of examples and   


>> Tokens are: 
[Method, Computing, power,  , #, examples,  ] 

>> PoS Tags are: 
[('Method', 'PROPN'), ('Computing', 'PROPN'), ('power', 'NOUN'), (' ', 'SPACE'), ('#', 'NUM'), ('examples', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Method', 'compound'), ('Computing', 'compound'), ('power', 'ROOT'), (' ', 'appos'), ('#', 'appos'), ('examples', 'pobj'), (' ', 'conj')]

>> Bigrams: 
[[Method, Computing], [Computing, power], [power,  ], [ , #], [#, examples], [examples,  ]]

>> Trigrams: 
[[Method, Computing, power], [Computing, power,  ], [power,  , #], [ , #, examples], [#, examples,  ]]

>> Noun Phrases are: 
[Method Computing power, examples]

>> Named Entities are: 
[('Method Computing', 'PERSON'), ('#', 'CARDINAL')] 


================================ Paragraph 533 =================================

parameters  

------------------- Sentence 1 -------------------

parameters   


>> Tokens are: 
[parameters,  ] 

>> PoS Tags are: 
[('parameters', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('parameters', 'ROOT'), (' ', 'nummod')]

>> Bigrams: 
[[parameters,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[parameters]

>> Named Entities are: 
[] 


================================ Paragraph 534 =================================

Average  

------------------- Sentence 1 -------------------

Average   


>> Tokens are: 
[Average,  ] 

>> PoS Tags are: 
[('Average', 'ADJ'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Average', 'amod'), (' ', 'ROOT')]

>> Bigrams: 
[[Average,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 535 =================================

running  

------------------- Sentence 1 -------------------

running   


>> Tokens are: 
[running,  ] 

>> PoS Tags are: 
[('running', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('running', 'ROOT'), (' ', 'dobj')]

>> Bigrams: 
[[running,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 536 =================================

Time  

------------------- Sentence 1 -------------------

Time   


>> Tokens are: 
[Time,  ] 

>> PoS Tags are: 
[('Time', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Time', 'ROOT'), (' ', 'nummod')]

>> Bigrams: 
[[Time,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Time]

>> Named Entities are: 
[] 


================================ Paragraph 537 =================================

DBN [32]  NVIDIA GTX 280  

------------------- Sentence 1 -------------------

DBN [32]  NVIDIA GTX 280   


>> Tokens are: 
[DBN, [, 32, ],  , NVIDIA, GTX, 280,  ] 

>> PoS Tags are: 
[('DBN', 'PROPN'), ('[', 'PUNCT'), ('32', 'NUM'), (']', 'PUNCT'), (' ', 'SPACE'), ('NVIDIA', 'PROPN'), ('GTX', 'PROPN'), ('280', 'NUM'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('DBN', 'ROOT'), ('[', 'punct'), ('32', 'appos'), (']', 'punct'), (' ', 'punct'), ('NVIDIA', 'compound'), ('GTX', 'npadvmod'), ('280', 'npadvmod'), (' ', 'npadvmod')]

>> Bigrams: 
[[DBN, [], [[, 32], [32, ]], [],  ], [ , NVIDIA], [NVIDIA, GTX], [GTX, 280], [280,  ]]

>> Trigrams: 
[[DBN, [, 32], [[, 32, ]], [32, ],  ], [],  , NVIDIA], [ , NVIDIA, GTX], [NVIDIA, GTX, 280], [GTX, 280,  ]]

>> Noun Phrases are: 
[DBN]

>> Named Entities are: 
[('32', 'CARDINAL'), ('280', 'CARDINAL')] 


================================ Paragraph 538 =================================

GPU (1 GB RAM)  

------------------- Sentence 1 -------------------

GPU (1 GB RAM)   


>> Tokens are: 
[GPU, (, 1, GB, RAM, ),  ] 

>> PoS Tags are: 
[('GPU', 'PROPN'), ('(', 'PUNCT'), ('1', 'NUM'), ('GB', 'PROPN'), ('RAM', 'PROPN'), (')', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('GPU', 'ROOT'), ('(', 'punct'), ('1', 'nummod'), ('GB', 'compound'), ('RAM', 'appos'), (')', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[GPU, (], [(, 1], [1, GB], [GB, RAM], [RAM, )], [),  ]]

>> Trigrams: 
[[GPU, (, 1], [(, 1, GB], [1, GB, RAM], [GB, RAM, )], [RAM, ),  ]]

>> Noun Phrases are: 
[GPU, (1 GB RAM]

>> Named Entities are: 
[('GPU', 'ORG'), ('1 GB', 'PERCENT'), ('RAM', 'ORG')] 


================================ Paragraph 539 =================================

1million images and  

------------------- Sentence 1 -------------------

1million images and   


>> Tokens are: 
[1million, images,  ] 

>> PoS Tags are: 
[('1million', 'NUM'), ('images', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('1million', 'nummod'), ('images', 'ROOT'), (' ', 'conj')]

>> Bigrams: 
[[1million, images], [images,  ]]

>> Trigrams: 
[[1million, images,  ]]

>> Noun Phrases are: 
[1million images]

>> Named Entities are: 
[('1million', 'CARDINAL')] 


================================ Paragraph 540 =================================

1006 parameters  ~ 1 day  

------------------- Sentence 1 -------------------

1006 parameters  ~ 1 day   


>> Tokens are: 
[1006, parameters,  , ~, 1, day,  ] 

>> PoS Tags are: 
[('1006', 'NUM'), ('parameters', 'NOUN'), (' ', 'SPACE'), ('~', 'PUNCT'), ('1', 'NUM'), ('day', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('1006', 'nummod'), ('parameters', 'ROOT'), (' ', 'appos'), ('~', 'punct'), ('1', 'nummod'), ('day', 'npadvmod'), (' ', 'nummod')]

>> Bigrams: 
[[1006, parameters], [parameters,  ], [ , ~], [~, 1], [1, day], [day,  ]]

>> Trigrams: 
[[1006, parameters,  ], [parameters,  , ~], [ , ~, 1], [~, 1, day], [1, day,  ]]

>> Noun Phrases are: 
[1006 parameters]

>> Named Entities are: 
[('1006', 'DATE'), ('1 day', 'DATE')] 


================================ Paragraph 541 =================================

CNN [33]  Two GTX 580  

------------------- Sentence 1 -------------------

CNN [33]   


>> Tokens are: 
[CNN, [, 33, ],  ] 

>> PoS Tags are: 
[('CNN', 'PROPN'), ('[', 'PUNCT'), ('33', 'NUM'), (']', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('CNN', 'ROOT'), ('[', 'punct'), ('33', 'appos'), (']', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[CNN, [], [[, 33], [33, ]], [],  ]]

>> Trigrams: 
[[CNN, [, 33], [[, 33, ]], [33, ],  ]]

>> Noun Phrases are: 
[CNN]

>> Named Entities are: 
[('CNN', 'ORG'), ('33', 'CARDINAL')] 

------------------- Sentence 2 -------------------

Two GTX 580   


>> Tokens are: 
[GTX, 580,  ] 

>> PoS Tags are: 
[('GTX', 'PROPN'), ('580', 'NUM'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('GTX', 'ROOT'), ('580', 'nummod'), (' ', 'nummod')]

>> Bigrams: 
[[GTX, 580], [580,  ]]

>> Trigrams: 
[[GTX, 580,  ]]

>> Noun Phrases are: 
[Two GTX]

>> Named Entities are: 
[('Two', 'CARDINAL')] 


================================ Paragraph 542 =================================

GPUs( 6 GB RAM)  

------------------- Sentence 1 -------------------

GPUs( 6 GB RAM)   


>> Tokens are: 
[GPUs, (, 6, GB, RAM, ),  ] 

>> PoS Tags are: 
[('GPUs', 'NOUN'), ('(', 'PUNCT'), ('6', 'NUM'), ('GB', 'PROPN'), ('RAM', 'PROPN'), (')', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('GPUs', 'ROOT'), ('(', 'punct'), ('6', 'nummod'), ('GB', 'compound'), ('RAM', 'appos'), (')', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[GPUs, (], [(, 6], [6, GB], [GB, RAM], [RAM, )], [),  ]]

>> Trigrams: 
[[GPUs, (, 6], [(, 6, GB], [6, GB, RAM], [GB, RAM, )], [RAM, ),  ]]

>> Noun Phrases are: 
[GPUs, 6 GB RAM]

>> Named Entities are: 
[('6 GB RAM', 'PERCENT')] 


================================ Paragraph 543 =================================

1.2 million high  resolution (256 × 256)  

------------------- Sentence 1 -------------------

1.2 million high  resolution (256 × 256)   


>> Tokens are: 
[1.2, million, high,  , resolution, (, 256, ×, 256, ),  ] 

>> PoS Tags are: 
[('1.2', 'NUM'), ('million', 'NUM'), ('high', 'ADJ'), (' ', 'SPACE'), ('resolution', 'NOUN'), ('(', 'PUNCT'), ('256', 'NUM'), ('×', 'NOUN'), ('256', 'NUM'), (')', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('1.2', 'compound'), ('million', 'nummod'), ('high', 'amod'), (' ', 'compound'), ('resolution', 'ROOT'), ('(', 'punct'), ('256', 'nummod'), ('×', 'appos'), ('256', 'nummod'), (')', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[1.2, million], [million, high], [high,  ], [ , resolution], [resolution, (], [(, 256], [256, ×], [×, 256], [256, )], [),  ]]

>> Trigrams: 
[[1.2, million, high], [million, high,  ], [high,  , resolution], [ , resolution, (], [resolution, (, 256], [(, 256, ×], [256, ×, 256], [×, 256, )], [256, ),  ]]

>> Noun Phrases are: 
[1.2 million high  resolution, 256 ×]

>> Named Entities are: 
[('1.2 million', 'CARDINAL'), ('256', 'CARDINAL'), ('× 256', 'EVENT')] 


================================ Paragraph 544 =================================

images and 606  

------------------- Sentence 1 -------------------

images and 606   


>> Tokens are: 
[images, 606,  ] 

>> PoS Tags are: 
[('images', 'NOUN'), ('606', 'NUM'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('images', 'ROOT'), ('606', 'nummod'), (' ', 'conj')]

>> Bigrams: 
[[images, 606], [606,  ]]

>> Trigrams: 
[[images, 606,  ]]

>> Noun Phrases are: 
[images]

>> Named Entities are: 
[('606', 'CARDINAL')] 


================================ Paragraph 545 =================================

parameters  

------------------- Sentence 1 -------------------

parameters   


>> Tokens are: 
[parameters,  ] 

>> PoS Tags are: 
[('parameters', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('parameters', 'ROOT'), (' ', 'nummod')]

>> Bigrams: 
[[parameters,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[parameters]

>> Named Entities are: 
[] 


================================ Paragraph 546 =================================

~ 5-6 days  

------------------- Sentence 1 -------------------

~ 


>> Tokens are: 
[~] 

>> PoS Tags are: 
[('~', 'PUNCT')] 

>> Dependency Tags are: 
[('~', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

5-6 days   


>> Tokens are: 
[5, -, 6, days,  ] 

>> PoS Tags are: 
[('5', 'NUM'), ('-', 'SYM'), ('6', 'NUM'), ('days', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('5', 'nummod'), ('-', 'punct'), ('6', 'nummod'), ('days', 'ROOT'), (' ', 'nummod')]

>> Bigrams: 
[[5, -], [-, 6], [6, days], [days,  ]]

>> Trigrams: 
[[5, -, 6], [-, 6, days], [6, days,  ]]

>> Noun Phrases are: 
[5-6 days]

>> Named Entities are: 
[('5-6 days', 'DATE')] 


================================ Paragraph 547 =================================

DisBelief [34]  

------------------- Sentence 1 -------------------

DisBelief 


>> Tokens are: 
[DisBelief] 

>> PoS Tags are: 
[('DisBelief', 'PROPN')] 

>> Dependency Tags are: 
[('DisBelief', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[DisBelief]

>> Named Entities are: 
[('DisBelief', 'ORG')] 

------------------- Sentence 2 -------------------

[34] 


>> Tokens are: 
[[, 34, ]] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('34', 'NUM'), (']', 'PUNCT')] 

>> Dependency Tags are: 
[('[', 'punct'), ('34', 'ROOT'), (']', 'punct')]

>> Bigrams: 
[[[, 34], [34, ]]]

>> Trigrams: 
[[[, 34, ]]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('34', 'CARDINAL')] 

------------------- Sentence 3 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 548 =================================

1000 CPUs with  

------------------- Sentence 1 -------------------

1000 CPUs with   


>> Tokens are: 
[1000, CPUs,  ] 

>> PoS Tags are: 
[('1000', 'NUM'), ('CPUs', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('1000', 'nummod'), ('CPUs', 'ROOT'), (' ', 'pobj')]

>> Bigrams: 
[[1000, CPUs], [CPUs,  ]]

>> Trigrams: 
[[1000, CPUs,  ]]

>> Noun Phrases are: 
[1000 CPUs]

>> Named Entities are: 
[('1000', 'CARDINAL')] 


================================ Paragraph 549 =================================

Downpour SGD with  

------------------- Sentence 1 -------------------

Downpour SGD with   


>> Tokens are: 
[Downpour, SGD,  ] 

>> PoS Tags are: 
[('Downpour', 'NOUN'), ('SGD', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Downpour', 'compound'), ('SGD', 'ROOT'), (' ', 'pobj')]

>> Bigrams: 
[[Downpour, SGD], [SGD,  ]]

>> Trigrams: 
[[Downpour, SGD,  ]]

>> Noun Phrases are: 
[Downpour SGD]

>> Named Entities are: 
[] 


================================ Paragraph 550 =================================

Adagrad  

------------------- Sentence 1 -------------------

Adagrad   


>> Tokens are: 
[Adagrad,  ] 

>> PoS Tags are: 
[('Adagrad', 'ADJ'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Adagrad', 'amod'), (' ', 'ROOT')]

>> Bigrams: 
[[Adagrad,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('Adagrad', 'PERSON')] 


================================ Paragraph 551 =================================

1.1 billion audio  

------------------- Sentence 1 -------------------

1.1 billion audio   


>> Tokens are: 
[1.1, billion, audio,  ] 

>> PoS Tags are: 
[('1.1', 'NUM'), ('billion', 'NUM'), ('audio', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('1.1', 'compound'), ('billion', 'nummod'), ('audio', 'amod'), (' ', 'ROOT')]

>> Bigrams: 
[[1.1, billion], [billion, audio], [audio,  ]]

>> Trigrams: 
[[1.1, billion, audio], [billion, audio,  ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('1.1 billion', 'CARDINAL')] 


================================ Paragraph 552 =================================

examples with 42 million  

------------------- Sentence 1 -------------------

examples with 42 million   


>> Tokens are: 
[examples, 42, million,  ] 

>> PoS Tags are: 
[('examples', 'NOUN'), ('42', 'NUM'), ('million', 'NUM'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('examples', 'ROOT'), ('42', 'compound'), ('million', 'nummod'), (' ', 'pobj')]

>> Bigrams: 
[[examples, 42], [42, million], [million,  ]]

>> Trigrams: 
[[examples, 42, million], [42, million,  ]]

>> Noun Phrases are: 
[examples]

>> Named Entities are: 
[('42 million', 'CARDINAL')] 


================================ Paragraph 553 =================================

parameters  

------------------- Sentence 1 -------------------

parameters   


>> Tokens are: 
[parameters,  ] 

>> PoS Tags are: 
[('parameters', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('parameters', 'ROOT'), (' ', 'nummod')]

>> Bigrams: 
[[parameters,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[parameters]

>> Named Entities are: 
[] 


================================ Paragraph 554 =================================

~ 16 hours  

------------------- Sentence 1 -------------------

~ 


>> Tokens are: 
[~] 

>> PoS Tags are: 
[('~', 'PUNCT')] 

>> Dependency Tags are: 
[('~', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

16 hours   


>> Tokens are: 
[16, hours,  ] 

>> PoS Tags are: 
[('16', 'NUM'), ('hours', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('16', 'nummod'), ('hours', 'npadvmod'), (' ', 'ROOT')]

>> Bigrams: 
[[16, hours], [hours,  ]]

>> Trigrams: 
[[16, hours,  ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('16 hours', 'TIME')] 


================================ Paragraph 555 =================================

Sparse  Autoencoder  

------------------- Sentence 1 -------------------

Sparse   


>> Tokens are: 
[Sparse,  ] 

>> PoS Tags are: 
[('Sparse', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Sparse', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[Sparse,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Sparse]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Autoencoder   


>> Tokens are: 
[Autoencoder,  ] 

>> PoS Tags are: 
[('Autoencoder', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Autoencoder', 'ROOT'), (' ', 'nummod')]

>> Bigrams: 
[[Autoencoder,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Autoencoder]

>> Named Entities are: 
[] 


================================ Paragraph 556 =================================

[35]  

------------------- Sentence 1 -------------------

[35] 


>> Tokens are: 
[[, 35, ]] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('35', 'NUM'), (']', 'PUNCT')] 

>> Dependency Tags are: 
[('[', 'punct'), ('35', 'ROOT'), (']', 'punct')]

>> Bigrams: 
[[[, 35], [35, ]]]

>> Trigrams: 
[[[, 35, ]]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('35', 'CARDINAL')] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 557 =================================

1000 CPUs with  

------------------- Sentence 1 -------------------

1000 CPUs with   


>> Tokens are: 
[1000, CPUs,  ] 

>> PoS Tags are: 
[('1000', 'NUM'), ('CPUs', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('1000', 'nummod'), ('CPUs', 'ROOT'), (' ', 'pobj')]

>> Bigrams: 
[[1000, CPUs], [CPUs,  ]]

>> Trigrams: 
[[1000, CPUs,  ]]

>> Noun Phrases are: 
[1000 CPUs]

>> Named Entities are: 
[('1000', 'CARDINAL')] 


================================ Paragraph 558 =================================

16,000 core  

------------------- Sentence 1 -------------------

16,000 core   


>> Tokens are: 
[16,000, core,  ] 

>> PoS Tags are: 
[('16,000', 'NUM'), ('core', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('16,000', 'nummod'), ('core', 'ROOT'), (' ', 'appos')]

>> Bigrams: 
[[16,000, core], [core,  ]]

>> Trigrams: 
[[16,000, core,  ]]

>> Noun Phrases are: 
[16,000 core]

>> Named Entities are: 
[] 


================================ Paragraph 559 =================================

10 million (200 × 200 )  Images and 1 billion  

------------------- Sentence 1 -------------------

10 million (200 × 200 )   


>> Tokens are: 
[10, million, (, 200, ×, 200, ),  ] 

>> PoS Tags are: 
[('10', 'NUM'), ('million', 'NUM'), ('(', 'PUNCT'), ('200', 'NUM'), ('×', 'NOUN'), ('200', 'NUM'), (')', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('10', 'compound'), ('million', 'ROOT'), ('(', 'punct'), ('200', 'nummod'), ('×', 'appos'), ('200', 'nummod'), (')', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[10, million], [million, (], [(, 200], [200, ×], [×, 200], [200, )], [),  ]]

>> Trigrams: 
[[10, million, (], [million, (, 200], [(, 200, ×], [200, ×, 200], [×, 200, )], [200, ),  ]]

>> Noun Phrases are: 
[200 ×]

>> Named Entities are: 
[('10 million', 'CARDINAL'), ('200', 'CARDINAL')] 

------------------- Sentence 2 -------------------

Images and 1 billion   


>> Tokens are: 
[Images, 1, billion,  ] 

>> PoS Tags are: 
[('Images', 'PROPN'), ('1', 'NUM'), ('billion', 'NUM'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Images', 'ROOT'), ('1', 'compound'), ('billion', 'nummod'), (' ', 'conj')]

>> Bigrams: 
[[Images, 1], [1, billion], [billion,  ]]

>> Trigrams: 
[[Images, 1, billion], [1, billion,  ]]

>> Noun Phrases are: 
[Images]

>> Named Entities are: 
[('Images', 'GPE'), ('1 billion', 'CARDINAL')] 


================================ Paragraph 560 =================================

parameters  

------------------- Sentence 1 -------------------

parameters   


>> Tokens are: 
[parameters,  ] 

>> PoS Tags are: 
[('parameters', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('parameters', 'ROOT'), (' ', 'nummod')]

>> Bigrams: 
[[parameters,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[parameters]

>> Named Entities are: 
[] 


================================ Paragraph 561 =================================

~ 3Days  

------------------- Sentence 1 -------------------

~ 3Days   


>> Tokens are: 
[~, 3Days,  ] 

>> PoS Tags are: 
[('~', 'PUNCT'), ('3Days', 'ADV'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('~', 'punct'), ('3Days', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[~, 3Days], [3Days,  ]]

>> Trigrams: 
[[~, 3Days,  ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('3Days', 'DATE')] 


================================ Paragraph 562 =================================

COTS HPC  

------------------- Sentence 1 -------------------

COTS HPC   


>> Tokens are: 
[COTS, HPC,  ] 

>> PoS Tags are: 
[('COTS', 'PROPN'), ('HPC', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('COTS', 'compound'), ('HPC', 'ROOT'), (' ', 'appos')]

>> Bigrams: 
[[COTS, HPC], [HPC,  ]]

>> Trigrams: 
[[COTS, HPC,  ]]

>> Noun Phrases are: 
[COTS HPC]

>> Named Entities are: 
[('COTS HPC', 'PRODUCT')] 


================================ Paragraph 563 =================================

[36]  

------------------- Sentence 1 -------------------

[36]   


>> Tokens are: 
[[, 36, ],  ] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('36', 'NUM'), (']', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('[', 'punct'), ('36', 'nummod'), (']', 'punct'), (' ', 'ROOT')]

>> Bigrams: 
[[[, 36], [36, ]], [],  ]]

>> Trigrams: 
[[[, 36, ]], [36, ],  ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('36', 'CARDINAL')] 


================================ Paragraph 564 =================================

64 NVIDIA GTX  680 GPUs  

------------------- Sentence 1 -------------------

64 NVIDIA GTX  680 GPUs   


>> Tokens are: 
[64, NVIDIA, GTX,  , 680, GPUs,  ] 

>> PoS Tags are: 
[('64', 'NUM'), ('NVIDIA', 'PROPN'), ('GTX', 'PROPN'), (' ', 'SPACE'), ('680', 'NUM'), ('GPUs', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('64', 'nummod'), ('NVIDIA', 'compound'), ('GTX', 'ROOT'), (' ', 'acl'), ('680', 'nummod'), ('GPUs', 'dobj'), (' ', 'appos')]

>> Bigrams: 
[[64, NVIDIA], [NVIDIA, GTX], [GTX,  ], [ , 680], [680, GPUs], [GPUs,  ]]

>> Trigrams: 
[[64, NVIDIA, GTX], [NVIDIA, GTX,  ], [GTX,  , 680], [ , 680, GPUs], [680, GPUs,  ]]

>> Noun Phrases are: 
[64 NVIDIA GTX, 680 GPUs]

>> Named Entities are: 
[('64', 'CARDINAL'), ('680', 'CARDINAL')] 


================================ Paragraph 565 =================================

(256 GB RAM)  

------------------- Sentence 1 -------------------

(256 GB RAM)   


>> Tokens are: 
[(, 256, GB, RAM, ),  ] 

>> PoS Tags are: 
[('(', 'PUNCT'), ('256', 'NUM'), ('GB', 'PROPN'), ('RAM', 'PROPN'), (')', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('(', 'punct'), ('256', 'nummod'), ('GB', 'compound'), ('RAM', 'ROOT'), (')', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[(, 256], [256, GB], [GB, RAM], [RAM, )], [),  ]]

>> Trigrams: 
[[(, 256, GB], [256, GB, RAM], [GB, RAM, )], [RAM, ),  ]]

>> Noun Phrases are: 
[(256 GB RAM]

>> Named Entities are: 
[('256', 'CARDINAL')] 


================================ Paragraph 566 =================================

10 million (200 × 200 )  Images and 11 billion  

------------------- Sentence 1 -------------------

10 million (200 × 200 )   


>> Tokens are: 
[10, million, (, 200, ×, 200, ),  ] 

>> PoS Tags are: 
[('10', 'NUM'), ('million', 'NUM'), ('(', 'PUNCT'), ('200', 'NUM'), ('×', 'NOUN'), ('200', 'NUM'), (')', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('10', 'compound'), ('million', 'ROOT'), ('(', 'punct'), ('200', 'nummod'), ('×', 'appos'), ('200', 'nummod'), (')', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[10, million], [million, (], [(, 200], [200, ×], [×, 200], [200, )], [),  ]]

>> Trigrams: 
[[10, million, (], [million, (, 200], [(, 200, ×], [200, ×, 200], [×, 200, )], [200, ),  ]]

>> Noun Phrases are: 
[200 ×]

>> Named Entities are: 
[('10 million', 'CARDINAL'), ('200', 'CARDINAL')] 

------------------- Sentence 2 -------------------

Images and 11 billion   


>> Tokens are: 
[Images, 11, billion,  ] 

>> PoS Tags are: 
[('Images', 'PROPN'), ('11', 'NUM'), ('billion', 'NUM'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Images', 'ROOT'), ('11', 'compound'), ('billion', 'nummod'), (' ', 'conj')]

>> Bigrams: 
[[Images, 11], [11, billion], [billion,  ]]

>> Trigrams: 
[[Images, 11, billion], [11, billion,  ]]

>> Noun Phrases are: 
[Images]

>> Named Entities are: 
[('Images', 'GPE'), ('11 billion', 'CARDINAL')] 


================================ Paragraph 567 =================================

parameters  

------------------- Sentence 1 -------------------

parameters   


>> Tokens are: 
[parameters,  ] 

>> PoS Tags are: 
[('parameters', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('parameters', 'ROOT'), (' ', 'nummod')]

>> Bigrams: 
[[parameters,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[parameters]

>> Named Entities are: 
[] 


================================ Paragraph 568 =================================

~ 3Days  

------------------- Sentence 1 -------------------

~ 3Days   


>> Tokens are: 
[~, 3Days,  ] 

>> PoS Tags are: 
[('~', 'PUNCT'), ('3Days', 'ADV'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('~', 'punct'), ('3Days', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[~, 3Days], [3Days,  ]]

>> Trigrams: 
[[~, 3Days,  ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('3Days', 'DATE')] 


================================ Paragraph 569 =================================

The Table.4 summarizes the current progress in deep  

------------------- Sentence 1 -------------------

The Table.4 summarizes the current progress in deep   


>> Tokens are: 
[Table.4, summarizes, current, progress, deep,  ] 

>> PoS Tags are: 
[('Table.4', 'NOUN'), ('summarizes', 'VERB'), ('current', 'ADJ'), ('progress', 'NOUN'), ('deep', 'ADJ'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Table.4', 'nsubj'), ('summarizes', 'ROOT'), ('current', 'amod'), ('progress', 'dobj'), ('deep', 'amod'), (' ', 'pobj')]

>> Bigrams: 
[[Table.4, summarizes], [summarizes, current], [current, progress], [progress, deep], [deep,  ]]

>> Trigrams: 
[[Table.4, summarizes, current], [summarizes, current, progress], [current, progress, deep], [progress, deep,  ]]

>> Noun Phrases are: 
[The Table.4, the current progress]

>> Named Entities are: 
[] 


================================ Paragraph 570 =================================

learning algorithms. It has been observed that different deep  

------------------- Sentence 1 -------------------

learning algorithms. 


>> Tokens are: 
[learning, algorithms, .] 

>> PoS Tags are: 
[('learning', 'VERB'), ('algorithms', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('learning', 'ROOT'), ('algorithms', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[learning, algorithms], [algorithms, .]]

>> Trigrams: 
[[learning, algorithms, .]]

>> Noun Phrases are: 
[algorithms]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

It has been observed that different deep   


>> Tokens are: 
[observed, different, deep,  ] 

>> PoS Tags are: 
[('observed', 'VERB'), ('different', 'ADJ'), ('deep', 'ADJ'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('observed', 'ROOT'), ('different', 'amod'), ('deep', 'amod'), (' ', 'punct')]

>> Bigrams: 
[[observed, different], [different, deep], [deep,  ]]

>> Trigrams: 
[[observed, different, deep], [different, deep,  ]]

>> Noun Phrases are: 
[It]

>> Named Entities are: 
[] 


================================ Paragraph 571 =================================

learning technologies [32-36] required huge computational  

------------------- Sentence 1 -------------------

learning technologies [32-36] required huge computational   


>> Tokens are: 
[learning, technologies, [, 32, -, 36, ], required, huge, computational,  ] 

>> PoS Tags are: 
[('learning', 'VERB'), ('technologies', 'NOUN'), ('[', 'PUNCT'), ('32', 'NUM'), ('-', 'SYM'), ('36', 'NUM'), (']', 'PUNCT'), ('required', 'VERB'), ('huge', 'ADJ'), ('computational', 'ADJ'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('learning', 'csubj'), ('technologies', 'dobj'), ('[', 'punct'), ('32', 'appos'), ('-', 'punct'), ('36', 'prep'), (']', 'punct'), ('required', 'ROOT'), ('huge', 'amod'), ('computational', 'amod'), (' ', 'dobj')]

>> Bigrams: 
[[learning, technologies], [technologies, [], [[, 32], [32, -], [-, 36], [36, ]], [], required], [required, huge], [huge, computational], [computational,  ]]

>> Trigrams: 
[[learning, technologies, [], [technologies, [, 32], [[, 32, -], [32, -, 36], [-, 36, ]], [36, ], required], [], required, huge], [required, huge, computational], [huge, computational,  ]]

>> Noun Phrases are: 
[technologies]

>> Named Entities are: 
[('32-36', 'CARDINAL')] 


================================ Paragraph 572 =================================

resources to achieve significant results.  

------------------- Sentence 1 -------------------

resources to achieve significant results. 


>> Tokens are: 
[resources, achieve, significant, results, .] 

>> PoS Tags are: 
[('resources', 'NOUN'), ('achieve', 'VERB'), ('significant', 'ADJ'), ('results', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('resources', 'ROOT'), ('achieve', 'acl'), ('significant', 'amod'), ('results', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[resources, achieve], [achieve, significant], [significant, results], [results, .]]

>> Trigrams: 
[[resources, achieve, significant], [achieve, significant, results], [significant, results, .]]

>> Noun Phrases are: 
[resources, significant results]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 573 =================================

8. CONCLUSION  

------------------- Sentence 1 -------------------

8. 


>> Tokens are: 
[8, .] 

>> PoS Tags are: 
[('8', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('8', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[8, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('8', 'CARDINAL')] 

------------------- Sentence 2 -------------------

CONCLUSION   


>> Tokens are: 
[CONCLUSION,  ] 

>> PoS Tags are: 
[('CONCLUSION', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('CONCLUSION', 'ROOT'), (' ', 'nummod')]

>> Bigrams: 
[[CONCLUSION,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[CONCLUSION]

>> Named Entities are: 
[] 


================================ Paragraph 574 =================================

Supervised machine learning methods are being applied in  

------------------- Sentence 1 -------------------

Supervised machine learning methods are being applied in   


>> Tokens are: 
[Supervised, machine, learning, methods, applied,  ] 

>> PoS Tags are: 
[('Supervised', 'ADJ'), ('machine', 'NOUN'), ('learning', 'VERB'), ('methods', 'NOUN'), ('applied', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Supervised', 'amod'), ('machine', 'compound'), ('learning', 'compound'), ('methods', 'nsubjpass'), ('applied', 'ROOT'), (' ', 'pobj')]

>> Bigrams: 
[[Supervised, machine], [machine, learning], [learning, methods], [methods, applied], [applied,  ]]

>> Trigrams: 
[[Supervised, machine, learning], [machine, learning, methods], [learning, methods, applied], [methods, applied,  ]]

>> Noun Phrases are: 
[Supervised machine learning methods]

>> Named Entities are: 
[] 


================================ Paragraph 575 =================================

different domains. Due to scope of this paper, it is very difficult to  

------------------- Sentence 1 -------------------

different domains. 


>> Tokens are: 
[different, domains, .] 

>> PoS Tags are: 
[('different', 'ADJ'), ('domains', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('different', 'amod'), ('domains', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[different, domains], [domains, .]]

>> Trigrams: 
[[different, domains, .]]

>> Noun Phrases are: 
[different domains]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Due to scope of this paper, it is very difficult to   


>> Tokens are: 
[scope, paper, ,, difficult,  ] 

>> PoS Tags are: 
[('scope', 'NOUN'), ('paper', 'NOUN'), (',', 'PUNCT'), ('difficult', 'ADJ'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('scope', 'pobj'), ('paper', 'pobj'), (',', 'punct'), ('difficult', 'acomp'), (' ', 'pobj')]

>> Bigrams: 
[[scope, paper], [paper, ,], [,, difficult], [difficult,  ]]

>> Trigrams: 
[[scope, paper, ,], [paper, ,, difficult], [,, difficult,  ]]

>> Noun Phrases are: 
[scope, this paper, it]

>> Named Entities are: 
[] 


================================ Paragraph 576 =================================

discuss the strength and weaknesses of each algorithm of ML. The  

------------------- Sentence 1 -------------------

discuss the strength and weaknesses of each algorithm of ML. 


>> Tokens are: 
[discuss, strength, weaknesses, algorithm, ML, .] 

>> PoS Tags are: 
[('discuss', 'VERB'), ('strength', 'NOUN'), ('weaknesses', 'NOUN'), ('algorithm', 'NOUN'), ('ML', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('discuss', 'ROOT'), ('strength', 'dobj'), ('weaknesses', 'conj'), ('algorithm', 'pobj'), ('ML', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[discuss, strength], [strength, weaknesses], [weaknesses, algorithm], [algorithm, ML], [ML, .]]

>> Trigrams: 
[[discuss, strength, weaknesses], [strength, weaknesses, algorithm], [weaknesses, algorithm, ML], [algorithm, ML, .]]

>> Noun Phrases are: 
[the strength, weaknesses, each algorithm, ML]

>> Named Entities are: 
[('ML', 'ORG')] 

------------------- Sentence 2 -------------------

The   


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 577 =================================

selection of algorithm in ML is mainly depends on task nature. The  

------------------- Sentence 1 -------------------

selection of algorithm in ML is mainly depends on task nature. 


>> Tokens are: 
[selection, algorithm, ML, mainly, depends, task, nature, .] 

>> PoS Tags are: 
[('selection', 'NOUN'), ('algorithm', 'NOUN'), ('ML', 'PROPN'), ('mainly', 'ADV'), ('depends', 'VERB'), ('task', 'NOUN'), ('nature', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('selection', 'nsubj'), ('algorithm', 'pobj'), ('ML', 'pobj'), ('mainly', 'advmod'), ('depends', 'conj'), ('task', 'compound'), ('nature', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[selection, algorithm], [algorithm, ML], [ML, mainly], [mainly, depends], [depends, task], [task, nature], [nature, .]]

>> Trigrams: 
[[selection, algorithm, ML], [algorithm, ML, mainly], [ML, mainly, depends], [mainly, depends, task], [depends, task, nature], [task, nature, .]]

>> Noun Phrases are: 
[selection, algorithm, ML, task nature]

>> Named Entities are: 
[('ML', 'ORG')] 

------------------- Sentence 2 -------------------

The   


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 578 =================================

performance of SVM and Neural Networks is better when dealing  

------------------- Sentence 1 -------------------

performance of SVM and Neural Networks is better when dealing   


>> Tokens are: 
[performance, SVM, Neural, Networks, better, dealing,  ] 

>> PoS Tags are: 
[('performance', 'NOUN'), ('SVM', 'PROPN'), ('Neural', 'PROPN'), ('Networks', 'PROPN'), ('better', 'ADJ'), ('dealing', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('performance', 'nsubj'), ('SVM', 'pobj'), ('Neural', 'compound'), ('Networks', 'conj'), ('better', 'acomp'), ('dealing', 'advcl'), (' ', 'dobj')]

>> Bigrams: 
[[performance, SVM], [SVM, Neural], [Neural, Networks], [Networks, better], [better, dealing], [dealing,  ]]

>> Trigrams: 
[[performance, SVM, Neural], [SVM, Neural, Networks], [Neural, Networks, better], [Networks, better, dealing], [better, dealing,  ]]

>> Noun Phrases are: 
[performance, SVM, Neural Networks]

>> Named Entities are: 
[('SVM', 'ORG'), ('Neural Networks', 'ORG')] 


================================ Paragraph 579 =================================

with multidimensions and continuous features. While logic-based  

------------------- Sentence 1 -------------------

with multidimensions and continuous features. 


>> Tokens are: 
[multidimensions, continuous, features, .] 

>> PoS Tags are: 
[('multidimensions', 'NOUN'), ('continuous', 'ADJ'), ('features', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('multidimensions', 'pobj'), ('continuous', 'amod'), ('features', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[multidimensions, continuous], [continuous, features], [features, .]]

>> Trigrams: 
[[multidimensions, continuous, features], [continuous, features, .]]

>> Noun Phrases are: 
[multidimensions, continuous features]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

While logic-based   


>> Tokens are: 
[logic, -, based,  ] 

>> PoS Tags are: 
[('logic', 'NOUN'), ('-', 'PUNCT'), ('based', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('logic', 'npadvmod'), ('-', 'punct'), ('based', 'amod'), (' ', 'ROOT')]

>> Bigrams: 
[[logic, -], [-, based], [based,  ]]

>> Trigrams: 
[[logic, -, based], [-, based,  ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 580 =================================

systems tend to perform better when dealing with  

------------------- Sentence 1 -------------------

systems tend to perform better when dealing with   


>> Tokens are: 
[systems, tend, perform, better, dealing,  ] 

>> PoS Tags are: 
[('systems', 'NOUN'), ('tend', 'VERB'), ('perform', 'VERB'), ('better', 'ADV'), ('dealing', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('systems', 'nsubj'), ('tend', 'ROOT'), ('perform', 'xcomp'), ('better', 'advmod'), ('dealing', 'advcl'), (' ', 'pobj')]

>> Bigrams: 
[[systems, tend], [tend, perform], [perform, better], [better, dealing], [dealing,  ]]

>> Trigrams: 
[[systems, tend, perform], [tend, perform, better], [perform, better, dealing], [better, dealing,  ]]

>> Noun Phrases are: 
[systems]

>> Named Entities are: 
[] 


================================ Paragraph 581 =================================

discrete/categorical features. For neural network models and SVMs,  

------------------- Sentence 1 -------------------

discrete/categorical features. 


>> Tokens are: 
[discrete, /, categorical, features, .] 

>> PoS Tags are: 
[('discrete', 'ADJ'), ('/', 'SYM'), ('categorical', 'ADJ'), ('features', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('discrete', 'amod'), ('/', 'punct'), ('categorical', 'amod'), ('features', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[discrete, /], [/, categorical], [categorical, features], [features, .]]

>> Trigrams: 
[[discrete, /, categorical], [/, categorical, features], [categorical, features, .]]

>> Noun Phrases are: 
[discrete/categorical features]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

For neural network models and SVMs,   


>> Tokens are: 
[neural, network, models, SVMs, ,,  ] 

>> PoS Tags are: 
[('neural', 'ADJ'), ('network', 'NOUN'), ('models', 'NOUN'), ('SVMs', 'PROPN'), (',', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('neural', 'amod'), ('network', 'compound'), ('models', 'pobj'), ('SVMs', 'conj'), (',', 'punct'), (' ', 'pobj')]

>> Bigrams: 
[[neural, network], [network, models], [models, SVMs], [SVMs, ,], [,,  ]]

>> Trigrams: 
[[neural, network, models], [network, models, SVMs], [models, SVMs, ,], [SVMs, ,,  ]]

>> Noun Phrases are: 
[neural network models, SVMs]

>> Named Entities are: 
[] 


================================ Paragraph 582 =================================

a large sample size is required in order to achieve its maximum  

------------------- Sentence 1 -------------------

a large sample size is required in order to achieve its maximum   


>> Tokens are: 
[large, sample, size, required, order, achieve, maximum,  ] 

>> PoS Tags are: 
[('large', 'ADJ'), ('sample', 'NOUN'), ('size', 'NOUN'), ('required', 'VERB'), ('order', 'NOUN'), ('achieve', 'VERB'), ('maximum', 'ADJ'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('large', 'amod'), ('sample', 'compound'), ('size', 'nsubjpass'), ('required', 'ROOT'), ('order', 'pobj'), ('achieve', 'acl'), ('maximum', 'amod'), (' ', 'dobj')]

>> Bigrams: 
[[large, sample], [sample, size], [size, required], [required, order], [order, achieve], [achieve, maximum], [maximum,  ]]

>> Trigrams: 
[[large, sample, size], [sample, size, required], [size, required, order], [required, order, achieve], [order, achieve, maximum], [achieve, maximum,  ]]

>> Noun Phrases are: 
[a large sample size, order]

>> Named Entities are: 
[] 


================================ Paragraph 583 =================================

prediction accuracy whereas NB may need a relatively small  

------------------- Sentence 1 -------------------

prediction accuracy whereas NB may need a relatively small   


>> Tokens are: 
[prediction, accuracy, NB, need, relatively, small,  ] 

>> PoS Tags are: 
[('prediction', 'NOUN'), ('accuracy', 'NOUN'), ('NB', 'PROPN'), ('need', 'VERB'), ('relatively', 'ADV'), ('small', 'ADJ'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('prediction', 'compound'), ('accuracy', 'nsubj'), ('NB', 'nsubj'), ('need', 'ROOT'), ('relatively', 'advmod'), ('small', 'amod'), (' ', 'dobj')]

>> Bigrams: 
[[prediction, accuracy], [accuracy, NB], [NB, need], [need, relatively], [relatively, small], [small,  ]]

>> Trigrams: 
[[prediction, accuracy, NB], [accuracy, NB, need], [NB, need, relatively], [need, relatively, small], [relatively, small,  ]]

>> Noun Phrases are: 
[prediction accuracy, NB]

>> Named Entities are: 
[('NB', 'ORG')] 


================================ Paragraph 584 =================================

dataset. For the last few years deep learning is becoming a  

------------------- Sentence 1 -------------------

dataset. 


>> Tokens are: 
[dataset, .] 

>> PoS Tags are: 
[('dataset', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('dataset', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[dataset, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

For the last few years deep learning is becoming a   


>> Tokens are: 
[years, deep, learning,  ] 

>> PoS Tags are: 
[('years', 'NOUN'), ('deep', 'ADJ'), ('learning', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('years', 'pobj'), ('deep', 'amod'), ('learning', 'nsubj'), (' ', 'attr')]

>> Bigrams: 
[[years, deep], [deep, learning], [learning,  ]]

>> Trigrams: 
[[years, deep, learning], [deep, learning,  ]]

>> Noun Phrases are: 
[the last few years, deep learning]

>> Named Entities are: 
[('the last few years', 'DATE')] 


================================ Paragraph 585 =================================

mainstream technology for variety of application domains, like face  

------------------- Sentence 1 -------------------

mainstream technology for variety of application domains, like face   


>> Tokens are: 
[mainstream, technology, variety, application, domains, ,, like, face,  ] 

>> PoS Tags are: 
[('mainstream', 'ADJ'), ('technology', 'NOUN'), ('variety', 'NOUN'), ('application', 'NOUN'), ('domains', 'NOUN'), (',', 'PUNCT'), ('like', 'ADP'), ('face', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('mainstream', 'amod'), ('technology', 'ROOT'), ('variety', 'pobj'), ('application', 'compound'), ('domains', 'pobj'), (',', 'punct'), ('like', 'prep'), ('face', 'pcomp'), (' ', 'appos')]

>> Bigrams: 
[[mainstream, technology], [technology, variety], [variety, application], [application, domains], [domains, ,], [,, like], [like, face], [face,  ]]

>> Trigrams: 
[[mainstream, technology, variety], [technology, variety, application], [variety, application, domains], [application, domains, ,], [domains, ,, like], [,, like, face], [like, face,  ]]

>> Noun Phrases are: 
[mainstream technology, variety, application domains, face]

>> Named Entities are: 
[] 


================================ Paragraph 586 =================================

detection, speech recognition and detection, object recognition,  

------------------- Sentence 1 -------------------

detection, speech recognition and detection, object recognition,   


>> Tokens are: 
[detection, ,, speech, recognition, detection, ,, object, recognition, ,,  ] 

>> PoS Tags are: 
[('detection', 'NOUN'), (',', 'PUNCT'), ('speech', 'NOUN'), ('recognition', 'NOUN'), ('detection', 'NOUN'), (',', 'PUNCT'), ('object', 'NOUN'), ('recognition', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('detection', 'ROOT'), (',', 'punct'), ('speech', 'compound'), ('recognition', 'conj'), ('detection', 'conj'), (',', 'punct'), ('object', 'compound'), ('recognition', 'conj'), (',', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[detection, ,], [,, speech], [speech, recognition], [recognition, detection], [detection, ,], [,, object], [object, recognition], [recognition, ,], [,,  ]]

>> Trigrams: 
[[detection, ,, speech], [,, speech, recognition], [speech, recognition, detection], [recognition, detection, ,], [detection, ,, object], [,, object, recognition], [object, recognition, ,], [recognition, ,,  ]]

>> Noun Phrases are: 
[detection, speech recognition, detection, object recognition]

>> Named Entities are: 
[] 


================================ Paragraph 587 =================================

natural language processing and robotics. We believe that the  

------------------- Sentence 1 -------------------

natural language processing and robotics. 


>> Tokens are: 
[natural, language, processing, robotics, .] 

>> PoS Tags are: 
[('natural', 'ADJ'), ('language', 'NOUN'), ('processing', 'NOUN'), ('robotics', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('natural', 'amod'), ('language', 'compound'), ('processing', 'ROOT'), ('robotics', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[natural, language], [language, processing], [processing, robotics], [robotics, .]]

>> Trigrams: 
[[natural, language, processing], [language, processing, robotics], [processing, robotics, .]]

>> Noun Phrases are: 
[natural language processing, robotics]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

We believe that the   


>> Tokens are: 
[believe,  ] 

>> PoS Tags are: 
[('believe', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('believe', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[believe,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[We]

>> Named Entities are: 
[] 


================================ Paragraph 588 =================================

challenges posed by big data will bring ample opportunities for ML  

------------------- Sentence 1 -------------------

challenges posed by big data will bring ample opportunities for ML   


>> Tokens are: 
[challenges, posed, big, data, bring, ample, opportunities, ML,  ] 

>> PoS Tags are: 
[('challenges', 'NOUN'), ('posed', 'VERB'), ('big', 'ADJ'), ('data', 'NOUN'), ('bring', 'VERB'), ('ample', 'ADJ'), ('opportunities', 'NOUN'), ('ML', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('challenges', 'nsubj'), ('posed', 'acl'), ('big', 'amod'), ('data', 'pobj'), ('bring', 'ROOT'), ('ample', 'amod'), ('opportunities', 'dobj'), ('ML', 'compound'), (' ', 'pobj')]

>> Bigrams: 
[[challenges, posed], [posed, big], [big, data], [data, bring], [bring, ample], [ample, opportunities], [opportunities, ML], [ML,  ]]

>> Trigrams: 
[[challenges, posed, big], [posed, big, data], [big, data, bring], [data, bring, ample], [bring, ample, opportunities], [ample, opportunities, ML], [opportunities, ML,  ]]

>> Noun Phrases are: 
[challenges, big data, ample opportunities]

>> Named Entities are: 
[('ML', 'ORG')] 


================================ Paragraph 589 =================================

algorithms and especially to deep learning methods.   

------------------- Sentence 1 -------------------

algorithms and especially to deep learning methods. 


>> Tokens are: 
[algorithms, especially, deep, learning, methods, .] 

>> PoS Tags are: 
[('algorithms', 'NOUN'), ('especially', 'ADV'), ('deep', 'ADJ'), ('learning', 'NOUN'), ('methods', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('algorithms', 'ROOT'), ('especially', 'advmod'), ('deep', 'amod'), ('learning', 'compound'), ('methods', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[algorithms, especially], [especially, deep], [deep, learning], [learning, methods], [methods, .]]

>> Trigrams: 
[[algorithms, especially, deep], [especially, deep, learning], [deep, learning, methods], [learning, methods, .]]

>> Noun Phrases are: 
[algorithms, deep learning methods]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 590 =================================

ACKNOWLEDGEMENT  

------------------- Sentence 1 -------------------

ACKNOWLEDGEMENT   


>> Tokens are: 
[ACKNOWLEDGEMENT,  ] 

>> PoS Tags are: 
[('ACKNOWLEDGEMENT', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('ACKNOWLEDGEMENT', 'ROOT'), (' ', 'nummod')]

>> Bigrams: 
[[ACKNOWLEDGEMENT,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[ACKNOWLEDGEMENT]

>> Named Entities are: 
[] 


================================ Paragraph 591 =================================

I would like to express my gratitude to my teacher, Dr. Wang  

------------------- Sentence 1 -------------------

I would like to express my gratitude to my teacher, Dr. Wang   


>> Tokens are: 
[like, express, gratitude, teacher, ,, Dr., Wang,  ] 

>> PoS Tags are: 
[('like', 'VERB'), ('express', 'VERB'), ('gratitude', 'NOUN'), ('teacher', 'NOUN'), (',', 'PUNCT'), ('Dr.', 'PROPN'), ('Wang', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('like', 'ROOT'), ('express', 'xcomp'), ('gratitude', 'dobj'), ('teacher', 'pobj'), (',', 'punct'), ('Dr.', 'compound'), ('Wang', 'appos'), (' ', 'punct')]

>> Bigrams: 
[[like, express], [express, gratitude], [gratitude, teacher], [teacher, ,], [,, Dr.], [Dr., Wang], [Wang,  ]]

>> Trigrams: 
[[like, express, gratitude], [express, gratitude, teacher], [gratitude, teacher, ,], [teacher, ,, Dr.], [,, Dr., Wang], [Dr., Wang,  ]]

>> Noun Phrases are: 
[I, my gratitude, my teacher, Dr. Wang]

>> Named Entities are: 
[('Wang', 'PERSON')] 


================================ Paragraph 592 =================================

Hongjun, whose expertise and guidance added considerably to  

------------------- Sentence 1 -------------------

Hongjun, whose expertise and guidance added considerably to   


>> Tokens are: 
[Hongjun, ,, expertise, guidance, added, considerably,  ] 

>> PoS Tags are: 
[('Hongjun', 'PROPN'), (',', 'PUNCT'), ('expertise', 'NOUN'), ('guidance', 'NOUN'), ('added', 'VERB'), ('considerably', 'ADV'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Hongjun', 'ROOT'), (',', 'punct'), ('expertise', 'nsubj'), ('guidance', 'conj'), ('added', 'relcl'), ('considerably', 'advmod'), (' ', 'pobj')]

>> Bigrams: 
[[Hongjun, ,], [,, expertise], [expertise, guidance], [guidance, added], [added, considerably], [considerably,  ]]

>> Trigrams: 
[[Hongjun, ,, expertise], [,, expertise, guidance], [expertise, guidance, added], [guidance, added, considerably], [added, considerably,  ]]

>> Noun Phrases are: 
[Hongjun, whose expertise, guidance]

>> Named Entities are: 
[('Hongjun', 'PERSON')] 


================================ Paragraph 593 =================================

my graduate experience. I appreciate his vast knowledge and his  

------------------- Sentence 1 -------------------

my graduate experience. 


>> Tokens are: 
[graduate, experience, .] 

>> PoS Tags are: 
[('graduate', 'NOUN'), ('experience', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('graduate', 'compound'), ('experience', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[graduate, experience], [experience, .]]

>> Trigrams: 
[[graduate, experience, .]]

>> Noun Phrases are: 
[my graduate experience]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

I appreciate his vast knowledge and his   


>> Tokens are: 
[appreciate, vast, knowledge,  ] 

>> PoS Tags are: 
[('appreciate', 'VERB'), ('vast', 'ADJ'), ('knowledge', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('appreciate', 'ROOT'), ('vast', 'amod'), ('knowledge', 'dobj'), (' ', 'punct')]

>> Bigrams: 
[[appreciate, vast], [vast, knowledge], [knowledge,  ]]

>> Trigrams: 
[[appreciate, vast, knowledge], [vast, knowledge,  ]]

>> Noun Phrases are: 
[I, his vast knowledge]

>> Named Entities are: 
[] 


================================ Paragraph 594 =================================

consistent assistance in completing this work. I would also like  

------------------- Sentence 1 -------------------

consistent assistance in completing this work. 


>> Tokens are: 
[consistent, assistance, completing, work, .] 

>> PoS Tags are: 
[('consistent', 'ADJ'), ('assistance', 'NOUN'), ('completing', 'VERB'), ('work', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('consistent', 'amod'), ('assistance', 'ROOT'), ('completing', 'pcomp'), ('work', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[consistent, assistance], [assistance, completing], [completing, work], [work, .]]

>> Trigrams: 
[[consistent, assistance, completing], [assistance, completing, work], [completing, work, .]]

>> Noun Phrases are: 
[consistent assistance, this work]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

I would also like   


>> Tokens are: 
[like,  ] 

>> PoS Tags are: 
[('like', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('like', 'ROOT'), (' ', 'dobj')]

>> Bigrams: 
[[like,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[I]

>> Named Entities are: 
[] 


================================ Paragraph 595 =================================

to thank the other PhD Scholars of my school, Mr. Amjad  

------------------- Sentence 1 -------------------

to thank the other PhD Scholars of my school, 


>> Tokens are: 
[thank, PhD, Scholars, school, ,] 

>> PoS Tags are: 
[('thank', 'VERB'), ('PhD', 'NOUN'), ('Scholars', 'NOUN'), ('school', 'NOUN'), (',', 'PUNCT')] 

>> Dependency Tags are: 
[('thank', 'ROOT'), ('PhD', 'compound'), ('Scholars', 'dobj'), ('school', 'pobj'), (',', 'punct')]

>> Bigrams: 
[[thank, PhD], [PhD, Scholars], [Scholars, school], [school, ,]]

>> Trigrams: 
[[thank, PhD, Scholars], [PhD, Scholars, school], [Scholars, school, ,]]

>> Noun Phrases are: 
[the other PhD Scholars, my school]

>> Named Entities are: 
[('PhD Scholars', 'WORK_OF_ART')] 

------------------- Sentence 2 -------------------

Mr. Amjad   


>> Tokens are: 
[Mr., Amjad,  ] 

>> PoS Tags are: 
[('Mr.', 'PROPN'), ('Amjad', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Mr.', 'compound'), ('Amjad', 'ROOT'), (' ', 'nummod')]

>> Bigrams: 
[[Mr., Amjad], [Amjad,  ]]

>> Trigrams: 
[[Mr., Amjad,  ]]

>> Noun Phrases are: 
[Mr. Amjad]

>> Named Entities are: 
[('Amjad', 'PERSON')] 


================================ Paragraph 596 =================================

Ahmed, and Mr. Mehtab Afzal for the assistance they provided  

------------------- Sentence 1 -------------------

Ahmed, and Mr. Mehtab Afzal for the assistance they provided   


>> Tokens are: 
[Ahmed, ,, Mr., Mehtab, Afzal, assistance, provided,  ] 

>> PoS Tags are: 
[('Ahmed', 'PROPN'), (',', 'PUNCT'), ('Mr.', 'PROPN'), ('Mehtab', 'PROPN'), ('Afzal', 'PROPN'), ('assistance', 'NOUN'), ('provided', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Ahmed', 'ROOT'), (',', 'punct'), ('Mr.', 'compound'), ('Mehtab', 'compound'), ('Afzal', 'conj'), ('assistance', 'pobj'), ('provided', 'relcl'), (' ', 'dobj')]

>> Bigrams: 
[[Ahmed, ,], [,, Mr.], [Mr., Mehtab], [Mehtab, Afzal], [Afzal, assistance], [assistance, provided], [provided,  ]]

>> Trigrams: 
[[Ahmed, ,, Mr.], [,, Mr., Mehtab], [Mr., Mehtab, Afzal], [Mehtab, Afzal, assistance], [Afzal, assistance, provided], [assistance, provided,  ]]

>> Noun Phrases are: 
[Ahmed, Mr. Mehtab Afzal, the assistance, they]

>> Named Entities are: 
[('Ahmed', 'PERSON'), ('Mehtab Afzal', 'PERSON')] 


================================ Paragraph 597 =================================

to understand machine learning. Very special thanks goes to Dr.  

------------------- Sentence 1 -------------------

to understand machine learning. 


>> Tokens are: 
[understand, machine, learning, .] 

>> PoS Tags are: 
[('understand', 'VERB'), ('machine', 'NOUN'), ('learning', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('understand', 'ROOT'), ('machine', 'compound'), ('learning', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[understand, machine], [machine, learning], [learning, .]]

>> Trigrams: 
[[understand, machine, learning], [machine, learning, .]]

>> Noun Phrases are: 
[machine learning]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Very special thanks goes to Dr.   


>> Tokens are: 
[special, thanks, goes, Dr.,  ] 

>> PoS Tags are: 
[('special', 'ADJ'), ('thanks', 'NOUN'), ('goes', 'VERB'), ('Dr.', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('special', 'amod'), ('thanks', 'nsubj'), ('goes', 'ROOT'), ('Dr.', 'compound'), (' ', 'pobj')]

>> Bigrams: 
[[special, thanks], [thanks, goes], [goes, Dr.], [Dr.,  ]]

>> Trigrams: 
[[special, thanks, goes], [thanks, goes, Dr.], [goes, Dr.,  ]]

>> Noun Phrases are: 
[Very special thanks]

>> Named Entities are: 
[] 


================================ Paragraph 598 =================================

Zhu Yan, without whose motivation and encouragement, I  

------------------- Sentence 1 -------------------

Zhu Yan, without whose motivation and encouragement, I   


>> Tokens are: 
[Zhu, Yan, ,, motivation, encouragement, ,,  ] 

>> PoS Tags are: 
[('Zhu', 'PROPN'), ('Yan', 'PROPN'), (',', 'PUNCT'), ('motivation', 'NOUN'), ('encouragement', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Zhu', 'compound'), ('Yan', 'ROOT'), (',', 'punct'), ('motivation', 'pobj'), ('encouragement', 'conj'), (',', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[Zhu, Yan], [Yan, ,], [,, motivation], [motivation, encouragement], [encouragement, ,], [,,  ]]

>> Trigrams: 
[[Zhu, Yan, ,], [Yan, ,, motivation], [,, motivation, encouragement], [motivation, encouragement, ,], [encouragement, ,,  ]]

>> Noun Phrases are: 
[Zhu Yan, whose motivation, encouragement, I]

>> Named Entities are: 
[('Zhu Yan', 'PERSON')] 


================================ Paragraph 599 =================================

confess that it would be difficult for me to move forward in my  

------------------- Sentence 1 -------------------

confess that it would be difficult for me to move forward in my   


>> Tokens are: 
[confess, difficult, forward,  ] 

>> PoS Tags are: 
[('confess', 'VERB'), ('difficult', 'ADJ'), ('forward', 'ADV'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('confess', 'ROOT'), ('difficult', 'acomp'), ('forward', 'advmod'), (' ', 'pobj')]

>> Bigrams: 
[[confess, difficult], [difficult, forward], [forward,  ]]

>> Trigrams: 
[[confess, difficult, forward], [difficult, forward,  ]]

>> Noun Phrases are: 
[it, me]

>> Named Entities are: 
[] 


================================ Paragraph 600 =================================

PhD Program.  

------------------- Sentence 1 -------------------

PhD Program. 


>> Tokens are: 
[PhD, Program, .] 

>> PoS Tags are: 
[('PhD', 'NOUN'), ('Program', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('PhD', 'compound'), ('Program', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[PhD, Program], [Program, .]]

>> Trigrams: 
[[PhD, Program, .]]

>> Noun Phrases are: 
[PhD Program]

>> Named Entities are: 
[('PhD Program', 'ORG')] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 601 =================================

REFERENCES  

------------------- Sentence 1 -------------------

REFERENCES   


>> Tokens are: 
[REFERENCES,  ] 

>> PoS Tags are: 
[('REFERENCES', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('REFERENCES', 'ROOT'), (' ', 'nummod')]

>> Bigrams: 
[[REFERENCES,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[REFERENCES]

>> Named Entities are: 
[] 


================================ Paragraph 602 =================================

[1] S. B. Kotsiantis, “Supervised Machine Learning: A Review  of Classification Techniques”, Informatica, Vol. 31, No. 3,  

------------------- Sentence 1 -------------------

[1] S. B. Kotsiantis, “Supervised Machine Learning: 


>> Tokens are: 
[[, 1, ], S., B., Kotsiantis, ,, “, Supervised, Machine, Learning, :] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('1', 'X'), (']', 'PUNCT'), ('S.', 'PROPN'), ('B.', 'PROPN'), ('Kotsiantis', 'PROPN'), (',', 'PUNCT'), ('“', 'PUNCT'), ('Supervised', 'ADJ'), ('Machine', 'NOUN'), ('Learning', 'NOUN'), (':', 'PUNCT')] 

>> Dependency Tags are: 
[('[', 'punct'), ('1', 'nummod'), (']', 'punct'), ('S.', 'compound'), ('B.', 'compound'), ('Kotsiantis', 'ROOT'), (',', 'punct'), ('“', 'punct'), ('Supervised', 'amod'), ('Machine', 'compound'), ('Learning', 'appos'), (':', 'punct')]

>> Bigrams: 
[[[, 1], [1, ]], [], S.], [S., B.], [B., Kotsiantis], [Kotsiantis, ,], [,, “], [“, Supervised], [Supervised, Machine], [Machine, Learning], [Learning, :]]

>> Trigrams: 
[[[, 1, ]], [1, ], S.], [], S., B.], [S., B., Kotsiantis], [B., Kotsiantis, ,], [Kotsiantis, ,, “], [,, “, Supervised], [“, Supervised, Machine], [Supervised, Machine, Learning], [Machine, Learning, :]]

>> Noun Phrases are: 
[[1] S. B. Kotsiantis, “Supervised Machine Learning]

>> Named Entities are: 
[('S. B. Kotsiantis', 'PERSON'), ('Supervised Machine Learning:', 'WORK_OF_ART')] 

------------------- Sentence 2 -------------------

A Review  of Classification Techniques”, Informatica, Vol. 


>> Tokens are: 
[Review,  , Classification, Techniques, ”, ,, Informatica, ,, Vol, .] 

>> PoS Tags are: 
[('Review', 'PROPN'), (' ', 'SPACE'), ('Classification', 'PROPN'), ('Techniques', 'PROPN'), ('”', 'PUNCT'), (',', 'PUNCT'), ('Informatica', 'PROPN'), (',', 'PUNCT'), ('Vol', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Review', 'ROOT'), (' ', 'appos'), ('Classification', 'compound'), ('Techniques', 'pobj'), ('”', 'punct'), (',', 'punct'), ('Informatica', 'conj'), (',', 'punct'), ('Vol', 'npadvmod'), ('.', 'punct')]

>> Bigrams: 
[[Review,  ], [ , Classification], [Classification, Techniques], [Techniques, ”], [”, ,], [,, Informatica], [Informatica, ,], [,, Vol], [Vol, .]]

>> Trigrams: 
[[Review,  , Classification], [ , Classification, Techniques], [Classification, Techniques, ”], [Techniques, ”, ,], [”, ,, Informatica], [,, Informatica, ,], [Informatica, ,, Vol], [,, Vol, .]]

>> Noun Phrases are: 
[A Review, Classification Techniques, Informatica]

>> Named Entities are: 
[('Informatica', 'PERSON')] 

------------------- Sentence 3 -------------------

31, No. 3,   


>> Tokens are: 
[31, ,, ., 3, ,,  ] 

>> PoS Tags are: 
[('31', 'NUM'), (',', 'PUNCT'), ('.', 'NOUN'), ('3', 'NUM'), (',', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('31', 'nummod'), (',', 'punct'), ('.', 'appos'), ('3', 'nummod'), (',', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[31, ,], [,, .], [., 3], [3, ,], [,,  ]]

>> Trigrams: 
[[31, ,, .], [,, ., 3], [., 3, ,], [3, ,,  ]]

>> Noun Phrases are: 
[.]

>> Named Entities are: 
[('31', 'DATE'), ('3', 'CARDINAL')] 


================================ Paragraph 603 =================================

pp. 249-268, 2007. 

------------------- Sentence 1 -------------------

pp. 


>> Tokens are: 
[pp, .] 

>> PoS Tags are: 
[('pp', 'ADV'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('pp', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[pp, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

249-268, 2007. 


>> Tokens are: 
[249, -, 268, ,, 2007, .] 

>> PoS Tags are: 
[('249', 'NUM'), ('-', 'SYM'), ('268', 'NUM'), (',', 'PUNCT'), ('2007', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('249', 'ROOT'), ('-', 'punct'), ('268', 'prep'), (',', 'punct'), ('2007', 'npadvmod'), ('.', 'punct')]

>> Bigrams: 
[[249, -], [-, 268], [268, ,], [,, 2007], [2007, .]]

>> Trigrams: 
[[249, -, 268], [-, 268, ,], [268, ,, 2007], [,, 2007, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('249', 'CARDINAL')] 


================================ Paragraph 604 =================================

IQBAL MUHAMMAD AND ZHU YAN: SUPERVISED MACHINE LEARNING APPROACHES: A SURVEY  

------------------- Sentence 1 -------------------

IQBAL MUHAMMAD AND ZHU YAN: SUPERVISED MACHINE 


>> Tokens are: 
[IQBAL, MUHAMMAD, ZHU, YAN, :, SUPERVISED, MACHINE] 

>> PoS Tags are: 
[('IQBAL', 'NOUN'), ('MUHAMMAD', 'PROPN'), ('ZHU', 'PROPN'), ('YAN', 'PROPN'), (':', 'PUNCT'), ('SUPERVISED', 'ADJ'), ('MACHINE', 'NOUN')] 

>> Dependency Tags are: 
[('IQBAL', 'compound'), ('MUHAMMAD', 'ROOT'), ('ZHU', 'compound'), ('YAN', 'conj'), (':', 'punct'), ('SUPERVISED', 'amod'), ('MACHINE', 'punct')]

>> Bigrams: 
[[IQBAL, MUHAMMAD], [MUHAMMAD, ZHU], [ZHU, YAN], [YAN, :], [:, SUPERVISED], [SUPERVISED, MACHINE]]

>> Trigrams: 
[[IQBAL, MUHAMMAD, ZHU], [MUHAMMAD, ZHU, YAN], [ZHU, YAN, :], [YAN, :, SUPERVISED], [:, SUPERVISED, MACHINE]]

>> Noun Phrases are: 
[IQBAL MUHAMMAD, ZHU YAN]

>> Named Entities are: 
[('IQBAL', 'PERSON'), ('ZHU YAN', 'PERSON')] 

------------------- Sentence 2 -------------------

LEARNING APPROACHES: 


>> Tokens are: 
[LEARNING, APPROACHES, :] 

>> PoS Tags are: 
[('LEARNING', 'NOUN'), ('APPROACHES', 'NOUN'), (':', 'PUNCT')] 

>> Dependency Tags are: 
[('LEARNING', 'compound'), ('APPROACHES', 'ROOT'), (':', 'punct')]

>> Bigrams: 
[[LEARNING, APPROACHES], [APPROACHES, :]]

>> Trigrams: 
[[LEARNING, APPROACHES, :]]

>> Noun Phrases are: 
[LEARNING APPROACHES]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

A SURVEY   


>> Tokens are: 
[SURVEY,  ] 

>> PoS Tags are: 
[('SURVEY', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('SURVEY', 'ROOT'), (' ', 'nummod')]

>> Bigrams: 
[[SURVEY,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[A SURVEY]

>> Named Entities are: 
[] 


================================ Paragraph 605 =================================

952  

------------------- Sentence 1 -------------------

952   


>> Tokens are: 
[952,  ] 

>> PoS Tags are: 
[('952', 'NUM'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('952', 'nummod'), (' ', 'ROOT')]

>> Bigrams: 
[[952,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('952', 'CARDINAL')] 


================================ Paragraph 606 =================================

[2] James Cussens, “Machine Learning”, IEEE Journal of  Computing and Control, Vol. 7, No. 4, pp 164-168, 1996.  

------------------- Sentence 1 -------------------

[2] James Cussens, “Machine Learning”, IEEE Journal of  Computing and Control, Vol. 


>> Tokens are: 
[[, 2, ], James, Cussens, ,, “, Machine, Learning, ”, ,, IEEE, Journal,  , Computing, Control, ,, Vol, .] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('2', 'NUM'), (']', 'PUNCT'), ('James', 'PROPN'), ('Cussens', 'PROPN'), (',', 'PUNCT'), ('“', 'PUNCT'), ('Machine', 'PROPN'), ('Learning', 'PROPN'), ('”', 'PUNCT'), (',', 'PUNCT'), ('IEEE', 'PROPN'), ('Journal', 'PROPN'), (' ', 'SPACE'), ('Computing', 'PROPN'), ('Control', 'PROPN'), (',', 'PUNCT'), ('Vol', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('[', 'punct'), ('2', 'nummod'), (']', 'punct'), ('James', 'compound'), ('Cussens', 'ROOT'), (',', 'punct'), ('“', 'punct'), ('Machine', 'compound'), ('Learning', 'appos'), ('”', 'punct'), (',', 'punct'), ('IEEE', 'compound'), ('Journal', 'conj'), (' ', 'pobj'), ('Computing', 'conj'), ('Control', 'conj'), (',', 'punct'), ('Vol', 'npadvmod'), ('.', 'punct')]

>> Bigrams: 
[[[, 2], [2, ]], [], James], [James, Cussens], [Cussens, ,], [,, “], [“, Machine], [Machine, Learning], [Learning, ”], [”, ,], [,, IEEE], [IEEE, Journal], [Journal,  ], [ , Computing], [Computing, Control], [Control, ,], [,, Vol], [Vol, .]]

>> Trigrams: 
[[[, 2, ]], [2, ], James], [], James, Cussens], [James, Cussens, ,], [Cussens, ,, “], [,, “, Machine], [“, Machine, Learning], [Machine, Learning, ”], [Learning, ”, ,], [”, ,, IEEE], [,, IEEE, Journal], [IEEE, Journal,  ], [Journal,  , Computing], [ , Computing, Control], [Computing, Control, ,], [Control, ,, Vol], [,, Vol, .]]

>> Noun Phrases are: 
[[2] James Cussens, “Machine Learning, IEEE Journal, Computing, Control]

>> Named Entities are: 
[('2', 'CARDINAL'), ('James Cussens', 'PERSON'), ('Machine Learning', 'WORK_OF_ART'), ('IEEE Journal of  Computing', 'ORG')] 

------------------- Sentence 2 -------------------

7, No. 4, pp 164-168, 1996. 


>> Tokens are: 
[7, ,, ., 4, ,, pp, 164, -, 168, ,, 1996, .] 

>> PoS Tags are: 
[('7', 'NUM'), (',', 'PUNCT'), ('.', 'NOUN'), ('4', 'NUM'), (',', 'PUNCT'), ('pp', 'ADV'), ('164', 'NUM'), ('-', 'SYM'), ('168', 'NUM'), (',', 'PUNCT'), ('1996', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('7', 'ROOT'), (',', 'punct'), ('.', 'punct'), ('4', 'nummod'), (',', 'punct'), ('pp', 'appos'), ('164', 'npadvmod'), ('-', 'punct'), ('168', 'prep'), (',', 'punct'), ('1996', 'npadvmod'), ('.', 'punct')]

>> Bigrams: 
[[7, ,], [,, .], [., 4], [4, ,], [,, pp], [pp, 164], [164, -], [-, 168], [168, ,], [,, 1996], [1996, .]]

>> Trigrams: 
[[7, ,, .], [,, ., 4], [., 4, ,], [4, ,, pp], [,, pp, 164], [pp, 164, -], [164, -, 168], [-, 168, ,], [168, ,, 1996], [,, 1996, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('7', 'CARDINAL'), ('4', 'CARDINAL'), ('164', 'CARDINAL')] 

------------------- Sentence 3 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 607 =================================

[3] Richard S. Sutton and Andrew G. Barto, “Reinforcement  Learning: An Introduction”, Cambridge, MA: MIT Press, 1998.  

------------------- Sentence 1 -------------------

[3] Richard S. Sutton and Andrew G. Barto, “Reinforcement  Learning: 


>> Tokens are: 
[[, 3, ], Richard, S., Sutton, Andrew, G., Barto, ,, “, Reinforcement,  , Learning, :] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('3', 'X'), (']', 'PUNCT'), ('Richard', 'PROPN'), ('S.', 'PROPN'), ('Sutton', 'PROPN'), ('Andrew', 'PROPN'), ('G.', 'PROPN'), ('Barto', 'PROPN'), (',', 'PUNCT'), ('“', 'PUNCT'), ('Reinforcement', 'NOUN'), (' ', 'SPACE'), ('Learning', 'NOUN'), (':', 'PUNCT')] 

>> Dependency Tags are: 
[('[', 'punct'), ('3', 'nummod'), (']', 'punct'), ('Richard', 'compound'), ('S.', 'compound'), ('Sutton', 'ROOT'), ('Andrew', 'compound'), ('G.', 'compound'), ('Barto', 'conj'), (',', 'punct'), ('“', 'punct'), ('Reinforcement', 'nmod'), (' ', 'nummod'), ('Learning', 'appos'), (':', 'punct')]

>> Bigrams: 
[[[, 3], [3, ]], [], Richard], [Richard, S.], [S., Sutton], [Sutton, Andrew], [Andrew, G.], [G., Barto], [Barto, ,], [,, “], [“, Reinforcement], [Reinforcement,  ], [ , Learning], [Learning, :]]

>> Trigrams: 
[[[, 3, ]], [3, ], Richard], [], Richard, S.], [Richard, S., Sutton], [S., Sutton, Andrew], [Sutton, Andrew, G.], [Andrew, G., Barto], [G., Barto, ,], [Barto, ,, “], [,, “, Reinforcement], [“, Reinforcement,  ], [Reinforcement,  , Learning], [ , Learning, :]]

>> Noun Phrases are: 
[[3] Richard S. Sutton, Andrew G. Barto, Reinforcement  Learning]

>> Named Entities are: 
[('3', 'CARDINAL'), ('Richard S. Sutton', 'PERSON'), ('Andrew G. Barto', 'PERSON'), ('Reinforcement  Learning:', 'WORK_OF_ART')] 

------------------- Sentence 2 -------------------

An Introduction”, Cambridge, MA: MIT Press, 1998. 


>> Tokens are: 
[Introduction, ”, ,, Cambridge, ,, MA, :, MIT, Press, ,, 1998, .] 

>> PoS Tags are: 
[('Introduction', 'NOUN'), ('”', 'PUNCT'), (',', 'PUNCT'), ('Cambridge', 'PROPN'), (',', 'PUNCT'), ('MA', 'PROPN'), (':', 'PUNCT'), ('MIT', 'PROPN'), ('Press', 'PROPN'), (',', 'PUNCT'), ('1998', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Introduction', 'ROOT'), ('”', 'punct'), (',', 'punct'), ('Cambridge', 'appos'), (',', 'punct'), ('MA', 'appos'), (':', 'punct'), ('MIT', 'compound'), ('Press', 'appos'), (',', 'punct'), ('1998', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[Introduction, ”], [”, ,], [,, Cambridge], [Cambridge, ,], [,, MA], [MA, :], [:, MIT], [MIT, Press], [Press, ,], [,, 1998], [1998, .]]

>> Trigrams: 
[[Introduction, ”, ,], [”, ,, Cambridge], [,, Cambridge, ,], [Cambridge, ,, MA], [,, MA, :], [MA, :, MIT], [:, MIT, Press], [MIT, Press, ,], [Press, ,, 1998], [,, 1998, .]]

>> Noun Phrases are: 
[An Introduction, Cambridge, MA, MIT Press]

>> Named Entities are: 
[('Cambridge', 'GPE'), ('MA', 'ORG'), ('MIT Press', 'ORG'), ('1998', 'DATE')] 

------------------- Sentence 3 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 608 =================================

[4] Victoria J. Hodge and Jim Austin, “A Survey of Outlier  Detection Methodologies”, Artificial Intelligence Review,  

------------------- Sentence 1 -------------------

[4] Victoria J. Hodge and Jim Austin, “A Survey of Outlier  Detection Methodologies”, Artificial Intelligence Review,   


>> Tokens are: 
[[, 4, ], Victoria, J., Hodge, Jim, Austin, ,, “, Survey, Outlier,  , Detection, Methodologies, ”, ,, Artificial, Intelligence, Review, ,,  ] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('4', 'X'), (']', 'PUNCT'), ('Victoria', 'PROPN'), ('J.', 'PROPN'), ('Hodge', 'PROPN'), ('Jim', 'PROPN'), ('Austin', 'PROPN'), (',', 'PUNCT'), ('“', 'PUNCT'), ('Survey', 'NOUN'), ('Outlier', 'PROPN'), (' ', 'SPACE'), ('Detection', 'PROPN'), ('Methodologies', 'PROPN'), ('”', 'PUNCT'), (',', 'PUNCT'), ('Artificial', 'PROPN'), ('Intelligence', 'PROPN'), ('Review', 'PROPN'), (',', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('[', 'punct'), ('4', 'nummod'), (']', 'punct'), ('Victoria', 'compound'), ('J.', 'compound'), ('Hodge', 'ROOT'), ('Jim', 'compound'), ('Austin', 'conj'), (',', 'punct'), ('“', 'punct'), ('Survey', 'appos'), ('Outlier', 'nmod'), (' ', 'nmod'), ('Detection', 'compound'), ('Methodologies', 'pobj'), ('”', 'punct'), (',', 'punct'), ('Artificial', 'compound'), ('Intelligence', 'compound'), ('Review', 'conj'), (',', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[[, 4], [4, ]], [], Victoria], [Victoria, J.], [J., Hodge], [Hodge, Jim], [Jim, Austin], [Austin, ,], [,, “], [“, Survey], [Survey, Outlier], [Outlier,  ], [ , Detection], [Detection, Methodologies], [Methodologies, ”], [”, ,], [,, Artificial], [Artificial, Intelligence], [Intelligence, Review], [Review, ,], [,,  ]]

>> Trigrams: 
[[[, 4, ]], [4, ], Victoria], [], Victoria, J.], [Victoria, J., Hodge], [J., Hodge, Jim], [Hodge, Jim, Austin], [Jim, Austin, ,], [Austin, ,, “], [,, “, Survey], [“, Survey, Outlier], [Survey, Outlier,  ], [Outlier,  , Detection], [ , Detection, Methodologies], [Detection, Methodologies, ”], [Methodologies, ”, ,], [”, ,, Artificial], [,, Artificial, Intelligence], [Artificial, Intelligence, Review], [Intelligence, Review, ,], [Review, ,,  ]]

>> Noun Phrases are: 
[[4] Victoria J. Hodge, Jim Austin, “A Survey, Outlier  Detection Methodologies, Artificial Intelligence Review]

>> Named Entities are: 
[('4', 'CARDINAL'), ('Jim Austin', 'PERSON'), ('A Survey of Outlier  Detection Methodologies”', 'WORK_OF_ART'), ('Artificial Intelligence Review', 'ORG')] 


================================ Paragraph 609 =================================

Vol. 22, No. 2, pp. 85-126, 2004.  

------------------- Sentence 1 -------------------

Vol. 


>> Tokens are: 
[Vol, .] 

>> PoS Tags are: 
[('Vol', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Vol', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Vol, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Vol]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

22, No. 2, pp. 


>> Tokens are: 
[22, ,, ., 2, ,, pp, .] 

>> PoS Tags are: 
[('22', 'NUM'), (',', 'PUNCT'), ('.', 'NOUN'), ('2', 'NUM'), (',', 'PUNCT'), ('pp', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('22', 'ROOT'), (',', 'punct'), ('.', 'npadvmod'), ('2', 'nummod'), (',', 'punct'), ('pp', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[22, ,], [,, .], [., 2], [2, ,], [,, pp], [pp, .]]

>> Trigrams: 
[[22, ,, .], [,, ., 2], [., 2, ,], [2, ,, pp], [,, pp, .]]

>> Noun Phrases are: 
[pp]

>> Named Entities are: 
[('22', 'CARDINAL'), ('2', 'CARDINAL')] 

------------------- Sentence 3 -------------------

85-126, 2004. 


>> Tokens are: 
[85, -, 126, ,, 2004, .] 

>> PoS Tags are: 
[('85', 'NUM'), ('-', 'SYM'), ('126', 'NUM'), (',', 'PUNCT'), ('2004', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('85', 'ROOT'), ('-', 'punct'), ('126', 'prep'), (',', 'punct'), ('2004', 'npadvmod'), ('.', 'punct')]

>> Bigrams: 
[[85, -], [-, 126], [126, ,], [,, 2004], [2004, .]]

>> Trigrams: 
[[85, -, 126], [-, 126, ,], [126, ,, 2004], [,, 2004, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('85', 'CARDINAL')] 

------------------- Sentence 4 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 610 =================================

[5] Karanjit Singh and Shuchita Upadhyaya, “Outlier Detection:  Applications and Techniques”, International Journal of Computer  

------------------- Sentence 1 -------------------

[5] Karanjit Singh and Shuchita Upadhyaya, “Outlier Detection:   


>> Tokens are: 
[[, 5, ], Karanjit, Singh, Shuchita, Upadhyaya, ,, “, Outlier, Detection, :,  ] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('5', 'NUM'), (']', 'PUNCT'), ('Karanjit', 'PROPN'), ('Singh', 'PROPN'), ('Shuchita', 'PROPN'), ('Upadhyaya', 'PROPN'), (',', 'PUNCT'), ('“', 'PUNCT'), ('Outlier', 'PROPN'), ('Detection', 'NOUN'), (':', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('[', 'punct'), ('5', 'nummod'), (']', 'punct'), ('Karanjit', 'compound'), ('Singh', 'ROOT'), ('Shuchita', 'compound'), ('Upadhyaya', 'conj'), (',', 'punct'), ('“', 'punct'), ('Outlier', 'compound'), ('Detection', 'appos'), (':', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[[, 5], [5, ]], [], Karanjit], [Karanjit, Singh], [Singh, Shuchita], [Shuchita, Upadhyaya], [Upadhyaya, ,], [,, “], [“, Outlier], [Outlier, Detection], [Detection, :], [:,  ]]

>> Trigrams: 
[[[, 5, ]], [5, ], Karanjit], [], Karanjit, Singh], [Karanjit, Singh, Shuchita], [Singh, Shuchita, Upadhyaya], [Shuchita, Upadhyaya, ,], [Upadhyaya, ,, “], [,, “, Outlier], [“, Outlier, Detection], [Outlier, Detection, :], [Detection, :,  ]]

>> Noun Phrases are: 
[[5] Karanjit Singh, Shuchita Upadhyaya, “Outlier Detection]

>> Named Entities are: 
[('5', 'CARDINAL'), ('Singh', 'GPE'), ('Shuchita Upadhyaya', 'GPE'), ('Outlier Detection:  ', 'WORK_OF_ART')] 

------------------- Sentence 2 -------------------

Applications and Techniques”, International Journal of Computer   


>> Tokens are: 
[Applications, Techniques, ”, ,, International, Journal, Computer,  ] 

>> PoS Tags are: 
[('Applications', 'PROPN'), ('Techniques', 'PROPN'), ('”', 'PUNCT'), (',', 'PUNCT'), ('International', 'PROPN'), ('Journal', 'PROPN'), ('Computer', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Applications', 'ROOT'), ('Techniques', 'conj'), ('”', 'punct'), (',', 'punct'), ('International', 'compound'), ('Journal', 'conj'), ('Computer', 'pobj'), (' ', 'nummod')]

>> Bigrams: 
[[Applications, Techniques], [Techniques, ”], [”, ,], [,, International], [International, Journal], [Journal, Computer], [Computer,  ]]

>> Trigrams: 
[[Applications, Techniques, ”], [Techniques, ”, ,], [”, ,, International], [,, International, Journal], [International, Journal, Computer], [Journal, Computer,  ]]

>> Noun Phrases are: 
[Applications, Techniques, International Journal, Computer]

>> Named Entities are: 
[('International Journal of Computer', 'ORG')] 


================================ Paragraph 611 =================================

Science Issues, Vol. 9, Issue. 1, No. 3, pp. 307-323, 2012.  

------------------- Sentence 1 -------------------

Science Issues, Vol. 


>> Tokens are: 
[Science, Issues, ,, Vol, .] 

>> PoS Tags are: 
[('Science', 'PROPN'), ('Issues', 'PROPN'), (',', 'PUNCT'), ('Vol', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Science', 'compound'), ('Issues', 'ROOT'), (',', 'punct'), ('Vol', 'npadvmod'), ('.', 'punct')]

>> Bigrams: 
[[Science, Issues], [Issues, ,], [,, Vol], [Vol, .]]

>> Trigrams: 
[[Science, Issues, ,], [Issues, ,, Vol], [,, Vol, .]]

>> Noun Phrases are: 
[Science Issues]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

9, Issue. 


>> Tokens are: 
[9, ,, Issue, .] 

>> PoS Tags are: 
[('9', 'NUM'), (',', 'PUNCT'), ('Issue', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('9', 'nummod'), (',', 'punct'), ('Issue', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[9, ,], [,, Issue], [Issue, .]]

>> Trigrams: 
[[9, ,, Issue], [,, Issue, .]]

>> Noun Phrases are: 
[9, Issue]

>> Named Entities are: 
[('9', 'CARDINAL')] 

------------------- Sentence 3 -------------------

1, No. 3, pp. 


>> Tokens are: 
[1, ,, ., 3, ,, pp, .] 

>> PoS Tags are: 
[('1', 'NUM'), (',', 'PUNCT'), ('.', 'NOUN'), ('3', 'NUM'), (',', 'PUNCT'), ('pp', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('1', 'ROOT'), (',', 'punct'), ('.', 'npadvmod'), ('3', 'nummod'), (',', 'punct'), ('pp', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[1, ,], [,, .], [., 3], [3, ,], [,, pp], [pp, .]]

>> Trigrams: 
[[1, ,, .], [,, ., 3], [., 3, ,], [3, ,, pp], [,, pp, .]]

>> Noun Phrases are: 
[pp]

>> Named Entities are: 
[('1', 'CARDINAL'), ('3', 'CARDINAL')] 

------------------- Sentence 4 -------------------

307-323, 2012. 


>> Tokens are: 
[307, -, 323, ,, 2012, .] 

>> PoS Tags are: 
[('307', 'NUM'), ('-', 'SYM'), ('323', 'NUM'), (',', 'PUNCT'), ('2012', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('307', 'ROOT'), ('-', 'punct'), ('323', 'prep'), (',', 'punct'), ('2012', 'npadvmod'), ('.', 'punct')]

>> Bigrams: 
[[307, -], [-, 323], [323, ,], [,, 2012], [2012, .]]

>> Trigrams: 
[[307, -, 323], [-, 323, ,], [323, ,, 2012], [,, 2012, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('307', 'CARDINAL')] 

------------------- Sentence 5 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 612 =================================

[6] Hugo Jair Escalante, “A Comparison of Outlier Detection  Algorithms for Machine Learning”, CIC-2005 Congreso  

------------------- Sentence 1 -------------------

[6] Hugo Jair Escalante, “A Comparison of Outlier Detection   


>> Tokens are: 
[[, 6, ], Hugo, Jair, Escalante, ,, “, Comparison, Outlier, Detection,  ] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('6', 'NUM'), (']', 'PUNCT'), ('Hugo', 'PROPN'), ('Jair', 'PROPN'), ('Escalante', 'PROPN'), (',', 'PUNCT'), ('“', 'PUNCT'), ('Comparison', 'PROPN'), ('Outlier', 'PROPN'), ('Detection', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('[', 'punct'), ('6', 'nummod'), (']', 'punct'), ('Hugo', 'compound'), ('Jair', 'compound'), ('Escalante', 'ROOT'), (',', 'punct'), ('“', 'punct'), ('Comparison', 'appos'), ('Outlier', 'compound'), ('Detection', 'pobj'), (' ', 'punct')]

>> Bigrams: 
[[[, 6], [6, ]], [], Hugo], [Hugo, Jair], [Jair, Escalante], [Escalante, ,], [,, “], [“, Comparison], [Comparison, Outlier], [Outlier, Detection], [Detection,  ]]

>> Trigrams: 
[[[, 6, ]], [6, ], Hugo], [], Hugo, Jair], [Hugo, Jair, Escalante], [Jair, Escalante, ,], [Escalante, ,, “], [,, “, Comparison], [“, Comparison, Outlier], [Comparison, Outlier, Detection], [Outlier, Detection,  ]]

>> Noun Phrases are: 
[[6] Hugo Jair Escalante, A Comparison, Outlier Detection]

>> Named Entities are: 
[('6', 'CARDINAL'), ('A Comparison of Outlier Detection  ', 'WORK_OF_ART')] 

------------------- Sentence 2 -------------------

Algorithms for Machine Learning”, CIC-2005 Congreso   


>> Tokens are: 
[Algorithms, Machine, Learning, ”, ,, CIC-2005, Congreso,  ] 

>> PoS Tags are: 
[('Algorithms', 'PROPN'), ('Machine', 'PROPN'), ('Learning', 'PROPN'), ('”', 'PUNCT'), (',', 'PUNCT'), ('CIC-2005', 'PROPN'), ('Congreso', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Algorithms', 'ROOT'), ('Machine', 'compound'), ('Learning', 'pobj'), ('”', 'punct'), (',', 'punct'), ('CIC-2005', 'compound'), ('Congreso', 'appos'), (' ', 'nummod')]

>> Bigrams: 
[[Algorithms, Machine], [Machine, Learning], [Learning, ”], [”, ,], [,, CIC-2005], [CIC-2005, Congreso], [Congreso,  ]]

>> Trigrams: 
[[Algorithms, Machine, Learning], [Machine, Learning, ”], [Learning, ”, ,], [”, ,, CIC-2005], [,, CIC-2005, Congreso], [CIC-2005, Congreso,  ]]

>> Noun Phrases are: 
[Algorithms, Machine Learning, CIC-2005 Congreso]

>> Named Entities are: 
[('Congreso', 'ORG')] 


================================ Paragraph 613 =================================

Internacional en Computacion-IPN, 2005.  

------------------- Sentence 1 -------------------

Internacional en Computacion-IPN, 2005. 


>> Tokens are: 
[Internacional, en, Computacion, -, IPN, ,, 2005, .] 

>> PoS Tags are: 
[('Internacional', 'PROPN'), ('en', 'PROPN'), ('Computacion', 'PROPN'), ('-', 'PUNCT'), ('IPN', 'PROPN'), (',', 'PUNCT'), ('2005', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Internacional', 'compound'), ('en', 'compound'), ('Computacion', 'compound'), ('-', 'punct'), ('IPN', 'ROOT'), (',', 'punct'), ('2005', 'npadvmod'), ('.', 'punct')]

>> Bigrams: 
[[Internacional, en], [en, Computacion], [Computacion, -], [-, IPN], [IPN, ,], [,, 2005], [2005, .]]

>> Trigrams: 
[[Internacional, en, Computacion], [en, Computacion, -], [Computacion, -, IPN], [-, IPN, ,], [IPN, ,, 2005], [,, 2005, .]]

>> Noun Phrases are: 
[Internacional en Computacion-IPN]

>> Named Entities are: 
[('Computacion-IPN', 'ORG'), ('2005', 'DATE')] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 614 =================================

[7] Pierre Geurts, Alexandre Irrthum, Louis Wehenkel,  “Supervised learning with decision tree-based methods in  

------------------- Sentence 1 -------------------

[7] Pierre Geurts, Alexandre Irrthum, Louis Wehenkel,  “Supervised learning with decision tree-based methods in   


>> Tokens are: 
[[, 7, ], Pierre, Geurts, ,, Alexandre, Irrthum, ,, Louis, Wehenkel, ,,  , “, Supervised, learning, decision, tree, -, based, methods,  ] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('7', 'NUM'), (']', 'PUNCT'), ('Pierre', 'PROPN'), ('Geurts', 'PROPN'), (',', 'PUNCT'), ('Alexandre', 'PROPN'), ('Irrthum', 'PROPN'), (',', 'PUNCT'), ('Louis', 'PROPN'), ('Wehenkel', 'PROPN'), (',', 'PUNCT'), (' ', 'SPACE'), ('“', 'PUNCT'), ('Supervised', 'ADJ'), ('learning', 'NOUN'), ('decision', 'NOUN'), ('tree', 'NOUN'), ('-', 'PUNCT'), ('based', 'VERB'), ('methods', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('[', 'punct'), ('7', 'nummod'), (']', 'punct'), ('Pierre', 'compound'), ('Geurts', 'ROOT'), (',', 'punct'), ('Alexandre', 'compound'), ('Irrthum', 'conj'), (',', 'punct'), ('Louis', 'compound'), ('Wehenkel', 'conj'), (',', 'punct'), (' ', 'nmod'), ('“', 'punct'), ('Supervised', 'amod'), ('learning', 'conj'), ('decision', 'compound'), ('tree', 'npadvmod'), ('-', 'punct'), ('based', 'amod'), ('methods', 'pobj'), (' ', 'pobj')]

>> Bigrams: 
[[[, 7], [7, ]], [], Pierre], [Pierre, Geurts], [Geurts, ,], [,, Alexandre], [Alexandre, Irrthum], [Irrthum, ,], [,, Louis], [Louis, Wehenkel], [Wehenkel, ,], [,,  ], [ , “], [“, Supervised], [Supervised, learning], [learning, decision], [decision, tree], [tree, -], [-, based], [based, methods], [methods,  ]]

>> Trigrams: 
[[[, 7, ]], [7, ], Pierre], [], Pierre, Geurts], [Pierre, Geurts, ,], [Geurts, ,, Alexandre], [,, Alexandre, Irrthum], [Alexandre, Irrthum, ,], [Irrthum, ,, Louis], [,, Louis, Wehenkel], [Louis, Wehenkel, ,], [Wehenkel, ,,  ], [,,  , “], [ , “, Supervised], [“, Supervised, learning], [Supervised, learning, decision], [learning, decision, tree], [decision, tree, -], [tree, -, based], [-, based, methods], [based, methods,  ]]

>> Noun Phrases are: 
[[7] Pierre Geurts, Alexandre Irrthum, Louis Wehenkel,  “Supervised learning, decision tree-based methods]

>> Named Entities are: 
[('7', 'CARDINAL'), ('Pierre Geurts', 'PERSON'), ('Alexandre Irrthum', 'PERSON'), ('Louis Wehenkel', 'PERSON')] 


================================ Paragraph 615 =================================

computational and systems biology”, Molecular  

------------------- Sentence 1 -------------------

computational and systems biology”, Molecular   


>> Tokens are: 
[computational, systems, biology, ”, ,, Molecular,  ] 

>> PoS Tags are: 
[('computational', 'ADJ'), ('systems', 'NOUN'), ('biology', 'NOUN'), ('”', 'PUNCT'), (',', 'PUNCT'), ('Molecular', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('computational', 'amod'), ('systems', 'conj'), ('biology', 'ROOT'), ('”', 'punct'), (',', 'punct'), ('Molecular', 'appos'), (' ', 'punct')]

>> Bigrams: 
[[computational, systems], [systems, biology], [biology, ”], [”, ,], [,, Molecular], [Molecular,  ]]

>> Trigrams: 
[[computational, systems, biology], [systems, biology, ”], [biology, ”, ,], [”, ,, Molecular], [,, Molecular,  ]]

>> Noun Phrases are: 
[computational and systems biology, Molecular]

>> Named Entities are: 
[] 


================================ Paragraph 616 =================================

BioSystems, Vol. 5, No. 12, pp. 1593-1605, 2009.  

------------------- Sentence 1 -------------------

BioSystems, Vol. 


>> Tokens are: 
[BioSystems, ,, Vol, .] 

>> PoS Tags are: 
[('BioSystems', 'PROPN'), (',', 'PUNCT'), ('Vol', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('BioSystems', 'ROOT'), (',', 'punct'), ('Vol', 'npadvmod'), ('.', 'punct')]

>> Bigrams: 
[[BioSystems, ,], [,, Vol], [Vol, .]]

>> Trigrams: 
[[BioSystems, ,, Vol], [,, Vol, .]]

>> Noun Phrases are: 
[BioSystems]

>> Named Entities are: 
[('BioSystems', 'ORG')] 

------------------- Sentence 2 -------------------

5, No. 12, pp. 


>> Tokens are: 
[5, ,, ., 12, ,, pp, .] 

>> PoS Tags are: 
[('5', 'NUM'), (',', 'PUNCT'), ('.', 'NOUN'), ('12', 'NUM'), (',', 'PUNCT'), ('pp', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('5', 'ROOT'), (',', 'punct'), ('.', 'punct'), ('12', 'nummod'), (',', 'punct'), ('pp', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[5, ,], [,, .], [., 12], [12, ,], [,, pp], [pp, .]]

>> Trigrams: 
[[5, ,, .], [,, ., 12], [., 12, ,], [12, ,, pp], [,, pp, .]]

>> Noun Phrases are: 
[pp]

>> Named Entities are: 
[('5', 'CARDINAL'), ('12', 'CARDINAL')] 

------------------- Sentence 3 -------------------

1593-1605, 2009. 


>> Tokens are: 
[1593, -, 1605, ,, 2009, .] 

>> PoS Tags are: 
[('1593', 'NUM'), ('-', 'SYM'), ('1605', 'NUM'), (',', 'PUNCT'), ('2009', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('1593', 'ROOT'), ('-', 'punct'), ('1605', 'prep'), (',', 'punct'), ('2009', 'npadvmod'), ('.', 'punct')]

>> Bigrams: 
[[1593, -], [-, 1605], [1605, ,], [,, 2009], [2009, .]]

>> Trigrams: 
[[1593, -, 1605], [-, 1605, ,], [1605, ,, 2009], [,, 2009, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('1593-1605', 'DATE'), ('2009', 'DATE')] 

------------------- Sentence 4 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 617 =================================

[8] L. Breiman, J. Friedman, R. A. Olsen and C. J. Stone,  “Classification and Regression Trees”, Belmont,  

------------------- Sentence 1 -------------------

[8] L. Breiman, J. Friedman, R. A. Olsen and C. J. Stone,  “Classification and Regression Trees”, Belmont,   


>> Tokens are: 
[[, 8, ], L., Breiman, ,, J., Friedman, ,, R., A., Olsen, C., J., Stone, ,,  , “, Classification, Regression, Trees, ”, ,, Belmont, ,,  ] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('8', 'NUM'), (']', 'PUNCT'), ('L.', 'PROPN'), ('Breiman', 'PROPN'), (',', 'PUNCT'), ('J.', 'PROPN'), ('Friedman', 'PROPN'), (',', 'PUNCT'), ('R.', 'PROPN'), ('A.', 'NOUN'), ('Olsen', 'PROPN'), ('C.', 'PROPN'), ('J.', 'PROPN'), ('Stone', 'PROPN'), (',', 'PUNCT'), (' ', 'SPACE'), ('“', 'PUNCT'), ('Classification', 'PROPN'), ('Regression', 'PROPN'), ('Trees', 'PROPN'), ('”', 'PUNCT'), (',', 'PUNCT'), ('Belmont', 'PROPN'), (',', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('[', 'punct'), ('8', 'nummod'), (']', 'punct'), ('L.', 'compound'), ('Breiman', 'ROOT'), (',', 'punct'), ('J.', 'compound'), ('Friedman', 'conj'), (',', 'punct'), ('R.', 'compound'), ('A.', 'compound'), ('Olsen', 'conj'), ('C.', 'compound'), ('J.', 'compound'), ('Stone', 'conj'), (',', 'punct'), (' ', 'nmod'), ('“', 'punct'), ('Classification', 'nmod'), ('Regression', 'conj'), ('Trees', 'conj'), ('”', 'punct'), (',', 'punct'), ('Belmont', 'appos'), (',', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[[, 8], [8, ]], [], L.], [L., Breiman], [Breiman, ,], [,, J.], [J., Friedman], [Friedman, ,], [,, R.], [R., A.], [A., Olsen], [Olsen, C.], [C., J.], [J., Stone], [Stone, ,], [,,  ], [ , “], [“, Classification], [Classification, Regression], [Regression, Trees], [Trees, ”], [”, ,], [,, Belmont], [Belmont, ,], [,,  ]]

>> Trigrams: 
[[[, 8, ]], [8, ], L.], [], L., Breiman], [L., Breiman, ,], [Breiman, ,, J.], [,, J., Friedman], [J., Friedman, ,], [Friedman, ,, R.], [,, R., A.], [R., A., Olsen], [A., Olsen, C.], [Olsen, C., J.], [C., J., Stone], [J., Stone, ,], [Stone, ,,  ], [,,  , “], [ , “, Classification], [“, Classification, Regression], [Classification, Regression, Trees], [Regression, Trees, ”], [Trees, ”, ,], [”, ,, Belmont], [,, Belmont, ,], [Belmont, ,,  ]]

>> Noun Phrases are: 
[[8] L. Breiman, J. Friedman, R. A. Olsen, C. J. Stone,  “Classification and Regression Trees, Belmont]

>> Named Entities are: 
[('8', 'CARDINAL'), ('L. Breiman', 'PERSON'), ('J. Friedman', 'PERSON'), ('R. A. Olsen', 'PERSON'), ('C. J. Stone', 'PERSON'), ('Classification and Regression Trees”,', 'WORK_OF_ART'), ('Belmont', 'GPE')] 


================================ Paragraph 618 =================================

California: Wadsworth International Group, 1984.  

------------------- Sentence 1 -------------------

California: Wadsworth International Group, 1984. 


>> Tokens are: 
[California, :, Wadsworth, International, Group, ,, 1984, .] 

>> PoS Tags are: 
[('California', 'PROPN'), (':', 'PUNCT'), ('Wadsworth', 'PROPN'), ('International', 'PROPN'), ('Group', 'PROPN'), (',', 'PUNCT'), ('1984', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('California', 'ROOT'), (':', 'punct'), ('Wadsworth', 'compound'), ('International', 'compound'), ('Group', 'appos'), (',', 'punct'), ('1984', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[California, :], [:, Wadsworth], [Wadsworth, International], [International, Group], [Group, ,], [,, 1984], [1984, .]]

>> Trigrams: 
[[California, :, Wadsworth], [:, Wadsworth, International], [Wadsworth, International, Group], [International, Group, ,], [Group, ,, 1984], [,, 1984, .]]

>> Noun Phrases are: 
[California, Wadsworth International Group]

>> Named Entities are: 
[('California', 'GPE'), ('Wadsworth International Group', 'ORG'), ('1984', 'DATE')] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 619 =================================

[9] J. Quinlan, “C4.5: Programs for machine learning”, San  Francisco, CA: Morgan Kaufmann, 1986.  

------------------- Sentence 1 -------------------

[9] J. Quinlan, “C4.5: Programs for machine learning”, San  Francisco, CA: 


>> Tokens are: 
[[, 9, ], J., Quinlan, ,, “, C4.5, :, Programs, machine, learning, ”, ,, San,  , Francisco, ,, :] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('9', 'NUM'), (']', 'PUNCT'), ('J.', 'PROPN'), ('Quinlan', 'PROPN'), (',', 'PUNCT'), ('“', 'PUNCT'), ('C4.5', 'PROPN'), (':', 'PUNCT'), ('Programs', 'NOUN'), ('machine', 'NOUN'), ('learning', 'NOUN'), ('”', 'PUNCT'), (',', 'PUNCT'), ('San', 'PROPN'), (' ', 'SPACE'), ('Francisco', 'PROPN'), (',', 'PUNCT'), (':', 'PUNCT')] 

>> Dependency Tags are: 
[('[', 'punct'), ('9', 'dep'), (']', 'punct'), ('J.', 'compound'), ('Quinlan', 'ROOT'), (',', 'punct'), ('“', 'punct'), ('C4.5', 'acl'), (':', 'punct'), ('Programs', 'nsubj'), ('machine', 'compound'), ('learning', 'pobj'), ('”', 'punct'), (',', 'punct'), ('San', 'nmod'), (' ', 'compound'), ('Francisco', 'conj'), (',', 'punct'), (':', 'punct')]

>> Bigrams: 
[[[, 9], [9, ]], [], J.], [J., Quinlan], [Quinlan, ,], [,, “], [“, C4.5], [C4.5, :], [:, Programs], [Programs, machine], [machine, learning], [learning, ”], [”, ,], [,, San], [San,  ], [ , Francisco], [Francisco, ,], [,, :]]

>> Trigrams: 
[[[, 9, ]], [9, ], J.], [], J., Quinlan], [J., Quinlan, ,], [Quinlan, ,, “], [,, “, C4.5], [“, C4.5, :], [C4.5, :, Programs], [:, Programs, machine], [Programs, machine, learning], [machine, learning, ”], [learning, ”, ,], [”, ,, San], [,, San,  ], [San,  , Francisco], [ , Francisco, ,], [Francisco, ,, :]]

>> Noun Phrases are: 
[[9] J. Quinlan, Programs, machine learning, San  Francisco, CA]

>> Named Entities are: 
[('9', 'CARDINAL'), ('J. Quinlan', 'PERSON')] 

------------------- Sentence 2 -------------------

Morgan Kaufmann, 1986. 


>> Tokens are: 
[Morgan, Kaufmann, ,, 1986, .] 

>> PoS Tags are: 
[('Morgan', 'PROPN'), ('Kaufmann', 'PROPN'), (',', 'PUNCT'), ('1986', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Morgan', 'compound'), ('Kaufmann', 'ROOT'), (',', 'punct'), ('1986', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[Morgan, Kaufmann], [Kaufmann, ,], [,, 1986], [1986, .]]

>> Trigrams: 
[[Morgan, Kaufmann, ,], [Kaufmann, ,, 1986], [,, 1986, .]]

>> Noun Phrases are: 
[Morgan Kaufmann]

>> Named Entities are: 
[('Morgan Kaufmann', 'PERSON'), ('1986', 'DATE')] 

------------------- Sentence 3 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 620 =================================

[10] Masud Karim and Rashedur M. Rahman, “Decision Tree  and Naïve Bayes Algorithm for Classification and  

------------------- Sentence 1 -------------------

[10] Masud Karim and Rashedur M. Rahman, “Decision Tree  and Naïve Bayes Algorithm for Classification and   


>> Tokens are: 
[[, 10, ], Masud, Karim, Rashedur, M., Rahman, ,, “, Decision, Tree,  , Naïve, Bayes, Algorithm, Classification,  ] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('10', 'NUM'), (']', 'PUNCT'), ('Masud', 'PROPN'), ('Karim', 'PROPN'), ('Rashedur', 'PROPN'), ('M.', 'PROPN'), ('Rahman', 'PROPN'), (',', 'PUNCT'), ('“', 'PUNCT'), ('Decision', 'NOUN'), ('Tree', 'PROPN'), (' ', 'SPACE'), ('Naïve', 'PROPN'), ('Bayes', 'PROPN'), ('Algorithm', 'PROPN'), ('Classification', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('[', 'punct'), ('10', 'nummod'), (']', 'punct'), ('Masud', 'compound'), ('Karim', 'ROOT'), ('Rashedur', 'compound'), ('M.', 'compound'), ('Rahman', 'conj'), (',', 'punct'), ('“', 'punct'), ('Decision', 'compound'), ('Tree', 'appos'), (' ', 'appos'), ('Naïve', 'compound'), ('Bayes', 'compound'), ('Algorithm', 'conj'), ('Classification', 'pobj'), (' ', 'conj')]

>> Bigrams: 
[[[, 10], [10, ]], [], Masud], [Masud, Karim], [Karim, Rashedur], [Rashedur, M.], [M., Rahman], [Rahman, ,], [,, “], [“, Decision], [Decision, Tree], [Tree,  ], [ , Naïve], [Naïve, Bayes], [Bayes, Algorithm], [Algorithm, Classification], [Classification,  ]]

>> Trigrams: 
[[[, 10, ]], [10, ], Masud], [], Masud, Karim], [Masud, Karim, Rashedur], [Karim, Rashedur, M.], [Rashedur, M., Rahman], [M., Rahman, ,], [Rahman, ,, “], [,, “, Decision], [“, Decision, Tree], [Decision, Tree,  ], [Tree,  , Naïve], [ , Naïve, Bayes], [Naïve, Bayes, Algorithm], [Bayes, Algorithm, Classification], [Algorithm, Classification,  ]]

>> Noun Phrases are: 
[[10] Masud Karim, Rashedur M. Rahman, “Decision Tree, Naïve Bayes Algorithm, Classification]

>> Named Entities are: 
[('10', 'CARDINAL'), ('Rashedur M. Rahman', 'PERSON'), ('Decision Tree  ', 'WORK_OF_ART'), ('Naïve Bayes Algorithm for Classification', 'ORG')] 


================================ Paragraph 621 =================================

Generation of Actionable Knowledge for Direct  

------------------- Sentence 1 -------------------

Generation of Actionable Knowledge for Direct   


>> Tokens are: 
[Generation, Actionable, Knowledge, Direct,  ] 

>> PoS Tags are: 
[('Generation', 'NOUN'), ('Actionable', 'ADJ'), ('Knowledge', 'PROPN'), ('Direct', 'ADJ'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Generation', 'ROOT'), ('Actionable', 'amod'), ('Knowledge', 'pobj'), ('Direct', 'amod'), (' ', 'pobj')]

>> Bigrams: 
[[Generation, Actionable], [Actionable, Knowledge], [Knowledge, Direct], [Direct,  ]]

>> Trigrams: 
[[Generation, Actionable, Knowledge], [Actionable, Knowledge, Direct], [Knowledge, Direct,  ]]

>> Noun Phrases are: 
[Generation, Actionable Knowledge]

>> Named Entities are: 
[] 


================================ Paragraph 622 =================================

Marketing”, Journal of Software Engineering and  

------------------- Sentence 1 -------------------

Marketing”, Journal of Software Engineering and   


>> Tokens are: 
[Marketing, ”, ,, Journal, Software, Engineering,  ] 

>> PoS Tags are: 
[('Marketing', 'NOUN'), ('”', 'PUNCT'), (',', 'PUNCT'), ('Journal', 'PROPN'), ('Software', 'PROPN'), ('Engineering', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Marketing', 'ROOT'), ('”', 'punct'), (',', 'punct'), ('Journal', 'appos'), ('Software', 'compound'), ('Engineering', 'pobj'), (' ', 'conj')]

>> Bigrams: 
[[Marketing, ”], [”, ,], [,, Journal], [Journal, Software], [Software, Engineering], [Engineering,  ]]

>> Trigrams: 
[[Marketing, ”, ,], [”, ,, Journal], [,, Journal, Software], [Journal, Software, Engineering], [Software, Engineering,  ]]

>> Noun Phrases are: 
[Marketing, Journal, Software Engineering]

>> Named Entities are: 
[('Journal of Software Engineering', 'ORG')] 


================================ Paragraph 623 =================================

Applications, Vol. 6, No. 4, pp. 196-206, 2013.  

------------------- Sentence 1 -------------------

Applications, Vol. 


>> Tokens are: 
[Applications, ,, Vol, .] 

>> PoS Tags are: 
[('Applications', 'NOUN'), (',', 'PUNCT'), ('Vol', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Applications', 'ROOT'), (',', 'punct'), ('Vol', 'npadvmod'), ('.', 'punct')]

>> Bigrams: 
[[Applications, ,], [,, Vol], [Vol, .]]

>> Trigrams: 
[[Applications, ,, Vol], [,, Vol, .]]

>> Noun Phrases are: 
[Applications]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

6, No. 4, pp. 


>> Tokens are: 
[6, ,, ., 4, ,, pp, .] 

>> PoS Tags are: 
[('6', 'NUM'), (',', 'PUNCT'), ('.', 'NOUN'), ('4', 'NUM'), (',', 'PUNCT'), ('pp', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('6', 'ROOT'), (',', 'punct'), ('.', 'punct'), ('4', 'nummod'), (',', 'punct'), ('pp', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[6, ,], [,, .], [., 4], [4, ,], [,, pp], [pp, .]]

>> Trigrams: 
[[6, ,, .], [,, ., 4], [., 4, ,], [4, ,, pp], [,, pp, .]]

>> Noun Phrases are: 
[pp]

>> Named Entities are: 
[('6', 'CARDINAL'), ('4', 'CARDINAL')] 

------------------- Sentence 3 -------------------

196-206, 2013. 


>> Tokens are: 
[196, -, 206, ,, 2013, .] 

>> PoS Tags are: 
[('196', 'NUM'), ('-', 'SYM'), ('206', 'NUM'), (',', 'PUNCT'), ('2013', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('196', 'ROOT'), ('-', 'punct'), ('206', 'prep'), (',', 'punct'), ('2013', 'npadvmod'), ('.', 'punct')]

>> Bigrams: 
[[196, -], [-, 206], [206, ,], [,, 2013], [2013, .]]

>> Trigrams: 
[[196, -, 206], [-, 206, ,], [206, ,, 2013], [,, 2013, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('196', 'CARDINAL')] 

------------------- Sentence 4 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 624 =================================

[11] Earl B. Hunt, Janet Marin and Philip J. Stone, “Experiments  in Induction”, New York: Academic Press, 1966.  

------------------- Sentence 1 -------------------

[11] Earl B. Hunt, Janet Marin and Philip J. Stone, “Experiments  in Induction”, New York: Academic Press, 1966.   


>> Tokens are: 
[[, 11, ], Earl, B., Hunt, ,, Janet, Marin, Philip, J., Stone, ,, “, Experiments,  , Induction, ”, ,, New, York, :, Academic, Press, ,, 1966, .,  ] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('11', 'NUM'), (']', 'PUNCT'), ('Earl', 'PROPN'), ('B.', 'PROPN'), ('Hunt', 'PROPN'), (',', 'PUNCT'), ('Janet', 'PROPN'), ('Marin', 'PROPN'), ('Philip', 'PROPN'), ('J.', 'PROPN'), ('Stone', 'PROPN'), (',', 'PUNCT'), ('“', 'PUNCT'), ('Experiments', 'NOUN'), (' ', 'SPACE'), ('Induction', 'PROPN'), ('”', 'PUNCT'), (',', 'PUNCT'), ('New', 'PROPN'), ('York', 'PROPN'), (':', 'PUNCT'), ('Academic', 'PROPN'), ('Press', 'PROPN'), (',', 'PUNCT'), ('1966', 'NUM'), ('.', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('[', 'punct'), ('11', 'nummod'), (']', 'punct'), ('Earl', 'compound'), ('B.', 'compound'), ('Hunt', 'nsubj'), (',', 'punct'), ('Janet', 'compound'), ('Marin', 'conj'), ('Philip', 'compound'), ('J.', 'compound'), ('Stone', 'conj'), (',', 'punct'), ('“', 'punct'), ('Experiments', 'nmod'), (' ', 'appos'), ('Induction', 'pobj'), ('”', 'punct'), (',', 'punct'), ('New', 'compound'), ('York', 'appos'), (':', 'punct'), ('Academic', 'compound'), ('Press', 'appos'), (',', 'punct'), ('1966', 'appos'), ('.', 'punct'), (' ', 'ROOT')]

>> Bigrams: 
[[[, 11], [11, ]], [], Earl], [Earl, B.], [B., Hunt], [Hunt, ,], [,, Janet], [Janet, Marin], [Marin, Philip], [Philip, J.], [J., Stone], [Stone, ,], [,, “], [“, Experiments], [Experiments,  ], [ , Induction], [Induction, ”], [”, ,], [,, New], [New, York], [York, :], [:, Academic], [Academic, Press], [Press, ,], [,, 1966], [1966, .], [.,  ]]

>> Trigrams: 
[[[, 11, ]], [11, ], Earl], [], Earl, B.], [Earl, B., Hunt], [B., Hunt, ,], [Hunt, ,, Janet], [,, Janet, Marin], [Janet, Marin, Philip], [Marin, Philip, J.], [Philip, J., Stone], [J., Stone, ,], [Stone, ,, “], [,, “, Experiments], [“, Experiments,  ], [Experiments,  , Induction], [ , Induction, ”], [Induction, ”, ,], [”, ,, New], [,, New, York], [New, York, :], [York, :, Academic], [:, Academic, Press], [Academic, Press, ,], [Press, ,, 1966], [,, 1966, .], [1966, .,  ]]

>> Noun Phrases are: 
[[11] Earl B. Hunt, Janet Marin, Philip J. Stone, Induction, New York, Academic Press]

>> Named Entities are: 
[('11', 'CARDINAL'), ('Earl B. Hunt', 'PERSON'), ('Janet Marin', 'PERSON'), ('Philip J. Stone', 'PERSON'), ('Experiments  in Induction”', 'WORK_OF_ART'), ('New York', 'GPE'), ('Academic Press', 'ORG'), ('1966', 'DATE')] 


================================ Paragraph 625 =================================

[12] Leo Breiman, Jerome Friedman, Charles J. Stone and R. A.  Olshen, “Classification and Regression Trees (Wadsworth  

------------------- Sentence 1 -------------------

[12] Leo Breiman, Jerome Friedman, Charles J. Stone and R. A.   


>> Tokens are: 
[[, 12, ], Leo, Breiman, ,, Jerome, Friedman, ,, Charles, J., Stone, R., A.,  ] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('12', 'NUM'), (']', 'PUNCT'), ('Leo', 'PROPN'), ('Breiman', 'PROPN'), (',', 'PUNCT'), ('Jerome', 'PROPN'), ('Friedman', 'PROPN'), (',', 'PUNCT'), ('Charles', 'PROPN'), ('J.', 'PROPN'), ('Stone', 'PROPN'), ('R.', 'PROPN'), ('A.', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('[', 'punct'), ('12', 'nummod'), (']', 'punct'), ('Leo', 'compound'), ('Breiman', 'ROOT'), (',', 'punct'), ('Jerome', 'compound'), ('Friedman', 'appos'), (',', 'punct'), ('Charles', 'compound'), ('J.', 'compound'), ('Stone', 'conj'), ('R.', 'compound'), ('A.', 'compound'), (' ', 'punct')]

>> Bigrams: 
[[[, 12], [12, ]], [], Leo], [Leo, Breiman], [Breiman, ,], [,, Jerome], [Jerome, Friedman], [Friedman, ,], [,, Charles], [Charles, J.], [J., Stone], [Stone, R.], [R., A.], [A.,  ]]

>> Trigrams: 
[[[, 12, ]], [12, ], Leo], [], Leo, Breiman], [Leo, Breiman, ,], [Breiman, ,, Jerome], [,, Jerome, Friedman], [Jerome, Friedman, ,], [Friedman, ,, Charles], [,, Charles, J.], [Charles, J., Stone], [J., Stone, R.], [Stone, R., A.], [R., A.,  ]]

>> Noun Phrases are: 
[[12] Leo Breiman, Jerome Friedman, Charles J. Stone]

>> Named Entities are: 
[('12', 'CARDINAL'), ('Leo Breiman', 'PERSON'), ('Jerome Friedman', 'PERSON'), ('Charles J. Stone', 'PERSON'), ('R. A.', 'PERSON')] 

------------------- Sentence 2 -------------------

Olshen, “Classification and Regression Trees (Wadsworth   


>> Tokens are: 
[Olshen, ,, “, Classification, Regression, Trees, (, Wadsworth,  ] 

>> PoS Tags are: 
[('Olshen', 'PROPN'), (',', 'PUNCT'), ('“', 'PUNCT'), ('Classification', 'PROPN'), ('Regression', 'NOUN'), ('Trees', 'PROPN'), ('(', 'PUNCT'), ('Wadsworth', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Olshen', 'ROOT'), (',', 'punct'), ('“', 'punct'), ('Classification', 'nmod'), ('Regression', 'conj'), ('Trees', 'appos'), ('(', 'punct'), ('Wadsworth', 'appos'), (' ', 'nummod')]

>> Bigrams: 
[[Olshen, ,], [,, “], [“, Classification], [Classification, Regression], [Regression, Trees], [Trees, (], [(, Wadsworth], [Wadsworth,  ]]

>> Trigrams: 
[[Olshen, ,, “], [,, “, Classification], [“, Classification, Regression], [Classification, Regression, Trees], [Regression, Trees, (], [Trees, (, Wadsworth], [(, Wadsworth,  ]]

>> Noun Phrases are: 
[Olshen, Classification and Regression Trees, Wadsworth]

>> Named Entities are: 
[('Classification and Regression Trees', 'WORK_OF_ART')] 


================================ Paragraph 626 =================================

Statistics/Probability)”, Chapman and Hall/CRC, 1984.  

------------------- Sentence 1 -------------------

Statistics/Probability)”, Chapman and Hall/CRC, 1984. 


>> Tokens are: 
[Statistics, /, Probability, ), ”, ,, Chapman, Hall, /, CRC, ,, 1984, .] 

>> PoS Tags are: 
[('Statistics', 'PROPN'), ('/', 'SYM'), ('Probability', 'PROPN'), (')', 'PUNCT'), ('”', 'PUNCT'), (',', 'PUNCT'), ('Chapman', 'PROPN'), ('Hall', 'PROPN'), ('/', 'SYM'), ('CRC', 'PROPN'), (',', 'PUNCT'), ('1984', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Statistics', 'nmod'), ('/', 'punct'), ('Probability', 'ROOT'), (')', 'punct'), ('”', 'punct'), (',', 'punct'), ('Chapman', 'npadvmod'), ('Hall', 'nmod'), ('/', 'punct'), ('CRC', 'conj'), (',', 'punct'), ('1984', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[Statistics, /], [/, Probability], [Probability, )], [), ”], [”, ,], [,, Chapman], [Chapman, Hall], [Hall, /], [/, CRC], [CRC, ,], [,, 1984], [1984, .]]

>> Trigrams: 
[[Statistics, /, Probability], [/, Probability, )], [Probability, ), ”], [), ”, ,], [”, ,, Chapman], [,, Chapman, Hall], [Chapman, Hall, /], [Hall, /, CRC], [/, CRC, ,], [CRC, ,, 1984], [,, 1984, .]]

>> Noun Phrases are: 
[Statistics/Probability]

>> Named Entities are: 
[('Statistics/Probability', 'ORG'), ('Hall/CRC', 'ORG'), ('1984', 'DATE')] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 627 =================================

[13] Steven L. Salzberg, “Book Review: C4.5: Programs for  Machine Learning by J. Ross Quinlan. Inc., 1993”,  

------------------- Sentence 1 -------------------

[13] Steven L. Salzberg, “Book Review: C4.5: Programs for  Machine Learning by J. Ross Quinlan. 


>> Tokens are: 
[[, 13, ], Steven, L., Salzberg, ,, “, Book, Review, :, C4.5, :, Programs,  , Machine, Learning, J., Ross, Quinlan, .] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('13', 'NUM'), (']', 'PUNCT'), ('Steven', 'PROPN'), ('L.', 'PROPN'), ('Salzberg', 'PROPN'), (',', 'PUNCT'), ('“', 'PUNCT'), ('Book', 'PROPN'), ('Review', 'PROPN'), (':', 'PUNCT'), ('C4.5', 'PROPN'), (':', 'PUNCT'), ('Programs', 'NOUN'), (' ', 'SPACE'), ('Machine', 'PROPN'), ('Learning', 'PROPN'), ('J.', 'PROPN'), ('Ross', 'PROPN'), ('Quinlan', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('[', 'punct'), ('13', 'nummod'), (']', 'punct'), ('Steven', 'compound'), ('L.', 'compound'), ('Salzberg', 'ROOT'), (',', 'punct'), ('“', 'punct'), ('Book', 'compound'), ('Review', 'appos'), (':', 'punct'), ('C4.5', 'appos'), (':', 'punct'), ('Programs', 'appos'), (' ', 'pobj'), ('Machine', 'compound'), ('Learning', 'appos'), ('J.', 'compound'), ('Ross', 'compound'), ('Quinlan', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[[, 13], [13, ]], [], Steven], [Steven, L.], [L., Salzberg], [Salzberg, ,], [,, “], [“, Book], [Book, Review], [Review, :], [:, C4.5], [C4.5, :], [:, Programs], [Programs,  ], [ , Machine], [Machine, Learning], [Learning, J.], [J., Ross], [Ross, Quinlan], [Quinlan, .]]

>> Trigrams: 
[[[, 13, ]], [13, ], Steven], [], Steven, L.], [Steven, L., Salzberg], [L., Salzberg, ,], [Salzberg, ,, “], [,, “, Book], [“, Book, Review], [Book, Review, :], [Review, :, C4.5], [:, C4.5, :], [C4.5, :, Programs], [:, Programs,  ], [Programs,  , Machine], [ , Machine, Learning], [Machine, Learning, J.], [Learning, J., Ross], [J., Ross, Quinlan], [Ross, Quinlan, .]]

>> Noun Phrases are: 
[[13] Steven L. Salzberg, Book Review, C4.5, Programs, Machine Learning, J. Ross Quinlan]

>> Named Entities are: 
[('13', 'CARDINAL'), ('Steven L. Salzberg', 'PERSON'), ('Book Review: C4.5: Programs for  Machine Learning', 'WORK_OF_ART'), ('J. Ross Quinlan', 'PERSON')] 

------------------- Sentence 2 -------------------

Inc., 1993”,   


>> Tokens are: 
[Inc., ,, 1993, ”, ,,  ] 

>> PoS Tags are: 
[('Inc.', 'PROPN'), (',', 'PUNCT'), ('1993', 'NUM'), ('”', 'PUNCT'), (',', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Inc.', 'ROOT'), (',', 'punct'), ('1993', 'npadvmod'), ('”', 'punct'), (',', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[Inc., ,], [,, 1993], [1993, ”], [”, ,], [,,  ]]

>> Trigrams: 
[[Inc., ,, 1993], [,, 1993, ”], [1993, ”, ,], [”, ,,  ]]

>> Noun Phrases are: 
[Inc.]

>> Named Entities are: 
[('1993', 'DATE')] 


================================ Paragraph 628 =================================

Machine Learning, Vol. 16, No. 3, pp. 235-240, 1994.  

------------------- Sentence 1 -------------------

Machine Learning, Vol. 


>> Tokens are: 
[Machine, Learning, ,, Vol, .] 

>> PoS Tags are: 
[('Machine', 'PROPN'), ('Learning', 'PROPN'), (',', 'PUNCT'), ('Vol', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Machine', 'compound'), ('Learning', 'ROOT'), (',', 'punct'), ('Vol', 'npadvmod'), ('.', 'punct')]

>> Bigrams: 
[[Machine, Learning], [Learning, ,], [,, Vol], [Vol, .]]

>> Trigrams: 
[[Machine, Learning, ,], [Learning, ,, Vol], [,, Vol, .]]

>> Noun Phrases are: 
[Machine Learning]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

16, No. 3, pp. 


>> Tokens are: 
[16, ,, ., 3, ,, pp, .] 

>> PoS Tags are: 
[('16', 'NUM'), (',', 'PUNCT'), ('.', 'NOUN'), ('3', 'NUM'), (',', 'PUNCT'), ('pp', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('16', 'ROOT'), (',', 'punct'), ('.', 'punct'), ('3', 'nummod'), (',', 'punct'), ('pp', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[16, ,], [,, .], [., 3], [3, ,], [,, pp], [pp, .]]

>> Trigrams: 
[[16, ,, .], [,, ., 3], [., 3, ,], [3, ,, pp], [,, pp, .]]

>> Noun Phrases are: 
[pp]

>> Named Entities are: 
[('16', 'CARDINAL'), ('3', 'CARDINAL')] 

------------------- Sentence 3 -------------------

235-240, 1994. 


>> Tokens are: 
[235, -, 240, ,, 1994, .] 

>> PoS Tags are: 
[('235', 'NUM'), ('-', 'SYM'), ('240', 'NUM'), (',', 'PUNCT'), ('1994', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('235', 'ROOT'), ('-', 'punct'), ('240', 'prep'), (',', 'punct'), ('1994', 'npadvmod'), ('.', 'punct')]

>> Bigrams: 
[[235, -], [-, 240], [240, ,], [,, 1994], [1994, .]]

>> Trigrams: 
[[235, -, 240], [-, 240, ,], [240, ,, 1994], [,, 1994, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('235', 'CARDINAL')] 

------------------- Sentence 4 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 629 =================================

[14] Johannes Fürnkranz, “Separate-and-Conquer Rule Learning”,  Artificial Intelligence Review, Vol. 13, pp. 3-54, 1999.  

------------------- Sentence 1 -------------------

[14] Johannes Fürnkranz, “Separate-and-Conquer Rule Learning”,  Artificial Intelligence Review, Vol. 13, pp. 


>> Tokens are: 
[[, 14, ], Johannes, Fürnkranz, ,, “, Separate, -, -, Conquer, Rule, Learning, ”, ,,  , Artificial, Intelligence, Review, ,, Vol, ., 13, ,, pp, .] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('14', 'NUM'), (']', 'PUNCT'), ('Johannes', 'PROPN'), ('Fürnkranz', 'PROPN'), (',', 'PUNCT'), ('“', 'PUNCT'), ('Separate', 'PROPN'), ('-', 'PUNCT'), ('-', 'PUNCT'), ('Conquer', 'NOUN'), ('Rule', 'PROPN'), ('Learning', 'PROPN'), ('”', 'PUNCT'), (',', 'PUNCT'), (' ', 'SPACE'), ('Artificial', 'PROPN'), ('Intelligence', 'PROPN'), ('Review', 'PROPN'), (',', 'PUNCT'), ('Vol', 'PROPN'), ('.', 'PUNCT'), ('13', 'NUM'), (',', 'PUNCT'), ('pp', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('[', 'punct'), ('14', 'nummod'), (']', 'punct'), ('Johannes', 'compound'), ('Fürnkranz', 'ROOT'), (',', 'punct'), ('“', 'punct'), ('Separate', 'amod'), ('-', 'punct'), ('-', 'punct'), ('Conquer', 'conj'), ('Rule', 'compound'), ('Learning', 'appos'), ('”', 'punct'), (',', 'punct'), (' ', 'compound'), ('Artificial', 'compound'), ('Intelligence', 'compound'), ('Review', 'conj'), (',', 'punct'), ('Vol', 'npadvmod'), ('.', 'punct'), ('13', 'appos'), (',', 'punct'), ('pp', 'intj'), ('.', 'punct')]

>> Bigrams: 
[[[, 14], [14, ]], [], Johannes], [Johannes, Fürnkranz], [Fürnkranz, ,], [,, “], [“, Separate], [Separate, -], [-, -], [-, Conquer], [Conquer, Rule], [Rule, Learning], [Learning, ”], [”, ,], [,,  ], [ , Artificial], [Artificial, Intelligence], [Intelligence, Review], [Review, ,], [,, Vol], [Vol, .], [., 13], [13, ,], [,, pp], [pp, .]]

>> Trigrams: 
[[[, 14, ]], [14, ], Johannes], [], Johannes, Fürnkranz], [Johannes, Fürnkranz, ,], [Fürnkranz, ,, “], [,, “, Separate], [“, Separate, -], [Separate, -, -], [-, -, Conquer], [-, Conquer, Rule], [Conquer, Rule, Learning], [Rule, Learning, ”], [Learning, ”, ,], [”, ,,  ], [,,  , Artificial], [ , Artificial, Intelligence], [Artificial, Intelligence, Review], [Intelligence, Review, ,], [Review, ,, Vol], [,, Vol, .], [Vol, ., 13], [., 13, ,], [13, ,, pp], [,, pp, .]]

>> Noun Phrases are: 
[[14] Johannes Fürnkranz, Separate-and-Conquer Rule Learning,  Artificial Intelligence Review]

>> Named Entities are: 
[('14', 'CARDINAL'), ('13', 'CARDINAL')] 

------------------- Sentence 2 -------------------

3-54, 1999. 


>> Tokens are: 
[3, -, 54, ,, 1999, .] 

>> PoS Tags are: 
[('3', 'NUM'), ('-', 'SYM'), ('54', 'NUM'), (',', 'PUNCT'), ('1999', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('3', 'ROOT'), ('-', 'punct'), ('54', 'prep'), (',', 'punct'), ('1999', 'npadvmod'), ('.', 'punct')]

>> Bigrams: 
[[3, -], [-, 54], [54, ,], [,, 1999], [1999, .]]

>> Trigrams: 
[[3, -, 54], [-, 54, ,], [54, ,, 1999], [,, 1999, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('3-54, 1999', 'DATE')] 

------------------- Sentence 3 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 630 =================================

[15] Aijun An and Nick Cercone, “Discretization of continuous  attributes for learning classification rules”, Third Pacific- 

------------------- Sentence 1 -------------------

[15] Aijun An and Nick Cercone, “Discretization of continuous  attributes for learning classification rules”, 


>> Tokens are: 
[[, 15, ], Aijun, Nick, Cercone, ,, “, Discretization, continuous,  , attributes, learning, classification, rules, ”, ,] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('15', 'NUM'), (']', 'PUNCT'), ('Aijun', 'PROPN'), ('Nick', 'PROPN'), ('Cercone', 'PROPN'), (',', 'PUNCT'), ('“', 'PUNCT'), ('Discretization', 'NOUN'), ('continuous', 'ADJ'), (' ', 'SPACE'), ('attributes', 'NOUN'), ('learning', 'VERB'), ('classification', 'NOUN'), ('rules', 'NOUN'), ('”', 'PUNCT'), (',', 'PUNCT')] 

>> Dependency Tags are: 
[('[', 'punct'), ('15', 'meta'), (']', 'punct'), ('Aijun', 'compound'), ('Nick', 'compound'), ('Cercone', 'conj'), (',', 'punct'), ('“', 'punct'), ('Discretization', 'appos'), ('continuous', 'amod'), (' ', 'compound'), ('attributes', 'pobj'), ('learning', 'pcomp'), ('classification', 'compound'), ('rules', 'dobj'), ('”', 'punct'), (',', 'punct')]

>> Bigrams: 
[[[, 15], [15, ]], [], Aijun], [Aijun, Nick], [Nick, Cercone], [Cercone, ,], [,, “], [“, Discretization], [Discretization, continuous], [continuous,  ], [ , attributes], [attributes, learning], [learning, classification], [classification, rules], [rules, ”], [”, ,]]

>> Trigrams: 
[[[, 15, ]], [15, ], Aijun], [], Aijun, Nick], [Aijun, Nick, Cercone], [Nick, Cercone, ,], [Cercone, ,, “], [,, “, Discretization], [“, Discretization, continuous], [Discretization, continuous,  ], [continuous,  , attributes], [ , attributes, learning], [attributes, learning, classification], [learning, classification, rules], [classification, rules, ”], [rules, ”, ,]]

>> Noun Phrases are: 
[[15] Aijun An, Nick Cercone, Discretization, continuous  attributes, classification rules]

>> Named Entities are: 
[('15', 'CARDINAL'), ('Nick Cercone', 'PERSON')] 

------------------- Sentence 2 -------------------

Third Pacific- 


>> Tokens are: 
[Pacific-] 

>> PoS Tags are: 
[('Pacific-', 'PROPN')] 

>> Dependency Tags are: 
[('Pacific-', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Third Pacific-]

>> Named Entities are: 
[('Third', 'ORDINAL')] 


================================ Paragraph 631 =================================

Asia Conference on Methodologies for Knowledge  

------------------- Sentence 1 -------------------

Asia Conference on Methodologies for Knowledge   


>> Tokens are: 
[Asia, Conference, Methodologies, Knowledge,  ] 

>> PoS Tags are: 
[('Asia', 'PROPN'), ('Conference', 'PROPN'), ('Methodologies', 'PROPN'), ('Knowledge', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Asia', 'compound'), ('Conference', 'ROOT'), ('Methodologies', 'pobj'), ('Knowledge', 'pobj'), (' ', 'punct')]

>> Bigrams: 
[[Asia, Conference], [Conference, Methodologies], [Methodologies, Knowledge], [Knowledge,  ]]

>> Trigrams: 
[[Asia, Conference, Methodologies], [Conference, Methodologies, Knowledge], [Methodologies, Knowledge,  ]]

>> Noun Phrases are: 
[Asia Conference, Methodologies, Knowledge]

>> Named Entities are: 
[] 


================================ Paragraph 632 =================================

Discovery & Data Mining, Vol. 1574, pp. 509-514, 1999.  

------------------- Sentence 1 -------------------

Discovery & Data Mining, Vol. 1574, pp. 


>> Tokens are: 
[Discovery, &, Data, Mining, ,, Vol, ., 1574, ,, pp, .] 

>> PoS Tags are: 
[('Discovery', 'PROPN'), ('&', 'CCONJ'), ('Data', 'PROPN'), ('Mining', 'PROPN'), (',', 'PUNCT'), ('Vol', 'PROPN'), ('.', 'PUNCT'), ('1574', 'NUM'), (',', 'PUNCT'), ('pp', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Discovery', 'ROOT'), ('&', 'cc'), ('Data', 'compound'), ('Mining', 'conj'), (',', 'punct'), ('Vol', 'appos'), ('.', 'punct'), ('1574', 'appos'), (',', 'punct'), ('pp', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[Discovery, &], [&, Data], [Data, Mining], [Mining, ,], [,, Vol], [Vol, .], [., 1574], [1574, ,], [,, pp], [pp, .]]

>> Trigrams: 
[[Discovery, &, Data], [&, Data, Mining], [Data, Mining, ,], [Mining, ,, Vol], [,, Vol, .], [Vol, ., 1574], [., 1574, ,], [1574, ,, pp], [,, pp, .]]

>> Noun Phrases are: 
[Discovery, Data Mining, Vol, pp]

>> Named Entities are: 
[('Discovery & Data Mining', 'ORG'), ('1574', 'DATE')] 

------------------- Sentence 2 -------------------

509-514, 1999. 


>> Tokens are: 
[509, -, 514, ,, 1999, .] 

>> PoS Tags are: 
[('509', 'NUM'), ('-', 'SYM'), ('514', 'NUM'), (',', 'PUNCT'), ('1999', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('509', 'ROOT'), ('-', 'punct'), ('514', 'prep'), (',', 'punct'), ('1999', 'npadvmod'), ('.', 'punct')]

>> Bigrams: 
[[509, -], [-, 514], [514, ,], [,, 1999], [1999, .]]

>> Trigrams: 
[[509, -, 514], [-, 514, ,], [514, ,, 1999], [,, 1999, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('509', 'CARDINAL')] 

------------------- Sentence 3 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 633 =================================

[16] Mehryar Mohri, Afshin Rostamizadeh and Ameet  Talwalkar, “Foundations of Machine Learning”, One  

------------------- Sentence 1 -------------------

[16] Mehryar Mohri, Afshin Rostamizadeh and Ameet   


>> Tokens are: 
[[, 16, ], Mehryar, Mohri, ,, Afshin, Rostamizadeh, Ameet,  ] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('16', 'NUM'), (']', 'PUNCT'), ('Mehryar', 'PROPN'), ('Mohri', 'PROPN'), (',', 'PUNCT'), ('Afshin', 'PROPN'), ('Rostamizadeh', 'PROPN'), ('Ameet', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('[', 'punct'), ('16', 'nummod'), (']', 'punct'), ('Mehryar', 'compound'), ('Mohri', 'ROOT'), (',', 'punct'), ('Afshin', 'compound'), ('Rostamizadeh', 'conj'), ('Ameet', 'compound'), (' ', 'conj')]

>> Bigrams: 
[[[, 16], [16, ]], [], Mehryar], [Mehryar, Mohri], [Mohri, ,], [,, Afshin], [Afshin, Rostamizadeh], [Rostamizadeh, Ameet], [Ameet,  ]]

>> Trigrams: 
[[[, 16, ]], [16, ], Mehryar], [], Mehryar, Mohri], [Mehryar, Mohri, ,], [Mohri, ,, Afshin], [,, Afshin, Rostamizadeh], [Afshin, Rostamizadeh, Ameet], [Rostamizadeh, Ameet,  ]]

>> Noun Phrases are: 
[[16] Mehryar Mohri, Afshin Rostamizadeh]

>> Named Entities are: 
[('16', 'CARDINAL'), ('Mohri', 'PERSON'), ('Afshin Rostamizadeh', 'ORG')] 

------------------- Sentence 2 -------------------

Talwalkar, “Foundations of Machine Learning”, One   


>> Tokens are: 
[Talwalkar, ,, “, Foundations, Machine, Learning, ”, ,,  ] 

>> PoS Tags are: 
[('Talwalkar', 'PROPN'), (',', 'PUNCT'), ('“', 'PUNCT'), ('Foundations', 'PROPN'), ('Machine', 'PROPN'), ('Learning', 'PROPN'), ('”', 'PUNCT'), (',', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Talwalkar', 'ROOT'), (',', 'punct'), ('“', 'punct'), ('Foundations', 'appos'), ('Machine', 'compound'), ('Learning', 'pobj'), ('”', 'punct'), (',', 'punct'), (' ', 'nummod')]

>> Bigrams: 
[[Talwalkar, ,], [,, “], [“, Foundations], [Foundations, Machine], [Machine, Learning], [Learning, ”], [”, ,], [,,  ]]

>> Trigrams: 
[[Talwalkar, ,, “], [,, “, Foundations], [“, Foundations, Machine], [Foundations, Machine, Learning], [Machine, Learning, ”], [Learning, ”, ,], [”, ,,  ]]

>> Noun Phrases are: 
[Talwalkar, Foundations, Machine Learning]

>> Named Entities are: 
[('Foundations of Machine Learning', 'WORK_OF_ART'), ('One', 'CARDINAL')] 


================================ Paragraph 634 =================================

Rogers Street Cambridge MA: The MIT Press, 2012.  

------------------- Sentence 1 -------------------

Rogers Street Cambridge MA: The MIT Press, 2012.   


>> Tokens are: 
[Rogers, Street, Cambridge, MA, :, MIT, Press, ,, 2012, .,  ] 

>> PoS Tags are: 
[('Rogers', 'PROPN'), ('Street', 'PROPN'), ('Cambridge', 'PROPN'), ('MA', 'PROPN'), (':', 'PUNCT'), ('MIT', 'PROPN'), ('Press', 'PROPN'), (',', 'PUNCT'), ('2012', 'NUM'), ('.', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Rogers', 'compound'), ('Street', 'compound'), ('Cambridge', 'compound'), ('MA', 'ROOT'), (':', 'punct'), ('MIT', 'compound'), ('Press', 'appos'), (',', 'punct'), ('2012', 'appos'), ('.', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[Rogers, Street], [Street, Cambridge], [Cambridge, MA], [MA, :], [:, MIT], [MIT, Press], [Press, ,], [,, 2012], [2012, .], [.,  ]]

>> Trigrams: 
[[Rogers, Street, Cambridge], [Street, Cambridge, MA], [Cambridge, MA, :], [MA, :, MIT], [:, MIT, Press], [MIT, Press, ,], [Press, ,, 2012], [,, 2012, .], [2012, .,  ]]

>> Noun Phrases are: 
[Rogers Street Cambridge MA, The MIT Press]

>> Named Entities are: 
[('MA', 'PERSON'), ('The MIT Press', 'ORG'), ('2012', 'DATE')] 


================================ Paragraph 635 =================================

[17] Olivier Bousquet, St´ephane Boucheron and G´abor  Lugosi, “Introduction to Statistical Learning Theory”,  

------------------- Sentence 1 -------------------

[17] Olivier Bousquet, St´ephane Boucheron and G´abor  Lugosi, “Introduction to Statistical Learning Theory”,   


>> Tokens are: 
[[, 17, ], Olivier, Bousquet, ,, St´ephane, Boucheron, G´abor,  , Lugosi, ,, “, Introduction, Statistical, Learning, Theory, ”, ,,  ] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('17', 'NUM'), (']', 'PUNCT'), ('Olivier', 'PROPN'), ('Bousquet', 'PROPN'), (',', 'PUNCT'), ('St´ephane', 'NUM'), ('Boucheron', 'PROPN'), ('G´abor', 'PROPN'), (' ', 'SPACE'), ('Lugosi', 'PROPN'), (',', 'PUNCT'), ('“', 'PUNCT'), ('Introduction', 'NOUN'), ('Statistical', 'PROPN'), ('Learning', 'PROPN'), ('Theory', 'PROPN'), ('”', 'PUNCT'), (',', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('[', 'punct'), ('17', 'dep'), (']', 'punct'), ('Olivier', 'compound'), ('Bousquet', 'ROOT'), (',', 'punct'), ('St´ephane', 'nummod'), ('Boucheron', 'appos'), ('G´abor', 'compound'), (' ', 'compound'), ('Lugosi', 'conj'), (',', 'punct'), ('“', 'punct'), ('Introduction', 'appos'), ('Statistical', 'compound'), ('Learning', 'compound'), ('Theory', 'pobj'), ('”', 'punct'), (',', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[[, 17], [17, ]], [], Olivier], [Olivier, Bousquet], [Bousquet, ,], [,, St´ephane], [St´ephane, Boucheron], [Boucheron, G´abor], [G´abor,  ], [ , Lugosi], [Lugosi, ,], [,, “], [“, Introduction], [Introduction, Statistical], [Statistical, Learning], [Learning, Theory], [Theory, ”], [”, ,], [,,  ]]

>> Trigrams: 
[[[, 17, ]], [17, ], Olivier], [], Olivier, Bousquet], [Olivier, Bousquet, ,], [Bousquet, ,, St´ephane], [,, St´ephane, Boucheron], [St´ephane, Boucheron, G´abor], [Boucheron, G´abor,  ], [G´abor,  , Lugosi], [ , Lugosi, ,], [Lugosi, ,, “], [,, “, Introduction], [“, Introduction, Statistical], [Introduction, Statistical, Learning], [Statistical, Learning, Theory], [Learning, Theory, ”], [Theory, ”, ,], [”, ,,  ]]

>> Noun Phrases are: 
[[17] Olivier Bousquet, St´ephane Boucheron, G´abor  Lugosi, “Introduction, Statistical Learning Theory]

>> Named Entities are: 
[('17', 'CARDINAL'), ('Olivier Bousquet', 'PERSON'), ('Boucheron', 'ORG'), ('Introduction to Statistical Learning Theory', 'ORG')] 


================================ Paragraph 636 =================================

Lecture Notes in Computer Science, Vol. 3176, pp. 175- 

------------------- Sentence 1 -------------------

Lecture Notes in Computer Science, Vol. 


>> Tokens are: 
[Lecture, Notes, Computer, Science, ,, Vol, .] 

>> PoS Tags are: 
[('Lecture', 'PROPN'), ('Notes', 'PROPN'), ('Computer', 'PROPN'), ('Science', 'PROPN'), (',', 'PUNCT'), ('Vol', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Lecture', 'compound'), ('Notes', 'ROOT'), ('Computer', 'compound'), ('Science', 'pobj'), (',', 'punct'), ('Vol', 'npadvmod'), ('.', 'punct')]

>> Bigrams: 
[[Lecture, Notes], [Notes, Computer], [Computer, Science], [Science, ,], [,, Vol], [Vol, .]]

>> Trigrams: 
[[Lecture, Notes, Computer], [Notes, Computer, Science], [Computer, Science, ,], [Science, ,, Vol], [,, Vol, .]]

>> Noun Phrases are: 
[Lecture Notes, Computer Science]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

3176, pp. 


>> Tokens are: 
[3176, ,, pp, .] 

>> PoS Tags are: 
[('3176', 'NUM'), (',', 'PUNCT'), ('pp', 'ADV'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('3176', 'nummod'), (',', 'punct'), ('pp', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[3176, ,], [,, pp], [pp, .]]

>> Trigrams: 
[[3176, ,, pp], [,, pp, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('3176', 'CARDINAL')] 

------------------- Sentence 3 -------------------

175- 


>> Tokens are: 
[175-] 

>> PoS Tags are: 
[('175-', 'NUM')] 

>> Dependency Tags are: 
[('175-', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('175-', 'DATE')] 


================================ Paragraph 637 =================================

213, 2004.  

------------------- Sentence 1 -------------------

213, 2004. 


>> Tokens are: 
[213, ,, 2004, .] 

>> PoS Tags are: 
[('213', 'NUM'), (',', 'PUNCT'), ('2004', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('213', 'ROOT'), (',', 'punct'), ('2004', 'npadvmod'), ('.', 'punct')]

>> Bigrams: 
[[213, ,], [,, 2004], [2004, .]]

>> Trigrams: 
[[213, ,, 2004], [,, 2004, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('213, 2004', 'DATE')] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 638 =================================

[18] Olivier Pourret, Patrick Naim and Bruce Marcot, “Bayesian  Networks: A Practical Guide to Applications”, Wiley  

------------------- Sentence 1 -------------------

[18] Olivier Pourret, Patrick Naim and Bruce Marcot, “Bayesian  Networks: A Practical Guide to Applications”, Wiley   


>> Tokens are: 
[[, 18, ], Olivier, Pourret, ,, Patrick, Naim, Bruce, Marcot, ,, “, Bayesian,  , Networks, :, Practical, Guide, Applications, ”, ,, Wiley,  ] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('18', 'NUM'), (']', 'PUNCT'), ('Olivier', 'PROPN'), ('Pourret', 'PROPN'), (',', 'PUNCT'), ('Patrick', 'PROPN'), ('Naim', 'PROPN'), ('Bruce', 'PROPN'), ('Marcot', 'PROPN'), (',', 'PUNCT'), ('“', 'PUNCT'), ('Bayesian', 'PROPN'), (' ', 'SPACE'), ('Networks', 'NOUN'), (':', 'PUNCT'), ('Practical', 'PROPN'), ('Guide', 'PROPN'), ('Applications', 'PROPN'), ('”', 'PUNCT'), (',', 'PUNCT'), ('Wiley', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('[', 'punct'), ('18', 'nummod'), (']', 'punct'), ('Olivier', 'compound'), ('Pourret', 'ROOT'), (',', 'punct'), ('Patrick', 'compound'), ('Naim', 'conj'), ('Bruce', 'compound'), ('Marcot', 'conj'), (',', 'punct'), ('“', 'punct'), ('Bayesian', 'nmod'), (' ', 'compound'), ('Networks', 'appos'), (':', 'punct'), ('Practical', 'compound'), ('Guide', 'appos'), ('Applications', 'pobj'), ('”', 'punct'), (',', 'punct'), ('Wiley', 'appos'), (' ', 'punct')]

>> Bigrams: 
[[[, 18], [18, ]], [], Olivier], [Olivier, Pourret], [Pourret, ,], [,, Patrick], [Patrick, Naim], [Naim, Bruce], [Bruce, Marcot], [Marcot, ,], [,, “], [“, Bayesian], [Bayesian,  ], [ , Networks], [Networks, :], [:, Practical], [Practical, Guide], [Guide, Applications], [Applications, ”], [”, ,], [,, Wiley], [Wiley,  ]]

>> Trigrams: 
[[[, 18, ]], [18, ], Olivier], [], Olivier, Pourret], [Olivier, Pourret, ,], [Pourret, ,, Patrick], [,, Patrick, Naim], [Patrick, Naim, Bruce], [Naim, Bruce, Marcot], [Bruce, Marcot, ,], [Marcot, ,, “], [,, “, Bayesian], [“, Bayesian,  ], [Bayesian,  , Networks], [ , Networks, :], [Networks, :, Practical], [:, Practical, Guide], [Practical, Guide, Applications], [Guide, Applications, ”], [Applications, ”, ,], [”, ,, Wiley], [,, Wiley,  ]]

>> Noun Phrases are: 
[[18] Olivier Pourret, Patrick Naim, Bruce Marcot, “Bayesian  Networks, A Practical Guide, Applications, Wiley]

>> Named Entities are: 
[('18', 'CARDINAL'), ('Olivier Pourret', 'PERSON'), ('Patrick Naim', 'PERSON'), ('Bruce Marcot', 'PERSON'), ('Bayesian  Networks: A Practical Guide to Applications', 'WORK_OF_ART'), ('Wiley', 'PERSON')] 


================================ Paragraph 639 =================================

Publishers, 2008.  

------------------- Sentence 1 -------------------

Publishers, 2008. 


>> Tokens are: 
[Publishers, ,, 2008, .] 

>> PoS Tags are: 
[('Publishers', 'NOUN'), (',', 'PUNCT'), ('2008', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Publishers', 'ROOT'), (',', 'punct'), ('2008', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[Publishers, ,], [,, 2008], [2008, .]]

>> Trigrams: 
[[Publishers, ,, 2008], [,, 2008, .]]

>> Noun Phrases are: 
[Publishers]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 640 =================================

[19] Kamal Nigam, John Lafferty and Andrew McCallum,  “Using Maximum Entropy for Text Classification”,  

------------------- Sentence 1 -------------------

[19] Kamal Nigam, John Lafferty and Andrew McCallum,  “Using Maximum Entropy for Text Classification”, 


>> Tokens are: 
[[, 19, ], Kamal, Nigam, ,, John, Lafferty, Andrew, McCallum, ,,  , “, Maximum, Entropy, Text, Classification, ”, ,] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('19', 'NUM'), (']', 'PUNCT'), ('Kamal', 'PROPN'), ('Nigam', 'PROPN'), (',', 'PUNCT'), ('John', 'PROPN'), ('Lafferty', 'PROPN'), ('Andrew', 'PROPN'), ('McCallum', 'PROPN'), (',', 'PUNCT'), (' ', 'SPACE'), ('“', 'PUNCT'), ('Maximum', 'PROPN'), ('Entropy', 'PROPN'), ('Text', 'PROPN'), ('Classification', 'PROPN'), ('”', 'PUNCT'), (',', 'PUNCT')] 

>> Dependency Tags are: 
[('[', 'punct'), ('19', 'nummod'), (']', 'punct'), ('Kamal', 'compound'), ('Nigam', 'ROOT'), (',', 'punct'), ('John', 'compound'), ('Lafferty', 'conj'), ('Andrew', 'compound'), ('McCallum', 'conj'), (',', 'punct'), (' ', 'appos'), ('“', 'punct'), ('Maximum', 'compound'), ('Entropy', 'dobj'), ('Text', 'compound'), ('Classification', 'pobj'), ('”', 'punct'), (',', 'punct')]

>> Bigrams: 
[[[, 19], [19, ]], [], Kamal], [Kamal, Nigam], [Nigam, ,], [,, John], [John, Lafferty], [Lafferty, Andrew], [Andrew, McCallum], [McCallum, ,], [,,  ], [ , “], [“, Maximum], [Maximum, Entropy], [Entropy, Text], [Text, Classification], [Classification, ”], [”, ,]]

>> Trigrams: 
[[[, 19, ]], [19, ], Kamal], [], Kamal, Nigam], [Kamal, Nigam, ,], [Nigam, ,, John], [,, John, Lafferty], [John, Lafferty, Andrew], [Lafferty, Andrew, McCallum], [Andrew, McCallum, ,], [McCallum, ,,  ], [,,  , “], [ , “, Maximum], [“, Maximum, Entropy], [Maximum, Entropy, Text], [Entropy, Text, Classification], [Text, Classification, ”], [Classification, ”, ,]]

>> Noun Phrases are: 
[[19] Kamal Nigam, John Lafferty, Andrew McCallum, Maximum Entropy, Text Classification]

>> Named Entities are: 
[('19', 'CARDINAL'), ('John Lafferty', 'PERSON'), ('Andrew McCallum', 'PERSON'), ('Using Maximum Entropy for Text Classification', 'WORK_OF_ART')] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 641 =================================

Workshop on Machine Learning for Information Filtering,  

------------------- Sentence 1 -------------------

Workshop on Machine Learning for Information Filtering,   


>> Tokens are: 
[Workshop, Machine, Learning, Information, Filtering, ,,  ] 

>> PoS Tags are: 
[('Workshop', 'PROPN'), ('Machine', 'PROPN'), ('Learning', 'PROPN'), ('Information', 'PROPN'), ('Filtering', 'PROPN'), (',', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Workshop', 'ROOT'), ('Machine', 'compound'), ('Learning', 'pobj'), ('Information', 'compound'), ('Filtering', 'pobj'), (',', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[Workshop, Machine], [Machine, Learning], [Learning, Information], [Information, Filtering], [Filtering, ,], [,,  ]]

>> Trigrams: 
[[Workshop, Machine, Learning], [Machine, Learning, Information], [Learning, Information, Filtering], [Information, Filtering, ,], [Filtering, ,,  ]]

>> Noun Phrases are: 
[Workshop, Machine Learning, Information Filtering]

>> Named Entities are: 
[] 


================================ Paragraph 642 =================================

pp. 61-67, 1999.  

------------------- Sentence 1 -------------------

pp. 


>> Tokens are: 
[pp, .] 

>> PoS Tags are: 
[('pp', 'ADV'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('pp', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[pp, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

61-67, 1999. 


>> Tokens are: 
[61, -, 67, ,, 1999, .] 

>> PoS Tags are: 
[('61', 'NUM'), ('-', 'SYM'), ('67', 'NUM'), (',', 'PUNCT'), ('1999', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('61', 'ROOT'), ('-', 'punct'), ('67', 'prep'), (',', 'punct'), ('1999', 'npadvmod'), ('.', 'punct')]

>> Bigrams: 
[[61, -], [-, 67], [67, ,], [,, 1999], [1999, .]]

>> Trigrams: 
[[61, -, 67], [-, 67, ,], [67, ,, 1999], [,, 1999, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('61-67, 1999', 'DATE')] 

------------------- Sentence 3 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 643 =================================

[20] N. J. Nilsson, “Learning Machines: Foundations of  Trainable Pattern-Classifying Systems”, First Edition, New  

------------------- Sentence 1 -------------------

[20] N. J. Nilsson, “Learning Machines: Foundations of  Trainable Pattern-Classifying Systems”, First Edition, New   


>> Tokens are: 
[[, 20, ], N., J., Nilsson, ,, “, Learning, Machines, :, Foundations,  , Trainable, Pattern, -, Classifying, Systems, ”, ,, Edition, ,, New,  ] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('20', 'NUM'), (']', 'PUNCT'), ('N.', 'PROPN'), ('J.', 'PROPN'), ('Nilsson', 'PROPN'), (',', 'PUNCT'), ('“', 'PUNCT'), ('Learning', 'PROPN'), ('Machines', 'PROPN'), (':', 'PUNCT'), ('Foundations', 'NOUN'), (' ', 'SPACE'), ('Trainable', 'PROPN'), ('Pattern', 'PROPN'), ('-', 'PUNCT'), ('Classifying', 'PROPN'), ('Systems', 'PROPN'), ('”', 'PUNCT'), (',', 'PUNCT'), ('Edition', 'PROPN'), (',', 'PUNCT'), ('New', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('[', 'punct'), ('20', 'dep'), (']', 'punct'), ('N.', 'compound'), ('J.', 'compound'), ('Nilsson', 'ROOT'), (',', 'punct'), ('“', 'punct'), ('Learning', 'compound'), ('Machines', 'appos'), (':', 'punct'), ('Foundations', 'appos'), (' ', 'pobj'), ('Trainable', 'compound'), ('Pattern', 'compound'), ('-', 'punct'), ('Classifying', 'compound'), ('Systems', 'pobj'), ('”', 'punct'), (',', 'punct'), ('Edition', 'conj'), (',', 'punct'), ('New', 'appos'), (' ', 'punct')]

>> Bigrams: 
[[[, 20], [20, ]], [], N.], [N., J.], [J., Nilsson], [Nilsson, ,], [,, “], [“, Learning], [Learning, Machines], [Machines, :], [:, Foundations], [Foundations,  ], [ , Trainable], [Trainable, Pattern], [Pattern, -], [-, Classifying], [Classifying, Systems], [Systems, ”], [”, ,], [,, Edition], [Edition, ,], [,, New], [New,  ]]

>> Trigrams: 
[[[, 20, ]], [20, ], N.], [], N., J.], [N., J., Nilsson], [J., Nilsson, ,], [Nilsson, ,, “], [,, “, Learning], [“, Learning, Machines], [Learning, Machines, :], [Machines, :, Foundations], [:, Foundations,  ], [Foundations,  , Trainable], [ , Trainable, Pattern], [Trainable, Pattern, -], [Pattern, -, Classifying], [-, Classifying, Systems], [Classifying, Systems, ”], [Systems, ”, ,], [”, ,, Edition], [,, Edition, ,], [Edition, ,, New], [,, New,  ]]

>> Noun Phrases are: 
[[20] N. J. Nilsson, Learning Machines, Foundations, Trainable Pattern-Classifying Systems, First Edition, New]

>> Named Entities are: 
[('20', 'CARDINAL'), ('N. J. Nilsson', 'PERSON'), ('Learning Machines: Foundations of  Trainable Pattern-Classifying Systems', 'WORK_OF_ART'), ('First Edition', 'WORK_OF_ART')] 


================================ Paragraph 644 =================================

York: McGraw-Hill, 1965.  

------------------- Sentence 1 -------------------

York: McGraw-Hill, 1965. 


>> Tokens are: 
[York, :, McGraw, -, Hill, ,, 1965, .] 

>> PoS Tags are: 
[('York', 'NOUN'), (':', 'PUNCT'), ('McGraw', 'PROPN'), ('-', 'PUNCT'), ('Hill', 'PROPN'), (',', 'PUNCT'), ('1965', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('York', 'ROOT'), (':', 'punct'), ('McGraw', 'compound'), ('-', 'punct'), ('Hill', 'appos'), (',', 'punct'), ('1965', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[York, :], [:, McGraw], [McGraw, -], [-, Hill], [Hill, ,], [,, 1965], [1965, .]]

>> Trigrams: 
[[York, :, McGraw], [:, McGraw, -], [McGraw, -, Hill], [-, Hill, ,], [Hill, ,, 1965], [,, 1965, .]]

>> Noun Phrases are: 
[York, McGraw-Hill]

>> Named Entities are: 
[('McGraw-Hill', 'ORG'), ('1965', 'DATE')] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 645 =================================

[21] Isidore Jacob Good, “Probability and the Weighing of  Evidence”, The University of Wisconsin - Madison:  

------------------- Sentence 1 -------------------

[21] Isidore Jacob Good, “Probability and the Weighing of  Evidence”, The University of Wisconsin - Madison:   


>> Tokens are: 
[[, 21, ], Isidore, Jacob, Good, ,, “, Probability, Weighing,  , Evidence, ”, ,, University, Wisconsin, -, Madison, :,  ] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('21', 'NUM'), (']', 'PUNCT'), ('Isidore', 'PROPN'), ('Jacob', 'PROPN'), ('Good', 'PROPN'), (',', 'PUNCT'), ('“', 'PUNCT'), ('Probability', 'NOUN'), ('Weighing', 'PROPN'), (' ', 'SPACE'), ('Evidence', 'NOUN'), ('”', 'PUNCT'), (',', 'PUNCT'), ('University', 'PROPN'), ('Wisconsin', 'PROPN'), ('-', 'PUNCT'), ('Madison', 'PROPN'), (':', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('[', 'punct'), ('21', 'nummod'), (']', 'punct'), ('Isidore', 'compound'), ('Jacob', 'compound'), ('Good', 'ROOT'), (',', 'punct'), ('“', 'punct'), ('Probability', 'appos'), ('Weighing', 'conj'), (' ', 'pobj'), ('Evidence', 'appos'), ('”', 'punct'), (',', 'punct'), ('University', 'conj'), ('Wisconsin', 'pobj'), ('-', 'punct'), ('Madison', 'appos'), (':', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[[, 21], [21, ]], [], Isidore], [Isidore, Jacob], [Jacob, Good], [Good, ,], [,, “], [“, Probability], [Probability, Weighing], [Weighing,  ], [ , Evidence], [Evidence, ”], [”, ,], [,, University], [University, Wisconsin], [Wisconsin, -], [-, Madison], [Madison, :], [:,  ]]

>> Trigrams: 
[[[, 21, ]], [21, ], Isidore], [], Isidore, Jacob], [Isidore, Jacob, Good], [Jacob, Good, ,], [Good, ,, “], [,, “, Probability], [“, Probability, Weighing], [Probability, Weighing,  ], [Weighing,  , Evidence], [ , Evidence, ”], [Evidence, ”, ,], [”, ,, University], [,, University, Wisconsin], [University, Wisconsin, -], [Wisconsin, -, Madison], [-, Madison, :], [Madison, :,  ]]

>> Noun Phrases are: 
[[21] Isidore Jacob Good, Probability, the Weighing, Evidence, The University, Wisconsin, - Madison]

>> Named Entities are: 
[('21', 'CARDINAL'), ('Probability and the Weighing of  Evidence', 'WORK_OF_ART'), ('The University of Wisconsin - Madison', 'ORG')] 


================================ Paragraph 646 =================================

Charles Griffin, 1950.  

------------------- Sentence 1 -------------------

Charles Griffin, 1950.   


>> Tokens are: 
[Charles, Griffin, ,, 1950, .,  ] 

>> PoS Tags are: 
[('Charles', 'PROPN'), ('Griffin', 'PROPN'), (',', 'PUNCT'), ('1950', 'NUM'), ('.', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Charles', 'compound'), ('Griffin', 'ROOT'), (',', 'punct'), ('1950', 'appos'), ('.', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[Charles, Griffin], [Griffin, ,], [,, 1950], [1950, .], [.,  ]]

>> Trigrams: 
[[Charles, Griffin, ,], [Griffin, ,, 1950], [,, 1950, .], [1950, .,  ]]

>> Noun Phrases are: 
[Charles Griffin]

>> Named Entities are: 
[('Charles Griffin', 'PERSON'), ('1950', 'DATE')] 


================================ Paragraph 647 =================================

[22] Shiliang Sun, Changshui Zhang and Guoqiang Yu, “A  Bayesian Network Approach to Traffic Flow Forecasting”,  

------------------- Sentence 1 -------------------

[22] Shiliang Sun, Changshui Zhang and Guoqiang Yu, “A  Bayesian Network Approach to Traffic Flow Forecasting”, 


>> Tokens are: 
[[, 22, ], Shiliang, Sun, ,, Changshui, Zhang, Guoqiang, Yu, ,, “,  , Bayesian, Network, Approach, Traffic, Flow, Forecasting, ”, ,] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('22', 'NUM'), (']', 'PUNCT'), ('Shiliang', 'PROPN'), ('Sun', 'PROPN'), (',', 'PUNCT'), ('Changshui', 'PROPN'), ('Zhang', 'PROPN'), ('Guoqiang', 'PROPN'), ('Yu', 'PROPN'), (',', 'PUNCT'), ('“', 'PUNCT'), (' ', 'SPACE'), ('Bayesian', 'PROPN'), ('Network', 'PROPN'), ('Approach', 'PROPN'), ('Traffic', 'PROPN'), ('Flow', 'PROPN'), ('Forecasting', 'PROPN'), ('”', 'PUNCT'), (',', 'PUNCT')] 

>> Dependency Tags are: 
[('[', 'punct'), ('22', 'nummod'), (']', 'punct'), ('Shiliang', 'compound'), ('Sun', 'ROOT'), (',', 'punct'), ('Changshui', 'compound'), ('Zhang', 'conj'), ('Guoqiang', 'compound'), ('Yu', 'conj'), (',', 'punct'), ('“', 'punct'), (' ', 'amod'), ('Bayesian', 'compound'), ('Network', 'compound'), ('Approach', 'appos'), ('Traffic', 'compound'), ('Flow', 'compound'), ('Forecasting', 'pobj'), ('”', 'punct'), (',', 'punct')]

>> Bigrams: 
[[[, 22], [22, ]], [], Shiliang], [Shiliang, Sun], [Sun, ,], [,, Changshui], [Changshui, Zhang], [Zhang, Guoqiang], [Guoqiang, Yu], [Yu, ,], [,, “], [“,  ], [ , Bayesian], [Bayesian, Network], [Network, Approach], [Approach, Traffic], [Traffic, Flow], [Flow, Forecasting], [Forecasting, ”], [”, ,]]

>> Trigrams: 
[[[, 22, ]], [22, ], Shiliang], [], Shiliang, Sun], [Shiliang, Sun, ,], [Sun, ,, Changshui], [,, Changshui, Zhang], [Changshui, Zhang, Guoqiang], [Zhang, Guoqiang, Yu], [Guoqiang, Yu, ,], [Yu, ,, “], [,, “,  ], [“,  , Bayesian], [ , Bayesian, Network], [Bayesian, Network, Approach], [Network, Approach, Traffic], [Approach, Traffic, Flow], [Traffic, Flow, Forecasting], [Flow, Forecasting, ”], [Forecasting, ”, ,]]

>> Noun Phrases are: 
[[22] Shiliang Sun, Changshui Zhang, Guoqiang Yu, A  Bayesian Network Approach, Traffic Flow Forecasting]

>> Named Entities are: 
[('22', 'CARDINAL'), ('Shiliang Sun', 'PERSON'), ('Changshui Zhang', 'PERSON'), ('Guoqiang Yu', 'PERSON'), ('A  Bayesian Network Approach', 'WORK_OF_ART'), ('Traffic Flow Forecasting', 'ORG')] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 648 =================================

IEEE Transactions on Intelligent Transportation Systems,  

------------------- Sentence 1 -------------------

IEEE Transactions on Intelligent Transportation Systems,   


>> Tokens are: 
[IEEE, Transactions, Intelligent, Transportation, Systems, ,,  ] 

>> PoS Tags are: 
[('IEEE', 'PROPN'), ('Transactions', 'PROPN'), ('Intelligent', 'PROPN'), ('Transportation', 'PROPN'), ('Systems', 'PROPN'), (',', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('IEEE', 'compound'), ('Transactions', 'ROOT'), ('Intelligent', 'compound'), ('Transportation', 'compound'), ('Systems', 'pobj'), (',', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[IEEE, Transactions], [Transactions, Intelligent], [Intelligent, Transportation], [Transportation, Systems], [Systems, ,], [,,  ]]

>> Trigrams: 
[[IEEE, Transactions, Intelligent], [Transactions, Intelligent, Transportation], [Intelligent, Transportation, Systems], [Transportation, Systems, ,], [Systems, ,,  ]]

>> Noun Phrases are: 
[IEEE Transactions, Intelligent Transportation Systems]

>> Named Entities are: 
[('IEEE Transactions', 'ORG'), ('Intelligent Transportation Systems', 'ORG')] 


================================ Paragraph 649 =================================

Vol. 7, No. 1, pp. 124-132, 2006.  

------------------- Sentence 1 -------------------

Vol. 


>> Tokens are: 
[Vol, .] 

>> PoS Tags are: 
[('Vol', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Vol', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Vol, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Vol]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

7, No. 1, pp. 


>> Tokens are: 
[7, ,, ., 1, ,, pp, .] 

>> PoS Tags are: 
[('7', 'NUM'), (',', 'PUNCT'), ('.', 'NOUN'), ('1', 'NUM'), (',', 'PUNCT'), ('pp', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('7', 'ROOT'), (',', 'punct'), ('.', 'npadvmod'), ('1', 'nummod'), (',', 'punct'), ('pp', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[7, ,], [,, .], [., 1], [1, ,], [,, pp], [pp, .]]

>> Trigrams: 
[[7, ,, .], [,, ., 1], [., 1, ,], [1, ,, pp], [,, pp, .]]

>> Noun Phrases are: 
[pp]

>> Named Entities are: 
[('7', 'CARDINAL'), ('1', 'CARDINAL')] 

------------------- Sentence 3 -------------------

124-132, 2006. 


>> Tokens are: 
[124, -, 132, ,, 2006, .] 

>> PoS Tags are: 
[('124', 'NUM'), ('-', 'SYM'), ('132', 'NUM'), (',', 'PUNCT'), ('2006', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('124', 'ROOT'), ('-', 'punct'), ('132', 'prep'), (',', 'punct'), ('2006', 'npadvmod'), ('.', 'punct')]

>> Bigrams: 
[[124, -], [-, 132], [132, ,], [,, 2006], [2006, .]]

>> Trigrams: 
[[124, -, 132], [-, 132, ,], [132, ,, 2006], [,, 2006, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('124', 'CARDINAL')] 

------------------- Sentence 4 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 650 =================================

[23] Jie Cheng, Russell Greiner, Jonathan Kelly, David Bell and  Weiru Liu, “Learning Bayesian networks from data: An  

------------------- Sentence 1 -------------------

[23] Jie Cheng, Russell Greiner, Jonathan Kelly, David Bell and  Weiru Liu, “Learning Bayesian networks from data: 


>> Tokens are: 
[[, 23, ], Jie, Cheng, ,, Russell, Greiner, ,, Jonathan, Kelly, ,, David, Bell,  , Weiru, Liu, ,, “, Learning, Bayesian, networks, data, :] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('23', 'NUM'), (']', 'PUNCT'), ('Jie', 'PROPN'), ('Cheng', 'PROPN'), (',', 'PUNCT'), ('Russell', 'PROPN'), ('Greiner', 'PROPN'), (',', 'PUNCT'), ('Jonathan', 'PROPN'), ('Kelly', 'PROPN'), (',', 'PUNCT'), ('David', 'PROPN'), ('Bell', 'PROPN'), (' ', 'SPACE'), ('Weiru', 'PROPN'), ('Liu', 'PROPN'), (',', 'PUNCT'), ('“', 'PUNCT'), ('Learning', 'PROPN'), ('Bayesian', 'PROPN'), ('networks', 'NOUN'), ('data', 'NOUN'), (':', 'PUNCT')] 

>> Dependency Tags are: 
[('[', 'punct'), ('23', 'nummod'), (']', 'punct'), ('Jie', 'compound'), ('Cheng', 'ROOT'), (',', 'punct'), ('Russell', 'compound'), ('Greiner', 'conj'), (',', 'punct'), ('Jonathan', 'compound'), ('Kelly', 'conj'), (',', 'punct'), ('David', 'compound'), ('Bell', 'conj'), (' ', 'compound'), ('Weiru', 'compound'), ('Liu', 'conj'), (',', 'punct'), ('“', 'punct'), ('Learning', 'compound'), ('Bayesian', 'compound'), ('networks', 'relcl'), ('data', 'pobj'), (':', 'punct')]

>> Bigrams: 
[[[, 23], [23, ]], [], Jie], [Jie, Cheng], [Cheng, ,], [,, Russell], [Russell, Greiner], [Greiner, ,], [,, Jonathan], [Jonathan, Kelly], [Kelly, ,], [,, David], [David, Bell], [Bell,  ], [ , Weiru], [Weiru, Liu], [Liu, ,], [,, “], [“, Learning], [Learning, Bayesian], [Bayesian, networks], [networks, data], [data, :]]

>> Trigrams: 
[[[, 23, ]], [23, ], Jie], [], Jie, Cheng], [Jie, Cheng, ,], [Cheng, ,, Russell], [,, Russell, Greiner], [Russell, Greiner, ,], [Greiner, ,, Jonathan], [,, Jonathan, Kelly], [Jonathan, Kelly, ,], [Kelly, ,, David], [,, David, Bell], [David, Bell,  ], [Bell,  , Weiru], [ , Weiru, Liu], [Weiru, Liu, ,], [Liu, ,, “], [,, “, Learning], [“, Learning, Bayesian], [Learning, Bayesian, networks], [Bayesian, networks, data], [networks, data, :]]

>> Noun Phrases are: 
[[23] Jie Cheng, Russell Greiner, Jonathan Kelly, David Bell,  Weiru Liu, data]

>> Named Entities are: 
[('23', 'CARDINAL'), ('] Jie Cheng', 'PERSON'), ('Russell Greiner', 'PERSON'), ('Jonathan Kelly', 'PERSON'), ('David Bell', 'PERSON'), ('Weiru Liu', 'PERSON'), ('Learning Bayesian', 'WORK_OF_ART')] 

------------------- Sentence 2 -------------------

An   


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 651 =================================

information-Theory based approach”, The Artificial  

------------------- Sentence 1 -------------------

information-Theory based approach”, 


>> Tokens are: 
[information, -, Theory, based, approach, ”, ,] 

>> PoS Tags are: 
[('information', 'NOUN'), ('-', 'PUNCT'), ('Theory', 'NOUN'), ('based', 'VERB'), ('approach', 'NOUN'), ('”', 'PUNCT'), (',', 'PUNCT')] 

>> Dependency Tags are: 
[('information', 'nmod'), ('-', 'punct'), ('Theory', 'nmod'), ('based', 'amod'), ('approach', 'ROOT'), ('”', 'punct'), (',', 'punct')]

>> Bigrams: 
[[information, -], [-, Theory], [Theory, based], [based, approach], [approach, ”], [”, ,]]

>> Trigrams: 
[[information, -, Theory], [-, Theory, based], [Theory, based, approach], [based, approach, ”], [approach, ”, ,]]

>> Noun Phrases are: 
[information-Theory based approach]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

The Artificial   


>> Tokens are: 
[Artificial,  ] 

>> PoS Tags are: 
[('Artificial', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Artificial', 'amod'), (' ', 'ROOT')]

>> Bigrams: 
[[Artificial,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 652 =================================

Intelligence Journal, Vol. 137, pp. 43-90, 2002.  

------------------- Sentence 1 -------------------

Intelligence Journal, Vol. 


>> Tokens are: 
[Intelligence, Journal, ,, Vol, .] 

>> PoS Tags are: 
[('Intelligence', 'PROPN'), ('Journal', 'PROPN'), (',', 'PUNCT'), ('Vol', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Intelligence', 'compound'), ('Journal', 'ROOT'), (',', 'punct'), ('Vol', 'npadvmod'), ('.', 'punct')]

>> Bigrams: 
[[Intelligence, Journal], [Journal, ,], [,, Vol], [Vol, .]]

>> Trigrams: 
[[Intelligence, Journal, ,], [Journal, ,, Vol], [,, Vol, .]]

>> Noun Phrases are: 
[Intelligence Journal]

>> Named Entities are: 
[('Intelligence Journal', 'ORG')] 

------------------- Sentence 2 -------------------

137, pp. 


>> Tokens are: 
[137, ,, pp, .] 

>> PoS Tags are: 
[('137', 'NUM'), (',', 'PUNCT'), ('pp', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('137', 'ROOT'), (',', 'punct'), ('pp', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[137, ,], [,, pp], [pp, .]]

>> Trigrams: 
[[137, ,, pp], [,, pp, .]]

>> Noun Phrases are: 
[pp]

>> Named Entities are: 
[('137', 'CARDINAL')] 

------------------- Sentence 3 -------------------

43-90, 2002. 


>> Tokens are: 
[43, -, 90, ,, 2002, .] 

>> PoS Tags are: 
[('43', 'NUM'), ('-', 'SYM'), ('90', 'NUM'), (',', 'PUNCT'), ('2002', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('43', 'ROOT'), ('-', 'punct'), ('90', 'prep'), (',', 'punct'), ('2002', 'npadvmod'), ('.', 'punct')]

>> Bigrams: 
[[43, -], [-, 90], [90, ,], [,, 2002], [2002, .]]

>> Trigrams: 
[[43, -, 90], [-, 90, ,], [90, ,, 2002], [,, 2002, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('43-90, 2002', 'DATE')] 

------------------- Sentence 4 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 653 =================================

[24] Tom M. Mitchell, “Machine Learning: A Guide to Current  Research”, The Springer International Series in Engineering  

------------------- Sentence 1 -------------------

[24] Tom M. Mitchell, “Machine Learning: 


>> Tokens are: 
[[, 24, ], Tom, M., Mitchell, ,, “, Machine, Learning, :] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('24', 'NUM'), (']', 'PUNCT'), ('Tom', 'PROPN'), ('M.', 'PROPN'), ('Mitchell', 'PROPN'), (',', 'PUNCT'), ('“', 'PUNCT'), ('Machine', 'NOUN'), ('Learning', 'PROPN'), (':', 'PUNCT')] 

>> Dependency Tags are: 
[('[', 'punct'), ('24', 'nummod'), (']', 'punct'), ('Tom', 'compound'), ('M.', 'compound'), ('Mitchell', 'ROOT'), (',', 'punct'), ('“', 'punct'), ('Machine', 'compound'), ('Learning', 'appos'), (':', 'punct')]

>> Bigrams: 
[[[, 24], [24, ]], [], Tom], [Tom, M.], [M., Mitchell], [Mitchell, ,], [,, “], [“, Machine], [Machine, Learning], [Learning, :]]

>> Trigrams: 
[[[, 24, ]], [24, ], Tom], [], Tom, M.], [Tom, M., Mitchell], [M., Mitchell, ,], [Mitchell, ,, “], [,, “, Machine], [“, Machine, Learning], [Machine, Learning, :]]

>> Noun Phrases are: 
[[24] Tom M. Mitchell, “Machine Learning]

>> Named Entities are: 
[('24', 'CARDINAL'), ('Tom M. Mitchell', 'PERSON'), ('Machine Learning:', 'WORK_OF_ART')] 

------------------- Sentence 2 -------------------

A Guide to Current  Research”, The Springer International Series in Engineering   


>> Tokens are: 
[Guide, Current,  , Research, ”, ,, Springer, International, Series, Engineering,  ] 

>> PoS Tags are: 
[('Guide', 'PROPN'), ('Current', 'PROPN'), (' ', 'SPACE'), ('Research', 'PROPN'), ('”', 'PUNCT'), (',', 'PUNCT'), ('Springer', 'PROPN'), ('International', 'PROPN'), ('Series', 'PROPN'), ('Engineering', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Guide', 'ROOT'), ('Current', 'compound'), (' ', 'compound'), ('Research', 'pobj'), ('”', 'punct'), (',', 'punct'), ('Springer', 'compound'), ('International', 'compound'), ('Series', 'appos'), ('Engineering', 'pobj'), (' ', 'punct')]

>> Bigrams: 
[[Guide, Current], [Current,  ], [ , Research], [Research, ”], [”, ,], [,, Springer], [Springer, International], [International, Series], [Series, Engineering], [Engineering,  ]]

>> Trigrams: 
[[Guide, Current,  ], [Current,  , Research], [ , Research, ”], [Research, ”, ,], [”, ,, Springer], [,, Springer, International], [Springer, International, Series], [International, Series, Engineering], [Series, Engineering,  ]]

>> Noun Phrases are: 
[A Guide, Current  Research, The Springer International Series, Engineering]

>> Named Entities are: 
[('The Springer International Series in Engineering', 'WORK_OF_ART')] 


================================ Paragraph 654 =================================

and Computer Science Series, McGraw Hill, 1997.  

------------------- Sentence 1 -------------------

and Computer Science Series, McGraw Hill, 1997. 


>> Tokens are: 
[Computer, Science, Series, ,, McGraw, Hill, ,, 1997, .] 

>> PoS Tags are: 
[('Computer', 'PROPN'), ('Science', 'PROPN'), ('Series', 'PROPN'), (',', 'PUNCT'), ('McGraw', 'PROPN'), ('Hill', 'PROPN'), (',', 'PUNCT'), ('1997', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Computer', 'compound'), ('Science', 'compound'), ('Series', 'ROOT'), (',', 'punct'), ('McGraw', 'compound'), ('Hill', 'appos'), (',', 'punct'), ('1997', 'npadvmod'), ('.', 'punct')]

>> Bigrams: 
[[Computer, Science], [Science, Series], [Series, ,], [,, McGraw], [McGraw, Hill], [Hill, ,], [,, 1997], [1997, .]]

>> Trigrams: 
[[Computer, Science, Series], [Science, Series, ,], [Series, ,, McGraw], [,, McGraw, Hill], [McGraw, Hill, ,], [Hill, ,, 1997], [,, 1997, .]]

>> Noun Phrases are: 
[and Computer Science Series, McGraw Hill]

>> Named Entities are: 
[('McGraw Hill', 'ORG'), ('1997', 'DATE')] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 655 =================================

[25] D. Aha, “Lazy Learning”, Dordrecht: Kluwer Academic  Publishers, 1997.  

------------------- Sentence 1 -------------------

[25] D. Aha, “Lazy Learning”, Dordrecht: 


>> Tokens are: 
[[, 25, ], D., Aha, ,, “, Lazy, Learning, ”, ,, Dordrecht, :] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('25', 'NUM'), (']', 'PUNCT'), ('D.', 'PROPN'), ('Aha', 'PROPN'), (',', 'PUNCT'), ('“', 'PUNCT'), ('Lazy', 'PROPN'), ('Learning', 'PROPN'), ('”', 'PUNCT'), (',', 'PUNCT'), ('Dordrecht', 'NOUN'), (':', 'PUNCT')] 

>> Dependency Tags are: 
[('[', 'punct'), ('25', 'dep'), (']', 'punct'), ('D.', 'compound'), ('Aha', 'ROOT'), (',', 'punct'), ('“', 'punct'), ('Lazy', 'compound'), ('Learning', 'appos'), ('”', 'punct'), (',', 'punct'), ('Dordrecht', 'appos'), (':', 'punct')]

>> Bigrams: 
[[[, 25], [25, ]], [], D.], [D., Aha], [Aha, ,], [,, “], [“, Lazy], [Lazy, Learning], [Learning, ”], [”, ,], [,, Dordrecht], [Dordrecht, :]]

>> Trigrams: 
[[[, 25, ]], [25, ], D.], [], D., Aha], [D., Aha, ,], [Aha, ,, “], [,, “, Lazy], [“, Lazy, Learning], [Lazy, Learning, ”], [Learning, ”, ,], [”, ,, Dordrecht], [,, Dordrecht, :]]

>> Noun Phrases are: 
[[25] D. Aha, Lazy Learning, Dordrecht]

>> Named Entities are: 
[('25', 'CARDINAL'), ('Lazy Learning', 'WORK_OF_ART'), ('Dordrecht:', 'WORK_OF_ART')] 

------------------- Sentence 2 -------------------

Kluwer Academic  Publishers, 1997. 


>> Tokens are: 
[Kluwer, Academic,  , Publishers, ,, 1997, .] 

>> PoS Tags are: 
[('Kluwer', 'PROPN'), ('Academic', 'PROPN'), (' ', 'SPACE'), ('Publishers', 'PROPN'), (',', 'PUNCT'), ('1997', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Kluwer', 'compound'), ('Academic', 'nmod'), (' ', 'punct'), ('Publishers', 'ROOT'), (',', 'punct'), ('1997', 'npadvmod'), ('.', 'punct')]

>> Bigrams: 
[[Kluwer, Academic], [Academic,  ], [ , Publishers], [Publishers, ,], [,, 1997], [1997, .]]

>> Trigrams: 
[[Kluwer, Academic,  ], [Academic,  , Publishers], [ , Publishers, ,], [Publishers, ,, 1997], [,, 1997, .]]

>> Noun Phrases are: 
[Kluwer Academic  Publishers]

>> Named Entities are: 
[('1997', 'DATE')] 

------------------- Sentence 3 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 656 =================================

[26] Ramon Lopez De Mantaras and Eva Armengol, “Machine  learning from examples: Inductive and Lazy methods”, Data and  

------------------- Sentence 1 -------------------

[26] Ramon Lopez De Mantaras and Eva Armengol, “Machine  learning from examples: Inductive and Lazy methods”, Data and   


>> Tokens are: 
[[, 26, ], Ramon, Lopez, De, Mantaras, Eva, Armengol, ,, “, Machine,  , learning, examples, :, Inductive, Lazy, methods, ”, ,, Data,  ] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('26', 'NUM'), (']', 'PUNCT'), ('Ramon', 'PROPN'), ('Lopez', 'PROPN'), ('De', 'PROPN'), ('Mantaras', 'PROPN'), ('Eva', 'PROPN'), ('Armengol', 'PROPN'), (',', 'PUNCT'), ('“', 'PUNCT'), ('Machine', 'NOUN'), (' ', 'SPACE'), ('learning', 'VERB'), ('examples', 'NOUN'), (':', 'PUNCT'), ('Inductive', 'PROPN'), ('Lazy', 'PROPN'), ('methods', 'NOUN'), ('”', 'PUNCT'), (',', 'PUNCT'), ('Data', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('[', 'punct'), ('26', 'nmod'), (']', 'punct'), ('Ramon', 'compound'), ('Lopez', 'compound'), ('De', 'compound'), ('Mantaras', 'ROOT'), ('Eva', 'compound'), ('Armengol', 'conj'), (',', 'punct'), ('“', 'punct'), ('Machine', 'compound'), (' ', 'nsubj'), ('learning', 'acl'), ('examples', 'pobj'), (':', 'punct'), ('Inductive', 'amod'), ('Lazy', 'conj'), ('methods', 'appos'), ('”', 'punct'), (',', 'punct'), ('Data', 'conj'), (' ', 'conj')]

>> Bigrams: 
[[[, 26], [26, ]], [], Ramon], [Ramon, Lopez], [Lopez, De], [De, Mantaras], [Mantaras, Eva], [Eva, Armengol], [Armengol, ,], [,, “], [“, Machine], [Machine,  ], [ , learning], [learning, examples], [examples, :], [:, Inductive], [Inductive, Lazy], [Lazy, methods], [methods, ”], [”, ,], [,, Data], [Data,  ]]

>> Trigrams: 
[[[, 26, ]], [26, ], Ramon], [], Ramon, Lopez], [Ramon, Lopez, De], [Lopez, De, Mantaras], [De, Mantaras, Eva], [Mantaras, Eva, Armengol], [Eva, Armengol, ,], [Armengol, ,, “], [,, “, Machine], [“, Machine,  ], [Machine,  , learning], [ , learning, examples], [learning, examples, :], [examples, :, Inductive], [:, Inductive, Lazy], [Inductive, Lazy, methods], [Lazy, methods, ”], [methods, ”, ,], [”, ,, Data], [,, Data,  ]]

>> Noun Phrases are: 
[[26] Ramon Lopez De Mantaras, Eva Armengol, examples, Inductive and Lazy methods, Data]

>> Named Entities are: 
[('26', 'CARDINAL'), ('Eva Armengol', 'PERSON'), ('Machine  ', 'WORK_OF_ART'), ('Data', 'ORG')] 


================================ Paragraph 657 =================================

Knowledge Engineering, Vol. 25, No. 1-2, pp. 99-123, 1998.  

------------------- Sentence 1 -------------------

Knowledge Engineering, Vol. 


>> Tokens are: 
[Knowledge, Engineering, ,, Vol, .] 

>> PoS Tags are: 
[('Knowledge', 'PROPN'), ('Engineering', 'PROPN'), (',', 'PUNCT'), ('Vol', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Knowledge', 'compound'), ('Engineering', 'ROOT'), (',', 'punct'), ('Vol', 'npadvmod'), ('.', 'punct')]

>> Bigrams: 
[[Knowledge, Engineering], [Engineering, ,], [,, Vol], [Vol, .]]

>> Trigrams: 
[[Knowledge, Engineering, ,], [Engineering, ,, Vol], [,, Vol, .]]

>> Noun Phrases are: 
[Knowledge Engineering]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

25, No. 1-2, pp. 


>> Tokens are: 
[25, ,, ., 1, -, 2, ,, pp, .] 

>> PoS Tags are: 
[('25', 'NUM'), (',', 'PUNCT'), ('.', 'NOUN'), ('1', 'NUM'), ('-', 'SYM'), ('2', 'NUM'), (',', 'PUNCT'), ('pp', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('25', 'nummod'), (',', 'punct'), ('.', 'appos'), ('1', 'nummod'), ('-', 'punct'), ('2', 'prep'), (',', 'punct'), ('pp', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[25, ,], [,, .], [., 1], [1, -], [-, 2], [2, ,], [,, pp], [pp, .]]

>> Trigrams: 
[[25, ,, .], [,, ., 1], [., 1, -], [1, -, 2], [-, 2, ,], [2, ,, pp], [,, pp, .]]

>> Noun Phrases are: 
[., pp]

>> Named Entities are: 
[('25', 'CARDINAL'), ('1', 'CARDINAL')] 

------------------- Sentence 3 -------------------

99-123, 1998. 


>> Tokens are: 
[99, -, 123, ,, 1998, .] 

>> PoS Tags are: 
[('99', 'NUM'), ('-', 'SYM'), ('123', 'NUM'), (',', 'PUNCT'), ('1998', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('99', 'ROOT'), ('-', 'punct'), ('123', 'prep'), (',', 'punct'), ('1998', 'npadvmod'), ('.', 'punct')]

>> Bigrams: 
[[99, -], [-, 123], [123, ,], [,, 1998], [1998, .]]

>> Trigrams: 
[[99, -, 123], [-, 123, ,], [123, ,, 1998], [,, 1998, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('99', 'CARDINAL')] 

------------------- Sentence 4 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 658 =================================

[27] Hamid Parvin, Hoseinali Alizadeh and Behrouz Minati, “A  Modification on K-Nearest Neighbor Classifier”, Global  

------------------- Sentence 1 -------------------

[27] Hamid Parvin, Hoseinali Alizadeh and Behrouz Minati, “A  Modification on K-Nearest Neighbor Classifier”, Global   


>> Tokens are: 
[[, 27, ], Hamid, Parvin, ,, Hoseinali, Alizadeh, Behrouz, Minati, ,, “,  , Modification, K, -, Nearest, Neighbor, Classifier, ”, ,, Global,  ] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('27', 'NUM'), (']', 'PUNCT'), ('Hamid', 'PROPN'), ('Parvin', 'PROPN'), (',', 'PUNCT'), ('Hoseinali', 'PROPN'), ('Alizadeh', 'PROPN'), ('Behrouz', 'PROPN'), ('Minati', 'PROPN'), (',', 'PUNCT'), ('“', 'PUNCT'), (' ', 'SPACE'), ('Modification', 'NOUN'), ('K', 'PROPN'), ('-', 'PUNCT'), ('Nearest', 'PROPN'), ('Neighbor', 'PROPN'), ('Classifier', 'PROPN'), ('”', 'PUNCT'), (',', 'PUNCT'), ('Global', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('[', 'punct'), ('27', 'nummod'), (']', 'punct'), ('Hamid', 'compound'), ('Parvin', 'ROOT'), (',', 'punct'), ('Hoseinali', 'compound'), ('Alizadeh', 'conj'), ('Behrouz', 'compound'), ('Minati', 'conj'), (',', 'punct'), ('“', 'punct'), (' ', 'compound'), ('Modification', 'appos'), ('K', 'compound'), ('-', 'punct'), ('Nearest', 'compound'), ('Neighbor', 'compound'), ('Classifier', 'pobj'), ('”', 'punct'), (',', 'punct'), ('Global', 'appos'), (' ', 'nummod')]

>> Bigrams: 
[[[, 27], [27, ]], [], Hamid], [Hamid, Parvin], [Parvin, ,], [,, Hoseinali], [Hoseinali, Alizadeh], [Alizadeh, Behrouz], [Behrouz, Minati], [Minati, ,], [,, “], [“,  ], [ , Modification], [Modification, K], [K, -], [-, Nearest], [Nearest, Neighbor], [Neighbor, Classifier], [Classifier, ”], [”, ,], [,, Global], [Global,  ]]

>> Trigrams: 
[[[, 27, ]], [27, ], Hamid], [], Hamid, Parvin], [Hamid, Parvin, ,], [Parvin, ,, Hoseinali], [,, Hoseinali, Alizadeh], [Hoseinali, Alizadeh, Behrouz], [Alizadeh, Behrouz, Minati], [Behrouz, Minati, ,], [Minati, ,, “], [,, “,  ], [“,  , Modification], [ , Modification, K], [Modification, K, -], [K, -, Nearest], [-, Nearest, Neighbor], [Nearest, Neighbor, Classifier], [Neighbor, Classifier, ”], [Classifier, ”, ,], [”, ,, Global], [,, Global,  ]]

>> Noun Phrases are: 
[[27] Hamid Parvin, Hoseinali Alizadeh, Behrouz Minati, “A  Modification, K-Nearest Neighbor Classifier, Global]

>> Named Entities are: 
[('27', 'CARDINAL'), ('Hamid Parvin', 'PERSON'), ('Behrouz Minati', 'PERSON'), ('A  Modification on K-Nearest Neighbor Classifier', 'WORK_OF_ART'), ('Global  ', 'PRODUCT')] 


================================ Paragraph 659 =================================

Journal of Computer Science and Technology, Vol. 10, No.  

------------------- Sentence 1 -------------------

Journal of Computer Science and Technology, Vol. 


>> Tokens are: 
[Journal, Computer, Science, Technology, ,, Vol, .] 

>> PoS Tags are: 
[('Journal', 'PROPN'), ('Computer', 'PROPN'), ('Science', 'PROPN'), ('Technology', 'PROPN'), (',', 'PUNCT'), ('Vol', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Journal', 'ROOT'), ('Computer', 'compound'), ('Science', 'pobj'), ('Technology', 'conj'), (',', 'punct'), ('Vol', 'npadvmod'), ('.', 'punct')]

>> Bigrams: 
[[Journal, Computer], [Computer, Science], [Science, Technology], [Technology, ,], [,, Vol], [Vol, .]]

>> Trigrams: 
[[Journal, Computer, Science], [Computer, Science, Technology], [Science, Technology, ,], [Technology, ,, Vol], [,, Vol, .]]

>> Noun Phrases are: 
[Journal, Computer Science, Technology]

>> Named Entities are: 
[('Journal of Computer Science and Technology', 'ORG')] 

------------------- Sentence 2 -------------------

10, No. 


>> Tokens are: 
[10, ,, .] 

>> PoS Tags are: 
[('10', 'NUM'), (',', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('10', 'ROOT'), (',', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[10, ,], [,, .]]

>> Trigrams: 
[[10, ,, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('10', 'CARDINAL')] 

------------------- Sentence 3 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 660 =================================

14 (Ver.1.0), pp. 37-41, 2010.  

------------------- Sentence 1 -------------------

14 (Ver.1.0), pp. 


>> Tokens are: 
[14, (, Ver.1.0, ), ,, pp, .] 

>> PoS Tags are: 
[('14', 'NUM'), ('(', 'PUNCT'), ('Ver.1.0', 'NOUN'), (')', 'PUNCT'), (',', 'PUNCT'), ('pp', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('14', 'nummod'), ('(', 'punct'), ('Ver.1.0', 'ROOT'), (')', 'punct'), (',', 'punct'), ('pp', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[14, (], [(, Ver.1.0], [Ver.1.0, )], [), ,], [,, pp], [pp, .]]

>> Trigrams: 
[[14, (, Ver.1.0], [(, Ver.1.0, )], [Ver.1.0, ), ,], [), ,, pp], [,, pp, .]]

>> Noun Phrases are: 
[14 (Ver.1.0, pp]

>> Named Entities are: 
[('14', 'CARDINAL')] 

------------------- Sentence 2 -------------------

37-41, 2010. 


>> Tokens are: 
[37, -, 41, ,, 2010, .] 

>> PoS Tags are: 
[('37', 'NUM'), ('-', 'SYM'), ('41', 'NUM'), (',', 'PUNCT'), ('2010', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('37', 'ROOT'), ('-', 'punct'), ('41', 'prep'), (',', 'punct'), ('2010', 'npadvmod'), ('.', 'punct')]

>> Bigrams: 
[[37, -], [-, 41], [41, ,], [,, 2010], [2010, .]]

>> Trigrams: 
[[37, -, 41], [-, 41, ,], [41, ,, 2010], [,, 2010, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('37', 'CARDINAL')] 

------------------- Sentence 3 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 661 =================================

[28] Yen-Liang Chen and Lucas Tzu-Hsuan Hung, “Using  decision trees to summarize associative classification  

------------------- Sentence 1 -------------------

[28] Yen-Liang Chen and Lucas Tzu-Hsuan Hung, “Using  decision trees to summarize associative classification   


>> Tokens are: 
[[, 28, ], Yen, -, Liang, Chen, Lucas, Tzu, -, Hsuan, Hung, ,, “,  , decision, trees, summarize, associative, classification,  ] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('28', 'NUM'), (']', 'PUNCT'), ('Yen', 'PROPN'), ('-', 'PUNCT'), ('Liang', 'PROPN'), ('Chen', 'PROPN'), ('Lucas', 'PROPN'), ('Tzu', 'PROPN'), ('-', 'PUNCT'), ('Hsuan', 'PROPN'), ('Hung', 'PROPN'), (',', 'PUNCT'), ('“', 'PUNCT'), (' ', 'SPACE'), ('decision', 'NOUN'), ('trees', 'NOUN'), ('summarize', 'VERB'), ('associative', 'ADJ'), ('classification', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('[', 'punct'), ('28', 'nummod'), (']', 'punct'), ('Yen', 'compound'), ('-', 'punct'), ('Liang', 'compound'), ('Chen', 'ROOT'), ('Lucas', 'compound'), ('Tzu', 'compound'), ('-', 'punct'), ('Hsuan', 'compound'), ('Hung', 'conj'), (',', 'punct'), ('“', 'punct'), (' ', 'dobj'), ('decision', 'compound'), ('trees', 'dobj'), ('summarize', 'xcomp'), ('associative', 'amod'), ('classification', 'dobj'), (' ', 'nummod')]

>> Bigrams: 
[[[, 28], [28, ]], [], Yen], [Yen, -], [-, Liang], [Liang, Chen], [Chen, Lucas], [Lucas, Tzu], [Tzu, -], [-, Hsuan], [Hsuan, Hung], [Hung, ,], [,, “], [“,  ], [ , decision], [decision, trees], [trees, summarize], [summarize, associative], [associative, classification], [classification,  ]]

>> Trigrams: 
[[[, 28, ]], [28, ], Yen], [], Yen, -], [Yen, -, Liang], [-, Liang, Chen], [Liang, Chen, Lucas], [Chen, Lucas, Tzu], [Lucas, Tzu, -], [Tzu, -, Hsuan], [-, Hsuan, Hung], [Hsuan, Hung, ,], [Hung, ,, “], [,, “,  ], [“,  , decision], [ , decision, trees], [decision, trees, summarize], [trees, summarize, associative], [summarize, associative, classification], [associative, classification,  ]]

>> Noun Phrases are: 
[[28] Yen-Liang Chen, Lucas Tzu-Hsuan Hung, decision trees, associative classification]

>> Named Entities are: 
[('28', 'CARDINAL'), ('Yen-Liang Chen', 'PERSON'), ('Lucas Tzu-Hsuan Hung', 'ORG')] 


================================ Paragraph 662 =================================

rules”, Expert Systems with Applications, Vol. 36, No. 2,  

------------------- Sentence 1 -------------------

rules”, Expert Systems with Applications, Vol. 


>> Tokens are: 
[rules, ”, ,, Expert, Systems, Applications, ,, Vol, .] 

>> PoS Tags are: 
[('rules', 'NOUN'), ('”', 'PUNCT'), (',', 'PUNCT'), ('Expert', 'PROPN'), ('Systems', 'PROPN'), ('Applications', 'PROPN'), (',', 'PUNCT'), ('Vol', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('rules', 'ROOT'), ('”', 'punct'), (',', 'punct'), ('Expert', 'compound'), ('Systems', 'appos'), ('Applications', 'pobj'), (',', 'punct'), ('Vol', 'npadvmod'), ('.', 'punct')]

>> Bigrams: 
[[rules, ”], [”, ,], [,, Expert], [Expert, Systems], [Systems, Applications], [Applications, ,], [,, Vol], [Vol, .]]

>> Trigrams: 
[[rules, ”, ,], [”, ,, Expert], [,, Expert, Systems], [Expert, Systems, Applications], [Systems, Applications, ,], [Applications, ,, Vol], [,, Vol, .]]

>> Noun Phrases are: 
[rules, Expert Systems, Applications]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

36, No. 2, 


>> Tokens are: 
[36, ,, ., 2, ,] 

>> PoS Tags are: 
[('36', 'NUM'), (',', 'PUNCT'), ('.', 'NOUN'), ('2', 'NUM'), (',', 'PUNCT')] 

>> Dependency Tags are: 
[('36', 'nummod'), (',', 'punct'), ('.', 'appos'), ('2', 'nummod'), (',', 'punct')]

>> Bigrams: 
[[36, ,], [,, .], [., 2], [2, ,]]

>> Trigrams: 
[[36, ,, .], [,, ., 2], [., 2, ,]]

>> Noun Phrases are: 
[.]

>> Named Entities are: 
[('36', 'CARDINAL'), ('2', 'CARDINAL')] 

------------------- Sentence 3 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 663 =================================

Part 1, pp. 2338-2351, 2009.  

------------------- Sentence 1 -------------------

Part 1, pp. 


>> Tokens are: 
[1, ,, pp, .] 

>> PoS Tags are: 
[('1', 'NUM'), (',', 'PUNCT'), ('pp', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('1', 'nummod'), (',', 'punct'), ('pp', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[1, ,], [,, pp], [pp, .]]

>> Trigrams: 
[[1, ,, pp], [,, pp, .]]

>> Noun Phrases are: 
[Part, pp]

>> Named Entities are: 
[('1', 'CARDINAL')] 

------------------- Sentence 2 -------------------

2338-2351, 2009. 


>> Tokens are: 
[2338, -, 2351, ,, 2009, .] 

>> PoS Tags are: 
[('2338', 'NUM'), ('-', 'SYM'), ('2351', 'NUM'), (',', 'PUNCT'), ('2009', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('2338', 'ROOT'), ('-', 'punct'), ('2351', 'prep'), (',', 'punct'), ('2009', 'npadvmod'), ('.', 'punct')]

>> Bigrams: 
[[2338, -], [-, 2351], [2351, ,], [,, 2009], [2009, .]]

>> Trigrams: 
[[2338, -, 2351], [-, 2351, ,], [2351, ,, 2009], [,, 2009, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('2338-2351', 'DATE'), ('2009', 'DATE')] 

------------------- Sentence 3 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 664 =================================

[29] Samy Bengio, Li Deng, Hugo Larochelle, Honglak Lee, and  Ruslan Salakhutdinov, “Guest Editors’ Introduction: Special  

------------------- Sentence 1 -------------------

[29] Samy Bengio, Li Deng, Hugo Larochelle, Honglak Lee, and  Ruslan Salakhutdinov, “Guest Editors’ Introduction: 


>> Tokens are: 
[[, 29, ], Samy, Bengio, ,, Li, Deng, ,, Hugo, Larochelle, ,, Honglak, Lee, ,,  , Ruslan, Salakhutdinov, ,, “, Guest, Editors, ’, Introduction, :] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('29', 'NUM'), (']', 'PUNCT'), ('Samy', 'PROPN'), ('Bengio', 'PROPN'), (',', 'PUNCT'), ('Li', 'PROPN'), ('Deng', 'PROPN'), (',', 'PUNCT'), ('Hugo', 'PROPN'), ('Larochelle', 'PROPN'), (',', 'PUNCT'), ('Honglak', 'PROPN'), ('Lee', 'PROPN'), (',', 'PUNCT'), (' ', 'SPACE'), ('Ruslan', 'PROPN'), ('Salakhutdinov', 'PROPN'), (',', 'PUNCT'), ('“', 'PUNCT'), ('Guest', 'PROPN'), ('Editors', 'NOUN'), ('’', 'PUNCT'), ('Introduction', 'NOUN'), (':', 'PUNCT')] 

>> Dependency Tags are: 
[('[', 'punct'), ('29', 'nummod'), (']', 'punct'), ('Samy', 'compound'), ('Bengio', 'ROOT'), (',', 'punct'), ('Li', 'compound'), ('Deng', 'conj'), (',', 'punct'), ('Hugo', 'compound'), ('Larochelle', 'conj'), (',', 'punct'), ('Honglak', 'compound'), ('Lee', 'conj'), (',', 'punct'), (' ', 'compound'), ('Ruslan', 'compound'), ('Salakhutdinov', 'conj'), (',', 'punct'), ('“', 'punct'), ('Guest', 'compound'), ('Editors', 'nmod'), ('’', 'punct'), ('Introduction', 'appos'), (':', 'punct')]

>> Bigrams: 
[[[, 29], [29, ]], [], Samy], [Samy, Bengio], [Bengio, ,], [,, Li], [Li, Deng], [Deng, ,], [,, Hugo], [Hugo, Larochelle], [Larochelle, ,], [,, Honglak], [Honglak, Lee], [Lee, ,], [,,  ], [ , Ruslan], [Ruslan, Salakhutdinov], [Salakhutdinov, ,], [,, “], [“, Guest], [Guest, Editors], [Editors, ’], [’, Introduction], [Introduction, :]]

>> Trigrams: 
[[[, 29, ]], [29, ], Samy], [], Samy, Bengio], [Samy, Bengio, ,], [Bengio, ,, Li], [,, Li, Deng], [Li, Deng, ,], [Deng, ,, Hugo], [,, Hugo, Larochelle], [Hugo, Larochelle, ,], [Larochelle, ,, Honglak], [,, Honglak, Lee], [Honglak, Lee, ,], [Lee, ,,  ], [,,  , Ruslan], [ , Ruslan, Salakhutdinov], [Ruslan, Salakhutdinov, ,], [Salakhutdinov, ,, “], [,, “, Guest], [“, Guest, Editors], [Guest, Editors, ’], [Editors, ’, Introduction], [’, Introduction, :]]

>> Noun Phrases are: 
[[29] Samy Bengio, Li Deng, Hugo Larochelle, Honglak Lee,  Ruslan Salakhutdinov, “Guest Editors’ Introduction]

>> Named Entities are: 
[('29', 'CARDINAL'), ('Samy Bengio', 'ORG'), ('Li Deng', 'PERSON'), ('Hugo Larochelle', 'PERSON'), ('Honglak Lee', 'PERSON'), ('Ruslan Salakhutdinov', 'PERSON'), ('Guest Editors’ Introduction:', 'WORK_OF_ART')] 

------------------- Sentence 2 -------------------

Special   


>> Tokens are: 
[Special,  ] 

>> PoS Tags are: 
[('Special', 'ADJ'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Special', 'amod'), (' ', 'ROOT')]

>> Bigrams: 
[[Special,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 665 =================================

Section on Learning Deep Architectures”, IEEE  

------------------- Sentence 1 -------------------

Section on Learning Deep Architectures”, IEEE   


>> Tokens are: 
[Section, Learning, Deep, Architectures, ”, ,, IEEE,  ] 

>> PoS Tags are: 
[('Section', 'NOUN'), ('Learning', 'PROPN'), ('Deep', 'PROPN'), ('Architectures', 'PROPN'), ('”', 'PUNCT'), (',', 'PUNCT'), ('IEEE', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Section', 'ROOT'), ('Learning', 'compound'), ('Deep', 'compound'), ('Architectures', 'pobj'), ('”', 'punct'), (',', 'punct'), ('IEEE', 'appos'), (' ', 'punct')]

>> Bigrams: 
[[Section, Learning], [Learning, Deep], [Deep, Architectures], [Architectures, ”], [”, ,], [,, IEEE], [IEEE,  ]]

>> Trigrams: 
[[Section, Learning, Deep], [Learning, Deep, Architectures], [Deep, Architectures, ”], [Architectures, ”, ,], [”, ,, IEEE], [,, IEEE,  ]]

>> Noun Phrases are: 
[Section, Learning Deep Architectures, IEEE]

>> Named Entities are: 
[] 


================================ Paragraph 666 =================================

Transactions on   Pattern Analysis and Machine  

------------------- Sentence 1 -------------------

Transactions on   Pattern Analysis and Machine   


>> Tokens are: 
[Transactions,   , Pattern, Analysis, Machine,  ] 

>> PoS Tags are: 
[('Transactions', 'NOUN'), ('  ', 'SPACE'), ('Pattern', 'PROPN'), ('Analysis', 'PROPN'), ('Machine', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Transactions', 'ROOT'), ('  ', 'compound'), ('Pattern', 'compound'), ('Analysis', 'pobj'), ('Machine', 'conj'), (' ', 'punct')]

>> Bigrams: 
[[Transactions,   ], [  , Pattern], [Pattern, Analysis], [Analysis, Machine], [Machine,  ]]

>> Trigrams: 
[[Transactions,   , Pattern], [  , Pattern, Analysis], [Pattern, Analysis, Machine], [Analysis, Machine,  ]]

>> Noun Phrases are: 
[Transactions,   Pattern Analysis, Machine]

>> Named Entities are: 
[('Pattern Analysis', 'ORG')] 


================================ Paragraph 667 =================================

Intelligence, Vol. 35, No. 8, pp. 1795-1797, 2013.  

------------------- Sentence 1 -------------------

Intelligence, Vol. 


>> Tokens are: 
[Intelligence, ,, Vol, .] 

>> PoS Tags are: 
[('Intelligence', 'NOUN'), (',', 'PUNCT'), ('Vol', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Intelligence', 'ROOT'), (',', 'punct'), ('Vol', 'npadvmod'), ('.', 'punct')]

>> Bigrams: 
[[Intelligence, ,], [,, Vol], [Vol, .]]

>> Trigrams: 
[[Intelligence, ,, Vol], [,, Vol, .]]

>> Noun Phrases are: 
[Intelligence]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

35, No. 8, pp. 


>> Tokens are: 
[35, ,, ., 8, ,, pp, .] 

>> PoS Tags are: 
[('35', 'NUM'), (',', 'PUNCT'), ('.', 'NOUN'), ('8', 'NUM'), (',', 'PUNCT'), ('pp', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('35', 'ROOT'), (',', 'punct'), ('.', 'npadvmod'), ('8', 'nummod'), (',', 'punct'), ('pp', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[35, ,], [,, .], [., 8], [8, ,], [,, pp], [pp, .]]

>> Trigrams: 
[[35, ,, .], [,, ., 8], [., 8, ,], [8, ,, pp], [,, pp, .]]

>> Noun Phrases are: 
[pp]

>> Named Entities are: 
[('35', 'DATE'), ('8', 'CARDINAL')] 

------------------- Sentence 3 -------------------

1795-1797, 2013. 


>> Tokens are: 
[1795, -, 1797, ,, 2013, .] 

>> PoS Tags are: 
[('1795', 'NUM'), ('-', 'SYM'), ('1797', 'NUM'), (',', 'PUNCT'), ('2013', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('1795', 'nummod'), ('-', 'punct'), ('1797', 'ROOT'), (',', 'punct'), ('2013', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[1795, -], [-, 1797], [1797, ,], [,, 2013], [2013, .]]

>> Trigrams: 
[[1795, -, 1797], [-, 1797, ,], [1797, ,, 2013], [,, 2013, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('1795-1797', 'DATE')] 

------------------- Sentence 4 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 668 =================================

[30] Qinghua Zheng, Zhaohui Wu, Xiaocheng Cheng, Lu Jiang  and Jun Liu, “Learning to crawl deep web”, Information  

------------------- Sentence 1 -------------------

[30] Qinghua Zheng, Zhaohui Wu, Xiaocheng Cheng, Lu Jiang  and Jun Liu, “Learning to crawl deep web”, 


>> Tokens are: 
[[, 30, ], Qinghua, Zheng, ,, Zhaohui, Wu, ,, Xiaocheng, Cheng, ,, Lu, Jiang,  , Jun, Liu, ,, “, Learning, crawl, deep, web, ”, ,] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('30', 'NUM'), (']', 'PUNCT'), ('Qinghua', 'PROPN'), ('Zheng', 'PROPN'), (',', 'PUNCT'), ('Zhaohui', 'PROPN'), ('Wu', 'PROPN'), (',', 'PUNCT'), ('Xiaocheng', 'PROPN'), ('Cheng', 'PROPN'), (',', 'PUNCT'), ('Lu', 'PROPN'), ('Jiang', 'PROPN'), (' ', 'SPACE'), ('Jun', 'PROPN'), ('Liu', 'PROPN'), (',', 'PUNCT'), ('“', 'PUNCT'), ('Learning', 'VERB'), ('crawl', 'VERB'), ('deep', 'ADJ'), ('web', 'NOUN'), ('”', 'PUNCT'), (',', 'PUNCT')] 

>> Dependency Tags are: 
[('[', 'punct'), ('30', 'nummod'), (']', 'punct'), ('Qinghua', 'compound'), ('Zheng', 'ROOT'), (',', 'punct'), ('Zhaohui', 'compound'), ('Wu', 'conj'), (',', 'punct'), ('Xiaocheng', 'compound'), ('Cheng', 'conj'), (',', 'punct'), ('Lu', 'compound'), ('Jiang', 'compound'), (' ', 'conj'), ('Jun', 'compound'), ('Liu', 'conj'), (',', 'punct'), ('“', 'punct'), ('Learning', 'appos'), ('crawl', 'xcomp'), ('deep', 'amod'), ('web', 'dobj'), ('”', 'punct'), (',', 'punct')]

>> Bigrams: 
[[[, 30], [30, ]], [], Qinghua], [Qinghua, Zheng], [Zheng, ,], [,, Zhaohui], [Zhaohui, Wu], [Wu, ,], [,, Xiaocheng], [Xiaocheng, Cheng], [Cheng, ,], [,, Lu], [Lu, Jiang], [Jiang,  ], [ , Jun], [Jun, Liu], [Liu, ,], [,, “], [“, Learning], [Learning, crawl], [crawl, deep], [deep, web], [web, ”], [”, ,]]

>> Trigrams: 
[[[, 30, ]], [30, ], Qinghua], [], Qinghua, Zheng], [Qinghua, Zheng, ,], [Zheng, ,, Zhaohui], [,, Zhaohui, Wu], [Zhaohui, Wu, ,], [Wu, ,, Xiaocheng], [,, Xiaocheng, Cheng], [Xiaocheng, Cheng, ,], [Cheng, ,, Lu], [,, Lu, Jiang], [Lu, Jiang,  ], [Jiang,  , Jun], [ , Jun, Liu], [Jun, Liu, ,], [Liu, ,, “], [,, “, Learning], [“, Learning, crawl], [Learning, crawl, deep], [crawl, deep, web], [deep, web, ”], [web, ”, ,]]

>> Noun Phrases are: 
[[30] Qinghua Zheng, Zhaohui Wu, Xiaocheng Cheng, Jun Liu, deep web]

>> Named Entities are: 
[('30', 'CARDINAL'), ('Qinghua Zheng', 'PERSON'), ('Zhaohui Wu', 'PERSON'), ('Xiaocheng Cheng', 'PERSON'), ('Lu Jiang', 'PERSON'), ('Jun Liu', 'PERSON')] 

------------------- Sentence 2 -------------------

Information   


>> Tokens are: 
[Information,  ] 

>> PoS Tags are: 
[('Information', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Information', 'ROOT'), (' ', 'nummod')]

>> Bigrams: 
[[Information,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Information]

>> Named Entities are: 
[] 


================================ Paragraph 669 =================================

Systems, Vol. 38, No. 6, pp. 801-819, 2013.  

------------------- Sentence 1 -------------------

Systems, Vol. 


>> Tokens are: 
[Systems, ,, Vol, .] 

>> PoS Tags are: 
[('Systems', 'PROPN'), (',', 'PUNCT'), ('Vol', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Systems', 'ROOT'), (',', 'punct'), ('Vol', 'npadvmod'), ('.', 'punct')]

>> Bigrams: 
[[Systems, ,], [,, Vol], [Vol, .]]

>> Trigrams: 
[[Systems, ,, Vol], [,, Vol, .]]

>> Noun Phrases are: 
[Systems]

>> Named Entities are: 
[('Vol', 'GPE')] 

------------------- Sentence 2 -------------------

38, No. 6, pp. 


>> Tokens are: 
[38, ,, ., 6, ,, pp, .] 

>> PoS Tags are: 
[('38', 'NUM'), (',', 'PUNCT'), ('.', 'NOUN'), ('6', 'NUM'), (',', 'PUNCT'), ('pp', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('38', 'ROOT'), (',', 'punct'), ('.', 'npadvmod'), ('6', 'nummod'), (',', 'punct'), ('pp', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[38, ,], [,, .], [., 6], [6, ,], [,, pp], [pp, .]]

>> Trigrams: 
[[38, ,, .], [,, ., 6], [., 6, ,], [6, ,, pp], [,, pp, .]]

>> Noun Phrases are: 
[pp]

>> Named Entities are: 
[('38', 'DATE'), ('6', 'CARDINAL')] 

------------------- Sentence 3 -------------------

801-819, 2013. 


>> Tokens are: 
[801, -, 819, ,, 2013, .] 

>> PoS Tags are: 
[('801', 'NUM'), ('-', 'SYM'), ('819', 'NUM'), (',', 'PUNCT'), ('2013', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('801', 'ROOT'), ('-', 'punct'), ('819', 'prep'), (',', 'punct'), ('2013', 'npadvmod'), ('.', 'punct')]

>> Bigrams: 
[[801, -], [-, 819], [819, ,], [,, 2013], [2013, .]]

>> Trigrams: 
[[801, -, 819], [-, 819, ,], [819, ,, 2013], [,, 2013, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('801', 'CARDINAL')] 

------------------- Sentence 4 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 670 =================================

[31] Xue-Wen Chen and Xiaotong Lin,” Big Data Deep  Learning: Challenges and Perspectives”, IEEE Access  

------------------- Sentence 1 -------------------

[31] Xue-Wen Chen and Xiaotong Lin,” Big Data Deep   


>> Tokens are: 
[[, 31, ], Xue, -, Wen, Chen, Xiaotong, Lin, ,, ”, Big, Data, Deep,  ] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('31', 'NUM'), (']', 'PUNCT'), ('Xue', 'PROPN'), ('-', 'PUNCT'), ('Wen', 'PROPN'), ('Chen', 'PROPN'), ('Xiaotong', 'PROPN'), ('Lin', 'PROPN'), (',', 'PUNCT'), ('”', 'PUNCT'), ('Big', 'PROPN'), ('Data', 'PROPN'), ('Deep', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('[', 'punct'), ('31', 'nummod'), (']', 'punct'), ('Xue', 'compound'), ('-', 'punct'), ('Wen', 'compound'), ('Chen', 'ROOT'), ('Xiaotong', 'compound'), ('Lin', 'conj'), (',', 'punct'), ('”', 'punct'), ('Big', 'compound'), ('Data', 'compound'), ('Deep', 'appos'), (' ', 'appos')]

>> Bigrams: 
[[[, 31], [31, ]], [], Xue], [Xue, -], [-, Wen], [Wen, Chen], [Chen, Xiaotong], [Xiaotong, Lin], [Lin, ,], [,, ”], [”, Big], [Big, Data], [Data, Deep], [Deep,  ]]

>> Trigrams: 
[[[, 31, ]], [31, ], Xue], [], Xue, -], [Xue, -, Wen], [-, Wen, Chen], [Wen, Chen, Xiaotong], [Chen, Xiaotong, Lin], [Xiaotong, Lin, ,], [Lin, ,, ”], [,, ”, Big], [”, Big, Data], [Big, Data, Deep], [Data, Deep,  ]]

>> Noun Phrases are: 
[[31] Xue-Wen Chen, Xiaotong Lin, Big Data Deep]

>> Named Entities are: 
[('31', 'CARDINAL'), ('Wen Chen', 'PERSON'), ('Xiaotong Lin', 'PERSON'), ('Big Data Deep  ', 'PRODUCT')] 

------------------- Sentence 2 -------------------

Learning: Challenges and Perspectives”, IEEE Access   


>> Tokens are: 
[Learning, :, Challenges, Perspectives, ”, ,, IEEE, Access,  ] 

>> PoS Tags are: 
[('Learning', 'PROPN'), (':', 'PUNCT'), ('Challenges', 'NOUN'), ('Perspectives', 'PROPN'), ('”', 'PUNCT'), (',', 'PUNCT'), ('IEEE', 'PROPN'), ('Access', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Learning', 'ROOT'), (':', 'punct'), ('Challenges', 'appos'), ('Perspectives', 'conj'), ('”', 'punct'), (',', 'punct'), ('IEEE', 'compound'), ('Access', 'appos'), (' ', 'nummod')]

>> Bigrams: 
[[Learning, :], [:, Challenges], [Challenges, Perspectives], [Perspectives, ”], [”, ,], [,, IEEE], [IEEE, Access], [Access,  ]]

>> Trigrams: 
[[Learning, :, Challenges], [:, Challenges, Perspectives], [Challenges, Perspectives, ”], [Perspectives, ”, ,], [”, ,, IEEE], [,, IEEE, Access], [IEEE, Access,  ]]

>> Noun Phrases are: 
[Learning, Challenges, Perspectives, IEEE Access]

>> Named Entities are: 
[] 


================================ Paragraph 671 =================================

Practical Innovations: Open Solutions and Access and  

------------------- Sentence 1 -------------------

Practical Innovations: Open Solutions and Access and   


>> Tokens are: 
[Practical, Innovations, :, Open, Solutions, Access,  ] 

>> PoS Tags are: 
[('Practical', 'PROPN'), ('Innovations', 'PROPN'), (':', 'PUNCT'), ('Open', 'PROPN'), ('Solutions', 'PROPN'), ('Access', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Practical', 'compound'), ('Innovations', 'ROOT'), (':', 'punct'), ('Open', 'compound'), ('Solutions', 'appos'), ('Access', 'conj'), (' ', 'conj')]

>> Bigrams: 
[[Practical, Innovations], [Innovations, :], [:, Open], [Open, Solutions], [Solutions, Access], [Access,  ]]

>> Trigrams: 
[[Practical, Innovations, :], [Innovations, :, Open], [:, Open, Solutions], [Open, Solutions, Access], [Solutions, Access,  ]]

>> Noun Phrases are: 
[Practical Innovations, Open Solutions, Access]

>> Named Entities are: 
[] 


================================ Paragraph 672 =================================

IEEE, Vol. 2, pp. 514-525, 2014.  

------------------- Sentence 1 -------------------

IEEE, Vol. 2, pp. 


>> Tokens are: 
[IEEE, ,, Vol, ., 2, ,, pp, .] 

>> PoS Tags are: 
[('IEEE', 'PROPN'), (',', 'PUNCT'), ('Vol', 'PROPN'), ('.', 'PUNCT'), ('2', 'NUM'), (',', 'PUNCT'), ('pp', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('IEEE', 'ROOT'), (',', 'punct'), ('Vol', 'npadvmod'), ('.', 'punct'), ('2', 'appos'), (',', 'punct'), ('pp', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[IEEE, ,], [,, Vol], [Vol, .], [., 2], [2, ,], [,, pp], [pp, .]]

>> Trigrams: 
[[IEEE, ,, Vol], [,, Vol, .], [Vol, ., 2], [., 2, ,], [2, ,, pp], [,, pp, .]]

>> Noun Phrases are: 
[IEEE, pp]

>> Named Entities are: 
[('2', 'CARDINAL')] 

------------------- Sentence 2 -------------------

514-525, 2014. 


>> Tokens are: 
[514, -, 525, ,, 2014, .] 

>> PoS Tags are: 
[('514', 'NUM'), ('-', 'SYM'), ('525', 'NUM'), (',', 'PUNCT'), ('2014', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('514', 'ROOT'), ('-', 'punct'), ('525', 'prep'), (',', 'punct'), ('2014', 'npadvmod'), ('.', 'punct')]

>> Bigrams: 
[[514, -], [-, 525], [525, ,], [,, 2014], [2014, .]]

>> Trigrams: 
[[514, -, 525], [-, 525, ,], [525, ,, 2014], [,, 2014, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('514', 'CARDINAL')] 

------------------- Sentence 3 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 673 =================================

[32] Rajat Raina, Anand Madhavan and Andrew Yg, “Large- scale Deep Unsupervised Learning using Graphics  

------------------- Sentence 1 -------------------

[32] Rajat Raina, Anand Madhavan and Andrew Yg, “Large- scale Deep Unsupervised Learning using Graphics   


>> Tokens are: 
[[, 32, ], Rajat, Raina, ,, Anand, Madhavan, Andrew, Yg, ,, “, Large-, scale, Deep, Unsupervised, Learning, Graphics,  ] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('32', 'NUM'), (']', 'PUNCT'), ('Rajat', 'PROPN'), ('Raina', 'PROPN'), (',', 'PUNCT'), ('Anand', 'PROPN'), ('Madhavan', 'PROPN'), ('Andrew', 'PROPN'), ('Yg', 'PROPN'), (',', 'PUNCT'), ('“', 'PUNCT'), ('Large-', 'ADJ'), ('scale', 'NOUN'), ('Deep', 'PROPN'), ('Unsupervised', 'PROPN'), ('Learning', 'PROPN'), ('Graphics', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('[', 'punct'), ('32', 'nummod'), (']', 'punct'), ('Rajat', 'compound'), ('Raina', 'ROOT'), (',', 'punct'), ('Anand', 'compound'), ('Madhavan', 'conj'), ('Andrew', 'compound'), ('Yg', 'conj'), (',', 'punct'), ('“', 'punct'), ('Large-', 'amod'), ('scale', 'compound'), ('Deep', 'compound'), ('Unsupervised', 'compound'), ('Learning', 'appos'), ('Graphics', 'dobj'), (' ', 'punct')]

>> Bigrams: 
[[[, 32], [32, ]], [], Rajat], [Rajat, Raina], [Raina, ,], [,, Anand], [Anand, Madhavan], [Madhavan, Andrew], [Andrew, Yg], [Yg, ,], [,, “], [“, Large-], [Large-, scale], [scale, Deep], [Deep, Unsupervised], [Unsupervised, Learning], [Learning, Graphics], [Graphics,  ]]

>> Trigrams: 
[[[, 32, ]], [32, ], Rajat], [], Rajat, Raina], [Rajat, Raina, ,], [Raina, ,, Anand], [,, Anand, Madhavan], [Anand, Madhavan, Andrew], [Madhavan, Andrew, Yg], [Andrew, Yg, ,], [Yg, ,, “], [,, “, Large-], [“, Large-, scale], [Large-, scale, Deep], [scale, Deep, Unsupervised], [Deep, Unsupervised, Learning], [Unsupervised, Learning, Graphics], [Learning, Graphics,  ]]

>> Noun Phrases are: 
[[32] Rajat Raina, Anand Madhavan, Andrew Yg, Large- scale Deep Unsupervised Learning, Graphics]

>> Named Entities are: 
[('32', 'CARDINAL'), ('Rajat Raina', 'PERSON'), ('Anand Madhavan', 'PERSON'), ('Andrew Yg', 'PERSON'), ('Deep Unsupervised Learning using Graphics', 'PERSON')] 


================================ Paragraph 674 =================================

Processors”, 26 th  International Conference on Machine  

------------------- Sentence 1 -------------------

Processors”, 26 th   


>> Tokens are: 
[Processors, ”, ,, 26, th,  ] 

>> PoS Tags are: 
[('Processors', 'NOUN'), ('”', 'PUNCT'), (',', 'PUNCT'), ('26', 'NUM'), ('th', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Processors', 'ROOT'), ('”', 'punct'), (',', 'punct'), ('26', 'nummod'), ('th', 'appos'), (' ', 'punct')]

>> Bigrams: 
[[Processors, ”], [”, ,], [,, 26], [26, th], [th,  ]]

>> Trigrams: 
[[Processors, ”, ,], [”, ,, 26], [,, 26, th], [26, th,  ]]

>> Noun Phrases are: 
[Processors]

>> Named Entities are: 
[('26', 'CARDINAL')] 

------------------- Sentence 2 -------------------

International Conference on Machine   


>> Tokens are: 
[International, Conference, Machine,  ] 

>> PoS Tags are: 
[('International', 'PROPN'), ('Conference', 'PROPN'), ('Machine', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('International', 'compound'), ('Conference', 'ROOT'), ('Machine', 'compound'), (' ', 'pobj')]

>> Bigrams: 
[[International, Conference], [Conference, Machine], [Machine,  ]]

>> Trigrams: 
[[International, Conference, Machine], [Conference, Machine,  ]]

>> Noun Phrases are: 
[International Conference]

>> Named Entities are: 
[] 


================================ Paragraph 675 =================================

Learning, pp. 609-616, 2009.  

------------------- Sentence 1 -------------------

Learning, pp. 


>> Tokens are: 
[Learning, ,, pp, .] 

>> PoS Tags are: 
[('Learning', 'PROPN'), (',', 'PUNCT'), ('pp', 'ADV'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Learning', 'dep'), (',', 'punct'), ('pp', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Learning, ,], [,, pp], [pp, .]]

>> Trigrams: 
[[Learning, ,, pp], [,, pp, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

609-616, 2009. 


>> Tokens are: 
[609, -, 616, ,, 2009, .] 

>> PoS Tags are: 
[('609', 'NUM'), ('-', 'SYM'), ('616', 'NUM'), (',', 'PUNCT'), ('2009', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('609', 'ROOT'), ('-', 'punct'), ('616', 'prep'), (',', 'punct'), ('2009', 'npadvmod'), ('.', 'punct')]

>> Bigrams: 
[[609, -], [-, 616], [616, ,], [,, 2009], [2009, .]]

>> Trigrams: 
[[609, -, 616], [-, 616, ,], [616, ,, 2009], [,, 2009, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('609', 'CARDINAL'), ('2009', 'DATE')] 

------------------- Sentence 3 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 676 =================================

[33] Alex Krizhevsky, Ilya Sutskever and Geoffrey E. Hinton,  “ImageNet Classification with Deep Convolutional Neural  

------------------- Sentence 1 -------------------

[33] Alex Krizhevsky, Ilya Sutskever and Geoffrey E. Hinton,  “ImageNet Classification with Deep Convolutional Neural   


>> Tokens are: 
[[, 33, ], Alex, Krizhevsky, ,, Ilya, Sutskever, Geoffrey, E., Hinton, ,,  , “, ImageNet, Classification, Deep, Convolutional, Neural,  ] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('33', 'NUM'), (']', 'PUNCT'), ('Alex', 'PROPN'), ('Krizhevsky', 'PROPN'), (',', 'PUNCT'), ('Ilya', 'PROPN'), ('Sutskever', 'PROPN'), ('Geoffrey', 'PROPN'), ('E.', 'PROPN'), ('Hinton', 'PROPN'), (',', 'PUNCT'), (' ', 'SPACE'), ('“', 'PUNCT'), ('ImageNet', 'PROPN'), ('Classification', 'NOUN'), ('Deep', 'PROPN'), ('Convolutional', 'PROPN'), ('Neural', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('[', 'punct'), ('33', 'nummod'), (']', 'punct'), ('Alex', 'compound'), ('Krizhevsky', 'ROOT'), (',', 'punct'), ('Ilya', 'compound'), ('Sutskever', 'conj'), ('Geoffrey', 'compound'), ('E.', 'compound'), ('Hinton', 'conj'), (',', 'punct'), (' ', 'punct'), ('“', 'punct'), ('ImageNet', 'compound'), ('Classification', 'appos'), ('Deep', 'compound'), ('Convolutional', 'compound'), ('Neural', 'pobj'), (' ', 'nummod')]

>> Bigrams: 
[[[, 33], [33, ]], [], Alex], [Alex, Krizhevsky], [Krizhevsky, ,], [,, Ilya], [Ilya, Sutskever], [Sutskever, Geoffrey], [Geoffrey, E.], [E., Hinton], [Hinton, ,], [,,  ], [ , “], [“, ImageNet], [ImageNet, Classification], [Classification, Deep], [Deep, Convolutional], [Convolutional, Neural], [Neural,  ]]

>> Trigrams: 
[[[, 33, ]], [33, ], Alex], [], Alex, Krizhevsky], [Alex, Krizhevsky, ,], [Krizhevsky, ,, Ilya], [,, Ilya, Sutskever], [Ilya, Sutskever, Geoffrey], [Sutskever, Geoffrey, E.], [Geoffrey, E., Hinton], [E., Hinton, ,], [Hinton, ,,  ], [,,  , “], [ , “, ImageNet], [“, ImageNet, Classification], [ImageNet, Classification, Deep], [Classification, Deep, Convolutional], [Deep, Convolutional, Neural], [Convolutional, Neural,  ]]

>> Noun Phrases are: 
[[33] Alex Krizhevsky, Ilya Sutskever, Geoffrey E. Hinton, “ImageNet Classification, Deep Convolutional Neural]

>> Named Entities are: 
[('33', 'CARDINAL'), ('Alex Krizhevsky', 'PERSON'), ('Ilya Sutskever', 'PERSON'), ('Geoffrey E. Hinton', 'PERSON'), ('ImageNet Classification', 'WORK_OF_ART')] 


================================ Paragraph 677 =================================

Networks”, Advances in Neural Information Processing  

------------------- Sentence 1 -------------------

Networks”, Advances in Neural Information Processing   


>> Tokens are: 
[Networks, ”, ,, Advances, Neural, Information, Processing,  ] 

>> PoS Tags are: 
[('Networks', 'NOUN'), ('”', 'PUNCT'), (',', 'PUNCT'), ('Advances', 'NOUN'), ('Neural', 'PROPN'), ('Information', 'PROPN'), ('Processing', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Networks', 'ROOT'), ('”', 'punct'), (',', 'punct'), ('Advances', 'appos'), ('Neural', 'compound'), ('Information', 'compound'), ('Processing', 'pobj'), (' ', 'punct')]

>> Bigrams: 
[[Networks, ”], [”, ,], [,, Advances], [Advances, Neural], [Neural, Information], [Information, Processing], [Processing,  ]]

>> Trigrams: 
[[Networks, ”, ,], [”, ,, Advances], [,, Advances, Neural], [Advances, Neural, Information], [Neural, Information, Processing], [Information, Processing,  ]]

>> Noun Phrases are: 
[Networks, Advances, Neural Information Processing]

>> Named Entities are: 
[] 


================================ Paragraph 678 =================================

System, pp. 1106-1114, 2012.  

------------------- Sentence 1 -------------------

System, pp. 


>> Tokens are: 
[System, ,, pp, .] 

>> PoS Tags are: 
[('System', 'NOUN'), (',', 'PUNCT'), ('pp', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('System', 'ROOT'), (',', 'punct'), ('pp', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[System, ,], [,, pp], [pp, .]]

>> Trigrams: 
[[System, ,, pp], [,, pp, .]]

>> Noun Phrases are: 
[System, pp]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

1106-1114, 2012. 


>> Tokens are: 
[1106, -, 1114, ,, 2012, .] 

>> PoS Tags are: 
[('1106', 'NUM'), ('-', 'SYM'), ('1114', 'NUM'), (',', 'PUNCT'), ('2012', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('1106', 'nummod'), ('-', 'punct'), ('1114', 'ROOT'), (',', 'punct'), ('2012', 'npadvmod'), ('.', 'punct')]

>> Bigrams: 
[[1106, -], [-, 1114], [1114, ,], [,, 2012], [2012, .]]

>> Trigrams: 
[[1106, -, 1114], [-, 1114, ,], [1114, ,, 2012], [,, 2012, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('1106-1114', 'DATE'), ('2012', 'DATE')] 

------------------- Sentence 3 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 679 =================================

[34] Jeffrey Dean, Greg S. Corrado and Rajat Monga Kai, “Large  Scale Distributed Deep Networks”, Advances in Neural  

------------------- Sentence 1 -------------------

[34] Jeffrey Dean, Greg S. Corrado and Rajat Monga Kai, “Large  Scale Distributed Deep Networks”, Advances in Neural   


>> Tokens are: 
[[, 34, ], Jeffrey, Dean, ,, Greg, S., Corrado, Rajat, Monga, Kai, ,, “, Large,  , Scale, Distributed, Deep, Networks, ”, ,, Advances, Neural,  ] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('34', 'NUM'), (']', 'PUNCT'), ('Jeffrey', 'PROPN'), ('Dean', 'PROPN'), (',', 'PUNCT'), ('Greg', 'PROPN'), ('S.', 'PROPN'), ('Corrado', 'PROPN'), ('Rajat', 'PROPN'), ('Monga', 'PROPN'), ('Kai', 'PROPN'), (',', 'PUNCT'), ('“', 'PUNCT'), ('Large', 'ADJ'), (' ', 'SPACE'), ('Scale', 'PROPN'), ('Distributed', 'VERB'), ('Deep', 'PROPN'), ('Networks', 'PROPN'), ('”', 'PUNCT'), (',', 'PUNCT'), ('Advances', 'NOUN'), ('Neural', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('[', 'punct'), ('34', 'nummod'), (']', 'punct'), ('Jeffrey', 'compound'), ('Dean', 'ROOT'), (',', 'punct'), ('Greg', 'compound'), ('S.', 'compound'), ('Corrado', 'conj'), ('Rajat', 'compound'), ('Monga', 'compound'), ('Kai', 'conj'), (',', 'punct'), ('“', 'punct'), ('Large', 'amod'), (' ', 'compound'), ('Scale', 'nsubj'), ('Distributed', 'acl'), ('Deep', 'compound'), ('Networks', 'dobj'), ('”', 'punct'), (',', 'punct'), ('Advances', 'conj'), ('Neural', 'pobj'), (' ', 'nummod')]

>> Bigrams: 
[[[, 34], [34, ]], [], Jeffrey], [Jeffrey, Dean], [Dean, ,], [,, Greg], [Greg, S.], [S., Corrado], [Corrado, Rajat], [Rajat, Monga], [Monga, Kai], [Kai, ,], [,, “], [“, Large], [Large,  ], [ , Scale], [Scale, Distributed], [Distributed, Deep], [Deep, Networks], [Networks, ”], [”, ,], [,, Advances], [Advances, Neural], [Neural,  ]]

>> Trigrams: 
[[[, 34, ]], [34, ], Jeffrey], [], Jeffrey, Dean], [Jeffrey, Dean, ,], [Dean, ,, Greg], [,, Greg, S.], [Greg, S., Corrado], [S., Corrado, Rajat], [Corrado, Rajat, Monga], [Rajat, Monga, Kai], [Monga, Kai, ,], [Kai, ,, “], [,, “, Large], [“, Large,  ], [Large,  , Scale], [ , Scale, Distributed], [Scale, Distributed, Deep], [Distributed, Deep, Networks], [Deep, Networks, ”], [Networks, ”, ,], [”, ,, Advances], [,, Advances, Neural], [Advances, Neural,  ]]

>> Noun Phrases are: 
[[34] Jeffrey Dean, Greg S. Corrado, Rajat Monga Kai, Large  Scale, Deep Networks, Advances, Neural]

>> Named Entities are: 
[('34', 'CARDINAL'), ('Jeffrey Dean', 'PERSON'), ('Greg S. Corrado', 'PERSON'), ('Rajat Monga Kai', 'PERSON'), ('Large  Scale Distributed Deep Networks', 'WORK_OF_ART')] 


================================ Paragraph 680 =================================

Information Processing System, pp. 1232-1240, 2012.  

------------------- Sentence 1 -------------------

Information Processing System, pp. 


>> Tokens are: 
[Information, Processing, System, ,, pp, .] 

>> PoS Tags are: 
[('Information', 'NOUN'), ('Processing', 'NOUN'), ('System', 'PROPN'), (',', 'PUNCT'), ('pp', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Information', 'compound'), ('Processing', 'compound'), ('System', 'ROOT'), (',', 'punct'), ('pp', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[Information, Processing], [Processing, System], [System, ,], [,, pp], [pp, .]]

>> Trigrams: 
[[Information, Processing, System], [Processing, System, ,], [System, ,, pp], [,, pp, .]]

>> Noun Phrases are: 
[Information Processing System, pp]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

1232-1240, 2012. 


>> Tokens are: 
[1232, -, 1240, ,, 2012, .] 

>> PoS Tags are: 
[('1232', 'NUM'), ('-', 'SYM'), ('1240', 'NUM'), (',', 'PUNCT'), ('2012', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('1232', 'nummod'), ('-', 'punct'), ('1240', 'ROOT'), (',', 'punct'), ('2012', 'npadvmod'), ('.', 'punct')]

>> Bigrams: 
[[1232, -], [-, 1240], [1240, ,], [,, 2012], [2012, .]]

>> Trigrams: 
[[1232, -, 1240], [-, 1240, ,], [1240, ,, 2012], [,, 2012, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('1232-1240', 'DATE'), ('2012', 'DATE')] 

------------------- Sentence 3 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 681 =================================

[35] Quoc V. Le, Marc’Aurelio Ranzato, Rajat Monga, Matthieu  Devin, Kai Chen, Greg S. Corrado, Jeffrey  Dean, and  

------------------- Sentence 1 -------------------

[35] Quoc V. Le, Marc’Aurelio Ranzato, Rajat Monga, Matthieu  Devin, Kai Chen, Greg S. Corrado, Jeffrey  Dean, and   


>> Tokens are: 
[[, 35, ], Quoc, V., Le, ,, Marc’Aurelio, Ranzato, ,, Rajat, Monga, ,, Matthieu,  , Devin, ,, Kai, Chen, ,, Greg, S., Corrado, ,, Jeffrey,  , Dean, ,,  ] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('35', 'NUM'), (']', 'PUNCT'), ('Quoc', 'PROPN'), ('V.', 'PROPN'), ('Le', 'PROPN'), (',', 'PUNCT'), ('Marc’Aurelio', 'PROPN'), ('Ranzato', 'PROPN'), (',', 'PUNCT'), ('Rajat', 'PROPN'), ('Monga', 'PROPN'), (',', 'PUNCT'), ('Matthieu', 'PROPN'), (' ', 'SPACE'), ('Devin', 'PROPN'), (',', 'PUNCT'), ('Kai', 'PROPN'), ('Chen', 'PROPN'), (',', 'PUNCT'), ('Greg', 'PROPN'), ('S.', 'PROPN'), ('Corrado', 'PROPN'), (',', 'PUNCT'), ('Jeffrey', 'PROPN'), (' ', 'SPACE'), ('Dean', 'PROPN'), (',', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('[', 'punct'), ('35', 'nummod'), (']', 'punct'), ('Quoc', 'compound'), ('V.', 'compound'), ('Le', 'ROOT'), (',', 'punct'), ('Marc’Aurelio', 'compound'), ('Ranzato', 'appos'), (',', 'punct'), ('Rajat', 'compound'), ('Monga', 'conj'), (',', 'punct'), ('Matthieu', 'nmod'), (' ', 'compound'), ('Devin', 'conj'), (',', 'punct'), ('Kai', 'compound'), ('Chen', 'conj'), (',', 'punct'), ('Greg', 'compound'), ('S.', 'compound'), ('Corrado', 'conj'), (',', 'punct'), ('Jeffrey', 'npadvmod'), (' ', 'compound'), ('Dean', 'appos'), (',', 'punct'), (' ', 'conj')]

>> Bigrams: 
[[[, 35], [35, ]], [], Quoc], [Quoc, V.], [V., Le], [Le, ,], [,, Marc’Aurelio], [Marc’Aurelio, Ranzato], [Ranzato, ,], [,, Rajat], [Rajat, Monga], [Monga, ,], [,, Matthieu], [Matthieu,  ], [ , Devin], [Devin, ,], [,, Kai], [Kai, Chen], [Chen, ,], [,, Greg], [Greg, S.], [S., Corrado], [Corrado, ,], [,, Jeffrey], [Jeffrey,  ], [ , Dean], [Dean, ,], [,,  ]]

>> Trigrams: 
[[[, 35, ]], [35, ], Quoc], [], Quoc, V.], [Quoc, V., Le], [V., Le, ,], [Le, ,, Marc’Aurelio], [,, Marc’Aurelio, Ranzato], [Marc’Aurelio, Ranzato, ,], [Ranzato, ,, Rajat], [,, Rajat, Monga], [Rajat, Monga, ,], [Monga, ,, Matthieu], [,, Matthieu,  ], [Matthieu,  , Devin], [ , Devin, ,], [Devin, ,, Kai], [,, Kai, Chen], [Kai, Chen, ,], [Chen, ,, Greg], [,, Greg, S.], [Greg, S., Corrado], [S., Corrado, ,], [Corrado, ,, Jeffrey], [,, Jeffrey,  ], [Jeffrey,  , Dean], [ , Dean, ,], [Dean, ,,  ]]

>> Noun Phrases are: 
[[35] Quoc V. Le, Marc’Aurelio Ranzato, Rajat Monga, Matthieu  Devin, Kai Chen, Greg S. Corrado,  Dean]

>> Named Entities are: 
[('35', 'CARDINAL'), ('Quoc V. Le', 'PERSON'), ('Marc’Aurelio Ranzato', 'PERSON'), ('Rajat Monga', 'PERSON'), ('Matthieu', 'PERSON'), ('Devin', 'PERSON'), ('Kai Chen', 'PERSON'), ('Greg S. Corrado', 'PERSON'), ('Jeffrey  Dean', 'PERSON')] 


================================ Paragraph 682 =================================

Andrew Y. Ng, “Building High-level Features Using Large  

------------------- Sentence 1 -------------------

Andrew Y. Ng, “Building High-level Features Using Large   


>> Tokens are: 
[Andrew, Y., Ng, ,, “, Building, High, -, level, Features, Large,  ] 

>> PoS Tags are: 
[('Andrew', 'PROPN'), ('Y.', 'PROPN'), ('Ng', 'PROPN'), (',', 'PUNCT'), ('“', 'PUNCT'), ('Building', 'VERB'), ('High', 'ADJ'), ('-', 'PUNCT'), ('level', 'NOUN'), ('Features', 'NOUN'), ('Large', 'ADJ'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Andrew', 'compound'), ('Y.', 'compound'), ('Ng', 'ROOT'), (',', 'punct'), ('“', 'punct'), ('Building', 'acl'), ('High', 'amod'), ('-', 'punct'), ('level', 'compound'), ('Features', 'dobj'), ('Large', 'amod'), (' ', 'dobj')]

>> Bigrams: 
[[Andrew, Y.], [Y., Ng], [Ng, ,], [,, “], [“, Building], [Building, High], [High, -], [-, level], [level, Features], [Features, Large], [Large,  ]]

>> Trigrams: 
[[Andrew, Y., Ng], [Y., Ng, ,], [Ng, ,, “], [,, “, Building], [“, Building, High], [Building, High, -], [High, -, level], [-, level, Features], [level, Features, Large], [Features, Large,  ]]

>> Noun Phrases are: 
[Andrew Y. Ng, High-level Features]

>> Named Entities are: 
[('Andrew Y. Ng', 'PERSON'), ('Features Using Large  ', 'ORG')] 


================================ Paragraph 683 =================================

Scale Unsupervised Learning”, Proceedings of the 29 th   

------------------- Sentence 1 -------------------

Scale Unsupervised Learning”, Proceedings of the 29 th 


>> Tokens are: 
[Scale, Unsupervised, Learning, ”, ,, Proceedings, 29, th] 

>> PoS Tags are: 
[('Scale', 'PROPN'), ('Unsupervised', 'PROPN'), ('Learning', 'PROPN'), ('”', 'PUNCT'), (',', 'PUNCT'), ('Proceedings', 'NOUN'), ('29', 'NUM'), ('th', 'NOUN')] 

>> Dependency Tags are: 
[('Scale', 'compound'), ('Unsupervised', 'compound'), ('Learning', 'ROOT'), ('”', 'punct'), (',', 'punct'), ('Proceedings', 'conj'), ('29', 'nummod'), ('th', 'pobj')]

>> Bigrams: 
[[Scale, Unsupervised], [Unsupervised, Learning], [Learning, ”], [”, ,], [,, Proceedings], [Proceedings, 29], [29, th]]

>> Trigrams: 
[[Scale, Unsupervised, Learning], [Unsupervised, Learning, ”], [Learning, ”, ,], [”, ,, Proceedings], [,, Proceedings, 29], [Proceedings, 29, th]]

>> Noun Phrases are: 
[Scale Unsupervised Learning, Proceedings, the 29 th]

>> Named Entities are: 
[('Scale Unsupervised Learning”', 'ORG'), ('Proceedings of the 29', 'WORK_OF_ART')] 

------------------- Sentence 2 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 684 =================================

International Conference on Machine Learning, 2012.  

------------------- Sentence 1 -------------------

International Conference on Machine Learning, 2012. 


>> Tokens are: 
[International, Conference, Machine, Learning, ,, 2012, .] 

>> PoS Tags are: 
[('International', 'PROPN'), ('Conference', 'PROPN'), ('Machine', 'PROPN'), ('Learning', 'PROPN'), (',', 'PUNCT'), ('2012', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('International', 'compound'), ('Conference', 'ROOT'), ('Machine', 'compound'), ('Learning', 'pobj'), (',', 'punct'), ('2012', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[International, Conference], [Conference, Machine], [Machine, Learning], [Learning, ,], [,, 2012], [2012, .]]

>> Trigrams: 
[[International, Conference, Machine], [Conference, Machine, Learning], [Machine, Learning, ,], [Learning, ,, 2012], [,, 2012, .]]

>> Noun Phrases are: 
[International Conference, Machine Learning]

>> Named Entities are: 
[('2012', 'DATE')] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 685 =================================

[36] A. Coats and B. Huval, “Deep Learning with COTS HPS  systems”, Journal of Machine Learning Research, Vol. 28,  

------------------- Sentence 1 -------------------

[36] A. Coats and B. Huval, “Deep Learning with COTS HPS  systems”, Journal of Machine Learning Research, Vol. 


>> Tokens are: 
[[, 36, ], A., Coats, B., Huval, ,, “, Deep, Learning, COTS, HPS,  , systems, ”, ,, Journal, Machine, Learning, Research, ,, Vol, .] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('36', 'NUM'), (']', 'PUNCT'), ('A.', 'PROPN'), ('Coats', 'PROPN'), ('B.', 'PROPN'), ('Huval', 'PROPN'), (',', 'PUNCT'), ('“', 'PUNCT'), ('Deep', 'PROPN'), ('Learning', 'PROPN'), ('COTS', 'PROPN'), ('HPS', 'PROPN'), (' ', 'SPACE'), ('systems', 'NOUN'), ('”', 'PUNCT'), (',', 'PUNCT'), ('Journal', 'PROPN'), ('Machine', 'PROPN'), ('Learning', 'PROPN'), ('Research', 'PROPN'), (',', 'PUNCT'), ('Vol', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('[', 'punct'), ('36', 'nummod'), (']', 'punct'), ('A.', 'compound'), ('Coats', 'ROOT'), ('B.', 'compound'), ('Huval', 'conj'), (',', 'punct'), ('“', 'punct'), ('Deep', 'compound'), ('Learning', 'appos'), ('COTS', 'compound'), ('HPS', 'compound'), (' ', 'compound'), ('systems', 'pobj'), ('”', 'punct'), (',', 'punct'), ('Journal', 'conj'), ('Machine', 'compound'), ('Learning', 'compound'), ('Research', 'pobj'), (',', 'punct'), ('Vol', 'npadvmod'), ('.', 'punct')]

>> Bigrams: 
[[[, 36], [36, ]], [], A.], [A., Coats], [Coats, B.], [B., Huval], [Huval, ,], [,, “], [“, Deep], [Deep, Learning], [Learning, COTS], [COTS, HPS], [HPS,  ], [ , systems], [systems, ”], [”, ,], [,, Journal], [Journal, Machine], [Machine, Learning], [Learning, Research], [Research, ,], [,, Vol], [Vol, .]]

>> Trigrams: 
[[[, 36, ]], [36, ], A.], [], A., Coats], [A., Coats, B.], [Coats, B., Huval], [B., Huval, ,], [Huval, ,, “], [,, “, Deep], [“, Deep, Learning], [Deep, Learning, COTS], [Learning, COTS, HPS], [COTS, HPS,  ], [HPS,  , systems], [ , systems, ”], [systems, ”, ,], [”, ,, Journal], [,, Journal, Machine], [Journal, Machine, Learning], [Machine, Learning, Research], [Learning, Research, ,], [Research, ,, Vol], [,, Vol, .]]

>> Noun Phrases are: 
[[36] A. Coats, B. Huval, Deep Learning, COTS HPS  systems, Journal, Machine Learning Research]

>> Named Entities are: 
[('36', 'CARDINAL'), ('B. Huval', 'ORG'), ('Deep Learning', 'WORK_OF_ART'), ('Journal of Machine Learning Research', 'ORG')] 

------------------- Sentence 2 -------------------

28, 


>> Tokens are: 
[28, ,] 

>> PoS Tags are: 
[('28', 'NUM'), (',', 'PUNCT')] 

>> Dependency Tags are: 
[('28', 'ROOT'), (',', 'punct')]

>> Bigrams: 
[[28, ,]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('28', 'CARDINAL')] 

------------------- Sentence 3 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 686 =================================

No. 3, pp. 1337-1345, 2013.  

------------------- Sentence 1 -------------------

No. 3, pp. 


>> Tokens are: 
[., 3, ,, pp, .] 

>> PoS Tags are: 
[('.', 'NOUN'), ('3', 'NUM'), (',', 'PUNCT'), ('pp', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('.', 'ROOT'), ('3', 'nummod'), (',', 'punct'), ('pp', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[., 3], [3, ,], [,, pp], [pp, .]]

>> Trigrams: 
[[., 3, ,], [3, ,, pp], [,, pp, .]]

>> Noun Phrases are: 
[No., pp]

>> Named Entities are: 
[('3', 'CARDINAL')] 

------------------- Sentence 2 -------------------

1337-1345, 2013. 


>> Tokens are: 
[1337, -, 1345, ,, 2013, .] 

>> PoS Tags are: 
[('1337', 'NUM'), ('-', 'SYM'), ('1345', 'NUM'), (',', 'PUNCT'), ('2013', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('1337', 'ROOT'), ('-', 'punct'), ('1345', 'prep'), (',', 'punct'), ('2013', 'npadvmod'), ('.', 'punct')]

>> Bigrams: 
[[1337, -], [-, 1345], [1345, ,], [,, 2013], [2013, .]]

>> Trigrams: 
[[1337, -, 1345], [-, 1345, ,], [1345, ,, 2013], [,, 2013, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('1337-1345', 'DATE'), ('2013', 'DATE')] 

------------------- Sentence 3 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 687 =================================

 

------------------- Sentence 1 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 
