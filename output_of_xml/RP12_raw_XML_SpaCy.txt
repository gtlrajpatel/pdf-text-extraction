				 *** Text Processing using Spacy *** 


================================ Paragraph 1 =================================

Yogesh Singh, Pradeep Kumar Bhatia & Omprakash Sangwan  

------------------- Sentence 1 -------------------

Yogesh Singh, Pradeep Kumar Bhatia & Omprakash Sangwan   


>> Tokens are: 
[Yogesh, Singh, ,, Pradeep, Kumar, Bhatia, &, Omprakash, Sangwan,  ] 

>> PoS Tags are: 
[('Yogesh', 'PROPN'), ('Singh', 'PROPN'), (',', 'PUNCT'), ('Pradeep', 'PROPN'), ('Kumar', 'PROPN'), ('Bhatia', 'PROPN'), ('&', 'CCONJ'), ('Omprakash', 'PROPN'), ('Sangwan', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Yogesh', 'compound'), ('Singh', 'ROOT'), (',', 'punct'), ('Pradeep', 'compound'), ('Kumar', 'compound'), ('Bhatia', 'conj'), ('&', 'cc'), ('Omprakash', 'compound'), ('Sangwan', 'conj'), (' ', 'punct')]

>> Bigrams: 
[[Yogesh, Singh], [Singh, ,], [,, Pradeep], [Pradeep, Kumar], [Kumar, Bhatia], [Bhatia, &], [&, Omprakash], [Omprakash, Sangwan], [Sangwan,  ]]

>> Trigrams: 
[[Yogesh, Singh, ,], [Singh, ,, Pradeep], [,, Pradeep, Kumar], [Pradeep, Kumar, Bhatia], [Kumar, Bhatia, &], [Bhatia, &, Omprakash], [&, Omprakash, Sangwan], [Omprakash, Sangwan,  ]]

>> Noun Phrases are: 
[Yogesh Singh, Pradeep Kumar Bhatia, Omprakash Sangwan]

>> Named Entities are: 
[('Yogesh Singh', 'PERSON'), ('Kumar Bhatia & Omprakash Sangwan', 'ORG')] 


================================ Paragraph 2 =================================

International Journal of Computer Science and Security, Volume (1) : Issue (1) 70  

------------------- Sentence 1 -------------------

International Journal of Computer Science and Security, Volume (1) : Issue (1) 70   


>> Tokens are: 
[International, Journal, Computer, Science, Security, ,, Volume, (, 1, ), :, Issue, (, 1, ), 70,  ] 

>> PoS Tags are: 
[('International', 'PROPN'), ('Journal', 'PROPN'), ('Computer', 'PROPN'), ('Science', 'PROPN'), ('Security', 'PROPN'), (',', 'PUNCT'), ('Volume', 'NOUN'), ('(', 'PUNCT'), ('1', 'NUM'), (')', 'PUNCT'), (':', 'PUNCT'), ('Issue', 'NOUN'), ('(', 'PUNCT'), ('1', 'NUM'), (')', 'PUNCT'), ('70', 'NUM'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('International', 'compound'), ('Journal', 'ROOT'), ('Computer', 'compound'), ('Science', 'pobj'), ('Security', 'conj'), (',', 'punct'), ('Volume', 'appos'), ('(', 'punct'), ('1', 'appos'), (')', 'punct'), (':', 'punct'), ('Issue', 'appos'), ('(', 'punct'), ('1', 'appos'), (')', 'punct'), ('70', 'nummod'), (' ', 'appos')]

>> Bigrams: 
[[International, Journal], [Journal, Computer], [Computer, Science], [Science, Security], [Security, ,], [,, Volume], [Volume, (], [(, 1], [1, )], [), :], [:, Issue], [Issue, (], [(, 1], [1, )], [), 70], [70,  ]]

>> Trigrams: 
[[International, Journal, Computer], [Journal, Computer, Science], [Computer, Science, Security], [Science, Security, ,], [Security, ,, Volume], [,, Volume, (], [Volume, (, 1], [(, 1, )], [1, ), :], [), :, Issue], [:, Issue, (], [Issue, (, 1], [(, 1, )], [1, ), 70], [), 70,  ]]

>> Noun Phrases are: 
[International Journal, Computer Science, Security, Volume, Issue]

>> Named Entities are: 
[('International Journal of Computer Science and Security, Volume', 'ORG'), ('1', 'CARDINAL'), ('1', 'CARDINAL')] 


================================ Paragraph 3 =================================

A REVIEW OF STUDIES ON MACHINE LEARNING TECHNIQUES    

------------------- Sentence 1 -------------------

A REVIEW OF STUDIES ON MACHINE 


>> Tokens are: 
[REVIEW, STUDIES, MACHINE] 

>> PoS Tags are: 
[('REVIEW', 'NOUN'), ('STUDIES', 'NOUN'), ('MACHINE', 'PROPN')] 

>> Dependency Tags are: 
[('REVIEW', 'ROOT'), ('STUDIES', 'pobj'), ('MACHINE', 'pobj')]

>> Bigrams: 
[[REVIEW, STUDIES], [STUDIES, MACHINE]]

>> Trigrams: 
[[REVIEW, STUDIES, MACHINE]]

>> Noun Phrases are: 
[A REVIEW, STUDIES, MACHINE]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

LEARNING TECHNIQUES     


>> Tokens are: 
[LEARNING, TECHNIQUES,    ] 

>> PoS Tags are: 
[('LEARNING', 'NOUN'), ('TECHNIQUES', 'VERB'), ('   ', 'SPACE')] 

>> Dependency Tags are: 
[('LEARNING', 'compound'), ('TECHNIQUES', 'ROOT'), ('   ', 'nummod')]

>> Bigrams: 
[[LEARNING, TECHNIQUES], [TECHNIQUES,    ]]

>> Trigrams: 
[[LEARNING, TECHNIQUES,    ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 4 =================================

Yogesh Singh              ys66@rediffmail.com  Prof & Dean  Guru Gobind Singh IP University  Delhi, 110006, India    Pradeep Kumar Bhatia            pk_bhatia2002@yahoo.com  Reader, Department of Computer Science & Engineering  Guru Jambsheshwar University of Science & Technology  Hisar, Haryana, 125001,India    

------------------- Sentence 1 -------------------

Yogesh Singh              ys66@rediffmail.com  Prof & Dean 


>> Tokens are: 
[Yogesh, Singh,              , ys66@rediffmail.com,  , Prof, &, Dean] 

>> PoS Tags are: 
[('Yogesh', 'PROPN'), ('Singh', 'PROPN'), ('             ', 'SPACE'), ('ys66@rediffmail.com', 'X'), (' ', 'SPACE'), ('Prof', 'PROPN'), ('&', 'CCONJ'), ('Dean', 'PROPN')] 

>> Dependency Tags are: 
[('Yogesh', 'compound'), ('Singh', 'ROOT'), ('             ', 'appos'), ('ys66@rediffmail.com', 'punct'), (' ', 'appos'), ('Prof', 'appos'), ('&', 'cc'), ('Dean', 'conj')]

>> Bigrams: 
[[Yogesh, Singh], [Singh,              ], [             , ys66@rediffmail.com], [ys66@rediffmail.com,  ], [ , Prof], [Prof, &], [&, Dean]]

>> Trigrams: 
[[Yogesh, Singh,              ], [Singh,              , ys66@rediffmail.com], [             , ys66@rediffmail.com,  ], [ys66@rediffmail.com,  , Prof], [ , Prof, &], [Prof, &, Dean]]

>> Noun Phrases are: 
[Yogesh Singh, Prof, Dean]

>> Named Entities are: 
[('Yogesh Singh', 'PERSON'), ('Prof & Dean', 'ORG')] 

------------------- Sentence 2 -------------------

 Guru Gobind Singh IP University  Delhi, 110006, India    Pradeep Kumar Bhatia            pk_bhatia2002@yahoo.com   


>> Tokens are: 
[ , Guru, Gobind, Singh, IP, University,  , Delhi, ,, 110006, ,, India,    , Pradeep, Kumar, Bhatia,            , pk_bhatia2002@yahoo.com,  ] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('Guru', 'PROPN'), ('Gobind', 'PROPN'), ('Singh', 'PROPN'), ('IP', 'PROPN'), ('University', 'PROPN'), (' ', 'SPACE'), ('Delhi', 'PROPN'), (',', 'PUNCT'), ('110006', 'NUM'), (',', 'PUNCT'), ('India', 'PROPN'), ('   ', 'SPACE'), ('Pradeep', 'PROPN'), ('Kumar', 'PROPN'), ('Bhatia', 'PROPN'), ('           ', 'SPACE'), ('pk_bhatia2002@yahoo.com', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'compound'), ('Guru', 'compound'), ('Gobind', 'compound'), ('Singh', 'compound'), ('IP', 'compound'), ('University', 'compound'), (' ', 'compound'), ('Delhi', 'ROOT'), (',', 'punct'), ('110006', 'appos'), (',', 'punct'), ('India', 'npadvmod'), ('   ', 'nummod'), ('Pradeep', 'compound'), ('Kumar', 'compound'), ('Bhatia', 'appos'), ('           ', 'compound'), ('pk_bhatia2002@yahoo.com', 'appos'), (' ', 'punct')]

>> Bigrams: 
[[ , Guru], [Guru, Gobind], [Gobind, Singh], [Singh, IP], [IP, University], [University,  ], [ , Delhi], [Delhi, ,], [,, 110006], [110006, ,], [,, India], [India,    ], [   , Pradeep], [Pradeep, Kumar], [Kumar, Bhatia], [Bhatia,            ], [           , pk_bhatia2002@yahoo.com], [pk_bhatia2002@yahoo.com,  ]]

>> Trigrams: 
[[ , Guru, Gobind], [Guru, Gobind, Singh], [Gobind, Singh, IP], [Singh, IP, University], [IP, University,  ], [University,  , Delhi], [ , Delhi, ,], [Delhi, ,, 110006], [,, 110006, ,], [110006, ,, India], [,, India,    ], [India,    , Pradeep], [   , Pradeep, Kumar], [Pradeep, Kumar, Bhatia], [Kumar, Bhatia,            ], [Bhatia,            , pk_bhatia2002@yahoo.com], [           , pk_bhatia2002@yahoo.com,  ]]

>> Noun Phrases are: 
[ Guru Gobind Singh IP University  Delhi, Pradeep Kumar Bhatia]

>> Named Entities are: 
[('Singh IP University', 'ORG'), ('Delhi', 'GPE'), ('110006', 'DATE'), ('India', 'GPE'), ('Kumar Bhatia', 'PERSON')] 

------------------- Sentence 3 -------------------

Reader, Department of Computer Science & Engineering   


>> Tokens are: 
[Reader, ,, Department, Computer, Science, &, Engineering,  ] 

>> PoS Tags are: 
[('Reader', 'PROPN'), (',', 'PUNCT'), ('Department', 'PROPN'), ('Computer', 'PROPN'), ('Science', 'PROPN'), ('&', 'CCONJ'), ('Engineering', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Reader', 'ROOT'), (',', 'punct'), ('Department', 'appos'), ('Computer', 'compound'), ('Science', 'pobj'), ('&', 'cc'), ('Engineering', 'conj'), (' ', 'appos')]

>> Bigrams: 
[[Reader, ,], [,, Department], [Department, Computer], [Computer, Science], [Science, &], [&, Engineering], [Engineering,  ]]

>> Trigrams: 
[[Reader, ,, Department], [,, Department, Computer], [Department, Computer, Science], [Computer, Science, &], [Science, &, Engineering], [&, Engineering,  ]]

>> Noun Phrases are: 
[Reader, Department, Computer Science, Engineering]

>> Named Entities are: 
[('Reader, Department of Computer Science & Engineering', 'ORG')] 

------------------- Sentence 4 -------------------

Guru Jambsheshwar University of Science & Technology   


>> Tokens are: 
[Guru, Jambsheshwar, University, Science, &, Technology,  ] 

>> PoS Tags are: 
[('Guru', 'PROPN'), ('Jambsheshwar', 'PROPN'), ('University', 'PROPN'), ('Science', 'PROPN'), ('&', 'CCONJ'), ('Technology', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Guru', 'compound'), ('Jambsheshwar', 'compound'), ('University', 'ROOT'), ('Science', 'pobj'), ('&', 'cc'), ('Technology', 'conj'), (' ', 'punct')]

>> Bigrams: 
[[Guru, Jambsheshwar], [Jambsheshwar, University], [University, Science], [Science, &], [&, Technology], [Technology,  ]]

>> Trigrams: 
[[Guru, Jambsheshwar, University], [Jambsheshwar, University, Science], [University, Science, &], [Science, &, Technology], [&, Technology,  ]]

>> Noun Phrases are: 
[Guru Jambsheshwar University, Science, Technology]

>> Named Entities are: 
[('Science & Technology', 'ORG')] 

------------------- Sentence 5 -------------------

Hisar, Haryana, 125001,India     


>> Tokens are: 
[Hisar, ,, Haryana, ,, 125001,India,    ] 

>> PoS Tags are: 
[('Hisar', 'PROPN'), (',', 'PUNCT'), ('Haryana', 'PROPN'), (',', 'PUNCT'), ('125001,India', 'NUM'), ('   ', 'SPACE')] 

>> Dependency Tags are: 
[('Hisar', 'ROOT'), (',', 'punct'), ('Haryana', 'npadvmod'), (',', 'punct'), ('125001,India', 'nummod'), ('   ', 'appos')]

>> Bigrams: 
[[Hisar, ,], [,, Haryana], [Haryana, ,], [,, 125001,India], [125001,India,    ]]

>> Trigrams: 
[[Hisar, ,, Haryana], [,, Haryana, ,], [Haryana, ,, 125001,India], [,, 125001,India,    ]]

>> Noun Phrases are: 
[Hisar]

>> Named Entities are: 
[('Hisar', 'ORG'), ('Haryana', 'GPE')] 


================================ Paragraph 5 =================================

Omprakash Sangwan            sangwan_op@aiit.amity.edu  Head, CISCO Regional Networking Academy  Amity Institute of Information Technology   Amity University, Uttarpradesh, 201303,India    

------------------- Sentence 1 -------------------

Omprakash Sangwan            sangwan_op@aiit.amity.edu   


>> Tokens are: 
[Omprakash, Sangwan,            , sangwan_op@aiit.amity.edu,  ] 

>> PoS Tags are: 
[('Omprakash', 'PROPN'), ('Sangwan', 'PROPN'), ('           ', 'SPACE'), ('sangwan_op@aiit.amity.edu', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Omprakash', 'compound'), ('Sangwan', 'npadvmod'), ('           ', 'nummod'), ('sangwan_op@aiit.amity.edu', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[Omprakash, Sangwan], [Sangwan,            ], [           , sangwan_op@aiit.amity.edu], [sangwan_op@aiit.amity.edu,  ]]

>> Trigrams: 
[[Omprakash, Sangwan,            ], [Sangwan,            , sangwan_op@aiit.amity.edu], [           , sangwan_op@aiit.amity.edu,  ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Head, CISCO Regional Networking Academy   


>> Tokens are: 
[Head, ,, CISCO, Regional, Networking, Academy,  ] 

>> PoS Tags are: 
[('Head', 'PROPN'), (',', 'PUNCT'), ('CISCO', 'PROPN'), ('Regional', 'PROPN'), ('Networking', 'PROPN'), ('Academy', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Head', 'ROOT'), (',', 'punct'), ('CISCO', 'compound'), ('Regional', 'compound'), ('Networking', 'compound'), ('Academy', 'appos'), (' ', 'punct')]

>> Bigrams: 
[[Head, ,], [,, CISCO], [CISCO, Regional], [Regional, Networking], [Networking, Academy], [Academy,  ]]

>> Trigrams: 
[[Head, ,, CISCO], [,, CISCO, Regional], [CISCO, Regional, Networking], [Regional, Networking, Academy], [Networking, Academy,  ]]

>> Noun Phrases are: 
[Head, CISCO Regional Networking Academy]

>> Named Entities are: 
[('CISCO Regional Networking Academy  ', 'ORG')] 

------------------- Sentence 3 -------------------

Amity Institute of Information Technology   Amity University, Uttarpradesh, 201303,India     


>> Tokens are: 
[Amity, Institute, Information, Technology,   , Amity, University, ,, Uttarpradesh, ,, 201303,India,    ] 

>> PoS Tags are: 
[('Amity', 'PROPN'), ('Institute', 'PROPN'), ('Information', 'PROPN'), ('Technology', 'PROPN'), ('  ', 'SPACE'), ('Amity', 'PROPN'), ('University', 'PROPN'), (',', 'PUNCT'), ('Uttarpradesh', 'PROPN'), (',', 'PUNCT'), ('201303,India', 'NUM'), ('   ', 'SPACE')] 

>> Dependency Tags are: 
[('Amity', 'compound'), ('Institute', 'ROOT'), ('Information', 'compound'), ('Technology', 'pobj'), ('  ', 'punct'), ('Amity', 'compound'), ('University', 'conj'), (',', 'punct'), ('Uttarpradesh', 'appos'), (',', 'punct'), ('201303,India', 'compound'), ('   ', 'appos')]

>> Bigrams: 
[[Amity, Institute], [Institute, Information], [Information, Technology], [Technology,   ], [  , Amity], [Amity, University], [University, ,], [,, Uttarpradesh], [Uttarpradesh, ,], [,, 201303,India], [201303,India,    ]]

>> Trigrams: 
[[Amity, Institute, Information], [Institute, Information, Technology], [Information, Technology,   ], [Technology,   , Amity], [  , Amity, University], [Amity, University, ,], [University, ,, Uttarpradesh], [,, Uttarpradesh, ,], [Uttarpradesh, ,, 201303,India], [,, 201303,India,    ]]

>> Noun Phrases are: 
[Amity Institute, Information Technology, Amity University, Uttarpradesh]

>> Named Entities are: 
[('Amity University, Uttarpradesh', 'ORG'), ('201303,India', 'CARDINAL')] 


================================ Paragraph 6 =================================

  Abstract  

------------------- Sentence 1 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Abstract   


>> Tokens are: 
[Abstract,  ] 

>> PoS Tags are: 
[('Abstract', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Abstract', 'compound'), (' ', 'ROOT')]

>> Bigrams: 
[[Abstract,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 7 =================================

  This paper provides an extensive review of studies related to expert estimation of  software development using Machine-Learning Techniques (MLT). Machine  learning in this new era, is demonstrating the promise of producing consistently  accurate estimates. Machine learning system effectively “learns” how to estimate  from training set of completed projects. The main goal and contribution of the  review is to support the research on expert estimation, i.e.- to ease other  researchers for relevant expert estimation studies using machine-learning  techniques. This paper presents the most commonly used machine learning  techniques such as neural networks, case based reasoning, classification and  regression trees, rule induction, genetic algorithm & genetic programming for  expert estimation in the field of software development. In each of our study we  found that the results of various machine-learning techniques depends on  application areas on which they are applied.  Our review of study not only  suggests that these techniques are competitive with traditional estimators on one  data set, but also illustrate that these methods are sensitive to the data on which  they are trained.      Keywords: Machine Learning Techniques (MLT), Neural Networks (NN), Case Based Reasoning (CBR),  Classification and Regression Trees (CART), Rule Induction, Genetic Algorithms and Genetic Programming.  . 

------------------- Sentence 1 -------------------

  This paper provides an extensive review of studies related to expert estimation of  software development using Machine-Learning Techniques (MLT). 


>> Tokens are: 
[  , paper, provides, extensive, review, studies, related, expert, estimation,  , software, development, Machine, -, Learning, Techniques, (, MLT, ), .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('paper', 'NOUN'), ('provides', 'VERB'), ('extensive', 'ADJ'), ('review', 'NOUN'), ('studies', 'NOUN'), ('related', 'VERB'), ('expert', 'NOUN'), ('estimation', 'NOUN'), (' ', 'SPACE'), ('software', 'NOUN'), ('development', 'NOUN'), ('Machine', 'PROPN'), ('-', 'PUNCT'), ('Learning', 'PROPN'), ('Techniques', 'PROPN'), ('(', 'PUNCT'), ('MLT', 'PROPN'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'npadvmod'), ('paper', 'nsubj'), ('provides', 'ROOT'), ('extensive', 'amod'), ('review', 'dobj'), ('studies', 'pobj'), ('related', 'acl'), ('expert', 'compound'), ('estimation', 'pobj'), (' ', 'pobj'), ('software', 'compound'), ('development', 'pobj'), ('Machine', 'compound'), ('-', 'punct'), ('Learning', 'compound'), ('Techniques', 'dobj'), ('(', 'punct'), ('MLT', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[  , paper], [paper, provides], [provides, extensive], [extensive, review], [review, studies], [studies, related], [related, expert], [expert, estimation], [estimation,  ], [ , software], [software, development], [development, Machine], [Machine, -], [-, Learning], [Learning, Techniques], [Techniques, (], [(, MLT], [MLT, )], [), .]]

>> Trigrams: 
[[  , paper, provides], [paper, provides, extensive], [provides, extensive, review], [extensive, review, studies], [review, studies, related], [studies, related, expert], [related, expert, estimation], [expert, estimation,  ], [estimation,  , software], [ , software, development], [software, development, Machine], [development, Machine, -], [Machine, -, Learning], [-, Learning, Techniques], [Learning, Techniques, (], [Techniques, (, MLT], [(, MLT, )], [MLT, ), .]]

>> Noun Phrases are: 
[This paper, an extensive review, studies, expert estimation, software development, Machine-Learning Techniques, MLT]

>> Named Entities are: 
[('Machine-Learning Techniques', 'ORG')] 

------------------- Sentence 2 -------------------

Machine  learning in this new era, is demonstrating the promise of producing consistently  accurate estimates. 


>> Tokens are: 
[Machine,  , learning, new, era, ,, demonstrating, promise, producing, consistently,  , accurate, estimates, .] 

>> PoS Tags are: 
[('Machine', 'NOUN'), (' ', 'SPACE'), ('learning', 'VERB'), ('new', 'ADJ'), ('era', 'NOUN'), (',', 'PUNCT'), ('demonstrating', 'VERB'), ('promise', 'NOUN'), ('producing', 'VERB'), ('consistently', 'ADV'), (' ', 'SPACE'), ('accurate', 'ADJ'), ('estimates', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Machine', 'nsubj'), (' ', 'nummod'), ('learning', 'acl'), ('new', 'amod'), ('era', 'pobj'), (',', 'punct'), ('demonstrating', 'ROOT'), ('promise', 'dobj'), ('producing', 'pcomp'), ('consistently', 'advmod'), (' ', 'dobj'), ('accurate', 'amod'), ('estimates', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Machine,  ], [ , learning], [learning, new], [new, era], [era, ,], [,, demonstrating], [demonstrating, promise], [promise, producing], [producing, consistently], [consistently,  ], [ , accurate], [accurate, estimates], [estimates, .]]

>> Trigrams: 
[[Machine,  , learning], [ , learning, new], [learning, new, era], [new, era, ,], [era, ,, demonstrating], [,, demonstrating, promise], [demonstrating, promise, producing], [promise, producing, consistently], [producing, consistently,  ], [consistently,  , accurate], [ , accurate, estimates], [accurate, estimates, .]]

>> Noun Phrases are: 
[Machine, this new era, the promise, accurate estimates]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

Machine learning system effectively “learns” how to estimate  from training set of completed projects. 


>> Tokens are: 
[Machine, learning, system, effectively, “, learns, ”, estimate,  , training, set, completed, projects, .] 

>> PoS Tags are: 
[('Machine', 'NOUN'), ('learning', 'NOUN'), ('system', 'NOUN'), ('effectively', 'ADV'), ('“', 'PUNCT'), ('learns', 'VERB'), ('”', 'PUNCT'), ('estimate', 'VERB'), (' ', 'SPACE'), ('training', 'NOUN'), ('set', 'NOUN'), ('completed', 'VERB'), ('projects', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Machine', 'compound'), ('learning', 'compound'), ('system', 'nsubj'), ('effectively', 'advmod'), ('“', 'punct'), ('learns', 'ROOT'), ('”', 'punct'), ('estimate', 'xcomp'), (' ', 'dobj'), ('training', 'compound'), ('set', 'pobj'), ('completed', 'amod'), ('projects', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Machine, learning], [learning, system], [system, effectively], [effectively, “], [“, learns], [learns, ”], [”, estimate], [estimate,  ], [ , training], [training, set], [set, completed], [completed, projects], [projects, .]]

>> Trigrams: 
[[Machine, learning, system], [learning, system, effectively], [system, effectively, “], [effectively, “, learns], [“, learns, ”], [learns, ”, estimate], [”, estimate,  ], [estimate,  , training], [ , training, set], [training, set, completed], [set, completed, projects], [completed, projects, .]]

>> Noun Phrases are: 
[Machine learning system, training set, completed projects]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

The main goal and contribution of the  review is to support the research on expert estimation, i.e.- to ease other  researchers for relevant expert estimation studies using machine-learning  techniques. 


>> Tokens are: 
[main, goal, contribution,  , review, support, research, expert, estimation, ,, i.e.-, ease,  , researchers, relevant, expert, estimation, studies, machine, -, learning,  , techniques, .] 

>> PoS Tags are: 
[('main', 'ADJ'), ('goal', 'NOUN'), ('contribution', 'NOUN'), (' ', 'SPACE'), ('review', 'NOUN'), ('support', 'VERB'), ('research', 'NOUN'), ('expert', 'NOUN'), ('estimation', 'NOUN'), (',', 'PUNCT'), ('i.e.-', 'PROPN'), ('ease', 'VERB'), (' ', 'SPACE'), ('researchers', 'NOUN'), ('relevant', 'ADJ'), ('expert', 'NOUN'), ('estimation', 'NOUN'), ('studies', 'NOUN'), ('machine', 'NOUN'), ('-', 'PUNCT'), ('learning', 'VERB'), (' ', 'SPACE'), ('techniques', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('main', 'amod'), ('goal', 'nsubj'), ('contribution', 'conj'), (' ', 'compound'), ('review', 'pobj'), ('support', 'xcomp'), ('research', 'dobj'), ('expert', 'compound'), ('estimation', 'pobj'), (',', 'punct'), ('i.e.-', 'appos'), ('ease', 'acl'), (' ', 'compound'), ('researchers', 'dobj'), ('relevant', 'amod'), ('expert', 'compound'), ('estimation', 'compound'), ('studies', 'pobj'), ('machine', 'npadvmod'), ('-', 'punct'), ('learning', 'amod'), (' ', 'compound'), ('techniques', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[main, goal], [goal, contribution], [contribution,  ], [ , review], [review, support], [support, research], [research, expert], [expert, estimation], [estimation, ,], [,, i.e.-], [i.e.-, ease], [ease,  ], [ , researchers], [researchers, relevant], [relevant, expert], [expert, estimation], [estimation, studies], [studies, machine], [machine, -], [-, learning], [learning,  ], [ , techniques], [techniques, .]]

>> Trigrams: 
[[main, goal, contribution], [goal, contribution,  ], [contribution,  , review], [ , review, support], [review, support, research], [support, research, expert], [research, expert, estimation], [expert, estimation, ,], [estimation, ,, i.e.-], [,, i.e.-, ease], [i.e.-, ease,  ], [ease,  , researchers], [ , researchers, relevant], [researchers, relevant, expert], [relevant, expert, estimation], [expert, estimation, studies], [estimation, studies, machine], [studies, machine, -], [machine, -, learning], [-, learning,  ], [learning,  , techniques], [ , techniques, .]]

>> Noun Phrases are: 
[The main goal, contribution, the  review, the research, expert estimation, i.e.-, other  researchers, relevant expert estimation studies, machine-learning  techniques]

>> Named Entities are: 
[] 

------------------- Sentence 5 -------------------

This paper presents the most commonly used machine learning  techniques such as neural networks, case based reasoning, classification and  regression trees, rule induction, genetic algorithm & genetic programming for  expert estimation in the field of software development. 


>> Tokens are: 
[paper, presents, commonly, machine, learning,  , techniques, neural, networks, ,, case, based, reasoning, ,, classification,  , regression, trees, ,, rule, induction, ,, genetic, algorithm, &, genetic, programming,  , expert, estimation, field, software, development, .] 

>> PoS Tags are: 
[('paper', 'NOUN'), ('presents', 'VERB'), ('commonly', 'ADV'), ('machine', 'NOUN'), ('learning', 'VERB'), (' ', 'SPACE'), ('techniques', 'NOUN'), ('neural', 'ADJ'), ('networks', 'NOUN'), (',', 'PUNCT'), ('case', 'NOUN'), ('based', 'VERB'), ('reasoning', 'NOUN'), (',', 'PUNCT'), ('classification', 'NOUN'), (' ', 'SPACE'), ('regression', 'NOUN'), ('trees', 'NOUN'), (',', 'PUNCT'), ('rule', 'VERB'), ('induction', 'NOUN'), (',', 'PUNCT'), ('genetic', 'ADJ'), ('algorithm', 'NOUN'), ('&', 'CCONJ'), ('genetic', 'ADJ'), ('programming', 'NOUN'), (' ', 'SPACE'), ('expert', 'NOUN'), ('estimation', 'NOUN'), ('field', 'NOUN'), ('software', 'NOUN'), ('development', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('paper', 'nsubj'), ('presents', 'ROOT'), ('commonly', 'advmod'), ('machine', 'dobj'), ('learning', 'acl'), (' ', 'compound'), ('techniques', 'dobj'), ('neural', 'amod'), ('networks', 'pobj'), (',', 'punct'), ('case', 'npadvmod'), ('based', 'amod'), ('reasoning', 'conj'), (',', 'punct'), ('classification', 'conj'), (' ', 'conj'), ('regression', 'compound'), ('trees', 'conj'), (',', 'punct'), ('rule', 'conj'), ('induction', 'dobj'), (',', 'punct'), ('genetic', 'amod'), ('algorithm', 'conj'), ('&', 'cc'), ('genetic', 'amod'), ('programming', 'conj'), (' ', 'pobj'), ('expert', 'compound'), ('estimation', 'dobj'), ('field', 'pobj'), ('software', 'compound'), ('development', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[paper, presents], [presents, commonly], [commonly, machine], [machine, learning], [learning,  ], [ , techniques], [techniques, neural], [neural, networks], [networks, ,], [,, case], [case, based], [based, reasoning], [reasoning, ,], [,, classification], [classification,  ], [ , regression], [regression, trees], [trees, ,], [,, rule], [rule, induction], [induction, ,], [,, genetic], [genetic, algorithm], [algorithm, &], [&, genetic], [genetic, programming], [programming,  ], [ , expert], [expert, estimation], [estimation, field], [field, software], [software, development], [development, .]]

>> Trigrams: 
[[paper, presents, commonly], [presents, commonly, machine], [commonly, machine, learning], [machine, learning,  ], [learning,  , techniques], [ , techniques, neural], [techniques, neural, networks], [neural, networks, ,], [networks, ,, case], [,, case, based], [case, based, reasoning], [based, reasoning, ,], [reasoning, ,, classification], [,, classification,  ], [classification,  , regression], [ , regression, trees], [regression, trees, ,], [trees, ,, rule], [,, rule, induction], [rule, induction, ,], [induction, ,, genetic], [,, genetic, algorithm], [genetic, algorithm, &], [algorithm, &, genetic], [&, genetic, programming], [genetic, programming,  ], [programming,  , expert], [ , expert, estimation], [expert, estimation, field], [estimation, field, software], [field, software, development], [software, development, .]]

>> Noun Phrases are: 
[This paper, the most commonly used machine,  techniques, neural networks, case based reasoning, classification, regression trees, induction, genetic algorithm, genetic programming, expert estimation, the field, software development]

>> Named Entities are: 
[] 

------------------- Sentence 6 -------------------

In each of our study we  found that the results of various machine-learning techniques depends on  application areas on which they are applied. 


>> Tokens are: 
[study,  , found, results, machine, -, learning, techniques, depends,  , application, areas, applied, .] 

>> PoS Tags are: 
[('study', 'NOUN'), (' ', 'SPACE'), ('found', 'VERB'), ('results', 'NOUN'), ('machine', 'NOUN'), ('-', 'PUNCT'), ('learning', 'VERB'), ('techniques', 'NOUN'), ('depends', 'VERB'), (' ', 'SPACE'), ('application', 'NOUN'), ('areas', 'NOUN'), ('applied', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('study', 'pobj'), (' ', 'appos'), ('found', 'ROOT'), ('results', 'nsubj'), ('machine', 'npadvmod'), ('-', 'punct'), ('learning', 'amod'), ('techniques', 'pobj'), ('depends', 'ccomp'), (' ', 'compound'), ('application', 'compound'), ('areas', 'pobj'), ('applied', 'relcl'), ('.', 'punct')]

>> Bigrams: 
[[study,  ], [ , found], [found, results], [results, machine], [machine, -], [-, learning], [learning, techniques], [techniques, depends], [depends,  ], [ , application], [application, areas], [areas, applied], [applied, .]]

>> Trigrams: 
[[study,  , found], [ , found, results], [found, results, machine], [results, machine, -], [machine, -, learning], [-, learning, techniques], [learning, techniques, depends], [techniques, depends,  ], [depends,  , application], [ , application, areas], [application, areas, applied], [areas, applied, .]]

>> Noun Phrases are: 
[our study, we, the results, various machine-learning techniques,  application areas, they]

>> Named Entities are: 
[] 

------------------- Sentence 7 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 8 -------------------

Our review of study not only  suggests that these techniques are competitive with traditional estimators on one  data set, but also illustrate that these methods are sensitive to the data on which  they are trained. 


>> Tokens are: 
[review, study,  , suggests, techniques, competitive, traditional, estimators,  , data, set, ,, illustrate, methods, sensitive, data,  , trained, .] 

>> PoS Tags are: 
[('review', 'NOUN'), ('study', 'NOUN'), (' ', 'SPACE'), ('suggests', 'VERB'), ('techniques', 'NOUN'), ('competitive', 'ADJ'), ('traditional', 'ADJ'), ('estimators', 'NOUN'), (' ', 'SPACE'), ('data', 'NOUN'), ('set', 'VERB'), (',', 'PUNCT'), ('illustrate', 'VERB'), ('methods', 'NOUN'), ('sensitive', 'ADJ'), ('data', 'NOUN'), (' ', 'SPACE'), ('trained', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('review', 'nsubj'), ('study', 'pobj'), (' ', 'nsubj'), ('suggests', 'ROOT'), ('techniques', 'nsubj'), ('competitive', 'acomp'), ('traditional', 'amod'), ('estimators', 'pobj'), (' ', 'compound'), ('data', 'nsubj'), ('set', 'pobj'), (',', 'punct'), ('illustrate', 'conj'), ('methods', 'nsubj'), ('sensitive', 'acomp'), ('data', 'pobj'), (' ', 'pobj'), ('trained', 'relcl'), ('.', 'punct')]

>> Bigrams: 
[[review, study], [study,  ], [ , suggests], [suggests, techniques], [techniques, competitive], [competitive, traditional], [traditional, estimators], [estimators,  ], [ , data], [data, set], [set, ,], [,, illustrate], [illustrate, methods], [methods, sensitive], [sensitive, data], [data,  ], [ , trained], [trained, .]]

>> Trigrams: 
[[review, study,  ], [study,  , suggests], [ , suggests, techniques], [suggests, techniques, competitive], [techniques, competitive, traditional], [competitive, traditional, estimators], [traditional, estimators,  ], [estimators,  , data], [ , data, set], [data, set, ,], [set, ,, illustrate], [,, illustrate, methods], [illustrate, methods, sensitive], [methods, sensitive, data], [sensitive, data,  ], [data,  , trained], [ , trained, .]]

>> Noun Phrases are: 
[Our review, study, these techniques, traditional estimators, one  data, these methods, the data, they]

>> Named Entities are: 
[('one', 'CARDINAL')] 

------------------- Sentence 9 -------------------

     Keywords: Machine Learning Techniques (MLT), Neural Networks (NN), Case Based Reasoning (CBR),  Classification and Regression Trees (CART), Rule Induction, Genetic Algorithms and Genetic Programming. 


>> Tokens are: 
[     , Keywords, :, Machine, Learning, Techniques, (, MLT, ), ,, Neural, Networks, (, NN, ), ,, Case, Based, Reasoning, (, CBR, ), ,,  , Classification, Regression, Trees, (, CART, ), ,, Rule, Induction, ,, Genetic, Algorithms, Genetic, Programming, .] 

>> PoS Tags are: 
[('     ', 'SPACE'), ('Keywords', 'NOUN'), (':', 'PUNCT'), ('Machine', 'PROPN'), ('Learning', 'PROPN'), ('Techniques', 'PROPN'), ('(', 'PUNCT'), ('MLT', 'PROPN'), (')', 'PUNCT'), (',', 'PUNCT'), ('Neural', 'PROPN'), ('Networks', 'PROPN'), ('(', 'PUNCT'), ('NN', 'PROPN'), (')', 'PUNCT'), (',', 'PUNCT'), ('Case', 'NOUN'), ('Based', 'VERB'), ('Reasoning', 'NOUN'), ('(', 'PUNCT'), ('CBR', 'PROPN'), (')', 'PUNCT'), (',', 'PUNCT'), (' ', 'SPACE'), ('Classification', 'PROPN'), ('Regression', 'PROPN'), ('Trees', 'PROPN'), ('(', 'PUNCT'), ('CART', 'PROPN'), (')', 'PUNCT'), (',', 'PUNCT'), ('Rule', 'PROPN'), ('Induction', 'PROPN'), (',', 'PUNCT'), ('Genetic', 'PROPN'), ('Algorithms', 'PROPN'), ('Genetic', 'PROPN'), ('Programming', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('     ', 'compound'), ('Keywords', 'ROOT'), (':', 'punct'), ('Machine', 'compound'), ('Learning', 'compound'), ('Techniques', 'appos'), ('(', 'punct'), ('MLT', 'appos'), (')', 'punct'), (',', 'punct'), ('Neural', 'compound'), ('Networks', 'conj'), ('(', 'punct'), ('NN', 'appos'), (')', 'punct'), (',', 'punct'), ('Case', 'appos'), ('Based', 'prep'), ('Reasoning', 'appos'), ('(', 'punct'), ('CBR', 'appos'), (')', 'punct'), (',', 'punct'), (' ', 'nmod'), ('Classification', 'nmod'), ('Regression', 'conj'), ('Trees', 'conj'), ('(', 'punct'), ('CART', 'appos'), (')', 'punct'), (',', 'punct'), ('Rule', 'compound'), ('Induction', 'conj'), (',', 'punct'), ('Genetic', 'compound'), ('Algorithms', 'conj'), ('Genetic', 'compound'), ('Programming', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[     , Keywords], [Keywords, :], [:, Machine], [Machine, Learning], [Learning, Techniques], [Techniques, (], [(, MLT], [MLT, )], [), ,], [,, Neural], [Neural, Networks], [Networks, (], [(, NN], [NN, )], [), ,], [,, Case], [Case, Based], [Based, Reasoning], [Reasoning, (], [(, CBR], [CBR, )], [), ,], [,,  ], [ , Classification], [Classification, Regression], [Regression, Trees], [Trees, (], [(, CART], [CART, )], [), ,], [,, Rule], [Rule, Induction], [Induction, ,], [,, Genetic], [Genetic, Algorithms], [Algorithms, Genetic], [Genetic, Programming], [Programming, .]]

>> Trigrams: 
[[     , Keywords, :], [Keywords, :, Machine], [:, Machine, Learning], [Machine, Learning, Techniques], [Learning, Techniques, (], [Techniques, (, MLT], [(, MLT, )], [MLT, ), ,], [), ,, Neural], [,, Neural, Networks], [Neural, Networks, (], [Networks, (, NN], [(, NN, )], [NN, ), ,], [), ,, Case], [,, Case, Based], [Case, Based, Reasoning], [Based, Reasoning, (], [Reasoning, (, CBR], [(, CBR, )], [CBR, ), ,], [), ,,  ], [,,  , Classification], [ , Classification, Regression], [Classification, Regression, Trees], [Regression, Trees, (], [Trees, (, CART], [(, CART, )], [CART, ), ,], [), ,, Rule], [,, Rule, Induction], [Rule, Induction, ,], [Induction, ,, Genetic], [,, Genetic, Algorithms], [Genetic, Algorithms, Genetic], [Algorithms, Genetic, Programming], [Genetic, Programming, .]]

>> Noun Phrases are: 
[     Keywords, Machine Learning Techniques, MLT, Neural Networks, NN, Case, Reasoning, (CBR,  Classification and Regression Trees, CART, Rule Induction, Genetic Algorithms, Genetic Programming]

>> Named Entities are: 
[('Neural Networks', 'ORG'), ('Rule Induction, Genetic Algorithms and Genetic Programming', 'ORG')] 

------------------- Sentence 10 -------------------

 . 


>> Tokens are: 
[ , .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[ , .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 8 =================================

  1.  INTRODUCTION  The poor performance results produced by statistical estimation models have flooded the  estimation area for over the last decade. Their inability to handle categorical data, cope with  missing data points, spread of data points and most importantly lack of reasoning capabilities has  triggered an increase in the number of studies using non-traditional methods like machine  learning techniques.     Machine Learning is the study of computational methods for improving performance by  mechanizing the acquisition of knowledge from experience [18]. Expert performance requires 

------------------- Sentence 1 -------------------

  1. 


>> Tokens are: 
[  , 1, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('1', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('1', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[  , 1], [1, .]]

>> Trigrams: 
[[  , 1, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('1', 'CARDINAL')] 

------------------- Sentence 2 -------------------

 INTRODUCTION   


>> Tokens are: 
[ , INTRODUCTION,  ] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('INTRODUCTION', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'nmod'), ('INTRODUCTION', 'ROOT'), (' ', 'appos')]

>> Bigrams: 
[[ , INTRODUCTION], [INTRODUCTION,  ]]

>> Trigrams: 
[[ , INTRODUCTION,  ]]

>> Noun Phrases are: 
[ INTRODUCTION]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

The poor performance results produced by statistical estimation models have flooded the  estimation area for over the last decade. 


>> Tokens are: 
[poor, performance, results, produced, statistical, estimation, models, flooded,  , estimation, area, decade, .] 

>> PoS Tags are: 
[('poor', 'ADJ'), ('performance', 'NOUN'), ('results', 'NOUN'), ('produced', 'VERB'), ('statistical', 'ADJ'), ('estimation', 'NOUN'), ('models', 'NOUN'), ('flooded', 'VERB'), (' ', 'SPACE'), ('estimation', 'NOUN'), ('area', 'NOUN'), ('decade', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('poor', 'amod'), ('performance', 'compound'), ('results', 'nsubj'), ('produced', 'acl'), ('statistical', 'amod'), ('estimation', 'compound'), ('models', 'pobj'), ('flooded', 'ROOT'), (' ', 'compound'), ('estimation', 'compound'), ('area', 'dobj'), ('decade', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[poor, performance], [performance, results], [results, produced], [produced, statistical], [statistical, estimation], [estimation, models], [models, flooded], [flooded,  ], [ , estimation], [estimation, area], [area, decade], [decade, .]]

>> Trigrams: 
[[poor, performance, results], [performance, results, produced], [results, produced, statistical], [produced, statistical, estimation], [statistical, estimation, models], [estimation, models, flooded], [models, flooded,  ], [flooded,  , estimation], [ , estimation, area], [estimation, area, decade], [area, decade, .]]

>> Noun Phrases are: 
[The poor performance results, statistical estimation models, the  estimation area, the last decade]

>> Named Entities are: 
[('the last decade', 'DATE')] 

------------------- Sentence 4 -------------------

Their inability to handle categorical data, cope with  missing data points, spread of data points and most importantly lack of reasoning capabilities has  triggered an increase in the number of studies using non-traditional methods like machine  learning techniques. 


>> Tokens are: 
[inability, handle, categorical, data, ,, cope,  , missing, data, points, ,, spread, data, points, importantly, lack, reasoning, capabilities,  , triggered, increase, number, studies, non, -, traditional, methods, like, machine,  , learning, techniques, .] 

>> PoS Tags are: 
[('inability', 'NOUN'), ('handle', 'VERB'), ('categorical', 'ADJ'), ('data', 'NOUN'), (',', 'PUNCT'), ('cope', 'VERB'), (' ', 'SPACE'), ('missing', 'VERB'), ('data', 'NOUN'), ('points', 'NOUN'), (',', 'PUNCT'), ('spread', 'VERB'), ('data', 'NOUN'), ('points', 'NOUN'), ('importantly', 'ADV'), ('lack', 'NOUN'), ('reasoning', 'VERB'), ('capabilities', 'NOUN'), (' ', 'SPACE'), ('triggered', 'VERB'), ('increase', 'NOUN'), ('number', 'NOUN'), ('studies', 'NOUN'), ('non', 'ADJ'), ('-', 'ADJ'), ('traditional', 'ADJ'), ('methods', 'NOUN'), ('like', 'ADP'), ('machine', 'NOUN'), (' ', 'SPACE'), ('learning', 'VERB'), ('techniques', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('inability', 'nsubj'), ('handle', 'acl'), ('categorical', 'amod'), ('data', 'dobj'), (',', 'punct'), ('cope', 'ROOT'), (' ', 'pobj'), ('missing', 'acl'), ('data', 'compound'), ('points', 'dobj'), (',', 'punct'), ('spread', 'dep'), ('data', 'compound'), ('points', 'pobj'), ('importantly', 'advmod'), ('lack', 'conj'), ('reasoning', 'compound'), ('capabilities', 'pobj'), (' ', 'nsubj'), ('triggered', 'conj'), ('increase', 'dobj'), ('number', 'pobj'), ('studies', 'pobj'), ('non', 'amod'), ('-', 'amod'), ('traditional', 'amod'), ('methods', 'dobj'), ('like', 'prep'), ('machine', 'pobj'), (' ', 'punct'), ('learning', 'advcl'), ('techniques', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[inability, handle], [handle, categorical], [categorical, data], [data, ,], [,, cope], [cope,  ], [ , missing], [missing, data], [data, points], [points, ,], [,, spread], [spread, data], [data, points], [points, importantly], [importantly, lack], [lack, reasoning], [reasoning, capabilities], [capabilities,  ], [ , triggered], [triggered, increase], [increase, number], [number, studies], [studies, non], [non, -], [-, traditional], [traditional, methods], [methods, like], [like, machine], [machine,  ], [ , learning], [learning, techniques], [techniques, .]]

>> Trigrams: 
[[inability, handle, categorical], [handle, categorical, data], [categorical, data, ,], [data, ,, cope], [,, cope,  ], [cope,  , missing], [ , missing, data], [missing, data, points], [data, points, ,], [points, ,, spread], [,, spread, data], [spread, data, points], [data, points, importantly], [points, importantly, lack], [importantly, lack, reasoning], [lack, reasoning, capabilities], [reasoning, capabilities,  ], [capabilities,  , triggered], [ , triggered, increase], [triggered, increase, number], [increase, number, studies], [number, studies, non], [studies, non, -], [non, -, traditional], [-, traditional, methods], [traditional, methods, like], [methods, like, machine], [like, machine,  ], [machine,  , learning], [ , learning, techniques], [learning, techniques, .]]

>> Noun Phrases are: 
[Their inability, categorical data, data points, data points, reasoning capabilities, an increase, the number, studies, non-traditional methods, machine, techniques]

>> Named Entities are: 
[] 

------------------- Sentence 5 -------------------

    Machine Learning is the study of computational methods for improving performance by  mechanizing the acquisition of knowledge from experience [18]. 


>> Tokens are: 
[    , Machine, Learning, study, computational, methods, improving, performance,  , mechanizing, acquisition, knowledge, experience, [, 18, ], .] 

>> PoS Tags are: 
[('    ', 'SPACE'), ('Machine', 'PROPN'), ('Learning', 'PROPN'), ('study', 'NOUN'), ('computational', 'ADJ'), ('methods', 'NOUN'), ('improving', 'VERB'), ('performance', 'NOUN'), (' ', 'SPACE'), ('mechanizing', 'VERB'), ('acquisition', 'NOUN'), ('knowledge', 'NOUN'), ('experience', 'NOUN'), ('[', 'PUNCT'), ('18', 'NUM'), (']', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('    ', 'compound'), ('Machine', 'compound'), ('Learning', 'nsubj'), ('study', 'attr'), ('computational', 'amod'), ('methods', 'pobj'), ('improving', 'pcomp'), ('performance', 'dobj'), (' ', 'pobj'), ('mechanizing', 'acl'), ('acquisition', 'dobj'), ('knowledge', 'pobj'), ('experience', 'pobj'), ('[', 'punct'), ('18', 'appos'), (']', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[    , Machine], [Machine, Learning], [Learning, study], [study, computational], [computational, methods], [methods, improving], [improving, performance], [performance,  ], [ , mechanizing], [mechanizing, acquisition], [acquisition, knowledge], [knowledge, experience], [experience, [], [[, 18], [18, ]], [], .]]

>> Trigrams: 
[[    , Machine, Learning], [Machine, Learning, study], [Learning, study, computational], [study, computational, methods], [computational, methods, improving], [methods, improving, performance], [improving, performance,  ], [performance,  , mechanizing], [ , mechanizing, acquisition], [mechanizing, acquisition, knowledge], [acquisition, knowledge, experience], [knowledge, experience, [], [experience, [, 18], [[, 18, ]], [18, ], .]]

>> Noun Phrases are: 
[    Machine Learning, the study, computational methods, performance, the acquisition, knowledge, experience]

>> Named Entities are: 
[('18', 'CARDINAL')] 

------------------- Sentence 6 -------------------

Expert performance requires 


>> Tokens are: 
[Expert, performance, requires] 

>> PoS Tags are: 
[('Expert', 'NOUN'), ('performance', 'NOUN'), ('requires', 'VERB')] 

>> Dependency Tags are: 
[('Expert', 'compound'), ('performance', 'nsubj'), ('requires', 'ROOT')]

>> Bigrams: 
[[Expert, performance], [performance, requires]]

>> Trigrams: 
[[Expert, performance, requires]]

>> Noun Phrases are: 
[Expert performance]

>> Named Entities are: 
[] 


================================ Paragraph 9 =================================

Yogesh Singh, Pradeep Kumar Bhatia & Omprakash Sangwan  

------------------- Sentence 1 -------------------

Yogesh Singh, Pradeep Kumar Bhatia & Omprakash Sangwan   


>> Tokens are: 
[Yogesh, Singh, ,, Pradeep, Kumar, Bhatia, &, Omprakash, Sangwan,  ] 

>> PoS Tags are: 
[('Yogesh', 'PROPN'), ('Singh', 'PROPN'), (',', 'PUNCT'), ('Pradeep', 'PROPN'), ('Kumar', 'PROPN'), ('Bhatia', 'PROPN'), ('&', 'CCONJ'), ('Omprakash', 'PROPN'), ('Sangwan', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Yogesh', 'compound'), ('Singh', 'ROOT'), (',', 'punct'), ('Pradeep', 'compound'), ('Kumar', 'compound'), ('Bhatia', 'conj'), ('&', 'cc'), ('Omprakash', 'compound'), ('Sangwan', 'conj'), (' ', 'punct')]

>> Bigrams: 
[[Yogesh, Singh], [Singh, ,], [,, Pradeep], [Pradeep, Kumar], [Kumar, Bhatia], [Bhatia, &], [&, Omprakash], [Omprakash, Sangwan], [Sangwan,  ]]

>> Trigrams: 
[[Yogesh, Singh, ,], [Singh, ,, Pradeep], [,, Pradeep, Kumar], [Pradeep, Kumar, Bhatia], [Kumar, Bhatia, &], [Bhatia, &, Omprakash], [&, Omprakash, Sangwan], [Omprakash, Sangwan,  ]]

>> Noun Phrases are: 
[Yogesh Singh, Pradeep Kumar Bhatia, Omprakash Sangwan]

>> Named Entities are: 
[('Yogesh Singh', 'PERSON'), ('Kumar Bhatia & Omprakash Sangwan', 'ORG')] 


================================ Paragraph 10 =================================

International Journal of Computer Science and Security, Volume (1) : Issue (1) 71  

------------------- Sentence 1 -------------------

International Journal of Computer Science and Security, Volume (1) : Issue (1) 71   


>> Tokens are: 
[International, Journal, Computer, Science, Security, ,, Volume, (, 1, ), :, Issue, (, 1, ), 71,  ] 

>> PoS Tags are: 
[('International', 'PROPN'), ('Journal', 'PROPN'), ('Computer', 'PROPN'), ('Science', 'PROPN'), ('Security', 'PROPN'), (',', 'PUNCT'), ('Volume', 'NOUN'), ('(', 'PUNCT'), ('1', 'NUM'), (')', 'PUNCT'), (':', 'PUNCT'), ('Issue', 'NOUN'), ('(', 'PUNCT'), ('1', 'NUM'), (')', 'PUNCT'), ('71', 'NUM'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('International', 'compound'), ('Journal', 'ROOT'), ('Computer', 'compound'), ('Science', 'pobj'), ('Security', 'conj'), (',', 'punct'), ('Volume', 'appos'), ('(', 'punct'), ('1', 'appos'), (')', 'punct'), (':', 'punct'), ('Issue', 'appos'), ('(', 'punct'), ('1', 'appos'), (')', 'punct'), ('71', 'nummod'), (' ', 'appos')]

>> Bigrams: 
[[International, Journal], [Journal, Computer], [Computer, Science], [Science, Security], [Security, ,], [,, Volume], [Volume, (], [(, 1], [1, )], [), :], [:, Issue], [Issue, (], [(, 1], [1, )], [), 71], [71,  ]]

>> Trigrams: 
[[International, Journal, Computer], [Journal, Computer, Science], [Computer, Science, Security], [Science, Security, ,], [Security, ,, Volume], [,, Volume, (], [Volume, (, 1], [(, 1, )], [1, ), :], [), :, Issue], [:, Issue, (], [Issue, (, 1], [(, 1, )], [1, ), 71], [), 71,  ]]

>> Noun Phrases are: 
[International Journal, Computer Science, Security, Volume, Issue]

>> Named Entities are: 
[('International Journal of Computer Science and Security, Volume', 'ORG'), ('1', 'CARDINAL')] 


================================ Paragraph 11 =================================

much domain specific knowledge, and knowledge engineering has produced hundreds of AI  expert systems that are now used regularly in industry. Machine Learning aims to provide  increasing levels of automation in the knowledge engineering process, replacing much time- consuming human activity with automatic techniques that improve accuracy or efficiency by  discovering and exploiting regularities in training data. The ultimate test of machine learning is its  ability to produce systems that are used regularly in industry, education, and elsewhere. Most  evaluation in machine learning is experimental in nature, aimed at showing that the learning  method leads to performance on a separate test set, in one or more realistic domains, that is  better than performance on that test set without learning.     At a general level, there are two types of machine learning: inductive, and deductive. Deductive  learning works on existing facts and knowledge and deduces new knowledge from the old.  Inductive machine learning methods create computer programs by extracting rules and patterns  out of massive data sets. Inductive learning takes examples and generalizes rather than starting  with existing knowledge one major subclass of inductive learning is concept learning. This takes  examples of a concept and tries to build a general description of the concept. Very often, the  examples are described using attribute-value pairs.     Machine learning overlaps heavily with statistics. In fact, many machine-learning algorithms have  been found to have direct counterparts with statistics. For example, boosting is now widely  thought to be a form of stage wise regression using a specific type of loss function. Machine  learning has a wide spectrum of applications including natural language processing, search  engines, medical diagnosis, bioinformatics and cheminformatics, detecting credit card fraud,  stock market analysis, classifying DNA sequences, speech and handwriting recognition, object  recognition in computer vision, game playing and robot locomotion.    In our study we concentrate on the various paradigms, which are used in machine learning. Our  review also examines the comparative study of machine learning technique with suitable  application area.     This paper is organized as follows: In section 2 we discuss about the use of Neural Network in  machine learning. CBR with application area is presented in section 3. CART is another efficient  learning method described in section 4. Another paradigm rule induction is highlighted in section  5. In section 6 the impact of genetic algorithm and programming are discussed. Section 7  presents the discussion on various machine-learning techniques and conclusions and future  direction are presented in section 8.  

------------------- Sentence 1 -------------------

much domain specific knowledge, and knowledge engineering has produced hundreds of AI  expert systems that are now used regularly in industry. 


>> Tokens are: 
[domain, specific, knowledge, ,, knowledge, engineering, produced, hundreds, AI,  , expert, systems, regularly, industry, .] 

>> PoS Tags are: 
[('domain', 'NOUN'), ('specific', 'ADJ'), ('knowledge', 'NOUN'), (',', 'PUNCT'), ('knowledge', 'NOUN'), ('engineering', 'NOUN'), ('produced', 'VERB'), ('hundreds', 'NOUN'), ('AI', 'PROPN'), (' ', 'SPACE'), ('expert', 'NOUN'), ('systems', 'NOUN'), ('regularly', 'ADV'), ('industry', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('domain', 'ROOT'), ('specific', 'amod'), ('knowledge', 'dobj'), (',', 'punct'), ('knowledge', 'compound'), ('engineering', 'nsubj'), ('produced', 'conj'), ('hundreds', 'dobj'), ('AI', 'nmod'), (' ', 'nummod'), ('expert', 'compound'), ('systems', 'pobj'), ('regularly', 'advmod'), ('industry', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[domain, specific], [specific, knowledge], [knowledge, ,], [,, knowledge], [knowledge, engineering], [engineering, produced], [produced, hundreds], [hundreds, AI], [AI,  ], [ , expert], [expert, systems], [systems, regularly], [regularly, industry], [industry, .]]

>> Trigrams: 
[[domain, specific, knowledge], [specific, knowledge, ,], [knowledge, ,, knowledge], [,, knowledge, engineering], [knowledge, engineering, produced], [engineering, produced, hundreds], [produced, hundreds, AI], [hundreds, AI,  ], [AI,  , expert], [ , expert, systems], [expert, systems, regularly], [systems, regularly, industry], [regularly, industry, .]]

>> Noun Phrases are: 
[much domain, specific knowledge, knowledge engineering, hundreds, AI  expert systems, industry]

>> Named Entities are: 
[('hundreds', 'CARDINAL'), ('AI', 'ORG')] 

------------------- Sentence 2 -------------------

Machine Learning aims to provide  increasing levels of automation in the knowledge engineering process, replacing much time- consuming human activity with automatic techniques that improve accuracy or efficiency by  discovering and exploiting regularities in training data. 


>> Tokens are: 
[Machine, Learning, aims, provide,  , increasing, levels, automation, knowledge, engineering, process, ,, replacing, time-, consuming, human, activity, automatic, techniques, improve, accuracy, efficiency,  , discovering, exploiting, regularities, training, data, .] 

>> PoS Tags are: 
[('Machine', 'PROPN'), ('Learning', 'PROPN'), ('aims', 'VERB'), ('provide', 'VERB'), (' ', 'SPACE'), ('increasing', 'VERB'), ('levels', 'NOUN'), ('automation', 'NOUN'), ('knowledge', 'NOUN'), ('engineering', 'NOUN'), ('process', 'NOUN'), (',', 'PUNCT'), ('replacing', 'VERB'), ('time-', 'NOUN'), ('consuming', 'VERB'), ('human', 'ADJ'), ('activity', 'NOUN'), ('automatic', 'ADJ'), ('techniques', 'NOUN'), ('improve', 'VERB'), ('accuracy', 'NOUN'), ('efficiency', 'NOUN'), (' ', 'SPACE'), ('discovering', 'VERB'), ('exploiting', 'VERB'), ('regularities', 'NOUN'), ('training', 'NOUN'), ('data', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Machine', 'compound'), ('Learning', 'nsubj'), ('aims', 'ROOT'), ('provide', 'xcomp'), (' ', 'dative'), ('increasing', 'amod'), ('levels', 'dobj'), ('automation', 'pobj'), ('knowledge', 'compound'), ('engineering', 'compound'), ('process', 'pobj'), (',', 'punct'), ('replacing', 'advcl'), ('time-', 'npadvmod'), ('consuming', 'ccomp'), ('human', 'amod'), ('activity', 'dobj'), ('automatic', 'amod'), ('techniques', 'pobj'), ('improve', 'relcl'), ('accuracy', 'dobj'), ('efficiency', 'conj'), (' ', 'pobj'), ('discovering', 'advcl'), ('exploiting', 'conj'), ('regularities', 'dobj'), ('training', 'compound'), ('data', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Machine, Learning], [Learning, aims], [aims, provide], [provide,  ], [ , increasing], [increasing, levels], [levels, automation], [automation, knowledge], [knowledge, engineering], [engineering, process], [process, ,], [,, replacing], [replacing, time-], [time-, consuming], [consuming, human], [human, activity], [activity, automatic], [automatic, techniques], [techniques, improve], [improve, accuracy], [accuracy, efficiency], [efficiency,  ], [ , discovering], [discovering, exploiting], [exploiting, regularities], [regularities, training], [training, data], [data, .]]

>> Trigrams: 
[[Machine, Learning, aims], [Learning, aims, provide], [aims, provide,  ], [provide,  , increasing], [ , increasing, levels], [increasing, levels, automation], [levels, automation, knowledge], [automation, knowledge, engineering], [knowledge, engineering, process], [engineering, process, ,], [process, ,, replacing], [,, replacing, time-], [replacing, time-, consuming], [time-, consuming, human], [consuming, human, activity], [human, activity, automatic], [activity, automatic, techniques], [automatic, techniques, improve], [techniques, improve, accuracy], [improve, accuracy, efficiency], [accuracy, efficiency,  ], [efficiency,  , discovering], [ , discovering, exploiting], [discovering, exploiting, regularities], [exploiting, regularities, training], [regularities, training, data], [training, data, .]]

>> Noun Phrases are: 
[Machine Learning, increasing levels, automation, the knowledge engineering process, human activity, automatic techniques, accuracy, efficiency, regularities, training data]

>> Named Entities are: 
[('Machine Learning', 'ORG')] 

------------------- Sentence 3 -------------------

The ultimate test of machine learning is its  ability to produce systems that are used regularly in industry, education, and elsewhere. 


>> Tokens are: 
[ultimate, test, machine, learning,  , ability, produce, systems, regularly, industry, ,, education, ,, .] 

>> PoS Tags are: 
[('ultimate', 'ADJ'), ('test', 'NOUN'), ('machine', 'NOUN'), ('learning', 'NOUN'), (' ', 'SPACE'), ('ability', 'NOUN'), ('produce', 'VERB'), ('systems', 'NOUN'), ('regularly', 'ADV'), ('industry', 'NOUN'), (',', 'PUNCT'), ('education', 'NOUN'), (',', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('ultimate', 'amod'), ('test', 'nsubj'), ('machine', 'compound'), ('learning', 'pobj'), (' ', 'compound'), ('ability', 'attr'), ('produce', 'acl'), ('systems', 'dobj'), ('regularly', 'advmod'), ('industry', 'pobj'), (',', 'punct'), ('education', 'conj'), (',', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[ultimate, test], [test, machine], [machine, learning], [learning,  ], [ , ability], [ability, produce], [produce, systems], [systems, regularly], [regularly, industry], [industry, ,], [,, education], [education, ,], [,, .]]

>> Trigrams: 
[[ultimate, test, machine], [test, machine, learning], [machine, learning,  ], [learning,  , ability], [ , ability, produce], [ability, produce, systems], [produce, systems, regularly], [systems, regularly, industry], [regularly, industry, ,], [industry, ,, education], [,, education, ,], [education, ,, .]]

>> Noun Phrases are: 
[The ultimate test, machine learning, its  ability, systems, industry, education]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

Most  evaluation in machine learning is experimental in nature, aimed at showing that the learning  method leads to performance on a separate test set, in one or more realistic domains, that is  better than performance on that test set without learning. 


>> Tokens are: 
[ , evaluation, machine, learning, experimental, nature, ,, aimed, showing, learning,  , method, leads, performance, separate, test, set, ,, realistic, domains, ,,  , better, performance, test, set, learning, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('evaluation', 'NOUN'), ('machine', 'NOUN'), ('learning', 'NOUN'), ('experimental', 'ADJ'), ('nature', 'NOUN'), (',', 'PUNCT'), ('aimed', 'VERB'), ('showing', 'VERB'), ('learning', 'NOUN'), (' ', 'SPACE'), ('method', 'NOUN'), ('leads', 'VERB'), ('performance', 'NOUN'), ('separate', 'ADJ'), ('test', 'NOUN'), ('set', 'NOUN'), (',', 'PUNCT'), ('realistic', 'ADJ'), ('domains', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('better', 'ADJ'), ('performance', 'NOUN'), ('test', 'NOUN'), ('set', 'VERB'), ('learning', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'compound'), ('evaluation', 'nsubj'), ('machine', 'compound'), ('learning', 'pobj'), ('experimental', 'acomp'), ('nature', 'pobj'), (',', 'punct'), ('aimed', 'advcl'), ('showing', 'pcomp'), ('learning', 'amod'), (' ', 'compound'), ('method', 'nsubj'), ('leads', 'ccomp'), ('performance', 'pobj'), ('separate', 'amod'), ('test', 'compound'), ('set', 'pobj'), (',', 'punct'), ('realistic', 'amod'), ('domains', 'pobj'), (',', 'punct'), (' ', 'npadvmod'), ('better', 'acomp'), ('performance', 'pobj'), ('test', 'pobj'), ('set', 'acl'), ('learning', 'pcomp'), ('.', 'punct')]

>> Bigrams: 
[[ , evaluation], [evaluation, machine], [machine, learning], [learning, experimental], [experimental, nature], [nature, ,], [,, aimed], [aimed, showing], [showing, learning], [learning,  ], [ , method], [method, leads], [leads, performance], [performance, separate], [separate, test], [test, set], [set, ,], [,, realistic], [realistic, domains], [domains, ,], [,,  ], [ , better], [better, performance], [performance, test], [test, set], [set, learning], [learning, .]]

>> Trigrams: 
[[ , evaluation, machine], [evaluation, machine, learning], [machine, learning, experimental], [learning, experimental, nature], [experimental, nature, ,], [nature, ,, aimed], [,, aimed, showing], [aimed, showing, learning], [showing, learning,  ], [learning,  , method], [ , method, leads], [method, leads, performance], [leads, performance, separate], [performance, separate, test], [separate, test, set], [test, set, ,], [set, ,, realistic], [,, realistic, domains], [realistic, domains, ,], [domains, ,,  ], [,,  , better], [ , better, performance], [better, performance, test], [performance, test, set], [test, set, learning], [set, learning, .]]

>> Noun Phrases are: 
[Most  evaluation, machine learning, nature, the learning  method, performance, a separate test set, one or more realistic domains, performance, that test]

>> Named Entities are: 
[('one', 'CARDINAL')] 

------------------- Sentence 5 -------------------

    At a general level, there are two types of machine learning: inductive, and deductive. 


>> Tokens are: 
[    , general, level, ,, types, machine, learning, :, inductive, ,, deductive, .] 

>> PoS Tags are: 
[('    ', 'SPACE'), ('general', 'ADJ'), ('level', 'NOUN'), (',', 'PUNCT'), ('types', 'NOUN'), ('machine', 'NOUN'), ('learning', 'NOUN'), (':', 'PUNCT'), ('inductive', 'ADJ'), (',', 'PUNCT'), ('deductive', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('    ', 'dep'), ('general', 'amod'), ('level', 'pobj'), (',', 'punct'), ('types', 'attr'), ('machine', 'compound'), ('learning', 'pobj'), (':', 'punct'), ('inductive', 'amod'), (',', 'punct'), ('deductive', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[    , general], [general, level], [level, ,], [,, types], [types, machine], [machine, learning], [learning, :], [:, inductive], [inductive, ,], [,, deductive], [deductive, .]]

>> Trigrams: 
[[    , general, level], [general, level, ,], [level, ,, types], [,, types, machine], [types, machine, learning], [machine, learning, :], [learning, :, inductive], [:, inductive, ,], [inductive, ,, deductive], [,, deductive, .]]

>> Noun Phrases are: 
[a general level, two types, machine learning]

>> Named Entities are: 
[('two', 'CARDINAL')] 

------------------- Sentence 6 -------------------

Deductive  learning works on existing facts and knowledge and deduces new knowledge from the old. 


>> Tokens are: 
[Deductive,  , learning, works, existing, facts, knowledge, deduces, new, knowledge, old, .] 

>> PoS Tags are: 
[('Deductive', 'ADJ'), (' ', 'SPACE'), ('learning', 'NOUN'), ('works', 'NOUN'), ('existing', 'VERB'), ('facts', 'NOUN'), ('knowledge', 'NOUN'), ('deduces', 'VERB'), ('new', 'ADJ'), ('knowledge', 'NOUN'), ('old', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Deductive', 'amod'), (' ', 'compound'), ('learning', 'nsubj'), ('works', 'ROOT'), ('existing', 'amod'), ('facts', 'pobj'), ('knowledge', 'conj'), ('deduces', 'conj'), ('new', 'amod'), ('knowledge', 'dobj'), ('old', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Deductive,  ], [ , learning], [learning, works], [works, existing], [existing, facts], [facts, knowledge], [knowledge, deduces], [deduces, new], [new, knowledge], [knowledge, old], [old, .]]

>> Trigrams: 
[[Deductive,  , learning], [ , learning, works], [learning, works, existing], [works, existing, facts], [existing, facts, knowledge], [facts, knowledge, deduces], [knowledge, deduces, new], [deduces, new, knowledge], [new, knowledge, old], [knowledge, old, .]]

>> Noun Phrases are: 
[Deductive  learning, existing facts, knowledge, new knowledge]

>> Named Entities are: 
[] 

------------------- Sentence 7 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 8 -------------------

Inductive machine learning methods create computer programs by extracting rules and patterns  out of massive data sets. 


>> Tokens are: 
[Inductive, machine, learning, methods, create, computer, programs, extracting, rules, patterns,  , massive, data, sets, .] 

>> PoS Tags are: 
[('Inductive', 'ADJ'), ('machine', 'NOUN'), ('learning', 'VERB'), ('methods', 'NOUN'), ('create', 'VERB'), ('computer', 'NOUN'), ('programs', 'NOUN'), ('extracting', 'VERB'), ('rules', 'NOUN'), ('patterns', 'NOUN'), (' ', 'SPACE'), ('massive', 'ADJ'), ('data', 'NOUN'), ('sets', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Inductive', 'amod'), ('machine', 'compound'), ('learning', 'amod'), ('methods', 'nsubj'), ('create', 'ROOT'), ('computer', 'compound'), ('programs', 'dobj'), ('extracting', 'amod'), ('rules', 'pobj'), ('patterns', 'conj'), (' ', 'dobj'), ('massive', 'amod'), ('data', 'compound'), ('sets', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Inductive, machine], [machine, learning], [learning, methods], [methods, create], [create, computer], [computer, programs], [programs, extracting], [extracting, rules], [rules, patterns], [patterns,  ], [ , massive], [massive, data], [data, sets], [sets, .]]

>> Trigrams: 
[[Inductive, machine, learning], [machine, learning, methods], [learning, methods, create], [methods, create, computer], [create, computer, programs], [computer, programs, extracting], [programs, extracting, rules], [extracting, rules, patterns], [rules, patterns,  ], [patterns,  , massive], [ , massive, data], [massive, data, sets], [data, sets, .]]

>> Noun Phrases are: 
[Inductive machine learning methods, computer programs, extracting rules, patterns, massive data sets]

>> Named Entities are: 
[] 

------------------- Sentence 9 -------------------

Inductive learning takes examples and generalizes rather than starting  with existing knowledge one major subclass of inductive learning is concept learning. 


>> Tokens are: 
[Inductive, learning, takes, examples, generalizes, starting,  , existing, knowledge, major, subclass, inductive, learning, concept, learning, .] 

>> PoS Tags are: 
[('Inductive', 'ADJ'), ('learning', 'NOUN'), ('takes', 'VERB'), ('examples', 'NOUN'), ('generalizes', 'NOUN'), ('starting', 'VERB'), (' ', 'SPACE'), ('existing', 'VERB'), ('knowledge', 'NOUN'), ('major', 'ADJ'), ('subclass', 'NOUN'), ('inductive', 'ADJ'), ('learning', 'NOUN'), ('concept', 'NOUN'), ('learning', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Inductive', 'amod'), ('learning', 'nsubj'), ('takes', 'ROOT'), ('examples', 'dobj'), ('generalizes', 'conj'), ('starting', 'pcomp'), (' ', 'dobj'), ('existing', 'amod'), ('knowledge', 'pobj'), ('major', 'amod'), ('subclass', 'appos'), ('inductive', 'amod'), ('learning', 'pobj'), ('concept', 'compound'), ('learning', 'attr'), ('.', 'punct')]

>> Bigrams: 
[[Inductive, learning], [learning, takes], [takes, examples], [examples, generalizes], [generalizes, starting], [starting,  ], [ , existing], [existing, knowledge], [knowledge, major], [major, subclass], [subclass, inductive], [inductive, learning], [learning, concept], [concept, learning], [learning, .]]

>> Trigrams: 
[[Inductive, learning, takes], [learning, takes, examples], [takes, examples, generalizes], [examples, generalizes, starting], [generalizes, starting,  ], [starting,  , existing], [ , existing, knowledge], [existing, knowledge, major], [knowledge, major, subclass], [major, subclass, inductive], [subclass, inductive, learning], [inductive, learning, concept], [learning, concept, learning], [concept, learning, .]]

>> Noun Phrases are: 
[Inductive learning, examples, generalizes, existing knowledge, one major subclass, inductive learning]

>> Named Entities are: 
[('one', 'CARDINAL')] 

------------------- Sentence 10 -------------------

This takes  examples of a concept and tries to build a general description of the concept. 


>> Tokens are: 
[takes,  , examples, concept, tries, build, general, description, concept, .] 

>> PoS Tags are: 
[('takes', 'VERB'), (' ', 'SPACE'), ('examples', 'NOUN'), ('concept', 'NOUN'), ('tries', 'VERB'), ('build', 'VERB'), ('general', 'ADJ'), ('description', 'NOUN'), ('concept', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('takes', 'ROOT'), (' ', 'dative'), ('examples', 'dobj'), ('concept', 'pobj'), ('tries', 'conj'), ('build', 'xcomp'), ('general', 'amod'), ('description', 'dobj'), ('concept', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[takes,  ], [ , examples], [examples, concept], [concept, tries], [tries, build], [build, general], [general, description], [description, concept], [concept, .]]

>> Trigrams: 
[[takes,  , examples], [ , examples, concept], [examples, concept, tries], [concept, tries, build], [tries, build, general], [build, general, description], [general, description, concept], [description, concept, .]]

>> Noun Phrases are: 
[examples, a concept, a general description, the concept]

>> Named Entities are: 
[] 

------------------- Sentence 11 -------------------

Very often, the  examples are described using attribute-value pairs. 


>> Tokens are: 
[,,  , examples, described, attribute, -, value, pairs, .] 

>> PoS Tags are: 
[(',', 'PUNCT'), (' ', 'SPACE'), ('examples', 'NOUN'), ('described', 'VERB'), ('attribute', 'NOUN'), ('-', 'PUNCT'), ('value', 'NOUN'), ('pairs', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(',', 'punct'), (' ', 'compound'), ('examples', 'nsubjpass'), ('described', 'ROOT'), ('attribute', 'amod'), ('-', 'punct'), ('value', 'compound'), ('pairs', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[,,  ], [ , examples], [examples, described], [described, attribute], [attribute, -], [-, value], [value, pairs], [pairs, .]]

>> Trigrams: 
[[,,  , examples], [ , examples, described], [examples, described, attribute], [described, attribute, -], [attribute, -, value], [-, value, pairs], [value, pairs, .]]

>> Noun Phrases are: 
[the  examples, attribute-value pairs]

>> Named Entities are: 
[] 

------------------- Sentence 12 -------------------

    Machine learning overlaps heavily with statistics. 


>> Tokens are: 
[    , Machine, learning, overlaps, heavily, statistics, .] 

>> PoS Tags are: 
[('    ', 'SPACE'), ('Machine', 'NOUN'), ('learning', 'NOUN'), ('overlaps', 'VERB'), ('heavily', 'ADV'), ('statistics', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('    ', 'poss'), ('Machine', 'compound'), ('learning', 'nsubj'), ('overlaps', 'ROOT'), ('heavily', 'advmod'), ('statistics', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[    , Machine], [Machine, learning], [learning, overlaps], [overlaps, heavily], [heavily, statistics], [statistics, .]]

>> Trigrams: 
[[    , Machine, learning], [Machine, learning, overlaps], [learning, overlaps, heavily], [overlaps, heavily, statistics], [heavily, statistics, .]]

>> Noun Phrases are: 
[    Machine learning, statistics]

>> Named Entities are: 
[] 

------------------- Sentence 13 -------------------

In fact, many machine-learning algorithms have  been found to have direct counterparts with statistics. 


>> Tokens are: 
[fact, ,, machine, -, learning, algorithms,  , found, direct, counterparts, statistics, .] 

>> PoS Tags are: 
[('fact', 'NOUN'), (',', 'PUNCT'), ('machine', 'NOUN'), ('-', 'PUNCT'), ('learning', 'VERB'), ('algorithms', 'NOUN'), (' ', 'SPACE'), ('found', 'VERB'), ('direct', 'ADJ'), ('counterparts', 'NOUN'), ('statistics', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('fact', 'pobj'), (',', 'punct'), ('machine', 'npadvmod'), ('-', 'punct'), ('learning', 'amod'), ('algorithms', 'nsubjpass'), (' ', 'nsubjpass'), ('found', 'ROOT'), ('direct', 'amod'), ('counterparts', 'dobj'), ('statistics', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[fact, ,], [,, machine], [machine, -], [-, learning], [learning, algorithms], [algorithms,  ], [ , found], [found, direct], [direct, counterparts], [counterparts, statistics], [statistics, .]]

>> Trigrams: 
[[fact, ,, machine], [,, machine, -], [machine, -, learning], [-, learning, algorithms], [learning, algorithms,  ], [algorithms,  , found], [ , found, direct], [found, direct, counterparts], [direct, counterparts, statistics], [counterparts, statistics, .]]

>> Noun Phrases are: 
[fact, many machine-learning algorithms, direct counterparts, statistics]

>> Named Entities are: 
[] 

------------------- Sentence 14 -------------------

For example, boosting is now widely  thought to be a form of stage wise regression using a specific type of loss function. 


>> Tokens are: 
[example, ,, boosting, widely,  , thought, form, stage, wise, regression, specific, type, loss, function, .] 

>> PoS Tags are: 
[('example', 'NOUN'), (',', 'PUNCT'), ('boosting', 'VERB'), ('widely', 'ADV'), (' ', 'SPACE'), ('thought', 'VERB'), ('form', 'NOUN'), ('stage', 'NOUN'), ('wise', 'ADJ'), ('regression', 'NOUN'), ('specific', 'ADJ'), ('type', 'NOUN'), ('loss', 'NOUN'), ('function', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('example', 'pobj'), (',', 'punct'), ('boosting', 'nsubj'), ('widely', 'advmod'), (' ', 'nsubj'), ('thought', 'attr'), ('form', 'attr'), ('stage', 'pobj'), ('wise', 'amod'), ('regression', 'attr'), ('specific', 'amod'), ('type', 'dobj'), ('loss', 'compound'), ('function', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[example, ,], [,, boosting], [boosting, widely], [widely,  ], [ , thought], [thought, form], [form, stage], [stage, wise], [wise, regression], [regression, specific], [specific, type], [type, loss], [loss, function], [function, .]]

>> Trigrams: 
[[example, ,, boosting], [,, boosting, widely], [boosting, widely,  ], [widely,  , thought], [ , thought, form], [thought, form, stage], [form, stage, wise], [stage, wise, regression], [wise, regression, specific], [regression, specific, type], [specific, type, loss], [type, loss, function], [loss, function, .]]

>> Noun Phrases are: 
[example, a form, stage, wise regression, a specific type, loss function]

>> Named Entities are: 
[] 

------------------- Sentence 15 -------------------

Machine  learning has a wide spectrum of applications including natural language processing, search  engines, medical diagnosis, bioinformatics and cheminformatics, detecting credit card fraud,  stock market analysis, classifying DNA sequences, speech and handwriting recognition, object  recognition in computer vision, game playing and robot locomotion. 


>> Tokens are: 
[Machine,  , learning, wide, spectrum, applications, including, natural, language, processing, ,, search,  , engines, ,, medical, diagnosis, ,, bioinformatics, cheminformatics, ,, detecting, credit, card, fraud, ,,  , stock, market, analysis, ,, classifying, DNA, sequences, ,, speech, handwriting, recognition, ,, object,  , recognition, computer, vision, ,, game, playing, robot, locomotion, .] 

>> PoS Tags are: 
[('Machine', 'NOUN'), (' ', 'SPACE'), ('learning', 'NOUN'), ('wide', 'ADJ'), ('spectrum', 'NOUN'), ('applications', 'NOUN'), ('including', 'VERB'), ('natural', 'ADJ'), ('language', 'NOUN'), ('processing', 'NOUN'), (',', 'PUNCT'), ('search', 'NOUN'), (' ', 'SPACE'), ('engines', 'NOUN'), (',', 'PUNCT'), ('medical', 'ADJ'), ('diagnosis', 'NOUN'), (',', 'PUNCT'), ('bioinformatics', 'NOUN'), ('cheminformatics', 'NOUN'), (',', 'PUNCT'), ('detecting', 'VERB'), ('credit', 'NOUN'), ('card', 'NOUN'), ('fraud', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('stock', 'NOUN'), ('market', 'NOUN'), ('analysis', 'NOUN'), (',', 'PUNCT'), ('classifying', 'VERB'), ('DNA', 'NOUN'), ('sequences', 'NOUN'), (',', 'PUNCT'), ('speech', 'NOUN'), ('handwriting', 'NOUN'), ('recognition', 'NOUN'), (',', 'PUNCT'), ('object', 'VERB'), (' ', 'SPACE'), ('recognition', 'NOUN'), ('computer', 'NOUN'), ('vision', 'NOUN'), (',', 'PUNCT'), ('game', 'NOUN'), ('playing', 'NOUN'), ('robot', 'NOUN'), ('locomotion', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Machine', 'nmod'), (' ', 'nummod'), ('learning', 'nsubj'), ('wide', 'amod'), ('spectrum', 'dobj'), ('applications', 'pobj'), ('including', 'prep'), ('natural', 'amod'), ('language', 'compound'), ('processing', 'pobj'), (',', 'punct'), ('search', 'compound'), (' ', 'compound'), ('engines', 'conj'), (',', 'punct'), ('medical', 'amod'), ('diagnosis', 'conj'), (',', 'punct'), ('bioinformatics', 'conj'), ('cheminformatics', 'conj'), (',', 'punct'), ('detecting', 'advcl'), ('credit', 'compound'), ('card', 'compound'), ('fraud', 'dobj'), (',', 'punct'), (' ', 'compound'), ('stock', 'compound'), ('market', 'compound'), ('analysis', 'appos'), (',', 'punct'), ('classifying', 'advcl'), ('DNA', 'compound'), ('sequences', 'dobj'), (',', 'punct'), ('speech', 'conj'), ('handwriting', 'conj'), ('recognition', 'conj'), (',', 'punct'), ('object', 'nmod'), (' ', 'punct'), ('recognition', 'conj'), ('computer', 'compound'), ('vision', 'pobj'), (',', 'punct'), ('game', 'compound'), ('playing', 'nmod'), ('robot', 'conj'), ('locomotion', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[Machine,  ], [ , learning], [learning, wide], [wide, spectrum], [spectrum, applications], [applications, including], [including, natural], [natural, language], [language, processing], [processing, ,], [,, search], [search,  ], [ , engines], [engines, ,], [,, medical], [medical, diagnosis], [diagnosis, ,], [,, bioinformatics], [bioinformatics, cheminformatics], [cheminformatics, ,], [,, detecting], [detecting, credit], [credit, card], [card, fraud], [fraud, ,], [,,  ], [ , stock], [stock, market], [market, analysis], [analysis, ,], [,, classifying], [classifying, DNA], [DNA, sequences], [sequences, ,], [,, speech], [speech, handwriting], [handwriting, recognition], [recognition, ,], [,, object], [object,  ], [ , recognition], [recognition, computer], [computer, vision], [vision, ,], [,, game], [game, playing], [playing, robot], [robot, locomotion], [locomotion, .]]

>> Trigrams: 
[[Machine,  , learning], [ , learning, wide], [learning, wide, spectrum], [wide, spectrum, applications], [spectrum, applications, including], [applications, including, natural], [including, natural, language], [natural, language, processing], [language, processing, ,], [processing, ,, search], [,, search,  ], [search,  , engines], [ , engines, ,], [engines, ,, medical], [,, medical, diagnosis], [medical, diagnosis, ,], [diagnosis, ,, bioinformatics], [,, bioinformatics, cheminformatics], [bioinformatics, cheminformatics, ,], [cheminformatics, ,, detecting], [,, detecting, credit], [detecting, credit, card], [credit, card, fraud], [card, fraud, ,], [fraud, ,,  ], [,,  , stock], [ , stock, market], [stock, market, analysis], [market, analysis, ,], [analysis, ,, classifying], [,, classifying, DNA], [classifying, DNA, sequences], [DNA, sequences, ,], [sequences, ,, speech], [,, speech, handwriting], [speech, handwriting, recognition], [handwriting, recognition, ,], [recognition, ,, object], [,, object,  ], [object,  , recognition], [ , recognition, computer], [recognition, computer, vision], [computer, vision, ,], [vision, ,, game], [,, game, playing], [game, playing, robot], [playing, robot, locomotion], [robot, locomotion, .]]

>> Noun Phrases are: 
[Machine  learning, a wide spectrum, applications, natural language processing, search  engines, medical diagnosis, bioinformatics, cheminformatics, credit card fraud,  stock market analysis, DNA sequences, speech, handwriting, recognition, object  recognition, computer vision, game playing and robot locomotion]

>> Named Entities are: 
[] 

------------------- Sentence 16 -------------------

   In our study we concentrate on the various paradigms, which are used in machine learning. 


>> Tokens are: 
[   , study, concentrate, paradigms, ,, machine, learning, .] 

>> PoS Tags are: 
[('   ', 'SPACE'), ('study', 'NOUN'), ('concentrate', 'VERB'), ('paradigms', 'NOUN'), (',', 'PUNCT'), ('machine', 'NOUN'), ('learning', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('   ', 'dep'), ('study', 'pobj'), ('concentrate', 'ROOT'), ('paradigms', 'pobj'), (',', 'punct'), ('machine', 'compound'), ('learning', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[   , study], [study, concentrate], [concentrate, paradigms], [paradigms, ,], [,, machine], [machine, learning], [learning, .]]

>> Trigrams: 
[[   , study, concentrate], [study, concentrate, paradigms], [concentrate, paradigms, ,], [paradigms, ,, machine], [,, machine, learning], [machine, learning, .]]

>> Noun Phrases are: 
[our study, we, the various paradigms, machine learning]

>> Named Entities are: 
[] 

------------------- Sentence 17 -------------------

Our  review also examines the comparative study of machine learning technique with suitable  application area. 


>> Tokens are: 
[ , review, examines, comparative, study, machine, learning, technique, suitable,  , application, area, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('review', 'NOUN'), ('examines', 'VERB'), ('comparative', 'ADJ'), ('study', 'NOUN'), ('machine', 'NOUN'), ('learning', 'NOUN'), ('technique', 'NOUN'), ('suitable', 'ADJ'), (' ', 'SPACE'), ('application', 'NOUN'), ('area', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'compound'), ('review', 'nsubj'), ('examines', 'ROOT'), ('comparative', 'amod'), ('study', 'dobj'), ('machine', 'compound'), ('learning', 'compound'), ('technique', 'pobj'), ('suitable', 'amod'), (' ', 'compound'), ('application', 'compound'), ('area', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[ , review], [review, examines], [examines, comparative], [comparative, study], [study, machine], [machine, learning], [learning, technique], [technique, suitable], [suitable,  ], [ , application], [application, area], [area, .]]

>> Trigrams: 
[[ , review, examines], [review, examines, comparative], [examines, comparative, study], [comparative, study, machine], [study, machine, learning], [machine, learning, technique], [learning, technique, suitable], [technique, suitable,  ], [suitable,  , application], [ , application, area], [application, area, .]]

>> Noun Phrases are: 
[Our  review, the comparative study, machine learning technique, suitable  application area]

>> Named Entities are: 
[] 

------------------- Sentence 18 -------------------

    This paper is organized as follows: 


>> Tokens are: 
[    , paper, organized, follows, :] 

>> PoS Tags are: 
[('    ', 'SPACE'), ('paper', 'NOUN'), ('organized', 'VERB'), ('follows', 'VERB'), (':', 'PUNCT')] 

>> Dependency Tags are: 
[('    ', 'ROOT'), ('paper', 'nsubjpass'), ('organized', 'relcl'), ('follows', 'advcl'), (':', 'punct')]

>> Bigrams: 
[[    , paper], [paper, organized], [organized, follows], [follows, :]]

>> Trigrams: 
[[    , paper, organized], [paper, organized, follows], [organized, follows, :]]

>> Noun Phrases are: 
[This paper]

>> Named Entities are: 
[] 

------------------- Sentence 19 -------------------

In section 2 we discuss about the use of Neural Network in  machine learning. 


>> Tokens are: 
[section, 2, discuss, use, Neural, Network,  , machine, learning, .] 

>> PoS Tags are: 
[('section', 'NOUN'), ('2', 'NUM'), ('discuss', 'VERB'), ('use', 'NOUN'), ('Neural', 'PROPN'), ('Network', 'PROPN'), (' ', 'SPACE'), ('machine', 'NOUN'), ('learning', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('section', 'pobj'), ('2', 'nummod'), ('discuss', 'ROOT'), ('use', 'pobj'), ('Neural', 'compound'), ('Network', 'pobj'), (' ', 'nummod'), ('machine', 'compound'), ('learning', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[section, 2], [2, discuss], [discuss, use], [use, Neural], [Neural, Network], [Network,  ], [ , machine], [machine, learning], [learning, .]]

>> Trigrams: 
[[section, 2, discuss], [2, discuss, use], [discuss, use, Neural], [use, Neural, Network], [Neural, Network,  ], [Network,  , machine], [ , machine, learning], [machine, learning, .]]

>> Noun Phrases are: 
[section, we, the use, Neural Network,  machine learning]

>> Named Entities are: 
[('Neural Network', 'ORG')] 

------------------- Sentence 20 -------------------

CBR with application area is presented in section 3. 


>> Tokens are: 
[CBR, application, area, presented, section, 3, .] 

>> PoS Tags are: 
[('CBR', 'ADJ'), ('application', 'NOUN'), ('area', 'NOUN'), ('presented', 'VERB'), ('section', 'NOUN'), ('3', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('CBR', 'nsubjpass'), ('application', 'compound'), ('area', 'pobj'), ('presented', 'ROOT'), ('section', 'pobj'), ('3', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[CBR, application], [application, area], [area, presented], [presented, section], [section, 3], [3, .]]

>> Trigrams: 
[[CBR, application, area], [application, area, presented], [area, presented, section], [presented, section, 3], [section, 3, .]]

>> Noun Phrases are: 
[application area, section]

>> Named Entities are: 
[('section 3', 'LAW')] 

------------------- Sentence 21 -------------------

CART is another efficient  learning method described in section 4. 


>> Tokens are: 
[CART, efficient,  , learning, method, described, section, 4, .] 

>> PoS Tags are: 
[('CART', 'NOUN'), ('efficient', 'ADJ'), (' ', 'SPACE'), ('learning', 'NOUN'), ('method', 'NOUN'), ('described', 'VERB'), ('section', 'NOUN'), ('4', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('CART', 'nsubj'), ('efficient', 'amod'), (' ', 'compound'), ('learning', 'compound'), ('method', 'attr'), ('described', 'acl'), ('section', 'pobj'), ('4', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[CART, efficient], [efficient,  ], [ , learning], [learning, method], [method, described], [described, section], [section, 4], [4, .]]

>> Trigrams: 
[[CART, efficient,  ], [efficient,  , learning], [ , learning, method], [learning, method, described], [method, described, section], [described, section, 4], [section, 4, .]]

>> Noun Phrases are: 
[CART, another efficient  learning method, section]

>> Named Entities are: 
[('CART', 'ORG'), ('section 4', 'LAW')] 

------------------- Sentence 22 -------------------

Another paradigm rule induction is highlighted in section  5. 


>> Tokens are: 
[paradigm, rule, induction, highlighted, section,  , 5, .] 

>> PoS Tags are: 
[('paradigm', 'NOUN'), ('rule', 'NOUN'), ('induction', 'NOUN'), ('highlighted', 'VERB'), ('section', 'NOUN'), (' ', 'SPACE'), ('5', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('paradigm', 'compound'), ('rule', 'compound'), ('induction', 'nsubjpass'), ('highlighted', 'ROOT'), ('section', 'pobj'), (' ', 'nummod'), ('5', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[paradigm, rule], [rule, induction], [induction, highlighted], [highlighted, section], [section,  ], [ , 5], [5, .]]

>> Trigrams: 
[[paradigm, rule, induction], [rule, induction, highlighted], [induction, highlighted, section], [highlighted, section,  ], [section,  , 5], [ , 5, .]]

>> Noun Phrases are: 
[Another paradigm rule induction, section]

>> Named Entities are: 
[('5', 'CARDINAL')] 

------------------- Sentence 23 -------------------

In section 6 the impact of genetic algorithm and programming are discussed. 


>> Tokens are: 
[section, 6, impact, genetic, algorithm, programming, discussed, .] 

>> PoS Tags are: 
[('section', 'NOUN'), ('6', 'NUM'), ('impact', 'NOUN'), ('genetic', 'ADJ'), ('algorithm', 'NOUN'), ('programming', 'NOUN'), ('discussed', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('section', 'pobj'), ('6', 'nummod'), ('impact', 'nsubjpass'), ('genetic', 'amod'), ('algorithm', 'pobj'), ('programming', 'conj'), ('discussed', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[section, 6], [6, impact], [impact, genetic], [genetic, algorithm], [algorithm, programming], [programming, discussed], [discussed, .]]

>> Trigrams: 
[[section, 6, impact], [6, impact, genetic], [impact, genetic, algorithm], [genetic, algorithm, programming], [algorithm, programming, discussed], [programming, discussed, .]]

>> Noun Phrases are: 
[section, the impact, genetic algorithm, programming]

>> Named Entities are: 
[] 

------------------- Sentence 24 -------------------

Section 7  presents the discussion on various machine-learning techniques and conclusions and future  direction are presented in section 8. 


>> Tokens are: 
[Section, 7,  , presents, discussion, machine, -, learning, techniques, conclusions, future,  , direction, presented, section, 8, .] 

>> PoS Tags are: 
[('Section', 'NOUN'), ('7', 'NUM'), (' ', 'SPACE'), ('presents', 'VERB'), ('discussion', 'NOUN'), ('machine', 'NOUN'), ('-', 'PUNCT'), ('learning', 'VERB'), ('techniques', 'NOUN'), ('conclusions', 'NOUN'), ('future', 'NOUN'), (' ', 'SPACE'), ('direction', 'NOUN'), ('presented', 'VERB'), ('section', 'NOUN'), ('8', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Section', 'nsubj'), ('7', 'nummod'), (' ', 'nummod'), ('presents', 'ROOT'), ('discussion', 'dobj'), ('machine', 'npadvmod'), ('-', 'punct'), ('learning', 'amod'), ('techniques', 'pobj'), ('conclusions', 'conj'), ('future', 'amod'), (' ', 'compound'), ('direction', 'nsubjpass'), ('presented', 'ccomp'), ('section', 'pobj'), ('8', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[Section, 7], [7,  ], [ , presents], [presents, discussion], [discussion, machine], [machine, -], [-, learning], [learning, techniques], [techniques, conclusions], [conclusions, future], [future,  ], [ , direction], [direction, presented], [presented, section], [section, 8], [8, .]]

>> Trigrams: 
[[Section, 7,  ], [7,  , presents], [ , presents, discussion], [presents, discussion, machine], [discussion, machine, -], [machine, -, learning], [-, learning, techniques], [learning, techniques, conclusions], [techniques, conclusions, future], [conclusions, future,  ], [future,  , direction], [ , direction, presented], [direction, presented, section], [presented, section, 8], [section, 8, .]]

>> Noun Phrases are: 
[Section, the discussion, various machine-learning techniques, conclusions, future  direction, section]

>> Named Entities are: 
[('section 8', 'LAW')] 

------------------- Sentence 25 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 12 =================================

  

------------------- Sentence 1 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 13 =================================

2.  NEURAL NETWORKS  Neural networks have been established to be an effective tool for pattern classification and  clustering [8, 15]. There are broadly two paradigms of neural learning algorithms namely  supervised and unsupervised. Unsupervised neural algorithms are best suited for clustering  patterns on the basis of their inherent characteristics [8, 14]. There are three major approaches  for unsupervised learning:  -   (a) Competitive Learning   (b) Self Organizing feature Maps   (c) ART Networks    

------------------- Sentence 1 -------------------

2.   


>> Tokens are: 
[2, .,  ] 

>> PoS Tags are: 
[('2', 'X'), ('.', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('2', 'ROOT'), ('.', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[2, .], [.,  ]]

>> Trigrams: 
[[2, .,  ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('2', 'CARDINAL')] 

------------------- Sentence 2 -------------------

NEURAL NETWORKS   


>> Tokens are: 
[NEURAL, NETWORKS,  ] 

>> PoS Tags are: 
[('NEURAL', 'PROPN'), ('NETWORKS', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('NEURAL', 'compound'), ('NETWORKS', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[NEURAL, NETWORKS], [NETWORKS,  ]]

>> Trigrams: 
[[NEURAL, NETWORKS,  ]]

>> Noun Phrases are: 
[NEURAL NETWORKS]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

Neural networks have been established to be an effective tool for pattern classification and  clustering [8, 15]. 


>> Tokens are: 
[Neural, networks, established, effective, tool, pattern, classification,  , clustering, [, 8, ,, 15, ], .] 

>> PoS Tags are: 
[('Neural', 'PROPN'), ('networks', 'NOUN'), ('established', 'VERB'), ('effective', 'ADJ'), ('tool', 'NOUN'), ('pattern', 'NOUN'), ('classification', 'NOUN'), (' ', 'SPACE'), ('clustering', 'VERB'), ('[', 'PUNCT'), ('8', 'NUM'), (',', 'PUNCT'), ('15', 'NUM'), (']', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Neural', 'compound'), ('networks', 'nsubjpass'), ('established', 'ROOT'), ('effective', 'amod'), ('tool', 'attr'), ('pattern', 'compound'), ('classification', 'pobj'), (' ', 'conj'), ('clustering', 'acl'), ('[', 'punct'), ('8', 'npadvmod'), (',', 'punct'), ('15', 'npadvmod'), (']', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Neural, networks], [networks, established], [established, effective], [effective, tool], [tool, pattern], [pattern, classification], [classification,  ], [ , clustering], [clustering, [], [[, 8], [8, ,], [,, 15], [15, ]], [], .]]

>> Trigrams: 
[[Neural, networks, established], [networks, established, effective], [established, effective, tool], [effective, tool, pattern], [tool, pattern, classification], [pattern, classification,  ], [classification,  , clustering], [ , clustering, [], [clustering, [, 8], [[, 8, ,], [8, ,, 15], [,, 15, ]], [15, ], .]]

>> Noun Phrases are: 
[Neural networks, an effective tool, pattern classification]

>> Named Entities are: 
[('8', 'CARDINAL'), ('15', 'CARDINAL')] 

------------------- Sentence 4 -------------------

There are broadly two paradigms of neural learning algorithms namely  supervised and unsupervised. 


>> Tokens are: 
[broadly, paradigms, neural, learning, algorithms,  , supervised, unsupervised, .] 

>> PoS Tags are: 
[('broadly', 'ADV'), ('paradigms', 'NOUN'), ('neural', 'ADJ'), ('learning', 'VERB'), ('algorithms', 'NOUN'), (' ', 'SPACE'), ('supervised', 'VERB'), ('unsupervised', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('broadly', 'advmod'), ('paradigms', 'attr'), ('neural', 'amod'), ('learning', 'amod'), ('algorithms', 'pobj'), (' ', 'nsubj'), ('supervised', 'relcl'), ('unsupervised', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[broadly, paradigms], [paradigms, neural], [neural, learning], [learning, algorithms], [algorithms,  ], [ , supervised], [supervised, unsupervised], [unsupervised, .]]

>> Trigrams: 
[[broadly, paradigms, neural], [paradigms, neural, learning], [neural, learning, algorithms], [learning, algorithms,  ], [algorithms,  , supervised], [ , supervised, unsupervised], [supervised, unsupervised, .]]

>> Noun Phrases are: 
[two paradigms, neural learning algorithms]

>> Named Entities are: 
[('two', 'CARDINAL')] 

------------------- Sentence 5 -------------------

Unsupervised neural algorithms are best suited for clustering  patterns on the basis of their inherent characteristics [8, 14]. 


>> Tokens are: 
[Unsupervised, neural, algorithms, best, suited, clustering,  , patterns, basis, inherent, characteristics, [, 8, ,, 14, ], .] 

>> PoS Tags are: 
[('Unsupervised', 'ADJ'), ('neural', 'ADJ'), ('algorithms', 'NOUN'), ('best', 'ADV'), ('suited', 'ADJ'), ('clustering', 'VERB'), (' ', 'SPACE'), ('patterns', 'NOUN'), ('basis', 'NOUN'), ('inherent', 'ADJ'), ('characteristics', 'NOUN'), ('[', 'PUNCT'), ('8', 'NUM'), (',', 'PUNCT'), ('14', 'NUM'), (']', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Unsupervised', 'amod'), ('neural', 'amod'), ('algorithms', 'nsubjpass'), ('best', 'advmod'), ('suited', 'ROOT'), ('clustering', 'pcomp'), (' ', 'prep'), ('patterns', 'dobj'), ('basis', 'pobj'), ('inherent', 'amod'), ('characteristics', 'pobj'), ('[', 'punct'), ('8', 'appos'), (',', 'punct'), ('14', 'npadvmod'), (']', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Unsupervised, neural], [neural, algorithms], [algorithms, best], [best, suited], [suited, clustering], [clustering,  ], [ , patterns], [patterns, basis], [basis, inherent], [inherent, characteristics], [characteristics, [], [[, 8], [8, ,], [,, 14], [14, ]], [], .]]

>> Trigrams: 
[[Unsupervised, neural, algorithms], [neural, algorithms, best], [algorithms, best, suited], [best, suited, clustering], [suited, clustering,  ], [clustering,  , patterns], [ , patterns, basis], [patterns, basis, inherent], [basis, inherent, characteristics], [inherent, characteristics, [], [characteristics, [, 8], [[, 8, ,], [8, ,, 14], [,, 14, ]], [14, ], .]]

>> Noun Phrases are: 
[Unsupervised neural algorithms, patterns, the basis, their inherent characteristics]

>> Named Entities are: 
[('8', 'CARDINAL'), ('14', 'CARDINAL')] 

------------------- Sentence 6 -------------------

There are three major approaches  for unsupervised learning:  -   (a) 


>> Tokens are: 
[major, approaches,  , unsupervised, learning, :,  , -,   , (, )] 

>> PoS Tags are: 
[('major', 'ADJ'), ('approaches', 'NOUN'), (' ', 'SPACE'), ('unsupervised', 'ADJ'), ('learning', 'NOUN'), (':', 'PUNCT'), (' ', 'SPACE'), ('-', 'PUNCT'), ('  ', 'SPACE'), ('(', 'PUNCT'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('major', 'amod'), ('approaches', 'attr'), (' ', 'appos'), ('unsupervised', 'amod'), ('learning', 'pobj'), (':', 'punct'), (' ', 'appos'), ('-', 'punct'), ('  ', 'appos'), ('(', 'punct'), (')', 'punct')]

>> Bigrams: 
[[major, approaches], [approaches,  ], [ , unsupervised], [unsupervised, learning], [learning, :], [:,  ], [ , -], [-,   ], [  , (], [(, )]]

>> Trigrams: 
[[major, approaches,  ], [approaches,  , unsupervised], [ , unsupervised, learning], [unsupervised, learning, :], [learning, :,  ], [:,  , -], [ , -,   ], [-,   , (], [  , (, )]]

>> Noun Phrases are: 
[three major approaches, unsupervised learning]

>> Named Entities are: 
[('three', 'CARDINAL')] 

------------------- Sentence 7 -------------------

Competitive Learning   (b) 


>> Tokens are: 
[Competitive, Learning,   , (, b, )] 

>> PoS Tags are: 
[('Competitive', 'PROPN'), ('Learning', 'PROPN'), ('  ', 'SPACE'), ('(', 'PUNCT'), ('b', 'X'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('Competitive', 'compound'), ('Learning', 'ROOT'), ('  ', 'appos'), ('(', 'punct'), ('b', 'appos'), (')', 'punct')]

>> Bigrams: 
[[Competitive, Learning], [Learning,   ], [  , (], [(, b], [b, )]]

>> Trigrams: 
[[Competitive, Learning,   ], [Learning,   , (], [  , (, b], [(, b, )]]

>> Noun Phrases are: 
[Competitive Learning]

>> Named Entities are: 
[('Competitive Learning', 'GPE')] 

------------------- Sentence 8 -------------------

Self Organizing feature Maps   (c) ART Networks     


>> Tokens are: 
[Self, Organizing, feature, Maps,   , (, c, ), ART, Networks,    ] 

>> PoS Tags are: 
[('Self', 'PROPN'), ('Organizing', 'VERB'), ('feature', 'NOUN'), ('Maps', 'NOUN'), ('  ', 'SPACE'), ('(', 'PUNCT'), ('c', 'X'), (')', 'PUNCT'), ('ART', 'PROPN'), ('Networks', 'NOUN'), ('   ', 'SPACE')] 

>> Dependency Tags are: 
[('Self', 'compound'), ('Organizing', 'nmod'), ('feature', 'compound'), ('Maps', 'ROOT'), ('  ', 'appos'), ('(', 'punct'), ('c', 'meta'), (')', 'punct'), ('ART', 'compound'), ('Networks', 'appos'), ('   ', 'punct')]

>> Bigrams: 
[[Self, Organizing], [Organizing, feature], [feature, Maps], [Maps,   ], [  , (], [(, c], [c, )], [), ART], [ART, Networks], [Networks,    ]]

>> Trigrams: 
[[Self, Organizing, feature], [Organizing, feature, Maps], [feature, Maps,   ], [Maps,   , (], [  , (, c], [(, c, )], [c, ), ART], [), ART, Networks], [ART, Networks,    ]]

>> Noun Phrases are: 
[Self Organizing feature Maps, (c) ART Networks]

>> Named Entities are: 
[('ART Networks', 'PERSON')] 


================================ Paragraph 14 =================================

Yogesh Singh, Pradeep Kumar Bhatia & Omprakash Sangwan  

------------------- Sentence 1 -------------------

Yogesh Singh, Pradeep Kumar Bhatia & Omprakash Sangwan   


>> Tokens are: 
[Yogesh, Singh, ,, Pradeep, Kumar, Bhatia, &, Omprakash, Sangwan,  ] 

>> PoS Tags are: 
[('Yogesh', 'PROPN'), ('Singh', 'PROPN'), (',', 'PUNCT'), ('Pradeep', 'PROPN'), ('Kumar', 'PROPN'), ('Bhatia', 'PROPN'), ('&', 'CCONJ'), ('Omprakash', 'PROPN'), ('Sangwan', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Yogesh', 'compound'), ('Singh', 'ROOT'), (',', 'punct'), ('Pradeep', 'compound'), ('Kumar', 'compound'), ('Bhatia', 'conj'), ('&', 'cc'), ('Omprakash', 'compound'), ('Sangwan', 'conj'), (' ', 'punct')]

>> Bigrams: 
[[Yogesh, Singh], [Singh, ,], [,, Pradeep], [Pradeep, Kumar], [Kumar, Bhatia], [Bhatia, &], [&, Omprakash], [Omprakash, Sangwan], [Sangwan,  ]]

>> Trigrams: 
[[Yogesh, Singh, ,], [Singh, ,, Pradeep], [,, Pradeep, Kumar], [Pradeep, Kumar, Bhatia], [Kumar, Bhatia, &], [Bhatia, &, Omprakash], [&, Omprakash, Sangwan], [Omprakash, Sangwan,  ]]

>> Noun Phrases are: 
[Yogesh Singh, Pradeep Kumar Bhatia, Omprakash Sangwan]

>> Named Entities are: 
[('Yogesh Singh', 'PERSON'), ('Kumar Bhatia & Omprakash Sangwan', 'ORG')] 


================================ Paragraph 15 =================================

International Journal of Computer Science and Security, Volume (1) : Issue (1) 72  

------------------- Sentence 1 -------------------

International Journal of Computer Science and Security, Volume (1) : Issue (1) 72   


>> Tokens are: 
[International, Journal, Computer, Science, Security, ,, Volume, (, 1, ), :, Issue, (, 1, ), 72,  ] 

>> PoS Tags are: 
[('International', 'PROPN'), ('Journal', 'PROPN'), ('Computer', 'PROPN'), ('Science', 'PROPN'), ('Security', 'PROPN'), (',', 'PUNCT'), ('Volume', 'NOUN'), ('(', 'PUNCT'), ('1', 'NUM'), (')', 'PUNCT'), (':', 'PUNCT'), ('Issue', 'NOUN'), ('(', 'PUNCT'), ('1', 'NUM'), (')', 'PUNCT'), ('72', 'NUM'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('International', 'compound'), ('Journal', 'ROOT'), ('Computer', 'compound'), ('Science', 'pobj'), ('Security', 'conj'), (',', 'punct'), ('Volume', 'appos'), ('(', 'punct'), ('1', 'appos'), (')', 'punct'), (':', 'punct'), ('Issue', 'appos'), ('(', 'punct'), ('1', 'appos'), (')', 'punct'), ('72', 'nummod'), (' ', 'appos')]

>> Bigrams: 
[[International, Journal], [Journal, Computer], [Computer, Science], [Science, Security], [Security, ,], [,, Volume], [Volume, (], [(, 1], [1, )], [), :], [:, Issue], [Issue, (], [(, 1], [1, )], [), 72], [72,  ]]

>> Trigrams: 
[[International, Journal, Computer], [Journal, Computer, Science], [Computer, Science, Security], [Science, Security, ,], [Security, ,, Volume], [,, Volume, (], [Volume, (, 1], [(, 1, )], [1, ), :], [), :, Issue], [:, Issue, (], [Issue, (, 1], [(, 1, )], [1, ), 72], [), 72,  ]]

>> Noun Phrases are: 
[International Journal, Computer Science, Security, Volume, Issue]

>> Named Entities are: 
[('International Journal of Computer Science and Security, Volume', 'ORG'), ('1', 'CARDINAL')] 


================================ Paragraph 16 =================================

  The other paradigm of neural learning is the so-called supervised learning paradigm. These  networks have been established to be universal approximators of continuous/discontinuous  functions and therefore they are suitable for usage where we have some information about the  input-output map to be approximated. A set of data (Input-Output information) is used for training  the network. Once the network has been trained it can be given any input (from the input space of  the map to be approximated) and it will produce an output, which would correspond to the  expected output from the approximated mapping. The quality of this output has been established  to correspond arbitrarily close to the actual output desired owing to the generalization capabilities  of these networks.   The activation function used is the log-sigmoid function as given in [9] can be expressed as: -   

------------------- Sentence 1 -------------------

  The other paradigm of neural learning is the so-called supervised learning paradigm. 


>> Tokens are: 
[  , paradigm, neural, learning, -, called, supervised, learning, paradigm, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('paradigm', 'NOUN'), ('neural', 'ADJ'), ('learning', 'NOUN'), ('-', 'PUNCT'), ('called', 'VERB'), ('supervised', 'ADJ'), ('learning', 'NOUN'), ('paradigm', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'dep'), ('paradigm', 'nsubj'), ('neural', 'amod'), ('learning', 'pobj'), ('-', 'punct'), ('called', 'amod'), ('supervised', 'amod'), ('learning', 'compound'), ('paradigm', 'attr'), ('.', 'punct')]

>> Bigrams: 
[[  , paradigm], [paradigm, neural], [neural, learning], [learning, -], [-, called], [called, supervised], [supervised, learning], [learning, paradigm], [paradigm, .]]

>> Trigrams: 
[[  , paradigm, neural], [paradigm, neural, learning], [neural, learning, -], [learning, -, called], [-, called, supervised], [called, supervised, learning], [supervised, learning, paradigm], [learning, paradigm, .]]

>> Noun Phrases are: 
[The other paradigm, neural learning, the so-called supervised learning paradigm]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

These  networks have been established to be universal approximators of continuous/discontinuous  functions and therefore they are suitable for usage where we have some information about the  input-output map to be approximated. 


>> Tokens are: 
[ , networks, established, universal, approximators, continuous, /, discontinuous,  , functions, suitable, usage, information,  , input, -, output, map, approximated, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('networks', 'NOUN'), ('established', 'VERB'), ('universal', 'ADJ'), ('approximators', 'NOUN'), ('continuous', 'ADJ'), ('/', 'SYM'), ('discontinuous', 'ADJ'), (' ', 'SPACE'), ('functions', 'NOUN'), ('suitable', 'ADJ'), ('usage', 'NOUN'), ('information', 'NOUN'), (' ', 'SPACE'), ('input', 'NOUN'), ('-', 'PUNCT'), ('output', 'NOUN'), ('map', 'NOUN'), ('approximated', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'compound'), ('networks', 'nsubjpass'), ('established', 'ROOT'), ('universal', 'amod'), ('approximators', 'attr'), ('continuous', 'amod'), ('/', 'punct'), ('discontinuous', 'amod'), (' ', 'compound'), ('functions', 'pobj'), ('suitable', 'acomp'), ('usage', 'pobj'), ('information', 'dobj'), (' ', 'nmod'), ('input', 'compound'), ('-', 'punct'), ('output', 'compound'), ('map', 'pobj'), ('approximated', 'relcl'), ('.', 'punct')]

>> Bigrams: 
[[ , networks], [networks, established], [established, universal], [universal, approximators], [approximators, continuous], [continuous, /], [/, discontinuous], [discontinuous,  ], [ , functions], [functions, suitable], [suitable, usage], [usage, information], [information,  ], [ , input], [input, -], [-, output], [output, map], [map, approximated], [approximated, .]]

>> Trigrams: 
[[ , networks, established], [networks, established, universal], [established, universal, approximators], [universal, approximators, continuous], [approximators, continuous, /], [continuous, /, discontinuous], [/, discontinuous,  ], [discontinuous,  , functions], [ , functions, suitable], [functions, suitable, usage], [suitable, usage, information], [usage, information,  ], [information,  , input], [ , input, -], [input, -, output], [-, output, map], [output, map, approximated], [map, approximated, .]]

>> Noun Phrases are: 
[These  networks, universal approximators, continuous/discontinuous  functions, they, usage, we, some information, the  input-output map]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

A set of data (Input-Output information) is used for training  the network. 


>> Tokens are: 
[set, data, (, Input, -, Output, information, ), training,  , network, .] 

>> PoS Tags are: 
[('set', 'NOUN'), ('data', 'NOUN'), ('(', 'PUNCT'), ('Input', 'PROPN'), ('-', 'PUNCT'), ('Output', 'NOUN'), ('information', 'NOUN'), (')', 'PUNCT'), ('training', 'VERB'), (' ', 'SPACE'), ('network', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('set', 'nsubjpass'), ('data', 'pobj'), ('(', 'punct'), ('Input', 'compound'), ('-', 'punct'), ('Output', 'compound'), ('information', 'appos'), (')', 'punct'), ('training', 'pcomp'), (' ', 'dobj'), ('network', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[set, data], [data, (], [(, Input], [Input, -], [-, Output], [Output, information], [information, )], [), training], [training,  ], [ , network], [network, .]]

>> Trigrams: 
[[set, data, (], [data, (, Input], [(, Input, -], [Input, -, Output], [-, Output, information], [Output, information, )], [information, ), training], [), training,  ], [training,  , network], [ , network, .]]

>> Noun Phrases are: 
[A set, data, (Input-Output information, the network]

>> Named Entities are: 
[('Input-Output', 'ORG')] 

------------------- Sentence 4 -------------------

Once the network has been trained it can be given any input (from the input space of  the map to be approximated) and it will produce an output, which would correspond to the  expected output from the approximated mapping. 


>> Tokens are: 
[network, trained, given, input, (, input, space,  , map, approximated, ), produce, output, ,, correspond,  , expected, output, approximated, mapping, .] 

>> PoS Tags are: 
[('network', 'NOUN'), ('trained', 'VERB'), ('given', 'VERB'), ('input', 'NOUN'), ('(', 'PUNCT'), ('input', 'NOUN'), ('space', 'NOUN'), (' ', 'SPACE'), ('map', 'NOUN'), ('approximated', 'VERB'), (')', 'PUNCT'), ('produce', 'VERB'), ('output', 'NOUN'), (',', 'PUNCT'), ('correspond', 'VERB'), (' ', 'SPACE'), ('expected', 'VERB'), ('output', 'NOUN'), ('approximated', 'ADJ'), ('mapping', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('network', 'nsubjpass'), ('trained', 'advcl'), ('given', 'ROOT'), ('input', 'dobj'), ('(', 'punct'), ('input', 'compound'), ('space', 'pobj'), (' ', 'pobj'), ('map', 'appos'), ('approximated', 'relcl'), (')', 'punct'), ('produce', 'conj'), ('output', 'dobj'), (',', 'punct'), ('correspond', 'relcl'), (' ', 'pobj'), ('expected', 'amod'), ('output', 'dobj'), ('approximated', 'amod'), ('mapping', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[network, trained], [trained, given], [given, input], [input, (], [(, input], [input, space], [space,  ], [ , map], [map, approximated], [approximated, )], [), produce], [produce, output], [output, ,], [,, correspond], [correspond,  ], [ , expected], [expected, output], [output, approximated], [approximated, mapping], [mapping, .]]

>> Trigrams: 
[[network, trained, given], [trained, given, input], [given, input, (], [input, (, input], [(, input, space], [input, space,  ], [space,  , map], [ , map, approximated], [map, approximated, )], [approximated, ), produce], [), produce, output], [produce, output, ,], [output, ,, correspond], [,, correspond,  ], [correspond,  , expected], [ , expected, output], [expected, output, approximated], [output, approximated, mapping], [approximated, mapping, .]]

>> Noun Phrases are: 
[the network, it, any input, the input space, the map, it, an output, expected output, the approximated mapping]

>> Named Entities are: 
[] 

------------------- Sentence 5 -------------------

The quality of this output has been established  to correspond arbitrarily close to the actual output desired owing to the generalization capabilities  of these networks. 


>> Tokens are: 
[quality, output, established,  , correspond, arbitrarily, close, actual, output, desired, owing, generalization, capabilities,  , networks, .] 

>> PoS Tags are: 
[('quality', 'NOUN'), ('output', 'NOUN'), ('established', 'VERB'), (' ', 'SPACE'), ('correspond', 'VERB'), ('arbitrarily', 'ADV'), ('close', 'ADV'), ('actual', 'ADJ'), ('output', 'NOUN'), ('desired', 'VERB'), ('owing', 'VERB'), ('generalization', 'NOUN'), ('capabilities', 'VERB'), (' ', 'SPACE'), ('networks', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('quality', 'nsubjpass'), ('output', 'pobj'), ('established', 'ROOT'), (' ', 'dobj'), ('correspond', 'advcl'), ('arbitrarily', 'advmod'), ('close', 'advmod'), ('actual', 'amod'), ('output', 'pobj'), ('desired', 'acl'), ('owing', 'prep'), ('generalization', 'compound'), ('capabilities', 'pobj'), (' ', 'dobj'), ('networks', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[quality, output], [output, established], [established,  ], [ , correspond], [correspond, arbitrarily], [arbitrarily, close], [close, actual], [actual, output], [output, desired], [desired, owing], [owing, generalization], [generalization, capabilities], [capabilities,  ], [ , networks], [networks, .]]

>> Trigrams: 
[[quality, output, established], [output, established,  ], [established,  , correspond], [ , correspond, arbitrarily], [correspond, arbitrarily, close], [arbitrarily, close, actual], [close, actual, output], [actual, output, desired], [output, desired, owing], [desired, owing, generalization], [owing, generalization, capabilities], [generalization, capabilities,  ], [capabilities,  , networks], [ , networks, .]]

>> Noun Phrases are: 
[The quality, this output, the actual output, these networks]

>> Named Entities are: 
[] 

------------------- Sentence 6 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 7 -------------------

The activation function used is the log-sigmoid function as given in [9] can be expressed as: -    


>> Tokens are: 
[activation, function, log, -, sigmoid, function, given, [, 9, ], expressed, :, -,   ] 

>> PoS Tags are: 
[('activation', 'NOUN'), ('function', 'NOUN'), ('log', 'NOUN'), ('-', 'PUNCT'), ('sigmoid', 'NOUN'), ('function', 'NOUN'), ('given', 'VERB'), ('[', 'PUNCT'), ('9', 'NUM'), (']', 'PUNCT'), ('expressed', 'VERB'), (':', 'PUNCT'), ('-', 'PUNCT'), ('  ', 'SPACE')] 

>> Dependency Tags are: 
[('activation', 'compound'), ('function', 'nsubj'), ('log', 'compound'), ('-', 'punct'), ('sigmoid', 'compound'), ('function', 'attr'), ('given', 'advcl'), ('[', 'punct'), ('9', 'pobj'), (']', 'nsubjpass'), ('expressed', 'ccomp'), (':', 'punct'), ('-', 'punct'), ('  ', 'pobj')]

>> Bigrams: 
[[activation, function], [function, log], [log, -], [-, sigmoid], [sigmoid, function], [function, given], [given, [], [[, 9], [9, ]], [], expressed], [expressed, :], [:, -], [-,   ]]

>> Trigrams: 
[[activation, function, log], [function, log, -], [log, -, sigmoid], [-, sigmoid, function], [sigmoid, function, given], [function, given, [], [given, [, 9], [[, 9, ]], [9, ], expressed], [], expressed, :], [expressed, :, -], [:, -,   ]]

>> Noun Phrases are: 
[The activation function, the log-sigmoid function]

>> Named Entities are: 
[] 


================================ Paragraph 17 =================================

  Where   

------------------- Sentence 1 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Where    


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 18 =================================

  w’s are the synaptic coefficients and x’s are the outputs of the previous layer. For the hidden layer  x’s correspond to the input of the network while for the output layer x’s correspond to the output of  the hidden layer. The network is trained using the error back propagation algorithm [9] .The  weight update rule as given in [9] can be expressed as: -    

------------------- Sentence 1 -------------------

  w’s are the synaptic coefficients and x’s are the outputs of the previous layer. 


>> Tokens are: 
[  , w, synaptic, coefficients, x, outputs, previous, layer, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('w', 'ADP'), ('synaptic', 'ADJ'), ('coefficients', 'NOUN'), ('x', 'SYM'), ('outputs', 'NOUN'), ('previous', 'ADJ'), ('layer', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'nsubj'), ('w', 'prep'), ('synaptic', 'amod'), ('coefficients', 'attr'), ('x', 'punct'), ('outputs', 'attr'), ('previous', 'amod'), ('layer', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[  , w], [w, synaptic], [synaptic, coefficients], [coefficients, x], [x, outputs], [outputs, previous], [previous, layer], [layer, .]]

>> Trigrams: 
[[  , w, synaptic], [w, synaptic, coefficients], [synaptic, coefficients, x], [coefficients, x, outputs], [x, outputs, previous], [outputs, previous, layer], [previous, layer, .]]

>> Noun Phrases are: 
[the synaptic coefficients, ’s, the outputs, the previous layer]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

For the hidden layer  x’s correspond to the input of the network while for the output layer x’s correspond to the output of  the hidden layer. 


>> Tokens are: 
[hidden, layer,  , x, correspond, input, network, output, layer, x, correspond, output,  , hidden, layer, .] 

>> PoS Tags are: 
[('hidden', 'ADJ'), ('layer', 'NOUN'), (' ', 'SPACE'), ('x', 'SYM'), ('correspond', 'NOUN'), ('input', 'NOUN'), ('network', 'NOUN'), ('output', 'NOUN'), ('layer', 'NOUN'), ('x', 'PUNCT'), ('correspond', 'NOUN'), ('output', 'NOUN'), (' ', 'SPACE'), ('hidden', 'ADJ'), ('layer', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('hidden', 'amod'), ('layer', 'pobj'), (' ', 'appos'), ('x', 'conj'), ('correspond', 'pobj'), ('input', 'pobj'), ('network', 'pobj'), ('output', 'compound'), ('layer', 'pobj'), ('x', 'punct'), ('correspond', 'pobj'), ('output', 'pobj'), (' ', 'pobj'), ('hidden', 'amod'), ('layer', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[hidden, layer], [layer,  ], [ , x], [x, correspond], [correspond, input], [input, network], [network, output], [output, layer], [layer, x], [x, correspond], [correspond, output], [output,  ], [ , hidden], [hidden, layer], [layer, .]]

>> Trigrams: 
[[hidden, layer,  ], [layer,  , x], [ , x, correspond], [x, correspond, input], [correspond, input, network], [input, network, output], [network, output, layer], [output, layer, x], [layer, x, correspond], [x, correspond, output], [correspond, output,  ], [output,  , hidden], [ , hidden, layer], [hidden, layer, .]]

>> Noun Phrases are: 
[the hidden layer, correspond, the input, the network, the output layer, correspond, the output, the hidden layer]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

The network is trained using the error back propagation algorithm 


>> Tokens are: 
[network, trained, error, propagation, algorithm] 

>> PoS Tags are: 
[('network', 'NOUN'), ('trained', 'VERB'), ('error', 'NOUN'), ('propagation', 'NOUN'), ('algorithm', 'NOUN')] 

>> Dependency Tags are: 
[('network', 'nsubjpass'), ('trained', 'ROOT'), ('error', 'dobj'), ('propagation', 'compound'), ('algorithm', 'punct')]

>> Bigrams: 
[[network, trained], [trained, error], [error, propagation], [propagation, algorithm]]

>> Trigrams: 
[[network, trained, error], [trained, error, propagation], [error, propagation, algorithm]]

>> Noun Phrases are: 
[The network, the error]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

[9] .The 


>> Tokens are: 
[[, 9, ], .The] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('9', 'NUM'), (']', 'PUNCT'), ('.The', 'PUNCT')] 

>> Dependency Tags are: 
[('[', 'punct'), ('9', 'ROOT'), (']', 'punct'), ('.The', 'punct')]

>> Bigrams: 
[[[, 9], [9, ]], [], .The]]

>> Trigrams: 
[[[, 9, ]], [9, ], .The]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('9', 'CARDINAL')] 

------------------- Sentence 5 -------------------

 weight update rule as given in [9] can be expressed as: -     


>> Tokens are: 
[ , weight, update, rule, given, [, 9, ], expressed, :, -,    ] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('weight', 'NOUN'), ('update', 'NOUN'), ('rule', 'NOUN'), ('given', 'VERB'), ('[', 'PUNCT'), ('9', 'NUM'), (']', 'PUNCT'), ('expressed', 'VERB'), (':', 'PUNCT'), ('-', 'PUNCT'), ('   ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'compound'), ('weight', 'compound'), ('update', 'compound'), ('rule', 'nsubjpass'), ('given', 'advcl'), ('[', 'punct'), ('9', 'appos'), (']', 'punct'), ('expressed', 'ROOT'), (':', 'punct'), ('-', 'punct'), ('   ', 'pobj')]

>> Bigrams: 
[[ , weight], [weight, update], [update, rule], [rule, given], [given, [], [[, 9], [9, ]], [], expressed], [expressed, :], [:, -], [-,    ]]

>> Trigrams: 
[[ , weight, update], [weight, update, rule], [update, rule, given], [rule, given, [], [given, [, 9], [[, 9, ]], [9, ], expressed], [], expressed, :], [expressed, :, -], [:, -,    ]]

>> Noun Phrases are: 
[ weight update rule]

>> Named Entities are: 
[] 


================================ Paragraph 19 =================================

  where α is usually a positive number called the momentum constant , η is the learning rate, ∆wji  (n) is the correction applied to the synaptic weight connecting the output of neuron i to the input of  neuron j at iteration n, δj (n) is the local gradient at nth iteration, yi (n) is the function signal  appearing at the output of neuron i at iteration n.    From experimental results we conclude that neural network can be used as test oracle, effort  estimation, cost estimation, size estimation & other application areas of software engineering [1,7, 

------------------- Sentence 1 -------------------

  where α is usually a positive number called the momentum constant , η is the learning rate, ∆wji  (n) is the correction applied to the synaptic weight connecting the output of neuron i to the input of  neuron j at iteration n, δj (n) is the local gradient at nth iteration, yi (n) 


>> Tokens are: 
[  , α, usually, positive, number, called, momentum, constant, ,, η, learning, rate, ,, ∆wji,  , (, n, ), correction, applied, synaptic, weight, connecting, output, neuron, input,  , neuron, j, iteration, n, ,, δj, (, n, ), local, gradient, nth, iteration, ,, yi, (, n, )] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('α', 'DET'), ('usually', 'ADV'), ('positive', 'ADJ'), ('number', 'NOUN'), ('called', 'VERB'), ('momentum', 'NOUN'), ('constant', 'ADJ'), (',', 'PUNCT'), ('η', 'NOUN'), ('learning', 'NOUN'), ('rate', 'NOUN'), (',', 'PUNCT'), ('∆wji', 'PROPN'), (' ', 'SPACE'), ('(', 'PUNCT'), ('n', 'X'), (')', 'PUNCT'), ('correction', 'NOUN'), ('applied', 'VERB'), ('synaptic', 'ADJ'), ('weight', 'NOUN'), ('connecting', 'VERB'), ('output', 'NOUN'), ('neuron', 'NOUN'), ('input', 'NOUN'), (' ', 'SPACE'), ('neuron', 'NOUN'), ('j', 'NOUN'), ('iteration', 'NOUN'), ('n', 'CCONJ'), (',', 'PUNCT'), ('δj', 'INTJ'), ('(', 'PUNCT'), ('n', 'CCONJ'), (')', 'PUNCT'), ('local', 'ADJ'), ('gradient', 'NOUN'), ('nth', 'NOUN'), ('iteration', 'NOUN'), (',', 'PUNCT'), ('yi', 'PROPN'), ('(', 'PUNCT'), ('n', 'X'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'dep'), ('α', 'nsubj'), ('usually', 'advmod'), ('positive', 'amod'), ('number', 'attr'), ('called', 'acl'), ('momentum', 'oprd'), ('constant', 'oprd'), (',', 'punct'), ('η', 'nsubj'), ('learning', 'compound'), ('rate', 'attr'), (',', 'punct'), ('∆wji', 'compound'), (' ', 'conj'), ('(', 'punct'), ('n', 'appos'), (')', 'punct'), ('correction', 'attr'), ('applied', 'acl'), ('synaptic', 'amod'), ('weight', 'pobj'), ('connecting', 'acl'), ('output', 'dobj'), ('neuron', 'pobj'), ('input', 'pobj'), (' ', 'compound'), ('neuron', 'compound'), ('j', 'pobj'), ('iteration', 'pobj'), ('n', 'nummod'), (',', 'punct'), ('δj', 'attr'), ('(', 'punct'), ('n', 'cc'), (')', 'punct'), ('local', 'amod'), ('gradient', 'attr'), ('nth', 'compound'), ('iteration', 'pobj'), (',', 'punct'), ('yi', 'appos'), ('(', 'punct'), ('n', 'appos'), (')', 'punct')]

>> Bigrams: 
[[  , α], [α, usually], [usually, positive], [positive, number], [number, called], [called, momentum], [momentum, constant], [constant, ,], [,, η], [η, learning], [learning, rate], [rate, ,], [,, ∆wji], [∆wji,  ], [ , (], [(, n], [n, )], [), correction], [correction, applied], [applied, synaptic], [synaptic, weight], [weight, connecting], [connecting, output], [output, neuron], [neuron, input], [input,  ], [ , neuron], [neuron, j], [j, iteration], [iteration, n], [n, ,], [,, δj], [δj, (], [(, n], [n, )], [), local], [local, gradient], [gradient, nth], [nth, iteration], [iteration, ,], [,, yi], [yi, (], [(, n], [n, )]]

>> Trigrams: 
[[  , α, usually], [α, usually, positive], [usually, positive, number], [positive, number, called], [number, called, momentum], [called, momentum, constant], [momentum, constant, ,], [constant, ,, η], [,, η, learning], [η, learning, rate], [learning, rate, ,], [rate, ,, ∆wji], [,, ∆wji,  ], [∆wji,  , (], [ , (, n], [(, n, )], [n, ), correction], [), correction, applied], [correction, applied, synaptic], [applied, synaptic, weight], [synaptic, weight, connecting], [weight, connecting, output], [connecting, output, neuron], [output, neuron, input], [neuron, input,  ], [input,  , neuron], [ , neuron, j], [neuron, j, iteration], [j, iteration, n], [iteration, n, ,], [n, ,, δj], [,, δj, (], [δj, (, n], [(, n, )], [n, ), local], [), local, gradient], [local, gradient, nth], [gradient, nth, iteration], [nth, iteration, ,], [iteration, ,, yi], [,, yi, (], [yi, (, n], [(, n, )]]

>> Noun Phrases are: 
[a positive number, the momentum, η, the learning rate, the correction, the synaptic weight, the output, neuron, the input,  neuron j, iteration, the local gradient, nth iteration, yi]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

is the function signal  appearing at the output of neuron i at iteration n.     


>> Tokens are: 
[function, signal,  , appearing, output, neuron, iteration, n.,    ] 

>> PoS Tags are: 
[('function', 'NOUN'), ('signal', 'NOUN'), (' ', 'SPACE'), ('appearing', 'VERB'), ('output', 'NOUN'), ('neuron', 'NOUN'), ('iteration', 'NOUN'), ('n.', 'NOUN'), ('   ', 'SPACE')] 

>> Dependency Tags are: 
[('function', 'compound'), ('signal', 'attr'), (' ', 'nsubj'), ('appearing', 'acl'), ('output', 'pobj'), ('neuron', 'pobj'), ('iteration', 'pobj'), ('n.', 'npadvmod'), ('   ', 'nummod')]

>> Bigrams: 
[[function, signal], [signal,  ], [ , appearing], [appearing, output], [output, neuron], [neuron, iteration], [iteration, n.], [n.,    ]]

>> Trigrams: 
[[function, signal,  ], [signal,  , appearing], [ , appearing, output], [appearing, output, neuron], [output, neuron, iteration], [neuron, iteration, n.], [iteration, n.,    ]]

>> Noun Phrases are: 
[the function signal, the output, neuron, i, iteration]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

From experimental results we conclude that neural network can be used as test oracle, effort  estimation, cost estimation, size estimation & other application areas of software engineering [1,7, 


>> Tokens are: 
[experimental, results, conclude, neural, network, test, oracle, ,, effort,  , estimation, ,, cost, estimation, ,, size, estimation, &, application, areas, software, engineering, [, 1,7, ,] 

>> PoS Tags are: 
[('experimental', 'ADJ'), ('results', 'NOUN'), ('conclude', 'VERB'), ('neural', 'ADJ'), ('network', 'NOUN'), ('test', 'NOUN'), ('oracle', 'NOUN'), (',', 'PUNCT'), ('effort', 'NOUN'), (' ', 'SPACE'), ('estimation', 'NOUN'), (',', 'PUNCT'), ('cost', 'NOUN'), ('estimation', 'NOUN'), (',', 'PUNCT'), ('size', 'NOUN'), ('estimation', 'NOUN'), ('&', 'CCONJ'), ('application', 'NOUN'), ('areas', 'NOUN'), ('software', 'NOUN'), ('engineering', 'NOUN'), ('[', 'PUNCT'), ('1,7', 'NUM'), (',', 'PUNCT')] 

>> Dependency Tags are: 
[('experimental', 'amod'), ('results', 'pobj'), ('conclude', 'ROOT'), ('neural', 'amod'), ('network', 'nsubjpass'), ('test', 'compound'), ('oracle', 'pobj'), (',', 'punct'), ('effort', 'nmod'), (' ', 'punct'), ('estimation', 'conj'), (',', 'punct'), ('cost', 'compound'), ('estimation', 'conj'), (',', 'punct'), ('size', 'compound'), ('estimation', 'conj'), ('&', 'cc'), ('application', 'compound'), ('areas', 'conj'), ('software', 'compound'), ('engineering', 'pobj'), ('[', 'punct'), ('1,7', 'appos'), (',', 'punct')]

>> Bigrams: 
[[experimental, results], [results, conclude], [conclude, neural], [neural, network], [network, test], [test, oracle], [oracle, ,], [,, effort], [effort,  ], [ , estimation], [estimation, ,], [,, cost], [cost, estimation], [estimation, ,], [,, size], [size, estimation], [estimation, &], [&, application], [application, areas], [areas, software], [software, engineering], [engineering, [], [[, 1,7], [1,7, ,]]

>> Trigrams: 
[[experimental, results, conclude], [results, conclude, neural], [conclude, neural, network], [neural, network, test], [network, test, oracle], [test, oracle, ,], [oracle, ,, effort], [,, effort,  ], [effort,  , estimation], [ , estimation, ,], [estimation, ,, cost], [,, cost, estimation], [cost, estimation, ,], [estimation, ,, size], [,, size, estimation], [size, estimation, &], [estimation, &, application], [&, application, areas], [application, areas, software], [areas, software, engineering], [software, engineering, [], [engineering, [, 1,7], [[, 1,7, ,]]

>> Noun Phrases are: 
[experimental results, we, neural network, test oracle, effort  estimation, cost estimation, size estimation, other application areas, software engineering]

>> Named Entities are: 
[('1,7', 'CARDINAL')] 


================================ Paragraph 20 =================================

Yogesh Singh, Pradeep Kumar Bhatia & Omprakash Sangwan  

------------------- Sentence 1 -------------------

Yogesh Singh, Pradeep Kumar Bhatia & Omprakash Sangwan   


>> Tokens are: 
[Yogesh, Singh, ,, Pradeep, Kumar, Bhatia, &, Omprakash, Sangwan,  ] 

>> PoS Tags are: 
[('Yogesh', 'PROPN'), ('Singh', 'PROPN'), (',', 'PUNCT'), ('Pradeep', 'PROPN'), ('Kumar', 'PROPN'), ('Bhatia', 'PROPN'), ('&', 'CCONJ'), ('Omprakash', 'PROPN'), ('Sangwan', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Yogesh', 'compound'), ('Singh', 'ROOT'), (',', 'punct'), ('Pradeep', 'compound'), ('Kumar', 'compound'), ('Bhatia', 'conj'), ('&', 'cc'), ('Omprakash', 'compound'), ('Sangwan', 'conj'), (' ', 'punct')]

>> Bigrams: 
[[Yogesh, Singh], [Singh, ,], [,, Pradeep], [Pradeep, Kumar], [Kumar, Bhatia], [Bhatia, &], [&, Omprakash], [Omprakash, Sangwan], [Sangwan,  ]]

>> Trigrams: 
[[Yogesh, Singh, ,], [Singh, ,, Pradeep], [,, Pradeep, Kumar], [Pradeep, Kumar, Bhatia], [Kumar, Bhatia, &], [Bhatia, &, Omprakash], [&, Omprakash, Sangwan], [Omprakash, Sangwan,  ]]

>> Noun Phrases are: 
[Yogesh Singh, Pradeep Kumar Bhatia, Omprakash Sangwan]

>> Named Entities are: 
[('Yogesh Singh', 'PERSON'), ('Kumar Bhatia & Omprakash Sangwan', 'ORG')] 


================================ Paragraph 21 =================================

International Journal of Computer Science and Security, Volume (1) : Issue (1) 73  

------------------- Sentence 1 -------------------

International Journal of Computer Science and Security, Volume (1) : Issue (1) 73   


>> Tokens are: 
[International, Journal, Computer, Science, Security, ,, Volume, (, 1, ), :, Issue, (, 1, ), 73,  ] 

>> PoS Tags are: 
[('International', 'PROPN'), ('Journal', 'PROPN'), ('Computer', 'PROPN'), ('Science', 'PROPN'), ('Security', 'PROPN'), (',', 'PUNCT'), ('Volume', 'NOUN'), ('(', 'PUNCT'), ('1', 'NUM'), (')', 'PUNCT'), (':', 'PUNCT'), ('Issue', 'NOUN'), ('(', 'PUNCT'), ('1', 'NUM'), (')', 'PUNCT'), ('73', 'NUM'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('International', 'compound'), ('Journal', 'ROOT'), ('Computer', 'compound'), ('Science', 'pobj'), ('Security', 'conj'), (',', 'punct'), ('Volume', 'appos'), ('(', 'punct'), ('1', 'appos'), (')', 'punct'), (':', 'punct'), ('Issue', 'appos'), ('(', 'punct'), ('1', 'appos'), (')', 'punct'), ('73', 'appos'), (' ', 'appos')]

>> Bigrams: 
[[International, Journal], [Journal, Computer], [Computer, Science], [Science, Security], [Security, ,], [,, Volume], [Volume, (], [(, 1], [1, )], [), :], [:, Issue], [Issue, (], [(, 1], [1, )], [), 73], [73,  ]]

>> Trigrams: 
[[International, Journal, Computer], [Journal, Computer, Science], [Computer, Science, Security], [Science, Security, ,], [Security, ,, Volume], [,, Volume, (], [Volume, (, 1], [(, 1, )], [1, ), :], [), :, Issue], [:, Issue, (], [Issue, (, 1], [(, 1, )], [1, ), 73], [), 73,  ]]

>> Noun Phrases are: 
[International Journal, Computer Science, Security, Volume, Issue]

>> Named Entities are: 
[('International Journal of Computer Science and Security, Volume', 'ORG'), ('1', 'CARDINAL')] 


================================ Paragraph 22 =================================

12, 13]. However the percentage error that can be tolerated will depend on the specific  application for which test case is being design. The architecture and training algorithm will  depend upon the space spanned by the test case parameters. There are some other systems like  complex simulation in mechanical design, weather and economic forecasting and geological  exploration that are built to solve unsolved problems using neural network for which there is no  analytical solution.     The primary advantage of using neural network approach is that they are adaptable and  nonparametric; predictive models can be tailored to the data at a particular site.    

------------------- Sentence 1 -------------------

12, 13]. 


>> Tokens are: 
[12, ,, 13, ], .] 

>> PoS Tags are: 
[('12', 'NUM'), (',', 'PUNCT'), ('13', 'NUM'), (']', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('12', 'ROOT'), (',', 'punct'), ('13', 'npadvmod'), (']', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[12, ,], [,, 13], [13, ]], [], .]]

>> Trigrams: 
[[12, ,, 13], [,, 13, ]], [13, ], .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('12', 'CARDINAL'), ('13', 'CARDINAL')] 

------------------- Sentence 2 -------------------

However the percentage error that can be tolerated will depend on the specific  application for which test case is being design. 


>> Tokens are: 
[percentage, error, tolerated, depend, specific,  , application, test, case, design, .] 

>> PoS Tags are: 
[('percentage', 'NOUN'), ('error', 'NOUN'), ('tolerated', 'VERB'), ('depend', 'VERB'), ('specific', 'ADJ'), (' ', 'SPACE'), ('application', 'NOUN'), ('test', 'NOUN'), ('case', 'NOUN'), ('design', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('percentage', 'compound'), ('error', 'nsubj'), ('tolerated', 'relcl'), ('depend', 'ROOT'), ('specific', 'amod'), (' ', 'compound'), ('application', 'pobj'), ('test', 'compound'), ('case', 'pobj'), ('design', 'attr'), ('.', 'punct')]

>> Bigrams: 
[[percentage, error], [error, tolerated], [tolerated, depend], [depend, specific], [specific,  ], [ , application], [application, test], [test, case], [case, design], [design, .]]

>> Trigrams: 
[[percentage, error, tolerated], [error, tolerated, depend], [tolerated, depend, specific], [depend, specific,  ], [specific,  , application], [ , application, test], [application, test, case], [test, case, design], [case, design, .]]

>> Noun Phrases are: 
[the percentage error, the specific  application, which test case, design]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

The architecture and training algorithm will  depend upon the space spanned by the test case parameters. 


>> Tokens are: 
[architecture, training, algorithm,  , depend, space, spanned, test, case, parameters, .] 

>> PoS Tags are: 
[('architecture', 'NOUN'), ('training', 'NOUN'), ('algorithm', 'NOUN'), (' ', 'SPACE'), ('depend', 'VERB'), ('space', 'NOUN'), ('spanned', 'VERB'), ('test', 'NOUN'), ('case', 'NOUN'), ('parameters', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('architecture', 'nmod'), ('training', 'conj'), ('algorithm', 'nsubj'), (' ', 'nsubj'), ('depend', 'ROOT'), ('space', 'pobj'), ('spanned', 'acl'), ('test', 'compound'), ('case', 'compound'), ('parameters', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[architecture, training], [training, algorithm], [algorithm,  ], [ , depend], [depend, space], [space, spanned], [spanned, test], [test, case], [case, parameters], [parameters, .]]

>> Trigrams: 
[[architecture, training, algorithm], [training, algorithm,  ], [algorithm,  , depend], [ , depend, space], [depend, space, spanned], [space, spanned, test], [spanned, test, case], [test, case, parameters], [case, parameters, .]]

>> Noun Phrases are: 
[The architecture and training algorithm, the space, the test case parameters]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

There are some other systems like  complex simulation in mechanical design, weather and economic forecasting and geological  exploration that are built to solve unsolved problems using neural network for which there is no  analytical solution. 


>> Tokens are: 
[systems, like,  , complex, simulation, mechanical, design, ,, weather, economic, forecasting, geological,  , exploration, built, solve, unsolved, problems, neural, network,  , analytical, solution, .] 

>> PoS Tags are: 
[('systems', 'NOUN'), ('like', 'ADP'), (' ', 'SPACE'), ('complex', 'ADJ'), ('simulation', 'NOUN'), ('mechanical', 'ADJ'), ('design', 'NOUN'), (',', 'PUNCT'), ('weather', 'NOUN'), ('economic', 'ADJ'), ('forecasting', 'NOUN'), ('geological', 'ADJ'), (' ', 'SPACE'), ('exploration', 'NOUN'), ('built', 'VERB'), ('solve', 'VERB'), ('unsolved', 'ADJ'), ('problems', 'NOUN'), ('neural', 'ADJ'), ('network', 'NOUN'), (' ', 'SPACE'), ('analytical', 'ADJ'), ('solution', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('systems', 'attr'), ('like', 'prep'), (' ', 'nmod'), ('complex', 'amod'), ('simulation', 'pobj'), ('mechanical', 'amod'), ('design', 'pobj'), (',', 'punct'), ('weather', 'conj'), ('economic', 'amod'), ('forecasting', 'conj'), ('geological', 'amod'), (' ', 'conj'), ('exploration', 'pobj'), ('built', 'relcl'), ('solve', 'advcl'), ('unsolved', 'amod'), ('problems', 'dobj'), ('neural', 'amod'), ('network', 'dobj'), (' ', 'nmod'), ('analytical', 'amod'), ('solution', 'attr'), ('.', 'punct')]

>> Bigrams: 
[[systems, like], [like,  ], [ , complex], [complex, simulation], [simulation, mechanical], [mechanical, design], [design, ,], [,, weather], [weather, economic], [economic, forecasting], [forecasting, geological], [geological,  ], [ , exploration], [exploration, built], [built, solve], [solve, unsolved], [unsolved, problems], [problems, neural], [neural, network], [network,  ], [ , analytical], [analytical, solution], [solution, .]]

>> Trigrams: 
[[systems, like,  ], [like,  , complex], [ , complex, simulation], [complex, simulation, mechanical], [simulation, mechanical, design], [mechanical, design, ,], [design, ,, weather], [,, weather, economic], [weather, economic, forecasting], [economic, forecasting, geological], [forecasting, geological,  ], [geological,  , exploration], [ , exploration, built], [exploration, built, solve], [built, solve, unsolved], [solve, unsolved, problems], [unsolved, problems, neural], [problems, neural, network], [neural, network,  ], [network,  , analytical], [ , analytical, solution], [analytical, solution, .]]

>> Noun Phrases are: 
[some other systems,  complex simulation, mechanical design, weather, economic forecasting, exploration, unsolved problems, neural network, no  analytical solution]

>> Named Entities are: 
[] 

------------------- Sentence 5 -------------------

    The primary advantage of using neural network approach is that they are adaptable and  nonparametric; predictive models can be tailored to the data at a particular site. 


>> Tokens are: 
[    , primary, advantage, neural, network, approach, adaptable,  , nonparametric, ;, predictive, models, tailored, data, particular, site, .] 

>> PoS Tags are: 
[('    ', 'SPACE'), ('primary', 'ADJ'), ('advantage', 'NOUN'), ('neural', 'ADJ'), ('network', 'NOUN'), ('approach', 'NOUN'), ('adaptable', 'ADJ'), (' ', 'SPACE'), ('nonparametric', 'NOUN'), (';', 'PUNCT'), ('predictive', 'ADJ'), ('models', 'NOUN'), ('tailored', 'VERB'), ('data', 'NOUN'), ('particular', 'ADJ'), ('site', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('    ', 'nmod'), ('primary', 'amod'), ('advantage', 'nsubj'), ('neural', 'amod'), ('network', 'compound'), ('approach', 'dobj'), ('adaptable', 'acomp'), (' ', 'nsubj'), ('nonparametric', 'conj'), (';', 'punct'), ('predictive', 'amod'), ('models', 'nsubjpass'), ('tailored', 'ROOT'), ('data', 'pobj'), ('particular', 'amod'), ('site', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[    , primary], [primary, advantage], [advantage, neural], [neural, network], [network, approach], [approach, adaptable], [adaptable,  ], [ , nonparametric], [nonparametric, ;], [;, predictive], [predictive, models], [models, tailored], [tailored, data], [data, particular], [particular, site], [site, .]]

>> Trigrams: 
[[    , primary, advantage], [primary, advantage, neural], [advantage, neural, network], [neural, network, approach], [network, approach, adaptable], [approach, adaptable,  ], [adaptable,  , nonparametric], [ , nonparametric, ;], [nonparametric, ;, predictive], [;, predictive, models], [predictive, models, tailored], [models, tailored, data], [tailored, data, particular], [data, particular, site], [particular, site, .]]

>> Noun Phrases are: 
[    The primary advantage, neural network approach, they, predictive models, the data, a particular site]

>> Named Entities are: 
[] 

------------------- Sentence 6 -------------------

    


>> Tokens are: 
[   ] 

>> PoS Tags are: 
[('   ', 'SPACE')] 

>> Dependency Tags are: 
[('   ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 23 =================================

3.  CASE BASED REASONING (CBR)  Case Based Reasoning is a technique by which we solve new problems by adapting the solutions  from similarly solved problems.  We take the instances of solutions from problems that have  happened in the past and try to solve new problems by using these cases. Each such solution  available to us can be termed as a case [11].   

------------------- Sentence 1 -------------------

3.  CASE BASED REASONING (CBR)   


>> Tokens are: 
[3, .,  , CASE, BASED, REASONING, (, CBR, ),  ] 

>> PoS Tags are: 
[('3', 'X'), ('.', 'PUNCT'), (' ', 'SPACE'), ('CASE', 'NOUN'), ('BASED', 'VERB'), ('REASONING', 'NOUN'), ('(', 'PUNCT'), ('CBR', 'PROPN'), (')', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('3', 'meta'), ('.', 'punct'), (' ', 'compound'), ('CASE', 'ROOT'), ('BASED', 'amod'), ('REASONING', 'appos'), ('(', 'punct'), ('CBR', 'appos'), (')', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[3, .], [.,  ], [ , CASE], [CASE, BASED], [BASED, REASONING], [REASONING, (], [(, CBR], [CBR, )], [),  ]]

>> Trigrams: 
[[3, .,  ], [.,  , CASE], [ , CASE, BASED], [CASE, BASED, REASONING], [BASED, REASONING, (], [REASONING, (, CBR], [(, CBR, )], [CBR, ),  ]]

>> Noun Phrases are: 
[3.  CASE, BASED REASONING, (CBR]

>> Named Entities are: 
[('3', 'CARDINAL')] 

------------------- Sentence 2 -------------------

Case Based 


>> Tokens are: 
[Case, Based] 

>> PoS Tags are: 
[('Case', 'NOUN'), ('Based', 'VERB')] 

>> Dependency Tags are: 
[('Case', 'ROOT'), ('Based', 'amod')]

>> Bigrams: 
[[Case, Based]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Case]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

Reasoning is a technique by which we solve new problems by adapting the solutions  from similarly solved problems. 


>> Tokens are: 
[Reasoning, technique, solve, new, problems, adapting, solutions,  , similarly, solved, problems, .] 

>> PoS Tags are: 
[('Reasoning', 'NOUN'), ('technique', 'NOUN'), ('solve', 'VERB'), ('new', 'ADJ'), ('problems', 'NOUN'), ('adapting', 'VERB'), ('solutions', 'NOUN'), (' ', 'SPACE'), ('similarly', 'ADV'), ('solved', 'VERB'), ('problems', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Reasoning', 'nsubj'), ('technique', 'attr'), ('solve', 'relcl'), ('new', 'amod'), ('problems', 'dobj'), ('adapting', 'pcomp'), ('solutions', 'dobj'), (' ', 'dobj'), ('similarly', 'advmod'), ('solved', 'amod'), ('problems', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Reasoning, technique], [technique, solve], [solve, new], [new, problems], [problems, adapting], [adapting, solutions], [solutions,  ], [ , similarly], [similarly, solved], [solved, problems], [problems, .]]

>> Trigrams: 
[[Reasoning, technique, solve], [technique, solve, new], [solve, new, problems], [new, problems, adapting], [problems, adapting, solutions], [adapting, solutions,  ], [solutions,  , similarly], [ , similarly, solved], [similarly, solved, problems], [solved, problems, .]]

>> Noun Phrases are: 
[Reasoning, a technique, we, new problems, the solutions, similarly solved problems]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 5 -------------------

We take the instances of solutions from problems that have  happened in the past and try to solve new problems by using these cases. 


>> Tokens are: 
[instances, solutions, problems,  , happened, past, try, solve, new, problems, cases, .] 

>> PoS Tags are: 
[('instances', 'NOUN'), ('solutions', 'NOUN'), ('problems', 'NOUN'), (' ', 'SPACE'), ('happened', 'VERB'), ('past', 'NOUN'), ('try', 'VERB'), ('solve', 'VERB'), ('new', 'ADJ'), ('problems', 'NOUN'), ('cases', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('instances', 'dobj'), ('solutions', 'pobj'), ('problems', 'pobj'), (' ', 'nsubj'), ('happened', 'relcl'), ('past', 'pobj'), ('try', 'conj'), ('solve', 'xcomp'), ('new', 'amod'), ('problems', 'dobj'), ('cases', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[instances, solutions], [solutions, problems], [problems,  ], [ , happened], [happened, past], [past, try], [try, solve], [solve, new], [new, problems], [problems, cases], [cases, .]]

>> Trigrams: 
[[instances, solutions, problems], [solutions, problems,  ], [problems,  , happened], [ , happened, past], [happened, past, try], [past, try, solve], [try, solve, new], [solve, new, problems], [new, problems, cases], [problems, cases, .]]

>> Noun Phrases are: 
[We, the instances, solutions, problems, the past, new problems, these cases]

>> Named Entities are: 
[] 

------------------- Sentence 6 -------------------

Each such solution  available to us can be termed as a case [11]. 


>> Tokens are: 
[solution,  , available, termed, case, [, 11, ], .] 

>> PoS Tags are: 
[('solution', 'NOUN'), (' ', 'SPACE'), ('available', 'ADJ'), ('termed', 'VERB'), ('case', 'NOUN'), ('[', 'PUNCT'), ('11', 'NUM'), (']', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('solution', 'nsubjpass'), (' ', 'nsubjpass'), ('available', 'amod'), ('termed', 'ROOT'), ('case', 'pobj'), ('[', 'punct'), ('11', 'appos'), (']', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[solution,  ], [ , available], [available, termed], [termed, case], [case, [], [[, 11], [11, ]], [], .]]

>> Trigrams: 
[[solution,  , available], [ , available, termed], [available, termed, case], [termed, case, [], [case, [, 11], [[, 11, ]], [11, ], .]]

>> Noun Phrases are: 
[Each such solution, us, a case]

>> Named Entities are: 
[('11', 'CARDINAL')] 

------------------- Sentence 7 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 24 =================================

  3.1   CBR Process  A general CBR process includes the following four processes.    

------------------- Sentence 1 -------------------

  3.1   CBR Process   


>> Tokens are: 
[  , 3.1,   , CBR, Process,  ] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('3.1', 'NUM'), ('  ', 'SPACE'), ('CBR', 'PROPN'), ('Process', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('3.1', 'nummod'), ('  ', 'appos'), ('CBR', 'compound'), ('Process', 'appos'), (' ', 'punct')]

>> Bigrams: 
[[  , 3.1], [3.1,   ], [  , CBR], [CBR, Process], [Process,  ]]

>> Trigrams: 
[[  , 3.1,   ], [3.1,   , CBR], [  , CBR, Process], [CBR, Process,  ]]

>> Noun Phrases are: 
[CBR Process]

>> Named Entities are: 
[('3.1', 'CARDINAL'), ('CBR Process', 'PRODUCT')] 

------------------- Sentence 2 -------------------

A general CBR process includes the following four processes. 


>> Tokens are: 
[general, CBR, process, includes, following, processes, .] 

>> PoS Tags are: 
[('general', 'ADJ'), ('CBR', 'PROPN'), ('process', 'NOUN'), ('includes', 'VERB'), ('following', 'VERB'), ('processes', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('general', 'amod'), ('CBR', 'compound'), ('process', 'nsubj'), ('includes', 'ROOT'), ('following', 'amod'), ('processes', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[general, CBR], [CBR, process], [process, includes], [includes, following], [following, processes], [processes, .]]

>> Trigrams: 
[[general, CBR, process], [CBR, process, includes], [process, includes, following], [includes, following, processes], [following, processes, .]]

>> Noun Phrases are: 
[A general CBR process, the following four processes]

>> Named Entities are: 
[('CBR', 'ORG'), ('four', 'CARDINAL')] 

------------------- Sentence 3 -------------------

    


>> Tokens are: 
[   ] 

>> PoS Tags are: 
[('   ', 'SPACE')] 

>> Dependency Tags are: 
[('   ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 25 =================================

    A new case is defined by the initial description of any problem. This new case is retrieved from a  collection of previous cases and this retrieved case is then combined with the new case through  reuse into a solved case. This solved case is nothing but a proposed solution to the defined  problem. Once this solution is identified, applying it practically to the real world tests it. This  process of testing is termed as revision of the problem. Then comes the process of retain where  useful experience is retained for future reuse and the case base is updated by a new learned  case or by modification of some existing cases.     Thus we can say that CBR is a four-step process:  1. RETRIEVE    2. REUSE 

------------------- Sentence 1 -------------------

    A new case is defined by the initial description of any problem. 


>> Tokens are: 
[    , new, case, defined, initial, description, problem, .] 

>> PoS Tags are: 
[('    ', 'SPACE'), ('new', 'ADJ'), ('case', 'NOUN'), ('defined', 'VERB'), ('initial', 'ADJ'), ('description', 'NOUN'), ('problem', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('    ', 'nsubjpass'), ('new', 'amod'), ('case', 'nsubjpass'), ('defined', 'ROOT'), ('initial', 'amod'), ('description', 'pobj'), ('problem', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[    , new], [new, case], [case, defined], [defined, initial], [initial, description], [description, problem], [problem, .]]

>> Trigrams: 
[[    , new, case], [new, case, defined], [case, defined, initial], [defined, initial, description], [initial, description, problem], [description, problem, .]]

>> Noun Phrases are: 
[A new case, the initial description, any problem]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

This new case is retrieved from a  collection of previous cases and this retrieved case is then combined with the new case through  reuse into a solved case. 


>> Tokens are: 
[new, case, retrieved,  , collection, previous, cases, retrieved, case, combined, new, case,  , reuse, solved, case, .] 

>> PoS Tags are: 
[('new', 'ADJ'), ('case', 'NOUN'), ('retrieved', 'VERB'), (' ', 'SPACE'), ('collection', 'NOUN'), ('previous', 'ADJ'), ('cases', 'NOUN'), ('retrieved', 'VERB'), ('case', 'NOUN'), ('combined', 'VERB'), ('new', 'ADJ'), ('case', 'NOUN'), (' ', 'SPACE'), ('reuse', 'VERB'), ('solved', 'VERB'), ('case', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('new', 'amod'), ('case', 'nsubjpass'), ('retrieved', 'ROOT'), (' ', 'compound'), ('collection', 'pobj'), ('previous', 'amod'), ('cases', 'pobj'), ('retrieved', 'amod'), ('case', 'nsubjpass'), ('combined', 'conj'), ('new', 'amod'), ('case', 'pobj'), (' ', 'pobj'), ('reuse', 'conj'), ('solved', 'amod'), ('case', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[new, case], [case, retrieved], [retrieved,  ], [ , collection], [collection, previous], [previous, cases], [cases, retrieved], [retrieved, case], [case, combined], [combined, new], [new, case], [case,  ], [ , reuse], [reuse, solved], [solved, case], [case, .]]

>> Trigrams: 
[[new, case, retrieved], [case, retrieved,  ], [retrieved,  , collection], [ , collection, previous], [collection, previous, cases], [previous, cases, retrieved], [cases, retrieved, case], [retrieved, case, combined], [case, combined, new], [combined, new, case], [new, case,  ], [case,  , reuse], [ , reuse, solved], [reuse, solved, case], [solved, case, .]]

>> Noun Phrases are: 
[This new case, a  collection, previous cases, this retrieved case, the new case, a solved case]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

This solved case is nothing but a proposed solution to the defined  problem. 


>> Tokens are: 
[solved, case, proposed, solution, defined,  , problem, .] 

>> PoS Tags are: 
[('solved', 'VERB'), ('case', 'NOUN'), ('proposed', 'VERB'), ('solution', 'NOUN'), ('defined', 'VERB'), (' ', 'SPACE'), ('problem', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('solved', 'amod'), ('case', 'nsubj'), ('proposed', 'amod'), ('solution', 'pobj'), ('defined', 'amod'), (' ', 'compound'), ('problem', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[solved, case], [case, proposed], [proposed, solution], [solution, defined], [defined,  ], [ , problem], [problem, .]]

>> Trigrams: 
[[solved, case, proposed], [case, proposed, solution], [proposed, solution, defined], [solution, defined,  ], [defined,  , problem], [ , problem, .]]

>> Noun Phrases are: 
[This solved case, nothing, a proposed solution, the defined  problem]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

Once this solution is identified, applying it practically to the real world tests it. 


>> Tokens are: 
[solution, identified, ,, applying, practically, real, world, tests, .] 

>> PoS Tags are: 
[('solution', 'NOUN'), ('identified', 'VERB'), (',', 'PUNCT'), ('applying', 'VERB'), ('practically', 'ADV'), ('real', 'ADJ'), ('world', 'NOUN'), ('tests', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('solution', 'nsubjpass'), ('identified', 'advcl'), (',', 'punct'), ('applying', 'advcl'), ('practically', 'advmod'), ('real', 'amod'), ('world', 'pobj'), ('tests', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[solution, identified], [identified, ,], [,, applying], [applying, practically], [practically, real], [real, world], [world, tests], [tests, .]]

>> Trigrams: 
[[solution, identified, ,], [identified, ,, applying], [,, applying, practically], [applying, practically, real], [practically, real, world], [real, world, tests], [world, tests, .]]

>> Noun Phrases are: 
[this solution, it, the real world, it]

>> Named Entities are: 
[] 

------------------- Sentence 5 -------------------

This  process of testing is termed as revision of the problem. 


>> Tokens are: 
[ , process, testing, termed, revision, problem, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('process', 'NOUN'), ('testing', 'NOUN'), ('termed', 'VERB'), ('revision', 'NOUN'), ('problem', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'compound'), ('process', 'nsubjpass'), ('testing', 'pobj'), ('termed', 'ROOT'), ('revision', 'pobj'), ('problem', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[ , process], [process, testing], [testing, termed], [termed, revision], [revision, problem], [problem, .]]

>> Trigrams: 
[[ , process, testing], [process, testing, termed], [testing, termed, revision], [termed, revision, problem], [revision, problem, .]]

>> Noun Phrases are: 
[This  process, testing, revision, the problem]

>> Named Entities are: 
[] 

------------------- Sentence 6 -------------------

Then comes the process of retain where  useful experience is retained for future reuse and the case base is updated by a new learned  case or by modification of some existing cases. 


>> Tokens are: 
[comes, process, retain,  , useful, experience, retained, future, reuse, case, base, updated, new, learned,  , case, modification, existing, cases, .] 

>> PoS Tags are: 
[('comes', 'VERB'), ('process', 'NOUN'), ('retain', 'VERB'), (' ', 'SPACE'), ('useful', 'ADJ'), ('experience', 'NOUN'), ('retained', 'VERB'), ('future', 'ADJ'), ('reuse', 'NOUN'), ('case', 'NOUN'), ('base', 'NOUN'), ('updated', 'VERB'), ('new', 'ADJ'), ('learned', 'VERB'), (' ', 'SPACE'), ('case', 'NOUN'), ('modification', 'NOUN'), ('existing', 'VERB'), ('cases', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('comes', 'ROOT'), ('process', 'nsubj'), ('retain', 'pobj'), (' ', 'nmod'), ('useful', 'amod'), ('experience', 'nsubjpass'), ('retained', 'relcl'), ('future', 'amod'), ('reuse', 'pobj'), ('case', 'compound'), ('base', 'nsubjpass'), ('updated', 'conj'), ('new', 'amod'), ('learned', 'amod'), (' ', 'compound'), ('case', 'pobj'), ('modification', 'pobj'), ('existing', 'amod'), ('cases', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[comes, process], [process, retain], [retain,  ], [ , useful], [useful, experience], [experience, retained], [retained, future], [future, reuse], [reuse, case], [case, base], [base, updated], [updated, new], [new, learned], [learned,  ], [ , case], [case, modification], [modification, existing], [existing, cases], [cases, .]]

>> Trigrams: 
[[comes, process, retain], [process, retain,  ], [retain,  , useful], [ , useful, experience], [useful, experience, retained], [experience, retained, future], [retained, future, reuse], [future, reuse, case], [reuse, case, base], [case, base, updated], [base, updated, new], [updated, new, learned], [new, learned,  ], [learned,  , case], [ , case, modification], [case, modification, existing], [modification, existing, cases], [existing, cases, .]]

>> Noun Phrases are: 
[the process,  useful experience, future reuse, the case base, a new learned  case, modification, some existing cases]

>> Named Entities are: 
[] 

------------------- Sentence 7 -------------------

    Thus we can say that CBR is a four-step process:  1. 


>> Tokens are: 
[    , CBR, -, step, process, :,  , 1, .] 

>> PoS Tags are: 
[('    ', 'SPACE'), ('CBR', 'PROPN'), ('-', 'PUNCT'), ('step', 'NOUN'), ('process', 'NOUN'), (':', 'PUNCT'), (' ', 'SPACE'), ('1', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('    ', 'nsubj'), ('CBR', 'nsubj'), ('-', 'punct'), ('step', 'compound'), ('process', 'attr'), (':', 'punct'), (' ', 'appos'), ('1', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[    , CBR], [CBR, -], [-, step], [step, process], [process, :], [:,  ], [ , 1], [1, .]]

>> Trigrams: 
[[    , CBR, -], [CBR, -, step], [-, step, process], [step, process, :], [process, :,  ], [:,  , 1], [ , 1, .]]

>> Noun Phrases are: 
[we, CBR, a four-step process]

>> Named Entities are: 
[('CBR', 'ORG'), ('four', 'CARDINAL'), ('1', 'CARDINAL')] 

------------------- Sentence 8 -------------------

RETRIEVE    2. 


>> Tokens are: 
[RETRIEVE,    , 2, .] 

>> PoS Tags are: 
[('RETRIEVE', 'NOUN'), ('   ', 'SPACE'), ('2', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('RETRIEVE', 'ROOT'), ('   ', 'nummod'), ('2', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[RETRIEVE,    ], [   , 2], [2, .]]

>> Trigrams: 
[[RETRIEVE,    , 2], [   , 2, .]]

>> Noun Phrases are: 
[RETRIEVE]

>> Named Entities are: 
[] 

------------------- Sentence 9 -------------------

REUSE 


>> Tokens are: 
[REUSE] 

>> PoS Tags are: 
[('REUSE', 'VERB')] 

>> Dependency Tags are: 
[('REUSE', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 26 =================================

Yogesh Singh, Pradeep Kumar Bhatia & Omprakash Sangwan  

------------------- Sentence 1 -------------------

Yogesh Singh, Pradeep Kumar Bhatia & Omprakash Sangwan   


>> Tokens are: 
[Yogesh, Singh, ,, Pradeep, Kumar, Bhatia, &, Omprakash, Sangwan,  ] 

>> PoS Tags are: 
[('Yogesh', 'PROPN'), ('Singh', 'PROPN'), (',', 'PUNCT'), ('Pradeep', 'PROPN'), ('Kumar', 'PROPN'), ('Bhatia', 'PROPN'), ('&', 'CCONJ'), ('Omprakash', 'PROPN'), ('Sangwan', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Yogesh', 'compound'), ('Singh', 'ROOT'), (',', 'punct'), ('Pradeep', 'compound'), ('Kumar', 'compound'), ('Bhatia', 'conj'), ('&', 'cc'), ('Omprakash', 'compound'), ('Sangwan', 'conj'), (' ', 'punct')]

>> Bigrams: 
[[Yogesh, Singh], [Singh, ,], [,, Pradeep], [Pradeep, Kumar], [Kumar, Bhatia], [Bhatia, &], [&, Omprakash], [Omprakash, Sangwan], [Sangwan,  ]]

>> Trigrams: 
[[Yogesh, Singh, ,], [Singh, ,, Pradeep], [,, Pradeep, Kumar], [Pradeep, Kumar, Bhatia], [Kumar, Bhatia, &], [Bhatia, &, Omprakash], [&, Omprakash, Sangwan], [Omprakash, Sangwan,  ]]

>> Noun Phrases are: 
[Yogesh Singh, Pradeep Kumar Bhatia, Omprakash Sangwan]

>> Named Entities are: 
[('Yogesh Singh', 'PERSON'), ('Kumar Bhatia & Omprakash Sangwan', 'ORG')] 


================================ Paragraph 27 =================================

International Journal of Computer Science and Security, Volume (1) : Issue (1) 74  

------------------- Sentence 1 -------------------

International Journal of Computer Science and Security, Volume (1) : Issue (1) 74   


>> Tokens are: 
[International, Journal, Computer, Science, Security, ,, Volume, (, 1, ), :, Issue, (, 1, ), 74,  ] 

>> PoS Tags are: 
[('International', 'PROPN'), ('Journal', 'PROPN'), ('Computer', 'PROPN'), ('Science', 'PROPN'), ('Security', 'PROPN'), (',', 'PUNCT'), ('Volume', 'NOUN'), ('(', 'PUNCT'), ('1', 'NUM'), (')', 'PUNCT'), (':', 'PUNCT'), ('Issue', 'NOUN'), ('(', 'PUNCT'), ('1', 'NUM'), (')', 'PUNCT'), ('74', 'NUM'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('International', 'compound'), ('Journal', 'ROOT'), ('Computer', 'compound'), ('Science', 'pobj'), ('Security', 'conj'), (',', 'punct'), ('Volume', 'appos'), ('(', 'punct'), ('1', 'appos'), (')', 'punct'), (':', 'punct'), ('Issue', 'appos'), ('(', 'punct'), ('1', 'appos'), (')', 'punct'), ('74', 'nummod'), (' ', 'appos')]

>> Bigrams: 
[[International, Journal], [Journal, Computer], [Computer, Science], [Science, Security], [Security, ,], [,, Volume], [Volume, (], [(, 1], [1, )], [), :], [:, Issue], [Issue, (], [(, 1], [1, )], [), 74], [74,  ]]

>> Trigrams: 
[[International, Journal, Computer], [Journal, Computer, Science], [Computer, Science, Security], [Science, Security, ,], [Security, ,, Volume], [,, Volume, (], [Volume, (, 1], [(, 1, )], [1, ), :], [), :, Issue], [:, Issue, (], [Issue, (, 1], [(, 1, )], [1, ), 74], [), 74,  ]]

>> Noun Phrases are: 
[International Journal, Computer Science, Security, Volume, Issue]

>> Named Entities are: 
[('International Journal of Computer Science and Security, Volume', 'ORG'), ('1', 'CARDINAL')] 


================================ Paragraph 28 =================================

3. REVISE  4. RETAIN  

------------------- Sentence 1 -------------------

3. 


>> Tokens are: 
[3, .] 

>> PoS Tags are: 
[('3', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('3', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[3, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('3', 'CARDINAL')] 

------------------- Sentence 2 -------------------

REVISE  4. 


>> Tokens are: 
[REVISE,  , 4, .] 

>> PoS Tags are: 
[('REVISE', 'PROPN'), (' ', 'SPACE'), ('4', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('REVISE', 'ROOT'), (' ', 'nummod'), ('4', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[REVISE,  ], [ , 4], [4, .]]

>> Trigrams: 
[[REVISE,  , 4], [ , 4, .]]

>> Noun Phrases are: 
[REVISE]

>> Named Entities are: 
[('4', 'CARDINAL')] 

------------------- Sentence 3 -------------------

RETAIN   


>> Tokens are: 
[RETAIN,  ] 

>> PoS Tags are: 
[('RETAIN', 'ADP'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('RETAIN', 'ROOT'), (' ', 'pobj')]

>> Bigrams: 
[[RETAIN,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 29 =================================

  The figure: 4 give a brief illustration of the CBR Cycle:  

------------------- Sentence 1 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

The figure: 4 give a brief illustration of the CBR Cycle:   


>> Tokens are: 
[figure, :, 4, brief, illustration, CBR, Cycle, :,  ] 

>> PoS Tags are: 
[('figure', 'NOUN'), (':', 'PUNCT'), ('4', 'NUM'), ('brief', 'ADJ'), ('illustration', 'NOUN'), ('CBR', 'PROPN'), ('Cycle', 'NOUN'), (':', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('figure', 'nsubj'), (':', 'punct'), ('4', 'appos'), ('brief', 'amod'), ('illustration', 'dobj'), ('CBR', 'compound'), ('Cycle', 'pobj'), (':', 'punct'), (' ', 'dobj')]

>> Bigrams: 
[[figure, :], [:, 4], [4, brief], [brief, illustration], [illustration, CBR], [CBR, Cycle], [Cycle, :], [:,  ]]

>> Trigrams: 
[[figure, :, 4], [:, 4, brief], [4, brief, illustration], [brief, illustration, CBR], [illustration, CBR, Cycle], [CBR, Cycle, :], [Cycle, :,  ]]

>> Noun Phrases are: 
[The figure, a brief illustration, the CBR Cycle]

>> Named Entities are: 
[('4', 'CARDINAL')] 


================================ Paragraph 30 =================================

    

------------------- Sentence 1 -------------------

     


>> Tokens are: 
[    ] 

>> PoS Tags are: 
[('    ', 'SPACE')] 

>> Dependency Tags are: 
[('    ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 31 =================================

    

------------------- Sentence 1 -------------------

     


>> Tokens are: 
[    ] 

>> PoS Tags are: 
[('    ', 'SPACE')] 

>> Dependency Tags are: 
[('    ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 32 =================================

It is clear from the figure that general knowledge plays a crucial in CBR. It supports all the CBR  processes. General knowledge here implies domain dependent knowledge as opposed to specific  knowledge embodied by cases. For instance in diagnosing a patient by retrieving and reusing the  case of a previous patient, a model of anatomy together with casual relationships between  pathological states may constitute the general knowledge used by a CBR system.  

------------------- Sentence 1 -------------------

It is clear from the figure that general knowledge plays a crucial in CBR. 


>> Tokens are: 
[clear, figure, general, knowledge, plays, crucial, CBR, .] 

>> PoS Tags are: 
[('clear', 'ADJ'), ('figure', 'NOUN'), ('general', 'ADJ'), ('knowledge', 'NOUN'), ('plays', 'VERB'), ('crucial', 'ADJ'), ('CBR', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('clear', 'acomp'), ('figure', 'pobj'), ('general', 'amod'), ('knowledge', 'nsubj'), ('plays', 'acl'), ('crucial', 'dobj'), ('CBR', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[clear, figure], [figure, general], [general, knowledge], [knowledge, plays], [plays, crucial], [crucial, CBR], [CBR, .]]

>> Trigrams: 
[[clear, figure, general], [figure, general, knowledge], [general, knowledge, plays], [knowledge, plays, crucial], [plays, crucial, CBR], [crucial, CBR, .]]

>> Noun Phrases are: 
[It, the figure, general knowledge, CBR]

>> Named Entities are: 
[('CBR', 'ORG')] 

------------------- Sentence 2 -------------------

It supports all the CBR  processes. 


>> Tokens are: 
[supports, CBR,  , processes, .] 

>> PoS Tags are: 
[('supports', 'VERB'), ('CBR', 'PROPN'), (' ', 'SPACE'), ('processes', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('supports', 'ROOT'), ('CBR', 'nmod'), (' ', 'nummod'), ('processes', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[supports, CBR], [CBR,  ], [ , processes], [processes, .]]

>> Trigrams: 
[[supports, CBR,  ], [CBR,  , processes], [ , processes, .]]

>> Noun Phrases are: 
[It, all the CBR  processes]

>> Named Entities are: 
[('CBR', 'ORG')] 

------------------- Sentence 3 -------------------

General knowledge here implies domain dependent knowledge as opposed to specific  knowledge embodied by cases. 


>> Tokens are: 
[General, knowledge, implies, domain, dependent, knowledge, opposed, specific,  , knowledge, embodied, cases, .] 

>> PoS Tags are: 
[('General', 'ADJ'), ('knowledge', 'NOUN'), ('implies', 'VERB'), ('domain', 'NOUN'), ('dependent', 'ADJ'), ('knowledge', 'NOUN'), ('opposed', 'VERB'), ('specific', 'ADJ'), (' ', 'SPACE'), ('knowledge', 'NOUN'), ('embodied', 'VERB'), ('cases', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('General', 'amod'), ('knowledge', 'nsubj'), ('implies', 'ROOT'), ('domain', 'xcomp'), ('dependent', 'amod'), ('knowledge', 'dobj'), ('opposed', 'advcl'), ('specific', 'amod'), (' ', 'compound'), ('knowledge', 'pobj'), ('embodied', 'acl'), ('cases', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[General, knowledge], [knowledge, implies], [implies, domain], [domain, dependent], [dependent, knowledge], [knowledge, opposed], [opposed, specific], [specific,  ], [ , knowledge], [knowledge, embodied], [embodied, cases], [cases, .]]

>> Trigrams: 
[[General, knowledge, implies], [knowledge, implies, domain], [implies, domain, dependent], [domain, dependent, knowledge], [dependent, knowledge, opposed], [knowledge, opposed, specific], [opposed, specific,  ], [specific,  , knowledge], [ , knowledge, embodied], [knowledge, embodied, cases], [embodied, cases, .]]

>> Noun Phrases are: 
[General knowledge, dependent knowledge, specific  knowledge, cases]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

For instance in diagnosing a patient by retrieving and reusing the  case of a previous patient, a model of anatomy together with casual relationships between  pathological states may constitute the general knowledge used by a CBR system.   


>> Tokens are: 
[instance, diagnosing, patient, retrieving, reusing,  , case, previous, patient, ,, model, anatomy, casual, relationships,  , pathological, states, constitute, general, knowledge, CBR, system, .,  ] 

>> PoS Tags are: 
[('instance', 'NOUN'), ('diagnosing', 'VERB'), ('patient', 'NOUN'), ('retrieving', 'VERB'), ('reusing', 'VERB'), (' ', 'SPACE'), ('case', 'NOUN'), ('previous', 'ADJ'), ('patient', 'NOUN'), (',', 'PUNCT'), ('model', 'NOUN'), ('anatomy', 'NOUN'), ('casual', 'ADJ'), ('relationships', 'NOUN'), (' ', 'SPACE'), ('pathological', 'ADJ'), ('states', 'NOUN'), ('constitute', 'VERB'), ('general', 'ADJ'), ('knowledge', 'NOUN'), ('CBR', 'PROPN'), ('system', 'NOUN'), ('.', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('instance', 'pobj'), ('diagnosing', 'pcomp'), ('patient', 'dobj'), ('retrieving', 'pcomp'), ('reusing', 'conj'), (' ', 'compound'), ('case', 'dobj'), ('previous', 'amod'), ('patient', 'pobj'), (',', 'punct'), ('model', 'nsubj'), ('anatomy', 'pobj'), ('casual', 'amod'), ('relationships', 'pobj'), (' ', 'nmod'), ('pathological', 'amod'), ('states', 'pobj'), ('constitute', 'ROOT'), ('general', 'amod'), ('knowledge', 'dobj'), ('CBR', 'compound'), ('system', 'pobj'), ('.', 'punct'), (' ', 'dobj')]

>> Bigrams: 
[[instance, diagnosing], [diagnosing, patient], [patient, retrieving], [retrieving, reusing], [reusing,  ], [ , case], [case, previous], [previous, patient], [patient, ,], [,, model], [model, anatomy], [anatomy, casual], [casual, relationships], [relationships,  ], [ , pathological], [pathological, states], [states, constitute], [constitute, general], [general, knowledge], [knowledge, CBR], [CBR, system], [system, .], [.,  ]]

>> Trigrams: 
[[instance, diagnosing, patient], [diagnosing, patient, retrieving], [patient, retrieving, reusing], [retrieving, reusing,  ], [reusing,  , case], [ , case, previous], [case, previous, patient], [previous, patient, ,], [patient, ,, model], [,, model, anatomy], [model, anatomy, casual], [anatomy, casual, relationships], [casual, relationships,  ], [relationships,  , pathological], [ , pathological, states], [pathological, states, constitute], [states, constitute, general], [constitute, general, knowledge], [general, knowledge, CBR], [knowledge, CBR, system], [CBR, system, .], [system, .,  ]]

>> Noun Phrases are: 
[instance, a patient, the  case, a previous patient, a model, anatomy, casual relationships,  pathological states, the general knowledge, a CBR system]

>> Named Entities are: 
[('CBR', 'ORG')] 


================================ Paragraph 33 =================================

  3.2   Fundamentals of Case Based Reasoning  

------------------- Sentence 1 -------------------

  3.2   Fundamentals of Case Based Reasoning   


>> Tokens are: 
[  , 3.2,   , Fundamentals, Case, Based, Reasoning,  ] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('3.2', 'NUM'), ('  ', 'SPACE'), ('Fundamentals', 'NOUN'), ('Case', 'NOUN'), ('Based', 'VERB'), ('Reasoning', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('3.2', 'nummod'), ('  ', 'appos'), ('Fundamentals', 'appos'), ('Case', 'pobj'), ('Based', 'prep'), ('Reasoning', 'appos'), (' ', 'nummod')]

>> Bigrams: 
[[  , 3.2], [3.2,   ], [  , Fundamentals], [Fundamentals, Case], [Case, Based], [Based, Reasoning], [Reasoning,  ]]

>> Trigrams: 
[[  , 3.2,   ], [3.2,   , Fundamentals], [  , Fundamentals, Case], [Fundamentals, Case, Based], [Case, Based, Reasoning], [Based, Reasoning,  ]]

>> Noun Phrases are: 
[Fundamentals, Case, Reasoning]

>> Named Entities are: 
[('3.2', 'CARDINAL')] 


================================ Paragraph 34 =================================

  3.2.1   Case Retrieval   The process of retrieval in CBR cycle begins with the problem description and ends when the  best possible case from the set of previous cases has been obtained. The subtasks involved in  this particular step include identifying features, matching, searching and selecting the appropriate  ones executed in that order. The identification task finds a set of relevant problem descriptors,  then the matching task returns those cases that are similar to the new case and finally the  selection task chooses the best possible match. Among well-known methods for case retrieval  are: nearest neighbor, induction, knowledge guided induction and template retrieval. These  

------------------- Sentence 1 -------------------

  3.2.1   Case Retrieval    


>> Tokens are: 
[  , 3.2.1,   , Case, Retrieval,   ] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('3.2.1', 'NUM'), ('  ', 'SPACE'), ('Case', 'PROPN'), ('Retrieval', 'PROPN'), ('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'nsubj'), ('3.2.1', 'nummod'), ('  ', 'ROOT'), ('Case', 'compound'), ('Retrieval', 'appos'), ('  ', 'punct')]

>> Bigrams: 
[[  , 3.2.1], [3.2.1,   ], [  , Case], [Case, Retrieval], [Retrieval,   ]]

>> Trigrams: 
[[  , 3.2.1,   ], [3.2.1,   , Case], [  , Case, Retrieval], [Case, Retrieval,   ]]

>> Noun Phrases are: 
[Case Retrieval]

>> Named Entities are: 
[('3.2.1', 'CARDINAL'), ('Case Retrieval', 'ORG')] 

------------------- Sentence 2 -------------------

The process of retrieval in CBR cycle begins with the problem description and ends when the  best possible case from the set of previous cases has been obtained. 


>> Tokens are: 
[process, retrieval, CBR, cycle, begins, problem, description, ends,  , best, possible, case, set, previous, cases, obtained, .] 

>> PoS Tags are: 
[('process', 'NOUN'), ('retrieval', 'NOUN'), ('CBR', 'PROPN'), ('cycle', 'NOUN'), ('begins', 'VERB'), ('problem', 'NOUN'), ('description', 'NOUN'), ('ends', 'VERB'), (' ', 'SPACE'), ('best', 'ADJ'), ('possible', 'ADJ'), ('case', 'NOUN'), ('set', 'NOUN'), ('previous', 'ADJ'), ('cases', 'NOUN'), ('obtained', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('process', 'nsubj'), ('retrieval', 'pobj'), ('CBR', 'compound'), ('cycle', 'pobj'), ('begins', 'ROOT'), ('problem', 'compound'), ('description', 'pobj'), ('ends', 'conj'), (' ', 'nmod'), ('best', 'advmod'), ('possible', 'amod'), ('case', 'nsubjpass'), ('set', 'pobj'), ('previous', 'amod'), ('cases', 'pobj'), ('obtained', 'advcl'), ('.', 'punct')]

>> Bigrams: 
[[process, retrieval], [retrieval, CBR], [CBR, cycle], [cycle, begins], [begins, problem], [problem, description], [description, ends], [ends,  ], [ , best], [best, possible], [possible, case], [case, set], [set, previous], [previous, cases], [cases, obtained], [obtained, .]]

>> Trigrams: 
[[process, retrieval, CBR], [retrieval, CBR, cycle], [CBR, cycle, begins], [cycle, begins, problem], [begins, problem, description], [problem, description, ends], [description, ends,  ], [ends,  , best], [ , best, possible], [best, possible, case], [possible, case, set], [case, set, previous], [set, previous, cases], [previous, cases, obtained], [cases, obtained, .]]

>> Noun Phrases are: 
[The process, retrieval, CBR cycle, the problem description, the  best possible case, the set, previous cases]

>> Named Entities are: 
[('CBR', 'ORG')] 

------------------- Sentence 3 -------------------

The subtasks involved in  this particular step include identifying features, matching, searching and selecting the appropriate  ones executed in that order. 


>> Tokens are: 
[subtasks, involved,  , particular, step, include, identifying, features, ,, matching, ,, searching, selecting, appropriate,  , ones, executed, order, .] 

>> PoS Tags are: 
[('subtasks', 'NOUN'), ('involved', 'VERB'), (' ', 'SPACE'), ('particular', 'ADJ'), ('step', 'NOUN'), ('include', 'VERB'), ('identifying', 'VERB'), ('features', 'NOUN'), (',', 'PUNCT'), ('matching', 'NOUN'), (',', 'PUNCT'), ('searching', 'VERB'), ('selecting', 'VERB'), ('appropriate', 'ADJ'), (' ', 'SPACE'), ('ones', 'NOUN'), ('executed', 'VERB'), ('order', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('subtasks', 'nsubj'), ('involved', 'acl'), (' ', 'pobj'), ('particular', 'amod'), ('step', 'appos'), ('include', 'ROOT'), ('identifying', 'xcomp'), ('features', 'dobj'), (',', 'punct'), ('matching', 'conj'), (',', 'punct'), ('searching', 'conj'), ('selecting', 'conj'), ('appropriate', 'amod'), (' ', 'amod'), ('ones', 'dobj'), ('executed', 'acl'), ('order', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[subtasks, involved], [involved,  ], [ , particular], [particular, step], [step, include], [include, identifying], [identifying, features], [features, ,], [,, matching], [matching, ,], [,, searching], [searching, selecting], [selecting, appropriate], [appropriate,  ], [ , ones], [ones, executed], [executed, order], [order, .]]

>> Trigrams: 
[[subtasks, involved,  ], [involved,  , particular], [ , particular, step], [particular, step, include], [step, include, identifying], [include, identifying, features], [identifying, features, ,], [features, ,, matching], [,, matching, ,], [matching, ,, searching], [,, searching, selecting], [searching, selecting, appropriate], [selecting, appropriate,  ], [appropriate,  , ones], [ , ones, executed], [ones, executed, order], [executed, order, .]]

>> Noun Phrases are: 
[The subtasks, this particular step, features, matching, the appropriate  ones, that order]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

The identification task finds a set of relevant problem descriptors,  then the matching task returns those cases that are similar to the new case and finally the  selection task chooses the best possible match. 


>> Tokens are: 
[identification, task, finds, set, relevant, problem, descriptors, ,,  , matching, task, returns, cases, similar, new, case, finally,  , selection, task, chooses, best, possible, match, .] 

>> PoS Tags are: 
[('identification', 'NOUN'), ('task', 'NOUN'), ('finds', 'VERB'), ('set', 'NOUN'), ('relevant', 'ADJ'), ('problem', 'NOUN'), ('descriptors', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('matching', 'NOUN'), ('task', 'NOUN'), ('returns', 'VERB'), ('cases', 'NOUN'), ('similar', 'ADJ'), ('new', 'ADJ'), ('case', 'NOUN'), ('finally', 'ADV'), (' ', 'SPACE'), ('selection', 'NOUN'), ('task', 'NOUN'), ('chooses', 'VERB'), ('best', 'ADJ'), ('possible', 'ADJ'), ('match', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('identification', 'compound'), ('task', 'nsubj'), ('finds', 'ROOT'), ('set', 'dobj'), ('relevant', 'amod'), ('problem', 'compound'), ('descriptors', 'pobj'), (',', 'punct'), (' ', 'nsubj'), ('matching', 'compound'), ('task', 'nsubj'), ('returns', 'ccomp'), ('cases', 'dobj'), ('similar', 'acomp'), ('new', 'amod'), ('case', 'pobj'), ('finally', 'advmod'), (' ', 'compound'), ('selection', 'compound'), ('task', 'nsubj'), ('chooses', 'conj'), ('best', 'advmod'), ('possible', 'amod'), ('match', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[identification, task], [task, finds], [finds, set], [set, relevant], [relevant, problem], [problem, descriptors], [descriptors, ,], [,,  ], [ , matching], [matching, task], [task, returns], [returns, cases], [cases, similar], [similar, new], [new, case], [case, finally], [finally,  ], [ , selection], [selection, task], [task, chooses], [chooses, best], [best, possible], [possible, match], [match, .]]

>> Trigrams: 
[[identification, task, finds], [task, finds, set], [finds, set, relevant], [set, relevant, problem], [relevant, problem, descriptors], [problem, descriptors, ,], [descriptors, ,,  ], [,,  , matching], [ , matching, task], [matching, task, returns], [task, returns, cases], [returns, cases, similar], [cases, similar, new], [similar, new, case], [new, case, finally], [case, finally,  ], [finally,  , selection], [ , selection, task], [selection, task, chooses], [task, chooses, best], [chooses, best, possible], [best, possible, match], [possible, match, .]]

>> Noun Phrases are: 
[The identification task, a set, relevant problem descriptors, the matching task, those cases, the new case, the  selection task, the best possible match]

>> Named Entities are: 
[] 

------------------- Sentence 5 -------------------

Among well-known methods for case retrieval  are: nearest neighbor, induction, knowledge guided induction and template retrieval. 


>> Tokens are: 
[-, known, methods, case, retrieval,  , :, nearest, neighbor, ,, induction, ,, knowledge, guided, induction, template, retrieval, .] 

>> PoS Tags are: 
[('-', 'PUNCT'), ('known', 'VERB'), ('methods', 'NOUN'), ('case', 'NOUN'), ('retrieval', 'NOUN'), (' ', 'SPACE'), (':', 'PUNCT'), ('nearest', 'ADJ'), ('neighbor', 'NOUN'), (',', 'PUNCT'), ('induction', 'NOUN'), (',', 'PUNCT'), ('knowledge', 'NOUN'), ('guided', 'VERB'), ('induction', 'NOUN'), ('template', 'NOUN'), ('retrieval', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('-', 'punct'), ('known', 'amod'), ('methods', 'pobj'), ('case', 'compound'), ('retrieval', 'pobj'), (' ', 'nsubj'), (':', 'punct'), ('nearest', 'amod'), ('neighbor', 'attr'), (',', 'punct'), ('induction', 'conj'), (',', 'punct'), ('knowledge', 'npadvmod'), ('guided', 'amod'), ('induction', 'attr'), ('template', 'compound'), ('retrieval', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[-, known], [known, methods], [methods, case], [case, retrieval], [retrieval,  ], [ , :], [:, nearest], [nearest, neighbor], [neighbor, ,], [,, induction], [induction, ,], [,, knowledge], [knowledge, guided], [guided, induction], [induction, template], [template, retrieval], [retrieval, .]]

>> Trigrams: 
[[-, known, methods], [known, methods, case], [methods, case, retrieval], [case, retrieval,  ], [retrieval,  , :], [ , :, nearest], [:, nearest, neighbor], [nearest, neighbor, ,], [neighbor, ,, induction], [,, induction, ,], [induction, ,, knowledge], [,, knowledge, guided], [knowledge, guided, induction], [guided, induction, template], [induction, template, retrieval], [template, retrieval, .]]

>> Noun Phrases are: 
[well-known methods, case retrieval, nearest neighbor, induction, knowledge guided induction, template retrieval]

>> Named Entities are: 
[] 

------------------- Sentence 6 -------------------

These   


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 35 =================================

methods can be used alone or combined into hybrid retrieval strategies.  1) Nearest Neighbour  (NN)                                                                                                        NN approach involves the assessment of similarity between stored cases and the new input case,  based on matching a weighted sum of features.  2) Induction                                                                                                                             This involves generating a decision tree structure to organize the cases in memory by  determining which features do the best job in discriminating cases.   3) Knowledge guided induction                                                                                                 By applying knowledge to the induction process by manually identifying case features that are  known or thought to affect the primary case feature we perform case retrieval. This approach is  frequently used in conjunction with other techniques, because the explanatory knowledge is not  always readily available for large case bases.  4) Template retrieval                                                                                                      

------------------- Sentence 1 -------------------

methods can be used alone or combined into hybrid retrieval strategies. 


>> Tokens are: 
[methods, combined, hybrid, retrieval, strategies, .] 

>> PoS Tags are: 
[('methods', 'NOUN'), ('combined', 'VERB'), ('hybrid', 'ADJ'), ('retrieval', 'NOUN'), ('strategies', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('methods', 'nsubjpass'), ('combined', 'conj'), ('hybrid', 'amod'), ('retrieval', 'compound'), ('strategies', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[methods, combined], [combined, hybrid], [hybrid, retrieval], [retrieval, strategies], [strategies, .]]

>> Trigrams: 
[[methods, combined, hybrid], [combined, hybrid, retrieval], [hybrid, retrieval, strategies], [retrieval, strategies, .]]

>> Noun Phrases are: 
[methods, hybrid retrieval strategies]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

 1) Nearest Neighbour  (NN)                                                                                                        NN approach involves the assessment of similarity between stored cases and the new input case,  based on matching a weighted sum of features. 


>> Tokens are: 
[ , 1, ), Nearest, Neighbour,  , (, NN, ),                                                                                                        , NN, approach, involves, assessment, similarity, stored, cases, new, input, case, ,,  , based, matching, weighted, sum, features, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('1', 'NUM'), (')', 'PUNCT'), ('Nearest', 'PROPN'), ('Neighbour', 'PROPN'), (' ', 'SPACE'), ('(', 'PUNCT'), ('NN', 'PROPN'), (')', 'PUNCT'), ('                                                                                                       ', 'SPACE'), ('NN', 'PROPN'), ('approach', 'NOUN'), ('involves', 'VERB'), ('assessment', 'NOUN'), ('similarity', 'NOUN'), ('stored', 'VERB'), ('cases', 'NOUN'), ('new', 'ADJ'), ('input', 'NOUN'), ('case', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('based', 'VERB'), ('matching', 'VERB'), ('weighted', 'ADJ'), ('sum', 'NOUN'), ('features', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'nmod'), ('1', 'nummod'), (')', 'punct'), ('Nearest', 'compound'), ('Neighbour', 'appos'), (' ', 'appos'), ('(', 'punct'), ('NN', 'nmod'), (')', 'punct'), ('                                                                                                       ', 'compound'), ('NN', 'compound'), ('approach', 'nsubj'), ('involves', 'ROOT'), ('assessment', 'dobj'), ('similarity', 'pobj'), ('stored', 'amod'), ('cases', 'pobj'), ('new', 'amod'), ('input', 'compound'), ('case', 'conj'), (',', 'punct'), (' ', 'appos'), ('based', 'acl'), ('matching', 'pcomp'), ('weighted', 'amod'), ('sum', 'dobj'), ('features', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[ , 1], [1, )], [), Nearest], [Nearest, Neighbour], [Neighbour,  ], [ , (], [(, NN], [NN, )], [),                                                                                                        ], [                                                                                                       , NN], [NN, approach], [approach, involves], [involves, assessment], [assessment, similarity], [similarity, stored], [stored, cases], [cases, new], [new, input], [input, case], [case, ,], [,,  ], [ , based], [based, matching], [matching, weighted], [weighted, sum], [sum, features], [features, .]]

>> Trigrams: 
[[ , 1, )], [1, ), Nearest], [), Nearest, Neighbour], [Nearest, Neighbour,  ], [Neighbour,  , (], [ , (, NN], [(, NN, )], [NN, ),                                                                                                        ], [),                                                                                                        , NN], [                                                                                                       , NN, approach], [NN, approach, involves], [approach, involves, assessment], [involves, assessment, similarity], [assessment, similarity, stored], [similarity, stored, cases], [stored, cases, new], [cases, new, input], [new, input, case], [input, case, ,], [case, ,,  ], [,,  , based], [ , based, matching], [based, matching, weighted], [matching, weighted, sum], [weighted, sum, features], [sum, features, .]]

>> Noun Phrases are: 
[Nearest Neighbour, the assessment, similarity, stored cases, the new input case, a weighted sum, features]

>> Named Entities are: 
[('1', 'CARDINAL')] 

------------------- Sentence 3 -------------------

 2) Induction                                                                                                                              


>> Tokens are: 
[ , 2, ), Induction,                                                                                                                             ] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('2', 'NUM'), (')', 'PUNCT'), ('Induction', 'PROPN'), ('                                                                                                                            ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT'), ('2', 'nummod'), (')', 'punct'), ('Induction', 'compound'), ('                                                                                                                            ', 'appos')]

>> Bigrams: 
[[ , 2], [2, )], [), Induction], [Induction,                                                                                                                             ]]

>> Trigrams: 
[[ , 2, )], [2, ), Induction], [), Induction,                                                                                                                             ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('2', 'CARDINAL'), ('Induction                                                                                                                             ', 'PERSON')] 

------------------- Sentence 4 -------------------

This involves generating a decision tree structure to organize the cases in memory by  determining which features do the best job in discriminating cases. 


>> Tokens are: 
[involves, generating, decision, tree, structure, organize, cases, memory,  , determining, features, best, job, discriminating, cases, .] 

>> PoS Tags are: 
[('involves', 'VERB'), ('generating', 'VERB'), ('decision', 'NOUN'), ('tree', 'NOUN'), ('structure', 'NOUN'), ('organize', 'VERB'), ('cases', 'NOUN'), ('memory', 'NOUN'), (' ', 'SPACE'), ('determining', 'VERB'), ('features', 'NOUN'), ('best', 'ADJ'), ('job', 'NOUN'), ('discriminating', 'VERB'), ('cases', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('involves', 'ROOT'), ('generating', 'xcomp'), ('decision', 'compound'), ('tree', 'compound'), ('structure', 'dobj'), ('organize', 'advcl'), ('cases', 'dobj'), ('memory', 'pobj'), (' ', 'pobj'), ('determining', 'acl'), ('features', 'nsubj'), ('best', 'amod'), ('job', 'dobj'), ('discriminating', 'amod'), ('cases', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[involves, generating], [generating, decision], [decision, tree], [tree, structure], [structure, organize], [organize, cases], [cases, memory], [memory,  ], [ , determining], [determining, features], [features, best], [best, job], [job, discriminating], [discriminating, cases], [cases, .]]

>> Trigrams: 
[[involves, generating, decision], [generating, decision, tree], [decision, tree, structure], [tree, structure, organize], [structure, organize, cases], [organize, cases, memory], [cases, memory,  ], [memory,  , determining], [ , determining, features], [determining, features, best], [features, best, job], [best, job, discriminating], [job, discriminating, cases], [discriminating, cases, .]]

>> Noun Phrases are: 
[a decision tree structure, the cases, memory, which features, the best job, discriminating cases]

>> Named Entities are: 
[] 

------------------- Sentence 5 -------------------

  3) Knowledge guided induction                                                                                                 By applying knowledge to the induction process by manually identifying case features that are  known or thought to affect the primary case feature we perform case retrieval. 


>> Tokens are: 
[  , 3, ), Knowledge, guided, induction,                                                                                                 , applying, knowledge, induction, process, manually, identifying, case, features,  , known, thought, affect, primary, case, feature, perform, case, retrieval, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('3', 'NUM'), (')', 'PUNCT'), ('Knowledge', 'PROPN'), ('guided', 'VERB'), ('induction', 'NOUN'), ('                                                                                                ', 'SPACE'), ('applying', 'VERB'), ('knowledge', 'NOUN'), ('induction', 'NOUN'), ('process', 'NOUN'), ('manually', 'ADV'), ('identifying', 'VERB'), ('case', 'NOUN'), ('features', 'NOUN'), (' ', 'SPACE'), ('known', 'VERB'), ('thought', 'VERB'), ('affect', 'VERB'), ('primary', 'ADJ'), ('case', 'NOUN'), ('feature', 'NOUN'), ('perform', 'VERB'), ('case', 'NOUN'), ('retrieval', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'nmod'), ('3', 'nummod'), (')', 'punct'), ('Knowledge', 'nsubj'), ('guided', 'ROOT'), ('induction', 'compound'), ('                                                                                                ', 'dobj'), ('applying', 'pcomp'), ('knowledge', 'dobj'), ('induction', 'compound'), ('process', 'pobj'), ('manually', 'advmod'), ('identifying', 'pcomp'), ('case', 'compound'), ('features', 'dobj'), (' ', 'dep'), ('known', 'relcl'), ('thought', 'conj'), ('affect', 'xcomp'), ('primary', 'amod'), ('case', 'compound'), ('feature', 'dobj'), ('perform', 'relcl'), ('case', 'compound'), ('retrieval', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[  , 3], [3, )], [), Knowledge], [Knowledge, guided], [guided, induction], [induction,                                                                                                 ], [                                                                                                , applying], [applying, knowledge], [knowledge, induction], [induction, process], [process, manually], [manually, identifying], [identifying, case], [case, features], [features,  ], [ , known], [known, thought], [thought, affect], [affect, primary], [primary, case], [case, feature], [feature, perform], [perform, case], [case, retrieval], [retrieval, .]]

>> Trigrams: 
[[  , 3, )], [3, ), Knowledge], [), Knowledge, guided], [Knowledge, guided, induction], [guided, induction,                                                                                                 ], [induction,                                                                                                 , applying], [                                                                                                , applying, knowledge], [applying, knowledge, induction], [knowledge, induction, process], [induction, process, manually], [process, manually, identifying], [manually, identifying, case], [identifying, case, features], [case, features,  ], [features,  , known], [ , known, thought], [known, thought, affect], [thought, affect, primary], [affect, primary, case], [primary, case, feature], [case, feature, perform], [feature, perform, case], [perform, case, retrieval], [case, retrieval, .]]

>> Noun Phrases are: 
[  3) Knowledge, knowledge, the induction process, case features, the primary case feature, we, case retrieval]

>> Named Entities are: 
[('3', 'CARDINAL')] 

------------------- Sentence 6 -------------------

This approach is  frequently used in conjunction with other techniques, because the explanatory knowledge is not  always readily available for large case bases. 


>> Tokens are: 
[approach,  , frequently, conjunction, techniques, ,, explanatory, knowledge,  , readily, available, large, case, bases, .] 

>> PoS Tags are: 
[('approach', 'NOUN'), (' ', 'SPACE'), ('frequently', 'ADV'), ('conjunction', 'NOUN'), ('techniques', 'NOUN'), (',', 'PUNCT'), ('explanatory', 'ADJ'), ('knowledge', 'NOUN'), (' ', 'SPACE'), ('readily', 'ADV'), ('available', 'ADJ'), ('large', 'ADJ'), ('case', 'NOUN'), ('bases', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('approach', 'nsubjpass'), (' ', 'nsubj'), ('frequently', 'advmod'), ('conjunction', 'pobj'), ('techniques', 'pobj'), (',', 'punct'), ('explanatory', 'amod'), ('knowledge', 'nsubj'), (' ', 'attr'), ('readily', 'advmod'), ('available', 'acomp'), ('large', 'amod'), ('case', 'compound'), ('bases', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[approach,  ], [ , frequently], [frequently, conjunction], [conjunction, techniques], [techniques, ,], [,, explanatory], [explanatory, knowledge], [knowledge,  ], [ , readily], [readily, available], [available, large], [large, case], [case, bases], [bases, .]]

>> Trigrams: 
[[approach,  , frequently], [ , frequently, conjunction], [frequently, conjunction, techniques], [conjunction, techniques, ,], [techniques, ,, explanatory], [,, explanatory, knowledge], [explanatory, knowledge,  ], [knowledge,  , readily], [ , readily, available], [readily, available, large], [available, large, case], [large, case, bases], [case, bases, .]]

>> Noun Phrases are: 
[This approach, conjunction, other techniques, the explanatory knowledge, large case bases]

>> Named Entities are: 
[] 

------------------- Sentence 7 -------------------

 4) Template retrieval                                                                                                       


>> Tokens are: 
[ , 4, ), Template, retrieval,                                                                                                      ] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('4', 'NUM'), (')', 'PUNCT'), ('Template', 'NOUN'), ('retrieval', 'NOUN'), ('                                                                                                     ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT'), ('4', 'nummod'), (')', 'punct'), ('Template', 'compound'), ('retrieval', 'appos'), ('                                                                                                     ', 'appos')]

>> Bigrams: 
[[ , 4], [4, )], [), Template], [Template, retrieval], [retrieval,                                                                                                      ]]

>> Trigrams: 
[[ , 4, )], [4, ), Template], [), Template, retrieval], [Template, retrieval,                                                                                                      ]]

>> Noun Phrases are: 
[Template retrieval]

>> Named Entities are: 
[('4', 'CARDINAL')] 


================================ Paragraph 36 =================================

Yogesh Singh, Pradeep Kumar Bhatia & Omprakash Sangwan  

------------------- Sentence 1 -------------------

Yogesh Singh, Pradeep Kumar Bhatia & Omprakash Sangwan   


>> Tokens are: 
[Yogesh, Singh, ,, Pradeep, Kumar, Bhatia, &, Omprakash, Sangwan,  ] 

>> PoS Tags are: 
[('Yogesh', 'PROPN'), ('Singh', 'PROPN'), (',', 'PUNCT'), ('Pradeep', 'PROPN'), ('Kumar', 'PROPN'), ('Bhatia', 'PROPN'), ('&', 'CCONJ'), ('Omprakash', 'PROPN'), ('Sangwan', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Yogesh', 'compound'), ('Singh', 'ROOT'), (',', 'punct'), ('Pradeep', 'compound'), ('Kumar', 'compound'), ('Bhatia', 'conj'), ('&', 'cc'), ('Omprakash', 'compound'), ('Sangwan', 'conj'), (' ', 'punct')]

>> Bigrams: 
[[Yogesh, Singh], [Singh, ,], [,, Pradeep], [Pradeep, Kumar], [Kumar, Bhatia], [Bhatia, &], [&, Omprakash], [Omprakash, Sangwan], [Sangwan,  ]]

>> Trigrams: 
[[Yogesh, Singh, ,], [Singh, ,, Pradeep], [,, Pradeep, Kumar], [Pradeep, Kumar, Bhatia], [Kumar, Bhatia, &], [Bhatia, &, Omprakash], [&, Omprakash, Sangwan], [Omprakash, Sangwan,  ]]

>> Noun Phrases are: 
[Yogesh Singh, Pradeep Kumar Bhatia, Omprakash Sangwan]

>> Named Entities are: 
[('Yogesh Singh', 'PERSON'), ('Kumar Bhatia & Omprakash Sangwan', 'ORG')] 


================================ Paragraph 37 =================================

International Journal of Computer Science and Security, Volume (1) : Issue (1) 75  

------------------- Sentence 1 -------------------

International Journal of Computer Science and Security, Volume (1) : Issue (1) 75   


>> Tokens are: 
[International, Journal, Computer, Science, Security, ,, Volume, (, 1, ), :, Issue, (, 1, ), 75,  ] 

>> PoS Tags are: 
[('International', 'PROPN'), ('Journal', 'PROPN'), ('Computer', 'PROPN'), ('Science', 'PROPN'), ('Security', 'PROPN'), (',', 'PUNCT'), ('Volume', 'NOUN'), ('(', 'PUNCT'), ('1', 'NUM'), (')', 'PUNCT'), (':', 'PUNCT'), ('Issue', 'NOUN'), ('(', 'PUNCT'), ('1', 'NUM'), (')', 'PUNCT'), ('75', 'NUM'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('International', 'compound'), ('Journal', 'ROOT'), ('Computer', 'compound'), ('Science', 'pobj'), ('Security', 'conj'), (',', 'punct'), ('Volume', 'appos'), ('(', 'punct'), ('1', 'appos'), (')', 'punct'), (':', 'punct'), ('Issue', 'appos'), ('(', 'punct'), ('1', 'appos'), (')', 'punct'), ('75', 'nummod'), (' ', 'appos')]

>> Bigrams: 
[[International, Journal], [Journal, Computer], [Computer, Science], [Science, Security], [Security, ,], [,, Volume], [Volume, (], [(, 1], [1, )], [), :], [:, Issue], [Issue, (], [(, 1], [1, )], [), 75], [75,  ]]

>> Trigrams: 
[[International, Journal, Computer], [Journal, Computer, Science], [Computer, Science, Security], [Science, Security, ,], [Security, ,, Volume], [,, Volume, (], [Volume, (, 1], [(, 1, )], [1, ), :], [), :, Issue], [:, Issue, (], [Issue, (, 1], [(, 1, )], [1, ), 75], [), 75,  ]]

>> Noun Phrases are: 
[International Journal, Computer Science, Security, Volume, Issue]

>> Named Entities are: 
[('International Journal of Computer Science and Security, Volume', 'ORG'), ('1', 'CARDINAL'), ('1', 'CARDINAL')] 


================================ Paragraph 38 =================================

Template retrieval returns all cases that fit within certain criteria often used before other  techniques, such as nearest neighbour, to limit the search space to a relevant section of the  case-base.  

------------------- Sentence 1 -------------------

Template retrieval returns all cases that fit within certain criteria often used before other  techniques, such as nearest neighbour, to limit the search space to a relevant section of the  case-base. 


>> Tokens are: 
[Template, retrieval, returns, cases, fit, certain, criteria,  , techniques, ,, nearest, neighbour, ,, limit, search, space, relevant, section,  , case, -, base, .] 

>> PoS Tags are: 
[('Template', 'ADJ'), ('retrieval', 'NOUN'), ('returns', 'VERB'), ('cases', 'NOUN'), ('fit', 'VERB'), ('certain', 'ADJ'), ('criteria', 'NOUN'), (' ', 'SPACE'), ('techniques', 'NOUN'), (',', 'PUNCT'), ('nearest', 'ADJ'), ('neighbour', 'NOUN'), (',', 'PUNCT'), ('limit', 'VERB'), ('search', 'NOUN'), ('space', 'NOUN'), ('relevant', 'ADJ'), ('section', 'NOUN'), (' ', 'SPACE'), ('case', 'NOUN'), ('-', 'PUNCT'), ('base', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Template', 'amod'), ('retrieval', 'nsubj'), ('returns', 'ROOT'), ('cases', 'dobj'), ('fit', 'relcl'), ('certain', 'amod'), ('criteria', 'pobj'), (' ', 'compound'), ('techniques', 'pobj'), (',', 'punct'), ('nearest', 'amod'), ('neighbour', 'pobj'), (',', 'punct'), ('limit', 'advcl'), ('search', 'compound'), ('space', 'dobj'), ('relevant', 'amod'), ('section', 'pobj'), (' ', 'compound'), ('case', 'compound'), ('-', 'punct'), ('base', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Template, retrieval], [retrieval, returns], [returns, cases], [cases, fit], [fit, certain], [certain, criteria], [criteria,  ], [ , techniques], [techniques, ,], [,, nearest], [nearest, neighbour], [neighbour, ,], [,, limit], [limit, search], [search, space], [space, relevant], [relevant, section], [section,  ], [ , case], [case, -], [-, base], [base, .]]

>> Trigrams: 
[[Template, retrieval, returns], [retrieval, returns, cases], [returns, cases, fit], [cases, fit, certain], [fit, certain, criteria], [certain, criteria,  ], [criteria,  , techniques], [ , techniques, ,], [techniques, ,, nearest], [,, nearest, neighbour], [nearest, neighbour, ,], [neighbour, ,, limit], [,, limit, search], [limit, search, space], [search, space, relevant], [space, relevant, section], [relevant, section,  ], [section,  , case], [ , case, -], [case, -, base], [-, base, .]]

>> Noun Phrases are: 
[Template retrieval, all cases, certain criteria, other  techniques, nearest neighbour, the search space, a relevant section, the  case-base]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 39 =================================

  3.2.2  Case Reuse  This involves obtaining the solved case from a retrieved case. It analyses the differences  between the new case and the past cases and then determines what part of the retrieved case  can be transferred to the new case. CBR is essentially based on the concept of analogy wherein  by analyzing the previous cases we formulate a solution for the new cases [5].   

------------------- Sentence 1 -------------------

  3.2.2   


>> Tokens are: 
[  , 3.2.2,  ] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('3.2.2', 'NUM'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'nmod'), ('3.2.2', 'compound'), (' ', 'ROOT')]

>> Bigrams: 
[[  , 3.2.2], [3.2.2,  ]]

>> Trigrams: 
[[  , 3.2.2,  ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Case Reuse   


>> Tokens are: 
[Case, Reuse,  ] 

>> PoS Tags are: 
[('Case', 'NOUN'), ('Reuse', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Case', 'nsubj'), ('Reuse', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[Case, Reuse], [Reuse,  ]]

>> Trigrams: 
[[Case, Reuse,  ]]

>> Noun Phrases are: 
[Case]

>> Named Entities are: 
[('Case Reuse', 'PERSON')] 

------------------- Sentence 3 -------------------

This involves obtaining the solved case from a retrieved case. 


>> Tokens are: 
[involves, obtaining, solved, case, retrieved, case, .] 

>> PoS Tags are: 
[('involves', 'VERB'), ('obtaining', 'VERB'), ('solved', 'VERB'), ('case', 'NOUN'), ('retrieved', 'VERB'), ('case', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('involves', 'ROOT'), ('obtaining', 'xcomp'), ('solved', 'amod'), ('case', 'dobj'), ('retrieved', 'amod'), ('case', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[involves, obtaining], [obtaining, solved], [solved, case], [case, retrieved], [retrieved, case], [case, .]]

>> Trigrams: 
[[involves, obtaining, solved], [obtaining, solved, case], [solved, case, retrieved], [case, retrieved, case], [retrieved, case, .]]

>> Noun Phrases are: 
[the solved case, a retrieved case]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

It analyses the differences  between the new case and the past cases and then determines what part of the retrieved case  can be transferred to the new case. 


>> Tokens are: 
[analyses, differences,  , new, case, past, cases, determines, retrieved, case,  , transferred, new, case, .] 

>> PoS Tags are: 
[('analyses', 'VERB'), ('differences', 'NOUN'), (' ', 'SPACE'), ('new', 'ADJ'), ('case', 'NOUN'), ('past', 'ADJ'), ('cases', 'NOUN'), ('determines', 'VERB'), ('retrieved', 'VERB'), ('case', 'NOUN'), (' ', 'SPACE'), ('transferred', 'VERB'), ('new', 'ADJ'), ('case', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('analyses', 'ROOT'), ('differences', 'dobj'), (' ', 'appos'), ('new', 'amod'), ('case', 'pobj'), ('past', 'amod'), ('cases', 'conj'), ('determines', 'conj'), ('retrieved', 'amod'), ('case', 'pobj'), (' ', 'nsubjpass'), ('transferred', 'ccomp'), ('new', 'amod'), ('case', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[analyses, differences], [differences,  ], [ , new], [new, case], [case, past], [past, cases], [cases, determines], [determines, retrieved], [retrieved, case], [case,  ], [ , transferred], [transferred, new], [new, case], [case, .]]

>> Trigrams: 
[[analyses, differences,  ], [differences,  , new], [ , new, case], [new, case, past], [case, past, cases], [past, cases, determines], [cases, determines, retrieved], [determines, retrieved, case], [retrieved, case,  ], [case,  , transferred], [ , transferred, new], [transferred, new, case], [new, case, .]]

>> Noun Phrases are: 
[It, the differences, the new case, the past cases, what part, the retrieved case, the new case]

>> Named Entities are: 
[] 

------------------- Sentence 5 -------------------

CBR is essentially based on the concept of analogy wherein  by analyzing the previous cases we formulate a solution for the new cases [5]. 


>> Tokens are: 
[CBR, essentially, based, concept, analogy,  , analyzing, previous, cases, formulate, solution, new, cases, [, 5, ], .] 

>> PoS Tags are: 
[('CBR', 'PROPN'), ('essentially', 'ADV'), ('based', 'VERB'), ('concept', 'NOUN'), ('analogy', 'NOUN'), (' ', 'SPACE'), ('analyzing', 'VERB'), ('previous', 'ADJ'), ('cases', 'NOUN'), ('formulate', 'VERB'), ('solution', 'NOUN'), ('new', 'ADJ'), ('cases', 'NOUN'), ('[', 'PUNCT'), ('5', 'NUM'), (']', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('CBR', 'nsubjpass'), ('essentially', 'advmod'), ('based', 'ROOT'), ('concept', 'pobj'), ('analogy', 'pobj'), (' ', 'dobj'), ('analyzing', 'pcomp'), ('previous', 'amod'), ('cases', 'dobj'), ('formulate', 'relcl'), ('solution', 'dobj'), ('new', 'amod'), ('cases', 'pobj'), ('[', 'punct'), ('5', 'npadvmod'), (']', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[CBR, essentially], [essentially, based], [based, concept], [concept, analogy], [analogy,  ], [ , analyzing], [analyzing, previous], [previous, cases], [cases, formulate], [formulate, solution], [solution, new], [new, cases], [cases, [], [[, 5], [5, ]], [], .]]

>> Trigrams: 
[[CBR, essentially, based], [essentially, based, concept], [based, concept, analogy], [concept, analogy,  ], [analogy,  , analyzing], [ , analyzing, previous], [analyzing, previous, cases], [previous, cases, formulate], [cases, formulate, solution], [formulate, solution, new], [solution, new, cases], [new, cases, [], [cases, [, 5], [[, 5, ]], [5, ], .]]

>> Noun Phrases are: 
[CBR, the concept, analogy, the previous cases, we, a solution, the new cases]

>> Named Entities are: 
[('CBR', 'ORG')] 

------------------- Sentence 6 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 40 =================================

  3.2.3  Copy  In the trivial cases of reuse we generally copy the solution of the previous cases and make it the  solution for the new cases. But many systems take into consideration the differences between the  two cases and use the adaptation process to formulate a new solution based on these  differences.   

------------------- Sentence 1 -------------------

  3.2.3   


>> Tokens are: 
[  , 3.2.3,  ] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('3.2.3', 'ADP'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('3.2.3', 'prep'), (' ', 'appos')]

>> Bigrams: 
[[  , 3.2.3], [3.2.3,  ]]

>> Trigrams: 
[[  , 3.2.3,  ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Copy   


>> Tokens are: 
[Copy,  ] 

>> PoS Tags are: 
[('Copy', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Copy', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[Copy,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

In the trivial cases of reuse we generally copy the solution of the previous cases and make it the  solution for the new cases. 


>> Tokens are: 
[trivial, cases, reuse, generally, copy, solution, previous, cases,  , solution, new, cases, .] 

>> PoS Tags are: 
[('trivial', 'ADJ'), ('cases', 'NOUN'), ('reuse', 'VERB'), ('generally', 'ADV'), ('copy', 'VERB'), ('solution', 'NOUN'), ('previous', 'ADJ'), ('cases', 'NOUN'), (' ', 'SPACE'), ('solution', 'NOUN'), ('new', 'ADJ'), ('cases', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('trivial', 'amod'), ('cases', 'pobj'), ('reuse', 'pobj'), ('generally', 'advmod'), ('copy', 'ROOT'), ('solution', 'dobj'), ('previous', 'amod'), ('cases', 'pobj'), (' ', 'compound'), ('solution', 'ccomp'), ('new', 'amod'), ('cases', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[trivial, cases], [cases, reuse], [reuse, generally], [generally, copy], [copy, solution], [solution, previous], [previous, cases], [cases,  ], [ , solution], [solution, new], [new, cases], [cases, .]]

>> Trigrams: 
[[trivial, cases, reuse], [cases, reuse, generally], [reuse, generally, copy], [generally, copy, solution], [copy, solution, previous], [solution, previous, cases], [previous, cases,  ], [cases,  , solution], [ , solution, new], [solution, new, cases], [new, cases, .]]

>> Noun Phrases are: 
[the trivial cases, we, the solution, the previous cases, it, the new cases]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

But many systems take into consideration the differences between the  two cases and use the adaptation process to formulate a new solution based on these  differences. 


>> Tokens are: 
[systems, consideration, differences,  , cases, use, adaptation, process, formulate, new, solution, based,  , differences, .] 

>> PoS Tags are: 
[('systems', 'NOUN'), ('consideration', 'NOUN'), ('differences', 'NOUN'), (' ', 'SPACE'), ('cases', 'NOUN'), ('use', 'VERB'), ('adaptation', 'NOUN'), ('process', 'NOUN'), ('formulate', 'VERB'), ('new', 'ADJ'), ('solution', 'NOUN'), ('based', 'VERB'), (' ', 'SPACE'), ('differences', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('systems', 'nsubj'), ('consideration', 'pobj'), ('differences', 'dobj'), (' ', 'nmod'), ('cases', 'pobj'), ('use', 'conj'), ('adaptation', 'compound'), ('process', 'dobj'), ('formulate', 'xcomp'), ('new', 'amod'), ('solution', 'dobj'), ('based', 'acl'), (' ', 'compound'), ('differences', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[systems, consideration], [consideration, differences], [differences,  ], [ , cases], [cases, use], [use, adaptation], [adaptation, process], [process, formulate], [formulate, new], [new, solution], [solution, based], [based,  ], [ , differences], [differences, .]]

>> Trigrams: 
[[systems, consideration, differences], [consideration, differences,  ], [differences,  , cases], [ , cases, use], [cases, use, adaptation], [use, adaptation, process], [adaptation, process, formulate], [process, formulate, new], [formulate, new, solution], [new, solution, based], [solution, based,  ], [based,  , differences], [ , differences, .]]

>> Noun Phrases are: 
[many systems, consideration, the differences, the  two cases, the adaptation process, a new solution, these  differences]

>> Named Entities are: 
[('two', 'CARDINAL')] 

------------------- Sentence 5 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 41 =================================

  3.2.4  Adaptation  The adaptation process is of two kinds:  Structural adaptation- Adaptation rules are applied directly to the solution stored in cases i.e.-  reuse past case solution.  Derivational adaptation- Reuse the method that constructed the solution to a past problem.   In structural adaptation we do not use the past solution directly but apply some transformation  parameters to construct the solution for the new case. Thus this kind of adaptation is also referred  to as transformational adaptation. In derivational adaptation we use the method or algorithm  applied previously to solve the new problem [17].   

------------------- Sentence 1 -------------------

  3.2.4   


>> Tokens are: 
[  , 3.2.4,  ] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('3.2.4', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'nummod'), ('3.2.4', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[  , 3.2.4], [3.2.4,  ]]

>> Trigrams: 
[[  , 3.2.4,  ]]

>> Noun Phrases are: 
[  3.2.4]

>> Named Entities are: 
[('3.2.4', 'CARDINAL')] 

------------------- Sentence 2 -------------------

Adaptation   


>> Tokens are: 
[Adaptation,  ] 

>> PoS Tags are: 
[('Adaptation', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Adaptation', 'ROOT'), (' ', 'nummod')]

>> Bigrams: 
[[Adaptation,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Adaptation]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

The adaptation process is of two kinds:   


>> Tokens are: 
[adaptation, process, kinds, :,  ] 

>> PoS Tags are: 
[('adaptation', 'NOUN'), ('process', 'NOUN'), ('kinds', 'NOUN'), (':', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('adaptation', 'compound'), ('process', 'nsubj'), ('kinds', 'pobj'), (':', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[adaptation, process], [process, kinds], [kinds, :], [:,  ]]

>> Trigrams: 
[[adaptation, process, kinds], [process, kinds, :], [kinds, :,  ]]

>> Noun Phrases are: 
[The adaptation process, two kinds]

>> Named Entities are: 
[('two', 'CARDINAL')] 

------------------- Sentence 4 -------------------

Structural adaptation- 


>> Tokens are: 
[Structural, adaptation-] 

>> PoS Tags are: 
[('Structural', 'PROPN'), ('adaptation-', 'VERB')] 

>> Dependency Tags are: 
[('Structural', 'ROOT'), ('adaptation-', 'punct')]

>> Bigrams: 
[[Structural, adaptation-]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Structural]

>> Named Entities are: 
[] 

------------------- Sentence 5 -------------------

Adaptation rules are applied directly to the solution stored in cases i.e.-  reuse past case solution.   


>> Tokens are: 
[Adaptation, rules, applied, directly, solution, stored, cases, i.e.-,  , reuse, past, case, solution, .,  ] 

>> PoS Tags are: 
[('Adaptation', 'NOUN'), ('rules', 'NOUN'), ('applied', 'VERB'), ('directly', 'ADV'), ('solution', 'NOUN'), ('stored', 'VERB'), ('cases', 'NOUN'), ('i.e.-', 'AUX'), (' ', 'SPACE'), ('reuse', 'VERB'), ('past', 'ADJ'), ('case', 'NOUN'), ('solution', 'NOUN'), ('.', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Adaptation', 'compound'), ('rules', 'nsubjpass'), ('applied', 'ROOT'), ('directly', 'advmod'), ('solution', 'pobj'), ('stored', 'acl'), ('cases', 'pobj'), ('i.e.-', 'aux'), (' ', 'nsubj'), ('reuse', 'advcl'), ('past', 'amod'), ('case', 'compound'), ('solution', 'dobj'), ('.', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[Adaptation, rules], [rules, applied], [applied, directly], [directly, solution], [solution, stored], [stored, cases], [cases, i.e.-], [i.e.-,  ], [ , reuse], [reuse, past], [past, case], [case, solution], [solution, .], [.,  ]]

>> Trigrams: 
[[Adaptation, rules, applied], [rules, applied, directly], [applied, directly, solution], [directly, solution, stored], [solution, stored, cases], [stored, cases, i.e.-], [cases, i.e.-,  ], [i.e.-,  , reuse], [ , reuse, past], [reuse, past, case], [past, case, solution], [case, solution, .], [solution, .,  ]]

>> Noun Phrases are: 
[Adaptation rules, the solution, cases, past case solution]

>> Named Entities are: 
[] 

------------------- Sentence 6 -------------------

Derivational adaptation- 


>> Tokens are: 
[Derivational, adaptation-] 

>> PoS Tags are: 
[('Derivational', 'PROPN'), ('adaptation-', 'VERB')] 

>> Dependency Tags are: 
[('Derivational', 'ROOT'), ('adaptation-', 'punct')]

>> Bigrams: 
[[Derivational, adaptation-]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Derivational]

>> Named Entities are: 
[] 

------------------- Sentence 7 -------------------

Reuse the method that constructed the solution to a past problem. 


>> Tokens are: 
[Reuse, method, constructed, solution, past, problem, .] 

>> PoS Tags are: 
[('Reuse', 'VERB'), ('method', 'NOUN'), ('constructed', 'VERB'), ('solution', 'NOUN'), ('past', 'ADJ'), ('problem', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Reuse', 'ROOT'), ('method', 'dobj'), ('constructed', 'relcl'), ('solution', 'dobj'), ('past', 'amod'), ('problem', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Reuse, method], [method, constructed], [constructed, solution], [solution, past], [past, problem], [problem, .]]

>> Trigrams: 
[[Reuse, method, constructed], [method, constructed, solution], [constructed, solution, past], [solution, past, problem], [past, problem, .]]

>> Noun Phrases are: 
[the method, the solution, a past problem]

>> Named Entities are: 
[] 

------------------- Sentence 8 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 9 -------------------

In structural adaptation we do not use the past solution directly but apply some transformation  parameters to construct the solution for the new case. 


>> Tokens are: 
[structural, adaptation, use, past, solution, directly, apply, transformation,  , parameters, construct, solution, new, case, .] 

>> PoS Tags are: 
[('structural', 'ADJ'), ('adaptation', 'NOUN'), ('use', 'VERB'), ('past', 'ADJ'), ('solution', 'NOUN'), ('directly', 'ADV'), ('apply', 'VERB'), ('transformation', 'NOUN'), (' ', 'SPACE'), ('parameters', 'NOUN'), ('construct', 'VERB'), ('solution', 'NOUN'), ('new', 'ADJ'), ('case', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('structural', 'amod'), ('adaptation', 'pobj'), ('use', 'ROOT'), ('past', 'amod'), ('solution', 'dobj'), ('directly', 'advmod'), ('apply', 'conj'), ('transformation', 'dobj'), (' ', 'compound'), ('parameters', 'appos'), ('construct', 'advcl'), ('solution', 'dobj'), ('new', 'amod'), ('case', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[structural, adaptation], [adaptation, use], [use, past], [past, solution], [solution, directly], [directly, apply], [apply, transformation], [transformation,  ], [ , parameters], [parameters, construct], [construct, solution], [solution, new], [new, case], [case, .]]

>> Trigrams: 
[[structural, adaptation, use], [adaptation, use, past], [use, past, solution], [past, solution, directly], [solution, directly, apply], [directly, apply, transformation], [apply, transformation,  ], [transformation,  , parameters], [ , parameters, construct], [parameters, construct, solution], [construct, solution, new], [solution, new, case], [new, case, .]]

>> Noun Phrases are: 
[structural adaptation, we, the past solution, some transformation,  parameters, the solution, the new case]

>> Named Entities are: 
[] 

------------------- Sentence 10 -------------------

Thus this kind of adaptation is also referred  to as transformational adaptation. 


>> Tokens are: 
[kind, adaptation, referred,  , transformational, adaptation, .] 

>> PoS Tags are: 
[('kind', 'NOUN'), ('adaptation', 'NOUN'), ('referred', 'VERB'), (' ', 'SPACE'), ('transformational', 'ADJ'), ('adaptation', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('kind', 'nsubjpass'), ('adaptation', 'pobj'), ('referred', 'ROOT'), (' ', 'dobj'), ('transformational', 'amod'), ('adaptation', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[kind, adaptation], [adaptation, referred], [referred,  ], [ , transformational], [transformational, adaptation], [adaptation, .]]

>> Trigrams: 
[[kind, adaptation, referred], [adaptation, referred,  ], [referred,  , transformational], [ , transformational, adaptation], [transformational, adaptation, .]]

>> Noun Phrases are: 
[this kind, adaptation, transformational adaptation]

>> Named Entities are: 
[] 

------------------- Sentence 11 -------------------

In derivational adaptation we use the method or algorithm  applied previously to solve the new problem [17]. 


>> Tokens are: 
[derivational, adaptation, use, method, algorithm,  , applied, previously, solve, new, problem, [, 17, ], .] 

>> PoS Tags are: 
[('derivational', 'ADJ'), ('adaptation', 'NOUN'), ('use', 'VERB'), ('method', 'NOUN'), ('algorithm', 'NOUN'), (' ', 'SPACE'), ('applied', 'VERB'), ('previously', 'ADV'), ('solve', 'VERB'), ('new', 'ADJ'), ('problem', 'NOUN'), ('[', 'PUNCT'), ('17', 'NUM'), (']', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('derivational', 'amod'), ('adaptation', 'pobj'), ('use', 'ROOT'), ('method', 'dobj'), ('algorithm', 'conj'), (' ', 'nsubj'), ('applied', 'conj'), ('previously', 'advmod'), ('solve', 'advcl'), ('new', 'amod'), ('problem', 'dobj'), ('[', 'punct'), ('17', 'appos'), (']', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[derivational, adaptation], [adaptation, use], [use, method], [method, algorithm], [algorithm,  ], [ , applied], [applied, previously], [previously, solve], [solve, new], [new, problem], [problem, [], [[, 17], [17, ]], [], .]]

>> Trigrams: 
[[derivational, adaptation, use], [adaptation, use, method], [use, method, algorithm], [method, algorithm,  ], [algorithm,  , applied], [ , applied, previously], [applied, previously, solve], [previously, solve, new], [solve, new, problem], [new, problem, [], [problem, [, 17], [[, 17, ]], [17, ], .]]

>> Noun Phrases are: 
[derivational adaptation, we, the method, algorithm, the new problem]

>> Named Entities are: 
[('17', 'CARDINAL')] 

------------------- Sentence 12 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 42 =================================

  3.2.5  Case Revision  After reusing the past cases to obtain a solution for the new case we need to test that solution.  We must check or test to see if the solution is correct. If the testing is successful then we retain  the solution, otherwise we must revise the case solution using domain specific knowledge.   

------------------- Sentence 1 -------------------

  3.2.5   


>> Tokens are: 
[  , 3.2.5,  ] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('3.2.5', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'nummod'), ('3.2.5', 'ROOT'), (' ', 'appos')]

>> Bigrams: 
[[  , 3.2.5], [3.2.5,  ]]

>> Trigrams: 
[[  , 3.2.5,  ]]

>> Noun Phrases are: 
[  3.2.5]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Case Revision   


>> Tokens are: 
[Case, Revision,  ] 

>> PoS Tags are: 
[('Case', 'NOUN'), ('Revision', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Case', 'compound'), ('Revision', 'ROOT'), (' ', 'appos')]

>> Bigrams: 
[[Case, Revision], [Revision,  ]]

>> Trigrams: 
[[Case, Revision,  ]]

>> Noun Phrases are: 
[Case Revision]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

After reusing the past cases to obtain a solution for the new case we need to test that solution. 


>> Tokens are: 
[reusing, past, cases, obtain, solution, new, case, need, test, solution, .] 

>> PoS Tags are: 
[('reusing', 'VERB'), ('past', 'ADJ'), ('cases', 'NOUN'), ('obtain', 'VERB'), ('solution', 'NOUN'), ('new', 'ADJ'), ('case', 'NOUN'), ('need', 'VERB'), ('test', 'VERB'), ('solution', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('reusing', 'pcomp'), ('past', 'amod'), ('cases', 'dobj'), ('obtain', 'advcl'), ('solution', 'dobj'), ('new', 'amod'), ('case', 'pobj'), ('need', 'relcl'), ('test', 'xcomp'), ('solution', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[reusing, past], [past, cases], [cases, obtain], [obtain, solution], [solution, new], [new, case], [case, need], [need, test], [test, solution], [solution, .]]

>> Trigrams: 
[[reusing, past, cases], [past, cases, obtain], [cases, obtain, solution], [obtain, solution, new], [solution, new, case], [new, case, need], [case, need, test], [need, test, solution], [test, solution, .]]

>> Noun Phrases are: 
[the past cases, a solution, the new case, we, that solution]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 5 -------------------

We must check or test to see if the solution is correct. 


>> Tokens are: 
[check, test, solution, correct, .] 

>> PoS Tags are: 
[('check', 'VERB'), ('test', 'NOUN'), ('solution', 'NOUN'), ('correct', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('check', 'ROOT'), ('test', 'conj'), ('solution', 'nsubj'), ('correct', 'acomp'), ('.', 'punct')]

>> Bigrams: 
[[check, test], [test, solution], [solution, correct], [correct, .]]

>> Trigrams: 
[[check, test, solution], [test, solution, correct], [solution, correct, .]]

>> Noun Phrases are: 
[We, test, the solution]

>> Named Entities are: 
[] 

------------------- Sentence 6 -------------------

If the testing is successful then we retain  the solution, otherwise we must revise the case solution using domain specific knowledge. 


>> Tokens are: 
[testing, successful, retain,  , solution, ,, revise, case, solution, domain, specific, knowledge, .] 

>> PoS Tags are: 
[('testing', 'NOUN'), ('successful', 'ADJ'), ('retain', 'VERB'), (' ', 'SPACE'), ('solution', 'NOUN'), (',', 'PUNCT'), ('revise', 'VERB'), ('case', 'NOUN'), ('solution', 'NOUN'), ('domain', 'NOUN'), ('specific', 'ADJ'), ('knowledge', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('testing', 'nsubj'), ('successful', 'acomp'), ('retain', 'ccomp'), (' ', 'dobj'), ('solution', 'dobj'), (',', 'punct'), ('revise', 'ROOT'), ('case', 'compound'), ('solution', 'dobj'), ('domain', 'nmod'), ('specific', 'amod'), ('knowledge', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[testing, successful], [successful, retain], [retain,  ], [ , solution], [solution, ,], [,, revise], [revise, case], [case, solution], [solution, domain], [domain, specific], [specific, knowledge], [knowledge, .]]

>> Trigrams: 
[[testing, successful, retain], [successful, retain,  ], [retain,  , solution], [ , solution, ,], [solution, ,, revise], [,, revise, case], [revise, case, solution], [case, solution, domain], [solution, domain, specific], [domain, specific, knowledge], [specific, knowledge, .]]

>> Noun Phrases are: 
[the testing, we, the solution, we, the case solution, domain specific knowledge]

>> Named Entities are: 
[] 

------------------- Sentence 7 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 43 =================================

  3.2.6  Case Retainment- Learning (CRL)  The solution of the new problem after being tested and repaired may be retained into the existing  domain specific knowledge. This process is called Case Retainment Learning or CRL. Retaining  information involves selecting what information to retain, in what form to retain it, how to index the  case for later retrieval from similar problems, and how to integrate the new case in the memory  structure.   

------------------- Sentence 1 -------------------

  3.2.6   


>> Tokens are: 
[  , 3.2.6,  ] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('3.2.6', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('3.2.6', 'appos'), (' ', 'punct')]

>> Bigrams: 
[[  , 3.2.6], [3.2.6,  ]]

>> Trigrams: 
[[  , 3.2.6,  ]]

>> Noun Phrases are: 
[3.2.6]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Case Retainment- Learning (CRL)   


>> Tokens are: 
[Case, Retainment-, Learning, (, CRL, ),  ] 

>> PoS Tags are: 
[('Case', 'PROPN'), ('Retainment-', 'PROPN'), ('Learning', 'PROPN'), ('(', 'PUNCT'), ('CRL', 'PROPN'), (')', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Case', 'compound'), ('Retainment-', 'compound'), ('Learning', 'ROOT'), ('(', 'punct'), ('CRL', 'appos'), (')', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[Case, Retainment-], [Retainment-, Learning], [Learning, (], [(, CRL], [CRL, )], [),  ]]

>> Trigrams: 
[[Case, Retainment-, Learning], [Retainment-, Learning, (], [Learning, (, CRL], [(, CRL, )], [CRL, ),  ]]

>> Noun Phrases are: 
[Case Retainment- Learning, (CRL]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

The solution of the new problem after being tested and repaired may be retained into the existing  domain specific knowledge. 


>> Tokens are: 
[solution, new, problem, tested, repaired, retained, existing,  , domain, specific, knowledge, .] 

>> PoS Tags are: 
[('solution', 'NOUN'), ('new', 'ADJ'), ('problem', 'NOUN'), ('tested', 'VERB'), ('repaired', 'VERB'), ('retained', 'VERB'), ('existing', 'VERB'), (' ', 'SPACE'), ('domain', 'VERB'), ('specific', 'ADJ'), ('knowledge', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('solution', 'nsubjpass'), ('new', 'amod'), ('problem', 'pobj'), ('tested', 'pcomp'), ('repaired', 'conj'), ('retained', 'ROOT'), ('existing', 'amod'), (' ', 'pobj'), ('domain', 'pobj'), ('specific', 'amod'), ('knowledge', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[solution, new], [new, problem], [problem, tested], [tested, repaired], [repaired, retained], [retained, existing], [existing,  ], [ , domain], [domain, specific], [specific, knowledge], [knowledge, .]]

>> Trigrams: 
[[solution, new, problem], [new, problem, tested], [problem, tested, repaired], [tested, repaired, retained], [repaired, retained, existing], [retained, existing,  ], [existing,  , domain], [ , domain, specific], [domain, specific, knowledge], [specific, knowledge, .]]

>> Noun Phrases are: 
[The solution, the new problem, specific knowledge]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

This process is called Case Retainment Learning or CRL. 


>> Tokens are: 
[process, called, Case, Retainment, Learning, CRL, .] 

>> PoS Tags are: 
[('process', 'NOUN'), ('called', 'VERB'), ('Case', 'PROPN'), ('Retainment', 'PROPN'), ('Learning', 'PROPN'), ('CRL', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('process', 'nsubjpass'), ('called', 'ROOT'), ('Case', 'compound'), ('Retainment', 'compound'), ('Learning', 'oprd'), ('CRL', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[process, called], [called, Case], [Case, Retainment], [Retainment, Learning], [Learning, CRL], [CRL, .]]

>> Trigrams: 
[[process, called, Case], [called, Case, Retainment], [Case, Retainment, Learning], [Retainment, Learning, CRL], [Learning, CRL, .]]

>> Noun Phrases are: 
[This process, Case Retainment Learning, CRL]

>> Named Entities are: 
[('Case Retainment Learning', 'ORG')] 

------------------- Sentence 5 -------------------

Retaining  information involves selecting what information to retain, in what form to retain it, how to index the  case for later retrieval from similar problems, and how to integrate the new case in the memory  structure. 


>> Tokens are: 
[Retaining,  , information, involves, selecting, information, retain, ,, form, retain, ,, index,  , case, later, retrieval, similar, problems, ,, integrate, new, case, memory,  , structure, .] 

>> PoS Tags are: 
[('Retaining', 'VERB'), (' ', 'SPACE'), ('information', 'NOUN'), ('involves', 'VERB'), ('selecting', 'VERB'), ('information', 'NOUN'), ('retain', 'VERB'), (',', 'PUNCT'), ('form', 'NOUN'), ('retain', 'VERB'), (',', 'PUNCT'), ('index', 'VERB'), (' ', 'SPACE'), ('case', 'NOUN'), ('later', 'ADJ'), ('retrieval', 'NOUN'), ('similar', 'ADJ'), ('problems', 'NOUN'), (',', 'PUNCT'), ('integrate', 'VERB'), ('new', 'ADJ'), ('case', 'NOUN'), ('memory', 'NOUN'), (' ', 'SPACE'), ('structure', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Retaining', 'csubj'), (' ', 'dobj'), ('information', 'dobj'), ('involves', 'ROOT'), ('selecting', 'xcomp'), ('information', 'dobj'), ('retain', 'ccomp'), (',', 'punct'), ('form', 'pcomp'), ('retain', 'advcl'), (',', 'punct'), ('index', 'conj'), (' ', 'compound'), ('case', 'dobj'), ('later', 'amod'), ('retrieval', 'pobj'), ('similar', 'amod'), ('problems', 'pobj'), (',', 'punct'), ('integrate', 'conj'), ('new', 'amod'), ('case', 'dobj'), ('memory', 'pobj'), (' ', 'compound'), ('structure', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Retaining,  ], [ , information], [information, involves], [involves, selecting], [selecting, information], [information, retain], [retain, ,], [,, form], [form, retain], [retain, ,], [,, index], [index,  ], [ , case], [case, later], [later, retrieval], [retrieval, similar], [similar, problems], [problems, ,], [,, integrate], [integrate, new], [new, case], [case, memory], [memory,  ], [ , structure], [structure, .]]

>> Trigrams: 
[[Retaining,  , information], [ , information, involves], [information, involves, selecting], [involves, selecting, information], [selecting, information, retain], [information, retain, ,], [retain, ,, form], [,, form, retain], [form, retain, ,], [retain, ,, index], [,, index,  ], [index,  , case], [ , case, later], [case, later, retrieval], [later, retrieval, similar], [retrieval, similar, problems], [similar, problems, ,], [problems, ,, integrate], [,, integrate, new], [integrate, new, case], [new, case, memory], [case, memory,  ], [memory,  , structure], [ , structure, .]]

>> Noun Phrases are: 
[information, what information, what form, it, the  case, later retrieval, similar problems, the new case, the memory,  structure]

>> Named Entities are: 
[] 

------------------- Sentence 6 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 44 =================================

  3.2.7  Case Based Learning  An important feature of CBR is its coupling to learning [2]. Case-based reasoning is also regarded  a sub-field of machine learning. Thus, the notion of case-based reasoning does not only denote a  particular reasoning method, irrespective of how the cases are acquired, it also denotes a  machine learning paradigm that enables sustained learning by updating the case base after a  problem has been solved. Learning in CBR occurs as a natural by-product of problem solving.  When a problem is successfully solved, the experience is retained in order to solve similar  problems in the future. When an attempt to solve a problem fails, the reason for the failure is  identified and remembered in order to avoid the same mistake in the future. CBR can be applied  to solve real world problems for instance handling of multiple disorders [16] or for engineering  sales support [23].     

------------------- Sentence 1 -------------------

  3.2.7   


>> Tokens are: 
[  , 3.2.7,  ] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('3.2.7', 'NUM'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('3.2.7', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[  , 3.2.7], [3.2.7,  ]]

>> Trigrams: 
[[  , 3.2.7,  ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Case Based Learning   


>> Tokens are: 
[Case, Based, Learning,  ] 

>> PoS Tags are: 
[('Case', 'NOUN'), ('Based', 'VERB'), ('Learning', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Case', 'nsubj'), ('Based', 'ROOT'), ('Learning', 'npadvmod'), (' ', 'punct')]

>> Bigrams: 
[[Case, Based], [Based, Learning], [Learning,  ]]

>> Trigrams: 
[[Case, Based, Learning], [Based, Learning,  ]]

>> Noun Phrases are: 
[Case]

>> Named Entities are: 
[('Case Based Learning', 'WORK_OF_ART')] 

------------------- Sentence 3 -------------------

An important feature of CBR is its coupling to learning [2]. 


>> Tokens are: 
[important, feature, CBR, coupling, learning, [, 2, ], .] 

>> PoS Tags are: 
[('important', 'ADJ'), ('feature', 'NOUN'), ('CBR', 'PROPN'), ('coupling', 'NOUN'), ('learning', 'VERB'), ('[', 'PUNCT'), ('2', 'NUM'), (']', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('important', 'amod'), ('feature', 'nsubj'), ('CBR', 'pobj'), ('coupling', 'attr'), ('learning', 'pcomp'), ('[', 'punct'), ('2', 'attr'), (']', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[important, feature], [feature, CBR], [CBR, coupling], [coupling, learning], [learning, [], [[, 2], [2, ]], [], .]]

>> Trigrams: 
[[important, feature, CBR], [feature, CBR, coupling], [CBR, coupling, learning], [coupling, learning, [], [learning, [, 2], [[, 2, ]], [2, ], .]]

>> Noun Phrases are: 
[An important feature, CBR, its coupling]

>> Named Entities are: 
[('CBR', 'ORG'), ('2', 'CARDINAL')] 

------------------- Sentence 4 -------------------

Case-based reasoning is also regarded  a sub-field of machine learning. 


>> Tokens are: 
[Case, -, based, reasoning, regarded,  , sub, -, field, machine, learning, .] 

>> PoS Tags are: 
[('Case', 'NOUN'), ('-', 'PUNCT'), ('based', 'VERB'), ('reasoning', 'NOUN'), ('regarded', 'VERB'), (' ', 'SPACE'), ('sub', 'ADJ'), ('-', 'ADJ'), ('field', 'NOUN'), ('machine', 'NOUN'), ('learning', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Case', 'npadvmod'), ('-', 'punct'), ('based', 'amod'), ('reasoning', 'nsubjpass'), ('regarded', 'ROOT'), (' ', 'dative'), ('sub', 'amod'), ('-', 'amod'), ('field', 'oprd'), ('machine', 'compound'), ('learning', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Case, -], [-, based], [based, reasoning], [reasoning, regarded], [regarded,  ], [ , sub], [sub, -], [-, field], [field, machine], [machine, learning], [learning, .]]

>> Trigrams: 
[[Case, -, based], [-, based, reasoning], [based, reasoning, regarded], [reasoning, regarded,  ], [regarded,  , sub], [ , sub, -], [sub, -, field], [-, field, machine], [field, machine, learning], [machine, learning, .]]

>> Noun Phrases are: 
[Case-based reasoning, a sub-field, machine learning]

>> Named Entities are: 
[] 

------------------- Sentence 5 -------------------

Thus, the notion of case-based reasoning does not only denote a  particular reasoning method, irrespective of how the cases are acquired, it also denotes a  machine learning paradigm that enables sustained learning by updating the case base after a  problem has been solved. 


>> Tokens are: 
[,, notion, case, -, based, reasoning, denote,  , particular, reasoning, method, ,, irrespective, cases, acquired, ,, denotes,  , machine, learning, paradigm, enables, sustained, learning, updating, case, base,  , problem, solved, .] 

>> PoS Tags are: 
[(',', 'PUNCT'), ('notion', 'NOUN'), ('case', 'NOUN'), ('-', 'PUNCT'), ('based', 'VERB'), ('reasoning', 'NOUN'), ('denote', 'VERB'), (' ', 'SPACE'), ('particular', 'ADJ'), ('reasoning', 'NOUN'), ('method', 'NOUN'), (',', 'PUNCT'), ('irrespective', 'ADV'), ('cases', 'NOUN'), ('acquired', 'VERB'), (',', 'PUNCT'), ('denotes', 'VERB'), (' ', 'SPACE'), ('machine', 'NOUN'), ('learning', 'NOUN'), ('paradigm', 'NOUN'), ('enables', 'VERB'), ('sustained', 'VERB'), ('learning', 'NOUN'), ('updating', 'VERB'), ('case', 'NOUN'), ('base', 'NOUN'), (' ', 'SPACE'), ('problem', 'NOUN'), ('solved', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(',', 'punct'), ('notion', 'nsubj'), ('case', 'npadvmod'), ('-', 'punct'), ('based', 'amod'), ('reasoning', 'pobj'), ('denote', 'ccomp'), (' ', 'nmod'), ('particular', 'amod'), ('reasoning', 'compound'), ('method', 'dobj'), (',', 'punct'), ('irrespective', 'advmod'), ('cases', 'nsubjpass'), ('acquired', 'pcomp'), (',', 'punct'), ('denotes', 'ROOT'), (' ', 'compound'), ('machine', 'compound'), ('learning', 'compound'), ('paradigm', 'dobj'), ('enables', 'relcl'), ('sustained', 'advcl'), ('learning', 'dobj'), ('updating', 'pcomp'), ('case', 'compound'), ('base', 'dobj'), (' ', 'compound'), ('problem', 'nsubjpass'), ('solved', 'advcl'), ('.', 'punct')]

>> Bigrams: 
[[,, notion], [notion, case], [case, -], [-, based], [based, reasoning], [reasoning, denote], [denote,  ], [ , particular], [particular, reasoning], [reasoning, method], [method, ,], [,, irrespective], [irrespective, cases], [cases, acquired], [acquired, ,], [,, denotes], [denotes,  ], [ , machine], [machine, learning], [learning, paradigm], [paradigm, enables], [enables, sustained], [sustained, learning], [learning, updating], [updating, case], [case, base], [base,  ], [ , problem], [problem, solved], [solved, .]]

>> Trigrams: 
[[,, notion, case], [notion, case, -], [case, -, based], [-, based, reasoning], [based, reasoning, denote], [reasoning, denote,  ], [denote,  , particular], [ , particular, reasoning], [particular, reasoning, method], [reasoning, method, ,], [method, ,, irrespective], [,, irrespective, cases], [irrespective, cases, acquired], [cases, acquired, ,], [acquired, ,, denotes], [,, denotes,  ], [denotes,  , machine], [ , machine, learning], [machine, learning, paradigm], [learning, paradigm, enables], [paradigm, enables, sustained], [enables, sustained, learning], [sustained, learning, updating], [learning, updating, case], [updating, case, base], [case, base,  ], [base,  , problem], [ , problem, solved], [problem, solved, .]]

>> Noun Phrases are: 
[the notion, case-based reasoning, a  particular reasoning method, the cases, it, a  machine learning paradigm, learning, the case base, a  problem]

>> Named Entities are: 
[] 

------------------- Sentence 6 -------------------

Learning in CBR occurs as a natural by-product of problem solving. 


>> Tokens are: 
[Learning, CBR, occurs, natural, -, product, problem, solving, .] 

>> PoS Tags are: 
[('Learning', 'VERB'), ('CBR', 'PROPN'), ('occurs', 'VERB'), ('natural', 'ADJ'), ('-', 'PUNCT'), ('product', 'NOUN'), ('problem', 'NOUN'), ('solving', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Learning', 'nsubj'), ('CBR', 'pobj'), ('occurs', 'ROOT'), ('natural', 'amod'), ('-', 'punct'), ('product', 'pobj'), ('problem', 'compound'), ('solving', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Learning, CBR], [CBR, occurs], [occurs, natural], [natural, -], [-, product], [product, problem], [problem, solving], [solving, .]]

>> Trigrams: 
[[Learning, CBR, occurs], [CBR, occurs, natural], [occurs, natural, -], [natural, -, product], [-, product, problem], [product, problem, solving], [problem, solving, .]]

>> Noun Phrases are: 
[CBR, a natural by-product]

>> Named Entities are: 
[('CBR', 'ORG')] 

------------------- Sentence 7 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 8 -------------------

When a problem is successfully solved, the experience is retained in order to solve similar  problems in the future. 


>> Tokens are: 
[problem, successfully, solved, ,, experience, retained, order, solve, similar,  , problems, future, .] 

>> PoS Tags are: 
[('problem', 'NOUN'), ('successfully', 'ADV'), ('solved', 'VERB'), (',', 'PUNCT'), ('experience', 'NOUN'), ('retained', 'VERB'), ('order', 'NOUN'), ('solve', 'VERB'), ('similar', 'ADJ'), (' ', 'SPACE'), ('problems', 'NOUN'), ('future', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('problem', 'nsubjpass'), ('successfully', 'advmod'), ('solved', 'advcl'), (',', 'punct'), ('experience', 'nsubjpass'), ('retained', 'ROOT'), ('order', 'pobj'), ('solve', 'acl'), ('similar', 'amod'), (' ', 'compound'), ('problems', 'dobj'), ('future', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[problem, successfully], [successfully, solved], [solved, ,], [,, experience], [experience, retained], [retained, order], [order, solve], [solve, similar], [similar,  ], [ , problems], [problems, future], [future, .]]

>> Trigrams: 
[[problem, successfully, solved], [successfully, solved, ,], [solved, ,, experience], [,, experience, retained], [experience, retained, order], [retained, order, solve], [order, solve, similar], [solve, similar,  ], [similar,  , problems], [ , problems, future], [problems, future, .]]

>> Noun Phrases are: 
[a problem, the experience, order, similar  problems, the future]

>> Named Entities are: 
[] 

------------------- Sentence 9 -------------------

When an attempt to solve a problem fails, the reason for the failure is  identified and remembered in order to avoid the same mistake in the future. 


>> Tokens are: 
[attempt, solve, problem, fails, ,, reason, failure,  , identified, remembered, order, avoid, mistake, future, .] 

>> PoS Tags are: 
[('attempt', 'NOUN'), ('solve', 'VERB'), ('problem', 'NOUN'), ('fails', 'VERB'), (',', 'PUNCT'), ('reason', 'NOUN'), ('failure', 'NOUN'), (' ', 'SPACE'), ('identified', 'VERB'), ('remembered', 'VERB'), ('order', 'NOUN'), ('avoid', 'VERB'), ('mistake', 'NOUN'), ('future', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('attempt', 'nsubj'), ('solve', 'acl'), ('problem', 'dobj'), ('fails', 'advcl'), (',', 'punct'), ('reason', 'nsubjpass'), ('failure', 'pobj'), (' ', 'nsubjpass'), ('identified', 'ROOT'), ('remembered', 'conj'), ('order', 'pobj'), ('avoid', 'acl'), ('mistake', 'dobj'), ('future', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[attempt, solve], [solve, problem], [problem, fails], [fails, ,], [,, reason], [reason, failure], [failure,  ], [ , identified], [identified, remembered], [remembered, order], [order, avoid], [avoid, mistake], [mistake, future], [future, .]]

>> Trigrams: 
[[attempt, solve, problem], [solve, problem, fails], [problem, fails, ,], [fails, ,, reason], [,, reason, failure], [reason, failure,  ], [failure,  , identified], [ , identified, remembered], [identified, remembered, order], [remembered, order, avoid], [order, avoid, mistake], [avoid, mistake, future], [mistake, future, .]]

>> Noun Phrases are: 
[an attempt, a problem, the reason, the failure, order, the same mistake, the future]

>> Named Entities are: 
[] 

------------------- Sentence 10 -------------------

CBR can be applied  to solve real world problems for instance handling of multiple disorders [16] or for engineering  sales support [23]. 


>> Tokens are: 
[CBR, applied,  , solve, real, world, problems, instance, handling, multiple, disorders, [, 16, ], engineering,  , sales, support, [, 23, ], .] 

>> PoS Tags are: 
[('CBR', 'PROPN'), ('applied', 'VERB'), (' ', 'SPACE'), ('solve', 'VERB'), ('real', 'ADJ'), ('world', 'NOUN'), ('problems', 'NOUN'), ('instance', 'NOUN'), ('handling', 'NOUN'), ('multiple', 'ADJ'), ('disorders', 'NOUN'), ('[', 'PUNCT'), ('16', 'NUM'), (']', 'PUNCT'), ('engineering', 'VERB'), (' ', 'SPACE'), ('sales', 'NOUN'), ('support', 'NOUN'), ('[', 'PUNCT'), ('23', 'NUM'), (']', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('CBR', 'nsubjpass'), ('applied', 'ROOT'), (' ', 'dobj'), ('solve', 'advcl'), ('real', 'amod'), ('world', 'compound'), ('problems', 'dobj'), ('instance', 'compound'), ('handling', 'pobj'), ('multiple', 'amod'), ('disorders', 'pobj'), ('[', 'punct'), ('16', 'npadvmod'), (']', 'punct'), ('engineering', 'pcomp'), (' ', 'prt'), ('sales', 'compound'), ('support', 'dobj'), ('[', 'punct'), ('23', 'npadvmod'), (']', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[CBR, applied], [applied,  ], [ , solve], [solve, real], [real, world], [world, problems], [problems, instance], [instance, handling], [handling, multiple], [multiple, disorders], [disorders, [], [[, 16], [16, ]], [], engineering], [engineering,  ], [ , sales], [sales, support], [support, [], [[, 23], [23, ]], [], .]]

>> Trigrams: 
[[CBR, applied,  ], [applied,  , solve], [ , solve, real], [solve, real, world], [real, world, problems], [world, problems, instance], [problems, instance, handling], [instance, handling, multiple], [handling, multiple, disorders], [multiple, disorders, [], [disorders, [, 16], [[, 16, ]], [16, ], engineering], [], engineering,  ], [engineering,  , sales], [ , sales, support], [sales, support, [], [support, [, 23], [[, 23, ]], [23, ], .]]

>> Noun Phrases are: 
[CBR, real world problems, instance handling, multiple disorders, sales support]

>> Named Entities are: 
[('16', 'CARDINAL'), ('23', 'CARDINAL')] 

------------------- Sentence 11 -------------------

     


>> Tokens are: 
[    ] 

>> PoS Tags are: 
[('    ', 'SPACE')] 

>> Dependency Tags are: 
[('    ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 45 =================================

4.  CLASSIFICATION AND REGRESSION TREES (CART)    CART is a very efficient machine learning technique. The difference between this technique and  other machine learning technique is that CART requires very little input from the analyst. This is in 

------------------- Sentence 1 -------------------

4. 


>> Tokens are: 
[4, .] 

>> PoS Tags are: 
[('4', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('4', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[4, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('4', 'CARDINAL')] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

CLASSIFICATION AND REGRESSION TREES (CART)    CART is a very efficient machine learning technique. 


>> Tokens are: 
[CLASSIFICATION, REGRESSION, TREES, (, CART, ),    , CART, efficient, machine, learning, technique, .] 

>> PoS Tags are: 
[('CLASSIFICATION', 'PROPN'), ('REGRESSION', 'NOUN'), ('TREES', 'PROPN'), ('(', 'PUNCT'), ('CART', 'NOUN'), (')', 'PUNCT'), ('   ', 'SPACE'), ('CART', 'NOUN'), ('efficient', 'ADJ'), ('machine', 'NOUN'), ('learning', 'NOUN'), ('technique', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('CLASSIFICATION', 'nmod'), ('REGRESSION', 'conj'), ('TREES', 'nmod'), ('(', 'punct'), ('CART', 'appos'), (')', 'punct'), ('   ', 'nummod'), ('CART', 'nsubj'), ('efficient', 'amod'), ('machine', 'compound'), ('learning', 'compound'), ('technique', 'attr'), ('.', 'punct')]

>> Bigrams: 
[[CLASSIFICATION, REGRESSION], [REGRESSION, TREES], [TREES, (], [(, CART], [CART, )], [),    ], [   , CART], [CART, efficient], [efficient, machine], [machine, learning], [learning, technique], [technique, .]]

>> Trigrams: 
[[CLASSIFICATION, REGRESSION, TREES], [REGRESSION, TREES, (], [TREES, (, CART], [(, CART, )], [CART, ),    ], [),    , CART], [   , CART, efficient], [CART, efficient, machine], [efficient, machine, learning], [machine, learning, technique], [learning, technique, .]]

>> Noun Phrases are: 
[(CART, a very efficient machine learning technique]

>> Named Entities are: 
[('CART', 'ORG')] 

------------------- Sentence 4 -------------------

The difference between this technique and  other machine learning technique is that CART requires very little input from the analyst. 


>> Tokens are: 
[difference, technique,  , machine, learning, technique, CART, requires, little, input, analyst, .] 

>> PoS Tags are: 
[('difference', 'NOUN'), ('technique', 'NOUN'), (' ', 'SPACE'), ('machine', 'NOUN'), ('learning', 'NOUN'), ('technique', 'NOUN'), ('CART', 'PROPN'), ('requires', 'VERB'), ('little', 'ADJ'), ('input', 'NOUN'), ('analyst', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('difference', 'nsubj'), ('technique', 'pobj'), (' ', 'nmod'), ('machine', 'compound'), ('learning', 'compound'), ('technique', 'conj'), ('CART', 'nsubj'), ('requires', 'ccomp'), ('little', 'amod'), ('input', 'dobj'), ('analyst', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[difference, technique], [technique,  ], [ , machine], [machine, learning], [learning, technique], [technique, CART], [CART, requires], [requires, little], [little, input], [input, analyst], [analyst, .]]

>> Trigrams: 
[[difference, technique,  ], [technique,  , machine], [ , machine, learning], [machine, learning, technique], [learning, technique, CART], [technique, CART, requires], [CART, requires, little], [requires, little, input], [little, input, analyst], [input, analyst, .]]

>> Noun Phrases are: 
[The difference, this technique,  other machine learning technique, CART, very little input, the analyst]

>> Named Entities are: 
[] 

------------------- Sentence 5 -------------------

This is in 


>> Tokens are: 
[] 

>> PoS Tags are: 
[] 

>> Dependency Tags are: 
[]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 46 =================================

Yogesh Singh, Pradeep Kumar Bhatia & Omprakash Sangwan  

------------------- Sentence 1 -------------------

Yogesh Singh, Pradeep Kumar Bhatia & Omprakash Sangwan   


>> Tokens are: 
[Yogesh, Singh, ,, Pradeep, Kumar, Bhatia, &, Omprakash, Sangwan,  ] 

>> PoS Tags are: 
[('Yogesh', 'PROPN'), ('Singh', 'PROPN'), (',', 'PUNCT'), ('Pradeep', 'PROPN'), ('Kumar', 'PROPN'), ('Bhatia', 'PROPN'), ('&', 'CCONJ'), ('Omprakash', 'PROPN'), ('Sangwan', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Yogesh', 'compound'), ('Singh', 'ROOT'), (',', 'punct'), ('Pradeep', 'compound'), ('Kumar', 'compound'), ('Bhatia', 'conj'), ('&', 'cc'), ('Omprakash', 'compound'), ('Sangwan', 'conj'), (' ', 'punct')]

>> Bigrams: 
[[Yogesh, Singh], [Singh, ,], [,, Pradeep], [Pradeep, Kumar], [Kumar, Bhatia], [Bhatia, &], [&, Omprakash], [Omprakash, Sangwan], [Sangwan,  ]]

>> Trigrams: 
[[Yogesh, Singh, ,], [Singh, ,, Pradeep], [,, Pradeep, Kumar], [Pradeep, Kumar, Bhatia], [Kumar, Bhatia, &], [Bhatia, &, Omprakash], [&, Omprakash, Sangwan], [Omprakash, Sangwan,  ]]

>> Noun Phrases are: 
[Yogesh Singh, Pradeep Kumar Bhatia, Omprakash Sangwan]

>> Named Entities are: 
[('Yogesh Singh', 'PERSON'), ('Kumar Bhatia & Omprakash Sangwan', 'ORG')] 


================================ Paragraph 47 =================================

International Journal of Computer Science and Security, Volume (1) : Issue (1) 76  

------------------- Sentence 1 -------------------

International Journal of Computer Science and Security, Volume (1) : Issue (1) 76   


>> Tokens are: 
[International, Journal, Computer, Science, Security, ,, Volume, (, 1, ), :, Issue, (, 1, ), 76,  ] 

>> PoS Tags are: 
[('International', 'PROPN'), ('Journal', 'PROPN'), ('Computer', 'PROPN'), ('Science', 'PROPN'), ('Security', 'PROPN'), (',', 'PUNCT'), ('Volume', 'NOUN'), ('(', 'PUNCT'), ('1', 'NUM'), (')', 'PUNCT'), (':', 'PUNCT'), ('Issue', 'NOUN'), ('(', 'PUNCT'), ('1', 'NUM'), (')', 'PUNCT'), ('76', 'NUM'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('International', 'compound'), ('Journal', 'ROOT'), ('Computer', 'compound'), ('Science', 'pobj'), ('Security', 'conj'), (',', 'punct'), ('Volume', 'appos'), ('(', 'punct'), ('1', 'appos'), (')', 'punct'), (':', 'punct'), ('Issue', 'appos'), ('(', 'punct'), ('1', 'appos'), (')', 'punct'), ('76', 'nummod'), (' ', 'appos')]

>> Bigrams: 
[[International, Journal], [Journal, Computer], [Computer, Science], [Science, Security], [Security, ,], [,, Volume], [Volume, (], [(, 1], [1, )], [), :], [:, Issue], [Issue, (], [(, 1], [1, )], [), 76], [76,  ]]

>> Trigrams: 
[[International, Journal, Computer], [Journal, Computer, Science], [Computer, Science, Security], [Science, Security, ,], [Security, ,, Volume], [,, Volume, (], [Volume, (, 1], [(, 1, )], [1, ), :], [), :, Issue], [:, Issue, (], [Issue, (, 1], [(, 1, )], [1, ), 76], [), 76,  ]]

>> Noun Phrases are: 
[International Journal, Computer Science, Security, Volume, Issue]

>> Named Entities are: 
[('International Journal of Computer Science and Security, Volume', 'ORG'), ('1', 'CARDINAL'), ('1', 'CARDINAL'), ('76', 'DATE')] 


================================ Paragraph 48 =================================

contrast to other technique where extensive input from the analyst, the analysis of interim results  and modification of method used is needed.  Before going into the details of CART we identify the  three classes and two kinds of variables, which are important while defining classification and  regression problems.  There are three main classes of variables:  1) Target variable -- The “target variable” is the variable whose values are to be modeled and  predicted by other variables. It is analogous to the dependent variable in linear regression. There  must be one and only one target variable in a decision tree analysis.   2) Predictor variable -- A “predictor variable” is a variable whose values will be used to predict the  value of the target variable. It is analogous to the independent in linear regression. There must be  at least one predictor variable specified for decision tree analysis; there may be many predictor  variables.   3) Weight variable -- You can specify a “weight variable”. If a weight variable is specified, it must  a numeric (continuous) variable whose values are greater than or equal to 0 (zero). The value of  the weight variable specifies the weight given to a row in the dataset.   There are 2 main kinds of variables:  1) Continuous variables -- A continuous variable has numeric values such as 1, 2, 3.14, -5, etc.  The relative magnitude of the values is significant (e.g.-, a value of 2 indicates twice the  magnitude of 1). Examples of continuous variables are blood pressure, height, weight, income,  age, and probability of illness. Some programs call continuous variables “ordered” or “monotonic”  variables.   2) Categorical variables -- A categorical variable has values that function as labels rather than as  numbers. Some programs call categorical variables “nominal” variables. For example, a  categorical variable for gender might use the value 1 for male and 2 for female. The actual  magnitude of the value is not significant; coding male as 7 and female as 3 would work just as  well   CART builds classification and regression trees for predicting continuous dependent variables  (regression) and categorical predictor variables (classification).  Regression-type problems: These are generally those where one attempts to predict the values of  a continuous variable from one or more continuous and/or categorical predictor variables.  Classification-type problems: These are generally those where one attempts to predict values of a  categorical dependent variable from one or more continuous and/or categorical predictor  variables.  CART is a non-parametric statistical methodology developed for analyzing classification issues  either from categorical or continuous dependent variables [24, 25]. If the dependent variable is  categorical, CART produces a classification tree. When the dependent variable is continuous, it  produces a regression tree.      4.2  Binary Recursive Partitioning  Consider the problem of selecting the best size and type of laryngoscope blade for pediatric  patients undergoing intubations [20]. The outcome variable, the best blade for each patient (as  determined by a consulting pediatric airway specialist), has three possible values: Miller 0, Wis- Hipple 1.5, and Mac 2. The two-predictor variables are measurements of neck length and or  pharyngeal height. The smallest patients are best incubated with the Miller 0, medium sized  patients with the Wis-Hipple 1.5, and the largest patients with the Mac 2.     CART is basically used to avoid the disadvantage of the regression techniques.  CART analysis  is a form of binary recursive partitioning [20]. The term “binary” implies that each node in a  decision tree can only be split into two groups. Thus, each node can be split into two child nodes,  in which case the original node is called a parent node. The term “recursive” refers to the fact that  the binary partitioning process can be applied over and over again. Thus, each parent node can  give rise to two child nodes and, in turn, each of these child nodes may themselves be split,  forming additional children. The term “partitioning” refers to the fact that the dataset is split into  sections or partitioned.    

------------------- Sentence 1 -------------------

contrast to other technique where extensive input from the analyst, the analysis of interim results  and modification of method used is needed. 


>> Tokens are: 
[contrast, technique, extensive, input, analyst, ,, analysis, interim, results,  , modification, method, needed, .] 

>> PoS Tags are: 
[('contrast', 'NOUN'), ('technique', 'NOUN'), ('extensive', 'ADJ'), ('input', 'NOUN'), ('analyst', 'NOUN'), (',', 'PUNCT'), ('analysis', 'NOUN'), ('interim', 'ADJ'), ('results', 'NOUN'), (' ', 'SPACE'), ('modification', 'NOUN'), ('method', 'NOUN'), ('needed', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('contrast', 'ROOT'), ('technique', 'pobj'), ('extensive', 'amod'), ('input', 'nsubjpass'), ('analyst', 'pobj'), (',', 'punct'), ('analysis', 'appos'), ('interim', 'amod'), ('results', 'pobj'), (' ', 'appos'), ('modification', 'conj'), ('method', 'pobj'), ('needed', 'relcl'), ('.', 'punct')]

>> Bigrams: 
[[contrast, technique], [technique, extensive], [extensive, input], [input, analyst], [analyst, ,], [,, analysis], [analysis, interim], [interim, results], [results,  ], [ , modification], [modification, method], [method, needed], [needed, .]]

>> Trigrams: 
[[contrast, technique, extensive], [technique, extensive, input], [extensive, input, analyst], [input, analyst, ,], [analyst, ,, analysis], [,, analysis, interim], [analysis, interim, results], [interim, results,  ], [results,  , modification], [ , modification, method], [modification, method, needed], [method, needed, .]]

>> Noun Phrases are: 
[contrast, other technique, extensive input, the analyst, the analysis, interim results, modification, method]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

 Before going into the details of CART we identify the  three classes and two kinds of variables, which are important while defining classification and  regression problems. 


>> Tokens are: 
[ , going, details, CART, identify,  , classes, kinds, variables, ,, important, defining, classification,  , regression, problems, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('going', 'VERB'), ('details', 'NOUN'), ('CART', 'NOUN'), ('identify', 'VERB'), (' ', 'SPACE'), ('classes', 'NOUN'), ('kinds', 'NOUN'), ('variables', 'NOUN'), (',', 'PUNCT'), ('important', 'ADJ'), ('defining', 'VERB'), ('classification', 'NOUN'), (' ', 'SPACE'), ('regression', 'NOUN'), ('problems', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'dep'), ('going', 'pcomp'), ('details', 'pobj'), ('CART', 'pobj'), ('identify', 'ROOT'), (' ', 'amod'), ('classes', 'dobj'), ('kinds', 'conj'), ('variables', 'pobj'), (',', 'punct'), ('important', 'acomp'), ('defining', 'advcl'), ('classification', 'dobj'), (' ', 'conj'), ('regression', 'compound'), ('problems', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[ , going], [going, details], [details, CART], [CART, identify], [identify,  ], [ , classes], [classes, kinds], [kinds, variables], [variables, ,], [,, important], [important, defining], [defining, classification], [classification,  ], [ , regression], [regression, problems], [problems, .]]

>> Trigrams: 
[[ , going, details], [going, details, CART], [details, CART, identify], [CART, identify,  ], [identify,  , classes], [ , classes, kinds], [classes, kinds, variables], [kinds, variables, ,], [variables, ,, important], [,, important, defining], [important, defining, classification], [defining, classification,  ], [classification,  , regression], [ , regression, problems], [regression, problems, .]]

>> Noun Phrases are: 
[the details, CART, we, the  three classes, two kinds, variables, classification, regression problems]

>> Named Entities are: 
[('CART', 'ORG'), ('three', 'CARDINAL'), ('two', 'CARDINAL')] 

------------------- Sentence 3 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

There are three main classes of variables:  1) Target variable -- The “target variable” is the variable whose values are to be modeled and  predicted by other variables. 


>> Tokens are: 
[main, classes, variables, :,  , 1, ), Target, variable, --, “, target, variable, ”, variable, values, modeled,  , predicted, variables, .] 

>> PoS Tags are: 
[('main', 'ADJ'), ('classes', 'NOUN'), ('variables', 'NOUN'), (':', 'PUNCT'), (' ', 'SPACE'), ('1', 'X'), (')', 'PUNCT'), ('Target', 'NOUN'), ('variable', 'NOUN'), ('--', 'PUNCT'), ('“', 'PUNCT'), ('target', 'NOUN'), ('variable', 'NOUN'), ('”', 'PUNCT'), ('variable', 'NOUN'), ('values', 'NOUN'), ('modeled', 'VERB'), (' ', 'SPACE'), ('predicted', 'VERB'), ('variables', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('main', 'amod'), ('classes', 'attr'), ('variables', 'pobj'), (':', 'punct'), (' ', 'appos'), ('1', 'nummod'), (')', 'punct'), ('Target', 'compound'), ('variable', 'appos'), ('--', 'punct'), ('“', 'punct'), ('target', 'compound'), ('variable', 'appos'), ('”', 'punct'), ('variable', 'attr'), ('values', 'nsubj'), ('modeled', 'xcomp'), (' ', 'nsubj'), ('predicted', 'conj'), ('variables', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[main, classes], [classes, variables], [variables, :], [:,  ], [ , 1], [1, )], [), Target], [Target, variable], [variable, --], [--, “], [“, target], [target, variable], [variable, ”], [”, variable], [variable, values], [values, modeled], [modeled,  ], [ , predicted], [predicted, variables], [variables, .]]

>> Trigrams: 
[[main, classes, variables], [classes, variables, :], [variables, :,  ], [:,  , 1], [ , 1, )], [1, ), Target], [), Target, variable], [Target, variable, --], [variable, --, “], [--, “, target], [“, target, variable], [target, variable, ”], [variable, ”, variable], [”, variable, values], [variable, values, modeled], [values, modeled,  ], [modeled,  , predicted], [ , predicted, variables], [predicted, variables, .]]

>> Noun Phrases are: 
[three main classes, variables, Target variable, The “target variable, the variable, whose values, other variables]

>> Named Entities are: 
[('three', 'CARDINAL'), ('1', 'CARDINAL')] 

------------------- Sentence 5 -------------------

It is analogous to the dependent variable in linear regression. 


>> Tokens are: 
[analogous, dependent, variable, linear, regression, .] 

>> PoS Tags are: 
[('analogous', 'ADJ'), ('dependent', 'ADJ'), ('variable', 'NOUN'), ('linear', 'ADJ'), ('regression', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('analogous', 'acomp'), ('dependent', 'amod'), ('variable', 'pobj'), ('linear', 'amod'), ('regression', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[analogous, dependent], [dependent, variable], [variable, linear], [linear, regression], [regression, .]]

>> Trigrams: 
[[analogous, dependent, variable], [dependent, variable, linear], [variable, linear, regression], [linear, regression, .]]

>> Noun Phrases are: 
[It, the dependent variable, linear regression]

>> Named Entities are: 
[] 

------------------- Sentence 6 -------------------

There  must be one and only one target variable in a decision tree analysis. 


>> Tokens are: 
[ , target, variable, decision, tree, analysis, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('target', 'NOUN'), ('variable', 'NOUN'), ('decision', 'NOUN'), ('tree', 'NOUN'), ('analysis', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'nsubj'), ('target', 'compound'), ('variable', 'conj'), ('decision', 'compound'), ('tree', 'compound'), ('analysis', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[ , target], [target, variable], [variable, decision], [decision, tree], [tree, analysis], [analysis, .]]

>> Trigrams: 
[[ , target, variable], [target, variable, decision], [variable, decision, tree], [decision, tree, analysis], [tree, analysis, .]]

>> Noun Phrases are: 
[only one target variable, a decision tree analysis]

>> Named Entities are: 
[('only one', 'CARDINAL')] 

------------------- Sentence 7 -------------------

  2) 


>> Tokens are: 
[  , 2, )] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('2', 'NUM'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('2', 'nummod'), (')', 'punct')]

>> Bigrams: 
[[  , 2], [2, )]]

>> Trigrams: 
[[  , 2, )]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('2', 'CARDINAL')] 

------------------- Sentence 8 -------------------

Predictor variable -- A “predictor variable” is a variable whose values will be used to predict the  value of the target variable. 


>> Tokens are: 
[Predictor, variable, --, “, predictor, variable, ”, variable, values, predict,  , value, target, variable, .] 

>> PoS Tags are: 
[('Predictor', 'PROPN'), ('variable', 'NOUN'), ('--', 'PUNCT'), ('“', 'PUNCT'), ('predictor', 'NOUN'), ('variable', 'NOUN'), ('”', 'PUNCT'), ('variable', 'NOUN'), ('values', 'NOUN'), ('predict', 'VERB'), (' ', 'SPACE'), ('value', 'NOUN'), ('target', 'NOUN'), ('variable', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Predictor', 'compound'), ('variable', 'nsubj'), ('--', 'punct'), ('“', 'punct'), ('predictor', 'compound'), ('variable', 'appos'), ('”', 'punct'), ('variable', 'attr'), ('values', 'nsubjpass'), ('predict', 'xcomp'), (' ', 'compound'), ('value', 'dobj'), ('target', 'compound'), ('variable', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Predictor, variable], [variable, --], [--, “], [“, predictor], [predictor, variable], [variable, ”], [”, variable], [variable, values], [values, predict], [predict,  ], [ , value], [value, target], [target, variable], [variable, .]]

>> Trigrams: 
[[Predictor, variable, --], [variable, --, “], [--, “, predictor], [“, predictor, variable], [predictor, variable, ”], [variable, ”, variable], [”, variable, values], [variable, values, predict], [values, predict,  ], [predict,  , value], [ , value, target], [value, target, variable], [target, variable, .]]

>> Noun Phrases are: 
[Predictor variable, A “predictor variable, a variable, whose values, the  value, the target variable]

>> Named Entities are: 
[] 

------------------- Sentence 9 -------------------

It is analogous to the independent in linear regression. 


>> Tokens are: 
[analogous, independent, linear, regression, .] 

>> PoS Tags are: 
[('analogous', 'ADJ'), ('independent', 'NOUN'), ('linear', 'ADJ'), ('regression', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('analogous', 'acomp'), ('independent', 'pobj'), ('linear', 'amod'), ('regression', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[analogous, independent], [independent, linear], [linear, regression], [regression, .]]

>> Trigrams: 
[[analogous, independent, linear], [independent, linear, regression], [linear, regression, .]]

>> Noun Phrases are: 
[It, the independent, linear regression]

>> Named Entities are: 
[] 

------------------- Sentence 10 -------------------

There must be  at least one predictor variable specified for decision tree analysis; there may be many predictor  variables. 


>> Tokens are: 
[ , predictor, variable, specified, decision, tree, analysis, ;, predictor,  , variables, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('predictor', 'NOUN'), ('variable', 'NOUN'), ('specified', 'VERB'), ('decision', 'NOUN'), ('tree', 'NOUN'), ('analysis', 'NOUN'), (';', 'PUNCT'), ('predictor', 'NOUN'), (' ', 'SPACE'), ('variables', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'attr'), ('predictor', 'compound'), ('variable', 'nsubj'), ('specified', 'relcl'), ('decision', 'compound'), ('tree', 'compound'), ('analysis', 'pobj'), (';', 'punct'), ('predictor', 'nmod'), (' ', 'compound'), ('variables', 'attr'), ('.', 'punct')]

>> Bigrams: 
[[ , predictor], [predictor, variable], [variable, specified], [specified, decision], [decision, tree], [tree, analysis], [analysis, ;], [;, predictor], [predictor,  ], [ , variables], [variables, .]]

>> Trigrams: 
[[ , predictor, variable], [predictor, variable, specified], [variable, specified, decision], [specified, decision, tree], [decision, tree, analysis], [tree, analysis, ;], [analysis, ;, predictor], [;, predictor,  ], [predictor,  , variables], [ , variables, .]]

>> Noun Phrases are: 
[at least one predictor variable, decision tree analysis, many predictor  variables]

>> Named Entities are: 
[('at least one', 'CARDINAL')] 

------------------- Sentence 11 -------------------

  3) 


>> Tokens are: 
[  , 3, )] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('3', 'NUM'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('3', 'nummod'), (')', 'punct')]

>> Bigrams: 
[[  , 3], [3, )]]

>> Trigrams: 
[[  , 3, )]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('3', 'CARDINAL')] 

------------------- Sentence 12 -------------------

Weight variable -- 


>> Tokens are: 
[Weight, variable, --] 

>> PoS Tags are: 
[('Weight', 'NOUN'), ('variable', 'NOUN'), ('--', 'PUNCT')] 

>> Dependency Tags are: 
[('Weight', 'compound'), ('variable', 'ROOT'), ('--', 'punct')]

>> Bigrams: 
[[Weight, variable], [variable, --]]

>> Trigrams: 
[[Weight, variable, --]]

>> Noun Phrases are: 
[Weight variable]

>> Named Entities are: 
[] 

------------------- Sentence 13 -------------------

You can specify a “weight variable”. 


>> Tokens are: 
[specify, “, weight, variable, ”, .] 

>> PoS Tags are: 
[('specify', 'VERB'), ('“', 'PUNCT'), ('weight', 'NOUN'), ('variable', 'NOUN'), ('”', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('specify', 'ROOT'), ('“', 'punct'), ('weight', 'compound'), ('variable', 'dobj'), ('”', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[specify, “], [“, weight], [weight, variable], [variable, ”], [”, .]]

>> Trigrams: 
[[specify, “, weight], [“, weight, variable], [weight, variable, ”], [variable, ”, .]]

>> Noun Phrases are: 
[You, a “weight variable]

>> Named Entities are: 
[] 

------------------- Sentence 14 -------------------

If a weight variable is specified, it must  a numeric (continuous) variable whose values are greater than or equal to 0 (zero). 


>> Tokens are: 
[weight, variable, specified, ,,  , numeric, (, continuous, ), variable, values, greater, equal, 0, (, zero, ), .] 

>> PoS Tags are: 
[('weight', 'NOUN'), ('variable', 'NOUN'), ('specified', 'VERB'), (',', 'PUNCT'), (' ', 'SPACE'), ('numeric', 'PROPN'), ('(', 'PUNCT'), ('continuous', 'ADJ'), (')', 'PUNCT'), ('variable', 'NOUN'), ('values', 'NOUN'), ('greater', 'ADJ'), ('equal', 'ADJ'), ('0', 'NUM'), ('(', 'PUNCT'), ('zero', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('weight', 'compound'), ('variable', 'nsubjpass'), ('specified', 'advcl'), (',', 'punct'), (' ', 'ROOT'), ('numeric', 'nmod'), ('(', 'punct'), ('continuous', 'amod'), (')', 'punct'), ('variable', 'dobj'), ('values', 'nsubj'), ('greater', 'acomp'), ('equal', 'conj'), ('0', 'pobj'), ('(', 'punct'), ('zero', 'npadvmod'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[weight, variable], [variable, specified], [specified, ,], [,,  ], [ , numeric], [numeric, (], [(, continuous], [continuous, )], [), variable], [variable, values], [values, greater], [greater, equal], [equal, 0], [0, (], [(, zero], [zero, )], [), .]]

>> Trigrams: 
[[weight, variable, specified], [variable, specified, ,], [specified, ,,  ], [,,  , numeric], [ , numeric, (], [numeric, (, continuous], [(, continuous, )], [continuous, ), variable], [), variable, values], [variable, values, greater], [values, greater, equal], [greater, equal, 0], [equal, 0, (], [0, (, zero], [(, zero, )], [zero, ), .]]

>> Noun Phrases are: 
[a weight variable, it, a numeric (continuous) variable, whose values]

>> Named Entities are: 
[('0', 'CARDINAL'), ('zero', 'CARDINAL')] 

------------------- Sentence 15 -------------------

The value of  the weight variable specifies the weight given to a row in the dataset. 


>> Tokens are: 
[value,  , weight, variable, specifies, weight, given, row, dataset, .] 

>> PoS Tags are: 
[('value', 'NOUN'), (' ', 'SPACE'), ('weight', 'NOUN'), ('variable', 'NOUN'), ('specifies', 'VERB'), ('weight', 'NOUN'), ('given', 'VERB'), ('row', 'NOUN'), ('dataset', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('value', 'nsubj'), (' ', 'pobj'), ('weight', 'compound'), ('variable', 'nsubj'), ('specifies', 'ROOT'), ('weight', 'dobj'), ('given', 'acl'), ('row', 'pobj'), ('dataset', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[value,  ], [ , weight], [weight, variable], [variable, specifies], [specifies, weight], [weight, given], [given, row], [row, dataset], [dataset, .]]

>> Trigrams: 
[[value,  , weight], [ , weight, variable], [weight, variable, specifies], [variable, specifies, weight], [specifies, weight, given], [weight, given, row], [given, row, dataset], [row, dataset, .]]

>> Noun Phrases are: 
[The value, the weight variable, the weight, a row, the dataset]

>> Named Entities are: 
[] 

------------------- Sentence 16 -------------------

  There are 2 main kinds of variables:  1) Continuous variables -- A continuous variable has numeric values such as 1, 2, 3.14, -5, etc.   


>> Tokens are: 
[  , 2, main, kinds, variables, :,  , 1, ), Continuous, variables, --, continuous, variable, numeric, values, 1, ,, 2, ,, 3.14, ,, -5, ,, etc, .,  ] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('2', 'NUM'), ('main', 'ADJ'), ('kinds', 'NOUN'), ('variables', 'NOUN'), (':', 'PUNCT'), (' ', 'SPACE'), ('1', 'X'), (')', 'PUNCT'), ('Continuous', 'ADJ'), ('variables', 'NOUN'), ('--', 'PUNCT'), ('continuous', 'ADJ'), ('variable', 'NOUN'), ('numeric', 'ADJ'), ('values', 'NOUN'), ('1', 'NUM'), (',', 'PUNCT'), ('2', 'NUM'), (',', 'PUNCT'), ('3.14', 'NUM'), (',', 'PUNCT'), ('-5', 'INTJ'), (',', 'PUNCT'), ('etc', 'X'), ('.', 'X'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'dep'), ('2', 'nummod'), ('main', 'amod'), ('kinds', 'attr'), ('variables', 'pobj'), (':', 'punct'), (' ', 'appos'), ('1', 'nummod'), (')', 'punct'), ('Continuous', 'amod'), ('variables', 'appos'), ('--', 'punct'), ('continuous', 'amod'), ('variable', 'nsubj'), ('numeric', 'amod'), ('values', 'dobj'), ('1', 'pobj'), (',', 'punct'), ('2', 'conj'), (',', 'punct'), ('3.14', 'pobj'), (',', 'punct'), ('-5', 'intj'), (',', 'punct'), ('etc', 'pobj'), ('.', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[  , 2], [2, main], [main, kinds], [kinds, variables], [variables, :], [:,  ], [ , 1], [1, )], [), Continuous], [Continuous, variables], [variables, --], [--, continuous], [continuous, variable], [variable, numeric], [numeric, values], [values, 1], [1, ,], [,, 2], [2, ,], [,, 3.14], [3.14, ,], [,, -5], [-5, ,], [,, etc], [etc, .], [.,  ]]

>> Trigrams: 
[[  , 2, main], [2, main, kinds], [main, kinds, variables], [kinds, variables, :], [variables, :,  ], [:,  , 1], [ , 1, )], [1, ), Continuous], [), Continuous, variables], [Continuous, variables, --], [variables, --, continuous], [--, continuous, variable], [continuous, variable, numeric], [variable, numeric, values], [numeric, values, 1], [values, 1, ,], [1, ,, 2], [,, 2, ,], [2, ,, 3.14], [,, 3.14, ,], [3.14, ,, -5], [,, -5, ,], [-5, ,, etc], [,, etc, .], [etc, .,  ]]

>> Noun Phrases are: 
[2 main kinds, variables, Continuous variables, A continuous variable, numeric values]

>> Named Entities are: 
[('2', 'CARDINAL'), ('1', 'CARDINAL'), ('Continuous', 'PERSON'), ('1', 'CARDINAL'), ('3.14', 'CARDINAL')] 

------------------- Sentence 17 -------------------

The relative magnitude of the values is significant (e.g.-, a value of 2 indicates twice the  magnitude of 1). 


>> Tokens are: 
[relative, magnitude, values, significant, (, e.g.-, ,, value, 2, indicates, twice,  , magnitude, 1, ), .] 

>> PoS Tags are: 
[('relative', 'ADJ'), ('magnitude', 'NOUN'), ('values', 'NOUN'), ('significant', 'ADJ'), ('(', 'PUNCT'), ('e.g.-', 'PROPN'), (',', 'PUNCT'), ('value', 'NOUN'), ('2', 'NUM'), ('indicates', 'VERB'), ('twice', 'DET'), (' ', 'SPACE'), ('magnitude', 'NOUN'), ('1', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('relative', 'amod'), ('magnitude', 'nsubj'), ('values', 'pobj'), ('significant', 'acomp'), ('(', 'punct'), ('e.g.-', 'dep'), (',', 'punct'), ('value', 'appos'), ('2', 'pobj'), ('indicates', 'ccomp'), ('twice', 'predet'), (' ', 'compound'), ('magnitude', 'dobj'), ('1', 'pobj'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[relative, magnitude], [magnitude, values], [values, significant], [significant, (], [(, e.g.-], [e.g.-, ,], [,, value], [value, 2], [2, indicates], [indicates, twice], [twice,  ], [ , magnitude], [magnitude, 1], [1, )], [), .]]

>> Trigrams: 
[[relative, magnitude, values], [magnitude, values, significant], [values, significant, (], [significant, (, e.g.-], [(, e.g.-, ,], [e.g.-, ,, value], [,, value, 2], [value, 2, indicates], [2, indicates, twice], [indicates, twice,  ], [twice,  , magnitude], [ , magnitude, 1], [magnitude, 1, )], [1, ), .]]

>> Noun Phrases are: 
[The relative magnitude, the values, a value, twice the  magnitude]

>> Named Entities are: 
[('e.g.-', 'ORG'), ('2', 'CARDINAL')] 

------------------- Sentence 18 -------------------

Examples of continuous variables are blood pressure, height, weight, income,  age, and probability of illness. 


>> Tokens are: 
[Examples, continuous, variables, blood, pressure, ,, height, ,, weight, ,, income, ,,  , age, ,, probability, illness, .] 

>> PoS Tags are: 
[('Examples', 'NOUN'), ('continuous', 'ADJ'), ('variables', 'NOUN'), ('blood', 'NOUN'), ('pressure', 'NOUN'), (',', 'PUNCT'), ('height', 'NOUN'), (',', 'PUNCT'), ('weight', 'NOUN'), (',', 'PUNCT'), ('income', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('age', 'NOUN'), (',', 'PUNCT'), ('probability', 'NOUN'), ('illness', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Examples', 'nsubj'), ('continuous', 'amod'), ('variables', 'pobj'), ('blood', 'compound'), ('pressure', 'attr'), (',', 'punct'), ('height', 'conj'), (',', 'punct'), ('weight', 'conj'), (',', 'punct'), ('income', 'conj'), (',', 'punct'), (' ', 'conj'), ('age', 'conj'), (',', 'punct'), ('probability', 'conj'), ('illness', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Examples, continuous], [continuous, variables], [variables, blood], [blood, pressure], [pressure, ,], [,, height], [height, ,], [,, weight], [weight, ,], [,, income], [income, ,], [,,  ], [ , age], [age, ,], [,, probability], [probability, illness], [illness, .]]

>> Trigrams: 
[[Examples, continuous, variables], [continuous, variables, blood], [variables, blood, pressure], [blood, pressure, ,], [pressure, ,, height], [,, height, ,], [height, ,, weight], [,, weight, ,], [weight, ,, income], [,, income, ,], [income, ,,  ], [,,  , age], [ , age, ,], [age, ,, probability], [,, probability, illness], [probability, illness, .]]

>> Noun Phrases are: 
[Examples, continuous variables, blood pressure, height, weight, income, age, probability, illness]

>> Named Entities are: 
[] 

------------------- Sentence 19 -------------------

Some programs call continuous variables “ordered” or “monotonic”  variables. 


>> Tokens are: 
[programs, continuous, variables, “, ordered, ”, “, monotonic, ”,  , variables, .] 

>> PoS Tags are: 
[('programs', 'NOUN'), ('continuous', 'ADJ'), ('variables', 'NOUN'), ('“', 'PUNCT'), ('ordered', 'VERB'), ('”', 'PUNCT'), ('“', 'PUNCT'), ('monotonic', 'ADJ'), ('”', 'PUNCT'), (' ', 'SPACE'), ('variables', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('programs', 'nsubj'), ('continuous', 'amod'), ('variables', 'dobj'), ('“', 'punct'), ('ordered', 'acl'), ('”', 'punct'), ('“', 'punct'), ('monotonic', 'nmod'), ('”', 'punct'), (' ', 'compound'), ('variables', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[programs, continuous], [continuous, variables], [variables, “], [“, ordered], [ordered, ”], [”, “], [“, monotonic], [monotonic, ”], [”,  ], [ , variables], [variables, .]]

>> Trigrams: 
[[programs, continuous, variables], [continuous, variables, “], [variables, “, ordered], [“, ordered, ”], [ordered, ”, “], [”, “, monotonic], [“, monotonic, ”], [monotonic, ”,  ], [”,  , variables], [ , variables, .]]

>> Noun Phrases are: 
[Some programs, continuous variables]

>> Named Entities are: 
[] 

------------------- Sentence 20 -------------------

  2) 


>> Tokens are: 
[  , 2, )] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('2', 'NUM'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('2', 'nummod'), (')', 'punct')]

>> Bigrams: 
[[  , 2], [2, )]]

>> Trigrams: 
[[  , 2, )]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('2', 'CARDINAL')] 

------------------- Sentence 21 -------------------

Categorical variables -- A categorical variable has values that function as labels rather than as  numbers. 


>> Tokens are: 
[Categorical, variables, --, categorical, variable, values, function, labels,  , numbers, .] 

>> PoS Tags are: 
[('Categorical', 'ADJ'), ('variables', 'NOUN'), ('--', 'PUNCT'), ('categorical', 'ADJ'), ('variable', 'NOUN'), ('values', 'NOUN'), ('function', 'VERB'), ('labels', 'NOUN'), (' ', 'SPACE'), ('numbers', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Categorical', 'amod'), ('variables', 'nsubj'), ('--', 'punct'), ('categorical', 'amod'), ('variable', 'nsubj'), ('values', 'dobj'), ('function', 'relcl'), ('labels', 'pobj'), (' ', 'compound'), ('numbers', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Categorical, variables], [variables, --], [--, categorical], [categorical, variable], [variable, values], [values, function], [function, labels], [labels,  ], [ , numbers], [numbers, .]]

>> Trigrams: 
[[Categorical, variables, --], [variables, --, categorical], [--, categorical, variable], [categorical, variable, values], [variable, values, function], [values, function, labels], [function, labels,  ], [labels,  , numbers], [ , numbers, .]]

>> Noun Phrases are: 
[Categorical variables, A categorical variable, values, labels,  numbers]

>> Named Entities are: 
[] 

------------------- Sentence 22 -------------------

Some programs call categorical variables “nominal” variables. 


>> Tokens are: 
[programs, categorical, variables, “, nominal, ”, variables, .] 

>> PoS Tags are: 
[('programs', 'NOUN'), ('categorical', 'ADJ'), ('variables', 'NOUN'), ('“', 'PUNCT'), ('nominal', 'ADJ'), ('”', 'PUNCT'), ('variables', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('programs', 'nsubj'), ('categorical', 'amod'), ('variables', 'nmod'), ('“', 'punct'), ('nominal', 'amod'), ('”', 'punct'), ('variables', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[programs, categorical], [categorical, variables], [variables, “], [“, nominal], [nominal, ”], [”, variables], [variables, .]]

>> Trigrams: 
[[programs, categorical, variables], [categorical, variables, “], [variables, “, nominal], [“, nominal, ”], [nominal, ”, variables], [”, variables, .]]

>> Noun Phrases are: 
[Some programs, categorical variables “nominal” variables]

>> Named Entities are: 
[] 

------------------- Sentence 23 -------------------

For example, a  categorical variable for gender might use the value 1 for male and 2 for female. 


>> Tokens are: 
[example, ,,  , categorical, variable, gender, use, value, 1, male, 2, female, .] 

>> PoS Tags are: 
[('example', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('categorical', 'ADJ'), ('variable', 'NOUN'), ('gender', 'NOUN'), ('use', 'VERB'), ('value', 'NOUN'), ('1', 'NUM'), ('male', 'NOUN'), ('2', 'NUM'), ('female', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('example', 'pobj'), (',', 'punct'), (' ', 'nmod'), ('categorical', 'amod'), ('variable', 'nsubj'), ('gender', 'pobj'), ('use', 'ROOT'), ('value', 'dobj'), ('1', 'dobj'), ('male', 'pobj'), ('2', 'conj'), ('female', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[example, ,], [,,  ], [ , categorical], [categorical, variable], [variable, gender], [gender, use], [use, value], [value, 1], [1, male], [male, 2], [2, female], [female, .]]

>> Trigrams: 
[[example, ,,  ], [,,  , categorical], [ , categorical, variable], [categorical, variable, gender], [variable, gender, use], [gender, use, value], [use, value, 1], [value, 1, male], [1, male, 2], [male, 2, female], [2, female, .]]

>> Noun Phrases are: 
[example, a  categorical variable, gender, the value, male, female]

>> Named Entities are: 
[('1', 'CARDINAL'), ('2', 'CARDINAL')] 

------------------- Sentence 24 -------------------

The actual  magnitude of the value is not significant; coding male as 7 and female as 3 would work just as  well   CART builds classification and regression trees for predicting continuous dependent variables  (regression) and categorical predictor variables (classification). 


>> Tokens are: 
[actual,  , magnitude, value, significant, ;, coding, male, 7, female, 3, work,  ,   , CART, builds, classification, regression, trees, predicting, continuous, dependent, variables,  , (, regression, ), categorical, predictor, variables, (, classification, ), .] 

>> PoS Tags are: 
[('actual', 'ADJ'), (' ', 'SPACE'), ('magnitude', 'NOUN'), ('value', 'NOUN'), ('significant', 'ADJ'), (';', 'PUNCT'), ('coding', 'VERB'), ('male', 'NOUN'), ('7', 'NUM'), ('female', 'ADJ'), ('3', 'NUM'), ('work', 'VERB'), (' ', 'SPACE'), ('  ', 'SPACE'), ('CART', 'NOUN'), ('builds', 'VERB'), ('classification', 'NOUN'), ('regression', 'NOUN'), ('trees', 'NOUN'), ('predicting', 'VERB'), ('continuous', 'ADJ'), ('dependent', 'ADJ'), ('variables', 'NOUN'), (' ', 'SPACE'), ('(', 'PUNCT'), ('regression', 'NOUN'), (')', 'PUNCT'), ('categorical', 'ADJ'), ('predictor', 'NOUN'), ('variables', 'NOUN'), ('(', 'PUNCT'), ('classification', 'NOUN'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('actual', 'amod'), (' ', 'compound'), ('magnitude', 'nsubj'), ('value', 'pobj'), ('significant', 'acomp'), (';', 'punct'), ('coding', 'amod'), ('male', 'nsubj'), ('7', 'pobj'), ('female', 'conj'), ('3', 'pobj'), ('work', 'ROOT'), (' ', 'nsubj'), ('  ', 'poss'), ('CART', 'nsubj'), ('builds', 'advcl'), ('classification', 'nmod'), ('regression', 'conj'), ('trees', 'dobj'), ('predicting', 'pcomp'), ('continuous', 'amod'), ('dependent', 'amod'), ('variables', 'dobj'), (' ', 'appos'), ('(', 'punct'), ('regression', 'appos'), (')', 'punct'), ('categorical', 'amod'), ('predictor', 'compound'), ('variables', 'conj'), ('(', 'punct'), ('classification', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[actual,  ], [ , magnitude], [magnitude, value], [value, significant], [significant, ;], [;, coding], [coding, male], [male, 7], [7, female], [female, 3], [3, work], [work,  ], [ ,   ], [  , CART], [CART, builds], [builds, classification], [classification, regression], [regression, trees], [trees, predicting], [predicting, continuous], [continuous, dependent], [dependent, variables], [variables,  ], [ , (], [(, regression], [regression, )], [), categorical], [categorical, predictor], [predictor, variables], [variables, (], [(, classification], [classification, )], [), .]]

>> Trigrams: 
[[actual,  , magnitude], [ , magnitude, value], [magnitude, value, significant], [value, significant, ;], [significant, ;, coding], [;, coding, male], [coding, male, 7], [male, 7, female], [7, female, 3], [female, 3, work], [3, work,  ], [work,  ,   ], [ ,   , CART], [  , CART, builds], [CART, builds, classification], [builds, classification, regression], [classification, regression, trees], [regression, trees, predicting], [trees, predicting, continuous], [predicting, continuous, dependent], [continuous, dependent, variables], [dependent, variables,  ], [variables,  , (], [ , (, regression], [(, regression, )], [regression, ), categorical], [), categorical, predictor], [categorical, predictor, variables], [predictor, variables, (], [variables, (, classification], [(, classification, )], [classification, ), .]]

>> Noun Phrases are: 
[The actual  magnitude, the value, coding male,   CART, classification and regression trees, continuous dependent variables, regression, categorical predictor variables, classification]

>> Named Entities are: 
[('CART', 'ORG')] 

------------------- Sentence 25 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 26 -------------------

Regression-type problems: These are generally those where one attempts to predict the values of  a continuous variable from one or more continuous and/or categorical predictor variables. 


>> Tokens are: 
[Regression, -, type, problems, :, generally, attempts, predict, values,  , continuous, variable, continuous, and/or, categorical, predictor, variables, .] 

>> PoS Tags are: 
[('Regression', 'NOUN'), ('-', 'PUNCT'), ('type', 'NOUN'), ('problems', 'NOUN'), (':', 'PUNCT'), ('generally', 'ADV'), ('attempts', 'VERB'), ('predict', 'VERB'), ('values', 'NOUN'), (' ', 'SPACE'), ('continuous', 'ADJ'), ('variable', 'NOUN'), ('continuous', 'ADJ'), ('and/or', 'CCONJ'), ('categorical', 'ADJ'), ('predictor', 'NOUN'), ('variables', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Regression', 'compound'), ('-', 'punct'), ('type', 'compound'), ('problems', 'dep'), (':', 'punct'), ('generally', 'advmod'), ('attempts', 'relcl'), ('predict', 'xcomp'), ('values', 'dobj'), (' ', 'pobj'), ('continuous', 'amod'), ('variable', 'dobj'), ('continuous', 'amod'), ('and/or', 'cc'), ('categorical', 'conj'), ('predictor', 'compound'), ('variables', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Regression, -], [-, type], [type, problems], [problems, :], [:, generally], [generally, attempts], [attempts, predict], [predict, values], [values,  ], [ , continuous], [continuous, variable], [variable, continuous], [continuous, and/or], [and/or, categorical], [categorical, predictor], [predictor, variables], [variables, .]]

>> Trigrams: 
[[Regression, -, type], [-, type, problems], [type, problems, :], [problems, :, generally], [:, generally, attempts], [generally, attempts, predict], [attempts, predict, values], [predict, values,  ], [values,  , continuous], [ , continuous, variable], [continuous, variable, continuous], [variable, continuous, and/or], [continuous, and/or, categorical], [and/or, categorical, predictor], [categorical, predictor, variables], [predictor, variables, .]]

>> Noun Phrases are: 
[the values, a continuous variable, one or more continuous and/or categorical predictor variables]

>> Named Entities are: 
[('one', 'CARDINAL'), ('one', 'CARDINAL')] 

------------------- Sentence 27 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 28 -------------------

Classification-type problems: These are generally those where one attempts to predict values of a  categorical dependent variable from one or more continuous and/or categorical predictor  variables. 


>> Tokens are: 
[Classification, -, type, problems, :, generally, attempts, predict, values,  , categorical, dependent, variable, continuous, and/or, categorical, predictor,  , variables, .] 

>> PoS Tags are: 
[('Classification', 'NOUN'), ('-', 'PUNCT'), ('type', 'NOUN'), ('problems', 'NOUN'), (':', 'PUNCT'), ('generally', 'ADV'), ('attempts', 'VERB'), ('predict', 'VERB'), ('values', 'NOUN'), (' ', 'SPACE'), ('categorical', 'ADJ'), ('dependent', 'ADJ'), ('variable', 'NOUN'), ('continuous', 'ADJ'), ('and/or', 'CCONJ'), ('categorical', 'ADJ'), ('predictor', 'NOUN'), (' ', 'SPACE'), ('variables', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Classification', 'compound'), ('-', 'punct'), ('type', 'compound'), ('problems', 'ROOT'), (':', 'punct'), ('generally', 'advmod'), ('attempts', 'relcl'), ('predict', 'xcomp'), ('values', 'dobj'), (' ', 'nmod'), ('categorical', 'amod'), ('dependent', 'amod'), ('variable', 'pobj'), ('continuous', 'conj'), ('and/or', 'cc'), ('categorical', 'conj'), ('predictor', 'nmod'), (' ', 'compound'), ('variables', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Classification, -], [-, type], [type, problems], [problems, :], [:, generally], [generally, attempts], [attempts, predict], [predict, values], [values,  ], [ , categorical], [categorical, dependent], [dependent, variable], [variable, continuous], [continuous, and/or], [and/or, categorical], [categorical, predictor], [predictor,  ], [ , variables], [variables, .]]

>> Trigrams: 
[[Classification, -, type], [-, type, problems], [type, problems, :], [problems, :, generally], [:, generally, attempts], [generally, attempts, predict], [attempts, predict, values], [predict, values,  ], [values,  , categorical], [ , categorical, dependent], [categorical, dependent, variable], [dependent, variable, continuous], [variable, continuous, and/or], [continuous, and/or, categorical], [and/or, categorical, predictor], [categorical, predictor,  ], [predictor,  , variables], [ , variables, .]]

>> Noun Phrases are: 
[Classification-type problems, values, a  categorical dependent variable, one or more continuous and/or categorical predictor  variables]

>> Named Entities are: 
[('one', 'CARDINAL'), ('one', 'CARDINAL')] 

------------------- Sentence 29 -------------------

 CART is a non-parametric statistical methodology developed for analyzing classification issues  either from categorical or continuous dependent variables [24, 25]. 


>> Tokens are: 
[ , CART, non, -, parametric, statistical, methodology, developed, analyzing, classification, issues,  , categorical, continuous, dependent, variables, [, 24, ,, 25, ], .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('CART', 'PROPN'), ('non', 'ADJ'), ('-', 'ADJ'), ('parametric', 'ADJ'), ('statistical', 'ADJ'), ('methodology', 'NOUN'), ('developed', 'VERB'), ('analyzing', 'VERB'), ('classification', 'NOUN'), ('issues', 'NOUN'), (' ', 'SPACE'), ('categorical', 'ADJ'), ('continuous', 'ADJ'), ('dependent', 'ADJ'), ('variables', 'NOUN'), ('[', 'PUNCT'), ('24', 'NUM'), (',', 'PUNCT'), ('25', 'NUM'), (']', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'compound'), ('CART', 'nsubj'), ('non', 'amod'), ('-', 'amod'), ('parametric', 'amod'), ('statistical', 'amod'), ('methodology', 'attr'), ('developed', 'acl'), ('analyzing', 'pcomp'), ('classification', 'compound'), ('issues', 'dobj'), (' ', 'appos'), ('categorical', 'amod'), ('continuous', 'conj'), ('dependent', 'amod'), ('variables', 'pobj'), ('[', 'punct'), ('24', 'appos'), (',', 'punct'), ('25', 'nummod'), (']', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[ , CART], [CART, non], [non, -], [-, parametric], [parametric, statistical], [statistical, methodology], [methodology, developed], [developed, analyzing], [analyzing, classification], [classification, issues], [issues,  ], [ , categorical], [categorical, continuous], [continuous, dependent], [dependent, variables], [variables, [], [[, 24], [24, ,], [,, 25], [25, ]], [], .]]

>> Trigrams: 
[[ , CART, non], [CART, non, -], [non, -, parametric], [-, parametric, statistical], [parametric, statistical, methodology], [statistical, methodology, developed], [methodology, developed, analyzing], [developed, analyzing, classification], [analyzing, classification, issues], [classification, issues,  ], [issues,  , categorical], [ , categorical, continuous], [categorical, continuous, dependent], [continuous, dependent, variables], [dependent, variables, [], [variables, [, 24], [[, 24, ,], [24, ,, 25], [,, 25, ]], [25, ], .]]

>> Noun Phrases are: 
[ CART, a non-parametric statistical methodology, classification issues, categorical or continuous dependent variables]

>> Named Entities are: 
[('CART', 'ORG'), ('24', 'CARDINAL'), ('25', 'CARDINAL')] 

------------------- Sentence 30 -------------------

If the dependent variable is  categorical, CART produces a classification tree. 


>> Tokens are: 
[dependent, variable,  , categorical, ,, CART, produces, classification, tree, .] 

>> PoS Tags are: 
[('dependent', 'ADJ'), ('variable', 'NOUN'), (' ', 'SPACE'), ('categorical', 'ADJ'), (',', 'PUNCT'), ('CART', 'NOUN'), ('produces', 'VERB'), ('classification', 'NOUN'), ('tree', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('dependent', 'amod'), ('variable', 'nsubj'), (' ', 'attr'), ('categorical', 'amod'), (',', 'punct'), ('CART', 'nsubj'), ('produces', 'ROOT'), ('classification', 'compound'), ('tree', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[dependent, variable], [variable,  ], [ , categorical], [categorical, ,], [,, CART], [CART, produces], [produces, classification], [classification, tree], [tree, .]]

>> Trigrams: 
[[dependent, variable,  ], [variable,  , categorical], [ , categorical, ,], [categorical, ,, CART], [,, CART, produces], [CART, produces, classification], [produces, classification, tree], [classification, tree, .]]

>> Noun Phrases are: 
[the dependent variable, CART, a classification tree]

>> Named Entities are: 
[('CART', 'ORG')] 

------------------- Sentence 31 -------------------

When the dependent variable is continuous, it  produces a regression tree. 


>> Tokens are: 
[dependent, variable, continuous, ,,  , produces, regression, tree, .] 

>> PoS Tags are: 
[('dependent', 'ADJ'), ('variable', 'NOUN'), ('continuous', 'ADJ'), (',', 'PUNCT'), (' ', 'SPACE'), ('produces', 'VERB'), ('regression', 'NOUN'), ('tree', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('dependent', 'amod'), ('variable', 'nsubj'), ('continuous', 'acomp'), (',', 'punct'), (' ', 'appos'), ('produces', 'ROOT'), ('regression', 'compound'), ('tree', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[dependent, variable], [variable, continuous], [continuous, ,], [,,  ], [ , produces], [produces, regression], [regression, tree], [tree, .]]

>> Trigrams: 
[[dependent, variable, continuous], [variable, continuous, ,], [continuous, ,,  ], [,,  , produces], [ , produces, regression], [produces, regression, tree], [regression, tree, .]]

>> Noun Phrases are: 
[the dependent variable, it, a regression tree]

>> Named Entities are: 
[] 

------------------- Sentence 32 -------------------

     4.2   


>> Tokens are: 
[     , 4.2,  ] 

>> PoS Tags are: 
[('     ', 'SPACE'), ('4.2', 'NUM'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('     ', 'nmod'), ('4.2', 'nummod'), (' ', 'ROOT')]

>> Bigrams: 
[[     , 4.2], [4.2,  ]]

>> Trigrams: 
[[     , 4.2,  ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 33 -------------------

Binary Recursive Partitioning   


>> Tokens are: 
[Binary, Recursive, Partitioning,  ] 

>> PoS Tags are: 
[('Binary', 'PROPN'), ('Recursive', 'PROPN'), ('Partitioning', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Binary', 'compound'), ('Recursive', 'compound'), ('Partitioning', 'ROOT'), (' ', 'appos')]

>> Bigrams: 
[[Binary, Recursive], [Recursive, Partitioning], [Partitioning,  ]]

>> Trigrams: 
[[Binary, Recursive, Partitioning], [Recursive, Partitioning,  ]]

>> Noun Phrases are: 
[Binary Recursive Partitioning]

>> Named Entities are: 
[] 

------------------- Sentence 34 -------------------

Consider the problem of selecting the best size and type of laryngoscope blade for pediatric  patients undergoing intubations [20]. 


>> Tokens are: 
[Consider, problem, selecting, best, size, type, laryngoscope, blade, pediatric,  , patients, undergoing, intubations, [, 20, ], .] 

>> PoS Tags are: 
[('Consider', 'VERB'), ('problem', 'NOUN'), ('selecting', 'VERB'), ('best', 'ADJ'), ('size', 'NOUN'), ('type', 'NOUN'), ('laryngoscope', 'NOUN'), ('blade', 'NOUN'), ('pediatric', 'ADJ'), (' ', 'SPACE'), ('patients', 'NOUN'), ('undergoing', 'VERB'), ('intubations', 'NOUN'), ('[', 'PUNCT'), ('20', 'NUM'), (']', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Consider', 'ROOT'), ('problem', 'dobj'), ('selecting', 'pcomp'), ('best', 'amod'), ('size', 'dobj'), ('type', 'conj'), ('laryngoscope', 'compound'), ('blade', 'pobj'), ('pediatric', 'amod'), (' ', 'compound'), ('patients', 'pobj'), ('undergoing', 'acl'), ('intubations', 'dobj'), ('[', 'punct'), ('20', 'dobj'), (']', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Consider, problem], [problem, selecting], [selecting, best], [best, size], [size, type], [type, laryngoscope], [laryngoscope, blade], [blade, pediatric], [pediatric,  ], [ , patients], [patients, undergoing], [undergoing, intubations], [intubations, [], [[, 20], [20, ]], [], .]]

>> Trigrams: 
[[Consider, problem, selecting], [problem, selecting, best], [selecting, best, size], [best, size, type], [size, type, laryngoscope], [type, laryngoscope, blade], [laryngoscope, blade, pediatric], [blade, pediatric,  ], [pediatric,  , patients], [ , patients, undergoing], [patients, undergoing, intubations], [undergoing, intubations, [], [intubations, [, 20], [[, 20, ]], [20, ], .]]

>> Noun Phrases are: 
[the problem, the best size, type, laryngoscope blade, pediatric  patients, intubations]

>> Named Entities are: 
[('20', 'CARDINAL')] 

------------------- Sentence 35 -------------------

The outcome variable, the best blade for each patient (as  determined by a consulting pediatric airway specialist), has three possible values: Miller 0, Wis- Hipple 1.5, and Mac 2. 


>> Tokens are: 
[outcome, variable, ,, best, blade, patient, (,  , determined, consulting, pediatric, airway, specialist, ), ,, possible, values, :, Miller, 0, ,, Wis-, Hipple, 1.5, ,, Mac, 2, .] 

>> PoS Tags are: 
[('outcome', 'NOUN'), ('variable', 'NOUN'), (',', 'PUNCT'), ('best', 'ADJ'), ('blade', 'NOUN'), ('patient', 'NOUN'), ('(', 'PUNCT'), (' ', 'SPACE'), ('determined', 'VERB'), ('consulting', 'VERB'), ('pediatric', 'ADJ'), ('airway', 'NOUN'), ('specialist', 'NOUN'), (')', 'PUNCT'), (',', 'PUNCT'), ('possible', 'ADJ'), ('values', 'NOUN'), (':', 'PUNCT'), ('Miller', 'PROPN'), ('0', 'NUM'), (',', 'PUNCT'), ('Wis-', 'X'), ('Hipple', 'NOUN'), ('1.5', 'NUM'), (',', 'PUNCT'), ('Mac', 'PROPN'), ('2', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('outcome', 'compound'), ('variable', 'ROOT'), (',', 'punct'), ('best', 'amod'), ('blade', 'appos'), ('patient', 'pobj'), ('(', 'punct'), (' ', 'pobj'), ('determined', 'acl'), ('consulting', 'amod'), ('pediatric', 'amod'), ('airway', 'compound'), ('specialist', 'pobj'), (')', 'punct'), (',', 'punct'), ('possible', 'amod'), ('values', 'dobj'), (':', 'punct'), ('Miller', 'appos'), ('0', 'nummod'), (',', 'punct'), ('Wis-', 'appos'), ('Hipple', 'appos'), ('1.5', 'nummod'), (',', 'punct'), ('Mac', 'conj'), ('2', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[outcome, variable], [variable, ,], [,, best], [best, blade], [blade, patient], [patient, (], [(,  ], [ , determined], [determined, consulting], [consulting, pediatric], [pediatric, airway], [airway, specialist], [specialist, )], [), ,], [,, possible], [possible, values], [values, :], [:, Miller], [Miller, 0], [0, ,], [,, Wis-], [Wis-, Hipple], [Hipple, 1.5], [1.5, ,], [,, Mac], [Mac, 2], [2, .]]

>> Trigrams: 
[[outcome, variable, ,], [variable, ,, best], [,, best, blade], [best, blade, patient], [blade, patient, (], [patient, (,  ], [(,  , determined], [ , determined, consulting], [determined, consulting, pediatric], [consulting, pediatric, airway], [pediatric, airway, specialist], [airway, specialist, )], [specialist, ), ,], [), ,, possible], [,, possible, values], [possible, values, :], [values, :, Miller], [:, Miller, 0], [Miller, 0, ,], [0, ,, Wis-], [,, Wis-, Hipple], [Wis-, Hipple, 1.5], [Hipple, 1.5, ,], [1.5, ,, Mac], [,, Mac, 2], [Mac, 2, .]]

>> Noun Phrases are: 
[The outcome variable, the best blade, each patient, a consulting pediatric airway specialist, three possible values, Miller, Hipple, Mac]

>> Named Entities are: 
[('three', 'CARDINAL'), ('0', 'CARDINAL'), ('Hipple', 'ORG')] 

------------------- Sentence 36 -------------------

The two-predictor variables are measurements of neck length and or  pharyngeal height. 


>> Tokens are: 
[-, predictor, variables, measurements, neck, length,  , pharyngeal, height, .] 

>> PoS Tags are: 
[('-', 'PUNCT'), ('predictor', 'NOUN'), ('variables', 'NOUN'), ('measurements', 'NOUN'), ('neck', 'NOUN'), ('length', 'NOUN'), (' ', 'SPACE'), ('pharyngeal', 'ADJ'), ('height', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('-', 'punct'), ('predictor', 'compound'), ('variables', 'nsubj'), ('measurements', 'attr'), ('neck', 'compound'), ('length', 'pobj'), (' ', 'conj'), ('pharyngeal', 'amod'), ('height', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[-, predictor], [predictor, variables], [variables, measurements], [measurements, neck], [neck, length], [length,  ], [ , pharyngeal], [pharyngeal, height], [height, .]]

>> Trigrams: 
[[-, predictor, variables], [predictor, variables, measurements], [variables, measurements, neck], [measurements, neck, length], [neck, length,  ], [length,  , pharyngeal], [ , pharyngeal, height], [pharyngeal, height, .]]

>> Noun Phrases are: 
[The two-predictor variables, measurements, neck length, pharyngeal height]

>> Named Entities are: 
[('two', 'CARDINAL')] 

------------------- Sentence 37 -------------------

The smallest patients are best incubated with the Miller 0, medium sized  patients with the Wis-Hipple 1.5, and the largest patients with the Mac 2. 


>> Tokens are: 
[smallest, patients, best, incubated, Miller, 0, ,, medium, sized,  , patients, Wis, -, Hipple, 1.5, ,, largest, patients, Mac, 2, .] 

>> PoS Tags are: 
[('smallest', 'ADJ'), ('patients', 'NOUN'), ('best', 'ADV'), ('incubated', 'VERB'), ('Miller', 'PROPN'), ('0', 'NUM'), (',', 'PUNCT'), ('medium', 'NOUN'), ('sized', 'ADJ'), (' ', 'SPACE'), ('patients', 'NOUN'), ('Wis', 'PROPN'), ('-', 'PUNCT'), ('Hipple', 'PROPN'), ('1.5', 'NUM'), (',', 'PUNCT'), ('largest', 'ADJ'), ('patients', 'NOUN'), ('Mac', 'PROPN'), ('2', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('smallest', 'amod'), ('patients', 'nsubjpass'), ('best', 'advmod'), ('incubated', 'ccomp'), ('Miller', 'pobj'), ('0', 'nummod'), (',', 'punct'), ('medium', 'advmod'), ('sized', 'ROOT'), (' ', 'compound'), ('patients', 'dobj'), ('Wis', 'compound'), ('-', 'punct'), ('Hipple', 'compound'), ('1.5', 'pobj'), (',', 'punct'), ('largest', 'amod'), ('patients', 'conj'), ('Mac', 'pobj'), ('2', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[smallest, patients], [patients, best], [best, incubated], [incubated, Miller], [Miller, 0], [0, ,], [,, medium], [medium, sized], [sized,  ], [ , patients], [patients, Wis], [Wis, -], [-, Hipple], [Hipple, 1.5], [1.5, ,], [,, largest], [largest, patients], [patients, Mac], [Mac, 2], [2, .]]

>> Trigrams: 
[[smallest, patients, best], [patients, best, incubated], [best, incubated, Miller], [incubated, Miller, 0], [Miller, 0, ,], [0, ,, medium], [,, medium, sized], [medium, sized,  ], [sized,  , patients], [ , patients, Wis], [patients, Wis, -], [Wis, -, Hipple], [-, Hipple, 1.5], [Hipple, 1.5, ,], [1.5, ,, largest], [,, largest, patients], [largest, patients, Mac], [patients, Mac, 2], [Mac, 2, .]]

>> Noun Phrases are: 
[The smallest patients, the Miller,  patients, the largest patients, the Mac]

>> Named Entities are: 
[('Miller', 'PERSON'), ('the Wis-Hipple', 'ORG'), ('1.5', 'CARDINAL')] 

------------------- Sentence 38 -------------------

    CART is basically used to avoid the disadvantage of the regression techniques. 


>> Tokens are: 
[    , CART, basically, avoid, disadvantage, regression, techniques, .] 

>> PoS Tags are: 
[('    ', 'SPACE'), ('CART', 'NOUN'), ('basically', 'ADV'), ('avoid', 'VERB'), ('disadvantage', 'NOUN'), ('regression', 'NOUN'), ('techniques', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('    ', 'poss'), ('CART', 'nsubjpass'), ('basically', 'advmod'), ('avoid', 'xcomp'), ('disadvantage', 'dobj'), ('regression', 'compound'), ('techniques', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[    , CART], [CART, basically], [basically, avoid], [avoid, disadvantage], [disadvantage, regression], [regression, techniques], [techniques, .]]

>> Trigrams: 
[[    , CART, basically], [CART, basically, avoid], [basically, avoid, disadvantage], [avoid, disadvantage, regression], [disadvantage, regression, techniques], [regression, techniques, .]]

>> Noun Phrases are: 
[    CART, the disadvantage, the regression techniques]

>> Named Entities are: 
[('CART', 'ORG')] 

------------------- Sentence 39 -------------------

 CART analysis  is a form of binary recursive partitioning [20]. 


>> Tokens are: 
[ , CART, analysis,  , form, binary, recursive, partitioning, [, 20, ], .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('CART', 'NOUN'), ('analysis', 'NOUN'), (' ', 'SPACE'), ('form', 'NOUN'), ('binary', 'ADJ'), ('recursive', 'NOUN'), ('partitioning', 'VERB'), ('[', 'PUNCT'), ('20', 'NUM'), (']', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'dep'), ('CART', 'compound'), ('analysis', 'compound'), (' ', 'nsubj'), ('form', 'attr'), ('binary', 'amod'), ('recursive', 'nsubj'), ('partitioning', 'pobj'), ('[', 'punct'), ('20', 'dep'), (']', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[ , CART], [CART, analysis], [analysis,  ], [ , form], [form, binary], [binary, recursive], [recursive, partitioning], [partitioning, [], [[, 20], [20, ]], [], .]]

>> Trigrams: 
[[ , CART, analysis], [CART, analysis,  ], [analysis,  , form], [ , form, binary], [form, binary, recursive], [binary, recursive, partitioning], [recursive, partitioning, [], [partitioning, [, 20], [[, 20, ]], [20, ], .]]

>> Noun Phrases are: 
[a form, binary recursive]

>> Named Entities are: 
[('20', 'CARDINAL')] 

------------------- Sentence 40 -------------------

The term “binary” implies that each node in a  decision tree can only be split into two groups. 


>> Tokens are: 
[term, “, binary, ”, implies, node,  , decision, tree, split, groups, .] 

>> PoS Tags are: 
[('term', 'NOUN'), ('“', 'PUNCT'), ('binary', 'ADJ'), ('”', 'PUNCT'), ('implies', 'VERB'), ('node', 'NOUN'), (' ', 'SPACE'), ('decision', 'NOUN'), ('tree', 'NOUN'), ('split', 'VERB'), ('groups', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('term', 'nmod'), ('“', 'punct'), ('binary', 'nsubj'), ('”', 'punct'), ('implies', 'ROOT'), ('node', 'nsubjpass'), (' ', 'compound'), ('decision', 'compound'), ('tree', 'pobj'), ('split', 'ccomp'), ('groups', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[term, “], [“, binary], [binary, ”], [”, implies], [implies, node], [node,  ], [ , decision], [decision, tree], [tree, split], [split, groups], [groups, .]]

>> Trigrams: 
[[term, “, binary], [“, binary, ”], [binary, ”, implies], [”, implies, node], [implies, node,  ], [node,  , decision], [ , decision, tree], [decision, tree, split], [tree, split, groups], [split, groups, .]]

>> Noun Phrases are: 
[each node, a  decision tree, two groups]

>> Named Entities are: 
[('two', 'CARDINAL')] 

------------------- Sentence 41 -------------------

Thus, each node can be split into two child nodes,  in which case the original node is called a parent node. 


>> Tokens are: 
[,, node, split, child, nodes, ,,  , case, original, node, called, parent, node, .] 

>> PoS Tags are: 
[(',', 'PUNCT'), ('node', 'NOUN'), ('split', 'VERB'), ('child', 'NOUN'), ('nodes', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('case', 'NOUN'), ('original', 'ADJ'), ('node', 'NOUN'), ('called', 'VERB'), ('parent', 'NOUN'), ('node', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(',', 'punct'), ('node', 'nsubjpass'), ('split', 'ROOT'), ('child', 'compound'), ('nodes', 'pobj'), (',', 'punct'), (' ', 'appos'), ('case', 'pcomp'), ('original', 'amod'), ('node', 'nsubjpass'), ('called', 'relcl'), ('parent', 'compound'), ('node', 'oprd'), ('.', 'punct')]

>> Bigrams: 
[[,, node], [node, split], [split, child], [child, nodes], [nodes, ,], [,,  ], [ , case], [case, original], [original, node], [node, called], [called, parent], [parent, node], [node, .]]

>> Trigrams: 
[[,, node, split], [node, split, child], [split, child, nodes], [child, nodes, ,], [nodes, ,,  ], [,,  , case], [ , case, original], [case, original, node], [original, node, called], [node, called, parent], [called, parent, node], [parent, node, .]]

>> Noun Phrases are: 
[each node, two child nodes, which case, the original node, a parent node]

>> Named Entities are: 
[('two', 'CARDINAL')] 

------------------- Sentence 42 -------------------

The term “recursive” refers to the fact that  the binary partitioning process can be applied over and over again. 


>> Tokens are: 
[term, “, recursive, ”, refers, fact,  , binary, partitioning, process, applied, .] 

>> PoS Tags are: 
[('term', 'NOUN'), ('“', 'PUNCT'), ('recursive', 'NOUN'), ('”', 'PUNCT'), ('refers', 'VERB'), ('fact', 'NOUN'), (' ', 'SPACE'), ('binary', 'ADJ'), ('partitioning', 'ADJ'), ('process', 'NOUN'), ('applied', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('term', 'nmod'), ('“', 'punct'), ('recursive', 'nsubj'), ('”', 'punct'), ('refers', 'ROOT'), ('fact', 'pobj'), (' ', 'nsubjpass'), ('binary', 'amod'), ('partitioning', 'amod'), ('process', 'nsubjpass'), ('applied', 'acl'), ('.', 'punct')]

>> Bigrams: 
[[term, “], [“, recursive], [recursive, ”], [”, refers], [refers, fact], [fact,  ], [ , binary], [binary, partitioning], [partitioning, process], [process, applied], [applied, .]]

>> Trigrams: 
[[term, “, recursive], [“, recursive, ”], [recursive, ”, refers], [”, refers, fact], [refers, fact,  ], [fact,  , binary], [ , binary, partitioning], [binary, partitioning, process], [partitioning, process, applied], [process, applied, .]]

>> Noun Phrases are: 
[The term “recursive, the fact, the binary partitioning process]

>> Named Entities are: 
[] 

------------------- Sentence 43 -------------------

Thus, each parent node can  give rise to two child nodes and, in turn, each of these child nodes may themselves be split,  forming additional children. 


>> Tokens are: 
[,, parent, node,  , rise, child, nodes, ,, turn, ,, child, nodes, split, ,,  , forming, additional, children, .] 

>> PoS Tags are: 
[(',', 'PUNCT'), ('parent', 'NOUN'), ('node', 'NOUN'), (' ', 'SPACE'), ('rise', 'NOUN'), ('child', 'NOUN'), ('nodes', 'NOUN'), (',', 'PUNCT'), ('turn', 'NOUN'), (',', 'PUNCT'), ('child', 'NOUN'), ('nodes', 'NOUN'), ('split', 'VERB'), (',', 'PUNCT'), (' ', 'SPACE'), ('forming', 'VERB'), ('additional', 'ADJ'), ('children', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(',', 'punct'), ('parent', 'compound'), ('node', 'nsubj'), (' ', 'nsubj'), ('rise', 'dobj'), ('child', 'compound'), ('nodes', 'pobj'), (',', 'punct'), ('turn', 'pobj'), (',', 'punct'), ('child', 'compound'), ('nodes', 'pobj'), ('split', 'conj'), (',', 'punct'), (' ', 'dobj'), ('forming', 'acl'), ('additional', 'amod'), ('children', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[,, parent], [parent, node], [node,  ], [ , rise], [rise, child], [child, nodes], [nodes, ,], [,, turn], [turn, ,], [,, child], [child, nodes], [nodes, split], [split, ,], [,,  ], [ , forming], [forming, additional], [additional, children], [children, .]]

>> Trigrams: 
[[,, parent, node], [parent, node,  ], [node,  , rise], [ , rise, child], [rise, child, nodes], [child, nodes, ,], [nodes, ,, turn], [,, turn, ,], [turn, ,, child], [,, child, nodes], [child, nodes, split], [nodes, split, ,], [split, ,,  ], [,,  , forming], [ , forming, additional], [forming, additional, children], [additional, children, .]]

>> Noun Phrases are: 
[each parent node, rise, two child nodes, turn, these child nodes, themselves, additional children]

>> Named Entities are: 
[('two', 'CARDINAL')] 

------------------- Sentence 44 -------------------

The term “partitioning” refers to the fact that the dataset is split into  sections or partitioned. 


>> Tokens are: 
[term, “, partitioning, ”, refers, fact, dataset, split,  , sections, partitioned, .] 

>> PoS Tags are: 
[('term', 'NOUN'), ('“', 'PUNCT'), ('partitioning', 'VERB'), ('”', 'PUNCT'), ('refers', 'VERB'), ('fact', 'NOUN'), ('dataset', 'NOUN'), ('split', 'VERB'), (' ', 'SPACE'), ('sections', 'NOUN'), ('partitioned', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('term', 'nsubj'), ('“', 'punct'), ('partitioning', 'amod'), ('”', 'punct'), ('refers', 'ROOT'), ('fact', 'pobj'), ('dataset', 'nsubjpass'), ('split', 'acl'), (' ', 'compound'), ('sections', 'pobj'), ('partitioned', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[term, “], [“, partitioning], [partitioning, ”], [”, refers], [refers, fact], [fact, dataset], [dataset, split], [split,  ], [ , sections], [sections, partitioned], [partitioned, .]]

>> Trigrams: 
[[term, “, partitioning], [“, partitioning, ”], [partitioning, ”, refers], [”, refers, fact], [refers, fact, dataset], [fact, dataset, split], [dataset, split,  ], [split,  , sections], [ , sections, partitioned], [sections, partitioned, .]]

>> Noun Phrases are: 
[The term, the fact, the dataset,  sections]

>> Named Entities are: 
[] 

------------------- Sentence 45 -------------------

    


>> Tokens are: 
[   ] 

>> PoS Tags are: 
[('   ', 'SPACE')] 

>> Dependency Tags are: 
[('   ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 49 =================================

Yogesh Singh, Pradeep Kumar Bhatia & Omprakash Sangwan  

------------------- Sentence 1 -------------------

Yogesh Singh, Pradeep Kumar Bhatia & Omprakash Sangwan   


>> Tokens are: 
[Yogesh, Singh, ,, Pradeep, Kumar, Bhatia, &, Omprakash, Sangwan,  ] 

>> PoS Tags are: 
[('Yogesh', 'PROPN'), ('Singh', 'PROPN'), (',', 'PUNCT'), ('Pradeep', 'PROPN'), ('Kumar', 'PROPN'), ('Bhatia', 'PROPN'), ('&', 'CCONJ'), ('Omprakash', 'PROPN'), ('Sangwan', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Yogesh', 'compound'), ('Singh', 'ROOT'), (',', 'punct'), ('Pradeep', 'compound'), ('Kumar', 'compound'), ('Bhatia', 'conj'), ('&', 'cc'), ('Omprakash', 'compound'), ('Sangwan', 'conj'), (' ', 'punct')]

>> Bigrams: 
[[Yogesh, Singh], [Singh, ,], [,, Pradeep], [Pradeep, Kumar], [Kumar, Bhatia], [Bhatia, &], [&, Omprakash], [Omprakash, Sangwan], [Sangwan,  ]]

>> Trigrams: 
[[Yogesh, Singh, ,], [Singh, ,, Pradeep], [,, Pradeep, Kumar], [Pradeep, Kumar, Bhatia], [Kumar, Bhatia, &], [Bhatia, &, Omprakash], [&, Omprakash, Sangwan], [Omprakash, Sangwan,  ]]

>> Noun Phrases are: 
[Yogesh Singh, Pradeep Kumar Bhatia, Omprakash Sangwan]

>> Named Entities are: 
[('Yogesh Singh', 'PERSON'), ('Kumar Bhatia & Omprakash Sangwan', 'ORG')] 


================================ Paragraph 50 =================================

International Journal of Computer Science and Security, Volume (1) : Issue (1) 77  

------------------- Sentence 1 -------------------

International Journal of Computer Science and Security, Volume (1) : Issue (1) 77   


>> Tokens are: 
[International, Journal, Computer, Science, Security, ,, Volume, (, 1, ), :, Issue, (, 1, ), 77,  ] 

>> PoS Tags are: 
[('International', 'PROPN'), ('Journal', 'PROPN'), ('Computer', 'PROPN'), ('Science', 'PROPN'), ('Security', 'PROPN'), (',', 'PUNCT'), ('Volume', 'NOUN'), ('(', 'PUNCT'), ('1', 'NUM'), (')', 'PUNCT'), (':', 'PUNCT'), ('Issue', 'NOUN'), ('(', 'PUNCT'), ('1', 'NUM'), (')', 'PUNCT'), ('77', 'NUM'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('International', 'compound'), ('Journal', 'ROOT'), ('Computer', 'compound'), ('Science', 'pobj'), ('Security', 'conj'), (',', 'punct'), ('Volume', 'appos'), ('(', 'punct'), ('1', 'appos'), (')', 'punct'), (':', 'punct'), ('Issue', 'appos'), ('(', 'punct'), ('1', 'appos'), (')', 'punct'), ('77', 'nummod'), (' ', 'appos')]

>> Bigrams: 
[[International, Journal], [Journal, Computer], [Computer, Science], [Science, Security], [Security, ,], [,, Volume], [Volume, (], [(, 1], [1, )], [), :], [:, Issue], [Issue, (], [(, 1], [1, )], [), 77], [77,  ]]

>> Trigrams: 
[[International, Journal, Computer], [Journal, Computer, Science], [Computer, Science, Security], [Science, Security, ,], [Security, ,, Volume], [,, Volume, (], [Volume, (, 1], [(, 1, )], [1, ), :], [), :, Issue], [:, Issue, (], [Issue, (, 1], [(, 1, )], [1, ), 77], [), 77,  ]]

>> Noun Phrases are: 
[International Journal, Computer Science, Security, Volume, Issue]

>> Named Entities are: 
[('International Journal of Computer Science and Security, Volume', 'ORG'), ('1', 'CARDINAL'), ('1', 'CARDINAL')] 


================================ Paragraph 51 =================================

The figure:5 illustrates this kind of a partitioning. This tree consists of a root node (Node 1),  containing all patients. This node is split based on the value of the neck length variable. If the  neck length is < 2.45 centimeters, then those patients are put in the first terminal node, denoted  Node -1, and the best blade is predicted to be a Miller 0. All other patients are placed in Node 2.  The group of patients in Node 2 is initially assigned a Wis-Hipple 1.5 blade but they are also split  based on there or pharyngeal height. Those patients with an or pharyngeal height less than 1.75  are placed in terminal Node -2, and assigned a Wis-Hipple 1.5 blade, while those with an or  pharyngeal height �1.75 are placed in terminal Node –3 and assigned a Mac 2 blade.         

------------------- Sentence 1 -------------------

The figure:5 illustrates this kind of a partitioning. 


>> Tokens are: 
[figure:5, illustrates, kind, partitioning, .] 

>> PoS Tags are: 
[('figure:5', 'NOUN'), ('illustrates', 'VERB'), ('kind', 'NOUN'), ('partitioning', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('figure:5', 'nsubj'), ('illustrates', 'ROOT'), ('kind', 'dobj'), ('partitioning', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[figure:5, illustrates], [illustrates, kind], [kind, partitioning], [partitioning, .]]

>> Trigrams: 
[[figure:5, illustrates, kind], [illustrates, kind, partitioning], [kind, partitioning, .]]

>> Noun Phrases are: 
[The figure:5, this kind, a partitioning]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

This tree consists of a root node (Node 1),  containing all patients. 


>> Tokens are: 
[tree, consists, root, node, (, Node, 1, ), ,,  , containing, patients, .] 

>> PoS Tags are: 
[('tree', 'NOUN'), ('consists', 'VERB'), ('root', 'NOUN'), ('node', 'NOUN'), ('(', 'PUNCT'), ('Node', 'PROPN'), ('1', 'NUM'), (')', 'PUNCT'), (',', 'PUNCT'), (' ', 'SPACE'), ('containing', 'VERB'), ('patients', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('tree', 'nsubj'), ('consists', 'ROOT'), ('root', 'compound'), ('node', 'pobj'), ('(', 'punct'), ('Node', 'appos'), ('1', 'nummod'), (')', 'punct'), (',', 'punct'), (' ', 'appos'), ('containing', 'acl'), ('patients', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[tree, consists], [consists, root], [root, node], [node, (], [(, Node], [Node, 1], [1, )], [), ,], [,,  ], [ , containing], [containing, patients], [patients, .]]

>> Trigrams: 
[[tree, consists, root], [consists, root, node], [root, node, (], [node, (, Node], [(, Node, 1], [Node, 1, )], [1, ), ,], [), ,,  ], [,,  , containing], [ , containing, patients], [containing, patients, .]]

>> Noun Phrases are: 
[This tree, a root node, Node, all patients]

>> Named Entities are: 
[('Node 1', 'PERSON')] 

------------------- Sentence 3 -------------------

This node is split based on the value of the neck length variable. 


>> Tokens are: 
[node, split, based, value, neck, length, variable, .] 

>> PoS Tags are: 
[('node', 'NOUN'), ('split', 'VERB'), ('based', 'VERB'), ('value', 'NOUN'), ('neck', 'NOUN'), ('length', 'NOUN'), ('variable', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('node', 'nsubjpass'), ('split', 'ROOT'), ('based', 'prep'), ('value', 'pobj'), ('neck', 'compound'), ('length', 'compound'), ('variable', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[node, split], [split, based], [based, value], [value, neck], [neck, length], [length, variable], [variable, .]]

>> Trigrams: 
[[node, split, based], [split, based, value], [based, value, neck], [value, neck, length], [neck, length, variable], [length, variable, .]]

>> Noun Phrases are: 
[This node, the value, the neck length variable]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

If the  neck length is < 2.45 centimeters, then those patients are put in the first terminal node, denoted  Node -1, and the best blade is predicted to be a Miller 0. 


>> Tokens are: 
[ , neck, length, <, 2.45, centimeters, ,, patients, terminal, node, ,, denoted,  , Node, -1, ,, best, blade, predicted, Miller, 0, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('neck', 'NOUN'), ('length', 'NOUN'), ('<', 'X'), ('2.45', 'NUM'), ('centimeters', 'NOUN'), (',', 'PUNCT'), ('patients', 'NOUN'), ('terminal', 'ADJ'), ('node', 'NOUN'), (',', 'PUNCT'), ('denoted', 'VERB'), (' ', 'SPACE'), ('Node', 'PROPN'), ('-1', 'INTJ'), (',', 'PUNCT'), ('best', 'ADJ'), ('blade', 'NOUN'), ('predicted', 'VERB'), ('Miller', 'PROPN'), ('0', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'compound'), ('neck', 'compound'), ('length', 'nsubj'), ('<', 'attr'), ('2.45', 'nummod'), ('centimeters', 'attr'), (',', 'punct'), ('patients', 'nsubjpass'), ('terminal', 'amod'), ('node', 'pobj'), (',', 'punct'), ('denoted', 'conj'), (' ', 'punct'), ('Node', 'compound'), ('-1', 'npadvmod'), (',', 'punct'), ('best', 'amod'), ('blade', 'nsubjpass'), ('predicted', 'conj'), ('Miller', 'attr'), ('0', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[ , neck], [neck, length], [length, <], [<, 2.45], [2.45, centimeters], [centimeters, ,], [,, patients], [patients, terminal], [terminal, node], [node, ,], [,, denoted], [denoted,  ], [ , Node], [Node, -1], [-1, ,], [,, best], [best, blade], [blade, predicted], [predicted, Miller], [Miller, 0], [0, .]]

>> Trigrams: 
[[ , neck, length], [neck, length, <], [length, <, 2.45], [<, 2.45, centimeters], [2.45, centimeters, ,], [centimeters, ,, patients], [,, patients, terminal], [patients, terminal, node], [terminal, node, ,], [node, ,, denoted], [,, denoted,  ], [denoted,  , Node], [ , Node, -1], [Node, -1, ,], [-1, ,, best], [,, best, blade], [best, blade, predicted], [blade, predicted, Miller], [predicted, Miller, 0], [Miller, 0, .]]

>> Noun Phrases are: 
[the  neck length, 2.45 centimeters, those patients, the first terminal node, the best blade, a Miller]

>> Named Entities are: 
[('2.45 centimeters', 'QUANTITY'), ('first', 'ORDINAL'), ('Node', 'ORG'), ('Miller', 'PERSON')] 

------------------- Sentence 5 -------------------

All other patients are placed in Node 2. 


>> Tokens are: 
[patients, placed, Node, 2, .] 

>> PoS Tags are: 
[('patients', 'NOUN'), ('placed', 'VERB'), ('Node', 'PROPN'), ('2', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('patients', 'nsubjpass'), ('placed', 'ROOT'), ('Node', 'pobj'), ('2', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[patients, placed], [placed, Node], [Node, 2], [2, .]]

>> Trigrams: 
[[patients, placed, Node], [placed, Node, 2], [Node, 2, .]]

>> Noun Phrases are: 
[All other patients, Node]

>> Named Entities are: 
[] 

------------------- Sentence 6 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 7 -------------------

The group of patients in Node 2 is initially assigned a Wis-Hipple 1.5 blade but they are also split  based on there or pharyngeal height. 


>> Tokens are: 
[group, patients, Node, 2, initially, assigned, Wis, -, Hipple, 1.5, blade, split,  , based, pharyngeal, height, .] 

>> PoS Tags are: 
[('group', 'NOUN'), ('patients', 'NOUN'), ('Node', 'PROPN'), ('2', 'NUM'), ('initially', 'ADV'), ('assigned', 'VERB'), ('Wis', 'PROPN'), ('-', 'PUNCT'), ('Hipple', 'PROPN'), ('1.5', 'NUM'), ('blade', 'NOUN'), ('split', 'VERB'), (' ', 'SPACE'), ('based', 'VERB'), ('pharyngeal', 'ADJ'), ('height', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('group', 'nsubjpass'), ('patients', 'pobj'), ('Node', 'pobj'), ('2', 'nummod'), ('initially', 'advmod'), ('assigned', 'ROOT'), ('Wis', 'nmod'), ('-', 'punct'), ('Hipple', 'nmod'), ('1.5', 'nummod'), ('blade', 'dobj'), ('split', 'conj'), (' ', 'dobj'), ('based', 'prep'), ('pharyngeal', 'amod'), ('height', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[group, patients], [patients, Node], [Node, 2], [2, initially], [initially, assigned], [assigned, Wis], [Wis, -], [-, Hipple], [Hipple, 1.5], [1.5, blade], [blade, split], [split,  ], [ , based], [based, pharyngeal], [pharyngeal, height], [height, .]]

>> Trigrams: 
[[group, patients, Node], [patients, Node, 2], [Node, 2, initially], [2, initially, assigned], [initially, assigned, Wis], [assigned, Wis, -], [Wis, -, Hipple], [-, Hipple, 1.5], [Hipple, 1.5, blade], [1.5, blade, split], [blade, split,  ], [split,  , based], [ , based, pharyngeal], [based, pharyngeal, height], [pharyngeal, height, .]]

>> Noun Phrases are: 
[The group, patients, Node, a Wis-Hipple 1.5 blade, they, pharyngeal height]

>> Named Entities are: 
[('Node 2', 'PERSON'), ('Wis-Hipple', 'ORG')] 

------------------- Sentence 8 -------------------

Those patients with an or pharyngeal height less than 1.75  are placed in terminal Node -2, and assigned a Wis-Hipple 1.5 blade, while those with an or  pharyngeal height �1.75 are placed in terminal Node –3 and assigned a Mac 2 blade. 


>> Tokens are: 
[patients, pharyngeal, height, 1.75,  , placed, terminal, Node, -2, ,, assigned, Wis, -, Hipple, 1.5, blade, ,,  , pharyngeal, height, �, 1.75, placed, terminal, Node, –, 3, assigned, Mac, 2, blade, .] 

>> PoS Tags are: 
[('patients', 'NOUN'), ('pharyngeal', 'ADJ'), ('height', 'NOUN'), ('1.75', 'NUM'), (' ', 'SPACE'), ('placed', 'VERB'), ('terminal', 'ADJ'), ('Node', 'PROPN'), ('-2', 'NOUN'), (',', 'PUNCT'), ('assigned', 'VERB'), ('Wis', 'PROPN'), ('-', 'PUNCT'), ('Hipple', 'PROPN'), ('1.5', 'NUM'), ('blade', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('pharyngeal', 'ADJ'), ('height', 'NOUN'), ('�', 'NOUN'), ('1.75', 'NUM'), ('placed', 'VERB'), ('terminal', 'ADJ'), ('Node', 'PROPN'), ('–', 'PUNCT'), ('3', 'NUM'), ('assigned', 'VERB'), ('Mac', 'PROPN'), ('2', 'NUM'), ('blade', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('patients', 'nsubjpass'), ('pharyngeal', 'amod'), ('height', 'conj'), ('1.75', 'pobj'), (' ', 'pobj'), ('placed', 'ROOT'), ('terminal', 'amod'), ('Node', 'compound'), ('-2', 'pobj'), (',', 'punct'), ('assigned', 'conj'), ('Wis', 'nmod'), ('-', 'punct'), ('Hipple', 'nmod'), ('1.5', 'nummod'), ('blade', 'dobj'), (',', 'punct'), (' ', 'conj'), ('pharyngeal', 'amod'), ('height', 'compound'), ('�', 'pobj'), ('1.75', 'nummod'), ('placed', 'advcl'), ('terminal', 'amod'), ('Node', 'pobj'), ('–', 'punct'), ('3', 'npadvmod'), ('assigned', 'conj'), ('Mac', 'nmod'), ('2', 'nummod'), ('blade', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[patients, pharyngeal], [pharyngeal, height], [height, 1.75], [1.75,  ], [ , placed], [placed, terminal], [terminal, Node], [Node, -2], [-2, ,], [,, assigned], [assigned, Wis], [Wis, -], [-, Hipple], [Hipple, 1.5], [1.5, blade], [blade, ,], [,,  ], [ , pharyngeal], [pharyngeal, height], [height, �], [�, 1.75], [1.75, placed], [placed, terminal], [terminal, Node], [Node, –], [–, 3], [3, assigned], [assigned, Mac], [Mac, 2], [2, blade], [blade, .]]

>> Trigrams: 
[[patients, pharyngeal, height], [pharyngeal, height, 1.75], [height, 1.75,  ], [1.75,  , placed], [ , placed, terminal], [placed, terminal, Node], [terminal, Node, -2], [Node, -2, ,], [-2, ,, assigned], [,, assigned, Wis], [assigned, Wis, -], [Wis, -, Hipple], [-, Hipple, 1.5], [Hipple, 1.5, blade], [1.5, blade, ,], [blade, ,,  ], [,,  , pharyngeal], [ , pharyngeal, height], [pharyngeal, height, �], [height, �, 1.75], [�, 1.75, placed], [1.75, placed, terminal], [placed, terminal, Node], [terminal, Node, –], [Node, –, 3], [–, 3, assigned], [3, assigned, Mac], [assigned, Mac, 2], [Mac, 2, blade], [2, blade, .]]

>> Noun Phrases are: 
[Those patients, terminal Node -2, a Wis-Hipple 1.5 blade, an or  pharyngeal height �, terminal Node, a Mac 2 blade]

>> Named Entities are: 
[('Node -2', 'PERSON'), ('Wis-Hipple', 'ORG'), ('1.75', 'CARDINAL'), ('Node', 'ORG'), ('3', 'CARDINAL')] 

------------------- Sentence 9 -------------------

         


>> Tokens are: 
[        ] 

>> PoS Tags are: 
[('        ', 'SPACE')] 

>> Dependency Tags are: 
[('        ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 52 =================================

    4.3    CART Analysis   CART analysis is a tree-building technique, which is unlike traditional data analysis methods. It is  ideally suited to the generation of clinical decision rules.    CART Analysis consists of four basic steps: -    1. It consists of tree building, during which a tree is built using recursive splitting of nodes. Each  resulting node is assigned a predicted class, based on the distribution of classes in the learning  dataset, which would occur in that node and the decision cost matrix. The assignment of a  predicted class to each node occurs whether or not that node is  remove space  subsequently  split into child nodes.     2. CART Analysis consists of stopping the tree building process. At this point a “maximal” tree  has been produced, which probably greatly over fits the information contained within the learning  dataset.     3. It consists of tree “pruning,” which results in the creation of a sequence of                                    simpler and simpler trees, through the cutting off increasingly important nodes.    

------------------- Sentence 1 -------------------

    4.3    CART Analysis   CART analysis is a tree-building technique, which is unlike traditional data analysis methods. 


>> Tokens are: 
[    , 4.3,    , CART, Analysis,   , CART, analysis, tree, -, building, technique, ,, unlike, traditional, data, analysis, methods, .] 

>> PoS Tags are: 
[('    ', 'SPACE'), ('4.3', 'NUM'), ('   ', 'SPACE'), ('CART', 'NOUN'), ('Analysis', 'NOUN'), ('  ', 'SPACE'), ('CART', 'NOUN'), ('analysis', 'NOUN'), ('tree', 'NOUN'), ('-', 'PUNCT'), ('building', 'NOUN'), ('technique', 'NOUN'), (',', 'PUNCT'), ('unlike', 'ADP'), ('traditional', 'ADJ'), ('data', 'NOUN'), ('analysis', 'NOUN'), ('methods', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('    ', 'nmod'), ('4.3', 'compound'), ('   ', 'nummod'), ('CART', 'compound'), ('Analysis', 'nmod'), ('  ', 'appos'), ('CART', 'compound'), ('analysis', 'nsubj'), ('tree', 'compound'), ('-', 'punct'), ('building', 'compound'), ('technique', 'attr'), (',', 'punct'), ('unlike', 'prep'), ('traditional', 'amod'), ('data', 'compound'), ('analysis', 'compound'), ('methods', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[    , 4.3], [4.3,    ], [   , CART], [CART, Analysis], [Analysis,   ], [  , CART], [CART, analysis], [analysis, tree], [tree, -], [-, building], [building, technique], [technique, ,], [,, unlike], [unlike, traditional], [traditional, data], [data, analysis], [analysis, methods], [methods, .]]

>> Trigrams: 
[[    , 4.3,    ], [4.3,    , CART], [   , CART, Analysis], [CART, Analysis,   ], [Analysis,   , CART], [  , CART, analysis], [CART, analysis, tree], [analysis, tree, -], [tree, -, building], [-, building, technique], [building, technique, ,], [technique, ,, unlike], [,, unlike, traditional], [unlike, traditional, data], [traditional, data, analysis], [data, analysis, methods], [analysis, methods, .]]

>> Noun Phrases are: 
[    4.3    CART Analysis   CART analysis, a tree-building technique, traditional data analysis methods]

>> Named Entities are: 
[('4.3', 'CARDINAL')] 

------------------- Sentence 2 -------------------

It is  ideally suited to the generation of clinical decision rules. 


>> Tokens are: 
[ , ideally, suited, generation, clinical, decision, rules, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('ideally', 'ADV'), ('suited', 'VERB'), ('generation', 'NOUN'), ('clinical', 'ADJ'), ('decision', 'NOUN'), ('rules', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'nsubj'), ('ideally', 'advmod'), ('suited', 'ROOT'), ('generation', 'pobj'), ('clinical', 'amod'), ('decision', 'compound'), ('rules', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[ , ideally], [ideally, suited], [suited, generation], [generation, clinical], [clinical, decision], [decision, rules], [rules, .]]

>> Trigrams: 
[[ , ideally, suited], [ideally, suited, generation], [suited, generation, clinical], [generation, clinical, decision], [clinical, decision, rules], [decision, rules, .]]

>> Noun Phrases are: 
[It, the generation, clinical decision rules]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

   CART Analysis consists of four basic steps: -    1. 


>> Tokens are: 
[   , CART, Analysis, consists, basic, steps, :, -,    , 1, .] 

>> PoS Tags are: 
[('   ', 'SPACE'), ('CART', 'NOUN'), ('Analysis', 'PROPN'), ('consists', 'VERB'), ('basic', 'ADJ'), ('steps', 'NOUN'), (':', 'PUNCT'), ('-', 'PUNCT'), ('   ', 'SPACE'), ('1', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('   ', 'nummod'), ('CART', 'compound'), ('Analysis', 'nsubj'), ('consists', 'ROOT'), ('basic', 'amod'), ('steps', 'pobj'), (':', 'punct'), ('-', 'punct'), ('   ', 'dobj'), ('1', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[   , CART], [CART, Analysis], [Analysis, consists], [consists, basic], [basic, steps], [steps, :], [:, -], [-,    ], [   , 1], [1, .]]

>> Trigrams: 
[[   , CART, Analysis], [CART, Analysis, consists], [Analysis, consists, basic], [consists, basic, steps], [basic, steps, :], [steps, :, -], [:, -,    ], [-,    , 1], [   , 1, .]]

>> Noun Phrases are: 
[   CART Analysis, four basic steps]

>> Named Entities are: 
[('four', 'CARDINAL')] 

------------------- Sentence 4 -------------------

It consists of tree building, during which a tree is built using recursive splitting of nodes. 


>> Tokens are: 
[consists, tree, building, ,, tree, built, recursive, splitting, nodes, .] 

>> PoS Tags are: 
[('consists', 'VERB'), ('tree', 'NOUN'), ('building', 'NOUN'), (',', 'PUNCT'), ('tree', 'NOUN'), ('built', 'VERB'), ('recursive', 'ADJ'), ('splitting', 'NOUN'), ('nodes', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('consists', 'ROOT'), ('tree', 'compound'), ('building', 'pobj'), (',', 'punct'), ('tree', 'nsubjpass'), ('built', 'relcl'), ('recursive', 'amod'), ('splitting', 'dobj'), ('nodes', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[consists, tree], [tree, building], [building, ,], [,, tree], [tree, built], [built, recursive], [recursive, splitting], [splitting, nodes], [nodes, .]]

>> Trigrams: 
[[consists, tree, building], [tree, building, ,], [building, ,, tree], [,, tree, built], [tree, built, recursive], [built, recursive, splitting], [recursive, splitting, nodes], [splitting, nodes, .]]

>> Noun Phrases are: 
[It, tree building, a tree, recursive splitting, nodes]

>> Named Entities are: 
[] 

------------------- Sentence 5 -------------------

Each  resulting node is assigned a predicted class, based on the distribution of classes in the learning  dataset, which would occur in that node and the decision cost matrix. 


>> Tokens are: 
[ , resulting, node, assigned, predicted, class, ,, based, distribution, classes, learning,  , dataset, ,, occur, node, decision, cost, matrix, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('resulting', 'VERB'), ('node', 'NOUN'), ('assigned', 'VERB'), ('predicted', 'VERB'), ('class', 'NOUN'), (',', 'PUNCT'), ('based', 'VERB'), ('distribution', 'NOUN'), ('classes', 'NOUN'), ('learning', 'NOUN'), (' ', 'SPACE'), ('dataset', 'NOUN'), (',', 'PUNCT'), ('occur', 'VERB'), ('node', 'NOUN'), ('decision', 'NOUN'), ('cost', 'NOUN'), ('matrix', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'nmod'), ('resulting', 'amod'), ('node', 'nsubjpass'), ('assigned', 'ROOT'), ('predicted', 'amod'), ('class', 'dobj'), (',', 'punct'), ('based', 'acl'), ('distribution', 'pobj'), ('classes', 'pobj'), ('learning', 'pobj'), (' ', 'compound'), ('dataset', 'relcl'), (',', 'punct'), ('occur', 'relcl'), ('node', 'pobj'), ('decision', 'compound'), ('cost', 'compound'), ('matrix', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[ , resulting], [resulting, node], [node, assigned], [assigned, predicted], [predicted, class], [class, ,], [,, based], [based, distribution], [distribution, classes], [classes, learning], [learning,  ], [ , dataset], [dataset, ,], [,, occur], [occur, node], [node, decision], [decision, cost], [cost, matrix], [matrix, .]]

>> Trigrams: 
[[ , resulting, node], [resulting, node, assigned], [node, assigned, predicted], [assigned, predicted, class], [predicted, class, ,], [class, ,, based], [,, based, distribution], [based, distribution, classes], [distribution, classes, learning], [classes, learning,  ], [learning,  , dataset], [ , dataset, ,], [dataset, ,, occur], [,, occur, node], [occur, node, decision], [node, decision, cost], [decision, cost, matrix], [cost, matrix, .]]

>> Noun Phrases are: 
[Each  resulting node, a predicted class, the distribution, classes, the learning, that node]

>> Named Entities are: 
[] 

------------------- Sentence 6 -------------------

The assignment of a  predicted class to each node occurs whether or not that node is  remove space  subsequently  split into child nodes. 


>> Tokens are: 
[assignment,  , predicted, class, node, occurs, node,  , remove, space,  , subsequently,  , split, child, nodes, .] 

>> PoS Tags are: 
[('assignment', 'NOUN'), (' ', 'SPACE'), ('predicted', 'VERB'), ('class', 'NOUN'), ('node', 'NOUN'), ('occurs', 'VERB'), ('node', 'NOUN'), (' ', 'SPACE'), ('remove', 'VERB'), ('space', 'NOUN'), (' ', 'SPACE'), ('subsequently', 'ADV'), (' ', 'SPACE'), ('split', 'VERB'), ('child', 'NOUN'), ('nodes', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('assignment', 'nsubj'), (' ', 'pobj'), ('predicted', 'csubj'), ('class', 'dobj'), ('node', 'pobj'), ('occurs', 'ROOT'), ('node', 'nsubj'), (' ', 'nsubj'), ('remove', 'advcl'), ('space', 'dobj'), (' ', 'dobj'), ('subsequently', 'advmod'), (' ', 'dobj'), ('split', 'acl'), ('child', 'compound'), ('nodes', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[assignment,  ], [ , predicted], [predicted, class], [class, node], [node, occurs], [occurs, node], [node,  ], [ , remove], [remove, space], [space,  ], [ , subsequently], [subsequently,  ], [ , split], [split, child], [child, nodes], [nodes, .]]

>> Trigrams: 
[[assignment,  , predicted], [ , predicted, class], [predicted, class, node], [class, node, occurs], [node, occurs, node], [occurs, node,  ], [node,  , remove], [ , remove, space], [remove, space,  ], [space,  , subsequently], [ , subsequently,  ], [subsequently,  , split], [ , split, child], [split, child, nodes], [child, nodes, .]]

>> Noun Phrases are: 
[The assignment, class, each node, that node, space, child nodes]

>> Named Entities are: 
[] 

------------------- Sentence 7 -------------------

    2. 


>> Tokens are: 
[    , 2, .] 

>> PoS Tags are: 
[('    ', 'SPACE'), ('2', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('    ', 'compound'), ('2', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[    , 2], [2, .]]

>> Trigrams: 
[[    , 2, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('2', 'CARDINAL')] 

------------------- Sentence 8 -------------------

CART Analysis consists of stopping the tree building process. 


>> Tokens are: 
[CART, Analysis, consists, stopping, tree, building, process, .] 

>> PoS Tags are: 
[('CART', 'PROPN'), ('Analysis', 'NOUN'), ('consists', 'VERB'), ('stopping', 'VERB'), ('tree', 'NOUN'), ('building', 'NOUN'), ('process', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('CART', 'compound'), ('Analysis', 'nsubj'), ('consists', 'ROOT'), ('stopping', 'pcomp'), ('tree', 'compound'), ('building', 'compound'), ('process', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[CART, Analysis], [Analysis, consists], [consists, stopping], [stopping, tree], [tree, building], [building, process], [process, .]]

>> Trigrams: 
[[CART, Analysis, consists], [Analysis, consists, stopping], [consists, stopping, tree], [stopping, tree, building], [tree, building, process], [building, process, .]]

>> Noun Phrases are: 
[CART Analysis, the tree building process]

>> Named Entities are: 
[] 

------------------- Sentence 9 -------------------

At this point a “maximal” tree  has been produced, which probably greatly over fits the information contained within the learning  dataset. 


>> Tokens are: 
[point, “, maximal, ”, tree,  , produced, ,, probably, greatly, fits, information, contained, learning,  , dataset, .] 

>> PoS Tags are: 
[('point', 'NOUN'), ('“', 'PUNCT'), ('maximal', 'ADJ'), ('”', 'PUNCT'), ('tree', 'NOUN'), (' ', 'SPACE'), ('produced', 'VERB'), (',', 'PUNCT'), ('probably', 'ADV'), ('greatly', 'ADV'), ('fits', 'VERB'), ('information', 'NOUN'), ('contained', 'VERB'), ('learning', 'NOUN'), (' ', 'SPACE'), ('dataset', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('point', 'pobj'), ('“', 'punct'), ('maximal', 'amod'), ('”', 'punct'), ('tree', 'nsubj'), (' ', 'nsubjpass'), ('produced', 'relcl'), (',', 'punct'), ('probably', 'advmod'), ('greatly', 'advmod'), ('fits', 'relcl'), ('information', 'dobj'), ('contained', 'acl'), ('learning', 'pobj'), (' ', 'punct'), ('dataset', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[point, “], [“, maximal], [maximal, ”], [”, tree], [tree,  ], [ , produced], [produced, ,], [,, probably], [probably, greatly], [greatly, fits], [fits, information], [information, contained], [contained, learning], [learning,  ], [ , dataset], [dataset, .]]

>> Trigrams: 
[[point, “, maximal], [“, maximal, ”], [maximal, ”, tree], [”, tree,  ], [tree,  , produced], [ , produced, ,], [produced, ,, probably], [,, probably, greatly], [probably, greatly, fits], [greatly, fits, information], [fits, information, contained], [information, contained, learning], [contained, learning,  ], [learning,  , dataset], [ , dataset, .]]

>> Noun Phrases are: 
[this point, the information, the learning]

>> Named Entities are: 
[] 

------------------- Sentence 10 -------------------

    3. 


>> Tokens are: 
[    , 3, .] 

>> PoS Tags are: 
[('    ', 'SPACE'), ('3', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('    ', 'ROOT'), ('3', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[    , 3], [3, .]]

>> Trigrams: 
[[    , 3, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('3', 'CARDINAL')] 

------------------- Sentence 11 -------------------

It consists of tree “pruning,” which results in the creation of a sequence of                                    simpler and simpler trees, through the cutting off increasingly important nodes. 


>> Tokens are: 
[consists, tree, “, pruning, ,, ”, results, creation, sequence,                                    , simpler, simpler, trees, ,, cutting, increasingly, important, nodes, .] 

>> PoS Tags are: 
[('consists', 'VERB'), ('tree', 'NOUN'), ('“', 'PUNCT'), ('pruning', 'NOUN'), (',', 'PUNCT'), ('”', 'PUNCT'), ('results', 'VERB'), ('creation', 'NOUN'), ('sequence', 'NOUN'), ('                                   ', 'SPACE'), ('simpler', 'ADJ'), ('simpler', 'ADJ'), ('trees', 'NOUN'), (',', 'PUNCT'), ('cutting', 'NOUN'), ('increasingly', 'ADV'), ('important', 'ADJ'), ('nodes', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('consists', 'ROOT'), ('tree', 'nmod'), ('“', 'punct'), ('pruning', 'pobj'), (',', 'punct'), ('”', 'punct'), ('results', 'relcl'), ('creation', 'pobj'), ('sequence', 'pobj'), ('                                   ', 'pobj'), ('simpler', 'amod'), ('simpler', 'conj'), ('trees', 'appos'), (',', 'punct'), ('cutting', 'pobj'), ('increasingly', 'advmod'), ('important', 'amod'), ('nodes', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[consists, tree], [tree, “], [“, pruning], [pruning, ,], [,, ”], [”, results], [results, creation], [creation, sequence], [sequence,                                    ], [                                   , simpler], [simpler, simpler], [simpler, trees], [trees, ,], [,, cutting], [cutting, increasingly], [increasingly, important], [important, nodes], [nodes, .]]

>> Trigrams: 
[[consists, tree, “], [tree, “, pruning], [“, pruning, ,], [pruning, ,, ”], [,, ”, results], [”, results, creation], [results, creation, sequence], [creation, sequence,                                    ], [sequence,                                    , simpler], [                                   , simpler, simpler], [simpler, simpler, trees], [simpler, trees, ,], [trees, ,, cutting], [,, cutting, increasingly], [cutting, increasingly, important], [increasingly, important, nodes], [important, nodes, .]]

>> Noun Phrases are: 
[It, tree “pruning, the creation, a sequence, trees, the cutting, increasingly important nodes]

>> Named Entities are: 
[] 

------------------- Sentence 12 -------------------

    


>> Tokens are: 
[   ] 

>> PoS Tags are: 
[('   ', 'SPACE')] 

>> Dependency Tags are: 
[('   ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 53 =================================

Yogesh Singh, Pradeep Kumar Bhatia & Omprakash Sangwan  

------------------- Sentence 1 -------------------

Yogesh Singh, Pradeep Kumar Bhatia & Omprakash Sangwan   


>> Tokens are: 
[Yogesh, Singh, ,, Pradeep, Kumar, Bhatia, &, Omprakash, Sangwan,  ] 

>> PoS Tags are: 
[('Yogesh', 'PROPN'), ('Singh', 'PROPN'), (',', 'PUNCT'), ('Pradeep', 'PROPN'), ('Kumar', 'PROPN'), ('Bhatia', 'PROPN'), ('&', 'CCONJ'), ('Omprakash', 'PROPN'), ('Sangwan', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Yogesh', 'compound'), ('Singh', 'ROOT'), (',', 'punct'), ('Pradeep', 'compound'), ('Kumar', 'compound'), ('Bhatia', 'conj'), ('&', 'cc'), ('Omprakash', 'compound'), ('Sangwan', 'conj'), (' ', 'punct')]

>> Bigrams: 
[[Yogesh, Singh], [Singh, ,], [,, Pradeep], [Pradeep, Kumar], [Kumar, Bhatia], [Bhatia, &], [&, Omprakash], [Omprakash, Sangwan], [Sangwan,  ]]

>> Trigrams: 
[[Yogesh, Singh, ,], [Singh, ,, Pradeep], [,, Pradeep, Kumar], [Pradeep, Kumar, Bhatia], [Kumar, Bhatia, &], [Bhatia, &, Omprakash], [&, Omprakash, Sangwan], [Omprakash, Sangwan,  ]]

>> Noun Phrases are: 
[Yogesh Singh, Pradeep Kumar Bhatia, Omprakash Sangwan]

>> Named Entities are: 
[('Yogesh Singh', 'PERSON'), ('Kumar Bhatia & Omprakash Sangwan', 'ORG')] 


================================ Paragraph 54 =================================

International Journal of Computer Science and Security, Volume (1) : Issue (1) 78  

------------------- Sentence 1 -------------------

International Journal of Computer Science and Security, Volume (1) : Issue (1) 78   


>> Tokens are: 
[International, Journal, Computer, Science, Security, ,, Volume, (, 1, ), :, Issue, (, 1, ), 78,  ] 

>> PoS Tags are: 
[('International', 'PROPN'), ('Journal', 'PROPN'), ('Computer', 'PROPN'), ('Science', 'PROPN'), ('Security', 'PROPN'), (',', 'PUNCT'), ('Volume', 'NOUN'), ('(', 'PUNCT'), ('1', 'NUM'), (')', 'PUNCT'), (':', 'PUNCT'), ('Issue', 'NOUN'), ('(', 'PUNCT'), ('1', 'NUM'), (')', 'PUNCT'), ('78', 'NUM'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('International', 'compound'), ('Journal', 'ROOT'), ('Computer', 'compound'), ('Science', 'pobj'), ('Security', 'conj'), (',', 'punct'), ('Volume', 'appos'), ('(', 'punct'), ('1', 'appos'), (')', 'punct'), (':', 'punct'), ('Issue', 'appos'), ('(', 'punct'), ('1', 'appos'), (')', 'punct'), ('78', 'nummod'), (' ', 'appos')]

>> Bigrams: 
[[International, Journal], [Journal, Computer], [Computer, Science], [Science, Security], [Security, ,], [,, Volume], [Volume, (], [(, 1], [1, )], [), :], [:, Issue], [Issue, (], [(, 1], [1, )], [), 78], [78,  ]]

>> Trigrams: 
[[International, Journal, Computer], [Journal, Computer, Science], [Computer, Science, Security], [Science, Security, ,], [Security, ,, Volume], [,, Volume, (], [Volume, (, 1], [(, 1, )], [1, ), :], [), :, Issue], [:, Issue, (], [Issue, (, 1], [(, 1, )], [1, ), 78], [), 78,  ]]

>> Noun Phrases are: 
[International Journal, Computer Science, Security, Volume, Issue]

>> Named Entities are: 
[('International Journal of Computer Science and Security, Volume', 'ORG'), ('1', 'CARDINAL')] 


================================ Paragraph 55 =================================

4. This step consists of optimal tree selection, during which the tree that fits the information in the  learning dataset, but does not over fit the information, is selected from among the sequence of  pruned trees.     

------------------- Sentence 1 -------------------

4. 


>> Tokens are: 
[4, .] 

>> PoS Tags are: 
[('4', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('4', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[4, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('4', 'CARDINAL')] 

------------------- Sentence 2 -------------------

This step consists of optimal tree selection, during which the tree that fits the information in the  learning dataset, but does not over fit the information, is selected from among the sequence of  pruned trees. 


>> Tokens are: 
[step, consists, optimal, tree, selection, ,, tree, fits, information,  , learning, dataset, ,, fit, information, ,, selected, sequence,  , pruned, trees, .] 

>> PoS Tags are: 
[('step', 'NOUN'), ('consists', 'VERB'), ('optimal', 'ADJ'), ('tree', 'NOUN'), ('selection', 'NOUN'), (',', 'PUNCT'), ('tree', 'NOUN'), ('fits', 'VERB'), ('information', 'NOUN'), (' ', 'SPACE'), ('learning', 'VERB'), ('dataset', 'NOUN'), (',', 'PUNCT'), ('fit', 'VERB'), ('information', 'NOUN'), (',', 'PUNCT'), ('selected', 'VERB'), ('sequence', 'NOUN'), (' ', 'SPACE'), ('pruned', 'VERB'), ('trees', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('step', 'nsubj'), ('consists', 'ROOT'), ('optimal', 'amod'), ('tree', 'compound'), ('selection', 'pobj'), (',', 'punct'), ('tree', 'dep'), ('fits', 'relcl'), ('information', 'dobj'), (' ', 'pobj'), ('learning', 'pcomp'), ('dataset', 'dobj'), (',', 'punct'), ('fit', 'conj'), ('information', 'dobj'), (',', 'punct'), ('selected', 'conj'), ('sequence', 'pobj'), (' ', 'pobj'), ('pruned', 'amod'), ('trees', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[step, consists], [consists, optimal], [optimal, tree], [tree, selection], [selection, ,], [,, tree], [tree, fits], [fits, information], [information,  ], [ , learning], [learning, dataset], [dataset, ,], [,, fit], [fit, information], [information, ,], [,, selected], [selected, sequence], [sequence,  ], [ , pruned], [pruned, trees], [trees, .]]

>> Trigrams: 
[[step, consists, optimal], [consists, optimal, tree], [optimal, tree, selection], [tree, selection, ,], [selection, ,, tree], [,, tree, fits], [tree, fits, information], [fits, information,  ], [information,  , learning], [ , learning, dataset], [learning, dataset, ,], [dataset, ,, fit], [,, fit, information], [fit, information, ,], [information, ,, selected], [,, selected, sequence], [selected, sequence,  ], [sequence,  , pruned], [ , pruned, trees], [pruned, trees, .]]

>> Noun Phrases are: 
[This step, optimal tree selection, the information, dataset, the information, the sequence, pruned trees]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

     


>> Tokens are: 
[    ] 

>> PoS Tags are: 
[('    ', 'SPACE')] 

>> Dependency Tags are: 
[('    ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 56 =================================

5.  RULE INDUCTION    Rule Induction is another very important machine learning method and it is easier because the  rules in rule induction are transparent and easy to interpret than a regression model or a trained  neural network. This paradigm employs condition-action rules, decision trees, or similar  knowledge structures. Here the performance element sorts instances down the branches of the  decision tree or finds the first rule whose conditions match the instance, typically using an all-or- none match process [19]. Information about classes or predictions is stored in the action sides of  the rules or the leaves of the tree. Learning algorithms in the rule induction framework usually  carry out a greedy search through the space of decision trees or rule sets, typically using a  statistical evaluation function to select attributes for incorporation into the knowledge structure.  Most methods partition the training data recursively into disjoint sets, attempting to summarize  each set as a conjunction of logical conditions.     Rule Learning process     If we are given a set of training examples i.e.- instances for which classification is known we find a  set of classification rules which are used to predict new cases that haven't been presented to the  learner before. While deriving these instances the bias imposed by languages must be taken into  account such as restrictions imposed while describing data and we must also consider the  language used to describe the induced set of rules.   Consider a binary classification problem of classifying instances into classes positive and  negative. We are given a data description language, which impose a bias on the data, training  examples, a hypothesis language imposing a bias on the induction rules and a coverage function  defining when an instance is covered by a rule. Given the above data we need to find a  hypothesis defined by a set of rules in a language, which is consistent that it does not cover any  negative examples and is complete that it covers all positive examples. Thus in this manner,  given the required data and the problem we can determine a set of rules, which classify the  instances in that problem. This forms the basis of rule induction.    There are two main approaches to rule induction namely propositional learning and relational rule  learning.     Propositional Rule Learning     Propositional rule learning systems are suited for problems in which no substantial relationship  between the values of the different attributes needs to be represented.  A set of instances with  known classifications where each instance is described by values of a fixed collection of attributes  is given. The attributes can have either a fixed set of values or take real numbers as values.  Given these instances we then construct a set of IF-THEN rules. The output of learning is a  hypothesis represented by a set of rules. After the rules have been defined determining the  accuracy of such rules and then applying these rules to practical problems analyze their quality.  In propositional learning the available data has a standard form with rows being individual records  or training examples and columns being properties or attributes to describe the data.     Relational Rule Learning/ Inductive logic Programming (ILP)    When data is stored in several tables then it has a relational database form. In such cases the  data has to be transformed into a single table in order to use standard data mining techniques.  The most common data transformation approach is to select one table as the main table to be  used for learning, and try to incorporate the contents of other tables by summarizing the  information contained in the table into some summary attributes, added to the main table. The 

------------------- Sentence 1 -------------------

5.   


>> Tokens are: 
[5, .,  ] 

>> PoS Tags are: 
[('5', 'X'), ('.', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('5', 'ROOT'), ('.', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[5, .], [.,  ]]

>> Trigrams: 
[[5, .,  ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('5', 'CARDINAL')] 

------------------- Sentence 2 -------------------

RULE INDUCTION    Rule Induction is another very important machine learning method and it is easier because the  rules in rule induction are transparent and easy to interpret than a regression model or a trained  neural network. 


>> Tokens are: 
[RULE, INDUCTION,    , Rule, Induction, important, machine, learning, method, easier,  , rules, rule, induction, transparent, easy, interpret, regression, model, trained,  , neural, network, .] 

>> PoS Tags are: 
[('RULE', 'VERB'), ('INDUCTION', 'NOUN'), ('   ', 'SPACE'), ('Rule', 'PROPN'), ('Induction', 'PROPN'), ('important', 'ADJ'), ('machine', 'NOUN'), ('learning', 'NOUN'), ('method', 'NOUN'), ('easier', 'ADJ'), (' ', 'SPACE'), ('rules', 'NOUN'), ('rule', 'NOUN'), ('induction', 'NOUN'), ('transparent', 'ADJ'), ('easy', 'ADJ'), ('interpret', 'VERB'), ('regression', 'NOUN'), ('model', 'NOUN'), ('trained', 'VERB'), (' ', 'SPACE'), ('neural', 'ADJ'), ('network', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('RULE', 'compound'), ('INDUCTION', 'compound'), ('   ', 'nummod'), ('Rule', 'compound'), ('Induction', 'nsubj'), ('important', 'amod'), ('machine', 'compound'), ('learning', 'compound'), ('method', 'attr'), ('easier', 'acomp'), (' ', 'compound'), ('rules', 'nsubj'), ('rule', 'compound'), ('induction', 'pobj'), ('transparent', 'acomp'), ('easy', 'conj'), ('interpret', 'xcomp'), ('regression', 'compound'), ('model', 'pobj'), ('trained', 'amod'), (' ', 'nmod'), ('neural', 'amod'), ('network', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[RULE, INDUCTION], [INDUCTION,    ], [   , Rule], [Rule, Induction], [Induction, important], [important, machine], [machine, learning], [learning, method], [method, easier], [easier,  ], [ , rules], [rules, rule], [rule, induction], [induction, transparent], [transparent, easy], [easy, interpret], [interpret, regression], [regression, model], [model, trained], [trained,  ], [ , neural], [neural, network], [network, .]]

>> Trigrams: 
[[RULE, INDUCTION,    ], [INDUCTION,    , Rule], [   , Rule, Induction], [Rule, Induction, important], [Induction, important, machine], [important, machine, learning], [machine, learning, method], [learning, method, easier], [method, easier,  ], [easier,  , rules], [ , rules, rule], [rules, rule, induction], [rule, induction, transparent], [induction, transparent, easy], [transparent, easy, interpret], [easy, interpret, regression], [interpret, regression, model], [regression, model, trained], [model, trained,  ], [trained,  , neural], [ , neural, network], [neural, network, .]]

>> Noun Phrases are: 
[RULE INDUCTION    Rule Induction, another very important machine learning method, it, the  rules, rule induction, a regression model, a trained  neural network]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

This paradigm employs condition-action rules, decision trees, or similar  knowledge structures. 


>> Tokens are: 
[paradigm, employs, condition, -, action, rules, ,, decision, trees, ,, similar,  , knowledge, structures, .] 

>> PoS Tags are: 
[('paradigm', 'NOUN'), ('employs', 'VERB'), ('condition', 'NOUN'), ('-', 'PUNCT'), ('action', 'NOUN'), ('rules', 'NOUN'), (',', 'PUNCT'), ('decision', 'NOUN'), ('trees', 'NOUN'), (',', 'PUNCT'), ('similar', 'ADJ'), (' ', 'SPACE'), ('knowledge', 'NOUN'), ('structures', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('paradigm', 'nsubj'), ('employs', 'ROOT'), ('condition', 'compound'), ('-', 'punct'), ('action', 'compound'), ('rules', 'dobj'), (',', 'punct'), ('decision', 'compound'), ('trees', 'conj'), (',', 'punct'), ('similar', 'amod'), (' ', 'compound'), ('knowledge', 'compound'), ('structures', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[paradigm, employs], [employs, condition], [condition, -], [-, action], [action, rules], [rules, ,], [,, decision], [decision, trees], [trees, ,], [,, similar], [similar,  ], [ , knowledge], [knowledge, structures], [structures, .]]

>> Trigrams: 
[[paradigm, employs, condition], [employs, condition, -], [condition, -, action], [-, action, rules], [action, rules, ,], [rules, ,, decision], [,, decision, trees], [decision, trees, ,], [trees, ,, similar], [,, similar,  ], [similar,  , knowledge], [ , knowledge, structures], [knowledge, structures, .]]

>> Noun Phrases are: 
[This paradigm, condition-action rules, decision trees, similar  knowledge structures]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

Here the performance element sorts instances down the branches of the  decision tree or finds the first rule whose conditions match the instance, typically using an all-or- none match process [19]. 


>> Tokens are: 
[performance, element, sorts, instances, branches,  , decision, tree, finds, rule, conditions, match, instance, ,, typically, -, or-, match, process, [, 19, ], .] 

>> PoS Tags are: 
[('performance', 'NOUN'), ('element', 'NOUN'), ('sorts', 'VERB'), ('instances', 'NOUN'), ('branches', 'NOUN'), (' ', 'SPACE'), ('decision', 'NOUN'), ('tree', 'NOUN'), ('finds', 'VERB'), ('rule', 'NOUN'), ('conditions', 'NOUN'), ('match', 'VERB'), ('instance', 'NOUN'), (',', 'PUNCT'), ('typically', 'ADV'), ('-', 'PUNCT'), ('or-', 'PROPN'), ('match', 'NOUN'), ('process', 'NOUN'), ('[', 'PUNCT'), ('19', 'NUM'), (']', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('performance', 'compound'), ('element', 'nsubj'), ('sorts', 'ROOT'), ('instances', 'dobj'), ('branches', 'pobj'), (' ', 'compound'), ('decision', 'compound'), ('tree', 'pobj'), ('finds', 'conj'), ('rule', 'dobj'), ('conditions', 'nsubj'), ('match', 'relcl'), ('instance', 'dobj'), (',', 'punct'), ('typically', 'advmod'), ('-', 'punct'), ('or-', 'nmod'), ('match', 'compound'), ('process', 'dobj'), ('[', 'punct'), ('19', 'appos'), (']', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[performance, element], [element, sorts], [sorts, instances], [instances, branches], [branches,  ], [ , decision], [decision, tree], [tree, finds], [finds, rule], [rule, conditions], [conditions, match], [match, instance], [instance, ,], [,, typically], [typically, -], [-, or-], [or-, match], [match, process], [process, [], [[, 19], [19, ]], [], .]]

>> Trigrams: 
[[performance, element, sorts], [element, sorts, instances], [sorts, instances, branches], [instances, branches,  ], [branches,  , decision], [ , decision, tree], [decision, tree, finds], [tree, finds, rule], [finds, rule, conditions], [rule, conditions, match], [conditions, match, instance], [match, instance, ,], [instance, ,, typically], [,, typically, -], [typically, -, or-], [-, or-, match], [or-, match, process], [match, process, [], [process, [, 19], [[, 19, ]], [19, ], .]]

>> Noun Phrases are: 
[the performance element, instances, the branches, the  decision tree, the first rule, whose conditions, the instance, an all-or- none match process]

>> Named Entities are: 
[('first', 'ORDINAL'), ('19', 'CARDINAL')] 

------------------- Sentence 5 -------------------

Information about classes or predictions is stored in the action sides of  the rules or the leaves of the tree. 


>> Tokens are: 
[Information, classes, predictions, stored, action, sides,  , rules, leaves, tree, .] 

>> PoS Tags are: 
[('Information', 'NOUN'), ('classes', 'NOUN'), ('predictions', 'NOUN'), ('stored', 'VERB'), ('action', 'NOUN'), ('sides', 'NOUN'), (' ', 'SPACE'), ('rules', 'NOUN'), ('leaves', 'NOUN'), ('tree', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Information', 'nsubjpass'), ('classes', 'pobj'), ('predictions', 'conj'), ('stored', 'ROOT'), ('action', 'compound'), ('sides', 'pobj'), (' ', 'pobj'), ('rules', 'pobj'), ('leaves', 'conj'), ('tree', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Information, classes], [classes, predictions], [predictions, stored], [stored, action], [action, sides], [sides,  ], [ , rules], [rules, leaves], [leaves, tree], [tree, .]]

>> Trigrams: 
[[Information, classes, predictions], [classes, predictions, stored], [predictions, stored, action], [stored, action, sides], [action, sides,  ], [sides,  , rules], [ , rules, leaves], [rules, leaves, tree], [leaves, tree, .]]

>> Noun Phrases are: 
[Information, classes, predictions, the action sides, the rules, the leaves, the tree]

>> Named Entities are: 
[] 

------------------- Sentence 6 -------------------

Learning algorithms in the rule induction framework usually  carry out a greedy search through the space of decision trees or rule sets, typically using a  statistical evaluation function to select attributes for incorporation into the knowledge structure. 


>> Tokens are: 
[Learning, algorithms, rule, induction, framework, usually,  , carry, greedy, search, space, decision, trees, rule, sets, ,, typically,  , statistical, evaluation, function, select, attributes, incorporation, knowledge, structure, .] 

>> PoS Tags are: 
[('Learning', 'VERB'), ('algorithms', 'NOUN'), ('rule', 'NOUN'), ('induction', 'NOUN'), ('framework', 'NOUN'), ('usually', 'ADV'), (' ', 'SPACE'), ('carry', 'VERB'), ('greedy', 'ADJ'), ('search', 'NOUN'), ('space', 'NOUN'), ('decision', 'NOUN'), ('trees', 'NOUN'), ('rule', 'NOUN'), ('sets', 'NOUN'), (',', 'PUNCT'), ('typically', 'ADV'), (' ', 'SPACE'), ('statistical', 'ADJ'), ('evaluation', 'NOUN'), ('function', 'NOUN'), ('select', 'VERB'), ('attributes', 'NOUN'), ('incorporation', 'NOUN'), ('knowledge', 'NOUN'), ('structure', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Learning', 'advcl'), ('algorithms', 'dobj'), ('rule', 'compound'), ('induction', 'compound'), ('framework', 'pobj'), ('usually', 'advmod'), (' ', 'nsubj'), ('carry', 'ROOT'), ('greedy', 'amod'), ('search', 'dobj'), ('space', 'pobj'), ('decision', 'compound'), ('trees', 'pobj'), ('rule', 'compound'), ('sets', 'conj'), (',', 'punct'), ('typically', 'advmod'), (' ', 'nmod'), ('statistical', 'amod'), ('evaluation', 'compound'), ('function', 'dobj'), ('select', 'relcl'), ('attributes', 'dobj'), ('incorporation', 'pobj'), ('knowledge', 'compound'), ('structure', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Learning, algorithms], [algorithms, rule], [rule, induction], [induction, framework], [framework, usually], [usually,  ], [ , carry], [carry, greedy], [greedy, search], [search, space], [space, decision], [decision, trees], [trees, rule], [rule, sets], [sets, ,], [,, typically], [typically,  ], [ , statistical], [statistical, evaluation], [evaluation, function], [function, select], [select, attributes], [attributes, incorporation], [incorporation, knowledge], [knowledge, structure], [structure, .]]

>> Trigrams: 
[[Learning, algorithms, rule], [algorithms, rule, induction], [rule, induction, framework], [induction, framework, usually], [framework, usually,  ], [usually,  , carry], [ , carry, greedy], [carry, greedy, search], [greedy, search, space], [search, space, decision], [space, decision, trees], [decision, trees, rule], [trees, rule, sets], [rule, sets, ,], [sets, ,, typically], [,, typically,  ], [typically,  , statistical], [ , statistical, evaluation], [statistical, evaluation, function], [evaluation, function, select], [function, select, attributes], [select, attributes, incorporation], [attributes, incorporation, knowledge], [incorporation, knowledge, structure], [knowledge, structure, .]]

>> Noun Phrases are: 
[algorithms, the rule induction framework, a greedy search, the space, decision trees, rule sets, a  statistical evaluation function, attributes, incorporation, the knowledge structure]

>> Named Entities are: 
[] 

------------------- Sentence 7 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 8 -------------------

Most methods partition the training data recursively into disjoint sets, attempting to summarize  each set as a conjunction of logical conditions. 


>> Tokens are: 
[methods, partition, training, data, recursively, disjoint, sets, ,, attempting, summarize,  , set, conjunction, logical, conditions, .] 

>> PoS Tags are: 
[('methods', 'NOUN'), ('partition', 'VERB'), ('training', 'NOUN'), ('data', 'NOUN'), ('recursively', 'ADV'), ('disjoint', 'NOUN'), ('sets', 'NOUN'), (',', 'PUNCT'), ('attempting', 'VERB'), ('summarize', 'VERB'), (' ', 'SPACE'), ('set', 'VERB'), ('conjunction', 'NOUN'), ('logical', 'ADJ'), ('conditions', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('methods', 'nsubj'), ('partition', 'ROOT'), ('training', 'compound'), ('data', 'dobj'), ('recursively', 'advmod'), ('disjoint', 'compound'), ('sets', 'pobj'), (',', 'punct'), ('attempting', 'advcl'), ('summarize', 'xcomp'), (' ', 'dobj'), ('set', 'npadvmod'), ('conjunction', 'pobj'), ('logical', 'amod'), ('conditions', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[methods, partition], [partition, training], [training, data], [data, recursively], [recursively, disjoint], [disjoint, sets], [sets, ,], [,, attempting], [attempting, summarize], [summarize,  ], [ , set], [set, conjunction], [conjunction, logical], [logical, conditions], [conditions, .]]

>> Trigrams: 
[[methods, partition, training], [partition, training, data], [training, data, recursively], [data, recursively, disjoint], [recursively, disjoint, sets], [disjoint, sets, ,], [sets, ,, attempting], [,, attempting, summarize], [attempting, summarize,  ], [summarize,  , set], [ , set, conjunction], [set, conjunction, logical], [conjunction, logical, conditions], [logical, conditions, .]]

>> Noun Phrases are: 
[Most methods, the training data, disjoint sets, a conjunction, logical conditions]

>> Named Entities are: 
[] 

------------------- Sentence 9 -------------------

    Rule Learning process     If we are given a set of training examples i.e.- instances for which classification is known we find a  set of classification rules which are used to predict new cases that haven't been presented to the  learner before. 


>> Tokens are: 
[    , Rule, Learning, process,     , given, set, training, examples, i.e.-, instances, classification, known, find,  , set, classification, rules, predict, new, cases, presented,  , learner, .] 

>> PoS Tags are: 
[('    ', 'SPACE'), ('Rule', 'PROPN'), ('Learning', 'PROPN'), ('process', 'NOUN'), ('    ', 'SPACE'), ('given', 'VERB'), ('set', 'NOUN'), ('training', 'NOUN'), ('examples', 'NOUN'), ('i.e.-', 'VERB'), ('instances', 'NOUN'), ('classification', 'NOUN'), ('known', 'VERB'), ('find', 'VERB'), (' ', 'SPACE'), ('set', 'NOUN'), ('classification', 'NOUN'), ('rules', 'NOUN'), ('predict', 'VERB'), ('new', 'ADJ'), ('cases', 'NOUN'), ('presented', 'VERB'), (' ', 'SPACE'), ('learner', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('    ', 'compound'), ('Rule', 'compound'), ('Learning', 'nsubj'), ('process', 'nsubj'), ('    ', 'dobj'), ('given', 'advcl'), ('set', 'dobj'), ('training', 'compound'), ('examples', 'pobj'), ('i.e.-', 'ROOT'), ('instances', 'dobj'), ('classification', 'nsubjpass'), ('known', 'relcl'), ('find', 'ccomp'), (' ', 'compound'), ('set', 'dobj'), ('classification', 'compound'), ('rules', 'pobj'), ('predict', 'xcomp'), ('new', 'amod'), ('cases', 'dobj'), ('presented', 'relcl'), (' ', 'compound'), ('learner', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[    , Rule], [Rule, Learning], [Learning, process], [process,     ], [    , given], [given, set], [set, training], [training, examples], [examples, i.e.-], [i.e.-, instances], [instances, classification], [classification, known], [known, find], [find,  ], [ , set], [set, classification], [classification, rules], [rules, predict], [predict, new], [new, cases], [cases, presented], [presented,  ], [ , learner], [learner, .]]

>> Trigrams: 
[[    , Rule, Learning], [Rule, Learning, process], [Learning, process,     ], [process,     , given], [    , given, set], [given, set, training], [set, training, examples], [training, examples, i.e.-], [examples, i.e.-, instances], [i.e.-, instances, classification], [instances, classification, known], [classification, known, find], [known, find,  ], [find,  , set], [ , set, classification], [set, classification, rules], [classification, rules, predict], [rules, predict, new], [predict, new, cases], [new, cases, presented], [cases, presented,  ], [presented,  , learner], [ , learner, .]]

>> Noun Phrases are: 
[    Rule Learning, we, a set, training examples, instances, classification, we, a  set, classification rules, new cases, the  learner]

>> Named Entities are: 
[] 

------------------- Sentence 10 -------------------

While deriving these instances the bias imposed by languages must be taken into  account such as restrictions imposed while describing data and we must also consider the  language used to describe the induced set of rules. 


>> Tokens are: 
[deriving, instances, bias, imposed, languages, taken,  , account, restrictions, imposed, describing, data, consider,  , language, describe, induced, set, rules, .] 

>> PoS Tags are: 
[('deriving', 'VERB'), ('instances', 'NOUN'), ('bias', 'NOUN'), ('imposed', 'VERB'), ('languages', 'NOUN'), ('taken', 'VERB'), (' ', 'SPACE'), ('account', 'NOUN'), ('restrictions', 'NOUN'), ('imposed', 'VERB'), ('describing', 'VERB'), ('data', 'NOUN'), ('consider', 'VERB'), (' ', 'SPACE'), ('language', 'NOUN'), ('describe', 'VERB'), ('induced', 'VERB'), ('set', 'NOUN'), ('rules', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('deriving', 'advcl'), ('instances', 'dobj'), ('bias', 'dobj'), ('imposed', 'acl'), ('languages', 'pobj'), ('taken', 'ROOT'), (' ', 'compound'), ('account', 'pobj'), ('restrictions', 'pobj'), ('imposed', 'acl'), ('describing', 'advcl'), ('data', 'dobj'), ('consider', 'conj'), (' ', 'compound'), ('language', 'nsubj'), ('describe', 'xcomp'), ('induced', 'amod'), ('set', 'dobj'), ('rules', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[deriving, instances], [instances, bias], [bias, imposed], [imposed, languages], [languages, taken], [taken,  ], [ , account], [account, restrictions], [restrictions, imposed], [imposed, describing], [describing, data], [data, consider], [consider,  ], [ , language], [language, describe], [describe, induced], [induced, set], [set, rules], [rules, .]]

>> Trigrams: 
[[deriving, instances, bias], [instances, bias, imposed], [bias, imposed, languages], [imposed, languages, taken], [languages, taken,  ], [taken,  , account], [ , account, restrictions], [account, restrictions, imposed], [restrictions, imposed, describing], [imposed, describing, data], [describing, data, consider], [data, consider,  ], [consider,  , language], [ , language, describe], [language, describe, induced], [describe, induced, set], [induced, set, rules], [set, rules, .]]

>> Noun Phrases are: 
[these instances, the bias, languages,  account, restrictions, data, we, the  language, the induced set, rules]

>> Named Entities are: 
[] 

------------------- Sentence 11 -------------------

  Consider a binary classification problem of classifying instances into classes positive and  negative. 


>> Tokens are: 
[  , Consider, binary, classification, problem, classifying, instances, classes, positive,  , negative, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('Consider', 'VERB'), ('binary', 'ADJ'), ('classification', 'NOUN'), ('problem', 'NOUN'), ('classifying', 'VERB'), ('instances', 'NOUN'), ('classes', 'NOUN'), ('positive', 'ADJ'), (' ', 'SPACE'), ('negative', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'nsubj'), ('Consider', 'ROOT'), ('binary', 'amod'), ('classification', 'compound'), ('problem', 'dobj'), ('classifying', 'pcomp'), ('instances', 'dobj'), ('classes', 'pobj'), ('positive', 'amod'), (' ', 'conj'), ('negative', 'advcl'), ('.', 'punct')]

>> Bigrams: 
[[  , Consider], [Consider, binary], [binary, classification], [classification, problem], [problem, classifying], [classifying, instances], [instances, classes], [classes, positive], [positive,  ], [ , negative], [negative, .]]

>> Trigrams: 
[[  , Consider, binary], [Consider, binary, classification], [binary, classification, problem], [classification, problem, classifying], [problem, classifying, instances], [classifying, instances, classes], [instances, classes, positive], [classes, positive,  ], [positive,  , negative], [ , negative, .]]

>> Noun Phrases are: 
[a binary classification problem, instances, classes]

>> Named Entities are: 
[] 

------------------- Sentence 12 -------------------

We are given a data description language, which impose a bias on the data, training  examples, a hypothesis language imposing a bias on the induction rules and a coverage function  defining when an instance is covered by a rule. 


>> Tokens are: 
[given, data, description, language, ,, impose, bias, data, ,, training,  , examples, ,, hypothesis, language, imposing, bias, induction, rules, coverage, function,  , defining, instance, covered, rule, .] 

>> PoS Tags are: 
[('given', 'VERB'), ('data', 'NOUN'), ('description', 'NOUN'), ('language', 'NOUN'), (',', 'PUNCT'), ('impose', 'VERB'), ('bias', 'NOUN'), ('data', 'NOUN'), (',', 'PUNCT'), ('training', 'VERB'), (' ', 'SPACE'), ('examples', 'NOUN'), (',', 'PUNCT'), ('hypothesis', 'NOUN'), ('language', 'NOUN'), ('imposing', 'VERB'), ('bias', 'NOUN'), ('induction', 'NOUN'), ('rules', 'NOUN'), ('coverage', 'NOUN'), ('function', 'NOUN'), (' ', 'SPACE'), ('defining', 'VERB'), ('instance', 'NOUN'), ('covered', 'VERB'), ('rule', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('given', 'ROOT'), ('data', 'compound'), ('description', 'compound'), ('language', 'dobj'), (',', 'punct'), ('impose', 'relcl'), ('bias', 'dobj'), ('data', 'pobj'), (',', 'punct'), ('training', 'advcl'), (' ', 'punct'), ('examples', 'dobj'), (',', 'punct'), ('hypothesis', 'compound'), ('language', 'appos'), ('imposing', 'acl'), ('bias', 'dobj'), ('induction', 'compound'), ('rules', 'pobj'), ('coverage', 'compound'), ('function', 'conj'), (' ', 'nsubj'), ('defining', 'acl'), ('instance', 'nsubjpass'), ('covered', 'advcl'), ('rule', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[given, data], [data, description], [description, language], [language, ,], [,, impose], [impose, bias], [bias, data], [data, ,], [,, training], [training,  ], [ , examples], [examples, ,], [,, hypothesis], [hypothesis, language], [language, imposing], [imposing, bias], [bias, induction], [induction, rules], [rules, coverage], [coverage, function], [function,  ], [ , defining], [defining, instance], [instance, covered], [covered, rule], [rule, .]]

>> Trigrams: 
[[given, data, description], [data, description, language], [description, language, ,], [language, ,, impose], [,, impose, bias], [impose, bias, data], [bias, data, ,], [data, ,, training], [,, training,  ], [training,  , examples], [ , examples, ,], [examples, ,, hypothesis], [,, hypothesis, language], [hypothesis, language, imposing], [language, imposing, bias], [imposing, bias, induction], [bias, induction, rules], [induction, rules, coverage], [rules, coverage, function], [coverage, function,  ], [function,  , defining], [ , defining, instance], [defining, instance, covered], [instance, covered, rule], [covered, rule, .]]

>> Noun Phrases are: 
[We, a data description language, a bias, the data, examples, a hypothesis language, a bias, the induction rules, a coverage function, an instance, a rule]

>> Named Entities are: 
[] 

------------------- Sentence 13 -------------------

Given the above data we need to find a  hypothesis defined by a set of rules in a language, which is consistent that it does not cover any  negative examples and is complete that it covers all positive examples. 


>> Tokens are: 
[Given, data, need, find,  , hypothesis, defined, set, rules, language, ,, consistent, cover,  , negative, examples, complete, covers, positive, examples, .] 

>> PoS Tags are: 
[('Given', 'VERB'), ('data', 'NOUN'), ('need', 'VERB'), ('find', 'VERB'), (' ', 'SPACE'), ('hypothesis', 'NOUN'), ('defined', 'VERB'), ('set', 'NOUN'), ('rules', 'NOUN'), ('language', 'NOUN'), (',', 'PUNCT'), ('consistent', 'ADJ'), ('cover', 'VERB'), (' ', 'SPACE'), ('negative', 'ADJ'), ('examples', 'NOUN'), ('complete', 'ADJ'), ('covers', 'VERB'), ('positive', 'ADJ'), ('examples', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Given', 'prep'), ('data', 'pobj'), ('need', 'ROOT'), ('find', 'xcomp'), (' ', 'compound'), ('hypothesis', 'dobj'), ('defined', 'acl'), ('set', 'pobj'), ('rules', 'pobj'), ('language', 'pobj'), (',', 'punct'), ('consistent', 'acomp'), ('cover', 'ccomp'), (' ', 'nmod'), ('negative', 'amod'), ('examples', 'dobj'), ('complete', 'acomp'), ('covers', 'ccomp'), ('positive', 'amod'), ('examples', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Given, data], [data, need], [need, find], [find,  ], [ , hypothesis], [hypothesis, defined], [defined, set], [set, rules], [rules, language], [language, ,], [,, consistent], [consistent, cover], [cover,  ], [ , negative], [negative, examples], [examples, complete], [complete, covers], [covers, positive], [positive, examples], [examples, .]]

>> Trigrams: 
[[Given, data, need], [data, need, find], [need, find,  ], [find,  , hypothesis], [ , hypothesis, defined], [hypothesis, defined, set], [defined, set, rules], [set, rules, language], [rules, language, ,], [language, ,, consistent], [,, consistent, cover], [consistent, cover,  ], [cover,  , negative], [ , negative, examples], [negative, examples, complete], [examples, complete, covers], [complete, covers, positive], [covers, positive, examples], [positive, examples, .]]

>> Noun Phrases are: 
[the above data, we, a  hypothesis, a set, rules, a language, it, any  negative examples, it, all positive examples]

>> Named Entities are: 
[] 

------------------- Sentence 14 -------------------

Thus in this manner,  given the required data and the problem we can determine a set of rules, which classify the  instances in that problem. 


>> Tokens are: 
[manner, ,,  , given, required, data, problem, determine, set, rules, ,, classify,  , instances, problem, .] 

>> PoS Tags are: 
[('manner', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('given', 'VERB'), ('required', 'VERB'), ('data', 'NOUN'), ('problem', 'NOUN'), ('determine', 'VERB'), ('set', 'NOUN'), ('rules', 'NOUN'), (',', 'PUNCT'), ('classify', 'VERB'), (' ', 'SPACE'), ('instances', 'NOUN'), ('problem', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('manner', 'pobj'), (',', 'punct'), (' ', 'nsubj'), ('given', 'advcl'), ('required', 'amod'), ('data', 'dobj'), ('problem', 'conj'), ('determine', 'ROOT'), ('set', 'dobj'), ('rules', 'pobj'), (',', 'punct'), ('classify', 'relcl'), (' ', 'compound'), ('instances', 'dobj'), ('problem', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[manner, ,], [,,  ], [ , given], [given, required], [required, data], [data, problem], [problem, determine], [determine, set], [set, rules], [rules, ,], [,, classify], [classify,  ], [ , instances], [instances, problem], [problem, .]]

>> Trigrams: 
[[manner, ,,  ], [,,  , given], [ , given, required], [given, required, data], [required, data, problem], [data, problem, determine], [problem, determine, set], [determine, set, rules], [set, rules, ,], [rules, ,, classify], [,, classify,  ], [classify,  , instances], [ , instances, problem], [instances, problem, .]]

>> Noun Phrases are: 
[this manner, the required data, the problem, we, a set, rules, the  instances, that problem]

>> Named Entities are: 
[] 

------------------- Sentence 15 -------------------

This forms the basis of rule induction. 


>> Tokens are: 
[forms, basis, rule, induction, .] 

>> PoS Tags are: 
[('forms', 'VERB'), ('basis', 'NOUN'), ('rule', 'NOUN'), ('induction', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('forms', 'ROOT'), ('basis', 'dobj'), ('rule', 'compound'), ('induction', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[forms, basis], [basis, rule], [rule, induction], [induction, .]]

>> Trigrams: 
[[forms, basis, rule], [basis, rule, induction], [rule, induction, .]]

>> Noun Phrases are: 
[the basis, rule induction]

>> Named Entities are: 
[] 

------------------- Sentence 16 -------------------

   There are two main approaches to rule induction namely propositional learning and relational rule  learning. 


>> Tokens are: 
[   , main, approaches, rule, induction, propositional, learning, relational, rule,  , learning, .] 

>> PoS Tags are: 
[('   ', 'SPACE'), ('main', 'ADJ'), ('approaches', 'NOUN'), ('rule', 'VERB'), ('induction', 'NOUN'), ('propositional', 'ADJ'), ('learning', 'NOUN'), ('relational', 'ADJ'), ('rule', 'NOUN'), (' ', 'SPACE'), ('learning', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('   ', 'dep'), ('main', 'amod'), ('approaches', 'attr'), ('rule', 'relcl'), ('induction', 'dobj'), ('propositional', 'amod'), ('learning', 'nmod'), ('relational', 'conj'), ('rule', 'dobj'), (' ', 'compound'), ('learning', 'advcl'), ('.', 'punct')]

>> Bigrams: 
[[   , main], [main, approaches], [approaches, rule], [rule, induction], [induction, propositional], [propositional, learning], [learning, relational], [relational, rule], [rule,  ], [ , learning], [learning, .]]

>> Trigrams: 
[[   , main, approaches], [main, approaches, rule], [approaches, rule, induction], [rule, induction, propositional], [induction, propositional, learning], [propositional, learning, relational], [learning, relational, rule], [relational, rule,  ], [rule,  , learning], [ , learning, .]]

>> Noun Phrases are: 
[two main approaches, induction, namely propositional learning and relational rule]

>> Named Entities are: 
[('two', 'CARDINAL')] 

------------------- Sentence 17 -------------------

    Propositional Rule Learning     Propositional rule learning systems are suited for problems in which no substantial relationship  between the values of the different attributes needs to be represented. 


>> Tokens are: 
[    , Propositional, Rule, Learning,     , Propositional, rule, learning, systems, suited, problems, substantial, relationship,  , values, different, attributes, needs, represented, .] 

>> PoS Tags are: 
[('    ', 'SPACE'), ('Propositional', 'PROPN'), ('Rule', 'PROPN'), ('Learning', 'PROPN'), ('    ', 'SPACE'), ('Propositional', 'ADJ'), ('rule', 'NOUN'), ('learning', 'NOUN'), ('systems', 'NOUN'), ('suited', 'VERB'), ('problems', 'NOUN'), ('substantial', 'ADJ'), ('relationship', 'NOUN'), (' ', 'SPACE'), ('values', 'NOUN'), ('different', 'ADJ'), ('attributes', 'NOUN'), ('needs', 'VERB'), ('represented', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('    ', 'nummod'), ('Propositional', 'compound'), ('Rule', 'compound'), ('Learning', 'nmod'), ('    ', 'nummod'), ('Propositional', 'amod'), ('rule', 'compound'), ('learning', 'compound'), ('systems', 'nsubjpass'), ('suited', 'ROOT'), ('problems', 'pobj'), ('substantial', 'amod'), ('relationship', 'nsubj'), (' ', 'appos'), ('values', 'pobj'), ('different', 'amod'), ('attributes', 'pobj'), ('needs', 'relcl'), ('represented', 'xcomp'), ('.', 'punct')]

>> Bigrams: 
[[    , Propositional], [Propositional, Rule], [Rule, Learning], [Learning,     ], [    , Propositional], [Propositional, rule], [rule, learning], [learning, systems], [systems, suited], [suited, problems], [problems, substantial], [substantial, relationship], [relationship,  ], [ , values], [values, different], [different, attributes], [attributes, needs], [needs, represented], [represented, .]]

>> Trigrams: 
[[    , Propositional, Rule], [Propositional, Rule, Learning], [Rule, Learning,     ], [Learning,     , Propositional], [    , Propositional, rule], [Propositional, rule, learning], [rule, learning, systems], [learning, systems, suited], [systems, suited, problems], [suited, problems, substantial], [problems, substantial, relationship], [substantial, relationship,  ], [relationship,  , values], [ , values, different], [values, different, attributes], [different, attributes, needs], [attributes, needs, represented], [needs, represented, .]]

>> Noun Phrases are: 
[    Propositional Rule Learning     Propositional rule learning systems, problems, no substantial relationship, the values, the different attributes]

>> Named Entities are: 
[] 

------------------- Sentence 18 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 19 -------------------

A set of instances with  known classifications where each instance is described by values of a fixed collection of attributes  is given. 


>> Tokens are: 
[set, instances,  , known, classifications, instance, described, values, fixed, collection, attributes,  , given, .] 

>> PoS Tags are: 
[('set', 'NOUN'), ('instances', 'NOUN'), (' ', 'SPACE'), ('known', 'VERB'), ('classifications', 'NOUN'), ('instance', 'NOUN'), ('described', 'VERB'), ('values', 'NOUN'), ('fixed', 'VERB'), ('collection', 'NOUN'), ('attributes', 'NOUN'), (' ', 'SPACE'), ('given', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('set', 'ROOT'), ('instances', 'pobj'), (' ', 'det'), ('known', 'amod'), ('classifications', 'pobj'), ('instance', 'nsubjpass'), ('described', 'relcl'), ('values', 'pobj'), ('fixed', 'amod'), ('collection', 'pobj'), ('attributes', 'pobj'), (' ', 'nsubjpass'), ('given', 'relcl'), ('.', 'punct')]

>> Bigrams: 
[[set, instances], [instances,  ], [ , known], [known, classifications], [classifications, instance], [instance, described], [described, values], [values, fixed], [fixed, collection], [collection, attributes], [attributes,  ], [ , given], [given, .]]

>> Trigrams: 
[[set, instances,  ], [instances,  , known], [ , known, classifications], [known, classifications, instance], [classifications, instance, described], [instance, described, values], [described, values, fixed], [values, fixed, collection], [fixed, collection, attributes], [collection, attributes,  ], [attributes,  , given], [ , given, .]]

>> Noun Phrases are: 
[A set, instances,  known classifications, each instance, values, a fixed collection, attributes]

>> Named Entities are: 
[] 

------------------- Sentence 20 -------------------

The attributes can have either a fixed set of values or take real numbers as values.   


>> Tokens are: 
[attributes, fixed, set, values, real, numbers, values, .,  ] 

>> PoS Tags are: 
[('attributes', 'NOUN'), ('fixed', 'VERB'), ('set', 'NOUN'), ('values', 'NOUN'), ('real', 'ADJ'), ('numbers', 'NOUN'), ('values', 'NOUN'), ('.', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('attributes', 'nsubj'), ('fixed', 'amod'), ('set', 'dobj'), ('values', 'pobj'), ('real', 'amod'), ('numbers', 'dobj'), ('values', 'pobj'), ('.', 'punct'), (' ', 'dobj')]

>> Bigrams: 
[[attributes, fixed], [fixed, set], [set, values], [values, real], [real, numbers], [numbers, values], [values, .], [.,  ]]

>> Trigrams: 
[[attributes, fixed, set], [fixed, set, values], [set, values, real], [values, real, numbers], [real, numbers, values], [numbers, values, .], [values, .,  ]]

>> Noun Phrases are: 
[The attributes, either a fixed set, values, real numbers, values]

>> Named Entities are: 
[] 

------------------- Sentence 21 -------------------

Given these instances we then construct a set of IF-THEN rules. 


>> Tokens are: 
[Given, instances, construct, set, -, rules, .] 

>> PoS Tags are: 
[('Given', 'VERB'), ('instances', 'NOUN'), ('construct', 'VERB'), ('set', 'NOUN'), ('-', 'PUNCT'), ('rules', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Given', 'prep'), ('instances', 'pobj'), ('construct', 'ROOT'), ('set', 'dobj'), ('-', 'punct'), ('rules', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Given, instances], [instances, construct], [construct, set], [set, -], [-, rules], [rules, .]]

>> Trigrams: 
[[Given, instances, construct], [instances, construct, set], [construct, set, -], [set, -, rules], [-, rules, .]]

>> Noun Phrases are: 
[these instances, we, a set]

>> Named Entities are: 
[] 

------------------- Sentence 22 -------------------

The output of learning is a  hypothesis represented by a set of rules. 


>> Tokens are: 
[output, learning,  , hypothesis, represented, set, rules, .] 

>> PoS Tags are: 
[('output', 'NOUN'), ('learning', 'NOUN'), (' ', 'SPACE'), ('hypothesis', 'NOUN'), ('represented', 'VERB'), ('set', 'NOUN'), ('rules', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('output', 'nsubj'), ('learning', 'pobj'), (' ', 'compound'), ('hypothesis', 'attr'), ('represented', 'acl'), ('set', 'pobj'), ('rules', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[output, learning], [learning,  ], [ , hypothesis], [hypothesis, represented], [represented, set], [set, rules], [rules, .]]

>> Trigrams: 
[[output, learning,  ], [learning,  , hypothesis], [ , hypothesis, represented], [hypothesis, represented, set], [represented, set, rules], [set, rules, .]]

>> Noun Phrases are: 
[The output, learning, a  hypothesis, a set, rules]

>> Named Entities are: 
[] 

------------------- Sentence 23 -------------------

After the rules have been defined determining the  accuracy of such rules and then applying these rules to practical problems analyze their quality. 


>> Tokens are: 
[rules, defined, determining,  , accuracy, rules, applying, rules, practical, problems, analyze, quality, .] 

>> PoS Tags are: 
[('rules', 'NOUN'), ('defined', 'VERB'), ('determining', 'VERB'), (' ', 'SPACE'), ('accuracy', 'NOUN'), ('rules', 'NOUN'), ('applying', 'VERB'), ('rules', 'NOUN'), ('practical', 'ADJ'), ('problems', 'NOUN'), ('analyze', 'VERB'), ('quality', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('rules', 'nsubjpass'), ('defined', 'advcl'), ('determining', 'xcomp'), (' ', 'compound'), ('accuracy', 'dobj'), ('rules', 'pobj'), ('applying', 'conj'), ('rules', 'dobj'), ('practical', 'amod'), ('problems', 'pobj'), ('analyze', 'ROOT'), ('quality', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[rules, defined], [defined, determining], [determining,  ], [ , accuracy], [accuracy, rules], [rules, applying], [applying, rules], [rules, practical], [practical, problems], [problems, analyze], [analyze, quality], [quality, .]]

>> Trigrams: 
[[rules, defined, determining], [defined, determining,  ], [determining,  , accuracy], [ , accuracy, rules], [accuracy, rules, applying], [rules, applying, rules], [applying, rules, practical], [rules, practical, problems], [practical, problems, analyze], [problems, analyze, quality], [analyze, quality, .]]

>> Noun Phrases are: 
[the rules, the  accuracy, such rules, these rules, practical problems, their quality]

>> Named Entities are: 
[] 

------------------- Sentence 24 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 25 -------------------

In propositional learning the available data has a standard form with rows being individual records  or training examples and columns being properties or attributes to describe the data. 


>> Tokens are: 
[propositional, learning, available, data, standard, form, rows, individual, records,  , training, examples, columns, properties, attributes, describe, data, .] 

>> PoS Tags are: 
[('propositional', 'ADJ'), ('learning', 'VERB'), ('available', 'ADJ'), ('data', 'NOUN'), ('standard', 'ADJ'), ('form', 'NOUN'), ('rows', 'NOUN'), ('individual', 'ADJ'), ('records', 'NOUN'), (' ', 'SPACE'), ('training', 'NOUN'), ('examples', 'NOUN'), ('columns', 'NOUN'), ('properties', 'NOUN'), ('attributes', 'NOUN'), ('describe', 'VERB'), ('data', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('propositional', 'amod'), ('learning', 'pcomp'), ('available', 'amod'), ('data', 'dobj'), ('standard', 'amod'), ('form', 'dobj'), ('rows', 'nsubj'), ('individual', 'amod'), ('records', 'attr'), (' ', 'attr'), ('training', 'compound'), ('examples', 'conj'), ('columns', 'conj'), ('properties', 'attr'), ('attributes', 'conj'), ('describe', 'xcomp'), ('data', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[propositional, learning], [learning, available], [available, data], [data, standard], [standard, form], [form, rows], [rows, individual], [individual, records], [records,  ], [ , training], [training, examples], [examples, columns], [columns, properties], [properties, attributes], [attributes, describe], [describe, data], [data, .]]

>> Trigrams: 
[[propositional, learning, available], [learning, available, data], [available, data, standard], [data, standard, form], [standard, form, rows], [form, rows, individual], [rows, individual, records], [individual, records,  ], [records,  , training], [ , training, examples], [training, examples, columns], [examples, columns, properties], [columns, properties, attributes], [properties, attributes, describe], [attributes, describe, data], [describe, data, .]]

>> Noun Phrases are: 
[the available data, a standard form, rows, individual records, training examples, columns, properties, attributes, the data]

>> Named Entities are: 
[] 

------------------- Sentence 26 -------------------

    Relational Rule Learning/ Inductive logic Programming (ILP)     


>> Tokens are: 
[    , Relational, Rule, Learning/, Inductive, logic, Programming, (, ILP, ),    ] 

>> PoS Tags are: 
[('    ', 'SPACE'), ('Relational', 'PROPN'), ('Rule', 'PROPN'), ('Learning/', 'PROPN'), ('Inductive', 'PROPN'), ('logic', 'NOUN'), ('Programming', 'PROPN'), ('(', 'PUNCT'), ('ILP', 'PROPN'), (')', 'PUNCT'), ('   ', 'SPACE')] 

>> Dependency Tags are: 
[('    ', 'nmod'), ('Relational', 'compound'), ('Rule', 'compound'), ('Learning/', 'compound'), ('Inductive', 'amod'), ('logic', 'nmod'), ('Programming', 'ROOT'), ('(', 'punct'), ('ILP', 'appos'), (')', 'punct'), ('   ', 'appos')]

>> Bigrams: 
[[    , Relational], [Relational, Rule], [Rule, Learning/], [Learning/, Inductive], [Inductive, logic], [logic, Programming], [Programming, (], [(, ILP], [ILP, )], [),    ]]

>> Trigrams: 
[[    , Relational, Rule], [Relational, Rule, Learning/], [Rule, Learning/, Inductive], [Learning/, Inductive, logic], [Inductive, logic, Programming], [logic, Programming, (], [Programming, (, ILP], [(, ILP, )], [ILP, ),    ]]

>> Noun Phrases are: 
[    Relational Rule Learning/ Inductive logic Programming, (ILP]

>> Named Entities are: 
[] 

------------------- Sentence 27 -------------------

When data is stored in several tables then it has a relational database form. 


>> Tokens are: 
[data, stored, tables, relational, database, form, .] 

>> PoS Tags are: 
[('data', 'NOUN'), ('stored', 'VERB'), ('tables', 'NOUN'), ('relational', 'ADJ'), ('database', 'NOUN'), ('form', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('data', 'nsubjpass'), ('stored', 'advcl'), ('tables', 'pobj'), ('relational', 'amod'), ('database', 'compound'), ('form', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[data, stored], [stored, tables], [tables, relational], [relational, database], [database, form], [form, .]]

>> Trigrams: 
[[data, stored, tables], [stored, tables, relational], [tables, relational, database], [relational, database, form], [database, form, .]]

>> Noun Phrases are: 
[data, several tables, it, a relational database form]

>> Named Entities are: 
[] 

------------------- Sentence 28 -------------------

In such cases the  data has to be transformed into a single table in order to use standard data mining techniques. 


>> Tokens are: 
[cases,  , data, transformed, single, table, order, use, standard, data, mining, techniques, .] 

>> PoS Tags are: 
[('cases', 'NOUN'), (' ', 'SPACE'), ('data', 'NOUN'), ('transformed', 'VERB'), ('single', 'ADJ'), ('table', 'NOUN'), ('order', 'NOUN'), ('use', 'VERB'), ('standard', 'ADJ'), ('data', 'NOUN'), ('mining', 'NOUN'), ('techniques', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('cases', 'pobj'), (' ', 'compound'), ('data', 'nsubj'), ('transformed', 'xcomp'), ('single', 'amod'), ('table', 'pobj'), ('order', 'pobj'), ('use', 'acl'), ('standard', 'amod'), ('data', 'compound'), ('mining', 'compound'), ('techniques', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[cases,  ], [ , data], [data, transformed], [transformed, single], [single, table], [table, order], [order, use], [use, standard], [standard, data], [data, mining], [mining, techniques], [techniques, .]]

>> Trigrams: 
[[cases,  , data], [ , data, transformed], [data, transformed, single], [transformed, single, table], [single, table, order], [table, order, use], [order, use, standard], [use, standard, data], [standard, data, mining], [data, mining, techniques], [mining, techniques, .]]

>> Noun Phrases are: 
[such cases, the  data, a single table, order, standard data mining techniques]

>> Named Entities are: 
[] 

------------------- Sentence 29 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 30 -------------------

The most common data transformation approach is to select one table as the main table to be  used for learning, and try to incorporate the contents of other tables by summarizing the  information contained in the table into some summary attributes, added to the main table. 


>> Tokens are: 
[common, data, transformation, approach, select, table, main, table,  , learning, ,, try, incorporate, contents, tables, summarizing,  , information, contained, table, summary, attributes, ,, added, main, table, .] 

>> PoS Tags are: 
[('common', 'ADJ'), ('data', 'NOUN'), ('transformation', 'NOUN'), ('approach', 'NOUN'), ('select', 'VERB'), ('table', 'NOUN'), ('main', 'ADJ'), ('table', 'NOUN'), (' ', 'SPACE'), ('learning', 'NOUN'), (',', 'PUNCT'), ('try', 'VERB'), ('incorporate', 'VERB'), ('contents', 'NOUN'), ('tables', 'NOUN'), ('summarizing', 'VERB'), (' ', 'SPACE'), ('information', 'NOUN'), ('contained', 'VERB'), ('table', 'NOUN'), ('summary', 'NOUN'), ('attributes', 'NOUN'), (',', 'PUNCT'), ('added', 'VERB'), ('main', 'ADJ'), ('table', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('common', 'amod'), ('data', 'compound'), ('transformation', 'compound'), ('approach', 'nsubj'), ('select', 'xcomp'), ('table', 'dobj'), ('main', 'amod'), ('table', 'pobj'), (' ', 'attr'), ('learning', 'pobj'), (',', 'punct'), ('try', 'conj'), ('incorporate', 'xcomp'), ('contents', 'dobj'), ('tables', 'pobj'), ('summarizing', 'pcomp'), (' ', 'compound'), ('information', 'dobj'), ('contained', 'acl'), ('table', 'pobj'), ('summary', 'compound'), ('attributes', 'pobj'), (',', 'punct'), ('added', 'conj'), ('main', 'amod'), ('table', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[common, data], [data, transformation], [transformation, approach], [approach, select], [select, table], [table, main], [main, table], [table,  ], [ , learning], [learning, ,], [,, try], [try, incorporate], [incorporate, contents], [contents, tables], [tables, summarizing], [summarizing,  ], [ , information], [information, contained], [contained, table], [table, summary], [summary, attributes], [attributes, ,], [,, added], [added, main], [main, table], [table, .]]

>> Trigrams: 
[[common, data, transformation], [data, transformation, approach], [transformation, approach, select], [approach, select, table], [select, table, main], [table, main, table], [main, table,  ], [table,  , learning], [ , learning, ,], [learning, ,, try], [,, try, incorporate], [try, incorporate, contents], [incorporate, contents, tables], [contents, tables, summarizing], [tables, summarizing,  ], [summarizing,  , information], [ , information, contained], [information, contained, table], [contained, table, summary], [table, summary, attributes], [summary, attributes, ,], [attributes, ,, added], [,, added, main], [added, main, table], [main, table, .]]

>> Noun Phrases are: 
[The most common data transformation approach, one table, the main table, learning, the contents, other tables, the  information, the table, some summary attributes, the main table]

>> Named Entities are: 
[('one', 'CARDINAL')] 

------------------- Sentence 31 -------------------

The 


>> Tokens are: 
[] 

>> PoS Tags are: 
[] 

>> Dependency Tags are: 
[]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 57 =================================

Yogesh Singh, Pradeep Kumar Bhatia & Omprakash Sangwan  

------------------- Sentence 1 -------------------

Yogesh Singh, Pradeep Kumar Bhatia & Omprakash Sangwan   


>> Tokens are: 
[Yogesh, Singh, ,, Pradeep, Kumar, Bhatia, &, Omprakash, Sangwan,  ] 

>> PoS Tags are: 
[('Yogesh', 'PROPN'), ('Singh', 'PROPN'), (',', 'PUNCT'), ('Pradeep', 'PROPN'), ('Kumar', 'PROPN'), ('Bhatia', 'PROPN'), ('&', 'CCONJ'), ('Omprakash', 'PROPN'), ('Sangwan', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Yogesh', 'compound'), ('Singh', 'ROOT'), (',', 'punct'), ('Pradeep', 'compound'), ('Kumar', 'compound'), ('Bhatia', 'conj'), ('&', 'cc'), ('Omprakash', 'compound'), ('Sangwan', 'conj'), (' ', 'punct')]

>> Bigrams: 
[[Yogesh, Singh], [Singh, ,], [,, Pradeep], [Pradeep, Kumar], [Kumar, Bhatia], [Bhatia, &], [&, Omprakash], [Omprakash, Sangwan], [Sangwan,  ]]

>> Trigrams: 
[[Yogesh, Singh, ,], [Singh, ,, Pradeep], [,, Pradeep, Kumar], [Pradeep, Kumar, Bhatia], [Kumar, Bhatia, &], [Bhatia, &, Omprakash], [&, Omprakash, Sangwan], [Omprakash, Sangwan,  ]]

>> Noun Phrases are: 
[Yogesh Singh, Pradeep Kumar Bhatia, Omprakash Sangwan]

>> Named Entities are: 
[('Yogesh Singh', 'PERSON'), ('Kumar Bhatia & Omprakash Sangwan', 'ORG')] 


================================ Paragraph 58 =================================

International Journal of Computer Science and Security, Volume (1) : Issue (1) 79  

------------------- Sentence 1 -------------------

International Journal of Computer Science and Security, Volume (1) : Issue (1) 79   


>> Tokens are: 
[International, Journal, Computer, Science, Security, ,, Volume, (, 1, ), :, Issue, (, 1, ), 79,  ] 

>> PoS Tags are: 
[('International', 'PROPN'), ('Journal', 'PROPN'), ('Computer', 'PROPN'), ('Science', 'PROPN'), ('Security', 'PROPN'), (',', 'PUNCT'), ('Volume', 'NOUN'), ('(', 'PUNCT'), ('1', 'NUM'), (')', 'PUNCT'), (':', 'PUNCT'), ('Issue', 'NOUN'), ('(', 'PUNCT'), ('1', 'NUM'), (')', 'PUNCT'), ('79', 'NUM'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('International', 'compound'), ('Journal', 'ROOT'), ('Computer', 'compound'), ('Science', 'pobj'), ('Security', 'conj'), (',', 'punct'), ('Volume', 'appos'), ('(', 'punct'), ('1', 'appos'), (')', 'punct'), (':', 'punct'), ('Issue', 'appos'), ('(', 'punct'), ('1', 'appos'), (')', 'punct'), ('79', 'nummod'), (' ', 'appos')]

>> Bigrams: 
[[International, Journal], [Journal, Computer], [Computer, Science], [Science, Security], [Security, ,], [,, Volume], [Volume, (], [(, 1], [1, )], [), :], [:, Issue], [Issue, (], [(, 1], [1, )], [), 79], [79,  ]]

>> Trigrams: 
[[International, Journal, Computer], [Journal, Computer, Science], [Computer, Science, Security], [Science, Security, ,], [Security, ,, Volume], [,, Volume, (], [Volume, (, 1], [(, 1, )], [1, ), :], [), :, Issue], [:, Issue, (], [Issue, (, 1], [(, 1, )], [1, ), 79], [), 79,  ]]

>> Noun Phrases are: 
[International Journal, Computer Science, Security, Volume, Issue]

>> Named Entities are: 
[('International Journal of Computer Science and Security, Volume', 'ORG'), ('1', 'CARDINAL'), ('1', 'CARDINAL')] 


================================ Paragraph 59 =================================

problem with such single-table transformations is that some information may be lost while the  summarization may also introduce artifacts, possibly leading to inappropriate data mining results.  What one would like to do is to leave data conceptually unchanged and rather use data mining  tools that can deal with multi-relational data. ILP is intended at solving multi-relational data mining  tasks.  Thus ILP is to be used for data mining in multi-relational data mining tasks with data stored in  relational databases and tasks with abundant expert knowledge of a relational nature. Another  important concept within the realm of relational rule learning is that of boosting. Boosting is a  particularly robust and powerful technique to enhance the prediction accuracy of systems that  learn from examples [22]. Thus boosting helps to improve the overall efficiency of the results  obtained.     An example to illustrate Rule Induction    Case Study (Making Credit Decisions)  Loan companies regularly use questionnaires to collect information about people applying for  credit, which they then use in deciding whether to make loans. This process has long been  partially automated. For example, American Express UK used a statistical decision process  based on discriminated analysis to reject applicants falling below a certain threshold and to  accept those exceeding another. The remaining 10 to 15 percent of the applicants fell into a  borderline region and were referred to higher authorities giving loan for a decision. However,  records showed that these authorities were no more than 50% accurate in predicting whether  these borderline applicants would default on their loans. These observations motivated American  Express UK to try methods from machine learning to improve the decision process. Starting with  1014 training cases and 18 descriptive attributes (such as age and years with an employer),  Michie and his colleagues used an induction method to produce a decision tree, containing  around 20 nodes and ten of the original features, that made correct predictions on 70% of the  borderline applicants. In addition to achieving improved accuracy, the company found the rules  attractive because they could be used to explain the reasons for decisions to applicants.  American Express UK was so impressed that they put the resulting knowledge base into use  without further development.    

------------------- Sentence 1 -------------------

problem with such single-table transformations is that some information may be lost while the  summarization may also introduce artifacts, possibly leading to inappropriate data mining results. 


>> Tokens are: 
[problem, single, -, table, transformations, information, lost,  , summarization, introduce, artifacts, ,, possibly, leading, inappropriate, data, mining, results, .] 

>> PoS Tags are: 
[('problem', 'NOUN'), ('single', 'ADJ'), ('-', 'PUNCT'), ('table', 'NOUN'), ('transformations', 'NOUN'), ('information', 'NOUN'), ('lost', 'VERB'), (' ', 'SPACE'), ('summarization', 'NOUN'), ('introduce', 'VERB'), ('artifacts', 'NOUN'), (',', 'PUNCT'), ('possibly', 'ADV'), ('leading', 'VERB'), ('inappropriate', 'ADJ'), ('data', 'NOUN'), ('mining', 'NOUN'), ('results', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('problem', 'nsubj'), ('single', 'amod'), ('-', 'punct'), ('table', 'compound'), ('transformations', 'pobj'), ('information', 'nsubjpass'), ('lost', 'ccomp'), (' ', 'compound'), ('summarization', 'nsubj'), ('introduce', 'advcl'), ('artifacts', 'dobj'), (',', 'punct'), ('possibly', 'advmod'), ('leading', 'advcl'), ('inappropriate', 'amod'), ('data', 'compound'), ('mining', 'compound'), ('results', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[problem, single], [single, -], [-, table], [table, transformations], [transformations, information], [information, lost], [lost,  ], [ , summarization], [summarization, introduce], [introduce, artifacts], [artifacts, ,], [,, possibly], [possibly, leading], [leading, inappropriate], [inappropriate, data], [data, mining], [mining, results], [results, .]]

>> Trigrams: 
[[problem, single, -], [single, -, table], [-, table, transformations], [table, transformations, information], [transformations, information, lost], [information, lost,  ], [lost,  , summarization], [ , summarization, introduce], [summarization, introduce, artifacts], [introduce, artifacts, ,], [artifacts, ,, possibly], [,, possibly, leading], [possibly, leading, inappropriate], [leading, inappropriate, data], [inappropriate, data, mining], [data, mining, results], [mining, results, .]]

>> Noun Phrases are: 
[problem, such single-table transformations, some information, the  summarization, artifacts, inappropriate data mining results]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

What one would like to do is to leave data conceptually unchanged and rather use data mining  tools that can deal with multi-relational data. 


>> Tokens are: 
[like, leave, data, conceptually, unchanged, use, data, mining,  , tools, deal, multi, -, relational, data, .] 

>> PoS Tags are: 
[('like', 'VERB'), ('leave', 'VERB'), ('data', 'NOUN'), ('conceptually', 'ADV'), ('unchanged', 'ADJ'), ('use', 'VERB'), ('data', 'NOUN'), ('mining', 'NOUN'), (' ', 'SPACE'), ('tools', 'NOUN'), ('deal', 'VERB'), ('multi', 'ADJ'), ('-', 'ADJ'), ('relational', 'ADJ'), ('data', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('like', 'csubj'), ('leave', 'xcomp'), ('data', 'dobj'), ('conceptually', 'advmod'), ('unchanged', 'amod'), ('use', 'conj'), ('data', 'compound'), ('mining', 'compound'), (' ', 'compound'), ('tools', 'dobj'), ('deal', 'relcl'), ('multi', 'amod'), ('-', 'amod'), ('relational', 'amod'), ('data', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[like, leave], [leave, data], [data, conceptually], [conceptually, unchanged], [unchanged, use], [use, data], [data, mining], [mining,  ], [ , tools], [tools, deal], [deal, multi], [multi, -], [-, relational], [relational, data], [data, .]]

>> Trigrams: 
[[like, leave, data], [leave, data, conceptually], [data, conceptually, unchanged], [conceptually, unchanged, use], [unchanged, use, data], [use, data, mining], [data, mining,  ], [mining,  , tools], [ , tools, deal], [tools, deal, multi], [deal, multi, -], [multi, -, relational], [-, relational, data], [relational, data, .]]

>> Noun Phrases are: 
[What, one, data, data mining  tools, multi-relational data]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

ILP is intended at solving multi-relational data mining  tasks.   


>> Tokens are: 
[ILP, intended, solving, multi, -, relational, data, mining,  , tasks, .,  ] 

>> PoS Tags are: 
[('ILP', 'NOUN'), ('intended', 'VERB'), ('solving', 'VERB'), ('multi', 'ADJ'), ('-', 'ADJ'), ('relational', 'ADJ'), ('data', 'NOUN'), ('mining', 'NOUN'), (' ', 'SPACE'), ('tasks', 'NOUN'), ('.', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('ILP', 'nsubjpass'), ('intended', 'ROOT'), ('solving', 'pcomp'), ('multi', 'amod'), ('-', 'amod'), ('relational', 'amod'), ('data', 'compound'), ('mining', 'compound'), (' ', 'compound'), ('tasks', 'dobj'), ('.', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[ILP, intended], [intended, solving], [solving, multi], [multi, -], [-, relational], [relational, data], [data, mining], [mining,  ], [ , tasks], [tasks, .], [.,  ]]

>> Trigrams: 
[[ILP, intended, solving], [intended, solving, multi], [solving, multi, -], [multi, -, relational], [-, relational, data], [relational, data, mining], [data, mining,  ], [mining,  , tasks], [ , tasks, .], [tasks, .,  ]]

>> Noun Phrases are: 
[ILP, multi-relational data mining  tasks]

>> Named Entities are: 
[('ILP', 'ORG')] 

------------------- Sentence 5 -------------------

Thus ILP is to be used for data mining in multi-relational data mining tasks with data stored in  relational databases and tasks with abundant expert knowledge of a relational nature. 


>> Tokens are: 
[ILP, data, mining, multi, -, relational, data, mining, tasks, data, stored,  , relational, databases, tasks, abundant, expert, knowledge, relational, nature, .] 

>> PoS Tags are: 
[('ILP', 'PROPN'), ('data', 'NOUN'), ('mining', 'NOUN'), ('multi', 'ADJ'), ('-', 'ADJ'), ('relational', 'ADJ'), ('data', 'NOUN'), ('mining', 'NOUN'), ('tasks', 'NOUN'), ('data', 'NOUN'), ('stored', 'VERB'), (' ', 'SPACE'), ('relational', 'ADJ'), ('databases', 'NOUN'), ('tasks', 'NOUN'), ('abundant', 'ADJ'), ('expert', 'ADJ'), ('knowledge', 'NOUN'), ('relational', 'ADJ'), ('nature', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('ILP', 'nsubj'), ('data', 'compound'), ('mining', 'pobj'), ('multi', 'amod'), ('-', 'amod'), ('relational', 'amod'), ('data', 'compound'), ('mining', 'compound'), ('tasks', 'pobj'), ('data', 'pobj'), ('stored', 'acl'), (' ', 'pobj'), ('relational', 'amod'), ('databases', 'pobj'), ('tasks', 'conj'), ('abundant', 'amod'), ('expert', 'amod'), ('knowledge', 'pobj'), ('relational', 'amod'), ('nature', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[ILP, data], [data, mining], [mining, multi], [multi, -], [-, relational], [relational, data], [data, mining], [mining, tasks], [tasks, data], [data, stored], [stored,  ], [ , relational], [relational, databases], [databases, tasks], [tasks, abundant], [abundant, expert], [expert, knowledge], [knowledge, relational], [relational, nature], [nature, .]]

>> Trigrams: 
[[ILP, data, mining], [data, mining, multi], [mining, multi, -], [multi, -, relational], [-, relational, data], [relational, data, mining], [data, mining, tasks], [mining, tasks, data], [tasks, data, stored], [data, stored,  ], [stored,  , relational], [ , relational, databases], [relational, databases, tasks], [databases, tasks, abundant], [tasks, abundant, expert], [abundant, expert, knowledge], [expert, knowledge, relational], [knowledge, relational, nature], [relational, nature, .]]

>> Noun Phrases are: 
[ILP, data mining, multi-relational data mining tasks, data, relational databases, tasks, abundant expert knowledge, a relational nature]

>> Named Entities are: 
[('ILP', 'ORG')] 

------------------- Sentence 6 -------------------

Another  important concept within the realm of relational rule learning is that of boosting. 


>> Tokens are: 
[ , important, concept, realm, relational, rule, learning, boosting, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('important', 'ADJ'), ('concept', 'NOUN'), ('realm', 'NOUN'), ('relational', 'ADJ'), ('rule', 'NOUN'), ('learning', 'NOUN'), ('boosting', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'nmod'), ('important', 'amod'), ('concept', 'nsubj'), ('realm', 'pobj'), ('relational', 'amod'), ('rule', 'compound'), ('learning', 'pobj'), ('boosting', 'pcomp'), ('.', 'punct')]

>> Bigrams: 
[[ , important], [important, concept], [concept, realm], [realm, relational], [relational, rule], [rule, learning], [learning, boosting], [boosting, .]]

>> Trigrams: 
[[ , important, concept], [important, concept, realm], [concept, realm, relational], [realm, relational, rule], [relational, rule, learning], [rule, learning, boosting], [learning, boosting, .]]

>> Noun Phrases are: 
[Another  important concept, the realm, relational rule learning]

>> Named Entities are: 
[] 

------------------- Sentence 7 -------------------

Boosting is a  particularly robust and powerful technique to enhance the prediction accuracy of systems that  learn from examples [22]. 


>> Tokens are: 
[Boosting,  , particularly, robust, powerful, technique, enhance, prediction, accuracy, systems,  , learn, examples, [, 22, ], .] 

>> PoS Tags are: 
[('Boosting', 'VERB'), (' ', 'SPACE'), ('particularly', 'ADV'), ('robust', 'ADJ'), ('powerful', 'ADJ'), ('technique', 'NOUN'), ('enhance', 'VERB'), ('prediction', 'NOUN'), ('accuracy', 'NOUN'), ('systems', 'NOUN'), (' ', 'SPACE'), ('learn', 'VERB'), ('examples', 'NOUN'), ('[', 'PUNCT'), ('22', 'NUM'), (']', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Boosting', 'nsubj'), (' ', 'attr'), ('particularly', 'advmod'), ('robust', 'amod'), ('powerful', 'conj'), ('technique', 'attr'), ('enhance', 'acl'), ('prediction', 'compound'), ('accuracy', 'dobj'), ('systems', 'pobj'), (' ', 'nsubj'), ('learn', 'relcl'), ('examples', 'pobj'), ('[', 'punct'), ('22', 'attr'), (']', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Boosting,  ], [ , particularly], [particularly, robust], [robust, powerful], [powerful, technique], [technique, enhance], [enhance, prediction], [prediction, accuracy], [accuracy, systems], [systems,  ], [ , learn], [learn, examples], [examples, [], [[, 22], [22, ]], [], .]]

>> Trigrams: 
[[Boosting,  , particularly], [ , particularly, robust], [particularly, robust, powerful], [robust, powerful, technique], [powerful, technique, enhance], [technique, enhance, prediction], [enhance, prediction, accuracy], [prediction, accuracy, systems], [accuracy, systems,  ], [systems,  , learn], [ , learn, examples], [learn, examples, [], [examples, [, 22], [[, 22, ]], [22, ], .]]

>> Noun Phrases are: 
[particularly robust and powerful technique, the prediction accuracy, systems, examples]

>> Named Entities are: 
[('22', 'CARDINAL')] 

------------------- Sentence 8 -------------------

Thus boosting helps to improve the overall efficiency of the results  obtained. 


>> Tokens are: 
[boosting, helps, improve, overall, efficiency, results,  , obtained, .] 

>> PoS Tags are: 
[('boosting', 'VERB'), ('helps', 'VERB'), ('improve', 'VERB'), ('overall', 'ADJ'), ('efficiency', 'NOUN'), ('results', 'NOUN'), (' ', 'SPACE'), ('obtained', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('boosting', 'nsubj'), ('helps', 'ROOT'), ('improve', 'xcomp'), ('overall', 'amod'), ('efficiency', 'dobj'), ('results', 'pobj'), (' ', 'nsubj'), ('obtained', 'relcl'), ('.', 'punct')]

>> Bigrams: 
[[boosting, helps], [helps, improve], [improve, overall], [overall, efficiency], [efficiency, results], [results,  ], [ , obtained], [obtained, .]]

>> Trigrams: 
[[boosting, helps, improve], [helps, improve, overall], [improve, overall, efficiency], [overall, efficiency, results], [efficiency, results,  ], [results,  , obtained], [ , obtained, .]]

>> Noun Phrases are: 
[the overall efficiency, the results]

>> Named Entities are: 
[] 

------------------- Sentence 9 -------------------

    An example to illustrate Rule Induction 


>> Tokens are: 
[    , example, illustrate, Rule, Induction] 

>> PoS Tags are: 
[('    ', 'SPACE'), ('example', 'NOUN'), ('illustrate', 'VERB'), ('Rule', 'PROPN'), ('Induction', 'PROPN')] 

>> Dependency Tags are: 
[('    ', 'nmod'), ('example', 'ROOT'), ('illustrate', 'acl'), ('Rule', 'compound'), ('Induction', 'dobj')]

>> Bigrams: 
[[    , example], [example, illustrate], [illustrate, Rule], [Rule, Induction]]

>> Trigrams: 
[[    , example, illustrate], [example, illustrate, Rule], [illustrate, Rule, Induction]]

>> Noun Phrases are: 
[    An example, Rule Induction]

>> Named Entities are: 
[] 

------------------- Sentence 10 -------------------

    


>> Tokens are: 
[   ] 

>> PoS Tags are: 
[('   ', 'SPACE')] 

>> Dependency Tags are: 
[('   ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 11 -------------------

Case Study (Making Credit Decisions)   


>> Tokens are: 
[Case, Study, (, Making, Credit, Decisions, ),  ] 

>> PoS Tags are: 
[('Case', 'NOUN'), ('Study', 'NOUN'), ('(', 'PUNCT'), ('Making', 'VERB'), ('Credit', 'PROPN'), ('Decisions', 'PROPN'), (')', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Case', 'compound'), ('Study', 'ROOT'), ('(', 'punct'), ('Making', 'acl'), ('Credit', 'compound'), ('Decisions', 'dobj'), (')', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[Case, Study], [Study, (], [(, Making], [Making, Credit], [Credit, Decisions], [Decisions, )], [),  ]]

>> Trigrams: 
[[Case, Study, (], [Study, (, Making], [(, Making, Credit], [Making, Credit, Decisions], [Credit, Decisions, )], [Decisions, ),  ]]

>> Noun Phrases are: 
[Case Study, Credit Decisions]

>> Named Entities are: 
[] 

------------------- Sentence 12 -------------------

Loan companies regularly use questionnaires to collect information about people applying for  credit, which they then use in deciding whether to make loans. 


>> Tokens are: 
[Loan, companies, regularly, use, questionnaires, collect, information, people, applying,  , credit, ,, use, deciding, loans, .] 

>> PoS Tags are: 
[('Loan', 'PROPN'), ('companies', 'NOUN'), ('regularly', 'ADV'), ('use', 'VERB'), ('questionnaires', 'NOUN'), ('collect', 'VERB'), ('information', 'NOUN'), ('people', 'NOUN'), ('applying', 'VERB'), (' ', 'SPACE'), ('credit', 'NOUN'), (',', 'PUNCT'), ('use', 'VERB'), ('deciding', 'VERB'), ('loans', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Loan', 'compound'), ('companies', 'nsubj'), ('regularly', 'advmod'), ('use', 'ROOT'), ('questionnaires', 'dobj'), ('collect', 'xcomp'), ('information', 'dobj'), ('people', 'pobj'), ('applying', 'acl'), (' ', 'pobj'), ('credit', 'pobj'), (',', 'punct'), ('use', 'relcl'), ('deciding', 'pcomp'), ('loans', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Loan, companies], [companies, regularly], [regularly, use], [use, questionnaires], [questionnaires, collect], [collect, information], [information, people], [people, applying], [applying,  ], [ , credit], [credit, ,], [,, use], [use, deciding], [deciding, loans], [loans, .]]

>> Trigrams: 
[[Loan, companies, regularly], [companies, regularly, use], [regularly, use, questionnaires], [use, questionnaires, collect], [questionnaires, collect, information], [collect, information, people], [information, people, applying], [people, applying,  ], [applying,  , credit], [ , credit, ,], [credit, ,, use], [,, use, deciding], [use, deciding, loans], [deciding, loans, .]]

>> Noun Phrases are: 
[Loan companies, questionnaires, information, people, credit, they, loans]

>> Named Entities are: 
[] 

------------------- Sentence 13 -------------------

This process has long been  partially automated. 


>> Tokens are: 
[process, long,  , partially, automated, .] 

>> PoS Tags are: 
[('process', 'NOUN'), ('long', 'ADV'), (' ', 'SPACE'), ('partially', 'ADV'), ('automated', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('process', 'nsubjpass'), ('long', 'advmod'), (' ', 'nsubj'), ('partially', 'advmod'), ('automated', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[process, long], [long,  ], [ , partially], [partially, automated], [automated, .]]

>> Trigrams: 
[[process, long,  ], [long,  , partially], [ , partially, automated], [partially, automated, .]]

>> Noun Phrases are: 
[This process]

>> Named Entities are: 
[] 

------------------- Sentence 14 -------------------

For example, American Express UK used a statistical decision process  based on discriminated analysis to reject applicants falling below a certain threshold and to  accept those exceeding another. 


>> Tokens are: 
[example, ,, American, Express, UK, statistical, decision, process,  , based, discriminated, analysis, reject, applicants, falling, certain, threshold,  , accept, exceeding, .] 

>> PoS Tags are: 
[('example', 'NOUN'), (',', 'PUNCT'), ('American', 'PROPN'), ('Express', 'PROPN'), ('UK', 'PROPN'), ('statistical', 'ADJ'), ('decision', 'NOUN'), ('process', 'NOUN'), (' ', 'SPACE'), ('based', 'VERB'), ('discriminated', 'ADJ'), ('analysis', 'NOUN'), ('reject', 'VERB'), ('applicants', 'NOUN'), ('falling', 'VERB'), ('certain', 'ADJ'), ('threshold', 'NOUN'), (' ', 'SPACE'), ('accept', 'VERB'), ('exceeding', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('example', 'pobj'), (',', 'punct'), ('American', 'compound'), ('Express', 'compound'), ('UK', 'nsubj'), ('statistical', 'amod'), ('decision', 'compound'), ('process', 'dobj'), (' ', 'appos'), ('based', 'acl'), ('discriminated', 'amod'), ('analysis', 'pobj'), ('reject', 'acl'), ('applicants', 'dobj'), ('falling', 'acl'), ('certain', 'amod'), ('threshold', 'pobj'), (' ', 'pobj'), ('accept', 'conj'), ('exceeding', 'acl'), ('.', 'punct')]

>> Bigrams: 
[[example, ,], [,, American], [American, Express], [Express, UK], [UK, statistical], [statistical, decision], [decision, process], [process,  ], [ , based], [based, discriminated], [discriminated, analysis], [analysis, reject], [reject, applicants], [applicants, falling], [falling, certain], [certain, threshold], [threshold,  ], [ , accept], [accept, exceeding], [exceeding, .]]

>> Trigrams: 
[[example, ,, American], [,, American, Express], [American, Express, UK], [Express, UK, statistical], [UK, statistical, decision], [statistical, decision, process], [decision, process,  ], [process,  , based], [ , based, discriminated], [based, discriminated, analysis], [discriminated, analysis, reject], [analysis, reject, applicants], [reject, applicants, falling], [applicants, falling, certain], [falling, certain, threshold], [certain, threshold,  ], [threshold,  , accept], [ , accept, exceeding], [accept, exceeding, .]]

>> Noun Phrases are: 
[example, American Express UK, a statistical decision process, discriminated analysis, applicants, a certain threshold]

>> Named Entities are: 
[('American Express', 'ORG'), ('UK', 'GPE')] 

------------------- Sentence 15 -------------------

The remaining 10 to 15 percent of the applicants fell into a  borderline region and were referred to higher authorities giving loan for a decision. 


>> Tokens are: 
[remaining, 10, 15, percent, applicants, fell,  , borderline, region, referred, higher, authorities, giving, loan, decision, .] 

>> PoS Tags are: 
[('remaining', 'VERB'), ('10', 'NUM'), ('15', 'NUM'), ('percent', 'NOUN'), ('applicants', 'NOUN'), ('fell', 'VERB'), (' ', 'SPACE'), ('borderline', 'NOUN'), ('region', 'NOUN'), ('referred', 'VERB'), ('higher', 'ADJ'), ('authorities', 'NOUN'), ('giving', 'VERB'), ('loan', 'NOUN'), ('decision', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('remaining', 'amod'), ('10', 'quantmod'), ('15', 'nummod'), ('percent', 'nsubj'), ('applicants', 'pobj'), ('fell', 'ROOT'), (' ', 'compound'), ('borderline', 'compound'), ('region', 'pobj'), ('referred', 'conj'), ('higher', 'amod'), ('authorities', 'pobj'), ('giving', 'acl'), ('loan', 'dobj'), ('decision', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[remaining, 10], [10, 15], [15, percent], [percent, applicants], [applicants, fell], [fell,  ], [ , borderline], [borderline, region], [region, referred], [referred, higher], [higher, authorities], [authorities, giving], [giving, loan], [loan, decision], [decision, .]]

>> Trigrams: 
[[remaining, 10, 15], [10, 15, percent], [15, percent, applicants], [percent, applicants, fell], [applicants, fell,  ], [fell,  , borderline], [ , borderline, region], [borderline, region, referred], [region, referred, higher], [referred, higher, authorities], [higher, authorities, giving], [authorities, giving, loan], [giving, loan, decision], [loan, decision, .]]

>> Noun Phrases are: 
[The remaining 10 to 15 percent, the applicants, a  borderline region, higher authorities, loan, a decision]

>> Named Entities are: 
[('10 to 15 percent', 'PERCENT')] 

------------------- Sentence 16 -------------------

However,  records showed that these authorities were no more than 50% accurate in predicting whether  these borderline applicants would default on their loans. 


>> Tokens are: 
[,,  , records, showed, authorities, 50, %, accurate, predicting,  , borderline, applicants, default, loans, .] 

>> PoS Tags are: 
[(',', 'PUNCT'), (' ', 'SPACE'), ('records', 'NOUN'), ('showed', 'VERB'), ('authorities', 'NOUN'), ('50', 'NUM'), ('%', 'NOUN'), ('accurate', 'ADJ'), ('predicting', 'VERB'), (' ', 'SPACE'), ('borderline', 'NOUN'), ('applicants', 'NOUN'), ('default', 'VERB'), ('loans', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(',', 'punct'), (' ', 'compound'), ('records', 'nsubj'), ('showed', 'ROOT'), ('authorities', 'nsubj'), ('50', 'nummod'), ('%', 'npadvmod'), ('accurate', 'acomp'), ('predicting', 'pcomp'), (' ', 'nsubj'), ('borderline', 'compound'), ('applicants', 'nsubj'), ('default', 'ccomp'), ('loans', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[,,  ], [ , records], [records, showed], [showed, authorities], [authorities, 50], [50, %], [%, accurate], [accurate, predicting], [predicting,  ], [ , borderline], [borderline, applicants], [applicants, default], [default, loans], [loans, .]]

>> Trigrams: 
[[,,  , records], [ , records, showed], [records, showed, authorities], [showed, authorities, 50], [authorities, 50, %], [50, %, accurate], [%, accurate, predicting], [accurate, predicting,  ], [predicting,  , borderline], [ , borderline, applicants], [borderline, applicants, default], [applicants, default, loans], [default, loans, .]]

>> Noun Phrases are: 
[ records, these authorities, these borderline applicants, their loans]

>> Named Entities are: 
[('no more than 50%', 'PERCENT')] 

------------------- Sentence 17 -------------------

These observations motivated American  Express UK to try methods from machine learning to improve the decision process. 


>> Tokens are: 
[observations, motivated, American,  , Express, UK, try, methods, machine, learning, improve, decision, process, .] 

>> PoS Tags are: 
[('observations', 'NOUN'), ('motivated', 'VERB'), ('American', 'PROPN'), (' ', 'SPACE'), ('Express', 'PROPN'), ('UK', 'PROPN'), ('try', 'VERB'), ('methods', 'NOUN'), ('machine', 'NOUN'), ('learning', 'VERB'), ('improve', 'VERB'), ('decision', 'NOUN'), ('process', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('observations', 'nsubj'), ('motivated', 'ROOT'), ('American', 'amod'), (' ', 'compound'), ('Express', 'compound'), ('UK', 'dobj'), ('try', 'xcomp'), ('methods', 'dobj'), ('machine', 'compound'), ('learning', 'pobj'), ('improve', 'xcomp'), ('decision', 'compound'), ('process', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[observations, motivated], [motivated, American], [American,  ], [ , Express], [Express, UK], [UK, try], [try, methods], [methods, machine], [machine, learning], [learning, improve], [improve, decision], [decision, process], [process, .]]

>> Trigrams: 
[[observations, motivated, American], [motivated, American,  ], [American,  , Express], [ , Express, UK], [Express, UK, try], [UK, try, methods], [try, methods, machine], [methods, machine, learning], [machine, learning, improve], [learning, improve, decision], [improve, decision, process], [decision, process, .]]

>> Noun Phrases are: 
[These observations, American  Express UK, methods, the decision process]

>> Named Entities are: 
[('American', 'NORP'), ('UK', 'GPE')] 

------------------- Sentence 18 -------------------

Starting with  1014 training cases and 18 descriptive attributes (such as age and years with an employer),  Michie and his colleagues used an induction method to produce a decision tree, containing  around 20 nodes and ten of the original features, that made correct predictions on 70% of the  borderline applicants. 


>> Tokens are: 
[Starting,  , 1014, training, cases, 18, descriptive, attributes, (, age, years, employer, ), ,,  , Michie, colleagues, induction, method, produce, decision, tree, ,, containing,  , 20, nodes, original, features, ,, correct, predictions, 70, %,  , borderline, applicants, .] 

>> PoS Tags are: 
[('Starting', 'VERB'), (' ', 'SPACE'), ('1014', 'NUM'), ('training', 'NOUN'), ('cases', 'NOUN'), ('18', 'NUM'), ('descriptive', 'ADJ'), ('attributes', 'NOUN'), ('(', 'PUNCT'), ('age', 'NOUN'), ('years', 'NOUN'), ('employer', 'NOUN'), (')', 'PUNCT'), (',', 'PUNCT'), (' ', 'SPACE'), ('Michie', 'PROPN'), ('colleagues', 'NOUN'), ('induction', 'NOUN'), ('method', 'NOUN'), ('produce', 'VERB'), ('decision', 'NOUN'), ('tree', 'NOUN'), (',', 'PUNCT'), ('containing', 'VERB'), (' ', 'SPACE'), ('20', 'NUM'), ('nodes', 'NOUN'), ('original', 'ADJ'), ('features', 'NOUN'), (',', 'PUNCT'), ('correct', 'ADJ'), ('predictions', 'NOUN'), ('70', 'NUM'), ('%', 'NOUN'), (' ', 'SPACE'), ('borderline', 'NOUN'), ('applicants', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Starting', 'advcl'), (' ', 'pobj'), ('1014', 'pobj'), ('training', 'compound'), ('cases', 'dobj'), ('18', 'nummod'), ('descriptive', 'amod'), ('attributes', 'conj'), ('(', 'punct'), ('age', 'pobj'), ('years', 'conj'), ('employer', 'pobj'), (')', 'punct'), (',', 'punct'), (' ', 'compound'), ('Michie', 'nsubj'), ('colleagues', 'conj'), ('induction', 'compound'), ('method', 'dobj'), ('produce', 'xcomp'), ('decision', 'compound'), ('tree', 'dobj'), (',', 'punct'), ('containing', 'advcl'), (' ', 'dobj'), ('20', 'nummod'), ('nodes', 'dobj'), ('original', 'amod'), ('features', 'pobj'), (',', 'punct'), ('correct', 'amod'), ('predictions', 'dobj'), ('70', 'nummod'), ('%', 'pobj'), (' ', 'compound'), ('borderline', 'compound'), ('applicants', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Starting,  ], [ , 1014], [1014, training], [training, cases], [cases, 18], [18, descriptive], [descriptive, attributes], [attributes, (], [(, age], [age, years], [years, employer], [employer, )], [), ,], [,,  ], [ , Michie], [Michie, colleagues], [colleagues, induction], [induction, method], [method, produce], [produce, decision], [decision, tree], [tree, ,], [,, containing], [containing,  ], [ , 20], [20, nodes], [nodes, original], [original, features], [features, ,], [,, correct], [correct, predictions], [predictions, 70], [70, %], [%,  ], [ , borderline], [borderline, applicants], [applicants, .]]

>> Trigrams: 
[[Starting,  , 1014], [ , 1014, training], [1014, training, cases], [training, cases, 18], [cases, 18, descriptive], [18, descriptive, attributes], [descriptive, attributes, (], [attributes, (, age], [(, age, years], [age, years, employer], [years, employer, )], [employer, ), ,], [), ,,  ], [,,  , Michie], [ , Michie, colleagues], [Michie, colleagues, induction], [colleagues, induction, method], [induction, method, produce], [method, produce, decision], [produce, decision, tree], [decision, tree, ,], [tree, ,, containing], [,, containing,  ], [containing,  , 20], [ , 20, nodes], [20, nodes, original], [nodes, original, features], [original, features, ,], [features, ,, correct], [,, correct, predictions], [correct, predictions, 70], [predictions, 70, %], [70, %,  ], [%,  , borderline], [ , borderline, applicants], [borderline, applicants, .]]

>> Noun Phrases are: 
[training cases, 18 descriptive attributes, age, years, an employer,  Michie, his colleagues, an induction method, a decision tree, around 20 nodes, the original features, correct predictions, 70%, the  borderline applicants]

>> Named Entities are: 
[('1014', 'DATE'), ('18', 'CARDINAL'), ('Michie', 'PRODUCT'), ('ten', 'CARDINAL'), ('70%', 'PERCENT')] 

------------------- Sentence 19 -------------------

In addition to achieving improved accuracy, the company found the rules  attractive because they could be used to explain the reasons for decisions to applicants. 


>> Tokens are: 
[addition, achieving, improved, accuracy, ,, company, found, rules,  , attractive, explain, reasons, decisions, applicants, .] 

>> PoS Tags are: 
[('addition', 'NOUN'), ('achieving', 'VERB'), ('improved', 'ADJ'), ('accuracy', 'NOUN'), (',', 'PUNCT'), ('company', 'NOUN'), ('found', 'VERB'), ('rules', 'NOUN'), (' ', 'SPACE'), ('attractive', 'ADJ'), ('explain', 'VERB'), ('reasons', 'NOUN'), ('decisions', 'NOUN'), ('applicants', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('addition', 'pobj'), ('achieving', 'pcomp'), ('improved', 'amod'), ('accuracy', 'dobj'), (',', 'punct'), ('company', 'nsubj'), ('found', 'ROOT'), ('rules', 'nsubj'), (' ', 'nsubj'), ('attractive', 'ccomp'), ('explain', 'xcomp'), ('reasons', 'dobj'), ('decisions', 'pobj'), ('applicants', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[addition, achieving], [achieving, improved], [improved, accuracy], [accuracy, ,], [,, company], [company, found], [found, rules], [rules,  ], [ , attractive], [attractive, explain], [explain, reasons], [reasons, decisions], [decisions, applicants], [applicants, .]]

>> Trigrams: 
[[addition, achieving, improved], [achieving, improved, accuracy], [improved, accuracy, ,], [accuracy, ,, company], [,, company, found], [company, found, rules], [found, rules,  ], [rules,  , attractive], [ , attractive, explain], [attractive, explain, reasons], [explain, reasons, decisions], [reasons, decisions, applicants], [decisions, applicants, .]]

>> Noun Phrases are: 
[addition, improved accuracy, the company, the rules, they, the reasons, decisions, applicants]

>> Named Entities are: 
[] 

------------------- Sentence 20 -------------------

 American Express UK was so impressed that they put the resulting knowledge base into use  without further development. 


>> Tokens are: 
[ , American, Express, UK, impressed, resulting, knowledge, base, use,  , development, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('American', 'PROPN'), ('Express', 'PROPN'), ('UK', 'PROPN'), ('impressed', 'ADJ'), ('resulting', 'VERB'), ('knowledge', 'NOUN'), ('base', 'NOUN'), ('use', 'NOUN'), (' ', 'SPACE'), ('development', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'compound'), ('American', 'compound'), ('Express', 'compound'), ('UK', 'nsubj'), ('impressed', 'acomp'), ('resulting', 'amod'), ('knowledge', 'compound'), ('base', 'dobj'), ('use', 'compound'), (' ', 'pobj'), ('development', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[ , American], [American, Express], [Express, UK], [UK, impressed], [impressed, resulting], [resulting, knowledge], [knowledge, base], [base, use], [use,  ], [ , development], [development, .]]

>> Trigrams: 
[[ , American, Express], [American, Express, UK], [Express, UK, impressed], [UK, impressed, resulting], [impressed, resulting, knowledge], [resulting, knowledge, base], [knowledge, base, use], [base, use,  ], [use,  , development], [ , development, .]]

>> Noun Phrases are: 
[ American Express UK, they, the resulting knowledge base, further development]

>> Named Entities are: 
[('American Express', 'ORG'), ('UK', 'GPE')] 

------------------- Sentence 21 -------------------

    


>> Tokens are: 
[   ] 

>> PoS Tags are: 
[('   ', 'SPACE')] 

>> Dependency Tags are: 
[('   ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 60 =================================

6.  GENETIC ALGORITHMS AND GENETIC PROGRAMMING  The genetic approach to machine learning is a relatively new concept. Both genetic algorithms  and Genetic Programming (GP) are a form of evolutionary computing which is a collective name  for problem solving techniques based on the principles of biological evolution like natural  selection. Genetic algorithms use a vocabulary borrowed from natural genetics in that they talk  about genes (or bits), chromosomes (individuals or bit strings), and population (of individuals)  [10]. Genetic algorithm approach is centered around three main processes- crossovers, mutation  and selection of individuals. Initially many individual solutions are gathered together to make a  randomly generated population. Genetic algorithms are based upon the Darwin theory of  " The  survival of the Fittest" depending upon the fitness function the best possible solutions are  selected from the pool of individuals. The fitter individuals have greater chances of its selection  and higher the probability that its genetic information will be passed over to future generations.  Once selection is over new individuals have to be formed. These new individuals are formed  either through crossover or mutation. In the process of crossover, combining the genetic make up  of two solution candidates (producing a child out of two parents) creates new individuals.  Whereas in mutation, we alter some individuals, which means that some randomly chosen parts  of genetic information is changed to obtain a new individual.  The process of generation doesn't  stop until one of the conditions like minimum criteria is met or the desired fitness level is attained  or a specified number of generations are reached or any combination of the above [21].     John Koza popularized GP, an offset of Genetic Algorithm in 1992. It aims at optimizing computer  programs rather than function parameters.   GP is a supervised machine learning technique where algorithms are modeled after natural  selection. These algorithms are represented as function trees where these trees are intended to 

------------------- Sentence 1 -------------------

6. 


>> Tokens are: 
[6, .] 

>> PoS Tags are: 
[('6', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('6', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[6, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('6', 'CARDINAL')] 

------------------- Sentence 2 -------------------

 GENETIC ALGORITHMS AND GENETIC PROGRAMMING   


>> Tokens are: 
[ , GENETIC, ALGORITHMS, GENETIC, PROGRAMMING,  ] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('GENETIC', 'PROPN'), ('ALGORITHMS', 'PROPN'), ('GENETIC', 'PROPN'), ('PROGRAMMING', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'nsubj'), ('GENETIC', 'compound'), ('ALGORITHMS', 'appos'), ('GENETIC', 'conj'), ('PROGRAMMING', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[ , GENETIC], [GENETIC, ALGORITHMS], [ALGORITHMS, GENETIC], [GENETIC, PROGRAMMING], [PROGRAMMING,  ]]

>> Trigrams: 
[[ , GENETIC, ALGORITHMS], [GENETIC, ALGORITHMS, GENETIC], [ALGORITHMS, GENETIC, PROGRAMMING], [GENETIC, PROGRAMMING,  ]]

>> Noun Phrases are: 
[GENETIC ALGORITHMS, GENETIC]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

The genetic approach to machine learning is a relatively new concept. 


>> Tokens are: 
[genetic, approach, machine, learning, relatively, new, concept, .] 

>> PoS Tags are: 
[('genetic', 'ADJ'), ('approach', 'NOUN'), ('machine', 'NOUN'), ('learning', 'NOUN'), ('relatively', 'ADV'), ('new', 'ADJ'), ('concept', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('genetic', 'amod'), ('approach', 'nsubj'), ('machine', 'compound'), ('learning', 'pobj'), ('relatively', 'advmod'), ('new', 'amod'), ('concept', 'attr'), ('.', 'punct')]

>> Bigrams: 
[[genetic, approach], [approach, machine], [machine, learning], [learning, relatively], [relatively, new], [new, concept], [concept, .]]

>> Trigrams: 
[[genetic, approach, machine], [approach, machine, learning], [machine, learning, relatively], [learning, relatively, new], [relatively, new, concept], [new, concept, .]]

>> Noun Phrases are: 
[The genetic approach, machine learning, a relatively new concept]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

Both genetic algorithms  and Genetic Programming (GP) are a form of evolutionary computing which is a collective name  for problem solving techniques based on the principles of biological evolution like natural  selection. 


>> Tokens are: 
[genetic, algorithms,  , Genetic, Programming, (, GP, ), form, evolutionary, computing, collective,  , problem, solving, techniques, based, principles, biological, evolution, like, natural,  , selection, .] 

>> PoS Tags are: 
[('genetic', 'ADJ'), ('algorithms', 'NOUN'), (' ', 'SPACE'), ('Genetic', 'PROPN'), ('Programming', 'PROPN'), ('(', 'PUNCT'), ('GP', 'PROPN'), (')', 'PUNCT'), ('form', 'NOUN'), ('evolutionary', 'ADJ'), ('computing', 'NOUN'), ('collective', 'ADJ'), (' ', 'SPACE'), ('problem', 'NOUN'), ('solving', 'VERB'), ('techniques', 'NOUN'), ('based', 'VERB'), ('principles', 'NOUN'), ('biological', 'ADJ'), ('evolution', 'NOUN'), ('like', 'ADP'), ('natural', 'ADJ'), (' ', 'SPACE'), ('selection', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('genetic', 'amod'), ('algorithms', 'nsubj'), (' ', 'appos'), ('Genetic', 'compound'), ('Programming', 'conj'), ('(', 'punct'), ('GP', 'appos'), (')', 'punct'), ('form', 'attr'), ('evolutionary', 'amod'), ('computing', 'pobj'), ('collective', 'amod'), (' ', 'appos'), ('problem', 'pobj'), ('solving', 'acl'), ('techniques', 'dobj'), ('based', 'acl'), ('principles', 'pobj'), ('biological', 'amod'), ('evolution', 'pobj'), ('like', 'prep'), ('natural', 'amod'), (' ', 'compound'), ('selection', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[genetic, algorithms], [algorithms,  ], [ , Genetic], [Genetic, Programming], [Programming, (], [(, GP], [GP, )], [), form], [form, evolutionary], [evolutionary, computing], [computing, collective], [collective,  ], [ , problem], [problem, solving], [solving, techniques], [techniques, based], [based, principles], [principles, biological], [biological, evolution], [evolution, like], [like, natural], [natural,  ], [ , selection], [selection, .]]

>> Trigrams: 
[[genetic, algorithms,  ], [algorithms,  , Genetic], [ , Genetic, Programming], [Genetic, Programming, (], [Programming, (, GP], [(, GP, )], [GP, ), form], [), form, evolutionary], [form, evolutionary, computing], [evolutionary, computing, collective], [computing, collective,  ], [collective,  , problem], [ , problem, solving], [problem, solving, techniques], [solving, techniques, based], [techniques, based, principles], [based, principles, biological], [principles, biological, evolution], [biological, evolution, like], [evolution, like, natural], [like, natural,  ], [natural,  , selection], [ , selection, .]]

>> Noun Phrases are: 
[Both genetic algorithms, Genetic Programming, GP, a form, evolutionary computing, a collective name, problem, techniques, the principles, biological evolution, natural  selection]

>> Named Entities are: 
[] 

------------------- Sentence 5 -------------------

Genetic algorithms use a vocabulary borrowed from natural genetics in that they talk  about genes (or bits), chromosomes (individuals or bit strings), and population (of individuals)   


>> Tokens are: 
[Genetic, algorithms, use, vocabulary, borrowed, natural, genetics, talk,  , genes, (, bits, ), ,, chromosomes, (, individuals, bit, strings, ), ,, population, (, individuals, ),  ] 

>> PoS Tags are: 
[('Genetic', 'ADJ'), ('algorithms', 'NOUN'), ('use', 'VERB'), ('vocabulary', 'NOUN'), ('borrowed', 'VERB'), ('natural', 'ADJ'), ('genetics', 'NOUN'), ('talk', 'VERB'), (' ', 'SPACE'), ('genes', 'NOUN'), ('(', 'PUNCT'), ('bits', 'VERB'), (')', 'PUNCT'), (',', 'PUNCT'), ('chromosomes', 'VERB'), ('(', 'PUNCT'), ('individuals', 'NOUN'), ('bit', 'NOUN'), ('strings', 'NOUN'), (')', 'PUNCT'), (',', 'PUNCT'), ('population', 'NOUN'), ('(', 'PUNCT'), ('individuals', 'NOUN'), (')', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Genetic', 'amod'), ('algorithms', 'nsubj'), ('use', 'ROOT'), ('vocabulary', 'dobj'), ('borrowed', 'acl'), ('natural', 'amod'), ('genetics', 'pobj'), ('talk', 'advcl'), (' ', 'dobj'), ('genes', 'pobj'), ('(', 'punct'), ('bits', 'conj'), (')', 'punct'), (',', 'punct'), ('chromosomes', 'dep'), ('(', 'punct'), ('individuals', 'dobj'), ('bit', 'compound'), ('strings', 'conj'), (')', 'punct'), (',', 'punct'), ('population', 'conj'), ('(', 'punct'), ('individuals', 'pobj'), (')', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[Genetic, algorithms], [algorithms, use], [use, vocabulary], [vocabulary, borrowed], [borrowed, natural], [natural, genetics], [genetics, talk], [talk,  ], [ , genes], [genes, (], [(, bits], [bits, )], [), ,], [,, chromosomes], [chromosomes, (], [(, individuals], [individuals, bit], [bit, strings], [strings, )], [), ,], [,, population], [population, (], [(, individuals], [individuals, )], [),  ]]

>> Trigrams: 
[[Genetic, algorithms, use], [algorithms, use, vocabulary], [use, vocabulary, borrowed], [vocabulary, borrowed, natural], [borrowed, natural, genetics], [natural, genetics, talk], [genetics, talk,  ], [talk,  , genes], [ , genes, (], [genes, (, bits], [(, bits, )], [bits, ), ,], [), ,, chromosomes], [,, chromosomes, (], [chromosomes, (, individuals], [(, individuals, bit], [individuals, bit, strings], [bit, strings, )], [strings, ), ,], [), ,, population], [,, population, (], [population, (, individuals], [(, individuals, )], [individuals, ),  ]]

>> Noun Phrases are: 
[Genetic algorithms, a vocabulary, natural genetics, they, genes, individuals, bit strings, individuals]

>> Named Entities are: 
[] 

------------------- Sentence 6 -------------------

[10]. 


>> Tokens are: 
[[, 10, ], .] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('10', 'NUM'), (']', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('[', 'punct'), ('10', 'ROOT'), (']', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[[, 10], [10, ]], [], .]]

>> Trigrams: 
[[[, 10, ]], [10, ], .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('10', 'CARDINAL')] 

------------------- Sentence 7 -------------------

Genetic algorithm approach is centered around three main processes- crossovers, mutation  and selection of individuals. 


>> Tokens are: 
[Genetic, algorithm, approach, centered, main, processes-, crossovers, ,, mutation,  , selection, individuals, .] 

>> PoS Tags are: 
[('Genetic', 'ADJ'), ('algorithm', 'NOUN'), ('approach', 'NOUN'), ('centered', 'VERB'), ('main', 'ADJ'), ('processes-', 'NOUN'), ('crossovers', 'NOUN'), (',', 'PUNCT'), ('mutation', 'NOUN'), (' ', 'SPACE'), ('selection', 'NOUN'), ('individuals', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Genetic', 'amod'), ('algorithm', 'compound'), ('approach', 'nsubjpass'), ('centered', 'ROOT'), ('main', 'amod'), ('processes-', 'compound'), ('crossovers', 'pobj'), (',', 'punct'), ('mutation', 'compound'), (' ', 'conj'), ('selection', 'conj'), ('individuals', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Genetic, algorithm], [algorithm, approach], [approach, centered], [centered, main], [main, processes-], [processes-, crossovers], [crossovers, ,], [,, mutation], [mutation,  ], [ , selection], [selection, individuals], [individuals, .]]

>> Trigrams: 
[[Genetic, algorithm, approach], [algorithm, approach, centered], [approach, centered, main], [centered, main, processes-], [main, processes-, crossovers], [processes-, crossovers, ,], [crossovers, ,, mutation], [,, mutation,  ], [mutation,  , selection], [ , selection, individuals], [selection, individuals, .]]

>> Noun Phrases are: 
[Genetic algorithm approach, three main processes- crossovers, selection, individuals]

>> Named Entities are: 
[('three', 'CARDINAL')] 

------------------- Sentence 8 -------------------

Initially many individual solutions are gathered together to make a  randomly generated population. 


>> Tokens are: 
[Initially, individual, solutions, gathered,  , randomly, generated, population, .] 

>> PoS Tags are: 
[('Initially', 'ADV'), ('individual', 'ADJ'), ('solutions', 'NOUN'), ('gathered', 'VERB'), (' ', 'SPACE'), ('randomly', 'ADV'), ('generated', 'VERB'), ('population', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Initially', 'advmod'), ('individual', 'amod'), ('solutions', 'nsubjpass'), ('gathered', 'ROOT'), (' ', 'nmod'), ('randomly', 'advmod'), ('generated', 'amod'), ('population', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Initially, individual], [individual, solutions], [solutions, gathered], [gathered,  ], [ , randomly], [randomly, generated], [generated, population], [population, .]]

>> Trigrams: 
[[Initially, individual, solutions], [individual, solutions, gathered], [solutions, gathered,  ], [gathered,  , randomly], [ , randomly, generated], [randomly, generated, population], [generated, population, .]]

>> Noun Phrases are: 
[many individual solutions, a  randomly generated population]

>> Named Entities are: 
[] 

------------------- Sentence 9 -------------------

Genetic algorithms are based upon the Darwin theory of  " The  survival of the Fittest" depending upon the fitness function the best possible solutions are  selected from the pool of individuals. 


>> Tokens are: 
[Genetic, algorithms, based, Darwin, theory,  , ",  , survival, Fittest, ", depending, fitness, function, best, possible, solutions,  , selected, pool, individuals, .] 

>> PoS Tags are: 
[('Genetic', 'ADJ'), ('algorithms', 'NOUN'), ('based', 'VERB'), ('Darwin', 'PROPN'), ('theory', 'NOUN'), (' ', 'SPACE'), ('"', 'PUNCT'), (' ', 'SPACE'), ('survival', 'NOUN'), ('Fittest', 'PROPN'), ('"', 'PUNCT'), ('depending', 'VERB'), ('fitness', 'NOUN'), ('function', 'NOUN'), ('best', 'ADJ'), ('possible', 'ADJ'), ('solutions', 'NOUN'), (' ', 'SPACE'), ('selected', 'VERB'), ('pool', 'NOUN'), ('individuals', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Genetic', 'amod'), ('algorithms', 'nsubjpass'), ('based', 'ROOT'), ('Darwin', 'compound'), ('theory', 'pobj'), (' ', 'pobj'), ('"', 'punct'), (' ', 'compound'), ('survival', 'pobj'), ('Fittest', 'pobj'), ('"', 'punct'), ('depending', 'acl'), ('fitness', 'compound'), ('function', 'pobj'), ('best', 'advmod'), ('possible', 'amod'), ('solutions', 'nsubjpass'), (' ', 'nsubjpass'), ('selected', 'relcl'), ('pool', 'pobj'), ('individuals', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Genetic, algorithms], [algorithms, based], [based, Darwin], [Darwin, theory], [theory,  ], [ , "], [",  ], [ , survival], [survival, Fittest], [Fittest, "], [", depending], [depending, fitness], [fitness, function], [function, best], [best, possible], [possible, solutions], [solutions,  ], [ , selected], [selected, pool], [pool, individuals], [individuals, .]]

>> Trigrams: 
[[Genetic, algorithms, based], [algorithms, based, Darwin], [based, Darwin, theory], [Darwin, theory,  ], [theory,  , "], [ , ",  ], [",  , survival], [ , survival, Fittest], [survival, Fittest, "], [Fittest, ", depending], [", depending, fitness], [depending, fitness, function], [fitness, function, best], [function, best, possible], [best, possible, solutions], [possible, solutions,  ], [solutions,  , selected], [ , selected, pool], [selected, pool, individuals], [pool, individuals, .]]

>> Noun Phrases are: 
[Genetic algorithms, the Darwin theory, " The  survival, the Fittest, the fitness function, the best possible solutions, the pool, individuals]

>> Named Entities are: 
[('Darwin', 'PERSON'), ('Fittest', 'LOC')] 

------------------- Sentence 10 -------------------

The fitter individuals have greater chances of its selection  and higher the probability that its genetic information will be passed over to future generations. 


>> Tokens are: 
[fitter, individuals, greater, chances, selection,  , higher, probability, genetic, information, passed, future, generations, .] 

>> PoS Tags are: 
[('fitter', 'NOUN'), ('individuals', 'NOUN'), ('greater', 'ADJ'), ('chances', 'NOUN'), ('selection', 'NOUN'), (' ', 'SPACE'), ('higher', 'ADJ'), ('probability', 'NOUN'), ('genetic', 'ADJ'), ('information', 'NOUN'), ('passed', 'VERB'), ('future', 'ADJ'), ('generations', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('fitter', 'compound'), ('individuals', 'nsubj'), ('greater', 'amod'), ('chances', 'dobj'), ('selection', 'compound'), (' ', 'pobj'), ('higher', 'conj'), ('probability', 'dobj'), ('genetic', 'amod'), ('information', 'nsubjpass'), ('passed', 'relcl'), ('future', 'amod'), ('generations', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[fitter, individuals], [individuals, greater], [greater, chances], [chances, selection], [selection,  ], [ , higher], [higher, probability], [probability, genetic], [genetic, information], [information, passed], [passed, future], [future, generations], [generations, .]]

>> Trigrams: 
[[fitter, individuals, greater], [individuals, greater, chances], [greater, chances, selection], [chances, selection,  ], [selection,  , higher], [ , higher, probability], [higher, probability, genetic], [probability, genetic, information], [genetic, information, passed], [information, passed, future], [passed, future, generations], [future, generations, .]]

>> Noun Phrases are: 
[The fitter individuals, greater chances, the probability, its genetic information, future generations]

>> Named Entities are: 
[] 

------------------- Sentence 11 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 12 -------------------

Once selection is over new individuals have to be formed. 


>> Tokens are: 
[selection, new, individuals, formed, .] 

>> PoS Tags are: 
[('selection', 'NOUN'), ('new', 'ADJ'), ('individuals', 'NOUN'), ('formed', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('selection', 'nsubj'), ('new', 'amod'), ('individuals', 'pobj'), ('formed', 'xcomp'), ('.', 'punct')]

>> Bigrams: 
[[selection, new], [new, individuals], [individuals, formed], [formed, .]]

>> Trigrams: 
[[selection, new, individuals], [new, individuals, formed], [individuals, formed, .]]

>> Noun Phrases are: 
[selection, new individuals]

>> Named Entities are: 
[] 

------------------- Sentence 13 -------------------

These new individuals are formed  either through crossover or mutation. 


>> Tokens are: 
[new, individuals, formed,  , crossover, mutation, .] 

>> PoS Tags are: 
[('new', 'ADJ'), ('individuals', 'NOUN'), ('formed', 'VERB'), (' ', 'SPACE'), ('crossover', 'NOUN'), ('mutation', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('new', 'amod'), ('individuals', 'nsubjpass'), ('formed', 'ROOT'), (' ', 'dobj'), ('crossover', 'pobj'), ('mutation', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[new, individuals], [individuals, formed], [formed,  ], [ , crossover], [crossover, mutation], [mutation, .]]

>> Trigrams: 
[[new, individuals, formed], [individuals, formed,  ], [formed,  , crossover], [ , crossover, mutation], [crossover, mutation, .]]

>> Noun Phrases are: 
[These new individuals, crossover, mutation]

>> Named Entities are: 
[] 

------------------- Sentence 14 -------------------

In the process of crossover, combining the genetic make up  of two solution candidates (producing a child out of two parents) creates new individuals. 


>> Tokens are: 
[process, crossover, ,, combining, genetic,  , solution, candidates, (, producing, child, parents, ), creates, new, individuals, .] 

>> PoS Tags are: 
[('process', 'NOUN'), ('crossover', 'NOUN'), (',', 'PUNCT'), ('combining', 'VERB'), ('genetic', 'ADJ'), (' ', 'SPACE'), ('solution', 'NOUN'), ('candidates', 'NOUN'), ('(', 'PUNCT'), ('producing', 'VERB'), ('child', 'NOUN'), ('parents', 'NOUN'), (')', 'PUNCT'), ('creates', 'VERB'), ('new', 'ADJ'), ('individuals', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('process', 'pobj'), ('crossover', 'pobj'), (',', 'punct'), ('combining', 'csubj'), ('genetic', 'dobj'), (' ', 'dobj'), ('solution', 'compound'), ('candidates', 'pobj'), ('(', 'punct'), ('producing', 'advcl'), ('child', 'dobj'), ('parents', 'pobj'), (')', 'punct'), ('creates', 'conj'), ('new', 'amod'), ('individuals', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[process, crossover], [crossover, ,], [,, combining], [combining, genetic], [genetic,  ], [ , solution], [solution, candidates], [candidates, (], [(, producing], [producing, child], [child, parents], [parents, )], [), creates], [creates, new], [new, individuals], [individuals, .]]

>> Trigrams: 
[[process, crossover, ,], [crossover, ,, combining], [,, combining, genetic], [combining, genetic,  ], [genetic,  , solution], [ , solution, candidates], [solution, candidates, (], [candidates, (, producing], [(, producing, child], [producing, child, parents], [child, parents, )], [parents, ), creates], [), creates, new], [creates, new, individuals], [new, individuals, .]]

>> Noun Phrases are: 
[the process, crossover, two solution candidates, a child, two parents, new individuals]

>> Named Entities are: 
[('two', 'CARDINAL'), ('two', 'CARDINAL')] 

------------------- Sentence 15 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 16 -------------------

Whereas in mutation, we alter some individuals, which means that some randomly chosen parts  of genetic information is changed to obtain a new individual. 


>> Tokens are: 
[mutation, ,, alter, individuals, ,, means, randomly, chosen, parts,  , genetic, information, changed, obtain, new, individual, .] 

>> PoS Tags are: 
[('mutation', 'NOUN'), (',', 'PUNCT'), ('alter', 'VERB'), ('individuals', 'NOUN'), (',', 'PUNCT'), ('means', 'VERB'), ('randomly', 'ADV'), ('chosen', 'VERB'), ('parts', 'NOUN'), (' ', 'SPACE'), ('genetic', 'ADJ'), ('information', 'NOUN'), ('changed', 'VERB'), ('obtain', 'VERB'), ('new', 'ADJ'), ('individual', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('mutation', 'pobj'), (',', 'punct'), ('alter', 'ROOT'), ('individuals', 'dobj'), (',', 'punct'), ('means', 'relcl'), ('randomly', 'advmod'), ('chosen', 'amod'), ('parts', 'nsubjpass'), (' ', 'appos'), ('genetic', 'amod'), ('information', 'pobj'), ('changed', 'ccomp'), ('obtain', 'advcl'), ('new', 'amod'), ('individual', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[mutation, ,], [,, alter], [alter, individuals], [individuals, ,], [,, means], [means, randomly], [randomly, chosen], [chosen, parts], [parts,  ], [ , genetic], [genetic, information], [information, changed], [changed, obtain], [obtain, new], [new, individual], [individual, .]]

>> Trigrams: 
[[mutation, ,, alter], [,, alter, individuals], [alter, individuals, ,], [individuals, ,, means], [,, means, randomly], [means, randomly, chosen], [randomly, chosen, parts], [chosen, parts,  ], [parts,  , genetic], [ , genetic, information], [genetic, information, changed], [information, changed, obtain], [changed, obtain, new], [obtain, new, individual], [new, individual, .]]

>> Noun Phrases are: 
[mutation, we, some individuals, some randomly chosen parts, genetic information, a new individual]

>> Named Entities are: 
[] 

------------------- Sentence 17 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 18 -------------------

The process of generation doesn't  stop until one of the conditions like minimum criteria is met or the desired fitness level is attained  or a specified number of generations are reached or any combination of the above [21]. 


>> Tokens are: 
[process, generation,  , stop, conditions, like, minimum, criteria, met, desired, fitness, level, attained,  , specified, number, generations, reached, combination, [, 21, ], .] 

>> PoS Tags are: 
[('process', 'NOUN'), ('generation', 'NOUN'), (' ', 'SPACE'), ('stop', 'VERB'), ('conditions', 'NOUN'), ('like', 'ADP'), ('minimum', 'ADJ'), ('criteria', 'NOUN'), ('met', 'VERB'), ('desired', 'VERB'), ('fitness', 'NOUN'), ('level', 'NOUN'), ('attained', 'VERB'), (' ', 'SPACE'), ('specified', 'ADJ'), ('number', 'NOUN'), ('generations', 'NOUN'), ('reached', 'VERB'), ('combination', 'NOUN'), ('[', 'PUNCT'), ('21', 'NUM'), (']', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('process', 'nsubj'), ('generation', 'pobj'), (' ', 'nsubj'), ('stop', 'ROOT'), ('conditions', 'pobj'), ('like', 'prep'), ('minimum', 'amod'), ('criteria', 'pobj'), ('met', 'advcl'), ('desired', 'amod'), ('fitness', 'compound'), ('level', 'nsubjpass'), ('attained', 'conj'), (' ', 'dobj'), ('specified', 'amod'), ('number', 'conj'), ('generations', 'pobj'), ('reached', 'conj'), ('combination', 'conj'), ('[', 'punct'), ('21', 'appos'), (']', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[process, generation], [generation,  ], [ , stop], [stop, conditions], [conditions, like], [like, minimum], [minimum, criteria], [criteria, met], [met, desired], [desired, fitness], [fitness, level], [level, attained], [attained,  ], [ , specified], [specified, number], [number, generations], [generations, reached], [reached, combination], [combination, [], [[, 21], [21, ]], [], .]]

>> Trigrams: 
[[process, generation,  ], [generation,  , stop], [ , stop, conditions], [stop, conditions, like], [conditions, like, minimum], [like, minimum, criteria], [minimum, criteria, met], [criteria, met, desired], [met, desired, fitness], [desired, fitness, level], [fitness, level, attained], [level, attained,  ], [attained,  , specified], [ , specified, number], [specified, number, generations], [number, generations, reached], [generations, reached, combination], [reached, combination, [], [combination, [, 21], [[, 21, ]], [21, ], .]]

>> Noun Phrases are: 
[The process, generation, the conditions, minimum criteria, the desired fitness level, a specified number, generations, any combination]

>> Named Entities are: 
[('21', 'CARDINAL')] 

------------------- Sentence 19 -------------------

    John Koza popularized GP, an offset of Genetic Algorithm in 1992. 


>> Tokens are: 
[    , John, Koza, popularized, GP, ,, offset, Genetic, Algorithm, 1992, .] 

>> PoS Tags are: 
[('    ', 'SPACE'), ('John', 'PROPN'), ('Koza', 'PROPN'), ('popularized', 'VERB'), ('GP', 'PROPN'), (',', 'PUNCT'), ('offset', 'NOUN'), ('Genetic', 'PROPN'), ('Algorithm', 'PROPN'), ('1992', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('    ', 'compound'), ('John', 'compound'), ('Koza', 'nsubj'), ('popularized', 'ROOT'), ('GP', 'dobj'), (',', 'punct'), ('offset', 'npadvmod'), ('Genetic', 'compound'), ('Algorithm', 'pobj'), ('1992', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[    , John], [John, Koza], [Koza, popularized], [popularized, GP], [GP, ,], [,, offset], [offset, Genetic], [Genetic, Algorithm], [Algorithm, 1992], [1992, .]]

>> Trigrams: 
[[    , John, Koza], [John, Koza, popularized], [Koza, popularized, GP], [popularized, GP, ,], [GP, ,, offset], [,, offset, Genetic], [offset, Genetic, Algorithm], [Genetic, Algorithm, 1992], [Algorithm, 1992, .]]

>> Noun Phrases are: 
[    John Koza, GP, Genetic Algorithm]

>> Named Entities are: 
[('John Koza', 'PERSON'), ('Genetic Algorithm', 'ORG'), ('1992', 'DATE')] 

------------------- Sentence 20 -------------------

It aims at optimizing computer  programs rather than function parameters. 


>> Tokens are: 
[aims, optimizing, computer,  , programs, function, parameters, .] 

>> PoS Tags are: 
[('aims', 'VERB'), ('optimizing', 'VERB'), ('computer', 'NOUN'), (' ', 'SPACE'), ('programs', 'NOUN'), ('function', 'NOUN'), ('parameters', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('aims', 'ROOT'), ('optimizing', 'pcomp'), ('computer', 'compound'), (' ', 'compound'), ('programs', 'dobj'), ('function', 'compound'), ('parameters', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[aims, optimizing], [optimizing, computer], [computer,  ], [ , programs], [programs, function], [function, parameters], [parameters, .]]

>> Trigrams: 
[[aims, optimizing, computer], [optimizing, computer,  ], [computer,  , programs], [ , programs, function], [programs, function, parameters], [function, parameters, .]]

>> Noun Phrases are: 
[It, computer  programs, function parameters]

>> Named Entities are: 
[] 

------------------- Sentence 21 -------------------

  GP is a supervised machine learning technique where algorithms are modeled after natural  selection. 


>> Tokens are: 
[  , GP, supervised, machine, learning, technique, algorithms, modeled, natural,  , selection, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('GP', 'PROPN'), ('supervised', 'ADJ'), ('machine', 'NOUN'), ('learning', 'NOUN'), ('technique', 'NOUN'), ('algorithms', 'NOUN'), ('modeled', 'VERB'), ('natural', 'ADJ'), (' ', 'SPACE'), ('selection', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'nmod'), ('GP', 'nsubj'), ('supervised', 'amod'), ('machine', 'compound'), ('learning', 'compound'), ('technique', 'attr'), ('algorithms', 'nsubjpass'), ('modeled', 'relcl'), ('natural', 'amod'), (' ', 'compound'), ('selection', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[  , GP], [GP, supervised], [supervised, machine], [machine, learning], [learning, technique], [technique, algorithms], [algorithms, modeled], [modeled, natural], [natural,  ], [ , selection], [selection, .]]

>> Trigrams: 
[[  , GP, supervised], [GP, supervised, machine], [supervised, machine, learning], [machine, learning, technique], [learning, technique, algorithms], [technique, algorithms, modeled], [algorithms, modeled, natural], [modeled, natural,  ], [natural,  , selection], [ , selection, .]]

>> Noun Phrases are: 
[  GP, a supervised machine learning technique, algorithms, natural  selection]

>> Named Entities are: 
[] 

------------------- Sentence 22 -------------------

These algorithms are represented as function trees where these trees are intended to 


>> Tokens are: 
[algorithms, represented, function, trees, trees, intended] 

>> PoS Tags are: 
[('algorithms', 'NOUN'), ('represented', 'VERB'), ('function', 'NOUN'), ('trees', 'NOUN'), ('trees', 'NOUN'), ('intended', 'VERB')] 

>> Dependency Tags are: 
[('algorithms', 'nsubjpass'), ('represented', 'ROOT'), ('function', 'compound'), ('trees', 'pobj'), ('trees', 'nsubjpass'), ('intended', 'relcl')]

>> Bigrams: 
[[algorithms, represented], [represented, function], [function, trees], [trees, trees], [trees, intended]]

>> Trigrams: 
[[algorithms, represented, function], [represented, function, trees], [function, trees, trees], [trees, trees, intended]]

>> Noun Phrases are: 
[These algorithms, function trees, these trees]

>> Named Entities are: 
[] 


================================ Paragraph 61 =================================

Yogesh Singh, Pradeep Kumar Bhatia & Omprakash Sangwan  

------------------- Sentence 1 -------------------

Yogesh Singh, Pradeep Kumar Bhatia & Omprakash Sangwan   


>> Tokens are: 
[Yogesh, Singh, ,, Pradeep, Kumar, Bhatia, &, Omprakash, Sangwan,  ] 

>> PoS Tags are: 
[('Yogesh', 'PROPN'), ('Singh', 'PROPN'), (',', 'PUNCT'), ('Pradeep', 'PROPN'), ('Kumar', 'PROPN'), ('Bhatia', 'PROPN'), ('&', 'CCONJ'), ('Omprakash', 'PROPN'), ('Sangwan', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Yogesh', 'compound'), ('Singh', 'ROOT'), (',', 'punct'), ('Pradeep', 'compound'), ('Kumar', 'compound'), ('Bhatia', 'conj'), ('&', 'cc'), ('Omprakash', 'compound'), ('Sangwan', 'conj'), (' ', 'punct')]

>> Bigrams: 
[[Yogesh, Singh], [Singh, ,], [,, Pradeep], [Pradeep, Kumar], [Kumar, Bhatia], [Bhatia, &], [&, Omprakash], [Omprakash, Sangwan], [Sangwan,  ]]

>> Trigrams: 
[[Yogesh, Singh, ,], [Singh, ,, Pradeep], [,, Pradeep, Kumar], [Pradeep, Kumar, Bhatia], [Kumar, Bhatia, &], [Bhatia, &, Omprakash], [&, Omprakash, Sangwan], [Omprakash, Sangwan,  ]]

>> Noun Phrases are: 
[Yogesh Singh, Pradeep Kumar Bhatia, Omprakash Sangwan]

>> Named Entities are: 
[('Yogesh Singh', 'PERSON'), ('Kumar Bhatia & Omprakash Sangwan', 'ORG')] 


================================ Paragraph 62 =================================

International Journal of Computer Science and Security, Volume (1) : Issue (1) 80  

------------------- Sentence 1 -------------------

International Journal of Computer Science and Security, Volume (1) : Issue (1) 80   


>> Tokens are: 
[International, Journal, Computer, Science, Security, ,, Volume, (, 1, ), :, Issue, (, 1, ), 80,  ] 

>> PoS Tags are: 
[('International', 'PROPN'), ('Journal', 'PROPN'), ('Computer', 'PROPN'), ('Science', 'PROPN'), ('Security', 'PROPN'), (',', 'PUNCT'), ('Volume', 'NOUN'), ('(', 'PUNCT'), ('1', 'NUM'), (')', 'PUNCT'), (':', 'PUNCT'), ('Issue', 'NOUN'), ('(', 'PUNCT'), ('1', 'NUM'), (')', 'PUNCT'), ('80', 'NUM'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('International', 'compound'), ('Journal', 'ROOT'), ('Computer', 'compound'), ('Science', 'pobj'), ('Security', 'conj'), (',', 'punct'), ('Volume', 'appos'), ('(', 'punct'), ('1', 'appos'), (')', 'punct'), (':', 'punct'), ('Issue', 'appos'), ('(', 'punct'), ('1', 'appos'), (')', 'punct'), ('80', 'appos'), (' ', 'appos')]

>> Bigrams: 
[[International, Journal], [Journal, Computer], [Computer, Science], [Science, Security], [Security, ,], [,, Volume], [Volume, (], [(, 1], [1, )], [), :], [:, Issue], [Issue, (], [(, 1], [1, )], [), 80], [80,  ]]

>> Trigrams: 
[[International, Journal, Computer], [Journal, Computer, Science], [Computer, Science, Security], [Science, Security, ,], [Security, ,, Volume], [,, Volume, (], [Volume, (, 1], [(, 1, )], [1, ), :], [), :, Issue], [:, Issue, (], [Issue, (, 1], [(, 1, )], [1, ), 80], [), 80,  ]]

>> Noun Phrases are: 
[International Journal, Computer Science, Security, Volume, Issue]

>> Named Entities are: 
[('International Journal of Computer Science and Security, Volume', 'ORG'), ('1', 'CARDINAL')] 


================================ Paragraph 63 =================================

perform a given task [6]. In GP the fitter individuals are retained and allowed to develop whereas  others are discarded [4].     GP works in a manner similar to genetic algorithm. It also follows the principles of natural  evolution to generate a solution that maximizes (or minimizes) some fitness function [3]. GP  differs from GA in the sense that GP tends to find the solution of a given problem by representing  it as a array of integers while the goal of a GP process is to produce a computer program to solve  the optimization problem at hand. GP cycle works as any evolutionary process. New individuals  are created; tested and fitter ones succeed in creating their own children. The unfit individuals are  removed from the population. The figure:6  illustrates how GP cycle works.      

------------------- Sentence 1 -------------------

perform a given task [6]. 


>> Tokens are: 
[perform, given, task, [, 6, ], .] 

>> PoS Tags are: 
[('perform', 'VERB'), ('given', 'VERB'), ('task', 'NOUN'), ('[', 'PUNCT'), ('6', 'NUM'), (']', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('perform', 'ROOT'), ('given', 'amod'), ('task', 'dobj'), ('[', 'punct'), ('6', 'npadvmod'), (']', 'npadvmod'), ('.', 'punct')]

>> Bigrams: 
[[perform, given], [given, task], [task, [], [[, 6], [6, ]], [], .]]

>> Trigrams: 
[[perform, given, task], [given, task, [], [task, [, 6], [[, 6, ]], [6, ], .]]

>> Noun Phrases are: 
[a given task]

>> Named Entities are: 
[('6', 'CARDINAL')] 

------------------- Sentence 2 -------------------

In GP the fitter individuals are retained and allowed to develop whereas  others are discarded [4]. 


>> Tokens are: 
[GP, fitter, individuals, retained, allowed, develop,  , discarded, [, 4, ], .] 

>> PoS Tags are: 
[('GP', 'PROPN'), ('fitter', 'NOUN'), ('individuals', 'NOUN'), ('retained', 'VERB'), ('allowed', 'VERB'), ('develop', 'VERB'), (' ', 'SPACE'), ('discarded', 'VERB'), ('[', 'PUNCT'), ('4', 'NUM'), (']', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('GP', 'pobj'), ('fitter', 'compound'), ('individuals', 'nsubjpass'), ('retained', 'ROOT'), ('allowed', 'conj'), ('develop', 'xcomp'), (' ', 'compound'), ('discarded', 'advcl'), ('[', 'punct'), ('4', 'dobj'), (']', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[GP, fitter], [fitter, individuals], [individuals, retained], [retained, allowed], [allowed, develop], [develop,  ], [ , discarded], [discarded, [], [[, 4], [4, ]], [], .]]

>> Trigrams: 
[[GP, fitter, individuals], [fitter, individuals, retained], [individuals, retained, allowed], [retained, allowed, develop], [allowed, develop,  ], [develop,  , discarded], [ , discarded, [], [discarded, [, 4], [[, 4, ]], [4, ], .]]

>> Noun Phrases are: 
[GP, the fitter individuals,  others]

>> Named Entities are: 
[('4', 'CARDINAL')] 

------------------- Sentence 3 -------------------

    GP works in a manner similar to genetic algorithm. 


>> Tokens are: 
[    , GP, works, manner, similar, genetic, algorithm, .] 

>> PoS Tags are: 
[('    ', 'SPACE'), ('GP', 'PROPN'), ('works', 'VERB'), ('manner', 'NOUN'), ('similar', 'ADJ'), ('genetic', 'ADJ'), ('algorithm', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('    ', 'poss'), ('GP', 'nsubj'), ('works', 'ROOT'), ('manner', 'pobj'), ('similar', 'amod'), ('genetic', 'amod'), ('algorithm', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[    , GP], [GP, works], [works, manner], [manner, similar], [similar, genetic], [genetic, algorithm], [algorithm, .]]

>> Trigrams: 
[[    , GP, works], [GP, works, manner], [works, manner, similar], [manner, similar, genetic], [similar, genetic, algorithm], [genetic, algorithm, .]]

>> Noun Phrases are: 
[    GP, a manner, genetic algorithm]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

It also follows the principles of natural  evolution to generate a solution that maximizes (or minimizes) some fitness function [3]. 


>> Tokens are: 
[follows, principles, natural,  , evolution, generate, solution, maximizes, (, minimizes, ), fitness, function, [, 3, ], .] 

>> PoS Tags are: 
[('follows', 'VERB'), ('principles', 'NOUN'), ('natural', 'ADJ'), (' ', 'SPACE'), ('evolution', 'NOUN'), ('generate', 'VERB'), ('solution', 'NOUN'), ('maximizes', 'VERB'), ('(', 'PUNCT'), ('minimizes', 'NOUN'), (')', 'PUNCT'), ('fitness', 'NOUN'), ('function', 'NOUN'), ('[', 'PUNCT'), ('3', 'NUM'), (']', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('follows', 'ROOT'), ('principles', 'dobj'), ('natural', 'amod'), (' ', 'compound'), ('evolution', 'pobj'), ('generate', 'advcl'), ('solution', 'dobj'), ('maximizes', 'relcl'), ('(', 'punct'), ('minimizes', 'conj'), (')', 'punct'), ('fitness', 'compound'), ('function', 'npadvmod'), ('[', 'punct'), ('3', 'appos'), (']', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[follows, principles], [principles, natural], [natural,  ], [ , evolution], [evolution, generate], [generate, solution], [solution, maximizes], [maximizes, (], [(, minimizes], [minimizes, )], [), fitness], [fitness, function], [function, [], [[, 3], [3, ]], [], .]]

>> Trigrams: 
[[follows, principles, natural], [principles, natural,  ], [natural,  , evolution], [ , evolution, generate], [evolution, generate, solution], [generate, solution, maximizes], [solution, maximizes, (], [maximizes, (, minimizes], [(, minimizes, )], [minimizes, ), fitness], [), fitness, function], [fitness, function, [], [function, [, 3], [[, 3, ]], [3, ], .]]

>> Noun Phrases are: 
[It, the principles, natural  evolution, a solution]

>> Named Entities are: 
[('3', 'CARDINAL')] 

------------------- Sentence 5 -------------------

GP  differs from GA in the sense that GP tends to find the solution of a given problem by representing  it as a array of integers while the goal of a GP process is to produce a computer program to solve  the optimization problem at hand. 


>> Tokens are: 
[GP,  , differs, GA, sense, GP, tends, find, solution, given, problem, representing,  , array, integers, goal, GP, process, produce, computer, program, solve,  , optimization, problem, hand, .] 

>> PoS Tags are: 
[('GP', 'PROPN'), (' ', 'SPACE'), ('differs', 'VERB'), ('GA', 'PROPN'), ('sense', 'NOUN'), ('GP', 'PROPN'), ('tends', 'VERB'), ('find', 'VERB'), ('solution', 'NOUN'), ('given', 'VERB'), ('problem', 'NOUN'), ('representing', 'VERB'), (' ', 'SPACE'), ('array', 'NOUN'), ('integers', 'NOUN'), ('goal', 'NOUN'), ('GP', 'PROPN'), ('process', 'NOUN'), ('produce', 'VERB'), ('computer', 'NOUN'), ('program', 'NOUN'), ('solve', 'VERB'), (' ', 'SPACE'), ('optimization', 'NOUN'), ('problem', 'NOUN'), ('hand', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('GP', 'compound'), (' ', 'nsubj'), ('differs', 'ROOT'), ('GA', 'pobj'), ('sense', 'pobj'), ('GP', 'nsubj'), ('tends', 'acl'), ('find', 'xcomp'), ('solution', 'dobj'), ('given', 'amod'), ('problem', 'pobj'), ('representing', 'pcomp'), (' ', 'dobj'), ('array', 'pobj'), ('integers', 'pobj'), ('goal', 'nsubj'), ('GP', 'compound'), ('process', 'pobj'), ('produce', 'xcomp'), ('computer', 'compound'), ('program', 'dobj'), ('solve', 'relcl'), (' ', 'dobj'), ('optimization', 'compound'), ('problem', 'dobj'), ('hand', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[GP,  ], [ , differs], [differs, GA], [GA, sense], [sense, GP], [GP, tends], [tends, find], [find, solution], [solution, given], [given, problem], [problem, representing], [representing,  ], [ , array], [array, integers], [integers, goal], [goal, GP], [GP, process], [process, produce], [produce, computer], [computer, program], [program, solve], [solve,  ], [ , optimization], [optimization, problem], [problem, hand], [hand, .]]

>> Trigrams: 
[[GP,  , differs], [ , differs, GA], [differs, GA, sense], [GA, sense, GP], [sense, GP, tends], [GP, tends, find], [tends, find, solution], [find, solution, given], [solution, given, problem], [given, problem, representing], [problem, representing,  ], [representing,  , array], [ , array, integers], [array, integers, goal], [integers, goal, GP], [goal, GP, process], [GP, process, produce], [process, produce, computer], [produce, computer, program], [computer, program, solve], [program, solve,  ], [solve,  , optimization], [ , optimization, problem], [optimization, problem, hand], [problem, hand, .]]

>> Noun Phrases are: 
[GA, the sense, GP, the solution, a given problem, it, a array, integers, the goal, a GP process, a computer program, the optimization problem, hand]

>> Named Entities are: 
[] 

------------------- Sentence 6 -------------------

GP cycle works as any evolutionary process. 


>> Tokens are: 
[GP, cycle, works, evolutionary, process, .] 

>> PoS Tags are: 
[('GP', 'NOUN'), ('cycle', 'NOUN'), ('works', 'VERB'), ('evolutionary', 'ADJ'), ('process', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('GP', 'compound'), ('cycle', 'nsubj'), ('works', 'ROOT'), ('evolutionary', 'amod'), ('process', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[GP, cycle], [cycle, works], [works, evolutionary], [evolutionary, process], [process, .]]

>> Trigrams: 
[[GP, cycle, works], [cycle, works, evolutionary], [works, evolutionary, process], [evolutionary, process, .]]

>> Noun Phrases are: 
[GP cycle, any evolutionary process]

>> Named Entities are: 
[] 

------------------- Sentence 7 -------------------

New individuals  are created; tested and fitter ones succeed in creating their own children. 


>> Tokens are: 
[New, individuals,  , created, ;, tested, fitter, ones, succeed, creating, children, .] 

>> PoS Tags are: 
[('New', 'ADJ'), ('individuals', 'NOUN'), (' ', 'SPACE'), ('created', 'VERB'), (';', 'PUNCT'), ('tested', 'VERB'), ('fitter', 'NOUN'), ('ones', 'NOUN'), ('succeed', 'VERB'), ('creating', 'VERB'), ('children', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('New', 'amod'), ('individuals', 'nsubj'), (' ', 'nsubjpass'), ('created', 'relcl'), (';', 'punct'), ('tested', 'amod'), ('fitter', 'conj'), ('ones', 'appos'), ('succeed', 'ROOT'), ('creating', 'pcomp'), ('children', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[New, individuals], [individuals,  ], [ , created], [created, ;], [;, tested], [tested, fitter], [fitter, ones], [ones, succeed], [succeed, creating], [creating, children], [children, .]]

>> Trigrams: 
[[New, individuals,  ], [individuals,  , created], [ , created, ;], [created, ;, tested], [;, tested, fitter], [tested, fitter, ones], [fitter, ones, succeed], [ones, succeed, creating], [succeed, creating, children], [creating, children, .]]

>> Noun Phrases are: 
[New individuals, tested and fitter ones, their own children]

>> Named Entities are: 
[] 

------------------- Sentence 8 -------------------

The unfit individuals are  removed from the population. 


>> Tokens are: 
[unfit, individuals,  , removed, population, .] 

>> PoS Tags are: 
[('unfit', 'ADJ'), ('individuals', 'NOUN'), (' ', 'SPACE'), ('removed', 'VERB'), ('population', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('unfit', 'amod'), ('individuals', 'nsubjpass'), (' ', 'nsubjpass'), ('removed', 'ROOT'), ('population', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[unfit, individuals], [individuals,  ], [ , removed], [removed, population], [population, .]]

>> Trigrams: 
[[unfit, individuals,  ], [individuals,  , removed], [ , removed, population], [removed, population, .]]

>> Noun Phrases are: 
[The unfit individuals, the population]

>> Named Entities are: 
[] 

------------------- Sentence 9 -------------------

The figure:6  illustrates how GP cycle works. 


>> Tokens are: 
[figure:6,  , illustrates, GP, cycle, works, .] 

>> PoS Tags are: 
[('figure:6', 'NOUN'), (' ', 'SPACE'), ('illustrates', 'VERB'), ('GP', 'PROPN'), ('cycle', 'NOUN'), ('works', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('figure:6', 'nsubj'), (' ', 'appos'), ('illustrates', 'ROOT'), ('GP', 'compound'), ('cycle', 'nsubj'), ('works', 'ccomp'), ('.', 'punct')]

>> Bigrams: 
[[figure:6,  ], [ , illustrates], [illustrates, GP], [GP, cycle], [cycle, works], [works, .]]

>> Trigrams: 
[[figure:6,  , illustrates], [ , illustrates, GP], [illustrates, GP, cycle], [GP, cycle, works], [cycle, works, .]]

>> Noun Phrases are: 
[The figure:6, GP cycle]

>> Named Entities are: 
[] 

------------------- Sentence 10 -------------------

      


>> Tokens are: 
[     ] 

>> PoS Tags are: 
[('     ', 'SPACE')] 

>> Dependency Tags are: 
[('     ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 64 =================================

Population of Programs 

------------------- Sentence 1 -------------------

Population of Programs 


>> Tokens are: 
[Population, Programs] 

>> PoS Tags are: 
[('Population', 'PROPN'), ('Programs', 'PROPN')] 

>> Dependency Tags are: 
[('Population', 'ROOT'), ('Programs', 'pobj')]

>> Bigrams: 
[[Population, Programs]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Population, Programs]

>> Named Entities are: 
[] 


================================ Paragraph 65 =================================

Test Programs 

------------------- Sentence 1 -------------------

Test Programs 


>> Tokens are: 
[Test, Programs] 

>> PoS Tags are: 
[('Test', 'PROPN'), ('Programs', 'NOUN')] 

>> Dependency Tags are: 
[('Test', 'compound'), ('Programs', 'ROOT')]

>> Bigrams: 
[[Test, Programs]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Test Programs]

>> Named Entities are: 
[] 


================================ Paragraph 66 =================================

Select Parents in 

------------------- Sentence 1 -------------------

Select Parents in 


>> Tokens are: 
[Select, Parents] 

>> PoS Tags are: 
[('Select', 'PROPN'), ('Parents', 'NOUN')] 

>> Dependency Tags are: 
[('Select', 'ROOT'), ('Parents', 'dobj')]

>> Bigrams: 
[[Select, Parents]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Select, Parents]

>> Named Entities are: 
[] 


================================ Paragraph 67 =================================

propertion to their fitness 

------------------- Sentence 1 -------------------

propertion to their fitness 


>> Tokens are: 
[propertion, fitness] 

>> PoS Tags are: 
[('propertion', 'NOUN'), ('fitness', 'NOUN')] 

>> Dependency Tags are: 
[('propertion', 'ROOT'), ('fitness', 'pobj')]

>> Bigrams: 
[[propertion, fitness]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[propertion, their fitness]

>> Named Entities are: 
[] 


================================ Paragraph 68 =================================

Creates New 

------------------- Sentence 1 -------------------

Creates New 


>> Tokens are: 
[Creates, New] 

>> PoS Tags are: 
[('Creates', 'VERB'), ('New', 'ADJ')] 

>> Dependency Tags are: 
[('Creates', 'ROOT'), ('New', 'dobj')]

>> Bigrams: 
[[Creates, New]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('Creates New', 'PERSON')] 


================================ Paragraph 69 =================================

Programs 

------------------- Sentence 1 -------------------

Programs 


>> Tokens are: 
[Programs] 

>> PoS Tags are: 
[('Programs', 'NOUN')] 

>> Dependency Tags are: 
[('Programs', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Programs]

>> Named Entities are: 
[] 


================================ Paragraph 70 =================================

Figure 6: Genetic Programming Cycle 

------------------- Sentence 1 -------------------

Figure 6: Genetic Programming Cycle 


>> Tokens are: 
[Figure, 6, :, Genetic, Programming, Cycle] 

>> PoS Tags are: 
[('Figure', 'NOUN'), ('6', 'NUM'), (':', 'PUNCT'), ('Genetic', 'PROPN'), ('Programming', 'PROPN'), ('Cycle', 'NOUN')] 

>> Dependency Tags are: 
[('Figure', 'ROOT'), ('6', 'nummod'), (':', 'punct'), ('Genetic', 'compound'), ('Programming', 'compound'), ('Cycle', 'appos')]

>> Bigrams: 
[[Figure, 6], [6, :], [:, Genetic], [Genetic, Programming], [Programming, Cycle]]

>> Trigrams: 
[[Figure, 6, :], [6, :, Genetic], [:, Genetic, Programming], [Genetic, Programming, Cycle]]

>> Noun Phrases are: 
[Figure, Genetic Programming Cycle]

>> Named Entities are: 
[('6', 'CARDINAL')] 


================================ Paragraph 71 =================================

               

------------------- Sentence 1 -------------------

                


>> Tokens are: 
[               ] 

>> PoS Tags are: 
[('               ', 'SPACE')] 

>> Dependency Tags are: 
[('               ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 72 =================================

Yogesh Singh, Pradeep Kumar Bhatia & Omprakash Sangwan  

------------------- Sentence 1 -------------------

Yogesh Singh, Pradeep Kumar Bhatia & Omprakash Sangwan   


>> Tokens are: 
[Yogesh, Singh, ,, Pradeep, Kumar, Bhatia, &, Omprakash, Sangwan,  ] 

>> PoS Tags are: 
[('Yogesh', 'PROPN'), ('Singh', 'PROPN'), (',', 'PUNCT'), ('Pradeep', 'PROPN'), ('Kumar', 'PROPN'), ('Bhatia', 'PROPN'), ('&', 'CCONJ'), ('Omprakash', 'PROPN'), ('Sangwan', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Yogesh', 'compound'), ('Singh', 'ROOT'), (',', 'punct'), ('Pradeep', 'compound'), ('Kumar', 'compound'), ('Bhatia', 'conj'), ('&', 'cc'), ('Omprakash', 'compound'), ('Sangwan', 'conj'), (' ', 'punct')]

>> Bigrams: 
[[Yogesh, Singh], [Singh, ,], [,, Pradeep], [Pradeep, Kumar], [Kumar, Bhatia], [Bhatia, &], [&, Omprakash], [Omprakash, Sangwan], [Sangwan,  ]]

>> Trigrams: 
[[Yogesh, Singh, ,], [Singh, ,, Pradeep], [,, Pradeep, Kumar], [Pradeep, Kumar, Bhatia], [Kumar, Bhatia, &], [Bhatia, &, Omprakash], [&, Omprakash, Sangwan], [Omprakash, Sangwan,  ]]

>> Noun Phrases are: 
[Yogesh Singh, Pradeep Kumar Bhatia, Omprakash Sangwan]

>> Named Entities are: 
[('Yogesh Singh', 'PERSON'), ('Kumar Bhatia & Omprakash Sangwan', 'ORG')] 


================================ Paragraph 73 =================================

International Journal of Computer Science and Security, Volume (1) : Issue (1) 81  

------------------- Sentence 1 -------------------

International Journal of Computer Science and Security, Volume (1) : Issue (1) 81   


>> Tokens are: 
[International, Journal, Computer, Science, Security, ,, Volume, (, 1, ), :, Issue, (, 1, ), 81,  ] 

>> PoS Tags are: 
[('International', 'PROPN'), ('Journal', 'PROPN'), ('Computer', 'PROPN'), ('Science', 'PROPN'), ('Security', 'PROPN'), (',', 'PUNCT'), ('Volume', 'NOUN'), ('(', 'PUNCT'), ('1', 'NUM'), (')', 'PUNCT'), (':', 'PUNCT'), ('Issue', 'NOUN'), ('(', 'PUNCT'), ('1', 'NUM'), (')', 'PUNCT'), ('81', 'NUM'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('International', 'compound'), ('Journal', 'ROOT'), ('Computer', 'compound'), ('Science', 'pobj'), ('Security', 'conj'), (',', 'punct'), ('Volume', 'appos'), ('(', 'punct'), ('1', 'appos'), (')', 'punct'), (':', 'punct'), ('Issue', 'appos'), ('(', 'punct'), ('1', 'appos'), (')', 'punct'), ('81', 'nummod'), (' ', 'appos')]

>> Bigrams: 
[[International, Journal], [Journal, Computer], [Computer, Science], [Science, Security], [Security, ,], [,, Volume], [Volume, (], [(, 1], [1, )], [), :], [:, Issue], [Issue, (], [(, 1], [1, )], [), 81], [81,  ]]

>> Trigrams: 
[[International, Journal, Computer], [Journal, Computer, Science], [Computer, Science, Security], [Science, Security, ,], [Security, ,, Volume], [,, Volume, (], [Volume, (, 1], [(, 1, )], [1, ), :], [), :, Issue], [:, Issue, (], [Issue, (, 1], [(, 1, )], [1, ), 81], [), 81,  ]]

>> Noun Phrases are: 
[International Journal, Computer Science, Security, Volume, Issue]

>> Named Entities are: 
[('International Journal of Computer Science and Security, Volume', 'ORG'), ('1', 'CARDINAL')] 


================================ Paragraph 74 =================================

7. Discussion on Various Machine Learning Techniques  

------------------- Sentence 1 -------------------

7. 


>> Tokens are: 
[7, .] 

>> PoS Tags are: 
[('7', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('7', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[7, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('7', 'CARDINAL')] 

------------------- Sentence 2 -------------------

Discussion on Various Machine Learning Techniques   


>> Tokens are: 
[Discussion, Machine, Learning, Techniques,  ] 

>> PoS Tags are: 
[('Discussion', 'NOUN'), ('Machine', 'PROPN'), ('Learning', 'PROPN'), ('Techniques', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Discussion', 'ROOT'), ('Machine', 'compound'), ('Learning', 'compound'), ('Techniques', 'pobj'), (' ', 'nummod')]

>> Bigrams: 
[[Discussion, Machine], [Machine, Learning], [Learning, Techniques], [Techniques,  ]]

>> Trigrams: 
[[Discussion, Machine, Learning], [Machine, Learning, Techniques], [Learning, Techniques,  ]]

>> Noun Phrases are: 
[Discussion, Various Machine Learning Techniques]

>> Named Entities are: 
[] 


================================ Paragraph 75 =================================

Technique Application Areas Potential Benefits Limitations  

------------------- Sentence 1 -------------------

Technique Application Areas Potential Benefits Limitations   


>> Tokens are: 
[Technique, Application, Areas, Potential, Benefits, Limitations,  ] 

>> PoS Tags are: 
[('Technique', 'PROPN'), ('Application', 'PROPN'), ('Areas', 'PROPN'), ('Potential', 'PROPN'), ('Benefits', 'PROPN'), ('Limitations', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Technique', 'compound'), ('Application', 'compound'), ('Areas', 'nmod'), ('Potential', 'compound'), ('Benefits', 'compound'), ('Limitations', 'ROOT'), (' ', 'nummod')]

>> Bigrams: 
[[Technique, Application], [Application, Areas], [Areas, Potential], [Potential, Benefits], [Benefits, Limitations], [Limitations,  ]]

>> Trigrams: 
[[Technique, Application, Areas], [Application, Areas, Potential], [Areas, Potential, Benefits], [Potential, Benefits, Limitations], [Benefits, Limitations,  ]]

>> Noun Phrases are: 
[Technique Application Areas Potential Benefits Limitations]

>> Named Entities are: 
[('Technique Application Areas Potential Benefits Limitations  ', 'ORG')] 


================================ Paragraph 76 =================================

Neural Networks (NN) Testing  Effort Estimation  Function Point Analysis  Risk Management  Reliability Metrics  Sales Forecasting  

------------------- Sentence 1 -------------------

Neural Networks (NN) Testing  Effort Estimation   


>> Tokens are: 
[Neural, Networks, (, NN, ), Testing,  , Effort, Estimation,  ] 

>> PoS Tags are: 
[('Neural', 'PROPN'), ('Networks', 'PROPN'), ('(', 'PUNCT'), ('NN', 'PROPN'), (')', 'PUNCT'), ('Testing', 'NOUN'), (' ', 'SPACE'), ('Effort', 'PROPN'), ('Estimation', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Neural', 'compound'), ('Networks', 'ROOT'), ('(', 'punct'), ('NN', 'appos'), (')', 'punct'), ('Testing', 'appos'), (' ', 'punct'), ('Effort', 'compound'), ('Estimation', 'compound'), (' ', 'punct')]

>> Bigrams: 
[[Neural, Networks], [Networks, (], [(, NN], [NN, )], [), Testing], [Testing,  ], [ , Effort], [Effort, Estimation], [Estimation,  ]]

>> Trigrams: 
[[Neural, Networks, (], [Networks, (, NN], [(, NN, )], [NN, ), Testing], [), Testing,  ], [Testing,  , Effort], [ , Effort, Estimation], [Effort, Estimation,  ]]

>> Noun Phrases are: 
[Neural Networks, NN, ) Testing]

>> Named Entities are: 
[('Neural Networks', 'ORG')] 

------------------- Sentence 2 -------------------

Function Point Analysis  Risk Management   


>> Tokens are: 
[Function, Point, Analysis,  , Risk, Management,  ] 

>> PoS Tags are: 
[('Function', 'PROPN'), ('Point', 'PROPN'), ('Analysis', 'PROPN'), (' ', 'SPACE'), ('Risk', 'PROPN'), ('Management', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Function', 'compound'), ('Point', 'compound'), ('Analysis', 'compound'), (' ', 'ROOT'), ('Risk', 'compound'), ('Management', 'npadvmod'), (' ', 'punct')]

>> Bigrams: 
[[Function, Point], [Point, Analysis], [Analysis,  ], [ , Risk], [Risk, Management], [Management,  ]]

>> Trigrams: 
[[Function, Point, Analysis], [Point, Analysis,  ], [Analysis,  , Risk], [ , Risk, Management], [Risk, Management,  ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

Reliability Metrics   


>> Tokens are: 
[Reliability, Metrics,  ] 

>> PoS Tags are: 
[('Reliability', 'PROPN'), ('Metrics', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Reliability', 'compound'), ('Metrics', 'ROOT'), (' ', 'advmod')]

>> Bigrams: 
[[Reliability, Metrics], [Metrics,  ]]

>> Trigrams: 
[[Reliability, Metrics,  ]]

>> Noun Phrases are: 
[Reliability Metrics]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

Sales Forecasting   


>> Tokens are: 
[Sales, Forecasting,  ] 

>> PoS Tags are: 
[('Sales', 'PROPN'), ('Forecasting', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Sales', 'compound'), ('Forecasting', 'ROOT'), (' ', 'nummod')]

>> Bigrams: 
[[Sales, Forecasting], [Forecasting,  ]]

>> Trigrams: 
[[Sales, Forecasting,  ]]

>> Noun Phrases are: 
[Sales Forecasting]

>> Named Entities are: 
[] 


================================ Paragraph 77 =================================

Adaptive learning: An ability to learn how to  do tasks based on the data given for  training or initial experience.   Self-Organization: An ANN can create its  own organization or representation of the  information it receives during learning time.   Real Time Operation: ANN computations  may be carried out in parallel, and special  hardware devices are being designed and  manufactured which take advantage of this  capability.   Fault Tolerance via Redundant Information  Coding: Partial destruction of a network  leads to the corresponding degradation of  performance. However, some network  capabilities may be retained even with  major network damage.     

------------------- Sentence 1 -------------------

Adaptive learning: An ability to learn how to  do tasks based on the data given for  training or initial experience. 


>> Tokens are: 
[Adaptive, learning, :, ability, learn,  , tasks, based, data, given,  , training, initial, experience, .] 

>> PoS Tags are: 
[('Adaptive', 'ADJ'), ('learning', 'NOUN'), (':', 'PUNCT'), ('ability', 'NOUN'), ('learn', 'VERB'), (' ', 'SPACE'), ('tasks', 'NOUN'), ('based', 'VERB'), ('data', 'NOUN'), ('given', 'VERB'), (' ', 'SPACE'), ('training', 'NOUN'), ('initial', 'ADJ'), ('experience', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Adaptive', 'compound'), ('learning', 'ROOT'), (':', 'punct'), ('ability', 'appos'), ('learn', 'acl'), (' ', 'pobj'), ('tasks', 'dobj'), ('based', 'acl'), ('data', 'pobj'), ('given', 'acl'), (' ', 'compound'), ('training', 'pobj'), ('initial', 'amod'), ('experience', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[Adaptive, learning], [learning, :], [:, ability], [ability, learn], [learn,  ], [ , tasks], [tasks, based], [based, data], [data, given], [given,  ], [ , training], [training, initial], [initial, experience], [experience, .]]

>> Trigrams: 
[[Adaptive, learning, :], [learning, :, ability], [:, ability, learn], [ability, learn,  ], [learn,  , tasks], [ , tasks, based], [tasks, based, data], [based, data, given], [data, given,  ], [given,  , training], [ , training, initial], [training, initial, experience], [initial, experience, .]]

>> Noun Phrases are: 
[Adaptive learning, An ability, tasks, the data,  training, initial experience]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

  Self-Organization: An ANN can create its  own organization or representation of the  information it receives during learning time. 


>> Tokens are: 
[  , Self, -, Organization, :, ANN, create,  , organization, representation,  , information, receives, learning, time, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('Self', 'PROPN'), ('-', 'PUNCT'), ('Organization', 'PROPN'), (':', 'PUNCT'), ('ANN', 'PROPN'), ('create', 'VERB'), (' ', 'SPACE'), ('organization', 'NOUN'), ('representation', 'NOUN'), (' ', 'SPACE'), ('information', 'NOUN'), ('receives', 'VERB'), ('learning', 'VERB'), ('time', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'compound'), ('Self', 'compound'), ('-', 'punct'), ('Organization', 'dep'), (':', 'punct'), ('ANN', 'nsubj'), ('create', 'ROOT'), (' ', 'nmod'), ('organization', 'dobj'), ('representation', 'conj'), (' ', 'compound'), ('information', 'pobj'), ('receives', 'relcl'), ('learning', 'pcomp'), ('time', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[  , Self], [Self, -], [-, Organization], [Organization, :], [:, ANN], [ANN, create], [create,  ], [ , organization], [organization, representation], [representation,  ], [ , information], [information, receives], [receives, learning], [learning, time], [time, .]]

>> Trigrams: 
[[  , Self, -], [Self, -, Organization], [-, Organization, :], [Organization, :, ANN], [:, ANN, create], [ANN, create,  ], [create,  , organization], [ , organization, representation], [organization, representation,  ], [representation,  , information], [ , information, receives], [information, receives, learning], [receives, learning, time], [learning, time, .]]

>> Noun Phrases are: 
[An ANN, its  own organization, representation, the  information, it, time]

>> Named Entities are: 
[('Self-Organization', 'ORG')] 

------------------- Sentence 3 -------------------

  Real Time Operation: ANN computations  may be carried out in parallel, and special  hardware devices are being designed and  manufactured which take advantage of this  capability. 


>> Tokens are: 
[  , Real, Time, Operation, :, ANN, computations,  , carried, parallel, ,, special,  , hardware, devices, designed,  , manufactured, advantage,  , capability, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('Real', 'PROPN'), ('Time', 'PROPN'), ('Operation', 'PROPN'), (':', 'PUNCT'), ('ANN', 'PROPN'), ('computations', 'NOUN'), (' ', 'SPACE'), ('carried', 'VERB'), ('parallel', 'NOUN'), (',', 'PUNCT'), ('special', 'ADJ'), (' ', 'SPACE'), ('hardware', 'NOUN'), ('devices', 'NOUN'), ('designed', 'VERB'), (' ', 'SPACE'), ('manufactured', 'VERB'), ('advantage', 'NOUN'), (' ', 'SPACE'), ('capability', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'nmod'), ('Real', 'compound'), ('Time', 'compound'), ('Operation', 'nsubjpass'), (':', 'punct'), ('ANN', 'compound'), ('computations', 'appos'), (' ', 'nsubjpass'), ('carried', 'relcl'), ('parallel', 'pobj'), (',', 'punct'), ('special', 'amod'), (' ', 'compound'), ('hardware', 'compound'), ('devices', 'conj'), ('designed', 'ROOT'), (' ', 'nsubj'), ('manufactured', 'conj'), ('advantage', 'dobj'), (' ', 'compound'), ('capability', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[  , Real], [Real, Time], [Time, Operation], [Operation, :], [:, ANN], [ANN, computations], [computations,  ], [ , carried], [carried, parallel], [parallel, ,], [,, special], [special,  ], [ , hardware], [hardware, devices], [devices, designed], [designed,  ], [ , manufactured], [manufactured, advantage], [advantage,  ], [ , capability], [capability, .]]

>> Trigrams: 
[[  , Real, Time], [Real, Time, Operation], [Time, Operation, :], [Operation, :, ANN], [:, ANN, computations], [ANN, computations,  ], [computations,  , carried], [ , carried, parallel], [carried, parallel, ,], [parallel, ,, special], [,, special,  ], [special,  , hardware], [ , hardware, devices], [hardware, devices, designed], [devices, designed,  ], [designed,  , manufactured], [ , manufactured, advantage], [manufactured, advantage,  ], [advantage,  , capability], [ , capability, .]]

>> Noun Phrases are: 
[  Real Time Operation, ANN computations, parallel, special  hardware devices, advantage, this  capability]

>> Named Entities are: 
[('Real Time Operation', 'EVENT')] 

------------------- Sentence 4 -------------------

  Fault Tolerance via Redundant Information   


>> Tokens are: 
[  , Fault, Tolerance, Redundant, Information,  ] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('Fault', 'PROPN'), ('Tolerance', 'NOUN'), ('Redundant', 'PROPN'), ('Information', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'compound'), ('Fault', 'compound'), ('Tolerance', 'ROOT'), ('Redundant', 'compound'), ('Information', 'pobj'), (' ', 'punct')]

>> Bigrams: 
[[  , Fault], [Fault, Tolerance], [Tolerance, Redundant], [Redundant, Information], [Information,  ]]

>> Trigrams: 
[[  , Fault, Tolerance], [Fault, Tolerance, Redundant], [Tolerance, Redundant, Information], [Redundant, Information,  ]]

>> Noun Phrases are: 
[  Fault Tolerance, Redundant Information]

>> Named Entities are: 
[('Fault Tolerance', 'ORG')] 

------------------- Sentence 5 -------------------

Coding: Partial destruction of a network  leads to the corresponding degradation of  performance. 


>> Tokens are: 
[Coding, :, Partial, destruction, network,  , leads, corresponding, degradation,  , performance, .] 

>> PoS Tags are: 
[('Coding', 'NOUN'), (':', 'PUNCT'), ('Partial', 'ADJ'), ('destruction', 'NOUN'), ('network', 'NOUN'), (' ', 'SPACE'), ('leads', 'VERB'), ('corresponding', 'VERB'), ('degradation', 'NOUN'), (' ', 'SPACE'), ('performance', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Coding', 'nsubj'), (':', 'punct'), ('Partial', 'amod'), ('destruction', 'appos'), ('network', 'pobj'), (' ', 'nummod'), ('leads', 'ROOT'), ('corresponding', 'amod'), ('degradation', 'pobj'), (' ', 'compound'), ('performance', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Coding, :], [:, Partial], [Partial, destruction], [destruction, network], [network,  ], [ , leads], [leads, corresponding], [corresponding, degradation], [degradation,  ], [ , performance], [performance, .]]

>> Trigrams: 
[[Coding, :, Partial], [:, Partial, destruction], [Partial, destruction, network], [destruction, network,  ], [network,  , leads], [ , leads, corresponding], [leads, corresponding, degradation], [corresponding, degradation,  ], [degradation,  , performance], [ , performance, .]]

>> Noun Phrases are: 
[Coding, Partial destruction, a network, the corresponding degradation,  performance]

>> Named Entities are: 
[] 

------------------- Sentence 6 -------------------

However, some network  capabilities may be retained even with  major network damage. 


>> Tokens are: 
[,, network,  , capabilities, retained,  , major, network, damage, .] 

>> PoS Tags are: 
[(',', 'PUNCT'), ('network', 'NOUN'), (' ', 'SPACE'), ('capabilities', 'NOUN'), ('retained', 'VERB'), (' ', 'SPACE'), ('major', 'ADJ'), ('network', 'NOUN'), ('damage', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(',', 'punct'), ('network', 'nmod'), (' ', 'appos'), ('capabilities', 'nsubjpass'), ('retained', 'ROOT'), (' ', 'nmod'), ('major', 'amod'), ('network', 'compound'), ('damage', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[,, network], [network,  ], [ , capabilities], [capabilities, retained], [retained,  ], [ , major], [major, network], [network, damage], [damage, .]]

>> Trigrams: 
[[,, network,  ], [network,  , capabilities], [ , capabilities, retained], [capabilities, retained,  ], [retained,  , major], [ , major, network], [major, network, damage], [network, damage, .]]

>> Noun Phrases are: 
[some network  capabilities,  major network damage]

>> Named Entities are: 
[] 

------------------- Sentence 7 -------------------

     


>> Tokens are: 
[    ] 

>> PoS Tags are: 
[('    ', 'SPACE')] 

>> Dependency Tags are: 
[('    ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 78 =================================

Minimizing over fitting requires a  great deal of computational effort.  The individual relations between  the input variables and the output  variables are not developed by  engineering judgment so that the  model tends to be a black box or  input/output table without  analytical basis.  The sample size has to be large.    

------------------- Sentence 1 -------------------

Minimizing over fitting requires a  great deal of computational effort. 


>> Tokens are: 
[Minimizing, fitting, requires,  , great, deal, computational, effort, .] 

>> PoS Tags are: 
[('Minimizing', 'VERB'), ('fitting', 'NOUN'), ('requires', 'VERB'), (' ', 'SPACE'), ('great', 'ADJ'), ('deal', 'NOUN'), ('computational', 'ADJ'), ('effort', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Minimizing', 'csubj'), ('fitting', 'pobj'), ('requires', 'ROOT'), (' ', 'nmod'), ('great', 'amod'), ('deal', 'dobj'), ('computational', 'amod'), ('effort', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Minimizing, fitting], [fitting, requires], [requires,  ], [ , great], [great, deal], [deal, computational], [computational, effort], [effort, .]]

>> Trigrams: 
[[Minimizing, fitting, requires], [fitting, requires,  ], [requires,  , great], [ , great, deal], [great, deal, computational], [deal, computational, effort], [computational, effort, .]]

>> Noun Phrases are: 
[fitting, a  great deal, computational effort]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

The individual relations between  the input variables and the output  variables are not developed by  engineering judgment so that the  model tends to be a black box or  input/output table without  analytical basis. 


>> Tokens are: 
[individual, relations,  , input, variables, output,  , variables, developed,  , engineering, judgment,  , model, tends, black, box,  , input, /, output, table,  , analytical, basis, .] 

>> PoS Tags are: 
[('individual', 'ADJ'), ('relations', 'NOUN'), (' ', 'SPACE'), ('input', 'NOUN'), ('variables', 'NOUN'), ('output', 'NOUN'), (' ', 'SPACE'), ('variables', 'NOUN'), ('developed', 'VERB'), (' ', 'SPACE'), ('engineering', 'NOUN'), ('judgment', 'NOUN'), (' ', 'SPACE'), ('model', 'NOUN'), ('tends', 'VERB'), ('black', 'ADJ'), ('box', 'NOUN'), (' ', 'SPACE'), ('input', 'NOUN'), ('/', 'SYM'), ('output', 'NOUN'), ('table', 'NOUN'), (' ', 'SPACE'), ('analytical', 'ADJ'), ('basis', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('individual', 'amod'), ('relations', 'nsubjpass'), (' ', 'pobj'), ('input', 'compound'), ('variables', 'pobj'), ('output', 'compound'), (' ', 'compound'), ('variables', 'conj'), ('developed', 'ROOT'), (' ', 'nmod'), ('engineering', 'compound'), ('judgment', 'pobj'), (' ', 'compound'), ('model', 'nsubj'), ('tends', 'advcl'), ('black', 'amod'), ('box', 'attr'), (' ', 'conj'), ('input', 'nmod'), ('/', 'punct'), ('output', 'compound'), ('table', 'attr'), (' ', 'nmod'), ('analytical', 'amod'), ('basis', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[individual, relations], [relations,  ], [ , input], [input, variables], [variables, output], [output,  ], [ , variables], [variables, developed], [developed,  ], [ , engineering], [engineering, judgment], [judgment,  ], [ , model], [model, tends], [tends, black], [black, box], [box,  ], [ , input], [input, /], [/, output], [output, table], [table,  ], [ , analytical], [analytical, basis], [basis, .]]

>> Trigrams: 
[[individual, relations,  ], [relations,  , input], [ , input, variables], [input, variables, output], [variables, output,  ], [output,  , variables], [ , variables, developed], [variables, developed,  ], [developed,  , engineering], [ , engineering, judgment], [engineering, judgment,  ], [judgment,  , model], [ , model, tends], [model, tends, black], [tends, black, box], [black, box,  ], [box,  , input], [ , input, /], [input, /, output], [/, output, table], [output, table,  ], [table,  , analytical], [ , analytical, basis], [analytical, basis, .]]

>> Noun Phrases are: 
[The individual relations, the input variables, the output  variables,  engineering judgment, the  model, a black box, input/output table,  analytical basis]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 5 -------------------

The sample size has to be large. 


>> Tokens are: 
[sample, size, large, .] 

>> PoS Tags are: 
[('sample', 'NOUN'), ('size', 'NOUN'), ('large', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('sample', 'compound'), ('size', 'nsubj'), ('large', 'acomp'), ('.', 'punct')]

>> Bigrams: 
[[sample, size], [size, large], [large, .]]

>> Trigrams: 
[[sample, size, large], [size, large, .]]

>> Noun Phrases are: 
[The sample size]

>> Named Entities are: 
[] 

------------------- Sentence 6 -------------------

    


>> Tokens are: 
[   ] 

>> PoS Tags are: 
[('   ', 'SPACE')] 

>> Dependency Tags are: 
[('   ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 79 =================================

Case Based Reasoning  (CBR)  

------------------- Sentence 1 -------------------

Case Based Reasoning  (CBR)   


>> Tokens are: 
[Case, Based, Reasoning,  , (, CBR, ),  ] 

>> PoS Tags are: 
[('Case', 'NOUN'), ('Based', 'VERB'), ('Reasoning', 'NOUN'), (' ', 'SPACE'), ('(', 'PUNCT'), ('CBR', 'PROPN'), (')', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Case', 'ROOT'), ('Based', 'acl'), ('Reasoning', 'appos'), (' ', 'nummod'), ('(', 'punct'), ('CBR', 'appos'), (')', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[Case, Based], [Based, Reasoning], [Reasoning,  ], [ , (], [(, CBR], [CBR, )], [),  ]]

>> Trigrams: 
[[Case, Based, Reasoning], [Based, Reasoning,  ], [Reasoning,  , (], [ , (, CBR], [(, CBR, )], [CBR, ),  ]]

>> Noun Phrases are: 
[Case, Reasoning, (CBR]

>> Named Entities are: 
[] 


================================ Paragraph 80 =================================

Help-Desk Systems  Software Effort Estimation  Classification and Prediction  Knowledge Based Decision  systems.  

------------------- Sentence 1 -------------------

Help-Desk Systems  Software Effort Estimation  Classification and Prediction  Knowledge Based Decision  systems. 


>> Tokens are: 
[Help, -, Desk, Systems,  , Software, Effort, Estimation,  , Classification, Prediction,  , Knowledge, Based, Decision,  , systems, .] 

>> PoS Tags are: 
[('Help', 'PROPN'), ('-', 'PUNCT'), ('Desk', 'PROPN'), ('Systems', 'PROPN'), (' ', 'SPACE'), ('Software', 'PROPN'), ('Effort', 'PROPN'), ('Estimation', 'PROPN'), (' ', 'SPACE'), ('Classification', 'PROPN'), ('Prediction', 'PROPN'), (' ', 'SPACE'), ('Knowledge', 'PROPN'), ('Based', 'VERB'), ('Decision', 'NOUN'), (' ', 'SPACE'), ('systems', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Help', 'nmod'), ('-', 'punct'), ('Desk', 'nmod'), ('Systems', 'compound'), (' ', 'compound'), ('Software', 'compound'), ('Effort', 'compound'), ('Estimation', 'ROOT'), (' ', 'appos'), ('Classification', 'conj'), ('Prediction', 'conj'), (' ', 'nmod'), ('Knowledge', 'compound'), ('Based', 'compound'), ('Decision', 'compound'), (' ', 'compound'), ('systems', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[Help, -], [-, Desk], [Desk, Systems], [Systems,  ], [ , Software], [Software, Effort], [Effort, Estimation], [Estimation,  ], [ , Classification], [Classification, Prediction], [Prediction,  ], [ , Knowledge], [Knowledge, Based], [Based, Decision], [Decision,  ], [ , systems], [systems, .]]

>> Trigrams: 
[[Help, -, Desk], [-, Desk, Systems], [Desk, Systems,  ], [Systems,  , Software], [ , Software, Effort], [Software, Effort, Estimation], [Effort, Estimation,  ], [Estimation,  , Classification], [ , Classification, Prediction], [Classification, Prediction,  ], [Prediction,  , Knowledge], [ , Knowledge, Based], [Knowledge, Based, Decision], [Based, Decision,  ], [Decision,  , systems], [ , systems, .]]

>> Noun Phrases are: 
[Help-Desk Systems  Software Effort Estimation, Classification, Prediction,  Knowledge Based Decision  systems]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 81 =================================

No Expert is Required  The CBR Process is more akin to human  thinking.  CBR can handle failed cases (i.e.- those  cases for which accurate prediction cannot  be made)  No extensive maintenance is required.  

------------------- Sentence 1 -------------------

No Expert is Required   


>> Tokens are: 
[Expert, Required,  ] 

>> PoS Tags are: 
[('Expert', 'NOUN'), ('Required', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Expert', 'nsubj'), ('Required', 'acomp'), (' ', 'punct')]

>> Bigrams: 
[[Expert, Required], [Required,  ]]

>> Trigrams: 
[[Expert, Required,  ]]

>> Noun Phrases are: 
[No Expert]

>> Named Entities are: 
[('Expert', 'PERSON')] 

------------------- Sentence 2 -------------------

The CBR Process is more akin to human  thinking. 


>> Tokens are: 
[CBR, Process, akin, human,  , thinking, .] 

>> PoS Tags are: 
[('CBR', 'PROPN'), ('Process', 'PROPN'), ('akin', 'ADJ'), ('human', 'ADJ'), (' ', 'SPACE'), ('thinking', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('CBR', 'compound'), ('Process', 'nsubj'), ('akin', 'acomp'), ('human', 'amod'), (' ', 'compound'), ('thinking', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[CBR, Process], [Process, akin], [akin, human], [human,  ], [ , thinking], [thinking, .]]

>> Trigrams: 
[[CBR, Process, akin], [Process, akin, human], [akin, human,  ], [human,  , thinking], [ , thinking, .]]

>> Noun Phrases are: 
[The CBR Process, human  thinking]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

CBR can handle failed cases (i.e.- those  cases for which accurate prediction cannot  be made)   


>> Tokens are: 
[CBR, handle, failed, cases, (, i.e.-,  , cases, accurate, prediction,  , ),  ] 

>> PoS Tags are: 
[('CBR', 'PROPN'), ('handle', 'VERB'), ('failed', 'VERB'), ('cases', 'NOUN'), ('(', 'PUNCT'), ('i.e.-', 'VERB'), (' ', 'SPACE'), ('cases', 'NOUN'), ('accurate', 'ADJ'), ('prediction', 'NOUN'), (' ', 'SPACE'), (')', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('CBR', 'nsubj'), ('handle', 'ROOT'), ('failed', 'amod'), ('cases', 'dobj'), ('(', 'punct'), ('i.e.-', 'parataxis'), (' ', 'dative'), ('cases', 'dobj'), ('accurate', 'amod'), ('prediction', 'nsubjpass'), (' ', 'nsubjpass'), (')', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[CBR, handle], [handle, failed], [failed, cases], [cases, (], [(, i.e.-], [i.e.-,  ], [ , cases], [cases, accurate], [accurate, prediction], [prediction,  ], [ , )], [),  ]]

>> Trigrams: 
[[CBR, handle, failed], [handle, failed, cases], [failed, cases, (], [cases, (, i.e.-], [(, i.e.-,  ], [i.e.-,  , cases], [ , cases, accurate], [cases, accurate, prediction], [accurate, prediction,  ], [prediction,  , )], [ , ),  ]]

>> Noun Phrases are: 
[CBR, failed cases, cases, accurate prediction]

>> Named Entities are: 
[('CBR', 'ORG')] 

------------------- Sentence 5 -------------------

No extensive maintenance is required. 


>> Tokens are: 
[extensive, maintenance, required, .] 

>> PoS Tags are: 
[('extensive', 'ADJ'), ('maintenance', 'NOUN'), ('required', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('extensive', 'amod'), ('maintenance', 'nsubjpass'), ('required', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[extensive, maintenance], [maintenance, required], [required, .]]

>> Trigrams: 
[[extensive, maintenance, required], [maintenance, required, .]]

>> Noun Phrases are: 
[No extensive maintenance]

>> Named Entities are: 
[] 

------------------- Sentence 6 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 82 =================================

Case data can be hard to gather.  Predictions are limited to the  cases that have been observed.  

------------------- Sentence 1 -------------------

Case data can be hard to gather. 


>> Tokens are: 
[Case, data, hard, gather, .] 

>> PoS Tags are: 
[('Case', 'NOUN'), ('data', 'NOUN'), ('hard', 'ADJ'), ('gather', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Case', 'compound'), ('data', 'nsubj'), ('hard', 'acomp'), ('gather', 'xcomp'), ('.', 'punct')]

>> Bigrams: 
[[Case, data], [data, hard], [hard, gather], [gather, .]]

>> Trigrams: 
[[Case, data, hard], [data, hard, gather], [hard, gather, .]]

>> Noun Phrases are: 
[Case data]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

Predictions are limited to the  cases that have been observed. 


>> Tokens are: 
[Predictions, limited,  , cases, observed, .] 

>> PoS Tags are: 
[('Predictions', 'NOUN'), ('limited', 'VERB'), (' ', 'SPACE'), ('cases', 'NOUN'), ('observed', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Predictions', 'nsubjpass'), ('limited', 'ROOT'), (' ', 'compound'), ('cases', 'pobj'), ('observed', 'relcl'), ('.', 'punct')]

>> Bigrams: 
[[Predictions, limited], [limited,  ], [ , cases], [cases, observed], [observed, .]]

>> Trigrams: 
[[Predictions, limited,  ], [limited,  , cases], [ , cases, observed], [cases, observed, .]]

>> Noun Phrases are: 
[Predictions, the  cases]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 83 =================================

Classification and  Regression Trees (CART)  

------------------- Sentence 1 -------------------

Classification and  Regression Trees (CART) 


>> Tokens are: 
[Classification,  , Regression, Trees, (, CART, )] 

>> PoS Tags are: 
[('Classification', 'NOUN'), (' ', 'SPACE'), ('Regression', 'NOUN'), ('Trees', 'PROPN'), ('(', 'PUNCT'), ('CART', 'PROPN'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('Classification', 'ROOT'), (' ', 'conj'), ('Regression', 'compound'), ('Trees', 'appos'), ('(', 'punct'), ('CART', 'appos'), (')', 'punct')]

>> Bigrams: 
[[Classification,  ], [ , Regression], [Regression, Trees], [Trees, (], [(, CART], [CART, )]]

>> Trigrams: 
[[Classification,  , Regression], [ , Regression, Trees], [Regression, Trees, (], [Trees, (, CART], [(, CART, )]]

>> Noun Phrases are: 
[Classification, Regression Trees, CART]

>> Named Entities are: 
[('Classification', 'ORG')] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 84 =================================

Financial applications like  Customer Relationship  Management (CRM)  

------------------- Sentence 1 -------------------

Financial applications like  Customer Relationship  Management (CRM)   


>> Tokens are: 
[Financial, applications, like,  , Customer, Relationship,  , Management, (, CRM, ),  ] 

>> PoS Tags are: 
[('Financial', 'ADJ'), ('applications', 'NOUN'), ('like', 'ADP'), (' ', 'SPACE'), ('Customer', 'PROPN'), ('Relationship', 'PROPN'), (' ', 'SPACE'), ('Management', 'PROPN'), ('(', 'PUNCT'), ('CRM', 'PROPN'), (')', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Financial', 'amod'), ('applications', 'ROOT'), ('like', 'prep'), (' ', 'pobj'), ('Customer', 'compound'), ('Relationship', 'appos'), (' ', 'compound'), ('Management', 'appos'), ('(', 'punct'), ('CRM', 'appos'), (')', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[Financial, applications], [applications, like], [like,  ], [ , Customer], [Customer, Relationship], [Relationship,  ], [ , Management], [Management, (], [(, CRM], [CRM, )], [),  ]]

>> Trigrams: 
[[Financial, applications, like], [applications, like,  ], [like,  , Customer], [ , Customer, Relationship], [Customer, Relationship,  ], [Relationship,  , Management], [ , Management, (], [Management, (, CRM], [(, CRM, )], [CRM, ),  ]]

>> Noun Phrases are: 
[Financial applications, Customer Relationship,  Management, (CRM]

>> Named Entities are: 
[] 


================================ Paragraph 85 =================================

It is inherently non-parametric in other  words no assumptions are made regarding  the underlying distribution of values of the  

------------------- Sentence 1 -------------------

It is inherently non-parametric in other  words no assumptions are made regarding   


>> Tokens are: 
[inherently, non, -, parametric,  , words, assumptions,  ] 

>> PoS Tags are: 
[('inherently', 'ADV'), ('non', 'ADJ'), ('-', 'ADJ'), ('parametric', 'ADJ'), (' ', 'SPACE'), ('words', 'NOUN'), ('assumptions', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('inherently', 'advmod'), ('non', 'acomp'), ('-', 'acomp'), ('parametric', 'acomp'), (' ', 'compound'), ('words', 'pobj'), ('assumptions', 'nsubjpass'), (' ', 'pobj')]

>> Bigrams: 
[[inherently, non], [non, -], [-, parametric], [parametric,  ], [ , words], [words, assumptions], [assumptions,  ]]

>> Trigrams: 
[[inherently, non, -], [non, -, parametric], [-, parametric,  ], [parametric,  , words], [ , words, assumptions], [words, assumptions,  ]]

>> Noun Phrases are: 
[It, other  words, no assumptions]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

the underlying distribution of values of the   


>> Tokens are: 
[underlying, distribution, values,  ] 

>> PoS Tags are: 
[('underlying', 'ADJ'), ('distribution', 'NOUN'), ('values', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('underlying', 'amod'), ('distribution', 'ROOT'), ('values', 'pobj'), (' ', 'pobj')]

>> Bigrams: 
[[underlying, distribution], [distribution, values], [values,  ]]

>> Trigrams: 
[[underlying, distribution, values], [distribution, values,  ]]

>> Noun Phrases are: 
[the underlying distribution, values]

>> Named Entities are: 
[] 


================================ Paragraph 86 =================================

Relatively new and somewhat  unknown.  Since CART is a new technique it is 

------------------- Sentence 1 -------------------

Relatively new and somewhat  unknown.   


>> Tokens are: 
[Relatively, new, somewhat,  , unknown, .,  ] 

>> PoS Tags are: 
[('Relatively', 'ADV'), ('new', 'ADJ'), ('somewhat', 'ADV'), (' ', 'SPACE'), ('unknown', 'ADJ'), ('.', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Relatively', 'advmod'), ('new', 'amod'), ('somewhat', 'advmod'), (' ', 'conj'), ('unknown', 'amod'), ('.', 'punct'), (' ', 'ROOT')]

>> Bigrams: 
[[Relatively, new], [new, somewhat], [somewhat,  ], [ , unknown], [unknown, .], [.,  ]]

>> Trigrams: 
[[Relatively, new, somewhat], [new, somewhat,  ], [somewhat,  , unknown], [ , unknown, .], [unknown, .,  ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Since CART is a new technique 


>> Tokens are: 
[CART, new, technique] 

>> PoS Tags are: 
[('CART', 'PROPN'), ('new', 'ADJ'), ('technique', 'NOUN')] 

>> Dependency Tags are: 
[('CART', 'nsubj'), ('new', 'amod'), ('technique', 'attr')]

>> Bigrams: 
[[CART, new], [new, technique]]

>> Trigrams: 
[[CART, new, technique]]

>> Noun Phrases are: 
[CART, a new technique]

>> Named Entities are: 
[('CART', 'ORG')] 

------------------- Sentence 3 -------------------

it is 


>> Tokens are: 
[] 

>> PoS Tags are: 
[] 

>> Dependency Tags are: 
[]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[it]

>> Named Entities are: 
[] 


================================ Paragraph 87 =================================

Yogesh Singh, Pradeep Kumar Bhatia & Omprakash Sangwan  

------------------- Sentence 1 -------------------

Yogesh Singh, Pradeep Kumar Bhatia & Omprakash Sangwan   


>> Tokens are: 
[Yogesh, Singh, ,, Pradeep, Kumar, Bhatia, &, Omprakash, Sangwan,  ] 

>> PoS Tags are: 
[('Yogesh', 'PROPN'), ('Singh', 'PROPN'), (',', 'PUNCT'), ('Pradeep', 'PROPN'), ('Kumar', 'PROPN'), ('Bhatia', 'PROPN'), ('&', 'CCONJ'), ('Omprakash', 'PROPN'), ('Sangwan', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Yogesh', 'compound'), ('Singh', 'ROOT'), (',', 'punct'), ('Pradeep', 'compound'), ('Kumar', 'compound'), ('Bhatia', 'conj'), ('&', 'cc'), ('Omprakash', 'compound'), ('Sangwan', 'conj'), (' ', 'punct')]

>> Bigrams: 
[[Yogesh, Singh], [Singh, ,], [,, Pradeep], [Pradeep, Kumar], [Kumar, Bhatia], [Bhatia, &], [&, Omprakash], [Omprakash, Sangwan], [Sangwan,  ]]

>> Trigrams: 
[[Yogesh, Singh, ,], [Singh, ,, Pradeep], [,, Pradeep, Kumar], [Pradeep, Kumar, Bhatia], [Kumar, Bhatia, &], [Bhatia, &, Omprakash], [&, Omprakash, Sangwan], [Omprakash, Sangwan,  ]]

>> Noun Phrases are: 
[Yogesh Singh, Pradeep Kumar Bhatia, Omprakash Sangwan]

>> Named Entities are: 
[('Yogesh Singh', 'PERSON'), ('Kumar Bhatia & Omprakash Sangwan', 'ORG')] 


================================ Paragraph 88 =================================

International Journal of Computer Science and Security, Volume (1) : Issue (1) 82  

------------------- Sentence 1 -------------------

International Journal of Computer Science and Security, Volume (1) : Issue (1) 82   


>> Tokens are: 
[International, Journal, Computer, Science, Security, ,, Volume, (, 1, ), :, Issue, (, 1, ), 82,  ] 

>> PoS Tags are: 
[('International', 'PROPN'), ('Journal', 'PROPN'), ('Computer', 'PROPN'), ('Science', 'PROPN'), ('Security', 'PROPN'), (',', 'PUNCT'), ('Volume', 'NOUN'), ('(', 'PUNCT'), ('1', 'NUM'), (')', 'PUNCT'), (':', 'PUNCT'), ('Issue', 'NOUN'), ('(', 'PUNCT'), ('1', 'NUM'), (')', 'PUNCT'), ('82', 'NUM'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('International', 'compound'), ('Journal', 'ROOT'), ('Computer', 'compound'), ('Science', 'pobj'), ('Security', 'conj'), (',', 'punct'), ('Volume', 'appos'), ('(', 'punct'), ('1', 'appos'), (')', 'punct'), (':', 'punct'), ('Issue', 'appos'), ('(', 'punct'), ('1', 'appos'), (')', 'punct'), ('82', 'nummod'), (' ', 'appos')]

>> Bigrams: 
[[International, Journal], [Journal, Computer], [Computer, Science], [Science, Security], [Security, ,], [,, Volume], [Volume, (], [(, 1], [1, )], [), :], [:, Issue], [Issue, (], [(, 1], [1, )], [), 82], [82,  ]]

>> Trigrams: 
[[International, Journal, Computer], [Journal, Computer, Science], [Computer, Science, Security], [Science, Security, ,], [Security, ,, Volume], [,, Volume, (], [Volume, (, 1], [(, 1, )], [1, ), :], [), :, Issue], [:, Issue, (], [Issue, (, 1], [(, 1, )], [1, ), 82], [), 82,  ]]

>> Noun Phrases are: 
[International Journal, Computer Science, Security, Volume, Issue]

>> Named Entities are: 
[('International Journal of Computer Science and Security, Volume', 'ORG'), ('1', 'CARDINAL')] 


================================ Paragraph 89 =================================

Effort Prediction (used in models  like COCOMO)   

------------------- Sentence 1 -------------------

Effort Prediction (used in models  like COCOMO)    


>> Tokens are: 
[Effort, Prediction, (, models,  , like, COCOMO, ),   ] 

>> PoS Tags are: 
[('Effort', 'NOUN'), ('Prediction', 'NOUN'), ('(', 'PUNCT'), ('models', 'NOUN'), (' ', 'SPACE'), ('like', 'ADP'), ('COCOMO', 'PROPN'), (')', 'PUNCT'), ('  ', 'SPACE')] 

>> Dependency Tags are: 
[('Effort', 'compound'), ('Prediction', 'ROOT'), ('(', 'punct'), ('models', 'pobj'), (' ', 'nummod'), ('like', 'prep'), ('COCOMO', 'pobj'), (')', 'punct'), ('  ', 'punct')]

>> Bigrams: 
[[Effort, Prediction], [Prediction, (], [(, models], [models,  ], [ , like], [like, COCOMO], [COCOMO, )], [),   ]]

>> Trigrams: 
[[Effort, Prediction, (], [Prediction, (, models], [(, models,  ], [models,  , like], [ , like, COCOMO], [like, COCOMO, )], [COCOMO, ),   ]]

>> Noun Phrases are: 
[Effort Prediction, models, COCOMO]

>> Named Entities are: 
[] 


================================ Paragraph 90 =================================

predictor variables.  CART identifies splitting variables based on  an exhaustive search of all possibilities.  It has methods for dealing with missing  variables.  It is a relatively automatic machine learning  technique.  CART trees are easy to interpret even for  non-statisticians.  

------------------- Sentence 1 -------------------

predictor variables. 


>> Tokens are: 
[predictor, variables, .] 

>> PoS Tags are: 
[('predictor', 'NOUN'), ('variables', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('predictor', 'compound'), ('variables', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[predictor, variables], [variables, .]]

>> Trigrams: 
[[predictor, variables, .]]

>> Noun Phrases are: 
[predictor variables]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

 CART identifies splitting variables based on  an exhaustive search of all possibilities. 


>> Tokens are: 
[ , CART, identifies, splitting, variables, based,  , exhaustive, search, possibilities, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('CART', 'NOUN'), ('identifies', 'VERB'), ('splitting', 'NOUN'), ('variables', 'NOUN'), ('based', 'VERB'), (' ', 'SPACE'), ('exhaustive', 'ADJ'), ('search', 'NOUN'), ('possibilities', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'dep'), ('CART', 'compound'), ('identifies', 'ROOT'), ('splitting', 'compound'), ('variables', 'dobj'), ('based', 'acl'), (' ', 'pobj'), ('exhaustive', 'amod'), ('search', 'dobj'), ('possibilities', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[ , CART], [CART, identifies], [identifies, splitting], [splitting, variables], [variables, based], [based,  ], [ , exhaustive], [exhaustive, search], [search, possibilities], [possibilities, .]]

>> Trigrams: 
[[ , CART, identifies], [CART, identifies, splitting], [identifies, splitting, variables], [splitting, variables, based], [variables, based,  ], [based,  , exhaustive], [ , exhaustive, search], [exhaustive, search, possibilities], [search, possibilities, .]]

>> Noun Phrases are: 
[splitting variables, an exhaustive search, all possibilities]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

It has methods for dealing with missing  variables. 


>> Tokens are: 
[methods, dealing, missing,  , variables, .] 

>> PoS Tags are: 
[('methods', 'NOUN'), ('dealing', 'VERB'), ('missing', 'VERB'), (' ', 'SPACE'), ('variables', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('methods', 'dobj'), ('dealing', 'pcomp'), ('missing', 'amod'), (' ', 'compound'), ('variables', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[methods, dealing], [dealing, missing], [missing,  ], [ , variables], [variables, .]]

>> Trigrams: 
[[methods, dealing, missing], [dealing, missing,  ], [missing,  , variables], [ , variables, .]]

>> Noun Phrases are: 
[It, methods, missing  variables]

>> Named Entities are: 
[] 

------------------- Sentence 5 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 6 -------------------

It is a relatively automatic machine learning  technique. 


>> Tokens are: 
[relatively, automatic, machine, learning,  , technique, .] 

>> PoS Tags are: 
[('relatively', 'ADV'), ('automatic', 'ADJ'), ('machine', 'NOUN'), ('learning', 'VERB'), (' ', 'SPACE'), ('technique', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('relatively', 'advmod'), ('automatic', 'amod'), ('machine', 'attr'), ('learning', 'acl'), (' ', 'dobj'), ('technique', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[relatively, automatic], [automatic, machine], [machine, learning], [learning,  ], [ , technique], [technique, .]]

>> Trigrams: 
[[relatively, automatic, machine], [automatic, machine, learning], [machine, learning,  ], [learning,  , technique], [ , technique, .]]

>> Noun Phrases are: 
[It, a relatively automatic machine, technique]

>> Named Entities are: 
[] 

------------------- Sentence 7 -------------------

 CART trees are easy to interpret even for  non-statisticians. 


>> Tokens are: 
[ , CART, trees, easy, interpret,  , non, -, statisticians, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('CART', 'NOUN'), ('trees', 'NOUN'), ('easy', 'ADJ'), ('interpret', 'VERB'), (' ', 'SPACE'), ('non', 'ADJ'), ('-', 'NOUN'), ('statisticians', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'det'), ('CART', 'compound'), ('trees', 'nsubj'), ('easy', 'acomp'), ('interpret', 'xcomp'), (' ', 'pobj'), ('non', 'dobj'), ('-', 'dobj'), ('statisticians', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[ , CART], [CART, trees], [trees, easy], [easy, interpret], [interpret,  ], [ , non], [non, -], [-, statisticians], [statisticians, .]]

>> Trigrams: 
[[ , CART, trees], [CART, trees, easy], [trees, easy, interpret], [easy, interpret,  ], [interpret,  , non], [ , non, -], [non, -, statisticians], [-, statisticians, .]]

>> Noun Phrases are: 
[ CART trees, -, statisticians]

>> Named Entities are: 
[('CART', 'ORG')] 

------------------- Sentence 8 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 91 =================================

difficult to find statisticians with  significant expertise in this  technique.  CART may have unstable decision  trees.  CART splits only by one variable.  

------------------- Sentence 1 -------------------

difficult to find statisticians with  significant expertise in this  technique. 


>> Tokens are: 
[difficult, find, statisticians,  , significant, expertise,  , technique, .] 

>> PoS Tags are: 
[('difficult', 'ADJ'), ('find', 'VERB'), ('statisticians', 'NOUN'), (' ', 'SPACE'), ('significant', 'ADJ'), ('expertise', 'NOUN'), (' ', 'SPACE'), ('technique', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('difficult', 'ROOT'), ('find', 'xcomp'), ('statisticians', 'dobj'), (' ', 'nmod'), ('significant', 'amod'), ('expertise', 'pobj'), (' ', 'compound'), ('technique', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[difficult, find], [find, statisticians], [statisticians,  ], [ , significant], [significant, expertise], [expertise,  ], [ , technique], [technique, .]]

>> Trigrams: 
[[difficult, find, statisticians], [find, statisticians,  ], [statisticians,  , significant], [ , significant, expertise], [significant, expertise,  ], [expertise,  , technique], [ , technique, .]]

>> Noun Phrases are: 
[statisticians,  significant expertise, this  technique]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

 CART may have unstable decision  trees. 


>> Tokens are: 
[ , CART, unstable, decision,  , trees, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('CART', 'NOUN'), ('unstable', 'ADJ'), ('decision', 'NOUN'), (' ', 'SPACE'), ('trees', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'compound'), ('CART', 'nsubj'), ('unstable', 'amod'), ('decision', 'dobj'), (' ', 'prep'), ('trees', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[ , CART], [CART, unstable], [unstable, decision], [decision,  ], [ , trees], [trees, .]]

>> Trigrams: 
[[ , CART, unstable], [CART, unstable, decision], [unstable, decision,  ], [decision,  , trees], [ , trees, .]]

>> Noun Phrases are: 
[ CART, unstable decision, trees]

>> Named Entities are: 
[('CART', 'ORG')] 

------------------- Sentence 3 -------------------

 CART splits only by one variable. 


>> Tokens are: 
[ , CART, splits, variable, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('CART', 'NOUN'), ('splits', 'VERB'), ('variable', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'det'), ('CART', 'nsubj'), ('splits', 'ROOT'), ('variable', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[ , CART], [CART, splits], [splits, variable], [variable, .]]

>> Trigrams: 
[[ , CART, splits], [CART, splits, variable], [splits, variable, .]]

>> Noun Phrases are: 
[ CART, one variable]

>> Named Entities are: 
[('CART', 'ORG'), ('one', 'CARDINAL')] 

------------------- Sentence 4 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 92 =================================

Rule Induction  Making Credit Decisions (in  various loan companies)  Diagnosis of Mechanical Devices  Classification of Celestial Objects  Preventing breakdowns in  transformers   

------------------- Sentence 1 -------------------

Rule Induction  Making Credit Decisions (in  various loan companies)   


>> Tokens are: 
[Rule, Induction,  , Making, Credit, Decisions, (,  , loan, companies, ),  ] 

>> PoS Tags are: 
[('Rule', 'VERB'), ('Induction', 'PROPN'), (' ', 'SPACE'), ('Making', 'VERB'), ('Credit', 'PROPN'), ('Decisions', 'PROPN'), ('(', 'PUNCT'), (' ', 'SPACE'), ('loan', 'NOUN'), ('companies', 'NOUN'), (')', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Rule', 'compound'), ('Induction', 'ROOT'), (' ', 'nummod'), ('Making', 'acl'), ('Credit', 'compound'), ('Decisions', 'dobj'), ('(', 'punct'), (' ', 'pcomp'), ('loan', 'compound'), ('companies', 'dobj'), (')', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[Rule, Induction], [Induction,  ], [ , Making], [Making, Credit], [Credit, Decisions], [Decisions, (], [(,  ], [ , loan], [loan, companies], [companies, )], [),  ]]

>> Trigrams: 
[[Rule, Induction,  ], [Induction,  , Making], [ , Making, Credit], [Making, Credit, Decisions], [Credit, Decisions, (], [Decisions, (,  ], [(,  , loan], [ , loan, companies], [loan, companies, )], [companies, ),  ]]

>> Noun Phrases are: 
[Rule Induction, Credit Decisions, (in  various loan companies]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Diagnosis of Mechanical Devices  Classification of Celestial Objects  Preventing breakdowns in  transformers    


>> Tokens are: 
[Diagnosis, Mechanical, Devices,  , Classification, Celestial, Objects,  , Preventing, breakdowns,  , transformers,   ] 

>> PoS Tags are: 
[('Diagnosis', 'NOUN'), ('Mechanical', 'PROPN'), ('Devices', 'PROPN'), (' ', 'SPACE'), ('Classification', 'PROPN'), ('Celestial', 'PROPN'), ('Objects', 'NOUN'), (' ', 'SPACE'), ('Preventing', 'VERB'), ('breakdowns', 'NOUN'), (' ', 'SPACE'), ('transformers', 'NOUN'), ('  ', 'SPACE')] 

>> Dependency Tags are: 
[('Diagnosis', 'nmod'), ('Mechanical', 'compound'), ('Devices', 'pobj'), (' ', 'conj'), ('Classification', 'nsubj'), ('Celestial', 'compound'), ('Objects', 'pobj'), (' ', 'advmod'), ('Preventing', 'ROOT'), ('breakdowns', 'dobj'), (' ', 'pobj'), ('transformers', 'dobj'), ('  ', 'dobj')]

>> Bigrams: 
[[Diagnosis, Mechanical], [Mechanical, Devices], [Devices,  ], [ , Classification], [Classification, Celestial], [Celestial, Objects], [Objects,  ], [ , Preventing], [Preventing, breakdowns], [breakdowns,  ], [ , transformers], [transformers,   ]]

>> Trigrams: 
[[Diagnosis, Mechanical, Devices], [Mechanical, Devices,  ], [Devices,  , Classification], [ , Classification, Celestial], [Classification, Celestial, Objects], [Celestial, Objects,  ], [Objects,  , Preventing], [ , Preventing, breakdowns], [Preventing, breakdowns,  ], [breakdowns,  , transformers], [ , transformers,   ]]

>> Noun Phrases are: 
[Mechanical Devices, Celestial Objects, breakdowns, transformers]

>> Named Entities are: 
[] 


================================ Paragraph 93 =================================

Simplicity of input variables.  The representation in rule-based technique  is easier to depict and understand.  

------------------- Sentence 1 -------------------

Simplicity of input variables. 


>> Tokens are: 
[Simplicity, input, variables, .] 

>> PoS Tags are: 
[('Simplicity', 'NOUN'), ('input', 'NOUN'), ('variables', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Simplicity', 'ROOT'), ('input', 'compound'), ('variables', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Simplicity, input], [input, variables], [variables, .]]

>> Trigrams: 
[[Simplicity, input, variables], [input, variables, .]]

>> Noun Phrases are: 
[Simplicity, input variables]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

The representation in rule-based technique  is easier to depict and understand. 


>> Tokens are: 
[representation, rule, -, based, technique,  , easier, depict, understand, .] 

>> PoS Tags are: 
[('representation', 'NOUN'), ('rule', 'NOUN'), ('-', 'PUNCT'), ('based', 'VERB'), ('technique', 'NOUN'), (' ', 'SPACE'), ('easier', 'ADJ'), ('depict', 'VERB'), ('understand', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('representation', 'nsubj'), ('rule', 'npadvmod'), ('-', 'punct'), ('based', 'amod'), ('technique', 'compound'), (' ', 'pobj'), ('easier', 'acomp'), ('depict', 'xcomp'), ('understand', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[representation, rule], [rule, -], [-, based], [based, technique], [technique,  ], [ , easier], [easier, depict], [depict, understand], [understand, .]]

>> Trigrams: 
[[representation, rule, -], [rule, -, based], [-, based, technique], [based, technique,  ], [technique,  , easier], [ , easier, depict], [easier, depict, understand], [depict, understand, .]]

>> Noun Phrases are: 
[The representation]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 94 =================================

No sufficient background  knowledge is available. It is  deduced from examples.  Hard to maintain a complex rule- base.    

------------------- Sentence 1 -------------------

No sufficient background  knowledge is available. 


>> Tokens are: 
[sufficient, background,  , knowledge, available, .] 

>> PoS Tags are: 
[('sufficient', 'ADJ'), ('background', 'NOUN'), (' ', 'SPACE'), ('knowledge', 'NOUN'), ('available', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('sufficient', 'amod'), ('background', 'nmod'), (' ', 'prep'), ('knowledge', 'nsubj'), ('available', 'acomp'), ('.', 'punct')]

>> Bigrams: 
[[sufficient, background], [background,  ], [ , knowledge], [knowledge, available], [available, .]]

>> Trigrams: 
[[sufficient, background,  ], [background,  , knowledge], [ , knowledge, available], [knowledge, available, .]]

>> Noun Phrases are: 
[No sufficient background  knowledge]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

It is  deduced from examples. 


>> Tokens are: 
[ , deduced, examples, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('deduced', 'VERB'), ('examples', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'nsubjpass'), ('deduced', 'ROOT'), ('examples', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[ , deduced], [deduced, examples], [examples, .]]

>> Trigrams: 
[[ , deduced, examples], [deduced, examples, .]]

>> Noun Phrases are: 
[It, examples]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

Hard to maintain a complex rule- base. 


>> Tokens are: 
[Hard, maintain, complex, rule-, base, .] 

>> PoS Tags are: 
[('Hard', 'ADJ'), ('maintain', 'VERB'), ('complex', 'ADJ'), ('rule-', 'ADJ'), ('base', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Hard', 'ROOT'), ('maintain', 'xcomp'), ('complex', 'amod'), ('rule-', 'amod'), ('base', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Hard, maintain], [maintain, complex], [complex, rule-], [rule-, base], [base, .]]

>> Trigrams: 
[[Hard, maintain, complex], [maintain, complex, rule-], [complex, rule-, base], [rule-, base, .]]

>> Noun Phrases are: 
[a complex rule- base]

>> Named Entities are: 
[] 

------------------- Sentence 5 -------------------

    


>> Tokens are: 
[   ] 

>> PoS Tags are: 
[('   ', 'SPACE')] 

>> Dependency Tags are: 
[('   ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 95 =================================

Genetic Algorithms (GA)  and Genetic Programming  (GP)  

------------------- Sentence 1 -------------------

Genetic Algorithms (GA)  and Genetic Programming  (GP)   


>> Tokens are: 
[Genetic, Algorithms, (, GA, ),  , Genetic, Programming,  , (, GP, ),  ] 

>> PoS Tags are: 
[('Genetic', 'PROPN'), ('Algorithms', 'PROPN'), ('(', 'PUNCT'), ('GA', 'PROPN'), (')', 'PUNCT'), (' ', 'SPACE'), ('Genetic', 'PROPN'), ('Programming', 'PROPN'), (' ', 'SPACE'), ('(', 'PUNCT'), ('GP', 'PROPN'), (')', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Genetic', 'compound'), ('Algorithms', 'ROOT'), ('(', 'punct'), ('GA', 'appos'), (')', 'punct'), (' ', 'appos'), ('Genetic', 'compound'), ('Programming', 'conj'), (' ', 'appos'), ('(', 'punct'), ('GP', 'appos'), (')', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[Genetic, Algorithms], [Algorithms, (], [(, GA], [GA, )], [),  ], [ , Genetic], [Genetic, Programming], [Programming,  ], [ , (], [(, GP], [GP, )], [),  ]]

>> Trigrams: 
[[Genetic, Algorithms, (], [Algorithms, (, GA], [(, GA, )], [GA, ),  ], [),  , Genetic], [ , Genetic, Programming], [Genetic, Programming,  ], [Programming,  , (], [ , (, GP], [(, GP, )], [GP, ),  ]]

>> Noun Phrases are: 
[Genetic Algorithms, (GA, Genetic Programming, GP]

>> Named Entities are: 
[('Algorithms', 'PERSON'), ('Genetic Programming', 'WORK_OF_ART')] 


================================ Paragraph 96 =================================

Optimization  Simulation of economic processes  Scientific research purposes  (Biological Evolution)  Computer Games  

------------------- Sentence 1 -------------------

Optimization  Simulation of economic processes   


>> Tokens are: 
[Optimization,  , Simulation, economic, processes,  ] 

>> PoS Tags are: 
[('Optimization', 'NOUN'), (' ', 'SPACE'), ('Simulation', 'PROPN'), ('economic', 'ADJ'), ('processes', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Optimization', 'nmod'), (' ', 'punct'), ('Simulation', 'ROOT'), ('economic', 'amod'), ('processes', 'pobj'), (' ', 'punct')]

>> Bigrams: 
[[Optimization,  ], [ , Simulation], [Simulation, economic], [economic, processes], [processes,  ]]

>> Trigrams: 
[[Optimization,  , Simulation], [ , Simulation, economic], [Simulation, economic, processes], [economic, processes,  ]]

>> Noun Phrases are: 
[Optimization  Simulation, economic processes]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Scientific research purposes  (Biological Evolution)   


>> Tokens are: 
[Scientific, research, purposes,  , (, Biological, Evolution, ),  ] 

>> PoS Tags are: 
[('Scientific', 'ADJ'), ('research', 'NOUN'), ('purposes', 'NOUN'), (' ', 'SPACE'), ('(', 'PUNCT'), ('Biological', 'PROPN'), ('Evolution', 'PROPN'), (')', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Scientific', 'amod'), ('research', 'compound'), ('purposes', 'ROOT'), (' ', 'appos'), ('(', 'punct'), ('Biological', 'compound'), ('Evolution', 'appos'), (')', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[Scientific, research], [research, purposes], [purposes,  ], [ , (], [(, Biological], [Biological, Evolution], [Evolution, )], [),  ]]

>> Trigrams: 
[[Scientific, research, purposes], [research, purposes,  ], [purposes,  , (], [ , (, Biological], [(, Biological, Evolution], [Biological, Evolution, )], [Evolution, ),  ]]

>> Noun Phrases are: 
[Scientific research purposes, Biological Evolution]

>> Named Entities are: 
[('Scientific', 'ORG'), ('Biological Evolution', 'WORK_OF_ART')] 

------------------- Sentence 3 -------------------

Computer Games   


>> Tokens are: 
[Computer, Games,  ] 

>> PoS Tags are: 
[('Computer', 'PROPN'), ('Games', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Computer', 'compound'), ('Games', 'ROOT'), (' ', 'appos')]

>> Bigrams: 
[[Computer, Games], [Games,  ]]

>> Trigrams: 
[[Computer, Games,  ]]

>> Noun Phrases are: 
[Computer Games]

>> Named Entities are: 
[] 


================================ Paragraph 97 =================================

GA and GP techniques can be applied to a  variety of problems.  GP is based on the 'Survival of the Fittest    Scheme' allowing fitter individuals to  develop and discarding unfit ones.  GA is easy to grasp and can be easily  applied without much difficulty  

------------------- Sentence 1 -------------------

GA and GP techniques can be applied to a  variety of problems. 


>> Tokens are: 
[GA, GP, techniques, applied,  , variety, problems, .] 

>> PoS Tags are: 
[('GA', 'PROPN'), ('GP', 'PROPN'), ('techniques', 'NOUN'), ('applied', 'VERB'), (' ', 'SPACE'), ('variety', 'NOUN'), ('problems', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('GA', 'nmod'), ('GP', 'conj'), ('techniques', 'nsubjpass'), ('applied', 'ROOT'), (' ', 'compound'), ('variety', 'pobj'), ('problems', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[GA, GP], [GP, techniques], [techniques, applied], [applied,  ], [ , variety], [variety, problems], [problems, .]]

>> Trigrams: 
[[GA, GP, techniques], [GP, techniques, applied], [techniques, applied,  ], [applied,  , variety], [ , variety, problems], [variety, problems, .]]

>> Noun Phrases are: 
[GA and GP techniques, a  variety, problems]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

GP is based on the 'Survival of the Fittest    Scheme' allowing fitter individuals to  develop and discarding unfit ones. 


>> Tokens are: 
[GP, based, ', Survival, Fittest,    , Scheme, ', allowing, fitter, individuals,  , develop, discarding, unfit, ones, .] 

>> PoS Tags are: 
[('GP', 'PROPN'), ('based', 'VERB'), ("'", 'PUNCT'), ('Survival', 'NOUN'), ('Fittest', 'PROPN'), ('   ', 'SPACE'), ('Scheme', 'NOUN'), ("'", 'PART'), ('allowing', 'VERB'), ('fitter', 'NOUN'), ('individuals', 'NOUN'), (' ', 'SPACE'), ('develop', 'VERB'), ('discarding', 'VERB'), ('unfit', 'ADJ'), ('ones', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('GP', 'nsubjpass'), ('based', 'ROOT'), ("'", 'punct'), ('Survival', 'pobj'), ('Fittest', 'nmod'), ('   ', 'nummod'), ('Scheme', 'pobj'), ("'", 'punct'), ('allowing', 'acl'), ('fitter', 'compound'), ('individuals', 'dobj'), (' ', 'pobj'), ('develop', 'ccomp'), ('discarding', 'conj'), ('unfit', 'amod'), ('ones', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[GP, based], [based, '], [', Survival], [Survival, Fittest], [Fittest,    ], [   , Scheme], [Scheme, '], [', allowing], [allowing, fitter], [fitter, individuals], [individuals,  ], [ , develop], [develop, discarding], [discarding, unfit], [unfit, ones], [ones, .]]

>> Trigrams: 
[[GP, based, '], [based, ', Survival], [', Survival, Fittest], [Survival, Fittest,    ], [Fittest,    , Scheme], [   , Scheme, '], [Scheme, ', allowing], [', allowing, fitter], [allowing, fitter, individuals], [fitter, individuals,  ], [individuals,  , develop], [ , develop, discarding], [develop, discarding, unfit], [discarding, unfit, ones], [unfit, ones, .]]

>> Noun Phrases are: 
[GP, the 'Survival, the Fittest    Scheme, fitter individuals, unfit ones]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

 GA is easy to grasp and can be easily  applied without much difficulty   


>> Tokens are: 
[ , GA, easy, grasp, easily,  , applied, difficulty,  ] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('GA', 'PROPN'), ('easy', 'ADJ'), ('grasp', 'VERB'), ('easily', 'ADV'), (' ', 'SPACE'), ('applied', 'VERB'), ('difficulty', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'compound'), ('GA', 'nsubj'), ('easy', 'acomp'), ('grasp', 'xcomp'), ('easily', 'advmod'), (' ', 'nsubj'), ('applied', 'conj'), ('difficulty', 'pobj'), (' ', 'punct')]

>> Bigrams: 
[[ , GA], [GA, easy], [easy, grasp], [grasp, easily], [easily,  ], [ , applied], [applied, difficulty], [difficulty,  ]]

>> Trigrams: 
[[ , GA, easy], [GA, easy, grasp], [easy, grasp, easily], [grasp, easily,  ], [easily,  , applied], [ , applied, difficulty], [applied, difficulty,  ]]

>> Noun Phrases are: 
[ GA, much difficulty]

>> Named Entities are: 
[('GA', 'ORG')] 


================================ Paragraph 98 =================================

Resource requirements are large.  It can be a time consuming  process.  GA practitioners often run many  copies of the same code with the  same inputs to get statistically  reliable results. 

------------------- Sentence 1 -------------------

Resource requirements are large.   


>> Tokens are: 
[Resource, requirements, large, .,  ] 

>> PoS Tags are: 
[('Resource', 'NOUN'), ('requirements', 'NOUN'), ('large', 'ADJ'), ('.', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Resource', 'compound'), ('requirements', 'nsubj'), ('large', 'acomp'), ('.', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[Resource, requirements], [requirements, large], [large, .], [.,  ]]

>> Trigrams: 
[[Resource, requirements, large], [requirements, large, .], [large, .,  ]]

>> Noun Phrases are: 
[Resource requirements]

>> Named Entities are: 
[('Resource', 'ORG')] 

------------------- Sentence 2 -------------------

It can be a time consuming  process. 


>> Tokens are: 
[time, consuming,  , process, .] 

>> PoS Tags are: 
[('time', 'NOUN'), ('consuming', 'VERB'), (' ', 'SPACE'), ('process', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('time', 'npadvmod'), ('consuming', 'xcomp'), (' ', 'compound'), ('process', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[time, consuming], [consuming,  ], [ , process], [process, .]]

>> Trigrams: 
[[time, consuming,  ], [consuming,  , process], [ , process, .]]

>> Noun Phrases are: 
[It,  process]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

 GA practitioners often run many  copies of the same code with the  same inputs to get statistically  reliable results. 


>> Tokens are: 
[ , GA, practitioners, run,  , copies, code,  , inputs, statistically,  , reliable, results, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('GA', 'PROPN'), ('practitioners', 'NOUN'), ('run', 'VERB'), (' ', 'SPACE'), ('copies', 'NOUN'), ('code', 'NOUN'), (' ', 'SPACE'), ('inputs', 'NOUN'), ('statistically', 'ADV'), (' ', 'SPACE'), ('reliable', 'ADJ'), ('results', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'nummod'), ('GA', 'compound'), ('practitioners', 'nsubj'), ('run', 'ROOT'), (' ', 'compound'), ('copies', 'dobj'), ('code', 'pobj'), (' ', 'amod'), ('inputs', 'pobj'), ('statistically', 'advmod'), (' ', 'nmod'), ('reliable', 'amod'), ('results', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[ , GA], [GA, practitioners], [practitioners, run], [run,  ], [ , copies], [copies, code], [code,  ], [ , inputs], [inputs, statistically], [statistically,  ], [ , reliable], [reliable, results], [results, .]]

>> Trigrams: 
[[ , GA, practitioners], [GA, practitioners, run], [practitioners, run,  ], [run,  , copies], [ , copies, code], [copies, code,  ], [code,  , inputs], [ , inputs, statistically], [inputs, statistically,  ], [statistically,  , reliable], [ , reliable, results], [reliable, results, .]]

>> Noun Phrases are: 
[ GA practitioners, many  copies, the same code, the  same inputs, statistically  reliable results]

>> Named Entities are: 
[] 


================================ Paragraph 99 =================================

Yogesh Singh, Pradeep Kumar Bhatia & Omprakash Sangwan  

------------------- Sentence 1 -------------------

Yogesh Singh, Pradeep Kumar Bhatia & Omprakash Sangwan   


>> Tokens are: 
[Yogesh, Singh, ,, Pradeep, Kumar, Bhatia, &, Omprakash, Sangwan,  ] 

>> PoS Tags are: 
[('Yogesh', 'PROPN'), ('Singh', 'PROPN'), (',', 'PUNCT'), ('Pradeep', 'PROPN'), ('Kumar', 'PROPN'), ('Bhatia', 'PROPN'), ('&', 'CCONJ'), ('Omprakash', 'PROPN'), ('Sangwan', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Yogesh', 'compound'), ('Singh', 'ROOT'), (',', 'punct'), ('Pradeep', 'compound'), ('Kumar', 'compound'), ('Bhatia', 'conj'), ('&', 'cc'), ('Omprakash', 'compound'), ('Sangwan', 'conj'), (' ', 'punct')]

>> Bigrams: 
[[Yogesh, Singh], [Singh, ,], [,, Pradeep], [Pradeep, Kumar], [Kumar, Bhatia], [Bhatia, &], [&, Omprakash], [Omprakash, Sangwan], [Sangwan,  ]]

>> Trigrams: 
[[Yogesh, Singh, ,], [Singh, ,, Pradeep], [,, Pradeep, Kumar], [Pradeep, Kumar, Bhatia], [Kumar, Bhatia, &], [Bhatia, &, Omprakash], [&, Omprakash, Sangwan], [Omprakash, Sangwan,  ]]

>> Noun Phrases are: 
[Yogesh Singh, Pradeep Kumar Bhatia, Omprakash Sangwan]

>> Named Entities are: 
[('Yogesh Singh', 'PERSON'), ('Kumar Bhatia & Omprakash Sangwan', 'ORG')] 


================================ Paragraph 100 =================================

International Journal of Computer Science and Security, Volume (1) : Issue (1) 83  

------------------- Sentence 1 -------------------

International Journal of Computer Science and Security, Volume (1) : Issue (1) 83   


>> Tokens are: 
[International, Journal, Computer, Science, Security, ,, Volume, (, 1, ), :, Issue, (, 1, ), 83,  ] 

>> PoS Tags are: 
[('International', 'PROPN'), ('Journal', 'PROPN'), ('Computer', 'PROPN'), ('Science', 'PROPN'), ('Security', 'PROPN'), (',', 'PUNCT'), ('Volume', 'NOUN'), ('(', 'PUNCT'), ('1', 'NUM'), (')', 'PUNCT'), (':', 'PUNCT'), ('Issue', 'NOUN'), ('(', 'PUNCT'), ('1', 'NUM'), (')', 'PUNCT'), ('83', 'NUM'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('International', 'compound'), ('Journal', 'ROOT'), ('Computer', 'compound'), ('Science', 'pobj'), ('Security', 'conj'), (',', 'punct'), ('Volume', 'appos'), ('(', 'punct'), ('1', 'appos'), (')', 'punct'), (':', 'punct'), ('Issue', 'appos'), ('(', 'punct'), ('1', 'appos'), (')', 'punct'), ('83', 'nummod'), (' ', 'appos')]

>> Bigrams: 
[[International, Journal], [Journal, Computer], [Computer, Science], [Science, Security], [Security, ,], [,, Volume], [Volume, (], [(, 1], [1, )], [), :], [:, Issue], [Issue, (], [(, 1], [1, )], [), 83], [83,  ]]

>> Trigrams: 
[[International, Journal, Computer], [Journal, Computer, Science], [Computer, Science, Security], [Science, Security, ,], [Security, ,, Volume], [,, Volume, (], [Volume, (, 1], [(, 1, )], [1, ), :], [), :, Issue], [:, Issue, (], [Issue, (, 1], [(, 1, )], [1, ), 83], [), 83,  ]]

>> Noun Phrases are: 
[International Journal, Computer Science, Security, Volume, Issue]

>> Named Entities are: 
[('International Journal of Computer Science and Security, Volume', 'ORG'), ('1', 'CARDINAL')] 


================================ Paragraph 101 =================================

8.  Conclusions and Future Directions  The main contribution of this review is to discuss the various Machine-Learning Techniques  employed in effort estimation, cost estimation, size estimation and other field of Software  Engineering. The paper also gives a relative comparison of all the techniques based on their  applications, advantages and limitations. After analysis of all the techniques, we cannot state as  any one technique being the best. Each technique has different application areas and is useful in  different domains based on its advantages. Thus, keeping in mind the limitations of each of the  techniques and also the prime focus being the improvement in performance and efficiency we  should use that technique, which best suits a particular application. For instance GA and GP  prove to be useful in the area of scientific research involving biological evolution whereas rule  based techniques and CART analysis may be useful in many financial applications. Similarly CBR  is being developed for use in Help- Desk Systems, a relatively new application and NN may be  employed for Risk Management or Sales Forecasting.     Our study also encourages that no one technique can be classified as being the perfect machine  learning technique. For this reason there is a strong need for better insight into the validity and  generality of many of the discussed techniques.  In particular we plan to continue with research  on: -  When to use machine-learning techniques and estimation models.   How to select and combine a set of test cases for effective estimation technique & to get better  results?      

------------------- Sentence 1 -------------------

8. 


>> Tokens are: 
[8, .] 

>> PoS Tags are: 
[('8', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('8', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[8, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('8', 'CARDINAL')] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

Conclusions and Future Directions   


>> Tokens are: 
[Conclusions, Future, Directions,  ] 

>> PoS Tags are: 
[('Conclusions', 'NOUN'), ('Future', 'PROPN'), ('Directions', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Conclusions', 'ROOT'), ('Future', 'compound'), ('Directions', 'conj'), (' ', 'punct')]

>> Bigrams: 
[[Conclusions, Future], [Future, Directions], [Directions,  ]]

>> Trigrams: 
[[Conclusions, Future, Directions], [Future, Directions,  ]]

>> Noun Phrases are: 
[Conclusions, Future Directions]

>> Named Entities are: 
[('Conclusions and Future Directions', 'ORG')] 

------------------- Sentence 4 -------------------

The main contribution of this review is to discuss the various Machine-Learning Techniques  employed in effort estimation, cost estimation, size estimation and other field of Software  Engineering. 


>> Tokens are: 
[main, contribution, review, discuss, Machine, -, Learning, Techniques,  , employed, effort, estimation, ,, cost, estimation, ,, size, estimation, field, Software,  , Engineering, .] 

>> PoS Tags are: 
[('main', 'ADJ'), ('contribution', 'NOUN'), ('review', 'NOUN'), ('discuss', 'VERB'), ('Machine', 'PROPN'), ('-', 'PUNCT'), ('Learning', 'PROPN'), ('Techniques', 'PROPN'), (' ', 'SPACE'), ('employed', 'VERB'), ('effort', 'NOUN'), ('estimation', 'NOUN'), (',', 'PUNCT'), ('cost', 'NOUN'), ('estimation', 'NOUN'), (',', 'PUNCT'), ('size', 'NOUN'), ('estimation', 'NOUN'), ('field', 'NOUN'), ('Software', 'PROPN'), (' ', 'SPACE'), ('Engineering', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('main', 'amod'), ('contribution', 'nsubj'), ('review', 'pobj'), ('discuss', 'xcomp'), ('Machine', 'compound'), ('-', 'punct'), ('Learning', 'compound'), ('Techniques', 'dobj'), (' ', 'appos'), ('employed', 'acl'), ('effort', 'compound'), ('estimation', 'pobj'), (',', 'punct'), ('cost', 'compound'), ('estimation', 'conj'), (',', 'punct'), ('size', 'compound'), ('estimation', 'conj'), ('field', 'conj'), ('Software', 'pobj'), (' ', 'nummod'), ('Engineering', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[main, contribution], [contribution, review], [review, discuss], [discuss, Machine], [Machine, -], [-, Learning], [Learning, Techniques], [Techniques,  ], [ , employed], [employed, effort], [effort, estimation], [estimation, ,], [,, cost], [cost, estimation], [estimation, ,], [,, size], [size, estimation], [estimation, field], [field, Software], [Software,  ], [ , Engineering], [Engineering, .]]

>> Trigrams: 
[[main, contribution, review], [contribution, review, discuss], [review, discuss, Machine], [discuss, Machine, -], [Machine, -, Learning], [-, Learning, Techniques], [Learning, Techniques,  ], [Techniques,  , employed], [ , employed, effort], [employed, effort, estimation], [effort, estimation, ,], [estimation, ,, cost], [,, cost, estimation], [cost, estimation, ,], [estimation, ,, size], [,, size, estimation], [size, estimation, field], [estimation, field, Software], [field, Software,  ], [Software,  , Engineering], [ , Engineering, .]]

>> Noun Phrases are: 
[The main contribution, this review, the various Machine-Learning Techniques, effort estimation, cost estimation, size estimation, other field, Software, Engineering]

>> Named Entities are: 
[('Machine-Learning Techniques', 'ORG')] 

------------------- Sentence 5 -------------------

The paper also gives a relative comparison of all the techniques based on their  applications, advantages and limitations. 


>> Tokens are: 
[paper, gives, relative, comparison, techniques, based,  , applications, ,, advantages, limitations, .] 

>> PoS Tags are: 
[('paper', 'NOUN'), ('gives', 'VERB'), ('relative', 'ADJ'), ('comparison', 'NOUN'), ('techniques', 'NOUN'), ('based', 'VERB'), (' ', 'SPACE'), ('applications', 'NOUN'), (',', 'PUNCT'), ('advantages', 'NOUN'), ('limitations', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('paper', 'nsubj'), ('gives', 'ROOT'), ('relative', 'amod'), ('comparison', 'dobj'), ('techniques', 'pobj'), ('based', 'acl'), (' ', 'compound'), ('applications', 'pobj'), (',', 'punct'), ('advantages', 'conj'), ('limitations', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[paper, gives], [gives, relative], [relative, comparison], [comparison, techniques], [techniques, based], [based,  ], [ , applications], [applications, ,], [,, advantages], [advantages, limitations], [limitations, .]]

>> Trigrams: 
[[paper, gives, relative], [gives, relative, comparison], [relative, comparison, techniques], [comparison, techniques, based], [techniques, based,  ], [based,  , applications], [ , applications, ,], [applications, ,, advantages], [,, advantages, limitations], [advantages, limitations, .]]

>> Noun Phrases are: 
[The paper, a relative comparison, all the techniques, their  applications, advantages, limitations]

>> Named Entities are: 
[] 

------------------- Sentence 6 -------------------

After analysis of all the techniques, we cannot state as  any one technique being the best. 


>> Tokens are: 
[analysis, techniques, ,, state,  , technique, best, .] 

>> PoS Tags are: 
[('analysis', 'NOUN'), ('techniques', 'NOUN'), (',', 'PUNCT'), ('state', 'VERB'), (' ', 'SPACE'), ('technique', 'NOUN'), ('best', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('analysis', 'pobj'), ('techniques', 'pobj'), (',', 'punct'), ('state', 'ROOT'), (' ', 'pobj'), ('technique', 'dobj'), ('best', 'attr'), ('.', 'punct')]

>> Bigrams: 
[[analysis, techniques], [techniques, ,], [,, state], [state,  ], [ , technique], [technique, best], [best, .]]

>> Trigrams: 
[[analysis, techniques, ,], [techniques, ,, state], [,, state,  ], [state,  , technique], [ , technique, best], [technique, best, .]]

>> Noun Phrases are: 
[analysis, all the techniques, we, any one technique]

>> Named Entities are: 
[] 

------------------- Sentence 7 -------------------

Each technique has different application areas and is useful in  different domains based on its advantages. 


>> Tokens are: 
[technique, different, application, areas, useful,  , different, domains, based, advantages, .] 

>> PoS Tags are: 
[('technique', 'NOUN'), ('different', 'ADJ'), ('application', 'NOUN'), ('areas', 'NOUN'), ('useful', 'ADJ'), (' ', 'SPACE'), ('different', 'ADJ'), ('domains', 'NOUN'), ('based', 'VERB'), ('advantages', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('technique', 'nsubj'), ('different', 'amod'), ('application', 'compound'), ('areas', 'dobj'), ('useful', 'acomp'), (' ', 'nmod'), ('different', 'amod'), ('domains', 'pobj'), ('based', 'acl'), ('advantages', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[technique, different], [different, application], [application, areas], [areas, useful], [useful,  ], [ , different], [different, domains], [domains, based], [based, advantages], [advantages, .]]

>> Trigrams: 
[[technique, different, application], [different, application, areas], [application, areas, useful], [areas, useful,  ], [useful,  , different], [ , different, domains], [different, domains, based], [domains, based, advantages], [based, advantages, .]]

>> Noun Phrases are: 
[Each technique, different application areas,  different domains, its advantages]

>> Named Entities are: 
[] 

------------------- Sentence 8 -------------------

Thus, keeping in mind the limitations of each of the  techniques and also the prime focus being the improvement in performance and efficiency we  should use that technique, which best suits a particular application. 


>> Tokens are: 
[,, keeping, mind, limitations,  , techniques, prime, focus, improvement, performance, efficiency,  , use, technique, ,, best, suits, particular, application, .] 

>> PoS Tags are: 
[(',', 'PUNCT'), ('keeping', 'VERB'), ('mind', 'NOUN'), ('limitations', 'NOUN'), (' ', 'SPACE'), ('techniques', 'NOUN'), ('prime', 'ADJ'), ('focus', 'NOUN'), ('improvement', 'NOUN'), ('performance', 'NOUN'), ('efficiency', 'NOUN'), (' ', 'SPACE'), ('use', 'VERB'), ('technique', 'NOUN'), (',', 'PUNCT'), ('best', 'ADJ'), ('suits', 'VERB'), ('particular', 'ADJ'), ('application', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(',', 'punct'), ('keeping', 'csubj'), ('mind', 'pobj'), ('limitations', 'dobj'), (' ', 'compound'), ('techniques', 'pobj'), ('prime', 'amod'), ('focus', 'nsubj'), ('improvement', 'attr'), ('performance', 'pobj'), ('efficiency', 'conj'), (' ', 'nsubj'), ('use', 'ROOT'), ('technique', 'dobj'), (',', 'punct'), ('best', 'amod'), ('suits', 'relcl'), ('particular', 'amod'), ('application', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[,, keeping], [keeping, mind], [mind, limitations], [limitations,  ], [ , techniques], [techniques, prime], [prime, focus], [focus, improvement], [improvement, performance], [performance, efficiency], [efficiency,  ], [ , use], [use, technique], [technique, ,], [,, best], [best, suits], [suits, particular], [particular, application], [application, .]]

>> Trigrams: 
[[,, keeping, mind], [keeping, mind, limitations], [mind, limitations,  ], [limitations,  , techniques], [ , techniques, prime], [techniques, prime, focus], [prime, focus, improvement], [focus, improvement, performance], [improvement, performance, efficiency], [performance, efficiency,  ], [efficiency,  , use], [ , use, technique], [use, technique, ,], [technique, ,, best], [,, best, suits], [best, suits, particular], [suits, particular, application], [particular, application, .]]

>> Noun Phrases are: 
[mind, the limitations, the  techniques, also the prime focus, the improvement, performance, efficiency, we, that technique, a particular application]

>> Named Entities are: 
[] 

------------------- Sentence 9 -------------------

For instance GA and GP  prove to be useful in the area of scientific research involving biological evolution whereas rule  based techniques and CART analysis may be useful in many financial applications. 


>> Tokens are: 
[instance, GA, GP,  , prove, useful, area, scientific, research, involving, biological, evolution, rule,  , based, techniques, CART, analysis, useful, financial, applications, .] 

>> PoS Tags are: 
[('instance', 'NOUN'), ('GA', 'PROPN'), ('GP', 'PROPN'), (' ', 'SPACE'), ('prove', 'VERB'), ('useful', 'ADJ'), ('area', 'NOUN'), ('scientific', 'ADJ'), ('research', 'NOUN'), ('involving', 'VERB'), ('biological', 'ADJ'), ('evolution', 'NOUN'), ('rule', 'VERB'), (' ', 'SPACE'), ('based', 'VERB'), ('techniques', 'NOUN'), ('CART', 'NOUN'), ('analysis', 'NOUN'), ('useful', 'ADJ'), ('financial', 'ADJ'), ('applications', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('instance', 'pobj'), ('GA', 'nsubj'), ('GP', 'conj'), (' ', 'nsubj'), ('prove', 'ROOT'), ('useful', 'acomp'), ('area', 'pobj'), ('scientific', 'amod'), ('research', 'pobj'), ('involving', 'acl'), ('biological', 'amod'), ('evolution', 'dobj'), ('rule', 'nsubj'), (' ', 'nmod'), ('based', 'amod'), ('techniques', 'nsubj'), ('CART', 'compound'), ('analysis', 'conj'), ('useful', 'acomp'), ('financial', 'amod'), ('applications', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[instance, GA], [GA, GP], [GP,  ], [ , prove], [prove, useful], [useful, area], [area, scientific], [scientific, research], [research, involving], [involving, biological], [biological, evolution], [evolution, rule], [rule,  ], [ , based], [based, techniques], [techniques, CART], [CART, analysis], [analysis, useful], [useful, financial], [financial, applications], [applications, .]]

>> Trigrams: 
[[instance, GA, GP], [GA, GP,  ], [GP,  , prove], [ , prove, useful], [prove, useful, area], [useful, area, scientific], [area, scientific, research], [scientific, research, involving], [research, involving, biological], [involving, biological, evolution], [biological, evolution, rule], [evolution, rule,  ], [rule,  , based], [ , based, techniques], [based, techniques, CART], [techniques, CART, analysis], [CART, analysis, useful], [analysis, useful, financial], [useful, financial, applications], [financial, applications, .]]

>> Noun Phrases are: 
[instance, GA, GP, the area, scientific research, biological evolution,  based techniques, CART analysis, many financial applications]

>> Named Entities are: 
[('GA', 'ORG'), ('CART', 'ORG')] 

------------------- Sentence 10 -------------------

Similarly CBR  is being developed for use in Help- Desk Systems, a relatively new application and NN may be  employed for Risk Management or Sales Forecasting. 


>> Tokens are: 
[Similarly, CBR,  , developed, use, Help-, Desk, Systems, ,, relatively, new, application, NN,  , employed, Risk, Management, Sales, Forecasting, .] 

>> PoS Tags are: 
[('Similarly', 'ADV'), ('CBR', 'PROPN'), (' ', 'SPACE'), ('developed', 'VERB'), ('use', 'NOUN'), ('Help-', 'PROPN'), ('Desk', 'PROPN'), ('Systems', 'PROPN'), (',', 'PUNCT'), ('relatively', 'ADV'), ('new', 'ADJ'), ('application', 'NOUN'), ('NN', 'PROPN'), (' ', 'SPACE'), ('employed', 'VERB'), ('Risk', 'PROPN'), ('Management', 'PROPN'), ('Sales', 'PROPN'), ('Forecasting', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Similarly', 'advmod'), ('CBR', 'nsubjpass'), (' ', 'nsubjpass'), ('developed', 'ROOT'), ('use', 'pobj'), ('Help-', 'compound'), ('Desk', 'compound'), ('Systems', 'pobj'), (',', 'punct'), ('relatively', 'advmod'), ('new', 'amod'), ('application', 'npadvmod'), ('NN', 'conj'), (' ', 'nsubjpass'), ('employed', 'advcl'), ('Risk', 'compound'), ('Management', 'pobj'), ('Sales', 'compound'), ('Forecasting', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[Similarly, CBR], [CBR,  ], [ , developed], [developed, use], [use, Help-], [Help-, Desk], [Desk, Systems], [Systems, ,], [,, relatively], [relatively, new], [new, application], [application, NN], [NN,  ], [ , employed], [employed, Risk], [Risk, Management], [Management, Sales], [Sales, Forecasting], [Forecasting, .]]

>> Trigrams: 
[[Similarly, CBR,  ], [CBR,  , developed], [ , developed, use], [developed, use, Help-], [use, Help-, Desk], [Help-, Desk, Systems], [Desk, Systems, ,], [Systems, ,, relatively], [,, relatively, new], [relatively, new, application], [new, application, NN], [application, NN,  ], [NN,  , employed], [ , employed, Risk], [employed, Risk, Management], [Risk, Management, Sales], [Management, Sales, Forecasting], [Sales, Forecasting, .]]

>> Noun Phrases are: 
[Similarly CBR, use, Help- Desk Systems, Risk Management, Sales Forecasting]

>> Named Entities are: 
[('Similarly CBR  ', 'PERSON'), ('NN', 'ORG'), ('Risk Management', 'ORG')] 

------------------- Sentence 11 -------------------

    Our study also encourages that no one technique can be classified as being the perfect machine  learning technique. 


>> Tokens are: 
[    , study, encourages, technique, classified, perfect, machine,  , learning, technique, .] 

>> PoS Tags are: 
[('    ', 'SPACE'), ('study', 'NOUN'), ('encourages', 'VERB'), ('technique', 'NOUN'), ('classified', 'VERB'), ('perfect', 'ADJ'), ('machine', 'NOUN'), (' ', 'SPACE'), ('learning', 'VERB'), ('technique', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('    ', 'nmod'), ('study', 'nsubj'), ('encourages', 'ROOT'), ('technique', 'nsubjpass'), ('classified', 'ccomp'), ('perfect', 'amod'), ('machine', 'attr'), (' ', 'punct'), ('learning', 'compound'), ('technique', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[    , study], [study, encourages], [encourages, technique], [technique, classified], [classified, perfect], [perfect, machine], [machine,  ], [ , learning], [learning, technique], [technique, .]]

>> Trigrams: 
[[    , study, encourages], [study, encourages, technique], [encourages, technique, classified], [technique, classified, perfect], [classified, perfect, machine], [perfect, machine,  ], [machine,  , learning], [ , learning, technique], [learning, technique, .]]

>> Noun Phrases are: 
[    Our study, no one technique, the perfect machine, learning technique]

>> Named Entities are: 
[] 

------------------- Sentence 12 -------------------

For this reason there is a strong need for better insight into the validity and  generality of many of the discussed techniques.   


>> Tokens are: 
[reason, strong, need, better, insight, validity,  , generality, discussed, techniques, .,  ] 

>> PoS Tags are: 
[('reason', 'NOUN'), ('strong', 'ADJ'), ('need', 'NOUN'), ('better', 'ADJ'), ('insight', 'NOUN'), ('validity', 'NOUN'), (' ', 'SPACE'), ('generality', 'NOUN'), ('discussed', 'VERB'), ('techniques', 'NOUN'), ('.', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('reason', 'pobj'), ('strong', 'amod'), ('need', 'attr'), ('better', 'amod'), ('insight', 'pobj'), ('validity', 'pobj'), (' ', 'amod'), ('generality', 'conj'), ('discussed', 'amod'), ('techniques', 'pobj'), ('.', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[reason, strong], [strong, need], [need, better], [better, insight], [insight, validity], [validity,  ], [ , generality], [generality, discussed], [discussed, techniques], [techniques, .], [.,  ]]

>> Trigrams: 
[[reason, strong, need], [strong, need, better], [need, better, insight], [better, insight, validity], [insight, validity,  ], [validity,  , generality], [ , generality, discussed], [generality, discussed, techniques], [discussed, techniques, .], [techniques, .,  ]]

>> Noun Phrases are: 
[this reason, a strong need, better insight, the validity,  generality, the discussed techniques]

>> Named Entities are: 
[] 

------------------- Sentence 13 -------------------

In particular we plan to continue with research  on: -  When to use machine-learning techniques and estimation models. 


>> Tokens are: 
[particular, plan, continue, research,  , :, -,  , use, machine, -, learning, techniques, estimation, models, .] 

>> PoS Tags are: 
[('particular', 'ADJ'), ('plan', 'VERB'), ('continue', 'VERB'), ('research', 'NOUN'), (' ', 'SPACE'), (':', 'PUNCT'), ('-', 'PUNCT'), (' ', 'SPACE'), ('use', 'VERB'), ('machine', 'NOUN'), ('-', 'PUNCT'), ('learning', 'VERB'), ('techniques', 'NOUN'), ('estimation', 'NOUN'), ('models', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('particular', 'amod'), ('plan', 'ROOT'), ('continue', 'xcomp'), ('research', 'compound'), (' ', 'pobj'), (':', 'punct'), ('-', 'punct'), (' ', 'pobj'), ('use', 'advcl'), ('machine', 'npadvmod'), ('-', 'punct'), ('learning', 'amod'), ('techniques', 'nmod'), ('estimation', 'conj'), ('models', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[particular, plan], [plan, continue], [continue, research], [research,  ], [ , :], [:, -], [-,  ], [ , use], [use, machine], [machine, -], [-, learning], [learning, techniques], [techniques, estimation], [estimation, models], [models, .]]

>> Trigrams: 
[[particular, plan, continue], [plan, continue, research], [continue, research,  ], [research,  , :], [ , :, -], [:, -,  ], [-,  , use], [ , use, machine], [use, machine, -], [machine, -, learning], [-, learning, techniques], [learning, techniques, estimation], [techniques, estimation, models], [estimation, models, .]]

>> Noun Phrases are: 
[we, machine-learning techniques and estimation models]

>> Named Entities are: 
[] 

------------------- Sentence 14 -------------------

  How to select and combine a set of test cases for effective estimation technique & to get better  results? 


>> Tokens are: 
[  , select, combine, set, test, cases, effective, estimation, technique, &, better,  , results, ?] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('select', 'VERB'), ('combine', 'VERB'), ('set', 'NOUN'), ('test', 'NOUN'), ('cases', 'NOUN'), ('effective', 'ADJ'), ('estimation', 'NOUN'), ('technique', 'NOUN'), ('&', 'CCONJ'), ('better', 'ADJ'), (' ', 'SPACE'), ('results', 'NOUN'), ('?', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('select', 'acl'), ('combine', 'conj'), ('set', 'dobj'), ('test', 'compound'), ('cases', 'pobj'), ('effective', 'amod'), ('estimation', 'compound'), ('technique', 'pobj'), ('&', 'cc'), ('better', 'amod'), (' ', 'compound'), ('results', 'dobj'), ('?', 'punct')]

>> Bigrams: 
[[  , select], [select, combine], [combine, set], [set, test], [test, cases], [cases, effective], [effective, estimation], [estimation, technique], [technique, &], [&, better], [better,  ], [ , results], [results, ?]]

>> Trigrams: 
[[  , select, combine], [select, combine, set], [combine, set, test], [set, test, cases], [test, cases, effective], [cases, effective, estimation], [effective, estimation, technique], [estimation, technique, &], [technique, &, better], [&, better,  ], [better,  , results], [ , results, ?]]

>> Noun Phrases are: 
[a set, test cases, effective estimation technique, better  results]

>> Named Entities are: 
[] 

------------------- Sentence 15 -------------------

      


>> Tokens are: 
[     ] 

>> PoS Tags are: 
[('     ', 'SPACE')] 

>> Dependency Tags are: 
[('     ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 102 =================================

9. REFERENCES:  [1] Aggarwal K.K., Yogesh Singh, A.Kaur, O.P.Sangwan "A Neural Net Based Approach to Test  Oracle"   ACM SIGSOFT Vol. 29 No. 4, May 2004.  [2]. Agnar Aamodt, Enric Plaza. "Foundational Issues, Methodological Variations, System  approaches."  AlCom -Artificial Intelligence Communications, IOS Press Vol. 7: 1, pp. 39-59.  [3]  Al Globus. "Towards 100,000 CPU Cycle-Scavenging by Genetic Algorithms." CSC at NASA  Ames  Research Center, September 2001.  [4]  Chris Bozzuto.  "Machine Learning: Genetic Programming." February 2002.  [5] Dr. Bonnie Morris, West Virginia University "Case Based Reasoning" AI/ES Update vol. 5 no.  1 Fall 1995.  [6] Eleazar Eskin and Eric Siegel. "Genetic Programming Applied to Othello: Introducing Students  to Machine Learning Research" available at http://www.cs.columbia.edu/~evs/papers/sigcse- paper.ps.  [7] Gavin R. Finnie   and Gerhard E. Wittig, “AI Tools for Software Development Effort  Estimation”, IEEE Transaction on Software Engineering, 1996.   [8]  Haykin S., “Neural Networks, A Comprehensive Foundation,” Prentice  Hall India, 2003.  [9]. Howden William E. and Eichhorst Peter. Proving properties of programs from program traces.  In Tutorial: Software Testing and Validation Techniques: E Miller and W.E.howden(eds.0. new  York:IEEE Computer Society Press, 1978.   [10] Hsinchun Chen. "Machine Learning for Information Retrieval: Neural Networks, Symbolic  Learning, and Genetic Algorithms" available at  http://ai.bpa.arizona.edu/papers/mlir93/mlir93.html#318.  [11] Ian Watson & Farhi Marir. "Case-Based Reasoning: A Review " available at http://www.ai- cbr.org/classroom/cbr-review.html.  [12] Juha Hakkaarainen, Petteri Laamanen, and Raimo Rask, “ Neural Network in Specification  Level Software Size Estimation”, IEEE Transaction on Software Engineering, 1993.   [13] Krishnamoorthy Srinivasan and Douglas Fisher, “Machine Learning Approaches to  Estimating Software Development Effort”, IEEE Transaction on Software Engineering, 1995.   [14] Kohonen T., “Self Organizing Maps”, 2nd Edition, Berlin: Springer- Verlag, 1997.   [15]. Mayrhauser A. von, Anderson C. and Mraz R., “Using A Neural Network to Predict Test  Case Effectiveness”’ – Procs IEEE Aerospace Applications Conference, Snowmass, CO,  Feb.1995. 

------------------- Sentence 1 -------------------

9. 


>> Tokens are: 
[9, .] 

>> PoS Tags are: 
[('9', 'X'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('9', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[9, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('9', 'CARDINAL')] 

------------------- Sentence 2 -------------------

REFERENCES:   


>> Tokens are: 
[REFERENCES, :,  ] 

>> PoS Tags are: 
[('REFERENCES', 'NOUN'), (':', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('REFERENCES', 'ROOT'), (':', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[REFERENCES, :], [:,  ]]

>> Trigrams: 
[[REFERENCES, :,  ]]

>> Noun Phrases are: 
[REFERENCES]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

[1] Aggarwal K.K., Yogesh Singh, A.Kaur, O.P.Sangwan "A Neural Net Based Approach to Test  Oracle"   ACM SIGSOFT Vol. 


>> Tokens are: 
[[, 1, ], Aggarwal, K.K., ,, Yogesh, Singh, ,, A.Kaur, ,, O.P.Sangwan, ", Neural, Net, Based, Approach, Test,  , Oracle, ",   , ACM, SIGSOFT, Vol, .] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('1', 'NUM'), (']', 'PUNCT'), ('Aggarwal', 'PROPN'), ('K.K.', 'PROPN'), (',', 'PUNCT'), ('Yogesh', 'PROPN'), ('Singh', 'PROPN'), (',', 'PUNCT'), ('A.Kaur', 'PROPN'), (',', 'PUNCT'), ('O.P.Sangwan', 'PROPN'), ('"', 'PUNCT'), ('Neural', 'PROPN'), ('Net', 'PROPN'), ('Based', 'VERB'), ('Approach', 'NOUN'), ('Test', 'PROPN'), (' ', 'SPACE'), ('Oracle', 'NOUN'), ('"', 'PUNCT'), ('  ', 'SPACE'), ('ACM', 'PROPN'), ('SIGSOFT', 'PROPN'), ('Vol', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('[', 'punct'), ('1', 'nummod'), (']', 'punct'), ('Aggarwal', 'compound'), ('K.K.', 'ROOT'), (',', 'punct'), ('Yogesh', 'compound'), ('Singh', 'npadvmod'), (',', 'punct'), ('A.Kaur', 'conj'), (',', 'punct'), ('O.P.Sangwan', 'appos'), ('"', 'punct'), ('Neural', 'compound'), ('Net', 'compound'), ('Based', 'amod'), ('Approach', 'appos'), ('Test', 'nmod'), (' ', 'compound'), ('Oracle', 'pobj'), ('"', 'punct'), ('  ', 'punct'), ('ACM', 'compound'), ('SIGSOFT', 'compound'), ('Vol', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[[, 1], [1, ]], [], Aggarwal], [Aggarwal, K.K.], [K.K., ,], [,, Yogesh], [Yogesh, Singh], [Singh, ,], [,, A.Kaur], [A.Kaur, ,], [,, O.P.Sangwan], [O.P.Sangwan, "], [", Neural], [Neural, Net], [Net, Based], [Based, Approach], [Approach, Test], [Test,  ], [ , Oracle], [Oracle, "], [",   ], [  , ACM], [ACM, SIGSOFT], [SIGSOFT, Vol], [Vol, .]]

>> Trigrams: 
[[[, 1, ]], [1, ], Aggarwal], [], Aggarwal, K.K.], [Aggarwal, K.K., ,], [K.K., ,, Yogesh], [,, Yogesh, Singh], [Yogesh, Singh, ,], [Singh, ,, A.Kaur], [,, A.Kaur, ,], [A.Kaur, ,, O.P.Sangwan], [,, O.P.Sangwan, "], [O.P.Sangwan, ", Neural], [", Neural, Net], [Neural, Net, Based], [Net, Based, Approach], [Based, Approach, Test], [Approach, Test,  ], [Test,  , Oracle], [ , Oracle, "], [Oracle, ",   ], [",   , ACM], [  , ACM, SIGSOFT], [ACM, SIGSOFT, Vol], [SIGSOFT, Vol, .]]

>> Noun Phrases are: 
[[1] Aggarwal K.K., O.P.Sangwan, "A Neural Net Based Approach, Test  Oracle, ACM SIGSOFT Vol]

>> Named Entities are: 
[('Yogesh Singh', 'PERSON'), ('A Neural Net Based Approach to Test  Oracle', 'WORK_OF_ART'), ('ACM', 'ORG')] 

------------------- Sentence 4 -------------------

29 No. 4, May 2004. 


>> Tokens are: 
[29, ., 4, ,, 2004, .] 

>> PoS Tags are: 
[('29', 'NUM'), ('.', 'NOUN'), ('4', 'NUM'), (',', 'PUNCT'), ('2004', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('29', 'nummod'), ('.', 'appos'), ('4', 'nummod'), (',', 'punct'), ('2004', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[29, .], [., 4], [4, ,], [,, 2004], [2004, .]]

>> Trigrams: 
[[29, ., 4], [., 4, ,], [4, ,, 2004], [,, 2004, .]]

>> Noun Phrases are: 
[29 No, ., May]

>> Named Entities are: 
[('29', 'CARDINAL'), ('4', 'CARDINAL'), ('May 2004', 'DATE')] 

------------------- Sentence 5 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 6 -------------------

[2]. 


>> Tokens are: 
[[, 2, ], .] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('2', 'NUM'), (']', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('[', 'punct'), ('2', 'ROOT'), (']', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[[, 2], [2, ]], [], .]]

>> Trigrams: 
[[[, 2, ]], [2, ], .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('2', 'CARDINAL')] 

------------------- Sentence 7 -------------------

Agnar Aamodt, Enric Plaza. 


>> Tokens are: 
[Agnar, Aamodt, ,, Enric, Plaza, .] 

>> PoS Tags are: 
[('Agnar', 'PROPN'), ('Aamodt', 'PROPN'), (',', 'PUNCT'), ('Enric', 'PROPN'), ('Plaza', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Agnar', 'compound'), ('Aamodt', 'ROOT'), (',', 'punct'), ('Enric', 'compound'), ('Plaza', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[Agnar, Aamodt], [Aamodt, ,], [,, Enric], [Enric, Plaza], [Plaza, .]]

>> Trigrams: 
[[Agnar, Aamodt, ,], [Aamodt, ,, Enric], [,, Enric, Plaza], [Enric, Plaza, .]]

>> Noun Phrases are: 
[Agnar Aamodt, Enric Plaza]

>> Named Entities are: 
[('Agnar Aamodt', 'PERSON'), ('Enric Plaza', 'FAC')] 

------------------- Sentence 8 -------------------

"Foundational Issues, Methodological Variations, System  approaches."   


>> Tokens are: 
[", Foundational, Issues, ,, Methodological, Variations, ,, System,  , approaches, ., ",  ] 

>> PoS Tags are: 
[('"', 'PUNCT'), ('Foundational', 'PROPN'), ('Issues', 'PROPN'), (',', 'PUNCT'), ('Methodological', 'PROPN'), ('Variations', 'PROPN'), (',', 'PUNCT'), ('System', 'PROPN'), (' ', 'SPACE'), ('approaches', 'NOUN'), ('.', 'PUNCT'), ('"', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('"', 'punct'), ('Foundational', 'compound'), ('Issues', 'ROOT'), (',', 'punct'), ('Methodological', 'compound'), ('Variations', 'appos'), (',', 'punct'), ('System', 'compound'), (' ', 'compound'), ('approaches', 'appos'), ('.', 'punct'), ('"', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[", Foundational], [Foundational, Issues], [Issues, ,], [,, Methodological], [Methodological, Variations], [Variations, ,], [,, System], [System,  ], [ , approaches], [approaches, .], [., "], [",  ]]

>> Trigrams: 
[[", Foundational, Issues], [Foundational, Issues, ,], [Issues, ,, Methodological], [,, Methodological, Variations], [Methodological, Variations, ,], [Variations, ,, System], [,, System,  ], [System,  , approaches], [ , approaches, .], [approaches, ., "], [., ",  ]]

>> Noun Phrases are: 
["Foundational Issues, Methodological Variations, System  approaches]

>> Named Entities are: 
[('Foundational Issues, Methodological Variations, System  ', 'WORK_OF_ART')] 

------------------- Sentence 9 -------------------

AlCom -Artificial Intelligence Communications, IOS Press Vol. 


>> Tokens are: 
[AlCom, -Artificial, Intelligence, Communications, ,, IOS, Press, Vol, .] 

>> PoS Tags are: 
[('AlCom', 'PROPN'), ('-Artificial', 'PROPN'), ('Intelligence', 'PROPN'), ('Communications', 'PROPN'), (',', 'PUNCT'), ('IOS', 'PROPN'), ('Press', 'PROPN'), ('Vol', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('AlCom', 'compound'), ('-Artificial', 'compound'), ('Intelligence', 'compound'), ('Communications', 'ROOT'), (',', 'punct'), ('IOS', 'compound'), ('Press', 'compound'), ('Vol', 'npadvmod'), ('.', 'punct')]

>> Bigrams: 
[[AlCom, -Artificial], [-Artificial, Intelligence], [Intelligence, Communications], [Communications, ,], [,, IOS], [IOS, Press], [Press, Vol], [Vol, .]]

>> Trigrams: 
[[AlCom, -Artificial, Intelligence], [-Artificial, Intelligence, Communications], [Intelligence, Communications, ,], [Communications, ,, IOS], [,, IOS, Press], [IOS, Press, Vol], [Press, Vol, .]]

>> Noun Phrases are: 
[AlCom -Artificial Intelligence Communications]

>> Named Entities are: 
[('AlCom -Artificial Intelligence Communications', 'ORG'), ('IOS Press Vol', 'ORG')] 

------------------- Sentence 10 -------------------

7: 1, pp. 


>> Tokens are: 
[7, :, 1, ,, pp, .] 

>> PoS Tags are: 
[('7', 'NUM'), (':', 'SYM'), ('1', 'NUM'), (',', 'PUNCT'), ('pp', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('7', 'ROOT'), (':', 'punct'), ('1', 'prep'), (',', 'punct'), ('pp', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[7, :], [:, 1], [1, ,], [,, pp], [pp, .]]

>> Trigrams: 
[[7, :, 1], [:, 1, ,], [1, ,, pp], [,, pp, .]]

>> Noun Phrases are: 
[pp]

>> Named Entities are: 
[('7', 'CARDINAL'), ('1', 'CARDINAL')] 

------------------- Sentence 11 -------------------

39-59.   


>> Tokens are: 
[39, -, 59, .,  ] 

>> PoS Tags are: 
[('39', 'NUM'), ('-', 'SYM'), ('59', 'NUM'), ('.', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('39', 'nummod'), ('-', 'punct'), ('59', 'prep'), ('.', 'punct'), (' ', 'ROOT')]

>> Bigrams: 
[[39, -], [-, 59], [59, .], [.,  ]]

>> Trigrams: 
[[39, -, 59], [-, 59, .], [59, .,  ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('39', 'CARDINAL')] 

------------------- Sentence 12 -------------------

[3] 


>> Tokens are: 
[[, 3, ]] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('3', 'NUM'), (']', 'PUNCT')] 

>> Dependency Tags are: 
[('[', 'punct'), ('3', 'ROOT'), (']', 'punct')]

>> Bigrams: 
[[[, 3], [3, ]]]

>> Trigrams: 
[[[, 3, ]]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('3]', 'PRODUCT')] 

------------------- Sentence 13 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 14 -------------------

Al Globus. 


>> Tokens are: 
[Al, Globus, .] 

>> PoS Tags are: 
[('Al', 'PROPN'), ('Globus', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Al', 'compound'), ('Globus', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Al, Globus], [Globus, .]]

>> Trigrams: 
[[Al, Globus, .]]

>> Noun Phrases are: 
[Al Globus]

>> Named Entities are: 
[('Al Globus', 'PERSON')] 

------------------- Sentence 15 -------------------

" 


>> Tokens are: 
["] 

>> PoS Tags are: 
[('"', 'PUNCT')] 

>> Dependency Tags are: 
[('"', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 16 -------------------

Towards 100,000 CPU Cycle-Scavenging by Genetic Algorithms." 


>> Tokens are: 
[100,000, CPU, Cycle, -, Scavenging, Genetic, Algorithms, ., "] 

>> PoS Tags are: 
[('100,000', 'NUM'), ('CPU', 'NOUN'), ('Cycle', 'NOUN'), ('-', 'PUNCT'), ('Scavenging', 'NOUN'), ('Genetic', 'PROPN'), ('Algorithms', 'PROPN'), ('.', 'PUNCT'), ('"', 'PUNCT')] 

>> Dependency Tags are: 
[('100,000', 'nummod'), ('CPU', 'compound'), ('Cycle', 'compound'), ('-', 'punct'), ('Scavenging', 'pobj'), ('Genetic', 'compound'), ('Algorithms', 'pobj'), ('.', 'punct'), ('"', 'punct')]

>> Bigrams: 
[[100,000, CPU], [CPU, Cycle], [Cycle, -], [-, Scavenging], [Scavenging, Genetic], [Genetic, Algorithms], [Algorithms, .], [., "]]

>> Trigrams: 
[[100,000, CPU, Cycle], [CPU, Cycle, -], [Cycle, -, Scavenging], [-, Scavenging, Genetic], [Scavenging, Genetic, Algorithms], [Genetic, Algorithms, .], [Algorithms, ., "]]

>> Noun Phrases are: 
[100,000 CPU Cycle-Scavenging, Genetic Algorithms]

>> Named Entities are: 
[('100,000', 'CARDINAL'), ('Algorithms', 'PERSON')] 

------------------- Sentence 17 -------------------

CSC at NASA   


>> Tokens are: 
[CSC, NASA,  ] 

>> PoS Tags are: 
[('CSC', 'PROPN'), ('NASA', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('CSC', 'ROOT'), ('NASA', 'pobj'), (' ', 'punct')]

>> Bigrams: 
[[CSC, NASA], [NASA,  ]]

>> Trigrams: 
[[CSC, NASA,  ]]

>> Noun Phrases are: 
[CSC, NASA]

>> Named Entities are: 
[('CSC', 'ORG'), ('NASA', 'ORG')] 

------------------- Sentence 18 -------------------

Ames  Research Center, September 2001. 


>> Tokens are: 
[Ames,  , Research, Center, ,, September, 2001, .] 

>> PoS Tags are: 
[('Ames', 'PROPN'), (' ', 'SPACE'), ('Research', 'PROPN'), ('Center', 'PROPN'), (',', 'PUNCT'), ('September', 'PROPN'), ('2001', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Ames', 'compound'), (' ', 'compound'), ('Research', 'compound'), ('Center', 'ROOT'), (',', 'punct'), ('September', 'npadvmod'), ('2001', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[Ames,  ], [ , Research], [Research, Center], [Center, ,], [,, September], [September, 2001], [2001, .]]

>> Trigrams: 
[[Ames,  , Research], [ , Research, Center], [Research, Center, ,], [Center, ,, September], [,, September, 2001], [September, 2001, .]]

>> Noun Phrases are: 
[Ames  Research Center]

>> Named Entities are: 
[('Ames  Research Center', 'ORG'), ('September 2001', 'DATE')] 

------------------- Sentence 19 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 20 -------------------

[4]   


>> Tokens are: 
[[, 4, ],  ] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('4', 'NUM'), (']', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('[', 'punct'), ('4', 'nummod'), (']', 'punct'), (' ', 'ROOT')]

>> Bigrams: 
[[[, 4], [4, ]], [],  ]]

>> Trigrams: 
[[[, 4, ]], [4, ],  ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 21 -------------------

Chris Bozzuto. 


>> Tokens are: 
[Chris, Bozzuto, .] 

>> PoS Tags are: 
[('Chris', 'PROPN'), ('Bozzuto', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Chris', 'compound'), ('Bozzuto', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Chris, Bozzuto], [Bozzuto, .]]

>> Trigrams: 
[[Chris, Bozzuto, .]]

>> Noun Phrases are: 
[Chris Bozzuto]

>> Named Entities are: 
[] 

------------------- Sentence 22 -------------------

 "Machine Learning: Genetic Programming." 


>> Tokens are: 
[ , ", Machine, Learning, :, Genetic, Programming, ., "] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('"', 'PUNCT'), ('Machine', 'PROPN'), ('Learning', 'PROPN'), (':', 'PUNCT'), ('Genetic', 'PROPN'), ('Programming', 'PROPN'), ('.', 'PUNCT'), ('"', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'dep'), ('"', 'punct'), ('Machine', 'compound'), ('Learning', 'ROOT'), (':', 'punct'), ('Genetic', 'compound'), ('Programming', 'appos'), ('.', 'punct'), ('"', 'punct')]

>> Bigrams: 
[[ , "], [", Machine], [Machine, Learning], [Learning, :], [:, Genetic], [Genetic, Programming], [Programming, .], [., "]]

>> Trigrams: 
[[ , ", Machine], [", Machine, Learning], [Machine, Learning, :], [Learning, :, Genetic], [:, Genetic, Programming], [Genetic, Programming, .], [Programming, ., "]]

>> Noun Phrases are: 
[ "Machine Learning, Genetic Programming]

>> Named Entities are: 
[('Machine Learning: Genetic Programming', 'WORK_OF_ART')] 

------------------- Sentence 23 -------------------

February 2002. 


>> Tokens are: 
[February, 2002, .] 

>> PoS Tags are: 
[('February', 'PROPN'), ('2002', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('February', 'ROOT'), ('2002', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[February, 2002], [2002, .]]

>> Trigrams: 
[[February, 2002, .]]

>> Noun Phrases are: 
[February]

>> Named Entities are: 
[('February 2002', 'DATE')] 

------------------- Sentence 24 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 25 -------------------

[5] Dr. Bonnie Morris, West Virginia University "Case Based Reasoning" AI/ES Update vol. 


>> Tokens are: 
[[, 5, ], Dr., Bonnie, Morris, ,, West, Virginia, University, ", Case, Based, Reasoning, ", AI, /, ES, Update, vol, .] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('5', 'NUM'), (']', 'PUNCT'), ('Dr.', 'PROPN'), ('Bonnie', 'PROPN'), ('Morris', 'PROPN'), (',', 'PUNCT'), ('West', 'PROPN'), ('Virginia', 'PROPN'), ('University', 'PROPN'), ('"', 'PUNCT'), ('Case', 'PROPN'), ('Based', 'VERB'), ('Reasoning', 'NOUN'), ('"', 'PUNCT'), ('AI', 'PROPN'), ('/', 'SYM'), ('ES', 'PROPN'), ('Update', 'PROPN'), ('vol', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('[', 'punct'), ('5', 'nmod'), (']', 'punct'), ('Dr.', 'compound'), ('Bonnie', 'compound'), ('Morris', 'appos'), (',', 'punct'), ('West', 'compound'), ('Virginia', 'compound'), ('University', 'nmod'), ('"', 'punct'), ('Case', 'nmod'), ('Based', 'amod'), ('Reasoning', 'nmod'), ('"', 'punct'), ('AI', 'nmod'), ('/', 'punct'), ('ES', 'compound'), ('Update', 'compound'), ('vol', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[[, 5], [5, ]], [], Dr.], [Dr., Bonnie], [Bonnie, Morris], [Morris, ,], [,, West], [West, Virginia], [Virginia, University], [University, "], [", Case], [Case, Based], [Based, Reasoning], [Reasoning, "], [", AI], [AI, /], [/, ES], [ES, Update], [Update, vol], [vol, .]]

>> Trigrams: 
[[[, 5, ]], [5, ], Dr.], [], Dr., Bonnie], [Dr., Bonnie, Morris], [Bonnie, Morris, ,], [Morris, ,, West], [,, West, Virginia], [West, Virginia, University], [Virginia, University, "], [University, ", Case], [", Case, Based], [Case, Based, Reasoning], [Based, Reasoning, "], [Reasoning, ", AI], [", AI, /], [AI, /, ES], [/, ES, Update], [ES, Update, vol], [Update, vol, .]]

>> Noun Phrases are: 
[Dr. Bonnie Morris]

>> Named Entities are: 
[('5', 'CARDINAL'), ('Bonnie Morris', 'PERSON'), ('West Virginia University "', 'ORG'), ('Case Based Reasoning" AI/ES Update', 'WORK_OF_ART')] 

------------------- Sentence 26 -------------------

5 no. 


>> Tokens are: 
[5, .] 

>> PoS Tags are: 
[('5', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('5', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[5, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('5', 'CARDINAL')] 

------------------- Sentence 27 -------------------

 1 Fall 1995. 


>> Tokens are: 
[ , 1, Fall, 1995, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('1', 'NUM'), ('Fall', 'NOUN'), ('1995', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'ROOT'), ('1', 'nummod'), ('Fall', 'npadvmod'), ('1995', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[ , 1], [1, Fall], [Fall, 1995], [1995, .]]

>> Trigrams: 
[[ , 1, Fall], [1, Fall, 1995], [Fall, 1995, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('1 Fall 1995', 'DATE')] 

------------------- Sentence 28 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 29 -------------------

[6] Eleazar Eskin and Eric Siegel. 


>> Tokens are: 
[[, 6, ], Eleazar, Eskin, Eric, Siegel, .] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('6', 'NUM'), (']', 'PUNCT'), ('Eleazar', 'PROPN'), ('Eskin', 'PROPN'), ('Eric', 'PROPN'), ('Siegel', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('[', 'punct'), ('6', 'dep'), (']', 'punct'), ('Eleazar', 'compound'), ('Eskin', 'ROOT'), ('Eric', 'compound'), ('Siegel', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[[, 6], [6, ]], [], Eleazar], [Eleazar, Eskin], [Eskin, Eric], [Eric, Siegel], [Siegel, .]]

>> Trigrams: 
[[[, 6, ]], [6, ], Eleazar], [], Eleazar, Eskin], [Eleazar, Eskin, Eric], [Eskin, Eric, Siegel], [Eric, Siegel, .]]

>> Noun Phrases are: 
[[6] Eleazar Eskin, Eric Siegel]

>> Named Entities are: 
[('Eric Siegel', 'PERSON')] 

------------------- Sentence 30 -------------------

"Genetic Programming Applied to Othello: 


>> Tokens are: 
[", Genetic, Programming, Applied, Othello, :] 

>> PoS Tags are: 
[('"', 'PUNCT'), ('Genetic', 'PROPN'), ('Programming', 'PROPN'), ('Applied', 'VERB'), ('Othello', 'PROPN'), (':', 'PUNCT')] 

>> Dependency Tags are: 
[('"', 'punct'), ('Genetic', 'compound'), ('Programming', 'compound'), ('Applied', 'ROOT'), ('Othello', 'pobj'), (':', 'punct')]

>> Bigrams: 
[[", Genetic], [Genetic, Programming], [Programming, Applied], [Applied, Othello], [Othello, :]]

>> Trigrams: 
[[", Genetic, Programming], [Genetic, Programming, Applied], [Programming, Applied, Othello], [Applied, Othello, :]]

>> Noun Phrases are: 
[Othello]

>> Named Entities are: 
[('Genetic Programming Applied', 'WORK_OF_ART')] 

------------------- Sentence 31 -------------------

Introducing Students  to Machine Learning Research" available at http://www.cs.columbia.edu/~evs/papers/sigcse- paper.ps. 


>> Tokens are: 
[Introducing, Students,  , Machine, Learning, Research, ", available, http://www.cs.columbia.edu/~evs/papers/sigcse-, paper.ps, .] 

>> PoS Tags are: 
[('Introducing', 'VERB'), ('Students', 'NOUN'), (' ', 'SPACE'), ('Machine', 'PROPN'), ('Learning', 'PROPN'), ('Research', 'PROPN'), ('"', 'PUNCT'), ('available', 'ADJ'), ('http://www.cs.columbia.edu/~evs/papers/sigcse-', 'NOUN'), ('paper.ps', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Introducing', 'ROOT'), ('Students', 'dobj'), (' ', 'appos'), ('Machine', 'compound'), ('Learning', 'compound'), ('Research', 'pobj'), ('"', 'punct'), ('available', 'ccomp'), ('http://www.cs.columbia.edu/~evs/papers/sigcse-', 'pobj'), ('paper.ps', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[Introducing, Students], [Students,  ], [ , Machine], [Machine, Learning], [Learning, Research], [Research, "], [", available], [available, http://www.cs.columbia.edu/~evs/papers/sigcse-], [http://www.cs.columbia.edu/~evs/papers/sigcse-, paper.ps], [paper.ps, .]]

>> Trigrams: 
[[Introducing, Students,  ], [Students,  , Machine], [ , Machine, Learning], [Machine, Learning, Research], [Learning, Research, "], [Research, ", available], [", available, http://www.cs.columbia.edu/~evs/papers/sigcse-], [available, http://www.cs.columbia.edu/~evs/papers/sigcse-, paper.ps], [http://www.cs.columbia.edu/~evs/papers/sigcse-, paper.ps, .]]

>> Noun Phrases are: 
[Students, Machine Learning Research, http://www.cs.columbia.edu/~evs/papers/sigcse-]

>> Named Entities are: 
[] 

------------------- Sentence 32 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 33 -------------------

[7] Gavin R. Finnie   and Gerhard E. Wittig, “AI Tools for Software Development Effort  Estimation”, IEEE Transaction on Software Engineering, 1996. 


>> Tokens are: 
[[, 7, ], Gavin, R., Finnie,   , Gerhard, E., Wittig, ,, “, AI, Tools, Software, Development, Effort,  , Estimation, ”, ,, IEEE, Transaction, Software, Engineering, ,, 1996, .] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('7', 'NUM'), (']', 'PUNCT'), ('Gavin', 'PROPN'), ('R.', 'PROPN'), ('Finnie', 'PROPN'), ('  ', 'SPACE'), ('Gerhard', 'PROPN'), ('E.', 'PROPN'), ('Wittig', 'PROPN'), (',', 'PUNCT'), ('“', 'PUNCT'), ('AI', 'PROPN'), ('Tools', 'PROPN'), ('Software', 'PROPN'), ('Development', 'PROPN'), ('Effort', 'PROPN'), (' ', 'SPACE'), ('Estimation', 'PROPN'), ('”', 'PUNCT'), (',', 'PUNCT'), ('IEEE', 'PROPN'), ('Transaction', 'PROPN'), ('Software', 'PROPN'), ('Engineering', 'PROPN'), (',', 'PUNCT'), ('1996', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('[', 'punct'), ('7', 'ROOT'), (']', 'punct'), ('Gavin', 'compound'), ('R.', 'compound'), ('Finnie', 'dative'), ('  ', 'appos'), ('Gerhard', 'compound'), ('E.', 'compound'), ('Wittig', 'conj'), (',', 'punct'), ('“', 'punct'), ('AI', 'compound'), ('Tools', 'appos'), ('Software', 'compound'), ('Development', 'pobj'), ('Effort', 'nmod'), (' ', 'nummod'), ('Estimation', 'pobj'), ('”', 'punct'), (',', 'punct'), ('IEEE', 'compound'), ('Transaction', 'conj'), ('Software', 'compound'), ('Engineering', 'pobj'), (',', 'punct'), ('1996', 'npadvmod'), ('.', 'punct')]

>> Bigrams: 
[[[, 7], [7, ]], [], Gavin], [Gavin, R.], [R., Finnie], [Finnie,   ], [  , Gerhard], [Gerhard, E.], [E., Wittig], [Wittig, ,], [,, “], [“, AI], [AI, Tools], [Tools, Software], [Software, Development], [Development, Effort], [Effort,  ], [ , Estimation], [Estimation, ”], [”, ,], [,, IEEE], [IEEE, Transaction], [Transaction, Software], [Software, Engineering], [Engineering, ,], [,, 1996], [1996, .]]

>> Trigrams: 
[[[, 7, ]], [7, ], Gavin], [], Gavin, R.], [Gavin, R., Finnie], [R., Finnie,   ], [Finnie,   , Gerhard], [  , Gerhard, E.], [Gerhard, E., Wittig], [E., Wittig, ,], [Wittig, ,, “], [,, “, AI], [“, AI, Tools], [AI, Tools, Software], [Tools, Software, Development], [Software, Development, Effort], [Development, Effort,  ], [Effort,  , Estimation], [ , Estimation, ”], [Estimation, ”, ,], [”, ,, IEEE], [,, IEEE, Transaction], [IEEE, Transaction, Software], [Transaction, Software, Engineering], [Software, Engineering, ,], [Engineering, ,, 1996], [,, 1996, .]]

>> Noun Phrases are: 
[Gavin R. Finnie, Gerhard E. Wittig, “AI Tools, Software Development, Effort  Estimation, IEEE Transaction, Software Engineering]

>> Named Entities are: 
[('R. Finnie', 'PERSON'), ('Gerhard E. Wittig', 'PERSON'), ('AI Tools for Software Development Effort  Estimation', 'WORK_OF_ART'), ('IEEE Transaction on Software Engineering', 'ORG'), ('1996', 'DATE')] 

------------------- Sentence 34 -------------------

  [8]  Haykin S., “Neural Networks, A Comprehensive Foundation,” Prentice   


>> Tokens are: 
[  , [, 8, ],  , Haykin, S., ,, “, Neural, Networks, ,, Comprehensive, Foundation, ,, ”, Prentice,  ] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('[', 'PUNCT'), ('8', 'NUM'), (']', 'PUNCT'), (' ', 'SPACE'), ('Haykin', 'PROPN'), ('S.', 'PROPN'), (',', 'PUNCT'), ('“', 'PUNCT'), ('Neural', 'PROPN'), ('Networks', 'PROPN'), (',', 'PUNCT'), ('Comprehensive', 'PROPN'), ('Foundation', 'PROPN'), (',', 'PUNCT'), ('”', 'PUNCT'), ('Prentice', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'dep'), ('[', 'punct'), ('8', 'appos'), (']', 'punct'), (' ', 'appos'), ('Haykin', 'compound'), ('S.', 'appos'), (',', 'punct'), ('“', 'punct'), ('Neural', 'compound'), ('Networks', 'ROOT'), (',', 'punct'), ('Comprehensive', 'compound'), ('Foundation', 'appos'), (',', 'punct'), ('”', 'punct'), ('Prentice', 'appos'), (' ', 'punct')]

>> Bigrams: 
[[  , [], [[, 8], [8, ]], [],  ], [ , Haykin], [Haykin, S.], [S., ,], [,, “], [“, Neural], [Neural, Networks], [Networks, ,], [,, Comprehensive], [Comprehensive, Foundation], [Foundation, ,], [,, ”], [”, Prentice], [Prentice,  ]]

>> Trigrams: 
[[  , [, 8], [[, 8, ]], [8, ],  ], [],  , Haykin], [ , Haykin, S.], [Haykin, S., ,], [S., ,, “], [,, “, Neural], [“, Neural, Networks], [Neural, Networks, ,], [Networks, ,, Comprehensive], [,, Comprehensive, Foundation], [Comprehensive, Foundation, ,], [Foundation, ,, ”], [,, ”, Prentice], [”, Prentice,  ]]

>> Noun Phrases are: 
[Haykin S., A Comprehensive Foundation, Prentice]

>> Named Entities are: 
[('8', 'CARDINAL'), ('Haykin S.', 'PERSON'), ('Neural Networks', 'WORK_OF_ART'), ('Prentice', 'ORG')] 

------------------- Sentence 35 -------------------

Hall India, 2003.   


>> Tokens are: 
[Hall, India, ,, 2003, .,  ] 

>> PoS Tags are: 
[('Hall', 'PROPN'), ('India', 'PROPN'), (',', 'PUNCT'), ('2003', 'NUM'), ('.', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Hall', 'compound'), ('India', 'ROOT'), (',', 'punct'), ('2003', 'appos'), ('.', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[Hall, India], [India, ,], [,, 2003], [2003, .], [.,  ]]

>> Trigrams: 
[[Hall, India, ,], [India, ,, 2003], [,, 2003, .], [2003, .,  ]]

>> Noun Phrases are: 
[Hall India]

>> Named Entities are: 
[('2003', 'DATE')] 

------------------- Sentence 36 -------------------

[9]. 


>> Tokens are: 
[[, 9, ], .] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('9', 'NUM'), (']', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('[', 'punct'), ('9', 'ROOT'), (']', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[[, 9], [9, ]], [], .]]

>> Trigrams: 
[[[, 9, ]], [9, ], .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('9', 'CARDINAL')] 

------------------- Sentence 37 -------------------

Howden William E. and Eichhorst Peter. 


>> Tokens are: 
[Howden, William, E., Eichhorst, Peter, .] 

>> PoS Tags are: 
[('Howden', 'PROPN'), ('William', 'PROPN'), ('E.', 'PROPN'), ('Eichhorst', 'PROPN'), ('Peter', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Howden', 'compound'), ('William', 'compound'), ('E.', 'ROOT'), ('Eichhorst', 'compound'), ('Peter', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[Howden, William], [William, E.], [E., Eichhorst], [Eichhorst, Peter], [Peter, .]]

>> Trigrams: 
[[Howden, William, E.], [William, E., Eichhorst], [E., Eichhorst, Peter], [Eichhorst, Peter, .]]

>> Noun Phrases are: 
[Howden William E., Eichhorst Peter]

>> Named Entities are: 
[('Howden William E.', 'PERSON'), ('Eichhorst Peter', 'PERSON')] 

------------------- Sentence 38 -------------------

Proving properties of programs from program traces. 


>> Tokens are: 
[Proving, properties, programs, program, traces, .] 

>> PoS Tags are: 
[('Proving', 'VERB'), ('properties', 'NOUN'), ('programs', 'NOUN'), ('program', 'NOUN'), ('traces', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Proving', 'ROOT'), ('properties', 'dobj'), ('programs', 'pobj'), ('program', 'compound'), ('traces', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Proving, properties], [properties, programs], [programs, program], [program, traces], [traces, .]]

>> Trigrams: 
[[Proving, properties, programs], [properties, programs, program], [programs, program, traces], [program, traces, .]]

>> Noun Phrases are: 
[properties, programs, program traces]

>> Named Entities are: 
[] 

------------------- Sentence 39 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 40 -------------------

In Tutorial: Software Testing and Validation Techniques: E Miller and W.E.howden(eds.0. 


>> Tokens are: 
[Tutorial, :, Software, Testing, Validation, Techniques, :, E, Miller, W.E.howden(eds.0, .] 

>> PoS Tags are: 
[('Tutorial', 'PROPN'), (':', 'PUNCT'), ('Software', 'PROPN'), ('Testing', 'PROPN'), ('Validation', 'PROPN'), ('Techniques', 'PROPN'), (':', 'PUNCT'), ('E', 'PROPN'), ('Miller', 'PROPN'), ('W.E.howden(eds.0', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Tutorial', 'pobj'), (':', 'punct'), ('Software', 'nmod'), ('Testing', 'nmod'), ('Validation', 'conj'), ('Techniques', 'appos'), (':', 'punct'), ('E', 'compound'), ('Miller', 'ROOT'), ('W.E.howden(eds.0', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[Tutorial, :], [:, Software], [Software, Testing], [Testing, Validation], [Validation, Techniques], [Techniques, :], [:, E], [E, Miller], [Miller, W.E.howden(eds.0], [W.E.howden(eds.0, .]]

>> Trigrams: 
[[Tutorial, :, Software], [:, Software, Testing], [Software, Testing, Validation], [Testing, Validation, Techniques], [Validation, Techniques, :], [Techniques, :, E], [:, E, Miller], [E, Miller, W.E.howden(eds.0], [Miller, W.E.howden(eds.0, .]]

>> Noun Phrases are: 
[Tutorial, Software Testing and Validation Techniques, W.E.howden(eds.0]

>> Named Entities are: 
[('W.E.howden(eds.0', 'CARDINAL')] 

------------------- Sentence 41 -------------------

new  York:IEEE Computer Society Press, 1978. 


>> Tokens are: 
[new,  , York, :, IEEE, Computer, Society, Press, ,, 1978, .] 

>> PoS Tags are: 
[('new', 'ADJ'), (' ', 'SPACE'), ('York', 'PROPN'), (':', 'PUNCT'), ('IEEE', 'PROPN'), ('Computer', 'PROPN'), ('Society', 'PROPN'), ('Press', 'PROPN'), (',', 'PUNCT'), ('1978', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('new', 'amod'), (' ', 'compound'), ('York', 'ROOT'), (':', 'punct'), ('IEEE', 'compound'), ('Computer', 'compound'), ('Society', 'compound'), ('Press', 'appos'), (',', 'punct'), ('1978', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[new,  ], [ , York], [York, :], [:, IEEE], [IEEE, Computer], [Computer, Society], [Society, Press], [Press, ,], [,, 1978], [1978, .]]

>> Trigrams: 
[[new,  , York], [ , York, :], [York, :, IEEE], [:, IEEE, Computer], [IEEE, Computer, Society], [Computer, Society, Press], [Society, Press, ,], [Press, ,, 1978], [,, 1978, .]]

>> Noun Phrases are: 
[new  York, IEEE Computer Society Press]

>> Named Entities are: 
[('IEEE Computer Society Press', 'ORG'), ('1978', 'DATE')] 

------------------- Sentence 42 -------------------

  [10] Hsinchun Chen. 


>> Tokens are: 
[  , [, 10, ], Hsinchun, Chen, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('[', 'PUNCT'), ('10', 'NUM'), (']', 'PUNCT'), ('Hsinchun', 'PROPN'), ('Chen', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('[', 'punct'), ('10', 'appos'), (']', 'punct'), ('Hsinchun', 'compound'), ('Chen', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[  , [], [[, 10], [10, ]], [], Hsinchun], [Hsinchun, Chen], [Chen, .]]

>> Trigrams: 
[[  , [, 10], [[, 10, ]], [10, ], Hsinchun], [], Hsinchun, Chen], [Hsinchun, Chen, .]]

>> Noun Phrases are: 
[Hsinchun Chen]

>> Named Entities are: 
[('10', 'CARDINAL'), ('Hsinchun Chen', 'PERSON')] 

------------------- Sentence 43 -------------------

"Machine Learning for Information Retrieval: Neural Networks, Symbolic   


>> Tokens are: 
[", Machine, Learning, Information, Retrieval, :, Neural, Networks, ,, Symbolic,  ] 

>> PoS Tags are: 
[('"', 'PUNCT'), ('Machine', 'PROPN'), ('Learning', 'PROPN'), ('Information', 'PROPN'), ('Retrieval', 'PROPN'), (':', 'PUNCT'), ('Neural', 'PROPN'), ('Networks', 'PROPN'), (',', 'PUNCT'), ('Symbolic', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('"', 'punct'), ('Machine', 'compound'), ('Learning', 'ROOT'), ('Information', 'compound'), ('Retrieval', 'pobj'), (':', 'punct'), ('Neural', 'compound'), ('Networks', 'appos'), (',', 'punct'), ('Symbolic', 'appos'), (' ', 'punct')]

>> Bigrams: 
[[", Machine], [Machine, Learning], [Learning, Information], [Information, Retrieval], [Retrieval, :], [:, Neural], [Neural, Networks], [Networks, ,], [,, Symbolic], [Symbolic,  ]]

>> Trigrams: 
[[", Machine, Learning], [Machine, Learning, Information], [Learning, Information, Retrieval], [Information, Retrieval, :], [Retrieval, :, Neural], [:, Neural, Networks], [Neural, Networks, ,], [Networks, ,, Symbolic], [,, Symbolic,  ]]

>> Noun Phrases are: 
["Machine Learning, Information Retrieval, Neural Networks, Symbolic]

>> Named Entities are: 
[('Machine Learning for Information Retrieval:', 'WORK_OF_ART')] 

------------------- Sentence 44 -------------------

Learning, and Genetic Algorithms" available at  http://ai.bpa.arizona.edu/papers/mlir93/mlir93.html#318. 


>> Tokens are: 
[Learning, ,, Genetic, Algorithms, ", available,  , http://ai.bpa.arizona.edu/papers/mlir93/mlir93.html#318, .] 

>> PoS Tags are: 
[('Learning', 'PROPN'), (',', 'PUNCT'), ('Genetic', 'PROPN'), ('Algorithms', 'PROPN'), ('"', 'PUNCT'), ('available', 'ADJ'), (' ', 'SPACE'), ('http://ai.bpa.arizona.edu/papers/mlir93/mlir93.html#318', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Learning', 'nsubj'), (',', 'punct'), ('Genetic', 'compound'), ('Algorithms', 'conj'), ('"', 'punct'), ('available', 'ROOT'), (' ', 'pobj'), ('http://ai.bpa.arizona.edu/papers/mlir93/mlir93.html#318', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Learning, ,], [,, Genetic], [Genetic, Algorithms], [Algorithms, "], [", available], [available,  ], [ , http://ai.bpa.arizona.edu/papers/mlir93/mlir93.html#318], [http://ai.bpa.arizona.edu/papers/mlir93/mlir93.html#318, .]]

>> Trigrams: 
[[Learning, ,, Genetic], [,, Genetic, Algorithms], [Genetic, Algorithms, "], [Algorithms, ", available], [", available,  ], [available,  , http://ai.bpa.arizona.edu/papers/mlir93/mlir93.html#318], [ , http://ai.bpa.arizona.edu/papers/mlir93/mlir93.html#318, .]]

>> Noun Phrases are: 
[Learning, Genetic Algorithms, http://ai.bpa.arizona.edu/papers/mlir93/mlir93.html#318]

>> Named Entities are: 
[('Algorithms', 'PERSON')] 

------------------- Sentence 45 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 46 -------------------

[11] Ian Watson & Farhi Marir. " 


>> Tokens are: 
[[, 11, ], Ian, Watson, &, Farhi, Marir, ., "] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('11', 'NUM'), (']', 'PUNCT'), ('Ian', 'PROPN'), ('Watson', 'PROPN'), ('&', 'CCONJ'), ('Farhi', 'PROPN'), ('Marir', 'PROPN'), ('.', 'PUNCT'), ('"', 'PUNCT')] 

>> Dependency Tags are: 
[('[', 'punct'), ('11', 'nummod'), (']', 'punct'), ('Ian', 'compound'), ('Watson', 'ROOT'), ('&', 'cc'), ('Farhi', 'compound'), ('Marir', 'conj'), ('.', 'punct'), ('"', 'punct')]

>> Bigrams: 
[[[, 11], [11, ]], [], Ian], [Ian, Watson], [Watson, &], [&, Farhi], [Farhi, Marir], [Marir, .], [., "]]

>> Trigrams: 
[[[, 11, ]], [11, ], Ian], [], Ian, Watson], [Ian, Watson, &], [Watson, &, Farhi], [&, Farhi, Marir], [Farhi, Marir, .], [Marir, ., "]]

>> Noun Phrases are: 
[[11] Ian Watson, Farhi Marir]

>> Named Entities are: 
[('11', 'CARDINAL')] 

------------------- Sentence 47 -------------------

Case-Based Reasoning: A Review " available at http://www.ai- cbr.org/classroom/cbr-review.html.   


>> Tokens are: 
[Case, -, Based, Reasoning, :, Review, ", available, http://www.ai-, cbr.org/classroom/cbr-review.html, .,  ] 

>> PoS Tags are: 
[('Case', 'NOUN'), ('-', 'PUNCT'), ('Based', 'VERB'), ('Reasoning', 'NOUN'), (':', 'PUNCT'), ('Review', 'PROPN'), ('"', 'PUNCT'), ('available', 'ADJ'), ('http://www.ai-', 'ADJ'), ('cbr.org/classroom/cbr-review.html', 'NOUN'), ('.', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Case', 'npadvmod'), ('-', 'punct'), ('Based', 'amod'), ('Reasoning', 'ROOT'), (':', 'punct'), ('Review', 'appos'), ('"', 'punct'), ('available', 'amod'), ('http://www.ai-', 'compound'), ('cbr.org/classroom/cbr-review.html', 'pobj'), ('.', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[Case, -], [-, Based], [Based, Reasoning], [Reasoning, :], [:, Review], [Review, "], [", available], [available, http://www.ai-], [http://www.ai-, cbr.org/classroom/cbr-review.html], [cbr.org/classroom/cbr-review.html, .], [.,  ]]

>> Trigrams: 
[[Case, -, Based], [-, Based, Reasoning], [Based, Reasoning, :], [Reasoning, :, Review], [:, Review, "], [Review, ", available], [", available, http://www.ai-], [available, http://www.ai-, cbr.org/classroom/cbr-review.html], [http://www.ai-, cbr.org/classroom/cbr-review.html, .], [cbr.org/classroom/cbr-review.html, .,  ]]

>> Noun Phrases are: 
[Case-Based Reasoning, : A Review, http://www.ai- cbr.org/classroom/cbr-review.html]

>> Named Entities are: 
[] 

------------------- Sentence 48 -------------------

[12] Juha Hakkaarainen, Petteri Laamanen, and Raimo Rask, “ Neural Network in Specification  Level Software Size Estimation”, IEEE Transaction on Software Engineering, 1993. 


>> Tokens are: 
[[, 12, ], Juha, Hakkaarainen, ,, Petteri, Laamanen, ,, Raimo, Rask, ,, “, Neural, Network, Specification,  , Level, Software, Size, Estimation, ”, ,, IEEE, Transaction, Software, Engineering, ,, 1993, .] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('12', 'NUM'), (']', 'PUNCT'), ('Juha', 'PROPN'), ('Hakkaarainen', 'PROPN'), (',', 'PUNCT'), ('Petteri', 'PROPN'), ('Laamanen', 'PROPN'), (',', 'PUNCT'), ('Raimo', 'PROPN'), ('Rask', 'PROPN'), (',', 'PUNCT'), ('“', 'PUNCT'), ('Neural', 'PROPN'), ('Network', 'PROPN'), ('Specification', 'PROPN'), (' ', 'SPACE'), ('Level', 'PROPN'), ('Software', 'PROPN'), ('Size', 'PROPN'), ('Estimation', 'PROPN'), ('”', 'PUNCT'), (',', 'PUNCT'), ('IEEE', 'PROPN'), ('Transaction', 'PROPN'), ('Software', 'PROPN'), ('Engineering', 'PROPN'), (',', 'PUNCT'), ('1993', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('[', 'punct'), ('12', 'nummod'), (']', 'punct'), ('Juha', 'compound'), ('Hakkaarainen', 'ROOT'), (',', 'punct'), ('Petteri', 'compound'), ('Laamanen', 'conj'), (',', 'punct'), ('Raimo', 'compound'), ('Rask', 'conj'), (',', 'punct'), ('“', 'punct'), ('Neural', 'compound'), ('Network', 'appos'), ('Specification', 'pobj'), (' ', 'compound'), ('Level', 'compound'), ('Software', 'compound'), ('Size', 'compound'), ('Estimation', 'conj'), ('”', 'punct'), (',', 'punct'), ('IEEE', 'compound'), ('Transaction', 'conj'), ('Software', 'compound'), ('Engineering', 'pobj'), (',', 'punct'), ('1993', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[[, 12], [12, ]], [], Juha], [Juha, Hakkaarainen], [Hakkaarainen, ,], [,, Petteri], [Petteri, Laamanen], [Laamanen, ,], [,, Raimo], [Raimo, Rask], [Rask, ,], [,, “], [“, Neural], [Neural, Network], [Network, Specification], [Specification,  ], [ , Level], [Level, Software], [Software, Size], [Size, Estimation], [Estimation, ”], [”, ,], [,, IEEE], [IEEE, Transaction], [Transaction, Software], [Software, Engineering], [Engineering, ,], [,, 1993], [1993, .]]

>> Trigrams: 
[[[, 12, ]], [12, ], Juha], [], Juha, Hakkaarainen], [Juha, Hakkaarainen, ,], [Hakkaarainen, ,, Petteri], [,, Petteri, Laamanen], [Petteri, Laamanen, ,], [Laamanen, ,, Raimo], [,, Raimo, Rask], [Raimo, Rask, ,], [Rask, ,, “], [,, “, Neural], [“, Neural, Network], [Neural, Network, Specification], [Network, Specification,  ], [Specification,  , Level], [ , Level, Software], [Level, Software, Size], [Software, Size, Estimation], [Size, Estimation, ”], [Estimation, ”, ,], [”, ,, IEEE], [,, IEEE, Transaction], [IEEE, Transaction, Software], [Transaction, Software, Engineering], [Software, Engineering, ,], [Engineering, ,, 1993], [,, 1993, .]]

>> Noun Phrases are: 
[[12] Juha Hakkaarainen, Petteri Laamanen, Raimo Rask, “ Neural Network, Specification,  Level Software Size Estimation, IEEE Transaction, Software Engineering]

>> Named Entities are: 
[('12', 'CARDINAL'), ('Juha Hakkaarainen', 'PERSON'), ('Petteri Laamanen', 'PERSON'), ('Raimo Rask', 'PERSON'), ('Neural Network', 'WORK_OF_ART'), ('IEEE Transaction on Software Engineering', 'ORG'), ('1993', 'DATE')] 

------------------- Sentence 49 -------------------

  [13] Krishnamoorthy Srinivasan and Douglas Fisher, “Machine Learning Approaches to   


>> Tokens are: 
[  , [, 13, ], Krishnamoorthy, Srinivasan, Douglas, Fisher, ,, “, Machine, Learning, Approaches,  ] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('[', 'PUNCT'), ('13', 'NUM'), (']', 'PUNCT'), ('Krishnamoorthy', 'PROPN'), ('Srinivasan', 'PROPN'), ('Douglas', 'PROPN'), ('Fisher', 'PROPN'), (',', 'PUNCT'), ('“', 'PUNCT'), ('Machine', 'NOUN'), ('Learning', 'PROPN'), ('Approaches', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('[', 'punct'), ('13', 'appos'), (']', 'punct'), ('Krishnamoorthy', 'compound'), ('Srinivasan', 'appos'), ('Douglas', 'compound'), ('Fisher', 'conj'), (',', 'punct'), ('“', 'punct'), ('Machine', 'compound'), ('Learning', 'compound'), ('Approaches', 'appos'), (' ', 'pobj')]

>> Bigrams: 
[[  , [], [[, 13], [13, ]], [], Krishnamoorthy], [Krishnamoorthy, Srinivasan], [Srinivasan, Douglas], [Douglas, Fisher], [Fisher, ,], [,, “], [“, Machine], [Machine, Learning], [Learning, Approaches], [Approaches,  ]]

>> Trigrams: 
[[  , [, 13], [[, 13, ]], [13, ], Krishnamoorthy], [], Krishnamoorthy, Srinivasan], [Krishnamoorthy, Srinivasan, Douglas], [Srinivasan, Douglas, Fisher], [Douglas, Fisher, ,], [Fisher, ,, “], [,, “, Machine], [“, Machine, Learning], [Machine, Learning, Approaches], [Learning, Approaches,  ]]

>> Noun Phrases are: 
[Krishnamoorthy Srinivasan, Douglas Fisher, Machine Learning Approaches]

>> Named Entities are: 
[('13', 'CARDINAL'), ('Krishnamoorthy Srinivasan', 'PERSON'), ('Douglas Fisher', 'PERSON'), ('Machine Learning Approaches', 'WORK_OF_ART')] 

------------------- Sentence 50 -------------------

Estimating Software Development Effort”, IEEE Transaction on Software Engineering, 1995. 


>> Tokens are: 
[Estimating, Software, Development, Effort, ”, ,, IEEE, Transaction, Software, Engineering, ,, 1995, .] 

>> PoS Tags are: 
[('Estimating', 'PROPN'), ('Software', 'PROPN'), ('Development', 'PROPN'), ('Effort', 'PROPN'), ('”', 'PUNCT'), (',', 'PUNCT'), ('IEEE', 'PROPN'), ('Transaction', 'PROPN'), ('Software', 'PROPN'), ('Engineering', 'PROPN'), (',', 'PUNCT'), ('1995', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Estimating', 'compound'), ('Software', 'compound'), ('Development', 'compound'), ('Effort', 'ROOT'), ('”', 'punct'), (',', 'punct'), ('IEEE', 'compound'), ('Transaction', 'appos'), ('Software', 'compound'), ('Engineering', 'pobj'), (',', 'punct'), ('1995', 'npadvmod'), ('.', 'punct')]

>> Bigrams: 
[[Estimating, Software], [Software, Development], [Development, Effort], [Effort, ”], [”, ,], [,, IEEE], [IEEE, Transaction], [Transaction, Software], [Software, Engineering], [Engineering, ,], [,, 1995], [1995, .]]

>> Trigrams: 
[[Estimating, Software, Development], [Software, Development, Effort], [Development, Effort, ”], [Effort, ”, ,], [”, ,, IEEE], [,, IEEE, Transaction], [IEEE, Transaction, Software], [Transaction, Software, Engineering], [Software, Engineering, ,], [Engineering, ,, 1995], [,, 1995, .]]

>> Noun Phrases are: 
[Estimating Software Development Effort, IEEE Transaction, Software Engineering]

>> Named Entities are: 
[('IEEE Transaction on Software Engineering', 'ORG'), ('1995', 'DATE')] 

------------------- Sentence 51 -------------------

  [14] Kohonen T., “Self Organizing Maps”, 2nd Edition, Berlin: Springer- Verlag, 1997. 


>> Tokens are: 
[  , [, 14, ], Kohonen, T., ,, “, Self, Organizing, Maps, ”, ,, 2nd, Edition, ,, Berlin, :, Springer-, Verlag, ,, 1997, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('[', 'PUNCT'), ('14', 'NUM'), (']', 'PUNCT'), ('Kohonen', 'PROPN'), ('T.', 'PROPN'), (',', 'PUNCT'), ('“', 'PUNCT'), ('Self', 'PROPN'), ('Organizing', 'PROPN'), ('Maps', 'PROPN'), ('”', 'PUNCT'), (',', 'PUNCT'), ('2nd', 'PROPN'), ('Edition', 'PROPN'), (',', 'PUNCT'), ('Berlin', 'PROPN'), (':', 'PUNCT'), ('Springer-', 'PROPN'), ('Verlag', 'PROPN'), (',', 'PUNCT'), ('1997', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('[', 'punct'), ('14', 'appos'), (']', 'punct'), ('Kohonen', 'compound'), ('T.', 'appos'), (',', 'punct'), ('“', 'punct'), ('Self', 'compound'), ('Organizing', 'compound'), ('Maps', 'appos'), ('”', 'punct'), (',', 'punct'), ('2nd', 'compound'), ('Edition', 'conj'), (',', 'punct'), ('Berlin', 'appos'), (':', 'punct'), ('Springer-', 'compound'), ('Verlag', 'appos'), (',', 'punct'), ('1997', 'npadvmod'), ('.', 'punct')]

>> Bigrams: 
[[  , [], [[, 14], [14, ]], [], Kohonen], [Kohonen, T.], [T., ,], [,, “], [“, Self], [Self, Organizing], [Organizing, Maps], [Maps, ”], [”, ,], [,, 2nd], [2nd, Edition], [Edition, ,], [,, Berlin], [Berlin, :], [:, Springer-], [Springer-, Verlag], [Verlag, ,], [,, 1997], [1997, .]]

>> Trigrams: 
[[  , [, 14], [[, 14, ]], [14, ], Kohonen], [], Kohonen, T.], [Kohonen, T., ,], [T., ,, “], [,, “, Self], [“, Self, Organizing], [Self, Organizing, Maps], [Organizing, Maps, ”], [Maps, ”, ,], [”, ,, 2nd], [,, 2nd, Edition], [2nd, Edition, ,], [Edition, ,, Berlin], [,, Berlin, :], [Berlin, :, Springer-], [:, Springer-, Verlag], [Springer-, Verlag, ,], [Verlag, ,, 1997], [,, 1997, .]]

>> Noun Phrases are: 
[Kohonen T., Self Organizing Maps, 2nd Edition, Berlin, Springer- Verlag]

>> Named Entities are: 
[('14', 'CARDINAL'), ('Kohonen T.', 'PERSON'), ('Self Organizing Maps', 'WORK_OF_ART'), ('2nd Edition', 'FAC'), ('Berlin', 'GPE'), ('1997', 'DATE')] 

------------------- Sentence 52 -------------------

  [15]. 


>> Tokens are: 
[  , [, 15, ], .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('[', 'PUNCT'), ('15', 'NUM'), (']', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('[', 'punct'), ('15', 'appos'), (']', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[  , [], [[, 15], [15, ]], [], .]]

>> Trigrams: 
[[  , [, 15], [[, 15, ]], [15, ], .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('15', 'CARDINAL')] 

------------------- Sentence 53 -------------------

Mayrhauser A. von, Anderson C. and Mraz R., “Using A Neural Network to Predict Test  Case Effectiveness”’ – Procs IEEE Aerospace Applications Conference, Snowmass, CO,  Feb.1995. 


>> Tokens are: 
[Mayrhauser, A., von, ,, Anderson, C., Mraz, R., ,, “, Neural, Network, Predict, Test,  , Case, Effectiveness, ”, ’, –, Procs, IEEE, Aerospace, Applications, Conference, ,, Snowmass, ,, CO, ,,  , Feb.1995, .] 

>> PoS Tags are: 
[('Mayrhauser', 'PROPN'), ('A.', 'PROPN'), ('von', 'PROPN'), (',', 'PUNCT'), ('Anderson', 'PROPN'), ('C.', 'PROPN'), ('Mraz', 'PROPN'), ('R.', 'PROPN'), (',', 'PUNCT'), ('“', 'PUNCT'), ('Neural', 'PROPN'), ('Network', 'PROPN'), ('Predict', 'PROPN'), ('Test', 'PROPN'), (' ', 'SPACE'), ('Case', 'PROPN'), ('Effectiveness', 'PROPN'), ('”', 'PUNCT'), ('’', 'PUNCT'), ('–', 'PUNCT'), ('Procs', 'PROPN'), ('IEEE', 'PROPN'), ('Aerospace', 'PROPN'), ('Applications', 'PROPN'), ('Conference', 'PROPN'), (',', 'PUNCT'), ('Snowmass', 'PROPN'), (',', 'PUNCT'), ('CO', 'PROPN'), (',', 'PUNCT'), (' ', 'SPACE'), ('Feb.1995', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Mayrhauser', 'compound'), ('A.', 'compound'), ('von', 'ROOT'), (',', 'punct'), ('Anderson', 'compound'), ('C.', 'conj'), ('Mraz', 'compound'), ('R.', 'conj'), (',', 'punct'), ('“', 'punct'), ('Neural', 'compound'), ('Network', 'dobj'), ('Predict', 'compound'), ('Test', 'nmod'), (' ', 'nummod'), ('Case', 'compound'), ('Effectiveness', 'pobj'), ('”', 'punct'), ('’', 'punct'), ('–', 'punct'), ('Procs', 'compound'), ('IEEE', 'compound'), ('Aerospace', 'compound'), ('Applications', 'compound'), ('Conference', 'appos'), (',', 'punct'), ('Snowmass', 'conj'), (',', 'punct'), ('CO', 'conj'), (',', 'punct'), (' ', 'compound'), ('Feb.1995', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[Mayrhauser, A.], [A., von], [von, ,], [,, Anderson], [Anderson, C.], [C., Mraz], [Mraz, R.], [R., ,], [,, “], [“, Neural], [Neural, Network], [Network, Predict], [Predict, Test], [Test,  ], [ , Case], [Case, Effectiveness], [Effectiveness, ”], [”, ’], [’, –], [–, Procs], [Procs, IEEE], [IEEE, Aerospace], [Aerospace, Applications], [Applications, Conference], [Conference, ,], [,, Snowmass], [Snowmass, ,], [,, CO], [CO, ,], [,,  ], [ , Feb.1995], [Feb.1995, .]]

>> Trigrams: 
[[Mayrhauser, A., von], [A., von, ,], [von, ,, Anderson], [,, Anderson, C.], [Anderson, C., Mraz], [C., Mraz, R.], [Mraz, R., ,], [R., ,, “], [,, “, Neural], [“, Neural, Network], [Neural, Network, Predict], [Network, Predict, Test], [Predict, Test,  ], [Test,  , Case], [ , Case, Effectiveness], [Case, Effectiveness, ”], [Effectiveness, ”, ’], [”, ’, –], [’, –, Procs], [–, Procs, IEEE], [Procs, IEEE, Aerospace], [IEEE, Aerospace, Applications], [Aerospace, Applications, Conference], [Applications, Conference, ,], [Conference, ,, Snowmass], [,, Snowmass, ,], [Snowmass, ,, CO], [,, CO, ,], [CO, ,,  ], [,,  , Feb.1995], [ , Feb.1995, .]]

>> Noun Phrases are: 
[Mayrhauser A. von, Anderson C., Mraz R., A Neural Network, Predict Test  Case Effectiveness, Procs IEEE Aerospace Applications Conference, Snowmass, CO,  Feb.1995]

>> Named Entities are: 
[('Mayrhauser A. von', 'PERSON'), ('Anderson C.', 'PERSON'), ('Mraz R.', 'PERSON'), ('Using A Neural Network to Predict Test  Case Effectiveness”’ – Procs IEEE Aerospace Applications Conference, Snowmass, CO,  Feb.1995', 'WORK_OF_ART')] 


================================ Paragraph 103 =================================

Yogesh Singh, Pradeep Kumar Bhatia & Omprakash Sangwan  

------------------- Sentence 1 -------------------

Yogesh Singh, Pradeep Kumar Bhatia & Omprakash Sangwan   


>> Tokens are: 
[Yogesh, Singh, ,, Pradeep, Kumar, Bhatia, &, Omprakash, Sangwan,  ] 

>> PoS Tags are: 
[('Yogesh', 'PROPN'), ('Singh', 'PROPN'), (',', 'PUNCT'), ('Pradeep', 'PROPN'), ('Kumar', 'PROPN'), ('Bhatia', 'PROPN'), ('&', 'CCONJ'), ('Omprakash', 'PROPN'), ('Sangwan', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Yogesh', 'compound'), ('Singh', 'ROOT'), (',', 'punct'), ('Pradeep', 'compound'), ('Kumar', 'compound'), ('Bhatia', 'conj'), ('&', 'cc'), ('Omprakash', 'compound'), ('Sangwan', 'conj'), (' ', 'punct')]

>> Bigrams: 
[[Yogesh, Singh], [Singh, ,], [,, Pradeep], [Pradeep, Kumar], [Kumar, Bhatia], [Bhatia, &], [&, Omprakash], [Omprakash, Sangwan], [Sangwan,  ]]

>> Trigrams: 
[[Yogesh, Singh, ,], [Singh, ,, Pradeep], [,, Pradeep, Kumar], [Pradeep, Kumar, Bhatia], [Kumar, Bhatia, &], [Bhatia, &, Omprakash], [&, Omprakash, Sangwan], [Omprakash, Sangwan,  ]]

>> Noun Phrases are: 
[Yogesh Singh, Pradeep Kumar Bhatia, Omprakash Sangwan]

>> Named Entities are: 
[('Yogesh Singh', 'PERSON'), ('Kumar Bhatia & Omprakash Sangwan', 'ORG')] 


================================ Paragraph 104 =================================

International Journal of Computer Science and Security, Volume (1) : Issue (1) 84  

------------------- Sentence 1 -------------------

International Journal of Computer Science and Security, Volume (1) : Issue (1) 84   


>> Tokens are: 
[International, Journal, Computer, Science, Security, ,, Volume, (, 1, ), :, Issue, (, 1, ), 84,  ] 

>> PoS Tags are: 
[('International', 'PROPN'), ('Journal', 'PROPN'), ('Computer', 'PROPN'), ('Science', 'PROPN'), ('Security', 'PROPN'), (',', 'PUNCT'), ('Volume', 'NOUN'), ('(', 'PUNCT'), ('1', 'NUM'), (')', 'PUNCT'), (':', 'PUNCT'), ('Issue', 'NOUN'), ('(', 'PUNCT'), ('1', 'NUM'), (')', 'PUNCT'), ('84', 'NUM'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('International', 'compound'), ('Journal', 'ROOT'), ('Computer', 'compound'), ('Science', 'pobj'), ('Security', 'conj'), (',', 'punct'), ('Volume', 'appos'), ('(', 'punct'), ('1', 'appos'), (')', 'punct'), (':', 'punct'), ('Issue', 'appos'), ('(', 'punct'), ('1', 'appos'), (')', 'punct'), ('84', 'nummod'), (' ', 'appos')]

>> Bigrams: 
[[International, Journal], [Journal, Computer], [Computer, Science], [Science, Security], [Security, ,], [,, Volume], [Volume, (], [(, 1], [1, )], [), :], [:, Issue], [Issue, (], [(, 1], [1, )], [), 84], [84,  ]]

>> Trigrams: 
[[International, Journal, Computer], [Journal, Computer, Science], [Computer, Science, Security], [Science, Security, ,], [Security, ,, Volume], [,, Volume, (], [Volume, (, 1], [(, 1, )], [1, ), :], [), :, Issue], [:, Issue, (], [Issue, (, 1], [(, 1, )], [1, ), 84], [), 84,  ]]

>> Noun Phrases are: 
[International Journal, Computer Science, Security, Volume, Issue]

>> Named Entities are: 
[('International Journal of Computer Science and Security, Volume', 'ORG'), ('1', 'CARDINAL'), ('1', 'CARDINAL')] 


================================ Paragraph 105 =================================

[16] Martin Atzmueller, Joachim Baumeister, Frank Puppe, Wenqi Shi, and John A. Barnden "  Case Based Approaches for handling multiple disorders" Proceedings of the Seventeenth  International Florida Artificial Intelligence Research Society, 2004.   [17] Nahid Amani, Mahmood Fathi and Mahdi Rehghan. "A Case-Based Reasoning Method for  Alarm  Filtering and Correlation in Telecommunication Networks" available at   http://ieeexplore.ieee.org/iel5/10384/33117/01557421.pdf?arnumber=1557421.  [18] Pat Langley, Stanford and Herbert A. Simon, Pittsburgh. "Application of Machine Learning  and Rule Induction." available at http://cll.stanford.edu/~langley/papers/app.cacm.ps.  [19]Peter Flach and Nada Lavrac. "Rule Induction" available at   www.cs.bris.ac.uk/Teaching/Resources/COMSM0301/materials/RuleInductionSection.pdf.  [20] Roger J. Lewis. "An Introduction to Classification and Regression Tree (CART) Analysis"  Presented at the 2000 Annual Meeting of the Society for Academic Emergency Medicine in San   Francisco, California.  [21]  Stephen M Winkler, Michael Aenzeller and Stefan Wagner. "Advances in Applying Genetic  Programming to Machine Learning, Focusing on Classification Problems" available at   http://www.heuristiclab.com/publications/papers/winkler06c.ps.  [22] Susanne Hoche. "Active Relational Rule Learning in a Constrained Confidence-Rated  Boosting Framework" PhD Thesis, Rheinische Friedrich-Wilhelms-Universitaet Bonn, Germany,  December 2004.   [23] Watson, I. & Gardingen, D. " A Distributed Case-Based Reasoning Application for  Engineering Sales Support". In, Proc. 16th Int. Joint Conf. on Artificial Intelligence (IJCAI-99), Vol.  1: pp. 600-605, 1999.  [24] Yisehac Yohannes, John Hoddinott " Classification and Regression Trees- An Introduction"  International Food Policy Research Institute, 1999.  [25] Yisehac Yohannes, Patrick Webb " Classification and Regression Trees" International Food  Policy Research Institute, 1999.         

------------------- Sentence 1 -------------------

[16] Martin Atzmueller, Joachim Baumeister, Frank Puppe, Wenqi Shi, and John A. Barnden "  Case Based 


>> Tokens are: 
[[, 16, ], Martin, Atzmueller, ,, Joachim, Baumeister, ,, Frank, Puppe, ,, Wenqi, Shi, ,, John, A., Barnden, ",  , Case, Based] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('16', 'NUM'), (']', 'PUNCT'), ('Martin', 'PROPN'), ('Atzmueller', 'PROPN'), (',', 'PUNCT'), ('Joachim', 'PROPN'), ('Baumeister', 'PROPN'), (',', 'PUNCT'), ('Frank', 'PROPN'), ('Puppe', 'PROPN'), (',', 'PUNCT'), ('Wenqi', 'PROPN'), ('Shi', 'PROPN'), (',', 'PUNCT'), ('John', 'PROPN'), ('A.', 'PROPN'), ('Barnden', 'PROPN'), ('"', 'PUNCT'), (' ', 'SPACE'), ('Case', 'NOUN'), ('Based', 'VERB')] 

>> Dependency Tags are: 
[('[', 'punct'), ('16', 'nummod'), (']', 'punct'), ('Martin', 'compound'), ('Atzmueller', 'ROOT'), (',', 'punct'), ('Joachim', 'compound'), ('Baumeister', 'conj'), (',', 'punct'), ('Frank', 'compound'), ('Puppe', 'conj'), (',', 'punct'), ('Wenqi', 'compound'), ('Shi', 'conj'), (',', 'punct'), ('John', 'compound'), ('A.', 'compound'), ('Barnden', 'conj'), ('"', 'punct'), (' ', 'compound'), ('Case', 'npadvmod'), ('Based', 'punct')]

>> Bigrams: 
[[[, 16], [16, ]], [], Martin], [Martin, Atzmueller], [Atzmueller, ,], [,, Joachim], [Joachim, Baumeister], [Baumeister, ,], [,, Frank], [Frank, Puppe], [Puppe, ,], [,, Wenqi], [Wenqi, Shi], [Shi, ,], [,, John], [John, A.], [A., Barnden], [Barnden, "], [",  ], [ , Case], [Case, Based]]

>> Trigrams: 
[[[, 16, ]], [16, ], Martin], [], Martin, Atzmueller], [Martin, Atzmueller, ,], [Atzmueller, ,, Joachim], [,, Joachim, Baumeister], [Joachim, Baumeister, ,], [Baumeister, ,, Frank], [,, Frank, Puppe], [Frank, Puppe, ,], [Puppe, ,, Wenqi], [,, Wenqi, Shi], [Wenqi, Shi, ,], [Shi, ,, John], [,, John, A.], [John, A., Barnden], [A., Barnden, "], [Barnden, ",  ], [",  , Case], [ , Case, Based]]

>> Noun Phrases are: 
[[16] Martin Atzmueller, Joachim Baumeister, Frank Puppe, Wenqi Shi, John A. Barnden]

>> Named Entities are: 
[('16', 'CARDINAL'), ('Martin Atzmueller', 'PERSON'), ('Joachim Baumeister', 'PERSON'), ('Frank Puppe', 'PERSON'), ('Wenqi Shi', 'PERSON'), ('John A. Barnden', 'PERSON'), ('Case Based', 'WORK_OF_ART')] 

------------------- Sentence 2 -------------------

Approaches for handling multiple disorders" Proceedings of the Seventeenth  International Florida Artificial Intelligence Research Society, 2004. 


>> Tokens are: 
[Approaches, handling, multiple, disorders, ", Proceedings, Seventeenth,  , International, Florida, Artificial, Intelligence, Research, Society, ,, 2004, .] 

>> PoS Tags are: 
[('Approaches', 'NOUN'), ('handling', 'VERB'), ('multiple', 'ADJ'), ('disorders', 'NOUN'), ('"', 'PUNCT'), ('Proceedings', 'NOUN'), ('Seventeenth', 'PROPN'), (' ', 'SPACE'), ('International', 'PROPN'), ('Florida', 'PROPN'), ('Artificial', 'PROPN'), ('Intelligence', 'PROPN'), ('Research', 'PROPN'), ('Society', 'PROPN'), (',', 'PUNCT'), ('2004', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Approaches', 'ROOT'), ('handling', 'pcomp'), ('multiple', 'amod'), ('disorders', 'dobj'), ('"', 'punct'), ('Proceedings', 'appos'), ('Seventeenth', 'compound'), (' ', 'compound'), ('International', 'compound'), ('Florida', 'compound'), ('Artificial', 'compound'), ('Intelligence', 'compound'), ('Research', 'compound'), ('Society', 'pobj'), (',', 'punct'), ('2004', 'npadvmod'), ('.', 'punct')]

>> Bigrams: 
[[Approaches, handling], [handling, multiple], [multiple, disorders], [disorders, "], [", Proceedings], [Proceedings, Seventeenth], [Seventeenth,  ], [ , International], [International, Florida], [Florida, Artificial], [Artificial, Intelligence], [Intelligence, Research], [Research, Society], [Society, ,], [,, 2004], [2004, .]]

>> Trigrams: 
[[Approaches, handling, multiple], [handling, multiple, disorders], [multiple, disorders, "], [disorders, ", Proceedings], [", Proceedings, Seventeenth], [Proceedings, Seventeenth,  ], [Seventeenth,  , International], [ , International, Florida], [International, Florida, Artificial], [Florida, Artificial, Intelligence], [Artificial, Intelligence, Research], [Intelligence, Research, Society], [Research, Society, ,], [Society, ,, 2004], [,, 2004, .]]

>> Noun Phrases are: 
[Approaches, multiple disorders, " Proceedings, the Seventeenth  International Florida Artificial Intelligence Research Society]

>> Named Entities are: 
[('Proceedings of the Seventeenth', 'WORK_OF_ART'), ('2004', 'DATE')] 

------------------- Sentence 3 -------------------

  [17] Nahid Amani, Mahmood Fathi and Mahdi Rehghan. 


>> Tokens are: 
[  , [, 17, ], Nahid, Amani, ,, Mahmood, Fathi, Mahdi, Rehghan, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('[', 'PUNCT'), ('17', 'NUM'), (']', 'PUNCT'), ('Nahid', 'PROPN'), ('Amani', 'PROPN'), (',', 'PUNCT'), ('Mahmood', 'PROPN'), ('Fathi', 'PROPN'), ('Mahdi', 'PROPN'), ('Rehghan', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('[', 'punct'), ('17', 'appos'), (']', 'punct'), ('Nahid', 'compound'), ('Amani', 'appos'), (',', 'punct'), ('Mahmood', 'compound'), ('Fathi', 'conj'), ('Mahdi', 'compound'), ('Rehghan', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[  , [], [[, 17], [17, ]], [], Nahid], [Nahid, Amani], [Amani, ,], [,, Mahmood], [Mahmood, Fathi], [Fathi, Mahdi], [Mahdi, Rehghan], [Rehghan, .]]

>> Trigrams: 
[[  , [, 17], [[, 17, ]], [17, ], Nahid], [], Nahid, Amani], [Nahid, Amani, ,], [Amani, ,, Mahmood], [,, Mahmood, Fathi], [Mahmood, Fathi, Mahdi], [Fathi, Mahdi, Rehghan], [Mahdi, Rehghan, .]]

>> Noun Phrases are: 
[Nahid Amani, Mahmood Fathi, Mahdi Rehghan]

>> Named Entities are: 
[('17', 'CARDINAL'), ('Nahid Amani', 'PERSON'), ('Mahmood Fathi', 'PERSON'), ('Mahdi Rehghan', 'PERSON')] 

------------------- Sentence 4 -------------------

" 


>> Tokens are: 
["] 

>> PoS Tags are: 
[('"', 'PUNCT')] 

>> Dependency Tags are: 
[('"', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 5 -------------------

A Case-Based Reasoning Method for  Alarm  Filtering and Correlation in Telecommunication Networks" available at   http://ieeexplore.ieee.org/iel5/10384/33117/01557421.pdf?arnumber=1557421. 


>> Tokens are: 
[Case, -, Based, Reasoning, Method,  , Alarm,  , Filtering, Correlation, Telecommunication, Networks, ", available,   , http://ieeexplore.ieee.org/iel5/10384/33117/01557421.pdf?arnumber=1557421, .] 

>> PoS Tags are: 
[('Case', 'PROPN'), ('-', 'PUNCT'), ('Based', 'VERB'), ('Reasoning', 'PROPN'), ('Method', 'PROPN'), (' ', 'SPACE'), ('Alarm', 'PROPN'), (' ', 'SPACE'), ('Filtering', 'PROPN'), ('Correlation', 'PROPN'), ('Telecommunication', 'PROPN'), ('Networks', 'PROPN'), ('"', 'PUNCT'), ('available', 'ADJ'), ('  ', 'SPACE'), ('http://ieeexplore.ieee.org/iel5/10384/33117/01557421.pdf?arnumber=1557421', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Case', 'npadvmod'), ('-', 'punct'), ('Based', 'amod'), ('Reasoning', 'compound'), ('Method', 'nsubj'), (' ', 'pobj'), ('Alarm', 'nmod'), (' ', 'compound'), ('Filtering', 'appos'), ('Correlation', 'conj'), ('Telecommunication', 'compound'), ('Networks', 'pobj'), ('"', 'punct'), ('available', 'ROOT'), ('  ', 'pobj'), ('http://ieeexplore.ieee.org/iel5/10384/33117/01557421.pdf?arnumber=1557421', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[Case, -], [-, Based], [Based, Reasoning], [Reasoning, Method], [Method,  ], [ , Alarm], [Alarm,  ], [ , Filtering], [Filtering, Correlation], [Correlation, Telecommunication], [Telecommunication, Networks], [Networks, "], [", available], [available,   ], [  , http://ieeexplore.ieee.org/iel5/10384/33117/01557421.pdf?arnumber=1557421], [http://ieeexplore.ieee.org/iel5/10384/33117/01557421.pdf?arnumber=1557421, .]]

>> Trigrams: 
[[Case, -, Based], [-, Based, Reasoning], [Based, Reasoning, Method], [Reasoning, Method,  ], [Method,  , Alarm], [ , Alarm,  ], [Alarm,  , Filtering], [ , Filtering, Correlation], [Filtering, Correlation, Telecommunication], [Correlation, Telecommunication, Networks], [Telecommunication, Networks, "], [Networks, ", available], [", available,   ], [available,   , http://ieeexplore.ieee.org/iel5/10384/33117/01557421.pdf?arnumber=1557421], [  , http://ieeexplore.ieee.org/iel5/10384/33117/01557421.pdf?arnumber=1557421, .]]

>> Noun Phrases are: 
[A Case-Based Reasoning Method, Alarm  Filtering, Correlation, Telecommunication Networks, http://ieeexplore.ieee.org/iel5/10384/33117/01557421.pdf?arnumber=1557421]

>> Named Entities are: 
[('A Case-Based Reasoning Method for  Alarm  Filtering and Correlation in Telecommunication Networks', 'WORK_OF_ART')] 

------------------- Sentence 6 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 7 -------------------

[18] Pat Langley, Stanford and Herbert A. Simon, Pittsburgh. 


>> Tokens are: 
[[, 18, ], Pat, Langley, ,, Stanford, Herbert, A., Simon, ,, Pittsburgh, .] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('18', 'NUM'), (']', 'PUNCT'), ('Pat', 'PROPN'), ('Langley', 'PROPN'), (',', 'PUNCT'), ('Stanford', 'PROPN'), ('Herbert', 'PROPN'), ('A.', 'PROPN'), ('Simon', 'PROPN'), (',', 'PUNCT'), ('Pittsburgh', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('[', 'punct'), ('18', 'nummod'), (']', 'punct'), ('Pat', 'compound'), ('Langley', 'ROOT'), (',', 'punct'), ('Stanford', 'conj'), ('Herbert', 'compound'), ('A.', 'compound'), ('Simon', 'conj'), (',', 'punct'), ('Pittsburgh', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[[, 18], [18, ]], [], Pat], [Pat, Langley], [Langley, ,], [,, Stanford], [Stanford, Herbert], [Herbert, A.], [A., Simon], [Simon, ,], [,, Pittsburgh], [Pittsburgh, .]]

>> Trigrams: 
[[[, 18, ]], [18, ], Pat], [], Pat, Langley], [Pat, Langley, ,], [Langley, ,, Stanford], [,, Stanford, Herbert], [Stanford, Herbert, A.], [Herbert, A., Simon], [A., Simon, ,], [Simon, ,, Pittsburgh], [,, Pittsburgh, .]]

>> Noun Phrases are: 
[[18] Pat Langley, Stanford, Herbert A. Simon, Pittsburgh]

>> Named Entities are: 
[('18', 'CARDINAL'), ('Pat Langley', 'PERSON'), ('Stanford', 'ORG'), ('Herbert A. Simon', 'PERSON'), ('Pittsburgh', 'GPE')] 

------------------- Sentence 8 -------------------

"Application of Machine Learning  and Rule Induction." available at http://cll.stanford.edu/~langley/papers/app.cacm.ps. 


>> Tokens are: 
[", Application, Machine, Learning,  , Rule, Induction, ., ", available, http://cll.stanford.edu/~langley/papers/app.cacm.ps, .] 

>> PoS Tags are: 
[('"', 'PUNCT'), ('Application', 'NOUN'), ('Machine', 'PROPN'), ('Learning', 'PROPN'), (' ', 'SPACE'), ('Rule', 'PROPN'), ('Induction', 'PROPN'), ('.', 'PUNCT'), ('"', 'PUNCT'), ('available', 'ADJ'), ('http://cll.stanford.edu/~langley/papers/app.cacm.ps', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('"', 'punct'), ('Application', 'ROOT'), ('Machine', 'compound'), ('Learning', 'pobj'), (' ', 'appos'), ('Rule', 'compound'), ('Induction', 'conj'), ('.', 'punct'), ('"', 'punct'), ('available', 'amod'), ('http://cll.stanford.edu/~langley/papers/app.cacm.ps', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[", Application], [Application, Machine], [Machine, Learning], [Learning,  ], [ , Rule], [Rule, Induction], [Induction, .], [., "], [", available], [available, http://cll.stanford.edu/~langley/papers/app.cacm.ps], [http://cll.stanford.edu/~langley/papers/app.cacm.ps, .]]

>> Trigrams: 
[[", Application, Machine], [Application, Machine, Learning], [Machine, Learning,  ], [Learning,  , Rule], [ , Rule, Induction], [Rule, Induction, .], [Induction, ., "], [., ", available], [", available, http://cll.stanford.edu/~langley/papers/app.cacm.ps], [available, http://cll.stanford.edu/~langley/papers/app.cacm.ps, .]]

>> Noun Phrases are: 
["Application, Machine Learning, Rule Induction]

>> Named Entities are: 
[('Application of Machine Learning', 'ORG')] 

------------------- Sentence 9 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 10 -------------------

[19]Peter Flach and Nada Lavrac. 


>> Tokens are: 
[[, 19]Peter, Flach, Nada, Lavrac, .] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('19]Peter', 'NUM'), ('Flach', 'PROPN'), ('Nada', 'PROPN'), ('Lavrac', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('[', 'punct'), ('19]Peter', 'compound'), ('Flach', 'ROOT'), ('Nada', 'compound'), ('Lavrac', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[[, 19]Peter], [19]Peter, Flach], [Flach, Nada], [Nada, Lavrac], [Lavrac, .]]

>> Trigrams: 
[[[, 19]Peter, Flach], [19]Peter, Flach, Nada], [Flach, Nada, Lavrac], [Nada, Lavrac, .]]

>> Noun Phrases are: 
[[19]Peter Flach, Nada Lavrac]

>> Named Entities are: 
[('Flach', 'PERSON'), ('Nada Lavrac', 'PERSON')] 

------------------- Sentence 11 -------------------

" 


>> Tokens are: 
["] 

>> PoS Tags are: 
[('"', 'PUNCT')] 

>> Dependency Tags are: 
[('"', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 12 -------------------

Rule Induction" available at   www.cs.bris.ac.uk/Teaching/Resources/COMSM0301/materials/RuleInductionSection.pdf. 


>> Tokens are: 
[Rule, Induction, ", available,   , www.cs.bris.ac.uk/Teaching/Resources/COMSM0301/materials/RuleInductionSection.pdf, .] 

>> PoS Tags are: 
[('Rule', 'PROPN'), ('Induction', 'PROPN'), ('"', 'PUNCT'), ('available', 'ADJ'), ('  ', 'SPACE'), ('www.cs.bris.ac.uk/Teaching/Resources/COMSM0301/materials/RuleInductionSection.pdf', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Rule', 'compound'), ('Induction', 'ROOT'), ('"', 'punct'), ('available', 'amod'), ('  ', 'compound'), ('www.cs.bris.ac.uk/Teaching/Resources/COMSM0301/materials/RuleInductionSection.pdf', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Rule, Induction], [Induction, "], [", available], [available,   ], [  , www.cs.bris.ac.uk/Teaching/Resources/COMSM0301/materials/RuleInductionSection.pdf], [www.cs.bris.ac.uk/Teaching/Resources/COMSM0301/materials/RuleInductionSection.pdf, .]]

>> Trigrams: 
[[Rule, Induction, "], [Induction, ", available], [", available,   ], [available,   , www.cs.bris.ac.uk/Teaching/Resources/COMSM0301/materials/RuleInductionSection.pdf], [  , www.cs.bris.ac.uk/Teaching/Resources/COMSM0301/materials/RuleInductionSection.pdf, .]]

>> Noun Phrases are: 
[Rule Induction,   www.cs.bris.ac.uk/Teaching/Resources/COMSM0301/materials/RuleInductionSection.pdf]

>> Named Entities are: 
[] 

------------------- Sentence 13 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 14 -------------------

[20] Roger J. Lewis. 


>> Tokens are: 
[[, 20, ], Roger, J., Lewis, .] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('20', 'NUM'), (']', 'PUNCT'), ('Roger', 'PROPN'), ('J.', 'PROPN'), ('Lewis', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('[', 'punct'), ('20', 'dep'), (']', 'dep'), ('Roger', 'compound'), ('J.', 'compound'), ('Lewis', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[[, 20], [20, ]], [], Roger], [Roger, J.], [J., Lewis], [Lewis, .]]

>> Trigrams: 
[[[, 20, ]], [20, ], Roger], [], Roger, J.], [Roger, J., Lewis], [J., Lewis, .]]

>> Noun Phrases are: 
[[20] Roger J. Lewis]

>> Named Entities are: 
[('Roger J. Lewis', 'PERSON')] 

------------------- Sentence 15 -------------------

" 


>> Tokens are: 
["] 

>> PoS Tags are: 
[('"', 'PUNCT')] 

>> Dependency Tags are: 
[('"', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 16 -------------------

An Introduction to Classification and Regression Tree (CART) Analysis"  Presented at the 2000 Annual Meeting of the Society for Academic Emergency Medicine in San   Francisco, California. 


>> Tokens are: 
[Introduction, Classification, Regression, Tree, (, CART, ), Analysis, ",  , Presented, 2000, Annual, Meeting, Society, Academic, Emergency, Medicine, San,   , Francisco, ,, California, .] 

>> PoS Tags are: 
[('Introduction', 'NOUN'), ('Classification', 'PROPN'), ('Regression', 'PROPN'), ('Tree', 'PROPN'), ('(', 'PUNCT'), ('CART', 'PROPN'), (')', 'PUNCT'), ('Analysis', 'PROPN'), ('"', 'PUNCT'), (' ', 'SPACE'), ('Presented', 'VERB'), ('2000', 'NUM'), ('Annual', 'PROPN'), ('Meeting', 'PROPN'), ('Society', 'PROPN'), ('Academic', 'PROPN'), ('Emergency', 'PROPN'), ('Medicine', 'PROPN'), ('San', 'PROPN'), ('  ', 'SPACE'), ('Francisco', 'PROPN'), (',', 'PUNCT'), ('California', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Introduction', 'nmod'), ('Classification', 'pobj'), ('Regression', 'conj'), ('Tree', 'appos'), ('(', 'punct'), ('CART', 'appos'), (')', 'punct'), ('Analysis', 'ROOT'), ('"', 'punct'), (' ', 'appos'), ('Presented', 'acl'), ('2000', 'nummod'), ('Annual', 'compound'), ('Meeting', 'pobj'), ('Society', 'pobj'), ('Academic', 'compound'), ('Emergency', 'compound'), ('Medicine', 'pobj'), ('San', 'compound'), ('  ', 'pobj'), ('Francisco', 'npadvmod'), (',', 'punct'), ('California', 'npadvmod'), ('.', 'punct')]

>> Bigrams: 
[[Introduction, Classification], [Classification, Regression], [Regression, Tree], [Tree, (], [(, CART], [CART, )], [), Analysis], [Analysis, "], [",  ], [ , Presented], [Presented, 2000], [2000, Annual], [Annual, Meeting], [Meeting, Society], [Society, Academic], [Academic, Emergency], [Emergency, Medicine], [Medicine, San], [San,   ], [  , Francisco], [Francisco, ,], [,, California], [California, .]]

>> Trigrams: 
[[Introduction, Classification, Regression], [Classification, Regression, Tree], [Regression, Tree, (], [Tree, (, CART], [(, CART, )], [CART, ), Analysis], [), Analysis, "], [Analysis, ",  ], [",  , Presented], [ , Presented, 2000], [Presented, 2000, Annual], [2000, Annual, Meeting], [Annual, Meeting, Society], [Meeting, Society, Academic], [Society, Academic, Emergency], [Academic, Emergency, Medicine], [Emergency, Medicine, San], [Medicine, San,   ], [San,   , Francisco], [  , Francisco, ,], [Francisco, ,, California], [,, California, .]]

>> Noun Phrases are: 
[Classification, Regression, Tree, CART, the 2000 Annual Meeting, the Society, Academic Emergency Medicine]

>> Named Entities are: 
[('An Introduction to Classification and Regression Tree (CART) Analysis', 'WORK_OF_ART'), ('2000', 'DATE'), ('the Society for Academic Emergency Medicine', 'ORG'), ('San   Francisco', 'GPE'), ('California', 'GPE')] 

------------------- Sentence 17 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 18 -------------------

[21]   


>> Tokens are: 
[[, 21, ],  ] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('21', 'NUM'), (']', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('[', 'punct'), ('21', 'ROOT'), (']', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[[, 21], [21, ]], [],  ]]

>> Trigrams: 
[[[, 21, ]], [21, ],  ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('21', 'CARDINAL')] 

------------------- Sentence 19 -------------------

Stephen M Winkler, Michael Aenzeller and Stefan Wagner. 


>> Tokens are: 
[Stephen, M, Winkler, ,, Michael, Aenzeller, Stefan, Wagner, .] 

>> PoS Tags are: 
[('Stephen', 'PROPN'), ('M', 'PROPN'), ('Winkler', 'PROPN'), (',', 'PUNCT'), ('Michael', 'PROPN'), ('Aenzeller', 'PROPN'), ('Stefan', 'PROPN'), ('Wagner', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Stephen', 'compound'), ('M', 'compound'), ('Winkler', 'ROOT'), (',', 'punct'), ('Michael', 'compound'), ('Aenzeller', 'conj'), ('Stefan', 'compound'), ('Wagner', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[Stephen, M], [M, Winkler], [Winkler, ,], [,, Michael], [Michael, Aenzeller], [Aenzeller, Stefan], [Stefan, Wagner], [Wagner, .]]

>> Trigrams: 
[[Stephen, M, Winkler], [M, Winkler, ,], [Winkler, ,, Michael], [,, Michael, Aenzeller], [Michael, Aenzeller, Stefan], [Aenzeller, Stefan, Wagner], [Stefan, Wagner, .]]

>> Noun Phrases are: 
[Stephen M Winkler, Michael Aenzeller, Stefan Wagner]

>> Named Entities are: 
[('Michael Aenzeller', 'PERSON'), ('Stefan Wagner', 'PERSON')] 

------------------- Sentence 20 -------------------

"Advances in Applying Genetic  Programming to Machine Learning, Focusing on Classification Problems" available at   http://www.heuristiclab.com/publications/papers/winkler06c.ps. 


>> Tokens are: 
[", Advances, Applying, Genetic,  , Programming, Machine, Learning, ,, Focusing, Classification, Problems, ", available,   , http://www.heuristiclab.com/publications/papers/winkler06c.ps, .] 

>> PoS Tags are: 
[('"', 'PUNCT'), ('Advances', 'NOUN'), ('Applying', 'PROPN'), ('Genetic', 'PROPN'), (' ', 'SPACE'), ('Programming', 'NOUN'), ('Machine', 'PROPN'), ('Learning', 'PROPN'), (',', 'PUNCT'), ('Focusing', 'VERB'), ('Classification', 'PROPN'), ('Problems', 'PROPN'), ('"', 'PUNCT'), ('available', 'ADJ'), ('  ', 'SPACE'), ('http://www.heuristiclab.com/publications/papers/winkler06c.ps', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('"', 'punct'), ('Advances', 'nsubj'), ('Applying', 'compound'), ('Genetic', 'pobj'), (' ', 'punct'), ('Programming', 'appos'), ('Machine', 'compound'), ('Learning', 'pobj'), (',', 'punct'), ('Focusing', 'acl'), ('Classification', 'compound'), ('Problems', 'pobj'), ('"', 'punct'), ('available', 'ROOT'), ('  ', 'pobj'), ('http://www.heuristiclab.com/publications/papers/winkler06c.ps', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[", Advances], [Advances, Applying], [Applying, Genetic], [Genetic,  ], [ , Programming], [Programming, Machine], [Machine, Learning], [Learning, ,], [,, Focusing], [Focusing, Classification], [Classification, Problems], [Problems, "], [", available], [available,   ], [  , http://www.heuristiclab.com/publications/papers/winkler06c.ps], [http://www.heuristiclab.com/publications/papers/winkler06c.ps, .]]

>> Trigrams: 
[[", Advances, Applying], [Advances, Applying, Genetic], [Applying, Genetic,  ], [Genetic,  , Programming], [ , Programming, Machine], [Programming, Machine, Learning], [Machine, Learning, ,], [Learning, ,, Focusing], [,, Focusing, Classification], [Focusing, Classification, Problems], [Classification, Problems, "], [Problems, ", available], [", available,   ], [available,   , http://www.heuristiclab.com/publications/papers/winkler06c.ps], [  , http://www.heuristiclab.com/publications/papers/winkler06c.ps, .]]

>> Noun Phrases are: 
["Advances, Applying Genetic, Programming, Machine Learning, Classification Problems, http://www.heuristiclab.com/publications/papers/winkler06c.ps]

>> Named Entities are: 
[('Programming to Machine Learning, Focusing on Classification Problems', 'ORG')] 

------------------- Sentence 21 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 22 -------------------

[22] Susanne Hoche. 


>> Tokens are: 
[[, 22, ], Susanne, Hoche, .] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('22', 'NUM'), (']', 'PUNCT'), ('Susanne', 'PROPN'), ('Hoche', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('[', 'punct'), ('22', 'dep'), (']', 'punct'), ('Susanne', 'compound'), ('Hoche', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[[, 22], [22, ]], [], Susanne], [Susanne, Hoche], [Hoche, .]]

>> Trigrams: 
[[[, 22, ]], [22, ], Susanne], [], Susanne, Hoche], [Susanne, Hoche, .]]

>> Noun Phrases are: 
[[22] Susanne Hoche]

>> Named Entities are: 
[('22', 'CARDINAL'), ('Susanne Hoche', 'PERSON')] 

------------------- Sentence 23 -------------------

" 


>> Tokens are: 
["] 

>> PoS Tags are: 
[('"', 'PUNCT')] 

>> Dependency Tags are: 
[('"', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 24 -------------------

Active Relational Rule Learning in a Constrained Confidence-Rated  Boosting Framework" PhD Thesis, Rheinische Friedrich-Wilhelms-Universitaet Bonn, Germany,  December 2004. 


>> Tokens are: 
[Active, Relational, Rule, Learning, Constrained, Confidence, -, Rated,  , Boosting, Framework, ", PhD, Thesis, ,, Rheinische, Friedrich, -, Wilhelms, -, Universitaet, Bonn, ,, Germany, ,,  , December, 2004, .] 

>> PoS Tags are: 
[('Active', 'PROPN'), ('Relational', 'PROPN'), ('Rule', 'PROPN'), ('Learning', 'PROPN'), ('Constrained', 'PROPN'), ('Confidence', 'NOUN'), ('-', 'PUNCT'), ('Rated', 'VERB'), (' ', 'SPACE'), ('Boosting', 'PROPN'), ('Framework', 'PROPN'), ('"', 'PUNCT'), ('PhD', 'NOUN'), ('Thesis', 'PROPN'), (',', 'PUNCT'), ('Rheinische', 'PROPN'), ('Friedrich', 'PROPN'), ('-', 'PUNCT'), ('Wilhelms', 'PROPN'), ('-', 'PUNCT'), ('Universitaet', 'PROPN'), ('Bonn', 'PROPN'), (',', 'PUNCT'), ('Germany', 'PROPN'), (',', 'PUNCT'), (' ', 'SPACE'), ('December', 'PROPN'), ('2004', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Active', 'compound'), ('Relational', 'compound'), ('Rule', 'compound'), ('Learning', 'ROOT'), ('Constrained', 'compound'), ('Confidence', 'npadvmod'), ('-', 'punct'), ('Rated', 'amod'), (' ', 'nmod'), ('Boosting', 'compound'), ('Framework', 'nmod'), ('"', 'punct'), ('PhD', 'compound'), ('Thesis', 'pobj'), (',', 'punct'), ('Rheinische', 'compound'), ('Friedrich', 'compound'), ('-', 'punct'), ('Wilhelms', 'compound'), ('-', 'punct'), ('Universitaet', 'compound'), ('Bonn', 'conj'), (',', 'punct'), ('Germany', 'appos'), (',', 'punct'), (' ', 'appos'), ('December', 'npadvmod'), ('2004', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[Active, Relational], [Relational, Rule], [Rule, Learning], [Learning, Constrained], [Constrained, Confidence], [Confidence, -], [-, Rated], [Rated,  ], [ , Boosting], [Boosting, Framework], [Framework, "], [", PhD], [PhD, Thesis], [Thesis, ,], [,, Rheinische], [Rheinische, Friedrich], [Friedrich, -], [-, Wilhelms], [Wilhelms, -], [-, Universitaet], [Universitaet, Bonn], [Bonn, ,], [,, Germany], [Germany, ,], [,,  ], [ , December], [December, 2004], [2004, .]]

>> Trigrams: 
[[Active, Relational, Rule], [Relational, Rule, Learning], [Rule, Learning, Constrained], [Learning, Constrained, Confidence], [Constrained, Confidence, -], [Confidence, -, Rated], [-, Rated,  ], [Rated,  , Boosting], [ , Boosting, Framework], [Boosting, Framework, "], [Framework, ", PhD], [", PhD, Thesis], [PhD, Thesis, ,], [Thesis, ,, Rheinische], [,, Rheinische, Friedrich], [Rheinische, Friedrich, -], [Friedrich, -, Wilhelms], [-, Wilhelms, -], [Wilhelms, -, Universitaet], [-, Universitaet, Bonn], [Universitaet, Bonn, ,], [Bonn, ,, Germany], [,, Germany, ,], [Germany, ,,  ], [,,  , December], [ , December, 2004], [December, 2004, .]]

>> Noun Phrases are: 
[Active Relational Rule Learning, a Constrained Confidence-Rated  Boosting Framework" PhD Thesis, Rheinische Friedrich-Wilhelms-Universitaet Bonn, Germany]

>> Named Entities are: 
[('Active Relational Rule Learning', 'WORK_OF_ART'), ('Constrained Confidence-Rated', 'ORG'), ('PhD Thesis', 'WORK_OF_ART'), ('Rheinische Friedrich-Wilhelms-Universitaet Bonn', 'PERSON'), ('Germany', 'GPE'), ('December 2004', 'DATE')] 

------------------- Sentence 25 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 26 -------------------

[23] Watson, I. & Gardingen, D. " A Distributed Case-Based Reasoning Application for  Engineering Sales Support". 


>> Tokens are: 
[[, 23, ], Watson, ,, I., &, Gardingen, ,, D., ", Distributed, Case, -, Based, Reasoning, Application,  , Engineering, Sales, Support, ", .] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('23', 'NUM'), (']', 'PUNCT'), ('Watson', 'PROPN'), (',', 'PUNCT'), ('I.', 'PROPN'), ('&', 'CCONJ'), ('Gardingen', 'PROPN'), (',', 'PUNCT'), ('D.', 'PROPN'), ('"', 'PUNCT'), ('Distributed', 'VERB'), ('Case', 'NOUN'), ('-', 'PUNCT'), ('Based', 'VERB'), ('Reasoning', 'PROPN'), ('Application', 'PROPN'), (' ', 'SPACE'), ('Engineering', 'PROPN'), ('Sales', 'PROPN'), ('Support', 'PROPN'), ('"', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('[', 'nmod'), ('23', 'nummod'), (']', 'punct'), ('Watson', 'ROOT'), (',', 'punct'), ('I.', 'conj'), ('&', 'cc'), ('Gardingen', 'conj'), (',', 'punct'), ('D.', 'nmod'), ('"', 'punct'), ('Distributed', 'compound'), ('Case', 'npadvmod'), ('-', 'punct'), ('Based', 'amod'), ('Reasoning', 'compound'), ('Application', 'appos'), (' ', 'pobj'), ('Engineering', 'compound'), ('Sales', 'compound'), ('Support', 'pobj'), ('"', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[[, 23], [23, ]], [], Watson], [Watson, ,], [,, I.], [I., &], [&, Gardingen], [Gardingen, ,], [,, D.], [D., "], [", Distributed], [Distributed, Case], [Case, -], [-, Based], [Based, Reasoning], [Reasoning, Application], [Application,  ], [ , Engineering], [Engineering, Sales], [Sales, Support], [Support, "], [", .]]

>> Trigrams: 
[[[, 23, ]], [23, ], Watson], [], Watson, ,], [Watson, ,, I.], [,, I., &], [I., &, Gardingen], [&, Gardingen, ,], [Gardingen, ,, D.], [,, D., "], [D., ", Distributed], [", Distributed, Case], [Distributed, Case, -], [Case, -, Based], [-, Based, Reasoning], [Based, Reasoning, Application], [Reasoning, Application,  ], [Application,  , Engineering], [ , Engineering, Sales], [Engineering, Sales, Support], [Sales, Support, "], [Support, ", .]]

>> Noun Phrases are: 
[[23] Watson, I., Gardingen, D. " A Distributed Case-Based Reasoning Application, Engineering Sales Support]

>> Named Entities are: 
[('23', 'CARDINAL'), ('I. & Gardingen', 'ORG'), ('D.', 'NORP'), ('A Distributed Case-Based Reasoning Application for  Engineering Sales Support', 'WORK_OF_ART')] 

------------------- Sentence 27 -------------------

In, Proc. 16th 


>> Tokens are: 
[,, Proc, ., 16th] 

>> PoS Tags are: 
[(',', 'PUNCT'), ('Proc', 'PROPN'), ('.', 'PUNCT'), ('16th', 'NOUN')] 

>> Dependency Tags are: 
[(',', 'punct'), ('Proc', 'npadvmod'), ('.', 'punct'), ('16th', 'pobj')]

>> Bigrams: 
[[,, Proc], [Proc, .], [., 16th]]

>> Trigrams: 
[[,, Proc, .], [Proc, ., 16th]]

>> Noun Phrases are: 
[16th]

>> Named Entities are: 
[('16th', 'ORDINAL')] 

------------------- Sentence 28 -------------------

Int. 


>> Tokens are: 
[Int, .] 

>> PoS Tags are: 
[('Int', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Int', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Int, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Int]

>> Named Entities are: 
[] 

------------------- Sentence 29 -------------------

Joint Conf. 


>> Tokens are: 
[Joint, Conf, .] 

>> PoS Tags are: 
[('Joint', 'PROPN'), ('Conf', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Joint', 'compound'), ('Conf', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Joint, Conf], [Conf, .]]

>> Trigrams: 
[[Joint, Conf, .]]

>> Noun Phrases are: 
[Joint Conf]

>> Named Entities are: 
[('Joint Conf', 'PERSON')] 

------------------- Sentence 30 -------------------

on Artificial Intelligence (IJCAI-99), Vol.  1: pp. 


>> Tokens are: 
[Artificial, Intelligence, (, IJCAI-99, ), ,, Vol, .,  , 1, :, pp, .] 

>> PoS Tags are: 
[('Artificial', 'PROPN'), ('Intelligence', 'PROPN'), ('(', 'PUNCT'), ('IJCAI-99', 'INTJ'), (')', 'PUNCT'), (',', 'PUNCT'), ('Vol', 'PROPN'), ('.', 'PUNCT'), (' ', 'SPACE'), ('1', 'NUM'), (':', 'PUNCT'), ('pp', 'ADV'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Artificial', 'compound'), ('Intelligence', 'pobj'), ('(', 'punct'), ('IJCAI-99', 'appos'), (')', 'punct'), (',', 'punct'), ('Vol', 'pobj'), ('.', 'punct'), (' ', 'pobj'), ('1', 'nummod'), (':', 'punct'), ('pp', 'prep'), ('.', 'punct')]

>> Bigrams: 
[[Artificial, Intelligence], [Intelligence, (], [(, IJCAI-99], [IJCAI-99, )], [), ,], [,, Vol], [Vol, .], [.,  ], [ , 1], [1, :], [:, pp], [pp, .]]

>> Trigrams: 
[[Artificial, Intelligence, (], [Intelligence, (, IJCAI-99], [(, IJCAI-99, )], [IJCAI-99, ), ,], [), ,, Vol], [,, Vol, .], [Vol, .,  ], [.,  , 1], [ , 1, :], [1, :, pp], [:, pp, .]]

>> Noun Phrases are: 
[Artificial Intelligence, Vol]

>> Named Entities are: 
[('Artificial Intelligence', 'ORG'), ('Vol', 'PERSON'), ('1', 'CARDINAL')] 

------------------- Sentence 31 -------------------

600-605, 1999. 


>> Tokens are: 
[600, -, 605, ,, 1999, .] 

>> PoS Tags are: 
[('600', 'NUM'), ('-', 'SYM'), ('605', 'NUM'), (',', 'PUNCT'), ('1999', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('600', 'ROOT'), ('-', 'punct'), ('605', 'prep'), (',', 'punct'), ('1999', 'npadvmod'), ('.', 'punct')]

>> Bigrams: 
[[600, -], [-, 605], [605, ,], [,, 1999], [1999, .]]

>> Trigrams: 
[[600, -, 605], [-, 605, ,], [605, ,, 1999], [,, 1999, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('600', 'CARDINAL')] 

------------------- Sentence 32 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 33 -------------------

[24] Yisehac Yohannes, John Hoddinott " Classification and Regression 


>> Tokens are: 
[[, 24, ], Yisehac, Yohannes, ,, John, Hoddinott, ", Classification, Regression] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('24', 'NUM'), (']', 'PUNCT'), ('Yisehac', 'PROPN'), ('Yohannes', 'PROPN'), (',', 'PUNCT'), ('John', 'PROPN'), ('Hoddinott', 'PROPN'), ('"', 'PUNCT'), ('Classification', 'PROPN'), ('Regression', 'PROPN')] 

>> Dependency Tags are: 
[('[', 'punct'), ('24', 'dep'), (']', 'dep'), ('Yisehac', 'compound'), ('Yohannes', 'ROOT'), (',', 'punct'), ('John', 'compound'), ('Hoddinott', 'conj'), ('"', 'punct'), ('Classification', 'appos'), ('Regression', 'conj')]

>> Bigrams: 
[[[, 24], [24, ]], [], Yisehac], [Yisehac, Yohannes], [Yohannes, ,], [,, John], [John, Hoddinott], [Hoddinott, "], [", Classification], [Classification, Regression]]

>> Trigrams: 
[[[, 24, ]], [24, ], Yisehac], [], Yisehac, Yohannes], [Yisehac, Yohannes, ,], [Yohannes, ,, John], [,, John, Hoddinott], [John, Hoddinott, "], [Hoddinott, ", Classification], [", Classification, Regression]]

>> Noun Phrases are: 
[[24] Yisehac Yohannes, John Hoddinott, Classification, Regression]

>> Named Entities are: 
[('24', 'CARDINAL'), ('John Hoddinott " Classification and Regression', 'PERSON')] 

------------------- Sentence 34 -------------------

Trees- 


>> Tokens are: 
[Trees-] 

>> PoS Tags are: 
[('Trees-', 'PROPN')] 

>> Dependency Tags are: 
[('Trees-', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Trees-]

>> Named Entities are: 
[] 

------------------- Sentence 35 -------------------

An Introduction"   


>> Tokens are: 
[Introduction, ",  ] 

>> PoS Tags are: 
[('Introduction', 'PROPN'), ('"', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Introduction', 'ROOT'), ('"', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[Introduction, "], [",  ]]

>> Trigrams: 
[[Introduction, ",  ]]

>> Noun Phrases are: 
[An Introduction]

>> Named Entities are: 
[] 

------------------- Sentence 36 -------------------

International Food Policy Research Institute, 1999. 


>> Tokens are: 
[International, Food, Policy, Research, Institute, ,, 1999, .] 

>> PoS Tags are: 
[('International', 'PROPN'), ('Food', 'PROPN'), ('Policy', 'PROPN'), ('Research', 'PROPN'), ('Institute', 'PROPN'), (',', 'PUNCT'), ('1999', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('International', 'compound'), ('Food', 'compound'), ('Policy', 'compound'), ('Research', 'compound'), ('Institute', 'ROOT'), (',', 'punct'), ('1999', 'npadvmod'), ('.', 'punct')]

>> Bigrams: 
[[International, Food], [Food, Policy], [Policy, Research], [Research, Institute], [Institute, ,], [,, 1999], [1999, .]]

>> Trigrams: 
[[International, Food, Policy], [Food, Policy, Research], [Policy, Research, Institute], [Research, Institute, ,], [Institute, ,, 1999], [,, 1999, .]]

>> Noun Phrases are: 
[International Food Policy Research Institute]

>> Named Entities are: 
[('1999', 'DATE')] 

------------------- Sentence 37 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 38 -------------------

[25] Yisehac Yohannes, Patrick Webb " Classification and Regression Trees" International Food  Policy Research Institute, 1999. 


>> Tokens are: 
[[, 25, ], Yisehac, Yohannes, ,, Patrick, Webb, ", Classification, Regression, Trees, ", International, Food,  , Policy, Research, Institute, ,, 1999, .] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('25', 'NUM'), (']', 'PUNCT'), ('Yisehac', 'PROPN'), ('Yohannes', 'PROPN'), (',', 'PUNCT'), ('Patrick', 'PROPN'), ('Webb', 'PROPN'), ('"', 'PUNCT'), ('Classification', 'PROPN'), ('Regression', 'PROPN'), ('Trees', 'PROPN'), ('"', 'PUNCT'), ('International', 'PROPN'), ('Food', 'PROPN'), (' ', 'SPACE'), ('Policy', 'PROPN'), ('Research', 'PROPN'), ('Institute', 'PROPN'), (',', 'PUNCT'), ('1999', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('[', 'punct'), ('25', 'nummod'), (']', 'dep'), ('Yisehac', 'compound'), ('Yohannes', 'ROOT'), (',', 'punct'), ('Patrick', 'compound'), ('Webb', 'nmod'), ('"', 'punct'), ('Classification', 'nmod'), ('Regression', 'conj'), ('Trees', 'nmod'), ('"', 'punct'), ('International', 'nmod'), ('Food', 'compound'), (' ', 'compound'), ('Policy', 'compound'), ('Research', 'compound'), ('Institute', 'conj'), (',', 'punct'), ('1999', 'npadvmod'), ('.', 'punct')]

>> Bigrams: 
[[[, 25], [25, ]], [], Yisehac], [Yisehac, Yohannes], [Yohannes, ,], [,, Patrick], [Patrick, Webb], [Webb, "], [", Classification], [Classification, Regression], [Regression, Trees], [Trees, "], [", International], [International, Food], [Food,  ], [ , Policy], [Policy, Research], [Research, Institute], [Institute, ,], [,, 1999], [1999, .]]

>> Trigrams: 
[[[, 25, ]], [25, ], Yisehac], [], Yisehac, Yohannes], [Yisehac, Yohannes, ,], [Yohannes, ,, Patrick], [,, Patrick, Webb], [Patrick, Webb, "], [Webb, ", Classification], [", Classification, Regression], [Classification, Regression, Trees], [Regression, Trees, "], [Trees, ", International], [", International, Food], [International, Food,  ], [Food,  , Policy], [ , Policy, Research], [Policy, Research, Institute], [Research, Institute, ,], [Institute, ,, 1999], [,, 1999, .]]

>> Noun Phrases are: 
[[25] Yisehac Yohannes, Patrick Webb " Classification and Regression Trees" International Food  Policy Research Institute]

>> Named Entities are: 
[('25', 'CARDINAL'), ('Patrick Webb " Classification and Regression Trees', 'PERSON'), ('International Food  Policy Research Institute', 'WORK_OF_ART'), ('1999', 'DATE')] 

------------------- Sentence 39 -------------------

         


>> Tokens are: 
[        ] 

>> PoS Tags are: 
[('        ', 'SPACE')] 

>> Dependency Tags are: 
[('        ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 
