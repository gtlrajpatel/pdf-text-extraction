				 *** Text Processing using Spacy *** 


================================ Paragraph 1 =================================

Abstract  

------------------- Sentence 1 -------------------

Abstract   


>> Tokens are: 
[Abstract,  ] 

>> PoS Tags are: 
[('Abstract', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Abstract', 'ROOT'), (' ', 'nummod')]

>> Bigrams: 
[[Abstract,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Abstract]

>> Named Entities are: 
[] 


================================ Paragraph 2 =================================

Research in AI has built upon the tools and techniques of  many different disciplines, including formal logic, probabil- ity theory, decision theory, management science, linguistics  and philosophy. However, the application of these disci- plines in AI has necessitated the development of many en- hancements and extensions. Among the most powerful of  these are the methods of computational logic.   

------------------- Sentence 1 -------------------

Research in AI has built upon the tools and techniques of  many different disciplines, including formal logic, probabil- ity theory, decision theory, management science, linguistics  and philosophy. 


>> Tokens are: 
[Research, AI, built, tools, techniques,  , different, disciplines, ,, including, formal, logic, ,, probabil-, ity, theory, ,, decision, theory, ,, management, science, ,, linguistics,  , philosophy, .] 

>> PoS Tags are: 
[('Research', 'NOUN'), ('AI', 'PROPN'), ('built', 'VERB'), ('tools', 'NOUN'), ('techniques', 'NOUN'), (' ', 'SPACE'), ('different', 'ADJ'), ('disciplines', 'NOUN'), (',', 'PUNCT'), ('including', 'VERB'), ('formal', 'ADJ'), ('logic', 'NOUN'), (',', 'PUNCT'), ('probabil-', 'ADJ'), ('ity', 'NOUN'), ('theory', 'NOUN'), (',', 'PUNCT'), ('decision', 'NOUN'), ('theory', 'NOUN'), (',', 'PUNCT'), ('management', 'NOUN'), ('science', 'NOUN'), (',', 'PUNCT'), ('linguistics', 'NOUN'), (' ', 'SPACE'), ('philosophy', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Research', 'nsubj'), ('AI', 'pobj'), ('built', 'ROOT'), ('tools', 'pobj'), ('techniques', 'conj'), (' ', 'pobj'), ('different', 'amod'), ('disciplines', 'appos'), (',', 'punct'), ('including', 'prep'), ('formal', 'amod'), ('logic', 'pobj'), (',', 'punct'), ('probabil-', 'amod'), ('ity', 'compound'), ('theory', 'conj'), (',', 'punct'), ('decision', 'compound'), ('theory', 'conj'), (',', 'punct'), ('management', 'compound'), ('science', 'conj'), (',', 'punct'), ('linguistics', 'compound'), (' ', 'conj'), ('philosophy', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[Research, AI], [AI, built], [built, tools], [tools, techniques], [techniques,  ], [ , different], [different, disciplines], [disciplines, ,], [,, including], [including, formal], [formal, logic], [logic, ,], [,, probabil-], [probabil-, ity], [ity, theory], [theory, ,], [,, decision], [decision, theory], [theory, ,], [,, management], [management, science], [science, ,], [,, linguistics], [linguistics,  ], [ , philosophy], [philosophy, .]]

>> Trigrams: 
[[Research, AI, built], [AI, built, tools], [built, tools, techniques], [tools, techniques,  ], [techniques,  , different], [ , different, disciplines], [different, disciplines, ,], [disciplines, ,, including], [,, including, formal], [including, formal, logic], [formal, logic, ,], [logic, ,, probabil-], [,, probabil-, ity], [probabil-, ity, theory], [ity, theory, ,], [theory, ,, decision], [,, decision, theory], [decision, theory, ,], [theory, ,, management], [,, management, science], [management, science, ,], [science, ,, linguistics], [,, linguistics,  ], [linguistics,  , philosophy], [ , philosophy, .]]

>> Noun Phrases are: 
[Research, AI, the tools, techniques, many different disciplines, formal logic, probabil- ity theory, decision theory, management science, philosophy]

>> Named Entities are: 
[('AI', 'ORG')] 

------------------- Sentence 2 -------------------

However, the application of these disci- plines in AI has necessitated the development of many en- hancements and extensions. 


>> Tokens are: 
[,, application, disci-, plines, AI, necessitated, development, en-, hancements, extensions, .] 

>> PoS Tags are: 
[(',', 'PUNCT'), ('application', 'NOUN'), ('disci-', 'ADJ'), ('plines', 'NOUN'), ('AI', 'PROPN'), ('necessitated', 'VERB'), ('development', 'NOUN'), ('en-', 'ADP'), ('hancements', 'NOUN'), ('extensions', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(',', 'punct'), ('application', 'nsubj'), ('disci-', 'compound'), ('plines', 'pobj'), ('AI', 'pobj'), ('necessitated', 'ROOT'), ('development', 'dobj'), ('en-', 'cc'), ('hancements', 'pobj'), ('extensions', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[,, application], [application, disci-], [disci-, plines], [plines, AI], [AI, necessitated], [necessitated, development], [development, en-], [en-, hancements], [hancements, extensions], [extensions, .]]

>> Trigrams: 
[[,, application, disci-], [application, disci-, plines], [disci-, plines, AI], [plines, AI, necessitated], [AI, necessitated, development], [necessitated, development, en-], [development, en-, hancements], [en-, hancements, extensions], [hancements, extensions, .]]

>> Noun Phrases are: 
[the application, these disci- plines, AI, the development, hancements, extensions]

>> Named Entities are: 
[('AI', 'ORG')] 

------------------- Sentence 3 -------------------

Among the most powerful of  these are the methods of computational logic. 


>> Tokens are: 
[powerful,  , methods, computational, logic, .] 

>> PoS Tags are: 
[('powerful', 'ADJ'), (' ', 'SPACE'), ('methods', 'NOUN'), ('computational', 'ADJ'), ('logic', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('powerful', 'pobj'), (' ', 'pobj'), ('methods', 'attr'), ('computational', 'amod'), ('logic', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[powerful,  ], [ , methods], [methods, computational], [computational, logic], [logic, .]]

>> Trigrams: 
[[powerful,  , methods], [ , methods, computational], [methods, computational, logic], [computational, logic, .]]

>> Noun Phrases are: 
[the methods, computational logic]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 3 =================================

I will argue that computational logic, embedded in an  agent cycle, combines and improves upon both traditional  logic and classical decision theory. I will also argue that  many of its methods can be used, not only in AI, but also in  ordinary life, to help people improve their own human intel- ligence without the assistance of computers.  

------------------- Sentence 1 -------------------

I will argue that computational logic, embedded in an  agent cycle, combines and improves upon both traditional  logic and classical decision theory. 


>> Tokens are: 
[argue, computational, logic, ,, embedded,  , agent, cycle, ,, combines, improves, traditional,  , logic, classical, decision, theory, .] 

>> PoS Tags are: 
[('argue', 'VERB'), ('computational', 'ADJ'), ('logic', 'NOUN'), (',', 'PUNCT'), ('embedded', 'VERB'), (' ', 'SPACE'), ('agent', 'NOUN'), ('cycle', 'NOUN'), (',', 'PUNCT'), ('combines', 'VERB'), ('improves', 'VERB'), ('traditional', 'ADJ'), (' ', 'SPACE'), ('logic', 'NOUN'), ('classical', 'ADJ'), ('decision', 'NOUN'), ('theory', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('argue', 'ROOT'), ('computational', 'amod'), ('logic', 'dobj'), (',', 'punct'), ('embedded', 'acl'), (' ', 'amod'), ('agent', 'compound'), ('cycle', 'pobj'), (',', 'punct'), ('combines', 'conj'), ('improves', 'conj'), ('traditional', 'amod'), (' ', 'nmod'), ('logic', 'nmod'), ('classical', 'amod'), ('decision', 'conj'), ('theory', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[argue, computational], [computational, logic], [logic, ,], [,, embedded], [embedded,  ], [ , agent], [agent, cycle], [cycle, ,], [,, combines], [combines, improves], [improves, traditional], [traditional,  ], [ , logic], [logic, classical], [classical, decision], [decision, theory], [theory, .]]

>> Trigrams: 
[[argue, computational, logic], [computational, logic, ,], [logic, ,, embedded], [,, embedded,  ], [embedded,  , agent], [ , agent, cycle], [agent, cycle, ,], [cycle, ,, combines], [,, combines, improves], [combines, improves, traditional], [improves, traditional,  ], [traditional,  , logic], [ , logic, classical], [logic, classical, decision], [classical, decision, theory], [decision, theory, .]]

>> Noun Phrases are: 
[I, that computational logic, an  agent cycle, both traditional  logic and classical decision theory]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

I will also argue that  many of its methods can be used, not only in AI, but also in  ordinary life, to help people improve their own human intel- ligence without the assistance of computers. 


>> Tokens are: 
[argue,  , methods, ,, AI, ,,  , ordinary, life, ,, help, people, improve, human, intel-, ligence, assistance, computers, .] 

>> PoS Tags are: 
[('argue', 'VERB'), (' ', 'SPACE'), ('methods', 'NOUN'), (',', 'PUNCT'), ('AI', 'PROPN'), (',', 'PUNCT'), (' ', 'SPACE'), ('ordinary', 'ADJ'), ('life', 'NOUN'), (',', 'PUNCT'), ('help', 'VERB'), ('people', 'NOUN'), ('improve', 'VERB'), ('human', 'ADJ'), ('intel-', 'PROPN'), ('ligence', 'NOUN'), ('assistance', 'NOUN'), ('computers', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('argue', 'ROOT'), (' ', 'dep'), ('methods', 'pobj'), (',', 'punct'), ('AI', 'pobj'), (',', 'punct'), (' ', 'pobj'), ('ordinary', 'amod'), ('life', 'pobj'), (',', 'punct'), ('help', 'advcl'), ('people', 'nsubj'), ('improve', 'ccomp'), ('human', 'amod'), ('intel-', 'compound'), ('ligence', 'dobj'), ('assistance', 'pobj'), ('computers', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[argue,  ], [ , methods], [methods, ,], [,, AI], [AI, ,], [,,  ], [ , ordinary], [ordinary, life], [life, ,], [,, help], [help, people], [people, improve], [improve, human], [human, intel-], [intel-, ligence], [ligence, assistance], [assistance, computers], [computers, .]]

>> Trigrams: 
[[argue,  , methods], [ , methods, ,], [methods, ,, AI], [,, AI, ,], [AI, ,,  ], [,,  , ordinary], [ , ordinary, life], [ordinary, life, ,], [life, ,, help], [,, help, people], [help, people, improve], [people, improve, human], [improve, human, intel-], [human, intel-, ligence], [intel-, ligence, assistance], [ligence, assistance, computers], [assistance, computers, .]]

>> Noun Phrases are: 
[I, its methods, AI, ordinary life, people, their own human intel- ligence, the assistance, computers]

>> Named Entities are: 
[('AI', 'ORG')] 

------------------- Sentence 3 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 4 =================================

1 Introduction  

------------------- Sentence 1 -------------------

1 Introduction   


>> Tokens are: 
[1, Introduction,  ] 

>> PoS Tags are: 
[('1', 'NUM'), ('Introduction', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('1', 'nummod'), ('Introduction', 'ROOT'), (' ', 'nummod')]

>> Bigrams: 
[[1, Introduction], [Introduction,  ]]

>> Trigrams: 
[[1, Introduction,  ]]

>> Noun Phrases are: 
[1 Introduction]

>> Named Entities are: 
[] 


================================ Paragraph 5 =================================

Computational logic, like other kinds of logic, comes in  many forms. In this paper, I will focus on the abductive  logic programming (ALP) form of computational logic.   

------------------- Sentence 1 -------------------

Computational logic, like other kinds of logic, comes in  many forms. 


>> Tokens are: 
[Computational, logic, ,, like, kinds, logic, ,, comes,  , forms, .] 

>> PoS Tags are: 
[('Computational', 'ADJ'), ('logic', 'NOUN'), (',', 'PUNCT'), ('like', 'ADP'), ('kinds', 'NOUN'), ('logic', 'NOUN'), (',', 'PUNCT'), ('comes', 'VERB'), (' ', 'SPACE'), ('forms', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Computational', 'amod'), ('logic', 'nsubj'), (',', 'punct'), ('like', 'prep'), ('kinds', 'pobj'), ('logic', 'pobj'), (',', 'punct'), ('comes', 'ROOT'), (' ', 'pobj'), ('forms', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Computational, logic], [logic, ,], [,, like], [like, kinds], [kinds, logic], [logic, ,], [,, comes], [comes,  ], [ , forms], [forms, .]]

>> Trigrams: 
[[Computational, logic, ,], [logic, ,, like], [,, like, kinds], [like, kinds, logic], [kinds, logic, ,], [logic, ,, comes], [,, comes,  ], [comes,  , forms], [ , forms, .]]

>> Noun Phrases are: 
[Computational logic, other kinds, logic, many forms]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

In this paper, I will focus on the abductive  logic programming (ALP) form of computational logic. 


>> Tokens are: 
[paper, ,, focus, abductive,  , logic, programming, (, ALP, ), form, computational, logic, .] 

>> PoS Tags are: 
[('paper', 'NOUN'), (',', 'PUNCT'), ('focus', 'VERB'), ('abductive', 'ADJ'), (' ', 'SPACE'), ('logic', 'NOUN'), ('programming', 'NOUN'), ('(', 'PUNCT'), ('ALP', 'PROPN'), (')', 'PUNCT'), ('form', 'NOUN'), ('computational', 'ADJ'), ('logic', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('paper', 'pobj'), (',', 'punct'), ('focus', 'ROOT'), ('abductive', 'amod'), (' ', 'nmod'), ('logic', 'compound'), ('programming', 'pobj'), ('(', 'punct'), ('ALP', 'appos'), (')', 'punct'), ('form', 'appos'), ('computational', 'amod'), ('logic', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[paper, ,], [,, focus], [focus, abductive], [abductive,  ], [ , logic], [logic, programming], [programming, (], [(, ALP], [ALP, )], [), form], [form, computational], [computational, logic], [logic, .]]

>> Trigrams: 
[[paper, ,, focus], [,, focus, abductive], [focus, abductive,  ], [abductive,  , logic], [ , logic, programming], [logic, programming, (], [programming, (, ALP], [(, ALP, )], [ALP, ), form], [), form, computational], [form, computational, logic], [computational, logic, .]]

>> Noun Phrases are: 
[this paper, I, the abductive  logic programming, ALP, form, computational logic]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 6 =================================

I will argue that the ALP agent model, which embeds  ALP in an agent cycle, is a powerful model of both descrip- tive and normative thinking. As a descriptive model, it in- cludes production systems as a special case; and as a norma- tive model, it includes classical logic and is compatible with  classical decision theory.  

------------------- Sentence 1 -------------------

I will argue that the ALP agent model, which embeds  ALP in an agent cycle, is a powerful model of both descrip- tive and normative thinking. 


>> Tokens are: 
[argue, ALP, agent, model, ,, embeds,  , ALP, agent, cycle, ,, powerful, model, descrip-, tive, normative, thinking, .] 

>> PoS Tags are: 
[('argue', 'VERB'), ('ALP', 'PROPN'), ('agent', 'NOUN'), ('model', 'NOUN'), (',', 'PUNCT'), ('embeds', 'VERB'), (' ', 'SPACE'), ('ALP', 'PROPN'), ('agent', 'NOUN'), ('cycle', 'NOUN'), (',', 'PUNCT'), ('powerful', 'ADJ'), ('model', 'NOUN'), ('descrip-', 'ADJ'), ('tive', 'NOUN'), ('normative', 'ADJ'), ('thinking', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('argue', 'ROOT'), ('ALP', 'compound'), ('agent', 'compound'), ('model', 'nsubj'), (',', 'punct'), ('embeds', 'relcl'), (' ', 'amod'), ('ALP', 'dobj'), ('agent', 'compound'), ('cycle', 'pobj'), (',', 'punct'), ('powerful', 'amod'), ('model', 'attr'), ('descrip-', 'amod'), ('tive', 'pobj'), ('normative', 'conj'), ('thinking', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[argue, ALP], [ALP, agent], [agent, model], [model, ,], [,, embeds], [embeds,  ], [ , ALP], [ALP, agent], [agent, cycle], [cycle, ,], [,, powerful], [powerful, model], [model, descrip-], [descrip-, tive], [tive, normative], [normative, thinking], [thinking, .]]

>> Trigrams: 
[[argue, ALP, agent], [ALP, agent, model], [agent, model, ,], [model, ,, embeds], [,, embeds,  ], [embeds,  , ALP], [ , ALP, agent], [ALP, agent, cycle], [agent, cycle, ,], [cycle, ,, powerful], [,, powerful, model], [powerful, model, descrip-], [model, descrip-, tive], [descrip-, tive, normative], [tive, normative, thinking], [normative, thinking, .]]

>> Noun Phrases are: 
[I, the ALP agent model,  ALP, an agent cycle, a powerful model, tive]

>> Named Entities are: 
[('ALP', 'ORG'), ('ALP', 'ORG')] 

------------------- Sentence 2 -------------------

As a descriptive model, it in- cludes production systems as a special case; and as a norma- tive model, it includes classical logic and is compatible with  classical decision theory. 


>> Tokens are: 
[descriptive, model, ,, in-, cludes, production, systems, special, case, ;, norma-, tive, model, ,, includes, classical, logic, compatible,  , classical, decision, theory, .] 

>> PoS Tags are: 
[('descriptive', 'ADJ'), ('model', 'NOUN'), (',', 'PUNCT'), ('in-', 'VERB'), ('cludes', 'VERB'), ('production', 'NOUN'), ('systems', 'NOUN'), ('special', 'ADJ'), ('case', 'NOUN'), (';', 'PUNCT'), ('norma-', 'ADJ'), ('tive', 'NOUN'), ('model', 'NOUN'), (',', 'PUNCT'), ('includes', 'VERB'), ('classical', 'ADJ'), ('logic', 'NOUN'), ('compatible', 'ADJ'), (' ', 'SPACE'), ('classical', 'ADJ'), ('decision', 'NOUN'), ('theory', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('descriptive', 'amod'), ('model', 'pobj'), (',', 'punct'), ('in-', 'ROOT'), ('cludes', 'xcomp'), ('production', 'compound'), ('systems', 'dobj'), ('special', 'amod'), ('case', 'pobj'), (';', 'punct'), ('norma-', 'amod'), ('tive', 'compound'), ('model', 'pobj'), (',', 'punct'), ('includes', 'conj'), ('classical', 'amod'), ('logic', 'dobj'), ('compatible', 'acomp'), (' ', 'nmod'), ('classical', 'amod'), ('decision', 'compound'), ('theory', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[descriptive, model], [model, ,], [,, in-], [in-, cludes], [cludes, production], [production, systems], [systems, special], [special, case], [case, ;], [;, norma-], [norma-, tive], [tive, model], [model, ,], [,, includes], [includes, classical], [classical, logic], [logic, compatible], [compatible,  ], [ , classical], [classical, decision], [decision, theory], [theory, .]]

>> Trigrams: 
[[descriptive, model, ,], [model, ,, in-], [,, in-, cludes], [in-, cludes, production], [cludes, production, systems], [production, systems, special], [systems, special, case], [special, case, ;], [case, ;, norma-], [;, norma-, tive], [norma-, tive, model], [tive, model, ,], [model, ,, includes], [,, includes, classical], [includes, classical, logic], [classical, logic, compatible], [logic, compatible,  ], [compatible,  , classical], [ , classical, decision], [classical, decision, theory], [decision, theory, .]]

>> Noun Phrases are: 
[a descriptive model, it, production systems, a special case, a norma- tive model, it, classical logic,  classical decision theory]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 7 =================================

These descriptive and normative properties of the ALP  agent model make it a dual process theory, which combines  both intuitive and deliberative thinking. Like most theories,  dual process theories also come in many forms. But in one  form, as Kahneman and Frederick [2002] put it, intuitive  thinking “quickly proposes intuitive answers to judgement  problems as they arise”, while deliberative thinking “moni- tors the quality of these proposals, which it may endorse,  correct, or override”.  

------------------- Sentence 1 -------------------

These descriptive and normative properties of the ALP  agent model make it a dual process theory, which combines  both intuitive and deliberative thinking. 


>> Tokens are: 
[descriptive, normative, properties, ALP,  , agent, model, dual, process, theory, ,, combines,  , intuitive, deliberative, thinking, .] 

>> PoS Tags are: 
[('descriptive', 'ADJ'), ('normative', 'ADJ'), ('properties', 'NOUN'), ('ALP', 'PROPN'), (' ', 'SPACE'), ('agent', 'NOUN'), ('model', 'NOUN'), ('dual', 'ADJ'), ('process', 'NOUN'), ('theory', 'NOUN'), (',', 'PUNCT'), ('combines', 'VERB'), (' ', 'SPACE'), ('intuitive', 'ADJ'), ('deliberative', 'ADJ'), ('thinking', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('descriptive', 'amod'), ('normative', 'conj'), ('properties', 'nsubj'), ('ALP', 'nmod'), (' ', 'nummod'), ('agent', 'compound'), ('model', 'pobj'), ('dual', 'amod'), ('process', 'compound'), ('theory', 'ccomp'), (',', 'punct'), ('combines', 'relcl'), (' ', 'dobj'), ('intuitive', 'amod'), ('deliberative', 'conj'), ('thinking', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[descriptive, normative], [normative, properties], [properties, ALP], [ALP,  ], [ , agent], [agent, model], [model, dual], [dual, process], [process, theory], [theory, ,], [,, combines], [combines,  ], [ , intuitive], [intuitive, deliberative], [deliberative, thinking], [thinking, .]]

>> Trigrams: 
[[descriptive, normative, properties], [normative, properties, ALP], [properties, ALP,  ], [ALP,  , agent], [ , agent, model], [agent, model, dual], [model, dual, process], [dual, process, theory], [process, theory, ,], [theory, ,, combines], [,, combines,  ], [combines,  , intuitive], [ , intuitive, deliberative], [intuitive, deliberative, thinking], [deliberative, thinking, .]]

>> Noun Phrases are: 
[These descriptive and normative properties, the ALP  agent model, it, both intuitive and deliberative thinking]

>> Named Entities are: 
[('ALP', 'ORG')] 

------------------- Sentence 2 -------------------

Like most theories,  dual process theories also come in many forms. 


>> Tokens are: 
[Like, theories, ,,  , dual, process, theories, come, forms, .] 

>> PoS Tags are: 
[('Like', 'ADP'), ('theories', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('dual', 'ADJ'), ('process', 'NOUN'), ('theories', 'NOUN'), ('come', 'VERB'), ('forms', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Like', 'prep'), ('theories', 'pobj'), (',', 'punct'), (' ', 'nmod'), ('dual', 'amod'), ('process', 'compound'), ('theories', 'nsubj'), ('come', 'ROOT'), ('forms', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Like, theories], [theories, ,], [,,  ], [ , dual], [dual, process], [process, theories], [theories, come], [come, forms], [forms, .]]

>> Trigrams: 
[[Like, theories, ,], [theories, ,,  ], [,,  , dual], [ , dual, process], [dual, process, theories], [process, theories, come], [theories, come, forms], [come, forms, .]]

>> Noun Phrases are: 
[most theories,  dual process theories, many forms]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

But in one  form, as Kahneman and Frederick [2002] put it, intuitive  thinking “quickly proposes intuitive answers to judgement  problems as they arise”, while deliberative thinking “moni- tors the quality of these proposals, which it may endorse,  correct, or override”. 


>> Tokens are: 
[ , form, ,, Kahneman, Frederick, [, 2002, ], ,, intuitive,  , thinking, “, quickly, proposes, intuitive, answers, judgement,  , problems, arise, ”, ,, deliberative, thinking, “, moni-, tors, quality, proposals, ,, endorse, ,,  , correct, ,, override, ”, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('form', 'NOUN'), (',', 'PUNCT'), ('Kahneman', 'PROPN'), ('Frederick', 'PROPN'), ('[', 'PUNCT'), ('2002', 'NUM'), (']', 'PUNCT'), (',', 'PUNCT'), ('intuitive', 'ADJ'), (' ', 'SPACE'), ('thinking', 'NOUN'), ('“', 'PUNCT'), ('quickly', 'ADV'), ('proposes', 'VERB'), ('intuitive', 'ADJ'), ('answers', 'NOUN'), ('judgement', 'VERB'), (' ', 'SPACE'), ('problems', 'NOUN'), ('arise', 'VERB'), ('”', 'PUNCT'), (',', 'PUNCT'), ('deliberative', 'ADJ'), ('thinking', 'NOUN'), ('“', 'PUNCT'), ('moni-', 'NOUN'), ('tors', 'NOUN'), ('quality', 'NOUN'), ('proposals', 'NOUN'), (',', 'PUNCT'), ('endorse', 'VERB'), (',', 'PUNCT'), (' ', 'SPACE'), ('correct', 'ADJ'), (',', 'PUNCT'), ('override', 'VERB'), ('”', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'punct'), ('form', 'pobj'), (',', 'punct'), ('Kahneman', 'pobj'), ('Frederick', 'conj'), ('[', 'punct'), ('2002', 'appos'), (']', 'punct'), (',', 'punct'), ('intuitive', 'amod'), (' ', 'compound'), ('thinking', 'advcl'), ('“', 'punct'), ('quickly', 'advmod'), ('proposes', 'ROOT'), ('intuitive', 'amod'), ('answers', 'dobj'), ('judgement', 'advcl'), (' ', 'prep'), ('problems', 'dobj'), ('arise', 'advcl'), ('”', 'punct'), (',', 'punct'), ('deliberative', 'amod'), ('thinking', 'nsubj'), ('“', 'punct'), ('moni-', 'compound'), ('tors', 'advcl'), ('quality', 'dobj'), ('proposals', 'pobj'), (',', 'punct'), ('endorse', 'relcl'), (',', 'punct'), (' ', 'nsubj'), ('correct', 'conj'), (',', 'punct'), ('override', 'conj'), ('”', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[ , form], [form, ,], [,, Kahneman], [Kahneman, Frederick], [Frederick, [], [[, 2002], [2002, ]], [], ,], [,, intuitive], [intuitive,  ], [ , thinking], [thinking, “], [“, quickly], [quickly, proposes], [proposes, intuitive], [intuitive, answers], [answers, judgement], [judgement,  ], [ , problems], [problems, arise], [arise, ”], [”, ,], [,, deliberative], [deliberative, thinking], [thinking, “], [“, moni-], [moni-, tors], [tors, quality], [quality, proposals], [proposals, ,], [,, endorse], [endorse, ,], [,,  ], [ , correct], [correct, ,], [,, override], [override, ”], [”, .]]

>> Trigrams: 
[[ , form, ,], [form, ,, Kahneman], [,, Kahneman, Frederick], [Kahneman, Frederick, [], [Frederick, [, 2002], [[, 2002, ]], [2002, ], ,], [], ,, intuitive], [,, intuitive,  ], [intuitive,  , thinking], [ , thinking, “], [thinking, “, quickly], [“, quickly, proposes], [quickly, proposes, intuitive], [proposes, intuitive, answers], [intuitive, answers, judgement], [answers, judgement,  ], [judgement,  , problems], [ , problems, arise], [problems, arise, ”], [arise, ”, ,], [”, ,, deliberative], [,, deliberative, thinking], [deliberative, thinking, “], [thinking, “, moni-], [“, moni-, tors], [moni-, tors, quality], [tors, quality, proposals], [quality, proposals, ,], [proposals, ,, endorse], [,, endorse, ,], [endorse, ,,  ], [,,  , correct], [ , correct, ,], [correct, ,, override], [,, override, ”], [override, ”, .]]

>> Noun Phrases are: 
[one  form, Kahneman, Frederick, it, intuitive answers, problems, they, deliberative thinking, the quality, these proposals, it]

>> Named Entities are: 
[('one', 'CARDINAL'), ('Kahneman', 'PERSON'), ('Frederick', 'PERSON'), ('2002', 'DATE')] 

------------------- Sentence 4 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 8 =================================

In this paper, I will be concerned mainly with the norma- tive features of the ALP agent model, and on ways in which  it can help us to improve our own human thinking and be- haviour. I will focus, in particular, on ways it can help us  both to communicate more effectively with other people and  to make better decisions in our lives. I will argue that it pro- vides a theoretical underpinning both for such guidelines on  English writing style as [Williams, 1990, 1995], and for  

------------------- Sentence 1 -------------------

In this paper, I will be concerned mainly with the norma- tive features of the ALP agent model, and on ways in which  it can help us to improve our own human thinking and be- haviour. 


>> Tokens are: 
[paper, ,, concerned, mainly, norma-, tive, features, ALP, agent, model, ,, ways,  , help, improve, human, thinking, be-, haviour, .] 

>> PoS Tags are: 
[('paper', 'NOUN'), (',', 'PUNCT'), ('concerned', 'VERB'), ('mainly', 'ADV'), ('norma-', 'ADJ'), ('tive', 'NOUN'), ('features', 'NOUN'), ('ALP', 'PROPN'), ('agent', 'NOUN'), ('model', 'NOUN'), (',', 'PUNCT'), ('ways', 'NOUN'), (' ', 'SPACE'), ('help', 'VERB'), ('improve', 'VERB'), ('human', 'ADJ'), ('thinking', 'NOUN'), ('be-', 'ADJ'), ('haviour', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('paper', 'pobj'), (',', 'punct'), ('concerned', 'ROOT'), ('mainly', 'advmod'), ('norma-', 'amod'), ('tive', 'compound'), ('features', 'pobj'), ('ALP', 'compound'), ('agent', 'compound'), ('model', 'pobj'), (',', 'punct'), ('ways', 'pobj'), (' ', 'relcl'), ('help', 'conj'), ('improve', 'ccomp'), ('human', 'amod'), ('thinking', 'dobj'), ('be-', 'compound'), ('haviour', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[paper, ,], [,, concerned], [concerned, mainly], [mainly, norma-], [norma-, tive], [tive, features], [features, ALP], [ALP, agent], [agent, model], [model, ,], [,, ways], [ways,  ], [ , help], [help, improve], [improve, human], [human, thinking], [thinking, be-], [be-, haviour], [haviour, .]]

>> Trigrams: 
[[paper, ,, concerned], [,, concerned, mainly], [concerned, mainly, norma-], [mainly, norma-, tive], [norma-, tive, features], [tive, features, ALP], [features, ALP, agent], [ALP, agent, model], [agent, model, ,], [model, ,, ways], [,, ways,  ], [ways,  , help], [ , help, improve], [help, improve, human], [improve, human, thinking], [human, thinking, be-], [thinking, be-, haviour], [be-, haviour, .]]

>> Noun Phrases are: 
[this paper, I, the norma- tive features, the ALP agent model, ways, it, us, our own human thinking, be- haviour]

>> Named Entities are: 
[('ALP', 'ORG')] 

------------------- Sentence 2 -------------------

I will focus, in particular, on ways it can help us  both to communicate more effectively with other people and  to make better decisions in our lives. 


>> Tokens are: 
[focus, ,, particular, ,, ways, help,  , communicate, effectively, people,  , better, decisions, lives, .] 

>> PoS Tags are: 
[('focus', 'VERB'), (',', 'PUNCT'), ('particular', 'ADJ'), (',', 'PUNCT'), ('ways', 'NOUN'), ('help', 'VERB'), (' ', 'SPACE'), ('communicate', 'VERB'), ('effectively', 'ADV'), ('people', 'NOUN'), (' ', 'SPACE'), ('better', 'ADJ'), ('decisions', 'NOUN'), ('lives', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('focus', 'ROOT'), (',', 'punct'), ('particular', 'amod'), (',', 'punct'), ('ways', 'pobj'), ('help', 'relcl'), (' ', 'dobj'), ('communicate', 'advcl'), ('effectively', 'advmod'), ('people', 'pobj'), (' ', 'conj'), ('better', 'amod'), ('decisions', 'dobj'), ('lives', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[focus, ,], [,, particular], [particular, ,], [,, ways], [ways, help], [help,  ], [ , communicate], [communicate, effectively], [effectively, people], [people,  ], [ , better], [better, decisions], [decisions, lives], [lives, .]]

>> Trigrams: 
[[focus, ,, particular], [,, particular, ,], [particular, ,, ways], [,, ways, help], [ways, help,  ], [help,  , communicate], [ , communicate, effectively], [communicate, effectively, people], [effectively, people,  ], [people,  , better], [ , better, decisions], [better, decisions, lives], [decisions, lives, .]]

>> Noun Phrases are: 
[I, ways, it, us, other people, better decisions, our lives]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

I will argue that it pro- vides a theoretical underpinning both for such guidelines on  English writing style as [Williams, 1990, 1995], and for   


>> Tokens are: 
[argue, pro-, vides, theoretical, underpinning, guidelines,  , English, writing, style, [, Williams, ,, 1990, ,, 1995, ], ,,  ] 

>> PoS Tags are: 
[('argue', 'VERB'), ('pro-', 'VERB'), ('vides', 'VERB'), ('theoretical', 'ADJ'), ('underpinning', 'NOUN'), ('guidelines', 'NOUN'), (' ', 'SPACE'), ('English', 'ADJ'), ('writing', 'NOUN'), ('style', 'NOUN'), ('[', 'PUNCT'), ('Williams', 'PROPN'), (',', 'PUNCT'), ('1990', 'NUM'), (',', 'PUNCT'), ('1995', 'NUM'), (']', 'PUNCT'), (',', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('argue', 'ROOT'), ('pro-', 'ccomp'), ('vides', 'dobj'), ('theoretical', 'amod'), ('underpinning', 'dobj'), ('guidelines', 'pobj'), (' ', 'nmod'), ('English', 'amod'), ('writing', 'compound'), ('style', 'pobj'), ('[', 'punct'), ('Williams', 'pobj'), (',', 'punct'), ('1990', 'appos'), (',', 'punct'), ('1995', 'nummod'), (']', 'punct'), (',', 'punct'), (' ', 'pobj')]

>> Bigrams: 
[[argue, pro-], [pro-, vides], [vides, theoretical], [theoretical, underpinning], [underpinning, guidelines], [guidelines,  ], [ , English], [English, writing], [writing, style], [style, [], [[, Williams], [Williams, ,], [,, 1990], [1990, ,], [,, 1995], [1995, ]], [], ,], [,,  ]]

>> Trigrams: 
[[argue, pro-, vides], [pro-, vides, theoretical], [vides, theoretical, underpinning], [theoretical, underpinning, guidelines], [underpinning, guidelines,  ], [guidelines,  , English], [ , English, writing], [English, writing, style], [writing, style, [], [style, [, Williams], [[, Williams, ,], [Williams, ,, 1990], [,, 1990, ,], [1990, ,, 1995], [,, 1995, ]], [1995, ], ,], [], ,,  ]]

>> Noun Phrases are: 
[I, it, a theoretical underpinning, such guidelines,  English writing style, Williams]

>> Named Entities are: 
[('English', 'LANGUAGE'), ('Williams', 'PERSON'), ('1990', 'DATE'), ('1995', 'DATE')] 


================================ Paragraph 9 =================================

such advice on better decision-making as [Hammond et al.,  1999]. This paper is based upon [Kowalski, 2011], which  contains the technical underpinnings of the ALP agent  model, as well as references to related work.  

------------------- Sentence 1 -------------------

such advice on better decision-making as [Hammond et al.,  1999]. 


>> Tokens are: 
[advice, better, decision, -, making, [, Hammond, et, al, ., ,,  , 1999, ], .] 

>> PoS Tags are: 
[('advice', 'NOUN'), ('better', 'ADJ'), ('decision', 'NOUN'), ('-', 'PUNCT'), ('making', 'NOUN'), ('[', 'PUNCT'), ('Hammond', 'X'), ('et', 'NOUN'), ('al', 'PROPN'), ('.', 'PROPN'), (',', 'PUNCT'), (' ', 'SPACE'), ('1999', 'NUM'), (']', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('advice', 'ROOT'), ('better', 'amod'), ('decision', 'compound'), ('-', 'punct'), ('making', 'pobj'), ('[', 'punct'), ('Hammond', 'pobj'), ('et', 'compound'), ('al', 'appos'), ('.', 'punct'), (',', 'punct'), (' ', 'appos'), ('1999', 'npadvmod'), (']', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[advice, better], [better, decision], [decision, -], [-, making], [making, [], [[, Hammond], [Hammond, et], [et, al], [al, .], [., ,], [,,  ], [ , 1999], [1999, ]], [], .]]

>> Trigrams: 
[[advice, better, decision], [better, decision, -], [decision, -, making], [-, making, [], [making, [, Hammond], [[, Hammond, et], [Hammond, et, al], [et, al, .], [al, ., ,], [., ,,  ], [,,  , 1999], [ , 1999, ]], [1999, ], .]]

>> Noun Phrases are: 
[such advice, better decision-making, et al]

>> Named Entities are: 
[('1999', 'DATE')] 

------------------- Sentence 2 -------------------

This paper is based upon [Kowalski, 2011], which  contains the technical underpinnings of the ALP agent  model, as well as references to related work. 


>> Tokens are: 
[paper, based, [, Kowalski, ,, 2011, ], ,,  , contains, technical, underpinnings, ALP, agent,  , model, ,, references, related, work, .] 

>> PoS Tags are: 
[('paper', 'NOUN'), ('based', 'VERB'), ('[', 'PUNCT'), ('Kowalski', 'PROPN'), (',', 'PUNCT'), ('2011', 'NUM'), (']', 'PUNCT'), (',', 'PUNCT'), (' ', 'SPACE'), ('contains', 'VERB'), ('technical', 'ADJ'), ('underpinnings', 'NOUN'), ('ALP', 'PROPN'), ('agent', 'NOUN'), (' ', 'SPACE'), ('model', 'NOUN'), (',', 'PUNCT'), ('references', 'NOUN'), ('related', 'ADJ'), ('work', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('paper', 'nsubjpass'), ('based', 'ROOT'), ('[', 'punct'), ('Kowalski', 'pobj'), (',', 'punct'), ('2011', 'appos'), (']', 'punct'), (',', 'punct'), (' ', 'nsubj'), ('contains', 'relcl'), ('technical', 'amod'), ('underpinnings', 'dobj'), ('ALP', 'compound'), ('agent', 'pobj'), (' ', 'compound'), ('model', 'appos'), (',', 'punct'), ('references', 'conj'), ('related', 'amod'), ('work', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[paper, based], [based, [], [[, Kowalski], [Kowalski, ,], [,, 2011], [2011, ]], [], ,], [,,  ], [ , contains], [contains, technical], [technical, underpinnings], [underpinnings, ALP], [ALP, agent], [agent,  ], [ , model], [model, ,], [,, references], [references, related], [related, work], [work, .]]

>> Trigrams: 
[[paper, based, [], [based, [, Kowalski], [[, Kowalski, ,], [Kowalski, ,, 2011], [,, 2011, ]], [2011, ], ,], [], ,,  ], [,,  , contains], [ , contains, technical], [contains, technical, underpinnings], [technical, underpinnings, ALP], [underpinnings, ALP, agent], [ALP, agent,  ], [agent,  , model], [ , model, ,], [model, ,, references], [,, references, related], [references, related, work], [related, work, .]]

>> Noun Phrases are: 
[This paper, Kowalski, the technical underpinnings, the ALP agent,  model, related work]

>> Named Entities are: 
[('Kowalski', 'PERSON'), ('2011', 'DATE'), ('ALP', 'ORG')] 

------------------- Sentence 3 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 10 =================================

    

------------------- Sentence 1 -------------------

     


>> Tokens are: 
[    ] 

>> PoS Tags are: 
[('    ', 'SPACE')] 

>> Dependency Tags are: 
[('    ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 11 =================================

    

------------------- Sentence 1 -------------------

     


>> Tokens are: 
[    ] 

>> PoS Tags are: 
[('    ', 'SPACE')] 

>> Dependency Tags are: 
[('    ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 12 =================================

  

------------------- Sentence 1 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 13 =================================

  

------------------- Sentence 1 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 14 =================================

  

------------------- Sentence 1 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 15 =================================

  

------------------- Sentence 1 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 16 =================================

  

------------------- Sentence 1 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 17 =================================

  

------------------- Sentence 1 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 18 =================================

  

------------------- Sentence 1 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 19 =================================

  

------------------- Sentence 1 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 20 =================================

  

------------------- Sentence 1 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 21 =================================

  

------------------- Sentence 1 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 22 =================================

  

------------------- Sentence 1 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 23 =================================

  

------------------- Sentence 1 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 24 =================================

  

------------------- Sentence 1 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 25 =================================

  

------------------- Sentence 1 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 26 =================================

  

------------------- Sentence 1 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 27 =================================

Figure 1. The basic ALP agent cycle   

------------------- Sentence 1 -------------------

Figure 1. 


>> Tokens are: 
[Figure, 1, .] 

>> PoS Tags are: 
[('Figure', 'VERB'), ('1', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Figure', 'ROOT'), ('1', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[Figure, 1], [1, .]]

>> Trigrams: 
[[Figure, 1, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('1', 'CARDINAL')] 

------------------- Sentence 2 -------------------

The basic ALP agent cycle    


>> Tokens are: 
[basic, ALP, agent, cycle,   ] 

>> PoS Tags are: 
[('basic', 'ADJ'), ('ALP', 'PROPN'), ('agent', 'NOUN'), ('cycle', 'NOUN'), ('  ', 'SPACE')] 

>> Dependency Tags are: 
[('basic', 'amod'), ('ALP', 'compound'), ('agent', 'compound'), ('cycle', 'compound'), ('  ', 'ROOT')]

>> Bigrams: 
[[basic, ALP], [ALP, agent], [agent, cycle], [cycle,   ]]

>> Trigrams: 
[[basic, ALP, agent], [ALP, agent, cycle], [agent, cycle,   ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('ALP', 'ORG')] 


================================ Paragraph 28 =================================

2 A Brief Introduction to ALP Agents  

------------------- Sentence 1 -------------------

2 A Brief Introduction to ALP Agents   


>> Tokens are: 
[2, Brief, Introduction, ALP, Agents,  ] 

>> PoS Tags are: 
[('2', 'NUM'), ('Brief', 'ADJ'), ('Introduction', 'NOUN'), ('ALP', 'PROPN'), ('Agents', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('2', 'nummod'), ('Brief', 'amod'), ('Introduction', 'ROOT'), ('ALP', 'compound'), ('Agents', 'pobj'), (' ', 'appos')]

>> Bigrams: 
[[2, Brief], [Brief, Introduction], [Introduction, ALP], [ALP, Agents], [Agents,  ]]

>> Trigrams: 
[[2, Brief, Introduction], [Brief, Introduction, ALP], [Introduction, ALP, Agents], [ALP, Agents,  ]]

>> Noun Phrases are: 
[2 A Brief Introduction, ALP Agents]

>> Named Entities are: 
[('2', 'CARDINAL')] 


================================ Paragraph 29 =================================

The ALP agent model can be viewed as a variant of the BDI  model, in which agents use their beliefs to satisfy their de- sires by generating intentions, which are selected plans of  actions. In ALP agents, beliefs and desires (or goals) are  both represented as conditionals in the clausal form of logic.  Beliefs are represented as logic programming clauses, and  goals are represented as more general clauses, with the ex- pressive power of full first-order logic (FOL). For example,  the first sentence below expresses a goal, and the other four  sentences express beliefs:    

------------------- Sentence 1 -------------------

The ALP agent model can be viewed as a variant of the BDI  model, in which agents use their beliefs to satisfy their de- sires by generating intentions, which are selected plans of  actions. 


>> Tokens are: 
[ALP, agent, model, viewed, variant, BDI,  , model, ,, agents, use, beliefs, satisfy, de-, sires, generating, intentions, ,, selected, plans,  , actions, .] 

>> PoS Tags are: 
[('ALP', 'PROPN'), ('agent', 'NOUN'), ('model', 'NOUN'), ('viewed', 'VERB'), ('variant', 'NOUN'), ('BDI', 'PROPN'), (' ', 'SPACE'), ('model', 'NOUN'), (',', 'PUNCT'), ('agents', 'NOUN'), ('use', 'VERB'), ('beliefs', 'NOUN'), ('satisfy', 'VERB'), ('de-', 'NOUN'), ('sires', 'NOUN'), ('generating', 'VERB'), ('intentions', 'NOUN'), (',', 'PUNCT'), ('selected', 'VERB'), ('plans', 'NOUN'), (' ', 'SPACE'), ('actions', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('ALP', 'compound'), ('agent', 'compound'), ('model', 'nsubjpass'), ('viewed', 'ROOT'), ('variant', 'pobj'), ('BDI', 'nmod'), (' ', 'compound'), ('model', 'pobj'), (',', 'punct'), ('agents', 'nsubj'), ('use', 'relcl'), ('beliefs', 'dobj'), ('satisfy', 'xcomp'), ('de-', 'compound'), ('sires', 'dobj'), ('generating', 'pcomp'), ('intentions', 'dobj'), (',', 'punct'), ('selected', 'relcl'), ('plans', 'dobj'), (' ', 'compound'), ('actions', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[ALP, agent], [agent, model], [model, viewed], [viewed, variant], [variant, BDI], [BDI,  ], [ , model], [model, ,], [,, agents], [agents, use], [use, beliefs], [beliefs, satisfy], [satisfy, de-], [de-, sires], [sires, generating], [generating, intentions], [intentions, ,], [,, selected], [selected, plans], [plans,  ], [ , actions], [actions, .]]

>> Trigrams: 
[[ALP, agent, model], [agent, model, viewed], [model, viewed, variant], [viewed, variant, BDI], [variant, BDI,  ], [BDI,  , model], [ , model, ,], [model, ,, agents], [,, agents, use], [agents, use, beliefs], [use, beliefs, satisfy], [beliefs, satisfy, de-], [satisfy, de-, sires], [de-, sires, generating], [sires, generating, intentions], [generating, intentions, ,], [intentions, ,, selected], [,, selected, plans], [selected, plans,  ], [plans,  , actions], [ , actions, .]]

>> Noun Phrases are: 
[The ALP agent model, a variant, the BDI  model, agents, their beliefs, their de- sires, intentions, plans,  actions]

>> Named Entities are: 
[('ALP', 'ORG'), ('BDI', 'ORG')] 

------------------- Sentence 2 -------------------

In ALP agents, beliefs and desires (or goals) are  both represented as conditionals in the clausal form of logic. 


>> Tokens are: 
[ALP, agents, ,, beliefs, desires, (, goals, ),  , represented, conditionals, clausal, form, logic, .] 

>> PoS Tags are: 
[('ALP', 'PROPN'), ('agents', 'NOUN'), (',', 'PUNCT'), ('beliefs', 'NOUN'), ('desires', 'NOUN'), ('(', 'PUNCT'), ('goals', 'NOUN'), (')', 'PUNCT'), (' ', 'SPACE'), ('represented', 'VERB'), ('conditionals', 'NOUN'), ('clausal', 'NOUN'), ('form', 'NOUN'), ('logic', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('ALP', 'compound'), ('agents', 'pobj'), (',', 'punct'), ('beliefs', 'nsubj'), ('desires', 'conj'), ('(', 'punct'), ('goals', 'conj'), (')', 'punct'), (' ', 'attr'), ('represented', 'relcl'), ('conditionals', 'pobj'), ('clausal', 'compound'), ('form', 'pobj'), ('logic', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[ALP, agents], [agents, ,], [,, beliefs], [beliefs, desires], [desires, (], [(, goals], [goals, )], [),  ], [ , represented], [represented, conditionals], [conditionals, clausal], [clausal, form], [form, logic], [logic, .]]

>> Trigrams: 
[[ALP, agents, ,], [agents, ,, beliefs], [,, beliefs, desires], [beliefs, desires, (], [desires, (, goals], [(, goals, )], [goals, ),  ], [),  , represented], [ , represented, conditionals], [represented, conditionals, clausal], [conditionals, clausal, form], [clausal, form, logic], [form, logic, .]]

>> Noun Phrases are: 
[ALP agents, beliefs, desires, goals, conditionals, the clausal form, logic]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

Beliefs are represented as logic programming clauses, and  goals are represented as more general clauses, with the ex- pressive power of full first-order logic (FOL). 


>> Tokens are: 
[Beliefs, represented, logic, programming, clauses, ,,  , goals, represented, general, clauses, ,, ex-, pressive, power, -, order, logic, (, FOL, ), .] 

>> PoS Tags are: 
[('Beliefs', 'PROPN'), ('represented', 'VERB'), ('logic', 'NOUN'), ('programming', 'NOUN'), ('clauses', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('goals', 'NOUN'), ('represented', 'VERB'), ('general', 'ADJ'), ('clauses', 'NOUN'), (',', 'PUNCT'), ('ex-', 'X'), ('pressive', 'ADJ'), ('power', 'NOUN'), ('-', 'PUNCT'), ('order', 'NOUN'), ('logic', 'NOUN'), ('(', 'PUNCT'), ('FOL', 'PROPN'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Beliefs', 'nsubjpass'), ('represented', 'ROOT'), ('logic', 'compound'), ('programming', 'compound'), ('clauses', 'pobj'), (',', 'punct'), (' ', 'compound'), ('goals', 'nsubjpass'), ('represented', 'conj'), ('general', 'amod'), ('clauses', 'pobj'), (',', 'punct'), ('ex-', 'nmod'), ('pressive', 'amod'), ('power', 'pobj'), ('-', 'punct'), ('order', 'compound'), ('logic', 'pobj'), ('(', 'punct'), ('FOL', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[Beliefs, represented], [represented, logic], [logic, programming], [programming, clauses], [clauses, ,], [,,  ], [ , goals], [goals, represented], [represented, general], [general, clauses], [clauses, ,], [,, ex-], [ex-, pressive], [pressive, power], [power, -], [-, order], [order, logic], [logic, (], [(, FOL], [FOL, )], [), .]]

>> Trigrams: 
[[Beliefs, represented, logic], [represented, logic, programming], [logic, programming, clauses], [programming, clauses, ,], [clauses, ,,  ], [,,  , goals], [ , goals, represented], [goals, represented, general], [represented, general, clauses], [general, clauses, ,], [clauses, ,, ex-], [,, ex-, pressive], [ex-, pressive, power], [pressive, power, -], [power, -, order], [-, order, logic], [order, logic, (], [logic, (, FOL], [(, FOL, )], [FOL, ), .]]

>> Noun Phrases are: 
[Beliefs, logic programming clauses,  goals, more general clauses, the ex- pressive power, full first-order logic, (FOL]

>> Named Entities are: 
[('Beliefs', 'GPE'), ('first', 'ORDINAL')] 

------------------- Sentence 5 -------------------

For example,  the first sentence below expresses a goal, and the other four  sentences express beliefs: 


>> Tokens are: 
[example, ,,  , sentence, expresses, goal, ,,  , sentences, express, beliefs, :] 

>> PoS Tags are: 
[('example', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('sentence', 'NOUN'), ('expresses', 'VERB'), ('goal', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('sentences', 'NOUN'), ('express', 'VERB'), ('beliefs', 'NOUN'), (':', 'PUNCT')] 

>> Dependency Tags are: 
[('example', 'pobj'), (',', 'punct'), (' ', 'nsubj'), ('sentence', 'nsubj'), ('expresses', 'ROOT'), ('goal', 'dobj'), (',', 'punct'), (' ', 'compound'), ('sentences', 'nsubj'), ('express', 'conj'), ('beliefs', 'dobj'), (':', 'punct')]

>> Bigrams: 
[[example, ,], [,,  ], [ , sentence], [sentence, expresses], [expresses, goal], [goal, ,], [,,  ], [ , sentences], [sentences, express], [express, beliefs], [beliefs, :]]

>> Trigrams: 
[[example, ,,  ], [,,  , sentence], [ , sentence, expresses], [sentence, expresses, goal], [expresses, goal, ,], [goal, ,,  ], [,,  , sentences], [ , sentences, express], [sentences, express, beliefs], [express, beliefs, :]]

>> Noun Phrases are: 
[example, the first sentence, a goal, the other four  sentences, beliefs]

>> Named Entities are: 
[('first', 'ORDINAL'), ('four', 'CARDINAL')] 

------------------- Sentence 6 -------------------

    


>> Tokens are: 
[   ] 

>> PoS Tags are: 
[('   ', 'SPACE')] 

>> Dependency Tags are: 
[('   ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 30 =================================

If there is an emergency     then I deal with it myself or I get help or I escape.  

------------------- Sentence 1 -------------------

If there is an emergency     then I deal with it myself or I get help or I escape.   


>> Tokens are: 
[emergency,     , deal, help, escape, .,  ] 

>> PoS Tags are: 
[('emergency', 'NOUN'), ('    ', 'SPACE'), ('deal', 'VERB'), ('help', 'NOUN'), ('escape', 'VERB'), ('.', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('emergency', 'attr'), ('    ', 'nummod'), ('deal', 'ROOT'), ('help', 'dobj'), ('escape', 'conj'), ('.', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[emergency,     ], [    , deal], [deal, help], [help, escape], [escape, .], [.,  ]]

>> Trigrams: 
[[emergency,     , deal], [    , deal, help], [deal, help, escape], [help, escape, .], [escape, .,  ]]

>> Noun Phrases are: 
[an emergency, I, it, I, help, I]

>> Named Entities are: 
[] 


================================ Paragraph 31 =================================

There is an emergency if there is a fire.  I get help if I am on a train   and I alert the driver of the train.  I alert the driver of the train if I am on a train and   

------------------- Sentence 1 -------------------

There is an emergency if there is a fire. 


>> Tokens are: 
[emergency, fire, .] 

>> PoS Tags are: 
[('emergency', 'NOUN'), ('fire', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('emergency', 'attr'), ('fire', 'attr'), ('.', 'punct')]

>> Bigrams: 
[[emergency, fire], [fire, .]]

>> Trigrams: 
[[emergency, fire, .]]

>> Noun Phrases are: 
[an emergency, a fire]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

I get help if I am on a train    


>> Tokens are: 
[help, train,   ] 

>> PoS Tags are: 
[('help', 'NOUN'), ('train', 'NOUN'), ('  ', 'SPACE')] 

>> Dependency Tags are: 
[('help', 'dobj'), ('train', 'compound'), ('  ', 'pobj')]

>> Bigrams: 
[[help, train], [train,   ]]

>> Trigrams: 
[[help, train,   ]]

>> Noun Phrases are: 
[I, help, I]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

and I alert the driver of the train. 


>> Tokens are: 
[alert, driver, train, .] 

>> PoS Tags are: 
[('alert', 'VERB'), ('driver', 'NOUN'), ('train', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('alert', 'ROOT'), ('driver', 'dobj'), ('train', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[alert, driver], [driver, train], [train, .]]

>> Trigrams: 
[[alert, driver, train], [driver, train, .]]

>> Noun Phrases are: 
[I, the driver, the train]

>> Named Entities are: 
[] 

------------------- Sentence 5 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 6 -------------------

I alert the driver of the train if I am on a train and    


>> Tokens are: 
[alert, driver, train, train,   ] 

>> PoS Tags are: 
[('alert', 'VERB'), ('driver', 'NOUN'), ('train', 'NOUN'), ('train', 'NOUN'), ('  ', 'SPACE')] 

>> Dependency Tags are: 
[('alert', 'ROOT'), ('driver', 'dobj'), ('train', 'pobj'), ('train', 'pobj'), ('  ', 'dobj')]

>> Bigrams: 
[[alert, driver], [driver, train], [train, train], [train,   ]]

>> Trigrams: 
[[alert, driver, train], [driver, train, train], [train, train,   ]]

>> Noun Phrases are: 
[I, the driver, the train, I, a train]

>> Named Entities are: 
[] 


================================ Paragraph 32 =================================

  

------------------- Sentence 1 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 33 =================================

Forward   

------------------- Sentence 1 -------------------

Forward    


>> Tokens are: 
[Forward,   ] 

>> PoS Tags are: 
[('Forward', 'ADV'), ('  ', 'SPACE')] 

>> Dependency Tags are: 
[('Forward', 'ROOT'), ('  ', 'nummod')]

>> Bigrams: 
[[Forward,   ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 34 =================================

reasoning  Forward   

------------------- Sentence 1 -------------------

reasoning  Forward    


>> Tokens are: 
[reasoning,  , Forward,   ] 

>> PoS Tags are: 
[('reasoning', 'VERB'), (' ', 'SPACE'), ('Forward', 'ADV'), ('  ', 'SPACE')] 

>> Dependency Tags are: 
[('reasoning', 'ROOT'), (' ', 'dobj'), ('Forward', 'npadvmod'), ('  ', 'dobj')]

>> Bigrams: 
[[reasoning,  ], [ , Forward], [Forward,   ]]

>> Trigrams: 
[[reasoning,  , Forward], [ , Forward,   ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 35 =================================

reasoning  

------------------- Sentence 1 -------------------

reasoning   


>> Tokens are: 
[reasoning,  ] 

>> PoS Tags are: 
[('reasoning', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('reasoning', 'ROOT'), (' ', 'dobj')]

>> Bigrams: 
[[reasoning,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 36 =================================

Backward   

------------------- Sentence 1 -------------------

Backward 


>> Tokens are: 
[Backward] 

>> PoS Tags are: 
[('Backward', 'ADJ')] 

>> Dependency Tags are: 
[('Backward', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 37 =================================

reasoning  

------------------- Sentence 1 -------------------

reasoning   


>> Tokens are: 
[reasoning,  ] 

>> PoS Tags are: 
[('reasoning', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('reasoning', 'ROOT'), (' ', 'dobj')]

>> Bigrams: 
[[reasoning,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 38 =================================

Conse- 

------------------- Sentence 1 -------------------

Conse- 


>> Tokens are: 
[Conse-] 

>> PoS Tags are: 
[('Conse-', 'PROPN')] 

>> Dependency Tags are: 
[('Conse-', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Conse-]

>> Named Entities are: 
[] 


================================ Paragraph 39 =================================

Decide  

------------------- Sentence 1 -------------------

Decide   


>> Tokens are: 
[Decide,  ] 

>> PoS Tags are: 
[('Decide', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Decide', 'ROOT'), (' ', 'dobj')]

>> Bigrams: 
[[Decide,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 40 =================================

Maintenance   

------------------- Sentence 1 -------------------

Maintenance    


>> Tokens are: 
[Maintenance,   ] 

>> PoS Tags are: 
[('Maintenance', 'NOUN'), ('  ', 'SPACE')] 

>> Dependency Tags are: 
[('Maintenance', 'compound'), ('  ', 'ROOT')]

>> Bigrams: 
[[Maintenance,   ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 41 =================================

goal  

------------------- Sentence 1 -------------------

goal   


>> Tokens are: 
[goal,  ] 

>> PoS Tags are: 
[('goal', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('goal', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[goal,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[goal]

>> Named Entities are: 
[] 


================================ Paragraph 42 =================================

Achievement   

------------------- Sentence 1 -------------------

Achievement    


>> Tokens are: 
[Achievement,   ] 

>> PoS Tags are: 
[('Achievement', 'NOUN'), ('  ', 'SPACE')] 

>> Dependency Tags are: 
[('Achievement', 'ROOT'), ('  ', 'appos')]

>> Bigrams: 
[[Achievement,   ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Achievement]

>> Named Entities are: 
[] 


================================ Paragraph 43 =================================

goal  

------------------- Sentence 1 -------------------

goal   


>> Tokens are: 
[goal,  ] 

>> PoS Tags are: 
[('goal', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('goal', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[goal,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[goal]

>> Named Entities are: 
[] 


================================ Paragraph 44 =================================

Observe Act  The World  

------------------- Sentence 1 -------------------

Observe Act  The World   


>> Tokens are: 
[Observe, Act,  , World,  ] 

>> PoS Tags are: 
[('Observe', 'PROPN'), ('Act', 'PROPN'), (' ', 'SPACE'), ('World', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Observe', 'compound'), ('Act', 'ROOT'), (' ', 'punct'), ('World', 'appos'), (' ', 'nummod')]

>> Bigrams: 
[[Observe, Act], [Act,  ], [ , World], [World,  ]]

>> Trigrams: 
[[Observe, Act,  ], [Act,  , World], [ , World,  ]]

>> Noun Phrases are: 
[Observe Act, The World]

>> Named Entities are: 
[('The World', 'WORK_OF_ART')] 


================================ Paragraph 45 =================================

stimulus-response        associations  

------------------- Sentence 1 -------------------

stimulus-response        associations   


>> Tokens are: 
[stimulus, -, response,        , associations,  ] 

>> PoS Tags are: 
[('stimulus', 'ADJ'), ('-', 'PUNCT'), ('response', 'NOUN'), ('       ', 'SPACE'), ('associations', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('stimulus', 'amod'), ('-', 'punct'), ('response', 'nmod'), ('       ', 'nummod'), ('associations', 'ROOT'), (' ', 'nummod')]

>> Bigrams: 
[[stimulus, -], [-, response], [response,        ], [       , associations], [associations,  ]]

>> Trigrams: 
[[stimulus, -, response], [-, response,        ], [response,        , associations], [       , associations,  ]]

>> Noun Phrases are: 
[stimulus-response        associations]

>> Named Entities are: 
[] 


================================ Paragraph 46 =================================

Forward   

------------------- Sentence 1 -------------------

Forward    


>> Tokens are: 
[Forward,   ] 

>> PoS Tags are: 
[('Forward', 'ADV'), ('  ', 'SPACE')] 

>> Dependency Tags are: 
[('Forward', 'ROOT'), ('  ', 'nummod')]

>> Bigrams: 
[[Forward,   ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 47 =================================

reasoning  

------------------- Sentence 1 -------------------

reasoning   


>> Tokens are: 
[reasoning,  ] 

>> PoS Tags are: 
[('reasoning', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('reasoning', 'ROOT'), (' ', 'dobj')]

>> Bigrams: 
[[reasoning,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 48 =================================

Artificial Intelligence and Human Thinking  

------------------- Sentence 1 -------------------

Artificial Intelligence and Human Thinking   


>> Tokens are: 
[Artificial, Intelligence, Human, Thinking,  ] 

>> PoS Tags are: 
[('Artificial', 'PROPN'), ('Intelligence', 'PROPN'), ('Human', 'PROPN'), ('Thinking', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Artificial', 'compound'), ('Intelligence', 'ROOT'), ('Human', 'compound'), ('Thinking', 'conj'), (' ', 'nummod')]

>> Bigrams: 
[[Artificial, Intelligence], [Intelligence, Human], [Human, Thinking], [Thinking,  ]]

>> Trigrams: 
[[Artificial, Intelligence, Human], [Intelligence, Human, Thinking], [Human, Thinking,  ]]

>> Noun Phrases are: 
[Artificial Intelligence, Human Thinking]

>> Named Entities are: 
[('Artificial Intelligence and Human Thinking', 'ORG')] 


================================ Paragraph 49 =================================

Robert Kowalski  Imperial College London  

------------------- Sentence 1 -------------------

Robert Kowalski   


>> Tokens are: 
[Robert, Kowalski,  ] 

>> PoS Tags are: 
[('Robert', 'PROPN'), ('Kowalski', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Robert', 'compound'), ('Kowalski', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[Robert, Kowalski], [Kowalski,  ]]

>> Trigrams: 
[[Robert, Kowalski,  ]]

>> Noun Phrases are: 
[Robert Kowalski]

>> Named Entities are: 
[('Robert Kowalski', 'PERSON')] 

------------------- Sentence 2 -------------------

Imperial College London   


>> Tokens are: 
[Imperial, College, London,  ] 

>> PoS Tags are: 
[('Imperial', 'PROPN'), ('College', 'PROPN'), ('London', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Imperial', 'compound'), ('College', 'compound'), ('London', 'ROOT'), (' ', 'appos')]

>> Bigrams: 
[[Imperial, College], [College, London], [London,  ]]

>> Trigrams: 
[[Imperial, College, London], [College, London,  ]]

>> Noun Phrases are: 
[Imperial College London]

>> Named Entities are: 
[('Imperial', 'ORG'), ('London', 'GPE')] 


================================ Paragraph 50 =================================

United Kingdom  rak@doc.ic.ac.uk  

------------------- Sentence 1 -------------------

United Kingdom  rak@doc.ic.ac.uk   


>> Tokens are: 
[United, Kingdom,  , rak@doc.ic.ac.uk,  ] 

>> PoS Tags are: 
[('United', 'PROPN'), ('Kingdom', 'PROPN'), (' ', 'SPACE'), ('rak@doc.ic.ac.uk', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('United', 'compound'), ('Kingdom', 'nsubj'), (' ', 'appos'), ('rak@doc.ic.ac.uk', 'compound'), (' ', 'ROOT')]

>> Bigrams: 
[[United, Kingdom], [Kingdom,  ], [ , rak@doc.ic.ac.uk], [rak@doc.ic.ac.uk,  ]]

>> Trigrams: 
[[United, Kingdom,  ], [Kingdom,  , rak@doc.ic.ac.uk], [ , rak@doc.ic.ac.uk,  ]]

>> Noun Phrases are: 
[United Kingdom]

>> Named Entities are: 
[('United Kingdom', 'GPE')] 


================================ Paragraph 51 =================================

11 

------------------- Sentence 1 -------------------

11 


>> Tokens are: 
[11] 

>> PoS Tags are: 
[('11', 'NUM')] 

>> Dependency Tags are: 
[('11', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('11', 'CARDINAL')] 


================================ Paragraph 52 =================================

Proceedings of the Twenty-Second International Joint Conference on Artificial Intelligence

------------------- Sentence 1 -------------------

Proceedings of the Twenty-Second International Joint Conference on Artificial Intelligence 


>> Tokens are: 
[Proceedings, -, Second, International, Joint, Conference, Artificial, Intelligence] 

>> PoS Tags are: 
[('Proceedings', 'NOUN'), ('-', 'PUNCT'), ('Second', 'PROPN'), ('International', 'PROPN'), ('Joint', 'PROPN'), ('Conference', 'PROPN'), ('Artificial', 'PROPN'), ('Intelligence', 'PROPN')] 

>> Dependency Tags are: 
[('Proceedings', 'ROOT'), ('-', 'punct'), ('Second', 'compound'), ('International', 'compound'), ('Joint', 'compound'), ('Conference', 'pobj'), ('Artificial', 'compound'), ('Intelligence', 'pobj')]

>> Bigrams: 
[[Proceedings, -], [-, Second], [Second, International], [International, Joint], [Joint, Conference], [Conference, Artificial], [Artificial, Intelligence]]

>> Trigrams: 
[[Proceedings, -, Second], [-, Second, International], [Second, International, Joint], [International, Joint, Conference], [Joint, Conference, Artificial], [Conference, Artificial, Intelligence]]

>> Noun Phrases are: 
[Proceedings, the Twenty-Second International Joint Conference, Artificial Intelligence]

>> Named Entities are: 
[] 


================================ Paragraph 53 =================================

I press the alarm button.  I am on a train.    

------------------- Sentence 1 -------------------

I press the alarm button. 


>> Tokens are: 
[press, alarm, button, .] 

>> PoS Tags are: 
[('press', 'VERB'), ('alarm', 'NOUN'), ('button', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('press', 'ROOT'), ('alarm', 'compound'), ('button', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[press, alarm], [alarm, button], [button, .]]

>> Trigrams: 
[[press, alarm, button], [alarm, button, .]]

>> Noun Phrases are: 
[I, the alarm button]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

I am on a train. 


>> Tokens are: 
[train, .] 

>> PoS Tags are: 
[('train', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('train', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[train, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[I, a train]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

    


>> Tokens are: 
[   ] 

>> PoS Tags are: 
[('   ', 'SPACE')] 

>> Dependency Tags are: 
[('   ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 54 =================================

In this paper, goals are written conditions first, because, like  production rules, they are always used to reason forwards.  Beliefs are usually written conclusion first, because, like  logic programs, they are usually used to reason backwards.  But beliefs are sometimes written conditions first, because  in ALP they can be used to reason backwards or forwards.  In the semantics, it does not matter whether conditionals of  any kind are written forwards or backwards.  

------------------- Sentence 1 -------------------

In this paper, goals are written conditions first, because, like  production rules, they are always used to reason forwards. 


>> Tokens are: 
[paper, ,, goals, written, conditions, ,, ,, like,  , production, rules, ,, reason, forwards, .] 

>> PoS Tags are: 
[('paper', 'NOUN'), (',', 'PUNCT'), ('goals', 'NOUN'), ('written', 'VERB'), ('conditions', 'NOUN'), (',', 'PUNCT'), (',', 'PUNCT'), ('like', 'ADP'), (' ', 'SPACE'), ('production', 'NOUN'), ('rules', 'NOUN'), (',', 'PUNCT'), ('reason', 'VERB'), ('forwards', 'ADV'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('paper', 'pobj'), (',', 'punct'), ('goals', 'nsubjpass'), ('written', 'ROOT'), ('conditions', 'dobj'), (',', 'punct'), (',', 'punct'), ('like', 'prep'), (' ', 'pcomp'), ('production', 'compound'), ('rules', 'pobj'), (',', 'punct'), ('reason', 'xcomp'), ('forwards', 'advmod'), ('.', 'punct')]

>> Bigrams: 
[[paper, ,], [,, goals], [goals, written], [written, conditions], [conditions, ,], [,, ,], [,, like], [like,  ], [ , production], [production, rules], [rules, ,], [,, reason], [reason, forwards], [forwards, .]]

>> Trigrams: 
[[paper, ,, goals], [,, goals, written], [goals, written, conditions], [written, conditions, ,], [conditions, ,, ,], [,, ,, like], [,, like,  ], [like,  , production], [ , production, rules], [production, rules, ,], [rules, ,, reason], [,, reason, forwards], [reason, forwards, .]]

>> Noun Phrases are: 
[this paper, goals, conditions, production rules, they]

>> Named Entities are: 
[('first', 'ORDINAL')] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

Beliefs are usually written conclusion first, because, like  logic programs, they are usually used to reason backwards. 


>> Tokens are: 
[Beliefs, usually, written, conclusion, ,, ,, like,  , logic, programs, ,, usually, reason, backwards, .] 

>> PoS Tags are: 
[('Beliefs', 'PROPN'), ('usually', 'ADV'), ('written', 'VERB'), ('conclusion', 'NOUN'), (',', 'PUNCT'), (',', 'PUNCT'), ('like', 'ADP'), (' ', 'SPACE'), ('logic', 'ADJ'), ('programs', 'NOUN'), (',', 'PUNCT'), ('usually', 'ADV'), ('reason', 'VERB'), ('backwards', 'ADV'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Beliefs', 'nsubjpass'), ('usually', 'advmod'), ('written', 'ROOT'), ('conclusion', 'dobj'), (',', 'punct'), (',', 'punct'), ('like', 'prep'), (' ', 'pobj'), ('logic', 'amod'), ('programs', 'pobj'), (',', 'punct'), ('usually', 'advmod'), ('reason', 'xcomp'), ('backwards', 'advmod'), ('.', 'punct')]

>> Bigrams: 
[[Beliefs, usually], [usually, written], [written, conclusion], [conclusion, ,], [,, ,], [,, like], [like,  ], [ , logic], [logic, programs], [programs, ,], [,, usually], [usually, reason], [reason, backwards], [backwards, .]]

>> Trigrams: 
[[Beliefs, usually, written], [usually, written, conclusion], [written, conclusion, ,], [conclusion, ,, ,], [,, ,, like], [,, like,  ], [like,  , logic], [ , logic, programs], [logic, programs, ,], [programs, ,, usually], [,, usually, reason], [usually, reason, backwards], [reason, backwards, .]]

>> Noun Phrases are: 
[Beliefs, conclusion, logic programs, they]

>> Named Entities are: 
[('Beliefs', 'GPE'), ('first', 'ORDINAL')] 

------------------- Sentence 4 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 5 -------------------

But beliefs are sometimes written conditions first, because  in ALP they can be used to reason backwards or forwards. 


>> Tokens are: 
[beliefs, written, conditions, ,,  , ALP, reason, backwards, forwards, .] 

>> PoS Tags are: 
[('beliefs', 'NOUN'), ('written', 'VERB'), ('conditions', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('ALP', 'PROPN'), ('reason', 'VERB'), ('backwards', 'ADV'), ('forwards', 'ADV'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('beliefs', 'nsubjpass'), ('written', 'amod'), ('conditions', 'ROOT'), (',', 'punct'), (' ', 'nsubjpass'), ('ALP', 'pobj'), ('reason', 'xcomp'), ('backwards', 'advmod'), ('forwards', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[beliefs, written], [written, conditions], [conditions, ,], [,,  ], [ , ALP], [ALP, reason], [reason, backwards], [backwards, forwards], [forwards, .]]

>> Trigrams: 
[[beliefs, written, conditions], [written, conditions, ,], [conditions, ,,  ], [,,  , ALP], [ , ALP, reason], [ALP, reason, backwards], [reason, backwards, forwards], [backwards, forwards, .]]

>> Noun Phrases are: 
[beliefs, ALP, they]

>> Named Entities are: 
[('first', 'ORDINAL')] 

------------------- Sentence 6 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 7 -------------------

In the semantics, it does not matter whether conditionals of  any kind are written forwards or backwards. 


>> Tokens are: 
[semantics, ,, matter, conditionals,  , kind, written, forwards, backwards, .] 

>> PoS Tags are: 
[('semantics', 'NOUN'), (',', 'PUNCT'), ('matter', 'VERB'), ('conditionals', 'NOUN'), (' ', 'SPACE'), ('kind', 'NOUN'), ('written', 'VERB'), ('forwards', 'ADV'), ('backwards', 'ADV'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('semantics', 'pobj'), (',', 'punct'), ('matter', 'ROOT'), ('conditionals', 'nsubjpass'), (' ', 'pobj'), ('kind', 'nsubjpass'), ('written', 'ccomp'), ('forwards', 'advmod'), ('backwards', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[semantics, ,], [,, matter], [matter, conditionals], [conditionals,  ], [ , kind], [kind, written], [written, forwards], [forwards, backwards], [backwards, .]]

>> Trigrams: 
[[semantics, ,, matter], [,, matter, conditionals], [matter, conditionals,  ], [conditionals,  , kind], [ , kind, written], [kind, written, forwards], [written, forwards, backwards], [forwards, backwards, .]]

>> Noun Phrases are: 
[the semantics, it, conditionals, any kind]

>> Named Entities are: 
[] 

------------------- Sentence 8 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 55 =================================

2.1 Model-theoretic and Operational Semantics  

------------------- Sentence 1 -------------------

2.1 Model-theoretic and Operational Semantics 


>> Tokens are: 
[2.1, Model, -, theoretic, Operational, Semantics] 

>> PoS Tags are: 
[('2.1', 'NUM'), ('Model', 'NOUN'), ('-', 'PUNCT'), ('theoretic', 'ADJ'), ('Operational', 'PROPN'), ('Semantics', 'PROPN')] 

>> Dependency Tags are: 
[('2.1', 'nummod'), ('Model', 'npadvmod'), ('-', 'punct'), ('theoretic', 'ROOT'), ('Operational', 'compound'), ('Semantics', 'conj')]

>> Bigrams: 
[[2.1, Model], [Model, -], [-, theoretic], [theoretic, Operational], [Operational, Semantics]]

>> Trigrams: 
[[2.1, Model, -], [Model, -, theoretic], [-, theoretic, Operational], [theoretic, Operational, Semantics]]

>> Noun Phrases are: 
[Operational Semantics]

>> Named Entities are: 
[('2.1', 'CARDINAL'), ('Operational Semantics', 'ORG')] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 56 =================================

Informally speaking, in the semantics of ALP agents, beliefs  describe the world as the agent sees it, and goals describe  the world as the agent would like it to be. In deductive data- bases, beliefs represent the data, and goals represent data- base queries and integrity constraints.  

------------------- Sentence 1 -------------------

Informally speaking, in the semantics of ALP agents, beliefs  describe the world as the agent sees it, and goals describe  the world as the agent would like it to be. 


>> Tokens are: 
[Informally, speaking, ,, semantics, ALP, agents, ,, beliefs,  , describe, world, agent, sees, ,, goals, describe,  , world, agent, like, .] 

>> PoS Tags are: 
[('Informally', 'ADV'), ('speaking', 'VERB'), (',', 'PUNCT'), ('semantics', 'NOUN'), ('ALP', 'PROPN'), ('agents', 'NOUN'), (',', 'PUNCT'), ('beliefs', 'NOUN'), (' ', 'SPACE'), ('describe', 'VERB'), ('world', 'NOUN'), ('agent', 'NOUN'), ('sees', 'VERB'), (',', 'PUNCT'), ('goals', 'NOUN'), ('describe', 'VERB'), (' ', 'SPACE'), ('world', 'NOUN'), ('agent', 'NOUN'), ('like', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Informally', 'advmod'), ('speaking', 'advcl'), (',', 'punct'), ('semantics', 'pobj'), ('ALP', 'compound'), ('agents', 'pobj'), (',', 'punct'), ('beliefs', 'nsubj'), (' ', 'appos'), ('describe', 'ROOT'), ('world', 'dobj'), ('agent', 'nsubj'), ('sees', 'advcl'), (',', 'punct'), ('goals', 'nsubj'), ('describe', 'conj'), (' ', 'dobj'), ('world', 'dobj'), ('agent', 'nsubj'), ('like', 'advcl'), ('.', 'punct')]

>> Bigrams: 
[[Informally, speaking], [speaking, ,], [,, semantics], [semantics, ALP], [ALP, agents], [agents, ,], [,, beliefs], [beliefs,  ], [ , describe], [describe, world], [world, agent], [agent, sees], [sees, ,], [,, goals], [goals, describe], [describe,  ], [ , world], [world, agent], [agent, like], [like, .]]

>> Trigrams: 
[[Informally, speaking, ,], [speaking, ,, semantics], [,, semantics, ALP], [semantics, ALP, agents], [ALP, agents, ,], [agents, ,, beliefs], [,, beliefs,  ], [beliefs,  , describe], [ , describe, world], [describe, world, agent], [world, agent, sees], [agent, sees, ,], [sees, ,, goals], [,, goals, describe], [goals, describe,  ], [describe,  , world], [ , world, agent], [world, agent, like], [agent, like, .]]

>> Noun Phrases are: 
[the semantics, ALP agents, beliefs, the world, the agent, it, goals, the world, the agent, it]

>> Named Entities are: 
[('ALP', 'ORG')] 

------------------- Sentence 2 -------------------

In deductive data- bases, beliefs represent the data, and goals represent data- base queries and integrity constraints. 


>> Tokens are: 
[deductive, data-, bases, ,, beliefs, represent, data, ,, goals, represent, data-, base, queries, integrity, constraints, .] 

>> PoS Tags are: 
[('deductive', 'ADJ'), ('data-', 'NOUN'), ('bases', 'NOUN'), (',', 'PUNCT'), ('beliefs', 'NOUN'), ('represent', 'VERB'), ('data', 'NOUN'), (',', 'PUNCT'), ('goals', 'NOUN'), ('represent', 'VERB'), ('data-', 'ADJ'), ('base', 'NOUN'), ('queries', 'NOUN'), ('integrity', 'NOUN'), ('constraints', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('deductive', 'amod'), ('data-', 'compound'), ('bases', 'pobj'), (',', 'punct'), ('beliefs', 'nsubj'), ('represent', 'ROOT'), ('data', 'dobj'), (',', 'punct'), ('goals', 'nsubj'), ('represent', 'conj'), ('data-', 'amod'), ('base', 'compound'), ('queries', 'dobj'), ('integrity', 'compound'), ('constraints', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[deductive, data-], [data-, bases], [bases, ,], [,, beliefs], [beliefs, represent], [represent, data], [data, ,], [,, goals], [goals, represent], [represent, data-], [data-, base], [base, queries], [queries, integrity], [integrity, constraints], [constraints, .]]

>> Trigrams: 
[[deductive, data-, bases], [data-, bases, ,], [bases, ,, beliefs], [,, beliefs, represent], [beliefs, represent, data], [represent, data, ,], [data, ,, goals], [,, goals, represent], [goals, represent, data-], [represent, data-, base], [data-, base, queries], [base, queries, integrity], [queries, integrity, constraints], [integrity, constraints, .]]

>> Noun Phrases are: 
[deductive data- bases, beliefs, the data, goals, data- base queries, integrity constraints]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 57 =================================

More formally, in the model-theoretic semantics of the  ALP agent model, the task of an agent having beliefs B,  goals G and observations O is to generate a set � of actions  and assumptions about the world such that:    

------------------- Sentence 1 -------------------

More formally, in the model-theoretic semantics of the  ALP agent model, the task of an agent having beliefs B,  goals G and observations O is to generate a set � of actions  and assumptions about the world such that: 


>> Tokens are: 
[formally, ,, model, -, theoretic, semantics,  , ALP, agent, model, ,, task, agent, having, beliefs, B, ,,  , goals, G, observations, O, generate, set, �, actions,  , assumptions, world, :] 

>> PoS Tags are: 
[('formally', 'ADV'), (',', 'PUNCT'), ('model', 'NOUN'), ('-', 'PUNCT'), ('theoretic', 'ADJ'), ('semantics', 'NOUN'), (' ', 'SPACE'), ('ALP', 'PROPN'), ('agent', 'NOUN'), ('model', 'NOUN'), (',', 'PUNCT'), ('task', 'NOUN'), ('agent', 'NOUN'), ('having', 'VERB'), ('beliefs', 'NOUN'), ('B', 'PROPN'), (',', 'PUNCT'), (' ', 'SPACE'), ('goals', 'NOUN'), ('G', 'PROPN'), ('observations', 'NOUN'), ('O', 'INTJ'), ('generate', 'VERB'), ('set', 'ADJ'), ('�', 'NOUN'), ('actions', 'NOUN'), (' ', 'SPACE'), ('assumptions', 'NOUN'), ('world', 'NOUN'), (':', 'PUNCT')] 

>> Dependency Tags are: 
[('formally', 'advmod'), (',', 'punct'), ('model', 'npadvmod'), ('-', 'punct'), ('theoretic', 'amod'), ('semantics', 'pobj'), (' ', 'compound'), ('ALP', 'compound'), ('agent', 'compound'), ('model', 'pobj'), (',', 'punct'), ('task', 'pobj'), ('agent', 'pobj'), ('having', 'acl'), ('beliefs', 'compound'), ('B', 'dobj'), (',', 'punct'), (' ', 'nmod'), ('goals', 'compound'), ('G', 'appos'), ('observations', 'conj'), ('O', 'nsubj'), ('generate', 'xcomp'), ('set', 'amod'), ('�', 'dobj'), ('actions', 'pobj'), (' ', 'dobj'), ('assumptions', 'conj'), ('world', 'pobj'), (':', 'punct')]

>> Bigrams: 
[[formally, ,], [,, model], [model, -], [-, theoretic], [theoretic, semantics], [semantics,  ], [ , ALP], [ALP, agent], [agent, model], [model, ,], [,, task], [task, agent], [agent, having], [having, beliefs], [beliefs, B], [B, ,], [,,  ], [ , goals], [goals, G], [G, observations], [observations, O], [O, generate], [generate, set], [set, �], [�, actions], [actions,  ], [ , assumptions], [assumptions, world], [world, :]]

>> Trigrams: 
[[formally, ,, model], [,, model, -], [model, -, theoretic], [-, theoretic, semantics], [theoretic, semantics,  ], [semantics,  , ALP], [ , ALP, agent], [ALP, agent, model], [agent, model, ,], [model, ,, task], [,, task, agent], [task, agent, having], [agent, having, beliefs], [having, beliefs, B], [beliefs, B, ,], [B, ,,  ], [,,  , goals], [ , goals, G], [goals, G, observations], [G, observations, O], [observations, O, generate], [O, generate, set], [generate, set, �], [set, �, actions], [�, actions,  ], [actions,  , assumptions], [ , assumptions, world], [assumptions, world, :]]

>> Noun Phrases are: 
[the model-theoretic semantics, the  ALP agent model, the task, an agent, beliefs B,  goals G, observations, a set �, actions, assumptions, the world]

>> Named Entities are: 
[('ALP', 'ORG')] 

------------------- Sentence 2 -------------------

    


>> Tokens are: 
[   ] 

>> PoS Tags are: 
[('   ', 'SPACE')] 

>> Dependency Tags are: 
[('   ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 58 =================================

 G � O is true in the minimal model  determined by B � �.   

------------------- Sentence 1 -------------------

 G � O is true in the minimal model  determined by B � �. 


>> Tokens are: 
[ , G, �, O, true, minimal, model,  , determined, B, �, �, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('G', 'NOUN'), ('�', 'PROPN'), ('O', 'NOUN'), ('true', 'ADJ'), ('minimal', 'ADJ'), ('model', 'NOUN'), (' ', 'SPACE'), ('determined', 'VERB'), ('B', 'PROPN'), ('�', 'PROPN'), ('�', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'compound'), ('G', 'compound'), ('�', 'compound'), ('O', 'nsubj'), ('true', 'acomp'), ('minimal', 'amod'), ('model', 'pobj'), (' ', 'appos'), ('determined', 'acl'), ('B', 'compound'), ('�', 'compound'), ('�', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[ , G], [G, �], [�, O], [O, true], [true, minimal], [minimal, model], [model,  ], [ , determined], [determined, B], [B, �], [�, �], [�, .]]

>> Trigrams: 
[[ , G, �], [G, �, O], [�, O, true], [O, true, minimal], [true, minimal, model], [minimal, model,  ], [model,  , determined], [ , determined, B], [determined, B, �], [B, �, �], [�, �, .]]

>> Noun Phrases are: 
[ G � O, the minimal model, B � �]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 59 =================================

  In the simple case where B is a set of Horn clauses, B � �  always has a unique minimal model. Other cases can be  reduced to the Horn clause case, but these technicalities are  not important here.  

------------------- Sentence 1 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

In the simple case where B is a set of Horn clauses, B � �  always has a unique minimal model. 


>> Tokens are: 
[simple, case, B, set, Horn, clauses, ,, B, �, �,  , unique, minimal, model, .] 

>> PoS Tags are: 
[('simple', 'ADJ'), ('case', 'NOUN'), ('B', 'NOUN'), ('set', 'NOUN'), ('Horn', 'PROPN'), ('clauses', 'NOUN'), (',', 'PUNCT'), ('B', 'PROPN'), ('�', 'PROPN'), ('�', 'PROPN'), (' ', 'SPACE'), ('unique', 'ADJ'), ('minimal', 'ADJ'), ('model', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('simple', 'amod'), ('case', 'pobj'), ('B', 'nsubj'), ('set', 'attr'), ('Horn', 'compound'), ('clauses', 'pobj'), (',', 'punct'), ('B', 'compound'), ('�', 'compound'), ('�', 'nsubj'), (' ', 'nsubj'), ('unique', 'amod'), ('minimal', 'amod'), ('model', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[simple, case], [case, B], [B, set], [set, Horn], [Horn, clauses], [clauses, ,], [,, B], [B, �], [�, �], [�,  ], [ , unique], [unique, minimal], [minimal, model], [model, .]]

>> Trigrams: 
[[simple, case, B], [case, B, set], [B, set, Horn], [set, Horn, clauses], [Horn, clauses, ,], [clauses, ,, B], [,, B, �], [B, �, �], [�, �,  ], [�,  , unique], [ , unique, minimal], [unique, minimal, model], [minimal, model, .]]

>> Noun Phrases are: 
[the simple case, B, a set, Horn clauses, B � �, a unique minimal model]

>> Named Entities are: 
[('Horn', 'LOC')] 

------------------- Sentence 3 -------------------

Other cases can be  reduced to the Horn clause case, but these technicalities are  not important here.   


>> Tokens are: 
[cases,  , reduced, Horn, clause, case, ,, technicalities,  , important, .,  ] 

>> PoS Tags are: 
[('cases', 'NOUN'), (' ', 'SPACE'), ('reduced', 'VERB'), ('Horn', 'PROPN'), ('clause', 'NOUN'), ('case', 'NOUN'), (',', 'PUNCT'), ('technicalities', 'NOUN'), (' ', 'SPACE'), ('important', 'ADJ'), ('.', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('cases', 'nsubjpass'), (' ', 'npadvmod'), ('reduced', 'ROOT'), ('Horn', 'compound'), ('clause', 'compound'), ('case', 'pobj'), (',', 'punct'), ('technicalities', 'nsubj'), (' ', 'attr'), ('important', 'acomp'), ('.', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[cases,  ], [ , reduced], [reduced, Horn], [Horn, clause], [clause, case], [case, ,], [,, technicalities], [technicalities,  ], [ , important], [important, .], [.,  ]]

>> Trigrams: 
[[cases,  , reduced], [ , reduced, Horn], [reduced, Horn, clause], [Horn, clause, case], [clause, case, ,], [case, ,, technicalities], [,, technicalities,  ], [technicalities,  , important], [ , important, .], [important, .,  ]]

>> Noun Phrases are: 
[Other cases, the Horn clause case, these technicalities]

>> Named Entities are: 
[('Horn', 'LOC')] 


================================ Paragraph 60 =================================

In the operational semantics, ALP agents reason forwards  from observations, and forwards and backwards from be- liefs, to determine whether some instance of the conditions  of a goal is true, and to derive the corresponding instance of  the conclusion of the goal as an achievement goal, to make  true. Forward reasoning from observations is like forward  chaining in production systems, but it has the semantics of  aiming to make the goal true by making its conclusion true  whenever its conditions become true. Conditional goals  understood in this way are also called maintenance goals.  

------------------- Sentence 1 -------------------

In the operational semantics, ALP agents reason forwards  from observations, and forwards and backwards from be- liefs, to determine whether some instance of the conditions  of a goal is true, and to derive the corresponding instance of  the conclusion of the goal as an achievement goal, to make  true. 


>> Tokens are: 
[operational, semantics, ,, ALP, agents, reason, forwards,  , observations, ,, forwards, backwards, be-, liefs, ,, determine, instance, conditions,  , goal, true, ,, derive, corresponding, instance,  , conclusion, goal, achievement, goal, ,,  , true, .] 

>> PoS Tags are: 
[('operational', 'ADJ'), ('semantics', 'NOUN'), (',', 'PUNCT'), ('ALP', 'PROPN'), ('agents', 'NOUN'), ('reason', 'VERB'), ('forwards', 'ADP'), (' ', 'SPACE'), ('observations', 'NOUN'), (',', 'PUNCT'), ('forwards', 'ADV'), ('backwards', 'ADV'), ('be-', 'ADJ'), ('liefs', 'NOUN'), (',', 'PUNCT'), ('determine', 'VERB'), ('instance', 'NOUN'), ('conditions', 'NOUN'), (' ', 'SPACE'), ('goal', 'NOUN'), ('true', 'ADJ'), (',', 'PUNCT'), ('derive', 'VERB'), ('corresponding', 'ADJ'), ('instance', 'NOUN'), (' ', 'SPACE'), ('conclusion', 'NOUN'), ('goal', 'NOUN'), ('achievement', 'NOUN'), ('goal', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('true', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('operational', 'amod'), ('semantics', 'pobj'), (',', 'punct'), ('ALP', 'compound'), ('agents', 'nsubj'), ('reason', 'ROOT'), ('forwards', 'advmod'), (' ', 'pobj'), ('observations', 'pobj'), (',', 'punct'), ('forwards', 'conj'), ('backwards', 'conj'), ('be-', 'amod'), ('liefs', 'pobj'), (',', 'punct'), ('determine', 'advcl'), ('instance', 'nsubj'), ('conditions', 'pobj'), (' ', 'nsubj'), ('goal', 'pobj'), ('true', 'acomp'), (',', 'punct'), ('derive', 'conj'), ('corresponding', 'amod'), ('instance', 'dobj'), (' ', 'pobj'), ('conclusion', 'dobj'), ('goal', 'pobj'), ('achievement', 'compound'), ('goal', 'pobj'), (',', 'punct'), (' ', 'nsubj'), ('true', 'ccomp'), ('.', 'punct')]

>> Bigrams: 
[[operational, semantics], [semantics, ,], [,, ALP], [ALP, agents], [agents, reason], [reason, forwards], [forwards,  ], [ , observations], [observations, ,], [,, forwards], [forwards, backwards], [backwards, be-], [be-, liefs], [liefs, ,], [,, determine], [determine, instance], [instance, conditions], [conditions,  ], [ , goal], [goal, true], [true, ,], [,, derive], [derive, corresponding], [corresponding, instance], [instance,  ], [ , conclusion], [conclusion, goal], [goal, achievement], [achievement, goal], [goal, ,], [,,  ], [ , true], [true, .]]

>> Trigrams: 
[[operational, semantics, ,], [semantics, ,, ALP], [,, ALP, agents], [ALP, agents, reason], [agents, reason, forwards], [reason, forwards,  ], [forwards,  , observations], [ , observations, ,], [observations, ,, forwards], [,, forwards, backwards], [forwards, backwards, be-], [backwards, be-, liefs], [be-, liefs, ,], [liefs, ,, determine], [,, determine, instance], [determine, instance, conditions], [instance, conditions,  ], [conditions,  , goal], [ , goal, true], [goal, true, ,], [true, ,, derive], [,, derive, corresponding], [derive, corresponding, instance], [corresponding, instance,  ], [instance,  , conclusion], [ , conclusion, goal], [conclusion, goal, achievement], [goal, achievement, goal], [achievement, goal, ,], [goal, ,,  ], [,,  , true], [ , true, .]]

>> Noun Phrases are: 
[the operational semantics, ALP agents, observations, be- liefs, some instance, the conditions, a goal, the corresponding instance, the conclusion, the goal, an achievement goal]

>> Named Entities are: 
[('ALP', 'ORG')] 

------------------- Sentence 2 -------------------

Forward reasoning from observations is like forward  chaining in production systems, but it has the semantics of  aiming to make the goal true by making its conclusion true  whenever its conditions become true. 


>> Tokens are: 
[Forward, reasoning, observations, like, forward,  , chaining, production, systems, ,, semantics,  , aiming, goal, true, making, conclusion, true,  , conditions, true, .] 

>> PoS Tags are: 
[('Forward', 'ADJ'), ('reasoning', 'NOUN'), ('observations', 'NOUN'), ('like', 'ADP'), ('forward', 'ADV'), (' ', 'SPACE'), ('chaining', 'VERB'), ('production', 'NOUN'), ('systems', 'NOUN'), (',', 'PUNCT'), ('semantics', 'NOUN'), (' ', 'SPACE'), ('aiming', 'VERB'), ('goal', 'NOUN'), ('true', 'ADJ'), ('making', 'VERB'), ('conclusion', 'NOUN'), ('true', 'ADJ'), (' ', 'SPACE'), ('conditions', 'NOUN'), ('true', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Forward', 'amod'), ('reasoning', 'nsubj'), ('observations', 'pobj'), ('like', 'prep'), ('forward', 'pcomp'), (' ', 'attr'), ('chaining', 'acl'), ('production', 'compound'), ('systems', 'pobj'), (',', 'punct'), ('semantics', 'dobj'), (' ', 'pobj'), ('aiming', 'acl'), ('goal', 'nsubj'), ('true', 'ccomp'), ('making', 'pcomp'), ('conclusion', 'nsubj'), ('true', 'amod'), (' ', 'dobj'), ('conditions', 'nsubj'), ('true', 'acomp'), ('.', 'punct')]

>> Bigrams: 
[[Forward, reasoning], [reasoning, observations], [observations, like], [like, forward], [forward,  ], [ , chaining], [chaining, production], [production, systems], [systems, ,], [,, semantics], [semantics,  ], [ , aiming], [aiming, goal], [goal, true], [true, making], [making, conclusion], [conclusion, true], [true,  ], [ , conditions], [conditions, true], [true, .]]

>> Trigrams: 
[[Forward, reasoning, observations], [reasoning, observations, like], [observations, like, forward], [like, forward,  ], [forward,  , chaining], [ , chaining, production], [chaining, production, systems], [production, systems, ,], [systems, ,, semantics], [,, semantics,  ], [semantics,  , aiming], [ , aiming, goal], [aiming, goal, true], [goal, true, making], [true, making, conclusion], [making, conclusion, true], [conclusion, true,  ], [true,  , conditions], [ , conditions, true], [conditions, true, .]]

>> Noun Phrases are: 
[Forward reasoning, observations, production systems, it, the semantics, the goal, its conclusion, its conditions]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

Conditional goals  understood in this way are also called maintenance goals. 


>> Tokens are: 
[Conditional, goals,  , understood, way, called, maintenance, goals, .] 

>> PoS Tags are: 
[('Conditional', 'ADJ'), ('goals', 'NOUN'), (' ', 'SPACE'), ('understood', 'VERB'), ('way', 'NOUN'), ('called', 'VERB'), ('maintenance', 'NOUN'), ('goals', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Conditional', 'amod'), ('goals', 'nsubjpass'), (' ', 'nsubj'), ('understood', 'relcl'), ('way', 'pobj'), ('called', 'ROOT'), ('maintenance', 'compound'), ('goals', 'oprd'), ('.', 'punct')]

>> Bigrams: 
[[Conditional, goals], [goals,  ], [ , understood], [understood, way], [way, called], [called, maintenance], [maintenance, goals], [goals, .]]

>> Trigrams: 
[[Conditional, goals,  ], [goals,  , understood], [ , understood, way], [understood, way, called], [way, called, maintenance], [called, maintenance, goals], [maintenance, goals, .]]

>> Noun Phrases are: 
[Conditional goals, this way, maintenance goals]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 61 =================================

Achievement goals are solved by reasoning backwards,  searching for a plan of actions whose execution solves the  goals. Backwards reasoning is a form of goal-reduction, and  executable actions are a special case of atomic sub-goals.  

------------------- Sentence 1 -------------------

Achievement goals are solved by reasoning backwards,  searching for a plan of actions whose execution solves the  goals. 


>> Tokens are: 
[Achievement, goals, solved, reasoning, backwards, ,,  , searching, plan, actions, execution, solves,  , goals, .] 

>> PoS Tags are: 
[('Achievement', 'NOUN'), ('goals', 'NOUN'), ('solved', 'VERB'), ('reasoning', 'NOUN'), ('backwards', 'ADV'), (',', 'PUNCT'), (' ', 'SPACE'), ('searching', 'VERB'), ('plan', 'NOUN'), ('actions', 'NOUN'), ('execution', 'NOUN'), ('solves', 'VERB'), (' ', 'SPACE'), ('goals', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Achievement', 'compound'), ('goals', 'nsubjpass'), ('solved', 'ROOT'), ('reasoning', 'pobj'), ('backwards', 'advmod'), (',', 'punct'), (' ', 'nsubj'), ('searching', 'advcl'), ('plan', 'pobj'), ('actions', 'pobj'), ('execution', 'nsubj'), ('solves', 'relcl'), (' ', 'compound'), ('goals', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Achievement, goals], [goals, solved], [solved, reasoning], [reasoning, backwards], [backwards, ,], [,,  ], [ , searching], [searching, plan], [plan, actions], [actions, execution], [execution, solves], [solves,  ], [ , goals], [goals, .]]

>> Trigrams: 
[[Achievement, goals, solved], [goals, solved, reasoning], [solved, reasoning, backwards], [reasoning, backwards, ,], [backwards, ,,  ], [,,  , searching], [ , searching, plan], [searching, plan, actions], [plan, actions, execution], [actions, execution, solves], [execution, solves,  ], [solves,  , goals], [ , goals, .]]

>> Noun Phrases are: 
[Achievement goals, reasoning, a plan, actions, whose execution, the  goals]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Backwards reasoning is a form of goal-reduction, and  executable actions are a special case of atomic sub-goals. 


>> Tokens are: 
[Backwards, reasoning, form, goal, -, reduction, ,,  , executable, actions, special, case, atomic, sub, -, goals, .] 

>> PoS Tags are: 
[('Backwards', 'ADV'), ('reasoning', 'NOUN'), ('form', 'NOUN'), ('goal', 'NOUN'), ('-', 'PUNCT'), ('reduction', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('executable', 'ADJ'), ('actions', 'NOUN'), ('special', 'ADJ'), ('case', 'NOUN'), ('atomic', 'ADJ'), ('sub', 'NOUN'), ('-', 'NOUN'), ('goals', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Backwards', 'advmod'), ('reasoning', 'nsubj'), ('form', 'attr'), ('goal', 'compound'), ('-', 'punct'), ('reduction', 'pobj'), (',', 'punct'), (' ', 'nmod'), ('executable', 'amod'), ('actions', 'nsubj'), ('special', 'amod'), ('case', 'attr'), ('atomic', 'amod'), ('sub', 'pobj'), ('-', 'pobj'), ('goals', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Backwards, reasoning], [reasoning, form], [form, goal], [goal, -], [-, reduction], [reduction, ,], [,,  ], [ , executable], [executable, actions], [actions, special], [special, case], [case, atomic], [atomic, sub], [sub, -], [-, goals], [goals, .]]

>> Trigrams: 
[[Backwards, reasoning, form], [reasoning, form, goal], [form, goal, -], [goal, -, reduction], [-, reduction, ,], [reduction, ,,  ], [,,  , executable], [ , executable, actions], [executable, actions, special], [actions, special, case], [special, case, atomic], [case, atomic, sub], [atomic, sub, -], [sub, -, goals], [-, goals, .]]

>> Noun Phrases are: 
[reasoning, a form, goal-reduction,  executable actions, a special case, atomic sub, -, goals]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 62 =================================

Suppose, for example, that I observe there is a fire. I can  then reason with the goal and beliefs given above, conclud- ing by forward reasoning that there is an emergency, and  deriving the achievement goal I deal with it myself or I get  help or I escape. These three alternatives represent an initial  search space. I can solve the achievement goal by reasoning  backward, reducing the goal I get help to the consecutive  sub-goals I alert the driver of the train and I press the alarm  button. If this last sub-goal is an atomic action, then it can  be executed directly. If the action succeeds, then it makes  the achievement goal and this instance of the maintenance  goal both true.   In the model-theoretic semantics, the agent needs to gen- erate, not only actions, but also assumptions about the  

------------------- Sentence 1 -------------------

Suppose, for example, that I observe there is a fire. 


>> Tokens are: 
[Suppose, ,, example, ,, observe, fire, .] 

>> PoS Tags are: 
[('Suppose', 'VERB'), (',', 'PUNCT'), ('example', 'NOUN'), (',', 'PUNCT'), ('observe', 'VERB'), ('fire', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Suppose', 'ROOT'), (',', 'punct'), ('example', 'pobj'), (',', 'punct'), ('observe', 'ccomp'), ('fire', 'attr'), ('.', 'punct')]

>> Bigrams: 
[[Suppose, ,], [,, example], [example, ,], [,, observe], [observe, fire], [fire, .]]

>> Trigrams: 
[[Suppose, ,, example], [,, example, ,], [example, ,, observe], [,, observe, fire], [observe, fire, .]]

>> Noun Phrases are: 
[example, I, a fire]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

I can  then reason with the goal and beliefs given above, conclud- ing by forward reasoning that there is an emergency, and  deriving the achievement goal I deal with it myself or I get  help 


>> Tokens are: 
[ , reason, goal, beliefs, given, ,, conclud-, ing, forward, reasoning, emergency, ,,  , deriving, achievement, goal, deal,  , help] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('reason', 'NOUN'), ('goal', 'NOUN'), ('beliefs', 'NOUN'), ('given', 'VERB'), (',', 'PUNCT'), ('conclud-', 'DET'), ('ing', 'NOUN'), ('forward', 'ADV'), ('reasoning', 'VERB'), ('emergency', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('deriving', 'VERB'), ('achievement', 'NOUN'), ('goal', 'NOUN'), ('deal', 'VERB'), (' ', 'SPACE'), ('help', 'NOUN')] 

>> Dependency Tags are: 
[(' ', 'nsubj'), ('reason', 'dep'), ('goal', 'pobj'), ('beliefs', 'conj'), ('given', 'acl'), (',', 'punct'), ('conclud-', 'nsubj'), ('ing', 'ROOT'), ('forward', 'advmod'), ('reasoning', 'pcomp'), ('emergency', 'attr'), (',', 'punct'), (' ', 'conj'), ('deriving', 'acl'), ('achievement', 'compound'), ('goal', 'dobj'), ('deal', 'relcl'), (' ', 'compound'), ('help', 'dobj')]

>> Bigrams: 
[[ , reason], [reason, goal], [goal, beliefs], [beliefs, given], [given, ,], [,, conclud-], [conclud-, ing], [ing, forward], [forward, reasoning], [reasoning, emergency], [emergency, ,], [,,  ], [ , deriving], [deriving, achievement], [achievement, goal], [goal, deal], [deal,  ], [ , help]]

>> Trigrams: 
[[ , reason, goal], [reason, goal, beliefs], [goal, beliefs, given], [beliefs, given, ,], [given, ,, conclud-], [,, conclud-, ing], [conclud-, ing, forward], [ing, forward, reasoning], [forward, reasoning, emergency], [reasoning, emergency, ,], [emergency, ,,  ], [,,  , deriving], [ , deriving, achievement], [deriving, achievement, goal], [achievement, goal, deal], [goal, deal,  ], [deal,  , help]]

>> Noun Phrases are: 
[I, the goal, beliefs, an emergency, the achievement goal, I, it, I,  help]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

or I escape. 


>> Tokens are: 
[escape, .] 

>> PoS Tags are: 
[('escape', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('escape', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[escape, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[I]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

These three alternatives represent an initial  search space. 


>> Tokens are: 
[alternatives, represent, initial,  , search, space, .] 

>> PoS Tags are: 
[('alternatives', 'NOUN'), ('represent', 'VERB'), ('initial', 'ADJ'), (' ', 'SPACE'), ('search', 'NOUN'), ('space', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('alternatives', 'nsubj'), ('represent', 'ROOT'), ('initial', 'amod'), (' ', 'compound'), ('search', 'compound'), ('space', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[alternatives, represent], [represent, initial], [initial,  ], [ , search], [search, space], [space, .]]

>> Trigrams: 
[[alternatives, represent, initial], [represent, initial,  ], [initial,  , search], [ , search, space], [search, space, .]]

>> Noun Phrases are: 
[These three alternatives, an initial  search space]

>> Named Entities are: 
[('three', 'CARDINAL')] 

------------------- Sentence 5 -------------------

I can solve the achievement goal by reasoning  backward, reducing the goal I get help to the consecutive  sub-goals I alert the driver of the train and I press the alarm  button. 


>> Tokens are: 
[solve, achievement, goal, reasoning,  , backward, ,, reducing, goal, help, consecutive,  , sub, -, goals, alert, driver, train, press, alarm,  , button, .] 

>> PoS Tags are: 
[('solve', 'VERB'), ('achievement', 'NOUN'), ('goal', 'NOUN'), ('reasoning', 'VERB'), (' ', 'SPACE'), ('backward', 'ADV'), (',', 'PUNCT'), ('reducing', 'VERB'), ('goal', 'NOUN'), ('help', 'NOUN'), ('consecutive', 'ADJ'), (' ', 'SPACE'), ('sub', 'NOUN'), ('-', 'NOUN'), ('goals', 'NOUN'), ('alert', 'VERB'), ('driver', 'NOUN'), ('train', 'NOUN'), ('press', 'VERB'), ('alarm', 'NOUN'), (' ', 'SPACE'), ('button', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('solve', 'ROOT'), ('achievement', 'compound'), ('goal', 'dobj'), ('reasoning', 'pcomp'), (' ', 'dobj'), ('backward', 'advmod'), (',', 'punct'), ('reducing', 'advcl'), ('goal', 'dobj'), ('help', 'dobj'), ('consecutive', 'amod'), (' ', 'nummod'), ('sub', 'pobj'), ('-', 'pobj'), ('goals', 'pobj'), ('alert', 'relcl'), ('driver', 'dobj'), ('train', 'pobj'), ('press', 'conj'), ('alarm', 'dobj'), (' ', 'compound'), ('button', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[solve, achievement], [achievement, goal], [goal, reasoning], [reasoning,  ], [ , backward], [backward, ,], [,, reducing], [reducing, goal], [goal, help], [help, consecutive], [consecutive,  ], [ , sub], [sub, -], [-, goals], [goals, alert], [alert, driver], [driver, train], [train, press], [press, alarm], [alarm,  ], [ , button], [button, .]]

>> Trigrams: 
[[solve, achievement, goal], [achievement, goal, reasoning], [goal, reasoning,  ], [reasoning,  , backward], [ , backward, ,], [backward, ,, reducing], [,, reducing, goal], [reducing, goal, help], [goal, help, consecutive], [help, consecutive,  ], [consecutive,  , sub], [ , sub, -], [sub, -, goals], [-, goals, alert], [goals, alert, driver], [alert, driver, train], [driver, train, press], [train, press, alarm], [press, alarm,  ], [alarm,  , button], [ , button, .]]

>> Noun Phrases are: 
[I, the achievement goal, the goal, I, help, the consecutive  sub, -, goals, I, the driver, the train, I, the alarm,  button]

>> Named Entities are: 
[] 

------------------- Sentence 6 -------------------

If this last sub-goal is an atomic action, then it can  be executed directly. 


>> Tokens are: 
[sub, -, goal, atomic, action, ,,  , executed, directly, .] 

>> PoS Tags are: 
[('sub', 'NOUN'), ('-', 'NOUN'), ('goal', 'NOUN'), ('atomic', 'ADJ'), ('action', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('executed', 'VERB'), ('directly', 'ADV'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('sub', 'nsubj'), ('-', 'nsubj'), ('goal', 'nsubj'), ('atomic', 'amod'), ('action', 'attr'), (',', 'punct'), (' ', 'nsubjpass'), ('executed', 'ROOT'), ('directly', 'advmod'), ('.', 'punct')]

>> Bigrams: 
[[sub, -], [-, goal], [goal, atomic], [atomic, action], [action, ,], [,,  ], [ , executed], [executed, directly], [directly, .]]

>> Trigrams: 
[[sub, -, goal], [-, goal, atomic], [goal, atomic, action], [atomic, action, ,], [action, ,,  ], [,,  , executed], [ , executed, directly], [executed, directly, .]]

>> Noun Phrases are: 
[this last sub, -, goal, an atomic action, it]

>> Named Entities are: 
[] 

------------------- Sentence 7 -------------------

If the action succeeds, then it makes  the achievement goal and this instance of the maintenance  goal both true. 


>> Tokens are: 
[action, succeeds, ,, makes,  , achievement, goal, instance, maintenance,  , goal, true, .] 

>> PoS Tags are: 
[('action', 'NOUN'), ('succeeds', 'VERB'), (',', 'PUNCT'), ('makes', 'VERB'), (' ', 'SPACE'), ('achievement', 'NOUN'), ('goal', 'NOUN'), ('instance', 'NOUN'), ('maintenance', 'NOUN'), (' ', 'SPACE'), ('goal', 'NOUN'), ('true', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('action', 'nsubj'), ('succeeds', 'advcl'), (',', 'punct'), ('makes', 'ROOT'), (' ', 'nsubj'), ('achievement', 'compound'), ('goal', 'ccomp'), ('instance', 'conj'), ('maintenance', 'pobj'), (' ', 'nsubj'), ('goal', 'nsubj'), ('true', 'ccomp'), ('.', 'punct')]

>> Bigrams: 
[[action, succeeds], [succeeds, ,], [,, makes], [makes,  ], [ , achievement], [achievement, goal], [goal, instance], [instance, maintenance], [maintenance,  ], [ , goal], [goal, true], [true, .]]

>> Trigrams: 
[[action, succeeds, ,], [succeeds, ,, makes], [,, makes,  ], [makes,  , achievement], [ , achievement, goal], [achievement, goal, instance], [goal, instance, maintenance], [instance, maintenance,  ], [maintenance,  , goal], [ , goal, true], [goal, true, .]]

>> Noun Phrases are: 
[the action, it, the maintenance,  goal]

>> Named Entities are: 
[] 

------------------- Sentence 8 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 9 -------------------

In the model-theoretic semantics, the agent needs to gen- erate, not only actions, but also assumptions about the   


>> Tokens are: 
[model, -, theoretic, semantics, ,, agent, needs, gen-, erate, ,, actions, ,, assumptions,  ] 

>> PoS Tags are: 
[('model', 'NOUN'), ('-', 'PUNCT'), ('theoretic', 'ADJ'), ('semantics', 'NOUN'), (',', 'PUNCT'), ('agent', 'NOUN'), ('needs', 'VERB'), ('gen-', 'ADV'), ('erate', 'VERB'), (',', 'PUNCT'), ('actions', 'NOUN'), (',', 'PUNCT'), ('assumptions', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('model', 'npadvmod'), ('-', 'punct'), ('theoretic', 'amod'), ('semantics', 'pobj'), (',', 'punct'), ('agent', 'nsubj'), ('needs', 'ROOT'), ('gen-', 'advmod'), ('erate', 'xcomp'), (',', 'punct'), ('actions', 'dep'), (',', 'punct'), ('assumptions', 'conj'), (' ', 'pobj')]

>> Bigrams: 
[[model, -], [-, theoretic], [theoretic, semantics], [semantics, ,], [,, agent], [agent, needs], [needs, gen-], [gen-, erate], [erate, ,], [,, actions], [actions, ,], [,, assumptions], [assumptions,  ]]

>> Trigrams: 
[[model, -, theoretic], [-, theoretic, semantics], [theoretic, semantics, ,], [semantics, ,, agent], [,, agent, needs], [agent, needs, gen-], [needs, gen-, erate], [gen-, erate, ,], [erate, ,, actions], [,, actions, ,], [actions, ,, assumptions], [,, assumptions,  ]]

>> Noun Phrases are: 
[the model-theoretic semantics, the agent]

>> Named Entities are: 
[] 


================================ Paragraph 63 =================================

world. These assumptions explain the use of the term ab- duction in ALP. Abduction is the generation of assumptions  � to explain observations O. For example, if instead of ob- serving fire, I observe there is smoke, and I believe:    

------------------- Sentence 1 -------------------

world. 


>> Tokens are: 
[world, .] 

>> PoS Tags are: 
[('world', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('world', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[world, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[world]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

These assumptions explain the use of the term ab- duction in ALP. 


>> Tokens are: 
[assumptions, explain, use, term, ab-, duction, ALP, .] 

>> PoS Tags are: 
[('assumptions', 'NOUN'), ('explain', 'VERB'), ('use', 'NOUN'), ('term', 'NOUN'), ('ab-', 'NOUN'), ('duction', 'NOUN'), ('ALP', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('assumptions', 'nsubj'), ('explain', 'ROOT'), ('use', 'dobj'), ('term', 'compound'), ('ab-', 'compound'), ('duction', 'pobj'), ('ALP', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[assumptions, explain], [explain, use], [use, term], [term, ab-], [ab-, duction], [duction, ALP], [ALP, .]]

>> Trigrams: 
[[assumptions, explain, use], [explain, use, term], [use, term, ab-], [term, ab-, duction], [ab-, duction, ALP], [duction, ALP, .]]

>> Noun Phrases are: 
[These assumptions, the use, the term ab- duction, ALP]

>> Named Entities are: 
[('ALP', 'ORG')] 

------------------- Sentence 3 -------------------

Abduction is the generation of assumptions  � to explain observations O. 


>> Tokens are: 
[Abduction, generation, assumptions,  , �, explain, observations, O.] 

>> PoS Tags are: 
[('Abduction', 'NOUN'), ('generation', 'NOUN'), ('assumptions', 'NOUN'), (' ', 'SPACE'), ('�', 'NOUN'), ('explain', 'VERB'), ('observations', 'NOUN'), ('O.', 'PROPN')] 

>> Dependency Tags are: 
[('Abduction', 'nsubj'), ('generation', 'attr'), ('assumptions', 'pobj'), (' ', 'compound'), ('�', 'npadvmod'), ('explain', 'advcl'), ('observations', 'dobj'), ('O.', 'punct')]

>> Bigrams: 
[[Abduction, generation], [generation, assumptions], [assumptions,  ], [ , �], [�, explain], [explain, observations], [observations, O.]]

>> Trigrams: 
[[Abduction, generation, assumptions], [generation, assumptions,  ], [assumptions,  , �], [ , �, explain], [�, explain, observations], [explain, observations, O.]]

>> Noun Phrases are: 
[Abduction, the generation, assumptions, observations]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

For example, if instead of ob- serving fire, I observe there is smoke, and I believe: 


>> Tokens are: 
[example, ,, instead, ob-, serving, fire, ,, observe, smoke, ,, believe, :] 

>> PoS Tags are: 
[('example', 'NOUN'), (',', 'PUNCT'), ('instead', 'ADV'), ('ob-', 'NOUN'), ('serving', 'VERB'), ('fire', 'NOUN'), (',', 'PUNCT'), ('observe', 'VERB'), ('smoke', 'NOUN'), (',', 'PUNCT'), ('believe', 'VERB'), (':', 'PUNCT')] 

>> Dependency Tags are: 
[('example', 'pobj'), (',', 'punct'), ('instead', 'advmod'), ('ob-', 'pobj'), ('serving', 'amod'), ('fire', 'dobj'), (',', 'punct'), ('observe', 'ROOT'), ('smoke', 'attr'), (',', 'punct'), ('believe', 'conj'), (':', 'punct')]

>> Bigrams: 
[[example, ,], [,, instead], [instead, ob-], [ob-, serving], [serving, fire], [fire, ,], [,, observe], [observe, smoke], [smoke, ,], [,, believe], [believe, :]]

>> Trigrams: 
[[example, ,, instead], [,, instead, ob-], [instead, ob-, serving], [ob-, serving, fire], [serving, fire, ,], [fire, ,, observe], [,, observe, smoke], [observe, smoke, ,], [smoke, ,, believe], [,, believe, :]]

>> Noun Phrases are: 
[example, ob-, fire, I, smoke, I]

>> Named Entities are: 
[] 

------------------- Sentence 5 -------------------

    


>> Tokens are: 
[   ] 

>> PoS Tags are: 
[('   ', 'SPACE')] 

>> Dependency Tags are: 
[('   ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 64 =================================

there is smoke if there is a fire.    then backwards reasoning from the observation generates an  assumption that there is a fire. Forward and backward rea- soning then continue as before.   

------------------- Sentence 1 -------------------

there is smoke if there is a fire. 


>> Tokens are: 
[smoke, fire, .] 

>> PoS Tags are: 
[('smoke', 'NOUN'), ('fire', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('smoke', 'attr'), ('fire', 'attr'), ('.', 'punct')]

>> Bigrams: 
[[smoke, fire], [fire, .]]

>> Trigrams: 
[[smoke, fire, .]]

>> Noun Phrases are: 
[smoke, a fire]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

   then backwards reasoning from the observation generates an  assumption that there is a fire. 


>> Tokens are: 
[   , backwards, reasoning, observation, generates,  , assumption, fire, .] 

>> PoS Tags are: 
[('   ', 'SPACE'), ('backwards', 'ADV'), ('reasoning', 'VERB'), ('observation', 'NOUN'), ('generates', 'VERB'), (' ', 'SPACE'), ('assumption', 'NOUN'), ('fire', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('   ', 'dep'), ('backwards', 'advmod'), ('reasoning', 'csubj'), ('observation', 'pobj'), ('generates', 'ROOT'), (' ', 'compound'), ('assumption', 'dobj'), ('fire', 'attr'), ('.', 'punct')]

>> Bigrams: 
[[   , backwards], [backwards, reasoning], [reasoning, observation], [observation, generates], [generates,  ], [ , assumption], [assumption, fire], [fire, .]]

>> Trigrams: 
[[   , backwards, reasoning], [backwards, reasoning, observation], [reasoning, observation, generates], [observation, generates,  ], [generates,  , assumption], [ , assumption, fire], [assumption, fire, .]]

>> Noun Phrases are: 
[the observation, an  assumption, a fire]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

Forward and backward rea- soning then continue as before. 


>> Tokens are: 
[Forward, backward, rea-, soning, continue, .] 

>> PoS Tags are: 
[('Forward', 'ADV'), ('backward', 'ADJ'), ('rea-', 'ADJ'), ('soning', 'NOUN'), ('continue', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Forward', 'amod'), ('backward', 'amod'), ('rea-', 'conj'), ('soning', 'nsubj'), ('continue', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Forward, backward], [backward, rea-], [rea-, soning], [soning, continue], [continue, .]]

>> Trigrams: 
[[Forward, backward, rea-], [backward, rea-, soning], [rea-, soning, continue], [soning, continue, .]]

>> Noun Phrases are: 
[Forward and backward rea- soning]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 65 =================================

In the model-theoretic and operational semantics, obser- vations O and goals G are treated similarly, by reasoning  forwards and backwards to generate actions and other as- sumptions �, to make G � O true in the minimal model of  the world determined by B � �. In the example above,  given O = {there is smoke}, then � = {there is a fire, I press  the alarm button} together with B makes G and O both true.   The operational semantics is sound with respect to the  model-theoretic semantics. With modest assumptions, it is  also complete.  

------------------- Sentence 1 -------------------

In the model-theoretic and operational semantics, obser- vations O and goals G are treated similarly, by reasoning  forwards and backwards to generate actions and other as- sumptions �, to make G � O true in the minimal model of  the world determined by B � �. 


>> Tokens are: 
[model, -, theoretic, operational, semantics, ,, obser-, vations, O, goals, G, treated, similarly, ,, reasoning,  , forwards, backwards, generate, actions, as-, sumptions, �, ,, G, �, O, true, minimal, model,  , world, determined, B, �, �, .] 

>> PoS Tags are: 
[('model', 'NOUN'), ('-', 'PUNCT'), ('theoretic', 'ADJ'), ('operational', 'ADJ'), ('semantics', 'NOUN'), (',', 'PUNCT'), ('obser-', 'ADP'), ('vations', 'NOUN'), ('O', 'INTJ'), ('goals', 'NOUN'), ('G', 'NOUN'), ('treated', 'VERB'), ('similarly', 'ADV'), (',', 'PUNCT'), ('reasoning', 'VERB'), (' ', 'SPACE'), ('forwards', 'ADV'), ('backwards', 'ADV'), ('generate', 'VERB'), ('actions', 'NOUN'), ('as-', 'ADJ'), ('sumptions', 'NOUN'), ('�', 'PROPN'), (',', 'PUNCT'), ('G', 'PROPN'), ('�', 'PROPN'), ('O', 'NOUN'), ('true', 'ADJ'), ('minimal', 'ADJ'), ('model', 'NOUN'), (' ', 'SPACE'), ('world', 'NOUN'), ('determined', 'VERB'), ('B', 'PROPN'), ('�', 'PROPN'), ('�', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('model', 'npadvmod'), ('-', 'punct'), ('theoretic', 'amod'), ('operational', 'conj'), ('semantics', 'pobj'), (',', 'punct'), ('obser-', 'dep'), ('vations', 'compound'), ('O', 'nmod'), ('goals', 'conj'), ('G', 'nsubjpass'), ('treated', 'ROOT'), ('similarly', 'advmod'), (',', 'punct'), ('reasoning', 'pcomp'), (' ', 'dobj'), ('forwards', 'advmod'), ('backwards', 'conj'), ('generate', 'advcl'), ('actions', 'dobj'), ('as-', 'amod'), ('sumptions', 'conj'), ('�', 'appos'), (',', 'punct'), ('G', 'compound'), ('�', 'compound'), ('O', 'nsubj'), ('true', 'ccomp'), ('minimal', 'amod'), ('model', 'pobj'), (' ', 'pobj'), ('world', 'appos'), ('determined', 'acl'), ('B', 'compound'), ('�', 'compound'), ('�', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[model, -], [-, theoretic], [theoretic, operational], [operational, semantics], [semantics, ,], [,, obser-], [obser-, vations], [vations, O], [O, goals], [goals, G], [G, treated], [treated, similarly], [similarly, ,], [,, reasoning], [reasoning,  ], [ , forwards], [forwards, backwards], [backwards, generate], [generate, actions], [actions, as-], [as-, sumptions], [sumptions, �], [�, ,], [,, G], [G, �], [�, O], [O, true], [true, minimal], [minimal, model], [model,  ], [ , world], [world, determined], [determined, B], [B, �], [�, �], [�, .]]

>> Trigrams: 
[[model, -, theoretic], [-, theoretic, operational], [theoretic, operational, semantics], [operational, semantics, ,], [semantics, ,, obser-], [,, obser-, vations], [obser-, vations, O], [vations, O, goals], [O, goals, G], [goals, G, treated], [G, treated, similarly], [treated, similarly, ,], [similarly, ,, reasoning], [,, reasoning,  ], [reasoning,  , forwards], [ , forwards, backwards], [forwards, backwards, generate], [backwards, generate, actions], [generate, actions, as-], [actions, as-, sumptions], [as-, sumptions, �], [sumptions, �, ,], [�, ,, G], [,, G, �], [G, �, O], [�, O, true], [O, true, minimal], [true, minimal, model], [minimal, model,  ], [model,  , world], [ , world, determined], [world, determined, B], [determined, B, �], [B, �, �], [�, �, .]]

>> Noun Phrases are: 
[the model-theoretic and operational semantics, vations O and goals G, actions, other as- sumptions, �, G � O, the minimal model, the world, B � �]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

In the example above,  given O = {there is smoke}, then � = {there is a fire, I press  the alarm button} together with B makes G and O both true. 


>> Tokens are: 
[example, ,,  , given, O, =, {, smoke, }, ,, �, =, {, fire, ,, press,  , alarm, button, }, B, makes, G, O, true, .] 

>> PoS Tags are: 
[('example', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('given', 'VERB'), ('O', 'NOUN'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('smoke', 'NOUN'), ('}', 'PUNCT'), (',', 'PUNCT'), ('�', 'NOUN'), ('=', 'PUNCT'), ('{', 'PUNCT'), ('fire', 'NOUN'), (',', 'PUNCT'), ('press', 'VERB'), (' ', 'SPACE'), ('alarm', 'NOUN'), ('button', 'NOUN'), ('}', 'PUNCT'), ('B', 'NOUN'), ('makes', 'VERB'), ('G', 'NOUN'), ('O', 'INTJ'), ('true', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('example', 'pobj'), (',', 'punct'), (' ', 'nsubj'), ('given', 'ccomp'), ('O', 'dative'), ('=', 'dobj'), ('{', 'punct'), ('smoke', 'attr'), ('}', 'punct'), (',', 'punct'), ('�', 'dep'), ('=', 'punct'), ('{', 'punct'), ('fire', 'attr'), (',', 'punct'), ('press', 'ROOT'), (' ', 'dobj'), ('alarm', 'compound'), ('button', 'dobj'), ('}', 'punct'), ('B', 'pobj'), ('makes', 'ccomp'), ('G', 'dobj'), ('O', 'conj'), ('true', 'ccomp'), ('.', 'punct')]

>> Bigrams: 
[[example, ,], [,,  ], [ , given], [given, O], [O, =], [=, {], [{, smoke], [smoke, }], [}, ,], [,, �], [�, =], [=, {], [{, fire], [fire, ,], [,, press], [press,  ], [ , alarm], [alarm, button], [button, }], [}, B], [B, makes], [makes, G], [G, O], [O, true], [true, .]]

>> Trigrams: 
[[example, ,,  ], [,,  , given], [ , given, O], [given, O, =], [O, =, {], [=, {, smoke], [{, smoke, }], [smoke, }, ,], [}, ,, �], [,, �, =], [�, =, {], [=, {, fire], [{, fire, ,], [fire, ,, press], [,, press,  ], [press,  , alarm], [ , alarm, button], [alarm, button, }], [button, }, B], [}, B, makes], [B, makes, G], [makes, G, O], [G, O, true], [O, true, .]]

>> Noun Phrases are: 
[the example, O, smoke, a fire, I, the alarm button, B, G]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

The operational semantics is sound with respect to the  model-theoretic semantics. 


>> Tokens are: 
[operational, semantics, sound, respect,  , model, -, theoretic, semantics, .] 

>> PoS Tags are: 
[('operational', 'ADJ'), ('semantics', 'NOUN'), ('sound', 'ADJ'), ('respect', 'NOUN'), (' ', 'SPACE'), ('model', 'NOUN'), ('-', 'PUNCT'), ('theoretic', 'ADJ'), ('semantics', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('operational', 'amod'), ('semantics', 'nsubj'), ('sound', 'acomp'), ('respect', 'pobj'), (' ', 'amod'), ('model', 'npadvmod'), ('-', 'punct'), ('theoretic', 'amod'), ('semantics', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[operational, semantics], [semantics, sound], [sound, respect], [respect,  ], [ , model], [model, -], [-, theoretic], [theoretic, semantics], [semantics, .]]

>> Trigrams: 
[[operational, semantics, sound], [semantics, sound, respect], [sound, respect,  ], [respect,  , model], [ , model, -], [model, -, theoretic], [-, theoretic, semantics], [theoretic, semantics, .]]

>> Noun Phrases are: 
[The operational semantics, respect, the  model-theoretic semantics]

>> Named Entities are: 
[] 

------------------- Sentence 5 -------------------

With modest assumptions, it is  also complete. 


>> Tokens are: 
[modest, assumptions, ,,  , complete, .] 

>> PoS Tags are: 
[('modest', 'ADJ'), ('assumptions', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('complete', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('modest', 'amod'), ('assumptions', 'pobj'), (',', 'punct'), (' ', 'nsubj'), ('complete', 'acomp'), ('.', 'punct')]

>> Bigrams: 
[[modest, assumptions], [assumptions, ,], [,,  ], [ , complete], [complete, .]]

>> Trigrams: 
[[modest, assumptions, ,], [assumptions, ,,  ], [,,  , complete], [ , complete, .]]

>> Noun Phrases are: 
[modest assumptions, it]

>> Named Entities are: 
[] 

------------------- Sentence 6 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 66 =================================

2.2 Choosing the Best Solution   

------------------- Sentence 1 -------------------

2.2 Choosing the Best Solution 


>> Tokens are: 
[2.2, Choosing, Best, Solution] 

>> PoS Tags are: 
[('2.2', 'NUM'), ('Choosing', 'VERB'), ('Best', 'PROPN'), ('Solution', 'PROPN')] 

>> Dependency Tags are: 
[('2.2', 'ROOT'), ('Choosing', 'acl'), ('Best', 'compound'), ('Solution', 'dobj')]

>> Bigrams: 
[[2.2, Choosing], [Choosing, Best], [Best, Solution]]

>> Trigrams: 
[[2.2, Choosing, Best], [Choosing, Best, Solution]]

>> Noun Phrases are: 
[the Best Solution]

>> Named Entities are: 
[('2.2', 'CARDINAL')] 

------------------- Sentence 2 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 67 =================================

There can be several, alternative � that, together with B,  make G and O both true. These � can have different values,  and the challenge for an intelligent agent is to find the best  � possible within the computational resources available.   

------------------- Sentence 1 -------------------

There can be several, alternative � that, together with B,  make G and O both true. 


>> Tokens are: 
[,, alternative, �, ,, B, ,,  , G, O, true, .] 

>> PoS Tags are: 
[(',', 'PUNCT'), ('alternative', 'ADJ'), ('�', 'NOUN'), (',', 'PUNCT'), ('B', 'PROPN'), (',', 'PUNCT'), (' ', 'SPACE'), ('G', 'NOUN'), ('O', 'INTJ'), ('true', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(',', 'punct'), ('alternative', 'amod'), ('�', 'attr'), (',', 'punct'), ('B', 'pobj'), (',', 'punct'), (' ', 'nsubj'), ('G', 'dobj'), ('O', 'conj'), ('true', 'ccomp'), ('.', 'punct')]

>> Bigrams: 
[[,, alternative], [alternative, �], [�, ,], [,, B], [B, ,], [,,  ], [ , G], [G, O], [O, true], [true, .]]

>> Trigrams: 
[[,, alternative, �], [alternative, �, ,], [�, ,, B], [,, B, ,], [B, ,,  ], [,,  , G], [ , G, O], [G, O, true], [O, true, .]]

>> Noun Phrases are: 
[several, alternative �, B, G]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

These � can have different values,  and the challenge for an intelligent agent is to find the best  � possible within the computational resources available. 


>> Tokens are: 
[�, different, values, ,,  , challenge, intelligent, agent, find, best,  , �, possible, computational, resources, available, .] 

>> PoS Tags are: 
[('�', 'PROPN'), ('different', 'ADJ'), ('values', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('challenge', 'NOUN'), ('intelligent', 'ADJ'), ('agent', 'NOUN'), ('find', 'VERB'), ('best', 'ADJ'), (' ', 'SPACE'), ('�', 'NOUN'), ('possible', 'ADJ'), ('computational', 'ADJ'), ('resources', 'NOUN'), ('available', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('�', 'nsubj'), ('different', 'amod'), ('values', 'dobj'), (',', 'punct'), (' ', 'conj'), ('challenge', 'conj'), ('intelligent', 'amod'), ('agent', 'pobj'), ('find', 'xcomp'), ('best', 'amod'), (' ', 'dobj'), ('�', 'appos'), ('possible', 'amod'), ('computational', 'amod'), ('resources', 'pobj'), ('available', 'amod'), ('.', 'punct')]

>> Bigrams: 
[[�, different], [different, values], [values, ,], [,,  ], [ , challenge], [challenge, intelligent], [intelligent, agent], [agent, find], [find, best], [best,  ], [ , �], [�, possible], [possible, computational], [computational, resources], [resources, available], [available, .]]

>> Trigrams: 
[[�, different, values], [different, values, ,], [values, ,,  ], [,,  , challenge], [ , challenge, intelligent], [challenge, intelligent, agent], [intelligent, agent, find], [agent, find, best], [find, best,  ], [best,  , �], [ , �, possible], [�, possible, computational], [possible, computational, resources], [computational, resources, available], [resources, available, .]]

>> Noun Phrases are: 
[These �, different values, the challenge, an intelligent agent, �, the computational resources]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 68 =================================

In classical decision theory, the value of an action is  measured by the expected utility of its consequences. In the  philosophy of science, the value of an explanation is meas- ured similarly in terms of its probability and explanatory  power. (The more observations explained the better.) In  ALP agents, the same measures can be used to evaluate both  candidate actions and candidate explanations. In both cases,  candidate assumptions in � are evaluated by reasoning for- wards to generate consequences of the assumptions in �.   

------------------- Sentence 1 -------------------

In classical decision theory, the value of an action is  measured by the expected utility of its consequences. 


>> Tokens are: 
[classical, decision, theory, ,, value, action,  , measured, expected, utility, consequences, .] 

>> PoS Tags are: 
[('classical', 'ADJ'), ('decision', 'NOUN'), ('theory', 'NOUN'), (',', 'PUNCT'), ('value', 'NOUN'), ('action', 'NOUN'), (' ', 'SPACE'), ('measured', 'VERB'), ('expected', 'ADJ'), ('utility', 'NOUN'), ('consequences', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('classical', 'amod'), ('decision', 'compound'), ('theory', 'pobj'), (',', 'punct'), ('value', 'nsubj'), ('action', 'pobj'), (' ', 'attr'), ('measured', 'acl'), ('expected', 'amod'), ('utility', 'pobj'), ('consequences', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[classical, decision], [decision, theory], [theory, ,], [,, value], [value, action], [action,  ], [ , measured], [measured, expected], [expected, utility], [utility, consequences], [consequences, .]]

>> Trigrams: 
[[classical, decision, theory], [decision, theory, ,], [theory, ,, value], [,, value, action], [value, action,  ], [action,  , measured], [ , measured, expected], [measured, expected, utility], [expected, utility, consequences], [utility, consequences, .]]

>> Noun Phrases are: 
[classical decision theory, the value, an action, the expected utility, its consequences]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

In the  philosophy of science, the value of an explanation is meas- ured similarly in terms of its probability and explanatory  power. 


>> Tokens are: 
[ , philosophy, science, ,, value, explanation, meas-, ured, similarly, terms, probability, explanatory,  , power, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('philosophy', 'NOUN'), ('science', 'NOUN'), (',', 'PUNCT'), ('value', 'NOUN'), ('explanation', 'NOUN'), ('meas-', 'ADV'), ('ured', 'ADJ'), ('similarly', 'ADV'), ('terms', 'NOUN'), ('probability', 'NOUN'), ('explanatory', 'ADJ'), (' ', 'SPACE'), ('power', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'compound'), ('philosophy', 'pobj'), ('science', 'pobj'), (',', 'punct'), ('value', 'nsubj'), ('explanation', 'pobj'), ('meas-', 'advmod'), ('ured', 'acomp'), ('similarly', 'advmod'), ('terms', 'pobj'), ('probability', 'pobj'), ('explanatory', 'amod'), (' ', 'compound'), ('power', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[ , philosophy], [philosophy, science], [science, ,], [,, value], [value, explanation], [explanation, meas-], [meas-, ured], [ured, similarly], [similarly, terms], [terms, probability], [probability, explanatory], [explanatory,  ], [ , power], [power, .]]

>> Trigrams: 
[[ , philosophy, science], [philosophy, science, ,], [science, ,, value], [,, value, explanation], [value, explanation, meas-], [explanation, meas-, ured], [meas-, ured, similarly], [ured, similarly, terms], [similarly, terms, probability], [terms, probability, explanatory], [probability, explanatory,  ], [explanatory,  , power], [ , power, .]]

>> Noun Phrases are: 
[the  philosophy, science, the value, an explanation, terms, its probability, explanatory  power]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

(The more observations explained the better.) 


>> Tokens are: 
[(, observations, explained, better, ., )] 

>> PoS Tags are: 
[('(', 'PUNCT'), ('observations', 'NOUN'), ('explained', 'VERB'), ('better', 'ADJ'), ('.', 'PUNCT'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('(', 'punct'), ('observations', 'nsubj'), ('explained', 'ROOT'), ('better', 'advmod'), ('.', 'punct'), (')', 'punct')]

>> Bigrams: 
[[(, observations], [observations, explained], [explained, better], [better, .], [., )]]

>> Trigrams: 
[[(, observations, explained], [observations, explained, better], [explained, better, .], [better, ., )]]

>> Noun Phrases are: 
[The more observations]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

In  ALP agents, the same measures can be used to evaluate both  candidate actions and candidate explanations. 


>> Tokens are: 
[ , ALP, agents, ,, measures, evaluate,  , candidate, actions, candidate, explanations, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('ALP', 'PROPN'), ('agents', 'NOUN'), (',', 'PUNCT'), ('measures', 'NOUN'), ('evaluate', 'VERB'), (' ', 'SPACE'), ('candidate', 'NOUN'), ('actions', 'NOUN'), ('candidate', 'NOUN'), ('explanations', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'pobj'), ('ALP', 'compound'), ('agents', 'pobj'), (',', 'punct'), ('measures', 'nsubjpass'), ('evaluate', 'xcomp'), (' ', 'nmod'), ('candidate', 'compound'), ('actions', 'dobj'), ('candidate', 'compound'), ('explanations', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[ , ALP], [ALP, agents], [agents, ,], [,, measures], [measures, evaluate], [evaluate,  ], [ , candidate], [candidate, actions], [actions, candidate], [candidate, explanations], [explanations, .]]

>> Trigrams: 
[[ , ALP, agents], [ALP, agents, ,], [agents, ,, measures], [,, measures, evaluate], [measures, evaluate,  ], [evaluate,  , candidate], [ , candidate, actions], [candidate, actions, candidate], [actions, candidate, explanations], [candidate, explanations, .]]

>> Noun Phrases are: 
[ALP agents, the same measures, both  candidate actions, candidate explanations]

>> Named Entities are: 
[('ALP', 'ORG')] 

------------------- Sentence 5 -------------------

In both cases,  candidate assumptions in � are evaluated by reasoning for- wards to generate consequences of the assumptions in �. 


>> Tokens are: 
[cases, ,,  , candidate, assumptions, �, evaluated, reasoning, for-, wards, generate, consequences, assumptions, �, .] 

>> PoS Tags are: 
[('cases', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('candidate', 'NOUN'), ('assumptions', 'NOUN'), ('�', 'PROPN'), ('evaluated', 'VERB'), ('reasoning', 'VERB'), ('for-', 'ADJ'), ('wards', 'NOUN'), ('generate', 'VERB'), ('consequences', 'NOUN'), ('assumptions', 'NOUN'), ('�', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('cases', 'pobj'), (',', 'punct'), (' ', 'nsubjpass'), ('candidate', 'compound'), ('assumptions', 'nsubjpass'), ('�', 'pobj'), ('evaluated', 'ROOT'), ('reasoning', 'pcomp'), ('for-', 'amod'), ('wards', 'dobj'), ('generate', 'advcl'), ('consequences', 'dobj'), ('assumptions', 'pobj'), ('�', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[cases, ,], [,,  ], [ , candidate], [candidate, assumptions], [assumptions, �], [�, evaluated], [evaluated, reasoning], [reasoning, for-], [for-, wards], [wards, generate], [generate, consequences], [consequences, assumptions], [assumptions, �], [�, .]]

>> Trigrams: 
[[cases, ,,  ], [,,  , candidate], [ , candidate, assumptions], [candidate, assumptions, �], [assumptions, �, evaluated], [�, evaluated, reasoning], [evaluated, reasoning, for-], [reasoning, for-, wards], [for-, wards, generate], [wards, generate, consequences], [generate, consequences, assumptions], [consequences, assumptions, �], [assumptions, �, .]]

>> Noun Phrases are: 
[both cases, candidate assumptions, �, for- wards, consequences, the assumptions, �]

>> Named Entities are: 
[] 

------------------- Sentence 6 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 69 =================================

In ALP agents, the task of finding the best � is incorpo- rated into the search strategy for reasoning backwards to  generate �, using some form of best-first search, like A* or  branch-and-bound. This task is analogous to the much sim- pler problem of conflict resolution in production systems.  

------------------- Sentence 1 -------------------

In ALP agents, the task of finding the best � is incorpo- rated into the search strategy for reasoning backwards to  generate �, using some form of best-first search, like A* or  branch-and-bound. 


>> Tokens are: 
[ALP, agents, ,, task, finding, best, �, incorpo-, rated, search, strategy, reasoning, backwards,  , generate, �, ,, form, best, -, search, ,, like, *,  , branch, -, -, bound, .] 

>> PoS Tags are: 
[('ALP', 'PROPN'), ('agents', 'NOUN'), (',', 'PUNCT'), ('task', 'NOUN'), ('finding', 'VERB'), ('best', 'ADJ'), ('�', 'NOUN'), ('incorpo-', 'ADV'), ('rated', 'VERB'), ('search', 'NOUN'), ('strategy', 'NOUN'), ('reasoning', 'NOUN'), ('backwards', 'ADV'), (' ', 'SPACE'), ('generate', 'VERB'), ('�', 'PROPN'), (',', 'PUNCT'), ('form', 'NOUN'), ('best', 'ADV'), ('-', 'PUNCT'), ('search', 'NOUN'), (',', 'PUNCT'), ('like', 'ADP'), ('*', 'SYM'), (' ', 'SPACE'), ('branch', 'NOUN'), ('-', 'PUNCT'), ('-', 'PUNCT'), ('bound', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('ALP', 'compound'), ('agents', 'pobj'), (',', 'punct'), ('task', 'nsubjpass'), ('finding', 'pcomp'), ('best', 'amod'), ('�', 'dobj'), ('incorpo-', 'dep'), ('rated', 'ROOT'), ('search', 'compound'), ('strategy', 'pobj'), ('reasoning', 'pobj'), ('backwards', 'advmod'), (' ', 'pobj'), ('generate', 'advcl'), ('�', 'dobj'), (',', 'punct'), ('form', 'dobj'), ('best', 'advmod'), ('-', 'punct'), ('search', 'pobj'), (',', 'punct'), ('like', 'prep'), ('*', 'punct'), (' ', 'conj'), ('branch', 'pobj'), ('-', 'punct'), ('-', 'punct'), ('bound', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[ALP, agents], [agents, ,], [,, task], [task, finding], [finding, best], [best, �], [�, incorpo-], [incorpo-, rated], [rated, search], [search, strategy], [strategy, reasoning], [reasoning, backwards], [backwards,  ], [ , generate], [generate, �], [�, ,], [,, form], [form, best], [best, -], [-, search], [search, ,], [,, like], [like, *], [*,  ], [ , branch], [branch, -], [-, -], [-, bound], [bound, .]]

>> Trigrams: 
[[ALP, agents, ,], [agents, ,, task], [,, task, finding], [task, finding, best], [finding, best, �], [best, �, incorpo-], [�, incorpo-, rated], [incorpo-, rated, search], [rated, search, strategy], [search, strategy, reasoning], [strategy, reasoning, backwards], [reasoning, backwards,  ], [backwards,  , generate], [ , generate, �], [generate, �, ,], [�, ,, form], [,, form, best], [form, best, -], [best, -, search], [-, search, ,], [search, ,, like], [,, like, *], [like, *,  ], [*,  , branch], [ , branch, -], [branch, -, -], [-, -, bound], [-, bound, .]]

>> Noun Phrases are: 
[ALP agents, the task, the best �, the search strategy, reasoning, �, some form, best-first search, A* or  branch]

>> Named Entities are: 
[('first', 'ORDINAL')] 

------------------- Sentence 2 -------------------

This task is analogous to the much sim- pler problem of conflict resolution in production systems. 


>> Tokens are: 
[task, analogous, sim-, pler, problem, conflict, resolution, production, systems, .] 

>> PoS Tags are: 
[('task', 'NOUN'), ('analogous', 'ADJ'), ('sim-', 'NOUN'), ('pler', 'NOUN'), ('problem', 'NOUN'), ('conflict', 'NOUN'), ('resolution', 'NOUN'), ('production', 'NOUN'), ('systems', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('task', 'nsubj'), ('analogous', 'acomp'), ('sim-', 'advmod'), ('pler', 'compound'), ('problem', 'pobj'), ('conflict', 'compound'), ('resolution', 'pobj'), ('production', 'compound'), ('systems', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[task, analogous], [analogous, sim-], [sim-, pler], [pler, problem], [problem, conflict], [conflict, resolution], [resolution, production], [production, systems], [systems, .]]

>> Trigrams: 
[[task, analogous, sim-], [analogous, sim-, pler], [sim-, pler, problem], [pler, problem, conflict], [problem, conflict, resolution], [conflict, resolution, production], [resolution, production, systems], [production, systems, .]]

>> Noun Phrases are: 
[This task, the much sim- pler problem, conflict resolution, production systems]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 70 =================================

Conventional production systems avoid complex deci- sion-theory and abductive reasoning mainly by compiling  higher-level goals, beliefs and decisions into lower-level  heuristics and stimulus-response associations. For example:    

------------------- Sentence 1 -------------------

Conventional production systems avoid complex deci- sion-theory and abductive reasoning mainly by compiling  higher-level goals, beliefs and decisions into lower-level  heuristics and stimulus-response associations. 


>> Tokens are: 
[Conventional, production, systems, avoid, complex, deci-, sion, -, theory, abductive, reasoning, mainly, compiling,  , higher, -, level, goals, ,, beliefs, decisions, lower, -, level,  , heuristics, stimulus, -, response, associations, .] 

>> PoS Tags are: 
[('Conventional', 'ADJ'), ('production', 'NOUN'), ('systems', 'NOUN'), ('avoid', 'VERB'), ('complex', 'ADJ'), ('deci-', 'NOUN'), ('sion', 'NOUN'), ('-', 'PUNCT'), ('theory', 'NOUN'), ('abductive', 'ADJ'), ('reasoning', 'NOUN'), ('mainly', 'ADV'), ('compiling', 'VERB'), (' ', 'SPACE'), ('higher', 'ADJ'), ('-', 'PUNCT'), ('level', 'NOUN'), ('goals', 'NOUN'), (',', 'PUNCT'), ('beliefs', 'NOUN'), ('decisions', 'NOUN'), ('lower', 'ADJ'), ('-', 'PUNCT'), ('level', 'NOUN'), (' ', 'SPACE'), ('heuristics', 'NOUN'), ('stimulus', 'ADJ'), ('-', 'PUNCT'), ('response', 'NOUN'), ('associations', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Conventional', 'amod'), ('production', 'compound'), ('systems', 'nsubj'), ('avoid', 'ROOT'), ('complex', 'amod'), ('deci-', 'compound'), ('sion', 'compound'), ('-', 'punct'), ('theory', 'dobj'), ('abductive', 'amod'), ('reasoning', 'conj'), ('mainly', 'advmod'), ('compiling', 'pcomp'), (' ', 'dative'), ('higher', 'amod'), ('-', 'punct'), ('level', 'compound'), ('goals', 'dobj'), (',', 'punct'), ('beliefs', 'conj'), ('decisions', 'conj'), ('lower', 'amod'), ('-', 'punct'), ('level', 'compound'), (' ', 'compound'), ('heuristics', 'pobj'), ('stimulus', 'amod'), ('-', 'punct'), ('response', 'compound'), ('associations', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[Conventional, production], [production, systems], [systems, avoid], [avoid, complex], [complex, deci-], [deci-, sion], [sion, -], [-, theory], [theory, abductive], [abductive, reasoning], [reasoning, mainly], [mainly, compiling], [compiling,  ], [ , higher], [higher, -], [-, level], [level, goals], [goals, ,], [,, beliefs], [beliefs, decisions], [decisions, lower], [lower, -], [-, level], [level,  ], [ , heuristics], [heuristics, stimulus], [stimulus, -], [-, response], [response, associations], [associations, .]]

>> Trigrams: 
[[Conventional, production, systems], [production, systems, avoid], [systems, avoid, complex], [avoid, complex, deci-], [complex, deci-, sion], [deci-, sion, -], [sion, -, theory], [-, theory, abductive], [theory, abductive, reasoning], [abductive, reasoning, mainly], [reasoning, mainly, compiling], [mainly, compiling,  ], [compiling,  , higher], [ , higher, -], [higher, -, level], [-, level, goals], [level, goals, ,], [goals, ,, beliefs], [,, beliefs, decisions], [beliefs, decisions, lower], [decisions, lower, -], [lower, -, level], [-, level,  ], [level,  , heuristics], [ , heuristics, stimulus], [heuristics, stimulus, -], [stimulus, -, response], [-, response, associations], [response, associations, .]]

>> Noun Phrases are: 
[Conventional production systems, complex deci- sion-theory, abductive reasoning, higher-level goals, beliefs, decisions, lower-level  heuristics, stimulus-response associations]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

For example:     


>> Tokens are: 
[example, :,    ] 

>> PoS Tags are: 
[('example', 'NOUN'), (':', 'PUNCT'), ('   ', 'SPACE')] 

>> Dependency Tags are: 
[('example', 'pobj'), (':', 'punct'), ('   ', 'pobj')]

>> Bigrams: 
[[example, :], [:,    ]]

>> Trigrams: 
[[example, :,    ]]

>> Noun Phrases are: 
[example]

>> Named Entities are: 
[] 


================================ Paragraph 71 =================================

if there is smoke and I am on a train   then I press the alarm button.  

------------------- Sentence 1 -------------------

if there is smoke and I am on a train   then I press the alarm button. 


>> Tokens are: 
[smoke, train,   , press, alarm, button, .] 

>> PoS Tags are: 
[('smoke', 'NOUN'), ('train', 'NOUN'), ('  ', 'SPACE'), ('press', 'VERB'), ('alarm', 'NOUN'), ('button', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('smoke', 'attr'), ('train', 'compound'), ('  ', 'pobj'), ('press', 'ROOT'), ('alarm', 'compound'), ('button', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[smoke, train], [train,   ], [  , press], [press, alarm], [alarm, button], [button, .]]

>> Trigrams: 
[[smoke, train,   ], [train,   , press], [  , press, alarm], [press, alarm, button], [alarm, button, .]]

>> Noun Phrases are: 
[smoke, I, I, the alarm button]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 72 =================================

  In ALP agents, such lower-level rules and higher-level  thinking and decision-making can be combined, as in dual  process theories, to get the best of both worlds.   

------------------- Sentence 1 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

In ALP agents, such lower-level rules and higher-level  thinking and decision-making can be combined, as in dual  process theories, to get the best of both worlds. 


>> Tokens are: 
[ALP, agents, ,, lower, -, level, rules, higher, -, level,  , thinking, decision, -, making, combined, ,, dual,  , process, theories, ,, best, worlds, .] 

>> PoS Tags are: 
[('ALP', 'PROPN'), ('agents', 'NOUN'), (',', 'PUNCT'), ('lower', 'ADJ'), ('-', 'PUNCT'), ('level', 'NOUN'), ('rules', 'NOUN'), ('higher', 'ADJ'), ('-', 'PUNCT'), ('level', 'NOUN'), (' ', 'SPACE'), ('thinking', 'NOUN'), ('decision', 'NOUN'), ('-', 'PUNCT'), ('making', 'NOUN'), ('combined', 'VERB'), (',', 'PUNCT'), ('dual', 'ADJ'), (' ', 'SPACE'), ('process', 'NOUN'), ('theories', 'NOUN'), (',', 'PUNCT'), ('best', 'ADJ'), ('worlds', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('ALP', 'compound'), ('agents', 'pobj'), (',', 'punct'), ('lower', 'amod'), ('-', 'punct'), ('level', 'compound'), ('rules', 'nsubjpass'), ('higher', 'amod'), ('-', 'punct'), ('level', 'nmod'), (' ', 'compound'), ('thinking', 'conj'), ('decision', 'compound'), ('-', 'punct'), ('making', 'conj'), ('combined', 'ROOT'), (',', 'punct'), ('dual', 'amod'), (' ', 'compound'), ('process', 'compound'), ('theories', 'pobj'), (',', 'punct'), ('best', 'dobj'), ('worlds', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[ALP, agents], [agents, ,], [,, lower], [lower, -], [-, level], [level, rules], [rules, higher], [higher, -], [-, level], [level,  ], [ , thinking], [thinking, decision], [decision, -], [-, making], [making, combined], [combined, ,], [,, dual], [dual,  ], [ , process], [process, theories], [theories, ,], [,, best], [best, worlds], [worlds, .]]

>> Trigrams: 
[[ALP, agents, ,], [agents, ,, lower], [,, lower, -], [lower, -, level], [-, level, rules], [level, rules, higher], [rules, higher, -], [higher, -, level], [-, level,  ], [level,  , thinking], [ , thinking, decision], [thinking, decision, -], [decision, -, making], [-, making, combined], [making, combined, ,], [combined, ,, dual], [,, dual,  ], [dual,  , process], [ , process, theories], [process, theories, ,], [theories, ,, best], [,, best, worlds], [best, worlds, .]]

>> Noun Phrases are: 
[ALP agents, such lower-level rules, higher-level  thinking, decision-making, dual  process theories, both worlds]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 73 =================================

Like BDI agents, ALP agents interleave thinking with ob- serving and acting, and do not need to construct complete  plans before starting to act. However, whereas most BDI  agents select and commit to a single plan at a time, ALP  agents select and commit only to individual actions.   

------------------- Sentence 1 -------------------

Like BDI agents, ALP agents interleave thinking with ob- serving and acting, and do not need to construct complete  plans before starting to act. 


>> Tokens are: 
[Like, BDI, agents, ,, ALP, agents, interleave, thinking, ob-, serving, acting, ,, need, construct, complete,  , plans, starting, act, .] 

>> PoS Tags are: 
[('Like', 'ADP'), ('BDI', 'PROPN'), ('agents', 'NOUN'), (',', 'PUNCT'), ('ALP', 'PROPN'), ('agents', 'NOUN'), ('interleave', 'VERB'), ('thinking', 'VERB'), ('ob-', 'NOUN'), ('serving', 'VERB'), ('acting', 'VERB'), (',', 'PUNCT'), ('need', 'VERB'), ('construct', 'VERB'), ('complete', 'ADJ'), (' ', 'SPACE'), ('plans', 'NOUN'), ('starting', 'VERB'), ('act', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Like', 'prep'), ('BDI', 'compound'), ('agents', 'pobj'), (',', 'punct'), ('ALP', 'compound'), ('agents', 'nsubj'), ('interleave', 'ROOT'), ('thinking', 'xcomp'), ('ob-', 'nsubj'), ('serving', 'pcomp'), ('acting', 'conj'), (',', 'punct'), ('need', 'conj'), ('construct', 'xcomp'), ('complete', 'amod'), (' ', 'compound'), ('plans', 'dobj'), ('starting', 'pcomp'), ('act', 'xcomp'), ('.', 'punct')]

>> Bigrams: 
[[Like, BDI], [BDI, agents], [agents, ,], [,, ALP], [ALP, agents], [agents, interleave], [interleave, thinking], [thinking, ob-], [ob-, serving], [serving, acting], [acting, ,], [,, need], [need, construct], [construct, complete], [complete,  ], [ , plans], [plans, starting], [starting, act], [act, .]]

>> Trigrams: 
[[Like, BDI, agents], [BDI, agents, ,], [agents, ,, ALP], [,, ALP, agents], [ALP, agents, interleave], [agents, interleave, thinking], [interleave, thinking, ob-], [thinking, ob-, serving], [ob-, serving, acting], [serving, acting, ,], [acting, ,, need], [,, need, construct], [need, construct, complete], [construct, complete,  ], [complete,  , plans], [ , plans, starting], [plans, starting, act], [starting, act, .]]

>> Noun Phrases are: 
[BDI agents, ALP agents, ob-, complete  plans]

>> Named Entities are: 
[('BDI', 'ORG'), ('ALP', 'ORG')] 

------------------- Sentence 2 -------------------

However, whereas most BDI  agents select and commit to a single plan at a time, ALP  agents select and commit only to individual actions. 


>> Tokens are: 
[,, BDI,  , agents, select, commit, single, plan, time, ,, ALP,  , agents, select, commit, individual, actions, .] 

>> PoS Tags are: 
[(',', 'PUNCT'), ('BDI', 'PROPN'), (' ', 'SPACE'), ('agents', 'NOUN'), ('select', 'VERB'), ('commit', 'VERB'), ('single', 'ADJ'), ('plan', 'NOUN'), ('time', 'NOUN'), (',', 'PUNCT'), ('ALP', 'PROPN'), (' ', 'SPACE'), ('agents', 'NOUN'), ('select', 'VERB'), ('commit', 'VERB'), ('individual', 'ADJ'), ('actions', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(',', 'punct'), ('BDI', 'compound'), (' ', 'compound'), ('agents', 'nsubj'), ('select', 'advcl'), ('commit', 'conj'), ('single', 'amod'), ('plan', 'pobj'), ('time', 'pobj'), (',', 'punct'), ('ALP', 'nmod'), (' ', 'compound'), ('agents', 'nsubj'), ('select', 'ROOT'), ('commit', 'conj'), ('individual', 'amod'), ('actions', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[,, BDI], [BDI,  ], [ , agents], [agents, select], [select, commit], [commit, single], [single, plan], [plan, time], [time, ,], [,, ALP], [ALP,  ], [ , agents], [agents, select], [select, commit], [commit, individual], [individual, actions], [actions, .]]

>> Trigrams: 
[[,, BDI,  ], [BDI,  , agents], [ , agents, select], [agents, select, commit], [select, commit, single], [commit, single, plan], [single, plan, time], [plan, time, ,], [time, ,, ALP], [,, ALP,  ], [ALP,  , agents], [ , agents, select], [agents, select, commit], [select, commit, individual], [commit, individual, actions], [individual, actions, .]]

>> Noun Phrases are: 
[most BDI  agents, a single plan, a time, ALP  agents, individual actions]

>> Named Entities are: 
[('BDI', 'ORG')] 

------------------- Sentence 3 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 74 =================================

Unlike most BDI agents, ALP agents can interleave the  pursuit of several alternative plans, to improve the chances  

------------------- Sentence 1 -------------------

Unlike most BDI agents, ALP agents can interleave the  pursuit of several alternative plans, to improve the chances   


>> Tokens are: 
[Unlike, BDI, agents, ,, ALP, agents, interleave,  , pursuit, alternative, plans, ,, improve, chances,  ] 

>> PoS Tags are: 
[('Unlike', 'ADP'), ('BDI', 'PROPN'), ('agents', 'NOUN'), (',', 'PUNCT'), ('ALP', 'PROPN'), ('agents', 'NOUN'), ('interleave', 'VERB'), (' ', 'SPACE'), ('pursuit', 'NOUN'), ('alternative', 'ADJ'), ('plans', 'NOUN'), (',', 'PUNCT'), ('improve', 'VERB'), ('chances', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Unlike', 'prep'), ('BDI', 'compound'), ('agents', 'pobj'), (',', 'punct'), ('ALP', 'compound'), ('agents', 'nsubj'), ('interleave', 'ROOT'), (' ', 'compound'), ('pursuit', 'dobj'), ('alternative', 'amod'), ('plans', 'pobj'), (',', 'punct'), ('improve', 'advcl'), ('chances', 'dobj'), (' ', 'punct')]

>> Bigrams: 
[[Unlike, BDI], [BDI, agents], [agents, ,], [,, ALP], [ALP, agents], [agents, interleave], [interleave,  ], [ , pursuit], [pursuit, alternative], [alternative, plans], [plans, ,], [,, improve], [improve, chances], [chances,  ]]

>> Trigrams: 
[[Unlike, BDI, agents], [BDI, agents, ,], [agents, ,, ALP], [,, ALP, agents], [ALP, agents, interleave], [agents, interleave,  ], [interleave,  , pursuit], [ , pursuit, alternative], [pursuit, alternative, plans], [alternative, plans, ,], [plans, ,, improve], [,, improve, chances], [improve, chances,  ]]

>> Noun Phrases are: 
[most BDI agents, ALP agents, the  pursuit, several alternative plans, the chances]

>> Named Entities are: 
[('BDI', 'ORG'), ('ALP', 'ORG')] 


================================ Paragraph 75 =================================

12

------------------- Sentence 1 -------------------

12 


>> Tokens are: 
[12] 

>> PoS Tags are: 
[('12', 'NUM')] 

>> Dependency Tags are: 
[('12', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('12', 'CARDINAL')] 


================================ Paragraph 76 =================================

of success. For example, in an emergency an agent can both  press the alarm button and try to escape more or less at the  same time. Whether an ALP agent works on one plan or  several alternative plans at a time depends on the search  strategy. Depth-first search works on one plan at a time, but  other search strategies are often more desirable.  

------------------- Sentence 1 -------------------

of success. 


>> Tokens are: 
[success, .] 

>> PoS Tags are: 
[('success', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('success', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[success, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[success]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

For example, in an emergency an agent can both  press the alarm button and try to escape more or less at the  same time. 


>> Tokens are: 
[example, ,, emergency, agent,  , press, alarm, button, try, escape,  , time, .] 

>> PoS Tags are: 
[('example', 'NOUN'), (',', 'PUNCT'), ('emergency', 'NOUN'), ('agent', 'NOUN'), (' ', 'SPACE'), ('press', 'VERB'), ('alarm', 'NOUN'), ('button', 'NOUN'), ('try', 'VERB'), ('escape', 'VERB'), (' ', 'SPACE'), ('time', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('example', 'pobj'), (',', 'punct'), ('emergency', 'pobj'), ('agent', 'nsubj'), (' ', 'nsubj'), ('press', 'ROOT'), ('alarm', 'compound'), ('button', 'dobj'), ('try', 'conj'), ('escape', 'xcomp'), (' ', 'amod'), ('time', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[example, ,], [,, emergency], [emergency, agent], [agent,  ], [ , press], [press, alarm], [alarm, button], [button, try], [try, escape], [escape,  ], [ , time], [time, .]]

>> Trigrams: 
[[example, ,, emergency], [,, emergency, agent], [emergency, agent,  ], [agent,  , press], [ , press, alarm], [press, alarm, button], [alarm, button, try], [button, try, escape], [try, escape,  ], [escape,  , time], [ , time, .]]

>> Noun Phrases are: 
[example, an emergency, an agent, the alarm button, the  same time]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

Whether an ALP agent works on one plan or  several alternative plans at a time depends on the search  strategy. 


>> Tokens are: 
[ALP, agent, works, plan,  , alternative, plans, time, depends, search,  , strategy, .] 

>> PoS Tags are: 
[('ALP', 'PROPN'), ('agent', 'NOUN'), ('works', 'VERB'), ('plan', 'NOUN'), (' ', 'SPACE'), ('alternative', 'ADJ'), ('plans', 'NOUN'), ('time', 'NOUN'), ('depends', 'VERB'), ('search', 'NOUN'), (' ', 'SPACE'), ('strategy', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('ALP', 'compound'), ('agent', 'nsubj'), ('works', 'csubj'), ('plan', 'pobj'), (' ', 'conj'), ('alternative', 'amod'), ('plans', 'dobj'), ('time', 'pobj'), ('depends', 'ROOT'), ('search', 'compound'), (' ', 'compound'), ('strategy', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[ALP, agent], [agent, works], [works, plan], [plan,  ], [ , alternative], [alternative, plans], [plans, time], [time, depends], [depends, search], [search,  ], [ , strategy], [strategy, .]]

>> Trigrams: 
[[ALP, agent, works], [agent, works, plan], [works, plan,  ], [plan,  , alternative], [ , alternative, plans], [alternative, plans, time], [plans, time, depends], [time, depends, search], [depends, search,  ], [search,  , strategy], [ , strategy, .]]

>> Noun Phrases are: 
[an ALP agent, one plan, several alternative plans, a time, the search  strategy]

>> Named Entities are: 
[('ALP', 'ORG'), ('one', 'CARDINAL')] 

------------------- Sentence 4 -------------------

Depth-first search works on one plan at a time, but  other search strategies are often more desirable. 


>> Tokens are: 
[Depth, -, search, works, plan, time, ,,  , search, strategies, desirable, .] 

>> PoS Tags are: 
[('Depth', 'NOUN'), ('-', 'PUNCT'), ('search', 'NOUN'), ('works', 'VERB'), ('plan', 'NOUN'), ('time', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('search', 'NOUN'), ('strategies', 'NOUN'), ('desirable', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Depth', 'amod'), ('-', 'punct'), ('search', 'nsubj'), ('works', 'ROOT'), ('plan', 'pobj'), ('time', 'pobj'), (',', 'punct'), (' ', 'nmod'), ('search', 'compound'), ('strategies', 'nsubj'), ('desirable', 'acomp'), ('.', 'punct')]

>> Bigrams: 
[[Depth, -], [-, search], [search, works], [works, plan], [plan, time], [time, ,], [,,  ], [ , search], [search, strategies], [strategies, desirable], [desirable, .]]

>> Trigrams: 
[[Depth, -, search], [-, search, works], [search, works, plan], [works, plan, time], [plan, time, ,], [time, ,,  ], [,,  , search], [ , search, strategies], [search, strategies, desirable], [strategies, desirable, .]]

>> Noun Phrases are: 
[Depth-first search, one plan, a time,  other search strategies]

>> Named Entities are: 
[('first', 'ORDINAL'), ('one', 'CARDINAL')] 

------------------- Sentence 5 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 77 =================================

The ALP agent model can be used to develop artificial  agents, but it can also be used as a descriptive model of hu- man thinking and deciding. However, in the remainder of  this paper I will argue that it can also be used as a normative  (or prescriptive) model, which combines and improves upon  both traditional logic and classical decision theory.  

------------------- Sentence 1 -------------------

The ALP agent model can be used to develop artificial  agents, but it can also be used as a descriptive model of hu- man thinking and deciding. 


>> Tokens are: 
[ALP, agent, model, develop, artificial,  , agents, ,, descriptive, model, hu-, man, thinking, deciding, .] 

>> PoS Tags are: 
[('ALP', 'PROPN'), ('agent', 'NOUN'), ('model', 'NOUN'), ('develop', 'VERB'), ('artificial', 'ADJ'), (' ', 'SPACE'), ('agents', 'NOUN'), (',', 'PUNCT'), ('descriptive', 'ADJ'), ('model', 'NOUN'), ('hu-', 'NOUN'), ('man', 'NOUN'), ('thinking', 'VERB'), ('deciding', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('ALP', 'compound'), ('agent', 'compound'), ('model', 'nsubjpass'), ('develop', 'xcomp'), ('artificial', 'amod'), (' ', 'compound'), ('agents', 'dobj'), (',', 'punct'), ('descriptive', 'amod'), ('model', 'pobj'), ('hu-', 'compound'), ('man', 'pobj'), ('thinking', 'acl'), ('deciding', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[ALP, agent], [agent, model], [model, develop], [develop, artificial], [artificial,  ], [ , agents], [agents, ,], [,, descriptive], [descriptive, model], [model, hu-], [hu-, man], [man, thinking], [thinking, deciding], [deciding, .]]

>> Trigrams: 
[[ALP, agent, model], [agent, model, develop], [model, develop, artificial], [develop, artificial,  ], [artificial,  , agents], [ , agents, ,], [agents, ,, descriptive], [,, descriptive, model], [descriptive, model, hu-], [model, hu-, man], [hu-, man, thinking], [man, thinking, deciding], [thinking, deciding, .]]

>> Noun Phrases are: 
[The ALP agent model, artificial  agents, it, a descriptive model, hu- man]

>> Named Entities are: 
[('ALP', 'ORG')] 

------------------- Sentence 2 -------------------

However, in the remainder of  this paper I will argue that it can also be used as a normative  (or prescriptive) model, which combines and improves upon  both traditional logic and classical decision theory. 


>> Tokens are: 
[,, remainder,  , paper, argue, normative,  , (, prescriptive, ), model, ,, combines, improves,  , traditional, logic, classical, decision, theory, .] 

>> PoS Tags are: 
[(',', 'PUNCT'), ('remainder', 'NOUN'), (' ', 'SPACE'), ('paper', 'NOUN'), ('argue', 'VERB'), ('normative', 'ADJ'), (' ', 'SPACE'), ('(', 'PUNCT'), ('prescriptive', 'ADJ'), (')', 'PUNCT'), ('model', 'NOUN'), (',', 'PUNCT'), ('combines', 'VERB'), ('improves', 'VERB'), (' ', 'SPACE'), ('traditional', 'ADJ'), ('logic', 'NOUN'), ('classical', 'ADJ'), ('decision', 'NOUN'), ('theory', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(',', 'punct'), ('remainder', 'pobj'), (' ', 'pobj'), ('paper', 'pobj'), ('argue', 'ROOT'), ('normative', 'amod'), (' ', 'pobj'), ('(', 'punct'), ('prescriptive', 'amod'), (')', 'punct'), ('model', 'conj'), (',', 'punct'), ('combines', 'relcl'), ('improves', 'conj'), (' ', 'pobj'), ('traditional', 'amod'), ('logic', 'npadvmod'), ('classical', 'amod'), ('decision', 'compound'), ('theory', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[,, remainder], [remainder,  ], [ , paper], [paper, argue], [argue, normative], [normative,  ], [ , (], [(, prescriptive], [prescriptive, )], [), model], [model, ,], [,, combines], [combines, improves], [improves,  ], [ , traditional], [traditional, logic], [logic, classical], [classical, decision], [decision, theory], [theory, .]]

>> Trigrams: 
[[,, remainder,  ], [remainder,  , paper], [ , paper, argue], [paper, argue, normative], [argue, normative,  ], [normative,  , (], [ , (, prescriptive], [(, prescriptive, )], [prescriptive, ), model], [), model, ,], [model, ,, combines], [,, combines, improves], [combines, improves,  ], [improves,  , traditional], [ , traditional, logic], [traditional, logic, classical], [logic, classical, decision], [classical, decision, theory], [decision, theory, .]]

>> Noun Phrases are: 
[the remainder, this paper, I, it, prescriptive) model]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 78 =================================

The argument for basing a better decision theory on the  ALP agent model depends on the claim that the clausal logic  of ALP is a plausible model of the language of thought  (LOT). In the next few sections, I will support this claim by  comparing clausal logic with natural language. Moreover, I  will argue that people can use this model to help them  communicate with other people more clearly and more co- herently. I will return to the use of the ALP agent model, to  help people make better choices, in section 6.   

------------------- Sentence 1 -------------------

The argument for basing a better decision theory on the  ALP agent model depends on the claim that the clausal logic  of ALP is a plausible model of the language of thought  (LOT). 


>> Tokens are: 
[argument, basing, better, decision, theory,  , ALP, agent, model, depends, claim, clausal, logic,  , ALP, plausible, model, language, thought,  , (, LOT, ), .] 

>> PoS Tags are: 
[('argument', 'NOUN'), ('basing', 'VERB'), ('better', 'ADJ'), ('decision', 'NOUN'), ('theory', 'NOUN'), (' ', 'SPACE'), ('ALP', 'PROPN'), ('agent', 'NOUN'), ('model', 'NOUN'), ('depends', 'VERB'), ('claim', 'NOUN'), ('clausal', 'NOUN'), ('logic', 'NOUN'), (' ', 'SPACE'), ('ALP', 'PROPN'), ('plausible', 'ADJ'), ('model', 'NOUN'), ('language', 'NOUN'), ('thought', 'NOUN'), (' ', 'SPACE'), ('(', 'PUNCT'), ('LOT', 'PROPN'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('argument', 'nsubj'), ('basing', 'pcomp'), ('better', 'amod'), ('decision', 'compound'), ('theory', 'dobj'), (' ', 'amod'), ('ALP', 'compound'), ('agent', 'compound'), ('model', 'pobj'), ('depends', 'ROOT'), ('claim', 'pobj'), ('clausal', 'compound'), ('logic', 'nsubj'), (' ', 'appos'), ('ALP', 'pobj'), ('plausible', 'amod'), ('model', 'attr'), ('language', 'pobj'), ('thought', 'pobj'), (' ', 'pobj'), ('(', 'punct'), ('LOT', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[argument, basing], [basing, better], [better, decision], [decision, theory], [theory,  ], [ , ALP], [ALP, agent], [agent, model], [model, depends], [depends, claim], [claim, clausal], [clausal, logic], [logic,  ], [ , ALP], [ALP, plausible], [plausible, model], [model, language], [language, thought], [thought,  ], [ , (], [(, LOT], [LOT, )], [), .]]

>> Trigrams: 
[[argument, basing, better], [basing, better, decision], [better, decision, theory], [decision, theory,  ], [theory,  , ALP], [ , ALP, agent], [ALP, agent, model], [agent, model, depends], [model, depends, claim], [depends, claim, clausal], [claim, clausal, logic], [clausal, logic,  ], [logic,  , ALP], [ , ALP, plausible], [ALP, plausible, model], [plausible, model, language], [model, language, thought], [language, thought,  ], [thought,  , (], [ , (, LOT], [(, LOT, )], [LOT, ), .]]

>> Noun Phrases are: 
[The argument, a better decision theory, the  ALP agent model, the claim, the clausal logic, ALP, a plausible model, the language, thought, LOT]

>> Named Entities are: 
[('ALP', 'ORG'), ('ALP', 'ORG')] 

------------------- Sentence 2 -------------------

In the next few sections, I will support this claim by  comparing clausal logic with natural language. 


>> Tokens are: 
[sections, ,, support, claim,  , comparing, clausal, logic, natural, language, .] 

>> PoS Tags are: 
[('sections', 'NOUN'), (',', 'PUNCT'), ('support', 'VERB'), ('claim', 'NOUN'), (' ', 'SPACE'), ('comparing', 'VERB'), ('clausal', 'NOUN'), ('logic', 'NOUN'), ('natural', 'ADJ'), ('language', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('sections', 'pobj'), (',', 'punct'), ('support', 'ROOT'), ('claim', 'dobj'), (' ', 'pobj'), ('comparing', 'acl'), ('clausal', 'compound'), ('logic', 'dobj'), ('natural', 'amod'), ('language', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[sections, ,], [,, support], [support, claim], [claim,  ], [ , comparing], [comparing, clausal], [clausal, logic], [logic, natural], [natural, language], [language, .]]

>> Trigrams: 
[[sections, ,, support], [,, support, claim], [support, claim,  ], [claim,  , comparing], [ , comparing, clausal], [comparing, clausal, logic], [clausal, logic, natural], [logic, natural, language], [natural, language, .]]

>> Noun Phrases are: 
[the next few sections, I, this claim, clausal logic, natural language]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

Moreover, I  will argue that people can use this model to help them  communicate with other people more clearly and more co- herently. 


>> Tokens are: 
[,,  , argue, people, use, model, help,  , communicate, people, clearly, co-, herently, .] 

>> PoS Tags are: 
[(',', 'PUNCT'), (' ', 'SPACE'), ('argue', 'VERB'), ('people', 'NOUN'), ('use', 'VERB'), ('model', 'NOUN'), ('help', 'VERB'), (' ', 'SPACE'), ('communicate', 'VERB'), ('people', 'NOUN'), ('clearly', 'ADV'), ('co-', 'ADJ'), ('herently', 'ADV'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(',', 'punct'), (' ', 'appos'), ('argue', 'ROOT'), ('people', 'nsubj'), ('use', 'ccomp'), ('model', 'dobj'), ('help', 'xcomp'), (' ', 'nsubj'), ('communicate', 'ccomp'), ('people', 'pobj'), ('clearly', 'advmod'), ('co-', 'dep'), ('herently', 'advmod'), ('.', 'punct')]

>> Bigrams: 
[[,,  ], [ , argue], [argue, people], [people, use], [use, model], [model, help], [help,  ], [ , communicate], [communicate, people], [people, clearly], [clearly, co-], [co-, herently], [herently, .]]

>> Trigrams: 
[[,,  , argue], [ , argue, people], [argue, people, use], [people, use, model], [use, model, help], [model, help,  ], [help,  , communicate], [ , communicate, people], [communicate, people, clearly], [people, clearly, co-], [clearly, co-, herently], [co-, herently, .]]

>> Noun Phrases are: 
[I, people, this model, them, other people]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

I will return to the use of the ALP agent model, to  help people make better choices, in section 6. 


>> Tokens are: 
[return, use, ALP, agent, model, ,,  , help, people, better, choices, ,, section, 6, .] 

>> PoS Tags are: 
[('return', 'VERB'), ('use', 'NOUN'), ('ALP', 'PROPN'), ('agent', 'NOUN'), ('model', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('help', 'VERB'), ('people', 'NOUN'), ('better', 'ADJ'), ('choices', 'NOUN'), (',', 'PUNCT'), ('section', 'NOUN'), ('6', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('return', 'ROOT'), ('use', 'pobj'), ('ALP', 'compound'), ('agent', 'compound'), ('model', 'pobj'), (',', 'punct'), (' ', 'pobj'), ('help', 'advcl'), ('people', 'nsubj'), ('better', 'amod'), ('choices', 'dobj'), (',', 'punct'), ('section', 'pobj'), ('6', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[return, use], [use, ALP], [ALP, agent], [agent, model], [model, ,], [,,  ], [ , help], [help, people], [people, better], [better, choices], [choices, ,], [,, section], [section, 6], [6, .]]

>> Trigrams: 
[[return, use, ALP], [use, ALP, agent], [ALP, agent, model], [agent, model, ,], [model, ,,  ], [,,  , help], [ , help, people], [help, people, better], [people, better, choices], [better, choices, ,], [choices, ,, section], [,, section, 6], [section, 6, .]]

>> Noun Phrases are: 
[I, the use, the ALP agent model, people, better choices, section]

>> Named Entities are: 
[('ALP', 'ORG')] 

------------------- Sentence 5 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 79 =================================

3 Clausal Logic as an Agent’s LOT  

------------------- Sentence 1 -------------------

3 Clausal Logic as an Agent’s LOT   


>> Tokens are: 
[3, Clausal, Logic, Agent, LOT,  ] 

>> PoS Tags are: 
[('3', 'NUM'), ('Clausal', 'PROPN'), ('Logic', 'PROPN'), ('Agent', 'PROPN'), ('LOT', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('3', 'nummod'), ('Clausal', 'compound'), ('Logic', 'ROOT'), ('Agent', 'poss'), ('LOT', 'pobj'), (' ', 'appos')]

>> Bigrams: 
[[3, Clausal], [Clausal, Logic], [Logic, Agent], [Agent, LOT], [LOT,  ]]

>> Trigrams: 
[[3, Clausal, Logic], [Clausal, Logic, Agent], [Logic, Agent, LOT], [Agent, LOT,  ]]

>> Noun Phrases are: 
[3 Clausal Logic, an Agent’s LOT]

>> Named Entities are: 
[('3', 'CARDINAL'), ('LOT', 'ORG')] 


================================ Paragraph 80 =================================

In the philosophy of language, there are three main schools  of thought regarding the relationship between language and  thought:  

------------------- Sentence 1 -------------------

In the philosophy of language, there are three main schools  of thought regarding the relationship between language and  thought:   


>> Tokens are: 
[philosophy, language, ,, main, schools,  , thought, relationship, language,  , thought, :,  ] 

>> PoS Tags are: 
[('philosophy', 'NOUN'), ('language', 'NOUN'), (',', 'PUNCT'), ('main', 'ADJ'), ('schools', 'NOUN'), (' ', 'SPACE'), ('thought', 'NOUN'), ('relationship', 'NOUN'), ('language', 'NOUN'), (' ', 'SPACE'), ('thought', 'VERB'), (':', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('philosophy', 'pobj'), ('language', 'pobj'), (',', 'punct'), ('main', 'amod'), ('schools', 'attr'), (' ', 'appos'), ('thought', 'pobj'), ('relationship', 'pobj'), ('language', 'pobj'), (' ', 'conj'), ('thought', 'relcl'), (':', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[philosophy, language], [language, ,], [,, main], [main, schools], [schools,  ], [ , thought], [thought, relationship], [relationship, language], [language,  ], [ , thought], [thought, :], [:,  ]]

>> Trigrams: 
[[philosophy, language, ,], [language, ,, main], [,, main, schools], [main, schools,  ], [schools,  , thought], [ , thought, relationship], [thought, relationship, language], [relationship, language,  ], [language,  , thought], [ , thought, :], [thought, :,  ]]

>> Noun Phrases are: 
[the philosophy, language, three main schools, thought, the relationship, language]

>> Named Entities are: 
[('three', 'CARDINAL')] 


================================ Paragraph 81 =================================

  • The LOT is a private, language-like representation,  

------------------- Sentence 1 -------------------

  • 


>> Tokens are: 
[  , •] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('•', 'INTJ')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('•', 'punct')]

>> Bigrams: 
[[  , •]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

The LOT is a private, language-like representation, 


>> Tokens are: 
[LOT, private, ,, language, -, like, representation, ,] 

>> PoS Tags are: 
[('LOT', 'PROPN'), ('private', 'ADJ'), (',', 'PUNCT'), ('language', 'NOUN'), ('-', 'PUNCT'), ('like', 'ADJ'), ('representation', 'NOUN'), (',', 'PUNCT')] 

>> Dependency Tags are: 
[('LOT', 'nsubj'), ('private', 'amod'), (',', 'punct'), ('language', 'npadvmod'), ('-', 'punct'), ('like', 'amod'), ('representation', 'attr'), (',', 'punct')]

>> Bigrams: 
[[LOT, private], [private, ,], [,, language], [language, -], [-, like], [like, representation], [representation, ,]]

>> Trigrams: 
[[LOT, private, ,], [private, ,, language], [,, language, -], [language, -, like], [-, like, representation], [like, representation, ,]]

>> Noun Phrases are: 
[The LOT, a private, language-like representation]

>> Named Entities are: 
[('LOT', 'ORG')] 

------------------- Sentence 3 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 82 =================================

which is independent of public, natural languages.   • The LOT is a form of public language; and the natural  

------------------- Sentence 1 -------------------

which is independent of public, natural languages. 


>> Tokens are: 
[independent, public, ,, natural, languages, .] 

>> PoS Tags are: 
[('independent', 'ADJ'), ('public', 'ADJ'), (',', 'PUNCT'), ('natural', 'ADJ'), ('languages', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('independent', 'acomp'), ('public', 'amod'), (',', 'punct'), ('natural', 'amod'), ('languages', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[independent, public], [public, ,], [,, natural], [natural, languages], [languages, .]]

>> Trigrams: 
[[independent, public, ,], [public, ,, natural], [,, natural, languages], [natural, languages, .]]

>> Noun Phrases are: 
[public, natural languages]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

  • 


>> Tokens are: 
[  , •] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('•', 'INTJ')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('•', 'punct')]

>> Bigrams: 
[[  , •]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

The LOT is a form of public language; and the natural   


>> Tokens are: 
[LOT, form, public, language, ;, natural,  ] 

>> PoS Tags are: 
[('LOT', 'PROPN'), ('form', 'NOUN'), ('public', 'ADJ'), ('language', 'NOUN'), (';', 'PUNCT'), ('natural', 'ADJ'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('LOT', 'nsubj'), ('form', 'attr'), ('public', 'amod'), ('language', 'pobj'), (';', 'punct'), ('natural', 'amod'), (' ', 'conj')]

>> Bigrams: 
[[LOT, form], [form, public], [public, language], [language, ;], [;, natural], [natural,  ]]

>> Trigrams: 
[[LOT, form, public], [form, public, language], [public, language, ;], [language, ;, natural], [;, natural,  ]]

>> Noun Phrases are: 
[The LOT, a form, public language]

>> Named Entities are: 
[('LOT', 'ORG')] 


================================ Paragraph 83 =================================

language that we speak influences the way that we think.  • Human thinking does not have a language-like structure.    The ALP agent model belongs to the first school of thought,  opposes the second school, but is compatible with the third.  It opposes the second school, partly because the ALP logical  model of thinking does not require the existence of natural  languages and partly because, by AI standards, natural lan- guage is too ambiguous and incoherent to serve as a useful  model of human thinking. But it supports the third school,  because, as we will see in section 4, it has a connectionist  implementation, which conceals its linguistic nature.   

------------------- Sentence 1 -------------------

language that we speak influences the way that we think. 


>> Tokens are: 
[language, speak, influences, way, think, .] 

>> PoS Tags are: 
[('language', 'NOUN'), ('speak', 'VERB'), ('influences', 'VERB'), ('way', 'NOUN'), ('think', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('language', 'nsubj'), ('speak', 'relcl'), ('influences', 'ROOT'), ('way', 'dobj'), ('think', 'relcl'), ('.', 'punct')]

>> Bigrams: 
[[language, speak], [speak, influences], [influences, way], [way, think], [think, .]]

>> Trigrams: 
[[language, speak, influences], [speak, influences, way], [influences, way, think], [way, think, .]]

>> Noun Phrases are: 
[language, we, the way, we]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

• Human thinking does not have a language-like structure. 


>> Tokens are: 
[•, Human, thinking, language, -, like, structure, .] 

>> PoS Tags are: 
[('•', 'PRON'), ('Human', 'ADJ'), ('thinking', 'NOUN'), ('language', 'NOUN'), ('-', 'PUNCT'), ('like', 'ADJ'), ('structure', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('•', 'poss'), ('Human', 'amod'), ('thinking', 'nsubj'), ('language', 'npadvmod'), ('-', 'punct'), ('like', 'amod'), ('structure', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[•, Human], [Human, thinking], [thinking, language], [language, -], [-, like], [like, structure], [structure, .]]

>> Trigrams: 
[[•, Human, thinking], [Human, thinking, language], [thinking, language, -], [language, -, like], [-, like, structure], [like, structure, .]]

>> Noun Phrases are: 
[• Human thinking, a language-like structure]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

    


>> Tokens are: 
[   ] 

>> PoS Tags are: 
[('   ', 'SPACE')] 

>> Dependency Tags are: 
[('   ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 5 -------------------

The ALP agent model belongs to the first school of thought,  opposes the second school, but is compatible with the third.   


>> Tokens are: 
[ALP, agent, model, belongs, school, thought, ,,  , opposes, second, school, ,, compatible, .,  ] 

>> PoS Tags are: 
[('ALP', 'PROPN'), ('agent', 'NOUN'), ('model', 'NOUN'), ('belongs', 'VERB'), ('school', 'NOUN'), ('thought', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('opposes', 'VERB'), ('second', 'ADJ'), ('school', 'NOUN'), (',', 'PUNCT'), ('compatible', 'ADJ'), ('.', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('ALP', 'compound'), ('agent', 'compound'), ('model', 'nsubj'), ('belongs', 'ccomp'), ('school', 'pobj'), ('thought', 'pobj'), (',', 'punct'), (' ', 'nsubj'), ('opposes', 'ROOT'), ('second', 'amod'), ('school', 'dobj'), (',', 'punct'), ('compatible', 'acomp'), ('.', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[ALP, agent], [agent, model], [model, belongs], [belongs, school], [school, thought], [thought, ,], [,,  ], [ , opposes], [opposes, second], [second, school], [school, ,], [,, compatible], [compatible, .], [.,  ]]

>> Trigrams: 
[[ALP, agent, model], [agent, model, belongs], [model, belongs, school], [belongs, school, thought], [school, thought, ,], [thought, ,,  ], [,,  , opposes], [ , opposes, second], [opposes, second, school], [second, school, ,], [school, ,, compatible], [,, compatible, .], [compatible, .,  ]]

>> Noun Phrases are: 
[The ALP agent model, the first school, thought, the second school]

>> Named Entities are: 
[('ALP', 'ORG'), ('first', 'ORDINAL'), ('second', 'ORDINAL'), ('third', 'ORDINAL')] 

------------------- Sentence 6 -------------------

It opposes the second school, partly because the ALP logical  model of thinking does not require the existence of natural  languages and partly because, by AI standards, natural lan- guage is too ambiguous and incoherent to serve as a useful  model of human thinking. 


>> Tokens are: 
[opposes, second, school, ,, partly, ALP, logical,  , model, thinking, require, existence, natural,  , languages, partly, ,, AI, standards, ,, natural, lan-, guage, ambiguous, incoherent, serve, useful,  , model, human, thinking, .] 

>> PoS Tags are: 
[('opposes', 'VERB'), ('second', 'ADJ'), ('school', 'NOUN'), (',', 'PUNCT'), ('partly', 'ADV'), ('ALP', 'PROPN'), ('logical', 'ADJ'), (' ', 'SPACE'), ('model', 'NOUN'), ('thinking', 'NOUN'), ('require', 'VERB'), ('existence', 'NOUN'), ('natural', 'ADJ'), (' ', 'SPACE'), ('languages', 'NOUN'), ('partly', 'ADV'), (',', 'PUNCT'), ('AI', 'PROPN'), ('standards', 'NOUN'), (',', 'PUNCT'), ('natural', 'ADJ'), ('lan-', 'NOUN'), ('guage', 'NOUN'), ('ambiguous', 'ADJ'), ('incoherent', 'ADJ'), ('serve', 'VERB'), ('useful', 'ADJ'), (' ', 'SPACE'), ('model', 'NOUN'), ('human', 'ADJ'), ('thinking', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('opposes', 'ROOT'), ('second', 'amod'), ('school', 'dobj'), (',', 'punct'), ('partly', 'advmod'), ('ALP', 'nmod'), ('logical', 'amod'), (' ', 'compound'), ('model', 'nsubj'), ('thinking', 'pobj'), ('require', 'advcl'), ('existence', 'dobj'), ('natural', 'amod'), (' ', 'compound'), ('languages', 'pobj'), ('partly', 'advmod'), (',', 'punct'), ('AI', 'compound'), ('standards', 'pobj'), (',', 'punct'), ('natural', 'amod'), ('lan-', 'amod'), ('guage', 'nsubj'), ('ambiguous', 'acomp'), ('incoherent', 'conj'), ('serve', 'xcomp'), ('useful', 'amod'), (' ', 'compound'), ('model', 'pobj'), ('human', 'amod'), ('thinking', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[opposes, second], [second, school], [school, ,], [,, partly], [partly, ALP], [ALP, logical], [logical,  ], [ , model], [model, thinking], [thinking, require], [require, existence], [existence, natural], [natural,  ], [ , languages], [languages, partly], [partly, ,], [,, AI], [AI, standards], [standards, ,], [,, natural], [natural, lan-], [lan-, guage], [guage, ambiguous], [ambiguous, incoherent], [incoherent, serve], [serve, useful], [useful,  ], [ , model], [model, human], [human, thinking], [thinking, .]]

>> Trigrams: 
[[opposes, second, school], [second, school, ,], [school, ,, partly], [,, partly, ALP], [partly, ALP, logical], [ALP, logical,  ], [logical,  , model], [ , model, thinking], [model, thinking, require], [thinking, require, existence], [require, existence, natural], [existence, natural,  ], [natural,  , languages], [ , languages, partly], [languages, partly, ,], [partly, ,, AI], [,, AI, standards], [AI, standards, ,], [standards, ,, natural], [,, natural, lan-], [natural, lan-, guage], [lan-, guage, ambiguous], [guage, ambiguous, incoherent], [ambiguous, incoherent, serve], [incoherent, serve, useful], [serve, useful,  ], [useful,  , model], [ , model, human], [model, human, thinking], [human, thinking, .]]

>> Noun Phrases are: 
[It, the second school, the ALP logical  model, thinking, the existence, natural  languages, AI standards, natural lan- guage, a useful  model, human thinking]

>> Named Entities are: 
[('second', 'ORDINAL'), ('ALP', 'ORG'), ('AI', 'ORG')] 

------------------- Sentence 7 -------------------

But it supports the third school,  because, as we will see in section 4, it has a connectionist  implementation, which conceals its linguistic nature. 


>> Tokens are: 
[supports, school, ,,  , ,, section, 4, ,, connectionist,  , implementation, ,, conceals, linguistic, nature, .] 

>> PoS Tags are: 
[('supports', 'VERB'), ('school', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), (',', 'PUNCT'), ('section', 'NOUN'), ('4', 'NUM'), (',', 'PUNCT'), ('connectionist', 'ADJ'), (' ', 'SPACE'), ('implementation', 'NOUN'), (',', 'PUNCT'), ('conceals', 'VERB'), ('linguistic', 'ADJ'), ('nature', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('supports', 'ROOT'), ('school', 'dobj'), (',', 'punct'), (' ', 'dobj'), (',', 'punct'), ('section', 'pobj'), ('4', 'nummod'), (',', 'punct'), ('connectionist', 'amod'), (' ', 'punct'), ('implementation', 'dobj'), (',', 'punct'), ('conceals', 'relcl'), ('linguistic', 'amod'), ('nature', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[supports, school], [school, ,], [,,  ], [ , ,], [,, section], [section, 4], [4, ,], [,, connectionist], [connectionist,  ], [ , implementation], [implementation, ,], [,, conceals], [conceals, linguistic], [linguistic, nature], [nature, .]]

>> Trigrams: 
[[supports, school, ,], [school, ,,  ], [,,  , ,], [ , ,, section], [,, section, 4], [section, 4, ,], [4, ,, connectionist], [,, connectionist,  ], [connectionist,  , implementation], [ , implementation, ,], [implementation, ,, conceals], [,, conceals, linguistic], [conceals, linguistic, nature], [linguistic, nature, .]]

>> Noun Phrases are: 
[it, the third school, we, section, it, a connectionist  implementation, its linguistic nature]

>> Named Entities are: 
[('third', 'ORDINAL')] 

------------------- Sentence 8 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 84 =================================

In AI, the notion that some form of logic is an agent’s  LOT is strongly associated with GOFAI (good old fash- ioned AI), which has been partly overshadowed in recent  years by connectionist and Bayesian approaches. I will ar- gue that the ALP model of thinking potentially reconciles  the conflict between logic, connectionism and Bayesian  approaches. This is because the clausal logic of ALP is  much simpler than standard FOL, has a connectionist im- plementation that accommodates Bayesian probability, and  bears a similar relationship to standard FOL as the LOT  bears to natural language.   

------------------- Sentence 1 -------------------

In AI, the notion that some form of logic is an agent’s  LOT is strongly associated with GOFAI (good old fash- ioned AI), which has been partly overshadowed in recent  years by connectionist and Bayesian approaches. 


>> Tokens are: 
[AI, ,, notion, form, logic, agent,  , LOT, strongly, associated, GOFAI, (, good, old, fash-, ioned, AI, ), ,, partly, overshadowed, recent,  , years, connectionist, Bayesian, approaches, .] 

>> PoS Tags are: 
[('AI', 'PROPN'), (',', 'PUNCT'), ('notion', 'NOUN'), ('form', 'NOUN'), ('logic', 'NOUN'), ('agent', 'NOUN'), (' ', 'SPACE'), ('LOT', 'PROPN'), ('strongly', 'ADV'), ('associated', 'VERB'), ('GOFAI', 'PROPN'), ('(', 'PUNCT'), ('good', 'ADJ'), ('old', 'ADJ'), ('fash-', 'NOUN'), ('ioned', 'VERB'), ('AI', 'PROPN'), (')', 'PUNCT'), (',', 'PUNCT'), ('partly', 'ADV'), ('overshadowed', 'VERB'), ('recent', 'ADJ'), (' ', 'SPACE'), ('years', 'NOUN'), ('connectionist', 'NOUN'), ('Bayesian', 'PROPN'), ('approaches', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('AI', 'pobj'), (',', 'punct'), ('notion', 'nsubj'), ('form', 'nsubj'), ('logic', 'pobj'), ('agent', 'attr'), (' ', 'appos'), ('LOT', 'nsubjpass'), ('strongly', 'advmod'), ('associated', 'acl'), ('GOFAI', 'pobj'), ('(', 'punct'), ('good', 'amod'), ('old', 'amod'), ('fash-', 'npadvmod'), ('ioned', 'amod'), ('AI', 'appos'), (')', 'punct'), (',', 'punct'), ('partly', 'advmod'), ('overshadowed', 'relcl'), ('recent', 'amod'), (' ', 'compound'), ('years', 'pobj'), ('connectionist', 'pobj'), ('Bayesian', 'conj'), ('approaches', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[AI, ,], [,, notion], [notion, form], [form, logic], [logic, agent], [agent,  ], [ , LOT], [LOT, strongly], [strongly, associated], [associated, GOFAI], [GOFAI, (], [(, good], [good, old], [old, fash-], [fash-, ioned], [ioned, AI], [AI, )], [), ,], [,, partly], [partly, overshadowed], [overshadowed, recent], [recent,  ], [ , years], [years, connectionist], [connectionist, Bayesian], [Bayesian, approaches], [approaches, .]]

>> Trigrams: 
[[AI, ,, notion], [,, notion, form], [notion, form, logic], [form, logic, agent], [logic, agent,  ], [agent,  , LOT], [ , LOT, strongly], [LOT, strongly, associated], [strongly, associated, GOFAI], [associated, GOFAI, (], [GOFAI, (, good], [(, good, old], [good, old, fash-], [old, fash-, ioned], [fash-, ioned, AI], [ioned, AI, )], [AI, ), ,], [), ,, partly], [,, partly, overshadowed], [partly, overshadowed, recent], [overshadowed, recent,  ], [recent,  , years], [ , years, connectionist], [years, connectionist, Bayesian], [connectionist, Bayesian, approaches], [Bayesian, approaches, .]]

>> Noun Phrases are: 
[AI, the notion, some form, logic, an agent, LOT, GOFAI, good old fash- ioned AI, recent  years, connectionist, Bayesian]

>> Named Entities are: 
[('AI', 'ORG'), ('LOT', 'ORG'), ('GOFAI', 'PERSON'), ('AI', 'ORG'), ('recent  years', 'DATE'), ('Bayesian', 'NORP')] 

------------------- Sentence 2 -------------------

I will ar- gue that the ALP model of thinking potentially reconciles  the conflict between logic, connectionism and Bayesian  approaches. 


>> Tokens are: 
[ar-, gue, ALP, model, thinking, potentially, reconciles,  , conflict, logic, ,, connectionism, Bayesian,  , approaches, .] 

>> PoS Tags are: 
[('ar-', 'ADV'), ('gue', 'VERB'), ('ALP', 'PROPN'), ('model', 'NOUN'), ('thinking', 'NOUN'), ('potentially', 'ADV'), ('reconciles', 'VERB'), (' ', 'SPACE'), ('conflict', 'NOUN'), ('logic', 'NOUN'), (',', 'PUNCT'), ('connectionism', 'NOUN'), ('Bayesian', 'PROPN'), (' ', 'SPACE'), ('approaches', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('ar-', 'advmod'), ('gue', 'ROOT'), ('ALP', 'compound'), ('model', 'nsubj'), ('thinking', 'pobj'), ('potentially', 'advmod'), ('reconciles', 'ccomp'), (' ', 'dobj'), ('conflict', 'dobj'), ('logic', 'pobj'), (',', 'punct'), ('connectionism', 'conj'), ('Bayesian', 'compound'), (' ', 'conj'), ('approaches', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[ar-, gue], [gue, ALP], [ALP, model], [model, thinking], [thinking, potentially], [potentially, reconciles], [reconciles,  ], [ , conflict], [conflict, logic], [logic, ,], [,, connectionism], [connectionism, Bayesian], [Bayesian,  ], [ , approaches], [approaches, .]]

>> Trigrams: 
[[ar-, gue, ALP], [gue, ALP, model], [ALP, model, thinking], [model, thinking, potentially], [thinking, potentially, reconciles], [potentially, reconciles,  ], [reconciles,  , conflict], [ , conflict, logic], [conflict, logic, ,], [logic, ,, connectionism], [,, connectionism, Bayesian], [connectionism, Bayesian,  ], [Bayesian,  , approaches], [ , approaches, .]]

>> Noun Phrases are: 
[I, the ALP model, thinking, the conflict, logic, connectionism, approaches]

>> Named Entities are: 
[('ALP', 'ORG'), ('Bayesian', 'NORP')] 

------------------- Sentence 3 -------------------

This is because the clausal logic of ALP is  much simpler than standard FOL, has a connectionist im- plementation that accommodates Bayesian probability, and  bears a similar relationship to standard FOL as the LOT  bears to natural language. 


>> Tokens are: 
[clausal, logic, ALP,  , simpler, standard, FOL, ,, connectionist, im-, plementation, accommodates, Bayesian, probability, ,,  , bears, similar, relationship, standard, FOL, LOT,  , bears, natural, language, .] 

>> PoS Tags are: 
[('clausal', 'NOUN'), ('logic', 'NOUN'), ('ALP', 'PROPN'), (' ', 'SPACE'), ('simpler', 'ADJ'), ('standard', 'ADJ'), ('FOL', 'PROPN'), (',', 'PUNCT'), ('connectionist', 'NOUN'), ('im-', 'ADP'), ('plementation', 'NOUN'), ('accommodates', 'VERB'), ('Bayesian', 'ADJ'), ('probability', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('bears', 'VERB'), ('similar', 'ADJ'), ('relationship', 'NOUN'), ('standard', 'ADJ'), ('FOL', 'PROPN'), ('LOT', 'PROPN'), (' ', 'SPACE'), ('bears', 'NOUN'), ('natural', 'ADJ'), ('language', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('clausal', 'compound'), ('logic', 'nsubj'), ('ALP', 'pobj'), (' ', 'attr'), ('simpler', 'acomp'), ('standard', 'amod'), ('FOL', 'pobj'), (',', 'punct'), ('connectionist', 'amod'), ('im-', 'det'), ('plementation', 'dobj'), ('accommodates', 'relcl'), ('Bayesian', 'amod'), ('probability', 'dobj'), (',', 'punct'), (' ', 'nsubj'), ('bears', 'conj'), ('similar', 'amod'), ('relationship', 'dobj'), ('standard', 'amod'), ('FOL', 'pobj'), ('LOT', 'nsubj'), (' ', 'case'), ('bears', 'pobj'), ('natural', 'amod'), ('language', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[clausal, logic], [logic, ALP], [ALP,  ], [ , simpler], [simpler, standard], [standard, FOL], [FOL, ,], [,, connectionist], [connectionist, im-], [im-, plementation], [plementation, accommodates], [accommodates, Bayesian], [Bayesian, probability], [probability, ,], [,,  ], [ , bears], [bears, similar], [similar, relationship], [relationship, standard], [standard, FOL], [FOL, LOT], [LOT,  ], [ , bears], [bears, natural], [natural, language], [language, .]]

>> Trigrams: 
[[clausal, logic, ALP], [logic, ALP,  ], [ALP,  , simpler], [ , simpler, standard], [simpler, standard, FOL], [standard, FOL, ,], [FOL, ,, connectionist], [,, connectionist, im-], [connectionist, im-, plementation], [im-, plementation, accommodates], [plementation, accommodates, Bayesian], [accommodates, Bayesian, probability], [Bayesian, probability, ,], [probability, ,,  ], [,,  , bears], [ , bears, similar], [bears, similar, relationship], [similar, relationship, standard], [relationship, standard, FOL], [standard, FOL, LOT], [FOL, LOT,  ], [LOT,  , bears], [ , bears, natural], [bears, natural, language], [natural, language, .]]

>> Noun Phrases are: 
[the clausal logic, ALP, standard FOL, a connectionist im- plementation, Bayesian probability, a similar relationship, standard FOL, the LOT, natural language]

>> Named Entities are: 
[('ALP', 'ORG'), ('FOL', 'ORG'), ('Bayesian', 'NORP'), ('FOL', 'ORG'), ('LOT', 'ORG')] 

------------------- Sentence 4 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 85 =================================

The first step of the argument is based on relevance the- ory [Sperber and Wilson, 1986], which maintains that peo- ple understand natural language by attempting to extract the  most information for the least processing cost. It follows, as  a corollary of the theory, that, the closer a communication is  

------------------- Sentence 1 -------------------

The first step of the argument is based on relevance the- ory 


>> Tokens are: 
[step, argument, based, relevance, the-, ory] 

>> PoS Tags are: 
[('step', 'NOUN'), ('argument', 'NOUN'), ('based', 'VERB'), ('relevance', 'NOUN'), ('the-', 'X'), ('ory', 'NOUN')] 

>> Dependency Tags are: 
[('step', 'nsubjpass'), ('argument', 'pobj'), ('based', 'ROOT'), ('relevance', 'pobj'), ('the-', 'compound'), ('ory', 'punct')]

>> Bigrams: 
[[step, argument], [argument, based], [based, relevance], [relevance, the-], [the-, ory]]

>> Trigrams: 
[[step, argument, based], [argument, based, relevance], [based, relevance, the-], [relevance, the-, ory]]

>> Noun Phrases are: 
[The first step, the argument, relevance]

>> Named Entities are: 
[('first', 'ORDINAL')] 

------------------- Sentence 2 -------------------

[Sperber and Wilson, 1986], which maintains that peo- ple understand natural language by attempting to extract the  most information for the least processing cost. 


>> Tokens are: 
[[, Sperber, Wilson, ,, 1986, ], ,, maintains, peo-, ple, understand, natural, language, attempting, extract,  , information, processing, cost, .] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('Sperber', 'PROPN'), ('Wilson', 'PROPN'), (',', 'PUNCT'), ('1986', 'NUM'), (']', 'PUNCT'), (',', 'PUNCT'), ('maintains', 'VERB'), ('peo-', 'ADJ'), ('ple', 'NOUN'), ('understand', 'VERB'), ('natural', 'ADJ'), ('language', 'NOUN'), ('attempting', 'VERB'), ('extract', 'VERB'), (' ', 'SPACE'), ('information', 'NOUN'), ('processing', 'NOUN'), ('cost', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('[', 'punct'), ('Sperber', 'ROOT'), ('Wilson', 'conj'), (',', 'punct'), ('1986', 'appos'), (']', 'punct'), (',', 'punct'), ('maintains', 'relcl'), ('peo-', 'amod'), ('ple', 'nsubj'), ('understand', 'ccomp'), ('natural', 'amod'), ('language', 'dobj'), ('attempting', 'pcomp'), ('extract', 'xcomp'), (' ', 'dobj'), ('information', 'dobj'), ('processing', 'compound'), ('cost', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[[, Sperber], [Sperber, Wilson], [Wilson, ,], [,, 1986], [1986, ]], [], ,], [,, maintains], [maintains, peo-], [peo-, ple], [ple, understand], [understand, natural], [natural, language], [language, attempting], [attempting, extract], [extract,  ], [ , information], [information, processing], [processing, cost], [cost, .]]

>> Trigrams: 
[[[, Sperber, Wilson], [Sperber, Wilson, ,], [Wilson, ,, 1986], [,, 1986, ]], [1986, ], ,], [], ,, maintains], [,, maintains, peo-], [maintains, peo-, ple], [peo-, ple, understand], [ple, understand, natural], [understand, natural, language], [natural, language, attempting], [language, attempting, extract], [attempting, extract,  ], [extract,  , information], [ , information, processing], [information, processing, cost], [processing, cost, .]]

>> Noun Phrases are: 
[[Sperber, Wilson, peo- ple, natural language, most information, the least processing cost]

>> Named Entities are: 
[('Wilson', 'ORG'), ('1986', 'DATE')] 

------------------- Sentence 3 -------------------

It follows, as  a corollary of the theory, that, the closer a communication is   


>> Tokens are: 
[follows, ,,  , corollary, theory, ,, ,, closer, communication,  ] 

>> PoS Tags are: 
[('follows', 'VERB'), (',', 'PUNCT'), (' ', 'SPACE'), ('corollary', 'NOUN'), ('theory', 'NOUN'), (',', 'PUNCT'), (',', 'PUNCT'), ('closer', 'ADV'), ('communication', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('follows', 'ROOT'), (',', 'punct'), (' ', 'pobj'), ('corollary', 'dobj'), ('theory', 'pobj'), (',', 'punct'), (',', 'punct'), ('closer', 'amod'), ('communication', 'nsubj'), (' ', 'attr')]

>> Bigrams: 
[[follows, ,], [,,  ], [ , corollary], [corollary, theory], [theory, ,], [,, ,], [,, closer], [closer, communication], [communication,  ]]

>> Trigrams: 
[[follows, ,,  ], [,,  , corollary], [ , corollary, theory], [corollary, theory, ,], [theory, ,, ,], [,, ,, closer], [,, closer, communication], [closer, communication,  ]]

>> Noun Phrases are: 
[It, a corollary, the theory, the closer a communication]

>> Named Entities are: 
[] 


================================ Paragraph 86 =================================

to its intended meaning, the easier it is for a reader (or lis- tener) to extract that meaning of the communication.  

------------------- Sentence 1 -------------------

to its intended meaning, the easier it is for a reader (or lis- tener) to extract that meaning of the communication. 


>> Tokens are: 
[intended, meaning, ,, easier, reader, (, lis-, tener, ), extract, meaning, communication, .] 

>> PoS Tags are: 
[('intended', 'VERB'), ('meaning', 'NOUN'), (',', 'PUNCT'), ('easier', 'ADJ'), ('reader', 'NOUN'), ('(', 'PUNCT'), ('lis-', 'X'), ('tener', 'NOUN'), (')', 'PUNCT'), ('extract', 'VERB'), ('meaning', 'NOUN'), ('communication', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('intended', 'amod'), ('meaning', 'pobj'), (',', 'punct'), ('easier', 'amod'), ('reader', 'pobj'), ('(', 'punct'), ('lis-', 'compound'), ('tener', 'conj'), (')', 'punct'), ('extract', 'advcl'), ('meaning', 'dobj'), ('communication', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[intended, meaning], [meaning, ,], [,, easier], [easier, reader], [reader, (], [(, lis-], [lis-, tener], [tener, )], [), extract], [extract, meaning], [meaning, communication], [communication, .]]

>> Trigrams: 
[[intended, meaning, ,], [meaning, ,, easier], [,, easier, reader], [easier, reader, (], [reader, (, lis-], [(, lis-, tener], [lis-, tener, )], [tener, ), extract], [), extract, meaning], [extract, meaning, communication], [meaning, communication, .]]

>> Noun Phrases are: 
[its intended meaning, it, a reader, lis- tener, that meaning, the communication]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 87 =================================

Thus one way to determine whether there is a LOT, and  what it might look like, is to look at situations where it can  be a matter of life or death that readers understand a com- munication as intended and with as little effort as possible.  We will see that, in the case of the London underground  Emergency Notice, the communication is easy to understand  because its English sentences are structured explicitly or  implicitly as logical conditionals.  

------------------- Sentence 1 -------------------

Thus one way to determine whether there is a LOT, and  what it might look like, is to look at situations where it can  be a matter of life or death that readers understand a com- munication as intended and with as little effort as possible. 


>> Tokens are: 
[way, determine, LOT, ,,  , look, like, ,, look, situations,  , matter, life, death, readers, understand, com-, munication, intended, little, effort, possible, .] 

>> PoS Tags are: 
[('way', 'NOUN'), ('determine', 'VERB'), ('LOT', 'PROPN'), (',', 'PUNCT'), (' ', 'SPACE'), ('look', 'VERB'), ('like', 'ADP'), (',', 'PUNCT'), ('look', 'VERB'), ('situations', 'NOUN'), (' ', 'SPACE'), ('matter', 'NOUN'), ('life', 'NOUN'), ('death', 'NOUN'), ('readers', 'NOUN'), ('understand', 'VERB'), ('com-', 'NOUN'), ('munication', 'NOUN'), ('intended', 'VERB'), ('little', 'ADJ'), ('effort', 'NOUN'), ('possible', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('way', 'nsubj'), ('determine', 'relcl'), ('LOT', 'attr'), (',', 'punct'), (' ', 'conj'), ('look', 'relcl'), ('like', 'prep'), (',', 'punct'), ('look', 'xcomp'), ('situations', 'pobj'), (' ', 'nsubj'), ('matter', 'attr'), ('life', 'pobj'), ('death', 'conj'), ('readers', 'nsubj'), ('understand', 'relcl'), ('com-', 'compound'), ('munication', 'dobj'), ('intended', 'advcl'), ('little', 'amod'), ('effort', 'dobj'), ('possible', 'amod'), ('.', 'punct')]

>> Bigrams: 
[[way, determine], [determine, LOT], [LOT, ,], [,,  ], [ , look], [look, like], [like, ,], [,, look], [look, situations], [situations,  ], [ , matter], [matter, life], [life, death], [death, readers], [readers, understand], [understand, com-], [com-, munication], [munication, intended], [intended, little], [little, effort], [effort, possible], [possible, .]]

>> Trigrams: 
[[way, determine, LOT], [determine, LOT, ,], [LOT, ,,  ], [,,  , look], [ , look, like], [look, like, ,], [like, ,, look], [,, look, situations], [look, situations,  ], [situations,  , matter], [ , matter, life], [matter, life, death], [life, death, readers], [death, readers, understand], [readers, understand, com-], [understand, com-, munication], [com-, munication, intended], [munication, intended, little], [intended, little, effort], [little, effort, possible], [effort, possible, .]]

>> Noun Phrases are: 
[Thus one way, a LOT, what, it, situations, it, a matter, life, death, readers, a com- munication, as little effort]

>> Named Entities are: 
[('one', 'CARDINAL'), ('LOT', 'ORG')] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

We will see that, in the case of the London underground  Emergency Notice, the communication is easy to understand  because its English sentences are structured explicitly or  implicitly as logical conditionals.   


>> Tokens are: 
[,, case, London, underground,  , Emergency, Notice, ,, communication, easy, understand,  , English, sentences, structured, explicitly,  , implicitly, logical, conditionals, .,  ] 

>> PoS Tags are: 
[(',', 'PUNCT'), ('case', 'NOUN'), ('London', 'PROPN'), ('underground', 'NOUN'), (' ', 'SPACE'), ('Emergency', 'PROPN'), ('Notice', 'PROPN'), (',', 'PUNCT'), ('communication', 'NOUN'), ('easy', 'ADJ'), ('understand', 'VERB'), (' ', 'SPACE'), ('English', 'ADJ'), ('sentences', 'NOUN'), ('structured', 'VERB'), ('explicitly', 'ADV'), (' ', 'SPACE'), ('implicitly', 'ADV'), ('logical', 'ADJ'), ('conditionals', 'NOUN'), ('.', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[(',', 'punct'), ('case', 'pobj'), ('London', 'compound'), ('underground', 'pobj'), (' ', 'compound'), ('Emergency', 'compound'), ('Notice', 'pobj'), (',', 'punct'), ('communication', 'nsubj'), ('easy', 'acomp'), ('understand', 'xcomp'), (' ', 'dobj'), ('English', 'amod'), ('sentences', 'nsubjpass'), ('structured', 'advcl'), ('explicitly', 'advmod'), (' ', 'conj'), ('implicitly', 'advmod'), ('logical', 'amod'), ('conditionals', 'pobj'), ('.', 'punct'), (' ', 'dobj')]

>> Bigrams: 
[[,, case], [case, London], [London, underground], [underground,  ], [ , Emergency], [Emergency, Notice], [Notice, ,], [,, communication], [communication, easy], [easy, understand], [understand,  ], [ , English], [English, sentences], [sentences, structured], [structured, explicitly], [explicitly,  ], [ , implicitly], [implicitly, logical], [logical, conditionals], [conditionals, .], [.,  ]]

>> Trigrams: 
[[,, case, London], [case, London, underground], [London, underground,  ], [underground,  , Emergency], [ , Emergency, Notice], [Emergency, Notice, ,], [Notice, ,, communication], [,, communication, easy], [communication, easy, understand], [easy, understand,  ], [understand,  , English], [ , English, sentences], [English, sentences, structured], [sentences, structured, explicitly], [structured, explicitly,  ], [explicitly,  , implicitly], [ , implicitly, logical], [implicitly, logical, conditionals], [logical, conditionals, .], [conditionals, .,  ]]

>> Noun Phrases are: 
[We, the case, the London underground,  Emergency Notice, the communication, its English sentences, logical conditionals]

>> Named Entities are: 
[('London', 'GPE'), ('English', 'LANGUAGE')] 


================================ Paragraph 88 =================================

3.1    What to do in an Emergency  

------------------- Sentence 1 -------------------

3.1    What to do in an Emergency   


>> Tokens are: 
[3.1,    , Emergency,  ] 

>> PoS Tags are: 
[('3.1', 'NUM'), ('   ', 'SPACE'), ('Emergency', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('3.1', 'nummod'), ('   ', 'ROOT'), ('Emergency', 'pobj'), (' ', 'punct')]

>> Bigrams: 
[[3.1,    ], [   , Emergency], [Emergency,  ]]

>> Trigrams: 
[[3.1,    , Emergency], [   , Emergency,  ]]

>> Noun Phrases are: 
[What, an Emergency]

>> Named Entities are: 
[('3.1', 'CARDINAL')] 


================================ Paragraph 89 =================================

  Press the alarm signal button to alert the driver.    The driver will stop if any part of the train is in a station.     If not, the train will continue to the next station,    where help can more easily be given.    There is a 50 pound penalty for improper use.    

------------------- Sentence 1 -------------------

  Press the alarm signal button to alert the driver. 


>> Tokens are: 
[  , Press, alarm, signal, button, alert, driver, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('Press', 'VERB'), ('alarm', 'NOUN'), ('signal', 'NOUN'), ('button', 'NOUN'), ('alert', 'VERB'), ('driver', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'nsubj'), ('Press', 'ROOT'), ('alarm', 'compound'), ('signal', 'compound'), ('button', 'dobj'), ('alert', 'advcl'), ('driver', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[  , Press], [Press, alarm], [alarm, signal], [signal, button], [button, alert], [alert, driver], [driver, .]]

>> Trigrams: 
[[  , Press, alarm], [Press, alarm, signal], [alarm, signal, button], [signal, button, alert], [button, alert, driver], [alert, driver, .]]

>> Noun Phrases are: 
[the alarm signal button, the driver]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

    


>> Tokens are: 
[   ] 

>> PoS Tags are: 
[('   ', 'SPACE')] 

>> Dependency Tags are: 
[('   ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

The driver will stop if any part of the train is in a station. 


>> Tokens are: 
[driver, stop, train, station, .] 

>> PoS Tags are: 
[('driver', 'NOUN'), ('stop', 'VERB'), ('train', 'NOUN'), ('station', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('driver', 'nsubj'), ('stop', 'ROOT'), ('train', 'pobj'), ('station', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[driver, stop], [stop, train], [train, station], [station, .]]

>> Trigrams: 
[[driver, stop, train], [stop, train, station], [train, station, .]]

>> Noun Phrases are: 
[The driver, any part, the train, a station]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

    If not, the train will continue to the next station,    where help can more easily be given. 


>> Tokens are: 
[    , ,, train, continue, station, ,,    , help, easily, given, .] 

>> PoS Tags are: 
[('    ', 'SPACE'), (',', 'PUNCT'), ('train', 'NOUN'), ('continue', 'VERB'), ('station', 'NOUN'), (',', 'PUNCT'), ('   ', 'SPACE'), ('help', 'NOUN'), ('easily', 'ADV'), ('given', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('    ', 'nsubj'), (',', 'punct'), ('train', 'nsubj'), ('continue', 'ROOT'), ('station', 'pobj'), (',', 'punct'), ('   ', 'dep'), ('help', 'nsubjpass'), ('easily', 'advmod'), ('given', 'relcl'), ('.', 'punct')]

>> Bigrams: 
[[    , ,], [,, train], [train, continue], [continue, station], [station, ,], [,,    ], [   , help], [help, easily], [easily, given], [given, .]]

>> Trigrams: 
[[    , ,, train], [,, train, continue], [train, continue, station], [continue, station, ,], [station, ,,    ], [,,    , help], [   , help, easily], [help, easily, given], [easily, given, .]]

>> Noun Phrases are: 
[the train, the next station, help]

>> Named Entities are: 
[] 

------------------- Sentence 5 -------------------

   There is a 50 pound penalty for improper use. 


>> Tokens are: 
[   , 50, pound, penalty, improper, use, .] 

>> PoS Tags are: 
[('   ', 'SPACE'), ('50', 'NUM'), ('pound', 'NOUN'), ('penalty', 'NOUN'), ('improper', 'ADJ'), ('use', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('   ', 'dep'), ('50', 'nummod'), ('pound', 'compound'), ('penalty', 'attr'), ('improper', 'amod'), ('use', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[   , 50], [50, pound], [pound, penalty], [penalty, improper], [improper, use], [use, .]]

>> Trigrams: 
[[   , 50, pound], [50, pound, penalty], [pound, penalty, improper], [penalty, improper, use], [improper, use, .]]

>> Noun Phrases are: 
[a 50 pound penalty, improper use]

>> Named Entities are: 
[('50 pound', 'QUANTITY')] 

------------------- Sentence 6 -------------------

    


>> Tokens are: 
[   ] 

>> PoS Tags are: 
[('   ', 'SPACE')] 

>> Dependency Tags are: 
[('   ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 90 =================================

The first sentence is a goal-reduction procedure, whose  underlying logic is a logic programming clause:  

------------------- Sentence 1 -------------------

The first sentence is a goal-reduction procedure, whose  underlying logic is a logic programming clause:   


>> Tokens are: 
[sentence, goal, -, reduction, procedure, ,,  , underlying, logic, logic, programming, clause, :,  ] 

>> PoS Tags are: 
[('sentence', 'NOUN'), ('goal', 'NOUN'), ('-', 'PUNCT'), ('reduction', 'NOUN'), ('procedure', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('underlying', 'VERB'), ('logic', 'NOUN'), ('logic', 'NOUN'), ('programming', 'NOUN'), ('clause', 'NOUN'), (':', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('sentence', 'nsubj'), ('goal', 'compound'), ('-', 'punct'), ('reduction', 'compound'), ('procedure', 'attr'), (',', 'punct'), (' ', 'nmod'), ('underlying', 'amod'), ('logic', 'nsubj'), ('logic', 'compound'), ('programming', 'compound'), ('clause', 'attr'), (':', 'punct'), (' ', 'attr')]

>> Bigrams: 
[[sentence, goal], [goal, -], [-, reduction], [reduction, procedure], [procedure, ,], [,,  ], [ , underlying], [underlying, logic], [logic, logic], [logic, programming], [programming, clause], [clause, :], [:,  ]]

>> Trigrams: 
[[sentence, goal, -], [goal, -, reduction], [-, reduction, procedure], [reduction, procedure, ,], [procedure, ,,  ], [,,  , underlying], [ , underlying, logic], [underlying, logic, logic], [logic, logic, programming], [logic, programming, clause], [programming, clause, :], [clause, :,  ]]

>> Noun Phrases are: 
[The first sentence, a goal-reduction procedure, whose  underlying logic, a logic programming clause]

>> Named Entities are: 
[('first', 'ORDINAL')] 


================================ Paragraph 91 =================================

  the driver is alerted   if you press the alarm signal button.  

------------------- Sentence 1 -------------------

  the driver is alerted   if you press the alarm signal button. 


>> Tokens are: 
[  , driver, alerted,   , press, alarm, signal, button, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('driver', 'NOUN'), ('alerted', 'VERB'), ('  ', 'SPACE'), ('press', 'VERB'), ('alarm', 'NOUN'), ('signal', 'NOUN'), ('button', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'ROOT'), ('driver', 'nsubjpass'), ('alerted', 'relcl'), ('  ', 'npadvmod'), ('press', 'advcl'), ('alarm', 'compound'), ('signal', 'compound'), ('button', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[  , driver], [driver, alerted], [alerted,   ], [  , press], [press, alarm], [alarm, signal], [signal, button], [button, .]]

>> Trigrams: 
[[  , driver, alerted], [driver, alerted,   ], [alerted,   , press], [  , press, alarm], [press, alarm, signal], [alarm, signal, button], [signal, button, .]]

>> Noun Phrases are: 
[the driver, you, the alarm signal button]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 92 =================================

  The second sentence is explicitly in logic programming  clausal form, but is ambiguous; and one of its conditions has  been omitted. Arguably, its intended meaning is:      the driver will stop the train in a station     if the driver is alerted   

------------------- Sentence 1 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

The second sentence is explicitly in logic programming  clausal form, but is ambiguous; and one of its conditions has  been omitted. 


>> Tokens are: 
[second, sentence, explicitly, logic, programming,  , clausal, form, ,, ambiguous, ;, conditions,  , omitted, .] 

>> PoS Tags are: 
[('second', 'ADJ'), ('sentence', 'NOUN'), ('explicitly', 'ADV'), ('logic', 'NOUN'), ('programming', 'NOUN'), (' ', 'SPACE'), ('clausal', 'NOUN'), ('form', 'NOUN'), (',', 'PUNCT'), ('ambiguous', 'ADJ'), (';', 'PUNCT'), ('conditions', 'NOUN'), (' ', 'SPACE'), ('omitted', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('second', 'amod'), ('sentence', 'nsubj'), ('explicitly', 'advmod'), ('logic', 'nsubj'), ('programming', 'compound'), (' ', 'compound'), ('clausal', 'compound'), ('form', 'pobj'), (',', 'punct'), ('ambiguous', 'acomp'), (';', 'punct'), ('conditions', 'pobj'), (' ', 'nsubjpass'), ('omitted', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[second, sentence], [sentence, explicitly], [explicitly, logic], [logic, programming], [programming,  ], [ , clausal], [clausal, form], [form, ,], [,, ambiguous], [ambiguous, ;], [;, conditions], [conditions,  ], [ , omitted], [omitted, .]]

>> Trigrams: 
[[second, sentence, explicitly], [sentence, explicitly, logic], [explicitly, logic, programming], [logic, programming,  ], [programming,  , clausal], [ , clausal, form], [clausal, form, ,], [form, ,, ambiguous], [,, ambiguous, ;], [ambiguous, ;, conditions], [;, conditions,  ], [conditions,  , omitted], [ , omitted, .]]

>> Noun Phrases are: 
[The second sentence, logic, its conditions]

>> Named Entities are: 
[('second', 'ORDINAL'), ('one', 'CARDINAL')] 

------------------- Sentence 3 -------------------

Arguably, its intended meaning is:      the driver will stop the train in a station     if the driver is alerted    


>> Tokens are: 
[Arguably, ,, intended, meaning, :,      , driver, stop, train, station,     , driver, alerted,   ] 

>> PoS Tags are: 
[('Arguably', 'ADV'), (',', 'PUNCT'), ('intended', 'VERB'), ('meaning', 'NOUN'), (':', 'PUNCT'), ('     ', 'SPACE'), ('driver', 'NOUN'), ('stop', 'VERB'), ('train', 'NOUN'), ('station', 'NOUN'), ('    ', 'SPACE'), ('driver', 'NOUN'), ('alerted', 'VERB'), ('  ', 'SPACE')] 

>> Dependency Tags are: 
[('Arguably', 'advmod'), (',', 'punct'), ('intended', 'amod'), ('meaning', 'nsubj'), (':', 'punct'), ('     ', 'attr'), ('driver', 'nsubj'), ('stop', 'relcl'), ('train', 'dobj'), ('station', 'pobj'), ('    ', 'dobj'), ('driver', 'nsubjpass'), ('alerted', 'advcl'), ('  ', 'punct')]

>> Bigrams: 
[[Arguably, ,], [,, intended], [intended, meaning], [meaning, :], [:,      ], [     , driver], [driver, stop], [stop, train], [train, station], [station,     ], [    , driver], [driver, alerted], [alerted,   ]]

>> Trigrams: 
[[Arguably, ,, intended], [,, intended, meaning], [intended, meaning, :], [meaning, :,      ], [:,      , driver], [     , driver, stop], [driver, stop, train], [stop, train, station], [train, station,     ], [station,     , driver], [    , driver, alerted], [driver, alerted,   ]]

>> Noun Phrases are: 
[its intended meaning, the driver, the train, a station, the driver]

>> Named Entities are: 
[] 


================================ Paragraph 93 =================================

and any part of the train is in the station.     The logic of the third sentence is two sentences, say:    

------------------- Sentence 1 -------------------

and any part of the train is in the station. 


>> Tokens are: 
[train, station, .] 

>> PoS Tags are: 
[('train', 'NOUN'), ('station', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('train', 'pobj'), ('station', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[train, station], [station, .]]

>> Trigrams: 
[[train, station, .]]

>> Noun Phrases are: 
[any part, the train, the station]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

    The logic of the third sentence is two sentences, say:     


>> Tokens are: 
[    , logic, sentence, sentences, ,, :,    ] 

>> PoS Tags are: 
[('    ', 'SPACE'), ('logic', 'NOUN'), ('sentence', 'NOUN'), ('sentences', 'NOUN'), (',', 'PUNCT'), (':', 'PUNCT'), ('   ', 'SPACE')] 

>> Dependency Tags are: 
[('    ', 'dep'), ('logic', 'nsubj'), ('sentence', 'pobj'), ('sentences', 'attr'), (',', 'punct'), (':', 'punct'), ('   ', 'attr')]

>> Bigrams: 
[[    , logic], [logic, sentence], [sentence, sentences], [sentences, ,], [,, :], [:,    ]]

>> Trigrams: 
[[    , logic, sentence], [logic, sentence, sentences], [sentence, sentences, ,], [sentences, ,, :], [,, :,    ]]

>> Noun Phrases are: 
[The logic, the third sentence, two sentences]

>> Named Entities are: 
[('third', 'ORDINAL'), ('two', 'CARDINAL')] 


================================ Paragraph 94 =================================

the driver will stop the train in the next station    if the driver is alerted   

------------------- Sentence 1 -------------------

the driver will stop the train in the next station    if the driver is alerted    


>> Tokens are: 
[driver, stop, train, station,    , driver, alerted,   ] 

>> PoS Tags are: 
[('driver', 'NOUN'), ('stop', 'VERB'), ('train', 'NOUN'), ('station', 'NOUN'), ('   ', 'SPACE'), ('driver', 'NOUN'), ('alerted', 'VERB'), ('  ', 'SPACE')] 

>> Dependency Tags are: 
[('driver', 'nsubj'), ('stop', 'ROOT'), ('train', 'dobj'), ('station', 'pobj'), ('   ', 'npadvmod'), ('driver', 'nsubjpass'), ('alerted', 'advcl'), ('  ', 'npadvmod')]

>> Bigrams: 
[[driver, stop], [stop, train], [train, station], [station,    ], [   , driver], [driver, alerted], [alerted,   ]]

>> Trigrams: 
[[driver, stop, train], [stop, train, station], [train, station,    ], [station,    , driver], [   , driver, alerted], [driver, alerted,   ]]

>> Noun Phrases are: 
[the driver, the train, the next station, the driver]

>> Named Entities are: 
[] 


================================ Paragraph 95 =================================

and not any part of the train is in a station.       help can more easily be given in an emergency    if the train is in a station.    Presumably, the relative clause beginning with where adds  an extra conclusion to the sentence rather than an extra con- dition. If the relative clause were meant to add an extra con- dition, then this would mean that the driver will not neces- sarily stop the train at the next station, but at the next station  where help can more easily be given.  

------------------- Sentence 1 -------------------

and not any part of the train is in a station. 


>> Tokens are: 
[train, station, .] 

>> PoS Tags are: 
[('train', 'NOUN'), ('station', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('train', 'pobj'), ('station', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[train, station], [station, .]]

>> Trigrams: 
[[train, station, .]]

>> Noun Phrases are: 
[not any part, the train, a station]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

      help can more easily be given in an emergency    if the train is in a station. 


>> Tokens are: 
[      , help, easily, given, emergency,    , train, station, .] 

>> PoS Tags are: 
[('      ', 'SPACE'), ('help', 'NOUN'), ('easily', 'ADV'), ('given', 'VERB'), ('emergency', 'NOUN'), ('   ', 'SPACE'), ('train', 'NOUN'), ('station', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('      ', 'compound'), ('help', 'nsubjpass'), ('easily', 'advmod'), ('given', 'ROOT'), ('emergency', 'pobj'), ('   ', 'npadvmod'), ('train', 'nsubj'), ('station', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[      , help], [help, easily], [easily, given], [given, emergency], [emergency,    ], [   , train], [train, station], [station, .]]

>> Trigrams: 
[[      , help, easily], [help, easily, given], [easily, given, emergency], [given, emergency,    ], [emergency,    , train], [   , train, station], [train, station, .]]

>> Noun Phrases are: 
[      help, an emergency, the train, a station]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

   Presumably, the relative clause beginning with where adds  an extra conclusion to the sentence rather than an extra con- dition. 


>> Tokens are: 
[   , Presumably, ,, relative, clause, beginning, adds,  , extra, conclusion, sentence, extra, con-, dition, .] 

>> PoS Tags are: 
[('   ', 'SPACE'), ('Presumably', 'ADV'), (',', 'PUNCT'), ('relative', 'ADJ'), ('clause', 'NOUN'), ('beginning', 'VERB'), ('adds', 'VERB'), (' ', 'SPACE'), ('extra', 'ADJ'), ('conclusion', 'NOUN'), ('sentence', 'NOUN'), ('extra', 'ADJ'), ('con-', 'ADJ'), ('dition', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('   ', 'nummod'), ('Presumably', 'advmod'), (',', 'punct'), ('relative', 'amod'), ('clause', 'ROOT'), ('beginning', 'acl'), ('adds', 'pcomp'), (' ', 'dobj'), ('extra', 'amod'), ('conclusion', 'dobj'), ('sentence', 'pobj'), ('extra', 'amod'), ('con-', 'amod'), ('dition', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[   , Presumably], [Presumably, ,], [,, relative], [relative, clause], [clause, beginning], [beginning, adds], [adds,  ], [ , extra], [extra, conclusion], [conclusion, sentence], [sentence, extra], [extra, con-], [con-, dition], [dition, .]]

>> Trigrams: 
[[   , Presumably, ,], [Presumably, ,, relative], [,, relative, clause], [relative, clause, beginning], [clause, beginning, adds], [beginning, adds,  ], [adds,  , extra], [ , extra, conclusion], [extra, conclusion, sentence], [conclusion, sentence, extra], [sentence, extra, con-], [extra, con-, dition], [con-, dition, .]]

>> Noun Phrases are: 
[   Presumably, the relative clause, an extra conclusion, the sentence, an extra con- dition]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

If the relative clause were meant to add an extra con- dition, then this would mean that the driver will not neces- sarily stop the train at the next station, but at the next station  where help can more easily be given. 


>> Tokens are: 
[relative, clause, meant, add, extra, con-, dition, ,, mean, driver, neces-, sarily, stop, train, station, ,, station,  , help, easily, given, .] 

>> PoS Tags are: 
[('relative', 'ADJ'), ('clause', 'NOUN'), ('meant', 'VERB'), ('add', 'VERB'), ('extra', 'ADJ'), ('con-', 'ADJ'), ('dition', 'NOUN'), (',', 'PUNCT'), ('mean', 'VERB'), ('driver', 'NOUN'), ('neces-', 'VERB'), ('sarily', 'ADV'), ('stop', 'VERB'), ('train', 'NOUN'), ('station', 'NOUN'), (',', 'PUNCT'), ('station', 'NOUN'), (' ', 'SPACE'), ('help', 'NOUN'), ('easily', 'ADV'), ('given', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('relative', 'amod'), ('clause', 'nsubjpass'), ('meant', 'advcl'), ('add', 'xcomp'), ('extra', 'amod'), ('con-', 'amod'), ('dition', 'dobj'), (',', 'punct'), ('mean', 'ROOT'), ('driver', 'nsubj'), ('neces-', 'ccomp'), ('sarily', 'advmod'), ('stop', 'xcomp'), ('train', 'dobj'), ('station', 'pobj'), (',', 'punct'), ('station', 'pobj'), (' ', 'appos'), ('help', 'nsubjpass'), ('easily', 'advmod'), ('given', 'relcl'), ('.', 'punct')]

>> Bigrams: 
[[relative, clause], [clause, meant], [meant, add], [add, extra], [extra, con-], [con-, dition], [dition, ,], [,, mean], [mean, driver], [driver, neces-], [neces-, sarily], [sarily, stop], [stop, train], [train, station], [station, ,], [,, station], [station,  ], [ , help], [help, easily], [easily, given], [given, .]]

>> Trigrams: 
[[relative, clause, meant], [clause, meant, add], [meant, add, extra], [add, extra, con-], [extra, con-, dition], [con-, dition, ,], [dition, ,, mean], [,, mean, driver], [mean, driver, neces-], [driver, neces-, sarily], [neces-, sarily, stop], [sarily, stop, train], [stop, train, station], [train, station, ,], [station, ,, station], [,, station,  ], [station,  , help], [ , help, easily], [help, easily, given], [easily, given, .]]

>> Noun Phrases are: 
[the relative clause, an extra con- dition, the driver, the train, the next station, the next station, help]

>> Named Entities are: 
[] 

------------------- Sentence 5 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 96 =================================

The fourth sentence is also a conditional, but in disguise:      You may be liable to a £50 penalty    if you use the alarm signal button improperly.    Arguably, the Emergency Notice is relatively easy to under- stand, because its expression is relatively close to its in- tended meaning in the LOT. Moreover, it is coherent, be- cause the consecutive sentences are logically connected both  with one another and with the reader’s likely pre-existing  goals and beliefs about what to do in an emergency.  

------------------- Sentence 1 -------------------

The fourth sentence is also a conditional, but in disguise:      You may be liable to a £50 penalty    if you use the alarm signal button improperly. 


>> Tokens are: 
[fourth, sentence, conditional, ,, disguise, :,      , liable, £, 50, penalty,    , use, alarm, signal, button, improperly, .] 

>> PoS Tags are: 
[('fourth', 'ADJ'), ('sentence', 'NOUN'), ('conditional', 'ADJ'), (',', 'PUNCT'), ('disguise', 'ADJ'), (':', 'PUNCT'), ('     ', 'SPACE'), ('liable', 'ADJ'), ('£', 'SYM'), ('50', 'NUM'), ('penalty', 'NOUN'), ('   ', 'SPACE'), ('use', 'VERB'), ('alarm', 'NOUN'), ('signal', 'NOUN'), ('button', 'NOUN'), ('improperly', 'ADV'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('fourth', 'amod'), ('sentence', 'nsubj'), ('conditional', 'attr'), (',', 'punct'), ('disguise', 'pobj'), (':', 'punct'), ('     ', 'nmod'), ('liable', 'acomp'), ('£', 'quantmod'), ('50', 'nummod'), ('penalty', 'pobj'), ('   ', 'npadvmod'), ('use', 'advcl'), ('alarm', 'compound'), ('signal', 'compound'), ('button', 'dobj'), ('improperly', 'advmod'), ('.', 'punct')]

>> Bigrams: 
[[fourth, sentence], [sentence, conditional], [conditional, ,], [,, disguise], [disguise, :], [:,      ], [     , liable], [liable, £], [£, 50], [50, penalty], [penalty,    ], [   , use], [use, alarm], [alarm, signal], [signal, button], [button, improperly], [improperly, .]]

>> Trigrams: 
[[fourth, sentence, conditional], [sentence, conditional, ,], [conditional, ,, disguise], [,, disguise, :], [disguise, :,      ], [:,      , liable], [     , liable, £], [liable, £, 50], [£, 50, penalty], [50, penalty,    ], [penalty,    , use], [   , use, alarm], [use, alarm, signal], [alarm, signal, button], [signal, button, improperly], [button, improperly, .]]

>> Noun Phrases are: 
[The fourth sentence, You, a £50 penalty, you, the alarm signal button]

>> Named Entities are: 
[('fourth', 'ORDINAL'), ('50', 'MONEY')] 

------------------- Sentence 2 -------------------

    


>> Tokens are: 
[   ] 

>> PoS Tags are: 
[('   ', 'SPACE')] 

>> Dependency Tags are: 
[('   ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

Arguably, the Emergency Notice is relatively easy to under- stand, because its expression is relatively close to its in- tended meaning in the LOT. 


>> Tokens are: 
[Arguably, ,, Emergency, Notice, relatively, easy, under-, stand, ,, expression, relatively, close, in-, tended, meaning, LOT, .] 

>> PoS Tags are: 
[('Arguably', 'ADV'), (',', 'PUNCT'), ('Emergency', 'PROPN'), ('Notice', 'PROPN'), ('relatively', 'ADV'), ('easy', 'ADJ'), ('under-', 'VERB'), ('stand', 'VERB'), (',', 'PUNCT'), ('expression', 'NOUN'), ('relatively', 'ADV'), ('close', 'ADJ'), ('in-', 'NOUN'), ('tended', 'VERB'), ('meaning', 'NOUN'), ('LOT', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Arguably', 'advmod'), (',', 'punct'), ('Emergency', 'compound'), ('Notice', 'nsubj'), ('relatively', 'advmod'), ('easy', 'acomp'), ('under-', 'xcomp'), ('stand', 'xcomp'), (',', 'punct'), ('expression', 'nsubj'), ('relatively', 'advmod'), ('close', 'acomp'), ('in-', 'nmod'), ('tended', 'amod'), ('meaning', 'pobj'), ('LOT', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Arguably, ,], [,, Emergency], [Emergency, Notice], [Notice, relatively], [relatively, easy], [easy, under-], [under-, stand], [stand, ,], [,, expression], [expression, relatively], [relatively, close], [close, in-], [in-, tended], [tended, meaning], [meaning, LOT], [LOT, .]]

>> Trigrams: 
[[Arguably, ,, Emergency], [,, Emergency, Notice], [Emergency, Notice, relatively], [Notice, relatively, easy], [relatively, easy, under-], [easy, under-, stand], [under-, stand, ,], [stand, ,, expression], [,, expression, relatively], [expression, relatively, close], [relatively, close, in-], [close, in-, tended], [in-, tended, meaning], [tended, meaning, LOT], [meaning, LOT, .]]

>> Noun Phrases are: 
[the Emergency Notice, its expression, its in- tended meaning, the LOT]

>> Named Entities are: 
[('LOT', 'ORG')] 

------------------- Sentence 4 -------------------

Moreover, it is coherent, be- cause the consecutive sentences are logically connected both  with one another and with the reader’s likely pre-existing  goals and beliefs about what to do in an emergency. 


>> Tokens are: 
[,, coherent, ,, be-, cause, consecutive, sentences, logically, connected,  , reader, likely, pre, -, existing,  , goals, beliefs, emergency, .] 

>> PoS Tags are: 
[(',', 'PUNCT'), ('coherent', 'ADJ'), (',', 'PUNCT'), ('be-', 'ADJ'), ('cause', 'VERB'), ('consecutive', 'ADJ'), ('sentences', 'NOUN'), ('logically', 'ADV'), ('connected', 'VERB'), (' ', 'SPACE'), ('reader', 'NOUN'), ('likely', 'ADJ'), ('pre', 'ADJ'), ('-', 'ADJ'), ('existing', 'VERB'), (' ', 'SPACE'), ('goals', 'NOUN'), ('beliefs', 'NOUN'), ('emergency', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(',', 'punct'), ('coherent', 'acomp'), (',', 'punct'), ('be-', 'nsubj'), ('cause', 'conj'), ('consecutive', 'amod'), ('sentences', 'nsubjpass'), ('logically', 'advmod'), ('connected', 'ccomp'), (' ', 'dobj'), ('reader', 'poss'), ('likely', 'amod'), ('pre', 'amod'), ('-', 'amod'), ('existing', 'amod'), (' ', 'compound'), ('goals', 'pobj'), ('beliefs', 'conj'), ('emergency', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[,, coherent], [coherent, ,], [,, be-], [be-, cause], [cause, consecutive], [consecutive, sentences], [sentences, logically], [logically, connected], [connected,  ], [ , reader], [reader, likely], [likely, pre], [pre, -], [-, existing], [existing,  ], [ , goals], [goals, beliefs], [beliefs, emergency], [emergency, .]]

>> Trigrams: 
[[,, coherent, ,], [coherent, ,, be-], [,, be-, cause], [be-, cause, consecutive], [cause, consecutive, sentences], [consecutive, sentences, logically], [sentences, logically, connected], [logically, connected,  ], [connected,  , reader], [ , reader, likely], [reader, likely, pre], [likely, pre, -], [pre, -, existing], [-, existing,  ], [existing,  , goals], [ , goals, beliefs], [goals, beliefs, emergency], [beliefs, emergency, .]]

>> Noun Phrases are: 
[it, the consecutive sentences, the reader’s likely pre-existing  goals, beliefs, what, an emergency]

>> Named Entities are: 
[] 

------------------- Sentence 5 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 97 =================================

13

------------------- Sentence 1 -------------------

13 


>> Tokens are: 
[13] 

>> PoS Tags are: 
[('13', 'NUM')] 

>> Dependency Tags are: 
[('13', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('13', 'CARDINAL')] 


================================ Paragraph 98 =================================

One reason the English sentences are not closer to their  intended meaning is because omitting conditions and other  details sometimes promotes coherence. Williams [1990,  1995] emphasizes another way of achieving coherence: by  placing old, familiar ideas at the beginning of sentences and  new ideas at their end. In a succession of sentences, a new  idea at the end of one sentence becomes an old idea that can  be put at the beginning of the next sentence.    The first three sentences of the Emergency Notice il- lustrate Williams’ advice. Here is another example, which  incidentally illustrates the kind of reasoning that is catered  for in the ALP agent model:       It is raining.     If it is raining and you go out without an umbrella,      then you will get wet.     If you get wet, then you may catch a cold.     If you catch a cold, then you will be sorry.     You don’t want to be sorry.     So you do not want to go out without an umbrella.    I will argue in section 4 that the kind of coherence il- lustrated in these sentences can be understood in terms of  logical connections between the conclusions and conditions  of sentences.  

------------------- Sentence 1 -------------------

One reason the English sentences are not closer to their  intended meaning is because omitting conditions and other  details sometimes promotes coherence. 


>> Tokens are: 
[reason, English, sentences, closer,  , intended, meaning, omitting, conditions,  , details, promotes, coherence, .] 

>> PoS Tags are: 
[('reason', 'NOUN'), ('English', 'ADJ'), ('sentences', 'NOUN'), ('closer', 'ADJ'), (' ', 'SPACE'), ('intended', 'VERB'), ('meaning', 'NOUN'), ('omitting', 'VERB'), ('conditions', 'NOUN'), (' ', 'SPACE'), ('details', 'NOUN'), ('promotes', 'VERB'), ('coherence', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('reason', 'nsubj'), ('English', 'amod'), ('sentences', 'nsubj'), ('closer', 'acomp'), (' ', 'nmod'), ('intended', 'amod'), ('meaning', 'pobj'), ('omitting', 'compound'), ('conditions', 'nsubj'), (' ', 'compound'), ('details', 'conj'), ('promotes', 'advcl'), ('coherence', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[reason, English], [English, sentences], [sentences, closer], [closer,  ], [ , intended], [intended, meaning], [meaning, omitting], [omitting, conditions], [conditions,  ], [ , details], [details, promotes], [promotes, coherence], [coherence, .]]

>> Trigrams: 
[[reason, English, sentences], [English, sentences, closer], [sentences, closer,  ], [closer,  , intended], [ , intended, meaning], [intended, meaning, omitting], [meaning, omitting, conditions], [omitting, conditions,  ], [conditions,  , details], [ , details, promotes], [details, promotes, coherence], [promotes, coherence, .]]

>> Noun Phrases are: 
[One reason, the English sentences, their  intended meaning, omitting conditions, other  details, coherence]

>> Named Entities are: 
[('One', 'CARDINAL'), ('English', 'NORP')] 

------------------- Sentence 2 -------------------

Williams [1990,  1995] emphasizes another way of achieving coherence: by  placing old, familiar ideas at the beginning of sentences and  new ideas at their end. 


>> Tokens are: 
[Williams, [, 1990, ,,  , 1995, ], emphasizes, way, achieving, coherence, :,  , placing, old, ,, familiar, ideas, beginning, sentences,  , new, ideas, end, .] 

>> PoS Tags are: 
[('Williams', 'PROPN'), ('[', 'PUNCT'), ('1990', 'NUM'), (',', 'PUNCT'), (' ', 'SPACE'), ('1995', 'NUM'), (']', 'PUNCT'), ('emphasizes', 'VERB'), ('way', 'NOUN'), ('achieving', 'VERB'), ('coherence', 'NOUN'), (':', 'PUNCT'), (' ', 'SPACE'), ('placing', 'VERB'), ('old', 'ADJ'), (',', 'PUNCT'), ('familiar', 'ADJ'), ('ideas', 'NOUN'), ('beginning', 'NOUN'), ('sentences', 'NOUN'), (' ', 'SPACE'), ('new', 'ADJ'), ('ideas', 'NOUN'), ('end', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Williams', 'nsubj'), ('[', 'punct'), ('1990', 'appos'), (',', 'punct'), (' ', 'appos'), ('1995', 'npadvmod'), (']', 'punct'), ('emphasizes', 'ROOT'), ('way', 'dobj'), ('achieving', 'pcomp'), ('coherence', 'dobj'), (':', 'punct'), (' ', 'pobj'), ('placing', 'acl'), ('old', 'amod'), (',', 'punct'), ('familiar', 'amod'), ('ideas', 'dobj'), ('beginning', 'pobj'), ('sentences', 'pobj'), (' ', 'conj'), ('new', 'amod'), ('ideas', 'dobj'), ('end', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Williams, [], [[, 1990], [1990, ,], [,,  ], [ , 1995], [1995, ]], [], emphasizes], [emphasizes, way], [way, achieving], [achieving, coherence], [coherence, :], [:,  ], [ , placing], [placing, old], [old, ,], [,, familiar], [familiar, ideas], [ideas, beginning], [beginning, sentences], [sentences,  ], [ , new], [new, ideas], [ideas, end], [end, .]]

>> Trigrams: 
[[Williams, [, 1990], [[, 1990, ,], [1990, ,,  ], [,,  , 1995], [ , 1995, ]], [1995, ], emphasizes], [], emphasizes, way], [emphasizes, way, achieving], [way, achieving, coherence], [achieving, coherence, :], [coherence, :,  ], [:,  , placing], [ , placing, old], [placing, old, ,], [old, ,, familiar], [,, familiar, ideas], [familiar, ideas, beginning], [ideas, beginning, sentences], [beginning, sentences,  ], [sentences,  , new], [ , new, ideas], [new, ideas, end], [ideas, end, .]]

>> Noun Phrases are: 
[Williams, another way, coherence, old, familiar ideas, the beginning, sentences, new ideas, their end]

>> Named Entities are: 
[('Williams', 'PERSON'), ('1990', 'DATE'), ('1995', 'DATE')] 

------------------- Sentence 3 -------------------

In a succession of sentences, a new  idea at the end of one sentence becomes an old idea that can  be put at the beginning of the next sentence. 


>> Tokens are: 
[succession, sentences, ,, new,  , idea, end, sentence, old, idea,  , beginning, sentence, .] 

>> PoS Tags are: 
[('succession', 'NOUN'), ('sentences', 'NOUN'), (',', 'PUNCT'), ('new', 'ADJ'), (' ', 'SPACE'), ('idea', 'NOUN'), ('end', 'NOUN'), ('sentence', 'NOUN'), ('old', 'ADJ'), ('idea', 'NOUN'), (' ', 'SPACE'), ('beginning', 'NOUN'), ('sentence', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('succession', 'pobj'), ('sentences', 'pobj'), (',', 'punct'), ('new', 'amod'), (' ', 'amod'), ('idea', 'nsubj'), ('end', 'pobj'), ('sentence', 'pobj'), ('old', 'amod'), ('idea', 'attr'), (' ', 'nsubjpass'), ('beginning', 'pobj'), ('sentence', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[succession, sentences], [sentences, ,], [,, new], [new,  ], [ , idea], [idea, end], [end, sentence], [sentence, old], [old, idea], [idea,  ], [ , beginning], [beginning, sentence], [sentence, .]]

>> Trigrams: 
[[succession, sentences, ,], [sentences, ,, new], [,, new,  ], [new,  , idea], [ , idea, end], [idea, end, sentence], [end, sentence, old], [sentence, old, idea], [old, idea,  ], [idea,  , beginning], [ , beginning, sentence], [beginning, sentence, .]]

>> Noun Phrases are: 
[a succession, sentences, a new  idea, the end, one sentence, an old idea, the beginning, the next sentence]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

    


>> Tokens are: 
[   ] 

>> PoS Tags are: 
[('   ', 'SPACE')] 

>> Dependency Tags are: 
[('   ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 5 -------------------

The first three sentences of the Emergency Notice il- lustrate Williams’ advice. 


>> Tokens are: 
[sentences, Emergency, Notice, il-, lustrate, Williams, ’, advice, .] 

>> PoS Tags are: 
[('sentences', 'NOUN'), ('Emergency', 'PROPN'), ('Notice', 'PROPN'), ('il-', 'NOUN'), ('lustrate', 'NOUN'), ('Williams', 'PROPN'), ('’', 'PART'), ('advice', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('sentences', 'ROOT'), ('Emergency', 'compound'), ('Notice', 'pobj'), ('il-', 'compound'), ('lustrate', 'compound'), ('Williams', 'poss'), ('’', 'case'), ('advice', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[sentences, Emergency], [Emergency, Notice], [Notice, il-], [il-, lustrate], [lustrate, Williams], [Williams, ’], [’, advice], [advice, .]]

>> Trigrams: 
[[sentences, Emergency, Notice], [Emergency, Notice, il-], [Notice, il-, lustrate], [il-, lustrate, Williams], [lustrate, Williams, ’], [Williams, ’, advice], [’, advice, .]]

>> Noun Phrases are: 
[The first three sentences, the Emergency Notice, il- lustrate Williams’ advice]

>> Named Entities are: 
[('first', 'ORDINAL'), ('three', 'CARDINAL')] 

------------------- Sentence 6 -------------------

Here is another example, which  incidentally illustrates the kind of reasoning that is catered  for in the ALP agent model:       It is raining. 


>> Tokens are: 
[example, ,,  , incidentally, illustrates, kind, reasoning, catered,  , ALP, agent, model, :,       , raining, .] 

>> PoS Tags are: 
[('example', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('incidentally', 'ADV'), ('illustrates', 'VERB'), ('kind', 'NOUN'), ('reasoning', 'NOUN'), ('catered', 'VERB'), (' ', 'SPACE'), ('ALP', 'PROPN'), ('agent', 'NOUN'), ('model', 'NOUN'), (':', 'PUNCT'), ('      ', 'SPACE'), ('raining', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('example', 'nsubj'), (',', 'punct'), (' ', 'nsubj'), ('incidentally', 'advmod'), ('illustrates', 'relcl'), ('kind', 'dobj'), ('reasoning', 'pobj'), ('catered', 'relcl'), (' ', 'dobj'), ('ALP', 'compound'), ('agent', 'compound'), ('model', 'pobj'), (':', 'punct'), ('      ', 'appos'), ('raining', 'relcl'), ('.', 'punct')]

>> Bigrams: 
[[example, ,], [,,  ], [ , incidentally], [incidentally, illustrates], [illustrates, kind], [kind, reasoning], [reasoning, catered], [catered,  ], [ , ALP], [ALP, agent], [agent, model], [model, :], [:,       ], [      , raining], [raining, .]]

>> Trigrams: 
[[example, ,,  ], [,,  , incidentally], [ , incidentally, illustrates], [incidentally, illustrates, kind], [illustrates, kind, reasoning], [kind, reasoning, catered], [reasoning, catered,  ], [catered,  , ALP], [ , ALP, agent], [ALP, agent, model], [agent, model, :], [model, :,       ], [:,       , raining], [      , raining, .]]

>> Noun Phrases are: 
[another example, the kind, reasoning, the ALP agent model, It]

>> Named Entities are: 
[('ALP', 'ORG')] 

------------------- Sentence 7 -------------------

    If it is raining and you go out without an umbrella,      then you will get wet. 


>> Tokens are: 
[    , raining, umbrella, ,,      , wet, .] 

>> PoS Tags are: 
[('    ', 'SPACE'), ('raining', 'VERB'), ('umbrella', 'NOUN'), (',', 'PUNCT'), ('     ', 'SPACE'), ('wet', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('    ', 'nsubj'), ('raining', 'xcomp'), ('umbrella', 'pobj'), (',', 'punct'), ('     ', 'nsubj'), ('wet', 'acomp'), ('.', 'punct')]

>> Bigrams: 
[[    , raining], [raining, umbrella], [umbrella, ,], [,,      ], [     , wet], [wet, .]]

>> Trigrams: 
[[    , raining, umbrella], [raining, umbrella, ,], [umbrella, ,,      ], [,,      , wet], [     , wet, .]]

>> Noun Phrases are: 
[it, you, an umbrella, you]

>> Named Entities are: 
[] 

------------------- Sentence 8 -------------------

    If you get wet, then you may catch a cold. 


>> Tokens are: 
[    , wet, ,, catch, cold, .] 

>> PoS Tags are: 
[('    ', 'SPACE'), ('wet', 'ADJ'), (',', 'PUNCT'), ('catch', 'VERB'), ('cold', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('    ', 'nsubj'), ('wet', 'acomp'), (',', 'punct'), ('catch', 'ROOT'), ('cold', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[    , wet], [wet, ,], [,, catch], [catch, cold], [cold, .]]

>> Trigrams: 
[[    , wet, ,], [wet, ,, catch], [,, catch, cold], [catch, cold, .]]

>> Noun Phrases are: 
[you, you, a cold]

>> Named Entities are: 
[] 

------------------- Sentence 9 -------------------

    If you catch a cold, then you will be sorry. 


>> Tokens are: 
[    , catch, cold, ,, sorry, .] 

>> PoS Tags are: 
[('    ', 'SPACE'), ('catch', 'VERB'), ('cold', 'NOUN'), (',', 'PUNCT'), ('sorry', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('    ', 'nsubj'), ('catch', 'advcl'), ('cold', 'dobj'), (',', 'punct'), ('sorry', 'acomp'), ('.', 'punct')]

>> Bigrams: 
[[    , catch], [catch, cold], [cold, ,], [,, sorry], [sorry, .]]

>> Trigrams: 
[[    , catch, cold], [catch, cold, ,], [cold, ,, sorry], [,, sorry, .]]

>> Noun Phrases are: 
[you, a cold, you]

>> Named Entities are: 
[] 

------------------- Sentence 10 -------------------

    You don’t want to be sorry. 


>> Tokens are: 
[    , want, sorry, .] 

>> PoS Tags are: 
[('    ', 'SPACE'), ('want', 'VERB'), ('sorry', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('    ', 'dep'), ('want', 'ROOT'), ('sorry', 'acomp'), ('.', 'punct')]

>> Bigrams: 
[[    , want], [want, sorry], [sorry, .]]

>> Trigrams: 
[[    , want, sorry], [want, sorry, .]]

>> Noun Phrases are: 
[You]

>> Named Entities are: 
[] 

------------------- Sentence 11 -------------------

     


>> Tokens are: 
[    ] 

>> PoS Tags are: 
[('    ', 'SPACE')] 

>> Dependency Tags are: 
[('    ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 12 -------------------

So you do not want to go out without an umbrella. 


>> Tokens are: 
[want, umbrella, .] 

>> PoS Tags are: 
[('want', 'VERB'), ('umbrella', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('want', 'ROOT'), ('umbrella', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[want, umbrella], [umbrella, .]]

>> Trigrams: 
[[want, umbrella, .]]

>> Noun Phrases are: 
[you, an umbrella]

>> Named Entities are: 
[] 

------------------- Sentence 13 -------------------

   I will argue in section 4 that the kind of coherence il- lustrated in these sentences can be understood in terms of  logical connections between the conclusions and conditions  of sentences. 


>> Tokens are: 
[   , argue, section, 4, kind, coherence, il-, lustrated, sentences, understood, terms,  , logical, connections, conclusions, conditions,  , sentences, .] 

>> PoS Tags are: 
[('   ', 'SPACE'), ('argue', 'VERB'), ('section', 'NOUN'), ('4', 'NUM'), ('kind', 'NOUN'), ('coherence', 'NOUN'), ('il-', 'X'), ('lustrated', 'VERB'), ('sentences', 'NOUN'), ('understood', 'VERB'), ('terms', 'NOUN'), (' ', 'SPACE'), ('logical', 'ADJ'), ('connections', 'NOUN'), ('conclusions', 'NOUN'), ('conditions', 'NOUN'), (' ', 'SPACE'), ('sentences', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('   ', 'meta'), ('argue', 'ROOT'), ('section', 'pobj'), ('4', 'nummod'), ('kind', 'nsubjpass'), ('coherence', 'pobj'), ('il-', 'appos'), ('lustrated', 'acl'), ('sentences', 'pobj'), ('understood', 'ccomp'), ('terms', 'pobj'), (' ', 'nmod'), ('logical', 'amod'), ('connections', 'pobj'), ('conclusions', 'pobj'), ('conditions', 'conj'), (' ', 'dobj'), ('sentences', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[   , argue], [argue, section], [section, 4], [4, kind], [kind, coherence], [coherence, il-], [il-, lustrated], [lustrated, sentences], [sentences, understood], [understood, terms], [terms,  ], [ , logical], [logical, connections], [connections, conclusions], [conclusions, conditions], [conditions,  ], [ , sentences], [sentences, .]]

>> Trigrams: 
[[   , argue, section], [argue, section, 4], [section, 4, kind], [4, kind, coherence], [kind, coherence, il-], [coherence, il-, lustrated], [il-, lustrated, sentences], [lustrated, sentences, understood], [sentences, understood, terms], [understood, terms,  ], [terms,  , logical], [ , logical, connections], [logical, connections, conclusions], [connections, conclusions, conditions], [conclusions, conditions,  ], [conditions,  , sentences], [ , sentences, .]]

>> Noun Phrases are: 
[I, section, the kind, coherence, these sentences, terms,  logical connections, the conclusions, conditions, sentences]

>> Named Entities are: 
[('section 4', 'LAW')] 

------------------- Sentence 14 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 99 =================================

3.2 Natural Language and the LOT  

------------------- Sentence 1 -------------------

3.2 Natural Language and the LOT   


>> Tokens are: 
[3.2, Natural, Language, LOT,  ] 

>> PoS Tags are: 
[('3.2', 'NUM'), ('Natural', 'PROPN'), ('Language', 'PROPN'), ('LOT', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('3.2', 'nummod'), ('Natural', 'compound'), ('Language', 'ROOT'), ('LOT', 'conj'), (' ', 'nummod')]

>> Bigrams: 
[[3.2, Natural], [Natural, Language], [Language, LOT], [LOT,  ]]

>> Trigrams: 
[[3.2, Natural, Language], [Natural, Language, LOT], [Language, LOT,  ]]

>> Noun Phrases are: 
[3.2 Natural Language, the LOT]

>> Named Entities are: 
[('3.2', 'CARDINAL'), ('LOT', 'ORG')] 


================================ Paragraph 100 =================================

In contrast with the problem of understanding communica- tions that are designed to be as clear and coherent as possi- ble, the problem of understanding ordinary, every-day natu- ral language communications is much harder. This harder  problem has two parts. The first part is to identify the in- tended meaning of the communication. For example, to un- derstand the ambiguous English sentence “he gave her the  book” it is necessary to identify the individuals, say John  and Mary, referred to by “he” and “her”.  

------------------- Sentence 1 -------------------

In contrast with the problem of understanding communica- tions that are designed to be as clear and coherent as possi- ble, the problem of understanding ordinary, every-day natu- ral language communications is much harder. 


>> Tokens are: 
[contrast, problem, understanding, communica-, tions, designed, clear, coherent, possi-, ble, ,, problem, understanding, ordinary, ,, -, day, natu-, ral, language, communications, harder, .] 

>> PoS Tags are: 
[('contrast', 'NOUN'), ('problem', 'NOUN'), ('understanding', 'VERB'), ('communica-', 'NOUN'), ('tions', 'NOUN'), ('designed', 'VERB'), ('clear', 'ADJ'), ('coherent', 'ADJ'), ('possi-', 'NOUN'), ('ble', 'ADJ'), (',', 'PUNCT'), ('problem', 'NOUN'), ('understanding', 'VERB'), ('ordinary', 'ADJ'), (',', 'PUNCT'), ('-', 'PUNCT'), ('day', 'NOUN'), ('natu-', 'ADJ'), ('ral', 'ADJ'), ('language', 'NOUN'), ('communications', 'NOUN'), ('harder', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('contrast', 'pobj'), ('problem', 'pobj'), ('understanding', 'pcomp'), ('communica-', 'compound'), ('tions', 'dobj'), ('designed', 'relcl'), ('clear', 'acomp'), ('coherent', 'conj'), ('possi-', 'pobj'), ('ble', 'acomp'), (',', 'punct'), ('problem', 'nsubj'), ('understanding', 'pcomp'), ('ordinary', 'acomp'), (',', 'punct'), ('-', 'punct'), ('day', 'nmod'), ('natu-', 'amod'), ('ral', 'compound'), ('language', 'compound'), ('communications', 'nsubj'), ('harder', 'acomp'), ('.', 'punct')]

>> Bigrams: 
[[contrast, problem], [problem, understanding], [understanding, communica-], [communica-, tions], [tions, designed], [designed, clear], [clear, coherent], [coherent, possi-], [possi-, ble], [ble, ,], [,, problem], [problem, understanding], [understanding, ordinary], [ordinary, ,], [,, -], [-, day], [day, natu-], [natu-, ral], [ral, language], [language, communications], [communications, harder], [harder, .]]

>> Trigrams: 
[[contrast, problem, understanding], [problem, understanding, communica-], [understanding, communica-, tions], [communica-, tions, designed], [tions, designed, clear], [designed, clear, coherent], [clear, coherent, possi-], [coherent, possi-, ble], [possi-, ble, ,], [ble, ,, problem], [,, problem, understanding], [problem, understanding, ordinary], [understanding, ordinary, ,], [ordinary, ,, -], [,, -, day], [-, day, natu-], [day, natu-, ral], [natu-, ral, language], [ral, language, communications], [language, communications, harder], [communications, harder, .]]

>> Noun Phrases are: 
[contrast, the problem, communica- tions, possi-, the problem, every-day natu- ral language communications]

>> Named Entities are: 
[('every-day', 'DATE')] 

------------------- Sentence 2 -------------------

This harder  problem has two parts. 


>> Tokens are: 
[harder,  , problem, parts, .] 

>> PoS Tags are: 
[('harder', 'ADJ'), (' ', 'SPACE'), ('problem', 'NOUN'), ('parts', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('harder', 'amod'), (' ', 'compound'), ('problem', 'nsubj'), ('parts', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[harder,  ], [ , problem], [problem, parts], [parts, .]]

>> Trigrams: 
[[harder,  , problem], [ , problem, parts], [problem, parts, .]]

>> Noun Phrases are: 
[This harder  problem, two parts]

>> Named Entities are: 
[('two', 'CARDINAL')] 

------------------- Sentence 3 -------------------

The first part is to identify the in- tended meaning of the communication. 


>> Tokens are: 
[identify, in-, tended, meaning, communication, .] 

>> PoS Tags are: 
[('identify', 'VERB'), ('in-', 'NOUN'), ('tended', 'VERB'), ('meaning', 'NOUN'), ('communication', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('identify', 'xcomp'), ('in-', 'nsubj'), ('tended', 'dobj'), ('meaning', 'dobj'), ('communication', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[identify, in-], [in-, tended], [tended, meaning], [meaning, communication], [communication, .]]

>> Trigrams: 
[[identify, in-, tended], [in-, tended, meaning], [tended, meaning, communication], [meaning, communication, .]]

>> Noun Phrases are: 
[The first part, the in-, meaning, the communication]

>> Named Entities are: 
[('first', 'ORDINAL')] 

------------------- Sentence 4 -------------------

For example, to un- derstand the ambiguous English sentence “he gave her the  book” it is necessary to identify the individuals, say John  and Mary, referred to by “he” and “her”. 


>> Tokens are: 
[example, ,, un-, derstand, ambiguous, English, sentence, “, gave,  , book, ”, necessary, identify, individuals, ,, John,  , Mary, ,, referred, “, ”, “, ”, .] 

>> PoS Tags are: 
[('example', 'NOUN'), (',', 'PUNCT'), ('un-', 'VERB'), ('derstand', 'VERB'), ('ambiguous', 'ADJ'), ('English', 'ADJ'), ('sentence', 'NOUN'), ('“', 'PUNCT'), ('gave', 'VERB'), (' ', 'SPACE'), ('book', 'NOUN'), ('”', 'PUNCT'), ('necessary', 'ADJ'), ('identify', 'VERB'), ('individuals', 'NOUN'), (',', 'PUNCT'), ('John', 'PROPN'), (' ', 'SPACE'), ('Mary', 'PROPN'), (',', 'PUNCT'), ('referred', 'VERB'), ('“', 'PUNCT'), ('”', 'PUNCT'), ('“', 'PUNCT'), ('”', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('example', 'pobj'), (',', 'punct'), ('un-', 'intj'), ('derstand', 'advcl'), ('ambiguous', 'amod'), ('English', 'amod'), ('sentence', 'dobj'), ('“', 'punct'), ('gave', 'ccomp'), (' ', 'compound'), ('book', 'dobj'), ('”', 'punct'), ('necessary', 'acomp'), ('identify', 'xcomp'), ('individuals', 'dobj'), (',', 'punct'), ('John', 'compound'), (' ', 'nsubj'), ('Mary', 'conj'), (',', 'punct'), ('referred', 'ccomp'), ('“', 'punct'), ('”', 'punct'), ('“', 'punct'), ('”', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[example, ,], [,, un-], [un-, derstand], [derstand, ambiguous], [ambiguous, English], [English, sentence], [sentence, “], [“, gave], [gave,  ], [ , book], [book, ”], [”, necessary], [necessary, identify], [identify, individuals], [individuals, ,], [,, John], [John,  ], [ , Mary], [Mary, ,], [,, referred], [referred, “], [“, ”], [”, “], [“, ”], [”, .]]

>> Trigrams: 
[[example, ,, un-], [,, un-, derstand], [un-, derstand, ambiguous], [derstand, ambiguous, English], [ambiguous, English, sentence], [English, sentence, “], [sentence, “, gave], [“, gave,  ], [gave,  , book], [ , book, ”], [book, ”, necessary], [”, necessary, identify], [necessary, identify, individuals], [identify, individuals, ,], [individuals, ,, John], [,, John,  ], [John,  , Mary], [ , Mary, ,], [Mary, ,, referred], [,, referred, “], [referred, “, ”], [“, ”, “], [”, “, ”], [“, ”, .]]

>> Noun Phrases are: 
[example, the ambiguous English sentence, he, her, the  book, it, the individuals, Mary, he, “her]

>> Named Entities are: 
[('English', 'LANGUAGE'), ('Mary', 'PERSON')] 

------------------- Sentence 5 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 101 =================================

The second part is to represent the intended meaning in a  canonical form, so that equivalent communications are rep- resented in the same way. For example, the following Eng- lish sentences all have the same meaning:  

------------------- Sentence 1 -------------------

The second part is to represent the intended meaning in a  canonical form, so that equivalent communications are rep- resented in the same way. 


>> Tokens are: 
[second, represent, intended, meaning,  , canonical, form, ,, equivalent, communications, rep-, resented, way, .] 

>> PoS Tags are: 
[('second', 'ADJ'), ('represent', 'VERB'), ('intended', 'VERB'), ('meaning', 'NOUN'), (' ', 'SPACE'), ('canonical', 'ADJ'), ('form', 'NOUN'), (',', 'PUNCT'), ('equivalent', 'ADJ'), ('communications', 'NOUN'), ('rep-', 'ADV'), ('resented', 'VERB'), ('way', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('second', 'amod'), ('represent', 'xcomp'), ('intended', 'amod'), ('meaning', 'dobj'), (' ', 'nmod'), ('canonical', 'amod'), ('form', 'pobj'), (',', 'punct'), ('equivalent', 'amod'), ('communications', 'nsubjpass'), ('rep-', 'advmod'), ('resented', 'advcl'), ('way', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[second, represent], [represent, intended], [intended, meaning], [meaning,  ], [ , canonical], [canonical, form], [form, ,], [,, equivalent], [equivalent, communications], [communications, rep-], [rep-, resented], [resented, way], [way, .]]

>> Trigrams: 
[[second, represent, intended], [represent, intended, meaning], [intended, meaning,  ], [meaning,  , canonical], [ , canonical, form], [canonical, form, ,], [form, ,, equivalent], [,, equivalent, communications], [equivalent, communications, rep-], [communications, rep-, resented], [rep-, resented, way], [resented, way, .]]

>> Noun Phrases are: 
[The second part, the intended meaning, a  canonical form, equivalent communications, the same way]

>> Named Entities are: 
[('second', 'ORDINAL')] 

------------------- Sentence 2 -------------------

For example, the following Eng- lish sentences all have the same meaning: 


>> Tokens are: 
[example, ,, following, Eng-, lish, sentences, meaning, :] 

>> PoS Tags are: 
[('example', 'NOUN'), (',', 'PUNCT'), ('following', 'VERB'), ('Eng-', 'PROPN'), ('lish', 'NOUN'), ('sentences', 'NOUN'), ('meaning', 'NOUN'), (':', 'PUNCT')] 

>> Dependency Tags are: 
[('example', 'pobj'), (',', 'punct'), ('following', 'amod'), ('Eng-', 'nmod'), ('lish', 'compound'), ('sentences', 'nsubj'), ('meaning', 'dobj'), (':', 'punct')]

>> Bigrams: 
[[example, ,], [,, following], [following, Eng-], [Eng-, lish], [lish, sentences], [sentences, meaning], [meaning, :]]

>> Trigrams: 
[[example, ,, following], [,, following, Eng-], [following, Eng-, lish], [Eng-, lish, sentences], [lish, sentences, meaning], [sentences, meaning, :]]

>> Noun Phrases are: 
[example, the following Eng- lish sentences, the same meaning]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 102 =================================

  John gave Mary the book.  John gave the book to Mary.   

------------------- Sentence 1 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

John gave Mary the book.   


>> Tokens are: 
[John, gave, Mary, book, .,  ] 

>> PoS Tags are: 
[('John', 'PROPN'), ('gave', 'VERB'), ('Mary', 'PROPN'), ('book', 'NOUN'), ('.', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('John', 'nsubj'), ('gave', 'ROOT'), ('Mary', 'dative'), ('book', 'appos'), ('.', 'punct'), (' ', 'dobj')]

>> Bigrams: 
[[John, gave], [gave, Mary], [Mary, book], [book, .], [.,  ]]

>> Trigrams: 
[[John, gave, Mary], [gave, Mary, book], [Mary, book, .], [book, .,  ]]

>> Noun Phrases are: 
[John, Mary, the book]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

John gave the book to Mary. 


>> Tokens are: 
[John, gave, book, Mary, .] 

>> PoS Tags are: 
[('John', 'PROPN'), ('gave', 'VERB'), ('book', 'NOUN'), ('Mary', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('John', 'nsubj'), ('gave', 'ROOT'), ('book', 'dobj'), ('Mary', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[John, gave], [gave, book], [book, Mary], [Mary, .]]

>> Trigrams: 
[[John, gave, book], [gave, book, Mary], [book, Mary, .]]

>> Noun Phrases are: 
[John, the book, Mary]

>> Named Entities are: 
[('Mary', 'PERSON')] 

------------------- Sentence 4 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 103 =================================

 Mary received the book from John.   The book was given to Mary by John.    The use of a canonical form in a mental representation  makes it easier to reason with the representation later. In this  case, the common meaning of the different sentences could  be represented either in the logical form give(john, mary,  book) or in the more precise form:     event(e1000).     act(e1000, giving).     

------------------- Sentence 1 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Mary received the book from John. 


>> Tokens are: 
[Mary, received, book, John, .] 

>> PoS Tags are: 
[('Mary', 'PROPN'), ('received', 'VERB'), ('book', 'NOUN'), ('John', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Mary', 'nsubj'), ('received', 'ROOT'), ('book', 'dobj'), ('John', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Mary, received], [received, book], [book, John], [John, .]]

>> Trigrams: 
[[Mary, received, book], [received, book, John], [book, John, .]]

>> Noun Phrases are: 
[Mary, the book, John]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

  The book was given to Mary by John. 


>> Tokens are: 
[  , book, given, Mary, John, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('book', 'NOUN'), ('given', 'VERB'), ('Mary', 'PROPN'), ('John', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'dep'), ('book', 'nsubjpass'), ('given', 'ROOT'), ('Mary', 'pobj'), ('John', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[  , book], [book, given], [given, Mary], [Mary, John], [John, .]]

>> Trigrams: 
[[  , book, given], [book, given, Mary], [given, Mary, John], [Mary, John, .]]

>> Noun Phrases are: 
[The book, Mary, John]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

    


>> Tokens are: 
[   ] 

>> PoS Tags are: 
[('   ', 'SPACE')] 

>> Dependency Tags are: 
[('   ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 5 -------------------

The use of a canonical form in a mental representation  makes it easier to reason with the representation later. 


>> Tokens are: 
[use, canonical, form, mental, representation,  , makes, easier, reason, representation, later, .] 

>> PoS Tags are: 
[('use', 'NOUN'), ('canonical', 'ADJ'), ('form', 'NOUN'), ('mental', 'ADJ'), ('representation', 'NOUN'), (' ', 'SPACE'), ('makes', 'VERB'), ('easier', 'ADJ'), ('reason', 'VERB'), ('representation', 'NOUN'), ('later', 'ADV'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('use', 'nsubj'), ('canonical', 'amod'), ('form', 'pobj'), ('mental', 'amod'), ('representation', 'pobj'), (' ', 'punct'), ('makes', 'ROOT'), ('easier', 'ccomp'), ('reason', 'xcomp'), ('representation', 'pobj'), ('later', 'advmod'), ('.', 'punct')]

>> Bigrams: 
[[use, canonical], [canonical, form], [form, mental], [mental, representation], [representation,  ], [ , makes], [makes, easier], [easier, reason], [reason, representation], [representation, later], [later, .]]

>> Trigrams: 
[[use, canonical, form], [canonical, form, mental], [form, mental, representation], [mental, representation,  ], [representation,  , makes], [ , makes, easier], [makes, easier, reason], [easier, reason, representation], [reason, representation, later], [representation, later, .]]

>> Noun Phrases are: 
[The use, a canonical form, a mental representation, it, the representation]

>> Named Entities are: 
[] 

------------------- Sentence 6 -------------------

In this  case, the common meaning of the different sentences could  be represented either in the logical form give(john, mary,  book) or in the more precise form:     event(e1000). 


>> Tokens are: 
[ , case, ,, common, meaning, different, sentences,  , represented, logical, form, give(john, ,, mary, ,,  , book, ), precise, form, :,     , event(e1000, ), .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('case', 'NOUN'), (',', 'PUNCT'), ('common', 'ADJ'), ('meaning', 'NOUN'), ('different', 'ADJ'), ('sentences', 'NOUN'), (' ', 'SPACE'), ('represented', 'VERB'), ('logical', 'ADJ'), ('form', 'NOUN'), ('give(john', 'PROPN'), (',', 'PUNCT'), ('mary', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('book', 'NOUN'), (')', 'PUNCT'), ('precise', 'ADJ'), ('form', 'NOUN'), (':', 'PUNCT'), ('    ', 'SPACE'), ('event(e1000', 'X'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'compound'), ('case', 'pobj'), (',', 'punct'), ('common', 'amod'), ('meaning', 'nsubjpass'), ('different', 'amod'), ('sentences', 'pobj'), (' ', 'nsubjpass'), ('represented', 'ROOT'), ('logical', 'amod'), ('form', 'pobj'), ('give(john', 'appos'), (',', 'punct'), ('mary', 'appos'), (',', 'punct'), (' ', 'compound'), ('book', 'appos'), (')', 'punct'), ('precise', 'amod'), ('form', 'pobj'), (':', 'punct'), ('    ', 'appos'), ('event(e1000', 'punct'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[ , case], [case, ,], [,, common], [common, meaning], [meaning, different], [different, sentences], [sentences,  ], [ , represented], [represented, logical], [logical, form], [form, give(john], [give(john, ,], [,, mary], [mary, ,], [,,  ], [ , book], [book, )], [), precise], [precise, form], [form, :], [:,     ], [    , event(e1000], [event(e1000, )], [), .]]

>> Trigrams: 
[[ , case, ,], [case, ,, common], [,, common, meaning], [common, meaning, different], [meaning, different, sentences], [different, sentences,  ], [sentences,  , represented], [ , represented, logical], [represented, logical, form], [logical, form, give(john], [form, give(john, ,], [give(john, ,, mary], [,, mary, ,], [mary, ,,  ], [,,  , book], [ , book, )], [book, ), precise], [), precise, form], [precise, form, :], [form, :,     ], [:,     , event(e1000], [    , event(e1000, )], [event(e1000, ), .]]

>> Noun Phrases are: 
[this  case, the common meaning, the different sentences, the logical form, give(john, mary,  book, the more precise form]

>> Named Entities are: 
[] 

------------------- Sentence 7 -------------------

    act(e1000, giving). 


>> Tokens are: 
[    , act(e1000, ,, giving, ), .] 

>> PoS Tags are: 
[('    ', 'SPACE'), ('act(e1000', 'NOUN'), (',', 'PUNCT'), ('giving', 'VERB'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('    ', 'compound'), ('act(e1000', 'ROOT'), (',', 'punct'), ('giving', 'acl'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[    , act(e1000], [act(e1000, ,], [,, giving], [giving, )], [), .]]

>> Trigrams: 
[[    , act(e1000, ,], [act(e1000, ,, giving], [,, giving, )], [giving, ), .]]

>> Noun Phrases are: 
[    act(e1000]

>> Named Entities are: 
[] 

------------------- Sentence 8 -------------------

     


>> Tokens are: 
[    ] 

>> PoS Tags are: 
[('    ', 'SPACE')] 

>> Dependency Tags are: 
[('    ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 104 =================================

agent(e1000, john).   recipient(e1000, mary).   object(e1000, book21).   isa(book21, book).  

------------------- Sentence 1 -------------------

agent(e1000, john). 


>> Tokens are: 
[agent(e1000, ,, john, ), .] 

>> PoS Tags are: 
[('agent(e1000', 'NUM'), (',', 'PUNCT'), ('john', 'PROPN'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('agent(e1000', 'ROOT'), (',', 'punct'), ('john', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[agent(e1000, ,], [,, john], [john, )], [), .]]

>> Trigrams: 
[[agent(e1000, ,, john], [,, john, )], [john, ), .]]

>> Noun Phrases are: 
[john]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

  recipient(e1000, mary). 


>> Tokens are: 
[  , recipient(e1000, ,, mary, ), .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('recipient(e1000', 'X'), (',', 'PUNCT'), ('mary', 'NOUN'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'nsubj'), ('recipient(e1000', 'ROOT'), (',', 'punct'), ('mary', 'conj'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[  , recipient(e1000], [recipient(e1000, ,], [,, mary], [mary, )], [), .]]

>> Trigrams: 
[[  , recipient(e1000, ,], [recipient(e1000, ,, mary], [,, mary, )], [mary, ), .]]

>> Noun Phrases are: 
[mary]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

  object(e1000, book21). 


>> Tokens are: 
[  , object(e1000, ,, book21, ), .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('object(e1000', 'NOUN'), (',', 'PUNCT'), ('book21', 'NOUN'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'compound'), ('object(e1000', 'ROOT'), (',', 'punct'), ('book21', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[  , object(e1000], [object(e1000, ,], [,, book21], [book21, )], [), .]]

>> Trigrams: 
[[  , object(e1000, ,], [object(e1000, ,, book21], [,, book21, )], [book21, ), .]]

>> Noun Phrases are: 
[  object(e1000, book21]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

  isa(book21, book). 


>> Tokens are: 
[  , isa(book21, ,, book, ), .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('isa(book21', 'PROPN'), (',', 'PUNCT'), ('book', 'NOUN'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'nmod'), ('isa(book21', 'ROOT'), (',', 'punct'), ('book', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[  , isa(book21], [isa(book21, ,], [,, book], [book, )], [), .]]

>> Trigrams: 
[[  , isa(book21, ,], [isa(book21, ,, book], [,, book, )], [book, ), .]]

>> Noun Phrases are: 
[  isa(book21, book]

>> Named Entities are: 
[] 

------------------- Sentence 5 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 105 =================================

  The more precise form is one way of distinguishing between  similar events and similar books.  

------------------- Sentence 1 -------------------

  The more precise form is one way of distinguishing between  similar events and similar books. 


>> Tokens are: 
[  , precise, form, way, distinguishing,  , similar, events, similar, books, .] 

>> PoS Tags are: 
[('  ', 'SPACE'), ('precise', 'ADJ'), ('form', 'NOUN'), ('way', 'NOUN'), ('distinguishing', 'VERB'), (' ', 'SPACE'), ('similar', 'ADJ'), ('events', 'NOUN'), ('similar', 'ADJ'), ('books', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('  ', 'npadvmod'), ('precise', 'amod'), ('form', 'nsubj'), ('way', 'attr'), ('distinguishing', 'pcomp'), (' ', 'pobj'), ('similar', 'amod'), ('events', 'pobj'), ('similar', 'amod'), ('books', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[  , precise], [precise, form], [form, way], [way, distinguishing], [distinguishing,  ], [ , similar], [similar, events], [events, similar], [similar, books], [books, .]]

>> Trigrams: 
[[  , precise, form], [precise, form, way], [form, way, distinguishing], [way, distinguishing,  ], [distinguishing,  , similar], [ , similar, events], [similar, events, similar], [events, similar, books], [similar, books, .]]

>> Noun Phrases are: 
[The more precise form, one way, similar events, similar books]

>> Named Entities are: 
[('one', 'CARDINAL')] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 106 =================================

It follows from the tenets of relevance theory that, if you  want your communications to be easy to understand, then  you should express them in a form that is close to their men- tal representations. They should be clear, so that extracting  their meaning is easy, and they should be simple, so that  their meaning is close to the canonical form in which they  are represented.  

------------------- Sentence 1 -------------------

It follows from the tenets of relevance theory that, if you  want your communications to be easy to understand, then  you should express them in a form that is close to their men- tal representations. 


>> Tokens are: 
[follows, tenets, relevance, theory, ,,  , want, communications, easy, understand, ,,  , express, form, close, men-, tal, representations, .] 

>> PoS Tags are: 
[('follows', 'VERB'), ('tenets', 'NOUN'), ('relevance', 'NOUN'), ('theory', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('want', 'VERB'), ('communications', 'NOUN'), ('easy', 'ADJ'), ('understand', 'VERB'), (',', 'PUNCT'), (' ', 'SPACE'), ('express', 'VERB'), ('form', 'NOUN'), ('close', 'ADJ'), ('men-', 'ADJ'), ('tal', 'ADJ'), ('representations', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('follows', 'ROOT'), ('tenets', 'pobj'), ('relevance', 'compound'), ('theory', 'pobj'), (',', 'punct'), (' ', 'nsubj'), ('want', 'advcl'), ('communications', 'nsubj'), ('easy', 'acomp'), ('understand', 'xcomp'), (',', 'punct'), (' ', 'meta'), ('express', 'ccomp'), ('form', 'pobj'), ('close', 'acomp'), ('men-', 'amod'), ('tal', 'compound'), ('representations', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[follows, tenets], [tenets, relevance], [relevance, theory], [theory, ,], [,,  ], [ , want], [want, communications], [communications, easy], [easy, understand], [understand, ,], [,,  ], [ , express], [express, form], [form, close], [close, men-], [men-, tal], [tal, representations], [representations, .]]

>> Trigrams: 
[[follows, tenets, relevance], [tenets, relevance, theory], [relevance, theory, ,], [theory, ,,  ], [,,  , want], [ , want, communications], [want, communications, easy], [communications, easy, understand], [easy, understand, ,], [understand, ,,  ], [,,  , express], [ , express, form], [express, form, close], [form, close, men-], [close, men-, tal], [men-, tal, representations], [tal, representations, .]]

>> Noun Phrases are: 
[It, the tenets, relevance theory, you, your communications, you, them, a form, their men- tal representations]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

They should be clear, so that extracting  their meaning is easy, and they should be simple, so that  their meaning is close to the canonical form in which they  are represented. 


>> Tokens are: 
[clear, ,, extracting,  , meaning, easy, ,, simple, ,,  , meaning, close, canonical, form,  , represented, .] 

>> PoS Tags are: 
[('clear', 'ADJ'), (',', 'PUNCT'), ('extracting', 'VERB'), (' ', 'SPACE'), ('meaning', 'NOUN'), ('easy', 'ADJ'), (',', 'PUNCT'), ('simple', 'ADJ'), (',', 'PUNCT'), (' ', 'SPACE'), ('meaning', 'NOUN'), ('close', 'ADJ'), ('canonical', 'ADJ'), ('form', 'NOUN'), (' ', 'SPACE'), ('represented', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('clear', 'acomp'), (',', 'punct'), ('extracting', 'csubj'), (' ', 'dobj'), ('meaning', 'dobj'), ('easy', 'acomp'), (',', 'punct'), ('simple', 'acomp'), (',', 'punct'), (' ', 'nummod'), ('meaning', 'nsubj'), ('close', 'acomp'), ('canonical', 'amod'), ('form', 'pobj'), (' ', 'nsubjpass'), ('represented', 'relcl'), ('.', 'punct')]

>> Bigrams: 
[[clear, ,], [,, extracting], [extracting,  ], [ , meaning], [meaning, easy], [easy, ,], [,, simple], [simple, ,], [,,  ], [ , meaning], [meaning, close], [close, canonical], [canonical, form], [form,  ], [ , represented], [represented, .]]

>> Trigrams: 
[[clear, ,, extracting], [,, extracting,  ], [extracting,  , meaning], [ , meaning, easy], [meaning, easy, ,], [easy, ,, simple], [,, simple, ,], [simple, ,,  ], [,,  , meaning], [ , meaning, close], [meaning, close, canonical], [close, canonical, form], [canonical, form,  ], [form,  , represented], [ , represented, .]]

>> Noun Phrases are: 
[They, their meaning, they,  their meaning, the canonical form, they]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 107 =================================

For example, don’t say  “Every bird which belongs to  class aves has feathers ”. But say:      every bird has feathers.    every bird belongs to class aves.  or     a bird has feathers if the bird belongs to class aves.    depending on what you mean. In written English, the differ- ent meanings can be signaled by the presence or absence of  commas before and after the relative clause beginning with  the word “which”. In clausal logic, they are represented by  the difference between conclusions and conditions.   

------------------- Sentence 1 -------------------

For example, don’t say  “Every bird which belongs to  class aves has feathers ”. 


>> Tokens are: 
[example, ,,  , “, bird, belongs,  , class, aves, feathers, ”, .] 

>> PoS Tags are: 
[('example', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('“', 'PUNCT'), ('bird', 'NOUN'), ('belongs', 'VERB'), (' ', 'SPACE'), ('class', 'NOUN'), ('aves', 'NOUN'), ('feathers', 'NOUN'), ('”', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('example', 'pobj'), (',', 'punct'), (' ', 'dobj'), ('“', 'punct'), ('bird', 'nsubj'), ('belongs', 'relcl'), (' ', 'pobj'), ('class', 'compound'), ('aves', 'pobj'), ('feathers', 'dobj'), ('”', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[example, ,], [,,  ], [ , “], [“, bird], [bird, belongs], [belongs,  ], [ , class], [class, aves], [aves, feathers], [feathers, ”], [”, .]]

>> Trigrams: 
[[example, ,,  ], [,,  , “], [ , “, bird], [“, bird, belongs], [bird, belongs,  ], [belongs,  , class], [ , class, aves], [class, aves, feathers], [aves, feathers, ”], [feathers, ”, .]]

>> Noun Phrases are: 
[example, Every bird, class aves, feathers]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

But say:      every bird has feathers. 


>> Tokens are: 
[:,      , bird, feathers, .] 

>> PoS Tags are: 
[(':', 'PUNCT'), ('     ', 'SPACE'), ('bird', 'NOUN'), ('feathers', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(':', 'punct'), ('     ', 'nsubj'), ('bird', 'nsubj'), ('feathers', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[:,      ], [     , bird], [bird, feathers], [feathers, .]]

>> Trigrams: 
[[:,      , bird], [     , bird, feathers], [bird, feathers, .]]

>> Noun Phrases are: 
[every bird, feathers]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

   every bird belongs to class aves. 


>> Tokens are: 
[   , bird, belongs, class, aves, .] 

>> PoS Tags are: 
[('   ', 'SPACE'), ('bird', 'NOUN'), ('belongs', 'VERB'), ('class', 'NOUN'), ('aves', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('   ', 'nsubj'), ('bird', 'nsubj'), ('belongs', 'ROOT'), ('class', 'compound'), ('aves', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[   , bird], [bird, belongs], [belongs, class], [class, aves], [aves, .]]

>> Trigrams: 
[[   , bird, belongs], [bird, belongs, class], [belongs, class, aves], [class, aves, .]]

>> Noun Phrases are: 
[every bird, class aves]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

 or     a bird has feathers if the bird belongs to class aves. 


>> Tokens are: 
[ ,     , bird, feathers, bird, belongs, class, aves, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('    ', 'SPACE'), ('bird', 'NOUN'), ('feathers', 'NOUN'), ('bird', 'NOUN'), ('belongs', 'VERB'), ('class', 'NOUN'), ('aves', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'nsubj'), ('    ', 'conj'), ('bird', 'conj'), ('feathers', 'dobj'), ('bird', 'nsubj'), ('belongs', 'advcl'), ('class', 'compound'), ('aves', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[ ,     ], [    , bird], [bird, feathers], [feathers, bird], [bird, belongs], [belongs, class], [class, aves], [aves, .]]

>> Trigrams: 
[[ ,     , bird], [    , bird, feathers], [bird, feathers, bird], [feathers, bird, belongs], [bird, belongs, class], [belongs, class, aves], [class, aves, .]]

>> Noun Phrases are: 
[a bird, feathers, the bird, class aves]

>> Named Entities are: 
[] 

------------------- Sentence 5 -------------------

   depending on what you mean. 


>> Tokens are: 
[   , depending, mean, .] 

>> PoS Tags are: 
[('   ', 'SPACE'), ('depending', 'VERB'), ('mean', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('   ', 'ROOT'), ('depending', 'prep'), ('mean', 'pcomp'), ('.', 'punct')]

>> Bigrams: 
[[   , depending], [depending, mean], [mean, .]]

>> Trigrams: 
[[   , depending, mean], [depending, mean, .]]

>> Noun Phrases are: 
[what, you]

>> Named Entities are: 
[] 

------------------- Sentence 6 -------------------

In written English, the differ- ent meanings can be signaled by the presence or absence of  commas before and after the relative clause beginning with  the word “which”. 


>> Tokens are: 
[written, English, ,, differ-, ent, meanings, signaled, presence, absence,  , commas, relative, clause, beginning,  , word, “, ”, .] 

>> PoS Tags are: 
[('written', 'VERB'), ('English', 'PROPN'), (',', 'PUNCT'), ('differ-', 'ADJ'), ('ent', 'NOUN'), ('meanings', 'NOUN'), ('signaled', 'VERB'), ('presence', 'NOUN'), ('absence', 'NOUN'), (' ', 'SPACE'), ('commas', 'NOUN'), ('relative', 'ADJ'), ('clause', 'NOUN'), ('beginning', 'VERB'), (' ', 'SPACE'), ('word', 'NOUN'), ('“', 'PUNCT'), ('”', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('written', 'amod'), ('English', 'pobj'), (',', 'punct'), ('differ-', 'amod'), ('ent', 'compound'), ('meanings', 'nsubjpass'), ('signaled', 'ROOT'), ('presence', 'pobj'), ('absence', 'conj'), (' ', 'pobj'), ('commas', 'pobj'), ('relative', 'amod'), ('clause', 'pobj'), ('beginning', 'acl'), (' ', 'pobj'), ('word', 'dobj'), ('“', 'punct'), ('”', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[written, English], [English, ,], [,, differ-], [differ-, ent], [ent, meanings], [meanings, signaled], [signaled, presence], [presence, absence], [absence,  ], [ , commas], [commas, relative], [relative, clause], [clause, beginning], [beginning,  ], [ , word], [word, “], [“, ”], [”, .]]

>> Trigrams: 
[[written, English, ,], [English, ,, differ-], [,, differ-, ent], [differ-, ent, meanings], [ent, meanings, signaled], [meanings, signaled, presence], [signaled, presence, absence], [presence, absence,  ], [absence,  , commas], [ , commas, relative], [commas, relative, clause], [relative, clause, beginning], [clause, beginning,  ], [beginning,  , word], [ , word, “], [word, “, ”], [“, ”, .]]

>> Noun Phrases are: 
[written English, the differ- ent meanings, the presence, absence, commas, the relative clause, the word]

>> Named Entities are: 
[('English', 'LANGUAGE')] 

------------------- Sentence 7 -------------------

In clausal logic, they are represented by  the difference between conclusions and conditions. 


>> Tokens are: 
[clausal, logic, ,, represented,  , difference, conclusions, conditions, .] 

>> PoS Tags are: 
[('clausal', 'NOUN'), ('logic', 'NOUN'), (',', 'PUNCT'), ('represented', 'VERB'), (' ', 'SPACE'), ('difference', 'NOUN'), ('conclusions', 'NOUN'), ('conditions', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('clausal', 'compound'), ('logic', 'pobj'), (',', 'punct'), ('represented', 'ROOT'), (' ', 'pobj'), ('difference', 'dobj'), ('conclusions', 'pobj'), ('conditions', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[clausal, logic], [logic, ,], [,, represented], [represented,  ], [ , difference], [difference, conclusions], [conclusions, conditions], [conditions, .]]

>> Trigrams: 
[[clausal, logic, ,], [logic, ,, represented], [,, represented,  ], [represented,  , difference], [ , difference, conclusions], [difference, conclusions, conditions], [conclusions, conditions, .]]

>> Noun Phrases are: 
[clausal logic, they, the difference, conclusions, conditions]

>> Named Entities are: 
[] 

------------------- Sentence 8 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 108 =================================

Examples such as these suggest that the difference and  the relationship between conditions and conclusions are a  fundamental feature of the LOT, and they add further sup- port to the thesis that something like the conditional form of  clausal logic is a plausible candidate for the LOT.  

------------------- Sentence 1 -------------------

Examples such as these suggest that the difference and  the relationship between conditions and conclusions are a  fundamental feature of the LOT, and they add further sup- port to the thesis that something like the conditional form of  clausal logic is a plausible candidate for the LOT. 


>> Tokens are: 
[Examples, suggest, difference,  , relationship, conditions, conclusions,  , fundamental, feature, LOT, ,, add, sup-, port, thesis, like, conditional, form,  , clausal, logic, plausible, candidate, LOT, .] 

>> PoS Tags are: 
[('Examples', 'NOUN'), ('suggest', 'VERB'), ('difference', 'NOUN'), (' ', 'SPACE'), ('relationship', 'NOUN'), ('conditions', 'NOUN'), ('conclusions', 'NOUN'), (' ', 'SPACE'), ('fundamental', 'ADJ'), ('feature', 'NOUN'), ('LOT', 'PROPN'), (',', 'PUNCT'), ('add', 'VERB'), ('sup-', 'ADJ'), ('port', 'NOUN'), ('thesis', 'NOUN'), ('like', 'ADP'), ('conditional', 'ADJ'), ('form', 'NOUN'), (' ', 'SPACE'), ('clausal', 'NOUN'), ('logic', 'NOUN'), ('plausible', 'ADJ'), ('candidate', 'NOUN'), ('LOT', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Examples', 'nsubj'), ('suggest', 'ROOT'), ('difference', 'nsubj'), (' ', 'conj'), ('relationship', 'appos'), ('conditions', 'pobj'), ('conclusions', 'conj'), (' ', 'nmod'), ('fundamental', 'amod'), ('feature', 'attr'), ('LOT', 'pobj'), (',', 'punct'), ('add', 'conj'), ('sup-', 'amod'), ('port', 'dobj'), ('thesis', 'pobj'), ('like', 'prep'), ('conditional', 'amod'), ('form', 'pobj'), (' ', 'compound'), ('clausal', 'compound'), ('logic', 'pobj'), ('plausible', 'amod'), ('candidate', 'attr'), ('LOT', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Examples, suggest], [suggest, difference], [difference,  ], [ , relationship], [relationship, conditions], [conditions, conclusions], [conclusions,  ], [ , fundamental], [fundamental, feature], [feature, LOT], [LOT, ,], [,, add], [add, sup-], [sup-, port], [port, thesis], [thesis, like], [like, conditional], [conditional, form], [form,  ], [ , clausal], [clausal, logic], [logic, plausible], [plausible, candidate], [candidate, LOT], [LOT, .]]

>> Trigrams: 
[[Examples, suggest, difference], [suggest, difference,  ], [difference,  , relationship], [ , relationship, conditions], [relationship, conditions, conclusions], [conditions, conclusions,  ], [conclusions,  , fundamental], [ , fundamental, feature], [fundamental, feature, LOT], [feature, LOT, ,], [LOT, ,, add], [,, add, sup-], [add, sup-, port], [sup-, port, thesis], [port, thesis, like], [thesis, like, conditional], [like, conditional, form], [conditional, form,  ], [form,  , clausal], [ , clausal, logic], [clausal, logic, plausible], [logic, plausible, candidate], [plausible, candidate, LOT], [candidate, LOT, .]]

>> Noun Phrases are: 
[Examples, the difference, the relationship, conditions, conclusions, a  fundamental feature, the LOT, they, sup- port, the thesis, something, the conditional form,  clausal logic, a plausible candidate, the LOT]

>> Named Entities are: 
[('LOT', 'ORG'), ('LOT', 'ORG')] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 109 =================================

3.3 Standard FOL and Clausal Logic  

------------------- Sentence 1 -------------------

3.3 Standard FOL and Clausal Logic   


>> Tokens are: 
[3.3, Standard, FOL, Clausal, Logic,  ] 

>> PoS Tags are: 
[('3.3', 'NUM'), ('Standard', 'ADJ'), ('FOL', 'PROPN'), ('Clausal', 'PROPN'), ('Logic', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('3.3', 'nummod'), ('Standard', 'amod'), ('FOL', 'nmod'), ('Clausal', 'conj'), ('Logic', 'ROOT'), (' ', 'appos')]

>> Bigrams: 
[[3.3, Standard], [Standard, FOL], [FOL, Clausal], [Clausal, Logic], [Logic,  ]]

>> Trigrams: 
[[3.3, Standard, FOL], [Standard, FOL, Clausal], [FOL, Clausal, Logic], [Clausal, Logic,  ]]

>> Noun Phrases are: 
[3.3 Standard FOL and Clausal Logic]

>> Named Entities are: 
[('3.3', 'CARDINAL')] 


================================ Paragraph 110 =================================

Various forms of logic have been used for knowledge repre- sentation in AI, and rival clausal logic as a candidate for the  LOT. But compared with standard FOL, not only does  clausal logic stand out because of its simple, conditional  form, but it is just as powerful. It compensates for the lack  of explicit existential quantifiers by employing Skolemiza- tion to give individuals that are supposed to exist a name,  like the names e1000 and book21 above. In another respect,  it is also more powerful than FOL, when it is used in con- junction with the minimal model semantics.  

------------------- Sentence 1 -------------------

Various forms of logic have been used for knowledge repre- sentation in AI, and rival clausal logic as a candidate for the  LOT. 


>> Tokens are: 
[forms, logic, knowledge, repre-, sentation, AI, ,, rival, clausal, logic, candidate,  , LOT, .] 

>> PoS Tags are: 
[('forms', 'NOUN'), ('logic', 'NOUN'), ('knowledge', 'NOUN'), ('repre-', 'NOUN'), ('sentation', 'NOUN'), ('AI', 'PROPN'), (',', 'PUNCT'), ('rival', 'ADJ'), ('clausal', 'NOUN'), ('logic', 'NOUN'), ('candidate', 'NOUN'), (' ', 'SPACE'), ('LOT', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('forms', 'nsubjpass'), ('logic', 'pobj'), ('knowledge', 'nmod'), ('repre-', 'compound'), ('sentation', 'pobj'), ('AI', 'pobj'), (',', 'punct'), ('rival', 'amod'), ('clausal', 'compound'), ('logic', 'conj'), ('candidate', 'pobj'), (' ', 'compound'), ('LOT', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[forms, logic], [logic, knowledge], [knowledge, repre-], [repre-, sentation], [sentation, AI], [AI, ,], [,, rival], [rival, clausal], [clausal, logic], [logic, candidate], [candidate,  ], [ , LOT], [LOT, .]]

>> Trigrams: 
[[forms, logic, knowledge], [logic, knowledge, repre-], [knowledge, repre-, sentation], [repre-, sentation, AI], [sentation, AI, ,], [AI, ,, rival], [,, rival, clausal], [rival, clausal, logic], [clausal, logic, candidate], [logic, candidate,  ], [candidate,  , LOT], [ , LOT, .]]

>> Noun Phrases are: 
[Various forms, logic, knowledge repre- sentation, AI, rival clausal logic, a candidate, the  LOT]

>> Named Entities are: 
[('AI', 'ORG'), ('LOT', 'ORG')] 

------------------- Sentence 2 -------------------

But compared with standard FOL, not only does  clausal logic stand out because of its simple, conditional  form, but it is just as powerful. 


>> Tokens are: 
[compared, standard, FOL, ,,  , clausal, logic, stand, simple, ,, conditional,  , form, ,, powerful, .] 

>> PoS Tags are: 
[('compared', 'VERB'), ('standard', 'ADJ'), ('FOL', 'PROPN'), (',', 'PUNCT'), (' ', 'SPACE'), ('clausal', 'VERB'), ('logic', 'NOUN'), ('stand', 'VERB'), ('simple', 'ADJ'), (',', 'PUNCT'), ('conditional', 'ADJ'), (' ', 'SPACE'), ('form', 'NOUN'), (',', 'PUNCT'), ('powerful', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('compared', 'prep'), ('standard', 'amod'), ('FOL', 'pobj'), (',', 'punct'), (' ', 'nsubj'), ('clausal', 'compound'), ('logic', 'nsubj'), ('stand', 'ROOT'), ('simple', 'amod'), (',', 'punct'), ('conditional', 'amod'), (' ', 'compound'), ('form', 'pobj'), (',', 'punct'), ('powerful', 'acomp'), ('.', 'punct')]

>> Bigrams: 
[[compared, standard], [standard, FOL], [FOL, ,], [,,  ], [ , clausal], [clausal, logic], [logic, stand], [stand, simple], [simple, ,], [,, conditional], [conditional,  ], [ , form], [form, ,], [,, powerful], [powerful, .]]

>> Trigrams: 
[[compared, standard, FOL], [standard, FOL, ,], [FOL, ,,  ], [,,  , clausal], [ , clausal, logic], [clausal, logic, stand], [logic, stand, simple], [stand, simple, ,], [simple, ,, conditional], [,, conditional,  ], [conditional,  , form], [ , form, ,], [form, ,, powerful], [,, powerful, .]]

>> Noun Phrases are: 
[standard FOL, not only does  clausal logic, its simple, conditional  form, it]

>> Named Entities are: 
[('FOL', 'ORG')] 

------------------- Sentence 3 -------------------

It compensates for the lack  of explicit existential quantifiers by employing Skolemiza- tion to give individuals that are supposed to exist a name,  like the names e1000 and book21 above. 


>> Tokens are: 
[compensates, lack,  , explicit, existential, quantifiers, employing, Skolemiza-, tion, individuals, supposed, exist, ,,  , like, names, e1000, book21, .] 

>> PoS Tags are: 
[('compensates', 'VERB'), ('lack', 'NOUN'), (' ', 'SPACE'), ('explicit', 'ADJ'), ('existential', 'ADJ'), ('quantifiers', 'NOUN'), ('employing', 'VERB'), ('Skolemiza-', 'PROPN'), ('tion', 'NOUN'), ('individuals', 'NOUN'), ('supposed', 'VERB'), ('exist', 'VERB'), (',', 'PUNCT'), (' ', 'SPACE'), ('like', 'ADP'), ('names', 'NOUN'), ('e1000', 'PROPN'), ('book21', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('compensates', 'ROOT'), ('lack', 'pobj'), (' ', 'appos'), ('explicit', 'amod'), ('existential', 'amod'), ('quantifiers', 'pobj'), ('employing', 'pcomp'), ('Skolemiza-', 'compound'), ('tion', 'dobj'), ('individuals', 'dobj'), ('supposed', 'relcl'), ('exist', 'xcomp'), (',', 'punct'), (' ', 'dep'), ('like', 'prep'), ('names', 'pobj'), ('e1000', 'appos'), ('book21', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[compensates, lack], [lack,  ], [ , explicit], [explicit, existential], [existential, quantifiers], [quantifiers, employing], [employing, Skolemiza-], [Skolemiza-, tion], [tion, individuals], [individuals, supposed], [supposed, exist], [exist, ,], [,,  ], [ , like], [like, names], [names, e1000], [e1000, book21], [book21, .]]

>> Trigrams: 
[[compensates, lack,  ], [lack,  , explicit], [ , explicit, existential], [explicit, existential, quantifiers], [existential, quantifiers, employing], [quantifiers, employing, Skolemiza-], [employing, Skolemiza-, tion], [Skolemiza-, tion, individuals], [tion, individuals, supposed], [individuals, supposed, exist], [supposed, exist, ,], [exist, ,,  ], [,,  , like], [ , like, names], [like, names, e1000], [names, e1000, book21], [e1000, book21, .]]

>> Noun Phrases are: 
[It, the lack, explicit existential quantifiers, Skolemiza- tion, individuals, a name, the names, e1000]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

In another respect,  it is also more powerful than FOL, when it is used in con- junction with the minimal model semantics. 


>> Tokens are: 
[respect, ,,  , powerful, FOL, ,, con-, junction, minimal, model, semantics, .] 

>> PoS Tags are: 
[('respect', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('powerful', 'ADJ'), ('FOL', 'PROPN'), (',', 'PUNCT'), ('con-', 'ADJ'), ('junction', 'NOUN'), ('minimal', 'ADJ'), ('model', 'NOUN'), ('semantics', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('respect', 'pobj'), (',', 'punct'), (' ', 'dep'), ('powerful', 'acomp'), ('FOL', 'pobj'), (',', 'punct'), ('con-', 'amod'), ('junction', 'pobj'), ('minimal', 'amod'), ('model', 'compound'), ('semantics', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[respect, ,], [,,  ], [ , powerful], [powerful, FOL], [FOL, ,], [,, con-], [con-, junction], [junction, minimal], [minimal, model], [model, semantics], [semantics, .]]

>> Trigrams: 
[[respect, ,,  ], [,,  , powerful], [ , powerful, FOL], [powerful, FOL, ,], [FOL, ,, con-], [,, con-, junction], [con-, junction, minimal], [junction, minimal, model], [minimal, model, semantics], [model, semantics, .]]

>> Noun Phrases are: 
[another respect, it, FOL, it, con- junction, the minimal model semantics]

>> Named Entities are: 
[] 

------------------- Sentence 5 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 111 =================================

Reasoning is also much simpler in clausal logic than in  standard FOL, and for the most part can be reduced to just  forward and backward reasoning. In conjunction with the  minimal model semantics, reasoning in clausal logic also  includes default reasoning with negation as failure.    Arguably, the relationship between standard FOL and  clausal form is similar to the relationship between natural  language and the LOT. In both cases, inferences can be par- titioned into two kinds, performed in two stages. The first  kind converts sentences into canonical form, and the second  kind reasons with the resulting canonical form.  

------------------- Sentence 1 -------------------

Reasoning is also much simpler in clausal logic than in  standard FOL, and for the most part can be reduced to just  forward and backward reasoning. 


>> Tokens are: 
[Reasoning, simpler, clausal, logic,  , standard, FOL, ,, reduced,  , forward, backward, reasoning, .] 

>> PoS Tags are: 
[('Reasoning', 'NOUN'), ('simpler', 'ADJ'), ('clausal', 'NOUN'), ('logic', 'NOUN'), (' ', 'SPACE'), ('standard', 'ADJ'), ('FOL', 'PROPN'), (',', 'PUNCT'), ('reduced', 'VERB'), (' ', 'SPACE'), ('forward', 'ADV'), ('backward', 'ADJ'), ('reasoning', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Reasoning', 'nsubj'), ('simpler', 'acomp'), ('clausal', 'compound'), ('logic', 'pobj'), (' ', 'pobj'), ('standard', 'amod'), ('FOL', 'pobj'), (',', 'punct'), ('reduced', 'conj'), (' ', 'pobj'), ('forward', 'advmod'), ('backward', 'conj'), ('reasoning', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Reasoning, simpler], [simpler, clausal], [clausal, logic], [logic,  ], [ , standard], [standard, FOL], [FOL, ,], [,, reduced], [reduced,  ], [ , forward], [forward, backward], [backward, reasoning], [reasoning, .]]

>> Trigrams: 
[[Reasoning, simpler, clausal], [simpler, clausal, logic], [clausal, logic,  ], [logic,  , standard], [ , standard, FOL], [standard, FOL, ,], [FOL, ,, reduced], [,, reduced,  ], [reduced,  , forward], [ , forward, backward], [forward, backward, reasoning], [backward, reasoning, .]]

>> Noun Phrases are: 
[Reasoning, clausal logic, standard FOL, the most part, reasoning]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

In conjunction with the  minimal model semantics, reasoning in clausal logic also  includes default reasoning with negation as failure. 


>> Tokens are: 
[conjunction,  , minimal, model, semantics, ,, reasoning, clausal, logic,  , includes, default, reasoning, negation, failure, .] 

>> PoS Tags are: 
[('conjunction', 'NOUN'), (' ', 'SPACE'), ('minimal', 'ADJ'), ('model', 'NOUN'), ('semantics', 'NOUN'), (',', 'PUNCT'), ('reasoning', 'VERB'), ('clausal', 'NOUN'), ('logic', 'NOUN'), (' ', 'SPACE'), ('includes', 'VERB'), ('default', 'NOUN'), ('reasoning', 'NOUN'), ('negation', 'NOUN'), ('failure', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('conjunction', 'pobj'), (' ', 'nmod'), ('minimal', 'amod'), ('model', 'compound'), ('semantics', 'pobj'), (',', 'punct'), ('reasoning', 'csubj'), ('clausal', 'compound'), ('logic', 'pobj'), (' ', 'nsubj'), ('includes', 'ROOT'), ('default', 'compound'), ('reasoning', 'dobj'), ('negation', 'pobj'), ('failure', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[conjunction,  ], [ , minimal], [minimal, model], [model, semantics], [semantics, ,], [,, reasoning], [reasoning, clausal], [clausal, logic], [logic,  ], [ , includes], [includes, default], [default, reasoning], [reasoning, negation], [negation, failure], [failure, .]]

>> Trigrams: 
[[conjunction,  , minimal], [ , minimal, model], [minimal, model, semantics], [model, semantics, ,], [semantics, ,, reasoning], [,, reasoning, clausal], [reasoning, clausal, logic], [clausal, logic,  ], [logic,  , includes], [ , includes, default], [includes, default, reasoning], [default, reasoning, negation], [reasoning, negation, failure], [negation, failure, .]]

>> Noun Phrases are: 
[conjunction, the  minimal model semantics, clausal logic, default reasoning, negation, failure]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

    


>> Tokens are: 
[   ] 

>> PoS Tags are: 
[('   ', 'SPACE')] 

>> Dependency Tags are: 
[('   ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

Arguably, the relationship between standard FOL and  clausal form is similar to the relationship between natural  language and the LOT. 


>> Tokens are: 
[Arguably, ,, relationship, standard, FOL,  , clausal, form, similar, relationship, natural,  , language, LOT, .] 

>> PoS Tags are: 
[('Arguably', 'ADV'), (',', 'PUNCT'), ('relationship', 'NOUN'), ('standard', 'ADJ'), ('FOL', 'PROPN'), (' ', 'SPACE'), ('clausal', 'NOUN'), ('form', 'NOUN'), ('similar', 'ADJ'), ('relationship', 'NOUN'), ('natural', 'ADJ'), (' ', 'SPACE'), ('language', 'NOUN'), ('LOT', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Arguably', 'advmod'), (',', 'punct'), ('relationship', 'nsubj'), ('standard', 'amod'), ('FOL', 'nmod'), (' ', 'conj'), ('clausal', 'compound'), ('form', 'pobj'), ('similar', 'acomp'), ('relationship', 'pobj'), ('natural', 'amod'), (' ', 'compound'), ('language', 'pobj'), ('LOT', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[Arguably, ,], [,, relationship], [relationship, standard], [standard, FOL], [FOL,  ], [ , clausal], [clausal, form], [form, similar], [similar, relationship], [relationship, natural], [natural,  ], [ , language], [language, LOT], [LOT, .]]

>> Trigrams: 
[[Arguably, ,, relationship], [,, relationship, standard], [relationship, standard, FOL], [standard, FOL,  ], [FOL,  , clausal], [ , clausal, form], [clausal, form, similar], [form, similar, relationship], [similar, relationship, natural], [relationship, natural,  ], [natural,  , language], [ , language, LOT], [language, LOT, .]]

>> Noun Phrases are: 
[the relationship, standard FOL and  clausal form, the relationship, natural  language, the LOT]

>> Named Entities are: 
[('FOL', 'ORG'), ('LOT', 'ORG')] 

------------------- Sentence 5 -------------------

In both cases, inferences can be par- titioned into two kinds, performed in two stages. 


>> Tokens are: 
[cases, ,, inferences, par-, titioned, kinds, ,, performed, stages, .] 

>> PoS Tags are: 
[('cases', 'NOUN'), (',', 'PUNCT'), ('inferences', 'NOUN'), ('par-', 'NOUN'), ('titioned', 'VERB'), ('kinds', 'NOUN'), (',', 'PUNCT'), ('performed', 'VERB'), ('stages', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('cases', 'pobj'), (',', 'punct'), ('inferences', 'nsubj'), ('par-', 'attr'), ('titioned', 'ROOT'), ('kinds', 'pobj'), (',', 'punct'), ('performed', 'advcl'), ('stages', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[cases, ,], [,, inferences], [inferences, par-], [par-, titioned], [titioned, kinds], [kinds, ,], [,, performed], [performed, stages], [stages, .]]

>> Trigrams: 
[[cases, ,, inferences], [,, inferences, par-], [inferences, par-, titioned], [par-, titioned, kinds], [titioned, kinds, ,], [kinds, ,, performed], [,, performed, stages], [performed, stages, .]]

>> Noun Phrases are: 
[both cases, inferences, par-, two kinds, two stages]

>> Named Entities are: 
[('two', 'CARDINAL'), ('two', 'CARDINAL')] 

------------------- Sentence 6 -------------------

The first  kind converts sentences into canonical form, and the second  kind reasons with the resulting canonical form. 


>> Tokens are: 
[ , kind, converts, sentences, canonical, form, ,, second,  , kind, reasons, resulting, canonical, form, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('kind', 'NOUN'), ('converts', 'VERB'), ('sentences', 'NOUN'), ('canonical', 'ADJ'), ('form', 'NOUN'), (',', 'PUNCT'), ('second', 'ADJ'), (' ', 'SPACE'), ('kind', 'NOUN'), ('reasons', 'NOUN'), ('resulting', 'VERB'), ('canonical', 'ADJ'), ('form', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'nsubj'), ('kind', 'advmod'), ('converts', 'ROOT'), ('sentences', 'dobj'), ('canonical', 'amod'), ('form', 'pobj'), (',', 'punct'), ('second', 'amod'), (' ', 'nmod'), ('kind', 'amod'), ('reasons', 'conj'), ('resulting', 'amod'), ('canonical', 'amod'), ('form', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[ , kind], [kind, converts], [converts, sentences], [sentences, canonical], [canonical, form], [form, ,], [,, second], [second,  ], [ , kind], [kind, reasons], [reasons, resulting], [resulting, canonical], [canonical, form], [form, .]]

>> Trigrams: 
[[ , kind, converts], [kind, converts, sentences], [converts, sentences, canonical], [sentences, canonical, form], [canonical, form, ,], [form, ,, second], [,, second,  ], [second,  , kind], [ , kind, reasons], [kind, reasons, resulting], [reasons, resulting, canonical], [resulting, canonical, form], [canonical, form, .]]

>> Noun Phrases are: 
[sentences, canonical form, the second  kind reasons, the resulting canonical form]

>> Named Entities are: 
[('first', 'ORDINAL'), ('second', 'ORDINAL')] 

------------------- Sentence 7 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 112 =================================

In FOL, the first kind of inference rule (including both  Skolemization and the replacement of not(A or B) by not A  and not B)  can be viewed as converting sentences into  clausal form. The second kind (including the inference of  P(t) from �XP(X) ) can be viewed as reasoning with clausal  form, and is built into forward and backward reasoning.   

------------------- Sentence 1 -------------------

In FOL, the first kind of inference rule (including both  Skolemization and the replacement of not(A or B) by not A  and not B)  can be viewed as converting sentences into  clausal form. 


>> Tokens are: 
[FOL, ,, kind, inference, rule, (, including,  , Skolemization, replacement, not(A, B, ),  , B, ),  , viewed, converting, sentences,  , clausal, form, .] 

>> PoS Tags are: 
[('FOL', 'PROPN'), (',', 'PUNCT'), ('kind', 'NOUN'), ('inference', 'NOUN'), ('rule', 'NOUN'), ('(', 'PUNCT'), ('including', 'VERB'), (' ', 'SPACE'), ('Skolemization', 'PROPN'), ('replacement', 'NOUN'), ('not(A', 'NOUN'), ('B', 'NOUN'), (')', 'PUNCT'), (' ', 'SPACE'), ('B', 'NOUN'), (')', 'PUNCT'), (' ', 'SPACE'), ('viewed', 'VERB'), ('converting', 'VERB'), ('sentences', 'NOUN'), (' ', 'SPACE'), ('clausal', 'NOUN'), ('form', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('FOL', 'pobj'), (',', 'punct'), ('kind', 'nsubjpass'), ('inference', 'compound'), ('rule', 'pobj'), ('(', 'punct'), ('including', 'prep'), (' ', 'compound'), ('Skolemization', 'pobj'), ('replacement', 'conj'), ('not(A', 'pobj'), ('B', 'conj'), (')', 'punct'), (' ', 'pobj'), ('B', 'conj'), (')', 'punct'), (' ', 'nsubjpass'), ('viewed', 'ROOT'), ('converting', 'pcomp'), ('sentences', 'dobj'), (' ', 'compound'), ('clausal', 'compound'), ('form', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[FOL, ,], [,, kind], [kind, inference], [inference, rule], [rule, (], [(, including], [including,  ], [ , Skolemization], [Skolemization, replacement], [replacement, not(A], [not(A, B], [B, )], [),  ], [ , B], [B, )], [),  ], [ , viewed], [viewed, converting], [converting, sentences], [sentences,  ], [ , clausal], [clausal, form], [form, .]]

>> Trigrams: 
[[FOL, ,, kind], [,, kind, inference], [kind, inference, rule], [inference, rule, (], [rule, (, including], [(, including,  ], [including,  , Skolemization], [ , Skolemization, replacement], [Skolemization, replacement, not(A], [replacement, not(A, B], [not(A, B, )], [B, ),  ], [),  , B], [ , B, )], [B, ),  ], [),  , viewed], [ , viewed, converting], [viewed, converting, sentences], [converting, sentences,  ], [sentences,  , clausal], [ , clausal, form], [clausal, form, .]]

>> Noun Phrases are: 
[FOL, the first kind, inference rule, both  Skolemization, the replacement, not(A, B, not B, sentences,  clausal form]

>> Named Entities are: 
[('first', 'ORDINAL')] 

------------------- Sentence 2 -------------------

The second kind (including the inference of  P(t) from �XP(X) ) can be viewed as reasoning with clausal  form, and is built into forward and backward reasoning. 


>> Tokens are: 
[second, kind, (, including, inference,  , P(t, ), �, XP(X, ), ), viewed, reasoning, clausal,  , form, ,, built, forward, backward, reasoning, .] 

>> PoS Tags are: 
[('second', 'ADJ'), ('kind', 'NOUN'), ('(', 'PUNCT'), ('including', 'VERB'), ('inference', 'NOUN'), (' ', 'SPACE'), ('P(t', 'X'), (')', 'PUNCT'), ('�', 'PROPN'), ('XP(X', 'PROPN'), (')', 'PUNCT'), (')', 'PUNCT'), ('viewed', 'VERB'), ('reasoning', 'NOUN'), ('clausal', 'NOUN'), (' ', 'SPACE'), ('form', 'NOUN'), (',', 'PUNCT'), ('built', 'VERB'), ('forward', 'ADV'), ('backward', 'ADJ'), ('reasoning', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('second', 'amod'), ('kind', 'nsubjpass'), ('(', 'punct'), ('including', 'prep'), ('inference', 'pobj'), (' ', 'pobj'), ('P(t', 'appos'), (')', 'punct'), ('�', 'compound'), ('XP(X', 'pobj'), (')', 'punct'), (')', 'punct'), ('viewed', 'ROOT'), ('reasoning', 'pobj'), ('clausal', 'nmod'), (' ', 'nummod'), ('form', 'pobj'), (',', 'punct'), ('built', 'conj'), ('forward', 'amod'), ('backward', 'conj'), ('reasoning', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[second, kind], [kind, (], [(, including], [including, inference], [inference,  ], [ , P(t], [P(t, )], [), �], [�, XP(X], [XP(X, )], [), )], [), viewed], [viewed, reasoning], [reasoning, clausal], [clausal,  ], [ , form], [form, ,], [,, built], [built, forward], [forward, backward], [backward, reasoning], [reasoning, .]]

>> Trigrams: 
[[second, kind, (], [kind, (, including], [(, including, inference], [including, inference,  ], [inference,  , P(t], [ , P(t, )], [P(t, ), �], [), �, XP(X], [�, XP(X, )], [XP(X, ), )], [), ), viewed], [), viewed, reasoning], [viewed, reasoning, clausal], [reasoning, clausal,  ], [clausal,  , form], [ , form, ,], [form, ,, built], [,, built, forward], [built, forward, backward], [forward, backward, reasoning], [backward, reasoning, .]]

>> Noun Phrases are: 
[The second kind, the inference, �XP(X, reasoning, clausal  form, forward and backward reasoning]

>> Named Entities are: 
[('second', 'ORDINAL')] 

------------------- Sentence 3 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 113 =================================

As we have seen, in natural language, there are many  ways of expressing the same information. Similarly in FOL,  there are infinitely many, arbitrarily complex ways of ex- pressing information equivalently.  For example, to express  

------------------- Sentence 1 -------------------

As we have seen, in natural language, there are many  ways of expressing the same information. 


>> Tokens are: 
[seen, ,, natural, language, ,,  , ways, expressing, information, .] 

>> PoS Tags are: 
[('seen', 'VERB'), (',', 'PUNCT'), ('natural', 'ADJ'), ('language', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('ways', 'NOUN'), ('expressing', 'VERB'), ('information', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('seen', 'advcl'), (',', 'punct'), ('natural', 'amod'), ('language', 'pobj'), (',', 'punct'), (' ', 'nummod'), ('ways', 'attr'), ('expressing', 'pcomp'), ('information', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[seen, ,], [,, natural], [natural, language], [language, ,], [,,  ], [ , ways], [ways, expressing], [expressing, information], [information, .]]

>> Trigrams: 
[[seen, ,, natural], [,, natural, language], [natural, language, ,], [language, ,,  ], [,,  , ways], [ , ways, expressing], [ways, expressing, information], [expressing, information, .]]

>> Noun Phrases are: 
[we, natural language, many  ways, the same information]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Similarly in FOL,  there are infinitely many, arbitrarily complex ways of ex- pressing information equivalently. 


>> Tokens are: 
[Similarly, FOL, ,,  , infinitely, ,, arbitrarily, complex, ways, ex-, pressing, information, equivalently, .] 

>> PoS Tags are: 
[('Similarly', 'ADV'), ('FOL', 'PROPN'), (',', 'PUNCT'), (' ', 'SPACE'), ('infinitely', 'ADV'), (',', 'PUNCT'), ('arbitrarily', 'ADV'), ('complex', 'ADJ'), ('ways', 'NOUN'), ('ex-', 'NOUN'), ('pressing', 'VERB'), ('information', 'NOUN'), ('equivalently', 'ADV'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Similarly', 'advmod'), ('FOL', 'pobj'), (',', 'punct'), (' ', 'nsubj'), ('infinitely', 'advmod'), (',', 'punct'), ('arbitrarily', 'advmod'), ('complex', 'amod'), ('ways', 'attr'), ('ex-', 'npadvmod'), ('pressing', 'amod'), ('information', 'pobj'), ('equivalently', 'advmod'), ('.', 'punct')]

>> Bigrams: 
[[Similarly, FOL], [FOL, ,], [,,  ], [ , infinitely], [infinitely, ,], [,, arbitrarily], [arbitrarily, complex], [complex, ways], [ways, ex-], [ex-, pressing], [pressing, information], [information, equivalently], [equivalently, .]]

>> Trigrams: 
[[Similarly, FOL, ,], [FOL, ,,  ], [,,  , infinitely], [ , infinitely, ,], [infinitely, ,, arbitrarily], [,, arbitrarily, complex], [arbitrarily, complex, ways], [complex, ways, ex-], [ways, ex-, pressing], [ex-, pressing, information], [pressing, information, equivalently], [information, equivalently, .]]

>> Noun Phrases are: 
[FOL, infinitely many, arbitrarily complex ways, ex- pressing information]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

For example, to express   


>> Tokens are: 
[example, ,, express,  ] 

>> PoS Tags are: 
[('example', 'NOUN'), (',', 'PUNCT'), ('express', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('example', 'pobj'), (',', 'punct'), ('express', 'ROOT'), (' ', 'dobj')]

>> Bigrams: 
[[example, ,], [,, express], [express,  ]]

>> Trigrams: 
[[example, ,, express], [,, express,  ]]

>> Noun Phrases are: 
[example]

>> Named Entities are: 
[] 


================================ Paragraph 114 =================================

14

------------------- Sentence 1 -------------------

14 


>> Tokens are: 
[14] 

>> PoS Tags are: 
[('14', 'NUM')] 

>> Dependency Tags are: 
[('14', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('14', 'CARDINAL')] 


================================ Paragraph 115 =================================

that all birds have feathers and john is a bird, we can write,  not only �X(bird(X)�feathers(X)) � bird(john), but also:     ¬(�X((¬feathers(X)�¬bird(john))�(bird(X)�¬bird(john)))).    In clausal form there is only one way of expressing the same  information canonically, in this example in the form of two  clauses: feathers(X) if bird(X) and bird(john).  

------------------- Sentence 1 -------------------

that all birds have feathers and john is a bird, we can write,  not only �X(bird(X)�feathers(X)) 


>> Tokens are: 
[birds, feathers, john, bird, ,, write, ,,  , �, X(bird(X), �, feathers(X, ), )] 

>> PoS Tags are: 
[('birds', 'NOUN'), ('feathers', 'NOUN'), ('john', 'NOUN'), ('bird', 'NOUN'), (',', 'PUNCT'), ('write', 'VERB'), (',', 'PUNCT'), (' ', 'SPACE'), ('�', 'PROPN'), ('X(bird(X)', 'PROPN'), ('�', 'PROPN'), ('feathers(X', 'NUM'), (')', 'PUNCT'), (')', 'PUNCT')] 

>> Dependency Tags are: 
[('birds', 'nsubj'), ('feathers', 'dobj'), ('john', 'conj'), ('bird', 'attr'), (',', 'punct'), ('write', 'ROOT'), (',', 'punct'), (' ', 'dep'), ('�', 'dep'), ('X(bird(X)', 'punct'), ('�', 'appos'), ('feathers(X', 'nummod'), (')', 'punct'), (')', 'punct')]

>> Bigrams: 
[[birds, feathers], [feathers, john], [john, bird], [bird, ,], [,, write], [write, ,], [,,  ], [ , �], [�, X(bird(X)], [X(bird(X), �], [�, feathers(X], [feathers(X, )], [), )]]

>> Trigrams: 
[[birds, feathers, john], [feathers, john, bird], [john, bird, ,], [bird, ,, write], [,, write, ,], [write, ,,  ], [,,  , �], [ , �, X(bird(X)], [�, X(bird(X), �], [X(bird(X), �, feathers(X], [�, feathers(X, )], [feathers(X, ), )]]

>> Noun Phrases are: 
[all birds, feathers, john, a bird, we, �]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

� bird(john), but also:     ¬(�X((¬feathers(X)�¬bird(john))�(bird(X)�¬bird(john)))). 


>> Tokens are: 
[�, bird(john, ), ,, :,     , ¬(, �, X((¬feathers(X), �, ¬bird(john)), �, (bird(X), �, ¬bird(john, ), ), ), ), .] 

>> PoS Tags are: 
[('�', 'PROPN'), ('bird(john', 'PROPN'), (')', 'PUNCT'), (',', 'PUNCT'), (':', 'PUNCT'), ('    ', 'SPACE'), ('¬(', 'PROPN'), ('�', 'PROPN'), ('X((¬feathers(X)', 'PROPN'), ('�', 'PROPN'), ('¬bird(john))', 'PROPN'), ('�', 'PROPN'), ('(bird(X)', 'X'), ('�', 'PROPN'), ('¬bird(john', 'PROPN'), (')', 'PUNCT'), (')', 'PUNCT'), (')', 'PUNCT'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('�', 'compound'), ('bird(john', 'ROOT'), (')', 'punct'), (',', 'punct'), (':', 'punct'), ('    ', 'compound'), ('¬(', 'compound'), ('�', 'nmod'), ('X((¬feathers(X)', 'punct'), ('�', 'nmod'), ('¬bird(john))', 'compound'), ('�', 'compound'), ('(bird(X)', 'appos'), ('�', 'appos'), ('¬bird(john', 'appos'), (')', 'punct'), (')', 'punct'), (')', 'punct'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[�, bird(john], [bird(john, )], [), ,], [,, :], [:,     ], [    , ¬(], [¬(, �], [�, X((¬feathers(X)], [X((¬feathers(X), �], [�, ¬bird(john))], [¬bird(john)), �], [�, (bird(X)], [(bird(X), �], [�, ¬bird(john], [¬bird(john, )], [), )], [), )], [), )], [), .]]

>> Trigrams: 
[[�, bird(john, )], [bird(john, ), ,], [), ,, :], [,, :,     ], [:,     , ¬(], [    , ¬(, �], [¬(, �, X((¬feathers(X)], [�, X((¬feathers(X), �], [X((¬feathers(X), �, ¬bird(john))], [�, ¬bird(john)), �], [¬bird(john)), �, (bird(X)], [�, (bird(X), �], [(bird(X), �, ¬bird(john], [�, ¬bird(john, )], [¬bird(john, ), )], [), ), )], [), ), )], [), ), .]]

>> Noun Phrases are: 
[� bird(john, �, ¬bird(john]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

    


>> Tokens are: 
[   ] 

>> PoS Tags are: 
[('   ', 'SPACE')] 

>> Dependency Tags are: 
[('   ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

In clausal form there is only one way of expressing the same  information canonically, in this example in the form of two  clauses: feathers(X) if bird(X) and bird(john). 


>> Tokens are: 
[clausal, form, way, expressing,  , information, canonically, ,, example, form,  , clauses, :, feathers(X, ), bird(X, ), bird(john, ), .] 

>> PoS Tags are: 
[('clausal', 'NOUN'), ('form', 'NOUN'), ('way', 'NOUN'), ('expressing', 'VERB'), (' ', 'SPACE'), ('information', 'NOUN'), ('canonically', 'ADV'), (',', 'PUNCT'), ('example', 'NOUN'), ('form', 'NOUN'), (' ', 'SPACE'), ('clauses', 'NOUN'), (':', 'PUNCT'), ('feathers(X', 'X'), (')', 'PUNCT'), ('bird(X', 'PROPN'), (')', 'PUNCT'), ('bird(john', 'PROPN'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('clausal', 'compound'), ('form', 'pobj'), ('way', 'attr'), ('expressing', 'pcomp'), (' ', 'compound'), ('information', 'dobj'), ('canonically', 'advmod'), (',', 'punct'), ('example', 'pobj'), ('form', 'pobj'), (' ', 'compound'), ('clauses', 'pobj'), (':', 'punct'), ('feathers(X', 'punct'), (')', 'punct'), ('bird(X', 'dep'), (')', 'punct'), ('bird(john', 'conj'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[clausal, form], [form, way], [way, expressing], [expressing,  ], [ , information], [information, canonically], [canonically, ,], [,, example], [example, form], [form,  ], [ , clauses], [clauses, :], [:, feathers(X], [feathers(X, )], [), bird(X], [bird(X, )], [), bird(john], [bird(john, )], [), .]]

>> Trigrams: 
[[clausal, form, way], [form, way, expressing], [way, expressing,  ], [expressing,  , information], [ , information, canonically], [information, canonically, ,], [canonically, ,, example], [,, example, form], [example, form,  ], [form,  , clauses], [ , clauses, :], [clauses, :, feathers(X], [:, feathers(X, )], [feathers(X, ), bird(X], [), bird(X, )], [bird(X, ), bird(john], [), bird(john, )], [bird(john, ), .]]

>> Noun Phrases are: 
[clausal form, only one way, the same  information, this example, the form, two  clauses, bird(john]

>> Named Entities are: 
[('two', 'CARDINAL')] 

------------------- Sentence 5 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 116 =================================

Thus clausal logic stands in relation to standard FOL, as  the LOT stands in relation to natural language. In the same  way that the LOT can be regarded as a simplified and ca- nonical form of unambiguous sentences in natural language,  clausal logic is a simplified, canonical form of FOL. This  analogy further supports the argument for viewing clausal  logic as a formalisation of the LOT.   

------------------- Sentence 1 -------------------

Thus clausal logic stands in relation to standard FOL, as  the LOT stands in relation to natural language. 


>> Tokens are: 
[clausal, logic, stands, relation, standard, FOL, ,,  , LOT, stands, relation, natural, language, .] 

>> PoS Tags are: 
[('clausal', 'NOUN'), ('logic', 'NOUN'), ('stands', 'VERB'), ('relation', 'NOUN'), ('standard', 'ADJ'), ('FOL', 'PROPN'), (',', 'PUNCT'), (' ', 'SPACE'), ('LOT', 'PROPN'), ('stands', 'VERB'), ('relation', 'NOUN'), ('natural', 'ADJ'), ('language', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('clausal', 'compound'), ('logic', 'nsubj'), ('stands', 'ROOT'), ('relation', 'pobj'), ('standard', 'amod'), ('FOL', 'pobj'), (',', 'punct'), (' ', 'pobj'), ('LOT', 'nsubj'), ('stands', 'advcl'), ('relation', 'pobj'), ('natural', 'amod'), ('language', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[clausal, logic], [logic, stands], [stands, relation], [relation, standard], [standard, FOL], [FOL, ,], [,,  ], [ , LOT], [LOT, stands], [stands, relation], [relation, natural], [natural, language], [language, .]]

>> Trigrams: 
[[clausal, logic, stands], [logic, stands, relation], [stands, relation, standard], [relation, standard, FOL], [standard, FOL, ,], [FOL, ,,  ], [,,  , LOT], [ , LOT, stands], [LOT, stands, relation], [stands, relation, natural], [relation, natural, language], [natural, language, .]]

>> Noun Phrases are: 
[clausal logic, relation, standard FOL, the LOT, relation, natural language]

>> Named Entities are: 
[('FOL', 'ORG'), ('LOT', 'ORG')] 

------------------- Sentence 2 -------------------

In the same  way that the LOT can be regarded as a simplified and ca- nonical form of unambiguous sentences in natural language,  clausal logic is a simplified, canonical form of FOL. 


>> Tokens are: 
[ , way, LOT, regarded, simplified, ca-, nonical, form, unambiguous, sentences, natural, language, ,,  , clausal, logic, simplified, ,, canonical, form, FOL, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('way', 'NOUN'), ('LOT', 'PROPN'), ('regarded', 'VERB'), ('simplified', 'ADJ'), ('ca-', 'VERB'), ('nonical', 'ADJ'), ('form', 'NOUN'), ('unambiguous', 'ADJ'), ('sentences', 'NOUN'), ('natural', 'ADJ'), ('language', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('clausal', 'NOUN'), ('logic', 'NOUN'), ('simplified', 'ADJ'), (',', 'PUNCT'), ('canonical', 'ADJ'), ('form', 'NOUN'), ('FOL', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'compound'), ('way', 'pobj'), ('LOT', 'nsubjpass'), ('regarded', 'ROOT'), ('simplified', 'amod'), ('ca-', 'conj'), ('nonical', 'amod'), ('form', 'pobj'), ('unambiguous', 'amod'), ('sentences', 'pobj'), ('natural', 'amod'), ('language', 'pobj'), (',', 'punct'), (' ', 'compound'), ('clausal', 'compound'), ('logic', 'nsubj'), ('simplified', 'amod'), (',', 'punct'), ('canonical', 'amod'), ('form', 'attr'), ('FOL', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[ , way], [way, LOT], [LOT, regarded], [regarded, simplified], [simplified, ca-], [ca-, nonical], [nonical, form], [form, unambiguous], [unambiguous, sentences], [sentences, natural], [natural, language], [language, ,], [,,  ], [ , clausal], [clausal, logic], [logic, simplified], [simplified, ,], [,, canonical], [canonical, form], [form, FOL], [FOL, .]]

>> Trigrams: 
[[ , way, LOT], [way, LOT, regarded], [LOT, regarded, simplified], [regarded, simplified, ca-], [simplified, ca-, nonical], [ca-, nonical, form], [nonical, form, unambiguous], [form, unambiguous, sentences], [unambiguous, sentences, natural], [sentences, natural, language], [natural, language, ,], [language, ,,  ], [,,  , clausal], [ , clausal, logic], [clausal, logic, simplified], [logic, simplified, ,], [simplified, ,, canonical], [,, canonical, form], [canonical, form, FOL], [form, FOL, .]]

>> Noun Phrases are: 
[the same  way, the LOT, a simplified and ca- nonical form, unambiguous sentences, natural language,  clausal logic, a simplified, canonical form, FOL]

>> Named Entities are: 
[('LOT', 'ORG')] 

------------------- Sentence 3 -------------------

This  analogy further supports the argument for viewing clausal  logic as a formalisation of the LOT. 


>> Tokens are: 
[ , analogy, supports, argument, viewing, clausal,  , logic, formalisation, LOT, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('analogy', 'NOUN'), ('supports', 'VERB'), ('argument', 'NOUN'), ('viewing', 'VERB'), ('clausal', 'NOUN'), (' ', 'SPACE'), ('logic', 'NOUN'), ('formalisation', 'NOUN'), ('LOT', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'compound'), ('analogy', 'nsubj'), ('supports', 'ROOT'), ('argument', 'dobj'), ('viewing', 'pcomp'), ('clausal', 'dobj'), (' ', 'punct'), ('logic', 'dobj'), ('formalisation', 'pobj'), ('LOT', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[ , analogy], [analogy, supports], [supports, argument], [argument, viewing], [viewing, clausal], [clausal,  ], [ , logic], [logic, formalisation], [formalisation, LOT], [LOT, .]]

>> Trigrams: 
[[ , analogy, supports], [analogy, supports, argument], [supports, argument, viewing], [argument, viewing, clausal], [viewing, clausal,  ], [clausal,  , logic], [ , logic, formalisation], [logic, formalisation, LOT], [formalisation, LOT, .]]

>> Noun Phrases are: 
[This  analogy, the argument, clausal, logic, a formalisation, the LOT]

>> Named Entities are: 
[('LOT', 'ORG')] 

------------------- Sentence 4 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 117 =================================

Certainly in the case of artificial agents in AI, clausal  logic has proved to be a practical knowledge representation  language, independent from any language an agent might  use for communicating with other agents. In the case of hu- man agents, clausal logic can also help people communicate  more effectively, by expressing their communications in a  form that is closer to the LOT.  

------------------- Sentence 1 -------------------

Certainly in the case of artificial agents in AI, clausal  logic has proved to be a practical knowledge representation  language, independent from any language an agent might  use for communicating with other agents. 


>> Tokens are: 
[Certainly, case, artificial, agents, AI, ,, clausal,  , logic, proved, practical, knowledge, representation,  , language, ,, independent, language, agent,  , use, communicating, agents, .] 

>> PoS Tags are: 
[('Certainly', 'ADV'), ('case', 'NOUN'), ('artificial', 'ADJ'), ('agents', 'NOUN'), ('AI', 'PROPN'), (',', 'PUNCT'), ('clausal', 'NOUN'), (' ', 'SPACE'), ('logic', 'NOUN'), ('proved', 'VERB'), ('practical', 'ADJ'), ('knowledge', 'NOUN'), ('representation', 'NOUN'), (' ', 'SPACE'), ('language', 'NOUN'), (',', 'PUNCT'), ('independent', 'ADJ'), ('language', 'NOUN'), ('agent', 'NOUN'), (' ', 'SPACE'), ('use', 'VERB'), ('communicating', 'VERB'), ('agents', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Certainly', 'advmod'), ('case', 'pobj'), ('artificial', 'amod'), ('agents', 'pobj'), ('AI', 'pobj'), (',', 'punct'), ('clausal', 'compound'), (' ', 'compound'), ('logic', 'nsubj'), ('proved', 'ROOT'), ('practical', 'amod'), ('knowledge', 'compound'), ('representation', 'attr'), (' ', 'compound'), ('language', 'appos'), (',', 'punct'), ('independent', 'amod'), ('language', 'pobj'), ('agent', 'nsubj'), (' ', 'nsubj'), ('use', 'relcl'), ('communicating', 'pobj'), ('agents', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Certainly, case], [case, artificial], [artificial, agents], [agents, AI], [AI, ,], [,, clausal], [clausal,  ], [ , logic], [logic, proved], [proved, practical], [practical, knowledge], [knowledge, representation], [representation,  ], [ , language], [language, ,], [,, independent], [independent, language], [language, agent], [agent,  ], [ , use], [use, communicating], [communicating, agents], [agents, .]]

>> Trigrams: 
[[Certainly, case, artificial], [case, artificial, agents], [artificial, agents, AI], [agents, AI, ,], [AI, ,, clausal], [,, clausal,  ], [clausal,  , logic], [ , logic, proved], [logic, proved, practical], [proved, practical, knowledge], [practical, knowledge, representation], [knowledge, representation,  ], [representation,  , language], [ , language, ,], [language, ,, independent], [,, independent, language], [independent, language, agent], [language, agent,  ], [agent,  , use], [ , use, communicating], [use, communicating, agents], [communicating, agents, .]]

>> Noun Phrases are: 
[the case, artificial agents, AI, a practical knowledge representation,  language, any language, an agent, other agents]

>> Named Entities are: 
[('AI', 'ORG')] 

------------------- Sentence 2 -------------------

In the case of hu- man agents, clausal logic can also help people communicate  more effectively, by expressing their communications in a  form that is closer to the LOT.   


>> Tokens are: 
[case, hu-, man, agents, ,, clausal, logic, help, people, communicate,  , effectively, ,, expressing, communications,  , form, closer, LOT, .,  ] 

>> PoS Tags are: 
[('case', 'NOUN'), ('hu-', 'NOUN'), ('man', 'NOUN'), ('agents', 'NOUN'), (',', 'PUNCT'), ('clausal', 'NOUN'), ('logic', 'NOUN'), ('help', 'VERB'), ('people', 'NOUN'), ('communicate', 'VERB'), (' ', 'SPACE'), ('effectively', 'ADV'), (',', 'PUNCT'), ('expressing', 'VERB'), ('communications', 'NOUN'), (' ', 'SPACE'), ('form', 'NOUN'), ('closer', 'ADJ'), ('LOT', 'PROPN'), ('.', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('case', 'pobj'), ('hu-', 'compound'), ('man', 'compound'), ('agents', 'pobj'), (',', 'punct'), ('clausal', 'compound'), ('logic', 'nsubj'), ('help', 'ROOT'), ('people', 'nsubj'), ('communicate', 'ccomp'), (' ', 'dobj'), ('effectively', 'advmod'), (',', 'punct'), ('expressing', 'pcomp'), ('communications', 'dobj'), (' ', 'compound'), ('form', 'pobj'), ('closer', 'acomp'), ('LOT', 'pobj'), ('.', 'punct'), (' ', 'dobj')]

>> Bigrams: 
[[case, hu-], [hu-, man], [man, agents], [agents, ,], [,, clausal], [clausal, logic], [logic, help], [help, people], [people, communicate], [communicate,  ], [ , effectively], [effectively, ,], [,, expressing], [expressing, communications], [communications,  ], [ , form], [form, closer], [closer, LOT], [LOT, .], [.,  ]]

>> Trigrams: 
[[case, hu-, man], [hu-, man, agents], [man, agents, ,], [agents, ,, clausal], [,, clausal, logic], [clausal, logic, help], [logic, help, people], [help, people, communicate], [people, communicate,  ], [communicate,  , effectively], [ , effectively, ,], [effectively, ,, expressing], [,, expressing, communications], [expressing, communications,  ], [communications,  , form], [ , form, closer], [form, closer, LOT], [closer, LOT, .], [LOT, .,  ]]

>> Noun Phrases are: 
[the case, hu- man agents, clausal logic, people, their communications, a  form, the LOT]

>> Named Entities are: 
[('LOT', 'ORG')] 


================================ Paragraph 118 =================================

Clausal logic can help people communicate more coher- ently, by helping them to link new information with old  information. This model of coherence exploits the fact that  clausal logic lends itself to a connectionist representation, in  which information is stored in a connection graph of goals  and beliefs [Kowalski, 1975, 1979, 2011].  

------------------- Sentence 1 -------------------

Clausal logic can help people communicate more coher- ently, by helping them to link new information with old  information. 


>> Tokens are: 
[Clausal, logic, help, people, communicate, coher-, ently, ,, helping, link, new, information, old,  , information, .] 

>> PoS Tags are: 
[('Clausal', 'NOUN'), ('logic', 'NOUN'), ('help', 'VERB'), ('people', 'NOUN'), ('communicate', 'VERB'), ('coher-', 'ADJ'), ('ently', 'ADV'), (',', 'PUNCT'), ('helping', 'VERB'), ('link', 'VERB'), ('new', 'ADJ'), ('information', 'NOUN'), ('old', 'ADJ'), (' ', 'SPACE'), ('information', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Clausal', 'compound'), ('logic', 'nsubj'), ('help', 'ROOT'), ('people', 'nsubj'), ('communicate', 'ccomp'), ('coher-', 'dobj'), ('ently', 'advmod'), (',', 'punct'), ('helping', 'pcomp'), ('link', 'ccomp'), ('new', 'amod'), ('information', 'dobj'), ('old', 'amod'), (' ', 'compound'), ('information', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Clausal, logic], [logic, help], [help, people], [people, communicate], [communicate, coher-], [coher-, ently], [ently, ,], [,, helping], [helping, link], [link, new], [new, information], [information, old], [old,  ], [ , information], [information, .]]

>> Trigrams: 
[[Clausal, logic, help], [logic, help, people], [help, people, communicate], [people, communicate, coher-], [communicate, coher-, ently], [coher-, ently, ,], [ently, ,, helping], [,, helping, link], [helping, link, new], [link, new, information], [new, information, old], [information, old,  ], [old,  , information], [ , information, .]]

>> Noun Phrases are: 
[Clausal logic, people, them, new information, old  information]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

This model of coherence exploits the fact that  clausal logic lends itself to a connectionist representation, in  which information is stored in a connection graph of goals  and beliefs [Kowalski, 1975, 1979, 2011]. 


>> Tokens are: 
[model, coherence, exploits, fact,  , clausal, logic, lends, connectionist, representation, ,,  , information, stored, connection, graph, goals,  , beliefs, [, Kowalski, ,, 1975, ,, 1979, ,, 2011, ], .] 

>> PoS Tags are: 
[('model', 'NOUN'), ('coherence', 'NOUN'), ('exploits', 'VERB'), ('fact', 'NOUN'), (' ', 'SPACE'), ('clausal', 'NOUN'), ('logic', 'NOUN'), ('lends', 'VERB'), ('connectionist', 'ADJ'), ('representation', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('information', 'NOUN'), ('stored', 'VERB'), ('connection', 'NOUN'), ('graph', 'NOUN'), ('goals', 'NOUN'), (' ', 'SPACE'), ('beliefs', 'NOUN'), ('[', 'PUNCT'), ('Kowalski', 'PROPN'), (',', 'PUNCT'), ('1975', 'NUM'), (',', 'PUNCT'), ('1979', 'NUM'), (',', 'PUNCT'), ('2011', 'NUM'), (']', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('model', 'nsubj'), ('coherence', 'pobj'), ('exploits', 'ROOT'), ('fact', 'dobj'), (' ', 'compound'), ('clausal', 'compound'), ('logic', 'nsubj'), ('lends', 'acl'), ('connectionist', 'amod'), ('representation', 'pobj'), (',', 'punct'), (' ', 'pobj'), ('information', 'nsubjpass'), ('stored', 'acl'), ('connection', 'compound'), ('graph', 'pobj'), ('goals', 'pobj'), (' ', 'appos'), ('beliefs', 'conj'), ('[', 'punct'), ('Kowalski', 'npadvmod'), (',', 'punct'), ('1975', 'appos'), (',', 'punct'), ('1979', 'conj'), (',', 'punct'), ('2011', 'nummod'), (']', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[model, coherence], [coherence, exploits], [exploits, fact], [fact,  ], [ , clausal], [clausal, logic], [logic, lends], [lends, connectionist], [connectionist, representation], [representation, ,], [,,  ], [ , information], [information, stored], [stored, connection], [connection, graph], [graph, goals], [goals,  ], [ , beliefs], [beliefs, [], [[, Kowalski], [Kowalski, ,], [,, 1975], [1975, ,], [,, 1979], [1979, ,], [,, 2011], [2011, ]], [], .]]

>> Trigrams: 
[[model, coherence, exploits], [coherence, exploits, fact], [exploits, fact,  ], [fact,  , clausal], [ , clausal, logic], [clausal, logic, lends], [logic, lends, connectionist], [lends, connectionist, representation], [connectionist, representation, ,], [representation, ,,  ], [,,  , information], [ , information, stored], [information, stored, connection], [stored, connection, graph], [connection, graph, goals], [graph, goals,  ], [goals,  , beliefs], [ , beliefs, [], [beliefs, [, Kowalski], [[, Kowalski, ,], [Kowalski, ,, 1975], [,, 1975, ,], [1975, ,, 1979], [,, 1979, ,], [1979, ,, 2011], [,, 2011, ]], [2011, ], .]]

>> Noun Phrases are: 
[This model, coherence, the fact,  clausal logic, itself, a connectionist representation, which information, a connection graph, goals, beliefs]

>> Named Entities are: 
[('Kowalski', 'PERSON'), ('1975', 'DATE'), ('1979', 'DATE'), ('2011', 'DATE')] 

------------------- Sentence 3 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 119 =================================

4 A Connectionist Form of Clausal Logic   

------------------- Sentence 1 -------------------

4 A Connectionist Form of Clausal Logic    


>> Tokens are: 
[4, Connectionist, Form, Clausal, Logic,   ] 

>> PoS Tags are: 
[('4', 'NUM'), ('Connectionist', 'PROPN'), ('Form', 'PROPN'), ('Clausal', 'PROPN'), ('Logic', 'PROPN'), ('  ', 'SPACE')] 

>> Dependency Tags are: 
[('4', 'nummod'), ('Connectionist', 'compound'), ('Form', 'ROOT'), ('Clausal', 'compound'), ('Logic', 'pobj'), ('  ', 'appos')]

>> Bigrams: 
[[4, Connectionist], [Connectionist, Form], [Form, Clausal], [Clausal, Logic], [Logic,   ]]

>> Trigrams: 
[[4, Connectionist, Form], [Connectionist, Form, Clausal], [Form, Clausal, Logic], [Clausal, Logic,   ]]

>> Noun Phrases are: 
[4 A Connectionist Form, Clausal Logic]

>> Named Entities are: 
[('4', 'CARDINAL')] 


================================ Paragraph 120 =================================

Similar to the way that clausal logic implements FOL, by  first converting sentences into canonical form, the connec- tion graph proof procedure implements clausal logic, by pre- computing links between conditions and conclusions, and  by labeling links with their unifying substitutions. These  links can then be activated later, either forwards or back- wards, as and when the need arises. Links that are activated  frequently can be compiled into shortcuts, which achieve the  same effects more directly, in the manner of heuristic rules  and stimulus-response associations.  

------------------- Sentence 1 -------------------

Similar to the way that clausal logic implements FOL, by  first converting sentences into canonical form, the connec- tion graph proof procedure implements clausal logic, by pre- computing links between conditions and conclusions, and  by labeling links with their unifying substitutions. 


>> Tokens are: 
[Similar, way, clausal, logic, implements, FOL, ,,  , converting, sentences, canonical, form, ,, connec-, tion, graph, proof, procedure, implements, clausal, logic, ,, pre-, computing, links, conditions, conclusions, ,,  , labeling, links, unifying, substitutions, .] 

>> PoS Tags are: 
[('Similar', 'ADJ'), ('way', 'NOUN'), ('clausal', 'VERB'), ('logic', 'NOUN'), ('implements', 'VERB'), ('FOL', 'PROPN'), (',', 'PUNCT'), (' ', 'SPACE'), ('converting', 'VERB'), ('sentences', 'NOUN'), ('canonical', 'ADJ'), ('form', 'NOUN'), (',', 'PUNCT'), ('connec-', 'PROPN'), ('tion', 'NOUN'), ('graph', 'NOUN'), ('proof', 'NOUN'), ('procedure', 'NOUN'), ('implements', 'NOUN'), ('clausal', 'NOUN'), ('logic', 'NOUN'), (',', 'PUNCT'), ('pre-', 'ADJ'), ('computing', 'NOUN'), ('links', 'NOUN'), ('conditions', 'NOUN'), ('conclusions', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('labeling', 'VERB'), ('links', 'NOUN'), ('unifying', 'ADJ'), ('substitutions', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Similar', 'ROOT'), ('way', 'pobj'), ('clausal', 'relcl'), ('logic', 'compound'), ('implements', 'dobj'), ('FOL', 'dobj'), (',', 'punct'), (' ', 'pobj'), ('converting', 'advcl'), ('sentences', 'dobj'), ('canonical', 'amod'), ('form', 'pobj'), (',', 'punct'), ('connec-', 'compound'), ('tion', 'compound'), ('graph', 'compound'), ('proof', 'amod'), ('procedure', 'compound'), ('implements', 'compound'), ('clausal', 'compound'), ('logic', 'dobj'), (',', 'punct'), ('pre-', 'amod'), ('computing', 'compound'), ('links', 'pobj'), ('conditions', 'pobj'), ('conclusions', 'conj'), (',', 'punct'), (' ', 'conj'), ('labeling', 'pcomp'), ('links', 'dobj'), ('unifying', 'amod'), ('substitutions', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Similar, way], [way, clausal], [clausal, logic], [logic, implements], [implements, FOL], [FOL, ,], [,,  ], [ , converting], [converting, sentences], [sentences, canonical], [canonical, form], [form, ,], [,, connec-], [connec-, tion], [tion, graph], [graph, proof], [proof, procedure], [procedure, implements], [implements, clausal], [clausal, logic], [logic, ,], [,, pre-], [pre-, computing], [computing, links], [links, conditions], [conditions, conclusions], [conclusions, ,], [,,  ], [ , labeling], [labeling, links], [links, unifying], [unifying, substitutions], [substitutions, .]]

>> Trigrams: 
[[Similar, way, clausal], [way, clausal, logic], [clausal, logic, implements], [logic, implements, FOL], [implements, FOL, ,], [FOL, ,,  ], [,,  , converting], [ , converting, sentences], [converting, sentences, canonical], [sentences, canonical, form], [canonical, form, ,], [form, ,, connec-], [,, connec-, tion], [connec-, tion, graph], [tion, graph, proof], [graph, proof, procedure], [proof, procedure, implements], [procedure, implements, clausal], [implements, clausal, logic], [clausal, logic, ,], [logic, ,, pre-], [,, pre-, computing], [pre-, computing, links], [computing, links, conditions], [links, conditions, conclusions], [conditions, conclusions, ,], [conclusions, ,,  ], [,,  , labeling], [ , labeling, links], [labeling, links, unifying], [links, unifying, substitutions], [unifying, substitutions, .]]

>> Noun Phrases are: 
[the way, FOL, sentences, canonical form, the connec- tion graph proof procedure implements clausal logic, pre- computing links, conditions, conclusions, links, their unifying substitutions]

>> Named Entities are: 
[('first', 'ORDINAL')] 

------------------- Sentence 2 -------------------

These  links can then be activated later, either forwards or back- wards, as and when the need arises. 


>> Tokens are: 
[ , links, activated, later, ,, forwards, back-, wards, ,, need, arises, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('links', 'NOUN'), ('activated', 'VERB'), ('later', 'ADV'), (',', 'PUNCT'), ('forwards', 'ADV'), ('back-', 'ADJ'), ('wards', 'NOUN'), (',', 'PUNCT'), ('need', 'NOUN'), ('arises', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'compound'), ('links', 'nsubjpass'), ('activated', 'ROOT'), ('later', 'advmod'), (',', 'punct'), ('forwards', 'advmod'), ('back-', 'amod'), ('wards', 'conj'), (',', 'punct'), ('need', 'nsubj'), ('arises', 'advcl'), ('.', 'punct')]

>> Bigrams: 
[[ , links], [links, activated], [activated, later], [later, ,], [,, forwards], [forwards, back-], [back-, wards], [wards, ,], [,, need], [need, arises], [arises, .]]

>> Trigrams: 
[[ , links, activated], [links, activated, later], [activated, later, ,], [later, ,, forwards], [,, forwards, back-], [forwards, back-, wards], [back-, wards, ,], [wards, ,, need], [,, need, arises], [need, arises, .]]

>> Noun Phrases are: 
[These  links, the need]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

Links that are activated  frequently can be compiled into shortcuts, which achieve the  same effects more directly, in the manner of heuristic rules  and stimulus-response associations. 


>> Tokens are: 
[Links, activated,  , frequently, compiled, shortcuts, ,, achieve,  , effects, directly, ,, manner, heuristic, rules,  , stimulus, -, response, associations, .] 

>> PoS Tags are: 
[('Links', 'NOUN'), ('activated', 'VERB'), (' ', 'SPACE'), ('frequently', 'ADV'), ('compiled', 'VERB'), ('shortcuts', 'NOUN'), (',', 'PUNCT'), ('achieve', 'VERB'), (' ', 'SPACE'), ('effects', 'NOUN'), ('directly', 'ADV'), (',', 'PUNCT'), ('manner', 'NOUN'), ('heuristic', 'ADJ'), ('rules', 'NOUN'), (' ', 'SPACE'), ('stimulus', 'NOUN'), ('-', 'PUNCT'), ('response', 'NOUN'), ('associations', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Links', 'nsubjpass'), ('activated', 'relcl'), (' ', 'dobj'), ('frequently', 'advmod'), ('compiled', 'ROOT'), ('shortcuts', 'pobj'), (',', 'punct'), ('achieve', 'relcl'), (' ', 'amod'), ('effects', 'dobj'), ('directly', 'advmod'), (',', 'punct'), ('manner', 'pobj'), ('heuristic', 'amod'), ('rules', 'pobj'), (' ', 'dobj'), ('stimulus', 'amod'), ('-', 'punct'), ('response', 'compound'), ('associations', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[Links, activated], [activated,  ], [ , frequently], [frequently, compiled], [compiled, shortcuts], [shortcuts, ,], [,, achieve], [achieve,  ], [ , effects], [effects, directly], [directly, ,], [,, manner], [manner, heuristic], [heuristic, rules], [rules,  ], [ , stimulus], [stimulus, -], [-, response], [response, associations], [associations, .]]

>> Trigrams: 
[[Links, activated,  ], [activated,  , frequently], [ , frequently, compiled], [frequently, compiled, shortcuts], [compiled, shortcuts, ,], [shortcuts, ,, achieve], [,, achieve,  ], [achieve,  , effects], [ , effects, directly], [effects, directly, ,], [directly, ,, manner], [,, manner, heuristic], [manner, heuristic, rules], [heuristic, rules,  ], [rules,  , stimulus], [ , stimulus, -], [stimulus, -, response], [-, response, associations], [response, associations, .]]

>> Noun Phrases are: 
[Links, shortcuts, the  same effects, the manner, heuristic rules, stimulus-response associations]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 121 =================================

Although clausal logic is a symbolic representation, once  all the links and their unifying substitutions have been com- puted, the names of the predicate symbols no longer matter.  All further reasoning can be reduced to the activation of the  links, and to the generation of new clauses, whose new links  are inherited from the links of their parent clauses. In many  cases, parent clauses can be deleted or over-written, when  all their links have been activated.  

------------------- Sentence 1 -------------------

Although clausal logic is a symbolic representation, once  all the links and their unifying substitutions have been com- puted, the names of the predicate symbols no longer matter. 


>> Tokens are: 
[clausal, logic, symbolic, representation, ,,  , links, unifying, substitutions, com-, puted, ,, names, predicate, symbols, longer, matter, .] 

>> PoS Tags are: 
[('clausal', 'NOUN'), ('logic', 'NOUN'), ('symbolic', 'ADJ'), ('representation', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('links', 'NOUN'), ('unifying', 'ADJ'), ('substitutions', 'NOUN'), ('com-', 'NOUN'), ('puted', 'VERB'), (',', 'PUNCT'), ('names', 'NOUN'), ('predicate', 'NOUN'), ('symbols', 'NOUN'), ('longer', 'ADV'), ('matter', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('clausal', 'compound'), ('logic', 'nsubj'), ('symbolic', 'amod'), ('representation', 'attr'), (',', 'punct'), (' ', 'advcl'), ('links', 'dobj'), ('unifying', 'amod'), ('substitutions', 'conj'), ('com-', 'dep'), ('puted', 'conj'), (',', 'punct'), ('names', 'nsubj'), ('predicate', 'compound'), ('symbols', 'pobj'), ('longer', 'advmod'), ('matter', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[clausal, logic], [logic, symbolic], [symbolic, representation], [representation, ,], [,,  ], [ , links], [links, unifying], [unifying, substitutions], [substitutions, com-], [com-, puted], [puted, ,], [,, names], [names, predicate], [predicate, symbols], [symbols, longer], [longer, matter], [matter, .]]

>> Trigrams: 
[[clausal, logic, symbolic], [logic, symbolic, representation], [symbolic, representation, ,], [representation, ,,  ], [,,  , links], [ , links, unifying], [links, unifying, substitutions], [unifying, substitutions, com-], [substitutions, com-, puted], [com-, puted, ,], [puted, ,, names], [,, names, predicate], [names, predicate, symbols], [predicate, symbols, longer], [symbols, longer, matter], [longer, matter, .]]

>> Noun Phrases are: 
[clausal logic, a symbolic representation, all the links, their unifying substitutions, the names, the predicate symbols]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

All further reasoning can be reduced to the activation of the  links, and to the generation of new clauses, whose new links  are inherited from the links of their parent clauses. 


>> Tokens are: 
[reasoning, reduced, activation,  , links, ,, generation, new, clauses, ,, new, links,  , inherited, links, parent, clauses, .] 

>> PoS Tags are: 
[('reasoning', 'NOUN'), ('reduced', 'VERB'), ('activation', 'NOUN'), (' ', 'SPACE'), ('links', 'NOUN'), (',', 'PUNCT'), ('generation', 'NOUN'), ('new', 'ADJ'), ('clauses', 'NOUN'), (',', 'PUNCT'), ('new', 'ADJ'), ('links', 'NOUN'), (' ', 'SPACE'), ('inherited', 'VERB'), ('links', 'NOUN'), ('parent', 'NOUN'), ('clauses', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('reasoning', 'nsubjpass'), ('reduced', 'ROOT'), ('activation', 'pobj'), (' ', 'compound'), ('links', 'pobj'), (',', 'punct'), ('generation', 'pobj'), ('new', 'amod'), ('clauses', 'pobj'), (',', 'punct'), ('new', 'amod'), ('links', 'nsubjpass'), (' ', 'nsubjpass'), ('inherited', 'relcl'), ('links', 'pobj'), ('parent', 'compound'), ('clauses', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[reasoning, reduced], [reduced, activation], [activation,  ], [ , links], [links, ,], [,, generation], [generation, new], [new, clauses], [clauses, ,], [,, new], [new, links], [links,  ], [ , inherited], [inherited, links], [links, parent], [parent, clauses], [clauses, .]]

>> Trigrams: 
[[reasoning, reduced, activation], [reduced, activation,  ], [activation,  , links], [ , links, ,], [links, ,, generation], [,, generation, new], [generation, new, clauses], [new, clauses, ,], [clauses, ,, new], [,, new, links], [new, links,  ], [links,  , inherited], [ , inherited, links], [inherited, links, parent], [links, parent, clauses], [parent, clauses, .]]

>> Noun Phrases are: 
[All further reasoning, the activation, the  links, the generation, new clauses, whose new links, the links, their parent clauses]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

In many  cases, parent clauses can be deleted or over-written, when  all their links have been activated. 


>> Tokens are: 
[ , cases, ,, parent, clauses, deleted, -, written, ,,  , links, activated, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('cases', 'NOUN'), (',', 'PUNCT'), ('parent', 'NOUN'), ('clauses', 'NOUN'), ('deleted', 'VERB'), ('-', 'PUNCT'), ('written', 'VERB'), (',', 'PUNCT'), (' ', 'SPACE'), ('links', 'NOUN'), ('activated', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'nummod'), ('cases', 'pobj'), (',', 'punct'), ('parent', 'compound'), ('clauses', 'nsubjpass'), ('deleted', 'ROOT'), ('-', 'punct'), ('written', 'conj'), (',', 'punct'), (' ', 'nsubjpass'), ('links', 'appos'), ('activated', 'advcl'), ('.', 'punct')]

>> Bigrams: 
[[ , cases], [cases, ,], [,, parent], [parent, clauses], [clauses, deleted], [deleted, -], [-, written], [written, ,], [,,  ], [ , links], [links, activated], [activated, .]]

>> Trigrams: 
[[ , cases, ,], [cases, ,, parent], [,, parent, clauses], [parent, clauses, deleted], [clauses, deleted, -], [deleted, -, written], [-, written, ,], [written, ,,  ], [,,  , links], [ , links, activated], [links, activated, .]]

>> Noun Phrases are: 
[many  cases, parent clauses, all their links]

>> Named Entities are: 
[] 

------------------- Sentence 5 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 122 =================================

Any link can be selected for activation at any time. But  most of the time, it makes sense to activate links only when  new clauses are added to the graph as the result of new ob- servations, including observations of communications.  

------------------- Sentence 1 -------------------

Any link can be selected for activation at any time. 


>> Tokens are: 
[link, selected, activation, time, .] 

>> PoS Tags are: 
[('link', 'NOUN'), ('selected', 'VERB'), ('activation', 'NOUN'), ('time', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('link', 'nsubjpass'), ('selected', 'ROOT'), ('activation', 'pobj'), ('time', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[link, selected], [selected, activation], [activation, time], [time, .]]

>> Trigrams: 
[[link, selected, activation], [selected, activation, time], [activation, time, .]]

>> Noun Phrases are: 
[Any link, activation, any time]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

But  most of the time, it makes sense to activate links only when  new clauses are added to the graph as the result of new ob- servations, including observations of communications. 


>> Tokens are: 
[ , time, ,, makes, sense, activate, links,  , new, clauses, added, graph, result, new, ob-, servations, ,, including, observations, communications, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('time', 'NOUN'), (',', 'PUNCT'), ('makes', 'VERB'), ('sense', 'NOUN'), ('activate', 'VERB'), ('links', 'NOUN'), (' ', 'SPACE'), ('new', 'ADJ'), ('clauses', 'NOUN'), ('added', 'VERB'), ('graph', 'NOUN'), ('result', 'NOUN'), ('new', 'ADJ'), ('ob-', 'NOUN'), ('servations', 'NOUN'), (',', 'PUNCT'), ('including', 'VERB'), ('observations', 'NOUN'), ('communications', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'meta'), ('time', 'pobj'), (',', 'punct'), ('makes', 'ROOT'), ('sense', 'dobj'), ('activate', 'xcomp'), ('links', 'dobj'), (' ', 'nmod'), ('new', 'amod'), ('clauses', 'nsubjpass'), ('added', 'advcl'), ('graph', 'pobj'), ('result', 'pobj'), ('new', 'amod'), ('ob-', 'compound'), ('servations', 'pobj'), (',', 'punct'), ('including', 'prep'), ('observations', 'pobj'), ('communications', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[ , time], [time, ,], [,, makes], [makes, sense], [sense, activate], [activate, links], [links,  ], [ , new], [new, clauses], [clauses, added], [added, graph], [graph, result], [result, new], [new, ob-], [ob-, servations], [servations, ,], [,, including], [including, observations], [observations, communications], [communications, .]]

>> Trigrams: 
[[ , time, ,], [time, ,, makes], [,, makes, sense], [makes, sense, activate], [sense, activate, links], [activate, links,  ], [links,  , new], [ , new, clauses], [new, clauses, added], [clauses, added, graph], [added, graph, result], [graph, result, new], [result, new, ob-], [new, ob-, servations], [ob-, servations, ,], [servations, ,, including], [,, including, observations], [including, observations, communications], [observations, communications, .]]

>> Noun Phrases are: 
[the time, it, sense, links,  new clauses, the graph, the result, new ob- servations, observations, communications]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 123 =================================

The activation of links can be guided by assigning differ- ent strengths to different observations and goals, reflecting  their relative importance (or utility). In addition, different  weights can be assigned to different links, reflecting statisti- cal information about how often their activation has con- tributed to useful outcomes in the past.   

------------------- Sentence 1 -------------------

The activation of links can be guided by assigning differ- ent strengths to different observations and goals, reflecting  their relative importance (or utility). 


>> Tokens are: 
[activation, links, guided, assigning, differ-, ent, strengths, different, observations, goals, ,, reflecting,  , relative, importance, (, utility, ), .] 

>> PoS Tags are: 
[('activation', 'NOUN'), ('links', 'NOUN'), ('guided', 'VERB'), ('assigning', 'VERB'), ('differ-', 'ADJ'), ('ent', 'NOUN'), ('strengths', 'NOUN'), ('different', 'ADJ'), ('observations', 'NOUN'), ('goals', 'NOUN'), (',', 'PUNCT'), ('reflecting', 'VERB'), (' ', 'SPACE'), ('relative', 'ADJ'), ('importance', 'NOUN'), ('(', 'PUNCT'), ('utility', 'NOUN'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('activation', 'nsubjpass'), ('links', 'pobj'), ('guided', 'ROOT'), ('assigning', 'pcomp'), ('differ-', 'amod'), ('ent', 'compound'), ('strengths', 'dobj'), ('different', 'amod'), ('observations', 'pobj'), ('goals', 'conj'), (',', 'punct'), ('reflecting', 'advcl'), (' ', 'dobj'), ('relative', 'amod'), ('importance', 'pobj'), ('(', 'punct'), ('utility', 'conj'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[activation, links], [links, guided], [guided, assigning], [assigning, differ-], [differ-, ent], [ent, strengths], [strengths, different], [different, observations], [observations, goals], [goals, ,], [,, reflecting], [reflecting,  ], [ , relative], [relative, importance], [importance, (], [(, utility], [utility, )], [), .]]

>> Trigrams: 
[[activation, links, guided], [links, guided, assigning], [guided, assigning, differ-], [assigning, differ-, ent], [differ-, ent, strengths], [ent, strengths, different], [strengths, different, observations], [different, observations, goals], [observations, goals, ,], [goals, ,, reflecting], [,, reflecting,  ], [reflecting,  , relative], [ , relative, importance], [relative, importance, (], [importance, (, utility], [(, utility, )], [utility, ), .]]

>> Noun Phrases are: 
[The activation, links, differ- ent strengths, different observations, goals, their relative importance, utility]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

In addition, different  weights can be assigned to different links, reflecting statisti- cal information about how often their activation has con- tributed to useful outcomes in the past. 


>> Tokens are: 
[addition, ,, different,  , weights, assigned, different, links, ,, reflecting, statisti-, cal, information, activation, con-, tributed, useful, outcomes, past, .] 

>> PoS Tags are: 
[('addition', 'NOUN'), (',', 'PUNCT'), ('different', 'ADJ'), (' ', 'SPACE'), ('weights', 'NOUN'), ('assigned', 'VERB'), ('different', 'ADJ'), ('links', 'NOUN'), (',', 'PUNCT'), ('reflecting', 'VERB'), ('statisti-', 'NOUN'), ('cal', 'NOUN'), ('information', 'NOUN'), ('activation', 'NOUN'), ('con-', 'ADV'), ('tributed', 'VERB'), ('useful', 'ADJ'), ('outcomes', 'NOUN'), ('past', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('addition', 'pobj'), (',', 'punct'), ('different', 'amod'), (' ', 'compound'), ('weights', 'nsubjpass'), ('assigned', 'ROOT'), ('different', 'amod'), ('links', 'pobj'), (',', 'punct'), ('reflecting', 'advcl'), ('statisti-', 'amod'), ('cal', 'compound'), ('information', 'dobj'), ('activation', 'nsubj'), ('con-', 'advmod'), ('tributed', 'pcomp'), ('useful', 'amod'), ('outcomes', 'pobj'), ('past', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[addition, ,], [,, different], [different,  ], [ , weights], [weights, assigned], [assigned, different], [different, links], [links, ,], [,, reflecting], [reflecting, statisti-], [statisti-, cal], [cal, information], [information, activation], [activation, con-], [con-, tributed], [tributed, useful], [useful, outcomes], [outcomes, past], [past, .]]

>> Trigrams: 
[[addition, ,, different], [,, different,  ], [different,  , weights], [ , weights, assigned], [weights, assigned, different], [assigned, different, links], [different, links, ,], [links, ,, reflecting], [,, reflecting, statisti-], [reflecting, statisti-, cal], [statisti-, cal, information], [cal, information, activation], [information, activation, con-], [activation, con-, tributed], [con-, tributed, useful], [tributed, useful, outcomes], [useful, outcomes, past], [outcomes, past, .]]

>> Noun Phrases are: 
[addition, different  weights, different links, statisti- cal information, their activation, useful outcomes, the past]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 124 =================================

  

------------------- Sentence 1 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 125 =================================

  

------------------- Sentence 1 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 126 =================================

  

------------------- Sentence 1 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 127 =================================

  

------------------- Sentence 1 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 128 =================================

  

------------------- Sentence 1 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 129 =================================

  

------------------- Sentence 1 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 130 =================================

  

------------------- Sentence 1 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 131 =================================

  

------------------- Sentence 1 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 132 =================================

  

------------------- Sentence 1 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 133 =================================

  

------------------- Sentence 1 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 134 =================================

  

------------------- Sentence 1 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 135 =================================

  

------------------- Sentence 1 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 136 =================================

  

------------------- Sentence 1 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 137 =================================

  

------------------- Sentence 1 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 138 =================================

  

------------------- Sentence 1 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 139 =================================

  

------------------- Sentence 1 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 140 =================================

  

------------------- Sentence 1 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 141 =================================

Figure 2. A simplified connection graph of goals and beliefs.  No- 

------------------- Sentence 1 -------------------

Figure 2. 


>> Tokens are: 
[Figure, 2, .] 

>> PoS Tags are: 
[('Figure', 'NOUN'), ('2', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Figure', 'ROOT'), ('2', 'nummod'), ('.', 'punct')]

>> Bigrams: 
[[Figure, 2], [2, .]]

>> Trigrams: 
[[Figure, 2, .]]

>> Noun Phrases are: 
[Figure]

>> Named Entities are: 
[('2', 'CARDINAL')] 

------------------- Sentence 2 -------------------

A simplified connection graph of goals and beliefs. 


>> Tokens are: 
[simplified, connection, graph, goals, beliefs, .] 

>> PoS Tags are: 
[('simplified', 'ADJ'), ('connection', 'NOUN'), ('graph', 'NOUN'), ('goals', 'NOUN'), ('beliefs', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('simplified', 'amod'), ('connection', 'compound'), ('graph', 'ROOT'), ('goals', 'pobj'), ('beliefs', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[simplified, connection], [connection, graph], [graph, goals], [goals, beliefs], [beliefs, .]]

>> Trigrams: 
[[simplified, connection, graph], [connection, graph, goals], [graph, goals, beliefs], [goals, beliefs, .]]

>> Noun Phrases are: 
[A simplified connection graph, goals, beliefs]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

No- 


>> Tokens are: 
[No-] 

>> PoS Tags are: 
[('No-', 'X')] 

>> Dependency Tags are: 
[('No-', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 142 =================================

tice that only A, F and H are “grounded” in the world. B, C and D  

------------------- Sentence 1 -------------------

tice that only A, F and H are “grounded” in the world. 


>> Tokens are: 
[tice, ,, F, H, “, grounded, ”, world, .] 

>> PoS Tags are: 
[('tice', 'NOUN'), (',', 'PUNCT'), ('F', 'PROPN'), ('H', 'NOUN'), ('“', 'PUNCT'), ('grounded', 'VERB'), ('”', 'PUNCT'), ('world', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('tice', 'ROOT'), (',', 'punct'), ('F', 'conj'), ('H', 'conj'), ('“', 'punct'), ('grounded', 'acl'), ('”', 'punct'), ('world', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[tice, ,], [,, F], [F, H], [H, “], [“, grounded], [grounded, ”], [”, world], [world, .]]

>> Trigrams: 
[[tice, ,, F], [,, F, H], [F, H, “], [H, “, grounded], [“, grounded, ”], [grounded, ”, world], [”, world, .]]

>> Noun Phrases are: 
[tice, only A, F, H, the world]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

B, C and D   


>> Tokens are: 
[B, ,, C, D,  ] 

>> PoS Tags are: 
[('B', 'NOUN'), (',', 'PUNCT'), ('C', 'PROPN'), ('D', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('B', 'ROOT'), (',', 'punct'), ('C', 'conj'), ('D', 'conj'), (' ', 'appos')]

>> Bigrams: 
[[B, ,], [,, C], [C, D], [D,  ]]

>> Trigrams: 
[[B, ,, C], [,, C, D], [C, D,  ]]

>> Noun Phrases are: 
[B, C, D]

>> Named Entities are: 
[] 


================================ Paragraph 143 =================================

are mental concepts that help the agent organize its thoughts and  

------------------- Sentence 1 -------------------

are mental concepts that help the agent organize its thoughts and   


>> Tokens are: 
[mental, concepts, help, agent, organize, thoughts,  ] 

>> PoS Tags are: 
[('mental', 'ADJ'), ('concepts', 'NOUN'), ('help', 'VERB'), ('agent', 'NOUN'), ('organize', 'VERB'), ('thoughts', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('mental', 'amod'), ('concepts', 'attr'), ('help', 'relcl'), ('agent', 'nsubj'), ('organize', 'ccomp'), ('thoughts', 'dobj'), (' ', 'punct')]

>> Bigrams: 
[[mental, concepts], [concepts, help], [help, agent], [agent, organize], [organize, thoughts], [thoughts,  ]]

>> Trigrams: 
[[mental, concepts, help], [concepts, help, agent], [help, agent, organize], [agent, organize, thoughts], [organize, thoughts,  ]]

>> Noun Phrases are: 
[mental concepts, the agent, its thoughts]

>> Named Entities are: 
[] 


================================ Paragraph 144 =================================

regulate its behaviour. The status of E and G is unspecified. Notice  

------------------- Sentence 1 -------------------

regulate its behaviour. 


>> Tokens are: 
[regulate, behaviour, .] 

>> PoS Tags are: 
[('regulate', 'VERB'), ('behaviour', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('regulate', 'ROOT'), ('behaviour', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[regulate, behaviour], [behaviour, .]]

>> Trigrams: 
[[regulate, behaviour, .]]

>> Noun Phrases are: 
[its behaviour]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

The status of E and G is unspecified. 


>> Tokens are: 
[status, E, G, unspecified, .] 

>> PoS Tags are: 
[('status', 'NOUN'), ('E', 'PROPN'), ('G', 'NOUN'), ('unspecified', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('status', 'nsubj'), ('E', 'pobj'), ('G', 'conj'), ('unspecified', 'acomp'), ('.', 'punct')]

>> Bigrams: 
[[status, E], [E, G], [G, unspecified], [unspecified, .]]

>> Trigrams: 
[[status, E, G], [E, G, unspecified], [G, unspecified, .]]

>> Noun Phrases are: 
[The status, E, G]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

Notice   


>> Tokens are: 
[Notice,  ] 

>> PoS Tags are: 
[('Notice', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Notice', 'ROOT'), (' ', 'nummod')]

>> Bigrams: 
[[Notice,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Notice]

>> Named Entities are: 
[] 


================================ Paragraph 145 =================================

too that the same effect can be obtained more directly by means of  

------------------- Sentence 1 -------------------

too that the same effect can be obtained more directly by means of   


>> Tokens are: 
[effect, obtained, directly, means,  ] 

>> PoS Tags are: 
[('effect', 'NOUN'), ('obtained', 'VERB'), ('directly', 'ADV'), ('means', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('effect', 'nsubjpass'), ('obtained', 'ROOT'), ('directly', 'advmod'), ('means', 'pobj'), (' ', 'pobj')]

>> Bigrams: 
[[effect, obtained], [obtained, directly], [directly, means], [means,  ]]

>> Trigrams: 
[[effect, obtained, directly], [obtained, directly, means], [directly, means,  ]]

>> Noun Phrases are: 
[the same effect, means]

>> Named Entities are: 
[] 


================================ Paragraph 146 =================================

the lower-level goal if A then ((E and F) or (G and H)).  

------------------- Sentence 1 -------------------

the lower-level goal if A then ((E and F) or (G and H)). 


>> Tokens are: 
[lower, -, level, goal, (, (, E, F, ), (, G, H, ), ), .] 

>> PoS Tags are: 
[('lower', 'ADJ'), ('-', 'PUNCT'), ('level', 'NOUN'), ('goal', 'NOUN'), ('(', 'PUNCT'), ('(', 'PUNCT'), ('E', 'NOUN'), ('F', 'PROPN'), (')', 'PUNCT'), ('(', 'PUNCT'), ('G', 'NOUN'), ('H', 'PROPN'), (')', 'PUNCT'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('lower', 'amod'), ('-', 'punct'), ('level', 'compound'), ('goal', 'ROOT'), ('(', 'punct'), ('(', 'punct'), ('E', 'appos'), ('F', 'conj'), (')', 'punct'), ('(', 'punct'), ('G', 'conj'), ('H', 'conj'), (')', 'punct'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[lower, -], [-, level], [level, goal], [goal, (], [(, (], [(, E], [E, F], [F, )], [), (], [(, G], [G, H], [H, )], [), )], [), .]]

>> Trigrams: 
[[lower, -, level], [-, level, goal], [level, goal, (], [goal, (, (], [(, (, E], [(, E, F], [E, F, )], [F, ), (], [), (, G], [(, G, H], [G, H, )], [H, ), )], [), ), .]]

>> Noun Phrases are: 
[the lower-level goal, ((E, F, (G, H]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 147 =================================

  

------------------- Sentence 1 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 148 =================================

The strength of observations and goals can be propagated  throughout the graph in proportion to the weights on the  links. The resulting proof procedure, which activates links  with the current highest weighted strength, is similar to the  activation networks of [Maes, 1990]. Moreover, it automati- cally implements an ALP style of forward and backward  reasoning, combined with a form of best-first search.  

------------------- Sentence 1 -------------------

The strength of observations and goals can be propagated  throughout the graph in proportion to the weights on the  links. 


>> Tokens are: 
[strength, observations, goals, propagated,  , graph, proportion, weights,  , links, .] 

>> PoS Tags are: 
[('strength', 'NOUN'), ('observations', 'NOUN'), ('goals', 'NOUN'), ('propagated', 'VERB'), (' ', 'SPACE'), ('graph', 'NOUN'), ('proportion', 'NOUN'), ('weights', 'NOUN'), (' ', 'SPACE'), ('links', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('strength', 'nsubjpass'), ('observations', 'pobj'), ('goals', 'conj'), ('propagated', 'ROOT'), (' ', 'dobj'), ('graph', 'pobj'), ('proportion', 'pobj'), ('weights', 'pobj'), (' ', 'compound'), ('links', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[strength, observations], [observations, goals], [goals, propagated], [propagated,  ], [ , graph], [graph, proportion], [proportion, weights], [weights,  ], [ , links], [links, .]]

>> Trigrams: 
[[strength, observations, goals], [observations, goals, propagated], [goals, propagated,  ], [propagated,  , graph], [ , graph, proportion], [graph, proportion, weights], [proportion, weights,  ], [weights,  , links], [ , links, .]]

>> Noun Phrases are: 
[The strength, observations, goals, the graph, proportion, the weights, the  links]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

The resulting proof procedure, which activates links  with the current highest weighted strength, is similar to the  activation networks of [Maes, 1990]. 


>> Tokens are: 
[resulting, proof, procedure, ,, activates, links,  , current, highest, weighted, strength, ,, similar,  , activation, networks, [, Maes, ,, 1990, ], .] 

>> PoS Tags are: 
[('resulting', 'VERB'), ('proof', 'NOUN'), ('procedure', 'NOUN'), (',', 'PUNCT'), ('activates', 'VERB'), ('links', 'VERB'), (' ', 'SPACE'), ('current', 'ADJ'), ('highest', 'ADJ'), ('weighted', 'ADJ'), ('strength', 'NOUN'), (',', 'PUNCT'), ('similar', 'ADJ'), (' ', 'SPACE'), ('activation', 'NOUN'), ('networks', 'NOUN'), ('[', 'PUNCT'), ('Maes', 'PROPN'), (',', 'PUNCT'), ('1990', 'NUM'), (']', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('resulting', 'amod'), ('proof', 'amod'), ('procedure', 'nsubj'), (',', 'punct'), ('activates', 'relcl'), ('links', 'ROOT'), (' ', 'dobj'), ('current', 'amod'), ('highest', 'amod'), ('weighted', 'amod'), ('strength', 'pobj'), (',', 'punct'), ('similar', 'acomp'), (' ', 'compound'), ('activation', 'compound'), ('networks', 'pobj'), ('[', 'punct'), ('Maes', 'pobj'), (',', 'punct'), ('1990', 'appos'), (']', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[resulting, proof], [proof, procedure], [procedure, ,], [,, activates], [activates, links], [links,  ], [ , current], [current, highest], [highest, weighted], [weighted, strength], [strength, ,], [,, similar], [similar,  ], [ , activation], [activation, networks], [networks, [], [[, Maes], [Maes, ,], [,, 1990], [1990, ]], [], .]]

>> Trigrams: 
[[resulting, proof, procedure], [proof, procedure, ,], [procedure, ,, activates], [,, activates, links], [activates, links,  ], [links,  , current], [ , current, highest], [current, highest, weighted], [highest, weighted, strength], [weighted, strength, ,], [strength, ,, similar], [,, similar,  ], [similar,  , activation], [ , activation, networks], [activation, networks, [], [networks, [, Maes], [[, Maes, ,], [Maes, ,, 1990], [,, 1990, ]], [1990, ], .]]

>> Noun Phrases are: 
[The resulting proof procedure, the current highest weighted strength, the  activation networks, Maes]

>> Named Entities are: 
[('Maes', 'PERSON'), ('1990', 'DATE')] 

------------------- Sentence 3 -------------------

Moreover, it automati- cally implements an ALP style of forward and backward  reasoning, combined with a form of best-first search. 


>> Tokens are: 
[,, automati-, cally, implements, ALP, style, forward, backward,  , reasoning, ,, combined, form, best, -, search, .] 

>> PoS Tags are: 
[(',', 'PUNCT'), ('automati-', 'VERB'), ('cally', 'ADV'), ('implements', 'VERB'), ('ALP', 'PROPN'), ('style', 'NOUN'), ('forward', 'ADV'), ('backward', 'ADJ'), (' ', 'SPACE'), ('reasoning', 'NOUN'), (',', 'PUNCT'), ('combined', 'VERB'), ('form', 'NOUN'), ('best', 'ADV'), ('-', 'PUNCT'), ('search', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(',', 'punct'), ('automati-', 'ROOT'), ('cally', 'advmod'), ('implements', 'ccomp'), ('ALP', 'compound'), ('style', 'dobj'), ('forward', 'pcomp'), ('backward', 'conj'), (' ', 'conj'), ('reasoning', 'pobj'), (',', 'punct'), ('combined', 'prep'), ('form', 'pobj'), ('best', 'advmod'), ('-', 'punct'), ('search', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[,, automati-], [automati-, cally], [cally, implements], [implements, ALP], [ALP, style], [style, forward], [forward, backward], [backward,  ], [ , reasoning], [reasoning, ,], [,, combined], [combined, form], [form, best], [best, -], [-, search], [search, .]]

>> Trigrams: 
[[,, automati-, cally], [automati-, cally, implements], [cally, implements, ALP], [implements, ALP, style], [ALP, style, forward], [style, forward, backward], [forward, backward,  ], [backward,  , reasoning], [ , reasoning, ,], [reasoning, ,, combined], [,, combined, form], [combined, form, best], [form, best, -], [best, -, search], [-, search, .]]

>> Noun Phrases are: 
[it, an ALP style, reasoning, a form, best-first search]

>> Named Entities are: 
[('ALP', 'ORG')] 

------------------- Sentence 4 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 149 =================================

The connection graph model of thinking can give the mis- leading impression that thinking does not have a linguistic  or logical character at all. But the difference between think- ing in connection graphs and reasoning in clausal logic is  nothing other than the conventional computer science dis- tinction between an optimized, low-level implementation,  which is close to the hardware, and a high-level representa- tion, which is close to the problem domain.   

------------------- Sentence 1 -------------------

The connection graph model of thinking can give the mis- leading impression that thinking does not have a linguistic  or logical character at all. 


>> Tokens are: 
[connection, graph, model, thinking, mis-, leading, impression, thinking, linguistic,  , logical, character, .] 

>> PoS Tags are: 
[('connection', 'NOUN'), ('graph', 'NOUN'), ('model', 'NOUN'), ('thinking', 'NOUN'), ('mis-', 'ADJ'), ('leading', 'VERB'), ('impression', 'NOUN'), ('thinking', 'NOUN'), ('linguistic', 'ADJ'), (' ', 'SPACE'), ('logical', 'ADJ'), ('character', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('connection', 'compound'), ('graph', 'compound'), ('model', 'nsubj'), ('thinking', 'pobj'), ('mis-', 'amod'), ('leading', 'amod'), ('impression', 'dobj'), ('thinking', 'nsubj'), ('linguistic', 'amod'), (' ', 'nummod'), ('logical', 'amod'), ('character', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[connection, graph], [graph, model], [model, thinking], [thinking, mis-], [mis-, leading], [leading, impression], [impression, thinking], [thinking, linguistic], [linguistic,  ], [ , logical], [logical, character], [character, .]]

>> Trigrams: 
[[connection, graph, model], [graph, model, thinking], [model, thinking, mis-], [thinking, mis-, leading], [mis-, leading, impression], [leading, impression, thinking], [impression, thinking, linguistic], [thinking, linguistic,  ], [linguistic,  , logical], [ , logical, character], [logical, character, .]]

>> Noun Phrases are: 
[The connection graph model, thinking, the mis- leading impression, thinking, a linguistic  or logical character]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

But the difference between think- ing in connection graphs and reasoning in clausal logic is  nothing other than the conventional computer science dis- tinction between an optimized, low-level implementation,  which is close to the hardware, and a high-level representa- tion, which is close to the problem domain. 


>> Tokens are: 
[difference, think-, ing, connection, graphs, reasoning, clausal, logic,  , conventional, computer, science, dis-, tinction, optimized, ,, low, -, level, implementation, ,,  , close, hardware, ,, high, -, level, representa-, tion, ,, close, problem, domain, .] 

>> PoS Tags are: 
[('difference', 'NOUN'), ('think-', 'DET'), ('ing', 'NOUN'), ('connection', 'NOUN'), ('graphs', 'NOUN'), ('reasoning', 'NOUN'), ('clausal', 'NOUN'), ('logic', 'NOUN'), (' ', 'SPACE'), ('conventional', 'ADJ'), ('computer', 'NOUN'), ('science', 'NOUN'), ('dis-', 'NOUN'), ('tinction', 'NOUN'), ('optimized', 'VERB'), (',', 'PUNCT'), ('low', 'ADJ'), ('-', 'PUNCT'), ('level', 'NOUN'), ('implementation', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('close', 'ADJ'), ('hardware', 'NOUN'), (',', 'PUNCT'), ('high', 'ADJ'), ('-', 'PUNCT'), ('level', 'NOUN'), ('representa-', 'NOUN'), ('tion', 'NOUN'), (',', 'PUNCT'), ('close', 'ADJ'), ('problem', 'NOUN'), ('domain', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('difference', 'nsubj'), ('think-', 'pobj'), ('ing', 'pobj'), ('connection', 'compound'), ('graphs', 'pobj'), ('reasoning', 'conj'), ('clausal', 'compound'), ('logic', 'pobj'), (' ', 'attr'), ('conventional', 'amod'), ('computer', 'compound'), ('science', 'compound'), ('dis-', 'compound'), ('tinction', 'pobj'), ('optimized', 'amod'), (',', 'punct'), ('low', 'amod'), ('-', 'punct'), ('level', 'compound'), ('implementation', 'pobj'), (',', 'punct'), (' ', 'appos'), ('close', 'acomp'), ('hardware', 'pobj'), (',', 'punct'), ('high', 'amod'), ('-', 'punct'), ('level', 'compound'), ('representa-', 'compound'), ('tion', 'conj'), (',', 'punct'), ('close', 'acomp'), ('problem', 'compound'), ('domain', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[difference, think-], [think-, ing], [ing, connection], [connection, graphs], [graphs, reasoning], [reasoning, clausal], [clausal, logic], [logic,  ], [ , conventional], [conventional, computer], [computer, science], [science, dis-], [dis-, tinction], [tinction, optimized], [optimized, ,], [,, low], [low, -], [-, level], [level, implementation], [implementation, ,], [,,  ], [ , close], [close, hardware], [hardware, ,], [,, high], [high, -], [-, level], [level, representa-], [representa-, tion], [tion, ,], [,, close], [close, problem], [problem, domain], [domain, .]]

>> Trigrams: 
[[difference, think-, ing], [think-, ing, connection], [ing, connection, graphs], [connection, graphs, reasoning], [graphs, reasoning, clausal], [reasoning, clausal, logic], [clausal, logic,  ], [logic,  , conventional], [ , conventional, computer], [conventional, computer, science], [computer, science, dis-], [science, dis-, tinction], [dis-, tinction, optimized], [tinction, optimized, ,], [optimized, ,, low], [,, low, -], [low, -, level], [-, level, implementation], [level, implementation, ,], [implementation, ,,  ], [,,  , close], [ , close, hardware], [close, hardware, ,], [hardware, ,, high], [,, high, -], [high, -, level], [-, level, representa-], [level, representa-, tion], [representa-, tion, ,], [tion, ,, close], [,, close, problem], [close, problem, domain], [problem, domain, .]]

>> Noun Phrases are: 
[the difference, ing, connection graphs, reasoning, clausal logic, nothing, the conventional computer science dis- tinction, an optimized, low-level implementation, the hardware, a high-level representa- tion, the problem domain]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 150 =================================

The connection graph model of the mind adds further  support to the argument that thinking takes place in a LOT  that is independent from natural language. The LOT may  facilitate the development of natural language, but it does  not depend upon its prior existence.  

------------------- Sentence 1 -------------------

The connection graph model of the mind adds further  support to the argument that thinking takes place in a LOT  that is independent from natural language. 


>> Tokens are: 
[connection, graph, model, mind, adds,  , support, argument, thinking, takes, place, LOT,  , independent, natural, language, .] 

>> PoS Tags are: 
[('connection', 'NOUN'), ('graph', 'NOUN'), ('model', 'NOUN'), ('mind', 'NOUN'), ('adds', 'VERB'), (' ', 'SPACE'), ('support', 'NOUN'), ('argument', 'NOUN'), ('thinking', 'NOUN'), ('takes', 'VERB'), ('place', 'NOUN'), ('LOT', 'PROPN'), (' ', 'SPACE'), ('independent', 'ADJ'), ('natural', 'ADJ'), ('language', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('connection', 'compound'), ('graph', 'compound'), ('model', 'nsubj'), ('mind', 'pobj'), ('adds', 'ROOT'), (' ', 'compound'), ('support', 'dobj'), ('argument', 'pobj'), ('thinking', 'nsubj'), ('takes', 'acl'), ('place', 'dobj'), ('LOT', 'pobj'), (' ', 'appos'), ('independent', 'acomp'), ('natural', 'amod'), ('language', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[connection, graph], [graph, model], [model, mind], [mind, adds], [adds,  ], [ , support], [support, argument], [argument, thinking], [thinking, takes], [takes, place], [place, LOT], [LOT,  ], [ , independent], [independent, natural], [natural, language], [language, .]]

>> Trigrams: 
[[connection, graph, model], [graph, model, mind], [model, mind, adds], [mind, adds,  ], [adds,  , support], [ , support, argument], [support, argument, thinking], [argument, thinking, takes], [thinking, takes, place], [takes, place, LOT], [place, LOT,  ], [LOT,  , independent], [ , independent, natural], [independent, natural, language], [natural, language, .]]

>> Noun Phrases are: 
[The connection graph model, the mind, further  support, the argument, thinking, place, a LOT, natural language]

>> Named Entities are: 
[('LOT', 'ORG')] 

------------------- Sentence 2 -------------------

The LOT may  facilitate the development of natural language, but it does  not depend upon its prior existence. 


>> Tokens are: 
[LOT,  , facilitate, development, natural, language, ,,  , depend, prior, existence, .] 

>> PoS Tags are: 
[('LOT', 'PROPN'), (' ', 'SPACE'), ('facilitate', 'VERB'), ('development', 'NOUN'), ('natural', 'ADJ'), ('language', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('depend', 'VERB'), ('prior', 'ADJ'), ('existence', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('LOT', 'nsubj'), (' ', 'dep'), ('facilitate', 'ROOT'), ('development', 'dobj'), ('natural', 'amod'), ('language', 'pobj'), (',', 'punct'), (' ', 'nsubj'), ('depend', 'conj'), ('prior', 'amod'), ('existence', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[LOT,  ], [ , facilitate], [facilitate, development], [development, natural], [natural, language], [language, ,], [,,  ], [ , depend], [depend, prior], [prior, existence], [existence, .]]

>> Trigrams: 
[[LOT,  , facilitate], [ , facilitate, development], [facilitate, development, natural], [development, natural, language], [natural, language, ,], [language, ,,  ], [,,  , depend], [ , depend, prior], [depend, prior, existence], [prior, existence, .]]

>> Noun Phrases are: 
[The LOT, the development, natural language, it, its prior existence]

>> Named Entities are: 
[('LOT', 'ORG')] 

------------------- Sentence 3 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 151 =================================

The connection graph model also suggests that expressing  thoughts in natural language is like decompiling low-level  programs into higher-level program specifications. In com- puting, decompiling programs is hard. This may help to  explain why it is often hard to put our thoughts into words.   

------------------- Sentence 1 -------------------

The connection graph model also suggests that expressing  thoughts in natural language is like decompiling low-level  programs into higher-level program specifications. 


>> Tokens are: 
[connection, graph, model, suggests, expressing,  , thoughts, natural, language, like, decompiling, low, -, level,  , programs, higher, -, level, program, specifications, .] 

>> PoS Tags are: 
[('connection', 'NOUN'), ('graph', 'NOUN'), ('model', 'NOUN'), ('suggests', 'VERB'), ('expressing', 'VERB'), (' ', 'SPACE'), ('thoughts', 'NOUN'), ('natural', 'ADJ'), ('language', 'NOUN'), ('like', 'ADP'), ('decompiling', 'VERB'), ('low', 'ADJ'), ('-', 'PUNCT'), ('level', 'NOUN'), (' ', 'SPACE'), ('programs', 'NOUN'), ('higher', 'ADJ'), ('-', 'PUNCT'), ('level', 'NOUN'), ('program', 'NOUN'), ('specifications', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('connection', 'compound'), ('graph', 'compound'), ('model', 'nsubj'), ('suggests', 'ROOT'), ('expressing', 'csubj'), (' ', 'compound'), ('thoughts', 'dobj'), ('natural', 'amod'), ('language', 'pobj'), ('like', 'prep'), ('decompiling', 'pcomp'), ('low', 'amod'), ('-', 'punct'), ('level', 'nmod'), (' ', 'compound'), ('programs', 'dobj'), ('higher', 'amod'), ('-', 'punct'), ('level', 'compound'), ('program', 'compound'), ('specifications', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[connection, graph], [graph, model], [model, suggests], [suggests, expressing], [expressing,  ], [ , thoughts], [thoughts, natural], [natural, language], [language, like], [like, decompiling], [decompiling, low], [low, -], [-, level], [level,  ], [ , programs], [programs, higher], [higher, -], [-, level], [level, program], [program, specifications], [specifications, .]]

>> Trigrams: 
[[connection, graph, model], [graph, model, suggests], [model, suggests, expressing], [suggests, expressing,  ], [expressing,  , thoughts], [ , thoughts, natural], [thoughts, natural, language], [natural, language, like], [language, like, decompiling], [like, decompiling, low], [decompiling, low, -], [low, -, level], [-, level,  ], [level,  , programs], [ , programs, higher], [programs, higher, -], [higher, -, level], [-, level, program], [level, program, specifications], [program, specifications, .]]

>> Noun Phrases are: 
[The connection graph model,  thoughts, natural language, low-level  programs, higher-level program specifications]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

In com- puting, decompiling programs is hard. 


>> Tokens are: 
[com-, puting, ,, decompiling, programs, hard, .] 

>> PoS Tags are: 
[('com-', 'NOUN'), ('puting', 'VERB'), (',', 'PUNCT'), ('decompiling', 'VERB'), ('programs', 'NOUN'), ('hard', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('com-', 'pobj'), ('puting', 'pobj'), (',', 'punct'), ('decompiling', 'amod'), ('programs', 'nsubj'), ('hard', 'acomp'), ('.', 'punct')]

>> Bigrams: 
[[com-, puting], [puting, ,], [,, decompiling], [decompiling, programs], [programs, hard], [hard, .]]

>> Trigrams: 
[[com-, puting, ,], [puting, ,, decompiling], [,, decompiling, programs], [decompiling, programs, hard], [programs, hard, .]]

>> Noun Phrases are: 
[com-, decompiling programs]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

This may help to  explain why it is often hard to put our thoughts into words. 


>> Tokens are: 
[help,  , explain, hard, thoughts, words, .] 

>> PoS Tags are: 
[('help', 'VERB'), (' ', 'SPACE'), ('explain', 'VERB'), ('hard', 'ADJ'), ('thoughts', 'NOUN'), ('words', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('help', 'ROOT'), (' ', 'pobj'), ('explain', 'xcomp'), ('hard', 'acomp'), ('thoughts', 'dobj'), ('words', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[help,  ], [ , explain], [explain, hard], [hard, thoughts], [thoughts, words], [words, .]]

>> Trigrams: 
[[help,  , explain], [ , explain, hard], [explain, hard, thoughts], [hard, thoughts, words], [thoughts, words, .]]

>> Noun Phrases are: 
[it, our thoughts, words]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 152 =================================

5 Representing Uncertainty  

------------------- Sentence 1 -------------------

5 Representing Uncertainty   


>> Tokens are: 
[5, Representing, Uncertainty,  ] 

>> PoS Tags are: 
[('5', 'NUM'), ('Representing', 'VERB'), ('Uncertainty', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('5', 'nummod'), ('Representing', 'amod'), ('Uncertainty', 'ROOT'), (' ', 'nummod')]

>> Bigrams: 
[[5, Representing], [Representing, Uncertainty], [Uncertainty,  ]]

>> Trigrams: 
[[5, Representing, Uncertainty], [Representing, Uncertainty,  ]]

>> Noun Phrases are: 
[5 Representing Uncertainty]

>> Named Entities are: 
[('5', 'CARDINAL')] 


================================ Paragraph 153 =================================

The links in connection graphs include internal links, which  organize the agent’s thoughts, and external links, which  ground the agent’s thoughts in reality. The external links are  activated by observations and by the agent’s own actions.  They may also include links to unobserved properties of the  world. The agent can make assumptions about these proper- ties, and can attempt to judge their probabilities.  

------------------- Sentence 1 -------------------

The links in connection graphs include internal links, which  organize the agent’s thoughts, and external links, which  ground the agent’s thoughts in reality. 


>> Tokens are: 
[links, connection, graphs, include, internal, links, ,,  , organize, agent, thoughts, ,, external, links, ,,  , ground, agent, thoughts, reality, .] 

>> PoS Tags are: 
[('links', 'NOUN'), ('connection', 'NOUN'), ('graphs', 'NOUN'), ('include', 'VERB'), ('internal', 'ADJ'), ('links', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('organize', 'VERB'), ('agent', 'NOUN'), ('thoughts', 'NOUN'), (',', 'PUNCT'), ('external', 'ADJ'), ('links', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('ground', 'VERB'), ('agent', 'NOUN'), ('thoughts', 'NOUN'), ('reality', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('links', 'nsubj'), ('connection', 'compound'), ('graphs', 'pobj'), ('include', 'ROOT'), ('internal', 'amod'), ('links', 'dobj'), (',', 'punct'), (' ', 'nsubj'), ('organize', 'relcl'), ('agent', 'poss'), ('thoughts', 'dobj'), (',', 'punct'), ('external', 'amod'), ('links', 'conj'), (',', 'punct'), (' ', 'nsubj'), ('ground', 'relcl'), ('agent', 'poss'), ('thoughts', 'dobj'), ('reality', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[links, connection], [connection, graphs], [graphs, include], [include, internal], [internal, links], [links, ,], [,,  ], [ , organize], [organize, agent], [agent, thoughts], [thoughts, ,], [,, external], [external, links], [links, ,], [,,  ], [ , ground], [ground, agent], [agent, thoughts], [thoughts, reality], [reality, .]]

>> Trigrams: 
[[links, connection, graphs], [connection, graphs, include], [graphs, include, internal], [include, internal, links], [internal, links, ,], [links, ,,  ], [,,  , organize], [ , organize, agent], [organize, agent, thoughts], [agent, thoughts, ,], [thoughts, ,, external], [,, external, links], [external, links, ,], [links, ,,  ], [,,  , ground], [ , ground, agent], [ground, agent, thoughts], [agent, thoughts, reality], [thoughts, reality, .]]

>> Noun Phrases are: 
[The links, connection graphs, internal links, the agent’s thoughts, external links, the agent’s thoughts, reality]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

The external links are  activated by observations and by the agent’s own actions. 


>> Tokens are: 
[external, links,  , activated, observations, agent, actions, .] 

>> PoS Tags are: 
[('external', 'ADJ'), ('links', 'NOUN'), (' ', 'SPACE'), ('activated', 'VERB'), ('observations', 'NOUN'), ('agent', 'NOUN'), ('actions', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('external', 'amod'), ('links', 'nsubjpass'), (' ', 'nsubjpass'), ('activated', 'ROOT'), ('observations', 'pobj'), ('agent', 'poss'), ('actions', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[external, links], [links,  ], [ , activated], [activated, observations], [observations, agent], [agent, actions], [actions, .]]

>> Trigrams: 
[[external, links,  ], [links,  , activated], [ , activated, observations], [activated, observations, agent], [observations, agent, actions], [agent, actions, .]]

>> Noun Phrases are: 
[The external links, observations, the agent’s own actions]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

They may also include links to unobserved properties of the  world. 


>> Tokens are: 
[include, links, unobserved, properties,  , world, .] 

>> PoS Tags are: 
[('include', 'VERB'), ('links', 'NOUN'), ('unobserved', 'ADJ'), ('properties', 'NOUN'), (' ', 'SPACE'), ('world', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('include', 'ROOT'), ('links', 'dobj'), ('unobserved', 'amod'), ('properties', 'pobj'), (' ', 'compound'), ('world', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[include, links], [links, unobserved], [unobserved, properties], [properties,  ], [ , world], [world, .]]

>> Trigrams: 
[[include, links, unobserved], [links, unobserved, properties], [unobserved, properties,  ], [properties,  , world], [ , world, .]]

>> Noun Phrases are: 
[They, links, unobserved properties, the  world]

>> Named Entities are: 
[] 

------------------- Sentence 5 -------------------

The agent can make assumptions about these proper- ties, and can attempt to judge their probabilities. 


>> Tokens are: 
[agent, assumptions, proper-, ties, ,, attempt, judge, probabilities, .] 

>> PoS Tags are: 
[('agent', 'NOUN'), ('assumptions', 'NOUN'), ('proper-', 'NOUN'), ('ties', 'NOUN'), (',', 'PUNCT'), ('attempt', 'VERB'), ('judge', 'VERB'), ('probabilities', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('agent', 'nsubj'), ('assumptions', 'dobj'), ('proper-', 'compound'), ('ties', 'pobj'), (',', 'punct'), ('attempt', 'conj'), ('judge', 'xcomp'), ('probabilities', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[agent, assumptions], [assumptions, proper-], [proper-, ties], [ties, ,], [,, attempt], [attempt, judge], [judge, probabilities], [probabilities, .]]

>> Trigrams: 
[[agent, assumptions, proper-], [assumptions, proper-, ties], [proper-, ties, ,], [ties, ,, attempt], [,, attempt, judge], [attempt, judge, probabilities], [judge, probabilities, .]]

>> Noun Phrases are: 
[The agent, assumptions, these proper- ties, their probabilities]

>> Named Entities are: 
[] 

------------------- Sentence 6 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 154 =================================

C if A  

------------------- Sentence 1 -------------------

C if A   


>> Tokens are: 
[C,  ] 

>> PoS Tags are: 
[('C', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('C', 'ROOT'), (' ', 'nummod')]

>> Bigrams: 
[[C,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[C]

>> Named Entities are: 
[] 


================================ Paragraph 155 =================================

Goal:      if   C then  D  

------------------- Sentence 1 -------------------

Goal:      if   C then   


>> Tokens are: 
[Goal, :,      ,   , C,  ] 

>> PoS Tags are: 
[('Goal', 'NOUN'), (':', 'PUNCT'), ('     ', 'SPACE'), ('  ', 'SPACE'), ('C', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Goal', 'ROOT'), (':', 'punct'), ('     ', 'appos'), ('  ', 'compound'), ('C', 'npadvmod'), (' ', 'punct')]

>> Bigrams: 
[[Goal, :], [:,      ], [     ,   ], [  , C], [C,  ]]

>> Trigrams: 
[[Goal, :,      ], [:,      ,   ], [     ,   , C], [  , C,  ]]

>> Noun Phrases are: 
[Goal]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

D   


>> Tokens are: 
[D,  ] 

>> PoS Tags are: 
[('D', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('D', 'compound'), (' ', 'ROOT')]

>> Bigrams: 
[[D,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 156 =================================

D if E and F  B if A  

------------------- Sentence 1 -------------------

D if E and F  B if A 


>> Tokens are: 
[D, E, F,  , B] 

>> PoS Tags are: 
[('D', 'NOUN'), ('E', 'PROPN'), ('F', 'PROPN'), (' ', 'SPACE'), ('B', 'PROPN')] 

>> Dependency Tags are: 
[('D', 'ROOT'), ('E', 'advcl'), ('F', 'compound'), (' ', 'compound'), ('B', 'conj')]

>> Bigrams: 
[[D, E], [E, F], [F,  ], [ , B]]

>> Trigrams: 
[[D, E, F], [E, F,  ], [F,  , B]]

>> Noun Phrases are: 
[D]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 157 =================================

D if G and H  

------------------- Sentence 1 -------------------

D if G and H   


>> Tokens are: 
[D, G, H,  ] 

>> PoS Tags are: 
[('D', 'NOUN'), ('G', 'PROPN'), ('H', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('D', 'ROOT'), ('G', 'advcl'), ('H', 'conj'), (' ', 'punct')]

>> Bigrams: 
[[D, G], [G, H], [H,  ]]

>> Trigrams: 
[[D, G, H], [G, H,  ]]

>> Noun Phrases are: 
[D]

>> Named Entities are: 
[] 


================================ Paragraph 158 =================================

15

------------------- Sentence 1 -------------------

15 


>> Tokens are: 
[15] 

>> PoS Tags are: 
[('15', 'NUM')] 

>> Dependency Tags are: 
[('15', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('15', 'CARDINAL')] 


================================ Paragraph 159 =================================

 The probability that an assumption is true contributes to  the probability that an agent’s actions will have a particular  outcome. For example:      You will be rich if you buy a lottery ticket   

------------------- Sentence 1 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

The probability that an assumption is true contributes to  the probability that an agent’s actions will have a particular  outcome. 


>> Tokens are: 
[probability, assumption, true, contributes,  , probability, agent, actions, particular,  , outcome, .] 

>> PoS Tags are: 
[('probability', 'NOUN'), ('assumption', 'NOUN'), ('true', 'ADJ'), ('contributes', 'NOUN'), (' ', 'SPACE'), ('probability', 'NOUN'), ('agent', 'NOUN'), ('actions', 'NOUN'), ('particular', 'ADJ'), (' ', 'SPACE'), ('outcome', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('probability', 'ROOT'), ('assumption', 'nsubj'), ('true', 'amod'), ('contributes', 'attr'), (' ', 'pobj'), ('probability', 'appos'), ('agent', 'poss'), ('actions', 'nsubj'), ('particular', 'amod'), (' ', 'compound'), ('outcome', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[probability, assumption], [assumption, true], [true, contributes], [contributes,  ], [ , probability], [probability, agent], [agent, actions], [actions, particular], [particular,  ], [ , outcome], [outcome, .]]

>> Trigrams: 
[[probability, assumption, true], [assumption, true, contributes], [true, contributes,  ], [contributes,  , probability], [ , probability, agent], [probability, agent, actions], [agent, actions, particular], [actions, particular,  ], [particular,  , outcome], [ , outcome, .]]

>> Noun Phrases are: 
[The probability, an assumption, true contributes, the probability, an agent’s actions, a particular  outcome]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

For example:      You will be rich if you buy a lottery ticket    


>> Tokens are: 
[example, :,      , rich, buy, lottery, ticket,   ] 

>> PoS Tags are: 
[('example', 'NOUN'), (':', 'PUNCT'), ('     ', 'SPACE'), ('rich', 'ADJ'), ('buy', 'VERB'), ('lottery', 'NOUN'), ('ticket', 'NOUN'), ('  ', 'SPACE')] 

>> Dependency Tags are: 
[('example', 'pobj'), (':', 'punct'), ('     ', 'dep'), ('rich', 'acomp'), ('buy', 'advcl'), ('lottery', 'compound'), ('ticket', 'dobj'), ('  ', 'npadvmod')]

>> Bigrams: 
[[example, :], [:,      ], [     , rich], [rich, buy], [buy, lottery], [lottery, ticket], [ticket,   ]]

>> Trigrams: 
[[example, :,      ], [:,      , rich], [     , rich, buy], [rich, buy, lottery], [buy, lottery, ticket], [lottery, ticket,   ]]

>> Noun Phrases are: 
[example, You, you, a lottery ticket]

>> Named Entities are: 
[] 


================================ Paragraph 160 =================================

and your number is chosen.    It will rain if you do a rain dance  

------------------- Sentence 1 -------------------

and your number is chosen. 


>> Tokens are: 
[number, chosen, .] 

>> PoS Tags are: 
[('number', 'NOUN'), ('chosen', 'VERB'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('number', 'nsubjpass'), ('chosen', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[number, chosen], [chosen, .]]

>> Trigrams: 
[[number, chosen, .]]

>> Noun Phrases are: 
[your number]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

   It will rain if you do a rain dance   


>> Tokens are: 
[   , rain, rain, dance,  ] 

>> PoS Tags are: 
[('   ', 'SPACE'), ('rain', 'VERB'), ('rain', 'NOUN'), ('dance', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('   ', 'meta'), ('rain', 'ROOT'), ('rain', 'compound'), ('dance', 'dobj'), (' ', 'punct')]

>> Bigrams: 
[[   , rain], [rain, rain], [rain, dance], [dance,  ]]

>> Trigrams: 
[[   , rain, rain], [rain, rain, dance], [rain, dance,  ]]

>> Noun Phrases are: 
[It, you, a rain dance]

>> Named Entities are: 
[] 


================================ Paragraph 161 =================================

and the gods are pleased.      You can control your own actions (like buying a ticket or  doing a rain dance), but you cannot always control the ac- tions of others or the state of the world (your number is cho- sen or the gods are pleased). At best, you might be able  only to judge the probability that the world is or will be in a  particular state (one in a million?). David Poole [1997] has  shown that associating probabilities with such assumptions  gives ALP the expressive power of Bayesian networks.   

------------------- Sentence 1 -------------------

and the gods are pleased. 


>> Tokens are: 
[gods, pleased, .] 

>> PoS Tags are: 
[('gods', 'NOUN'), ('pleased', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('gods', 'nsubj'), ('pleased', 'acomp'), ('.', 'punct')]

>> Bigrams: 
[[gods, pleased], [pleased, .]]

>> Trigrams: 
[[gods, pleased, .]]

>> Noun Phrases are: 
[the gods]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

     You can control your own actions (like buying a ticket or  doing a rain dance), but you cannot always control the ac- tions of others or the state of the world (your number is cho- sen or the gods are pleased). 


>> Tokens are: 
[     , control, actions, (, like, buying, ticket,  , rain, dance, ), ,, control, ac-, tions, state, world, (, number, cho-, sen, gods, pleased, ), .] 

>> PoS Tags are: 
[('     ', 'SPACE'), ('control', 'VERB'), ('actions', 'NOUN'), ('(', 'PUNCT'), ('like', 'ADP'), ('buying', 'VERB'), ('ticket', 'NOUN'), (' ', 'SPACE'), ('rain', 'NOUN'), ('dance', 'NOUN'), (')', 'PUNCT'), (',', 'PUNCT'), ('control', 'VERB'), ('ac-', 'ADJ'), ('tions', 'NOUN'), ('state', 'NOUN'), ('world', 'NOUN'), ('(', 'PUNCT'), ('number', 'NOUN'), ('cho-', 'ADV'), ('sen', 'ADJ'), ('gods', 'NOUN'), ('pleased', 'ADJ'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('     ', 'npadvmod'), ('control', 'ROOT'), ('actions', 'dobj'), ('(', 'punct'), ('like', 'prep'), ('buying', 'pcomp'), ('ticket', 'dobj'), (' ', 'conj'), ('rain', 'compound'), ('dance', 'dobj'), (')', 'punct'), (',', 'punct'), ('control', 'conj'), ('ac-', 'amod'), ('tions', 'dobj'), ('state', 'conj'), ('world', 'pobj'), ('(', 'punct'), ('number', 'nsubj'), ('cho-', 'advmod'), ('sen', 'acomp'), ('gods', 'nsubj'), ('pleased', 'acomp'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[     , control], [control, actions], [actions, (], [(, like], [like, buying], [buying, ticket], [ticket,  ], [ , rain], [rain, dance], [dance, )], [), ,], [,, control], [control, ac-], [ac-, tions], [tions, state], [state, world], [world, (], [(, number], [number, cho-], [cho-, sen], [sen, gods], [gods, pleased], [pleased, )], [), .]]

>> Trigrams: 
[[     , control, actions], [control, actions, (], [actions, (, like], [(, like, buying], [like, buying, ticket], [buying, ticket,  ], [ticket,  , rain], [ , rain, dance], [rain, dance, )], [dance, ), ,], [), ,, control], [,, control, ac-], [control, ac-, tions], [ac-, tions, state], [tions, state, world], [state, world, (], [world, (, number], [(, number, cho-], [number, cho-, sen], [cho-, sen, gods], [sen, gods, pleased], [gods, pleased, )], [pleased, ), .]]

>> Noun Phrases are: 
[You, your own actions, a ticket, a rain dance, you, the ac- tions, others, the state, the world, your number, the gods]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

At best, you might be able  only to judge the probability that the world is or will be in a  particular state (one in a million?). 


>> Tokens are: 
[best, ,, able,  , judge, probability, world,  , particular, state, (, million, ?, ), .] 

>> PoS Tags are: 
[('best', 'ADJ'), (',', 'PUNCT'), ('able', 'ADJ'), (' ', 'SPACE'), ('judge', 'VERB'), ('probability', 'NOUN'), ('world', 'NOUN'), (' ', 'SPACE'), ('particular', 'ADJ'), ('state', 'NOUN'), ('(', 'PUNCT'), ('million', 'NUM'), ('?', 'PUNCT'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('best', 'advmod'), (',', 'punct'), ('able', 'acomp'), (' ', 'dobj'), ('judge', 'advcl'), ('probability', 'dobj'), ('world', 'nsubj'), (' ', 'nmod'), ('particular', 'amod'), ('state', 'pobj'), ('(', 'punct'), ('million', 'pobj'), ('?', 'punct'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[best, ,], [,, able], [able,  ], [ , judge], [judge, probability], [probability, world], [world,  ], [ , particular], [particular, state], [state, (], [(, million], [million, ?], [?, )], [), .]]

>> Trigrams: 
[[best, ,, able], [,, able,  ], [able,  , judge], [ , judge, probability], [judge, probability, world], [probability, world,  ], [world,  , particular], [ , particular, state], [particular, state, (], [state, (, million], [(, million, ?], [million, ?, )], [?, ), .]]

>> Noun Phrases are: 
[you, the probability, the world, a  particular state]

>> Named Entities are: 
[('one', 'CARDINAL')] 

------------------- Sentence 4 -------------------

David Poole [1997] has  shown that associating probabilities with such assumptions  gives ALP the expressive power of Bayesian networks. 


>> Tokens are: 
[David, Poole, [, 1997, ],  , shown, associating, probabilities, assumptions,  , gives, ALP, expressive, power, Bayesian, networks, .] 

>> PoS Tags are: 
[('David', 'PROPN'), ('Poole', 'PROPN'), ('[', 'PUNCT'), ('1997', 'NUM'), (']', 'PUNCT'), (' ', 'SPACE'), ('shown', 'VERB'), ('associating', 'VERB'), ('probabilities', 'NOUN'), ('assumptions', 'NOUN'), (' ', 'SPACE'), ('gives', 'VERB'), ('ALP', 'PROPN'), ('expressive', 'ADJ'), ('power', 'NOUN'), ('Bayesian', 'ADJ'), ('networks', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('David', 'compound'), ('Poole', 'nsubj'), ('[', 'punct'), ('1997', 'appos'), (']', 'punct'), (' ', 'nsubj'), ('shown', 'ROOT'), ('associating', 'csubj'), ('probabilities', 'dobj'), ('assumptions', 'pobj'), (' ', 'nsubj'), ('gives', 'ccomp'), ('ALP', 'dative'), ('expressive', 'amod'), ('power', 'dobj'), ('Bayesian', 'compound'), ('networks', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[David, Poole], [Poole, [], [[, 1997], [1997, ]], [],  ], [ , shown], [shown, associating], [associating, probabilities], [probabilities, assumptions], [assumptions,  ], [ , gives], [gives, ALP], [ALP, expressive], [expressive, power], [power, Bayesian], [Bayesian, networks], [networks, .]]

>> Trigrams: 
[[David, Poole, [], [Poole, [, 1997], [[, 1997, ]], [1997, ],  ], [],  , shown], [ , shown, associating], [shown, associating, probabilities], [associating, probabilities, assumptions], [probabilities, assumptions,  ], [assumptions,  , gives], [ , gives, ALP], [gives, ALP, expressive], [ALP, expressive, power], [expressive, power, Bayesian], [power, Bayesian, networks], [Bayesian, networks, .]]

>> Noun Phrases are: 
[David Poole, probabilities, such assumptions, ALP, the expressive power, Bayesian networks]

>> Named Entities are: 
[('David Poole', 'PERSON'), ('1997', 'DATE'), ('Bayesian', 'NORP')] 

------------------- Sentence 5 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 162 =================================

6 Better Decision-making  

------------------- Sentence 1 -------------------

6 Better Decision-making   


>> Tokens are: 
[6, Better, Decision, -, making,  ] 

>> PoS Tags are: 
[('6', 'NUM'), ('Better', 'ADJ'), ('Decision', 'NOUN'), ('-', 'PUNCT'), ('making', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('6', 'nummod'), ('Better', 'amod'), ('Decision', 'compound'), ('-', 'punct'), ('making', 'ROOT'), (' ', 'punct')]

>> Bigrams: 
[[6, Better], [Better, Decision], [Decision, -], [-, making], [making,  ]]

>> Trigrams: 
[[6, Better, Decision], [Better, Decision, -], [Decision, -, making], [-, making,  ]]

>> Noun Phrases are: 
[6 Better Decision-making]

>> Named Entities are: 
[('6', 'CARDINAL')] 


================================ Paragraph 163 =================================

Uncertainty about the state of the world is only one of the  complications contributing to the problem of deciding what  to do. To reduce this complexity, classical decision theory  makes simplifying assumptions. The most restrictive of  these is the assumption that all of the alternatives to be de- cided between are given in advance. For example, if you are  looking for a new job, it would assume that all of the job  options are given, and it would focus on the problem of de- ciding which of the given options is most likely to result in  the best outcome.   But as [Keeney, 1992; Hammond et al., 1999; Carlson et  al., 2008]] and other decision analysts point out, this as- sumption is not only unrealistic as a descriptive model of  human decision making, but it is unhelpful as a normative  (or prescriptive) model: To make a good decision between  alternatives, it is necessary first to establish the goals (or  problem) that motivate the alternatives. These goals might  come from explicitly represented maintenance goals or they  might be hidden implicitly in lower-level heuristic rules or  stimulus-response associations.   

------------------- Sentence 1 -------------------

Uncertainty about the state of the world is only one of the  complications contributing to the problem of deciding what  to do. 


>> Tokens are: 
[Uncertainty, state, world,  , complications, contributing, problem, deciding,  , .] 

>> PoS Tags are: 
[('Uncertainty', 'NOUN'), ('state', 'NOUN'), ('world', 'NOUN'), (' ', 'SPACE'), ('complications', 'NOUN'), ('contributing', 'VERB'), ('problem', 'NOUN'), ('deciding', 'VERB'), (' ', 'SPACE'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Uncertainty', 'nsubj'), ('state', 'pobj'), ('world', 'pobj'), (' ', 'compound'), ('complications', 'pobj'), ('contributing', 'acl'), ('problem', 'pobj'), ('deciding', 'pcomp'), (' ', 'nsubj'), ('.', 'punct')]

>> Bigrams: 
[[Uncertainty, state], [state, world], [world,  ], [ , complications], [complications, contributing], [contributing, problem], [problem, deciding], [deciding,  ], [ , .]]

>> Trigrams: 
[[Uncertainty, state, world], [state, world,  ], [world,  , complications], [ , complications, contributing], [complications, contributing, problem], [contributing, problem, deciding], [problem, deciding,  ], [deciding,  , .]]

>> Noun Phrases are: 
[Uncertainty, the state, the world, the  complications, the problem, what]

>> Named Entities are: 
[('only one', 'CARDINAL')] 

------------------- Sentence 2 -------------------

To reduce this complexity, classical decision theory  makes simplifying assumptions. 


>> Tokens are: 
[reduce, complexity, ,, classical, decision, theory,  , makes, simplifying, assumptions, .] 

>> PoS Tags are: 
[('reduce', 'VERB'), ('complexity', 'NOUN'), (',', 'PUNCT'), ('classical', 'ADJ'), ('decision', 'NOUN'), ('theory', 'NOUN'), (' ', 'SPACE'), ('makes', 'VERB'), ('simplifying', 'VERB'), ('assumptions', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('reduce', 'advcl'), ('complexity', 'dobj'), (',', 'punct'), ('classical', 'amod'), ('decision', 'compound'), ('theory', 'nsubj'), (' ', 'nsubj'), ('makes', 'ROOT'), ('simplifying', 'xcomp'), ('assumptions', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[reduce, complexity], [complexity, ,], [,, classical], [classical, decision], [decision, theory], [theory,  ], [ , makes], [makes, simplifying], [simplifying, assumptions], [assumptions, .]]

>> Trigrams: 
[[reduce, complexity, ,], [complexity, ,, classical], [,, classical, decision], [classical, decision, theory], [decision, theory,  ], [theory,  , makes], [ , makes, simplifying], [makes, simplifying, assumptions], [simplifying, assumptions, .]]

>> Noun Phrases are: 
[this complexity, classical decision theory, assumptions]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

The most restrictive of  these is the assumption that all of the alternatives to be de- cided between are given in advance. 


>> Tokens are: 
[restrictive,  , assumption, alternatives, de-, cided, given, advance, .] 

>> PoS Tags are: 
[('restrictive', 'ADJ'), (' ', 'SPACE'), ('assumption', 'NOUN'), ('alternatives', 'NOUN'), ('de-', 'NOUN'), ('cided', 'VERB'), ('given', 'VERB'), ('advance', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('restrictive', 'nsubj'), (' ', 'pobj'), ('assumption', 'attr'), ('alternatives', 'pobj'), ('de-', 'attr'), ('cided', 'acl'), ('given', 'acl'), ('advance', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[restrictive,  ], [ , assumption], [assumption, alternatives], [alternatives, de-], [de-, cided], [cided, given], [given, advance], [advance, .]]

>> Trigrams: 
[[restrictive,  , assumption], [ , assumption, alternatives], [assumption, alternatives, de-], [alternatives, de-, cided], [de-, cided, given], [cided, given, advance], [given, advance, .]]

>> Noun Phrases are: 
[the assumption, the alternatives, de-, advance]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

For example, if you are  looking for a new job, it would assume that all of the job  options are given, and it would focus on the problem of de- ciding which of the given options is most likely to result in  the best outcome. 


>> Tokens are: 
[example, ,,  , looking, new, job, ,, assume, job,  , options, given, ,, focus, problem, de-, ciding, given, options, likely, result,  , best, outcome, .] 

>> PoS Tags are: 
[('example', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('looking', 'VERB'), ('new', 'ADJ'), ('job', 'NOUN'), (',', 'PUNCT'), ('assume', 'VERB'), ('job', 'NOUN'), (' ', 'SPACE'), ('options', 'NOUN'), ('given', 'VERB'), (',', 'PUNCT'), ('focus', 'VERB'), ('problem', 'NOUN'), ('de-', 'PROPN'), ('ciding', 'VERB'), ('given', 'VERB'), ('options', 'NOUN'), ('likely', 'ADJ'), ('result', 'VERB'), (' ', 'SPACE'), ('best', 'ADJ'), ('outcome', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('example', 'pobj'), (',', 'punct'), (' ', 'nsubj'), ('looking', 'advcl'), ('new', 'amod'), ('job', 'pobj'), (',', 'punct'), ('assume', 'ROOT'), ('job', 'pobj'), (' ', 'compound'), ('options', 'nsubjpass'), ('given', 'ccomp'), (',', 'punct'), ('focus', 'conj'), ('problem', 'pobj'), ('de-', 'nsubj'), ('ciding', 'pobj'), ('given', 'amod'), ('options', 'pobj'), ('likely', 'acomp'), ('result', 'xcomp'), (' ', 'pobj'), ('best', 'amod'), ('outcome', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[example, ,], [,,  ], [ , looking], [looking, new], [new, job], [job, ,], [,, assume], [assume, job], [job,  ], [ , options], [options, given], [given, ,], [,, focus], [focus, problem], [problem, de-], [de-, ciding], [ciding, given], [given, options], [options, likely], [likely, result], [result,  ], [ , best], [best, outcome], [outcome, .]]

>> Trigrams: 
[[example, ,,  ], [,,  , looking], [ , looking, new], [looking, new, job], [new, job, ,], [job, ,, assume], [,, assume, job], [assume, job,  ], [job,  , options], [ , options, given], [options, given, ,], [given, ,, focus], [,, focus, problem], [focus, problem, de-], [problem, de-, ciding], [de-, ciding, given], [ciding, given, options], [given, options, likely], [options, likely, result], [likely, result,  ], [result,  , best], [ , best, outcome], [best, outcome, .]]

>> Noun Phrases are: 
[example, you, a new job, it, the job,  options, it, the problem, de-, the given options, the best outcome]

>> Named Entities are: 
[] 

------------------- Sentence 5 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 6 -------------------

But 


>> Tokens are: 
[] 

>> PoS Tags are: 
[] 

>> Dependency Tags are: 
[]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 7 -------------------

as [Keeney, 1992; 


>> Tokens are: 
[[, Keeney, ,, 1992, ;] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('Keeney', 'PROPN'), (',', 'PUNCT'), ('1992', 'NUM'), (';', 'PUNCT')] 

>> Dependency Tags are: 
[('[', 'punct'), ('Keeney', 'pobj'), (',', 'punct'), ('1992', 'appos'), (';', 'punct')]

>> Bigrams: 
[[[, Keeney], [Keeney, ,], [,, 1992], [1992, ;]]

>> Trigrams: 
[[[, Keeney, ,], [Keeney, ,, 1992], [,, 1992, ;]]

>> Noun Phrases are: 
[Keeney]

>> Named Entities are: 
[('Keeney', 'PERSON'), ('1992', 'DATE')] 

------------------- Sentence 8 -------------------

Hammond et al., 1999; Carlson et   


>> Tokens are: 
[Hammond, et, al, ., ,, 1999, ;, Carlson, et,  ] 

>> PoS Tags are: 
[('Hammond', 'PROPN'), ('et', 'NOUN'), ('al', 'PROPN'), ('.', 'PROPN'), (',', 'PUNCT'), ('1999', 'NUM'), (';', 'PUNCT'), ('Carlson', 'PROPN'), ('et', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Hammond', 'compound'), ('et', 'compound'), ('al', 'ROOT'), ('.', 'punct'), (',', 'punct'), ('1999', 'appos'), (';', 'punct'), ('Carlson', 'appos'), ('et', 'appos'), (' ', 'appos')]

>> Bigrams: 
[[Hammond, et], [et, al], [al, .], [., ,], [,, 1999], [1999, ;], [;, Carlson], [Carlson, et], [et,  ]]

>> Trigrams: 
[[Hammond, et, al], [et, al, .], [al, ., ,], [., ,, 1999], [,, 1999, ;], [1999, ;, Carlson], [;, Carlson, et], [Carlson, et,  ]]

>> Noun Phrases are: 
[Hammond et al, Carlson, et]

>> Named Entities are: 
[('Hammond et al', 'PERSON'), ('1999', 'DATE'), ('Carlson', 'PERSON')] 

------------------- Sentence 9 -------------------

al., 2008]] and other decision analysts point out, this as- sumption is not only unrealistic as a descriptive model of  human decision making, but it is unhelpful as a normative  (or prescriptive) model: To make a good decision between  alternatives, it is necessary first to establish the goals (or  problem) that motivate the alternatives. 


>> Tokens are: 
[al, ., ,, 2008, ], ], decision, analysts, point, ,, as-, sumption, unrealistic, descriptive, model,  , human, decision, making, ,, unhelpful, normative,  , (, prescriptive, ), model, :, good, decision,  , alternatives, ,, necessary, establish, goals, (,  , problem, ), motivate, alternatives, .] 

>> PoS Tags are: 
[('al', 'PROPN'), ('.', 'PROPN'), (',', 'PUNCT'), ('2008', 'NUM'), (']', 'PUNCT'), (']', 'PUNCT'), ('decision', 'NOUN'), ('analysts', 'NOUN'), ('point', 'VERB'), (',', 'PUNCT'), ('as-', 'ADJ'), ('sumption', 'NOUN'), ('unrealistic', 'ADJ'), ('descriptive', 'ADJ'), ('model', 'NOUN'), (' ', 'SPACE'), ('human', 'ADJ'), ('decision', 'NOUN'), ('making', 'NOUN'), (',', 'PUNCT'), ('unhelpful', 'ADJ'), ('normative', 'ADJ'), (' ', 'SPACE'), ('(', 'PUNCT'), ('prescriptive', 'ADJ'), (')', 'PUNCT'), ('model', 'NOUN'), (':', 'PUNCT'), ('good', 'ADJ'), ('decision', 'NOUN'), (' ', 'SPACE'), ('alternatives', 'NOUN'), (',', 'PUNCT'), ('necessary', 'ADJ'), ('establish', 'VERB'), ('goals', 'NOUN'), ('(', 'PUNCT'), (' ', 'SPACE'), ('problem', 'NOUN'), (')', 'PUNCT'), ('motivate', 'VERB'), ('alternatives', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('al', 'nsubj'), ('.', 'punct'), (',', 'punct'), ('2008', 'appos'), (']', 'punct'), (']', 'punct'), ('decision', 'compound'), ('analysts', 'nsubj'), ('point', 'ccomp'), (',', 'punct'), ('as-', 'amod'), ('sumption', 'nsubj'), ('unrealistic', 'acomp'), ('descriptive', 'amod'), ('model', 'pobj'), (' ', 'nmod'), ('human', 'amod'), ('decision', 'compound'), ('making', 'pobj'), (',', 'punct'), ('unhelpful', 'acomp'), ('normative', 'amod'), (' ', 'pobj'), ('(', 'punct'), ('prescriptive', 'amod'), (')', 'punct'), ('model', 'conj'), (':', 'punct'), ('good', 'amod'), ('decision', 'dobj'), (' ', 'compound'), ('alternatives', 'pobj'), (',', 'punct'), ('necessary', 'acomp'), ('establish', 'xcomp'), ('goals', 'dobj'), ('(', 'punct'), (' ', 'compound'), ('problem', 'conj'), (')', 'punct'), ('motivate', 'relcl'), ('alternatives', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[al, .], [., ,], [,, 2008], [2008, ]], [], ]], [], decision], [decision, analysts], [analysts, point], [point, ,], [,, as-], [as-, sumption], [sumption, unrealistic], [unrealistic, descriptive], [descriptive, model], [model,  ], [ , human], [human, decision], [decision, making], [making, ,], [,, unhelpful], [unhelpful, normative], [normative,  ], [ , (], [(, prescriptive], [prescriptive, )], [), model], [model, :], [:, good], [good, decision], [decision,  ], [ , alternatives], [alternatives, ,], [,, necessary], [necessary, establish], [establish, goals], [goals, (], [(,  ], [ , problem], [problem, )], [), motivate], [motivate, alternatives], [alternatives, .]]

>> Trigrams: 
[[al, ., ,], [., ,, 2008], [,, 2008, ]], [2008, ], ]], [], ], decision], [], decision, analysts], [decision, analysts, point], [analysts, point, ,], [point, ,, as-], [,, as-, sumption], [as-, sumption, unrealistic], [sumption, unrealistic, descriptive], [unrealistic, descriptive, model], [descriptive, model,  ], [model,  , human], [ , human, decision], [human, decision, making], [decision, making, ,], [making, ,, unhelpful], [,, unhelpful, normative], [unhelpful, normative,  ], [normative,  , (], [ , (, prescriptive], [(, prescriptive, )], [prescriptive, ), model], [), model, :], [model, :, good], [:, good, decision], [good, decision,  ], [decision,  , alternatives], [ , alternatives, ,], [alternatives, ,, necessary], [,, necessary, establish], [necessary, establish, goals], [establish, goals, (], [goals, (,  ], [(,  , problem], [ , problem, )], [problem, ), motivate], [), motivate, alternatives], [motivate, alternatives, .]]

>> Noun Phrases are: 
[al, other decision analysts, this as- sumption, a descriptive model,  human decision making, it, prescriptive) model, a good decision,  alternatives, it, the goals,  problem, the alternatives]

>> Named Entities are: 
[('first', 'ORDINAL')] 

------------------- Sentence 10 -------------------

These goals might  come from explicitly represented maintenance goals or they  might be hidden implicitly in lower-level heuristic rules or  stimulus-response associations. 


>> Tokens are: 
[goals,  , come, explicitly, represented, maintenance, goals,  , hidden, implicitly, lower, -, level, heuristic, rules,  , stimulus, -, response, associations, .] 

>> PoS Tags are: 
[('goals', 'NOUN'), (' ', 'SPACE'), ('come', 'VERB'), ('explicitly', 'ADV'), ('represented', 'VERB'), ('maintenance', 'NOUN'), ('goals', 'NOUN'), (' ', 'SPACE'), ('hidden', 'VERB'), ('implicitly', 'ADV'), ('lower', 'ADJ'), ('-', 'PUNCT'), ('level', 'NOUN'), ('heuristic', 'ADJ'), ('rules', 'NOUN'), (' ', 'SPACE'), ('stimulus', 'ADJ'), ('-', 'PUNCT'), ('response', 'NOUN'), ('associations', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('goals', 'nsubj'), (' ', 'nsubj'), ('come', 'ROOT'), ('explicitly', 'advmod'), ('represented', 'amod'), ('maintenance', 'compound'), ('goals', 'pobj'), (' ', 'nsubjpass'), ('hidden', 'conj'), ('implicitly', 'advmod'), ('lower', 'amod'), ('-', 'punct'), ('level', 'nmod'), ('heuristic', 'amod'), ('rules', 'pobj'), (' ', 'nmod'), ('stimulus', 'amod'), ('-', 'punct'), ('response', 'compound'), ('associations', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[goals,  ], [ , come], [come, explicitly], [explicitly, represented], [represented, maintenance], [maintenance, goals], [goals,  ], [ , hidden], [hidden, implicitly], [implicitly, lower], [lower, -], [-, level], [level, heuristic], [heuristic, rules], [rules,  ], [ , stimulus], [stimulus, -], [-, response], [response, associations], [associations, .]]

>> Trigrams: 
[[goals,  , come], [ , come, explicitly], [come, explicitly, represented], [explicitly, represented, maintenance], [represented, maintenance, goals], [maintenance, goals,  ], [goals,  , hidden], [ , hidden, implicitly], [hidden, implicitly, lower], [implicitly, lower, -], [lower, -, level], [-, level, heuristic], [level, heuristic, rules], [heuristic, rules,  ], [rules,  , stimulus], [ , stimulus, -], [stimulus, -, response], [-, response, associations], [response, associations, .]]

>> Noun Phrases are: 
[These goals, explicitly represented maintenance goals, they, lower-level heuristic rules,  stimulus-response associations]

>> Named Entities are: 
[] 

------------------- Sentence 11 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 164 =================================

For example, you might receive an offer of a new job  when you are not looking for one, and you may be tempted  to limit your options simply to deciding between accepting  or rejecting the offer. But if you step back and think about  the broader context of your goals, then you might generate  other alternatives, like perhaps using the job offer to negoti- ate an improvement in your current employment.  

------------------- Sentence 1 -------------------

For example, you might receive an offer of a new job  when you are not looking for one, and you may be tempted  to limit your options simply to deciding between accepting  or rejecting the offer. 


>> Tokens are: 
[example, ,, receive, offer, new, job,  , looking, ,, tempted,  , limit, options, simply, deciding, accepting,  , rejecting, offer, .] 

>> PoS Tags are: 
[('example', 'NOUN'), (',', 'PUNCT'), ('receive', 'VERB'), ('offer', 'NOUN'), ('new', 'ADJ'), ('job', 'NOUN'), (' ', 'SPACE'), ('looking', 'VERB'), (',', 'PUNCT'), ('tempted', 'VERB'), (' ', 'SPACE'), ('limit', 'VERB'), ('options', 'NOUN'), ('simply', 'ADV'), ('deciding', 'VERB'), ('accepting', 'VERB'), (' ', 'SPACE'), ('rejecting', 'VERB'), ('offer', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('example', 'pobj'), (',', 'punct'), ('receive', 'ROOT'), ('offer', 'dobj'), ('new', 'amod'), ('job', 'pobj'), (' ', 'appos'), ('looking', 'advcl'), (',', 'punct'), ('tempted', 'conj'), (' ', 'dobj'), ('limit', 'advcl'), ('options', 'dobj'), ('simply', 'advmod'), ('deciding', 'pcomp'), ('accepting', 'pcomp'), (' ', 'dobj'), ('rejecting', 'conj'), ('offer', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[example, ,], [,, receive], [receive, offer], [offer, new], [new, job], [job,  ], [ , looking], [looking, ,], [,, tempted], [tempted,  ], [ , limit], [limit, options], [options, simply], [simply, deciding], [deciding, accepting], [accepting,  ], [ , rejecting], [rejecting, offer], [offer, .]]

>> Trigrams: 
[[example, ,, receive], [,, receive, offer], [receive, offer, new], [offer, new, job], [new, job,  ], [job,  , looking], [ , looking, ,], [looking, ,, tempted], [,, tempted,  ], [tempted,  , limit], [ , limit, options], [limit, options, simply], [options, simply, deciding], [simply, deciding, accepting], [deciding, accepting,  ], [accepting,  , rejecting], [ , rejecting, offer], [rejecting, offer, .]]

>> Noun Phrases are: 
[example, you, an offer, a new job, you, you, your options, the offer]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

But if you step back and think about  the broader context of your goals, then you might generate  other alternatives, like perhaps using the job offer to negoti- ate an improvement in your current employment. 


>> Tokens are: 
[step, think,  , broader, context, goals, ,, generate,  , alternatives, ,, like, job, offer, negoti-, ate, improvement, current, employment, .] 

>> PoS Tags are: 
[('step', 'VERB'), ('think', 'VERB'), (' ', 'SPACE'), ('broader', 'ADJ'), ('context', 'NOUN'), ('goals', 'NOUN'), (',', 'PUNCT'), ('generate', 'VERB'), (' ', 'SPACE'), ('alternatives', 'NOUN'), (',', 'PUNCT'), ('like', 'ADP'), ('job', 'NOUN'), ('offer', 'NOUN'), ('negoti-', 'NOUN'), ('ate', 'VERB'), ('improvement', 'NOUN'), ('current', 'ADJ'), ('employment', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('step', 'advcl'), ('think', 'conj'), (' ', 'pobj'), ('broader', 'amod'), ('context', 'dobj'), ('goals', 'pobj'), (',', 'punct'), ('generate', 'ROOT'), (' ', 'nmod'), ('alternatives', 'dobj'), (',', 'punct'), ('like', 'prep'), ('job', 'compound'), ('offer', 'dobj'), ('negoti-', 'pobj'), ('ate', 'dep'), ('improvement', 'dobj'), ('current', 'amod'), ('employment', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[step, think], [think,  ], [ , broader], [broader, context], [context, goals], [goals, ,], [,, generate], [generate,  ], [ , alternatives], [alternatives, ,], [,, like], [like, job], [job, offer], [offer, negoti-], [negoti-, ate], [ate, improvement], [improvement, current], [current, employment], [employment, .]]

>> Trigrams: 
[[step, think,  ], [think,  , broader], [ , broader, context], [broader, context, goals], [context, goals, ,], [goals, ,, generate], [,, generate,  ], [generate,  , alternatives], [ , alternatives, ,], [alternatives, ,, like], [,, like, job], [like, job, offer], [job, offer, negoti-], [offer, negoti-, ate], [negoti-, ate, improvement], [ate, improvement, current], [improvement, current, employment], [current, employment, .]]

>> Noun Phrases are: 
[you, the broader context, your goals, you,  other alternatives, the job offer, negoti-, an improvement, your current employment]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 165 =================================

Decision analysis provides informal strategies for making  better choices by paying greater attention to the goals that  motivate the alternatives. The ALP agent model provides a  simple framework, which can help to formalize such strate- gies, by integrating them with a comprehensive model of  human thinking. In particular, it shows how the same crite- ria of expected utility, which are used in classical decision  theory to choose between alternatives, can also be used to  guide the search for alternatives in some form of best-first  search. Moreover, it shows how heuristics and even stimu- lus-responses can be integrated with logical thinking and  decision theory in the spirit of dual process models.  

------------------- Sentence 1 -------------------

Decision analysis provides informal strategies for making  better choices by paying greater attention to the goals that  motivate the alternatives. 


>> Tokens are: 
[Decision, analysis, provides, informal, strategies, making,  , better, choices, paying, greater, attention, goals,  , motivate, alternatives, .] 

>> PoS Tags are: 
[('Decision', 'NOUN'), ('analysis', 'NOUN'), ('provides', 'VERB'), ('informal', 'ADJ'), ('strategies', 'NOUN'), ('making', 'VERB'), (' ', 'SPACE'), ('better', 'ADJ'), ('choices', 'NOUN'), ('paying', 'VERB'), ('greater', 'ADJ'), ('attention', 'NOUN'), ('goals', 'NOUN'), (' ', 'SPACE'), ('motivate', 'VERB'), ('alternatives', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Decision', 'compound'), ('analysis', 'nsubj'), ('provides', 'ROOT'), ('informal', 'amod'), ('strategies', 'dobj'), ('making', 'pcomp'), (' ', 'nsubj'), ('better', 'amod'), ('choices', 'dobj'), ('paying', 'pcomp'), ('greater', 'amod'), ('attention', 'dobj'), ('goals', 'pobj'), (' ', 'nsubj'), ('motivate', 'relcl'), ('alternatives', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Decision, analysis], [analysis, provides], [provides, informal], [informal, strategies], [strategies, making], [making,  ], [ , better], [better, choices], [choices, paying], [paying, greater], [greater, attention], [attention, goals], [goals,  ], [ , motivate], [motivate, alternatives], [alternatives, .]]

>> Trigrams: 
[[Decision, analysis, provides], [analysis, provides, informal], [provides, informal, strategies], [informal, strategies, making], [strategies, making,  ], [making,  , better], [ , better, choices], [better, choices, paying], [choices, paying, greater], [paying, greater, attention], [greater, attention, goals], [attention, goals,  ], [goals,  , motivate], [ , motivate, alternatives], [motivate, alternatives, .]]

>> Noun Phrases are: 
[Decision analysis, informal strategies,  better choices, greater attention, the goals, the alternatives]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

The ALP agent model provides a  simple framework, which can help to formalize such strate- gies, by integrating them with a comprehensive model of  human thinking. 


>> Tokens are: 
[ALP, agent, model, provides,  , simple, framework, ,, help, formalize, strate-, gies, ,, integrating, comprehensive, model,  , human, thinking, .] 

>> PoS Tags are: 
[('ALP', 'PROPN'), ('agent', 'NOUN'), ('model', 'NOUN'), ('provides', 'VERB'), (' ', 'SPACE'), ('simple', 'ADJ'), ('framework', 'NOUN'), (',', 'PUNCT'), ('help', 'VERB'), ('formalize', 'VERB'), ('strate-', 'NOUN'), ('gies', 'NOUN'), (',', 'PUNCT'), ('integrating', 'VERB'), ('comprehensive', 'ADJ'), ('model', 'NOUN'), (' ', 'SPACE'), ('human', 'ADJ'), ('thinking', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('ALP', 'compound'), ('agent', 'compound'), ('model', 'nsubj'), ('provides', 'ROOT'), (' ', 'nmod'), ('simple', 'amod'), ('framework', 'dobj'), (',', 'punct'), ('help', 'relcl'), ('formalize', 'xcomp'), ('strate-', 'compound'), ('gies', 'dobj'), (',', 'punct'), ('integrating', 'pcomp'), ('comprehensive', 'amod'), ('model', 'pobj'), (' ', 'nmod'), ('human', 'amod'), ('thinking', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[ALP, agent], [agent, model], [model, provides], [provides,  ], [ , simple], [simple, framework], [framework, ,], [,, help], [help, formalize], [formalize, strate-], [strate-, gies], [gies, ,], [,, integrating], [integrating, comprehensive], [comprehensive, model], [model,  ], [ , human], [human, thinking], [thinking, .]]

>> Trigrams: 
[[ALP, agent, model], [agent, model, provides], [model, provides,  ], [provides,  , simple], [ , simple, framework], [simple, framework, ,], [framework, ,, help], [,, help, formalize], [help, formalize, strate-], [formalize, strate-, gies], [strate-, gies, ,], [gies, ,, integrating], [,, integrating, comprehensive], [integrating, comprehensive, model], [comprehensive, model,  ], [model,  , human], [ , human, thinking], [human, thinking, .]]

>> Noun Phrases are: 
[The ALP agent model, a  simple framework, such strate- gies, them, a comprehensive model,  human thinking]

>> Named Entities are: 
[('ALP', 'ORG')] 

------------------- Sentence 3 -------------------

In particular, it shows how the same crite- ria of expected utility, which are used in classical decision  theory to choose between alternatives, can also be used to  guide the search for alternatives in some form of best-first  search. 


>> Tokens are: 
[particular, ,, shows, crite-, ria, expected, utility, ,, classical, decision,  , theory, choose, alternatives, ,,  , guide, search, alternatives, form, best, -,  , search, .] 

>> PoS Tags are: 
[('particular', 'ADJ'), (',', 'PUNCT'), ('shows', 'VERB'), ('crite-', 'NOUN'), ('ria', 'NOUN'), ('expected', 'VERB'), ('utility', 'NOUN'), (',', 'PUNCT'), ('classical', 'ADJ'), ('decision', 'NOUN'), (' ', 'SPACE'), ('theory', 'NOUN'), ('choose', 'VERB'), ('alternatives', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('guide', 'VERB'), ('search', 'NOUN'), ('alternatives', 'NOUN'), ('form', 'NOUN'), ('best', 'ADJ'), ('-', 'PUNCT'), (' ', 'SPACE'), ('search', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('particular', 'amod'), (',', 'punct'), ('shows', 'ROOT'), ('crite-', 'compound'), ('ria', 'ccomp'), ('expected', 'amod'), ('utility', 'pobj'), (',', 'punct'), ('classical', 'amod'), ('decision', 'pobj'), (' ', 'compound'), ('theory', 'dobj'), ('choose', 'relcl'), ('alternatives', 'pobj'), (',', 'punct'), (' ', 'pobj'), ('guide', 'xcomp'), ('search', 'dobj'), ('alternatives', 'pobj'), ('form', 'pobj'), ('best', 'advmod'), ('-', 'punct'), (' ', 'compound'), ('search', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[particular, ,], [,, shows], [shows, crite-], [crite-, ria], [ria, expected], [expected, utility], [utility, ,], [,, classical], [classical, decision], [decision,  ], [ , theory], [theory, choose], [choose, alternatives], [alternatives, ,], [,,  ], [ , guide], [guide, search], [search, alternatives], [alternatives, form], [form, best], [best, -], [-,  ], [ , search], [search, .]]

>> Trigrams: 
[[particular, ,, shows], [,, shows, crite-], [shows, crite-, ria], [crite-, ria, expected], [ria, expected, utility], [expected, utility, ,], [utility, ,, classical], [,, classical, decision], [classical, decision,  ], [decision,  , theory], [ , theory, choose], [theory, choose, alternatives], [choose, alternatives, ,], [alternatives, ,,  ], [,,  , guide], [ , guide, search], [guide, search, alternatives], [search, alternatives, form], [alternatives, form, best], [form, best, -], [best, -,  ], [-,  , search], [ , search, .]]

>> Noun Phrases are: 
[it, expected utility, classical decision,  theory, alternatives, the search, alternatives, some form, best-first  search]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

Moreover, it shows how heuristics and even stimu- lus-responses can be integrated with logical thinking and  decision theory in the spirit of dual process models. 


>> Tokens are: 
[,, shows, heuristics, stimu-, lus, -, responses, integrated, logical, thinking,  , decision, theory, spirit, dual, process, models, .] 

>> PoS Tags are: 
[(',', 'PUNCT'), ('shows', 'VERB'), ('heuristics', 'NOUN'), ('stimu-', 'ADJ'), ('lus', 'NOUN'), ('-', 'PUNCT'), ('responses', 'NOUN'), ('integrated', 'VERB'), ('logical', 'ADJ'), ('thinking', 'NOUN'), (' ', 'SPACE'), ('decision', 'NOUN'), ('theory', 'NOUN'), ('spirit', 'NOUN'), ('dual', 'ADJ'), ('process', 'NOUN'), ('models', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(',', 'punct'), ('shows', 'ROOT'), ('heuristics', 'nsubjpass'), ('stimu-', 'conj'), ('lus', 'compound'), ('-', 'punct'), ('responses', 'conj'), ('integrated', 'ccomp'), ('logical', 'amod'), ('thinking', 'pobj'), (' ', 'compound'), ('decision', 'compound'), ('theory', 'conj'), ('spirit', 'pobj'), ('dual', 'amod'), ('process', 'compound'), ('models', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[,, shows], [shows, heuristics], [heuristics, stimu-], [stimu-, lus], [lus, -], [-, responses], [responses, integrated], [integrated, logical], [logical, thinking], [thinking,  ], [ , decision], [decision, theory], [theory, spirit], [spirit, dual], [dual, process], [process, models], [models, .]]

>> Trigrams: 
[[,, shows, heuristics], [shows, heuristics, stimu-], [heuristics, stimu-, lus], [stimu-, lus, -], [lus, -, responses], [-, responses, integrated], [responses, integrated, logical], [integrated, logical, thinking], [logical, thinking,  ], [thinking,  , decision], [ , decision, theory], [decision, theory, spirit], [theory, spirit, dual], [spirit, dual, process], [dual, process, models], [process, models, .]]

>> Noun Phrases are: 
[it, heuristics, lus-responses, logical thinking,  decision theory, the spirit, dual process models]

>> Named Entities are: 
[] 

------------------- Sentence 5 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 166 =================================

7 Conclusions  

------------------- Sentence 1 -------------------

7 Conclusions   


>> Tokens are: 
[7, Conclusions,  ] 

>> PoS Tags are: 
[('7', 'NUM'), ('Conclusions', 'PROPN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('7', 'nummod'), ('Conclusions', 'ROOT'), (' ', 'nummod')]

>> Bigrams: 
[[7, Conclusions], [Conclusions,  ]]

>> Trigrams: 
[[7, Conclusions,  ]]

>> Noun Phrases are: 
[7 Conclusions]

>> Named Entities are: 
[] 


================================ Paragraph 167 =================================

I have sketched two ways in which the ALP agent model,  building upon many different developments in Artificial  Intelligence, can be used by ordinary people to improve  their own human intelligence. It can help them express their  thoughts more clearly and coherently, and it can help them  make better choices. I believe that the application of such  techniques is a fruitful direction of research for the future,  and a promising area for collaboration between researchers  in AI and researchers in more humanistic disciplines.   

------------------- Sentence 1 -------------------

I have sketched two ways in which the ALP agent model,  building upon many different developments in Artificial  Intelligence, can be used by ordinary people to improve  their own human intelligence. 


>> Tokens are: 
[sketched, ways, ALP, agent, model, ,,  , building, different, developments, Artificial,  , Intelligence, ,, ordinary, people, improve,  , human, intelligence, .] 

>> PoS Tags are: 
[('sketched', 'VERB'), ('ways', 'NOUN'), ('ALP', 'PROPN'), ('agent', 'NOUN'), ('model', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('building', 'VERB'), ('different', 'ADJ'), ('developments', 'NOUN'), ('Artificial', 'PROPN'), (' ', 'SPACE'), ('Intelligence', 'PROPN'), (',', 'PUNCT'), ('ordinary', 'ADJ'), ('people', 'NOUN'), ('improve', 'VERB'), (' ', 'SPACE'), ('human', 'ADJ'), ('intelligence', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('sketched', 'ROOT'), ('ways', 'dobj'), ('ALP', 'compound'), ('agent', 'compound'), ('model', 'relcl'), (',', 'punct'), (' ', 'nsubj'), ('building', 'advcl'), ('different', 'amod'), ('developments', 'pobj'), ('Artificial', 'compound'), (' ', 'compound'), ('Intelligence', 'pobj'), (',', 'punct'), ('ordinary', 'amod'), ('people', 'pobj'), ('improve', 'xcomp'), (' ', 'dobj'), ('human', 'amod'), ('intelligence', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[sketched, ways], [ways, ALP], [ALP, agent], [agent, model], [model, ,], [,,  ], [ , building], [building, different], [different, developments], [developments, Artificial], [Artificial,  ], [ , Intelligence], [Intelligence, ,], [,, ordinary], [ordinary, people], [people, improve], [improve,  ], [ , human], [human, intelligence], [intelligence, .]]

>> Trigrams: 
[[sketched, ways, ALP], [ways, ALP, agent], [ALP, agent, model], [agent, model, ,], [model, ,,  ], [,,  , building], [ , building, different], [building, different, developments], [different, developments, Artificial], [developments, Artificial,  ], [Artificial,  , Intelligence], [ , Intelligence, ,], [Intelligence, ,, ordinary], [,, ordinary, people], [ordinary, people, improve], [people, improve,  ], [improve,  , human], [ , human, intelligence], [human, intelligence, .]]

>> Noun Phrases are: 
[I, two ways, many different developments, Artificial  Intelligence, ordinary people, their own human intelligence]

>> Named Entities are: 
[('two', 'CARDINAL'), ('ALP', 'ORG'), ('Intelligence', 'ORG')] 

------------------- Sentence 2 -------------------

It can help them express their  thoughts more clearly and coherently, and it can help them  make better choices. 


>> Tokens are: 
[help, express,  , thoughts, clearly, coherently, ,, help,  , better, choices, .] 

>> PoS Tags are: 
[('help', 'VERB'), ('express', 'VERB'), (' ', 'SPACE'), ('thoughts', 'NOUN'), ('clearly', 'ADV'), ('coherently', 'ADV'), (',', 'PUNCT'), ('help', 'VERB'), (' ', 'SPACE'), ('better', 'ADJ'), ('choices', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('help', 'ROOT'), ('express', 'ccomp'), (' ', 'compound'), ('thoughts', 'dobj'), ('clearly', 'advmod'), ('coherently', 'conj'), (',', 'punct'), ('help', 'conj'), (' ', 'nsubj'), ('better', 'amod'), ('choices', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[help, express], [express,  ], [ , thoughts], [thoughts, clearly], [clearly, coherently], [coherently, ,], [,, help], [help,  ], [ , better], [better, choices], [choices, .]]

>> Trigrams: 
[[help, express,  ], [express,  , thoughts], [ , thoughts, clearly], [thoughts, clearly, coherently], [clearly, coherently, ,], [coherently, ,, help], [,, help,  ], [help,  , better], [ , better, choices], [better, choices, .]]

>> Noun Phrases are: 
[It, them, their  thoughts, it, them, better choices]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

I believe that the application of such  techniques is a fruitful direction of research for the future,  and a promising area for collaboration between researchers  in AI and researchers in more humanistic disciplines. 


>> Tokens are: 
[believe, application,  , techniques, fruitful, direction, research, future, ,,  , promising, area, collaboration, researchers,  , AI, researchers, humanistic, disciplines, .] 

>> PoS Tags are: 
[('believe', 'VERB'), ('application', 'NOUN'), (' ', 'SPACE'), ('techniques', 'NOUN'), ('fruitful', 'ADJ'), ('direction', 'NOUN'), ('research', 'NOUN'), ('future', 'NOUN'), (',', 'PUNCT'), (' ', 'SPACE'), ('promising', 'ADJ'), ('area', 'NOUN'), ('collaboration', 'NOUN'), ('researchers', 'NOUN'), (' ', 'SPACE'), ('AI', 'PROPN'), ('researchers', 'NOUN'), ('humanistic', 'ADJ'), ('disciplines', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('believe', 'ROOT'), ('application', 'nsubj'), (' ', 'compound'), ('techniques', 'pobj'), ('fruitful', 'amod'), ('direction', 'attr'), ('research', 'pobj'), ('future', 'pobj'), (',', 'punct'), (' ', 'conj'), ('promising', 'amod'), ('area', 'conj'), ('collaboration', 'pobj'), ('researchers', 'pobj'), (' ', 'appos'), ('AI', 'pobj'), ('researchers', 'conj'), ('humanistic', 'amod'), ('disciplines', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[believe, application], [application,  ], [ , techniques], [techniques, fruitful], [fruitful, direction], [direction, research], [research, future], [future, ,], [,,  ], [ , promising], [promising, area], [area, collaboration], [collaboration, researchers], [researchers,  ], [ , AI], [AI, researchers], [researchers, humanistic], [humanistic, disciplines], [disciplines, .]]

>> Trigrams: 
[[believe, application,  ], [application,  , techniques], [ , techniques, fruitful], [techniques, fruitful, direction], [fruitful, direction, research], [direction, research, future], [research, future, ,], [future, ,,  ], [,,  , promising], [ , promising, area], [promising, area, collaboration], [area, collaboration, researchers], [collaboration, researchers,  ], [researchers,  , AI], [ , AI, researchers], [AI, researchers, humanistic], [researchers, humanistic, disciplines], [humanistic, disciplines, .]]

>> Noun Phrases are: 
[I, the application, such  techniques, a fruitful direction, research, the future, a promising area, collaboration, researchers, AI, researchers, more humanistic disciplines]

>> Named Entities are: 
[('AI', 'ORG')] 

------------------- Sentence 4 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 168 =================================

Acknowledgments  

------------------- Sentence 1 -------------------

Acknowledgments   


>> Tokens are: 
[Acknowledgments,  ] 

>> PoS Tags are: 
[('Acknowledgments', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Acknowledgments', 'ROOT'), (' ', 'nummod')]

>> Bigrams: 
[[Acknowledgments,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Acknowledgments]

>> Named Entities are: 
[] 


================================ Paragraph 169 =================================

Many thanks to Tony Burton, Keith Clark, Jacinto Davila,  Luis Pereira, Fariba Sadri and Maarten van Emden and  Toby Walsh for their helpful comments on earlier drafts of  this paper.  

------------------- Sentence 1 -------------------

Many thanks to Tony Burton, Keith Clark, Jacinto Davila,  Luis Pereira, Fariba Sadri and Maarten van Emden and 


>> Tokens are: 
[thanks, Tony, Burton, ,, Keith, Clark, ,, Jacinto, Davila, ,,  , Luis, Pereira, ,, Fariba, Sadri, Maarten, van, Emden] 

>> PoS Tags are: 
[('thanks', 'NOUN'), ('Tony', 'PROPN'), ('Burton', 'PROPN'), (',', 'PUNCT'), ('Keith', 'PROPN'), ('Clark', 'PROPN'), (',', 'PUNCT'), ('Jacinto', 'PROPN'), ('Davila', 'PROPN'), (',', 'PUNCT'), (' ', 'SPACE'), ('Luis', 'PROPN'), ('Pereira', 'PROPN'), (',', 'PUNCT'), ('Fariba', 'PROPN'), ('Sadri', 'PROPN'), ('Maarten', 'PROPN'), ('van', 'PROPN'), ('Emden', 'PROPN')] 

>> Dependency Tags are: 
[('thanks', 'ROOT'), ('Tony', 'compound'), ('Burton', 'pobj'), (',', 'punct'), ('Keith', 'compound'), ('Clark', 'conj'), (',', 'punct'), ('Jacinto', 'compound'), ('Davila', 'conj'), (',', 'punct'), (' ', 'npadvmod'), ('Luis', 'compound'), ('Pereira', 'appos'), (',', 'punct'), ('Fariba', 'compound'), ('Sadri', 'conj'), ('Maarten', 'compound'), ('van', 'compound'), ('Emden', 'conj')]

>> Bigrams: 
[[thanks, Tony], [Tony, Burton], [Burton, ,], [,, Keith], [Keith, Clark], [Clark, ,], [,, Jacinto], [Jacinto, Davila], [Davila, ,], [,,  ], [ , Luis], [Luis, Pereira], [Pereira, ,], [,, Fariba], [Fariba, Sadri], [Sadri, Maarten], [Maarten, van], [van, Emden]]

>> Trigrams: 
[[thanks, Tony, Burton], [Tony, Burton, ,], [Burton, ,, Keith], [,, Keith, Clark], [Keith, Clark, ,], [Clark, ,, Jacinto], [,, Jacinto, Davila], [Jacinto, Davila, ,], [Davila, ,,  ], [,,  , Luis], [ , Luis, Pereira], [Luis, Pereira, ,], [Pereira, ,, Fariba], [,, Fariba, Sadri], [Fariba, Sadri, Maarten], [Sadri, Maarten, van], [Maarten, van, Emden]]

>> Noun Phrases are: 
[Many thanks, Tony Burton, Keith Clark, Jacinto Davila, Luis Pereira, Fariba Sadri, Maarten van Emden]

>> Named Entities are: 
[('Tony Burton', 'PERSON'), ('Keith Clark', 'PERSON'), ('Jacinto', 'GPE'), ('Davila', 'GPE'), ('Luis Pereira', 'PERSON'), ('Fariba Sadri', 'GPE'), ('Maarten van Emden', 'PERSON')] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

Toby Walsh for their helpful comments on earlier drafts of  this paper. 


>> Tokens are: 
[Toby, Walsh, helpful, comments, earlier, drafts,  , paper, .] 

>> PoS Tags are: 
[('Toby', 'PROPN'), ('Walsh', 'PROPN'), ('helpful', 'ADJ'), ('comments', 'NOUN'), ('earlier', 'ADJ'), ('drafts', 'NOUN'), (' ', 'SPACE'), ('paper', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Toby', 'compound'), ('Walsh', 'nsubj'), ('helpful', 'amod'), ('comments', 'pobj'), ('earlier', 'amod'), ('drafts', 'pobj'), (' ', 'pobj'), ('paper', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Toby, Walsh], [Walsh, helpful], [helpful, comments], [comments, earlier], [earlier, drafts], [drafts,  ], [ , paper], [paper, .]]

>> Trigrams: 
[[Toby, Walsh, helpful], [Walsh, helpful, comments], [helpful, comments, earlier], [comments, earlier, drafts], [earlier, drafts,  ], [drafts,  , paper], [ , paper, .]]

>> Noun Phrases are: 
[Toby Walsh, their helpful comments, earlier drafts]

>> Named Entities are: 
[('Toby Walsh', 'PERSON')] 

------------------- Sentence 4 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 170 =================================

References  

------------------- Sentence 1 -------------------

References   


>> Tokens are: 
[References,  ] 

>> PoS Tags are: 
[('References', 'NOUN'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('References', 'ROOT'), (' ', 'nummod')]

>> Bigrams: 
[[References,  ]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[References]

>> Named Entities are: 
[] 


================================ Paragraph 171 =================================

[Carlson et al., 2008] Kurt A. Carlson, Chris Janiszewski,  Ralph L. Keeney, David H. Krantz, Howard C. Kun- reuther, Mary Frances Luce, J. Edward Russo, Stijn M.  J. van Osselaer and Detlof von Winterfeldt. A theoretical  framework for goal-based choice and for prescriptive  analysis. Marketing Letters, 19(3-4):241-254.  

------------------- Sentence 1 -------------------

[Carlson et al., 2008] 


>> Tokens are: 
[[, Carlson, et, al, ., ,, 2008, ]] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('Carlson', 'PROPN'), ('et', 'PROPN'), ('al', 'PROPN'), ('.', 'PROPN'), (',', 'PUNCT'), ('2008', 'NUM'), (']', 'PUNCT')] 

>> Dependency Tags are: 
[('[', 'punct'), ('Carlson', 'compound'), ('et', 'compound'), ('al', 'ROOT'), ('.', 'punct'), (',', 'punct'), ('2008', 'appos'), (']', 'punct')]

>> Bigrams: 
[[[, Carlson], [Carlson, et], [et, al], [al, .], [., ,], [,, 2008], [2008, ]]]

>> Trigrams: 
[[[, Carlson, et], [Carlson, et, al], [et, al, .], [al, ., ,], [., ,, 2008], [,, 2008, ]]]

>> Noun Phrases are: 
[[Carlson et al]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

Kurt A. Carlson, Chris Janiszewski,   


>> Tokens are: 
[Kurt, A., Carlson, ,, Chris, Janiszewski, ,,  ] 

>> PoS Tags are: 
[('Kurt', 'PROPN'), ('A.', 'PROPN'), ('Carlson', 'PROPN'), (',', 'PUNCT'), ('Chris', 'PROPN'), ('Janiszewski', 'PROPN'), (',', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Kurt', 'compound'), ('A.', 'compound'), ('Carlson', 'ROOT'), (',', 'punct'), ('Chris', 'compound'), ('Janiszewski', 'appos'), (',', 'punct'), (' ', 'punct')]

>> Bigrams: 
[[Kurt, A.], [A., Carlson], [Carlson, ,], [,, Chris], [Chris, Janiszewski], [Janiszewski, ,], [,,  ]]

>> Trigrams: 
[[Kurt, A., Carlson], [A., Carlson, ,], [Carlson, ,, Chris], [,, Chris, Janiszewski], [Chris, Janiszewski, ,], [Janiszewski, ,,  ]]

>> Noun Phrases are: 
[Kurt A. Carlson, Chris Janiszewski]

>> Named Entities are: 
[('Chris Janiszewski', 'PERSON')] 

------------------- Sentence 3 -------------------

Ralph L. Keeney, David H. Krantz, Howard C. Kun- reuther, Mary Frances Luce, J. Edward Russo, Stijn M.  J. van Osselaer and Detlof von Winterfeldt. 


>> Tokens are: 
[Ralph, L., Keeney, ,, David, H., Krantz, ,, Howard, C., Kun-, reuther, ,, Mary, Frances, Luce, ,, J., Edward, Russo, ,, Stijn, M.,  , J., van, Osselaer, Detlof, von, Winterfeldt, .] 

>> PoS Tags are: 
[('Ralph', 'PROPN'), ('L.', 'PROPN'), ('Keeney', 'PROPN'), (',', 'PUNCT'), ('David', 'PROPN'), ('H.', 'PROPN'), ('Krantz', 'PROPN'), (',', 'PUNCT'), ('Howard', 'PROPN'), ('C.', 'PROPN'), ('Kun-', 'PROPN'), ('reuther', 'NOUN'), (',', 'PUNCT'), ('Mary', 'PROPN'), ('Frances', 'PROPN'), ('Luce', 'PROPN'), (',', 'PUNCT'), ('J.', 'PROPN'), ('Edward', 'PROPN'), ('Russo', 'PROPN'), (',', 'PUNCT'), ('Stijn', 'PROPN'), ('M.', 'PROPN'), (' ', 'SPACE'), ('J.', 'PROPN'), ('van', 'PROPN'), ('Osselaer', 'PROPN'), ('Detlof', 'PROPN'), ('von', 'PROPN'), ('Winterfeldt', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Ralph', 'compound'), ('L.', 'compound'), ('Keeney', 'ROOT'), (',', 'punct'), ('David', 'compound'), ('H.', 'compound'), ('Krantz', 'appos'), (',', 'punct'), ('Howard', 'compound'), ('C.', 'compound'), ('Kun-', 'compound'), ('reuther', 'conj'), (',', 'punct'), ('Mary', 'compound'), ('Frances', 'compound'), ('Luce', 'conj'), (',', 'punct'), ('J.', 'compound'), ('Edward', 'compound'), ('Russo', 'appos'), (',', 'punct'), ('Stijn', 'compound'), ('M.', 'compound'), (' ', 'compound'), ('J.', 'compound'), ('van', 'compound'), ('Osselaer', 'conj'), ('Detlof', 'compound'), ('von', 'compound'), ('Winterfeldt', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[Ralph, L.], [L., Keeney], [Keeney, ,], [,, David], [David, H.], [H., Krantz], [Krantz, ,], [,, Howard], [Howard, C.], [C., Kun-], [Kun-, reuther], [reuther, ,], [,, Mary], [Mary, Frances], [Frances, Luce], [Luce, ,], [,, J.], [J., Edward], [Edward, Russo], [Russo, ,], [,, Stijn], [Stijn, M.], [M.,  ], [ , J.], [J., van], [van, Osselaer], [Osselaer, Detlof], [Detlof, von], [von, Winterfeldt], [Winterfeldt, .]]

>> Trigrams: 
[[Ralph, L., Keeney], [L., Keeney, ,], [Keeney, ,, David], [,, David, H.], [David, H., Krantz], [H., Krantz, ,], [Krantz, ,, Howard], [,, Howard, C.], [Howard, C., Kun-], [C., Kun-, reuther], [Kun-, reuther, ,], [reuther, ,, Mary], [,, Mary, Frances], [Mary, Frances, Luce], [Frances, Luce, ,], [Luce, ,, J.], [,, J., Edward], [J., Edward, Russo], [Edward, Russo, ,], [Russo, ,, Stijn], [,, Stijn, M.], [Stijn, M.,  ], [M.,  , J.], [ , J., van], [J., van, Osselaer], [van, Osselaer, Detlof], [Osselaer, Detlof, von], [Detlof, von, Winterfeldt], [von, Winterfeldt, .]]

>> Noun Phrases are: 
[Ralph L. Keeney, David H. Krantz, Howard C. Kun- reuther, Mary Frances Luce, J. Edward Russo, Stijn M.  J. van Osselaer, Detlof von Winterfeldt]

>> Named Entities are: 
[('Ralph L. Keeney', 'PERSON'), ('David H. Krantz', 'PERSON'), ('Howard C. Kun-', 'PERSON'), ('Mary Frances Luce', 'PERSON'), ('J. Edward Russo', 'PERSON'), ('Stijn M.  ', 'PERSON'), ('J. van Osselaer', 'PERSON'), ('Detlof von Winterfeldt', 'PERSON')] 

------------------- Sentence 4 -------------------

A theoretical  framework for goal-based choice and for prescriptive  analysis. 


>> Tokens are: 
[theoretical,  , framework, goal, -, based, choice, prescriptive,  , analysis, .] 

>> PoS Tags are: 
[('theoretical', 'ADJ'), (' ', 'SPACE'), ('framework', 'NOUN'), ('goal', 'NOUN'), ('-', 'PUNCT'), ('based', 'VERB'), ('choice', 'NOUN'), ('prescriptive', 'ADJ'), (' ', 'SPACE'), ('analysis', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('theoretical', 'amod'), (' ', 'compound'), ('framework', 'ROOT'), ('goal', 'npadvmod'), ('-', 'punct'), ('based', 'amod'), ('choice', 'pobj'), ('prescriptive', 'amod'), (' ', 'prep'), ('analysis', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[theoretical,  ], [ , framework], [framework, goal], [goal, -], [-, based], [based, choice], [choice, prescriptive], [prescriptive,  ], [ , analysis], [analysis, .]]

>> Trigrams: 
[[theoretical,  , framework], [ , framework, goal], [framework, goal, -], [goal, -, based], [-, based, choice], [based, choice, prescriptive], [choice, prescriptive,  ], [prescriptive,  , analysis], [ , analysis, .]]

>> Noun Phrases are: 
[A theoretical  framework, goal-based choice, prescriptive  analysis]

>> Named Entities are: 
[] 

------------------- Sentence 5 -------------------

Marketing Letters, 19(3-4):241-254.   


>> Tokens are: 
[Marketing, Letters, ,, 19(3, -, 4):241, -, 254, .,  ] 

>> PoS Tags are: 
[('Marketing', 'NOUN'), ('Letters', 'PROPN'), (',', 'PUNCT'), ('19(3', 'NUM'), ('-', 'PUNCT'), ('4):241', 'NUM'), ('-', 'SYM'), ('254', 'NUM'), ('.', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Marketing', 'compound'), ('Letters', 'ROOT'), (',', 'punct'), ('19(3', 'npadvmod'), ('-', 'punct'), ('4):241', 'prep'), ('-', 'punct'), ('254', 'prep'), ('.', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[Marketing, Letters], [Letters, ,], [,, 19(3], [19(3, -], [-, 4):241], [4):241, -], [-, 254], [254, .], [.,  ]]

>> Trigrams: 
[[Marketing, Letters, ,], [Letters, ,, 19(3], [,, 19(3, -], [19(3, -, 4):241], [-, 4):241, -], [4):241, -, 254], [-, 254, .], [254, .,  ]]

>> Noun Phrases are: 
[Marketing Letters]

>> Named Entities are: 
[] 


================================ Paragraph 172 =================================

[Hammond et al., 1999] John Hammond, Ralph Keeney and  Howard Raiffa.  Smart Choices  - A practical guide to  making better decisions. Harvard Business School Press.  

------------------- Sentence 1 -------------------

[Hammond et al., 1999] John Hammond, Ralph Keeney and  Howard Raiffa. 


>> Tokens are: 
[[, Hammond, et, al, ., ,, 1999, ], John, Hammond, ,, Ralph, Keeney,  , Howard, Raiffa, .] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('Hammond', 'X'), ('et', 'NOUN'), ('al', 'PROPN'), ('.', 'PROPN'), (',', 'PUNCT'), ('1999', 'NUM'), (']', 'PUNCT'), ('John', 'PROPN'), ('Hammond', 'PROPN'), (',', 'PUNCT'), ('Ralph', 'PROPN'), ('Keeney', 'PROPN'), (' ', 'SPACE'), ('Howard', 'PROPN'), ('Raiffa', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('[', 'punct'), ('Hammond', 'nmod'), ('et', 'compound'), ('al', 'ROOT'), ('.', 'punct'), (',', 'punct'), ('1999', 'appos'), (']', 'punct'), ('John', 'compound'), ('Hammond', 'appos'), (',', 'punct'), ('Ralph', 'compound'), ('Keeney', 'conj'), (' ', 'compound'), ('Howard', 'compound'), ('Raiffa', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[[, Hammond], [Hammond, et], [et, al], [al, .], [., ,], [,, 1999], [1999, ]], [], John], [John, Hammond], [Hammond, ,], [,, Ralph], [Ralph, Keeney], [Keeney,  ], [ , Howard], [Howard, Raiffa], [Raiffa, .]]

>> Trigrams: 
[[[, Hammond, et], [Hammond, et, al], [et, al, .], [al, ., ,], [., ,, 1999], [,, 1999, ]], [1999, ], John], [], John, Hammond], [John, Hammond, ,], [Hammond, ,, Ralph], [,, Ralph, Keeney], [Ralph, Keeney,  ], [Keeney,  , Howard], [ , Howard, Raiffa], [Howard, Raiffa, .]]

>> Noun Phrases are: 
[[Hammond et al, John Hammond, Ralph Keeney,  Howard Raiffa]

>> Named Entities are: 
[('1999', 'DATE'), ('John Hammond', 'PERSON'), ('Ralph Keeney', 'PERSON'), ('Howard Raiffa', 'PERSON')] 

------------------- Sentence 2 -------------------

 Smart Choices  - A practical guide to  making better decisions. 


>> Tokens are: 
[ , Smart, Choices,  , -, practical, guide,  , making, better, decisions, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('Smart', 'PROPN'), ('Choices', 'PROPN'), (' ', 'SPACE'), ('-', 'PUNCT'), ('practical', 'ADJ'), ('guide', 'NOUN'), (' ', 'SPACE'), ('making', 'VERB'), ('better', 'ADJ'), ('decisions', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'nmod'), ('Smart', 'nmod'), ('Choices', 'nmod'), (' ', 'nmod'), ('-', 'punct'), ('practical', 'amod'), ('guide', 'ROOT'), (' ', 'pobj'), ('making', 'acl'), ('better', 'amod'), ('decisions', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[ , Smart], [Smart, Choices], [Choices,  ], [ , -], [-, practical], [practical, guide], [guide,  ], [ , making], [making, better], [better, decisions], [decisions, .]]

>> Trigrams: 
[[ , Smart, Choices], [Smart, Choices,  ], [Choices,  , -], [ , -, practical], [-, practical, guide], [practical, guide,  ], [guide,  , making], [ , making, better], [making, better, decisions], [better, decisions, .]]

>> Noun Phrases are: 
[ Smart Choices  - A practical guide, better decisions]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

Harvard Business School Press. 


>> Tokens are: 
[Harvard, Business, School, Press, .] 

>> PoS Tags are: 
[('Harvard', 'PROPN'), ('Business', 'PROPN'), ('School', 'PROPN'), ('Press', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Harvard', 'compound'), ('Business', 'compound'), ('School', 'compound'), ('Press', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Harvard, Business], [Business, School], [School, Press], [Press, .]]

>> Trigrams: 
[[Harvard, Business, School], [Business, School, Press], [School, Press, .]]

>> Noun Phrases are: 
[Harvard Business School Press]

>> Named Entities are: 
[('Harvard Business School Press', 'ORG')] 

------------------- Sentence 4 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 173 =================================

[Kahneman, and Frederick, 2002] Daniel Kahneman and  Shane Frederick. Representativeness revisited: attribute  substitution in intuitive judgment. In Heuristics and Bi- ases – The Psychology of Intuitive Judgement. Cam- bridge University Press.   

------------------- Sentence 1 -------------------

[Kahneman, and Frederick, 2002] Daniel Kahneman and  Shane Frederick. 


>> Tokens are: 
[[, Kahneman, ,, Frederick, ,, 2002, ], Daniel, Kahneman,  , Shane, Frederick, .] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('Kahneman', 'PROPN'), (',', 'PUNCT'), ('Frederick', 'PROPN'), (',', 'PUNCT'), ('2002', 'NUM'), (']', 'PUNCT'), ('Daniel', 'PROPN'), ('Kahneman', 'PROPN'), (' ', 'SPACE'), ('Shane', 'PROPN'), ('Frederick', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('[', 'punct'), ('Kahneman', 'ROOT'), (',', 'punct'), ('Frederick', 'conj'), (',', 'punct'), ('2002', 'appos'), (']', 'punct'), ('Daniel', 'compound'), ('Kahneman', 'appos'), (' ', 'compound'), ('Shane', 'compound'), ('Frederick', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[[, Kahneman], [Kahneman, ,], [,, Frederick], [Frederick, ,], [,, 2002], [2002, ]], [], Daniel], [Daniel, Kahneman], [Kahneman,  ], [ , Shane], [Shane, Frederick], [Frederick, .]]

>> Trigrams: 
[[[, Kahneman, ,], [Kahneman, ,, Frederick], [,, Frederick, ,], [Frederick, ,, 2002], [,, 2002, ]], [2002, ], Daniel], [], Daniel, Kahneman], [Daniel, Kahneman,  ], [Kahneman,  , Shane], [ , Shane, Frederick], [Shane, Frederick, .]]

>> Noun Phrases are: 
[[Kahneman, Frederick, Daniel Kahneman,  Shane Frederick]

>> Named Entities are: 
[('Kahneman', 'PERSON'), ('Frederick', 'GPE'), ('2002', 'DATE'), ('Daniel Kahneman', 'PERSON')] 

------------------- Sentence 2 -------------------

Representativeness revisited: attribute  substitution in intuitive judgment. 


>> Tokens are: 
[Representativeness, revisited, :, attribute,  , substitution, intuitive, judgment, .] 

>> PoS Tags are: 
[('Representativeness', 'PROPN'), ('revisited', 'VERB'), (':', 'PUNCT'), ('attribute', 'VERB'), (' ', 'SPACE'), ('substitution', 'NOUN'), ('intuitive', 'ADJ'), ('judgment', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Representativeness', 'nsubj'), ('revisited', 'ROOT'), (':', 'punct'), ('attribute', 'nmod'), (' ', 'dobj'), ('substitution', 'dobj'), ('intuitive', 'amod'), ('judgment', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Representativeness, revisited], [revisited, :], [:, attribute], [attribute,  ], [ , substitution], [substitution, intuitive], [intuitive, judgment], [judgment, .]]

>> Trigrams: 
[[Representativeness, revisited, :], [revisited, :, attribute], [:, attribute,  ], [attribute,  , substitution], [ , substitution, intuitive], [substitution, intuitive, judgment], [intuitive, judgment, .]]

>> Noun Phrases are: 
[Representativeness, attribute  substitution, intuitive judgment]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

In Heuristics and Bi- ases – The Psychology of Intuitive Judgement. 


>> Tokens are: 
[Heuristics, Bi-, ases, –, Psychology, Intuitive, Judgement, .] 

>> PoS Tags are: 
[('Heuristics', 'NOUN'), ('Bi-', 'ADV'), ('ases', 'NOUN'), ('–', 'PUNCT'), ('Psychology', 'NOUN'), ('Intuitive', 'PROPN'), ('Judgement', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Heuristics', 'pobj'), ('Bi-', 'compound'), ('ases', 'pobj'), ('–', 'punct'), ('Psychology', 'ROOT'), ('Intuitive', 'compound'), ('Judgement', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Heuristics, Bi-], [Bi-, ases], [ases, –], [–, Psychology], [Psychology, Intuitive], [Intuitive, Judgement], [Judgement, .]]

>> Trigrams: 
[[Heuristics, Bi-, ases], [Bi-, ases, –], [ases, –, Psychology], [–, Psychology, Intuitive], [Psychology, Intuitive, Judgement], [Intuitive, Judgement, .]]

>> Noun Phrases are: 
[Heuristics, Bi- ases, Intuitive Judgement]

>> Named Entities are: 
[('Heuristics', 'ORG'), ('The Psychology of Intuitive Judgement', 'WORK_OF_ART')] 

------------------- Sentence 4 -------------------

Cam- bridge University Press. 


>> Tokens are: 
[Cam-, bridge, University, Press, .] 

>> PoS Tags are: 
[('Cam-', 'PROPN'), ('bridge', 'NOUN'), ('University', 'PROPN'), ('Press', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Cam-', 'compound'), ('bridge', 'compound'), ('University', 'compound'), ('Press', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Cam-, bridge], [bridge, University], [University, Press], [Press, .]]

>> Trigrams: 
[[Cam-, bridge, University], [bridge, University, Press], [University, Press, .]]

>> Noun Phrases are: 
[Cam- bridge University Press]

>> Named Entities are: 
[('University Press', 'ORG')] 

------------------- Sentence 5 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 174 =================================

[Keeney, 1992] Ralph Keeney. Value-focused thinking: a  path to creative decision-making. Harvard University  Press.  

------------------- Sentence 1 -------------------

[Keeney, 1992] Ralph Keeney. 


>> Tokens are: 
[[, Keeney, ,, 1992, ], Ralph, Keeney, .] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('Keeney', 'PROPN'), (',', 'PUNCT'), ('1992', 'NUM'), (']', 'PUNCT'), ('Ralph', 'PROPN'), ('Keeney', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('[', 'punct'), ('Keeney', 'ROOT'), (',', 'punct'), ('1992', 'appos'), (']', 'punct'), ('Ralph', 'compound'), ('Keeney', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[[, Keeney], [Keeney, ,], [,, 1992], [1992, ]], [], Ralph], [Ralph, Keeney], [Keeney, .]]

>> Trigrams: 
[[[, Keeney, ,], [Keeney, ,, 1992], [,, 1992, ]], [1992, ], Ralph], [], Ralph, Keeney], [Ralph, Keeney, .]]

>> Noun Phrases are: 
[[Keeney, Ralph Keeney]

>> Named Entities are: 
[('Keeney', 'PERSON'), ('1992', 'DATE'), ('Ralph Keeney', 'PERSON')] 

------------------- Sentence 2 -------------------

Value-focused thinking: a  path to creative decision-making. 


>> Tokens are: 
[Value, -, focused, thinking, :,  , path, creative, decision, -, making, .] 

>> PoS Tags are: 
[('Value', 'NOUN'), ('-', 'PUNCT'), ('focused', 'VERB'), ('thinking', 'NOUN'), (':', 'PUNCT'), (' ', 'SPACE'), ('path', 'NOUN'), ('creative', 'ADJ'), ('decision', 'NOUN'), ('-', 'PUNCT'), ('making', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Value', 'npadvmod'), ('-', 'punct'), ('focused', 'amod'), ('thinking', 'ROOT'), (':', 'punct'), (' ', 'compound'), ('path', 'appos'), ('creative', 'amod'), ('decision', 'compound'), ('-', 'punct'), ('making', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[Value, -], [-, focused], [focused, thinking], [thinking, :], [:,  ], [ , path], [path, creative], [creative, decision], [decision, -], [-, making], [making, .]]

>> Trigrams: 
[[Value, -, focused], [-, focused, thinking], [focused, thinking, :], [thinking, :,  ], [:,  , path], [ , path, creative], [path, creative, decision], [creative, decision, -], [decision, -, making], [-, making, .]]

>> Noun Phrases are: 
[Value-focused thinking, a  path, creative decision-making]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

Harvard University  Press.   


>> Tokens are: 
[Harvard, University,  , Press, .,  ] 

>> PoS Tags are: 
[('Harvard', 'PROPN'), ('University', 'PROPN'), (' ', 'SPACE'), ('Press', 'PROPN'), ('.', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('Harvard', 'compound'), ('University', 'ROOT'), (' ', 'compound'), ('Press', 'appos'), ('.', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[Harvard, University], [University,  ], [ , Press], [Press, .], [.,  ]]

>> Trigrams: 
[[Harvard, University,  ], [University,  , Press], [ , Press, .], [Press, .,  ]]

>> Noun Phrases are: 
[Harvard University,  Press]

>> Named Entities are: 
[('Harvard University  Press', 'ORG')] 


================================ Paragraph 175 =================================

[Kowalski, 1975] Robert Kowalski. A proof procedure us- ing connection graphs, JACM, 22(4):572-595.  

------------------- Sentence 1 -------------------

[Kowalski, 1975] Robert Kowalski. 


>> Tokens are: 
[[, Kowalski, ,, 1975, ], Robert, Kowalski, .] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('Kowalski', 'PROPN'), (',', 'PUNCT'), ('1975', 'NUM'), (']', 'PUNCT'), ('Robert', 'PROPN'), ('Kowalski', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('[', 'punct'), ('Kowalski', 'ROOT'), (',', 'punct'), ('1975', 'appos'), (']', 'punct'), ('Robert', 'compound'), ('Kowalski', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[[, Kowalski], [Kowalski, ,], [,, 1975], [1975, ]], [], Robert], [Robert, Kowalski], [Kowalski, .]]

>> Trigrams: 
[[[, Kowalski, ,], [Kowalski, ,, 1975], [,, 1975, ]], [1975, ], Robert], [], Robert, Kowalski], [Robert, Kowalski, .]]

>> Noun Phrases are: 
[[Kowalski, Robert Kowalski]

>> Named Entities are: 
[('Kowalski', 'PERSON'), ('1975', 'DATE'), ('Robert Kowalski', 'PERSON')] 

------------------- Sentence 2 -------------------

A proof procedure us- ing connection graphs, JACM, 22(4):572-595. 


>> Tokens are: 
[proof, procedure, us-, ing, connection, graphs, ,, JACM, ,, 22(4):572, -, 595, .] 

>> PoS Tags are: 
[('proof', 'ADJ'), ('procedure', 'NOUN'), ('us-', 'NUM'), ('ing', 'ADJ'), ('connection', 'NOUN'), ('graphs', 'NOUN'), (',', 'PUNCT'), ('JACM', 'PROPN'), (',', 'PUNCT'), ('22(4):572', 'NUM'), ('-', 'PUNCT'), ('595', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('proof', 'amod'), ('procedure', 'ROOT'), ('us-', 'appos'), ('ing', 'amod'), ('connection', 'compound'), ('graphs', 'appos'), (',', 'punct'), ('JACM', 'npadvmod'), (',', 'punct'), ('22(4):572', 'npadvmod'), ('-', 'punct'), ('595', 'prep'), ('.', 'punct')]

>> Bigrams: 
[[proof, procedure], [procedure, us-], [us-, ing], [ing, connection], [connection, graphs], [graphs, ,], [,, JACM], [JACM, ,], [,, 22(4):572], [22(4):572, -], [-, 595], [595, .]]

>> Trigrams: 
[[proof, procedure, us-], [procedure, us-, ing], [us-, ing, connection], [ing, connection, graphs], [connection, graphs, ,], [graphs, ,, JACM], [,, JACM, ,], [JACM, ,, 22(4):572], [,, 22(4):572, -], [22(4):572, -, 595], [-, 595, .]]

>> Noun Phrases are: 
[A proof procedure, ing connection graphs]

>> Named Entities are: 
[('JACM', 'ORG'), ('22(4):572-595', 'CARDINAL')] 

------------------- Sentence 3 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 176 =================================

[Kowalski, 1979] Robert Kowalski.  Logic for Problem  Solving. North Holland Elsevier (1979). Also at  http://www.doc.ic.ac.uk/~rak/.  

------------------- Sentence 1 -------------------

[Kowalski, 1979] Robert Kowalski. 


>> Tokens are: 
[[, Kowalski, ,, 1979, ], Robert, Kowalski, .] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('Kowalski', 'PROPN'), (',', 'PUNCT'), ('1979', 'NUM'), (']', 'PUNCT'), ('Robert', 'PROPN'), ('Kowalski', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('[', 'punct'), ('Kowalski', 'ROOT'), (',', 'punct'), ('1979', 'appos'), (']', 'punct'), ('Robert', 'compound'), ('Kowalski', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[[, Kowalski], [Kowalski, ,], [,, 1979], [1979, ]], [], Robert], [Robert, Kowalski], [Kowalski, .]]

>> Trigrams: 
[[[, Kowalski, ,], [Kowalski, ,, 1979], [,, 1979, ]], [1979, ], Robert], [], Robert, Kowalski], [Robert, Kowalski, .]]

>> Noun Phrases are: 
[[Kowalski, Robert Kowalski]

>> Named Entities are: 
[('Kowalski', 'PERSON'), ('1979', 'DATE'), ('Robert Kowalski', 'PERSON')] 

------------------- Sentence 2 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

Logic for Problem  Solving. 


>> Tokens are: 
[Logic, Problem,  , Solving, .] 

>> PoS Tags are: 
[('Logic', 'PROPN'), ('Problem', 'PROPN'), (' ', 'SPACE'), ('Solving', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Logic', 'ROOT'), ('Problem', 'pobj'), (' ', 'compound'), ('Solving', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[Logic, Problem], [Problem,  ], [ , Solving], [Solving, .]]

>> Trigrams: 
[[Logic, Problem,  ], [Problem,  , Solving], [ , Solving, .]]

>> Noun Phrases are: 
[Logic, Problem,  Solving]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

North Holland Elsevier (1979). 


>> Tokens are: 
[North, Holland, Elsevier, (, 1979, ), .] 

>> PoS Tags are: 
[('North', 'PROPN'), ('Holland', 'PROPN'), ('Elsevier', 'PROPN'), ('(', 'PUNCT'), ('1979', 'NUM'), (')', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('North', 'compound'), ('Holland', 'compound'), ('Elsevier', 'ROOT'), ('(', 'punct'), ('1979', 'appos'), (')', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[North, Holland], [Holland, Elsevier], [Elsevier, (], [(, 1979], [1979, )], [), .]]

>> Trigrams: 
[[North, Holland, Elsevier], [Holland, Elsevier, (], [Elsevier, (, 1979], [(, 1979, )], [1979, ), .]]

>> Noun Phrases are: 
[North Holland Elsevier]

>> Named Entities are: 
[('North Holland', 'ORG'), ('1979', 'DATE')] 

------------------- Sentence 5 -------------------

Also at  http://www.doc.ic.ac.uk/~rak/.   


>> Tokens are: 
[ , http://www.doc.ic.ac.uk/~rak/.,  ] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('http://www.doc.ic.ac.uk/~rak/.', 'VERB'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'pobj'), ('http://www.doc.ic.ac.uk/~rak/.', 'ROOT'), (' ', 'dobj')]

>> Bigrams: 
[[ , http://www.doc.ic.ac.uk/~rak/.], [http://www.doc.ic.ac.uk/~rak/.,  ]]

>> Trigrams: 
[[ , http://www.doc.ic.ac.uk/~rak/.,  ]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 177 =================================

[Kowalski, 2011]. Robert Kowalski. Computational Logic  and Human Thinking – How to be Artificially Intelligent.  Cambridge University Press.  

------------------- Sentence 1 -------------------

[Kowalski, 2011]. 


>> Tokens are: 
[[, Kowalski, ,, 2011, ], .] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('Kowalski', 'PROPN'), (',', 'PUNCT'), ('2011', 'NUM'), (']', 'PUNCT'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('[', 'punct'), ('Kowalski', 'ROOT'), (',', 'punct'), ('2011', 'appos'), (']', 'punct'), ('.', 'punct')]

>> Bigrams: 
[[[, Kowalski], [Kowalski, ,], [,, 2011], [2011, ]], [], .]]

>> Trigrams: 
[[[, Kowalski, ,], [Kowalski, ,, 2011], [,, 2011, ]], [2011, ], .]]

>> Noun Phrases are: 
[[Kowalski]

>> Named Entities are: 
[('Kowalski', 'PERSON'), ('2011', 'DATE')] 

------------------- Sentence 2 -------------------

Robert Kowalski. 


>> Tokens are: 
[Robert, Kowalski, .] 

>> PoS Tags are: 
[('Robert', 'PROPN'), ('Kowalski', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Robert', 'compound'), ('Kowalski', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Robert, Kowalski], [Kowalski, .]]

>> Trigrams: 
[[Robert, Kowalski, .]]

>> Noun Phrases are: 
[Robert Kowalski]

>> Named Entities are: 
[('Robert Kowalski', 'PERSON')] 

------------------- Sentence 3 -------------------

Computational Logic  and Human Thinking – How to be Artificially Intelligent. 


>> Tokens are: 
[Computational, Logic,  , Human, Thinking, –, Artificially, Intelligent, .] 

>> PoS Tags are: 
[('Computational', 'PROPN'), ('Logic', 'PROPN'), (' ', 'SPACE'), ('Human', 'PROPN'), ('Thinking', 'NOUN'), ('–', 'PUNCT'), ('Artificially', 'ADV'), ('Intelligent', 'ADJ'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Computational', 'nmod'), ('Logic', 'nmod'), (' ', 'appos'), ('Human', 'compound'), ('Thinking', 'ROOT'), ('–', 'punct'), ('Artificially', 'advmod'), ('Intelligent', 'acomp'), ('.', 'punct')]

>> Bigrams: 
[[Computational, Logic], [Logic,  ], [ , Human], [Human, Thinking], [Thinking, –], [–, Artificially], [Artificially, Intelligent], [Intelligent, .]]

>> Trigrams: 
[[Computational, Logic,  ], [Logic,  , Human], [ , Human, Thinking], [Human, Thinking, –], [Thinking, –, Artificially], [–, Artificially, Intelligent], [Artificially, Intelligent, .]]

>> Noun Phrases are: 
[Computational Logic  and Human Thinking]

>> Named Entities are: 
[('Artificially Intelligent', 'PERSON')] 

------------------- Sentence 4 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 5 -------------------

Cambridge University Press. 


>> Tokens are: 
[Cambridge, University, Press, .] 

>> PoS Tags are: 
[('Cambridge', 'PROPN'), ('University', 'PROPN'), ('Press', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Cambridge', 'compound'), ('University', 'compound'), ('Press', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Cambridge, University], [University, Press], [Press, .]]

>> Trigrams: 
[[Cambridge, University, Press], [University, Press, .]]

>> Noun Phrases are: 
[Cambridge University Press]

>> Named Entities are: 
[('Cambridge University Press', 'ORG')] 

------------------- Sentence 6 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 178 =================================

 [Maes, 1990] Pattie Maes. Situated agents can have goals.  Robot. Autonomous Syst. 6(1-2):49-70.   

------------------- Sentence 1 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 2 -------------------

[Maes, 1990] Pattie Maes. 


>> Tokens are: 
[[, Maes, ,, 1990, ], Pattie, Maes, .] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('Maes', 'PROPN'), (',', 'PUNCT'), ('1990', 'NUM'), (']', 'PUNCT'), ('Pattie', 'PROPN'), ('Maes', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('[', 'punct'), ('Maes', 'ROOT'), (',', 'punct'), ('1990', 'appos'), (']', 'punct'), ('Pattie', 'compound'), ('Maes', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[[, Maes], [Maes, ,], [,, 1990], [1990, ]], [], Pattie], [Pattie, Maes], [Maes, .]]

>> Trigrams: 
[[[, Maes, ,], [Maes, ,, 1990], [,, 1990, ]], [1990, ], Pattie], [], Pattie, Maes], [Pattie, Maes, .]]

>> Noun Phrases are: 
[[Maes, Pattie Maes]

>> Named Entities are: 
[('Maes', 'PERSON'), ('1990', 'DATE'), ('Pattie Maes', 'PERSON')] 

------------------- Sentence 3 -------------------

Situated agents can have goals. 


>> Tokens are: 
[Situated, agents, goals, .] 

>> PoS Tags are: 
[('Situated', 'VERB'), ('agents', 'NOUN'), ('goals', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Situated', 'amod'), ('agents', 'nsubj'), ('goals', 'dobj'), ('.', 'punct')]

>> Bigrams: 
[[Situated, agents], [agents, goals], [goals, .]]

>> Trigrams: 
[[Situated, agents, goals], [agents, goals, .]]

>> Noun Phrases are: 
[Situated agents, goals]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 

------------------- Sentence 5 -------------------

Robot. 


>> Tokens are: 
[Robot, .] 

>> PoS Tags are: 
[('Robot', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Robot', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Robot, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Robot]

>> Named Entities are: 
[] 

------------------- Sentence 6 -------------------

Autonomous Syst. 


>> Tokens are: 
[Autonomous, Syst, .] 

>> PoS Tags are: 
[('Autonomous', 'PROPN'), ('Syst', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Autonomous', 'compound'), ('Syst', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Autonomous, Syst], [Syst, .]]

>> Trigrams: 
[[Autonomous, Syst, .]]

>> Noun Phrases are: 
[Autonomous Syst]

>> Named Entities are: 
[('Autonomous Syst', 'PERSON')] 

------------------- Sentence 7 -------------------

6(1-2):49-70. 


>> Tokens are: 
[6(1, -, 2):49, -, 70, .] 

>> PoS Tags are: 
[('6(1', 'NUM'), ('-', 'PUNCT'), ('2):49', 'PROPN'), ('-', 'PUNCT'), ('70', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('6(1', 'compound'), ('-', 'punct'), ('2):49', 'compound'), ('-', 'punct'), ('70', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[6(1, -], [-, 2):49], [2):49, -], [-, 70], [70, .]]

>> Trigrams: 
[[6(1, -, 2):49], [-, 2):49, -], [2):49, -, 70], [-, 70, .]]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('6(1-2):49-70', 'CARDINAL')] 

------------------- Sentence 8 -------------------

   


>> Tokens are: 
[  ] 

>> PoS Tags are: 
[('  ', 'SPACE')] 

>> Dependency Tags are: 
[('  ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 179 =================================

[Poole, 1997]  David Poole. The independent choice logic  for modeling multiple agents under uncertainty. Artifi- cial Intelligence, 94:7-56.  

------------------- Sentence 1 -------------------

[Poole, 1997]   


>> Tokens are: 
[[, Poole, ,, 1997, ],  ] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('Poole', 'PROPN'), (',', 'PUNCT'), ('1997', 'NUM'), (']', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('[', 'punct'), ('Poole', 'ROOT'), (',', 'punct'), ('1997', 'npadvmod'), (']', 'punct'), (' ', 'appos')]

>> Bigrams: 
[[[, Poole], [Poole, ,], [,, 1997], [1997, ]], [],  ]]

>> Trigrams: 
[[[, Poole, ,], [Poole, ,, 1997], [,, 1997, ]], [1997, ],  ]]

>> Noun Phrases are: 
[[Poole]

>> Named Entities are: 
[('Poole', 'ORG'), ('1997', 'DATE')] 

------------------- Sentence 2 -------------------

David Poole. 


>> Tokens are: 
[David, Poole, .] 

>> PoS Tags are: 
[('David', 'PROPN'), ('Poole', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('David', 'compound'), ('Poole', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[David, Poole], [Poole, .]]

>> Trigrams: 
[[David, Poole, .]]

>> Noun Phrases are: 
[David Poole]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

The independent choice logic  for modeling multiple agents under uncertainty. 


>> Tokens are: 
[independent, choice, logic,  , modeling, multiple, agents, uncertainty, .] 

>> PoS Tags are: 
[('independent', 'ADJ'), ('choice', 'NOUN'), ('logic', 'NOUN'), (' ', 'SPACE'), ('modeling', 'VERB'), ('multiple', 'ADJ'), ('agents', 'NOUN'), ('uncertainty', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('independent', 'amod'), ('choice', 'compound'), ('logic', 'ROOT'), (' ', 'appos'), ('modeling', 'pcomp'), ('multiple', 'amod'), ('agents', 'dobj'), ('uncertainty', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[independent, choice], [choice, logic], [logic,  ], [ , modeling], [modeling, multiple], [multiple, agents], [agents, uncertainty], [uncertainty, .]]

>> Trigrams: 
[[independent, choice, logic], [choice, logic,  ], [logic,  , modeling], [ , modeling, multiple], [modeling, multiple, agents], [multiple, agents, uncertainty], [agents, uncertainty, .]]

>> Noun Phrases are: 
[The independent choice logic, multiple agents, uncertainty]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

Artifi- cial Intelligence, 94:7-56. 


>> Tokens are: 
[Artifi-, cial, Intelligence, ,, 94:7, -, 56, .] 

>> PoS Tags are: 
[('Artifi-', 'ADV'), ('cial', 'NOUN'), ('Intelligence', 'PROPN'), (',', 'PUNCT'), ('94:7', 'NUM'), ('-', 'SYM'), ('56', 'NUM'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Artifi-', 'nmod'), ('cial', 'compound'), ('Intelligence', 'ROOT'), (',', 'punct'), ('94:7', 'npadvmod'), ('-', 'punct'), ('56', 'prep'), ('.', 'punct')]

>> Bigrams: 
[[Artifi-, cial], [cial, Intelligence], [Intelligence, ,], [,, 94:7], [94:7, -], [-, 56], [56, .]]

>> Trigrams: 
[[Artifi-, cial, Intelligence], [cial, Intelligence, ,], [Intelligence, ,, 94:7], [,, 94:7, -], [94:7, -, 56], [-, 56, .]]

>> Noun Phrases are: 
[Artifi- cial Intelligence]

>> Named Entities are: 
[('Intelligence', 'ORG'), ('94:7', 'CARDINAL')] 

------------------- Sentence 5 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 180 =================================

[Sperber, and Wilson, 1986] Daniel Sperber, and Deidre  Wilson.  Relevance. Blackwell, Oxford.  

------------------- Sentence 1 -------------------

[Sperber, and Wilson, 1986] Daniel Sperber, and Deidre  Wilson.   


>> Tokens are: 
[[, Sperber, ,, Wilson, ,, 1986, ], Daniel, Sperber, ,, Deidre,  , Wilson, .,  ] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('Sperber', 'PROPN'), (',', 'PUNCT'), ('Wilson', 'PROPN'), (',', 'PUNCT'), ('1986', 'NUM'), (']', 'PUNCT'), ('Daniel', 'PROPN'), ('Sperber', 'PROPN'), (',', 'PUNCT'), ('Deidre', 'PROPN'), (' ', 'SPACE'), ('Wilson', 'PROPN'), ('.', 'PUNCT'), (' ', 'SPACE')] 

>> Dependency Tags are: 
[('[', 'ROOT'), ('Sperber', 'nmod'), (',', 'punct'), ('Wilson', 'conj'), (',', 'punct'), ('1986', 'appos'), (']', 'punct'), ('Daniel', 'compound'), ('Sperber', 'appos'), (',', 'punct'), ('Deidre', 'compound'), (' ', 'compound'), ('Wilson', 'conj'), ('.', 'punct'), (' ', 'meta')]

>> Bigrams: 
[[[, Sperber], [Sperber, ,], [,, Wilson], [Wilson, ,], [,, 1986], [1986, ]], [], Daniel], [Daniel, Sperber], [Sperber, ,], [,, Deidre], [Deidre,  ], [ , Wilson], [Wilson, .], [.,  ]]

>> Trigrams: 
[[[, Sperber, ,], [Sperber, ,, Wilson], [,, Wilson, ,], [Wilson, ,, 1986], [,, 1986, ]], [1986, ], Daniel], [], Daniel, Sperber], [Daniel, Sperber, ,], [Sperber, ,, Deidre], [,, Deidre,  ], [Deidre,  , Wilson], [ , Wilson, .], [Wilson, .,  ]]

>> Noun Phrases are: 
[Daniel Sperber, Deidre  Wilson]

>> Named Entities are: 
[('Sperber', 'DATE'), ('Wilson', 'ORG'), ('1986', 'DATE'), ('Daniel Sperber', 'PERSON'), ('Deidre  Wilson', 'PERSON')] 

------------------- Sentence 2 -------------------

Relevance. 


>> Tokens are: 
[Relevance, .] 

>> PoS Tags are: 
[('Relevance', 'NOUN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Relevance', 'ROOT'), ('.', 'punct')]

>> Bigrams: 
[[Relevance, .]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Relevance]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

Blackwell, Oxford. 


>> Tokens are: 
[Blackwell, ,, Oxford, .] 

>> PoS Tags are: 
[('Blackwell', 'PROPN'), (',', 'PUNCT'), ('Oxford', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('Blackwell', 'ROOT'), (',', 'punct'), ('Oxford', 'npadvmod'), ('.', 'punct')]

>> Bigrams: 
[[Blackwell, ,], [,, Oxford], [Oxford, .]]

>> Trigrams: 
[[Blackwell, ,, Oxford], [,, Oxford, .]]

>> Noun Phrases are: 
[Blackwell]

>> Named Entities are: 
[('Blackwell', 'PERSON'), ('Oxford', 'ORG')] 

------------------- Sentence 4 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 181 =================================

[Williams, 1990, 1995] Joseph Williams. Style: Toward  Clarity and Grace. University of Chicago Press.  

------------------- Sentence 1 -------------------

[Williams, 1990, 1995] Joseph Williams. 


>> Tokens are: 
[[, Williams, ,, 1990, ,, 1995, ], Joseph, Williams, .] 

>> PoS Tags are: 
[('[', 'PUNCT'), ('Williams', 'PROPN'), (',', 'PUNCT'), ('1990', 'NUM'), (',', 'PUNCT'), ('1995', 'NUM'), (']', 'PUNCT'), ('Joseph', 'PROPN'), ('Williams', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('[', 'punct'), ('Williams', 'ROOT'), (',', 'punct'), ('1990', 'appos'), (',', 'punct'), ('1995', 'appos'), (']', 'punct'), ('Joseph', 'compound'), ('Williams', 'appos'), ('.', 'punct')]

>> Bigrams: 
[[[, Williams], [Williams, ,], [,, 1990], [1990, ,], [,, 1995], [1995, ]], [], Joseph], [Joseph, Williams], [Williams, .]]

>> Trigrams: 
[[[, Williams, ,], [Williams, ,, 1990], [,, 1990, ,], [1990, ,, 1995], [,, 1995, ]], [1995, ], Joseph], [], Joseph, Williams], [Joseph, Williams, .]]

>> Noun Phrases are: 
[[Williams, Joseph Williams]

>> Named Entities are: 
[('Williams', 'PERSON'), ('1990', 'DATE'), ('Joseph Williams', 'PERSON')] 

------------------- Sentence 2 -------------------

Style: 


>> Tokens are: 
[Style, :] 

>> PoS Tags are: 
[('Style', 'NOUN'), (':', 'PUNCT')] 

>> Dependency Tags are: 
[('Style', 'ROOT'), (':', 'punct')]

>> Bigrams: 
[[Style, :]]

>> Trigrams: 
[]

>> Noun Phrases are: 
[Style]

>> Named Entities are: 
[] 

------------------- Sentence 3 -------------------

Toward  Clarity and Grace. 


>> Tokens are: 
[ , Clarity, Grace, .] 

>> PoS Tags are: 
[(' ', 'SPACE'), ('Clarity', 'PROPN'), ('Grace', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[(' ', 'pobj'), ('Clarity', 'pobj'), ('Grace', 'conj'), ('.', 'punct')]

>> Bigrams: 
[[ , Clarity], [Clarity, Grace], [Grace, .]]

>> Trigrams: 
[[ , Clarity, Grace], [Clarity, Grace, .]]

>> Noun Phrases are: 
[Clarity, Grace]

>> Named Entities are: 
[] 

------------------- Sentence 4 -------------------

University of Chicago Press. 


>> Tokens are: 
[University, Chicago, Press, .] 

>> PoS Tags are: 
[('University', 'PROPN'), ('Chicago', 'PROPN'), ('Press', 'PROPN'), ('.', 'PUNCT')] 

>> Dependency Tags are: 
[('University', 'ROOT'), ('Chicago', 'compound'), ('Press', 'pobj'), ('.', 'punct')]

>> Bigrams: 
[[University, Chicago], [Chicago, Press], [Press, .]]

>> Trigrams: 
[[University, Chicago, Press], [Chicago, Press, .]]

>> Noun Phrases are: 
[University, Chicago Press]

>> Named Entities are: 
[('University of Chicago Press', 'ORG')] 

------------------- Sentence 5 -------------------

  


>> Tokens are: 
[ ] 

>> PoS Tags are: 
[(' ', 'SPACE')] 

>> Dependency Tags are: 
[(' ', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[] 


================================ Paragraph 182 =================================

16

------------------- Sentence 1 -------------------

16 


>> Tokens are: 
[16] 

>> PoS Tags are: 
[('16', 'NUM')] 

>> Dependency Tags are: 
[('16', 'ROOT')]

>> Bigrams: 
[]

>> Trigrams: 
[]

>> Noun Phrases are: 
[]

>> Named Entities are: 
[('16', 'CARDINAL')] 
